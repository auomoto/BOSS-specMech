
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  00001bb0  00001c64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a52  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015e  00005a52  00001a52  00001b06  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000031e  00802802  00802802  00001c66  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00001c66  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cc4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000240  00000000  00000000  00001d08  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004bc5  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000026be  00000000  00000000  00006b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000162f  00000000  00000000  000091cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000066c  00000000  00000000  0000a7fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001928  00000000  00000000  0000ae68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001d54  00000000  00000000  0000c790  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000190  00000000  00000000  0000e4e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
       4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      1c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      38:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      44:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_17>
      48:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_18>
      4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      54:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      58:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      5c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      60:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      64:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      68:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__vector_26>
      6c:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_27>
      70:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      74:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      78:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      7c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      80:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      84:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      88:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      8c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      90:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      94:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_37>
      98:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_38>
      9c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>

000000a0 <__ctors_end>:
      a0:	11 24       	eor	r1, r1
      a2:	1f be       	out	0x3f, r1	; 63
      a4:	cf ef       	ldi	r28, 0xFF	; 255
      a6:	cd bf       	out	0x3d, r28	; 61
      a8:	df e3       	ldi	r29, 0x3F	; 63
      aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_copy_data>:
      ac:	18 e2       	ldi	r17, 0x28	; 40
      ae:	a0 e0       	ldi	r26, 0x00	; 0
      b0:	b8 e2       	ldi	r27, 0x28	; 40
      b2:	e0 eb       	ldi	r30, 0xB0	; 176
      b4:	fb e1       	ldi	r31, 0x1B	; 27
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
      b8:	05 90       	lpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	a2 30       	cpi	r26, 0x02	; 2
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
      c2:	2b e2       	ldi	r18, 0x2B	; 43
      c4:	a2 e0       	ldi	r26, 0x02	; 2
      c6:	b8 e2       	ldi	r27, 0x28	; 40
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a0 32       	cpi	r26, 0x20	; 32
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	0e 94 d6 09 	call	0x13ac	; 0x13ac <main>
      d6:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <_exit>

000000da <__bad_interrupt>:
      da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <init_PORTS>:
	char blanks[] = "                ";	// Does const put this in flash?

	writestr_OLED(displaynumber, blanks, 1);
	writestr_OLED(displaynumber, blanks, 2);

}
      de:	e0 e0       	ldi	r30, 0x00	; 0
      e0:	f4 e0       	ldi	r31, 0x04	; 4
      e2:	88 e0       	ldi	r24, 0x08	; 8
      e4:	80 8b       	std	Z+16, r24	; 0x10
      e6:	81 8b       	std	Z+17, r24	; 0x11
      e8:	82 8b       	std	Z+18, r24	; 0x12
      ea:	83 8b       	std	Z+19, r24	; 0x13
      ec:	84 8b       	std	Z+20, r24	; 0x14
      ee:	85 8b       	std	Z+21, r24	; 0x15
      f0:	86 8b       	std	Z+22, r24	; 0x16
      f2:	87 8b       	std	Z+23, r24	; 0x17
      f4:	e0 e2       	ldi	r30, 0x20	; 32
      f6:	f4 e0       	ldi	r31, 0x04	; 4
      f8:	80 8b       	std	Z+16, r24	; 0x10
      fa:	81 8b       	std	Z+17, r24	; 0x11
      fc:	82 8b       	std	Z+18, r24	; 0x12
      fe:	83 8b       	std	Z+19, r24	; 0x13
     100:	84 8b       	std	Z+20, r24	; 0x14
     102:	85 8b       	std	Z+21, r24	; 0x15
     104:	e0 e4       	ldi	r30, 0x40	; 64
     106:	f4 e0       	ldi	r31, 0x04	; 4
     108:	80 8b       	std	Z+16, r24	; 0x10
     10a:	81 8b       	std	Z+17, r24	; 0x11
     10c:	82 8b       	std	Z+18, r24	; 0x12
     10e:	83 8b       	std	Z+19, r24	; 0x13
     110:	84 8b       	std	Z+20, r24	; 0x14
     112:	85 8b       	std	Z+21, r24	; 0x15
     114:	86 8b       	std	Z+22, r24	; 0x16
     116:	87 8b       	std	Z+23, r24	; 0x17
     118:	e0 e6       	ldi	r30, 0x60	; 96
     11a:	f4 e0       	ldi	r31, 0x04	; 4
     11c:	94 e0       	ldi	r25, 0x04	; 4
     11e:	90 8b       	std	Z+16, r25	; 0x10
     120:	91 8b       	std	Z+17, r25	; 0x11
     122:	92 8b       	std	Z+18, r25	; 0x12
     124:	93 8b       	std	Z+19, r25	; 0x13
     126:	94 8b       	std	Z+20, r25	; 0x14
     128:	95 8b       	std	Z+21, r25	; 0x15
     12a:	96 8b       	std	Z+22, r25	; 0x16
     12c:	97 8b       	std	Z+23, r25	; 0x17
     12e:	e0 e8       	ldi	r30, 0x80	; 128
     130:	f4 e0       	ldi	r31, 0x04	; 4
     132:	80 8b       	std	Z+16, r24	; 0x10
     134:	81 8b       	std	Z+17, r24	; 0x11
     136:	82 8b       	std	Z+18, r24	; 0x12
     138:	83 8b       	std	Z+19, r24	; 0x13
     13a:	e0 ea       	ldi	r30, 0xA0	; 160
     13c:	f4 e0       	ldi	r31, 0x04	; 4
     13e:	80 8b       	std	Z+16, r24	; 0x10
     140:	81 8b       	std	Z+17, r24	; 0x11
     142:	82 8b       	std	Z+18, r24	; 0x12
     144:	83 8b       	std	Z+19, r24	; 0x13
     146:	84 8b       	std	Z+20, r24	; 0x14
     148:	85 8b       	std	Z+21, r24	; 0x15
     14a:	86 8b       	std	Z+22, r24	; 0x16
     14c:	08 95       	ret

0000014e <init_LED>:
     14e:	e0 ea       	ldi	r30, 0xA0	; 160
     150:	f4 e0       	ldi	r31, 0x04	; 4
     152:	80 e2       	ldi	r24, 0x20	; 32
     154:	85 83       	std	Z+5, r24	; 0x05
     156:	81 83       	std	Z+1, r24	; 0x01
     158:	08 95       	ret

0000015a <init_TWI>:
     15a:	e0 ea       	ldi	r30, 0xA0	; 160
     15c:	f8 e0       	ldi	r31, 0x08	; 8
     15e:	8b e0       	ldi	r24, 0x0B	; 11
     160:	86 83       	std	Z+6, r24	; 0x06
     162:	83 81       	ldd	r24, Z+3	; 0x03
     164:	81 60       	ori	r24, 0x01	; 1
     166:	83 83       	std	Z+3, r24	; 0x03
     168:	85 81       	ldd	r24, Z+5	; 0x05
     16a:	81 60       	ori	r24, 0x01	; 1
     16c:	85 83       	std	Z+5, r24	; 0x05
     16e:	08 95       	ret

00000170 <read_TWI>:
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	ec 01       	movw	r28, r24
     176:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
     17a:	88 23       	and	r24, r24
     17c:	34 f0       	brlt	.+12     	; 0x18a <read_TWI+0x1a>
     17e:	e0 ea       	ldi	r30, 0xA0	; 160
     180:	f8 e0       	ldi	r31, 0x08	; 8
     182:	00 00       	nop
     184:	95 81       	ldd	r25, Z+5	; 0x05
     186:	99 23       	and	r25, r25
     188:	e4 f7       	brge	.-8      	; 0x182 <read_TWI+0x12>
     18a:	de 01       	movw	r26, r28
     18c:	11 96       	adiw	r26, 0x01	; 1
     18e:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>
     192:	88 83       	st	Y, r24
     194:	62 30       	cpi	r22, 0x02	; 2
     196:	b8 f0       	brcs	.+46     	; 0x1c6 <read_TWI+0x56>
     198:	62 50       	subi	r22, 0x02	; 2
     19a:	26 2f       	mov	r18, r22
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	2e 5f       	subi	r18, 0xFE	; 254
     1a0:	3f 4f       	sbci	r19, 0xFF	; 255
     1a2:	2c 0f       	add	r18, r28
     1a4:	3d 1f       	adc	r19, r29
     1a6:	e0 ea       	ldi	r30, 0xA0	; 160
     1a8:	f8 e0       	ldi	r31, 0x08	; 8
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	84 83       	std	Z+4, r24	; 0x04
     1ae:	95 81       	ldd	r25, Z+5	; 0x05
     1b0:	99 23       	and	r25, r25
     1b2:	24 f0       	brlt	.+8      	; 0x1bc <read_TWI+0x4c>
     1b4:	00 00       	nop
     1b6:	95 81       	ldd	r25, Z+5	; 0x05
     1b8:	99 23       	and	r25, r25
     1ba:	e4 f7       	brge	.-8      	; 0x1b4 <read_TWI+0x44>
     1bc:	90 85       	ldd	r25, Z+8	; 0x08
     1be:	9d 93       	st	X+, r25
     1c0:	a2 17       	cp	r26, r18
     1c2:	b3 07       	cpc	r27, r19
     1c4:	99 f7       	brne	.-26     	; 0x1ac <read_TWI+0x3c>
     1c6:	86 e0       	ldi	r24, 0x06	; 6
     1c8:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	08 95       	ret

000001d2 <start_TWI>:
     1d2:	61 30       	cpi	r22, 0x01	; 1
     1d4:	61 f4       	brne	.+24     	; 0x1ee <start_TWI+0x1c>
     1d6:	81 60       	ori	r24, 0x01	; 1
     1d8:	e0 ea       	ldi	r30, 0xA0	; 160
     1da:	f8 e0       	ldi	r31, 0x08	; 8
     1dc:	87 83       	std	Z+7, r24	; 0x07
     1de:	85 81       	ldd	r24, Z+5	; 0x05
     1e0:	88 23       	and	r24, r24
     1e2:	94 f0       	brlt	.+36     	; 0x208 <start_TWI+0x36>
     1e4:	00 00       	nop
     1e6:	85 81       	ldd	r24, Z+5	; 0x05
     1e8:	88 23       	and	r24, r24
     1ea:	e4 f7       	brge	.-8      	; 0x1e4 <start_TWI+0x12>
     1ec:	0d c0       	rjmp	.+26     	; 0x208 <start_TWI+0x36>
     1ee:	61 11       	cpse	r22, r1
     1f0:	0b c0       	rjmp	.+22     	; 0x208 <start_TWI+0x36>
     1f2:	8e 7f       	andi	r24, 0xFE	; 254
     1f4:	e0 ea       	ldi	r30, 0xA0	; 160
     1f6:	f8 e0       	ldi	r31, 0x08	; 8
     1f8:	87 83       	std	Z+7, r24	; 0x07
     1fa:	85 81       	ldd	r24, Z+5	; 0x05
     1fc:	86 fd       	sbrc	r24, 6
     1fe:	04 c0       	rjmp	.+8      	; 0x208 <start_TWI+0x36>
     200:	00 00       	nop
     202:	85 81       	ldd	r24, Z+5	; 0x05
     204:	86 ff       	sbrs	r24, 6
     206:	fc cf       	rjmp	.-8      	; 0x200 <start_TWI+0x2e>
     208:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
     20c:	83 fd       	sbrc	r24, 3
     20e:	07 c0       	rjmp	.+14     	; 0x21e <start_TWI+0x4c>
     210:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
     214:	89 2f       	mov	r24, r25
     216:	84 70       	andi	r24, 0x04	; 4
     218:	92 fd       	sbrc	r25, 2
     21a:	03 c0       	rjmp	.+6      	; 0x222 <start_TWI+0x50>
     21c:	08 95       	ret
     21e:	83 e0       	ldi	r24, 0x03	; 3
     220:	08 95       	ret
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	08 95       	ret

00000226 <write_TWI>:
     226:	66 23       	and	r22, r22
     228:	b1 f0       	breq	.+44     	; 0x256 <write_TWI+0x30>
     22a:	dc 01       	movw	r26, r24
     22c:	61 50       	subi	r22, 0x01	; 1
     22e:	26 2f       	mov	r18, r22
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	2f 5f       	subi	r18, 0xFF	; 255
     234:	3f 4f       	sbci	r19, 0xFF	; 255
     236:	28 0f       	add	r18, r24
     238:	39 1f       	adc	r19, r25
     23a:	e0 ea       	ldi	r30, 0xA0	; 160
     23c:	f8 e0       	ldi	r31, 0x08	; 8
     23e:	9d 91       	ld	r25, X+
     240:	90 87       	std	Z+8, r25	; 0x08
     242:	95 81       	ldd	r25, Z+5	; 0x05
     244:	96 fd       	sbrc	r25, 6
     246:	04 c0       	rjmp	.+8      	; 0x250 <write_TWI+0x2a>
     248:	00 00       	nop
     24a:	95 81       	ldd	r25, Z+5	; 0x05
     24c:	96 ff       	sbrs	r25, 6
     24e:	fc cf       	rjmp	.-8      	; 0x248 <write_TWI+0x22>
     250:	a2 17       	cp	r26, r18
     252:	b3 07       	cpc	r27, r19
     254:	a1 f7       	brne	.-24     	; 0x23e <write_TWI+0x18>
     256:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
     25a:	89 2f       	mov	r24, r25
     25c:	80 71       	andi	r24, 0x10	; 16
     25e:	94 ff       	sbrs	r25, 4
     260:	04 c0       	rjmp	.+8      	; 0x26a <write_TWI+0x44>
     262:	87 e0       	ldi	r24, 0x07	; 7
     264:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
     268:	84 e0       	ldi	r24, 0x04	; 4
     26a:	08 95       	ret

0000026c <init_USART>:
     26c:	e0 e0       	ldi	r30, 0x00	; 0
     26e:	f4 e0       	ldi	r31, 0x04	; 4
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	85 83       	std	Z+5, r24	; 0x05
     274:	81 83       	std	Z+1, r24	; 0x01
     276:	e0 e0       	ldi	r30, 0x00	; 0
     278:	f8 e0       	ldi	r31, 0x08	; 8
     27a:	2d e6       	ldi	r18, 0x6D	; 109
     27c:	35 e0       	ldi	r19, 0x05	; 5
     27e:	20 87       	std	Z+8, r18	; 0x08
     280:	31 87       	std	Z+9, r19	; 0x09
     282:	95 81       	ldd	r25, Z+5	; 0x05
     284:	90 68       	ori	r25, 0x80	; 128
     286:	95 83       	std	Z+5, r25	; 0x05
     288:	96 81       	ldd	r25, Z+6	; 0x06
     28a:	90 64       	ori	r25, 0x40	; 64
     28c:	96 83       	std	Z+6, r25	; 0x06
     28e:	96 81       	ldd	r25, Z+6	; 0x06
     290:	90 68       	ori	r25, 0x80	; 128
     292:	96 83       	std	Z+6, r25	; 0x06
     294:	10 92 8c 29 	sts	0x298C, r1	; 0x80298c <send0_buf+0x80>
     298:	10 92 8d 29 	sts	0x298D, r1	; 0x80298d <send0_buf+0x81>
     29c:	80 93 90 29 	sts	0x2990, r24	; 0x802990 <send0_buf+0x84>
     2a0:	10 92 07 29 	sts	0x2907, r1	; 0x802907 <recv0_buf+0x80>
     2a4:	10 92 08 29 	sts	0x2908, r1	; 0x802908 <recv0_buf+0x81>
     2a8:	10 92 87 28 	sts	0x2887, r1	; 0x802887 <recv0_buf>
     2ac:	10 92 0b 29 	sts	0x290B, r1	; 0x80290b <recv0_buf+0x84>
     2b0:	e0 e4       	ldi	r30, 0x40	; 64
     2b2:	f4 e0       	ldi	r31, 0x04	; 4
     2b4:	85 83       	std	Z+5, r24	; 0x05
     2b6:	81 83       	std	Z+1, r24	; 0x01
     2b8:	e0 e2       	ldi	r30, 0x20	; 32
     2ba:	f8 e0       	ldi	r31, 0x08	; 8
     2bc:	20 87       	std	Z+8, r18	; 0x08
     2be:	31 87       	std	Z+9, r19	; 0x09
     2c0:	96 81       	ldd	r25, Z+6	; 0x06
     2c2:	90 64       	ori	r25, 0x40	; 64
     2c4:	96 83       	std	Z+6, r25	; 0x06
     2c6:	96 81       	ldd	r25, Z+6	; 0x06
     2c8:	90 68       	ori	r25, 0x80	; 128
     2ca:	96 83       	std	Z+6, r25	; 0x06
     2cc:	80 93 1f 2b 	sts	0x2B1F, r24	; 0x802b1f <send1_buf+0x84>
     2d0:	10 92 86 28 	sts	0x2886, r1	; 0x802886 <__data_end+0x84>
     2d4:	e0 e2       	ldi	r30, 0x20	; 32
     2d6:	f4 e0       	ldi	r31, 0x04	; 4
     2d8:	85 83       	std	Z+5, r24	; 0x05
     2da:	81 83       	std	Z+1, r24	; 0x01
     2dc:	e0 e6       	ldi	r30, 0x60	; 96
     2de:	f8 e0       	ldi	r31, 0x08	; 8
     2e0:	20 87       	std	Z+8, r18	; 0x08
     2e2:	31 87       	std	Z+9, r19	; 0x09
     2e4:	96 81       	ldd	r25, Z+6	; 0x06
     2e6:	90 64       	ori	r25, 0x40	; 64
     2e8:	96 83       	std	Z+6, r25	; 0x06
     2ea:	96 81       	ldd	r25, Z+6	; 0x06
     2ec:	90 68       	ori	r25, 0x80	; 128
     2ee:	96 83       	std	Z+6, r25	; 0x06
     2f0:	80 93 9a 2a 	sts	0x2A9A, r24	; 0x802a9a <send3_buf+0x84>
     2f4:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <recv3_buf+0x84>
     2f8:	08 95       	ret

000002fa <send_USART>:
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	81 30       	cpi	r24, 0x01	; 1
     300:	39 f0       	breq	.+14     	; 0x310 <send_USART+0x16>
     302:	48 f0       	brcs	.+18     	; 0x316 <send_USART+0x1c>
     304:	83 30       	cpi	r24, 0x03	; 3
     306:	09 f0       	breq	.+2      	; 0x30a <send_USART+0x10>
     308:	70 c0       	rjmp	.+224    	; 0x3ea <send_USART+0xf0>
     30a:	41 11       	cpse	r20, r1
     30c:	4c c0       	rjmp	.+152    	; 0x3a6 <send_USART+0xac>
     30e:	68 c0       	rjmp	.+208    	; 0x3e0 <send_USART+0xe6>
     310:	41 11       	cpse	r20, r1
     312:	26 c0       	rjmp	.+76     	; 0x360 <send_USART+0x66>
     314:	42 c0       	rjmp	.+132    	; 0x39a <send_USART+0xa0>
     316:	44 23       	and	r20, r20
     318:	e9 f0       	breq	.+58     	; 0x354 <send_USART+0x5a>
     31a:	fb 01       	movw	r30, r22
     31c:	41 50       	subi	r20, 0x01	; 1
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	4f 5f       	subi	r20, 0xFF	; 255
     322:	5f 4f       	sbci	r21, 0xFF	; 255
     324:	64 0f       	add	r22, r20
     326:	75 1f       	adc	r23, r21
     328:	ac e8       	ldi	r26, 0x8C	; 140
     32a:	b9 e2       	ldi	r27, 0x29	; 41
     32c:	8c 91       	ld	r24, X
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	21 91       	ld	r18, Z+
     332:	ec 01       	movw	r28, r24
     334:	c4 5f       	subi	r28, 0xF4	; 244
     336:	d6 4d       	sbci	r29, 0xD6	; 214
     338:	28 83       	st	Y, r18
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	8f 77       	andi	r24, 0x7F	; 127
     33e:	90 78       	andi	r25, 0x80	; 128
     340:	99 23       	and	r25, r25
     342:	24 f4       	brge	.+8      	; 0x34c <send_USART+0x52>
     344:	01 97       	sbiw	r24, 0x01	; 1
     346:	80 68       	ori	r24, 0x80	; 128
     348:	9f 6f       	ori	r25, 0xFF	; 255
     34a:	01 96       	adiw	r24, 0x01	; 1
     34c:	8c 93       	st	X, r24
     34e:	6e 17       	cp	r22, r30
     350:	7f 07       	cpc	r23, r31
     352:	61 f7       	brne	.-40     	; 0x32c <send_USART+0x32>
     354:	e0 e0       	ldi	r30, 0x00	; 0
     356:	f8 e0       	ldi	r31, 0x08	; 8
     358:	85 81       	ldd	r24, Z+5	; 0x05
     35a:	80 62       	ori	r24, 0x20	; 32
     35c:	85 83       	std	Z+5, r24	; 0x05
     35e:	45 c0       	rjmp	.+138    	; 0x3ea <send_USART+0xf0>
     360:	fb 01       	movw	r30, r22
     362:	41 50       	subi	r20, 0x01	; 1
     364:	50 e0       	ldi	r21, 0x00	; 0
     366:	4f 5f       	subi	r20, 0xFF	; 255
     368:	5f 4f       	sbci	r21, 0xFF	; 255
     36a:	64 0f       	add	r22, r20
     36c:	75 1f       	adc	r23, r21
     36e:	ab e1       	ldi	r26, 0x1B	; 27
     370:	bb e2       	ldi	r27, 0x2B	; 43
     372:	8c 91       	ld	r24, X
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	21 91       	ld	r18, Z+
     378:	ec 01       	movw	r28, r24
     37a:	c5 56       	subi	r28, 0x65	; 101
     37c:	d5 4d       	sbci	r29, 0xD5	; 213
     37e:	28 83       	st	Y, r18
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	8f 77       	andi	r24, 0x7F	; 127
     384:	90 78       	andi	r25, 0x80	; 128
     386:	99 23       	and	r25, r25
     388:	24 f4       	brge	.+8      	; 0x392 <send_USART+0x98>
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	80 68       	ori	r24, 0x80	; 128
     38e:	9f 6f       	ori	r25, 0xFF	; 255
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	8c 93       	st	X, r24
     394:	6e 17       	cp	r22, r30
     396:	7f 07       	cpc	r23, r31
     398:	61 f7       	brne	.-40     	; 0x372 <send_USART+0x78>
     39a:	e0 e2       	ldi	r30, 0x20	; 32
     39c:	f8 e0       	ldi	r31, 0x08	; 8
     39e:	85 81       	ldd	r24, Z+5	; 0x05
     3a0:	80 62       	ori	r24, 0x20	; 32
     3a2:	85 83       	std	Z+5, r24	; 0x05
     3a4:	22 c0       	rjmp	.+68     	; 0x3ea <send_USART+0xf0>
     3a6:	fb 01       	movw	r30, r22
     3a8:	41 50       	subi	r20, 0x01	; 1
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	4f 5f       	subi	r20, 0xFF	; 255
     3ae:	5f 4f       	sbci	r21, 0xFF	; 255
     3b0:	64 0f       	add	r22, r20
     3b2:	75 1f       	adc	r23, r21
     3b4:	a6 e9       	ldi	r26, 0x96	; 150
     3b6:	ba e2       	ldi	r27, 0x2A	; 42
     3b8:	8c 91       	ld	r24, X
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	21 91       	ld	r18, Z+
     3be:	ec 01       	movw	r28, r24
     3c0:	ca 5e       	subi	r28, 0xEA	; 234
     3c2:	d5 4d       	sbci	r29, 0xD5	; 213
     3c4:	28 83       	st	Y, r18
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	8f 77       	andi	r24, 0x7F	; 127
     3ca:	90 78       	andi	r25, 0x80	; 128
     3cc:	99 23       	and	r25, r25
     3ce:	24 f4       	brge	.+8      	; 0x3d8 <send_USART+0xde>
     3d0:	01 97       	sbiw	r24, 0x01	; 1
     3d2:	80 68       	ori	r24, 0x80	; 128
     3d4:	9f 6f       	ori	r25, 0xFF	; 255
     3d6:	01 96       	adiw	r24, 0x01	; 1
     3d8:	8c 93       	st	X, r24
     3da:	6e 17       	cp	r22, r30
     3dc:	7f 07       	cpc	r23, r31
     3de:	61 f7       	brne	.-40     	; 0x3b8 <send_USART+0xbe>
     3e0:	e0 e6       	ldi	r30, 0x60	; 96
     3e2:	f8 e0       	ldi	r31, 0x08	; 8
     3e4:	85 81       	ldd	r24, Z+5	; 0x05
     3e6:	80 62       	ori	r24, 0x20	; 32
     3e8:	85 83       	std	Z+5, r24	; 0x05
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <__vector_17>:
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	8f 93       	push	r24
     3fc:	9f 93       	push	r25
     3fe:	ef 93       	push	r30
     400:	ff 93       	push	r31
     402:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
     406:	8d 30       	cpi	r24, 0x0D	; 13
     408:	51 f4       	brne	.+20     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	80 93 0b 29 	sts	0x290B, r24	; 0x80290b <recv0_buf+0x84>
     410:	e0 91 07 29 	lds	r30, 0x2907	; 0x802907 <recv0_buf+0x80>
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	e9 57       	subi	r30, 0x79	; 121
     418:	f7 4d       	sbci	r31, 0xD7	; 215
     41a:	10 82       	st	Z, r1
     41c:	06 c0       	rjmp	.+12     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     41e:	e0 91 07 29 	lds	r30, 0x2907	; 0x802907 <recv0_buf+0x80>
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	e9 57       	subi	r30, 0x79	; 121
     426:	f7 4d       	sbci	r31, 0xD7	; 215
     428:	80 83       	st	Z, r24
     42a:	e7 e0       	ldi	r30, 0x07	; 7
     42c:	f9 e2       	ldi	r31, 0x29	; 41
     42e:	80 81       	ld	r24, Z
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	01 96       	adiw	r24, 0x01	; 1
     434:	8f 77       	andi	r24, 0x7F	; 127
     436:	90 78       	andi	r25, 0x80	; 128
     438:	99 23       	and	r25, r25
     43a:	24 f4       	brge	.+8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	80 68       	ori	r24, 0x80	; 128
     440:	9f 6f       	ori	r25, 0xFF	; 255
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	80 83       	st	Z, r24
     446:	ff 91       	pop	r31
     448:	ef 91       	pop	r30
     44a:	9f 91       	pop	r25
     44c:	8f 91       	pop	r24
     44e:	0f 90       	pop	r0
     450:	0f be       	out	0x3f, r0	; 63
     452:	0f 90       	pop	r0
     454:	1f 90       	pop	r1
     456:	18 95       	reti

00000458 <__vector_18>:
     458:	1f 92       	push	r1
     45a:	0f 92       	push	r0
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	0f 92       	push	r0
     460:	11 24       	eor	r1, r1
     462:	8f 93       	push	r24
     464:	9f 93       	push	r25
     466:	ef 93       	push	r30
     468:	ff 93       	push	r31
     46a:	e0 e0       	ldi	r30, 0x00	; 0
     46c:	f8 e0       	ldi	r31, 0x08	; 8
     46e:	85 81       	ldd	r24, Z+5	; 0x05
     470:	8f 7d       	andi	r24, 0xDF	; 223
     472:	85 83       	std	Z+5, r24	; 0x05
     474:	e0 91 8d 29 	lds	r30, 0x298D	; 0x80298d <send0_buf+0x81>
     478:	80 91 8c 29 	lds	r24, 0x298C	; 0x80298c <send0_buf+0x80>
     47c:	8e 17       	cp	r24, r30
     47e:	81 f0       	breq	.+32     	; 0x4a0 <__vector_18+0x48>
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	8e 0f       	add	r24, r30
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	e4 5f       	subi	r30, 0xF4	; 244
     488:	f6 4d       	sbci	r31, 0xD6	; 214
     48a:	90 81       	ld	r25, Z
     48c:	e0 e0       	ldi	r30, 0x00	; 0
     48e:	f8 e0       	ldi	r31, 0x08	; 8
     490:	92 83       	std	Z+2, r25	; 0x02
     492:	8f 77       	andi	r24, 0x7F	; 127
     494:	80 93 8d 29 	sts	0x298D, r24	; 0x80298d <send0_buf+0x81>
     498:	85 81       	ldd	r24, Z+5	; 0x05
     49a:	80 62       	ori	r24, 0x20	; 32
     49c:	85 83       	std	Z+5, r24	; 0x05
     49e:	03 c0       	rjmp	.+6      	; 0x4a6 <__vector_18+0x4e>
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	80 93 90 29 	sts	0x2990, r24	; 0x802990 <send0_buf+0x84>
     4a6:	ff 91       	pop	r31
     4a8:	ef 91       	pop	r30
     4aa:	9f 91       	pop	r25
     4ac:	8f 91       	pop	r24
     4ae:	0f 90       	pop	r0
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	0f 90       	pop	r0
     4b4:	1f 90       	pop	r1
     4b6:	18 95       	reti

000004b8 <__vector_26>:
     4b8:	1f 92       	push	r1
     4ba:	0f 92       	push	r0
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	0f 92       	push	r0
     4c0:	11 24       	eor	r1, r1
     4c2:	8f 93       	push	r24
     4c4:	9f 93       	push	r25
     4c6:	af 93       	push	r26
     4c8:	bf 93       	push	r27
     4ca:	ef 93       	push	r30
     4cc:	ff 93       	push	r31
     4ce:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
     4d2:	8d 30       	cpi	r24, 0x0D	; 13
     4d4:	21 f0       	breq	.+8      	; 0x4de <__vector_26+0x26>
     4d6:	e0 91 85 28 	lds	r30, 0x2885	; 0x802885 <__data_end+0x83>
     4da:	ef 37       	cpi	r30, 0x7F	; 127
     4dc:	78 f0       	brcs	.+30     	; 0x4fc <__vector_26+0x44>
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	80 93 86 28 	sts	0x2886, r24	; 0x802886 <__data_end+0x84>
     4e4:	a5 e8       	ldi	r26, 0x85	; 133
     4e6:	b8 e2       	ldi	r27, 0x28	; 40
     4e8:	8c 91       	ld	r24, X
     4ea:	e8 2f       	mov	r30, r24
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	ee 5f       	subi	r30, 0xFE	; 254
     4f0:	f7 4d       	sbci	r31, 0xD7	; 215
     4f2:	10 82       	st	Z, r1
     4f4:	80 93 84 28 	sts	0x2884, r24	; 0x802884 <__data_end+0x82>
     4f8:	1c 92       	st	X, r1
     4fa:	08 c0       	rjmp	.+16     	; 0x50c <__vector_26+0x54>
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	9e 0f       	add	r25, r30
     500:	90 93 85 28 	sts	0x2885, r25	; 0x802885 <__data_end+0x83>
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	ee 5f       	subi	r30, 0xFE	; 254
     508:	f7 4d       	sbci	r31, 0xD7	; 215
     50a:	80 83       	st	Z, r24
     50c:	ff 91       	pop	r31
     50e:	ef 91       	pop	r30
     510:	bf 91       	pop	r27
     512:	af 91       	pop	r26
     514:	9f 91       	pop	r25
     516:	8f 91       	pop	r24
     518:	0f 90       	pop	r0
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	0f 90       	pop	r0
     51e:	1f 90       	pop	r1
     520:	18 95       	reti

00000522 <__vector_27>:
     522:	1f 92       	push	r1
     524:	0f 92       	push	r0
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	0f 92       	push	r0
     52a:	11 24       	eor	r1, r1
     52c:	8f 93       	push	r24
     52e:	9f 93       	push	r25
     530:	af 93       	push	r26
     532:	bf 93       	push	r27
     534:	ef 93       	push	r30
     536:	ff 93       	push	r31
     538:	ae e1       	ldi	r26, 0x1E	; 30
     53a:	bb e2       	ldi	r27, 0x2B	; 43
     53c:	ec 91       	ld	r30, X
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	8e 0f       	add	r24, r30
     542:	8c 93       	st	X, r24
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	e5 56       	subi	r30, 0x65	; 101
     548:	f5 4d       	sbci	r31, 0xD5	; 213
     54a:	90 81       	ld	r25, Z
     54c:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
     550:	90 91 1d 2b 	lds	r25, 0x2B1D	; 0x802b1d <send1_buf+0x82>
     554:	89 17       	cp	r24, r25
     556:	40 f0       	brcs	.+16     	; 0x568 <__vector_27+0x46>
     558:	e0 e2       	ldi	r30, 0x20	; 32
     55a:	f8 e0       	ldi	r31, 0x08	; 8
     55c:	85 81       	ldd	r24, Z+5	; 0x05
     55e:	8f 7d       	andi	r24, 0xDF	; 223
     560:	85 83       	std	Z+5, r24	; 0x05
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	80 93 1f 2b 	sts	0x2B1F, r24	; 0x802b1f <send1_buf+0x84>
     568:	ff 91       	pop	r31
     56a:	ef 91       	pop	r30
     56c:	bf 91       	pop	r27
     56e:	af 91       	pop	r26
     570:	9f 91       	pop	r25
     572:	8f 91       	pop	r24
     574:	0f 90       	pop	r0
     576:	0f be       	out	0x3f, r0	; 63
     578:	0f 90       	pop	r0
     57a:	1f 90       	pop	r1
     57c:	18 95       	reti

0000057e <__vector_37>:
     57e:	1f 92       	push	r1
     580:	0f 92       	push	r0
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	0f 92       	push	r0
     586:	11 24       	eor	r1, r1
     588:	8f 93       	push	r24
     58a:	9f 93       	push	r25
     58c:	af 93       	push	r26
     58e:	bf 93       	push	r27
     590:	ef 93       	push	r30
     592:	ff 93       	push	r31
     594:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
     598:	8d 30       	cpi	r24, 0x0D	; 13
     59a:	21 f0       	breq	.+8      	; 0x5a4 <__vector_37+0x26>
     59c:	e0 91 14 2a 	lds	r30, 0x2A14	; 0x802a14 <recv3_buf+0x83>
     5a0:	ef 37       	cpi	r30, 0x7F	; 127
     5a2:	78 f0       	brcs	.+30     	; 0x5c2 <__vector_37+0x44>
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	80 93 15 2a 	sts	0x2A15, r24	; 0x802a15 <recv3_buf+0x84>
     5aa:	a4 e1       	ldi	r26, 0x14	; 20
     5ac:	ba e2       	ldi	r27, 0x2A	; 42
     5ae:	8c 91       	ld	r24, X
     5b0:	e8 2f       	mov	r30, r24
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	ef 56       	subi	r30, 0x6F	; 111
     5b6:	f6 4d       	sbci	r31, 0xD6	; 214
     5b8:	10 82       	st	Z, r1
     5ba:	80 93 13 2a 	sts	0x2A13, r24	; 0x802a13 <recv3_buf+0x82>
     5be:	1c 92       	st	X, r1
     5c0:	08 c0       	rjmp	.+16     	; 0x5d2 <__vector_37+0x54>
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	9e 0f       	add	r25, r30
     5c6:	90 93 14 2a 	sts	0x2A14, r25	; 0x802a14 <recv3_buf+0x83>
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	ef 56       	subi	r30, 0x6F	; 111
     5ce:	f6 4d       	sbci	r31, 0xD6	; 214
     5d0:	80 83       	st	Z, r24
     5d2:	ff 91       	pop	r31
     5d4:	ef 91       	pop	r30
     5d6:	bf 91       	pop	r27
     5d8:	af 91       	pop	r26
     5da:	9f 91       	pop	r25
     5dc:	8f 91       	pop	r24
     5de:	0f 90       	pop	r0
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	0f 90       	pop	r0
     5e4:	1f 90       	pop	r1
     5e6:	18 95       	reti

000005e8 <__vector_38>:
     5e8:	1f 92       	push	r1
     5ea:	0f 92       	push	r0
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	0f 92       	push	r0
     5f0:	11 24       	eor	r1, r1
     5f2:	8f 93       	push	r24
     5f4:	9f 93       	push	r25
     5f6:	af 93       	push	r26
     5f8:	bf 93       	push	r27
     5fa:	ef 93       	push	r30
     5fc:	ff 93       	push	r31
     5fe:	a9 e9       	ldi	r26, 0x99	; 153
     600:	ba e2       	ldi	r27, 0x2A	; 42
     602:	ec 91       	ld	r30, X
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	8e 0f       	add	r24, r30
     608:	8c 93       	st	X, r24
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	ea 5e       	subi	r30, 0xEA	; 234
     60e:	f5 4d       	sbci	r31, 0xD5	; 213
     610:	90 81       	ld	r25, Z
     612:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
     616:	90 91 98 2a 	lds	r25, 0x2A98	; 0x802a98 <send3_buf+0x82>
     61a:	89 17       	cp	r24, r25
     61c:	40 f0       	brcs	.+16     	; 0x62e <__vector_38+0x46>
     61e:	e0 e6       	ldi	r30, 0x60	; 96
     620:	f8 e0       	ldi	r31, 0x08	; 8
     622:	85 81       	ldd	r24, Z+5	; 0x05
     624:	8f 7d       	andi	r24, 0xDF	; 223
     626:	85 83       	std	Z+5, r24	; 0x05
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	80 93 9a 2a 	sts	0x2A9A, r24	; 0x802a9a <send3_buf+0x84>
     62e:	ff 91       	pop	r31
     630:	ef 91       	pop	r30
     632:	bf 91       	pop	r27
     634:	af 91       	pop	r26
     636:	9f 91       	pop	r25
     638:	8f 91       	pop	r24
     63a:	0f 90       	pop	r0
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	0f 90       	pop	r0
     640:	1f 90       	pop	r1
     642:	18 95       	reti

00000644 <read_FRAM>:
     644:	ef 92       	push	r14
     646:	ff 92       	push	r15
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	00 d0       	rcall	.+0      	; 0x652 <read_FRAM+0xe>
     652:	cd b7       	in	r28, 0x3d	; 61
     654:	de b7       	in	r29, 0x3e	; 62
     656:	18 2f       	mov	r17, r24
     658:	7a 01       	movw	r14, r20
     65a:	02 2f       	mov	r16, r18
     65c:	6a 83       	std	Y+2, r22	; 0x02
     65e:	79 83       	std	Y+1, r23	; 0x01
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <start_TWI>
     666:	81 11       	cpse	r24, r1
     668:	17 c0       	rjmp	.+46     	; 0x698 <read_FRAM+0x54>
     66a:	62 e0       	ldi	r22, 0x02	; 2
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	0e 94 13 01 	call	0x226	; 0x226 <write_TWI>
     674:	81 11       	cpse	r24, r1
     676:	10 c0       	rjmp	.+32     	; 0x698 <read_FRAM+0x54>
     678:	61 e0       	ldi	r22, 0x01	; 1
     67a:	81 2f       	mov	r24, r17
     67c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <start_TWI>
     680:	18 2f       	mov	r17, r24
     682:	81 11       	cpse	r24, r1
     684:	09 c0       	rjmp	.+18     	; 0x698 <read_FRAM+0x54>
     686:	60 2f       	mov	r22, r16
     688:	c7 01       	movw	r24, r14
     68a:	0e 94 b8 00 	call	0x170	; 0x170 <read_TWI>
     68e:	87 e0       	ldi	r24, 0x07	; 7
     690:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
     694:	81 2f       	mov	r24, r17
     696:	00 c0       	rjmp	.+0      	; 0x698 <read_FRAM+0x54>
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	0f 91       	pop	r16
     6a4:	ff 90       	pop	r15
     6a6:	ef 90       	pop	r14
     6a8:	08 95       	ret

000006aa <write_FRAM>:
     6aa:	ff 92       	push	r15
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	00 d0       	rcall	.+0      	; 0x6b6 <write_FRAM+0xc>
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	8a 01       	movw	r16, r20
     6bc:	f2 2e       	mov	r15, r18
     6be:	6a 83       	std	Y+2, r22	; 0x02
     6c0:	79 83       	std	Y+1, r23	; 0x01
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <start_TWI>
     6c8:	81 11       	cpse	r24, r1
     6ca:	10 c0       	rjmp	.+32     	; 0x6ec <write_FRAM+0x42>
     6cc:	62 e0       	ldi	r22, 0x02	; 2
     6ce:	ce 01       	movw	r24, r28
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	0e 94 13 01 	call	0x226	; 0x226 <write_TWI>
     6d6:	81 11       	cpse	r24, r1
     6d8:	09 c0       	rjmp	.+18     	; 0x6ec <write_FRAM+0x42>
     6da:	6f 2d       	mov	r22, r15
     6dc:	c8 01       	movw	r24, r16
     6de:	0e 94 13 01 	call	0x226	; 0x226 <write_TWI>
     6e2:	81 11       	cpse	r24, r1
     6e4:	03 c0       	rjmp	.+6      	; 0x6ec <write_FRAM+0x42>
     6e6:	97 e0       	ldi	r25, 0x07	; 7
     6e8:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	08 95       	ret

000006fc <convert_ds2iso>:
     6fc:	fb 01       	movw	r30, r22
     6fe:	20 81       	ld	r18, Z
     700:	1f 92       	push	r1
     702:	2f 93       	push	r18
     704:	21 81       	ldd	r18, Z+1	; 0x01
     706:	1f 92       	push	r1
     708:	2f 93       	push	r18
     70a:	22 81       	ldd	r18, Z+2	; 0x02
     70c:	1f 92       	push	r1
     70e:	2f 93       	push	r18
     710:	24 81       	ldd	r18, Z+4	; 0x04
     712:	1f 92       	push	r1
     714:	2f 93       	push	r18
     716:	25 81       	ldd	r18, Z+5	; 0x05
     718:	1f 92       	push	r1
     71a:	2f 93       	push	r18
     71c:	26 81       	ldd	r18, Z+6	; 0x06
     71e:	1f 92       	push	r1
     720:	2f 93       	push	r18
     722:	22 e5       	ldi	r18, 0x52	; 82
     724:	3a e5       	ldi	r19, 0x5A	; 90
     726:	3f 93       	push	r19
     728:	2f 93       	push	r18
     72a:	9f 93       	push	r25
     72c:	8f 93       	push	r24
     72e:	0e 94 ff 09 	call	0x13fe	; 0x13fe <sprintf>
     732:	8d b7       	in	r24, 0x3d	; 61
     734:	9e b7       	in	r25, 0x3e	; 62
     736:	40 96       	adiw	r24, 0x10	; 16
     738:	8d bf       	out	0x3d, r24	; 61
     73a:	9e bf       	out	0x3e, r25	; 62
     73c:	08 95       	ret

0000073e <convert_iso2ds>:
     73e:	dc 01       	movw	r26, r24
     740:	fb 01       	movw	r30, r22
     742:	81 89       	ldd	r24, Z+17	; 0x11
     744:	98 2f       	mov	r25, r24
     746:	92 95       	swap	r25
     748:	90 7f       	andi	r25, 0xF0	; 240
     74a:	82 89       	ldd	r24, Z+18	; 0x12
     74c:	80 53       	subi	r24, 0x30	; 48
     74e:	89 2b       	or	r24, r25
     750:	8c 93       	st	X, r24
     752:	86 85       	ldd	r24, Z+14	; 0x0e
     754:	98 2f       	mov	r25, r24
     756:	92 95       	swap	r25
     758:	90 7f       	andi	r25, 0xF0	; 240
     75a:	87 85       	ldd	r24, Z+15	; 0x0f
     75c:	80 53       	subi	r24, 0x30	; 48
     75e:	89 2b       	or	r24, r25
     760:	11 96       	adiw	r26, 0x01	; 1
     762:	8c 93       	st	X, r24
     764:	11 97       	sbiw	r26, 0x01	; 1
     766:	83 85       	ldd	r24, Z+11	; 0x0b
     768:	98 2f       	mov	r25, r24
     76a:	92 95       	swap	r25
     76c:	90 7f       	andi	r25, 0xF0	; 240
     76e:	84 85       	ldd	r24, Z+12	; 0x0c
     770:	80 53       	subi	r24, 0x30	; 48
     772:	89 2b       	or	r24, r25
     774:	12 96       	adiw	r26, 0x02	; 2
     776:	8c 93       	st	X, r24
     778:	12 97       	sbiw	r26, 0x02	; 2
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	13 96       	adiw	r26, 0x03	; 3
     77e:	8c 93       	st	X, r24
     780:	13 97       	sbiw	r26, 0x03	; 3
     782:	80 85       	ldd	r24, Z+8	; 0x08
     784:	98 2f       	mov	r25, r24
     786:	92 95       	swap	r25
     788:	90 7f       	andi	r25, 0xF0	; 240
     78a:	81 85       	ldd	r24, Z+9	; 0x09
     78c:	80 53       	subi	r24, 0x30	; 48
     78e:	89 2b       	or	r24, r25
     790:	14 96       	adiw	r26, 0x04	; 4
     792:	8c 93       	st	X, r24
     794:	14 97       	sbiw	r26, 0x04	; 4
     796:	85 81       	ldd	r24, Z+5	; 0x05
     798:	98 2f       	mov	r25, r24
     79a:	92 95       	swap	r25
     79c:	90 7f       	andi	r25, 0xF0	; 240
     79e:	86 81       	ldd	r24, Z+6	; 0x06
     7a0:	80 53       	subi	r24, 0x30	; 48
     7a2:	89 2b       	or	r24, r25
     7a4:	15 96       	adiw	r26, 0x05	; 5
     7a6:	8c 93       	st	X, r24
     7a8:	15 97       	sbiw	r26, 0x05	; 5
     7aa:	82 81       	ldd	r24, Z+2	; 0x02
     7ac:	98 2f       	mov	r25, r24
     7ae:	92 95       	swap	r25
     7b0:	90 7f       	andi	r25, 0xF0	; 240
     7b2:	83 81       	ldd	r24, Z+3	; 0x03
     7b4:	80 53       	subi	r24, 0x30	; 48
     7b6:	89 2b       	or	r24, r25
     7b8:	16 96       	adiw	r26, 0x06	; 6
     7ba:	8c 93       	st	X, r24
     7bc:	08 95       	ret

000007be <read_DS3231>:
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	1f 92       	push	r1
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
     7cc:	8b 01       	movw	r16, r22
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <start_TWI>
     7d4:	88 23       	and	r24, r24
     7d6:	21 f0       	breq	.+8      	; 0x7e0 <read_DS3231+0x22>
     7d8:	97 e0       	ldi	r25, 0x07	; 7
     7da:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
     7de:	1e c0       	rjmp	.+60     	; 0x81c <read_DS3231+0x5e>
     7e0:	19 82       	std	Y+1, r1	; 0x01
     7e2:	61 e0       	ldi	r22, 0x01	; 1
     7e4:	ce 01       	movw	r24, r28
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	0e 94 13 01 	call	0x226	; 0x226 <write_TWI>
     7ec:	88 23       	and	r24, r24
     7ee:	21 f0       	breq	.+8      	; 0x7f8 <read_DS3231+0x3a>
     7f0:	97 e0       	ldi	r25, 0x07	; 7
     7f2:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
     7f6:	12 c0       	rjmp	.+36     	; 0x81c <read_DS3231+0x5e>
     7f8:	61 e0       	ldi	r22, 0x01	; 1
     7fa:	80 ed       	ldi	r24, 0xD0	; 208
     7fc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <start_TWI>
     800:	88 23       	and	r24, r24
     802:	21 f0       	breq	.+8      	; 0x80c <read_DS3231+0x4e>
     804:	97 e0       	ldi	r25, 0x07	; 7
     806:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
     80a:	08 c0       	rjmp	.+16     	; 0x81c <read_DS3231+0x5e>
     80c:	67 e0       	ldi	r22, 0x07	; 7
     80e:	c8 01       	movw	r24, r16
     810:	0e 94 b8 00 	call	0x170	; 0x170 <read_TWI>
     814:	87 e0       	ldi	r24, 0x07	; 7
     816:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	0f 90       	pop	r0
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	08 95       	ret

00000828 <get_time>:
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	27 97       	sbiw	r28, 0x07	; 7
     836:	cd bf       	out	0x3d, r28	; 61
     838:	de bf       	out	0x3e, r29	; 62
     83a:	8c 01       	movw	r16, r24
     83c:	be 01       	movw	r22, r28
     83e:	6f 5f       	subi	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	80 ed       	ldi	r24, 0xD0	; 208
     844:	0e 94 df 03 	call	0x7be	; 0x7be <read_DS3231>
     848:	88 23       	and	r24, r24
     84a:	49 f0       	breq	.+18     	; 0x85e <get_time+0x36>
     84c:	92 e1       	ldi	r25, 0x12	; 18
     84e:	e3 e7       	ldi	r30, 0x73	; 115
     850:	fa e5       	ldi	r31, 0x5A	; 90
     852:	d8 01       	movw	r26, r16
     854:	01 90       	ld	r0, Z+
     856:	0d 92       	st	X+, r0
     858:	9a 95       	dec	r25
     85a:	e1 f7       	brne	.-8      	; 0x854 <get_time+0x2c>
     85c:	07 c0       	rjmp	.+14     	; 0x86c <get_time+0x44>
     85e:	be 01       	movw	r22, r28
     860:	6f 5f       	subi	r22, 0xFF	; 255
     862:	7f 4f       	sbci	r23, 0xFF	; 255
     864:	c8 01       	movw	r24, r16
     866:	0e 94 7e 03 	call	0x6fc	; 0x6fc <convert_ds2iso>
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	27 96       	adiw	r28, 0x07	; 7
     86e:	cd bf       	out	0x3d, r28	; 61
     870:	de bf       	out	0x3e, r29	; 62
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	08 95       	ret

0000087c <write_DS3231>:
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	1f 92       	push	r1
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
     88a:	8b 01       	movw	r16, r22
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <start_TWI>
     892:	81 11       	cpse	r24, r1
     894:	11 c0       	rjmp	.+34     	; 0x8b8 <write_DS3231+0x3c>
     896:	19 82       	std	Y+1, r1	; 0x01
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	ce 01       	movw	r24, r28
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	0e 94 13 01 	call	0x226	; 0x226 <write_TWI>
     8a2:	81 11       	cpse	r24, r1
     8a4:	09 c0       	rjmp	.+18     	; 0x8b8 <write_DS3231+0x3c>
     8a6:	67 e0       	ldi	r22, 0x07	; 7
     8a8:	c8 01       	movw	r24, r16
     8aa:	0e 94 13 01 	call	0x226	; 0x226 <write_TWI>
     8ae:	81 11       	cpse	r24, r1
     8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <write_DS3231+0x3c>
     8b2:	97 e0       	ldi	r25, 0x07	; 7
     8b4:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
     8b8:	0f 90       	pop	r0
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	08 95       	ret

000008c4 <put_time>:
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
     8cc:	27 97       	sbiw	r28, 0x07	; 7
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	de bf       	out	0x3e, r29	; 62
     8d2:	bc 01       	movw	r22, r24
     8d4:	ce 01       	movw	r24, r28
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	0e 94 9f 03 	call	0x73e	; 0x73e <convert_iso2ds>
     8dc:	be 01       	movw	r22, r28
     8de:	6f 5f       	subi	r22, 0xFF	; 255
     8e0:	7f 4f       	sbci	r23, 0xFF	; 255
     8e2:	80 ed       	ldi	r24, 0xD0	; 208
     8e4:	0e 94 3e 04 	call	0x87c	; 0x87c <write_DS3231>
     8e8:	27 96       	adiw	r28, 0x07	; 7
     8ea:	cd bf       	out	0x3d, r28	; 61
     8ec:	de bf       	out	0x3e, r29	; 62
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <checksum_NMEA>:
     8f4:	ef 92       	push	r14
     8f6:	ff 92       	push	r15
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
     904:	2e 97       	sbiw	r28, 0x0e	; 14
     906:	cd bf       	out	0x3d, r28	; 61
     908:	de bf       	out	0x3e, r29	; 62
     90a:	8c 01       	movw	r16, r24
     90c:	88 e0       	ldi	r24, 0x08	; 8
     90e:	e5 e8       	ldi	r30, 0x85	; 133
     910:	fa e5       	ldi	r31, 0x5A	; 90
     912:	de 01       	movw	r26, r28
     914:	11 96       	adiw	r26, 0x01	; 1
     916:	01 90       	ld	r0, Z+
     918:	0d 92       	st	X+, r0
     91a:	8a 95       	dec	r24
     91c:	e1 f7       	brne	.-8      	; 0x916 <checksum_NMEA+0x22>
     91e:	f8 01       	movw	r30, r16
     920:	01 90       	ld	r0, Z+
     922:	00 20       	and	r0, r0
     924:	e9 f7       	brne	.-6      	; 0x920 <checksum_NMEA+0x2c>
     926:	31 97       	sbiw	r30, 0x01	; 1
     928:	3e 2f       	mov	r19, r30
     92a:	30 1b       	sub	r19, r16
     92c:	32 30       	cpi	r19, 0x02	; 2
     92e:	50 f0       	brcs	.+20     	; 0x944 <checksum_NMEA+0x50>
     930:	f8 01       	movw	r30, r16
     932:	31 96       	adiw	r30, 0x01	; 1
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	21 91       	ld	r18, Z+
     93a:	92 27       	eor	r25, r18
     93c:	8f 5f       	subi	r24, 0xFF	; 255
     93e:	38 13       	cpse	r19, r24
     940:	fb cf       	rjmp	.-10     	; 0x938 <checksum_NMEA+0x44>
     942:	01 c0       	rjmp	.+2      	; 0x946 <checksum_NMEA+0x52>
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	1f 92       	push	r1
     948:	9f 93       	push	r25
     94a:	ce 01       	movw	r24, r28
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	9f 93       	push	r25
     950:	8f 93       	push	r24
     952:	7e 01       	movw	r14, r28
     954:	89 e0       	ldi	r24, 0x09	; 9
     956:	e8 0e       	add	r14, r24
     958:	f1 1c       	adc	r15, r1
     95a:	ff 92       	push	r15
     95c:	ef 92       	push	r14
     95e:	0e 94 ff 09 	call	0x13fe	; 0x13fe <sprintf>
     962:	b7 01       	movw	r22, r14
     964:	c8 01       	movw	r24, r16
     966:	0e 94 ed 09 	call	0x13da	; 0x13da <strcat>
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	2e 96       	adiw	r28, 0x0e	; 14
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	de bf       	out	0x3e, r29	; 62
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <get_EOD>:
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	2c 97       	sbiw	r28, 0x0c	; 12
     994:	cd bf       	out	0x3d, r28	; 61
     996:	de bf       	out	0x3e, r29	; 62
     998:	2c e0       	ldi	r18, 0x0C	; 12
     99a:	ed e8       	ldi	r30, 0x8D	; 141
     99c:	fa e5       	ldi	r31, 0x5A	; 90
     99e:	de 01       	movw	r26, r28
     9a0:	11 96       	adiw	r26, 0x01	; 1
     9a2:	01 90       	ld	r0, Z+
     9a4:	0d 92       	st	X+, r0
     9a6:	2a 95       	dec	r18
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <get_EOD+0x18>
     9aa:	be 01       	movw	r22, r28
     9ac:	6f 5f       	subi	r22, 0xFF	; 255
     9ae:	7f 4f       	sbci	r23, 0xFF	; 255
     9b0:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <strcpy>
     9b4:	2c 96       	adiw	r28, 0x0c	; 12
     9b6:	cd bf       	out	0x3d, r28	; 61
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <get_ERR>:
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	2c 97       	sbiw	r28, 0x0c	; 12
     9ca:	cd bf       	out	0x3d, r28	; 61
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	2c e0       	ldi	r18, 0x0C	; 12
     9d0:	e9 e9       	ldi	r30, 0x99	; 153
     9d2:	fa e5       	ldi	r31, 0x5A	; 90
     9d4:	de 01       	movw	r26, r28
     9d6:	11 96       	adiw	r26, 0x01	; 1
     9d8:	01 90       	ld	r0, Z+
     9da:	0d 92       	st	X+, r0
     9dc:	2a 95       	dec	r18
     9de:	e1 f7       	brne	.-8      	; 0x9d8 <get_ERR+0x18>
     9e0:	be 01       	movw	r22, r28
     9e2:	6f 5f       	subi	r22, 0xFF	; 255
     9e4:	7f 4f       	sbci	r23, 0xFF	; 255
     9e6:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <strcpy>
     9ea:	2c 96       	adiw	r28, 0x0c	; 12
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <write_OLED>:
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	00 d0       	rcall	.+0      	; 0xa00 <write_OLED+0xa>
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	06 2f       	mov	r16, r22
     a06:	14 2f       	mov	r17, r20
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <start_TWI>
     a0e:	09 83       	std	Y+1, r16	; 0x01
     a10:	1a 83       	std	Y+2, r17	; 0x02
     a12:	62 e0       	ldi	r22, 0x02	; 2
     a14:	ce 01       	movw	r24, r28
     a16:	01 96       	adiw	r24, 0x01	; 1
     a18:	0e 94 13 01 	call	0x226	; 0x226 <write_TWI>
     a1c:	87 e0       	ldi	r24, 0x07	; 7
     a1e:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	08 95       	ret

00000a30 <init_OLED>:
     a30:	cf 93       	push	r28
     a32:	81 11       	cpse	r24, r1
     a34:	0d c0       	rjmp	.+26     	; 0xa50 <init_OLED+0x20>
     a36:	e0 e8       	ldi	r30, 0x80	; 128
     a38:	f4 e0       	ldi	r31, 0x04	; 4
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	86 83       	std	Z+6, r24	; 0x06
     a3e:	81 83       	std	Z+1, r24	; 0x01
     a40:	a1 e4       	ldi	r26, 0x41	; 65
     a42:	b3 e0       	ldi	r27, 0x03	; 3
     a44:	11 97       	sbiw	r26, 0x01	; 1
     a46:	f1 f7       	brne	.-4      	; 0xa44 <init_OLED+0x14>
     a48:	00 00       	nop
     a4a:	85 83       	std	Z+5, r24	; 0x05
     a4c:	c8 e7       	ldi	r28, 0x78	; 120
     a4e:	0c c0       	rjmp	.+24     	; 0xa68 <init_OLED+0x38>
     a50:	e0 e8       	ldi	r30, 0x80	; 128
     a52:	f4 e0       	ldi	r31, 0x04	; 4
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	86 83       	std	Z+6, r24	; 0x06
     a58:	81 83       	std	Z+1, r24	; 0x01
     a5a:	a1 e4       	ldi	r26, 0x41	; 65
     a5c:	b3 e0       	ldi	r27, 0x03	; 3
     a5e:	11 97       	sbiw	r26, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <init_OLED+0x2e>
     a62:	00 00       	nop
     a64:	85 83       	std	Z+5, r24	; 0x05
     a66:	ca e7       	ldi	r28, 0x7A	; 122
     a68:	4a e2       	ldi	r20, 0x2A	; 42
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	8c 2f       	mov	r24, r28
     a6e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     a72:	41 e7       	ldi	r20, 0x71	; 113
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	8c 2f       	mov	r24, r28
     a78:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     a7c:	4c e5       	ldi	r20, 0x5C	; 92
     a7e:	60 e4       	ldi	r22, 0x40	; 64
     a80:	8c 2f       	mov	r24, r28
     a82:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     a86:	48 e2       	ldi	r20, 0x28	; 40
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	8c 2f       	mov	r24, r28
     a8c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     a90:	48 e0       	ldi	r20, 0x08	; 8
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	8c 2f       	mov	r24, r28
     a96:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     a9a:	4a e2       	ldi	r20, 0x2A	; 42
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	8c 2f       	mov	r24, r28
     aa0:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     aa4:	49 e7       	ldi	r20, 0x79	; 121
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	8c 2f       	mov	r24, r28
     aaa:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     aae:	45 ed       	ldi	r20, 0xD5	; 213
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	8c 2f       	mov	r24, r28
     ab4:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     ab8:	40 e7       	ldi	r20, 0x70	; 112
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	8c 2f       	mov	r24, r28
     abe:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     ac2:	48 e7       	ldi	r20, 0x78	; 120
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	8c 2f       	mov	r24, r28
     ac8:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     acc:	48 e0       	ldi	r20, 0x08	; 8
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	8c 2f       	mov	r24, r28
     ad2:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     ad6:	46 e0       	ldi	r20, 0x06	; 6
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	8c 2f       	mov	r24, r28
     adc:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     ae0:	42 e7       	ldi	r20, 0x72	; 114
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	8c 2f       	mov	r24, r28
     ae6:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     aea:	40 e0       	ldi	r20, 0x00	; 0
     aec:	60 e4       	ldi	r22, 0x40	; 64
     aee:	8c 2f       	mov	r24, r28
     af0:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     af4:	4a e2       	ldi	r20, 0x2A	; 42
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	8c 2f       	mov	r24, r28
     afa:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     afe:	49 e7       	ldi	r20, 0x79	; 121
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	8c 2f       	mov	r24, r28
     b04:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     b08:	4a ed       	ldi	r20, 0xDA	; 218
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	8c 2f       	mov	r24, r28
     b0e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     b12:	40 e0       	ldi	r20, 0x00	; 0
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	8c 2f       	mov	r24, r28
     b18:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     b1c:	4c ed       	ldi	r20, 0xDC	; 220
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	8c 2f       	mov	r24, r28
     b22:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     b26:	40 e0       	ldi	r20, 0x00	; 0
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	8c 2f       	mov	r24, r28
     b2c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     b30:	41 e8       	ldi	r20, 0x81	; 129
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	8c 2f       	mov	r24, r28
     b36:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     b3a:	4f e7       	ldi	r20, 0x7F	; 127
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	8c 2f       	mov	r24, r28
     b40:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     b44:	49 ed       	ldi	r20, 0xD9	; 217
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	8c 2f       	mov	r24, r28
     b4a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     b4e:	41 ef       	ldi	r20, 0xF1	; 241
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	8c 2f       	mov	r24, r28
     b54:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     b58:	4b ed       	ldi	r20, 0xDB	; 219
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	8c 2f       	mov	r24, r28
     b5e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     b62:	40 e4       	ldi	r20, 0x40	; 64
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	8c 2f       	mov	r24, r28
     b68:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     b6c:	48 e7       	ldi	r20, 0x78	; 120
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	8c 2f       	mov	r24, r28
     b72:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     b76:	48 e2       	ldi	r20, 0x28	; 40
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	8c 2f       	mov	r24, r28
     b7c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     b80:	41 e0       	ldi	r20, 0x01	; 1
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	8c 2f       	mov	r24, r28
     b86:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     b8a:	40 e8       	ldi	r20, 0x80	; 128
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	8c 2f       	mov	r24, r28
     b90:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     b94:	4c e0       	ldi	r20, 0x0C	; 12
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	8c 2f       	mov	r24, r28
     b9a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     b9e:	ba e6       	ldi	r27, 0x6A	; 106
     ba0:	24 e0       	ldi	r18, 0x04	; 4
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	b1 50       	subi	r27, 0x01	; 1
     ba6:	20 40       	sbci	r18, 0x00	; 0
     ba8:	80 40       	sbci	r24, 0x00	; 0
     baa:	e1 f7       	brne	.-8      	; 0xba4 <init_OLED+0x174>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <init_OLED+0x17e>
     bae:	cf 91       	pop	r28
     bb0:	08 95       	ret

00000bb2 <writestr_OLED>:
     bb2:	cf 92       	push	r12
     bb4:	df 92       	push	r13
     bb6:	ff 92       	push	r15
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	e2 97       	sbiw	r28, 0x32	; 50
     bc6:	cd bf       	out	0x3d, r28	; 61
     bc8:	de bf       	out	0x3e, r29	; 62
     bca:	14 2f       	mov	r17, r20
     bcc:	91 e1       	ldi	r25, 0x11	; 17
     bce:	e5 ea       	ldi	r30, 0xA5	; 165
     bd0:	fa e5       	ldi	r31, 0x5A	; 90
     bd2:	de 01       	movw	r26, r28
     bd4:	92 96       	adiw	r26, 0x22	; 34
     bd6:	01 90       	ld	r0, Z+
     bd8:	0d 92       	st	X+, r0
     bda:	9a 95       	dec	r25
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <writestr_OLED+0x24>
     bde:	88 23       	and	r24, r24
     be0:	29 f0       	breq	.+10     	; 0xbec <writestr_OLED+0x3a>
     be2:	0f 2e       	mov	r0, r31
     be4:	fa e7       	ldi	r31, 0x7A	; 122
     be6:	ff 2e       	mov	r15, r31
     be8:	f0 2d       	mov	r31, r0
     bea:	04 c0       	rjmp	.+8      	; 0xbf4 <writestr_OLED+0x42>
     bec:	0f 2e       	mov	r0, r31
     bee:	f8 e7       	ldi	r31, 0x78	; 120
     bf0:	ff 2e       	mov	r15, r31
     bf2:	f0 2d       	mov	r31, r0
     bf4:	ce 01       	movw	r24, r28
     bf6:	01 96       	adiw	r24, 0x01	; 1
     bf8:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <strcpy>
     bfc:	be 01       	movw	r22, r28
     bfe:	6e 5d       	subi	r22, 0xDE	; 222
     c00:	7f 4f       	sbci	r23, 0xFF	; 255
     c02:	ce 01       	movw	r24, r28
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	0e 94 ed 09 	call	0x13da	; 0x13da <strcat>
     c0a:	11 30       	cpi	r17, 0x01	; 1
     c0c:	31 f4       	brne	.+12     	; 0xc1a <writestr_OLED+0x68>
     c0e:	40 e8       	ldi	r20, 0x80	; 128
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	8f 2d       	mov	r24, r15
     c14:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     c18:	11 c0       	rjmp	.+34     	; 0xc3c <writestr_OLED+0x8a>
     c1a:	40 ec       	ldi	r20, 0xC0	; 192
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	8f 2d       	mov	r24, r15
     c20:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     c24:	0b c0       	rjmp	.+22     	; 0xc3c <writestr_OLED+0x8a>
     c26:	f8 01       	movw	r30, r16
     c28:	41 91       	ld	r20, Z+
     c2a:	8f 01       	movw	r16, r30
     c2c:	60 e4       	ldi	r22, 0x40	; 64
     c2e:	8f 2d       	mov	r24, r15
     c30:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <write_OLED>
     c34:	0c 15       	cp	r16, r12
     c36:	1d 05       	cpc	r17, r13
     c38:	b1 f7       	brne	.-20     	; 0xc26 <writestr_OLED+0x74>
     c3a:	08 c0       	rjmp	.+16     	; 0xc4c <writestr_OLED+0x9a>
     c3c:	8e 01       	movw	r16, r28
     c3e:	0f 5f       	subi	r16, 0xFF	; 255
     c40:	1f 4f       	sbci	r17, 0xFF	; 255
     c42:	6e 01       	movw	r12, r28
     c44:	f1 e1       	ldi	r31, 0x11	; 17
     c46:	cf 0e       	add	r12, r31
     c48:	d1 1c       	adc	r13, r1
     c4a:	ed cf       	rjmp	.-38     	; 0xc26 <writestr_OLED+0x74>
     c4c:	e2 96       	adiw	r28, 0x32	; 50
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	0f 91       	pop	r16
     c5a:	ff 90       	pop	r15
     c5c:	df 90       	pop	r13
     c5e:	cf 90       	pop	r12
     c60:	08 95       	ret

00000c62 <get_BOOTTIME>:
void update_VERSION(void);

void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     c62:	45 e1       	ldi	r20, 0x15	; 21
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	6b e0       	ldi	r22, 0x0B	; 11
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <eeprom_read_block>
     c6e:	08 95       	ret

00000c70 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     c70:	4b e0       	ldi	r20, 0x0B	; 11
     c72:	50 e0       	ldi	r21, 0x00	; 0
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	0e 94 b2 0c 	call	0x1964	; 0x1964 <eeprom_read_block>
     c7c:	08 95       	ret

00000c7e <update_BOOTTIME>:
	update_BOOTTIME();
	update_VERSION();
}

void update_BOOTTIME(void)
{
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	65 97       	sbiw	r28, 0x15	; 21
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     c8c:	ce 01       	movw	r24, r28
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	0e 94 14 04 	call	0x828	; 0x828 <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     c94:	45 e1       	ldi	r20, 0x15	; 21
     c96:	50 e0       	ldi	r21, 0x00	; 0
     c98:	6b e0       	ldi	r22, 0x0B	; 11
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	ce 01       	movw	r24, r28
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	0e 94 b6 0c 	call	0x196c	; 0x196c <eeprom_update_block>

}
     ca4:	65 96       	adiw	r28, 0x15	; 21
     ca6:	cd bf       	out	0x3d, r28	; 61
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	08 95       	ret

00000cb0 <update_VERSION>:

void update_VERSION(void)
{
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	2b 97       	sbiw	r28, 0x0b	; 11
     cba:	cd bf       	out	0x3d, r28	; 61
     cbc:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     cbe:	8b e0       	ldi	r24, 0x0B	; 11
     cc0:	e6 eb       	ldi	r30, 0xB6	; 182
     cc2:	fa e5       	ldi	r31, 0x5A	; 90
     cc4:	de 01       	movw	r26, r28
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	01 90       	ld	r0, Z+
     cca:	0d 92       	st	X+, r0
     ccc:	8a 95       	dec	r24
     cce:	e1 f7       	brne	.-8      	; 0xcc8 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     cd0:	4b e0       	ldi	r20, 0x0B	; 11
     cd2:	50 e0       	ldi	r21, 0x00	; 0
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	ce 01       	movw	r24, r28
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	0e 94 b6 0c 	call	0x196c	; 0x196c <eeprom_update_block>

}
     ce0:	2b 96       	adiw	r28, 0x0b	; 11
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <init_EEPROM>:

}

void init_EEPROM(void)
{
	update_BOOTTIME();
     cec:	0e 94 3f 06 	call	0xc7e	; 0xc7e <update_BOOTTIME>
	update_VERSION();
     cf0:	0e 94 58 06 	call	0xcb0	; 0xcb0 <update_VERSION>
     cf4:	08 95       	ret

00000cf6 <reboot>:
void reboot(void);

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
     cf6:	88 ed       	ldi	r24, 0xD8	; 216
     cf8:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
     d00:	08 95       	ret

00000d02 <close>:
	}

}

uint8_t close(char *ptr)
{
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	6e 97       	sbiw	r28, 0x1e	; 30
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	de bf       	out	0x3e, r29	; 62

	char strbuf[30];

	ptr++;

	switch (*ptr) {
     d10:	fc 01       	movw	r30, r24
     d12:	81 81       	ldd	r24, Z+1	; 0x01
     d14:	8c 36       	cpi	r24, 0x6C	; 108
     d16:	d1 f1       	breq	.+116    	; 0xd8c <close+0x8a>
     d18:	18 f4       	brcc	.+6      	; 0xd20 <close+0x1e>
     d1a:	82 36       	cpi	r24, 0x62	; 98
     d1c:	39 f0       	breq	.+14     	; 0xd2c <close+0x2a>
     d1e:	66 c0       	rjmp	.+204    	; 0xdec <close+0xea>
     d20:	82 37       	cpi	r24, 0x72	; 114
     d22:	09 f4       	brne	.+2      	; 0xd26 <close+0x24>
     d24:	4b c0       	rjmp	.+150    	; 0xdbc <close+0xba>
     d26:	83 37       	cpi	r24, 0x73	; 115
     d28:	c9 f0       	breq	.+50     	; 0xd5c <close+0x5a>
     d2a:	60 c0       	rjmp	.+192    	; 0xdec <close+0xea>

		case 'b':
			strcpy(strbuf, "close both Hartmann doors\r\n");
     d2c:	8c e1       	ldi	r24, 0x1C	; 28
     d2e:	e1 ec       	ldi	r30, 0xC1	; 193
     d30:	fa e5       	ldi	r31, 0x5A	; 90
     d32:	be 01       	movw	r22, r28
     d34:	6f 5f       	subi	r22, 0xFF	; 255
     d36:	7f 4f       	sbci	r23, 0xFF	; 255
     d38:	db 01       	movw	r26, r22
     d3a:	01 90       	ld	r0, Z+
     d3c:	0d 92       	st	X+, r0
     d3e:	8a 95       	dec	r24
     d40:	e1 f7       	brne	.-8      	; 0xd3a <close+0x38>
			send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     d42:	fb 01       	movw	r30, r22
     d44:	01 90       	ld	r0, Z+
     d46:	00 20       	and	r0, r0
     d48:	e9 f7       	brne	.-6      	; 0xd44 <close+0x42>
     d4a:	31 97       	sbiw	r30, 0x01	; 1
     d4c:	af 01       	movw	r20, r30
     d4e:	46 1b       	sub	r20, r22
     d50:	57 0b       	sbc	r21, r23
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>
			return(1);
			break;

	}

	return(0);
     d58:	80 e0       	ldi	r24, 0x00	; 0
	switch (*ptr) {

		case 'b':
			strcpy(strbuf, "close both Hartmann doors\r\n");
			send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
		break;
     d5a:	49 c0       	rjmp	.+146    	; 0xdee <close+0xec>

		case 's':
			strcpy(strbuf, "close shutter\r\n");
     d5c:	80 e1       	ldi	r24, 0x10	; 16
     d5e:	ed ed       	ldi	r30, 0xDD	; 221
     d60:	fa e5       	ldi	r31, 0x5A	; 90
     d62:	be 01       	movw	r22, r28
     d64:	6f 5f       	subi	r22, 0xFF	; 255
     d66:	7f 4f       	sbci	r23, 0xFF	; 255
     d68:	db 01       	movw	r26, r22
     d6a:	01 90       	ld	r0, Z+
     d6c:	0d 92       	st	X+, r0
     d6e:	8a 95       	dec	r24
     d70:	e1 f7       	brne	.-8      	; 0xd6a <close+0x68>
			send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     d72:	fb 01       	movw	r30, r22
     d74:	01 90       	ld	r0, Z+
     d76:	00 20       	and	r0, r0
     d78:	e9 f7       	brne	.-6      	; 0xd74 <close+0x72>
     d7a:	31 97       	sbiw	r30, 0x01	; 1
     d7c:	af 01       	movw	r20, r30
     d7e:	46 1b       	sub	r20, r22
     d80:	57 0b       	sbc	r21, r23
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>
			return(1);
			break;

	}

	return(0);
     d88:	80 e0       	ldi	r24, 0x00	; 0
		break;

		case 's':
			strcpy(strbuf, "close shutter\r\n");
			send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
			break;
     d8a:	31 c0       	rjmp	.+98     	; 0xdee <close+0xec>

		case 'l':
			strcpy(strbuf, "close left Hartmann door\r\n");
     d8c:	8b e1       	ldi	r24, 0x1B	; 27
     d8e:	ed ee       	ldi	r30, 0xED	; 237
     d90:	fa e5       	ldi	r31, 0x5A	; 90
     d92:	be 01       	movw	r22, r28
     d94:	6f 5f       	subi	r22, 0xFF	; 255
     d96:	7f 4f       	sbci	r23, 0xFF	; 255
     d98:	db 01       	movw	r26, r22
     d9a:	01 90       	ld	r0, Z+
     d9c:	0d 92       	st	X+, r0
     d9e:	8a 95       	dec	r24
     da0:	e1 f7       	brne	.-8      	; 0xd9a <close+0x98>
			send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     da2:	fb 01       	movw	r30, r22
     da4:	01 90       	ld	r0, Z+
     da6:	00 20       	and	r0, r0
     da8:	e9 f7       	brne	.-6      	; 0xda4 <close+0xa2>
     daa:	31 97       	sbiw	r30, 0x01	; 1
     dac:	af 01       	movw	r20, r30
     dae:	46 1b       	sub	r20, r22
     db0:	57 0b       	sbc	r21, r23
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>
			return(1);
			break;

	}

	return(0);
     db8:	80 e0       	ldi	r24, 0x00	; 0
			break;

		case 'l':
			strcpy(strbuf, "close left Hartmann door\r\n");
			send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
			break;
     dba:	19 c0       	rjmp	.+50     	; 0xdee <close+0xec>
			
		case 'r':
			strcpy(strbuf, "close right Hartmann door\r\n");
     dbc:	8c e1       	ldi	r24, 0x1C	; 28
     dbe:	e8 e0       	ldi	r30, 0x08	; 8
     dc0:	fb e5       	ldi	r31, 0x5B	; 91
     dc2:	be 01       	movw	r22, r28
     dc4:	6f 5f       	subi	r22, 0xFF	; 255
     dc6:	7f 4f       	sbci	r23, 0xFF	; 255
     dc8:	db 01       	movw	r26, r22
     dca:	01 90       	ld	r0, Z+
     dcc:	0d 92       	st	X+, r0
     dce:	8a 95       	dec	r24
     dd0:	e1 f7       	brne	.-8      	; 0xdca <close+0xc8>
			send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     dd2:	fb 01       	movw	r30, r22
     dd4:	01 90       	ld	r0, Z+
     dd6:	00 20       	and	r0, r0
     dd8:	e9 f7       	brne	.-6      	; 0xdd4 <close+0xd2>
     dda:	31 97       	sbiw	r30, 0x01	; 1
     ddc:	af 01       	movw	r20, r30
     dde:	46 1b       	sub	r20, r22
     de0:	57 0b       	sbc	r21, r23
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>
			return(1);
			break;

	}

	return(0);
     de8:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
		case 'r':
			strcpy(strbuf, "close right Hartmann door\r\n");
			send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
			break;
     dea:	01 c0       	rjmp	.+2      	; 0xdee <close+0xec>

		default:
			return(1);
     dec:	81 e0       	ldi	r24, 0x01	; 1

	}

	return(0);

}
     dee:	6e 96       	adiw	r28, 0x1e	; 30
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <open>:
	send_prompt(prompt_flag);

}

uint8_t open(char *ptr)
{
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	6e 97       	sbiw	r28, 0x1e	; 30
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	de bf       	out	0x3e, r29	; 62

	char strbuf[30];

	ptr++;
	switch (*ptr) {
     e08:	fc 01       	movw	r30, r24
     e0a:	81 81       	ldd	r24, Z+1	; 0x01
     e0c:	8c 36       	cpi	r24, 0x6C	; 108
     e0e:	d1 f1       	breq	.+116    	; 0xe84 <open+0x8a>
     e10:	18 f4       	brcc	.+6      	; 0xe18 <open+0x1e>
     e12:	82 36       	cpi	r24, 0x62	; 98
     e14:	39 f0       	breq	.+14     	; 0xe24 <open+0x2a>
     e16:	66 c0       	rjmp	.+204    	; 0xee4 <open+0xea>
     e18:	82 37       	cpi	r24, 0x72	; 114
     e1a:	09 f4       	brne	.+2      	; 0xe1e <open+0x24>
     e1c:	4b c0       	rjmp	.+150    	; 0xeb4 <open+0xba>
     e1e:	83 37       	cpi	r24, 0x73	; 115
     e20:	c9 f0       	breq	.+50     	; 0xe54 <open+0x5a>
     e22:	60 c0       	rjmp	.+192    	; 0xee4 <open+0xea>

		case 'b':
			strcpy(strbuf, "open both Hartmann doors\r\n");
     e24:	8b e1       	ldi	r24, 0x1B	; 27
     e26:	e4 e2       	ldi	r30, 0x24	; 36
     e28:	fb e5       	ldi	r31, 0x5B	; 91
     e2a:	be 01       	movw	r22, r28
     e2c:	6f 5f       	subi	r22, 0xFF	; 255
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	db 01       	movw	r26, r22
     e32:	01 90       	ld	r0, Z+
     e34:	0d 92       	st	X+, r0
     e36:	8a 95       	dec	r24
     e38:	e1 f7       	brne	.-8      	; 0xe32 <open+0x38>
			send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     e3a:	fb 01       	movw	r30, r22
     e3c:	01 90       	ld	r0, Z+
     e3e:	00 20       	and	r0, r0
     e40:	e9 f7       	brne	.-6      	; 0xe3c <open+0x42>
     e42:	31 97       	sbiw	r30, 0x01	; 1
     e44:	af 01       	movw	r20, r30
     e46:	46 1b       	sub	r20, r22
     e48:	57 0b       	sbc	r21, r23
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>
		default:
			return(1);

	}

	return(0);
     e50:	80 e0       	ldi	r24, 0x00	; 0
	switch (*ptr) {

		case 'b':
			strcpy(strbuf, "open both Hartmann doors\r\n");
			send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
			break;
     e52:	49 c0       	rjmp	.+146    	; 0xee6 <open+0xec>

		case 's':
			strcpy(strbuf, "open shutter\r\n");
     e54:	8f e0       	ldi	r24, 0x0F	; 15
     e56:	ef e3       	ldi	r30, 0x3F	; 63
     e58:	fb e5       	ldi	r31, 0x5B	; 91
     e5a:	be 01       	movw	r22, r28
     e5c:	6f 5f       	subi	r22, 0xFF	; 255
     e5e:	7f 4f       	sbci	r23, 0xFF	; 255
     e60:	db 01       	movw	r26, r22
     e62:	01 90       	ld	r0, Z+
     e64:	0d 92       	st	X+, r0
     e66:	8a 95       	dec	r24
     e68:	e1 f7       	brne	.-8      	; 0xe62 <open+0x68>
			send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     e6a:	fb 01       	movw	r30, r22
     e6c:	01 90       	ld	r0, Z+
     e6e:	00 20       	and	r0, r0
     e70:	e9 f7       	brne	.-6      	; 0xe6c <open+0x72>
     e72:	31 97       	sbiw	r30, 0x01	; 1
     e74:	af 01       	movw	r20, r30
     e76:	46 1b       	sub	r20, r22
     e78:	57 0b       	sbc	r21, r23
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>
		default:
			return(1);

	}

	return(0);
     e80:	80 e0       	ldi	r24, 0x00	; 0
			break;

		case 's':
			strcpy(strbuf, "open shutter\r\n");
			send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
			break;
     e82:	31 c0       	rjmp	.+98     	; 0xee6 <open+0xec>

		case 'l':
			strcpy(strbuf, "open left Hartmann door\r\n");
     e84:	8a e1       	ldi	r24, 0x1A	; 26
     e86:	ee e4       	ldi	r30, 0x4E	; 78
     e88:	fb e5       	ldi	r31, 0x5B	; 91
     e8a:	be 01       	movw	r22, r28
     e8c:	6f 5f       	subi	r22, 0xFF	; 255
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	db 01       	movw	r26, r22
     e92:	01 90       	ld	r0, Z+
     e94:	0d 92       	st	X+, r0
     e96:	8a 95       	dec	r24
     e98:	e1 f7       	brne	.-8      	; 0xe92 <open+0x98>
			send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     e9a:	fb 01       	movw	r30, r22
     e9c:	01 90       	ld	r0, Z+
     e9e:	00 20       	and	r0, r0
     ea0:	e9 f7       	brne	.-6      	; 0xe9c <open+0xa2>
     ea2:	31 97       	sbiw	r30, 0x01	; 1
     ea4:	af 01       	movw	r20, r30
     ea6:	46 1b       	sub	r20, r22
     ea8:	57 0b       	sbc	r21, r23
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>
		default:
			return(1);

	}

	return(0);
     eb0:	80 e0       	ldi	r24, 0x00	; 0
			break;

		case 'l':
			strcpy(strbuf, "open left Hartmann door\r\n");
			send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
			break;
     eb2:	19 c0       	rjmp	.+50     	; 0xee6 <open+0xec>
		
		case 'r':
			strcpy(strbuf, "open right Hartmann door\r\n");
     eb4:	8b e1       	ldi	r24, 0x1B	; 27
     eb6:	e8 e6       	ldi	r30, 0x68	; 104
     eb8:	fb e5       	ldi	r31, 0x5B	; 91
     eba:	be 01       	movw	r22, r28
     ebc:	6f 5f       	subi	r22, 0xFF	; 255
     ebe:	7f 4f       	sbci	r23, 0xFF	; 255
     ec0:	db 01       	movw	r26, r22
     ec2:	01 90       	ld	r0, Z+
     ec4:	0d 92       	st	X+, r0
     ec6:	8a 95       	dec	r24
     ec8:	e1 f7       	brne	.-8      	; 0xec2 <open+0xc8>
			send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     eca:	fb 01       	movw	r30, r22
     ecc:	01 90       	ld	r0, Z+
     ece:	00 20       	and	r0, r0
     ed0:	e9 f7       	brne	.-6      	; 0xecc <open+0xd2>
     ed2:	31 97       	sbiw	r30, 0x01	; 1
     ed4:	af 01       	movw	r20, r30
     ed6:	46 1b       	sub	r20, r22
     ed8:	57 0b       	sbc	r21, r23
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>
		default:
			return(1);

	}

	return(0);
     ee0:	80 e0       	ldi	r24, 0x00	; 0
			break;
		
		case 'r':
			strcpy(strbuf, "open right Hartmann door\r\n");
			send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
			break;
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <open+0xec>

		default:
			return(1);
     ee4:	81 e0       	ldi	r24, 0x01	; 1

	}

	return(0);

}
     ee6:	6e 96       	adiw	r28, 0x1e	; 30
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	08 95       	ret

00000ef2 <report>:

uint8_t report(char *ptr)
{
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	c2 59       	subi	r28, 0x92	; 146
     f00:	d1 09       	sbc	r29, r1
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	de bf       	out	0x3e, r29	; 62

	char outbuf[81], isotime[21], version[11];
	const char format_BTM[]="$S%dBTM,%s";
     f06:	2b e0       	ldi	r18, 0x0B	; 11
     f08:	e3 e8       	ldi	r30, 0x83	; 131
     f0a:	fb e5       	ldi	r31, 0x5B	; 91
     f0c:	de 01       	movw	r26, r28
     f0e:	ae 58       	subi	r26, 0x8E	; 142
     f10:	bf 4f       	sbci	r27, 0xFF	; 255
     f12:	01 90       	ld	r0, Z+
     f14:	0d 92       	st	X+, r0
     f16:	2a 95       	dec	r18
     f18:	e1 f7       	brne	.-8      	; 0xf12 <report+0x20>
	const char format_TIM[]="$S%dTIM,%s";
     f1a:	2b e0       	ldi	r18, 0x0B	; 11
     f1c:	ee e8       	ldi	r30, 0x8E	; 142
     f1e:	fb e5       	ldi	r31, 0x5B	; 91
     f20:	de 01       	movw	r26, r28
     f22:	a3 58       	subi	r26, 0x83	; 131
     f24:	bf 4f       	sbci	r27, 0xFF	; 255
     f26:	01 90       	ld	r0, Z+
     f28:	0d 92       	st	X+, r0
     f2a:	2a 95       	dec	r18
     f2c:	e1 f7       	brne	.-8      	; 0xf26 <report+0x34>
	const char format_VER[]="$S%dVER,%s";
     f2e:	2b e0       	ldi	r18, 0x0B	; 11
     f30:	e9 e9       	ldi	r30, 0x99	; 153
     f32:	fb e5       	ldi	r31, 0x5B	; 91
     f34:	de 01       	movw	r26, r28
     f36:	a8 57       	subi	r26, 0x78	; 120
     f38:	bf 4f       	sbci	r27, 0xFF	; 255
     f3a:	01 90       	ld	r0, Z+
     f3c:	0d 92       	st	X+, r0
     f3e:	2a 95       	dec	r18
     f40:	e1 f7       	brne	.-8      	; 0xf3a <report+0x48>

	ptr++;

	switch(*ptr++) {
     f42:	fc 01       	movw	r30, r24
     f44:	81 81       	ldd	r24, Z+1	; 0x01
     f46:	84 37       	cpi	r24, 0x74	; 116
     f48:	f1 f1       	breq	.+124    	; 0xfc6 <report+0xd4>
     f4a:	86 37       	cpi	r24, 0x76	; 118
     f4c:	09 f4       	brne	.+2      	; 0xf50 <report+0x5e>
     f4e:	73 c0       	rjmp	.+230    	; 0x1036 <report+0x144>
     f50:	82 36       	cpi	r24, 0x62	; 98
     f52:	09 f0       	breq	.+2      	; 0xf56 <report+0x64>
     f54:	a8 c0       	rjmp	.+336    	; 0x10a6 <report+0x1b4>

		case 'b':					// Boot time
			get_BOOTTIME(isotime);
     f56:	8e 01       	movw	r16, r28
     f58:	0e 5a       	subi	r16, 0xAE	; 174
     f5a:	1f 4f       	sbci	r17, 0xFF	; 255
     f5c:	c8 01       	movw	r24, r16
     f5e:	0e 94 31 06 	call	0xc62	; 0xc62 <get_BOOTTIME>
			sprintf(outbuf, format_BTM, get_specID(), isotime);
     f62:	1f 93       	push	r17
     f64:	0f 93       	push	r16
     f66:	1f 92       	push	r1
     f68:	82 e0       	ldi	r24, 0x02	; 2
     f6a:	8f 93       	push	r24
     f6c:	ce 01       	movw	r24, r28
     f6e:	8e 58       	subi	r24, 0x8E	; 142
     f70:	9f 4f       	sbci	r25, 0xFF	; 255
     f72:	9f 93       	push	r25
     f74:	8f 93       	push	r24
     f76:	01 55       	subi	r16, 0x51	; 81
     f78:	11 09       	sbc	r17, r1
     f7a:	1f 93       	push	r17
     f7c:	0f 93       	push	r16
     f7e:	0e 94 ff 09 	call	0x13fe	; 0x13fe <sprintf>
			checksum_NMEA(outbuf);
     f82:	c8 01       	movw	r24, r16
     f84:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
     f88:	f8 01       	movw	r30, r16
     f8a:	01 90       	ld	r0, Z+
     f8c:	00 20       	and	r0, r0
     f8e:	e9 f7       	brne	.-6      	; 0xf8a <report+0x98>
     f90:	31 97       	sbiw	r30, 0x01	; 1
     f92:	af 01       	movw	r20, r30
     f94:	40 1b       	sub	r20, r16
     f96:	51 0b       	sbc	r21, r17
     f98:	b8 01       	movw	r22, r16
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>

			get_EOD(outbuf);
     fa0:	c8 01       	movw	r24, r16
     fa2:	0e 94 c5 04 	call	0x98a	; 0x98a <get_EOD>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
     fa6:	f8 01       	movw	r30, r16
     fa8:	01 90       	ld	r0, Z+
     faa:	00 20       	and	r0, r0
     fac:	e9 f7       	brne	.-6      	; 0xfa8 <report+0xb6>
     fae:	31 97       	sbiw	r30, 0x01	; 1
     fb0:	af 01       	movw	r20, r30
     fb2:	40 1b       	sub	r20, r16
     fb4:	51 0b       	sbc	r21, r17
     fb6:	b8 01       	movw	r22, r16
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>
			break;
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	de bf       	out	0x3e, r29	; 62
			return(1);
			break;

	}

	return(0);
     fc2:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));

			get_EOD(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
     fc4:	71 c0       	rjmp	.+226    	; 0x10a8 <report+0x1b6>

		case 't':					// Send current time on specMech clock
			get_time(isotime);
     fc6:	8e 01       	movw	r16, r28
     fc8:	0e 5a       	subi	r16, 0xAE	; 174
     fca:	1f 4f       	sbci	r17, 0xFF	; 255
     fcc:	c8 01       	movw	r24, r16
     fce:	0e 94 14 04 	call	0x828	; 0x828 <get_time>
			sprintf(outbuf, format_TIM, get_specID(), isotime);
     fd2:	1f 93       	push	r17
     fd4:	0f 93       	push	r16
     fd6:	1f 92       	push	r1
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	8f 93       	push	r24
     fdc:	ce 01       	movw	r24, r28
     fde:	83 58       	subi	r24, 0x83	; 131
     fe0:	9f 4f       	sbci	r25, 0xFF	; 255
     fe2:	9f 93       	push	r25
     fe4:	8f 93       	push	r24
     fe6:	01 55       	subi	r16, 0x51	; 81
     fe8:	11 09       	sbc	r17, r1
     fea:	1f 93       	push	r17
     fec:	0f 93       	push	r16
     fee:	0e 94 ff 09 	call	0x13fe	; 0x13fe <sprintf>
			checksum_NMEA(outbuf);
     ff2:	c8 01       	movw	r24, r16
     ff4:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
     ff8:	f8 01       	movw	r30, r16
     ffa:	01 90       	ld	r0, Z+
     ffc:	00 20       	and	r0, r0
     ffe:	e9 f7       	brne	.-6      	; 0xffa <report+0x108>
    1000:	31 97       	sbiw	r30, 0x01	; 1
    1002:	af 01       	movw	r20, r30
    1004:	40 1b       	sub	r20, r16
    1006:	51 0b       	sbc	r21, r17
    1008:	b8 01       	movw	r22, r16
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>

			get_EOD(outbuf);
    1010:	c8 01       	movw	r24, r16
    1012:	0e 94 c5 04 	call	0x98a	; 0x98a <get_EOD>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1016:	f8 01       	movw	r30, r16
    1018:	01 90       	ld	r0, Z+
    101a:	00 20       	and	r0, r0
    101c:	e9 f7       	brne	.-6      	; 0x1018 <report+0x126>
    101e:	31 97       	sbiw	r30, 0x01	; 1
    1020:	af 01       	movw	r20, r30
    1022:	40 1b       	sub	r20, r16
    1024:	51 0b       	sbc	r21, r17
    1026:	b8 01       	movw	r22, r16
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>
			break;
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	de bf       	out	0x3e, r29	; 62
			return(1);
			break;

	}

	return(0);
    1032:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));

			get_EOD(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
    1034:	39 c0       	rjmp	.+114    	; 0x10a8 <report+0x1b6>

		case 'v':
			get_VERSION(version);	// Send the specMech version
    1036:	8e 01       	movw	r16, r28
    1038:	09 59       	subi	r16, 0x99	; 153
    103a:	1f 4f       	sbci	r17, 0xFF	; 255
    103c:	c8 01       	movw	r24, r16
    103e:	0e 94 38 06 	call	0xc70	; 0xc70 <get_VERSION>
			sprintf(outbuf, format_VER, get_specID(), version);
    1042:	1f 93       	push	r17
    1044:	0f 93       	push	r16
    1046:	1f 92       	push	r1
    1048:	82 e0       	ldi	r24, 0x02	; 2
    104a:	8f 93       	push	r24
    104c:	ce 01       	movw	r24, r28
    104e:	88 57       	subi	r24, 0x78	; 120
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	9f 93       	push	r25
    1054:	8f 93       	push	r24
    1056:	06 56       	subi	r16, 0x66	; 102
    1058:	11 09       	sbc	r17, r1
    105a:	1f 93       	push	r17
    105c:	0f 93       	push	r16
    105e:	0e 94 ff 09 	call	0x13fe	; 0x13fe <sprintf>
			checksum_NMEA(outbuf);
    1062:	c8 01       	movw	r24, r16
    1064:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1068:	f8 01       	movw	r30, r16
    106a:	01 90       	ld	r0, Z+
    106c:	00 20       	and	r0, r0
    106e:	e9 f7       	brne	.-6      	; 0x106a <report+0x178>
    1070:	31 97       	sbiw	r30, 0x01	; 1
    1072:	af 01       	movw	r20, r30
    1074:	40 1b       	sub	r20, r16
    1076:	51 0b       	sbc	r21, r17
    1078:	b8 01       	movw	r22, r16
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>

			get_EOD(outbuf);
    1080:	c8 01       	movw	r24, r16
    1082:	0e 94 c5 04 	call	0x98a	; 0x98a <get_EOD>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1086:	f8 01       	movw	r30, r16
    1088:	01 90       	ld	r0, Z+
    108a:	00 20       	and	r0, r0
    108c:	e9 f7       	brne	.-6      	; 0x1088 <report+0x196>
    108e:	31 97       	sbiw	r30, 0x01	; 1
    1090:	af 01       	movw	r20, r30
    1092:	40 1b       	sub	r20, r16
    1094:	51 0b       	sbc	r21, r17
    1096:	b8 01       	movw	r22, r16
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>
			break;
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	de bf       	out	0x3e, r29	; 62
			return(1);
			break;

	}

	return(0);
    10a2:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));

			get_EOD(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <report+0x1b6>

		default:
			return(1);
    10a6:	81 e0       	ldi	r24, 0x01	; 1

	}

	return(0);

}
    10a8:	ce 56       	subi	r28, 0x6E	; 110
    10aa:	df 4f       	sbci	r29, 0xFF	; 255
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	08 95       	ret

000010ba <send_prompt>:

void send_prompt(uint8_t prompt_flag)
{
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	6d 97       	sbiw	r28, 0x1d	; 29
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	de bf       	out	0x3e, r29	; 62

	const char str0[] = ">";
    10cc:	2e e3       	ldi	r18, 0x3E	; 62
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	29 83       	std	Y+1, r18	; 0x01
    10d2:	3a 83       	std	Y+2, r19	; 0x02
	const char str1[] = "!";
    10d4:	21 e2       	ldi	r18, 0x21	; 33
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	2b 83       	std	Y+3, r18	; 0x03
    10da:	3c 83       	std	Y+4, r19	; 0x04

	char prompt_str[25];

	switch (prompt_flag) {
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	d9 f0       	breq	.+54     	; 0x1116 <send_prompt+0x5c>
    10e0:	20 f0       	brcs	.+8      	; 0x10ea <send_prompt+0x30>
    10e2:	82 30       	cpi	r24, 0x02	; 2
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <send_prompt+0x2e>
    10e6:	4b c0       	rjmp	.+150    	; 0x117e <send_prompt+0xc4>
    10e8:	60 c0       	rjmp	.+192    	; 0x11aa <send_prompt+0xf0>
		case 0:
			strcpy(prompt_str, str0);
    10ea:	8e 01       	movw	r16, r28
    10ec:	0b 5f       	subi	r16, 0xFB	; 251
    10ee:	1f 4f       	sbci	r17, 0xFF	; 255
    10f0:	be 01       	movw	r22, r28
    10f2:	6f 5f       	subi	r22, 0xFF	; 255
    10f4:	7f 4f       	sbci	r23, 0xFF	; 255
    10f6:	c8 01       	movw	r24, r16
    10f8:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
    10fc:	f8 01       	movw	r30, r16
    10fe:	01 90       	ld	r0, Z+
    1100:	00 20       	and	r0, r0
    1102:	e9 f7       	brne	.-6      	; 0x10fe <send_prompt+0x44>
    1104:	31 97       	sbiw	r30, 0x01	; 1
    1106:	af 01       	movw	r20, r30
    1108:	40 1b       	sub	r20, r16
    110a:	51 0b       	sbc	r21, r17
    110c:	b8 01       	movw	r22, r16
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>
			break;
    1114:	5f c0       	rjmp	.+190    	; 0x11d4 <send_prompt+0x11a>

		case 1:
			get_ERR(prompt_str);
    1116:	8e 01       	movw	r16, r28
    1118:	0b 5f       	subi	r16, 0xFB	; 251
    111a:	1f 4f       	sbci	r17, 0xFF	; 255
    111c:	c8 01       	movw	r24, r16
    111e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <get_ERR>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
    1122:	f8 01       	movw	r30, r16
    1124:	01 90       	ld	r0, Z+
    1126:	00 20       	and	r0, r0
    1128:	e9 f7       	brne	.-6      	; 0x1124 <send_prompt+0x6a>
    112a:	31 97       	sbiw	r30, 0x01	; 1
    112c:	af 01       	movw	r20, r30
    112e:	40 1b       	sub	r20, r16
    1130:	51 0b       	sbc	r21, r17
    1132:	b8 01       	movw	r22, r16
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>
			get_EOD(prompt_str);
    113a:	c8 01       	movw	r24, r16
    113c:	0e 94 c5 04 	call	0x98a	; 0x98a <get_EOD>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
    1140:	f8 01       	movw	r30, r16
    1142:	01 90       	ld	r0, Z+
    1144:	00 20       	and	r0, r0
    1146:	e9 f7       	brne	.-6      	; 0x1142 <send_prompt+0x88>
    1148:	31 97       	sbiw	r30, 0x01	; 1
    114a:	af 01       	movw	r20, r30
    114c:	40 1b       	sub	r20, r16
    114e:	51 0b       	sbc	r21, r17
    1150:	b8 01       	movw	r22, r16
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>
			strcpy(prompt_str, str0);
    1158:	be 01       	movw	r22, r28
    115a:	6f 5f       	subi	r22, 0xFF	; 255
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	c8 01       	movw	r24, r16
    1160:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
    1164:	f8 01       	movw	r30, r16
    1166:	01 90       	ld	r0, Z+
    1168:	00 20       	and	r0, r0
    116a:	e9 f7       	brne	.-6      	; 0x1166 <send_prompt+0xac>
    116c:	31 97       	sbiw	r30, 0x01	; 1
    116e:	af 01       	movw	r20, r30
    1170:	40 1b       	sub	r20, r16
    1172:	51 0b       	sbc	r21, r17
    1174:	b8 01       	movw	r22, r16
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>
			break;
    117c:	2b c0       	rjmp	.+86     	; 0x11d4 <send_prompt+0x11a>

		case REBOOTNACK:
			strcpy(prompt_str, str1);
    117e:	8e 01       	movw	r16, r28
    1180:	0b 5f       	subi	r16, 0xFB	; 251
    1182:	1f 4f       	sbci	r17, 0xFF	; 255
    1184:	be 01       	movw	r22, r28
    1186:	6d 5f       	subi	r22, 0xFD	; 253
    1188:	7f 4f       	sbci	r23, 0xFF	; 255
    118a:	c8 01       	movw	r24, r16
    118c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
    1190:	f8 01       	movw	r30, r16
    1192:	01 90       	ld	r0, Z+
    1194:	00 20       	and	r0, r0
    1196:	e9 f7       	brne	.-6      	; 0x1192 <send_prompt+0xd8>
    1198:	31 97       	sbiw	r30, 0x01	; 1
    119a:	af 01       	movw	r20, r30
    119c:	40 1b       	sub	r20, r16
    119e:	51 0b       	sbc	r21, r17
    11a0:	b8 01       	movw	r22, r16
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>
			break;
    11a8:	15 c0       	rjmp	.+42     	; 0x11d4 <send_prompt+0x11a>

		default:
			strcpy(prompt_str, str1);
    11aa:	8e 01       	movw	r16, r28
    11ac:	0b 5f       	subi	r16, 0xFB	; 251
    11ae:	1f 4f       	sbci	r17, 0xFF	; 255
    11b0:	be 01       	movw	r22, r28
    11b2:	6d 5f       	subi	r22, 0xFD	; 253
    11b4:	7f 4f       	sbci	r23, 0xFF	; 255
    11b6:	c8 01       	movw	r24, r16
    11b8:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
    11bc:	f8 01       	movw	r30, r16
    11be:	01 90       	ld	r0, Z+
    11c0:	00 20       	and	r0, r0
    11c2:	e9 f7       	brne	.-6      	; 0x11be <send_prompt+0x104>
    11c4:	31 97       	sbiw	r30, 0x01	; 1
    11c6:	af 01       	movw	r20, r30
    11c8:	40 1b       	sub	r20, r16
    11ca:	51 0b       	sbc	r21, r17
    11cc:	b8 01       	movw	r22, r16
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>
			break;
			
	}


}
    11d4:	6d 96       	adiw	r28, 0x1d	; 29
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	08 95       	ret

000011e4 <set>:

uint8_t set(char *ptr)
{

	ptr++;
	switch(*ptr) {
    11e4:	fc 01       	movw	r30, r24
    11e6:	21 81       	ldd	r18, Z+1	; 0x01
    11e8:	24 37       	cpi	r18, 0x74	; 116
    11ea:	29 f4       	brne	.+10     	; 0x11f6 <set+0x12>
		case 't':			// date/time
			ptr++;
			put_time(ptr);
    11ec:	02 96       	adiw	r24, 0x02	; 2
    11ee:	0e 94 62 04 	call	0x8c4	; 0x8c4 <put_time>

		default:
			return(1);
			break;
	}
	return(0);
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	08 95       	ret
			ptr++;
			put_time(ptr);
			break;

		default:
			return(1);
    11f6:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}
	return(0);
    11f8:	08 95       	ret

000011fa <commands>:
	return(0);

}

void commands(void)
{
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	ce 59       	subi	r28, 0x9E	; 158
    1204:	d1 09       	sbc	r29, r1
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	de bf       	out	0x3e, r29	; 62
	uint16_t memaddress;
	static uint8_t rebootnack = 1;

	// Copy the command to cmdline[]
	for (i = 0; i < BUFSIZE; i++) {
		cmdline[i] = recv0_buf.data[recv0_buf.tail];
    120a:	20 91 08 29 	lds	r18, 0x2908	; 0x802908 <recv0_buf+0x81>
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	f9 01       	movw	r30, r18
    1212:	e9 57       	subi	r30, 0x79	; 121
    1214:	f7 4d       	sbci	r31, 0xD7	; 215
    1216:	90 81       	ld	r25, Z
    1218:	9b 87       	std	Y+11, r25	; 0x0b
		recv0_buf.tail = (recv0_buf.tail + 1) % BUFSIZE;
    121a:	2f 5f       	subi	r18, 0xFF	; 255
    121c:	3f 4f       	sbci	r19, 0xFF	; 255
    121e:	2f 77       	andi	r18, 0x7F	; 127
    1220:	30 78       	andi	r19, 0x80	; 128
    1222:	33 23       	and	r19, r19
    1224:	34 f4       	brge	.+12     	; 0x1232 <commands+0x38>
    1226:	21 50       	subi	r18, 0x01	; 1
    1228:	31 09       	sbc	r19, r1
    122a:	20 68       	ori	r18, 0x80	; 128
    122c:	3f 6f       	ori	r19, 0xFF	; 255
    122e:	2f 5f       	subi	r18, 0xFF	; 255
    1230:	3f 4f       	sbci	r19, 0xFF	; 255
    1232:	82 2f       	mov	r24, r18
    1234:	20 93 08 29 	sts	0x2908, r18	; 0x802908 <recv0_buf+0x81>
		if (cmdline[i] == '\0') {
    1238:	99 23       	and	r25, r25
    123a:	09 f4       	brne	.+2      	; 0x123e <commands+0x44>
    123c:	aa c0       	rjmp	.+340    	; 0x1392 <commands+0x198>
	char *ptr, strbuf[20];
	uint16_t memaddress;
	static uint8_t rebootnack = 1;

	// Copy the command to cmdline[]
	for (i = 0; i < BUFSIZE; i++) {
    123e:	21 e0       	ldi	r18, 0x01	; 1
		cmdline[i] = recv0_buf.data[recv0_buf.tail];
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	fc 01       	movw	r30, r24
    1244:	e9 57       	subi	r30, 0x79	; 121
    1246:	f7 4d       	sbci	r31, 0xD7	; 215
    1248:	30 81       	ld	r19, Z
    124a:	eb e0       	ldi	r30, 0x0B	; 11
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	ec 0f       	add	r30, r28
    1250:	fd 1f       	adc	r31, r29
    1252:	e2 0f       	add	r30, r18
    1254:	f1 1d       	adc	r31, r1
    1256:	30 83       	st	Z, r19
		recv0_buf.tail = (recv0_buf.tail + 1) % BUFSIZE;
    1258:	01 96       	adiw	r24, 0x01	; 1
    125a:	8f 77       	andi	r24, 0x7F	; 127
    125c:	90 78       	andi	r25, 0x80	; 128
    125e:	99 23       	and	r25, r25
    1260:	24 f4       	brge	.+8      	; 0x126a <commands+0x70>
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	80 68       	ori	r24, 0x80	; 128
    1266:	9f 6f       	ori	r25, 0xFF	; 255
    1268:	01 96       	adiw	r24, 0x01	; 1
		if (cmdline[i] == '\0') {
    126a:	31 11       	cpse	r19, r1
    126c:	03 c0       	rjmp	.+6      	; 0x1274 <commands+0x7a>
    126e:	80 93 08 29 	sts	0x2908, r24	; 0x802908 <recv0_buf+0x81>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <commands+0x82>
	char *ptr, strbuf[20];
	uint16_t memaddress;
	static uint8_t rebootnack = 1;

	// Copy the command to cmdline[]
	for (i = 0; i < BUFSIZE; i++) {
    1274:	2f 5f       	subi	r18, 0xFF	; 255
    1276:	22 f7       	brpl	.-56     	; 0x1240 <commands+0x46>
    1278:	80 93 08 29 	sts	0x2908, r24	; 0x802908 <recv0_buf+0x81>
		if (cmdline[i] == '\0') {
			break;
		}
	}

	if (rebootnack) {			// Rebooted, but not acknowledged
    127c:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__data_start>
    1280:	88 23       	and	r24, r24
    1282:	69 f0       	breq	.+26     	; 0x129e <commands+0xa4>
		if (cmdline[0] == '!') {
    1284:	8b 85       	ldd	r24, Y+11	; 0x0b
    1286:	81 32       	cpi	r24, 0x21	; 33
    1288:	31 f4       	brne	.+12     	; 0x1296 <commands+0x9c>
			rebootnack = 0;
    128a:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__data_start>
			send_prompt(0);
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	0e 94 5d 08 	call	0x10ba	; 0x10ba <send_prompt>
			return;
    1294:	84 c0       	rjmp	.+264    	; 0x139e <commands+0x1a4>
		} else {
			send_prompt(REBOOTNACK);
    1296:	82 e0       	ldi	r24, 0x02	; 2
    1298:	0e 94 5d 08 	call	0x10ba	; 0x10ba <send_prompt>
			return;			
    129c:	80 c0       	rjmp	.+256    	; 0x139e <commands+0x1a4>
	}

	prompt_flag = 0;
	ptr = cmdline;

	switch (*ptr) {
    129e:	8b 85       	ldd	r24, Y+11	; 0x0b
    12a0:	85 36       	cpi	r24, 0x65	; 101
    12a2:	11 f1       	breq	.+68     	; 0x12e8 <commands+0xee>
    12a4:	68 f4       	brcc	.+26     	; 0x12c0 <commands+0xc6>
    12a6:	85 34       	cpi	r24, 0x45	; 69
    12a8:	41 f1       	breq	.+80     	; 0x12fa <commands+0x100>
    12aa:	20 f4       	brcc	.+8      	; 0x12b4 <commands+0xba>
    12ac:	88 23       	and	r24, r24
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <commands+0xb8>
    12b0:	6c c0       	rjmp	.+216    	; 0x138a <commands+0x190>
    12b2:	13 c0       	rjmp	.+38     	; 0x12da <commands+0xe0>
    12b4:	82 35       	cpi	r24, 0x52	; 82
    12b6:	09 f4       	brne	.+2      	; 0x12ba <commands+0xc0>
    12b8:	5f c0       	rjmp	.+190    	; 0x1378 <commands+0x17e>
    12ba:	83 36       	cpi	r24, 0x63	; 99
    12bc:	81 f0       	breq	.+32     	; 0x12de <commands+0xe4>
    12be:	0d c0       	rjmp	.+26     	; 0x12da <commands+0xe0>
    12c0:	8f 36       	cpi	r24, 0x6F	; 111
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <commands+0xcc>
    12c4:	4f c0       	rjmp	.+158    	; 0x1364 <commands+0x16a>
    12c6:	18 f4       	brcc	.+6      	; 0x12ce <commands+0xd4>
    12c8:	86 36       	cpi	r24, 0x66	; 102
    12ca:	01 f1       	breq	.+64     	; 0x130c <commands+0x112>
    12cc:	06 c0       	rjmp	.+12     	; 0x12da <commands+0xe0>
    12ce:	82 37       	cpi	r24, 0x72	; 114
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <commands+0xda>
    12d2:	4d c0       	rjmp	.+154    	; 0x136e <commands+0x174>
    12d4:	83 37       	cpi	r24, 0x73	; 115
    12d6:	09 f4       	brne	.+2      	; 0x12da <commands+0xe0>
    12d8:	53 c0       	rjmp	.+166    	; 0x1380 <commands+0x186>
		case '\0':
			prompt_flag = 0;
			break;
	
		default:				// send a ?
			prompt_flag = 1;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	57 c0       	rjmp	.+174    	; 0x138c <commands+0x192>
	ptr = cmdline;

	switch (*ptr) {

		case 'c':
			prompt_flag = close(ptr);
    12de:	ce 01       	movw	r24, r28
    12e0:	0b 96       	adiw	r24, 0x0b	; 11
    12e2:	0e 94 81 06 	call	0xd02	; 0xd02 <close>
			break;
    12e6:	52 c0       	rjmp	.+164    	; 0x138c <commands+0x192>

// IGNORE---------------------------------------------
		case 'e':
			ptr++;
			writestr_OLED(0, ptr, 1);
    12e8:	41 e0       	ldi	r20, 0x01	; 1
    12ea:	be 01       	movw	r22, r28
    12ec:	64 5f       	subi	r22, 0xF4	; 244
    12ee:	7f 4f       	sbci	r23, 0xFF	; 255
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <writestr_OLED>
			prompt_flag = 0;
    12f6:	80 e0       	ldi	r24, 0x00	; 0
			break;
    12f8:	49 c0       	rjmp	.+146    	; 0x138c <commands+0x192>

		case 'E':
			ptr++;
			writestr_OLED(0, ptr, 2);
    12fa:	42 e0       	ldi	r20, 0x02	; 2
    12fc:	be 01       	movw	r22, r28
    12fe:	64 5f       	subi	r22, 0xF4	; 244
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <writestr_OLED>
			prompt_flag = 0;
    1308:	80 e0       	ldi	r24, 0x00	; 0
			break;
    130a:	40 c0       	rjmp	.+128    	; 0x138c <commands+0x192>

		case 'f':
			memaddress = 0;
			framdata[0] = 0xAA;
    130c:	8a ea       	ldi	r24, 0xAA	; 170
    130e:	89 83       	std	Y+1, r24	; 0x01
			write_FRAM(FRAMADDR, memaddress, framdata, 1);
    1310:	21 e0       	ldi	r18, 0x01	; 1
    1312:	ae 01       	movw	r20, r28
    1314:	4f 5f       	subi	r20, 0xFF	; 255
    1316:	5f 4f       	sbci	r21, 0xFF	; 255
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	80 ea       	ldi	r24, 0xA0	; 160
    131e:	0e 94 55 03 	call	0x6aa	; 0x6aa <write_FRAM>
			read_FRAM(FRAMADDR, memaddress, framdata, 2);
    1322:	22 e0       	ldi	r18, 0x02	; 2
    1324:	ae 01       	movw	r20, r28
    1326:	4f 5f       	subi	r20, 0xFF	; 255
    1328:	5f 4f       	sbci	r21, 0xFF	; 255
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	80 ea       	ldi	r24, 0xA0	; 160
    1330:	0e 94 22 03 	call	0x644	; 0x644 <read_FRAM>
			strcpy(strbuf, "read FRAM\r\n");
    1334:	be 01       	movw	r22, r28
    1336:	65 57       	subi	r22, 0x75	; 117
    1338:	7f 4f       	sbci	r23, 0xFF	; 255
    133a:	8c e0       	ldi	r24, 0x0C	; 12
    133c:	e4 ea       	ldi	r30, 0xA4	; 164
    133e:	fb e5       	ldi	r31, 0x5B	; 91
    1340:	db 01       	movw	r26, r22
    1342:	01 90       	ld	r0, Z+
    1344:	0d 92       	st	X+, r0
    1346:	8a 95       	dec	r24
    1348:	e1 f7       	brne	.-8      	; 0x1342 <commands+0x148>
			send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
    134a:	fb 01       	movw	r30, r22
    134c:	01 90       	ld	r0, Z+
    134e:	00 20       	and	r0, r0
    1350:	e9 f7       	brne	.-6      	; 0x134c <commands+0x152>
    1352:	31 97       	sbiw	r30, 0x01	; 1
    1354:	af 01       	movw	r20, r30
    1356:	46 1b       	sub	r20, r22
    1358:	57 0b       	sbc	r21, r23
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <send_USART>
			prompt_flag = 0;
    1360:	80 e0       	ldi	r24, 0x00	; 0
			break;
    1362:	14 c0       	rjmp	.+40     	; 0x138c <commands+0x192>
// STOP IGNORE----------------------------------------

		case 'o':				// open
			prompt_flag = open(ptr);
    1364:	ce 01       	movw	r24, r28
    1366:	0b 96       	adiw	r24, 0x0b	; 11
    1368:	0e 94 fd 06 	call	0xdfa	; 0xdfa <open>
			break;
    136c:	0f c0       	rjmp	.+30     	; 0x138c <commands+0x192>

		case 'r':				// report
			prompt_flag = report(ptr);
    136e:	ce 01       	movw	r24, r28
    1370:	0b 96       	adiw	r24, 0x0b	; 11
    1372:	0e 94 79 07 	call	0xef2	; 0xef2 <report>
			break;
    1376:	0a c0       	rjmp	.+20     	; 0x138c <commands+0x192>

		case 'R':
			reboot();
    1378:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <reboot>
			send_prompt(REBOOTNACK);
			return;			
		}
	}

	prompt_flag = 0;
    137c:	80 e0       	ldi	r24, 0x00	; 0
			prompt_flag = report(ptr);
			break;

		case 'R':
			reboot();
			break;
    137e:	06 c0       	rjmp	.+12     	; 0x138c <commands+0x192>

		case 's':				// set
			prompt_flag = set(ptr);
    1380:	ce 01       	movw	r24, r28
    1382:	0b 96       	adiw	r24, 0x0b	; 11
    1384:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <set>
			break;
    1388:	01 c0       	rjmp	.+2      	; 0x138c <commands+0x192>
			
		case '\0':
			prompt_flag = 0;
    138a:	80 e0       	ldi	r24, 0x00	; 0
			prompt_flag = 1;
			break;

	}

	send_prompt(prompt_flag);
    138c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <send_prompt>
    1390:	06 c0       	rjmp	.+12     	; 0x139e <commands+0x1a4>
		if (cmdline[i] == '\0') {
			break;
		}
	}

	if (rebootnack) {			// Rebooted, but not acknowledged
    1392:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__data_start>
    1396:	88 23       	and	r24, r24
    1398:	09 f4       	brne	.+2      	; 0x139c <commands+0x1a2>
    139a:	81 cf       	rjmp	.-254    	; 0x129e <commands+0xa4>
    139c:	7c cf       	rjmp	.-264    	; 0x1296 <commands+0x9c>

	}

	send_prompt(prompt_flag);

}
    139e:	c2 56       	subi	r28, 0x62	; 98
    13a0:	df 4f       	sbci	r29, 0xFF	; 255
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	08 95       	ret

000013ac <main>:
	recv0_buf, recv1_buf, recv3_buf;

int main(void)
{

	init_PORTS();
    13ac:	0e 94 6f 00 	call	0xde	; 0xde <init_PORTS>
	init_LED();
    13b0:	0e 94 a7 00 	call	0x14e	; 0x14e <init_LED>
	init_TWI();
    13b4:	0e 94 ad 00 	call	0x15a	; 0x15a <init_TWI>
	init_USART();
    13b8:	0e 94 36 01 	call	0x26c	; 0x26c <init_USART>
	init_OLED(0);
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	0e 94 18 05 	call	0xa30	; 0xa30 <init_OLED>
	init_EEPROM();
    13c2:	0e 94 76 06 	call	0xcec	; 0xcec <init_EEPROM>
	sei();
    13c6:	78 94       	sei

	for (;;) {
		if (recv0_buf.done) {
    13c8:	cb e0       	ldi	r28, 0x0B	; 11
    13ca:	d9 e2       	ldi	r29, 0x29	; 41
    13cc:	88 81       	ld	r24, Y
    13ce:	88 23       	and	r24, r24
    13d0:	e9 f3       	breq	.-6      	; 0x13cc <main+0x20>
			recv0_buf.done = NO;
    13d2:	18 82       	st	Y, r1
			commands();
    13d4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <commands>
    13d8:	f9 cf       	rjmp	.-14     	; 0x13cc <main+0x20>

000013da <strcat>:
    13da:	fb 01       	movw	r30, r22
    13dc:	dc 01       	movw	r26, r24
    13de:	0d 90       	ld	r0, X+
    13e0:	00 20       	and	r0, r0
    13e2:	e9 f7       	brne	.-6      	; 0x13de <strcat+0x4>
    13e4:	11 97       	sbiw	r26, 0x01	; 1
    13e6:	01 90       	ld	r0, Z+
    13e8:	0d 92       	st	X+, r0
    13ea:	00 20       	and	r0, r0
    13ec:	e1 f7       	brne	.-8      	; 0x13e6 <strcat+0xc>
    13ee:	08 95       	ret

000013f0 <strcpy>:
    13f0:	fb 01       	movw	r30, r22
    13f2:	dc 01       	movw	r26, r24
    13f4:	01 90       	ld	r0, Z+
    13f6:	0d 92       	st	X+, r0
    13f8:	00 20       	and	r0, r0
    13fa:	e1 f7       	brne	.-8      	; 0x13f4 <strcpy+0x4>
    13fc:	08 95       	ret

000013fe <sprintf>:
    13fe:	ae e0       	ldi	r26, 0x0E	; 14
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e5 e0       	ldi	r30, 0x05	; 5
    1404:	fa e0       	ldi	r31, 0x0A	; 10
    1406:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <__prologue_saves__+0x1c>
    140a:	0d 89       	ldd	r16, Y+21	; 0x15
    140c:	1e 89       	ldd	r17, Y+22	; 0x16
    140e:	86 e0       	ldi	r24, 0x06	; 6
    1410:	8c 83       	std	Y+4, r24	; 0x04
    1412:	09 83       	std	Y+1, r16	; 0x01
    1414:	1a 83       	std	Y+2, r17	; 0x02
    1416:	8f ef       	ldi	r24, 0xFF	; 255
    1418:	9f e7       	ldi	r25, 0x7F	; 127
    141a:	8d 83       	std	Y+5, r24	; 0x05
    141c:	9e 83       	std	Y+6, r25	; 0x06
    141e:	ae 01       	movw	r20, r28
    1420:	47 5e       	subi	r20, 0xE7	; 231
    1422:	5f 4f       	sbci	r21, 0xFF	; 255
    1424:	6f 89       	ldd	r22, Y+23	; 0x17
    1426:	78 8d       	ldd	r23, Y+24	; 0x18
    1428:	ce 01       	movw	r24, r28
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	0e 94 21 0a 	call	0x1442	; 0x1442 <vfprintf>
    1430:	ef 81       	ldd	r30, Y+7	; 0x07
    1432:	f8 85       	ldd	r31, Y+8	; 0x08
    1434:	e0 0f       	add	r30, r16
    1436:	f1 1f       	adc	r31, r17
    1438:	10 82       	st	Z, r1
    143a:	2e 96       	adiw	r28, 0x0e	; 14
    143c:	e4 e0       	ldi	r30, 0x04	; 4
    143e:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__epilogue_restores__+0x1c>

00001442 <vfprintf>:
    1442:	ab e0       	ldi	r26, 0x0B	; 11
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e7 e2       	ldi	r30, 0x27	; 39
    1448:	fa e0       	ldi	r31, 0x0A	; 10
    144a:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <__prologue_saves__>
    144e:	6c 01       	movw	r12, r24
    1450:	7b 01       	movw	r14, r22
    1452:	8a 01       	movw	r16, r20
    1454:	fc 01       	movw	r30, r24
    1456:	16 82       	std	Z+6, r1	; 0x06
    1458:	17 82       	std	Z+7, r1	; 0x07
    145a:	83 81       	ldd	r24, Z+3	; 0x03
    145c:	81 ff       	sbrs	r24, 1
    145e:	cc c1       	rjmp	.+920    	; 0x17f8 <vfprintf+0x3b6>
    1460:	ce 01       	movw	r24, r28
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	3c 01       	movw	r6, r24
    1466:	f6 01       	movw	r30, r12
    1468:	93 81       	ldd	r25, Z+3	; 0x03
    146a:	f7 01       	movw	r30, r14
    146c:	93 fd       	sbrc	r25, 3
    146e:	85 91       	lpm	r24, Z+
    1470:	93 ff       	sbrs	r25, 3
    1472:	81 91       	ld	r24, Z+
    1474:	7f 01       	movw	r14, r30
    1476:	88 23       	and	r24, r24
    1478:	09 f4       	brne	.+2      	; 0x147c <vfprintf+0x3a>
    147a:	ba c1       	rjmp	.+884    	; 0x17f0 <vfprintf+0x3ae>
    147c:	85 32       	cpi	r24, 0x25	; 37
    147e:	39 f4       	brne	.+14     	; 0x148e <vfprintf+0x4c>
    1480:	93 fd       	sbrc	r25, 3
    1482:	85 91       	lpm	r24, Z+
    1484:	93 ff       	sbrs	r25, 3
    1486:	81 91       	ld	r24, Z+
    1488:	7f 01       	movw	r14, r30
    148a:	85 32       	cpi	r24, 0x25	; 37
    148c:	29 f4       	brne	.+10     	; 0x1498 <vfprintf+0x56>
    148e:	b6 01       	movw	r22, r12
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 18 0c 	call	0x1830	; 0x1830 <fputc>
    1496:	e7 cf       	rjmp	.-50     	; 0x1466 <vfprintf+0x24>
    1498:	91 2c       	mov	r9, r1
    149a:	21 2c       	mov	r2, r1
    149c:	31 2c       	mov	r3, r1
    149e:	ff e1       	ldi	r31, 0x1F	; 31
    14a0:	f3 15       	cp	r31, r3
    14a2:	d8 f0       	brcs	.+54     	; 0x14da <vfprintf+0x98>
    14a4:	8b 32       	cpi	r24, 0x2B	; 43
    14a6:	79 f0       	breq	.+30     	; 0x14c6 <vfprintf+0x84>
    14a8:	38 f4       	brcc	.+14     	; 0x14b8 <vfprintf+0x76>
    14aa:	80 32       	cpi	r24, 0x20	; 32
    14ac:	79 f0       	breq	.+30     	; 0x14cc <vfprintf+0x8a>
    14ae:	83 32       	cpi	r24, 0x23	; 35
    14b0:	a1 f4       	brne	.+40     	; 0x14da <vfprintf+0x98>
    14b2:	23 2d       	mov	r18, r3
    14b4:	20 61       	ori	r18, 0x10	; 16
    14b6:	1d c0       	rjmp	.+58     	; 0x14f2 <vfprintf+0xb0>
    14b8:	8d 32       	cpi	r24, 0x2D	; 45
    14ba:	61 f0       	breq	.+24     	; 0x14d4 <vfprintf+0x92>
    14bc:	80 33       	cpi	r24, 0x30	; 48
    14be:	69 f4       	brne	.+26     	; 0x14da <vfprintf+0x98>
    14c0:	23 2d       	mov	r18, r3
    14c2:	21 60       	ori	r18, 0x01	; 1
    14c4:	16 c0       	rjmp	.+44     	; 0x14f2 <vfprintf+0xb0>
    14c6:	83 2d       	mov	r24, r3
    14c8:	82 60       	ori	r24, 0x02	; 2
    14ca:	38 2e       	mov	r3, r24
    14cc:	e3 2d       	mov	r30, r3
    14ce:	e4 60       	ori	r30, 0x04	; 4
    14d0:	3e 2e       	mov	r3, r30
    14d2:	2a c0       	rjmp	.+84     	; 0x1528 <vfprintf+0xe6>
    14d4:	f3 2d       	mov	r31, r3
    14d6:	f8 60       	ori	r31, 0x08	; 8
    14d8:	1d c0       	rjmp	.+58     	; 0x1514 <vfprintf+0xd2>
    14da:	37 fc       	sbrc	r3, 7
    14dc:	2d c0       	rjmp	.+90     	; 0x1538 <vfprintf+0xf6>
    14de:	20 ed       	ldi	r18, 0xD0	; 208
    14e0:	28 0f       	add	r18, r24
    14e2:	2a 30       	cpi	r18, 0x0A	; 10
    14e4:	40 f0       	brcs	.+16     	; 0x14f6 <vfprintf+0xb4>
    14e6:	8e 32       	cpi	r24, 0x2E	; 46
    14e8:	b9 f4       	brne	.+46     	; 0x1518 <vfprintf+0xd6>
    14ea:	36 fc       	sbrc	r3, 6
    14ec:	81 c1       	rjmp	.+770    	; 0x17f0 <vfprintf+0x3ae>
    14ee:	23 2d       	mov	r18, r3
    14f0:	20 64       	ori	r18, 0x40	; 64
    14f2:	32 2e       	mov	r3, r18
    14f4:	19 c0       	rjmp	.+50     	; 0x1528 <vfprintf+0xe6>
    14f6:	36 fe       	sbrs	r3, 6
    14f8:	06 c0       	rjmp	.+12     	; 0x1506 <vfprintf+0xc4>
    14fa:	8a e0       	ldi	r24, 0x0A	; 10
    14fc:	98 9e       	mul	r9, r24
    14fe:	20 0d       	add	r18, r0
    1500:	11 24       	eor	r1, r1
    1502:	92 2e       	mov	r9, r18
    1504:	11 c0       	rjmp	.+34     	; 0x1528 <vfprintf+0xe6>
    1506:	ea e0       	ldi	r30, 0x0A	; 10
    1508:	2e 9e       	mul	r2, r30
    150a:	20 0d       	add	r18, r0
    150c:	11 24       	eor	r1, r1
    150e:	22 2e       	mov	r2, r18
    1510:	f3 2d       	mov	r31, r3
    1512:	f0 62       	ori	r31, 0x20	; 32
    1514:	3f 2e       	mov	r3, r31
    1516:	08 c0       	rjmp	.+16     	; 0x1528 <vfprintf+0xe6>
    1518:	8c 36       	cpi	r24, 0x6C	; 108
    151a:	21 f4       	brne	.+8      	; 0x1524 <vfprintf+0xe2>
    151c:	83 2d       	mov	r24, r3
    151e:	80 68       	ori	r24, 0x80	; 128
    1520:	38 2e       	mov	r3, r24
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <vfprintf+0xe6>
    1524:	88 36       	cpi	r24, 0x68	; 104
    1526:	41 f4       	brne	.+16     	; 0x1538 <vfprintf+0xf6>
    1528:	f7 01       	movw	r30, r14
    152a:	93 fd       	sbrc	r25, 3
    152c:	85 91       	lpm	r24, Z+
    152e:	93 ff       	sbrs	r25, 3
    1530:	81 91       	ld	r24, Z+
    1532:	7f 01       	movw	r14, r30
    1534:	81 11       	cpse	r24, r1
    1536:	b3 cf       	rjmp	.-154    	; 0x149e <vfprintf+0x5c>
    1538:	98 2f       	mov	r25, r24
    153a:	9f 7d       	andi	r25, 0xDF	; 223
    153c:	95 54       	subi	r25, 0x45	; 69
    153e:	93 30       	cpi	r25, 0x03	; 3
    1540:	28 f4       	brcc	.+10     	; 0x154c <vfprintf+0x10a>
    1542:	0c 5f       	subi	r16, 0xFC	; 252
    1544:	1f 4f       	sbci	r17, 0xFF	; 255
    1546:	9f e3       	ldi	r25, 0x3F	; 63
    1548:	99 83       	std	Y+1, r25	; 0x01
    154a:	0d c0       	rjmp	.+26     	; 0x1566 <vfprintf+0x124>
    154c:	83 36       	cpi	r24, 0x63	; 99
    154e:	31 f0       	breq	.+12     	; 0x155c <vfprintf+0x11a>
    1550:	83 37       	cpi	r24, 0x73	; 115
    1552:	71 f0       	breq	.+28     	; 0x1570 <vfprintf+0x12e>
    1554:	83 35       	cpi	r24, 0x53	; 83
    1556:	09 f0       	breq	.+2      	; 0x155a <vfprintf+0x118>
    1558:	59 c0       	rjmp	.+178    	; 0x160c <vfprintf+0x1ca>
    155a:	21 c0       	rjmp	.+66     	; 0x159e <vfprintf+0x15c>
    155c:	f8 01       	movw	r30, r16
    155e:	80 81       	ld	r24, Z
    1560:	89 83       	std	Y+1, r24	; 0x01
    1562:	0e 5f       	subi	r16, 0xFE	; 254
    1564:	1f 4f       	sbci	r17, 0xFF	; 255
    1566:	88 24       	eor	r8, r8
    1568:	83 94       	inc	r8
    156a:	91 2c       	mov	r9, r1
    156c:	53 01       	movw	r10, r6
    156e:	13 c0       	rjmp	.+38     	; 0x1596 <vfprintf+0x154>
    1570:	28 01       	movw	r4, r16
    1572:	f2 e0       	ldi	r31, 0x02	; 2
    1574:	4f 0e       	add	r4, r31
    1576:	51 1c       	adc	r5, r1
    1578:	f8 01       	movw	r30, r16
    157a:	a0 80       	ld	r10, Z
    157c:	b1 80       	ldd	r11, Z+1	; 0x01
    157e:	36 fe       	sbrs	r3, 6
    1580:	03 c0       	rjmp	.+6      	; 0x1588 <vfprintf+0x146>
    1582:	69 2d       	mov	r22, r9
    1584:	70 e0       	ldi	r23, 0x00	; 0
    1586:	02 c0       	rjmp	.+4      	; 0x158c <vfprintf+0x14a>
    1588:	6f ef       	ldi	r22, 0xFF	; 255
    158a:	7f ef       	ldi	r23, 0xFF	; 255
    158c:	c5 01       	movw	r24, r10
    158e:	0e 94 0d 0c 	call	0x181a	; 0x181a <strnlen>
    1592:	4c 01       	movw	r8, r24
    1594:	82 01       	movw	r16, r4
    1596:	f3 2d       	mov	r31, r3
    1598:	ff 77       	andi	r31, 0x7F	; 127
    159a:	3f 2e       	mov	r3, r31
    159c:	16 c0       	rjmp	.+44     	; 0x15ca <vfprintf+0x188>
    159e:	28 01       	movw	r4, r16
    15a0:	22 e0       	ldi	r18, 0x02	; 2
    15a2:	42 0e       	add	r4, r18
    15a4:	51 1c       	adc	r5, r1
    15a6:	f8 01       	movw	r30, r16
    15a8:	a0 80       	ld	r10, Z
    15aa:	b1 80       	ldd	r11, Z+1	; 0x01
    15ac:	36 fe       	sbrs	r3, 6
    15ae:	03 c0       	rjmp	.+6      	; 0x15b6 <vfprintf+0x174>
    15b0:	69 2d       	mov	r22, r9
    15b2:	70 e0       	ldi	r23, 0x00	; 0
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <vfprintf+0x178>
    15b6:	6f ef       	ldi	r22, 0xFF	; 255
    15b8:	7f ef       	ldi	r23, 0xFF	; 255
    15ba:	c5 01       	movw	r24, r10
    15bc:	0e 94 02 0c 	call	0x1804	; 0x1804 <strnlen_P>
    15c0:	4c 01       	movw	r8, r24
    15c2:	f3 2d       	mov	r31, r3
    15c4:	f0 68       	ori	r31, 0x80	; 128
    15c6:	3f 2e       	mov	r3, r31
    15c8:	82 01       	movw	r16, r4
    15ca:	33 fc       	sbrc	r3, 3
    15cc:	1b c0       	rjmp	.+54     	; 0x1604 <vfprintf+0x1c2>
    15ce:	82 2d       	mov	r24, r2
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	88 16       	cp	r8, r24
    15d4:	99 06       	cpc	r9, r25
    15d6:	b0 f4       	brcc	.+44     	; 0x1604 <vfprintf+0x1c2>
    15d8:	b6 01       	movw	r22, r12
    15da:	80 e2       	ldi	r24, 0x20	; 32
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	0e 94 18 0c 	call	0x1830	; 0x1830 <fputc>
    15e2:	2a 94       	dec	r2
    15e4:	f4 cf       	rjmp	.-24     	; 0x15ce <vfprintf+0x18c>
    15e6:	f5 01       	movw	r30, r10
    15e8:	37 fc       	sbrc	r3, 7
    15ea:	85 91       	lpm	r24, Z+
    15ec:	37 fe       	sbrs	r3, 7
    15ee:	81 91       	ld	r24, Z+
    15f0:	5f 01       	movw	r10, r30
    15f2:	b6 01       	movw	r22, r12
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 18 0c 	call	0x1830	; 0x1830 <fputc>
    15fa:	21 10       	cpse	r2, r1
    15fc:	2a 94       	dec	r2
    15fe:	21 e0       	ldi	r18, 0x01	; 1
    1600:	82 1a       	sub	r8, r18
    1602:	91 08       	sbc	r9, r1
    1604:	81 14       	cp	r8, r1
    1606:	91 04       	cpc	r9, r1
    1608:	71 f7       	brne	.-36     	; 0x15e6 <vfprintf+0x1a4>
    160a:	e8 c0       	rjmp	.+464    	; 0x17dc <vfprintf+0x39a>
    160c:	84 36       	cpi	r24, 0x64	; 100
    160e:	11 f0       	breq	.+4      	; 0x1614 <vfprintf+0x1d2>
    1610:	89 36       	cpi	r24, 0x69	; 105
    1612:	41 f5       	brne	.+80     	; 0x1664 <vfprintf+0x222>
    1614:	f8 01       	movw	r30, r16
    1616:	37 fe       	sbrs	r3, 7
    1618:	07 c0       	rjmp	.+14     	; 0x1628 <vfprintf+0x1e6>
    161a:	60 81       	ld	r22, Z
    161c:	71 81       	ldd	r23, Z+1	; 0x01
    161e:	82 81       	ldd	r24, Z+2	; 0x02
    1620:	93 81       	ldd	r25, Z+3	; 0x03
    1622:	0c 5f       	subi	r16, 0xFC	; 252
    1624:	1f 4f       	sbci	r17, 0xFF	; 255
    1626:	08 c0       	rjmp	.+16     	; 0x1638 <vfprintf+0x1f6>
    1628:	60 81       	ld	r22, Z
    162a:	71 81       	ldd	r23, Z+1	; 0x01
    162c:	07 2e       	mov	r0, r23
    162e:	00 0c       	add	r0, r0
    1630:	88 0b       	sbc	r24, r24
    1632:	99 0b       	sbc	r25, r25
    1634:	0e 5f       	subi	r16, 0xFE	; 254
    1636:	1f 4f       	sbci	r17, 0xFF	; 255
    1638:	f3 2d       	mov	r31, r3
    163a:	ff 76       	andi	r31, 0x6F	; 111
    163c:	3f 2e       	mov	r3, r31
    163e:	97 ff       	sbrs	r25, 7
    1640:	09 c0       	rjmp	.+18     	; 0x1654 <vfprintf+0x212>
    1642:	90 95       	com	r25
    1644:	80 95       	com	r24
    1646:	70 95       	com	r23
    1648:	61 95       	neg	r22
    164a:	7f 4f       	sbci	r23, 0xFF	; 255
    164c:	8f 4f       	sbci	r24, 0xFF	; 255
    164e:	9f 4f       	sbci	r25, 0xFF	; 255
    1650:	f0 68       	ori	r31, 0x80	; 128
    1652:	3f 2e       	mov	r3, r31
    1654:	2a e0       	ldi	r18, 0x0A	; 10
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	a3 01       	movw	r20, r6
    165a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__ultoa_invert>
    165e:	88 2e       	mov	r8, r24
    1660:	86 18       	sub	r8, r6
    1662:	45 c0       	rjmp	.+138    	; 0x16ee <vfprintf+0x2ac>
    1664:	85 37       	cpi	r24, 0x75	; 117
    1666:	31 f4       	brne	.+12     	; 0x1674 <vfprintf+0x232>
    1668:	23 2d       	mov	r18, r3
    166a:	2f 7e       	andi	r18, 0xEF	; 239
    166c:	b2 2e       	mov	r11, r18
    166e:	2a e0       	ldi	r18, 0x0A	; 10
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	25 c0       	rjmp	.+74     	; 0x16be <vfprintf+0x27c>
    1674:	93 2d       	mov	r25, r3
    1676:	99 7f       	andi	r25, 0xF9	; 249
    1678:	b9 2e       	mov	r11, r25
    167a:	8f 36       	cpi	r24, 0x6F	; 111
    167c:	c1 f0       	breq	.+48     	; 0x16ae <vfprintf+0x26c>
    167e:	18 f4       	brcc	.+6      	; 0x1686 <vfprintf+0x244>
    1680:	88 35       	cpi	r24, 0x58	; 88
    1682:	79 f0       	breq	.+30     	; 0x16a2 <vfprintf+0x260>
    1684:	b5 c0       	rjmp	.+362    	; 0x17f0 <vfprintf+0x3ae>
    1686:	80 37       	cpi	r24, 0x70	; 112
    1688:	19 f0       	breq	.+6      	; 0x1690 <vfprintf+0x24e>
    168a:	88 37       	cpi	r24, 0x78	; 120
    168c:	21 f0       	breq	.+8      	; 0x1696 <vfprintf+0x254>
    168e:	b0 c0       	rjmp	.+352    	; 0x17f0 <vfprintf+0x3ae>
    1690:	e9 2f       	mov	r30, r25
    1692:	e0 61       	ori	r30, 0x10	; 16
    1694:	be 2e       	mov	r11, r30
    1696:	b4 fe       	sbrs	r11, 4
    1698:	0d c0       	rjmp	.+26     	; 0x16b4 <vfprintf+0x272>
    169a:	fb 2d       	mov	r31, r11
    169c:	f4 60       	ori	r31, 0x04	; 4
    169e:	bf 2e       	mov	r11, r31
    16a0:	09 c0       	rjmp	.+18     	; 0x16b4 <vfprintf+0x272>
    16a2:	34 fe       	sbrs	r3, 4
    16a4:	0a c0       	rjmp	.+20     	; 0x16ba <vfprintf+0x278>
    16a6:	29 2f       	mov	r18, r25
    16a8:	26 60       	ori	r18, 0x06	; 6
    16aa:	b2 2e       	mov	r11, r18
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <vfprintf+0x278>
    16ae:	28 e0       	ldi	r18, 0x08	; 8
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	05 c0       	rjmp	.+10     	; 0x16be <vfprintf+0x27c>
    16b4:	20 e1       	ldi	r18, 0x10	; 16
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <vfprintf+0x27c>
    16ba:	20 e1       	ldi	r18, 0x10	; 16
    16bc:	32 e0       	ldi	r19, 0x02	; 2
    16be:	f8 01       	movw	r30, r16
    16c0:	b7 fe       	sbrs	r11, 7
    16c2:	07 c0       	rjmp	.+14     	; 0x16d2 <vfprintf+0x290>
    16c4:	60 81       	ld	r22, Z
    16c6:	71 81       	ldd	r23, Z+1	; 0x01
    16c8:	82 81       	ldd	r24, Z+2	; 0x02
    16ca:	93 81       	ldd	r25, Z+3	; 0x03
    16cc:	0c 5f       	subi	r16, 0xFC	; 252
    16ce:	1f 4f       	sbci	r17, 0xFF	; 255
    16d0:	06 c0       	rjmp	.+12     	; 0x16de <vfprintf+0x29c>
    16d2:	60 81       	ld	r22, Z
    16d4:	71 81       	ldd	r23, Z+1	; 0x01
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 5f       	subi	r16, 0xFE	; 254
    16dc:	1f 4f       	sbci	r17, 0xFF	; 255
    16de:	a3 01       	movw	r20, r6
    16e0:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__ultoa_invert>
    16e4:	88 2e       	mov	r8, r24
    16e6:	86 18       	sub	r8, r6
    16e8:	fb 2d       	mov	r31, r11
    16ea:	ff 77       	andi	r31, 0x7F	; 127
    16ec:	3f 2e       	mov	r3, r31
    16ee:	36 fe       	sbrs	r3, 6
    16f0:	0d c0       	rjmp	.+26     	; 0x170c <vfprintf+0x2ca>
    16f2:	23 2d       	mov	r18, r3
    16f4:	2e 7f       	andi	r18, 0xFE	; 254
    16f6:	a2 2e       	mov	r10, r18
    16f8:	89 14       	cp	r8, r9
    16fa:	58 f4       	brcc	.+22     	; 0x1712 <vfprintf+0x2d0>
    16fc:	34 fe       	sbrs	r3, 4
    16fe:	0b c0       	rjmp	.+22     	; 0x1716 <vfprintf+0x2d4>
    1700:	32 fc       	sbrc	r3, 2
    1702:	09 c0       	rjmp	.+18     	; 0x1716 <vfprintf+0x2d4>
    1704:	83 2d       	mov	r24, r3
    1706:	8e 7e       	andi	r24, 0xEE	; 238
    1708:	a8 2e       	mov	r10, r24
    170a:	05 c0       	rjmp	.+10     	; 0x1716 <vfprintf+0x2d4>
    170c:	b8 2c       	mov	r11, r8
    170e:	a3 2c       	mov	r10, r3
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <vfprintf+0x2d6>
    1712:	b8 2c       	mov	r11, r8
    1714:	01 c0       	rjmp	.+2      	; 0x1718 <vfprintf+0x2d6>
    1716:	b9 2c       	mov	r11, r9
    1718:	a4 fe       	sbrs	r10, 4
    171a:	0f c0       	rjmp	.+30     	; 0x173a <vfprintf+0x2f8>
    171c:	fe 01       	movw	r30, r28
    171e:	e8 0d       	add	r30, r8
    1720:	f1 1d       	adc	r31, r1
    1722:	80 81       	ld	r24, Z
    1724:	80 33       	cpi	r24, 0x30	; 48
    1726:	21 f4       	brne	.+8      	; 0x1730 <vfprintf+0x2ee>
    1728:	9a 2d       	mov	r25, r10
    172a:	99 7e       	andi	r25, 0xE9	; 233
    172c:	a9 2e       	mov	r10, r25
    172e:	09 c0       	rjmp	.+18     	; 0x1742 <vfprintf+0x300>
    1730:	a2 fe       	sbrs	r10, 2
    1732:	06 c0       	rjmp	.+12     	; 0x1740 <vfprintf+0x2fe>
    1734:	b3 94       	inc	r11
    1736:	b3 94       	inc	r11
    1738:	04 c0       	rjmp	.+8      	; 0x1742 <vfprintf+0x300>
    173a:	8a 2d       	mov	r24, r10
    173c:	86 78       	andi	r24, 0x86	; 134
    173e:	09 f0       	breq	.+2      	; 0x1742 <vfprintf+0x300>
    1740:	b3 94       	inc	r11
    1742:	a3 fc       	sbrc	r10, 3
    1744:	11 c0       	rjmp	.+34     	; 0x1768 <vfprintf+0x326>
    1746:	a0 fe       	sbrs	r10, 0
    1748:	06 c0       	rjmp	.+12     	; 0x1756 <vfprintf+0x314>
    174a:	b2 14       	cp	r11, r2
    174c:	88 f4       	brcc	.+34     	; 0x1770 <vfprintf+0x32e>
    174e:	28 0c       	add	r2, r8
    1750:	92 2c       	mov	r9, r2
    1752:	9b 18       	sub	r9, r11
    1754:	0e c0       	rjmp	.+28     	; 0x1772 <vfprintf+0x330>
    1756:	b2 14       	cp	r11, r2
    1758:	60 f4       	brcc	.+24     	; 0x1772 <vfprintf+0x330>
    175a:	b6 01       	movw	r22, r12
    175c:	80 e2       	ldi	r24, 0x20	; 32
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 18 0c 	call	0x1830	; 0x1830 <fputc>
    1764:	b3 94       	inc	r11
    1766:	f7 cf       	rjmp	.-18     	; 0x1756 <vfprintf+0x314>
    1768:	b2 14       	cp	r11, r2
    176a:	18 f4       	brcc	.+6      	; 0x1772 <vfprintf+0x330>
    176c:	2b 18       	sub	r2, r11
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <vfprintf+0x332>
    1770:	98 2c       	mov	r9, r8
    1772:	21 2c       	mov	r2, r1
    1774:	a4 fe       	sbrs	r10, 4
    1776:	10 c0       	rjmp	.+32     	; 0x1798 <vfprintf+0x356>
    1778:	b6 01       	movw	r22, r12
    177a:	80 e3       	ldi	r24, 0x30	; 48
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 18 0c 	call	0x1830	; 0x1830 <fputc>
    1782:	a2 fe       	sbrs	r10, 2
    1784:	17 c0       	rjmp	.+46     	; 0x17b4 <vfprintf+0x372>
    1786:	a1 fc       	sbrc	r10, 1
    1788:	03 c0       	rjmp	.+6      	; 0x1790 <vfprintf+0x34e>
    178a:	88 e7       	ldi	r24, 0x78	; 120
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <vfprintf+0x352>
    1790:	88 e5       	ldi	r24, 0x58	; 88
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	b6 01       	movw	r22, r12
    1796:	0c c0       	rjmp	.+24     	; 0x17b0 <vfprintf+0x36e>
    1798:	8a 2d       	mov	r24, r10
    179a:	86 78       	andi	r24, 0x86	; 134
    179c:	59 f0       	breq	.+22     	; 0x17b4 <vfprintf+0x372>
    179e:	a1 fe       	sbrs	r10, 1
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <vfprintf+0x364>
    17a2:	8b e2       	ldi	r24, 0x2B	; 43
    17a4:	01 c0       	rjmp	.+2      	; 0x17a8 <vfprintf+0x366>
    17a6:	80 e2       	ldi	r24, 0x20	; 32
    17a8:	a7 fc       	sbrc	r10, 7
    17aa:	8d e2       	ldi	r24, 0x2D	; 45
    17ac:	b6 01       	movw	r22, r12
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 18 0c 	call	0x1830	; 0x1830 <fputc>
    17b4:	89 14       	cp	r8, r9
    17b6:	38 f4       	brcc	.+14     	; 0x17c6 <vfprintf+0x384>
    17b8:	b6 01       	movw	r22, r12
    17ba:	80 e3       	ldi	r24, 0x30	; 48
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 18 0c 	call	0x1830	; 0x1830 <fputc>
    17c2:	9a 94       	dec	r9
    17c4:	f7 cf       	rjmp	.-18     	; 0x17b4 <vfprintf+0x372>
    17c6:	8a 94       	dec	r8
    17c8:	f3 01       	movw	r30, r6
    17ca:	e8 0d       	add	r30, r8
    17cc:	f1 1d       	adc	r31, r1
    17ce:	80 81       	ld	r24, Z
    17d0:	b6 01       	movw	r22, r12
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 18 0c 	call	0x1830	; 0x1830 <fputc>
    17d8:	81 10       	cpse	r8, r1
    17da:	f5 cf       	rjmp	.-22     	; 0x17c6 <vfprintf+0x384>
    17dc:	22 20       	and	r2, r2
    17de:	09 f4       	brne	.+2      	; 0x17e2 <vfprintf+0x3a0>
    17e0:	42 ce       	rjmp	.-892    	; 0x1466 <vfprintf+0x24>
    17e2:	b6 01       	movw	r22, r12
    17e4:	80 e2       	ldi	r24, 0x20	; 32
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	0e 94 18 0c 	call	0x1830	; 0x1830 <fputc>
    17ec:	2a 94       	dec	r2
    17ee:	f6 cf       	rjmp	.-20     	; 0x17dc <vfprintf+0x39a>
    17f0:	f6 01       	movw	r30, r12
    17f2:	86 81       	ldd	r24, Z+6	; 0x06
    17f4:	97 81       	ldd	r25, Z+7	; 0x07
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <vfprintf+0x3ba>
    17f8:	8f ef       	ldi	r24, 0xFF	; 255
    17fa:	9f ef       	ldi	r25, 0xFF	; 255
    17fc:	2b 96       	adiw	r28, 0x0b	; 11
    17fe:	e2 e1       	ldi	r30, 0x12	; 18
    1800:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__epilogue_restores__>

00001804 <strnlen_P>:
    1804:	fc 01       	movw	r30, r24
    1806:	05 90       	lpm	r0, Z+
    1808:	61 50       	subi	r22, 0x01	; 1
    180a:	70 40       	sbci	r23, 0x00	; 0
    180c:	01 10       	cpse	r0, r1
    180e:	d8 f7       	brcc	.-10     	; 0x1806 <strnlen_P+0x2>
    1810:	80 95       	com	r24
    1812:	90 95       	com	r25
    1814:	8e 0f       	add	r24, r30
    1816:	9f 1f       	adc	r25, r31
    1818:	08 95       	ret

0000181a <strnlen>:
    181a:	fc 01       	movw	r30, r24
    181c:	61 50       	subi	r22, 0x01	; 1
    181e:	70 40       	sbci	r23, 0x00	; 0
    1820:	01 90       	ld	r0, Z+
    1822:	01 10       	cpse	r0, r1
    1824:	d8 f7       	brcc	.-10     	; 0x181c <strnlen+0x2>
    1826:	80 95       	com	r24
    1828:	90 95       	com	r25
    182a:	8e 0f       	add	r24, r30
    182c:	9f 1f       	adc	r25, r31
    182e:	08 95       	ret

00001830 <fputc>:
    1830:	0f 93       	push	r16
    1832:	1f 93       	push	r17
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	fb 01       	movw	r30, r22
    183a:	23 81       	ldd	r18, Z+3	; 0x03
    183c:	21 fd       	sbrc	r18, 1
    183e:	03 c0       	rjmp	.+6      	; 0x1846 <fputc+0x16>
    1840:	8f ef       	ldi	r24, 0xFF	; 255
    1842:	9f ef       	ldi	r25, 0xFF	; 255
    1844:	2c c0       	rjmp	.+88     	; 0x189e <fputc+0x6e>
    1846:	22 ff       	sbrs	r18, 2
    1848:	16 c0       	rjmp	.+44     	; 0x1876 <fputc+0x46>
    184a:	46 81       	ldd	r20, Z+6	; 0x06
    184c:	57 81       	ldd	r21, Z+7	; 0x07
    184e:	24 81       	ldd	r18, Z+4	; 0x04
    1850:	35 81       	ldd	r19, Z+5	; 0x05
    1852:	42 17       	cp	r20, r18
    1854:	53 07       	cpc	r21, r19
    1856:	44 f4       	brge	.+16     	; 0x1868 <fputc+0x38>
    1858:	a0 81       	ld	r26, Z
    185a:	b1 81       	ldd	r27, Z+1	; 0x01
    185c:	9d 01       	movw	r18, r26
    185e:	2f 5f       	subi	r18, 0xFF	; 255
    1860:	3f 4f       	sbci	r19, 0xFF	; 255
    1862:	20 83       	st	Z, r18
    1864:	31 83       	std	Z+1, r19	; 0x01
    1866:	8c 93       	st	X, r24
    1868:	26 81       	ldd	r18, Z+6	; 0x06
    186a:	37 81       	ldd	r19, Z+7	; 0x07
    186c:	2f 5f       	subi	r18, 0xFF	; 255
    186e:	3f 4f       	sbci	r19, 0xFF	; 255
    1870:	26 83       	std	Z+6, r18	; 0x06
    1872:	37 83       	std	Z+7, r19	; 0x07
    1874:	14 c0       	rjmp	.+40     	; 0x189e <fputc+0x6e>
    1876:	8b 01       	movw	r16, r22
    1878:	ec 01       	movw	r28, r24
    187a:	fb 01       	movw	r30, r22
    187c:	00 84       	ldd	r0, Z+8	; 0x08
    187e:	f1 85       	ldd	r31, Z+9	; 0x09
    1880:	e0 2d       	mov	r30, r0
    1882:	09 95       	icall
    1884:	89 2b       	or	r24, r25
    1886:	e1 f6       	brne	.-72     	; 0x1840 <fputc+0x10>
    1888:	d8 01       	movw	r26, r16
    188a:	16 96       	adiw	r26, 0x06	; 6
    188c:	8d 91       	ld	r24, X+
    188e:	9c 91       	ld	r25, X
    1890:	17 97       	sbiw	r26, 0x07	; 7
    1892:	01 96       	adiw	r24, 0x01	; 1
    1894:	16 96       	adiw	r26, 0x06	; 6
    1896:	8d 93       	st	X+, r24
    1898:	9c 93       	st	X, r25
    189a:	17 97       	sbiw	r26, 0x07	; 7
    189c:	ce 01       	movw	r24, r28
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	08 95       	ret

000018a8 <__ultoa_invert>:
    18a8:	fa 01       	movw	r30, r20
    18aa:	aa 27       	eor	r26, r26
    18ac:	28 30       	cpi	r18, 0x08	; 8
    18ae:	51 f1       	breq	.+84     	; 0x1904 <__ultoa_invert+0x5c>
    18b0:	20 31       	cpi	r18, 0x10	; 16
    18b2:	81 f1       	breq	.+96     	; 0x1914 <__ultoa_invert+0x6c>
    18b4:	e8 94       	clt
    18b6:	6f 93       	push	r22
    18b8:	6e 7f       	andi	r22, 0xFE	; 254
    18ba:	6e 5f       	subi	r22, 0xFE	; 254
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	8f 4f       	sbci	r24, 0xFF	; 255
    18c0:	9f 4f       	sbci	r25, 0xFF	; 255
    18c2:	af 4f       	sbci	r26, 0xFF	; 255
    18c4:	b1 e0       	ldi	r27, 0x01	; 1
    18c6:	3e d0       	rcall	.+124    	; 0x1944 <__ultoa_invert+0x9c>
    18c8:	b4 e0       	ldi	r27, 0x04	; 4
    18ca:	3c d0       	rcall	.+120    	; 0x1944 <__ultoa_invert+0x9c>
    18cc:	67 0f       	add	r22, r23
    18ce:	78 1f       	adc	r23, r24
    18d0:	89 1f       	adc	r24, r25
    18d2:	9a 1f       	adc	r25, r26
    18d4:	a1 1d       	adc	r26, r1
    18d6:	68 0f       	add	r22, r24
    18d8:	79 1f       	adc	r23, r25
    18da:	8a 1f       	adc	r24, r26
    18dc:	91 1d       	adc	r25, r1
    18de:	a1 1d       	adc	r26, r1
    18e0:	6a 0f       	add	r22, r26
    18e2:	71 1d       	adc	r23, r1
    18e4:	81 1d       	adc	r24, r1
    18e6:	91 1d       	adc	r25, r1
    18e8:	a1 1d       	adc	r26, r1
    18ea:	20 d0       	rcall	.+64     	; 0x192c <__ultoa_invert+0x84>
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <__ultoa_invert+0x48>
    18ee:	68 94       	set
    18f0:	3f 91       	pop	r19
    18f2:	2a e0       	ldi	r18, 0x0A	; 10
    18f4:	26 9f       	mul	r18, r22
    18f6:	11 24       	eor	r1, r1
    18f8:	30 19       	sub	r19, r0
    18fa:	30 5d       	subi	r19, 0xD0	; 208
    18fc:	31 93       	st	Z+, r19
    18fe:	de f6       	brtc	.-74     	; 0x18b6 <__ultoa_invert+0xe>
    1900:	cf 01       	movw	r24, r30
    1902:	08 95       	ret
    1904:	46 2f       	mov	r20, r22
    1906:	47 70       	andi	r20, 0x07	; 7
    1908:	40 5d       	subi	r20, 0xD0	; 208
    190a:	41 93       	st	Z+, r20
    190c:	b3 e0       	ldi	r27, 0x03	; 3
    190e:	0f d0       	rcall	.+30     	; 0x192e <__ultoa_invert+0x86>
    1910:	c9 f7       	brne	.-14     	; 0x1904 <__ultoa_invert+0x5c>
    1912:	f6 cf       	rjmp	.-20     	; 0x1900 <__ultoa_invert+0x58>
    1914:	46 2f       	mov	r20, r22
    1916:	4f 70       	andi	r20, 0x0F	; 15
    1918:	40 5d       	subi	r20, 0xD0	; 208
    191a:	4a 33       	cpi	r20, 0x3A	; 58
    191c:	18 f0       	brcs	.+6      	; 0x1924 <__ultoa_invert+0x7c>
    191e:	49 5d       	subi	r20, 0xD9	; 217
    1920:	31 fd       	sbrc	r19, 1
    1922:	40 52       	subi	r20, 0x20	; 32
    1924:	41 93       	st	Z+, r20
    1926:	02 d0       	rcall	.+4      	; 0x192c <__ultoa_invert+0x84>
    1928:	a9 f7       	brne	.-22     	; 0x1914 <__ultoa_invert+0x6c>
    192a:	ea cf       	rjmp	.-44     	; 0x1900 <__ultoa_invert+0x58>
    192c:	b4 e0       	ldi	r27, 0x04	; 4
    192e:	a6 95       	lsr	r26
    1930:	97 95       	ror	r25
    1932:	87 95       	ror	r24
    1934:	77 95       	ror	r23
    1936:	67 95       	ror	r22
    1938:	ba 95       	dec	r27
    193a:	c9 f7       	brne	.-14     	; 0x192e <__ultoa_invert+0x86>
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	61 05       	cpc	r22, r1
    1940:	71 05       	cpc	r23, r1
    1942:	08 95       	ret
    1944:	9b 01       	movw	r18, r22
    1946:	ac 01       	movw	r20, r24
    1948:	0a 2e       	mov	r0, r26
    194a:	06 94       	lsr	r0
    194c:	57 95       	ror	r21
    194e:	47 95       	ror	r20
    1950:	37 95       	ror	r19
    1952:	27 95       	ror	r18
    1954:	ba 95       	dec	r27
    1956:	c9 f7       	brne	.-14     	; 0x194a <__ultoa_invert+0xa2>
    1958:	62 0f       	add	r22, r18
    195a:	73 1f       	adc	r23, r19
    195c:	84 1f       	adc	r24, r20
    195e:	95 1f       	adc	r25, r21
    1960:	a0 1d       	adc	r26, r0
    1962:	08 95       	ret

00001964 <eeprom_read_block>:
    1964:	60 50       	subi	r22, 0x00	; 0
    1966:	7c 4e       	sbci	r23, 0xEC	; 236
    1968:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <memcpy>

0000196c <eeprom_update_block>:
    196c:	dc 01       	movw	r26, r24
    196e:	a4 0f       	add	r26, r20
    1970:	b5 1f       	adc	r27, r21
    1972:	41 50       	subi	r20, 0x01	; 1
    1974:	50 40       	sbci	r21, 0x00	; 0
    1976:	48 f0       	brcs	.+18     	; 0x198a <eeprom_update_block+0x1e>
    1978:	cb 01       	movw	r24, r22
    197a:	84 0f       	add	r24, r20
    197c:	95 1f       	adc	r25, r21
    197e:	2e 91       	ld	r18, -X
    1980:	0e 94 c7 0c 	call	0x198e	; 0x198e <eeprom_update_r18>
    1984:	41 50       	subi	r20, 0x01	; 1
    1986:	50 40       	sbci	r21, 0x00	; 0
    1988:	d0 f7       	brcc	.-12     	; 0x197e <eeprom_update_block+0x12>
    198a:	08 95       	ret

0000198c <eeprom_update_byte>:
    198c:	26 2f       	mov	r18, r22

0000198e <eeprom_update_r18>:
    198e:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <eeprom_mapen>
    1992:	00 80       	ld	r0, Z
    1994:	02 16       	cp	r0, r18
    1996:	19 f0       	breq	.+6      	; 0x199e <eeprom_update_r18+0x10>
    1998:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <eeprom_write_r18>
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	08 95       	ret

000019a2 <eeprom_write_byte>:
    19a2:	26 2f       	mov	r18, r22

000019a4 <eeprom_write_r18>:
    19a4:	af 93       	push	r26
    19a6:	bf 93       	push	r27
    19a8:	e0 e0       	ldi	r30, 0x00	; 0
    19aa:	f0 e1       	ldi	r31, 0x10	; 16
    19ac:	32 81       	ldd	r19, Z+2	; 0x02
    19ae:	31 fd       	sbrc	r19, 1
    19b0:	fd cf       	rjmp	.-6      	; 0x19ac <eeprom_write_r18+0x8>
    19b2:	dc 01       	movw	r26, r24
    19b4:	a0 50       	subi	r26, 0x00	; 0
    19b6:	bc 4e       	sbci	r27, 0xEC	; 236
    19b8:	2c 93       	st	X, r18
    19ba:	2d e9       	ldi	r18, 0x9D	; 157
    19bc:	24 bf       	out	0x34, r18	; 52
    19be:	23 e0       	ldi	r18, 0x03	; 3
    19c0:	20 83       	st	Z, r18
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	bf 91       	pop	r27
    19c6:	af 91       	pop	r26
    19c8:	08 95       	ret

000019ca <eeprom_read_byte>:
    19ca:	03 d0       	rcall	.+6      	; 0x19d2 <eeprom_mapen>
    19cc:	80 81       	ld	r24, Z
    19ce:	99 27       	eor	r25, r25
    19d0:	08 95       	ret

000019d2 <eeprom_mapen>:
    19d2:	fc 01       	movw	r30, r24
    19d4:	e0 50       	subi	r30, 0x00	; 0
    19d6:	fc 4e       	sbci	r31, 0xEC	; 236
    19d8:	08 95       	ret

000019da <__prologue_saves__>:
    19da:	2f 92       	push	r2
    19dc:	3f 92       	push	r3
    19de:	4f 92       	push	r4
    19e0:	5f 92       	push	r5
    19e2:	6f 92       	push	r6
    19e4:	7f 92       	push	r7
    19e6:	8f 92       	push	r8
    19e8:	9f 92       	push	r9
    19ea:	af 92       	push	r10
    19ec:	bf 92       	push	r11
    19ee:	cf 92       	push	r12
    19f0:	df 92       	push	r13
    19f2:	ef 92       	push	r14
    19f4:	ff 92       	push	r15
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	ca 1b       	sub	r28, r26
    1a04:	db 0b       	sbc	r29, r27
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	09 94       	ijmp

00001a0c <__epilogue_restores__>:
    1a0c:	2a 88       	ldd	r2, Y+18	; 0x12
    1a0e:	39 88       	ldd	r3, Y+17	; 0x11
    1a10:	48 88       	ldd	r4, Y+16	; 0x10
    1a12:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a14:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a16:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a18:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a1e:	b9 84       	ldd	r11, Y+9	; 0x09
    1a20:	c8 84       	ldd	r12, Y+8	; 0x08
    1a22:	df 80       	ldd	r13, Y+7	; 0x07
    1a24:	ee 80       	ldd	r14, Y+6	; 0x06
    1a26:	fd 80       	ldd	r15, Y+5	; 0x05
    1a28:	0c 81       	ldd	r16, Y+4	; 0x04
    1a2a:	1b 81       	ldd	r17, Y+3	; 0x03
    1a2c:	aa 81       	ldd	r26, Y+2	; 0x02
    1a2e:	b9 81       	ldd	r27, Y+1	; 0x01
    1a30:	ce 0f       	add	r28, r30
    1a32:	d1 1d       	adc	r29, r1
    1a34:	cd bf       	out	0x3d, r28	; 61
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	ed 01       	movw	r28, r26
    1a3a:	08 95       	ret

00001a3c <memcpy>:
    1a3c:	fb 01       	movw	r30, r22
    1a3e:	dc 01       	movw	r26, r24
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <memcpy+0xa>
    1a42:	01 90       	ld	r0, Z+
    1a44:	0d 92       	st	X+, r0
    1a46:	41 50       	subi	r20, 0x01	; 1
    1a48:	50 40       	sbci	r21, 0x00	; 0
    1a4a:	d8 f7       	brcc	.-10     	; 0x1a42 <memcpy+0x6>
    1a4c:	08 95       	ret

00001a4e <_exit>:
    1a4e:	f8 94       	cli

00001a50 <__stop_program>:
    1a50:	ff cf       	rjmp	.-2      	; 0x1a50 <__stop_program>
