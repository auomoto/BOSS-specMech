
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000704d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006504  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab5  0000a504  00006504  00006598  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000853  00802800  00802800  0000704d  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  0000704d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000070ac  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000640  00000000  00000000  000070f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b0c0  00000000  00000000  00007730  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000441b  00000000  00000000  000127f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000493e  00000000  00000000  00016c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000012f0  00000000  00000000  0001b54c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002413  00000000  00000000  0001c83c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005437  00000000  00000000  0001ec4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003f0  00000000  00000000  00024086  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 01 	jmp	0x266	; 0x266 <__ctors_end>
       4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       c:	0c 94 ea 25 	jmp	0x4bd4	; 0x4bd4 <__vector_3>
      10:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      14:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      18:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      1c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      20:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      24:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      28:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      2c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      30:	0c 94 1e 26 	jmp	0x4c3c	; 0x4c3c <__vector_12>
      34:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      38:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      3c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      40:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      44:	0c 94 24 28 	jmp	0x5048	; 0x5048 <__vector_17>
      48:	0c 94 72 28 	jmp	0x50e4	; 0x50e4 <__vector_18>
      4c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      50:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <__vector_20>
      54:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      58:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      5c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      60:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      64:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      68:	0c 94 ae 28 	jmp	0x515c	; 0x515c <__vector_26>
      6c:	0c 94 d9 28 	jmp	0x51b2	; 0x51b2 <__vector_27>
      70:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      74:	0c 94 7e 29 	jmp	0x52fc	; 0x52fc <__vector_29>
      78:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      7c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      80:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      84:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      88:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      8c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      90:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      94:	0c 94 15 29 	jmp	0x522a	; 0x522a <__vector_37>
      98:	0c 94 4a 29 	jmp	0x5294	; 0x5294 <__vector_38>
      9c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      a0:	ac 04       	cpc	r10, r12
      a2:	d3 04       	cpc	r13, r3
      a4:	d3 04       	cpc	r13, r3
      a6:	d3 04       	cpc	r13, r3
      a8:	d3 04       	cpc	r13, r3
      aa:	d3 04       	cpc	r13, r3
      ac:	d3 04       	cpc	r13, r3
      ae:	d3 04       	cpc	r13, r3
      b0:	d3 04       	cpc	r13, r3
      b2:	af 04       	cpc	r10, r15
      b4:	d3 04       	cpc	r13, r3
      b6:	d3 04       	cpc	r13, r3
      b8:	d3 04       	cpc	r13, r3
      ba:	d3 04       	cpc	r13, r3
      bc:	d3 04       	cpc	r13, r3
      be:	d3 04       	cpc	r13, r3
      c0:	d3 04       	cpc	r13, r3
      c2:	d3 04       	cpc	r13, r3
      c4:	d3 04       	cpc	r13, r3
      c6:	d3 04       	cpc	r13, r3
      c8:	d3 04       	cpc	r13, r3
      ca:	d3 04       	cpc	r13, r3
      cc:	d3 04       	cpc	r13, r3
      ce:	d3 04       	cpc	r13, r3
      d0:	d3 04       	cpc	r13, r3
      d2:	d3 04       	cpc	r13, r3
      d4:	9a 04       	cpc	r9, r10
      d6:	d3 04       	cpc	r13, r3
      d8:	d3 04       	cpc	r13, r3
      da:	d3 04       	cpc	r13, r3
      dc:	d3 04       	cpc	r13, r3
      de:	d3 04       	cpc	r13, r3
      e0:	d3 04       	cpc	r13, r3
      e2:	d3 04       	cpc	r13, r3
      e4:	d3 04       	cpc	r13, r3
      e6:	d3 04       	cpc	r13, r3
      e8:	a0 04       	cpc	r10, r0
      ea:	d3 04       	cpc	r13, r3
      ec:	9d 04       	cpc	r9, r13
      ee:	d3 04       	cpc	r13, r3
      f0:	d3 04       	cpc	r13, r3
      f2:	a3 04       	cpc	r10, r3
      f4:	a6 04       	cpc	r10, r6
      f6:	a9 04       	cpc	r10, r9
      f8:	51 10       	cpse	r5, r1
      fa:	51 10       	cpse	r5, r1
      fc:	51 10       	cpse	r5, r1
      fe:	fe 15       	cp	r31, r14
     100:	fe 15       	cp	r31, r14
     102:	fe 15       	cp	r31, r14
     104:	fe 15       	cp	r31, r14
     106:	fe 15       	cp	r31, r14
     108:	fe 15       	cp	r31, r14
     10a:	fe 15       	cp	r31, r14
     10c:	fe 15       	cp	r31, r14
     10e:	fe 15       	cp	r31, r14
     110:	fe 15       	cp	r31, r14
     112:	fe 15       	cp	r31, r14
     114:	fe 15       	cp	r31, r14
     116:	fe 15       	cp	r31, r14
     118:	fe 15       	cp	r31, r14
     11a:	fe 15       	cp	r31, r14
     11c:	fe 15       	cp	r31, r14
     11e:	fe 15       	cp	r31, r14
     120:	fe 15       	cp	r31, r14
     122:	c0 15       	cp	r28, r0
     124:	fe 15       	cp	r31, r14
     126:	fe 15       	cp	r31, r14
     128:	fe 15       	cp	r31, r14
     12a:	fe 15       	cp	r31, r14
     12c:	fe 15       	cp	r31, r14
     12e:	fe 15       	cp	r31, r14
     130:	fe 15       	cp	r31, r14
     132:	fe 15       	cp	r31, r14
     134:	fe 15       	cp	r31, r14
     136:	fe 15       	cp	r31, r14
     138:	d5 11       	cpse	r29, r5
     13a:	d5 11       	cpse	r29, r5
     13c:	d5 11       	cpse	r29, r5
     13e:	fe 15       	cp	r31, r14
     140:	83 12       	cpse	r8, r19
     142:	fe 15       	cp	r31, r14
     144:	fe 15       	cp	r31, r14
     146:	fe 15       	cp	r31, r14
     148:	fe 15       	cp	r31, r14
     14a:	fe 15       	cp	r31, r14
     14c:	fe 15       	cp	r31, r14
     14e:	fe 15       	cp	r31, r14
     150:	fe 15       	cp	r31, r14
     152:	fe 15       	cp	r31, r14
     154:	c0 13       	cpse	r28, r16
     156:	96 14       	cp	r9, r6
     158:	fe 15       	cp	r31, r14
     15a:	fe 15       	cp	r31, r14
     15c:	fe 15       	cp	r31, r14
     15e:	1f 15       	cp	r17, r15
     160:	fe 15       	cp	r31, r14
     162:	67 15       	cp	r22, r7

00000164 <__trampolines_end>:
     164:	6e 61       	ori	r22, 0x1E	; 30
     166:	6e 00       	.word	0x006e	; ????

00000168 <__c.2332>:
     168:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     178:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     188:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     198:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1a8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1b8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1c8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1d8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1e8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1f8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     208:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     218:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     228:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     238:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     248:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     258:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf ef       	ldi	r28, 0xFF	; 255
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	df e3       	ldi	r29, 0x3F	; 63
     270:	de bf       	out	0x3e, r29	; 62

00000272 <__do_clear_bss>:
     272:	20 e3       	ldi	r18, 0x30	; 48
     274:	a0 e0       	ldi	r26, 0x00	; 0
     276:	b8 e2       	ldi	r27, 0x28	; 40
     278:	01 c0       	rjmp	.+2      	; 0x27c <.do_clear_bss_start>

0000027a <.do_clear_bss_loop>:
     27a:	1d 92       	st	X+, r1

0000027c <.do_clear_bss_start>:
     27c:	a3 35       	cpi	r26, 0x53	; 83
     27e:	b2 07       	cpc	r27, r18
     280:	e1 f7       	brne	.-8      	; 0x27a <.do_clear_bss_loop>
     282:	0e 94 c3 09 	call	0x1386	; 0x1386 <main>
     286:	0c 94 80 32 	jmp	0x6500	; 0x6500 <_exit>

0000028a <__bad_interrupt>:
     28a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028e <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
uint8_t read_AD590(uint8_t sensor, float *temperature)
{
     28e:	8f 92       	push	r8
     290:	9f 92       	push	r9
     292:	af 92       	push	r10
     294:	bf 92       	push	r11
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <read_AD590+0x16>
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <read_AD590+0x18>
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	7b 01       	movw	r14, r22

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	c9 f0       	breq	.+50     	; 0x2e2 <read_AD590+0x54>
     2b0:	18 f0       	brcs	.+6      	; 0x2b8 <read_AD590+0x2a>
     2b2:	82 30       	cpi	r24, 0x02	; 2
     2b4:	61 f0       	breq	.+24     	; 0x2ce <read_AD590+0x40>
     2b6:	10 c0       	rjmp	.+32     	; 0x2d8 <read_AD590+0x4a>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     2b8:	0f 2e       	mov	r0, r31
     2ba:	f3 e3       	ldi	r31, 0x33	; 51
     2bc:	8f 2e       	mov	r8, r31
     2be:	98 2c       	mov	r9, r8
     2c0:	f3 ef       	ldi	r31, 0xF3	; 243
     2c2:	af 2e       	mov	r10, r31
     2c4:	f0 e4       	ldi	r31, 0x40	; 64
     2c6:	bf 2e       	mov	r11, r31
     2c8:	f0 2d       	mov	r31, r0
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     2ca:	11 e0       	ldi	r17, 0x01	; 1
     2cc:	0e c0       	rjmp	.+28     	; 0x2ea <read_AD590+0x5c>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     2ce:	81 2c       	mov	r8, r1
     2d0:	91 2c       	mov	r9, r1
     2d2:	54 01       	movw	r10, r8
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     2d4:	10 e1       	ldi	r17, 0x10	; 16
			offset = 0.0;
			break;
     2d6:	09 c0       	rjmp	.+18     	; 0x2ea <read_AD590+0x5c>
{

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
     2d8:	81 2c       	mov	r8, r1
     2da:	91 2c       	mov	r9, r1
     2dc:	54 01       	movw	r10, r8
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2de:	10 e0       	ldi	r17, 0x00	; 0
			break;
     2e0:	04 c0       	rjmp	.+8      	; 0x2ea <read_AD590+0x5c>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2e2:	81 2c       	mov	r8, r1
     2e4:	91 2c       	mov	r9, r1
     2e6:	54 01       	movw	r10, r8
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2e8:	14 e0       	ldi	r17, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	66 e0       	ldi	r22, 0x06	; 6
     2ee:	87 e2       	ldi	r24, 0x27	; 39
     2f0:	0e 94 2c 0a 	call	0x1458	; 0x1458 <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2f4:	41 2f       	mov	r20, r17
     2f6:	40 95       	com	r20
     2f8:	60 e0       	ldi	r22, 0x00	; 0
     2fa:	87 e2       	ldi	r24, 0x27	; 39
     2fc:	0e 94 2c 0a 	call	0x1458	; 0x1458 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     300:	41 2f       	mov	r20, r17
     302:	6a e0       	ldi	r22, 0x0A	; 10
     304:	87 e2       	ldi	r24, 0x27	; 39
     306:	0e 94 2c 0a 	call	0x1458	; 0x1458 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30a:	86 e1       	ldi	r24, 0x16	; 22
     30c:	8a 95       	dec	r24
     30e:	f1 f7       	brne	.-4      	; 0x30c <read_AD590+0x7e>
     310:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	if (read_ADS1115(ADC_TE, PGA0512, AIN3, DR128, &voltage) == ERROR) {
     312:	8e 01       	movw	r16, r28
     314:	0f 5f       	subi	r16, 0xFF	; 255
     316:	1f 4f       	sbci	r17, 0xFF	; 255
     318:	20 e8       	ldi	r18, 0x80	; 128
     31a:	40 e7       	ldi	r20, 0x70	; 112
     31c:	68 e0       	ldi	r22, 0x08	; 8
     31e:	88 e4       	ldi	r24, 0x48	; 72
     320:	0e 94 c8 01 	call	0x390	; 0x390 <read_ADS1115>
     324:	83 36       	cpi	r24, 0x63	; 99
     326:	51 f4       	brne	.+20     	; 0x33c <read_AD590+0xae>
		*temperature = BADFLOAT;
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	50 e8       	ldi	r21, 0x80	; 128
     32c:	66 e2       	ldi	r22, 0x26	; 38
     32e:	74 ec       	ldi	r23, 0xC4	; 196
     330:	f7 01       	movw	r30, r14
     332:	40 83       	st	Z, r20
     334:	51 83       	std	Z+1, r21	; 0x01
     336:	62 83       	std	Z+2, r22	; 0x02
     338:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
     33a:	1c c0       	rjmp	.+56     	; 0x374 <read_AD590+0xe6>
	}
	*temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     33c:	20 e0       	ldi	r18, 0x00	; 0
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	4a e7       	ldi	r20, 0x7A	; 122
     342:	54 e4       	ldi	r21, 0x44	; 68
     344:	69 81       	ldd	r22, Y+1	; 0x01
     346:	7a 81       	ldd	r23, Y+2	; 0x02
     348:	8b 81       	ldd	r24, Y+3	; 0x03
     34a:	9c 81       	ldd	r25, Y+4	; 0x04
     34c:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
     350:	23 e3       	ldi	r18, 0x33	; 51
     352:	33 e9       	ldi	r19, 0x93	; 147
     354:	48 e8       	ldi	r20, 0x88	; 136
     356:	53 e4       	ldi	r21, 0x43	; 67
     358:	0e 94 a9 29 	call	0x5352	; 0x5352 <__subsf3>
     35c:	9b 01       	movw	r18, r22
     35e:	ac 01       	movw	r20, r24
     360:	c5 01       	movw	r24, r10
     362:	b4 01       	movw	r22, r8
     364:	0e 94 aa 29 	call	0x5354	; 0x5354 <__addsf3>
     368:	f7 01       	movw	r30, r14
     36a:	60 83       	st	Z, r22
     36c:	71 83       	std	Z+1, r23	; 0x01
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     372:	80 e0       	ldi	r24, 0x00	; 0

}
     374:	24 96       	adiw	r28, 0x04	; 4
     376:	cd bf       	out	0x3d, r28	; 61
     378:	de bf       	out	0x3e, r29	; 62
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	bf 90       	pop	r11
     388:	af 90       	pop	r10
     38a:	9f 90       	pop	r9
     38c:	8f 90       	pop	r8
     38e:	08 95       	ret

00000390 <read_ADS1115>:
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
uint8_t read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins,
	uint8_t datarate, float *voltage)
{
     390:	8f 92       	push	r8
     392:	9f 92       	push	r9
     394:	af 92       	push	r10
     396:	bf 92       	push	r11
     398:	cf 92       	push	r12
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	f8 2e       	mov	r15, r24
     3aa:	e6 2e       	mov	r14, r22
     3ac:	68 01       	movw	r12, r16
	float scale;
	uint8_t confighi, configlo, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     3ae:	46 2b       	or	r20, r22
     3b0:	c4 2f       	mov	r28, r20
     3b2:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     3b4:	d2 2f       	mov	r29, r18
     3b6:	d3 60       	ori	r29, 0x03	; 3

	*voltage = BADFLOAT;
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e8       	ldi	r25, 0x80	; 128
     3bc:	a6 e2       	ldi	r26, 0x26	; 38
     3be:	b4 ec       	ldi	r27, 0xC4	; 196
     3c0:	f8 01       	movw	r30, r16
     3c2:	80 83       	st	Z, r24
     3c4:	91 83       	std	Z+1, r25	; 0x01
     3c6:	a2 83       	std	Z+2, r26	; 0x02
     3c8:	b3 83       	std	Z+3, r27	; 0x03
	if (start_TWI(addr, TWIWRITE == ERROR)) {		// TWI start condition
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	8f 2d       	mov	r24, r15
     3ce:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
     3d2:	08 2f       	mov	r16, r24
     3d4:	88 23       	and	r24, r24
     3d6:	21 f0       	breq	.+8      	; 0x3e0 <read_ADS1115+0x50>
		stop_TWI();
     3d8:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(ERROR);
     3dc:	13 e6       	ldi	r17, 0x63	; 99
     3de:	b4 c0       	rjmp	.+360    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	if ((write_TWI(ADS1115CONFIG) == ERROR)) {		// Write the CONFIG register
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
     3e6:	18 2f       	mov	r17, r24
     3e8:	83 36       	cpi	r24, 0x63	; 99
     3ea:	19 f4       	brne	.+6      	; 0x3f2 <read_ADS1115+0x62>
		stop_TWI();
     3ec:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(ERROR);
     3f0:	ab c0       	rjmp	.+342    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	if ((write_TWI(confighi) == ERROR)) {			// Write high byte
     3f2:	8c 2f       	mov	r24, r28
     3f4:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
     3f8:	18 2f       	mov	r17, r24
     3fa:	83 36       	cpi	r24, 0x63	; 99
     3fc:	19 f4       	brne	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		stop_TWI();
     3fe:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(ERROR);
     402:	a2 c0       	rjmp	.+324    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	if ((write_TWI(configlo) == ERROR)) {			// Write low byte
     404:	8d 2f       	mov	r24, r29
     406:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
     40a:	18 2f       	mov	r17, r24
     40c:	83 36       	cpi	r24, 0x63	; 99
     40e:	19 f4       	brne	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		stop_TWI();
     410:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(ERROR);
     414:	99 c0       	rjmp	.+306    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	stop_TWI();
     416:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
     41a:	fc e1       	ldi	r31, 0x1C	; 28
     41c:	fa 95       	dec	r31
     41e:	f1 f7       	brne	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>

	_delay_us(25);									// Power-up time

	converting = YES;
     420:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     422:	09 c0       	rjmp	.+18     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		start_TWI(addr, TWIREAD);
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	8f 2d       	mov	r24, r15
     428:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
		flag = readlast_TWI();
     42c:	0e 94 80 26 	call	0x4d00	; 0x4d00 <readlast_TWI>
		if (flag & 0b10000000) {
     430:	88 23       	and	r24, r24
     432:	0c f4       	brge	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			converting = NO;
     434:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     436:	c1 11       	cpse	r28, r1
     438:	f5 cf       	rjmp	.-22     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		flag = readlast_TWI();
		if (flag & 0b10000000) {
			converting = NO;
		}
	}
	stop_TWI();
     43a:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>

	start_TWI(addr, TWIWRITE);
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	8f 2d       	mov	r24, r15
     442:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	8f 2d       	mov	r24, r15
     450:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
	highbyte = read_TWI();
     454:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <read_TWI>
     458:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     45a:	0e 94 80 26 	call	0x4d00	; 0x4d00 <readlast_TWI>
     45e:	d8 2f       	mov	r29, r24
	stop_TWI();
     460:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>

	value = highbyte;
     464:	6c 2f       	mov	r22, r28
     466:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     468:	76 2f       	mov	r23, r22
     46a:	66 27       	eor	r22, r22
	value |= lowbyte;
     46c:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     46e:	84 e0       	ldi	r24, 0x04	; 4
     470:	e8 16       	cp	r14, r24
     472:	49 f1       	breq	.+82     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     474:	8e 15       	cp	r24, r14
     476:	30 f0       	brcs	.+12     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     478:	ee 20       	and	r14, r14
     47a:	d9 f1       	breq	.+118    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     47c:	e2 e0       	ldi	r30, 0x02	; 2
     47e:	ee 16       	cp	r14, r30
     480:	69 f1       	breq	.+90     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     482:	42 c0       	rjmp	.+132    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     484:	f8 e0       	ldi	r31, 0x08	; 8
     486:	ef 16       	cp	r14, r31
     488:	09 f4       	brne	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     48a:	42 c0       	rjmp	.+132    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     48c:	8a e0       	ldi	r24, 0x0A	; 10
     48e:	e8 16       	cp	r14, r24
     490:	21 f0       	breq	.+8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     492:	e6 e0       	ldi	r30, 0x06	; 6
     494:	ee 12       	cpse	r14, r30
     496:	38 c0       	rjmp	.+112    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     498:	0b c0       	rjmp	.+22     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		case PGA0256:
			scale = SCA0256;
     49a:	0f 2e       	mov	r0, r31
     49c:	f4 e7       	ldi	r31, 0x74	; 116
     49e:	8f 2e       	mov	r8, r31
     4a0:	f3 e1       	ldi	r31, 0x13	; 19
     4a2:	9f 2e       	mov	r9, r31
     4a4:	f3 e0       	ldi	r31, 0x03	; 3
     4a6:	af 2e       	mov	r10, r31
     4a8:	f7 e3       	ldi	r31, 0x37	; 55
     4aa:	bf 2e       	mov	r11, r31
     4ac:	f0 2d       	mov	r31, r0
     4ae:	3a c0       	rjmp	.+116    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     4b0:	0f 2e       	mov	r0, r31
     4b2:	f4 e7       	ldi	r31, 0x74	; 116
     4b4:	8f 2e       	mov	r8, r31
     4b6:	f3 e1       	ldi	r31, 0x13	; 19
     4b8:	9f 2e       	mov	r9, r31
     4ba:	f3 e0       	ldi	r31, 0x03	; 3
     4bc:	af 2e       	mov	r10, r31
     4be:	f8 e3       	ldi	r31, 0x38	; 56
     4c0:	bf 2e       	mov	r11, r31
     4c2:	f0 2d       	mov	r31, r0
			break;
     4c4:	2f c0       	rjmp	.+94     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		case PGA2048:
			scale = SCA2048;
     4c6:	0f 2e       	mov	r0, r31
     4c8:	f2 e1       	ldi	r31, 0x12	; 18
     4ca:	8f 2e       	mov	r8, r31
     4cc:	f3 e1       	ldi	r31, 0x13	; 19
     4ce:	9f 2e       	mov	r9, r31
     4d0:	f3 e8       	ldi	r31, 0x83	; 131
     4d2:	af 2e       	mov	r10, r31
     4d4:	f8 e3       	ldi	r31, 0x38	; 56
     4d6:	bf 2e       	mov	r11, r31
     4d8:	f0 2d       	mov	r31, r0
			break;
     4da:	24 c0       	rjmp	.+72     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		case PGA4096:
			scale = SCA4096;
     4dc:	0f 2e       	mov	r0, r31
     4de:	f4 e7       	ldi	r31, 0x74	; 116
     4e0:	8f 2e       	mov	r8, r31
     4e2:	f3 e1       	ldi	r31, 0x13	; 19
     4e4:	9f 2e       	mov	r9, r31
     4e6:	f3 e0       	ldi	r31, 0x03	; 3
     4e8:	af 2e       	mov	r10, r31
     4ea:	f9 e3       	ldi	r31, 0x39	; 57
     4ec:	bf 2e       	mov	r11, r31
     4ee:	f0 2d       	mov	r31, r0
			break;
     4f0:	19 c0       	rjmp	.+50     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		case PGA6144:
			scale = SCA6144;
     4f2:	0f 2e       	mov	r0, r31
     4f4:	fe e2       	ldi	r31, 0x2E	; 46
     4f6:	8f 2e       	mov	r8, r31
     4f8:	fd e9       	ldi	r31, 0x9D	; 157
     4fa:	9f 2e       	mov	r9, r31
     4fc:	f4 e4       	ldi	r31, 0x44	; 68
     4fe:	af 2e       	mov	r10, r31
     500:	f9 e3       	ldi	r31, 0x39	; 57
     502:	bf 2e       	mov	r11, r31
     504:	f0 2d       	mov	r31, r0
			break;
     506:	0e c0       	rjmp	.+28     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		default:
			scale = 0.0;
     508:	81 2c       	mov	r8, r1
     50a:	91 2c       	mov	r9, r1
     50c:	54 01       	movw	r10, r8
			break;
     50e:	0a c0       	rjmp	.+20     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     510:	0f 2e       	mov	r0, r31
     512:	f1 e7       	ldi	r31, 0x71	; 113
     514:	8f 2e       	mov	r8, r31
     516:	f3 e1       	ldi	r31, 0x13	; 19
     518:	9f 2e       	mov	r9, r31
     51a:	f3 e8       	ldi	r31, 0x83	; 131
     51c:	af 2e       	mov	r10, r31
     51e:	f7 e3       	ldi	r31, 0x37	; 55
     520:	bf 2e       	mov	r11, r31
     522:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	*voltage = scale * (float) value;
     524:	07 2e       	mov	r0, r23
     526:	00 0c       	add	r0, r0
     528:	88 0b       	sbc	r24, r24
     52a:	99 0b       	sbc	r25, r25
     52c:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
     530:	9b 01       	movw	r18, r22
     532:	ac 01       	movw	r20, r24
     534:	c5 01       	movw	r24, r10
     536:	b4 01       	movw	r22, r8
     538:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
     53c:	f6 01       	movw	r30, r12
     53e:	60 83       	st	Z, r22
     540:	71 83       	std	Z+1, r23	; 0x01
     542:	82 83       	std	Z+2, r24	; 0x02
     544:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     546:	10 2f       	mov	r17, r16

}
     548:	81 2f       	mov	r24, r17
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	ff 90       	pop	r15
     554:	ef 90       	pop	r14
     556:	df 90       	pop	r13
     558:	cf 90       	pop	r12
     55a:	bf 90       	pop	r11
     55c:	af 90       	pop	r10
     55e:	9f 90       	pop	r9
     560:	8f 90       	pop	r8
     562:	08 95       	ret

00000564 <get_cmdline>:
	if ((d >= '0') && (d <= '9')) {
		return(ERROR);
	}
	return(NOERROR);

}
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	9c 01       	movw	r18, r24
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	1c c0       	rjmp	.+56     	; 0x5a6 <get_cmdline+0x42>
     56e:	ce e3       	ldi	r28, 0x3E	; 62
     570:	dc e2       	ldi	r29, 0x2C	; 44
     572:	e8 81       	ld	r30, Y
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	e1 5c       	subi	r30, 0xC1	; 193
     578:	f4 4d       	sbci	r31, 0xD4	; 212
     57a:	80 81       	ld	r24, Z
     57c:	f9 01       	movw	r30, r18
     57e:	e4 0f       	add	r30, r20
     580:	f1 1d       	adc	r31, r1
     582:	80 83       	st	Z, r24
     584:	a0 e4       	ldi	r26, 0x40	; 64
     586:	bc e2       	ldi	r27, 0x2C	; 44
     588:	8c 91       	ld	r24, X
     58a:	81 50       	subi	r24, 0x01	; 1
     58c:	8c 93       	st	X, r24
     58e:	88 81       	ld	r24, Y
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	6e ef       	ldi	r22, 0xFE	; 254
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__divmodhi4>
     59c:	88 83       	st	Y, r24
     59e:	80 81       	ld	r24, Z
     5a0:	88 23       	and	r24, r24
     5a2:	29 f0       	breq	.+10     	; 0x5ae <get_cmdline+0x4a>
     5a4:	4f 5f       	subi	r20, 0xFF	; 255
     5a6:	80 91 40 2c 	lds	r24, 0x2C40	; 0x802c40 <recv0_buf+0x101>
     5aa:	81 11       	cpse	r24, r1
     5ac:	e0 cf       	rjmp	.-64     	; 0x56e <get_cmdline+0xa>
     5ae:	f9 01       	movw	r30, r18
     5b0:	e4 0f       	add	r30, r20
     5b2:	f1 1d       	adc	r31, r1
     5b4:	10 82       	st	Z, r1
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	08 95       	ret

000005bc <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     5bc:	9f e9       	ldi	r25, 0x9F	; 159
     5be:	98 0f       	add	r25, r24
     5c0:	9a 31       	cpi	r25, 0x1A	; 26
     5c2:	28 f0       	brcs	.+10     	; 0x5ce <isaletter+0x12>
     5c4:	81 54       	subi	r24, 0x41	; 65
     5c6:	8a 31       	cpi	r24, 0x1A	; 26
     5c8:	20 f4       	brcc	.+8      	; 0x5d2 <isaletter+0x16>
		return(ERROR);
     5ca:	83 e6       	ldi	r24, 0x63	; 99
     5cc:	08 95       	ret
     5ce:	83 e6       	ldi	r24, 0x63	; 99
     5d0:	08 95       	ret
	}
	return(NOERROR);
     5d2:	80 e0       	ldi	r24, 0x00	; 0

}
     5d4:	08 95       	ret

000005d6 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     5e2:	e6 2e       	mov	r14, r22
     5e4:	f1 2c       	mov	r15, r1
     5e6:	84 e3       	ldi	r24, 0x34	; 52
     5e8:	8e 9d       	mul	r24, r14
     5ea:	f0 01       	movw	r30, r0
     5ec:	8f 9d       	mul	r24, r15
     5ee:	f0 0d       	add	r31, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	e3 5f       	subi	r30, 0xF3	; 243
     5f4:	f7 4d       	sbci	r31, 0xD7	; 215
     5f6:	8f e3       	ldi	r24, 0x3F	; 63
     5f8:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     5fa:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     5fc:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     5fe:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     600:	04 c0       	rjmp	.+8      	; 0x60a <parse_cmd+0x34>
		if (*ptr == '\0') {
     602:	11 23       	and	r17, r17
     604:	09 f4       	brne	.+2      	; 0x608 <parse_cmd+0x32>
     606:	75 c0       	rjmp	.+234    	; 0x6f2 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     608:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     60a:	18 81       	ld	r17, Y
     60c:	81 2f       	mov	r24, r17
     60e:	0e 94 de 02 	call	0x5bc	; 0x5bc <isaletter>
     612:	88 23       	and	r24, r24
     614:	b1 f3       	breq	.-20     	; 0x602 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     616:	21 96       	adiw	r28, 0x01	; 1
     618:	84 e3       	ldi	r24, 0x34	; 52
     61a:	8e 9d       	mul	r24, r14
     61c:	f0 01       	movw	r30, r0
     61e:	8f 9d       	mul	r24, r15
     620:	f0 0d       	add	r31, r0
     622:	11 24       	eor	r1, r1
     624:	e3 5f       	subi	r30, 0xF3	; 243
     626:	f7 4d       	sbci	r31, 0xD7	; 215
     628:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     62a:	04 c0       	rjmp	.+8      	; 0x634 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     62c:	11 23       	and	r17, r17
     62e:	09 f4       	brne	.+2      	; 0x632 <parse_cmd+0x5c>
     630:	60 c0       	rjmp	.+192    	; 0x6f2 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     632:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     634:	18 81       	ld	r17, Y
     636:	81 2f       	mov	r24, r17
     638:	0e 94 de 02 	call	0x5bc	; 0x5bc <isaletter>
     63c:	88 23       	and	r24, r24
     63e:	b1 f3       	breq	.-20     	; 0x62c <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     640:	21 96       	adiw	r28, 0x01	; 1
     642:	84 e3       	ldi	r24, 0x34	; 52
     644:	8e 9d       	mul	r24, r14
     646:	f0 01       	movw	r30, r0
     648:	8f 9d       	mul	r24, r15
     64a:	f0 0d       	add	r31, r0
     64c:	11 24       	eor	r1, r1
     64e:	e3 5f       	subi	r30, 0xF3	; 243
     650:	f7 4d       	sbci	r31, 0xD7	; 215
     652:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	2a c0       	rjmp	.+84     	; 0x6ac <parse_cmd+0xd6>
		if (*ptr == '\0') {
     658:	98 81       	ld	r25, Y
     65a:	91 11       	cpse	r25, r1
     65c:	0c c0       	rjmp	.+24     	; 0x676 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     65e:	94 e3       	ldi	r25, 0x34	; 52
     660:	9e 9d       	mul	r25, r14
     662:	f0 01       	movw	r30, r0
     664:	9f 9d       	mul	r25, r15
     666:	f0 0d       	add	r31, r0
     668:	11 24       	eor	r1, r1
     66a:	e3 5f       	subi	r30, 0xF3	; 243
     66c:	f7 4d       	sbci	r31, 0xD7	; 215
     66e:	e8 0f       	add	r30, r24
     670:	f1 1d       	adc	r31, r1
     672:	12 82       	std	Z+2, r1	; 0x02
			return;
     674:	3e c0       	rjmp	.+124    	; 0x6f2 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {			// Command ID separator
     676:	9b 33       	cpi	r25, 0x3B	; 59
     678:	61 f4       	brne	.+24     	; 0x692 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     67a:	94 e3       	ldi	r25, 0x34	; 52
     67c:	9e 9d       	mul	r25, r14
     67e:	f0 01       	movw	r30, r0
     680:	9f 9d       	mul	r25, r15
     682:	f0 0d       	add	r31, r0
     684:	11 24       	eor	r1, r1
     686:	e3 5f       	subi	r30, 0xF3	; 243
     688:	f7 4d       	sbci	r31, 0xD7	; 215
     68a:	e8 0f       	add	r30, r24
     68c:	f1 1d       	adc	r31, r1
     68e:	12 82       	std	Z+2, r1	; 0x02
			break;
     690:	0f c0       	rjmp	.+30     	; 0x6b0 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     692:	21 96       	adiw	r28, 0x01	; 1
     694:	24 e3       	ldi	r18, 0x34	; 52
     696:	2e 9d       	mul	r18, r14
     698:	f0 01       	movw	r30, r0
     69a:	2f 9d       	mul	r18, r15
     69c:	f0 0d       	add	r31, r0
     69e:	11 24       	eor	r1, r1
     6a0:	e3 5f       	subi	r30, 0xF3	; 243
     6a2:	f7 4d       	sbci	r31, 0xD7	; 215
     6a4:	e8 0f       	add	r30, r24
     6a6:	f1 1d       	adc	r31, r1
     6a8:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6aa:	8f 5f       	subi	r24, 0xFF	; 255
     6ac:	89 32       	cpi	r24, 0x29	; 41
     6ae:	a0 f2       	brcs	.-88     	; 0x658 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
     6b0:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	1c c0       	rjmp	.+56     	; 0x6ee <parse_cmd+0x118>
		if (*ptr == '\0') {
     6b6:	98 81       	ld	r25, Y
     6b8:	91 11       	cpse	r25, r1
     6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     6bc:	94 e3       	ldi	r25, 0x34	; 52
     6be:	9e 9d       	mul	r25, r14
     6c0:	f0 01       	movw	r30, r0
     6c2:	9f 9d       	mul	r25, r15
     6c4:	f0 0d       	add	r31, r0
     6c6:	11 24       	eor	r1, r1
     6c8:	e3 5f       	subi	r30, 0xF3	; 243
     6ca:	f7 4d       	sbci	r31, 0xD7	; 215
     6cc:	e8 0f       	add	r30, r24
     6ce:	f1 1d       	adc	r31, r1
     6d0:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     6d2:	0f c0       	rjmp	.+30     	; 0x6f2 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     6d4:	21 96       	adiw	r28, 0x01	; 1
     6d6:	24 e3       	ldi	r18, 0x34	; 52
     6d8:	2e 9d       	mul	r18, r14
     6da:	f0 01       	movw	r30, r0
     6dc:	2f 9d       	mul	r18, r15
     6de:	f0 0d       	add	r31, r0
     6e0:	11 24       	eor	r1, r1
     6e2:	e3 5f       	subi	r30, 0xF3	; 243
     6e4:	f7 4d       	sbci	r31, 0xD7	; 215
     6e6:	e8 0f       	add	r30, r24
     6e8:	f1 1d       	adc	r31, r1
     6ea:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     6ec:	8f 5f       	subi	r24, 0xFF	; 255
     6ee:	89 30       	cpi	r24, 0x09	; 9
     6f0:	10 f3       	brcs	.-60     	; 0x6b6 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	08 95       	ret

000006fe <printLine>:
		been run and the system has received a reboot acknowledge (the !). This
		is done to prevent unsolicited text being sent (error messages) at
		initialization or after a reboot.
------------------------------------------------------------------------------*/
void printLine(char *str)
{
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	c5 50       	subi	r28, 0x05	; 5
     70c:	d1 40       	sbci	r29, 0x01	; 1
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char prFormat[] = "$S%d%s";
     712:	27 e0       	ldi	r18, 0x07	; 7
     714:	ea e0       	ldi	r30, 0x0A	; 10
     716:	f5 ea       	ldi	r31, 0xA5	; 165
     718:	de 01       	movw	r26, r28
     71a:	a1 50       	subi	r26, 0x01	; 1
     71c:	bf 4f       	sbci	r27, 0xFF	; 255
     71e:	01 90       	ld	r0, Z+
     720:	0d 92       	st	X+, r0
     722:	2a 95       	dec	r18
     724:	e1 f7       	brne	.-8      	; 0x71e <printLine+0x20>

	if (firstpass) {
     726:	20 91 15 2a 	lds	r18, 0x2A15	; 0x802a15 <firstpass>
     72a:	21 11       	cpse	r18, r1
     72c:	2a c0       	rjmp	.+84     	; 0x782 <printLine+0x84>
		return;
	}

	sprintf(strbuf, prFormat, get_SPECID, str);
     72e:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     732:	22 ff       	sbrs	r18, 2
     734:	03 c0       	rjmp	.+6      	; 0x73c <printLine+0x3e>
     736:	22 e0       	ldi	r18, 0x02	; 2
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	02 c0       	rjmp	.+4      	; 0x740 <printLine+0x42>
     73c:	21 e0       	ldi	r18, 0x01	; 1
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	9f 93       	push	r25
     742:	8f 93       	push	r24
     744:	3f 93       	push	r19
     746:	2f 93       	push	r18
     748:	ce 01       	movw	r24, r28
     74a:	81 50       	subi	r24, 0x01	; 1
     74c:	9f 4f       	sbci	r25, 0xFF	; 255
     74e:	9f 93       	push	r25
     750:	8f 93       	push	r24
     752:	8e 01       	movw	r16, r28
     754:	0f 5f       	subi	r16, 0xFF	; 255
     756:	1f 4f       	sbci	r17, 0xFF	; 255
     758:	1f 93       	push	r17
     75a:	0f 93       	push	r16
     75c:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
	checksum_NMEA(strbuf);
     760:	c8 01       	movw	r24, r16
     762:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     766:	f8 01       	movw	r30, r16
     768:	01 90       	ld	r0, Z+
     76a:	00 20       	and	r0, r0
     76c:	e9 f7       	brne	.-6      	; 0x768 <printLine+0x6a>
     76e:	31 97       	sbiw	r30, 0x01	; 1
     770:	af 01       	movw	r20, r30
     772:	40 1b       	sub	r20, r16
     774:	51 0b       	sbc	r21, r17
     776:	b8 01       	movw	r22, r16
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	0e 94 8a 27 	call	0x4f14	; 0x4f14 <send_USART>
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	de bf       	out	0x3e, r29	; 62

}
     782:	cb 5f       	subi	r28, 0xFB	; 251
     784:	de 4f       	sbci	r29, 0xFE	; 254
     786:	cd bf       	out	0x3d, r28	; 61
     788:	de bf       	out	0x3e, r29	; 62
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	08 95       	ret

00000794 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     794:	cf 92       	push	r12
     796:	df 92       	push	r13
     798:	ef 92       	push	r14
     79a:	ff 92       	push	r15
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	cc 51       	subi	r28, 0x1C	; 28
     7aa:	d1 40       	sbci	r29, 0x01	; 1
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	d8 2e       	mov	r13, r24
     7b2:	c9 2e       	mov	r12, r25

	const char format_CMD[] = "CMD,%s,%s";
     7b4:	8a e0       	ldi	r24, 0x0A	; 10
     7b6:	e1 e1       	ldi	r30, 0x11	; 17
     7b8:	f5 ea       	ldi	r31, 0xA5	; 165
     7ba:	9e 01       	movw	r18, r28
     7bc:	2f 5f       	subi	r18, 0xFF	; 255
     7be:	3f 4f       	sbci	r19, 0xFF	; 255
     7c0:	79 01       	movw	r14, r18
     7c2:	d9 01       	movw	r26, r18
     7c4:	01 90       	ld	r0, Z+
     7c6:	0d 92       	st	X+, r0
     7c8:	8a 95       	dec	r24
     7ca:	e1 f7       	brne	.-8      	; 0x7c4 <echo_cmd+0x30>
	char currenttime[20], strbuf[BUFSIZE];

	get_time(currenttime);
     7cc:	8e 01       	movw	r16, r28
     7ce:	05 5f       	subi	r16, 0xF5	; 245
     7d0:	1f 4f       	sbci	r17, 0xFF	; 255
     7d2:	c8 01       	movw	r24, r16
     7d4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
	sprintf(strbuf, format_CMD, currenttime, cmdline);
     7d8:	cf 92       	push	r12
     7da:	df 92       	push	r13
     7dc:	1f 93       	push	r17
     7de:	0f 93       	push	r16
     7e0:	ff 92       	push	r15
     7e2:	ef 92       	push	r14
     7e4:	0c 5e       	subi	r16, 0xEC	; 236
     7e6:	1f 4f       	sbci	r17, 0xFF	; 255
     7e8:	1f 93       	push	r17
     7ea:	0f 93       	push	r16
     7ec:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
	printLine(strbuf);
     7f0:	c8 01       	movw	r24, r16
     7f2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

}
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	c4 5e       	subi	r28, 0xE4	; 228
     7fc:	de 4f       	sbci	r29, 0xFE	; 254
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	de bf       	out	0x3e, r29	; 62
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	df 90       	pop	r13
     810:	cf 90       	pop	r12
     812:	08 95       	ret

00000814 <send_EXprompt>:
/*------------------------------------------------------------------------------
void send_EXprompt(void)
	Sends an exclamation mark on USART port 0
------------------------------------------------------------------------------*/
void send_EXprompt(void)
{
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	00 d0       	rcall	.+0      	; 0x81a <send_EXprompt+0x6>
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62

	const char str[] = "!";
     81e:	81 e2       	ldi	r24, 0x21	; 33
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	89 83       	std	Y+1, r24	; 0x01
     824:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     826:	41 e0       	ldi	r20, 0x01	; 1
     828:	be 01       	movw	r22, r28
     82a:	6f 5f       	subi	r22, 0xFF	; 255
     82c:	7f 4f       	sbci	r23, 0xFF	; 255
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	0e 94 8a 27 	call	0x4f14	; 0x4f14 <send_USART>

}
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <rebootACKd>:
	Returns:
		YES if the reboot acknowledge string was received
		NO if it wasn't
------------------------------------------------------------------------------*/
uint8_t rebootACKd(char *cmdline)
{
     83e:	cf 93       	push	r28

	if (!rebootackd) {
     840:	c0 91 0c 28 	lds	r28, 0x280C	; 0x80280c <rebootackd>
     844:	c1 11       	cpse	r28, r1
     846:	21 c0       	rjmp	.+66     	; 0x88a <rebootACKd+0x4c>
     848:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     84a:	80 81       	ld	r24, Z
     84c:	81 32       	cpi	r24, 0x21	; 33
     84e:	91 f4       	brne	.+36     	; 0x874 <rebootACKd+0x36>
     850:	91 81       	ldd	r25, Z+1	; 0x01
     852:	91 11       	cpse	r25, r1
     854:	0f c0       	rjmp	.+30     	; 0x874 <rebootACKd+0x36>
			init_RTC(511);		// 1-sec RTC clock ticks
     856:	8f ef       	ldi	r24, 0xFF	; 255
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     85e:	85 e0       	ldi	r24, 0x05	; 5
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
     866:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>
			rebootackd = YES;
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	80 93 0c 28 	sts	0x280C, r24	; 0x80280c <rebootackd>
			return(YES);
     870:	c1 e0       	ldi	r28, 0x01	; 1
     872:	0c c0       	rjmp	.+24     	; 0x88c <rebootACKd+0x4e>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     874:	81 32       	cpi	r24, 0x21	; 33
     876:	31 f4       	brne	.+12     	; 0x884 <rebootACKd+0x46>
     878:	81 81       	ldd	r24, Z+1	; 0x01
     87a:	88 23       	and	r24, r24
     87c:	19 f0       	breq	.+6      	; 0x884 <rebootACKd+0x46>
			reboot();
     87e:	0e 94 78 29 	call	0x52f0	; 0x52f0 <reboot>
			return(NO);
     882:	04 c0       	rjmp	.+8      	; 0x88c <rebootACKd+0x4e>
		} else {
			send_EXprompt();
     884:	0e 94 0a 04 	call	0x814	; 0x814 <send_EXprompt>
//			send_prompt('!');
			return(NO);
     888:	01 c0       	rjmp	.+2      	; 0x88c <rebootACKd+0x4e>
		}
	}

	return(YES);
     88a:	c1 e0       	ldi	r28, 0x01	; 1

}
     88c:	8c 2f       	mov	r24, r28
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <send_GTprompt>:
/*------------------------------------------------------------------------------
void send_GTprompt(void)
	Sends a greater than (>) on USART port 0
------------------------------------------------------------------------------*/
void send_GTprompt(void)
{
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	00 d0       	rcall	.+0      	; 0x898 <send_GTprompt+0x6>
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62

	const char str[] = ">";
     89c:	8e e3       	ldi	r24, 0x3E	; 62
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	89 83       	std	Y+1, r24	; 0x01
     8a2:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     8a4:	41 e0       	ldi	r20, 0x01	; 1
     8a6:	be 01       	movw	r22, r28
     8a8:	6f 5f       	subi	r22, 0xFF	; 255
     8aa:	7f 4f       	sbci	r23, 0xFF	; 255
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	0e 94 8a 27 	call	0x4f14	; 0x4f14 <send_USART>

}
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	cf 5f       	subi	r28, 0xFF	; 255
     8c6:	d1 09       	sbc	r29, r1
     8c8:	cd bf       	out	0x3d, r28	; 61
     8ca:	de bf       	out	0x3e, r29	; 62

	char cmdline[BUFSIZE+1];		// BUFSIZE is the size of the ring buffer
	static uint8_t cstack = 0;		// pcmd index

	get_cmdline(cmdline);
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 b2 02 	call	0x564	; 0x564 <get_cmdline>

	if (!rebootACKd(cmdline)) {		// Reboot not yet acknowledged
     8d4:	ce 01       	movw	r24, r28
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	0e 94 1f 04 	call	0x83e	; 0x83e <rebootACKd>
     8dc:	88 23       	and	r24, r24
     8de:	09 f4       	brne	.+2      	; 0x8e2 <commands+0x26>
     8e0:	74 c0       	rjmp	.+232    	; 0x9ca <commands+0x10e>
		return;
	}

		// <CR> or ! alone are not errors
	if ((cmdline[0] == '\0') || (cmdline[0] == '!')) {
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	88 23       	and	r24, r24
     8e6:	11 f0       	breq	.+4      	; 0x8ec <commands+0x30>
     8e8:	81 32       	cpi	r24, 0x21	; 33
     8ea:	29 f4       	brne	.+10     	; 0x8f6 <commands+0x3a>
		firstpass = NO;
     8ec:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <firstpass>
		send_GTprompt();
     8f0:	0e 94 49 04 	call	0x892	; 0x892 <send_GTprompt>
		return;
     8f4:	6a c0       	rjmp	.+212    	; 0x9ca <commands+0x10e>
	}

	echo_cmd(cmdline);
     8f6:	ce 01       	movw	r24, r28
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	0e 94 ca 03 	call	0x794	; 0x794 <echo_cmd>
	parse_cmd(cmdline, cstack);
     8fe:	60 91 00 28 	lds	r22, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     902:	ce 01       	movw	r24, r28
     904:	01 96       	adiw	r24, 0x01	; 1
     906:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <parse_cmd>

	switch (pcmd[cstack].cverb) {
     90a:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     90e:	24 e3       	ldi	r18, 0x34	; 52
     910:	82 9f       	mul	r24, r18
     912:	f0 01       	movw	r30, r0
     914:	11 24       	eor	r1, r1
     916:	e3 5f       	subi	r30, 0xF3	; 243
     918:	f7 4d       	sbci	r31, 0xD7	; 215
     91a:	e0 81       	ld	r30, Z
     91c:	4e 2f       	mov	r20, r30
     91e:	50 e0       	ldi	r21, 0x00	; 0
     920:	fa 01       	movw	r30, r20
     922:	e9 54       	subi	r30, 0x49	; 73
     924:	f1 09       	sbc	r31, r1
     926:	ec 32       	cpi	r30, 0x2C	; 44
     928:	f1 05       	cpc	r31, r1
     92a:	e8 f5       	brcc	.+122    	; 0x9a6 <commands+0xea>
     92c:	e0 5b       	subi	r30, 0xB0	; 176
     92e:	ff 4f       	sbci	r31, 0xFF	; 255
     930:	0c 94 97 2f 	jmp	0x5f2e	; 0x5f2e <__tablejump2__>
		case 'c':				// close
			close_PNEU(cstack);
     934:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <close_PNEU>
			break;
     938:	3c c0       	rjmp	.+120    	; 0x9b2 <commands+0xf6>

		case 'o':				// open
			open_PNEU(cstack);
     93a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <open_PNEU>
			break;
     93e:	39 c0       	rjmp	.+114    	; 0x9b2 <commands+0xf6>

		case 'm':				// move
			move_MOTOR_CMD(cstack);
     940:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <move_MOTOR_CMD>
			break;
     944:	36 c0       	rjmp	.+108    	; 0x9b2 <commands+0xf6>

		case 'r':				// report
			report(cstack);
     946:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <report>
			break;
     94a:	33 c0       	rjmp	.+102    	; 0x9b2 <commands+0xf6>

		case 's':				// set
			set(cstack);
     94c:	0e 94 33 25 	call	0x4a66	; 0x4a66 <set>
			break;
     950:	30 c0       	rjmp	.+96     	; 0x9b2 <commands+0xf6>

		case 't':
			testroutine();
     952:	0e 94 b9 25 	call	0x4b72	; 0x4b72 <testroutine>
			break;
     956:	2d c0       	rjmp	.+90     	; 0x9b2 <commands+0xf6>

		case 'I':	// test init_MOTORS
			init_MOTORS();
     958:	0e 94 a6 24 	call	0x494c	; 0x494c <init_MOTORS>
			break;
     95c:	2a c0       	rjmp	.+84     	; 0x9b2 <commands+0xf6>

		case 'R':				// Reboot
			if (motorsMoving()) {
     95e:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <motorsMoving>
     962:	88 23       	and	r24, r24
     964:	39 f0       	breq	.+14     	; 0x974 <commands+0xb8>
				printError(ERR_MTR, "commands: Can't reboot, motor moving");
     966:	6b e1       	ldi	r22, 0x1B	; 27
     968:	75 ea       	ldi	r23, 0xA5	; 165
     96a:	86 e3       	ldi	r24, 0x36	; 54
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				break;
     972:	1f c0       	rjmp	.+62     	; 0x9b2 <commands+0xf6>
			} else {
				if (put_FRAM_ENCODERS() == ERROR) {
     974:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <put_FRAM_ENCODERS>
     978:	83 36       	cpi	r24, 0x63	; 99
     97a:	31 f4       	brne	.+12     	; 0x988 <commands+0xcc>
					printError(ERR_FRAM, "commands: put_FRAM_ENCODERS error");
     97c:	60 e4       	ldi	r22, 0x40	; 64
     97e:	75 ea       	ldi	r23, 0xA5	; 165
     980:	83 e9       	ldi	r24, 0x93	; 147
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				}
				timerSAVEENCODER = 0;
     988:	10 92 3a 2a 	sts	0x2A3A, r1	; 0x802a3a <timerSAVEENCODER>
				send_GTprompt();	// Aidan request
     98c:	0e 94 49 04 	call	0x892	; 0x892 <send_GTprompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     990:	8a e6       	ldi	r24, 0x6A	; 106
     992:	94 e0       	ldi	r25, 0x04	; 4
     994:	21 e0       	ldi	r18, 0x01	; 1
     996:	81 50       	subi	r24, 0x01	; 1
     998:	90 40       	sbci	r25, 0x00	; 0
     99a:	20 40       	sbci	r18, 0x00	; 0
     99c:	e1 f7       	brne	.-8      	; 0x996 <commands+0xda>
     99e:	00 c0       	rjmp	.+0      	; 0x9a0 <commands+0xe4>
				_delay_ms(100);
				reboot();			// in wdt.c
     9a0:	0e 94 78 29 	call	0x52f0	; 0x52f0 <reboot>
				return;
     9a4:	12 c0       	rjmp	.+36     	; 0x9ca <commands+0x10e>
			}

		default:
			printError(ERR_BADCOMMAND, "Not a command");
     9a6:	62 e6       	ldi	r22, 0x62	; 98
     9a8:	75 ea       	ldi	r23, 0xA5	; 165
     9aa:	89 ec       	ldi	r24, 0xC9	; 201
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     9b2:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	6a e0       	ldi	r22, 0x0A	; 10
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__divmodhi4>
     9c2:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	send_GTprompt();
     9c6:	0e 94 49 04 	call	0x892	; 0x892 <send_GTprompt>

}
     9ca:	c1 50       	subi	r28, 0x01	; 1
     9cc:	df 4f       	sbci	r29, 0xFF	; 255
     9ce:	cd bf       	out	0x3d, r28	; 61
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	08 95       	ret

000009d8 <check_isotime>:
#include "twi.h"
#include "errors.h"
#include "ds3231.h"

uint8_t check_isotime(char *isotime)
{
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	2a 97       	sbiw	r28, 0x0a	; 10
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	8c 01       	movw	r16, r24
	char sbuf[10];
	uint8_t i;
	int year, month, day, hours, minutes, seconds;

	for (i = 0; i < 4; i++) {
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	0e c0       	rjmp	.+28     	; 0xa0c <check_isotime+0x34>
		sbuf[i] = isotime[i];
     9f0:	82 2f       	mov	r24, r18
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	f8 01       	movw	r30, r16
     9f6:	e8 0f       	add	r30, r24
     9f8:	f9 1f       	adc	r31, r25
     9fa:	30 81       	ld	r19, Z
     9fc:	e1 e0       	ldi	r30, 0x01	; 1
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	ec 0f       	add	r30, r28
     a02:	fd 1f       	adc	r31, r29
     a04:	e8 0f       	add	r30, r24
     a06:	f9 1f       	adc	r31, r25
     a08:	30 83       	st	Z, r19
{
	char sbuf[10];
	uint8_t i;
	int year, month, day, hours, minutes, seconds;

	for (i = 0; i < 4; i++) {
     a0a:	2f 5f       	subi	r18, 0xFF	; 255
     a0c:	24 30       	cpi	r18, 0x04	; 4
     a0e:	80 f3       	brcs	.-32     	; 0x9f0 <check_isotime+0x18>
		sbuf[i] = isotime[i];
	}
	sbuf[4] = '\0';
     a10:	1d 82       	std	Y+5, r1	; 0x05
	year = atoi(sbuf);
     a12:	ce 01       	movw	r24, r28
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	0e 94 1e 30 	call	0x603c	; 0x603c <atoi>
	if ((year < 2021) || year > 2030) {
     a1a:	85 5e       	subi	r24, 0xE5	; 229
     a1c:	97 40       	sbci	r25, 0x07	; 7
     a1e:	0a 97       	sbiw	r24, 0x0a	; 10
     a20:	c8 f0       	brcs	.+50     	; 0xa54 <check_isotime+0x7c>
		printError(ERR_ISO, "check_isotime: year out of range (2021-2030)");
     a22:	60 e7       	ldi	r22, 0x70	; 112
     a24:	75 ea       	ldi	r23, 0xA5	; 165
     a26:	8b e5       	ldi	r24, 0x5B	; 91
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
     a2e:	83 e6       	ldi	r24, 0x63	; 99
     a30:	b2 c0       	rjmp	.+356    	; 0xb96 <check_isotime+0x1be>
	}
	for (i = 5; i < 7; i++) {
		sbuf[i-5] = isotime[i];
     a32:	28 2f       	mov	r18, r24
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	f9 01       	movw	r30, r18
     a38:	35 97       	sbiw	r30, 0x05	; 5
     a3a:	d8 01       	movw	r26, r16
     a3c:	a2 0f       	add	r26, r18
     a3e:	b3 1f       	adc	r27, r19
     a40:	9c 91       	ld	r25, X
     a42:	21 e0       	ldi	r18, 0x01	; 1
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	2c 0f       	add	r18, r28
     a48:	3d 1f       	adc	r19, r29
     a4a:	e2 0f       	add	r30, r18
     a4c:	f3 1f       	adc	r31, r19
     a4e:	90 83       	st	Z, r25
	year = atoi(sbuf);
	if ((year < 2021) || year > 2030) {
		printError(ERR_ISO, "check_isotime: year out of range (2021-2030)");
		return(ERROR);
	}
	for (i = 5; i < 7; i++) {
     a50:	8f 5f       	subi	r24, 0xFF	; 255
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <check_isotime+0x7e>
     a54:	85 e0       	ldi	r24, 0x05	; 5
     a56:	87 30       	cpi	r24, 0x07	; 7
     a58:	60 f3       	brcs	.-40     	; 0xa32 <check_isotime+0x5a>
		sbuf[i-5] = isotime[i];
	}
	sbuf[2] = '\0';
     a5a:	1b 82       	std	Y+3, r1	; 0x03
	month = atoi(sbuf);
     a5c:	ce 01       	movw	r24, r28
     a5e:	01 96       	adiw	r24, 0x01	; 1
     a60:	0e 94 1e 30 	call	0x603c	; 0x603c <atoi>
	if ((month < 1) || (month > 12)) {
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	0c 97       	sbiw	r24, 0x0c	; 12
     a68:	c8 f0       	brcs	.+50     	; 0xa9c <check_isotime+0xc4>
		printError(ERR_ISO, "check_isotime: invalid month (not 1-12)");
     a6a:	6d e9       	ldi	r22, 0x9D	; 157
     a6c:	75 ea       	ldi	r23, 0xA5	; 165
     a6e:	8b e5       	ldi	r24, 0x5B	; 91
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
     a76:	83 e6       	ldi	r24, 0x63	; 99
     a78:	8e c0       	rjmp	.+284    	; 0xb96 <check_isotime+0x1be>
	}
	for (i = 8; i < 10; i++) {
		sbuf[i-8] = isotime[i];
     a7a:	28 2f       	mov	r18, r24
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	f9 01       	movw	r30, r18
     a80:	38 97       	sbiw	r30, 0x08	; 8
     a82:	d8 01       	movw	r26, r16
     a84:	a2 0f       	add	r26, r18
     a86:	b3 1f       	adc	r27, r19
     a88:	9c 91       	ld	r25, X
     a8a:	21 e0       	ldi	r18, 0x01	; 1
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	2c 0f       	add	r18, r28
     a90:	3d 1f       	adc	r19, r29
     a92:	e2 0f       	add	r30, r18
     a94:	f3 1f       	adc	r31, r19
     a96:	90 83       	st	Z, r25
	month = atoi(sbuf);
	if ((month < 1) || (month > 12)) {
		printError(ERR_ISO, "check_isotime: invalid month (not 1-12)");
		return(ERROR);
	}
	for (i = 8; i < 10; i++) {
     a98:	8f 5f       	subi	r24, 0xFF	; 255
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <check_isotime+0xc6>
     a9c:	88 e0       	ldi	r24, 0x08	; 8
     a9e:	8a 30       	cpi	r24, 0x0A	; 10
     aa0:	60 f3       	brcs	.-40     	; 0xa7a <check_isotime+0xa2>
		sbuf[i-8] = isotime[i];
	}
	sbuf[2] = '\0';
     aa2:	1b 82       	std	Y+3, r1	; 0x03
	day = atoi(sbuf);
     aa4:	ce 01       	movw	r24, r28
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	0e 94 1e 30 	call	0x603c	; 0x603c <atoi>
	if ((day < 1) || (day > 31)) {
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	4f 97       	sbiw	r24, 0x1f	; 31
     ab0:	c8 f0       	brcs	.+50     	; 0xae4 <check_isotime+0x10c>
		printError(ERR_ISO, "check_isotime: invalid day (not 1-31)");
     ab2:	65 ec       	ldi	r22, 0xC5	; 197
     ab4:	75 ea       	ldi	r23, 0xA5	; 165
     ab6:	8b e5       	ldi	r24, 0x5B	; 91
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
     abe:	83 e6       	ldi	r24, 0x63	; 99
     ac0:	6a c0       	rjmp	.+212    	; 0xb96 <check_isotime+0x1be>
	}
	for (i = 11; i < 13; i++) {
		sbuf[i-11] = isotime[i];
     ac2:	28 2f       	mov	r18, r24
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	f9 01       	movw	r30, r18
     ac8:	3b 97       	sbiw	r30, 0x0b	; 11
     aca:	d8 01       	movw	r26, r16
     acc:	a2 0f       	add	r26, r18
     ace:	b3 1f       	adc	r27, r19
     ad0:	9c 91       	ld	r25, X
     ad2:	21 e0       	ldi	r18, 0x01	; 1
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	2c 0f       	add	r18, r28
     ad8:	3d 1f       	adc	r19, r29
     ada:	e2 0f       	add	r30, r18
     adc:	f3 1f       	adc	r31, r19
     ade:	90 83       	st	Z, r25
	day = atoi(sbuf);
	if ((day < 1) || (day > 31)) {
		printError(ERR_ISO, "check_isotime: invalid day (not 1-31)");
		return(ERROR);
	}
	for (i = 11; i < 13; i++) {
     ae0:	8f 5f       	subi	r24, 0xFF	; 255
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <check_isotime+0x10e>
     ae4:	8b e0       	ldi	r24, 0x0B	; 11
     ae6:	8d 30       	cpi	r24, 0x0D	; 13
     ae8:	60 f3       	brcs	.-40     	; 0xac2 <check_isotime+0xea>
		sbuf[i-11] = isotime[i];
	}
	sbuf[2] = '\0';
     aea:	1b 82       	std	Y+3, r1	; 0x03
	hours = atoi(sbuf);
     aec:	ce 01       	movw	r24, r28
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	0e 94 1e 30 	call	0x603c	; 0x603c <atoi>
	if ((hours < 0) || (hours > 23)) {
     af4:	48 97       	sbiw	r24, 0x18	; 24
     af6:	c8 f0       	brcs	.+50     	; 0xb2a <check_isotime+0x152>
		printError(ERR_ISO, "check_isotime: invalid hour");
     af8:	6b ee       	ldi	r22, 0xEB	; 235
     afa:	75 ea       	ldi	r23, 0xA5	; 165
     afc:	8b e5       	ldi	r24, 0x5B	; 91
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
     b04:	83 e6       	ldi	r24, 0x63	; 99
     b06:	47 c0       	rjmp	.+142    	; 0xb96 <check_isotime+0x1be>
	}
	for (i = 14; i < 16; i++) {
		sbuf[i-14] = isotime[i];
     b08:	28 2f       	mov	r18, r24
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	f9 01       	movw	r30, r18
     b0e:	3e 97       	sbiw	r30, 0x0e	; 14
     b10:	d8 01       	movw	r26, r16
     b12:	a2 0f       	add	r26, r18
     b14:	b3 1f       	adc	r27, r19
     b16:	9c 91       	ld	r25, X
     b18:	21 e0       	ldi	r18, 0x01	; 1
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	2c 0f       	add	r18, r28
     b1e:	3d 1f       	adc	r19, r29
     b20:	e2 0f       	add	r30, r18
     b22:	f3 1f       	adc	r31, r19
     b24:	90 83       	st	Z, r25
	hours = atoi(sbuf);
	if ((hours < 0) || (hours > 23)) {
		printError(ERR_ISO, "check_isotime: invalid hour");
		return(ERROR);
	}
	for (i = 14; i < 16; i++) {
     b26:	8f 5f       	subi	r24, 0xFF	; 255
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <check_isotime+0x154>
     b2a:	8e e0       	ldi	r24, 0x0E	; 14
     b2c:	80 31       	cpi	r24, 0x10	; 16
     b2e:	60 f3       	brcs	.-40     	; 0xb08 <check_isotime+0x130>
		sbuf[i-14] = isotime[i];
	}
	sbuf[2] = '\0';
     b30:	1b 82       	std	Y+3, r1	; 0x03
	minutes = atoi(sbuf);
     b32:	ce 01       	movw	r24, r28
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	0e 94 1e 30 	call	0x603c	; 0x603c <atoi>
	if ((minutes < 0) || (minutes > 59)) {
     b3a:	cc 97       	sbiw	r24, 0x3c	; 60
     b3c:	c8 f0       	brcs	.+50     	; 0xb70 <check_isotime+0x198>
		printError(ERR_ISO, "check_isotime: invalid minutes");
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	76 ea       	ldi	r23, 0xA6	; 166
     b42:	8b e5       	ldi	r24, 0x5B	; 91
     b44:	92 e0       	ldi	r25, 0x02	; 2
     b46:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
     b4a:	83 e6       	ldi	r24, 0x63	; 99
     b4c:	24 c0       	rjmp	.+72     	; 0xb96 <check_isotime+0x1be>
	}
	for (i = 17; i < 19; i++) {
		sbuf[i-17] = isotime[i];
     b4e:	28 2f       	mov	r18, r24
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	f9 01       	movw	r30, r18
     b54:	71 97       	sbiw	r30, 0x11	; 17
     b56:	d8 01       	movw	r26, r16
     b58:	a2 0f       	add	r26, r18
     b5a:	b3 1f       	adc	r27, r19
     b5c:	9c 91       	ld	r25, X
     b5e:	21 e0       	ldi	r18, 0x01	; 1
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	2c 0f       	add	r18, r28
     b64:	3d 1f       	adc	r19, r29
     b66:	e2 0f       	add	r30, r18
     b68:	f3 1f       	adc	r31, r19
     b6a:	90 83       	st	Z, r25
	minutes = atoi(sbuf);
	if ((minutes < 0) || (minutes > 59)) {
		printError(ERR_ISO, "check_isotime: invalid minutes");
		return(ERROR);
	}
	for (i = 17; i < 19; i++) {
     b6c:	8f 5f       	subi	r24, 0xFF	; 255
     b6e:	01 c0       	rjmp	.+2      	; 0xb72 <check_isotime+0x19a>
     b70:	81 e1       	ldi	r24, 0x11	; 17
     b72:	83 31       	cpi	r24, 0x13	; 19
     b74:	60 f3       	brcs	.-40     	; 0xb4e <check_isotime+0x176>
		sbuf[i-17] = isotime[i];
	}
	sbuf[2] = '\0';
     b76:	1b 82       	std	Y+3, r1	; 0x03
	seconds = atoi(sbuf);
     b78:	ce 01       	movw	r24, r28
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	0e 94 1e 30 	call	0x603c	; 0x603c <atoi>
	if ((seconds < 0) || (seconds > 59)) {
     b80:	cc 97       	sbiw	r24, 0x3c	; 60
     b82:	40 f0       	brcs	.+16     	; 0xb94 <check_isotime+0x1bc>
		printError(ERR_ISO, "check_isotime: invalid seconds");
     b84:	66 e2       	ldi	r22, 0x26	; 38
     b86:	76 ea       	ldi	r23, 0xA6	; 166
     b88:	8b e5       	ldi	r24, 0x5B	; 91
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
     b90:	83 e6       	ldi	r24, 0x63	; 99
     b92:	01 c0       	rjmp	.+2      	; 0xb96 <check_isotime+0x1be>
	}
	return(NOERROR);
     b94:	80 e0       	ldi	r24, 0x00	; 0
}
     b96:	2a 96       	adiw	r28, 0x0a	; 10
     b98:	cd bf       	out	0x3d, r28	; 61
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	08 95       	ret

00000ba6 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	a0 97       	sbiw	r28, 0x20	; 32
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	de bf       	out	0x3e, r29	; 62

	const char format_ISO[] = "20%02x-%02x-%02xT%02x:%02x:%02x";
     bb8:	40 e2       	ldi	r20, 0x20	; 32
     bba:	e5 e4       	ldi	r30, 0x45	; 69
     bbc:	f6 ea       	ldi	r31, 0xA6	; 166
     bbe:	9e 01       	movw	r18, r28
     bc0:	2f 5f       	subi	r18, 0xFF	; 255
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	d9 01       	movw	r26, r18
     bc6:	01 90       	ld	r0, Z+
     bc8:	0d 92       	st	X+, r0
     bca:	4a 95       	dec	r20
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <convert_ds2iso+0x20>
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     bce:	fb 01       	movw	r30, r22
     bd0:	b0 81       	ld	r27, Z
	minutes = (*ds3231time++);
     bd2:	a1 81       	ldd	r26, Z+1	; 0x01
	hours = (*ds3231time++);
     bd4:	12 81       	ldd	r17, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     bd6:	04 81       	ldd	r16, Z+4	; 0x04
	month = (*ds3231time++);
     bd8:	55 81       	ldd	r21, Z+5	; 0x05
	year = (*ds3231time);
     bda:	46 81       	ldd	r20, Z+6	; 0x06

	sprintf(isotime, format_ISO, year, month, date, hours, minutes, seconds);
     bdc:	1f 92       	push	r1
     bde:	bf 93       	push	r27
     be0:	1f 92       	push	r1
     be2:	af 93       	push	r26
     be4:	1f 92       	push	r1
     be6:	1f 93       	push	r17
     be8:	1f 92       	push	r1
     bea:	0f 93       	push	r16
     bec:	1f 92       	push	r1
     bee:	5f 93       	push	r21
     bf0:	1f 92       	push	r1
     bf2:	4f 93       	push	r20
     bf4:	3f 93       	push	r19
     bf6:	2f 93       	push	r18
     bf8:	9f 93       	push	r25
     bfa:	8f 93       	push	r24
     bfc:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>

}
     c00:	cd bf       	out	0x3d, r28	; 61
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	a0 96       	adiw	r28, 0x20	; 32
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	08 95       	ret

00000c14 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     c14:	dc 01       	movw	r26, r24
     c16:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     c18:	81 89       	ldd	r24, Z+17	; 0x11
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	c0 97       	sbiw	r24, 0x30	; 48
     c1e:	82 95       	swap	r24
     c20:	92 95       	swap	r25
     c22:	90 7f       	andi	r25, 0xF0	; 240
     c24:	98 27       	eor	r25, r24
     c26:	80 7f       	andi	r24, 0xF0	; 240
     c28:	98 27       	eor	r25, r24
     c2a:	92 89       	ldd	r25, Z+18	; 0x12
     c2c:	90 53       	subi	r25, 0x30	; 48
     c2e:	89 2b       	or	r24, r25
     c30:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     c32:	86 85       	ldd	r24, Z+14	; 0x0e
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	c0 97       	sbiw	r24, 0x30	; 48
     c38:	82 95       	swap	r24
     c3a:	92 95       	swap	r25
     c3c:	90 7f       	andi	r25, 0xF0	; 240
     c3e:	98 27       	eor	r25, r24
     c40:	80 7f       	andi	r24, 0xF0	; 240
     c42:	98 27       	eor	r25, r24
     c44:	97 85       	ldd	r25, Z+15	; 0x0f
     c46:	90 53       	subi	r25, 0x30	; 48
     c48:	89 2b       	or	r24, r25
     c4a:	11 96       	adiw	r26, 0x01	; 1
     c4c:	8c 93       	st	X, r24
     c4e:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     c50:	83 85       	ldd	r24, Z+11	; 0x0b
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	c0 97       	sbiw	r24, 0x30	; 48
     c56:	82 95       	swap	r24
     c58:	92 95       	swap	r25
     c5a:	90 7f       	andi	r25, 0xF0	; 240
     c5c:	98 27       	eor	r25, r24
     c5e:	80 7f       	andi	r24, 0xF0	; 240
     c60:	98 27       	eor	r25, r24
     c62:	94 85       	ldd	r25, Z+12	; 0x0c
     c64:	90 53       	subi	r25, 0x30	; 48
     c66:	89 2b       	or	r24, r25
     c68:	12 96       	adiw	r26, 0x02	; 2
     c6a:	8c 93       	st	X, r24
     c6c:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	13 96       	adiw	r26, 0x03	; 3
     c72:	8c 93       	st	X, r24
     c74:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     c76:	80 85       	ldd	r24, Z+8	; 0x08
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	c0 97       	sbiw	r24, 0x30	; 48
     c7c:	82 95       	swap	r24
     c7e:	92 95       	swap	r25
     c80:	90 7f       	andi	r25, 0xF0	; 240
     c82:	98 27       	eor	r25, r24
     c84:	80 7f       	andi	r24, 0xF0	; 240
     c86:	98 27       	eor	r25, r24
     c88:	91 85       	ldd	r25, Z+9	; 0x09
     c8a:	90 53       	subi	r25, 0x30	; 48
     c8c:	89 2b       	or	r24, r25
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8c 93       	st	X, r24
     c92:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     c94:	25 81       	ldd	r18, Z+5	; 0x05
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	20 53       	subi	r18, 0x30	; 48
     c9a:	31 09       	sbc	r19, r1
     c9c:	22 95       	swap	r18
     c9e:	32 95       	swap	r19
     ca0:	30 7f       	andi	r19, 0xF0	; 240
     ca2:	32 27       	eor	r19, r18
     ca4:	20 7f       	andi	r18, 0xF0	; 240
     ca6:	32 27       	eor	r19, r18
     ca8:	86 81       	ldd	r24, Z+6	; 0x06
     caa:	80 53       	subi	r24, 0x30	; 48
     cac:	28 2b       	or	r18, r24
     cae:	15 96       	adiw	r26, 0x05	; 5
     cb0:	2c 93       	st	X, r18
     cb2:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     cb4:	22 81       	ldd	r18, Z+2	; 0x02
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	20 53       	subi	r18, 0x30	; 48
     cba:	31 09       	sbc	r19, r1
     cbc:	22 95       	swap	r18
     cbe:	32 95       	swap	r19
     cc0:	30 7f       	andi	r19, 0xF0	; 240
     cc2:	32 27       	eor	r19, r18
     cc4:	20 7f       	andi	r18, 0xF0	; 240
     cc6:	32 27       	eor	r19, r18
     cc8:	83 81       	ldd	r24, Z+3	; 0x03
     cca:	80 53       	subi	r24, 0x30	; 48
     ccc:	28 2b       	or	r18, r24
     cce:	16 96       	adiw	r26, 0x06	; 6
     cd0:	2c 93       	st	X, r18
     cd2:	08 95       	ret

00000cd4 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	7b 01       	movw	r14, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
     ce6:	c8 2f       	mov	r28, r24
     ce8:	83 36       	cpi	r24, 0x63	; 99
     cea:	19 f4       	brne	.+6      	; 0xcf2 <read_DS3231+0x1e>
		stop_TWI();
     cec:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(ERROR);
     cf0:	26 c0       	rjmp	.+76     	; 0xd3e <read_DS3231+0x6a>
    }  

	if (write_TWI(0x00) == ERROR) {	// Register 00h
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
     cf8:	c8 2f       	mov	r28, r24
     cfa:	83 36       	cpi	r24, 0x63	; 99
     cfc:	19 f4       	brne	.+6      	; 0xd04 <read_DS3231+0x30>
		stop_TWI();
     cfe:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(ERROR);
     d02:	1d c0       	rjmp	.+58     	; 0xd3e <read_DS3231+0x6a>
	}

	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
     d04:	61 e0       	ldi	r22, 0x01	; 1
     d06:	88 e6       	ldi	r24, 0x68	; 104
     d08:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
     d0c:	c8 2f       	mov	r28, r24
     d0e:	83 36       	cpi	r24, 0x63	; 99
     d10:	61 f4       	brne	.+24     	; 0xd2a <read_DS3231+0x56>
		stop_TWI();
     d12:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(ERROR);
     d16:	13 c0       	rjmp	.+38     	; 0xd3e <read_DS3231+0x6a>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     d18:	87 01       	movw	r16, r14
     d1a:	0c 0f       	add	r16, r28
     d1c:	11 1d       	adc	r17, r1
     d1e:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <read_TWI>
     d22:	f8 01       	movw	r30, r16
     d24:	80 83       	st	Z, r24
	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 6; i++) {
     d26:	cf 5f       	subi	r28, 0xFF	; 255
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <read_DS3231+0x58>
     d2a:	c0 e0       	ldi	r28, 0x00	; 0
     d2c:	c6 30       	cpi	r28, 0x06	; 6
     d2e:	a0 f3       	brcs	.-24     	; 0xd18 <read_DS3231+0x44>
		ds3231time[i] = read_TWI();
	}

	ds3231time[6] = readlast_TWI();
     d30:	0e 94 80 26 	call	0x4d00	; 0x4d00 <readlast_TWI>
     d34:	f7 01       	movw	r30, r14
     d36:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     d38:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>

	return(NOERROR);
     d3c:	c0 e0       	ldi	r28, 0x00	; 0

}
     d3e:	8c 2f       	mov	r24, r28
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	ff 90       	pop	r15
     d48:	ef 90       	pop	r14
     d4a:	08 95       	ret

00000d4c <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     d4c:	ef 92       	push	r14
     d4e:	ff 92       	push	r15
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	27 97       	sbiw	r28, 0x07	; 7
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (read_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     d62:	be 01       	movw	r22, r28
     d64:	6f 5f       	subi	r22, 0xFF	; 255
     d66:	7f 4f       	sbci	r23, 0xFF	; 255
     d68:	88 e6       	ldi	r24, 0x68	; 104
     d6a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <read_DS3231>
     d6e:	18 2f       	mov	r17, r24
     d70:	83 36       	cpi	r24, 0x63	; 99
     d72:	79 f4       	brne	.+30     	; 0xd92 <get_time+0x46>
		printError(ERR_GETTIME, "get_time DS3231");
     d74:	65 e6       	ldi	r22, 0x65	; 101
     d76:	76 ea       	ldi	r23, 0xA6	; 166
     d78:	85 e6       	ldi	r24, 0x65	; 101
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		strcpy(isotime, "DateTime?");
     d80:	8a e0       	ldi	r24, 0x0A	; 10
     d82:	e5 e7       	ldi	r30, 0x75	; 117
     d84:	f6 ea       	ldi	r31, 0xA6	; 166
     d86:	d7 01       	movw	r26, r14
     d88:	01 90       	ld	r0, Z+
     d8a:	0d 92       	st	X+, r0
     d8c:	8a 95       	dec	r24
     d8e:	e1 f7       	brne	.-8      	; 0xd88 <get_time+0x3c>
		return(ERROR);
     d90:	07 c0       	rjmp	.+14     	; 0xda0 <get_time+0x54>
	}

	convert_ds2iso(isotime, ds3231time);
     d92:	be 01       	movw	r22, r28
     d94:	6f 5f       	subi	r22, 0xFF	; 255
     d96:	7f 4f       	sbci	r23, 0xFF	; 255
     d98:	c7 01       	movw	r24, r14
     d9a:	0e 94 d3 05 	call	0xba6	; 0xba6 <convert_ds2iso>
	return(NOERROR);
     d9e:	10 e0       	ldi	r17, 0x00	; 0

}
     da0:	81 2f       	mov	r24, r17
     da2:	27 96       	adiw	r28, 0x07	; 7
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	ff 90       	pop	r15
     db0:	ef 90       	pop	r14
     db2:	08 95       	ret

00000db4 <write_DS3231>:
	Returns:
		ERROR for TWI start error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	8b 01       	movw	r16, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
     dc8:	c8 2f       	mov	r28, r24
     dca:	83 36       	cpi	r24, 0x63	; 99
     dcc:	19 f4       	brne	.+6      	; 0xdd4 <write_DS3231+0x20>
		stop_TWI();
     dce:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(ERROR);
     dd2:	20 c0       	rjmp	.+64     	; 0xe14 <write_DS3231+0x60>
	}

	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
     dda:	c8 2f       	mov	r28, r24
     ddc:	83 36       	cpi	r24, 0x63	; 99
     dde:	a1 f4       	brne	.+40     	; 0xe08 <write_DS3231+0x54>
		stop_TWI();
     de0:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(ERROR);
     de4:	17 c0       	rjmp	.+46     	; 0xe14 <write_DS3231+0x60>
	}

	for (i = 0; i < 7; i++) {
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     de6:	78 01       	movw	r14, r16
     de8:	8f ef       	ldi	r24, 0xFF	; 255
     dea:	e8 1a       	sub	r14, r24
     dec:	f8 0a       	sbc	r15, r24
     dee:	f8 01       	movw	r30, r16
     df0:	80 81       	ld	r24, Z
     df2:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
     df6:	c8 2f       	mov	r28, r24
     df8:	83 36       	cpi	r24, 0x63	; 99
     dfa:	19 f4       	brne	.+6      	; 0xe02 <write_DS3231+0x4e>
			stop_TWI();
     dfc:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
			return(ERROR);
     e00:	09 c0       	rjmp	.+18     	; 0xe14 <write_DS3231+0x60>
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     e02:	df 5f       	subi	r29, 0xFF	; 255
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     e04:	87 01       	movw	r16, r14
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <write_DS3231+0x56>
     e08:	d0 e0       	ldi	r29, 0x00	; 0
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     e0a:	d7 30       	cpi	r29, 0x07	; 7
     e0c:	60 f3       	brcs	.-40     	; 0xde6 <write_DS3231+0x32>
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
			stop_TWI();
			return(ERROR);
		}
	}
	stop_TWI();
     e0e:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>

	return(NOERROR);
     e12:	c0 e0       	ldi	r28, 0x00	; 0

}
     e14:	8c 2f       	mov	r24, r28
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	ff 90       	pop	r15
     e20:	ef 90       	pop	r14
     e22:	08 95       	ret

00000e24 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     e24:	ef 92       	push	r14
     e26:	ff 92       	push	r15
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	27 97       	sbiw	r28, 0x07	; 7
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (check_isotime(isotime) == ERROR) {
     e3a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <check_isotime>
     e3e:	18 2f       	mov	r17, r24
     e40:	83 36       	cpi	r24, 0x63	; 99
     e42:	39 f4       	brne	.+14     	; 0xe52 <put_time+0x2e>
		printError(ERR_ISO, "put_time: check_isotime error");
     e44:	6f e7       	ldi	r22, 0x7F	; 127
     e46:	76 ea       	ldi	r23, 0xA6	; 166
     e48:	8b e5       	ldi	r24, 0x5B	; 91
     e4a:	92 e0       	ldi	r25, 0x02	; 2
     e4c:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
     e50:	16 c0       	rjmp	.+44     	; 0xe7e <put_time+0x5a>
	}
	convert_iso2ds(ds3231time, isotime);
     e52:	b7 01       	movw	r22, r14
     e54:	ce 01       	movw	r24, r28
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	0e 94 0a 06 	call	0xc14	; 0xc14 <convert_iso2ds>
	if (write_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     e5c:	be 01       	movw	r22, r28
     e5e:	6f 5f       	subi	r22, 0xFF	; 255
     e60:	7f 4f       	sbci	r23, 0xFF	; 255
     e62:	88 e6       	ldi	r24, 0x68	; 104
     e64:	0e 94 da 06 	call	0xdb4	; 0xdb4 <write_DS3231>
     e68:	18 2f       	mov	r17, r24
     e6a:	83 36       	cpi	r24, 0x63	; 99
     e6c:	39 f4       	brne	.+14     	; 0xe7c <put_time+0x58>
		printError(ERR_PUTTIME, "put_time: write_DS3231 error");
     e6e:	6d e9       	ldi	r22, 0x9D	; 157
     e70:	76 ea       	ldi	r23, 0xA6	; 166
     e72:	86 e6       	ldi	r24, 0x66	; 102
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <put_time+0x5a>
	}
	return(NOERROR);
     e7c:	10 e0       	ldi	r17, 0x00	; 0

}
     e7e:	81 2f       	mov	r24, r17
     e80:	27 96       	adiw	r28, 0x07	; 7
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	1f 91       	pop	r17
     e8c:	ff 90       	pop	r15
     e8e:	ef 90       	pop	r14
     e90:	08 95       	ret

00000e92 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     e92:	45 e1       	ldi	r20, 0x15	; 21
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	6b e0       	ldi	r22, 0x0B	; 11
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	0e 94 3c 32 	call	0x6478	; 0x6478 <eeprom_read_block>
     e9e:	08 95       	ret

00000ea0 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     ea0:	4b e0       	ldi	r20, 0x0B	; 11
     ea2:	50 e0       	ldi	r21, 0x00	; 0
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	0e 94 3c 32 	call	0x6478	; 0x6478 <eeprom_read_block>
     eac:	08 95       	ret

00000eae <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	65 97       	sbiw	r28, 0x15	; 21
     eb8:	cd bf       	out	0x3d, r28	; 61
     eba:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     ebc:	ce 01       	movw	r24, r28
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     ec4:	45 e1       	ldi	r20, 0x15	; 21
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	6b e0       	ldi	r22, 0x0B	; 11
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	ce 01       	movw	r24, r28
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	0e 94 40 32 	call	0x6480	; 0x6480 <eeprom_update_block>

}
     ed4:	65 96       	adiw	r28, 0x15	; 21
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <update_VERSION>:

void update_VERSION(void)
{
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	2b 97       	sbiw	r28, 0x0b	; 11
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     eee:	8b e0       	ldi	r24, 0x0B	; 11
     ef0:	ea eb       	ldi	r30, 0xBA	; 186
     ef2:	f6 ea       	ldi	r31, 0xA6	; 166
     ef4:	de 01       	movw	r26, r28
     ef6:	11 96       	adiw	r26, 0x01	; 1
     ef8:	01 90       	ld	r0, Z+
     efa:	0d 92       	st	X+, r0
     efc:	8a 95       	dec	r24
     efe:	e1 f7       	brne	.-8      	; 0xef8 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     f00:	4b e0       	ldi	r20, 0x0B	; 11
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	ce 01       	movw	r24, r28
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	0e 94 40 32 	call	0x6480	; 0x6480 <eeprom_update_block>

}
     f10:	2b 96       	adiw	r28, 0x0b	; 11
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     f1c:	0e 94 57 07 	call	0xeae	; 0xeae <update_BOOTTIME>
	update_VERSION();
     f20:	0e 94 70 07 	call	0xee0	; 0xee0 <update_VERSION>
     f24:	08 95       	ret

00000f26 <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	c8 50       	subi	r28, 0x08	; 8
     f34:	d1 40       	sbci	r29, 0x01	; 1
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char errorFormat[] = "ERR,%d,%s";
     f3a:	2a e0       	ldi	r18, 0x0A	; 10
     f3c:	e5 ec       	ldi	r30, 0xC5	; 197
     f3e:	f6 ea       	ldi	r31, 0xA6	; 166
     f40:	de 01       	movw	r26, r28
     f42:	a1 50       	subi	r26, 0x01	; 1
     f44:	bf 4f       	sbci	r27, 0xFF	; 255
     f46:	01 90       	ld	r0, Z+
     f48:	0d 92       	st	X+, r0
     f4a:	2a 95       	dec	r18
     f4c:	e1 f7       	brne	.-8      	; 0xf46 <printError+0x20>

squelchErrors=NO;
     f4e:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <squelchErrors>
	if (!squelchErrors) {
     f52:	20 91 0b 28 	lds	r18, 0x280B	; 0x80280b <squelchErrors>
     f56:	21 11       	cpse	r18, r1
     f58:	15 c0       	rjmp	.+42     	; 0xf84 <printError+0x5e>
		sprintf(strbuf, errorFormat, errorNumber, errorString);
     f5a:	7f 93       	push	r23
     f5c:	6f 93       	push	r22
     f5e:	9f 93       	push	r25
     f60:	8f 93       	push	r24
     f62:	ce 01       	movw	r24, r28
     f64:	81 50       	subi	r24, 0x01	; 1
     f66:	9f 4f       	sbci	r25, 0xFF	; 255
     f68:	9f 93       	push	r25
     f6a:	8f 93       	push	r24
     f6c:	8e 01       	movw	r16, r28
     f6e:	0f 5f       	subi	r16, 0xFF	; 255
     f70:	1f 4f       	sbci	r17, 0xFF	; 255
     f72:	1f 93       	push	r17
     f74:	0f 93       	push	r16
     f76:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
		printLine(strbuf);
     f7a:	c8 01       	movw	r24, r16
     f7c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
     f80:	cd bf       	out	0x3d, r28	; 61
     f82:	de bf       	out	0x3e, r29	; 62
	}

}
     f84:	c8 5f       	subi	r28, 0xF8	; 248
     f86:	de 4f       	sbci	r29, 0xFE	; 254
     f88:	cd bf       	out	0x3d, r28	; 61
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	08 95       	ret

00000f96 <read_FRAM>:
	Returns:
		ERROR on start_TWI error (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     f96:	cf 92       	push	r12
     f98:	df 92       	push	r13
     f9a:	ef 92       	push	r14
     f9c:	ff 92       	push	r15
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	d8 2f       	mov	r29, r24
     fa8:	d6 2e       	mov	r13, r22
     faa:	07 2f       	mov	r16, r23
     fac:	7a 01       	movw	r14, r20
     fae:	12 2f       	mov	r17, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if (start_TWI(addr, TWIWRITE) == ERROR) {		// TWI start
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
     fb6:	c8 2f       	mov	r28, r24
     fb8:	83 36       	cpi	r24, 0x63	; 99
     fba:	19 f4       	brne	.+6      	; 0xfc2 <read_FRAM+0x2c>
		stop_TWI();
     fbc:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(ERROR);
     fc0:	2e c0       	rjmp	.+92     	; 0x101e <read_FRAM+0x88>
	}

	if (write_TWI(memhigh) == ERROR) {			// Send memory address
     fc2:	80 2f       	mov	r24, r16
     fc4:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
     fc8:	c8 2f       	mov	r28, r24
     fca:	83 36       	cpi	r24, 0x63	; 99
     fcc:	41 f1       	breq	.+80     	; 0x101e <read_FRAM+0x88>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {
     fce:	8d 2d       	mov	r24, r13
     fd0:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
     fd4:	c8 2f       	mov	r28, r24
     fd6:	83 36       	cpi	r24, 0x63	; 99
     fd8:	11 f1       	breq	.+68     	; 0x101e <read_FRAM+0x88>
		return(ERROR);
	}

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	8d 2f       	mov	r24, r29
     fde:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
     fe2:	c8 2f       	mov	r28, r24
     fe4:	83 36       	cpi	r24, 0x63	; 99
     fe6:	d9 f0       	breq	.+54     	; 0x101e <read_FRAM+0x88>
     fe8:	c0 e0       	ldi	r28, 0x00	; 0
     fea:	08 c0       	rjmp	.+16     	; 0xffc <read_FRAM+0x66>
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     fec:	67 01       	movw	r12, r14
     fee:	cc 0e       	add	r12, r28
     ff0:	d1 1c       	adc	r13, r1
     ff2:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <read_TWI>
     ff6:	f6 01       	movw	r30, r12
     ff8:	80 83       	st	Z, r24

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
     ffa:	cf 5f       	subi	r28, 0xFF	; 255
     ffc:	2c 2f       	mov	r18, r28
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 2f       	mov	r24, r17
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	28 17       	cp	r18, r24
    1008:	39 07       	cpc	r19, r25
    100a:	84 f3       	brlt	.-32     	; 0xfec <read_FRAM+0x56>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
    100c:	ec 01       	movw	r28, r24
    100e:	ce 0d       	add	r28, r14
    1010:	df 1d       	adc	r29, r15
    1012:	0e 94 80 26 	call	0x4d00	; 0x4d00 <readlast_TWI>
    1016:	88 83       	st	Y, r24

	stop_TWI();
    1018:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>

	return(NOERROR);
    101c:	c0 e0       	ldi	r28, 0x00	; 0

}
    101e:	8c 2f       	mov	r24, r28
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	08 95       	ret

00001032 <get_SETTIME>:
	Input: None
	Output: The data from FRAM, presumably containing the time
	Returns: ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t get_SETTIME(char *lastsettime)
{
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	2a 97       	sbiw	r28, 0x0a	; 10
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	7c 01       	movw	r14, r24

	const char timeset[] = "Time Set?";
    1048:	8a e0       	ldi	r24, 0x0A	; 10
    104a:	ef ec       	ldi	r30, 0xCF	; 207
    104c:	f6 ea       	ldi	r31, 0xA6	; 166
    104e:	de 01       	movw	r26, r28
    1050:	11 96       	adiw	r26, 0x01	; 1
    1052:	01 90       	ld	r0, Z+
    1054:	0d 92       	st	X+, r0
    1056:	8a 95       	dec	r24
    1058:	e1 f7       	brne	.-8      	; 0x1052 <get_SETTIME+0x20>
	if (read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, ISOTIMELEN) == ERROR) {;
    105a:	24 e1       	ldi	r18, 0x14	; 20
    105c:	a7 01       	movw	r20, r14
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	80 e5       	ldi	r24, 0x50	; 80
    1064:	0e 94 cb 07 	call	0xf96	; 0xf96 <read_FRAM>
    1068:	18 2f       	mov	r17, r24
    106a:	83 36       	cpi	r24, 0x63	; 99
    106c:	39 f4       	brne	.+14     	; 0x107c <get_SETTIME+0x4a>
		strcpy(lastsettime, timeset);
    106e:	be 01       	movw	r22, r28
    1070:	6f 5f       	subi	r22, 0xFF	; 255
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	c7 01       	movw	r24, r14
    1076:	0e 94 51 31 	call	0x62a2	; 0x62a2 <strcpy>
		return(ERROR);
    107a:	01 c0       	rjmp	.+2      	; 0x107e <get_SETTIME+0x4c>
	}
	return(NOERROR);
    107c:	10 e0       	ldi	r17, 0x00	; 0
}
    107e:	81 2f       	mov	r24, r17
    1080:	2a 96       	adiw	r28, 0x0a	; 10
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	08 95       	ret

00001092 <write_FRAM>:
	Returns:
		ERROR if start_TWI fails (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
    1092:	ef 92       	push	r14
    1094:	ff 92       	push	r15
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	f6 2e       	mov	r15, r22
    10a0:	17 2f       	mov	r17, r23
    10a2:	ea 01       	movw	r28, r20
    10a4:	02 2f       	mov	r16, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if (start_TWI(addr, TWIWRITE) == ERROR) {	// TWI START
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
    10ac:	83 36       	cpi	r24, 0x63	; 99
    10ae:	e1 f0       	breq	.+56     	; 0x10e8 <write_FRAM+0x56>
		return(ERROR);
	}

	if (write_TWI(memhigh) == ERROR) {			// FRAM address to write
    10b0:	81 2f       	mov	r24, r17
    10b2:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
    10b6:	83 36       	cpi	r24, 0x63	; 99
    10b8:	b9 f0       	breq	.+46     	; 0x10e8 <write_FRAM+0x56>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
    10ba:	8f 2d       	mov	r24, r15
    10bc:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
    10c0:	83 36       	cpi	r24, 0x63	; 99
    10c2:	91 f0       	breq	.+36     	; 0x10e8 <write_FRAM+0x56>
    10c4:	10 e0       	ldi	r17, 0x00	; 0
    10c6:	0b c0       	rjmp	.+22     	; 0x10de <write_FRAM+0x4c>
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    10c8:	7e 01       	movw	r14, r28
    10ca:	8f ef       	ldi	r24, 0xFF	; 255
    10cc:	e8 1a       	sub	r14, r24
    10ce:	f8 0a       	sbc	r15, r24
    10d0:	88 81       	ld	r24, Y
    10d2:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
    10d6:	83 36       	cpi	r24, 0x63	; 99
    10d8:	39 f0       	breq	.+14     	; 0x10e8 <write_FRAM+0x56>
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    10da:	1f 5f       	subi	r17, 0xFF	; 255
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    10dc:	e7 01       	movw	r28, r14
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    10de:	10 17       	cp	r17, r16
    10e0:	98 f3       	brcs	.-26     	; 0x10c8 <write_FRAM+0x36>
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
			return(ERROR);
		}
	}

	stop_TWI();
    10e2:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>

	return(NOERROR);
    10e6:	80 e0       	ldi	r24, 0x00	; 0

}
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	08 95       	ret

000010f6 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
    10f6:	8f 92       	push	r8
    10f8:	9f 92       	push	r9
    10fa:	af 92       	push	r10
    10fc:	bf 92       	push	r11
    10fe:	cf 92       	push	r12
    1100:	df 92       	push	r13
    1102:	ef 92       	push	r14
    1104:	ff 92       	push	r15
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	00 d0       	rcall	.+0      	; 0x1110 <get_humidity+0x1a>
    1110:	00 d0       	rcall	.+0      	; 0x1112 <get_humidity+0x1c>
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62

	uint8_t adcpin;
	float voltage, humidity, temperature;

	switch (sensor) {
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	59 f0       	breq	.+22     	; 0x1130 <get_humidity+0x3a>
    111a:	18 f0       	brcs	.+6      	; 0x1122 <get_humidity+0x2c>
    111c:	82 30       	cpi	r24, 0x02	; 2
    111e:	79 f0       	breq	.+30     	; 0x113e <get_humidity+0x48>
    1120:	15 c0       	rjmp	.+42     	; 0x114c <get_humidity+0x56>
		case 0:
			temperature = get_temperature(0);
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	0e 94 7d 25 	call	0x4afa	; 0x4afa <get_temperature>
    1128:	6b 01       	movw	r12, r22
    112a:	7c 01       	movw	r14, r24
			adcpin = AIN0;		// production
    112c:	40 e4       	ldi	r20, 0x40	; 64
			break;
    112e:	17 c0       	rjmp	.+46     	; 0x115e <get_humidity+0x68>

		case 1:
			temperature = get_temperature(1);
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	0e 94 7d 25 	call	0x4afa	; 0x4afa <get_temperature>
    1136:	6b 01       	movw	r12, r22
    1138:	7c 01       	movw	r14, r24
			adcpin = AIN1;
    113a:	40 e5       	ldi	r20, 0x50	; 80
			break;
    113c:	10 c0       	rjmp	.+32     	; 0x115e <get_humidity+0x68>

		case 2:
			temperature = get_temperature(2);
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	0e 94 7d 25 	call	0x4afa	; 0x4afa <get_temperature>
    1144:	6b 01       	movw	r12, r22
    1146:	7c 01       	movw	r14, r24
			adcpin = AIN2;
    1148:	40 e6       	ldi	r20, 0x60	; 96
			break;
    114a:	09 c0       	rjmp	.+18     	; 0x115e <get_humidity+0x68>

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
    114c:	0f 2e       	mov	r0, r31
    114e:	c1 2c       	mov	r12, r1
    1150:	d1 2c       	mov	r13, r1
    1152:	f0 ea       	ldi	r31, 0xA0	; 160
    1154:	ef 2e       	mov	r14, r31
    1156:	f1 e4       	ldi	r31, 0x41	; 65
    1158:	ff 2e       	mov	r15, r31
    115a:	f0 2d       	mov	r31, r0
			adcpin = AIN2;
			break;

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
    115c:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
    115e:	8e 01       	movw	r16, r28
    1160:	0f 5f       	subi	r16, 0xFF	; 255
    1162:	1f 4f       	sbci	r17, 0xFF	; 255
    1164:	20 e8       	ldi	r18, 0x80	; 128
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	88 e4       	ldi	r24, 0x48	; 72
    116a:	0e 94 c8 01 	call	0x390	; 0x390 <read_ADS1115>
    116e:	83 36       	cpi	r24, 0x63	; 99
    1170:	89 f1       	breq	.+98     	; 0x11d4 <get_humidity+0xde>
		humidity = BADFLOAT;
	}
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 ea       	ldi	r20, 0xA0	; 160
    1178:	50 e4       	ldi	r21, 0x40	; 64
    117a:	69 81       	ldd	r22, Y+1	; 0x01
    117c:	7a 81       	ldd	r23, Y+2	; 0x02
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	0e 94 1b 2a 	call	0x5436	; 0x5436 <__divsf3>
    1186:	2a e0       	ldi	r18, 0x0A	; 10
    1188:	37 ed       	ldi	r19, 0xD7	; 215
    118a:	43 e2       	ldi	r20, 0x23	; 35
    118c:	5e e3       	ldi	r21, 0x3E	; 62
    118e:	0e 94 a9 29 	call	0x5352	; 0x5352 <__subsf3>
    1192:	2f e5       	ldi	r18, 0x5F	; 95
    1194:	39 e2       	ldi	r19, 0x29	; 41
    1196:	4b ec       	ldi	r20, 0xCB	; 203
    1198:	5b e3       	ldi	r21, 0x3B	; 59
    119a:	0e 94 1b 2a 	call	0x5436	; 0x5436 <__divsf3>
    119e:	4b 01       	movw	r8, r22
    11a0:	5c 01       	movw	r10, r24
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
    11a2:	29 ec       	ldi	r18, 0xC9	; 201
    11a4:	3e e8       	ldi	r19, 0x8E	; 142
    11a6:	4d e0       	ldi	r20, 0x0D	; 13
    11a8:	5b e3       	ldi	r21, 0x3B	; 59
    11aa:	c7 01       	movw	r24, r14
    11ac:	b6 01       	movw	r22, r12
    11ae:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
    11b2:	9b 01       	movw	r18, r22
    11b4:	ac 01       	movw	r20, r24
    11b6:	62 e2       	ldi	r22, 0x22	; 34
    11b8:	7d ef       	ldi	r23, 0xFD	; 253
    11ba:	86 e8       	ldi	r24, 0x86	; 134
    11bc:	9f e3       	ldi	r25, 0x3F	; 63
    11be:	0e 94 a9 29 	call	0x5352	; 0x5352 <__subsf3>
    11c2:	9b 01       	movw	r18, r22
    11c4:	ac 01       	movw	r20, r24
    11c6:	c5 01       	movw	r24, r10
    11c8:	b4 01       	movw	r22, r8
    11ca:	0e 94 1b 2a 	call	0x5436	; 0x5436 <__divsf3>
    11ce:	6b 01       	movw	r12, r22
    11d0:	7c 01       	movw	r14, r24
    11d2:	09 c0       	rjmp	.+18     	; 0x11e6 <get_humidity+0xf0>
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
		humidity = BADFLOAT;
    11d4:	0f 2e       	mov	r0, r31
    11d6:	c1 2c       	mov	r12, r1
    11d8:	f0 e8       	ldi	r31, 0x80	; 128
    11da:	df 2e       	mov	r13, r31
    11dc:	f6 e2       	ldi	r31, 0x26	; 38
    11de:	ef 2e       	mov	r14, r31
    11e0:	f4 ec       	ldi	r31, 0xC4	; 196
    11e2:	ff 2e       	mov	r15, r31
    11e4:	f0 2d       	mov	r31, r0
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
	}

	if (humidity < 0.0) {
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	a9 01       	movw	r20, r18
    11ec:	c7 01       	movw	r24, r14
    11ee:	b6 01       	movw	r22, r12
    11f0:	0e 94 16 2a 	call	0x542c	; 0x542c <__cmpsf2>
    11f4:	88 23       	and	r24, r24
    11f6:	4c f4       	brge	.+18     	; 0x120a <get_humidity+0x114>
		humidity = BADFLOAT;
    11f8:	0f 2e       	mov	r0, r31
    11fa:	c1 2c       	mov	r12, r1
    11fc:	f0 e8       	ldi	r31, 0x80	; 128
    11fe:	df 2e       	mov	r13, r31
    1200:	f6 e2       	ldi	r31, 0x26	; 38
    1202:	ef 2e       	mov	r14, r31
    1204:	f4 ec       	ldi	r31, 0xC4	; 196
    1206:	ff 2e       	mov	r15, r31
    1208:	f0 2d       	mov	r31, r0
	}

	return(humidity);

}
    120a:	c7 01       	movw	r24, r14
    120c:	b6 01       	movw	r22, r12
    120e:	24 96       	adiw	r28, 0x04	; 4
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	ff 90       	pop	r15
    121e:	ef 90       	pop	r14
    1220:	df 90       	pop	r13
    1222:	cf 90       	pop	r12
    1224:	bf 90       	pop	r11
    1226:	af 90       	pop	r10
    1228:	9f 90       	pop	r9
    122a:	8f 90       	pop	r8
    122c:	08 95       	ret

0000122e <initialize>:
#include "initialize.h"

uint8_t rebootackd;

void initialize(void)
{
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	2b 97       	sbiw	r28, 0x0b	; 11
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	rebootackd = NO;
    123c:	10 92 0c 28 	sts	0x280C, r1	; 0x80280c <rebootackd>
	timerOLED = 0;					// See oled.h
    1240:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerOLED>
    1244:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <timerOLED+0x1>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
    1248:	80 ee       	ldi	r24, 0xE0	; 224
    124a:	91 e0       	ldi	r25, 0x01	; 1
    124c:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
    1250:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>

	init_PORTS();
    1254:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <init_PORTS>
	init_TWI();
    1258:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <init_TWI>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
    125c:	80 e2       	ldi	r24, 0x20	; 32
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <init_RTC>
	init_MMA8451();	// Accelerometer; needs TWI
    1264:	0e 94 c7 0b 	call	0x178e	; 0x178e <init_MMA8451>
	init_OLED();	// Needs TWI
    1268:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <init_OLED>
	init_EEPROM();	// Needs TWI to get boot time from clock
    126c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <init_EEPROM>
	init_USART();
    1270:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <init_USART>
	start_TCB0(1);	// 1 ms ticks for TWI & USART timeouts
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <start_TCB0>
	sei();
    127c:	78 94       	sei

	init_MOTORS();	// Needs USART & interrupts on
    127e:	0e 94 a6 24 	call	0x494c	; 0x494c <init_MOTORS>
	get_VERSION(versionstr);
    1282:	ce 01       	movw	r24, r28
    1284:	01 96       	adiw	r24, 0x01	; 1
    1286:	0e 94 50 07 	call	0xea0	; 0xea0 <get_VERSION>
	writestr_OLED(0,"specMech Version", 1);
    128a:	41 e0       	ldi	r20, 0x01	; 1
    128c:	69 ed       	ldi	r22, 0xD9	; 217
    128e:	76 ea       	ldi	r23, 0xA6	; 166
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <writestr_OLED>
	writestr_OLED(0, versionstr, 2);
    1296:	42 e0       	ldi	r20, 0x02	; 2
    1298:	be 01       	movw	r22, r28
    129a:	6f 5f       	subi	r22, 0xFF	; 255
    129c:	7f 4f       	sbci	r23, 0xFF	; 255
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <writestr_OLED>

}
    12a4:	2b 96       	adiw	r28, 0x0b	; 11
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	08 95       	ret

000012b0 <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
    12b0:	cf 92       	push	r12
    12b2:	df 92       	push	r13
    12b4:	ef 92       	push	r14
    12b6:	ff 92       	push	r15
    12b8:	0f 93       	push	r16
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <read_ionpump+0x12>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <read_ionpump+0x14>
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	21 f0       	breq	.+8      	; 0x12d4 <read_ionpump+0x24>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
    12cc:	82 30       	cpi	r24, 0x02	; 2
    12ce:	c1 f5       	brne	.+112    	; 0x1340 <read_ionpump+0x90>
		pins = AIN23;
    12d0:	40 e3       	ldi	r20, 0x30	; 48
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <read_ionpump+0x26>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
    12d4:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(BADFLOAT);
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
    12d6:	8e 01       	movw	r16, r28
    12d8:	0f 5f       	subi	r16, 0xFF	; 255
    12da:	1f 4f       	sbci	r17, 0xFF	; 255
    12dc:	20 e8       	ldi	r18, 0x80	; 128
    12de:	62 e0       	ldi	r22, 0x02	; 2
    12e0:	89 e4       	ldi	r24, 0x49	; 73
    12e2:	0e 94 c8 01 	call	0x390	; 0x390 <read_ADS1115>
    12e6:	83 36       	cpi	r24, 0x63	; 99
    12e8:	81 f1       	breq	.+96     	; 0x134a <read_ionpump+0x9a>
		return(BADFLOAT);
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
    12ea:	c9 80       	ldd	r12, Y+1	; 0x01
    12ec:	da 80       	ldd	r13, Y+2	; 0x02
    12ee:	eb 80       	ldd	r14, Y+3	; 0x03
    12f0:	fc 80       	ldd	r15, Y+4	; 0x04
    12f2:	2d ec       	ldi	r18, 0xCD	; 205
    12f4:	3c ec       	ldi	r19, 0xCC	; 204
    12f6:	4c ec       	ldi	r20, 0xCC	; 204
    12f8:	5e e3       	ldi	r21, 0x3E	; 62
    12fa:	c7 01       	movw	r24, r14
    12fc:	b6 01       	movw	r22, r12
    12fe:	0e 94 16 2a 	call	0x542c	; 0x542c <__cmpsf2>
    1302:	88 23       	and	r24, r24
    1304:	3c f1       	brlt	.+78     	; 0x1354 <read_ionpump+0xa4>
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	50 e4       	ldi	r21, 0x40	; 64
    130e:	c7 01       	movw	r24, r14
    1310:	b6 01       	movw	r22, r12
    1312:	0e 94 75 2b 	call	0x56ea	; 0x56ea <__gesf2>
    1316:	18 16       	cp	r1, r24
    1318:	14 f1       	brlt	.+68     	; 0x135e <read_ionpump+0xae>
		return(BADFLOAT);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    131a:	29 e7       	ldi	r18, 0x79	; 121
    131c:	39 ee       	ldi	r19, 0xE9	; 233
    131e:	42 e0       	ldi	r20, 0x02	; 2
    1320:	50 e4       	ldi	r21, 0x40	; 64
    1322:	c7 01       	movw	r24, r14
    1324:	b6 01       	movw	r22, r12
    1326:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
    132a:	2e e6       	ldi	r18, 0x6E	; 110
    132c:	33 ea       	ldi	r19, 0xA3	; 163
    132e:	4b ed       	ldi	r20, 0xDB	; 219
    1330:	50 e4       	ldi	r21, 0x40	; 64
    1332:	0e 94 a9 29 	call	0x5352	; 0x5352 <__subsf3>
	return(vacuum);
    1336:	56 2f       	mov	r21, r22
    1338:	47 2f       	mov	r20, r23
    133a:	38 2f       	mov	r19, r24
    133c:	29 2f       	mov	r18, r25
    133e:	13 c0       	rjmp	.+38     	; 0x1366 <read_ionpump+0xb6>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(BADFLOAT);
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	40 e8       	ldi	r20, 0x80	; 128
    1344:	36 e2       	ldi	r19, 0x26	; 38
    1346:	24 ec       	ldi	r18, 0xC4	; 196
    1348:	0e c0       	rjmp	.+28     	; 0x1366 <read_ionpump+0xb6>
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
		return(BADFLOAT);
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	40 e8       	ldi	r20, 0x80	; 128
    134e:	36 e2       	ldi	r19, 0x26	; 38
    1350:	24 ec       	ldi	r18, 0xC4	; 196
    1352:	09 c0       	rjmp	.+18     	; 0x1366 <read_ionpump+0xb6>
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
    1354:	50 e0       	ldi	r21, 0x00	; 0
    1356:	40 e8       	ldi	r20, 0x80	; 128
    1358:	36 e2       	ldi	r19, 0x26	; 38
    135a:	24 ec       	ldi	r18, 0xC4	; 196
    135c:	04 c0       	rjmp	.+8      	; 0x1366 <read_ionpump+0xb6>
	} else if (voltage > 2.0) {
		return(BADFLOAT);
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	40 e8       	ldi	r20, 0x80	; 128
    1362:	36 e2       	ldi	r19, 0x26	; 38
    1364:	24 ec       	ldi	r18, 0xC4	; 196
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
    1366:	65 2f       	mov	r22, r21
    1368:	74 2f       	mov	r23, r20
    136a:	83 2f       	mov	r24, r19
    136c:	92 2f       	mov	r25, r18
    136e:	24 96       	adiw	r28, 0x04	; 4
    1370:	cd bf       	out	0x3d, r28	; 61
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	ff 90       	pop	r15
    137e:	ef 90       	pop	r14
    1380:	df 90       	pop	r13
    1382:	cf 90       	pop	r12
    1384:	08 95       	ret

00001386 <main>:
void read_PNEUSensors(char*, char*, char*, char*);	//TESTING

int main(void)
{

	firstpass = YES;		// Set to NO in commands.c
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	80 93 15 2a 	sts	0x2A15, r24	; 0x802a15 <firstpass>
//	squelchErrors = YES;	// Don't need this?
	initialize();
    138c:	0e 94 17 09 	call	0x122e	; 0x122e <initialize>
	squelchErrors = NO;
    1390:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <squelchErrors>

	for (;;) {
		if (recv0_buf.done) {
    1394:	80 91 42 2c 	lds	r24, 0x2C42	; 0x802c42 <recv0_buf+0x103>
    1398:	88 23       	and	r24, r24
    139a:	21 f0       	breq	.+8      	; 0x13a4 <main+0x1e>
			recv0_buf.done = NO;
    139c:	10 92 42 2c 	sts	0x2C42, r1	; 0x802c42 <recv0_buf+0x103>
			commands();
    13a0:	0e 94 5e 04 	call	0x8bc	; 0x8bc <commands>
		}
		if (timerOLED > timeoutOLED) {	// Display timeout
    13a4:	20 91 16 2a 	lds	r18, 0x2A16	; 0x802a16 <timerOLED>
    13a8:	30 91 17 2a 	lds	r19, 0x2A17	; 0x802a17 <timerOLED+0x1>
    13ac:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <timeoutOLED>
    13b0:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <timeoutOLED+0x1>
    13b4:	82 17       	cp	r24, r18
    13b6:	93 07       	cpc	r25, r19
    13b8:	78 f4       	brcc	.+30     	; 0x13d8 <main+0x52>
			squelchErrors = YES;
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <squelchErrors>
			clear_OLED(0);
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <clear_OLED>
			clear_OLED(1);
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <clear_OLED>
			timerOLED = 0;
    13cc:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerOLED>
    13d0:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <timerOLED+0x1>
			squelchErrors = NO;
    13d4:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <squelchErrors>
		} if ((timerSAVEENCODER > timeoutSAVEENCODER) && rebootackd) {
    13d8:	90 91 3a 2a 	lds	r25, 0x2A3A	; 0x802a3a <timerSAVEENCODER>
    13dc:	80 91 39 2a 	lds	r24, 0x2A39	; 0x802a39 <timeoutSAVEENCODER>
    13e0:	89 17       	cp	r24, r25
    13e2:	c0 f6       	brcc	.-80     	; 0x1394 <main+0xe>
    13e4:	80 91 0c 28 	lds	r24, 0x280C	; 0x80280c <rebootackd>
    13e8:	88 23       	and	r24, r24
    13ea:	a1 f2       	breq	.-88     	; 0x1394 <main+0xe>
//			squelchErrors = YES;
			put_FRAM_ENCODERS();	// Maybe set a global error variable?
    13ec:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <put_FRAM_ENCODERS>
			timerSAVEENCODER = 0;
    13f0:	10 92 3a 2a 	sts	0x2A3A, r1	; 0x802a3a <timerSAVEENCODER>
			squelchErrors = NO;
    13f4:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <squelchErrors>
    13f8:	cd cf       	rjmp	.-102    	; 0x1394 <main+0xe>

000013fa <read_MCP23008>:
	Returns:
		ERROR if TWI error
		NOERROR Otherwise
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	c8 2f       	mov	r28, r24
    1400:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
    1408:	83 36       	cpi	r24, 0x63	; 99
    140a:	51 f4       	brne	.+20     	; 0x1420 <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 read error");
    140c:	6a ee       	ldi	r22, 0xEA	; 234
    140e:	76 ea       	ldi	r23, 0xA6	; 166
    1410:	82 e9       	ldi	r24, 0x92	; 146
    1412:	91 e0       	ldi	r25, 0x01	; 1
    1414:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		stop_TWI();
    1418:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(0xFF);
    141c:	8f ef       	ldi	r24, 0xFF	; 255
    141e:	19 c0       	rjmp	.+50     	; 0x1452 <read_MCP23008+0x58>
	}
	write_TWI(reg);
    1420:	8d 2f       	mov	r24, r29
    1422:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
	if (start_TWI(addr, TWIREAD) == ERROR) {
    1426:	61 e0       	ldi	r22, 0x01	; 1
    1428:	8c 2f       	mov	r24, r28
    142a:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
    142e:	83 36       	cpi	r24, 0x63	; 99
    1430:	51 f4       	brne	.+20     	; 0x1446 <read_MCP23008+0x4c>
		printError(ERR_MCP23008, "MCP23008 read error");
    1432:	6a ee       	ldi	r22, 0xEA	; 234
    1434:	76 ea       	ldi	r23, 0xA6	; 166
    1436:	82 e9       	ldi	r24, 0x92	; 146
    1438:	91 e0       	ldi	r25, 0x01	; 1
    143a:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		stop_TWI();
    143e:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(0xFF);
    1442:	8f ef       	ldi	r24, 0xFF	; 255
    1444:	06 c0       	rjmp	.+12     	; 0x1452 <read_MCP23008+0x58>
	}
	value = readlast_TWI();
    1446:	0e 94 80 26 	call	0x4d00	; 0x4d00 <readlast_TWI>
    144a:	c8 2f       	mov	r28, r24
	stop_TWI();
    144c:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
	return(value);
    1450:	8c 2f       	mov	r24, r28

}
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	08 95       	ret

00001458 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	d6 2f       	mov	r29, r22
    1460:	14 2f       	mov	r17, r20

	uint8_t retval;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
    1468:	c8 2f       	mov	r28, r24
    146a:	83 36       	cpi	r24, 0x63	; 99
    146c:	49 f4       	brne	.+18     	; 0x1480 <write_MCP23008+0x28>
		printError(ERR_MCP23008, "MCP23008 write error");
    146e:	6e ef       	ldi	r22, 0xFE	; 254
    1470:	76 ea       	ldi	r23, 0xA6	; 166
    1472:	82 e9       	ldi	r24, 0x92	; 146
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		stop_TWI();
    147a:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(ERROR);
    147e:	15 c0       	rjmp	.+42     	; 0x14aa <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(reg))) {
    1480:	8d 2f       	mov	r24, r29
    1482:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
    1486:	88 23       	and	r24, r24
    1488:	21 f0       	breq	.+8      	; 0x1492 <write_MCP23008+0x3a>
		stop_TWI();
    148a:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(ERROR);
    148e:	c3 e6       	ldi	r28, 0x63	; 99
    1490:	0c c0       	rjmp	.+24     	; 0x14aa <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(val))) {
    1492:	81 2f       	mov	r24, r17
    1494:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
    1498:	88 23       	and	r24, r24
    149a:	21 f0       	breq	.+8      	; 0x14a4 <write_MCP23008+0x4c>
		stop_TWI();
    149c:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(ERROR);
    14a0:	c3 e6       	ldi	r28, 0x63	; 99
    14a2:	03 c0       	rjmp	.+6      	; 0x14aa <write_MCP23008+0x52>
	}
	stop_TWI();
    14a4:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
	return(NOERROR);
    14a8:	c0 e0       	ldi	r28, 0x00	; 0
	
}
    14aa:	8c 2f       	mov	r24, r28
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	08 95       	ret

000014b4 <read_MCP9808>:
#include "errors.h"
#include "mcp9808.h"
#include "twi.h"

uint8_t read_MCP9808(float *temperature)
{
    14b4:	8f 92       	push	r8
    14b6:	9f 92       	push	r9
    14b8:	af 92       	push	r10
    14ba:	bf 92       	push	r11
    14bc:	ff 92       	push	r15
    14be:	0f 93       	push	r16
    14c0:	1f 93       	push	r17
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	8c 01       	movw	r16, r24

	uint8_t highbyte, lowbyte, sign;
	float temp;

	if (start_TWI(MCP9808ADDR, TWIWRITE) == ERROR) {
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	88 e1       	ldi	r24, 0x18	; 24
    14cc:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
    14d0:	83 36       	cpi	r24, 0x63	; 99
    14d2:	51 f4       	brne	.+20     	; 0x14e8 <read_MCP9808+0x34>
		*temperature = BADFLOAT;
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	50 e8       	ldi	r21, 0x80	; 128
    14d8:	66 e2       	ldi	r22, 0x26	; 38
    14da:	74 ec       	ldi	r23, 0xC4	; 196
    14dc:	f8 01       	movw	r30, r16
    14de:	40 83       	st	Z, r20
    14e0:	51 83       	std	Z+1, r21	; 0x01
    14e2:	62 83       	std	Z+2, r22	; 0x02
    14e4:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    14e6:	43 c0       	rjmp	.+134    	; 0x156e <read_MCP9808+0xba>
	}
	write_TWI(TEMPREGISTER);
    14e8:	85 e0       	ldi	r24, 0x05	; 5
    14ea:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	88 e1       	ldi	r24, 0x18	; 24
    14f2:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
	highbyte = read_TWI();
    14f6:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <read_TWI>
    14fa:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    14fc:	0e 94 80 26 	call	0x4d00	; 0x4d00 <readlast_TWI>
    1500:	d8 2f       	mov	r29, r24
	stop_TWI();
    1502:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1506:	fc 2f       	mov	r31, r28
    1508:	f0 71       	andi	r31, 0x10	; 16
    150a:	ff 2e       	mov	r15, r31
	highbyte &= 0x0F;					// Clear threshold & sign bits
    150c:	6c 2f       	mov	r22, r28
    150e:	6f 70       	andi	r22, 0x0F	; 15
	temp = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 c3 2a 	call	0x5586	; 0x5586 <__floatunsisf>
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e8       	ldi	r20, 0x80	; 128
    1520:	51 e4       	ldi	r21, 0x41	; 65
    1522:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
    1526:	4b 01       	movw	r8, r22
    1528:	5c 01       	movw	r10, r24
    152a:	6d 2f       	mov	r22, r29
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 c3 2a 	call	0x5586	; 0x5586 <__floatunsisf>
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e8       	ldi	r20, 0x80	; 128
    153c:	5d e3       	ldi	r21, 0x3D	; 61
    153e:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
    1542:	9b 01       	movw	r18, r22
    1544:	ac 01       	movw	r20, r24
    1546:	c5 01       	movw	r24, r10
    1548:	b4 01       	movw	r22, r8
    154a:	0e 94 aa 29 	call	0x5354	; 0x5354 <__addsf3>
	if (sign) {
    154e:	ff 20       	and	r15, r15
    1550:	41 f0       	breq	.+16     	; 0x1562 <read_MCP9808+0xae>
		temp = 256.0 - temp;
    1552:	9b 01       	movw	r18, r22
    1554:	ac 01       	movw	r20, r24
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	80 e8       	ldi	r24, 0x80	; 128
    155c:	93 e4       	ldi	r25, 0x43	; 67
    155e:	0e 94 a9 29 	call	0x5352	; 0x5352 <__subsf3>
	}
	*temperature = temp;
    1562:	f8 01       	movw	r30, r16
    1564:	60 83       	st	Z, r22
    1566:	71 83       	std	Z+1, r23	; 0x01
    1568:	82 83       	std	Z+2, r24	; 0x02
    156a:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    156c:	80 e0       	ldi	r24, 0x00	; 0
}
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
    1574:	0f 91       	pop	r16
    1576:	ff 90       	pop	r15
    1578:	bf 90       	pop	r11
    157a:	af 90       	pop	r10
    157c:	9f 90       	pop	r9
    157e:	8f 90       	pop	r8
    1580:	08 95       	ret

00001582 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    1582:	ef 92       	push	r14
    1584:	ff 92       	push	r15
    1586:	0f 93       	push	r16
    1588:	1f 93       	push	r17
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	f8 2e       	mov	r15, r24
    1590:	e6 2e       	mov	r14, r22
    1592:	ea 01       	movw	r28, r20
    1594:	02 2f       	mov	r16, r18

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
    159c:	18 2f       	mov	r17, r24
    159e:	83 36       	cpi	r24, 0x63	; 99
    15a0:	19 f4       	brne	.+6      	; 0x15a8 <read_MMA8451+0x26>
		stop_TWI();
    15a2:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(ERROR);
    15a6:	23 c0       	rjmp	.+70     	; 0x15ee <read_MMA8451+0x6c>
	}
	if (write_TWI(reg) == ERROR) {
    15a8:	8e 2d       	mov	r24, r14
    15aa:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
    15ae:	18 2f       	mov	r17, r24
    15b0:	83 36       	cpi	r24, 0x63	; 99
    15b2:	e9 f0       	breq	.+58     	; 0x15ee <read_MMA8451+0x6c>
		return(ERROR);
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
    15b4:	61 e0       	ldi	r22, 0x01	; 1
    15b6:	8f 2d       	mov	r24, r15
    15b8:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
    15bc:	18 2f       	mov	r17, r24
    15be:	83 36       	cpi	r24, 0x63	; 99
    15c0:	69 f4       	brne	.+26     	; 0x15dc <read_MMA8451+0x5a>
		stop_TWI();
    15c2:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(ERROR);
    15c6:	13 c0       	rjmp	.+38     	; 0x15ee <read_MMA8451+0x6c>
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    15c8:	7e 01       	movw	r14, r28
    15ca:	8f ef       	ldi	r24, 0xFF	; 255
    15cc:	e8 1a       	sub	r14, r24
    15ce:	f8 0a       	sbc	r15, r24
    15d0:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <read_TWI>
    15d4:	88 83       	st	Y, r24
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    15d6:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    15d8:	e7 01       	movw	r28, r14
    15da:	01 c0       	rjmp	.+2      	; 0x15de <read_MMA8451+0x5c>
    15dc:	11 e0       	ldi	r17, 0x01	; 1
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    15de:	10 17       	cp	r17, r16
    15e0:	98 f3       	brcs	.-26     	; 0x15c8 <read_MMA8451+0x46>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    15e2:	0e 94 80 26 	call	0x4d00	; 0x4d00 <readlast_TWI>
    15e6:	88 83       	st	Y, r24
	stop_TWI();
    15e8:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
	return(NOERROR);
    15ec:	10 e0       	ldi	r17, 0x00	; 0

}
    15ee:	81 2f       	mov	r24, r17
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	ff 90       	pop	r15
    15fa:	ef 90       	pop	r14
    15fc:	08 95       	ret

000015fe <get_orientation>:
uint8_t get_orientation(float *x, float *y, float *z)
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
uint8_t get_orientation(float *x, float *y, float *z)
{
    15fe:	cf 92       	push	r12
    1600:	df 92       	push	r13
    1602:	ef 92       	push	r14
    1604:	ff 92       	push	r15
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	26 97       	sbiw	r28, 0x06	; 6
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	de bf       	out	0x3e, r29	; 62
    1618:	6c 01       	movw	r12, r24
    161a:	7b 01       	movw	r14, r22
    161c:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = BADFLOAT;
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e8       	ldi	r25, 0x80	; 128
    1622:	a6 e2       	ldi	r26, 0x26	; 38
    1624:	b4 ec       	ldi	r27, 0xC4	; 196
    1626:	fa 01       	movw	r30, r20
    1628:	80 83       	st	Z, r24
    162a:	91 83       	std	Z+1, r25	; 0x01
    162c:	a2 83       	std	Z+2, r26	; 0x02
    162e:	b3 83       	std	Z+3, r27	; 0x03
    1630:	fb 01       	movw	r30, r22
    1632:	80 83       	st	Z, r24
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	a2 83       	std	Z+2, r26	; 0x02
    1638:	b3 83       	std	Z+3, r27	; 0x03
    163a:	f6 01       	movw	r30, r12
    163c:	80 83       	st	Z, r24
    163e:	91 83       	std	Z+1, r25	; 0x01
    1640:	a2 83       	std	Z+2, r26	; 0x02
    1642:	b3 83       	std	Z+3, r27	; 0x03

	if (read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6) == ERROR) {
    1644:	26 e0       	ldi	r18, 0x06	; 6
    1646:	ae 01       	movw	r20, r28
    1648:	4f 5f       	subi	r20, 0xFF	; 255
    164a:	5f 4f       	sbci	r21, 0xFF	; 255
    164c:	61 e0       	ldi	r22, 0x01	; 1
    164e:	8d e1       	ldi	r24, 0x1D	; 29
    1650:	0e 94 c1 0a 	call	0x1582	; 0x1582 <read_MMA8451>
    1654:	83 36       	cpi	r24, 0x63	; 99
    1656:	09 f4       	brne	.+2      	; 0x165a <get_orientation+0x5c>
    1658:	64 c0       	rjmp	.+200    	; 0x1722 <get_orientation+0x124>
		return(ERROR);
	}

	ix = datain[0];
    165a:	69 81       	ldd	r22, Y+1	; 0x01
    165c:	70 e0       	ldi	r23, 0x00	; 0
	ix <<= 8;
    165e:	76 2f       	mov	r23, r22
    1660:	66 27       	eor	r22, r22
	ix |= datain[1];
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	68 2b       	or	r22, r24
	ix >>= 2;
    1666:	75 95       	asr	r23
    1668:	67 95       	ror	r22
    166a:	75 95       	asr	r23
    166c:	67 95       	ror	r22
	*x = 980.6 * ((float) ix/4096.0);
    166e:	07 2e       	mov	r0, r23
    1670:	00 0c       	add	r0, r0
    1672:	88 0b       	sbc	r24, r24
    1674:	99 0b       	sbc	r25, r25
    1676:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e8       	ldi	r20, 0x80	; 128
    1680:	59 e3       	ldi	r21, 0x39	; 57
    1682:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
    1686:	26 e6       	ldi	r18, 0x66	; 102
    1688:	36 e2       	ldi	r19, 0x26	; 38
    168a:	45 e7       	ldi	r20, 0x75	; 117
    168c:	54 e4       	ldi	r21, 0x44	; 68
    168e:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
    1692:	f6 01       	movw	r30, r12
    1694:	60 83       	st	Z, r22
    1696:	71 83       	std	Z+1, r23	; 0x01
    1698:	82 83       	std	Z+2, r24	; 0x02
    169a:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    169c:	6b 81       	ldd	r22, Y+3	; 0x03
    169e:	70 e0       	ldi	r23, 0x00	; 0
	iy <<= 8;
    16a0:	76 2f       	mov	r23, r22
    16a2:	66 27       	eor	r22, r22
	iy |= datain[3];
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	68 2b       	or	r22, r24
	iy >>= 2;
    16a8:	75 95       	asr	r23
    16aa:	67 95       	ror	r22
    16ac:	75 95       	asr	r23
    16ae:	67 95       	ror	r22
	*y = 980.6 * ((float) iy/4096.0);
    16b0:	07 2e       	mov	r0, r23
    16b2:	00 0c       	add	r0, r0
    16b4:	88 0b       	sbc	r24, r24
    16b6:	99 0b       	sbc	r25, r25
    16b8:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e8       	ldi	r20, 0x80	; 128
    16c2:	59 e3       	ldi	r21, 0x39	; 57
    16c4:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
    16c8:	26 e6       	ldi	r18, 0x66	; 102
    16ca:	36 e2       	ldi	r19, 0x26	; 38
    16cc:	45 e7       	ldi	r20, 0x75	; 117
    16ce:	54 e4       	ldi	r21, 0x44	; 68
    16d0:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
    16d4:	f7 01       	movw	r30, r14
    16d6:	60 83       	st	Z, r22
    16d8:	71 83       	std	Z+1, r23	; 0x01
    16da:	82 83       	std	Z+2, r24	; 0x02
    16dc:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    16de:	6d 81       	ldd	r22, Y+5	; 0x05
    16e0:	70 e0       	ldi	r23, 0x00	; 0
	iz <<= 8;
    16e2:	76 2f       	mov	r23, r22
    16e4:	66 27       	eor	r22, r22
	iz |= datain[5];
    16e6:	8e 81       	ldd	r24, Y+6	; 0x06
    16e8:	68 2b       	or	r22, r24
	iz >>= 2;
    16ea:	75 95       	asr	r23
    16ec:	67 95       	ror	r22
    16ee:	75 95       	asr	r23
    16f0:	67 95       	ror	r22
	*z = 980.6 * ((float) iz/4096.0);
    16f2:	07 2e       	mov	r0, r23
    16f4:	00 0c       	add	r0, r0
    16f6:	88 0b       	sbc	r24, r24
    16f8:	99 0b       	sbc	r25, r25
    16fa:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e8       	ldi	r20, 0x80	; 128
    1704:	59 e3       	ldi	r21, 0x39	; 57
    1706:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
    170a:	26 e6       	ldi	r18, 0x66	; 102
    170c:	36 e2       	ldi	r19, 0x26	; 38
    170e:	45 e7       	ldi	r20, 0x75	; 117
    1710:	54 e4       	ldi	r21, 0x44	; 68
    1712:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
    1716:	f8 01       	movw	r30, r16
    1718:	60 83       	st	Z, r22
    171a:	71 83       	std	Z+1, r23	; 0x01
    171c:	82 83       	std	Z+2, r24	; 0x02
    171e:	93 83       	std	Z+3, r25	; 0x03

	return(0);
    1720:	80 e0       	ldi	r24, 0x00	; 0

}
    1722:	26 96       	adiw	r28, 0x06	; 6
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	1f 91       	pop	r17
    172e:	0f 91       	pop	r16
    1730:	ff 90       	pop	r15
    1732:	ef 90       	pop	r14
    1734:	df 90       	pop	r13
    1736:	cf 90       	pop	r12
    1738:	08 95       	ret

0000173a <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	d6 2f       	mov	r29, r22
    1742:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
    174a:	c8 2f       	mov	r28, r24
    174c:	88 23       	and	r24, r24
    174e:	21 f0       	breq	.+8      	; 0x1758 <write_MMA8451+0x1e>
		stop_TWI();
    1750:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(retval);
    1754:	8c 2f       	mov	r24, r28
    1756:	17 c0       	rjmp	.+46     	; 0x1786 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1758:	8d 2f       	mov	r24, r29
    175a:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
    175e:	c8 2f       	mov	r28, r24
    1760:	88 23       	and	r24, r24
    1762:	21 f0       	breq	.+8      	; 0x176c <write_MMA8451+0x32>
		stop_TWI();
    1764:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(retval);
    1768:	8c 2f       	mov	r24, r28
    176a:	0d c0       	rjmp	.+26     	; 0x1786 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    176c:	81 2f       	mov	r24, r17
    176e:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
    1772:	c8 2f       	mov	r28, r24
    1774:	88 23       	and	r24, r24
    1776:	21 f0       	breq	.+8      	; 0x1780 <write_MMA8451+0x46>
		stop_TWI();
    1778:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
		return(retval);
    177c:	8c 2f       	mov	r24, r28
    177e:	03 c0       	rjmp	.+6      	; 0x1786 <write_MMA8451+0x4c>
	}
	stop_TWI();
    1780:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>
	return(0);
    1784:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	1f 91       	pop	r17
    178c:	08 95       	ret

0000178e <init_MMA8451>:
	sampling frequency (1.56 Hz), a low cutoff frequency on the high pass
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/
uint8_t init_MMA8451(void)
{
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	1f 92       	push	r1
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    1798:	40 e4       	ldi	r20, 0x40	; 64
    179a:	6b e2       	ldi	r22, 0x2B	; 43
    179c:	8d e1       	ldi	r24, 0x1D	; 29
    179e:	0e 94 9d 0b 	call	0x173a	; 0x173a <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    17a2:	21 e0       	ldi	r18, 0x01	; 1
    17a4:	ae 01       	movw	r20, r28
    17a6:	4f 5f       	subi	r20, 0xFF	; 255
    17a8:	5f 4f       	sbci	r21, 0xFF	; 255
    17aa:	6b e2       	ldi	r22, 0x2B	; 43
    17ac:	8d e1       	ldi	r24, 0x1D	; 29
    17ae:	0e 94 c1 0a 	call	0x1582	; 0x1582 <read_MMA8451>
	while (retval & 0x40) {
    17b2:	08 c0       	rjmp	.+16     	; 0x17c4 <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    17b4:	21 e0       	ldi	r18, 0x01	; 1
    17b6:	ae 01       	movw	r20, r28
    17b8:	4f 5f       	subi	r20, 0xFF	; 255
    17ba:	5f 4f       	sbci	r21, 0xFF	; 255
    17bc:	6b e2       	ldi	r22, 0x2B	; 43
    17be:	8d e1       	ldi	r24, 0x1D	; 29
    17c0:	0e 94 c1 0a 	call	0x1582	; 0x1582 <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	86 fd       	sbrc	r24, 6
    17c8:	f5 cf       	rjmp	.-22     	; 0x17b4 <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    17ca:	40 ec       	ldi	r20, 0xC0	; 192
    17cc:	6f e0       	ldi	r22, 0x0F	; 15
    17ce:	8d e1       	ldi	r24, 0x1D	; 29
    17d0:	0e 94 9d 0b 	call	0x173a	; 0x173a <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    17d4:	42 e0       	ldi	r20, 0x02	; 2
    17d6:	6b e2       	ldi	r22, 0x2B	; 43
    17d8:	8d e1       	ldi	r24, 0x1D	; 29
    17da:	0e 94 9d 0b 	call	0x173a	; 0x173a <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    17de:	4d e3       	ldi	r20, 0x3D	; 61
    17e0:	6a e2       	ldi	r22, 0x2A	; 42
    17e2:	8d e1       	ldi	r24, 0x1D	; 29
    17e4:	0e 94 9d 0b 	call	0x173a	; 0x173a <write_MMA8451>

	return(retval);

}
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	0f 90       	pop	r0
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	08 95       	ret

000017f2 <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum and \r\n to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    17f2:	ef 92       	push	r14
    17f4:	ff 92       	push	r15
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	2e 97       	sbiw	r28, 0x0e	; 14
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    180a:	88 e0       	ldi	r24, 0x08	; 8
    180c:	e3 e1       	ldi	r30, 0x13	; 19
    180e:	f7 ea       	ldi	r31, 0xA7	; 167
    1810:	de 01       	movw	r26, r28
    1812:	11 96       	adiw	r26, 0x01	; 1
    1814:	01 90       	ld	r0, Z+
    1816:	0d 92       	st	X+, r0
    1818:	8a 95       	dec	r24
    181a:	e1 f7       	brne	.-8      	; 0x1814 <__DATA_REGION_LENGTH__+0x14>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    181c:	f8 01       	movw	r30, r16
    181e:	01 90       	ld	r0, Z+
    1820:	00 20       	and	r0, r0
    1822:	e9 f7       	brne	.-6      	; 0x181e <__DATA_REGION_LENGTH__+0x1e>
    1824:	31 97       	sbiw	r30, 0x01	; 1
    1826:	3e 2f       	mov	r19, r30
    1828:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    182a:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	06 c0       	rjmp	.+12     	; 0x183c <__DATA_REGION_LENGTH__+0x3c>
		checksum ^= str[i];
    1830:	f8 01       	movw	r30, r16
    1832:	e8 0f       	add	r30, r24
    1834:	f1 1d       	adc	r31, r1
    1836:	20 81       	ld	r18, Z
    1838:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    183a:	8f 5f       	subi	r24, 0xFF	; 255
    183c:	83 17       	cp	r24, r19
    183e:	c0 f3       	brcs	.-16     	; 0x1830 <__DATA_REGION_LENGTH__+0x30>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1840:	1f 92       	push	r1
    1842:	9f 93       	push	r25
    1844:	ce 01       	movw	r24, r28
    1846:	01 96       	adiw	r24, 0x01	; 1
    1848:	9f 93       	push	r25
    184a:	8f 93       	push	r24
    184c:	7e 01       	movw	r14, r28
    184e:	89 e0       	ldi	r24, 0x09	; 9
    1850:	e8 0e       	add	r14, r24
    1852:	f1 1c       	adc	r15, r1
    1854:	ff 92       	push	r15
    1856:	ef 92       	push	r14
    1858:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
	strcat(str, chksum);
    185c:	b7 01       	movw	r22, r14
    185e:	c8 01       	movw	r24, r16
    1860:	0e 94 46 31 	call	0x628c	; 0x628c <strcat>

}
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	2e 96       	adiw	r28, 0x0e	; 14
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	ff 90       	pop	r15
    1880:	ef 90       	pop	r14
    1882:	08 95       	ret

00001884 <reset_OLED>:
void reset_OLED(void)
	Pulls the OLED display reset line low for 1 ms. This seems to be needed.
------------------------------------------------------------------------------*/
void reset_OLED(void)
{
	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    1884:	e0 e6       	ldi	r30, 0x60	; 96
    1886:	f4 e0       	ldi	r31, 0x04	; 4
    1888:	80 e4       	ldi	r24, 0x40	; 64
    188a:	86 83       	std	Z+6, r24	; 0x06
	PORTD.DIRSET = PIN6_bm;
    188c:	81 83       	std	Z+1, r24	; 0x01
    188e:	a1 e4       	ldi	r26, 0x41	; 65
    1890:	b3 e0       	ldi	r27, 0x03	; 3
    1892:	11 97       	sbiw	r26, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <reset_OLED+0xe>
    1896:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    1898:	85 83       	std	Z+5, r24	; 0x05
    189a:	08 95       	ret

0000189c <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	d6 2f       	mov	r29, r22
    18a2:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    18a4:	60 e0       	ldi	r22, 0x00	; 0
    18a6:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <start_TWI>
	write_TWI(type);
    18aa:	8d 2f       	mov	r24, r29
    18ac:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
	write_TWI(byteToSend);
    18b0:	8c 2f       	mov	r24, r28
    18b2:	0e 94 ed 26 	call	0x4dda	; 0x4dda <write_TWI>
	stop_TWI();
    18b6:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <stop_TWI>

}
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <init_OLEDDISPLAY>:
	Initialize a Newhaven NHD-0216AW-1B3 OLED display. This is taken straight
	from https://github.com/NewhavenDisplay/NHD_US2066. The manual is not easy
	to understand but this seems to work.
------------------------------------------------------------------------------*/
void init_OLEDDISPLAY(uint8_t displaynumber)
{
    18c0:	cf 93       	push	r28

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
    18c2:	88 23       	and	r24, r24
    18c4:	29 f0       	breq	.+10     	; 0x18d0 <init_OLEDDISPLAY+0x10>
		twiaddr = OLEDADDR0;		
	} else if (displaynumber == 1) {	// Left-side display
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	09 f0       	breq	.+2      	; 0x18cc <init_OLEDDISPLAY+0xc>
    18ca:	9e c0       	rjmp	.+316    	; 0x1a08 <init_OLEDDISPLAY+0x148>
		twiaddr = OLEDADDR1;
    18cc:	cd e3       	ldi	r28, 0x3D	; 61
    18ce:	01 c0       	rjmp	.+2      	; 0x18d2 <init_OLEDDISPLAY+0x12>
{

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
		twiaddr = OLEDADDR0;		
    18d0:	cc e3       	ldi	r28, 0x3C	; 60
		twiaddr = OLEDADDR1;
	} else {
		return;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    18d2:	4a e2       	ldi	r20, 0x2A	; 42
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	8c 2f       	mov	r24, r28
    18d8:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    18dc:	41 e7       	ldi	r20, 0x71	; 113
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	8c 2f       	mov	r24, r28
    18e2:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    18e6:	4c e5       	ldi	r20, 0x5C	; 92
    18e8:	60 e4       	ldi	r22, 0x40	; 64
    18ea:	8c 2f       	mov	r24, r28
    18ec:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    18f0:	48 e2       	ldi	r20, 0x28	; 40
    18f2:	60 e0       	ldi	r22, 0x00	; 0
    18f4:	8c 2f       	mov	r24, r28
    18f6:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    18fa:	48 e0       	ldi	r20, 0x08	; 8
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	8c 2f       	mov	r24, r28
    1900:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1904:	4a e2       	ldi	r20, 0x2A	; 42
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	8c 2f       	mov	r24, r28
    190a:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    190e:	49 e7       	ldi	r20, 0x79	; 121
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	8c 2f       	mov	r24, r28
    1914:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    1918:	45 ed       	ldi	r20, 0xD5	; 213
    191a:	60 e0       	ldi	r22, 0x00	; 0
    191c:	8c 2f       	mov	r24, r28
    191e:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    1922:	40 e7       	ldi	r20, 0x70	; 112
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	8c 2f       	mov	r24, r28
    1928:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    192c:	48 e7       	ldi	r20, 0x78	; 120
    192e:	60 e0       	ldi	r22, 0x00	; 0
    1930:	8c 2f       	mov	r24, r28
    1932:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    1936:	48 e0       	ldi	r20, 0x08	; 8
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	8c 2f       	mov	r24, r28
    193c:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1940:	46 e0       	ldi	r20, 0x06	; 6
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	8c 2f       	mov	r24, r28
    1946:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    194a:	42 e7       	ldi	r20, 0x72	; 114
    194c:	60 e0       	ldi	r22, 0x00	; 0
    194e:	8c 2f       	mov	r24, r28
    1950:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    1954:	40 e0       	ldi	r20, 0x00	; 0
    1956:	60 e4       	ldi	r22, 0x40	; 64
    1958:	8c 2f       	mov	r24, r28
    195a:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    195e:	4a e2       	ldi	r20, 0x2A	; 42
    1960:	60 e0       	ldi	r22, 0x00	; 0
    1962:	8c 2f       	mov	r24, r28
    1964:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1968:	49 e7       	ldi	r20, 0x79	; 121
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	8c 2f       	mov	r24, r28
    196e:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    1972:	4a ed       	ldi	r20, 0xDA	; 218
    1974:	60 e0       	ldi	r22, 0x00	; 0
    1976:	8c 2f       	mov	r24, r28
    1978:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	8c 2f       	mov	r24, r28
    1982:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    1986:	4c ed       	ldi	r20, 0xDC	; 220
    1988:	60 e0       	ldi	r22, 0x00	; 0
    198a:	8c 2f       	mov	r24, r28
    198c:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	8c 2f       	mov	r24, r28
    1996:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    199a:	41 e8       	ldi	r20, 0x81	; 129
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	8c 2f       	mov	r24, r28
    19a0:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    19a4:	4f e7       	ldi	r20, 0x7F	; 127
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	8c 2f       	mov	r24, r28
    19aa:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    19ae:	49 ed       	ldi	r20, 0xD9	; 217
    19b0:	60 e0       	ldi	r22, 0x00	; 0
    19b2:	8c 2f       	mov	r24, r28
    19b4:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    19b8:	41 ef       	ldi	r20, 0xF1	; 241
    19ba:	60 e0       	ldi	r22, 0x00	; 0
    19bc:	8c 2f       	mov	r24, r28
    19be:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    19c2:	4b ed       	ldi	r20, 0xDB	; 219
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	8c 2f       	mov	r24, r28
    19c8:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    19cc:	40 e4       	ldi	r20, 0x40	; 64
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	8c 2f       	mov	r24, r28
    19d2:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    19d6:	48 e7       	ldi	r20, 0x78	; 120
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	8c 2f       	mov	r24, r28
    19dc:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    19e0:	48 e2       	ldi	r20, 0x28	; 40
    19e2:	60 e0       	ldi	r22, 0x00	; 0
    19e4:	8c 2f       	mov	r24, r28
    19e6:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    19ea:	41 e0       	ldi	r20, 0x01	; 1
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	8c 2f       	mov	r24, r28
    19f0:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    19f4:	40 e8       	ldi	r20, 0x80	; 128
    19f6:	60 e0       	ldi	r22, 0x00	; 0
    19f8:	8c 2f       	mov	r24, r28
    19fa:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    19fe:	4c e0       	ldi	r20, 0x0C	; 12
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	8c 2f       	mov	r24, r28
    1a04:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>

}
    1a08:	cf 91       	pop	r28
    1a0a:	08 95       	ret

00001a0c <init_OLED>:
	Set up the two OLED displays
------------------------------------------------------------------------------*/
void init_OLED(void)
{

	reset_OLED();				// Need to start with a reset
    1a0c:	0e 94 42 0c 	call	0x1884	; 0x1884 <reset_OLED>
	init_OLEDDISPLAY(0);
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <init_OLEDDISPLAY>
	init_OLEDDISPLAY(1);
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <init_OLEDDISPLAY>
    1a1c:	2a e6       	ldi	r18, 0x6A	; 106
    1a1e:	84 e0       	ldi	r24, 0x04	; 4
    1a20:	91 e0       	ldi	r25, 0x01	; 1
    1a22:	21 50       	subi	r18, 0x01	; 1
    1a24:	80 40       	sbci	r24, 0x00	; 0
    1a26:	90 40       	sbci	r25, 0x00	; 0
    1a28:	e1 f7       	brne	.-8      	; 0x1a22 <init_OLED+0x16>
    1a2a:	00 c0       	rjmp	.+0      	; 0x1a2c <init_OLED+0x20>
    1a2c:	08 95       	ret

00001a2e <writestr_OLED>:
	
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.
------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	e2 97       	sbiw	r28, 0x32	; 50
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    1a46:	91 e1       	ldi	r25, 0x11	; 17
    1a48:	eb e1       	ldi	r30, 0x1B	; 27
    1a4a:	f7 ea       	ldi	r31, 0xA7	; 167
    1a4c:	de 01       	movw	r26, r28
    1a4e:	92 96       	adiw	r26, 0x22	; 34
    1a50:	01 90       	ld	r0, Z+
    1a52:	0d 92       	st	X+, r0
    1a54:	9a 95       	dec	r25
    1a56:	e1 f7       	brne	.-8      	; 0x1a50 <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1a58:	81 11       	cpse	r24, r1
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1a5c:	0c e3       	ldi	r16, 0x3C	; 60
    1a5e:	01 c0       	rjmp	.+2      	; 0x1a62 <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1a60:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    1a62:	ce 01       	movw	r24, r28
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	7c 01       	movw	r14, r24
    1a68:	0e 94 51 31 	call	0x62a2	; 0x62a2 <strcpy>
	if (strlen(strbuf) > 16) {
    1a6c:	f7 01       	movw	r30, r14
    1a6e:	01 90       	ld	r0, Z+
    1a70:	00 20       	and	r0, r0
    1a72:	e9 f7       	brne	.-6      	; 0x1a6e <writestr_OLED+0x40>
    1a74:	31 97       	sbiw	r30, 0x01	; 1
    1a76:	ee 19       	sub	r30, r14
    1a78:	ff 09       	sbc	r31, r15
    1a7a:	71 97       	sbiw	r30, 0x11	; 17
    1a7c:	08 f0       	brcs	.+2      	; 0x1a80 <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1a7e:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1a80:	be 01       	movw	r22, r28
    1a82:	6e 5d       	subi	r22, 0xDE	; 222
    1a84:	7f 4f       	sbci	r23, 0xFF	; 255
    1a86:	ce 01       	movw	r24, r28
    1a88:	01 96       	adiw	r24, 0x01	; 1
    1a8a:	0e 94 46 31 	call	0x628c	; 0x628c <strcat>

	if (lineno == 1) {
    1a8e:	11 30       	cpi	r17, 0x01	; 1
    1a90:	39 f4       	brne	.+14     	; 0x1aa0 <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    1a92:	40 e8       	ldi	r20, 0x80	; 128
    1a94:	60 e0       	ldi	r22, 0x00	; 0
    1a96:	80 2f       	mov	r24, r16
    1a98:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1a9c:	10 e0       	ldi	r17, 0x00	; 0
    1a9e:	12 c0       	rjmp	.+36     	; 0x1ac4 <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1aa0:	40 ec       	ldi	r20, 0xC0	; 192
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	80 2f       	mov	r24, r16
    1aa6:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>
    1aaa:	f8 cf       	rjmp	.-16     	; 0x1a9c <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1aac:	e1 e0       	ldi	r30, 0x01	; 1
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	ec 0f       	add	r30, r28
    1ab2:	fd 1f       	adc	r31, r29
    1ab4:	e1 0f       	add	r30, r17
    1ab6:	f1 1d       	adc	r31, r1
    1ab8:	40 81       	ld	r20, Z
    1aba:	60 e4       	ldi	r22, 0x40	; 64
    1abc:	80 2f       	mov	r24, r16
    1abe:	0e 94 4e 0c 	call	0x189c	; 0x189c <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    1ac2:	1f 5f       	subi	r17, 0xFF	; 255
    1ac4:	10 31       	cpi	r17, 0x10	; 16
    1ac6:	90 f3       	brcs	.-28     	; 0x1aac <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	80 93 16 2a 	sts	0x2A16, r24	; 0x802a16 <timerOLED>
    1ad0:	90 93 17 2a 	sts	0x2A17, r25	; 0x802a17 <timerOLED+0x1>

}
    1ad4:	e2 96       	adiw	r28, 0x32	; 50
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	ff 90       	pop	r15
    1ae4:	ef 90       	pop	r14
    1ae6:	08 95       	ret

00001ae8 <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    1ae8:	1f 93       	push	r17
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	1f 92       	push	r1
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	18 2f       	mov	r17, r24

	char nullstr[] = "";
    1af6:	19 82       	std	Y+1, r1	; 0x01
	writestr_OLED(displaynumber, nullstr, 1);
    1af8:	41 e0       	ldi	r20, 0x01	; 1
    1afa:	be 01       	movw	r22, r28
    1afc:	6f 5f       	subi	r22, 0xFF	; 255
    1afe:	7f 4f       	sbci	r23, 0xFF	; 255
    1b00:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
    1b04:	42 e0       	ldi	r20, 0x02	; 2
    1b06:	be 01       	movw	r22, r28
    1b08:	6f 5f       	subi	r22, 0xFF	; 255
    1b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0c:	81 2f       	mov	r24, r17
    1b0e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <writestr_OLED>
	timerOLED = 0;
    1b12:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerOLED>
    1b16:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <timerOLED+0x1>

}
    1b1a:	0f 90       	pop	r0
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	08 95       	ret

00001b24 <read_PNEUSensors>:
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
{
    1b24:	cf 92       	push	r12
    1b26:	df 92       	push	r13
    1b28:	ef 92       	push	r14
    1b2a:	ff 92       	push	r15
    1b2c:	0f 93       	push	r16
    1b2e:	1f 93       	push	r17
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	6c 01       	movw	r12, r24
    1b36:	8b 01       	movw	r16, r22
    1b38:	7a 01       	movw	r14, r20
    1b3a:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);	// NEEDS ERRORCHECK
    1b3c:	69 e0       	ldi	r22, 0x09	; 9
    1b3e:	81 e2       	ldi	r24, 0x21	; 33
    1b40:	0e 94 fd 09 	call	0x13fa	; 0x13fa <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1b44:	98 2f       	mov	r25, r24
    1b46:	92 95       	swap	r25
    1b48:	96 95       	lsr	r25
    1b4a:	96 95       	lsr	r25
    1b4c:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    1b4e:	91 30       	cpi	r25, 0x01	; 1
    1b50:	21 f4       	brne	.+8      	; 0x1b5a <read_PNEUSensors+0x36>
		*shutter = 'c';
    1b52:	93 e6       	ldi	r25, 0x63	; 99
    1b54:	f6 01       	movw	r30, r12
    1b56:	90 83       	st	Z, r25
    1b58:	0f c0       	rjmp	.+30     	; 0x1b78 <read_PNEUSensors+0x54>
	} else if (state == 2) {
    1b5a:	92 30       	cpi	r25, 0x02	; 2
    1b5c:	21 f4       	brne	.+8      	; 0x1b66 <read_PNEUSensors+0x42>
		*shutter = 'o';
    1b5e:	9f e6       	ldi	r25, 0x6F	; 111
    1b60:	f6 01       	movw	r30, r12
    1b62:	90 83       	st	Z, r25
    1b64:	09 c0       	rjmp	.+18     	; 0x1b78 <read_PNEUSensors+0x54>
	} else if (state == 3) {
    1b66:	93 30       	cpi	r25, 0x03	; 3
    1b68:	21 f4       	brne	.+8      	; 0x1b72 <read_PNEUSensors+0x4e>
		*shutter = 't';
    1b6a:	94 e7       	ldi	r25, 0x74	; 116
    1b6c:	f6 01       	movw	r30, r12
    1b6e:	90 83       	st	Z, r25
    1b70:	03 c0       	rjmp	.+6      	; 0x1b78 <read_PNEUSensors+0x54>
	} else {
		*shutter = 'x';
    1b72:	98 e7       	ldi	r25, 0x78	; 120
    1b74:	f6 01       	movw	r30, r12
    1b76:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1b78:	98 2f       	mov	r25, r24
    1b7a:	96 95       	lsr	r25
    1b7c:	96 95       	lsr	r25
	state &= 0b00000011;
    1b7e:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1b80:	91 30       	cpi	r25, 0x01	; 1
    1b82:	21 f4       	brne	.+8      	; 0x1b8c <read_PNEUSensors+0x68>
		*right = 'c';
    1b84:	93 e6       	ldi	r25, 0x63	; 99
    1b86:	f7 01       	movw	r30, r14
    1b88:	90 83       	st	Z, r25
    1b8a:	0f c0       	rjmp	.+30     	; 0x1baa <read_PNEUSensors+0x86>
	} else if (state == 2) {
    1b8c:	92 30       	cpi	r25, 0x02	; 2
    1b8e:	21 f4       	brne	.+8      	; 0x1b98 <read_PNEUSensors+0x74>
		*right = 'o';
    1b90:	9f e6       	ldi	r25, 0x6F	; 111
    1b92:	f7 01       	movw	r30, r14
    1b94:	90 83       	st	Z, r25
    1b96:	09 c0       	rjmp	.+18     	; 0x1baa <read_PNEUSensors+0x86>
	} else if (state == 3) {
    1b98:	93 30       	cpi	r25, 0x03	; 3
    1b9a:	21 f4       	brne	.+8      	; 0x1ba4 <read_PNEUSensors+0x80>
		*right = 't';
    1b9c:	94 e7       	ldi	r25, 0x74	; 116
    1b9e:	f7 01       	movw	r30, r14
    1ba0:	90 83       	st	Z, r25
    1ba2:	03 c0       	rjmp	.+6      	; 0x1baa <read_PNEUSensors+0x86>
	} else {
		*right = 'x';
    1ba4:	98 e7       	ldi	r25, 0x78	; 120
    1ba6:	f7 01       	movw	r30, r14
    1ba8:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1baa:	98 2f       	mov	r25, r24
    1bac:	92 95       	swap	r25
    1bae:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    1bb0:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1bb2:	91 30       	cpi	r25, 0x01	; 1
    1bb4:	21 f4       	brne	.+8      	; 0x1bbe <read_PNEUSensors+0x9a>
		*left = 'o';
    1bb6:	9f e6       	ldi	r25, 0x6F	; 111
    1bb8:	f8 01       	movw	r30, r16
    1bba:	90 83       	st	Z, r25
    1bbc:	0f c0       	rjmp	.+30     	; 0x1bdc <read_PNEUSensors+0xb8>
	} else if (state == 2) {
    1bbe:	92 30       	cpi	r25, 0x02	; 2
    1bc0:	21 f4       	brne	.+8      	; 0x1bca <read_PNEUSensors+0xa6>
		*left = 'c';
    1bc2:	93 e6       	ldi	r25, 0x63	; 99
    1bc4:	f8 01       	movw	r30, r16
    1bc6:	90 83       	st	Z, r25
    1bc8:	09 c0       	rjmp	.+18     	; 0x1bdc <read_PNEUSensors+0xb8>
	} else if (state == 3) {
    1bca:	93 30       	cpi	r25, 0x03	; 3
    1bcc:	21 f4       	brne	.+8      	; 0x1bd6 <read_PNEUSensors+0xb2>
		*left = 't';
    1bce:	94 e7       	ldi	r25, 0x74	; 116
    1bd0:	f8 01       	movw	r30, r16
    1bd2:	90 83       	st	Z, r25
    1bd4:	03 c0       	rjmp	.+6      	; 0x1bdc <read_PNEUSensors+0xb8>
	} else {
		*left = 'x';
    1bd6:	98 e7       	ldi	r25, 0x78	; 120
    1bd8:	f8 01       	movw	r30, r16
    1bda:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1bdc:	81 ff       	sbrs	r24, 1
    1bde:	03 c0       	rjmp	.+6      	; 0x1be6 <read_PNEUSensors+0xc2>
		*air = '0';
    1be0:	80 e3       	ldi	r24, 0x30	; 48
    1be2:	88 83       	st	Y, r24
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <read_PNEUSensors+0xc6>
	} else {
		*air = '1';
    1be6:	81 e3       	ldi	r24, 0x31	; 49
    1be8:	88 83       	st	Y, r24
	}
}
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	1f 91       	pop	r17
    1bf0:	0f 91       	pop	r16
    1bf2:	ff 90       	pop	r15
    1bf4:	ef 90       	pop	r14
    1bf6:	df 90       	pop	r13
    1bf8:	cf 90       	pop	r12
    1bfa:	08 95       	ret

00001bfc <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	d8 2f       	mov	r29, r24
    1c02:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    1c04:	69 e0       	ldi	r22, 0x09	; 9
    1c06:	84 e2       	ldi	r24, 0x24	; 36
    1c08:	0e 94 fd 09 	call	0x13fa	; 0x13fa <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    1c0c:	8d 2b       	or	r24, r29
    1c0e:	48 2f       	mov	r20, r24
    1c10:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1c12:	6a e0       	ldi	r22, 0x0A	; 10
    1c14:	84 e2       	ldi	r24, 0x24	; 36
    1c16:	0e 94 2c 0a 	call	0x1458	; 0x1458 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1c1a:	df 91       	pop	r29
    1c1c:	cf 91       	pop	r28
    1c1e:	08 95       	ret

00001c20 <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(uint8_t cstack)
{
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	6a 97       	sbiw	r28, 0x1a	; 26
    1c2a:	cd bf       	out	0x3d, r28	; 61
    1c2c:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    1c2e:	99 e0       	ldi	r25, 0x09	; 9
    1c30:	e6 e6       	ldi	r30, 0x66	; 102
    1c32:	f7 ea       	ldi	r31, 0xA7	; 167
    1c34:	de 01       	movw	r26, r28
    1c36:	11 96       	adiw	r26, 0x01	; 1
    1c38:	01 90       	ld	r0, Z+
    1c3a:	0d 92       	st	X+, r0
    1c3c:	9a 95       	dec	r25
    1c3e:	e1 f7       	brne	.-8      	; 0x1c38 <close_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1c40:	24 e3       	ldi	r18, 0x34	; 52
    1c42:	82 9f       	mul	r24, r18
    1c44:	c0 01       	movw	r24, r0
    1c46:	11 24       	eor	r1, r1
    1c48:	fc 01       	movw	r30, r24
    1c4a:	e3 5f       	subi	r30, 0xF3	; 243
    1c4c:	f7 4d       	sbci	r31, 0xD7	; 215
    1c4e:	81 81       	ldd	r24, Z+1	; 0x01
    1c50:	8c 36       	cpi	r24, 0x6C	; 108
    1c52:	31 f1       	breq	.+76     	; 0x1ca0 <close_PNEU+0x80>
    1c54:	18 f4       	brcc	.+6      	; 0x1c5c <close_PNEU+0x3c>
    1c56:	82 36       	cpi	r24, 0x62	; 98
    1c58:	39 f0       	breq	.+14     	; 0x1c68 <close_PNEU+0x48>
    1c5a:	6a c0       	rjmp	.+212    	; 0x1d30 <close_PNEU+0x110>
    1c5c:	82 37       	cpi	r24, 0x72	; 114
    1c5e:	c1 f1       	breq	.+112    	; 0x1cd0 <close_PNEU+0xb0>
    1c60:	83 37       	cpi	r24, 0x73	; 115
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <close_PNEU+0x46>
    1c64:	4d c0       	rjmp	.+154    	; 0x1d00 <close_PNEU+0xe0>
    1c66:	64 c0       	rjmp	.+200    	; 0x1d30 <close_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1c68:	6a ee       	ldi	r22, 0xEA	; 234
    1c6a:	84 e4       	ldi	r24, 0x44	; 68
    1c6c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1c70:	66 ee       	ldi	r22, 0xE6	; 230
    1c72:	88 e8       	ldi	r24, 0x88	; 136
    1c74:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1c78:	8c e2       	ldi	r24, 0x2C	; 44
    1c7a:	97 ea       	ldi	r25, 0xA7	; 167
    1c7c:	9f 93       	push	r25
    1c7e:	8f 93       	push	r24
    1c80:	ce 01       	movw	r24, r28
    1c82:	01 96       	adiw	r24, 0x01	; 1
    1c84:	9f 93       	push	r25
    1c86:	8f 93       	push	r24
    1c88:	09 96       	adiw	r24, 0x09	; 9
    1c8a:	9f 93       	push	r25
    1c8c:	8f 93       	push	r24
    1c8e:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			break;
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	59 c0       	rjmp	.+178    	; 0x1d52 <close_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1ca0:	6a ee       	ldi	r22, 0xEA	; 234
    1ca2:	84 e4       	ldi	r24, 0x44	; 68
    1ca4:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1ca8:	81 e3       	ldi	r24, 0x31	; 49
    1caa:	97 ea       	ldi	r25, 0xA7	; 167
    1cac:	9f 93       	push	r25
    1cae:	8f 93       	push	r24
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	9f 93       	push	r25
    1cb6:	8f 93       	push	r24
    1cb8:	09 96       	adiw	r24, 0x09	; 9
    1cba:	9f 93       	push	r25
    1cbc:	8f 93       	push	r24
    1cbe:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			break;
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	41 c0       	rjmp	.+130    	; 0x1d52 <close_PNEU+0x132>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1cd0:	66 ee       	ldi	r22, 0xE6	; 230
    1cd2:	88 e8       	ldi	r24, 0x88	; 136
    1cd4:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1cd8:	86 e3       	ldi	r24, 0x36	; 54
    1cda:	97 ea       	ldi	r25, 0xA7	; 167
    1cdc:	9f 93       	push	r25
    1cde:	8f 93       	push	r24
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	9f 93       	push	r25
    1ce6:	8f 93       	push	r24
    1ce8:	09 96       	adiw	r24, 0x09	; 9
    1cea:	9f 93       	push	r25
    1cec:	8f 93       	push	r24
    1cee:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			break;
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	29 c0       	rjmp	.+82     	; 0x1d52 <close_PNEU+0x132>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1d00:	6c ee       	ldi	r22, 0xEC	; 236
    1d02:	82 e2       	ldi	r24, 0x22	; 34
    1d04:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1d08:	8c e3       	ldi	r24, 0x3C	; 60
    1d0a:	97 ea       	ldi	r25, 0xA7	; 167
    1d0c:	9f 93       	push	r25
    1d0e:	8f 93       	push	r24
    1d10:	ce 01       	movw	r24, r28
    1d12:	01 96       	adiw	r24, 0x01	; 1
    1d14:	9f 93       	push	r25
    1d16:	8f 93       	push	r24
    1d18:	09 96       	adiw	r24, 0x09	; 9
    1d1a:	9f 93       	push	r25
    1d1c:	8f 93       	push	r24
    1d1e:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			break;
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	11 c0       	rjmp	.+34     	; 0x1d52 <close_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "close_PNEU bad object");
    1d30:	64 e4       	ldi	r22, 0x44	; 68
    1d32:	77 ea       	ldi	r23, 0xA7	; 167
    1d34:	85 ef       	ldi	r24, 0xF5	; 245
    1d36:	91 e0       	ldi	r25, 0x01	; 1
    1d38:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			strcpy(outbuf, "close what?");
    1d3c:	8c e0       	ldi	r24, 0x0C	; 12
    1d3e:	ea e5       	ldi	r30, 0x5A	; 90
    1d40:	f7 ea       	ldi	r31, 0xA7	; 167
    1d42:	de 01       	movw	r26, r28
    1d44:	1a 96       	adiw	r26, 0x0a	; 10
    1d46:	01 90       	ld	r0, Z+
    1d48:	0d 92       	st	X+, r0
    1d4a:	8a 95       	dec	r24
    1d4c:	e1 f7       	brne	.-8      	; 0x1d46 <close_PNEU+0x126>
			return(ERROR);
    1d4e:	83 e6       	ldi	r24, 0x63	; 99
    1d50:	0b c0       	rjmp	.+22     	; 0x1d68 <close_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1d58:	41 e0       	ldi	r20, 0x01	; 1
    1d5a:	be 01       	movw	r22, r28
    1d5c:	66 5f       	subi	r22, 0xF6	; 246
    1d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <writestr_OLED>
	return(NOERROR);
    1d66:	80 e0       	ldi	r24, 0x00	; 0

}
    1d68:	6a 96       	adiw	r28, 0x1a	; 26
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	08 95       	ret

00001d74 <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(uint8_t cstack)
{
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	69 97       	sbiw	r28, 0x19	; 25
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	de bf       	out	0x3e, r29	; 62

	const char dformat_OPE[] = "Open %s";
    1d82:	98 e0       	ldi	r25, 0x08	; 8
    1d84:	ef e8       	ldi	r30, 0x8F	; 143
    1d86:	f7 ea       	ldi	r31, 0xA7	; 167
    1d88:	de 01       	movw	r26, r28
    1d8a:	11 96       	adiw	r26, 0x01	; 1
    1d8c:	01 90       	ld	r0, Z+
    1d8e:	0d 92       	st	X+, r0
    1d90:	9a 95       	dec	r25
    1d92:	e1 f7       	brne	.-8      	; 0x1d8c <open_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1d94:	24 e3       	ldi	r18, 0x34	; 52
    1d96:	82 9f       	mul	r24, r18
    1d98:	c0 01       	movw	r24, r0
    1d9a:	11 24       	eor	r1, r1
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	e3 5f       	subi	r30, 0xF3	; 243
    1da0:	f7 4d       	sbci	r31, 0xD7	; 215
    1da2:	81 81       	ldd	r24, Z+1	; 0x01
    1da4:	8c 36       	cpi	r24, 0x6C	; 108
    1da6:	31 f1       	breq	.+76     	; 0x1df4 <open_PNEU+0x80>
    1da8:	18 f4       	brcc	.+6      	; 0x1db0 <open_PNEU+0x3c>
    1daa:	82 36       	cpi	r24, 0x62	; 98
    1dac:	39 f0       	breq	.+14     	; 0x1dbc <open_PNEU+0x48>
    1dae:	6a c0       	rjmp	.+212    	; 0x1e84 <open_PNEU+0x110>
    1db0:	82 37       	cpi	r24, 0x72	; 114
    1db2:	c1 f1       	breq	.+112    	; 0x1e24 <open_PNEU+0xb0>
    1db4:	83 37       	cpi	r24, 0x73	; 115
    1db6:	09 f4       	brne	.+2      	; 0x1dba <open_PNEU+0x46>
    1db8:	4d c0       	rjmp	.+154    	; 0x1e54 <open_PNEU+0xe0>
    1dba:	64 c0       	rjmp	.+200    	; 0x1e84 <open_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1dbc:	6e ea       	ldi	r22, 0xAE	; 174
    1dbe:	84 e4       	ldi	r24, 0x44	; 68
    1dc0:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1dc4:	6e e6       	ldi	r22, 0x6E	; 110
    1dc6:	88 e8       	ldi	r24, 0x88	; 136
    1dc8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1dcc:	8c e2       	ldi	r24, 0x2C	; 44
    1dce:	97 ea       	ldi	r25, 0xA7	; 167
    1dd0:	9f 93       	push	r25
    1dd2:	8f 93       	push	r24
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	01 96       	adiw	r24, 0x01	; 1
    1dd8:	9f 93       	push	r25
    1dda:	8f 93       	push	r24
    1ddc:	08 96       	adiw	r24, 0x08	; 8
    1dde:	9f 93       	push	r25
    1de0:	8f 93       	push	r24
    1de2:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			break;
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	59 c0       	rjmp	.+178    	; 0x1ea6 <open_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1df4:	6e ea       	ldi	r22, 0xAE	; 174
    1df6:	84 e4       	ldi	r24, 0x44	; 68
    1df8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1dfc:	81 e3       	ldi	r24, 0x31	; 49
    1dfe:	97 ea       	ldi	r25, 0xA7	; 167
    1e00:	9f 93       	push	r25
    1e02:	8f 93       	push	r24
    1e04:	ce 01       	movw	r24, r28
    1e06:	01 96       	adiw	r24, 0x01	; 1
    1e08:	9f 93       	push	r25
    1e0a:	8f 93       	push	r24
    1e0c:	08 96       	adiw	r24, 0x08	; 8
    1e0e:	9f 93       	push	r25
    1e10:	8f 93       	push	r24
    1e12:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			break;
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	41 c0       	rjmp	.+130    	; 0x1ea6 <open_PNEU+0x132>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1e24:	6e e6       	ldi	r22, 0x6E	; 110
    1e26:	88 e8       	ldi	r24, 0x88	; 136
    1e28:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1e2c:	86 e3       	ldi	r24, 0x36	; 54
    1e2e:	97 ea       	ldi	r25, 0xA7	; 167
    1e30:	9f 93       	push	r25
    1e32:	8f 93       	push	r24
    1e34:	ce 01       	movw	r24, r28
    1e36:	01 96       	adiw	r24, 0x01	; 1
    1e38:	9f 93       	push	r25
    1e3a:	8f 93       	push	r24
    1e3c:	08 96       	adiw	r24, 0x08	; 8
    1e3e:	9f 93       	push	r25
    1e40:	8f 93       	push	r24
    1e42:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			break;
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	29 c0       	rjmp	.+82     	; 0x1ea6 <open_PNEU+0x132>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1e54:	6e ec       	ldi	r22, 0xCE	; 206
    1e56:	82 e2       	ldi	r24, 0x22	; 34
    1e58:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1e5c:	8c e3       	ldi	r24, 0x3C	; 60
    1e5e:	97 ea       	ldi	r25, 0xA7	; 167
    1e60:	9f 93       	push	r25
    1e62:	8f 93       	push	r24
    1e64:	ce 01       	movw	r24, r28
    1e66:	01 96       	adiw	r24, 0x01	; 1
    1e68:	9f 93       	push	r25
    1e6a:	8f 93       	push	r24
    1e6c:	08 96       	adiw	r24, 0x08	; 8
    1e6e:	9f 93       	push	r25
    1e70:	8f 93       	push	r24
    1e72:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			break;
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	11 c0       	rjmp	.+34     	; 0x1ea6 <open_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "open_PNEU bad object");
    1e84:	6f e6       	ldi	r22, 0x6F	; 111
    1e86:	77 ea       	ldi	r23, 0xA7	; 167
    1e88:	85 ef       	ldi	r24, 0xF5	; 245
    1e8a:	91 e0       	ldi	r25, 0x01	; 1
    1e8c:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			strcpy(outbuf, "open what?");
    1e90:	8b e0       	ldi	r24, 0x0B	; 11
    1e92:	e4 e8       	ldi	r30, 0x84	; 132
    1e94:	f7 ea       	ldi	r31, 0xA7	; 167
    1e96:	de 01       	movw	r26, r28
    1e98:	19 96       	adiw	r26, 0x09	; 9
    1e9a:	01 90       	ld	r0, Z+
    1e9c:	0d 92       	st	X+, r0
    1e9e:	8a 95       	dec	r24
    1ea0:	e1 f7       	brne	.-8      	; 0x1e9a <open_PNEU+0x126>
			return(ERROR);
    1ea2:	83 e6       	ldi	r24, 0x63	; 99
    1ea4:	0b c0       	rjmp	.+22     	; 0x1ebc <open_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	be 01       	movw	r22, r28
    1eb0:	67 5f       	subi	r22, 0xF7	; 247
    1eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <writestr_OLED>
	return(NOERROR);
    1eba:	80 e0       	ldi	r24, 0x00	; 0

}
    1ebc:	69 96       	adiw	r28, 0x19	; 25
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	08 95       	ret

00001ec8 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1ec8:	1f 92       	push	r1
    1eca:	0f 92       	push	r0
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	0f 92       	push	r0
    1ed0:	11 24       	eor	r1, r1
    1ed2:	2f 93       	push	r18
    1ed4:	3f 93       	push	r19
    1ed6:	4f 93       	push	r20
    1ed8:	5f 93       	push	r21
    1eda:	6f 93       	push	r22
    1edc:	7f 93       	push	r23
    1ede:	8f 93       	push	r24
    1ee0:	9f 93       	push	r25
    1ee2:	af 93       	push	r26
    1ee4:	bf 93       	push	r27
    1ee6:	ef 93       	push	r30
    1ee8:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1eea:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1eee:	88 23       	and	r24, r24
    1ef0:	4c f4       	brge	.+18     	; 0x1f04 <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1ef2:	80 e8       	ldi	r24, 0x80	; 128
    1ef4:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1ef8:	68 e0       	ldi	r22, 0x08	; 8
    1efa:	81 e2       	ldi	r24, 0x21	; 33
    1efc:	0e 94 fd 09 	call	0x13fa	; 0x13fa <read_MCP23008>
    1f00:	80 93 18 2a 	sts	0x2A18, r24	; 0x802a18 <pneuState>
	}

}
    1f04:	ff 91       	pop	r31
    1f06:	ef 91       	pop	r30
    1f08:	bf 91       	pop	r27
    1f0a:	af 91       	pop	r26
    1f0c:	9f 91       	pop	r25
    1f0e:	8f 91       	pop	r24
    1f10:	7f 91       	pop	r23
    1f12:	6f 91       	pop	r22
    1f14:	5f 91       	pop	r21
    1f16:	4f 91       	pop	r20
    1f18:	3f 91       	pop	r19
    1f1a:	2f 91       	pop	r18
    1f1c:	0f 90       	pop	r0
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	0f 90       	pop	r0
    1f22:	1f 90       	pop	r1
    1f24:	18 95       	reti

00001f26 <init_PORTS>:
void init_PORTS(void)
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTB.DIRSET = PIN2_bm;		// Beeper
    1f26:	84 e0       	ldi	r24, 0x04	; 4
    1f28:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7f4421>
	PORTF.DIRCLR = PIN2_bm;		// specID jumper
    1f2c:	e0 ea       	ldi	r30, 0xA0	; 160
    1f2e:	f4 e0       	ldi	r31, 0x04	; 4
    1f30:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRSET = PIN5_bm;		// On-board LED
    1f32:	80 e2       	ldi	r24, 0x20	; 32
    1f34:	81 83       	std	Z+1, r24	; 0x01
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton
    1f36:	8b e0       	ldi	r24, 0x0B	; 11
    1f38:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.OUTCLR = PIN3_bm;		// Reset the XPort
    1f3a:	e0 e4       	ldi	r30, 0x40	; 64
    1f3c:	f4 e0       	ldi	r31, 0x04	; 4
    1f3e:	88 e0       	ldi	r24, 0x08	; 8
    1f40:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;		// Set XPort reset pin as output
    1f42:	81 83       	std	Z+1, r24	; 0x01
    1f44:	ad e8       	ldi	r26, 0x8D	; 141
    1f46:	b0 e2       	ldi	r27, 0x20	; 32
    1f48:	11 97       	sbiw	r26, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <init_PORTS+0x22>
    1f4c:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;		// Enable the XPort
    1f4e:	85 83       	std	Z+5, r24	; 0x05
    1f50:	08 95       	ret

00001f52 <report>:

	Returns:
		ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1f52:	2f 92       	push	r2
    1f54:	3f 92       	push	r3
    1f56:	4f 92       	push	r4
    1f58:	5f 92       	push	r5
    1f5a:	6f 92       	push	r6
    1f5c:	7f 92       	push	r7
    1f5e:	8f 92       	push	r8
    1f60:	9f 92       	push	r9
    1f62:	af 92       	push	r10
    1f64:	bf 92       	push	r11
    1f66:	cf 92       	push	r12
    1f68:	df 92       	push	r13
    1f6a:	ef 92       	push	r14
    1f6c:	ff 92       	push	r15
    1f6e:	0f 93       	push	r16
    1f70:	1f 93       	push	r17
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	c4 54       	subi	r28, 0x44	; 68
    1f7c:	d3 40       	sbci	r29, 0x03	; 3
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "ENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
    1f82:	95 e4       	ldi	r25, 0x45	; 69
    1f84:	e2 ec       	ldi	r30, 0xC2	; 194
    1f86:	f8 ea       	ldi	r31, 0xA8	; 168
    1f88:	de 01       	movw	r26, r28
    1f8a:	a6 5b       	subi	r26, 0xB6	; 182
    1f8c:	be 4f       	sbci	r27, 0xFE	; 254
    1f8e:	01 90       	ld	r0, Z+
    1f90:	0d 92       	st	X+, r0
    1f92:	9a 95       	dec	r25
    1f94:	e1 f7       	brne	.-8      	; 0x1f8e <report+0x3c>
	const char format_MTR[] = "MTR,%s,%c,%ld,um,%ld,um/s,%d,mA,%s";
    1f96:	93 e2       	ldi	r25, 0x23	; 35
    1f98:	e7 e0       	ldi	r30, 0x07	; 7
    1f9a:	f9 ea       	ldi	r31, 0xA9	; 169
    1f9c:	de 01       	movw	r26, r28
    1f9e:	a1 57       	subi	r26, 0x71	; 113
    1fa0:	be 4f       	sbci	r27, 0xFE	; 254
    1fa2:	01 90       	ld	r0, Z+
    1fa4:	0d 92       	st	X+, r0
    1fa6:	9a 95       	dec	r25
    1fa8:	e1 f7       	brne	.-8      	; 0x1fa2 <report+0x50>
	const char format_MTV[] = "MTV,%s,Motor %c,%3.1f,V,%ld,mA,%3.1f,C,%.2f,p,%.3f,i,%.2f,d,%ld,maxI,%ld,dead,%ld,minP,%ld,maxP,%ld,qpps,%s";
    1faa:	9c e6       	ldi	r25, 0x6C	; 108
    1fac:	ea e2       	ldi	r30, 0x2A	; 42
    1fae:	f9 ea       	ldi	r31, 0xA9	; 169
    1fb0:	de 01       	movw	r26, r28
    1fb2:	ae 54       	subi	r26, 0x4E	; 78
    1fb4:	be 4f       	sbci	r27, 0xFE	; 254
    1fb6:	01 90       	ld	r0, Z+
    1fb8:	0d 92       	st	X+, r0
    1fba:	9a 95       	dec	r25
    1fbc:	e1 f7       	brne	.-8      	; 0x1fb6 <report+0x64>
	const char format_ORI[] = "ORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1fbe:	9c e1       	ldi	r25, 0x1C	; 28
    1fc0:	e6 e9       	ldi	r30, 0x96	; 150
    1fc2:	f9 ea       	ldi	r31, 0xA9	; 169
    1fc4:	de 01       	movw	r26, r28
    1fc6:	a2 5e       	subi	r26, 0xE2	; 226
    1fc8:	bd 4f       	sbci	r27, 0xFD	; 253
    1fca:	01 90       	ld	r0, Z+
    1fcc:	0d 92       	st	X+, r0
    1fce:	9a 95       	dec	r25
    1fd0:	e1 f7       	brne	.-8      	; 0x1fca <report+0x78>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1fd2:	92 e1       	ldi	r25, 0x12	; 18
    1fd4:	e2 eb       	ldi	r30, 0xB2	; 178
    1fd6:	f9 ea       	ldi	r31, 0xA9	; 169
    1fd8:	de 01       	movw	r26, r28
    1fda:	a6 5c       	subi	r26, 0xC6	; 198
    1fdc:	bd 4f       	sbci	r27, 0xFD	; 253
    1fde:	01 90       	ld	r0, Z+
    1fe0:	0d 92       	st	X+, r0
    1fe2:	9a 95       	dec	r25
    1fe4:	e1 f7       	brne	.-8      	; 0x1fde <report+0x8c>
	const char format_PNU[] = "PNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1fe6:	9d e2       	ldi	r25, 0x2D	; 45
    1fe8:	e4 ec       	ldi	r30, 0xC4	; 196
    1fea:	f9 ea       	ldi	r31, 0xA9	; 169
    1fec:	de 01       	movw	r26, r28
    1fee:	a4 5b       	subi	r26, 0xB4	; 180
    1ff0:	bd 4f       	sbci	r27, 0xFD	; 253
    1ff2:	01 90       	ld	r0, Z+
    1ff4:	0d 92       	st	X+, r0
    1ff6:	9a 95       	dec	r25
    1ff8:	e1 f7       	brne	.-8      	; 0x1ff2 <report+0xa0>
	const char dformat_PN1[] = "Left:%c   Right:%c";
    1ffa:	93 e1       	ldi	r25, 0x13	; 19
    1ffc:	e1 ef       	ldi	r30, 0xF1	; 241
    1ffe:	f9 ea       	ldi	r31, 0xA9	; 169
    2000:	de 01       	movw	r26, r28
    2002:	a7 58       	subi	r26, 0x87	; 135
    2004:	bd 4f       	sbci	r27, 0xFD	; 253
    2006:	01 90       	ld	r0, Z+
    2008:	0d 92       	st	X+, r0
    200a:	9a 95       	dec	r25
    200c:	e1 f7       	brne	.-8      	; 0x2006 <report+0xb4>
	const char dformat_PN2[] = "Shutter:%c  Air:%c";
    200e:	93 e1       	ldi	r25, 0x13	; 19
    2010:	e4 e0       	ldi	r30, 0x04	; 4
    2012:	fa ea       	ldi	r31, 0xAA	; 170
    2014:	de 01       	movw	r26, r28
    2016:	a4 57       	subi	r26, 0x74	; 116
    2018:	bd 4f       	sbci	r27, 0xFD	; 253
    201a:	01 90       	ld	r0, Z+
    201c:	0d 92       	st	X+, r0
    201e:	9a 95       	dec	r25
    2020:	e1 f7       	brne	.-8      	; 0x201a <report+0xc8>
	const char format_TIM[] = "TIM,%s,%s,set,%s,boot,%s";
    2022:	99 e1       	ldi	r25, 0x19	; 25
    2024:	e7 e1       	ldi	r30, 0x17	; 23
    2026:	fa ea       	ldi	r31, 0xAA	; 170
    2028:	de 01       	movw	r26, r28
    202a:	a1 56       	subi	r26, 0x61	; 97
    202c:	bd 4f       	sbci	r27, 0xFD	; 253
    202e:	01 90       	ld	r0, Z+
    2030:	0d 92       	st	X+, r0
    2032:	9a 95       	dec	r25
    2034:	e1 f7       	brne	.-8      	; 0x202e <report+0xdc>
	const char format_VAC[] = "VAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    2036:	95 e2       	ldi	r25, 0x25	; 37
    2038:	e0 e3       	ldi	r30, 0x30	; 48
    203a:	fa ea       	ldi	r31, 0xAA	; 170
    203c:	de 01       	movw	r26, r28
    203e:	a8 54       	subi	r26, 0x48	; 72
    2040:	bd 4f       	sbci	r27, 0xFD	; 253
    2042:	01 90       	ld	r0, Z+
    2044:	0d 92       	st	X+, r0
    2046:	9a 95       	dec	r25
    2048:	e1 f7       	brne	.-8      	; 0x2042 <report+0xf0>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    204a:	9d e0       	ldi	r25, 0x0D	; 13
    204c:	e5 e5       	ldi	r30, 0x55	; 85
    204e:	fa ea       	ldi	r31, 0xAA	; 170
    2050:	de 01       	movw	r26, r28
    2052:	a3 52       	subi	r26, 0x23	; 35
    2054:	bd 4f       	sbci	r27, 0xFD	; 253
    2056:	01 90       	ld	r0, Z+
    2058:	0d 92       	st	X+, r0
    205a:	9a 95       	dec	r25
    205c:	e1 f7       	brne	.-8      	; 0x2056 <report+0x104>
	const char format_VER[] = "VER,%s,%s,%s";
    205e:	9d e0       	ldi	r25, 0x0D	; 13
    2060:	e2 e6       	ldi	r30, 0x62	; 98
    2062:	fa ea       	ldi	r31, 0xAA	; 170
    2064:	de 01       	movw	r26, r28
    2066:	a6 51       	subi	r26, 0x16	; 22
    2068:	bd 4f       	sbci	r27, 0xFD	; 253
    206a:	01 90       	ld	r0, Z+
    206c:	0d 92       	st	X+, r0
    206e:	9a 95       	dec	r25
    2070:	e1 f7       	brne	.-8      	; 0x206a <report+0x118>
	uint16_t motorCurrent;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	PID pid;

	switch(pcmd[cstack].cobject) {
    2072:	08 2f       	mov	r16, r24
    2074:	10 e0       	ldi	r17, 0x00	; 0
    2076:	84 e3       	ldi	r24, 0x34	; 52
    2078:	80 9f       	mul	r24, r16
    207a:	f0 01       	movw	r30, r0
    207c:	81 9f       	mul	r24, r17
    207e:	f0 0d       	add	r31, r0
    2080:	11 24       	eor	r1, r1
    2082:	e3 5f       	subi	r30, 0xF3	; 243
    2084:	f7 4d       	sbci	r31, 0xD7	; 215
    2086:	e1 81       	ldd	r30, Z+1	; 0x01
    2088:	8e 2f       	mov	r24, r30
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	fc 01       	movw	r30, r24
    208e:	e1 54       	subi	r30, 0x41	; 65
    2090:	f1 09       	sbc	r31, r1
    2092:	e6 33       	cpi	r30, 0x36	; 54
    2094:	f1 05       	cpc	r31, r1
    2096:	08 f0       	brcs	.+2      	; 0x209a <report+0x148>
    2098:	b1 c5       	rjmp	.+2914   	; 0x2bfc <report+0xcaa>
    209a:	e4 58       	subi	r30, 0x84	; 132
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	0c 94 97 2f 	jmp	0x5f2e	; 0x5f2e <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    20a2:	ce 01       	movw	r24, r28
    20a4:	86 5f       	subi	r24, 0xF6	; 246
    20a6:	9e 4f       	sbci	r25, 0xFE	; 254
    20a8:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
			controller = pcmd[cstack].cobject + 63;
    20ac:	84 e3       	ldi	r24, 0x34	; 52
    20ae:	80 9f       	mul	r24, r16
    20b0:	f0 01       	movw	r30, r0
    20b2:	81 9f       	mul	r24, r17
    20b4:	f0 0d       	add	r31, r0
    20b6:	11 24       	eor	r1, r1
    20b8:	e3 5f       	subi	r30, 0xF3	; 243
    20ba:	f7 4d       	sbci	r31, 0xD7	; 215
    20bc:	d1 80       	ldd	r13, Z+1	; 0x01
    20be:	0f 2e       	mov	r0, r31
    20c0:	ff e3       	ldi	r31, 0x3F	; 63
    20c2:	ef 2e       	mov	r14, r31
    20c4:	f0 2d       	mov	r31, r0
    20c6:	ed 0c       	add	r14, r13
			if (get_MOTOR_FLOAT(controller, READMAINVOLTAGE, &voltage) == ERROR) {
    20c8:	ae 01       	movw	r20, r28
    20ca:	49 5f       	subi	r20, 0xF9	; 249
    20cc:	5c 4f       	sbci	r21, 0xFC	; 252
    20ce:	68 e1       	ldi	r22, 0x18	; 24
    20d0:	8e 2d       	mov	r24, r14
    20d2:	0e 94 c9 18 	call	0x3192	; 0x3192 <get_MOTOR_FLOAT>
    20d6:	f8 2e       	mov	r15, r24
    20d8:	83 e6       	ldi	r24, 0x63	; 99
    20da:	f8 12       	cpse	r15, r24
    20dc:	07 c0       	rjmp	.+14     	; 0x20ec <report+0x19a>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT volts error");
    20de:	67 e9       	ldi	r22, 0x97	; 151
    20e0:	77 ea       	ldi	r23, 0xA7	; 167
    20e2:	86 e3       	ldi	r24, 0x36	; 54
    20e4:	91 e0       	ldi	r25, 0x01	; 1
    20e6:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				return(ERROR);
    20ea:	92 c5       	rjmp	.+2852   	; 0x2c10 <report+0xcbe>
			}
			if (get_MOTOR_FLOAT(controller, READTEMPERATURE, &t0) == ERROR) {
    20ec:	ae 01       	movw	r20, r28
    20ee:	4d 5f       	subi	r20, 0xFD	; 253
    20f0:	5c 4f       	sbci	r21, 0xFC	; 252
    20f2:	62 e5       	ldi	r22, 0x52	; 82
    20f4:	8e 2d       	mov	r24, r14
    20f6:	0e 94 c9 18 	call	0x3192	; 0x3192 <get_MOTOR_FLOAT>
    20fa:	f8 2e       	mov	r15, r24
    20fc:	93 e6       	ldi	r25, 0x63	; 99
    20fe:	89 13       	cpse	r24, r25
    2100:	07 c0       	rjmp	.+14     	; 0x2110 <report+0x1be>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT temperature error");
    2102:	6b eb       	ldi	r22, 0xBB	; 187
    2104:	77 ea       	ldi	r23, 0xA7	; 167
    2106:	86 e3       	ldi	r24, 0x36	; 54
    2108:	91 e0       	ldi	r25, 0x01	; 1
    210a:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				return(ERROR);
    210e:	80 c5       	rjmp	.+2816   	; 0x2c10 <report+0xcbe>
			}
			if (get_MOTOR_PID(controller, &pid) == ERROR) {
    2110:	be 01       	movw	r22, r28
    2112:	67 5e       	subi	r22, 0xE7	; 231
    2114:	7c 4f       	sbci	r23, 0xFC	; 252
    2116:	8e 2d       	mov	r24, r14
    2118:	0e 94 cf 19 	call	0x339e	; 0x339e <get_MOTOR_PID>
    211c:	f8 2e       	mov	r15, r24
    211e:	83 e6       	ldi	r24, 0x63	; 99
    2120:	f8 12       	cpse	r15, r24
    2122:	07 c0       	rjmp	.+14     	; 0x2132 <report+0x1e0>
				printError(ERR_MTR, "report: get_MOTOR_PID error");
    2124:	65 ee       	ldi	r22, 0xE5	; 229
    2126:	77 ea       	ldi	r23, 0xA7	; 167
    2128:	86 e3       	ldi	r24, 0x36	; 54
    212a:	91 e0       	ldi	r25, 0x01	; 1
    212c:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				return(ERROR);
    2130:	6f c5       	rjmp	.+2782   	; 0x2c10 <report+0xcbe>
			}
			if (get_MOTOR_MAXCURRENT(controller, &maxCurrent) == ERROR) {
    2132:	be 01       	movw	r22, r28
    2134:	61 50       	subi	r22, 0x01	; 1
    2136:	7d 4f       	sbci	r23, 0xFD	; 253
    2138:	8e 2d       	mov	r24, r14
    213a:	0e 94 3c 19 	call	0x3278	; 0x3278 <get_MOTOR_MAXCURRENT>
    213e:	f8 2e       	mov	r15, r24
    2140:	93 e6       	ldi	r25, 0x63	; 99
    2142:	89 13       	cpse	r24, r25
    2144:	07 c0       	rjmp	.+14     	; 0x2154 <report+0x202>
				printError(ERR_MTR, "report: get_MOTOR_MAXCURRENT error");
    2146:	61 e0       	ldi	r22, 0x01	; 1
    2148:	78 ea       	ldi	r23, 0xA8	; 168
    214a:	86 e3       	ldi	r24, 0x36	; 54
    214c:	91 e0       	ldi	r25, 0x01	; 1
    214e:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				return(ERROR);
    2152:	5e c5       	rjmp	.+2748   	; 0x2c10 <report+0xcbe>
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, maxCurrent, t0, pid.p, pid.i, pid.d, pid.maxI, pid.deadZone,
				pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
    2154:	24 e3       	ldi	r18, 0x34	; 52
    2156:	20 9f       	mul	r18, r16
    2158:	c0 01       	movw	r24, r0
    215a:	21 9f       	mul	r18, r17
    215c:	90 0d       	add	r25, r0
    215e:	11 24       	eor	r1, r1
    2160:	88 5c       	subi	r24, 0xC8	; 200
    2162:	97 4d       	sbci	r25, 0xD7	; 215
			if (get_MOTOR_MAXCURRENT(controller, &maxCurrent) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_MAXCURRENT error");
				return(ERROR);
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, maxCurrent, t0, pid.p, pid.i, pid.d, pid.maxI, pid.deadZone,
    2164:	cf 5d       	subi	r28, 0xDF	; 223
    2166:	dc 4f       	sbci	r29, 0xFC	; 252
    2168:	a8 81       	ld	r26, Y
    216a:	c1 52       	subi	r28, 0x21	; 33
    216c:	d3 40       	sbci	r29, 0x03	; 3
    216e:	ce 5d       	subi	r28, 0xDE	; 222
    2170:	dc 4f       	sbci	r29, 0xFC	; 252
    2172:	b8 81       	ld	r27, Y
    2174:	c2 52       	subi	r28, 0x22	; 34
    2176:	d3 40       	sbci	r29, 0x03	; 3
    2178:	cd 5d       	subi	r28, 0xDD	; 221
    217a:	dc 4f       	sbci	r29, 0xFC	; 252
    217c:	18 81       	ld	r17, Y
    217e:	c3 52       	subi	r28, 0x23	; 35
    2180:	d3 40       	sbci	r29, 0x03	; 3
    2182:	cc 5d       	subi	r28, 0xDC	; 220
    2184:	dc 4f       	sbci	r29, 0xFC	; 252
    2186:	08 81       	ld	r16, Y
    2188:	c4 52       	subi	r28, 0x24	; 36
    218a:	d3 40       	sbci	r29, 0x03	; 3
    218c:	c3 5e       	subi	r28, 0xE3	; 227
    218e:	dc 4f       	sbci	r29, 0xFC	; 252
    2190:	68 81       	ld	r22, Y
    2192:	cd 51       	subi	r28, 0x1D	; 29
    2194:	d3 40       	sbci	r29, 0x03	; 3
    2196:	c2 5e       	subi	r28, 0xE2	; 226
    2198:	dc 4f       	sbci	r29, 0xFC	; 252
    219a:	78 81       	ld	r23, Y
    219c:	ce 51       	subi	r28, 0x1E	; 30
    219e:	d3 40       	sbci	r29, 0x03	; 3
    21a0:	c1 5e       	subi	r28, 0xE1	; 225
    21a2:	dc 4f       	sbci	r29, 0xFC	; 252
    21a4:	e8 81       	ld	r30, Y
    21a6:	cf 51       	subi	r28, 0x1F	; 31
    21a8:	d3 40       	sbci	r29, 0x03	; 3
    21aa:	c0 5e       	subi	r28, 0xE0	; 224
    21ac:	dc 4f       	sbci	r29, 0xFC	; 252
    21ae:	f8 81       	ld	r31, Y
    21b0:	c0 52       	subi	r28, 0x20	; 32
    21b2:	d3 40       	sbci	r29, 0x03	; 3
    21b4:	c7 5e       	subi	r28, 0xE7	; 231
    21b6:	dc 4f       	sbci	r29, 0xFC	; 252
    21b8:	28 81       	ld	r18, Y
    21ba:	c9 51       	subi	r28, 0x19	; 25
    21bc:	d3 40       	sbci	r29, 0x03	; 3
    21be:	c6 5e       	subi	r28, 0xE6	; 230
    21c0:	dc 4f       	sbci	r29, 0xFC	; 252
    21c2:	38 81       	ld	r19, Y
    21c4:	ca 51       	subi	r28, 0x1A	; 26
    21c6:	d3 40       	sbci	r29, 0x03	; 3
    21c8:	c5 5e       	subi	r28, 0xE5	; 229
    21ca:	dc 4f       	sbci	r29, 0xFC	; 252
    21cc:	48 81       	ld	r20, Y
    21ce:	cb 51       	subi	r28, 0x1B	; 27
    21d0:	d3 40       	sbci	r29, 0x03	; 3
    21d2:	c4 5e       	subi	r28, 0xE4	; 228
    21d4:	dc 4f       	sbci	r29, 0xFC	; 252
    21d6:	58 81       	ld	r21, Y
    21d8:	cc 51       	subi	r28, 0x1C	; 28
    21da:	d3 40       	sbci	r29, 0x03	; 3
			}
			if (get_MOTOR_MAXCURRENT(controller, &maxCurrent) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_MAXCURRENT error");
				return(ERROR);
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
    21dc:	9f 93       	push	r25
    21de:	8f 93       	push	r24
    21e0:	c8 5c       	subi	r28, 0xC8	; 200
    21e2:	dc 4f       	sbci	r29, 0xFC	; 252
    21e4:	88 81       	ld	r24, Y
    21e6:	c8 53       	subi	r28, 0x38	; 56
    21e8:	d3 40       	sbci	r29, 0x03	; 3
    21ea:	8f 93       	push	r24
    21ec:	c9 5c       	subi	r28, 0xC9	; 201
    21ee:	dc 4f       	sbci	r29, 0xFC	; 252
    21f0:	88 81       	ld	r24, Y
    21f2:	c7 53       	subi	r28, 0x37	; 55
    21f4:	d3 40       	sbci	r29, 0x03	; 3
    21f6:	8f 93       	push	r24
    21f8:	ca 5c       	subi	r28, 0xCA	; 202
    21fa:	dc 4f       	sbci	r29, 0xFC	; 252
    21fc:	88 81       	ld	r24, Y
    21fe:	c6 53       	subi	r28, 0x36	; 54
    2200:	d3 40       	sbci	r29, 0x03	; 3
    2202:	8f 93       	push	r24
    2204:	cb 5c       	subi	r28, 0xCB	; 203
    2206:	dc 4f       	sbci	r29, 0xFC	; 252
    2208:	88 81       	ld	r24, Y
    220a:	c5 53       	subi	r28, 0x35	; 53
    220c:	d3 40       	sbci	r29, 0x03	; 3
    220e:	8f 93       	push	r24
    2210:	cc 5c       	subi	r28, 0xCC	; 204
    2212:	dc 4f       	sbci	r29, 0xFC	; 252
    2214:	88 81       	ld	r24, Y
    2216:	c4 53       	subi	r28, 0x34	; 52
    2218:	d3 40       	sbci	r29, 0x03	; 3
    221a:	8f 93       	push	r24
    221c:	cd 5c       	subi	r28, 0xCD	; 205
    221e:	dc 4f       	sbci	r29, 0xFC	; 252
    2220:	88 81       	ld	r24, Y
    2222:	c3 53       	subi	r28, 0x33	; 51
    2224:	d3 40       	sbci	r29, 0x03	; 3
    2226:	8f 93       	push	r24
    2228:	ce 5c       	subi	r28, 0xCE	; 206
    222a:	dc 4f       	sbci	r29, 0xFC	; 252
    222c:	88 81       	ld	r24, Y
    222e:	c2 53       	subi	r28, 0x32	; 50
    2230:	d3 40       	sbci	r29, 0x03	; 3
    2232:	8f 93       	push	r24
    2234:	cf 5c       	subi	r28, 0xCF	; 207
    2236:	dc 4f       	sbci	r29, 0xFC	; 252
    2238:	88 81       	ld	r24, Y
    223a:	c1 53       	subi	r28, 0x31	; 49
    223c:	d3 40       	sbci	r29, 0x03	; 3
    223e:	8f 93       	push	r24
    2240:	c0 5d       	subi	r28, 0xD0	; 208
    2242:	dc 4f       	sbci	r29, 0xFC	; 252
    2244:	88 81       	ld	r24, Y
    2246:	c0 53       	subi	r28, 0x30	; 48
    2248:	d3 40       	sbci	r29, 0x03	; 3
    224a:	8f 93       	push	r24
    224c:	c1 5d       	subi	r28, 0xD1	; 209
    224e:	dc 4f       	sbci	r29, 0xFC	; 252
    2250:	88 81       	ld	r24, Y
    2252:	cf 52       	subi	r28, 0x2F	; 47
    2254:	d3 40       	sbci	r29, 0x03	; 3
    2256:	8f 93       	push	r24
    2258:	c2 5d       	subi	r28, 0xD2	; 210
    225a:	dc 4f       	sbci	r29, 0xFC	; 252
    225c:	88 81       	ld	r24, Y
    225e:	ce 52       	subi	r28, 0x2E	; 46
    2260:	d3 40       	sbci	r29, 0x03	; 3
    2262:	8f 93       	push	r24
    2264:	c3 5d       	subi	r28, 0xD3	; 211
    2266:	dc 4f       	sbci	r29, 0xFC	; 252
    2268:	88 81       	ld	r24, Y
    226a:	cd 52       	subi	r28, 0x2D	; 45
    226c:	d3 40       	sbci	r29, 0x03	; 3
    226e:	8f 93       	push	r24
    2270:	c4 5d       	subi	r28, 0xD4	; 212
    2272:	dc 4f       	sbci	r29, 0xFC	; 252
    2274:	88 81       	ld	r24, Y
    2276:	cc 52       	subi	r28, 0x2C	; 44
    2278:	d3 40       	sbci	r29, 0x03	; 3
    227a:	8f 93       	push	r24
    227c:	c5 5d       	subi	r28, 0xD5	; 213
    227e:	dc 4f       	sbci	r29, 0xFC	; 252
    2280:	88 81       	ld	r24, Y
    2282:	cb 52       	subi	r28, 0x2B	; 43
    2284:	d3 40       	sbci	r29, 0x03	; 3
    2286:	8f 93       	push	r24
    2288:	c6 5d       	subi	r28, 0xD6	; 214
    228a:	dc 4f       	sbci	r29, 0xFC	; 252
    228c:	88 81       	ld	r24, Y
    228e:	ca 52       	subi	r28, 0x2A	; 42
    2290:	d3 40       	sbci	r29, 0x03	; 3
    2292:	8f 93       	push	r24
    2294:	c7 5d       	subi	r28, 0xD7	; 215
    2296:	dc 4f       	sbci	r29, 0xFC	; 252
    2298:	88 81       	ld	r24, Y
    229a:	c9 52       	subi	r28, 0x29	; 41
    229c:	d3 40       	sbci	r29, 0x03	; 3
    229e:	8f 93       	push	r24
    22a0:	c8 5d       	subi	r28, 0xD8	; 216
    22a2:	dc 4f       	sbci	r29, 0xFC	; 252
    22a4:	88 81       	ld	r24, Y
    22a6:	c8 52       	subi	r28, 0x28	; 40
    22a8:	d3 40       	sbci	r29, 0x03	; 3
    22aa:	8f 93       	push	r24
    22ac:	c9 5d       	subi	r28, 0xD9	; 217
    22ae:	dc 4f       	sbci	r29, 0xFC	; 252
    22b0:	88 81       	ld	r24, Y
    22b2:	c7 52       	subi	r28, 0x27	; 39
    22b4:	d3 40       	sbci	r29, 0x03	; 3
    22b6:	8f 93       	push	r24
    22b8:	ca 5d       	subi	r28, 0xDA	; 218
    22ba:	dc 4f       	sbci	r29, 0xFC	; 252
    22bc:	88 81       	ld	r24, Y
    22be:	c6 52       	subi	r28, 0x26	; 38
    22c0:	d3 40       	sbci	r29, 0x03	; 3
    22c2:	8f 93       	push	r24
    22c4:	cb 5d       	subi	r28, 0xDB	; 219
    22c6:	dc 4f       	sbci	r29, 0xFC	; 252
    22c8:	88 81       	ld	r24, Y
    22ca:	c5 52       	subi	r28, 0x25	; 37
    22cc:	d3 40       	sbci	r29, 0x03	; 3
    22ce:	8f 93       	push	r24
    22d0:	0f 93       	push	r16
    22d2:	1f 93       	push	r17
    22d4:	bf 93       	push	r27
    22d6:	af 93       	push	r26
    22d8:	ff 93       	push	r31
    22da:	ef 93       	push	r30
    22dc:	7f 93       	push	r23
    22de:	6f 93       	push	r22
    22e0:	5f 93       	push	r21
    22e2:	4f 93       	push	r20
    22e4:	3f 93       	push	r19
    22e6:	2f 93       	push	r18
    22e8:	ca 5f       	subi	r28, 0xFA	; 250
    22ea:	dc 4f       	sbci	r29, 0xFC	; 252
    22ec:	88 81       	ld	r24, Y
    22ee:	c6 50       	subi	r28, 0x06	; 6
    22f0:	d3 40       	sbci	r29, 0x03	; 3
    22f2:	8f 93       	push	r24
    22f4:	cb 5f       	subi	r28, 0xFB	; 251
    22f6:	dc 4f       	sbci	r29, 0xFC	; 252
    22f8:	88 81       	ld	r24, Y
    22fa:	c5 50       	subi	r28, 0x05	; 5
    22fc:	d3 40       	sbci	r29, 0x03	; 3
    22fe:	8f 93       	push	r24
    2300:	cc 5f       	subi	r28, 0xFC	; 252
    2302:	dc 4f       	sbci	r29, 0xFC	; 252
    2304:	88 81       	ld	r24, Y
    2306:	c4 50       	subi	r28, 0x04	; 4
    2308:	d3 40       	sbci	r29, 0x03	; 3
    230a:	8f 93       	push	r24
    230c:	cd 5f       	subi	r28, 0xFD	; 253
    230e:	dc 4f       	sbci	r29, 0xFC	; 252
    2310:	88 81       	ld	r24, Y
    2312:	c3 50       	subi	r28, 0x03	; 3
    2314:	d3 40       	sbci	r29, 0x03	; 3
    2316:	8f 93       	push	r24
    2318:	ce 5f       	subi	r28, 0xFE	; 254
    231a:	dc 4f       	sbci	r29, 0xFC	; 252
    231c:	88 81       	ld	r24, Y
    231e:	c2 50       	subi	r28, 0x02	; 2
    2320:	d3 40       	sbci	r29, 0x03	; 3
    2322:	8f 93       	push	r24
    2324:	cf 5f       	subi	r28, 0xFF	; 255
    2326:	dc 4f       	sbci	r29, 0xFC	; 252
    2328:	88 81       	ld	r24, Y
    232a:	c1 50       	subi	r28, 0x01	; 1
    232c:	d3 40       	sbci	r29, 0x03	; 3
    232e:	8f 93       	push	r24
    2330:	c0 50       	subi	r28, 0x00	; 0
    2332:	dd 4f       	sbci	r29, 0xFD	; 253
    2334:	88 81       	ld	r24, Y
    2336:	c0 50       	subi	r28, 0x00	; 0
    2338:	d3 40       	sbci	r29, 0x03	; 3
    233a:	8f 93       	push	r24
    233c:	c1 50       	subi	r28, 0x01	; 1
    233e:	dd 4f       	sbci	r29, 0xFD	; 253
    2340:	88 81       	ld	r24, Y
    2342:	cf 5f       	subi	r28, 0xFF	; 255
    2344:	d2 40       	sbci	r29, 0x02	; 2
    2346:	8f 93       	push	r24
    2348:	c6 5f       	subi	r28, 0xF6	; 246
    234a:	dc 4f       	sbci	r29, 0xFC	; 252
    234c:	88 81       	ld	r24, Y
    234e:	ca 50       	subi	r28, 0x0A	; 10
    2350:	d3 40       	sbci	r29, 0x03	; 3
    2352:	8f 93       	push	r24
    2354:	c7 5f       	subi	r28, 0xF7	; 247
    2356:	dc 4f       	sbci	r29, 0xFC	; 252
    2358:	88 81       	ld	r24, Y
    235a:	c9 50       	subi	r28, 0x09	; 9
    235c:	d3 40       	sbci	r29, 0x03	; 3
    235e:	8f 93       	push	r24
    2360:	c8 5f       	subi	r28, 0xF8	; 248
    2362:	dc 4f       	sbci	r29, 0xFC	; 252
    2364:	88 81       	ld	r24, Y
    2366:	c8 50       	subi	r28, 0x08	; 8
    2368:	d3 40       	sbci	r29, 0x03	; 3
    236a:	8f 93       	push	r24
    236c:	c9 5f       	subi	r28, 0xF9	; 249
    236e:	dc 4f       	sbci	r29, 0xFC	; 252
    2370:	88 81       	ld	r24, Y
    2372:	c7 50       	subi	r28, 0x07	; 7
    2374:	d3 40       	sbci	r29, 0x03	; 3
    2376:	8f 93       	push	r24
    2378:	1f 92       	push	r1
    237a:	df 92       	push	r13
    237c:	ce 01       	movw	r24, r28
    237e:	86 5f       	subi	r24, 0xF6	; 246
    2380:	9e 4f       	sbci	r25, 0xFE	; 254
    2382:	9f 93       	push	r25
    2384:	8f 93       	push	r24
    2386:	88 55       	subi	r24, 0x58	; 88
    2388:	9f 4f       	sbci	r25, 0xFF	; 255
    238a:	9f 93       	push	r25
    238c:	8f 93       	push	r24
    238e:	8e 01       	movw	r16, r28
    2390:	0f 5f       	subi	r16, 0xFF	; 255
    2392:	1f 4f       	sbci	r17, 0xFF	; 255
    2394:	1f 93       	push	r17
    2396:	0f 93       	push	r16
    2398:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
				voltage, maxCurrent, t0, pid.p, pid.i, pid.d, pid.maxI, pid.deadZone,
				pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
			printLine(outbuf);
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	de bf       	out	0x3e, r29	; 62
    23a0:	c8 01       	movw	r24, r16
    23a2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    23a6:	f1 2c       	mov	r15, r1
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, maxCurrent, t0, pid.p, pid.i, pid.d, pid.maxI, pid.deadZone,
				pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    23a8:	33 c4       	rjmp	.+2150   	; 0x2c10 <report+0xcbe>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    23aa:	ce 01       	movw	r24, r28
    23ac:	86 5f       	subi	r24, 0xF6	; 246
    23ae:	9e 4f       	sbci	r25, 0xFE	; 254
    23b0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
			controller = pcmd[cstack].cobject + 31;
    23b4:	84 e3       	ldi	r24, 0x34	; 52
    23b6:	80 9f       	mul	r24, r16
    23b8:	f0 01       	movw	r30, r0
    23ba:	81 9f       	mul	r24, r17
    23bc:	f0 0d       	add	r31, r0
    23be:	11 24       	eor	r1, r1
    23c0:	e3 5f       	subi	r30, 0xF3	; 243
    23c2:	f7 4d       	sbci	r31, 0xD7	; 215
    23c4:	81 81       	ldd	r24, Z+1	; 0x01
    23c6:	0f 2e       	mov	r0, r31
    23c8:	ff e1       	ldi	r31, 0x1F	; 31
    23ca:	ef 2e       	mov	r14, r31
    23cc:	f0 2d       	mov	r31, r0
    23ce:	e8 0e       	add	r14, r24

			if (get_MOTOR_ENCODER(controller, &encoderValue) == ERROR) {
    23d0:	be 01       	movw	r22, r28
    23d2:	69 50       	subi	r22, 0x09	; 9
    23d4:	7d 4f       	sbci	r23, 0xFD	; 253
    23d6:	8e 2d       	mov	r24, r14
    23d8:	0e 94 3b 18 	call	0x3076	; 0x3076 <get_MOTOR_ENCODER>
    23dc:	f8 2e       	mov	r15, r24
    23de:	93 e6       	ldi	r25, 0x63	; 99
    23e0:	89 13       	cpse	r24, r25
    23e2:	07 c0       	rjmp	.+14     	; 0x23f2 <report+0x4a0>
				printError(ERR_MTR, "report: get_MOTOR_ENCODER error");
    23e4:	64 e2       	ldi	r22, 0x24	; 36
    23e6:	78 ea       	ldi	r23, 0xA8	; 168
    23e8:	86 e3       	ldi	r24, 0x36	; 54
    23ea:	91 e0       	ldi	r25, 0x01	; 1
    23ec:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				return(ERROR);
    23f0:	0f c4       	rjmp	.+2078   	; 0x2c10 <report+0xcbe>
			}
			micronValue = encoderValue/ENC_COUNTS_PER_MICRON;
    23f2:	c9 50       	subi	r28, 0x09	; 9
    23f4:	dd 4f       	sbci	r29, 0xFD	; 253
    23f6:	68 81       	ld	r22, Y
    23f8:	79 81       	ldd	r23, Y+1	; 0x01
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	9b 81       	ldd	r25, Y+3	; 0x03
    23fe:	c7 5f       	subi	r28, 0xF7	; 247
    2400:	d2 40       	sbci	r29, 0x02	; 2
    2402:	2b e1       	ldi	r18, 0x1B	; 27
    2404:	31 e0       	ldi	r19, 0x01	; 1
    2406:	40 e0       	ldi	r20, 0x00	; 0
    2408:	50 e0       	ldi	r21, 0x00	; 0
    240a:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <__divmodsi4>
    240e:	f2 2e       	mov	r15, r18
    2410:	d3 2e       	mov	r13, r19
    2412:	c4 2e       	mov	r12, r20
    2414:	b5 2e       	mov	r11, r21

			if (get_MOTOR_SPEED(controller, &encoderSpeed) == ERROR) {
    2416:	be 01       	movw	r22, r28
    2418:	65 50       	subi	r22, 0x05	; 5
    241a:	7d 4f       	sbci	r23, 0xFD	; 253
    241c:	8e 2d       	mov	r24, r14
    241e:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <get_MOTOR_SPEED>
    2422:	83 36       	cpi	r24, 0x63	; 99
    2424:	61 f4       	brne	.+24     	; 0x243e <report+0x4ec>
				encoderSpeed = 0x7FFFFFFF;
    2426:	8f ef       	ldi	r24, 0xFF	; 255
    2428:	9f ef       	ldi	r25, 0xFF	; 255
    242a:	af ef       	ldi	r26, 0xFF	; 255
    242c:	bf e7       	ldi	r27, 0x7F	; 127
    242e:	c5 50       	subi	r28, 0x05	; 5
    2430:	dd 4f       	sbci	r29, 0xFD	; 253
    2432:	88 83       	st	Y, r24
    2434:	99 83       	std	Y+1, r25	; 0x01
    2436:	aa 83       	std	Y+2, r26	; 0x02
    2438:	bb 83       	std	Y+3, r27	; 0x03
    243a:	cb 5f       	subi	r28, 0xFB	; 251
    243c:	d2 40       	sbci	r29, 0x02	; 2
			}

			micronSpeed = encoderSpeed/ENC_COUNTS_PER_MICRON;
    243e:	c5 50       	subi	r28, 0x05	; 5
    2440:	dd 4f       	sbci	r29, 0xFD	; 253
    2442:	68 81       	ld	r22, Y
    2444:	79 81       	ldd	r23, Y+1	; 0x01
    2446:	8a 81       	ldd	r24, Y+2	; 0x02
    2448:	9b 81       	ldd	r25, Y+3	; 0x03
    244a:	cb 5f       	subi	r28, 0xFB	; 251
    244c:	d2 40       	sbci	r29, 0x02	; 2
    244e:	2b e1       	ldi	r18, 0x1B	; 27
    2450:	31 e0       	ldi	r19, 0x01	; 1
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	50 e0       	ldi	r21, 0x00	; 0
    2456:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <__divmodsi4>
    245a:	a2 2e       	mov	r10, r18
    245c:	93 2e       	mov	r9, r19
    245e:	84 2e       	mov	r8, r20
    2460:	75 2e       	mov	r7, r21

			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
    2462:	be 01       	movw	r22, r28
    2464:	65 5f       	subi	r22, 0xF5	; 245
    2466:	7c 4f       	sbci	r23, 0xFC	; 252
    2468:	8e 2d       	mov	r24, r14
    246a:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <get_MOTOR_CURRENT>
    246e:	83 36       	cpi	r24, 0x63	; 99
    2470:	71 f4       	brne	.+28     	; 0x248e <report+0x53c>
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
    2472:	64 e4       	ldi	r22, 0x44	; 68
    2474:	78 ea       	ldi	r23, 0xA8	; 168
    2476:	86 e3       	ldi	r24, 0x36	; 54
    2478:	91 e0       	ldi	r25, 0x01	; 1
    247a:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				motorCurrent = 0xFFFF;
    247e:	8f ef       	ldi	r24, 0xFF	; 255
    2480:	9f ef       	ldi	r25, 0xFF	; 255
    2482:	c5 5f       	subi	r28, 0xF5	; 245
    2484:	dc 4f       	sbci	r29, 0xFC	; 252
    2486:	88 83       	st	Y, r24
    2488:	99 83       	std	Y+1, r25	; 0x01
    248a:	cb 50       	subi	r28, 0x0B	; 11
    248c:	d3 40       	sbci	r29, 0x03	; 3
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
			micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
    248e:	24 e3       	ldi	r18, 0x34	; 52
    2490:	20 9f       	mul	r18, r16
    2492:	c0 01       	movw	r24, r0
    2494:	21 9f       	mul	r18, r17
    2496:	90 0d       	add	r25, r0
    2498:	11 24       	eor	r1, r1
    249a:	9c 01       	movw	r18, r24
    249c:	28 5c       	subi	r18, 0xC8	; 200
    249e:	37 4d       	sbci	r19, 0xD7	; 215

			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
				motorCurrent = 0xFFFF;
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
    24a0:	fc 01       	movw	r30, r24
    24a2:	e3 5f       	subi	r30, 0xF3	; 243
    24a4:	f7 4d       	sbci	r31, 0xD7	; 215
    24a6:	81 81       	ldd	r24, Z+1	; 0x01
    24a8:	3f 93       	push	r19
    24aa:	2f 93       	push	r18
    24ac:	c4 5f       	subi	r28, 0xF4	; 244
    24ae:	dc 4f       	sbci	r29, 0xFC	; 252
    24b0:	98 81       	ld	r25, Y
    24b2:	cc 50       	subi	r28, 0x0C	; 12
    24b4:	d3 40       	sbci	r29, 0x03	; 3
    24b6:	9f 93       	push	r25
    24b8:	c5 5f       	subi	r28, 0xF5	; 245
    24ba:	dc 4f       	sbci	r29, 0xFC	; 252
    24bc:	98 81       	ld	r25, Y
    24be:	cb 50       	subi	r28, 0x0B	; 11
    24c0:	d3 40       	sbci	r29, 0x03	; 3
    24c2:	9f 93       	push	r25
    24c4:	7f 92       	push	r7
    24c6:	8f 92       	push	r8
    24c8:	9f 92       	push	r9
    24ca:	af 92       	push	r10
    24cc:	bf 92       	push	r11
    24ce:	cf 92       	push	r12
    24d0:	df 92       	push	r13
    24d2:	ff 92       	push	r15
    24d4:	1f 92       	push	r1
    24d6:	8f 93       	push	r24
    24d8:	ce 01       	movw	r24, r28
    24da:	86 5f       	subi	r24, 0xF6	; 246
    24dc:	9e 4f       	sbci	r25, 0xFE	; 254
    24de:	9f 93       	push	r25
    24e0:	8f 93       	push	r24
    24e2:	8b 57       	subi	r24, 0x7B	; 123
    24e4:	9f 4f       	sbci	r25, 0xFF	; 255
    24e6:	9f 93       	push	r25
    24e8:	8f 93       	push	r24
    24ea:	8e 01       	movw	r16, r28
    24ec:	0f 5f       	subi	r16, 0xFF	; 255
    24ee:	1f 4f       	sbci	r17, 0xFF	; 255
    24f0:	1f 93       	push	r17
    24f2:	0f 93       	push	r16
    24f4:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
			printLine(outbuf);
    24f8:	c8 01       	movw	r24, r16
    24fa:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			break;
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2502:	f1 2c       	mov	r15, r1
				motorCurrent = 0xFFFF;
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
			micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    2504:	85 c3       	rjmp	.+1802   	; 0x2c10 <report+0xcbe>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	0e 94 7d 25 	call	0x4afa	; 0x4afa <get_temperature>
    250c:	cd 5f       	subi	r28, 0xFD	; 253
    250e:	dc 4f       	sbci	r29, 0xFC	; 252
    2510:	68 83       	st	Y, r22
    2512:	79 83       	std	Y+1, r23	; 0x01
    2514:	8a 83       	std	Y+2, r24	; 0x02
    2516:	9b 83       	std	Y+3, r25	; 0x03
    2518:	c3 50       	subi	r28, 0x03	; 3
    251a:	d3 40       	sbci	r29, 0x03	; 3
			h0 = get_humidity(0);
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <get_humidity>
    2522:	d6 2e       	mov	r13, r22
    2524:	c7 2e       	mov	r12, r23
    2526:	b8 2e       	mov	r11, r24
    2528:	a9 2e       	mov	r10, r25
			t1 = get_temperature(1);
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	0e 94 7d 25 	call	0x4afa	; 0x4afa <get_temperature>
    2530:	c7 5c       	subi	r28, 0xC7	; 199
    2532:	dc 4f       	sbci	r29, 0xFC	; 252
    2534:	68 83       	st	Y, r22
    2536:	c9 53       	subi	r28, 0x39	; 57
    2538:	d3 40       	sbci	r29, 0x03	; 3
    253a:	c6 5c       	subi	r28, 0xC6	; 198
    253c:	dc 4f       	sbci	r29, 0xFC	; 252
    253e:	78 83       	st	Y, r23
    2540:	ca 53       	subi	r28, 0x3A	; 58
    2542:	d3 40       	sbci	r29, 0x03	; 3
    2544:	c5 5c       	subi	r28, 0xC5	; 197
    2546:	dc 4f       	sbci	r29, 0xFC	; 252
    2548:	88 83       	st	Y, r24
    254a:	cb 53       	subi	r28, 0x3B	; 59
    254c:	d3 40       	sbci	r29, 0x03	; 3
    254e:	c4 5c       	subi	r28, 0xC4	; 196
    2550:	dc 4f       	sbci	r29, 0xFC	; 252
    2552:	98 83       	st	Y, r25
    2554:	cc 53       	subi	r28, 0x3C	; 60
    2556:	d3 40       	sbci	r29, 0x03	; 3
			h1 = get_humidity(1);
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <get_humidity>
    255e:	c3 5c       	subi	r28, 0xC3	; 195
    2560:	dc 4f       	sbci	r29, 0xFC	; 252
    2562:	68 83       	st	Y, r22
    2564:	cd 53       	subi	r28, 0x3D	; 61
    2566:	d3 40       	sbci	r29, 0x03	; 3
    2568:	c2 5c       	subi	r28, 0xC2	; 194
    256a:	dc 4f       	sbci	r29, 0xFC	; 252
    256c:	78 83       	st	Y, r23
    256e:	ce 53       	subi	r28, 0x3E	; 62
    2570:	d3 40       	sbci	r29, 0x03	; 3
    2572:	c1 5c       	subi	r28, 0xC1	; 193
    2574:	dc 4f       	sbci	r29, 0xFC	; 252
    2576:	88 83       	st	Y, r24
    2578:	cf 53       	subi	r28, 0x3F	; 63
    257a:	d3 40       	sbci	r29, 0x03	; 3
    257c:	c0 5c       	subi	r28, 0xC0	; 192
    257e:	dc 4f       	sbci	r29, 0xFC	; 252
    2580:	98 83       	st	Y, r25
    2582:	c0 54       	subi	r28, 0x40	; 64
    2584:	d3 40       	sbci	r29, 0x03	; 3
			t2 = get_temperature(2);
    2586:	82 e0       	ldi	r24, 0x02	; 2
    2588:	0e 94 7d 25 	call	0x4afa	; 0x4afa <get_temperature>
    258c:	cf 5b       	subi	r28, 0xBF	; 191
    258e:	dc 4f       	sbci	r29, 0xFC	; 252
    2590:	68 83       	st	Y, r22
    2592:	c1 54       	subi	r28, 0x41	; 65
    2594:	d3 40       	sbci	r29, 0x03	; 3
    2596:	ce 5b       	subi	r28, 0xBE	; 190
    2598:	dc 4f       	sbci	r29, 0xFC	; 252
    259a:	78 83       	st	Y, r23
    259c:	c2 54       	subi	r28, 0x42	; 66
    259e:	d3 40       	sbci	r29, 0x03	; 3
    25a0:	98 2e       	mov	r9, r24
    25a2:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    25a4:	82 e0       	ldi	r24, 0x02	; 2
    25a6:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <get_humidity>
    25aa:	76 2e       	mov	r7, r22
    25ac:	67 2e       	mov	r6, r23
    25ae:	58 2e       	mov	r5, r24
    25b0:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    25b2:	83 e0       	ldi	r24, 0x03	; 3
    25b4:	0e 94 7d 25 	call	0x4afa	; 0x4afa <get_temperature>
    25b8:	cd 5b       	subi	r28, 0xBD	; 189
    25ba:	dc 4f       	sbci	r29, 0xFC	; 252
    25bc:	68 83       	st	Y, r22
    25be:	c3 54       	subi	r28, 0x43	; 67
    25c0:	d3 40       	sbci	r29, 0x03	; 3
    25c2:	cc 5b       	subi	r28, 0xBC	; 188
    25c4:	dc 4f       	sbci	r29, 0xFC	; 252
    25c6:	78 83       	st	Y, r23
    25c8:	c4 54       	subi	r28, 0x44	; 68
    25ca:	d3 40       	sbci	r29, 0x03	; 3
    25cc:	38 2e       	mov	r3, r24
    25ce:	29 2e       	mov	r2, r25
			get_time(currenttime);
    25d0:	7e 01       	movw	r14, r28
    25d2:	96 ef       	ldi	r25, 0xF6	; 246
    25d4:	e9 1a       	sub	r14, r25
    25d6:	9e ef       	ldi	r25, 0xFE	; 254
    25d8:	f9 0a       	sbc	r15, r25
    25da:	c7 01       	movw	r24, r14
    25dc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    25e0:	24 e3       	ldi	r18, 0x34	; 52
    25e2:	20 9f       	mul	r18, r16
    25e4:	c0 01       	movw	r24, r0
    25e6:	21 9f       	mul	r18, r17
    25e8:	90 0d       	add	r25, r0
    25ea:	11 24       	eor	r1, r1
    25ec:	88 5c       	subi	r24, 0xC8	; 200
    25ee:	97 4d       	sbci	r25, 0xD7	; 215
    25f0:	9f 93       	push	r25
    25f2:	8f 93       	push	r24
    25f4:	2f 92       	push	r2
    25f6:	3f 92       	push	r3
    25f8:	cc 5b       	subi	r28, 0xBC	; 188
    25fa:	dc 4f       	sbci	r29, 0xFC	; 252
    25fc:	88 81       	ld	r24, Y
    25fe:	c4 54       	subi	r28, 0x44	; 68
    2600:	d3 40       	sbci	r29, 0x03	; 3
    2602:	8f 93       	push	r24
    2604:	cd 5b       	subi	r28, 0xBD	; 189
    2606:	dc 4f       	sbci	r29, 0xFC	; 252
    2608:	98 81       	ld	r25, Y
    260a:	c3 54       	subi	r28, 0x43	; 67
    260c:	d3 40       	sbci	r29, 0x03	; 3
    260e:	9f 93       	push	r25
    2610:	4f 92       	push	r4
    2612:	5f 92       	push	r5
    2614:	6f 92       	push	r6
    2616:	7f 92       	push	r7
    2618:	8f 92       	push	r8
    261a:	9f 92       	push	r9
    261c:	ce 5b       	subi	r28, 0xBE	; 190
    261e:	dc 4f       	sbci	r29, 0xFC	; 252
    2620:	88 81       	ld	r24, Y
    2622:	c2 54       	subi	r28, 0x42	; 66
    2624:	d3 40       	sbci	r29, 0x03	; 3
    2626:	8f 93       	push	r24
    2628:	cf 5b       	subi	r28, 0xBF	; 191
    262a:	dc 4f       	sbci	r29, 0xFC	; 252
    262c:	98 81       	ld	r25, Y
    262e:	c1 54       	subi	r28, 0x41	; 65
    2630:	d3 40       	sbci	r29, 0x03	; 3
    2632:	9f 93       	push	r25
    2634:	c0 5c       	subi	r28, 0xC0	; 192
    2636:	dc 4f       	sbci	r29, 0xFC	; 252
    2638:	88 81       	ld	r24, Y
    263a:	c0 54       	subi	r28, 0x40	; 64
    263c:	d3 40       	sbci	r29, 0x03	; 3
    263e:	8f 93       	push	r24
    2640:	c1 5c       	subi	r28, 0xC1	; 193
    2642:	dc 4f       	sbci	r29, 0xFC	; 252
    2644:	98 81       	ld	r25, Y
    2646:	cf 53       	subi	r28, 0x3F	; 63
    2648:	d3 40       	sbci	r29, 0x03	; 3
    264a:	9f 93       	push	r25
    264c:	c2 5c       	subi	r28, 0xC2	; 194
    264e:	dc 4f       	sbci	r29, 0xFC	; 252
    2650:	88 81       	ld	r24, Y
    2652:	ce 53       	subi	r28, 0x3E	; 62
    2654:	d3 40       	sbci	r29, 0x03	; 3
    2656:	8f 93       	push	r24
    2658:	c3 5c       	subi	r28, 0xC3	; 195
    265a:	dc 4f       	sbci	r29, 0xFC	; 252
    265c:	98 81       	ld	r25, Y
    265e:	cd 53       	subi	r28, 0x3D	; 61
    2660:	d3 40       	sbci	r29, 0x03	; 3
    2662:	9f 93       	push	r25
    2664:	c4 5c       	subi	r28, 0xC4	; 196
    2666:	dc 4f       	sbci	r29, 0xFC	; 252
    2668:	88 81       	ld	r24, Y
    266a:	cc 53       	subi	r28, 0x3C	; 60
    266c:	d3 40       	sbci	r29, 0x03	; 3
    266e:	8f 93       	push	r24
    2670:	c5 5c       	subi	r28, 0xC5	; 197
    2672:	dc 4f       	sbci	r29, 0xFC	; 252
    2674:	98 81       	ld	r25, Y
    2676:	cb 53       	subi	r28, 0x3B	; 59
    2678:	d3 40       	sbci	r29, 0x03	; 3
    267a:	9f 93       	push	r25
    267c:	c6 5c       	subi	r28, 0xC6	; 198
    267e:	dc 4f       	sbci	r29, 0xFC	; 252
    2680:	88 81       	ld	r24, Y
    2682:	ca 53       	subi	r28, 0x3A	; 58
    2684:	d3 40       	sbci	r29, 0x03	; 3
    2686:	8f 93       	push	r24
    2688:	c7 5c       	subi	r28, 0xC7	; 199
    268a:	dc 4f       	sbci	r29, 0xFC	; 252
    268c:	98 81       	ld	r25, Y
    268e:	c9 53       	subi	r28, 0x39	; 57
    2690:	d3 40       	sbci	r29, 0x03	; 3
    2692:	9f 93       	push	r25
    2694:	af 92       	push	r10
    2696:	bf 92       	push	r11
    2698:	cf 92       	push	r12
    269a:	df 92       	push	r13
    269c:	ca 5f       	subi	r28, 0xFA	; 250
    269e:	dc 4f       	sbci	r29, 0xFC	; 252
    26a0:	88 81       	ld	r24, Y
    26a2:	c6 50       	subi	r28, 0x06	; 6
    26a4:	d3 40       	sbci	r29, 0x03	; 3
    26a6:	8f 93       	push	r24
    26a8:	cb 5f       	subi	r28, 0xFB	; 251
    26aa:	dc 4f       	sbci	r29, 0xFC	; 252
    26ac:	88 81       	ld	r24, Y
    26ae:	c5 50       	subi	r28, 0x05	; 5
    26b0:	d3 40       	sbci	r29, 0x03	; 3
    26b2:	8f 93       	push	r24
    26b4:	cc 5f       	subi	r28, 0xFC	; 252
    26b6:	dc 4f       	sbci	r29, 0xFC	; 252
    26b8:	88 81       	ld	r24, Y
    26ba:	c4 50       	subi	r28, 0x04	; 4
    26bc:	d3 40       	sbci	r29, 0x03	; 3
    26be:	8f 93       	push	r24
    26c0:	cd 5f       	subi	r28, 0xFD	; 253
    26c2:	dc 4f       	sbci	r29, 0xFC	; 252
    26c4:	88 81       	ld	r24, Y
    26c6:	c3 50       	subi	r28, 0x03	; 3
    26c8:	d3 40       	sbci	r29, 0x03	; 3
    26ca:	8f 93       	push	r24
    26cc:	ff 92       	push	r15
    26ce:	ef 92       	push	r14
    26d0:	ce 01       	movw	r24, r28
    26d2:	86 5b       	subi	r24, 0xB6	; 182
    26d4:	9e 4f       	sbci	r25, 0xFE	; 254
    26d6:	9f 93       	push	r25
    26d8:	8f 93       	push	r24
    26da:	8e 01       	movw	r16, r28
    26dc:	0f 5f       	subi	r16, 0xFF	; 255
    26de:	1f 4f       	sbci	r17, 0xFF	; 255
    26e0:	1f 93       	push	r17
    26e2:	0f 93       	push	r16
    26e4:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			printLine(outbuf);
    26e8:	cd bf       	out	0x3d, r28	; 61
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	c8 01       	movw	r24, r16
    26ee:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "Temp & Humidity", 1);
    26f2:	41 e0       	ldi	r20, 0x01	; 1
    26f4:	64 e6       	ldi	r22, 0x64	; 100
    26f6:	78 ea       	ldi	r23, 0xA8	; 168
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    26fe:	cd 5f       	subi	r28, 0xFD	; 253
    2700:	dc 4f       	sbci	r29, 0xFC	; 252
    2702:	f8 80       	ld	r15, Y
    2704:	c3 50       	subi	r28, 0x03	; 3
    2706:	d3 40       	sbci	r29, 0x03	; 3
    2708:	cc 5f       	subi	r28, 0xFC	; 252
    270a:	dc 4f       	sbci	r29, 0xFC	; 252
    270c:	e8 80       	ld	r14, Y
    270e:	c4 50       	subi	r28, 0x04	; 4
    2710:	d3 40       	sbci	r29, 0x03	; 3
    2712:	cb 5f       	subi	r28, 0xFB	; 251
    2714:	dc 4f       	sbci	r29, 0xFC	; 252
    2716:	98 80       	ld	r9, Y
    2718:	c5 50       	subi	r28, 0x05	; 5
    271a:	d3 40       	sbci	r29, 0x03	; 3
    271c:	ca 5f       	subi	r28, 0xFA	; 250
    271e:	dc 4f       	sbci	r29, 0xFC	; 252
    2720:	88 80       	ld	r8, Y
    2722:	c6 50       	subi	r28, 0x06	; 6
    2724:	d3 40       	sbci	r29, 0x03	; 3
    2726:	26 e6       	ldi	r18, 0x66	; 102
    2728:	36 e6       	ldi	r19, 0x66	; 102
    272a:	46 ee       	ldi	r20, 0xE6	; 230
    272c:	5f e3       	ldi	r21, 0x3F	; 63
    272e:	6f 2d       	mov	r22, r15
    2730:	7e 2d       	mov	r23, r14
    2732:	89 2d       	mov	r24, r9
    2734:	98 2d       	mov	r25, r8
    2736:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
    273a:	af 92       	push	r10
    273c:	bf 92       	push	r11
    273e:	cf 92       	push	r12
    2740:	df 92       	push	r13
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e0       	ldi	r20, 0x00	; 0
    2748:	52 e4       	ldi	r21, 0x42	; 66
    274a:	0e 94 aa 29 	call	0x5354	; 0x5354 <__addsf3>
    274e:	9f 93       	push	r25
    2750:	8f 93       	push	r24
    2752:	7f 93       	push	r23
    2754:	6f 93       	push	r22
    2756:	8f 92       	push	r8
    2758:	9f 92       	push	r9
    275a:	ef 92       	push	r14
    275c:	ff 92       	push	r15
    275e:	84 e7       	ldi	r24, 0x74	; 116
    2760:	98 ea       	ldi	r25, 0xA8	; 168
    2762:	9f 93       	push	r25
    2764:	8f 93       	push	r24
    2766:	1f 93       	push	r17
    2768:	0f 93       	push	r16
    276a:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			writestr_OLED(1, outbuf, 2);
    276e:	42 e0       	ldi	r20, 0x02	; 2
    2770:	b8 01       	movw	r22, r16
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <writestr_OLED>
			break;
    2778:	cd bf       	out	0x3d, r28	; 61
    277a:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    277c:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    277e:	48 c2       	rjmp	.+1168   	; 0x2c10 <report+0xcbe>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    2780:	ae 01       	movw	r20, r28
    2782:	4b 5e       	subi	r20, 0xEB	; 235
    2784:	5c 4f       	sbci	r21, 0xFC	; 252
    2786:	be 01       	movw	r22, r28
    2788:	6f 5e       	subi	r22, 0xEF	; 239
    278a:	7c 4f       	sbci	r23, 0xFC	; 252
    278c:	ce 01       	movw	r24, r28
    278e:	83 5f       	subi	r24, 0xF3	; 243
    2790:	9c 4f       	sbci	r25, 0xFC	; 252
    2792:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <get_orientation>
			get_time(currenttime);
    2796:	7e 01       	movw	r14, r28
    2798:	96 ef       	ldi	r25, 0xF6	; 246
    279a:	e9 1a       	sub	r14, r25
    279c:	9e ef       	ldi	r25, 0xFE	; 254
    279e:	f9 0a       	sbc	r15, r25
    27a0:	c7 01       	movw	r24, r14
    27a2:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
    27a6:	24 e3       	ldi	r18, 0x34	; 52
    27a8:	20 9f       	mul	r18, r16
    27aa:	c0 01       	movw	r24, r0
    27ac:	21 9f       	mul	r18, r17
    27ae:	90 0d       	add	r25, r0
    27b0:	11 24       	eor	r1, r1
    27b2:	88 5c       	subi	r24, 0xC8	; 200
    27b4:	97 4d       	sbci	r25, 0xD7	; 215
    27b6:	9f 93       	push	r25
    27b8:	8f 93       	push	r24
    27ba:	c8 5e       	subi	r28, 0xE8	; 232
    27bc:	dc 4f       	sbci	r29, 0xFC	; 252
    27be:	88 81       	ld	r24, Y
    27c0:	c8 51       	subi	r28, 0x18	; 24
    27c2:	d3 40       	sbci	r29, 0x03	; 3
    27c4:	8f 93       	push	r24
    27c6:	c9 5e       	subi	r28, 0xE9	; 233
    27c8:	dc 4f       	sbci	r29, 0xFC	; 252
    27ca:	88 81       	ld	r24, Y
    27cc:	c7 51       	subi	r28, 0x17	; 23
    27ce:	d3 40       	sbci	r29, 0x03	; 3
    27d0:	8f 93       	push	r24
    27d2:	ca 5e       	subi	r28, 0xEA	; 234
    27d4:	dc 4f       	sbci	r29, 0xFC	; 252
    27d6:	88 81       	ld	r24, Y
    27d8:	c6 51       	subi	r28, 0x16	; 22
    27da:	d3 40       	sbci	r29, 0x03	; 3
    27dc:	8f 93       	push	r24
    27de:	cb 5e       	subi	r28, 0xEB	; 235
    27e0:	dc 4f       	sbci	r29, 0xFC	; 252
    27e2:	88 81       	ld	r24, Y
    27e4:	c5 51       	subi	r28, 0x15	; 21
    27e6:	d3 40       	sbci	r29, 0x03	; 3
    27e8:	8f 93       	push	r24
    27ea:	cc 5e       	subi	r28, 0xEC	; 236
    27ec:	dc 4f       	sbci	r29, 0xFC	; 252
    27ee:	88 81       	ld	r24, Y
    27f0:	c4 51       	subi	r28, 0x14	; 20
    27f2:	d3 40       	sbci	r29, 0x03	; 3
    27f4:	8f 93       	push	r24
    27f6:	cd 5e       	subi	r28, 0xED	; 237
    27f8:	dc 4f       	sbci	r29, 0xFC	; 252
    27fa:	88 81       	ld	r24, Y
    27fc:	c3 51       	subi	r28, 0x13	; 19
    27fe:	d3 40       	sbci	r29, 0x03	; 3
    2800:	8f 93       	push	r24
    2802:	ce 5e       	subi	r28, 0xEE	; 238
    2804:	dc 4f       	sbci	r29, 0xFC	; 252
    2806:	88 81       	ld	r24, Y
    2808:	c2 51       	subi	r28, 0x12	; 18
    280a:	d3 40       	sbci	r29, 0x03	; 3
    280c:	8f 93       	push	r24
    280e:	cf 5e       	subi	r28, 0xEF	; 239
    2810:	dc 4f       	sbci	r29, 0xFC	; 252
    2812:	88 81       	ld	r24, Y
    2814:	c1 51       	subi	r28, 0x11	; 17
    2816:	d3 40       	sbci	r29, 0x03	; 3
    2818:	8f 93       	push	r24
    281a:	c0 5f       	subi	r28, 0xF0	; 240
    281c:	dc 4f       	sbci	r29, 0xFC	; 252
    281e:	88 81       	ld	r24, Y
    2820:	c0 51       	subi	r28, 0x10	; 16
    2822:	d3 40       	sbci	r29, 0x03	; 3
    2824:	8f 93       	push	r24
    2826:	c1 5f       	subi	r28, 0xF1	; 241
    2828:	dc 4f       	sbci	r29, 0xFC	; 252
    282a:	88 81       	ld	r24, Y
    282c:	cf 50       	subi	r28, 0x0F	; 15
    282e:	d3 40       	sbci	r29, 0x03	; 3
    2830:	8f 93       	push	r24
    2832:	c2 5f       	subi	r28, 0xF2	; 242
    2834:	dc 4f       	sbci	r29, 0xFC	; 252
    2836:	88 81       	ld	r24, Y
    2838:	ce 50       	subi	r28, 0x0E	; 14
    283a:	d3 40       	sbci	r29, 0x03	; 3
    283c:	8f 93       	push	r24
    283e:	c3 5f       	subi	r28, 0xF3	; 243
    2840:	dc 4f       	sbci	r29, 0xFC	; 252
    2842:	88 81       	ld	r24, Y
    2844:	cd 50       	subi	r28, 0x0D	; 13
    2846:	d3 40       	sbci	r29, 0x03	; 3
    2848:	8f 93       	push	r24
    284a:	ff 92       	push	r15
    284c:	ef 92       	push	r14
    284e:	ce 01       	movw	r24, r28
    2850:	82 5e       	subi	r24, 0xE2	; 226
    2852:	9d 4f       	sbci	r25, 0xFD	; 253
    2854:	9f 93       	push	r25
    2856:	8f 93       	push	r24
    2858:	8e 01       	movw	r16, r28
    285a:	0f 5f       	subi	r16, 0xFF	; 255
    285c:	1f 4f       	sbci	r17, 0xFF	; 255
    285e:	1f 93       	push	r17
    2860:	0f 93       	push	r16
    2862:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			printLine(outbuf);
    2866:	c8 01       	movw	r24, r16
    2868:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "Orientation", 1);
    286c:	41 e0       	ldi	r20, 0x01	; 1
    286e:	6a e8       	ldi	r22, 0x8A	; 138
    2870:	78 ea       	ldi	r23, 0xA8	; 168
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    2878:	c8 5e       	subi	r28, 0xE8	; 232
    287a:	dc 4f       	sbci	r29, 0xFC	; 252
    287c:	88 81       	ld	r24, Y
    287e:	c8 51       	subi	r28, 0x18	; 24
    2880:	d3 40       	sbci	r29, 0x03	; 3
    2882:	8f 93       	push	r24
    2884:	c9 5e       	subi	r28, 0xE9	; 233
    2886:	dc 4f       	sbci	r29, 0xFC	; 252
    2888:	88 81       	ld	r24, Y
    288a:	c7 51       	subi	r28, 0x17	; 23
    288c:	d3 40       	sbci	r29, 0x03	; 3
    288e:	8f 93       	push	r24
    2890:	ca 5e       	subi	r28, 0xEA	; 234
    2892:	dc 4f       	sbci	r29, 0xFC	; 252
    2894:	88 81       	ld	r24, Y
    2896:	c6 51       	subi	r28, 0x16	; 22
    2898:	d3 40       	sbci	r29, 0x03	; 3
    289a:	8f 93       	push	r24
    289c:	cb 5e       	subi	r28, 0xEB	; 235
    289e:	dc 4f       	sbci	r29, 0xFC	; 252
    28a0:	88 81       	ld	r24, Y
    28a2:	c5 51       	subi	r28, 0x15	; 21
    28a4:	d3 40       	sbci	r29, 0x03	; 3
    28a6:	8f 93       	push	r24
    28a8:	cc 5e       	subi	r28, 0xEC	; 236
    28aa:	dc 4f       	sbci	r29, 0xFC	; 252
    28ac:	88 81       	ld	r24, Y
    28ae:	c4 51       	subi	r28, 0x14	; 20
    28b0:	d3 40       	sbci	r29, 0x03	; 3
    28b2:	8f 93       	push	r24
    28b4:	cd 5e       	subi	r28, 0xED	; 237
    28b6:	dc 4f       	sbci	r29, 0xFC	; 252
    28b8:	88 81       	ld	r24, Y
    28ba:	c3 51       	subi	r28, 0x13	; 19
    28bc:	d3 40       	sbci	r29, 0x03	; 3
    28be:	8f 93       	push	r24
    28c0:	ce 5e       	subi	r28, 0xEE	; 238
    28c2:	dc 4f       	sbci	r29, 0xFC	; 252
    28c4:	88 81       	ld	r24, Y
    28c6:	c2 51       	subi	r28, 0x12	; 18
    28c8:	d3 40       	sbci	r29, 0x03	; 3
    28ca:	8f 93       	push	r24
    28cc:	cf 5e       	subi	r28, 0xEF	; 239
    28ce:	dc 4f       	sbci	r29, 0xFC	; 252
    28d0:	88 81       	ld	r24, Y
    28d2:	c1 51       	subi	r28, 0x11	; 17
    28d4:	d3 40       	sbci	r29, 0x03	; 3
    28d6:	8f 93       	push	r24
    28d8:	c0 5f       	subi	r28, 0xF0	; 240
    28da:	dc 4f       	sbci	r29, 0xFC	; 252
    28dc:	88 81       	ld	r24, Y
    28de:	c0 51       	subi	r28, 0x10	; 16
    28e0:	d3 40       	sbci	r29, 0x03	; 3
    28e2:	8f 93       	push	r24
    28e4:	c1 5f       	subi	r28, 0xF1	; 241
    28e6:	dc 4f       	sbci	r29, 0xFC	; 252
    28e8:	88 81       	ld	r24, Y
    28ea:	cf 50       	subi	r28, 0x0F	; 15
    28ec:	d3 40       	sbci	r29, 0x03	; 3
    28ee:	8f 93       	push	r24
    28f0:	c2 5f       	subi	r28, 0xF2	; 242
    28f2:	dc 4f       	sbci	r29, 0xFC	; 252
    28f4:	88 81       	ld	r24, Y
    28f6:	ce 50       	subi	r28, 0x0E	; 14
    28f8:	d3 40       	sbci	r29, 0x03	; 3
    28fa:	8f 93       	push	r24
    28fc:	c3 5f       	subi	r28, 0xF3	; 243
    28fe:	dc 4f       	sbci	r29, 0xFC	; 252
    2900:	88 81       	ld	r24, Y
    2902:	cd 50       	subi	r28, 0x0D	; 13
    2904:	d3 40       	sbci	r29, 0x03	; 3
    2906:	8f 93       	push	r24
    2908:	ce 01       	movw	r24, r28
    290a:	86 5c       	subi	r24, 0xC6	; 198
    290c:	9d 4f       	sbci	r25, 0xFD	; 253
    290e:	9f 93       	push	r25
    2910:	8f 93       	push	r24
    2912:	1f 93       	push	r17
    2914:	0f 93       	push	r16
    2916:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			writestr_OLED(1, outbuf, 2);
    291a:	cd bf       	out	0x3d, r28	; 61
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	42 e0       	ldi	r20, 0x02	; 2
    2920:	b8 01       	movw	r22, r16
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2928:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    292a:	72 c1       	rjmp	.+740    	; 0x2c10 <report+0xcbe>

		case 'p':					// Pneumatics
			get_time(currenttime);
    292c:	7e 01       	movw	r14, r28
    292e:	96 ef       	ldi	r25, 0xF6	; 246
    2930:	e9 1a       	sub	r14, r25
    2932:	9e ef       	ldi	r25, 0xFE	; 254
    2934:	f9 0a       	sbc	r15, r25
    2936:	c7 01       	movw	r24, r14
    2938:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
			read_PNEUSensors(&shutter, &left, &right, &air);
    293c:	9e 01       	movw	r18, r28
    293e:	27 5b       	subi	r18, 0xB7	; 183
    2940:	3e 4f       	sbci	r19, 0xFE	; 254
    2942:	ae 01       	movw	r20, r28
    2944:	48 5b       	subi	r20, 0xB8	; 184
    2946:	5e 4f       	sbci	r21, 0xFE	; 254
    2948:	be 01       	movw	r22, r28
    294a:	69 5b       	subi	r22, 0xB9	; 185
    294c:	7e 4f       	sbci	r23, 0xFE	; 254
    294e:	ce 01       	movw	r24, r28
    2950:	8a 5b       	subi	r24, 0xBA	; 186
    2952:	9e 4f       	sbci	r25, 0xFE	; 254
    2954:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <read_PNEUSensors>
			sprintf(outbuf, format_PNU, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    2958:	24 e3       	ldi	r18, 0x34	; 52
    295a:	20 9f       	mul	r18, r16
    295c:	c0 01       	movw	r24, r0
    295e:	21 9f       	mul	r18, r17
    2960:	90 0d       	add	r25, r0
    2962:	11 24       	eor	r1, r1
    2964:	88 5c       	subi	r24, 0xC8	; 200
    2966:	97 4d       	sbci	r25, 0xD7	; 215
    2968:	9f 93       	push	r25
    296a:	8f 93       	push	r24
    296c:	c7 5b       	subi	r28, 0xB7	; 183
    296e:	de 4f       	sbci	r29, 0xFE	; 254
    2970:	88 81       	ld	r24, Y
    2972:	c9 54       	subi	r28, 0x49	; 73
    2974:	d1 40       	sbci	r29, 0x01	; 1
    2976:	1f 92       	push	r1
    2978:	8f 93       	push	r24
    297a:	c8 5b       	subi	r28, 0xB8	; 184
    297c:	de 4f       	sbci	r29, 0xFE	; 254
    297e:	88 81       	ld	r24, Y
    2980:	c8 54       	subi	r28, 0x48	; 72
    2982:	d1 40       	sbci	r29, 0x01	; 1
    2984:	1f 92       	push	r1
    2986:	8f 93       	push	r24
    2988:	c9 5b       	subi	r28, 0xB9	; 185
    298a:	de 4f       	sbci	r29, 0xFE	; 254
    298c:	88 81       	ld	r24, Y
    298e:	c7 54       	subi	r28, 0x47	; 71
    2990:	d1 40       	sbci	r29, 0x01	; 1
    2992:	1f 92       	push	r1
    2994:	8f 93       	push	r24
    2996:	ca 5b       	subi	r28, 0xBA	; 186
    2998:	de 4f       	sbci	r29, 0xFE	; 254
    299a:	88 81       	ld	r24, Y
    299c:	c6 54       	subi	r28, 0x46	; 70
    299e:	d1 40       	sbci	r29, 0x01	; 1
    29a0:	1f 92       	push	r1
    29a2:	8f 93       	push	r24
    29a4:	ff 92       	push	r15
    29a6:	ef 92       	push	r14
    29a8:	ce 01       	movw	r24, r28
    29aa:	84 5b       	subi	r24, 0xB4	; 180
    29ac:	9d 4f       	sbci	r25, 0xFD	; 253
    29ae:	9f 93       	push	r25
    29b0:	8f 93       	push	r24
    29b2:	8e 01       	movw	r16, r28
    29b4:	0f 5f       	subi	r16, 0xFF	; 255
    29b6:	1f 4f       	sbci	r17, 0xFF	; 255
    29b8:	1f 93       	push	r17
    29ba:	0f 93       	push	r16
    29bc:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			printLine(outbuf);
    29c0:	c8 01       	movw	r24, r16
    29c2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			sprintf(outbuf, dformat_PN1, left, right);
    29c6:	c8 5b       	subi	r28, 0xB8	; 184
    29c8:	de 4f       	sbci	r29, 0xFE	; 254
    29ca:	88 81       	ld	r24, Y
    29cc:	c8 54       	subi	r28, 0x48	; 72
    29ce:	d1 40       	sbci	r29, 0x01	; 1
    29d0:	1f 92       	push	r1
    29d2:	8f 93       	push	r24
    29d4:	c9 5b       	subi	r28, 0xB9	; 185
    29d6:	de 4f       	sbci	r29, 0xFE	; 254
    29d8:	88 81       	ld	r24, Y
    29da:	c7 54       	subi	r28, 0x47	; 71
    29dc:	d1 40       	sbci	r29, 0x01	; 1
    29de:	1f 92       	push	r1
    29e0:	8f 93       	push	r24
    29e2:	ce 01       	movw	r24, r28
    29e4:	87 58       	subi	r24, 0x87	; 135
    29e6:	9d 4f       	sbci	r25, 0xFD	; 253
    29e8:	9f 93       	push	r25
    29ea:	8f 93       	push	r24
    29ec:	1f 93       	push	r17
    29ee:	0f 93       	push	r16
    29f0:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			writestr_OLED(1, outbuf, 1);
    29f4:	41 e0       	ldi	r20, 0x01	; 1
    29f6:	b8 01       	movw	r22, r16
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    29fe:	c7 5b       	subi	r28, 0xB7	; 183
    2a00:	de 4f       	sbci	r29, 0xFE	; 254
    2a02:	88 81       	ld	r24, Y
    2a04:	c9 54       	subi	r28, 0x49	; 73
    2a06:	d1 40       	sbci	r29, 0x01	; 1
    2a08:	1f 92       	push	r1
    2a0a:	8f 93       	push	r24
    2a0c:	ca 5b       	subi	r28, 0xBA	; 186
    2a0e:	de 4f       	sbci	r29, 0xFE	; 254
    2a10:	88 81       	ld	r24, Y
    2a12:	c6 54       	subi	r28, 0x46	; 70
    2a14:	d1 40       	sbci	r29, 0x01	; 1
    2a16:	1f 92       	push	r1
    2a18:	8f 93       	push	r24
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	84 57       	subi	r24, 0x74	; 116
    2a1e:	9d 4f       	sbci	r25, 0xFD	; 253
    2a20:	9f 93       	push	r25
    2a22:	8f 93       	push	r24
    2a24:	1f 93       	push	r17
    2a26:	0f 93       	push	r16
    2a28:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	de bf       	out	0x3e, r29	; 62
    2a30:	42 e0       	ldi	r20, 0x02	; 2
    2a32:	b8 01       	movw	r22, r16
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2a3a:	f1 2c       	mov	r15, r1
			printLine(outbuf);
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    2a3c:	e9 c0       	rjmp	.+466    	; 0x2c10 <report+0xcbe>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    2a3e:	7e 01       	movw	r14, r28
    2a40:	96 ef       	ldi	r25, 0xF6	; 246
    2a42:	e9 1a       	sub	r14, r25
    2a44:	9e ef       	ldi	r25, 0xFE	; 254
    2a46:	f9 0a       	sbc	r15, r25
    2a48:	c7 01       	movw	r24, r14
    2a4a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
			get_SETTIME(lastsettime);
    2a4e:	6e 01       	movw	r12, r28
    2a50:	82 ee       	ldi	r24, 0xE2	; 226
    2a52:	c8 1a       	sub	r12, r24
    2a54:	8e ef       	ldi	r24, 0xFE	; 254
    2a56:	d8 0a       	sbc	r13, r24
    2a58:	c6 01       	movw	r24, r12
    2a5a:	0e 94 19 08 	call	0x1032	; 0x1032 <get_SETTIME>
			get_BOOTTIME(boottime);
    2a5e:	5e 01       	movw	r10, r28
    2a60:	9e ec       	ldi	r25, 0xCE	; 206
    2a62:	a9 1a       	sub	r10, r25
    2a64:	9e ef       	ldi	r25, 0xFE	; 254
    2a66:	b9 0a       	sbc	r11, r25
    2a68:	c5 01       	movw	r24, r10
    2a6a:	0e 94 49 07 	call	0xe92	; 0xe92 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    2a6e:	24 e3       	ldi	r18, 0x34	; 52
    2a70:	20 9f       	mul	r18, r16
    2a72:	c0 01       	movw	r24, r0
    2a74:	21 9f       	mul	r18, r17
    2a76:	90 0d       	add	r25, r0
    2a78:	11 24       	eor	r1, r1
    2a7a:	88 5c       	subi	r24, 0xC8	; 200
    2a7c:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			get_SETTIME(lastsettime);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
    2a7e:	9f 93       	push	r25
    2a80:	8f 93       	push	r24
    2a82:	bf 92       	push	r11
    2a84:	af 92       	push	r10
    2a86:	df 92       	push	r13
    2a88:	cf 92       	push	r12
    2a8a:	ff 92       	push	r15
    2a8c:	ef 92       	push	r14
    2a8e:	ce 01       	movw	r24, r28
    2a90:	81 56       	subi	r24, 0x61	; 97
    2a92:	9d 4f       	sbci	r25, 0xFD	; 253
    2a94:	9f 93       	push	r25
    2a96:	8f 93       	push	r24
    2a98:	8e 01       	movw	r16, r28
    2a9a:	0f 5f       	subi	r16, 0xFF	; 255
    2a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9e:	1f 93       	push	r17
    2aa0:	0f 93       	push	r16
    2aa2:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
    2aa6:	c8 01       	movw	r24, r16
    2aa8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "Time", 1);
    2aac:	41 e0       	ldi	r20, 0x01	; 1
    2aae:	66 e9       	ldi	r22, 0x96	; 150
    2ab0:	78 ea       	ldi	r23, 0xA8	; 168
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    2ab8:	b7 01       	movw	r22, r14
    2aba:	65 5f       	subi	r22, 0xF5	; 245
    2abc:	7f 4f       	sbci	r23, 0xFF	; 255
    2abe:	42 e0       	ldi	r20, 0x02	; 2
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <writestr_OLED>
			break;
    2ac6:	cd bf       	out	0x3d, r28	; 61
    2ac8:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2aca:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    2acc:	a1 c0       	rjmp	.+322    	; 0x2c10 <report+0xcbe>

		case 'v':					// Vacuum
			redvac = read_ionpump(REDPUMP);
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	0e 94 58 09 	call	0x12b0	; 0x12b0 <read_ionpump>
    2ad4:	d6 2e       	mov	r13, r22
    2ad6:	c7 2e       	mov	r12, r23
    2ad8:	b8 2e       	mov	r11, r24
    2ada:	a9 2e       	mov	r10, r25
			bluvac = read_ionpump(BLUEPUMP);
    2adc:	82 e0       	ldi	r24, 0x02	; 2
    2ade:	0e 94 58 09 	call	0x12b0	; 0x12b0 <read_ionpump>
    2ae2:	96 2e       	mov	r9, r22
    2ae4:	87 2e       	mov	r8, r23
    2ae6:	78 2e       	mov	r7, r24
    2ae8:	69 2e       	mov	r6, r25
			get_time(currenttime);
    2aea:	7e 01       	movw	r14, r28
    2aec:	96 ef       	ldi	r25, 0xF6	; 246
    2aee:	e9 1a       	sub	r14, r25
    2af0:	9e ef       	ldi	r25, 0xFE	; 254
    2af2:	f9 0a       	sbc	r15, r25
    2af4:	c7 01       	movw	r24, r14
    2af6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
    2afa:	24 e3       	ldi	r18, 0x34	; 52
    2afc:	20 9f       	mul	r18, r16
    2afe:	c0 01       	movw	r24, r0
    2b00:	21 9f       	mul	r18, r17
    2b02:	90 0d       	add	r25, r0
    2b04:	11 24       	eor	r1, r1
    2b06:	88 5c       	subi	r24, 0xC8	; 200
    2b08:	97 4d       	sbci	r25, 0xD7	; 215
    2b0a:	9f 93       	push	r25
    2b0c:	8f 93       	push	r24
    2b0e:	6f 92       	push	r6
    2b10:	7f 92       	push	r7
    2b12:	8f 92       	push	r8
    2b14:	9f 92       	push	r9
    2b16:	af 92       	push	r10
    2b18:	bf 92       	push	r11
    2b1a:	cf 92       	push	r12
    2b1c:	df 92       	push	r13
    2b1e:	ff 92       	push	r15
    2b20:	ef 92       	push	r14
    2b22:	ce 01       	movw	r24, r28
    2b24:	88 54       	subi	r24, 0x48	; 72
    2b26:	9d 4f       	sbci	r25, 0xFD	; 253
    2b28:	9f 93       	push	r25
    2b2a:	8f 93       	push	r24
    2b2c:	8e 01       	movw	r16, r28
    2b2e:	0f 5f       	subi	r16, 0xFF	; 255
    2b30:	1f 4f       	sbci	r17, 0xFF	; 255
    2b32:	1f 93       	push	r17
    2b34:	0f 93       	push	r16
    2b36:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			printLine(outbuf);
    2b3a:	c8 01       	movw	r24, r16
    2b3c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    2b40:	41 e0       	ldi	r20, 0x01	; 1
    2b42:	6b e9       	ldi	r22, 0x9B	; 155
    2b44:	78 ea       	ldi	r23, 0xA8	; 168
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    2b4c:	6f 92       	push	r6
    2b4e:	7f 92       	push	r7
    2b50:	8f 92       	push	r8
    2b52:	9f 92       	push	r9
    2b54:	af 92       	push	r10
    2b56:	bf 92       	push	r11
    2b58:	cf 92       	push	r12
    2b5a:	df 92       	push	r13
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	83 52       	subi	r24, 0x23	; 35
    2b60:	9d 4f       	sbci	r25, 0xFD	; 253
    2b62:	9f 93       	push	r25
    2b64:	8f 93       	push	r24
    2b66:	1f 93       	push	r17
    2b68:	0f 93       	push	r16
    2b6a:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2b6e:	42 e0       	ldi	r20, 0x02	; 2
    2b70:	b8 01       	movw	r22, r16
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <writestr_OLED>
			break;
    2b78:	cd bf       	out	0x3d, r28	; 61
    2b7a:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2b7c:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    2b7e:	48 c0       	rjmp	.+144    	; 0x2c10 <report+0xcbe>

		case 'V':					// Version
			get_VERSION(version);
    2b80:	6e 01       	movw	r12, r28
    2b82:	9f ef       	ldi	r25, 0xFF	; 255
    2b84:	c9 0e       	add	r12, r25
    2b86:	d1 1c       	adc	r13, r1
    2b88:	c6 01       	movw	r24, r12
    2b8a:	0e 94 50 07 	call	0xea0	; 0xea0 <get_VERSION>
			get_time(currenttime);
    2b8e:	7e 01       	movw	r14, r28
    2b90:	86 ef       	ldi	r24, 0xF6	; 246
    2b92:	e8 1a       	sub	r14, r24
    2b94:	8e ef       	ldi	r24, 0xFE	; 254
    2b96:	f8 0a       	sbc	r15, r24
    2b98:	c7 01       	movw	r24, r14
    2b9a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
    2b9e:	24 e3       	ldi	r18, 0x34	; 52
    2ba0:	20 9f       	mul	r18, r16
    2ba2:	c0 01       	movw	r24, r0
    2ba4:	21 9f       	mul	r18, r17
    2ba6:	90 0d       	add	r25, r0
    2ba8:	11 24       	eor	r1, r1
    2baa:	88 5c       	subi	r24, 0xC8	; 200
    2bac:	97 4d       	sbci	r25, 0xD7	; 215
    2bae:	9f 93       	push	r25
    2bb0:	8f 93       	push	r24
    2bb2:	df 92       	push	r13
    2bb4:	cf 92       	push	r12
    2bb6:	ff 92       	push	r15
    2bb8:	ef 92       	push	r14
    2bba:	ce 01       	movw	r24, r28
    2bbc:	86 51       	subi	r24, 0x16	; 22
    2bbe:	9d 4f       	sbci	r25, 0xFD	; 253
    2bc0:	9f 93       	push	r25
    2bc2:	8f 93       	push	r24
    2bc4:	8e 01       	movw	r16, r28
    2bc6:	0f 5f       	subi	r16, 0xFF	; 255
    2bc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bca:	1f 93       	push	r17
    2bcc:	0f 93       	push	r16
    2bce:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			printLine(outbuf);
    2bd2:	c8 01       	movw	r24, r16
    2bd4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "specMech Version", 1);
    2bd8:	41 e0       	ldi	r20, 0x01	; 1
    2bda:	69 ed       	ldi	r22, 0xD9	; 217
    2bdc:	76 ea       	ldi	r23, 0xA6	; 166
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <writestr_OLED>
			get_VERSION(outbuf);
    2be4:	c8 01       	movw	r24, r16
    2be6:	0e 94 50 07 	call	0xea0	; 0xea0 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    2bea:	42 e0       	ldi	r20, 0x02	; 2
    2bec:	b8 01       	movw	r22, r16
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <writestr_OLED>
			break;
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2bf8:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    2bfa:	0a c0       	rjmp	.+20     	; 0x2c10 <report+0xcbe>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    2bfc:	6b ea       	ldi	r22, 0xAB	; 171
    2bfe:	78 ea       	ldi	r23, 0xA8	; 168
    2c00:	8a ec       	ldi	r24, 0xCA	; 202
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			return(ERROR);
    2c08:	0f 2e       	mov	r0, r31
    2c0a:	f3 e6       	ldi	r31, 0x63	; 99
    2c0c:	ff 2e       	mov	r15, r31
    2c0e:	f0 2d       	mov	r31, r0
			break;
	}

	return(NOERROR);

}
    2c10:	8f 2d       	mov	r24, r15
    2c12:	cc 5b       	subi	r28, 0xBC	; 188
    2c14:	dc 4f       	sbci	r29, 0xFC	; 252
    2c16:	cd bf       	out	0x3d, r28	; 61
    2c18:	de bf       	out	0x3e, r29	; 62
    2c1a:	df 91       	pop	r29
    2c1c:	cf 91       	pop	r28
    2c1e:	1f 91       	pop	r17
    2c20:	0f 91       	pop	r16
    2c22:	ff 90       	pop	r15
    2c24:	ef 90       	pop	r14
    2c26:	df 90       	pop	r13
    2c28:	cf 90       	pop	r12
    2c2a:	bf 90       	pop	r11
    2c2c:	af 90       	pop	r10
    2c2e:	9f 90       	pop	r9
    2c30:	8f 90       	pop	r8
    2c32:	7f 90       	pop	r7
    2c34:	6f 90       	pop	r6
    2c36:	5f 90       	pop	r5
    2c38:	4f 90       	pop	r4
    2c3a:	3f 90       	pop	r3
    2c3c:	2f 90       	pop	r2
    2c3e:	08 95       	ret

00002c40 <crc16>:

	*mode = data[1];

	return(NOERROR);

}
    2c40:	dc 01       	movw	r26, r24
    2c42:	40 e0       	ldi	r20, 0x00	; 0
    2c44:	50 e0       	ldi	r21, 0x00	; 0
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	1b c0       	rjmp	.+54     	; 0x2c82 <crc16+0x42>
    2c4c:	fd 01       	movw	r30, r26
    2c4e:	e4 0f       	add	r30, r20
    2c50:	f5 1f       	adc	r31, r21
    2c52:	20 81       	ld	r18, Z
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	32 2f       	mov	r19, r18
    2c58:	22 27       	eor	r18, r18
    2c5a:	82 27       	eor	r24, r18
    2c5c:	93 27       	eor	r25, r19
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	0c c0       	rjmp	.+24     	; 0x2c7a <crc16+0x3a>
    2c62:	99 23       	and	r25, r25
    2c64:	3c f4       	brge	.+14     	; 0x2c74 <crc16+0x34>
    2c66:	88 0f       	add	r24, r24
    2c68:	99 1f       	adc	r25, r25
    2c6a:	31 e2       	ldi	r19, 0x21	; 33
    2c6c:	83 27       	eor	r24, r19
    2c6e:	30 e1       	ldi	r19, 0x10	; 16
    2c70:	93 27       	eor	r25, r19
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <crc16+0x38>
    2c74:	88 0f       	add	r24, r24
    2c76:	99 1f       	adc	r25, r25
    2c78:	2f 5f       	subi	r18, 0xFF	; 255
    2c7a:	28 30       	cpi	r18, 0x08	; 8
    2c7c:	90 f3       	brcs	.-28     	; 0x2c62 <crc16+0x22>
    2c7e:	4f 5f       	subi	r20, 0xFF	; 255
    2c80:	5f 4f       	sbci	r21, 0xFF	; 255
    2c82:	46 17       	cp	r20, r22
    2c84:	57 07       	cpc	r21, r23
    2c86:	10 f3       	brcs	.-60     	; 0x2c4c <crc16+0xc>
    2c88:	08 95       	ret

00002c8a <get_FRAM_MOTOR_ENCODER>:
    2c8a:	cf 92       	push	r12
    2c8c:	df 92       	push	r13
    2c8e:	ef 92       	push	r14
    2c90:	ff 92       	push	r15
    2c92:	0f 93       	push	r16
    2c94:	1f 93       	push	r17
    2c96:	cf 93       	push	r28
    2c98:	df 93       	push	r29
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62
    2c9e:	c3 58       	subi	r28, 0x83	; 131
    2ca0:	d1 09       	sbc	r29, r1
    2ca2:	cd bf       	out	0x3d, r28	; 61
    2ca4:	de bf       	out	0x3e, r29	; 62
    2ca6:	8b 01       	movw	r16, r22
    2ca8:	9f e2       	ldi	r25, 0x2F	; 47
    2caa:	ef e6       	ldi	r30, 0x6F	; 111
    2cac:	fa ea       	ldi	r31, 0xAA	; 170
    2cae:	de 01       	movw	r26, r28
    2cb0:	11 96       	adiw	r26, 0x01	; 1
    2cb2:	01 90       	ld	r0, Z+
    2cb4:	0d 92       	st	X+, r0
    2cb6:	9a 95       	dec	r25
    2cb8:	e1 f7       	brne	.-8      	; 0x2cb2 <get_FRAM_MOTOR_ENCODER+0x28>
    2cba:	81 38       	cpi	r24, 0x81	; 129
    2cbc:	59 f0       	breq	.+22     	; 0x2cd4 <get_FRAM_MOTOR_ENCODER+0x4a>
    2cbe:	82 38       	cpi	r24, 0x82	; 130
    2cc0:	31 f0       	breq	.+12     	; 0x2cce <get_FRAM_MOTOR_ENCODER+0x44>
    2cc2:	80 38       	cpi	r24, 0x80	; 128
    2cc4:	09 f0       	breq	.+2      	; 0x2cc8 <get_FRAM_MOTOR_ENCODER+0x3e>
    2cc6:	71 c0       	rjmp	.+226    	; 0x2daa <get_FRAM_MOTOR_ENCODER+0x120>
    2cc8:	64 e1       	ldi	r22, 0x14	; 20
    2cca:	70 e0       	ldi	r23, 0x00	; 0
    2ccc:	05 c0       	rjmp	.+10     	; 0x2cd8 <get_FRAM_MOTOR_ENCODER+0x4e>
    2cce:	6c e1       	ldi	r22, 0x1C	; 28
    2cd0:	70 e0       	ldi	r23, 0x00	; 0
    2cd2:	02 c0       	rjmp	.+4      	; 0x2cd8 <get_FRAM_MOTOR_ENCODER+0x4e>
    2cd4:	68 e1       	ldi	r22, 0x18	; 24
    2cd6:	70 e0       	ldi	r23, 0x00	; 0
    2cd8:	f8 2e       	mov	r15, r24
    2cda:	24 e0       	ldi	r18, 0x04	; 4
    2cdc:	ae 01       	movw	r20, r28
    2cde:	40 58       	subi	r20, 0x80	; 128
    2ce0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ce2:	80 e5       	ldi	r24, 0x50	; 80
    2ce4:	0e 94 cb 07 	call	0xf96	; 0xf96 <read_FRAM>
    2ce8:	e8 2e       	mov	r14, r24
    2cea:	83 e6       	ldi	r24, 0x63	; 99
    2cec:	e8 12       	cpse	r14, r24
    2cee:	24 c0       	rjmp	.+72     	; 0x2d38 <get_FRAM_MOTOR_ENCODER+0xae>
    2cf0:	81 ec       	ldi	r24, 0xC1	; 193
    2cf2:	8f 0d       	add	r24, r15
    2cf4:	1f 92       	push	r1
    2cf6:	8f 93       	push	r24
    2cf8:	ce 01       	movw	r24, r28
    2cfa:	01 96       	adiw	r24, 0x01	; 1
    2cfc:	9f 93       	push	r25
    2cfe:	8f 93       	push	r24
    2d00:	6e 01       	movw	r12, r28
    2d02:	e0 e3       	ldi	r30, 0x30	; 48
    2d04:	ce 0e       	add	r12, r30
    2d06:	d1 1c       	adc	r13, r1
    2d08:	df 92       	push	r13
    2d0a:	cf 92       	push	r12
    2d0c:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
    2d10:	b6 01       	movw	r22, r12
    2d12:	83 e9       	ldi	r24, 0x93	; 147
    2d14:	91 e0       	ldi	r25, 0x01	; 1
    2d16:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    2d1a:	8f ef       	ldi	r24, 0xFF	; 255
    2d1c:	9f ef       	ldi	r25, 0xFF	; 255
    2d1e:	dc 01       	movw	r26, r24
    2d20:	f8 01       	movw	r30, r16
    2d22:	80 83       	st	Z, r24
    2d24:	91 83       	std	Z+1, r25	; 0x01
    2d26:	a2 83       	std	Z+2, r26	; 0x02
    2d28:	b3 83       	std	Z+3, r27	; 0x03
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	0f 90       	pop	r0
    2d30:	0f 90       	pop	r0
    2d32:	0f 90       	pop	r0
    2d34:	0f 90       	pop	r0
    2d36:	3d c0       	rjmp	.+122    	; 0x2db2 <get_FRAM_MOTOR_ENCODER+0x128>
    2d38:	c0 58       	subi	r28, 0x80	; 128
    2d3a:	df 4f       	sbci	r29, 0xFF	; 255
    2d3c:	88 81       	ld	r24, Y
    2d3e:	c0 58       	subi	r28, 0x80	; 128
    2d40:	d0 40       	sbci	r29, 0x00	; 0
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	a0 e0       	ldi	r26, 0x00	; 0
    2d46:	b0 e0       	ldi	r27, 0x00	; 0
    2d48:	78 2f       	mov	r23, r24
    2d4a:	66 27       	eor	r22, r22
    2d4c:	55 27       	eor	r21, r21
    2d4e:	44 27       	eor	r20, r20
    2d50:	cf 57       	subi	r28, 0x7F	; 127
    2d52:	df 4f       	sbci	r29, 0xFF	; 255
    2d54:	98 81       	ld	r25, Y
    2d56:	c1 58       	subi	r28, 0x81	; 129
    2d58:	d0 40       	sbci	r29, 0x00	; 0
    2d5a:	89 2f       	mov	r24, r25
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	a0 e0       	ldi	r26, 0x00	; 0
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	dc 01       	movw	r26, r24
    2d64:	99 27       	eor	r25, r25
    2d66:	88 27       	eor	r24, r24
    2d68:	84 2b       	or	r24, r20
    2d6a:	95 2b       	or	r25, r21
    2d6c:	a6 2b       	or	r26, r22
    2d6e:	b7 2b       	or	r27, r23
    2d70:	ce 57       	subi	r28, 0x7E	; 126
    2d72:	df 4f       	sbci	r29, 0xFF	; 255
    2d74:	48 81       	ld	r20, Y
    2d76:	c2 58       	subi	r28, 0x82	; 130
    2d78:	d0 40       	sbci	r29, 0x00	; 0
    2d7a:	50 e0       	ldi	r21, 0x00	; 0
    2d7c:	60 e0       	ldi	r22, 0x00	; 0
    2d7e:	70 e0       	ldi	r23, 0x00	; 0
    2d80:	76 2f       	mov	r23, r22
    2d82:	65 2f       	mov	r22, r21
    2d84:	54 2f       	mov	r21, r20
    2d86:	44 27       	eor	r20, r20
    2d88:	84 2b       	or	r24, r20
    2d8a:	95 2b       	or	r25, r21
    2d8c:	a6 2b       	or	r26, r22
    2d8e:	b7 2b       	or	r27, r23
    2d90:	cd 57       	subi	r28, 0x7D	; 125
    2d92:	df 4f       	sbci	r29, 0xFF	; 255
    2d94:	28 81       	ld	r18, Y
    2d96:	c3 58       	subi	r28, 0x83	; 131
    2d98:	d0 40       	sbci	r29, 0x00	; 0
    2d9a:	82 2b       	or	r24, r18
    2d9c:	f8 01       	movw	r30, r16
    2d9e:	80 83       	st	Z, r24
    2da0:	91 83       	std	Z+1, r25	; 0x01
    2da2:	a2 83       	std	Z+2, r26	; 0x02
    2da4:	b3 83       	std	Z+3, r27	; 0x03
    2da6:	e1 2c       	mov	r14, r1
    2da8:	04 c0       	rjmp	.+8      	; 0x2db2 <get_FRAM_MOTOR_ENCODER+0x128>
    2daa:	0f 2e       	mov	r0, r31
    2dac:	f3 e6       	ldi	r31, 0x63	; 99
    2dae:	ef 2e       	mov	r14, r31
    2db0:	f0 2d       	mov	r31, r0
    2db2:	8e 2d       	mov	r24, r14
    2db4:	cd 57       	subi	r28, 0x7D	; 125
    2db6:	df 4f       	sbci	r29, 0xFF	; 255
    2db8:	cd bf       	out	0x3d, r28	; 61
    2dba:	de bf       	out	0x3e, r29	; 62
    2dbc:	df 91       	pop	r29
    2dbe:	cf 91       	pop	r28
    2dc0:	1f 91       	pop	r17
    2dc2:	0f 91       	pop	r16
    2dc4:	ff 90       	pop	r15
    2dc6:	ef 90       	pop	r14
    2dc8:	df 90       	pop	r13
    2dca:	cf 90       	pop	r12
    2dcc:	08 95       	ret

00002dce <get_MOTOR>:
    2dce:	2f 92       	push	r2
    2dd0:	3f 92       	push	r3
    2dd2:	4f 92       	push	r4
    2dd4:	5f 92       	push	r5
    2dd6:	6f 92       	push	r6
    2dd8:	7f 92       	push	r7
    2dda:	8f 92       	push	r8
    2ddc:	9f 92       	push	r9
    2dde:	af 92       	push	r10
    2de0:	bf 92       	push	r11
    2de2:	cf 92       	push	r12
    2de4:	df 92       	push	r13
    2de6:	ef 92       	push	r14
    2de8:	ff 92       	push	r15
    2dea:	0f 93       	push	r16
    2dec:	1f 93       	push	r17
    2dee:	cf 93       	push	r28
    2df0:	df 93       	push	r29
    2df2:	cd b7       	in	r28, 0x3d	; 61
    2df4:	de b7       	in	r29, 0x3e	; 62
    2df6:	ce 58       	subi	r28, 0x8E	; 142
    2df8:	d1 09       	sbc	r29, r1
    2dfa:	cd bf       	out	0x3d, r28	; 61
    2dfc:	de bf       	out	0x3e, r29	; 62
    2dfe:	28 2e       	mov	r2, r24
    2e00:	8a 01       	movw	r16, r20
    2e02:	32 2e       	mov	r3, r18
    2e04:	8d b6       	in	r8, 0x3d	; 61
    2e06:	9e b6       	in	r9, 0x3e	; 62
    2e08:	80 e2       	ldi	r24, 0x20	; 32
    2e0a:	ee e9       	ldi	r30, 0x9E	; 158
    2e0c:	fa ea       	ldi	r31, 0xAA	; 170
    2e0e:	de 01       	movw	r26, r28
    2e10:	11 96       	adiw	r26, 0x01	; 1
    2e12:	01 90       	ld	r0, Z+
    2e14:	0d 92       	st	X+, r0
    2e16:	8a 95       	dec	r24
    2e18:	e1 f7       	brne	.-8      	; 0x2e12 <get_MOTOR+0x44>
    2e1a:	8e e1       	ldi	r24, 0x1E	; 30
    2e1c:	ee eb       	ldi	r30, 0xBE	; 190
    2e1e:	fa ea       	ldi	r31, 0xAA	; 170
    2e20:	de 01       	movw	r26, r28
    2e22:	91 96       	adiw	r26, 0x21	; 33
    2e24:	01 90       	ld	r0, Z+
    2e26:	0d 92       	st	X+, r0
    2e28:	8a 95       	dec	r24
    2e2a:	e1 f7       	brne	.-8      	; 0x2e24 <get_MOTOR+0x56>
    2e2c:	a2 2e       	mov	r10, r18
    2e2e:	b1 2c       	mov	r11, r1
    2e30:	75 01       	movw	r14, r10
    2e32:	82 e0       	ldi	r24, 0x02	; 2
    2e34:	e8 0e       	add	r14, r24
    2e36:	f1 1c       	adc	r15, r1
    2e38:	25 01       	movw	r4, r10
    2e3a:	9f ef       	ldi	r25, 0xFF	; 255
    2e3c:	49 1a       	sub	r4, r25
    2e3e:	59 0a       	sbc	r5, r25
    2e40:	ed b7       	in	r30, 0x3d	; 61
    2e42:	fe b7       	in	r31, 0x3e	; 62
    2e44:	ee 19       	sub	r30, r14
    2e46:	ff 09       	sbc	r31, r15
    2e48:	ed bf       	out	0x3d, r30	; 61
    2e4a:	fe bf       	out	0x3e, r31	; 62
    2e4c:	8d b7       	in	r24, 0x3d	; 61
    2e4e:	9e b7       	in	r25, 0x3e	; 62
    2e50:	01 96       	adiw	r24, 0x01	; 1
    2e52:	3c 01       	movw	r6, r24
    2e54:	6c 01       	movw	r12, r24
    2e56:	82 e0       	ldi	r24, 0x02	; 2
    2e58:	82 0f       	add	r24, r18
    2e5a:	80 93 3b 2b 	sts	0x2B3B, r24	; 0x802b3b <recv1_buf+0x100>
    2e5e:	10 92 3d 2b 	sts	0x2B3D, r1	; 0x802b3d <recv1_buf+0x102>
    2e62:	10 92 3e 2b 	sts	0x2B3E, r1	; 0x802b3e <recv1_buf+0x103>
    2e66:	21 82       	std	Z+1, r2	; 0x01
    2e68:	f3 01       	movw	r30, r6
    2e6a:	61 83       	std	Z+1, r22	; 0x01
    2e6c:	42 e0       	ldi	r20, 0x02	; 2
    2e6e:	b3 01       	movw	r22, r6
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	0e 94 8a 27 	call	0x4f14	; 0x4f14 <send_USART>
    2e76:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    2e7a:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
    2e7e:	22 c0       	rjmp	.+68     	; 0x2ec4 <get_MOTOR+0xf6>
    2e80:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    2e84:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    2e88:	c3 97       	sbiw	r24, 0x33	; 51
    2e8a:	e0 f0       	brcs	.+56     	; 0x2ec4 <get_MOTOR+0xf6>
    2e8c:	81 ec       	ldi	r24, 0xC1	; 193
    2e8e:	82 0d       	add	r24, r2
    2e90:	1f 92       	push	r1
    2e92:	8f 93       	push	r24
    2e94:	ce 01       	movw	r24, r28
    2e96:	01 96       	adiw	r24, 0x01	; 1
    2e98:	9f 93       	push	r25
    2e9a:	8f 93       	push	r24
    2e9c:	8e 01       	movw	r16, r28
    2e9e:	01 5c       	subi	r16, 0xC1	; 193
    2ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea2:	1f 93       	push	r17
    2ea4:	0f 93       	push	r16
    2ea6:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
    2eaa:	b8 01       	movw	r22, r16
    2eac:	80 e3       	ldi	r24, 0x30	; 48
    2eae:	91 e0       	ldi	r25, 0x01	; 1
    2eb0:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    2eb4:	0f 90       	pop	r0
    2eb6:	0f 90       	pop	r0
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	0f 90       	pop	r0
    2ec0:	83 e6       	ldi	r24, 0x63	; 99
    2ec2:	53 c0       	rjmp	.+166    	; 0x2f6a <get_MOTOR+0x19c>
    2ec4:	80 91 3e 2b 	lds	r24, 0x2B3E	; 0x802b3e <recv1_buf+0x103>
    2ec8:	88 23       	and	r24, r24
    2eca:	d1 f2       	breq	.-76     	; 0x2e80 <get_MOTOR+0xb2>
    2ecc:	f5 01       	movw	r30, r10
    2ece:	e5 5c       	subi	r30, 0xC5	; 197
    2ed0:	f5 4d       	sbci	r31, 0xD5	; 213
    2ed2:	a0 80       	ld	r10, Z
    2ed4:	b1 2c       	mov	r11, r1
    2ed6:	ba 2c       	mov	r11, r10
    2ed8:	aa 24       	eor	r10, r10
    2eda:	f2 01       	movw	r30, r4
    2edc:	e5 5c       	subi	r30, 0xC5	; 197
    2ede:	f5 4d       	sbci	r31, 0xD5	; 213
    2ee0:	80 81       	ld	r24, Z
    2ee2:	a8 2a       	or	r10, r24
    2ee4:	22 e0       	ldi	r18, 0x02	; 2
    2ee6:	09 c0       	rjmp	.+18     	; 0x2efa <get_MOTOR+0x12c>
    2ee8:	fc 01       	movw	r30, r24
    2eea:	e7 5c       	subi	r30, 0xC7	; 199
    2eec:	f5 4d       	sbci	r31, 0xD5	; 213
    2eee:	30 81       	ld	r19, Z
    2ef0:	f6 01       	movw	r30, r12
    2ef2:	e8 0f       	add	r30, r24
    2ef4:	f9 1f       	adc	r31, r25
    2ef6:	30 83       	st	Z, r19
    2ef8:	2f 5f       	subi	r18, 0xFF	; 255
    2efa:	82 2f       	mov	r24, r18
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	8e 15       	cp	r24, r14
    2f00:	9f 05       	cpc	r25, r15
    2f02:	94 f3       	brlt	.-28     	; 0x2ee8 <get_MOTOR+0x11a>
    2f04:	b7 01       	movw	r22, r14
    2f06:	c3 01       	movw	r24, r6
    2f08:	0e 94 20 16 	call	0x2c40	; 0x2c40 <crc16>
    2f0c:	a8 16       	cp	r10, r24
    2f0e:	b9 06       	cpc	r11, r25
    2f10:	41 f1       	breq	.+80     	; 0x2f62 <get_MOTOR+0x194>
    2f12:	81 ec       	ldi	r24, 0xC1	; 193
    2f14:	82 0d       	add	r24, r2
    2f16:	1f 92       	push	r1
    2f18:	8f 93       	push	r24
    2f1a:	ce 01       	movw	r24, r28
    2f1c:	81 96       	adiw	r24, 0x21	; 33
    2f1e:	9f 93       	push	r25
    2f20:	8f 93       	push	r24
    2f22:	8e 01       	movw	r16, r28
    2f24:	01 5c       	subi	r16, 0xC1	; 193
    2f26:	1f 4f       	sbci	r17, 0xFF	; 255
    2f28:	1f 93       	push	r17
    2f2a:	0f 93       	push	r16
    2f2c:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
    2f30:	b8 01       	movw	r22, r16
    2f32:	81 e3       	ldi	r24, 0x31	; 49
    2f34:	91 e0       	ldi	r25, 0x01	; 1
    2f36:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    2f3a:	0f 90       	pop	r0
    2f3c:	0f 90       	pop	r0
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	83 e6       	ldi	r24, 0x63	; 99
    2f48:	10 c0       	rjmp	.+32     	; 0x2f6a <get_MOTOR+0x19c>
    2f4a:	82 2f       	mov	r24, r18
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	f8 01       	movw	r30, r16
    2f50:	e8 0f       	add	r30, r24
    2f52:	f9 1f       	adc	r31, r25
    2f54:	dc 01       	movw	r26, r24
    2f56:	a5 5c       	subi	r26, 0xC5	; 197
    2f58:	b5 4d       	sbci	r27, 0xD5	; 213
    2f5a:	8c 91       	ld	r24, X
    2f5c:	80 83       	st	Z, r24
    2f5e:	2f 5f       	subi	r18, 0xFF	; 255
    2f60:	01 c0       	rjmp	.+2      	; 0x2f64 <get_MOTOR+0x196>
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	23 15       	cp	r18, r3
    2f66:	88 f3       	brcs	.-30     	; 0x2f4a <get_MOTOR+0x17c>
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	8d be       	out	0x3d, r8	; 61
    2f6c:	9e be       	out	0x3e, r9	; 62
    2f6e:	c2 57       	subi	r28, 0x72	; 114
    2f70:	df 4f       	sbci	r29, 0xFF	; 255
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	1f 91       	pop	r17
    2f7c:	0f 91       	pop	r16
    2f7e:	ff 90       	pop	r15
    2f80:	ef 90       	pop	r14
    2f82:	df 90       	pop	r13
    2f84:	cf 90       	pop	r12
    2f86:	bf 90       	pop	r11
    2f88:	af 90       	pop	r10
    2f8a:	9f 90       	pop	r9
    2f8c:	8f 90       	pop	r8
    2f8e:	7f 90       	pop	r7
    2f90:	6f 90       	pop	r6
    2f92:	5f 90       	pop	r5
    2f94:	4f 90       	pop	r4
    2f96:	3f 90       	pop	r3
    2f98:	2f 90       	pop	r2
    2f9a:	08 95       	ret

00002f9c <get_MOTOR_CURRENT>:
    2f9c:	cf 92       	push	r12
    2f9e:	df 92       	push	r13
    2fa0:	ef 92       	push	r14
    2fa2:	ff 92       	push	r15
    2fa4:	0f 93       	push	r16
    2fa6:	1f 93       	push	r17
    2fa8:	cf 93       	push	r28
    2faa:	df 93       	push	r29
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
    2fb0:	cd 57       	subi	r28, 0x7D	; 125
    2fb2:	d1 09       	sbc	r29, r1
    2fb4:	cd bf       	out	0x3d, r28	; 61
    2fb6:	de bf       	out	0x3e, r29	; 62
    2fb8:	e8 2e       	mov	r14, r24
    2fba:	8b 01       	movw	r16, r22
    2fbc:	89 e2       	ldi	r24, 0x29	; 41
    2fbe:	ec ed       	ldi	r30, 0xDC	; 220
    2fc0:	fa ea       	ldi	r31, 0xAA	; 170
    2fc2:	de 01       	movw	r26, r28
    2fc4:	11 96       	adiw	r26, 0x01	; 1
    2fc6:	01 90       	ld	r0, Z+
    2fc8:	0d 92       	st	X+, r0
    2fca:	8a 95       	dec	r24
    2fcc:	e1 f7       	brne	.-8      	; 0x2fc6 <get_MOTOR_CURRENT+0x2a>
    2fce:	24 e0       	ldi	r18, 0x04	; 4
    2fd0:	ae 01       	movw	r20, r28
    2fd2:	46 58       	subi	r20, 0x86	; 134
    2fd4:	5f 4f       	sbci	r21, 0xFF	; 255
    2fd6:	61 e3       	ldi	r22, 0x31	; 49
    2fd8:	8e 2d       	mov	r24, r14
    2fda:	0e 94 e7 16 	call	0x2dce	; 0x2dce <get_MOTOR>
    2fde:	f8 2e       	mov	r15, r24
    2fe0:	83 e6       	ldi	r24, 0x63	; 99
    2fe2:	f8 12       	cpse	r15, r24
    2fe4:	21 c0       	rjmp	.+66     	; 0x3028 <get_MOTOR_CURRENT+0x8c>
    2fe6:	81 ec       	ldi	r24, 0xC1	; 193
    2fe8:	8e 0d       	add	r24, r14
    2fea:	1f 92       	push	r1
    2fec:	8f 93       	push	r24
    2fee:	ce 01       	movw	r24, r28
    2ff0:	01 96       	adiw	r24, 0x01	; 1
    2ff2:	9f 93       	push	r25
    2ff4:	8f 93       	push	r24
    2ff6:	6e 01       	movw	r12, r28
    2ff8:	ea e2       	ldi	r30, 0x2A	; 42
    2ffa:	ce 0e       	add	r12, r30
    2ffc:	d1 1c       	adc	r13, r1
    2ffe:	df 92       	push	r13
    3000:	cf 92       	push	r12
    3002:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
    3006:	b6 01       	movw	r22, r12
    3008:	86 e3       	ldi	r24, 0x36	; 54
    300a:	91 e0       	ldi	r25, 0x01	; 1
    300c:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    3010:	8f ef       	ldi	r24, 0xFF	; 255
    3012:	9f ef       	ldi	r25, 0xFF	; 255
    3014:	f8 01       	movw	r30, r16
    3016:	80 83       	st	Z, r24
    3018:	91 83       	std	Z+1, r25	; 0x01
    301a:	0f 90       	pop	r0
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	19 c0       	rjmp	.+50     	; 0x305a <get_MOTOR_CURRENT+0xbe>
    3028:	eb 96       	adiw	r28, 0x3b	; 59
    302a:	8f ad       	ldd	r24, Y+63	; 0x3f
    302c:	eb 97       	sbiw	r28, 0x3b	; 59
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	98 2f       	mov	r25, r24
    3032:	88 27       	eor	r24, r24
    3034:	ec 96       	adiw	r28, 0x3c	; 60
    3036:	2f ad       	ldd	r18, Y+63	; 0x3f
    3038:	ec 97       	sbiw	r28, 0x3c	; 60
    303a:	82 2b       	or	r24, r18
    303c:	9c 01       	movw	r18, r24
    303e:	22 0f       	add	r18, r18
    3040:	33 1f       	adc	r19, r19
    3042:	88 0f       	add	r24, r24
    3044:	99 1f       	adc	r25, r25
    3046:	88 0f       	add	r24, r24
    3048:	99 1f       	adc	r25, r25
    304a:	88 0f       	add	r24, r24
    304c:	99 1f       	adc	r25, r25
    304e:	82 0f       	add	r24, r18
    3050:	93 1f       	adc	r25, r19
    3052:	f8 01       	movw	r30, r16
    3054:	80 83       	st	Z, r24
    3056:	91 83       	std	Z+1, r25	; 0x01
    3058:	f1 2c       	mov	r15, r1
    305a:	8f 2d       	mov	r24, r15
    305c:	c3 58       	subi	r28, 0x83	; 131
    305e:	df 4f       	sbci	r29, 0xFF	; 255
    3060:	cd bf       	out	0x3d, r28	; 61
    3062:	de bf       	out	0x3e, r29	; 62
    3064:	df 91       	pop	r29
    3066:	cf 91       	pop	r28
    3068:	1f 91       	pop	r17
    306a:	0f 91       	pop	r16
    306c:	ff 90       	pop	r15
    306e:	ef 90       	pop	r14
    3070:	df 90       	pop	r13
    3072:	cf 90       	pop	r12
    3074:	08 95       	ret

00003076 <get_MOTOR_ENCODER>:
    3076:	ef 92       	push	r14
    3078:	ff 92       	push	r15
    307a:	0f 93       	push	r16
    307c:	1f 93       	push	r17
    307e:	cf 93       	push	r28
    3080:	df 93       	push	r29
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	ce 57       	subi	r28, 0x7E	; 126
    3088:	d1 09       	sbc	r29, r1
    308a:	cd bf       	out	0x3d, r28	; 61
    308c:	de bf       	out	0x3e, r29	; 62
    308e:	e8 2e       	mov	r14, r24
    3090:	8b 01       	movw	r16, r22
    3092:	89 e2       	ldi	r24, 0x29	; 41
    3094:	e0 e1       	ldi	r30, 0x10	; 16
    3096:	fb ea       	ldi	r31, 0xAB	; 171
    3098:	de 01       	movw	r26, r28
    309a:	11 96       	adiw	r26, 0x01	; 1
    309c:	01 90       	ld	r0, Z+
    309e:	0d 92       	st	X+, r0
    30a0:	8a 95       	dec	r24
    30a2:	e1 f7       	brne	.-8      	; 0x309c <get_MOTOR_ENCODER+0x26>
    30a4:	25 e0       	ldi	r18, 0x05	; 5
    30a6:	ae 01       	movw	r20, r28
    30a8:	46 58       	subi	r20, 0x86	; 134
    30aa:	5f 4f       	sbci	r21, 0xFF	; 255
    30ac:	60 e1       	ldi	r22, 0x10	; 16
    30ae:	8e 2d       	mov	r24, r14
    30b0:	0e 94 e7 16 	call	0x2dce	; 0x2dce <get_MOTOR>
    30b4:	f8 2e       	mov	r15, r24
    30b6:	83 e6       	ldi	r24, 0x63	; 99
    30b8:	f8 12       	cpse	r15, r24
    30ba:	1b c0       	rjmp	.+54     	; 0x30f2 <get_MOTOR_ENCODER+0x7c>
    30bc:	81 ec       	ldi	r24, 0xC1	; 193
    30be:	8e 0d       	add	r24, r14
    30c0:	1f 92       	push	r1
    30c2:	8f 93       	push	r24
    30c4:	ce 01       	movw	r24, r28
    30c6:	01 96       	adiw	r24, 0x01	; 1
    30c8:	9f 93       	push	r25
    30ca:	8f 93       	push	r24
    30cc:	8e 01       	movw	r16, r28
    30ce:	06 5d       	subi	r16, 0xD6	; 214
    30d0:	1f 4f       	sbci	r17, 0xFF	; 255
    30d2:	1f 93       	push	r17
    30d4:	0f 93       	push	r16
    30d6:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
    30da:	b8 01       	movw	r22, r16
    30dc:	86 e3       	ldi	r24, 0x36	; 54
    30de:	91 e0       	ldi	r25, 0x01	; 1
    30e0:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    30e4:	0f 90       	pop	r0
    30e6:	0f 90       	pop	r0
    30e8:	0f 90       	pop	r0
    30ea:	0f 90       	pop	r0
    30ec:	0f 90       	pop	r0
    30ee:	0f 90       	pop	r0
    30f0:	44 c0       	rjmp	.+136    	; 0x317a <get_MOTOR_ENCODER+0x104>
    30f2:	eb 96       	adiw	r28, 0x3b	; 59
    30f4:	8f ad       	ldd	r24, Y+63	; 0x3f
    30f6:	eb 97       	sbiw	r28, 0x3b	; 59
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	a0 e0       	ldi	r26, 0x00	; 0
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	78 2f       	mov	r23, r24
    3100:	66 27       	eor	r22, r22
    3102:	55 27       	eor	r21, r21
    3104:	44 27       	eor	r20, r20
    3106:	ec 96       	adiw	r28, 0x3c	; 60
    3108:	9f ad       	ldd	r25, Y+63	; 0x3f
    310a:	ec 97       	sbiw	r28, 0x3c	; 60
    310c:	89 2f       	mov	r24, r25
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	a0 e0       	ldi	r26, 0x00	; 0
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	dc 01       	movw	r26, r24
    3116:	99 27       	eor	r25, r25
    3118:	88 27       	eor	r24, r24
    311a:	84 2b       	or	r24, r20
    311c:	95 2b       	or	r25, r21
    311e:	a6 2b       	or	r26, r22
    3120:	b7 2b       	or	r27, r23
    3122:	ed 96       	adiw	r28, 0x3d	; 61
    3124:	4f ad       	ldd	r20, Y+63	; 0x3f
    3126:	ed 97       	sbiw	r28, 0x3d	; 61
    3128:	50 e0       	ldi	r21, 0x00	; 0
    312a:	60 e0       	ldi	r22, 0x00	; 0
    312c:	70 e0       	ldi	r23, 0x00	; 0
    312e:	76 2f       	mov	r23, r22
    3130:	65 2f       	mov	r22, r21
    3132:	54 2f       	mov	r21, r20
    3134:	44 27       	eor	r20, r20
    3136:	84 2b       	or	r24, r20
    3138:	95 2b       	or	r25, r21
    313a:	a6 2b       	or	r26, r22
    313c:	b7 2b       	or	r27, r23
    313e:	ee 96       	adiw	r28, 0x3e	; 62
    3140:	2f ad       	ldd	r18, Y+63	; 0x3f
    3142:	ee 97       	sbiw	r28, 0x3e	; 62
    3144:	82 2b       	or	r24, r18
    3146:	f8 01       	movw	r30, r16
    3148:	80 83       	st	Z, r24
    314a:	91 83       	std	Z+1, r25	; 0x01
    314c:	a2 83       	std	Z+2, r26	; 0x02
    314e:	b3 83       	std	Z+3, r27	; 0x03
    3150:	bf 93       	push	r27
    3152:	af 93       	push	r26
    3154:	9f 93       	push	r25
    3156:	8f 93       	push	r24
    3158:	85 e0       	ldi	r24, 0x05	; 5
    315a:	9b ea       	ldi	r25, 0xAB	; 171
    315c:	9f 93       	push	r25
    315e:	8f 93       	push	r24
    3160:	8e 01       	movw	r16, r28
    3162:	06 5d       	subi	r16, 0xD6	; 214
    3164:	1f 4f       	sbci	r17, 0xFF	; 255
    3166:	1f 93       	push	r17
    3168:	0f 93       	push	r16
    316a:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
    316e:	c8 01       	movw	r24, r16
    3170:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	de bf       	out	0x3e, r29	; 62
    3178:	f1 2c       	mov	r15, r1
    317a:	8f 2d       	mov	r24, r15
    317c:	c2 58       	subi	r28, 0x82	; 130
    317e:	df 4f       	sbci	r29, 0xFF	; 255
    3180:	cd bf       	out	0x3d, r28	; 61
    3182:	de bf       	out	0x3e, r29	; 62
    3184:	df 91       	pop	r29
    3186:	cf 91       	pop	r28
    3188:	1f 91       	pop	r17
    318a:	0f 91       	pop	r16
    318c:	ff 90       	pop	r15
    318e:	ef 90       	pop	r14
    3190:	08 95       	ret

00003192 <get_MOTOR_FLOAT>:
    3192:	cf 92       	push	r12
    3194:	df 92       	push	r13
    3196:	ef 92       	push	r14
    3198:	ff 92       	push	r15
    319a:	0f 93       	push	r16
    319c:	1f 93       	push	r17
    319e:	cf 93       	push	r28
    31a0:	df 93       	push	r29
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62
    31a6:	c9 57       	subi	r28, 0x79	; 121
    31a8:	d1 09       	sbc	r29, r1
    31aa:	cd bf       	out	0x3d, r28	; 61
    31ac:	de bf       	out	0x3e, r29	; 62
    31ae:	e8 2e       	mov	r14, r24
    31b0:	8a 01       	movw	r16, r20
    31b2:	87 e2       	ldi	r24, 0x27	; 39
    31b4:	e9 e3       	ldi	r30, 0x39	; 57
    31b6:	fb ea       	ldi	r31, 0xAB	; 171
    31b8:	de 01       	movw	r26, r28
    31ba:	11 96       	adiw	r26, 0x01	; 1
    31bc:	01 90       	ld	r0, Z+
    31be:	0d 92       	st	X+, r0
    31c0:	8a 95       	dec	r24
    31c2:	e1 f7       	brne	.-8      	; 0x31bc <get_MOTOR_FLOAT+0x2a>
    31c4:	22 e0       	ldi	r18, 0x02	; 2
    31c6:	ae 01       	movw	r20, r28
    31c8:	48 58       	subi	r20, 0x88	; 136
    31ca:	5f 4f       	sbci	r21, 0xFF	; 255
    31cc:	8e 2d       	mov	r24, r14
    31ce:	0e 94 e7 16 	call	0x2dce	; 0x2dce <get_MOTOR>
    31d2:	f8 2e       	mov	r15, r24
    31d4:	83 e6       	ldi	r24, 0x63	; 99
    31d6:	f8 12       	cpse	r15, r24
    31d8:	25 c0       	rjmp	.+74     	; 0x3224 <get_MOTOR_FLOAT+0x92>
    31da:	81 ec       	ldi	r24, 0xC1	; 193
    31dc:	8e 0d       	add	r24, r14
    31de:	1f 92       	push	r1
    31e0:	8f 93       	push	r24
    31e2:	ce 01       	movw	r24, r28
    31e4:	01 96       	adiw	r24, 0x01	; 1
    31e6:	9f 93       	push	r25
    31e8:	8f 93       	push	r24
    31ea:	6e 01       	movw	r12, r28
    31ec:	e8 e2       	ldi	r30, 0x28	; 40
    31ee:	ce 0e       	add	r12, r30
    31f0:	d1 1c       	adc	r13, r1
    31f2:	df 92       	push	r13
    31f4:	cf 92       	push	r12
    31f6:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
    31fa:	b6 01       	movw	r22, r12
    31fc:	86 e3       	ldi	r24, 0x36	; 54
    31fe:	91 e0       	ldi	r25, 0x01	; 1
    3200:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	90 e8       	ldi	r25, 0x80	; 128
    3208:	a6 e2       	ldi	r26, 0x26	; 38
    320a:	b4 ec       	ldi	r27, 0xC4	; 196
    320c:	f8 01       	movw	r30, r16
    320e:	80 83       	st	Z, r24
    3210:	91 83       	std	Z+1, r25	; 0x01
    3212:	a2 83       	std	Z+2, r26	; 0x02
    3214:	b3 83       	std	Z+3, r27	; 0x03
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	0f 90       	pop	r0
    321c:	0f 90       	pop	r0
    321e:	0f 90       	pop	r0
    3220:	0f 90       	pop	r0
    3222:	1c c0       	rjmp	.+56     	; 0x325c <get_MOTOR_FLOAT+0xca>
    3224:	e9 96       	adiw	r28, 0x39	; 57
    3226:	6f ad       	ldd	r22, Y+63	; 0x3f
    3228:	e9 97       	sbiw	r28, 0x39	; 57
    322a:	70 e0       	ldi	r23, 0x00	; 0
    322c:	76 2f       	mov	r23, r22
    322e:	66 27       	eor	r22, r22
    3230:	ea 96       	adiw	r28, 0x3a	; 58
    3232:	8f ad       	ldd	r24, Y+63	; 0x3f
    3234:	ea 97       	sbiw	r28, 0x3a	; 58
    3236:	68 2b       	or	r22, r24
    3238:	07 2e       	mov	r0, r23
    323a:	00 0c       	add	r0, r0
    323c:	88 0b       	sbc	r24, r24
    323e:	99 0b       	sbc	r25, r25
    3240:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	40 e2       	ldi	r20, 0x20	; 32
    324a:	51 e4       	ldi	r21, 0x41	; 65
    324c:	0e 94 1b 2a 	call	0x5436	; 0x5436 <__divsf3>
    3250:	f8 01       	movw	r30, r16
    3252:	60 83       	st	Z, r22
    3254:	71 83       	std	Z+1, r23	; 0x01
    3256:	82 83       	std	Z+2, r24	; 0x02
    3258:	93 83       	std	Z+3, r25	; 0x03
    325a:	f1 2c       	mov	r15, r1
    325c:	8f 2d       	mov	r24, r15
    325e:	c7 58       	subi	r28, 0x87	; 135
    3260:	df 4f       	sbci	r29, 0xFF	; 255
    3262:	cd bf       	out	0x3d, r28	; 61
    3264:	de bf       	out	0x3e, r29	; 62
    3266:	df 91       	pop	r29
    3268:	cf 91       	pop	r28
    326a:	1f 91       	pop	r17
    326c:	0f 91       	pop	r16
    326e:	ff 90       	pop	r15
    3270:	ef 90       	pop	r14
    3272:	df 90       	pop	r13
    3274:	cf 90       	pop	r12
    3276:	08 95       	ret

00003278 <get_MOTOR_MAXCURRENT>:
    3278:	cf 92       	push	r12
    327a:	df 92       	push	r13
    327c:	ef 92       	push	r14
    327e:	ff 92       	push	r15
    3280:	0f 93       	push	r16
    3282:	1f 93       	push	r17
    3284:	cf 93       	push	r28
    3286:	df 93       	push	r29
    3288:	cd b7       	in	r28, 0x3d	; 61
    328a:	de b7       	in	r29, 0x3e	; 62
    328c:	c4 58       	subi	r28, 0x84	; 132
    328e:	d1 09       	sbc	r29, r1
    3290:	cd bf       	out	0x3d, r28	; 61
    3292:	de bf       	out	0x3e, r29	; 62
    3294:	e8 2e       	mov	r14, r24
    3296:	8b 01       	movw	r16, r22
    3298:	8c e2       	ldi	r24, 0x2C	; 44
    329a:	e0 e6       	ldi	r30, 0x60	; 96
    329c:	fb ea       	ldi	r31, 0xAB	; 171
    329e:	de 01       	movw	r26, r28
    32a0:	11 96       	adiw	r26, 0x01	; 1
    32a2:	01 90       	ld	r0, Z+
    32a4:	0d 92       	st	X+, r0
    32a6:	8a 95       	dec	r24
    32a8:	e1 f7       	brne	.-8      	; 0x32a2 <get_MOTOR_MAXCURRENT+0x2a>
    32aa:	28 e0       	ldi	r18, 0x08	; 8
    32ac:	ae 01       	movw	r20, r28
    32ae:	43 58       	subi	r20, 0x83	; 131
    32b0:	5f 4f       	sbci	r21, 0xFF	; 255
    32b2:	67 e8       	ldi	r22, 0x87	; 135
    32b4:	8e 2d       	mov	r24, r14
    32b6:	0e 94 e7 16 	call	0x2dce	; 0x2dce <get_MOTOR>
    32ba:	f8 2e       	mov	r15, r24
    32bc:	83 e6       	ldi	r24, 0x63	; 99
    32be:	f8 12       	cpse	r15, r24
    32c0:	1b c0       	rjmp	.+54     	; 0x32f8 <get_MOTOR_MAXCURRENT+0x80>
    32c2:	81 ec       	ldi	r24, 0xC1	; 193
    32c4:	8e 0d       	add	r24, r14
    32c6:	1f 92       	push	r1
    32c8:	8f 93       	push	r24
    32ca:	ce 01       	movw	r24, r28
    32cc:	01 96       	adiw	r24, 0x01	; 1
    32ce:	9f 93       	push	r25
    32d0:	8f 93       	push	r24
    32d2:	8e 01       	movw	r16, r28
    32d4:	03 5d       	subi	r16, 0xD3	; 211
    32d6:	1f 4f       	sbci	r17, 0xFF	; 255
    32d8:	1f 93       	push	r17
    32da:	0f 93       	push	r16
    32dc:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
    32e0:	b8 01       	movw	r22, r16
    32e2:	86 e3       	ldi	r24, 0x36	; 54
    32e4:	91 e0       	ldi	r25, 0x01	; 1
    32e6:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	45 c0       	rjmp	.+138    	; 0x3382 <get_MOTOR_MAXCURRENT+0x10a>
    32f8:	ee 96       	adiw	r28, 0x3e	; 62
    32fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    32fc:	ee 97       	sbiw	r28, 0x3e	; 62
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	a0 e0       	ldi	r26, 0x00	; 0
    3302:	b0 e0       	ldi	r27, 0x00	; 0
    3304:	f8 2e       	mov	r15, r24
    3306:	ee 24       	eor	r14, r14
    3308:	dd 24       	eor	r13, r13
    330a:	cc 24       	eor	r12, r12
    330c:	ef 96       	adiw	r28, 0x3f	; 63
    330e:	4f ad       	ldd	r20, Y+63	; 0x3f
    3310:	ef 97       	sbiw	r28, 0x3f	; 63
    3312:	50 e0       	ldi	r21, 0x00	; 0
    3314:	60 e0       	ldi	r22, 0x00	; 0
    3316:	70 e0       	ldi	r23, 0x00	; 0
    3318:	da 01       	movw	r26, r20
    331a:	99 27       	eor	r25, r25
    331c:	88 27       	eor	r24, r24
    331e:	8c 29       	or	r24, r12
    3320:	9d 29       	or	r25, r13
    3322:	ae 29       	or	r26, r14
    3324:	bf 29       	or	r27, r15
    3326:	c1 58       	subi	r28, 0x81	; 129
    3328:	df 4f       	sbci	r29, 0xFF	; 255
    332a:	48 81       	ld	r20, Y
    332c:	cf 57       	subi	r28, 0x7F	; 127
    332e:	d0 40       	sbci	r29, 0x00	; 0
    3330:	50 e0       	ldi	r21, 0x00	; 0
    3332:	60 e0       	ldi	r22, 0x00	; 0
    3334:	70 e0       	ldi	r23, 0x00	; 0
    3336:	76 2f       	mov	r23, r22
    3338:	65 2f       	mov	r22, r21
    333a:	54 2f       	mov	r21, r20
    333c:	44 27       	eor	r20, r20
    333e:	84 2b       	or	r24, r20
    3340:	95 2b       	or	r25, r21
    3342:	a6 2b       	or	r26, r22
    3344:	b7 2b       	or	r27, r23
    3346:	c0 58       	subi	r28, 0x80	; 128
    3348:	df 4f       	sbci	r29, 0xFF	; 255
    334a:	28 81       	ld	r18, Y
    334c:	c0 58       	subi	r28, 0x80	; 128
    334e:	d0 40       	sbci	r29, 0x00	; 0
    3350:	82 2b       	or	r24, r18
    3352:	88 0f       	add	r24, r24
    3354:	99 1f       	adc	r25, r25
    3356:	aa 1f       	adc	r26, r26
    3358:	bb 1f       	adc	r27, r27
    335a:	ac 01       	movw	r20, r24
    335c:	bd 01       	movw	r22, r26
    335e:	44 0f       	add	r20, r20
    3360:	55 1f       	adc	r21, r21
    3362:	66 1f       	adc	r22, r22
    3364:	77 1f       	adc	r23, r23
    3366:	44 0f       	add	r20, r20
    3368:	55 1f       	adc	r21, r21
    336a:	66 1f       	adc	r22, r22
    336c:	77 1f       	adc	r23, r23
    336e:	84 0f       	add	r24, r20
    3370:	95 1f       	adc	r25, r21
    3372:	a6 1f       	adc	r26, r22
    3374:	b7 1f       	adc	r27, r23
    3376:	f8 01       	movw	r30, r16
    3378:	80 83       	st	Z, r24
    337a:	91 83       	std	Z+1, r25	; 0x01
    337c:	a2 83       	std	Z+2, r26	; 0x02
    337e:	b3 83       	std	Z+3, r27	; 0x03
    3380:	f1 2c       	mov	r15, r1
    3382:	8f 2d       	mov	r24, r15
    3384:	cc 57       	subi	r28, 0x7C	; 124
    3386:	df 4f       	sbci	r29, 0xFF	; 255
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	de bf       	out	0x3e, r29	; 62
    338c:	df 91       	pop	r29
    338e:	cf 91       	pop	r28
    3390:	1f 91       	pop	r17
    3392:	0f 91       	pop	r16
    3394:	ff 90       	pop	r15
    3396:	ef 90       	pop	r14
    3398:	df 90       	pop	r13
    339a:	cf 90       	pop	r12
    339c:	08 95       	ret

0000339e <get_MOTOR_PID>:
    339e:	ef 92       	push	r14
    33a0:	ff 92       	push	r15
    33a2:	0f 93       	push	r16
    33a4:	1f 93       	push	r17
    33a6:	cf 93       	push	r28
    33a8:	df 93       	push	r29
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
    33ae:	c1 59       	subi	r28, 0x91	; 145
    33b0:	d1 09       	sbc	r29, r1
    33b2:	cd bf       	out	0x3d, r28	; 61
    33b4:	de bf       	out	0x3e, r29	; 62
    33b6:	f8 2e       	mov	r15, r24
    33b8:	8b 01       	movw	r16, r22
    33ba:	85 e2       	ldi	r24, 0x25	; 37
    33bc:	ec e8       	ldi	r30, 0x8C	; 140
    33be:	fb ea       	ldi	r31, 0xAB	; 171
    33c0:	de 01       	movw	r26, r28
    33c2:	11 96       	adiw	r26, 0x01	; 1
    33c4:	01 90       	ld	r0, Z+
    33c6:	0d 92       	st	X+, r0
    33c8:	8a 95       	dec	r24
    33ca:	e1 f7       	brne	.-8      	; 0x33c4 <get_MOTOR_PID+0x26>
    33cc:	2c e1       	ldi	r18, 0x1C	; 28
    33ce:	ae 01       	movw	r20, r28
    33d0:	4a 58       	subi	r20, 0x8A	; 138
    33d2:	5f 4f       	sbci	r21, 0xFF	; 255
    33d4:	6f e3       	ldi	r22, 0x3F	; 63
    33d6:	8f 2d       	mov	r24, r15
    33d8:	0e 94 e7 16 	call	0x2dce	; 0x2dce <get_MOTOR>
    33dc:	e8 2e       	mov	r14, r24
    33de:	83 e6       	ldi	r24, 0x63	; 99
    33e0:	e8 12       	cpse	r14, r24
    33e2:	1b c0       	rjmp	.+54     	; 0x341a <get_MOTOR_PID+0x7c>
    33e4:	81 ec       	ldi	r24, 0xC1	; 193
    33e6:	8f 0d       	add	r24, r15
    33e8:	1f 92       	push	r1
    33ea:	8f 93       	push	r24
    33ec:	ce 01       	movw	r24, r28
    33ee:	01 96       	adiw	r24, 0x01	; 1
    33f0:	9f 93       	push	r25
    33f2:	8f 93       	push	r24
    33f4:	8e 01       	movw	r16, r28
    33f6:	0a 5d       	subi	r16, 0xDA	; 218
    33f8:	1f 4f       	sbci	r17, 0xFF	; 255
    33fa:	1f 93       	push	r17
    33fc:	0f 93       	push	r16
    33fe:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
    3402:	b8 01       	movw	r22, r16
    3404:	86 e3       	ldi	r24, 0x36	; 54
    3406:	91 e0       	ldi	r25, 0x01	; 1
    3408:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    340c:	0f 90       	pop	r0
    340e:	0f 90       	pop	r0
    3410:	0f 90       	pop	r0
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
    3416:	0f 90       	pop	r0
    3418:	e5 c1       	rjmp	.+970    	; 0x37e4 <get_MOTOR_PID+0x446>
    341a:	e7 96       	adiw	r28, 0x37	; 55
    341c:	4f ad       	ldd	r20, Y+63	; 0x3f
    341e:	e7 97       	sbiw	r28, 0x37	; 55
    3420:	50 e0       	ldi	r21, 0x00	; 0
    3422:	60 e0       	ldi	r22, 0x00	; 0
    3424:	70 e0       	ldi	r23, 0x00	; 0
    3426:	74 2f       	mov	r23, r20
    3428:	66 27       	eor	r22, r22
    342a:	55 27       	eor	r21, r21
    342c:	44 27       	eor	r20, r20
    342e:	e8 96       	adiw	r28, 0x38	; 56
    3430:	8f ad       	ldd	r24, Y+63	; 0x3f
    3432:	e8 97       	sbiw	r28, 0x38	; 56
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	a0 e0       	ldi	r26, 0x00	; 0
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	dc 01       	movw	r26, r24
    343c:	99 27       	eor	r25, r25
    343e:	88 27       	eor	r24, r24
    3440:	48 2b       	or	r20, r24
    3442:	59 2b       	or	r21, r25
    3444:	6a 2b       	or	r22, r26
    3446:	7b 2b       	or	r23, r27
    3448:	e9 96       	adiw	r28, 0x39	; 57
    344a:	8f ad       	ldd	r24, Y+63	; 0x3f
    344c:	e9 97       	sbiw	r28, 0x39	; 57
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	a0 e0       	ldi	r26, 0x00	; 0
    3452:	b0 e0       	ldi	r27, 0x00	; 0
    3454:	ba 2f       	mov	r27, r26
    3456:	a9 2f       	mov	r26, r25
    3458:	98 2f       	mov	r25, r24
    345a:	88 27       	eor	r24, r24
    345c:	84 2b       	or	r24, r20
    345e:	95 2b       	or	r25, r21
    3460:	a6 2b       	or	r26, r22
    3462:	b7 2b       	or	r27, r23
    3464:	ea 96       	adiw	r28, 0x3a	; 58
    3466:	2f ad       	ldd	r18, Y+63	; 0x3f
    3468:	ea 97       	sbiw	r28, 0x3a	; 58
    346a:	bc 01       	movw	r22, r24
    346c:	cd 01       	movw	r24, r26
    346e:	62 2b       	or	r22, r18
    3470:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	40 e8       	ldi	r20, 0x80	; 128
    347a:	5a e3       	ldi	r21, 0x3A	; 58
    347c:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
    3480:	f8 01       	movw	r30, r16
    3482:	60 83       	st	Z, r22
    3484:	71 83       	std	Z+1, r23	; 0x01
    3486:	82 83       	std	Z+2, r24	; 0x02
    3488:	93 83       	std	Z+3, r25	; 0x03
    348a:	eb 96       	adiw	r28, 0x3b	; 59
    348c:	4f ad       	ldd	r20, Y+63	; 0x3f
    348e:	eb 97       	sbiw	r28, 0x3b	; 59
    3490:	50 e0       	ldi	r21, 0x00	; 0
    3492:	60 e0       	ldi	r22, 0x00	; 0
    3494:	70 e0       	ldi	r23, 0x00	; 0
    3496:	74 2f       	mov	r23, r20
    3498:	66 27       	eor	r22, r22
    349a:	55 27       	eor	r21, r21
    349c:	44 27       	eor	r20, r20
    349e:	ec 96       	adiw	r28, 0x3c	; 60
    34a0:	8f ad       	ldd	r24, Y+63	; 0x3f
    34a2:	ec 97       	sbiw	r28, 0x3c	; 60
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	a0 e0       	ldi	r26, 0x00	; 0
    34a8:	b0 e0       	ldi	r27, 0x00	; 0
    34aa:	dc 01       	movw	r26, r24
    34ac:	99 27       	eor	r25, r25
    34ae:	88 27       	eor	r24, r24
    34b0:	48 2b       	or	r20, r24
    34b2:	59 2b       	or	r21, r25
    34b4:	6a 2b       	or	r22, r26
    34b6:	7b 2b       	or	r23, r27
    34b8:	ed 96       	adiw	r28, 0x3d	; 61
    34ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    34bc:	ed 97       	sbiw	r28, 0x3d	; 61
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	a0 e0       	ldi	r26, 0x00	; 0
    34c2:	b0 e0       	ldi	r27, 0x00	; 0
    34c4:	ba 2f       	mov	r27, r26
    34c6:	a9 2f       	mov	r26, r25
    34c8:	98 2f       	mov	r25, r24
    34ca:	88 27       	eor	r24, r24
    34cc:	84 2b       	or	r24, r20
    34ce:	95 2b       	or	r25, r21
    34d0:	a6 2b       	or	r26, r22
    34d2:	b7 2b       	or	r27, r23
    34d4:	ee 96       	adiw	r28, 0x3e	; 62
    34d6:	2f ad       	ldd	r18, Y+63	; 0x3f
    34d8:	ee 97       	sbiw	r28, 0x3e	; 62
    34da:	bc 01       	movw	r22, r24
    34dc:	cd 01       	movw	r24, r26
    34de:	62 2b       	or	r22, r18
    34e0:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	40 e8       	ldi	r20, 0x80	; 128
    34ea:	5a e3       	ldi	r21, 0x3A	; 58
    34ec:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
    34f0:	f8 01       	movw	r30, r16
    34f2:	64 83       	std	Z+4, r22	; 0x04
    34f4:	75 83       	std	Z+5, r23	; 0x05
    34f6:	86 83       	std	Z+6, r24	; 0x06
    34f8:	97 83       	std	Z+7, r25	; 0x07
    34fa:	ef 96       	adiw	r28, 0x3f	; 63
    34fc:	4f ad       	ldd	r20, Y+63	; 0x3f
    34fe:	ef 97       	sbiw	r28, 0x3f	; 63
    3500:	50 e0       	ldi	r21, 0x00	; 0
    3502:	60 e0       	ldi	r22, 0x00	; 0
    3504:	70 e0       	ldi	r23, 0x00	; 0
    3506:	74 2f       	mov	r23, r20
    3508:	66 27       	eor	r22, r22
    350a:	55 27       	eor	r21, r21
    350c:	44 27       	eor	r20, r20
    350e:	c1 58       	subi	r28, 0x81	; 129
    3510:	df 4f       	sbci	r29, 0xFF	; 255
    3512:	88 81       	ld	r24, Y
    3514:	cf 57       	subi	r28, 0x7F	; 127
    3516:	d0 40       	sbci	r29, 0x00	; 0
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	a0 e0       	ldi	r26, 0x00	; 0
    351c:	b0 e0       	ldi	r27, 0x00	; 0
    351e:	dc 01       	movw	r26, r24
    3520:	99 27       	eor	r25, r25
    3522:	88 27       	eor	r24, r24
    3524:	48 2b       	or	r20, r24
    3526:	59 2b       	or	r21, r25
    3528:	6a 2b       	or	r22, r26
    352a:	7b 2b       	or	r23, r27
    352c:	c0 58       	subi	r28, 0x80	; 128
    352e:	df 4f       	sbci	r29, 0xFF	; 255
    3530:	88 81       	ld	r24, Y
    3532:	c0 58       	subi	r28, 0x80	; 128
    3534:	d0 40       	sbci	r29, 0x00	; 0
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	a0 e0       	ldi	r26, 0x00	; 0
    353a:	b0 e0       	ldi	r27, 0x00	; 0
    353c:	ba 2f       	mov	r27, r26
    353e:	a9 2f       	mov	r26, r25
    3540:	98 2f       	mov	r25, r24
    3542:	88 27       	eor	r24, r24
    3544:	84 2b       	or	r24, r20
    3546:	95 2b       	or	r25, r21
    3548:	a6 2b       	or	r26, r22
    354a:	b7 2b       	or	r27, r23
    354c:	cf 57       	subi	r28, 0x7F	; 127
    354e:	df 4f       	sbci	r29, 0xFF	; 255
    3550:	28 81       	ld	r18, Y
    3552:	c1 58       	subi	r28, 0x81	; 129
    3554:	d0 40       	sbci	r29, 0x00	; 0
    3556:	bc 01       	movw	r22, r24
    3558:	cd 01       	movw	r24, r26
    355a:	62 2b       	or	r22, r18
    355c:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	40 e8       	ldi	r20, 0x80	; 128
    3566:	5a e3       	ldi	r21, 0x3A	; 58
    3568:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
    356c:	f8 01       	movw	r30, r16
    356e:	60 87       	std	Z+8, r22	; 0x08
    3570:	71 87       	std	Z+9, r23	; 0x09
    3572:	82 87       	std	Z+10, r24	; 0x0a
    3574:	93 87       	std	Z+11, r25	; 0x0b
    3576:	ce 57       	subi	r28, 0x7E	; 126
    3578:	df 4f       	sbci	r29, 0xFF	; 255
    357a:	88 81       	ld	r24, Y
    357c:	c2 58       	subi	r28, 0x82	; 130
    357e:	d0 40       	sbci	r29, 0x00	; 0
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	a0 e0       	ldi	r26, 0x00	; 0
    3584:	b0 e0       	ldi	r27, 0x00	; 0
    3586:	78 2f       	mov	r23, r24
    3588:	66 27       	eor	r22, r22
    358a:	55 27       	eor	r21, r21
    358c:	44 27       	eor	r20, r20
    358e:	cd 57       	subi	r28, 0x7D	; 125
    3590:	df 4f       	sbci	r29, 0xFF	; 255
    3592:	98 81       	ld	r25, Y
    3594:	c3 58       	subi	r28, 0x83	; 131
    3596:	d0 40       	sbci	r29, 0x00	; 0
    3598:	89 2f       	mov	r24, r25
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	a0 e0       	ldi	r26, 0x00	; 0
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	dc 01       	movw	r26, r24
    35a2:	99 27       	eor	r25, r25
    35a4:	88 27       	eor	r24, r24
    35a6:	84 2b       	or	r24, r20
    35a8:	95 2b       	or	r25, r21
    35aa:	a6 2b       	or	r26, r22
    35ac:	b7 2b       	or	r27, r23
    35ae:	cc 57       	subi	r28, 0x7C	; 124
    35b0:	df 4f       	sbci	r29, 0xFF	; 255
    35b2:	48 81       	ld	r20, Y
    35b4:	c4 58       	subi	r28, 0x84	; 132
    35b6:	d0 40       	sbci	r29, 0x00	; 0
    35b8:	50 e0       	ldi	r21, 0x00	; 0
    35ba:	60 e0       	ldi	r22, 0x00	; 0
    35bc:	70 e0       	ldi	r23, 0x00	; 0
    35be:	76 2f       	mov	r23, r22
    35c0:	65 2f       	mov	r22, r21
    35c2:	54 2f       	mov	r21, r20
    35c4:	44 27       	eor	r20, r20
    35c6:	84 2b       	or	r24, r20
    35c8:	95 2b       	or	r25, r21
    35ca:	a6 2b       	or	r26, r22
    35cc:	b7 2b       	or	r27, r23
    35ce:	cb 57       	subi	r28, 0x7B	; 123
    35d0:	df 4f       	sbci	r29, 0xFF	; 255
    35d2:	28 81       	ld	r18, Y
    35d4:	c5 58       	subi	r28, 0x85	; 133
    35d6:	d0 40       	sbci	r29, 0x00	; 0
    35d8:	82 2b       	or	r24, r18
    35da:	84 87       	std	Z+12, r24	; 0x0c
    35dc:	95 87       	std	Z+13, r25	; 0x0d
    35de:	a6 87       	std	Z+14, r26	; 0x0e
    35e0:	b7 87       	std	Z+15, r27	; 0x0f
    35e2:	ca 57       	subi	r28, 0x7A	; 122
    35e4:	df 4f       	sbci	r29, 0xFF	; 255
    35e6:	88 81       	ld	r24, Y
    35e8:	c6 58       	subi	r28, 0x86	; 134
    35ea:	d0 40       	sbci	r29, 0x00	; 0
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	a0 e0       	ldi	r26, 0x00	; 0
    35f0:	b0 e0       	ldi	r27, 0x00	; 0
    35f2:	78 2f       	mov	r23, r24
    35f4:	66 27       	eor	r22, r22
    35f6:	55 27       	eor	r21, r21
    35f8:	44 27       	eor	r20, r20
    35fa:	c9 57       	subi	r28, 0x79	; 121
    35fc:	df 4f       	sbci	r29, 0xFF	; 255
    35fe:	98 81       	ld	r25, Y
    3600:	c7 58       	subi	r28, 0x87	; 135
    3602:	d0 40       	sbci	r29, 0x00	; 0
    3604:	89 2f       	mov	r24, r25
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	a0 e0       	ldi	r26, 0x00	; 0
    360a:	b0 e0       	ldi	r27, 0x00	; 0
    360c:	dc 01       	movw	r26, r24
    360e:	99 27       	eor	r25, r25
    3610:	88 27       	eor	r24, r24
    3612:	84 2b       	or	r24, r20
    3614:	95 2b       	or	r25, r21
    3616:	a6 2b       	or	r26, r22
    3618:	b7 2b       	or	r27, r23
    361a:	c8 57       	subi	r28, 0x78	; 120
    361c:	df 4f       	sbci	r29, 0xFF	; 255
    361e:	48 81       	ld	r20, Y
    3620:	c8 58       	subi	r28, 0x88	; 136
    3622:	d0 40       	sbci	r29, 0x00	; 0
    3624:	50 e0       	ldi	r21, 0x00	; 0
    3626:	60 e0       	ldi	r22, 0x00	; 0
    3628:	70 e0       	ldi	r23, 0x00	; 0
    362a:	76 2f       	mov	r23, r22
    362c:	65 2f       	mov	r22, r21
    362e:	54 2f       	mov	r21, r20
    3630:	44 27       	eor	r20, r20
    3632:	84 2b       	or	r24, r20
    3634:	95 2b       	or	r25, r21
    3636:	a6 2b       	or	r26, r22
    3638:	b7 2b       	or	r27, r23
    363a:	c7 57       	subi	r28, 0x77	; 119
    363c:	df 4f       	sbci	r29, 0xFF	; 255
    363e:	28 81       	ld	r18, Y
    3640:	c9 58       	subi	r28, 0x89	; 137
    3642:	d0 40       	sbci	r29, 0x00	; 0
    3644:	82 2b       	or	r24, r18
    3646:	80 8b       	std	Z+16, r24	; 0x10
    3648:	91 8b       	std	Z+17, r25	; 0x11
    364a:	a2 8b       	std	Z+18, r26	; 0x12
    364c:	b3 8b       	std	Z+19, r27	; 0x13
    364e:	c6 57       	subi	r28, 0x76	; 118
    3650:	df 4f       	sbci	r29, 0xFF	; 255
    3652:	88 81       	ld	r24, Y
    3654:	ca 58       	subi	r28, 0x8A	; 138
    3656:	d0 40       	sbci	r29, 0x00	; 0
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	a0 e0       	ldi	r26, 0x00	; 0
    365c:	b0 e0       	ldi	r27, 0x00	; 0
    365e:	78 2f       	mov	r23, r24
    3660:	66 27       	eor	r22, r22
    3662:	55 27       	eor	r21, r21
    3664:	44 27       	eor	r20, r20
    3666:	c5 57       	subi	r28, 0x75	; 117
    3668:	df 4f       	sbci	r29, 0xFF	; 255
    366a:	98 81       	ld	r25, Y
    366c:	cb 58       	subi	r28, 0x8B	; 139
    366e:	d0 40       	sbci	r29, 0x00	; 0
    3670:	89 2f       	mov	r24, r25
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	a0 e0       	ldi	r26, 0x00	; 0
    3676:	b0 e0       	ldi	r27, 0x00	; 0
    3678:	dc 01       	movw	r26, r24
    367a:	99 27       	eor	r25, r25
    367c:	88 27       	eor	r24, r24
    367e:	84 2b       	or	r24, r20
    3680:	95 2b       	or	r25, r21
    3682:	a6 2b       	or	r26, r22
    3684:	b7 2b       	or	r27, r23
    3686:	c4 57       	subi	r28, 0x74	; 116
    3688:	df 4f       	sbci	r29, 0xFF	; 255
    368a:	48 81       	ld	r20, Y
    368c:	cc 58       	subi	r28, 0x8C	; 140
    368e:	d0 40       	sbci	r29, 0x00	; 0
    3690:	50 e0       	ldi	r21, 0x00	; 0
    3692:	60 e0       	ldi	r22, 0x00	; 0
    3694:	70 e0       	ldi	r23, 0x00	; 0
    3696:	76 2f       	mov	r23, r22
    3698:	65 2f       	mov	r22, r21
    369a:	54 2f       	mov	r21, r20
    369c:	44 27       	eor	r20, r20
    369e:	84 2b       	or	r24, r20
    36a0:	95 2b       	or	r25, r21
    36a2:	a6 2b       	or	r26, r22
    36a4:	b7 2b       	or	r27, r23
    36a6:	c3 57       	subi	r28, 0x73	; 115
    36a8:	df 4f       	sbci	r29, 0xFF	; 255
    36aa:	28 81       	ld	r18, Y
    36ac:	cd 58       	subi	r28, 0x8D	; 141
    36ae:	d0 40       	sbci	r29, 0x00	; 0
    36b0:	82 2b       	or	r24, r18
    36b2:	84 8b       	std	Z+20, r24	; 0x14
    36b4:	95 8b       	std	Z+21, r25	; 0x15
    36b6:	a6 8b       	std	Z+22, r26	; 0x16
    36b8:	b7 8b       	std	Z+23, r27	; 0x17
    36ba:	c2 57       	subi	r28, 0x72	; 114
    36bc:	df 4f       	sbci	r29, 0xFF	; 255
    36be:	88 81       	ld	r24, Y
    36c0:	ce 58       	subi	r28, 0x8E	; 142
    36c2:	d0 40       	sbci	r29, 0x00	; 0
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	a0 e0       	ldi	r26, 0x00	; 0
    36c8:	b0 e0       	ldi	r27, 0x00	; 0
    36ca:	78 2f       	mov	r23, r24
    36cc:	66 27       	eor	r22, r22
    36ce:	55 27       	eor	r21, r21
    36d0:	44 27       	eor	r20, r20
    36d2:	c1 57       	subi	r28, 0x71	; 113
    36d4:	df 4f       	sbci	r29, 0xFF	; 255
    36d6:	98 81       	ld	r25, Y
    36d8:	cf 58       	subi	r28, 0x8F	; 143
    36da:	d0 40       	sbci	r29, 0x00	; 0
    36dc:	89 2f       	mov	r24, r25
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	a0 e0       	ldi	r26, 0x00	; 0
    36e2:	b0 e0       	ldi	r27, 0x00	; 0
    36e4:	dc 01       	movw	r26, r24
    36e6:	99 27       	eor	r25, r25
    36e8:	88 27       	eor	r24, r24
    36ea:	84 2b       	or	r24, r20
    36ec:	95 2b       	or	r25, r21
    36ee:	a6 2b       	or	r26, r22
    36f0:	b7 2b       	or	r27, r23
    36f2:	c0 57       	subi	r28, 0x70	; 112
    36f4:	df 4f       	sbci	r29, 0xFF	; 255
    36f6:	48 81       	ld	r20, Y
    36f8:	c0 59       	subi	r28, 0x90	; 144
    36fa:	d0 40       	sbci	r29, 0x00	; 0
    36fc:	50 e0       	ldi	r21, 0x00	; 0
    36fe:	60 e0       	ldi	r22, 0x00	; 0
    3700:	70 e0       	ldi	r23, 0x00	; 0
    3702:	76 2f       	mov	r23, r22
    3704:	65 2f       	mov	r22, r21
    3706:	54 2f       	mov	r21, r20
    3708:	44 27       	eor	r20, r20
    370a:	84 2b       	or	r24, r20
    370c:	95 2b       	or	r25, r21
    370e:	a6 2b       	or	r26, r22
    3710:	b7 2b       	or	r27, r23
    3712:	cf 56       	subi	r28, 0x6F	; 111
    3714:	df 4f       	sbci	r29, 0xFF	; 255
    3716:	28 81       	ld	r18, Y
    3718:	c1 59       	subi	r28, 0x91	; 145
    371a:	d0 40       	sbci	r29, 0x00	; 0
    371c:	82 2b       	or	r24, r18
    371e:	80 8f       	std	Z+24, r24	; 0x18
    3720:	91 8f       	std	Z+25, r25	; 0x19
    3722:	a2 8f       	std	Z+26, r26	; 0x1a
    3724:	b3 8f       	std	Z+27, r27	; 0x1b
    3726:	20 e1       	ldi	r18, 0x10	; 16
    3728:	ae 01       	movw	r20, r28
    372a:	4a 58       	subi	r20, 0x8A	; 138
    372c:	5f 4f       	sbci	r21, 0xFF	; 255
    372e:	67 e3       	ldi	r22, 0x37	; 55
    3730:	8f 2d       	mov	r24, r15
    3732:	0e 94 e7 16 	call	0x2dce	; 0x2dce <get_MOTOR>
    3736:	e8 2e       	mov	r14, r24
    3738:	f3 e6       	ldi	r31, 0x63	; 99
    373a:	8f 13       	cpse	r24, r31
    373c:	1b c0       	rjmp	.+54     	; 0x3774 <get_MOTOR_PID+0x3d6>
    373e:	81 ec       	ldi	r24, 0xC1	; 193
    3740:	8f 0d       	add	r24, r15
    3742:	1f 92       	push	r1
    3744:	8f 93       	push	r24
    3746:	ce 01       	movw	r24, r28
    3748:	01 96       	adiw	r24, 0x01	; 1
    374a:	9f 93       	push	r25
    374c:	8f 93       	push	r24
    374e:	8e 01       	movw	r16, r28
    3750:	0a 5d       	subi	r16, 0xDA	; 218
    3752:	1f 4f       	sbci	r17, 0xFF	; 255
    3754:	1f 93       	push	r17
    3756:	0f 93       	push	r16
    3758:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
    375c:	b8 01       	movw	r22, r16
    375e:	86 e3       	ldi	r24, 0x36	; 54
    3760:	91 e0       	ldi	r25, 0x01	; 1
    3762:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	0f 90       	pop	r0
    3770:	0f 90       	pop	r0
    3772:	38 c0       	rjmp	.+112    	; 0x37e4 <get_MOTOR_PID+0x446>
    3774:	ce 57       	subi	r28, 0x7E	; 126
    3776:	df 4f       	sbci	r29, 0xFF	; 255
    3778:	88 81       	ld	r24, Y
    377a:	c2 58       	subi	r28, 0x82	; 130
    377c:	d0 40       	sbci	r29, 0x00	; 0
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	a0 e0       	ldi	r26, 0x00	; 0
    3782:	b0 e0       	ldi	r27, 0x00	; 0
    3784:	78 2f       	mov	r23, r24
    3786:	66 27       	eor	r22, r22
    3788:	55 27       	eor	r21, r21
    378a:	44 27       	eor	r20, r20
    378c:	cd 57       	subi	r28, 0x7D	; 125
    378e:	df 4f       	sbci	r29, 0xFF	; 255
    3790:	98 81       	ld	r25, Y
    3792:	c3 58       	subi	r28, 0x83	; 131
    3794:	d0 40       	sbci	r29, 0x00	; 0
    3796:	89 2f       	mov	r24, r25
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	a0 e0       	ldi	r26, 0x00	; 0
    379c:	b0 e0       	ldi	r27, 0x00	; 0
    379e:	dc 01       	movw	r26, r24
    37a0:	99 27       	eor	r25, r25
    37a2:	88 27       	eor	r24, r24
    37a4:	84 2b       	or	r24, r20
    37a6:	95 2b       	or	r25, r21
    37a8:	a6 2b       	or	r26, r22
    37aa:	b7 2b       	or	r27, r23
    37ac:	cc 57       	subi	r28, 0x7C	; 124
    37ae:	df 4f       	sbci	r29, 0xFF	; 255
    37b0:	48 81       	ld	r20, Y
    37b2:	c4 58       	subi	r28, 0x84	; 132
    37b4:	d0 40       	sbci	r29, 0x00	; 0
    37b6:	50 e0       	ldi	r21, 0x00	; 0
    37b8:	60 e0       	ldi	r22, 0x00	; 0
    37ba:	70 e0       	ldi	r23, 0x00	; 0
    37bc:	76 2f       	mov	r23, r22
    37be:	65 2f       	mov	r22, r21
    37c0:	54 2f       	mov	r21, r20
    37c2:	44 27       	eor	r20, r20
    37c4:	84 2b       	or	r24, r20
    37c6:	95 2b       	or	r25, r21
    37c8:	a6 2b       	or	r26, r22
    37ca:	b7 2b       	or	r27, r23
    37cc:	cb 57       	subi	r28, 0x7B	; 123
    37ce:	df 4f       	sbci	r29, 0xFF	; 255
    37d0:	28 81       	ld	r18, Y
    37d2:	c5 58       	subi	r28, 0x85	; 133
    37d4:	d0 40       	sbci	r29, 0x00	; 0
    37d6:	82 2b       	or	r24, r18
    37d8:	f8 01       	movw	r30, r16
    37da:	84 8f       	std	Z+28, r24	; 0x1c
    37dc:	95 8f       	std	Z+29, r25	; 0x1d
    37de:	a6 8f       	std	Z+30, r26	; 0x1e
    37e0:	b7 8f       	std	Z+31, r27	; 0x1f
    37e2:	e1 2c       	mov	r14, r1
    37e4:	8e 2d       	mov	r24, r14
    37e6:	cf 56       	subi	r28, 0x6F	; 111
    37e8:	df 4f       	sbci	r29, 0xFF	; 255
    37ea:	cd bf       	out	0x3d, r28	; 61
    37ec:	de bf       	out	0x3e, r29	; 62
    37ee:	df 91       	pop	r29
    37f0:	cf 91       	pop	r28
    37f2:	1f 91       	pop	r17
    37f4:	0f 91       	pop	r16
    37f6:	ff 90       	pop	r15
    37f8:	ef 90       	pop	r14
    37fa:	08 95       	ret

000037fc <get_MOTOR_SPEED>:
			Bit1: Direction (0=forward, 1-backwards)
			Bit2: Counter overflow (1=overflow occurred, clear after reading)
			Bits 3-7 are "reserved." Bit7 is 1.
------------------------------------------------------------------------------*/
uint8_t get_MOTOR_SPEED(uint8_t mtraddr, int32_t *speed)
{
    37fc:	ef 92       	push	r14
    37fe:	ff 92       	push	r15
    3800:	0f 93       	push	r16
    3802:	1f 93       	push	r17
    3804:	cf 93       	push	r28
    3806:	df 93       	push	r29
    3808:	cd b7       	in	r28, 0x3d	; 61
    380a:	de b7       	in	r29, 0x3e	; 62
    380c:	c1 58       	subi	r28, 0x81	; 129
    380e:	d1 09       	sbc	r29, r1
    3810:	cd bf       	out	0x3d, r28	; 61
    3812:	de bf       	out	0x3e, r29	; 62
    3814:	e8 2e       	mov	r14, r24
    3816:	8b 01       	movw	r16, r22

	const char fmt1[] = "get_MOTOR_SPEED: get_MOTOR call error on %c";
    3818:	8c e2       	ldi	r24, 0x2C	; 44
    381a:	e5 ed       	ldi	r30, 0xD5	; 213
    381c:	fb ea       	ldi	r31, 0xAB	; 171
    381e:	de 01       	movw	r26, r28
    3820:	11 96       	adiw	r26, 0x01	; 1
    3822:	01 90       	ld	r0, Z+
    3824:	0d 92       	st	X+, r0
    3826:	8a 95       	dec	r24
    3828:	e1 f7       	brne	.-8      	; 0x3822 <get_MOTOR_SPEED+0x26>
	char strbuf[80];
	uint8_t data[5];

	if (get_MOTOR(mtraddr, ENCODERSPEED, data, 5) == ERROR) {
    382a:	25 e0       	ldi	r18, 0x05	; 5
    382c:	ae 01       	movw	r20, r28
    382e:	43 58       	subi	r20, 0x83	; 131
    3830:	5f 4f       	sbci	r21, 0xFF	; 255
    3832:	62 e1       	ldi	r22, 0x12	; 18
    3834:	8e 2d       	mov	r24, r14
    3836:	0e 94 e7 16 	call	0x2dce	; 0x2dce <get_MOTOR>
    383a:	f8 2e       	mov	r15, r24
    383c:	83 e6       	ldi	r24, 0x63	; 99
    383e:	f8 12       	cpse	r15, r24
    3840:	1b c0       	rjmp	.+54     	; 0x3878 <get_MOTOR_SPEED+0x7c>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    3842:	81 ec       	ldi	r24, 0xC1	; 193
    3844:	8e 0d       	add	r24, r14
    3846:	1f 92       	push	r1
    3848:	8f 93       	push	r24
    384a:	ce 01       	movw	r24, r28
    384c:	01 96       	adiw	r24, 0x01	; 1
    384e:	9f 93       	push	r25
    3850:	8f 93       	push	r24
    3852:	8e 01       	movw	r16, r28
    3854:	03 5d       	subi	r16, 0xD3	; 211
    3856:	1f 4f       	sbci	r17, 0xFF	; 255
    3858:	1f 93       	push	r17
    385a:	0f 93       	push	r16
    385c:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
		printError(ERR_MTR, strbuf);
    3860:	b8 01       	movw	r22, r16
    3862:	86 e3       	ldi	r24, 0x36	; 54
    3864:	91 e0       	ldi	r25, 0x01	; 1
    3866:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    386a:	0f 90       	pop	r0
    386c:	0f 90       	pop	r0
    386e:	0f 90       	pop	r0
    3870:	0f 90       	pop	r0
    3872:	0f 90       	pop	r0
    3874:	0f 90       	pop	r0
    3876:	34 c0       	rjmp	.+104    	; 0x38e0 <get_MOTOR_SPEED+0xe4>
	}

	*speed =  (uint32_t) data[0] << 24;
    3878:	ee 96       	adiw	r28, 0x3e	; 62
    387a:	8f ad       	ldd	r24, Y+63	; 0x3f
    387c:	ee 97       	sbiw	r28, 0x3e	; 62
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	a0 e0       	ldi	r26, 0x00	; 0
    3882:	b0 e0       	ldi	r27, 0x00	; 0
    3884:	78 2f       	mov	r23, r24
    3886:	66 27       	eor	r22, r22
    3888:	55 27       	eor	r21, r21
    388a:	44 27       	eor	r20, r20
	*speed |= (uint32_t) data[1] << 16;
    388c:	ef 96       	adiw	r28, 0x3f	; 63
    388e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3890:	ef 97       	sbiw	r28, 0x3f	; 63
    3892:	89 2f       	mov	r24, r25
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	a0 e0       	ldi	r26, 0x00	; 0
    3898:	b0 e0       	ldi	r27, 0x00	; 0
    389a:	dc 01       	movw	r26, r24
    389c:	99 27       	eor	r25, r25
    389e:	88 27       	eor	r24, r24
    38a0:	84 2b       	or	r24, r20
    38a2:	95 2b       	or	r25, r21
    38a4:	a6 2b       	or	r26, r22
    38a6:	b7 2b       	or	r27, r23
	*speed |= (uint32_t) data[2] << 8;
    38a8:	c1 58       	subi	r28, 0x81	; 129
    38aa:	df 4f       	sbci	r29, 0xFF	; 255
    38ac:	48 81       	ld	r20, Y
    38ae:	cf 57       	subi	r28, 0x7F	; 127
    38b0:	d0 40       	sbci	r29, 0x00	; 0
    38b2:	50 e0       	ldi	r21, 0x00	; 0
    38b4:	60 e0       	ldi	r22, 0x00	; 0
    38b6:	70 e0       	ldi	r23, 0x00	; 0
    38b8:	76 2f       	mov	r23, r22
    38ba:	65 2f       	mov	r22, r21
    38bc:	54 2f       	mov	r21, r20
    38be:	44 27       	eor	r20, r20
    38c0:	84 2b       	or	r24, r20
    38c2:	95 2b       	or	r25, r21
    38c4:	a6 2b       	or	r26, r22
    38c6:	b7 2b       	or	r27, r23
	*speed |= (uint32_t) data[3];
    38c8:	c0 58       	subi	r28, 0x80	; 128
    38ca:	df 4f       	sbci	r29, 0xFF	; 255
    38cc:	28 81       	ld	r18, Y
    38ce:	c0 58       	subi	r28, 0x80	; 128
    38d0:	d0 40       	sbci	r29, 0x00	; 0
    38d2:	82 2b       	or	r24, r18
    38d4:	f8 01       	movw	r30, r16
    38d6:	80 83       	st	Z, r24
    38d8:	91 83       	std	Z+1, r25	; 0x01
    38da:	a2 83       	std	Z+2, r26	; 0x02
    38dc:	b3 83       	std	Z+3, r27	; 0x03

	return(NOERROR);
    38de:	f1 2c       	mov	r15, r1

}
    38e0:	8f 2d       	mov	r24, r15
    38e2:	cf 57       	subi	r28, 0x7F	; 127
    38e4:	df 4f       	sbci	r29, 0xFF	; 255
    38e6:	cd bf       	out	0x3d, r28	; 61
    38e8:	de bf       	out	0x3e, r29	; 62
    38ea:	df 91       	pop	r29
    38ec:	cf 91       	pop	r28
    38ee:	1f 91       	pop	r17
    38f0:	0f 91       	pop	r16
    38f2:	ff 90       	pop	r15
    38f4:	ef 90       	pop	r14
    38f6:	08 95       	ret

000038f8 <motorsMoving>:
uint8_t motorsMoving(void)
	Returns YES if any motors are moving. Emits an error message if a
	controller does not respond, but does not return "ERROR"
------------------------------------------------------------------------------*/
uint8_t motorsMoving(void)
{
    38f8:	ef 92       	push	r14
    38fa:	ff 92       	push	r15
    38fc:	0f 93       	push	r16
    38fe:	1f 93       	push	r17
    3900:	cf 93       	push	r28
    3902:	df 93       	push	r29
    3904:	cd b7       	in	r28, 0x3d	; 61
    3906:	de b7       	in	r29, 0x3e	; 62
    3908:	ce 57       	subi	r28, 0x7E	; 126
    390a:	d1 09       	sbc	r29, r1
    390c:	cd bf       	out	0x3d, r28	; 61
    390e:	de bf       	out	0x3e, r29	; 62

	const char fmt1[] = "motorsMoving: get_MOTOR_SPEED error on %c";
    3910:	8a e2       	ldi	r24, 0x2A	; 42
    3912:	e1 e0       	ldi	r30, 0x01	; 1
    3914:	fc ea       	ldi	r31, 0xAC	; 172
    3916:	de 01       	movw	r26, r28
    3918:	11 96       	adiw	r26, 0x01	; 1
    391a:	01 90       	ld	r0, Z+
    391c:	0d 92       	st	X+, r0
    391e:	8a 95       	dec	r24
    3920:	e1 f7       	brne	.-8      	; 0x391a <motorsMoving+0x22>
	char strbuf[80];
	uint8_t i, nmoving;
	int32_t encoderSpeed;

	encoderSpeed = 0;
    3922:	ef 96       	adiw	r28, 0x3f	; 63
    3924:	1c ae       	std	Y+60, r1	; 0x3c
    3926:	1d ae       	std	Y+61, r1	; 0x3d
    3928:	1e ae       	std	Y+62, r1	; 0x3e
    392a:	1f ae       	std	Y+63, r1	; 0x3f
    392c:	ef 97       	sbiw	r28, 0x3f	; 63
	nmoving = 0;
    392e:	00 e0       	ldi	r16, 0x00	; 0

	for (i = MOTOR_A; i <= MOTOR_A; i++) {
    3930:	10 e8       	ldi	r17, 0x80	; 128
    3932:	30 c0       	rjmp	.+96     	; 0x3994 <motorsMoving+0x9c>
//	for (i = MOTOR_A; i <= MOTOR_C; i++) {
		if (get_MOTOR_SPEED(i, &encoderSpeed) == ERROR) {
    3934:	be 01       	movw	r22, r28
    3936:	65 58       	subi	r22, 0x85	; 133
    3938:	7f 4f       	sbci	r23, 0xFF	; 255
    393a:	81 2f       	mov	r24, r17
    393c:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <get_MOTOR_SPEED>
    3940:	83 36       	cpi	r24, 0x63	; 99
    3942:	e1 f4       	brne	.+56     	; 0x397c <motorsMoving+0x84>
			sprintf(strbuf, fmt1, (char) (i-63));
    3944:	1f 92       	push	r1
    3946:	81 ec       	ldi	r24, 0xC1	; 193
    3948:	81 0f       	add	r24, r17
    394a:	8f 93       	push	r24
    394c:	ce 01       	movw	r24, r28
    394e:	01 96       	adiw	r24, 0x01	; 1
    3950:	9f 93       	push	r25
    3952:	8f 93       	push	r24
    3954:	7e 01       	movw	r14, r28
    3956:	8b e2       	ldi	r24, 0x2B	; 43
    3958:	e8 0e       	add	r14, r24
    395a:	f1 1c       	adc	r15, r1
    395c:	ff 92       	push	r15
    395e:	ef 92       	push	r14
    3960:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			printError(ERR_MTR, strbuf);
    3964:	b7 01       	movw	r22, r14
    3966:	86 e3       	ldi	r24, 0x36	; 54
    3968:	91 e0       	ldi	r25, 0x01	; 1
    396a:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			continue;
    396e:	0f 90       	pop	r0
    3970:	0f 90       	pop	r0
    3972:	0f 90       	pop	r0
    3974:	0f 90       	pop	r0
    3976:	0f 90       	pop	r0
    3978:	0f 90       	pop	r0
    397a:	0b c0       	rjmp	.+22     	; 0x3992 <motorsMoving+0x9a>
		}
		if (encoderSpeed != 0) {
    397c:	ef 96       	adiw	r28, 0x3f	; 63
    397e:	8c ad       	ldd	r24, Y+60	; 0x3c
    3980:	9d ad       	ldd	r25, Y+61	; 0x3d
    3982:	ae ad       	ldd	r26, Y+62	; 0x3e
    3984:	bf ad       	ldd	r27, Y+63	; 0x3f
    3986:	ef 97       	sbiw	r28, 0x3f	; 63
    3988:	89 2b       	or	r24, r25
    398a:	8a 2b       	or	r24, r26
    398c:	8b 2b       	or	r24, r27
    398e:	09 f0       	breq	.+2      	; 0x3992 <motorsMoving+0x9a>
			nmoving++;
    3990:	0f 5f       	subi	r16, 0xFF	; 255
	int32_t encoderSpeed;

	encoderSpeed = 0;
	nmoving = 0;

	for (i = MOTOR_A; i <= MOTOR_A; i++) {
    3992:	1f 5f       	subi	r17, 0xFF	; 255
    3994:	11 38       	cpi	r17, 0x81	; 129
    3996:	70 f2       	brcs	.-100    	; 0x3934 <motorsMoving+0x3c>
		}
	}

	return(nmoving);

}
    3998:	80 2f       	mov	r24, r16
    399a:	c2 58       	subi	r28, 0x82	; 130
    399c:	df 4f       	sbci	r29, 0xFF	; 255
    399e:	cd bf       	out	0x3d, r28	; 61
    39a0:	de bf       	out	0x3e, r29	; 62
    39a2:	df 91       	pop	r29
    39a4:	cf 91       	pop	r28
    39a6:	1f 91       	pop	r17
    39a8:	0f 91       	pop	r16
    39aa:	ff 90       	pop	r15
    39ac:	ef 90       	pop	r14
    39ae:	08 95       	ret

000039b0 <put_FRAM_ENCODERS>:
	Returns:
		ERROR on get_MOTOREncoder or write_FRAM failure
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t put_FRAM_ENCODERS(void)
{
    39b0:	df 92       	push	r13
    39b2:	ef 92       	push	r14
    39b4:	ff 92       	push	r15
    39b6:	0f 93       	push	r16
    39b8:	1f 93       	push	r17
    39ba:	cf 93       	push	r28
    39bc:	df 93       	push	r29
    39be:	cd b7       	in	r28, 0x3d	; 61
    39c0:	de b7       	in	r29, 0x3e	; 62
    39c2:	c7 5f       	subi	r28, 0xF7	; 247
    39c4:	d1 09       	sbc	r29, r1
    39c6:	cd bf       	out	0x3d, r28	; 61
    39c8:	de bf       	out	0x3e, r29	; 62

	const char fmt1[] = "put_FRAM_ENCODERS: get_MOTOR_ENCODER error on %c";
    39ca:	81 e3       	ldi	r24, 0x31	; 49
    39cc:	eb e2       	ldi	r30, 0x2B	; 43
    39ce:	fc ea       	ldi	r31, 0xAC	; 172
    39d0:	de 01       	movw	r26, r28
    39d2:	11 96       	adiw	r26, 0x01	; 1
    39d4:	01 90       	ld	r0, Z+
    39d6:	0d 92       	st	X+, r0
    39d8:	8a 95       	dec	r24
    39da:	e1 f7       	brne	.-8      	; 0x39d4 <put_FRAM_ENCODERS+0x24>
	const char fmt2[] = "put_FRAM_ENCODERS: write_FRAM error for %c";
    39dc:	8b e2       	ldi	r24, 0x2B	; 43
    39de:	ec e5       	ldi	r30, 0x5C	; 92
    39e0:	fc ea       	ldi	r31, 0xAC	; 172
    39e2:	de 01       	movw	r26, r28
    39e4:	d2 96       	adiw	r26, 0x32	; 50
    39e6:	01 90       	ld	r0, Z+
    39e8:	0d 92       	st	X+, r0
    39ea:	8a 95       	dec	r24
    39ec:	e1 f7       	brne	.-8      	; 0x39e6 <put_FRAM_ENCODERS+0x36>
	const char fmt3[] = "put_FRAM_ENCODERS: encoder value read out of range for %c";
    39ee:	8a e3       	ldi	r24, 0x3A	; 58
    39f0:	e7 e8       	ldi	r30, 0x87	; 135
    39f2:	fc ea       	ldi	r31, 0xAC	; 172
    39f4:	de 01       	movw	r26, r28
    39f6:	a3 5a       	subi	r26, 0xA3	; 163
    39f8:	bf 4f       	sbci	r27, 0xFF	; 255
    39fa:	01 90       	ld	r0, Z+
    39fc:	0d 92       	st	X+, r0
    39fe:	8a 95       	dec	r24
    3a00:	e1 f7       	brne	.-8      	; 0x39fa <put_FRAM_ENCODERS+0x4a>
	char strbuf[80];
	uint8_t i, tbuf[4], mtraddr[3] = {MOTOR_A, MOTOR_B, MOTOR_C};
    3a02:	80 e8       	ldi	r24, 0x80	; 128
    3a04:	c5 51       	subi	r28, 0x15	; 21
    3a06:	df 4f       	sbci	r29, 0xFF	; 255
    3a08:	88 83       	st	Y, r24
    3a0a:	cb 5e       	subi	r28, 0xEB	; 235
    3a0c:	d0 40       	sbci	r29, 0x00	; 0
    3a0e:	81 e8       	ldi	r24, 0x81	; 129
    3a10:	c4 51       	subi	r28, 0x14	; 20
    3a12:	df 4f       	sbci	r29, 0xFF	; 255
    3a14:	88 83       	st	Y, r24
    3a16:	cc 5e       	subi	r28, 0xEC	; 236
    3a18:	d0 40       	sbci	r29, 0x00	; 0
    3a1a:	82 e8       	ldi	r24, 0x82	; 130
    3a1c:	c3 51       	subi	r28, 0x13	; 19
    3a1e:	df 4f       	sbci	r29, 0xFF	; 255
    3a20:	88 83       	st	Y, r24
    3a22:	cd 5e       	subi	r28, 0xED	; 237
    3a24:	d0 40       	sbci	r29, 0x00	; 0
	uint16_t memaddr[3] = {ENCA_FRAMADDR, ENCB_FRAMADDR, ENCC_FRAMADDR};
    3a26:	86 e0       	ldi	r24, 0x06	; 6
    3a28:	e4 e0       	ldi	r30, 0x04	; 4
    3a2a:	f5 ea       	ldi	r31, 0xA5	; 165
    3a2c:	de 01       	movw	r26, r28
    3a2e:	a2 51       	subi	r26, 0x12	; 18
    3a30:	bf 4f       	sbci	r27, 0xFF	; 255
    3a32:	01 90       	ld	r0, Z+
    3a34:	0d 92       	st	X+, r0
    3a36:	8a 95       	dec	r24
    3a38:	e1 f7       	brne	.-8      	; 0x3a32 <put_FRAM_ENCODERS+0x82>
	int32_t encoderValue;

	for (i = 0; i < 1; i++) {
    3a3a:	e1 2c       	mov	r14, r1
    3a3c:	a6 c0       	rjmp	.+332    	; 0x3b8a <put_FRAM_ENCODERS+0x1da>
//	for (i = 0; i < 3; i++) {
		if (get_MOTOR_ENCODER(mtraddr[i], &encoderValue) == ERROR) {
    3a3e:	0e 2d       	mov	r16, r14
    3a40:	10 e0       	ldi	r17, 0x00	; 0
    3a42:	eb ee       	ldi	r30, 0xEB	; 235
    3a44:	f0 e0       	ldi	r31, 0x00	; 0
    3a46:	ec 0f       	add	r30, r28
    3a48:	fd 1f       	adc	r31, r29
    3a4a:	e0 0f       	add	r30, r16
    3a4c:	f1 1f       	adc	r31, r17
    3a4e:	d0 80       	ld	r13, Z
    3a50:	be 01       	movw	r22, r28
    3a52:	6c 50       	subi	r22, 0x0C	; 12
    3a54:	7f 4f       	sbci	r23, 0xFF	; 255
    3a56:	8d 2d       	mov	r24, r13
    3a58:	0e 94 3b 18 	call	0x3076	; 0x3076 <get_MOTOR_ENCODER>
    3a5c:	f8 2e       	mov	r15, r24
    3a5e:	23 e6       	ldi	r18, 0x63	; 99
    3a60:	82 13       	cpse	r24, r18
    3a62:	1b c0       	rjmp	.+54     	; 0x3a9a <put_FRAM_ENCODERS+0xea>
			sprintf(strbuf, fmt1, (char) (mtraddr[i]-63));
    3a64:	81 ec       	ldi	r24, 0xC1	; 193
    3a66:	8d 0d       	add	r24, r13
    3a68:	1f 92       	push	r1
    3a6a:	8f 93       	push	r24
    3a6c:	ce 01       	movw	r24, r28
    3a6e:	01 96       	adiw	r24, 0x01	; 1
    3a70:	9f 93       	push	r25
    3a72:	8f 93       	push	r24
    3a74:	8e 01       	movw	r16, r28
    3a76:	09 56       	subi	r16, 0x69	; 105
    3a78:	1f 4f       	sbci	r17, 0xFF	; 255
    3a7a:	1f 93       	push	r17
    3a7c:	0f 93       	push	r16
    3a7e:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			printError(ERR_MTR, strbuf);
    3a82:	b8 01       	movw	r22, r16
    3a84:	86 e3       	ldi	r24, 0x36	; 54
    3a86:	91 e0       	ldi	r25, 0x01	; 1
    3a88:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			return(ERROR);
    3a8c:	0f 90       	pop	r0
    3a8e:	0f 90       	pop	r0
    3a90:	0f 90       	pop	r0
    3a92:	0f 90       	pop	r0
    3a94:	0f 90       	pop	r0
    3a96:	0f 90       	pop	r0
    3a98:	7c c0       	rjmp	.+248    	; 0x3b92 <put_FRAM_ENCODERS+0x1e2>
		}
		if ((encoderValue > PID_MAXPOS) || (encoderValue < PID_MINPOS)) {
    3a9a:	cc 50       	subi	r28, 0x0C	; 12
    3a9c:	df 4f       	sbci	r29, 0xFF	; 255
    3a9e:	88 81       	ld	r24, Y
    3aa0:	99 81       	ldd	r25, Y+1	; 0x01
    3aa2:	aa 81       	ldd	r26, Y+2	; 0x02
    3aa4:	bb 81       	ldd	r27, Y+3	; 0x03
    3aa6:	c4 5f       	subi	r28, 0xF4	; 244
    3aa8:	d0 40       	sbci	r29, 0x00	; 0
    3aaa:	ac 01       	movw	r20, r24
    3aac:	bd 01       	movw	r22, r26
    3aae:	48 5f       	subi	r20, 0xF8	; 248
    3ab0:	53 4b       	sbci	r21, 0xB3	; 179
    3ab2:	6e 4f       	sbci	r22, 0xFE	; 254
    3ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ab6:	49 35       	cpi	r20, 0x59	; 89
    3ab8:	54 44       	sbci	r21, 0x44	; 68
    3aba:	6e 40       	sbci	r22, 0x0E	; 14
    3abc:	71 05       	cpc	r23, r1
    3abe:	00 f1       	brcs	.+64     	; 0x3b00 <put_FRAM_ENCODERS+0x150>
			sprintf(strbuf, fmt3, (char) (mtraddr[i]-63));
    3ac0:	81 ec       	ldi	r24, 0xC1	; 193
    3ac2:	8d 0d       	add	r24, r13
    3ac4:	1f 92       	push	r1
    3ac6:	8f 93       	push	r24
    3ac8:	ce 01       	movw	r24, r28
    3aca:	83 5a       	subi	r24, 0xA3	; 163
    3acc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ace:	9f 93       	push	r25
    3ad0:	8f 93       	push	r24
    3ad2:	8e 01       	movw	r16, r28
    3ad4:	09 56       	subi	r16, 0x69	; 105
    3ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad8:	1f 93       	push	r17
    3ada:	0f 93       	push	r16
    3adc:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			printError(ERR_MTR, strbuf);
    3ae0:	b8 01       	movw	r22, r16
    3ae2:	86 e3       	ldi	r24, 0x36	; 54
    3ae4:	91 e0       	ldi	r25, 0x01	; 1
    3ae6:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			return(ERROR);
    3aea:	0f 90       	pop	r0
    3aec:	0f 90       	pop	r0
    3aee:	0f 90       	pop	r0
    3af0:	0f 90       	pop	r0
    3af2:	0f 90       	pop	r0
    3af4:	0f 90       	pop	r0
    3af6:	0f 2e       	mov	r0, r31
    3af8:	f3 e6       	ldi	r31, 0x63	; 99
    3afa:	ff 2e       	mov	r15, r31
    3afc:	f0 2d       	mov	r31, r0
    3afe:	49 c0       	rjmp	.+146    	; 0x3b92 <put_FRAM_ENCODERS+0x1e2>
		}
		tbuf[0] = (encoderValue >> 24) & 0xFF;
    3b00:	c9 51       	subi	r28, 0x19	; 25
    3b02:	df 4f       	sbci	r29, 0xFF	; 255
    3b04:	b8 83       	st	Y, r27
    3b06:	c7 5e       	subi	r28, 0xE7	; 231
    3b08:	d0 40       	sbci	r29, 0x00	; 0
		tbuf[1] = (encoderValue >> 16) & 0xFF;
    3b0a:	c8 51       	subi	r28, 0x18	; 24
    3b0c:	df 4f       	sbci	r29, 0xFF	; 255
    3b0e:	a8 83       	st	Y, r26
    3b10:	c8 5e       	subi	r28, 0xE8	; 232
    3b12:	d0 40       	sbci	r29, 0x00	; 0
		tbuf[2] = (encoderValue >> 8) & 0xFF;
    3b14:	c7 51       	subi	r28, 0x17	; 23
    3b16:	df 4f       	sbci	r29, 0xFF	; 255
    3b18:	98 83       	st	Y, r25
    3b1a:	c9 5e       	subi	r28, 0xE9	; 233
    3b1c:	d0 40       	sbci	r29, 0x00	; 0
		tbuf[3] = encoderValue & 0xFF;
    3b1e:	c6 51       	subi	r28, 0x16	; 22
    3b20:	df 4f       	sbci	r29, 0xFF	; 255
    3b22:	88 83       	st	Y, r24
    3b24:	ca 5e       	subi	r28, 0xEA	; 234
    3b26:	d0 40       	sbci	r29, 0x00	; 0
		if (write_FRAM(FRAMTWIADDR, memaddr[i], tbuf, 4) == ERROR) {
    3b28:	00 0f       	add	r16, r16
    3b2a:	11 1f       	adc	r17, r17
    3b2c:	ee ee       	ldi	r30, 0xEE	; 238
    3b2e:	f0 e0       	ldi	r31, 0x00	; 0
    3b30:	ec 0f       	add	r30, r28
    3b32:	fd 1f       	adc	r31, r29
    3b34:	e0 0f       	add	r30, r16
    3b36:	f1 1f       	adc	r31, r17
    3b38:	10 81       	ld	r17, Z
    3b3a:	71 81       	ldd	r23, Z+1	; 0x01
    3b3c:	24 e0       	ldi	r18, 0x04	; 4
    3b3e:	ae 01       	movw	r20, r28
    3b40:	49 51       	subi	r20, 0x19	; 25
    3b42:	5f 4f       	sbci	r21, 0xFF	; 255
    3b44:	61 2f       	mov	r22, r17
    3b46:	80 e5       	ldi	r24, 0x50	; 80
    3b48:	0e 94 49 08 	call	0x1092	; 0x1092 <write_FRAM>
    3b4c:	f8 2e       	mov	r15, r24
    3b4e:	83 e6       	ldi	r24, 0x63	; 99
    3b50:	f8 12       	cpse	r15, r24
    3b52:	1a c0       	rjmp	.+52     	; 0x3b88 <put_FRAM_ENCODERS+0x1d8>
			sprintf(strbuf, fmt2, (char) (memaddr[i]-63));
    3b54:	1f 53       	subi	r17, 0x3F	; 63
    3b56:	1f 92       	push	r1
    3b58:	1f 93       	push	r17
    3b5a:	ce 01       	movw	r24, r28
    3b5c:	c2 96       	adiw	r24, 0x32	; 50
    3b5e:	9f 93       	push	r25
    3b60:	8f 93       	push	r24
    3b62:	8e 01       	movw	r16, r28
    3b64:	09 56       	subi	r16, 0x69	; 105
    3b66:	1f 4f       	sbci	r17, 0xFF	; 255
    3b68:	1f 93       	push	r17
    3b6a:	0f 93       	push	r16
    3b6c:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			printError(ERR_FRAM, strbuf);
    3b70:	b8 01       	movw	r22, r16
    3b72:	83 e9       	ldi	r24, 0x93	; 147
    3b74:	91 e0       	ldi	r25, 0x01	; 1
    3b76:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			return(ERROR);
    3b7a:	0f 90       	pop	r0
    3b7c:	0f 90       	pop	r0
    3b7e:	0f 90       	pop	r0
    3b80:	0f 90       	pop	r0
    3b82:	0f 90       	pop	r0
    3b84:	0f 90       	pop	r0
    3b86:	05 c0       	rjmp	.+10     	; 0x3b92 <put_FRAM_ENCODERS+0x1e2>
	char strbuf[80];
	uint8_t i, tbuf[4], mtraddr[3] = {MOTOR_A, MOTOR_B, MOTOR_C};
	uint16_t memaddr[3] = {ENCA_FRAMADDR, ENCB_FRAMADDR, ENCC_FRAMADDR};
	int32_t encoderValue;

	for (i = 0; i < 1; i++) {
    3b88:	e3 94       	inc	r14
    3b8a:	ee 20       	and	r14, r14
    3b8c:	09 f4       	brne	.+2      	; 0x3b90 <put_FRAM_ENCODERS+0x1e0>
    3b8e:	57 cf       	rjmp	.-338    	; 0x3a3e <put_FRAM_ENCODERS+0x8e>
			sprintf(strbuf, fmt2, (char) (memaddr[i]-63));
			printError(ERR_FRAM, strbuf);
			return(ERROR);
		}
	}
	return(NOERROR);
    3b90:	f1 2c       	mov	r15, r1

}
    3b92:	8f 2d       	mov	r24, r15
    3b94:	c9 50       	subi	r28, 0x09	; 9
    3b96:	df 4f       	sbci	r29, 0xFF	; 255
    3b98:	cd bf       	out	0x3d, r28	; 61
    3b9a:	de bf       	out	0x3e, r29	; 62
    3b9c:	df 91       	pop	r29
    3b9e:	cf 91       	pop	r28
    3ba0:	1f 91       	pop	r17
    3ba2:	0f 91       	pop	r16
    3ba4:	ff 90       	pop	r15
    3ba6:	ef 90       	pop	r14
    3ba8:	df 90       	pop	r13
    3baa:	08 95       	ret

00003bac <put_MOTOR>:
	Returns:
		ERROR:		If a serial timeout or bad acknowledge is detected
		NOERROR:	Otherwise
------------------------------------------------------------------------------*/
uint8_t put_MOTOR(uint8_t mtraddr, uint8_t cmd, uint8_t* data, uint8_t nbytes)
{
    3bac:	8f 92       	push	r8
    3bae:	9f 92       	push	r9
    3bb0:	af 92       	push	r10
    3bb2:	bf 92       	push	r11
    3bb4:	cf 92       	push	r12
    3bb6:	df 92       	push	r13
    3bb8:	ef 92       	push	r14
    3bba:	ff 92       	push	r15
    3bbc:	0f 93       	push	r16
    3bbe:	1f 93       	push	r17
    3bc0:	cf 93       	push	r28
    3bc2:	df 93       	push	r29
    3bc4:	cd b7       	in	r28, 0x3d	; 61
    3bc6:	de b7       	in	r29, 0x3e	; 62
    3bc8:	c5 59       	subi	r28, 0x95	; 149
    3bca:	d1 09       	sbc	r29, r1
    3bcc:	cd bf       	out	0x3d, r28	; 61
    3bce:	de bf       	out	0x3e, r29	; 62
    3bd0:	a8 2e       	mov	r10, r24
    3bd2:	b2 2e       	mov	r11, r18
		return(ERROR);
	}

	return(NOERROR);

}
    3bd4:	cd b6       	in	r12, 0x3d	; 61
    3bd6:	de b6       	in	r13, 0x3e	; 62
		NOERROR:	Otherwise
------------------------------------------------------------------------------*/
uint8_t put_MOTOR(uint8_t mtraddr, uint8_t cmd, uint8_t* data, uint8_t nbytes)
{

	const char fmt1[] = "put_MOTOR: serial timeout on %c";
    3bd8:	80 e2       	ldi	r24, 0x20	; 32
    3bda:	e1 ec       	ldi	r30, 0xC1	; 193
    3bdc:	fc ea       	ldi	r31, 0xAC	; 172
    3bde:	de 01       	movw	r26, r28
    3be0:	11 96       	adiw	r26, 0x01	; 1
    3be2:	01 90       	ld	r0, Z+
    3be4:	0d 92       	st	X+, r0
    3be6:	8a 95       	dec	r24
    3be8:	e1 f7       	brne	.-8      	; 0x3be2 <put_MOTOR+0x36>
	const char fmt2[] = "put_MOTOR: bad ACK on %c, ack=0x%02x";
    3bea:	85 e2       	ldi	r24, 0x25	; 37
    3bec:	e1 ee       	ldi	r30, 0xE1	; 225
    3bee:	fc ea       	ldi	r31, 0xAC	; 172
    3bf0:	de 01       	movw	r26, r28
    3bf2:	91 96       	adiw	r26, 0x21	; 33
    3bf4:	01 90       	ld	r0, Z+
    3bf6:	0d 92       	st	X+, r0
    3bf8:	8a 95       	dec	r24
    3bfa:	e1 f7       	brne	.-8      	; 0x3bf4 <put_MOTOR+0x48>
	char strbuf[80];
	uint8_t i, tbuf[nbytes+4];
    3bfc:	82 2e       	mov	r8, r18
    3bfe:	91 2c       	mov	r9, r1
    3c00:	c4 01       	movw	r24, r8
    3c02:	04 96       	adiw	r24, 0x04	; 4
    3c04:	74 01       	movw	r14, r8
    3c06:	23 e0       	ldi	r18, 0x03	; 3
    3c08:	e2 0e       	add	r14, r18
    3c0a:	f1 1c       	adc	r15, r1
    3c0c:	ad b7       	in	r26, 0x3d	; 61
    3c0e:	be b7       	in	r27, 0x3e	; 62
    3c10:	a8 1b       	sub	r26, r24
    3c12:	b9 0b       	sbc	r27, r25
    3c14:	ad bf       	out	0x3d, r26	; 61
    3c16:	be bf       	out	0x3e, r27	; 62
    3c18:	0d b7       	in	r16, 0x3d	; 61
    3c1a:	1e b7       	in	r17, 0x3e	; 62
    3c1c:	0f 5f       	subi	r16, 0xFF	; 255
    3c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c20:	f8 01       	movw	r30, r16
	uint16_t crc;

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    3c22:	10 92 3b 2a 	sts	0x2A3B, r1	; 0x802a3b <recv1_buf>
	recv1_buf.nbytes = 1;
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	80 93 3b 2b 	sts	0x2B3B, r24	; 0x802b3b <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    3c2c:	10 92 3d 2b 	sts	0x2B3D, r1	; 0x802b3d <recv1_buf+0x102>
	recv1_buf.done = NO;
    3c30:	10 92 3e 2b 	sts	0x2B3E, r1	; 0x802b3e <recv1_buf+0x103>

	tbuf[0] = mtraddr;
    3c34:	11 96       	adiw	r26, 0x01	; 1
    3c36:	ac 92       	st	X, r10
	tbuf[1] = cmd;
    3c38:	61 83       	std	Z+1, r22	; 0x01
	for (i = 0; i < nbytes; i++) {
    3c3a:	60 e0       	ldi	r22, 0x00	; 0
    3c3c:	0e c0       	rjmp	.+28     	; 0x3c5a <put_MOTOR+0xae>
		tbuf[i+2] = data[i];
    3c3e:	86 2f       	mov	r24, r22
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	9c 01       	movw	r18, r24
    3c44:	2e 5f       	subi	r18, 0xFE	; 254
    3c46:	3f 4f       	sbci	r19, 0xFF	; 255
    3c48:	da 01       	movw	r26, r20
    3c4a:	a8 0f       	add	r26, r24
    3c4c:	b9 1f       	adc	r27, r25
    3c4e:	8c 91       	ld	r24, X
    3c50:	df 01       	movw	r26, r30
    3c52:	a2 0f       	add	r26, r18
    3c54:	b3 1f       	adc	r27, r19
    3c56:	8c 93       	st	X, r24
	recv1_buf.nxfrd = 0;
	recv1_buf.done = NO;

	tbuf[0] = mtraddr;
	tbuf[1] = cmd;
	for (i = 0; i < nbytes; i++) {
    3c58:	6f 5f       	subi	r22, 0xFF	; 255
    3c5a:	6b 15       	cp	r22, r11
    3c5c:	80 f3       	brcs	.-32     	; 0x3c3e <put_MOTOR+0x92>
		tbuf[i+2] = data[i];
	}
	crc = crc16(tbuf, nbytes+2);
    3c5e:	b2 e0       	ldi	r27, 0x02	; 2
    3c60:	8b 0e       	add	r8, r27
    3c62:	91 1c       	adc	r9, r1
    3c64:	b4 01       	movw	r22, r8
    3c66:	c8 01       	movw	r24, r16
    3c68:	0e 94 20 16 	call	0x2c40	; 0x2c40 <crc16>
	tbuf[nbytes+2] = (crc >> 8) & 0xFF;
    3c6c:	d8 01       	movw	r26, r16
    3c6e:	a8 0d       	add	r26, r8
    3c70:	b9 1d       	adc	r27, r9
    3c72:	9c 93       	st	X, r25
	tbuf[nbytes+3] = crc & 0xFF;
    3c74:	f8 01       	movw	r30, r16
    3c76:	ee 0d       	add	r30, r14
    3c78:	ff 1d       	adc	r31, r15
    3c7a:	80 83       	st	Z, r24

	send_USART(1, tbuf, nbytes+4);		// Send the command
    3c7c:	44 e0       	ldi	r20, 0x04	; 4
    3c7e:	4b 0d       	add	r20, r11
    3c80:	b8 01       	movw	r22, r16
    3c82:	81 e0       	ldi	r24, 0x01	; 1
    3c84:	0e 94 8a 27 	call	0x4f14	; 0x4f14 <send_USART>
	USART1_ticks = 0;
    3c88:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    3c8c:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    3c90:	80 91 3e 2b 	lds	r24, 0x2B3E	; 0x802b3e <recv1_buf+0x103>
    3c94:	81 30       	cpi	r24, 0x01	; 1
    3c96:	11 f1       	breq	.+68     	; 0x3cdc <put_MOTOR+0x130>
			break;
		}
		if (USART1_ticks > 50) {
    3c98:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    3c9c:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    3ca0:	c3 97       	sbiw	r24, 0x33	; 51
    3ca2:	b0 f3       	brcs	.-20     	; 0x3c90 <put_MOTOR+0xe4>
			sprintf(strbuf, fmt1, (char) (mtraddr-63));
    3ca4:	81 ec       	ldi	r24, 0xC1	; 193
    3ca6:	8a 0d       	add	r24, r10
    3ca8:	1f 92       	push	r1
    3caa:	8f 93       	push	r24
    3cac:	ce 01       	movw	r24, r28
    3cae:	01 96       	adiw	r24, 0x01	; 1
    3cb0:	9f 93       	push	r25
    3cb2:	8f 93       	push	r24
    3cb4:	8e 01       	movw	r16, r28
    3cb6:	0a 5b       	subi	r16, 0xBA	; 186
    3cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cba:	1f 93       	push	r17
    3cbc:	0f 93       	push	r16
    3cbe:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			printError(ERR_MTR, strbuf);
    3cc2:	b8 01       	movw	r22, r16
    3cc4:	86 e3       	ldi	r24, 0x36	; 54
    3cc6:	91 e0       	ldi	r25, 0x01	; 1
    3cc8:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			return(ERROR);
    3ccc:	0f 90       	pop	r0
    3cce:	0f 90       	pop	r0
    3cd0:	0f 90       	pop	r0
    3cd2:	0f 90       	pop	r0
    3cd4:	0f 90       	pop	r0
    3cd6:	0f 90       	pop	r0
    3cd8:	83 e6       	ldi	r24, 0x63	; 99
    3cda:	23 c0       	rjmp	.+70     	; 0x3d22 <put_MOTOR+0x176>
		}
	}

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
    3cdc:	90 91 3b 2a 	lds	r25, 0x2A3B	; 0x802a3b <recv1_buf>
    3ce0:	9f 3f       	cpi	r25, 0xFF	; 255
    3ce2:	f1 f0       	breq	.+60     	; 0x3d20 <put_MOTOR+0x174>
		sprintf(strbuf, fmt2, (char) (mtraddr-63), recv1_buf.data[0]);
    3ce4:	81 ec       	ldi	r24, 0xC1	; 193
    3ce6:	8a 0d       	add	r24, r10
    3ce8:	1f 92       	push	r1
    3cea:	9f 93       	push	r25
    3cec:	1f 92       	push	r1
    3cee:	8f 93       	push	r24
    3cf0:	ce 01       	movw	r24, r28
    3cf2:	81 96       	adiw	r24, 0x21	; 33
    3cf4:	9f 93       	push	r25
    3cf6:	8f 93       	push	r24
    3cf8:	8e 01       	movw	r16, r28
    3cfa:	0a 5b       	subi	r16, 0xBA	; 186
    3cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    3cfe:	1f 93       	push	r17
    3d00:	0f 93       	push	r16
    3d02:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
		printError(ERR_MTR, strbuf);
    3d06:	b8 01       	movw	r22, r16
    3d08:	86 e3       	ldi	r24, 0x36	; 54
    3d0a:	91 e0       	ldi	r25, 0x01	; 1
    3d0c:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    3d10:	2d b7       	in	r18, 0x3d	; 61
    3d12:	3e b7       	in	r19, 0x3e	; 62
    3d14:	28 5f       	subi	r18, 0xF8	; 248
    3d16:	3f 4f       	sbci	r19, 0xFF	; 255
    3d18:	2d bf       	out	0x3d, r18	; 61
    3d1a:	3e bf       	out	0x3e, r19	; 62
    3d1c:	83 e6       	ldi	r24, 0x63	; 99
    3d1e:	01 c0       	rjmp	.+2      	; 0x3d22 <put_MOTOR+0x176>
	}

	return(NOERROR);
    3d20:	80 e0       	ldi	r24, 0x00	; 0

}
    3d22:	cd be       	out	0x3d, r12	; 61
    3d24:	de be       	out	0x3e, r13	; 62
    3d26:	cb 56       	subi	r28, 0x6B	; 107
    3d28:	df 4f       	sbci	r29, 0xFF	; 255
    3d2a:	cd bf       	out	0x3d, r28	; 61
    3d2c:	de bf       	out	0x3e, r29	; 62
    3d2e:	df 91       	pop	r29
    3d30:	cf 91       	pop	r28
    3d32:	1f 91       	pop	r17
    3d34:	0f 91       	pop	r16
    3d36:	ff 90       	pop	r15
    3d38:	ef 90       	pop	r14
    3d3a:	df 90       	pop	r13
    3d3c:	cf 90       	pop	r12
    3d3e:	bf 90       	pop	r11
    3d40:	af 90       	pop	r10
    3d42:	9f 90       	pop	r9
    3d44:	8f 90       	pop	r8
    3d46:	08 95       	ret

00003d48 <move_MOTOR>:
	Returns:
		ERROR if an unknown motor designator
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR(uint8_t mtraddr, int32_t newPosition)
{
    3d48:	ef 92       	push	r14
    3d4a:	ff 92       	push	r15
    3d4c:	0f 93       	push	r16
    3d4e:	1f 93       	push	r17
    3d50:	cf 93       	push	r28
    3d52:	df 93       	push	r29
    3d54:	cd b7       	in	r28, 0x3d	; 61
    3d56:	de b7       	in	r29, 0x3e	; 62
    3d58:	c3 58       	subi	r28, 0x83	; 131
    3d5a:	d1 09       	sbc	r29, r1
    3d5c:	cd bf       	out	0x3d, r28	; 61
    3d5e:	de bf       	out	0x3e, r29	; 62
    3d60:	f8 2e       	mov	r15, r24

	const char fmt1[] = "move_MOTOR: put_MOTOR error on %c";
    3d62:	82 e2       	ldi	r24, 0x22	; 34
    3d64:	e1 e1       	ldi	r30, 0x11	; 17
    3d66:	fd ea       	ldi	r31, 0xAD	; 173
    3d68:	de 01       	movw	r26, r28
    3d6a:	11 96       	adiw	r26, 0x01	; 1
    3d6c:	01 90       	ld	r0, Z+
    3d6e:	0d 92       	st	X+, r0
    3d70:	8a 95       	dec	r24
    3d72:	e1 f7       	brne	.-8      	; 0x3d6c <move_MOTOR+0x24>
	buffer = 0;						// Operation is buffered
	acceleration = ACCELERATION;	// See roboclaw.h
	deceleration = DECELERATION;
	speed = SPEED;

	data[0] = (acceleration >> 24) & 0XFF;
    3d74:	e4 96       	adiw	r28, 0x34	; 52
    3d76:	1f ae       	std	Y+63, r1	; 0x3f
    3d78:	e4 97       	sbiw	r28, 0x34	; 52
	data[1] = (acceleration >> 16) & 0xFF;
    3d7a:	e5 96       	adiw	r28, 0x35	; 53
    3d7c:	1f ae       	std	Y+63, r1	; 0x3f
    3d7e:	e5 97       	sbiw	r28, 0x35	; 53
	data[2] = (acceleration >> 8) & 0xFF;
    3d80:	9b e1       	ldi	r25, 0x1B	; 27
    3d82:	e6 96       	adiw	r28, 0x36	; 54
    3d84:	9f af       	std	Y+63, r25	; 0x3f
    3d86:	e6 97       	sbiw	r28, 0x36	; 54
	data[3] = (acceleration) & 0xFF;
    3d88:	85 ea       	ldi	r24, 0xA5	; 165
    3d8a:	e7 96       	adiw	r28, 0x37	; 55
    3d8c:	8f af       	std	Y+63, r24	; 0x3f
    3d8e:	e7 97       	sbiw	r28, 0x37	; 55
	data[4] = (speed >> 24) & 0xFF;
    3d90:	e8 96       	adiw	r28, 0x38	; 56
    3d92:	1f ae       	std	Y+63, r1	; 0x3f
    3d94:	e8 97       	sbiw	r28, 0x38	; 56
	data[5] = (speed >> 16) & 0xFF;
    3d96:	e9 96       	adiw	r28, 0x39	; 57
    3d98:	1f ae       	std	Y+63, r1	; 0x3f
    3d9a:	e9 97       	sbiw	r28, 0x39	; 57
	data[6] = (speed >> 8) & 0xFF;
    3d9c:	ea 96       	adiw	r28, 0x3a	; 58
    3d9e:	9f af       	std	Y+63, r25	; 0x3f
    3da0:	ea 97       	sbiw	r28, 0x3a	; 58
	data[7] = (speed) & 0xFF;
    3da2:	eb 96       	adiw	r28, 0x3b	; 59
    3da4:	8f af       	std	Y+63, r24	; 0x3f
    3da6:	eb 97       	sbiw	r28, 0x3b	; 59
	data[8] = (deceleration >> 24) & 0xFF;
    3da8:	ec 96       	adiw	r28, 0x3c	; 60
    3daa:	1f ae       	std	Y+63, r1	; 0x3f
    3dac:	ec 97       	sbiw	r28, 0x3c	; 60
	data[9] = (deceleration >> 16) & 0xFF;
    3dae:	ed 96       	adiw	r28, 0x3d	; 61
    3db0:	1f ae       	std	Y+63, r1	; 0x3f
    3db2:	ed 97       	sbiw	r28, 0x3d	; 61
	data[10] = (deceleration >> 8) & 0xFF;
    3db4:	ee 96       	adiw	r28, 0x3e	; 62
    3db6:	9f af       	std	Y+63, r25	; 0x3f
    3db8:	ee 97       	sbiw	r28, 0x3e	; 62
	data[11] = (deceleration) & 0xFF;
    3dba:	ef 96       	adiw	r28, 0x3f	; 63
    3dbc:	8f af       	std	Y+63, r24	; 0x3f
    3dbe:	ef 97       	sbiw	r28, 0x3f	; 63
	data[12] = (newPosition >> 24) & 0xFF;
    3dc0:	c1 58       	subi	r28, 0x81	; 129
    3dc2:	df 4f       	sbci	r29, 0xFF	; 255
    3dc4:	78 83       	st	Y, r23
    3dc6:	cf 57       	subi	r28, 0x7F	; 127
    3dc8:	d0 40       	sbci	r29, 0x00	; 0
	data[13] = (newPosition >> 16) & 0xFF;
    3dca:	c0 58       	subi	r28, 0x80	; 128
    3dcc:	df 4f       	sbci	r29, 0xFF	; 255
    3dce:	68 83       	st	Y, r22
    3dd0:	c0 58       	subi	r28, 0x80	; 128
    3dd2:	d0 40       	sbci	r29, 0x00	; 0
	data[14] = (newPosition >> 8) & 0xFF;
    3dd4:	cf 57       	subi	r28, 0x7F	; 127
    3dd6:	df 4f       	sbci	r29, 0xFF	; 255
    3dd8:	58 83       	st	Y, r21
    3dda:	c1 58       	subi	r28, 0x81	; 129
    3ddc:	d0 40       	sbci	r29, 0x00	; 0
	data[15] = (newPosition) & 0xFF;
    3dde:	ce 57       	subi	r28, 0x7E	; 126
    3de0:	df 4f       	sbci	r29, 0xFF	; 255
    3de2:	48 83       	st	Y, r20
    3de4:	c2 58       	subi	r28, 0x82	; 130
    3de6:	d0 40       	sbci	r29, 0x00	; 0
	data[16] = buffer;
    3de8:	cd 57       	subi	r28, 0x7D	; 125
    3dea:	df 4f       	sbci	r29, 0xFF	; 255
    3dec:	18 82       	st	Y, r1
    3dee:	c3 58       	subi	r28, 0x83	; 131
    3df0:	d0 40       	sbci	r29, 0x00	; 0

sprintf(strbuf, "newpos=%ld", newPosition);
    3df2:	7f 93       	push	r23
    3df4:	6f 93       	push	r22
    3df6:	5f 93       	push	r21
    3df8:	4f 93       	push	r20
    3dfa:	86 e0       	ldi	r24, 0x06	; 6
    3dfc:	9d ea       	ldi	r25, 0xAD	; 173
    3dfe:	9f 93       	push	r25
    3e00:	8f 93       	push	r24
    3e02:	8e 01       	movw	r16, r28
    3e04:	0d 5d       	subi	r16, 0xDD	; 221
    3e06:	1f 4f       	sbci	r17, 0xFF	; 255
    3e08:	1f 93       	push	r17
    3e0a:	0f 93       	push	r16
    3e0c:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
printLine(strbuf);
    3e10:	c8 01       	movw	r24, r16
    3e12:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	if (put_MOTOR(mtraddr, DRIVETO, data, nbytes) == ERROR) {
    3e16:	21 e1       	ldi	r18, 0x11	; 17
    3e18:	ae 01       	movw	r20, r28
    3e1a:	4d 58       	subi	r20, 0x8D	; 141
    3e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e1e:	61 e4       	ldi	r22, 0x41	; 65
    3e20:	8f 2d       	mov	r24, r15
    3e22:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <put_MOTOR>
    3e26:	18 2f       	mov	r17, r24
    3e28:	cd bf       	out	0x3d, r28	; 61
    3e2a:	de bf       	out	0x3e, r29	; 62
    3e2c:	13 36       	cpi	r17, 0x63	; 99
    3e2e:	e1 f4       	brne	.+56     	; 0x3e68 <move_MOTOR+0x120>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    3e30:	81 ec       	ldi	r24, 0xC1	; 193
    3e32:	8f 0d       	add	r24, r15
    3e34:	1f 92       	push	r1
    3e36:	8f 93       	push	r24
    3e38:	ce 01       	movw	r24, r28
    3e3a:	01 96       	adiw	r24, 0x01	; 1
    3e3c:	9f 93       	push	r25
    3e3e:	8f 93       	push	r24
    3e40:	7e 01       	movw	r14, r28
    3e42:	93 e2       	ldi	r25, 0x23	; 35
    3e44:	e9 0e       	add	r14, r25
    3e46:	f1 1c       	adc	r15, r1
    3e48:	ff 92       	push	r15
    3e4a:	ef 92       	push	r14
    3e4c:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
		printError(ERR_MTR, strbuf);
    3e50:	b7 01       	movw	r22, r14
    3e52:	86 e3       	ldi	r24, 0x36	; 54
    3e54:	91 e0       	ldi	r25, 0x01	; 1
    3e56:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    3e5a:	0f 90       	pop	r0
    3e5c:	0f 90       	pop	r0
    3e5e:	0f 90       	pop	r0
    3e60:	0f 90       	pop	r0
    3e62:	0f 90       	pop	r0
    3e64:	0f 90       	pop	r0
    3e66:	01 c0       	rjmp	.+2      	; 0x3e6a <move_MOTOR+0x122>
	}

	return(NOERROR);
    3e68:	10 e0       	ldi	r17, 0x00	; 0

}
    3e6a:	81 2f       	mov	r24, r17
    3e6c:	cd 57       	subi	r28, 0x7D	; 125
    3e6e:	df 4f       	sbci	r29, 0xFF	; 255
    3e70:	cd bf       	out	0x3d, r28	; 61
    3e72:	de bf       	out	0x3e, r29	; 62
    3e74:	df 91       	pop	r29
    3e76:	cf 91       	pop	r28
    3e78:	1f 91       	pop	r17
    3e7a:	0f 91       	pop	r16
    3e7c:	ff 90       	pop	r15
    3e7e:	ef 90       	pop	r14
    3e80:	08 95       	ret

00003e82 <move_MOTOR_CMD>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR_CMD(uint8_t cstack)
{
    3e82:	cf 92       	push	r12
    3e84:	df 92       	push	r13
    3e86:	ef 92       	push	r14
    3e88:	ff 92       	push	r15
    3e8a:	1f 93       	push	r17
    3e8c:	cf 93       	push	r28
    3e8e:	df 93       	push	r29
    3e90:	00 d0       	rcall	.+0      	; 0x3e92 <move_MOTOR_CMD+0x10>
    3e92:	00 d0       	rcall	.+0      	; 0x3e94 <move_MOTOR_CMD+0x12>
    3e94:	cd b7       	in	r28, 0x3d	; 61
    3e96:	de b7       	in	r29, 0x3e	; 62

	uint8_t motor, controller, retval;
	int32_t newPosition, currentPosition;

	motor = pcmd[cstack].cobject;
    3e98:	e8 2e       	mov	r14, r24
    3e9a:	f1 2c       	mov	r15, r1
    3e9c:	84 e3       	ldi	r24, 0x34	; 52
    3e9e:	8e 9d       	mul	r24, r14
    3ea0:	f0 01       	movw	r30, r0
    3ea2:	8f 9d       	mul	r24, r15
    3ea4:	f0 0d       	add	r31, r0
    3ea6:	11 24       	eor	r1, r1
    3ea8:	e3 5f       	subi	r30, 0xF3	; 243
    3eaa:	f7 4d       	sbci	r31, 0xD7	; 215
    3eac:	81 81       	ldd	r24, Z+1	; 0x01
	switch(motor) {
    3eae:	81 34       	cpi	r24, 0x41	; 65
    3eb0:	00 f1       	brcs	.+64     	; 0x3ef2 <move_MOTOR_CMD+0x70>
    3eb2:	84 34       	cpi	r24, 0x44	; 68
    3eb4:	28 f0       	brcs	.+10     	; 0x3ec0 <move_MOTOR_CMD+0x3e>
    3eb6:	9f e9       	ldi	r25, 0x9F	; 159
    3eb8:	98 0f       	add	r25, r24
    3eba:	93 30       	cpi	r25, 0x03	; 3
    3ebc:	40 f0       	brcs	.+16     	; 0x3ece <move_MOTOR_CMD+0x4c>
    3ebe:	19 c0       	rjmp	.+50     	; 0x3ef2 <move_MOTOR_CMD+0x70>
		case 'A':
		case 'B':
		case 'C':
			controller = motor + 63;
    3ec0:	1f e3       	ldi	r17, 0x3F	; 63
    3ec2:	18 0f       	add	r17, r24
			currentPosition = 0;
    3ec4:	19 82       	std	Y+1, r1	; 0x01
    3ec6:	1a 82       	std	Y+2, r1	; 0x02
    3ec8:	1b 82       	std	Y+3, r1	; 0x03
    3eca:	1c 82       	std	Y+4, r1	; 0x04
			break;
    3ecc:	1a c0       	rjmp	.+52     	; 0x3f02 <move_MOTOR_CMD+0x80>

		case 'a':
		case 'b':
		case 'c':
			controller = motor + 31;
    3ece:	1f e1       	ldi	r17, 0x1F	; 31
    3ed0:	18 0f       	add	r17, r24
			retval = get_MOTOR_ENCODER(controller, &currentPosition);
    3ed2:	be 01       	movw	r22, r28
    3ed4:	6f 5f       	subi	r22, 0xFF	; 255
    3ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed8:	81 2f       	mov	r24, r17
    3eda:	0e 94 3b 18 	call	0x3076	; 0x3076 <get_MOTOR_ENCODER>
			if (retval == ERROR) {
    3ede:	83 36       	cpi	r24, 0x63	; 99
    3ee0:	81 f4       	brne	.+32     	; 0x3f02 <move_MOTOR_CMD+0x80>
				printError(ERR_MTR_ENC_VAL, "move_MOTOR_CMD: get_MOTOR_ENCODER error");
    3ee2:	63 e3       	ldi	r22, 0x33	; 51
    3ee4:	7d ea       	ldi	r23, 0xAD	; 173
    3ee6:	85 e3       	ldi	r24, 0x35	; 53
    3ee8:	91 e0       	ldi	r25, 0x01	; 1
    3eea:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				return(ERROR);
    3eee:	13 e6       	ldi	r17, 0x63	; 99
    3ef0:	3d c0       	rjmp	.+122    	; 0x3f6c <move_MOTOR_CMD+0xea>
			}
			break;

		default:
			printError(ERR_MTR, "move_MOTOR_CMD: unknown motor");
    3ef2:	6b e5       	ldi	r22, 0x5B	; 91
    3ef4:	7d ea       	ldi	r23, 0xAD	; 173
    3ef6:	86 e3       	ldi	r24, 0x36	; 54
    3ef8:	91 e0       	ldi	r25, 0x01	; 1
    3efa:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			return(ERROR);
    3efe:	13 e6       	ldi	r17, 0x63	; 99
    3f00:	35 c0       	rjmp	.+106    	; 0x3f6c <move_MOTOR_CMD+0xea>
			break;	
	}

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    3f02:	84 e3       	ldi	r24, 0x34	; 52
    3f04:	8e 9d       	mul	r24, r14
    3f06:	f0 01       	movw	r30, r0
    3f08:	8f 9d       	mul	r24, r15
    3f0a:	f0 0d       	add	r31, r0
    3f0c:	11 24       	eor	r1, r1
    3f0e:	e3 5f       	subi	r30, 0xF3	; 243
    3f10:	f7 4d       	sbci	r31, 0xD7	; 215
    3f12:	82 81       	ldd	r24, Z+2	; 0x02
    3f14:	88 23       	and	r24, r24
    3f16:	39 f1       	breq	.+78     	; 0x3f66 <move_MOTOR_CMD+0xe4>
		return(NOERROR);
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    3f18:	24 e3       	ldi	r18, 0x34	; 52
    3f1a:	2e 9d       	mul	r18, r14
    3f1c:	c0 01       	movw	r24, r0
    3f1e:	2f 9d       	mul	r18, r15
    3f20:	90 0d       	add	r25, r0
    3f22:	11 24       	eor	r1, r1
    3f24:	81 5f       	subi	r24, 0xF1	; 241
    3f26:	97 4d       	sbci	r25, 0xD7	; 215
    3f28:	0e 94 3c 30 	call	0x6078	; 0x6078 <atol>
    3f2c:	9b 01       	movw	r18, r22
    3f2e:	ac 01       	movw	r20, r24
    3f30:	ab e1       	ldi	r26, 0x1B	; 27
    3f32:	b1 e0       	ldi	r27, 0x01	; 1
    3f34:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <__muluhisi3>
    3f38:	c9 80       	ldd	r12, Y+1	; 0x01
    3f3a:	da 80       	ldd	r13, Y+2	; 0x02
    3f3c:	eb 80       	ldd	r14, Y+3	; 0x03
    3f3e:	fc 80       	ldd	r15, Y+4	; 0x04
    3f40:	ab 01       	movw	r20, r22
    3f42:	bc 01       	movw	r22, r24
    3f44:	4c 0d       	add	r20, r12
    3f46:	5d 1d       	adc	r21, r13
    3f48:	6e 1d       	adc	r22, r14
    3f4a:	7f 1d       	adc	r23, r15

	if (move_MOTOR(controller, newPosition) == ERROR) {
    3f4c:	81 2f       	mov	r24, r17
    3f4e:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <move_MOTOR>
    3f52:	18 2f       	mov	r17, r24
    3f54:	83 36       	cpi	r24, 0x63	; 99
    3f56:	49 f4       	brne	.+18     	; 0x3f6a <move_MOTOR_CMD+0xe8>
		printError(ERR_MTR, "move_MOTOR_CMD: move_MOTOR error");
    3f58:	69 e7       	ldi	r22, 0x79	; 121
    3f5a:	7d ea       	ldi	r23, 0xAD	; 173
    3f5c:	86 e3       	ldi	r24, 0x36	; 54
    3f5e:	91 e0       	ldi	r25, 0x01	; 1
    3f60:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    3f64:	03 c0       	rjmp	.+6      	; 0x3f6c <move_MOTOR_CMD+0xea>
			return(ERROR);
			break;	
	}

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
		return(NOERROR);
    3f66:	10 e0       	ldi	r17, 0x00	; 0
    3f68:	01 c0       	rjmp	.+2      	; 0x3f6c <move_MOTOR_CMD+0xea>
	if (move_MOTOR(controller, newPosition) == ERROR) {
		printError(ERR_MTR, "move_MOTOR_CMD: move_MOTOR error");
		return(ERROR);
	}

	return(ERROR);
    3f6a:	13 e6       	ldi	r17, 0x63	; 99

}
    3f6c:	81 2f       	mov	r24, r17
    3f6e:	24 96       	adiw	r28, 0x04	; 4
    3f70:	cd bf       	out	0x3d, r28	; 61
    3f72:	de bf       	out	0x3e, r29	; 62
    3f74:	df 91       	pop	r29
    3f76:	cf 91       	pop	r28
    3f78:	1f 91       	pop	r17
    3f7a:	ff 90       	pop	r15
    3f7c:	ef 90       	pop	r14
    3f7e:	df 90       	pop	r13
    3f80:	cf 90       	pop	r12
    3f82:	08 95       	ret

00003f84 <move_MOTOR_HOME>:

uint8_t move_MOTOR_HOME(void)
{
    3f84:	4f 92       	push	r4
    3f86:	5f 92       	push	r5
    3f88:	6f 92       	push	r6
    3f8a:	7f 92       	push	r7
    3f8c:	8f 92       	push	r8
    3f8e:	9f 92       	push	r9
    3f90:	af 92       	push	r10
    3f92:	bf 92       	push	r11
    3f94:	df 92       	push	r13
    3f96:	ef 92       	push	r14
    3f98:	ff 92       	push	r15
    3f9a:	0f 93       	push	r16
    3f9c:	1f 93       	push	r17
    3f9e:	cf 93       	push	r28
    3fa0:	df 93       	push	r29
    3fa2:	cd b7       	in	r28, 0x3d	; 61
    3fa4:	de b7       	in	r29, 0x3e	; 62
    3fa6:	c1 5b       	subi	r28, 0xB1	; 177
    3fa8:	d1 09       	sbc	r29, r1
    3faa:	cd bf       	out	0x3d, r28	; 61
    3fac:	de bf       	out	0x3e, r29	; 62

	const char fmt1[] = "moveMOTOR_HOME: get_MOTOR_ENCODER error on %c";
    3fae:	8e e2       	ldi	r24, 0x2E	; 46
    3fb0:	e5 ec       	ldi	r30, 0xC5	; 197
    3fb2:	fd ea       	ldi	r31, 0xAD	; 173
    3fb4:	de 01       	movw	r26, r28
    3fb6:	11 96       	adiw	r26, 0x01	; 1
    3fb8:	01 90       	ld	r0, Z+
    3fba:	0d 92       	st	X+, r0
    3fbc:	8a 95       	dec	r24
    3fbe:	e1 f7       	brne	.-8      	; 0x3fb8 <move_MOTOR_HOME+0x34>
	const char fmt2[] = "moveMOTOR_HOME: move_MOTOR error on %c";
    3fc0:	87 e2       	ldi	r24, 0x27	; 39
    3fc2:	e3 ef       	ldi	r30, 0xF3	; 243
    3fc4:	fd ea       	ldi	r31, 0xAD	; 173
    3fc6:	de 01       	movw	r26, r28
    3fc8:	9f 96       	adiw	r26, 0x2f	; 47
    3fca:	01 90       	ld	r0, Z+
    3fcc:	0d 92       	st	X+, r0
    3fce:	8a 95       	dec	r24
    3fd0:	e1 f7       	brne	.-8      	; 0x3fca <move_MOTOR_HOME+0x46>
	char strbuf[80];
	uint8_t i, mtraddr;
	int32_t curPos[3], avgPos;

	avgPos = 0;
    3fd2:	81 2c       	mov	r8, r1
    3fd4:	91 2c       	mov	r9, r1
    3fd6:	54 01       	movw	r10, r8

	for (i = 0; i < 1; i++) {
    3fd8:	00 e0       	ldi	r16, 0x00	; 0
    3fda:	47 c0       	rjmp	.+142    	; 0x406a <__RODATA_PM_OFFSET__+0x6a>
//	for (i = 0; i < 4; i++) {
		mtraddr = i+128;
    3fdc:	68 94       	set
    3fde:	dd 24       	eor	r13, r13
    3fe0:	d7 f8       	bld	r13, 7
    3fe2:	d0 0e       	add	r13, r16
		if (get_MOTOR_ENCODER(mtraddr, &curPos[i]) == ERROR) {
    3fe4:	e0 2e       	mov	r14, r16
    3fe6:	f1 2c       	mov	r15, r1
    3fe8:	b7 01       	movw	r22, r14
    3fea:	66 0f       	add	r22, r22
    3fec:	77 1f       	adc	r23, r23
    3fee:	66 0f       	add	r22, r22
    3ff0:	77 1f       	adc	r23, r23
    3ff2:	86 ea       	ldi	r24, 0xA6	; 166
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	8c 0f       	add	r24, r28
    3ff8:	9d 1f       	adc	r25, r29
    3ffa:	68 0f       	add	r22, r24
    3ffc:	79 1f       	adc	r23, r25
    3ffe:	8d 2d       	mov	r24, r13
    4000:	0e 94 3b 18 	call	0x3076	; 0x3076 <get_MOTOR_ENCODER>
    4004:	18 2f       	mov	r17, r24
    4006:	83 36       	cpi	r24, 0x63	; 99
    4008:	e9 f4       	brne	.+58     	; 0x4044 <__RODATA_PM_OFFSET__+0x44>
			sprintf(strbuf, fmt1, mtraddr-63);
    400a:	8d 2d       	mov	r24, r13
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	cf 97       	sbiw	r24, 0x3f	; 63
    4010:	9f 93       	push	r25
    4012:	8f 93       	push	r24
    4014:	ce 01       	movw	r24, r28
    4016:	01 96       	adiw	r24, 0x01	; 1
    4018:	9f 93       	push	r25
    401a:	8f 93       	push	r24
    401c:	7e 01       	movw	r14, r28
    401e:	96 e5       	ldi	r25, 0x56	; 86
    4020:	e9 0e       	add	r14, r25
    4022:	f1 1c       	adc	r15, r1
    4024:	ff 92       	push	r15
    4026:	ef 92       	push	r14
    4028:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			printError(ERR_MTR, strbuf);
    402c:	b7 01       	movw	r22, r14
    402e:	86 e3       	ldi	r24, 0x36	; 54
    4030:	91 e0       	ldi	r25, 0x01	; 1
    4032:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			return(ERROR);
    4036:	0f 90       	pop	r0
    4038:	0f 90       	pop	r0
    403a:	0f 90       	pop	r0
    403c:	0f 90       	pop	r0
    403e:	0f 90       	pop	r0
    4040:	0f 90       	pop	r0
    4042:	58 c1       	rjmp	.+688    	; 0x42f4 <__RODATA_PM_OFFSET__+0x2f4>
		}
		avgPos += curPos[i];
    4044:	ee 0c       	add	r14, r14
    4046:	ff 1c       	adc	r15, r15
    4048:	ee 0c       	add	r14, r14
    404a:	ff 1c       	adc	r15, r15
    404c:	e6 ea       	ldi	r30, 0xA6	; 166
    404e:	f0 e0       	ldi	r31, 0x00	; 0
    4050:	ec 0f       	add	r30, r28
    4052:	fd 1f       	adc	r31, r29
    4054:	ee 0d       	add	r30, r14
    4056:	ff 1d       	adc	r31, r15
    4058:	80 81       	ld	r24, Z
    405a:	91 81       	ldd	r25, Z+1	; 0x01
    405c:	a2 81       	ldd	r26, Z+2	; 0x02
    405e:	b3 81       	ldd	r27, Z+3	; 0x03
    4060:	88 0e       	add	r8, r24
    4062:	99 1e       	adc	r9, r25
    4064:	aa 1e       	adc	r10, r26
    4066:	bb 1e       	adc	r11, r27
	uint8_t i, mtraddr;
	int32_t curPos[3], avgPos;

	avgPos = 0;

	for (i = 0; i < 1; i++) {
    4068:	0f 5f       	subi	r16, 0xFF	; 255
    406a:	00 23       	and	r16, r16
    406c:	09 f4       	brne	.+2      	; 0x4070 <__RODATA_PM_OFFSET__+0x70>
    406e:	b6 cf       	rjmp	.-148    	; 0x3fdc <move_MOTOR_HOME+0x58>
			printError(ERR_MTR, strbuf);
			return(ERROR);
		}
		avgPos += curPos[i];
	}
	avgPos /= 3;
    4070:	c5 01       	movw	r24, r10
    4072:	b4 01       	movw	r22, r8
    4074:	23 e0       	ldi	r18, 0x03	; 3
    4076:	30 e0       	ldi	r19, 0x00	; 0
    4078:	40 e0       	ldi	r20, 0x00	; 0
    407a:	50 e0       	ldi	r21, 0x00	; 0
    407c:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <__divmodsi4>
    4080:	29 01       	movw	r4, r18
    4082:	3a 01       	movw	r6, r20

sprintf(strbuf, " avgPos = %ld", avgPos/ENC_COUNTS_PER_MICRON);
    4084:	c5 01       	movw	r24, r10
    4086:	b4 01       	movw	r22, r8
    4088:	21 e5       	ldi	r18, 0x51	; 81
    408a:	33 e0       	ldi	r19, 0x03	; 3
    408c:	40 e0       	ldi	r20, 0x00	; 0
    408e:	50 e0       	ldi	r21, 0x00	; 0
    4090:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <__divmodsi4>
    4094:	5f 93       	push	r21
    4096:	4f 93       	push	r20
    4098:	3f 93       	push	r19
    409a:	2f 93       	push	r18
    409c:	8a e9       	ldi	r24, 0x9A	; 154
    409e:	9d ea       	ldi	r25, 0xAD	; 173
    40a0:	9f 93       	push	r25
    40a2:	8f 93       	push	r24
    40a4:	8e 01       	movw	r16, r28
    40a6:	0a 5a       	subi	r16, 0xAA	; 170
    40a8:	1f 4f       	sbci	r17, 0xFF	; 255
    40aa:	1f 93       	push	r17
    40ac:	0f 93       	push	r16
    40ae:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
printLine(strbuf);
    40b2:	c8 01       	movw	r24, r16
    40b4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	for (i = 0; i < 1; i++) {
    40b8:	cd bf       	out	0x3d, r28	; 61
    40ba:	de bf       	out	0x3e, r29	; 62
    40bc:	00 e0       	ldi	r16, 0x00	; 0
    40be:	2a c0       	rjmp	.+84     	; 0x4114 <__RODATA_PM_OFFSET__+0x114>
//	for (i = 0; i < 4; i++) {
		mtraddr = i+128;
    40c0:	68 94       	set
    40c2:	ff 24       	eor	r15, r15
    40c4:	f7 f8       	bld	r15, 7
    40c6:	f0 0e       	add	r15, r16
		if (move_MOTOR(mtraddr, avgPos) == ERROR) {
    40c8:	b3 01       	movw	r22, r6
    40ca:	a2 01       	movw	r20, r4
    40cc:	8f 2d       	mov	r24, r15
    40ce:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <move_MOTOR>
    40d2:	18 2f       	mov	r17, r24
    40d4:	83 36       	cpi	r24, 0x63	; 99
    40d6:	e9 f4       	brne	.+58     	; 0x4112 <__RODATA_PM_OFFSET__+0x112>
			sprintf(strbuf, fmt2, mtraddr-63);
    40d8:	8f 2d       	mov	r24, r15
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	cf 97       	sbiw	r24, 0x3f	; 63
    40de:	9f 93       	push	r25
    40e0:	8f 93       	push	r24
    40e2:	ce 01       	movw	r24, r28
    40e4:	8f 96       	adiw	r24, 0x2f	; 47
    40e6:	9f 93       	push	r25
    40e8:	8f 93       	push	r24
    40ea:	7e 01       	movw	r14, r28
    40ec:	96 e5       	ldi	r25, 0x56	; 86
    40ee:	e9 0e       	add	r14, r25
    40f0:	f1 1c       	adc	r15, r1
    40f2:	ff 92       	push	r15
    40f4:	ef 92       	push	r14
    40f6:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			printError(ERR_MTR, strbuf);
    40fa:	b7 01       	movw	r22, r14
    40fc:	86 e3       	ldi	r24, 0x36	; 54
    40fe:	91 e0       	ldi	r25, 0x01	; 1
    4100:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			return(ERROR);
    4104:	0f 90       	pop	r0
    4106:	0f 90       	pop	r0
    4108:	0f 90       	pop	r0
    410a:	0f 90       	pop	r0
    410c:	0f 90       	pop	r0
    410e:	0f 90       	pop	r0
    4110:	f1 c0       	rjmp	.+482    	; 0x42f4 <__RODATA_PM_OFFSET__+0x2f4>
	avgPos /= 3;

sprintf(strbuf, " avgPos = %ld", avgPos/ENC_COUNTS_PER_MICRON);
printLine(strbuf);

	for (i = 0; i < 1; i++) {
    4112:	0f 5f       	subi	r16, 0xFF	; 255
    4114:	00 23       	and	r16, r16
    4116:	a1 f2       	breq	.-88     	; 0x40c0 <__RODATA_PM_OFFSET__+0xc0>
    4118:	25 e1       	ldi	r18, 0x15	; 21
    411a:	86 e1       	ldi	r24, 0x16	; 22
    411c:	95 e0       	ldi	r25, 0x05	; 5
    411e:	21 50       	subi	r18, 0x01	; 1
    4120:	80 40       	sbci	r24, 0x00	; 0
    4122:	90 40       	sbci	r25, 0x00	; 0
    4124:	e1 f7       	brne	.-8      	; 0x411e <__RODATA_PM_OFFSET__+0x11e>
			printError(ERR_MTR, strbuf);
			return(ERROR);
		}
	}

i = 0;
    4126:	f1 2c       	mov	r15, r1
    4128:	1f c0       	rjmp	.+62     	; 0x4168 <__RODATA_PM_OFFSET__+0x168>
	_delay_ms(500);		// give the motor a chance to start up
	while (motorsMoving()) {
sprintf(strbuf, " moving %d", i);
    412a:	1f 92       	push	r1
    412c:	ff 92       	push	r15
    412e:	88 ea       	ldi	r24, 0xA8	; 168
    4130:	9d ea       	ldi	r25, 0xAD	; 173
    4132:	9f 93       	push	r25
    4134:	8f 93       	push	r24
    4136:	8e 01       	movw	r16, r28
    4138:	0a 5a       	subi	r16, 0xAA	; 170
    413a:	1f 4f       	sbci	r17, 0xFF	; 255
    413c:	1f 93       	push	r17
    413e:	0f 93       	push	r16
    4140:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
printLine(strbuf);
    4144:	c8 01       	movw	r24, r16
    4146:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
    414a:	2a e2       	ldi	r18, 0x2A	; 42
    414c:	8c e2       	ldi	r24, 0x2C	; 44
    414e:	9a e0       	ldi	r25, 0x0A	; 10
    4150:	21 50       	subi	r18, 0x01	; 1
    4152:	80 40       	sbci	r24, 0x00	; 0
    4154:	90 40       	sbci	r25, 0x00	; 0
    4156:	e1 f7       	brne	.-8      	; 0x4150 <__RODATA_PM_OFFSET__+0x150>
    4158:	00 00       	nop
		_delay_ms(1000);
		i++;
    415a:	f3 94       	inc	r15
    415c:	0f 90       	pop	r0
    415e:	0f 90       	pop	r0
    4160:	0f 90       	pop	r0
    4162:	0f 90       	pop	r0
    4164:	0f 90       	pop	r0
    4166:	0f 90       	pop	r0
		}
	}

i = 0;
	_delay_ms(500);		// give the motor a chance to start up
	while (motorsMoving()) {
    4168:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <motorsMoving>
    416c:	81 11       	cpse	r24, r1
    416e:	dd cf       	rjmp	.-70     	; 0x412a <__RODATA_PM_OFFSET__+0x12a>
printLine(strbuf);
		_delay_ms(1000);
		i++;
	}

sprintf(strbuf, " stopped after %d", i);
    4170:	1f 92       	push	r1
    4172:	ff 92       	push	r15
    4174:	83 eb       	ldi	r24, 0xB3	; 179
    4176:	9d ea       	ldi	r25, 0xAD	; 173
    4178:	9f 93       	push	r25
    417a:	8f 93       	push	r24
    417c:	8e 01       	movw	r16, r28
    417e:	0a 5a       	subi	r16, 0xAA	; 170
    4180:	1f 4f       	sbci	r17, 0xFF	; 255
    4182:	1f 93       	push	r17
    4184:	0f 93       	push	r16
    4186:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
printLine(strbuf);
    418a:	c8 01       	movw	r24, r16
    418c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	for (i = 0; i < 1; i++) {
    4190:	0f 90       	pop	r0
    4192:	0f 90       	pop	r0
    4194:	0f 90       	pop	r0
    4196:	0f 90       	pop	r0
    4198:	0f 90       	pop	r0
    419a:	0f 90       	pop	r0
    419c:	00 e0       	ldi	r16, 0x00	; 0
    419e:	34 c0       	rjmp	.+104    	; 0x4208 <__RODATA_PM_OFFSET__+0x208>
//	for (i = 0; i < 4; i++) {
		mtraddr = i+128;
    41a0:	68 94       	set
    41a2:	ff 24       	eor	r15, r15
    41a4:	f7 f8       	bld	r15, 7
    41a6:	f0 0e       	add	r15, r16
		if (get_MOTOR_ENCODER(mtraddr, &curPos[i]) == ERROR) {
    41a8:	60 2f       	mov	r22, r16
    41aa:	70 e0       	ldi	r23, 0x00	; 0
    41ac:	66 0f       	add	r22, r22
    41ae:	77 1f       	adc	r23, r23
    41b0:	66 0f       	add	r22, r22
    41b2:	77 1f       	adc	r23, r23
    41b4:	86 ea       	ldi	r24, 0xA6	; 166
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	8c 0f       	add	r24, r28
    41ba:	9d 1f       	adc	r25, r29
    41bc:	68 0f       	add	r22, r24
    41be:	79 1f       	adc	r23, r25
    41c0:	8f 2d       	mov	r24, r15
    41c2:	0e 94 3b 18 	call	0x3076	; 0x3076 <get_MOTOR_ENCODER>
    41c6:	18 2f       	mov	r17, r24
    41c8:	83 36       	cpi	r24, 0x63	; 99
    41ca:	e9 f4       	brne	.+58     	; 0x4206 <__RODATA_PM_OFFSET__+0x206>
			sprintf(strbuf, fmt1, mtraddr-63);
    41cc:	8f 2d       	mov	r24, r15
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	cf 97       	sbiw	r24, 0x3f	; 63
    41d2:	9f 93       	push	r25
    41d4:	8f 93       	push	r24
    41d6:	ce 01       	movw	r24, r28
    41d8:	01 96       	adiw	r24, 0x01	; 1
    41da:	9f 93       	push	r25
    41dc:	8f 93       	push	r24
    41de:	7e 01       	movw	r14, r28
    41e0:	96 e5       	ldi	r25, 0x56	; 86
    41e2:	e9 0e       	add	r14, r25
    41e4:	f1 1c       	adc	r15, r1
    41e6:	ff 92       	push	r15
    41e8:	ef 92       	push	r14
    41ea:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			printError(ERR_MTR, strbuf);
    41ee:	b7 01       	movw	r22, r14
    41f0:	86 e3       	ldi	r24, 0x36	; 54
    41f2:	91 e0       	ldi	r25, 0x01	; 1
    41f4:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			return(ERROR);
    41f8:	0f 90       	pop	r0
    41fa:	0f 90       	pop	r0
    41fc:	0f 90       	pop	r0
    41fe:	0f 90       	pop	r0
    4200:	0f 90       	pop	r0
    4202:	0f 90       	pop	r0
    4204:	77 c0       	rjmp	.+238    	; 0x42f4 <__RODATA_PM_OFFSET__+0x2f4>
	}

sprintf(strbuf, " stopped after %d", i);
printLine(strbuf);

	for (i = 0; i < 1; i++) {
    4206:	0f 5f       	subi	r16, 0xFF	; 255
    4208:	00 23       	and	r16, r16
    420a:	51 f2       	breq	.-108    	; 0x41a0 <__RODATA_PM_OFFSET__+0x1a0>
    420c:	00 e0       	ldi	r16, 0x00	; 0
    420e:	2c c0       	rjmp	.+88     	; 0x4268 <__RODATA_PM_OFFSET__+0x268>

	// TBD: Check that all motors are at the same position

	// Move motors to 200 microns position
	for (i = 0; i < 4; i++) {
		mtraddr = i+128;
    4210:	68 94       	set
    4212:	ff 24       	eor	r15, r15
    4214:	f7 f8       	bld	r15, 7
    4216:	f0 0e       	add	r15, r16
		if (move_MOTOR(mtraddr, 200UL * ENC_COUNTS_PER_MICRON) == ERROR) {
    4218:	48 e1       	ldi	r20, 0x18	; 24
    421a:	5d ed       	ldi	r21, 0xDD	; 221
    421c:	60 e0       	ldi	r22, 0x00	; 0
    421e:	70 e0       	ldi	r23, 0x00	; 0
    4220:	8f 2d       	mov	r24, r15
    4222:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <move_MOTOR>
    4226:	18 2f       	mov	r17, r24
    4228:	83 36       	cpi	r24, 0x63	; 99
    422a:	e9 f4       	brne	.+58     	; 0x4266 <__RODATA_PM_OFFSET__+0x266>
			sprintf(strbuf, fmt1, mtraddr-63);
    422c:	8f 2d       	mov	r24, r15
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	cf 97       	sbiw	r24, 0x3f	; 63
    4232:	9f 93       	push	r25
    4234:	8f 93       	push	r24
    4236:	ce 01       	movw	r24, r28
    4238:	01 96       	adiw	r24, 0x01	; 1
    423a:	9f 93       	push	r25
    423c:	8f 93       	push	r24
    423e:	7e 01       	movw	r14, r28
    4240:	26 e5       	ldi	r18, 0x56	; 86
    4242:	e2 0e       	add	r14, r18
    4244:	f1 1c       	adc	r15, r1
    4246:	ff 92       	push	r15
    4248:	ef 92       	push	r14
    424a:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
			printError(ERR_MTR, strbuf);
    424e:	b7 01       	movw	r22, r14
    4250:	86 e3       	ldi	r24, 0x36	; 54
    4252:	91 e0       	ldi	r25, 0x01	; 1
    4254:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
// should stop all motors here
			return(ERROR);
    4258:	0f 90       	pop	r0
    425a:	0f 90       	pop	r0
    425c:	0f 90       	pop	r0
    425e:	0f 90       	pop	r0
    4260:	0f 90       	pop	r0
    4262:	0f 90       	pop	r0
    4264:	47 c0       	rjmp	.+142    	; 0x42f4 <__RODATA_PM_OFFSET__+0x2f4>
	}

	// TBD: Check that all motors are at the same position

	// Move motors to 200 microns position
	for (i = 0; i < 4; i++) {
    4266:	0f 5f       	subi	r16, 0xFF	; 255
    4268:	04 30       	cpi	r16, 0x04	; 4
    426a:	90 f2       	brcs	.-92     	; 0x4210 <__RODATA_PM_OFFSET__+0x210>
    426c:	85 e1       	ldi	r24, 0x15	; 21
    426e:	96 e1       	ldi	r25, 0x16	; 22
    4270:	25 e0       	ldi	r18, 0x05	; 5
    4272:	81 50       	subi	r24, 0x01	; 1
    4274:	90 40       	sbci	r25, 0x00	; 0
    4276:	20 40       	sbci	r18, 0x00	; 0
    4278:	e1 f7       	brne	.-8      	; 0x4272 <__RODATA_PM_OFFSET__+0x272>
// should stop all motors here
			return(ERROR);
		}
	}

i = 0;
    427a:	f1 2c       	mov	r15, r1
    427c:	1f c0       	rjmp	.+62     	; 0x42bc <__RODATA_PM_OFFSET__+0x2bc>
	_delay_ms(500);		// give the motor a chance to start up
	while (motorsMoving()) {
		sprintf(strbuf, " moving %d", i);
    427e:	1f 92       	push	r1
    4280:	ff 92       	push	r15
    4282:	88 ea       	ldi	r24, 0xA8	; 168
    4284:	9d ea       	ldi	r25, 0xAD	; 173
    4286:	9f 93       	push	r25
    4288:	8f 93       	push	r24
    428a:	8e 01       	movw	r16, r28
    428c:	0a 5a       	subi	r16, 0xAA	; 170
    428e:	1f 4f       	sbci	r17, 0xFF	; 255
    4290:	1f 93       	push	r17
    4292:	0f 93       	push	r16
    4294:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
		printLine(strbuf);
    4298:	c8 01       	movw	r24, r16
    429a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
    429e:	8a e2       	ldi	r24, 0x2A	; 42
    42a0:	9c e2       	ldi	r25, 0x2C	; 44
    42a2:	2a e0       	ldi	r18, 0x0A	; 10
    42a4:	81 50       	subi	r24, 0x01	; 1
    42a6:	90 40       	sbci	r25, 0x00	; 0
    42a8:	20 40       	sbci	r18, 0x00	; 0
    42aa:	e1 f7       	brne	.-8      	; 0x42a4 <__RODATA_PM_OFFSET__+0x2a4>
    42ac:	00 00       	nop
		_delay_ms(1000);
		i++;
    42ae:	f3 94       	inc	r15
    42b0:	0f 90       	pop	r0
    42b2:	0f 90       	pop	r0
    42b4:	0f 90       	pop	r0
    42b6:	0f 90       	pop	r0
    42b8:	0f 90       	pop	r0
    42ba:	0f 90       	pop	r0
		}
	}

i = 0;
	_delay_ms(500);		// give the motor a chance to start up
	while (motorsMoving()) {
    42bc:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <motorsMoving>
    42c0:	18 2f       	mov	r17, r24
    42c2:	81 11       	cpse	r24, r1
    42c4:	dc cf       	rjmp	.-72     	; 0x427e <__RODATA_PM_OFFSET__+0x27e>
		printLine(strbuf);
		_delay_ms(1000);
		i++;
	}

sprintf(strbuf, " stopped after %d", i);
    42c6:	1f 92       	push	r1
    42c8:	ff 92       	push	r15
    42ca:	83 eb       	ldi	r24, 0xB3	; 179
    42cc:	9d ea       	ldi	r25, 0xAD	; 173
    42ce:	9f 93       	push	r25
    42d0:	8f 93       	push	r24
    42d2:	7e 01       	movw	r14, r28
    42d4:	86 e5       	ldi	r24, 0x56	; 86
    42d6:	e8 0e       	add	r14, r24
    42d8:	f1 1c       	adc	r15, r1
    42da:	ff 92       	push	r15
    42dc:	ef 92       	push	r14
    42de:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
printLine(strbuf);
    42e2:	c7 01       	movw	r24, r14
    42e4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	return(NOERROR);
    42e8:	0f 90       	pop	r0
    42ea:	0f 90       	pop	r0
    42ec:	0f 90       	pop	r0
    42ee:	0f 90       	pop	r0
    42f0:	0f 90       	pop	r0
    42f2:	0f 90       	pop	r0
}
    42f4:	81 2f       	mov	r24, r17
    42f6:	cf 54       	subi	r28, 0x4F	; 79
    42f8:	df 4f       	sbci	r29, 0xFF	; 255
    42fa:	cd bf       	out	0x3d, r28	; 61
    42fc:	de bf       	out	0x3e, r29	; 62
    42fe:	df 91       	pop	r29
    4300:	cf 91       	pop	r28
    4302:	1f 91       	pop	r17
    4304:	0f 91       	pop	r16
    4306:	ff 90       	pop	r15
    4308:	ef 90       	pop	r14
    430a:	df 90       	pop	r13
    430c:	bf 90       	pop	r11
    430e:	af 90       	pop	r10
    4310:	9f 90       	pop	r9
    4312:	8f 90       	pop	r8
    4314:	7f 90       	pop	r7
    4316:	6f 90       	pop	r6
    4318:	5f 90       	pop	r5
    431a:	4f 90       	pop	r4
    431c:	08 95       	ret

0000431e <put_MOTOR_ENCODER>:
	Returns:
		ERROR:		If put_MOTOR returns an error
		NOERROR:	Otherwise
------------------------------------------------------------------------------*/
uint8_t put_MOTOR_ENCODER(uint8_t mtraddr, int32_t encoderValue)
{
    431e:	ef 92       	push	r14
    4320:	ff 92       	push	r15
    4322:	0f 93       	push	r16
    4324:	1f 93       	push	r17
    4326:	cf 93       	push	r28
    4328:	df 93       	push	r29
    432a:	cd b7       	in	r28, 0x3d	; 61
    432c:	de b7       	in	r29, 0x3e	; 62
    432e:	cd 57       	subi	r28, 0x7D	; 125
    4330:	d1 09       	sbc	r29, r1
    4332:	cd bf       	out	0x3d, r28	; 61
    4334:	de bf       	out	0x3e, r29	; 62
    4336:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_ENCODER: put_MOTOR error on %c";
    4338:	89 e2       	ldi	r24, 0x29	; 41
    433a:	ea e1       	ldi	r30, 0x1A	; 26
    433c:	fe ea       	ldi	r31, 0xAE	; 174
    433e:	de 01       	movw	r26, r28
    4340:	11 96       	adiw	r26, 0x01	; 1
    4342:	01 90       	ld	r0, Z+
    4344:	0d 92       	st	X+, r0
    4346:	8a 95       	dec	r24
    4348:	e1 f7       	brne	.-8      	; 0x4342 <put_MOTOR_ENCODER+0x24>
	char strbuf[80];
	uint8_t data[4];

	data[0] = (encoderValue >> 24) & 0xFF;
    434a:	eb 96       	adiw	r28, 0x3b	; 59
    434c:	7f af       	std	Y+63, r23	; 0x3f
    434e:	eb 97       	sbiw	r28, 0x3b	; 59
	data[1] = (encoderValue >> 16) & 0xFF;
    4350:	ec 96       	adiw	r28, 0x3c	; 60
    4352:	6f af       	std	Y+63, r22	; 0x3f
    4354:	ec 97       	sbiw	r28, 0x3c	; 60
	data[2] = (encoderValue >> 8) & 0xFF;
    4356:	ed 96       	adiw	r28, 0x3d	; 61
    4358:	5f af       	std	Y+63, r21	; 0x3f
    435a:	ed 97       	sbiw	r28, 0x3d	; 61
	data[3] = encoderValue & 0xFF;
    435c:	ee 96       	adiw	r28, 0x3e	; 62
    435e:	4f af       	std	Y+63, r20	; 0x3f
    4360:	ee 97       	sbiw	r28, 0x3e	; 62

	if (put_MOTOR(mtraddr, PUTENCODER, data, 4) == ERROR) {
    4362:	24 e0       	ldi	r18, 0x04	; 4
    4364:	ae 01       	movw	r20, r28
    4366:	46 58       	subi	r20, 0x86	; 134
    4368:	5f 4f       	sbci	r21, 0xFF	; 255
    436a:	66 e1       	ldi	r22, 0x16	; 22
    436c:	80 2f       	mov	r24, r16
    436e:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <put_MOTOR>
    4372:	18 2f       	mov	r17, r24
    4374:	83 36       	cpi	r24, 0x63	; 99
    4376:	d9 f4       	brne	.+54     	; 0x43ae <put_MOTOR_ENCODER+0x90>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    4378:	0f 53       	subi	r16, 0x3F	; 63
    437a:	1f 92       	push	r1
    437c:	0f 93       	push	r16
    437e:	ce 01       	movw	r24, r28
    4380:	01 96       	adiw	r24, 0x01	; 1
    4382:	9f 93       	push	r25
    4384:	8f 93       	push	r24
    4386:	7e 01       	movw	r14, r28
    4388:	8a e2       	ldi	r24, 0x2A	; 42
    438a:	e8 0e       	add	r14, r24
    438c:	f1 1c       	adc	r15, r1
    438e:	ff 92       	push	r15
    4390:	ef 92       	push	r14
    4392:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
		printError(ERR_MTR, strbuf);
    4396:	b7 01       	movw	r22, r14
    4398:	86 e3       	ldi	r24, 0x36	; 54
    439a:	91 e0       	ldi	r25, 0x01	; 1
    439c:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    43a0:	0f 90       	pop	r0
    43a2:	0f 90       	pop	r0
    43a4:	0f 90       	pop	r0
    43a6:	0f 90       	pop	r0
    43a8:	0f 90       	pop	r0
    43aa:	0f 90       	pop	r0
    43ac:	01 c0       	rjmp	.+2      	; 0x43b0 <put_MOTOR_ENCODER+0x92>
	}

	return(NOERROR);
    43ae:	10 e0       	ldi	r17, 0x00	; 0

}
    43b0:	81 2f       	mov	r24, r17
    43b2:	c3 58       	subi	r28, 0x83	; 131
    43b4:	df 4f       	sbci	r29, 0xFF	; 255
    43b6:	cd bf       	out	0x3d, r28	; 61
    43b8:	de bf       	out	0x3e, r29	; 62
    43ba:	df 91       	pop	r29
    43bc:	cf 91       	pop	r28
    43be:	1f 91       	pop	r17
    43c0:	0f 91       	pop	r16
    43c2:	ff 90       	pop	r15
    43c4:	ef 90       	pop	r14
    43c6:	08 95       	ret

000043c8 <put_MOTOR_MAXCURRENT>:
	Returns:
		ERROR:			If put_MOTOR returns an error
		NOERROR:		Otherwise
------------------------------------------------------------------------------*/
uint8_t put_MOTOR_MAXCURRENT(uint8_t mtraddr, int32_t maxCurrent)
{
    43c8:	ef 92       	push	r14
    43ca:	ff 92       	push	r15
    43cc:	0f 93       	push	r16
    43ce:	1f 93       	push	r17
    43d0:	cf 93       	push	r28
    43d2:	df 93       	push	r29
    43d4:	cd b7       	in	r28, 0x3d	; 61
    43d6:	de b7       	in	r29, 0x3e	; 62
    43d8:	c4 58       	subi	r28, 0x84	; 132
    43da:	d1 09       	sbc	r29, r1
    43dc:	cd bf       	out	0x3d, r28	; 61
    43de:	de bf       	out	0x3e, r29	; 62
    43e0:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_MAXCURRENT: put_MOTOR error on %c";
    43e2:	8c e2       	ldi	r24, 0x2C	; 44
    43e4:	e3 e4       	ldi	r30, 0x43	; 67
    43e6:	fe ea       	ldi	r31, 0xAE	; 174
    43e8:	de 01       	movw	r26, r28
    43ea:	11 96       	adiw	r26, 0x01	; 1
    43ec:	01 90       	ld	r0, Z+
    43ee:	0d 92       	st	X+, r0
    43f0:	8a 95       	dec	r24
    43f2:	e1 f7       	brne	.-8      	; 0x43ec <put_MOTOR_MAXCURRENT+0x24>
	char strbuf[80];
	uint8_t data[8];

	maxCurrent /= 10;			// convert to 10 mA units
    43f4:	cb 01       	movw	r24, r22
    43f6:	ba 01       	movw	r22, r20
    43f8:	2a e0       	ldi	r18, 0x0A	; 10
    43fa:	30 e0       	ldi	r19, 0x00	; 0
    43fc:	40 e0       	ldi	r20, 0x00	; 0
    43fe:	50 e0       	ldi	r21, 0x00	; 0
    4400:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <__divmodsi4>
	data[0] = (maxCurrent >> 24) & 0xFF;
    4404:	ee 96       	adiw	r28, 0x3e	; 62
    4406:	5f af       	std	Y+63, r21	; 0x3f
    4408:	ee 97       	sbiw	r28, 0x3e	; 62
	data[1] = (maxCurrent >> 16) & 0xFF;
    440a:	ef 96       	adiw	r28, 0x3f	; 63
    440c:	4f af       	std	Y+63, r20	; 0x3f
    440e:	ef 97       	sbiw	r28, 0x3f	; 63
	data[2] = (maxCurrent >> 8) & 0xFF;
    4410:	c1 58       	subi	r28, 0x81	; 129
    4412:	df 4f       	sbci	r29, 0xFF	; 255
    4414:	38 83       	st	Y, r19
    4416:	cf 57       	subi	r28, 0x7F	; 127
    4418:	d0 40       	sbci	r29, 0x00	; 0
	data[3] = maxCurrent & 0xFF;
    441a:	c0 58       	subi	r28, 0x80	; 128
    441c:	df 4f       	sbci	r29, 0xFF	; 255
    441e:	28 83       	st	Y, r18
    4420:	c0 58       	subi	r28, 0x80	; 128
    4422:	d0 40       	sbci	r29, 0x00	; 0
	data[4] = data[5] = data[6] = data[7] = 0;
    4424:	cc 57       	subi	r28, 0x7C	; 124
    4426:	df 4f       	sbci	r29, 0xFF	; 255
    4428:	18 82       	st	Y, r1
    442a:	c4 58       	subi	r28, 0x84	; 132
    442c:	d0 40       	sbci	r29, 0x00	; 0
    442e:	cd 57       	subi	r28, 0x7D	; 125
    4430:	df 4f       	sbci	r29, 0xFF	; 255
    4432:	18 82       	st	Y, r1
    4434:	c3 58       	subi	r28, 0x83	; 131
    4436:	d0 40       	sbci	r29, 0x00	; 0
    4438:	ce 57       	subi	r28, 0x7E	; 126
    443a:	df 4f       	sbci	r29, 0xFF	; 255
    443c:	18 82       	st	Y, r1
    443e:	c2 58       	subi	r28, 0x82	; 130
    4440:	d0 40       	sbci	r29, 0x00	; 0
    4442:	cf 57       	subi	r28, 0x7F	; 127
    4444:	df 4f       	sbci	r29, 0xFF	; 255
    4446:	18 82       	st	Y, r1
    4448:	c1 58       	subi	r28, 0x81	; 129
    444a:	d0 40       	sbci	r29, 0x00	; 0
	if (put_MOTOR(mtraddr, PUTMAXCURRENT, data, 8) == ERROR) {
    444c:	28 e0       	ldi	r18, 0x08	; 8
    444e:	ae 01       	movw	r20, r28
    4450:	43 58       	subi	r20, 0x83	; 131
    4452:	5f 4f       	sbci	r21, 0xFF	; 255
    4454:	65 e8       	ldi	r22, 0x85	; 133
    4456:	80 2f       	mov	r24, r16
    4458:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <put_MOTOR>
    445c:	18 2f       	mov	r17, r24
    445e:	83 36       	cpi	r24, 0x63	; 99
    4460:	d9 f4       	brne	.+54     	; 0x4498 <put_MOTOR_MAXCURRENT+0xd0>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    4462:	0f 53       	subi	r16, 0x3F	; 63
    4464:	1f 92       	push	r1
    4466:	0f 93       	push	r16
    4468:	ce 01       	movw	r24, r28
    446a:	01 96       	adiw	r24, 0x01	; 1
    446c:	9f 93       	push	r25
    446e:	8f 93       	push	r24
    4470:	7e 01       	movw	r14, r28
    4472:	8d e2       	ldi	r24, 0x2D	; 45
    4474:	e8 0e       	add	r14, r24
    4476:	f1 1c       	adc	r15, r1
    4478:	ff 92       	push	r15
    447a:	ef 92       	push	r14
    447c:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
		printError(ERR_MTR, strbuf);
    4480:	b7 01       	movw	r22, r14
    4482:	86 e3       	ldi	r24, 0x36	; 54
    4484:	91 e0       	ldi	r25, 0x01	; 1
    4486:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    448a:	0f 90       	pop	r0
    448c:	0f 90       	pop	r0
    448e:	0f 90       	pop	r0
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	0f 90       	pop	r0
    4496:	01 c0       	rjmp	.+2      	; 0x449a <put_MOTOR_MAXCURRENT+0xd2>
	}
	return(NOERROR);
    4498:	10 e0       	ldi	r17, 0x00	; 0
}
    449a:	81 2f       	mov	r24, r17
    449c:	cc 57       	subi	r28, 0x7C	; 124
    449e:	df 4f       	sbci	r29, 0xFF	; 255
    44a0:	cd bf       	out	0x3d, r28	; 61
    44a2:	de bf       	out	0x3e, r29	; 62
    44a4:	df 91       	pop	r29
    44a6:	cf 91       	pop	r28
    44a8:	1f 91       	pop	r17
    44aa:	0f 91       	pop	r16
    44ac:	ff 90       	pop	r15
    44ae:	ef 90       	pop	r14
    44b0:	08 95       	ret

000044b2 <put_MOTOR_PID>:
	Returns:
		ERROR:		If put_MOTOR returns an error
		NOERROR:	Otherwise
------------------------------------------------------------------------------*/
uint8_t put_MOTOR_PID(uint8_t mtraddr, PID pid)
{
    44b2:	9f 92       	push	r9
    44b4:	af 92       	push	r10
    44b6:	bf 92       	push	r11
    44b8:	cf 92       	push	r12
    44ba:	df 92       	push	r13
    44bc:	ef 92       	push	r14
    44be:	ff 92       	push	r15
    44c0:	0f 93       	push	r16
    44c2:	1f 93       	push	r17
    44c4:	cf 93       	push	r28
    44c6:	df 93       	push	r29
    44c8:	cd b7       	in	r28, 0x3d	; 61
    44ca:	de b7       	in	r29, 0x3e	; 62
    44cc:	cf 5b       	subi	r28, 0xBF	; 191
    44ce:	d1 09       	sbc	r29, r1
    44d0:	cd bf       	out	0x3d, r28	; 61
    44d2:	de bf       	out	0x3e, r29	; 62
    44d4:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_PID: put_MOTOR error pid on %c";
    44d6:	89 e2       	ldi	r24, 0x29	; 41
    44d8:	ef e6       	ldi	r30, 0x6F	; 111
    44da:	fe ea       	ldi	r31, 0xAE	; 174
    44dc:	de 01       	movw	r26, r28
    44de:	11 96       	adiw	r26, 0x01	; 1
    44e0:	01 90       	ld	r0, Z+
    44e2:	0d 92       	st	X+, r0
    44e4:	8a 95       	dec	r24
    44e6:	e1 f7       	brne	.-8      	; 0x44e0 <put_MOTOR_PID+0x2e>
	const char fmt2[] = "put_MOTOR_PID: put_MOTOR error qpps on %c";
    44e8:	8a e2       	ldi	r24, 0x2A	; 42
    44ea:	e8 e9       	ldi	r30, 0x98	; 152
    44ec:	fe ea       	ldi	r31, 0xAE	; 174
    44ee:	de 01       	movw	r26, r28
    44f0:	9a 96       	adiw	r26, 0x2a	; 42
    44f2:	01 90       	ld	r0, Z+
    44f4:	0d 92       	st	X+, r0
    44f6:	8a 95       	dec	r24
    44f8:	e1 f7       	brne	.-8      	; 0x44f2 <put_MOTOR_PID+0x40>
	char strbuf[80];
	uint8_t data[28];
	int32_t p, i, d;

	p = (int32_t) (pid.p * 1024.0);
    44fa:	c3 53       	subi	r28, 0x33	; 51
    44fc:	df 4f       	sbci	r29, 0xFF	; 255
    44fe:	68 81       	ld	r22, Y
    4500:	79 81       	ldd	r23, Y+1	; 0x01
    4502:	8a 81       	ldd	r24, Y+2	; 0x02
    4504:	9b 81       	ldd	r25, Y+3	; 0x03
    4506:	cd 5c       	subi	r28, 0xCD	; 205
    4508:	d0 40       	sbci	r29, 0x00	; 0
    450a:	20 e0       	ldi	r18, 0x00	; 0
    450c:	30 e0       	ldi	r19, 0x00	; 0
    450e:	40 e8       	ldi	r20, 0x80	; 128
    4510:	54 e4       	ldi	r21, 0x44	; 68
    4512:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
    4516:	0e 94 8d 2a 	call	0x551a	; 0x551a <__fixsfsi>
    451a:	c6 2e       	mov	r12, r22
    451c:	b7 2e       	mov	r11, r23
    451e:	a8 2e       	mov	r10, r24
    4520:	99 2e       	mov	r9, r25
	i = (int32_t) (pid.i * 1024.0);
    4522:	cf 52       	subi	r28, 0x2F	; 47
    4524:	df 4f       	sbci	r29, 0xFF	; 255
    4526:	68 81       	ld	r22, Y
    4528:	79 81       	ldd	r23, Y+1	; 0x01
    452a:	8a 81       	ldd	r24, Y+2	; 0x02
    452c:	9b 81       	ldd	r25, Y+3	; 0x03
    452e:	c1 5d       	subi	r28, 0xD1	; 209
    4530:	d0 40       	sbci	r29, 0x00	; 0
    4532:	20 e0       	ldi	r18, 0x00	; 0
    4534:	30 e0       	ldi	r19, 0x00	; 0
    4536:	40 e8       	ldi	r20, 0x80	; 128
    4538:	54 e4       	ldi	r21, 0x44	; 68
    453a:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
    453e:	0e 94 8d 2a 	call	0x551a	; 0x551a <__fixsfsi>
    4542:	16 2f       	mov	r17, r22
    4544:	f7 2e       	mov	r15, r23
    4546:	e8 2e       	mov	r14, r24
    4548:	d9 2e       	mov	r13, r25
	d = (int32_t) (pid.d * 1024.0);
    454a:	cb 52       	subi	r28, 0x2B	; 43
    454c:	df 4f       	sbci	r29, 0xFF	; 255
    454e:	68 81       	ld	r22, Y
    4550:	79 81       	ldd	r23, Y+1	; 0x01
    4552:	8a 81       	ldd	r24, Y+2	; 0x02
    4554:	9b 81       	ldd	r25, Y+3	; 0x03
    4556:	c5 5d       	subi	r28, 0xD5	; 213
    4558:	d0 40       	sbci	r29, 0x00	; 0
    455a:	20 e0       	ldi	r18, 0x00	; 0
    455c:	30 e0       	ldi	r19, 0x00	; 0
    455e:	40 e8       	ldi	r20, 0x80	; 128
    4560:	54 e4       	ldi	r21, 0x44	; 68
    4562:	0e 94 7a 2b 	call	0x56f4	; 0x56f4 <__mulsf3>
    4566:	0e 94 8d 2a 	call	0x551a	; 0x551a <__fixsfsi>

	data[0] = (d >> 24) & 0xFF;
    456a:	cc 55       	subi	r28, 0x5C	; 92
    456c:	df 4f       	sbci	r29, 0xFF	; 255
    456e:	98 83       	st	Y, r25
    4570:	c4 5a       	subi	r28, 0xA4	; 164
    4572:	d0 40       	sbci	r29, 0x00	; 0
	data[1] = (d >> 16) & 0xFF;
    4574:	cb 55       	subi	r28, 0x5B	; 91
    4576:	df 4f       	sbci	r29, 0xFF	; 255
    4578:	88 83       	st	Y, r24
    457a:	c5 5a       	subi	r28, 0xA5	; 165
    457c:	d0 40       	sbci	r29, 0x00	; 0
	data[2] = (d >> 8) & 0xFF;
    457e:	ca 55       	subi	r28, 0x5A	; 90
    4580:	df 4f       	sbci	r29, 0xFF	; 255
    4582:	78 83       	st	Y, r23
    4584:	c6 5a       	subi	r28, 0xA6	; 166
    4586:	d0 40       	sbci	r29, 0x00	; 0
	data[3] = d & 0xFF;
    4588:	c9 55       	subi	r28, 0x59	; 89
    458a:	df 4f       	sbci	r29, 0xFF	; 255
    458c:	68 83       	st	Y, r22
    458e:	c7 5a       	subi	r28, 0xA7	; 167
    4590:	d0 40       	sbci	r29, 0x00	; 0
	data[4] = (p >> 24) & 0xFF;
    4592:	c8 55       	subi	r28, 0x58	; 88
    4594:	df 4f       	sbci	r29, 0xFF	; 255
    4596:	98 82       	st	Y, r9
    4598:	c8 5a       	subi	r28, 0xA8	; 168
    459a:	d0 40       	sbci	r29, 0x00	; 0
	data[5] = (p >> 16) & 0xFF;
    459c:	c7 55       	subi	r28, 0x57	; 87
    459e:	df 4f       	sbci	r29, 0xFF	; 255
    45a0:	a8 82       	st	Y, r10
    45a2:	c9 5a       	subi	r28, 0xA9	; 169
    45a4:	d0 40       	sbci	r29, 0x00	; 0
	data[6] = (p >> 8) & 0xFF;
    45a6:	c6 55       	subi	r28, 0x56	; 86
    45a8:	df 4f       	sbci	r29, 0xFF	; 255
    45aa:	b8 82       	st	Y, r11
    45ac:	ca 5a       	subi	r28, 0xAA	; 170
    45ae:	d0 40       	sbci	r29, 0x00	; 0
	data[7] = p & 0xFF;
    45b0:	c5 55       	subi	r28, 0x55	; 85
    45b2:	df 4f       	sbci	r29, 0xFF	; 255
    45b4:	c8 82       	st	Y, r12
    45b6:	cb 5a       	subi	r28, 0xAB	; 171
    45b8:	d0 40       	sbci	r29, 0x00	; 0
	data[8] = (i >> 24) & 0xFF;
    45ba:	c4 55       	subi	r28, 0x54	; 84
    45bc:	df 4f       	sbci	r29, 0xFF	; 255
    45be:	d8 82       	st	Y, r13
    45c0:	cc 5a       	subi	r28, 0xAC	; 172
    45c2:	d0 40       	sbci	r29, 0x00	; 0
	data[9] = (i >> 16) & 0xFF;
    45c4:	c3 55       	subi	r28, 0x53	; 83
    45c6:	df 4f       	sbci	r29, 0xFF	; 255
    45c8:	e8 82       	st	Y, r14
    45ca:	cd 5a       	subi	r28, 0xAD	; 173
    45cc:	d0 40       	sbci	r29, 0x00	; 0
	data[10] = (i >> 8) & 0xFF;
    45ce:	c2 55       	subi	r28, 0x52	; 82
    45d0:	df 4f       	sbci	r29, 0xFF	; 255
    45d2:	f8 82       	st	Y, r15
    45d4:	ce 5a       	subi	r28, 0xAE	; 174
    45d6:	d0 40       	sbci	r29, 0x00	; 0
	data[11] = i & 0xFF;
    45d8:	c1 55       	subi	r28, 0x51	; 81
    45da:	df 4f       	sbci	r29, 0xFF	; 255
    45dc:	18 83       	st	Y, r17
    45de:	cf 5a       	subi	r28, 0xAF	; 175
    45e0:	d0 40       	sbci	r29, 0x00	; 0
	data[12] = (pid.maxI >> 24) & 0xFF;
    45e2:	c7 52       	subi	r28, 0x27	; 39
    45e4:	df 4f       	sbci	r29, 0xFF	; 255
    45e6:	88 81       	ld	r24, Y
    45e8:	c9 5d       	subi	r28, 0xD9	; 217
    45ea:	d0 40       	sbci	r29, 0x00	; 0
    45ec:	c6 52       	subi	r28, 0x26	; 38
    45ee:	df 4f       	sbci	r29, 0xFF	; 255
    45f0:	98 81       	ld	r25, Y
    45f2:	ca 5d       	subi	r28, 0xDA	; 218
    45f4:	d0 40       	sbci	r29, 0x00	; 0
    45f6:	c5 52       	subi	r28, 0x25	; 37
    45f8:	df 4f       	sbci	r29, 0xFF	; 255
    45fa:	28 81       	ld	r18, Y
    45fc:	cb 5d       	subi	r28, 0xDB	; 219
    45fe:	d0 40       	sbci	r29, 0x00	; 0
    4600:	c4 52       	subi	r28, 0x24	; 36
    4602:	df 4f       	sbci	r29, 0xFF	; 255
    4604:	38 81       	ld	r19, Y
    4606:	cc 5d       	subi	r28, 0xDC	; 220
    4608:	d0 40       	sbci	r29, 0x00	; 0
    460a:	c0 55       	subi	r28, 0x50	; 80
    460c:	df 4f       	sbci	r29, 0xFF	; 255
    460e:	38 83       	st	Y, r19
    4610:	c0 5b       	subi	r28, 0xB0	; 176
    4612:	d0 40       	sbci	r29, 0x00	; 0
	data[13] = (pid.maxI >> 16) & 0xFF;
    4614:	cf 54       	subi	r28, 0x4F	; 79
    4616:	df 4f       	sbci	r29, 0xFF	; 255
    4618:	28 83       	st	Y, r18
    461a:	c1 5b       	subi	r28, 0xB1	; 177
    461c:	d0 40       	sbci	r29, 0x00	; 0
	data[14] = (pid.maxI >> 8) & 0xFF;
    461e:	ce 54       	subi	r28, 0x4E	; 78
    4620:	df 4f       	sbci	r29, 0xFF	; 255
    4622:	98 83       	st	Y, r25
    4624:	c2 5b       	subi	r28, 0xB2	; 178
    4626:	d0 40       	sbci	r29, 0x00	; 0
	data[15] = pid.maxI & 0xFF;
    4628:	cd 54       	subi	r28, 0x4D	; 77
    462a:	df 4f       	sbci	r29, 0xFF	; 255
    462c:	88 83       	st	Y, r24
    462e:	c3 5b       	subi	r28, 0xB3	; 179
    4630:	d0 40       	sbci	r29, 0x00	; 0
	data[16] = (pid.deadZone >> 24) & 0xFF;
    4632:	c3 52       	subi	r28, 0x23	; 35
    4634:	df 4f       	sbci	r29, 0xFF	; 255
    4636:	88 81       	ld	r24, Y
    4638:	cd 5d       	subi	r28, 0xDD	; 221
    463a:	d0 40       	sbci	r29, 0x00	; 0
    463c:	c2 52       	subi	r28, 0x22	; 34
    463e:	df 4f       	sbci	r29, 0xFF	; 255
    4640:	98 81       	ld	r25, Y
    4642:	ce 5d       	subi	r28, 0xDE	; 222
    4644:	d0 40       	sbci	r29, 0x00	; 0
    4646:	c1 52       	subi	r28, 0x21	; 33
    4648:	df 4f       	sbci	r29, 0xFF	; 255
    464a:	28 81       	ld	r18, Y
    464c:	cf 5d       	subi	r28, 0xDF	; 223
    464e:	d0 40       	sbci	r29, 0x00	; 0
    4650:	c0 52       	subi	r28, 0x20	; 32
    4652:	df 4f       	sbci	r29, 0xFF	; 255
    4654:	38 81       	ld	r19, Y
    4656:	c0 5e       	subi	r28, 0xE0	; 224
    4658:	d0 40       	sbci	r29, 0x00	; 0
    465a:	cc 54       	subi	r28, 0x4C	; 76
    465c:	df 4f       	sbci	r29, 0xFF	; 255
    465e:	38 83       	st	Y, r19
    4660:	c4 5b       	subi	r28, 0xB4	; 180
    4662:	d0 40       	sbci	r29, 0x00	; 0
	data[17] = (pid.deadZone >> 16) & 0xFF;
    4664:	cb 54       	subi	r28, 0x4B	; 75
    4666:	df 4f       	sbci	r29, 0xFF	; 255
    4668:	28 83       	st	Y, r18
    466a:	c5 5b       	subi	r28, 0xB5	; 181
    466c:	d0 40       	sbci	r29, 0x00	; 0
	data[18] = (pid.deadZone >> 8) & 0xFF;
    466e:	ca 54       	subi	r28, 0x4A	; 74
    4670:	df 4f       	sbci	r29, 0xFF	; 255
    4672:	98 83       	st	Y, r25
    4674:	c6 5b       	subi	r28, 0xB6	; 182
    4676:	d0 40       	sbci	r29, 0x00	; 0
	data[19] = pid.deadZone & 0xFF;
    4678:	c9 54       	subi	r28, 0x49	; 73
    467a:	df 4f       	sbci	r29, 0xFF	; 255
    467c:	88 83       	st	Y, r24
    467e:	c7 5b       	subi	r28, 0xB7	; 183
    4680:	d0 40       	sbci	r29, 0x00	; 0
	data[20] = (pid.minPos >> 24) & 0xFF;
    4682:	cf 51       	subi	r28, 0x1F	; 31
    4684:	df 4f       	sbci	r29, 0xFF	; 255
    4686:	88 81       	ld	r24, Y
    4688:	c1 5e       	subi	r28, 0xE1	; 225
    468a:	d0 40       	sbci	r29, 0x00	; 0
    468c:	ce 51       	subi	r28, 0x1E	; 30
    468e:	df 4f       	sbci	r29, 0xFF	; 255
    4690:	98 81       	ld	r25, Y
    4692:	c2 5e       	subi	r28, 0xE2	; 226
    4694:	d0 40       	sbci	r29, 0x00	; 0
    4696:	cd 51       	subi	r28, 0x1D	; 29
    4698:	df 4f       	sbci	r29, 0xFF	; 255
    469a:	28 81       	ld	r18, Y
    469c:	c3 5e       	subi	r28, 0xE3	; 227
    469e:	d0 40       	sbci	r29, 0x00	; 0
    46a0:	cc 51       	subi	r28, 0x1C	; 28
    46a2:	df 4f       	sbci	r29, 0xFF	; 255
    46a4:	38 81       	ld	r19, Y
    46a6:	c4 5e       	subi	r28, 0xE4	; 228
    46a8:	d0 40       	sbci	r29, 0x00	; 0
    46aa:	c8 54       	subi	r28, 0x48	; 72
    46ac:	df 4f       	sbci	r29, 0xFF	; 255
    46ae:	38 83       	st	Y, r19
    46b0:	c8 5b       	subi	r28, 0xB8	; 184
    46b2:	d0 40       	sbci	r29, 0x00	; 0
	data[21] = (pid.minPos >> 16) & 0xFF;
    46b4:	c7 54       	subi	r28, 0x47	; 71
    46b6:	df 4f       	sbci	r29, 0xFF	; 255
    46b8:	28 83       	st	Y, r18
    46ba:	c9 5b       	subi	r28, 0xB9	; 185
    46bc:	d0 40       	sbci	r29, 0x00	; 0
	data[22] = (pid.minPos >> 8) & 0xFF;
    46be:	c6 54       	subi	r28, 0x46	; 70
    46c0:	df 4f       	sbci	r29, 0xFF	; 255
    46c2:	98 83       	st	Y, r25
    46c4:	ca 5b       	subi	r28, 0xBA	; 186
    46c6:	d0 40       	sbci	r29, 0x00	; 0
	data[23] = pid.minPos & 0xFF;
    46c8:	c5 54       	subi	r28, 0x45	; 69
    46ca:	df 4f       	sbci	r29, 0xFF	; 255
    46cc:	88 83       	st	Y, r24
    46ce:	cb 5b       	subi	r28, 0xBB	; 187
    46d0:	d0 40       	sbci	r29, 0x00	; 0
	data[24] = (pid.maxPos >> 24) & 0xFF;
    46d2:	cb 51       	subi	r28, 0x1B	; 27
    46d4:	df 4f       	sbci	r29, 0xFF	; 255
    46d6:	88 81       	ld	r24, Y
    46d8:	c5 5e       	subi	r28, 0xE5	; 229
    46da:	d0 40       	sbci	r29, 0x00	; 0
    46dc:	ca 51       	subi	r28, 0x1A	; 26
    46de:	df 4f       	sbci	r29, 0xFF	; 255
    46e0:	98 81       	ld	r25, Y
    46e2:	c6 5e       	subi	r28, 0xE6	; 230
    46e4:	d0 40       	sbci	r29, 0x00	; 0
    46e6:	c9 51       	subi	r28, 0x19	; 25
    46e8:	df 4f       	sbci	r29, 0xFF	; 255
    46ea:	28 81       	ld	r18, Y
    46ec:	c7 5e       	subi	r28, 0xE7	; 231
    46ee:	d0 40       	sbci	r29, 0x00	; 0
    46f0:	c8 51       	subi	r28, 0x18	; 24
    46f2:	df 4f       	sbci	r29, 0xFF	; 255
    46f4:	38 81       	ld	r19, Y
    46f6:	c8 5e       	subi	r28, 0xE8	; 232
    46f8:	d0 40       	sbci	r29, 0x00	; 0
    46fa:	c4 54       	subi	r28, 0x44	; 68
    46fc:	df 4f       	sbci	r29, 0xFF	; 255
    46fe:	38 83       	st	Y, r19
    4700:	cc 5b       	subi	r28, 0xBC	; 188
    4702:	d0 40       	sbci	r29, 0x00	; 0
	data[25] = (pid.maxPos >> 16) & 0xFF;
    4704:	c3 54       	subi	r28, 0x43	; 67
    4706:	df 4f       	sbci	r29, 0xFF	; 255
    4708:	28 83       	st	Y, r18
    470a:	cd 5b       	subi	r28, 0xBD	; 189
    470c:	d0 40       	sbci	r29, 0x00	; 0
	data[26] = (pid.maxPos >> 8) & 0xFF;
    470e:	c2 54       	subi	r28, 0x42	; 66
    4710:	df 4f       	sbci	r29, 0xFF	; 255
    4712:	98 83       	st	Y, r25
    4714:	ce 5b       	subi	r28, 0xBE	; 190
    4716:	d0 40       	sbci	r29, 0x00	; 0
	data[27] = pid.maxPos & 0xFF;
    4718:	c1 54       	subi	r28, 0x41	; 65
    471a:	df 4f       	sbci	r29, 0xFF	; 255
    471c:	88 83       	st	Y, r24
    471e:	cf 5b       	subi	r28, 0xBF	; 191
    4720:	d0 40       	sbci	r29, 0x00	; 0

	if (put_MOTOR(mtraddr, SETPID, data, 28) == ERROR) {
    4722:	2c e1       	ldi	r18, 0x1C	; 28
    4724:	ae 01       	movw	r20, r28
    4726:	4c 55       	subi	r20, 0x5C	; 92
    4728:	5f 4f       	sbci	r21, 0xFF	; 255
    472a:	6d e3       	ldi	r22, 0x3D	; 61
    472c:	80 2f       	mov	r24, r16
    472e:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <put_MOTOR>
    4732:	18 2f       	mov	r17, r24
    4734:	83 36       	cpi	r24, 0x63	; 99
    4736:	d9 f4       	brne	.+54     	; 0x476e <put_MOTOR_PID+0x2bc>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    4738:	0f 53       	subi	r16, 0x3F	; 63
    473a:	1f 92       	push	r1
    473c:	0f 93       	push	r16
    473e:	ce 01       	movw	r24, r28
    4740:	01 96       	adiw	r24, 0x01	; 1
    4742:	9f 93       	push	r25
    4744:	8f 93       	push	r24
    4746:	7e 01       	movw	r14, r28
    4748:	84 e5       	ldi	r24, 0x54	; 84
    474a:	e8 0e       	add	r14, r24
    474c:	f1 1c       	adc	r15, r1
    474e:	ff 92       	push	r15
    4750:	ef 92       	push	r14
    4752:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
		printError(ERR_MTR, strbuf);
    4756:	b7 01       	movw	r22, r14
    4758:	86 e3       	ldi	r24, 0x36	; 54
    475a:	91 e0       	ldi	r25, 0x01	; 1
    475c:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    4760:	0f 90       	pop	r0
    4762:	0f 90       	pop	r0
    4764:	0f 90       	pop	r0
    4766:	0f 90       	pop	r0
    4768:	0f 90       	pop	r0
    476a:	0f 90       	pop	r0
    476c:	8b c0       	rjmp	.+278    	; 0x4884 <put_MOTOR_PID+0x3d2>
	}

	data[0] = data[1] = data[2] = data[3] = 0;
    476e:	c9 55       	subi	r28, 0x59	; 89
    4770:	df 4f       	sbci	r29, 0xFF	; 255
    4772:	18 82       	st	Y, r1
    4774:	c7 5a       	subi	r28, 0xA7	; 167
    4776:	d0 40       	sbci	r29, 0x00	; 0
    4778:	ca 55       	subi	r28, 0x5A	; 90
    477a:	df 4f       	sbci	r29, 0xFF	; 255
    477c:	18 82       	st	Y, r1
    477e:	c6 5a       	subi	r28, 0xA6	; 166
    4780:	d0 40       	sbci	r29, 0x00	; 0
    4782:	cb 55       	subi	r28, 0x5B	; 91
    4784:	df 4f       	sbci	r29, 0xFF	; 255
    4786:	18 82       	st	Y, r1
    4788:	c5 5a       	subi	r28, 0xA5	; 165
    478a:	d0 40       	sbci	r29, 0x00	; 0
    478c:	cc 55       	subi	r28, 0x5C	; 92
    478e:	df 4f       	sbci	r29, 0xFF	; 255
    4790:	18 82       	st	Y, r1
    4792:	c4 5a       	subi	r28, 0xA4	; 164
    4794:	d0 40       	sbci	r29, 0x00	; 0
	data[4] = data[5] = data[6] = data[7] = 0;
    4796:	c5 55       	subi	r28, 0x55	; 85
    4798:	df 4f       	sbci	r29, 0xFF	; 255
    479a:	18 82       	st	Y, r1
    479c:	cb 5a       	subi	r28, 0xAB	; 171
    479e:	d0 40       	sbci	r29, 0x00	; 0
    47a0:	c6 55       	subi	r28, 0x56	; 86
    47a2:	df 4f       	sbci	r29, 0xFF	; 255
    47a4:	18 82       	st	Y, r1
    47a6:	ca 5a       	subi	r28, 0xAA	; 170
    47a8:	d0 40       	sbci	r29, 0x00	; 0
    47aa:	c7 55       	subi	r28, 0x57	; 87
    47ac:	df 4f       	sbci	r29, 0xFF	; 255
    47ae:	18 82       	st	Y, r1
    47b0:	c9 5a       	subi	r28, 0xA9	; 169
    47b2:	d0 40       	sbci	r29, 0x00	; 0
    47b4:	c8 55       	subi	r28, 0x58	; 88
    47b6:	df 4f       	sbci	r29, 0xFF	; 255
    47b8:	18 82       	st	Y, r1
    47ba:	c8 5a       	subi	r28, 0xA8	; 168
    47bc:	d0 40       	sbci	r29, 0x00	; 0
	data[8] = data[9] = data[10] = data[11] = 0;
    47be:	c1 55       	subi	r28, 0x51	; 81
    47c0:	df 4f       	sbci	r29, 0xFF	; 255
    47c2:	18 82       	st	Y, r1
    47c4:	cf 5a       	subi	r28, 0xAF	; 175
    47c6:	d0 40       	sbci	r29, 0x00	; 0
    47c8:	c2 55       	subi	r28, 0x52	; 82
    47ca:	df 4f       	sbci	r29, 0xFF	; 255
    47cc:	18 82       	st	Y, r1
    47ce:	ce 5a       	subi	r28, 0xAE	; 174
    47d0:	d0 40       	sbci	r29, 0x00	; 0
    47d2:	c3 55       	subi	r28, 0x53	; 83
    47d4:	df 4f       	sbci	r29, 0xFF	; 255
    47d6:	18 82       	st	Y, r1
    47d8:	cd 5a       	subi	r28, 0xAD	; 173
    47da:	d0 40       	sbci	r29, 0x00	; 0
    47dc:	c4 55       	subi	r28, 0x54	; 84
    47de:	df 4f       	sbci	r29, 0xFF	; 255
    47e0:	18 82       	st	Y, r1
    47e2:	cc 5a       	subi	r28, 0xAC	; 172
    47e4:	d0 40       	sbci	r29, 0x00	; 0
	data[12] = (pid.qpps >> 24) & 0xFF;
    47e6:	c7 51       	subi	r28, 0x17	; 23
    47e8:	df 4f       	sbci	r29, 0xFF	; 255
    47ea:	88 81       	ld	r24, Y
    47ec:	c9 5e       	subi	r28, 0xE9	; 233
    47ee:	d0 40       	sbci	r29, 0x00	; 0
    47f0:	c6 51       	subi	r28, 0x16	; 22
    47f2:	df 4f       	sbci	r29, 0xFF	; 255
    47f4:	98 81       	ld	r25, Y
    47f6:	ca 5e       	subi	r28, 0xEA	; 234
    47f8:	d0 40       	sbci	r29, 0x00	; 0
    47fa:	c5 51       	subi	r28, 0x15	; 21
    47fc:	df 4f       	sbci	r29, 0xFF	; 255
    47fe:	28 81       	ld	r18, Y
    4800:	cb 5e       	subi	r28, 0xEB	; 235
    4802:	d0 40       	sbci	r29, 0x00	; 0
    4804:	c4 51       	subi	r28, 0x14	; 20
    4806:	df 4f       	sbci	r29, 0xFF	; 255
    4808:	38 81       	ld	r19, Y
    480a:	cc 5e       	subi	r28, 0xEC	; 236
    480c:	d0 40       	sbci	r29, 0x00	; 0
    480e:	c0 55       	subi	r28, 0x50	; 80
    4810:	df 4f       	sbci	r29, 0xFF	; 255
    4812:	38 83       	st	Y, r19
    4814:	c0 5b       	subi	r28, 0xB0	; 176
    4816:	d0 40       	sbci	r29, 0x00	; 0
	data[13] = (pid.qpps >> 16) & 0xFF;
    4818:	cf 54       	subi	r28, 0x4F	; 79
    481a:	df 4f       	sbci	r29, 0xFF	; 255
    481c:	28 83       	st	Y, r18
    481e:	c1 5b       	subi	r28, 0xB1	; 177
    4820:	d0 40       	sbci	r29, 0x00	; 0
	data[14] = (pid.qpps >> 8) & 0xFF;
    4822:	ce 54       	subi	r28, 0x4E	; 78
    4824:	df 4f       	sbci	r29, 0xFF	; 255
    4826:	98 83       	st	Y, r25
    4828:	c2 5b       	subi	r28, 0xB2	; 178
    482a:	d0 40       	sbci	r29, 0x00	; 0
	data[15] = pid.qpps & 0xFF;
    482c:	cd 54       	subi	r28, 0x4D	; 77
    482e:	df 4f       	sbci	r29, 0xFF	; 255
    4830:	88 83       	st	Y, r24
    4832:	c3 5b       	subi	r28, 0xB3	; 179
    4834:	d0 40       	sbci	r29, 0x00	; 0

	if (put_MOTOR(mtraddr, SETQPPS, data, 16) == ERROR) {
    4836:	20 e1       	ldi	r18, 0x10	; 16
    4838:	ae 01       	movw	r20, r28
    483a:	4c 55       	subi	r20, 0x5C	; 92
    483c:	5f 4f       	sbci	r21, 0xFF	; 255
    483e:	6c e1       	ldi	r22, 0x1C	; 28
    4840:	80 2f       	mov	r24, r16
    4842:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <put_MOTOR>
    4846:	18 2f       	mov	r17, r24
    4848:	83 36       	cpi	r24, 0x63	; 99
    484a:	d9 f4       	brne	.+54     	; 0x4882 <put_MOTOR_PID+0x3d0>
		sprintf(strbuf, fmt2, (char) (mtraddr-63));
    484c:	0f 53       	subi	r16, 0x3F	; 63
    484e:	1f 92       	push	r1
    4850:	0f 93       	push	r16
    4852:	ce 01       	movw	r24, r28
    4854:	8a 96       	adiw	r24, 0x2a	; 42
    4856:	9f 93       	push	r25
    4858:	8f 93       	push	r24
    485a:	7e 01       	movw	r14, r28
    485c:	84 e5       	ldi	r24, 0x54	; 84
    485e:	e8 0e       	add	r14, r24
    4860:	f1 1c       	adc	r15, r1
    4862:	ff 92       	push	r15
    4864:	ef 92       	push	r14
    4866:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
		printError(ERR_MTR, strbuf);
    486a:	b7 01       	movw	r22, r14
    486c:	86 e3       	ldi	r24, 0x36	; 54
    486e:	91 e0       	ldi	r25, 0x01	; 1
    4870:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    4874:	0f 90       	pop	r0
    4876:	0f 90       	pop	r0
    4878:	0f 90       	pop	r0
    487a:	0f 90       	pop	r0
    487c:	0f 90       	pop	r0
    487e:	0f 90       	pop	r0
    4880:	01 c0       	rjmp	.+2      	; 0x4884 <put_MOTOR_PID+0x3d2>
	}

	return(NOERROR);
    4882:	10 e0       	ldi	r17, 0x00	; 0
}
    4884:	81 2f       	mov	r24, r17
    4886:	c1 54       	subi	r28, 0x41	; 65
    4888:	df 4f       	sbci	r29, 0xFF	; 255
    488a:	cd bf       	out	0x3d, r28	; 61
    488c:	de bf       	out	0x3e, r29	; 62
    488e:	df 91       	pop	r29
    4890:	cf 91       	pop	r28
    4892:	1f 91       	pop	r17
    4894:	0f 91       	pop	r16
    4896:	ff 90       	pop	r15
    4898:	ef 90       	pop	r14
    489a:	df 90       	pop	r13
    489c:	cf 90       	pop	r12
    489e:	bf 90       	pop	r11
    48a0:	af 90       	pop	r10
    48a2:	9f 90       	pop	r9
    48a4:	08 95       	ret

000048a6 <put_MOTOR_S4MODE>:
	Returns:
		ERROR if the put_MOTOR routine fails
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t put_MOTOR_S4MODE(uint8_t mtraddr)
{
    48a6:	ef 92       	push	r14
    48a8:	ff 92       	push	r15
    48aa:	0f 93       	push	r16
    48ac:	1f 93       	push	r17
    48ae:	cf 93       	push	r28
    48b0:	df 93       	push	r29
    48b2:	cd b7       	in	r28, 0x3d	; 61
    48b4:	de b7       	in	r29, 0x3e	; 62
    48b6:	cb 57       	subi	r28, 0x7B	; 123
    48b8:	d1 09       	sbc	r29, r1
    48ba:	cd bf       	out	0x3d, r28	; 61
    48bc:	de bf       	out	0x3e, r29	; 62
    48be:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_S4MODE: put_MOTOR error on %c";
    48c0:	88 e2       	ldi	r24, 0x28	; 40
    48c2:	e2 ec       	ldi	r30, 0xC2	; 194
    48c4:	fe ea       	ldi	r31, 0xAE	; 174
    48c6:	de 01       	movw	r26, r28
    48c8:	11 96       	adiw	r26, 0x01	; 1
    48ca:	01 90       	ld	r0, Z+
    48cc:	0d 92       	st	X+, r0
    48ce:	8a 95       	dec	r24
    48d0:	e1 f7       	brne	.-8      	; 0x48ca <put_MOTOR_S4MODE+0x24>
	char strbuf[80];
	uint8_t data[3];

	data[0] = 0x00;
    48d2:	ea 96       	adiw	r28, 0x3a	; 58
    48d4:	1f ae       	std	Y+63, r1	; 0x3f
    48d6:	ea 97       	sbiw	r28, 0x3a	; 58
	data[1] = S4MODE;	// 0x72, Home(User)/Limit(Fwd)
    48d8:	82 e4       	ldi	r24, 0x42	; 66
    48da:	eb 96       	adiw	r28, 0x3b	; 59
    48dc:	8f af       	std	Y+63, r24	; 0x3f
    48de:	eb 97       	sbiw	r28, 0x3b	; 59
	data[2] = 0x00;
    48e0:	ec 96       	adiw	r28, 0x3c	; 60
    48e2:	1f ae       	std	Y+63, r1	; 0x3f
    48e4:	ec 97       	sbiw	r28, 0x3c	; 60

	if (put_MOTOR(mtraddr, SETS4MODE, data, 3) == ERROR) {
    48e6:	23 e0       	ldi	r18, 0x03	; 3
    48e8:	ae 01       	movw	r20, r28
    48ea:	47 58       	subi	r20, 0x87	; 135
    48ec:	5f 4f       	sbci	r21, 0xFF	; 255
    48ee:	6a e4       	ldi	r22, 0x4A	; 74
    48f0:	80 2f       	mov	r24, r16
    48f2:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <put_MOTOR>
    48f6:	18 2f       	mov	r17, r24
    48f8:	83 36       	cpi	r24, 0x63	; 99
    48fa:	d9 f4       	brne	.+54     	; 0x4932 <put_MOTOR_S4MODE+0x8c>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    48fc:	0f 53       	subi	r16, 0x3F	; 63
    48fe:	1f 92       	push	r1
    4900:	0f 93       	push	r16
    4902:	ce 01       	movw	r24, r28
    4904:	01 96       	adiw	r24, 0x01	; 1
    4906:	9f 93       	push	r25
    4908:	8f 93       	push	r24
    490a:	7e 01       	movw	r14, r28
    490c:	89 e2       	ldi	r24, 0x29	; 41
    490e:	e8 0e       	add	r14, r24
    4910:	f1 1c       	adc	r15, r1
    4912:	ff 92       	push	r15
    4914:	ef 92       	push	r14
    4916:	0e 94 bc 31 	call	0x6378	; 0x6378 <sprintf>
		printError(ERR_MTR, strbuf);
    491a:	b7 01       	movw	r22, r14
    491c:	86 e3       	ldi	r24, 0x36	; 54
    491e:	91 e0       	ldi	r25, 0x01	; 1
    4920:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    4924:	0f 90       	pop	r0
    4926:	0f 90       	pop	r0
    4928:	0f 90       	pop	r0
    492a:	0f 90       	pop	r0
    492c:	0f 90       	pop	r0
    492e:	0f 90       	pop	r0
    4930:	01 c0       	rjmp	.+2      	; 0x4934 <put_MOTOR_S4MODE+0x8e>
	}

	return(NOERROR);
    4932:	10 e0       	ldi	r17, 0x00	; 0

    4934:	81 2f       	mov	r24, r17
    4936:	c5 58       	subi	r28, 0x85	; 133
    4938:	df 4f       	sbci	r29, 0xFF	; 255
    493a:	cd bf       	out	0x3d, r28	; 61
    493c:	de bf       	out	0x3e, r29	; 62
    493e:	df 91       	pop	r29
    4940:	cf 91       	pop	r28
    4942:	1f 91       	pop	r17
    4944:	0f 91       	pop	r16
    4946:	ff 90       	pop	r15
    4948:	ef 90       	pop	r14
    494a:	08 95       	ret

0000494c <init_MOTORS>:
		NOERROR otherwise

ADD ERROR CHECKS?
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    494c:	1f 93       	push	r17
    494e:	cf 93       	push	r28
    4950:	df 93       	push	r29
    4952:	cd b7       	in	r28, 0x3d	; 61
    4954:	de b7       	in	r29, 0x3e	; 62
    4956:	a4 97       	sbiw	r28, 0x24	; 36
    4958:	cd bf       	out	0x3d, r28	; 61
    495a:	de bf       	out	0x3e, r29	; 62
    495c:	2a e6       	ldi	r18, 0x6A	; 106
    495e:	84 e0       	ldi	r24, 0x04	; 4
    4960:	91 e0       	ldi	r25, 0x01	; 1
    4962:	21 50       	subi	r18, 0x01	; 1
    4964:	80 40       	sbci	r24, 0x00	; 0
    4966:	90 40       	sbci	r25, 0x00	; 0
    4968:	e1 f7       	brne	.-8      	; 0x4962 <init_MOTORS+0x16>
    496a:	00 c0       	rjmp	.+0      	; 0x496c <init_MOTORS+0x20>
	int32_t encoderValue;
	PID pid;

	_delay_ms(100);

	pid.p = PID_P;
    496c:	80 e0       	ldi	r24, 0x00	; 0
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	a0 e9       	ldi	r26, 0x90	; 144
    4972:	b2 e4       	ldi	r27, 0x42	; 66
    4974:	8d 83       	std	Y+5, r24	; 0x05
    4976:	9e 83       	std	Y+6, r25	; 0x06
    4978:	af 83       	std	Y+7, r26	; 0x07
    497a:	b8 87       	std	Y+8, r27	; 0x08
	pid.i = PID_I;
    497c:	80 e0       	ldi	r24, 0x00	; 0
    497e:	90 e0       	ldi	r25, 0x00	; 0
    4980:	a0 e8       	ldi	r26, 0x80	; 128
    4982:	bf e3       	ldi	r27, 0x3F	; 63
    4984:	89 87       	std	Y+9, r24	; 0x09
    4986:	9a 87       	std	Y+10, r25	; 0x0a
    4988:	ab 87       	std	Y+11, r26	; 0x0b
    498a:	bc 87       	std	Y+12, r27	; 0x0c
	pid.d = PID_D;
    498c:	80 e0       	ldi	r24, 0x00	; 0
    498e:	90 e0       	ldi	r25, 0x00	; 0
    4990:	ab e9       	ldi	r26, 0x9B	; 155
    4992:	b3 e4       	ldi	r27, 0x43	; 67
    4994:	8d 87       	std	Y+13, r24	; 0x0d
    4996:	9e 87       	std	Y+14, r25	; 0x0e
    4998:	af 87       	std	Y+15, r26	; 0x0f
    499a:	b8 8b       	std	Y+16, r27	; 0x10
	pid.maxI = PID_MAXI;
    499c:	80 e9       	ldi	r24, 0x90	; 144
    499e:	90 e0       	ldi	r25, 0x00	; 0
    49a0:	a0 e0       	ldi	r26, 0x00	; 0
    49a2:	b0 e0       	ldi	r27, 0x00	; 0
    49a4:	89 8b       	std	Y+17, r24	; 0x11
    49a6:	9a 8b       	std	Y+18, r25	; 0x12
    49a8:	ab 8b       	std	Y+19, r26	; 0x13
    49aa:	bc 8b       	std	Y+20, r27	; 0x14
	pid.deadZone = PID_DEADZONE;
    49ac:	86 e0       	ldi	r24, 0x06	; 6
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	a0 e0       	ldi	r26, 0x00	; 0
    49b2:	b0 e0       	ldi	r27, 0x00	; 0
    49b4:	8d 8b       	std	Y+21, r24	; 0x15
    49b6:	9e 8b       	std	Y+22, r25	; 0x16
    49b8:	af 8b       	std	Y+23, r26	; 0x17
    49ba:	b8 8f       	std	Y+24, r27	; 0x18
	pid.minPos = PID_MINPOS;
    49bc:	88 ef       	ldi	r24, 0xF8	; 248
    49be:	93 eb       	ldi	r25, 0xB3	; 179
    49c0:	ae ef       	ldi	r26, 0xFE	; 254
    49c2:	bf ef       	ldi	r27, 0xFF	; 255
    49c4:	89 8f       	std	Y+25, r24	; 0x19
    49c6:	9a 8f       	std	Y+26, r25	; 0x1a
    49c8:	ab 8f       	std	Y+27, r26	; 0x1b
    49ca:	bc 8f       	std	Y+28, r27	; 0x1c
	pid.maxPos = PID_MAXPOS;
    49cc:	80 e5       	ldi	r24, 0x50	; 80
    49ce:	98 ef       	ldi	r25, 0xF8	; 248
    49d0:	ac e0       	ldi	r26, 0x0C	; 12
    49d2:	b0 e0       	ldi	r27, 0x00	; 0
    49d4:	8d 8f       	std	Y+29, r24	; 0x1d
    49d6:	9e 8f       	std	Y+30, r25	; 0x1e
    49d8:	af 8f       	std	Y+31, r26	; 0x1f
    49da:	b8 a3       	std	Y+32, r27	; 0x20
	pid.qpps = PID_QPPS;
    49dc:	80 eb       	ldi	r24, 0xB0	; 176
    49de:	96 e3       	ldi	r25, 0x36	; 54
    49e0:	a0 e0       	ldi	r26, 0x00	; 0
    49e2:	b0 e0       	ldi	r27, 0x00	; 0
    49e4:	89 a3       	std	Y+33, r24	; 0x21
    49e6:	9a a3       	std	Y+34, r25	; 0x22
    49e8:	ab a3       	std	Y+35, r26	; 0x23
    49ea:	bc a3       	std	Y+36, r27	; 0x24

	timerSAVEENCODER = 0;
    49ec:	10 92 3a 2a 	sts	0x2A3A, r1	; 0x802a3a <timerSAVEENCODER>
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;
    49f0:	8b e0       	ldi	r24, 0x0B	; 11
    49f2:	80 93 39 2a 	sts	0x2A39, r24	; 0x802a39 <timeoutSAVEENCODER>

	for (controller = MOTOR_A; controller <= MOTOR_C; controller++) {
    49f6:	10 e8       	ldi	r17, 0x80	; 128
    49f8:	2c c0       	rjmp	.+88     	; 0x4a52 <init_MOTORS+0x106>
		get_FRAM_MOTOR_ENCODER(controller, &encoderValue);
    49fa:	be 01       	movw	r22, r28
    49fc:	6f 5f       	subi	r22, 0xFF	; 255
    49fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4a00:	81 2f       	mov	r24, r17
    4a02:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <get_FRAM_MOTOR_ENCODER>
		put_MOTOR_ENCODER(controller, encoderValue);
    4a06:	49 81       	ldd	r20, Y+1	; 0x01
    4a08:	5a 81       	ldd	r21, Y+2	; 0x02
    4a0a:	6b 81       	ldd	r22, Y+3	; 0x03
    4a0c:	7c 81       	ldd	r23, Y+4	; 0x04
    4a0e:	81 2f       	mov	r24, r17
    4a10:	0e 94 8f 21 	call	0x431e	; 0x431e <put_MOTOR_ENCODER>
		put_MOTOR_MAXCURRENT(controller, MAXCURRENT);
    4a14:	40 ed       	ldi	r20, 0xD0	; 208
    4a16:	57 e0       	ldi	r21, 0x07	; 7
    4a18:	60 e0       	ldi	r22, 0x00	; 0
    4a1a:	70 e0       	ldi	r23, 0x00	; 0
    4a1c:	81 2f       	mov	r24, r17
    4a1e:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <put_MOTOR_MAXCURRENT>
		put_MOTOR_PID(controller, pid);
    4a22:	8d b7       	in	r24, 0x3d	; 61
    4a24:	9e b7       	in	r25, 0x3e	; 62
    4a26:	80 97       	sbiw	r24, 0x20	; 32
    4a28:	8d bf       	out	0x3d, r24	; 61
    4a2a:	9e bf       	out	0x3e, r25	; 62
    4a2c:	ad b7       	in	r26, 0x3d	; 61
    4a2e:	be b7       	in	r27, 0x3e	; 62
    4a30:	11 96       	adiw	r26, 0x01	; 1
    4a32:	80 e2       	ldi	r24, 0x20	; 32
    4a34:	fe 01       	movw	r30, r28
    4a36:	35 96       	adiw	r30, 0x05	; 5
    4a38:	01 90       	ld	r0, Z+
    4a3a:	0d 92       	st	X+, r0
    4a3c:	8a 95       	dec	r24
    4a3e:	e1 f7       	brne	.-8      	; 0x4a38 <init_MOTORS+0xec>
    4a40:	81 2f       	mov	r24, r17
    4a42:	0e 94 59 22 	call	0x44b2	; 0x44b2 <put_MOTOR_PID>
		put_MOTOR_S4MODE(controller);
    4a46:	cd bf       	out	0x3d, r28	; 61
    4a48:	de bf       	out	0x3e, r29	; 62
    4a4a:	81 2f       	mov	r24, r17
    4a4c:	0e 94 53 24 	call	0x48a6	; 0x48a6 <put_MOTOR_S4MODE>
	pid.qpps = PID_QPPS;

	timerSAVEENCODER = 0;
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;

	for (controller = MOTOR_A; controller <= MOTOR_C; controller++) {
    4a50:	1f 5f       	subi	r17, 0xFF	; 255
    4a52:	13 38       	cpi	r17, 0x83	; 131
    4a54:	90 f2       	brcs	.-92     	; 0x49fa <init_MOTORS+0xae>
		put_MOTOR_S4MODE(controller);
	}

	return(NOERROR);

}
    4a56:	80 e0       	ldi	r24, 0x00	; 0
    4a58:	a4 96       	adiw	r28, 0x24	; 36
    4a5a:	cd bf       	out	0x3d, r28	; 61
    4a5c:	de bf       	out	0x3e, r29	; 62
    4a5e:	df 91       	pop	r29
    4a60:	cf 91       	pop	r28
    4a62:	1f 91       	pop	r17
    4a64:	08 95       	ret

00004a66 <set>:
	Returns:
		ERROR if an invalid object was requested.
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    4a66:	1f 93       	push	r17
    4a68:	cf 93       	push	r28
    4a6a:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    4a6c:	90 e0       	ldi	r25, 0x00	; 0
    4a6e:	24 e3       	ldi	r18, 0x34	; 52
    4a70:	28 9f       	mul	r18, r24
    4a72:	f0 01       	movw	r30, r0
    4a74:	29 9f       	mul	r18, r25
    4a76:	f0 0d       	add	r31, r0
    4a78:	11 24       	eor	r1, r1
    4a7a:	e3 5f       	subi	r30, 0xF3	; 243
    4a7c:	f7 4d       	sbci	r31, 0xD7	; 215
    4a7e:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    4a80:	24 37       	cpi	r18, 0x74	; 116
    4a82:	79 f5       	brne	.+94     	; 0x4ae2 <set+0x7c>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    4a84:	24 e3       	ldi	r18, 0x34	; 52
    4a86:	28 9f       	mul	r18, r24
    4a88:	e0 01       	movw	r28, r0
    4a8a:	29 9f       	mul	r18, r25
    4a8c:	d0 0d       	add	r29, r0
    4a8e:	11 24       	eor	r1, r1
    4a90:	c1 5f       	subi	r28, 0xF1	; 241
    4a92:	d7 4d       	sbci	r29, 0xD7	; 215
    4a94:	fe 01       	movw	r30, r28
    4a96:	01 90       	ld	r0, Z+
    4a98:	00 20       	and	r0, r0
    4a9a:	e9 f7       	brne	.-6      	; 0x4a96 <set+0x30>
    4a9c:	31 97       	sbiw	r30, 0x01	; 1
    4a9e:	ec 1b       	sub	r30, r28
    4aa0:	fd 0b       	sbc	r31, r29
    4aa2:	73 97       	sbiw	r30, 0x13	; 19
    4aa4:	41 f0       	breq	.+16     	; 0x4ab6 <set+0x50>
				printError(ERR_SETTIME, "set: bad time format");
    4aa6:	6a ee       	ldi	r22, 0xEA	; 234
    4aa8:	7e ea       	ldi	r23, 0xAE	; 174
    4aaa:	8a e5       	ldi	r24, 0x5A	; 90
    4aac:	92 e0       	ldi	r25, 0x02	; 2
    4aae:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				return(ERROR);
    4ab2:	13 e6       	ldi	r17, 0x63	; 99
    4ab4:	1d c0       	rjmp	.+58     	; 0x4af0 <set+0x8a>
			}
			if (put_time(pcmd[cstack].cvalue) == ERROR) {
    4ab6:	ce 01       	movw	r24, r28
    4ab8:	0e 94 12 07 	call	0xe24	; 0xe24 <put_time>
    4abc:	18 2f       	mov	r17, r24
    4abe:	83 36       	cpi	r24, 0x63	; 99
    4ac0:	39 f4       	brne	.+14     	; 0x4ad0 <set+0x6a>
				printError(ERR_ISO, "set time: put_time error");
    4ac2:	6f ef       	ldi	r22, 0xFF	; 255
    4ac4:	7e ea       	ldi	r23, 0xAE	; 174
    4ac6:	8b e5       	ldi	r24, 0x5B	; 91
    4ac8:	92 e0       	ldi	r25, 0x02	; 2
    4aca:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				return(ERROR);
    4ace:	10 c0       	rjmp	.+32     	; 0x4af0 <set+0x8a>
			}
			write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    4ad0:	24 e1       	ldi	r18, 0x14	; 20
    4ad2:	ae 01       	movw	r20, r28
    4ad4:	60 e0       	ldi	r22, 0x00	; 0
    4ad6:	70 e0       	ldi	r23, 0x00	; 0
    4ad8:	80 e5       	ldi	r24, 0x50	; 80
    4ada:	0e 94 49 08 	call	0x1092	; 0x1092 <write_FRAM>

		default:
			printError(ERR_SET, "set what?");
			return(ERROR);
	}
	return(NOERROR);
    4ade:	10 e0       	ldi	r17, 0x00	; 0
    4ae0:	07 c0       	rjmp	.+14     	; 0x4af0 <set+0x8a>
			}
			write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			printError(ERR_SET, "set what?");
    4ae2:	68 e1       	ldi	r22, 0x18	; 24
    4ae4:	7f ea       	ldi	r23, 0xAF	; 175
    4ae6:	89 e5       	ldi	r24, 0x59	; 89
    4ae8:	92 e0       	ldi	r25, 0x02	; 2
    4aea:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			return(ERROR);
    4aee:	13 e6       	ldi	r17, 0x63	; 99
	}
	return(NOERROR);
}
    4af0:	81 2f       	mov	r24, r17
    4af2:	df 91       	pop	r29
    4af4:	cf 91       	pop	r28
    4af6:	1f 91       	pop	r17
    4af8:	08 95       	ret

00004afa <get_temperature>:
	point for the actual devices.

	The signal is 1.5E-3 mV/K with a 1500 kOhm dropping resistor.
------------------------------------------------------------------------------*/
float get_temperature(uint8_t sensor)
{
    4afa:	cf 93       	push	r28
    4afc:	df 93       	push	r29
    4afe:	00 d0       	rcall	.+0      	; 0x4b00 <get_temperature+0x6>
    4b00:	00 d0       	rcall	.+0      	; 0x4b02 <get_temperature+0x8>
    4b02:	cd b7       	in	r28, 0x3d	; 61
    4b04:	de b7       	in	r29, 0x3e	; 62

	float temperature;

	switch (sensor) {
    4b06:	83 30       	cpi	r24, 0x03	; 3
    4b08:	18 f0       	brcs	.+6      	; 0x4b10 <get_temperature+0x16>
    4b0a:	83 30       	cpi	r24, 0x03	; 3
    4b0c:	39 f0       	breq	.+14     	; 0x4b1c <get_temperature+0x22>
    4b0e:	0b c0       	rjmp	.+22     	; 0x4b26 <get_temperature+0x2c>
		case 0:
		case 1:
		case 2:
			read_AD590(sensor, &temperature);
    4b10:	be 01       	movw	r22, r28
    4b12:	6f 5f       	subi	r22, 0xFF	; 255
    4b14:	7f 4f       	sbci	r23, 0xFF	; 255
    4b16:	0e 94 47 01 	call	0x28e	; 0x28e <read_AD590>
			break;
    4b1a:	0d c0       	rjmp	.+26     	; 0x4b36 <get_temperature+0x3c>

		case 3:
			read_MCP9808(&temperature);
    4b1c:	ce 01       	movw	r24, r28
    4b1e:	01 96       	adiw	r24, 0x01	; 1
    4b20:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <read_MCP9808>
			break;
    4b24:	08 c0       	rjmp	.+16     	; 0x4b36 <get_temperature+0x3c>

		default:
			temperature = BADFLOAT;
    4b26:	80 e0       	ldi	r24, 0x00	; 0
    4b28:	90 e8       	ldi	r25, 0x80	; 128
    4b2a:	a6 e2       	ldi	r26, 0x26	; 38
    4b2c:	b4 ec       	ldi	r27, 0xC4	; 196
    4b2e:	89 83       	std	Y+1, r24	; 0x01
    4b30:	9a 83       	std	Y+2, r25	; 0x02
    4b32:	ab 83       	std	Y+3, r26	; 0x03
    4b34:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}

	if (temperature < -50.0) {
    4b36:	69 81       	ldd	r22, Y+1	; 0x01
    4b38:	7a 81       	ldd	r23, Y+2	; 0x02
    4b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    4b3e:	20 e0       	ldi	r18, 0x00	; 0
    4b40:	30 e0       	ldi	r19, 0x00	; 0
    4b42:	48 e4       	ldi	r20, 0x48	; 72
    4b44:	52 ec       	ldi	r21, 0xC2	; 194
    4b46:	0e 94 16 2a 	call	0x542c	; 0x542c <__cmpsf2>
    4b4a:	88 23       	and	r24, r24
    4b4c:	44 f4       	brge	.+16     	; 0x4b5e <get_temperature+0x64>
		temperature = BADFLOAT;
    4b4e:	80 e0       	ldi	r24, 0x00	; 0
    4b50:	90 e8       	ldi	r25, 0x80	; 128
    4b52:	a6 e2       	ldi	r26, 0x26	; 38
    4b54:	b4 ec       	ldi	r27, 0xC4	; 196
    4b56:	89 83       	std	Y+1, r24	; 0x01
    4b58:	9a 83       	std	Y+2, r25	; 0x02
    4b5a:	ab 83       	std	Y+3, r26	; 0x03
    4b5c:	bc 83       	std	Y+4, r27	; 0x04
	}

	return(temperature);
    4b5e:	69 81       	ldd	r22, Y+1	; 0x01
    4b60:	7a 81       	ldd	r23, Y+2	; 0x02
    4b62:	8b 81       	ldd	r24, Y+3	; 0x03
    4b64:	9c 81       	ldd	r25, Y+4	; 0x04

}
    4b66:	24 96       	adiw	r28, 0x04	; 4
    4b68:	cd bf       	out	0x3d, r28	; 61
    4b6a:	de bf       	out	0x3e, r29	; 62
    4b6c:	df 91       	pop	r29
    4b6e:	cf 91       	pop	r28
    4b70:	08 95       	ret

00004b72 <testroutine>:
	get_MOTOR_MAXCURRENT(128, &value);
	get_MOTOR_MAXCURRENT(129, &value);
	get_MOTOR_MAXCURRENT(130, &value);
---*/

	move_MOTOR_HOME();
    4b72:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <move_MOTOR_HOME>
    4b76:	08 95       	ret

00004b78 <init_RTC>:
	Turn off the TCB0 timer
------------------------------------------------------------------------------*/
void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    4b78:	ac 01       	movw	r20, r24
    4b7a:	e0 e6       	ldi	r30, 0x60	; 96
    4b7c:	f0 e0       	ldi	r31, 0x00	; 0
    4b7e:	94 8d       	ldd	r25, Z+28	; 0x1c
    4b80:	9e 7f       	andi	r25, 0xFE	; 254
    4b82:	88 ed       	ldi	r24, 0xD8	; 216
    4b84:	84 bf       	out	0x34, r24	; 52
    4b86:	94 8f       	std	Z+28, r25	; 0x1c
    4b88:	01 c0       	rjmp	.+2      	; 0x4b8c <init_RTC+0x14>
    4b8a:	00 00       	nop
    4b8c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    4b90:	96 fd       	sbrc	r25, 6
    4b92:	fb cf       	rjmp	.-10     	; 0x4b8a <init_RTC+0x12>
    4b94:	e0 e6       	ldi	r30, 0x60	; 96
    4b96:	f0 e0       	ldi	r31, 0x00	; 0
    4b98:	94 8d       	ldd	r25, Z+28	; 0x1c
    4b9a:	9b 7f       	andi	r25, 0xFB	; 251
    4b9c:	28 ed       	ldi	r18, 0xD8	; 216
    4b9e:	24 bf       	out	0x34, r18	; 52
    4ba0:	94 8f       	std	Z+28, r25	; 0x1c
    4ba2:	94 8d       	ldd	r25, Z+28	; 0x1c
    4ba4:	91 60       	ori	r25, 0x01	; 1
    4ba6:	24 bf       	out	0x34, r18	; 52
    4ba8:	94 8f       	std	Z+28, r25	; 0x1c
    4baa:	01 c0       	rjmp	.+2      	; 0x4bae <init_RTC+0x36>
    4bac:	00 00       	nop
    4bae:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    4bb2:	91 11       	cpse	r25, r1
    4bb4:	fb cf       	rjmp	.-10     	; 0x4bac <init_RTC+0x34>
    4bb6:	e0 e4       	ldi	r30, 0x40	; 64
    4bb8:	f1 e0       	ldi	r31, 0x01	; 1
    4bba:	42 87       	std	Z+10, r20	; 0x0a
    4bbc:	53 87       	std	Z+11, r21	; 0x0b
    4bbe:	82 e0       	ldi	r24, 0x02	; 2
    4bc0:	87 83       	std	Z+7, r24	; 0x07
    4bc2:	85 81       	ldd	r24, Z+5	; 0x05
    4bc4:	81 60       	ori	r24, 0x01	; 1
    4bc6:	85 83       	std	Z+5, r24	; 0x05
    4bc8:	81 eb       	ldi	r24, 0xB1	; 177
    4bca:	80 83       	st	Z, r24
    4bcc:	82 81       	ldd	r24, Z+2	; 0x02
    4bce:	81 60       	ori	r24, 0x01	; 1
    4bd0:	82 83       	std	Z+2, r24	; 0x02
    4bd2:	08 95       	ret

00004bd4 <__vector_3>:
    4bd4:	1f 92       	push	r1
    4bd6:	0f 92       	push	r0
    4bd8:	0f b6       	in	r0, 0x3f	; 63
    4bda:	0f 92       	push	r0
    4bdc:	11 24       	eor	r1, r1
    4bde:	8f 93       	push	r24
    4be0:	9f 93       	push	r25
    4be2:	81 e0       	ldi	r24, 0x01	; 1
    4be4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>
    4be8:	80 91 16 2a 	lds	r24, 0x2A16	; 0x802a16 <timerOLED>
    4bec:	90 91 17 2a 	lds	r25, 0x2A17	; 0x802a17 <timerOLED+0x1>
    4bf0:	01 96       	adiw	r24, 0x01	; 1
    4bf2:	80 93 16 2a 	sts	0x2A16, r24	; 0x802a16 <timerOLED>
    4bf6:	90 93 17 2a 	sts	0x2A17, r25	; 0x802a17 <timerOLED+0x1>
    4bfa:	80 e2       	ldi	r24, 0x20	; 32
    4bfc:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>
    4c00:	80 91 3a 2a 	lds	r24, 0x2A3A	; 0x802a3a <timerSAVEENCODER>
    4c04:	8f 5f       	subi	r24, 0xFF	; 255
    4c06:	80 93 3a 2a 	sts	0x2A3A, r24	; 0x802a3a <timerSAVEENCODER>
    4c0a:	9f 91       	pop	r25
    4c0c:	8f 91       	pop	r24
    4c0e:	0f 90       	pop	r0
    4c10:	0f be       	out	0x3f, r0	; 63
    4c12:	0f 90       	pop	r0
    4c14:	1f 90       	pop	r1
    4c16:	18 95       	reti

00004c18 <start_TCB0>:
    4c18:	25 e0       	ldi	r18, 0x05	; 5
    4c1a:	3d e0       	ldi	r19, 0x0D	; 13
    4c1c:	ac 01       	movw	r20, r24
    4c1e:	42 9f       	mul	r20, r18
    4c20:	c0 01       	movw	r24, r0
    4c22:	43 9f       	mul	r20, r19
    4c24:	90 0d       	add	r25, r0
    4c26:	52 9f       	mul	r21, r18
    4c28:	90 0d       	add	r25, r0
    4c2a:	11 24       	eor	r1, r1
    4c2c:	e0 e8       	ldi	r30, 0x80	; 128
    4c2e:	fa e0       	ldi	r31, 0x0A	; 10
    4c30:	84 87       	std	Z+12, r24	; 0x0c
    4c32:	95 87       	std	Z+13, r25	; 0x0d
    4c34:	81 e0       	ldi	r24, 0x01	; 1
    4c36:	85 83       	std	Z+5, r24	; 0x05
    4c38:	80 83       	st	Z, r24
    4c3a:	08 95       	ret

00004c3c <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    4c3c:	1f 92       	push	r1
    4c3e:	0f 92       	push	r0
    4c40:	0f b6       	in	r0, 0x3f	; 63
    4c42:	0f 92       	push	r0
    4c44:	11 24       	eor	r1, r1
    4c46:	8f 93       	push	r24
    4c48:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    4c4a:	81 e0       	ldi	r24, 0x01	; 1
    4c4c:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	USART0_ticks++;
    4c50:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    4c54:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    4c58:	01 96       	adiw	r24, 0x01	; 1
    4c5a:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <USART0_ticks>
    4c5e:	90 93 04 28 	sts	0x2804, r25	; 0x802804 <USART0_ticks+0x1>
	USART1_ticks++;
    4c62:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    4c66:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    4c6a:	01 96       	adiw	r24, 0x01	; 1
    4c6c:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <USART1_ticks>
    4c70:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <USART1_ticks+0x1>
	USART3_ticks++;
    4c74:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <USART3_ticks>
    4c78:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <USART3_ticks+0x1>
    4c7c:	01 96       	adiw	r24, 0x01	; 1
    4c7e:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <USART3_ticks>
    4c82:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <USART3_ticks+0x1>
	TWI_ticks++;
    4c86:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4c8a:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4c8e:	01 96       	adiw	r24, 0x01	; 1
    4c90:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <TWI_ticks>
    4c94:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <TWI_ticks+0x1>

    4c98:	9f 91       	pop	r25
    4c9a:	8f 91       	pop	r24
    4c9c:	0f 90       	pop	r0
    4c9e:	0f be       	out	0x3f, r0	; 63
    4ca0:	0f 90       	pop	r0
    4ca2:	1f 90       	pop	r1
    4ca4:	18 95       	reti

00004ca6 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    4ca6:	e0 ea       	ldi	r30, 0xA0	; 160
    4ca8:	f8 e0       	ldi	r31, 0x08	; 8
    4caa:	8b e0       	ldi	r24, 0x0B	; 11
    4cac:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    4cae:	83 81       	ldd	r24, Z+3	; 0x03
    4cb0:	81 60       	ori	r24, 0x01	; 1
    4cb2:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    4cb4:	85 81       	ldd	r24, Z+5	; 0x05
    4cb6:	81 60       	ori	r24, 0x01	; 1
    4cb8:	85 83       	std	Z+5, r24	; 0x05
    4cba:	08 95       	ret

00004cbc <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    4cbc:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4cc0:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    4cc4:	0f c0       	rjmp	.+30     	; 0x4ce4 <read_TWI+0x28>
		asm("nop");
    4cc6:	00 00       	nop
		if (TWI_ticks > 50) {					// Typically 0 ticks needed
    4cc8:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4ccc:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4cd0:	c3 97       	sbiw	r24, 0x33	; 51
    4cd2:	40 f0       	brcs	.+16     	; 0x4ce4 <read_TWI+0x28>
			printError(ERR_TWI, "read_TWI timeout");
    4cd4:	62 e2       	ldi	r22, 0x22	; 34
    4cd6:	7f ea       	ldi	r23, 0xAF	; 175
    4cd8:	81 e9       	ldi	r24, 0x91	; 145
    4cda:	91 e0       	ldi	r25, 0x01	; 1
    4cdc:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
//			stop_TCB0();
			return(0xFF);
    4ce0:	8f ef       	ldi	r24, 0xFF	; 255
    4ce2:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    4ce4:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4ce8:	88 23       	and	r24, r24
    4cea:	6c f7       	brge	.-38     	; 0x4cc6 <read_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK
    4cec:	e0 ea       	ldi	r30, 0xA0	; 160
    4cee:	f8 e0       	ldi	r31, 0x08	; 8
    4cf0:	84 81       	ldd	r24, Z+4	; 0x04
    4cf2:	8b 7f       	andi	r24, 0xFB	; 251
    4cf4:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;							// Next read
    4cf6:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    4cf8:	94 81       	ldd	r25, Z+4	; 0x04
    4cfa:	92 60       	ori	r25, 0x02	; 2
    4cfc:	94 83       	std	Z+4, r25	; 0x04

	return(data);

}
    4cfe:	08 95       	ret

00004d00 <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    4d00:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4d04:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    4d08:	0f c0       	rjmp	.+30     	; 0x4d28 <readlast_TWI+0x28>
		asm("nop");
    4d0a:	00 00       	nop
		if (TWI_ticks > 50) {						// Typically 0 ticks needed
    4d0c:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4d10:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4d14:	c3 97       	sbiw	r24, 0x33	; 51
    4d16:	40 f0       	brcs	.+16     	; 0x4d28 <readlast_TWI+0x28>
			printError(ERR_TWI, "readlast timeout");
    4d18:	63 e3       	ldi	r22, 0x33	; 51
    4d1a:	7f ea       	ldi	r23, 0xAF	; 175
    4d1c:	81 e9       	ldi	r24, 0x91	; 145
    4d1e:	91 e0       	ldi	r25, 0x01	; 1
    4d20:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
//			stop_TCB0();
			return(0xFF);
    4d24:	8f ef       	ldi	r24, 0xFF	; 255
    4d26:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    4d28:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4d2c:	88 23       	and	r24, r24
    4d2e:	6c f7       	brge	.-38     	; 0x4d0a <readlast_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    4d30:	e0 ea       	ldi	r30, 0xA0	; 160
    4d32:	f8 e0       	ldi	r31, 0x08	; 8
    4d34:	84 81       	ldd	r24, Z+4	; 0x04
    4d36:	84 60       	ori	r24, 0x04	; 4
    4d38:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    4d3a:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    4d3c:	08 95       	ret

00004d3e <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    4d3e:	61 30       	cpi	r22, 0x01	; 1
    4d40:	39 f4       	brne	.+14     	; 0x4d50 <start_TWI+0x12>
		TWI0.MADDR = ((addr << 1) | 0x01);
    4d42:	90 e0       	ldi	r25, 0x00	; 0
    4d44:	88 0f       	add	r24, r24
    4d46:	99 1f       	adc	r25, r25
    4d48:	81 60       	ori	r24, 0x01	; 1
    4d4a:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    4d4e:	03 c0       	rjmp	.+6      	; 0x4d56 <start_TWI+0x18>
	} else {
		TWI0.MADDR = (addr << 1);
    4d50:	88 0f       	add	r24, r24
    4d52:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

	TWI_ticks = 0;
    4d56:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4d5a:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    4d5e:	0f c0       	rjmp	.+30     	; 0x4d7e <start_TWI+0x40>
		asm("nop");								// Wait for addr transmission
    4d60:	00 00       	nop
		if (TWI_ticks > 50) {
    4d62:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4d66:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4d6a:	c3 97       	sbiw	r24, 0x33	; 51
    4d6c:	40 f0       	brcs	.+16     	; 0x4d7e <start_TWI+0x40>
			printError(ERR_TWI, "TWI start timeout");
    4d6e:	64 e4       	ldi	r22, 0x44	; 68
    4d70:	7f ea       	ldi	r23, 0xAF	; 175
    4d72:	81 e9       	ldi	r24, 0x91	; 145
    4d74:	91 e0       	ldi	r25, 0x01	; 1
    4d76:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
//			stop_TCB0();
			return(ERROR);
    4d7a:	83 e6       	ldi	r24, 0x63	; 99
    4d7c:	08 95       	ret
		TWI0.MADDR = (addr << 1);
	}

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    4d7e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4d82:	80 7c       	andi	r24, 0xC0	; 192
    4d84:	69 f3       	breq	.-38     	; 0x4d60 <start_TWI+0x22>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    4d86:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4d8a:	82 ff       	sbrs	r24, 2
    4d8c:	08 c0       	rjmp	.+16     	; 0x4d9e <start_TWI+0x60>
		printError(ERR_TWI, "TWI bus");
    4d8e:	66 e5       	ldi	r22, 0x56	; 86
    4d90:	7f ea       	ldi	r23, 0xAF	; 175
    4d92:	81 e9       	ldi	r24, 0x91	; 145
    4d94:	91 e0       	ldi	r25, 0x01	; 1
    4d96:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    4d9a:	83 e6       	ldi	r24, 0x63	; 99
    4d9c:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    4d9e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4da2:	83 ff       	sbrs	r24, 3
    4da4:	08 c0       	rjmp	.+16     	; 0x4db6 <start_TWI+0x78>
		printError(ERR_TWI, "TWI arbitration");
    4da6:	6e e5       	ldi	r22, 0x5E	; 94
    4da8:	7f ea       	ldi	r23, 0xAF	; 175
    4daa:	81 e9       	ldi	r24, 0x91	; 145
    4dac:	91 e0       	ldi	r25, 0x01	; 1
    4dae:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    4db2:	83 e6       	ldi	r24, 0x63	; 99
    4db4:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    4db6:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4dba:	89 2f       	mov	r24, r25
    4dbc:	80 71       	andi	r24, 0x10	; 16
    4dbe:	94 ff       	sbrs	r25, 4
    4dc0:	07 c0       	rjmp	.+14     	; 0x4dd0 <start_TWI+0x92>
		printError(ERR_TWI, "TWI no device responded");
    4dc2:	6e e6       	ldi	r22, 0x6E	; 110
    4dc4:	7f ea       	ldi	r23, 0xAF	; 175
    4dc6:	81 e9       	ldi	r24, 0x91	; 145
    4dc8:	91 e0       	ldi	r25, 0x01	; 1
    4dca:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    4dce:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    4dd0:	08 95       	ret

00004dd2 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    4dd2:	87 e0       	ldi	r24, 0x07	; 7
    4dd4:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    4dd8:	08 95       	ret

00004dda <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
    4dda:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4dde:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    4de2:	10 c0       	rjmp	.+32     	; 0x4e04 <write_TWI+0x2a>
		asm("nop");
    4de4:	00 00       	nop
		if (TWI_ticks > 50) {
    4de6:	20 91 05 28 	lds	r18, 0x2805	; 0x802805 <TWI_ticks>
    4dea:	30 91 06 28 	lds	r19, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4dee:	23 33       	cpi	r18, 0x33	; 51
    4df0:	31 05       	cpc	r19, r1
    4df2:	40 f0       	brcs	.+16     	; 0x4e04 <write_TWI+0x2a>
			printError(ERR_TWI, "write_TWI error1");
    4df4:	66 e8       	ldi	r22, 0x86	; 134
    4df6:	7f ea       	ldi	r23, 0xAF	; 175
    4df8:	81 e9       	ldi	r24, 0x91	; 145
    4dfa:	91 e0       	ldi	r25, 0x01	; 1
    4dfc:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
//			stop_TCB0();
			return(ERROR);
    4e00:	83 e6       	ldi	r24, 0x63	; 99
    4e02:	08 95       	ret
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    4e04:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4e08:	96 ff       	sbrs	r25, 6
    4e0a:	ec cf       	rjmp	.-40     	; 0x4de4 <write_TWI+0xa>
			return(ERROR);
		}
	}
//	stop_TCB0();

	TWI0.MDATA = data;
    4e0c:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	TWI_ticks = 0;
    4e10:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4e14:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    4e18:	0f c0       	rjmp	.+30     	; 0x4e38 <write_TWI+0x5e>
		asm("nop");
    4e1a:	00 00       	nop
		if (TWI_ticks > 50) {
    4e1c:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4e20:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4e24:	c3 97       	sbiw	r24, 0x33	; 51
    4e26:	40 f0       	brcs	.+16     	; 0x4e38 <write_TWI+0x5e>
			printError(ERR_TWI, "write_TWI error2");
    4e28:	67 e9       	ldi	r22, 0x97	; 151
    4e2a:	7f ea       	ldi	r23, 0xAF	; 175
    4e2c:	81 e9       	ldi	r24, 0x91	; 145
    4e2e:	91 e0       	ldi	r25, 0x01	; 1
    4e30:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
//			stop_TCB0();
			return(ERROR);
    4e34:	83 e6       	ldi	r24, 0x63	; 99
    4e36:	08 95       	ret

	TWI0.MDATA = data;

	TWI_ticks = 0;
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    4e38:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4e3c:	86 ff       	sbrs	r24, 6
    4e3e:	ed cf       	rjmp	.-38     	; 0x4e1a <write_TWI+0x40>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    4e40:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4e44:	89 2f       	mov	r24, r25
    4e46:	80 71       	andi	r24, 0x10	; 16
    4e48:	94 ff       	sbrs	r25, 4
    4e4a:	07 c0       	rjmp	.+14     	; 0x4e5a <write_TWI+0x80>
		printError(ERR_TWI, "ACK not received");
    4e4c:	68 ea       	ldi	r22, 0xA8	; 168
    4e4e:	7f ea       	ldi	r23, 0xAF	; 175
    4e50:	81 e9       	ldi	r24, 0x91	; 145
    4e52:	91 e0       	ldi	r25, 0x01	; 1
    4e54:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    4e58:	83 e6       	ldi	r24, 0x63	; 99
	} else {
		return(NOERROR);
	}

}
    4e5a:	08 95       	ret

00004e5c <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    4e5c:	e0 e0       	ldi	r30, 0x00	; 0
    4e5e:	f4 e0       	ldi	r31, 0x04	; 4
    4e60:	81 e0       	ldi	r24, 0x01	; 1
    4e62:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    4e64:	81 83       	std	Z+1, r24	; 0x01
//	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    4e66:	e0 e0       	ldi	r30, 0x00	; 0
    4e68:	f8 e0       	ldi	r31, 0x08	; 8
    4e6a:	24 e7       	ldi	r18, 0x74	; 116
    4e6c:	30 e0       	ldi	r19, 0x00	; 0
    4e6e:	20 87       	std	Z+8, r18	; 0x08
    4e70:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    4e72:	95 81       	ldd	r25, Z+5	; 0x05
    4e74:	90 68       	ori	r25, 0x80	; 128
    4e76:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    4e78:	96 81       	ldd	r25, Z+6	; 0x06
    4e7a:	90 64       	ori	r25, 0x40	; 64
    4e7c:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    4e7e:	96 81       	ldd	r25, Z+6	; 0x06
    4e80:	90 68       	ori	r25, 0x80	; 128
    4e82:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;					// Set up send/receive buffers
    4e84:	10 92 41 2d 	sts	0x2D41, r1	; 0x802d41 <send0_buf+0xfe>
	send0_buf.tail = 0;
    4e88:	10 92 42 2d 	sts	0x2D42, r1	; 0x802d42 <send0_buf+0xff>
	send0_buf.done = YES;
    4e8c:	80 93 46 2d 	sts	0x2D46, r24	; 0x802d46 <send0_buf+0x103>
	recv0_buf.head = 0;
    4e90:	10 92 3d 2c 	sts	0x2C3D, r1	; 0x802c3d <recv0_buf+0xfe>
	recv0_buf.tail = 0;
    4e94:	10 92 3e 2c 	sts	0x2C3E, r1	; 0x802c3e <recv0_buf+0xff>
	recv0_buf.data[0] = '\0';
    4e98:	10 92 3f 2b 	sts	0x2B3F, r1	; 0x802b3f <recv0_buf>
	recv0_buf.length = 0;
    4e9c:	10 92 40 2c 	sts	0x2C40, r1	; 0x802c40 <recv0_buf+0x101>
	recv0_buf.done = NO;
    4ea0:	10 92 42 2c 	sts	0x2C42, r1	; 0x802c42 <recv0_buf+0x103>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    4ea4:	e0 e4       	ldi	r30, 0x40	; 64
    4ea6:	f4 e0       	ldi	r31, 0x04	; 4
    4ea8:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    4eaa:	81 83       	std	Z+1, r24	; 0x01
//	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
//	USART1.BAUD = (uint16_t) USART_BAUD_RATE(9600);
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(57600);
    4eac:	e0 e2       	ldi	r30, 0x20	; 32
    4eae:	f8 e0       	ldi	r31, 0x08	; 8
    4eb0:	27 ee       	ldi	r18, 0xE7	; 231
    4eb2:	30 e0       	ldi	r19, 0x00	; 0
    4eb4:	20 87       	std	Z+8, r18	; 0x08
    4eb6:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    4eb8:	95 81       	ldd	r25, Z+5	; 0x05
    4eba:	90 68       	ori	r25, 0x80	; 128
    4ebc:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    4ebe:	96 81       	ldd	r25, Z+6	; 0x06
    4ec0:	90 64       	ori	r25, 0x40	; 64
    4ec2:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    4ec4:	96 81       	ldd	r25, Z+6	; 0x06
    4ec6:	90 68       	ori	r25, 0x80	; 128
    4ec8:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    4eca:	10 92 4d 30 	sts	0x304D, r1	; 0x80304d <send1_buf+0xfe>
	send1_buf.tail = 0;
    4ece:	10 92 4e 30 	sts	0x304E, r1	; 0x80304e <send1_buf+0xff>
	send1_buf.done = YES;
    4ed2:	80 93 52 30 	sts	0x3052, r24	; 0x803052 <send1_buf+0x103>
	recv1_buf.head = 0;
    4ed6:	10 92 39 2b 	sts	0x2B39, r1	; 0x802b39 <recv1_buf+0xfe>
	recv1_buf.tail = 0;
    4eda:	10 92 3a 2b 	sts	0x2B3A, r1	; 0x802b3a <recv1_buf+0xff>
	recv1_buf.data[0] = '\0';
    4ede:	10 92 3b 2a 	sts	0x2A3B, r1	; 0x802a3b <recv1_buf>
	recv1_buf.length = 0;				// Not used
    4ee2:	10 92 3c 2b 	sts	0x2B3C, r1	; 0x802b3c <recv1_buf+0x101>
	recv1_buf.done = NO;
    4ee6:	10 92 3e 2b 	sts	0x2B3E, r1	; 0x802b3e <recv1_buf+0x103>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    4eea:	e0 e2       	ldi	r30, 0x20	; 32
    4eec:	f4 e0       	ldi	r31, 0x04	; 4
    4eee:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    4ef0:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    4ef2:	e0 e6       	ldi	r30, 0x60	; 96
    4ef4:	f8 e0       	ldi	r31, 0x08	; 8
    4ef6:	2d e6       	ldi	r18, 0x6D	; 109
    4ef8:	35 e0       	ldi	r19, 0x05	; 5
    4efa:	20 87       	std	Z+8, r18	; 0x08
    4efc:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    4efe:	96 81       	ldd	r25, Z+6	; 0x06
    4f00:	90 64       	ori	r25, 0x40	; 64
    4f02:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    4f04:	96 81       	ldd	r25, Z+6	; 0x06
    4f06:	90 68       	ori	r25, 0x80	; 128
    4f08:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    4f0a:	80 93 4e 2f 	sts	0x2F4E, r24	; 0x802f4e <send3_buf+0x103>
	recv3_buf.done = NO;
    4f0e:	10 92 4a 2e 	sts	0x2E4A, r1	; 0x802e4a <recv3_buf+0x103>
    4f12:	08 95       	ret

00004f14 <send_USART>:
		"transmit data register empty" interrupt (DREIE). The USARTn_DRE_vect
		puts the bytes into the transmit register until the tail catches up
		to the head of the circular buffer.
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    4f14:	0f 93       	push	r16
    4f16:	1f 93       	push	r17
    4f18:	cf 93       	push	r28
    4f1a:	df 93       	push	r29
    4f1c:	eb 01       	movw	r28, r22
    4f1e:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    4f20:	81 30       	cpi	r24, 0x01	; 1
    4f22:	b1 f1       	breq	.+108    	; 0x4f90 <send_USART+0x7c>
    4f24:	20 f0       	brcs	.+8      	; 0x4f2e <send_USART+0x1a>
    4f26:	83 30       	cpi	r24, 0x03	; 3
    4f28:	09 f4       	brne	.+2      	; 0x4f2c <send_USART+0x18>
    4f2a:	81 c0       	rjmp	.+258    	; 0x502e <send_USART+0x11a>
    4f2c:	88 c0       	rjmp	.+272    	; 0x503e <send_USART+0x12a>
		case 0:
			send0_buf.done = NO;
    4f2e:	10 92 46 2d 	sts	0x2D46, r1	; 0x802d46 <send0_buf+0x103>
			for (i = 0; i < nbytes; i++) {
    4f32:	20 e0       	ldi	r18, 0x00	; 0
    4f34:	11 c0       	rjmp	.+34     	; 0x4f58 <send_USART+0x44>
				send0_buf.data[send0_buf.head] = *data++;
    4f36:	e1 e4       	ldi	r30, 0x41	; 65
    4f38:	fd e2       	ldi	r31, 0x2D	; 45
    4f3a:	80 81       	ld	r24, Z
    4f3c:	90 e0       	ldi	r25, 0x00	; 0
    4f3e:	38 81       	ld	r19, Y
    4f40:	dc 01       	movw	r26, r24
    4f42:	ad 5b       	subi	r26, 0xBD	; 189
    4f44:	b3 4d       	sbci	r27, 0xD3	; 211
    4f46:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    4f48:	01 96       	adiw	r24, 0x01	; 1
    4f4a:	6e ef       	ldi	r22, 0xFE	; 254
    4f4c:	70 e0       	ldi	r23, 0x00	; 0
    4f4e:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__divmodhi4>
    4f52:	80 83       	st	Z, r24
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    4f54:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    4f56:	21 96       	adiw	r28, 0x01	; 1
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    4f58:	21 17       	cp	r18, r17
    4f5a:	68 f3       	brcs	.-38     	; 0x4f36 <send_USART+0x22>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    4f5c:	e0 e0       	ldi	r30, 0x00	; 0
    4f5e:	f8 e0       	ldi	r31, 0x08	; 8
    4f60:	85 81       	ldd	r24, Z+5	; 0x05
    4f62:	80 62       	ori	r24, 0x20	; 32
    4f64:	85 83       	std	Z+5, r24	; 0x05
			USART0_ticks = 0;
    4f66:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <USART0_ticks>
    4f6a:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <USART0_ticks+0x1>
			while (send0_buf.done == NO) {
    4f6e:	0b c0       	rjmp	.+22     	; 0x4f86 <send_USART+0x72>
				if (USART0_ticks > 100) {				// 1 second enough?
    4f70:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    4f74:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    4f78:	85 36       	cpi	r24, 0x65	; 101
    4f7a:	91 05       	cpc	r25, r1
    4f7c:	20 f0       	brcs	.+8      	; 0x4f86 <send_USART+0x72>
					send0_buf.done = YES;
    4f7e:	81 e0       	ldi	r24, 0x01	; 1
    4f80:	80 93 46 2d 	sts	0x2D46, r24	; 0x802d46 <send0_buf+0x103>
					return;
    4f84:	5c c0       	rjmp	.+184    	; 0x503e <send_USART+0x12a>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			USART0_ticks = 0;
			while (send0_buf.done == NO) {
    4f86:	80 91 46 2d 	lds	r24, 0x2D46	; 0x802d46 <send0_buf+0x103>
    4f8a:	88 23       	and	r24, r24
    4f8c:	89 f3       	breq	.-30     	; 0x4f70 <send_USART+0x5c>
    4f8e:	57 c0       	rjmp	.+174    	; 0x503e <send_USART+0x12a>
				}
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
    4f90:	64 2f       	mov	r22, r20
    4f92:	70 e0       	ldi	r23, 0x00	; 0
    4f94:	ce 01       	movw	r24, r28
    4f96:	0e 94 20 16 	call	0x2c40	; 0x2c40 <crc16>
    4f9a:	48 2f       	mov	r20, r24
    4f9c:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    4f9e:	20 e0       	ldi	r18, 0x00	; 0
    4fa0:	11 c0       	rjmp	.+34     	; 0x4fc4 <send_USART+0xb0>
				send1_buf.data[send1_buf.head] = *data++;
    4fa2:	ed e4       	ldi	r30, 0x4D	; 77
    4fa4:	f0 e3       	ldi	r31, 0x30	; 48
    4fa6:	80 81       	ld	r24, Z
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	38 81       	ld	r19, Y
    4fac:	dc 01       	movw	r26, r24
    4fae:	a1 5b       	subi	r26, 0xB1	; 177
    4fb0:	b0 4d       	sbci	r27, 0xD0	; 208
    4fb2:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    4fb4:	01 96       	adiw	r24, 0x01	; 1
    4fb6:	6e ef       	ldi	r22, 0xFE	; 254
    4fb8:	70 e0       	ldi	r23, 0x00	; 0
    4fba:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__divmodhi4>
    4fbe:	80 83       	st	Z, r24
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    4fc0:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    4fc2:	21 96       	adiw	r28, 0x01	; 1
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    4fc4:	21 17       	cp	r18, r17
    4fc6:	68 f3       	brcs	.-38     	; 0x4fa2 <send_USART+0x8e>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    4fc8:	ed e4       	ldi	r30, 0x4D	; 77
    4fca:	f0 e3       	ldi	r31, 0x30	; 48
    4fcc:	80 81       	ld	r24, Z
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	dc 01       	movw	r26, r24
    4fd2:	a1 5b       	subi	r26, 0xB1	; 177
    4fd4:	b0 4d       	sbci	r27, 0xD0	; 208
    4fd6:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    4fd8:	01 96       	adiw	r24, 0x01	; 1
    4fda:	2e ef       	ldi	r18, 0xFE	; 254
    4fdc:	30 e0       	ldi	r19, 0x00	; 0
    4fde:	b9 01       	movw	r22, r18
    4fe0:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
    4fe6:	dc 01       	movw	r26, r24
    4fe8:	a1 5b       	subi	r26, 0xB1	; 177
    4fea:	b0 4d       	sbci	r27, 0xD0	; 208
    4fec:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    4fee:	01 96       	adiw	r24, 0x01	; 1
    4ff0:	b9 01       	movw	r22, r18
    4ff2:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__divmodhi4>
    4ff6:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    4ff8:	1e 5f       	subi	r17, 0xFE	; 254
    4ffa:	10 93 4f 30 	sts	0x304F, r17	; 0x80304f <send1_buf+0x100>
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    4ffe:	e0 e2       	ldi	r30, 0x20	; 32
    5000:	f8 e0       	ldi	r31, 0x08	; 8
    5002:	85 81       	ldd	r24, Z+5	; 0x05
    5004:	80 62       	ori	r24, 0x20	; 32
    5006:	85 83       	std	Z+5, r24	; 0x05
			break;
    5008:	1a c0       	rjmp	.+52     	; 0x503e <send_USART+0x12a>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    500a:	e9 e4       	ldi	r30, 0x49	; 73
    500c:	ff e2       	ldi	r31, 0x2F	; 47
    500e:	80 81       	ld	r24, Z
    5010:	90 e0       	ldi	r25, 0x00	; 0
    5012:	38 81       	ld	r19, Y
    5014:	dc 01       	movw	r26, r24
    5016:	a5 5b       	subi	r26, 0xB5	; 181
    5018:	b1 4d       	sbci	r27, 0xD1	; 209
    501a:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    501c:	01 96       	adiw	r24, 0x01	; 1
    501e:	6e ef       	ldi	r22, 0xFE	; 254
    5020:	70 e0       	ldi	r23, 0x00	; 0
    5022:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__divmodhi4>
    5026:	80 83       	st	Z, r24
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    5028:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    502a:	21 96       	adiw	r28, 0x01	; 1
    502c:	01 c0       	rjmp	.+2      	; 0x5030 <send_USART+0x11c>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    502e:	20 e0       	ldi	r18, 0x00	; 0
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    5030:	21 17       	cp	r18, r17
    5032:	58 f3       	brcs	.-42     	; 0x500a <send_USART+0xf6>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    5034:	e0 e6       	ldi	r30, 0x60	; 96
    5036:	f8 e0       	ldi	r31, 0x08	; 8
    5038:	85 81       	ldd	r24, Z+5	; 0x05
    503a:	80 62       	ori	r24, 0x20	; 32
    503c:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    503e:	df 91       	pop	r29
    5040:	cf 91       	pop	r28
    5042:	1f 91       	pop	r17
    5044:	0f 91       	pop	r16
    5046:	08 95       	ret

00005048 <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    5048:	1f 92       	push	r1
    504a:	0f 92       	push	r0
    504c:	0f b6       	in	r0, 0x3f	; 63
    504e:	0f 92       	push	r0
    5050:	11 24       	eor	r1, r1
    5052:	5f 93       	push	r21
    5054:	6f 93       	push	r22
    5056:	7f 93       	push	r23
    5058:	8f 93       	push	r24
    505a:	9f 93       	push	r25
    505c:	af 93       	push	r26
    505e:	bf 93       	push	r27
    5060:	ef 93       	push	r30
    5062:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    5064:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if (recv0_buf.length < (BUFSIZE-1)) {		// BUFSIZE-1 to make room for the terminating \0
    5068:	80 91 40 2c 	lds	r24, 0x2C40	; 0x802c40 <recv0_buf+0x101>
    506c:	8d 3f       	cpi	r24, 0xFD	; 253
    506e:	10 f5       	brcc	.+68     	; 0x50b4 <__vector_17+0x6c>
//		c = USART0.RXDATAL;
		if ((char) c == '\r') {
    5070:	9d 30       	cpi	r25, 0x0D	; 13
    5072:	51 f4       	brne	.+20     	; 0x5088 <__vector_17+0x40>
			recv0_buf.done = YES;
    5074:	81 e0       	ldi	r24, 0x01	; 1
    5076:	80 93 42 2c 	sts	0x2C42, r24	; 0x802c42 <recv0_buf+0x103>
			recv0_buf.data[recv0_buf.head] = '\0';
    507a:	e0 91 3d 2c 	lds	r30, 0x2C3D	; 0x802c3d <recv0_buf+0xfe>
    507e:	f0 e0       	ldi	r31, 0x00	; 0
    5080:	e1 5c       	subi	r30, 0xC1	; 193
    5082:	f4 4d       	sbci	r31, 0xD4	; 212
    5084:	10 82       	st	Z, r1
    5086:	06 c0       	rjmp	.+12     	; 0x5094 <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    5088:	e0 91 3d 2c 	lds	r30, 0x2C3D	; 0x802c3d <recv0_buf+0xfe>
    508c:	f0 e0       	ldi	r31, 0x00	; 0
    508e:	e1 5c       	subi	r30, 0xC1	; 193
    5090:	f4 4d       	sbci	r31, 0xD4	; 212
    5092:	90 83       	st	Z, r25
		}
		recv0_buf.length++;
    5094:	e0 e4       	ldi	r30, 0x40	; 64
    5096:	fc e2       	ldi	r31, 0x2C	; 44
    5098:	80 81       	ld	r24, Z
    509a:	8f 5f       	subi	r24, 0xFF	; 255
    509c:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    509e:	ed e3       	ldi	r30, 0x3D	; 61
    50a0:	fc e2       	ldi	r31, 0x2C	; 44
    50a2:	80 81       	ld	r24, Z
    50a4:	90 e0       	ldi	r25, 0x00	; 0
    50a6:	01 96       	adiw	r24, 0x01	; 1
    50a8:	6e ef       	ldi	r22, 0xFE	; 254
    50aa:	70 e0       	ldi	r23, 0x00	; 0
    50ac:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <__divmodhi4>
    50b0:	80 83       	st	Z, r24
    50b2:	0a c0       	rjmp	.+20     	; 0x50c8 <__vector_17+0x80>
	} else {
		recv0_buf.head = 0;
    50b4:	10 92 3d 2c 	sts	0x2C3D, r1	; 0x802c3d <recv0_buf+0xfe>
		recv0_buf.tail = 0;
    50b8:	10 92 3e 2c 	sts	0x2C3E, r1	; 0x802c3e <recv0_buf+0xff>
		recv0_buf.data[0] = '\0';
    50bc:	10 92 3f 2b 	sts	0x2B3F, r1	; 0x802b3f <recv0_buf>
		recv0_buf.length = 0;
    50c0:	10 92 40 2c 	sts	0x2C40, r1	; 0x802c40 <recv0_buf+0x101>
		recv0_buf.done = NO;
    50c4:	10 92 42 2c 	sts	0x2C42, r1	; 0x802c42 <recv0_buf+0x103>
	}
}
    50c8:	ff 91       	pop	r31
    50ca:	ef 91       	pop	r30
    50cc:	bf 91       	pop	r27
    50ce:	af 91       	pop	r26
    50d0:	9f 91       	pop	r25
    50d2:	8f 91       	pop	r24
    50d4:	7f 91       	pop	r23
    50d6:	6f 91       	pop	r22
    50d8:	5f 91       	pop	r21
    50da:	0f 90       	pop	r0
    50dc:	0f be       	out	0x3f, r0	; 63
    50de:	0f 90       	pop	r0
    50e0:	1f 90       	pop	r1
    50e2:	18 95       	reti

000050e4 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    50e4:	1f 92       	push	r1
    50e6:	0f 92       	push	r0
    50e8:	0f b6       	in	r0, 0x3f	; 63
    50ea:	0f 92       	push	r0
    50ec:	11 24       	eor	r1, r1
    50ee:	2f 93       	push	r18
    50f0:	8f 93       	push	r24
    50f2:	9f 93       	push	r25
    50f4:	ef 93       	push	r30
    50f6:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    50f8:	e0 e0       	ldi	r30, 0x00	; 0
    50fa:	f8 e0       	ldi	r31, 0x08	; 8
    50fc:	85 81       	ldd	r24, Z+5	; 0x05
    50fe:	8f 7d       	andi	r24, 0xDF	; 223
    5100:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    5102:	80 91 41 2d 	lds	r24, 0x2D41	; 0x802d41 <send0_buf+0xfe>
    5106:	e0 91 42 2d 	lds	r30, 0x2D42	; 0x802d42 <send0_buf+0xff>
    510a:	8e 17       	cp	r24, r30
    510c:	d1 f0       	breq	.+52     	; 0x5142 <__vector_18+0x5e>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    510e:	81 e0       	ldi	r24, 0x01	; 1
    5110:	8e 0f       	add	r24, r30
    5112:	80 93 42 2d 	sts	0x2D42, r24	; 0x802d42 <send0_buf+0xff>
    5116:	f0 e0       	ldi	r31, 0x00	; 0
    5118:	ed 5b       	subi	r30, 0xBD	; 189
    511a:	f3 4d       	sbci	r31, 0xD3	; 211
    511c:	90 81       	ld	r25, Z
    511e:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    5122:	91 e0       	ldi	r25, 0x01	; 1
    5124:	8e 3f       	cpi	r24, 0xFE	; 254
    5126:	08 f4       	brcc	.+2      	; 0x512a <__vector_18+0x46>
    5128:	90 e0       	ldi	r25, 0x00	; 0
    512a:	91 95       	neg	r25
    512c:	29 2f       	mov	r18, r25
    512e:	22 0f       	add	r18, r18
    5130:	82 1b       	sub	r24, r18
    5132:	80 93 42 2d 	sts	0x2D42, r24	; 0x802d42 <send0_buf+0xff>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    5136:	e0 e0       	ldi	r30, 0x00	; 0
    5138:	f8 e0       	ldi	r31, 0x08	; 8
    513a:	85 81       	ldd	r24, Z+5	; 0x05
    513c:	80 62       	ori	r24, 0x20	; 32
    513e:	85 83       	std	Z+5, r24	; 0x05
    5140:	03 c0       	rjmp	.+6      	; 0x5148 <__vector_18+0x64>
	} else {
		send0_buf.done = YES;
    5142:	81 e0       	ldi	r24, 0x01	; 1
    5144:	80 93 46 2d 	sts	0x2D46, r24	; 0x802d46 <send0_buf+0x103>
	}

}
    5148:	ff 91       	pop	r31
    514a:	ef 91       	pop	r30
    514c:	9f 91       	pop	r25
    514e:	8f 91       	pop	r24
    5150:	2f 91       	pop	r18
    5152:	0f 90       	pop	r0
    5154:	0f be       	out	0x3f, r0	; 63
    5156:	0f 90       	pop	r0
    5158:	1f 90       	pop	r1
    515a:	18 95       	reti

0000515c <__vector_26>:
/*------------------------------------------------------------------------------
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    515c:	1f 92       	push	r1
    515e:	0f 92       	push	r0
    5160:	0f b6       	in	r0, 0x3f	; 63
    5162:	0f 92       	push	r0
    5164:	11 24       	eor	r1, r1
    5166:	2f 93       	push	r18
    5168:	8f 93       	push	r24
    516a:	9f 93       	push	r25
    516c:	ef 93       	push	r30
    516e:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    5170:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>

	if (recv1_buf.nxfrd < recv1_buf.nbytes) {
    5174:	e0 91 3d 2b 	lds	r30, 0x2B3D	; 0x802b3d <recv1_buf+0x102>
    5178:	80 91 3b 2b 	lds	r24, 0x2B3B	; 0x802b3b <recv1_buf+0x100>
    517c:	e8 17       	cp	r30, r24
    517e:	40 f4       	brcc	.+16     	; 0x5190 <__vector_26+0x34>
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    5180:	21 e0       	ldi	r18, 0x01	; 1
    5182:	2e 0f       	add	r18, r30
    5184:	20 93 3d 2b 	sts	0x2B3D, r18	; 0x802b3d <recv1_buf+0x102>
    5188:	f0 e0       	ldi	r31, 0x00	; 0
    518a:	e5 5c       	subi	r30, 0xC5	; 197
    518c:	f5 4d       	sbci	r31, 0xD5	; 213
    518e:	90 83       	st	Z, r25
	}

	if (recv1_buf.nxfrd >= recv1_buf.nbytes) {
    5190:	90 91 3d 2b 	lds	r25, 0x2B3D	; 0x802b3d <recv1_buf+0x102>
    5194:	98 17       	cp	r25, r24
    5196:	18 f0       	brcs	.+6      	; 0x519e <__vector_26+0x42>
		recv1_buf.done = YES;
    5198:	81 e0       	ldi	r24, 0x01	; 1
    519a:	80 93 3e 2b 	sts	0x2B3E, r24	; 0x802b3e <recv1_buf+0x103>
	}

}
    519e:	ff 91       	pop	r31
    51a0:	ef 91       	pop	r30
    51a2:	9f 91       	pop	r25
    51a4:	8f 91       	pop	r24
    51a6:	2f 91       	pop	r18
    51a8:	0f 90       	pop	r0
    51aa:	0f be       	out	0x3f, r0	; 63
    51ac:	0f 90       	pop	r0
    51ae:	1f 90       	pop	r1
    51b0:	18 95       	reti

000051b2 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    51b2:	1f 92       	push	r1
    51b4:	0f 92       	push	r0
    51b6:	0f b6       	in	r0, 0x3f	; 63
    51b8:	0f 92       	push	r0
    51ba:	11 24       	eor	r1, r1
    51bc:	2f 93       	push	r18
    51be:	8f 93       	push	r24
    51c0:	9f 93       	push	r25
    51c2:	ef 93       	push	r30
    51c4:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    51c6:	e0 e2       	ldi	r30, 0x20	; 32
    51c8:	f8 e0       	ldi	r31, 0x08	; 8
    51ca:	85 81       	ldd	r24, Z+5	; 0x05
    51cc:	8f 7d       	andi	r24, 0xDF	; 223
    51ce:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    51d0:	80 91 4d 30 	lds	r24, 0x304D	; 0x80304d <send1_buf+0xfe>
    51d4:	e0 91 4e 30 	lds	r30, 0x304E	; 0x80304e <send1_buf+0xff>
    51d8:	8e 17       	cp	r24, r30
    51da:	d1 f0       	breq	.+52     	; 0x5210 <__vector_27+0x5e>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    51dc:	81 e0       	ldi	r24, 0x01	; 1
    51de:	8e 0f       	add	r24, r30
    51e0:	80 93 4e 30 	sts	0x304E, r24	; 0x80304e <send1_buf+0xff>
    51e4:	f0 e0       	ldi	r31, 0x00	; 0
    51e6:	e1 5b       	subi	r30, 0xB1	; 177
    51e8:	f0 4d       	sbci	r31, 0xD0	; 208
    51ea:	90 81       	ld	r25, Z
    51ec:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    51f0:	91 e0       	ldi	r25, 0x01	; 1
    51f2:	8e 3f       	cpi	r24, 0xFE	; 254
    51f4:	08 f4       	brcc	.+2      	; 0x51f8 <__vector_27+0x46>
    51f6:	90 e0       	ldi	r25, 0x00	; 0
    51f8:	91 95       	neg	r25
    51fa:	29 2f       	mov	r18, r25
    51fc:	22 0f       	add	r18, r18
    51fe:	82 1b       	sub	r24, r18
    5200:	80 93 4e 30 	sts	0x304E, r24	; 0x80304e <send1_buf+0xff>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    5204:	e0 e2       	ldi	r30, 0x20	; 32
    5206:	f8 e0       	ldi	r31, 0x08	; 8
    5208:	85 81       	ldd	r24, Z+5	; 0x05
    520a:	80 62       	ori	r24, 0x20	; 32
    520c:	85 83       	std	Z+5, r24	; 0x05
    520e:	03 c0       	rjmp	.+6      	; 0x5216 <__vector_27+0x64>
	} else {
		send1_buf.done = YES;
    5210:	81 e0       	ldi	r24, 0x01	; 1
    5212:	80 93 52 30 	sts	0x3052, r24	; 0x803052 <send1_buf+0x103>
	}

}
    5216:	ff 91       	pop	r31
    5218:	ef 91       	pop	r30
    521a:	9f 91       	pop	r25
    521c:	8f 91       	pop	r24
    521e:	2f 91       	pop	r18
    5220:	0f 90       	pop	r0
    5222:	0f be       	out	0x3f, r0	; 63
    5224:	0f 90       	pop	r0
    5226:	1f 90       	pop	r1
    5228:	18 95       	reti

0000522a <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    522a:	1f 92       	push	r1
    522c:	0f 92       	push	r0
    522e:	0f b6       	in	r0, 0x3f	; 63
    5230:	0f 92       	push	r0
    5232:	11 24       	eor	r1, r1
    5234:	8f 93       	push	r24
    5236:	9f 93       	push	r25
    5238:	af 93       	push	r26
    523a:	bf 93       	push	r27
    523c:	ef 93       	push	r30
    523e:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    5240:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    5244:	8d 30       	cpi	r24, 0x0D	; 13
    5246:	21 f0       	breq	.+8      	; 0x5250 <__vector_37+0x26>
    5248:	e0 91 49 2e 	lds	r30, 0x2E49	; 0x802e49 <recv3_buf+0x102>
    524c:	ed 3f       	cpi	r30, 0xFD	; 253
    524e:	78 f0       	brcs	.+30     	; 0x526e <__vector_37+0x44>
		recv3_buf.done = YES;
    5250:	81 e0       	ldi	r24, 0x01	; 1
    5252:	80 93 4a 2e 	sts	0x2E4A, r24	; 0x802e4a <recv3_buf+0x103>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    5256:	a9 e4       	ldi	r26, 0x49	; 73
    5258:	be e2       	ldi	r27, 0x2E	; 46
    525a:	8c 91       	ld	r24, X
    525c:	e8 2f       	mov	r30, r24
    525e:	f0 e0       	ldi	r31, 0x00	; 0
    5260:	e9 5b       	subi	r30, 0xB9	; 185
    5262:	f2 4d       	sbci	r31, 0xD2	; 210
    5264:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    5266:	80 93 47 2e 	sts	0x2E47, r24	; 0x802e47 <recv3_buf+0x100>
		recv3_buf.nxfrd = 0;
    526a:	1c 92       	st	X, r1
		return;
    526c:	08 c0       	rjmp	.+16     	; 0x527e <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    526e:	91 e0       	ldi	r25, 0x01	; 1
    5270:	9e 0f       	add	r25, r30
    5272:	90 93 49 2e 	sts	0x2E49, r25	; 0x802e49 <recv3_buf+0x102>
    5276:	f0 e0       	ldi	r31, 0x00	; 0
    5278:	e9 5b       	subi	r30, 0xB9	; 185
    527a:	f2 4d       	sbci	r31, 0xD2	; 210
    527c:	80 83       	st	Z, r24
	}

}
    527e:	ff 91       	pop	r31
    5280:	ef 91       	pop	r30
    5282:	bf 91       	pop	r27
    5284:	af 91       	pop	r26
    5286:	9f 91       	pop	r25
    5288:	8f 91       	pop	r24
    528a:	0f 90       	pop	r0
    528c:	0f be       	out	0x3f, r0	; 63
    528e:	0f 90       	pop	r0
    5290:	1f 90       	pop	r1
    5292:	18 95       	reti

00005294 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    5294:	1f 92       	push	r1
    5296:	0f 92       	push	r0
    5298:	0f b6       	in	r0, 0x3f	; 63
    529a:	0f 92       	push	r0
    529c:	11 24       	eor	r1, r1
    529e:	8f 93       	push	r24
    52a0:	9f 93       	push	r25
    52a2:	af 93       	push	r26
    52a4:	bf 93       	push	r27
    52a6:	ef 93       	push	r30
    52a8:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    52aa:	ad e4       	ldi	r26, 0x4D	; 77
    52ac:	bf e2       	ldi	r27, 0x2F	; 47
    52ae:	ec 91       	ld	r30, X
    52b0:	81 e0       	ldi	r24, 0x01	; 1
    52b2:	8e 0f       	add	r24, r30
    52b4:	8c 93       	st	X, r24
    52b6:	f0 e0       	ldi	r31, 0x00	; 0
    52b8:	e5 5b       	subi	r30, 0xB5	; 181
    52ba:	f1 4d       	sbci	r31, 0xD1	; 209
    52bc:	90 81       	ld	r25, Z
    52be:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    52c2:	90 91 4b 2f 	lds	r25, 0x2F4B	; 0x802f4b <send3_buf+0x100>
    52c6:	89 17       	cp	r24, r25
    52c8:	40 f0       	brcs	.+16     	; 0x52da <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    52ca:	e0 e6       	ldi	r30, 0x60	; 96
    52cc:	f8 e0       	ldi	r31, 0x08	; 8
    52ce:	85 81       	ldd	r24, Z+5	; 0x05
    52d0:	8f 7d       	andi	r24, 0xDF	; 223
    52d2:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    52d4:	81 e0       	ldi	r24, 0x01	; 1
    52d6:	80 93 4e 2f 	sts	0x2F4E, r24	; 0x802f4e <send3_buf+0x103>
	}

}
    52da:	ff 91       	pop	r31
    52dc:	ef 91       	pop	r30
    52de:	bf 91       	pop	r27
    52e0:	af 91       	pop	r26
    52e2:	9f 91       	pop	r25
    52e4:	8f 91       	pop	r24
    52e6:	0f 90       	pop	r0
    52e8:	0f be       	out	0x3f, r0	; 63
    52ea:	0f 90       	pop	r0
    52ec:	1f 90       	pop	r1
    52ee:	18 95       	reti

000052f0 <reboot>:
#include "wdt.h"

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
    52f0:	88 ed       	ldi	r24, 0xD8	; 216
    52f2:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    52f4:	81 e0       	ldi	r24, 0x01	; 1
    52f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    52fa:	08 95       	ret

000052fc <__vector_29>:

}

ISR(PORTF_PORT_vect)
{
    52fc:	1f 92       	push	r1
    52fe:	0f 92       	push	r0
    5300:	0f b6       	in	r0, 0x3f	; 63
    5302:	0f 92       	push	r0
    5304:	11 24       	eor	r1, r1
    5306:	2f 93       	push	r18
    5308:	3f 93       	push	r19
    530a:	4f 93       	push	r20
    530c:	5f 93       	push	r21
    530e:	6f 93       	push	r22
    5310:	7f 93       	push	r23
    5312:	8f 93       	push	r24
    5314:	9f 93       	push	r25
    5316:	af 93       	push	r26
    5318:	bf 93       	push	r27
    531a:	ef 93       	push	r30
    531c:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
    531e:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
    5322:	86 ff       	sbrs	r24, 6
    5324:	05 c0       	rjmp	.+10     	; 0x5330 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
    5326:	80 e4       	ldi	r24, 0x40	; 64
    5328:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
    532c:	0e 94 78 29 	call	0x52f0	; 0x52f0 <reboot>
	}

}
    5330:	ff 91       	pop	r31
    5332:	ef 91       	pop	r30
    5334:	bf 91       	pop	r27
    5336:	af 91       	pop	r26
    5338:	9f 91       	pop	r25
    533a:	8f 91       	pop	r24
    533c:	7f 91       	pop	r23
    533e:	6f 91       	pop	r22
    5340:	5f 91       	pop	r21
    5342:	4f 91       	pop	r20
    5344:	3f 91       	pop	r19
    5346:	2f 91       	pop	r18
    5348:	0f 90       	pop	r0
    534a:	0f be       	out	0x3f, r0	; 63
    534c:	0f 90       	pop	r0
    534e:	1f 90       	pop	r1
    5350:	18 95       	reti

00005352 <__subsf3>:
    5352:	50 58       	subi	r21, 0x80	; 128

00005354 <__addsf3>:
    5354:	bb 27       	eor	r27, r27
    5356:	aa 27       	eor	r26, r26
    5358:	0e 94 c1 29 	call	0x5382	; 0x5382 <__addsf3x>
    535c:	0c 94 3b 2b 	jmp	0x5676	; 0x5676 <__fp_round>
    5360:	0e 94 2d 2b 	call	0x565a	; 0x565a <__fp_pscA>
    5364:	38 f0       	brcs	.+14     	; 0x5374 <__addsf3+0x20>
    5366:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fp_pscB>
    536a:	20 f0       	brcs	.+8      	; 0x5374 <__addsf3+0x20>
    536c:	39 f4       	brne	.+14     	; 0x537c <__addsf3+0x28>
    536e:	9f 3f       	cpi	r25, 0xFF	; 255
    5370:	19 f4       	brne	.+6      	; 0x5378 <__addsf3+0x24>
    5372:	26 f4       	brtc	.+8      	; 0x537c <__addsf3+0x28>
    5374:	0c 94 2a 2b 	jmp	0x5654	; 0x5654 <__fp_nan>
    5378:	0e f4       	brtc	.+2      	; 0x537c <__addsf3+0x28>
    537a:	e0 95       	com	r30
    537c:	e7 fb       	bst	r30, 7
    537e:	0c 94 24 2b 	jmp	0x5648	; 0x5648 <__fp_inf>

00005382 <__addsf3x>:
    5382:	e9 2f       	mov	r30, r25
    5384:	0e 94 4c 2b 	call	0x5698	; 0x5698 <__fp_split3>
    5388:	58 f3       	brcs	.-42     	; 0x5360 <__addsf3+0xc>
    538a:	ba 17       	cp	r27, r26
    538c:	62 07       	cpc	r22, r18
    538e:	73 07       	cpc	r23, r19
    5390:	84 07       	cpc	r24, r20
    5392:	95 07       	cpc	r25, r21
    5394:	20 f0       	brcs	.+8      	; 0x539e <__addsf3x+0x1c>
    5396:	79 f4       	brne	.+30     	; 0x53b6 <__addsf3x+0x34>
    5398:	a6 f5       	brtc	.+104    	; 0x5402 <__addsf3x+0x80>
    539a:	0c 94 6e 2b 	jmp	0x56dc	; 0x56dc <__fp_zero>
    539e:	0e f4       	brtc	.+2      	; 0x53a2 <__addsf3x+0x20>
    53a0:	e0 95       	com	r30
    53a2:	0b 2e       	mov	r0, r27
    53a4:	ba 2f       	mov	r27, r26
    53a6:	a0 2d       	mov	r26, r0
    53a8:	0b 01       	movw	r0, r22
    53aa:	b9 01       	movw	r22, r18
    53ac:	90 01       	movw	r18, r0
    53ae:	0c 01       	movw	r0, r24
    53b0:	ca 01       	movw	r24, r20
    53b2:	a0 01       	movw	r20, r0
    53b4:	11 24       	eor	r1, r1
    53b6:	ff 27       	eor	r31, r31
    53b8:	59 1b       	sub	r21, r25
    53ba:	99 f0       	breq	.+38     	; 0x53e2 <__addsf3x+0x60>
    53bc:	59 3f       	cpi	r21, 0xF9	; 249
    53be:	50 f4       	brcc	.+20     	; 0x53d4 <__addsf3x+0x52>
    53c0:	50 3e       	cpi	r21, 0xE0	; 224
    53c2:	68 f1       	brcs	.+90     	; 0x541e <__addsf3x+0x9c>
    53c4:	1a 16       	cp	r1, r26
    53c6:	f0 40       	sbci	r31, 0x00	; 0
    53c8:	a2 2f       	mov	r26, r18
    53ca:	23 2f       	mov	r18, r19
    53cc:	34 2f       	mov	r19, r20
    53ce:	44 27       	eor	r20, r20
    53d0:	58 5f       	subi	r21, 0xF8	; 248
    53d2:	f3 cf       	rjmp	.-26     	; 0x53ba <__addsf3x+0x38>
    53d4:	46 95       	lsr	r20
    53d6:	37 95       	ror	r19
    53d8:	27 95       	ror	r18
    53da:	a7 95       	ror	r26
    53dc:	f0 40       	sbci	r31, 0x00	; 0
    53de:	53 95       	inc	r21
    53e0:	c9 f7       	brne	.-14     	; 0x53d4 <__addsf3x+0x52>
    53e2:	7e f4       	brtc	.+30     	; 0x5402 <__addsf3x+0x80>
    53e4:	1f 16       	cp	r1, r31
    53e6:	ba 0b       	sbc	r27, r26
    53e8:	62 0b       	sbc	r22, r18
    53ea:	73 0b       	sbc	r23, r19
    53ec:	84 0b       	sbc	r24, r20
    53ee:	ba f0       	brmi	.+46     	; 0x541e <__addsf3x+0x9c>
    53f0:	91 50       	subi	r25, 0x01	; 1
    53f2:	a1 f0       	breq	.+40     	; 0x541c <__addsf3x+0x9a>
    53f4:	ff 0f       	add	r31, r31
    53f6:	bb 1f       	adc	r27, r27
    53f8:	66 1f       	adc	r22, r22
    53fa:	77 1f       	adc	r23, r23
    53fc:	88 1f       	adc	r24, r24
    53fe:	c2 f7       	brpl	.-16     	; 0x53f0 <__addsf3x+0x6e>
    5400:	0e c0       	rjmp	.+28     	; 0x541e <__addsf3x+0x9c>
    5402:	ba 0f       	add	r27, r26
    5404:	62 1f       	adc	r22, r18
    5406:	73 1f       	adc	r23, r19
    5408:	84 1f       	adc	r24, r20
    540a:	48 f4       	brcc	.+18     	; 0x541e <__addsf3x+0x9c>
    540c:	87 95       	ror	r24
    540e:	77 95       	ror	r23
    5410:	67 95       	ror	r22
    5412:	b7 95       	ror	r27
    5414:	f7 95       	ror	r31
    5416:	9e 3f       	cpi	r25, 0xFE	; 254
    5418:	08 f0       	brcs	.+2      	; 0x541c <__addsf3x+0x9a>
    541a:	b0 cf       	rjmp	.-160    	; 0x537c <__addsf3+0x28>
    541c:	93 95       	inc	r25
    541e:	88 0f       	add	r24, r24
    5420:	08 f0       	brcs	.+2      	; 0x5424 <__addsf3x+0xa2>
    5422:	99 27       	eor	r25, r25
    5424:	ee 0f       	add	r30, r30
    5426:	97 95       	ror	r25
    5428:	87 95       	ror	r24
    542a:	08 95       	ret

0000542c <__cmpsf2>:
    542c:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fp_cmp>
    5430:	08 f4       	brcc	.+2      	; 0x5434 <__cmpsf2+0x8>
    5432:	81 e0       	ldi	r24, 0x01	; 1
    5434:	08 95       	ret

00005436 <__divsf3>:
    5436:	0e 94 2f 2a 	call	0x545e	; 0x545e <__divsf3x>
    543a:	0c 94 3b 2b 	jmp	0x5676	; 0x5676 <__fp_round>
    543e:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fp_pscB>
    5442:	58 f0       	brcs	.+22     	; 0x545a <__divsf3+0x24>
    5444:	0e 94 2d 2b 	call	0x565a	; 0x565a <__fp_pscA>
    5448:	40 f0       	brcs	.+16     	; 0x545a <__divsf3+0x24>
    544a:	29 f4       	brne	.+10     	; 0x5456 <__divsf3+0x20>
    544c:	5f 3f       	cpi	r21, 0xFF	; 255
    544e:	29 f0       	breq	.+10     	; 0x545a <__divsf3+0x24>
    5450:	0c 94 24 2b 	jmp	0x5648	; 0x5648 <__fp_inf>
    5454:	51 11       	cpse	r21, r1
    5456:	0c 94 6f 2b 	jmp	0x56de	; 0x56de <__fp_szero>
    545a:	0c 94 2a 2b 	jmp	0x5654	; 0x5654 <__fp_nan>

0000545e <__divsf3x>:
    545e:	0e 94 4c 2b 	call	0x5698	; 0x5698 <__fp_split3>
    5462:	68 f3       	brcs	.-38     	; 0x543e <__divsf3+0x8>

00005464 <__divsf3_pse>:
    5464:	99 23       	and	r25, r25
    5466:	b1 f3       	breq	.-20     	; 0x5454 <__divsf3+0x1e>
    5468:	55 23       	and	r21, r21
    546a:	91 f3       	breq	.-28     	; 0x5450 <__divsf3+0x1a>
    546c:	95 1b       	sub	r25, r21
    546e:	55 0b       	sbc	r21, r21
    5470:	bb 27       	eor	r27, r27
    5472:	aa 27       	eor	r26, r26
    5474:	62 17       	cp	r22, r18
    5476:	73 07       	cpc	r23, r19
    5478:	84 07       	cpc	r24, r20
    547a:	38 f0       	brcs	.+14     	; 0x548a <__divsf3_pse+0x26>
    547c:	9f 5f       	subi	r25, 0xFF	; 255
    547e:	5f 4f       	sbci	r21, 0xFF	; 255
    5480:	22 0f       	add	r18, r18
    5482:	33 1f       	adc	r19, r19
    5484:	44 1f       	adc	r20, r20
    5486:	aa 1f       	adc	r26, r26
    5488:	a9 f3       	breq	.-22     	; 0x5474 <__divsf3_pse+0x10>
    548a:	35 d0       	rcall	.+106    	; 0x54f6 <__divsf3_pse+0x92>
    548c:	0e 2e       	mov	r0, r30
    548e:	3a f0       	brmi	.+14     	; 0x549e <__divsf3_pse+0x3a>
    5490:	e0 e8       	ldi	r30, 0x80	; 128
    5492:	32 d0       	rcall	.+100    	; 0x54f8 <__divsf3_pse+0x94>
    5494:	91 50       	subi	r25, 0x01	; 1
    5496:	50 40       	sbci	r21, 0x00	; 0
    5498:	e6 95       	lsr	r30
    549a:	00 1c       	adc	r0, r0
    549c:	ca f7       	brpl	.-14     	; 0x5490 <__divsf3_pse+0x2c>
    549e:	2b d0       	rcall	.+86     	; 0x54f6 <__divsf3_pse+0x92>
    54a0:	fe 2f       	mov	r31, r30
    54a2:	29 d0       	rcall	.+82     	; 0x54f6 <__divsf3_pse+0x92>
    54a4:	66 0f       	add	r22, r22
    54a6:	77 1f       	adc	r23, r23
    54a8:	88 1f       	adc	r24, r24
    54aa:	bb 1f       	adc	r27, r27
    54ac:	26 17       	cp	r18, r22
    54ae:	37 07       	cpc	r19, r23
    54b0:	48 07       	cpc	r20, r24
    54b2:	ab 07       	cpc	r26, r27
    54b4:	b0 e8       	ldi	r27, 0x80	; 128
    54b6:	09 f0       	breq	.+2      	; 0x54ba <__divsf3_pse+0x56>
    54b8:	bb 0b       	sbc	r27, r27
    54ba:	80 2d       	mov	r24, r0
    54bc:	bf 01       	movw	r22, r30
    54be:	ff 27       	eor	r31, r31
    54c0:	93 58       	subi	r25, 0x83	; 131
    54c2:	5f 4f       	sbci	r21, 0xFF	; 255
    54c4:	3a f0       	brmi	.+14     	; 0x54d4 <__divsf3_pse+0x70>
    54c6:	9e 3f       	cpi	r25, 0xFE	; 254
    54c8:	51 05       	cpc	r21, r1
    54ca:	78 f0       	brcs	.+30     	; 0x54ea <__divsf3_pse+0x86>
    54cc:	0c 94 24 2b 	jmp	0x5648	; 0x5648 <__fp_inf>
    54d0:	0c 94 6f 2b 	jmp	0x56de	; 0x56de <__fp_szero>
    54d4:	5f 3f       	cpi	r21, 0xFF	; 255
    54d6:	e4 f3       	brlt	.-8      	; 0x54d0 <__divsf3_pse+0x6c>
    54d8:	98 3e       	cpi	r25, 0xE8	; 232
    54da:	d4 f3       	brlt	.-12     	; 0x54d0 <__divsf3_pse+0x6c>
    54dc:	86 95       	lsr	r24
    54de:	77 95       	ror	r23
    54e0:	67 95       	ror	r22
    54e2:	b7 95       	ror	r27
    54e4:	f7 95       	ror	r31
    54e6:	9f 5f       	subi	r25, 0xFF	; 255
    54e8:	c9 f7       	brne	.-14     	; 0x54dc <__divsf3_pse+0x78>
    54ea:	88 0f       	add	r24, r24
    54ec:	91 1d       	adc	r25, r1
    54ee:	96 95       	lsr	r25
    54f0:	87 95       	ror	r24
    54f2:	97 f9       	bld	r25, 7
    54f4:	08 95       	ret
    54f6:	e1 e0       	ldi	r30, 0x01	; 1
    54f8:	66 0f       	add	r22, r22
    54fa:	77 1f       	adc	r23, r23
    54fc:	88 1f       	adc	r24, r24
    54fe:	bb 1f       	adc	r27, r27
    5500:	62 17       	cp	r22, r18
    5502:	73 07       	cpc	r23, r19
    5504:	84 07       	cpc	r24, r20
    5506:	ba 07       	cpc	r27, r26
    5508:	20 f0       	brcs	.+8      	; 0x5512 <__divsf3_pse+0xae>
    550a:	62 1b       	sub	r22, r18
    550c:	73 0b       	sbc	r23, r19
    550e:	84 0b       	sbc	r24, r20
    5510:	ba 0b       	sbc	r27, r26
    5512:	ee 1f       	adc	r30, r30
    5514:	88 f7       	brcc	.-30     	; 0x54f8 <__divsf3_pse+0x94>
    5516:	e0 95       	com	r30
    5518:	08 95       	ret

0000551a <__fixsfsi>:
    551a:	0e 94 94 2a 	call	0x5528	; 0x5528 <__fixunssfsi>
    551e:	68 94       	set
    5520:	b1 11       	cpse	r27, r1
    5522:	0c 94 6f 2b 	jmp	0x56de	; 0x56de <__fp_szero>
    5526:	08 95       	ret

00005528 <__fixunssfsi>:
    5528:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__fp_splitA>
    552c:	88 f0       	brcs	.+34     	; 0x5550 <__fixunssfsi+0x28>
    552e:	9f 57       	subi	r25, 0x7F	; 127
    5530:	98 f0       	brcs	.+38     	; 0x5558 <__fixunssfsi+0x30>
    5532:	b9 2f       	mov	r27, r25
    5534:	99 27       	eor	r25, r25
    5536:	b7 51       	subi	r27, 0x17	; 23
    5538:	b0 f0       	brcs	.+44     	; 0x5566 <__fixunssfsi+0x3e>
    553a:	e1 f0       	breq	.+56     	; 0x5574 <__fixunssfsi+0x4c>
    553c:	66 0f       	add	r22, r22
    553e:	77 1f       	adc	r23, r23
    5540:	88 1f       	adc	r24, r24
    5542:	99 1f       	adc	r25, r25
    5544:	1a f0       	brmi	.+6      	; 0x554c <__fixunssfsi+0x24>
    5546:	ba 95       	dec	r27
    5548:	c9 f7       	brne	.-14     	; 0x553c <__fixunssfsi+0x14>
    554a:	14 c0       	rjmp	.+40     	; 0x5574 <__fixunssfsi+0x4c>
    554c:	b1 30       	cpi	r27, 0x01	; 1
    554e:	91 f0       	breq	.+36     	; 0x5574 <__fixunssfsi+0x4c>
    5550:	0e 94 6e 2b 	call	0x56dc	; 0x56dc <__fp_zero>
    5554:	b1 e0       	ldi	r27, 0x01	; 1
    5556:	08 95       	ret
    5558:	0c 94 6e 2b 	jmp	0x56dc	; 0x56dc <__fp_zero>
    555c:	67 2f       	mov	r22, r23
    555e:	78 2f       	mov	r23, r24
    5560:	88 27       	eor	r24, r24
    5562:	b8 5f       	subi	r27, 0xF8	; 248
    5564:	39 f0       	breq	.+14     	; 0x5574 <__fixunssfsi+0x4c>
    5566:	b9 3f       	cpi	r27, 0xF9	; 249
    5568:	cc f3       	brlt	.-14     	; 0x555c <__fixunssfsi+0x34>
    556a:	86 95       	lsr	r24
    556c:	77 95       	ror	r23
    556e:	67 95       	ror	r22
    5570:	b3 95       	inc	r27
    5572:	d9 f7       	brne	.-10     	; 0x556a <__fixunssfsi+0x42>
    5574:	3e f4       	brtc	.+14     	; 0x5584 <__fixunssfsi+0x5c>
    5576:	90 95       	com	r25
    5578:	80 95       	com	r24
    557a:	70 95       	com	r23
    557c:	61 95       	neg	r22
    557e:	7f 4f       	sbci	r23, 0xFF	; 255
    5580:	8f 4f       	sbci	r24, 0xFF	; 255
    5582:	9f 4f       	sbci	r25, 0xFF	; 255
    5584:	08 95       	ret

00005586 <__floatunsisf>:
    5586:	e8 94       	clt
    5588:	09 c0       	rjmp	.+18     	; 0x559c <__floatsisf+0x12>

0000558a <__floatsisf>:
    558a:	97 fb       	bst	r25, 7
    558c:	3e f4       	brtc	.+14     	; 0x559c <__floatsisf+0x12>
    558e:	90 95       	com	r25
    5590:	80 95       	com	r24
    5592:	70 95       	com	r23
    5594:	61 95       	neg	r22
    5596:	7f 4f       	sbci	r23, 0xFF	; 255
    5598:	8f 4f       	sbci	r24, 0xFF	; 255
    559a:	9f 4f       	sbci	r25, 0xFF	; 255
    559c:	99 23       	and	r25, r25
    559e:	a9 f0       	breq	.+42     	; 0x55ca <__floatsisf+0x40>
    55a0:	f9 2f       	mov	r31, r25
    55a2:	96 e9       	ldi	r25, 0x96	; 150
    55a4:	bb 27       	eor	r27, r27
    55a6:	93 95       	inc	r25
    55a8:	f6 95       	lsr	r31
    55aa:	87 95       	ror	r24
    55ac:	77 95       	ror	r23
    55ae:	67 95       	ror	r22
    55b0:	b7 95       	ror	r27
    55b2:	f1 11       	cpse	r31, r1
    55b4:	f8 cf       	rjmp	.-16     	; 0x55a6 <__floatsisf+0x1c>
    55b6:	fa f4       	brpl	.+62     	; 0x55f6 <__floatsisf+0x6c>
    55b8:	bb 0f       	add	r27, r27
    55ba:	11 f4       	brne	.+4      	; 0x55c0 <__floatsisf+0x36>
    55bc:	60 ff       	sbrs	r22, 0
    55be:	1b c0       	rjmp	.+54     	; 0x55f6 <__floatsisf+0x6c>
    55c0:	6f 5f       	subi	r22, 0xFF	; 255
    55c2:	7f 4f       	sbci	r23, 0xFF	; 255
    55c4:	8f 4f       	sbci	r24, 0xFF	; 255
    55c6:	9f 4f       	sbci	r25, 0xFF	; 255
    55c8:	16 c0       	rjmp	.+44     	; 0x55f6 <__floatsisf+0x6c>
    55ca:	88 23       	and	r24, r24
    55cc:	11 f0       	breq	.+4      	; 0x55d2 <__floatsisf+0x48>
    55ce:	96 e9       	ldi	r25, 0x96	; 150
    55d0:	11 c0       	rjmp	.+34     	; 0x55f4 <__floatsisf+0x6a>
    55d2:	77 23       	and	r23, r23
    55d4:	21 f0       	breq	.+8      	; 0x55de <__floatsisf+0x54>
    55d6:	9e e8       	ldi	r25, 0x8E	; 142
    55d8:	87 2f       	mov	r24, r23
    55da:	76 2f       	mov	r23, r22
    55dc:	05 c0       	rjmp	.+10     	; 0x55e8 <__floatsisf+0x5e>
    55de:	66 23       	and	r22, r22
    55e0:	71 f0       	breq	.+28     	; 0x55fe <__floatsisf+0x74>
    55e2:	96 e8       	ldi	r25, 0x86	; 134
    55e4:	86 2f       	mov	r24, r22
    55e6:	70 e0       	ldi	r23, 0x00	; 0
    55e8:	60 e0       	ldi	r22, 0x00	; 0
    55ea:	2a f0       	brmi	.+10     	; 0x55f6 <__floatsisf+0x6c>
    55ec:	9a 95       	dec	r25
    55ee:	66 0f       	add	r22, r22
    55f0:	77 1f       	adc	r23, r23
    55f2:	88 1f       	adc	r24, r24
    55f4:	da f7       	brpl	.-10     	; 0x55ec <__floatsisf+0x62>
    55f6:	88 0f       	add	r24, r24
    55f8:	96 95       	lsr	r25
    55fa:	87 95       	ror	r24
    55fc:	97 f9       	bld	r25, 7
    55fe:	08 95       	ret

00005600 <__fp_cmp>:
    5600:	99 0f       	add	r25, r25
    5602:	00 08       	sbc	r0, r0
    5604:	55 0f       	add	r21, r21
    5606:	aa 0b       	sbc	r26, r26
    5608:	e0 e8       	ldi	r30, 0x80	; 128
    560a:	fe ef       	ldi	r31, 0xFE	; 254
    560c:	16 16       	cp	r1, r22
    560e:	17 06       	cpc	r1, r23
    5610:	e8 07       	cpc	r30, r24
    5612:	f9 07       	cpc	r31, r25
    5614:	c0 f0       	brcs	.+48     	; 0x5646 <__fp_cmp+0x46>
    5616:	12 16       	cp	r1, r18
    5618:	13 06       	cpc	r1, r19
    561a:	e4 07       	cpc	r30, r20
    561c:	f5 07       	cpc	r31, r21
    561e:	98 f0       	brcs	.+38     	; 0x5646 <__fp_cmp+0x46>
    5620:	62 1b       	sub	r22, r18
    5622:	73 0b       	sbc	r23, r19
    5624:	84 0b       	sbc	r24, r20
    5626:	95 0b       	sbc	r25, r21
    5628:	39 f4       	brne	.+14     	; 0x5638 <__fp_cmp+0x38>
    562a:	0a 26       	eor	r0, r26
    562c:	61 f0       	breq	.+24     	; 0x5646 <__fp_cmp+0x46>
    562e:	23 2b       	or	r18, r19
    5630:	24 2b       	or	r18, r20
    5632:	25 2b       	or	r18, r21
    5634:	21 f4       	brne	.+8      	; 0x563e <__fp_cmp+0x3e>
    5636:	08 95       	ret
    5638:	0a 26       	eor	r0, r26
    563a:	09 f4       	brne	.+2      	; 0x563e <__fp_cmp+0x3e>
    563c:	a1 40       	sbci	r26, 0x01	; 1
    563e:	a6 95       	lsr	r26
    5640:	8f ef       	ldi	r24, 0xFF	; 255
    5642:	81 1d       	adc	r24, r1
    5644:	81 1d       	adc	r24, r1
    5646:	08 95       	ret

00005648 <__fp_inf>:
    5648:	97 f9       	bld	r25, 7
    564a:	9f 67       	ori	r25, 0x7F	; 127
    564c:	80 e8       	ldi	r24, 0x80	; 128
    564e:	70 e0       	ldi	r23, 0x00	; 0
    5650:	60 e0       	ldi	r22, 0x00	; 0
    5652:	08 95       	ret

00005654 <__fp_nan>:
    5654:	9f ef       	ldi	r25, 0xFF	; 255
    5656:	80 ec       	ldi	r24, 0xC0	; 192
    5658:	08 95       	ret

0000565a <__fp_pscA>:
    565a:	00 24       	eor	r0, r0
    565c:	0a 94       	dec	r0
    565e:	16 16       	cp	r1, r22
    5660:	17 06       	cpc	r1, r23
    5662:	18 06       	cpc	r1, r24
    5664:	09 06       	cpc	r0, r25
    5666:	08 95       	ret

00005668 <__fp_pscB>:
    5668:	00 24       	eor	r0, r0
    566a:	0a 94       	dec	r0
    566c:	12 16       	cp	r1, r18
    566e:	13 06       	cpc	r1, r19
    5670:	14 06       	cpc	r1, r20
    5672:	05 06       	cpc	r0, r21
    5674:	08 95       	ret

00005676 <__fp_round>:
    5676:	09 2e       	mov	r0, r25
    5678:	03 94       	inc	r0
    567a:	00 0c       	add	r0, r0
    567c:	11 f4       	brne	.+4      	; 0x5682 <__fp_round+0xc>
    567e:	88 23       	and	r24, r24
    5680:	52 f0       	brmi	.+20     	; 0x5696 <__fp_round+0x20>
    5682:	bb 0f       	add	r27, r27
    5684:	40 f4       	brcc	.+16     	; 0x5696 <__fp_round+0x20>
    5686:	bf 2b       	or	r27, r31
    5688:	11 f4       	brne	.+4      	; 0x568e <__fp_round+0x18>
    568a:	60 ff       	sbrs	r22, 0
    568c:	04 c0       	rjmp	.+8      	; 0x5696 <__fp_round+0x20>
    568e:	6f 5f       	subi	r22, 0xFF	; 255
    5690:	7f 4f       	sbci	r23, 0xFF	; 255
    5692:	8f 4f       	sbci	r24, 0xFF	; 255
    5694:	9f 4f       	sbci	r25, 0xFF	; 255
    5696:	08 95       	ret

00005698 <__fp_split3>:
    5698:	57 fd       	sbrc	r21, 7
    569a:	90 58       	subi	r25, 0x80	; 128
    569c:	44 0f       	add	r20, r20
    569e:	55 1f       	adc	r21, r21
    56a0:	59 f0       	breq	.+22     	; 0x56b8 <__fp_splitA+0x10>
    56a2:	5f 3f       	cpi	r21, 0xFF	; 255
    56a4:	71 f0       	breq	.+28     	; 0x56c2 <__fp_splitA+0x1a>
    56a6:	47 95       	ror	r20

000056a8 <__fp_splitA>:
    56a8:	88 0f       	add	r24, r24
    56aa:	97 fb       	bst	r25, 7
    56ac:	99 1f       	adc	r25, r25
    56ae:	61 f0       	breq	.+24     	; 0x56c8 <__fp_splitA+0x20>
    56b0:	9f 3f       	cpi	r25, 0xFF	; 255
    56b2:	79 f0       	breq	.+30     	; 0x56d2 <__fp_splitA+0x2a>
    56b4:	87 95       	ror	r24
    56b6:	08 95       	ret
    56b8:	12 16       	cp	r1, r18
    56ba:	13 06       	cpc	r1, r19
    56bc:	14 06       	cpc	r1, r20
    56be:	55 1f       	adc	r21, r21
    56c0:	f2 cf       	rjmp	.-28     	; 0x56a6 <__fp_split3+0xe>
    56c2:	46 95       	lsr	r20
    56c4:	f1 df       	rcall	.-30     	; 0x56a8 <__fp_splitA>
    56c6:	08 c0       	rjmp	.+16     	; 0x56d8 <__fp_splitA+0x30>
    56c8:	16 16       	cp	r1, r22
    56ca:	17 06       	cpc	r1, r23
    56cc:	18 06       	cpc	r1, r24
    56ce:	99 1f       	adc	r25, r25
    56d0:	f1 cf       	rjmp	.-30     	; 0x56b4 <__fp_splitA+0xc>
    56d2:	86 95       	lsr	r24
    56d4:	71 05       	cpc	r23, r1
    56d6:	61 05       	cpc	r22, r1
    56d8:	08 94       	sec
    56da:	08 95       	ret

000056dc <__fp_zero>:
    56dc:	e8 94       	clt

000056de <__fp_szero>:
    56de:	bb 27       	eor	r27, r27
    56e0:	66 27       	eor	r22, r22
    56e2:	77 27       	eor	r23, r23
    56e4:	cb 01       	movw	r24, r22
    56e6:	97 f9       	bld	r25, 7
    56e8:	08 95       	ret

000056ea <__gesf2>:
    56ea:	0e 94 00 2b 	call	0x5600	; 0x5600 <__fp_cmp>
    56ee:	08 f4       	brcc	.+2      	; 0x56f2 <__gesf2+0x8>
    56f0:	8f ef       	ldi	r24, 0xFF	; 255
    56f2:	08 95       	ret

000056f4 <__mulsf3>:
    56f4:	0e 94 8d 2b 	call	0x571a	; 0x571a <__mulsf3x>
    56f8:	0c 94 3b 2b 	jmp	0x5676	; 0x5676 <__fp_round>
    56fc:	0e 94 2d 2b 	call	0x565a	; 0x565a <__fp_pscA>
    5700:	38 f0       	brcs	.+14     	; 0x5710 <__mulsf3+0x1c>
    5702:	0e 94 34 2b 	call	0x5668	; 0x5668 <__fp_pscB>
    5706:	20 f0       	brcs	.+8      	; 0x5710 <__mulsf3+0x1c>
    5708:	95 23       	and	r25, r21
    570a:	11 f0       	breq	.+4      	; 0x5710 <__mulsf3+0x1c>
    570c:	0c 94 24 2b 	jmp	0x5648	; 0x5648 <__fp_inf>
    5710:	0c 94 2a 2b 	jmp	0x5654	; 0x5654 <__fp_nan>
    5714:	11 24       	eor	r1, r1
    5716:	0c 94 6f 2b 	jmp	0x56de	; 0x56de <__fp_szero>

0000571a <__mulsf3x>:
    571a:	0e 94 4c 2b 	call	0x5698	; 0x5698 <__fp_split3>
    571e:	70 f3       	brcs	.-36     	; 0x56fc <__mulsf3+0x8>

00005720 <__mulsf3_pse>:
    5720:	95 9f       	mul	r25, r21
    5722:	c1 f3       	breq	.-16     	; 0x5714 <__mulsf3+0x20>
    5724:	95 0f       	add	r25, r21
    5726:	50 e0       	ldi	r21, 0x00	; 0
    5728:	55 1f       	adc	r21, r21
    572a:	62 9f       	mul	r22, r18
    572c:	f0 01       	movw	r30, r0
    572e:	72 9f       	mul	r23, r18
    5730:	bb 27       	eor	r27, r27
    5732:	f0 0d       	add	r31, r0
    5734:	b1 1d       	adc	r27, r1
    5736:	63 9f       	mul	r22, r19
    5738:	aa 27       	eor	r26, r26
    573a:	f0 0d       	add	r31, r0
    573c:	b1 1d       	adc	r27, r1
    573e:	aa 1f       	adc	r26, r26
    5740:	64 9f       	mul	r22, r20
    5742:	66 27       	eor	r22, r22
    5744:	b0 0d       	add	r27, r0
    5746:	a1 1d       	adc	r26, r1
    5748:	66 1f       	adc	r22, r22
    574a:	82 9f       	mul	r24, r18
    574c:	22 27       	eor	r18, r18
    574e:	b0 0d       	add	r27, r0
    5750:	a1 1d       	adc	r26, r1
    5752:	62 1f       	adc	r22, r18
    5754:	73 9f       	mul	r23, r19
    5756:	b0 0d       	add	r27, r0
    5758:	a1 1d       	adc	r26, r1
    575a:	62 1f       	adc	r22, r18
    575c:	83 9f       	mul	r24, r19
    575e:	a0 0d       	add	r26, r0
    5760:	61 1d       	adc	r22, r1
    5762:	22 1f       	adc	r18, r18
    5764:	74 9f       	mul	r23, r20
    5766:	33 27       	eor	r19, r19
    5768:	a0 0d       	add	r26, r0
    576a:	61 1d       	adc	r22, r1
    576c:	23 1f       	adc	r18, r19
    576e:	84 9f       	mul	r24, r20
    5770:	60 0d       	add	r22, r0
    5772:	21 1d       	adc	r18, r1
    5774:	82 2f       	mov	r24, r18
    5776:	76 2f       	mov	r23, r22
    5778:	6a 2f       	mov	r22, r26
    577a:	11 24       	eor	r1, r1
    577c:	9f 57       	subi	r25, 0x7F	; 127
    577e:	50 40       	sbci	r21, 0x00	; 0
    5780:	9a f0       	brmi	.+38     	; 0x57a8 <__mulsf3_pse+0x88>
    5782:	f1 f0       	breq	.+60     	; 0x57c0 <__mulsf3_pse+0xa0>
    5784:	88 23       	and	r24, r24
    5786:	4a f0       	brmi	.+18     	; 0x579a <__mulsf3_pse+0x7a>
    5788:	ee 0f       	add	r30, r30
    578a:	ff 1f       	adc	r31, r31
    578c:	bb 1f       	adc	r27, r27
    578e:	66 1f       	adc	r22, r22
    5790:	77 1f       	adc	r23, r23
    5792:	88 1f       	adc	r24, r24
    5794:	91 50       	subi	r25, 0x01	; 1
    5796:	50 40       	sbci	r21, 0x00	; 0
    5798:	a9 f7       	brne	.-22     	; 0x5784 <__mulsf3_pse+0x64>
    579a:	9e 3f       	cpi	r25, 0xFE	; 254
    579c:	51 05       	cpc	r21, r1
    579e:	80 f0       	brcs	.+32     	; 0x57c0 <__mulsf3_pse+0xa0>
    57a0:	0c 94 24 2b 	jmp	0x5648	; 0x5648 <__fp_inf>
    57a4:	0c 94 6f 2b 	jmp	0x56de	; 0x56de <__fp_szero>
    57a8:	5f 3f       	cpi	r21, 0xFF	; 255
    57aa:	e4 f3       	brlt	.-8      	; 0x57a4 <__mulsf3_pse+0x84>
    57ac:	98 3e       	cpi	r25, 0xE8	; 232
    57ae:	d4 f3       	brlt	.-12     	; 0x57a4 <__mulsf3_pse+0x84>
    57b0:	86 95       	lsr	r24
    57b2:	77 95       	ror	r23
    57b4:	67 95       	ror	r22
    57b6:	b7 95       	ror	r27
    57b8:	f7 95       	ror	r31
    57ba:	e7 95       	ror	r30
    57bc:	9f 5f       	subi	r25, 0xFF	; 255
    57be:	c1 f7       	brne	.-16     	; 0x57b0 <__mulsf3_pse+0x90>
    57c0:	fe 2b       	or	r31, r30
    57c2:	88 0f       	add	r24, r24
    57c4:	91 1d       	adc	r25, r1
    57c6:	96 95       	lsr	r25
    57c8:	87 95       	ror	r24
    57ca:	97 f9       	bld	r25, 7
    57cc:	08 95       	ret

000057ce <vfprintf>:
    57ce:	a0 e1       	ldi	r26, 0x10	; 16
    57d0:	b0 e0       	ldi	r27, 0x00	; 0
    57d2:	ed ee       	ldi	r30, 0xED	; 237
    57d4:	fb e2       	ldi	r31, 0x2B	; 43
    57d6:	0c 94 a8 2f 	jmp	0x5f50	; 0x5f50 <__prologue_saves__>
    57da:	7c 01       	movw	r14, r24
    57dc:	1b 01       	movw	r2, r22
    57de:	6a 01       	movw	r12, r20
    57e0:	fc 01       	movw	r30, r24
    57e2:	16 82       	std	Z+6, r1	; 0x06
    57e4:	17 82       	std	Z+7, r1	; 0x07
    57e6:	83 81       	ldd	r24, Z+3	; 0x03
    57e8:	81 ff       	sbrs	r24, 1
    57ea:	44 c3       	rjmp	.+1672   	; 0x5e74 <vfprintf+0x6a6>
    57ec:	9e 01       	movw	r18, r28
    57ee:	2f 5f       	subi	r18, 0xFF	; 255
    57f0:	3f 4f       	sbci	r19, 0xFF	; 255
    57f2:	39 01       	movw	r6, r18
    57f4:	f7 01       	movw	r30, r14
    57f6:	93 81       	ldd	r25, Z+3	; 0x03
    57f8:	f1 01       	movw	r30, r2
    57fa:	93 fd       	sbrc	r25, 3
    57fc:	85 91       	lpm	r24, Z+
    57fe:	93 ff       	sbrs	r25, 3
    5800:	81 91       	ld	r24, Z+
    5802:	1f 01       	movw	r2, r30
    5804:	88 23       	and	r24, r24
    5806:	09 f4       	brne	.+2      	; 0x580a <vfprintf+0x3c>
    5808:	31 c3       	rjmp	.+1634   	; 0x5e6c <vfprintf+0x69e>
    580a:	85 32       	cpi	r24, 0x25	; 37
    580c:	39 f4       	brne	.+14     	; 0x581c <vfprintf+0x4e>
    580e:	93 fd       	sbrc	r25, 3
    5810:	85 91       	lpm	r24, Z+
    5812:	93 ff       	sbrs	r25, 3
    5814:	81 91       	ld	r24, Z+
    5816:	1f 01       	movw	r2, r30
    5818:	85 32       	cpi	r24, 0x25	; 37
    581a:	39 f4       	brne	.+14     	; 0x582a <vfprintf+0x5c>
    581c:	b7 01       	movw	r22, r14
    581e:	90 e0       	ldi	r25, 0x00	; 0
    5820:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5824:	56 01       	movw	r10, r12
    5826:	65 01       	movw	r12, r10
    5828:	e5 cf       	rjmp	.-54     	; 0x57f4 <vfprintf+0x26>
    582a:	10 e0       	ldi	r17, 0x00	; 0
    582c:	51 2c       	mov	r5, r1
    582e:	91 2c       	mov	r9, r1
    5830:	ff e1       	ldi	r31, 0x1F	; 31
    5832:	f9 15       	cp	r31, r9
    5834:	d8 f0       	brcs	.+54     	; 0x586c <vfprintf+0x9e>
    5836:	8b 32       	cpi	r24, 0x2B	; 43
    5838:	79 f0       	breq	.+30     	; 0x5858 <vfprintf+0x8a>
    583a:	38 f4       	brcc	.+14     	; 0x584a <vfprintf+0x7c>
    583c:	80 32       	cpi	r24, 0x20	; 32
    583e:	79 f0       	breq	.+30     	; 0x585e <vfprintf+0x90>
    5840:	83 32       	cpi	r24, 0x23	; 35
    5842:	a1 f4       	brne	.+40     	; 0x586c <vfprintf+0x9e>
    5844:	f9 2d       	mov	r31, r9
    5846:	f0 61       	ori	r31, 0x10	; 16
    5848:	2e c0       	rjmp	.+92     	; 0x58a6 <vfprintf+0xd8>
    584a:	8d 32       	cpi	r24, 0x2D	; 45
    584c:	61 f0       	breq	.+24     	; 0x5866 <vfprintf+0x98>
    584e:	80 33       	cpi	r24, 0x30	; 48
    5850:	69 f4       	brne	.+26     	; 0x586c <vfprintf+0x9e>
    5852:	29 2d       	mov	r18, r9
    5854:	21 60       	ori	r18, 0x01	; 1
    5856:	2d c0       	rjmp	.+90     	; 0x58b2 <vfprintf+0xe4>
    5858:	39 2d       	mov	r19, r9
    585a:	32 60       	ori	r19, 0x02	; 2
    585c:	93 2e       	mov	r9, r19
    585e:	89 2d       	mov	r24, r9
    5860:	84 60       	ori	r24, 0x04	; 4
    5862:	98 2e       	mov	r9, r24
    5864:	2a c0       	rjmp	.+84     	; 0x58ba <vfprintf+0xec>
    5866:	e9 2d       	mov	r30, r9
    5868:	e8 60       	ori	r30, 0x08	; 8
    586a:	15 c0       	rjmp	.+42     	; 0x5896 <vfprintf+0xc8>
    586c:	97 fc       	sbrc	r9, 7
    586e:	2d c0       	rjmp	.+90     	; 0x58ca <vfprintf+0xfc>
    5870:	20 ed       	ldi	r18, 0xD0	; 208
    5872:	28 0f       	add	r18, r24
    5874:	2a 30       	cpi	r18, 0x0A	; 10
    5876:	88 f4       	brcc	.+34     	; 0x589a <vfprintf+0xcc>
    5878:	96 fe       	sbrs	r9, 6
    587a:	06 c0       	rjmp	.+12     	; 0x5888 <vfprintf+0xba>
    587c:	3a e0       	ldi	r19, 0x0A	; 10
    587e:	13 9f       	mul	r17, r19
    5880:	20 0d       	add	r18, r0
    5882:	11 24       	eor	r1, r1
    5884:	12 2f       	mov	r17, r18
    5886:	19 c0       	rjmp	.+50     	; 0x58ba <vfprintf+0xec>
    5888:	8a e0       	ldi	r24, 0x0A	; 10
    588a:	58 9e       	mul	r5, r24
    588c:	20 0d       	add	r18, r0
    588e:	11 24       	eor	r1, r1
    5890:	52 2e       	mov	r5, r18
    5892:	e9 2d       	mov	r30, r9
    5894:	e0 62       	ori	r30, 0x20	; 32
    5896:	9e 2e       	mov	r9, r30
    5898:	10 c0       	rjmp	.+32     	; 0x58ba <vfprintf+0xec>
    589a:	8e 32       	cpi	r24, 0x2E	; 46
    589c:	31 f4       	brne	.+12     	; 0x58aa <vfprintf+0xdc>
    589e:	96 fc       	sbrc	r9, 6
    58a0:	e5 c2       	rjmp	.+1482   	; 0x5e6c <vfprintf+0x69e>
    58a2:	f9 2d       	mov	r31, r9
    58a4:	f0 64       	ori	r31, 0x40	; 64
    58a6:	9f 2e       	mov	r9, r31
    58a8:	08 c0       	rjmp	.+16     	; 0x58ba <vfprintf+0xec>
    58aa:	8c 36       	cpi	r24, 0x6C	; 108
    58ac:	21 f4       	brne	.+8      	; 0x58b6 <vfprintf+0xe8>
    58ae:	29 2d       	mov	r18, r9
    58b0:	20 68       	ori	r18, 0x80	; 128
    58b2:	92 2e       	mov	r9, r18
    58b4:	02 c0       	rjmp	.+4      	; 0x58ba <vfprintf+0xec>
    58b6:	88 36       	cpi	r24, 0x68	; 104
    58b8:	41 f4       	brne	.+16     	; 0x58ca <vfprintf+0xfc>
    58ba:	f1 01       	movw	r30, r2
    58bc:	93 fd       	sbrc	r25, 3
    58be:	85 91       	lpm	r24, Z+
    58c0:	93 ff       	sbrs	r25, 3
    58c2:	81 91       	ld	r24, Z+
    58c4:	1f 01       	movw	r2, r30
    58c6:	81 11       	cpse	r24, r1
    58c8:	b3 cf       	rjmp	.-154    	; 0x5830 <vfprintf+0x62>
    58ca:	9b eb       	ldi	r25, 0xBB	; 187
    58cc:	98 0f       	add	r25, r24
    58ce:	93 30       	cpi	r25, 0x03	; 3
    58d0:	20 f4       	brcc	.+8      	; 0x58da <vfprintf+0x10c>
    58d2:	99 2d       	mov	r25, r9
    58d4:	90 61       	ori	r25, 0x10	; 16
    58d6:	80 5e       	subi	r24, 0xE0	; 224
    58d8:	07 c0       	rjmp	.+14     	; 0x58e8 <vfprintf+0x11a>
    58da:	9b e9       	ldi	r25, 0x9B	; 155
    58dc:	98 0f       	add	r25, r24
    58de:	93 30       	cpi	r25, 0x03	; 3
    58e0:	08 f0       	brcs	.+2      	; 0x58e4 <vfprintf+0x116>
    58e2:	66 c1       	rjmp	.+716    	; 0x5bb0 <vfprintf+0x3e2>
    58e4:	99 2d       	mov	r25, r9
    58e6:	9f 7e       	andi	r25, 0xEF	; 239
    58e8:	96 ff       	sbrs	r25, 6
    58ea:	16 e0       	ldi	r17, 0x06	; 6
    58ec:	9f 73       	andi	r25, 0x3F	; 63
    58ee:	99 2e       	mov	r9, r25
    58f0:	85 36       	cpi	r24, 0x65	; 101
    58f2:	19 f4       	brne	.+6      	; 0x58fa <vfprintf+0x12c>
    58f4:	90 64       	ori	r25, 0x40	; 64
    58f6:	99 2e       	mov	r9, r25
    58f8:	08 c0       	rjmp	.+16     	; 0x590a <vfprintf+0x13c>
    58fa:	86 36       	cpi	r24, 0x66	; 102
    58fc:	21 f4       	brne	.+8      	; 0x5906 <vfprintf+0x138>
    58fe:	39 2f       	mov	r19, r25
    5900:	30 68       	ori	r19, 0x80	; 128
    5902:	93 2e       	mov	r9, r19
    5904:	02 c0       	rjmp	.+4      	; 0x590a <vfprintf+0x13c>
    5906:	11 11       	cpse	r17, r1
    5908:	11 50       	subi	r17, 0x01	; 1
    590a:	97 fe       	sbrs	r9, 7
    590c:	07 c0       	rjmp	.+14     	; 0x591c <vfprintf+0x14e>
    590e:	1c 33       	cpi	r17, 0x3C	; 60
    5910:	50 f4       	brcc	.+20     	; 0x5926 <vfprintf+0x158>
    5912:	44 24       	eor	r4, r4
    5914:	43 94       	inc	r4
    5916:	41 0e       	add	r4, r17
    5918:	27 e0       	ldi	r18, 0x07	; 7
    591a:	0b c0       	rjmp	.+22     	; 0x5932 <vfprintf+0x164>
    591c:	18 30       	cpi	r17, 0x08	; 8
    591e:	38 f0       	brcs	.+14     	; 0x592e <vfprintf+0x160>
    5920:	27 e0       	ldi	r18, 0x07	; 7
    5922:	17 e0       	ldi	r17, 0x07	; 7
    5924:	05 c0       	rjmp	.+10     	; 0x5930 <vfprintf+0x162>
    5926:	27 e0       	ldi	r18, 0x07	; 7
    5928:	9c e3       	ldi	r25, 0x3C	; 60
    592a:	49 2e       	mov	r4, r25
    592c:	02 c0       	rjmp	.+4      	; 0x5932 <vfprintf+0x164>
    592e:	21 2f       	mov	r18, r17
    5930:	41 2c       	mov	r4, r1
    5932:	56 01       	movw	r10, r12
    5934:	84 e0       	ldi	r24, 0x04	; 4
    5936:	a8 0e       	add	r10, r24
    5938:	b1 1c       	adc	r11, r1
    593a:	f6 01       	movw	r30, r12
    593c:	60 81       	ld	r22, Z
    593e:	71 81       	ldd	r23, Z+1	; 0x01
    5940:	82 81       	ldd	r24, Z+2	; 0x02
    5942:	93 81       	ldd	r25, Z+3	; 0x03
    5944:	04 2d       	mov	r16, r4
    5946:	a3 01       	movw	r20, r6
    5948:	0e 94 63 30 	call	0x60c6	; 0x60c6 <__ftoa_engine>
    594c:	6c 01       	movw	r12, r24
    594e:	f9 81       	ldd	r31, Y+1	; 0x01
    5950:	fc 87       	std	Y+12, r31	; 0x0c
    5952:	f0 ff       	sbrs	r31, 0
    5954:	02 c0       	rjmp	.+4      	; 0x595a <vfprintf+0x18c>
    5956:	f3 ff       	sbrs	r31, 3
    5958:	06 c0       	rjmp	.+12     	; 0x5966 <vfprintf+0x198>
    595a:	91 fc       	sbrc	r9, 1
    595c:	06 c0       	rjmp	.+12     	; 0x596a <vfprintf+0x19c>
    595e:	92 fe       	sbrs	r9, 2
    5960:	06 c0       	rjmp	.+12     	; 0x596e <vfprintf+0x1a0>
    5962:	00 e2       	ldi	r16, 0x20	; 32
    5964:	05 c0       	rjmp	.+10     	; 0x5970 <vfprintf+0x1a2>
    5966:	0d e2       	ldi	r16, 0x2D	; 45
    5968:	03 c0       	rjmp	.+6      	; 0x5970 <vfprintf+0x1a2>
    596a:	0b e2       	ldi	r16, 0x2B	; 43
    596c:	01 c0       	rjmp	.+2      	; 0x5970 <vfprintf+0x1a2>
    596e:	00 e0       	ldi	r16, 0x00	; 0
    5970:	8c 85       	ldd	r24, Y+12	; 0x0c
    5972:	8c 70       	andi	r24, 0x0C	; 12
    5974:	19 f0       	breq	.+6      	; 0x597c <vfprintf+0x1ae>
    5976:	01 11       	cpse	r16, r1
    5978:	5a c2       	rjmp	.+1204   	; 0x5e2e <vfprintf+0x660>
    597a:	9b c2       	rjmp	.+1334   	; 0x5eb2 <vfprintf+0x6e4>
    597c:	97 fe       	sbrs	r9, 7
    597e:	10 c0       	rjmp	.+32     	; 0x59a0 <vfprintf+0x1d2>
    5980:	4c 0c       	add	r4, r12
    5982:	fc 85       	ldd	r31, Y+12	; 0x0c
    5984:	f4 ff       	sbrs	r31, 4
    5986:	04 c0       	rjmp	.+8      	; 0x5990 <vfprintf+0x1c2>
    5988:	8a 81       	ldd	r24, Y+2	; 0x02
    598a:	81 33       	cpi	r24, 0x31	; 49
    598c:	09 f4       	brne	.+2      	; 0x5990 <vfprintf+0x1c2>
    598e:	4a 94       	dec	r4
    5990:	14 14       	cp	r1, r4
    5992:	74 f5       	brge	.+92     	; 0x59f0 <vfprintf+0x222>
    5994:	28 e0       	ldi	r18, 0x08	; 8
    5996:	24 15       	cp	r18, r4
    5998:	78 f5       	brcc	.+94     	; 0x59f8 <vfprintf+0x22a>
    599a:	88 e0       	ldi	r24, 0x08	; 8
    599c:	48 2e       	mov	r4, r24
    599e:	2c c0       	rjmp	.+88     	; 0x59f8 <vfprintf+0x22a>
    59a0:	96 fc       	sbrc	r9, 6
    59a2:	2a c0       	rjmp	.+84     	; 0x59f8 <vfprintf+0x22a>
    59a4:	81 2f       	mov	r24, r17
    59a6:	90 e0       	ldi	r25, 0x00	; 0
    59a8:	8c 15       	cp	r24, r12
    59aa:	9d 05       	cpc	r25, r13
    59ac:	9c f0       	brlt	.+38     	; 0x59d4 <vfprintf+0x206>
    59ae:	3c ef       	ldi	r19, 0xFC	; 252
    59b0:	c3 16       	cp	r12, r19
    59b2:	3f ef       	ldi	r19, 0xFF	; 255
    59b4:	d3 06       	cpc	r13, r19
    59b6:	74 f0       	brlt	.+28     	; 0x59d4 <vfprintf+0x206>
    59b8:	89 2d       	mov	r24, r9
    59ba:	80 68       	ori	r24, 0x80	; 128
    59bc:	98 2e       	mov	r9, r24
    59be:	0a c0       	rjmp	.+20     	; 0x59d4 <vfprintf+0x206>
    59c0:	e2 e0       	ldi	r30, 0x02	; 2
    59c2:	f0 e0       	ldi	r31, 0x00	; 0
    59c4:	ec 0f       	add	r30, r28
    59c6:	fd 1f       	adc	r31, r29
    59c8:	e1 0f       	add	r30, r17
    59ca:	f1 1d       	adc	r31, r1
    59cc:	80 81       	ld	r24, Z
    59ce:	80 33       	cpi	r24, 0x30	; 48
    59d0:	19 f4       	brne	.+6      	; 0x59d8 <vfprintf+0x20a>
    59d2:	11 50       	subi	r17, 0x01	; 1
    59d4:	11 11       	cpse	r17, r1
    59d6:	f4 cf       	rjmp	.-24     	; 0x59c0 <vfprintf+0x1f2>
    59d8:	97 fe       	sbrs	r9, 7
    59da:	0e c0       	rjmp	.+28     	; 0x59f8 <vfprintf+0x22a>
    59dc:	44 24       	eor	r4, r4
    59de:	43 94       	inc	r4
    59e0:	41 0e       	add	r4, r17
    59e2:	81 2f       	mov	r24, r17
    59e4:	90 e0       	ldi	r25, 0x00	; 0
    59e6:	c8 16       	cp	r12, r24
    59e8:	d9 06       	cpc	r13, r25
    59ea:	2c f4       	brge	.+10     	; 0x59f6 <vfprintf+0x228>
    59ec:	1c 19       	sub	r17, r12
    59ee:	04 c0       	rjmp	.+8      	; 0x59f8 <vfprintf+0x22a>
    59f0:	44 24       	eor	r4, r4
    59f2:	43 94       	inc	r4
    59f4:	01 c0       	rjmp	.+2      	; 0x59f8 <vfprintf+0x22a>
    59f6:	10 e0       	ldi	r17, 0x00	; 0
    59f8:	97 fe       	sbrs	r9, 7
    59fa:	06 c0       	rjmp	.+12     	; 0x5a08 <vfprintf+0x23a>
    59fc:	1c 14       	cp	r1, r12
    59fe:	1d 04       	cpc	r1, r13
    5a00:	34 f4       	brge	.+12     	; 0x5a0e <vfprintf+0x240>
    5a02:	c6 01       	movw	r24, r12
    5a04:	01 96       	adiw	r24, 0x01	; 1
    5a06:	05 c0       	rjmp	.+10     	; 0x5a12 <vfprintf+0x244>
    5a08:	85 e0       	ldi	r24, 0x05	; 5
    5a0a:	90 e0       	ldi	r25, 0x00	; 0
    5a0c:	02 c0       	rjmp	.+4      	; 0x5a12 <vfprintf+0x244>
    5a0e:	81 e0       	ldi	r24, 0x01	; 1
    5a10:	90 e0       	ldi	r25, 0x00	; 0
    5a12:	01 11       	cpse	r16, r1
    5a14:	01 96       	adiw	r24, 0x01	; 1
    5a16:	11 23       	and	r17, r17
    5a18:	31 f0       	breq	.+12     	; 0x5a26 <vfprintf+0x258>
    5a1a:	21 2f       	mov	r18, r17
    5a1c:	30 e0       	ldi	r19, 0x00	; 0
    5a1e:	2f 5f       	subi	r18, 0xFF	; 255
    5a20:	3f 4f       	sbci	r19, 0xFF	; 255
    5a22:	82 0f       	add	r24, r18
    5a24:	93 1f       	adc	r25, r19
    5a26:	25 2d       	mov	r18, r5
    5a28:	30 e0       	ldi	r19, 0x00	; 0
    5a2a:	82 17       	cp	r24, r18
    5a2c:	93 07       	cpc	r25, r19
    5a2e:	14 f4       	brge	.+4      	; 0x5a34 <vfprintf+0x266>
    5a30:	58 1a       	sub	r5, r24
    5a32:	01 c0       	rjmp	.+2      	; 0x5a36 <vfprintf+0x268>
    5a34:	51 2c       	mov	r5, r1
    5a36:	89 2d       	mov	r24, r9
    5a38:	89 70       	andi	r24, 0x09	; 9
    5a3a:	49 f4       	brne	.+18     	; 0x5a4e <vfprintf+0x280>
    5a3c:	55 20       	and	r5, r5
    5a3e:	39 f0       	breq	.+14     	; 0x5a4e <vfprintf+0x280>
    5a40:	b7 01       	movw	r22, r14
    5a42:	80 e2       	ldi	r24, 0x20	; 32
    5a44:	90 e0       	ldi	r25, 0x00	; 0
    5a46:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5a4a:	5a 94       	dec	r5
    5a4c:	f7 cf       	rjmp	.-18     	; 0x5a3c <vfprintf+0x26e>
    5a4e:	00 23       	and	r16, r16
    5a50:	29 f0       	breq	.+10     	; 0x5a5c <vfprintf+0x28e>
    5a52:	b7 01       	movw	r22, r14
    5a54:	80 2f       	mov	r24, r16
    5a56:	90 e0       	ldi	r25, 0x00	; 0
    5a58:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5a5c:	93 fc       	sbrc	r9, 3
    5a5e:	09 c0       	rjmp	.+18     	; 0x5a72 <vfprintf+0x2a4>
    5a60:	55 20       	and	r5, r5
    5a62:	39 f0       	breq	.+14     	; 0x5a72 <vfprintf+0x2a4>
    5a64:	b7 01       	movw	r22, r14
    5a66:	80 e3       	ldi	r24, 0x30	; 48
    5a68:	90 e0       	ldi	r25, 0x00	; 0
    5a6a:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5a6e:	5a 94       	dec	r5
    5a70:	f7 cf       	rjmp	.-18     	; 0x5a60 <vfprintf+0x292>
    5a72:	97 fe       	sbrs	r9, 7
    5a74:	4c c0       	rjmp	.+152    	; 0x5b0e <vfprintf+0x340>
    5a76:	46 01       	movw	r8, r12
    5a78:	d7 fe       	sbrs	r13, 7
    5a7a:	02 c0       	rjmp	.+4      	; 0x5a80 <vfprintf+0x2b2>
    5a7c:	81 2c       	mov	r8, r1
    5a7e:	91 2c       	mov	r9, r1
    5a80:	c6 01       	movw	r24, r12
    5a82:	88 19       	sub	r24, r8
    5a84:	99 09       	sbc	r25, r9
    5a86:	f3 01       	movw	r30, r6
    5a88:	e8 0f       	add	r30, r24
    5a8a:	f9 1f       	adc	r31, r25
    5a8c:	ed 87       	std	Y+13, r30	; 0x0d
    5a8e:	fe 87       	std	Y+14, r31	; 0x0e
    5a90:	96 01       	movw	r18, r12
    5a92:	24 19       	sub	r18, r4
    5a94:	31 09       	sbc	r19, r1
    5a96:	2f 87       	std	Y+15, r18	; 0x0f
    5a98:	38 8b       	std	Y+16, r19	; 0x10
    5a9a:	01 2f       	mov	r16, r17
    5a9c:	10 e0       	ldi	r17, 0x00	; 0
    5a9e:	11 95       	neg	r17
    5aa0:	01 95       	neg	r16
    5aa2:	11 09       	sbc	r17, r1
    5aa4:	3f ef       	ldi	r19, 0xFF	; 255
    5aa6:	83 16       	cp	r8, r19
    5aa8:	93 06       	cpc	r9, r19
    5aaa:	29 f4       	brne	.+10     	; 0x5ab6 <vfprintf+0x2e8>
    5aac:	b7 01       	movw	r22, r14
    5aae:	8e e2       	ldi	r24, 0x2E	; 46
    5ab0:	90 e0       	ldi	r25, 0x00	; 0
    5ab2:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5ab6:	c8 14       	cp	r12, r8
    5ab8:	d9 04       	cpc	r13, r9
    5aba:	4c f0       	brlt	.+18     	; 0x5ace <vfprintf+0x300>
    5abc:	8f 85       	ldd	r24, Y+15	; 0x0f
    5abe:	98 89       	ldd	r25, Y+16	; 0x10
    5ac0:	88 15       	cp	r24, r8
    5ac2:	99 05       	cpc	r25, r9
    5ac4:	24 f4       	brge	.+8      	; 0x5ace <vfprintf+0x300>
    5ac6:	ed 85       	ldd	r30, Y+13	; 0x0d
    5ac8:	fe 85       	ldd	r31, Y+14	; 0x0e
    5aca:	81 81       	ldd	r24, Z+1	; 0x01
    5acc:	01 c0       	rjmp	.+2      	; 0x5ad0 <vfprintf+0x302>
    5ace:	80 e3       	ldi	r24, 0x30	; 48
    5ad0:	f1 e0       	ldi	r31, 0x01	; 1
    5ad2:	8f 1a       	sub	r8, r31
    5ad4:	91 08       	sbc	r9, r1
    5ad6:	2d 85       	ldd	r18, Y+13	; 0x0d
    5ad8:	3e 85       	ldd	r19, Y+14	; 0x0e
    5ada:	2f 5f       	subi	r18, 0xFF	; 255
    5adc:	3f 4f       	sbci	r19, 0xFF	; 255
    5ade:	2d 87       	std	Y+13, r18	; 0x0d
    5ae0:	3e 87       	std	Y+14, r19	; 0x0e
    5ae2:	80 16       	cp	r8, r16
    5ae4:	91 06       	cpc	r9, r17
    5ae6:	2c f0       	brlt	.+10     	; 0x5af2 <vfprintf+0x324>
    5ae8:	b7 01       	movw	r22, r14
    5aea:	90 e0       	ldi	r25, 0x00	; 0
    5aec:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5af0:	d9 cf       	rjmp	.-78     	; 0x5aa4 <vfprintf+0x2d6>
    5af2:	c8 14       	cp	r12, r8
    5af4:	d9 04       	cpc	r13, r9
    5af6:	41 f4       	brne	.+16     	; 0x5b08 <vfprintf+0x33a>
    5af8:	9a 81       	ldd	r25, Y+2	; 0x02
    5afa:	96 33       	cpi	r25, 0x36	; 54
    5afc:	20 f4       	brcc	.+8      	; 0x5b06 <vfprintf+0x338>
    5afe:	95 33       	cpi	r25, 0x35	; 53
    5b00:	19 f4       	brne	.+6      	; 0x5b08 <vfprintf+0x33a>
    5b02:	3c 85       	ldd	r19, Y+12	; 0x0c
    5b04:	34 ff       	sbrs	r19, 4
    5b06:	81 e3       	ldi	r24, 0x31	; 49
    5b08:	b7 01       	movw	r22, r14
    5b0a:	90 e0       	ldi	r25, 0x00	; 0
    5b0c:	4e c0       	rjmp	.+156    	; 0x5baa <vfprintf+0x3dc>
    5b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    5b10:	81 33       	cpi	r24, 0x31	; 49
    5b12:	19 f0       	breq	.+6      	; 0x5b1a <vfprintf+0x34c>
    5b14:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b16:	9f 7e       	andi	r25, 0xEF	; 239
    5b18:	9c 87       	std	Y+12, r25	; 0x0c
    5b1a:	b7 01       	movw	r22, r14
    5b1c:	90 e0       	ldi	r25, 0x00	; 0
    5b1e:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5b22:	11 11       	cpse	r17, r1
    5b24:	05 c0       	rjmp	.+10     	; 0x5b30 <vfprintf+0x362>
    5b26:	94 fc       	sbrc	r9, 4
    5b28:	18 c0       	rjmp	.+48     	; 0x5b5a <vfprintf+0x38c>
    5b2a:	85 e6       	ldi	r24, 0x65	; 101
    5b2c:	90 e0       	ldi	r25, 0x00	; 0
    5b2e:	17 c0       	rjmp	.+46     	; 0x5b5e <vfprintf+0x390>
    5b30:	b7 01       	movw	r22, r14
    5b32:	8e e2       	ldi	r24, 0x2E	; 46
    5b34:	90 e0       	ldi	r25, 0x00	; 0
    5b36:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5b3a:	1e 5f       	subi	r17, 0xFE	; 254
    5b3c:	82 e0       	ldi	r24, 0x02	; 2
    5b3e:	01 e0       	ldi	r16, 0x01	; 1
    5b40:	08 0f       	add	r16, r24
    5b42:	f3 01       	movw	r30, r6
    5b44:	e8 0f       	add	r30, r24
    5b46:	f1 1d       	adc	r31, r1
    5b48:	80 81       	ld	r24, Z
    5b4a:	b7 01       	movw	r22, r14
    5b4c:	90 e0       	ldi	r25, 0x00	; 0
    5b4e:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5b52:	80 2f       	mov	r24, r16
    5b54:	01 13       	cpse	r16, r17
    5b56:	f3 cf       	rjmp	.-26     	; 0x5b3e <vfprintf+0x370>
    5b58:	e6 cf       	rjmp	.-52     	; 0x5b26 <vfprintf+0x358>
    5b5a:	85 e4       	ldi	r24, 0x45	; 69
    5b5c:	90 e0       	ldi	r25, 0x00	; 0
    5b5e:	b7 01       	movw	r22, r14
    5b60:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5b64:	d7 fc       	sbrc	r13, 7
    5b66:	06 c0       	rjmp	.+12     	; 0x5b74 <vfprintf+0x3a6>
    5b68:	c1 14       	cp	r12, r1
    5b6a:	d1 04       	cpc	r13, r1
    5b6c:	41 f4       	brne	.+16     	; 0x5b7e <vfprintf+0x3b0>
    5b6e:	ec 85       	ldd	r30, Y+12	; 0x0c
    5b70:	e4 ff       	sbrs	r30, 4
    5b72:	05 c0       	rjmp	.+10     	; 0x5b7e <vfprintf+0x3b0>
    5b74:	d1 94       	neg	r13
    5b76:	c1 94       	neg	r12
    5b78:	d1 08       	sbc	r13, r1
    5b7a:	8d e2       	ldi	r24, 0x2D	; 45
    5b7c:	01 c0       	rjmp	.+2      	; 0x5b80 <vfprintf+0x3b2>
    5b7e:	8b e2       	ldi	r24, 0x2B	; 43
    5b80:	b7 01       	movw	r22, r14
    5b82:	90 e0       	ldi	r25, 0x00	; 0
    5b84:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5b88:	80 e3       	ldi	r24, 0x30	; 48
    5b8a:	2a e0       	ldi	r18, 0x0A	; 10
    5b8c:	c2 16       	cp	r12, r18
    5b8e:	d1 04       	cpc	r13, r1
    5b90:	2c f0       	brlt	.+10     	; 0x5b9c <vfprintf+0x3ce>
    5b92:	8f 5f       	subi	r24, 0xFF	; 255
    5b94:	fa e0       	ldi	r31, 0x0A	; 10
    5b96:	cf 1a       	sub	r12, r31
    5b98:	d1 08       	sbc	r13, r1
    5b9a:	f7 cf       	rjmp	.-18     	; 0x5b8a <vfprintf+0x3bc>
    5b9c:	b7 01       	movw	r22, r14
    5b9e:	90 e0       	ldi	r25, 0x00	; 0
    5ba0:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5ba4:	b7 01       	movw	r22, r14
    5ba6:	c6 01       	movw	r24, r12
    5ba8:	c0 96       	adiw	r24, 0x30	; 48
    5baa:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5bae:	54 c1       	rjmp	.+680    	; 0x5e58 <vfprintf+0x68a>
    5bb0:	83 36       	cpi	r24, 0x63	; 99
    5bb2:	31 f0       	breq	.+12     	; 0x5bc0 <vfprintf+0x3f2>
    5bb4:	83 37       	cpi	r24, 0x73	; 115
    5bb6:	79 f0       	breq	.+30     	; 0x5bd6 <vfprintf+0x408>
    5bb8:	83 35       	cpi	r24, 0x53	; 83
    5bba:	09 f0       	breq	.+2      	; 0x5bbe <vfprintf+0x3f0>
    5bbc:	56 c0       	rjmp	.+172    	; 0x5c6a <vfprintf+0x49c>
    5bbe:	20 c0       	rjmp	.+64     	; 0x5c00 <vfprintf+0x432>
    5bc0:	56 01       	movw	r10, r12
    5bc2:	32 e0       	ldi	r19, 0x02	; 2
    5bc4:	a3 0e       	add	r10, r19
    5bc6:	b1 1c       	adc	r11, r1
    5bc8:	f6 01       	movw	r30, r12
    5bca:	80 81       	ld	r24, Z
    5bcc:	89 83       	std	Y+1, r24	; 0x01
    5bce:	01 e0       	ldi	r16, 0x01	; 1
    5bd0:	10 e0       	ldi	r17, 0x00	; 0
    5bd2:	63 01       	movw	r12, r6
    5bd4:	12 c0       	rjmp	.+36     	; 0x5bfa <vfprintf+0x42c>
    5bd6:	56 01       	movw	r10, r12
    5bd8:	f2 e0       	ldi	r31, 0x02	; 2
    5bda:	af 0e       	add	r10, r31
    5bdc:	b1 1c       	adc	r11, r1
    5bde:	f6 01       	movw	r30, r12
    5be0:	c0 80       	ld	r12, Z
    5be2:	d1 80       	ldd	r13, Z+1	; 0x01
    5be4:	96 fe       	sbrs	r9, 6
    5be6:	03 c0       	rjmp	.+6      	; 0x5bee <vfprintf+0x420>
    5be8:	61 2f       	mov	r22, r17
    5bea:	70 e0       	ldi	r23, 0x00	; 0
    5bec:	02 c0       	rjmp	.+4      	; 0x5bf2 <vfprintf+0x424>
    5bee:	6f ef       	ldi	r22, 0xFF	; 255
    5bf0:	7f ef       	ldi	r23, 0xFF	; 255
    5bf2:	c6 01       	movw	r24, r12
    5bf4:	0e 94 58 31 	call	0x62b0	; 0x62b0 <strnlen>
    5bf8:	8c 01       	movw	r16, r24
    5bfa:	f9 2d       	mov	r31, r9
    5bfc:	ff 77       	andi	r31, 0x7F	; 127
    5bfe:	14 c0       	rjmp	.+40     	; 0x5c28 <vfprintf+0x45a>
    5c00:	56 01       	movw	r10, r12
    5c02:	22 e0       	ldi	r18, 0x02	; 2
    5c04:	a2 0e       	add	r10, r18
    5c06:	b1 1c       	adc	r11, r1
    5c08:	f6 01       	movw	r30, r12
    5c0a:	c0 80       	ld	r12, Z
    5c0c:	d1 80       	ldd	r13, Z+1	; 0x01
    5c0e:	96 fe       	sbrs	r9, 6
    5c10:	03 c0       	rjmp	.+6      	; 0x5c18 <vfprintf+0x44a>
    5c12:	61 2f       	mov	r22, r17
    5c14:	70 e0       	ldi	r23, 0x00	; 0
    5c16:	02 c0       	rjmp	.+4      	; 0x5c1c <vfprintf+0x44e>
    5c18:	6f ef       	ldi	r22, 0xFF	; 255
    5c1a:	7f ef       	ldi	r23, 0xFF	; 255
    5c1c:	c6 01       	movw	r24, r12
    5c1e:	0e 94 3b 31 	call	0x6276	; 0x6276 <strnlen_P>
    5c22:	8c 01       	movw	r16, r24
    5c24:	f9 2d       	mov	r31, r9
    5c26:	f0 68       	ori	r31, 0x80	; 128
    5c28:	9f 2e       	mov	r9, r31
    5c2a:	f3 fd       	sbrc	r31, 3
    5c2c:	1a c0       	rjmp	.+52     	; 0x5c62 <vfprintf+0x494>
    5c2e:	85 2d       	mov	r24, r5
    5c30:	90 e0       	ldi	r25, 0x00	; 0
    5c32:	08 17       	cp	r16, r24
    5c34:	19 07       	cpc	r17, r25
    5c36:	a8 f4       	brcc	.+42     	; 0x5c62 <vfprintf+0x494>
    5c38:	b7 01       	movw	r22, r14
    5c3a:	80 e2       	ldi	r24, 0x20	; 32
    5c3c:	90 e0       	ldi	r25, 0x00	; 0
    5c3e:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5c42:	5a 94       	dec	r5
    5c44:	f4 cf       	rjmp	.-24     	; 0x5c2e <vfprintf+0x460>
    5c46:	f6 01       	movw	r30, r12
    5c48:	97 fc       	sbrc	r9, 7
    5c4a:	85 91       	lpm	r24, Z+
    5c4c:	97 fe       	sbrs	r9, 7
    5c4e:	81 91       	ld	r24, Z+
    5c50:	6f 01       	movw	r12, r30
    5c52:	b7 01       	movw	r22, r14
    5c54:	90 e0       	ldi	r25, 0x00	; 0
    5c56:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5c5a:	51 10       	cpse	r5, r1
    5c5c:	5a 94       	dec	r5
    5c5e:	01 50       	subi	r16, 0x01	; 1
    5c60:	11 09       	sbc	r17, r1
    5c62:	01 15       	cp	r16, r1
    5c64:	11 05       	cpc	r17, r1
    5c66:	79 f7       	brne	.-34     	; 0x5c46 <vfprintf+0x478>
    5c68:	f7 c0       	rjmp	.+494    	; 0x5e58 <vfprintf+0x68a>
    5c6a:	84 36       	cpi	r24, 0x64	; 100
    5c6c:	11 f0       	breq	.+4      	; 0x5c72 <vfprintf+0x4a4>
    5c6e:	89 36       	cpi	r24, 0x69	; 105
    5c70:	61 f5       	brne	.+88     	; 0x5cca <vfprintf+0x4fc>
    5c72:	56 01       	movw	r10, r12
    5c74:	97 fe       	sbrs	r9, 7
    5c76:	09 c0       	rjmp	.+18     	; 0x5c8a <vfprintf+0x4bc>
    5c78:	24 e0       	ldi	r18, 0x04	; 4
    5c7a:	a2 0e       	add	r10, r18
    5c7c:	b1 1c       	adc	r11, r1
    5c7e:	f6 01       	movw	r30, r12
    5c80:	60 81       	ld	r22, Z
    5c82:	71 81       	ldd	r23, Z+1	; 0x01
    5c84:	82 81       	ldd	r24, Z+2	; 0x02
    5c86:	93 81       	ldd	r25, Z+3	; 0x03
    5c88:	0a c0       	rjmp	.+20     	; 0x5c9e <vfprintf+0x4d0>
    5c8a:	f2 e0       	ldi	r31, 0x02	; 2
    5c8c:	af 0e       	add	r10, r31
    5c8e:	b1 1c       	adc	r11, r1
    5c90:	f6 01       	movw	r30, r12
    5c92:	60 81       	ld	r22, Z
    5c94:	71 81       	ldd	r23, Z+1	; 0x01
    5c96:	07 2e       	mov	r0, r23
    5c98:	00 0c       	add	r0, r0
    5c9a:	88 0b       	sbc	r24, r24
    5c9c:	99 0b       	sbc	r25, r25
    5c9e:	f9 2d       	mov	r31, r9
    5ca0:	ff 76       	andi	r31, 0x6F	; 111
    5ca2:	9f 2e       	mov	r9, r31
    5ca4:	97 ff       	sbrs	r25, 7
    5ca6:	09 c0       	rjmp	.+18     	; 0x5cba <vfprintf+0x4ec>
    5ca8:	90 95       	com	r25
    5caa:	80 95       	com	r24
    5cac:	70 95       	com	r23
    5cae:	61 95       	neg	r22
    5cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    5cb2:	8f 4f       	sbci	r24, 0xFF	; 255
    5cb4:	9f 4f       	sbci	r25, 0xFF	; 255
    5cb6:	f0 68       	ori	r31, 0x80	; 128
    5cb8:	9f 2e       	mov	r9, r31
    5cba:	2a e0       	ldi	r18, 0x0A	; 10
    5cbc:	30 e0       	ldi	r19, 0x00	; 0
    5cbe:	a3 01       	movw	r20, r6
    5cc0:	0e 94 de 31 	call	0x63bc	; 0x63bc <__ultoa_invert>
    5cc4:	c8 2e       	mov	r12, r24
    5cc6:	c6 18       	sub	r12, r6
    5cc8:	3f c0       	rjmp	.+126    	; 0x5d48 <vfprintf+0x57a>
    5cca:	09 2d       	mov	r16, r9
    5ccc:	85 37       	cpi	r24, 0x75	; 117
    5cce:	21 f4       	brne	.+8      	; 0x5cd8 <vfprintf+0x50a>
    5cd0:	0f 7e       	andi	r16, 0xEF	; 239
    5cd2:	2a e0       	ldi	r18, 0x0A	; 10
    5cd4:	30 e0       	ldi	r19, 0x00	; 0
    5cd6:	1d c0       	rjmp	.+58     	; 0x5d12 <vfprintf+0x544>
    5cd8:	09 7f       	andi	r16, 0xF9	; 249
    5cda:	8f 36       	cpi	r24, 0x6F	; 111
    5cdc:	91 f0       	breq	.+36     	; 0x5d02 <vfprintf+0x534>
    5cde:	18 f4       	brcc	.+6      	; 0x5ce6 <vfprintf+0x518>
    5ce0:	88 35       	cpi	r24, 0x58	; 88
    5ce2:	59 f0       	breq	.+22     	; 0x5cfa <vfprintf+0x52c>
    5ce4:	c3 c0       	rjmp	.+390    	; 0x5e6c <vfprintf+0x69e>
    5ce6:	80 37       	cpi	r24, 0x70	; 112
    5ce8:	19 f0       	breq	.+6      	; 0x5cf0 <vfprintf+0x522>
    5cea:	88 37       	cpi	r24, 0x78	; 120
    5cec:	11 f0       	breq	.+4      	; 0x5cf2 <vfprintf+0x524>
    5cee:	be c0       	rjmp	.+380    	; 0x5e6c <vfprintf+0x69e>
    5cf0:	00 61       	ori	r16, 0x10	; 16
    5cf2:	04 ff       	sbrs	r16, 4
    5cf4:	09 c0       	rjmp	.+18     	; 0x5d08 <vfprintf+0x53a>
    5cf6:	04 60       	ori	r16, 0x04	; 4
    5cf8:	07 c0       	rjmp	.+14     	; 0x5d08 <vfprintf+0x53a>
    5cfa:	94 fe       	sbrs	r9, 4
    5cfc:	08 c0       	rjmp	.+16     	; 0x5d0e <vfprintf+0x540>
    5cfe:	06 60       	ori	r16, 0x06	; 6
    5d00:	06 c0       	rjmp	.+12     	; 0x5d0e <vfprintf+0x540>
    5d02:	28 e0       	ldi	r18, 0x08	; 8
    5d04:	30 e0       	ldi	r19, 0x00	; 0
    5d06:	05 c0       	rjmp	.+10     	; 0x5d12 <vfprintf+0x544>
    5d08:	20 e1       	ldi	r18, 0x10	; 16
    5d0a:	30 e0       	ldi	r19, 0x00	; 0
    5d0c:	02 c0       	rjmp	.+4      	; 0x5d12 <vfprintf+0x544>
    5d0e:	20 e1       	ldi	r18, 0x10	; 16
    5d10:	32 e0       	ldi	r19, 0x02	; 2
    5d12:	56 01       	movw	r10, r12
    5d14:	07 ff       	sbrs	r16, 7
    5d16:	09 c0       	rjmp	.+18     	; 0x5d2a <vfprintf+0x55c>
    5d18:	84 e0       	ldi	r24, 0x04	; 4
    5d1a:	a8 0e       	add	r10, r24
    5d1c:	b1 1c       	adc	r11, r1
    5d1e:	f6 01       	movw	r30, r12
    5d20:	60 81       	ld	r22, Z
    5d22:	71 81       	ldd	r23, Z+1	; 0x01
    5d24:	82 81       	ldd	r24, Z+2	; 0x02
    5d26:	93 81       	ldd	r25, Z+3	; 0x03
    5d28:	08 c0       	rjmp	.+16     	; 0x5d3a <vfprintf+0x56c>
    5d2a:	f2 e0       	ldi	r31, 0x02	; 2
    5d2c:	af 0e       	add	r10, r31
    5d2e:	b1 1c       	adc	r11, r1
    5d30:	f6 01       	movw	r30, r12
    5d32:	60 81       	ld	r22, Z
    5d34:	71 81       	ldd	r23, Z+1	; 0x01
    5d36:	80 e0       	ldi	r24, 0x00	; 0
    5d38:	90 e0       	ldi	r25, 0x00	; 0
    5d3a:	a3 01       	movw	r20, r6
    5d3c:	0e 94 de 31 	call	0x63bc	; 0x63bc <__ultoa_invert>
    5d40:	c8 2e       	mov	r12, r24
    5d42:	c6 18       	sub	r12, r6
    5d44:	0f 77       	andi	r16, 0x7F	; 127
    5d46:	90 2e       	mov	r9, r16
    5d48:	96 fe       	sbrs	r9, 6
    5d4a:	0b c0       	rjmp	.+22     	; 0x5d62 <vfprintf+0x594>
    5d4c:	09 2d       	mov	r16, r9
    5d4e:	0e 7f       	andi	r16, 0xFE	; 254
    5d50:	c1 16       	cp	r12, r17
    5d52:	50 f4       	brcc	.+20     	; 0x5d68 <vfprintf+0x59a>
    5d54:	94 fe       	sbrs	r9, 4
    5d56:	0a c0       	rjmp	.+20     	; 0x5d6c <vfprintf+0x59e>
    5d58:	92 fc       	sbrc	r9, 2
    5d5a:	08 c0       	rjmp	.+16     	; 0x5d6c <vfprintf+0x59e>
    5d5c:	09 2d       	mov	r16, r9
    5d5e:	0e 7e       	andi	r16, 0xEE	; 238
    5d60:	05 c0       	rjmp	.+10     	; 0x5d6c <vfprintf+0x59e>
    5d62:	dc 2c       	mov	r13, r12
    5d64:	09 2d       	mov	r16, r9
    5d66:	03 c0       	rjmp	.+6      	; 0x5d6e <vfprintf+0x5a0>
    5d68:	dc 2c       	mov	r13, r12
    5d6a:	01 c0       	rjmp	.+2      	; 0x5d6e <vfprintf+0x5a0>
    5d6c:	d1 2e       	mov	r13, r17
    5d6e:	04 ff       	sbrs	r16, 4
    5d70:	0d c0       	rjmp	.+26     	; 0x5d8c <vfprintf+0x5be>
    5d72:	fe 01       	movw	r30, r28
    5d74:	ec 0d       	add	r30, r12
    5d76:	f1 1d       	adc	r31, r1
    5d78:	80 81       	ld	r24, Z
    5d7a:	80 33       	cpi	r24, 0x30	; 48
    5d7c:	11 f4       	brne	.+4      	; 0x5d82 <vfprintf+0x5b4>
    5d7e:	09 7e       	andi	r16, 0xE9	; 233
    5d80:	09 c0       	rjmp	.+18     	; 0x5d94 <vfprintf+0x5c6>
    5d82:	02 ff       	sbrs	r16, 2
    5d84:	06 c0       	rjmp	.+12     	; 0x5d92 <vfprintf+0x5c4>
    5d86:	d3 94       	inc	r13
    5d88:	d3 94       	inc	r13
    5d8a:	04 c0       	rjmp	.+8      	; 0x5d94 <vfprintf+0x5c6>
    5d8c:	80 2f       	mov	r24, r16
    5d8e:	86 78       	andi	r24, 0x86	; 134
    5d90:	09 f0       	breq	.+2      	; 0x5d94 <vfprintf+0x5c6>
    5d92:	d3 94       	inc	r13
    5d94:	03 fd       	sbrc	r16, 3
    5d96:	11 c0       	rjmp	.+34     	; 0x5dba <vfprintf+0x5ec>
    5d98:	00 ff       	sbrs	r16, 0
    5d9a:	06 c0       	rjmp	.+12     	; 0x5da8 <vfprintf+0x5da>
    5d9c:	1c 2d       	mov	r17, r12
    5d9e:	d5 14       	cp	r13, r5
    5da0:	80 f4       	brcc	.+32     	; 0x5dc2 <vfprintf+0x5f4>
    5da2:	15 0d       	add	r17, r5
    5da4:	1d 19       	sub	r17, r13
    5da6:	0d c0       	rjmp	.+26     	; 0x5dc2 <vfprintf+0x5f4>
    5da8:	d5 14       	cp	r13, r5
    5daa:	58 f4       	brcc	.+22     	; 0x5dc2 <vfprintf+0x5f4>
    5dac:	b7 01       	movw	r22, r14
    5dae:	80 e2       	ldi	r24, 0x20	; 32
    5db0:	90 e0       	ldi	r25, 0x00	; 0
    5db2:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5db6:	d3 94       	inc	r13
    5db8:	f7 cf       	rjmp	.-18     	; 0x5da8 <vfprintf+0x5da>
    5dba:	d5 14       	cp	r13, r5
    5dbc:	10 f4       	brcc	.+4      	; 0x5dc2 <vfprintf+0x5f4>
    5dbe:	5d 18       	sub	r5, r13
    5dc0:	01 c0       	rjmp	.+2      	; 0x5dc4 <vfprintf+0x5f6>
    5dc2:	51 2c       	mov	r5, r1
    5dc4:	04 ff       	sbrs	r16, 4
    5dc6:	10 c0       	rjmp	.+32     	; 0x5de8 <vfprintf+0x61a>
    5dc8:	b7 01       	movw	r22, r14
    5dca:	80 e3       	ldi	r24, 0x30	; 48
    5dcc:	90 e0       	ldi	r25, 0x00	; 0
    5dce:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5dd2:	02 ff       	sbrs	r16, 2
    5dd4:	17 c0       	rjmp	.+46     	; 0x5e04 <vfprintf+0x636>
    5dd6:	01 fd       	sbrc	r16, 1
    5dd8:	03 c0       	rjmp	.+6      	; 0x5de0 <vfprintf+0x612>
    5dda:	88 e7       	ldi	r24, 0x78	; 120
    5ddc:	90 e0       	ldi	r25, 0x00	; 0
    5dde:	02 c0       	rjmp	.+4      	; 0x5de4 <vfprintf+0x616>
    5de0:	88 e5       	ldi	r24, 0x58	; 88
    5de2:	90 e0       	ldi	r25, 0x00	; 0
    5de4:	b7 01       	movw	r22, r14
    5de6:	0c c0       	rjmp	.+24     	; 0x5e00 <vfprintf+0x632>
    5de8:	80 2f       	mov	r24, r16
    5dea:	86 78       	andi	r24, 0x86	; 134
    5dec:	59 f0       	breq	.+22     	; 0x5e04 <vfprintf+0x636>
    5dee:	01 ff       	sbrs	r16, 1
    5df0:	02 c0       	rjmp	.+4      	; 0x5df6 <vfprintf+0x628>
    5df2:	8b e2       	ldi	r24, 0x2B	; 43
    5df4:	01 c0       	rjmp	.+2      	; 0x5df8 <vfprintf+0x62a>
    5df6:	80 e2       	ldi	r24, 0x20	; 32
    5df8:	07 fd       	sbrc	r16, 7
    5dfa:	8d e2       	ldi	r24, 0x2D	; 45
    5dfc:	b7 01       	movw	r22, r14
    5dfe:	90 e0       	ldi	r25, 0x00	; 0
    5e00:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5e04:	c1 16       	cp	r12, r17
    5e06:	38 f4       	brcc	.+14     	; 0x5e16 <vfprintf+0x648>
    5e08:	b7 01       	movw	r22, r14
    5e0a:	80 e3       	ldi	r24, 0x30	; 48
    5e0c:	90 e0       	ldi	r25, 0x00	; 0
    5e0e:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5e12:	11 50       	subi	r17, 0x01	; 1
    5e14:	f7 cf       	rjmp	.-18     	; 0x5e04 <vfprintf+0x636>
    5e16:	ca 94       	dec	r12
    5e18:	f3 01       	movw	r30, r6
    5e1a:	ec 0d       	add	r30, r12
    5e1c:	f1 1d       	adc	r31, r1
    5e1e:	80 81       	ld	r24, Z
    5e20:	b7 01       	movw	r22, r14
    5e22:	90 e0       	ldi	r25, 0x00	; 0
    5e24:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5e28:	c1 10       	cpse	r12, r1
    5e2a:	f5 cf       	rjmp	.-22     	; 0x5e16 <vfprintf+0x648>
    5e2c:	15 c0       	rjmp	.+42     	; 0x5e58 <vfprintf+0x68a>
    5e2e:	f4 e0       	ldi	r31, 0x04	; 4
    5e30:	f5 15       	cp	r31, r5
    5e32:	60 f5       	brcc	.+88     	; 0x5e8c <vfprintf+0x6be>
    5e34:	84 e0       	ldi	r24, 0x04	; 4
    5e36:	58 1a       	sub	r5, r24
    5e38:	93 fe       	sbrs	r9, 3
    5e3a:	1f c0       	rjmp	.+62     	; 0x5e7a <vfprintf+0x6ac>
    5e3c:	01 11       	cpse	r16, r1
    5e3e:	27 c0       	rjmp	.+78     	; 0x5e8e <vfprintf+0x6c0>
    5e40:	2c 85       	ldd	r18, Y+12	; 0x0c
    5e42:	23 ff       	sbrs	r18, 3
    5e44:	2a c0       	rjmp	.+84     	; 0x5e9a <vfprintf+0x6cc>
    5e46:	04 e6       	ldi	r16, 0x64	; 100
    5e48:	11 e0       	ldi	r17, 0x01	; 1
    5e4a:	39 2d       	mov	r19, r9
    5e4c:	30 71       	andi	r19, 0x10	; 16
    5e4e:	93 2e       	mov	r9, r19
    5e50:	f8 01       	movw	r30, r16
    5e52:	84 91       	lpm	r24, Z
    5e54:	81 11       	cpse	r24, r1
    5e56:	24 c0       	rjmp	.+72     	; 0x5ea0 <vfprintf+0x6d2>
    5e58:	55 20       	and	r5, r5
    5e5a:	09 f4       	brne	.+2      	; 0x5e5e <vfprintf+0x690>
    5e5c:	e4 cc       	rjmp	.-1592   	; 0x5826 <vfprintf+0x58>
    5e5e:	b7 01       	movw	r22, r14
    5e60:	80 e2       	ldi	r24, 0x20	; 32
    5e62:	90 e0       	ldi	r25, 0x00	; 0
    5e64:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5e68:	5a 94       	dec	r5
    5e6a:	f6 cf       	rjmp	.-20     	; 0x5e58 <vfprintf+0x68a>
    5e6c:	f7 01       	movw	r30, r14
    5e6e:	86 81       	ldd	r24, Z+6	; 0x06
    5e70:	97 81       	ldd	r25, Z+7	; 0x07
    5e72:	26 c0       	rjmp	.+76     	; 0x5ec0 <vfprintf+0x6f2>
    5e74:	8f ef       	ldi	r24, 0xFF	; 255
    5e76:	9f ef       	ldi	r25, 0xFF	; 255
    5e78:	23 c0       	rjmp	.+70     	; 0x5ec0 <vfprintf+0x6f2>
    5e7a:	b7 01       	movw	r22, r14
    5e7c:	80 e2       	ldi	r24, 0x20	; 32
    5e7e:	90 e0       	ldi	r25, 0x00	; 0
    5e80:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5e84:	5a 94       	dec	r5
    5e86:	51 10       	cpse	r5, r1
    5e88:	f8 cf       	rjmp	.-16     	; 0x5e7a <vfprintf+0x6ac>
    5e8a:	d8 cf       	rjmp	.-80     	; 0x5e3c <vfprintf+0x66e>
    5e8c:	51 2c       	mov	r5, r1
    5e8e:	b7 01       	movw	r22, r14
    5e90:	80 2f       	mov	r24, r16
    5e92:	90 e0       	ldi	r25, 0x00	; 0
    5e94:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5e98:	d3 cf       	rjmp	.-90     	; 0x5e40 <vfprintf+0x672>
    5e9a:	08 e6       	ldi	r16, 0x68	; 104
    5e9c:	11 e0       	ldi	r17, 0x01	; 1
    5e9e:	d5 cf       	rjmp	.-86     	; 0x5e4a <vfprintf+0x67c>
    5ea0:	91 10       	cpse	r9, r1
    5ea2:	80 52       	subi	r24, 0x20	; 32
    5ea4:	b7 01       	movw	r22, r14
    5ea6:	90 e0       	ldi	r25, 0x00	; 0
    5ea8:	0e 94 80 31 	call	0x6300	; 0x6300 <fputc>
    5eac:	0f 5f       	subi	r16, 0xFF	; 255
    5eae:	1f 4f       	sbci	r17, 0xFF	; 255
    5eb0:	cf cf       	rjmp	.-98     	; 0x5e50 <vfprintf+0x682>
    5eb2:	23 e0       	ldi	r18, 0x03	; 3
    5eb4:	25 15       	cp	r18, r5
    5eb6:	10 f4       	brcc	.+4      	; 0x5ebc <vfprintf+0x6ee>
    5eb8:	83 e0       	ldi	r24, 0x03	; 3
    5eba:	bd cf       	rjmp	.-134    	; 0x5e36 <vfprintf+0x668>
    5ebc:	51 2c       	mov	r5, r1
    5ebe:	c0 cf       	rjmp	.-128    	; 0x5e40 <vfprintf+0x672>
    5ec0:	60 96       	adiw	r28, 0x10	; 16
    5ec2:	e2 e1       	ldi	r30, 0x12	; 18
    5ec4:	0c 94 c1 2f 	jmp	0x5f82	; 0x5f82 <__epilogue_restores__>

00005ec8 <__divmodhi4>:
    5ec8:	97 fb       	bst	r25, 7
    5eca:	07 2e       	mov	r0, r23
    5ecc:	16 f4       	brtc	.+4      	; 0x5ed2 <__divmodhi4+0xa>
    5ece:	00 94       	com	r0
    5ed0:	07 d0       	rcall	.+14     	; 0x5ee0 <__divmodhi4_neg1>
    5ed2:	77 fd       	sbrc	r23, 7
    5ed4:	09 d0       	rcall	.+18     	; 0x5ee8 <__divmodhi4_neg2>
    5ed6:	0e 94 d9 2f 	call	0x5fb2	; 0x5fb2 <__udivmodhi4>
    5eda:	07 fc       	sbrc	r0, 7
    5edc:	05 d0       	rcall	.+10     	; 0x5ee8 <__divmodhi4_neg2>
    5ede:	3e f4       	brtc	.+14     	; 0x5eee <__divmodhi4_exit>

00005ee0 <__divmodhi4_neg1>:
    5ee0:	90 95       	com	r25
    5ee2:	81 95       	neg	r24
    5ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ee6:	08 95       	ret

00005ee8 <__divmodhi4_neg2>:
    5ee8:	70 95       	com	r23
    5eea:	61 95       	neg	r22
    5eec:	7f 4f       	sbci	r23, 0xFF	; 255

00005eee <__divmodhi4_exit>:
    5eee:	08 95       	ret

00005ef0 <__divmodsi4>:
    5ef0:	05 2e       	mov	r0, r21
    5ef2:	97 fb       	bst	r25, 7
    5ef4:	1e f4       	brtc	.+6      	; 0x5efc <__divmodsi4+0xc>
    5ef6:	00 94       	com	r0
    5ef8:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <__negsi2>
    5efc:	57 fd       	sbrc	r21, 7
    5efe:	07 d0       	rcall	.+14     	; 0x5f0e <__divmodsi4_neg2>
    5f00:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__udivmodsi4>
    5f04:	07 fc       	sbrc	r0, 7
    5f06:	03 d0       	rcall	.+6      	; 0x5f0e <__divmodsi4_neg2>
    5f08:	4e f4       	brtc	.+18     	; 0x5f1c <__divmodsi4_exit>
    5f0a:	0c 94 8f 2f 	jmp	0x5f1e	; 0x5f1e <__negsi2>

00005f0e <__divmodsi4_neg2>:
    5f0e:	50 95       	com	r21
    5f10:	40 95       	com	r20
    5f12:	30 95       	com	r19
    5f14:	21 95       	neg	r18
    5f16:	3f 4f       	sbci	r19, 0xFF	; 255
    5f18:	4f 4f       	sbci	r20, 0xFF	; 255
    5f1a:	5f 4f       	sbci	r21, 0xFF	; 255

00005f1c <__divmodsi4_exit>:
    5f1c:	08 95       	ret

00005f1e <__negsi2>:
    5f1e:	90 95       	com	r25
    5f20:	80 95       	com	r24
    5f22:	70 95       	com	r23
    5f24:	61 95       	neg	r22
    5f26:	7f 4f       	sbci	r23, 0xFF	; 255
    5f28:	8f 4f       	sbci	r24, 0xFF	; 255
    5f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f2c:	08 95       	ret

00005f2e <__tablejump2__>:
    5f2e:	ee 0f       	add	r30, r30
    5f30:	ff 1f       	adc	r31, r31
    5f32:	05 90       	lpm	r0, Z+
    5f34:	f4 91       	lpm	r31, Z
    5f36:	e0 2d       	mov	r30, r0
    5f38:	09 94       	ijmp

00005f3a <__muluhisi3>:
    5f3a:	0e 94 0f 30 	call	0x601e	; 0x601e <__umulhisi3>
    5f3e:	a5 9f       	mul	r26, r21
    5f40:	90 0d       	add	r25, r0
    5f42:	b4 9f       	mul	r27, r20
    5f44:	90 0d       	add	r25, r0
    5f46:	a4 9f       	mul	r26, r20
    5f48:	80 0d       	add	r24, r0
    5f4a:	91 1d       	adc	r25, r1
    5f4c:	11 24       	eor	r1, r1
    5f4e:	08 95       	ret

00005f50 <__prologue_saves__>:
    5f50:	2f 92       	push	r2
    5f52:	3f 92       	push	r3
    5f54:	4f 92       	push	r4
    5f56:	5f 92       	push	r5
    5f58:	6f 92       	push	r6
    5f5a:	7f 92       	push	r7
    5f5c:	8f 92       	push	r8
    5f5e:	9f 92       	push	r9
    5f60:	af 92       	push	r10
    5f62:	bf 92       	push	r11
    5f64:	cf 92       	push	r12
    5f66:	df 92       	push	r13
    5f68:	ef 92       	push	r14
    5f6a:	ff 92       	push	r15
    5f6c:	0f 93       	push	r16
    5f6e:	1f 93       	push	r17
    5f70:	cf 93       	push	r28
    5f72:	df 93       	push	r29
    5f74:	cd b7       	in	r28, 0x3d	; 61
    5f76:	de b7       	in	r29, 0x3e	; 62
    5f78:	ca 1b       	sub	r28, r26
    5f7a:	db 0b       	sbc	r29, r27
    5f7c:	cd bf       	out	0x3d, r28	; 61
    5f7e:	de bf       	out	0x3e, r29	; 62
    5f80:	09 94       	ijmp

00005f82 <__epilogue_restores__>:
    5f82:	2a 88       	ldd	r2, Y+18	; 0x12
    5f84:	39 88       	ldd	r3, Y+17	; 0x11
    5f86:	48 88       	ldd	r4, Y+16	; 0x10
    5f88:	5f 84       	ldd	r5, Y+15	; 0x0f
    5f8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    5f8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    5f8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5f90:	9b 84       	ldd	r9, Y+11	; 0x0b
    5f92:	aa 84       	ldd	r10, Y+10	; 0x0a
    5f94:	b9 84       	ldd	r11, Y+9	; 0x09
    5f96:	c8 84       	ldd	r12, Y+8	; 0x08
    5f98:	df 80       	ldd	r13, Y+7	; 0x07
    5f9a:	ee 80       	ldd	r14, Y+6	; 0x06
    5f9c:	fd 80       	ldd	r15, Y+5	; 0x05
    5f9e:	0c 81       	ldd	r16, Y+4	; 0x04
    5fa0:	1b 81       	ldd	r17, Y+3	; 0x03
    5fa2:	aa 81       	ldd	r26, Y+2	; 0x02
    5fa4:	b9 81       	ldd	r27, Y+1	; 0x01
    5fa6:	ce 0f       	add	r28, r30
    5fa8:	d1 1d       	adc	r29, r1
    5faa:	cd bf       	out	0x3d, r28	; 61
    5fac:	de bf       	out	0x3e, r29	; 62
    5fae:	ed 01       	movw	r28, r26
    5fb0:	08 95       	ret

00005fb2 <__udivmodhi4>:
    5fb2:	aa 1b       	sub	r26, r26
    5fb4:	bb 1b       	sub	r27, r27
    5fb6:	51 e1       	ldi	r21, 0x11	; 17
    5fb8:	07 c0       	rjmp	.+14     	; 0x5fc8 <__udivmodhi4_ep>

00005fba <__udivmodhi4_loop>:
    5fba:	aa 1f       	adc	r26, r26
    5fbc:	bb 1f       	adc	r27, r27
    5fbe:	a6 17       	cp	r26, r22
    5fc0:	b7 07       	cpc	r27, r23
    5fc2:	10 f0       	brcs	.+4      	; 0x5fc8 <__udivmodhi4_ep>
    5fc4:	a6 1b       	sub	r26, r22
    5fc6:	b7 0b       	sbc	r27, r23

00005fc8 <__udivmodhi4_ep>:
    5fc8:	88 1f       	adc	r24, r24
    5fca:	99 1f       	adc	r25, r25
    5fcc:	5a 95       	dec	r21
    5fce:	a9 f7       	brne	.-22     	; 0x5fba <__udivmodhi4_loop>
    5fd0:	80 95       	com	r24
    5fd2:	90 95       	com	r25
    5fd4:	bc 01       	movw	r22, r24
    5fd6:	cd 01       	movw	r24, r26
    5fd8:	08 95       	ret

00005fda <__udivmodsi4>:
    5fda:	a1 e2       	ldi	r26, 0x21	; 33
    5fdc:	1a 2e       	mov	r1, r26
    5fde:	aa 1b       	sub	r26, r26
    5fe0:	bb 1b       	sub	r27, r27
    5fe2:	fd 01       	movw	r30, r26
    5fe4:	0d c0       	rjmp	.+26     	; 0x6000 <__udivmodsi4_ep>

00005fe6 <__udivmodsi4_loop>:
    5fe6:	aa 1f       	adc	r26, r26
    5fe8:	bb 1f       	adc	r27, r27
    5fea:	ee 1f       	adc	r30, r30
    5fec:	ff 1f       	adc	r31, r31
    5fee:	a2 17       	cp	r26, r18
    5ff0:	b3 07       	cpc	r27, r19
    5ff2:	e4 07       	cpc	r30, r20
    5ff4:	f5 07       	cpc	r31, r21
    5ff6:	20 f0       	brcs	.+8      	; 0x6000 <__udivmodsi4_ep>
    5ff8:	a2 1b       	sub	r26, r18
    5ffa:	b3 0b       	sbc	r27, r19
    5ffc:	e4 0b       	sbc	r30, r20
    5ffe:	f5 0b       	sbc	r31, r21

00006000 <__udivmodsi4_ep>:
    6000:	66 1f       	adc	r22, r22
    6002:	77 1f       	adc	r23, r23
    6004:	88 1f       	adc	r24, r24
    6006:	99 1f       	adc	r25, r25
    6008:	1a 94       	dec	r1
    600a:	69 f7       	brne	.-38     	; 0x5fe6 <__udivmodsi4_loop>
    600c:	60 95       	com	r22
    600e:	70 95       	com	r23
    6010:	80 95       	com	r24
    6012:	90 95       	com	r25
    6014:	9b 01       	movw	r18, r22
    6016:	ac 01       	movw	r20, r24
    6018:	bd 01       	movw	r22, r26
    601a:	cf 01       	movw	r24, r30
    601c:	08 95       	ret

0000601e <__umulhisi3>:
    601e:	a2 9f       	mul	r26, r18
    6020:	b0 01       	movw	r22, r0
    6022:	b3 9f       	mul	r27, r19
    6024:	c0 01       	movw	r24, r0
    6026:	a3 9f       	mul	r26, r19
    6028:	70 0d       	add	r23, r0
    602a:	81 1d       	adc	r24, r1
    602c:	11 24       	eor	r1, r1
    602e:	91 1d       	adc	r25, r1
    6030:	b2 9f       	mul	r27, r18
    6032:	70 0d       	add	r23, r0
    6034:	81 1d       	adc	r24, r1
    6036:	11 24       	eor	r1, r1
    6038:	91 1d       	adc	r25, r1
    603a:	08 95       	ret

0000603c <atoi>:
    603c:	fc 01       	movw	r30, r24
    603e:	88 27       	eor	r24, r24
    6040:	99 27       	eor	r25, r25
    6042:	e8 94       	clt
    6044:	21 91       	ld	r18, Z+
    6046:	20 32       	cpi	r18, 0x20	; 32
    6048:	e9 f3       	breq	.-6      	; 0x6044 <atoi+0x8>
    604a:	29 30       	cpi	r18, 0x09	; 9
    604c:	10 f0       	brcs	.+4      	; 0x6052 <atoi+0x16>
    604e:	2e 30       	cpi	r18, 0x0E	; 14
    6050:	c8 f3       	brcs	.-14     	; 0x6044 <atoi+0x8>
    6052:	2b 32       	cpi	r18, 0x2B	; 43
    6054:	41 f0       	breq	.+16     	; 0x6066 <atoi+0x2a>
    6056:	2d 32       	cpi	r18, 0x2D	; 45
    6058:	39 f4       	brne	.+14     	; 0x6068 <atoi+0x2c>
    605a:	68 94       	set
    605c:	04 c0       	rjmp	.+8      	; 0x6066 <atoi+0x2a>
    605e:	0e 94 78 31 	call	0x62f0	; 0x62f0 <__mulhi_const_10>
    6062:	82 0f       	add	r24, r18
    6064:	91 1d       	adc	r25, r1
    6066:	21 91       	ld	r18, Z+
    6068:	20 53       	subi	r18, 0x30	; 48
    606a:	2a 30       	cpi	r18, 0x0A	; 10
    606c:	c0 f3       	brcs	.-16     	; 0x605e <atoi+0x22>
    606e:	1e f4       	brtc	.+6      	; 0x6076 <atoi+0x3a>
    6070:	90 95       	com	r25
    6072:	81 95       	neg	r24
    6074:	9f 4f       	sbci	r25, 0xFF	; 255
    6076:	08 95       	ret

00006078 <atol>:
    6078:	1f 93       	push	r17
    607a:	fc 01       	movw	r30, r24
    607c:	99 27       	eor	r25, r25
    607e:	88 27       	eor	r24, r24
    6080:	bc 01       	movw	r22, r24
    6082:	e8 94       	clt
    6084:	11 91       	ld	r17, Z+
    6086:	10 32       	cpi	r17, 0x20	; 32
    6088:	e9 f3       	breq	.-6      	; 0x6084 <atol+0xc>
    608a:	19 30       	cpi	r17, 0x09	; 9
    608c:	10 f0       	brcs	.+4      	; 0x6092 <atol+0x1a>
    608e:	1e 30       	cpi	r17, 0x0E	; 14
    6090:	c8 f3       	brcs	.-14     	; 0x6084 <atol+0xc>
    6092:	1b 32       	cpi	r17, 0x2B	; 43
    6094:	51 f0       	breq	.+20     	; 0x60aa <atol+0x32>
    6096:	1d 32       	cpi	r17, 0x2D	; 45
    6098:	49 f4       	brne	.+18     	; 0x60ac <atol+0x34>
    609a:	68 94       	set
    609c:	06 c0       	rjmp	.+12     	; 0x60aa <atol+0x32>
    609e:	0e 94 63 31 	call	0x62c6	; 0x62c6 <__mulsi_const_10>
    60a2:	61 0f       	add	r22, r17
    60a4:	71 1d       	adc	r23, r1
    60a6:	81 1d       	adc	r24, r1
    60a8:	91 1d       	adc	r25, r1
    60aa:	11 91       	ld	r17, Z+
    60ac:	10 53       	subi	r17, 0x30	; 48
    60ae:	1a 30       	cpi	r17, 0x0A	; 10
    60b0:	b0 f3       	brcs	.-20     	; 0x609e <atol+0x26>
    60b2:	3e f4       	brtc	.+14     	; 0x60c2 <atol+0x4a>
    60b4:	90 95       	com	r25
    60b6:	80 95       	com	r24
    60b8:	70 95       	com	r23
    60ba:	61 95       	neg	r22
    60bc:	7f 4f       	sbci	r23, 0xFF	; 255
    60be:	8f 4f       	sbci	r24, 0xFF	; 255
    60c0:	9f 4f       	sbci	r25, 0xFF	; 255
    60c2:	1f 91       	pop	r17
    60c4:	08 95       	ret

000060c6 <__ftoa_engine>:
    60c6:	28 30       	cpi	r18, 0x08	; 8
    60c8:	08 f0       	brcs	.+2      	; 0x60cc <__ftoa_engine+0x6>
    60ca:	27 e0       	ldi	r18, 0x07	; 7
    60cc:	33 27       	eor	r19, r19
    60ce:	da 01       	movw	r26, r20
    60d0:	99 0f       	add	r25, r25
    60d2:	31 1d       	adc	r19, r1
    60d4:	87 fd       	sbrc	r24, 7
    60d6:	91 60       	ori	r25, 0x01	; 1
    60d8:	00 96       	adiw	r24, 0x00	; 0
    60da:	61 05       	cpc	r22, r1
    60dc:	71 05       	cpc	r23, r1
    60de:	39 f4       	brne	.+14     	; 0x60ee <__ftoa_engine+0x28>
    60e0:	32 60       	ori	r19, 0x02	; 2
    60e2:	2e 5f       	subi	r18, 0xFE	; 254
    60e4:	3d 93       	st	X+, r19
    60e6:	30 e3       	ldi	r19, 0x30	; 48
    60e8:	2a 95       	dec	r18
    60ea:	e1 f7       	brne	.-8      	; 0x60e4 <__ftoa_engine+0x1e>
    60ec:	08 95       	ret
    60ee:	9f 3f       	cpi	r25, 0xFF	; 255
    60f0:	30 f0       	brcs	.+12     	; 0x60fe <__ftoa_engine+0x38>
    60f2:	80 38       	cpi	r24, 0x80	; 128
    60f4:	71 05       	cpc	r23, r1
    60f6:	61 05       	cpc	r22, r1
    60f8:	09 f0       	breq	.+2      	; 0x60fc <__ftoa_engine+0x36>
    60fa:	3c 5f       	subi	r19, 0xFC	; 252
    60fc:	3c 5f       	subi	r19, 0xFC	; 252
    60fe:	3d 93       	st	X+, r19
    6100:	91 30       	cpi	r25, 0x01	; 1
    6102:	08 f0       	brcs	.+2      	; 0x6106 <__ftoa_engine+0x40>
    6104:	80 68       	ori	r24, 0x80	; 128
    6106:	91 1d       	adc	r25, r1
    6108:	df 93       	push	r29
    610a:	cf 93       	push	r28
    610c:	1f 93       	push	r17
    610e:	0f 93       	push	r16
    6110:	ff 92       	push	r15
    6112:	ef 92       	push	r14
    6114:	19 2f       	mov	r17, r25
    6116:	98 7f       	andi	r25, 0xF8	; 248
    6118:	96 95       	lsr	r25
    611a:	e9 2f       	mov	r30, r25
    611c:	96 95       	lsr	r25
    611e:	96 95       	lsr	r25
    6120:	e9 0f       	add	r30, r25
    6122:	ff 27       	eor	r31, r31
    6124:	ea 53       	subi	r30, 0x3A	; 58
    6126:	fe 4f       	sbci	r31, 0xFE	; 254
    6128:	99 27       	eor	r25, r25
    612a:	33 27       	eor	r19, r19
    612c:	ee 24       	eor	r14, r14
    612e:	ff 24       	eor	r15, r15
    6130:	a7 01       	movw	r20, r14
    6132:	e7 01       	movw	r28, r14
    6134:	05 90       	lpm	r0, Z+
    6136:	08 94       	sec
    6138:	07 94       	ror	r0
    613a:	28 f4       	brcc	.+10     	; 0x6146 <__ftoa_engine+0x80>
    613c:	36 0f       	add	r19, r22
    613e:	e7 1e       	adc	r14, r23
    6140:	f8 1e       	adc	r15, r24
    6142:	49 1f       	adc	r20, r25
    6144:	51 1d       	adc	r21, r1
    6146:	66 0f       	add	r22, r22
    6148:	77 1f       	adc	r23, r23
    614a:	88 1f       	adc	r24, r24
    614c:	99 1f       	adc	r25, r25
    614e:	06 94       	lsr	r0
    6150:	a1 f7       	brne	.-24     	; 0x613a <__ftoa_engine+0x74>
    6152:	05 90       	lpm	r0, Z+
    6154:	07 94       	ror	r0
    6156:	28 f4       	brcc	.+10     	; 0x6162 <__ftoa_engine+0x9c>
    6158:	e7 0e       	add	r14, r23
    615a:	f8 1e       	adc	r15, r24
    615c:	49 1f       	adc	r20, r25
    615e:	56 1f       	adc	r21, r22
    6160:	c1 1d       	adc	r28, r1
    6162:	77 0f       	add	r23, r23
    6164:	88 1f       	adc	r24, r24
    6166:	99 1f       	adc	r25, r25
    6168:	66 1f       	adc	r22, r22
    616a:	06 94       	lsr	r0
    616c:	a1 f7       	brne	.-24     	; 0x6156 <__ftoa_engine+0x90>
    616e:	05 90       	lpm	r0, Z+
    6170:	07 94       	ror	r0
    6172:	28 f4       	brcc	.+10     	; 0x617e <__ftoa_engine+0xb8>
    6174:	f8 0e       	add	r15, r24
    6176:	49 1f       	adc	r20, r25
    6178:	56 1f       	adc	r21, r22
    617a:	c7 1f       	adc	r28, r23
    617c:	d1 1d       	adc	r29, r1
    617e:	88 0f       	add	r24, r24
    6180:	99 1f       	adc	r25, r25
    6182:	66 1f       	adc	r22, r22
    6184:	77 1f       	adc	r23, r23
    6186:	06 94       	lsr	r0
    6188:	a1 f7       	brne	.-24     	; 0x6172 <__ftoa_engine+0xac>
    618a:	05 90       	lpm	r0, Z+
    618c:	07 94       	ror	r0
    618e:	20 f4       	brcc	.+8      	; 0x6198 <__ftoa_engine+0xd2>
    6190:	49 0f       	add	r20, r25
    6192:	56 1f       	adc	r21, r22
    6194:	c7 1f       	adc	r28, r23
    6196:	d8 1f       	adc	r29, r24
    6198:	99 0f       	add	r25, r25
    619a:	66 1f       	adc	r22, r22
    619c:	77 1f       	adc	r23, r23
    619e:	88 1f       	adc	r24, r24
    61a0:	06 94       	lsr	r0
    61a2:	a9 f7       	brne	.-22     	; 0x618e <__ftoa_engine+0xc8>
    61a4:	84 91       	lpm	r24, Z
    61a6:	10 95       	com	r17
    61a8:	17 70       	andi	r17, 0x07	; 7
    61aa:	41 f0       	breq	.+16     	; 0x61bc <__ftoa_engine+0xf6>
    61ac:	d6 95       	lsr	r29
    61ae:	c7 95       	ror	r28
    61b0:	57 95       	ror	r21
    61b2:	47 95       	ror	r20
    61b4:	f7 94       	ror	r15
    61b6:	e7 94       	ror	r14
    61b8:	1a 95       	dec	r17
    61ba:	c1 f7       	brne	.-16     	; 0x61ac <__ftoa_engine+0xe6>
    61bc:	ec e6       	ldi	r30, 0x6C	; 108
    61be:	f1 e0       	ldi	r31, 0x01	; 1
    61c0:	68 94       	set
    61c2:	15 90       	lpm	r1, Z+
    61c4:	15 91       	lpm	r17, Z+
    61c6:	35 91       	lpm	r19, Z+
    61c8:	65 91       	lpm	r22, Z+
    61ca:	95 91       	lpm	r25, Z+
    61cc:	05 90       	lpm	r0, Z+
    61ce:	7f e2       	ldi	r23, 0x2F	; 47
    61d0:	73 95       	inc	r23
    61d2:	e1 18       	sub	r14, r1
    61d4:	f1 0a       	sbc	r15, r17
    61d6:	43 0b       	sbc	r20, r19
    61d8:	56 0b       	sbc	r21, r22
    61da:	c9 0b       	sbc	r28, r25
    61dc:	d0 09       	sbc	r29, r0
    61de:	c0 f7       	brcc	.-16     	; 0x61d0 <__ftoa_engine+0x10a>
    61e0:	e1 0c       	add	r14, r1
    61e2:	f1 1e       	adc	r15, r17
    61e4:	43 1f       	adc	r20, r19
    61e6:	56 1f       	adc	r21, r22
    61e8:	c9 1f       	adc	r28, r25
    61ea:	d0 1d       	adc	r29, r0
    61ec:	7e f4       	brtc	.+30     	; 0x620c <__ftoa_engine+0x146>
    61ee:	70 33       	cpi	r23, 0x30	; 48
    61f0:	11 f4       	brne	.+4      	; 0x61f6 <__ftoa_engine+0x130>
    61f2:	8a 95       	dec	r24
    61f4:	e6 cf       	rjmp	.-52     	; 0x61c2 <__ftoa_engine+0xfc>
    61f6:	e8 94       	clt
    61f8:	01 50       	subi	r16, 0x01	; 1
    61fa:	30 f0       	brcs	.+12     	; 0x6208 <__ftoa_engine+0x142>
    61fc:	08 0f       	add	r16, r24
    61fe:	0a f4       	brpl	.+2      	; 0x6202 <__ftoa_engine+0x13c>
    6200:	00 27       	eor	r16, r16
    6202:	02 17       	cp	r16, r18
    6204:	08 f4       	brcc	.+2      	; 0x6208 <__ftoa_engine+0x142>
    6206:	20 2f       	mov	r18, r16
    6208:	23 95       	inc	r18
    620a:	02 2f       	mov	r16, r18
    620c:	7a 33       	cpi	r23, 0x3A	; 58
    620e:	28 f0       	brcs	.+10     	; 0x621a <__ftoa_engine+0x154>
    6210:	79 e3       	ldi	r23, 0x39	; 57
    6212:	7d 93       	st	X+, r23
    6214:	2a 95       	dec	r18
    6216:	e9 f7       	brne	.-6      	; 0x6212 <__ftoa_engine+0x14c>
    6218:	10 c0       	rjmp	.+32     	; 0x623a <__ftoa_engine+0x174>
    621a:	7d 93       	st	X+, r23
    621c:	2a 95       	dec	r18
    621e:	89 f6       	brne	.-94     	; 0x61c2 <__ftoa_engine+0xfc>
    6220:	06 94       	lsr	r0
    6222:	97 95       	ror	r25
    6224:	67 95       	ror	r22
    6226:	37 95       	ror	r19
    6228:	17 95       	ror	r17
    622a:	17 94       	ror	r1
    622c:	e1 18       	sub	r14, r1
    622e:	f1 0a       	sbc	r15, r17
    6230:	43 0b       	sbc	r20, r19
    6232:	56 0b       	sbc	r21, r22
    6234:	c9 0b       	sbc	r28, r25
    6236:	d0 09       	sbc	r29, r0
    6238:	98 f0       	brcs	.+38     	; 0x6260 <__ftoa_engine+0x19a>
    623a:	23 95       	inc	r18
    623c:	7e 91       	ld	r23, -X
    623e:	73 95       	inc	r23
    6240:	7a 33       	cpi	r23, 0x3A	; 58
    6242:	08 f0       	brcs	.+2      	; 0x6246 <__ftoa_engine+0x180>
    6244:	70 e3       	ldi	r23, 0x30	; 48
    6246:	7c 93       	st	X, r23
    6248:	20 13       	cpse	r18, r16
    624a:	b8 f7       	brcc	.-18     	; 0x623a <__ftoa_engine+0x174>
    624c:	7e 91       	ld	r23, -X
    624e:	70 61       	ori	r23, 0x10	; 16
    6250:	7d 93       	st	X+, r23
    6252:	30 f0       	brcs	.+12     	; 0x6260 <__ftoa_engine+0x19a>
    6254:	83 95       	inc	r24
    6256:	71 e3       	ldi	r23, 0x31	; 49
    6258:	7d 93       	st	X+, r23
    625a:	70 e3       	ldi	r23, 0x30	; 48
    625c:	2a 95       	dec	r18
    625e:	e1 f7       	brne	.-8      	; 0x6258 <__ftoa_engine+0x192>
    6260:	11 24       	eor	r1, r1
    6262:	ef 90       	pop	r14
    6264:	ff 90       	pop	r15
    6266:	0f 91       	pop	r16
    6268:	1f 91       	pop	r17
    626a:	cf 91       	pop	r28
    626c:	df 91       	pop	r29
    626e:	99 27       	eor	r25, r25
    6270:	87 fd       	sbrc	r24, 7
    6272:	90 95       	com	r25
    6274:	08 95       	ret

00006276 <strnlen_P>:
    6276:	fc 01       	movw	r30, r24
    6278:	05 90       	lpm	r0, Z+
    627a:	61 50       	subi	r22, 0x01	; 1
    627c:	70 40       	sbci	r23, 0x00	; 0
    627e:	01 10       	cpse	r0, r1
    6280:	d8 f7       	brcc	.-10     	; 0x6278 <strnlen_P+0x2>
    6282:	80 95       	com	r24
    6284:	90 95       	com	r25
    6286:	8e 0f       	add	r24, r30
    6288:	9f 1f       	adc	r25, r31
    628a:	08 95       	ret

0000628c <strcat>:
    628c:	fb 01       	movw	r30, r22
    628e:	dc 01       	movw	r26, r24
    6290:	0d 90       	ld	r0, X+
    6292:	00 20       	and	r0, r0
    6294:	e9 f7       	brne	.-6      	; 0x6290 <strcat+0x4>
    6296:	11 97       	sbiw	r26, 0x01	; 1
    6298:	01 90       	ld	r0, Z+
    629a:	0d 92       	st	X+, r0
    629c:	00 20       	and	r0, r0
    629e:	e1 f7       	brne	.-8      	; 0x6298 <strcat+0xc>
    62a0:	08 95       	ret

000062a2 <strcpy>:
    62a2:	fb 01       	movw	r30, r22
    62a4:	dc 01       	movw	r26, r24
    62a6:	01 90       	ld	r0, Z+
    62a8:	0d 92       	st	X+, r0
    62aa:	00 20       	and	r0, r0
    62ac:	e1 f7       	brne	.-8      	; 0x62a6 <strcpy+0x4>
    62ae:	08 95       	ret

000062b0 <strnlen>:
    62b0:	fc 01       	movw	r30, r24
    62b2:	61 50       	subi	r22, 0x01	; 1
    62b4:	70 40       	sbci	r23, 0x00	; 0
    62b6:	01 90       	ld	r0, Z+
    62b8:	01 10       	cpse	r0, r1
    62ba:	d8 f7       	brcc	.-10     	; 0x62b2 <strnlen+0x2>
    62bc:	80 95       	com	r24
    62be:	90 95       	com	r25
    62c0:	8e 0f       	add	r24, r30
    62c2:	9f 1f       	adc	r25, r31
    62c4:	08 95       	ret

000062c6 <__mulsi_const_10>:
    62c6:	59 2f       	mov	r21, r25
    62c8:	48 2f       	mov	r20, r24
    62ca:	37 2f       	mov	r19, r23
    62cc:	26 2f       	mov	r18, r22
    62ce:	66 0f       	add	r22, r22
    62d0:	77 1f       	adc	r23, r23
    62d2:	88 1f       	adc	r24, r24
    62d4:	99 1f       	adc	r25, r25
    62d6:	66 0f       	add	r22, r22
    62d8:	77 1f       	adc	r23, r23
    62da:	88 1f       	adc	r24, r24
    62dc:	99 1f       	adc	r25, r25
    62de:	62 0f       	add	r22, r18
    62e0:	73 1f       	adc	r23, r19
    62e2:	84 1f       	adc	r24, r20
    62e4:	95 1f       	adc	r25, r21
    62e6:	66 0f       	add	r22, r22
    62e8:	77 1f       	adc	r23, r23
    62ea:	88 1f       	adc	r24, r24
    62ec:	99 1f       	adc	r25, r25
    62ee:	08 95       	ret

000062f0 <__mulhi_const_10>:
    62f0:	7a e0       	ldi	r23, 0x0A	; 10
    62f2:	97 9f       	mul	r25, r23
    62f4:	90 2d       	mov	r25, r0
    62f6:	87 9f       	mul	r24, r23
    62f8:	80 2d       	mov	r24, r0
    62fa:	91 0d       	add	r25, r1
    62fc:	11 24       	eor	r1, r1
    62fe:	08 95       	ret

00006300 <fputc>:
    6300:	0f 93       	push	r16
    6302:	1f 93       	push	r17
    6304:	cf 93       	push	r28
    6306:	df 93       	push	r29
    6308:	fb 01       	movw	r30, r22
    630a:	23 81       	ldd	r18, Z+3	; 0x03
    630c:	21 fd       	sbrc	r18, 1
    630e:	03 c0       	rjmp	.+6      	; 0x6316 <fputc+0x16>
    6310:	8f ef       	ldi	r24, 0xFF	; 255
    6312:	9f ef       	ldi	r25, 0xFF	; 255
    6314:	2c c0       	rjmp	.+88     	; 0x636e <fputc+0x6e>
    6316:	22 ff       	sbrs	r18, 2
    6318:	16 c0       	rjmp	.+44     	; 0x6346 <fputc+0x46>
    631a:	46 81       	ldd	r20, Z+6	; 0x06
    631c:	57 81       	ldd	r21, Z+7	; 0x07
    631e:	24 81       	ldd	r18, Z+4	; 0x04
    6320:	35 81       	ldd	r19, Z+5	; 0x05
    6322:	42 17       	cp	r20, r18
    6324:	53 07       	cpc	r21, r19
    6326:	44 f4       	brge	.+16     	; 0x6338 <fputc+0x38>
    6328:	a0 81       	ld	r26, Z
    632a:	b1 81       	ldd	r27, Z+1	; 0x01
    632c:	9d 01       	movw	r18, r26
    632e:	2f 5f       	subi	r18, 0xFF	; 255
    6330:	3f 4f       	sbci	r19, 0xFF	; 255
    6332:	20 83       	st	Z, r18
    6334:	31 83       	std	Z+1, r19	; 0x01
    6336:	8c 93       	st	X, r24
    6338:	26 81       	ldd	r18, Z+6	; 0x06
    633a:	37 81       	ldd	r19, Z+7	; 0x07
    633c:	2f 5f       	subi	r18, 0xFF	; 255
    633e:	3f 4f       	sbci	r19, 0xFF	; 255
    6340:	26 83       	std	Z+6, r18	; 0x06
    6342:	37 83       	std	Z+7, r19	; 0x07
    6344:	14 c0       	rjmp	.+40     	; 0x636e <fputc+0x6e>
    6346:	8b 01       	movw	r16, r22
    6348:	ec 01       	movw	r28, r24
    634a:	fb 01       	movw	r30, r22
    634c:	00 84       	ldd	r0, Z+8	; 0x08
    634e:	f1 85       	ldd	r31, Z+9	; 0x09
    6350:	e0 2d       	mov	r30, r0
    6352:	09 95       	icall
    6354:	89 2b       	or	r24, r25
    6356:	e1 f6       	brne	.-72     	; 0x6310 <fputc+0x10>
    6358:	d8 01       	movw	r26, r16
    635a:	16 96       	adiw	r26, 0x06	; 6
    635c:	8d 91       	ld	r24, X+
    635e:	9c 91       	ld	r25, X
    6360:	17 97       	sbiw	r26, 0x07	; 7
    6362:	01 96       	adiw	r24, 0x01	; 1
    6364:	16 96       	adiw	r26, 0x06	; 6
    6366:	8d 93       	st	X+, r24
    6368:	9c 93       	st	X, r25
    636a:	17 97       	sbiw	r26, 0x07	; 7
    636c:	ce 01       	movw	r24, r28
    636e:	df 91       	pop	r29
    6370:	cf 91       	pop	r28
    6372:	1f 91       	pop	r17
    6374:	0f 91       	pop	r16
    6376:	08 95       	ret

00006378 <sprintf>:
    6378:	ae e0       	ldi	r26, 0x0E	; 14
    637a:	b0 e0       	ldi	r27, 0x00	; 0
    637c:	e2 ec       	ldi	r30, 0xC2	; 194
    637e:	f1 e3       	ldi	r31, 0x31	; 49
    6380:	0c 94 b6 2f 	jmp	0x5f6c	; 0x5f6c <__prologue_saves__+0x1c>
    6384:	0d 89       	ldd	r16, Y+21	; 0x15
    6386:	1e 89       	ldd	r17, Y+22	; 0x16
    6388:	86 e0       	ldi	r24, 0x06	; 6
    638a:	8c 83       	std	Y+4, r24	; 0x04
    638c:	09 83       	std	Y+1, r16	; 0x01
    638e:	1a 83       	std	Y+2, r17	; 0x02
    6390:	8f ef       	ldi	r24, 0xFF	; 255
    6392:	9f e7       	ldi	r25, 0x7F	; 127
    6394:	8d 83       	std	Y+5, r24	; 0x05
    6396:	9e 83       	std	Y+6, r25	; 0x06
    6398:	ae 01       	movw	r20, r28
    639a:	47 5e       	subi	r20, 0xE7	; 231
    639c:	5f 4f       	sbci	r21, 0xFF	; 255
    639e:	6f 89       	ldd	r22, Y+23	; 0x17
    63a0:	78 8d       	ldd	r23, Y+24	; 0x18
    63a2:	ce 01       	movw	r24, r28
    63a4:	01 96       	adiw	r24, 0x01	; 1
    63a6:	0e 94 e7 2b 	call	0x57ce	; 0x57ce <vfprintf>
    63aa:	ef 81       	ldd	r30, Y+7	; 0x07
    63ac:	f8 85       	ldd	r31, Y+8	; 0x08
    63ae:	e0 0f       	add	r30, r16
    63b0:	f1 1f       	adc	r31, r17
    63b2:	10 82       	st	Z, r1
    63b4:	2e 96       	adiw	r28, 0x0e	; 14
    63b6:	e4 e0       	ldi	r30, 0x04	; 4
    63b8:	0c 94 cf 2f 	jmp	0x5f9e	; 0x5f9e <__epilogue_restores__+0x1c>

000063bc <__ultoa_invert>:
    63bc:	fa 01       	movw	r30, r20
    63be:	aa 27       	eor	r26, r26
    63c0:	28 30       	cpi	r18, 0x08	; 8
    63c2:	51 f1       	breq	.+84     	; 0x6418 <__ultoa_invert+0x5c>
    63c4:	20 31       	cpi	r18, 0x10	; 16
    63c6:	81 f1       	breq	.+96     	; 0x6428 <__ultoa_invert+0x6c>
    63c8:	e8 94       	clt
    63ca:	6f 93       	push	r22
    63cc:	6e 7f       	andi	r22, 0xFE	; 254
    63ce:	6e 5f       	subi	r22, 0xFE	; 254
    63d0:	7f 4f       	sbci	r23, 0xFF	; 255
    63d2:	8f 4f       	sbci	r24, 0xFF	; 255
    63d4:	9f 4f       	sbci	r25, 0xFF	; 255
    63d6:	af 4f       	sbci	r26, 0xFF	; 255
    63d8:	b1 e0       	ldi	r27, 0x01	; 1
    63da:	3e d0       	rcall	.+124    	; 0x6458 <__ultoa_invert+0x9c>
    63dc:	b4 e0       	ldi	r27, 0x04	; 4
    63de:	3c d0       	rcall	.+120    	; 0x6458 <__ultoa_invert+0x9c>
    63e0:	67 0f       	add	r22, r23
    63e2:	78 1f       	adc	r23, r24
    63e4:	89 1f       	adc	r24, r25
    63e6:	9a 1f       	adc	r25, r26
    63e8:	a1 1d       	adc	r26, r1
    63ea:	68 0f       	add	r22, r24
    63ec:	79 1f       	adc	r23, r25
    63ee:	8a 1f       	adc	r24, r26
    63f0:	91 1d       	adc	r25, r1
    63f2:	a1 1d       	adc	r26, r1
    63f4:	6a 0f       	add	r22, r26
    63f6:	71 1d       	adc	r23, r1
    63f8:	81 1d       	adc	r24, r1
    63fa:	91 1d       	adc	r25, r1
    63fc:	a1 1d       	adc	r26, r1
    63fe:	20 d0       	rcall	.+64     	; 0x6440 <__ultoa_invert+0x84>
    6400:	09 f4       	brne	.+2      	; 0x6404 <__ultoa_invert+0x48>
    6402:	68 94       	set
    6404:	3f 91       	pop	r19
    6406:	2a e0       	ldi	r18, 0x0A	; 10
    6408:	26 9f       	mul	r18, r22
    640a:	11 24       	eor	r1, r1
    640c:	30 19       	sub	r19, r0
    640e:	30 5d       	subi	r19, 0xD0	; 208
    6410:	31 93       	st	Z+, r19
    6412:	de f6       	brtc	.-74     	; 0x63ca <__ultoa_invert+0xe>
    6414:	cf 01       	movw	r24, r30
    6416:	08 95       	ret
    6418:	46 2f       	mov	r20, r22
    641a:	47 70       	andi	r20, 0x07	; 7
    641c:	40 5d       	subi	r20, 0xD0	; 208
    641e:	41 93       	st	Z+, r20
    6420:	b3 e0       	ldi	r27, 0x03	; 3
    6422:	0f d0       	rcall	.+30     	; 0x6442 <__ultoa_invert+0x86>
    6424:	c9 f7       	brne	.-14     	; 0x6418 <__ultoa_invert+0x5c>
    6426:	f6 cf       	rjmp	.-20     	; 0x6414 <__ultoa_invert+0x58>
    6428:	46 2f       	mov	r20, r22
    642a:	4f 70       	andi	r20, 0x0F	; 15
    642c:	40 5d       	subi	r20, 0xD0	; 208
    642e:	4a 33       	cpi	r20, 0x3A	; 58
    6430:	18 f0       	brcs	.+6      	; 0x6438 <__ultoa_invert+0x7c>
    6432:	49 5d       	subi	r20, 0xD9	; 217
    6434:	31 fd       	sbrc	r19, 1
    6436:	40 52       	subi	r20, 0x20	; 32
    6438:	41 93       	st	Z+, r20
    643a:	02 d0       	rcall	.+4      	; 0x6440 <__ultoa_invert+0x84>
    643c:	a9 f7       	brne	.-22     	; 0x6428 <__ultoa_invert+0x6c>
    643e:	ea cf       	rjmp	.-44     	; 0x6414 <__ultoa_invert+0x58>
    6440:	b4 e0       	ldi	r27, 0x04	; 4
    6442:	a6 95       	lsr	r26
    6444:	97 95       	ror	r25
    6446:	87 95       	ror	r24
    6448:	77 95       	ror	r23
    644a:	67 95       	ror	r22
    644c:	ba 95       	dec	r27
    644e:	c9 f7       	brne	.-14     	; 0x6442 <__ultoa_invert+0x86>
    6450:	00 97       	sbiw	r24, 0x00	; 0
    6452:	61 05       	cpc	r22, r1
    6454:	71 05       	cpc	r23, r1
    6456:	08 95       	ret
    6458:	9b 01       	movw	r18, r22
    645a:	ac 01       	movw	r20, r24
    645c:	0a 2e       	mov	r0, r26
    645e:	06 94       	lsr	r0
    6460:	57 95       	ror	r21
    6462:	47 95       	ror	r20
    6464:	37 95       	ror	r19
    6466:	27 95       	ror	r18
    6468:	ba 95       	dec	r27
    646a:	c9 f7       	brne	.-14     	; 0x645e <__ultoa_invert+0xa2>
    646c:	62 0f       	add	r22, r18
    646e:	73 1f       	adc	r23, r19
    6470:	84 1f       	adc	r24, r20
    6472:	95 1f       	adc	r25, r21
    6474:	a0 1d       	adc	r26, r0
    6476:	08 95       	ret

00006478 <eeprom_read_block>:
    6478:	60 50       	subi	r22, 0x00	; 0
    647a:	7c 4e       	sbci	r23, 0xEC	; 236
    647c:	0c 94 77 32 	jmp	0x64ee	; 0x64ee <memcpy>

00006480 <eeprom_update_block>:
    6480:	dc 01       	movw	r26, r24
    6482:	a4 0f       	add	r26, r20
    6484:	b5 1f       	adc	r27, r21
    6486:	41 50       	subi	r20, 0x01	; 1
    6488:	50 40       	sbci	r21, 0x00	; 0
    648a:	48 f0       	brcs	.+18     	; 0x649e <eeprom_update_block+0x1e>
    648c:	cb 01       	movw	r24, r22
    648e:	84 0f       	add	r24, r20
    6490:	95 1f       	adc	r25, r21
    6492:	2e 91       	ld	r18, -X
    6494:	0e 94 51 32 	call	0x64a2	; 0x64a2 <eeprom_update_r18>
    6498:	41 50       	subi	r20, 0x01	; 1
    649a:	50 40       	sbci	r21, 0x00	; 0
    649c:	d0 f7       	brcc	.-12     	; 0x6492 <eeprom_update_block+0x12>
    649e:	08 95       	ret

000064a0 <eeprom_update_byte>:
    64a0:	26 2f       	mov	r18, r22

000064a2 <eeprom_update_r18>:
    64a2:	0e 94 73 32 	call	0x64e6	; 0x64e6 <eeprom_mapen>
    64a6:	00 80       	ld	r0, Z
    64a8:	02 16       	cp	r0, r18
    64aa:	19 f0       	breq	.+6      	; 0x64b2 <eeprom_update_r18+0x10>
    64ac:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <eeprom_write_r18>
    64b0:	01 97       	sbiw	r24, 0x01	; 1
    64b2:	01 97       	sbiw	r24, 0x01	; 1
    64b4:	08 95       	ret

000064b6 <eeprom_write_byte>:
    64b6:	26 2f       	mov	r18, r22

000064b8 <eeprom_write_r18>:
    64b8:	af 93       	push	r26
    64ba:	bf 93       	push	r27
    64bc:	e0 e0       	ldi	r30, 0x00	; 0
    64be:	f0 e1       	ldi	r31, 0x10	; 16
    64c0:	32 81       	ldd	r19, Z+2	; 0x02
    64c2:	31 fd       	sbrc	r19, 1
    64c4:	fd cf       	rjmp	.-6      	; 0x64c0 <eeprom_write_r18+0x8>
    64c6:	dc 01       	movw	r26, r24
    64c8:	a0 50       	subi	r26, 0x00	; 0
    64ca:	bc 4e       	sbci	r27, 0xEC	; 236
    64cc:	2c 93       	st	X, r18
    64ce:	2d e9       	ldi	r18, 0x9D	; 157
    64d0:	24 bf       	out	0x34, r18	; 52
    64d2:	23 e0       	ldi	r18, 0x03	; 3
    64d4:	20 83       	st	Z, r18
    64d6:	01 96       	adiw	r24, 0x01	; 1
    64d8:	bf 91       	pop	r27
    64da:	af 91       	pop	r26
    64dc:	08 95       	ret

000064de <eeprom_read_byte>:
    64de:	03 d0       	rcall	.+6      	; 0x64e6 <eeprom_mapen>
    64e0:	80 81       	ld	r24, Z
    64e2:	99 27       	eor	r25, r25
    64e4:	08 95       	ret

000064e6 <eeprom_mapen>:
    64e6:	fc 01       	movw	r30, r24
    64e8:	e0 50       	subi	r30, 0x00	; 0
    64ea:	fc 4e       	sbci	r31, 0xEC	; 236
    64ec:	08 95       	ret

000064ee <memcpy>:
    64ee:	fb 01       	movw	r30, r22
    64f0:	dc 01       	movw	r26, r24
    64f2:	02 c0       	rjmp	.+4      	; 0x64f8 <memcpy+0xa>
    64f4:	01 90       	ld	r0, Z+
    64f6:	0d 92       	st	X+, r0
    64f8:	41 50       	subi	r20, 0x01	; 1
    64fa:	50 40       	sbci	r21, 0x00	; 0
    64fc:	d8 f7       	brcc	.-10     	; 0x64f4 <memcpy+0x6>
    64fe:	08 95       	ret

00006500 <_exit>:
    6500:	f8 94       	cli

00006502 <__stop_program>:
    6502:	ff cf       	rjmp	.-2      	; 0x6502 <__stop_program>
