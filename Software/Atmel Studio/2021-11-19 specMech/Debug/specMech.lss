
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00004e96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000049b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000452  000089b0  000049b0  00004a44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000082d  00802800  00802800  00004e96  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00004e96  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004ef4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000610  00000000  00000000  00004f38  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009bbe  00000000  00000000  00005548  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000444c  00000000  00000000  0000f106  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004208  00000000  00000000  00013552  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000fcc  00000000  00000000  0001775c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002323  00000000  00000000  00018728  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000420e  00000000  00000000  0001aa4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b0  00000000  00000000  0001ec59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 01 	jmp	0x266	; 0x266 <__ctors_end>
       4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       c:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__vector_3>
      10:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      14:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      18:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      1c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      20:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      24:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      28:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      2c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      30:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__vector_12>
      34:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      38:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      3c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      40:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      44:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__vector_17>
      48:	0c 94 24 1b 	jmp	0x3648	; 0x3648 <__vector_18>
      4c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      50:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <__vector_20>
      54:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      58:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      5c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      60:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      64:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      68:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <__vector_26>
      6c:	0c 94 8b 1b 	jmp	0x3716	; 0x3716 <__vector_27>
      70:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      74:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <__vector_29>
      78:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      7c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      80:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      84:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      88:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      8c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      90:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      94:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <__vector_37>
      98:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__vector_38>
      9c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      a0:	ac 04       	cpc	r10, r12
      a2:	d0 04       	cpc	r13, r0
      a4:	d0 04       	cpc	r13, r0
      a6:	d0 04       	cpc	r13, r0
      a8:	d0 04       	cpc	r13, r0
      aa:	d0 04       	cpc	r13, r0
      ac:	d0 04       	cpc	r13, r0
      ae:	d0 04       	cpc	r13, r0
      b0:	d0 04       	cpc	r13, r0
      b2:	af 04       	cpc	r10, r15
      b4:	d0 04       	cpc	r13, r0
      b6:	d0 04       	cpc	r13, r0
      b8:	d0 04       	cpc	r13, r0
      ba:	d0 04       	cpc	r13, r0
      bc:	d0 04       	cpc	r13, r0
      be:	d0 04       	cpc	r13, r0
      c0:	d0 04       	cpc	r13, r0
      c2:	d0 04       	cpc	r13, r0
      c4:	d0 04       	cpc	r13, r0
      c6:	d0 04       	cpc	r13, r0
      c8:	d0 04       	cpc	r13, r0
      ca:	d0 04       	cpc	r13, r0
      cc:	d0 04       	cpc	r13, r0
      ce:	d0 04       	cpc	r13, r0
      d0:	d0 04       	cpc	r13, r0
      d2:	d0 04       	cpc	r13, r0
      d4:	9a 04       	cpc	r9, r10
      d6:	d0 04       	cpc	r13, r0
      d8:	d0 04       	cpc	r13, r0
      da:	d0 04       	cpc	r13, r0
      dc:	d0 04       	cpc	r13, r0
      de:	d0 04       	cpc	r13, r0
      e0:	d0 04       	cpc	r13, r0
      e2:	d0 04       	cpc	r13, r0
      e4:	d0 04       	cpc	r13, r0
      e6:	d0 04       	cpc	r13, r0
      e8:	a0 04       	cpc	r10, r0
      ea:	d0 04       	cpc	r13, r0
      ec:	9d 04       	cpc	r9, r13
      ee:	d0 04       	cpc	r13, r0
      f0:	d0 04       	cpc	r13, r0
      f2:	a3 04       	cpc	r10, r3
      f4:	a6 04       	cpc	r10, r6
      f6:	a9 04       	cpc	r10, r9
      f8:	6e 0f       	add	r22, r30
      fa:	6e 0f       	add	r22, r30
      fc:	6e 0f       	add	r22, r30
      fe:	37 14       	cp	r3, r7
     100:	37 14       	cp	r3, r7
     102:	37 14       	cp	r3, r7
     104:	37 14       	cp	r3, r7
     106:	37 14       	cp	r3, r7
     108:	37 14       	cp	r3, r7
     10a:	37 14       	cp	r3, r7
     10c:	37 14       	cp	r3, r7
     10e:	37 14       	cp	r3, r7
     110:	37 14       	cp	r3, r7
     112:	37 14       	cp	r3, r7
     114:	37 14       	cp	r3, r7
     116:	37 14       	cp	r3, r7
     118:	37 14       	cp	r3, r7
     11a:	37 14       	cp	r3, r7
     11c:	37 14       	cp	r3, r7
     11e:	37 14       	cp	r3, r7
     120:	37 14       	cp	r3, r7
     122:	f9 13       	cpse	r31, r25
     124:	37 14       	cp	r3, r7
     126:	37 14       	cp	r3, r7
     128:	37 14       	cp	r3, r7
     12a:	37 14       	cp	r3, r7
     12c:	37 14       	cp	r3, r7
     12e:	37 14       	cp	r3, r7
     130:	37 14       	cp	r3, r7
     132:	37 14       	cp	r3, r7
     134:	37 14       	cp	r3, r7
     136:	37 14       	cp	r3, r7
     138:	fe 0f       	add	r31, r30
     13a:	fe 0f       	add	r31, r30
     13c:	fe 0f       	add	r31, r30
     13e:	37 14       	cp	r3, r7
     140:	bc 10       	cpse	r11, r12
     142:	37 14       	cp	r3, r7
     144:	37 14       	cp	r3, r7
     146:	37 14       	cp	r3, r7
     148:	37 14       	cp	r3, r7
     14a:	37 14       	cp	r3, r7
     14c:	37 14       	cp	r3, r7
     14e:	37 14       	cp	r3, r7
     150:	37 14       	cp	r3, r7
     152:	37 14       	cp	r3, r7
     154:	f9 11       	cpse	r31, r9
     156:	cf 12       	cpse	r12, r31
     158:	37 14       	cp	r3, r7
     15a:	37 14       	cp	r3, r7
     15c:	37 14       	cp	r3, r7
     15e:	58 13       	cpse	r21, r24
     160:	37 14       	cp	r3, r7
     162:	a0 13       	cpse	r26, r16

00000164 <__trampolines_end>:
     164:	6e 61       	ori	r22, 0x1E	; 30
     166:	6e 00       	.word	0x006e	; ????

00000168 <__c.2332>:
     168:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     178:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     188:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     198:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1a8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1b8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1c8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1d8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1e8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1f8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     208:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     218:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     228:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     238:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     248:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     258:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf ef       	ldi	r28, 0xFF	; 255
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	df e3       	ldi	r29, 0x3F	; 63
     270:	de bf       	out	0x3e, r29	; 62

00000272 <__do_clear_bss>:
     272:	20 e3       	ldi	r18, 0x30	; 48
     274:	a0 e0       	ldi	r26, 0x00	; 0
     276:	b8 e2       	ldi	r27, 0x28	; 40
     278:	01 c0       	rjmp	.+2      	; 0x27c <.do_clear_bss_start>

0000027a <.do_clear_bss_loop>:
     27a:	1d 92       	st	X+, r1

0000027c <.do_clear_bss_start>:
     27c:	ad 32       	cpi	r26, 0x2D	; 45
     27e:	b2 07       	cpc	r27, r18
     280:	e1 f7       	brne	.-8      	; 0x27a <.do_clear_bss_loop>
     282:	0e 94 a9 08 	call	0x1152	; 0x1152 <main>
     286:	0c 94 d6 24 	jmp	0x49ac	; 0x49ac <_exit>

0000028a <__bad_interrupt>:
     28a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028e <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
uint8_t read_AD590(uint8_t sensor, float *temperature)
{
     28e:	8f 92       	push	r8
     290:	9f 92       	push	r9
     292:	af 92       	push	r10
     294:	bf 92       	push	r11
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <read_AD590+0x16>
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <read_AD590+0x18>
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	7b 01       	movw	r14, r22

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	c9 f0       	breq	.+50     	; 0x2e2 <read_AD590+0x54>
     2b0:	18 f0       	brcs	.+6      	; 0x2b8 <read_AD590+0x2a>
     2b2:	82 30       	cpi	r24, 0x02	; 2
     2b4:	61 f0       	breq	.+24     	; 0x2ce <read_AD590+0x40>
     2b6:	10 c0       	rjmp	.+32     	; 0x2d8 <read_AD590+0x4a>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     2b8:	0f 2e       	mov	r0, r31
     2ba:	f3 e3       	ldi	r31, 0x33	; 51
     2bc:	8f 2e       	mov	r8, r31
     2be:	98 2c       	mov	r9, r8
     2c0:	f3 ef       	ldi	r31, 0xF3	; 243
     2c2:	af 2e       	mov	r10, r31
     2c4:	f0 e4       	ldi	r31, 0x40	; 64
     2c6:	bf 2e       	mov	r11, r31
     2c8:	f0 2d       	mov	r31, r0
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     2ca:	11 e0       	ldi	r17, 0x01	; 1
     2cc:	0e c0       	rjmp	.+28     	; 0x2ea <read_AD590+0x5c>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     2ce:	81 2c       	mov	r8, r1
     2d0:	91 2c       	mov	r9, r1
     2d2:	54 01       	movw	r10, r8
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     2d4:	10 e1       	ldi	r17, 0x10	; 16
			offset = 0.0;
			break;
     2d6:	09 c0       	rjmp	.+18     	; 0x2ea <read_AD590+0x5c>
{

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
     2d8:	81 2c       	mov	r8, r1
     2da:	91 2c       	mov	r9, r1
     2dc:	54 01       	movw	r10, r8
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2de:	10 e0       	ldi	r17, 0x00	; 0
			break;
     2e0:	04 c0       	rjmp	.+8      	; 0x2ea <read_AD590+0x5c>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2e2:	81 2c       	mov	r8, r1
     2e4:	91 2c       	mov	r9, r1
     2e6:	54 01       	movw	r10, r8
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2e8:	14 e0       	ldi	r17, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	66 e0       	ldi	r22, 0x06	; 6
     2ee:	87 e2       	ldi	r24, 0x27	; 39
     2f0:	0e 94 0c 09 	call	0x1218	; 0x1218 <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2f4:	41 2f       	mov	r20, r17
     2f6:	40 95       	com	r20
     2f8:	60 e0       	ldi	r22, 0x00	; 0
     2fa:	87 e2       	ldi	r24, 0x27	; 39
     2fc:	0e 94 0c 09 	call	0x1218	; 0x1218 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     300:	41 2f       	mov	r20, r17
     302:	6a e0       	ldi	r22, 0x0A	; 10
     304:	87 e2       	ldi	r24, 0x27	; 39
     306:	0e 94 0c 09 	call	0x1218	; 0x1218 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30a:	86 e1       	ldi	r24, 0x16	; 22
     30c:	8a 95       	dec	r24
     30e:	f1 f7       	brne	.-4      	; 0x30c <read_AD590+0x7e>
     310:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	if (read_ADS1115(ADC_TE, PGA0512, AIN3, DR128, &voltage) == ERROR) {
     312:	8e 01       	movw	r16, r28
     314:	0f 5f       	subi	r16, 0xFF	; 255
     316:	1f 4f       	sbci	r17, 0xFF	; 255
     318:	20 e8       	ldi	r18, 0x80	; 128
     31a:	40 e7       	ldi	r20, 0x70	; 112
     31c:	68 e0       	ldi	r22, 0x08	; 8
     31e:	88 e4       	ldi	r24, 0x48	; 72
     320:	0e 94 c8 01 	call	0x390	; 0x390 <read_ADS1115>
     324:	83 36       	cpi	r24, 0x63	; 99
     326:	51 f4       	brne	.+20     	; 0x33c <read_AD590+0xae>
		*temperature = BADFLOAT;
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	50 e8       	ldi	r21, 0x80	; 128
     32c:	66 e2       	ldi	r22, 0x26	; 38
     32e:	74 ec       	ldi	r23, 0xC4	; 196
     330:	f7 01       	movw	r30, r14
     332:	40 83       	st	Z, r20
     334:	51 83       	std	Z+1, r21	; 0x01
     336:	62 83       	std	Z+2, r22	; 0x02
     338:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
     33a:	1c c0       	rjmp	.+56     	; 0x374 <read_AD590+0xe6>
	}
	*temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     33c:	20 e0       	ldi	r18, 0x00	; 0
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	4a e7       	ldi	r20, 0x7A	; 122
     342:	54 e4       	ldi	r21, 0x44	; 68
     344:	69 81       	ldd	r22, Y+1	; 0x01
     346:	7a 81       	ldd	r23, Y+2	; 0x02
     348:	8b 81       	ldd	r24, Y+3	; 0x03
     34a:	9c 81       	ldd	r25, Y+4	; 0x04
     34c:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__mulsf3>
     350:	23 e3       	ldi	r18, 0x33	; 51
     352:	33 e9       	ldi	r19, 0x93	; 147
     354:	48 e8       	ldi	r20, 0x88	; 136
     356:	53 e4       	ldi	r21, 0x43	; 67
     358:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__subsf3>
     35c:	9b 01       	movw	r18, r22
     35e:	ac 01       	movw	r20, r24
     360:	c5 01       	movw	r24, r10
     362:	b4 01       	movw	r22, r8
     364:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__addsf3>
     368:	f7 01       	movw	r30, r14
     36a:	60 83       	st	Z, r22
     36c:	71 83       	std	Z+1, r23	; 0x01
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     372:	80 e0       	ldi	r24, 0x00	; 0

}
     374:	24 96       	adiw	r28, 0x04	; 4
     376:	cd bf       	out	0x3d, r28	; 61
     378:	de bf       	out	0x3e, r29	; 62
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	bf 90       	pop	r11
     388:	af 90       	pop	r10
     38a:	9f 90       	pop	r9
     38c:	8f 90       	pop	r8
     38e:	08 95       	ret

00000390 <read_ADS1115>:
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
uint8_t read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins,
	uint8_t datarate, float *voltage)
{
     390:	8f 92       	push	r8
     392:	9f 92       	push	r9
     394:	af 92       	push	r10
     396:	bf 92       	push	r11
     398:	cf 92       	push	r12
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	f8 2e       	mov	r15, r24
     3aa:	e6 2e       	mov	r14, r22
     3ac:	68 01       	movw	r12, r16
	float scale;
	uint8_t confighi, configlo, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     3ae:	46 2b       	or	r20, r22
     3b0:	c4 2f       	mov	r28, r20
     3b2:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     3b4:	d2 2f       	mov	r29, r18
     3b6:	d3 60       	ori	r29, 0x03	; 3

	*voltage = BADFLOAT;
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e8       	ldi	r25, 0x80	; 128
     3bc:	a6 e2       	ldi	r26, 0x26	; 38
     3be:	b4 ec       	ldi	r27, 0xC4	; 196
     3c0:	f8 01       	movw	r30, r16
     3c2:	80 83       	st	Z, r24
     3c4:	91 83       	std	Z+1, r25	; 0x01
     3c6:	a2 83       	std	Z+2, r26	; 0x02
     3c8:	b3 83       	std	Z+3, r27	; 0x03
	if (start_TWI(addr, TWIWRITE == ERROR)) {		// TWI start condition
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	8f 2d       	mov	r24, r15
     3ce:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
     3d2:	08 2f       	mov	r16, r24
     3d4:	88 23       	and	r24, r24
     3d6:	21 f0       	breq	.+8      	; 0x3e0 <read_ADS1115+0x50>
		stop_TWI();
     3d8:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(ERROR);
     3dc:	13 e6       	ldi	r17, 0x63	; 99
     3de:	b4 c0       	rjmp	.+360    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	if ((write_TWI(ADS1115CONFIG) == ERROR)) {		// Write the CONFIG register
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
     3e6:	18 2f       	mov	r17, r24
     3e8:	83 36       	cpi	r24, 0x63	; 99
     3ea:	19 f4       	brne	.+6      	; 0x3f2 <read_ADS1115+0x62>
		stop_TWI();
     3ec:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(ERROR);
     3f0:	ab c0       	rjmp	.+342    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	if ((write_TWI(confighi) == ERROR)) {			// Write high byte
     3f2:	8c 2f       	mov	r24, r28
     3f4:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
     3f8:	18 2f       	mov	r17, r24
     3fa:	83 36       	cpi	r24, 0x63	; 99
     3fc:	19 f4       	brne	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		stop_TWI();
     3fe:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(ERROR);
     402:	a2 c0       	rjmp	.+324    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	if ((write_TWI(configlo) == ERROR)) {			// Write low byte
     404:	8d 2f       	mov	r24, r29
     406:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
     40a:	18 2f       	mov	r17, r24
     40c:	83 36       	cpi	r24, 0x63	; 99
     40e:	19 f4       	brne	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		stop_TWI();
     410:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(ERROR);
     414:	99 c0       	rjmp	.+306    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	stop_TWI();
     416:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
     41a:	fc e1       	ldi	r31, 0x1C	; 28
     41c:	fa 95       	dec	r31
     41e:	f1 f7       	brne	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>

	_delay_us(25);									// Power-up time

	converting = YES;
     420:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     422:	09 c0       	rjmp	.+18     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		start_TWI(addr, TWIREAD);
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	8f 2d       	mov	r24, r15
     428:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
		flag = readlast_TWI();
     42c:	0e 94 67 19 	call	0x32ce	; 0x32ce <readlast_TWI>
		if (flag & 0b10000000) {
     430:	88 23       	and	r24, r24
     432:	0c f4       	brge	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			converting = NO;
     434:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     436:	c1 11       	cpse	r28, r1
     438:	f5 cf       	rjmp	.-22     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		flag = readlast_TWI();
		if (flag & 0b10000000) {
			converting = NO;
		}
	}
	stop_TWI();
     43a:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>

	start_TWI(addr, TWIWRITE);
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	8f 2d       	mov	r24, r15
     442:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	8f 2d       	mov	r24, r15
     450:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
	highbyte = read_TWI();
     454:	0e 94 57 19 	call	0x32ae	; 0x32ae <read_TWI>
     458:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     45a:	0e 94 67 19 	call	0x32ce	; 0x32ce <readlast_TWI>
     45e:	d8 2f       	mov	r29, r24
	stop_TWI();
     460:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>

	value = highbyte;
     464:	6c 2f       	mov	r22, r28
     466:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     468:	76 2f       	mov	r23, r22
     46a:	66 27       	eor	r22, r22
	value |= lowbyte;
     46c:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     46e:	84 e0       	ldi	r24, 0x04	; 4
     470:	e8 16       	cp	r14, r24
     472:	49 f1       	breq	.+82     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     474:	8e 15       	cp	r24, r14
     476:	30 f0       	brcs	.+12     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     478:	ee 20       	and	r14, r14
     47a:	d9 f1       	breq	.+118    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     47c:	e2 e0       	ldi	r30, 0x02	; 2
     47e:	ee 16       	cp	r14, r30
     480:	69 f1       	breq	.+90     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     482:	42 c0       	rjmp	.+132    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     484:	f8 e0       	ldi	r31, 0x08	; 8
     486:	ef 16       	cp	r14, r31
     488:	09 f4       	brne	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     48a:	42 c0       	rjmp	.+132    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     48c:	8a e0       	ldi	r24, 0x0A	; 10
     48e:	e8 16       	cp	r14, r24
     490:	21 f0       	breq	.+8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     492:	e6 e0       	ldi	r30, 0x06	; 6
     494:	ee 12       	cpse	r14, r30
     496:	38 c0       	rjmp	.+112    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     498:	0b c0       	rjmp	.+22     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		case PGA0256:
			scale = SCA0256;
     49a:	0f 2e       	mov	r0, r31
     49c:	f4 e7       	ldi	r31, 0x74	; 116
     49e:	8f 2e       	mov	r8, r31
     4a0:	f3 e1       	ldi	r31, 0x13	; 19
     4a2:	9f 2e       	mov	r9, r31
     4a4:	f3 e0       	ldi	r31, 0x03	; 3
     4a6:	af 2e       	mov	r10, r31
     4a8:	f7 e3       	ldi	r31, 0x37	; 55
     4aa:	bf 2e       	mov	r11, r31
     4ac:	f0 2d       	mov	r31, r0
     4ae:	3a c0       	rjmp	.+116    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     4b0:	0f 2e       	mov	r0, r31
     4b2:	f4 e7       	ldi	r31, 0x74	; 116
     4b4:	8f 2e       	mov	r8, r31
     4b6:	f3 e1       	ldi	r31, 0x13	; 19
     4b8:	9f 2e       	mov	r9, r31
     4ba:	f3 e0       	ldi	r31, 0x03	; 3
     4bc:	af 2e       	mov	r10, r31
     4be:	f8 e3       	ldi	r31, 0x38	; 56
     4c0:	bf 2e       	mov	r11, r31
     4c2:	f0 2d       	mov	r31, r0
			break;
     4c4:	2f c0       	rjmp	.+94     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		case PGA2048:
			scale = SCA2048;
     4c6:	0f 2e       	mov	r0, r31
     4c8:	f2 e1       	ldi	r31, 0x12	; 18
     4ca:	8f 2e       	mov	r8, r31
     4cc:	f3 e1       	ldi	r31, 0x13	; 19
     4ce:	9f 2e       	mov	r9, r31
     4d0:	f3 e8       	ldi	r31, 0x83	; 131
     4d2:	af 2e       	mov	r10, r31
     4d4:	f8 e3       	ldi	r31, 0x38	; 56
     4d6:	bf 2e       	mov	r11, r31
     4d8:	f0 2d       	mov	r31, r0
			break;
     4da:	24 c0       	rjmp	.+72     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		case PGA4096:
			scale = SCA4096;
     4dc:	0f 2e       	mov	r0, r31
     4de:	f4 e7       	ldi	r31, 0x74	; 116
     4e0:	8f 2e       	mov	r8, r31
     4e2:	f3 e1       	ldi	r31, 0x13	; 19
     4e4:	9f 2e       	mov	r9, r31
     4e6:	f3 e0       	ldi	r31, 0x03	; 3
     4e8:	af 2e       	mov	r10, r31
     4ea:	f9 e3       	ldi	r31, 0x39	; 57
     4ec:	bf 2e       	mov	r11, r31
     4ee:	f0 2d       	mov	r31, r0
			break;
     4f0:	19 c0       	rjmp	.+50     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		case PGA6144:
			scale = SCA6144;
     4f2:	0f 2e       	mov	r0, r31
     4f4:	fe e2       	ldi	r31, 0x2E	; 46
     4f6:	8f 2e       	mov	r8, r31
     4f8:	fd e9       	ldi	r31, 0x9D	; 157
     4fa:	9f 2e       	mov	r9, r31
     4fc:	f4 e4       	ldi	r31, 0x44	; 68
     4fe:	af 2e       	mov	r10, r31
     500:	f9 e3       	ldi	r31, 0x39	; 57
     502:	bf 2e       	mov	r11, r31
     504:	f0 2d       	mov	r31, r0
			break;
     506:	0e c0       	rjmp	.+28     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		default:
			scale = 0.0;
     508:	81 2c       	mov	r8, r1
     50a:	91 2c       	mov	r9, r1
     50c:	54 01       	movw	r10, r8
			break;
     50e:	0a c0       	rjmp	.+20     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     510:	0f 2e       	mov	r0, r31
     512:	f1 e7       	ldi	r31, 0x71	; 113
     514:	8f 2e       	mov	r8, r31
     516:	f3 e1       	ldi	r31, 0x13	; 19
     518:	9f 2e       	mov	r9, r31
     51a:	f3 e8       	ldi	r31, 0x83	; 131
     51c:	af 2e       	mov	r10, r31
     51e:	f7 e3       	ldi	r31, 0x37	; 55
     520:	bf 2e       	mov	r11, r31
     522:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	*voltage = scale * (float) value;
     524:	07 2e       	mov	r0, r23
     526:	00 0c       	add	r0, r0
     528:	88 0b       	sbc	r24, r24
     52a:	99 0b       	sbc	r25, r25
     52c:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__floatsisf>
     530:	9b 01       	movw	r18, r22
     532:	ac 01       	movw	r20, r24
     534:	c5 01       	movw	r24, r10
     536:	b4 01       	movw	r22, r8
     538:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__mulsf3>
     53c:	f6 01       	movw	r30, r12
     53e:	60 83       	st	Z, r22
     540:	71 83       	std	Z+1, r23	; 0x01
     542:	82 83       	std	Z+2, r24	; 0x02
     544:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     546:	10 2f       	mov	r17, r16

}
     548:	81 2f       	mov	r24, r17
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	ff 90       	pop	r15
     554:	ef 90       	pop	r14
     556:	df 90       	pop	r13
     558:	cf 90       	pop	r12
     55a:	bf 90       	pop	r11
     55c:	af 90       	pop	r10
     55e:	9f 90       	pop	r9
     560:	8f 90       	pop	r8
     562:	08 95       	ret

00000564 <get_cmdline>:
	if ((d >= '0') && (d <= '9')) {
		return(ERROR);
	}
	return(NOERROR);

}
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	9c 01       	movw	r18, r24
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	1c c0       	rjmp	.+56     	; 0x5a6 <get_cmdline+0x42>
     56e:	c8 e1       	ldi	r28, 0x18	; 24
     570:	dc e2       	ldi	r29, 0x2C	; 44
     572:	e8 81       	ld	r30, Y
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	e7 5e       	subi	r30, 0xE7	; 231
     578:	f4 4d       	sbci	r31, 0xD4	; 212
     57a:	80 81       	ld	r24, Z
     57c:	f9 01       	movw	r30, r18
     57e:	e4 0f       	add	r30, r20
     580:	f1 1d       	adc	r31, r1
     582:	80 83       	st	Z, r24
     584:	aa e1       	ldi	r26, 0x1A	; 26
     586:	bc e2       	ldi	r27, 0x2C	; 44
     588:	8c 91       	ld	r24, X
     58a:	81 50       	subi	r24, 0x01	; 1
     58c:	8c 93       	st	X, r24
     58e:	88 81       	ld	r24, Y
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	6e ef       	ldi	r22, 0xFE	; 254
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <__divmodhi4>
     59c:	88 83       	st	Y, r24
     59e:	80 81       	ld	r24, Z
     5a0:	88 23       	and	r24, r24
     5a2:	29 f0       	breq	.+10     	; 0x5ae <get_cmdline+0x4a>
     5a4:	4f 5f       	subi	r20, 0xFF	; 255
     5a6:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <recv0_buf+0x101>
     5aa:	81 11       	cpse	r24, r1
     5ac:	e0 cf       	rjmp	.-64     	; 0x56e <get_cmdline+0xa>
     5ae:	f9 01       	movw	r30, r18
     5b0:	e4 0f       	add	r30, r20
     5b2:	f1 1d       	adc	r31, r1
     5b4:	10 82       	st	Z, r1
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	08 95       	ret

000005bc <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     5bc:	9f e9       	ldi	r25, 0x9F	; 159
     5be:	98 0f       	add	r25, r24
     5c0:	9a 31       	cpi	r25, 0x1A	; 26
     5c2:	28 f0       	brcs	.+10     	; 0x5ce <isaletter+0x12>
     5c4:	81 54       	subi	r24, 0x41	; 65
     5c6:	8a 31       	cpi	r24, 0x1A	; 26
     5c8:	20 f4       	brcc	.+8      	; 0x5d2 <isaletter+0x16>
		return(ERROR);
     5ca:	83 e6       	ldi	r24, 0x63	; 99
     5cc:	08 95       	ret
     5ce:	83 e6       	ldi	r24, 0x63	; 99
     5d0:	08 95       	ret
	}
	return(NOERROR);
     5d2:	80 e0       	ldi	r24, 0x00	; 0

}
     5d4:	08 95       	ret

000005d6 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     5e2:	e6 2e       	mov	r14, r22
     5e4:	f1 2c       	mov	r15, r1
     5e6:	84 e3       	ldi	r24, 0x34	; 52
     5e8:	8e 9d       	mul	r24, r14
     5ea:	f0 01       	movw	r30, r0
     5ec:	8f 9d       	mul	r24, r15
     5ee:	f0 0d       	add	r31, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	ed 5f       	subi	r30, 0xFD	; 253
     5f4:	f7 4d       	sbci	r31, 0xD7	; 215
     5f6:	8f e3       	ldi	r24, 0x3F	; 63
     5f8:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     5fa:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     5fc:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     5fe:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     600:	04 c0       	rjmp	.+8      	; 0x60a <parse_cmd+0x34>
		if (*ptr == '\0') {
     602:	11 23       	and	r17, r17
     604:	09 f4       	brne	.+2      	; 0x608 <parse_cmd+0x32>
     606:	75 c0       	rjmp	.+234    	; 0x6f2 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     608:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     60a:	18 81       	ld	r17, Y
     60c:	81 2f       	mov	r24, r17
     60e:	0e 94 de 02 	call	0x5bc	; 0x5bc <isaletter>
     612:	88 23       	and	r24, r24
     614:	b1 f3       	breq	.-20     	; 0x602 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     616:	21 96       	adiw	r28, 0x01	; 1
     618:	84 e3       	ldi	r24, 0x34	; 52
     61a:	8e 9d       	mul	r24, r14
     61c:	f0 01       	movw	r30, r0
     61e:	8f 9d       	mul	r24, r15
     620:	f0 0d       	add	r31, r0
     622:	11 24       	eor	r1, r1
     624:	ed 5f       	subi	r30, 0xFD	; 253
     626:	f7 4d       	sbci	r31, 0xD7	; 215
     628:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     62a:	04 c0       	rjmp	.+8      	; 0x634 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     62c:	11 23       	and	r17, r17
     62e:	09 f4       	brne	.+2      	; 0x632 <parse_cmd+0x5c>
     630:	60 c0       	rjmp	.+192    	; 0x6f2 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     632:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     634:	18 81       	ld	r17, Y
     636:	81 2f       	mov	r24, r17
     638:	0e 94 de 02 	call	0x5bc	; 0x5bc <isaletter>
     63c:	88 23       	and	r24, r24
     63e:	b1 f3       	breq	.-20     	; 0x62c <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     640:	21 96       	adiw	r28, 0x01	; 1
     642:	84 e3       	ldi	r24, 0x34	; 52
     644:	8e 9d       	mul	r24, r14
     646:	f0 01       	movw	r30, r0
     648:	8f 9d       	mul	r24, r15
     64a:	f0 0d       	add	r31, r0
     64c:	11 24       	eor	r1, r1
     64e:	ed 5f       	subi	r30, 0xFD	; 253
     650:	f7 4d       	sbci	r31, 0xD7	; 215
     652:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	2a c0       	rjmp	.+84     	; 0x6ac <parse_cmd+0xd6>
		if (*ptr == '\0') {
     658:	98 81       	ld	r25, Y
     65a:	91 11       	cpse	r25, r1
     65c:	0c c0       	rjmp	.+24     	; 0x676 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     65e:	94 e3       	ldi	r25, 0x34	; 52
     660:	9e 9d       	mul	r25, r14
     662:	f0 01       	movw	r30, r0
     664:	9f 9d       	mul	r25, r15
     666:	f0 0d       	add	r31, r0
     668:	11 24       	eor	r1, r1
     66a:	ed 5f       	subi	r30, 0xFD	; 253
     66c:	f7 4d       	sbci	r31, 0xD7	; 215
     66e:	e8 0f       	add	r30, r24
     670:	f1 1d       	adc	r31, r1
     672:	12 82       	std	Z+2, r1	; 0x02
			return;
     674:	3e c0       	rjmp	.+124    	; 0x6f2 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {			// Command ID separator
     676:	9b 33       	cpi	r25, 0x3B	; 59
     678:	61 f4       	brne	.+24     	; 0x692 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     67a:	94 e3       	ldi	r25, 0x34	; 52
     67c:	9e 9d       	mul	r25, r14
     67e:	f0 01       	movw	r30, r0
     680:	9f 9d       	mul	r25, r15
     682:	f0 0d       	add	r31, r0
     684:	11 24       	eor	r1, r1
     686:	ed 5f       	subi	r30, 0xFD	; 253
     688:	f7 4d       	sbci	r31, 0xD7	; 215
     68a:	e8 0f       	add	r30, r24
     68c:	f1 1d       	adc	r31, r1
     68e:	12 82       	std	Z+2, r1	; 0x02
			break;
     690:	0f c0       	rjmp	.+30     	; 0x6b0 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     692:	21 96       	adiw	r28, 0x01	; 1
     694:	24 e3       	ldi	r18, 0x34	; 52
     696:	2e 9d       	mul	r18, r14
     698:	f0 01       	movw	r30, r0
     69a:	2f 9d       	mul	r18, r15
     69c:	f0 0d       	add	r31, r0
     69e:	11 24       	eor	r1, r1
     6a0:	ed 5f       	subi	r30, 0xFD	; 253
     6a2:	f7 4d       	sbci	r31, 0xD7	; 215
     6a4:	e8 0f       	add	r30, r24
     6a6:	f1 1d       	adc	r31, r1
     6a8:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6aa:	8f 5f       	subi	r24, 0xFF	; 255
     6ac:	89 32       	cpi	r24, 0x29	; 41
     6ae:	a0 f2       	brcs	.-88     	; 0x658 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
     6b0:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	1c c0       	rjmp	.+56     	; 0x6ee <parse_cmd+0x118>
		if (*ptr == '\0') {
     6b6:	98 81       	ld	r25, Y
     6b8:	91 11       	cpse	r25, r1
     6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     6bc:	94 e3       	ldi	r25, 0x34	; 52
     6be:	9e 9d       	mul	r25, r14
     6c0:	f0 01       	movw	r30, r0
     6c2:	9f 9d       	mul	r25, r15
     6c4:	f0 0d       	add	r31, r0
     6c6:	11 24       	eor	r1, r1
     6c8:	ed 5f       	subi	r30, 0xFD	; 253
     6ca:	f7 4d       	sbci	r31, 0xD7	; 215
     6cc:	e8 0f       	add	r30, r24
     6ce:	f1 1d       	adc	r31, r1
     6d0:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     6d2:	0f c0       	rjmp	.+30     	; 0x6f2 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     6d4:	21 96       	adiw	r28, 0x01	; 1
     6d6:	24 e3       	ldi	r18, 0x34	; 52
     6d8:	2e 9d       	mul	r18, r14
     6da:	f0 01       	movw	r30, r0
     6dc:	2f 9d       	mul	r18, r15
     6de:	f0 0d       	add	r31, r0
     6e0:	11 24       	eor	r1, r1
     6e2:	ed 5f       	subi	r30, 0xFD	; 253
     6e4:	f7 4d       	sbci	r31, 0xD7	; 215
     6e6:	e8 0f       	add	r30, r24
     6e8:	f1 1d       	adc	r31, r1
     6ea:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     6ec:	8f 5f       	subi	r24, 0xFF	; 255
     6ee:	89 30       	cpi	r24, 0x09	; 9
     6f0:	10 f3       	brcs	.-60     	; 0x6b6 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	08 95       	ret

000006fe <printLine>:
		been run and the system has received a reboot acknowledge (the !). This
		is done to prevent unsolicited text being sent (error messages) at
		initialization or after a reboot.
------------------------------------------------------------------------------*/
void printLine(char *str)
{
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	c5 50       	subi	r28, 0x05	; 5
     70c:	d1 40       	sbci	r29, 0x01	; 1
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char prFormat[] = "$S%d%s";
     712:	27 e0       	ldi	r18, 0x07	; 7
     714:	e0 eb       	ldi	r30, 0xB0	; 176
     716:	f9 e8       	ldi	r31, 0x89	; 137
     718:	de 01       	movw	r26, r28
     71a:	a1 50       	subi	r26, 0x01	; 1
     71c:	bf 4f       	sbci	r27, 0xFF	; 255
     71e:	01 90       	ld	r0, Z+
     720:	0d 92       	st	X+, r0
     722:	2a 95       	dec	r18
     724:	e1 f7       	brne	.-8      	; 0x71e <printLine+0x20>

	if (firstpass) {
     726:	20 91 0b 2a 	lds	r18, 0x2A0B	; 0x802a0b <firstpass>
     72a:	21 11       	cpse	r18, r1
     72c:	2a c0       	rjmp	.+84     	; 0x782 <printLine+0x84>
		return;
	}

	sprintf(strbuf, prFormat, get_SPECID, str);
     72e:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     732:	22 ff       	sbrs	r18, 2
     734:	03 c0       	rjmp	.+6      	; 0x73c <printLine+0x3e>
     736:	22 e0       	ldi	r18, 0x02	; 2
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	02 c0       	rjmp	.+4      	; 0x740 <printLine+0x42>
     73c:	21 e0       	ldi	r18, 0x01	; 1
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	9f 93       	push	r25
     742:	8f 93       	push	r24
     744:	3f 93       	push	r19
     746:	2f 93       	push	r18
     748:	ce 01       	movw	r24, r28
     74a:	81 50       	subi	r24, 0x01	; 1
     74c:	9f 4f       	sbci	r25, 0xFF	; 255
     74e:	9f 93       	push	r25
     750:	8f 93       	push	r24
     752:	8e 01       	movw	r16, r28
     754:	0f 5f       	subi	r16, 0xFF	; 255
     756:	1f 4f       	sbci	r17, 0xFF	; 255
     758:	1f 93       	push	r17
     75a:	0f 93       	push	r16
     75c:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
	checksum_NMEA(strbuf);
     760:	c8 01       	movw	r24, r16
     762:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     766:	f8 01       	movw	r30, r16
     768:	01 90       	ld	r0, Z+
     76a:	00 20       	and	r0, r0
     76c:	e9 f7       	brne	.-6      	; 0x768 <printLine+0x6a>
     76e:	31 97       	sbiw	r30, 0x01	; 1
     770:	af 01       	movw	r20, r30
     772:	40 1b       	sub	r20, r16
     774:	51 0b       	sbc	r21, r17
     776:	b8 01       	movw	r22, r16
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	0e 94 38 1a 	call	0x3470	; 0x3470 <send_USART>
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	de bf       	out	0x3e, r29	; 62

}
     782:	cb 5f       	subi	r28, 0xFB	; 251
     784:	de 4f       	sbci	r29, 0xFE	; 254
     786:	cd bf       	out	0x3d, r28	; 61
     788:	de bf       	out	0x3e, r29	; 62
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	08 95       	ret

00000794 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     794:	cf 92       	push	r12
     796:	df 92       	push	r13
     798:	ef 92       	push	r14
     79a:	ff 92       	push	r15
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	cc 51       	subi	r28, 0x1C	; 28
     7aa:	d1 40       	sbci	r29, 0x01	; 1
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	d8 2e       	mov	r13, r24
     7b2:	c9 2e       	mov	r12, r25

	const char format_CMD[] = "CMD,%s,%s";
     7b4:	8a e0       	ldi	r24, 0x0A	; 10
     7b6:	e7 eb       	ldi	r30, 0xB7	; 183
     7b8:	f9 e8       	ldi	r31, 0x89	; 137
     7ba:	9e 01       	movw	r18, r28
     7bc:	2f 5f       	subi	r18, 0xFF	; 255
     7be:	3f 4f       	sbci	r19, 0xFF	; 255
     7c0:	79 01       	movw	r14, r18
     7c2:	d9 01       	movw	r26, r18
     7c4:	01 90       	ld	r0, Z+
     7c6:	0d 92       	st	X+, r0
     7c8:	8a 95       	dec	r24
     7ca:	e1 f7       	brne	.-8      	; 0x7c4 <echo_cmd+0x30>
	char currenttime[20], strbuf[BUFSIZE];

	get_time(currenttime);
     7cc:	8e 01       	movw	r16, r28
     7ce:	05 5f       	subi	r16, 0xF5	; 245
     7d0:	1f 4f       	sbci	r17, 0xFF	; 255
     7d2:	c8 01       	movw	r24, r16
     7d4:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
	sprintf(strbuf, format_CMD, currenttime, cmdline);
     7d8:	cf 92       	push	r12
     7da:	df 92       	push	r13
     7dc:	1f 93       	push	r17
     7de:	0f 93       	push	r16
     7e0:	ff 92       	push	r15
     7e2:	ef 92       	push	r14
     7e4:	0c 5e       	subi	r16, 0xEC	; 236
     7e6:	1f 4f       	sbci	r17, 0xFF	; 255
     7e8:	1f 93       	push	r17
     7ea:	0f 93       	push	r16
     7ec:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
	printLine(strbuf);
     7f0:	c8 01       	movw	r24, r16
     7f2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

}
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	c4 5e       	subi	r28, 0xE4	; 228
     7fc:	de 4f       	sbci	r29, 0xFE	; 254
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	de bf       	out	0x3e, r29	; 62
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	df 90       	pop	r13
     810:	cf 90       	pop	r12
     812:	08 95       	ret

00000814 <send_EXprompt>:
/*------------------------------------------------------------------------------
void send_EXprompt(void)
	Sends an exclamation mark on USART port 0
------------------------------------------------------------------------------*/
void send_EXprompt(void)
{
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	00 d0       	rcall	.+0      	; 0x81a <send_EXprompt+0x6>
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62

	const char str[] = "!";
     81e:	81 e2       	ldi	r24, 0x21	; 33
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	89 83       	std	Y+1, r24	; 0x01
     824:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     826:	41 e0       	ldi	r20, 0x01	; 1
     828:	be 01       	movw	r22, r28
     82a:	6f 5f       	subi	r22, 0xFF	; 255
     82c:	7f 4f       	sbci	r23, 0xFF	; 255
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	0e 94 38 1a 	call	0x3470	; 0x3470 <send_USART>

}
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <rebootACKd>:
	Returns:
		YES if the reboot acknowledge string was received
		NO if it wasn't
------------------------------------------------------------------------------*/
uint8_t rebootACKd(char *cmdline)
{
     83e:	cf 93       	push	r28

	if (!rebootackd) {
     840:	c0 91 02 28 	lds	r28, 0x2802	; 0x802802 <rebootackd>
     844:	c1 11       	cpse	r28, r1
     846:	21 c0       	rjmp	.+66     	; 0x88a <rebootACKd+0x4c>
     848:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     84a:	80 81       	ld	r24, Z
     84c:	81 32       	cpi	r24, 0x21	; 33
     84e:	91 f4       	brne	.+36     	; 0x874 <rebootACKd+0x36>
     850:	91 81       	ldd	r25, Z+1	; 0x01
     852:	91 11       	cpse	r25, r1
     854:	0f c0       	rjmp	.+30     	; 0x874 <rebootACKd+0x36>
			init_RTC(511);		// 1-sec RTC clock ticks
     856:	8f ef       	ldi	r24, 0xFF	; 255
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	0e 94 61 18 	call	0x30c2	; 0x30c2 <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     85e:	85 e0       	ldi	r24, 0x05	; 5
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	80 93 0e 2a 	sts	0x2A0E, r24	; 0x802a0e <timeoutOLED>
     866:	90 93 0f 2a 	sts	0x2A0F, r25	; 0x802a0f <timeoutOLED+0x1>
			rebootackd = YES;
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <rebootackd>
			return(YES);
     870:	c1 e0       	ldi	r28, 0x01	; 1
     872:	0c c0       	rjmp	.+24     	; 0x88c <rebootACKd+0x4e>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     874:	81 32       	cpi	r24, 0x21	; 33
     876:	31 f4       	brne	.+12     	; 0x884 <rebootACKd+0x46>
     878:	81 81       	ldd	r24, Z+1	; 0x01
     87a:	88 23       	and	r24, r24
     87c:	19 f0       	breq	.+6      	; 0x884 <rebootACKd+0x46>
			reboot();
     87e:	0e 94 2a 1c 	call	0x3854	; 0x3854 <reboot>
			return(NO);
     882:	04 c0       	rjmp	.+8      	; 0x88c <rebootACKd+0x4e>
		} else {
			send_EXprompt();
     884:	0e 94 0a 04 	call	0x814	; 0x814 <send_EXprompt>
//			send_prompt('!');
			return(NO);
     888:	01 c0       	rjmp	.+2      	; 0x88c <rebootACKd+0x4e>
		}
	}

	return(YES);
     88a:	c1 e0       	ldi	r28, 0x01	; 1

}
     88c:	8c 2f       	mov	r24, r28
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <send_GTprompt>:
/*------------------------------------------------------------------------------
void send_GTprompt(void)
	Sends a greater than (>) on USART port 0
------------------------------------------------------------------------------*/
void send_GTprompt(void)
{
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	00 d0       	rcall	.+0      	; 0x898 <send_GTprompt+0x6>
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62

	const char str[] = ">";
     89c:	8e e3       	ldi	r24, 0x3E	; 62
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	89 83       	std	Y+1, r24	; 0x01
     8a2:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     8a4:	41 e0       	ldi	r20, 0x01	; 1
     8a6:	be 01       	movw	r22, r28
     8a8:	6f 5f       	subi	r22, 0xFF	; 255
     8aa:	7f 4f       	sbci	r23, 0xFF	; 255
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	0e 94 38 1a 	call	0x3470	; 0x3470 <send_USART>

}
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	cf 5f       	subi	r28, 0xFF	; 255
     8c6:	d1 09       	sbc	r29, r1
     8c8:	cd bf       	out	0x3d, r28	; 61
     8ca:	de bf       	out	0x3e, r29	; 62

	char cmdline[BUFSIZE+1];		// BUFSIZE is the size of the ring buffer
	static uint8_t cstack = 0;		// pcmd index

	get_cmdline(cmdline);
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 b2 02 	call	0x564	; 0x564 <get_cmdline>

	if (!rebootACKd(cmdline)) {		// Reboot acknowledge failed
     8d4:	ce 01       	movw	r24, r28
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	0e 94 1f 04 	call	0x83e	; 0x83e <rebootACKd>
     8dc:	88 23       	and	r24, r24
     8de:	09 f4       	brne	.+2      	; 0x8e2 <commands+0x26>
     8e0:	71 c0       	rjmp	.+226    	; 0x9c4 <commands+0x108>
		return;
	}

		// <CR> or ! alone are not errors
	if ((cmdline[0] == '\0') || (cmdline[0] == '!')) {
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	88 23       	and	r24, r24
     8e6:	11 f0       	breq	.+4      	; 0x8ec <commands+0x30>
     8e8:	81 32       	cpi	r24, 0x21	; 33
     8ea:	29 f4       	brne	.+10     	; 0x8f6 <commands+0x3a>
		firstpass = NO;
     8ec:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <firstpass>
		send_GTprompt();
     8f0:	0e 94 49 04 	call	0x892	; 0x892 <send_GTprompt>
		return;
     8f4:	67 c0       	rjmp	.+206    	; 0x9c4 <commands+0x108>
	}

	echo_cmd(cmdline);
     8f6:	ce 01       	movw	r24, r28
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	0e 94 ca 03 	call	0x794	; 0x794 <echo_cmd>
	parse_cmd(cmdline, cstack);
     8fe:	60 91 00 28 	lds	r22, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     902:	ce 01       	movw	r24, r28
     904:	01 96       	adiw	r24, 0x01	; 1
     906:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <parse_cmd>

	switch (pcmd[cstack].cverb) {
     90a:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     90e:	24 e3       	ldi	r18, 0x34	; 52
     910:	82 9f       	mul	r24, r18
     912:	f0 01       	movw	r30, r0
     914:	11 24       	eor	r1, r1
     916:	ed 5f       	subi	r30, 0xFD	; 253
     918:	f7 4d       	sbci	r31, 0xD7	; 215
     91a:	e0 81       	ld	r30, Z
     91c:	4e 2f       	mov	r20, r30
     91e:	50 e0       	ldi	r21, 0x00	; 0
     920:	fa 01       	movw	r30, r20
     922:	e9 54       	subi	r30, 0x49	; 73
     924:	f1 09       	sbc	r31, r1
     926:	ec 32       	cpi	r30, 0x2C	; 44
     928:	f1 05       	cpc	r31, r1
     92a:	d0 f5       	brcc	.+116    	; 0x9a0 <commands+0xe4>
     92c:	e0 5b       	subi	r30, 0xB0	; 176
     92e:	ff 4f       	sbci	r31, 0xFF	; 255
     930:	0c 94 13 22 	jmp	0x4426	; 0x4426 <__tablejump2__>
		case 'c':				// close
			close_PNEU(cstack);
     934:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <close_PNEU>
			break;
     938:	39 c0       	rjmp	.+114    	; 0x9ac <commands+0xf0>

		case 'o':				// open
			open_PNEU(cstack);
     93a:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <open_PNEU>
			break;
     93e:	36 c0       	rjmp	.+108    	; 0x9ac <commands+0xf0>

		case 'm':				// move
			move_MOTOR(cstack);
     940:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <move_MOTOR>
			break;
     944:	33 c0       	rjmp	.+102    	; 0x9ac <commands+0xf0>

		case 'r':				// report
			report(cstack);
     946:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <report>
			break;
     94a:	30 c0       	rjmp	.+96     	; 0x9ac <commands+0xf0>

		case 's':				// set
			set(cstack);
     94c:	0e 94 b1 18 	call	0x3162	; 0x3162 <set>
			break;
     950:	2d c0       	rjmp	.+90     	; 0x9ac <commands+0xf0>

		case 't':
			testroutine();
     952:	0e 94 16 19 	call	0x322c	; 0x322c <testroutine>
			break;
     956:	2a c0       	rjmp	.+84     	; 0x9ac <commands+0xf0>

		case 'I':	// test init_MOTORS
			init_MOTORS();
     958:	0e 94 33 18 	call	0x3066	; 0x3066 <init_MOTORS>
			break;
     95c:	27 c0       	rjmp	.+78     	; 0x9ac <commands+0xf0>

		case 'R':				// Reboot
			squelchErrors = YES;
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <squelchErrors>
			if (motorsMoving()) {
     964:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <motorsMoving>
     968:	88 23       	and	r24, r24
     96a:	49 f0       	breq	.+18     	; 0x97e <commands+0xc2>
				squelchErrors = NO;
     96c:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <squelchErrors>
				printError(ERR_MOTORMOVING, "Can't reboot, motor moving");
     970:	61 ec       	ldi	r22, 0xC1	; 193
     972:	79 e8       	ldi	r23, 0x89	; 137
     974:	84 e3       	ldi	r24, 0x34	; 52
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
				break;
     97c:	17 c0       	rjmp	.+46     	; 0x9ac <commands+0xf0>
			} else {
				saveFRAM_MOTOREncoders();
     97e:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <saveFRAM_MOTOREncoders>
				timerSAVEENCODER = 0;
     982:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <timerSAVEENCODER>
				send_GTprompt();	// Aidan request
     986:	0e 94 49 04 	call	0x892	; 0x892 <send_GTprompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     98a:	8a e6       	ldi	r24, 0x6A	; 106
     98c:	94 e0       	ldi	r25, 0x04	; 4
     98e:	21 e0       	ldi	r18, 0x01	; 1
     990:	81 50       	subi	r24, 0x01	; 1
     992:	90 40       	sbci	r25, 0x00	; 0
     994:	20 40       	sbci	r18, 0x00	; 0
     996:	e1 f7       	brne	.-8      	; 0x990 <commands+0xd4>
     998:	00 c0       	rjmp	.+0      	; 0x99a <commands+0xde>
				_delay_ms(100);		// Avoids finishing the command loop before reboot
				reboot();
     99a:	0e 94 2a 1c 	call	0x3854	; 0x3854 <reboot>
				return;
     99e:	12 c0       	rjmp	.+36     	; 0x9c4 <commands+0x108>
			}

		default:
			printError(ERR_BADCOMMAND, "Not a command");
     9a0:	6c ed       	ldi	r22, 0xDC	; 220
     9a2:	79 e8       	ldi	r23, 0x89	; 137
     9a4:	89 ec       	ldi	r24, 0xC9	; 201
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     9ac:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	6a e0       	ldi	r22, 0x0A	; 10
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <__divmodhi4>
     9bc:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	send_GTprompt();
     9c0:	0e 94 49 04 	call	0x892	; 0x892 <send_GTprompt>

}
     9c4:	c1 50       	subi	r28, 0x01	; 1
     9c6:	df 4f       	sbci	r29, 0xFF	; 255
     9c8:	cd bf       	out	0x3d, r28	; 61
     9ca:	de bf       	out	0x3e, r29	; 62
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62
     9de:	a0 97       	sbiw	r28, 0x20	; 32
     9e0:	cd bf       	out	0x3d, r28	; 61
     9e2:	de bf       	out	0x3e, r29	; 62

	const char format_ISO[] = "20%02x-%02x-%02xT%02x:%02x:%02x";
     9e4:	40 e2       	ldi	r20, 0x20	; 32
     9e6:	ea ee       	ldi	r30, 0xEA	; 234
     9e8:	f9 e8       	ldi	r31, 0x89	; 137
     9ea:	9e 01       	movw	r18, r28
     9ec:	2f 5f       	subi	r18, 0xFF	; 255
     9ee:	3f 4f       	sbci	r19, 0xFF	; 255
     9f0:	d9 01       	movw	r26, r18
     9f2:	01 90       	ld	r0, Z+
     9f4:	0d 92       	st	X+, r0
     9f6:	4a 95       	dec	r20
     9f8:	e1 f7       	brne	.-8      	; 0x9f2 <convert_ds2iso+0x20>
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     9fa:	fb 01       	movw	r30, r22
     9fc:	b0 81       	ld	r27, Z
	minutes = (*ds3231time++);
     9fe:	a1 81       	ldd	r26, Z+1	; 0x01
	hours = (*ds3231time++);
     a00:	12 81       	ldd	r17, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     a02:	04 81       	ldd	r16, Z+4	; 0x04
	month = (*ds3231time++);
     a04:	55 81       	ldd	r21, Z+5	; 0x05
	year = (*ds3231time);
     a06:	46 81       	ldd	r20, Z+6	; 0x06

	sprintf(isotime, format_ISO, year, month, date, hours, minutes, seconds);
     a08:	1f 92       	push	r1
     a0a:	bf 93       	push	r27
     a0c:	1f 92       	push	r1
     a0e:	af 93       	push	r26
     a10:	1f 92       	push	r1
     a12:	1f 93       	push	r17
     a14:	1f 92       	push	r1
     a16:	0f 93       	push	r16
     a18:	1f 92       	push	r1
     a1a:	5f 93       	push	r21
     a1c:	1f 92       	push	r1
     a1e:	4f 93       	push	r20
     a20:	3f 93       	push	r19
     a22:	2f 93       	push	r18
     a24:	9f 93       	push	r25
     a26:	8f 93       	push	r24
     a28:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>

}
     a2c:	cd bf       	out	0x3d, r28	; 61
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	a0 96       	adiw	r28, 0x20	; 32
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	de bf       	out	0x3e, r29	; 62
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	08 95       	ret

00000a40 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     a40:	dc 01       	movw	r26, r24
     a42:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     a44:	81 89       	ldd	r24, Z+17	; 0x11
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	c0 97       	sbiw	r24, 0x30	; 48
     a4a:	82 95       	swap	r24
     a4c:	92 95       	swap	r25
     a4e:	90 7f       	andi	r25, 0xF0	; 240
     a50:	98 27       	eor	r25, r24
     a52:	80 7f       	andi	r24, 0xF0	; 240
     a54:	98 27       	eor	r25, r24
     a56:	92 89       	ldd	r25, Z+18	; 0x12
     a58:	90 53       	subi	r25, 0x30	; 48
     a5a:	89 2b       	or	r24, r25
     a5c:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     a5e:	86 85       	ldd	r24, Z+14	; 0x0e
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	c0 97       	sbiw	r24, 0x30	; 48
     a64:	82 95       	swap	r24
     a66:	92 95       	swap	r25
     a68:	90 7f       	andi	r25, 0xF0	; 240
     a6a:	98 27       	eor	r25, r24
     a6c:	80 7f       	andi	r24, 0xF0	; 240
     a6e:	98 27       	eor	r25, r24
     a70:	97 85       	ldd	r25, Z+15	; 0x0f
     a72:	90 53       	subi	r25, 0x30	; 48
     a74:	89 2b       	or	r24, r25
     a76:	11 96       	adiw	r26, 0x01	; 1
     a78:	8c 93       	st	X, r24
     a7a:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     a7c:	83 85       	ldd	r24, Z+11	; 0x0b
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	c0 97       	sbiw	r24, 0x30	; 48
     a82:	82 95       	swap	r24
     a84:	92 95       	swap	r25
     a86:	90 7f       	andi	r25, 0xF0	; 240
     a88:	98 27       	eor	r25, r24
     a8a:	80 7f       	andi	r24, 0xF0	; 240
     a8c:	98 27       	eor	r25, r24
     a8e:	94 85       	ldd	r25, Z+12	; 0x0c
     a90:	90 53       	subi	r25, 0x30	; 48
     a92:	89 2b       	or	r24, r25
     a94:	12 96       	adiw	r26, 0x02	; 2
     a96:	8c 93       	st	X, r24
     a98:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	13 96       	adiw	r26, 0x03	; 3
     a9e:	8c 93       	st	X, r24
     aa0:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     aa2:	80 85       	ldd	r24, Z+8	; 0x08
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	c0 97       	sbiw	r24, 0x30	; 48
     aa8:	82 95       	swap	r24
     aaa:	92 95       	swap	r25
     aac:	90 7f       	andi	r25, 0xF0	; 240
     aae:	98 27       	eor	r25, r24
     ab0:	80 7f       	andi	r24, 0xF0	; 240
     ab2:	98 27       	eor	r25, r24
     ab4:	91 85       	ldd	r25, Z+9	; 0x09
     ab6:	90 53       	subi	r25, 0x30	; 48
     ab8:	89 2b       	or	r24, r25
     aba:	14 96       	adiw	r26, 0x04	; 4
     abc:	8c 93       	st	X, r24
     abe:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     ac0:	25 81       	ldd	r18, Z+5	; 0x05
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	20 53       	subi	r18, 0x30	; 48
     ac6:	31 09       	sbc	r19, r1
     ac8:	22 95       	swap	r18
     aca:	32 95       	swap	r19
     acc:	30 7f       	andi	r19, 0xF0	; 240
     ace:	32 27       	eor	r19, r18
     ad0:	20 7f       	andi	r18, 0xF0	; 240
     ad2:	32 27       	eor	r19, r18
     ad4:	86 81       	ldd	r24, Z+6	; 0x06
     ad6:	80 53       	subi	r24, 0x30	; 48
     ad8:	28 2b       	or	r18, r24
     ada:	15 96       	adiw	r26, 0x05	; 5
     adc:	2c 93       	st	X, r18
     ade:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     ae0:	22 81       	ldd	r18, Z+2	; 0x02
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	20 53       	subi	r18, 0x30	; 48
     ae6:	31 09       	sbc	r19, r1
     ae8:	22 95       	swap	r18
     aea:	32 95       	swap	r19
     aec:	30 7f       	andi	r19, 0xF0	; 240
     aee:	32 27       	eor	r19, r18
     af0:	20 7f       	andi	r18, 0xF0	; 240
     af2:	32 27       	eor	r19, r18
     af4:	83 81       	ldd	r24, Z+3	; 0x03
     af6:	80 53       	subi	r24, 0x30	; 48
     af8:	28 2b       	or	r18, r24
     afa:	16 96       	adiw	r26, 0x06	; 6
     afc:	2c 93       	st	X, r18
     afe:	08 95       	ret

00000b00 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	7b 01       	movw	r14, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
     b12:	c8 2f       	mov	r28, r24
     b14:	83 36       	cpi	r24, 0x63	; 99
     b16:	19 f4       	brne	.+6      	; 0xb1e <read_DS3231+0x1e>
		stop_TWI();
     b18:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(ERROR);
     b1c:	26 c0       	rjmp	.+76     	; 0xb6a <read_DS3231+0x6a>
    }  

	if (write_TWI(0x00) == ERROR) {	// Register 00h
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
     b24:	c8 2f       	mov	r28, r24
     b26:	83 36       	cpi	r24, 0x63	; 99
     b28:	19 f4       	brne	.+6      	; 0xb30 <read_DS3231+0x30>
		stop_TWI();
     b2a:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(ERROR);
     b2e:	1d c0       	rjmp	.+58     	; 0xb6a <read_DS3231+0x6a>
	}

	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	88 e6       	ldi	r24, 0x68	; 104
     b34:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
     b38:	c8 2f       	mov	r28, r24
     b3a:	83 36       	cpi	r24, 0x63	; 99
     b3c:	61 f4       	brne	.+24     	; 0xb56 <read_DS3231+0x56>
		stop_TWI();
     b3e:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(ERROR);
     b42:	13 c0       	rjmp	.+38     	; 0xb6a <read_DS3231+0x6a>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     b44:	87 01       	movw	r16, r14
     b46:	0c 0f       	add	r16, r28
     b48:	11 1d       	adc	r17, r1
     b4a:	0e 94 57 19 	call	0x32ae	; 0x32ae <read_TWI>
     b4e:	f8 01       	movw	r30, r16
     b50:	80 83       	st	Z, r24
	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 6; i++) {
     b52:	cf 5f       	subi	r28, 0xFF	; 255
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <read_DS3231+0x58>
     b56:	c0 e0       	ldi	r28, 0x00	; 0
     b58:	c6 30       	cpi	r28, 0x06	; 6
     b5a:	a0 f3       	brcs	.-24     	; 0xb44 <read_DS3231+0x44>
		ds3231time[i] = read_TWI();
	}

	ds3231time[6] = readlast_TWI();
     b5c:	0e 94 67 19 	call	0x32ce	; 0x32ce <readlast_TWI>
     b60:	f7 01       	movw	r30, r14
     b62:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     b64:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>

	return(NOERROR);
     b68:	c0 e0       	ldi	r28, 0x00	; 0

}
     b6a:	8c 2f       	mov	r24, r28
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
     b72:	ff 90       	pop	r15
     b74:	ef 90       	pop	r14
     b76:	08 95       	ret

00000b78 <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     b78:	ef 92       	push	r14
     b7a:	ff 92       	push	r15
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	27 97       	sbiw	r28, 0x07	; 7
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (read_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     b8e:	be 01       	movw	r22, r28
     b90:	6f 5f       	subi	r22, 0xFF	; 255
     b92:	7f 4f       	sbci	r23, 0xFF	; 255
     b94:	88 e6       	ldi	r24, 0x68	; 104
     b96:	0e 94 80 05 	call	0xb00	; 0xb00 <read_DS3231>
     b9a:	18 2f       	mov	r17, r24
     b9c:	83 36       	cpi	r24, 0x63	; 99
     b9e:	79 f4       	brne	.+30     	; 0xbbe <get_time+0x46>
		printError(ERR_GETTIME, "get_time DS3231");
     ba0:	6a e0       	ldi	r22, 0x0A	; 10
     ba2:	7a e8       	ldi	r23, 0x8A	; 138
     ba4:	85 e6       	ldi	r24, 0x65	; 101
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		strcpy(isotime, "DateTime?");
     bac:	8a e0       	ldi	r24, 0x0A	; 10
     bae:	ea e1       	ldi	r30, 0x1A	; 26
     bb0:	fa e8       	ldi	r31, 0x8A	; 138
     bb2:	d7 01       	movw	r26, r14
     bb4:	01 90       	ld	r0, Z+
     bb6:	0d 92       	st	X+, r0
     bb8:	8a 95       	dec	r24
     bba:	e1 f7       	brne	.-8      	; 0xbb4 <get_time+0x3c>
		return(ERROR);
     bbc:	07 c0       	rjmp	.+14     	; 0xbcc <get_time+0x54>
	}

	convert_ds2iso(isotime, ds3231time);
     bbe:	be 01       	movw	r22, r28
     bc0:	6f 5f       	subi	r22, 0xFF	; 255
     bc2:	7f 4f       	sbci	r23, 0xFF	; 255
     bc4:	c7 01       	movw	r24, r14
     bc6:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <convert_ds2iso>
	return(NOERROR);
     bca:	10 e0       	ldi	r17, 0x00	; 0

}
     bcc:	81 2f       	mov	r24, r17
     bce:	27 96       	adiw	r28, 0x07	; 7
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	08 95       	ret

00000be0 <write_DS3231>:
	Returns:
		ERROR for TWI start error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	8b 01       	movw	r16, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
     bf4:	c8 2f       	mov	r28, r24
     bf6:	83 36       	cpi	r24, 0x63	; 99
     bf8:	19 f4       	brne	.+6      	; 0xc00 <write_DS3231+0x20>
		stop_TWI();
     bfa:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(ERROR);
     bfe:	20 c0       	rjmp	.+64     	; 0xc40 <write_DS3231+0x60>
	}

	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
     c06:	c8 2f       	mov	r28, r24
     c08:	83 36       	cpi	r24, 0x63	; 99
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <write_DS3231+0x54>
		stop_TWI();
     c0c:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(ERROR);
     c10:	17 c0       	rjmp	.+46     	; 0xc40 <write_DS3231+0x60>
	}

	for (i = 0; i < 7; i++) {
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     c12:	78 01       	movw	r14, r16
     c14:	8f ef       	ldi	r24, 0xFF	; 255
     c16:	e8 1a       	sub	r14, r24
     c18:	f8 0a       	sbc	r15, r24
     c1a:	f8 01       	movw	r30, r16
     c1c:	80 81       	ld	r24, Z
     c1e:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
     c22:	c8 2f       	mov	r28, r24
     c24:	83 36       	cpi	r24, 0x63	; 99
     c26:	19 f4       	brne	.+6      	; 0xc2e <write_DS3231+0x4e>
			stop_TWI();
     c28:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
			return(ERROR);
     c2c:	09 c0       	rjmp	.+18     	; 0xc40 <write_DS3231+0x60>
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     c2e:	df 5f       	subi	r29, 0xFF	; 255
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     c30:	87 01       	movw	r16, r14
     c32:	01 c0       	rjmp	.+2      	; 0xc36 <write_DS3231+0x56>
     c34:	d0 e0       	ldi	r29, 0x00	; 0
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     c36:	d7 30       	cpi	r29, 0x07	; 7
     c38:	60 f3       	brcs	.-40     	; 0xc12 <write_DS3231+0x32>
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
			stop_TWI();
			return(ERROR);
		}
	}
	stop_TWI();
     c3a:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>

	return(NOERROR);
     c3e:	c0 e0       	ldi	r28, 0x00	; 0

}
     c40:	8c 2f       	mov	r24, r28
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	ff 90       	pop	r15
     c4c:	ef 90       	pop	r14
     c4e:	08 95       	ret

00000c50 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	27 97       	sbiw	r28, 0x07	; 7
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	de bf       	out	0x3e, r29	; 62

	uint8_t ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     c60:	bc 01       	movw	r22, r24
     c62:	ce 01       	movw	r24, r28
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	0e 94 20 05 	call	0xa40	; 0xa40 <convert_iso2ds>
	if (write_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     c6a:	be 01       	movw	r22, r28
     c6c:	6f 5f       	subi	r22, 0xFF	; 255
     c6e:	7f 4f       	sbci	r23, 0xFF	; 255
     c70:	88 e6       	ldi	r24, 0x68	; 104
     c72:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <write_DS3231>
     c76:	18 2f       	mov	r17, r24
     c78:	83 36       	cpi	r24, 0x63	; 99
     c7a:	39 f4       	brne	.+14     	; 0xc8a <put_time+0x3a>
		printError(ERR_PUTTIME, "put_time DS3231");
     c7c:	64 e2       	ldi	r22, 0x24	; 36
     c7e:	7a e8       	ldi	r23, 0x8A	; 138
     c80:	86 e6       	ldi	r24, 0x66	; 102
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		return(ERROR);
     c88:	01 c0       	rjmp	.+2      	; 0xc8c <put_time+0x3c>
	}
	return(NOERROR);
     c8a:	10 e0       	ldi	r17, 0x00	; 0

}
     c8c:	81 2f       	mov	r24, r17
     c8e:	27 96       	adiw	r28, 0x07	; 7
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	08 95       	ret

00000c9c <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     c9c:	45 e1       	ldi	r20, 0x15	; 21
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	6b e0       	ldi	r22, 0x0B	; 11
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	0e 94 92 24 	call	0x4924	; 0x4924 <eeprom_read_block>
     ca8:	08 95       	ret

00000caa <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     caa:	4b e0       	ldi	r20, 0x0B	; 11
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	0e 94 92 24 	call	0x4924	; 0x4924 <eeprom_read_block>
     cb6:	08 95       	ret

00000cb8 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	65 97       	sbiw	r28, 0x15	; 21
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     cc6:	ce 01       	movw	r24, r28
     cc8:	01 96       	adiw	r24, 0x01	; 1
     cca:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     cce:	45 e1       	ldi	r20, 0x15	; 21
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	6b e0       	ldi	r22, 0x0B	; 11
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	ce 01       	movw	r24, r28
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	0e 94 96 24 	call	0x492c	; 0x492c <eeprom_update_block>

}
     cde:	65 96       	adiw	r28, 0x15	; 21
     ce0:	cd bf       	out	0x3d, r28	; 61
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret

00000cea <update_VERSION>:

void update_VERSION(void)
{
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	2b 97       	sbiw	r28, 0x0b	; 11
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     cf8:	8b e0       	ldi	r24, 0x0B	; 11
     cfa:	e4 e3       	ldi	r30, 0x34	; 52
     cfc:	fa e8       	ldi	r31, 0x8A	; 138
     cfe:	de 01       	movw	r26, r28
     d00:	11 96       	adiw	r26, 0x01	; 1
     d02:	01 90       	ld	r0, Z+
     d04:	0d 92       	st	X+, r0
     d06:	8a 95       	dec	r24
     d08:	e1 f7       	brne	.-8      	; 0xd02 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     d0a:	4b e0       	ldi	r20, 0x0B	; 11
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	ce 01       	movw	r24, r28
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	0e 94 96 24 	call	0x492c	; 0x492c <eeprom_update_block>

}
     d1a:	2b 96       	adiw	r28, 0x0b	; 11
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     d26:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <update_BOOTTIME>
	update_VERSION();
     d2a:	0e 94 75 06 	call	0xcea	; 0xcea <update_VERSION>
     d2e:	08 95       	ret

00000d30 <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	c8 50       	subi	r28, 0x08	; 8
     d3e:	d1 40       	sbci	r29, 0x01	; 1
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char errorFormat[] = "ERR,%d,%s";
     d44:	2a e0       	ldi	r18, 0x0A	; 10
     d46:	ef e3       	ldi	r30, 0x3F	; 63
     d48:	fa e8       	ldi	r31, 0x8A	; 138
     d4a:	de 01       	movw	r26, r28
     d4c:	a1 50       	subi	r26, 0x01	; 1
     d4e:	bf 4f       	sbci	r27, 0xFF	; 255
     d50:	01 90       	ld	r0, Z+
     d52:	0d 92       	st	X+, r0
     d54:	2a 95       	dec	r18
     d56:	e1 f7       	brne	.-8      	; 0xd50 <printError+0x20>

	if (!squelchErrors) {
     d58:	20 91 01 28 	lds	r18, 0x2801	; 0x802801 <squelchErrors>
     d5c:	21 11       	cpse	r18, r1
     d5e:	15 c0       	rjmp	.+42     	; 0xd8a <printError+0x5a>
		sprintf(strbuf, errorFormat, errorNumber, errorString);
     d60:	7f 93       	push	r23
     d62:	6f 93       	push	r22
     d64:	9f 93       	push	r25
     d66:	8f 93       	push	r24
     d68:	ce 01       	movw	r24, r28
     d6a:	81 50       	subi	r24, 0x01	; 1
     d6c:	9f 4f       	sbci	r25, 0xFF	; 255
     d6e:	9f 93       	push	r25
     d70:	8f 93       	push	r24
     d72:	8e 01       	movw	r16, r28
     d74:	0f 5f       	subi	r16, 0xFF	; 255
     d76:	1f 4f       	sbci	r17, 0xFF	; 255
     d78:	1f 93       	push	r17
     d7a:	0f 93       	push	r16
     d7c:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
		printLine(strbuf);
     d80:	c8 01       	movw	r24, r16
     d82:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	de bf       	out	0x3e, r29	; 62
	}

}
     d8a:	c8 5f       	subi	r28, 0xF8	; 248
     d8c:	de 4f       	sbci	r29, 0xFE	; 254
     d8e:	cd bf       	out	0x3d, r28	; 61
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	08 95       	ret

00000d9c <read_FRAM>:
	Returns:
		ERROR on start_TWI error (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     d9c:	cf 92       	push	r12
     d9e:	df 92       	push	r13
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	d8 2f       	mov	r29, r24
     dae:	d6 2e       	mov	r13, r22
     db0:	07 2f       	mov	r16, r23
     db2:	7a 01       	movw	r14, r20
     db4:	12 2f       	mov	r17, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if (start_TWI(addr, TWIWRITE) == ERROR) {		// TWI start
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
     dbc:	c8 2f       	mov	r28, r24
     dbe:	83 36       	cpi	r24, 0x63	; 99
     dc0:	19 f4       	brne	.+6      	; 0xdc8 <read_FRAM+0x2c>
		stop_TWI();
     dc2:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(ERROR);
     dc6:	2e c0       	rjmp	.+92     	; 0xe24 <read_FRAM+0x88>
	}

	if (write_TWI(memhigh) == ERROR) {			// Send memory address
     dc8:	80 2f       	mov	r24, r16
     dca:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
     dce:	c8 2f       	mov	r28, r24
     dd0:	83 36       	cpi	r24, 0x63	; 99
     dd2:	41 f1       	breq	.+80     	; 0xe24 <read_FRAM+0x88>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {
     dd4:	8d 2d       	mov	r24, r13
     dd6:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
     dda:	c8 2f       	mov	r28, r24
     ddc:	83 36       	cpi	r24, 0x63	; 99
     dde:	11 f1       	breq	.+68     	; 0xe24 <read_FRAM+0x88>
		return(ERROR);
	}

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	8d 2f       	mov	r24, r29
     de4:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
     de8:	c8 2f       	mov	r28, r24
     dea:	83 36       	cpi	r24, 0x63	; 99
     dec:	d9 f0       	breq	.+54     	; 0xe24 <read_FRAM+0x88>
     dee:	c0 e0       	ldi	r28, 0x00	; 0
     df0:	08 c0       	rjmp	.+16     	; 0xe02 <read_FRAM+0x66>
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     df2:	67 01       	movw	r12, r14
     df4:	cc 0e       	add	r12, r28
     df6:	d1 1c       	adc	r13, r1
     df8:	0e 94 57 19 	call	0x32ae	; 0x32ae <read_TWI>
     dfc:	f6 01       	movw	r30, r12
     dfe:	80 83       	st	Z, r24

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
     e00:	cf 5f       	subi	r28, 0xFF	; 255
     e02:	2c 2f       	mov	r18, r28
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	81 2f       	mov	r24, r17
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	28 17       	cp	r18, r24
     e0e:	39 07       	cpc	r19, r25
     e10:	84 f3       	brlt	.-32     	; 0xdf2 <read_FRAM+0x56>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     e12:	ec 01       	movw	r28, r24
     e14:	ce 0d       	add	r28, r14
     e16:	df 1d       	adc	r29, r15
     e18:	0e 94 67 19 	call	0x32ce	; 0x32ce <readlast_TWI>
     e1c:	88 83       	st	Y, r24

	stop_TWI();
     e1e:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>

	return(NOERROR);
     e22:	c0 e0       	ldi	r28, 0x00	; 0

}
     e24:	8c 2f       	mov	r24, r28
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	df 90       	pop	r13
     e34:	cf 90       	pop	r12
     e36:	08 95       	ret

00000e38 <get_SETTIME>:
#include "twi.h"
#include "fram.h"

#include "commands.h" // only for testing
uint8_t get_SETTIME(char *lastsettime)
{
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	2a 97       	sbiw	r28, 0x0a	; 10
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	7c 01       	movw	r14, r24

	const char timeset[] = "Time Set?";
     e4e:	8a e0       	ldi	r24, 0x0A	; 10
     e50:	e9 e4       	ldi	r30, 0x49	; 73
     e52:	fa e8       	ldi	r31, 0x8A	; 138
     e54:	de 01       	movw	r26, r28
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	01 90       	ld	r0, Z+
     e5a:	0d 92       	st	X+, r0
     e5c:	8a 95       	dec	r24
     e5e:	e1 f7       	brne	.-8      	; 0xe58 <get_SETTIME+0x20>
	if (read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, ISOTIMELEN) == ERROR) {;
     e60:	24 e1       	ldi	r18, 0x14	; 20
     e62:	a7 01       	movw	r20, r14
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	80 e5       	ldi	r24, 0x50	; 80
     e6a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <read_FRAM>
     e6e:	18 2f       	mov	r17, r24
     e70:	83 36       	cpi	r24, 0x63	; 99
     e72:	39 f4       	brne	.+14     	; 0xe82 <get_SETTIME+0x4a>
		strcpy(lastsettime, timeset);
     e74:	be 01       	movw	r22, r28
     e76:	6f 5f       	subi	r22, 0xFF	; 255
     e78:	7f 4f       	sbci	r23, 0xFF	; 255
     e7a:	c7 01       	movw	r24, r14
     e7c:	0e 94 af 23 	call	0x475e	; 0x475e <strcpy>
		return(ERROR);
     e80:	01 c0       	rjmp	.+2      	; 0xe84 <get_SETTIME+0x4c>
	}
	return(NOERROR);
     e82:	10 e0       	ldi	r17, 0x00	; 0
}
     e84:	81 2f       	mov	r24, r17
     e86:	2a 96       	adiw	r28, 0x0a	; 10
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	08 95       	ret

00000e98 <write_FRAM>:
	Returns:
		ERROR if start_TWI fails (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	f6 2e       	mov	r15, r22
     ea6:	17 2f       	mov	r17, r23
     ea8:	ea 01       	movw	r28, r20
     eaa:	02 2f       	mov	r16, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if (start_TWI(addr, TWIWRITE) == ERROR) {	// TWI START
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
     eb2:	83 36       	cpi	r24, 0x63	; 99
     eb4:	e1 f0       	breq	.+56     	; 0xeee <write_FRAM+0x56>
		return(ERROR);
	}

	if (write_TWI(memhigh) == ERROR) {			// FRAM address to write
     eb6:	81 2f       	mov	r24, r17
     eb8:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
     ebc:	83 36       	cpi	r24, 0x63	; 99
     ebe:	b9 f0       	breq	.+46     	; 0xeee <write_FRAM+0x56>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
     ec0:	8f 2d       	mov	r24, r15
     ec2:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
     ec6:	83 36       	cpi	r24, 0x63	; 99
     ec8:	91 f0       	breq	.+36     	; 0xeee <write_FRAM+0x56>
     eca:	10 e0       	ldi	r17, 0x00	; 0
     ecc:	0b c0       	rjmp	.+22     	; 0xee4 <write_FRAM+0x4c>
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
     ece:	7e 01       	movw	r14, r28
     ed0:	8f ef       	ldi	r24, 0xFF	; 255
     ed2:	e8 1a       	sub	r14, r24
     ed4:	f8 0a       	sbc	r15, r24
     ed6:	88 81       	ld	r24, Y
     ed8:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
     edc:	83 36       	cpi	r24, 0x63	; 99
     ede:	39 f0       	breq	.+14     	; 0xeee <write_FRAM+0x56>
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
     ee0:	1f 5f       	subi	r17, 0xFF	; 255
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
     ee2:	e7 01       	movw	r28, r14
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
     ee4:	10 17       	cp	r17, r16
     ee6:	98 f3       	brcs	.-26     	; 0xece <write_FRAM+0x36>
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
			return(ERROR);
		}
	}

	stop_TWI();
     ee8:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>

	return(NOERROR);
     eec:	80 e0       	ldi	r24, 0x00	; 0

}
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	08 95       	ret

00000efc <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     efc:	8f 92       	push	r8
     efe:	9f 92       	push	r9
     f00:	af 92       	push	r10
     f02:	bf 92       	push	r11
     f04:	cf 92       	push	r12
     f06:	df 92       	push	r13
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	00 d0       	rcall	.+0      	; 0xf16 <get_humidity+0x1a>
     f16:	00 d0       	rcall	.+0      	; 0xf18 <get_humidity+0x1c>
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62

	uint8_t adcpin;
	float voltage, humidity, temperature;

	switch (sensor) {
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	59 f0       	breq	.+22     	; 0xf36 <get_humidity+0x3a>
     f20:	18 f0       	brcs	.+6      	; 0xf28 <get_humidity+0x2c>
     f22:	82 30       	cpi	r24, 0x02	; 2
     f24:	79 f0       	breq	.+30     	; 0xf44 <get_humidity+0x48>
     f26:	15 c0       	rjmp	.+42     	; 0xf52 <get_humidity+0x56>
		case 0:
			temperature = get_temperature(0);
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	0e 94 ee 18 	call	0x31dc	; 0x31dc <get_temperature>
     f2e:	6b 01       	movw	r12, r22
     f30:	7c 01       	movw	r14, r24
			adcpin = AIN0;		// production
     f32:	40 e4       	ldi	r20, 0x40	; 64
			break;
     f34:	17 c0       	rjmp	.+46     	; 0xf64 <get_humidity+0x68>

		case 1:
			temperature = get_temperature(1);
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	0e 94 ee 18 	call	0x31dc	; 0x31dc <get_temperature>
     f3c:	6b 01       	movw	r12, r22
     f3e:	7c 01       	movw	r14, r24
			adcpin = AIN1;
     f40:	40 e5       	ldi	r20, 0x50	; 80
			break;
     f42:	10 c0       	rjmp	.+32     	; 0xf64 <get_humidity+0x68>

		case 2:
			temperature = get_temperature(2);
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	0e 94 ee 18 	call	0x31dc	; 0x31dc <get_temperature>
     f4a:	6b 01       	movw	r12, r22
     f4c:	7c 01       	movw	r14, r24
			adcpin = AIN2;
     f4e:	40 e6       	ldi	r20, 0x60	; 96
			break;
     f50:	09 c0       	rjmp	.+18     	; 0xf64 <get_humidity+0x68>

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     f52:	0f 2e       	mov	r0, r31
     f54:	c1 2c       	mov	r12, r1
     f56:	d1 2c       	mov	r13, r1
     f58:	f0 ea       	ldi	r31, 0xA0	; 160
     f5a:	ef 2e       	mov	r14, r31
     f5c:	f1 e4       	ldi	r31, 0x41	; 65
     f5e:	ff 2e       	mov	r15, r31
     f60:	f0 2d       	mov	r31, r0
			adcpin = AIN2;
			break;

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     f62:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
     f64:	8e 01       	movw	r16, r28
     f66:	0f 5f       	subi	r16, 0xFF	; 255
     f68:	1f 4f       	sbci	r17, 0xFF	; 255
     f6a:	20 e8       	ldi	r18, 0x80	; 128
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	88 e4       	ldi	r24, 0x48	; 72
     f70:	0e 94 c8 01 	call	0x390	; 0x390 <read_ADS1115>
     f74:	83 36       	cpi	r24, 0x63	; 99
     f76:	79 f1       	breq	.+94     	; 0xfd6 <get_humidity+0xda>
		humidity = BADFLOAT;
	}
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 ea       	ldi	r20, 0xA0	; 160
     f7e:	50 e4       	ldi	r21, 0x40	; 64
     f80:	69 81       	ldd	r22, Y+1	; 0x01
     f82:	7a 81       	ldd	r23, Y+2	; 0x02
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	9c 81       	ldd	r25, Y+4	; 0x04
     f88:	0e 94 cd 1c 	call	0x399a	; 0x399a <__divsf3>
     f8c:	2a e0       	ldi	r18, 0x0A	; 10
     f8e:	37 ed       	ldi	r19, 0xD7	; 215
     f90:	43 e2       	ldi	r20, 0x23	; 35
     f92:	5e e3       	ldi	r21, 0x3E	; 62
     f94:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__subsf3>
     f98:	2f e5       	ldi	r18, 0x5F	; 95
     f9a:	39 e2       	ldi	r19, 0x29	; 41
     f9c:	4b ec       	ldi	r20, 0xCB	; 203
     f9e:	5b e3       	ldi	r21, 0x3B	; 59
     fa0:	0e 94 cd 1c 	call	0x399a	; 0x399a <__divsf3>
     fa4:	4b 01       	movw	r8, r22
     fa6:	5c 01       	movw	r10, r24
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
     fa8:	29 ec       	ldi	r18, 0xC9	; 201
     faa:	3e e8       	ldi	r19, 0x8E	; 142
     fac:	4d e0       	ldi	r20, 0x0D	; 13
     fae:	5b e3       	ldi	r21, 0x3B	; 59
     fb0:	c7 01       	movw	r24, r14
     fb2:	b6 01       	movw	r22, r12
     fb4:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__mulsf3>
     fb8:	9b 01       	movw	r18, r22
     fba:	ac 01       	movw	r20, r24
     fbc:	62 e2       	ldi	r22, 0x22	; 34
     fbe:	7d ef       	ldi	r23, 0xFD	; 253
     fc0:	86 e8       	ldi	r24, 0x86	; 134
     fc2:	9f e3       	ldi	r25, 0x3F	; 63
     fc4:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__subsf3>
     fc8:	9b 01       	movw	r18, r22
     fca:	ac 01       	movw	r20, r24
     fcc:	c5 01       	movw	r24, r10
     fce:	b4 01       	movw	r22, r8
     fd0:	0e 94 cd 1c 	call	0x399a	; 0x399a <__divsf3>
     fd4:	04 c0       	rjmp	.+8      	; 0xfde <get_humidity+0xe2>
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
		humidity = BADFLOAT;
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	70 e8       	ldi	r23, 0x80	; 128
     fda:	86 e2       	ldi	r24, 0x26	; 38
     fdc:	94 ec       	ldi	r25, 0xC4	; 196
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
	}

	return(humidity);

}
     fde:	24 96       	adiw	r28, 0x04	; 4
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	df 90       	pop	r13
     ff2:	cf 90       	pop	r12
     ff4:	bf 90       	pop	r11
     ff6:	af 90       	pop	r10
     ff8:	9f 90       	pop	r9
     ffa:	8f 90       	pop	r8
     ffc:	08 95       	ret

00000ffe <initialize>:
#include "initialize.h"

uint8_t rebootackd;

void initialize(void)
{
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	2b 97       	sbiw	r28, 0x0b	; 11
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	rebootackd = NO;
    100c:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <rebootackd>
	timerOLED = 0;					// See oled.h
    1010:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED>
    1014:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED+0x1>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
    1018:	80 ee       	ldi	r24, 0xE0	; 224
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	80 93 0e 2a 	sts	0x2A0E, r24	; 0x802a0e <timeoutOLED>
    1020:	90 93 0f 2a 	sts	0x2A0F, r25	; 0x802a0f <timeoutOLED+0x1>

	init_PORTS();
    1024:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <init_PORTS>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
    1028:	80 e2       	ldi	r24, 0x20	; 32
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 61 18 	call	0x30c2	; 0x30c2 <init_RTC>
	init_TWI();
    1030:	0e 94 4c 19 	call	0x3298	; 0x3298 <init_TWI>
	init_MMA8451();	// Accelerometer; needs TWI
    1034:	0e 94 a7 0a 	call	0x154e	; 0x154e <init_MMA8451>
	init_PNEU();	// Set up MCP23008; needs TWI
    1038:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <init_PNEU>
	init_OLED();	// Needs TWI
    103c:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <init_OLED>
	init_EEPROM();	// Needs TWI to get boot time
    1040:	0e 94 93 06 	call	0xd26	; 0xd26 <init_EEPROM>
	init_USART();
    1044:	0e 94 de 19 	call	0x33bc	; 0x33bc <init_USART>
	sei();
    1048:	78 94       	sei
	init_MOTORS();	// Needs USART & interrupts on
    104a:	0e 94 33 18 	call	0x3066	; 0x3066 <init_MOTORS>
	get_VERSION(versionstr);
    104e:	ce 01       	movw	r24, r28
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	0e 94 55 06 	call	0xcaa	; 0xcaa <get_VERSION>
	writestr_OLED(0,"specMech Version", 1);
    1056:	41 e0       	ldi	r20, 0x01	; 1
    1058:	63 e5       	ldi	r22, 0x53	; 83
    105a:	7a e8       	ldi	r23, 0x8A	; 138
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
	writestr_OLED(0, versionstr, 2);
    1062:	42 e0       	ldi	r20, 0x02	; 2
    1064:	be 01       	movw	r22, r28
    1066:	6f 5f       	subi	r22, 0xFF	; 255
    1068:	7f 4f       	sbci	r23, 0xFF	; 255
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>

}
    1070:	2b 96       	adiw	r28, 0x0b	; 11
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	08 95       	ret

0000107c <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
    107c:	cf 92       	push	r12
    107e:	df 92       	push	r13
    1080:	ef 92       	push	r14
    1082:	ff 92       	push	r15
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	00 d0       	rcall	.+0      	; 0x108e <read_ionpump+0x12>
    108e:	00 d0       	rcall	.+0      	; 0x1090 <read_ionpump+0x14>
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	21 f0       	breq	.+8      	; 0x10a0 <read_ionpump+0x24>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
    1098:	82 30       	cpi	r24, 0x02	; 2
    109a:	c1 f5       	brne	.+112    	; 0x110c <read_ionpump+0x90>
		pins = AIN23;
    109c:	40 e3       	ldi	r20, 0x30	; 48
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <read_ionpump+0x26>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
    10a0:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(BADFLOAT);
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
    10a2:	8e 01       	movw	r16, r28
    10a4:	0f 5f       	subi	r16, 0xFF	; 255
    10a6:	1f 4f       	sbci	r17, 0xFF	; 255
    10a8:	20 e8       	ldi	r18, 0x80	; 128
    10aa:	62 e0       	ldi	r22, 0x02	; 2
    10ac:	89 e4       	ldi	r24, 0x49	; 73
    10ae:	0e 94 c8 01 	call	0x390	; 0x390 <read_ADS1115>
    10b2:	83 36       	cpi	r24, 0x63	; 99
    10b4:	81 f1       	breq	.+96     	; 0x1116 <read_ionpump+0x9a>
		return(BADFLOAT);
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
    10b6:	c9 80       	ldd	r12, Y+1	; 0x01
    10b8:	da 80       	ldd	r13, Y+2	; 0x02
    10ba:	eb 80       	ldd	r14, Y+3	; 0x03
    10bc:	fc 80       	ldd	r15, Y+4	; 0x04
    10be:	2d ec       	ldi	r18, 0xCD	; 205
    10c0:	3c ec       	ldi	r19, 0xCC	; 204
    10c2:	4c ec       	ldi	r20, 0xCC	; 204
    10c4:	5e e3       	ldi	r21, 0x3E	; 62
    10c6:	c7 01       	movw	r24, r14
    10c8:	b6 01       	movw	r22, r12
    10ca:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__cmpsf2>
    10ce:	88 23       	and	r24, r24
    10d0:	3c f1       	brlt	.+78     	; 0x1120 <read_ionpump+0xa4>
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	50 e4       	ldi	r21, 0x40	; 64
    10da:	c7 01       	movw	r24, r14
    10dc:	b6 01       	movw	r22, r12
    10de:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <__gesf2>
    10e2:	18 16       	cp	r1, r24
    10e4:	14 f1       	brlt	.+68     	; 0x112a <read_ionpump+0xae>
		return(BADFLOAT);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    10e6:	29 e7       	ldi	r18, 0x79	; 121
    10e8:	39 ee       	ldi	r19, 0xE9	; 233
    10ea:	42 e0       	ldi	r20, 0x02	; 2
    10ec:	50 e4       	ldi	r21, 0x40	; 64
    10ee:	c7 01       	movw	r24, r14
    10f0:	b6 01       	movw	r22, r12
    10f2:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__mulsf3>
    10f6:	2e e6       	ldi	r18, 0x6E	; 110
    10f8:	33 ea       	ldi	r19, 0xA3	; 163
    10fa:	4b ed       	ldi	r20, 0xDB	; 219
    10fc:	50 e4       	ldi	r21, 0x40	; 64
    10fe:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__subsf3>
	return(vacuum);
    1102:	56 2f       	mov	r21, r22
    1104:	47 2f       	mov	r20, r23
    1106:	38 2f       	mov	r19, r24
    1108:	29 2f       	mov	r18, r25
    110a:	13 c0       	rjmp	.+38     	; 0x1132 <read_ionpump+0xb6>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(BADFLOAT);
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	40 e8       	ldi	r20, 0x80	; 128
    1110:	36 e2       	ldi	r19, 0x26	; 38
    1112:	24 ec       	ldi	r18, 0xC4	; 196
    1114:	0e c0       	rjmp	.+28     	; 0x1132 <read_ionpump+0xb6>
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
		return(BADFLOAT);
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	40 e8       	ldi	r20, 0x80	; 128
    111a:	36 e2       	ldi	r19, 0x26	; 38
    111c:	24 ec       	ldi	r18, 0xC4	; 196
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <read_ionpump+0xb6>
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	40 e8       	ldi	r20, 0x80	; 128
    1124:	36 e2       	ldi	r19, 0x26	; 38
    1126:	24 ec       	ldi	r18, 0xC4	; 196
    1128:	04 c0       	rjmp	.+8      	; 0x1132 <read_ionpump+0xb6>
	} else if (voltage > 2.0) {
		return(BADFLOAT);
    112a:	50 e0       	ldi	r21, 0x00	; 0
    112c:	40 e8       	ldi	r20, 0x80	; 128
    112e:	36 e2       	ldi	r19, 0x26	; 38
    1130:	24 ec       	ldi	r18, 0xC4	; 196
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
    1132:	65 2f       	mov	r22, r21
    1134:	74 2f       	mov	r23, r20
    1136:	83 2f       	mov	r24, r19
    1138:	92 2f       	mov	r25, r18
    113a:	24 96       	adiw	r28, 0x04	; 4
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	1f 91       	pop	r17
    1146:	0f 91       	pop	r16
    1148:	ff 90       	pop	r15
    114a:	ef 90       	pop	r14
    114c:	df 90       	pop	r13
    114e:	cf 90       	pop	r12
    1150:	08 95       	ret

00001152 <main>:
uint8_t firstpass;

int main(void)
{

	firstpass = YES;		// Set to NO in commands.c
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	80 93 0b 2a 	sts	0x2A0B, r24	; 0x802a0b <firstpass>
	squelchErrors = YES;
    1158:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <squelchErrors>
	initialize();
    115c:	0e 94 ff 07 	call	0xffe	; 0xffe <initialize>
	squelchErrors = NO;
    1160:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <squelchErrors>

	for (;;) {
		if (recv0_buf.done) {
    1164:	80 91 1c 2c 	lds	r24, 0x2C1C	; 0x802c1c <recv0_buf+0x103>
    1168:	88 23       	and	r24, r24
    116a:	21 f0       	breq	.+8      	; 0x1174 <main+0x22>
			recv0_buf.done = NO;
    116c:	10 92 1c 2c 	sts	0x2C1C, r1	; 0x802c1c <recv0_buf+0x103>
			commands();
    1170:	0e 94 5e 04 	call	0x8bc	; 0x8bc <commands>
		}
		if (timerOLED > timeoutOLED) {	// Display timeout
    1174:	20 91 0c 2a 	lds	r18, 0x2A0C	; 0x802a0c <timerOLED>
    1178:	30 91 0d 2a 	lds	r19, 0x2A0D	; 0x802a0d <timerOLED+0x1>
    117c:	80 91 0e 2a 	lds	r24, 0x2A0E	; 0x802a0e <timeoutOLED>
    1180:	90 91 0f 2a 	lds	r25, 0x2A0F	; 0x802a0f <timeoutOLED+0x1>
    1184:	82 17       	cp	r24, r18
    1186:	93 07       	cpc	r25, r19
    1188:	78 f4       	brcc	.+30     	; 0x11a8 <main+0x56>
			squelchErrors = YES;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <squelchErrors>
			clear_OLED(0);
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <clear_OLED>
			clear_OLED(1);
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <clear_OLED>
			timerOLED = 0;
    119c:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED>
    11a0:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED+0x1>
			squelchErrors = NO;
    11a4:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <squelchErrors>
		} if ((timerSAVEENCODER > timeoutSAVEENCODER) && rebootackd) {
    11a8:	90 91 12 2a 	lds	r25, 0x2A12	; 0x802a12 <timerSAVEENCODER>
    11ac:	80 91 11 2a 	lds	r24, 0x2A11	; 0x802a11 <timeoutSAVEENCODER>
    11b0:	89 17       	cp	r24, r25
    11b2:	c0 f6       	brcc	.-80     	; 0x1164 <main+0x12>
    11b4:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <rebootackd>
    11b8:	88 23       	and	r24, r24
    11ba:	a1 f2       	breq	.-88     	; 0x1164 <main+0x12>
			squelchErrors = YES;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <squelchErrors>
			putFRAM_MOTOREncoder(128);
    11c2:	80 e8       	ldi	r24, 0x80	; 128
    11c4:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <putFRAM_MOTOREncoder>
			timerSAVEENCODER = 0;
    11c8:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <timerSAVEENCODER>
			squelchErrors = NO;
    11cc:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <squelchErrors>
    11d0:	c9 cf       	rjmp	.-110    	; 0x1164 <main+0x12>

000011d2 <read_MCP23008>:
	Returns:
		ERROR if TWI error
		NOERROR Otherwise
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	c8 2f       	mov	r28, r24
    11d8:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
    11e0:	83 36       	cpi	r24, 0x63	; 99
    11e2:	51 f4       	brne	.+20     	; 0x11f8 <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 read error");
    11e4:	64 e6       	ldi	r22, 0x64	; 100
    11e6:	7a e8       	ldi	r23, 0x8A	; 138
    11e8:	82 e9       	ldi	r24, 0x92	; 146
    11ea:	91 e0       	ldi	r25, 0x01	; 1
    11ec:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		stop_TWI();
    11f0:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(0xFF);
    11f4:	8f ef       	ldi	r24, 0xFF	; 255
    11f6:	0d c0       	rjmp	.+26     	; 0x1212 <read_MCP23008+0x40>
	}
	write_TWI(reg);
    11f8:	8d 2f       	mov	r24, r29
    11fa:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
	start_TWI(addr, TWIREAD);
    11fe:	61 e0       	ldi	r22, 0x01	; 1
    1200:	8c 2f       	mov	r24, r28
    1202:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
	value = readlast_TWI();
    1206:	0e 94 67 19 	call	0x32ce	; 0x32ce <readlast_TWI>
    120a:	c8 2f       	mov	r28, r24
	stop_TWI();
    120c:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
	return(value);
    1210:	8c 2f       	mov	r24, r28

}
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	08 95       	ret

00001218 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	d6 2f       	mov	r29, r22
    1220:	14 2f       	mov	r17, r20

	uint8_t retval;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
    1228:	c8 2f       	mov	r28, r24
    122a:	83 36       	cpi	r24, 0x63	; 99
    122c:	49 f4       	brne	.+18     	; 0x1240 <write_MCP23008+0x28>
		printError(ERR_MCP23008, "MCP23008 write error");
    122e:	68 e7       	ldi	r22, 0x78	; 120
    1230:	7a e8       	ldi	r23, 0x8A	; 138
    1232:	82 e9       	ldi	r24, 0x92	; 146
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		stop_TWI();
    123a:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(ERROR);
    123e:	15 c0       	rjmp	.+42     	; 0x126a <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(reg))) {
    1240:	8d 2f       	mov	r24, r29
    1242:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
    1246:	88 23       	and	r24, r24
    1248:	21 f0       	breq	.+8      	; 0x1252 <write_MCP23008+0x3a>
		stop_TWI();
    124a:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(ERROR);
    124e:	c3 e6       	ldi	r28, 0x63	; 99
    1250:	0c c0       	rjmp	.+24     	; 0x126a <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(val))) {
    1252:	81 2f       	mov	r24, r17
    1254:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
    1258:	88 23       	and	r24, r24
    125a:	21 f0       	breq	.+8      	; 0x1264 <write_MCP23008+0x4c>
		stop_TWI();
    125c:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(ERROR);
    1260:	c3 e6       	ldi	r28, 0x63	; 99
    1262:	03 c0       	rjmp	.+6      	; 0x126a <write_MCP23008+0x52>
	}
	stop_TWI();
    1264:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
	return(NOERROR);
    1268:	c0 e0       	ldi	r28, 0x00	; 0
	
}
    126a:	8c 2f       	mov	r24, r28
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	08 95       	ret

00001274 <read_MCP9808>:
#include "errors.h"
#include "mcp9808.h"
#include "twi.h"

uint8_t read_MCP9808(float *temperature)
{
    1274:	8f 92       	push	r8
    1276:	9f 92       	push	r9
    1278:	af 92       	push	r10
    127a:	bf 92       	push	r11
    127c:	ff 92       	push	r15
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	8c 01       	movw	r16, r24

	uint8_t highbyte, lowbyte, sign;
	float temp;

	if (start_TWI(MCP9808ADDR, TWIWRITE) == ERROR) {
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	88 e1       	ldi	r24, 0x18	; 24
    128c:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
    1290:	83 36       	cpi	r24, 0x63	; 99
    1292:	51 f4       	brne	.+20     	; 0x12a8 <read_MCP9808+0x34>
		*temperature = BADFLOAT;
    1294:	40 e0       	ldi	r20, 0x00	; 0
    1296:	50 e8       	ldi	r21, 0x80	; 128
    1298:	66 e2       	ldi	r22, 0x26	; 38
    129a:	74 ec       	ldi	r23, 0xC4	; 196
    129c:	f8 01       	movw	r30, r16
    129e:	40 83       	st	Z, r20
    12a0:	51 83       	std	Z+1, r21	; 0x01
    12a2:	62 83       	std	Z+2, r22	; 0x02
    12a4:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    12a6:	43 c0       	rjmp	.+134    	; 0x132e <read_MCP9808+0xba>
	}
	write_TWI(TEMPREGISTER);
    12a8:	85 e0       	ldi	r24, 0x05	; 5
    12aa:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    12ae:	61 e0       	ldi	r22, 0x01	; 1
    12b0:	88 e1       	ldi	r24, 0x18	; 24
    12b2:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
	highbyte = read_TWI();
    12b6:	0e 94 57 19 	call	0x32ae	; 0x32ae <read_TWI>
    12ba:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    12bc:	0e 94 67 19 	call	0x32ce	; 0x32ce <readlast_TWI>
    12c0:	d8 2f       	mov	r29, r24
	stop_TWI();
    12c2:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    12c6:	fc 2f       	mov	r31, r28
    12c8:	f0 71       	andi	r31, 0x10	; 16
    12ca:	ff 2e       	mov	r15, r31
	highbyte &= 0x0F;					// Clear threshold & sign bits
    12cc:	6c 2f       	mov	r22, r28
    12ce:	6f 70       	andi	r22, 0x0F	; 15
	temp = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <__floatunsisf>
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	40 e8       	ldi	r20, 0x80	; 128
    12e0:	51 e4       	ldi	r21, 0x41	; 65
    12e2:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__mulsf3>
    12e6:	4b 01       	movw	r8, r22
    12e8:	5c 01       	movw	r10, r24
    12ea:	6d 2f       	mov	r22, r29
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <__floatunsisf>
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e8       	ldi	r20, 0x80	; 128
    12fc:	5d e3       	ldi	r21, 0x3D	; 61
    12fe:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__mulsf3>
    1302:	9b 01       	movw	r18, r22
    1304:	ac 01       	movw	r20, r24
    1306:	c5 01       	movw	r24, r10
    1308:	b4 01       	movw	r22, r8
    130a:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__addsf3>
	if (sign) {
    130e:	ff 20       	and	r15, r15
    1310:	41 f0       	breq	.+16     	; 0x1322 <read_MCP9808+0xae>
		temp = 256.0 - temp;
    1312:	9b 01       	movw	r18, r22
    1314:	ac 01       	movw	r20, r24
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	80 e8       	ldi	r24, 0x80	; 128
    131c:	93 e4       	ldi	r25, 0x43	; 67
    131e:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__subsf3>
	}
	*temperature = temp;
    1322:	f8 01       	movw	r30, r16
    1324:	60 83       	st	Z, r22
    1326:	71 83       	std	Z+1, r23	; 0x01
    1328:	82 83       	std	Z+2, r24	; 0x02
    132a:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    132c:	80 e0       	ldi	r24, 0x00	; 0
}
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	ff 90       	pop	r15
    1338:	bf 90       	pop	r11
    133a:	af 90       	pop	r10
    133c:	9f 90       	pop	r9
    133e:	8f 90       	pop	r8
    1340:	08 95       	ret

00001342 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	f8 2e       	mov	r15, r24
    1350:	e6 2e       	mov	r14, r22
    1352:	ea 01       	movw	r28, r20
    1354:	02 2f       	mov	r16, r18

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
    135c:	18 2f       	mov	r17, r24
    135e:	83 36       	cpi	r24, 0x63	; 99
    1360:	19 f4       	brne	.+6      	; 0x1368 <read_MMA8451+0x26>
		stop_TWI();
    1362:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(ERROR);
    1366:	23 c0       	rjmp	.+70     	; 0x13ae <read_MMA8451+0x6c>
	}
	if (write_TWI(reg) == ERROR) {
    1368:	8e 2d       	mov	r24, r14
    136a:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
    136e:	18 2f       	mov	r17, r24
    1370:	83 36       	cpi	r24, 0x63	; 99
    1372:	e9 f0       	breq	.+58     	; 0x13ae <read_MMA8451+0x6c>
		return(ERROR);
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	8f 2d       	mov	r24, r15
    1378:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
    137c:	18 2f       	mov	r17, r24
    137e:	83 36       	cpi	r24, 0x63	; 99
    1380:	69 f4       	brne	.+26     	; 0x139c <read_MMA8451+0x5a>
		stop_TWI();
    1382:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(ERROR);
    1386:	13 c0       	rjmp	.+38     	; 0x13ae <read_MMA8451+0x6c>
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    1388:	7e 01       	movw	r14, r28
    138a:	8f ef       	ldi	r24, 0xFF	; 255
    138c:	e8 1a       	sub	r14, r24
    138e:	f8 0a       	sbc	r15, r24
    1390:	0e 94 57 19 	call	0x32ae	; 0x32ae <read_TWI>
    1394:	88 83       	st	Y, r24
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    1396:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    1398:	e7 01       	movw	r28, r14
    139a:	01 c0       	rjmp	.+2      	; 0x139e <read_MMA8451+0x5c>
    139c:	11 e0       	ldi	r17, 0x01	; 1
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    139e:	10 17       	cp	r17, r16
    13a0:	98 f3       	brcs	.-26     	; 0x1388 <read_MMA8451+0x46>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    13a2:	0e 94 67 19 	call	0x32ce	; 0x32ce <readlast_TWI>
    13a6:	88 83       	st	Y, r24
	stop_TWI();
    13a8:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
	return(NOERROR);
    13ac:	10 e0       	ldi	r17, 0x00	; 0

}
    13ae:	81 2f       	mov	r24, r17
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	ff 90       	pop	r15
    13ba:	ef 90       	pop	r14
    13bc:	08 95       	ret

000013be <get_orientation>:
uint8_t get_orientation(float *x, float *y, float *z)
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
uint8_t get_orientation(float *x, float *y, float *z)
{
    13be:	cf 92       	push	r12
    13c0:	df 92       	push	r13
    13c2:	ef 92       	push	r14
    13c4:	ff 92       	push	r15
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	26 97       	sbiw	r28, 0x06	; 6
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	6c 01       	movw	r12, r24
    13da:	7b 01       	movw	r14, r22
    13dc:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = BADFLOAT;
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e8       	ldi	r25, 0x80	; 128
    13e2:	a6 e2       	ldi	r26, 0x26	; 38
    13e4:	b4 ec       	ldi	r27, 0xC4	; 196
    13e6:	fa 01       	movw	r30, r20
    13e8:	80 83       	st	Z, r24
    13ea:	91 83       	std	Z+1, r25	; 0x01
    13ec:	a2 83       	std	Z+2, r26	; 0x02
    13ee:	b3 83       	std	Z+3, r27	; 0x03
    13f0:	fb 01       	movw	r30, r22
    13f2:	80 83       	st	Z, r24
    13f4:	91 83       	std	Z+1, r25	; 0x01
    13f6:	a2 83       	std	Z+2, r26	; 0x02
    13f8:	b3 83       	std	Z+3, r27	; 0x03
    13fa:	f6 01       	movw	r30, r12
    13fc:	80 83       	st	Z, r24
    13fe:	91 83       	std	Z+1, r25	; 0x01
    1400:	a2 83       	std	Z+2, r26	; 0x02
    1402:	b3 83       	std	Z+3, r27	; 0x03

	if (read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6) == ERROR) {
    1404:	26 e0       	ldi	r18, 0x06	; 6
    1406:	ae 01       	movw	r20, r28
    1408:	4f 5f       	subi	r20, 0xFF	; 255
    140a:	5f 4f       	sbci	r21, 0xFF	; 255
    140c:	61 e0       	ldi	r22, 0x01	; 1
    140e:	8d e1       	ldi	r24, 0x1D	; 29
    1410:	0e 94 a1 09 	call	0x1342	; 0x1342 <read_MMA8451>
    1414:	83 36       	cpi	r24, 0x63	; 99
    1416:	09 f4       	brne	.+2      	; 0x141a <get_orientation+0x5c>
    1418:	64 c0       	rjmp	.+200    	; 0x14e2 <get_orientation+0x124>
		return(ERROR);
	}

	ix = datain[0];
    141a:	69 81       	ldd	r22, Y+1	; 0x01
    141c:	70 e0       	ldi	r23, 0x00	; 0
	ix <<= 8;
    141e:	76 2f       	mov	r23, r22
    1420:	66 27       	eor	r22, r22
	ix |= datain[1];
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	68 2b       	or	r22, r24
	ix >>= 2;
    1426:	75 95       	asr	r23
    1428:	67 95       	ror	r22
    142a:	75 95       	asr	r23
    142c:	67 95       	ror	r22
	*x = 980.6 * ((float) ix/4096.0);
    142e:	07 2e       	mov	r0, r23
    1430:	00 0c       	add	r0, r0
    1432:	88 0b       	sbc	r24, r24
    1434:	99 0b       	sbc	r25, r25
    1436:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__floatsisf>
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e8       	ldi	r20, 0x80	; 128
    1440:	59 e3       	ldi	r21, 0x39	; 57
    1442:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__mulsf3>
    1446:	26 e6       	ldi	r18, 0x66	; 102
    1448:	36 e2       	ldi	r19, 0x26	; 38
    144a:	45 e7       	ldi	r20, 0x75	; 117
    144c:	54 e4       	ldi	r21, 0x44	; 68
    144e:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__mulsf3>
    1452:	f6 01       	movw	r30, r12
    1454:	60 83       	st	Z, r22
    1456:	71 83       	std	Z+1, r23	; 0x01
    1458:	82 83       	std	Z+2, r24	; 0x02
    145a:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    145c:	6b 81       	ldd	r22, Y+3	; 0x03
    145e:	70 e0       	ldi	r23, 0x00	; 0
	iy <<= 8;
    1460:	76 2f       	mov	r23, r22
    1462:	66 27       	eor	r22, r22
	iy |= datain[3];
    1464:	8c 81       	ldd	r24, Y+4	; 0x04
    1466:	68 2b       	or	r22, r24
	iy >>= 2;
    1468:	75 95       	asr	r23
    146a:	67 95       	ror	r22
    146c:	75 95       	asr	r23
    146e:	67 95       	ror	r22
	*y = 980.6 * ((float) iy/4096.0);
    1470:	07 2e       	mov	r0, r23
    1472:	00 0c       	add	r0, r0
    1474:	88 0b       	sbc	r24, r24
    1476:	99 0b       	sbc	r25, r25
    1478:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__floatsisf>
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e8       	ldi	r20, 0x80	; 128
    1482:	59 e3       	ldi	r21, 0x39	; 57
    1484:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__mulsf3>
    1488:	26 e6       	ldi	r18, 0x66	; 102
    148a:	36 e2       	ldi	r19, 0x26	; 38
    148c:	45 e7       	ldi	r20, 0x75	; 117
    148e:	54 e4       	ldi	r21, 0x44	; 68
    1490:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__mulsf3>
    1494:	f7 01       	movw	r30, r14
    1496:	60 83       	st	Z, r22
    1498:	71 83       	std	Z+1, r23	; 0x01
    149a:	82 83       	std	Z+2, r24	; 0x02
    149c:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    149e:	6d 81       	ldd	r22, Y+5	; 0x05
    14a0:	70 e0       	ldi	r23, 0x00	; 0
	iz <<= 8;
    14a2:	76 2f       	mov	r23, r22
    14a4:	66 27       	eor	r22, r22
	iz |= datain[5];
    14a6:	8e 81       	ldd	r24, Y+6	; 0x06
    14a8:	68 2b       	or	r22, r24
	iz >>= 2;
    14aa:	75 95       	asr	r23
    14ac:	67 95       	ror	r22
    14ae:	75 95       	asr	r23
    14b0:	67 95       	ror	r22
	*z = 980.6 * ((float) iz/4096.0);
    14b2:	07 2e       	mov	r0, r23
    14b4:	00 0c       	add	r0, r0
    14b6:	88 0b       	sbc	r24, r24
    14b8:	99 0b       	sbc	r25, r25
    14ba:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__floatsisf>
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e8       	ldi	r20, 0x80	; 128
    14c4:	59 e3       	ldi	r21, 0x39	; 57
    14c6:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__mulsf3>
    14ca:	26 e6       	ldi	r18, 0x66	; 102
    14cc:	36 e2       	ldi	r19, 0x26	; 38
    14ce:	45 e7       	ldi	r20, 0x75	; 117
    14d0:	54 e4       	ldi	r21, 0x44	; 68
    14d2:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__mulsf3>
    14d6:	f8 01       	movw	r30, r16
    14d8:	60 83       	st	Z, r22
    14da:	71 83       	std	Z+1, r23	; 0x01
    14dc:	82 83       	std	Z+2, r24	; 0x02
    14de:	93 83       	std	Z+3, r25	; 0x03

	return(0);
    14e0:	80 e0       	ldi	r24, 0x00	; 0

}
    14e2:	26 96       	adiw	r28, 0x06	; 6
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	ff 90       	pop	r15
    14f2:	ef 90       	pop	r14
    14f4:	df 90       	pop	r13
    14f6:	cf 90       	pop	r12
    14f8:	08 95       	ret

000014fa <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    14fa:	1f 93       	push	r17
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	d6 2f       	mov	r29, r22
    1502:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
    150a:	c8 2f       	mov	r28, r24
    150c:	88 23       	and	r24, r24
    150e:	21 f0       	breq	.+8      	; 0x1518 <write_MMA8451+0x1e>
		stop_TWI();
    1510:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(retval);
    1514:	8c 2f       	mov	r24, r28
    1516:	17 c0       	rjmp	.+46     	; 0x1546 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1518:	8d 2f       	mov	r24, r29
    151a:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
    151e:	c8 2f       	mov	r28, r24
    1520:	88 23       	and	r24, r24
    1522:	21 f0       	breq	.+8      	; 0x152c <write_MMA8451+0x32>
		stop_TWI();
    1524:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(retval);
    1528:	8c 2f       	mov	r24, r28
    152a:	0d c0       	rjmp	.+26     	; 0x1546 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    152c:	81 2f       	mov	r24, r17
    152e:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
    1532:	c8 2f       	mov	r28, r24
    1534:	88 23       	and	r24, r24
    1536:	21 f0       	breq	.+8      	; 0x1540 <write_MMA8451+0x46>
		stop_TWI();
    1538:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
		return(retval);
    153c:	8c 2f       	mov	r24, r28
    153e:	03 c0       	rjmp	.+6      	; 0x1546 <write_MMA8451+0x4c>
	}
	stop_TWI();
    1540:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>
	return(0);
    1544:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	1f 91       	pop	r17
    154c:	08 95       	ret

0000154e <init_MMA8451>:
	sampling frequency (1.56 Hz), a low cutoff frequency on the high pass
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/
uint8_t init_MMA8451(void)
{
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	1f 92       	push	r1
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    1558:	40 e4       	ldi	r20, 0x40	; 64
    155a:	6b e2       	ldi	r22, 0x2B	; 43
    155c:	8d e1       	ldi	r24, 0x1D	; 29
    155e:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    1562:	21 e0       	ldi	r18, 0x01	; 1
    1564:	ae 01       	movw	r20, r28
    1566:	4f 5f       	subi	r20, 0xFF	; 255
    1568:	5f 4f       	sbci	r21, 0xFF	; 255
    156a:	6b e2       	ldi	r22, 0x2B	; 43
    156c:	8d e1       	ldi	r24, 0x1D	; 29
    156e:	0e 94 a1 09 	call	0x1342	; 0x1342 <read_MMA8451>
	while (retval & 0x40) {
    1572:	08 c0       	rjmp	.+16     	; 0x1584 <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    1574:	21 e0       	ldi	r18, 0x01	; 1
    1576:	ae 01       	movw	r20, r28
    1578:	4f 5f       	subi	r20, 0xFF	; 255
    157a:	5f 4f       	sbci	r21, 0xFF	; 255
    157c:	6b e2       	ldi	r22, 0x2B	; 43
    157e:	8d e1       	ldi	r24, 0x1D	; 29
    1580:	0e 94 a1 09 	call	0x1342	; 0x1342 <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	86 fd       	sbrc	r24, 6
    1588:	f5 cf       	rjmp	.-22     	; 0x1574 <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    158a:	40 ec       	ldi	r20, 0xC0	; 192
    158c:	6f e0       	ldi	r22, 0x0F	; 15
    158e:	8d e1       	ldi	r24, 0x1D	; 29
    1590:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    1594:	42 e0       	ldi	r20, 0x02	; 2
    1596:	6b e2       	ldi	r22, 0x2B	; 43
    1598:	8d e1       	ldi	r24, 0x1D	; 29
    159a:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    159e:	4d e3       	ldi	r20, 0x3D	; 61
    15a0:	6a e2       	ldi	r22, 0x2A	; 42
    15a2:	8d e1       	ldi	r24, 0x1D	; 29
    15a4:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <write_MMA8451>

	return(retval);

}
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	0f 90       	pop	r0
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	08 95       	ret

000015b2 <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum and \r\n to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    15b2:	ef 92       	push	r14
    15b4:	ff 92       	push	r15
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	2e 97       	sbiw	r28, 0x0e	; 14
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    15ca:	88 e0       	ldi	r24, 0x08	; 8
    15cc:	ed e8       	ldi	r30, 0x8D	; 141
    15ce:	fa e8       	ldi	r31, 0x8A	; 138
    15d0:	de 01       	movw	r26, r28
    15d2:	11 96       	adiw	r26, 0x01	; 1
    15d4:	01 90       	ld	r0, Z+
    15d6:	0d 92       	st	X+, r0
    15d8:	8a 95       	dec	r24
    15da:	e1 f7       	brne	.-8      	; 0x15d4 <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    15dc:	f8 01       	movw	r30, r16
    15de:	01 90       	ld	r0, Z+
    15e0:	00 20       	and	r0, r0
    15e2:	e9 f7       	brne	.-6      	; 0x15de <checksum_NMEA+0x2c>
    15e4:	31 97       	sbiw	r30, 0x01	; 1
    15e6:	3e 2f       	mov	r19, r30
    15e8:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    15ea:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	06 c0       	rjmp	.+12     	; 0x15fc <checksum_NMEA+0x4a>
		checksum ^= str[i];
    15f0:	f8 01       	movw	r30, r16
    15f2:	e8 0f       	add	r30, r24
    15f4:	f1 1d       	adc	r31, r1
    15f6:	20 81       	ld	r18, Z
    15f8:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    15fa:	8f 5f       	subi	r24, 0xFF	; 255
    15fc:	83 17       	cp	r24, r19
    15fe:	c0 f3       	brcs	.-16     	; 0x15f0 <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1600:	1f 92       	push	r1
    1602:	9f 93       	push	r25
    1604:	ce 01       	movw	r24, r28
    1606:	01 96       	adiw	r24, 0x01	; 1
    1608:	9f 93       	push	r25
    160a:	8f 93       	push	r24
    160c:	7e 01       	movw	r14, r28
    160e:	89 e0       	ldi	r24, 0x09	; 9
    1610:	e8 0e       	add	r14, r24
    1612:	f1 1c       	adc	r15, r1
    1614:	ff 92       	push	r15
    1616:	ef 92       	push	r14
    1618:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
	strcat(str, chksum);
    161c:	b7 01       	movw	r22, r14
    161e:	c8 01       	movw	r24, r16
    1620:	0e 94 a4 23 	call	0x4748	; 0x4748 <strcat>

}
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	2e 96       	adiw	r28, 0x0e	; 14
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	1f 91       	pop	r17
    163c:	0f 91       	pop	r16
    163e:	ff 90       	pop	r15
    1640:	ef 90       	pop	r14
    1642:	08 95       	ret

00001644 <reset_OLED>:
void reset_OLED(void)
	Pulls the OLED display reset line low for 1 ms. This seems to be needed.
------------------------------------------------------------------------------*/
void reset_OLED(void)
{
	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    1644:	e0 e6       	ldi	r30, 0x60	; 96
    1646:	f4 e0       	ldi	r31, 0x04	; 4
    1648:	80 e4       	ldi	r24, 0x40	; 64
    164a:	86 83       	std	Z+6, r24	; 0x06
	PORTD.DIRSET = PIN6_bm;
    164c:	81 83       	std	Z+1, r24	; 0x01
    164e:	a1 e4       	ldi	r26, 0x41	; 65
    1650:	b3 e0       	ldi	r27, 0x03	; 3
    1652:	11 97       	sbiw	r26, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <reset_OLED+0xe>
    1656:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    1658:	85 83       	std	Z+5, r24	; 0x05
    165a:	08 95       	ret

0000165c <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	d6 2f       	mov	r29, r22
    1662:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	0e 94 74 19 	call	0x32e8	; 0x32e8 <start_TWI>
	write_TWI(type);
    166a:	8d 2f       	mov	r24, r29
    166c:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
	write_TWI(byteToSend);
    1670:	8c 2f       	mov	r24, r28
    1672:	0e 94 b9 19 	call	0x3372	; 0x3372 <write_TWI>
	stop_TWI();
    1676:	0e 94 b5 19 	call	0x336a	; 0x336a <stop_TWI>

}
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	08 95       	ret

00001680 <init_OLEDDISPLAY>:
	Initialize a Newhaven NHD-0216AW-1B3 OLED display. This is taken straight
	from https://github.com/NewhavenDisplay/NHD_US2066. The manual is not easy
	to understand but this seems to work.
------------------------------------------------------------------------------*/
void init_OLEDDISPLAY(uint8_t displaynumber)
{
    1680:	cf 93       	push	r28

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
    1682:	88 23       	and	r24, r24
    1684:	29 f0       	breq	.+10     	; 0x1690 <init_OLEDDISPLAY+0x10>
		twiaddr = OLEDADDR0;		
	} else if (displaynumber == 1) {	// Left-side display
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	09 f0       	breq	.+2      	; 0x168c <init_OLEDDISPLAY+0xc>
    168a:	9e c0       	rjmp	.+316    	; 0x17c8 <init_OLEDDISPLAY+0x148>
		twiaddr = OLEDADDR1;
    168c:	cd e3       	ldi	r28, 0x3D	; 61
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <init_OLEDDISPLAY+0x12>
{

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
		twiaddr = OLEDADDR0;		
    1690:	cc e3       	ldi	r28, 0x3C	; 60
		twiaddr = OLEDADDR1;
	} else {
		return;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    1692:	4a e2       	ldi	r20, 0x2A	; 42
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	8c 2f       	mov	r24, r28
    1698:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    169c:	41 e7       	ldi	r20, 0x71	; 113
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	8c 2f       	mov	r24, r28
    16a2:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    16a6:	4c e5       	ldi	r20, 0x5C	; 92
    16a8:	60 e4       	ldi	r22, 0x40	; 64
    16aa:	8c 2f       	mov	r24, r28
    16ac:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    16b0:	48 e2       	ldi	r20, 0x28	; 40
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	8c 2f       	mov	r24, r28
    16b6:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    16ba:	48 e0       	ldi	r20, 0x08	; 8
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	8c 2f       	mov	r24, r28
    16c0:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    16c4:	4a e2       	ldi	r20, 0x2A	; 42
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	8c 2f       	mov	r24, r28
    16ca:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    16ce:	49 e7       	ldi	r20, 0x79	; 121
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	8c 2f       	mov	r24, r28
    16d4:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    16d8:	45 ed       	ldi	r20, 0xD5	; 213
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	8c 2f       	mov	r24, r28
    16de:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    16e2:	40 e7       	ldi	r20, 0x70	; 112
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	8c 2f       	mov	r24, r28
    16e8:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    16ec:	48 e7       	ldi	r20, 0x78	; 120
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	8c 2f       	mov	r24, r28
    16f2:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    16f6:	48 e0       	ldi	r20, 0x08	; 8
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	8c 2f       	mov	r24, r28
    16fc:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1700:	46 e0       	ldi	r20, 0x06	; 6
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	8c 2f       	mov	r24, r28
    1706:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    170a:	42 e7       	ldi	r20, 0x72	; 114
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	8c 2f       	mov	r24, r28
    1710:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    1714:	40 e0       	ldi	r20, 0x00	; 0
    1716:	60 e4       	ldi	r22, 0x40	; 64
    1718:	8c 2f       	mov	r24, r28
    171a:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    171e:	4a e2       	ldi	r20, 0x2A	; 42
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	8c 2f       	mov	r24, r28
    1724:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1728:	49 e7       	ldi	r20, 0x79	; 121
    172a:	60 e0       	ldi	r22, 0x00	; 0
    172c:	8c 2f       	mov	r24, r28
    172e:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    1732:	4a ed       	ldi	r20, 0xDA	; 218
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	8c 2f       	mov	r24, r28
    1738:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	8c 2f       	mov	r24, r28
    1742:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    1746:	4c ed       	ldi	r20, 0xDC	; 220
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	8c 2f       	mov	r24, r28
    174c:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    1750:	40 e0       	ldi	r20, 0x00	; 0
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	8c 2f       	mov	r24, r28
    1756:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    175a:	41 e8       	ldi	r20, 0x81	; 129
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	8c 2f       	mov	r24, r28
    1760:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    1764:	4f e7       	ldi	r20, 0x7F	; 127
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	8c 2f       	mov	r24, r28
    176a:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    176e:	49 ed       	ldi	r20, 0xD9	; 217
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	8c 2f       	mov	r24, r28
    1774:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    1778:	41 ef       	ldi	r20, 0xF1	; 241
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	8c 2f       	mov	r24, r28
    177e:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    1782:	4b ed       	ldi	r20, 0xDB	; 219
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	8c 2f       	mov	r24, r28
    1788:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    178c:	40 e4       	ldi	r20, 0x40	; 64
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	8c 2f       	mov	r24, r28
    1792:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1796:	48 e7       	ldi	r20, 0x78	; 120
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	8c 2f       	mov	r24, r28
    179c:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    17a0:	48 e2       	ldi	r20, 0x28	; 40
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	8c 2f       	mov	r24, r28
    17a6:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	8c 2f       	mov	r24, r28
    17b0:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    17b4:	40 e8       	ldi	r20, 0x80	; 128
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	8c 2f       	mov	r24, r28
    17ba:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    17be:	4c e0       	ldi	r20, 0x0C	; 12
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	8c 2f       	mov	r24, r28
    17c4:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>

}
    17c8:	cf 91       	pop	r28
    17ca:	08 95       	ret

000017cc <init_OLED>:
	Set up the two OLED displays
------------------------------------------------------------------------------*/
void init_OLED(void)
{

	reset_OLED();				// Need to start with a reset
    17cc:	0e 94 22 0b 	call	0x1644	; 0x1644 <reset_OLED>
	init_OLEDDISPLAY(0);
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	0e 94 40 0b 	call	0x1680	; 0x1680 <init_OLEDDISPLAY>
	init_OLEDDISPLAY(1);
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	0e 94 40 0b 	call	0x1680	; 0x1680 <init_OLEDDISPLAY>
    17dc:	2a e6       	ldi	r18, 0x6A	; 106
    17de:	84 e0       	ldi	r24, 0x04	; 4
    17e0:	91 e0       	ldi	r25, 0x01	; 1
    17e2:	21 50       	subi	r18, 0x01	; 1
    17e4:	80 40       	sbci	r24, 0x00	; 0
    17e6:	90 40       	sbci	r25, 0x00	; 0
    17e8:	e1 f7       	brne	.-8      	; 0x17e2 <init_OLED+0x16>
    17ea:	00 c0       	rjmp	.+0      	; 0x17ec <init_OLED+0x20>
    17ec:	08 95       	ret

000017ee <writestr_OLED>:
	
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.
------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    17ee:	ef 92       	push	r14
    17f0:	ff 92       	push	r15
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	e2 97       	sbiw	r28, 0x32	; 50
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    1806:	91 e1       	ldi	r25, 0x11	; 17
    1808:	e5 e9       	ldi	r30, 0x95	; 149
    180a:	fa e8       	ldi	r31, 0x8A	; 138
    180c:	de 01       	movw	r26, r28
    180e:	92 96       	adiw	r26, 0x22	; 34
    1810:	01 90       	ld	r0, Z+
    1812:	0d 92       	st	X+, r0
    1814:	9a 95       	dec	r25
    1816:	e1 f7       	brne	.-8      	; 0x1810 <__DATA_REGION_LENGTH__+0x10>

	if (displaynumber == 0) {
    1818:	81 11       	cpse	r24, r1
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <__DATA_REGION_LENGTH__+0x20>
		twiaddr = OLEDADDR0;
    181c:	0c e3       	ldi	r16, 0x3C	; 60
    181e:	01 c0       	rjmp	.+2      	; 0x1822 <__DATA_REGION_LENGTH__+0x22>
	} else {
		twiaddr = OLEDADDR1;
    1820:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    1822:	ce 01       	movw	r24, r28
    1824:	01 96       	adiw	r24, 0x01	; 1
    1826:	7c 01       	movw	r14, r24
    1828:	0e 94 af 23 	call	0x475e	; 0x475e <strcpy>
	if (strlen(strbuf) > 16) {
    182c:	f7 01       	movw	r30, r14
    182e:	01 90       	ld	r0, Z+
    1830:	00 20       	and	r0, r0
    1832:	e9 f7       	brne	.-6      	; 0x182e <__DATA_REGION_LENGTH__+0x2e>
    1834:	31 97       	sbiw	r30, 0x01	; 1
    1836:	ee 19       	sub	r30, r14
    1838:	ff 09       	sbc	r31, r15
    183a:	71 97       	sbiw	r30, 0x11	; 17
    183c:	08 f0       	brcs	.+2      	; 0x1840 <__DATA_REGION_LENGTH__+0x40>
		strbuf[16] = '\0';
    183e:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1840:	be 01       	movw	r22, r28
    1842:	6e 5d       	subi	r22, 0xDE	; 222
    1844:	7f 4f       	sbci	r23, 0xFF	; 255
    1846:	ce 01       	movw	r24, r28
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	0e 94 a4 23 	call	0x4748	; 0x4748 <strcat>

	if (lineno == 1) {
    184e:	11 30       	cpi	r17, 0x01	; 1
    1850:	39 f4       	brne	.+14     	; 0x1860 <__DATA_REGION_LENGTH__+0x60>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    1852:	40 e8       	ldi	r20, 0x80	; 128
    1854:	60 e0       	ldi	r22, 0x00	; 0
    1856:	80 2f       	mov	r24, r16
    1858:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    185c:	10 e0       	ldi	r17, 0x00	; 0
    185e:	12 c0       	rjmp	.+36     	; 0x1884 <__DATA_REGION_LENGTH__+0x84>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1860:	40 ec       	ldi	r20, 0xC0	; 192
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	80 2f       	mov	r24, r16
    1866:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>
    186a:	f8 cf       	rjmp	.-16     	; 0x185c <__DATA_REGION_LENGTH__+0x5c>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    186c:	e1 e0       	ldi	r30, 0x01	; 1
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	ec 0f       	add	r30, r28
    1872:	fd 1f       	adc	r31, r29
    1874:	e1 0f       	add	r30, r17
    1876:	f1 1d       	adc	r31, r1
    1878:	40 81       	ld	r20, Z
    187a:	60 e4       	ldi	r22, 0x40	; 64
    187c:	80 2f       	mov	r24, r16
    187e:	0e 94 2e 0b 	call	0x165c	; 0x165c <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    1882:	1f 5f       	subi	r17, 0xFF	; 255
    1884:	10 31       	cpi	r17, 0x10	; 16
    1886:	90 f3       	brcs	.-28     	; 0x186c <__DATA_REGION_LENGTH__+0x6c>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <timerOLED>
    1890:	90 93 0d 2a 	sts	0x2A0D, r25	; 0x802a0d <timerOLED+0x1>

}
    1894:	e2 96       	adiw	r28, 0x32	; 50
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	08 95       	ret

000018a8 <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	1f 92       	push	r1
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	18 2f       	mov	r17, r24

	char nullstr[] = "";
    18b6:	19 82       	std	Y+1, r1	; 0x01
	writestr_OLED(displaynumber, nullstr, 1);
    18b8:	41 e0       	ldi	r20, 0x01	; 1
    18ba:	be 01       	movw	r22, r28
    18bc:	6f 5f       	subi	r22, 0xFF	; 255
    18be:	7f 4f       	sbci	r23, 0xFF	; 255
    18c0:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
    18c4:	42 e0       	ldi	r20, 0x02	; 2
    18c6:	be 01       	movw	r22, r28
    18c8:	6f 5f       	subi	r22, 0xFF	; 255
    18ca:	7f 4f       	sbci	r23, 0xFF	; 255
    18cc:	81 2f       	mov	r24, r17
    18ce:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
	timerOLED = 0;
    18d2:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED>
    18d6:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED+0x1>

}
    18da:	0f 90       	pop	r0
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	08 95       	ret

000018e4 <init_PNEU>:
	is assumed to be in input mode.
------------------------------------------------------------------------------*/
uint8_t init_PNEU(void)
{

	if (write_MCP23008(HIGHCURRENT, IODIR, 0x00) == ERROR) {
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	60 e0       	ldi	r22, 0x00	; 0
    18e8:	84 e2       	ldi	r24, 0x24	; 36
    18ea:	0e 94 0c 09 	call	0x1218	; 0x1218 <write_MCP23008>
    18ee:	83 36       	cpi	r24, 0x63	; 99
    18f0:	a9 f1       	breq	.+106    	; 0x195c <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(HIGHCURRENT, OLAT, 0x00) == ERROR) {
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	6a e0       	ldi	r22, 0x0A	; 10
    18f6:	84 e2       	ldi	r24, 0x24	; 36
    18f8:	0e 94 0c 09 	call	0x1218	; 0x1218 <write_MCP23008>
    18fc:	83 36       	cpi	r24, 0x63	; 99
    18fe:	71 f1       	breq	.+92     	; 0x195c <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IODIR, 0xFE) == ERROR) {	// Inputs
    1900:	4e ef       	ldi	r20, 0xFE	; 254
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	81 e2       	ldi	r24, 0x21	; 33
    1906:	0e 94 0c 09 	call	0x1218	; 0x1218 <write_MCP23008>
    190a:	83 36       	cpi	r24, 0x63	; 99
    190c:	39 f1       	breq	.+78     	; 0x195c <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IPOL, 0x00) == ERROR) {
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	81 e2       	ldi	r24, 0x21	; 33
    1914:	0e 94 0c 09 	call	0x1218	; 0x1218 <write_MCP23008>
    1918:	83 36       	cpi	r24, 0x63	; 99
    191a:	01 f1       	breq	.+64     	; 0x195c <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100) == ERROR) {
    191c:	4c ef       	ldi	r20, 0xFC	; 252
    191e:	62 e0       	ldi	r22, 0x02	; 2
    1920:	81 e2       	ldi	r24, 0x21	; 33
    1922:	0e 94 0c 09 	call	0x1218	; 0x1218 <write_MCP23008>
    1926:	83 36       	cpi	r24, 0x63	; 99
    1928:	c9 f0       	breq	.+50     	; 0x195c <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, INTCON, 0x00) == ERROR) {
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	64 e0       	ldi	r22, 0x04	; 4
    192e:	81 e2       	ldi	r24, 0x21	; 33
    1930:	0e 94 0c 09 	call	0x1218	; 0x1218 <write_MCP23008>
    1934:	83 36       	cpi	r24, 0x63	; 99
    1936:	91 f0       	breq	.+36     	; 0x195c <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IOCON, 0x20) == ERROR) { // Don't increment addr
    1938:	40 e2       	ldi	r20, 0x20	; 32
    193a:	65 e0       	ldi	r22, 0x05	; 5
    193c:	81 e2       	ldi	r24, 0x21	; 33
    193e:	0e 94 0c 09 	call	0x1218	; 0x1218 <write_MCP23008>
    1942:	83 36       	cpi	r24, 0x63	; 99
    1944:	59 f0       	breq	.+22     	; 0x195c <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPPU, 0x7F) == ERROR) { // Pullups (not really needed)
    1946:	4f e7       	ldi	r20, 0x7F	; 127
    1948:	66 e0       	ldi	r22, 0x06	; 6
    194a:	81 e2       	ldi	r24, 0x21	; 33
    194c:	0e 94 0c 09 	call	0x1218	; 0x1218 <write_MCP23008>
    1950:	83 36       	cpi	r24, 0x63	; 99
    1952:	21 f0       	breq	.+8      	; 0x195c <init_PNEU+0x78>
		return(ERROR);
	}
	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    1954:	89 e0       	ldi	r24, 0x09	; 9
    1956:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	return(NOERROR);
    195a:	80 e0       	ldi	r24, 0x00	; 0

}
    195c:	08 95       	ret

0000195e <read_PNEUSensors>:
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
{
    195e:	cf 92       	push	r12
    1960:	df 92       	push	r13
    1962:	ef 92       	push	r14
    1964:	ff 92       	push	r15
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	6c 01       	movw	r12, r24
    1970:	8b 01       	movw	r16, r22
    1972:	7a 01       	movw	r14, r20
    1974:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);	// NEEDS ERRORCHECK
    1976:	69 e0       	ldi	r22, 0x09	; 9
    1978:	81 e2       	ldi	r24, 0x21	; 33
    197a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    197e:	98 2f       	mov	r25, r24
    1980:	92 95       	swap	r25
    1982:	96 95       	lsr	r25
    1984:	96 95       	lsr	r25
    1986:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    1988:	91 30       	cpi	r25, 0x01	; 1
    198a:	21 f4       	brne	.+8      	; 0x1994 <read_PNEUSensors+0x36>
		*shutter = 'c';
    198c:	93 e6       	ldi	r25, 0x63	; 99
    198e:	f6 01       	movw	r30, r12
    1990:	90 83       	st	Z, r25
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <read_PNEUSensors+0x54>
	} else if (state == 2) {
    1994:	92 30       	cpi	r25, 0x02	; 2
    1996:	21 f4       	brne	.+8      	; 0x19a0 <read_PNEUSensors+0x42>
		*shutter = 'o';
    1998:	9f e6       	ldi	r25, 0x6F	; 111
    199a:	f6 01       	movw	r30, r12
    199c:	90 83       	st	Z, r25
    199e:	09 c0       	rjmp	.+18     	; 0x19b2 <read_PNEUSensors+0x54>
	} else if (state == 3) {
    19a0:	93 30       	cpi	r25, 0x03	; 3
    19a2:	21 f4       	brne	.+8      	; 0x19ac <read_PNEUSensors+0x4e>
		*shutter = 't';
    19a4:	94 e7       	ldi	r25, 0x74	; 116
    19a6:	f6 01       	movw	r30, r12
    19a8:	90 83       	st	Z, r25
    19aa:	03 c0       	rjmp	.+6      	; 0x19b2 <read_PNEUSensors+0x54>
	} else {
		*shutter = 'x';
    19ac:	98 e7       	ldi	r25, 0x78	; 120
    19ae:	f6 01       	movw	r30, r12
    19b0:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    19b2:	98 2f       	mov	r25, r24
    19b4:	96 95       	lsr	r25
    19b6:	96 95       	lsr	r25
	state &= 0b00000011;
    19b8:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    19ba:	91 30       	cpi	r25, 0x01	; 1
    19bc:	21 f4       	brne	.+8      	; 0x19c6 <read_PNEUSensors+0x68>
		*right = 'c';
    19be:	93 e6       	ldi	r25, 0x63	; 99
    19c0:	f7 01       	movw	r30, r14
    19c2:	90 83       	st	Z, r25
    19c4:	0f c0       	rjmp	.+30     	; 0x19e4 <read_PNEUSensors+0x86>
	} else if (state == 2) {
    19c6:	92 30       	cpi	r25, 0x02	; 2
    19c8:	21 f4       	brne	.+8      	; 0x19d2 <read_PNEUSensors+0x74>
		*right = 'o';
    19ca:	9f e6       	ldi	r25, 0x6F	; 111
    19cc:	f7 01       	movw	r30, r14
    19ce:	90 83       	st	Z, r25
    19d0:	09 c0       	rjmp	.+18     	; 0x19e4 <read_PNEUSensors+0x86>
	} else if (state == 3) {
    19d2:	93 30       	cpi	r25, 0x03	; 3
    19d4:	21 f4       	brne	.+8      	; 0x19de <read_PNEUSensors+0x80>
		*right = 't';
    19d6:	94 e7       	ldi	r25, 0x74	; 116
    19d8:	f7 01       	movw	r30, r14
    19da:	90 83       	st	Z, r25
    19dc:	03 c0       	rjmp	.+6      	; 0x19e4 <read_PNEUSensors+0x86>
	} else {
		*right = 'x';
    19de:	98 e7       	ldi	r25, 0x78	; 120
    19e0:	f7 01       	movw	r30, r14
    19e2:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    19e4:	98 2f       	mov	r25, r24
    19e6:	92 95       	swap	r25
    19e8:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    19ea:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    19ec:	91 30       	cpi	r25, 0x01	; 1
    19ee:	21 f4       	brne	.+8      	; 0x19f8 <read_PNEUSensors+0x9a>
		*left = 'o';
    19f0:	9f e6       	ldi	r25, 0x6F	; 111
    19f2:	f8 01       	movw	r30, r16
    19f4:	90 83       	st	Z, r25
    19f6:	0f c0       	rjmp	.+30     	; 0x1a16 <read_PNEUSensors+0xb8>
	} else if (state == 2) {
    19f8:	92 30       	cpi	r25, 0x02	; 2
    19fa:	21 f4       	brne	.+8      	; 0x1a04 <read_PNEUSensors+0xa6>
		*left = 'c';
    19fc:	93 e6       	ldi	r25, 0x63	; 99
    19fe:	f8 01       	movw	r30, r16
    1a00:	90 83       	st	Z, r25
    1a02:	09 c0       	rjmp	.+18     	; 0x1a16 <read_PNEUSensors+0xb8>
	} else if (state == 3) {
    1a04:	93 30       	cpi	r25, 0x03	; 3
    1a06:	21 f4       	brne	.+8      	; 0x1a10 <read_PNEUSensors+0xb2>
		*left = 't';
    1a08:	94 e7       	ldi	r25, 0x74	; 116
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	90 83       	st	Z, r25
    1a0e:	03 c0       	rjmp	.+6      	; 0x1a16 <read_PNEUSensors+0xb8>
	} else {
		*left = 'x';
    1a10:	98 e7       	ldi	r25, 0x78	; 120
    1a12:	f8 01       	movw	r30, r16
    1a14:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1a16:	81 ff       	sbrs	r24, 1
    1a18:	03 c0       	rjmp	.+6      	; 0x1a20 <read_PNEUSensors+0xc2>
		*air = '0';
    1a1a:	80 e3       	ldi	r24, 0x30	; 48
    1a1c:	88 83       	st	Y, r24
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <read_PNEUSensors+0xc6>
	} else {
		*air = '1';
    1a20:	81 e3       	ldi	r24, 0x31	; 49
    1a22:	88 83       	st	Y, r24
	}
}
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	ff 90       	pop	r15
    1a2e:	ef 90       	pop	r14
    1a30:	df 90       	pop	r13
    1a32:	cf 90       	pop	r12
    1a34:	08 95       	ret

00001a36 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	d8 2f       	mov	r29, r24
    1a3c:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    1a3e:	69 e0       	ldi	r22, 0x09	; 9
    1a40:	84 e2       	ldi	r24, 0x24	; 36
    1a42:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    1a46:	8d 2b       	or	r24, r29
    1a48:	48 2f       	mov	r20, r24
    1a4a:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1a4c:	6a e0       	ldi	r22, 0x0A	; 10
    1a4e:	84 e2       	ldi	r24, 0x24	; 36
    1a50:	0e 94 0c 09 	call	0x1218	; 0x1218 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	08 95       	ret

00001a5a <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(uint8_t cstack)
{
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	6a 97       	sbiw	r28, 0x1a	; 26
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    1a68:	99 e0       	ldi	r25, 0x09	; 9
    1a6a:	e0 ee       	ldi	r30, 0xE0	; 224
    1a6c:	fa e8       	ldi	r31, 0x8A	; 138
    1a6e:	de 01       	movw	r26, r28
    1a70:	11 96       	adiw	r26, 0x01	; 1
    1a72:	01 90       	ld	r0, Z+
    1a74:	0d 92       	st	X+, r0
    1a76:	9a 95       	dec	r25
    1a78:	e1 f7       	brne	.-8      	; 0x1a72 <close_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1a7a:	24 e3       	ldi	r18, 0x34	; 52
    1a7c:	82 9f       	mul	r24, r18
    1a7e:	c0 01       	movw	r24, r0
    1a80:	11 24       	eor	r1, r1
    1a82:	fc 01       	movw	r30, r24
    1a84:	ed 5f       	subi	r30, 0xFD	; 253
    1a86:	f7 4d       	sbci	r31, 0xD7	; 215
    1a88:	81 81       	ldd	r24, Z+1	; 0x01
    1a8a:	8c 36       	cpi	r24, 0x6C	; 108
    1a8c:	31 f1       	breq	.+76     	; 0x1ada <close_PNEU+0x80>
    1a8e:	18 f4       	brcc	.+6      	; 0x1a96 <close_PNEU+0x3c>
    1a90:	82 36       	cpi	r24, 0x62	; 98
    1a92:	39 f0       	breq	.+14     	; 0x1aa2 <close_PNEU+0x48>
    1a94:	6a c0       	rjmp	.+212    	; 0x1b6a <close_PNEU+0x110>
    1a96:	82 37       	cpi	r24, 0x72	; 114
    1a98:	c1 f1       	breq	.+112    	; 0x1b0a <close_PNEU+0xb0>
    1a9a:	83 37       	cpi	r24, 0x73	; 115
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <close_PNEU+0x46>
    1a9e:	4d c0       	rjmp	.+154    	; 0x1b3a <close_PNEU+0xe0>
    1aa0:	64 c0       	rjmp	.+200    	; 0x1b6a <close_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1aa2:	6a ee       	ldi	r22, 0xEA	; 234
    1aa4:	84 e4       	ldi	r24, 0x44	; 68
    1aa6:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1aaa:	66 ee       	ldi	r22, 0xE6	; 230
    1aac:	88 e8       	ldi	r24, 0x88	; 136
    1aae:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1ab2:	86 ea       	ldi	r24, 0xA6	; 166
    1ab4:	9a e8       	ldi	r25, 0x8A	; 138
    1ab6:	9f 93       	push	r25
    1ab8:	8f 93       	push	r24
    1aba:	ce 01       	movw	r24, r28
    1abc:	01 96       	adiw	r24, 0x01	; 1
    1abe:	9f 93       	push	r25
    1ac0:	8f 93       	push	r24
    1ac2:	09 96       	adiw	r24, 0x09	; 9
    1ac4:	9f 93       	push	r25
    1ac6:	8f 93       	push	r24
    1ac8:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
			break;
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	59 c0       	rjmp	.+178    	; 0x1b8c <close_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1ada:	6a ee       	ldi	r22, 0xEA	; 234
    1adc:	84 e4       	ldi	r24, 0x44	; 68
    1ade:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1ae2:	8b ea       	ldi	r24, 0xAB	; 171
    1ae4:	9a e8       	ldi	r25, 0x8A	; 138
    1ae6:	9f 93       	push	r25
    1ae8:	8f 93       	push	r24
    1aea:	ce 01       	movw	r24, r28
    1aec:	01 96       	adiw	r24, 0x01	; 1
    1aee:	9f 93       	push	r25
    1af0:	8f 93       	push	r24
    1af2:	09 96       	adiw	r24, 0x09	; 9
    1af4:	9f 93       	push	r25
    1af6:	8f 93       	push	r24
    1af8:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
			break;
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	41 c0       	rjmp	.+130    	; 0x1b8c <close_PNEU+0x132>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1b0a:	66 ee       	ldi	r22, 0xE6	; 230
    1b0c:	88 e8       	ldi	r24, 0x88	; 136
    1b0e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1b12:	80 eb       	ldi	r24, 0xB0	; 176
    1b14:	9a e8       	ldi	r25, 0x8A	; 138
    1b16:	9f 93       	push	r25
    1b18:	8f 93       	push	r24
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	01 96       	adiw	r24, 0x01	; 1
    1b1e:	9f 93       	push	r25
    1b20:	8f 93       	push	r24
    1b22:	09 96       	adiw	r24, 0x09	; 9
    1b24:	9f 93       	push	r25
    1b26:	8f 93       	push	r24
    1b28:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
			break;
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	29 c0       	rjmp	.+82     	; 0x1b8c <close_PNEU+0x132>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1b3a:	6c ee       	ldi	r22, 0xEC	; 236
    1b3c:	82 e2       	ldi	r24, 0x22	; 34
    1b3e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1b42:	86 eb       	ldi	r24, 0xB6	; 182
    1b44:	9a e8       	ldi	r25, 0x8A	; 138
    1b46:	9f 93       	push	r25
    1b48:	8f 93       	push	r24
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	9f 93       	push	r25
    1b50:	8f 93       	push	r24
    1b52:	09 96       	adiw	r24, 0x09	; 9
    1b54:	9f 93       	push	r25
    1b56:	8f 93       	push	r24
    1b58:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
			break;
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	11 c0       	rjmp	.+34     	; 0x1b8c <close_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "close_PNEU bad object");
    1b6a:	6e eb       	ldi	r22, 0xBE	; 190
    1b6c:	7a e8       	ldi	r23, 0x8A	; 138
    1b6e:	85 ef       	ldi	r24, 0xF5	; 245
    1b70:	91 e0       	ldi	r25, 0x01	; 1
    1b72:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			strcpy(outbuf, "close what?");
    1b76:	8c e0       	ldi	r24, 0x0C	; 12
    1b78:	e4 ed       	ldi	r30, 0xD4	; 212
    1b7a:	fa e8       	ldi	r31, 0x8A	; 138
    1b7c:	de 01       	movw	r26, r28
    1b7e:	1a 96       	adiw	r26, 0x0a	; 10
    1b80:	01 90       	ld	r0, Z+
    1b82:	0d 92       	st	X+, r0
    1b84:	8a 95       	dec	r24
    1b86:	e1 f7       	brne	.-8      	; 0x1b80 <close_PNEU+0x126>
			return(ERROR);
    1b88:	83 e6       	ldi	r24, 0x63	; 99
    1b8a:	0b c0       	rjmp	.+22     	; 0x1ba2 <close_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1b92:	41 e0       	ldi	r20, 0x01	; 1
    1b94:	be 01       	movw	r22, r28
    1b96:	66 5f       	subi	r22, 0xF6	; 246
    1b98:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
	return(NOERROR);
    1ba0:	80 e0       	ldi	r24, 0x00	; 0

}
    1ba2:	6a 96       	adiw	r28, 0x1a	; 26
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	08 95       	ret

00001bae <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(uint8_t cstack)
{
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	69 97       	sbiw	r28, 0x19	; 25
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	de bf       	out	0x3e, r29	; 62

	const char dformat_OPE[] = "Open %s";
    1bbc:	98 e0       	ldi	r25, 0x08	; 8
    1bbe:	e9 e0       	ldi	r30, 0x09	; 9
    1bc0:	fb e8       	ldi	r31, 0x8B	; 139
    1bc2:	de 01       	movw	r26, r28
    1bc4:	11 96       	adiw	r26, 0x01	; 1
    1bc6:	01 90       	ld	r0, Z+
    1bc8:	0d 92       	st	X+, r0
    1bca:	9a 95       	dec	r25
    1bcc:	e1 f7       	brne	.-8      	; 0x1bc6 <open_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1bce:	24 e3       	ldi	r18, 0x34	; 52
    1bd0:	82 9f       	mul	r24, r18
    1bd2:	c0 01       	movw	r24, r0
    1bd4:	11 24       	eor	r1, r1
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	ed 5f       	subi	r30, 0xFD	; 253
    1bda:	f7 4d       	sbci	r31, 0xD7	; 215
    1bdc:	81 81       	ldd	r24, Z+1	; 0x01
    1bde:	8c 36       	cpi	r24, 0x6C	; 108
    1be0:	31 f1       	breq	.+76     	; 0x1c2e <open_PNEU+0x80>
    1be2:	18 f4       	brcc	.+6      	; 0x1bea <open_PNEU+0x3c>
    1be4:	82 36       	cpi	r24, 0x62	; 98
    1be6:	39 f0       	breq	.+14     	; 0x1bf6 <open_PNEU+0x48>
    1be8:	6a c0       	rjmp	.+212    	; 0x1cbe <open_PNEU+0x110>
    1bea:	82 37       	cpi	r24, 0x72	; 114
    1bec:	c1 f1       	breq	.+112    	; 0x1c5e <open_PNEU+0xb0>
    1bee:	83 37       	cpi	r24, 0x73	; 115
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <open_PNEU+0x46>
    1bf2:	4d c0       	rjmp	.+154    	; 0x1c8e <open_PNEU+0xe0>
    1bf4:	64 c0       	rjmp	.+200    	; 0x1cbe <open_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1bf6:	6e ea       	ldi	r22, 0xAE	; 174
    1bf8:	84 e4       	ldi	r24, 0x44	; 68
    1bfa:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1bfe:	6e e6       	ldi	r22, 0x6E	; 110
    1c00:	88 e8       	ldi	r24, 0x88	; 136
    1c02:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1c06:	86 ea       	ldi	r24, 0xA6	; 166
    1c08:	9a e8       	ldi	r25, 0x8A	; 138
    1c0a:	9f 93       	push	r25
    1c0c:	8f 93       	push	r24
    1c0e:	ce 01       	movw	r24, r28
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	9f 93       	push	r25
    1c14:	8f 93       	push	r24
    1c16:	08 96       	adiw	r24, 0x08	; 8
    1c18:	9f 93       	push	r25
    1c1a:	8f 93       	push	r24
    1c1c:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
			break;
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	59 c0       	rjmp	.+178    	; 0x1ce0 <open_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1c2e:	6e ea       	ldi	r22, 0xAE	; 174
    1c30:	84 e4       	ldi	r24, 0x44	; 68
    1c32:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1c36:	8b ea       	ldi	r24, 0xAB	; 171
    1c38:	9a e8       	ldi	r25, 0x8A	; 138
    1c3a:	9f 93       	push	r25
    1c3c:	8f 93       	push	r24
    1c3e:	ce 01       	movw	r24, r28
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	9f 93       	push	r25
    1c44:	8f 93       	push	r24
    1c46:	08 96       	adiw	r24, 0x08	; 8
    1c48:	9f 93       	push	r25
    1c4a:	8f 93       	push	r24
    1c4c:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
			break;
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	41 c0       	rjmp	.+130    	; 0x1ce0 <open_PNEU+0x132>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1c5e:	6e e6       	ldi	r22, 0x6E	; 110
    1c60:	88 e8       	ldi	r24, 0x88	; 136
    1c62:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1c66:	80 eb       	ldi	r24, 0xB0	; 176
    1c68:	9a e8       	ldi	r25, 0x8A	; 138
    1c6a:	9f 93       	push	r25
    1c6c:	8f 93       	push	r24
    1c6e:	ce 01       	movw	r24, r28
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	9f 93       	push	r25
    1c74:	8f 93       	push	r24
    1c76:	08 96       	adiw	r24, 0x08	; 8
    1c78:	9f 93       	push	r25
    1c7a:	8f 93       	push	r24
    1c7c:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
			break;
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	29 c0       	rjmp	.+82     	; 0x1ce0 <open_PNEU+0x132>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1c8e:	6e ec       	ldi	r22, 0xCE	; 206
    1c90:	82 e2       	ldi	r24, 0x22	; 34
    1c92:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1c96:	86 eb       	ldi	r24, 0xB6	; 182
    1c98:	9a e8       	ldi	r25, 0x8A	; 138
    1c9a:	9f 93       	push	r25
    1c9c:	8f 93       	push	r24
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	01 96       	adiw	r24, 0x01	; 1
    1ca2:	9f 93       	push	r25
    1ca4:	8f 93       	push	r24
    1ca6:	08 96       	adiw	r24, 0x08	; 8
    1ca8:	9f 93       	push	r25
    1caa:	8f 93       	push	r24
    1cac:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
			break;
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	11 c0       	rjmp	.+34     	; 0x1ce0 <open_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "open_PNEU bad object");
    1cbe:	69 ee       	ldi	r22, 0xE9	; 233
    1cc0:	7a e8       	ldi	r23, 0x8A	; 138
    1cc2:	85 ef       	ldi	r24, 0xF5	; 245
    1cc4:	91 e0       	ldi	r25, 0x01	; 1
    1cc6:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			strcpy(outbuf, "open what?");
    1cca:	8b e0       	ldi	r24, 0x0B	; 11
    1ccc:	ee ef       	ldi	r30, 0xFE	; 254
    1cce:	fa e8       	ldi	r31, 0x8A	; 138
    1cd0:	de 01       	movw	r26, r28
    1cd2:	19 96       	adiw	r26, 0x09	; 9
    1cd4:	01 90       	ld	r0, Z+
    1cd6:	0d 92       	st	X+, r0
    1cd8:	8a 95       	dec	r24
    1cda:	e1 f7       	brne	.-8      	; 0x1cd4 <open_PNEU+0x126>
			return(ERROR);
    1cdc:	83 e6       	ldi	r24, 0x63	; 99
    1cde:	0b c0       	rjmp	.+22     	; 0x1cf6 <open_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1ce6:	41 e0       	ldi	r20, 0x01	; 1
    1ce8:	be 01       	movw	r22, r28
    1cea:	67 5f       	subi	r22, 0xF7	; 247
    1cec:	7f 4f       	sbci	r23, 0xFF	; 255
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
	return(NOERROR);
    1cf4:	80 e0       	ldi	r24, 0x00	; 0

}
    1cf6:	69 96       	adiw	r28, 0x19	; 25
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	08 95       	ret

00001d02 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1d02:	1f 92       	push	r1
    1d04:	0f 92       	push	r0
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	0f 92       	push	r0
    1d0a:	11 24       	eor	r1, r1
    1d0c:	2f 93       	push	r18
    1d0e:	3f 93       	push	r19
    1d10:	4f 93       	push	r20
    1d12:	5f 93       	push	r21
    1d14:	6f 93       	push	r22
    1d16:	7f 93       	push	r23
    1d18:	8f 93       	push	r24
    1d1a:	9f 93       	push	r25
    1d1c:	af 93       	push	r26
    1d1e:	bf 93       	push	r27
    1d20:	ef 93       	push	r30
    1d22:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1d24:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1d28:	88 23       	and	r24, r24
    1d2a:	4c f4       	brge	.+18     	; 0x1d3e <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1d2c:	80 e8       	ldi	r24, 0x80	; 128
    1d2e:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1d32:	68 e0       	ldi	r22, 0x08	; 8
    1d34:	81 e2       	ldi	r24, 0x21	; 33
    1d36:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <read_MCP23008>
    1d3a:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <pneuState>
	}

}
    1d3e:	ff 91       	pop	r31
    1d40:	ef 91       	pop	r30
    1d42:	bf 91       	pop	r27
    1d44:	af 91       	pop	r26
    1d46:	9f 91       	pop	r25
    1d48:	8f 91       	pop	r24
    1d4a:	7f 91       	pop	r23
    1d4c:	6f 91       	pop	r22
    1d4e:	5f 91       	pop	r21
    1d50:	4f 91       	pop	r20
    1d52:	3f 91       	pop	r19
    1d54:	2f 91       	pop	r18
    1d56:	0f 90       	pop	r0
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	0f 90       	pop	r0
    1d5c:	1f 90       	pop	r1
    1d5e:	18 95       	reti

00001d60 <init_PORTS>:
void init_PORTS(void)
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTB.DIRSET = PIN2_bm;		// Beeper
    1d60:	84 e0       	ldi	r24, 0x04	; 4
    1d62:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7f4421>
	PORTF.DIRCLR = PIN2_bm;		// specID jumper
    1d66:	e0 ea       	ldi	r30, 0xA0	; 160
    1d68:	f4 e0       	ldi	r31, 0x04	; 4
    1d6a:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRSET = PIN5_bm;		// On-board LED
    1d6c:	80 e2       	ldi	r24, 0x20	; 32
    1d6e:	81 83       	std	Z+1, r24	; 0x01
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton
    1d70:	8b e0       	ldi	r24, 0x0B	; 11
    1d72:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.OUTCLR = PIN3_bm;		// Reset the XPort
    1d74:	e0 e4       	ldi	r30, 0x40	; 64
    1d76:	f4 e0       	ldi	r31, 0x04	; 4
    1d78:	88 e0       	ldi	r24, 0x08	; 8
    1d7a:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;		// Set pin as output
    1d7c:	81 83       	std	Z+1, r24	; 0x01
    1d7e:	ad e8       	ldi	r26, 0x8D	; 141
    1d80:	b0 e2       	ldi	r27, 0x20	; 32
    1d82:	11 97       	sbiw	r26, 0x01	; 1
    1d84:	f1 f7       	brne	.-4      	; 0x1d82 <init_PORTS+0x22>
    1d86:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;		// Enable the XPort
    1d88:	85 83       	std	Z+5, r24	; 0x05
    1d8a:	08 95       	ret

00001d8c <report>:

	Returns:
		ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1d8c:	2f 92       	push	r2
    1d8e:	3f 92       	push	r3
    1d90:	4f 92       	push	r4
    1d92:	5f 92       	push	r5
    1d94:	6f 92       	push	r6
    1d96:	7f 92       	push	r7
    1d98:	8f 92       	push	r8
    1d9a:	9f 92       	push	r9
    1d9c:	af 92       	push	r10
    1d9e:	bf 92       	push	r11
    1da0:	cf 92       	push	r12
    1da2:	df 92       	push	r13
    1da4:	ef 92       	push	r14
    1da6:	ff 92       	push	r15
    1da8:	0f 93       	push	r16
    1daa:	1f 93       	push	r17
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	cf 5d       	subi	r28, 0xDF	; 223
    1db6:	d2 40       	sbci	r29, 0x02	; 2
    1db8:	cd bf       	out	0x3d, r28	; 61
    1dba:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "ENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
    1dbc:	95 e4       	ldi	r25, 0x45	; 69
    1dbe:	ef e6       	ldi	r30, 0x6F	; 111
    1dc0:	fb e8       	ldi	r31, 0x8B	; 139
    1dc2:	de 01       	movw	r26, r28
    1dc4:	a6 5b       	subi	r26, 0xB6	; 182
    1dc6:	be 4f       	sbci	r27, 0xFE	; 254
    1dc8:	01 90       	ld	r0, Z+
    1dca:	0d 92       	st	X+, r0
    1dcc:	9a 95       	dec	r25
    1dce:	e1 f7       	brne	.-8      	; 0x1dc8 <report+0x3c>
	const char format_MTR[] = "MTR,%s,%c,%ld,microns,%ld,microns/sec,%d,mA,%s";
    1dd0:	9f e2       	ldi	r25, 0x2F	; 47
    1dd2:	e4 eb       	ldi	r30, 0xB4	; 180
    1dd4:	fb e8       	ldi	r31, 0x8B	; 139
    1dd6:	de 01       	movw	r26, r28
    1dd8:	a1 57       	subi	r26, 0x71	; 113
    1dda:	be 4f       	sbci	r27, 0xFE	; 254
    1ddc:	01 90       	ld	r0, Z+
    1dde:	0d 92       	st	X+, r0
    1de0:	9a 95       	dec	r25
    1de2:	e1 f7       	brne	.-8      	; 0x1ddc <report+0x50>
	const char format_MTV[] = "MTV,%s,%c,%3.1f,V,%3.1f,C,%s";
    1de4:	9d e1       	ldi	r25, 0x1D	; 29
    1de6:	e3 ee       	ldi	r30, 0xE3	; 227
    1de8:	fb e8       	ldi	r31, 0x8B	; 139
    1dea:	de 01       	movw	r26, r28
    1dec:	a2 54       	subi	r26, 0x42	; 66
    1dee:	be 4f       	sbci	r27, 0xFE	; 254
    1df0:	01 90       	ld	r0, Z+
    1df2:	0d 92       	st	X+, r0
    1df4:	9a 95       	dec	r25
    1df6:	e1 f7       	brne	.-8      	; 0x1df0 <report+0x64>
	const char format_ORI[] = "ORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1df8:	9c e1       	ldi	r25, 0x1C	; 28
    1dfa:	e0 e0       	ldi	r30, 0x00	; 0
    1dfc:	fc e8       	ldi	r31, 0x8C	; 140
    1dfe:	de 01       	movw	r26, r28
    1e00:	a5 52       	subi	r26, 0x25	; 37
    1e02:	be 4f       	sbci	r27, 0xFE	; 254
    1e04:	01 90       	ld	r0, Z+
    1e06:	0d 92       	st	X+, r0
    1e08:	9a 95       	dec	r25
    1e0a:	e1 f7       	brne	.-8      	; 0x1e04 <report+0x78>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1e0c:	92 e1       	ldi	r25, 0x12	; 18
    1e0e:	ec e1       	ldi	r30, 0x1C	; 28
    1e10:	fc e8       	ldi	r31, 0x8C	; 140
    1e12:	de 01       	movw	r26, r28
    1e14:	a9 50       	subi	r26, 0x09	; 9
    1e16:	be 4f       	sbci	r27, 0xFE	; 254
    1e18:	01 90       	ld	r0, Z+
    1e1a:	0d 92       	st	X+, r0
    1e1c:	9a 95       	dec	r25
    1e1e:	e1 f7       	brne	.-8      	; 0x1e18 <report+0x8c>
	const char format_PNU[] = "PNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1e20:	9d e2       	ldi	r25, 0x2D	; 45
    1e22:	ee e2       	ldi	r30, 0x2E	; 46
    1e24:	fc e8       	ldi	r31, 0x8C	; 140
    1e26:	de 01       	movw	r26, r28
    1e28:	a7 5f       	subi	r26, 0xF7	; 247
    1e2a:	bd 4f       	sbci	r27, 0xFD	; 253
    1e2c:	01 90       	ld	r0, Z+
    1e2e:	0d 92       	st	X+, r0
    1e30:	9a 95       	dec	r25
    1e32:	e1 f7       	brne	.-8      	; 0x1e2c <report+0xa0>
	const char dformat_PN1[] = "Left:%c   Right:%c";
    1e34:	93 e1       	ldi	r25, 0x13	; 19
    1e36:	eb e5       	ldi	r30, 0x5B	; 91
    1e38:	fc e8       	ldi	r31, 0x8C	; 140
    1e3a:	de 01       	movw	r26, r28
    1e3c:	aa 5c       	subi	r26, 0xCA	; 202
    1e3e:	bd 4f       	sbci	r27, 0xFD	; 253
    1e40:	01 90       	ld	r0, Z+
    1e42:	0d 92       	st	X+, r0
    1e44:	9a 95       	dec	r25
    1e46:	e1 f7       	brne	.-8      	; 0x1e40 <report+0xb4>
	const char dformat_PN2[] = "Shutter:%c  Air:%c";
    1e48:	93 e1       	ldi	r25, 0x13	; 19
    1e4a:	ee e6       	ldi	r30, 0x6E	; 110
    1e4c:	fc e8       	ldi	r31, 0x8C	; 140
    1e4e:	de 01       	movw	r26, r28
    1e50:	a7 5b       	subi	r26, 0xB7	; 183
    1e52:	bd 4f       	sbci	r27, 0xFD	; 253
    1e54:	01 90       	ld	r0, Z+
    1e56:	0d 92       	st	X+, r0
    1e58:	9a 95       	dec	r25
    1e5a:	e1 f7       	brne	.-8      	; 0x1e54 <report+0xc8>
	const char format_TIM[] = "TIM,%s,%s,set,%s,boot,%s";
    1e5c:	99 e1       	ldi	r25, 0x19	; 25
    1e5e:	e1 e8       	ldi	r30, 0x81	; 129
    1e60:	fc e8       	ldi	r31, 0x8C	; 140
    1e62:	de 01       	movw	r26, r28
    1e64:	a4 5a       	subi	r26, 0xA4	; 164
    1e66:	bd 4f       	sbci	r27, 0xFD	; 253
    1e68:	01 90       	ld	r0, Z+
    1e6a:	0d 92       	st	X+, r0
    1e6c:	9a 95       	dec	r25
    1e6e:	e1 f7       	brne	.-8      	; 0x1e68 <report+0xdc>
	const char format_VAC[] = "VAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1e70:	95 e2       	ldi	r25, 0x25	; 37
    1e72:	ea e9       	ldi	r30, 0x9A	; 154
    1e74:	fc e8       	ldi	r31, 0x8C	; 140
    1e76:	de 01       	movw	r26, r28
    1e78:	ab 58       	subi	r26, 0x8B	; 139
    1e7a:	bd 4f       	sbci	r27, 0xFD	; 253
    1e7c:	01 90       	ld	r0, Z+
    1e7e:	0d 92       	st	X+, r0
    1e80:	9a 95       	dec	r25
    1e82:	e1 f7       	brne	.-8      	; 0x1e7c <report+0xf0>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1e84:	9d e0       	ldi	r25, 0x0D	; 13
    1e86:	ef eb       	ldi	r30, 0xBF	; 191
    1e88:	fc e8       	ldi	r31, 0x8C	; 140
    1e8a:	de 01       	movw	r26, r28
    1e8c:	a6 56       	subi	r26, 0x66	; 102
    1e8e:	bd 4f       	sbci	r27, 0xFD	; 253
    1e90:	01 90       	ld	r0, Z+
    1e92:	0d 92       	st	X+, r0
    1e94:	9a 95       	dec	r25
    1e96:	e1 f7       	brne	.-8      	; 0x1e90 <report+0x104>
	const char format_VER[] = "VER,%s,%s,%s";
    1e98:	9d e0       	ldi	r25, 0x0D	; 13
    1e9a:	ec ec       	ldi	r30, 0xCC	; 204
    1e9c:	fc e8       	ldi	r31, 0x8C	; 140
    1e9e:	de 01       	movw	r26, r28
    1ea0:	a9 55       	subi	r26, 0x59	; 89
    1ea2:	bd 4f       	sbci	r27, 0xFD	; 253
    1ea4:	01 90       	ld	r0, Z+
    1ea6:	0d 92       	st	X+, r0
    1ea8:	9a 95       	dec	r25
    1eaa:	e1 f7       	brne	.-8      	; 0x1ea4 <report+0x118>
	float voltage;							// voltage
	uint16_t current;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum

	switch(pcmd[cstack].cobject) {
    1eac:	08 2f       	mov	r16, r24
    1eae:	10 e0       	ldi	r17, 0x00	; 0
    1eb0:	84 e3       	ldi	r24, 0x34	; 52
    1eb2:	80 9f       	mul	r24, r16
    1eb4:	f0 01       	movw	r30, r0
    1eb6:	81 9f       	mul	r24, r17
    1eb8:	f0 0d       	add	r31, r0
    1eba:	11 24       	eor	r1, r1
    1ebc:	ed 5f       	subi	r30, 0xFD	; 253
    1ebe:	f7 4d       	sbci	r31, 0xD7	; 215
    1ec0:	e1 81       	ldd	r30, Z+1	; 0x01
    1ec2:	8e 2f       	mov	r24, r30
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	e1 54       	subi	r30, 0x41	; 65
    1eca:	f1 09       	sbc	r31, r1
    1ecc:	e6 33       	cpi	r30, 0x36	; 54
    1ece:	f1 05       	cpc	r31, r1
    1ed0:	08 f0       	brcs	.+2      	; 0x1ed4 <report+0x148>
    1ed2:	cd c4       	rjmp	.+2458   	; 0x286e <report+0xae2>
    1ed4:	e4 58       	subi	r30, 0x84	; 132
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	0c 94 13 22 	jmp	0x4426	; 0x4426 <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    1edc:	ce 01       	movw	r24, r28
    1ede:	86 5f       	subi	r24, 0xF6	; 246
    1ee0:	9e 4f       	sbci	r25, 0xFE	; 254
    1ee2:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
			controller = pcmd[cstack].cobject + 63;
    1ee6:	84 e3       	ldi	r24, 0x34	; 52
    1ee8:	80 9f       	mul	r24, r16
    1eea:	f0 01       	movw	r30, r0
    1eec:	81 9f       	mul	r24, r17
    1eee:	f0 0d       	add	r31, r0
    1ef0:	11 24       	eor	r1, r1
    1ef2:	ed 5f       	subi	r30, 0xFD	; 253
    1ef4:	f7 4d       	sbci	r31, 0xD7	; 215
    1ef6:	f1 80       	ldd	r15, Z+1	; 0x01
    1ef8:	0f 2e       	mov	r0, r31
    1efa:	ff e3       	ldi	r31, 0x3F	; 63
    1efc:	ef 2e       	mov	r14, r31
    1efe:	f0 2d       	mov	r31, r0
    1f00:	ef 0c       	add	r14, r15
			retval = get_MOTORFloat(controller, READMAINVOLTAGE, &voltage);
    1f02:	ae 01       	movw	r20, r28
    1f04:	4c 53       	subi	r20, 0x3C	; 60
    1f06:	5d 4f       	sbci	r21, 0xFD	; 253
    1f08:	68 e1       	ldi	r22, 0x18	; 24
    1f0a:	8e 2d       	mov	r24, r14
    1f0c:	0e 94 88 15 	call	0x2b10	; 0x2b10 <get_MOTORFloat>
			if (retval == ERROR) {
    1f10:	83 36       	cpi	r24, 0x63	; 99
    1f12:	61 f4       	brne	.+24     	; 0x1f2c <report+0x1a0>
				voltage = -666.0;
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	90 e8       	ldi	r25, 0x80	; 128
    1f18:	a6 e2       	ldi	r26, 0x26	; 38
    1f1a:	b4 ec       	ldi	r27, 0xC4	; 196
    1f1c:	cc 53       	subi	r28, 0x3C	; 60
    1f1e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f20:	88 83       	st	Y, r24
    1f22:	99 83       	std	Y+1, r25	; 0x01
    1f24:	aa 83       	std	Y+2, r26	; 0x02
    1f26:	bb 83       	std	Y+3, r27	; 0x03
    1f28:	c4 5c       	subi	r28, 0xC4	; 196
    1f2a:	d2 40       	sbci	r29, 0x02	; 2
			}
			retval = get_MOTORFloat(controller, READTEMPERATURE, &t0);
    1f2c:	ae 01       	movw	r20, r28
    1f2e:	40 54       	subi	r20, 0x40	; 64
    1f30:	5d 4f       	sbci	r21, 0xFD	; 253
    1f32:	62 e5       	ldi	r22, 0x52	; 82
    1f34:	8e 2d       	mov	r24, r14
    1f36:	0e 94 88 15 	call	0x2b10	; 0x2b10 <get_MOTORFloat>
			if (retval == ERROR) {
    1f3a:	83 36       	cpi	r24, 0x63	; 99
    1f3c:	61 f4       	brne	.+24     	; 0x1f56 <report+0x1ca>
				t0 = -666.0;
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	90 e8       	ldi	r25, 0x80	; 128
    1f42:	a6 e2       	ldi	r26, 0x26	; 38
    1f44:	b4 ec       	ldi	r27, 0xC4	; 196
    1f46:	c0 54       	subi	r28, 0x40	; 64
    1f48:	dd 4f       	sbci	r29, 0xFD	; 253
    1f4a:	88 83       	st	Y, r24
    1f4c:	99 83       	std	Y+1, r25	; 0x01
    1f4e:	aa 83       	std	Y+2, r26	; 0x02
    1f50:	bb 83       	std	Y+3, r27	; 0x03
    1f52:	c0 5c       	subi	r28, 0xC0	; 192
    1f54:	d2 40       	sbci	r29, 0x02	; 2
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
    1f56:	24 e3       	ldi	r18, 0x34	; 52
    1f58:	20 9f       	mul	r18, r16
    1f5a:	c0 01       	movw	r24, r0
    1f5c:	21 9f       	mul	r18, r17
    1f5e:	90 0d       	add	r25, r0
    1f60:	11 24       	eor	r1, r1
    1f62:	82 5d       	subi	r24, 0xD2	; 210
    1f64:	97 4d       	sbci	r25, 0xD7	; 215
			}
			retval = get_MOTORFloat(controller, READTEMPERATURE, &t0);
			if (retval == ERROR) {
				t0 = -666.0;
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
    1f66:	9f 93       	push	r25
    1f68:	8f 93       	push	r24
    1f6a:	cd 53       	subi	r28, 0x3D	; 61
    1f6c:	dd 4f       	sbci	r29, 0xFD	; 253
    1f6e:	88 81       	ld	r24, Y
    1f70:	c3 5c       	subi	r28, 0xC3	; 195
    1f72:	d2 40       	sbci	r29, 0x02	; 2
    1f74:	8f 93       	push	r24
    1f76:	ce 53       	subi	r28, 0x3E	; 62
    1f78:	dd 4f       	sbci	r29, 0xFD	; 253
    1f7a:	88 81       	ld	r24, Y
    1f7c:	c2 5c       	subi	r28, 0xC2	; 194
    1f7e:	d2 40       	sbci	r29, 0x02	; 2
    1f80:	8f 93       	push	r24
    1f82:	cf 53       	subi	r28, 0x3F	; 63
    1f84:	dd 4f       	sbci	r29, 0xFD	; 253
    1f86:	88 81       	ld	r24, Y
    1f88:	c1 5c       	subi	r28, 0xC1	; 193
    1f8a:	d2 40       	sbci	r29, 0x02	; 2
    1f8c:	8f 93       	push	r24
    1f8e:	c0 54       	subi	r28, 0x40	; 64
    1f90:	dd 4f       	sbci	r29, 0xFD	; 253
    1f92:	88 81       	ld	r24, Y
    1f94:	c0 5c       	subi	r28, 0xC0	; 192
    1f96:	d2 40       	sbci	r29, 0x02	; 2
    1f98:	8f 93       	push	r24
    1f9a:	c9 53       	subi	r28, 0x39	; 57
    1f9c:	dd 4f       	sbci	r29, 0xFD	; 253
    1f9e:	88 81       	ld	r24, Y
    1fa0:	c7 5c       	subi	r28, 0xC7	; 199
    1fa2:	d2 40       	sbci	r29, 0x02	; 2
    1fa4:	8f 93       	push	r24
    1fa6:	ca 53       	subi	r28, 0x3A	; 58
    1fa8:	dd 4f       	sbci	r29, 0xFD	; 253
    1faa:	88 81       	ld	r24, Y
    1fac:	c6 5c       	subi	r28, 0xC6	; 198
    1fae:	d2 40       	sbci	r29, 0x02	; 2
    1fb0:	8f 93       	push	r24
    1fb2:	cb 53       	subi	r28, 0x3B	; 59
    1fb4:	dd 4f       	sbci	r29, 0xFD	; 253
    1fb6:	88 81       	ld	r24, Y
    1fb8:	c5 5c       	subi	r28, 0xC5	; 197
    1fba:	d2 40       	sbci	r29, 0x02	; 2
    1fbc:	8f 93       	push	r24
    1fbe:	cc 53       	subi	r28, 0x3C	; 60
    1fc0:	dd 4f       	sbci	r29, 0xFD	; 253
    1fc2:	88 81       	ld	r24, Y
    1fc4:	c4 5c       	subi	r28, 0xC4	; 196
    1fc6:	d2 40       	sbci	r29, 0x02	; 2
    1fc8:	8f 93       	push	r24
    1fca:	1f 92       	push	r1
    1fcc:	ff 92       	push	r15
    1fce:	ce 01       	movw	r24, r28
    1fd0:	86 5f       	subi	r24, 0xF6	; 246
    1fd2:	9e 4f       	sbci	r25, 0xFE	; 254
    1fd4:	9f 93       	push	r25
    1fd6:	8f 93       	push	r24
    1fd8:	8c 54       	subi	r24, 0x4C	; 76
    1fda:	9f 4f       	sbci	r25, 0xFF	; 255
    1fdc:	9f 93       	push	r25
    1fde:	8f 93       	push	r24
    1fe0:	8e 01       	movw	r16, r28
    1fe2:	0f 5f       	subi	r16, 0xFF	; 255
    1fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe6:	1f 93       	push	r17
    1fe8:	0f 93       	push	r16
    1fea:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
				voltage, t0, pcmd[cstack].cid);
			printLine(outbuf);
    1fee:	c8 01       	movw	r24, r16
    1ff0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			break;
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
				t0 = -666.0;
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    1ffa:	40 c4       	rjmp	.+2176   	; 0x287c <report+0xaf0>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	86 5f       	subi	r24, 0xF6	; 246
    2000:	9e 4f       	sbci	r25, 0xFE	; 254
    2002:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
			controller = pcmd[cstack].cobject + 31;
    2006:	84 e3       	ldi	r24, 0x34	; 52
    2008:	80 9f       	mul	r24, r16
    200a:	f0 01       	movw	r30, r0
    200c:	81 9f       	mul	r24, r17
    200e:	f0 0d       	add	r31, r0
    2010:	11 24       	eor	r1, r1
    2012:	ed 5f       	subi	r30, 0xFD	; 253
    2014:	f7 4d       	sbci	r31, 0xD7	; 215
    2016:	81 81       	ldd	r24, Z+1	; 0x01
    2018:	0f 2e       	mov	r0, r31
    201a:	ff e1       	ldi	r31, 0x1F	; 31
    201c:	7f 2e       	mov	r7, r31
    201e:	f0 2d       	mov	r31, r0
    2020:	78 0e       	add	r7, r24
			retval = get_MOTOREncoder(controller, ENCODERCOUNT, &encoderValue);
    2022:	ae 01       	movw	r20, r28
    2024:	4c 54       	subi	r20, 0x4C	; 76
    2026:	5d 4f       	sbci	r21, 0xFD	; 253
    2028:	60 e1       	ldi	r22, 0x10	; 16
    202a:	87 2d       	mov	r24, r7
    202c:	0e 94 d6 14 	call	0x29ac	; 0x29ac <get_MOTOREncoder>
			if (retval == ERROR) {
    2030:	83 36       	cpi	r24, 0x63	; 99
    2032:	61 f4       	brne	.+24     	; 0x204c <report+0x2c0>
				encoderValue = 0x7FFFFFFF;
    2034:	8f ef       	ldi	r24, 0xFF	; 255
    2036:	9f ef       	ldi	r25, 0xFF	; 255
    2038:	af ef       	ldi	r26, 0xFF	; 255
    203a:	bf e7       	ldi	r27, 0x7F	; 127
    203c:	cc 54       	subi	r28, 0x4C	; 76
    203e:	dd 4f       	sbci	r29, 0xFD	; 253
    2040:	88 83       	st	Y, r24
    2042:	99 83       	std	Y+1, r25	; 0x01
    2044:	aa 83       	std	Y+2, r26	; 0x02
    2046:	bb 83       	std	Y+3, r27	; 0x03
    2048:	c4 5b       	subi	r28, 0xB4	; 180
    204a:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronValue = encoderValue/ROBOCOUNTSPERMICRON;
    204c:	cc 54       	subi	r28, 0x4C	; 76
    204e:	dd 4f       	sbci	r29, 0xFD	; 253
    2050:	68 81       	ld	r22, Y
    2052:	79 81       	ldd	r23, Y+1	; 0x01
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	9b 81       	ldd	r25, Y+3	; 0x03
    2058:	c4 5b       	subi	r28, 0xB4	; 180
    205a:	d2 40       	sbci	r29, 0x02	; 2
    205c:	2c e0       	ldi	r18, 0x0C	; 12
    205e:	31 e0       	ldi	r19, 0x01	; 1
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__divmodsi4>
    2068:	f2 2e       	mov	r15, r18
    206a:	e3 2e       	mov	r14, r19
    206c:	d4 2e       	mov	r13, r20
    206e:	c5 2e       	mov	r12, r21
			retval = get_MOTOREncoder(controller, ENCODERSPEED, &encoderSpeed);
    2070:	ae 01       	movw	r20, r28
    2072:	48 54       	subi	r20, 0x48	; 72
    2074:	5d 4f       	sbci	r21, 0xFD	; 253
    2076:	62 e1       	ldi	r22, 0x12	; 18
    2078:	87 2d       	mov	r24, r7
    207a:	0e 94 d6 14 	call	0x29ac	; 0x29ac <get_MOTOREncoder>
			if (retval == ERROR) {
    207e:	83 36       	cpi	r24, 0x63	; 99
    2080:	61 f4       	brne	.+24     	; 0x209a <report+0x30e>
				encoderSpeed = 0x7FFFFFFF;
    2082:	8f ef       	ldi	r24, 0xFF	; 255
    2084:	9f ef       	ldi	r25, 0xFF	; 255
    2086:	af ef       	ldi	r26, 0xFF	; 255
    2088:	bf e7       	ldi	r27, 0x7F	; 127
    208a:	c8 54       	subi	r28, 0x48	; 72
    208c:	dd 4f       	sbci	r29, 0xFD	; 253
    208e:	88 83       	st	Y, r24
    2090:	99 83       	std	Y+1, r25	; 0x01
    2092:	aa 83       	std	Y+2, r26	; 0x02
    2094:	bb 83       	std	Y+3, r27	; 0x03
    2096:	c8 5b       	subi	r28, 0xB8	; 184
    2098:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronSpeed = encoderSpeed/ROBOCOUNTSPERMICRON;
    209a:	c8 54       	subi	r28, 0x48	; 72
    209c:	dd 4f       	sbci	r29, 0xFD	; 253
    209e:	68 81       	ld	r22, Y
    20a0:	79 81       	ldd	r23, Y+1	; 0x01
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	9b 81       	ldd	r25, Y+3	; 0x03
    20a6:	c8 5b       	subi	r28, 0xB8	; 184
    20a8:	d2 40       	sbci	r29, 0x02	; 2
    20aa:	2c e0       	ldi	r18, 0x0C	; 12
    20ac:	31 e0       	ldi	r19, 0x01	; 1
    20ae:	40 e0       	ldi	r20, 0x00	; 0
    20b0:	50 e0       	ldi	r21, 0x00	; 0
    20b2:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__divmodsi4>
    20b6:	b2 2e       	mov	r11, r18
    20b8:	a3 2e       	mov	r10, r19
    20ba:	94 2e       	mov	r9, r20
    20bc:	85 2e       	mov	r8, r21
			retval = get_MOTORInt32(controller, ROBOREADCURRENT, &icurrents);
    20be:	ae 01       	movw	r20, r28
    20c0:	44 54       	subi	r20, 0x44	; 68
    20c2:	5d 4f       	sbci	r21, 0xFD	; 253
    20c4:	61 e3       	ldi	r22, 0x31	; 49
    20c6:	87 2d       	mov	r24, r7
    20c8:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <get_MOTORInt32>
			if (retval == ERROR) {
    20cc:	83 36       	cpi	r24, 0x63	; 99
    20ce:	61 f4       	brne	.+24     	; 0x20e8 <report+0x35c>
				icurrents = 0x7FFFFFFF;
    20d0:	8f ef       	ldi	r24, 0xFF	; 255
    20d2:	9f ef       	ldi	r25, 0xFF	; 255
    20d4:	af ef       	ldi	r26, 0xFF	; 255
    20d6:	bf e7       	ldi	r27, 0x7F	; 127
    20d8:	c4 54       	subi	r28, 0x44	; 68
    20da:	dd 4f       	sbci	r29, 0xFD	; 253
    20dc:	88 83       	st	Y, r24
    20de:	99 83       	std	Y+1, r25	; 0x01
    20e0:	aa 83       	std	Y+2, r26	; 0x02
    20e2:	bb 83       	std	Y+3, r27	; 0x03
    20e4:	cc 5b       	subi	r28, 0xBC	; 188
    20e6:	d2 40       	sbci	r29, 0x02	; 2
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
    20e8:	c4 54       	subi	r28, 0x44	; 68
    20ea:	dd 4f       	sbci	r29, 0xFD	; 253
    20ec:	88 81       	ld	r24, Y
    20ee:	99 81       	ldd	r25, Y+1	; 0x01
    20f0:	aa 81       	ldd	r26, Y+2	; 0x02
    20f2:	bb 81       	ldd	r27, Y+3	; 0x03
    20f4:	cc 5b       	subi	r28, 0xBC	; 188
    20f6:	d2 40       	sbci	r29, 0x02	; 2
    20f8:	cd 01       	movw	r24, r26
    20fa:	aa 27       	eor	r26, r26
    20fc:	bb 27       	eor	r27, r27
    20fe:	9c 01       	movw	r18, r24
    2100:	22 0f       	add	r18, r18
    2102:	33 1f       	adc	r19, r19
    2104:	88 0f       	add	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	88 0f       	add	r24, r24
    210a:	99 1f       	adc	r25, r25
    210c:	88 0f       	add	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	82 0f       	add	r24, r18
    2112:	93 1f       	adc	r25, r19
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, current, pcmd[cstack].cid);
    2114:	44 e3       	ldi	r20, 0x34	; 52
    2116:	40 9f       	mul	r20, r16
    2118:	90 01       	movw	r18, r0
    211a:	41 9f       	mul	r20, r17
    211c:	30 0d       	add	r19, r0
    211e:	11 24       	eor	r1, r1
    2120:	a9 01       	movw	r20, r18
    2122:	42 5d       	subi	r20, 0xD2	; 210
    2124:	57 4d       	sbci	r21, 0xD7	; 215
			retval = get_MOTORInt32(controller, ROBOREADCURRENT, &icurrents);
			if (retval == ERROR) {
				icurrents = 0x7FFFFFFF;
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
    2126:	f9 01       	movw	r30, r18
    2128:	ed 5f       	subi	r30, 0xFD	; 253
    212a:	f7 4d       	sbci	r31, 0xD7	; 215
    212c:	21 81       	ldd	r18, Z+1	; 0x01
    212e:	5f 93       	push	r21
    2130:	4f 93       	push	r20
    2132:	9f 93       	push	r25
    2134:	8f 93       	push	r24
    2136:	8f 92       	push	r8
    2138:	9f 92       	push	r9
    213a:	af 92       	push	r10
    213c:	bf 92       	push	r11
    213e:	cf 92       	push	r12
    2140:	df 92       	push	r13
    2142:	ef 92       	push	r14
    2144:	ff 92       	push	r15
    2146:	1f 92       	push	r1
    2148:	2f 93       	push	r18
    214a:	ce 01       	movw	r24, r28
    214c:	86 5f       	subi	r24, 0xF6	; 246
    214e:	9e 4f       	sbci	r25, 0xFE	; 254
    2150:	9f 93       	push	r25
    2152:	8f 93       	push	r24
    2154:	8b 57       	subi	r24, 0x7B	; 123
    2156:	9f 4f       	sbci	r25, 0xFF	; 255
    2158:	9f 93       	push	r25
    215a:	8f 93       	push	r24
    215c:	8e 01       	movw	r16, r28
    215e:	0f 5f       	subi	r16, 0xFF	; 255
    2160:	1f 4f       	sbci	r17, 0xFF	; 255
    2162:	1f 93       	push	r17
    2164:	0f 93       	push	r16
    2166:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
				micronValue, micronSpeed, current, pcmd[cstack].cid);
			printLine(outbuf);
    216a:	c8 01       	movw	r24, r16
    216c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			break;
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2174:	80 e0       	ldi	r24, 0x00	; 0
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, current, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    2176:	82 c3       	rjmp	.+1796   	; 0x287c <report+0xaf0>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	0e 94 ee 18 	call	0x31dc	; 0x31dc <get_temperature>
    217e:	c0 54       	subi	r28, 0x40	; 64
    2180:	dd 4f       	sbci	r29, 0xFD	; 253
    2182:	68 83       	st	Y, r22
    2184:	79 83       	std	Y+1, r23	; 0x01
    2186:	8a 83       	std	Y+2, r24	; 0x02
    2188:	9b 83       	std	Y+3, r25	; 0x03
    218a:	c0 5c       	subi	r28, 0xC0	; 192
    218c:	d2 40       	sbci	r29, 0x02	; 2
			h0 = get_humidity(0);
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	0e 94 7e 07 	call	0xefc	; 0xefc <get_humidity>
    2194:	d6 2e       	mov	r13, r22
    2196:	c7 2e       	mov	r12, r23
    2198:	b8 2e       	mov	r11, r24
    219a:	a9 2e       	mov	r10, r25
			t1 = get_temperature(1);
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	0e 94 ee 18 	call	0x31dc	; 0x31dc <get_temperature>
    21a2:	cc 52       	subi	r28, 0x2C	; 44
    21a4:	dd 4f       	sbci	r29, 0xFD	; 253
    21a6:	68 83       	st	Y, r22
    21a8:	c4 5d       	subi	r28, 0xD4	; 212
    21aa:	d2 40       	sbci	r29, 0x02	; 2
    21ac:	cb 52       	subi	r28, 0x2B	; 43
    21ae:	dd 4f       	sbci	r29, 0xFD	; 253
    21b0:	78 83       	st	Y, r23
    21b2:	c5 5d       	subi	r28, 0xD5	; 213
    21b4:	d2 40       	sbci	r29, 0x02	; 2
    21b6:	ca 52       	subi	r28, 0x2A	; 42
    21b8:	dd 4f       	sbci	r29, 0xFD	; 253
    21ba:	88 83       	st	Y, r24
    21bc:	c6 5d       	subi	r28, 0xD6	; 214
    21be:	d2 40       	sbci	r29, 0x02	; 2
    21c0:	c9 52       	subi	r28, 0x29	; 41
    21c2:	dd 4f       	sbci	r29, 0xFD	; 253
    21c4:	98 83       	st	Y, r25
    21c6:	c7 5d       	subi	r28, 0xD7	; 215
    21c8:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	0e 94 7e 07 	call	0xefc	; 0xefc <get_humidity>
    21d0:	c8 52       	subi	r28, 0x28	; 40
    21d2:	dd 4f       	sbci	r29, 0xFD	; 253
    21d4:	68 83       	st	Y, r22
    21d6:	c8 5d       	subi	r28, 0xD8	; 216
    21d8:	d2 40       	sbci	r29, 0x02	; 2
    21da:	c7 52       	subi	r28, 0x27	; 39
    21dc:	dd 4f       	sbci	r29, 0xFD	; 253
    21de:	78 83       	st	Y, r23
    21e0:	c9 5d       	subi	r28, 0xD9	; 217
    21e2:	d2 40       	sbci	r29, 0x02	; 2
    21e4:	c6 52       	subi	r28, 0x26	; 38
    21e6:	dd 4f       	sbci	r29, 0xFD	; 253
    21e8:	88 83       	st	Y, r24
    21ea:	ca 5d       	subi	r28, 0xDA	; 218
    21ec:	d2 40       	sbci	r29, 0x02	; 2
    21ee:	c5 52       	subi	r28, 0x25	; 37
    21f0:	dd 4f       	sbci	r29, 0xFD	; 253
    21f2:	98 83       	st	Y, r25
    21f4:	cb 5d       	subi	r28, 0xDB	; 219
    21f6:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    21f8:	82 e0       	ldi	r24, 0x02	; 2
    21fa:	0e 94 ee 18 	call	0x31dc	; 0x31dc <get_temperature>
    21fe:	c4 52       	subi	r28, 0x24	; 36
    2200:	dd 4f       	sbci	r29, 0xFD	; 253
    2202:	68 83       	st	Y, r22
    2204:	cc 5d       	subi	r28, 0xDC	; 220
    2206:	d2 40       	sbci	r29, 0x02	; 2
    2208:	c3 52       	subi	r28, 0x23	; 35
    220a:	dd 4f       	sbci	r29, 0xFD	; 253
    220c:	78 83       	st	Y, r23
    220e:	cd 5d       	subi	r28, 0xDD	; 221
    2210:	d2 40       	sbci	r29, 0x02	; 2
    2212:	98 2e       	mov	r9, r24
    2214:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    2216:	82 e0       	ldi	r24, 0x02	; 2
    2218:	0e 94 7e 07 	call	0xefc	; 0xefc <get_humidity>
    221c:	76 2e       	mov	r7, r22
    221e:	67 2e       	mov	r6, r23
    2220:	58 2e       	mov	r5, r24
    2222:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    2224:	83 e0       	ldi	r24, 0x03	; 3
    2226:	0e 94 ee 18 	call	0x31dc	; 0x31dc <get_temperature>
    222a:	c2 52       	subi	r28, 0x22	; 34
    222c:	dd 4f       	sbci	r29, 0xFD	; 253
    222e:	68 83       	st	Y, r22
    2230:	ce 5d       	subi	r28, 0xDE	; 222
    2232:	d2 40       	sbci	r29, 0x02	; 2
    2234:	c1 52       	subi	r28, 0x21	; 33
    2236:	dd 4f       	sbci	r29, 0xFD	; 253
    2238:	78 83       	st	Y, r23
    223a:	cf 5d       	subi	r28, 0xDF	; 223
    223c:	d2 40       	sbci	r29, 0x02	; 2
    223e:	38 2e       	mov	r3, r24
    2240:	29 2e       	mov	r2, r25
			get_time(currenttime);
    2242:	7e 01       	movw	r14, r28
    2244:	96 ef       	ldi	r25, 0xF6	; 246
    2246:	e9 1a       	sub	r14, r25
    2248:	9e ef       	ldi	r25, 0xFE	; 254
    224a:	f9 0a       	sbc	r15, r25
    224c:	c7 01       	movw	r24, r14
    224e:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    2252:	24 e3       	ldi	r18, 0x34	; 52
    2254:	20 9f       	mul	r18, r16
    2256:	c0 01       	movw	r24, r0
    2258:	21 9f       	mul	r18, r17
    225a:	90 0d       	add	r25, r0
    225c:	11 24       	eor	r1, r1
    225e:	82 5d       	subi	r24, 0xD2	; 210
    2260:	97 4d       	sbci	r25, 0xD7	; 215
    2262:	9f 93       	push	r25
    2264:	8f 93       	push	r24
    2266:	2f 92       	push	r2
    2268:	3f 92       	push	r3
    226a:	c1 52       	subi	r28, 0x21	; 33
    226c:	dd 4f       	sbci	r29, 0xFD	; 253
    226e:	88 81       	ld	r24, Y
    2270:	cf 5d       	subi	r28, 0xDF	; 223
    2272:	d2 40       	sbci	r29, 0x02	; 2
    2274:	8f 93       	push	r24
    2276:	c2 52       	subi	r28, 0x22	; 34
    2278:	dd 4f       	sbci	r29, 0xFD	; 253
    227a:	98 81       	ld	r25, Y
    227c:	ce 5d       	subi	r28, 0xDE	; 222
    227e:	d2 40       	sbci	r29, 0x02	; 2
    2280:	9f 93       	push	r25
    2282:	4f 92       	push	r4
    2284:	5f 92       	push	r5
    2286:	6f 92       	push	r6
    2288:	7f 92       	push	r7
    228a:	8f 92       	push	r8
    228c:	9f 92       	push	r9
    228e:	c3 52       	subi	r28, 0x23	; 35
    2290:	dd 4f       	sbci	r29, 0xFD	; 253
    2292:	88 81       	ld	r24, Y
    2294:	cd 5d       	subi	r28, 0xDD	; 221
    2296:	d2 40       	sbci	r29, 0x02	; 2
    2298:	8f 93       	push	r24
    229a:	c4 52       	subi	r28, 0x24	; 36
    229c:	dd 4f       	sbci	r29, 0xFD	; 253
    229e:	98 81       	ld	r25, Y
    22a0:	cc 5d       	subi	r28, 0xDC	; 220
    22a2:	d2 40       	sbci	r29, 0x02	; 2
    22a4:	9f 93       	push	r25
    22a6:	c5 52       	subi	r28, 0x25	; 37
    22a8:	dd 4f       	sbci	r29, 0xFD	; 253
    22aa:	88 81       	ld	r24, Y
    22ac:	cb 5d       	subi	r28, 0xDB	; 219
    22ae:	d2 40       	sbci	r29, 0x02	; 2
    22b0:	8f 93       	push	r24
    22b2:	c6 52       	subi	r28, 0x26	; 38
    22b4:	dd 4f       	sbci	r29, 0xFD	; 253
    22b6:	98 81       	ld	r25, Y
    22b8:	ca 5d       	subi	r28, 0xDA	; 218
    22ba:	d2 40       	sbci	r29, 0x02	; 2
    22bc:	9f 93       	push	r25
    22be:	c7 52       	subi	r28, 0x27	; 39
    22c0:	dd 4f       	sbci	r29, 0xFD	; 253
    22c2:	88 81       	ld	r24, Y
    22c4:	c9 5d       	subi	r28, 0xD9	; 217
    22c6:	d2 40       	sbci	r29, 0x02	; 2
    22c8:	8f 93       	push	r24
    22ca:	c8 52       	subi	r28, 0x28	; 40
    22cc:	dd 4f       	sbci	r29, 0xFD	; 253
    22ce:	98 81       	ld	r25, Y
    22d0:	c8 5d       	subi	r28, 0xD8	; 216
    22d2:	d2 40       	sbci	r29, 0x02	; 2
    22d4:	9f 93       	push	r25
    22d6:	c9 52       	subi	r28, 0x29	; 41
    22d8:	dd 4f       	sbci	r29, 0xFD	; 253
    22da:	88 81       	ld	r24, Y
    22dc:	c7 5d       	subi	r28, 0xD7	; 215
    22de:	d2 40       	sbci	r29, 0x02	; 2
    22e0:	8f 93       	push	r24
    22e2:	ca 52       	subi	r28, 0x2A	; 42
    22e4:	dd 4f       	sbci	r29, 0xFD	; 253
    22e6:	98 81       	ld	r25, Y
    22e8:	c6 5d       	subi	r28, 0xD6	; 214
    22ea:	d2 40       	sbci	r29, 0x02	; 2
    22ec:	9f 93       	push	r25
    22ee:	cb 52       	subi	r28, 0x2B	; 43
    22f0:	dd 4f       	sbci	r29, 0xFD	; 253
    22f2:	88 81       	ld	r24, Y
    22f4:	c5 5d       	subi	r28, 0xD5	; 213
    22f6:	d2 40       	sbci	r29, 0x02	; 2
    22f8:	8f 93       	push	r24
    22fa:	cc 52       	subi	r28, 0x2C	; 44
    22fc:	dd 4f       	sbci	r29, 0xFD	; 253
    22fe:	98 81       	ld	r25, Y
    2300:	c4 5d       	subi	r28, 0xD4	; 212
    2302:	d2 40       	sbci	r29, 0x02	; 2
    2304:	9f 93       	push	r25
    2306:	af 92       	push	r10
    2308:	bf 92       	push	r11
    230a:	cf 92       	push	r12
    230c:	df 92       	push	r13
    230e:	cd 53       	subi	r28, 0x3D	; 61
    2310:	dd 4f       	sbci	r29, 0xFD	; 253
    2312:	88 81       	ld	r24, Y
    2314:	c3 5c       	subi	r28, 0xC3	; 195
    2316:	d2 40       	sbci	r29, 0x02	; 2
    2318:	8f 93       	push	r24
    231a:	ce 53       	subi	r28, 0x3E	; 62
    231c:	dd 4f       	sbci	r29, 0xFD	; 253
    231e:	88 81       	ld	r24, Y
    2320:	c2 5c       	subi	r28, 0xC2	; 194
    2322:	d2 40       	sbci	r29, 0x02	; 2
    2324:	8f 93       	push	r24
    2326:	cf 53       	subi	r28, 0x3F	; 63
    2328:	dd 4f       	sbci	r29, 0xFD	; 253
    232a:	88 81       	ld	r24, Y
    232c:	c1 5c       	subi	r28, 0xC1	; 193
    232e:	d2 40       	sbci	r29, 0x02	; 2
    2330:	8f 93       	push	r24
    2332:	c0 54       	subi	r28, 0x40	; 64
    2334:	dd 4f       	sbci	r29, 0xFD	; 253
    2336:	88 81       	ld	r24, Y
    2338:	c0 5c       	subi	r28, 0xC0	; 192
    233a:	d2 40       	sbci	r29, 0x02	; 2
    233c:	8f 93       	push	r24
    233e:	ff 92       	push	r15
    2340:	ef 92       	push	r14
    2342:	ce 01       	movw	r24, r28
    2344:	86 5b       	subi	r24, 0xB6	; 182
    2346:	9e 4f       	sbci	r25, 0xFE	; 254
    2348:	9f 93       	push	r25
    234a:	8f 93       	push	r24
    234c:	8e 01       	movw	r16, r28
    234e:	0f 5f       	subi	r16, 0xFF	; 255
    2350:	1f 4f       	sbci	r17, 0xFF	; 255
    2352:	1f 93       	push	r17
    2354:	0f 93       	push	r16
    2356:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
			printLine(outbuf);
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	de bf       	out	0x3e, r29	; 62
    235e:	c8 01       	movw	r24, r16
    2360:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "Temp & Humidity", 1);
    2364:	41 e0       	ldi	r20, 0x01	; 1
    2366:	61 e1       	ldi	r22, 0x11	; 17
    2368:	7b e8       	ldi	r23, 0x8B	; 139
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    2370:	c0 54       	subi	r28, 0x40	; 64
    2372:	dd 4f       	sbci	r29, 0xFD	; 253
    2374:	f8 80       	ld	r15, Y
    2376:	c0 5c       	subi	r28, 0xC0	; 192
    2378:	d2 40       	sbci	r29, 0x02	; 2
    237a:	cf 53       	subi	r28, 0x3F	; 63
    237c:	dd 4f       	sbci	r29, 0xFD	; 253
    237e:	e8 80       	ld	r14, Y
    2380:	c1 5c       	subi	r28, 0xC1	; 193
    2382:	d2 40       	sbci	r29, 0x02	; 2
    2384:	ce 53       	subi	r28, 0x3E	; 62
    2386:	dd 4f       	sbci	r29, 0xFD	; 253
    2388:	98 80       	ld	r9, Y
    238a:	c2 5c       	subi	r28, 0xC2	; 194
    238c:	d2 40       	sbci	r29, 0x02	; 2
    238e:	cd 53       	subi	r28, 0x3D	; 61
    2390:	dd 4f       	sbci	r29, 0xFD	; 253
    2392:	88 80       	ld	r8, Y
    2394:	c3 5c       	subi	r28, 0xC3	; 195
    2396:	d2 40       	sbci	r29, 0x02	; 2
    2398:	26 e6       	ldi	r18, 0x66	; 102
    239a:	36 e6       	ldi	r19, 0x66	; 102
    239c:	46 ee       	ldi	r20, 0xE6	; 230
    239e:	5f e3       	ldi	r21, 0x3F	; 63
    23a0:	6f 2d       	mov	r22, r15
    23a2:	7e 2d       	mov	r23, r14
    23a4:	89 2d       	mov	r24, r9
    23a6:	98 2d       	mov	r25, r8
    23a8:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__mulsf3>
    23ac:	af 92       	push	r10
    23ae:	bf 92       	push	r11
    23b0:	cf 92       	push	r12
    23b2:	df 92       	push	r13
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e0       	ldi	r20, 0x00	; 0
    23ba:	52 e4       	ldi	r21, 0x42	; 66
    23bc:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__addsf3>
    23c0:	9f 93       	push	r25
    23c2:	8f 93       	push	r24
    23c4:	7f 93       	push	r23
    23c6:	6f 93       	push	r22
    23c8:	8f 92       	push	r8
    23ca:	9f 92       	push	r9
    23cc:	ef 92       	push	r14
    23ce:	ff 92       	push	r15
    23d0:	81 e2       	ldi	r24, 0x21	; 33
    23d2:	9b e8       	ldi	r25, 0x8B	; 139
    23d4:	9f 93       	push	r25
    23d6:	8f 93       	push	r24
    23d8:	1f 93       	push	r17
    23da:	0f 93       	push	r16
    23dc:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
			writestr_OLED(1, outbuf, 2);
    23e0:	42 e0       	ldi	r20, 0x02	; 2
    23e2:	b8 01       	movw	r22, r16
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			break;
    23ea:	cd bf       	out	0x3d, r28	; 61
    23ec:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    23ee:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    23f0:	45 c2       	rjmp	.+1162   	; 0x287c <report+0xaf0>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    23f2:	ae 01       	movw	r20, r28
    23f4:	40 53       	subi	r20, 0x30	; 48
    23f6:	5d 4f       	sbci	r21, 0xFD	; 253
    23f8:	be 01       	movw	r22, r28
    23fa:	64 53       	subi	r22, 0x34	; 52
    23fc:	7d 4f       	sbci	r23, 0xFD	; 253
    23fe:	ce 01       	movw	r24, r28
    2400:	88 53       	subi	r24, 0x38	; 56
    2402:	9d 4f       	sbci	r25, 0xFD	; 253
    2404:	0e 94 df 09 	call	0x13be	; 0x13be <get_orientation>
			get_time(currenttime);
    2408:	7e 01       	movw	r14, r28
    240a:	96 ef       	ldi	r25, 0xF6	; 246
    240c:	e9 1a       	sub	r14, r25
    240e:	9e ef       	ldi	r25, 0xFE	; 254
    2410:	f9 0a       	sbc	r15, r25
    2412:	c7 01       	movw	r24, r14
    2414:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
    2418:	24 e3       	ldi	r18, 0x34	; 52
    241a:	20 9f       	mul	r18, r16
    241c:	c0 01       	movw	r24, r0
    241e:	21 9f       	mul	r18, r17
    2420:	90 0d       	add	r25, r0
    2422:	11 24       	eor	r1, r1
    2424:	82 5d       	subi	r24, 0xD2	; 210
    2426:	97 4d       	sbci	r25, 0xD7	; 215
    2428:	9f 93       	push	r25
    242a:	8f 93       	push	r24
    242c:	cd 52       	subi	r28, 0x2D	; 45
    242e:	dd 4f       	sbci	r29, 0xFD	; 253
    2430:	88 81       	ld	r24, Y
    2432:	c3 5d       	subi	r28, 0xD3	; 211
    2434:	d2 40       	sbci	r29, 0x02	; 2
    2436:	8f 93       	push	r24
    2438:	ce 52       	subi	r28, 0x2E	; 46
    243a:	dd 4f       	sbci	r29, 0xFD	; 253
    243c:	88 81       	ld	r24, Y
    243e:	c2 5d       	subi	r28, 0xD2	; 210
    2440:	d2 40       	sbci	r29, 0x02	; 2
    2442:	8f 93       	push	r24
    2444:	cf 52       	subi	r28, 0x2F	; 47
    2446:	dd 4f       	sbci	r29, 0xFD	; 253
    2448:	88 81       	ld	r24, Y
    244a:	c1 5d       	subi	r28, 0xD1	; 209
    244c:	d2 40       	sbci	r29, 0x02	; 2
    244e:	8f 93       	push	r24
    2450:	c0 53       	subi	r28, 0x30	; 48
    2452:	dd 4f       	sbci	r29, 0xFD	; 253
    2454:	88 81       	ld	r24, Y
    2456:	c0 5d       	subi	r28, 0xD0	; 208
    2458:	d2 40       	sbci	r29, 0x02	; 2
    245a:	8f 93       	push	r24
    245c:	c1 53       	subi	r28, 0x31	; 49
    245e:	dd 4f       	sbci	r29, 0xFD	; 253
    2460:	88 81       	ld	r24, Y
    2462:	cf 5c       	subi	r28, 0xCF	; 207
    2464:	d2 40       	sbci	r29, 0x02	; 2
    2466:	8f 93       	push	r24
    2468:	c2 53       	subi	r28, 0x32	; 50
    246a:	dd 4f       	sbci	r29, 0xFD	; 253
    246c:	88 81       	ld	r24, Y
    246e:	ce 5c       	subi	r28, 0xCE	; 206
    2470:	d2 40       	sbci	r29, 0x02	; 2
    2472:	8f 93       	push	r24
    2474:	c3 53       	subi	r28, 0x33	; 51
    2476:	dd 4f       	sbci	r29, 0xFD	; 253
    2478:	88 81       	ld	r24, Y
    247a:	cd 5c       	subi	r28, 0xCD	; 205
    247c:	d2 40       	sbci	r29, 0x02	; 2
    247e:	8f 93       	push	r24
    2480:	c4 53       	subi	r28, 0x34	; 52
    2482:	dd 4f       	sbci	r29, 0xFD	; 253
    2484:	88 81       	ld	r24, Y
    2486:	cc 5c       	subi	r28, 0xCC	; 204
    2488:	d2 40       	sbci	r29, 0x02	; 2
    248a:	8f 93       	push	r24
    248c:	c5 53       	subi	r28, 0x35	; 53
    248e:	dd 4f       	sbci	r29, 0xFD	; 253
    2490:	88 81       	ld	r24, Y
    2492:	cb 5c       	subi	r28, 0xCB	; 203
    2494:	d2 40       	sbci	r29, 0x02	; 2
    2496:	8f 93       	push	r24
    2498:	c6 53       	subi	r28, 0x36	; 54
    249a:	dd 4f       	sbci	r29, 0xFD	; 253
    249c:	88 81       	ld	r24, Y
    249e:	ca 5c       	subi	r28, 0xCA	; 202
    24a0:	d2 40       	sbci	r29, 0x02	; 2
    24a2:	8f 93       	push	r24
    24a4:	c7 53       	subi	r28, 0x37	; 55
    24a6:	dd 4f       	sbci	r29, 0xFD	; 253
    24a8:	88 81       	ld	r24, Y
    24aa:	c9 5c       	subi	r28, 0xC9	; 201
    24ac:	d2 40       	sbci	r29, 0x02	; 2
    24ae:	8f 93       	push	r24
    24b0:	c8 53       	subi	r28, 0x38	; 56
    24b2:	dd 4f       	sbci	r29, 0xFD	; 253
    24b4:	88 81       	ld	r24, Y
    24b6:	c8 5c       	subi	r28, 0xC8	; 200
    24b8:	d2 40       	sbci	r29, 0x02	; 2
    24ba:	8f 93       	push	r24
    24bc:	ff 92       	push	r15
    24be:	ef 92       	push	r14
    24c0:	ce 01       	movw	r24, r28
    24c2:	85 52       	subi	r24, 0x25	; 37
    24c4:	9e 4f       	sbci	r25, 0xFE	; 254
    24c6:	9f 93       	push	r25
    24c8:	8f 93       	push	r24
    24ca:	8e 01       	movw	r16, r28
    24cc:	0f 5f       	subi	r16, 0xFF	; 255
    24ce:	1f 4f       	sbci	r17, 0xFF	; 255
    24d0:	1f 93       	push	r17
    24d2:	0f 93       	push	r16
    24d4:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
			printLine(outbuf);
    24d8:	c8 01       	movw	r24, r16
    24da:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "Orientation", 1);
    24de:	41 e0       	ldi	r20, 0x01	; 1
    24e0:	67 e3       	ldi	r22, 0x37	; 55
    24e2:	7b e8       	ldi	r23, 0x8B	; 139
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    24ea:	cd 52       	subi	r28, 0x2D	; 45
    24ec:	dd 4f       	sbci	r29, 0xFD	; 253
    24ee:	88 81       	ld	r24, Y
    24f0:	c3 5d       	subi	r28, 0xD3	; 211
    24f2:	d2 40       	sbci	r29, 0x02	; 2
    24f4:	8f 93       	push	r24
    24f6:	ce 52       	subi	r28, 0x2E	; 46
    24f8:	dd 4f       	sbci	r29, 0xFD	; 253
    24fa:	88 81       	ld	r24, Y
    24fc:	c2 5d       	subi	r28, 0xD2	; 210
    24fe:	d2 40       	sbci	r29, 0x02	; 2
    2500:	8f 93       	push	r24
    2502:	cf 52       	subi	r28, 0x2F	; 47
    2504:	dd 4f       	sbci	r29, 0xFD	; 253
    2506:	88 81       	ld	r24, Y
    2508:	c1 5d       	subi	r28, 0xD1	; 209
    250a:	d2 40       	sbci	r29, 0x02	; 2
    250c:	8f 93       	push	r24
    250e:	c0 53       	subi	r28, 0x30	; 48
    2510:	dd 4f       	sbci	r29, 0xFD	; 253
    2512:	88 81       	ld	r24, Y
    2514:	c0 5d       	subi	r28, 0xD0	; 208
    2516:	d2 40       	sbci	r29, 0x02	; 2
    2518:	8f 93       	push	r24
    251a:	c1 53       	subi	r28, 0x31	; 49
    251c:	dd 4f       	sbci	r29, 0xFD	; 253
    251e:	88 81       	ld	r24, Y
    2520:	cf 5c       	subi	r28, 0xCF	; 207
    2522:	d2 40       	sbci	r29, 0x02	; 2
    2524:	8f 93       	push	r24
    2526:	c2 53       	subi	r28, 0x32	; 50
    2528:	dd 4f       	sbci	r29, 0xFD	; 253
    252a:	88 81       	ld	r24, Y
    252c:	ce 5c       	subi	r28, 0xCE	; 206
    252e:	d2 40       	sbci	r29, 0x02	; 2
    2530:	8f 93       	push	r24
    2532:	c3 53       	subi	r28, 0x33	; 51
    2534:	dd 4f       	sbci	r29, 0xFD	; 253
    2536:	88 81       	ld	r24, Y
    2538:	cd 5c       	subi	r28, 0xCD	; 205
    253a:	d2 40       	sbci	r29, 0x02	; 2
    253c:	8f 93       	push	r24
    253e:	c4 53       	subi	r28, 0x34	; 52
    2540:	dd 4f       	sbci	r29, 0xFD	; 253
    2542:	88 81       	ld	r24, Y
    2544:	cc 5c       	subi	r28, 0xCC	; 204
    2546:	d2 40       	sbci	r29, 0x02	; 2
    2548:	8f 93       	push	r24
    254a:	c5 53       	subi	r28, 0x35	; 53
    254c:	dd 4f       	sbci	r29, 0xFD	; 253
    254e:	88 81       	ld	r24, Y
    2550:	cb 5c       	subi	r28, 0xCB	; 203
    2552:	d2 40       	sbci	r29, 0x02	; 2
    2554:	8f 93       	push	r24
    2556:	c6 53       	subi	r28, 0x36	; 54
    2558:	dd 4f       	sbci	r29, 0xFD	; 253
    255a:	88 81       	ld	r24, Y
    255c:	ca 5c       	subi	r28, 0xCA	; 202
    255e:	d2 40       	sbci	r29, 0x02	; 2
    2560:	8f 93       	push	r24
    2562:	c7 53       	subi	r28, 0x37	; 55
    2564:	dd 4f       	sbci	r29, 0xFD	; 253
    2566:	88 81       	ld	r24, Y
    2568:	c9 5c       	subi	r28, 0xC9	; 201
    256a:	d2 40       	sbci	r29, 0x02	; 2
    256c:	8f 93       	push	r24
    256e:	c8 53       	subi	r28, 0x38	; 56
    2570:	dd 4f       	sbci	r29, 0xFD	; 253
    2572:	88 81       	ld	r24, Y
    2574:	c8 5c       	subi	r28, 0xC8	; 200
    2576:	d2 40       	sbci	r29, 0x02	; 2
    2578:	8f 93       	push	r24
    257a:	ce 01       	movw	r24, r28
    257c:	89 50       	subi	r24, 0x09	; 9
    257e:	9e 4f       	sbci	r25, 0xFE	; 254
    2580:	9f 93       	push	r25
    2582:	8f 93       	push	r24
    2584:	1f 93       	push	r17
    2586:	0f 93       	push	r16
    2588:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
			writestr_OLED(1, outbuf, 2);
    258c:	cd bf       	out	0x3d, r28	; 61
    258e:	de bf       	out	0x3e, r29	; 62
    2590:	42 e0       	ldi	r20, 0x02	; 2
    2592:	b8 01       	movw	r22, r16
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    259a:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    259c:	6f c1       	rjmp	.+734    	; 0x287c <report+0xaf0>

		case 'p':					// Pneumatics
			get_time(currenttime);
    259e:	7e 01       	movw	r14, r28
    25a0:	96 ef       	ldi	r25, 0xF6	; 246
    25a2:	e9 1a       	sub	r14, r25
    25a4:	9e ef       	ldi	r25, 0xFE	; 254
    25a6:	f9 0a       	sbc	r15, r25
    25a8:	c7 01       	movw	r24, r14
    25aa:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
			read_PNEUSensors(&shutter, &left, &right, &air);
    25ae:	9e 01       	movw	r18, r28
    25b0:	27 5b       	subi	r18, 0xB7	; 183
    25b2:	3e 4f       	sbci	r19, 0xFE	; 254
    25b4:	ae 01       	movw	r20, r28
    25b6:	48 5b       	subi	r20, 0xB8	; 184
    25b8:	5e 4f       	sbci	r21, 0xFE	; 254
    25ba:	be 01       	movw	r22, r28
    25bc:	69 5b       	subi	r22, 0xB9	; 185
    25be:	7e 4f       	sbci	r23, 0xFE	; 254
    25c0:	ce 01       	movw	r24, r28
    25c2:	8a 5b       	subi	r24, 0xBA	; 186
    25c4:	9e 4f       	sbci	r25, 0xFE	; 254
    25c6:	0e 94 af 0c 	call	0x195e	; 0x195e <read_PNEUSensors>
			sprintf(outbuf, format_PNU, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    25ca:	24 e3       	ldi	r18, 0x34	; 52
    25cc:	20 9f       	mul	r18, r16
    25ce:	c0 01       	movw	r24, r0
    25d0:	21 9f       	mul	r18, r17
    25d2:	90 0d       	add	r25, r0
    25d4:	11 24       	eor	r1, r1
    25d6:	82 5d       	subi	r24, 0xD2	; 210
    25d8:	97 4d       	sbci	r25, 0xD7	; 215
    25da:	9f 93       	push	r25
    25dc:	8f 93       	push	r24
    25de:	c7 5b       	subi	r28, 0xB7	; 183
    25e0:	de 4f       	sbci	r29, 0xFE	; 254
    25e2:	88 81       	ld	r24, Y
    25e4:	c9 54       	subi	r28, 0x49	; 73
    25e6:	d1 40       	sbci	r29, 0x01	; 1
    25e8:	1f 92       	push	r1
    25ea:	8f 93       	push	r24
    25ec:	c8 5b       	subi	r28, 0xB8	; 184
    25ee:	de 4f       	sbci	r29, 0xFE	; 254
    25f0:	88 81       	ld	r24, Y
    25f2:	c8 54       	subi	r28, 0x48	; 72
    25f4:	d1 40       	sbci	r29, 0x01	; 1
    25f6:	1f 92       	push	r1
    25f8:	8f 93       	push	r24
    25fa:	c9 5b       	subi	r28, 0xB9	; 185
    25fc:	de 4f       	sbci	r29, 0xFE	; 254
    25fe:	88 81       	ld	r24, Y
    2600:	c7 54       	subi	r28, 0x47	; 71
    2602:	d1 40       	sbci	r29, 0x01	; 1
    2604:	1f 92       	push	r1
    2606:	8f 93       	push	r24
    2608:	ca 5b       	subi	r28, 0xBA	; 186
    260a:	de 4f       	sbci	r29, 0xFE	; 254
    260c:	88 81       	ld	r24, Y
    260e:	c6 54       	subi	r28, 0x46	; 70
    2610:	d1 40       	sbci	r29, 0x01	; 1
    2612:	1f 92       	push	r1
    2614:	8f 93       	push	r24
    2616:	ff 92       	push	r15
    2618:	ef 92       	push	r14
    261a:	ce 01       	movw	r24, r28
    261c:	87 5f       	subi	r24, 0xF7	; 247
    261e:	9d 4f       	sbci	r25, 0xFD	; 253
    2620:	9f 93       	push	r25
    2622:	8f 93       	push	r24
    2624:	8e 01       	movw	r16, r28
    2626:	0f 5f       	subi	r16, 0xFF	; 255
    2628:	1f 4f       	sbci	r17, 0xFF	; 255
    262a:	1f 93       	push	r17
    262c:	0f 93       	push	r16
    262e:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
			printLine(outbuf);
    2632:	c8 01       	movw	r24, r16
    2634:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			sprintf(outbuf, dformat_PN1, left, right);
    2638:	c8 5b       	subi	r28, 0xB8	; 184
    263a:	de 4f       	sbci	r29, 0xFE	; 254
    263c:	88 81       	ld	r24, Y
    263e:	c8 54       	subi	r28, 0x48	; 72
    2640:	d1 40       	sbci	r29, 0x01	; 1
    2642:	1f 92       	push	r1
    2644:	8f 93       	push	r24
    2646:	c9 5b       	subi	r28, 0xB9	; 185
    2648:	de 4f       	sbci	r29, 0xFE	; 254
    264a:	88 81       	ld	r24, Y
    264c:	c7 54       	subi	r28, 0x47	; 71
    264e:	d1 40       	sbci	r29, 0x01	; 1
    2650:	1f 92       	push	r1
    2652:	8f 93       	push	r24
    2654:	ce 01       	movw	r24, r28
    2656:	8a 5c       	subi	r24, 0xCA	; 202
    2658:	9d 4f       	sbci	r25, 0xFD	; 253
    265a:	9f 93       	push	r25
    265c:	8f 93       	push	r24
    265e:	1f 93       	push	r17
    2660:	0f 93       	push	r16
    2662:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
			writestr_OLED(1, outbuf, 1);
    2666:	41 e0       	ldi	r20, 0x01	; 1
    2668:	b8 01       	movw	r22, r16
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2670:	c7 5b       	subi	r28, 0xB7	; 183
    2672:	de 4f       	sbci	r29, 0xFE	; 254
    2674:	88 81       	ld	r24, Y
    2676:	c9 54       	subi	r28, 0x49	; 73
    2678:	d1 40       	sbci	r29, 0x01	; 1
    267a:	1f 92       	push	r1
    267c:	8f 93       	push	r24
    267e:	ca 5b       	subi	r28, 0xBA	; 186
    2680:	de 4f       	sbci	r29, 0xFE	; 254
    2682:	88 81       	ld	r24, Y
    2684:	c6 54       	subi	r28, 0x46	; 70
    2686:	d1 40       	sbci	r29, 0x01	; 1
    2688:	1f 92       	push	r1
    268a:	8f 93       	push	r24
    268c:	ce 01       	movw	r24, r28
    268e:	87 5b       	subi	r24, 0xB7	; 183
    2690:	9d 4f       	sbci	r25, 0xFD	; 253
    2692:	9f 93       	push	r25
    2694:	8f 93       	push	r24
    2696:	1f 93       	push	r17
    2698:	0f 93       	push	r16
    269a:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
			writestr_OLED(1, outbuf, 2);
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	de bf       	out	0x3e, r29	; 62
    26a2:	42 e0       	ldi	r20, 0x02	; 2
    26a4:	b8 01       	movw	r22, r16
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    26ac:	80 e0       	ldi	r24, 0x00	; 0
			printLine(outbuf);
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    26ae:	e6 c0       	rjmp	.+460    	; 0x287c <report+0xaf0>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    26b0:	7e 01       	movw	r14, r28
    26b2:	96 ef       	ldi	r25, 0xF6	; 246
    26b4:	e9 1a       	sub	r14, r25
    26b6:	9e ef       	ldi	r25, 0xFE	; 254
    26b8:	f9 0a       	sbc	r15, r25
    26ba:	c7 01       	movw	r24, r14
    26bc:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
			get_SETTIME(lastsettime);
    26c0:	6e 01       	movw	r12, r28
    26c2:	82 ee       	ldi	r24, 0xE2	; 226
    26c4:	c8 1a       	sub	r12, r24
    26c6:	8e ef       	ldi	r24, 0xFE	; 254
    26c8:	d8 0a       	sbc	r13, r24
    26ca:	c6 01       	movw	r24, r12
    26cc:	0e 94 1c 07 	call	0xe38	; 0xe38 <get_SETTIME>
//			read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
    26d0:	5e 01       	movw	r10, r28
    26d2:	9e ec       	ldi	r25, 0xCE	; 206
    26d4:	a9 1a       	sub	r10, r25
    26d6:	9e ef       	ldi	r25, 0xFE	; 254
    26d8:	b9 0a       	sbc	r11, r25
    26da:	c5 01       	movw	r24, r10
    26dc:	0e 94 4e 06 	call	0xc9c	; 0xc9c <get_BOOTTIME>
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    26e0:	24 e3       	ldi	r18, 0x34	; 52
    26e2:	20 9f       	mul	r18, r16
    26e4:	c0 01       	movw	r24, r0
    26e6:	21 9f       	mul	r18, r17
    26e8:	90 0d       	add	r25, r0
    26ea:	11 24       	eor	r1, r1
    26ec:	82 5d       	subi	r24, 0xD2	; 210
    26ee:	97 4d       	sbci	r25, 0xD7	; 215
		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			get_SETTIME(lastsettime);
//			read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
    26f0:	9f 93       	push	r25
    26f2:	8f 93       	push	r24
    26f4:	bf 92       	push	r11
    26f6:	af 92       	push	r10
    26f8:	df 92       	push	r13
    26fa:	cf 92       	push	r12
    26fc:	ff 92       	push	r15
    26fe:	ef 92       	push	r14
    2700:	ce 01       	movw	r24, r28
    2702:	84 5a       	subi	r24, 0xA4	; 164
    2704:	9d 4f       	sbci	r25, 0xFD	; 253
    2706:	9f 93       	push	r25
    2708:	8f 93       	push	r24
    270a:	8e 01       	movw	r16, r28
    270c:	0f 5f       	subi	r16, 0xFF	; 255
    270e:	1f 4f       	sbci	r17, 0xFF	; 255
    2710:	1f 93       	push	r17
    2712:	0f 93       	push	r16
    2714:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
    2718:	c8 01       	movw	r24, r16
    271a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "Time", 1);
    271e:	41 e0       	ldi	r20, 0x01	; 1
    2720:	63 e4       	ldi	r22, 0x43	; 67
    2722:	7b e8       	ldi	r23, 0x8B	; 139
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    272a:	b7 01       	movw	r22, r14
    272c:	65 5f       	subi	r22, 0xF5	; 245
    272e:	7f 4f       	sbci	r23, 0xFF	; 255
    2730:	42 e0       	ldi	r20, 0x02	; 2
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			break;
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    273c:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    273e:	9e c0       	rjmp	.+316    	; 0x287c <report+0xaf0>

		case 'v':					// Vacuum
			redvac = read_ionpump(REDPUMP);
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	0e 94 3e 08 	call	0x107c	; 0x107c <read_ionpump>
    2746:	d6 2e       	mov	r13, r22
    2748:	c7 2e       	mov	r12, r23
    274a:	b8 2e       	mov	r11, r24
    274c:	a9 2e       	mov	r10, r25
			bluvac = read_ionpump(BLUEPUMP);
    274e:	82 e0       	ldi	r24, 0x02	; 2
    2750:	0e 94 3e 08 	call	0x107c	; 0x107c <read_ionpump>
    2754:	96 2e       	mov	r9, r22
    2756:	87 2e       	mov	r8, r23
    2758:	78 2e       	mov	r7, r24
    275a:	69 2e       	mov	r6, r25
			get_time(currenttime);
    275c:	7e 01       	movw	r14, r28
    275e:	96 ef       	ldi	r25, 0xF6	; 246
    2760:	e9 1a       	sub	r14, r25
    2762:	9e ef       	ldi	r25, 0xFE	; 254
    2764:	f9 0a       	sbc	r15, r25
    2766:	c7 01       	movw	r24, r14
    2768:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
    276c:	24 e3       	ldi	r18, 0x34	; 52
    276e:	20 9f       	mul	r18, r16
    2770:	c0 01       	movw	r24, r0
    2772:	21 9f       	mul	r18, r17
    2774:	90 0d       	add	r25, r0
    2776:	11 24       	eor	r1, r1
    2778:	82 5d       	subi	r24, 0xD2	; 210
    277a:	97 4d       	sbci	r25, 0xD7	; 215
    277c:	9f 93       	push	r25
    277e:	8f 93       	push	r24
    2780:	6f 92       	push	r6
    2782:	7f 92       	push	r7
    2784:	8f 92       	push	r8
    2786:	9f 92       	push	r9
    2788:	af 92       	push	r10
    278a:	bf 92       	push	r11
    278c:	cf 92       	push	r12
    278e:	df 92       	push	r13
    2790:	ff 92       	push	r15
    2792:	ef 92       	push	r14
    2794:	ce 01       	movw	r24, r28
    2796:	8b 58       	subi	r24, 0x8B	; 139
    2798:	9d 4f       	sbci	r25, 0xFD	; 253
    279a:	9f 93       	push	r25
    279c:	8f 93       	push	r24
    279e:	8e 01       	movw	r16, r28
    27a0:	0f 5f       	subi	r16, 0xFF	; 255
    27a2:	1f 4f       	sbci	r17, 0xFF	; 255
    27a4:	1f 93       	push	r17
    27a6:	0f 93       	push	r16
    27a8:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
			printLine(outbuf);
    27ac:	c8 01       	movw	r24, r16
    27ae:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    27b2:	41 e0       	ldi	r20, 0x01	; 1
    27b4:	68 e4       	ldi	r22, 0x48	; 72
    27b6:	7b e8       	ldi	r23, 0x8B	; 139
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    27be:	6f 92       	push	r6
    27c0:	7f 92       	push	r7
    27c2:	8f 92       	push	r8
    27c4:	9f 92       	push	r9
    27c6:	af 92       	push	r10
    27c8:	bf 92       	push	r11
    27ca:	cf 92       	push	r12
    27cc:	df 92       	push	r13
    27ce:	ce 01       	movw	r24, r28
    27d0:	86 56       	subi	r24, 0x66	; 102
    27d2:	9d 4f       	sbci	r25, 0xFD	; 253
    27d4:	9f 93       	push	r25
    27d6:	8f 93       	push	r24
    27d8:	1f 93       	push	r17
    27da:	0f 93       	push	r16
    27dc:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
			writestr_OLED(1, outbuf, 2);
    27e0:	42 e0       	ldi	r20, 0x02	; 2
    27e2:	b8 01       	movw	r22, r16
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			break;
    27ea:	cd bf       	out	0x3d, r28	; 61
    27ec:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    27ee:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    27f0:	45 c0       	rjmp	.+138    	; 0x287c <report+0xaf0>

		case 'V':					// Version
			get_VERSION(version);
    27f2:	6e 01       	movw	r12, r28
    27f4:	9f ef       	ldi	r25, 0xFF	; 255
    27f6:	c9 0e       	add	r12, r25
    27f8:	d1 1c       	adc	r13, r1
    27fa:	c6 01       	movw	r24, r12
    27fc:	0e 94 55 06 	call	0xcaa	; 0xcaa <get_VERSION>
			get_time(currenttime);
    2800:	7e 01       	movw	r14, r28
    2802:	86 ef       	ldi	r24, 0xF6	; 246
    2804:	e8 1a       	sub	r14, r24
    2806:	8e ef       	ldi	r24, 0xFE	; 254
    2808:	f8 0a       	sbc	r15, r24
    280a:	c7 01       	movw	r24, r14
    280c:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
    2810:	24 e3       	ldi	r18, 0x34	; 52
    2812:	20 9f       	mul	r18, r16
    2814:	c0 01       	movw	r24, r0
    2816:	21 9f       	mul	r18, r17
    2818:	90 0d       	add	r25, r0
    281a:	11 24       	eor	r1, r1
    281c:	82 5d       	subi	r24, 0xD2	; 210
    281e:	97 4d       	sbci	r25, 0xD7	; 215
    2820:	9f 93       	push	r25
    2822:	8f 93       	push	r24
    2824:	df 92       	push	r13
    2826:	cf 92       	push	r12
    2828:	ff 92       	push	r15
    282a:	ef 92       	push	r14
    282c:	ce 01       	movw	r24, r28
    282e:	89 55       	subi	r24, 0x59	; 89
    2830:	9d 4f       	sbci	r25, 0xFD	; 253
    2832:	9f 93       	push	r25
    2834:	8f 93       	push	r24
    2836:	8e 01       	movw	r16, r28
    2838:	0f 5f       	subi	r16, 0xFF	; 255
    283a:	1f 4f       	sbci	r17, 0xFF	; 255
    283c:	1f 93       	push	r17
    283e:	0f 93       	push	r16
    2840:	0e 94 12 24 	call	0x4824	; 0x4824 <sprintf>
			printLine(outbuf);
    2844:	c8 01       	movw	r24, r16
    2846:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "specMech Version", 1);
    284a:	41 e0       	ldi	r20, 0x01	; 1
    284c:	63 e5       	ldi	r22, 0x53	; 83
    284e:	7a e8       	ldi	r23, 0x8A	; 138
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			get_VERSION(outbuf);
    2856:	c8 01       	movw	r24, r16
    2858:	0e 94 55 06 	call	0xcaa	; 0xcaa <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    285c:	42 e0       	ldi	r20, 0x02	; 2
    285e:	b8 01       	movw	r22, r16
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			break;
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    286a:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    286c:	07 c0       	rjmp	.+14     	; 0x287c <report+0xaf0>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    286e:	68 e5       	ldi	r22, 0x58	; 88
    2870:	7b e8       	ldi	r23, 0x8B	; 139
    2872:	8a ec       	ldi	r24, 0xCA	; 202
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			return(ERROR);
    287a:	83 e6       	ldi	r24, 0x63	; 99
			break;
	}

	return(NOERROR);

}
    287c:	c1 52       	subi	r28, 0x21	; 33
    287e:	dd 4f       	sbci	r29, 0xFD	; 253
    2880:	cd bf       	out	0x3d, r28	; 61
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	1f 91       	pop	r17
    288a:	0f 91       	pop	r16
    288c:	ff 90       	pop	r15
    288e:	ef 90       	pop	r14
    2890:	df 90       	pop	r13
    2892:	cf 90       	pop	r12
    2894:	bf 90       	pop	r11
    2896:	af 90       	pop	r10
    2898:	9f 90       	pop	r9
    289a:	8f 90       	pop	r8
    289c:	7f 90       	pop	r7
    289e:	6f 90       	pop	r6
    28a0:	5f 90       	pop	r5
    28a2:	4f 90       	pop	r4
    28a4:	3f 90       	pop	r3
    28a6:	2f 90       	pop	r2
    28a8:	08 95       	ret

000028aa <crc16>:

	Returns:
		The CRC16 value, an unsigned 16-bit word
------------------------------------------------------------------------------*/
uint16_t crc16(uint8_t *packet, uint16_t nBytes)
{
    28aa:	dc 01       	movw	r26, r24

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    28ac:	40 e0       	ldi	r20, 0x00	; 0
    28ae:	50 e0       	ldi	r21, 0x00	; 0
------------------------------------------------------------------------------*/
uint16_t crc16(uint8_t *packet, uint16_t nBytes)
{

	uint8_t bit;
	uint16_t crc = 0;
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	90 e0       	ldi	r25, 0x00	; 0
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    28b4:	1b c0       	rjmp	.+54     	; 0x28ec <crc16+0x42>
		crc = crc ^ ((uint16_t) packet[byte] << 8);
    28b6:	fd 01       	movw	r30, r26
    28b8:	e4 0f       	add	r30, r20
    28ba:	f5 1f       	adc	r31, r21
    28bc:	20 81       	ld	r18, Z
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	32 2f       	mov	r19, r18
    28c2:	22 27       	eor	r18, r18
    28c4:	82 27       	eor	r24, r18
    28c6:	93 27       	eor	r25, r19
		for (bit = 0; bit < 8; bit++) {
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	0c c0       	rjmp	.+24     	; 0x28e4 <crc16+0x3a>
			if (crc & 0x8000) {
    28cc:	99 23       	and	r25, r25
    28ce:	3c f4       	brge	.+14     	; 0x28de <crc16+0x34>
				crc = (crc << 1) ^ 0x1021;
    28d0:	88 0f       	add	r24, r24
    28d2:	99 1f       	adc	r25, r25
    28d4:	31 e2       	ldi	r19, 0x21	; 33
    28d6:	83 27       	eor	r24, r19
    28d8:	30 e1       	ldi	r19, 0x10	; 16
    28da:	93 27       	eor	r25, r19
    28dc:	02 c0       	rjmp	.+4      	; 0x28e2 <crc16+0x38>
			} else {
				crc = crc << 1;
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
		crc = crc ^ ((uint16_t) packet[byte] << 8);
		for (bit = 0; bit < 8; bit++) {
    28e2:	2f 5f       	subi	r18, 0xFF	; 255
    28e4:	28 30       	cpi	r18, 0x08	; 8
    28e6:	90 f3       	brcs	.-28     	; 0x28cc <crc16+0x22>

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    28e8:	4f 5f       	subi	r20, 0xFF	; 255
    28ea:	5f 4f       	sbci	r21, 0xFF	; 255
    28ec:	46 17       	cp	r20, r22
    28ee:	57 07       	cpc	r21, r23
    28f0:	10 f3       	brcs	.-60     	; 0x28b6 <crc16+0xc>
				crc = crc << 1;
			}
		}
	}
	return (crc);
}
    28f2:	08 95       	ret

000028f4 <getFRAM_MOTOREncoder>:
	Returns:
		ERROR on FRAM read error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t getFRAM_MOTOREncoder(uint8_t controller, int32_t *encoderValue)
{
    28f4:	0f 93       	push	r16
    28f6:	1f 93       	push	r17
    28f8:	cf 93       	push	r28
    28fa:	df 93       	push	r29
    28fc:	00 d0       	rcall	.+0      	; 0x28fe <getFRAM_MOTOREncoder+0xa>
    28fe:	00 d0       	rcall	.+0      	; 0x2900 <getFRAM_MOTOREncoder+0xc>
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
    2904:	8b 01       	movw	r16, r22

	uint8_t tbuf[4];
	uint16_t framaddr;
	int32_t tempVal;

	switch (controller) {
    2906:	81 38       	cpi	r24, 0x81	; 129
    2908:	59 f0       	breq	.+22     	; 0x2920 <getFRAM_MOTOREncoder+0x2c>
    290a:	82 38       	cpi	r24, 0x82	; 130
    290c:	31 f0       	breq	.+12     	; 0x291a <getFRAM_MOTOREncoder+0x26>
    290e:	80 38       	cpi	r24, 0x80	; 128
    2910:	09 f0       	breq	.+2      	; 0x2914 <getFRAM_MOTOREncoder+0x20>
    2912:	43 c0       	rjmp	.+134    	; 0x299a <getFRAM_MOTOREncoder+0xa6>
		case MOTOR_A:
			framaddr = ENCAFRAMADDR;
    2914:	64 e1       	ldi	r22, 0x14	; 20
    2916:	70 e0       	ldi	r23, 0x00	; 0
    2918:	05 c0       	rjmp	.+10     	; 0x2924 <getFRAM_MOTOREncoder+0x30>
		case MOTOR_B:
			framaddr = ENCBFRAMADDR;
			break;

		case MOTOR_C:
			framaddr = ENCCFRAMADDR;
    291a:	6c e1       	ldi	r22, 0x1C	; 28
    291c:	70 e0       	ldi	r23, 0x00	; 0
			break;
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <getFRAM_MOTOREncoder+0x30>
		case MOTOR_A:
			framaddr = ENCAFRAMADDR;
			break;

		case MOTOR_B:
			framaddr = ENCBFRAMADDR;
    2920:	68 e1       	ldi	r22, 0x18	; 24
    2922:	70 e0       	ldi	r23, 0x00	; 0

		default:
			return(ERROR);
	}

	if (read_FRAM(FRAMTWIADDR, framaddr, tbuf, 4) == ERROR) {
    2924:	24 e0       	ldi	r18, 0x04	; 4
    2926:	ae 01       	movw	r20, r28
    2928:	4f 5f       	subi	r20, 0xFF	; 255
    292a:	5f 4f       	sbci	r21, 0xFF	; 255
    292c:	80 e5       	ldi	r24, 0x50	; 80
    292e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <read_FRAM>
    2932:	83 36       	cpi	r24, 0x63	; 99
    2934:	49 f4       	brne	.+18     	; 0x2948 <getFRAM_MOTOREncoder+0x54>
		*encoderValue = 0xFFFFFFFF;
    2936:	4f ef       	ldi	r20, 0xFF	; 255
    2938:	5f ef       	ldi	r21, 0xFF	; 255
    293a:	ba 01       	movw	r22, r20
    293c:	f8 01       	movw	r30, r16
    293e:	40 83       	st	Z, r20
    2940:	51 83       	std	Z+1, r21	; 0x01
    2942:	62 83       	std	Z+2, r22	; 0x02
    2944:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    2946:	2a c0       	rjmp	.+84     	; 0x299c <getFRAM_MOTOREncoder+0xa8>
	}

	tempVal =  (uint32_t) tbuf[0] << 24;
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	a0 e0       	ldi	r26, 0x00	; 0
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	78 2f       	mov	r23, r24
    2952:	66 27       	eor	r22, r22
    2954:	55 27       	eor	r21, r21
    2956:	44 27       	eor	r20, r20
	tempVal |= (uint32_t) tbuf[1] << 16;
    2958:	9a 81       	ldd	r25, Y+2	; 0x02
    295a:	89 2f       	mov	r24, r25
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	a0 e0       	ldi	r26, 0x00	; 0
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	dc 01       	movw	r26, r24
    2964:	99 27       	eor	r25, r25
    2966:	88 27       	eor	r24, r24
    2968:	84 2b       	or	r24, r20
    296a:	95 2b       	or	r25, r21
    296c:	a6 2b       	or	r26, r22
    296e:	b7 2b       	or	r27, r23
	tempVal |= (uint32_t) tbuf[2] << 8;
    2970:	4b 81       	ldd	r20, Y+3	; 0x03
    2972:	50 e0       	ldi	r21, 0x00	; 0
    2974:	60 e0       	ldi	r22, 0x00	; 0
    2976:	70 e0       	ldi	r23, 0x00	; 0
    2978:	76 2f       	mov	r23, r22
    297a:	65 2f       	mov	r22, r21
    297c:	54 2f       	mov	r21, r20
    297e:	44 27       	eor	r20, r20
    2980:	84 2b       	or	r24, r20
    2982:	95 2b       	or	r25, r21
    2984:	a6 2b       	or	r26, r22
    2986:	b7 2b       	or	r27, r23
	tempVal |= (uint32_t) tbuf[3];
    2988:	2c 81       	ldd	r18, Y+4	; 0x04
    298a:	82 2b       	or	r24, r18
	*encoderValue = tempVal;
    298c:	f8 01       	movw	r30, r16
    298e:	80 83       	st	Z, r24
    2990:	91 83       	std	Z+1, r25	; 0x01
    2992:	a2 83       	std	Z+2, r26	; 0x02
    2994:	b3 83       	std	Z+3, r27	; 0x03
	return(NOERROR);
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	01 c0       	rjmp	.+2      	; 0x299c <getFRAM_MOTOREncoder+0xa8>
		case MOTOR_C:
			framaddr = ENCCFRAMADDR;
			break;

		default:
			return(ERROR);
    299a:	83 e6       	ldi	r24, 0x63	; 99
	tempVal |= (uint32_t) tbuf[2] << 8;
	tempVal |= (uint32_t) tbuf[3];
	*encoderValue = tempVal;
	return(NOERROR);

}
    299c:	24 96       	adiw	r28, 0x04	; 4
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	de bf       	out	0x3e, r29	; 62
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	1f 91       	pop	r17
    29a8:	0f 91       	pop	r16
    29aa:	08 95       	ret

000029ac <get_MOTOREncoder>:
			Bit1: Direction (0=forward, 1-backwards)
			Bit2: Counter overflow (1=overflow occurred, clear after reading)
			Bits 3-7 are "reserved." Bit7 is 1.
------------------------------------------------------------------------------*/
uint8_t get_MOTOREncoder(uint8_t controller, uint8_t command, int32_t *value)
{
    29ac:	ef 92       	push	r14
    29ae:	ff 92       	push	r15
    29b0:	0f 93       	push	r16
    29b2:	1f 93       	push	r17
    29b4:	cf 93       	push	r28
    29b6:	df 93       	push	r29
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	27 97       	sbiw	r28, 0x07	; 7
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	de bf       	out	0x3e, r29	; 62
    29c2:	8a 01       	movw	r16, r20

	uint8_t i, tbuf[7];
	uint16_t crcReceived, crcExpected;

	recv1_buf.nbytes = 7;			// Set up receive buffer
    29c4:	97 e0       	ldi	r25, 0x07	; 7
    29c6:	90 93 15 2b 	sts	0x2B15, r25	; 0x802b15 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    29ca:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv1_buf+0x102>
	recv1_buf.done = NO;
    29ce:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0x103>

	tbuf[0] = controller;			// Build command
    29d2:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;				// ENCODDERCOUNT or ENCODERSPPEED
    29d4:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);			// Send the command
    29d6:	42 e0       	ldi	r20, 0x02	; 2
    29d8:	be 01       	movw	r22, r28
    29da:	6f 5f       	subi	r22, 0xFF	; 255
    29dc:	7f 4f       	sbci	r23, 0xFF	; 255
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	0e 94 38 1a 	call	0x3470	; 0x3470 <send_USART>

	start_TCB0(1);
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	0e 94 19 19 	call	0x3232	; 0x3232 <start_TCB0>
	while (recv1_buf.done == NO) {	// Wait for the reply
    29ec:	11 c0       	rjmp	.+34     	; 0x2a10 <get_MOTOREncoder+0x64>
		if (ticks > 500) {			// Timeout
    29ee:	80 91 13 2a 	lds	r24, 0x2A13	; 0x802a13 <ticks>
    29f2:	90 91 14 2a 	lds	r25, 0x2A14	; 0x802a14 <ticks+0x1>
    29f6:	85 3f       	cpi	r24, 0xF5	; 245
    29f8:	91 40       	sbci	r25, 0x01	; 1
    29fa:	50 f0       	brcs	.+20     	; 0x2a10 <get_MOTOREncoder+0x64>
			stop_TCB0();
    29fc:	0e 94 2f 19 	call	0x325e	; 0x325e <stop_TCB0>
			printError(ERR_MTRREADENC, "get_MOTOREncoder timeout");
    2a00:	69 ed       	ldi	r22, 0xD9	; 217
    2a02:	7c e8       	ldi	r23, 0x8C	; 140
    2a04:	80 e3       	ldi	r24, 0x30	; 48
    2a06:	91 e0       	ldi	r25, 0x01	; 1
    2a08:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			return(ERROR);
    2a0c:	83 e6       	ldi	r24, 0x63	; 99
    2a0e:	76 c0       	rjmp	.+236    	; 0x2afc <get_MOTOREncoder+0x150>
	tbuf[0] = controller;			// Build command
	tbuf[1] = command;				// ENCODDERCOUNT or ENCODERSPPEED
	send_USART(1, tbuf, 2);			// Send the command

	start_TCB0(1);
	while (recv1_buf.done == NO) {	// Wait for the reply
    2a10:	80 91 18 2b 	lds	r24, 0x2B18	; 0x802b18 <recv1_buf+0x103>
    2a14:	88 23       	and	r24, r24
    2a16:	59 f3       	breq	.-42     	; 0x29ee <get_MOTOREncoder+0x42>
			stop_TCB0();
			printError(ERR_MTRREADENC, "get_MOTOREncoder timeout");
			return(ERROR);
		}
	}
	stop_TCB0();
    2a18:	0e 94 2f 19 	call	0x325e	; 0x325e <stop_TCB0>

	crcReceived = (recv1_buf.data[5] << 8) | recv1_buf.data[6];
    2a1c:	e5 e1       	ldi	r30, 0x15	; 21
    2a1e:	fa e2       	ldi	r31, 0x2A	; 42
    2a20:	e5 80       	ldd	r14, Z+5	; 0x05
    2a22:	f1 2c       	mov	r15, r1
    2a24:	fe 2c       	mov	r15, r14
    2a26:	ee 24       	eor	r14, r14
    2a28:	86 81       	ldd	r24, Z+6	; 0x06
    2a2a:	e8 2a       	or	r14, r24

	for (i = 2; i < 7; i++) {		// Compute expected crc value
    2a2c:	22 e0       	ldi	r18, 0x02	; 2
    2a2e:	0e c0       	rjmp	.+28     	; 0x2a4c <get_MOTOREncoder+0xa0>
		tbuf[i] = recv1_buf.data[i-2];
    2a30:	82 2f       	mov	r24, r18
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	fc 01       	movw	r30, r24
    2a36:	ed 5e       	subi	r30, 0xED	; 237
    2a38:	f5 4d       	sbci	r31, 0xD5	; 213
    2a3a:	30 81       	ld	r19, Z
    2a3c:	e1 e0       	ldi	r30, 0x01	; 1
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	ec 0f       	add	r30, r28
    2a42:	fd 1f       	adc	r31, r29
    2a44:	e8 0f       	add	r30, r24
    2a46:	f9 1f       	adc	r31, r25
    2a48:	30 83       	st	Z, r19
	}
	stop_TCB0();

	crcReceived = (recv1_buf.data[5] << 8) | recv1_buf.data[6];

	for (i = 2; i < 7; i++) {		// Compute expected crc value
    2a4a:	2f 5f       	subi	r18, 0xFF	; 255
    2a4c:	27 30       	cpi	r18, 0x07	; 7
    2a4e:	80 f3       	brcs	.-32     	; 0x2a30 <get_MOTOREncoder+0x84>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 7);
    2a50:	67 e0       	ldi	r22, 0x07	; 7
    2a52:	70 e0       	ldi	r23, 0x00	; 0
    2a54:	ce 01       	movw	r24, r28
    2a56:	01 96       	adiw	r24, 0x01	; 1
    2a58:	0e 94 55 14 	call	0x28aa	; 0x28aa <crc16>

	if (crcReceived != crcExpected) {
    2a5c:	e8 16       	cp	r14, r24
    2a5e:	f9 06       	cpc	r15, r25
    2a60:	81 f0       	breq	.+32     	; 0x2a82 <get_MOTOREncoder+0xd6>
		*value = 0xFFFFFFFF;
    2a62:	8f ef       	ldi	r24, 0xFF	; 255
    2a64:	9f ef       	ldi	r25, 0xFF	; 255
    2a66:	dc 01       	movw	r26, r24
    2a68:	f8 01       	movw	r30, r16
    2a6a:	80 83       	st	Z, r24
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	a2 83       	std	Z+2, r26	; 0x02
    2a70:	b3 83       	std	Z+3, r27	; 0x03
		printError(ERR_MTRENCCRC, "get_MOTOREncoder CRC");
    2a72:	62 ef       	ldi	r22, 0xF2	; 242
    2a74:	7c e8       	ldi	r23, 0x8C	; 140
    2a76:	81 e3       	ldi	r24, 0x31	; 49
    2a78:	91 e0       	ldi	r25, 0x01	; 1
    2a7a:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		return(ERROR);
    2a7e:	83 e6       	ldi	r24, 0x63	; 99
    2a80:	3d c0       	rjmp	.+122    	; 0x2afc <get_MOTOREncoder+0x150>
	}

	*value =  (uint32_t) recv1_buf.data[0] << 24;
    2a82:	25 e1       	ldi	r18, 0x15	; 21
    2a84:	3a e2       	ldi	r19, 0x2A	; 42
    2a86:	d9 01       	movw	r26, r18
    2a88:	8c 91       	ld	r24, X
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	a0 e0       	ldi	r26, 0x00	; 0
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	78 2f       	mov	r23, r24
    2a92:	66 27       	eor	r22, r22
    2a94:	55 27       	eor	r21, r21
    2a96:	44 27       	eor	r20, r20
    2a98:	f8 01       	movw	r30, r16
    2a9a:	40 83       	st	Z, r20
    2a9c:	51 83       	std	Z+1, r21	; 0x01
    2a9e:	62 83       	std	Z+2, r22	; 0x02
    2aa0:	73 83       	std	Z+3, r23	; 0x03
	*value |= (uint32_t) recv1_buf.data[1] << 16;
    2aa2:	d9 01       	movw	r26, r18
    2aa4:	11 96       	adiw	r26, 0x01	; 1
    2aa6:	9c 91       	ld	r25, X
    2aa8:	89 2f       	mov	r24, r25
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	a0 e0       	ldi	r26, 0x00	; 0
    2aae:	b0 e0       	ldi	r27, 0x00	; 0
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	99 27       	eor	r25, r25
    2ab4:	88 27       	eor	r24, r24
    2ab6:	84 2b       	or	r24, r20
    2ab8:	95 2b       	or	r25, r21
    2aba:	a6 2b       	or	r26, r22
    2abc:	b7 2b       	or	r27, r23
    2abe:	80 83       	st	Z, r24
    2ac0:	91 83       	std	Z+1, r25	; 0x01
    2ac2:	a2 83       	std	Z+2, r26	; 0x02
    2ac4:	b3 83       	std	Z+3, r27	; 0x03
	*value |= (uint32_t) recv1_buf.data[2] << 8;
    2ac6:	f9 01       	movw	r30, r18
    2ac8:	42 81       	ldd	r20, Z+2	; 0x02
    2aca:	50 e0       	ldi	r21, 0x00	; 0
    2acc:	60 e0       	ldi	r22, 0x00	; 0
    2ace:	70 e0       	ldi	r23, 0x00	; 0
    2ad0:	76 2f       	mov	r23, r22
    2ad2:	65 2f       	mov	r22, r21
    2ad4:	54 2f       	mov	r21, r20
    2ad6:	44 27       	eor	r20, r20
    2ad8:	84 2b       	or	r24, r20
    2ada:	95 2b       	or	r25, r21
    2adc:	a6 2b       	or	r26, r22
    2ade:	b7 2b       	or	r27, r23
    2ae0:	f8 01       	movw	r30, r16
    2ae2:	80 83       	st	Z, r24
    2ae4:	91 83       	std	Z+1, r25	; 0x01
    2ae6:	a2 83       	std	Z+2, r26	; 0x02
    2ae8:	b3 83       	std	Z+3, r27	; 0x03
	*value |= (uint32_t) recv1_buf.data[3];
    2aea:	f9 01       	movw	r30, r18
    2aec:	23 81       	ldd	r18, Z+3	; 0x03
    2aee:	82 2b       	or	r24, r18
    2af0:	f8 01       	movw	r30, r16
    2af2:	80 83       	st	Z, r24
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	a2 83       	std	Z+2, r26	; 0x02
    2af8:	b3 83       	std	Z+3, r27	; 0x03

//	recv1_buf.data[4]; contains direction and overflow flags

	return(NOERROR);
    2afa:	80 e0       	ldi	r24, 0x00	; 0

}
    2afc:	27 96       	adiw	r28, 0x07	; 7
    2afe:	cd bf       	out	0x3d, r28	; 61
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	df 91       	pop	r29
    2b04:	cf 91       	pop	r28
    2b06:	1f 91       	pop	r17
    2b08:	0f 91       	pop	r16
    2b0a:	ff 90       	pop	r15
    2b0c:	ef 90       	pop	r14
    2b0e:	08 95       	ret

00002b10 <get_MOTORFloat>:
	Returns:
		ERROR: USART timeout or CRC check error
		NOERROR
------------------------------------------------------------------------------*/
uint8_t get_MOTORFloat(uint8_t controller, uint8_t command, float *value)
{
    2b10:	af 92       	push	r10
    2b12:	bf 92       	push	r11
    2b14:	cf 92       	push	r12
    2b16:	df 92       	push	r13
    2b18:	ef 92       	push	r14
    2b1a:	ff 92       	push	r15
    2b1c:	0f 93       	push	r16
    2b1e:	1f 93       	push	r17
    2b20:	cf 93       	push	r28
    2b22:	df 93       	push	r29
    2b24:	00 d0       	rcall	.+0      	; 0x2b26 <get_MOTORFloat+0x16>
    2b26:	00 d0       	rcall	.+0      	; 0x2b28 <get_MOTORFloat+0x18>
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	a8 2e       	mov	r10, r24
    2b2e:	b6 2e       	mov	r11, r22
    2b30:	7a 01       	movw	r14, r20
	uint8_t tbuf[4];
	uint16_t tempval, crcReceived, crcExpected;

	recv1_buf.nbytes = 4;				// Set up receive buffer
    2b32:	84 e0       	ldi	r24, 0x04	; 4
    2b34:	80 93 15 2b 	sts	0x2B15, r24	; 0x802b15 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    2b38:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv1_buf+0x102>
	recv1_buf.done = NO;
    2b3c:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0x103>

	tbuf[0] = controller;
    2b40:	a9 82       	std	Y+1, r10	; 0x01
	tbuf[1] = command;
    2b42:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);				// Send command
    2b44:	42 e0       	ldi	r20, 0x02	; 2
    2b46:	be 01       	movw	r22, r28
    2b48:	6f 5f       	subi	r22, 0xFF	; 255
    2b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	0e 94 38 1a 	call	0x3470	; 0x3470 <send_USART>

	start_TCB0(1);
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	0e 94 19 19 	call	0x3232	; 0x3232 <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
    2b5a:	80 91 18 2b 	lds	r24, 0x2B18	; 0x802b18 <recv1_buf+0x103>
    2b5e:	81 30       	cpi	r24, 0x01	; 1
    2b60:	81 f0       	breq	.+32     	; 0x2b82 <get_MOTORFloat+0x72>
			break;
		}
		if (ticks > 50) {				// Timeout
    2b62:	80 91 13 2a 	lds	r24, 0x2A13	; 0x802a13 <ticks>
    2b66:	90 91 14 2a 	lds	r25, 0x2A14	; 0x802a14 <ticks+0x1>
    2b6a:	c3 97       	sbiw	r24, 0x33	; 51
    2b6c:	b0 f3       	brcs	.-20     	; 0x2b5a <get_MOTORFloat+0x4a>
			stop_TCB0();
    2b6e:	0e 94 2f 19 	call	0x325e	; 0x325e <stop_TCB0>
			printError(ERR_MTRREADENC, "ROBOFloat timeout");
    2b72:	67 e0       	ldi	r22, 0x07	; 7
    2b74:	7d e8       	ldi	r23, 0x8D	; 141
    2b76:	80 e3       	ldi	r24, 0x30	; 48
    2b78:	91 e0       	ldi	r25, 0x01	; 1
    2b7a:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			return(ERROR);
    2b7e:	83 e6       	ldi	r24, 0x63	; 99
    2b80:	37 c0       	rjmp	.+110    	; 0x2bf0 <get_MOTORFloat+0xe0>
		}
	}
	stop_TCB0();
    2b82:	0e 94 2f 19 	call	0x325e	; 0x325e <stop_TCB0>

	tempval = (recv1_buf.data[0] << 8) | recv1_buf.data[1];
    2b86:	e5 e1       	ldi	r30, 0x15	; 21
    2b88:	fa e2       	ldi	r31, 0x2A	; 42
    2b8a:	90 81       	ld	r25, Z
    2b8c:	c9 2e       	mov	r12, r25
    2b8e:	d1 2c       	mov	r13, r1
    2b90:	dc 2c       	mov	r13, r12
    2b92:	cc 24       	eor	r12, r12
    2b94:	81 81       	ldd	r24, Z+1	; 0x01
    2b96:	c8 2a       	or	r12, r24
	crcReceived = (recv1_buf.data[2] << 8) | recv1_buf.data[3];
    2b98:	02 81       	ldd	r16, Z+2	; 0x02
    2b9a:	10 e0       	ldi	r17, 0x00	; 0
    2b9c:	10 2f       	mov	r17, r16
    2b9e:	00 27       	eor	r16, r16
    2ba0:	23 81       	ldd	r18, Z+3	; 0x03
    2ba2:	02 2b       	or	r16, r18

	tbuf[0] = controller;
    2ba4:	a9 82       	std	Y+1, r10	; 0x01
	tbuf[1] = command;
    2ba6:	ba 82       	std	Y+2, r11	; 0x02
	tbuf[2] = recv1_buf.data[0];
    2ba8:	9b 83       	std	Y+3, r25	; 0x03
	tbuf[3] = recv1_buf.data[1];
    2baa:	8c 83       	std	Y+4, r24	; 0x04
	crcExpected = crc16(tbuf, 4);
    2bac:	64 e0       	ldi	r22, 0x04	; 4
    2bae:	70 e0       	ldi	r23, 0x00	; 0
    2bb0:	ce 01       	movw	r24, r28
    2bb2:	01 96       	adiw	r24, 0x01	; 1
    2bb4:	0e 94 55 14 	call	0x28aa	; 0x28aa <crc16>

	if (crcExpected != crcReceived) {
    2bb8:	08 17       	cp	r16, r24
    2bba:	19 07       	cpc	r17, r25
    2bbc:	41 f0       	breq	.+16     	; 0x2bce <get_MOTORFloat+0xbe>
		printError(ERR_MTRENCCRC, "get_MOTORFloat CRC");
    2bbe:	69 e1       	ldi	r22, 0x19	; 25
    2bc0:	7d e8       	ldi	r23, 0x8D	; 141
    2bc2:	81 e3       	ldi	r24, 0x31	; 49
    2bc4:	91 e0       	ldi	r25, 0x01	; 1
    2bc6:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		return(ERROR);
    2bca:	83 e6       	ldi	r24, 0x63	; 99
    2bcc:	11 c0       	rjmp	.+34     	; 0x2bf0 <get_MOTORFloat+0xe0>
	} else {
		*value = ((float) tempval / 10.0);
    2bce:	b6 01       	movw	r22, r12
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <__floatunsisf>
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	40 e2       	ldi	r20, 0x20	; 32
    2bde:	51 e4       	ldi	r21, 0x41	; 65
    2be0:	0e 94 cd 1c 	call	0x399a	; 0x399a <__divsf3>
    2be4:	f7 01       	movw	r30, r14
    2be6:	60 83       	st	Z, r22
    2be8:	71 83       	std	Z+1, r23	; 0x01
    2bea:	82 83       	std	Z+2, r24	; 0x02
    2bec:	93 83       	std	Z+3, r25	; 0x03
		return(NOERROR);
    2bee:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2bf0:	24 96       	adiw	r28, 0x04	; 4
    2bf2:	cd bf       	out	0x3d, r28	; 61
    2bf4:	de bf       	out	0x3e, r29	; 62
    2bf6:	df 91       	pop	r29
    2bf8:	cf 91       	pop	r28
    2bfa:	1f 91       	pop	r17
    2bfc:	0f 91       	pop	r16
    2bfe:	ff 90       	pop	r15
    2c00:	ef 90       	pop	r14
    2c02:	df 90       	pop	r13
    2c04:	cf 90       	pop	r12
    2c06:	bf 90       	pop	r11
    2c08:	af 90       	pop	r10
    2c0a:	08 95       	ret

00002c0c <get_MOTORInt32>:
	Returns:
		ERROR: USART timeout or CRC error
		NOERROR
------------------------------------------------------------------------------*/
uint8_t get_MOTORInt32(uint8_t controller, uint8_t command, uint32_t *value)
{
    2c0c:	ef 92       	push	r14
    2c0e:	ff 92       	push	r15
    2c10:	0f 93       	push	r16
    2c12:	1f 93       	push	r17
    2c14:	cf 93       	push	r28
    2c16:	df 93       	push	r29
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	26 97       	sbiw	r28, 0x06	; 6
    2c1e:	cd bf       	out	0x3d, r28	; 61
    2c20:	de bf       	out	0x3e, r29	; 62
    2c22:	8a 01       	movw	r16, r20
	uint8_t i, tbuf[6];
	uint16_t crcReceived, crcExpected;
	uint32_t tempval;

	recv1_buf.nbytes = 6;				// Set up receive buffer
    2c24:	96 e0       	ldi	r25, 0x06	; 6
    2c26:	90 93 15 2b 	sts	0x2B15, r25	; 0x802b15 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    2c2a:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv1_buf+0x102>
	recv1_buf.done = NO;
    2c2e:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0x103>

	tbuf[0] = controller;
    2c32:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    2c34:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);				// Send command
    2c36:	42 e0       	ldi	r20, 0x02	; 2
    2c38:	be 01       	movw	r22, r28
    2c3a:	6f 5f       	subi	r22, 0xFF	; 255
    2c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	0e 94 38 1a 	call	0x3470	; 0x3470 <send_USART>

	start_TCB0(1);
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	0e 94 19 19 	call	0x3232	; 0x3232 <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
    2c4c:	80 91 18 2b 	lds	r24, 0x2B18	; 0x802b18 <recv1_buf+0x103>
    2c50:	81 30       	cpi	r24, 0x01	; 1
    2c52:	61 f4       	brne	.+24     	; 0x2c6c <get_MOTORInt32+0x60>
			stop_TCB0();
    2c54:	0e 94 2f 19 	call	0x325e	; 0x325e <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "get_MOTORInt32 timeout");
			return(ERROR);
		}
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];
    2c58:	e5 e1       	ldi	r30, 0x15	; 21
    2c5a:	fa e2       	ldi	r31, 0x2A	; 42
    2c5c:	e4 80       	ldd	r14, Z+4	; 0x04
    2c5e:	f1 2c       	mov	r15, r1
    2c60:	fe 2c       	mov	r15, r14
    2c62:	ee 24       	eor	r14, r14
    2c64:	85 81       	ldd	r24, Z+5	; 0x05
    2c66:	e8 2a       	or	r14, r24

	for (i = 2; i < 6; i++) {			// Compute expected CRC
    2c68:	22 e0       	ldi	r18, 0x02	; 2
    2c6a:	1e c0       	rjmp	.+60     	; 0x2ca8 <get_MOTORInt32+0x9c>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// Timeout
    2c6c:	80 91 13 2a 	lds	r24, 0x2A13	; 0x802a13 <ticks>
    2c70:	90 91 14 2a 	lds	r25, 0x2A14	; 0x802a14 <ticks+0x1>
    2c74:	c3 97       	sbiw	r24, 0x33	; 51
    2c76:	50 f3       	brcs	.-44     	; 0x2c4c <get_MOTORInt32+0x40>
			stop_TCB0();
    2c78:	0e 94 2f 19 	call	0x325e	; 0x325e <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "get_MOTORInt32 timeout");
    2c7c:	6c e2       	ldi	r22, 0x2C	; 44
    2c7e:	7d e8       	ldi	r23, 0x8D	; 141
    2c80:	8f e2       	ldi	r24, 0x2F	; 47
    2c82:	91 e0       	ldi	r25, 0x01	; 1
    2c84:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			return(ERROR);
    2c88:	83 e6       	ldi	r24, 0x63	; 99
    2c8a:	53 c0       	rjmp	.+166    	; 0x2d32 <get_MOTORInt32+0x126>
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {			// Compute expected CRC
		tbuf[i] = recv1_buf.data[i-2];
    2c8c:	82 2f       	mov	r24, r18
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	fc 01       	movw	r30, r24
    2c92:	ed 5e       	subi	r30, 0xED	; 237
    2c94:	f5 4d       	sbci	r31, 0xD5	; 213
    2c96:	30 81       	ld	r19, Z
    2c98:	e1 e0       	ldi	r30, 0x01	; 1
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	ec 0f       	add	r30, r28
    2c9e:	fd 1f       	adc	r31, r29
    2ca0:	e8 0f       	add	r30, r24
    2ca2:	f9 1f       	adc	r31, r25
    2ca4:	30 83       	st	Z, r19
		}
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {			// Compute expected CRC
    2ca6:	2f 5f       	subi	r18, 0xFF	; 255
    2ca8:	26 30       	cpi	r18, 0x06	; 6
    2caa:	80 f3       	brcs	.-32     	; 0x2c8c <get_MOTORInt32+0x80>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 6);
    2cac:	66 e0       	ldi	r22, 0x06	; 6
    2cae:	70 e0       	ldi	r23, 0x00	; 0
    2cb0:	ce 01       	movw	r24, r28
    2cb2:	01 96       	adiw	r24, 0x01	; 1
    2cb4:	0e 94 55 14 	call	0x28aa	; 0x28aa <crc16>

	if (crcReceived != crcExpected) {
    2cb8:	e8 16       	cp	r14, r24
    2cba:	f9 06       	cpc	r15, r25
    2cbc:	81 f0       	breq	.+32     	; 0x2cde <get_MOTORInt32+0xd2>
		printError(ERR_MTRENCCRC, "get_MOTORInt32 CRC error");
    2cbe:	63 e4       	ldi	r22, 0x43	; 67
    2cc0:	7d e8       	ldi	r23, 0x8D	; 141
    2cc2:	81 e3       	ldi	r24, 0x31	; 49
    2cc4:	91 e0       	ldi	r25, 0x01	; 1
    2cc6:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		*value = 0xFFFFFFFF;
    2cca:	8f ef       	ldi	r24, 0xFF	; 255
    2ccc:	9f ef       	ldi	r25, 0xFF	; 255
    2cce:	dc 01       	movw	r26, r24
    2cd0:	f8 01       	movw	r30, r16
    2cd2:	80 83       	st	Z, r24
    2cd4:	91 83       	std	Z+1, r25	; 0x01
    2cd6:	a2 83       	std	Z+2, r26	; 0x02
    2cd8:	b3 83       	std	Z+3, r27	; 0x03
		return(ERROR);
    2cda:	83 e6       	ldi	r24, 0x63	; 99
    2cdc:	2a c0       	rjmp	.+84     	; 0x2d32 <get_MOTORInt32+0x126>
	}

	tempval =  (uint32_t) recv1_buf.data[0] << 24;
    2cde:	e5 e1       	ldi	r30, 0x15	; 21
    2ce0:	fa e2       	ldi	r31, 0x2A	; 42
    2ce2:	80 81       	ld	r24, Z
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	a0 e0       	ldi	r26, 0x00	; 0
    2ce8:	b0 e0       	ldi	r27, 0x00	; 0
    2cea:	78 2f       	mov	r23, r24
    2cec:	66 27       	eor	r22, r22
    2cee:	55 27       	eor	r21, r21
    2cf0:	44 27       	eor	r20, r20
	tempval |= (uint32_t) recv1_buf.data[1] << 16;
    2cf2:	91 81       	ldd	r25, Z+1	; 0x01
    2cf4:	89 2f       	mov	r24, r25
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	a0 e0       	ldi	r26, 0x00	; 0
    2cfa:	b0 e0       	ldi	r27, 0x00	; 0
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	99 27       	eor	r25, r25
    2d00:	88 27       	eor	r24, r24
    2d02:	84 2b       	or	r24, r20
    2d04:	95 2b       	or	r25, r21
    2d06:	a6 2b       	or	r26, r22
    2d08:	b7 2b       	or	r27, r23
	tempval |= (uint32_t) recv1_buf.data[2] << 8;
    2d0a:	42 81       	ldd	r20, Z+2	; 0x02
    2d0c:	50 e0       	ldi	r21, 0x00	; 0
    2d0e:	60 e0       	ldi	r22, 0x00	; 0
    2d10:	70 e0       	ldi	r23, 0x00	; 0
    2d12:	76 2f       	mov	r23, r22
    2d14:	65 2f       	mov	r22, r21
    2d16:	54 2f       	mov	r21, r20
    2d18:	44 27       	eor	r20, r20
    2d1a:	84 2b       	or	r24, r20
    2d1c:	95 2b       	or	r25, r21
    2d1e:	a6 2b       	or	r26, r22
    2d20:	b7 2b       	or	r27, r23
	tempval |= (uint32_t) recv1_buf.data[3];
    2d22:	23 81       	ldd	r18, Z+3	; 0x03
    2d24:	82 2b       	or	r24, r18
	*value = tempval;
    2d26:	f8 01       	movw	r30, r16
    2d28:	80 83       	st	Z, r24
    2d2a:	91 83       	std	Z+1, r25	; 0x01
    2d2c:	a2 83       	std	Z+2, r26	; 0x02
    2d2e:	b3 83       	std	Z+3, r27	; 0x03

	return(NOERROR);
    2d30:	80 e0       	ldi	r24, 0x00	; 0

}
    2d32:	26 96       	adiw	r28, 0x06	; 6
    2d34:	cd bf       	out	0x3d, r28	; 61
    2d36:	de bf       	out	0x3e, r29	; 62
    2d38:	df 91       	pop	r29
    2d3a:	cf 91       	pop	r28
    2d3c:	1f 91       	pop	r17
    2d3e:	0f 91       	pop	r16
    2d40:	ff 90       	pop	r15
    2d42:	ef 90       	pop	r14
    2d44:	08 95       	ret

00002d46 <motorsMoving>:

	return(NOERROR);
}

uint8_t motorsMoving(void)
{
    2d46:	1f 93       	push	r17
    2d48:	cf 93       	push	r28
    2d4a:	df 93       	push	r29
    2d4c:	00 d0       	rcall	.+0      	; 0x2d4e <motorsMoving+0x8>
    2d4e:	00 d0       	rcall	.+0      	; 0x2d50 <motorsMoving+0xa>
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int32_t encoderSpeed;

	for (i = MOTOR_A; i <= MOTOR_C; i++) {
    2d54:	10 e8       	ldi	r17, 0x80	; 128
    2d56:	10 c0       	rjmp	.+32     	; 0x2d78 <motorsMoving+0x32>
		get_MOTOREncoder(i, ENCODERSPEED, &encoderSpeed);
    2d58:	ae 01       	movw	r20, r28
    2d5a:	4f 5f       	subi	r20, 0xFF	; 255
    2d5c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d5e:	62 e1       	ldi	r22, 0x12	; 18
    2d60:	81 2f       	mov	r24, r17
    2d62:	0e 94 d6 14 	call	0x29ac	; 0x29ac <get_MOTOREncoder>
		if (encoderSpeed) {
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6a:	ab 81       	ldd	r26, Y+3	; 0x03
    2d6c:	bc 81       	ldd	r27, Y+4	; 0x04
    2d6e:	89 2b       	or	r24, r25
    2d70:	8a 2b       	or	r24, r26
    2d72:	8b 2b       	or	r24, r27
    2d74:	29 f4       	brne	.+10     	; 0x2d80 <motorsMoving+0x3a>
uint8_t motorsMoving(void)
{
	uint8_t i;
	int32_t encoderSpeed;

	for (i = MOTOR_A; i <= MOTOR_C; i++) {
    2d76:	1f 5f       	subi	r17, 0xFF	; 255
    2d78:	13 38       	cpi	r17, 0x83	; 131
    2d7a:	70 f3       	brcs	.-36     	; 0x2d58 <motorsMoving+0x12>
		if (encoderSpeed) {
			return(YES);
		}
	}

	return(NO);
    2d7c:	80 e0       	ldi	r24, 0x00	; 0
    2d7e:	01 c0       	rjmp	.+2      	; 0x2d82 <motorsMoving+0x3c>
	int32_t encoderSpeed;

	for (i = MOTOR_A; i <= MOTOR_C; i++) {
		get_MOTOREncoder(i, ENCODERSPEED, &encoderSpeed);
		if (encoderSpeed) {
			return(YES);
    2d80:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	return(NO);

}
    2d82:	24 96       	adiw	r28, 0x04	; 4
    2d84:	cd bf       	out	0x3d, r28	; 61
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	df 91       	pop	r29
    2d8a:	cf 91       	pop	r28
    2d8c:	1f 91       	pop	r17
    2d8e:	08 95       	ret

00002d90 <move_MOTORAbsolute>:
	Returns:
		ERROR on USART timeout or bad (not 0xFF) ack
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTORAbsolute(uint8_t controller, int32_t newPosition)
{
    2d90:	cf 93       	push	r28
    2d92:	df 93       	push	r29
    2d94:	cd b7       	in	r28, 0x3d	; 61
    2d96:	de b7       	in	r29, 0x3e	; 62
    2d98:	65 97       	sbiw	r28, 0x15	; 21
    2d9a:	cd bf       	out	0x3d, r28	; 61
    2d9c:	de bf       	out	0x3e, r29	; 62
	acceleration = ACCELERATION;
	deceleration = DECELERATION;
	speed = SPEED;
	buffer = 0;							// 0 -> command is buffered

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    2d9e:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <recv1_buf>
	recv1_buf.nbytes = 1;
    2da2:	91 e0       	ldi	r25, 0x01	; 1
    2da4:	90 93 15 2b 	sts	0x2B15, r25	; 0x802b15 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    2da8:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv1_buf+0x102>
	recv1_buf.done = NO;
    2dac:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0x103>

	tbuf[0] = controller;
    2db0:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBODRIVETO;				// Command 65
    2db2:	81 e4       	ldi	r24, 0x41	; 65
    2db4:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (acceleration >> 24) & 0XFF;
    2db6:	1b 82       	std	Y+3, r1	; 0x03
	tbuf[3] = (acceleration >> 16) & 0xFF;
    2db8:	1c 82       	std	Y+4, r1	; 0x04
	tbuf[4] = (acceleration >> 8) & 0xFF;
    2dba:	80 e2       	ldi	r24, 0x20	; 32
    2dbc:	8d 83       	std	Y+5, r24	; 0x05
	tbuf[5] = (acceleration) & 0xFF;
    2dbe:	1e 82       	std	Y+6, r1	; 0x06
	tbuf[6] = (speed >> 24) & 0xFF;
    2dc0:	1f 82       	std	Y+7, r1	; 0x07
	tbuf[7] = (speed >> 16) & 0xFF;
    2dc2:	18 86       	std	Y+8, r1	; 0x08
	tbuf[8] = (speed >> 8) & 0xFF;
    2dc4:	90 e4       	ldi	r25, 0x40	; 64
    2dc6:	99 87       	std	Y+9, r25	; 0x09
	tbuf[9] = (speed) & 0xFF;
    2dc8:	1a 86       	std	Y+10, r1	; 0x0a
	tbuf[10] = (deceleration >> 24) & 0xFF;
    2dca:	1b 86       	std	Y+11, r1	; 0x0b
	tbuf[11] = (deceleration >> 16) & 0xFF;
    2dcc:	1c 86       	std	Y+12, r1	; 0x0c
	tbuf[12] = (deceleration >> 8) & 0xFF;
    2dce:	8d 87       	std	Y+13, r24	; 0x0d
	tbuf[13] = (deceleration) & 0xFF;
    2dd0:	1e 86       	std	Y+14, r1	; 0x0e
	tbuf[14] = (newPosition >> 24) & 0xFF;
    2dd2:	7f 87       	std	Y+15, r23	; 0x0f
	tbuf[15] = (newPosition >> 16) & 0xFF;
    2dd4:	68 8b       	std	Y+16, r22	; 0x10
	tbuf[16] = (newPosition >> 8) & 0xFF;
    2dd6:	59 8b       	std	Y+17, r21	; 0x11
	tbuf[17] = (newPosition) & 0xFF;
    2dd8:	4a 8b       	std	Y+18, r20	; 0x12
	tbuf[18] = buffer;
    2dda:	1b 8a       	std	Y+19, r1	; 0x13
	crc = crc16(tbuf, 19);
    2ddc:	63 e1       	ldi	r22, 0x13	; 19
    2dde:	70 e0       	ldi	r23, 0x00	; 0
    2de0:	ce 01       	movw	r24, r28
    2de2:	01 96       	adiw	r24, 0x01	; 1
    2de4:	0e 94 55 14 	call	0x28aa	; 0x28aa <crc16>
	tbuf[19] = (crc >> 8) & 0xFF;
    2de8:	9c 8b       	std	Y+20, r25	; 0x14
	tbuf[20] = crc & 0xFF;
    2dea:	8d 8b       	std	Y+21, r24	; 0x15

	send_USART(1, tbuf, 21);			// Send command
    2dec:	45 e1       	ldi	r20, 0x15	; 21
    2dee:	be 01       	movw	r22, r28
    2df0:	6f 5f       	subi	r22, 0xFF	; 255
    2df2:	7f 4f       	sbci	r23, 0xFF	; 255
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	0e 94 38 1a 	call	0x3470	; 0x3470 <send_USART>

	start_TCB0(1);						// Start 1 ms ticks timer
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	0e 94 19 19 	call	0x3232	; 0x3232 <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    2e02:	80 91 18 2b 	lds	r24, 0x2B18	; 0x802b18 <recv1_buf+0x103>
    2e06:	81 30       	cpi	r24, 0x01	; 1
    2e08:	41 f4       	brne	.+16     	; 0x2e1a <move_MOTORAbsolute+0x8a>
			stop_TCB0();
    2e0a:	0e 94 2f 19 	call	0x325e	; 0x325e <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute timeout");
			return(ERROR);
		}
	}

	if (recv1_buf.data[0] != 0xFF) {
    2e0e:	80 91 15 2a 	lds	r24, 0x2A15	; 0x802a15 <recv1_buf>
    2e12:	8f 3f       	cpi	r24, 0xFF	; 255
    2e14:	91 f4       	brne	.+36     	; 0x2e3a <move_MOTORAbsolute+0xaa>
		printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute ack");		
		return(ERROR);
	}

	return(NOERROR);
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	17 c0       	rjmp	.+46     	; 0x2e48 <move_MOTORAbsolute+0xb8>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// 4 ms just barely works at 38400 baud
    2e1a:	80 91 13 2a 	lds	r24, 0x2A13	; 0x802a13 <ticks>
    2e1e:	90 91 14 2a 	lds	r25, 0x2A14	; 0x802a14 <ticks+0x1>
    2e22:	c3 97       	sbiw	r24, 0x33	; 51
    2e24:	70 f3       	brcs	.-36     	; 0x2e02 <move_MOTORAbsolute+0x72>
			stop_TCB0();
    2e26:	0e 94 2f 19 	call	0x325e	; 0x325e <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute timeout");
    2e2a:	6c e5       	ldi	r22, 0x5C	; 92
    2e2c:	7d e8       	ldi	r23, 0x8D	; 141
    2e2e:	8f e2       	ldi	r24, 0x2F	; 47
    2e30:	91 e0       	ldi	r25, 0x01	; 1
    2e32:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			return(ERROR);
    2e36:	83 e6       	ldi	r24, 0x63	; 99
    2e38:	07 c0       	rjmp	.+14     	; 0x2e48 <move_MOTORAbsolute+0xb8>
		}
	}

	if (recv1_buf.data[0] != 0xFF) {
		printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute ack");		
    2e3a:	67 e7       	ldi	r22, 0x77	; 119
    2e3c:	7d e8       	ldi	r23, 0x8D	; 141
    2e3e:	8f e2       	ldi	r24, 0x2F	; 47
    2e40:	91 e0       	ldi	r25, 0x01	; 1
    2e42:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		return(ERROR);
    2e46:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);
}
    2e48:	65 96       	adiw	r28, 0x15	; 21
    2e4a:	cd bf       	out	0x3d, r28	; 61
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	df 91       	pop	r29
    2e50:	cf 91       	pop	r28
    2e52:	08 95       	ret

00002e54 <move_MOTOR>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR(uint8_t cstack)
{
    2e54:	cf 92       	push	r12
    2e56:	df 92       	push	r13
    2e58:	ef 92       	push	r14
    2e5a:	ff 92       	push	r15
    2e5c:	1f 93       	push	r17
    2e5e:	cf 93       	push	r28
    2e60:	df 93       	push	r29
    2e62:	00 d0       	rcall	.+0      	; 0x2e64 <move_MOTOR+0x10>
    2e64:	00 d0       	rcall	.+0      	; 0x2e66 <move_MOTOR+0x12>
    2e66:	cd b7       	in	r28, 0x3d	; 61
    2e68:	de b7       	in	r29, 0x3e	; 62

	uint8_t motor, controller, retval;
	int32_t newPosition, currentPosition;

	motor = pcmd[cstack].cobject;
    2e6a:	e8 2e       	mov	r14, r24
    2e6c:	f1 2c       	mov	r15, r1
    2e6e:	84 e3       	ldi	r24, 0x34	; 52
    2e70:	8e 9d       	mul	r24, r14
    2e72:	f0 01       	movw	r30, r0
    2e74:	8f 9d       	mul	r24, r15
    2e76:	f0 0d       	add	r31, r0
    2e78:	11 24       	eor	r1, r1
    2e7a:	ed 5f       	subi	r30, 0xFD	; 253
    2e7c:	f7 4d       	sbci	r31, 0xD7	; 215
    2e7e:	81 81       	ldd	r24, Z+1	; 0x01
	switch(motor) {
    2e80:	81 34       	cpi	r24, 0x41	; 65
    2e82:	d0 f0       	brcs	.+52     	; 0x2eb8 <move_MOTOR+0x64>
    2e84:	84 34       	cpi	r24, 0x44	; 68
    2e86:	28 f0       	brcs	.+10     	; 0x2e92 <move_MOTOR+0x3e>
    2e88:	9f e9       	ldi	r25, 0x9F	; 159
    2e8a:	98 0f       	add	r25, r24
    2e8c:	93 30       	cpi	r25, 0x03	; 3
    2e8e:	40 f0       	brcs	.+16     	; 0x2ea0 <move_MOTOR+0x4c>
    2e90:	13 c0       	rjmp	.+38     	; 0x2eb8 <move_MOTOR+0x64>
		case 'A':
		case 'B':
		case 'C':
			controller = motor + 63;
    2e92:	1f e3       	ldi	r17, 0x3F	; 63
    2e94:	18 0f       	add	r17, r24
			currentPosition = 0;
    2e96:	19 82       	std	Y+1, r1	; 0x01
    2e98:	1a 82       	std	Y+2, r1	; 0x02
    2e9a:	1b 82       	std	Y+3, r1	; 0x03
    2e9c:	1c 82       	std	Y+4, r1	; 0x04
			break;
    2e9e:	14 c0       	rjmp	.+40     	; 0x2ec8 <move_MOTOR+0x74>

		case 'a':
		case 'b':
		case 'c':
			controller = motor + 31;
    2ea0:	1f e1       	ldi	r17, 0x1F	; 31
    2ea2:	18 0f       	add	r17, r24
			retval = get_MOTOREncoder(controller, ENCODERCOUNT, &currentPosition);
    2ea4:	ae 01       	movw	r20, r28
    2ea6:	4f 5f       	subi	r20, 0xFF	; 255
    2ea8:	5f 4f       	sbci	r21, 0xFF	; 255
    2eaa:	60 e1       	ldi	r22, 0x10	; 16
    2eac:	81 2f       	mov	r24, r17
    2eae:	0e 94 d6 14 	call	0x29ac	; 0x29ac <get_MOTOREncoder>
			if (retval == ERROR) {
    2eb2:	83 36       	cpi	r24, 0x63	; 99
    2eb4:	49 f4       	brne	.+18     	; 0x2ec8 <move_MOTOR+0x74>
    2eb6:	39 c0       	rjmp	.+114    	; 0x2f2a <move_MOTOR+0xd6>
				return(ERROR);
			}
			break;

		default:
			printError(ERR_UNKNOWNMTR, "move_MOTOR unknown motor");
    2eb8:	6e e8       	ldi	r22, 0x8E	; 142
    2eba:	7d e8       	ldi	r23, 0x8D	; 141
    2ebc:	8d e2       	ldi	r24, 0x2D	; 45
    2ebe:	91 e0       	ldi	r25, 0x01	; 1
    2ec0:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			return(ERROR);
    2ec4:	83 e6       	ldi	r24, 0x63	; 99
    2ec6:	32 c0       	rjmp	.+100    	; 0x2f2c <move_MOTOR+0xd8>
			break;	
	}

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    2ec8:	84 e3       	ldi	r24, 0x34	; 52
    2eca:	8e 9d       	mul	r24, r14
    2ecc:	f0 01       	movw	r30, r0
    2ece:	8f 9d       	mul	r24, r15
    2ed0:	f0 0d       	add	r31, r0
    2ed2:	11 24       	eor	r1, r1
    2ed4:	ed 5f       	subi	r30, 0xFD	; 253
    2ed6:	f7 4d       	sbci	r31, 0xD7	; 215
    2ed8:	82 81       	ldd	r24, Z+2	; 0x02
    2eda:	81 11       	cpse	r24, r1
    2edc:	08 c0       	rjmp	.+16     	; 0x2eee <move_MOTOR+0x9a>
		printError(ERR_MTRNULLMOVE, "move_MOTOR no position or increment");
    2ede:	67 ea       	ldi	r22, 0xA7	; 167
    2ee0:	7d e8       	ldi	r23, 0x8D	; 141
    2ee2:	83 e3       	ldi	r24, 0x33	; 51
    2ee4:	91 e0       	ldi	r25, 0x01	; 1
    2ee6:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		return(ERROR);
    2eea:	83 e6       	ldi	r24, 0x63	; 99
    2eec:	1f c0       	rjmp	.+62     	; 0x2f2c <move_MOTOR+0xd8>
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);
    2eee:	24 e3       	ldi	r18, 0x34	; 52
    2ef0:	2e 9d       	mul	r18, r14
    2ef2:	c0 01       	movw	r24, r0
    2ef4:	2f 9d       	mul	r18, r15
    2ef6:	90 0d       	add	r25, r0
    2ef8:	11 24       	eor	r1, r1
    2efa:	8b 5f       	subi	r24, 0xFB	; 251
    2efc:	97 4d       	sbci	r25, 0xD7	; 215
    2efe:	0e 94 9a 22 	call	0x4534	; 0x4534 <atol>
    2f02:	9b 01       	movw	r18, r22
    2f04:	ac 01       	movw	r20, r24
    2f06:	ac e0       	ldi	r26, 0x0C	; 12
    2f08:	b1 e0       	ldi	r27, 0x01	; 1
    2f0a:	0e 94 19 22 	call	0x4432	; 0x4432 <__muluhisi3>
    2f0e:	c9 80       	ldd	r12, Y+1	; 0x01
    2f10:	da 80       	ldd	r13, Y+2	; 0x02
    2f12:	eb 80       	ldd	r14, Y+3	; 0x03
    2f14:	fc 80       	ldd	r15, Y+4	; 0x04
    2f16:	ab 01       	movw	r20, r22
    2f18:	bc 01       	movw	r22, r24
    2f1a:	4c 0d       	add	r20, r12
    2f1c:	5d 1d       	adc	r21, r13
    2f1e:	6e 1d       	adc	r22, r14
    2f20:	7f 1d       	adc	r23, r15
	return(move_MOTORAbsolute(controller, newPosition));
    2f22:	81 2f       	mov	r24, r17
    2f24:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <move_MOTORAbsolute>
    2f28:	01 c0       	rjmp	.+2      	; 0x2f2c <move_MOTOR+0xd8>
		case 'b':
		case 'c':
			controller = motor + 31;
			retval = get_MOTOREncoder(controller, ENCODERCOUNT, &currentPosition);
			if (retval == ERROR) {
				return(ERROR);
    2f2a:	83 e6       	ldi	r24, 0x63	; 99
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);
	return(move_MOTORAbsolute(controller, newPosition));

}
    2f2c:	24 96       	adiw	r28, 0x04	; 4
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	de bf       	out	0x3e, r29	; 62
    2f32:	df 91       	pop	r29
    2f34:	cf 91       	pop	r28
    2f36:	1f 91       	pop	r17
    2f38:	ff 90       	pop	r15
    2f3a:	ef 90       	pop	r14
    2f3c:	df 90       	pop	r13
    2f3e:	cf 90       	pop	r12
    2f40:	08 95       	ret

00002f42 <putFRAM_MOTOREncoder>:
	Returns:
		ERROR on get_MOTOREncoder or write_FRAM failure
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t putFRAM_MOTOREncoder(uint8_t controller)
{
    2f42:	0f 93       	push	r16
    2f44:	1f 93       	push	r17
    2f46:	cf 93       	push	r28
    2f48:	df 93       	push	r29
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
    2f4e:	28 97       	sbiw	r28, 0x08	; 8
    2f50:	cd bf       	out	0x3d, r28	; 61
    2f52:	de bf       	out	0x3e, r29	; 62

	uint8_t tbuf[4];
	uint16_t memaddr;
	int32_t encoderValue;

	switch (controller) {
    2f54:	81 38       	cpi	r24, 0x81	; 129
    2f56:	51 f0       	breq	.+20     	; 0x2f6c <putFRAM_MOTOREncoder+0x2a>
    2f58:	82 38       	cpi	r24, 0x82	; 130
    2f5a:	29 f0       	breq	.+10     	; 0x2f66 <putFRAM_MOTOREncoder+0x24>
    2f5c:	80 38       	cpi	r24, 0x80	; 128
    2f5e:	f9 f4       	brne	.+62     	; 0x2f9e <putFRAM_MOTOREncoder+0x5c>
		case MOTOR_A:
			memaddr = ENCAFRAMADDR;
    2f60:	04 e1       	ldi	r16, 0x14	; 20
    2f62:	10 e0       	ldi	r17, 0x00	; 0
    2f64:	05 c0       	rjmp	.+10     	; 0x2f70 <putFRAM_MOTOREncoder+0x2e>
		case MOTOR_B:
			memaddr = ENCBFRAMADDR;
			break;

		case MOTOR_C:
			memaddr = ENCCFRAMADDR;
    2f66:	0c e1       	ldi	r16, 0x1C	; 28
    2f68:	10 e0       	ldi	r17, 0x00	; 0
			break;
    2f6a:	02 c0       	rjmp	.+4      	; 0x2f70 <putFRAM_MOTOREncoder+0x2e>
		case MOTOR_A:
			memaddr = ENCAFRAMADDR;
			break;

		case MOTOR_B:
			memaddr = ENCBFRAMADDR;
    2f6c:	08 e1       	ldi	r16, 0x18	; 24
    2f6e:	10 e0       	ldi	r17, 0x00	; 0

		default:
			return(ERROR);
	}

	get_MOTOREncoder(controller, ENCODERCOUNT, &encoderValue);
    2f70:	ae 01       	movw	r20, r28
    2f72:	4b 5f       	subi	r20, 0xFB	; 251
    2f74:	5f 4f       	sbci	r21, 0xFF	; 255
    2f76:	60 e1       	ldi	r22, 0x10	; 16
    2f78:	0e 94 d6 14 	call	0x29ac	; 0x29ac <get_MOTOREncoder>
	tbuf[0] = (encoderValue >> 24) & 0xFF;
    2f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f80:	2f 81       	ldd	r18, Y+7	; 0x07
    2f82:	38 85       	ldd	r19, Y+8	; 0x08
    2f84:	39 83       	std	Y+1, r19	; 0x01
	tbuf[1] = (encoderValue >> 16) & 0xFF;
    2f86:	2a 83       	std	Y+2, r18	; 0x02
	tbuf[2] = (encoderValue >> 8) & 0xFF;
    2f88:	9b 83       	std	Y+3, r25	; 0x03
	tbuf[3] = encoderValue & 0xFF;
    2f8a:	8c 83       	std	Y+4, r24	; 0x04
	return(write_FRAM(FRAMTWIADDR, memaddr, tbuf, 4));
    2f8c:	24 e0       	ldi	r18, 0x04	; 4
    2f8e:	ae 01       	movw	r20, r28
    2f90:	4f 5f       	subi	r20, 0xFF	; 255
    2f92:	5f 4f       	sbci	r21, 0xFF	; 255
    2f94:	b8 01       	movw	r22, r16
    2f96:	80 e5       	ldi	r24, 0x50	; 80
    2f98:	0e 94 4c 07 	call	0xe98	; 0xe98 <write_FRAM>
    2f9c:	01 c0       	rjmp	.+2      	; 0x2fa0 <putFRAM_MOTOREncoder+0x5e>
		case MOTOR_C:
			memaddr = ENCCFRAMADDR;
			break;

		default:
			return(ERROR);
    2f9e:	83 e6       	ldi	r24, 0x63	; 99
	tbuf[1] = (encoderValue >> 16) & 0xFF;
	tbuf[2] = (encoderValue >> 8) & 0xFF;
	tbuf[3] = encoderValue & 0xFF;
	return(write_FRAM(FRAMTWIADDR, memaddr, tbuf, 4));

}
    2fa0:	28 96       	adiw	r28, 0x08	; 8
    2fa2:	cd bf       	out	0x3d, r28	; 61
    2fa4:	de bf       	out	0x3e, r29	; 62
    2fa6:	df 91       	pop	r29
    2fa8:	cf 91       	pop	r28
    2faa:	1f 91       	pop	r17
    2fac:	0f 91       	pop	r16
    2fae:	08 95       	ret

00002fb0 <saveFRAM_MOTOREncoders>:

uint8_t saveFRAM_MOTOREncoders(void)
{
    2fb0:	cf 93       	push	r28
    2fb2:	df 93       	push	r29
	uint8_t i, error = 0, retval;
    2fb4:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = MOTOR_A; i <= MOTOR_C; i++) {
    2fb6:	c0 e8       	ldi	r28, 0x80	; 128
    2fb8:	05 c0       	rjmp	.+10     	; 0x2fc4 <saveFRAM_MOTOREncoders+0x14>
		retval = putFRAM_MOTOREncoder(i);
    2fba:	8c 2f       	mov	r24, r28
    2fbc:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <putFRAM_MOTOREncoder>
		error += retval;
    2fc0:	d8 0f       	add	r29, r24

uint8_t saveFRAM_MOTOREncoders(void)
{
	uint8_t i, error = 0, retval;

	for (i = MOTOR_A; i <= MOTOR_C; i++) {
    2fc2:	cf 5f       	subi	r28, 0xFF	; 255
    2fc4:	c3 38       	cpi	r28, 0x83	; 131
    2fc6:	c8 f3       	brcs	.-14     	; 0x2fba <saveFRAM_MOTOREncoders+0xa>
		retval = putFRAM_MOTOREncoder(i);
		error += retval;
	}
	if (error) {
    2fc8:	dd 23       	and	r29, r29
    2fca:	11 f0       	breq	.+4      	; 0x2fd0 <saveFRAM_MOTOREncoders+0x20>
		return(ERROR);
    2fcc:	83 e6       	ldi	r24, 0x63	; 99
    2fce:	01 c0       	rjmp	.+2      	; 0x2fd2 <saveFRAM_MOTOREncoders+0x22>
	} else {
		return(NOERROR);
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2fd2:	df 91       	pop	r29
    2fd4:	cf 91       	pop	r28
    2fd6:	08 95       	ret

00002fd8 <set_MOTOREncoder>:
		Does not print an error. It's only called at reboot. We should have a
		double-check at startup to make sure the encoder values agree before
		a move.
------------------------------------------------------------------------------*/
uint8_t set_MOTOREncoder(uint8_t controller, int32_t value)
{
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	28 97       	sbiw	r28, 0x08	; 8
    2fe2:	cd bf       	out	0x3d, r28	; 61
    2fe4:	de bf       	out	0x3e, r29	; 62

	uint8_t tbuf[8];
	uint16_t crc = 0;
	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    2fe6:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <recv1_buf>
	recv1_buf.nbytes = 1;
    2fea:	91 e0       	ldi	r25, 0x01	; 1
    2fec:	90 93 15 2b 	sts	0x2B15, r25	; 0x802b15 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    2ff0:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv1_buf+0x102>
	recv1_buf.done = NO;
    2ff4:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0x103>
	tbuf[0] = controller;
    2ff8:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBOSETENCODER;
    2ffa:	86 e1       	ldi	r24, 0x16	; 22
    2ffc:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (value >> 24) & 0xFF;
    2ffe:	7b 83       	std	Y+3, r23	; 0x03
	tbuf[3] = (value >> 16) & 0xFF;
    3000:	6c 83       	std	Y+4, r22	; 0x04
	tbuf[4] = (value >> 8) & 0xFF;
    3002:	5d 83       	std	Y+5, r21	; 0x05
	tbuf[5] = value & 0xFF;
    3004:	4e 83       	std	Y+6, r20	; 0x06
	crc = crc16(tbuf, 6);
    3006:	66 e0       	ldi	r22, 0x06	; 6
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	ce 01       	movw	r24, r28
    300c:	01 96       	adiw	r24, 0x01	; 1
    300e:	0e 94 55 14 	call	0x28aa	; 0x28aa <crc16>
	tbuf[6] = (crc >> 8) & 0xFF;
    3012:	9f 83       	std	Y+7, r25	; 0x07
	tbuf[7] = crc & 0xFF;
    3014:	88 87       	std	Y+8, r24	; 0x08

	send_USART(1, tbuf, 8);				// Send the command
    3016:	48 e0       	ldi	r20, 0x08	; 8
    3018:	be 01       	movw	r22, r28
    301a:	6f 5f       	subi	r22, 0xFF	; 255
    301c:	7f 4f       	sbci	r23, 0xFF	; 255
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	0e 94 38 1a 	call	0x3470	; 0x3470 <send_USART>

	start_TCB0(1);						// Start 1 ms ticks timer
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	0e 94 19 19 	call	0x3232	; 0x3232 <start_TCB0>

	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    302c:	80 91 18 2b 	lds	r24, 0x2B18	; 0x802b18 <recv1_buf+0x103>
    3030:	81 30       	cpi	r24, 0x01	; 1
    3032:	41 f4       	brne	.+16     	; 0x3044 <set_MOTOREncoder+0x6c>
			stop_TCB0();
    3034:	0e 94 2f 19 	call	0x325e	; 0x325e <stop_TCB0>
			return(ERROR);
		}

	}

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
    3038:	80 91 15 2a 	lds	r24, 0x2A15	; 0x802a15 <recv1_buf>
    303c:	8f 3f       	cpi	r24, 0xFF	; 255
    303e:	61 f0       	breq	.+24     	; 0x3058 <set_MOTOREncoder+0x80>
		return(ERROR);
    3040:	83 e6       	ldi	r24, 0x63	; 99
    3042:	0b c0       	rjmp	.+22     	; 0x305a <set_MOTOREncoder+0x82>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// 4 ms barely works at 38400 baud
    3044:	80 91 13 2a 	lds	r24, 0x2A13	; 0x802a13 <ticks>
    3048:	90 91 14 2a 	lds	r25, 0x2A14	; 0x802a14 <ticks+0x1>
    304c:	c3 97       	sbiw	r24, 0x33	; 51
    304e:	70 f3       	brcs	.-36     	; 0x302c <set_MOTOREncoder+0x54>
			stop_TCB0();
    3050:	0e 94 2f 19 	call	0x325e	; 0x325e <stop_TCB0>
			return(ERROR);
    3054:	83 e6       	ldi	r24, 0x63	; 99
    3056:	01 c0       	rjmp	.+2      	; 0x305a <set_MOTOREncoder+0x82>

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
		return(ERROR);
	}

	return(NOERROR);
    3058:	80 e0       	ldi	r24, 0x00	; 0

}
    305a:	28 96       	adiw	r28, 0x08	; 8
    305c:	cd bf       	out	0x3d, r28	; 61
    305e:	de bf       	out	0x3e, r29	; 62
    3060:	df 91       	pop	r29
    3062:	cf 91       	pop	r28
    3064:	08 95       	ret

00003066 <init_MOTORS>:
		NOERROR otherwise

NEED TO FIGURE OUT WHAT TO DO ABOUT ERRORS
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    3066:	1f 93       	push	r17
    3068:	cf 93       	push	r28
    306a:	df 93       	push	r29
    306c:	00 d0       	rcall	.+0      	; 0x306e <init_MOTORS+0x8>
    306e:	00 d0       	rcall	.+0      	; 0x3070 <init_MOTORS+0xa>
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    3074:	2a e6       	ldi	r18, 0x6A	; 106
    3076:	84 e0       	ldi	r24, 0x04	; 4
    3078:	91 e0       	ldi	r25, 0x01	; 1
    307a:	21 50       	subi	r18, 0x01	; 1
    307c:	80 40       	sbci	r24, 0x00	; 0
    307e:	90 40       	sbci	r25, 0x00	; 0
    3080:	e1 f7       	brne	.-8      	; 0x307a <init_MOTORS+0x14>
    3082:	00 c0       	rjmp	.+0      	; 0x3084 <init_MOTORS+0x1e>

	uint8_t controller;
	int32_t encoderValue;

	_delay_ms(100);	// 50 seems to work
	timerSAVEENCODER = 0;
    3084:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <timerSAVEENCODER>
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;
    3088:	8b e0       	ldi	r24, 0x0B	; 11
    308a:	80 93 11 2a 	sts	0x2A11, r24	; 0x802a11 <timeoutSAVEENCODER>
	for (controller = MOTOR_A; controller <= MOTOR_C; controller++) {
    308e:	10 e8       	ldi	r17, 0x80	; 128
    3090:	0e c0       	rjmp	.+28     	; 0x30ae <init_MOTORS+0x48>
		getFRAM_MOTOREncoder(controller, &encoderValue);
    3092:	be 01       	movw	r22, r28
    3094:	6f 5f       	subi	r22, 0xFF	; 255
    3096:	7f 4f       	sbci	r23, 0xFF	; 255
    3098:	81 2f       	mov	r24, r17
    309a:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <getFRAM_MOTOREncoder>
		set_MOTOREncoder(controller, encoderValue);
    309e:	49 81       	ldd	r20, Y+1	; 0x01
    30a0:	5a 81       	ldd	r21, Y+2	; 0x02
    30a2:	6b 81       	ldd	r22, Y+3	; 0x03
    30a4:	7c 81       	ldd	r23, Y+4	; 0x04
    30a6:	81 2f       	mov	r24, r17
    30a8:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <set_MOTOREncoder>
	int32_t encoderValue;

	_delay_ms(100);	// 50 seems to work
	timerSAVEENCODER = 0;
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;
	for (controller = MOTOR_A; controller <= MOTOR_C; controller++) {
    30ac:	1f 5f       	subi	r17, 0xFF	; 255
    30ae:	13 38       	cpi	r17, 0x83	; 131
    30b0:	80 f3       	brcs	.-32     	; 0x3092 <init_MOTORS+0x2c>
		getFRAM_MOTOREncoder(controller, &encoderValue);
		set_MOTOREncoder(controller, encoderValue);
	}

	return(NOERROR);
}
    30b2:	80 e0       	ldi	r24, 0x00	; 0
    30b4:	24 96       	adiw	r28, 0x04	; 4
    30b6:	cd bf       	out	0x3d, r28	; 61
    30b8:	de bf       	out	0x3e, r29	; 62
    30ba:	df 91       	pop	r29
    30bc:	cf 91       	pop	r28
    30be:	1f 91       	pop	r17
    30c0:	08 95       	ret

000030c2 <init_RTC>:
			between interrupts. ticksRTC = 30719 generates an interrupt
			every minute. ticksRTC = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticksRTC)
{
    30c2:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    30c4:	e0 e6       	ldi	r30, 0x60	; 96
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    30ca:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    30cc:	88 ed       	ldi	r24, 0xD8	; 216
    30ce:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    30d0:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    30d2:	01 c0       	rjmp	.+2      	; 0x30d6 <init_RTC+0x14>
		asm("nop");
    30d4:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    30d6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    30da:	96 fd       	sbrc	r25, 6
    30dc:	fb cf       	rjmp	.-10     	; 0x30d4 <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    30de:	e0 e6       	ldi	r30, 0x60	; 96
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    30e4:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    30e6:	28 ed       	ldi	r18, 0xD8	; 216
    30e8:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    30ea:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    30ec:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    30ee:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    30f0:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    30f2:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    30f4:	01 c0       	rjmp	.+2      	; 0x30f8 <init_RTC+0x36>
		asm("nop");
    30f6:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    30f8:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    30fc:	91 11       	cpse	r25, r1
    30fe:	fb cf       	rjmp	.-10     	; 0x30f6 <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticksRTC;
    3100:	e0 e4       	ldi	r30, 0x40	; 64
    3102:	f1 e0       	ldi	r31, 0x01	; 1
    3104:	42 87       	std	Z+10, r20	; 0x0a
    3106:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    3108:	82 e0       	ldi	r24, 0x02	; 2
    310a:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    310c:	85 81       	ldd	r24, Z+5	; 0x05
    310e:	81 60       	ori	r24, 0x01	; 1
    3110:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz) and set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    3112:	81 eb       	ldi	r24, 0xB1	; 177
    3114:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable interrupt on overflow
    3116:	82 81       	ldd	r24, Z+2	; 0x02
    3118:	81 60       	ori	r24, 0x01	; 1
    311a:	82 83       	std	Z+2, r24	; 0x02
    311c:	08 95       	ret

0000311e <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    311e:	1f 92       	push	r1
    3120:	0f 92       	push	r0
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	0f 92       	push	r0
    3126:	11 24       	eor	r1, r1
    3128:	8f 93       	push	r24
    312a:	9f 93       	push	r25

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	timerOLED++;					// Turn off the OLED display
    3132:	80 91 0c 2a 	lds	r24, 0x2A0C	; 0x802a0c <timerOLED>
    3136:	90 91 0d 2a 	lds	r25, 0x2A0D	; 0x802a0d <timerOLED+0x1>
    313a:	01 96       	adiw	r24, 0x01	; 1
    313c:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <timerOLED>
    3140:	90 93 0d 2a 	sts	0x2A0D, r25	; 0x802a0d <timerOLED+0x1>
	toggle_LED;						// Blink the light
    3144:	80 e2       	ldi	r24, 0x20	; 32
    3146:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>
	timerSAVEENCODER++;				// Save the motor encoder values
    314a:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <timerSAVEENCODER>
    314e:	8f 5f       	subi	r24, 0xFF	; 255
    3150:	80 93 12 2a 	sts	0x2A12, r24	; 0x802a12 <timerSAVEENCODER>

}
    3154:	9f 91       	pop	r25
    3156:	8f 91       	pop	r24
    3158:	0f 90       	pop	r0
    315a:	0f be       	out	0x3f, r0	; 63
    315c:	0f 90       	pop	r0
    315e:	1f 90       	pop	r1
    3160:	18 95       	reti

00003162 <set>:
	Returns:
		ERROR if an invalid object was requested.
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    3162:	cf 93       	push	r28
    3164:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	24 e3       	ldi	r18, 0x34	; 52
    316a:	28 9f       	mul	r18, r24
    316c:	f0 01       	movw	r30, r0
    316e:	29 9f       	mul	r18, r25
    3170:	f0 0d       	add	r31, r0
    3172:	11 24       	eor	r1, r1
    3174:	ed 5f       	subi	r30, 0xFD	; 253
    3176:	f7 4d       	sbci	r31, 0xD7	; 215
    3178:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    317a:	24 37       	cpi	r18, 0x74	; 116
    317c:	29 f5       	brne	.+74     	; 0x31c8 <set+0x66>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    317e:	24 e3       	ldi	r18, 0x34	; 52
    3180:	28 9f       	mul	r18, r24
    3182:	e0 01       	movw	r28, r0
    3184:	29 9f       	mul	r18, r25
    3186:	d0 0d       	add	r29, r0
    3188:	11 24       	eor	r1, r1
    318a:	cb 5f       	subi	r28, 0xFB	; 251
    318c:	d7 4d       	sbci	r29, 0xD7	; 215
    318e:	fe 01       	movw	r30, r28
    3190:	01 90       	ld	r0, Z+
    3192:	00 20       	and	r0, r0
    3194:	e9 f7       	brne	.-6      	; 0x3190 <set+0x2e>
    3196:	31 97       	sbiw	r30, 0x01	; 1
    3198:	ec 1b       	sub	r30, r28
    319a:	fd 0b       	sbc	r31, r29
    319c:	73 97       	sbiw	r30, 0x13	; 19
    319e:	41 f0       	breq	.+16     	; 0x31b0 <set+0x4e>
				printError(ERR_SETTIME, "set: bad time format");
    31a0:	6b ec       	ldi	r22, 0xCB	; 203
    31a2:	7d e8       	ldi	r23, 0x8D	; 141
    31a4:	8a e5       	ldi	r24, 0x5A	; 90
    31a6:	92 e0       	ldi	r25, 0x02	; 2
    31a8:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
				return(ERROR);
    31ac:	83 e6       	ldi	r24, 0x63	; 99
    31ae:	13 c0       	rjmp	.+38     	; 0x31d6 <set+0x74>
			}
			put_time(pcmd[cstack].cvalue);
    31b0:	ce 01       	movw	r24, r28
    31b2:	0e 94 28 06 	call	0xc50	; 0xc50 <put_time>
			write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    31b6:	24 e1       	ldi	r18, 0x14	; 20
    31b8:	ae 01       	movw	r20, r28
    31ba:	60 e0       	ldi	r22, 0x00	; 0
    31bc:	70 e0       	ldi	r23, 0x00	; 0
    31be:	80 e5       	ldi	r24, 0x50	; 80
    31c0:	0e 94 4c 07 	call	0xe98	; 0xe98 <write_FRAM>

		default:
			printError(ERR_SET, "set what?");
			return(ERROR);
	}
	return(NOERROR);
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	07 c0       	rjmp	.+14     	; 0x31d6 <set+0x74>
			write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
//			write_FRAM(FRAMTWIADDR, SETTIMEFRAM, (uint8_t*) pcmd[cstack].cvalue);
			break;

		default:
			printError(ERR_SET, "set what?");
    31c8:	60 ee       	ldi	r22, 0xE0	; 224
    31ca:	7d e8       	ldi	r23, 0x8D	; 141
    31cc:	89 e5       	ldi	r24, 0x59	; 89
    31ce:	92 e0       	ldi	r25, 0x02	; 2
    31d0:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			return(ERROR);
    31d4:	83 e6       	ldi	r24, 0x63	; 99
	}
	return(NOERROR);
}
    31d6:	df 91       	pop	r29
    31d8:	cf 91       	pop	r28
    31da:	08 95       	ret

000031dc <get_temperature>:
	point for the actual devices.

	The signal is 1.5E-3 mV/K with a 1500 kOhm dropping resistor.
------------------------------------------------------------------------------*/
float get_temperature(uint8_t sensor)
{
    31dc:	cf 93       	push	r28
    31de:	df 93       	push	r29
    31e0:	00 d0       	rcall	.+0      	; 0x31e2 <get_temperature+0x6>
    31e2:	00 d0       	rcall	.+0      	; 0x31e4 <get_temperature+0x8>
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62

	float temperature;

	switch (sensor) {
    31e8:	83 30       	cpi	r24, 0x03	; 3
    31ea:	18 f0       	brcs	.+6      	; 0x31f2 <get_temperature+0x16>
    31ec:	83 30       	cpi	r24, 0x03	; 3
    31ee:	39 f0       	breq	.+14     	; 0x31fe <get_temperature+0x22>
    31f0:	0b c0       	rjmp	.+22     	; 0x3208 <get_temperature+0x2c>
		case 0:
		case 1:
		case 2:
			read_AD590(sensor, &temperature);
    31f2:	be 01       	movw	r22, r28
    31f4:	6f 5f       	subi	r22, 0xFF	; 255
    31f6:	7f 4f       	sbci	r23, 0xFF	; 255
    31f8:	0e 94 47 01 	call	0x28e	; 0x28e <read_AD590>
			break;
    31fc:	0d c0       	rjmp	.+26     	; 0x3218 <get_temperature+0x3c>
		case 3:
			read_MCP9808(&temperature);
    31fe:	ce 01       	movw	r24, r28
    3200:	01 96       	adiw	r24, 0x01	; 1
    3202:	0e 94 3a 09 	call	0x1274	; 0x1274 <read_MCP9808>
			break;
    3206:	08 c0       	rjmp	.+16     	; 0x3218 <get_temperature+0x3c>
		default:
			temperature = -666.0;
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	90 e8       	ldi	r25, 0x80	; 128
    320c:	a6 e2       	ldi	r26, 0x26	; 38
    320e:	b4 ec       	ldi	r27, 0xC4	; 196
    3210:	89 83       	std	Y+1, r24	; 0x01
    3212:	9a 83       	std	Y+2, r25	; 0x02
    3214:	ab 83       	std	Y+3, r26	; 0x03
    3216:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}

	return(temperature);
    3218:	69 81       	ldd	r22, Y+1	; 0x01
    321a:	7a 81       	ldd	r23, Y+2	; 0x02
    321c:	8b 81       	ldd	r24, Y+3	; 0x03
    321e:	9c 81       	ldd	r25, Y+4	; 0x04

}
    3220:	24 96       	adiw	r28, 0x04	; 4
    3222:	cd bf       	out	0x3d, r28	; 61
    3224:	de bf       	out	0x3e, r29	; 62
    3226:	df 91       	pop	r29
    3228:	cf 91       	pop	r28
    322a:	08 95       	ret

0000322c <testroutine>:

void testroutine(void)
{


	init_MOTORS();
    322c:	0e 94 33 18 	call	0x3066	; 0x3066 <init_MOTORS>
    3230:	08 95       	ret

00003232 <start_TCB0>:
		None
------------------------------------------------------------------------------*/
void start_TCB0(uint16_t msPeriod)
{

	ticks = 0;
    3232:	10 92 13 2a 	sts	0x2A13, r1	; 0x802a13 <ticks>
    3236:	10 92 14 2a 	sts	0x2A14, r1	; 0x802a14 <ticks+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    323a:	25 e0       	ldi	r18, 0x05	; 5
    323c:	3d e0       	ldi	r19, 0x0D	; 13
    323e:	ac 01       	movw	r20, r24
    3240:	42 9f       	mul	r20, r18
    3242:	c0 01       	movw	r24, r0
    3244:	43 9f       	mul	r20, r19
    3246:	90 0d       	add	r25, r0
    3248:	52 9f       	mul	r21, r18
    324a:	90 0d       	add	r25, r0
    324c:	11 24       	eor	r1, r1
    324e:	e0 e8       	ldi	r30, 0x80	; 128
    3250:	fa e0       	ldi	r31, 0x0A	; 10
    3252:	84 87       	std	Z+12, r24	; 0x0c
    3254:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	85 83       	std	Z+5, r24	; 0x05
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    325a:	80 83       	st	Z, r24
    325c:	08 95       	ret

0000325e <stop_TCB0>:
	Turn off the TCB0 timer
------------------------------------------------------------------------------*/
void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    325e:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    3262:	08 95       	ret

00003264 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    3264:	1f 92       	push	r1
    3266:	0f 92       	push	r0
    3268:	0f b6       	in	r0, 0x3f	; 63
    326a:	0f 92       	push	r0
    326c:	11 24       	eor	r1, r1
    326e:	8f 93       	push	r24
    3270:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks++;
    3278:	80 91 13 2a 	lds	r24, 0x2A13	; 0x802a13 <ticks>
    327c:	90 91 14 2a 	lds	r25, 0x2A14	; 0x802a14 <ticks+0x1>
    3280:	01 96       	adiw	r24, 0x01	; 1
    3282:	80 93 13 2a 	sts	0x2A13, r24	; 0x802a13 <ticks>
    3286:	90 93 14 2a 	sts	0x2A14, r25	; 0x802a14 <ticks+0x1>

    328a:	9f 91       	pop	r25
    328c:	8f 91       	pop	r24
    328e:	0f 90       	pop	r0
    3290:	0f be       	out	0x3f, r0	; 63
    3292:	0f 90       	pop	r0
    3294:	1f 90       	pop	r1
    3296:	18 95       	reti

00003298 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    3298:	e0 ea       	ldi	r30, 0xA0	; 160
    329a:	f8 e0       	ldi	r31, 0x08	; 8
    329c:	8b e0       	ldi	r24, 0x0B	; 11
    329e:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    32a0:	83 81       	ldd	r24, Z+3	; 0x03
    32a2:	81 60       	ori	r24, 0x01	; 1
    32a4:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    32a6:	85 81       	ldd	r24, Z+5	; 0x05
    32a8:	81 60       	ori	r24, 0x01	; 1
    32aa:	85 83       	std	Z+5, r24	; 0x05
    32ac:	08 95       	ret

000032ae <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    32ae:	01 c0       	rjmp	.+2      	; 0x32b2 <read_TWI+0x4>
		asm("nop");								// Should set timer here
    32b0:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    32b2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    32b6:	88 23       	and	r24, r24
    32b8:	dc f7       	brge	.-10     	; 0x32b0 <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    32ba:	e0 ea       	ldi	r30, 0xA0	; 160
    32bc:	f8 e0       	ldi	r31, 0x08	; 8
    32be:	84 81       	ldd	r24, Z+4	; 0x04
    32c0:	8b 7f       	andi	r24, 0xFB	; 251
    32c2:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    32c4:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    32c6:	94 81       	ldd	r25, Z+4	; 0x04
    32c8:	92 60       	ori	r25, 0x02	; 2
    32ca:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    32cc:	08 95       	ret

000032ce <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    32ce:	01 c0       	rjmp	.+2      	; 0x32d2 <readlast_TWI+0x4>
		asm("nop");
    32d0:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    32d2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    32d6:	88 23       	and	r24, r24
    32d8:	dc f7       	brge	.-10     	; 0x32d0 <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    32da:	e0 ea       	ldi	r30, 0xA0	; 160
    32dc:	f8 e0       	ldi	r31, 0x08	; 8
    32de:	84 81       	ldd	r24, Z+4	; 0x04
    32e0:	84 60       	ori	r24, 0x04	; 4
    32e2:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    32e4:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    32e6:	08 95       	ret

000032e8 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    32e8:	61 30       	cpi	r22, 0x01	; 1
    32ea:	39 f4       	brne	.+14     	; 0x32fa <start_TWI+0x12>
		TWI0.MADDR = ((addr << 1) | 0x01);
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	88 0f       	add	r24, r24
    32f0:	99 1f       	adc	r25, r25
    32f2:	81 60       	ori	r24, 0x01	; 1
    32f4:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    32f8:	03 c0       	rjmp	.+6      	; 0x3300 <start_TWI+0x18>
	} else {
		TWI0.MADDR = (addr << 1);
    32fa:	88 0f       	add	r24, r24
    32fc:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

	start_TCB0(1);
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	0e 94 19 19 	call	0x3232	; 0x3232 <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    3308:	0b c0       	rjmp	.+22     	; 0x3320 <start_TWI+0x38>
		if (ticks > 10) {
    330a:	80 91 13 2a 	lds	r24, 0x2A13	; 0x802a13 <ticks>
    330e:	90 91 14 2a 	lds	r25, 0x2A14	; 0x802a14 <ticks+0x1>
    3312:	0b 97       	sbiw	r24, 0x0b	; 11
    3314:	20 f0       	brcs	.+8      	; 0x331e <start_TWI+0x36>
			stop_TCB0();
    3316:	0e 94 2f 19 	call	0x325e	; 0x325e <stop_TCB0>
			return(ERROR);
    331a:	83 e6       	ldi	r24, 0x63	; 99
    331c:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
    331e:	00 00       	nop
	} else {
		TWI0.MADDR = (addr << 1);
	}

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    3320:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3324:	80 7c       	andi	r24, 0xC0	; 192
    3326:	89 f3       	breq	.-30     	; 0x330a <start_TWI+0x22>
			stop_TCB0();
			return(ERROR);
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
    3328:	0e 94 2f 19 	call	0x325e	; 0x325e <stop_TCB0>
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    332c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3330:	82 ff       	sbrs	r24, 2
    3332:	08 c0       	rjmp	.+16     	; 0x3344 <start_TWI+0x5c>
		printError(ERR_TWI, "TWI bus");
    3334:	6a ee       	ldi	r22, 0xEA	; 234
    3336:	7d e8       	ldi	r23, 0x8D	; 141
    3338:	81 e9       	ldi	r24, 0x91	; 145
    333a:	91 e0       	ldi	r25, 0x01	; 1
    333c:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		return(ERROR);
    3340:	83 e6       	ldi	r24, 0x63	; 99
    3342:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    3344:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3348:	83 ff       	sbrs	r24, 3
    334a:	08 c0       	rjmp	.+16     	; 0x335c <start_TWI+0x74>
		printError(ERR_TWI, "TWI arbitration");
    334c:	62 ef       	ldi	r22, 0xF2	; 242
    334e:	7d e8       	ldi	r23, 0x8D	; 141
    3350:	81 e9       	ldi	r24, 0x91	; 145
    3352:	91 e0       	ldi	r25, 0x01	; 1
    3354:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		return(ERROR);
    3358:	83 e6       	ldi	r24, 0x63	; 99
    335a:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    335c:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3360:	89 2f       	mov	r24, r25
    3362:	80 71       	andi	r24, 0x10	; 16
    3364:	94 fd       	sbrc	r25, 4
		return(ERROR);
    3366:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    3368:	08 95       	ret

0000336a <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    336a:	87 e0       	ldi	r24, 0x07	; 7
    336c:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    3370:	08 95       	ret

00003372 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    3372:	01 c0       	rjmp	.+2      	; 0x3376 <write_TWI+0x4>
		asm("nop");
    3374:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    3376:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    337a:	96 ff       	sbrs	r25, 6
    337c:	fb cf       	rjmp	.-10     	; 0x3374 <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    337e:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	start_TCB0(1);			// Maybe only check on start_TWI?
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	0e 94 19 19 	call	0x3232	; 0x3232 <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    338a:	0b c0       	rjmp	.+22     	; 0x33a2 <write_TWI+0x30>
		asm("nop");
    338c:	00 00       	nop
		if (ticks > 50) {
    338e:	80 91 13 2a 	lds	r24, 0x2A13	; 0x802a13 <ticks>
    3392:	90 91 14 2a 	lds	r25, 0x2A14	; 0x802a14 <ticks+0x1>
    3396:	c3 97       	sbiw	r24, 0x33	; 51
    3398:	20 f0       	brcs	.+8      	; 0x33a2 <write_TWI+0x30>
			stop_TCB0();
    339a:	0e 94 2f 19 	call	0x325e	; 0x325e <stop_TCB0>
			return(ERROR);
    339e:	83 e6       	ldi	r24, 0x63	; 99
    33a0:	08 95       	ret
	}

	TWI0.MDATA = data;

	start_TCB0(1);			// Maybe only check on start_TWI?
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    33a2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    33a6:	86 ff       	sbrs	r24, 6
    33a8:	f1 cf       	rjmp	.-30     	; 0x338c <write_TWI+0x1a>
			stop_TCB0();
			return(ERROR);
			break;
		}
	}
	stop_TCB0();
    33aa:	0e 94 2f 19 	call	0x325e	; 0x325e <stop_TCB0>
	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    33ae:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    33b2:	89 2f       	mov	r24, r25
    33b4:	80 71       	andi	r24, 0x10	; 16
    33b6:	94 fd       	sbrc	r25, 4
		return(ERROR);
    33b8:	83 e6       	ldi	r24, 0x63	; 99
	} else {
		return(NOERROR);
	}

}
    33ba:	08 95       	ret

000033bc <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    33bc:	e0 e0       	ldi	r30, 0x00	; 0
    33be:	f4 e0       	ldi	r31, 0x04	; 4
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    33c4:	81 83       	std	Z+1, r24	; 0x01
//	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    33c6:	e0 e0       	ldi	r30, 0x00	; 0
    33c8:	f8 e0       	ldi	r31, 0x08	; 8
    33ca:	24 e7       	ldi	r18, 0x74	; 116
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	20 87       	std	Z+8, r18	; 0x08
    33d0:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    33d2:	95 81       	ldd	r25, Z+5	; 0x05
    33d4:	90 68       	ori	r25, 0x80	; 128
    33d6:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    33d8:	96 81       	ldd	r25, Z+6	; 0x06
    33da:	90 64       	ori	r25, 0x40	; 64
    33dc:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    33de:	96 81       	ldd	r25, Z+6	; 0x06
    33e0:	90 68       	ori	r25, 0x80	; 128
    33e2:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;					// Set up send/receive buffers
    33e4:	10 92 1b 2d 	sts	0x2D1B, r1	; 0x802d1b <send0_buf+0xfe>
	send0_buf.tail = 0;
    33e8:	10 92 1c 2d 	sts	0x2D1C, r1	; 0x802d1c <send0_buf+0xff>
	send0_buf.done = YES;
    33ec:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0x103>
	recv0_buf.head = 0;
    33f0:	10 92 17 2c 	sts	0x2C17, r1	; 0x802c17 <recv0_buf+0xfe>
	recv0_buf.tail = 0;
    33f4:	10 92 18 2c 	sts	0x2C18, r1	; 0x802c18 <recv0_buf+0xff>
	recv0_buf.data[0] = '\0';
    33f8:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv0_buf>
	recv0_buf.length = 0;
    33fc:	10 92 1a 2c 	sts	0x2C1A, r1	; 0x802c1a <recv0_buf+0x101>
	recv0_buf.done = NO;
    3400:	10 92 1c 2c 	sts	0x2C1C, r1	; 0x802c1c <recv0_buf+0x103>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    3404:	e0 e4       	ldi	r30, 0x40	; 64
    3406:	f4 e0       	ldi	r31, 0x04	; 4
    3408:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    340a:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
    340c:	e0 e2       	ldi	r30, 0x20	; 32
    340e:	f8 e0       	ldi	r31, 0x08	; 8
    3410:	2b e5       	ldi	r18, 0x5B	; 91
    3412:	31 e0       	ldi	r19, 0x01	; 1
    3414:	20 87       	std	Z+8, r18	; 0x08
    3416:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    3418:	95 81       	ldd	r25, Z+5	; 0x05
    341a:	90 68       	ori	r25, 0x80	; 128
    341c:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    341e:	96 81       	ldd	r25, Z+6	; 0x06
    3420:	90 64       	ori	r25, 0x40	; 64
    3422:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    3424:	96 81       	ldd	r25, Z+6	; 0x06
    3426:	90 68       	ori	r25, 0x80	; 128
    3428:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    342a:	10 92 27 30 	sts	0x3027, r1	; 0x803027 <send1_buf+0xfe>
	send1_buf.tail = 0;
    342e:	10 92 28 30 	sts	0x3028, r1	; 0x803028 <send1_buf+0xff>
	send1_buf.done = YES;
    3432:	80 93 2c 30 	sts	0x302C, r24	; 0x80302c <send1_buf+0x103>
	recv1_buf.head = 0;
    3436:	10 92 13 2b 	sts	0x2B13, r1	; 0x802b13 <recv1_buf+0xfe>
	recv1_buf.tail = 0;
    343a:	10 92 14 2b 	sts	0x2B14, r1	; 0x802b14 <recv1_buf+0xff>
	recv1_buf.data[0] = '\0';
    343e:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <recv1_buf>
	recv1_buf.done = NO;
    3442:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0x103>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    3446:	e0 e2       	ldi	r30, 0x20	; 32
    3448:	f4 e0       	ldi	r31, 0x04	; 4
    344a:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    344c:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    344e:	e0 e6       	ldi	r30, 0x60	; 96
    3450:	f8 e0       	ldi	r31, 0x08	; 8
    3452:	2d e6       	ldi	r18, 0x6D	; 109
    3454:	35 e0       	ldi	r19, 0x05	; 5
    3456:	20 87       	std	Z+8, r18	; 0x08
    3458:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    345a:	96 81       	ldd	r25, Z+6	; 0x06
    345c:	90 64       	ori	r25, 0x40	; 64
    345e:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    3460:	96 81       	ldd	r25, Z+6	; 0x06
    3462:	90 68       	ori	r25, 0x80	; 128
    3464:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    3466:	80 93 28 2f 	sts	0x2F28, r24	; 0x802f28 <send3_buf+0x103>
	recv3_buf.done = NO;
    346a:	10 92 24 2e 	sts	0x2E24, r1	; 0x802e24 <recv3_buf+0x103>
    346e:	08 95       	ret

00003470 <send_USART>:
		"transmit data register empty" interrupt (DREIE). The USARTn_DRE_vect
		puts the bytes into the transmit register until the tail catches up
		to the head of the circular buffer.
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    3470:	0f 93       	push	r16
    3472:	1f 93       	push	r17
    3474:	cf 93       	push	r28
    3476:	df 93       	push	r29
    3478:	eb 01       	movw	r28, r22
    347a:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    347c:	81 30       	cpi	r24, 0x01	; 1
    347e:	d1 f1       	breq	.+116    	; 0x34f4 <send_USART+0x84>
    3480:	20 f0       	brcs	.+8      	; 0x348a <send_USART+0x1a>
    3482:	83 30       	cpi	r24, 0x03	; 3
    3484:	09 f4       	brne	.+2      	; 0x3488 <send_USART+0x18>
    3486:	85 c0       	rjmp	.+266    	; 0x3592 <send_USART+0x122>
    3488:	8c c0       	rjmp	.+280    	; 0x35a2 <send_USART+0x132>
		case 0:
			send0_buf.done = NO;
    348a:	10 92 20 2d 	sts	0x2D20, r1	; 0x802d20 <send0_buf+0x103>
			for (i = 0; i < nbytes; i++) {
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	11 c0       	rjmp	.+34     	; 0x34b4 <send_USART+0x44>
				send0_buf.data[send0_buf.head] = *data++;
    3492:	eb e1       	ldi	r30, 0x1B	; 27
    3494:	fd e2       	ldi	r31, 0x2D	; 45
    3496:	80 81       	ld	r24, Z
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	38 81       	ld	r19, Y
    349c:	dc 01       	movw	r26, r24
    349e:	a3 5e       	subi	r26, 0xE3	; 227
    34a0:	b3 4d       	sbci	r27, 0xD3	; 211
    34a2:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    34a4:	01 96       	adiw	r24, 0x01	; 1
    34a6:	6e ef       	ldi	r22, 0xFE	; 254
    34a8:	70 e0       	ldi	r23, 0x00	; 0
    34aa:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <__divmodhi4>
    34ae:	80 83       	st	Z, r24
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    34b0:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    34b2:	21 96       	adiw	r28, 0x01	; 1
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    34b4:	21 17       	cp	r18, r17
    34b6:	68 f3       	brcs	.-38     	; 0x3492 <send_USART+0x22>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    34b8:	e0 e0       	ldi	r30, 0x00	; 0
    34ba:	f8 e0       	ldi	r31, 0x08	; 8
    34bc:	85 81       	ldd	r24, Z+5	; 0x05
    34be:	80 62       	ori	r24, 0x20	; 32
    34c0:	85 83       	std	Z+5, r24	; 0x05
			start_TCB0(10);						// 10 ms ticks
    34c2:	8a e0       	ldi	r24, 0x0A	; 10
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	0e 94 19 19 	call	0x3232	; 0x3232 <start_TCB0>
			while (send0_buf.done == NO) {
    34ca:	0d c0       	rjmp	.+26     	; 0x34e6 <send_USART+0x76>
				if (ticks > 100) {				// 1 second enough?
    34cc:	80 91 13 2a 	lds	r24, 0x2A13	; 0x802a13 <ticks>
    34d0:	90 91 14 2a 	lds	r25, 0x2A14	; 0x802a14 <ticks+0x1>
    34d4:	85 36       	cpi	r24, 0x65	; 101
    34d6:	91 05       	cpc	r25, r1
    34d8:	30 f0       	brcs	.+12     	; 0x34e6 <send_USART+0x76>
					stop_TCB0();
    34da:	0e 94 2f 19 	call	0x325e	; 0x325e <stop_TCB0>
					send0_buf.done = YES;
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0x103>
					return;
    34e4:	5e c0       	rjmp	.+188    	; 0x35a2 <send_USART+0x132>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			start_TCB0(10);						// 10 ms ticks
			while (send0_buf.done == NO) {
    34e6:	80 91 20 2d 	lds	r24, 0x2D20	; 0x802d20 <send0_buf+0x103>
    34ea:	88 23       	and	r24, r24
    34ec:	79 f3       	breq	.-34     	; 0x34cc <send_USART+0x5c>
					stop_TCB0();
					send0_buf.done = YES;
					return;
				}
			}
			stop_TCB0();
    34ee:	0e 94 2f 19 	call	0x325e	; 0x325e <stop_TCB0>
			break;
    34f2:	57 c0       	rjmp	.+174    	; 0x35a2 <send_USART+0x132>

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
    34f4:	64 2f       	mov	r22, r20
    34f6:	70 e0       	ldi	r23, 0x00	; 0
    34f8:	ce 01       	movw	r24, r28
    34fa:	0e 94 55 14 	call	0x28aa	; 0x28aa <crc16>
    34fe:	48 2f       	mov	r20, r24
    3500:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    3502:	20 e0       	ldi	r18, 0x00	; 0
    3504:	11 c0       	rjmp	.+34     	; 0x3528 <send_USART+0xb8>
				send1_buf.data[send1_buf.head] = *data++;
    3506:	e7 e2       	ldi	r30, 0x27	; 39
    3508:	f0 e3       	ldi	r31, 0x30	; 48
    350a:	80 81       	ld	r24, Z
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	38 81       	ld	r19, Y
    3510:	dc 01       	movw	r26, r24
    3512:	a7 5d       	subi	r26, 0xD7	; 215
    3514:	b0 4d       	sbci	r27, 0xD0	; 208
    3516:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3518:	01 96       	adiw	r24, 0x01	; 1
    351a:	6e ef       	ldi	r22, 0xFE	; 254
    351c:	70 e0       	ldi	r23, 0x00	; 0
    351e:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <__divmodhi4>
    3522:	80 83       	st	Z, r24
			stop_TCB0();
			break;

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    3524:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    3526:	21 96       	adiw	r28, 0x01	; 1
			stop_TCB0();
			break;

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    3528:	21 17       	cp	r18, r17
    352a:	68 f3       	brcs	.-38     	; 0x3506 <send_USART+0x96>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    352c:	e7 e2       	ldi	r30, 0x27	; 39
    352e:	f0 e3       	ldi	r31, 0x30	; 48
    3530:	80 81       	ld	r24, Z
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	dc 01       	movw	r26, r24
    3536:	a7 5d       	subi	r26, 0xD7	; 215
    3538:	b0 4d       	sbci	r27, 0xD0	; 208
    353a:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    353c:	01 96       	adiw	r24, 0x01	; 1
    353e:	2e ef       	ldi	r18, 0xFE	; 254
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	b9 01       	movw	r22, r18
    3544:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	dc 01       	movw	r26, r24
    354c:	a7 5d       	subi	r26, 0xD7	; 215
    354e:	b0 4d       	sbci	r27, 0xD0	; 208
    3550:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3552:	01 96       	adiw	r24, 0x01	; 1
    3554:	b9 01       	movw	r22, r18
    3556:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <__divmodhi4>
    355a:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    355c:	1e 5f       	subi	r17, 0xFE	; 254
    355e:	10 93 29 30 	sts	0x3029, r17	; 0x803029 <send1_buf+0x100>
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3562:	e0 e2       	ldi	r30, 0x20	; 32
    3564:	f8 e0       	ldi	r31, 0x08	; 8
    3566:	85 81       	ldd	r24, Z+5	; 0x05
    3568:	80 62       	ori	r24, 0x20	; 32
    356a:	85 83       	std	Z+5, r24	; 0x05
			break;
    356c:	1a c0       	rjmp	.+52     	; 0x35a2 <send_USART+0x132>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    356e:	e3 e2       	ldi	r30, 0x23	; 35
    3570:	ff e2       	ldi	r31, 0x2F	; 47
    3572:	80 81       	ld	r24, Z
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	38 81       	ld	r19, Y
    3578:	dc 01       	movw	r26, r24
    357a:	ab 5d       	subi	r26, 0xDB	; 219
    357c:	b1 4d       	sbci	r27, 0xD1	; 209
    357e:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    3580:	01 96       	adiw	r24, 0x01	; 1
    3582:	6e ef       	ldi	r22, 0xFE	; 254
    3584:	70 e0       	ldi	r23, 0x00	; 0
    3586:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <__divmodhi4>
    358a:	80 83       	st	Z, r24
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    358c:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    358e:	21 96       	adiw	r28, 0x01	; 1
    3590:	01 c0       	rjmp	.+2      	; 0x3594 <send_USART+0x124>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    3592:	20 e0       	ldi	r18, 0x00	; 0
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    3594:	21 17       	cp	r18, r17
    3596:	58 f3       	brcs	.-42     	; 0x356e <send_USART+0xfe>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3598:	e0 e6       	ldi	r30, 0x60	; 96
    359a:	f8 e0       	ldi	r31, 0x08	; 8
    359c:	85 81       	ldd	r24, Z+5	; 0x05
    359e:	80 62       	ori	r24, 0x20	; 32
    35a0:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    35a2:	df 91       	pop	r29
    35a4:	cf 91       	pop	r28
    35a6:	1f 91       	pop	r17
    35a8:	0f 91       	pop	r16
    35aa:	08 95       	ret

000035ac <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    35ac:	1f 92       	push	r1
    35ae:	0f 92       	push	r0
    35b0:	0f b6       	in	r0, 0x3f	; 63
    35b2:	0f 92       	push	r0
    35b4:	11 24       	eor	r1, r1
    35b6:	5f 93       	push	r21
    35b8:	6f 93       	push	r22
    35ba:	7f 93       	push	r23
    35bc:	8f 93       	push	r24
    35be:	9f 93       	push	r25
    35c0:	af 93       	push	r26
    35c2:	bf 93       	push	r27
    35c4:	ef 93       	push	r30
    35c6:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    35c8:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if (recv0_buf.length < (BUFSIZE-1)) {		// BUFSIZE-1 to make room for the terminating \0
    35cc:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <recv0_buf+0x101>
    35d0:	8d 3f       	cpi	r24, 0xFD	; 253
    35d2:	10 f5       	brcc	.+68     	; 0x3618 <__vector_17+0x6c>
//		c = USART0.RXDATAL;
		if ((char) c == '\r') {
    35d4:	9d 30       	cpi	r25, 0x0D	; 13
    35d6:	51 f4       	brne	.+20     	; 0x35ec <__vector_17+0x40>
			recv0_buf.done = YES;
    35d8:	81 e0       	ldi	r24, 0x01	; 1
    35da:	80 93 1c 2c 	sts	0x2C1C, r24	; 0x802c1c <recv0_buf+0x103>
			recv0_buf.data[recv0_buf.head] = '\0';
    35de:	e0 91 17 2c 	lds	r30, 0x2C17	; 0x802c17 <recv0_buf+0xfe>
    35e2:	f0 e0       	ldi	r31, 0x00	; 0
    35e4:	e7 5e       	subi	r30, 0xE7	; 231
    35e6:	f4 4d       	sbci	r31, 0xD4	; 212
    35e8:	10 82       	st	Z, r1
    35ea:	06 c0       	rjmp	.+12     	; 0x35f8 <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    35ec:	e0 91 17 2c 	lds	r30, 0x2C17	; 0x802c17 <recv0_buf+0xfe>
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	e7 5e       	subi	r30, 0xE7	; 231
    35f4:	f4 4d       	sbci	r31, 0xD4	; 212
    35f6:	90 83       	st	Z, r25
		}
		recv0_buf.length++;
    35f8:	ea e1       	ldi	r30, 0x1A	; 26
    35fa:	fc e2       	ldi	r31, 0x2C	; 44
    35fc:	80 81       	ld	r24, Z
    35fe:	8f 5f       	subi	r24, 0xFF	; 255
    3600:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    3602:	e7 e1       	ldi	r30, 0x17	; 23
    3604:	fc e2       	ldi	r31, 0x2C	; 44
    3606:	80 81       	ld	r24, Z
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	01 96       	adiw	r24, 0x01	; 1
    360c:	6e ef       	ldi	r22, 0xFE	; 254
    360e:	70 e0       	ldi	r23, 0x00	; 0
    3610:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <__divmodhi4>
    3614:	80 83       	st	Z, r24
    3616:	0a c0       	rjmp	.+20     	; 0x362c <__vector_17+0x80>
	} else {
		recv0_buf.head = 0;
    3618:	10 92 17 2c 	sts	0x2C17, r1	; 0x802c17 <recv0_buf+0xfe>
		recv0_buf.tail = 0;
    361c:	10 92 18 2c 	sts	0x2C18, r1	; 0x802c18 <recv0_buf+0xff>
		recv0_buf.data[0] = '\0';
    3620:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv0_buf>
		recv0_buf.length = 0;
    3624:	10 92 1a 2c 	sts	0x2C1A, r1	; 0x802c1a <recv0_buf+0x101>
		recv0_buf.done = NO;
    3628:	10 92 1c 2c 	sts	0x2C1C, r1	; 0x802c1c <recv0_buf+0x103>
	}
}
    362c:	ff 91       	pop	r31
    362e:	ef 91       	pop	r30
    3630:	bf 91       	pop	r27
    3632:	af 91       	pop	r26
    3634:	9f 91       	pop	r25
    3636:	8f 91       	pop	r24
    3638:	7f 91       	pop	r23
    363a:	6f 91       	pop	r22
    363c:	5f 91       	pop	r21
    363e:	0f 90       	pop	r0
    3640:	0f be       	out	0x3f, r0	; 63
    3642:	0f 90       	pop	r0
    3644:	1f 90       	pop	r1
    3646:	18 95       	reti

00003648 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    3648:	1f 92       	push	r1
    364a:	0f 92       	push	r0
    364c:	0f b6       	in	r0, 0x3f	; 63
    364e:	0f 92       	push	r0
    3650:	11 24       	eor	r1, r1
    3652:	2f 93       	push	r18
    3654:	8f 93       	push	r24
    3656:	9f 93       	push	r25
    3658:	ef 93       	push	r30
    365a:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    365c:	e0 e0       	ldi	r30, 0x00	; 0
    365e:	f8 e0       	ldi	r31, 0x08	; 8
    3660:	85 81       	ldd	r24, Z+5	; 0x05
    3662:	8f 7d       	andi	r24, 0xDF	; 223
    3664:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    3666:	80 91 1b 2d 	lds	r24, 0x2D1B	; 0x802d1b <send0_buf+0xfe>
    366a:	e0 91 1c 2d 	lds	r30, 0x2D1C	; 0x802d1c <send0_buf+0xff>
    366e:	8e 17       	cp	r24, r30
    3670:	d1 f0       	breq	.+52     	; 0x36a6 <__vector_18+0x5e>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	8e 0f       	add	r24, r30
    3676:	80 93 1c 2d 	sts	0x2D1C, r24	; 0x802d1c <send0_buf+0xff>
    367a:	f0 e0       	ldi	r31, 0x00	; 0
    367c:	e3 5e       	subi	r30, 0xE3	; 227
    367e:	f3 4d       	sbci	r31, 0xD3	; 211
    3680:	90 81       	ld	r25, Z
    3682:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    3686:	91 e0       	ldi	r25, 0x01	; 1
    3688:	8e 3f       	cpi	r24, 0xFE	; 254
    368a:	08 f4       	brcc	.+2      	; 0x368e <__vector_18+0x46>
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	91 95       	neg	r25
    3690:	29 2f       	mov	r18, r25
    3692:	22 0f       	add	r18, r18
    3694:	82 1b       	sub	r24, r18
    3696:	80 93 1c 2d 	sts	0x2D1C, r24	; 0x802d1c <send0_buf+0xff>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    369a:	e0 e0       	ldi	r30, 0x00	; 0
    369c:	f8 e0       	ldi	r31, 0x08	; 8
    369e:	85 81       	ldd	r24, Z+5	; 0x05
    36a0:	80 62       	ori	r24, 0x20	; 32
    36a2:	85 83       	std	Z+5, r24	; 0x05
    36a4:	03 c0       	rjmp	.+6      	; 0x36ac <__vector_18+0x64>
	} else {
		send0_buf.done = YES;
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0x103>
	}

}
    36ac:	ff 91       	pop	r31
    36ae:	ef 91       	pop	r30
    36b0:	9f 91       	pop	r25
    36b2:	8f 91       	pop	r24
    36b4:	2f 91       	pop	r18
    36b6:	0f 90       	pop	r0
    36b8:	0f be       	out	0x3f, r0	; 63
    36ba:	0f 90       	pop	r0
    36bc:	1f 90       	pop	r1
    36be:	18 95       	reti

000036c0 <__vector_26>:
/*------------------------------------------------------------------------------
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    36c0:	1f 92       	push	r1
    36c2:	0f 92       	push	r0
    36c4:	0f b6       	in	r0, 0x3f	; 63
    36c6:	0f 92       	push	r0
    36c8:	11 24       	eor	r1, r1
    36ca:	2f 93       	push	r18
    36cc:	8f 93       	push	r24
    36ce:	9f 93       	push	r25
    36d0:	ef 93       	push	r30
    36d2:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    36d4:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>

	if (recv1_buf.nxfrd < recv1_buf.nbytes) {
    36d8:	e0 91 17 2b 	lds	r30, 0x2B17	; 0x802b17 <recv1_buf+0x102>
    36dc:	80 91 15 2b 	lds	r24, 0x2B15	; 0x802b15 <recv1_buf+0x100>
    36e0:	e8 17       	cp	r30, r24
    36e2:	40 f4       	brcc	.+16     	; 0x36f4 <__vector_26+0x34>
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    36e4:	21 e0       	ldi	r18, 0x01	; 1
    36e6:	2e 0f       	add	r18, r30
    36e8:	20 93 17 2b 	sts	0x2B17, r18	; 0x802b17 <recv1_buf+0x102>
    36ec:	f0 e0       	ldi	r31, 0x00	; 0
    36ee:	eb 5e       	subi	r30, 0xEB	; 235
    36f0:	f5 4d       	sbci	r31, 0xD5	; 213
    36f2:	90 83       	st	Z, r25
	}

	if (recv1_buf.nxfrd >= recv1_buf.nbytes) {
    36f4:	90 91 17 2b 	lds	r25, 0x2B17	; 0x802b17 <recv1_buf+0x102>
    36f8:	98 17       	cp	r25, r24
    36fa:	18 f0       	brcs	.+6      	; 0x3702 <__vector_26+0x42>
		recv1_buf.done = YES;
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	80 93 18 2b 	sts	0x2B18, r24	; 0x802b18 <recv1_buf+0x103>
	}

}
    3702:	ff 91       	pop	r31
    3704:	ef 91       	pop	r30
    3706:	9f 91       	pop	r25
    3708:	8f 91       	pop	r24
    370a:	2f 91       	pop	r18
    370c:	0f 90       	pop	r0
    370e:	0f be       	out	0x3f, r0	; 63
    3710:	0f 90       	pop	r0
    3712:	1f 90       	pop	r1
    3714:	18 95       	reti

00003716 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    3716:	1f 92       	push	r1
    3718:	0f 92       	push	r0
    371a:	0f b6       	in	r0, 0x3f	; 63
    371c:	0f 92       	push	r0
    371e:	11 24       	eor	r1, r1
    3720:	2f 93       	push	r18
    3722:	8f 93       	push	r24
    3724:	9f 93       	push	r25
    3726:	ef 93       	push	r30
    3728:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    372a:	e0 e2       	ldi	r30, 0x20	; 32
    372c:	f8 e0       	ldi	r31, 0x08	; 8
    372e:	85 81       	ldd	r24, Z+5	; 0x05
    3730:	8f 7d       	andi	r24, 0xDF	; 223
    3732:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    3734:	80 91 27 30 	lds	r24, 0x3027	; 0x803027 <send1_buf+0xfe>
    3738:	e0 91 28 30 	lds	r30, 0x3028	; 0x803028 <send1_buf+0xff>
    373c:	8e 17       	cp	r24, r30
    373e:	d1 f0       	breq	.+52     	; 0x3774 <__vector_27+0x5e>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    3740:	81 e0       	ldi	r24, 0x01	; 1
    3742:	8e 0f       	add	r24, r30
    3744:	80 93 28 30 	sts	0x3028, r24	; 0x803028 <send1_buf+0xff>
    3748:	f0 e0       	ldi	r31, 0x00	; 0
    374a:	e7 5d       	subi	r30, 0xD7	; 215
    374c:	f0 4d       	sbci	r31, 0xD0	; 208
    374e:	90 81       	ld	r25, Z
    3750:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    3754:	91 e0       	ldi	r25, 0x01	; 1
    3756:	8e 3f       	cpi	r24, 0xFE	; 254
    3758:	08 f4       	brcc	.+2      	; 0x375c <__vector_27+0x46>
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	91 95       	neg	r25
    375e:	29 2f       	mov	r18, r25
    3760:	22 0f       	add	r18, r18
    3762:	82 1b       	sub	r24, r18
    3764:	80 93 28 30 	sts	0x3028, r24	; 0x803028 <send1_buf+0xff>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    3768:	e0 e2       	ldi	r30, 0x20	; 32
    376a:	f8 e0       	ldi	r31, 0x08	; 8
    376c:	85 81       	ldd	r24, Z+5	; 0x05
    376e:	80 62       	ori	r24, 0x20	; 32
    3770:	85 83       	std	Z+5, r24	; 0x05
    3772:	03 c0       	rjmp	.+6      	; 0x377a <__vector_27+0x64>
	} else {
		send1_buf.done = YES;
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	80 93 2c 30 	sts	0x302C, r24	; 0x80302c <send1_buf+0x103>
	}

}
    377a:	ff 91       	pop	r31
    377c:	ef 91       	pop	r30
    377e:	9f 91       	pop	r25
    3780:	8f 91       	pop	r24
    3782:	2f 91       	pop	r18
    3784:	0f 90       	pop	r0
    3786:	0f be       	out	0x3f, r0	; 63
    3788:	0f 90       	pop	r0
    378a:	1f 90       	pop	r1
    378c:	18 95       	reti

0000378e <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    378e:	1f 92       	push	r1
    3790:	0f 92       	push	r0
    3792:	0f b6       	in	r0, 0x3f	; 63
    3794:	0f 92       	push	r0
    3796:	11 24       	eor	r1, r1
    3798:	8f 93       	push	r24
    379a:	9f 93       	push	r25
    379c:	af 93       	push	r26
    379e:	bf 93       	push	r27
    37a0:	ef 93       	push	r30
    37a2:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    37a4:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    37a8:	8d 30       	cpi	r24, 0x0D	; 13
    37aa:	21 f0       	breq	.+8      	; 0x37b4 <__vector_37+0x26>
    37ac:	e0 91 23 2e 	lds	r30, 0x2E23	; 0x802e23 <recv3_buf+0x102>
    37b0:	ed 3f       	cpi	r30, 0xFD	; 253
    37b2:	78 f0       	brcs	.+30     	; 0x37d2 <__vector_37+0x44>
		recv3_buf.done = YES;
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	80 93 24 2e 	sts	0x2E24, r24	; 0x802e24 <recv3_buf+0x103>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    37ba:	a3 e2       	ldi	r26, 0x23	; 35
    37bc:	be e2       	ldi	r27, 0x2E	; 46
    37be:	8c 91       	ld	r24, X
    37c0:	e8 2f       	mov	r30, r24
    37c2:	f0 e0       	ldi	r31, 0x00	; 0
    37c4:	ef 5d       	subi	r30, 0xDF	; 223
    37c6:	f2 4d       	sbci	r31, 0xD2	; 210
    37c8:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    37ca:	80 93 21 2e 	sts	0x2E21, r24	; 0x802e21 <recv3_buf+0x100>
		recv3_buf.nxfrd = 0;
    37ce:	1c 92       	st	X, r1
		return;
    37d0:	08 c0       	rjmp	.+16     	; 0x37e2 <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    37d2:	91 e0       	ldi	r25, 0x01	; 1
    37d4:	9e 0f       	add	r25, r30
    37d6:	90 93 23 2e 	sts	0x2E23, r25	; 0x802e23 <recv3_buf+0x102>
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	ef 5d       	subi	r30, 0xDF	; 223
    37de:	f2 4d       	sbci	r31, 0xD2	; 210
    37e0:	80 83       	st	Z, r24
	}

}
    37e2:	ff 91       	pop	r31
    37e4:	ef 91       	pop	r30
    37e6:	bf 91       	pop	r27
    37e8:	af 91       	pop	r26
    37ea:	9f 91       	pop	r25
    37ec:	8f 91       	pop	r24
    37ee:	0f 90       	pop	r0
    37f0:	0f be       	out	0x3f, r0	; 63
    37f2:	0f 90       	pop	r0
    37f4:	1f 90       	pop	r1
    37f6:	18 95       	reti

000037f8 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    37f8:	1f 92       	push	r1
    37fa:	0f 92       	push	r0
    37fc:	0f b6       	in	r0, 0x3f	; 63
    37fe:	0f 92       	push	r0
    3800:	11 24       	eor	r1, r1
    3802:	8f 93       	push	r24
    3804:	9f 93       	push	r25
    3806:	af 93       	push	r26
    3808:	bf 93       	push	r27
    380a:	ef 93       	push	r30
    380c:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    380e:	a7 e2       	ldi	r26, 0x27	; 39
    3810:	bf e2       	ldi	r27, 0x2F	; 47
    3812:	ec 91       	ld	r30, X
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	8e 0f       	add	r24, r30
    3818:	8c 93       	st	X, r24
    381a:	f0 e0       	ldi	r31, 0x00	; 0
    381c:	eb 5d       	subi	r30, 0xDB	; 219
    381e:	f1 4d       	sbci	r31, 0xD1	; 209
    3820:	90 81       	ld	r25, Z
    3822:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    3826:	90 91 25 2f 	lds	r25, 0x2F25	; 0x802f25 <send3_buf+0x100>
    382a:	89 17       	cp	r24, r25
    382c:	40 f0       	brcs	.+16     	; 0x383e <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    382e:	e0 e6       	ldi	r30, 0x60	; 96
    3830:	f8 e0       	ldi	r31, 0x08	; 8
    3832:	85 81       	ldd	r24, Z+5	; 0x05
    3834:	8f 7d       	andi	r24, 0xDF	; 223
    3836:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	80 93 28 2f 	sts	0x2F28, r24	; 0x802f28 <send3_buf+0x103>
	}

}
    383e:	ff 91       	pop	r31
    3840:	ef 91       	pop	r30
    3842:	bf 91       	pop	r27
    3844:	af 91       	pop	r26
    3846:	9f 91       	pop	r25
    3848:	8f 91       	pop	r24
    384a:	0f 90       	pop	r0
    384c:	0f be       	out	0x3f, r0	; 63
    384e:	0f 90       	pop	r0
    3850:	1f 90       	pop	r1
    3852:	18 95       	reti

00003854 <reboot>:
#include "wdt.h"

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
    3854:	88 ed       	ldi	r24, 0xD8	; 216
    3856:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    385e:	08 95       	ret

00003860 <__vector_29>:

}

ISR(PORTF_PORT_vect)
{
    3860:	1f 92       	push	r1
    3862:	0f 92       	push	r0
    3864:	0f b6       	in	r0, 0x3f	; 63
    3866:	0f 92       	push	r0
    3868:	11 24       	eor	r1, r1
    386a:	2f 93       	push	r18
    386c:	3f 93       	push	r19
    386e:	4f 93       	push	r20
    3870:	5f 93       	push	r21
    3872:	6f 93       	push	r22
    3874:	7f 93       	push	r23
    3876:	8f 93       	push	r24
    3878:	9f 93       	push	r25
    387a:	af 93       	push	r26
    387c:	bf 93       	push	r27
    387e:	ef 93       	push	r30
    3880:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
    3882:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
    3886:	86 ff       	sbrs	r24, 6
    3888:	05 c0       	rjmp	.+10     	; 0x3894 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
    388a:	80 e4       	ldi	r24, 0x40	; 64
    388c:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
    3890:	0e 94 2a 1c 	call	0x3854	; 0x3854 <reboot>
	}
}
    3894:	ff 91       	pop	r31
    3896:	ef 91       	pop	r30
    3898:	bf 91       	pop	r27
    389a:	af 91       	pop	r26
    389c:	9f 91       	pop	r25
    389e:	8f 91       	pop	r24
    38a0:	7f 91       	pop	r23
    38a2:	6f 91       	pop	r22
    38a4:	5f 91       	pop	r21
    38a6:	4f 91       	pop	r20
    38a8:	3f 91       	pop	r19
    38aa:	2f 91       	pop	r18
    38ac:	0f 90       	pop	r0
    38ae:	0f be       	out	0x3f, r0	; 63
    38b0:	0f 90       	pop	r0
    38b2:	1f 90       	pop	r1
    38b4:	18 95       	reti

000038b6 <__subsf3>:
    38b6:	50 58       	subi	r21, 0x80	; 128

000038b8 <__addsf3>:
    38b8:	bb 27       	eor	r27, r27
    38ba:	aa 27       	eor	r26, r26
    38bc:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__addsf3x>
    38c0:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__fp_round>
    38c4:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__fp_pscA>
    38c8:	38 f0       	brcs	.+14     	; 0x38d8 <__addsf3+0x20>
    38ca:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__fp_pscB>
    38ce:	20 f0       	brcs	.+8      	; 0x38d8 <__addsf3+0x20>
    38d0:	39 f4       	brne	.+14     	; 0x38e0 <__addsf3+0x28>
    38d2:	9f 3f       	cpi	r25, 0xFF	; 255
    38d4:	19 f4       	brne	.+6      	; 0x38dc <__addsf3+0x24>
    38d6:	26 f4       	brtc	.+8      	; 0x38e0 <__addsf3+0x28>
    38d8:	0c 94 a6 1d 	jmp	0x3b4c	; 0x3b4c <__fp_nan>
    38dc:	0e f4       	brtc	.+2      	; 0x38e0 <__addsf3+0x28>
    38de:	e0 95       	com	r30
    38e0:	e7 fb       	bst	r30, 7
    38e2:	0c 94 a0 1d 	jmp	0x3b40	; 0x3b40 <__fp_inf>

000038e6 <__addsf3x>:
    38e6:	e9 2f       	mov	r30, r25
    38e8:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <__fp_split3>
    38ec:	58 f3       	brcs	.-42     	; 0x38c4 <__addsf3+0xc>
    38ee:	ba 17       	cp	r27, r26
    38f0:	62 07       	cpc	r22, r18
    38f2:	73 07       	cpc	r23, r19
    38f4:	84 07       	cpc	r24, r20
    38f6:	95 07       	cpc	r25, r21
    38f8:	20 f0       	brcs	.+8      	; 0x3902 <__addsf3x+0x1c>
    38fa:	79 f4       	brne	.+30     	; 0x391a <__addsf3x+0x34>
    38fc:	a6 f5       	brtc	.+104    	; 0x3966 <__addsf3x+0x80>
    38fe:	0c 94 ea 1d 	jmp	0x3bd4	; 0x3bd4 <__fp_zero>
    3902:	0e f4       	brtc	.+2      	; 0x3906 <__addsf3x+0x20>
    3904:	e0 95       	com	r30
    3906:	0b 2e       	mov	r0, r27
    3908:	ba 2f       	mov	r27, r26
    390a:	a0 2d       	mov	r26, r0
    390c:	0b 01       	movw	r0, r22
    390e:	b9 01       	movw	r22, r18
    3910:	90 01       	movw	r18, r0
    3912:	0c 01       	movw	r0, r24
    3914:	ca 01       	movw	r24, r20
    3916:	a0 01       	movw	r20, r0
    3918:	11 24       	eor	r1, r1
    391a:	ff 27       	eor	r31, r31
    391c:	59 1b       	sub	r21, r25
    391e:	99 f0       	breq	.+38     	; 0x3946 <__addsf3x+0x60>
    3920:	59 3f       	cpi	r21, 0xF9	; 249
    3922:	50 f4       	brcc	.+20     	; 0x3938 <__addsf3x+0x52>
    3924:	50 3e       	cpi	r21, 0xE0	; 224
    3926:	68 f1       	brcs	.+90     	; 0x3982 <__addsf3x+0x9c>
    3928:	1a 16       	cp	r1, r26
    392a:	f0 40       	sbci	r31, 0x00	; 0
    392c:	a2 2f       	mov	r26, r18
    392e:	23 2f       	mov	r18, r19
    3930:	34 2f       	mov	r19, r20
    3932:	44 27       	eor	r20, r20
    3934:	58 5f       	subi	r21, 0xF8	; 248
    3936:	f3 cf       	rjmp	.-26     	; 0x391e <__addsf3x+0x38>
    3938:	46 95       	lsr	r20
    393a:	37 95       	ror	r19
    393c:	27 95       	ror	r18
    393e:	a7 95       	ror	r26
    3940:	f0 40       	sbci	r31, 0x00	; 0
    3942:	53 95       	inc	r21
    3944:	c9 f7       	brne	.-14     	; 0x3938 <__addsf3x+0x52>
    3946:	7e f4       	brtc	.+30     	; 0x3966 <__addsf3x+0x80>
    3948:	1f 16       	cp	r1, r31
    394a:	ba 0b       	sbc	r27, r26
    394c:	62 0b       	sbc	r22, r18
    394e:	73 0b       	sbc	r23, r19
    3950:	84 0b       	sbc	r24, r20
    3952:	ba f0       	brmi	.+46     	; 0x3982 <__addsf3x+0x9c>
    3954:	91 50       	subi	r25, 0x01	; 1
    3956:	a1 f0       	breq	.+40     	; 0x3980 <__addsf3x+0x9a>
    3958:	ff 0f       	add	r31, r31
    395a:	bb 1f       	adc	r27, r27
    395c:	66 1f       	adc	r22, r22
    395e:	77 1f       	adc	r23, r23
    3960:	88 1f       	adc	r24, r24
    3962:	c2 f7       	brpl	.-16     	; 0x3954 <__addsf3x+0x6e>
    3964:	0e c0       	rjmp	.+28     	; 0x3982 <__addsf3x+0x9c>
    3966:	ba 0f       	add	r27, r26
    3968:	62 1f       	adc	r22, r18
    396a:	73 1f       	adc	r23, r19
    396c:	84 1f       	adc	r24, r20
    396e:	48 f4       	brcc	.+18     	; 0x3982 <__addsf3x+0x9c>
    3970:	87 95       	ror	r24
    3972:	77 95       	ror	r23
    3974:	67 95       	ror	r22
    3976:	b7 95       	ror	r27
    3978:	f7 95       	ror	r31
    397a:	9e 3f       	cpi	r25, 0xFE	; 254
    397c:	08 f0       	brcs	.+2      	; 0x3980 <__addsf3x+0x9a>
    397e:	b0 cf       	rjmp	.-160    	; 0x38e0 <__addsf3+0x28>
    3980:	93 95       	inc	r25
    3982:	88 0f       	add	r24, r24
    3984:	08 f0       	brcs	.+2      	; 0x3988 <__addsf3x+0xa2>
    3986:	99 27       	eor	r25, r25
    3988:	ee 0f       	add	r30, r30
    398a:	97 95       	ror	r25
    398c:	87 95       	ror	r24
    398e:	08 95       	ret

00003990 <__cmpsf2>:
    3990:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <__fp_cmp>
    3994:	08 f4       	brcc	.+2      	; 0x3998 <__cmpsf2+0x8>
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	08 95       	ret

0000399a <__divsf3>:
    399a:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <__divsf3x>
    399e:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__fp_round>
    39a2:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__fp_pscB>
    39a6:	58 f0       	brcs	.+22     	; 0x39be <__divsf3+0x24>
    39a8:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__fp_pscA>
    39ac:	40 f0       	brcs	.+16     	; 0x39be <__divsf3+0x24>
    39ae:	29 f4       	brne	.+10     	; 0x39ba <__divsf3+0x20>
    39b0:	5f 3f       	cpi	r21, 0xFF	; 255
    39b2:	29 f0       	breq	.+10     	; 0x39be <__divsf3+0x24>
    39b4:	0c 94 a0 1d 	jmp	0x3b40	; 0x3b40 <__fp_inf>
    39b8:	51 11       	cpse	r21, r1
    39ba:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__fp_szero>
    39be:	0c 94 a6 1d 	jmp	0x3b4c	; 0x3b4c <__fp_nan>

000039c2 <__divsf3x>:
    39c2:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <__fp_split3>
    39c6:	68 f3       	brcs	.-38     	; 0x39a2 <__divsf3+0x8>

000039c8 <__divsf3_pse>:
    39c8:	99 23       	and	r25, r25
    39ca:	b1 f3       	breq	.-20     	; 0x39b8 <__divsf3+0x1e>
    39cc:	55 23       	and	r21, r21
    39ce:	91 f3       	breq	.-28     	; 0x39b4 <__divsf3+0x1a>
    39d0:	95 1b       	sub	r25, r21
    39d2:	55 0b       	sbc	r21, r21
    39d4:	bb 27       	eor	r27, r27
    39d6:	aa 27       	eor	r26, r26
    39d8:	62 17       	cp	r22, r18
    39da:	73 07       	cpc	r23, r19
    39dc:	84 07       	cpc	r24, r20
    39de:	38 f0       	brcs	.+14     	; 0x39ee <__divsf3_pse+0x26>
    39e0:	9f 5f       	subi	r25, 0xFF	; 255
    39e2:	5f 4f       	sbci	r21, 0xFF	; 255
    39e4:	22 0f       	add	r18, r18
    39e6:	33 1f       	adc	r19, r19
    39e8:	44 1f       	adc	r20, r20
    39ea:	aa 1f       	adc	r26, r26
    39ec:	a9 f3       	breq	.-22     	; 0x39d8 <__divsf3_pse+0x10>
    39ee:	35 d0       	rcall	.+106    	; 0x3a5a <__divsf3_pse+0x92>
    39f0:	0e 2e       	mov	r0, r30
    39f2:	3a f0       	brmi	.+14     	; 0x3a02 <__divsf3_pse+0x3a>
    39f4:	e0 e8       	ldi	r30, 0x80	; 128
    39f6:	32 d0       	rcall	.+100    	; 0x3a5c <__divsf3_pse+0x94>
    39f8:	91 50       	subi	r25, 0x01	; 1
    39fa:	50 40       	sbci	r21, 0x00	; 0
    39fc:	e6 95       	lsr	r30
    39fe:	00 1c       	adc	r0, r0
    3a00:	ca f7       	brpl	.-14     	; 0x39f4 <__divsf3_pse+0x2c>
    3a02:	2b d0       	rcall	.+86     	; 0x3a5a <__divsf3_pse+0x92>
    3a04:	fe 2f       	mov	r31, r30
    3a06:	29 d0       	rcall	.+82     	; 0x3a5a <__divsf3_pse+0x92>
    3a08:	66 0f       	add	r22, r22
    3a0a:	77 1f       	adc	r23, r23
    3a0c:	88 1f       	adc	r24, r24
    3a0e:	bb 1f       	adc	r27, r27
    3a10:	26 17       	cp	r18, r22
    3a12:	37 07       	cpc	r19, r23
    3a14:	48 07       	cpc	r20, r24
    3a16:	ab 07       	cpc	r26, r27
    3a18:	b0 e8       	ldi	r27, 0x80	; 128
    3a1a:	09 f0       	breq	.+2      	; 0x3a1e <__divsf3_pse+0x56>
    3a1c:	bb 0b       	sbc	r27, r27
    3a1e:	80 2d       	mov	r24, r0
    3a20:	bf 01       	movw	r22, r30
    3a22:	ff 27       	eor	r31, r31
    3a24:	93 58       	subi	r25, 0x83	; 131
    3a26:	5f 4f       	sbci	r21, 0xFF	; 255
    3a28:	3a f0       	brmi	.+14     	; 0x3a38 <__divsf3_pse+0x70>
    3a2a:	9e 3f       	cpi	r25, 0xFE	; 254
    3a2c:	51 05       	cpc	r21, r1
    3a2e:	78 f0       	brcs	.+30     	; 0x3a4e <__divsf3_pse+0x86>
    3a30:	0c 94 a0 1d 	jmp	0x3b40	; 0x3b40 <__fp_inf>
    3a34:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__fp_szero>
    3a38:	5f 3f       	cpi	r21, 0xFF	; 255
    3a3a:	e4 f3       	brlt	.-8      	; 0x3a34 <__divsf3_pse+0x6c>
    3a3c:	98 3e       	cpi	r25, 0xE8	; 232
    3a3e:	d4 f3       	brlt	.-12     	; 0x3a34 <__divsf3_pse+0x6c>
    3a40:	86 95       	lsr	r24
    3a42:	77 95       	ror	r23
    3a44:	67 95       	ror	r22
    3a46:	b7 95       	ror	r27
    3a48:	f7 95       	ror	r31
    3a4a:	9f 5f       	subi	r25, 0xFF	; 255
    3a4c:	c9 f7       	brne	.-14     	; 0x3a40 <__divsf3_pse+0x78>
    3a4e:	88 0f       	add	r24, r24
    3a50:	91 1d       	adc	r25, r1
    3a52:	96 95       	lsr	r25
    3a54:	87 95       	ror	r24
    3a56:	97 f9       	bld	r25, 7
    3a58:	08 95       	ret
    3a5a:	e1 e0       	ldi	r30, 0x01	; 1
    3a5c:	66 0f       	add	r22, r22
    3a5e:	77 1f       	adc	r23, r23
    3a60:	88 1f       	adc	r24, r24
    3a62:	bb 1f       	adc	r27, r27
    3a64:	62 17       	cp	r22, r18
    3a66:	73 07       	cpc	r23, r19
    3a68:	84 07       	cpc	r24, r20
    3a6a:	ba 07       	cpc	r27, r26
    3a6c:	20 f0       	brcs	.+8      	; 0x3a76 <__divsf3_pse+0xae>
    3a6e:	62 1b       	sub	r22, r18
    3a70:	73 0b       	sbc	r23, r19
    3a72:	84 0b       	sbc	r24, r20
    3a74:	ba 0b       	sbc	r27, r26
    3a76:	ee 1f       	adc	r30, r30
    3a78:	88 f7       	brcc	.-30     	; 0x3a5c <__divsf3_pse+0x94>
    3a7a:	e0 95       	com	r30
    3a7c:	08 95       	ret

00003a7e <__floatunsisf>:
    3a7e:	e8 94       	clt
    3a80:	09 c0       	rjmp	.+18     	; 0x3a94 <__floatsisf+0x12>

00003a82 <__floatsisf>:
    3a82:	97 fb       	bst	r25, 7
    3a84:	3e f4       	brtc	.+14     	; 0x3a94 <__floatsisf+0x12>
    3a86:	90 95       	com	r25
    3a88:	80 95       	com	r24
    3a8a:	70 95       	com	r23
    3a8c:	61 95       	neg	r22
    3a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a90:	8f 4f       	sbci	r24, 0xFF	; 255
    3a92:	9f 4f       	sbci	r25, 0xFF	; 255
    3a94:	99 23       	and	r25, r25
    3a96:	a9 f0       	breq	.+42     	; 0x3ac2 <__floatsisf+0x40>
    3a98:	f9 2f       	mov	r31, r25
    3a9a:	96 e9       	ldi	r25, 0x96	; 150
    3a9c:	bb 27       	eor	r27, r27
    3a9e:	93 95       	inc	r25
    3aa0:	f6 95       	lsr	r31
    3aa2:	87 95       	ror	r24
    3aa4:	77 95       	ror	r23
    3aa6:	67 95       	ror	r22
    3aa8:	b7 95       	ror	r27
    3aaa:	f1 11       	cpse	r31, r1
    3aac:	f8 cf       	rjmp	.-16     	; 0x3a9e <__floatsisf+0x1c>
    3aae:	fa f4       	brpl	.+62     	; 0x3aee <__floatsisf+0x6c>
    3ab0:	bb 0f       	add	r27, r27
    3ab2:	11 f4       	brne	.+4      	; 0x3ab8 <__floatsisf+0x36>
    3ab4:	60 ff       	sbrs	r22, 0
    3ab6:	1b c0       	rjmp	.+54     	; 0x3aee <__floatsisf+0x6c>
    3ab8:	6f 5f       	subi	r22, 0xFF	; 255
    3aba:	7f 4f       	sbci	r23, 0xFF	; 255
    3abc:	8f 4f       	sbci	r24, 0xFF	; 255
    3abe:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac0:	16 c0       	rjmp	.+44     	; 0x3aee <__floatsisf+0x6c>
    3ac2:	88 23       	and	r24, r24
    3ac4:	11 f0       	breq	.+4      	; 0x3aca <__floatsisf+0x48>
    3ac6:	96 e9       	ldi	r25, 0x96	; 150
    3ac8:	11 c0       	rjmp	.+34     	; 0x3aec <__floatsisf+0x6a>
    3aca:	77 23       	and	r23, r23
    3acc:	21 f0       	breq	.+8      	; 0x3ad6 <__floatsisf+0x54>
    3ace:	9e e8       	ldi	r25, 0x8E	; 142
    3ad0:	87 2f       	mov	r24, r23
    3ad2:	76 2f       	mov	r23, r22
    3ad4:	05 c0       	rjmp	.+10     	; 0x3ae0 <__floatsisf+0x5e>
    3ad6:	66 23       	and	r22, r22
    3ad8:	71 f0       	breq	.+28     	; 0x3af6 <__floatsisf+0x74>
    3ada:	96 e8       	ldi	r25, 0x86	; 134
    3adc:	86 2f       	mov	r24, r22
    3ade:	70 e0       	ldi	r23, 0x00	; 0
    3ae0:	60 e0       	ldi	r22, 0x00	; 0
    3ae2:	2a f0       	brmi	.+10     	; 0x3aee <__floatsisf+0x6c>
    3ae4:	9a 95       	dec	r25
    3ae6:	66 0f       	add	r22, r22
    3ae8:	77 1f       	adc	r23, r23
    3aea:	88 1f       	adc	r24, r24
    3aec:	da f7       	brpl	.-10     	; 0x3ae4 <__floatsisf+0x62>
    3aee:	88 0f       	add	r24, r24
    3af0:	96 95       	lsr	r25
    3af2:	87 95       	ror	r24
    3af4:	97 f9       	bld	r25, 7
    3af6:	08 95       	ret

00003af8 <__fp_cmp>:
    3af8:	99 0f       	add	r25, r25
    3afa:	00 08       	sbc	r0, r0
    3afc:	55 0f       	add	r21, r21
    3afe:	aa 0b       	sbc	r26, r26
    3b00:	e0 e8       	ldi	r30, 0x80	; 128
    3b02:	fe ef       	ldi	r31, 0xFE	; 254
    3b04:	16 16       	cp	r1, r22
    3b06:	17 06       	cpc	r1, r23
    3b08:	e8 07       	cpc	r30, r24
    3b0a:	f9 07       	cpc	r31, r25
    3b0c:	c0 f0       	brcs	.+48     	; 0x3b3e <__fp_cmp+0x46>
    3b0e:	12 16       	cp	r1, r18
    3b10:	13 06       	cpc	r1, r19
    3b12:	e4 07       	cpc	r30, r20
    3b14:	f5 07       	cpc	r31, r21
    3b16:	98 f0       	brcs	.+38     	; 0x3b3e <__fp_cmp+0x46>
    3b18:	62 1b       	sub	r22, r18
    3b1a:	73 0b       	sbc	r23, r19
    3b1c:	84 0b       	sbc	r24, r20
    3b1e:	95 0b       	sbc	r25, r21
    3b20:	39 f4       	brne	.+14     	; 0x3b30 <__fp_cmp+0x38>
    3b22:	0a 26       	eor	r0, r26
    3b24:	61 f0       	breq	.+24     	; 0x3b3e <__fp_cmp+0x46>
    3b26:	23 2b       	or	r18, r19
    3b28:	24 2b       	or	r18, r20
    3b2a:	25 2b       	or	r18, r21
    3b2c:	21 f4       	brne	.+8      	; 0x3b36 <__fp_cmp+0x3e>
    3b2e:	08 95       	ret
    3b30:	0a 26       	eor	r0, r26
    3b32:	09 f4       	brne	.+2      	; 0x3b36 <__fp_cmp+0x3e>
    3b34:	a1 40       	sbci	r26, 0x01	; 1
    3b36:	a6 95       	lsr	r26
    3b38:	8f ef       	ldi	r24, 0xFF	; 255
    3b3a:	81 1d       	adc	r24, r1
    3b3c:	81 1d       	adc	r24, r1
    3b3e:	08 95       	ret

00003b40 <__fp_inf>:
    3b40:	97 f9       	bld	r25, 7
    3b42:	9f 67       	ori	r25, 0x7F	; 127
    3b44:	80 e8       	ldi	r24, 0x80	; 128
    3b46:	70 e0       	ldi	r23, 0x00	; 0
    3b48:	60 e0       	ldi	r22, 0x00	; 0
    3b4a:	08 95       	ret

00003b4c <__fp_nan>:
    3b4c:	9f ef       	ldi	r25, 0xFF	; 255
    3b4e:	80 ec       	ldi	r24, 0xC0	; 192
    3b50:	08 95       	ret

00003b52 <__fp_pscA>:
    3b52:	00 24       	eor	r0, r0
    3b54:	0a 94       	dec	r0
    3b56:	16 16       	cp	r1, r22
    3b58:	17 06       	cpc	r1, r23
    3b5a:	18 06       	cpc	r1, r24
    3b5c:	09 06       	cpc	r0, r25
    3b5e:	08 95       	ret

00003b60 <__fp_pscB>:
    3b60:	00 24       	eor	r0, r0
    3b62:	0a 94       	dec	r0
    3b64:	12 16       	cp	r1, r18
    3b66:	13 06       	cpc	r1, r19
    3b68:	14 06       	cpc	r1, r20
    3b6a:	05 06       	cpc	r0, r21
    3b6c:	08 95       	ret

00003b6e <__fp_round>:
    3b6e:	09 2e       	mov	r0, r25
    3b70:	03 94       	inc	r0
    3b72:	00 0c       	add	r0, r0
    3b74:	11 f4       	brne	.+4      	; 0x3b7a <__fp_round+0xc>
    3b76:	88 23       	and	r24, r24
    3b78:	52 f0       	brmi	.+20     	; 0x3b8e <__fp_round+0x20>
    3b7a:	bb 0f       	add	r27, r27
    3b7c:	40 f4       	brcc	.+16     	; 0x3b8e <__fp_round+0x20>
    3b7e:	bf 2b       	or	r27, r31
    3b80:	11 f4       	brne	.+4      	; 0x3b86 <__fp_round+0x18>
    3b82:	60 ff       	sbrs	r22, 0
    3b84:	04 c0       	rjmp	.+8      	; 0x3b8e <__fp_round+0x20>
    3b86:	6f 5f       	subi	r22, 0xFF	; 255
    3b88:	7f 4f       	sbci	r23, 0xFF	; 255
    3b8a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b8e:	08 95       	ret

00003b90 <__fp_split3>:
    3b90:	57 fd       	sbrc	r21, 7
    3b92:	90 58       	subi	r25, 0x80	; 128
    3b94:	44 0f       	add	r20, r20
    3b96:	55 1f       	adc	r21, r21
    3b98:	59 f0       	breq	.+22     	; 0x3bb0 <__fp_splitA+0x10>
    3b9a:	5f 3f       	cpi	r21, 0xFF	; 255
    3b9c:	71 f0       	breq	.+28     	; 0x3bba <__fp_splitA+0x1a>
    3b9e:	47 95       	ror	r20

00003ba0 <__fp_splitA>:
    3ba0:	88 0f       	add	r24, r24
    3ba2:	97 fb       	bst	r25, 7
    3ba4:	99 1f       	adc	r25, r25
    3ba6:	61 f0       	breq	.+24     	; 0x3bc0 <__fp_splitA+0x20>
    3ba8:	9f 3f       	cpi	r25, 0xFF	; 255
    3baa:	79 f0       	breq	.+30     	; 0x3bca <__fp_splitA+0x2a>
    3bac:	87 95       	ror	r24
    3bae:	08 95       	ret
    3bb0:	12 16       	cp	r1, r18
    3bb2:	13 06       	cpc	r1, r19
    3bb4:	14 06       	cpc	r1, r20
    3bb6:	55 1f       	adc	r21, r21
    3bb8:	f2 cf       	rjmp	.-28     	; 0x3b9e <__fp_split3+0xe>
    3bba:	46 95       	lsr	r20
    3bbc:	f1 df       	rcall	.-30     	; 0x3ba0 <__fp_splitA>
    3bbe:	08 c0       	rjmp	.+16     	; 0x3bd0 <__fp_splitA+0x30>
    3bc0:	16 16       	cp	r1, r22
    3bc2:	17 06       	cpc	r1, r23
    3bc4:	18 06       	cpc	r1, r24
    3bc6:	99 1f       	adc	r25, r25
    3bc8:	f1 cf       	rjmp	.-30     	; 0x3bac <__fp_splitA+0xc>
    3bca:	86 95       	lsr	r24
    3bcc:	71 05       	cpc	r23, r1
    3bce:	61 05       	cpc	r22, r1
    3bd0:	08 94       	sec
    3bd2:	08 95       	ret

00003bd4 <__fp_zero>:
    3bd4:	e8 94       	clt

00003bd6 <__fp_szero>:
    3bd6:	bb 27       	eor	r27, r27
    3bd8:	66 27       	eor	r22, r22
    3bda:	77 27       	eor	r23, r23
    3bdc:	cb 01       	movw	r24, r22
    3bde:	97 f9       	bld	r25, 7
    3be0:	08 95       	ret

00003be2 <__gesf2>:
    3be2:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <__fp_cmp>
    3be6:	08 f4       	brcc	.+2      	; 0x3bea <__gesf2+0x8>
    3be8:	8f ef       	ldi	r24, 0xFF	; 255
    3bea:	08 95       	ret

00003bec <__mulsf3>:
    3bec:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <__mulsf3x>
    3bf0:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__fp_round>
    3bf4:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <__fp_pscA>
    3bf8:	38 f0       	brcs	.+14     	; 0x3c08 <__mulsf3+0x1c>
    3bfa:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <__fp_pscB>
    3bfe:	20 f0       	brcs	.+8      	; 0x3c08 <__mulsf3+0x1c>
    3c00:	95 23       	and	r25, r21
    3c02:	11 f0       	breq	.+4      	; 0x3c08 <__mulsf3+0x1c>
    3c04:	0c 94 a0 1d 	jmp	0x3b40	; 0x3b40 <__fp_inf>
    3c08:	0c 94 a6 1d 	jmp	0x3b4c	; 0x3b4c <__fp_nan>
    3c0c:	11 24       	eor	r1, r1
    3c0e:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__fp_szero>

00003c12 <__mulsf3x>:
    3c12:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <__fp_split3>
    3c16:	70 f3       	brcs	.-36     	; 0x3bf4 <__mulsf3+0x8>

00003c18 <__mulsf3_pse>:
    3c18:	95 9f       	mul	r25, r21
    3c1a:	c1 f3       	breq	.-16     	; 0x3c0c <__mulsf3+0x20>
    3c1c:	95 0f       	add	r25, r21
    3c1e:	50 e0       	ldi	r21, 0x00	; 0
    3c20:	55 1f       	adc	r21, r21
    3c22:	62 9f       	mul	r22, r18
    3c24:	f0 01       	movw	r30, r0
    3c26:	72 9f       	mul	r23, r18
    3c28:	bb 27       	eor	r27, r27
    3c2a:	f0 0d       	add	r31, r0
    3c2c:	b1 1d       	adc	r27, r1
    3c2e:	63 9f       	mul	r22, r19
    3c30:	aa 27       	eor	r26, r26
    3c32:	f0 0d       	add	r31, r0
    3c34:	b1 1d       	adc	r27, r1
    3c36:	aa 1f       	adc	r26, r26
    3c38:	64 9f       	mul	r22, r20
    3c3a:	66 27       	eor	r22, r22
    3c3c:	b0 0d       	add	r27, r0
    3c3e:	a1 1d       	adc	r26, r1
    3c40:	66 1f       	adc	r22, r22
    3c42:	82 9f       	mul	r24, r18
    3c44:	22 27       	eor	r18, r18
    3c46:	b0 0d       	add	r27, r0
    3c48:	a1 1d       	adc	r26, r1
    3c4a:	62 1f       	adc	r22, r18
    3c4c:	73 9f       	mul	r23, r19
    3c4e:	b0 0d       	add	r27, r0
    3c50:	a1 1d       	adc	r26, r1
    3c52:	62 1f       	adc	r22, r18
    3c54:	83 9f       	mul	r24, r19
    3c56:	a0 0d       	add	r26, r0
    3c58:	61 1d       	adc	r22, r1
    3c5a:	22 1f       	adc	r18, r18
    3c5c:	74 9f       	mul	r23, r20
    3c5e:	33 27       	eor	r19, r19
    3c60:	a0 0d       	add	r26, r0
    3c62:	61 1d       	adc	r22, r1
    3c64:	23 1f       	adc	r18, r19
    3c66:	84 9f       	mul	r24, r20
    3c68:	60 0d       	add	r22, r0
    3c6a:	21 1d       	adc	r18, r1
    3c6c:	82 2f       	mov	r24, r18
    3c6e:	76 2f       	mov	r23, r22
    3c70:	6a 2f       	mov	r22, r26
    3c72:	11 24       	eor	r1, r1
    3c74:	9f 57       	subi	r25, 0x7F	; 127
    3c76:	50 40       	sbci	r21, 0x00	; 0
    3c78:	9a f0       	brmi	.+38     	; 0x3ca0 <__mulsf3_pse+0x88>
    3c7a:	f1 f0       	breq	.+60     	; 0x3cb8 <__mulsf3_pse+0xa0>
    3c7c:	88 23       	and	r24, r24
    3c7e:	4a f0       	brmi	.+18     	; 0x3c92 <__mulsf3_pse+0x7a>
    3c80:	ee 0f       	add	r30, r30
    3c82:	ff 1f       	adc	r31, r31
    3c84:	bb 1f       	adc	r27, r27
    3c86:	66 1f       	adc	r22, r22
    3c88:	77 1f       	adc	r23, r23
    3c8a:	88 1f       	adc	r24, r24
    3c8c:	91 50       	subi	r25, 0x01	; 1
    3c8e:	50 40       	sbci	r21, 0x00	; 0
    3c90:	a9 f7       	brne	.-22     	; 0x3c7c <__mulsf3_pse+0x64>
    3c92:	9e 3f       	cpi	r25, 0xFE	; 254
    3c94:	51 05       	cpc	r21, r1
    3c96:	80 f0       	brcs	.+32     	; 0x3cb8 <__mulsf3_pse+0xa0>
    3c98:	0c 94 a0 1d 	jmp	0x3b40	; 0x3b40 <__fp_inf>
    3c9c:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__fp_szero>
    3ca0:	5f 3f       	cpi	r21, 0xFF	; 255
    3ca2:	e4 f3       	brlt	.-8      	; 0x3c9c <__mulsf3_pse+0x84>
    3ca4:	98 3e       	cpi	r25, 0xE8	; 232
    3ca6:	d4 f3       	brlt	.-12     	; 0x3c9c <__mulsf3_pse+0x84>
    3ca8:	86 95       	lsr	r24
    3caa:	77 95       	ror	r23
    3cac:	67 95       	ror	r22
    3cae:	b7 95       	ror	r27
    3cb0:	f7 95       	ror	r31
    3cb2:	e7 95       	ror	r30
    3cb4:	9f 5f       	subi	r25, 0xFF	; 255
    3cb6:	c1 f7       	brne	.-16     	; 0x3ca8 <__mulsf3_pse+0x90>
    3cb8:	fe 2b       	or	r31, r30
    3cba:	88 0f       	add	r24, r24
    3cbc:	91 1d       	adc	r25, r1
    3cbe:	96 95       	lsr	r25
    3cc0:	87 95       	ror	r24
    3cc2:	97 f9       	bld	r25, 7
    3cc4:	08 95       	ret

00003cc6 <vfprintf>:
    3cc6:	a0 e1       	ldi	r26, 0x10	; 16
    3cc8:	b0 e0       	ldi	r27, 0x00	; 0
    3cca:	e9 e6       	ldi	r30, 0x69	; 105
    3ccc:	fe e1       	ldi	r31, 0x1E	; 30
    3cce:	0c 94 24 22 	jmp	0x4448	; 0x4448 <__prologue_saves__>
    3cd2:	7c 01       	movw	r14, r24
    3cd4:	1b 01       	movw	r2, r22
    3cd6:	6a 01       	movw	r12, r20
    3cd8:	fc 01       	movw	r30, r24
    3cda:	16 82       	std	Z+6, r1	; 0x06
    3cdc:	17 82       	std	Z+7, r1	; 0x07
    3cde:	83 81       	ldd	r24, Z+3	; 0x03
    3ce0:	81 ff       	sbrs	r24, 1
    3ce2:	44 c3       	rjmp	.+1672   	; 0x436c <__RODATA_PM_OFFSET__+0x36c>
    3ce4:	9e 01       	movw	r18, r28
    3ce6:	2f 5f       	subi	r18, 0xFF	; 255
    3ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cea:	39 01       	movw	r6, r18
    3cec:	f7 01       	movw	r30, r14
    3cee:	93 81       	ldd	r25, Z+3	; 0x03
    3cf0:	f1 01       	movw	r30, r2
    3cf2:	93 fd       	sbrc	r25, 3
    3cf4:	85 91       	lpm	r24, Z+
    3cf6:	93 ff       	sbrs	r25, 3
    3cf8:	81 91       	ld	r24, Z+
    3cfa:	1f 01       	movw	r2, r30
    3cfc:	88 23       	and	r24, r24
    3cfe:	09 f4       	brne	.+2      	; 0x3d02 <vfprintf+0x3c>
    3d00:	31 c3       	rjmp	.+1634   	; 0x4364 <__RODATA_PM_OFFSET__+0x364>
    3d02:	85 32       	cpi	r24, 0x25	; 37
    3d04:	39 f4       	brne	.+14     	; 0x3d14 <vfprintf+0x4e>
    3d06:	93 fd       	sbrc	r25, 3
    3d08:	85 91       	lpm	r24, Z+
    3d0a:	93 ff       	sbrs	r25, 3
    3d0c:	81 91       	ld	r24, Z+
    3d0e:	1f 01       	movw	r2, r30
    3d10:	85 32       	cpi	r24, 0x25	; 37
    3d12:	39 f4       	brne	.+14     	; 0x3d22 <vfprintf+0x5c>
    3d14:	b7 01       	movw	r22, r14
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    3d1c:	56 01       	movw	r10, r12
    3d1e:	65 01       	movw	r12, r10
    3d20:	e5 cf       	rjmp	.-54     	; 0x3cec <vfprintf+0x26>
    3d22:	10 e0       	ldi	r17, 0x00	; 0
    3d24:	51 2c       	mov	r5, r1
    3d26:	91 2c       	mov	r9, r1
    3d28:	ff e1       	ldi	r31, 0x1F	; 31
    3d2a:	f9 15       	cp	r31, r9
    3d2c:	d8 f0       	brcs	.+54     	; 0x3d64 <vfprintf+0x9e>
    3d2e:	8b 32       	cpi	r24, 0x2B	; 43
    3d30:	79 f0       	breq	.+30     	; 0x3d50 <vfprintf+0x8a>
    3d32:	38 f4       	brcc	.+14     	; 0x3d42 <vfprintf+0x7c>
    3d34:	80 32       	cpi	r24, 0x20	; 32
    3d36:	79 f0       	breq	.+30     	; 0x3d56 <vfprintf+0x90>
    3d38:	83 32       	cpi	r24, 0x23	; 35
    3d3a:	a1 f4       	brne	.+40     	; 0x3d64 <vfprintf+0x9e>
    3d3c:	f9 2d       	mov	r31, r9
    3d3e:	f0 61       	ori	r31, 0x10	; 16
    3d40:	2e c0       	rjmp	.+92     	; 0x3d9e <vfprintf+0xd8>
    3d42:	8d 32       	cpi	r24, 0x2D	; 45
    3d44:	61 f0       	breq	.+24     	; 0x3d5e <vfprintf+0x98>
    3d46:	80 33       	cpi	r24, 0x30	; 48
    3d48:	69 f4       	brne	.+26     	; 0x3d64 <vfprintf+0x9e>
    3d4a:	29 2d       	mov	r18, r9
    3d4c:	21 60       	ori	r18, 0x01	; 1
    3d4e:	2d c0       	rjmp	.+90     	; 0x3daa <vfprintf+0xe4>
    3d50:	39 2d       	mov	r19, r9
    3d52:	32 60       	ori	r19, 0x02	; 2
    3d54:	93 2e       	mov	r9, r19
    3d56:	89 2d       	mov	r24, r9
    3d58:	84 60       	ori	r24, 0x04	; 4
    3d5a:	98 2e       	mov	r9, r24
    3d5c:	2a c0       	rjmp	.+84     	; 0x3db2 <vfprintf+0xec>
    3d5e:	e9 2d       	mov	r30, r9
    3d60:	e8 60       	ori	r30, 0x08	; 8
    3d62:	15 c0       	rjmp	.+42     	; 0x3d8e <vfprintf+0xc8>
    3d64:	97 fc       	sbrc	r9, 7
    3d66:	2d c0       	rjmp	.+90     	; 0x3dc2 <vfprintf+0xfc>
    3d68:	20 ed       	ldi	r18, 0xD0	; 208
    3d6a:	28 0f       	add	r18, r24
    3d6c:	2a 30       	cpi	r18, 0x0A	; 10
    3d6e:	88 f4       	brcc	.+34     	; 0x3d92 <vfprintf+0xcc>
    3d70:	96 fe       	sbrs	r9, 6
    3d72:	06 c0       	rjmp	.+12     	; 0x3d80 <vfprintf+0xba>
    3d74:	3a e0       	ldi	r19, 0x0A	; 10
    3d76:	13 9f       	mul	r17, r19
    3d78:	20 0d       	add	r18, r0
    3d7a:	11 24       	eor	r1, r1
    3d7c:	12 2f       	mov	r17, r18
    3d7e:	19 c0       	rjmp	.+50     	; 0x3db2 <vfprintf+0xec>
    3d80:	8a e0       	ldi	r24, 0x0A	; 10
    3d82:	58 9e       	mul	r5, r24
    3d84:	20 0d       	add	r18, r0
    3d86:	11 24       	eor	r1, r1
    3d88:	52 2e       	mov	r5, r18
    3d8a:	e9 2d       	mov	r30, r9
    3d8c:	e0 62       	ori	r30, 0x20	; 32
    3d8e:	9e 2e       	mov	r9, r30
    3d90:	10 c0       	rjmp	.+32     	; 0x3db2 <vfprintf+0xec>
    3d92:	8e 32       	cpi	r24, 0x2E	; 46
    3d94:	31 f4       	brne	.+12     	; 0x3da2 <vfprintf+0xdc>
    3d96:	96 fc       	sbrc	r9, 6
    3d98:	e5 c2       	rjmp	.+1482   	; 0x4364 <__RODATA_PM_OFFSET__+0x364>
    3d9a:	f9 2d       	mov	r31, r9
    3d9c:	f0 64       	ori	r31, 0x40	; 64
    3d9e:	9f 2e       	mov	r9, r31
    3da0:	08 c0       	rjmp	.+16     	; 0x3db2 <vfprintf+0xec>
    3da2:	8c 36       	cpi	r24, 0x6C	; 108
    3da4:	21 f4       	brne	.+8      	; 0x3dae <vfprintf+0xe8>
    3da6:	29 2d       	mov	r18, r9
    3da8:	20 68       	ori	r18, 0x80	; 128
    3daa:	92 2e       	mov	r9, r18
    3dac:	02 c0       	rjmp	.+4      	; 0x3db2 <vfprintf+0xec>
    3dae:	88 36       	cpi	r24, 0x68	; 104
    3db0:	41 f4       	brne	.+16     	; 0x3dc2 <vfprintf+0xfc>
    3db2:	f1 01       	movw	r30, r2
    3db4:	93 fd       	sbrc	r25, 3
    3db6:	85 91       	lpm	r24, Z+
    3db8:	93 ff       	sbrs	r25, 3
    3dba:	81 91       	ld	r24, Z+
    3dbc:	1f 01       	movw	r2, r30
    3dbe:	81 11       	cpse	r24, r1
    3dc0:	b3 cf       	rjmp	.-154    	; 0x3d28 <vfprintf+0x62>
    3dc2:	9b eb       	ldi	r25, 0xBB	; 187
    3dc4:	98 0f       	add	r25, r24
    3dc6:	93 30       	cpi	r25, 0x03	; 3
    3dc8:	20 f4       	brcc	.+8      	; 0x3dd2 <vfprintf+0x10c>
    3dca:	99 2d       	mov	r25, r9
    3dcc:	90 61       	ori	r25, 0x10	; 16
    3dce:	80 5e       	subi	r24, 0xE0	; 224
    3dd0:	07 c0       	rjmp	.+14     	; 0x3de0 <vfprintf+0x11a>
    3dd2:	9b e9       	ldi	r25, 0x9B	; 155
    3dd4:	98 0f       	add	r25, r24
    3dd6:	93 30       	cpi	r25, 0x03	; 3
    3dd8:	08 f0       	brcs	.+2      	; 0x3ddc <vfprintf+0x116>
    3dda:	66 c1       	rjmp	.+716    	; 0x40a8 <__RODATA_PM_OFFSET__+0xa8>
    3ddc:	99 2d       	mov	r25, r9
    3dde:	9f 7e       	andi	r25, 0xEF	; 239
    3de0:	96 ff       	sbrs	r25, 6
    3de2:	16 e0       	ldi	r17, 0x06	; 6
    3de4:	9f 73       	andi	r25, 0x3F	; 63
    3de6:	99 2e       	mov	r9, r25
    3de8:	85 36       	cpi	r24, 0x65	; 101
    3dea:	19 f4       	brne	.+6      	; 0x3df2 <vfprintf+0x12c>
    3dec:	90 64       	ori	r25, 0x40	; 64
    3dee:	99 2e       	mov	r9, r25
    3df0:	08 c0       	rjmp	.+16     	; 0x3e02 <vfprintf+0x13c>
    3df2:	86 36       	cpi	r24, 0x66	; 102
    3df4:	21 f4       	brne	.+8      	; 0x3dfe <vfprintf+0x138>
    3df6:	39 2f       	mov	r19, r25
    3df8:	30 68       	ori	r19, 0x80	; 128
    3dfa:	93 2e       	mov	r9, r19
    3dfc:	02 c0       	rjmp	.+4      	; 0x3e02 <vfprintf+0x13c>
    3dfe:	11 11       	cpse	r17, r1
    3e00:	11 50       	subi	r17, 0x01	; 1
    3e02:	97 fe       	sbrs	r9, 7
    3e04:	07 c0       	rjmp	.+14     	; 0x3e14 <vfprintf+0x14e>
    3e06:	1c 33       	cpi	r17, 0x3C	; 60
    3e08:	50 f4       	brcc	.+20     	; 0x3e1e <vfprintf+0x158>
    3e0a:	44 24       	eor	r4, r4
    3e0c:	43 94       	inc	r4
    3e0e:	41 0e       	add	r4, r17
    3e10:	27 e0       	ldi	r18, 0x07	; 7
    3e12:	0b c0       	rjmp	.+22     	; 0x3e2a <vfprintf+0x164>
    3e14:	18 30       	cpi	r17, 0x08	; 8
    3e16:	38 f0       	brcs	.+14     	; 0x3e26 <vfprintf+0x160>
    3e18:	27 e0       	ldi	r18, 0x07	; 7
    3e1a:	17 e0       	ldi	r17, 0x07	; 7
    3e1c:	05 c0       	rjmp	.+10     	; 0x3e28 <vfprintf+0x162>
    3e1e:	27 e0       	ldi	r18, 0x07	; 7
    3e20:	9c e3       	ldi	r25, 0x3C	; 60
    3e22:	49 2e       	mov	r4, r25
    3e24:	02 c0       	rjmp	.+4      	; 0x3e2a <vfprintf+0x164>
    3e26:	21 2f       	mov	r18, r17
    3e28:	41 2c       	mov	r4, r1
    3e2a:	56 01       	movw	r10, r12
    3e2c:	84 e0       	ldi	r24, 0x04	; 4
    3e2e:	a8 0e       	add	r10, r24
    3e30:	b1 1c       	adc	r11, r1
    3e32:	f6 01       	movw	r30, r12
    3e34:	60 81       	ld	r22, Z
    3e36:	71 81       	ldd	r23, Z+1	; 0x01
    3e38:	82 81       	ldd	r24, Z+2	; 0x02
    3e3a:	93 81       	ldd	r25, Z+3	; 0x03
    3e3c:	04 2d       	mov	r16, r4
    3e3e:	a3 01       	movw	r20, r6
    3e40:	0e 94 c1 22 	call	0x4582	; 0x4582 <__ftoa_engine>
    3e44:	6c 01       	movw	r12, r24
    3e46:	f9 81       	ldd	r31, Y+1	; 0x01
    3e48:	fc 87       	std	Y+12, r31	; 0x0c
    3e4a:	f0 ff       	sbrs	r31, 0
    3e4c:	02 c0       	rjmp	.+4      	; 0x3e52 <vfprintf+0x18c>
    3e4e:	f3 ff       	sbrs	r31, 3
    3e50:	06 c0       	rjmp	.+12     	; 0x3e5e <vfprintf+0x198>
    3e52:	91 fc       	sbrc	r9, 1
    3e54:	06 c0       	rjmp	.+12     	; 0x3e62 <vfprintf+0x19c>
    3e56:	92 fe       	sbrs	r9, 2
    3e58:	06 c0       	rjmp	.+12     	; 0x3e66 <vfprintf+0x1a0>
    3e5a:	00 e2       	ldi	r16, 0x20	; 32
    3e5c:	05 c0       	rjmp	.+10     	; 0x3e68 <vfprintf+0x1a2>
    3e5e:	0d e2       	ldi	r16, 0x2D	; 45
    3e60:	03 c0       	rjmp	.+6      	; 0x3e68 <vfprintf+0x1a2>
    3e62:	0b e2       	ldi	r16, 0x2B	; 43
    3e64:	01 c0       	rjmp	.+2      	; 0x3e68 <vfprintf+0x1a2>
    3e66:	00 e0       	ldi	r16, 0x00	; 0
    3e68:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e6a:	8c 70       	andi	r24, 0x0C	; 12
    3e6c:	19 f0       	breq	.+6      	; 0x3e74 <vfprintf+0x1ae>
    3e6e:	01 11       	cpse	r16, r1
    3e70:	5a c2       	rjmp	.+1204   	; 0x4326 <__RODATA_PM_OFFSET__+0x326>
    3e72:	9b c2       	rjmp	.+1334   	; 0x43aa <__RODATA_PM_OFFSET__+0x3aa>
    3e74:	97 fe       	sbrs	r9, 7
    3e76:	10 c0       	rjmp	.+32     	; 0x3e98 <vfprintf+0x1d2>
    3e78:	4c 0c       	add	r4, r12
    3e7a:	fc 85       	ldd	r31, Y+12	; 0x0c
    3e7c:	f4 ff       	sbrs	r31, 4
    3e7e:	04 c0       	rjmp	.+8      	; 0x3e88 <vfprintf+0x1c2>
    3e80:	8a 81       	ldd	r24, Y+2	; 0x02
    3e82:	81 33       	cpi	r24, 0x31	; 49
    3e84:	09 f4       	brne	.+2      	; 0x3e88 <vfprintf+0x1c2>
    3e86:	4a 94       	dec	r4
    3e88:	14 14       	cp	r1, r4
    3e8a:	74 f5       	brge	.+92     	; 0x3ee8 <vfprintf+0x222>
    3e8c:	28 e0       	ldi	r18, 0x08	; 8
    3e8e:	24 15       	cp	r18, r4
    3e90:	78 f5       	brcc	.+94     	; 0x3ef0 <vfprintf+0x22a>
    3e92:	88 e0       	ldi	r24, 0x08	; 8
    3e94:	48 2e       	mov	r4, r24
    3e96:	2c c0       	rjmp	.+88     	; 0x3ef0 <vfprintf+0x22a>
    3e98:	96 fc       	sbrc	r9, 6
    3e9a:	2a c0       	rjmp	.+84     	; 0x3ef0 <vfprintf+0x22a>
    3e9c:	81 2f       	mov	r24, r17
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	8c 15       	cp	r24, r12
    3ea2:	9d 05       	cpc	r25, r13
    3ea4:	9c f0       	brlt	.+38     	; 0x3ecc <vfprintf+0x206>
    3ea6:	3c ef       	ldi	r19, 0xFC	; 252
    3ea8:	c3 16       	cp	r12, r19
    3eaa:	3f ef       	ldi	r19, 0xFF	; 255
    3eac:	d3 06       	cpc	r13, r19
    3eae:	74 f0       	brlt	.+28     	; 0x3ecc <vfprintf+0x206>
    3eb0:	89 2d       	mov	r24, r9
    3eb2:	80 68       	ori	r24, 0x80	; 128
    3eb4:	98 2e       	mov	r9, r24
    3eb6:	0a c0       	rjmp	.+20     	; 0x3ecc <vfprintf+0x206>
    3eb8:	e2 e0       	ldi	r30, 0x02	; 2
    3eba:	f0 e0       	ldi	r31, 0x00	; 0
    3ebc:	ec 0f       	add	r30, r28
    3ebe:	fd 1f       	adc	r31, r29
    3ec0:	e1 0f       	add	r30, r17
    3ec2:	f1 1d       	adc	r31, r1
    3ec4:	80 81       	ld	r24, Z
    3ec6:	80 33       	cpi	r24, 0x30	; 48
    3ec8:	19 f4       	brne	.+6      	; 0x3ed0 <vfprintf+0x20a>
    3eca:	11 50       	subi	r17, 0x01	; 1
    3ecc:	11 11       	cpse	r17, r1
    3ece:	f4 cf       	rjmp	.-24     	; 0x3eb8 <vfprintf+0x1f2>
    3ed0:	97 fe       	sbrs	r9, 7
    3ed2:	0e c0       	rjmp	.+28     	; 0x3ef0 <vfprintf+0x22a>
    3ed4:	44 24       	eor	r4, r4
    3ed6:	43 94       	inc	r4
    3ed8:	41 0e       	add	r4, r17
    3eda:	81 2f       	mov	r24, r17
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	c8 16       	cp	r12, r24
    3ee0:	d9 06       	cpc	r13, r25
    3ee2:	2c f4       	brge	.+10     	; 0x3eee <vfprintf+0x228>
    3ee4:	1c 19       	sub	r17, r12
    3ee6:	04 c0       	rjmp	.+8      	; 0x3ef0 <vfprintf+0x22a>
    3ee8:	44 24       	eor	r4, r4
    3eea:	43 94       	inc	r4
    3eec:	01 c0       	rjmp	.+2      	; 0x3ef0 <vfprintf+0x22a>
    3eee:	10 e0       	ldi	r17, 0x00	; 0
    3ef0:	97 fe       	sbrs	r9, 7
    3ef2:	06 c0       	rjmp	.+12     	; 0x3f00 <vfprintf+0x23a>
    3ef4:	1c 14       	cp	r1, r12
    3ef6:	1d 04       	cpc	r1, r13
    3ef8:	34 f4       	brge	.+12     	; 0x3f06 <vfprintf+0x240>
    3efa:	c6 01       	movw	r24, r12
    3efc:	01 96       	adiw	r24, 0x01	; 1
    3efe:	05 c0       	rjmp	.+10     	; 0x3f0a <vfprintf+0x244>
    3f00:	85 e0       	ldi	r24, 0x05	; 5
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	02 c0       	rjmp	.+4      	; 0x3f0a <vfprintf+0x244>
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	01 11       	cpse	r16, r1
    3f0c:	01 96       	adiw	r24, 0x01	; 1
    3f0e:	11 23       	and	r17, r17
    3f10:	31 f0       	breq	.+12     	; 0x3f1e <vfprintf+0x258>
    3f12:	21 2f       	mov	r18, r17
    3f14:	30 e0       	ldi	r19, 0x00	; 0
    3f16:	2f 5f       	subi	r18, 0xFF	; 255
    3f18:	3f 4f       	sbci	r19, 0xFF	; 255
    3f1a:	82 0f       	add	r24, r18
    3f1c:	93 1f       	adc	r25, r19
    3f1e:	25 2d       	mov	r18, r5
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	82 17       	cp	r24, r18
    3f24:	93 07       	cpc	r25, r19
    3f26:	14 f4       	brge	.+4      	; 0x3f2c <vfprintf+0x266>
    3f28:	58 1a       	sub	r5, r24
    3f2a:	01 c0       	rjmp	.+2      	; 0x3f2e <vfprintf+0x268>
    3f2c:	51 2c       	mov	r5, r1
    3f2e:	89 2d       	mov	r24, r9
    3f30:	89 70       	andi	r24, 0x09	; 9
    3f32:	49 f4       	brne	.+18     	; 0x3f46 <vfprintf+0x280>
    3f34:	55 20       	and	r5, r5
    3f36:	39 f0       	breq	.+14     	; 0x3f46 <vfprintf+0x280>
    3f38:	b7 01       	movw	r22, r14
    3f3a:	80 e2       	ldi	r24, 0x20	; 32
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    3f42:	5a 94       	dec	r5
    3f44:	f7 cf       	rjmp	.-18     	; 0x3f34 <vfprintf+0x26e>
    3f46:	00 23       	and	r16, r16
    3f48:	29 f0       	breq	.+10     	; 0x3f54 <vfprintf+0x28e>
    3f4a:	b7 01       	movw	r22, r14
    3f4c:	80 2f       	mov	r24, r16
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    3f54:	93 fc       	sbrc	r9, 3
    3f56:	09 c0       	rjmp	.+18     	; 0x3f6a <vfprintf+0x2a4>
    3f58:	55 20       	and	r5, r5
    3f5a:	39 f0       	breq	.+14     	; 0x3f6a <vfprintf+0x2a4>
    3f5c:	b7 01       	movw	r22, r14
    3f5e:	80 e3       	ldi	r24, 0x30	; 48
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    3f66:	5a 94       	dec	r5
    3f68:	f7 cf       	rjmp	.-18     	; 0x3f58 <vfprintf+0x292>
    3f6a:	97 fe       	sbrs	r9, 7
    3f6c:	4c c0       	rjmp	.+152    	; 0x4006 <__RODATA_PM_OFFSET__+0x6>
    3f6e:	46 01       	movw	r8, r12
    3f70:	d7 fe       	sbrs	r13, 7
    3f72:	02 c0       	rjmp	.+4      	; 0x3f78 <vfprintf+0x2b2>
    3f74:	81 2c       	mov	r8, r1
    3f76:	91 2c       	mov	r9, r1
    3f78:	c6 01       	movw	r24, r12
    3f7a:	88 19       	sub	r24, r8
    3f7c:	99 09       	sbc	r25, r9
    3f7e:	f3 01       	movw	r30, r6
    3f80:	e8 0f       	add	r30, r24
    3f82:	f9 1f       	adc	r31, r25
    3f84:	ed 87       	std	Y+13, r30	; 0x0d
    3f86:	fe 87       	std	Y+14, r31	; 0x0e
    3f88:	96 01       	movw	r18, r12
    3f8a:	24 19       	sub	r18, r4
    3f8c:	31 09       	sbc	r19, r1
    3f8e:	2f 87       	std	Y+15, r18	; 0x0f
    3f90:	38 8b       	std	Y+16, r19	; 0x10
    3f92:	01 2f       	mov	r16, r17
    3f94:	10 e0       	ldi	r17, 0x00	; 0
    3f96:	11 95       	neg	r17
    3f98:	01 95       	neg	r16
    3f9a:	11 09       	sbc	r17, r1
    3f9c:	3f ef       	ldi	r19, 0xFF	; 255
    3f9e:	83 16       	cp	r8, r19
    3fa0:	93 06       	cpc	r9, r19
    3fa2:	29 f4       	brne	.+10     	; 0x3fae <vfprintf+0x2e8>
    3fa4:	b7 01       	movw	r22, r14
    3fa6:	8e e2       	ldi	r24, 0x2E	; 46
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    3fae:	c8 14       	cp	r12, r8
    3fb0:	d9 04       	cpc	r13, r9
    3fb2:	4c f0       	brlt	.+18     	; 0x3fc6 <vfprintf+0x300>
    3fb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fb6:	98 89       	ldd	r25, Y+16	; 0x10
    3fb8:	88 15       	cp	r24, r8
    3fba:	99 05       	cpc	r25, r9
    3fbc:	24 f4       	brge	.+8      	; 0x3fc6 <vfprintf+0x300>
    3fbe:	ed 85       	ldd	r30, Y+13	; 0x0d
    3fc0:	fe 85       	ldd	r31, Y+14	; 0x0e
    3fc2:	81 81       	ldd	r24, Z+1	; 0x01
    3fc4:	01 c0       	rjmp	.+2      	; 0x3fc8 <vfprintf+0x302>
    3fc6:	80 e3       	ldi	r24, 0x30	; 48
    3fc8:	f1 e0       	ldi	r31, 0x01	; 1
    3fca:	8f 1a       	sub	r8, r31
    3fcc:	91 08       	sbc	r9, r1
    3fce:	2d 85       	ldd	r18, Y+13	; 0x0d
    3fd0:	3e 85       	ldd	r19, Y+14	; 0x0e
    3fd2:	2f 5f       	subi	r18, 0xFF	; 255
    3fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    3fd6:	2d 87       	std	Y+13, r18	; 0x0d
    3fd8:	3e 87       	std	Y+14, r19	; 0x0e
    3fda:	80 16       	cp	r8, r16
    3fdc:	91 06       	cpc	r9, r17
    3fde:	2c f0       	brlt	.+10     	; 0x3fea <vfprintf+0x324>
    3fe0:	b7 01       	movw	r22, r14
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    3fe8:	d9 cf       	rjmp	.-78     	; 0x3f9c <vfprintf+0x2d6>
    3fea:	c8 14       	cp	r12, r8
    3fec:	d9 04       	cpc	r13, r9
    3fee:	41 f4       	brne	.+16     	; 0x4000 <__RODATA_PM_OFFSET__>
    3ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff2:	96 33       	cpi	r25, 0x36	; 54
    3ff4:	20 f4       	brcc	.+8      	; 0x3ffe <vfprintf+0x338>
    3ff6:	95 33       	cpi	r25, 0x35	; 53
    3ff8:	19 f4       	brne	.+6      	; 0x4000 <__RODATA_PM_OFFSET__>
    3ffa:	3c 85       	ldd	r19, Y+12	; 0x0c
    3ffc:	34 ff       	sbrs	r19, 4
    3ffe:	81 e3       	ldi	r24, 0x31	; 49
    4000:	b7 01       	movw	r22, r14
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	4e c0       	rjmp	.+156    	; 0x40a2 <__RODATA_PM_OFFSET__+0xa2>
    4006:	8a 81       	ldd	r24, Y+2	; 0x02
    4008:	81 33       	cpi	r24, 0x31	; 49
    400a:	19 f0       	breq	.+6      	; 0x4012 <__RODATA_PM_OFFSET__+0x12>
    400c:	9c 85       	ldd	r25, Y+12	; 0x0c
    400e:	9f 7e       	andi	r25, 0xEF	; 239
    4010:	9c 87       	std	Y+12, r25	; 0x0c
    4012:	b7 01       	movw	r22, r14
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    401a:	11 11       	cpse	r17, r1
    401c:	05 c0       	rjmp	.+10     	; 0x4028 <__RODATA_PM_OFFSET__+0x28>
    401e:	94 fc       	sbrc	r9, 4
    4020:	18 c0       	rjmp	.+48     	; 0x4052 <__RODATA_PM_OFFSET__+0x52>
    4022:	85 e6       	ldi	r24, 0x65	; 101
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	17 c0       	rjmp	.+46     	; 0x4056 <__RODATA_PM_OFFSET__+0x56>
    4028:	b7 01       	movw	r22, r14
    402a:	8e e2       	ldi	r24, 0x2E	; 46
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    4032:	1e 5f       	subi	r17, 0xFE	; 254
    4034:	82 e0       	ldi	r24, 0x02	; 2
    4036:	01 e0       	ldi	r16, 0x01	; 1
    4038:	08 0f       	add	r16, r24
    403a:	f3 01       	movw	r30, r6
    403c:	e8 0f       	add	r30, r24
    403e:	f1 1d       	adc	r31, r1
    4040:	80 81       	ld	r24, Z
    4042:	b7 01       	movw	r22, r14
    4044:	90 e0       	ldi	r25, 0x00	; 0
    4046:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    404a:	80 2f       	mov	r24, r16
    404c:	01 13       	cpse	r16, r17
    404e:	f3 cf       	rjmp	.-26     	; 0x4036 <__RODATA_PM_OFFSET__+0x36>
    4050:	e6 cf       	rjmp	.-52     	; 0x401e <__RODATA_PM_OFFSET__+0x1e>
    4052:	85 e4       	ldi	r24, 0x45	; 69
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	b7 01       	movw	r22, r14
    4058:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    405c:	d7 fc       	sbrc	r13, 7
    405e:	06 c0       	rjmp	.+12     	; 0x406c <__RODATA_PM_OFFSET__+0x6c>
    4060:	c1 14       	cp	r12, r1
    4062:	d1 04       	cpc	r13, r1
    4064:	41 f4       	brne	.+16     	; 0x4076 <__RODATA_PM_OFFSET__+0x76>
    4066:	ec 85       	ldd	r30, Y+12	; 0x0c
    4068:	e4 ff       	sbrs	r30, 4
    406a:	05 c0       	rjmp	.+10     	; 0x4076 <__RODATA_PM_OFFSET__+0x76>
    406c:	d1 94       	neg	r13
    406e:	c1 94       	neg	r12
    4070:	d1 08       	sbc	r13, r1
    4072:	8d e2       	ldi	r24, 0x2D	; 45
    4074:	01 c0       	rjmp	.+2      	; 0x4078 <__RODATA_PM_OFFSET__+0x78>
    4076:	8b e2       	ldi	r24, 0x2B	; 43
    4078:	b7 01       	movw	r22, r14
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    4080:	80 e3       	ldi	r24, 0x30	; 48
    4082:	2a e0       	ldi	r18, 0x0A	; 10
    4084:	c2 16       	cp	r12, r18
    4086:	d1 04       	cpc	r13, r1
    4088:	2c f0       	brlt	.+10     	; 0x4094 <__RODATA_PM_OFFSET__+0x94>
    408a:	8f 5f       	subi	r24, 0xFF	; 255
    408c:	fa e0       	ldi	r31, 0x0A	; 10
    408e:	cf 1a       	sub	r12, r31
    4090:	d1 08       	sbc	r13, r1
    4092:	f7 cf       	rjmp	.-18     	; 0x4082 <__RODATA_PM_OFFSET__+0x82>
    4094:	b7 01       	movw	r22, r14
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    409c:	b7 01       	movw	r22, r14
    409e:	c6 01       	movw	r24, r12
    40a0:	c0 96       	adiw	r24, 0x30	; 48
    40a2:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    40a6:	54 c1       	rjmp	.+680    	; 0x4350 <__RODATA_PM_OFFSET__+0x350>
    40a8:	83 36       	cpi	r24, 0x63	; 99
    40aa:	31 f0       	breq	.+12     	; 0x40b8 <__RODATA_PM_OFFSET__+0xb8>
    40ac:	83 37       	cpi	r24, 0x73	; 115
    40ae:	79 f0       	breq	.+30     	; 0x40ce <__RODATA_PM_OFFSET__+0xce>
    40b0:	83 35       	cpi	r24, 0x53	; 83
    40b2:	09 f0       	breq	.+2      	; 0x40b6 <__RODATA_PM_OFFSET__+0xb6>
    40b4:	56 c0       	rjmp	.+172    	; 0x4162 <__RODATA_PM_OFFSET__+0x162>
    40b6:	20 c0       	rjmp	.+64     	; 0x40f8 <__RODATA_PM_OFFSET__+0xf8>
    40b8:	56 01       	movw	r10, r12
    40ba:	32 e0       	ldi	r19, 0x02	; 2
    40bc:	a3 0e       	add	r10, r19
    40be:	b1 1c       	adc	r11, r1
    40c0:	f6 01       	movw	r30, r12
    40c2:	80 81       	ld	r24, Z
    40c4:	89 83       	std	Y+1, r24	; 0x01
    40c6:	01 e0       	ldi	r16, 0x01	; 1
    40c8:	10 e0       	ldi	r17, 0x00	; 0
    40ca:	63 01       	movw	r12, r6
    40cc:	12 c0       	rjmp	.+36     	; 0x40f2 <__RODATA_PM_OFFSET__+0xf2>
    40ce:	56 01       	movw	r10, r12
    40d0:	f2 e0       	ldi	r31, 0x02	; 2
    40d2:	af 0e       	add	r10, r31
    40d4:	b1 1c       	adc	r11, r1
    40d6:	f6 01       	movw	r30, r12
    40d8:	c0 80       	ld	r12, Z
    40da:	d1 80       	ldd	r13, Z+1	; 0x01
    40dc:	96 fe       	sbrs	r9, 6
    40de:	03 c0       	rjmp	.+6      	; 0x40e6 <__RODATA_PM_OFFSET__+0xe6>
    40e0:	61 2f       	mov	r22, r17
    40e2:	70 e0       	ldi	r23, 0x00	; 0
    40e4:	02 c0       	rjmp	.+4      	; 0x40ea <__RODATA_PM_OFFSET__+0xea>
    40e6:	6f ef       	ldi	r22, 0xFF	; 255
    40e8:	7f ef       	ldi	r23, 0xFF	; 255
    40ea:	c6 01       	movw	r24, r12
    40ec:	0e 94 b6 23 	call	0x476c	; 0x476c <strnlen>
    40f0:	8c 01       	movw	r16, r24
    40f2:	f9 2d       	mov	r31, r9
    40f4:	ff 77       	andi	r31, 0x7F	; 127
    40f6:	14 c0       	rjmp	.+40     	; 0x4120 <__RODATA_PM_OFFSET__+0x120>
    40f8:	56 01       	movw	r10, r12
    40fa:	22 e0       	ldi	r18, 0x02	; 2
    40fc:	a2 0e       	add	r10, r18
    40fe:	b1 1c       	adc	r11, r1
    4100:	f6 01       	movw	r30, r12
    4102:	c0 80       	ld	r12, Z
    4104:	d1 80       	ldd	r13, Z+1	; 0x01
    4106:	96 fe       	sbrs	r9, 6
    4108:	03 c0       	rjmp	.+6      	; 0x4110 <__RODATA_PM_OFFSET__+0x110>
    410a:	61 2f       	mov	r22, r17
    410c:	70 e0       	ldi	r23, 0x00	; 0
    410e:	02 c0       	rjmp	.+4      	; 0x4114 <__RODATA_PM_OFFSET__+0x114>
    4110:	6f ef       	ldi	r22, 0xFF	; 255
    4112:	7f ef       	ldi	r23, 0xFF	; 255
    4114:	c6 01       	movw	r24, r12
    4116:	0e 94 99 23 	call	0x4732	; 0x4732 <strnlen_P>
    411a:	8c 01       	movw	r16, r24
    411c:	f9 2d       	mov	r31, r9
    411e:	f0 68       	ori	r31, 0x80	; 128
    4120:	9f 2e       	mov	r9, r31
    4122:	f3 fd       	sbrc	r31, 3
    4124:	1a c0       	rjmp	.+52     	; 0x415a <__RODATA_PM_OFFSET__+0x15a>
    4126:	85 2d       	mov	r24, r5
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	08 17       	cp	r16, r24
    412c:	19 07       	cpc	r17, r25
    412e:	a8 f4       	brcc	.+42     	; 0x415a <__RODATA_PM_OFFSET__+0x15a>
    4130:	b7 01       	movw	r22, r14
    4132:	80 e2       	ldi	r24, 0x20	; 32
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    413a:	5a 94       	dec	r5
    413c:	f4 cf       	rjmp	.-24     	; 0x4126 <__RODATA_PM_OFFSET__+0x126>
    413e:	f6 01       	movw	r30, r12
    4140:	97 fc       	sbrc	r9, 7
    4142:	85 91       	lpm	r24, Z+
    4144:	97 fe       	sbrs	r9, 7
    4146:	81 91       	ld	r24, Z+
    4148:	6f 01       	movw	r12, r30
    414a:	b7 01       	movw	r22, r14
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    4152:	51 10       	cpse	r5, r1
    4154:	5a 94       	dec	r5
    4156:	01 50       	subi	r16, 0x01	; 1
    4158:	11 09       	sbc	r17, r1
    415a:	01 15       	cp	r16, r1
    415c:	11 05       	cpc	r17, r1
    415e:	79 f7       	brne	.-34     	; 0x413e <__RODATA_PM_OFFSET__+0x13e>
    4160:	f7 c0       	rjmp	.+494    	; 0x4350 <__RODATA_PM_OFFSET__+0x350>
    4162:	84 36       	cpi	r24, 0x64	; 100
    4164:	11 f0       	breq	.+4      	; 0x416a <__RODATA_PM_OFFSET__+0x16a>
    4166:	89 36       	cpi	r24, 0x69	; 105
    4168:	61 f5       	brne	.+88     	; 0x41c2 <__RODATA_PM_OFFSET__+0x1c2>
    416a:	56 01       	movw	r10, r12
    416c:	97 fe       	sbrs	r9, 7
    416e:	09 c0       	rjmp	.+18     	; 0x4182 <__RODATA_PM_OFFSET__+0x182>
    4170:	24 e0       	ldi	r18, 0x04	; 4
    4172:	a2 0e       	add	r10, r18
    4174:	b1 1c       	adc	r11, r1
    4176:	f6 01       	movw	r30, r12
    4178:	60 81       	ld	r22, Z
    417a:	71 81       	ldd	r23, Z+1	; 0x01
    417c:	82 81       	ldd	r24, Z+2	; 0x02
    417e:	93 81       	ldd	r25, Z+3	; 0x03
    4180:	0a c0       	rjmp	.+20     	; 0x4196 <__RODATA_PM_OFFSET__+0x196>
    4182:	f2 e0       	ldi	r31, 0x02	; 2
    4184:	af 0e       	add	r10, r31
    4186:	b1 1c       	adc	r11, r1
    4188:	f6 01       	movw	r30, r12
    418a:	60 81       	ld	r22, Z
    418c:	71 81       	ldd	r23, Z+1	; 0x01
    418e:	07 2e       	mov	r0, r23
    4190:	00 0c       	add	r0, r0
    4192:	88 0b       	sbc	r24, r24
    4194:	99 0b       	sbc	r25, r25
    4196:	f9 2d       	mov	r31, r9
    4198:	ff 76       	andi	r31, 0x6F	; 111
    419a:	9f 2e       	mov	r9, r31
    419c:	97 ff       	sbrs	r25, 7
    419e:	09 c0       	rjmp	.+18     	; 0x41b2 <__RODATA_PM_OFFSET__+0x1b2>
    41a0:	90 95       	com	r25
    41a2:	80 95       	com	r24
    41a4:	70 95       	com	r23
    41a6:	61 95       	neg	r22
    41a8:	7f 4f       	sbci	r23, 0xFF	; 255
    41aa:	8f 4f       	sbci	r24, 0xFF	; 255
    41ac:	9f 4f       	sbci	r25, 0xFF	; 255
    41ae:	f0 68       	ori	r31, 0x80	; 128
    41b0:	9f 2e       	mov	r9, r31
    41b2:	2a e0       	ldi	r18, 0x0A	; 10
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	a3 01       	movw	r20, r6
    41b8:	0e 94 34 24 	call	0x4868	; 0x4868 <__ultoa_invert>
    41bc:	c8 2e       	mov	r12, r24
    41be:	c6 18       	sub	r12, r6
    41c0:	3f c0       	rjmp	.+126    	; 0x4240 <__RODATA_PM_OFFSET__+0x240>
    41c2:	09 2d       	mov	r16, r9
    41c4:	85 37       	cpi	r24, 0x75	; 117
    41c6:	21 f4       	brne	.+8      	; 0x41d0 <__RODATA_PM_OFFSET__+0x1d0>
    41c8:	0f 7e       	andi	r16, 0xEF	; 239
    41ca:	2a e0       	ldi	r18, 0x0A	; 10
    41cc:	30 e0       	ldi	r19, 0x00	; 0
    41ce:	1d c0       	rjmp	.+58     	; 0x420a <__RODATA_PM_OFFSET__+0x20a>
    41d0:	09 7f       	andi	r16, 0xF9	; 249
    41d2:	8f 36       	cpi	r24, 0x6F	; 111
    41d4:	91 f0       	breq	.+36     	; 0x41fa <__RODATA_PM_OFFSET__+0x1fa>
    41d6:	18 f4       	brcc	.+6      	; 0x41de <__RODATA_PM_OFFSET__+0x1de>
    41d8:	88 35       	cpi	r24, 0x58	; 88
    41da:	59 f0       	breq	.+22     	; 0x41f2 <__RODATA_PM_OFFSET__+0x1f2>
    41dc:	c3 c0       	rjmp	.+390    	; 0x4364 <__RODATA_PM_OFFSET__+0x364>
    41de:	80 37       	cpi	r24, 0x70	; 112
    41e0:	19 f0       	breq	.+6      	; 0x41e8 <__RODATA_PM_OFFSET__+0x1e8>
    41e2:	88 37       	cpi	r24, 0x78	; 120
    41e4:	11 f0       	breq	.+4      	; 0x41ea <__RODATA_PM_OFFSET__+0x1ea>
    41e6:	be c0       	rjmp	.+380    	; 0x4364 <__RODATA_PM_OFFSET__+0x364>
    41e8:	00 61       	ori	r16, 0x10	; 16
    41ea:	04 ff       	sbrs	r16, 4
    41ec:	09 c0       	rjmp	.+18     	; 0x4200 <__RODATA_PM_OFFSET__+0x200>
    41ee:	04 60       	ori	r16, 0x04	; 4
    41f0:	07 c0       	rjmp	.+14     	; 0x4200 <__RODATA_PM_OFFSET__+0x200>
    41f2:	94 fe       	sbrs	r9, 4
    41f4:	08 c0       	rjmp	.+16     	; 0x4206 <__RODATA_PM_OFFSET__+0x206>
    41f6:	06 60       	ori	r16, 0x06	; 6
    41f8:	06 c0       	rjmp	.+12     	; 0x4206 <__RODATA_PM_OFFSET__+0x206>
    41fa:	28 e0       	ldi	r18, 0x08	; 8
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	05 c0       	rjmp	.+10     	; 0x420a <__RODATA_PM_OFFSET__+0x20a>
    4200:	20 e1       	ldi	r18, 0x10	; 16
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	02 c0       	rjmp	.+4      	; 0x420a <__RODATA_PM_OFFSET__+0x20a>
    4206:	20 e1       	ldi	r18, 0x10	; 16
    4208:	32 e0       	ldi	r19, 0x02	; 2
    420a:	56 01       	movw	r10, r12
    420c:	07 ff       	sbrs	r16, 7
    420e:	09 c0       	rjmp	.+18     	; 0x4222 <__RODATA_PM_OFFSET__+0x222>
    4210:	84 e0       	ldi	r24, 0x04	; 4
    4212:	a8 0e       	add	r10, r24
    4214:	b1 1c       	adc	r11, r1
    4216:	f6 01       	movw	r30, r12
    4218:	60 81       	ld	r22, Z
    421a:	71 81       	ldd	r23, Z+1	; 0x01
    421c:	82 81       	ldd	r24, Z+2	; 0x02
    421e:	93 81       	ldd	r25, Z+3	; 0x03
    4220:	08 c0       	rjmp	.+16     	; 0x4232 <__RODATA_PM_OFFSET__+0x232>
    4222:	f2 e0       	ldi	r31, 0x02	; 2
    4224:	af 0e       	add	r10, r31
    4226:	b1 1c       	adc	r11, r1
    4228:	f6 01       	movw	r30, r12
    422a:	60 81       	ld	r22, Z
    422c:	71 81       	ldd	r23, Z+1	; 0x01
    422e:	80 e0       	ldi	r24, 0x00	; 0
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	a3 01       	movw	r20, r6
    4234:	0e 94 34 24 	call	0x4868	; 0x4868 <__ultoa_invert>
    4238:	c8 2e       	mov	r12, r24
    423a:	c6 18       	sub	r12, r6
    423c:	0f 77       	andi	r16, 0x7F	; 127
    423e:	90 2e       	mov	r9, r16
    4240:	96 fe       	sbrs	r9, 6
    4242:	0b c0       	rjmp	.+22     	; 0x425a <__RODATA_PM_OFFSET__+0x25a>
    4244:	09 2d       	mov	r16, r9
    4246:	0e 7f       	andi	r16, 0xFE	; 254
    4248:	c1 16       	cp	r12, r17
    424a:	50 f4       	brcc	.+20     	; 0x4260 <__RODATA_PM_OFFSET__+0x260>
    424c:	94 fe       	sbrs	r9, 4
    424e:	0a c0       	rjmp	.+20     	; 0x4264 <__RODATA_PM_OFFSET__+0x264>
    4250:	92 fc       	sbrc	r9, 2
    4252:	08 c0       	rjmp	.+16     	; 0x4264 <__RODATA_PM_OFFSET__+0x264>
    4254:	09 2d       	mov	r16, r9
    4256:	0e 7e       	andi	r16, 0xEE	; 238
    4258:	05 c0       	rjmp	.+10     	; 0x4264 <__RODATA_PM_OFFSET__+0x264>
    425a:	dc 2c       	mov	r13, r12
    425c:	09 2d       	mov	r16, r9
    425e:	03 c0       	rjmp	.+6      	; 0x4266 <__RODATA_PM_OFFSET__+0x266>
    4260:	dc 2c       	mov	r13, r12
    4262:	01 c0       	rjmp	.+2      	; 0x4266 <__RODATA_PM_OFFSET__+0x266>
    4264:	d1 2e       	mov	r13, r17
    4266:	04 ff       	sbrs	r16, 4
    4268:	0d c0       	rjmp	.+26     	; 0x4284 <__RODATA_PM_OFFSET__+0x284>
    426a:	fe 01       	movw	r30, r28
    426c:	ec 0d       	add	r30, r12
    426e:	f1 1d       	adc	r31, r1
    4270:	80 81       	ld	r24, Z
    4272:	80 33       	cpi	r24, 0x30	; 48
    4274:	11 f4       	brne	.+4      	; 0x427a <__RODATA_PM_OFFSET__+0x27a>
    4276:	09 7e       	andi	r16, 0xE9	; 233
    4278:	09 c0       	rjmp	.+18     	; 0x428c <__RODATA_PM_OFFSET__+0x28c>
    427a:	02 ff       	sbrs	r16, 2
    427c:	06 c0       	rjmp	.+12     	; 0x428a <__RODATA_PM_OFFSET__+0x28a>
    427e:	d3 94       	inc	r13
    4280:	d3 94       	inc	r13
    4282:	04 c0       	rjmp	.+8      	; 0x428c <__RODATA_PM_OFFSET__+0x28c>
    4284:	80 2f       	mov	r24, r16
    4286:	86 78       	andi	r24, 0x86	; 134
    4288:	09 f0       	breq	.+2      	; 0x428c <__RODATA_PM_OFFSET__+0x28c>
    428a:	d3 94       	inc	r13
    428c:	03 fd       	sbrc	r16, 3
    428e:	11 c0       	rjmp	.+34     	; 0x42b2 <__RODATA_PM_OFFSET__+0x2b2>
    4290:	00 ff       	sbrs	r16, 0
    4292:	06 c0       	rjmp	.+12     	; 0x42a0 <__RODATA_PM_OFFSET__+0x2a0>
    4294:	1c 2d       	mov	r17, r12
    4296:	d5 14       	cp	r13, r5
    4298:	80 f4       	brcc	.+32     	; 0x42ba <__RODATA_PM_OFFSET__+0x2ba>
    429a:	15 0d       	add	r17, r5
    429c:	1d 19       	sub	r17, r13
    429e:	0d c0       	rjmp	.+26     	; 0x42ba <__RODATA_PM_OFFSET__+0x2ba>
    42a0:	d5 14       	cp	r13, r5
    42a2:	58 f4       	brcc	.+22     	; 0x42ba <__RODATA_PM_OFFSET__+0x2ba>
    42a4:	b7 01       	movw	r22, r14
    42a6:	80 e2       	ldi	r24, 0x20	; 32
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    42ae:	d3 94       	inc	r13
    42b0:	f7 cf       	rjmp	.-18     	; 0x42a0 <__RODATA_PM_OFFSET__+0x2a0>
    42b2:	d5 14       	cp	r13, r5
    42b4:	10 f4       	brcc	.+4      	; 0x42ba <__RODATA_PM_OFFSET__+0x2ba>
    42b6:	5d 18       	sub	r5, r13
    42b8:	01 c0       	rjmp	.+2      	; 0x42bc <__RODATA_PM_OFFSET__+0x2bc>
    42ba:	51 2c       	mov	r5, r1
    42bc:	04 ff       	sbrs	r16, 4
    42be:	10 c0       	rjmp	.+32     	; 0x42e0 <__RODATA_PM_OFFSET__+0x2e0>
    42c0:	b7 01       	movw	r22, r14
    42c2:	80 e3       	ldi	r24, 0x30	; 48
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    42ca:	02 ff       	sbrs	r16, 2
    42cc:	17 c0       	rjmp	.+46     	; 0x42fc <__RODATA_PM_OFFSET__+0x2fc>
    42ce:	01 fd       	sbrc	r16, 1
    42d0:	03 c0       	rjmp	.+6      	; 0x42d8 <__RODATA_PM_OFFSET__+0x2d8>
    42d2:	88 e7       	ldi	r24, 0x78	; 120
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	02 c0       	rjmp	.+4      	; 0x42dc <__RODATA_PM_OFFSET__+0x2dc>
    42d8:	88 e5       	ldi	r24, 0x58	; 88
    42da:	90 e0       	ldi	r25, 0x00	; 0
    42dc:	b7 01       	movw	r22, r14
    42de:	0c c0       	rjmp	.+24     	; 0x42f8 <__RODATA_PM_OFFSET__+0x2f8>
    42e0:	80 2f       	mov	r24, r16
    42e2:	86 78       	andi	r24, 0x86	; 134
    42e4:	59 f0       	breq	.+22     	; 0x42fc <__RODATA_PM_OFFSET__+0x2fc>
    42e6:	01 ff       	sbrs	r16, 1
    42e8:	02 c0       	rjmp	.+4      	; 0x42ee <__RODATA_PM_OFFSET__+0x2ee>
    42ea:	8b e2       	ldi	r24, 0x2B	; 43
    42ec:	01 c0       	rjmp	.+2      	; 0x42f0 <__RODATA_PM_OFFSET__+0x2f0>
    42ee:	80 e2       	ldi	r24, 0x20	; 32
    42f0:	07 fd       	sbrc	r16, 7
    42f2:	8d e2       	ldi	r24, 0x2D	; 45
    42f4:	b7 01       	movw	r22, r14
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    42fc:	c1 16       	cp	r12, r17
    42fe:	38 f4       	brcc	.+14     	; 0x430e <__RODATA_PM_OFFSET__+0x30e>
    4300:	b7 01       	movw	r22, r14
    4302:	80 e3       	ldi	r24, 0x30	; 48
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    430a:	11 50       	subi	r17, 0x01	; 1
    430c:	f7 cf       	rjmp	.-18     	; 0x42fc <__RODATA_PM_OFFSET__+0x2fc>
    430e:	ca 94       	dec	r12
    4310:	f3 01       	movw	r30, r6
    4312:	ec 0d       	add	r30, r12
    4314:	f1 1d       	adc	r31, r1
    4316:	80 81       	ld	r24, Z
    4318:	b7 01       	movw	r22, r14
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    4320:	c1 10       	cpse	r12, r1
    4322:	f5 cf       	rjmp	.-22     	; 0x430e <__RODATA_PM_OFFSET__+0x30e>
    4324:	15 c0       	rjmp	.+42     	; 0x4350 <__RODATA_PM_OFFSET__+0x350>
    4326:	f4 e0       	ldi	r31, 0x04	; 4
    4328:	f5 15       	cp	r31, r5
    432a:	60 f5       	brcc	.+88     	; 0x4384 <__RODATA_PM_OFFSET__+0x384>
    432c:	84 e0       	ldi	r24, 0x04	; 4
    432e:	58 1a       	sub	r5, r24
    4330:	93 fe       	sbrs	r9, 3
    4332:	1f c0       	rjmp	.+62     	; 0x4372 <__RODATA_PM_OFFSET__+0x372>
    4334:	01 11       	cpse	r16, r1
    4336:	27 c0       	rjmp	.+78     	; 0x4386 <__RODATA_PM_OFFSET__+0x386>
    4338:	2c 85       	ldd	r18, Y+12	; 0x0c
    433a:	23 ff       	sbrs	r18, 3
    433c:	2a c0       	rjmp	.+84     	; 0x4392 <__RODATA_PM_OFFSET__+0x392>
    433e:	04 e6       	ldi	r16, 0x64	; 100
    4340:	11 e0       	ldi	r17, 0x01	; 1
    4342:	39 2d       	mov	r19, r9
    4344:	30 71       	andi	r19, 0x10	; 16
    4346:	93 2e       	mov	r9, r19
    4348:	f8 01       	movw	r30, r16
    434a:	84 91       	lpm	r24, Z
    434c:	81 11       	cpse	r24, r1
    434e:	24 c0       	rjmp	.+72     	; 0x4398 <__RODATA_PM_OFFSET__+0x398>
    4350:	55 20       	and	r5, r5
    4352:	09 f4       	brne	.+2      	; 0x4356 <__RODATA_PM_OFFSET__+0x356>
    4354:	e4 cc       	rjmp	.-1592   	; 0x3d1e <vfprintf+0x58>
    4356:	b7 01       	movw	r22, r14
    4358:	80 e2       	ldi	r24, 0x20	; 32
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    4360:	5a 94       	dec	r5
    4362:	f6 cf       	rjmp	.-20     	; 0x4350 <__RODATA_PM_OFFSET__+0x350>
    4364:	f7 01       	movw	r30, r14
    4366:	86 81       	ldd	r24, Z+6	; 0x06
    4368:	97 81       	ldd	r25, Z+7	; 0x07
    436a:	26 c0       	rjmp	.+76     	; 0x43b8 <__RODATA_PM_OFFSET__+0x3b8>
    436c:	8f ef       	ldi	r24, 0xFF	; 255
    436e:	9f ef       	ldi	r25, 0xFF	; 255
    4370:	23 c0       	rjmp	.+70     	; 0x43b8 <__RODATA_PM_OFFSET__+0x3b8>
    4372:	b7 01       	movw	r22, r14
    4374:	80 e2       	ldi	r24, 0x20	; 32
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    437c:	5a 94       	dec	r5
    437e:	51 10       	cpse	r5, r1
    4380:	f8 cf       	rjmp	.-16     	; 0x4372 <__RODATA_PM_OFFSET__+0x372>
    4382:	d8 cf       	rjmp	.-80     	; 0x4334 <__RODATA_PM_OFFSET__+0x334>
    4384:	51 2c       	mov	r5, r1
    4386:	b7 01       	movw	r22, r14
    4388:	80 2f       	mov	r24, r16
    438a:	90 e0       	ldi	r25, 0x00	; 0
    438c:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    4390:	d3 cf       	rjmp	.-90     	; 0x4338 <__RODATA_PM_OFFSET__+0x338>
    4392:	08 e6       	ldi	r16, 0x68	; 104
    4394:	11 e0       	ldi	r17, 0x01	; 1
    4396:	d5 cf       	rjmp	.-86     	; 0x4342 <__RODATA_PM_OFFSET__+0x342>
    4398:	91 10       	cpse	r9, r1
    439a:	80 52       	subi	r24, 0x20	; 32
    439c:	b7 01       	movw	r22, r14
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	0e 94 d6 23 	call	0x47ac	; 0x47ac <fputc>
    43a4:	0f 5f       	subi	r16, 0xFF	; 255
    43a6:	1f 4f       	sbci	r17, 0xFF	; 255
    43a8:	cf cf       	rjmp	.-98     	; 0x4348 <__RODATA_PM_OFFSET__+0x348>
    43aa:	23 e0       	ldi	r18, 0x03	; 3
    43ac:	25 15       	cp	r18, r5
    43ae:	10 f4       	brcc	.+4      	; 0x43b4 <__RODATA_PM_OFFSET__+0x3b4>
    43b0:	83 e0       	ldi	r24, 0x03	; 3
    43b2:	bd cf       	rjmp	.-134    	; 0x432e <__RODATA_PM_OFFSET__+0x32e>
    43b4:	51 2c       	mov	r5, r1
    43b6:	c0 cf       	rjmp	.-128    	; 0x4338 <__RODATA_PM_OFFSET__+0x338>
    43b8:	60 96       	adiw	r28, 0x10	; 16
    43ba:	e2 e1       	ldi	r30, 0x12	; 18
    43bc:	0c 94 3d 22 	jmp	0x447a	; 0x447a <__epilogue_restores__>

000043c0 <__divmodhi4>:
    43c0:	97 fb       	bst	r25, 7
    43c2:	07 2e       	mov	r0, r23
    43c4:	16 f4       	brtc	.+4      	; 0x43ca <__divmodhi4+0xa>
    43c6:	00 94       	com	r0
    43c8:	07 d0       	rcall	.+14     	; 0x43d8 <__divmodhi4_neg1>
    43ca:	77 fd       	sbrc	r23, 7
    43cc:	09 d0       	rcall	.+18     	; 0x43e0 <__divmodhi4_neg2>
    43ce:	0e 94 55 22 	call	0x44aa	; 0x44aa <__udivmodhi4>
    43d2:	07 fc       	sbrc	r0, 7
    43d4:	05 d0       	rcall	.+10     	; 0x43e0 <__divmodhi4_neg2>
    43d6:	3e f4       	brtc	.+14     	; 0x43e6 <__divmodhi4_exit>

000043d8 <__divmodhi4_neg1>:
    43d8:	90 95       	com	r25
    43da:	81 95       	neg	r24
    43dc:	9f 4f       	sbci	r25, 0xFF	; 255
    43de:	08 95       	ret

000043e0 <__divmodhi4_neg2>:
    43e0:	70 95       	com	r23
    43e2:	61 95       	neg	r22
    43e4:	7f 4f       	sbci	r23, 0xFF	; 255

000043e6 <__divmodhi4_exit>:
    43e6:	08 95       	ret

000043e8 <__divmodsi4>:
    43e8:	05 2e       	mov	r0, r21
    43ea:	97 fb       	bst	r25, 7
    43ec:	1e f4       	brtc	.+6      	; 0x43f4 <__divmodsi4+0xc>
    43ee:	00 94       	com	r0
    43f0:	0e 94 0b 22 	call	0x4416	; 0x4416 <__negsi2>
    43f4:	57 fd       	sbrc	r21, 7
    43f6:	07 d0       	rcall	.+14     	; 0x4406 <__divmodsi4_neg2>
    43f8:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__udivmodsi4>
    43fc:	07 fc       	sbrc	r0, 7
    43fe:	03 d0       	rcall	.+6      	; 0x4406 <__divmodsi4_neg2>
    4400:	4e f4       	brtc	.+18     	; 0x4414 <__divmodsi4_exit>
    4402:	0c 94 0b 22 	jmp	0x4416	; 0x4416 <__negsi2>

00004406 <__divmodsi4_neg2>:
    4406:	50 95       	com	r21
    4408:	40 95       	com	r20
    440a:	30 95       	com	r19
    440c:	21 95       	neg	r18
    440e:	3f 4f       	sbci	r19, 0xFF	; 255
    4410:	4f 4f       	sbci	r20, 0xFF	; 255
    4412:	5f 4f       	sbci	r21, 0xFF	; 255

00004414 <__divmodsi4_exit>:
    4414:	08 95       	ret

00004416 <__negsi2>:
    4416:	90 95       	com	r25
    4418:	80 95       	com	r24
    441a:	70 95       	com	r23
    441c:	61 95       	neg	r22
    441e:	7f 4f       	sbci	r23, 0xFF	; 255
    4420:	8f 4f       	sbci	r24, 0xFF	; 255
    4422:	9f 4f       	sbci	r25, 0xFF	; 255
    4424:	08 95       	ret

00004426 <__tablejump2__>:
    4426:	ee 0f       	add	r30, r30
    4428:	ff 1f       	adc	r31, r31
    442a:	05 90       	lpm	r0, Z+
    442c:	f4 91       	lpm	r31, Z
    442e:	e0 2d       	mov	r30, r0
    4430:	09 94       	ijmp

00004432 <__muluhisi3>:
    4432:	0e 94 8b 22 	call	0x4516	; 0x4516 <__umulhisi3>
    4436:	a5 9f       	mul	r26, r21
    4438:	90 0d       	add	r25, r0
    443a:	b4 9f       	mul	r27, r20
    443c:	90 0d       	add	r25, r0
    443e:	a4 9f       	mul	r26, r20
    4440:	80 0d       	add	r24, r0
    4442:	91 1d       	adc	r25, r1
    4444:	11 24       	eor	r1, r1
    4446:	08 95       	ret

00004448 <__prologue_saves__>:
    4448:	2f 92       	push	r2
    444a:	3f 92       	push	r3
    444c:	4f 92       	push	r4
    444e:	5f 92       	push	r5
    4450:	6f 92       	push	r6
    4452:	7f 92       	push	r7
    4454:	8f 92       	push	r8
    4456:	9f 92       	push	r9
    4458:	af 92       	push	r10
    445a:	bf 92       	push	r11
    445c:	cf 92       	push	r12
    445e:	df 92       	push	r13
    4460:	ef 92       	push	r14
    4462:	ff 92       	push	r15
    4464:	0f 93       	push	r16
    4466:	1f 93       	push	r17
    4468:	cf 93       	push	r28
    446a:	df 93       	push	r29
    446c:	cd b7       	in	r28, 0x3d	; 61
    446e:	de b7       	in	r29, 0x3e	; 62
    4470:	ca 1b       	sub	r28, r26
    4472:	db 0b       	sbc	r29, r27
    4474:	cd bf       	out	0x3d, r28	; 61
    4476:	de bf       	out	0x3e, r29	; 62
    4478:	09 94       	ijmp

0000447a <__epilogue_restores__>:
    447a:	2a 88       	ldd	r2, Y+18	; 0x12
    447c:	39 88       	ldd	r3, Y+17	; 0x11
    447e:	48 88       	ldd	r4, Y+16	; 0x10
    4480:	5f 84       	ldd	r5, Y+15	; 0x0f
    4482:	6e 84       	ldd	r6, Y+14	; 0x0e
    4484:	7d 84       	ldd	r7, Y+13	; 0x0d
    4486:	8c 84       	ldd	r8, Y+12	; 0x0c
    4488:	9b 84       	ldd	r9, Y+11	; 0x0b
    448a:	aa 84       	ldd	r10, Y+10	; 0x0a
    448c:	b9 84       	ldd	r11, Y+9	; 0x09
    448e:	c8 84       	ldd	r12, Y+8	; 0x08
    4490:	df 80       	ldd	r13, Y+7	; 0x07
    4492:	ee 80       	ldd	r14, Y+6	; 0x06
    4494:	fd 80       	ldd	r15, Y+5	; 0x05
    4496:	0c 81       	ldd	r16, Y+4	; 0x04
    4498:	1b 81       	ldd	r17, Y+3	; 0x03
    449a:	aa 81       	ldd	r26, Y+2	; 0x02
    449c:	b9 81       	ldd	r27, Y+1	; 0x01
    449e:	ce 0f       	add	r28, r30
    44a0:	d1 1d       	adc	r29, r1
    44a2:	cd bf       	out	0x3d, r28	; 61
    44a4:	de bf       	out	0x3e, r29	; 62
    44a6:	ed 01       	movw	r28, r26
    44a8:	08 95       	ret

000044aa <__udivmodhi4>:
    44aa:	aa 1b       	sub	r26, r26
    44ac:	bb 1b       	sub	r27, r27
    44ae:	51 e1       	ldi	r21, 0x11	; 17
    44b0:	07 c0       	rjmp	.+14     	; 0x44c0 <__udivmodhi4_ep>

000044b2 <__udivmodhi4_loop>:
    44b2:	aa 1f       	adc	r26, r26
    44b4:	bb 1f       	adc	r27, r27
    44b6:	a6 17       	cp	r26, r22
    44b8:	b7 07       	cpc	r27, r23
    44ba:	10 f0       	brcs	.+4      	; 0x44c0 <__udivmodhi4_ep>
    44bc:	a6 1b       	sub	r26, r22
    44be:	b7 0b       	sbc	r27, r23

000044c0 <__udivmodhi4_ep>:
    44c0:	88 1f       	adc	r24, r24
    44c2:	99 1f       	adc	r25, r25
    44c4:	5a 95       	dec	r21
    44c6:	a9 f7       	brne	.-22     	; 0x44b2 <__udivmodhi4_loop>
    44c8:	80 95       	com	r24
    44ca:	90 95       	com	r25
    44cc:	bc 01       	movw	r22, r24
    44ce:	cd 01       	movw	r24, r26
    44d0:	08 95       	ret

000044d2 <__udivmodsi4>:
    44d2:	a1 e2       	ldi	r26, 0x21	; 33
    44d4:	1a 2e       	mov	r1, r26
    44d6:	aa 1b       	sub	r26, r26
    44d8:	bb 1b       	sub	r27, r27
    44da:	fd 01       	movw	r30, r26
    44dc:	0d c0       	rjmp	.+26     	; 0x44f8 <__udivmodsi4_ep>

000044de <__udivmodsi4_loop>:
    44de:	aa 1f       	adc	r26, r26
    44e0:	bb 1f       	adc	r27, r27
    44e2:	ee 1f       	adc	r30, r30
    44e4:	ff 1f       	adc	r31, r31
    44e6:	a2 17       	cp	r26, r18
    44e8:	b3 07       	cpc	r27, r19
    44ea:	e4 07       	cpc	r30, r20
    44ec:	f5 07       	cpc	r31, r21
    44ee:	20 f0       	brcs	.+8      	; 0x44f8 <__udivmodsi4_ep>
    44f0:	a2 1b       	sub	r26, r18
    44f2:	b3 0b       	sbc	r27, r19
    44f4:	e4 0b       	sbc	r30, r20
    44f6:	f5 0b       	sbc	r31, r21

000044f8 <__udivmodsi4_ep>:
    44f8:	66 1f       	adc	r22, r22
    44fa:	77 1f       	adc	r23, r23
    44fc:	88 1f       	adc	r24, r24
    44fe:	99 1f       	adc	r25, r25
    4500:	1a 94       	dec	r1
    4502:	69 f7       	brne	.-38     	; 0x44de <__udivmodsi4_loop>
    4504:	60 95       	com	r22
    4506:	70 95       	com	r23
    4508:	80 95       	com	r24
    450a:	90 95       	com	r25
    450c:	9b 01       	movw	r18, r22
    450e:	ac 01       	movw	r20, r24
    4510:	bd 01       	movw	r22, r26
    4512:	cf 01       	movw	r24, r30
    4514:	08 95       	ret

00004516 <__umulhisi3>:
    4516:	a2 9f       	mul	r26, r18
    4518:	b0 01       	movw	r22, r0
    451a:	b3 9f       	mul	r27, r19
    451c:	c0 01       	movw	r24, r0
    451e:	a3 9f       	mul	r26, r19
    4520:	70 0d       	add	r23, r0
    4522:	81 1d       	adc	r24, r1
    4524:	11 24       	eor	r1, r1
    4526:	91 1d       	adc	r25, r1
    4528:	b2 9f       	mul	r27, r18
    452a:	70 0d       	add	r23, r0
    452c:	81 1d       	adc	r24, r1
    452e:	11 24       	eor	r1, r1
    4530:	91 1d       	adc	r25, r1
    4532:	08 95       	ret

00004534 <atol>:
    4534:	1f 93       	push	r17
    4536:	fc 01       	movw	r30, r24
    4538:	99 27       	eor	r25, r25
    453a:	88 27       	eor	r24, r24
    453c:	bc 01       	movw	r22, r24
    453e:	e8 94       	clt
    4540:	11 91       	ld	r17, Z+
    4542:	10 32       	cpi	r17, 0x20	; 32
    4544:	e9 f3       	breq	.-6      	; 0x4540 <atol+0xc>
    4546:	19 30       	cpi	r17, 0x09	; 9
    4548:	10 f0       	brcs	.+4      	; 0x454e <atol+0x1a>
    454a:	1e 30       	cpi	r17, 0x0E	; 14
    454c:	c8 f3       	brcs	.-14     	; 0x4540 <atol+0xc>
    454e:	1b 32       	cpi	r17, 0x2B	; 43
    4550:	51 f0       	breq	.+20     	; 0x4566 <atol+0x32>
    4552:	1d 32       	cpi	r17, 0x2D	; 45
    4554:	49 f4       	brne	.+18     	; 0x4568 <atol+0x34>
    4556:	68 94       	set
    4558:	06 c0       	rjmp	.+12     	; 0x4566 <atol+0x32>
    455a:	0e 94 c1 23 	call	0x4782	; 0x4782 <__mulsi_const_10>
    455e:	61 0f       	add	r22, r17
    4560:	71 1d       	adc	r23, r1
    4562:	81 1d       	adc	r24, r1
    4564:	91 1d       	adc	r25, r1
    4566:	11 91       	ld	r17, Z+
    4568:	10 53       	subi	r17, 0x30	; 48
    456a:	1a 30       	cpi	r17, 0x0A	; 10
    456c:	b0 f3       	brcs	.-20     	; 0x455a <atol+0x26>
    456e:	3e f4       	brtc	.+14     	; 0x457e <atol+0x4a>
    4570:	90 95       	com	r25
    4572:	80 95       	com	r24
    4574:	70 95       	com	r23
    4576:	61 95       	neg	r22
    4578:	7f 4f       	sbci	r23, 0xFF	; 255
    457a:	8f 4f       	sbci	r24, 0xFF	; 255
    457c:	9f 4f       	sbci	r25, 0xFF	; 255
    457e:	1f 91       	pop	r17
    4580:	08 95       	ret

00004582 <__ftoa_engine>:
    4582:	28 30       	cpi	r18, 0x08	; 8
    4584:	08 f0       	brcs	.+2      	; 0x4588 <__ftoa_engine+0x6>
    4586:	27 e0       	ldi	r18, 0x07	; 7
    4588:	33 27       	eor	r19, r19
    458a:	da 01       	movw	r26, r20
    458c:	99 0f       	add	r25, r25
    458e:	31 1d       	adc	r19, r1
    4590:	87 fd       	sbrc	r24, 7
    4592:	91 60       	ori	r25, 0x01	; 1
    4594:	00 96       	adiw	r24, 0x00	; 0
    4596:	61 05       	cpc	r22, r1
    4598:	71 05       	cpc	r23, r1
    459a:	39 f4       	brne	.+14     	; 0x45aa <__ftoa_engine+0x28>
    459c:	32 60       	ori	r19, 0x02	; 2
    459e:	2e 5f       	subi	r18, 0xFE	; 254
    45a0:	3d 93       	st	X+, r19
    45a2:	30 e3       	ldi	r19, 0x30	; 48
    45a4:	2a 95       	dec	r18
    45a6:	e1 f7       	brne	.-8      	; 0x45a0 <__ftoa_engine+0x1e>
    45a8:	08 95       	ret
    45aa:	9f 3f       	cpi	r25, 0xFF	; 255
    45ac:	30 f0       	brcs	.+12     	; 0x45ba <__ftoa_engine+0x38>
    45ae:	80 38       	cpi	r24, 0x80	; 128
    45b0:	71 05       	cpc	r23, r1
    45b2:	61 05       	cpc	r22, r1
    45b4:	09 f0       	breq	.+2      	; 0x45b8 <__ftoa_engine+0x36>
    45b6:	3c 5f       	subi	r19, 0xFC	; 252
    45b8:	3c 5f       	subi	r19, 0xFC	; 252
    45ba:	3d 93       	st	X+, r19
    45bc:	91 30       	cpi	r25, 0x01	; 1
    45be:	08 f0       	brcs	.+2      	; 0x45c2 <__ftoa_engine+0x40>
    45c0:	80 68       	ori	r24, 0x80	; 128
    45c2:	91 1d       	adc	r25, r1
    45c4:	df 93       	push	r29
    45c6:	cf 93       	push	r28
    45c8:	1f 93       	push	r17
    45ca:	0f 93       	push	r16
    45cc:	ff 92       	push	r15
    45ce:	ef 92       	push	r14
    45d0:	19 2f       	mov	r17, r25
    45d2:	98 7f       	andi	r25, 0xF8	; 248
    45d4:	96 95       	lsr	r25
    45d6:	e9 2f       	mov	r30, r25
    45d8:	96 95       	lsr	r25
    45da:	96 95       	lsr	r25
    45dc:	e9 0f       	add	r30, r25
    45de:	ff 27       	eor	r31, r31
    45e0:	ea 53       	subi	r30, 0x3A	; 58
    45e2:	fe 4f       	sbci	r31, 0xFE	; 254
    45e4:	99 27       	eor	r25, r25
    45e6:	33 27       	eor	r19, r19
    45e8:	ee 24       	eor	r14, r14
    45ea:	ff 24       	eor	r15, r15
    45ec:	a7 01       	movw	r20, r14
    45ee:	e7 01       	movw	r28, r14
    45f0:	05 90       	lpm	r0, Z+
    45f2:	08 94       	sec
    45f4:	07 94       	ror	r0
    45f6:	28 f4       	brcc	.+10     	; 0x4602 <__ftoa_engine+0x80>
    45f8:	36 0f       	add	r19, r22
    45fa:	e7 1e       	adc	r14, r23
    45fc:	f8 1e       	adc	r15, r24
    45fe:	49 1f       	adc	r20, r25
    4600:	51 1d       	adc	r21, r1
    4602:	66 0f       	add	r22, r22
    4604:	77 1f       	adc	r23, r23
    4606:	88 1f       	adc	r24, r24
    4608:	99 1f       	adc	r25, r25
    460a:	06 94       	lsr	r0
    460c:	a1 f7       	brne	.-24     	; 0x45f6 <__ftoa_engine+0x74>
    460e:	05 90       	lpm	r0, Z+
    4610:	07 94       	ror	r0
    4612:	28 f4       	brcc	.+10     	; 0x461e <__ftoa_engine+0x9c>
    4614:	e7 0e       	add	r14, r23
    4616:	f8 1e       	adc	r15, r24
    4618:	49 1f       	adc	r20, r25
    461a:	56 1f       	adc	r21, r22
    461c:	c1 1d       	adc	r28, r1
    461e:	77 0f       	add	r23, r23
    4620:	88 1f       	adc	r24, r24
    4622:	99 1f       	adc	r25, r25
    4624:	66 1f       	adc	r22, r22
    4626:	06 94       	lsr	r0
    4628:	a1 f7       	brne	.-24     	; 0x4612 <__ftoa_engine+0x90>
    462a:	05 90       	lpm	r0, Z+
    462c:	07 94       	ror	r0
    462e:	28 f4       	brcc	.+10     	; 0x463a <__ftoa_engine+0xb8>
    4630:	f8 0e       	add	r15, r24
    4632:	49 1f       	adc	r20, r25
    4634:	56 1f       	adc	r21, r22
    4636:	c7 1f       	adc	r28, r23
    4638:	d1 1d       	adc	r29, r1
    463a:	88 0f       	add	r24, r24
    463c:	99 1f       	adc	r25, r25
    463e:	66 1f       	adc	r22, r22
    4640:	77 1f       	adc	r23, r23
    4642:	06 94       	lsr	r0
    4644:	a1 f7       	brne	.-24     	; 0x462e <__ftoa_engine+0xac>
    4646:	05 90       	lpm	r0, Z+
    4648:	07 94       	ror	r0
    464a:	20 f4       	brcc	.+8      	; 0x4654 <__ftoa_engine+0xd2>
    464c:	49 0f       	add	r20, r25
    464e:	56 1f       	adc	r21, r22
    4650:	c7 1f       	adc	r28, r23
    4652:	d8 1f       	adc	r29, r24
    4654:	99 0f       	add	r25, r25
    4656:	66 1f       	adc	r22, r22
    4658:	77 1f       	adc	r23, r23
    465a:	88 1f       	adc	r24, r24
    465c:	06 94       	lsr	r0
    465e:	a9 f7       	brne	.-22     	; 0x464a <__ftoa_engine+0xc8>
    4660:	84 91       	lpm	r24, Z
    4662:	10 95       	com	r17
    4664:	17 70       	andi	r17, 0x07	; 7
    4666:	41 f0       	breq	.+16     	; 0x4678 <__ftoa_engine+0xf6>
    4668:	d6 95       	lsr	r29
    466a:	c7 95       	ror	r28
    466c:	57 95       	ror	r21
    466e:	47 95       	ror	r20
    4670:	f7 94       	ror	r15
    4672:	e7 94       	ror	r14
    4674:	1a 95       	dec	r17
    4676:	c1 f7       	brne	.-16     	; 0x4668 <__ftoa_engine+0xe6>
    4678:	ec e6       	ldi	r30, 0x6C	; 108
    467a:	f1 e0       	ldi	r31, 0x01	; 1
    467c:	68 94       	set
    467e:	15 90       	lpm	r1, Z+
    4680:	15 91       	lpm	r17, Z+
    4682:	35 91       	lpm	r19, Z+
    4684:	65 91       	lpm	r22, Z+
    4686:	95 91       	lpm	r25, Z+
    4688:	05 90       	lpm	r0, Z+
    468a:	7f e2       	ldi	r23, 0x2F	; 47
    468c:	73 95       	inc	r23
    468e:	e1 18       	sub	r14, r1
    4690:	f1 0a       	sbc	r15, r17
    4692:	43 0b       	sbc	r20, r19
    4694:	56 0b       	sbc	r21, r22
    4696:	c9 0b       	sbc	r28, r25
    4698:	d0 09       	sbc	r29, r0
    469a:	c0 f7       	brcc	.-16     	; 0x468c <__ftoa_engine+0x10a>
    469c:	e1 0c       	add	r14, r1
    469e:	f1 1e       	adc	r15, r17
    46a0:	43 1f       	adc	r20, r19
    46a2:	56 1f       	adc	r21, r22
    46a4:	c9 1f       	adc	r28, r25
    46a6:	d0 1d       	adc	r29, r0
    46a8:	7e f4       	brtc	.+30     	; 0x46c8 <__ftoa_engine+0x146>
    46aa:	70 33       	cpi	r23, 0x30	; 48
    46ac:	11 f4       	brne	.+4      	; 0x46b2 <__ftoa_engine+0x130>
    46ae:	8a 95       	dec	r24
    46b0:	e6 cf       	rjmp	.-52     	; 0x467e <__ftoa_engine+0xfc>
    46b2:	e8 94       	clt
    46b4:	01 50       	subi	r16, 0x01	; 1
    46b6:	30 f0       	brcs	.+12     	; 0x46c4 <__ftoa_engine+0x142>
    46b8:	08 0f       	add	r16, r24
    46ba:	0a f4       	brpl	.+2      	; 0x46be <__ftoa_engine+0x13c>
    46bc:	00 27       	eor	r16, r16
    46be:	02 17       	cp	r16, r18
    46c0:	08 f4       	brcc	.+2      	; 0x46c4 <__ftoa_engine+0x142>
    46c2:	20 2f       	mov	r18, r16
    46c4:	23 95       	inc	r18
    46c6:	02 2f       	mov	r16, r18
    46c8:	7a 33       	cpi	r23, 0x3A	; 58
    46ca:	28 f0       	brcs	.+10     	; 0x46d6 <__ftoa_engine+0x154>
    46cc:	79 e3       	ldi	r23, 0x39	; 57
    46ce:	7d 93       	st	X+, r23
    46d0:	2a 95       	dec	r18
    46d2:	e9 f7       	brne	.-6      	; 0x46ce <__ftoa_engine+0x14c>
    46d4:	10 c0       	rjmp	.+32     	; 0x46f6 <__ftoa_engine+0x174>
    46d6:	7d 93       	st	X+, r23
    46d8:	2a 95       	dec	r18
    46da:	89 f6       	brne	.-94     	; 0x467e <__ftoa_engine+0xfc>
    46dc:	06 94       	lsr	r0
    46de:	97 95       	ror	r25
    46e0:	67 95       	ror	r22
    46e2:	37 95       	ror	r19
    46e4:	17 95       	ror	r17
    46e6:	17 94       	ror	r1
    46e8:	e1 18       	sub	r14, r1
    46ea:	f1 0a       	sbc	r15, r17
    46ec:	43 0b       	sbc	r20, r19
    46ee:	56 0b       	sbc	r21, r22
    46f0:	c9 0b       	sbc	r28, r25
    46f2:	d0 09       	sbc	r29, r0
    46f4:	98 f0       	brcs	.+38     	; 0x471c <__ftoa_engine+0x19a>
    46f6:	23 95       	inc	r18
    46f8:	7e 91       	ld	r23, -X
    46fa:	73 95       	inc	r23
    46fc:	7a 33       	cpi	r23, 0x3A	; 58
    46fe:	08 f0       	brcs	.+2      	; 0x4702 <__ftoa_engine+0x180>
    4700:	70 e3       	ldi	r23, 0x30	; 48
    4702:	7c 93       	st	X, r23
    4704:	20 13       	cpse	r18, r16
    4706:	b8 f7       	brcc	.-18     	; 0x46f6 <__ftoa_engine+0x174>
    4708:	7e 91       	ld	r23, -X
    470a:	70 61       	ori	r23, 0x10	; 16
    470c:	7d 93       	st	X+, r23
    470e:	30 f0       	brcs	.+12     	; 0x471c <__ftoa_engine+0x19a>
    4710:	83 95       	inc	r24
    4712:	71 e3       	ldi	r23, 0x31	; 49
    4714:	7d 93       	st	X+, r23
    4716:	70 e3       	ldi	r23, 0x30	; 48
    4718:	2a 95       	dec	r18
    471a:	e1 f7       	brne	.-8      	; 0x4714 <__ftoa_engine+0x192>
    471c:	11 24       	eor	r1, r1
    471e:	ef 90       	pop	r14
    4720:	ff 90       	pop	r15
    4722:	0f 91       	pop	r16
    4724:	1f 91       	pop	r17
    4726:	cf 91       	pop	r28
    4728:	df 91       	pop	r29
    472a:	99 27       	eor	r25, r25
    472c:	87 fd       	sbrc	r24, 7
    472e:	90 95       	com	r25
    4730:	08 95       	ret

00004732 <strnlen_P>:
    4732:	fc 01       	movw	r30, r24
    4734:	05 90       	lpm	r0, Z+
    4736:	61 50       	subi	r22, 0x01	; 1
    4738:	70 40       	sbci	r23, 0x00	; 0
    473a:	01 10       	cpse	r0, r1
    473c:	d8 f7       	brcc	.-10     	; 0x4734 <strnlen_P+0x2>
    473e:	80 95       	com	r24
    4740:	90 95       	com	r25
    4742:	8e 0f       	add	r24, r30
    4744:	9f 1f       	adc	r25, r31
    4746:	08 95       	ret

00004748 <strcat>:
    4748:	fb 01       	movw	r30, r22
    474a:	dc 01       	movw	r26, r24
    474c:	0d 90       	ld	r0, X+
    474e:	00 20       	and	r0, r0
    4750:	e9 f7       	brne	.-6      	; 0x474c <strcat+0x4>
    4752:	11 97       	sbiw	r26, 0x01	; 1
    4754:	01 90       	ld	r0, Z+
    4756:	0d 92       	st	X+, r0
    4758:	00 20       	and	r0, r0
    475a:	e1 f7       	brne	.-8      	; 0x4754 <strcat+0xc>
    475c:	08 95       	ret

0000475e <strcpy>:
    475e:	fb 01       	movw	r30, r22
    4760:	dc 01       	movw	r26, r24
    4762:	01 90       	ld	r0, Z+
    4764:	0d 92       	st	X+, r0
    4766:	00 20       	and	r0, r0
    4768:	e1 f7       	brne	.-8      	; 0x4762 <strcpy+0x4>
    476a:	08 95       	ret

0000476c <strnlen>:
    476c:	fc 01       	movw	r30, r24
    476e:	61 50       	subi	r22, 0x01	; 1
    4770:	70 40       	sbci	r23, 0x00	; 0
    4772:	01 90       	ld	r0, Z+
    4774:	01 10       	cpse	r0, r1
    4776:	d8 f7       	brcc	.-10     	; 0x476e <strnlen+0x2>
    4778:	80 95       	com	r24
    477a:	90 95       	com	r25
    477c:	8e 0f       	add	r24, r30
    477e:	9f 1f       	adc	r25, r31
    4780:	08 95       	ret

00004782 <__mulsi_const_10>:
    4782:	59 2f       	mov	r21, r25
    4784:	48 2f       	mov	r20, r24
    4786:	37 2f       	mov	r19, r23
    4788:	26 2f       	mov	r18, r22
    478a:	66 0f       	add	r22, r22
    478c:	77 1f       	adc	r23, r23
    478e:	88 1f       	adc	r24, r24
    4790:	99 1f       	adc	r25, r25
    4792:	66 0f       	add	r22, r22
    4794:	77 1f       	adc	r23, r23
    4796:	88 1f       	adc	r24, r24
    4798:	99 1f       	adc	r25, r25
    479a:	62 0f       	add	r22, r18
    479c:	73 1f       	adc	r23, r19
    479e:	84 1f       	adc	r24, r20
    47a0:	95 1f       	adc	r25, r21
    47a2:	66 0f       	add	r22, r22
    47a4:	77 1f       	adc	r23, r23
    47a6:	88 1f       	adc	r24, r24
    47a8:	99 1f       	adc	r25, r25
    47aa:	08 95       	ret

000047ac <fputc>:
    47ac:	0f 93       	push	r16
    47ae:	1f 93       	push	r17
    47b0:	cf 93       	push	r28
    47b2:	df 93       	push	r29
    47b4:	fb 01       	movw	r30, r22
    47b6:	23 81       	ldd	r18, Z+3	; 0x03
    47b8:	21 fd       	sbrc	r18, 1
    47ba:	03 c0       	rjmp	.+6      	; 0x47c2 <fputc+0x16>
    47bc:	8f ef       	ldi	r24, 0xFF	; 255
    47be:	9f ef       	ldi	r25, 0xFF	; 255
    47c0:	2c c0       	rjmp	.+88     	; 0x481a <fputc+0x6e>
    47c2:	22 ff       	sbrs	r18, 2
    47c4:	16 c0       	rjmp	.+44     	; 0x47f2 <fputc+0x46>
    47c6:	46 81       	ldd	r20, Z+6	; 0x06
    47c8:	57 81       	ldd	r21, Z+7	; 0x07
    47ca:	24 81       	ldd	r18, Z+4	; 0x04
    47cc:	35 81       	ldd	r19, Z+5	; 0x05
    47ce:	42 17       	cp	r20, r18
    47d0:	53 07       	cpc	r21, r19
    47d2:	44 f4       	brge	.+16     	; 0x47e4 <fputc+0x38>
    47d4:	a0 81       	ld	r26, Z
    47d6:	b1 81       	ldd	r27, Z+1	; 0x01
    47d8:	9d 01       	movw	r18, r26
    47da:	2f 5f       	subi	r18, 0xFF	; 255
    47dc:	3f 4f       	sbci	r19, 0xFF	; 255
    47de:	20 83       	st	Z, r18
    47e0:	31 83       	std	Z+1, r19	; 0x01
    47e2:	8c 93       	st	X, r24
    47e4:	26 81       	ldd	r18, Z+6	; 0x06
    47e6:	37 81       	ldd	r19, Z+7	; 0x07
    47e8:	2f 5f       	subi	r18, 0xFF	; 255
    47ea:	3f 4f       	sbci	r19, 0xFF	; 255
    47ec:	26 83       	std	Z+6, r18	; 0x06
    47ee:	37 83       	std	Z+7, r19	; 0x07
    47f0:	14 c0       	rjmp	.+40     	; 0x481a <fputc+0x6e>
    47f2:	8b 01       	movw	r16, r22
    47f4:	ec 01       	movw	r28, r24
    47f6:	fb 01       	movw	r30, r22
    47f8:	00 84       	ldd	r0, Z+8	; 0x08
    47fa:	f1 85       	ldd	r31, Z+9	; 0x09
    47fc:	e0 2d       	mov	r30, r0
    47fe:	09 95       	icall
    4800:	89 2b       	or	r24, r25
    4802:	e1 f6       	brne	.-72     	; 0x47bc <fputc+0x10>
    4804:	d8 01       	movw	r26, r16
    4806:	16 96       	adiw	r26, 0x06	; 6
    4808:	8d 91       	ld	r24, X+
    480a:	9c 91       	ld	r25, X
    480c:	17 97       	sbiw	r26, 0x07	; 7
    480e:	01 96       	adiw	r24, 0x01	; 1
    4810:	16 96       	adiw	r26, 0x06	; 6
    4812:	8d 93       	st	X+, r24
    4814:	9c 93       	st	X, r25
    4816:	17 97       	sbiw	r26, 0x07	; 7
    4818:	ce 01       	movw	r24, r28
    481a:	df 91       	pop	r29
    481c:	cf 91       	pop	r28
    481e:	1f 91       	pop	r17
    4820:	0f 91       	pop	r16
    4822:	08 95       	ret

00004824 <sprintf>:
    4824:	ae e0       	ldi	r26, 0x0E	; 14
    4826:	b0 e0       	ldi	r27, 0x00	; 0
    4828:	e8 e1       	ldi	r30, 0x18	; 24
    482a:	f4 e2       	ldi	r31, 0x24	; 36
    482c:	0c 94 32 22 	jmp	0x4464	; 0x4464 <__prologue_saves__+0x1c>
    4830:	0d 89       	ldd	r16, Y+21	; 0x15
    4832:	1e 89       	ldd	r17, Y+22	; 0x16
    4834:	86 e0       	ldi	r24, 0x06	; 6
    4836:	8c 83       	std	Y+4, r24	; 0x04
    4838:	09 83       	std	Y+1, r16	; 0x01
    483a:	1a 83       	std	Y+2, r17	; 0x02
    483c:	8f ef       	ldi	r24, 0xFF	; 255
    483e:	9f e7       	ldi	r25, 0x7F	; 127
    4840:	8d 83       	std	Y+5, r24	; 0x05
    4842:	9e 83       	std	Y+6, r25	; 0x06
    4844:	ae 01       	movw	r20, r28
    4846:	47 5e       	subi	r20, 0xE7	; 231
    4848:	5f 4f       	sbci	r21, 0xFF	; 255
    484a:	6f 89       	ldd	r22, Y+23	; 0x17
    484c:	78 8d       	ldd	r23, Y+24	; 0x18
    484e:	ce 01       	movw	r24, r28
    4850:	01 96       	adiw	r24, 0x01	; 1
    4852:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <vfprintf>
    4856:	ef 81       	ldd	r30, Y+7	; 0x07
    4858:	f8 85       	ldd	r31, Y+8	; 0x08
    485a:	e0 0f       	add	r30, r16
    485c:	f1 1f       	adc	r31, r17
    485e:	10 82       	st	Z, r1
    4860:	2e 96       	adiw	r28, 0x0e	; 14
    4862:	e4 e0       	ldi	r30, 0x04	; 4
    4864:	0c 94 4b 22 	jmp	0x4496	; 0x4496 <__epilogue_restores__+0x1c>

00004868 <__ultoa_invert>:
    4868:	fa 01       	movw	r30, r20
    486a:	aa 27       	eor	r26, r26
    486c:	28 30       	cpi	r18, 0x08	; 8
    486e:	51 f1       	breq	.+84     	; 0x48c4 <__ultoa_invert+0x5c>
    4870:	20 31       	cpi	r18, 0x10	; 16
    4872:	81 f1       	breq	.+96     	; 0x48d4 <__ultoa_invert+0x6c>
    4874:	e8 94       	clt
    4876:	6f 93       	push	r22
    4878:	6e 7f       	andi	r22, 0xFE	; 254
    487a:	6e 5f       	subi	r22, 0xFE	; 254
    487c:	7f 4f       	sbci	r23, 0xFF	; 255
    487e:	8f 4f       	sbci	r24, 0xFF	; 255
    4880:	9f 4f       	sbci	r25, 0xFF	; 255
    4882:	af 4f       	sbci	r26, 0xFF	; 255
    4884:	b1 e0       	ldi	r27, 0x01	; 1
    4886:	3e d0       	rcall	.+124    	; 0x4904 <__ultoa_invert+0x9c>
    4888:	b4 e0       	ldi	r27, 0x04	; 4
    488a:	3c d0       	rcall	.+120    	; 0x4904 <__ultoa_invert+0x9c>
    488c:	67 0f       	add	r22, r23
    488e:	78 1f       	adc	r23, r24
    4890:	89 1f       	adc	r24, r25
    4892:	9a 1f       	adc	r25, r26
    4894:	a1 1d       	adc	r26, r1
    4896:	68 0f       	add	r22, r24
    4898:	79 1f       	adc	r23, r25
    489a:	8a 1f       	adc	r24, r26
    489c:	91 1d       	adc	r25, r1
    489e:	a1 1d       	adc	r26, r1
    48a0:	6a 0f       	add	r22, r26
    48a2:	71 1d       	adc	r23, r1
    48a4:	81 1d       	adc	r24, r1
    48a6:	91 1d       	adc	r25, r1
    48a8:	a1 1d       	adc	r26, r1
    48aa:	20 d0       	rcall	.+64     	; 0x48ec <__ultoa_invert+0x84>
    48ac:	09 f4       	brne	.+2      	; 0x48b0 <__ultoa_invert+0x48>
    48ae:	68 94       	set
    48b0:	3f 91       	pop	r19
    48b2:	2a e0       	ldi	r18, 0x0A	; 10
    48b4:	26 9f       	mul	r18, r22
    48b6:	11 24       	eor	r1, r1
    48b8:	30 19       	sub	r19, r0
    48ba:	30 5d       	subi	r19, 0xD0	; 208
    48bc:	31 93       	st	Z+, r19
    48be:	de f6       	brtc	.-74     	; 0x4876 <__ultoa_invert+0xe>
    48c0:	cf 01       	movw	r24, r30
    48c2:	08 95       	ret
    48c4:	46 2f       	mov	r20, r22
    48c6:	47 70       	andi	r20, 0x07	; 7
    48c8:	40 5d       	subi	r20, 0xD0	; 208
    48ca:	41 93       	st	Z+, r20
    48cc:	b3 e0       	ldi	r27, 0x03	; 3
    48ce:	0f d0       	rcall	.+30     	; 0x48ee <__ultoa_invert+0x86>
    48d0:	c9 f7       	brne	.-14     	; 0x48c4 <__ultoa_invert+0x5c>
    48d2:	f6 cf       	rjmp	.-20     	; 0x48c0 <__ultoa_invert+0x58>
    48d4:	46 2f       	mov	r20, r22
    48d6:	4f 70       	andi	r20, 0x0F	; 15
    48d8:	40 5d       	subi	r20, 0xD0	; 208
    48da:	4a 33       	cpi	r20, 0x3A	; 58
    48dc:	18 f0       	brcs	.+6      	; 0x48e4 <__ultoa_invert+0x7c>
    48de:	49 5d       	subi	r20, 0xD9	; 217
    48e0:	31 fd       	sbrc	r19, 1
    48e2:	40 52       	subi	r20, 0x20	; 32
    48e4:	41 93       	st	Z+, r20
    48e6:	02 d0       	rcall	.+4      	; 0x48ec <__ultoa_invert+0x84>
    48e8:	a9 f7       	brne	.-22     	; 0x48d4 <__ultoa_invert+0x6c>
    48ea:	ea cf       	rjmp	.-44     	; 0x48c0 <__ultoa_invert+0x58>
    48ec:	b4 e0       	ldi	r27, 0x04	; 4
    48ee:	a6 95       	lsr	r26
    48f0:	97 95       	ror	r25
    48f2:	87 95       	ror	r24
    48f4:	77 95       	ror	r23
    48f6:	67 95       	ror	r22
    48f8:	ba 95       	dec	r27
    48fa:	c9 f7       	brne	.-14     	; 0x48ee <__ultoa_invert+0x86>
    48fc:	00 97       	sbiw	r24, 0x00	; 0
    48fe:	61 05       	cpc	r22, r1
    4900:	71 05       	cpc	r23, r1
    4902:	08 95       	ret
    4904:	9b 01       	movw	r18, r22
    4906:	ac 01       	movw	r20, r24
    4908:	0a 2e       	mov	r0, r26
    490a:	06 94       	lsr	r0
    490c:	57 95       	ror	r21
    490e:	47 95       	ror	r20
    4910:	37 95       	ror	r19
    4912:	27 95       	ror	r18
    4914:	ba 95       	dec	r27
    4916:	c9 f7       	brne	.-14     	; 0x490a <__ultoa_invert+0xa2>
    4918:	62 0f       	add	r22, r18
    491a:	73 1f       	adc	r23, r19
    491c:	84 1f       	adc	r24, r20
    491e:	95 1f       	adc	r25, r21
    4920:	a0 1d       	adc	r26, r0
    4922:	08 95       	ret

00004924 <eeprom_read_block>:
    4924:	60 50       	subi	r22, 0x00	; 0
    4926:	7c 4e       	sbci	r23, 0xEC	; 236
    4928:	0c 94 cd 24 	jmp	0x499a	; 0x499a <memcpy>

0000492c <eeprom_update_block>:
    492c:	dc 01       	movw	r26, r24
    492e:	a4 0f       	add	r26, r20
    4930:	b5 1f       	adc	r27, r21
    4932:	41 50       	subi	r20, 0x01	; 1
    4934:	50 40       	sbci	r21, 0x00	; 0
    4936:	48 f0       	brcs	.+18     	; 0x494a <eeprom_update_block+0x1e>
    4938:	cb 01       	movw	r24, r22
    493a:	84 0f       	add	r24, r20
    493c:	95 1f       	adc	r25, r21
    493e:	2e 91       	ld	r18, -X
    4940:	0e 94 a7 24 	call	0x494e	; 0x494e <eeprom_update_r18>
    4944:	41 50       	subi	r20, 0x01	; 1
    4946:	50 40       	sbci	r21, 0x00	; 0
    4948:	d0 f7       	brcc	.-12     	; 0x493e <eeprom_update_block+0x12>
    494a:	08 95       	ret

0000494c <eeprom_update_byte>:
    494c:	26 2f       	mov	r18, r22

0000494e <eeprom_update_r18>:
    494e:	0e 94 c9 24 	call	0x4992	; 0x4992 <eeprom_mapen>
    4952:	00 80       	ld	r0, Z
    4954:	02 16       	cp	r0, r18
    4956:	19 f0       	breq	.+6      	; 0x495e <eeprom_update_r18+0x10>
    4958:	0e 94 b2 24 	call	0x4964	; 0x4964 <eeprom_write_r18>
    495c:	01 97       	sbiw	r24, 0x01	; 1
    495e:	01 97       	sbiw	r24, 0x01	; 1
    4960:	08 95       	ret

00004962 <eeprom_write_byte>:
    4962:	26 2f       	mov	r18, r22

00004964 <eeprom_write_r18>:
    4964:	af 93       	push	r26
    4966:	bf 93       	push	r27
    4968:	e0 e0       	ldi	r30, 0x00	; 0
    496a:	f0 e1       	ldi	r31, 0x10	; 16
    496c:	32 81       	ldd	r19, Z+2	; 0x02
    496e:	31 fd       	sbrc	r19, 1
    4970:	fd cf       	rjmp	.-6      	; 0x496c <eeprom_write_r18+0x8>
    4972:	dc 01       	movw	r26, r24
    4974:	a0 50       	subi	r26, 0x00	; 0
    4976:	bc 4e       	sbci	r27, 0xEC	; 236
    4978:	2c 93       	st	X, r18
    497a:	2d e9       	ldi	r18, 0x9D	; 157
    497c:	24 bf       	out	0x34, r18	; 52
    497e:	23 e0       	ldi	r18, 0x03	; 3
    4980:	20 83       	st	Z, r18
    4982:	01 96       	adiw	r24, 0x01	; 1
    4984:	bf 91       	pop	r27
    4986:	af 91       	pop	r26
    4988:	08 95       	ret

0000498a <eeprom_read_byte>:
    498a:	03 d0       	rcall	.+6      	; 0x4992 <eeprom_mapen>
    498c:	80 81       	ld	r24, Z
    498e:	99 27       	eor	r25, r25
    4990:	08 95       	ret

00004992 <eeprom_mapen>:
    4992:	fc 01       	movw	r30, r24
    4994:	e0 50       	subi	r30, 0x00	; 0
    4996:	fc 4e       	sbci	r31, 0xEC	; 236
    4998:	08 95       	ret

0000499a <memcpy>:
    499a:	fb 01       	movw	r30, r22
    499c:	dc 01       	movw	r26, r24
    499e:	02 c0       	rjmp	.+4      	; 0x49a4 <memcpy+0xa>
    49a0:	01 90       	ld	r0, Z+
    49a2:	0d 92       	st	X+, r0
    49a4:	41 50       	subi	r20, 0x01	; 1
    49a6:	50 40       	sbci	r21, 0x00	; 0
    49a8:	d8 f7       	brcc	.-10     	; 0x49a0 <memcpy+0x6>
    49aa:	08 95       	ret

000049ac <_exit>:
    49ac:	f8 94       	cli

000049ae <__stop_program>:
    49ae:	ff cf       	rjmp	.-2      	; 0x49ae <__stop_program>
