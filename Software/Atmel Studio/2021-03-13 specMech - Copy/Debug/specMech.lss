
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00802800  00004c8d  00004d41  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000483c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000451  0000883c  0000483c  000048f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000830  00802804  00802804  00004d45  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00004d45  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004da4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000668  00000000  00000000  00004de8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a714  00000000  00000000  00005450  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000049bd  00000000  00000000  0000fb64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000047a5  00000000  00000000  00014521  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000fa4  00000000  00000000  00018cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000022c2  00000000  00000000  00019c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003ee1  00000000  00000000  0001bf2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b8  00000000  00000000  0001fe0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 01 	jmp	0x254	; 0x254 <__ctors_end>
       4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       c:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__vector_3>
      10:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      14:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      18:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      1c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      20:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      24:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      28:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      2c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      30:	0c 94 9f 18 	jmp	0x313e	; 0x313e <__vector_12>
      34:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      38:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      3c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      40:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      44:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__vector_17>
      48:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__vector_18>
      4c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      50:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <__vector_20>
      54:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      58:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      5c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      60:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      64:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      68:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__vector_26>
      6c:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__vector_27>
      70:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      74:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__vector_29>
      78:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      7c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      80:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      84:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      88:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      8c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      90:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      94:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <__vector_37>
      98:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <__vector_38>
      9c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      a0:	9e 04       	cpc	r9, r14
      a2:	ac 04       	cpc	r10, r12
      a4:	ac 04       	cpc	r10, r12
      a6:	ac 04       	cpc	r10, r12
      a8:	ac 04       	cpc	r10, r12
      aa:	ac 04       	cpc	r10, r12
      ac:	ac 04       	cpc	r10, r12
      ae:	ac 04       	cpc	r10, r12
      b0:	ac 04       	cpc	r10, r12
      b2:	ac 04       	cpc	r10, r12
      b4:	ac 04       	cpc	r10, r12
      b6:	ac 04       	cpc	r10, r12
      b8:	ac 04       	cpc	r10, r12
      ba:	ac 04       	cpc	r10, r12
      bc:	ac 04       	cpc	r10, r12
      be:	ac 04       	cpc	r10, r12
      c0:	ac 04       	cpc	r10, r12
      c2:	8c 04       	cpc	r8, r12
      c4:	ac 04       	cpc	r10, r12
      c6:	ac 04       	cpc	r10, r12
      c8:	ac 04       	cpc	r10, r12
      ca:	ac 04       	cpc	r10, r12
      cc:	ac 04       	cpc	r10, r12
      ce:	ac 04       	cpc	r10, r12
      d0:	ac 04       	cpc	r10, r12
      d2:	ac 04       	cpc	r10, r12
      d4:	ac 04       	cpc	r10, r12
      d6:	92 04       	cpc	r9, r2
      d8:	ac 04       	cpc	r10, r12
      da:	8f 04       	cpc	r8, r15
      dc:	ac 04       	cpc	r10, r12
      de:	ac 04       	cpc	r10, r12
      e0:	95 04       	cpc	r9, r5
      e2:	98 04       	cpc	r9, r8
      e4:	9b 04       	cpc	r9, r11
      e6:	40 0f       	add	r20, r16
      e8:	40 0f       	add	r20, r16
      ea:	40 0f       	add	r20, r16
      ec:	0e 14       	cp	r0, r14
      ee:	0e 14       	cp	r0, r14
      f0:	0e 14       	cp	r0, r14
      f2:	0e 14       	cp	r0, r14
      f4:	0e 14       	cp	r0, r14
      f6:	0e 14       	cp	r0, r14
      f8:	0e 14       	cp	r0, r14
      fa:	0e 14       	cp	r0, r14
      fc:	0e 14       	cp	r0, r14
      fe:	0e 14       	cp	r0, r14
     100:	0e 14       	cp	r0, r14
     102:	0e 14       	cp	r0, r14
     104:	0e 14       	cp	r0, r14
     106:	0e 14       	cp	r0, r14
     108:	0e 14       	cp	r0, r14
     10a:	0e 14       	cp	r0, r14
     10c:	0e 14       	cp	r0, r14
     10e:	0e 14       	cp	r0, r14
     110:	cf 13       	cpse	r28, r31
     112:	0e 14       	cp	r0, r14
     114:	0e 14       	cp	r0, r14
     116:	0e 14       	cp	r0, r14
     118:	0e 14       	cp	r0, r14
     11a:	0e 14       	cp	r0, r14
     11c:	0e 14       	cp	r0, r14
     11e:	0e 14       	cp	r0, r14
     120:	0e 14       	cp	r0, r14
     122:	0e 14       	cp	r0, r14
     124:	0e 14       	cp	r0, r14
     126:	d0 0f       	add	r29, r16
     128:	d0 0f       	add	r29, r16
     12a:	d0 0f       	add	r29, r16
     12c:	0e 14       	cp	r0, r14
     12e:	8e 10       	cpse	r8, r14
     130:	0e 14       	cp	r0, r14
     132:	0e 14       	cp	r0, r14
     134:	0e 14       	cp	r0, r14
     136:	0e 14       	cp	r0, r14
     138:	0e 14       	cp	r0, r14
     13a:	0e 14       	cp	r0, r14
     13c:	0e 14       	cp	r0, r14
     13e:	0e 14       	cp	r0, r14
     140:	0e 14       	cp	r0, r14
     142:	cb 11       	cpse	r28, r11
     144:	a1 12       	cpse	r10, r17
     146:	0e 14       	cp	r0, r14
     148:	0e 14       	cp	r0, r14
     14a:	0e 14       	cp	r0, r14
     14c:	2a 13       	cpse	r18, r26
     14e:	0e 14       	cp	r0, r14
     150:	76 13       	cpse	r23, r22

00000152 <__trampolines_end>:
     152:	6e 61       	ori	r22, 0x1E	; 30
     154:	6e 00       	.word	0x006e	; ????

00000156 <__c.2332>:
     156:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     166:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     176:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     186:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     196:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1a6:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1b6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1c6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1d6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1e6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1f6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     206:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     216:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     226:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     236:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     246:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000254 <__ctors_end>:
     254:	11 24       	eor	r1, r1
     256:	1f be       	out	0x3f, r1	; 63
     258:	cf ef       	ldi	r28, 0xFF	; 255
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	df e3       	ldi	r29, 0x3F	; 63
     25e:	de bf       	out	0x3e, r29	; 62

00000260 <__do_copy_data>:
     260:	18 e2       	ldi	r17, 0x28	; 40
     262:	a0 e0       	ldi	r26, 0x00	; 0
     264:	b8 e2       	ldi	r27, 0x28	; 40
     266:	ed e8       	ldi	r30, 0x8D	; 141
     268:	fc e4       	ldi	r31, 0x4C	; 76
     26a:	02 c0       	rjmp	.+4      	; 0x270 <__do_copy_data+0x10>
     26c:	05 90       	lpm	r0, Z+
     26e:	0d 92       	st	X+, r0
     270:	a4 30       	cpi	r26, 0x04	; 4
     272:	b1 07       	cpc	r27, r17
     274:	d9 f7       	brne	.-10     	; 0x26c <__do_copy_data+0xc>

00000276 <__do_clear_bss>:
     276:	20 e3       	ldi	r18, 0x30	; 48
     278:	a4 e0       	ldi	r26, 0x04	; 4
     27a:	b8 e2       	ldi	r27, 0x28	; 40
     27c:	01 c0       	rjmp	.+2      	; 0x280 <.do_clear_bss_start>

0000027e <.do_clear_bss_loop>:
     27e:	1d 92       	st	X+, r1

00000280 <.do_clear_bss_start>:
     280:	a4 33       	cpi	r26, 0x34	; 52
     282:	b2 07       	cpc	r27, r18
     284:	e1 f7       	brne	.-8      	; 0x27e <.do_clear_bss_loop>
     286:	0e 94 81 08 	call	0x1102	; 0x1102 <main>
     28a:	0c 94 1c 24 	jmp	0x4838	; 0x4838 <_exit>

0000028e <__bad_interrupt>:
     28e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000292 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
uint8_t read_AD590(uint8_t sensor, float *temperature)
{
     292:	8f 92       	push	r8
     294:	9f 92       	push	r9
     296:	af 92       	push	r10
     298:	bf 92       	push	r11
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <read_AD590+0x16>
     2a8:	00 d0       	rcall	.+0      	; 0x2aa <read_AD590+0x18>
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	7b 01       	movw	r14, r22

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     2b0:	81 30       	cpi	r24, 0x01	; 1
     2b2:	c9 f0       	breq	.+50     	; 0x2e6 <read_AD590+0x54>
     2b4:	18 f0       	brcs	.+6      	; 0x2bc <read_AD590+0x2a>
     2b6:	82 30       	cpi	r24, 0x02	; 2
     2b8:	61 f0       	breq	.+24     	; 0x2d2 <read_AD590+0x40>
     2ba:	10 c0       	rjmp	.+32     	; 0x2dc <read_AD590+0x4a>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     2bc:	0f 2e       	mov	r0, r31
     2be:	f3 e3       	ldi	r31, 0x33	; 51
     2c0:	8f 2e       	mov	r8, r31
     2c2:	98 2c       	mov	r9, r8
     2c4:	f3 ef       	ldi	r31, 0xF3	; 243
     2c6:	af 2e       	mov	r10, r31
     2c8:	f0 e4       	ldi	r31, 0x40	; 64
     2ca:	bf 2e       	mov	r11, r31
     2cc:	f0 2d       	mov	r31, r0
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     2ce:	11 e0       	ldi	r17, 0x01	; 1
     2d0:	0e c0       	rjmp	.+28     	; 0x2ee <read_AD590+0x5c>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     2d2:	81 2c       	mov	r8, r1
     2d4:	91 2c       	mov	r9, r1
     2d6:	54 01       	movw	r10, r8
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     2d8:	10 e1       	ldi	r17, 0x10	; 16
			offset = 0.0;
			break;
     2da:	09 c0       	rjmp	.+18     	; 0x2ee <read_AD590+0x5c>
{

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
     2dc:	81 2c       	mov	r8, r1
     2de:	91 2c       	mov	r9, r1
     2e0:	54 01       	movw	r10, r8
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2e2:	10 e0       	ldi	r17, 0x00	; 0
			break;
     2e4:	04 c0       	rjmp	.+8      	; 0x2ee <read_AD590+0x5c>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2e6:	81 2c       	mov	r8, r1
     2e8:	91 2c       	mov	r9, r1
     2ea:	54 01       	movw	r10, r8
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2ec:	14 e0       	ldi	r17, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     2ee:	40 e0       	ldi	r20, 0x00	; 0
     2f0:	66 e0       	ldi	r22, 0x06	; 6
     2f2:	87 e2       	ldi	r24, 0x27	; 39
     2f4:	0e 94 b5 08 	call	0x116a	; 0x116a <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2f8:	41 2f       	mov	r20, r17
     2fa:	40 95       	com	r20
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	87 e2       	ldi	r24, 0x27	; 39
     300:	0e 94 b5 08 	call	0x116a	; 0x116a <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     304:	41 2f       	mov	r20, r17
     306:	6a e0       	ldi	r22, 0x0A	; 10
     308:	87 e2       	ldi	r24, 0x27	; 39
     30a:	0e 94 b5 08 	call	0x116a	; 0x116a <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30e:	86 e1       	ldi	r24, 0x16	; 22
     310:	8a 95       	dec	r24
     312:	f1 f7       	brne	.-4      	; 0x310 <read_AD590+0x7e>
     314:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	if (read_ADS1115(ADC_TE, PGA0512, AIN3, DR128, &voltage) == ERROR) {
     316:	8e 01       	movw	r16, r28
     318:	0f 5f       	subi	r16, 0xFF	; 255
     31a:	1f 4f       	sbci	r17, 0xFF	; 255
     31c:	20 e8       	ldi	r18, 0x80	; 128
     31e:	40 e7       	ldi	r20, 0x70	; 112
     320:	68 e0       	ldi	r22, 0x08	; 8
     322:	88 e4       	ldi	r24, 0x48	; 72
     324:	0e 94 ca 01 	call	0x394	; 0x394 <read_ADS1115>
     328:	83 36       	cpi	r24, 0x63	; 99
     32a:	51 f4       	brne	.+20     	; 0x340 <read_AD590+0xae>
		*temperature = BADFLOAT;
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	50 e8       	ldi	r21, 0x80	; 128
     330:	66 e2       	ldi	r22, 0x26	; 38
     332:	74 ec       	ldi	r23, 0xC4	; 196
     334:	f7 01       	movw	r30, r14
     336:	40 83       	st	Z, r20
     338:	51 83       	std	Z+1, r21	; 0x01
     33a:	62 83       	std	Z+2, r22	; 0x02
     33c:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
     33e:	1c c0       	rjmp	.+56     	; 0x378 <read_AD590+0xe6>
	}
	*temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	4a e7       	ldi	r20, 0x7A	; 122
     346:	54 e4       	ldi	r21, 0x44	; 68
     348:	69 81       	ldd	r22, Y+1	; 0x01
     34a:	7a 81       	ldd	r23, Y+2	; 0x02
     34c:	8b 81       	ldd	r24, Y+3	; 0x03
     34e:	9c 81       	ldd	r25, Y+4	; 0x04
     350:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__mulsf3>
     354:	23 e3       	ldi	r18, 0x33	; 51
     356:	33 e9       	ldi	r19, 0x93	; 147
     358:	48 e8       	ldi	r20, 0x88	; 136
     35a:	53 e4       	ldi	r21, 0x43	; 67
     35c:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__subsf3>
     360:	9b 01       	movw	r18, r22
     362:	ac 01       	movw	r20, r24
     364:	c5 01       	movw	r24, r10
     366:	b4 01       	movw	r22, r8
     368:	0e 94 a2 1b 	call	0x3744	; 0x3744 <__addsf3>
     36c:	f7 01       	movw	r30, r14
     36e:	60 83       	st	Z, r22
     370:	71 83       	std	Z+1, r23	; 0x01
     372:	82 83       	std	Z+2, r24	; 0x02
     374:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     376:	80 e0       	ldi	r24, 0x00	; 0

}
     378:	24 96       	adiw	r28, 0x04	; 4
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	ff 90       	pop	r15
     388:	ef 90       	pop	r14
     38a:	bf 90       	pop	r11
     38c:	af 90       	pop	r10
     38e:	9f 90       	pop	r9
     390:	8f 90       	pop	r8
     392:	08 95       	ret

00000394 <read_ADS1115>:
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
uint8_t read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins,
	uint8_t datarate, float *voltage)
{
     394:	8f 92       	push	r8
     396:	9f 92       	push	r9
     398:	af 92       	push	r10
     39a:	bf 92       	push	r11
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	f8 2e       	mov	r15, r24
     3ae:	e6 2e       	mov	r14, r22
     3b0:	68 01       	movw	r12, r16
	float scale;
	uint8_t confighi, configlo, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     3b2:	46 2b       	or	r20, r22
     3b4:	c4 2f       	mov	r28, r20
     3b6:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     3b8:	d2 2f       	mov	r29, r18
     3ba:	d3 60       	ori	r29, 0x03	; 3

	*voltage = BADFLOAT;
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e8       	ldi	r25, 0x80	; 128
     3c0:	a6 e2       	ldi	r26, 0x26	; 38
     3c2:	b4 ec       	ldi	r27, 0xC4	; 196
     3c4:	f8 01       	movw	r30, r16
     3c6:	80 83       	st	Z, r24
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	a2 83       	std	Z+2, r26	; 0x02
     3cc:	b3 83       	std	Z+3, r27	; 0x03
	if (start_TWI(addr, TWIWRITE == ERROR)) {		// TWI start condition
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	8f 2d       	mov	r24, r15
     3d2:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
     3d6:	08 2f       	mov	r16, r24
     3d8:	88 23       	and	r24, r24
     3da:	21 f0       	breq	.+8      	; 0x3e4 <read_ADS1115+0x50>
		stop_TWI();
     3dc:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(ERROR);
     3e0:	13 e6       	ldi	r17, 0x63	; 99
     3e2:	b4 c0       	rjmp	.+360    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	if ((write_TWI(ADS1115CONFIG) == ERROR)) {		// Write the CONFIG register
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
     3ea:	18 2f       	mov	r17, r24
     3ec:	83 36       	cpi	r24, 0x63	; 99
     3ee:	19 f4       	brne	.+6      	; 0x3f6 <read_ADS1115+0x62>
		stop_TWI();
     3f0:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(ERROR);
     3f4:	ab c0       	rjmp	.+342    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	if ((write_TWI(confighi) == ERROR)) {			// Write high byte
     3f6:	8c 2f       	mov	r24, r28
     3f8:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
     3fc:	18 2f       	mov	r17, r24
     3fe:	83 36       	cpi	r24, 0x63	; 99
     400:	19 f4       	brne	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		stop_TWI();
     402:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(ERROR);
     406:	a2 c0       	rjmp	.+324    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	if ((write_TWI(configlo) == ERROR)) {			// Write low byte
     408:	8d 2f       	mov	r24, r29
     40a:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
     40e:	18 2f       	mov	r17, r24
     410:	83 36       	cpi	r24, 0x63	; 99
     412:	19 f4       	brne	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		stop_TWI();
     414:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(ERROR);
     418:	99 c0       	rjmp	.+306    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	stop_TWI();
     41a:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
     41e:	fc e1       	ldi	r31, 0x1C	; 28
     420:	fa 95       	dec	r31
     422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>

	_delay_us(25);									// Power-up time

	converting = YES;
     424:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     426:	09 c0       	rjmp	.+18     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		start_TWI(addr, TWIREAD);
     428:	61 e0       	ldi	r22, 0x01	; 1
     42a:	8f 2d       	mov	r24, r15
     42c:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
		flag = readlast_TWI();
     430:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <readlast_TWI>
		if (flag & 0b10000000) {
     434:	88 23       	and	r24, r24
     436:	0c f4       	brge	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			converting = NO;
     438:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     43a:	c1 11       	cpse	r28, r1
     43c:	f5 cf       	rjmp	.-22     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		flag = readlast_TWI();
		if (flag & 0b10000000) {
			converting = NO;
		}
	}
	stop_TWI();
     43e:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>

	start_TWI(addr, TWIWRITE);
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	8f 2d       	mov	r24, r15
     446:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	8f 2d       	mov	r24, r15
     454:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
	highbyte = read_TWI();
     458:	0e 94 c4 18 	call	0x3188	; 0x3188 <read_TWI>
     45c:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     45e:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <readlast_TWI>
     462:	d8 2f       	mov	r29, r24
	stop_TWI();
     464:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>

	value = highbyte;
     468:	6c 2f       	mov	r22, r28
     46a:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     46c:	76 2f       	mov	r23, r22
     46e:	66 27       	eor	r22, r22
	value |= lowbyte;
     470:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	e8 16       	cp	r14, r24
     476:	49 f1       	breq	.+82     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     478:	8e 15       	cp	r24, r14
     47a:	30 f0       	brcs	.+12     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     47c:	ee 20       	and	r14, r14
     47e:	d9 f1       	breq	.+118    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     480:	e2 e0       	ldi	r30, 0x02	; 2
     482:	ee 16       	cp	r14, r30
     484:	69 f1       	breq	.+90     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     486:	42 c0       	rjmp	.+132    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     488:	f8 e0       	ldi	r31, 0x08	; 8
     48a:	ef 16       	cp	r14, r31
     48c:	09 f4       	brne	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48e:	42 c0       	rjmp	.+132    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     490:	8a e0       	ldi	r24, 0x0A	; 10
     492:	e8 16       	cp	r14, r24
     494:	21 f0       	breq	.+8      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     496:	e6 e0       	ldi	r30, 0x06	; 6
     498:	ee 12       	cpse	r14, r30
     49a:	38 c0       	rjmp	.+112    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		case PGA0256:
			scale = SCA0256;
     49e:	0f 2e       	mov	r0, r31
     4a0:	f4 e7       	ldi	r31, 0x74	; 116
     4a2:	8f 2e       	mov	r8, r31
     4a4:	f3 e1       	ldi	r31, 0x13	; 19
     4a6:	9f 2e       	mov	r9, r31
     4a8:	f3 e0       	ldi	r31, 0x03	; 3
     4aa:	af 2e       	mov	r10, r31
     4ac:	f7 e3       	ldi	r31, 0x37	; 55
     4ae:	bf 2e       	mov	r11, r31
     4b0:	f0 2d       	mov	r31, r0
     4b2:	3a c0       	rjmp	.+116    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     4b4:	0f 2e       	mov	r0, r31
     4b6:	f4 e7       	ldi	r31, 0x74	; 116
     4b8:	8f 2e       	mov	r8, r31
     4ba:	f3 e1       	ldi	r31, 0x13	; 19
     4bc:	9f 2e       	mov	r9, r31
     4be:	f3 e0       	ldi	r31, 0x03	; 3
     4c0:	af 2e       	mov	r10, r31
     4c2:	f8 e3       	ldi	r31, 0x38	; 56
     4c4:	bf 2e       	mov	r11, r31
     4c6:	f0 2d       	mov	r31, r0
			break;
     4c8:	2f c0       	rjmp	.+94     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		case PGA2048:
			scale = SCA2048;
     4ca:	0f 2e       	mov	r0, r31
     4cc:	f2 e1       	ldi	r31, 0x12	; 18
     4ce:	8f 2e       	mov	r8, r31
     4d0:	f3 e1       	ldi	r31, 0x13	; 19
     4d2:	9f 2e       	mov	r9, r31
     4d4:	f3 e8       	ldi	r31, 0x83	; 131
     4d6:	af 2e       	mov	r10, r31
     4d8:	f8 e3       	ldi	r31, 0x38	; 56
     4da:	bf 2e       	mov	r11, r31
     4dc:	f0 2d       	mov	r31, r0
			break;
     4de:	24 c0       	rjmp	.+72     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		case PGA4096:
			scale = SCA4096;
     4e0:	0f 2e       	mov	r0, r31
     4e2:	f4 e7       	ldi	r31, 0x74	; 116
     4e4:	8f 2e       	mov	r8, r31
     4e6:	f3 e1       	ldi	r31, 0x13	; 19
     4e8:	9f 2e       	mov	r9, r31
     4ea:	f3 e0       	ldi	r31, 0x03	; 3
     4ec:	af 2e       	mov	r10, r31
     4ee:	f9 e3       	ldi	r31, 0x39	; 57
     4f0:	bf 2e       	mov	r11, r31
     4f2:	f0 2d       	mov	r31, r0
			break;
     4f4:	19 c0       	rjmp	.+50     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		case PGA6144:
			scale = SCA6144;
     4f6:	0f 2e       	mov	r0, r31
     4f8:	fe e2       	ldi	r31, 0x2E	; 46
     4fa:	8f 2e       	mov	r8, r31
     4fc:	fd e9       	ldi	r31, 0x9D	; 157
     4fe:	9f 2e       	mov	r9, r31
     500:	f4 e4       	ldi	r31, 0x44	; 68
     502:	af 2e       	mov	r10, r31
     504:	f9 e3       	ldi	r31, 0x39	; 57
     506:	bf 2e       	mov	r11, r31
     508:	f0 2d       	mov	r31, r0
			break;
     50a:	0e c0       	rjmp	.+28     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		default:
			scale = 0.0;
     50c:	81 2c       	mov	r8, r1
     50e:	91 2c       	mov	r9, r1
     510:	54 01       	movw	r10, r8
			break;
     512:	0a c0       	rjmp	.+20     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     514:	0f 2e       	mov	r0, r31
     516:	f1 e7       	ldi	r31, 0x71	; 113
     518:	8f 2e       	mov	r8, r31
     51a:	f3 e1       	ldi	r31, 0x13	; 19
     51c:	9f 2e       	mov	r9, r31
     51e:	f3 e8       	ldi	r31, 0x83	; 131
     520:	af 2e       	mov	r10, r31
     522:	f7 e3       	ldi	r31, 0x37	; 55
     524:	bf 2e       	mov	r11, r31
     526:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	*voltage = scale * (float) value;
     528:	07 2e       	mov	r0, r23
     52a:	00 0c       	add	r0, r0
     52c:	88 0b       	sbc	r24, r24
     52e:	99 0b       	sbc	r25, r25
     530:	0e 94 87 1c 	call	0x390e	; 0x390e <__floatsisf>
     534:	9b 01       	movw	r18, r22
     536:	ac 01       	movw	r20, r24
     538:	c5 01       	movw	r24, r10
     53a:	b4 01       	movw	r22, r8
     53c:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__mulsf3>
     540:	f6 01       	movw	r30, r12
     542:	60 83       	st	Z, r22
     544:	71 83       	std	Z+1, r23	; 0x01
     546:	82 83       	std	Z+2, r24	; 0x02
     548:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     54a:	10 2f       	mov	r17, r16

}
     54c:	81 2f       	mov	r24, r17
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	df 90       	pop	r13
     55c:	cf 90       	pop	r12
     55e:	bf 90       	pop	r11
     560:	af 90       	pop	r10
     562:	9f 90       	pop	r9
     564:	8f 90       	pop	r8
     566:	08 95       	ret

00000568 <init_BEEPER>:
#include "beeper.h"

void init_BEEPER(void)
{

	PORTB.OUTSET = PIN2_bm;
     568:	e0 e2       	ldi	r30, 0x20	; 32
     56a:	f4 e0       	ldi	r31, 0x04	; 4
     56c:	84 e0       	ldi	r24, 0x04	; 4
     56e:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     570:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = PIN2_bm;
     572:	86 83       	std	Z+6, r24	; 0x06
     574:	08 95       	ret

00000576 <get_cmdline>:
{
	if ((d >= '0') && (d <= '9')) {
		return(1);
	}
	return(0);
}
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	9c 01       	movw	r18, r24
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	1c c0       	rjmp	.+56     	; 0x5b8 <get_cmdline+0x42>
     580:	cb e1       	ldi	r28, 0x1B	; 27
     582:	dc e2       	ldi	r29, 0x2C	; 44
     584:	e8 81       	ld	r30, Y
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	e5 5e       	subi	r30, 0xE5	; 229
     58a:	f4 4d       	sbci	r31, 0xD4	; 212
     58c:	80 81       	ld	r24, Z
     58e:	f9 01       	movw	r30, r18
     590:	e4 0f       	add	r30, r20
     592:	f1 1d       	adc	r31, r1
     594:	80 83       	st	Z, r24
     596:	ad e1       	ldi	r26, 0x1D	; 29
     598:	bc e2       	ldi	r27, 0x2C	; 44
     59a:	8c 91       	ld	r24, X
     59c:	81 50       	subi	r24, 0x01	; 1
     59e:	8c 93       	st	X, r24
     5a0:	88 81       	ld	r24, Y
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	01 96       	adiw	r24, 0x01	; 1
     5a6:	6f ef       	ldi	r22, 0xFF	; 255
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	0e 94 26 21 	call	0x424c	; 0x424c <__divmodhi4>
     5ae:	88 83       	st	Y, r24
     5b0:	80 81       	ld	r24, Z
     5b2:	88 23       	and	r24, r24
     5b4:	29 f0       	breq	.+10     	; 0x5c0 <get_cmdline+0x4a>
     5b6:	4f 5f       	subi	r20, 0xFF	; 255
     5b8:	80 91 1d 2c 	lds	r24, 0x2C1D	; 0x802c1d <recv0_buf+0x102>
     5bc:	81 11       	cpse	r24, r1
     5be:	e0 cf       	rjmp	.-64     	; 0x580 <get_cmdline+0xa>
     5c0:	f9 01       	movw	r30, r18
     5c2:	e4 0f       	add	r30, r20
     5c4:	f1 1d       	adc	r31, r1
     5c6:	10 82       	st	Z, r1
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     5ce:	9f e9       	ldi	r25, 0x9F	; 159
     5d0:	98 0f       	add	r25, r24
     5d2:	9a 31       	cpi	r25, 0x1A	; 26
     5d4:	28 f0       	brcs	.+10     	; 0x5e0 <isaletter+0x12>
     5d6:	81 54       	subi	r24, 0x41	; 65
     5d8:	8a 31       	cpi	r24, 0x1A	; 26
     5da:	20 f4       	brcc	.+8      	; 0x5e4 <isaletter+0x16>
		return(1);
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	08 95       	ret
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	08 95       	ret
	}
	return(0);
     5e4:	80 e0       	ldi	r24, 0x00	; 0

}
     5e6:	08 95       	ret

000005e8 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     5f4:	e6 2e       	mov	r14, r22
     5f6:	f1 2c       	mov	r15, r1
     5f8:	84 e3       	ldi	r24, 0x34	; 52
     5fa:	8e 9d       	mul	r24, r14
     5fc:	f0 01       	movw	r30, r0
     5fe:	8f 9d       	mul	r24, r15
     600:	f0 0d       	add	r31, r0
     602:	11 24       	eor	r1, r1
     604:	e9 5f       	subi	r30, 0xF9	; 249
     606:	f7 4d       	sbci	r31, 0xD7	; 215
     608:	8f e3       	ldi	r24, 0x3F	; 63
     60a:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     60c:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     60e:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     610:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {
     612:	04 c0       	rjmp	.+8      	; 0x61c <parse_cmd+0x34>
		if (*ptr == '\0') {
     614:	11 23       	and	r17, r17
     616:	09 f4       	brne	.+2      	; 0x61a <parse_cmd+0x32>
     618:	75 c0       	rjmp	.+234    	; 0x704 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     61a:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {
     61c:	18 81       	ld	r17, Y
     61e:	81 2f       	mov	r24, r17
     620:	0e 94 e7 02 	call	0x5ce	; 0x5ce <isaletter>
     624:	88 23       	and	r24, r24
     626:	b1 f3       	breq	.-20     	; 0x614 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     628:	21 96       	adiw	r28, 0x01	; 1
     62a:	84 e3       	ldi	r24, 0x34	; 52
     62c:	8e 9d       	mul	r24, r14
     62e:	f0 01       	movw	r30, r0
     630:	8f 9d       	mul	r24, r15
     632:	f0 0d       	add	r31, r0
     634:	11 24       	eor	r1, r1
     636:	e9 5f       	subi	r30, 0xF9	; 249
     638:	f7 4d       	sbci	r31, 0xD7	; 215
     63a:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {
     63c:	04 c0       	rjmp	.+8      	; 0x646 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     63e:	11 23       	and	r17, r17
     640:	09 f4       	brne	.+2      	; 0x644 <parse_cmd+0x5c>
     642:	60 c0       	rjmp	.+192    	; 0x704 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     644:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {
     646:	18 81       	ld	r17, Y
     648:	81 2f       	mov	r24, r17
     64a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <isaletter>
     64e:	88 23       	and	r24, r24
     650:	b1 f3       	breq	.-20     	; 0x63e <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     652:	21 96       	adiw	r28, 0x01	; 1
     654:	84 e3       	ldi	r24, 0x34	; 52
     656:	8e 9d       	mul	r24, r14
     658:	f0 01       	movw	r30, r0
     65a:	8f 9d       	mul	r24, r15
     65c:	f0 0d       	add	r31, r0
     65e:	11 24       	eor	r1, r1
     660:	e9 5f       	subi	r30, 0xF9	; 249
     662:	f7 4d       	sbci	r31, 0xD7	; 215
     664:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	2a c0       	rjmp	.+84     	; 0x6be <parse_cmd+0xd6>
		if (*ptr == '\0') {
     66a:	98 81       	ld	r25, Y
     66c:	91 11       	cpse	r25, r1
     66e:	0c c0       	rjmp	.+24     	; 0x688 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     670:	94 e3       	ldi	r25, 0x34	; 52
     672:	9e 9d       	mul	r25, r14
     674:	f0 01       	movw	r30, r0
     676:	9f 9d       	mul	r25, r15
     678:	f0 0d       	add	r31, r0
     67a:	11 24       	eor	r1, r1
     67c:	e9 5f       	subi	r30, 0xF9	; 249
     67e:	f7 4d       	sbci	r31, 0xD7	; 215
     680:	e8 0f       	add	r30, r24
     682:	f1 1d       	adc	r31, r1
     684:	12 82       	std	Z+2, r1	; 0x02
			return;
     686:	3e c0       	rjmp	.+124    	; 0x704 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {
     688:	9b 33       	cpi	r25, 0x3B	; 59
     68a:	61 f4       	brne	.+24     	; 0x6a4 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     68c:	94 e3       	ldi	r25, 0x34	; 52
     68e:	9e 9d       	mul	r25, r14
     690:	f0 01       	movw	r30, r0
     692:	9f 9d       	mul	r25, r15
     694:	f0 0d       	add	r31, r0
     696:	11 24       	eor	r1, r1
     698:	e9 5f       	subi	r30, 0xF9	; 249
     69a:	f7 4d       	sbci	r31, 0xD7	; 215
     69c:	e8 0f       	add	r30, r24
     69e:	f1 1d       	adc	r31, r1
     6a0:	12 82       	std	Z+2, r1	; 0x02
			break;
     6a2:	0f c0       	rjmp	.+30     	; 0x6c2 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     6a4:	21 96       	adiw	r28, 0x01	; 1
     6a6:	24 e3       	ldi	r18, 0x34	; 52
     6a8:	2e 9d       	mul	r18, r14
     6aa:	f0 01       	movw	r30, r0
     6ac:	2f 9d       	mul	r18, r15
     6ae:	f0 0d       	add	r31, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	e9 5f       	subi	r30, 0xF9	; 249
     6b4:	f7 4d       	sbci	r31, 0xD7	; 215
     6b6:	e8 0f       	add	r30, r24
     6b8:	f1 1d       	adc	r31, r1
     6ba:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	89 32       	cpi	r24, 0x29	; 41
     6c0:	a0 f2       	brcs	.-88     	; 0x66a <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
     6c2:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	1c c0       	rjmp	.+56     	; 0x700 <parse_cmd+0x118>
		if (*ptr == '\0') {
     6c8:	98 81       	ld	r25, Y
     6ca:	91 11       	cpse	r25, r1
     6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     6ce:	94 e3       	ldi	r25, 0x34	; 52
     6d0:	9e 9d       	mul	r25, r14
     6d2:	f0 01       	movw	r30, r0
     6d4:	9f 9d       	mul	r25, r15
     6d6:	f0 0d       	add	r31, r0
     6d8:	11 24       	eor	r1, r1
     6da:	e9 5f       	subi	r30, 0xF9	; 249
     6dc:	f7 4d       	sbci	r31, 0xD7	; 215
     6de:	e8 0f       	add	r30, r24
     6e0:	f1 1d       	adc	r31, r1
     6e2:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     6e4:	0f c0       	rjmp	.+30     	; 0x704 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     6e6:	21 96       	adiw	r28, 0x01	; 1
     6e8:	24 e3       	ldi	r18, 0x34	; 52
     6ea:	2e 9d       	mul	r18, r14
     6ec:	f0 01       	movw	r30, r0
     6ee:	2f 9d       	mul	r18, r15
     6f0:	f0 0d       	add	r31, r0
     6f2:	11 24       	eor	r1, r1
     6f4:	e9 5f       	subi	r30, 0xF9	; 249
     6f6:	f7 4d       	sbci	r31, 0xD7	; 215
     6f8:	e8 0f       	add	r30, r24
     6fa:	f1 1d       	adc	r31, r1
     6fc:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     6fe:	8f 5f       	subi	r24, 0xFF	; 255
     700:	89 30       	cpi	r24, 0x09	; 9
     702:	10 f3       	brcs	.-60     	; 0x6c8 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
     70e:	08 95       	ret

00000710 <printLine>:
		been run and the system has received a reboot acknowledge (the !). This
		is done to prevent unsolicited text being sent (error messages) at
		initialization or after a reboot.
------------------------------------------------------------------------------*/
void printLine(char *str)
{
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	c6 50       	subi	r28, 0x06	; 6
     71e:	d1 40       	sbci	r29, 0x01	; 1
     720:	cd bf       	out	0x3d, r28	; 61
     722:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE], prFormat[] = "$S%d%s";
     724:	27 e0       	ldi	r18, 0x07	; 7
     726:	ec e3       	ldi	r30, 0x3C	; 60
     728:	f8 e8       	ldi	r31, 0x88	; 136
     72a:	de 01       	movw	r26, r28
     72c:	b3 95       	inc	r27
     72e:	01 90       	ld	r0, Z+
     730:	0d 92       	st	X+, r0
     732:	2a 95       	dec	r18
     734:	e1 f7       	brne	.-8      	; 0x72e <printLine+0x1e>

	if (firstpass) {
     736:	20 91 06 28 	lds	r18, 0x2806	; 0x802806 <firstpass>
     73a:	21 11       	cpse	r18, r1
     73c:	29 c0       	rjmp	.+82     	; 0x790 <printLine+0x80>
		return;
	}
	sprintf(strbuf, prFormat, get_SPECID, str);
     73e:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     742:	22 ff       	sbrs	r18, 2
     744:	03 c0       	rjmp	.+6      	; 0x74c <printLine+0x3c>
     746:	22 e0       	ldi	r18, 0x02	; 2
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	02 c0       	rjmp	.+4      	; 0x750 <printLine+0x40>
     74c:	21 e0       	ldi	r18, 0x01	; 1
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	9f 93       	push	r25
     752:	8f 93       	push	r24
     754:	3f 93       	push	r19
     756:	2f 93       	push	r18
     758:	ce 01       	movw	r24, r28
     75a:	93 95       	inc	r25
     75c:	9f 93       	push	r25
     75e:	8f 93       	push	r24
     760:	8e 01       	movw	r16, r28
     762:	0f 5f       	subi	r16, 0xFF	; 255
     764:	1f 4f       	sbci	r17, 0xFF	; 255
     766:	1f 93       	push	r17
     768:	0f 93       	push	r16
     76a:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
	checksum_NMEA(strbuf);
     76e:	c8 01       	movw	r24, r16
     770:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     774:	f8 01       	movw	r30, r16
     776:	01 90       	ld	r0, Z+
     778:	00 20       	and	r0, r0
     77a:	e9 f7       	brne	.-6      	; 0x776 <printLine+0x66>
     77c:	31 97       	sbiw	r30, 0x01	; 1
     77e:	af 01       	movw	r20, r30
     780:	40 1b       	sub	r20, r16
     782:	51 0b       	sbc	r21, r17
     784:	b8 01       	movw	r22, r16
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	0e 94 ac 19 	call	0x3358	; 0x3358 <send_USART>
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	de bf       	out	0x3e, r29	; 62

}
     790:	ca 5f       	subi	r28, 0xFA	; 250
     792:	de 4f       	sbci	r29, 0xFE	; 254
     794:	cd bf       	out	0x3d, r28	; 61
     796:	de bf       	out	0x3e, r29	; 62
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	08 95       	ret

000007a2 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding the NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     7a2:	cf 92       	push	r12
     7a4:	df 92       	push	r13
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
     7b6:	cd 51       	subi	r28, 0x1D	; 29
     7b8:	d1 40       	sbci	r29, 0x01	; 1
     7ba:	cd bf       	out	0x3d, r28	; 61
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	d8 2e       	mov	r13, r24
     7c0:	c9 2e       	mov	r12, r25

//	char format_CMD[] = "$S%dCMD,%s,%s";
	char format_CMD[] = "CMD,%s,%s";
     7c2:	8a e0       	ldi	r24, 0x0A	; 10
     7c4:	e3 e4       	ldi	r30, 0x43	; 67
     7c6:	f8 e8       	ldi	r31, 0x88	; 136
     7c8:	9e 01       	movw	r18, r28
     7ca:	2f 5f       	subi	r18, 0xFF	; 255
     7cc:	3f 4f       	sbci	r19, 0xFF	; 255
     7ce:	79 01       	movw	r14, r18
     7d0:	d9 01       	movw	r26, r18
     7d2:	01 90       	ld	r0, Z+
     7d4:	0d 92       	st	X+, r0
     7d6:	8a 95       	dec	r24
     7d8:	e1 f7       	brne	.-8      	; 0x7d2 <echo_cmd+0x30>
	char currenttime[20], strbuf[BUFSIZE];

		// Format and echo the command line
	get_time(currenttime);
     7da:	8e 01       	movw	r16, r28
     7dc:	05 5f       	subi	r16, 0xF5	; 245
     7de:	1f 4f       	sbci	r17, 0xFF	; 255
     7e0:	c8 01       	movw	r24, r16
     7e2:	0e 94 83 05 	call	0xb06	; 0xb06 <get_time>
//	sprintf(strbuf, format_CMD, get_SPECID, currenttime, cmdline);
//	checksum_NMEA(strbuf);
//	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
	sprintf(strbuf, format_CMD, currenttime, cmdline);
     7e6:	cf 92       	push	r12
     7e8:	df 92       	push	r13
     7ea:	1f 93       	push	r17
     7ec:	0f 93       	push	r16
     7ee:	ff 92       	push	r15
     7f0:	ef 92       	push	r14
     7f2:	0c 5e       	subi	r16, 0xEC	; 236
     7f4:	1f 4f       	sbci	r17, 0xFF	; 255
     7f6:	1f 93       	push	r17
     7f8:	0f 93       	push	r16
     7fa:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
	printLine(strbuf);
     7fe:	c8 01       	movw	r24, r16
     800:	0e 94 88 03 	call	0x710	; 0x710 <printLine>

}
     804:	cd bf       	out	0x3d, r28	; 61
     806:	de bf       	out	0x3e, r29	; 62
     808:	c3 5e       	subi	r28, 0xE3	; 227
     80a:	de 4f       	sbci	r29, 0xFE	; 254
     80c:	cd bf       	out	0x3d, r28	; 61
     80e:	de bf       	out	0x3e, r29	; 62
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	ff 90       	pop	r15
     81a:	ef 90       	pop	r14
     81c:	df 90       	pop	r13
     81e:	cf 90       	pop	r12
     820:	08 95       	ret

00000822 <send_prompt>:

	If specMech is rebooted, it will only prompt with a single exclamation
	point (!) until it receives an acknowledgment in the form of a single !.
------------------------------------------------------------------------------*/
void send_prompt(char prompt)
{
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	00 d0       	rcall	.+0      	; 0x828 <send_prompt+0x6>
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62

	char prompt_str[2];

	prompt_str[0] = prompt;
     82c:	89 83       	std	Y+1, r24	; 0x01
	prompt_str[1] = '\0';
     82e:	1a 82       	std	Y+2, r1	; 0x02
	send_USART(0, (uint8_t*) prompt_str, 1);
     830:	41 e0       	ldi	r20, 0x01	; 1
     832:	be 01       	movw	r22, r28
     834:	6f 5f       	subi	r22, 0xFF	; 255
     836:	7f 4f       	sbci	r23, 0xFF	; 255
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	0e 94 ac 19 	call	0x3358	; 0x3358 <send_USART>

}
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	08 95       	ret

00000848 <rebootACKd>:
	Returns:
		YES if the reboot acknowledge string was received
		NO if it wasn't
------------------------------------------------------------------------------*/
uint8_t rebootACKd(char *cmdline)
{
     848:	cf 93       	push	r28


	if (!rebootackd) {
     84a:	c0 91 05 28 	lds	r28, 0x2805	; 0x802805 <rebootackd>
     84e:	c1 11       	cpse	r28, r1
     850:	22 c0       	rjmp	.+68     	; 0x896 <rebootACKd+0x4e>
     852:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     854:	80 81       	ld	r24, Z
     856:	81 32       	cpi	r24, 0x21	; 33
     858:	91 f4       	brne	.+36     	; 0x87e <rebootACKd+0x36>
     85a:	91 81       	ldd	r25, Z+1	; 0x01
     85c:	91 11       	cpse	r25, r1
     85e:	0f c0       	rjmp	.+30     	; 0x87e <rebootACKd+0x36>
			init_RTC(511);		// 1-sec RTC clock ticks
     860:	8f ef       	ldi	r24, 0xFF	; 255
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 67 17 	call	0x2ece	; 0x2ece <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     868:	85 e0       	ldi	r24, 0x05	; 5
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	80 93 11 2a 	sts	0x2A11, r24	; 0x802a11 <timeoutOLED>
     870:	90 93 12 2a 	sts	0x2A12, r25	; 0x802a12 <timeoutOLED+0x1>
			rebootackd = YES;
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <rebootackd>
			return(YES);
     87a:	c1 e0       	ldi	r28, 0x01	; 1
     87c:	0d c0       	rjmp	.+26     	; 0x898 <rebootACKd+0x50>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     87e:	81 32       	cpi	r24, 0x21	; 33
     880:	31 f4       	brne	.+12     	; 0x88e <rebootACKd+0x46>
     882:	81 81       	ldd	r24, Z+1	; 0x01
     884:	88 23       	and	r24, r24
     886:	19 f0       	breq	.+6      	; 0x88e <rebootACKd+0x46>
			reboot();
     888:	0e 94 8b 1b 	call	0x3716	; 0x3716 <reboot>
			return(NO);
     88c:	05 c0       	rjmp	.+10     	; 0x898 <rebootACKd+0x50>
		} else {
			send_prompt('!');
     88e:	81 e2       	ldi	r24, 0x21	; 33
     890:	0e 94 11 04 	call	0x822	; 0x822 <send_prompt>
			return(NO);
     894:	01 c0       	rjmp	.+2      	; 0x898 <rebootACKd+0x50>
		}
	}

	return(YES);
     896:	c1 e0       	ldi	r28, 0x01	; 1

}
     898:	8c 2f       	mov	r24, r28
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	cf 5f       	subi	r28, 0xFF	; 255
     8a8:	d1 09       	sbc	r29, r1
     8aa:	cd bf       	out	0x3d, r28	; 61
     8ac:	de bf       	out	0x3e, r29	; 62

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	static uint8_t cstack = 0;		// pcmd index

	get_cmdline(cmdline);
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	0e 94 bb 02 	call	0x576	; 0x576 <get_cmdline>

	if (!rebootACKd(cmdline)) {		// Reboot acknowledge failed
     8b6:	ce 01       	movw	r24, r28
     8b8:	01 96       	adiw	r24, 0x01	; 1
     8ba:	0e 94 24 04 	call	0x848	; 0x848 <rebootACKd>
     8be:	88 23       	and	r24, r24
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <commands+0x26>
     8c2:	5d c0       	rjmp	.+186    	; 0x97e <commands+0xe0>
		return;
	}

	if ((cmdline[0] == '\0') || (cmdline[0] == '!')) {		// <CR> alone is not an error
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	88 23       	and	r24, r24
     8c8:	11 f0       	breq	.+4      	; 0x8ce <commands+0x30>
     8ca:	81 32       	cpi	r24, 0x21	; 33
     8cc:	31 f4       	brne	.+12     	; 0x8da <commands+0x3c>
		firstpass = NO;
     8ce:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <firstpass>
		send_prompt('>');
     8d2:	8e e3       	ldi	r24, 0x3E	; 62
     8d4:	0e 94 11 04 	call	0x822	; 0x822 <send_prompt>
		return;
     8d8:	52 c0       	rjmp	.+164    	; 0x97e <commands+0xe0>
	}

	echo_cmd(cmdline);
     8da:	ce 01       	movw	r24, r28
     8dc:	01 96       	adiw	r24, 0x01	; 1
     8de:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <echo_cmd>

	parse_cmd(cmdline, cstack);
     8e2:	60 91 04 28 	lds	r22, 0x2804	; 0x802804 <__data_end>
     8e6:	ce 01       	movw	r24, r28
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <parse_cmd>

	switch (pcmd[cstack].cverb) {
     8ee:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
     8f2:	24 e3       	ldi	r18, 0x34	; 52
     8f4:	82 9f       	mul	r24, r18
     8f6:	f0 01       	movw	r30, r0
     8f8:	11 24       	eor	r1, r1
     8fa:	e9 5f       	subi	r30, 0xF9	; 249
     8fc:	f7 4d       	sbci	r31, 0xD7	; 215
     8fe:	e0 81       	ld	r30, Z
     900:	4e 2f       	mov	r20, r30
     902:	50 e0       	ldi	r21, 0x00	; 0
     904:	fa 01       	movw	r30, r20
     906:	e2 55       	subi	r30, 0x52	; 82
     908:	f1 09       	sbc	r31, r1
     90a:	e3 32       	cpi	r30, 0x23	; 35
     90c:	f1 05       	cpc	r31, r1
     90e:	20 f5       	brcc	.+72     	; 0x958 <commands+0xba>
     910:	e0 5b       	subi	r30, 0xB0	; 176
     912:	ff 4f       	sbci	r31, 0xFF	; 255
     914:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <__tablejump2__>
		case 'c':				// close
			close_PNEU(cstack);
     918:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <close_PNEU>
			break;
     91c:	23 c0       	rjmp	.+70     	; 0x964 <commands+0xc6>

		case 'o':				// open
			open_PNEU(cstack);
     91e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <open_PNEU>
			break;
     922:	20 c0       	rjmp	.+64     	; 0x964 <commands+0xc6>

		case 'm':				// move
			move_MOTOR(cstack);
     924:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <move_MOTOR>
			break;
     928:	1d c0       	rjmp	.+58     	; 0x964 <commands+0xc6>

		case 'r':				// report
			report(cstack);
     92a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <report>
			break;
     92e:	1a c0       	rjmp	.+52     	; 0x964 <commands+0xc6>

		case 's':				// set
			set(cstack);
     930:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <set>
			break;
     934:	17 c0       	rjmp	.+46     	; 0x964 <commands+0xc6>

		case 't':
			testroutine();
     936:	0e 94 47 18 	call	0x308e	; 0x308e <testroutine>
			break;
     93a:	14 c0       	rjmp	.+40     	; 0x964 <commands+0xc6>

		case 'R':				// Reboot
			send_prompt('>');
     93c:	8e e3       	ldi	r24, 0x3E	; 62
     93e:	0e 94 11 04 	call	0x822	; 0x822 <send_prompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     942:	8a e6       	ldi	r24, 0x6A	; 106
     944:	94 e0       	ldi	r25, 0x04	; 4
     946:	21 e0       	ldi	r18, 0x01	; 1
     948:	81 50       	subi	r24, 0x01	; 1
     94a:	90 40       	sbci	r25, 0x00	; 0
     94c:	20 40       	sbci	r18, 0x00	; 0
     94e:	e1 f7       	brne	.-8      	; 0x948 <commands+0xaa>
     950:	00 c0       	rjmp	.+0      	; 0x952 <commands+0xb4>
			_delay_ms(100);		// Avoids finishing the command loop before reboot
			reboot();
     952:	0e 94 8b 1b 	call	0x3716	; 0x3716 <reboot>
			return;
     956:	13 c0       	rjmp	.+38     	; 0x97e <commands+0xe0>

		default:
			printError(ERR_BADCOMMAND, "Not a command");
     958:	6d e4       	ldi	r22, 0x4D	; 77
     95a:	78 e8       	ldi	r23, 0x88	; 136
     95c:	89 ec       	ldi	r24, 0xC9	; 201
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     964:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	6a e0       	ldi	r22, 0x0A	; 10
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	0e 94 26 21 	call	0x424c	; 0x424c <__divmodhi4>
     974:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <__data_end>
	send_prompt('>');
     978:	8e e3       	ldi	r24, 0x3E	; 62
     97a:	0e 94 11 04 	call	0x822	; 0x822 <send_prompt>

}
     97e:	c1 50       	subi	r28, 0x01	; 1
     980:	df 4f       	sbci	r29, 0xFF	; 255
     982:	cd bf       	out	0x3d, r28	; 61
     984:	de bf       	out	0x3e, r29	; 62
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     98c:	fb 01       	movw	r30, r22
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     98e:	70 81       	ld	r23, Z
	minutes = (*ds3231time++);
     990:	61 81       	ldd	r22, Z+1	; 0x01
	hours = (*ds3231time++);
     992:	52 81       	ldd	r21, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     994:	44 81       	ldd	r20, Z+4	; 0x04
	month = (*ds3231time++);
     996:	35 81       	ldd	r19, Z+5	; 0x05
	year = (*ds3231time);
     998:	26 81       	ldd	r18, Z+6	; 0x06

	sprintf(isotime, "20%02x-%02x-%02xT%02x:%02x:%02x",
     99a:	1f 92       	push	r1
     99c:	7f 93       	push	r23
     99e:	1f 92       	push	r1
     9a0:	6f 93       	push	r22
     9a2:	1f 92       	push	r1
     9a4:	5f 93       	push	r21
     9a6:	1f 92       	push	r1
     9a8:	4f 93       	push	r20
     9aa:	1f 92       	push	r1
     9ac:	3f 93       	push	r19
     9ae:	1f 92       	push	r1
     9b0:	2f 93       	push	r18
     9b2:	2b e5       	ldi	r18, 0x5B	; 91
     9b4:	38 e8       	ldi	r19, 0x88	; 136
     9b6:	3f 93       	push	r19
     9b8:	2f 93       	push	r18
     9ba:	9f 93       	push	r25
     9bc:	8f 93       	push	r24
     9be:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
		year, month, date, hours, minutes, seconds);

}
     9c2:	8d b7       	in	r24, 0x3d	; 61
     9c4:	9e b7       	in	r25, 0x3e	; 62
     9c6:	40 96       	adiw	r24, 0x10	; 16
     9c8:	8d bf       	out	0x3d, r24	; 61
     9ca:	9e bf       	out	0x3e, r25	; 62
     9cc:	08 95       	ret

000009ce <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ssZ
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     9ce:	dc 01       	movw	r26, r24
     9d0:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     9d2:	81 89       	ldd	r24, Z+17	; 0x11
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	c0 97       	sbiw	r24, 0x30	; 48
     9d8:	82 95       	swap	r24
     9da:	92 95       	swap	r25
     9dc:	90 7f       	andi	r25, 0xF0	; 240
     9de:	98 27       	eor	r25, r24
     9e0:	80 7f       	andi	r24, 0xF0	; 240
     9e2:	98 27       	eor	r25, r24
     9e4:	92 89       	ldd	r25, Z+18	; 0x12
     9e6:	90 53       	subi	r25, 0x30	; 48
     9e8:	89 2b       	or	r24, r25
     9ea:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     9ec:	86 85       	ldd	r24, Z+14	; 0x0e
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	c0 97       	sbiw	r24, 0x30	; 48
     9f2:	82 95       	swap	r24
     9f4:	92 95       	swap	r25
     9f6:	90 7f       	andi	r25, 0xF0	; 240
     9f8:	98 27       	eor	r25, r24
     9fa:	80 7f       	andi	r24, 0xF0	; 240
     9fc:	98 27       	eor	r25, r24
     9fe:	97 85       	ldd	r25, Z+15	; 0x0f
     a00:	90 53       	subi	r25, 0x30	; 48
     a02:	89 2b       	or	r24, r25
     a04:	11 96       	adiw	r26, 0x01	; 1
     a06:	8c 93       	st	X, r24
     a08:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     a0a:	83 85       	ldd	r24, Z+11	; 0x0b
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	c0 97       	sbiw	r24, 0x30	; 48
     a10:	82 95       	swap	r24
     a12:	92 95       	swap	r25
     a14:	90 7f       	andi	r25, 0xF0	; 240
     a16:	98 27       	eor	r25, r24
     a18:	80 7f       	andi	r24, 0xF0	; 240
     a1a:	98 27       	eor	r25, r24
     a1c:	94 85       	ldd	r25, Z+12	; 0x0c
     a1e:	90 53       	subi	r25, 0x30	; 48
     a20:	89 2b       	or	r24, r25
     a22:	12 96       	adiw	r26, 0x02	; 2
     a24:	8c 93       	st	X, r24
     a26:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	13 96       	adiw	r26, 0x03	; 3
     a2c:	8c 93       	st	X, r24
     a2e:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     a30:	80 85       	ldd	r24, Z+8	; 0x08
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	c0 97       	sbiw	r24, 0x30	; 48
     a36:	82 95       	swap	r24
     a38:	92 95       	swap	r25
     a3a:	90 7f       	andi	r25, 0xF0	; 240
     a3c:	98 27       	eor	r25, r24
     a3e:	80 7f       	andi	r24, 0xF0	; 240
     a40:	98 27       	eor	r25, r24
     a42:	91 85       	ldd	r25, Z+9	; 0x09
     a44:	90 53       	subi	r25, 0x30	; 48
     a46:	89 2b       	or	r24, r25
     a48:	14 96       	adiw	r26, 0x04	; 4
     a4a:	8c 93       	st	X, r24
     a4c:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     a4e:	25 81       	ldd	r18, Z+5	; 0x05
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	20 53       	subi	r18, 0x30	; 48
     a54:	31 09       	sbc	r19, r1
     a56:	22 95       	swap	r18
     a58:	32 95       	swap	r19
     a5a:	30 7f       	andi	r19, 0xF0	; 240
     a5c:	32 27       	eor	r19, r18
     a5e:	20 7f       	andi	r18, 0xF0	; 240
     a60:	32 27       	eor	r19, r18
     a62:	86 81       	ldd	r24, Z+6	; 0x06
     a64:	80 53       	subi	r24, 0x30	; 48
     a66:	28 2b       	or	r18, r24
     a68:	15 96       	adiw	r26, 0x05	; 5
     a6a:	2c 93       	st	X, r18
     a6c:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     a6e:	22 81       	ldd	r18, Z+2	; 0x02
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	20 53       	subi	r18, 0x30	; 48
     a74:	31 09       	sbc	r19, r1
     a76:	22 95       	swap	r18
     a78:	32 95       	swap	r19
     a7a:	30 7f       	andi	r19, 0xF0	; 240
     a7c:	32 27       	eor	r19, r18
     a7e:	20 7f       	andi	r18, 0xF0	; 240
     a80:	32 27       	eor	r19, r18
     a82:	83 81       	ldd	r24, Z+3	; 0x03
     a84:	80 53       	subi	r24, 0x30	; 48
     a86:	28 2b       	or	r18, r24
     a88:	16 96       	adiw	r26, 0x06	; 6
     a8a:	2c 93       	st	X, r18
     a8c:	08 95       	ret

00000a8e <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     a8e:	ef 92       	push	r14
     a90:	ff 92       	push	r15
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	7b 01       	movw	r14, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
     aa0:	c8 2f       	mov	r28, r24
     aa2:	83 36       	cpi	r24, 0x63	; 99
     aa4:	19 f4       	brne	.+6      	; 0xaac <read_DS3231+0x1e>
		stop_TWI();
     aa6:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(ERROR);
     aaa:	26 c0       	rjmp	.+76     	; 0xaf8 <read_DS3231+0x6a>
    }  

// Can probably remove the error checks

	if (write_TWI(0x00) == ERROR) {	// Register 00h
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
     ab2:	c8 2f       	mov	r28, r24
     ab4:	83 36       	cpi	r24, 0x63	; 99
     ab6:	19 f4       	brne	.+6      	; 0xabe <read_DS3231+0x30>
		stop_TWI();
     ab8:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(ERROR);
     abc:	1d c0       	rjmp	.+58     	; 0xaf8 <read_DS3231+0x6a>
	}

	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
     abe:	61 e0       	ldi	r22, 0x01	; 1
     ac0:	88 e6       	ldi	r24, 0x68	; 104
     ac2:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
     ac6:	c8 2f       	mov	r28, r24
     ac8:	83 36       	cpi	r24, 0x63	; 99
     aca:	61 f4       	brne	.+24     	; 0xae4 <read_DS3231+0x56>
		stop_TWI();
     acc:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(ERROR);
     ad0:	13 c0       	rjmp	.+38     	; 0xaf8 <read_DS3231+0x6a>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     ad2:	87 01       	movw	r16, r14
     ad4:	0c 0f       	add	r16, r28
     ad6:	11 1d       	adc	r17, r1
     ad8:	0e 94 c4 18 	call	0x3188	; 0x3188 <read_TWI>
     adc:	f8 01       	movw	r30, r16
     ade:	80 83       	st	Z, r24
	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 6; i++) {
     ae0:	cf 5f       	subi	r28, 0xFF	; 255
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <read_DS3231+0x58>
     ae4:	c0 e0       	ldi	r28, 0x00	; 0
     ae6:	c6 30       	cpi	r28, 0x06	; 6
     ae8:	a0 f3       	brcs	.-24     	; 0xad2 <read_DS3231+0x44>
		ds3231time[i] = read_TWI();
	}

	ds3231time[6] = readlast_TWI();
     aea:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <readlast_TWI>
     aee:	f7 01       	movw	r30, r14
     af0:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     af2:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>

	return(NOERROR);
     af6:	c0 e0       	ldi	r28, 0x00	; 0

}
     af8:	8c 2f       	mov	r24, r28
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
     b04:	08 95       	ret

00000b06 <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     b06:	ef 92       	push	r14
     b08:	ff 92       	push	r15
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	27 97       	sbiw	r28, 0x07	; 7
     b16:	cd bf       	out	0x3d, r28	; 61
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	7c 01       	movw	r14, r24

	uint8_t retval, ds3231time[7];

	if ((retval = read_DS3231(DS3231ADDR, ds3231time))) {
     b1c:	be 01       	movw	r22, r28
     b1e:	6f 5f       	subi	r22, 0xFF	; 255
     b20:	7f 4f       	sbci	r23, 0xFF	; 255
     b22:	88 e6       	ldi	r24, 0x68	; 104
     b24:	0e 94 47 05 	call	0xa8e	; 0xa8e <read_DS3231>
     b28:	18 2f       	mov	r17, r24
     b2a:	88 23       	and	r24, r24
     b2c:	81 f0       	breq	.+32     	; 0xb4e <get_time+0x48>
		printError(ERR_GETTIME, "get_time DS3231");
     b2e:	6b e7       	ldi	r22, 0x7B	; 123
     b30:	78 e8       	ldi	r23, 0x88	; 136
     b32:	85 e6       	ldi	r24, 0x65	; 101
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
		strcpy(isotime, "DateTime?");
     b3a:	8a e0       	ldi	r24, 0x0A	; 10
     b3c:	eb e8       	ldi	r30, 0x8B	; 139
     b3e:	f8 e8       	ldi	r31, 0x88	; 136
     b40:	d7 01       	movw	r26, r14
     b42:	01 90       	ld	r0, Z+
     b44:	0d 92       	st	X+, r0
     b46:	8a 95       	dec	r24
     b48:	e1 f7       	brne	.-8      	; 0xb42 <get_time+0x3c>
		return(retval);
     b4a:	81 2f       	mov	r24, r17
     b4c:	07 c0       	rjmp	.+14     	; 0xb5c <get_time+0x56>
	}

	convert_ds2iso(isotime, ds3231time);
     b4e:	be 01       	movw	r22, r28
     b50:	6f 5f       	subi	r22, 0xFF	; 255
     b52:	7f 4f       	sbci	r23, 0xFF	; 255
     b54:	c7 01       	movw	r24, r14
     b56:	0e 94 c6 04 	call	0x98c	; 0x98c <convert_ds2iso>
	return(0);
     b5a:	80 e0       	ldi	r24, 0x00	; 0

}
     b5c:	27 96       	adiw	r28, 0x07	; 7
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	08 95       	ret

00000b6e <write_DS3231>:

	Returns
		TWI errors
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     b6e:	ef 92       	push	r14
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	8b 01       	movw	r16, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
     b82:	c8 2f       	mov	r28, r24
     b84:	83 36       	cpi	r24, 0x63	; 99
     b86:	19 f4       	brne	.+6      	; 0xb8e <write_DS3231+0x20>
		stop_TWI();
     b88:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(ERROR);
     b8c:	20 c0       	rjmp	.+64     	; 0xbce <write_DS3231+0x60>
	}

	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
     b94:	c8 2f       	mov	r28, r24
     b96:	83 36       	cpi	r24, 0x63	; 99
     b98:	a1 f4       	brne	.+40     	; 0xbc2 <write_DS3231+0x54>
		stop_TWI();
     b9a:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(ERROR);
     b9e:	17 c0       	rjmp	.+46     	; 0xbce <write_DS3231+0x60>
	}

	for (i = 0; i < 7; i++) {
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     ba0:	78 01       	movw	r14, r16
     ba2:	8f ef       	ldi	r24, 0xFF	; 255
     ba4:	e8 1a       	sub	r14, r24
     ba6:	f8 0a       	sbc	r15, r24
     ba8:	f8 01       	movw	r30, r16
     baa:	80 81       	ld	r24, Z
     bac:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
     bb0:	c8 2f       	mov	r28, r24
     bb2:	83 36       	cpi	r24, 0x63	; 99
     bb4:	19 f4       	brne	.+6      	; 0xbbc <write_DS3231+0x4e>
			stop_TWI();
     bb6:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
			return(ERROR);
     bba:	09 c0       	rjmp	.+18     	; 0xbce <write_DS3231+0x60>
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     bbc:	df 5f       	subi	r29, 0xFF	; 255
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     bbe:	87 01       	movw	r16, r14
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <write_DS3231+0x56>
     bc2:	d0 e0       	ldi	r29, 0x00	; 0
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     bc4:	d7 30       	cpi	r29, 0x07	; 7
     bc6:	60 f3       	brcs	.-40     	; 0xba0 <write_DS3231+0x32>
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
			stop_TWI();
			return(ERROR);
		}
	}
	stop_TWI();
     bc8:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>

	return(NOERROR);
     bcc:	c0 e0       	ldi	r28, 0x00	; 0

}
     bce:	8c 2f       	mov	r24, r28
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	08 95       	ret

00000bde <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	27 97       	sbiw	r28, 0x07	; 7
     bea:	cd bf       	out	0x3d, r28	; 61
     bec:	de bf       	out	0x3e, r29	; 62

	uint8_t ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     bee:	bc 01       	movw	r22, r24
     bf0:	ce 01       	movw	r24, r28
     bf2:	01 96       	adiw	r24, 0x01	; 1
     bf4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <convert_iso2ds>
	if (write_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     bf8:	be 01       	movw	r22, r28
     bfa:	6f 5f       	subi	r22, 0xFF	; 255
     bfc:	7f 4f       	sbci	r23, 0xFF	; 255
     bfe:	88 e6       	ldi	r24, 0x68	; 104
     c00:	0e 94 b7 05 	call	0xb6e	; 0xb6e <write_DS3231>
     c04:	18 2f       	mov	r17, r24
     c06:	83 36       	cpi	r24, 0x63	; 99
     c08:	39 f4       	brne	.+14     	; 0xc18 <put_time+0x3a>
		printError(ERR_PUTTIME, "put_time DS3231");
     c0a:	65 e9       	ldi	r22, 0x95	; 149
     c0c:	78 e8       	ldi	r23, 0x88	; 136
     c0e:	86 e6       	ldi	r24, 0x66	; 102
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
		return(ERROR);
     c16:	01 c0       	rjmp	.+2      	; 0xc1a <put_time+0x3c>
	}
	return(NOERROR);
     c18:	10 e0       	ldi	r17, 0x00	; 0

}
     c1a:	81 2f       	mov	r24, r17
     c1c:	27 96       	adiw	r28, 0x07	; 7
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	08 95       	ret

00000c2a <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     c2a:	45 e1       	ldi	r20, 0x15	; 21
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	6b e0       	ldi	r22, 0x0B	; 11
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	0e 94 d8 23 	call	0x47b0	; 0x47b0 <eeprom_read_block>
     c36:	08 95       	ret

00000c38 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     c38:	4b e0       	ldi	r20, 0x0B	; 11
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	0e 94 d8 23 	call	0x47b0	; 0x47b0 <eeprom_read_block>
     c44:	08 95       	ret

00000c46 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	65 97       	sbiw	r28, 0x15	; 21
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     c54:	ce 01       	movw	r24, r28
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	0e 94 83 05 	call	0xb06	; 0xb06 <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     c5c:	45 e1       	ldi	r20, 0x15	; 21
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	6b e0       	ldi	r22, 0x0B	; 11
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	ce 01       	movw	r24, r28
     c66:	01 96       	adiw	r24, 0x01	; 1
     c68:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <eeprom_update_block>

}
     c6c:	65 96       	adiw	r28, 0x15	; 21
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	08 95       	ret

00000c78 <update_VERSION>:

void update_VERSION(void)
{
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	2b 97       	sbiw	r28, 0x0b	; 11
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     c86:	8b e0       	ldi	r24, 0x0B	; 11
     c88:	e5 ea       	ldi	r30, 0xA5	; 165
     c8a:	f8 e8       	ldi	r31, 0x88	; 136
     c8c:	de 01       	movw	r26, r28
     c8e:	11 96       	adiw	r26, 0x01	; 1
     c90:	01 90       	ld	r0, Z+
     c92:	0d 92       	st	X+, r0
     c94:	8a 95       	dec	r24
     c96:	e1 f7       	brne	.-8      	; 0xc90 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     c98:	4b e0       	ldi	r20, 0x0B	; 11
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	ce 01       	movw	r24, r28
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <eeprom_update_block>

}
     ca8:	2b 96       	adiw	r28, 0x0b	; 11
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     cb4:	0e 94 23 06 	call	0xc46	; 0xc46 <update_BOOTTIME>
	update_VERSION();
     cb8:	0e 94 3c 06 	call	0xc78	; 0xc78 <update_VERSION>
     cbc:	08 95       	ret

00000cbe <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	c9 50       	subi	r28, 0x09	; 9
     ccc:	d1 40       	sbci	r29, 0x01	; 1
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
//	const char errorFormat[] = "$S%dERR,%d,%s";
	const char errorFormat[] = "ERR,%d,%s";
     cd2:	9e 01       	movw	r18, r28
     cd4:	33 95       	inc	r19
     cd6:	4a e0       	ldi	r20, 0x0A	; 10
     cd8:	e0 eb       	ldi	r30, 0xB0	; 176
     cda:	f8 e8       	ldi	r31, 0x88	; 136
     cdc:	d9 01       	movw	r26, r18
     cde:	01 90       	ld	r0, Z+
     ce0:	0d 92       	st	X+, r0
     ce2:	4a 95       	dec	r20
     ce4:	e1 f7       	brne	.-8      	; 0xcde <printError+0x20>

	sprintf(strbuf, errorFormat, errorNumber, errorString);
     ce6:	7f 93       	push	r23
     ce8:	6f 93       	push	r22
     cea:	9f 93       	push	r25
     cec:	8f 93       	push	r24
     cee:	3f 93       	push	r19
     cf0:	2f 93       	push	r18
     cf2:	8e 01       	movw	r16, r28
     cf4:	0f 5f       	subi	r16, 0xFF	; 255
     cf6:	1f 4f       	sbci	r17, 0xFF	; 255
     cf8:	1f 93       	push	r17
     cfa:	0f 93       	push	r16
     cfc:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
//	checksum_NMEA(strbuf);
//	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
	printLine(strbuf);
     d00:	c8 01       	movw	r24, r16
     d02:	0e 94 88 03 	call	0x710	; 0x710 <printLine>

}
     d06:	cd bf       	out	0x3d, r28	; 61
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	c7 5f       	subi	r28, 0xF7	; 247
     d0c:	de 4f       	sbci	r29, 0xFE	; 254
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	08 95       	ret

00000d1c <read_FRAM>:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)

------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     d1c:	cf 92       	push	r12
     d1e:	df 92       	push	r13
     d20:	ef 92       	push	r14
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	d8 2f       	mov	r29, r24
     d2e:	d6 2e       	mov	r13, r22
     d30:	e7 2e       	mov	r14, r23
     d32:	8a 01       	movw	r16, r20
     d34:	f2 2e       	mov	r15, r18

	uint8_t i, memhigh, memlow;

	strcpy((char*) val, "SavedTime?");
     d36:	8b e0       	ldi	r24, 0x0B	; 11
     d38:	ea eb       	ldi	r30, 0xBA	; 186
     d3a:	f8 e8       	ldi	r31, 0x88	; 136
     d3c:	da 01       	movw	r26, r20
     d3e:	01 90       	ld	r0, Z+
     d40:	0d 92       	st	X+, r0
     d42:	8a 95       	dec	r24
     d44:	e1 f7       	brne	.-8      	; 0xd3e <read_FRAM+0x22>

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if (start_TWI(addr, TWIWRITE) == ERROR) {		// TWI start
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	8d 2f       	mov	r24, r29
     d4a:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
     d4e:	c8 2f       	mov	r28, r24
     d50:	83 36       	cpi	r24, 0x63	; 99
     d52:	19 f4       	brne	.+6      	; 0xd5a <read_FRAM+0x3e>
		stop_TWI();
     d54:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(ERROR);
     d58:	31 c0       	rjmp	.+98     	; 0xdbc <read_FRAM+0xa0>
	}

	if (write_TWI(memhigh) == ERROR) {			// Send memory address
     d5a:	8e 2d       	mov	r24, r14
     d5c:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
     d60:	c8 2f       	mov	r28, r24
     d62:	83 36       	cpi	r24, 0x63	; 99
     d64:	59 f1       	breq	.+86     	; 0xdbc <read_FRAM+0xa0>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {
     d66:	8d 2d       	mov	r24, r13
     d68:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
     d6c:	c8 2f       	mov	r28, r24
     d6e:	83 36       	cpi	r24, 0x63	; 99
     d70:	29 f1       	breq	.+74     	; 0xdbc <read_FRAM+0xa0>
		return(ERROR);
	}

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
     d72:	61 e0       	ldi	r22, 0x01	; 1
     d74:	8d 2f       	mov	r24, r29
     d76:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
     d7a:	c8 2f       	mov	r28, r24
     d7c:	83 36       	cpi	r24, 0x63	; 99
     d7e:	f1 f0       	breq	.+60     	; 0xdbc <read_FRAM+0xa0>
     d80:	c0 e0       	ldi	r28, 0x00	; 0
     d82:	08 c0       	rjmp	.+16     	; 0xd94 <read_FRAM+0x78>
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     d84:	68 01       	movw	r12, r16
     d86:	cc 0e       	add	r12, r28
     d88:	d1 1c       	adc	r13, r1
     d8a:	0e 94 c4 18 	call	0x3188	; 0x3188 <read_TWI>
     d8e:	f6 01       	movw	r30, r12
     d90:	80 83       	st	Z, r24

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
     d92:	cf 5f       	subi	r28, 0xFF	; 255
     d94:	2c 2f       	mov	r18, r28
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	8f 2d       	mov	r24, r15
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	28 17       	cp	r18, r24
     da0:	39 07       	cpc	r19, r25
     da2:	84 f3       	brlt	.-32     	; 0xd84 <read_FRAM+0x68>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     da4:	8f 2d       	mov	r24, r15
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	e8 01       	movw	r28, r16
     dac:	c8 0f       	add	r28, r24
     dae:	d9 1f       	adc	r29, r25
     db0:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <readlast_TWI>
     db4:	88 83       	st	Y, r24

	stop_TWI();
     db6:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>

	return(NOERROR);
     dba:	c0 e0       	ldi	r28, 0x00	; 0

}
     dbc:	8c 2f       	mov	r24, r28
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	08 95       	ret

00000dd0 <write_FRAM>:
	Returns:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     dd0:	ef 92       	push	r14
     dd2:	ff 92       	push	r15
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	f6 2e       	mov	r15, r22
     dde:	17 2f       	mov	r17, r23
     de0:	ea 01       	movw	r28, r20
     de2:	02 2f       	mov	r16, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if ((retval = start_TWI(addr, TWIWRITE))) {	// TWI START
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
     dea:	81 11       	cpse	r24, r1
     dec:	1c c0       	rjmp	.+56     	; 0xe26 <write_FRAM+0x56>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {		// FRAM address to write
     dee:	81 2f       	mov	r24, r17
     df0:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
     df4:	81 11       	cpse	r24, r1
     df6:	17 c0       	rjmp	.+46     	; 0xe26 <write_FRAM+0x56>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
     df8:	8f 2d       	mov	r24, r15
     dfa:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
     dfe:	81 11       	cpse	r24, r1
     e00:	12 c0       	rjmp	.+36     	; 0xe26 <write_FRAM+0x56>
     e02:	10 e0       	ldi	r17, 0x00	; 0
     e04:	0b c0       	rjmp	.+22     	; 0xe1c <write_FRAM+0x4c>
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     e06:	7e 01       	movw	r14, r28
     e08:	8f ef       	ldi	r24, 0xFF	; 255
     e0a:	e8 1a       	sub	r14, r24
     e0c:	f8 0a       	sbc	r15, r24
     e0e:	88 81       	ld	r24, Y
     e10:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
     e14:	81 11       	cpse	r24, r1
     e16:	07 c0       	rjmp	.+14     	; 0xe26 <write_FRAM+0x56>
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     e18:	1f 5f       	subi	r17, 0xFF	; 255
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     e1a:	e7 01       	movw	r28, r14
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     e1c:	10 17       	cp	r17, r16
     e1e:	98 f3       	brcs	.-26     	; 0xe06 <write_FRAM+0x36>
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
			return(retval);
		}
	}

	stop_TWI();
     e20:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>

	return(0);
     e24:	80 e0       	ldi	r24, 0x00	; 0

}
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	08 95       	ret

00000e34 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     e34:	8f 92       	push	r8
     e36:	9f 92       	push	r9
     e38:	af 92       	push	r10
     e3a:	bf 92       	push	r11
     e3c:	cf 92       	push	r12
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <get_humidity+0x1a>
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <get_humidity+0x1c>
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62

	uint8_t adcpin;
	float voltage, humidity, temperature;

	switch (sensor) {
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	59 f0       	breq	.+22     	; 0xe6e <get_humidity+0x3a>
     e58:	18 f0       	brcs	.+6      	; 0xe60 <get_humidity+0x2c>
     e5a:	82 30       	cpi	r24, 0x02	; 2
     e5c:	79 f0       	breq	.+30     	; 0xe7c <get_humidity+0x48>
     e5e:	15 c0       	rjmp	.+42     	; 0xe8a <get_humidity+0x56>
		case 0:
			temperature = get_temperature(0);
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	0e 94 1f 18 	call	0x303e	; 0x303e <get_temperature>
     e66:	6b 01       	movw	r12, r22
     e68:	7c 01       	movw	r14, r24
			adcpin = AIN0;		// production
     e6a:	40 e4       	ldi	r20, 0x40	; 64
			break;
     e6c:	17 c0       	rjmp	.+46     	; 0xe9c <get_humidity+0x68>
		case 1:
			temperature = get_temperature(1);
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	0e 94 1f 18 	call	0x303e	; 0x303e <get_temperature>
     e74:	6b 01       	movw	r12, r22
     e76:	7c 01       	movw	r14, r24
			adcpin = AIN1;
     e78:	40 e5       	ldi	r20, 0x50	; 80
			break;
     e7a:	10 c0       	rjmp	.+32     	; 0xe9c <get_humidity+0x68>
		case 2:
			temperature = get_temperature(2);
     e7c:	82 e0       	ldi	r24, 0x02	; 2
     e7e:	0e 94 1f 18 	call	0x303e	; 0x303e <get_temperature>
     e82:	6b 01       	movw	r12, r22
     e84:	7c 01       	movw	r14, r24
			adcpin = AIN2;
     e86:	40 e6       	ldi	r20, 0x60	; 96
			break;
     e88:	09 c0       	rjmp	.+18     	; 0xe9c <get_humidity+0x68>
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     e8a:	0f 2e       	mov	r0, r31
     e8c:	c1 2c       	mov	r12, r1
     e8e:	d1 2c       	mov	r13, r1
     e90:	f0 ea       	ldi	r31, 0xA0	; 160
     e92:	ef 2e       	mov	r14, r31
     e94:	f1 e4       	ldi	r31, 0x41	; 65
     e96:	ff 2e       	mov	r15, r31
     e98:	f0 2d       	mov	r31, r0
			temperature = get_temperature(2);
			adcpin = AIN2;
			break;
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     e9a:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
     e9c:	8e 01       	movw	r16, r28
     e9e:	0f 5f       	subi	r16, 0xFF	; 255
     ea0:	1f 4f       	sbci	r17, 0xFF	; 255
     ea2:	20 e8       	ldi	r18, 0x80	; 128
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	88 e4       	ldi	r24, 0x48	; 72
     ea8:	0e 94 ca 01 	call	0x394	; 0x394 <read_ADS1115>
     eac:	83 36       	cpi	r24, 0x63	; 99
     eae:	79 f1       	breq	.+94     	; 0xf0e <get_humidity+0xda>
		humidity = -666.0;
	}
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 ea       	ldi	r20, 0xA0	; 160
     eb6:	50 e4       	ldi	r21, 0x40	; 64
     eb8:	69 81       	ldd	r22, Y+1	; 0x01
     eba:	7a 81       	ldd	r23, Y+2	; 0x02
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	9c 81       	ldd	r25, Y+4	; 0x04
     ec0:	0e 94 13 1c 	call	0x3826	; 0x3826 <__divsf3>
     ec4:	2a e0       	ldi	r18, 0x0A	; 10
     ec6:	37 ed       	ldi	r19, 0xD7	; 215
     ec8:	43 e2       	ldi	r20, 0x23	; 35
     eca:	5e e3       	ldi	r21, 0x3E	; 62
     ecc:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__subsf3>
     ed0:	2f e5       	ldi	r18, 0x5F	; 95
     ed2:	39 e2       	ldi	r19, 0x29	; 41
     ed4:	4b ec       	ldi	r20, 0xCB	; 203
     ed6:	5b e3       	ldi	r21, 0x3B	; 59
     ed8:	0e 94 13 1c 	call	0x3826	; 0x3826 <__divsf3>
     edc:	4b 01       	movw	r8, r22
     ede:	5c 01       	movw	r10, r24
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
     ee0:	29 ec       	ldi	r18, 0xC9	; 201
     ee2:	3e e8       	ldi	r19, 0x8E	; 142
     ee4:	4d e0       	ldi	r20, 0x0D	; 13
     ee6:	5b e3       	ldi	r21, 0x3B	; 59
     ee8:	c7 01       	movw	r24, r14
     eea:	b6 01       	movw	r22, r12
     eec:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__mulsf3>
     ef0:	9b 01       	movw	r18, r22
     ef2:	ac 01       	movw	r20, r24
     ef4:	62 e2       	ldi	r22, 0x22	; 34
     ef6:	7d ef       	ldi	r23, 0xFD	; 253
     ef8:	86 e8       	ldi	r24, 0x86	; 134
     efa:	9f e3       	ldi	r25, 0x3F	; 63
     efc:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__subsf3>
     f00:	9b 01       	movw	r18, r22
     f02:	ac 01       	movw	r20, r24
     f04:	c5 01       	movw	r24, r10
     f06:	b4 01       	movw	r22, r8
     f08:	0e 94 13 1c 	call	0x3826	; 0x3826 <__divsf3>
     f0c:	04 c0       	rjmp	.+8      	; 0xf16 <get_humidity+0xe2>
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
		humidity = -666.0;
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	70 e8       	ldi	r23, 0x80	; 128
     f12:	86 e2       	ldi	r24, 0x26	; 38
     f14:	94 ec       	ldi	r25, 0xC4	; 196
	humidity = (humidity / (1.0546 - 0.00216 * temperature));
*/

	return(humidity);

}
     f16:	24 96       	adiw	r28, 0x04	; 4
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	08 95       	ret

00000f36 <initialize0>:
*/

void initialize0(void)
{

	init_PORTS();
     f36:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <init_PORTS>
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton setup
     f3a:	8b e0       	ldi	r24, 0x0B	; 11
     f3c:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f44b6>
	init_XPORT();
     f40:	0e 94 95 1b 	call	0x372a	; 0x372a <init_XPORT>
	init_SPECID();
     f44:	0e 94 17 18 	call	0x302e	; 0x302e <init_SPECID>
	init_LED();
     f48:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <init_LED>
	init_BEEPER();
     f4c:	0e 94 b4 02 	call	0x568	; 0x568 <init_BEEPER>
	init_TWI();
     f50:	0e 94 b9 18 	call	0x3172	; 0x3172 <init_TWI>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
     f54:	80 e2       	ldi	r24, 0x20	; 32
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 67 17 	call	0x2ece	; 0x2ece <init_RTC>
	init_USART();
     f5c:	0e 94 54 19 	call	0x32a8	; 0x32a8 <init_USART>
     f60:	08 95       	ret

00000f62 <initialize1>:

}

void initialize1(void)
{
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	2b 97       	sbiw	r28, 0x0b	; 11
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	rebootackd = NO;
     f70:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <rebootackd>
	init_MOTORS();
     f74:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <init_MOTORS>
	init_MMA8451();
     f78:	0e 94 4d 0a 	call	0x149a	; 0x149a <init_MMA8451>
	init_PNEU();
     f7c:	0e 94 22 0c 	call	0x1844	; 0x1844 <init_PNEU>
	init_OLED(0);
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <init_OLED>
	init_OLED(1);
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <init_OLED>
	init_EEPROM();	// Needs TWI
     f8c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <init_EEPROM>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
     f90:	80 ee       	ldi	r24, 0xE0	; 224
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	80 93 11 2a 	sts	0x2A11, r24	; 0x802a11 <timeoutOLED>
     f98:	90 93 12 2a 	sts	0x2A12, r25	; 0x802a12 <timeoutOLED+0x1>
	get_VERSION(versionstr);
     f9c:	ce 01       	movw	r24, r28
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	0e 94 1c 06 	call	0xc38	; 0xc38 <get_VERSION>
	writestr_OLED(1,"specMech Version", 1);
     fa4:	41 e0       	ldi	r20, 0x01	; 1
     fa6:	65 ec       	ldi	r22, 0xC5	; 197
     fa8:	78 e8       	ldi	r23, 0x88	; 136
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	0e 94 9a 0b 	call	0x1734	; 0x1734 <writestr_OLED>
	writestr_OLED(1, versionstr, 2);
     fb0:	42 e0       	ldi	r20, 0x02	; 2
     fb2:	be 01       	movw	r22, r28
     fb4:	6f 5f       	subi	r22, 0xFF	; 255
     fb6:	7f 4f       	sbci	r23, 0xFF	; 255
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	0e 94 9a 0b 	call	0x1734	; 0x1734 <writestr_OLED>

}
     fbe:	2b 96       	adiw	r28, 0x0b	; 11
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <__vector_29>:

/*----------------------------------------------------------------------
Curiosity Nano on-board pushbutton reboots the system
----------------------------------------------------------------------*/
ISR(PORTF_PORT_vect)
{
     fca:	1f 92       	push	r1
     fcc:	0f 92       	push	r0
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	0f 92       	push	r0
     fd2:	11 24       	eor	r1, r1
     fd4:	2f 93       	push	r18
     fd6:	3f 93       	push	r19
     fd8:	4f 93       	push	r20
     fda:	5f 93       	push	r21
     fdc:	6f 93       	push	r22
     fde:	7f 93       	push	r23
     fe0:	8f 93       	push	r24
     fe2:	9f 93       	push	r25
     fe4:	af 93       	push	r26
     fe6:	bf 93       	push	r27
     fe8:	ef 93       	push	r30
     fea:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
     fec:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
     ff0:	86 ff       	sbrs	r24, 6
     ff2:	05 c0       	rjmp	.+10     	; 0xffe <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
     ff4:	80 e4       	ldi	r24, 0x40	; 64
     ff6:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
     ffa:	0e 94 8b 1b 	call	0x3716	; 0x3716 <reboot>
	}

}
     ffe:	ff 91       	pop	r31
    1000:	ef 91       	pop	r30
    1002:	bf 91       	pop	r27
    1004:	af 91       	pop	r26
    1006:	9f 91       	pop	r25
    1008:	8f 91       	pop	r24
    100a:	7f 91       	pop	r23
    100c:	6f 91       	pop	r22
    100e:	5f 91       	pop	r21
    1010:	4f 91       	pop	r20
    1012:	3f 91       	pop	r19
    1014:	2f 91       	pop	r18
    1016:	0f 90       	pop	r0
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	0f 90       	pop	r0
    101c:	1f 90       	pop	r1
    101e:	18 95       	reti

00001020 <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
    1020:	cf 92       	push	r12
    1022:	df 92       	push	r13
    1024:	ef 92       	push	r14
    1026:	ff 92       	push	r15
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	00 d0       	rcall	.+0      	; 0x1032 <read_ionpump+0x12>
    1032:	00 d0       	rcall	.+0      	; 0x1034 <read_ionpump+0x14>
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
    1038:	81 30       	cpi	r24, 0x01	; 1
    103a:	21 f0       	breq	.+8      	; 0x1044 <read_ionpump+0x24>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
    103c:	82 30       	cpi	r24, 0x02	; 2
    103e:	c1 f5       	brne	.+112    	; 0x10b0 <read_ionpump+0x90>
		pins = AIN23;
    1040:	40 e3       	ldi	r20, 0x30	; 48
    1042:	01 c0       	rjmp	.+2      	; 0x1046 <read_ionpump+0x26>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
    1044:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(-666.0);
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
    1046:	8e 01       	movw	r16, r28
    1048:	0f 5f       	subi	r16, 0xFF	; 255
    104a:	1f 4f       	sbci	r17, 0xFF	; 255
    104c:	20 e8       	ldi	r18, 0x80	; 128
    104e:	62 e0       	ldi	r22, 0x02	; 2
    1050:	89 e4       	ldi	r24, 0x49	; 73
    1052:	0e 94 ca 01 	call	0x394	; 0x394 <read_ADS1115>
    1056:	83 36       	cpi	r24, 0x63	; 99
    1058:	81 f1       	breq	.+96     	; 0x10ba <read_ionpump+0x9a>
		return(-666.0);
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
    105a:	c9 80       	ldd	r12, Y+1	; 0x01
    105c:	da 80       	ldd	r13, Y+2	; 0x02
    105e:	eb 80       	ldd	r14, Y+3	; 0x03
    1060:	fc 80       	ldd	r15, Y+4	; 0x04
    1062:	2d ec       	ldi	r18, 0xCD	; 205
    1064:	3c ec       	ldi	r19, 0xCC	; 204
    1066:	4c ec       	ldi	r20, 0xCC	; 204
    1068:	5e e3       	ldi	r21, 0x3E	; 62
    106a:	c7 01       	movw	r24, r14
    106c:	b6 01       	movw	r22, r12
    106e:	0e 94 0e 1c 	call	0x381c	; 0x381c <__cmpsf2>
    1072:	88 23       	and	r24, r24
    1074:	3c f1       	brlt	.+78     	; 0x10c4 <read_ionpump+0xa4>
		return(-666.0);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	50 e4       	ldi	r21, 0x40	; 64
    107e:	c7 01       	movw	r24, r14
    1080:	b6 01       	movw	r22, r12
    1082:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <__gesf2>
    1086:	18 16       	cp	r1, r24
    1088:	14 f1       	brlt	.+68     	; 0x10ce <read_ionpump+0xae>
		return(-666.0);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    108a:	29 e7       	ldi	r18, 0x79	; 121
    108c:	39 ee       	ldi	r19, 0xE9	; 233
    108e:	42 e0       	ldi	r20, 0x02	; 2
    1090:	50 e4       	ldi	r21, 0x40	; 64
    1092:	c7 01       	movw	r24, r14
    1094:	b6 01       	movw	r22, r12
    1096:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__mulsf3>
    109a:	2e e6       	ldi	r18, 0x6E	; 110
    109c:	33 ea       	ldi	r19, 0xA3	; 163
    109e:	4b ed       	ldi	r20, 0xDB	; 219
    10a0:	50 e4       	ldi	r21, 0x40	; 64
    10a2:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__subsf3>
	return(vacuum);
    10a6:	56 2f       	mov	r21, r22
    10a8:	47 2f       	mov	r20, r23
    10aa:	38 2f       	mov	r19, r24
    10ac:	29 2f       	mov	r18, r25
    10ae:	13 c0       	rjmp	.+38     	; 0x10d6 <read_ionpump+0xb6>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(-666.0);
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	40 e8       	ldi	r20, 0x80	; 128
    10b4:	36 e2       	ldi	r19, 0x26	; 38
    10b6:	24 ec       	ldi	r18, 0xC4	; 196
    10b8:	0e c0       	rjmp	.+28     	; 0x10d6 <read_ionpump+0xb6>
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
		return(-666.0);
    10ba:	50 e0       	ldi	r21, 0x00	; 0
    10bc:	40 e8       	ldi	r20, 0x80	; 128
    10be:	36 e2       	ldi	r19, 0x26	; 38
    10c0:	24 ec       	ldi	r18, 0xC4	; 196
    10c2:	09 c0       	rjmp	.+18     	; 0x10d6 <read_ionpump+0xb6>
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(-666.0);							// after ISO224 op-amp is 0.5 to 2.0 V
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	40 e8       	ldi	r20, 0x80	; 128
    10c8:	36 e2       	ldi	r19, 0x26	; 38
    10ca:	24 ec       	ldi	r18, 0xC4	; 196
    10cc:	04 c0       	rjmp	.+8      	; 0x10d6 <read_ionpump+0xb6>
	} else if (voltage > 2.0) {
		return(-666.0);
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	40 e8       	ldi	r20, 0x80	; 128
    10d2:	36 e2       	ldi	r19, 0x26	; 38
    10d4:	24 ec       	ldi	r18, 0xC4	; 196
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
    10d6:	65 2f       	mov	r22, r21
    10d8:	74 2f       	mov	r23, r20
    10da:	83 2f       	mov	r24, r19
    10dc:	92 2f       	mov	r25, r18
    10de:	24 96       	adiw	r28, 0x04	; 4
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	ff 90       	pop	r15
    10ee:	ef 90       	pop	r14
    10f0:	df 90       	pop	r13
    10f2:	cf 90       	pop	r12
    10f4:	08 95       	ret

000010f6 <init_LED>:
#include "globals.h"

void init_LED(void)
{
	PORTF.OUTSET = PIN5_bm;
    10f6:	e0 ea       	ldi	r30, 0xA0	; 160
    10f8:	f4 e0       	ldi	r31, 0x04	; 4
    10fa:	80 e2       	ldi	r24, 0x20	; 32
    10fc:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN5_bm;
    10fe:	81 83       	std	Z+1, r24	; 0x01
    1100:	08 95       	ret

00001102 <main>:
extern void initialize(void);

int main(void)
{

	firstpass = YES;		// Set to YES in commands.c
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <firstpass>
	initialize0();
    1108:	0e 94 9b 07 	call	0xf36	; 0xf36 <initialize0>
	sei();
    110c:	78 94       	sei
	initialize1();
    110e:	0e 94 b1 07 	call	0xf62	; 0xf62 <initialize1>

	for (;;) {
		if (recv0_buf.done) {
    1112:	80 91 1f 2c 	lds	r24, 0x2C1F	; 0x802c1f <recv0_buf+0x104>
    1116:	88 23       	and	r24, r24
    1118:	e1 f3       	breq	.-8      	; 0x1112 <main+0x10>
			recv0_buf.done = NO;
    111a:	10 92 1f 2c 	sts	0x2C1F, r1	; 0x802c1f <recv0_buf+0x104>
			commands();
    111e:	0e 94 4f 04 	call	0x89e	; 0x89e <commands>
    1122:	f7 cf       	rjmp	.-18     	; 0x1112 <main+0x10>

00001124 <read_MCP23008>:
	Returns:
		val - data in that MCP23008 register
		Function return value is 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	c8 2f       	mov	r28, r24
    112a:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
    1132:	83 36       	cpi	r24, 0x63	; 99
    1134:	51 f4       	brne	.+20     	; 0x114a <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 read error");
    1136:	66 ed       	ldi	r22, 0xD6	; 214
    1138:	78 e8       	ldi	r23, 0x88	; 136
    113a:	82 e9       	ldi	r24, 0x92	; 146
    113c:	91 e0       	ldi	r25, 0x01	; 1
    113e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
		stop_TWI();
    1142:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(0xFF);
    1146:	8f ef       	ldi	r24, 0xFF	; 255
    1148:	0d c0       	rjmp	.+26     	; 0x1164 <read_MCP23008+0x40>
	}
	write_TWI(reg);
    114a:	8d 2f       	mov	r24, r29
    114c:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
	start_TWI(addr, TWIREAD);
    1150:	61 e0       	ldi	r22, 0x01	; 1
    1152:	8c 2f       	mov	r24, r28
    1154:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
	value = readlast_TWI();
    1158:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <readlast_TWI>
    115c:	c8 2f       	mov	r28, r24
	stop_TWI();
    115e:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
	return(value);
    1162:	8c 2f       	mov	r24, r28

}
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	08 95       	ret

0000116a <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	d6 2f       	mov	r29, r22
    1172:	14 2f       	mov	r17, r20

	uint8_t retval;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
    117a:	c8 2f       	mov	r28, r24
    117c:	83 36       	cpi	r24, 0x63	; 99
    117e:	49 f4       	brne	.+18     	; 0x1192 <write_MCP23008+0x28>
		printError(ERR_MCP23008, "MCP23008 write error");
    1180:	6a ee       	ldi	r22, 0xEA	; 234
    1182:	78 e8       	ldi	r23, 0x88	; 136
    1184:	82 e9       	ldi	r24, 0x92	; 146
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
		stop_TWI();
    118c:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(ERROR);
    1190:	15 c0       	rjmp	.+42     	; 0x11bc <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(reg))) {
    1192:	8d 2f       	mov	r24, r29
    1194:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
    1198:	88 23       	and	r24, r24
    119a:	21 f0       	breq	.+8      	; 0x11a4 <write_MCP23008+0x3a>
		stop_TWI();
    119c:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(ERROR);
    11a0:	c3 e6       	ldi	r28, 0x63	; 99
    11a2:	0c c0       	rjmp	.+24     	; 0x11bc <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(val))) {
    11a4:	81 2f       	mov	r24, r17
    11a6:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
    11aa:	88 23       	and	r24, r24
    11ac:	21 f0       	breq	.+8      	; 0x11b6 <write_MCP23008+0x4c>
		stop_TWI();
    11ae:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(ERROR);
    11b2:	c3 e6       	ldi	r28, 0x63	; 99
    11b4:	03 c0       	rjmp	.+6      	; 0x11bc <write_MCP23008+0x52>
	}
	stop_TWI();
    11b6:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
	return(NOERROR);
    11ba:	c0 e0       	ldi	r28, 0x00	; 0
	
}
    11bc:	8c 2f       	mov	r24, r28
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	08 95       	ret

000011c6 <read_MCP9808>:
#include "errors.h"
#include "mcp9808.h"
#include "twi.h"

uint8_t read_MCP9808(float *temperature)
{
    11c6:	8f 92       	push	r8
    11c8:	9f 92       	push	r9
    11ca:	af 92       	push	r10
    11cc:	bf 92       	push	r11
    11ce:	ff 92       	push	r15
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	8c 01       	movw	r16, r24

	uint8_t highbyte, lowbyte, sign;
	float temp;

	if (start_TWI(MCP9808ADDR, TWIWRITE) == ERROR) {
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	88 e1       	ldi	r24, 0x18	; 24
    11de:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
    11e2:	83 36       	cpi	r24, 0x63	; 99
    11e4:	51 f4       	brne	.+20     	; 0x11fa <read_MCP9808+0x34>
		*temperature = -666.0;
    11e6:	40 e0       	ldi	r20, 0x00	; 0
    11e8:	50 e8       	ldi	r21, 0x80	; 128
    11ea:	66 e2       	ldi	r22, 0x26	; 38
    11ec:	74 ec       	ldi	r23, 0xC4	; 196
    11ee:	f8 01       	movw	r30, r16
    11f0:	40 83       	st	Z, r20
    11f2:	51 83       	std	Z+1, r21	; 0x01
    11f4:	62 83       	std	Z+2, r22	; 0x02
    11f6:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    11f8:	43 c0       	rjmp	.+134    	; 0x1280 <read_MCP9808+0xba>
	}
	write_TWI(TEMPREGISTER);
    11fa:	85 e0       	ldi	r24, 0x05	; 5
    11fc:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    1200:	61 e0       	ldi	r22, 0x01	; 1
    1202:	88 e1       	ldi	r24, 0x18	; 24
    1204:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
	highbyte = read_TWI();
    1208:	0e 94 c4 18 	call	0x3188	; 0x3188 <read_TWI>
    120c:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    120e:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <readlast_TWI>
    1212:	d8 2f       	mov	r29, r24
	stop_TWI();
    1214:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1218:	fc 2f       	mov	r31, r28
    121a:	f0 71       	andi	r31, 0x10	; 16
    121c:	ff 2e       	mov	r15, r31
	highbyte &= 0x0F;					// Clear threshold & sign bits
    121e:	6c 2f       	mov	r22, r28
    1220:	6f 70       	andi	r22, 0x0F	; 15
	temp = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 85 1c 	call	0x390a	; 0x390a <__floatunsisf>
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e8       	ldi	r20, 0x80	; 128
    1232:	51 e4       	ldi	r21, 0x41	; 65
    1234:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__mulsf3>
    1238:	4b 01       	movw	r8, r22
    123a:	5c 01       	movw	r10, r24
    123c:	6d 2f       	mov	r22, r29
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 85 1c 	call	0x390a	; 0x390a <__floatunsisf>
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e8       	ldi	r20, 0x80	; 128
    124e:	5d e3       	ldi	r21, 0x3D	; 61
    1250:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__mulsf3>
    1254:	9b 01       	movw	r18, r22
    1256:	ac 01       	movw	r20, r24
    1258:	c5 01       	movw	r24, r10
    125a:	b4 01       	movw	r22, r8
    125c:	0e 94 a2 1b 	call	0x3744	; 0x3744 <__addsf3>
	if (sign) {
    1260:	ff 20       	and	r15, r15
    1262:	41 f0       	breq	.+16     	; 0x1274 <read_MCP9808+0xae>
		temp = 256.0 - temp;
    1264:	9b 01       	movw	r18, r22
    1266:	ac 01       	movw	r20, r24
    1268:	60 e0       	ldi	r22, 0x00	; 0
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	80 e8       	ldi	r24, 0x80	; 128
    126e:	93 e4       	ldi	r25, 0x43	; 67
    1270:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__subsf3>
	}
	*temperature = temp;
    1274:	f8 01       	movw	r30, r16
    1276:	60 83       	st	Z, r22
    1278:	71 83       	std	Z+1, r23	; 0x01
    127a:	82 83       	std	Z+2, r24	; 0x02
    127c:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    127e:	80 e0       	ldi	r24, 0x00	; 0
}
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	bf 90       	pop	r11
    128c:	af 90       	pop	r10
    128e:	9f 90       	pop	r9
    1290:	8f 90       	pop	r8
    1292:	08 95       	ret

00001294 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    1294:	ef 92       	push	r14
    1296:	ff 92       	push	r15
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	f8 2e       	mov	r15, r24
    12a2:	e6 2e       	mov	r14, r22
    12a4:	ea 01       	movw	r28, r20
    12a6:	02 2f       	mov	r16, r18

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
    12ae:	18 2f       	mov	r17, r24
    12b0:	83 36       	cpi	r24, 0x63	; 99
    12b2:	19 f4       	brne	.+6      	; 0x12ba <read_MMA8451+0x26>
		stop_TWI();
    12b4:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(ERROR);
    12b8:	23 c0       	rjmp	.+70     	; 0x1300 <read_MMA8451+0x6c>
	}
	if (write_TWI(reg) == ERROR) {
    12ba:	8e 2d       	mov	r24, r14
    12bc:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
    12c0:	18 2f       	mov	r17, r24
    12c2:	83 36       	cpi	r24, 0x63	; 99
    12c4:	e9 f0       	breq	.+58     	; 0x1300 <read_MMA8451+0x6c>
		return(ERROR);
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
    12c6:	61 e0       	ldi	r22, 0x01	; 1
    12c8:	8f 2d       	mov	r24, r15
    12ca:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
    12ce:	18 2f       	mov	r17, r24
    12d0:	83 36       	cpi	r24, 0x63	; 99
    12d2:	69 f4       	brne	.+26     	; 0x12ee <read_MMA8451+0x5a>
		stop_TWI();
    12d4:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(ERROR);
    12d8:	13 c0       	rjmp	.+38     	; 0x1300 <read_MMA8451+0x6c>
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    12da:	7e 01       	movw	r14, r28
    12dc:	8f ef       	ldi	r24, 0xFF	; 255
    12de:	e8 1a       	sub	r14, r24
    12e0:	f8 0a       	sbc	r15, r24
    12e2:	0e 94 c4 18 	call	0x3188	; 0x3188 <read_TWI>
    12e6:	88 83       	st	Y, r24
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    12e8:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    12ea:	e7 01       	movw	r28, r14
    12ec:	01 c0       	rjmp	.+2      	; 0x12f0 <read_MMA8451+0x5c>
    12ee:	11 e0       	ldi	r17, 0x01	; 1
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    12f0:	10 17       	cp	r17, r16
    12f2:	98 f3       	brcs	.-26     	; 0x12da <read_MMA8451+0x46>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    12f4:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <readlast_TWI>
    12f8:	88 83       	st	Y, r24
	stop_TWI();
    12fa:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
	return(NOERROR);
    12fe:	10 e0       	ldi	r17, 0x00	; 0

}
    1300:	81 2f       	mov	r24, r17
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	ff 90       	pop	r15
    130c:	ef 90       	pop	r14
    130e:	08 95       	ret

00001310 <get_orientation>:
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
//uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
uint8_t get_orientation(float *x, float *y, float *z)
{
    1310:	cf 92       	push	r12
    1312:	df 92       	push	r13
    1314:	ef 92       	push	r14
    1316:	ff 92       	push	r15
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	26 97       	sbiw	r28, 0x06	; 6
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	6c 01       	movw	r12, r24
    132c:	7b 01       	movw	r14, r22
    132e:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -666.0;
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e8       	ldi	r25, 0x80	; 128
    1334:	a6 e2       	ldi	r26, 0x26	; 38
    1336:	b4 ec       	ldi	r27, 0xC4	; 196
    1338:	fa 01       	movw	r30, r20
    133a:	80 83       	st	Z, r24
    133c:	91 83       	std	Z+1, r25	; 0x01
    133e:	a2 83       	std	Z+2, r26	; 0x02
    1340:	b3 83       	std	Z+3, r27	; 0x03
    1342:	fb 01       	movw	r30, r22
    1344:	80 83       	st	Z, r24
    1346:	91 83       	std	Z+1, r25	; 0x01
    1348:	a2 83       	std	Z+2, r26	; 0x02
    134a:	b3 83       	std	Z+3, r27	; 0x03
    134c:	f6 01       	movw	r30, r12
    134e:	80 83       	st	Z, r24
    1350:	91 83       	std	Z+1, r25	; 0x01
    1352:	a2 83       	std	Z+2, r26	; 0x02
    1354:	b3 83       	std	Z+3, r27	; 0x03

	if (read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6) == ERROR) {
    1356:	26 e0       	ldi	r18, 0x06	; 6
    1358:	ae 01       	movw	r20, r28
    135a:	4f 5f       	subi	r20, 0xFF	; 255
    135c:	5f 4f       	sbci	r21, 0xFF	; 255
    135e:	61 e0       	ldi	r22, 0x01	; 1
    1360:	8d e1       	ldi	r24, 0x1D	; 29
    1362:	0e 94 4a 09 	call	0x1294	; 0x1294 <read_MMA8451>
    1366:	83 36       	cpi	r24, 0x63	; 99
    1368:	09 f4       	brne	.+2      	; 0x136c <get_orientation+0x5c>
    136a:	61 c0       	rjmp	.+194    	; 0x142e <get_orientation+0x11e>
		return(ERROR);
	}

	ix = datain[0];
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    1370:	98 2f       	mov	r25, r24
    1372:	88 27       	eor	r24, r24
	ix |= datain[1];
    1374:	2a 81       	ldd	r18, Y+2	; 0x02
    1376:	82 2b       	or	r24, r18
	ix /= 4;
    1378:	bc 01       	movw	r22, r24
    137a:	77 23       	and	r23, r23
    137c:	14 f4       	brge	.+4      	; 0x1382 <get_orientation+0x72>
    137e:	6d 5f       	subi	r22, 0xFD	; 253
    1380:	7f 4f       	sbci	r23, 0xFF	; 255
    1382:	75 95       	asr	r23
    1384:	67 95       	ror	r22
    1386:	75 95       	asr	r23
    1388:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    138a:	07 2e       	mov	r0, r23
    138c:	00 0c       	add	r0, r0
    138e:	88 0b       	sbc	r24, r24
    1390:	99 0b       	sbc	r25, r25
    1392:	0e 94 87 1c 	call	0x390e	; 0x390e <__floatsisf>
    1396:	26 e6       	ldi	r18, 0x66	; 102
    1398:	36 e2       	ldi	r19, 0x26	; 38
    139a:	45 e7       	ldi	r20, 0x75	; 117
    139c:	5e e3       	ldi	r21, 0x3E	; 62
    139e:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__mulsf3>
    13a2:	f6 01       	movw	r30, r12
    13a4:	60 83       	st	Z, r22
    13a6:	71 83       	std	Z+1, r23	; 0x01
    13a8:	82 83       	std	Z+2, r24	; 0x02
    13aa:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    13b0:	98 2f       	mov	r25, r24
    13b2:	88 27       	eor	r24, r24
	iy |= datain[3];
    13b4:	2c 81       	ldd	r18, Y+4	; 0x04
    13b6:	82 2b       	or	r24, r18
	iy /= 4;
    13b8:	bc 01       	movw	r22, r24
    13ba:	77 23       	and	r23, r23
    13bc:	14 f4       	brge	.+4      	; 0x13c2 <get_orientation+0xb2>
    13be:	6d 5f       	subi	r22, 0xFD	; 253
    13c0:	7f 4f       	sbci	r23, 0xFF	; 255
    13c2:	75 95       	asr	r23
    13c4:	67 95       	ror	r22
    13c6:	75 95       	asr	r23
    13c8:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    13ca:	07 2e       	mov	r0, r23
    13cc:	00 0c       	add	r0, r0
    13ce:	88 0b       	sbc	r24, r24
    13d0:	99 0b       	sbc	r25, r25
    13d2:	0e 94 87 1c 	call	0x390e	; 0x390e <__floatsisf>
    13d6:	26 e6       	ldi	r18, 0x66	; 102
    13d8:	36 e2       	ldi	r19, 0x26	; 38
    13da:	45 e7       	ldi	r20, 0x75	; 117
    13dc:	5e e3       	ldi	r21, 0x3E	; 62
    13de:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__mulsf3>
    13e2:	f7 01       	movw	r30, r14
    13e4:	60 83       	st	Z, r22
    13e6:	71 83       	std	Z+1, r23	; 0x01
    13e8:	82 83       	std	Z+2, r24	; 0x02
    13ea:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    13ec:	8d 81       	ldd	r24, Y+5	; 0x05
    13ee:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    13f0:	98 2f       	mov	r25, r24
    13f2:	88 27       	eor	r24, r24
	iz |= datain[5];
    13f4:	2e 81       	ldd	r18, Y+6	; 0x06
    13f6:	82 2b       	or	r24, r18
	iz /= 4;
    13f8:	bc 01       	movw	r22, r24
    13fa:	77 23       	and	r23, r23
    13fc:	14 f4       	brge	.+4      	; 0x1402 <get_orientation+0xf2>
    13fe:	6d 5f       	subi	r22, 0xFD	; 253
    1400:	7f 4f       	sbci	r23, 0xFF	; 255
    1402:	75 95       	asr	r23
    1404:	67 95       	ror	r22
    1406:	75 95       	asr	r23
    1408:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    140a:	07 2e       	mov	r0, r23
    140c:	00 0c       	add	r0, r0
    140e:	88 0b       	sbc	r24, r24
    1410:	99 0b       	sbc	r25, r25
    1412:	0e 94 87 1c 	call	0x390e	; 0x390e <__floatsisf>
    1416:	26 e6       	ldi	r18, 0x66	; 102
    1418:	36 e2       	ldi	r19, 0x26	; 38
    141a:	45 e7       	ldi	r20, 0x75	; 117
    141c:	5e e3       	ldi	r21, 0x3E	; 62
    141e:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__mulsf3>
    1422:	f8 01       	movw	r30, r16
    1424:	60 83       	st	Z, r22
    1426:	71 83       	std	Z+1, r23	; 0x01
    1428:	82 83       	std	Z+2, r24	; 0x02
    142a:	93 83       	std	Z+3, r25	; 0x03

	return(0);
    142c:	80 e0       	ldi	r24, 0x00	; 0

}
    142e:	26 96       	adiw	r28, 0x06	; 6
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	ff 90       	pop	r15
    143e:	ef 90       	pop	r14
    1440:	df 90       	pop	r13
    1442:	cf 90       	pop	r12
    1444:	08 95       	ret

00001446 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1446:	1f 93       	push	r17
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	d6 2f       	mov	r29, r22
    144e:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
    1456:	c8 2f       	mov	r28, r24
    1458:	88 23       	and	r24, r24
    145a:	21 f0       	breq	.+8      	; 0x1464 <write_MMA8451+0x1e>
		stop_TWI();
    145c:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(retval);
    1460:	8c 2f       	mov	r24, r28
    1462:	17 c0       	rjmp	.+46     	; 0x1492 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1464:	8d 2f       	mov	r24, r29
    1466:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
    146a:	c8 2f       	mov	r28, r24
    146c:	88 23       	and	r24, r24
    146e:	21 f0       	breq	.+8      	; 0x1478 <write_MMA8451+0x32>
		stop_TWI();
    1470:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(retval);
    1474:	8c 2f       	mov	r24, r28
    1476:	0d c0       	rjmp	.+26     	; 0x1492 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1478:	81 2f       	mov	r24, r17
    147a:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
    147e:	c8 2f       	mov	r28, r24
    1480:	88 23       	and	r24, r24
    1482:	21 f0       	breq	.+8      	; 0x148c <write_MMA8451+0x46>
		stop_TWI();
    1484:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
		return(retval);
    1488:	8c 2f       	mov	r24, r28
    148a:	03 c0       	rjmp	.+6      	; 0x1492 <write_MMA8451+0x4c>
	}
	stop_TWI();
    148c:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>
	return(0);
    1490:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	08 95       	ret

0000149a <init_MMA8451>:
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/

uint8_t init_MMA8451(void)
{
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	1f 92       	push	r1
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    14a4:	40 e4       	ldi	r20, 0x40	; 64
    14a6:	6b e2       	ldi	r22, 0x2B	; 43
    14a8:	8d e1       	ldi	r24, 0x1D	; 29
    14aa:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    14ae:	21 e0       	ldi	r18, 0x01	; 1
    14b0:	ae 01       	movw	r20, r28
    14b2:	4f 5f       	subi	r20, 0xFF	; 255
    14b4:	5f 4f       	sbci	r21, 0xFF	; 255
    14b6:	6b e2       	ldi	r22, 0x2B	; 43
    14b8:	8d e1       	ldi	r24, 0x1D	; 29
    14ba:	0e 94 4a 09 	call	0x1294	; 0x1294 <read_MMA8451>
	while (retval & 0x40) {
    14be:	08 c0       	rjmp	.+16     	; 0x14d0 <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    14c0:	21 e0       	ldi	r18, 0x01	; 1
    14c2:	ae 01       	movw	r20, r28
    14c4:	4f 5f       	subi	r20, 0xFF	; 255
    14c6:	5f 4f       	sbci	r21, 0xFF	; 255
    14c8:	6b e2       	ldi	r22, 0x2B	; 43
    14ca:	8d e1       	ldi	r24, 0x1D	; 29
    14cc:	0e 94 4a 09 	call	0x1294	; 0x1294 <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	86 fd       	sbrc	r24, 6
    14d4:	f5 cf       	rjmp	.-22     	; 0x14c0 <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    14d6:	40 ec       	ldi	r20, 0xC0	; 192
    14d8:	6f e0       	ldi	r22, 0x0F	; 15
    14da:	8d e1       	ldi	r24, 0x1D	; 29
    14dc:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    14e0:	42 e0       	ldi	r20, 0x02	; 2
    14e2:	6b e2       	ldi	r22, 0x2B	; 43
    14e4:	8d e1       	ldi	r24, 0x1D	; 29
    14e6:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    14ea:	4d e3       	ldi	r20, 0x3D	; 61
    14ec:	6a e2       	ldi	r22, 0x2A	; 42
    14ee:	8d e1       	ldi	r24, 0x1D	; 29
    14f0:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_MMA8451>

	return(retval);

}
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	0f 90       	pop	r0
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	08 95       	ret

000014fe <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    14fe:	ef 92       	push	r14
    1500:	ff 92       	push	r15
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	2e 97       	sbiw	r28, 0x0e	; 14
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    1516:	88 e0       	ldi	r24, 0x08	; 8
    1518:	ef ef       	ldi	r30, 0xFF	; 255
    151a:	f8 e8       	ldi	r31, 0x88	; 136
    151c:	de 01       	movw	r26, r28
    151e:	11 96       	adiw	r26, 0x01	; 1
    1520:	01 90       	ld	r0, Z+
    1522:	0d 92       	st	X+, r0
    1524:	8a 95       	dec	r24
    1526:	e1 f7       	brne	.-8      	; 0x1520 <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    1528:	f8 01       	movw	r30, r16
    152a:	01 90       	ld	r0, Z+
    152c:	00 20       	and	r0, r0
    152e:	e9 f7       	brne	.-6      	; 0x152a <checksum_NMEA+0x2c>
    1530:	31 97       	sbiw	r30, 0x01	; 1
    1532:	3e 2f       	mov	r19, r30
    1534:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    1536:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	06 c0       	rjmp	.+12     	; 0x1548 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    153c:	f8 01       	movw	r30, r16
    153e:	e8 0f       	add	r30, r24
    1540:	f1 1d       	adc	r31, r1
    1542:	20 81       	ld	r18, Z
    1544:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1546:	8f 5f       	subi	r24, 0xFF	; 255
    1548:	83 17       	cp	r24, r19
    154a:	c0 f3       	brcs	.-16     	; 0x153c <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    154c:	1f 92       	push	r1
    154e:	9f 93       	push	r25
    1550:	ce 01       	movw	r24, r28
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	9f 93       	push	r25
    1556:	8f 93       	push	r24
    1558:	7e 01       	movw	r14, r28
    155a:	89 e0       	ldi	r24, 0x09	; 9
    155c:	e8 0e       	add	r14, r24
    155e:	f1 1c       	adc	r15, r1
    1560:	ff 92       	push	r15
    1562:	ef 92       	push	r14
    1564:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
	strcat(str, chksum);
    1568:	b7 01       	movw	r22, r14
    156a:	c8 01       	movw	r24, r16
    156c:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <strcat>

}
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	2e 96       	adiw	r28, 0x0e	; 14
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	08 95       	ret

00001590 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	d6 2f       	mov	r29, r22
    1596:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <start_TWI>
	write_TWI(type);
    159e:	8d 2f       	mov	r24, r29
    15a0:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
	write_TWI(byteToSend);
    15a4:	8c 2f       	mov	r24, r28
    15a6:	0e 94 26 19 	call	0x324c	; 0x324c <write_TWI>
	stop_TWI();
    15aa:	0e 94 22 19 	call	0x3244	; 0x3244 <stop_TWI>

}
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	08 95       	ret

000015b4 <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
    15b4:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    15b6:	e0 e6       	ldi	r30, 0x60	; 96
    15b8:	f4 e0       	ldi	r31, 0x04	; 4
    15ba:	90 e4       	ldi	r25, 0x40	; 64
    15bc:	96 83       	std	Z+6, r25	; 0x06
	PORTD.DIRSET = PIN6_bm;
    15be:	91 83       	std	Z+1, r25	; 0x01
    15c0:	a1 e4       	ldi	r26, 0x41	; 65
    15c2:	b3 e0       	ldi	r27, 0x03	; 3
    15c4:	11 97       	sbiw	r26, 0x01	; 1
    15c6:	f1 f7       	brne	.-4      	; 0x15c4 <init_OLED+0x10>
    15c8:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    15ca:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
    15cc:	81 11       	cpse	r24, r1
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <init_OLED+0x20>
		twiaddr = OLEDADDR0;
    15d0:	cc e3       	ldi	r28, 0x3C	; 60
    15d2:	01 c0       	rjmp	.+2      	; 0x15d6 <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
    15d4:	cd e3       	ldi	r28, 0x3D	; 61
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    15d6:	4a e2       	ldi	r20, 0x2A	; 42
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	8c 2f       	mov	r24, r28
    15dc:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    15e0:	41 e7       	ldi	r20, 0x71	; 113
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	8c 2f       	mov	r24, r28
    15e6:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    15ea:	4c e5       	ldi	r20, 0x5C	; 92
    15ec:	60 e4       	ldi	r22, 0x40	; 64
    15ee:	8c 2f       	mov	r24, r28
    15f0:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    15f4:	48 e2       	ldi	r20, 0x28	; 40
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	8c 2f       	mov	r24, r28
    15fa:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    15fe:	48 e0       	ldi	r20, 0x08	; 8
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	8c 2f       	mov	r24, r28
    1604:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1608:	4a e2       	ldi	r20, 0x2A	; 42
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	8c 2f       	mov	r24, r28
    160e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1612:	49 e7       	ldi	r20, 0x79	; 121
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	8c 2f       	mov	r24, r28
    1618:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    161c:	45 ed       	ldi	r20, 0xD5	; 213
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	8c 2f       	mov	r24, r28
    1622:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    1626:	40 e7       	ldi	r20, 0x70	; 112
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	8c 2f       	mov	r24, r28
    162c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1630:	48 e7       	ldi	r20, 0x78	; 120
    1632:	60 e0       	ldi	r22, 0x00	; 0
    1634:	8c 2f       	mov	r24, r28
    1636:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    163a:	48 e0       	ldi	r20, 0x08	; 8
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	8c 2f       	mov	r24, r28
    1640:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1644:	46 e0       	ldi	r20, 0x06	; 6
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	8c 2f       	mov	r24, r28
    164a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    164e:	42 e7       	ldi	r20, 0x72	; 114
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	8c 2f       	mov	r24, r28
    1654:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    1658:	40 e0       	ldi	r20, 0x00	; 0
    165a:	60 e4       	ldi	r22, 0x40	; 64
    165c:	8c 2f       	mov	r24, r28
    165e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1662:	4a e2       	ldi	r20, 0x2A	; 42
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	8c 2f       	mov	r24, r28
    1668:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    166c:	49 e7       	ldi	r20, 0x79	; 121
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	8c 2f       	mov	r24, r28
    1672:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    1676:	4a ed       	ldi	r20, 0xDA	; 218
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	8c 2f       	mov	r24, r28
    167c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	60 e0       	ldi	r22, 0x00	; 0
    1684:	8c 2f       	mov	r24, r28
    1686:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    168a:	4c ed       	ldi	r20, 0xDC	; 220
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	8c 2f       	mov	r24, r28
    1690:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	8c 2f       	mov	r24, r28
    169a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    169e:	41 e8       	ldi	r20, 0x81	; 129
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	8c 2f       	mov	r24, r28
    16a4:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    16a8:	4f e7       	ldi	r20, 0x7F	; 127
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	8c 2f       	mov	r24, r28
    16ae:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    16b2:	49 ed       	ldi	r20, 0xD9	; 217
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	8c 2f       	mov	r24, r28
    16b8:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    16bc:	41 ef       	ldi	r20, 0xF1	; 241
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	8c 2f       	mov	r24, r28
    16c2:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    16c6:	4b ed       	ldi	r20, 0xDB	; 219
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	8c 2f       	mov	r24, r28
    16cc:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    16d0:	40 e4       	ldi	r20, 0x40	; 64
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	8c 2f       	mov	r24, r28
    16d6:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    16da:	48 e7       	ldi	r20, 0x78	; 120
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	8c 2f       	mov	r24, r28
    16e0:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    16e4:	48 e2       	ldi	r20, 0x28	; 40
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	8c 2f       	mov	r24, r28
    16ea:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    16ee:	41 e0       	ldi	r20, 0x01	; 1
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	8c 2f       	mov	r24, r28
    16f4:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    16f8:	40 e8       	ldi	r20, 0x80	; 128
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	8c 2f       	mov	r24, r28
    16fe:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    1702:	4c e0       	ldi	r20, 0x0C	; 12
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	8c 2f       	mov	r24, r28
    1708:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
    170c:	ba e6       	ldi	r27, 0x6A	; 106
    170e:	24 e0       	ldi	r18, 0x04	; 4
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	b1 50       	subi	r27, 0x01	; 1
    1714:	20 40       	sbci	r18, 0x00	; 0
    1716:	80 40       	sbci	r24, 0x00	; 0
    1718:	e1 f7       	brne	.-8      	; 0x1712 <init_OLED+0x15e>
    171a:	00 c0       	rjmp	.+0      	; 0x171c <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
    171c:	10 92 0f 2a 	sts	0x2A0F, r1	; 0x802a0f <timerOLED>
    1720:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <timerOLED+0x1>
	timeoutOLED = 5;
    1724:	85 e0       	ldi	r24, 0x05	; 5
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	80 93 11 2a 	sts	0x2A11, r24	; 0x802a11 <timeoutOLED>
    172c:	90 93 12 2a 	sts	0x2A12, r25	; 0x802a12 <timeoutOLED+0x1>

}
    1730:	cf 91       	pop	r28
    1732:	08 95       	ret

00001734 <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1734:	ef 92       	push	r14
    1736:	ff 92       	push	r15
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	e2 97       	sbiw	r28, 0x32	; 50
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    174c:	91 e1       	ldi	r25, 0x11	; 17
    174e:	e7 e0       	ldi	r30, 0x07	; 7
    1750:	f9 e8       	ldi	r31, 0x89	; 137
    1752:	de 01       	movw	r26, r28
    1754:	92 96       	adiw	r26, 0x22	; 34
    1756:	01 90       	ld	r0, Z+
    1758:	0d 92       	st	X+, r0
    175a:	9a 95       	dec	r25
    175c:	e1 f7       	brne	.-8      	; 0x1756 <writestr_OLED+0x22>

	if (displaynumber == 0) {
    175e:	81 11       	cpse	r24, r1
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1762:	0c e3       	ldi	r16, 0x3C	; 60
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1766:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    1768:	ce 01       	movw	r24, r28
    176a:	01 96       	adiw	r24, 0x01	; 1
    176c:	7c 01       	movw	r14, r24
    176e:	0e 94 f5 22 	call	0x45ea	; 0x45ea <strcpy>
	if (strlen(strbuf) > 16) {
    1772:	f7 01       	movw	r30, r14
    1774:	01 90       	ld	r0, Z+
    1776:	00 20       	and	r0, r0
    1778:	e9 f7       	brne	.-6      	; 0x1774 <writestr_OLED+0x40>
    177a:	31 97       	sbiw	r30, 0x01	; 1
    177c:	ee 19       	sub	r30, r14
    177e:	ff 09       	sbc	r31, r15
    1780:	71 97       	sbiw	r30, 0x11	; 17
    1782:	08 f0       	brcs	.+2      	; 0x1786 <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1784:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1786:	be 01       	movw	r22, r28
    1788:	6e 5d       	subi	r22, 0xDE	; 222
    178a:	7f 4f       	sbci	r23, 0xFF	; 255
    178c:	ce 01       	movw	r24, r28
    178e:	01 96       	adiw	r24, 0x01	; 1
    1790:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <strcat>

	if (lineno == 1) {
    1794:	11 30       	cpi	r17, 0x01	; 1
    1796:	39 f4       	brne	.+14     	; 0x17a6 <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    1798:	40 e8       	ldi	r20, 0x80	; 128
    179a:	60 e0       	ldi	r22, 0x00	; 0
    179c:	80 2f       	mov	r24, r16
    179e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    17a2:	10 e0       	ldi	r17, 0x00	; 0
    17a4:	12 c0       	rjmp	.+36     	; 0x17ca <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    17a6:	40 ec       	ldi	r20, 0xC0	; 192
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	80 2f       	mov	r24, r16
    17ac:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>
    17b0:	f8 cf       	rjmp	.-16     	; 0x17a2 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    17b2:	e1 e0       	ldi	r30, 0x01	; 1
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	ec 0f       	add	r30, r28
    17b8:	fd 1f       	adc	r31, r29
    17ba:	e1 0f       	add	r30, r17
    17bc:	f1 1d       	adc	r31, r1
    17be:	40 81       	ld	r20, Z
    17c0:	60 e4       	ldi	r22, 0x40	; 64
    17c2:	80 2f       	mov	r24, r16
    17c4:	0e 94 c8 0a 	call	0x1590	; 0x1590 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    17c8:	1f 5f       	subi	r17, 0xFF	; 255
    17ca:	10 31       	cpi	r17, 0x10	; 16
    17cc:	90 f3       	brcs	.-28     	; 0x17b2 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <timerOLED>
    17d6:	90 93 10 2a 	sts	0x2A10, r25	; 0x802a10 <timerOLED+0x1>

}
    17da:	e2 96       	adiw	r28, 0x32	; 50
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	ff 90       	pop	r15
    17ea:	ef 90       	pop	r14
    17ec:	08 95       	ret

000017ee <clear_OLED>:
/*------------------------------------------------------------------------------
void clear_OLED(uint8_t displaynumber)
	Clears the OLED screen by writing blank spaces to both lines.
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    17ee:	1f 93       	push	r17
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	61 97       	sbiw	r28, 0x11	; 17
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	18 2f       	mov	r17, r24

	char blanks[] = "                ";	// Does const put this in flash?
    1800:	81 e1       	ldi	r24, 0x11	; 17
    1802:	e7 e0       	ldi	r30, 0x07	; 7
    1804:	f9 e8       	ldi	r31, 0x89	; 137
    1806:	de 01       	movw	r26, r28
    1808:	11 96       	adiw	r26, 0x01	; 1
    180a:	01 90       	ld	r0, Z+
    180c:	0d 92       	st	X+, r0
    180e:	8a 95       	dec	r24
    1810:	e1 f7       	brne	.-8      	; 0x180a <__DATA_REGION_LENGTH__+0xa>

	writestr_OLED(displaynumber, blanks, 1);
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	be 01       	movw	r22, r28
    1816:	6f 5f       	subi	r22, 0xFF	; 255
    1818:	7f 4f       	sbci	r23, 0xFF	; 255
    181a:	81 2f       	mov	r24, r17
    181c:	0e 94 9a 0b 	call	0x1734	; 0x1734 <writestr_OLED>
	writestr_OLED(displaynumber, blanks, 2);
    1820:	42 e0       	ldi	r20, 0x02	; 2
    1822:	be 01       	movw	r22, r28
    1824:	6f 5f       	subi	r22, 0xFF	; 255
    1826:	7f 4f       	sbci	r23, 0xFF	; 255
    1828:	81 2f       	mov	r24, r17
    182a:	0e 94 9a 0b 	call	0x1734	; 0x1734 <writestr_OLED>
	timerOLED = 0;
    182e:	10 92 0f 2a 	sts	0x2A0F, r1	; 0x802a0f <timerOLED>
    1832:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <timerOLED+0x1>

}
    1836:	61 96       	adiw	r28, 0x11	; 17
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	1f 91       	pop	r17
    1842:	08 95       	ret

00001844 <init_PNEU>:
*/

uint8_t init_PNEU(void)
{

	if (write_MCP23008(HIGHCURRENT, IODIR, 0x00) == ERROR) {
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	84 e2       	ldi	r24, 0x24	; 36
    184a:	0e 94 b5 08 	call	0x116a	; 0x116a <write_MCP23008>
    184e:	83 36       	cpi	r24, 0x63	; 99
    1850:	a9 f1       	breq	.+106    	; 0x18bc <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(HIGHCURRENT, OLAT, 0x00) == ERROR) {
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	6a e0       	ldi	r22, 0x0A	; 10
    1856:	84 e2       	ldi	r24, 0x24	; 36
    1858:	0e 94 b5 08 	call	0x116a	; 0x116a <write_MCP23008>
    185c:	83 36       	cpi	r24, 0x63	; 99
    185e:	71 f1       	breq	.+92     	; 0x18bc <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IODIR, 0xFE) == ERROR) {	// Inputs
    1860:	4e ef       	ldi	r20, 0xFE	; 254
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	81 e2       	ldi	r24, 0x21	; 33
    1866:	0e 94 b5 08 	call	0x116a	; 0x116a <write_MCP23008>
    186a:	83 36       	cpi	r24, 0x63	; 99
    186c:	39 f1       	breq	.+78     	; 0x18bc <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IPOL, 0x00) == ERROR) {
    186e:	40 e0       	ldi	r20, 0x00	; 0
    1870:	61 e0       	ldi	r22, 0x01	; 1
    1872:	81 e2       	ldi	r24, 0x21	; 33
    1874:	0e 94 b5 08 	call	0x116a	; 0x116a <write_MCP23008>
    1878:	83 36       	cpi	r24, 0x63	; 99
    187a:	01 f1       	breq	.+64     	; 0x18bc <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100) == ERROR) {
    187c:	4c ef       	ldi	r20, 0xFC	; 252
    187e:	62 e0       	ldi	r22, 0x02	; 2
    1880:	81 e2       	ldi	r24, 0x21	; 33
    1882:	0e 94 b5 08 	call	0x116a	; 0x116a <write_MCP23008>
    1886:	83 36       	cpi	r24, 0x63	; 99
    1888:	c9 f0       	breq	.+50     	; 0x18bc <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, INTCON, 0x00) == ERROR) {
    188a:	40 e0       	ldi	r20, 0x00	; 0
    188c:	64 e0       	ldi	r22, 0x04	; 4
    188e:	81 e2       	ldi	r24, 0x21	; 33
    1890:	0e 94 b5 08 	call	0x116a	; 0x116a <write_MCP23008>
    1894:	83 36       	cpi	r24, 0x63	; 99
    1896:	91 f0       	breq	.+36     	; 0x18bc <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IOCON, 0x20) == ERROR) { // Don't increment addr
    1898:	40 e2       	ldi	r20, 0x20	; 32
    189a:	65 e0       	ldi	r22, 0x05	; 5
    189c:	81 e2       	ldi	r24, 0x21	; 33
    189e:	0e 94 b5 08 	call	0x116a	; 0x116a <write_MCP23008>
    18a2:	83 36       	cpi	r24, 0x63	; 99
    18a4:	59 f0       	breq	.+22     	; 0x18bc <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPPU, 0x7F) == ERROR) { // Pullups (not really needed)
    18a6:	4f e7       	ldi	r20, 0x7F	; 127
    18a8:	66 e0       	ldi	r22, 0x06	; 6
    18aa:	81 e2       	ldi	r24, 0x21	; 33
    18ac:	0e 94 b5 08 	call	0x116a	; 0x116a <write_MCP23008>
    18b0:	83 36       	cpi	r24, 0x63	; 99
    18b2:	21 f0       	breq	.+8      	; 0x18bc <init_PNEU+0x78>
		return(ERROR);
	}
	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    18b4:	89 e0       	ldi	r24, 0x09	; 9
    18b6:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	return(NOERROR);
    18ba:	80 e0       	ldi	r24, 0x00	; 0

}
    18bc:	08 95       	ret

000018be <read_PNEUSensors>:
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
{
    18be:	cf 92       	push	r12
    18c0:	df 92       	push	r13
    18c2:	ef 92       	push	r14
    18c4:	ff 92       	push	r15
    18c6:	0f 93       	push	r16
    18c8:	1f 93       	push	r17
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	6c 01       	movw	r12, r24
    18d0:	8b 01       	movw	r16, r22
    18d2:	7a 01       	movw	r14, r20
    18d4:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);	// NEEDS ERRORCHECK
    18d6:	69 e0       	ldi	r22, 0x09	; 9
    18d8:	81 e2       	ldi	r24, 0x21	; 33
    18da:	0e 94 92 08 	call	0x1124	; 0x1124 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    18de:	98 2f       	mov	r25, r24
    18e0:	92 95       	swap	r25
    18e2:	96 95       	lsr	r25
    18e4:	96 95       	lsr	r25
    18e6:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    18e8:	91 30       	cpi	r25, 0x01	; 1
    18ea:	21 f4       	brne	.+8      	; 0x18f4 <read_PNEUSensors+0x36>
		*shutter = 'c';
    18ec:	93 e6       	ldi	r25, 0x63	; 99
    18ee:	f6 01       	movw	r30, r12
    18f0:	90 83       	st	Z, r25
    18f2:	0f c0       	rjmp	.+30     	; 0x1912 <read_PNEUSensors+0x54>
	} else if (state == 2) {
    18f4:	92 30       	cpi	r25, 0x02	; 2
    18f6:	21 f4       	brne	.+8      	; 0x1900 <read_PNEUSensors+0x42>
		*shutter = 'o';
    18f8:	9f e6       	ldi	r25, 0x6F	; 111
    18fa:	f6 01       	movw	r30, r12
    18fc:	90 83       	st	Z, r25
    18fe:	09 c0       	rjmp	.+18     	; 0x1912 <read_PNEUSensors+0x54>
	} else if (state == 3) {
    1900:	93 30       	cpi	r25, 0x03	; 3
    1902:	21 f4       	brne	.+8      	; 0x190c <read_PNEUSensors+0x4e>
		*shutter = 't';
    1904:	94 e7       	ldi	r25, 0x74	; 116
    1906:	f6 01       	movw	r30, r12
    1908:	90 83       	st	Z, r25
    190a:	03 c0       	rjmp	.+6      	; 0x1912 <read_PNEUSensors+0x54>
	} else {
		*shutter = 'x';
    190c:	98 e7       	ldi	r25, 0x78	; 120
    190e:	f6 01       	movw	r30, r12
    1910:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1912:	98 2f       	mov	r25, r24
    1914:	96 95       	lsr	r25
    1916:	96 95       	lsr	r25
	state &= 0b00000011;
    1918:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    191a:	91 30       	cpi	r25, 0x01	; 1
    191c:	21 f4       	brne	.+8      	; 0x1926 <read_PNEUSensors+0x68>
		*right = 'c';
    191e:	93 e6       	ldi	r25, 0x63	; 99
    1920:	f7 01       	movw	r30, r14
    1922:	90 83       	st	Z, r25
    1924:	0f c0       	rjmp	.+30     	; 0x1944 <read_PNEUSensors+0x86>
	} else if (state == 2) {
    1926:	92 30       	cpi	r25, 0x02	; 2
    1928:	21 f4       	brne	.+8      	; 0x1932 <read_PNEUSensors+0x74>
		*right = 'o';
    192a:	9f e6       	ldi	r25, 0x6F	; 111
    192c:	f7 01       	movw	r30, r14
    192e:	90 83       	st	Z, r25
    1930:	09 c0       	rjmp	.+18     	; 0x1944 <read_PNEUSensors+0x86>
	} else if (state == 3) {
    1932:	93 30       	cpi	r25, 0x03	; 3
    1934:	21 f4       	brne	.+8      	; 0x193e <read_PNEUSensors+0x80>
		*right = 't';
    1936:	94 e7       	ldi	r25, 0x74	; 116
    1938:	f7 01       	movw	r30, r14
    193a:	90 83       	st	Z, r25
    193c:	03 c0       	rjmp	.+6      	; 0x1944 <read_PNEUSensors+0x86>
	} else {
		*right = 'x';
    193e:	98 e7       	ldi	r25, 0x78	; 120
    1940:	f7 01       	movw	r30, r14
    1942:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1944:	98 2f       	mov	r25, r24
    1946:	92 95       	swap	r25
    1948:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    194a:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    194c:	91 30       	cpi	r25, 0x01	; 1
    194e:	21 f4       	brne	.+8      	; 0x1958 <read_PNEUSensors+0x9a>
		*left = 'o';
    1950:	9f e6       	ldi	r25, 0x6F	; 111
    1952:	f8 01       	movw	r30, r16
    1954:	90 83       	st	Z, r25
    1956:	0f c0       	rjmp	.+30     	; 0x1976 <read_PNEUSensors+0xb8>
	} else if (state == 2) {
    1958:	92 30       	cpi	r25, 0x02	; 2
    195a:	21 f4       	brne	.+8      	; 0x1964 <read_PNEUSensors+0xa6>
		*left = 'c';
    195c:	93 e6       	ldi	r25, 0x63	; 99
    195e:	f8 01       	movw	r30, r16
    1960:	90 83       	st	Z, r25
    1962:	09 c0       	rjmp	.+18     	; 0x1976 <read_PNEUSensors+0xb8>
	} else if (state == 3) {
    1964:	93 30       	cpi	r25, 0x03	; 3
    1966:	21 f4       	brne	.+8      	; 0x1970 <read_PNEUSensors+0xb2>
		*left = 't';
    1968:	94 e7       	ldi	r25, 0x74	; 116
    196a:	f8 01       	movw	r30, r16
    196c:	90 83       	st	Z, r25
    196e:	03 c0       	rjmp	.+6      	; 0x1976 <read_PNEUSensors+0xb8>
	} else {
		*left = 'x';
    1970:	98 e7       	ldi	r25, 0x78	; 120
    1972:	f8 01       	movw	r30, r16
    1974:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1976:	81 ff       	sbrs	r24, 1
    1978:	03 c0       	rjmp	.+6      	; 0x1980 <read_PNEUSensors+0xc2>
		*air = '0';
    197a:	80 e3       	ldi	r24, 0x30	; 48
    197c:	88 83       	st	Y, r24
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <read_PNEUSensors+0xc6>
	} else {
		*air = '1';
    1980:	81 e3       	ldi	r24, 0x31	; 49
    1982:	88 83       	st	Y, r24
	}
}
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	ff 90       	pop	r15
    198e:	ef 90       	pop	r14
    1990:	df 90       	pop	r13
    1992:	cf 90       	pop	r12
    1994:	08 95       	ret

00001996 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	d8 2f       	mov	r29, r24
    199c:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    199e:	69 e0       	ldi	r22, 0x09	; 9
    19a0:	84 e2       	ldi	r24, 0x24	; 36
    19a2:	0e 94 92 08 	call	0x1124	; 0x1124 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    19a6:	8d 2b       	or	r24, r29
    19a8:	48 2f       	mov	r20, r24
    19aa:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    19ac:	6a e0       	ldi	r22, 0x0A	; 10
    19ae:	84 e2       	ldi	r24, 0x24	; 36
    19b0:	0e 94 b5 08 	call	0x116a	; 0x116a <write_MCP23008>
		return(retval);
	}

	return(0);

}
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	08 95       	ret

000019ba <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(uint8_t cstack)
{
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	6a 97       	sbiw	r28, 0x1a	; 26
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    19c8:	99 e0       	ldi	r25, 0x09	; 9
    19ca:	e2 e5       	ldi	r30, 0x52	; 82
    19cc:	f9 e8       	ldi	r31, 0x89	; 137
    19ce:	de 01       	movw	r26, r28
    19d0:	11 96       	adiw	r26, 0x01	; 1
    19d2:	01 90       	ld	r0, Z+
    19d4:	0d 92       	st	X+, r0
    19d6:	9a 95       	dec	r25
    19d8:	e1 f7       	brne	.-8      	; 0x19d2 <close_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    19da:	24 e3       	ldi	r18, 0x34	; 52
    19dc:	82 9f       	mul	r24, r18
    19de:	c0 01       	movw	r24, r0
    19e0:	11 24       	eor	r1, r1
    19e2:	fc 01       	movw	r30, r24
    19e4:	e9 5f       	subi	r30, 0xF9	; 249
    19e6:	f7 4d       	sbci	r31, 0xD7	; 215
    19e8:	81 81       	ldd	r24, Z+1	; 0x01
    19ea:	8c 36       	cpi	r24, 0x6C	; 108
    19ec:	31 f1       	breq	.+76     	; 0x1a3a <close_PNEU+0x80>
    19ee:	18 f4       	brcc	.+6      	; 0x19f6 <close_PNEU+0x3c>
    19f0:	82 36       	cpi	r24, 0x62	; 98
    19f2:	39 f0       	breq	.+14     	; 0x1a02 <close_PNEU+0x48>
    19f4:	6a c0       	rjmp	.+212    	; 0x1aca <close_PNEU+0x110>
    19f6:	82 37       	cpi	r24, 0x72	; 114
    19f8:	c1 f1       	breq	.+112    	; 0x1a6a <close_PNEU+0xb0>
    19fa:	83 37       	cpi	r24, 0x73	; 115
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <close_PNEU+0x46>
    19fe:	4d c0       	rjmp	.+154    	; 0x1a9a <close_PNEU+0xe0>
    1a00:	64 c0       	rjmp	.+200    	; 0x1aca <close_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1a02:	6a ee       	ldi	r22, 0xEA	; 234
    1a04:	84 e4       	ldi	r24, 0x44	; 68
    1a06:	0e 94 cb 0c 	call	0x1996	; 0x1996 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1a0a:	66 ee       	ldi	r22, 0xE6	; 230
    1a0c:	88 e8       	ldi	r24, 0x88	; 136
    1a0e:	0e 94 cb 0c 	call	0x1996	; 0x1996 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1a12:	88 e1       	ldi	r24, 0x18	; 24
    1a14:	99 e8       	ldi	r25, 0x89	; 137
    1a16:	9f 93       	push	r25
    1a18:	8f 93       	push	r24
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	01 96       	adiw	r24, 0x01	; 1
    1a1e:	9f 93       	push	r25
    1a20:	8f 93       	push	r24
    1a22:	09 96       	adiw	r24, 0x09	; 9
    1a24:	9f 93       	push	r25
    1a26:	8f 93       	push	r24
    1a28:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
			break;
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	59 c0       	rjmp	.+178    	; 0x1aec <close_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1a3a:	6a ee       	ldi	r22, 0xEA	; 234
    1a3c:	84 e4       	ldi	r24, 0x44	; 68
    1a3e:	0e 94 cb 0c 	call	0x1996	; 0x1996 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1a42:	8d e1       	ldi	r24, 0x1D	; 29
    1a44:	99 e8       	ldi	r25, 0x89	; 137
    1a46:	9f 93       	push	r25
    1a48:	8f 93       	push	r24
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	01 96       	adiw	r24, 0x01	; 1
    1a4e:	9f 93       	push	r25
    1a50:	8f 93       	push	r24
    1a52:	09 96       	adiw	r24, 0x09	; 9
    1a54:	9f 93       	push	r25
    1a56:	8f 93       	push	r24
    1a58:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
			break;
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	41 c0       	rjmp	.+130    	; 0x1aec <close_PNEU+0x132>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1a6a:	66 ee       	ldi	r22, 0xE6	; 230
    1a6c:	88 e8       	ldi	r24, 0x88	; 136
    1a6e:	0e 94 cb 0c 	call	0x1996	; 0x1996 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1a72:	82 e2       	ldi	r24, 0x22	; 34
    1a74:	99 e8       	ldi	r25, 0x89	; 137
    1a76:	9f 93       	push	r25
    1a78:	8f 93       	push	r24
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	01 96       	adiw	r24, 0x01	; 1
    1a7e:	9f 93       	push	r25
    1a80:	8f 93       	push	r24
    1a82:	09 96       	adiw	r24, 0x09	; 9
    1a84:	9f 93       	push	r25
    1a86:	8f 93       	push	r24
    1a88:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
			break;
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	29 c0       	rjmp	.+82     	; 0x1aec <close_PNEU+0x132>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1a9a:	6c ee       	ldi	r22, 0xEC	; 236
    1a9c:	82 e2       	ldi	r24, 0x22	; 34
    1a9e:	0e 94 cb 0c 	call	0x1996	; 0x1996 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1aa2:	88 e2       	ldi	r24, 0x28	; 40
    1aa4:	99 e8       	ldi	r25, 0x89	; 137
    1aa6:	9f 93       	push	r25
    1aa8:	8f 93       	push	r24
    1aaa:	ce 01       	movw	r24, r28
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	9f 93       	push	r25
    1ab0:	8f 93       	push	r24
    1ab2:	09 96       	adiw	r24, 0x09	; 9
    1ab4:	9f 93       	push	r25
    1ab6:	8f 93       	push	r24
    1ab8:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
			break;
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	11 c0       	rjmp	.+34     	; 0x1aec <close_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "close_PNEU bad object");
    1aca:	60 e3       	ldi	r22, 0x30	; 48
    1acc:	79 e8       	ldi	r23, 0x89	; 137
    1ace:	85 ef       	ldi	r24, 0xF5	; 245
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
			strcpy(outbuf, "close what?");
    1ad6:	8c e0       	ldi	r24, 0x0C	; 12
    1ad8:	e6 e4       	ldi	r30, 0x46	; 70
    1ada:	f9 e8       	ldi	r31, 0x89	; 137
    1adc:	de 01       	movw	r26, r28
    1ade:	1a 96       	adiw	r26, 0x0a	; 10
    1ae0:	01 90       	ld	r0, Z+
    1ae2:	0d 92       	st	X+, r0
    1ae4:	8a 95       	dec	r24
    1ae6:	e1 f7       	brne	.-8      	; 0x1ae0 <close_PNEU+0x126>
			return(ERROR);
    1ae8:	83 e6       	ldi	r24, 0x63	; 99
    1aea:	0b c0       	rjmp	.+22     	; 0x1b02 <close_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1af2:	41 e0       	ldi	r20, 0x01	; 1
    1af4:	be 01       	movw	r22, r28
    1af6:	66 5f       	subi	r22, 0xF6	; 246
    1af8:	7f 4f       	sbci	r23, 0xFF	; 255
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	0e 94 9a 0b 	call	0x1734	; 0x1734 <writestr_OLED>
	return(NOERROR);
    1b00:	80 e0       	ldi	r24, 0x00	; 0

}
    1b02:	6a 96       	adiw	r28, 0x1a	; 26
    1b04:	cd bf       	out	0x3d, r28	; 61
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	08 95       	ret

00001b0e <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(uint8_t cstack)
{
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	69 97       	sbiw	r28, 0x19	; 25
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	de bf       	out	0x3e, r29	; 62

	const char dformat_OPE[] = "Open %s";
    1b1c:	98 e0       	ldi	r25, 0x08	; 8
    1b1e:	eb e7       	ldi	r30, 0x7B	; 123
    1b20:	f9 e8       	ldi	r31, 0x89	; 137
    1b22:	de 01       	movw	r26, r28
    1b24:	11 96       	adiw	r26, 0x01	; 1
    1b26:	01 90       	ld	r0, Z+
    1b28:	0d 92       	st	X+, r0
    1b2a:	9a 95       	dec	r25
    1b2c:	e1 f7       	brne	.-8      	; 0x1b26 <open_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1b2e:	24 e3       	ldi	r18, 0x34	; 52
    1b30:	82 9f       	mul	r24, r18
    1b32:	c0 01       	movw	r24, r0
    1b34:	11 24       	eor	r1, r1
    1b36:	fc 01       	movw	r30, r24
    1b38:	e9 5f       	subi	r30, 0xF9	; 249
    1b3a:	f7 4d       	sbci	r31, 0xD7	; 215
    1b3c:	81 81       	ldd	r24, Z+1	; 0x01
    1b3e:	8c 36       	cpi	r24, 0x6C	; 108
    1b40:	31 f1       	breq	.+76     	; 0x1b8e <open_PNEU+0x80>
    1b42:	18 f4       	brcc	.+6      	; 0x1b4a <open_PNEU+0x3c>
    1b44:	82 36       	cpi	r24, 0x62	; 98
    1b46:	39 f0       	breq	.+14     	; 0x1b56 <open_PNEU+0x48>
    1b48:	6a c0       	rjmp	.+212    	; 0x1c1e <open_PNEU+0x110>
    1b4a:	82 37       	cpi	r24, 0x72	; 114
    1b4c:	c1 f1       	breq	.+112    	; 0x1bbe <open_PNEU+0xb0>
    1b4e:	83 37       	cpi	r24, 0x73	; 115
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <open_PNEU+0x46>
    1b52:	4d c0       	rjmp	.+154    	; 0x1bee <open_PNEU+0xe0>
    1b54:	64 c0       	rjmp	.+200    	; 0x1c1e <open_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1b56:	6e ea       	ldi	r22, 0xAE	; 174
    1b58:	84 e4       	ldi	r24, 0x44	; 68
    1b5a:	0e 94 cb 0c 	call	0x1996	; 0x1996 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1b5e:	6e e6       	ldi	r22, 0x6E	; 110
    1b60:	88 e8       	ldi	r24, 0x88	; 136
    1b62:	0e 94 cb 0c 	call	0x1996	; 0x1996 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1b66:	88 e1       	ldi	r24, 0x18	; 24
    1b68:	99 e8       	ldi	r25, 0x89	; 137
    1b6a:	9f 93       	push	r25
    1b6c:	8f 93       	push	r24
    1b6e:	ce 01       	movw	r24, r28
    1b70:	01 96       	adiw	r24, 0x01	; 1
    1b72:	9f 93       	push	r25
    1b74:	8f 93       	push	r24
    1b76:	08 96       	adiw	r24, 0x08	; 8
    1b78:	9f 93       	push	r25
    1b7a:	8f 93       	push	r24
    1b7c:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
			break;
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	59 c0       	rjmp	.+178    	; 0x1c40 <open_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1b8e:	6e ea       	ldi	r22, 0xAE	; 174
    1b90:	84 e4       	ldi	r24, 0x44	; 68
    1b92:	0e 94 cb 0c 	call	0x1996	; 0x1996 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1b96:	8d e1       	ldi	r24, 0x1D	; 29
    1b98:	99 e8       	ldi	r25, 0x89	; 137
    1b9a:	9f 93       	push	r25
    1b9c:	8f 93       	push	r24
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	01 96       	adiw	r24, 0x01	; 1
    1ba2:	9f 93       	push	r25
    1ba4:	8f 93       	push	r24
    1ba6:	08 96       	adiw	r24, 0x08	; 8
    1ba8:	9f 93       	push	r25
    1baa:	8f 93       	push	r24
    1bac:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
			break;
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	41 c0       	rjmp	.+130    	; 0x1c40 <open_PNEU+0x132>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1bbe:	6e e6       	ldi	r22, 0x6E	; 110
    1bc0:	88 e8       	ldi	r24, 0x88	; 136
    1bc2:	0e 94 cb 0c 	call	0x1996	; 0x1996 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1bc6:	82 e2       	ldi	r24, 0x22	; 34
    1bc8:	99 e8       	ldi	r25, 0x89	; 137
    1bca:	9f 93       	push	r25
    1bcc:	8f 93       	push	r24
    1bce:	ce 01       	movw	r24, r28
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	9f 93       	push	r25
    1bd4:	8f 93       	push	r24
    1bd6:	08 96       	adiw	r24, 0x08	; 8
    1bd8:	9f 93       	push	r25
    1bda:	8f 93       	push	r24
    1bdc:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
			break;
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	29 c0       	rjmp	.+82     	; 0x1c40 <open_PNEU+0x132>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1bee:	6e ec       	ldi	r22, 0xCE	; 206
    1bf0:	82 e2       	ldi	r24, 0x22	; 34
    1bf2:	0e 94 cb 0c 	call	0x1996	; 0x1996 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1bf6:	88 e2       	ldi	r24, 0x28	; 40
    1bf8:	99 e8       	ldi	r25, 0x89	; 137
    1bfa:	9f 93       	push	r25
    1bfc:	8f 93       	push	r24
    1bfe:	ce 01       	movw	r24, r28
    1c00:	01 96       	adiw	r24, 0x01	; 1
    1c02:	9f 93       	push	r25
    1c04:	8f 93       	push	r24
    1c06:	08 96       	adiw	r24, 0x08	; 8
    1c08:	9f 93       	push	r25
    1c0a:	8f 93       	push	r24
    1c0c:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
			break;
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	11 c0       	rjmp	.+34     	; 0x1c40 <open_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "open_PNEU bad object");
    1c1e:	6b e5       	ldi	r22, 0x5B	; 91
    1c20:	79 e8       	ldi	r23, 0x89	; 137
    1c22:	85 ef       	ldi	r24, 0xF5	; 245
    1c24:	91 e0       	ldi	r25, 0x01	; 1
    1c26:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
			strcpy(outbuf, "open what?");
    1c2a:	8b e0       	ldi	r24, 0x0B	; 11
    1c2c:	e0 e7       	ldi	r30, 0x70	; 112
    1c2e:	f9 e8       	ldi	r31, 0x89	; 137
    1c30:	de 01       	movw	r26, r28
    1c32:	19 96       	adiw	r26, 0x09	; 9
    1c34:	01 90       	ld	r0, Z+
    1c36:	0d 92       	st	X+, r0
    1c38:	8a 95       	dec	r24
    1c3a:	e1 f7       	brne	.-8      	; 0x1c34 <open_PNEU+0x126>
			return(ERROR);
    1c3c:	83 e6       	ldi	r24, 0x63	; 99
    1c3e:	0b c0       	rjmp	.+22     	; 0x1c56 <open_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1c46:	41 e0       	ldi	r20, 0x01	; 1
    1c48:	be 01       	movw	r22, r28
    1c4a:	67 5f       	subi	r22, 0xF7	; 247
    1c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	0e 94 9a 0b 	call	0x1734	; 0x1734 <writestr_OLED>
	return(NOERROR);
    1c54:	80 e0       	ldi	r24, 0x00	; 0

}
    1c56:	69 96       	adiw	r28, 0x19	; 25
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	08 95       	ret

00001c62 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1c62:	1f 92       	push	r1
    1c64:	0f 92       	push	r0
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	0f 92       	push	r0
    1c6a:	11 24       	eor	r1, r1
    1c6c:	2f 93       	push	r18
    1c6e:	3f 93       	push	r19
    1c70:	4f 93       	push	r20
    1c72:	5f 93       	push	r21
    1c74:	6f 93       	push	r22
    1c76:	7f 93       	push	r23
    1c78:	8f 93       	push	r24
    1c7a:	9f 93       	push	r25
    1c7c:	af 93       	push	r26
    1c7e:	bf 93       	push	r27
    1c80:	ef 93       	push	r30
    1c82:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1c84:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1c88:	88 23       	and	r24, r24
    1c8a:	4c f4       	brge	.+18     	; 0x1c9e <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1c8c:	80 e8       	ldi	r24, 0x80	; 128
    1c8e:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1c92:	68 e0       	ldi	r22, 0x08	; 8
    1c94:	81 e2       	ldi	r24, 0x21	; 33
    1c96:	0e 94 92 08 	call	0x1124	; 0x1124 <read_MCP23008>
    1c9a:	80 93 13 2a 	sts	0x2A13, r24	; 0x802a13 <pneuState>
	}

}
    1c9e:	ff 91       	pop	r31
    1ca0:	ef 91       	pop	r30
    1ca2:	bf 91       	pop	r27
    1ca4:	af 91       	pop	r26
    1ca6:	9f 91       	pop	r25
    1ca8:	8f 91       	pop	r24
    1caa:	7f 91       	pop	r23
    1cac:	6f 91       	pop	r22
    1cae:	5f 91       	pop	r21
    1cb0:	4f 91       	pop	r20
    1cb2:	3f 91       	pop	r19
    1cb4:	2f 91       	pop	r18
    1cb6:	0f 90       	pop	r0
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	0f 90       	pop	r0
    1cbc:	1f 90       	pop	r1
    1cbe:	18 95       	reti

00001cc0 <init_PORTS>:
	sure nothing lurks in the background by accident.
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
    1cc0:	e0 e0       	ldi	r30, 0x00	; 0
    1cc2:	f4 e0       	ldi	r31, 0x04	; 4
    1cc4:	88 e0       	ldi	r24, 0x08	; 8
    1cc6:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
    1cc8:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
    1cca:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
    1ccc:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
    1cce:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    1cd0:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    1cd2:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
    1cd4:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
    1cd6:	e0 e2       	ldi	r30, 0x20	; 32
    1cd8:	f4 e0       	ldi	r31, 0x04	; 4
    1cda:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
    1cdc:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
    1cde:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
    1ce0:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
    1ce2:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
    1ce4:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
    1ce6:	e0 e4       	ldi	r30, 0x40	; 64
    1ce8:	f4 e0       	ldi	r31, 0x04	; 4
    1cea:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
    1cec:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
    1cee:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
    1cf0:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
    1cf2:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
    1cf4:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
    1cf6:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
    1cf8:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1cfa:	e0 e6       	ldi	r30, 0x60	; 96
    1cfc:	f4 e0       	ldi	r31, 0x04	; 4
    1cfe:	94 e0       	ldi	r25, 0x04	; 4
    1d00:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d02:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d04:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d06:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d08:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d0a:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d0c:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d0e:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
    1d10:	e0 e8       	ldi	r30, 0x80	; 128
    1d12:	f4 e0       	ldi	r31, 0x04	; 4
    1d14:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
    1d16:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
    1d18:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
    1d1a:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
    1d1c:	e0 ea       	ldi	r30, 0xA0	; 160
    1d1e:	f4 e0       	ldi	r31, 0x04	; 4
    1d20:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
    1d22:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
    1d24:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
    1d26:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
    1d28:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
    1d2a:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
    1d2c:	86 8b       	std	Z+22, r24	; 0x16
    1d2e:	08 95       	ret

00001d30 <report>:
	Returns
		0 - GREATERPROMPT on success
		1 - ERRORPROMPT on error (invalid command noun)
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1d30:	2f 92       	push	r2
    1d32:	3f 92       	push	r3
    1d34:	4f 92       	push	r4
    1d36:	5f 92       	push	r5
    1d38:	6f 92       	push	r6
    1d3a:	7f 92       	push	r7
    1d3c:	8f 92       	push	r8
    1d3e:	9f 92       	push	r9
    1d40:	af 92       	push	r10
    1d42:	bf 92       	push	r11
    1d44:	cf 92       	push	r12
    1d46:	df 92       	push	r13
    1d48:	ef 92       	push	r14
    1d4a:	ff 92       	push	r15
    1d4c:	0f 93       	push	r16
    1d4e:	1f 93       	push	r17
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	ca 5e       	subi	r28, 0xEA	; 234
    1d5a:	d2 40       	sbci	r29, 0x02	; 2
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE+10], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "ENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
    1d60:	95 e4       	ldi	r25, 0x45	; 69
    1d62:	e1 ee       	ldi	r30, 0xE1	; 225
    1d64:	f9 e8       	ldi	r31, 0x89	; 137
    1d66:	de 01       	movw	r26, r28
    1d68:	ab 5a       	subi	r26, 0xAB	; 171
    1d6a:	be 4f       	sbci	r27, 0xFE	; 254
    1d6c:	01 90       	ld	r0, Z+
    1d6e:	0d 92       	st	X+, r0
    1d70:	9a 95       	dec	r25
    1d72:	e1 f7       	brne	.-8      	; 0x1d6c <report+0x3c>
	const char format_MTR[] = "MTR,%s,%c,%ld,microns,%ld,microns/sec,%d,mA,%s";
    1d74:	9f e2       	ldi	r25, 0x2F	; 47
    1d76:	e6 e2       	ldi	r30, 0x26	; 38
    1d78:	fa e8       	ldi	r31, 0x8A	; 138
    1d7a:	de 01       	movw	r26, r28
    1d7c:	a6 56       	subi	r26, 0x66	; 102
    1d7e:	be 4f       	sbci	r27, 0xFE	; 254
    1d80:	01 90       	ld	r0, Z+
    1d82:	0d 92       	st	X+, r0
    1d84:	9a 95       	dec	r25
    1d86:	e1 f7       	brne	.-8      	; 0x1d80 <report+0x50>
	const char format_MTV[] = "MTV,%s,%c,%3.1f,V,%3.1f,C,%s";
    1d88:	9d e1       	ldi	r25, 0x1D	; 29
    1d8a:	e5 e5       	ldi	r30, 0x55	; 85
    1d8c:	fa e8       	ldi	r31, 0x8A	; 138
    1d8e:	de 01       	movw	r26, r28
    1d90:	a7 53       	subi	r26, 0x37	; 55
    1d92:	be 4f       	sbci	r27, 0xFE	; 254
    1d94:	01 90       	ld	r0, Z+
    1d96:	0d 92       	st	X+, r0
    1d98:	9a 95       	dec	r25
    1d9a:	e1 f7       	brne	.-8      	; 0x1d94 <report+0x64>
	const char format_ORI[] = "ORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1d9c:	9c e1       	ldi	r25, 0x1C	; 28
    1d9e:	e2 e7       	ldi	r30, 0x72	; 114
    1da0:	fa e8       	ldi	r31, 0x8A	; 138
    1da2:	de 01       	movw	r26, r28
    1da4:	aa 51       	subi	r26, 0x1A	; 26
    1da6:	be 4f       	sbci	r27, 0xFE	; 254
    1da8:	01 90       	ld	r0, Z+
    1daa:	0d 92       	st	X+, r0
    1dac:	9a 95       	dec	r25
    1dae:	e1 f7       	brne	.-8      	; 0x1da8 <report+0x78>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1db0:	92 e1       	ldi	r25, 0x12	; 18
    1db2:	ee e8       	ldi	r30, 0x8E	; 142
    1db4:	fa e8       	ldi	r31, 0x8A	; 138
    1db6:	de 01       	movw	r26, r28
    1db8:	ae 5f       	subi	r26, 0xFE	; 254
    1dba:	bd 4f       	sbci	r27, 0xFD	; 253
    1dbc:	01 90       	ld	r0, Z+
    1dbe:	0d 92       	st	X+, r0
    1dc0:	9a 95       	dec	r25
    1dc2:	e1 f7       	brne	.-8      	; 0x1dbc <report+0x8c>
	const char format_PNU[] = "PNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1dc4:	9d e2       	ldi	r25, 0x2D	; 45
    1dc6:	e0 ea       	ldi	r30, 0xA0	; 160
    1dc8:	fa e8       	ldi	r31, 0x8A	; 138
    1dca:	de 01       	movw	r26, r28
    1dcc:	ac 5e       	subi	r26, 0xEC	; 236
    1dce:	bd 4f       	sbci	r27, 0xFD	; 253
    1dd0:	01 90       	ld	r0, Z+
    1dd2:	0d 92       	st	X+, r0
    1dd4:	9a 95       	dec	r25
    1dd6:	e1 f7       	brne	.-8      	; 0x1dd0 <report+0xa0>
	const char dformat_PN1[] = "left:%c   right:%c";
    1dd8:	93 e1       	ldi	r25, 0x13	; 19
    1dda:	ed ec       	ldi	r30, 0xCD	; 205
    1ddc:	fa e8       	ldi	r31, 0x8A	; 138
    1dde:	de 01       	movw	r26, r28
    1de0:	af 5b       	subi	r26, 0xBF	; 191
    1de2:	bd 4f       	sbci	r27, 0xFD	; 253
    1de4:	01 90       	ld	r0, Z+
    1de6:	0d 92       	st	X+, r0
    1de8:	9a 95       	dec	r25
    1dea:	e1 f7       	brne	.-8      	; 0x1de4 <report+0xb4>
	const char dformat_PN2[] = "shutter:%c  air:%c";
    1dec:	93 e1       	ldi	r25, 0x13	; 19
    1dee:	e0 ee       	ldi	r30, 0xE0	; 224
    1df0:	fa e8       	ldi	r31, 0x8A	; 138
    1df2:	de 01       	movw	r26, r28
    1df4:	ac 5a       	subi	r26, 0xAC	; 172
    1df6:	bd 4f       	sbci	r27, 0xFD	; 253
    1df8:	01 90       	ld	r0, Z+
    1dfa:	0d 92       	st	X+, r0
    1dfc:	9a 95       	dec	r25
    1dfe:	e1 f7       	brne	.-8      	; 0x1df8 <report+0xc8>
	const char format_TIM[] = "TIM,%s,%s,set,%s,boot,%s";
    1e00:	99 e1       	ldi	r25, 0x19	; 25
    1e02:	e3 ef       	ldi	r30, 0xF3	; 243
    1e04:	fa e8       	ldi	r31, 0x8A	; 138
    1e06:	de 01       	movw	r26, r28
    1e08:	a9 59       	subi	r26, 0x99	; 153
    1e0a:	bd 4f       	sbci	r27, 0xFD	; 253
    1e0c:	01 90       	ld	r0, Z+
    1e0e:	0d 92       	st	X+, r0
    1e10:	9a 95       	dec	r25
    1e12:	e1 f7       	brne	.-8      	; 0x1e0c <report+0xdc>
	const char format_VAC[] = "VAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1e14:	95 e2       	ldi	r25, 0x25	; 37
    1e16:	ec e0       	ldi	r30, 0x0C	; 12
    1e18:	fb e8       	ldi	r31, 0x8B	; 139
    1e1a:	de 01       	movw	r26, r28
    1e1c:	a0 58       	subi	r26, 0x80	; 128
    1e1e:	bd 4f       	sbci	r27, 0xFD	; 253
    1e20:	01 90       	ld	r0, Z+
    1e22:	0d 92       	st	X+, r0
    1e24:	9a 95       	dec	r25
    1e26:	e1 f7       	brne	.-8      	; 0x1e20 <report+0xf0>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1e28:	9d e0       	ldi	r25, 0x0D	; 13
    1e2a:	e1 e3       	ldi	r30, 0x31	; 49
    1e2c:	fb e8       	ldi	r31, 0x8B	; 139
    1e2e:	de 01       	movw	r26, r28
    1e30:	ab 55       	subi	r26, 0x5B	; 91
    1e32:	bd 4f       	sbci	r27, 0xFD	; 253
    1e34:	01 90       	ld	r0, Z+
    1e36:	0d 92       	st	X+, r0
    1e38:	9a 95       	dec	r25
    1e3a:	e1 f7       	brne	.-8      	; 0x1e34 <report+0x104>
	const char format_VER[] = "VER,%s,%s,%s";
    1e3c:	9d e0       	ldi	r25, 0x0D	; 13
    1e3e:	ee e3       	ldi	r30, 0x3E	; 62
    1e40:	fb e8       	ldi	r31, 0x8B	; 139
    1e42:	de 01       	movw	r26, r28
    1e44:	ae 54       	subi	r26, 0x4E	; 78
    1e46:	bd 4f       	sbci	r27, 0xFD	; 253
    1e48:	01 90       	ld	r0, Z+
    1e4a:	0d 92       	st	X+, r0
    1e4c:	9a 95       	dec	r25
    1e4e:	e1 f7       	brne	.-8      	; 0x1e48 <report+0x118>
	float voltage;							// voltage
	uint16_t current;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum

	switch(pcmd[cstack].cobject) {
    1e50:	08 2f       	mov	r16, r24
    1e52:	10 e0       	ldi	r17, 0x00	; 0
    1e54:	84 e3       	ldi	r24, 0x34	; 52
    1e56:	80 9f       	mul	r24, r16
    1e58:	f0 01       	movw	r30, r0
    1e5a:	81 9f       	mul	r24, r17
    1e5c:	f0 0d       	add	r31, r0
    1e5e:	11 24       	eor	r1, r1
    1e60:	e9 5f       	subi	r30, 0xF9	; 249
    1e62:	f7 4d       	sbci	r31, 0xD7	; 215
    1e64:	e1 81       	ldd	r30, Z+1	; 0x01
    1e66:	8e 2f       	mov	r24, r30
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	e1 54       	subi	r30, 0x41	; 65
    1e6e:	f1 09       	sbc	r31, r1
    1e70:	e6 33       	cpi	r30, 0x36	; 54
    1e72:	f1 05       	cpc	r31, r1
    1e74:	08 f0       	brcs	.+2      	; 0x1e78 <report+0x148>
    1e76:	d2 c4       	rjmp	.+2468   	; 0x281c <report+0xaec>
    1e78:	ed 58       	subi	r30, 0x8D	; 141
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    1e80:	ce 01       	movw	r24, r28
    1e82:	8b 5e       	subi	r24, 0xEB	; 235
    1e84:	9e 4f       	sbci	r25, 0xFE	; 254
    1e86:	0e 94 83 05 	call	0xb06	; 0xb06 <get_time>
			controller = pcmd[cstack].cobject + 63;
    1e8a:	84 e3       	ldi	r24, 0x34	; 52
    1e8c:	80 9f       	mul	r24, r16
    1e8e:	f0 01       	movw	r30, r0
    1e90:	81 9f       	mul	r24, r17
    1e92:	f0 0d       	add	r31, r0
    1e94:	11 24       	eor	r1, r1
    1e96:	e9 5f       	subi	r30, 0xF9	; 249
    1e98:	f7 4d       	sbci	r31, 0xD7	; 215
    1e9a:	f1 80       	ldd	r15, Z+1	; 0x01
    1e9c:	0f 2e       	mov	r0, r31
    1e9e:	ff e3       	ldi	r31, 0x3F	; 63
    1ea0:	ef 2e       	mov	r14, r31
    1ea2:	f0 2d       	mov	r31, r0
    1ea4:	ef 0c       	add	r14, r15
			retval = get_MOTORFloat(controller, ROBOREADMAINVOLTAGE, &voltage);
    1ea6:	ae 01       	movw	r20, r28
    1ea8:	41 53       	subi	r20, 0x31	; 49
    1eaa:	5d 4f       	sbci	r21, 0xFD	; 253
    1eac:	68 e1       	ldi	r22, 0x18	; 24
    1eae:	8e 2d       	mov	r24, r14
    1eb0:	0e 94 01 15 	call	0x2a02	; 0x2a02 <get_MOTORFloat>
			if (retval == ERROR) {
    1eb4:	83 36       	cpi	r24, 0x63	; 99
    1eb6:	61 f4       	brne	.+24     	; 0x1ed0 <report+0x1a0>
				voltage = -666.0;
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e8       	ldi	r25, 0x80	; 128
    1ebc:	a6 e2       	ldi	r26, 0x26	; 38
    1ebe:	b4 ec       	ldi	r27, 0xC4	; 196
    1ec0:	c1 53       	subi	r28, 0x31	; 49
    1ec2:	dd 4f       	sbci	r29, 0xFD	; 253
    1ec4:	88 83       	st	Y, r24
    1ec6:	99 83       	std	Y+1, r25	; 0x01
    1ec8:	aa 83       	std	Y+2, r26	; 0x02
    1eca:	bb 83       	std	Y+3, r27	; 0x03
    1ecc:	cf 5c       	subi	r28, 0xCF	; 207
    1ece:	d2 40       	sbci	r29, 0x02	; 2
			}
			retval = get_MOTORFloat(controller, ROBOREADTEMPERATURE, &t0);
    1ed0:	ae 01       	movw	r20, r28
    1ed2:	45 53       	subi	r20, 0x35	; 53
    1ed4:	5d 4f       	sbci	r21, 0xFD	; 253
    1ed6:	62 e5       	ldi	r22, 0x52	; 82
    1ed8:	8e 2d       	mov	r24, r14
    1eda:	0e 94 01 15 	call	0x2a02	; 0x2a02 <get_MOTORFloat>
			if (retval == ERROR) {
    1ede:	83 36       	cpi	r24, 0x63	; 99
    1ee0:	61 f4       	brne	.+24     	; 0x1efa <report+0x1ca>
				t0 = -666.0;
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	90 e8       	ldi	r25, 0x80	; 128
    1ee6:	a6 e2       	ldi	r26, 0x26	; 38
    1ee8:	b4 ec       	ldi	r27, 0xC4	; 196
    1eea:	c5 53       	subi	r28, 0x35	; 53
    1eec:	dd 4f       	sbci	r29, 0xFD	; 253
    1eee:	88 83       	st	Y, r24
    1ef0:	99 83       	std	Y+1, r25	; 0x01
    1ef2:	aa 83       	std	Y+2, r26	; 0x02
    1ef4:	bb 83       	std	Y+3, r27	; 0x03
    1ef6:	cb 5c       	subi	r28, 0xCB	; 203
    1ef8:	d2 40       	sbci	r29, 0x02	; 2
//			sprintf(outbuf, format1_MTR, get_SPECID, currenttime, (char) (controller-63),
//				voltage, t0, pcmd[cstack].cid);
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
    1efa:	24 e3       	ldi	r18, 0x34	; 52
    1efc:	20 9f       	mul	r18, r16
    1efe:	c0 01       	movw	r24, r0
    1f00:	21 9f       	mul	r18, r17
    1f02:	90 0d       	add	r25, r0
    1f04:	11 24       	eor	r1, r1
    1f06:	8e 5c       	subi	r24, 0xCE	; 206
    1f08:	97 4d       	sbci	r25, 0xD7	; 215
			}
//			sprintf(outbuf, format1_MTR, get_SPECID, currenttime, (char) (controller-63),
//				voltage, t0, pcmd[cstack].cid);
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
    1f0a:	9f 93       	push	r25
    1f0c:	8f 93       	push	r24
    1f0e:	c2 53       	subi	r28, 0x32	; 50
    1f10:	dd 4f       	sbci	r29, 0xFD	; 253
    1f12:	88 81       	ld	r24, Y
    1f14:	ce 5c       	subi	r28, 0xCE	; 206
    1f16:	d2 40       	sbci	r29, 0x02	; 2
    1f18:	8f 93       	push	r24
    1f1a:	c3 53       	subi	r28, 0x33	; 51
    1f1c:	dd 4f       	sbci	r29, 0xFD	; 253
    1f1e:	88 81       	ld	r24, Y
    1f20:	cd 5c       	subi	r28, 0xCD	; 205
    1f22:	d2 40       	sbci	r29, 0x02	; 2
    1f24:	8f 93       	push	r24
    1f26:	c4 53       	subi	r28, 0x34	; 52
    1f28:	dd 4f       	sbci	r29, 0xFD	; 253
    1f2a:	88 81       	ld	r24, Y
    1f2c:	cc 5c       	subi	r28, 0xCC	; 204
    1f2e:	d2 40       	sbci	r29, 0x02	; 2
    1f30:	8f 93       	push	r24
    1f32:	c5 53       	subi	r28, 0x35	; 53
    1f34:	dd 4f       	sbci	r29, 0xFD	; 253
    1f36:	88 81       	ld	r24, Y
    1f38:	cb 5c       	subi	r28, 0xCB	; 203
    1f3a:	d2 40       	sbci	r29, 0x02	; 2
    1f3c:	8f 93       	push	r24
    1f3e:	ce 52       	subi	r28, 0x2E	; 46
    1f40:	dd 4f       	sbci	r29, 0xFD	; 253
    1f42:	88 81       	ld	r24, Y
    1f44:	c2 5d       	subi	r28, 0xD2	; 210
    1f46:	d2 40       	sbci	r29, 0x02	; 2
    1f48:	8f 93       	push	r24
    1f4a:	cf 52       	subi	r28, 0x2F	; 47
    1f4c:	dd 4f       	sbci	r29, 0xFD	; 253
    1f4e:	88 81       	ld	r24, Y
    1f50:	c1 5d       	subi	r28, 0xD1	; 209
    1f52:	d2 40       	sbci	r29, 0x02	; 2
    1f54:	8f 93       	push	r24
    1f56:	c0 53       	subi	r28, 0x30	; 48
    1f58:	dd 4f       	sbci	r29, 0xFD	; 253
    1f5a:	88 81       	ld	r24, Y
    1f5c:	c0 5d       	subi	r28, 0xD0	; 208
    1f5e:	d2 40       	sbci	r29, 0x02	; 2
    1f60:	8f 93       	push	r24
    1f62:	c1 53       	subi	r28, 0x31	; 49
    1f64:	dd 4f       	sbci	r29, 0xFD	; 253
    1f66:	88 81       	ld	r24, Y
    1f68:	cf 5c       	subi	r28, 0xCF	; 207
    1f6a:	d2 40       	sbci	r29, 0x02	; 2
    1f6c:	8f 93       	push	r24
    1f6e:	1f 92       	push	r1
    1f70:	ff 92       	push	r15
    1f72:	ce 01       	movw	r24, r28
    1f74:	8b 5e       	subi	r24, 0xEB	; 235
    1f76:	9e 4f       	sbci	r25, 0xFE	; 254
    1f78:	9f 93       	push	r25
    1f7a:	8f 93       	push	r24
    1f7c:	8c 54       	subi	r24, 0x4C	; 76
    1f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f80:	9f 93       	push	r25
    1f82:	8f 93       	push	r24
    1f84:	8e 01       	movw	r16, r28
    1f86:	0f 5f       	subi	r16, 0xFF	; 255
    1f88:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8a:	1f 93       	push	r17
    1f8c:	0f 93       	push	r16
    1f8e:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
				voltage, t0, pcmd[cstack].cid);
			printLine(outbuf);
    1f92:	c8 01       	movw	r24, r16
    1f94:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
			break;
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    1f9e:	45 c4       	rjmp	.+2186   	; 0x282a <report+0xafa>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	8b 5e       	subi	r24, 0xEB	; 235
    1fa4:	9e 4f       	sbci	r25, 0xFE	; 254
    1fa6:	0e 94 83 05 	call	0xb06	; 0xb06 <get_time>
			controller = pcmd[cstack].cobject + 31;
    1faa:	84 e3       	ldi	r24, 0x34	; 52
    1fac:	80 9f       	mul	r24, r16
    1fae:	f0 01       	movw	r30, r0
    1fb0:	81 9f       	mul	r24, r17
    1fb2:	f0 0d       	add	r31, r0
    1fb4:	11 24       	eor	r1, r1
    1fb6:	e9 5f       	subi	r30, 0xF9	; 249
    1fb8:	f7 4d       	sbci	r31, 0xD7	; 215
    1fba:	81 81       	ldd	r24, Z+1	; 0x01
    1fbc:	0f 2e       	mov	r0, r31
    1fbe:	ff e1       	ldi	r31, 0x1F	; 31
    1fc0:	7f 2e       	mov	r7, r31
    1fc2:	f0 2d       	mov	r31, r0
    1fc4:	78 0e       	add	r7, r24
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &encoderValue);
    1fc6:	ae 01       	movw	r20, r28
    1fc8:	41 54       	subi	r20, 0x41	; 65
    1fca:	5d 4f       	sbci	r21, 0xFD	; 253
    1fcc:	60 e1       	ldi	r22, 0x10	; 16
    1fce:	87 2d       	mov	r24, r7
    1fd0:	0e 94 51 14 	call	0x28a2	; 0x28a2 <get_MOTOREncoder>
			if (retval == ERROR) {
    1fd4:	83 36       	cpi	r24, 0x63	; 99
    1fd6:	61 f4       	brne	.+24     	; 0x1ff0 <report+0x2c0>
				encoderValue = 0x7FFFFFFF;
    1fd8:	8f ef       	ldi	r24, 0xFF	; 255
    1fda:	9f ef       	ldi	r25, 0xFF	; 255
    1fdc:	af ef       	ldi	r26, 0xFF	; 255
    1fde:	bf e7       	ldi	r27, 0x7F	; 127
    1fe0:	c1 54       	subi	r28, 0x41	; 65
    1fe2:	dd 4f       	sbci	r29, 0xFD	; 253
    1fe4:	88 83       	st	Y, r24
    1fe6:	99 83       	std	Y+1, r25	; 0x01
    1fe8:	aa 83       	std	Y+2, r26	; 0x02
    1fea:	bb 83       	std	Y+3, r27	; 0x03
    1fec:	cf 5b       	subi	r28, 0xBF	; 191
    1fee:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronValue = encoderValue/ROBOCOUNTSPERMICRON;
    1ff0:	c1 54       	subi	r28, 0x41	; 65
    1ff2:	dd 4f       	sbci	r29, 0xFD	; 253
    1ff4:	68 81       	ld	r22, Y
    1ff6:	79 81       	ldd	r23, Y+1	; 0x01
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffc:	cf 5b       	subi	r28, 0xBF	; 191
    1ffe:	d2 40       	sbci	r29, 0x02	; 2
    2000:	2c e0       	ldi	r18, 0x0C	; 12
    2002:	31 e0       	ldi	r19, 0x01	; 1
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	50 e0       	ldi	r21, 0x00	; 0
    2008:	0e 94 3a 21 	call	0x4274	; 0x4274 <__divmodsi4>
    200c:	f2 2e       	mov	r15, r18
    200e:	e3 2e       	mov	r14, r19
    2010:	d4 2e       	mov	r13, r20
    2012:	c5 2e       	mov	r12, r21
			retval = get_MOTOREncoder(controller, ROBOREADENCODERSPEED, &encoderSpeed);
    2014:	ae 01       	movw	r20, r28
    2016:	4d 53       	subi	r20, 0x3D	; 61
    2018:	5d 4f       	sbci	r21, 0xFD	; 253
    201a:	62 e1       	ldi	r22, 0x12	; 18
    201c:	87 2d       	mov	r24, r7
    201e:	0e 94 51 14 	call	0x28a2	; 0x28a2 <get_MOTOREncoder>
			if (retval == ERROR) {
    2022:	83 36       	cpi	r24, 0x63	; 99
    2024:	61 f4       	brne	.+24     	; 0x203e <report+0x30e>
				encoderSpeed = 0x7FFFFFFF;
    2026:	8f ef       	ldi	r24, 0xFF	; 255
    2028:	9f ef       	ldi	r25, 0xFF	; 255
    202a:	af ef       	ldi	r26, 0xFF	; 255
    202c:	bf e7       	ldi	r27, 0x7F	; 127
    202e:	cd 53       	subi	r28, 0x3D	; 61
    2030:	dd 4f       	sbci	r29, 0xFD	; 253
    2032:	88 83       	st	Y, r24
    2034:	99 83       	std	Y+1, r25	; 0x01
    2036:	aa 83       	std	Y+2, r26	; 0x02
    2038:	bb 83       	std	Y+3, r27	; 0x03
    203a:	c3 5c       	subi	r28, 0xC3	; 195
    203c:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronSpeed = encoderSpeed/ROBOCOUNTSPERMICRON;			
    203e:	cd 53       	subi	r28, 0x3D	; 61
    2040:	dd 4f       	sbci	r29, 0xFD	; 253
    2042:	68 81       	ld	r22, Y
    2044:	79 81       	ldd	r23, Y+1	; 0x01
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
    2048:	9b 81       	ldd	r25, Y+3	; 0x03
    204a:	c3 5c       	subi	r28, 0xC3	; 195
    204c:	d2 40       	sbci	r29, 0x02	; 2
    204e:	2c e0       	ldi	r18, 0x0C	; 12
    2050:	31 e0       	ldi	r19, 0x01	; 1
    2052:	40 e0       	ldi	r20, 0x00	; 0
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	0e 94 3a 21 	call	0x4274	; 0x4274 <__divmodsi4>
    205a:	b2 2e       	mov	r11, r18
    205c:	a3 2e       	mov	r10, r19
    205e:	94 2e       	mov	r9, r20
    2060:	85 2e       	mov	r8, r21
			retval = get_MOTORInt32(controller, ROBOREADCURRENT, &icurrents);
    2062:	ae 01       	movw	r20, r28
    2064:	49 53       	subi	r20, 0x39	; 57
    2066:	5d 4f       	sbci	r21, 0xFD	; 253
    2068:	61 e3       	ldi	r22, 0x31	; 49
    206a:	87 2d       	mov	r24, r7
    206c:	0e 94 7f 15 	call	0x2afe	; 0x2afe <get_MOTORInt32>
			if (retval == ERROR) {
    2070:	83 36       	cpi	r24, 0x63	; 99
    2072:	61 f4       	brne	.+24     	; 0x208c <report+0x35c>
				icurrents = 0x7FFFFFFF;
    2074:	8f ef       	ldi	r24, 0xFF	; 255
    2076:	9f ef       	ldi	r25, 0xFF	; 255
    2078:	af ef       	ldi	r26, 0xFF	; 255
    207a:	bf e7       	ldi	r27, 0x7F	; 127
    207c:	c9 53       	subi	r28, 0x39	; 57
    207e:	dd 4f       	sbci	r29, 0xFD	; 253
    2080:	88 83       	st	Y, r24
    2082:	99 83       	std	Y+1, r25	; 0x01
    2084:	aa 83       	std	Y+2, r26	; 0x02
    2086:	bb 83       	std	Y+3, r27	; 0x03
    2088:	c7 5c       	subi	r28, 0xC7	; 199
    208a:	d2 40       	sbci	r29, 0x02	; 2
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
    208c:	c9 53       	subi	r28, 0x39	; 57
    208e:	dd 4f       	sbci	r29, 0xFD	; 253
    2090:	88 81       	ld	r24, Y
    2092:	99 81       	ldd	r25, Y+1	; 0x01
    2094:	aa 81       	ldd	r26, Y+2	; 0x02
    2096:	bb 81       	ldd	r27, Y+3	; 0x03
    2098:	c7 5c       	subi	r28, 0xC7	; 199
    209a:	d2 40       	sbci	r29, 0x02	; 2
    209c:	cd 01       	movw	r24, r26
    209e:	aa 27       	eor	r26, r26
    20a0:	bb 27       	eor	r27, r27
    20a2:	9c 01       	movw	r18, r24
    20a4:	22 0f       	add	r18, r18
    20a6:	33 1f       	adc	r19, r19
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	88 0f       	add	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	82 0f       	add	r24, r18
    20b6:	93 1f       	adc	r25, r19
//			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
//				micronValue, micronSpeed, current, pcmd[cstack].cid);
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, current, pcmd[cstack].cid);
    20b8:	44 e3       	ldi	r20, 0x34	; 52
    20ba:	40 9f       	mul	r20, r16
    20bc:	90 01       	movw	r18, r0
    20be:	41 9f       	mul	r20, r17
    20c0:	30 0d       	add	r19, r0
    20c2:	11 24       	eor	r1, r1
    20c4:	a9 01       	movw	r20, r18
    20c6:	4e 5c       	subi	r20, 0xCE	; 206
    20c8:	57 4d       	sbci	r21, 0xD7	; 215
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
//			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
//				micronValue, micronSpeed, current, pcmd[cstack].cid);
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
    20ca:	f9 01       	movw	r30, r18
    20cc:	e9 5f       	subi	r30, 0xF9	; 249
    20ce:	f7 4d       	sbci	r31, 0xD7	; 215
    20d0:	21 81       	ldd	r18, Z+1	; 0x01
    20d2:	5f 93       	push	r21
    20d4:	4f 93       	push	r20
    20d6:	9f 93       	push	r25
    20d8:	8f 93       	push	r24
    20da:	8f 92       	push	r8
    20dc:	9f 92       	push	r9
    20de:	af 92       	push	r10
    20e0:	bf 92       	push	r11
    20e2:	cf 92       	push	r12
    20e4:	df 92       	push	r13
    20e6:	ef 92       	push	r14
    20e8:	ff 92       	push	r15
    20ea:	1f 92       	push	r1
    20ec:	2f 93       	push	r18
    20ee:	ce 01       	movw	r24, r28
    20f0:	8b 5e       	subi	r24, 0xEB	; 235
    20f2:	9e 4f       	sbci	r25, 0xFE	; 254
    20f4:	9f 93       	push	r25
    20f6:	8f 93       	push	r24
    20f8:	8b 57       	subi	r24, 0x7B	; 123
    20fa:	9f 4f       	sbci	r25, 0xFF	; 255
    20fc:	9f 93       	push	r25
    20fe:	8f 93       	push	r24
    2100:	8e 01       	movw	r16, r28
    2102:	0f 5f       	subi	r16, 0xFF	; 255
    2104:	1f 4f       	sbci	r17, 0xFF	; 255
    2106:	1f 93       	push	r17
    2108:	0f 93       	push	r16
    210a:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
				micronValue, micronSpeed, current, pcmd[cstack].cid);
			printLine(outbuf);
    210e:	c8 01       	movw	r24, r16
    2110:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
			break;
    2114:	cd bf       	out	0x3d, r28	; 61
    2116:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2118:	80 e0       	ldi	r24, 0x00	; 0
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, current, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    211a:	87 c3       	rjmp	.+1806   	; 0x282a <report+0xafa>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	0e 94 1f 18 	call	0x303e	; 0x303e <get_temperature>
    2122:	c5 53       	subi	r28, 0x35	; 53
    2124:	dd 4f       	sbci	r29, 0xFD	; 253
    2126:	68 83       	st	Y, r22
    2128:	79 83       	std	Y+1, r23	; 0x01
    212a:	8a 83       	std	Y+2, r24	; 0x02
    212c:	9b 83       	std	Y+3, r25	; 0x03
    212e:	cb 5c       	subi	r28, 0xCB	; 203
    2130:	d2 40       	sbci	r29, 0x02	; 2
			h0 = get_humidity(0);
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	0e 94 1a 07 	call	0xe34	; 0xe34 <get_humidity>
    2138:	d6 2e       	mov	r13, r22
    213a:	c7 2e       	mov	r12, r23
    213c:	b8 2e       	mov	r11, r24
    213e:	a9 2e       	mov	r10, r25
			t1 = get_temperature(1);
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	0e 94 1f 18 	call	0x303e	; 0x303e <get_temperature>
    2146:	c1 52       	subi	r28, 0x21	; 33
    2148:	dd 4f       	sbci	r29, 0xFD	; 253
    214a:	68 83       	st	Y, r22
    214c:	cf 5d       	subi	r28, 0xDF	; 223
    214e:	d2 40       	sbci	r29, 0x02	; 2
    2150:	c0 52       	subi	r28, 0x20	; 32
    2152:	dd 4f       	sbci	r29, 0xFD	; 253
    2154:	78 83       	st	Y, r23
    2156:	c0 5e       	subi	r28, 0xE0	; 224
    2158:	d2 40       	sbci	r29, 0x02	; 2
    215a:	cf 51       	subi	r28, 0x1F	; 31
    215c:	dd 4f       	sbci	r29, 0xFD	; 253
    215e:	88 83       	st	Y, r24
    2160:	c1 5e       	subi	r28, 0xE1	; 225
    2162:	d2 40       	sbci	r29, 0x02	; 2
    2164:	ce 51       	subi	r28, 0x1E	; 30
    2166:	dd 4f       	sbci	r29, 0xFD	; 253
    2168:	98 83       	st	Y, r25
    216a:	c2 5e       	subi	r28, 0xE2	; 226
    216c:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	0e 94 1a 07 	call	0xe34	; 0xe34 <get_humidity>
    2174:	cd 51       	subi	r28, 0x1D	; 29
    2176:	dd 4f       	sbci	r29, 0xFD	; 253
    2178:	68 83       	st	Y, r22
    217a:	c3 5e       	subi	r28, 0xE3	; 227
    217c:	d2 40       	sbci	r29, 0x02	; 2
    217e:	cc 51       	subi	r28, 0x1C	; 28
    2180:	dd 4f       	sbci	r29, 0xFD	; 253
    2182:	78 83       	st	Y, r23
    2184:	c4 5e       	subi	r28, 0xE4	; 228
    2186:	d2 40       	sbci	r29, 0x02	; 2
    2188:	cb 51       	subi	r28, 0x1B	; 27
    218a:	dd 4f       	sbci	r29, 0xFD	; 253
    218c:	88 83       	st	Y, r24
    218e:	c5 5e       	subi	r28, 0xE5	; 229
    2190:	d2 40       	sbci	r29, 0x02	; 2
    2192:	ca 51       	subi	r28, 0x1A	; 26
    2194:	dd 4f       	sbci	r29, 0xFD	; 253
    2196:	98 83       	st	Y, r25
    2198:	c6 5e       	subi	r28, 0xE6	; 230
    219a:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	0e 94 1f 18 	call	0x303e	; 0x303e <get_temperature>
    21a2:	c9 51       	subi	r28, 0x19	; 25
    21a4:	dd 4f       	sbci	r29, 0xFD	; 253
    21a6:	68 83       	st	Y, r22
    21a8:	c7 5e       	subi	r28, 0xE7	; 231
    21aa:	d2 40       	sbci	r29, 0x02	; 2
    21ac:	c8 51       	subi	r28, 0x18	; 24
    21ae:	dd 4f       	sbci	r29, 0xFD	; 253
    21b0:	78 83       	st	Y, r23
    21b2:	c8 5e       	subi	r28, 0xE8	; 232
    21b4:	d2 40       	sbci	r29, 0x02	; 2
    21b6:	98 2e       	mov	r9, r24
    21b8:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    21ba:	82 e0       	ldi	r24, 0x02	; 2
    21bc:	0e 94 1a 07 	call	0xe34	; 0xe34 <get_humidity>
    21c0:	76 2e       	mov	r7, r22
    21c2:	67 2e       	mov	r6, r23
    21c4:	58 2e       	mov	r5, r24
    21c6:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    21c8:	83 e0       	ldi	r24, 0x03	; 3
    21ca:	0e 94 1f 18 	call	0x303e	; 0x303e <get_temperature>
    21ce:	c7 51       	subi	r28, 0x17	; 23
    21d0:	dd 4f       	sbci	r29, 0xFD	; 253
    21d2:	68 83       	st	Y, r22
    21d4:	c9 5e       	subi	r28, 0xE9	; 233
    21d6:	d2 40       	sbci	r29, 0x02	; 2
    21d8:	c6 51       	subi	r28, 0x16	; 22
    21da:	dd 4f       	sbci	r29, 0xFD	; 253
    21dc:	78 83       	st	Y, r23
    21de:	ca 5e       	subi	r28, 0xEA	; 234
    21e0:	d2 40       	sbci	r29, 0x02	; 2
    21e2:	38 2e       	mov	r3, r24
    21e4:	29 2e       	mov	r2, r25
			get_time(currenttime);
    21e6:	7e 01       	movw	r14, r28
    21e8:	9b ee       	ldi	r25, 0xEB	; 235
    21ea:	e9 1a       	sub	r14, r25
    21ec:	9e ef       	ldi	r25, 0xFE	; 254
    21ee:	f9 0a       	sbc	r15, r25
    21f0:	c7 01       	movw	r24, r14
    21f2:	0e 94 83 05 	call	0xb06	; 0xb06 <get_time>
//			sprintf(outbuf, format_ENV, get_SPECID, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    21f6:	24 e3       	ldi	r18, 0x34	; 52
    21f8:	20 9f       	mul	r18, r16
    21fa:	c0 01       	movw	r24, r0
    21fc:	21 9f       	mul	r18, r17
    21fe:	90 0d       	add	r25, r0
    2200:	11 24       	eor	r1, r1
    2202:	8e 5c       	subi	r24, 0xCE	; 206
    2204:	97 4d       	sbci	r25, 0xD7	; 215
    2206:	9f 93       	push	r25
    2208:	8f 93       	push	r24
    220a:	2f 92       	push	r2
    220c:	3f 92       	push	r3
    220e:	c6 51       	subi	r28, 0x16	; 22
    2210:	dd 4f       	sbci	r29, 0xFD	; 253
    2212:	88 81       	ld	r24, Y
    2214:	ca 5e       	subi	r28, 0xEA	; 234
    2216:	d2 40       	sbci	r29, 0x02	; 2
    2218:	8f 93       	push	r24
    221a:	c7 51       	subi	r28, 0x17	; 23
    221c:	dd 4f       	sbci	r29, 0xFD	; 253
    221e:	98 81       	ld	r25, Y
    2220:	c9 5e       	subi	r28, 0xE9	; 233
    2222:	d2 40       	sbci	r29, 0x02	; 2
    2224:	9f 93       	push	r25
    2226:	4f 92       	push	r4
    2228:	5f 92       	push	r5
    222a:	6f 92       	push	r6
    222c:	7f 92       	push	r7
    222e:	8f 92       	push	r8
    2230:	9f 92       	push	r9
    2232:	c8 51       	subi	r28, 0x18	; 24
    2234:	dd 4f       	sbci	r29, 0xFD	; 253
    2236:	88 81       	ld	r24, Y
    2238:	c8 5e       	subi	r28, 0xE8	; 232
    223a:	d2 40       	sbci	r29, 0x02	; 2
    223c:	8f 93       	push	r24
    223e:	c9 51       	subi	r28, 0x19	; 25
    2240:	dd 4f       	sbci	r29, 0xFD	; 253
    2242:	98 81       	ld	r25, Y
    2244:	c7 5e       	subi	r28, 0xE7	; 231
    2246:	d2 40       	sbci	r29, 0x02	; 2
    2248:	9f 93       	push	r25
    224a:	ca 51       	subi	r28, 0x1A	; 26
    224c:	dd 4f       	sbci	r29, 0xFD	; 253
    224e:	88 81       	ld	r24, Y
    2250:	c6 5e       	subi	r28, 0xE6	; 230
    2252:	d2 40       	sbci	r29, 0x02	; 2
    2254:	8f 93       	push	r24
    2256:	cb 51       	subi	r28, 0x1B	; 27
    2258:	dd 4f       	sbci	r29, 0xFD	; 253
    225a:	98 81       	ld	r25, Y
    225c:	c5 5e       	subi	r28, 0xE5	; 229
    225e:	d2 40       	sbci	r29, 0x02	; 2
    2260:	9f 93       	push	r25
    2262:	cc 51       	subi	r28, 0x1C	; 28
    2264:	dd 4f       	sbci	r29, 0xFD	; 253
    2266:	88 81       	ld	r24, Y
    2268:	c4 5e       	subi	r28, 0xE4	; 228
    226a:	d2 40       	sbci	r29, 0x02	; 2
    226c:	8f 93       	push	r24
    226e:	cd 51       	subi	r28, 0x1D	; 29
    2270:	dd 4f       	sbci	r29, 0xFD	; 253
    2272:	98 81       	ld	r25, Y
    2274:	c3 5e       	subi	r28, 0xE3	; 227
    2276:	d2 40       	sbci	r29, 0x02	; 2
    2278:	9f 93       	push	r25
    227a:	ce 51       	subi	r28, 0x1E	; 30
    227c:	dd 4f       	sbci	r29, 0xFD	; 253
    227e:	88 81       	ld	r24, Y
    2280:	c2 5e       	subi	r28, 0xE2	; 226
    2282:	d2 40       	sbci	r29, 0x02	; 2
    2284:	8f 93       	push	r24
    2286:	cf 51       	subi	r28, 0x1F	; 31
    2288:	dd 4f       	sbci	r29, 0xFD	; 253
    228a:	98 81       	ld	r25, Y
    228c:	c1 5e       	subi	r28, 0xE1	; 225
    228e:	d2 40       	sbci	r29, 0x02	; 2
    2290:	9f 93       	push	r25
    2292:	c0 52       	subi	r28, 0x20	; 32
    2294:	dd 4f       	sbci	r29, 0xFD	; 253
    2296:	88 81       	ld	r24, Y
    2298:	c0 5e       	subi	r28, 0xE0	; 224
    229a:	d2 40       	sbci	r29, 0x02	; 2
    229c:	8f 93       	push	r24
    229e:	c1 52       	subi	r28, 0x21	; 33
    22a0:	dd 4f       	sbci	r29, 0xFD	; 253
    22a2:	98 81       	ld	r25, Y
    22a4:	cf 5d       	subi	r28, 0xDF	; 223
    22a6:	d2 40       	sbci	r29, 0x02	; 2
    22a8:	9f 93       	push	r25
    22aa:	af 92       	push	r10
    22ac:	bf 92       	push	r11
    22ae:	cf 92       	push	r12
    22b0:	df 92       	push	r13
    22b2:	c2 53       	subi	r28, 0x32	; 50
    22b4:	dd 4f       	sbci	r29, 0xFD	; 253
    22b6:	88 81       	ld	r24, Y
    22b8:	ce 5c       	subi	r28, 0xCE	; 206
    22ba:	d2 40       	sbci	r29, 0x02	; 2
    22bc:	8f 93       	push	r24
    22be:	c3 53       	subi	r28, 0x33	; 51
    22c0:	dd 4f       	sbci	r29, 0xFD	; 253
    22c2:	88 81       	ld	r24, Y
    22c4:	cd 5c       	subi	r28, 0xCD	; 205
    22c6:	d2 40       	sbci	r29, 0x02	; 2
    22c8:	8f 93       	push	r24
    22ca:	c4 53       	subi	r28, 0x34	; 52
    22cc:	dd 4f       	sbci	r29, 0xFD	; 253
    22ce:	88 81       	ld	r24, Y
    22d0:	cc 5c       	subi	r28, 0xCC	; 204
    22d2:	d2 40       	sbci	r29, 0x02	; 2
    22d4:	8f 93       	push	r24
    22d6:	c5 53       	subi	r28, 0x35	; 53
    22d8:	dd 4f       	sbci	r29, 0xFD	; 253
    22da:	88 81       	ld	r24, Y
    22dc:	cb 5c       	subi	r28, 0xCB	; 203
    22de:	d2 40       	sbci	r29, 0x02	; 2
    22e0:	8f 93       	push	r24
    22e2:	ff 92       	push	r15
    22e4:	ef 92       	push	r14
    22e6:	ce 01       	movw	r24, r28
    22e8:	8b 5a       	subi	r24, 0xAB	; 171
    22ea:	9e 4f       	sbci	r25, 0xFE	; 254
    22ec:	9f 93       	push	r25
    22ee:	8f 93       	push	r24
    22f0:	8e 01       	movw	r16, r28
    22f2:	0f 5f       	subi	r16, 0xFF	; 255
    22f4:	1f 4f       	sbci	r17, 0xFF	; 255
    22f6:	1f 93       	push	r17
    22f8:	0f 93       	push	r16
    22fa:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
			printLine(outbuf);
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	de bf       	out	0x3e, r29	; 62
    2302:	c8 01       	movw	r24, r16
    2304:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
			writestr_OLED(1, "Temp & Humidity", 1);
    2308:	41 e0       	ldi	r20, 0x01	; 1
    230a:	63 e8       	ldi	r22, 0x83	; 131
    230c:	79 e8       	ldi	r23, 0x89	; 137
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	0e 94 9a 0b 	call	0x1734	; 0x1734 <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    2314:	c5 53       	subi	r28, 0x35	; 53
    2316:	dd 4f       	sbci	r29, 0xFD	; 253
    2318:	f8 80       	ld	r15, Y
    231a:	cb 5c       	subi	r28, 0xCB	; 203
    231c:	d2 40       	sbci	r29, 0x02	; 2
    231e:	c4 53       	subi	r28, 0x34	; 52
    2320:	dd 4f       	sbci	r29, 0xFD	; 253
    2322:	e8 80       	ld	r14, Y
    2324:	cc 5c       	subi	r28, 0xCC	; 204
    2326:	d2 40       	sbci	r29, 0x02	; 2
    2328:	c3 53       	subi	r28, 0x33	; 51
    232a:	dd 4f       	sbci	r29, 0xFD	; 253
    232c:	98 80       	ld	r9, Y
    232e:	cd 5c       	subi	r28, 0xCD	; 205
    2330:	d2 40       	sbci	r29, 0x02	; 2
    2332:	c2 53       	subi	r28, 0x32	; 50
    2334:	dd 4f       	sbci	r29, 0xFD	; 253
    2336:	88 80       	ld	r8, Y
    2338:	ce 5c       	subi	r28, 0xCE	; 206
    233a:	d2 40       	sbci	r29, 0x02	; 2
    233c:	26 e6       	ldi	r18, 0x66	; 102
    233e:	36 e6       	ldi	r19, 0x66	; 102
    2340:	46 ee       	ldi	r20, 0xE6	; 230
    2342:	5f e3       	ldi	r21, 0x3F	; 63
    2344:	6f 2d       	mov	r22, r15
    2346:	7e 2d       	mov	r23, r14
    2348:	89 2d       	mov	r24, r9
    234a:	98 2d       	mov	r25, r8
    234c:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__mulsf3>
    2350:	af 92       	push	r10
    2352:	bf 92       	push	r11
    2354:	cf 92       	push	r12
    2356:	df 92       	push	r13
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e0       	ldi	r20, 0x00	; 0
    235e:	52 e4       	ldi	r21, 0x42	; 66
    2360:	0e 94 a2 1b 	call	0x3744	; 0x3744 <__addsf3>
    2364:	9f 93       	push	r25
    2366:	8f 93       	push	r24
    2368:	7f 93       	push	r23
    236a:	6f 93       	push	r22
    236c:	8f 92       	push	r8
    236e:	9f 92       	push	r9
    2370:	ef 92       	push	r14
    2372:	ff 92       	push	r15
    2374:	83 e9       	ldi	r24, 0x93	; 147
    2376:	99 e8       	ldi	r25, 0x89	; 137
    2378:	9f 93       	push	r25
    237a:	8f 93       	push	r24
    237c:	1f 93       	push	r17
    237e:	0f 93       	push	r16
    2380:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2384:	42 e0       	ldi	r20, 0x02	; 2
    2386:	b8 01       	movw	r22, r16
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	0e 94 9a 0b 	call	0x1734	; 0x1734 <writestr_OLED>
			break;
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2392:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    2394:	4a c2       	rjmp	.+1172   	; 0x282a <report+0xafa>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    2396:	ae 01       	movw	r20, r28
    2398:	45 52       	subi	r20, 0x25	; 37
    239a:	5d 4f       	sbci	r21, 0xFD	; 253
    239c:	be 01       	movw	r22, r28
    239e:	69 52       	subi	r22, 0x29	; 41
    23a0:	7d 4f       	sbci	r23, 0xFD	; 253
    23a2:	ce 01       	movw	r24, r28
    23a4:	8d 52       	subi	r24, 0x2D	; 45
    23a6:	9d 4f       	sbci	r25, 0xFD	; 253
    23a8:	0e 94 88 09 	call	0x1310	; 0x1310 <get_orientation>
			get_time(currenttime);
    23ac:	7e 01       	movw	r14, r28
    23ae:	9b ee       	ldi	r25, 0xEB	; 235
    23b0:	e9 1a       	sub	r14, r25
    23b2:	9e ef       	ldi	r25, 0xFE	; 254
    23b4:	f9 0a       	sbc	r15, r25
    23b6:	c7 01       	movw	r24, r14
    23b8:	0e 94 83 05 	call	0xb06	; 0xb06 <get_time>
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
    23bc:	24 e3       	ldi	r18, 0x34	; 52
    23be:	20 9f       	mul	r18, r16
    23c0:	c0 01       	movw	r24, r0
    23c2:	21 9f       	mul	r18, r17
    23c4:	90 0d       	add	r25, r0
    23c6:	11 24       	eor	r1, r1
    23c8:	8e 5c       	subi	r24, 0xCE	; 206
    23ca:	97 4d       	sbci	r25, 0xD7	; 215
    23cc:	9f 93       	push	r25
    23ce:	8f 93       	push	r24
    23d0:	c2 52       	subi	r28, 0x22	; 34
    23d2:	dd 4f       	sbci	r29, 0xFD	; 253
    23d4:	88 81       	ld	r24, Y
    23d6:	ce 5d       	subi	r28, 0xDE	; 222
    23d8:	d2 40       	sbci	r29, 0x02	; 2
    23da:	8f 93       	push	r24
    23dc:	c3 52       	subi	r28, 0x23	; 35
    23de:	dd 4f       	sbci	r29, 0xFD	; 253
    23e0:	88 81       	ld	r24, Y
    23e2:	cd 5d       	subi	r28, 0xDD	; 221
    23e4:	d2 40       	sbci	r29, 0x02	; 2
    23e6:	8f 93       	push	r24
    23e8:	c4 52       	subi	r28, 0x24	; 36
    23ea:	dd 4f       	sbci	r29, 0xFD	; 253
    23ec:	88 81       	ld	r24, Y
    23ee:	cc 5d       	subi	r28, 0xDC	; 220
    23f0:	d2 40       	sbci	r29, 0x02	; 2
    23f2:	8f 93       	push	r24
    23f4:	c5 52       	subi	r28, 0x25	; 37
    23f6:	dd 4f       	sbci	r29, 0xFD	; 253
    23f8:	88 81       	ld	r24, Y
    23fa:	cb 5d       	subi	r28, 0xDB	; 219
    23fc:	d2 40       	sbci	r29, 0x02	; 2
    23fe:	8f 93       	push	r24
    2400:	c6 52       	subi	r28, 0x26	; 38
    2402:	dd 4f       	sbci	r29, 0xFD	; 253
    2404:	88 81       	ld	r24, Y
    2406:	ca 5d       	subi	r28, 0xDA	; 218
    2408:	d2 40       	sbci	r29, 0x02	; 2
    240a:	8f 93       	push	r24
    240c:	c7 52       	subi	r28, 0x27	; 39
    240e:	dd 4f       	sbci	r29, 0xFD	; 253
    2410:	88 81       	ld	r24, Y
    2412:	c9 5d       	subi	r28, 0xD9	; 217
    2414:	d2 40       	sbci	r29, 0x02	; 2
    2416:	8f 93       	push	r24
    2418:	c8 52       	subi	r28, 0x28	; 40
    241a:	dd 4f       	sbci	r29, 0xFD	; 253
    241c:	88 81       	ld	r24, Y
    241e:	c8 5d       	subi	r28, 0xD8	; 216
    2420:	d2 40       	sbci	r29, 0x02	; 2
    2422:	8f 93       	push	r24
    2424:	c9 52       	subi	r28, 0x29	; 41
    2426:	dd 4f       	sbci	r29, 0xFD	; 253
    2428:	88 81       	ld	r24, Y
    242a:	c7 5d       	subi	r28, 0xD7	; 215
    242c:	d2 40       	sbci	r29, 0x02	; 2
    242e:	8f 93       	push	r24
    2430:	ca 52       	subi	r28, 0x2A	; 42
    2432:	dd 4f       	sbci	r29, 0xFD	; 253
    2434:	88 81       	ld	r24, Y
    2436:	c6 5d       	subi	r28, 0xD6	; 214
    2438:	d2 40       	sbci	r29, 0x02	; 2
    243a:	8f 93       	push	r24
    243c:	cb 52       	subi	r28, 0x2B	; 43
    243e:	dd 4f       	sbci	r29, 0xFD	; 253
    2440:	88 81       	ld	r24, Y
    2442:	c5 5d       	subi	r28, 0xD5	; 213
    2444:	d2 40       	sbci	r29, 0x02	; 2
    2446:	8f 93       	push	r24
    2448:	cc 52       	subi	r28, 0x2C	; 44
    244a:	dd 4f       	sbci	r29, 0xFD	; 253
    244c:	88 81       	ld	r24, Y
    244e:	c4 5d       	subi	r28, 0xD4	; 212
    2450:	d2 40       	sbci	r29, 0x02	; 2
    2452:	8f 93       	push	r24
    2454:	cd 52       	subi	r28, 0x2D	; 45
    2456:	dd 4f       	sbci	r29, 0xFD	; 253
    2458:	88 81       	ld	r24, Y
    245a:	c3 5d       	subi	r28, 0xD3	; 211
    245c:	d2 40       	sbci	r29, 0x02	; 2
    245e:	8f 93       	push	r24
    2460:	ff 92       	push	r15
    2462:	ef 92       	push	r14
    2464:	ce 01       	movw	r24, r28
    2466:	8a 51       	subi	r24, 0x1A	; 26
    2468:	9e 4f       	sbci	r25, 0xFE	; 254
    246a:	9f 93       	push	r25
    246c:	8f 93       	push	r24
    246e:	8e 01       	movw	r16, r28
    2470:	0f 5f       	subi	r16, 0xFF	; 255
    2472:	1f 4f       	sbci	r17, 0xFF	; 255
    2474:	1f 93       	push	r17
    2476:	0f 93       	push	r16
    2478:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			printLine(outbuf);
    247c:	c8 01       	movw	r24, r16
    247e:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
			writestr_OLED(1, "Orientation", 1);
    2482:	41 e0       	ldi	r20, 0x01	; 1
    2484:	69 ea       	ldi	r22, 0xA9	; 169
    2486:	79 e8       	ldi	r23, 0x89	; 137
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	0e 94 9a 0b 	call	0x1734	; 0x1734 <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    248e:	c2 52       	subi	r28, 0x22	; 34
    2490:	dd 4f       	sbci	r29, 0xFD	; 253
    2492:	88 81       	ld	r24, Y
    2494:	ce 5d       	subi	r28, 0xDE	; 222
    2496:	d2 40       	sbci	r29, 0x02	; 2
    2498:	8f 93       	push	r24
    249a:	c3 52       	subi	r28, 0x23	; 35
    249c:	dd 4f       	sbci	r29, 0xFD	; 253
    249e:	88 81       	ld	r24, Y
    24a0:	cd 5d       	subi	r28, 0xDD	; 221
    24a2:	d2 40       	sbci	r29, 0x02	; 2
    24a4:	8f 93       	push	r24
    24a6:	c4 52       	subi	r28, 0x24	; 36
    24a8:	dd 4f       	sbci	r29, 0xFD	; 253
    24aa:	88 81       	ld	r24, Y
    24ac:	cc 5d       	subi	r28, 0xDC	; 220
    24ae:	d2 40       	sbci	r29, 0x02	; 2
    24b0:	8f 93       	push	r24
    24b2:	c5 52       	subi	r28, 0x25	; 37
    24b4:	dd 4f       	sbci	r29, 0xFD	; 253
    24b6:	88 81       	ld	r24, Y
    24b8:	cb 5d       	subi	r28, 0xDB	; 219
    24ba:	d2 40       	sbci	r29, 0x02	; 2
    24bc:	8f 93       	push	r24
    24be:	c6 52       	subi	r28, 0x26	; 38
    24c0:	dd 4f       	sbci	r29, 0xFD	; 253
    24c2:	88 81       	ld	r24, Y
    24c4:	ca 5d       	subi	r28, 0xDA	; 218
    24c6:	d2 40       	sbci	r29, 0x02	; 2
    24c8:	8f 93       	push	r24
    24ca:	c7 52       	subi	r28, 0x27	; 39
    24cc:	dd 4f       	sbci	r29, 0xFD	; 253
    24ce:	88 81       	ld	r24, Y
    24d0:	c9 5d       	subi	r28, 0xD9	; 217
    24d2:	d2 40       	sbci	r29, 0x02	; 2
    24d4:	8f 93       	push	r24
    24d6:	c8 52       	subi	r28, 0x28	; 40
    24d8:	dd 4f       	sbci	r29, 0xFD	; 253
    24da:	88 81       	ld	r24, Y
    24dc:	c8 5d       	subi	r28, 0xD8	; 216
    24de:	d2 40       	sbci	r29, 0x02	; 2
    24e0:	8f 93       	push	r24
    24e2:	c9 52       	subi	r28, 0x29	; 41
    24e4:	dd 4f       	sbci	r29, 0xFD	; 253
    24e6:	88 81       	ld	r24, Y
    24e8:	c7 5d       	subi	r28, 0xD7	; 215
    24ea:	d2 40       	sbci	r29, 0x02	; 2
    24ec:	8f 93       	push	r24
    24ee:	ca 52       	subi	r28, 0x2A	; 42
    24f0:	dd 4f       	sbci	r29, 0xFD	; 253
    24f2:	88 81       	ld	r24, Y
    24f4:	c6 5d       	subi	r28, 0xD6	; 214
    24f6:	d2 40       	sbci	r29, 0x02	; 2
    24f8:	8f 93       	push	r24
    24fa:	cb 52       	subi	r28, 0x2B	; 43
    24fc:	dd 4f       	sbci	r29, 0xFD	; 253
    24fe:	88 81       	ld	r24, Y
    2500:	c5 5d       	subi	r28, 0xD5	; 213
    2502:	d2 40       	sbci	r29, 0x02	; 2
    2504:	8f 93       	push	r24
    2506:	cc 52       	subi	r28, 0x2C	; 44
    2508:	dd 4f       	sbci	r29, 0xFD	; 253
    250a:	88 81       	ld	r24, Y
    250c:	c4 5d       	subi	r28, 0xD4	; 212
    250e:	d2 40       	sbci	r29, 0x02	; 2
    2510:	8f 93       	push	r24
    2512:	cd 52       	subi	r28, 0x2D	; 45
    2514:	dd 4f       	sbci	r29, 0xFD	; 253
    2516:	88 81       	ld	r24, Y
    2518:	c3 5d       	subi	r28, 0xD3	; 211
    251a:	d2 40       	sbci	r29, 0x02	; 2
    251c:	8f 93       	push	r24
    251e:	ce 01       	movw	r24, r28
    2520:	8e 5f       	subi	r24, 0xFE	; 254
    2522:	9d 4f       	sbci	r25, 0xFD	; 253
    2524:	9f 93       	push	r25
    2526:	8f 93       	push	r24
    2528:	1f 93       	push	r17
    252a:	0f 93       	push	r16
    252c:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2530:	cd bf       	out	0x3d, r28	; 61
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	42 e0       	ldi	r20, 0x02	; 2
    2536:	b8 01       	movw	r22, r16
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	0e 94 9a 0b 	call	0x1734	; 0x1734 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    253e:	80 e0       	ldi	r24, 0x00	; 0
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			printLine(outbuf);
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    2540:	74 c1       	rjmp	.+744    	; 0x282a <report+0xafa>

		case 'p':
			get_time(currenttime);
    2542:	7e 01       	movw	r14, r28
    2544:	9b ee       	ldi	r25, 0xEB	; 235
    2546:	e9 1a       	sub	r14, r25
    2548:	9e ef       	ldi	r25, 0xFE	; 254
    254a:	f9 0a       	sbc	r15, r25
    254c:	c7 01       	movw	r24, r14
    254e:	0e 94 83 05 	call	0xb06	; 0xb06 <get_time>
			read_PNEUSensors(&shutter, &left, &right, &air);
    2552:	9e 01       	movw	r18, r28
    2554:	2c 5a       	subi	r18, 0xAC	; 172
    2556:	3e 4f       	sbci	r19, 0xFE	; 254
    2558:	ae 01       	movw	r20, r28
    255a:	4d 5a       	subi	r20, 0xAD	; 173
    255c:	5e 4f       	sbci	r21, 0xFE	; 254
    255e:	be 01       	movw	r22, r28
    2560:	6e 5a       	subi	r22, 0xAE	; 174
    2562:	7e 4f       	sbci	r23, 0xFE	; 254
    2564:	ce 01       	movw	r24, r28
    2566:	8f 5a       	subi	r24, 0xAF	; 175
    2568:	9e 4f       	sbci	r25, 0xFE	; 254
    256a:	0e 94 5f 0c 	call	0x18be	; 0x18be <read_PNEUSensors>
//			sprintf(outbuf, format_PNU, get_SPECID, currenttime, shutter, left, right, air, pcmd[cstack].cid);
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, format_PNU, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    256e:	24 e3       	ldi	r18, 0x34	; 52
    2570:	20 9f       	mul	r18, r16
    2572:	c0 01       	movw	r24, r0
    2574:	21 9f       	mul	r18, r17
    2576:	90 0d       	add	r25, r0
    2578:	11 24       	eor	r1, r1
    257a:	8e 5c       	subi	r24, 0xCE	; 206
    257c:	97 4d       	sbci	r25, 0xD7	; 215
    257e:	9f 93       	push	r25
    2580:	8f 93       	push	r24
    2582:	cc 5a       	subi	r28, 0xAC	; 172
    2584:	de 4f       	sbci	r29, 0xFE	; 254
    2586:	88 81       	ld	r24, Y
    2588:	c4 55       	subi	r28, 0x54	; 84
    258a:	d1 40       	sbci	r29, 0x01	; 1
    258c:	1f 92       	push	r1
    258e:	8f 93       	push	r24
    2590:	cd 5a       	subi	r28, 0xAD	; 173
    2592:	de 4f       	sbci	r29, 0xFE	; 254
    2594:	88 81       	ld	r24, Y
    2596:	c3 55       	subi	r28, 0x53	; 83
    2598:	d1 40       	sbci	r29, 0x01	; 1
    259a:	1f 92       	push	r1
    259c:	8f 93       	push	r24
    259e:	ce 5a       	subi	r28, 0xAE	; 174
    25a0:	de 4f       	sbci	r29, 0xFE	; 254
    25a2:	88 81       	ld	r24, Y
    25a4:	c2 55       	subi	r28, 0x52	; 82
    25a6:	d1 40       	sbci	r29, 0x01	; 1
    25a8:	1f 92       	push	r1
    25aa:	8f 93       	push	r24
    25ac:	cf 5a       	subi	r28, 0xAF	; 175
    25ae:	de 4f       	sbci	r29, 0xFE	; 254
    25b0:	88 81       	ld	r24, Y
    25b2:	c1 55       	subi	r28, 0x51	; 81
    25b4:	d1 40       	sbci	r29, 0x01	; 1
    25b6:	1f 92       	push	r1
    25b8:	8f 93       	push	r24
    25ba:	ff 92       	push	r15
    25bc:	ef 92       	push	r14
    25be:	ce 01       	movw	r24, r28
    25c0:	8c 5e       	subi	r24, 0xEC	; 236
    25c2:	9d 4f       	sbci	r25, 0xFD	; 253
    25c4:	9f 93       	push	r25
    25c6:	8f 93       	push	r24
    25c8:	8e 01       	movw	r16, r28
    25ca:	0f 5f       	subi	r16, 0xFF	; 255
    25cc:	1f 4f       	sbci	r17, 0xFF	; 255
    25ce:	1f 93       	push	r17
    25d0:	0f 93       	push	r16
    25d2:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
			printLine(outbuf);
    25d6:	c8 01       	movw	r24, r16
    25d8:	0e 94 88 03 	call	0x710	; 0x710 <printLine>

			sprintf(outbuf, dformat_PN1, left, right);
    25dc:	cd 5a       	subi	r28, 0xAD	; 173
    25de:	de 4f       	sbci	r29, 0xFE	; 254
    25e0:	88 81       	ld	r24, Y
    25e2:	c3 55       	subi	r28, 0x53	; 83
    25e4:	d1 40       	sbci	r29, 0x01	; 1
    25e6:	1f 92       	push	r1
    25e8:	8f 93       	push	r24
    25ea:	ce 5a       	subi	r28, 0xAE	; 174
    25ec:	de 4f       	sbci	r29, 0xFE	; 254
    25ee:	88 81       	ld	r24, Y
    25f0:	c2 55       	subi	r28, 0x52	; 82
    25f2:	d1 40       	sbci	r29, 0x01	; 1
    25f4:	1f 92       	push	r1
    25f6:	8f 93       	push	r24
    25f8:	ce 01       	movw	r24, r28
    25fa:	8f 5b       	subi	r24, 0xBF	; 191
    25fc:	9d 4f       	sbci	r25, 0xFD	; 253
    25fe:	9f 93       	push	r25
    2600:	8f 93       	push	r24
    2602:	1f 93       	push	r17
    2604:	0f 93       	push	r16
    2606:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
			writestr_OLED(1, outbuf, 1);
    260a:	41 e0       	ldi	r20, 0x01	; 1
    260c:	b8 01       	movw	r22, r16
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	0e 94 9a 0b 	call	0x1734	; 0x1734 <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2614:	cc 5a       	subi	r28, 0xAC	; 172
    2616:	de 4f       	sbci	r29, 0xFE	; 254
    2618:	88 81       	ld	r24, Y
    261a:	c4 55       	subi	r28, 0x54	; 84
    261c:	d1 40       	sbci	r29, 0x01	; 1
    261e:	1f 92       	push	r1
    2620:	8f 93       	push	r24
    2622:	cf 5a       	subi	r28, 0xAF	; 175
    2624:	de 4f       	sbci	r29, 0xFE	; 254
    2626:	88 81       	ld	r24, Y
    2628:	c1 55       	subi	r28, 0x51	; 81
    262a:	d1 40       	sbci	r29, 0x01	; 1
    262c:	1f 92       	push	r1
    262e:	8f 93       	push	r24
    2630:	ce 01       	movw	r24, r28
    2632:	8c 5a       	subi	r24, 0xAC	; 172
    2634:	9d 4f       	sbci	r25, 0xFD	; 253
    2636:	9f 93       	push	r25
    2638:	8f 93       	push	r24
    263a:	1f 93       	push	r17
    263c:	0f 93       	push	r16
    263e:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2642:	cd bf       	out	0x3d, r28	; 61
    2644:	de bf       	out	0x3e, r29	; 62
    2646:	42 e0       	ldi	r20, 0x02	; 2
    2648:	b8 01       	movw	r22, r16
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	0e 94 9a 0b 	call	0x1734	; 0x1734 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2650:	80 e0       	ldi	r24, 0x00	; 0

			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    2652:	eb c0       	rjmp	.+470    	; 0x282a <report+0xafa>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    2654:	7e 01       	movw	r14, r28
    2656:	9b ee       	ldi	r25, 0xEB	; 235
    2658:	e9 1a       	sub	r14, r25
    265a:	9e ef       	ldi	r25, 0xFE	; 254
    265c:	f9 0a       	sbc	r15, r25
    265e:	c7 01       	movw	r24, r14
    2660:	0e 94 83 05 	call	0xb06	; 0xb06 <get_time>
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
    2664:	6e 01       	movw	r12, r28
    2666:	87 ed       	ldi	r24, 0xD7	; 215
    2668:	c8 1a       	sub	r12, r24
    266a:	8e ef       	ldi	r24, 0xFE	; 254
    266c:	d8 0a       	sbc	r13, r24
    266e:	24 e1       	ldi	r18, 0x14	; 20
    2670:	a6 01       	movw	r20, r12
    2672:	60 e0       	ldi	r22, 0x00	; 0
    2674:	70 e0       	ldi	r23, 0x00	; 0
    2676:	80 e5       	ldi	r24, 0x50	; 80
    2678:	0e 94 8e 06 	call	0xd1c	; 0xd1c <read_FRAM>
			get_BOOTTIME(boottime);
    267c:	5e 01       	movw	r10, r28
    267e:	93 ec       	ldi	r25, 0xC3	; 195
    2680:	a9 1a       	sub	r10, r25
    2682:	9e ef       	ldi	r25, 0xFE	; 254
    2684:	b9 0a       	sbc	r11, r25
    2686:	c5 01       	movw	r24, r10
    2688:	0e 94 15 06 	call	0xc2a	; 0xc2a <get_BOOTTIME>
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    268c:	24 e3       	ldi	r18, 0x34	; 52
    268e:	20 9f       	mul	r18, r16
    2690:	c0 01       	movw	r24, r0
    2692:	21 9f       	mul	r18, r17
    2694:	90 0d       	add	r25, r0
    2696:	11 24       	eor	r1, r1
    2698:	8e 5c       	subi	r24, 0xCE	; 206
    269a:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
    269c:	9f 93       	push	r25
    269e:	8f 93       	push	r24
    26a0:	bf 92       	push	r11
    26a2:	af 92       	push	r10
    26a4:	df 92       	push	r13
    26a6:	cf 92       	push	r12
    26a8:	ff 92       	push	r15
    26aa:	ef 92       	push	r14
    26ac:	ce 01       	movw	r24, r28
    26ae:	89 59       	subi	r24, 0x99	; 153
    26b0:	9d 4f       	sbci	r25, 0xFD	; 253
    26b2:	9f 93       	push	r25
    26b4:	8f 93       	push	r24
    26b6:	8e 01       	movw	r16, r28
    26b8:	0f 5f       	subi	r16, 0xFF	; 255
    26ba:	1f 4f       	sbci	r17, 0xFF	; 255
    26bc:	1f 93       	push	r17
    26be:	0f 93       	push	r16
    26c0:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
    26c4:	c8 01       	movw	r24, r16
    26c6:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));

			writestr_OLED(1, "Time", 1);
    26ca:	41 e0       	ldi	r20, 0x01	; 1
    26cc:	65 eb       	ldi	r22, 0xB5	; 181
    26ce:	79 e8       	ldi	r23, 0x89	; 137
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	0e 94 9a 0b 	call	0x1734	; 0x1734 <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    26d6:	b7 01       	movw	r22, r14
    26d8:	65 5f       	subi	r22, 0xF5	; 245
    26da:	7f 4f       	sbci	r23, 0xFF	; 255
    26dc:	42 e0       	ldi	r20, 0x02	; 2
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	0e 94 9a 0b 	call	0x1734	; 0x1734 <writestr_OLED>
			break;
    26e4:	cd bf       	out	0x3d, r28	; 61
    26e6:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    26e8:	80 e0       	ldi	r24, 0x00	; 0
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));

			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    26ea:	9f c0       	rjmp	.+318    	; 0x282a <report+0xafa>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	0e 94 10 08 	call	0x1020	; 0x1020 <read_ionpump>
    26f2:	d6 2e       	mov	r13, r22
    26f4:	c7 2e       	mov	r12, r23
    26f6:	b8 2e       	mov	r11, r24
    26f8:	a9 2e       	mov	r10, r25
			bluvac = read_ionpump(BLUEPUMP);
    26fa:	82 e0       	ldi	r24, 0x02	; 2
    26fc:	0e 94 10 08 	call	0x1020	; 0x1020 <read_ionpump>
    2700:	96 2e       	mov	r9, r22
    2702:	87 2e       	mov	r8, r23
    2704:	78 2e       	mov	r7, r24
    2706:	69 2e       	mov	r6, r25
			get_time(currenttime);
    2708:	7e 01       	movw	r14, r28
    270a:	9b ee       	ldi	r25, 0xEB	; 235
    270c:	e9 1a       	sub	r14, r25
    270e:	9e ef       	ldi	r25, 0xFE	; 254
    2710:	f9 0a       	sbc	r15, r25
    2712:	c7 01       	movw	r24, r14
    2714:	0e 94 83 05 	call	0xb06	; 0xb06 <get_time>
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
    2718:	24 e3       	ldi	r18, 0x34	; 52
    271a:	20 9f       	mul	r18, r16
    271c:	c0 01       	movw	r24, r0
    271e:	21 9f       	mul	r18, r17
    2720:	90 0d       	add	r25, r0
    2722:	11 24       	eor	r1, r1
    2724:	8e 5c       	subi	r24, 0xCE	; 206
    2726:	97 4d       	sbci	r25, 0xD7	; 215
    2728:	9f 93       	push	r25
    272a:	8f 93       	push	r24
    272c:	6f 92       	push	r6
    272e:	7f 92       	push	r7
    2730:	8f 92       	push	r8
    2732:	9f 92       	push	r9
    2734:	af 92       	push	r10
    2736:	bf 92       	push	r11
    2738:	cf 92       	push	r12
    273a:	df 92       	push	r13
    273c:	ff 92       	push	r15
    273e:	ef 92       	push	r14
    2740:	ce 01       	movw	r24, r28
    2742:	80 58       	subi	r24, 0x80	; 128
    2744:	9d 4f       	sbci	r25, 0xFD	; 253
    2746:	9f 93       	push	r25
    2748:	8f 93       	push	r24
    274a:	8e 01       	movw	r16, r28
    274c:	0f 5f       	subi	r16, 0xFF	; 255
    274e:	1f 4f       	sbci	r17, 0xFF	; 255
    2750:	1f 93       	push	r17
    2752:	0f 93       	push	r16
    2754:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			printLine(outbuf);
    2758:	c8 01       	movw	r24, r16
    275a:	0e 94 88 03 	call	0x710	; 0x710 <printLine>

			writestr_OLED(1, "RedVac  BlueVac", 1);
    275e:	41 e0       	ldi	r20, 0x01	; 1
    2760:	6a eb       	ldi	r22, 0xBA	; 186
    2762:	79 e8       	ldi	r23, 0x89	; 137
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	0e 94 9a 0b 	call	0x1734	; 0x1734 <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    276a:	6f 92       	push	r6
    276c:	7f 92       	push	r7
    276e:	8f 92       	push	r8
    2770:	9f 92       	push	r9
    2772:	af 92       	push	r10
    2774:	bf 92       	push	r11
    2776:	cf 92       	push	r12
    2778:	df 92       	push	r13
    277a:	ce 01       	movw	r24, r28
    277c:	8b 55       	subi	r24, 0x5B	; 91
    277e:	9d 4f       	sbci	r25, 0xFD	; 253
    2780:	9f 93       	push	r25
    2782:	8f 93       	push	r24
    2784:	1f 93       	push	r17
    2786:	0f 93       	push	r16
    2788:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
			writestr_OLED(1, outbuf, 2);
    278c:	42 e0       	ldi	r20, 0x02	; 2
    278e:	b8 01       	movw	r22, r16
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	0e 94 9a 0b 	call	0x1734	; 0x1734 <writestr_OLED>
			break;
    2796:	cd bf       	out	0x3d, r28	; 61
    2798:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    279a:	80 e0       	ldi	r24, 0x00	; 0
			printLine(outbuf);

			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    279c:	46 c0       	rjmp	.+140    	; 0x282a <report+0xafa>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    279e:	6e 01       	movw	r12, r28
    27a0:	96 ef       	ldi	r25, 0xF6	; 246
    27a2:	c9 1a       	sub	r12, r25
    27a4:	9e ef       	ldi	r25, 0xFE	; 254
    27a6:	d9 0a       	sbc	r13, r25
    27a8:	c6 01       	movw	r24, r12
    27aa:	0e 94 1c 06 	call	0xc38	; 0xc38 <get_VERSION>
			get_time(currenttime);
    27ae:	7e 01       	movw	r14, r28
    27b0:	8b ee       	ldi	r24, 0xEB	; 235
    27b2:	e8 1a       	sub	r14, r24
    27b4:	8e ef       	ldi	r24, 0xFE	; 254
    27b6:	f8 0a       	sbc	r15, r24
    27b8:	c7 01       	movw	r24, r14
    27ba:	0e 94 83 05 	call	0xb06	; 0xb06 <get_time>
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
    27be:	24 e3       	ldi	r18, 0x34	; 52
    27c0:	20 9f       	mul	r18, r16
    27c2:	c0 01       	movw	r24, r0
    27c4:	21 9f       	mul	r18, r17
    27c6:	90 0d       	add	r25, r0
    27c8:	11 24       	eor	r1, r1
    27ca:	8e 5c       	subi	r24, 0xCE	; 206
    27cc:	97 4d       	sbci	r25, 0xD7	; 215
    27ce:	9f 93       	push	r25
    27d0:	8f 93       	push	r24
    27d2:	df 92       	push	r13
    27d4:	cf 92       	push	r12
    27d6:	ff 92       	push	r15
    27d8:	ef 92       	push	r14
    27da:	ce 01       	movw	r24, r28
    27dc:	8e 54       	subi	r24, 0x4E	; 78
    27de:	9d 4f       	sbci	r25, 0xFD	; 253
    27e0:	9f 93       	push	r25
    27e2:	8f 93       	push	r24
    27e4:	8e 01       	movw	r16, r28
    27e6:	0f 5f       	subi	r16, 0xFF	; 255
    27e8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ea:	1f 93       	push	r17
    27ec:	0f 93       	push	r16
    27ee:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			printLine(outbuf);
    27f2:	c8 01       	movw	r24, r16
    27f4:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
			writestr_OLED(1, "specMech Version", 1);
    27f8:	41 e0       	ldi	r20, 0x01	; 1
    27fa:	65 ec       	ldi	r22, 0xC5	; 197
    27fc:	78 e8       	ldi	r23, 0x88	; 136
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	0e 94 9a 0b 	call	0x1734	; 0x1734 <writestr_OLED>
			get_VERSION(outbuf);
    2804:	c8 01       	movw	r24, r16
    2806:	0e 94 1c 06 	call	0xc38	; 0xc38 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    280a:	42 e0       	ldi	r20, 0x02	; 2
    280c:	b8 01       	movw	r22, r16
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	0e 94 9a 0b 	call	0x1734	; 0x1734 <writestr_OLED>
			break;
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2818:	80 e0       	ldi	r24, 0x00	; 0
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			printLine(outbuf);
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    281a:	07 c0       	rjmp	.+14     	; 0x282a <report+0xafa>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    281c:	6a ec       	ldi	r22, 0xCA	; 202
    281e:	79 e8       	ldi	r23, 0x89	; 137
    2820:	8a ec       	ldi	r24, 0xCA	; 202
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
			return(ERROR);
    2828:	83 e6       	ldi	r24, 0x63	; 99
			break;
	}

	return(NOERROR);

}
    282a:	c6 51       	subi	r28, 0x16	; 22
    282c:	dd 4f       	sbci	r29, 0xFD	; 253
    282e:	cd bf       	out	0x3d, r28	; 61
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	df 91       	pop	r29
    2834:	cf 91       	pop	r28
    2836:	1f 91       	pop	r17
    2838:	0f 91       	pop	r16
    283a:	ff 90       	pop	r15
    283c:	ef 90       	pop	r14
    283e:	df 90       	pop	r13
    2840:	cf 90       	pop	r12
    2842:	bf 90       	pop	r11
    2844:	af 90       	pop	r10
    2846:	9f 90       	pop	r9
    2848:	8f 90       	pop	r8
    284a:	7f 90       	pop	r7
    284c:	6f 90       	pop	r6
    284e:	5f 90       	pop	r5
    2850:	4f 90       	pop	r4
    2852:	3f 90       	pop	r3
    2854:	2f 90       	pop	r2
    2856:	08 95       	ret

00002858 <crc16>:

	Returns:
		The CRC16 value as an unsigned 16-bit word
------------------------------------------------------------------------------*/
uint16_t crc16(uint8_t *packet, uint16_t nBytes)
{
    2858:	dc 01       	movw	r26, r24

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    285a:	40 e0       	ldi	r20, 0x00	; 0
    285c:	50 e0       	ldi	r21, 0x00	; 0
------------------------------------------------------------------------------*/
uint16_t crc16(uint8_t *packet, uint16_t nBytes)
{

	uint8_t bit;
	uint16_t crc = 0;
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	90 e0       	ldi	r25, 0x00	; 0
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    2862:	1b c0       	rjmp	.+54     	; 0x289a <crc16+0x42>
		crc = crc ^ ((uint16_t) packet[byte] << 8);
    2864:	fd 01       	movw	r30, r26
    2866:	e4 0f       	add	r30, r20
    2868:	f5 1f       	adc	r31, r21
    286a:	20 81       	ld	r18, Z
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	32 2f       	mov	r19, r18
    2870:	22 27       	eor	r18, r18
    2872:	82 27       	eor	r24, r18
    2874:	93 27       	eor	r25, r19
		for (bit = 0; bit < 8; bit++) {
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	0c c0       	rjmp	.+24     	; 0x2892 <crc16+0x3a>
			if (crc & 0x8000) {
    287a:	99 23       	and	r25, r25
    287c:	3c f4       	brge	.+14     	; 0x288c <crc16+0x34>
				crc = (crc << 1) ^ 0x1021;
    287e:	88 0f       	add	r24, r24
    2880:	99 1f       	adc	r25, r25
    2882:	31 e2       	ldi	r19, 0x21	; 33
    2884:	83 27       	eor	r24, r19
    2886:	30 e1       	ldi	r19, 0x10	; 16
    2888:	93 27       	eor	r25, r19
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <crc16+0x38>
			} else {
				crc = crc << 1;
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
		crc = crc ^ ((uint16_t) packet[byte] << 8);
		for (bit = 0; bit < 8; bit++) {
    2890:	2f 5f       	subi	r18, 0xFF	; 255
    2892:	28 30       	cpi	r18, 0x08	; 8
    2894:	90 f3       	brcs	.-28     	; 0x287a <crc16+0x22>

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    2896:	4f 5f       	subi	r20, 0xFF	; 255
    2898:	5f 4f       	sbci	r21, 0xFF	; 255
    289a:	46 17       	cp	r20, r22
    289c:	57 07       	cpc	r21, r23
    289e:	10 f3       	brcs	.-60     	; 0x2864 <crc16+0xc>
				crc = crc << 1;
			}
		}
	}
	return (crc);
}
    28a0:	08 95       	ret

000028a2 <get_MOTOREncoder>:
			Bit1: Direction (0=forward, 1-backwards)
			Bit2: Counter overflow (1=overflow occurred, clear after reading)
			Bits 3-7 are "reserved." Bit7 is 1.
------------------------------------------------------------------------------*/
uint8_t get_MOTOREncoder(uint8_t controller, uint8_t command, int32_t *value)
{
    28a2:	ef 92       	push	r14
    28a4:	ff 92       	push	r15
    28a6:	0f 93       	push	r16
    28a8:	1f 93       	push	r17
    28aa:	cf 93       	push	r28
    28ac:	df 93       	push	r29
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	27 97       	sbiw	r28, 0x07	; 7
    28b4:	cd bf       	out	0x3d, r28	; 61
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	8a 01       	movw	r16, r20
	uint8_t i, tbuf[7];
	uint16_t crcReceived, crcExpected;

	recv1_buf.nbytes = 7;			// Set up reply buffer
    28ba:	97 e0       	ldi	r25, 0x07	; 7
    28bc:	90 93 17 2b 	sts	0x2B17, r25	; 0x802b17 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    28c0:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x103>
	recv1_buf.done = NO;
    28c4:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv1_buf+0x104>

	tbuf[0] = controller;
    28c8:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    28ca:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);			// Send the command
    28cc:	42 e0       	ldi	r20, 0x02	; 2
    28ce:	be 01       	movw	r22, r28
    28d0:	6f 5f       	subi	r22, 0xFF	; 255
    28d2:	7f 4f       	sbci	r23, 0xFF	; 255
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	0e 94 ac 19 	call	0x3358	; 0x3358 <send_USART>

	start_TCB0(1);
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	0e 94 86 18 	call	0x310c	; 0x310c <start_TCB0>
	while (recv1_buf.done == NO) {	// Wait for the reply
    28e2:	11 c0       	rjmp	.+34     	; 0x2906 <get_MOTOREncoder+0x64>
		asm("nop");
    28e4:	00 00       	nop
		if (ticks > 50) {			// Timeout
    28e6:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    28ea:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    28ee:	c3 97       	sbiw	r24, 0x33	; 51
    28f0:	50 f0       	brcs	.+20     	; 0x2906 <get_MOTOREncoder+0x64>
			stop_TCB0();
    28f2:	0e 94 9c 18 	call	0x3138	; 0x3138 <stop_TCB0>
			printError(ERR_MTRREADENC, "get_MOTOREncoder timeout");
    28f6:	6b e4       	ldi	r22, 0x4B	; 75
    28f8:	7b e8       	ldi	r23, 0x8B	; 139
    28fa:	80 e3       	ldi	r24, 0x30	; 48
    28fc:	91 e0       	ldi	r25, 0x01	; 1
    28fe:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
			return(ERROR);
    2902:	83 e6       	ldi	r24, 0x63	; 99
    2904:	74 c0       	rjmp	.+232    	; 0x29ee <get_MOTOREncoder+0x14c>
	tbuf[0] = controller;
	tbuf[1] = command;
	send_USART(1, tbuf, 2);			// Send the command

	start_TCB0(1);
	while (recv1_buf.done == NO) {	// Wait for the reply
    2906:	80 91 1a 2b 	lds	r24, 0x2B1A	; 0x802b1a <recv1_buf+0x104>
    290a:	88 23       	and	r24, r24
    290c:	59 f3       	breq	.-42     	; 0x28e4 <get_MOTOREncoder+0x42>
			stop_TCB0();
			printError(ERR_MTRREADENC, "get_MOTOREncoder timeout");
			return(ERROR);
		}
	}
	stop_TCB0();
    290e:	0e 94 9c 18 	call	0x3138	; 0x3138 <stop_TCB0>

	crcReceived = (recv1_buf.data[5] << 8) | recv1_buf.data[6];
    2912:	e6 e1       	ldi	r30, 0x16	; 22
    2914:	fa e2       	ldi	r31, 0x2A	; 42
    2916:	e5 80       	ldd	r14, Z+5	; 0x05
    2918:	f1 2c       	mov	r15, r1
    291a:	fe 2c       	mov	r15, r14
    291c:	ee 24       	eor	r14, r14
    291e:	86 81       	ldd	r24, Z+6	; 0x06
    2920:	e8 2a       	or	r14, r24

	for (i = 2; i < 7; i++) {		// Compute expected crc value
    2922:	22 e0       	ldi	r18, 0x02	; 2
    2924:	0e c0       	rjmp	.+28     	; 0x2942 <get_MOTOREncoder+0xa0>
		tbuf[i] = recv1_buf.data[i-2];
    2926:	82 2f       	mov	r24, r18
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	fc 01       	movw	r30, r24
    292c:	ec 5e       	subi	r30, 0xEC	; 236
    292e:	f5 4d       	sbci	r31, 0xD5	; 213
    2930:	30 81       	ld	r19, Z
    2932:	e1 e0       	ldi	r30, 0x01	; 1
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	ec 0f       	add	r30, r28
    2938:	fd 1f       	adc	r31, r29
    293a:	e8 0f       	add	r30, r24
    293c:	f9 1f       	adc	r31, r25
    293e:	30 83       	st	Z, r19
	}
	stop_TCB0();

	crcReceived = (recv1_buf.data[5] << 8) | recv1_buf.data[6];

	for (i = 2; i < 7; i++) {		// Compute expected crc value
    2940:	2f 5f       	subi	r18, 0xFF	; 255
    2942:	27 30       	cpi	r18, 0x07	; 7
    2944:	80 f3       	brcs	.-32     	; 0x2926 <get_MOTOREncoder+0x84>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 7);
    2946:	67 e0       	ldi	r22, 0x07	; 7
    2948:	70 e0       	ldi	r23, 0x00	; 0
    294a:	ce 01       	movw	r24, r28
    294c:	01 96       	adiw	r24, 0x01	; 1
    294e:	0e 94 2c 14 	call	0x2858	; 0x2858 <crc16>

	if (crcReceived != crcExpected) {
    2952:	e8 16       	cp	r14, r24
    2954:	f9 06       	cpc	r15, r25
    2956:	71 f0       	breq	.+28     	; 0x2974 <get_MOTOREncoder+0xd2>
		*value = 0;
    2958:	d8 01       	movw	r26, r16
    295a:	1d 92       	st	X+, r1
    295c:	1d 92       	st	X+, r1
    295e:	1d 92       	st	X+, r1
    2960:	1c 92       	st	X, r1
    2962:	13 97       	sbiw	r26, 0x03	; 3
		printError(ERR_MTRENCCRC, "get_MOTOREncoder CRC");
    2964:	64 e6       	ldi	r22, 0x64	; 100
    2966:	7b e8       	ldi	r23, 0x8B	; 139
    2968:	81 e3       	ldi	r24, 0x31	; 49
    296a:	91 e0       	ldi	r25, 0x01	; 1
    296c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
		return(ERROR);
    2970:	83 e6       	ldi	r24, 0x63	; 99
    2972:	3d c0       	rjmp	.+122    	; 0x29ee <get_MOTOREncoder+0x14c>
	}

	*value =  (uint32_t) recv1_buf.data[0] << 24;
    2974:	26 e1       	ldi	r18, 0x16	; 22
    2976:	3a e2       	ldi	r19, 0x2A	; 42
    2978:	f9 01       	movw	r30, r18
    297a:	80 81       	ld	r24, Z
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	a0 e0       	ldi	r26, 0x00	; 0
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	78 2f       	mov	r23, r24
    2984:	66 27       	eor	r22, r22
    2986:	55 27       	eor	r21, r21
    2988:	44 27       	eor	r20, r20
    298a:	d8 01       	movw	r26, r16
    298c:	4d 93       	st	X+, r20
    298e:	5d 93       	st	X+, r21
    2990:	6d 93       	st	X+, r22
    2992:	7c 93       	st	X, r23
    2994:	13 97       	sbiw	r26, 0x03	; 3
	*value |= (uint32_t) recv1_buf.data[1] << 16;
    2996:	91 81       	ldd	r25, Z+1	; 0x01
    2998:	89 2f       	mov	r24, r25
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	a0 e0       	ldi	r26, 0x00	; 0
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	dc 01       	movw	r26, r24
    29a2:	99 27       	eor	r25, r25
    29a4:	88 27       	eor	r24, r24
    29a6:	84 2b       	or	r24, r20
    29a8:	95 2b       	or	r25, r21
    29aa:	a6 2b       	or	r26, r22
    29ac:	b7 2b       	or	r27, r23
    29ae:	f8 01       	movw	r30, r16
    29b0:	80 83       	st	Z, r24
    29b2:	91 83       	std	Z+1, r25	; 0x01
    29b4:	a2 83       	std	Z+2, r26	; 0x02
    29b6:	b3 83       	std	Z+3, r27	; 0x03
	*value |= (uint32_t) recv1_buf.data[2] << 8;
    29b8:	f9 01       	movw	r30, r18
    29ba:	42 81       	ldd	r20, Z+2	; 0x02
    29bc:	50 e0       	ldi	r21, 0x00	; 0
    29be:	60 e0       	ldi	r22, 0x00	; 0
    29c0:	70 e0       	ldi	r23, 0x00	; 0
    29c2:	76 2f       	mov	r23, r22
    29c4:	65 2f       	mov	r22, r21
    29c6:	54 2f       	mov	r21, r20
    29c8:	44 27       	eor	r20, r20
    29ca:	84 2b       	or	r24, r20
    29cc:	95 2b       	or	r25, r21
    29ce:	a6 2b       	or	r26, r22
    29d0:	b7 2b       	or	r27, r23
    29d2:	f8 01       	movw	r30, r16
    29d4:	80 83       	st	Z, r24
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	a2 83       	std	Z+2, r26	; 0x02
    29da:	b3 83       	std	Z+3, r27	; 0x03
	*value |= (uint32_t) recv1_buf.data[3];
    29dc:	f9 01       	movw	r30, r18
    29de:	23 81       	ldd	r18, Z+3	; 0x03
    29e0:	82 2b       	or	r24, r18
    29e2:	f8 01       	movw	r30, r16
    29e4:	80 83       	st	Z, r24
    29e6:	91 83       	std	Z+1, r25	; 0x01
    29e8:	a2 83       	std	Z+2, r26	; 0x02
    29ea:	b3 83       	std	Z+3, r27	; 0x03

//	status = recv1_buf.data[4];

	return(NOERROR);
    29ec:	80 e0       	ldi	r24, 0x00	; 0

}
    29ee:	27 96       	adiw	r28, 0x07	; 7
    29f0:	cd bf       	out	0x3d, r28	; 61
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	df 91       	pop	r29
    29f6:	cf 91       	pop	r28
    29f8:	1f 91       	pop	r17
    29fa:	0f 91       	pop	r16
    29fc:	ff 90       	pop	r15
    29fe:	ef 90       	pop	r14
    2a00:	08 95       	ret

00002a02 <get_MOTORFloat>:
	Returns:
		ERROR: USART timeout or CRC check error
		NOERROR
------------------------------------------------------------------------------*/
uint8_t get_MOTORFloat(uint8_t controller, uint8_t command, float *value)
{
    2a02:	af 92       	push	r10
    2a04:	bf 92       	push	r11
    2a06:	cf 92       	push	r12
    2a08:	df 92       	push	r13
    2a0a:	ef 92       	push	r14
    2a0c:	ff 92       	push	r15
    2a0e:	0f 93       	push	r16
    2a10:	1f 93       	push	r17
    2a12:	cf 93       	push	r28
    2a14:	df 93       	push	r29
    2a16:	00 d0       	rcall	.+0      	; 0x2a18 <get_MOTORFloat+0x16>
    2a18:	00 d0       	rcall	.+0      	; 0x2a1a <get_MOTORFloat+0x18>
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
    2a1e:	a8 2e       	mov	r10, r24
    2a20:	b6 2e       	mov	r11, r22
    2a22:	7a 01       	movw	r14, r20
	uint8_t tbuf[4];
	uint16_t tempval, crcReceived, crcExpected;

	recv1_buf.nbytes = 4;				// Set up receive buffer
    2a24:	84 e0       	ldi	r24, 0x04	; 4
    2a26:	80 93 17 2b 	sts	0x2B17, r24	; 0x802b17 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2a2a:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2a2e:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv1_buf+0x104>

	tbuf[0] = controller;
    2a32:	a9 82       	std	Y+1, r10	; 0x01
	tbuf[1] = command;
    2a34:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);				// Send command
    2a36:	42 e0       	ldi	r20, 0x02	; 2
    2a38:	be 01       	movw	r22, r28
    2a3a:	6f 5f       	subi	r22, 0xFF	; 255
    2a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	0e 94 ac 19 	call	0x3358	; 0x3358 <send_USART>

	start_TCB0(1);
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	0e 94 86 18 	call	0x310c	; 0x310c <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
    2a4c:	80 91 1a 2b 	lds	r24, 0x2B1A	; 0x802b1a <recv1_buf+0x104>
    2a50:	81 30       	cpi	r24, 0x01	; 1
    2a52:	81 f0       	breq	.+32     	; 0x2a74 <get_MOTORFloat+0x72>
			break;
		}
		if (ticks > 50) {				// Timeout
    2a54:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    2a58:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    2a5c:	c3 97       	sbiw	r24, 0x33	; 51
    2a5e:	b0 f3       	brcs	.-20     	; 0x2a4c <get_MOTORFloat+0x4a>
			stop_TCB0();
    2a60:	0e 94 9c 18 	call	0x3138	; 0x3138 <stop_TCB0>
			printError(ERR_MTRREADENC, "ROBOFloat timeout");
    2a64:	69 e7       	ldi	r22, 0x79	; 121
    2a66:	7b e8       	ldi	r23, 0x8B	; 139
    2a68:	80 e3       	ldi	r24, 0x30	; 48
    2a6a:	91 e0       	ldi	r25, 0x01	; 1
    2a6c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
			return(ERROR);
    2a70:	83 e6       	ldi	r24, 0x63	; 99
    2a72:	37 c0       	rjmp	.+110    	; 0x2ae2 <get_MOTORFloat+0xe0>
		}
	}
	stop_TCB0();
    2a74:	0e 94 9c 18 	call	0x3138	; 0x3138 <stop_TCB0>

	tempval = (recv1_buf.data[0] << 8) | recv1_buf.data[1];
    2a78:	e6 e1       	ldi	r30, 0x16	; 22
    2a7a:	fa e2       	ldi	r31, 0x2A	; 42
    2a7c:	90 81       	ld	r25, Z
    2a7e:	c9 2e       	mov	r12, r25
    2a80:	d1 2c       	mov	r13, r1
    2a82:	dc 2c       	mov	r13, r12
    2a84:	cc 24       	eor	r12, r12
    2a86:	81 81       	ldd	r24, Z+1	; 0x01
    2a88:	c8 2a       	or	r12, r24
	crcReceived = (recv1_buf.data[2] << 8) | recv1_buf.data[3];
    2a8a:	02 81       	ldd	r16, Z+2	; 0x02
    2a8c:	10 e0       	ldi	r17, 0x00	; 0
    2a8e:	10 2f       	mov	r17, r16
    2a90:	00 27       	eor	r16, r16
    2a92:	23 81       	ldd	r18, Z+3	; 0x03
    2a94:	02 2b       	or	r16, r18

	tbuf[0] = controller;
    2a96:	a9 82       	std	Y+1, r10	; 0x01
	tbuf[1] = command;
    2a98:	ba 82       	std	Y+2, r11	; 0x02
	tbuf[2] = recv1_buf.data[0];
    2a9a:	9b 83       	std	Y+3, r25	; 0x03
	tbuf[3] = recv1_buf.data[1];
    2a9c:	8c 83       	std	Y+4, r24	; 0x04
	crcExpected = crc16(tbuf, 4);
    2a9e:	64 e0       	ldi	r22, 0x04	; 4
    2aa0:	70 e0       	ldi	r23, 0x00	; 0
    2aa2:	ce 01       	movw	r24, r28
    2aa4:	01 96       	adiw	r24, 0x01	; 1
    2aa6:	0e 94 2c 14 	call	0x2858	; 0x2858 <crc16>

	if (crcExpected != crcReceived) {
    2aaa:	08 17       	cp	r16, r24
    2aac:	19 07       	cpc	r17, r25
    2aae:	41 f0       	breq	.+16     	; 0x2ac0 <get_MOTORFloat+0xbe>
		printError(ERR_MTRENCCRC, "get_MOTORFloat CRC");
    2ab0:	6b e8       	ldi	r22, 0x8B	; 139
    2ab2:	7b e8       	ldi	r23, 0x8B	; 139
    2ab4:	81 e3       	ldi	r24, 0x31	; 49
    2ab6:	91 e0       	ldi	r25, 0x01	; 1
    2ab8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
		return(ERROR);
    2abc:	83 e6       	ldi	r24, 0x63	; 99
    2abe:	11 c0       	rjmp	.+34     	; 0x2ae2 <get_MOTORFloat+0xe0>
	} else {
		*value = ((float) tempval / 10.0);
    2ac0:	b6 01       	movw	r22, r12
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	0e 94 85 1c 	call	0x390a	; 0x390a <__floatunsisf>
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	40 e2       	ldi	r20, 0x20	; 32
    2ad0:	51 e4       	ldi	r21, 0x41	; 65
    2ad2:	0e 94 13 1c 	call	0x3826	; 0x3826 <__divsf3>
    2ad6:	f7 01       	movw	r30, r14
    2ad8:	60 83       	st	Z, r22
    2ada:	71 83       	std	Z+1, r23	; 0x01
    2adc:	82 83       	std	Z+2, r24	; 0x02
    2ade:	93 83       	std	Z+3, r25	; 0x03
		return(NOERROR);
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2ae2:	24 96       	adiw	r28, 0x04	; 4
    2ae4:	cd bf       	out	0x3d, r28	; 61
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	df 91       	pop	r29
    2aea:	cf 91       	pop	r28
    2aec:	1f 91       	pop	r17
    2aee:	0f 91       	pop	r16
    2af0:	ff 90       	pop	r15
    2af2:	ef 90       	pop	r14
    2af4:	df 90       	pop	r13
    2af6:	cf 90       	pop	r12
    2af8:	bf 90       	pop	r11
    2afa:	af 90       	pop	r10
    2afc:	08 95       	ret

00002afe <get_MOTORInt32>:
	Returns:
		ERROR: USART timeout or CRC error
		NOERROR
------------------------------------------------------------------------------*/
uint8_t get_MOTORInt32(uint8_t controller, uint8_t command, uint32_t *value)
{
    2afe:	ef 92       	push	r14
    2b00:	ff 92       	push	r15
    2b02:	0f 93       	push	r16
    2b04:	1f 93       	push	r17
    2b06:	cf 93       	push	r28
    2b08:	df 93       	push	r29
    2b0a:	cd b7       	in	r28, 0x3d	; 61
    2b0c:	de b7       	in	r29, 0x3e	; 62
    2b0e:	26 97       	sbiw	r28, 0x06	; 6
    2b10:	cd bf       	out	0x3d, r28	; 61
    2b12:	de bf       	out	0x3e, r29	; 62
    2b14:	8a 01       	movw	r16, r20
	uint8_t i, tbuf[6];
	uint16_t crcReceived, crcExpected;
	uint32_t tempval;

	recv1_buf.nbytes = 6;				// Set up receive buffer
    2b16:	96 e0       	ldi	r25, 0x06	; 6
    2b18:	90 93 17 2b 	sts	0x2B17, r25	; 0x802b17 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2b1c:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2b20:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv1_buf+0x104>

	tbuf[0] = controller;
    2b24:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    2b26:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);				// Send command
    2b28:	42 e0       	ldi	r20, 0x02	; 2
    2b2a:	be 01       	movw	r22, r28
    2b2c:	6f 5f       	subi	r22, 0xFF	; 255
    2b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	0e 94 ac 19 	call	0x3358	; 0x3358 <send_USART>

	start_TCB0(1);
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	0e 94 86 18 	call	0x310c	; 0x310c <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
    2b3e:	80 91 1a 2b 	lds	r24, 0x2B1A	; 0x802b1a <recv1_buf+0x104>
    2b42:	81 30       	cpi	r24, 0x01	; 1
    2b44:	61 f4       	brne	.+24     	; 0x2b5e <get_MOTORInt32+0x60>
			stop_TCB0();
    2b46:	0e 94 9c 18 	call	0x3138	; 0x3138 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "get_MOTORInt32 timeout");
			return(ERROR);
		}
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];
    2b4a:	e6 e1       	ldi	r30, 0x16	; 22
    2b4c:	fa e2       	ldi	r31, 0x2A	; 42
    2b4e:	e4 80       	ldd	r14, Z+4	; 0x04
    2b50:	f1 2c       	mov	r15, r1
    2b52:	fe 2c       	mov	r15, r14
    2b54:	ee 24       	eor	r14, r14
    2b56:	85 81       	ldd	r24, Z+5	; 0x05
    2b58:	e8 2a       	or	r14, r24

	for (i = 2; i < 6; i++) {			// Compute expected CRC
    2b5a:	22 e0       	ldi	r18, 0x02	; 2
    2b5c:	1e c0       	rjmp	.+60     	; 0x2b9a <get_MOTORInt32+0x9c>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// Timeout
    2b5e:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    2b62:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    2b66:	c3 97       	sbiw	r24, 0x33	; 51
    2b68:	50 f3       	brcs	.-44     	; 0x2b3e <get_MOTORInt32+0x40>
			stop_TCB0();
    2b6a:	0e 94 9c 18 	call	0x3138	; 0x3138 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "get_MOTORInt32 timeout");
    2b6e:	6e e9       	ldi	r22, 0x9E	; 158
    2b70:	7b e8       	ldi	r23, 0x8B	; 139
    2b72:	8f e2       	ldi	r24, 0x2F	; 47
    2b74:	91 e0       	ldi	r25, 0x01	; 1
    2b76:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
			return(ERROR);
    2b7a:	83 e6       	ldi	r24, 0x63	; 99
    2b7c:	54 c0       	rjmp	.+168    	; 0x2c26 <get_MOTORInt32+0x128>
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {			// Compute expected CRC
		tbuf[i] = recv1_buf.data[i-2];
    2b7e:	82 2f       	mov	r24, r18
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	fc 01       	movw	r30, r24
    2b84:	ec 5e       	subi	r30, 0xEC	; 236
    2b86:	f5 4d       	sbci	r31, 0xD5	; 213
    2b88:	30 81       	ld	r19, Z
    2b8a:	e1 e0       	ldi	r30, 0x01	; 1
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	ec 0f       	add	r30, r28
    2b90:	fd 1f       	adc	r31, r29
    2b92:	e8 0f       	add	r30, r24
    2b94:	f9 1f       	adc	r31, r25
    2b96:	30 83       	st	Z, r19
		}
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {			// Compute expected CRC
    2b98:	2f 5f       	subi	r18, 0xFF	; 255
    2b9a:	26 30       	cpi	r18, 0x06	; 6
    2b9c:	80 f3       	brcs	.-32     	; 0x2b7e <get_MOTORInt32+0x80>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 6);
    2b9e:	66 e0       	ldi	r22, 0x06	; 6
    2ba0:	70 e0       	ldi	r23, 0x00	; 0
    2ba2:	ce 01       	movw	r24, r28
    2ba4:	01 96       	adiw	r24, 0x01	; 1
    2ba6:	0e 94 2c 14 	call	0x2858	; 0x2858 <crc16>

	if (crcReceived != crcExpected) {
    2baa:	e8 16       	cp	r14, r24
    2bac:	f9 06       	cpc	r15, r25
    2bae:	89 f0       	breq	.+34     	; 0x2bd2 <get_MOTORInt32+0xd4>
		printError(ERR_MTRENCCRC, "get_MOTORInt32 CRC error");
    2bb0:	65 eb       	ldi	r22, 0xB5	; 181
    2bb2:	7b e8       	ldi	r23, 0x8B	; 139
    2bb4:	81 e3       	ldi	r24, 0x31	; 49
    2bb6:	91 e0       	ldi	r25, 0x01	; 1
    2bb8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
		*value = 0x7FFFFFFF;
    2bbc:	8f ef       	ldi	r24, 0xFF	; 255
    2bbe:	9f ef       	ldi	r25, 0xFF	; 255
    2bc0:	af ef       	ldi	r26, 0xFF	; 255
    2bc2:	bf e7       	ldi	r27, 0x7F	; 127
    2bc4:	f8 01       	movw	r30, r16
    2bc6:	80 83       	st	Z, r24
    2bc8:	91 83       	std	Z+1, r25	; 0x01
    2bca:	a2 83       	std	Z+2, r26	; 0x02
    2bcc:	b3 83       	std	Z+3, r27	; 0x03
		return(ERROR);
    2bce:	83 e6       	ldi	r24, 0x63	; 99
    2bd0:	2a c0       	rjmp	.+84     	; 0x2c26 <get_MOTORInt32+0x128>
	}

	tempval =  (uint32_t) recv1_buf.data[0] << 24;
    2bd2:	e6 e1       	ldi	r30, 0x16	; 22
    2bd4:	fa e2       	ldi	r31, 0x2A	; 42
    2bd6:	80 81       	ld	r24, Z
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	a0 e0       	ldi	r26, 0x00	; 0
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	78 2f       	mov	r23, r24
    2be0:	66 27       	eor	r22, r22
    2be2:	55 27       	eor	r21, r21
    2be4:	44 27       	eor	r20, r20
	tempval |= (uint32_t) recv1_buf.data[1] << 16;
    2be6:	91 81       	ldd	r25, Z+1	; 0x01
    2be8:	89 2f       	mov	r24, r25
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	a0 e0       	ldi	r26, 0x00	; 0
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	99 27       	eor	r25, r25
    2bf4:	88 27       	eor	r24, r24
    2bf6:	84 2b       	or	r24, r20
    2bf8:	95 2b       	or	r25, r21
    2bfa:	a6 2b       	or	r26, r22
    2bfc:	b7 2b       	or	r27, r23
	tempval |= (uint32_t) recv1_buf.data[2] << 8;
    2bfe:	42 81       	ldd	r20, Z+2	; 0x02
    2c00:	50 e0       	ldi	r21, 0x00	; 0
    2c02:	60 e0       	ldi	r22, 0x00	; 0
    2c04:	70 e0       	ldi	r23, 0x00	; 0
    2c06:	76 2f       	mov	r23, r22
    2c08:	65 2f       	mov	r22, r21
    2c0a:	54 2f       	mov	r21, r20
    2c0c:	44 27       	eor	r20, r20
    2c0e:	84 2b       	or	r24, r20
    2c10:	95 2b       	or	r25, r21
    2c12:	a6 2b       	or	r26, r22
    2c14:	b7 2b       	or	r27, r23
	tempval |= (uint32_t) recv1_buf.data[3];
    2c16:	23 81       	ldd	r18, Z+3	; 0x03
    2c18:	82 2b       	or	r24, r18
	*value = tempval;
    2c1a:	f8 01       	movw	r30, r16
    2c1c:	80 83       	st	Z, r24
    2c1e:	91 83       	std	Z+1, r25	; 0x01
    2c20:	a2 83       	std	Z+2, r26	; 0x02
    2c22:	b3 83       	std	Z+3, r27	; 0x03

	return(NOERROR);
    2c24:	80 e0       	ldi	r24, 0x00	; 0

}
    2c26:	26 96       	adiw	r28, 0x06	; 6
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	de bf       	out	0x3e, r29	; 62
    2c2c:	df 91       	pop	r29
    2c2e:	cf 91       	pop	r28
    2c30:	1f 91       	pop	r17
    2c32:	0f 91       	pop	r16
    2c34:	ff 90       	pop	r15
    2c36:	ef 90       	pop	r14
    2c38:	08 95       	ret

00002c3a <move_MOTORAbsolute>:
	Returns:
		ERROR on USART timeout or bad (not 0xFF) ack
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTORAbsolute(uint8_t controller, int32_t newPosition)
{
    2c3a:	cf 93       	push	r28
    2c3c:	df 93       	push	r29
    2c3e:	cd b7       	in	r28, 0x3d	; 61
    2c40:	de b7       	in	r29, 0x3e	; 62
    2c42:	65 97       	sbiw	r28, 0x15	; 21
    2c44:	cd bf       	out	0x3d, r28	; 61
    2c46:	de bf       	out	0x3e, r29	; 62
	acceleration = ACCELERATION;
	deceleration = DECELERATION;
	speed = SPEED;
	buffer = 0;							// 0 -> command is buffered

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    2c48:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <recv1_buf>
	recv1_buf.nbytes = 1;
    2c4c:	91 e0       	ldi	r25, 0x01	; 1
    2c4e:	90 93 17 2b 	sts	0x2B17, r25	; 0x802b17 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2c52:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2c56:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv1_buf+0x104>

	tbuf[0] = controller;
    2c5a:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBODRIVETO;				// Command 65
    2c5c:	81 e4       	ldi	r24, 0x41	; 65
    2c5e:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (acceleration >> 24) & 0XFF;
    2c60:	1b 82       	std	Y+3, r1	; 0x03
	tbuf[3] = (acceleration >> 16) & 0xFF;
    2c62:	1c 82       	std	Y+4, r1	; 0x04
	tbuf[4] = (acceleration >> 8) & 0xFF;
    2c64:	80 e2       	ldi	r24, 0x20	; 32
    2c66:	8d 83       	std	Y+5, r24	; 0x05
	tbuf[5] = (acceleration) & 0xFF;
    2c68:	1e 82       	std	Y+6, r1	; 0x06
	tbuf[6] = (speed >> 24) & 0xFF;
    2c6a:	1f 82       	std	Y+7, r1	; 0x07
	tbuf[7] = (speed >> 16) & 0xFF;
    2c6c:	18 86       	std	Y+8, r1	; 0x08
	tbuf[8] = (speed >> 8) & 0xFF;
    2c6e:	90 e4       	ldi	r25, 0x40	; 64
    2c70:	99 87       	std	Y+9, r25	; 0x09
	tbuf[9] = (speed) & 0xFF;
    2c72:	1a 86       	std	Y+10, r1	; 0x0a
	tbuf[10] = (deceleration >> 24) & 0xFF;
    2c74:	1b 86       	std	Y+11, r1	; 0x0b
	tbuf[11] = (deceleration >> 16) & 0xFF;
    2c76:	1c 86       	std	Y+12, r1	; 0x0c
	tbuf[12] = (deceleration >> 8) & 0xFF;
    2c78:	8d 87       	std	Y+13, r24	; 0x0d
	tbuf[13] = (deceleration) & 0xFF;
    2c7a:	1e 86       	std	Y+14, r1	; 0x0e
	tbuf[14] = (newPosition >> 24) & 0xFF;
    2c7c:	7f 87       	std	Y+15, r23	; 0x0f
	tbuf[15] = (newPosition >> 16) & 0xFF;
    2c7e:	68 8b       	std	Y+16, r22	; 0x10
	tbuf[16] = (newPosition >> 8) & 0xFF;
    2c80:	59 8b       	std	Y+17, r21	; 0x11
	tbuf[17] = (newPosition) & 0xFF;
    2c82:	4a 8b       	std	Y+18, r20	; 0x12
	tbuf[18] = buffer;
    2c84:	1b 8a       	std	Y+19, r1	; 0x13
	crc = crc16(tbuf, 19);
    2c86:	63 e1       	ldi	r22, 0x13	; 19
    2c88:	70 e0       	ldi	r23, 0x00	; 0
    2c8a:	ce 01       	movw	r24, r28
    2c8c:	01 96       	adiw	r24, 0x01	; 1
    2c8e:	0e 94 2c 14 	call	0x2858	; 0x2858 <crc16>
	tbuf[19] = (crc >> 8) & 0xFF;
    2c92:	9c 8b       	std	Y+20, r25	; 0x14
	tbuf[20] = crc & 0xFF;
    2c94:	8d 8b       	std	Y+21, r24	; 0x15

	send_USART(1, tbuf, 21);			// Send command
    2c96:	45 e1       	ldi	r20, 0x15	; 21
    2c98:	be 01       	movw	r22, r28
    2c9a:	6f 5f       	subi	r22, 0xFF	; 255
    2c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	0e 94 ac 19 	call	0x3358	; 0x3358 <send_USART>

	start_TCB0(1);						// Start 1 ms ticks timer
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	0e 94 86 18 	call	0x310c	; 0x310c <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    2cac:	80 91 1a 2b 	lds	r24, 0x2B1A	; 0x802b1a <recv1_buf+0x104>
    2cb0:	81 30       	cpi	r24, 0x01	; 1
    2cb2:	41 f4       	brne	.+16     	; 0x2cc4 <move_MOTORAbsolute+0x8a>
			stop_TCB0();
    2cb4:	0e 94 9c 18 	call	0x3138	; 0x3138 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute timeout");
			return(ERROR);
		}
	}

	if (recv1_buf.data[0] != 0xFF) {
    2cb8:	80 91 16 2a 	lds	r24, 0x2A16	; 0x802a16 <recv1_buf>
    2cbc:	8f 3f       	cpi	r24, 0xFF	; 255
    2cbe:	91 f4       	brne	.+36     	; 0x2ce4 <move_MOTORAbsolute+0xaa>
		printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute ack");		
		return(ERROR);
	}

	return(NOERROR);
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	17 c0       	rjmp	.+46     	; 0x2cf2 <move_MOTORAbsolute+0xb8>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// 4 ms just barely works at 38400 baud
    2cc4:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    2cc8:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    2ccc:	c3 97       	sbiw	r24, 0x33	; 51
    2cce:	70 f3       	brcs	.-36     	; 0x2cac <move_MOTORAbsolute+0x72>
			stop_TCB0();
    2cd0:	0e 94 9c 18 	call	0x3138	; 0x3138 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute timeout");
    2cd4:	6e ec       	ldi	r22, 0xCE	; 206
    2cd6:	7b e8       	ldi	r23, 0x8B	; 139
    2cd8:	8f e2       	ldi	r24, 0x2F	; 47
    2cda:	91 e0       	ldi	r25, 0x01	; 1
    2cdc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
			return(ERROR);
    2ce0:	83 e6       	ldi	r24, 0x63	; 99
    2ce2:	07 c0       	rjmp	.+14     	; 0x2cf2 <move_MOTORAbsolute+0xb8>
		}
	}

	if (recv1_buf.data[0] != 0xFF) {
		printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute ack");		
    2ce4:	69 ee       	ldi	r22, 0xE9	; 233
    2ce6:	7b e8       	ldi	r23, 0x8B	; 139
    2ce8:	8f e2       	ldi	r24, 0x2F	; 47
    2cea:	91 e0       	ldi	r25, 0x01	; 1
    2cec:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
		return(ERROR);
    2cf0:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);
}
    2cf2:	65 96       	adiw	r28, 0x15	; 21
    2cf4:	cd bf       	out	0x3d, r28	; 61
    2cf6:	de bf       	out	0x3e, r29	; 62
    2cf8:	df 91       	pop	r29
    2cfa:	cf 91       	pop	r28
    2cfc:	08 95       	ret

00002cfe <move_MOTOR>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR(uint8_t cstack)
{
    2cfe:	cf 92       	push	r12
    2d00:	df 92       	push	r13
    2d02:	ef 92       	push	r14
    2d04:	ff 92       	push	r15
    2d06:	1f 93       	push	r17
    2d08:	cf 93       	push	r28
    2d0a:	df 93       	push	r29
    2d0c:	00 d0       	rcall	.+0      	; 0x2d0e <move_MOTOR+0x10>
    2d0e:	00 d0       	rcall	.+0      	; 0x2d10 <move_MOTOR+0x12>
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62

	uint8_t motor, controller, retval;
	int32_t newPosition, currentPosition;

	motor = pcmd[cstack].cobject;
    2d14:	e8 2e       	mov	r14, r24
    2d16:	f1 2c       	mov	r15, r1
    2d18:	84 e3       	ldi	r24, 0x34	; 52
    2d1a:	8e 9d       	mul	r24, r14
    2d1c:	f0 01       	movw	r30, r0
    2d1e:	8f 9d       	mul	r24, r15
    2d20:	f0 0d       	add	r31, r0
    2d22:	11 24       	eor	r1, r1
    2d24:	e9 5f       	subi	r30, 0xF9	; 249
    2d26:	f7 4d       	sbci	r31, 0xD7	; 215
    2d28:	81 81       	ldd	r24, Z+1	; 0x01
	switch(motor) {
    2d2a:	81 34       	cpi	r24, 0x41	; 65
    2d2c:	d0 f0       	brcs	.+52     	; 0x2d62 <move_MOTOR+0x64>
    2d2e:	84 34       	cpi	r24, 0x44	; 68
    2d30:	28 f0       	brcs	.+10     	; 0x2d3c <move_MOTOR+0x3e>
    2d32:	9f e9       	ldi	r25, 0x9F	; 159
    2d34:	98 0f       	add	r25, r24
    2d36:	93 30       	cpi	r25, 0x03	; 3
    2d38:	40 f0       	brcs	.+16     	; 0x2d4a <move_MOTOR+0x4c>
    2d3a:	13 c0       	rjmp	.+38     	; 0x2d62 <move_MOTOR+0x64>
		case 'A':
		case 'B':
		case 'C':
			controller = motor + 63;
    2d3c:	1f e3       	ldi	r17, 0x3F	; 63
    2d3e:	18 0f       	add	r17, r24
			currentPosition = 0;
    2d40:	19 82       	std	Y+1, r1	; 0x01
    2d42:	1a 82       	std	Y+2, r1	; 0x02
    2d44:	1b 82       	std	Y+3, r1	; 0x03
    2d46:	1c 82       	std	Y+4, r1	; 0x04
			break;
    2d48:	14 c0       	rjmp	.+40     	; 0x2d72 <move_MOTOR+0x74>

		case 'a':
		case 'b':
		case 'c':
			controller = motor + 31;
    2d4a:	1f e1       	ldi	r17, 0x1F	; 31
    2d4c:	18 0f       	add	r17, r24
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &currentPosition);
    2d4e:	ae 01       	movw	r20, r28
    2d50:	4f 5f       	subi	r20, 0xFF	; 255
    2d52:	5f 4f       	sbci	r21, 0xFF	; 255
    2d54:	60 e1       	ldi	r22, 0x10	; 16
    2d56:	81 2f       	mov	r24, r17
    2d58:	0e 94 51 14 	call	0x28a2	; 0x28a2 <get_MOTOREncoder>
			if (retval == ERROR) {
    2d5c:	83 36       	cpi	r24, 0x63	; 99
    2d5e:	49 f4       	brne	.+18     	; 0x2d72 <move_MOTOR+0x74>
    2d60:	39 c0       	rjmp	.+114    	; 0x2dd4 <move_MOTOR+0xd6>
				return(ERROR);
			}
			break;

		default:
			printError(ERR_UNKNOWNMTR, "move_MOTOR unknown motor");
    2d62:	60 e0       	ldi	r22, 0x00	; 0
    2d64:	7c e8       	ldi	r23, 0x8C	; 140
    2d66:	8d e2       	ldi	r24, 0x2D	; 45
    2d68:	91 e0       	ldi	r25, 0x01	; 1
    2d6a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
			return(ERROR);
    2d6e:	83 e6       	ldi	r24, 0x63	; 99
    2d70:	32 c0       	rjmp	.+100    	; 0x2dd6 <move_MOTOR+0xd8>
			break;	
	}

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    2d72:	84 e3       	ldi	r24, 0x34	; 52
    2d74:	8e 9d       	mul	r24, r14
    2d76:	f0 01       	movw	r30, r0
    2d78:	8f 9d       	mul	r24, r15
    2d7a:	f0 0d       	add	r31, r0
    2d7c:	11 24       	eor	r1, r1
    2d7e:	e9 5f       	subi	r30, 0xF9	; 249
    2d80:	f7 4d       	sbci	r31, 0xD7	; 215
    2d82:	82 81       	ldd	r24, Z+2	; 0x02
    2d84:	81 11       	cpse	r24, r1
    2d86:	08 c0       	rjmp	.+16     	; 0x2d98 <move_MOTOR+0x9a>
		printError(ERR_MTRNULLMOVE, "move_MOTOR no position or increment");
    2d88:	69 e1       	ldi	r22, 0x19	; 25
    2d8a:	7c e8       	ldi	r23, 0x8C	; 140
    2d8c:	83 e3       	ldi	r24, 0x33	; 51
    2d8e:	91 e0       	ldi	r25, 0x01	; 1
    2d90:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
		return(ERROR);
    2d94:	83 e6       	ldi	r24, 0x63	; 99
    2d96:	1f c0       	rjmp	.+62     	; 0x2dd6 <move_MOTOR+0xd8>
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);
    2d98:	24 e3       	ldi	r18, 0x34	; 52
    2d9a:	2e 9d       	mul	r18, r14
    2d9c:	c0 01       	movw	r24, r0
    2d9e:	2f 9d       	mul	r18, r15
    2da0:	90 0d       	add	r25, r0
    2da2:	11 24       	eor	r1, r1
    2da4:	87 5f       	subi	r24, 0xF7	; 247
    2da6:	97 4d       	sbci	r25, 0xD7	; 215
    2da8:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <atol>
    2dac:	9b 01       	movw	r18, r22
    2dae:	ac 01       	movw	r20, r24
    2db0:	ac e0       	ldi	r26, 0x0C	; 12
    2db2:	b1 e0       	ldi	r27, 0x01	; 1
    2db4:	0e 94 5f 21 	call	0x42be	; 0x42be <__muluhisi3>
    2db8:	c9 80       	ldd	r12, Y+1	; 0x01
    2dba:	da 80       	ldd	r13, Y+2	; 0x02
    2dbc:	eb 80       	ldd	r14, Y+3	; 0x03
    2dbe:	fc 80       	ldd	r15, Y+4	; 0x04
    2dc0:	ab 01       	movw	r20, r22
    2dc2:	bc 01       	movw	r22, r24
    2dc4:	4c 0d       	add	r20, r12
    2dc6:	5d 1d       	adc	r21, r13
    2dc8:	6e 1d       	adc	r22, r14
    2dca:	7f 1d       	adc	r23, r15
	return(move_MOTORAbsolute(controller, newPosition));
    2dcc:	81 2f       	mov	r24, r17
    2dce:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <move_MOTORAbsolute>
    2dd2:	01 c0       	rjmp	.+2      	; 0x2dd6 <move_MOTOR+0xd8>
		case 'b':
		case 'c':
			controller = motor + 31;
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &currentPosition);
			if (retval == ERROR) {
				return(ERROR);
    2dd4:	83 e6       	ldi	r24, 0x63	; 99
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);
	return(move_MOTORAbsolute(controller, newPosition));

}
    2dd6:	24 96       	adiw	r28, 0x04	; 4
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	de bf       	out	0x3e, r29	; 62
    2ddc:	df 91       	pop	r29
    2dde:	cf 91       	pop	r28
    2de0:	1f 91       	pop	r17
    2de2:	ff 90       	pop	r15
    2de4:	ef 90       	pop	r14
    2de6:	df 90       	pop	r13
    2de8:	cf 90       	pop	r12
    2dea:	08 95       	ret

00002dec <set_MOTOREncoder>:
		Does not print an error. It's only called at reboot. We should have a
		double-check at startup to make sure the encoder values agree before
		a move.
------------------------------------------------------------------------------*/
uint8_t set_MOTOREncoder(uint8_t controller, uint32_t value)
{
    2dec:	cf 93       	push	r28
    2dee:	df 93       	push	r29
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
    2df4:	26 97       	sbiw	r28, 0x06	; 6
    2df6:	cd bf       	out	0x3d, r28	; 61
    2df8:	de bf       	out	0x3e, r29	; 62

	uint8_t tbuf[6];

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    2dfa:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <recv1_buf>
	recv1_buf.nbytes = 1;
    2dfe:	91 e0       	ldi	r25, 0x01	; 1
    2e00:	90 93 17 2b 	sts	0x2B17, r25	; 0x802b17 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2e04:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2e08:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv1_buf+0x104>

	tbuf[0] = controller;
    2e0c:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBOSETENCODER;
    2e0e:	86 e1       	ldi	r24, 0x16	; 22
    2e10:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (value >> 24) & 0xFF;
    2e12:	7b 83       	std	Y+3, r23	; 0x03
	tbuf[3] = (value >> 16) & 0xFF;
    2e14:	6c 83       	std	Y+4, r22	; 0x04
	tbuf[4] = (value >> 8) & 0xFF;
    2e16:	5d 83       	std	Y+5, r21	; 0x05
	tbuf[5] = value & 0xFF;
    2e18:	4e 83       	std	Y+6, r20	; 0x06

	send_USART(1, tbuf, 6);				// Send the command
    2e1a:	46 e0       	ldi	r20, 0x06	; 6
    2e1c:	be 01       	movw	r22, r28
    2e1e:	6f 5f       	subi	r22, 0xFF	; 255
    2e20:	7f 4f       	sbci	r23, 0xFF	; 255
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	0e 94 ac 19 	call	0x3358	; 0x3358 <send_USART>

	start_TCB0(1);						// Start 1 ms ticks timer
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	0e 94 86 18 	call	0x310c	; 0x310c <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    2e30:	80 91 1a 2b 	lds	r24, 0x2B1A	; 0x802b1a <recv1_buf+0x104>
    2e34:	81 30       	cpi	r24, 0x01	; 1
    2e36:	41 f4       	brne	.+16     	; 0x2e48 <set_MOTOREncoder+0x5c>
			stop_TCB0();
    2e38:	0e 94 9c 18 	call	0x3138	; 0x3138 <stop_TCB0>
			stop_TCB0();
			return(ERROR);
		}
	}

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
    2e3c:	80 91 16 2a 	lds	r24, 0x2A16	; 0x802a16 <recv1_buf>
    2e40:	8f 3f       	cpi	r24, 0xFF	; 255
    2e42:	61 f0       	breq	.+24     	; 0x2e5c <set_MOTOREncoder+0x70>
		return(ERROR);
    2e44:	83 e6       	ldi	r24, 0x63	; 99
    2e46:	0b c0       	rjmp	.+22     	; 0x2e5e <set_MOTOREncoder+0x72>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// 4 ms barely works at 38400 baud
    2e48:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    2e4c:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    2e50:	c3 97       	sbiw	r24, 0x33	; 51
    2e52:	70 f3       	brcs	.-36     	; 0x2e30 <set_MOTOREncoder+0x44>
			stop_TCB0();
    2e54:	0e 94 9c 18 	call	0x3138	; 0x3138 <stop_TCB0>
			return(ERROR);
    2e58:	83 e6       	ldi	r24, 0x63	; 99
    2e5a:	01 c0       	rjmp	.+2      	; 0x2e5e <set_MOTOREncoder+0x72>

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
		return(ERROR);
	}

	return(NOERROR);
    2e5c:	80 e0       	ldi	r24, 0x00	; 0

}
    2e5e:	26 96       	adiw	r28, 0x06	; 6
    2e60:	cd bf       	out	0x3d, r28	; 61
    2e62:	de bf       	out	0x3e, r29	; 62
    2e64:	df 91       	pop	r29
    2e66:	cf 91       	pop	r28
    2e68:	08 95       	ret

00002e6a <init_MOTORS>:
	Returns
		ERROR if set_MOTOREncoder fails
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    2e6a:	0f 93       	push	r16
    2e6c:	1f 93       	push	r17
    2e6e:	cf 93       	push	r28
    2e70:	df 93       	push	r29

	static uint8_t firstTime[3] = {YES, YES, YES};
	uint8_t controller, error = 0;
    2e72:	d0 e0       	ldi	r29, 0x00	; 0
	uint32_t encoderValue;

	for (controller = 128; controller < 131; controller++) {
    2e74:	c0 e8       	ldi	r28, 0x80	; 128
    2e76:	1f c0       	rjmp	.+62     	; 0x2eb6 <init_MOTORS+0x4c>
		// get saved encoder value from FRAM
		encoderValue = 22 * ROBOCOUNTSPERMICRON;	// Proxy for now
		if (set_MOTOREncoder(controller, encoderValue) == ERROR) {
    2e78:	48 e0       	ldi	r20, 0x08	; 8
    2e7a:	57 e1       	ldi	r21, 0x17	; 23
    2e7c:	60 e0       	ldi	r22, 0x00	; 0
    2e7e:	70 e0       	ldi	r23, 0x00	; 0
    2e80:	8c 2f       	mov	r24, r28
    2e82:	0e 94 f6 16 	call	0x2dec	; 0x2dec <set_MOTOREncoder>
    2e86:	83 36       	cpi	r24, 0x63	; 99
    2e88:	a9 f4       	brne	.+42     	; 0x2eb4 <init_MOTORS+0x4a>
			if (!firstTime[controller - 128]) {
    2e8a:	0c 2f       	mov	r16, r28
    2e8c:	10 e0       	ldi	r17, 0x00	; 0
    2e8e:	00 58       	subi	r16, 0x80	; 128
    2e90:	11 09       	sbc	r17, r1
    2e92:	f8 01       	movw	r30, r16
    2e94:	e0 50       	subi	r30, 0x00	; 0
    2e96:	f8 4d       	sbci	r31, 0xD8	; 216
    2e98:	80 81       	ld	r24, Z
    2e9a:	81 11       	cpse	r24, r1
    2e9c:	0a c0       	rjmp	.+20     	; 0x2eb2 <init_MOTORS+0x48>
				printError(ERR_MTRSETENC, "init_MOTORS");
    2e9e:	6d e3       	ldi	r22, 0x3D	; 61
    2ea0:	7c e8       	ldi	r23, 0x8C	; 140
    2ea2:	82 e3       	ldi	r24, 0x32	; 50
    2ea4:	91 e0       	ldi	r25, 0x01	; 1
    2ea6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
				firstTime[controller - 128] = NO;
    2eaa:	f8 01       	movw	r30, r16
    2eac:	e0 50       	subi	r30, 0x00	; 0
    2eae:	f8 4d       	sbci	r31, 0xD8	; 216
    2eb0:	10 82       	st	Z, r1
			}
			error++;
    2eb2:	df 5f       	subi	r29, 0xFF	; 255

	static uint8_t firstTime[3] = {YES, YES, YES};
	uint8_t controller, error = 0;
	uint32_t encoderValue;

	for (controller = 128; controller < 131; controller++) {
    2eb4:	cf 5f       	subi	r28, 0xFF	; 255
    2eb6:	c3 38       	cpi	r28, 0x83	; 131
    2eb8:	f8 f2       	brcs	.-66     	; 0x2e78 <init_MOTORS+0xe>
				firstTime[controller - 128] = NO;
			}
			error++;
		}
	}
	if (error) {
    2eba:	dd 23       	and	r29, r29
    2ebc:	11 f0       	breq	.+4      	; 0x2ec2 <init_MOTORS+0x58>
		return(ERROR);
    2ebe:	83 e6       	ldi	r24, 0x63	; 99
    2ec0:	01 c0       	rjmp	.+2      	; 0x2ec4 <init_MOTORS+0x5a>
	} else {
		return(NOERROR);
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2ec4:	df 91       	pop	r29
    2ec6:	cf 91       	pop	r28
    2ec8:	1f 91       	pop	r17
    2eca:	0f 91       	pop	r16
    2ecc:	08 95       	ret

00002ece <init_RTC>:
			between interrupts. ticksRTC = 30719 generates an interrupt
			every minute. ticksRTC = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticksRTC)
{
    2ece:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2ed0:	e0 e6       	ldi	r30, 0x60	; 96
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    2ed6:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    2ed8:	88 ed       	ldi	r24, 0xD8	; 216
    2eda:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2edc:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2ede:	01 c0       	rjmp	.+2      	; 0x2ee2 <init_RTC+0x14>
		asm("nop");
    2ee0:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2ee2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    2ee6:	96 fd       	sbrc	r25, 6
    2ee8:	fb cf       	rjmp	.-10     	; 0x2ee0 <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2eea:	e0 e6       	ldi	r30, 0x60	; 96
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    2ef0:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    2ef2:	28 ed       	ldi	r18, 0xD8	; 216
    2ef4:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2ef6:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    2ef8:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    2efa:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    2efc:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2efe:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    2f00:	01 c0       	rjmp	.+2      	; 0x2f04 <init_RTC+0x36>
		asm("nop");
    2f02:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    2f04:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    2f08:	91 11       	cpse	r25, r1
    2f0a:	fb cf       	rjmp	.-10     	; 0x2f02 <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticksRTC;
    2f0c:	e0 e4       	ldi	r30, 0x40	; 64
    2f0e:	f1 e0       	ldi	r31, 0x01	; 1
    2f10:	42 87       	std	Z+10, r20	; 0x0a
    2f12:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    2f14:	82 e0       	ldi	r24, 0x02	; 2
    2f16:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    2f18:	85 81       	ldd	r24, Z+5	; 0x05
    2f1a:	81 60       	ori	r24, 0x01	; 1
    2f1c:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    2f1e:	81 eb       	ldi	r24, 0xB1	; 177
    2f20:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    2f22:	82 81       	ldd	r24, Z+2	; 0x02
    2f24:	81 60       	ori	r24, 0x01	; 1
    2f26:	82 83       	std	Z+2, r24	; 0x02
    2f28:	08 95       	ret

00002f2a <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    2f2a:	1f 92       	push	r1
    2f2c:	0f 92       	push	r0
    2f2e:	0f b6       	in	r0, 0x3f	; 63
    2f30:	0f 92       	push	r0
    2f32:	11 24       	eor	r1, r1
    2f34:	2f 93       	push	r18
    2f36:	3f 93       	push	r19
    2f38:	4f 93       	push	r20
    2f3a:	5f 93       	push	r21
    2f3c:	6f 93       	push	r22
    2f3e:	7f 93       	push	r23
    2f40:	8f 93       	push	r24
    2f42:	9f 93       	push	r25
    2f44:	af 93       	push	r26
    2f46:	bf 93       	push	r27
    2f48:	ef 93       	push	r30
    2f4a:	ff 93       	push	r31

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	if (timerOLED) {
    2f52:	80 91 0f 2a 	lds	r24, 0x2A0F	; 0x802a0f <timerOLED>
    2f56:	90 91 10 2a 	lds	r25, 0x2A10	; 0x802a10 <timerOLED+0x1>
    2f5a:	00 97       	sbiw	r24, 0x00	; 0
    2f5c:	b9 f0       	breq	.+46     	; 0x2f8c <__vector_3+0x62>
		if (timerOLED > timeoutOLED) {	// Display timeout
    2f5e:	20 91 11 2a 	lds	r18, 0x2A11	; 0x802a11 <timeoutOLED>
    2f62:	30 91 12 2a 	lds	r19, 0x2A12	; 0x802a12 <timeoutOLED+0x1>
    2f66:	28 17       	cp	r18, r24
    2f68:	39 07       	cpc	r19, r25
    2f6a:	58 f4       	brcc	.+22     	; 0x2f82 <__vector_3+0x58>
			clear_OLED(0);
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <clear_OLED>
			clear_OLED(1);
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <clear_OLED>
			timerOLED = 0;
    2f78:	10 92 0f 2a 	sts	0x2A0F, r1	; 0x802a0f <timerOLED>
    2f7c:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <timerOLED+0x1>
    2f80:	05 c0       	rjmp	.+10     	; 0x2f8c <__vector_3+0x62>
		} else {
			timerOLED++;
    2f82:	01 96       	adiw	r24, 0x01	; 1
    2f84:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <timerOLED>
    2f88:	90 93 10 2a 	sts	0x2A10, r25	; 0x802a10 <timerOLED+0x1>
		}
	}
	toggle_LED;						// Defined in led.c
    2f8c:	80 e2       	ldi	r24, 0x20	; 32
    2f8e:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>

}
    2f92:	ff 91       	pop	r31
    2f94:	ef 91       	pop	r30
    2f96:	bf 91       	pop	r27
    2f98:	af 91       	pop	r26
    2f9a:	9f 91       	pop	r25
    2f9c:	8f 91       	pop	r24
    2f9e:	7f 91       	pop	r23
    2fa0:	6f 91       	pop	r22
    2fa2:	5f 91       	pop	r21
    2fa4:	4f 91       	pop	r20
    2fa6:	3f 91       	pop	r19
    2fa8:	2f 91       	pop	r18
    2faa:	0f 90       	pop	r0
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	0f 90       	pop	r0
    2fb0:	1f 90       	pop	r1
    2fb2:	18 95       	reti

00002fb4 <set>:
	Returns:
		GREATERPROMPT on success
		ERRORPROMPT if an invalid object was requested.
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    2fb4:	cf 93       	push	r28
    2fb6:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	24 e3       	ldi	r18, 0x34	; 52
    2fbc:	28 9f       	mul	r18, r24
    2fbe:	f0 01       	movw	r30, r0
    2fc0:	29 9f       	mul	r18, r25
    2fc2:	f0 0d       	add	r31, r0
    2fc4:	11 24       	eor	r1, r1
    2fc6:	e9 5f       	subi	r30, 0xF9	; 249
    2fc8:	f7 4d       	sbci	r31, 0xD7	; 215
    2fca:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    2fcc:	24 37       	cpi	r18, 0x74	; 116
    2fce:	29 f5       	brne	.+74     	; 0x301a <set+0x66>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    2fd0:	24 e3       	ldi	r18, 0x34	; 52
    2fd2:	28 9f       	mul	r18, r24
    2fd4:	e0 01       	movw	r28, r0
    2fd6:	29 9f       	mul	r18, r25
    2fd8:	d0 0d       	add	r29, r0
    2fda:	11 24       	eor	r1, r1
    2fdc:	c7 5f       	subi	r28, 0xF7	; 247
    2fde:	d7 4d       	sbci	r29, 0xD7	; 215
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	01 90       	ld	r0, Z+
    2fe4:	00 20       	and	r0, r0
    2fe6:	e9 f7       	brne	.-6      	; 0x2fe2 <set+0x2e>
    2fe8:	31 97       	sbiw	r30, 0x01	; 1
    2fea:	ec 1b       	sub	r30, r28
    2fec:	fd 0b       	sbc	r31, r29
    2fee:	73 97       	sbiw	r30, 0x13	; 19
    2ff0:	41 f0       	breq	.+16     	; 0x3002 <set+0x4e>
				printError(ERR_SETTIME, "set: bad time format");
    2ff2:	69 e4       	ldi	r22, 0x49	; 73
    2ff4:	7c e8       	ldi	r23, 0x8C	; 140
    2ff6:	8a e5       	ldi	r24, 0x5A	; 90
    2ff8:	92 e0       	ldi	r25, 0x02	; 2
    2ffa:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
				return(ERROR);
    2ffe:	83 e6       	ldi	r24, 0x63	; 99
    3000:	13 c0       	rjmp	.+38     	; 0x3028 <set+0x74>
			}
			put_time(pcmd[cstack].cvalue);
    3002:	ce 01       	movw	r24, r28
    3004:	0e 94 ef 05 	call	0xbde	; 0xbde <put_time>
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    3008:	24 e1       	ldi	r18, 0x14	; 20
    300a:	ae 01       	movw	r20, r28
    300c:	60 e0       	ldi	r22, 0x00	; 0
    300e:	70 e0       	ldi	r23, 0x00	; 0
    3010:	80 e5       	ldi	r24, 0x50	; 80
    3012:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <write_FRAM>

		default:
			printError(ERR_SET, "set what?");
			return(ERROR);
	}
	return(NOERROR);
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	07 c0       	rjmp	.+14     	; 0x3028 <set+0x74>
			put_time(pcmd[cstack].cvalue);
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			printError(ERR_SET, "set what?");
    301a:	6e e5       	ldi	r22, 0x5E	; 94
    301c:	7c e8       	ldi	r23, 0x8C	; 140
    301e:	89 e5       	ldi	r24, 0x59	; 89
    3020:	92 e0       	ldi	r25, 0x02	; 2
    3022:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
			return(ERROR);
    3026:	83 e6       	ldi	r24, 0x63	; 99
	}
	return(NOERROR);
}
    3028:	df 91       	pop	r29
    302a:	cf 91       	pop	r28
    302c:	08 95       	ret

0000302e <init_SPECID>:
	pullup. Must be called AFTER init_PORTS().
------------------------------------------------------------------------------*/
void init_SPECID(void)
{

	PORTF.PIN2CTRL &= ~PORT_PULLUPEN_bm;	// Remove pullup
    302e:	e0 ea       	ldi	r30, 0xA0	; 160
    3030:	f4 e0       	ldi	r31, 0x04	; 4
    3032:	82 89       	ldd	r24, Z+18	; 0x12
    3034:	87 7f       	andi	r24, 0xF7	; 247
    3036:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.DIRCLR = PIN2_bm;					// Set as input
    3038:	84 e0       	ldi	r24, 0x04	; 4
    303a:	82 83       	std	Z+2, r24	; 0x02
    303c:	08 95       	ret

0000303e <get_temperature>:
	point for the actual devices.

	The signal is 1.5E-3 mV/K with a 1500 kOhm dropping resistor.
------------------------------------------------------------------------------*/
float get_temperature(uint8_t sensor)
{
    303e:	cf 93       	push	r28
    3040:	df 93       	push	r29
    3042:	00 d0       	rcall	.+0      	; 0x3044 <get_temperature+0x6>
    3044:	00 d0       	rcall	.+0      	; 0x3046 <get_temperature+0x8>
    3046:	cd b7       	in	r28, 0x3d	; 61
    3048:	de b7       	in	r29, 0x3e	; 62

	float temperature;

	switch (sensor) {
    304a:	83 30       	cpi	r24, 0x03	; 3
    304c:	18 f0       	brcs	.+6      	; 0x3054 <get_temperature+0x16>
    304e:	83 30       	cpi	r24, 0x03	; 3
    3050:	39 f0       	breq	.+14     	; 0x3060 <get_temperature+0x22>
    3052:	0b c0       	rjmp	.+22     	; 0x306a <get_temperature+0x2c>
		case 0:
		case 1:
		case 2:
			read_AD590(sensor, &temperature);
    3054:	be 01       	movw	r22, r28
    3056:	6f 5f       	subi	r22, 0xFF	; 255
    3058:	7f 4f       	sbci	r23, 0xFF	; 255
    305a:	0e 94 49 01 	call	0x292	; 0x292 <read_AD590>
			break;
    305e:	0d c0       	rjmp	.+26     	; 0x307a <get_temperature+0x3c>
		case 3:
			read_MCP9808(&temperature);
    3060:	ce 01       	movw	r24, r28
    3062:	01 96       	adiw	r24, 0x01	; 1
    3064:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <read_MCP9808>
			break;
    3068:	08 c0       	rjmp	.+16     	; 0x307a <get_temperature+0x3c>
		default:
			temperature = -666.0;
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	90 e8       	ldi	r25, 0x80	; 128
    306e:	a6 e2       	ldi	r26, 0x26	; 38
    3070:	b4 ec       	ldi	r27, 0xC4	; 196
    3072:	89 83       	std	Y+1, r24	; 0x01
    3074:	9a 83       	std	Y+2, r25	; 0x02
    3076:	ab 83       	std	Y+3, r26	; 0x03
    3078:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}

	return(temperature);
    307a:	69 81       	ldd	r22, Y+1	; 0x01
    307c:	7a 81       	ldd	r23, Y+2	; 0x02
    307e:	8b 81       	ldd	r24, Y+3	; 0x03
    3080:	9c 81       	ldd	r25, Y+4	; 0x04

}
    3082:	24 96       	adiw	r28, 0x04	; 4
    3084:	cd bf       	out	0x3d, r28	; 61
    3086:	de bf       	out	0x3e, r29	; 62
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	08 95       	ret

0000308e <testroutine>:
#include "usart.h"
#include "roboclaw.h"
#include "testroutine.h"

void testroutine(void)
{
    308e:	0f 93       	push	r16
    3090:	1f 93       	push	r17
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	e2 97       	sbiw	r28, 0x32	; 50
    309c:	cd bf       	out	0x3d, r28	; 61
    309e:	de bf       	out	0x3e, r29	; 62


	char buf[50];

	start_TCB0(1);
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	0e 94 86 18 	call	0x310c	; 0x310c <start_TCB0>
    30a8:	8d e8       	ldi	r24, 0x8D	; 141
    30aa:	90 e2       	ldi	r25, 0x20	; 32
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	f1 f7       	brne	.-4      	; 0x30ac <testroutine+0x1e>
    30b0:	00 00       	nop
	_delay_ms(10);
	stop_TCB0();
    30b2:	0e 94 9c 18 	call	0x3138	; 0x3138 <stop_TCB0>
	sprintf(buf, "ticks = %d\r\n", ticks);
    30b6:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    30ba:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    30be:	9f 93       	push	r25
    30c0:	8f 93       	push	r24
    30c2:	88 e6       	ldi	r24, 0x68	; 104
    30c4:	9c e8       	ldi	r25, 0x8C	; 140
    30c6:	9f 93       	push	r25
    30c8:	8f 93       	push	r24
    30ca:	8e 01       	movw	r16, r28
    30cc:	0f 5f       	subi	r16, 0xFF	; 255
    30ce:	1f 4f       	sbci	r17, 0xFF	; 255
    30d0:	1f 93       	push	r17
    30d2:	0f 93       	push	r16
    30d4:	0e 94 58 23 	call	0x46b0	; 0x46b0 <sprintf>
	send_USART(0, (uint8_t*) buf, strlen(buf));
    30d8:	f8 01       	movw	r30, r16
    30da:	01 90       	ld	r0, Z+
    30dc:	00 20       	and	r0, r0
    30de:	e9 f7       	brne	.-6      	; 0x30da <testroutine+0x4c>
    30e0:	31 97       	sbiw	r30, 0x01	; 1
    30e2:	af 01       	movw	r20, r30
    30e4:	40 1b       	sub	r20, r16
    30e6:	51 0b       	sbc	r21, r17
    30e8:	b8 01       	movw	r22, r16
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	0e 94 ac 19 	call	0x3358	; 0x3358 <send_USART>
	write_MCP23008(addr, OLAT, 0x00);
	_delay_ms(1000);
	write_MCP23008(addr, OLAT, 0xFF);
	send_USART(0, (uint8_t*) buf, strlen(buf));
*/
	return;
    30f0:	0f 90       	pop	r0
    30f2:	0f 90       	pop	r0
    30f4:	0f 90       	pop	r0
    30f6:	0f 90       	pop	r0
    30f8:	0f 90       	pop	r0
    30fa:	0f 90       	pop	r0
    30fc:	e2 96       	adiw	r28, 0x32	; 50
    30fe:	cd bf       	out	0x3d, r28	; 61
    3100:	de bf       	out	0x3e, r29	; 62
    3102:	df 91       	pop	r29
    3104:	cf 91       	pop	r28
    3106:	1f 91       	pop	r17
    3108:	0f 91       	pop	r16
    310a:	08 95       	ret

0000310c <start_TCB0>:
#include "timers.h"

void start_TCB0(uint16_t msPeriod)
{

	ticks = 0;
    310c:	10 92 14 2a 	sts	0x2A14, r1	; 0x802a14 <ticks>
    3110:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <ticks+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    3114:	25 e0       	ldi	r18, 0x05	; 5
    3116:	3d e0       	ldi	r19, 0x0D	; 13
    3118:	ac 01       	movw	r20, r24
    311a:	42 9f       	mul	r20, r18
    311c:	c0 01       	movw	r24, r0
    311e:	43 9f       	mul	r20, r19
    3120:	90 0d       	add	r25, r0
    3122:	52 9f       	mul	r21, r18
    3124:	90 0d       	add	r25, r0
    3126:	11 24       	eor	r1, r1
    3128:	e0 e8       	ldi	r30, 0x80	; 128
    312a:	fa e0       	ldi	r31, 0x0A	; 10
    312c:	84 87       	std	Z+12, r24	; 0x0c
    312e:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	85 83       	std	Z+5, r24	; 0x05
//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    3134:	80 83       	st	Z, r24
    3136:	08 95       	ret

00003138 <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    3138:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    313c:	08 95       	ret

0000313e <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    313e:	1f 92       	push	r1
    3140:	0f 92       	push	r0
    3142:	0f b6       	in	r0, 0x3f	; 63
    3144:	0f 92       	push	r0
    3146:	11 24       	eor	r1, r1
    3148:	8f 93       	push	r24
    314a:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks++;
    3152:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    3156:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    315a:	01 96       	adiw	r24, 0x01	; 1
    315c:	80 93 14 2a 	sts	0x2A14, r24	; 0x802a14 <ticks>
    3160:	90 93 15 2a 	sts	0x2A15, r25	; 0x802a15 <ticks+0x1>

    3164:	9f 91       	pop	r25
    3166:	8f 91       	pop	r24
    3168:	0f 90       	pop	r0
    316a:	0f be       	out	0x3f, r0	; 63
    316c:	0f 90       	pop	r0
    316e:	1f 90       	pop	r1
    3170:	18 95       	reti

00003172 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    3172:	e0 ea       	ldi	r30, 0xA0	; 160
    3174:	f8 e0       	ldi	r31, 0x08	; 8
    3176:	8b e0       	ldi	r24, 0x0B	; 11
    3178:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    317a:	83 81       	ldd	r24, Z+3	; 0x03
    317c:	81 60       	ori	r24, 0x01	; 1
    317e:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    3180:	85 81       	ldd	r24, Z+5	; 0x05
    3182:	81 60       	ori	r24, 0x01	; 1
    3184:	85 83       	std	Z+5, r24	; 0x05
    3186:	08 95       	ret

00003188 <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    3188:	01 c0       	rjmp	.+2      	; 0x318c <read_TWI+0x4>
		asm("nop");								// Should set timer here
    318a:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    318c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3190:	88 23       	and	r24, r24
    3192:	dc f7       	brge	.-10     	; 0x318a <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    3194:	e0 ea       	ldi	r30, 0xA0	; 160
    3196:	f8 e0       	ldi	r31, 0x08	; 8
    3198:	84 81       	ldd	r24, Z+4	; 0x04
    319a:	8b 7f       	andi	r24, 0xFB	; 251
    319c:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    319e:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    31a0:	94 81       	ldd	r25, Z+4	; 0x04
    31a2:	92 60       	ori	r25, 0x02	; 2
    31a4:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    31a6:	08 95       	ret

000031a8 <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    31a8:	01 c0       	rjmp	.+2      	; 0x31ac <readlast_TWI+0x4>
		asm("nop");
    31aa:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    31ac:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31b0:	88 23       	and	r24, r24
    31b2:	dc f7       	brge	.-10     	; 0x31aa <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    31b4:	e0 ea       	ldi	r30, 0xA0	; 160
    31b6:	f8 e0       	ldi	r31, 0x08	; 8
    31b8:	84 81       	ldd	r24, Z+4	; 0x04
    31ba:	84 60       	ori	r24, 0x04	; 4
    31bc:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    31be:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    31c0:	08 95       	ret

000031c2 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    31c2:	61 30       	cpi	r22, 0x01	; 1
    31c4:	39 f4       	brne	.+14     	; 0x31d4 <start_TWI+0x12>
//		addr = ((addr << 1) | 0x01);
		TWI0.MADDR = ((addr << 1) | 0x01);
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	88 0f       	add	r24, r24
    31ca:	99 1f       	adc	r25, r25
    31cc:	81 60       	ori	r24, 0x01	; 1
    31ce:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    31d2:	03 c0       	rjmp	.+6      	; 0x31da <start_TWI+0x18>
	} else {
//		addr = ((addr << 1) & ~0x01);
//		addr = (addr << 1);
		TWI0.MADDR = (addr << 1);
    31d4:	88 0f       	add	r24, r24
    31d6:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	0e 94 86 18 	call	0x310c	; 0x310c <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    31e2:	0b c0       	rjmp	.+22     	; 0x31fa <start_TWI+0x38>
		if (ticks > 10) {
    31e4:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    31e8:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    31ec:	0b 97       	sbiw	r24, 0x0b	; 11
    31ee:	20 f0       	brcs	.+8      	; 0x31f8 <start_TWI+0x36>
			stop_TCB0();
    31f0:	0e 94 9c 18 	call	0x3138	; 0x3138 <stop_TCB0>
			return(ERROR);
    31f4:	83 e6       	ldi	r24, 0x63	; 99
    31f6:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
    31f8:	00 00       	nop
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    31fa:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31fe:	80 7c       	andi	r24, 0xC0	; 192
    3200:	89 f3       	breq	.-30     	; 0x31e4 <start_TWI+0x22>
			stop_TCB0();
			return(ERROR);
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
    3202:	0e 94 9c 18 	call	0x3138	; 0x3138 <stop_TCB0>
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    3206:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    320a:	82 ff       	sbrs	r24, 2
    320c:	08 c0       	rjmp	.+16     	; 0x321e <start_TWI+0x5c>
		printError(ERR_TWI, "TWI bus");
    320e:	65 e7       	ldi	r22, 0x75	; 117
    3210:	7c e8       	ldi	r23, 0x8C	; 140
    3212:	81 e9       	ldi	r24, 0x91	; 145
    3214:	91 e0       	ldi	r25, 0x01	; 1
    3216:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
		return(ERROR);
    321a:	83 e6       	ldi	r24, 0x63	; 99
    321c:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    321e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3222:	83 ff       	sbrs	r24, 3
    3224:	08 c0       	rjmp	.+16     	; 0x3236 <start_TWI+0x74>
		printError(ERR_TWI, "TWI arbitration");
    3226:	6d e7       	ldi	r22, 0x7D	; 125
    3228:	7c e8       	ldi	r23, 0x8C	; 140
    322a:	81 e9       	ldi	r24, 0x91	; 145
    322c:	91 e0       	ldi	r25, 0x01	; 1
    322e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <printError>
		return(ERROR);
    3232:	83 e6       	ldi	r24, 0x63	; 99
    3234:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    3236:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    323a:	89 2f       	mov	r24, r25
    323c:	80 71       	andi	r24, 0x10	; 16
    323e:	94 fd       	sbrc	r25, 4
		return(ERROR);
    3240:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    3242:	08 95       	ret

00003244 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    3244:	87 e0       	ldi	r24, 0x07	; 7
    3246:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    324a:	08 95       	ret

0000324c <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    324c:	01 c0       	rjmp	.+2      	; 0x3250 <write_TWI+0x4>
		asm("nop");
    324e:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    3250:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3254:	96 ff       	sbrs	r25, 6
    3256:	fb cf       	rjmp	.-10     	; 0x324e <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    3258:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	start_TCB0(1);
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	0e 94 86 18 	call	0x310c	; 0x310c <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    3264:	14 c0       	rjmp	.+40     	; 0x328e <write_TWI+0x42>
		asm("nop");
    3266:	00 00       	nop
		ticks++;				// Remove this?
    3268:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    326c:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    3270:	01 96       	adiw	r24, 0x01	; 1
    3272:	80 93 14 2a 	sts	0x2A14, r24	; 0x802a14 <ticks>
    3276:	90 93 15 2a 	sts	0x2A15, r25	; 0x802a15 <ticks+0x1>
		if (ticks > 50) {
    327a:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    327e:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    3282:	c3 97       	sbiw	r24, 0x33	; 51
    3284:	20 f0       	brcs	.+8      	; 0x328e <write_TWI+0x42>
			stop_TCB0();
    3286:	0e 94 9c 18 	call	0x3138	; 0x3138 <stop_TCB0>
			return(ERROR);
    328a:	83 e6       	ldi	r24, 0x63	; 99
    328c:	08 95       	ret
	}

	TWI0.MDATA = data;

	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    328e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3292:	86 ff       	sbrs	r24, 6
    3294:	e8 cf       	rjmp	.-48     	; 0x3266 <write_TWI+0x1a>
			stop_TCB0();
			return(ERROR);
			break;
		}
	}
	stop_TCB0();
    3296:	0e 94 9c 18 	call	0x3138	; 0x3138 <stop_TCB0>
	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    329a:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    329e:	89 2f       	mov	r24, r25
    32a0:	80 71       	andi	r24, 0x10	; 16
    32a2:	94 fd       	sbrc	r25, 4
		return(ERROR);
    32a4:	83 e6       	ldi	r24, 0x63	; 99
	} else {
		return(NOERROR);
	}

}
    32a6:	08 95       	ret

000032a8 <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    32a8:	e0 e0       	ldi	r30, 0x00	; 0
    32aa:	f4 e0       	ldi	r31, 0x04	; 4
    32ac:	81 e0       	ldi	r24, 0x01	; 1
    32ae:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    32b0:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    32b2:	e0 e0       	ldi	r30, 0x00	; 0
    32b4:	f8 e0       	ldi	r31, 0x08	; 8
    32b6:	2d e6       	ldi	r18, 0x6D	; 109
    32b8:	35 e0       	ldi	r19, 0x05	; 5
    32ba:	20 87       	std	Z+8, r18	; 0x08
    32bc:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    32be:	95 81       	ldd	r25, Z+5	; 0x05
    32c0:	90 68       	ori	r25, 0x80	; 128
    32c2:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    32c4:	96 81       	ldd	r25, Z+6	; 0x06
    32c6:	90 64       	ori	r25, 0x40	; 64
    32c8:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    32ca:	96 81       	ldd	r25, Z+6	; 0x06
    32cc:	90 68       	ori	r25, 0x80	; 128
    32ce:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;					// Set up send/receive buffers
    32d0:	10 92 1f 2d 	sts	0x2D1F, r1	; 0x802d1f <send0_buf+0xff>
	send0_buf.tail = 0;
    32d4:	10 92 20 2d 	sts	0x2D20, r1	; 0x802d20 <send0_buf+0x100>
	send0_buf.done = YES;
    32d8:	80 93 24 2d 	sts	0x2D24, r24	; 0x802d24 <send0_buf+0x104>
	recv0_buf.head = 0;
    32dc:	10 92 1a 2c 	sts	0x2C1A, r1	; 0x802c1a <recv0_buf+0xff>
	recv0_buf.tail = 0;
    32e0:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0x100>
	recv0_buf.data[0] = '\0';
    32e4:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv0_buf>
	recv0_buf.length = 0;
    32e8:	10 92 1d 2c 	sts	0x2C1D, r1	; 0x802c1d <recv0_buf+0x102>
	recv0_buf.done = NO;
    32ec:	10 92 1f 2c 	sts	0x2C1F, r1	; 0x802c1f <recv0_buf+0x104>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    32f0:	e0 e4       	ldi	r30, 0x40	; 64
    32f2:	f4 e0       	ldi	r31, 0x04	; 4
    32f4:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    32f6:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
    32f8:	e0 e2       	ldi	r30, 0x20	; 32
    32fa:	f8 e0       	ldi	r31, 0x08	; 8
    32fc:	4b e5       	ldi	r20, 0x5B	; 91
    32fe:	51 e0       	ldi	r21, 0x01	; 1
    3300:	40 87       	std	Z+8, r20	; 0x08
    3302:	51 87       	std	Z+9, r21	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    3304:	95 81       	ldd	r25, Z+5	; 0x05
    3306:	90 68       	ori	r25, 0x80	; 128
    3308:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    330a:	96 81       	ldd	r25, Z+6	; 0x06
    330c:	90 64       	ori	r25, 0x40	; 64
    330e:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    3310:	96 81       	ldd	r25, Z+6	; 0x06
    3312:	90 68       	ori	r25, 0x80	; 128
    3314:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    3316:	10 92 2e 30 	sts	0x302E, r1	; 0x80302e <send1_buf+0xff>
	send1_buf.tail = 0;
    331a:	10 92 2f 30 	sts	0x302F, r1	; 0x80302f <send1_buf+0x100>
	send1_buf.done = YES;
    331e:	80 93 33 30 	sts	0x3033, r24	; 0x803033 <send1_buf+0x104>
	recv1_buf.head = 0;
    3322:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0xff>
	recv1_buf.tail = 0;
    3326:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x100>
	recv1_buf.data[0] = '\0';
    332a:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <recv1_buf>
	recv1_buf.done = NO;
    332e:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv1_buf+0x104>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    3332:	e0 e2       	ldi	r30, 0x20	; 32
    3334:	f4 e0       	ldi	r31, 0x04	; 4
    3336:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    3338:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    333a:	e0 e6       	ldi	r30, 0x60	; 96
    333c:	f8 e0       	ldi	r31, 0x08	; 8
    333e:	20 87       	std	Z+8, r18	; 0x08
    3340:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    3342:	96 81       	ldd	r25, Z+6	; 0x06
    3344:	90 64       	ori	r25, 0x40	; 64
    3346:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    3348:	96 81       	ldd	r25, Z+6	; 0x06
    334a:	90 68       	ori	r25, 0x80	; 128
    334c:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    334e:	80 93 2e 2f 	sts	0x2F2E, r24	; 0x802f2e <send3_buf+0x104>
	recv3_buf.done = NO;
    3352:	10 92 29 2e 	sts	0x2E29, r1	; 0x802e29 <recv3_buf+0x104>
    3356:	08 95       	ret

00003358 <send_USART>:
		"transmit data register empty" interrupt (DREIE). The USARTn_DRE_vect
		puts the bytes into the transmit register until the tail catches up
		to the head of the circular buffer.
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    3358:	0f 93       	push	r16
    335a:	1f 93       	push	r17
    335c:	cf 93       	push	r28
    335e:	df 93       	push	r29
    3360:	eb 01       	movw	r28, r22
    3362:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    3364:	81 30       	cpi	r24, 0x01	; 1
    3366:	d1 f1       	breq	.+116    	; 0x33dc <send_USART+0x84>
    3368:	20 f0       	brcs	.+8      	; 0x3372 <send_USART+0x1a>
    336a:	83 30       	cpi	r24, 0x03	; 3
    336c:	09 f4       	brne	.+2      	; 0x3370 <send_USART+0x18>
    336e:	87 c0       	rjmp	.+270    	; 0x347e <send_USART+0x126>
    3370:	8e c0       	rjmp	.+284    	; 0x348e <send_USART+0x136>
		case 0:
			send0_buf.done = NO;
    3372:	10 92 24 2d 	sts	0x2D24, r1	; 0x802d24 <send0_buf+0x104>
			for (i = 0; i < nbytes; i++) {
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	11 c0       	rjmp	.+34     	; 0x339c <send_USART+0x44>
				send0_buf.data[send0_buf.head] = *data++;
    337a:	ef e1       	ldi	r30, 0x1F	; 31
    337c:	fd e2       	ldi	r31, 0x2D	; 45
    337e:	80 81       	ld	r24, Z
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	38 81       	ld	r19, Y
    3384:	dc 01       	movw	r26, r24
    3386:	a0 5e       	subi	r26, 0xE0	; 224
    3388:	b3 4d       	sbci	r27, 0xD3	; 211
    338a:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    338c:	01 96       	adiw	r24, 0x01	; 1
    338e:	6f ef       	ldi	r22, 0xFF	; 255
    3390:	70 e0       	ldi	r23, 0x00	; 0
    3392:	0e 94 26 21 	call	0x424c	; 0x424c <__divmodhi4>
    3396:	80 83       	st	Z, r24
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    3398:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    339a:	21 96       	adiw	r28, 0x01	; 1
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    339c:	21 17       	cp	r18, r17
    339e:	68 f3       	brcs	.-38     	; 0x337a <send_USART+0x22>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    33a0:	e0 e0       	ldi	r30, 0x00	; 0
    33a2:	f8 e0       	ldi	r31, 0x08	; 8
    33a4:	85 81       	ldd	r24, Z+5	; 0x05
    33a6:	80 62       	ori	r24, 0x20	; 32
    33a8:	85 83       	std	Z+5, r24	; 0x05
			start_TCB0(10);						// 10 ms ticks
    33aa:	8a e0       	ldi	r24, 0x0A	; 10
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	0e 94 86 18 	call	0x310c	; 0x310c <start_TCB0>
			while (send0_buf.done == NO) {
    33b2:	0d c0       	rjmp	.+26     	; 0x33ce <send_USART+0x76>
				if (ticks > 100) {				// 1 second enough?
    33b4:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    33b8:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    33bc:	85 36       	cpi	r24, 0x65	; 101
    33be:	91 05       	cpc	r25, r1
    33c0:	30 f0       	brcs	.+12     	; 0x33ce <send_USART+0x76>
					stop_TCB0();
    33c2:	0e 94 9c 18 	call	0x3138	; 0x3138 <stop_TCB0>
					send0_buf.done = YES;
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	80 93 24 2d 	sts	0x2D24, r24	; 0x802d24 <send0_buf+0x104>
					return;
    33cc:	60 c0       	rjmp	.+192    	; 0x348e <send_USART+0x136>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			start_TCB0(10);						// 10 ms ticks
			while (send0_buf.done == NO) {
    33ce:	80 91 24 2d 	lds	r24, 0x2D24	; 0x802d24 <send0_buf+0x104>
    33d2:	88 23       	and	r24, r24
    33d4:	79 f3       	breq	.-34     	; 0x33b4 <send_USART+0x5c>
					stop_TCB0();
					send0_buf.done = YES;
					return;
				}
			}
			stop_TCB0();
    33d6:	0e 94 9c 18 	call	0x3138	; 0x3138 <stop_TCB0>
			break;
    33da:	59 c0       	rjmp	.+178    	; 0x348e <send_USART+0x136>

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
    33dc:	64 2f       	mov	r22, r20
    33de:	70 e0       	ldi	r23, 0x00	; 0
    33e0:	ce 01       	movw	r24, r28
    33e2:	0e 94 2c 14 	call	0x2858	; 0x2858 <crc16>
    33e6:	48 2f       	mov	r20, r24
    33e8:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	11 c0       	rjmp	.+34     	; 0x3410 <send_USART+0xb8>
				send1_buf.data[send1_buf.head] = *data++;
    33ee:	ee e2       	ldi	r30, 0x2E	; 46
    33f0:	f0 e3       	ldi	r31, 0x30	; 48
    33f2:	80 81       	ld	r24, Z
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	38 81       	ld	r19, Y
    33f8:	dc 01       	movw	r26, r24
    33fa:	a1 5d       	subi	r26, 0xD1	; 209
    33fc:	b0 4d       	sbci	r27, 0xD0	; 208
    33fe:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3400:	01 96       	adiw	r24, 0x01	; 1
    3402:	6f ef       	ldi	r22, 0xFF	; 255
    3404:	70 e0       	ldi	r23, 0x00	; 0
    3406:	0e 94 26 21 	call	0x424c	; 0x424c <__divmodhi4>
    340a:	80 83       	st	Z, r24
			stop_TCB0();
			break;

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    340c:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    340e:	21 96       	adiw	r28, 0x01	; 1
			stop_TCB0();
			break;

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    3410:	21 17       	cp	r18, r17
    3412:	68 f3       	brcs	.-38     	; 0x33ee <send_USART+0x96>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    3414:	ee e2       	ldi	r30, 0x2E	; 46
    3416:	f0 e3       	ldi	r31, 0x30	; 48
    3418:	80 81       	ld	r24, Z
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	dc 01       	movw	r26, r24
    341e:	a1 5d       	subi	r26, 0xD1	; 209
    3420:	b0 4d       	sbci	r27, 0xD0	; 208
    3422:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3424:	01 96       	adiw	r24, 0x01	; 1
    3426:	2f ef       	ldi	r18, 0xFF	; 255
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	b9 01       	movw	r22, r18
    342c:	0e 94 26 21 	call	0x424c	; 0x424c <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	dc 01       	movw	r26, r24
    3434:	a1 5d       	subi	r26, 0xD1	; 209
    3436:	b0 4d       	sbci	r27, 0xD0	; 208
    3438:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    343a:	01 96       	adiw	r24, 0x01	; 1
    343c:	b9 01       	movw	r22, r18
    343e:	0e 94 26 21 	call	0x424c	; 0x424c <__divmodhi4>
    3442:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    3444:	1e 5f       	subi	r17, 0xFE	; 254
    3446:	10 93 30 30 	sts	0x3030, r17	; 0x803030 <send1_buf+0x101>
			send1_buf.nxfrd = 0;
    344a:	10 92 32 30 	sts	0x3032, r1	; 0x803032 <send1_buf+0x103>
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    344e:	e0 e2       	ldi	r30, 0x20	; 32
    3450:	f8 e0       	ldi	r31, 0x08	; 8
    3452:	85 81       	ldd	r24, Z+5	; 0x05
    3454:	80 62       	ori	r24, 0x20	; 32
    3456:	85 83       	std	Z+5, r24	; 0x05
			break;
    3458:	1a c0       	rjmp	.+52     	; 0x348e <send_USART+0x136>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    345a:	e9 e2       	ldi	r30, 0x29	; 41
    345c:	ff e2       	ldi	r31, 0x2F	; 47
    345e:	80 81       	ld	r24, Z
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	38 81       	ld	r19, Y
    3464:	dc 01       	movw	r26, r24
    3466:	a6 5d       	subi	r26, 0xD6	; 214
    3468:	b1 4d       	sbci	r27, 0xD1	; 209
    346a:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    346c:	01 96       	adiw	r24, 0x01	; 1
    346e:	6f ef       	ldi	r22, 0xFF	; 255
    3470:	70 e0       	ldi	r23, 0x00	; 0
    3472:	0e 94 26 21 	call	0x424c	; 0x424c <__divmodhi4>
    3476:	80 83       	st	Z, r24
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    3478:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    347a:	21 96       	adiw	r28, 0x01	; 1
    347c:	01 c0       	rjmp	.+2      	; 0x3480 <send_USART+0x128>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    347e:	20 e0       	ldi	r18, 0x00	; 0
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    3480:	21 17       	cp	r18, r17
    3482:	58 f3       	brcs	.-42     	; 0x345a <send_USART+0x102>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3484:	e0 e6       	ldi	r30, 0x60	; 96
    3486:	f8 e0       	ldi	r31, 0x08	; 8
    3488:	85 81       	ldd	r24, Z+5	; 0x05
    348a:	80 62       	ori	r24, 0x20	; 32
    348c:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    348e:	df 91       	pop	r29
    3490:	cf 91       	pop	r28
    3492:	1f 91       	pop	r17
    3494:	0f 91       	pop	r16
    3496:	08 95       	ret

00003498 <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    3498:	1f 92       	push	r1
    349a:	0f 92       	push	r0
    349c:	0f b6       	in	r0, 0x3f	; 63
    349e:	0f 92       	push	r0
    34a0:	11 24       	eor	r1, r1
    34a2:	5f 93       	push	r21
    34a4:	6f 93       	push	r22
    34a6:	7f 93       	push	r23
    34a8:	8f 93       	push	r24
    34aa:	9f 93       	push	r25
    34ac:	af 93       	push	r26
    34ae:	bf 93       	push	r27
    34b0:	ef 93       	push	r30
    34b2:	ff 93       	push	r31

	uint8_t c;

	if (recv0_buf.length < BUFSIZE) {
    34b4:	80 91 1d 2c 	lds	r24, 0x2C1D	; 0x802c1d <recv0_buf+0x102>
    34b8:	8f 3f       	cpi	r24, 0xFF	; 255
    34ba:	19 f1       	breq	.+70     	; 0x3502 <__vector_17+0x6a>
		c = USART0.RXDATAL;
    34bc:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
		if ((char) c == '\r') {
    34c0:	8d 30       	cpi	r24, 0x0D	; 13
    34c2:	51 f4       	brne	.+20     	; 0x34d8 <__vector_17+0x40>
			recv0_buf.done = YES;
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	80 93 1f 2c 	sts	0x2C1F, r24	; 0x802c1f <recv0_buf+0x104>
			recv0_buf.data[recv0_buf.head] = '\0';
    34ca:	e0 91 1a 2c 	lds	r30, 0x2C1A	; 0x802c1a <recv0_buf+0xff>
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	e5 5e       	subi	r30, 0xE5	; 229
    34d2:	f4 4d       	sbci	r31, 0xD4	; 212
    34d4:	10 82       	st	Z, r1
    34d6:	06 c0       	rjmp	.+12     	; 0x34e4 <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    34d8:	e0 91 1a 2c 	lds	r30, 0x2C1A	; 0x802c1a <recv0_buf+0xff>
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	e5 5e       	subi	r30, 0xE5	; 229
    34e0:	f4 4d       	sbci	r31, 0xD4	; 212
    34e2:	80 83       	st	Z, r24
		}
		recv0_buf.length++;
    34e4:	ed e1       	ldi	r30, 0x1D	; 29
    34e6:	fc e2       	ldi	r31, 0x2C	; 44
    34e8:	80 81       	ld	r24, Z
    34ea:	8f 5f       	subi	r24, 0xFF	; 255
    34ec:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    34ee:	ea e1       	ldi	r30, 0x1A	; 26
    34f0:	fc e2       	ldi	r31, 0x2C	; 44
    34f2:	80 81       	ld	r24, Z
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	01 96       	adiw	r24, 0x01	; 1
    34f8:	6f ef       	ldi	r22, 0xFF	; 255
    34fa:	70 e0       	ldi	r23, 0x00	; 0
    34fc:	0e 94 26 21 	call	0x424c	; 0x424c <__divmodhi4>
    3500:	80 83       	st	Z, r24
	}
}
    3502:	ff 91       	pop	r31
    3504:	ef 91       	pop	r30
    3506:	bf 91       	pop	r27
    3508:	af 91       	pop	r26
    350a:	9f 91       	pop	r25
    350c:	8f 91       	pop	r24
    350e:	7f 91       	pop	r23
    3510:	6f 91       	pop	r22
    3512:	5f 91       	pop	r21
    3514:	0f 90       	pop	r0
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	0f 90       	pop	r0
    351a:	1f 90       	pop	r1
    351c:	18 95       	reti

0000351e <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    351e:	1f 92       	push	r1
    3520:	0f 92       	push	r0
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	0f 92       	push	r0
    3526:	11 24       	eor	r1, r1
    3528:	8f 93       	push	r24
    352a:	9f 93       	push	r25
    352c:	ef 93       	push	r30
    352e:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    3530:	e0 e0       	ldi	r30, 0x00	; 0
    3532:	f8 e0       	ldi	r31, 0x08	; 8
    3534:	85 81       	ldd	r24, Z+5	; 0x05
    3536:	8f 7d       	andi	r24, 0xDF	; 223
    3538:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    353a:	80 91 1f 2d 	lds	r24, 0x2D1F	; 0x802d1f <send0_buf+0xff>
    353e:	e0 91 20 2d 	lds	r30, 0x2D20	; 0x802d20 <send0_buf+0x100>
    3542:	8e 17       	cp	r24, r30
    3544:	b9 f0       	breq	.+46     	; 0x3574 <__vector_18+0x56>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    3546:	91 e0       	ldi	r25, 0x01	; 1
    3548:	9e 0f       	add	r25, r30
    354a:	90 93 20 2d 	sts	0x2D20, r25	; 0x802d20 <send0_buf+0x100>
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	e0 5e       	subi	r30, 0xE0	; 224
    3552:	f3 4d       	sbci	r31, 0xD3	; 211
    3554:	80 81       	ld	r24, Z
    3556:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	9f 3f       	cpi	r25, 0xFF	; 255
    355e:	08 f4       	brcc	.+2      	; 0x3562 <__vector_18+0x44>
    3560:	80 e0       	ldi	r24, 0x00	; 0
    3562:	89 0f       	add	r24, r25
    3564:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0x100>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    3568:	e0 e0       	ldi	r30, 0x00	; 0
    356a:	f8 e0       	ldi	r31, 0x08	; 8
    356c:	85 81       	ldd	r24, Z+5	; 0x05
    356e:	80 62       	ori	r24, 0x20	; 32
    3570:	85 83       	std	Z+5, r24	; 0x05
    3572:	03 c0       	rjmp	.+6      	; 0x357a <__vector_18+0x5c>
	} else {
		send0_buf.done = YES;
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	80 93 24 2d 	sts	0x2D24, r24	; 0x802d24 <send0_buf+0x104>
	}

}
    357a:	ff 91       	pop	r31
    357c:	ef 91       	pop	r30
    357e:	9f 91       	pop	r25
    3580:	8f 91       	pop	r24
    3582:	0f 90       	pop	r0
    3584:	0f be       	out	0x3f, r0	; 63
    3586:	0f 90       	pop	r0
    3588:	1f 90       	pop	r1
    358a:	18 95       	reti

0000358c <__vector_26>:
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.

------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    358c:	1f 92       	push	r1
    358e:	0f 92       	push	r0
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	0f 92       	push	r0
    3594:	11 24       	eor	r1, r1
    3596:	2f 93       	push	r18
    3598:	8f 93       	push	r24
    359a:	9f 93       	push	r25
    359c:	ef 93       	push	r30
    359e:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    35a0:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>

	if (recv1_buf.nxfrd < recv1_buf.nbytes) {
    35a4:	e0 91 19 2b 	lds	r30, 0x2B19	; 0x802b19 <recv1_buf+0x103>
    35a8:	80 91 17 2b 	lds	r24, 0x2B17	; 0x802b17 <recv1_buf+0x101>
    35ac:	e8 17       	cp	r30, r24
    35ae:	40 f4       	brcc	.+16     	; 0x35c0 <__vector_26+0x34>
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    35b0:	21 e0       	ldi	r18, 0x01	; 1
    35b2:	2e 0f       	add	r18, r30
    35b4:	20 93 19 2b 	sts	0x2B19, r18	; 0x802b19 <recv1_buf+0x103>
    35b8:	f0 e0       	ldi	r31, 0x00	; 0
    35ba:	ea 5e       	subi	r30, 0xEA	; 234
    35bc:	f5 4d       	sbci	r31, 0xD5	; 213
    35be:	90 83       	st	Z, r25
	}

	if (recv1_buf.nxfrd >= recv1_buf.nbytes) {
    35c0:	90 91 19 2b 	lds	r25, 0x2B19	; 0x802b19 <recv1_buf+0x103>
    35c4:	98 17       	cp	r25, r24
    35c6:	18 f0       	brcs	.+6      	; 0x35ce <__vector_26+0x42>
		recv1_buf.done = YES;
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	80 93 1a 2b 	sts	0x2B1A, r24	; 0x802b1a <recv1_buf+0x104>
	}

}
    35ce:	ff 91       	pop	r31
    35d0:	ef 91       	pop	r30
    35d2:	9f 91       	pop	r25
    35d4:	8f 91       	pop	r24
    35d6:	2f 91       	pop	r18
    35d8:	0f 90       	pop	r0
    35da:	0f be       	out	0x3f, r0	; 63
    35dc:	0f 90       	pop	r0
    35de:	1f 90       	pop	r1
    35e0:	18 95       	reti

000035e2 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    35e2:	1f 92       	push	r1
    35e4:	0f 92       	push	r0
    35e6:	0f b6       	in	r0, 0x3f	; 63
    35e8:	0f 92       	push	r0
    35ea:	11 24       	eor	r1, r1
    35ec:	8f 93       	push	r24
    35ee:	9f 93       	push	r25
    35f0:	ef 93       	push	r30
    35f2:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    35f4:	e0 e2       	ldi	r30, 0x20	; 32
    35f6:	f8 e0       	ldi	r31, 0x08	; 8
    35f8:	85 81       	ldd	r24, Z+5	; 0x05
    35fa:	8f 7d       	andi	r24, 0xDF	; 223
    35fc:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    35fe:	80 91 2e 30 	lds	r24, 0x302E	; 0x80302e <send1_buf+0xff>
    3602:	e0 91 2f 30 	lds	r30, 0x302F	; 0x80302f <send1_buf+0x100>
    3606:	8e 17       	cp	r24, r30
    3608:	b9 f0       	breq	.+46     	; 0x3638 <__vector_27+0x56>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    360a:	91 e0       	ldi	r25, 0x01	; 1
    360c:	9e 0f       	add	r25, r30
    360e:	90 93 2f 30 	sts	0x302F, r25	; 0x80302f <send1_buf+0x100>
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	e1 5d       	subi	r30, 0xD1	; 209
    3616:	f0 4d       	sbci	r31, 0xD0	; 208
    3618:	80 81       	ld	r24, Z
    361a:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	9f 3f       	cpi	r25, 0xFF	; 255
    3622:	08 f4       	brcc	.+2      	; 0x3626 <__vector_27+0x44>
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	89 0f       	add	r24, r25
    3628:	80 93 2f 30 	sts	0x302F, r24	; 0x80302f <send1_buf+0x100>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    362c:	e0 e2       	ldi	r30, 0x20	; 32
    362e:	f8 e0       	ldi	r31, 0x08	; 8
    3630:	85 81       	ldd	r24, Z+5	; 0x05
    3632:	80 62       	ori	r24, 0x20	; 32
    3634:	85 83       	std	Z+5, r24	; 0x05
    3636:	03 c0       	rjmp	.+6      	; 0x363e <__vector_27+0x5c>
	} else {
		send1_buf.done = YES;
    3638:	81 e0       	ldi	r24, 0x01	; 1
    363a:	80 93 33 30 	sts	0x3033, r24	; 0x803033 <send1_buf+0x104>
	}

}
    363e:	ff 91       	pop	r31
    3640:	ef 91       	pop	r30
    3642:	9f 91       	pop	r25
    3644:	8f 91       	pop	r24
    3646:	0f 90       	pop	r0
    3648:	0f be       	out	0x3f, r0	; 63
    364a:	0f 90       	pop	r0
    364c:	1f 90       	pop	r1
    364e:	18 95       	reti

00003650 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    3650:	1f 92       	push	r1
    3652:	0f 92       	push	r0
    3654:	0f b6       	in	r0, 0x3f	; 63
    3656:	0f 92       	push	r0
    3658:	11 24       	eor	r1, r1
    365a:	8f 93       	push	r24
    365c:	9f 93       	push	r25
    365e:	af 93       	push	r26
    3660:	bf 93       	push	r27
    3662:	ef 93       	push	r30
    3664:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    3666:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    366a:	8d 30       	cpi	r24, 0x0D	; 13
    366c:	21 f0       	breq	.+8      	; 0x3676 <__vector_37+0x26>
    366e:	e0 91 28 2e 	lds	r30, 0x2E28	; 0x802e28 <recv3_buf+0x103>
    3672:	ee 3f       	cpi	r30, 0xFE	; 254
    3674:	78 f0       	brcs	.+30     	; 0x3694 <__vector_37+0x44>
		recv3_buf.done = YES;
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	80 93 29 2e 	sts	0x2E29, r24	; 0x802e29 <recv3_buf+0x104>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    367c:	a8 e2       	ldi	r26, 0x28	; 40
    367e:	be e2       	ldi	r27, 0x2E	; 46
    3680:	8c 91       	ld	r24, X
    3682:	e8 2f       	mov	r30, r24
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	eb 5d       	subi	r30, 0xDB	; 219
    3688:	f2 4d       	sbci	r31, 0xD2	; 210
    368a:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    368c:	80 93 26 2e 	sts	0x2E26, r24	; 0x802e26 <recv3_buf+0x101>
		recv3_buf.nxfrd = 0;
    3690:	1c 92       	st	X, r1
		return;
    3692:	08 c0       	rjmp	.+16     	; 0x36a4 <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    3694:	91 e0       	ldi	r25, 0x01	; 1
    3696:	9e 0f       	add	r25, r30
    3698:	90 93 28 2e 	sts	0x2E28, r25	; 0x802e28 <recv3_buf+0x103>
    369c:	f0 e0       	ldi	r31, 0x00	; 0
    369e:	eb 5d       	subi	r30, 0xDB	; 219
    36a0:	f2 4d       	sbci	r31, 0xD2	; 210
    36a2:	80 83       	st	Z, r24
	}

}
    36a4:	ff 91       	pop	r31
    36a6:	ef 91       	pop	r30
    36a8:	bf 91       	pop	r27
    36aa:	af 91       	pop	r26
    36ac:	9f 91       	pop	r25
    36ae:	8f 91       	pop	r24
    36b0:	0f 90       	pop	r0
    36b2:	0f be       	out	0x3f, r0	; 63
    36b4:	0f 90       	pop	r0
    36b6:	1f 90       	pop	r1
    36b8:	18 95       	reti

000036ba <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    36ba:	1f 92       	push	r1
    36bc:	0f 92       	push	r0
    36be:	0f b6       	in	r0, 0x3f	; 63
    36c0:	0f 92       	push	r0
    36c2:	11 24       	eor	r1, r1
    36c4:	8f 93       	push	r24
    36c6:	9f 93       	push	r25
    36c8:	af 93       	push	r26
    36ca:	bf 93       	push	r27
    36cc:	ef 93       	push	r30
    36ce:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    36d0:	ad e2       	ldi	r26, 0x2D	; 45
    36d2:	bf e2       	ldi	r27, 0x2F	; 47
    36d4:	ec 91       	ld	r30, X
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	8e 0f       	add	r24, r30
    36da:	8c 93       	st	X, r24
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	e6 5d       	subi	r30, 0xD6	; 214
    36e0:	f1 4d       	sbci	r31, 0xD1	; 209
    36e2:	90 81       	ld	r25, Z
    36e4:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    36e8:	90 91 2b 2f 	lds	r25, 0x2F2B	; 0x802f2b <send3_buf+0x101>
    36ec:	89 17       	cp	r24, r25
    36ee:	40 f0       	brcs	.+16     	; 0x3700 <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    36f0:	e0 e6       	ldi	r30, 0x60	; 96
    36f2:	f8 e0       	ldi	r31, 0x08	; 8
    36f4:	85 81       	ldd	r24, Z+5	; 0x05
    36f6:	8f 7d       	andi	r24, 0xDF	; 223
    36f8:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	80 93 2e 2f 	sts	0x2F2E, r24	; 0x802f2e <send3_buf+0x104>
	}

}
    3700:	ff 91       	pop	r31
    3702:	ef 91       	pop	r30
    3704:	bf 91       	pop	r27
    3706:	af 91       	pop	r26
    3708:	9f 91       	pop	r25
    370a:	8f 91       	pop	r24
    370c:	0f 90       	pop	r0
    370e:	0f be       	out	0x3f, r0	; 63
    3710:	0f 90       	pop	r0
    3712:	1f 90       	pop	r1
    3714:	18 95       	reti

00003716 <reboot>:
#include "wdt.h"

void reboot(void)
{

	init_USART();
    3716:	0e 94 54 19 	call	0x32a8	; 0x32a8 <init_USART>
	init_XPORT();
    371a:	0e 94 95 1b 	call	0x372a	; 0x372a <init_XPORT>
	CPU_CCP = CCP_IOREG_gc;
    371e:	88 ed       	ldi	r24, 0xD8	; 216
    3720:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    3728:	08 95       	ret

0000372a <init_XPORT>:
#include "initialize.h"

void init_XPORT(void)
{

	PORTC.OUTCLR = PIN3_bm;		// PC3 is the /RESET pin for the XPort
    372a:	e0 e4       	ldi	r30, 0x40	; 64
    372c:	f4 e0       	ldi	r31, 0x04	; 4
    372e:	88 e0       	ldi	r24, 0x08	; 8
    3730:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;
    3732:	81 83       	std	Z+1, r24	; 0x01
    3734:	ad e8       	ldi	r26, 0x8D	; 141
    3736:	b0 e2       	ldi	r27, 0x20	; 32
    3738:	11 97       	sbiw	r26, 0x01	; 1
    373a:	f1 f7       	brne	.-4      	; 0x3738 <init_XPORT+0xe>
    373c:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;
    373e:	85 83       	std	Z+5, r24	; 0x05
    3740:	08 95       	ret

00003742 <__subsf3>:
    3742:	50 58       	subi	r21, 0x80	; 128

00003744 <__addsf3>:
    3744:	bb 27       	eor	r27, r27
    3746:	aa 27       	eor	r26, r26
    3748:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__addsf3x>
    374c:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <__fp_round>
    3750:	0e 94 ef 1c 	call	0x39de	; 0x39de <__fp_pscA>
    3754:	38 f0       	brcs	.+14     	; 0x3764 <__addsf3+0x20>
    3756:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__fp_pscB>
    375a:	20 f0       	brcs	.+8      	; 0x3764 <__addsf3+0x20>
    375c:	39 f4       	brne	.+14     	; 0x376c <__addsf3+0x28>
    375e:	9f 3f       	cpi	r25, 0xFF	; 255
    3760:	19 f4       	brne	.+6      	; 0x3768 <__addsf3+0x24>
    3762:	26 f4       	brtc	.+8      	; 0x376c <__addsf3+0x28>
    3764:	0c 94 ec 1c 	jmp	0x39d8	; 0x39d8 <__fp_nan>
    3768:	0e f4       	brtc	.+2      	; 0x376c <__addsf3+0x28>
    376a:	e0 95       	com	r30
    376c:	e7 fb       	bst	r30, 7
    376e:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__fp_inf>

00003772 <__addsf3x>:
    3772:	e9 2f       	mov	r30, r25
    3774:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__fp_split3>
    3778:	58 f3       	brcs	.-42     	; 0x3750 <__addsf3+0xc>
    377a:	ba 17       	cp	r27, r26
    377c:	62 07       	cpc	r22, r18
    377e:	73 07       	cpc	r23, r19
    3780:	84 07       	cpc	r24, r20
    3782:	95 07       	cpc	r25, r21
    3784:	20 f0       	brcs	.+8      	; 0x378e <__addsf3x+0x1c>
    3786:	79 f4       	brne	.+30     	; 0x37a6 <__addsf3x+0x34>
    3788:	a6 f5       	brtc	.+104    	; 0x37f2 <__addsf3x+0x80>
    378a:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__fp_zero>
    378e:	0e f4       	brtc	.+2      	; 0x3792 <__addsf3x+0x20>
    3790:	e0 95       	com	r30
    3792:	0b 2e       	mov	r0, r27
    3794:	ba 2f       	mov	r27, r26
    3796:	a0 2d       	mov	r26, r0
    3798:	0b 01       	movw	r0, r22
    379a:	b9 01       	movw	r22, r18
    379c:	90 01       	movw	r18, r0
    379e:	0c 01       	movw	r0, r24
    37a0:	ca 01       	movw	r24, r20
    37a2:	a0 01       	movw	r20, r0
    37a4:	11 24       	eor	r1, r1
    37a6:	ff 27       	eor	r31, r31
    37a8:	59 1b       	sub	r21, r25
    37aa:	99 f0       	breq	.+38     	; 0x37d2 <__addsf3x+0x60>
    37ac:	59 3f       	cpi	r21, 0xF9	; 249
    37ae:	50 f4       	brcc	.+20     	; 0x37c4 <__addsf3x+0x52>
    37b0:	50 3e       	cpi	r21, 0xE0	; 224
    37b2:	68 f1       	brcs	.+90     	; 0x380e <__addsf3x+0x9c>
    37b4:	1a 16       	cp	r1, r26
    37b6:	f0 40       	sbci	r31, 0x00	; 0
    37b8:	a2 2f       	mov	r26, r18
    37ba:	23 2f       	mov	r18, r19
    37bc:	34 2f       	mov	r19, r20
    37be:	44 27       	eor	r20, r20
    37c0:	58 5f       	subi	r21, 0xF8	; 248
    37c2:	f3 cf       	rjmp	.-26     	; 0x37aa <__addsf3x+0x38>
    37c4:	46 95       	lsr	r20
    37c6:	37 95       	ror	r19
    37c8:	27 95       	ror	r18
    37ca:	a7 95       	ror	r26
    37cc:	f0 40       	sbci	r31, 0x00	; 0
    37ce:	53 95       	inc	r21
    37d0:	c9 f7       	brne	.-14     	; 0x37c4 <__addsf3x+0x52>
    37d2:	7e f4       	brtc	.+30     	; 0x37f2 <__addsf3x+0x80>
    37d4:	1f 16       	cp	r1, r31
    37d6:	ba 0b       	sbc	r27, r26
    37d8:	62 0b       	sbc	r22, r18
    37da:	73 0b       	sbc	r23, r19
    37dc:	84 0b       	sbc	r24, r20
    37de:	ba f0       	brmi	.+46     	; 0x380e <__addsf3x+0x9c>
    37e0:	91 50       	subi	r25, 0x01	; 1
    37e2:	a1 f0       	breq	.+40     	; 0x380c <__addsf3x+0x9a>
    37e4:	ff 0f       	add	r31, r31
    37e6:	bb 1f       	adc	r27, r27
    37e8:	66 1f       	adc	r22, r22
    37ea:	77 1f       	adc	r23, r23
    37ec:	88 1f       	adc	r24, r24
    37ee:	c2 f7       	brpl	.-16     	; 0x37e0 <__addsf3x+0x6e>
    37f0:	0e c0       	rjmp	.+28     	; 0x380e <__addsf3x+0x9c>
    37f2:	ba 0f       	add	r27, r26
    37f4:	62 1f       	adc	r22, r18
    37f6:	73 1f       	adc	r23, r19
    37f8:	84 1f       	adc	r24, r20
    37fa:	48 f4       	brcc	.+18     	; 0x380e <__addsf3x+0x9c>
    37fc:	87 95       	ror	r24
    37fe:	77 95       	ror	r23
    3800:	67 95       	ror	r22
    3802:	b7 95       	ror	r27
    3804:	f7 95       	ror	r31
    3806:	9e 3f       	cpi	r25, 0xFE	; 254
    3808:	08 f0       	brcs	.+2      	; 0x380c <__addsf3x+0x9a>
    380a:	b0 cf       	rjmp	.-160    	; 0x376c <__addsf3+0x28>
    380c:	93 95       	inc	r25
    380e:	88 0f       	add	r24, r24
    3810:	08 f0       	brcs	.+2      	; 0x3814 <__addsf3x+0xa2>
    3812:	99 27       	eor	r25, r25
    3814:	ee 0f       	add	r30, r30
    3816:	97 95       	ror	r25
    3818:	87 95       	ror	r24
    381a:	08 95       	ret

0000381c <__cmpsf2>:
    381c:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__fp_cmp>
    3820:	08 f4       	brcc	.+2      	; 0x3824 <__cmpsf2+0x8>
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	08 95       	ret

00003826 <__divsf3>:
    3826:	0e 94 27 1c 	call	0x384e	; 0x384e <__divsf3x>
    382a:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <__fp_round>
    382e:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__fp_pscB>
    3832:	58 f0       	brcs	.+22     	; 0x384a <__divsf3+0x24>
    3834:	0e 94 ef 1c 	call	0x39de	; 0x39de <__fp_pscA>
    3838:	40 f0       	brcs	.+16     	; 0x384a <__divsf3+0x24>
    383a:	29 f4       	brne	.+10     	; 0x3846 <__divsf3+0x20>
    383c:	5f 3f       	cpi	r21, 0xFF	; 255
    383e:	29 f0       	breq	.+10     	; 0x384a <__divsf3+0x24>
    3840:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__fp_inf>
    3844:	51 11       	cpse	r21, r1
    3846:	0c 94 31 1d 	jmp	0x3a62	; 0x3a62 <__fp_szero>
    384a:	0c 94 ec 1c 	jmp	0x39d8	; 0x39d8 <__fp_nan>

0000384e <__divsf3x>:
    384e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__fp_split3>
    3852:	68 f3       	brcs	.-38     	; 0x382e <__divsf3+0x8>

00003854 <__divsf3_pse>:
    3854:	99 23       	and	r25, r25
    3856:	b1 f3       	breq	.-20     	; 0x3844 <__divsf3+0x1e>
    3858:	55 23       	and	r21, r21
    385a:	91 f3       	breq	.-28     	; 0x3840 <__divsf3+0x1a>
    385c:	95 1b       	sub	r25, r21
    385e:	55 0b       	sbc	r21, r21
    3860:	bb 27       	eor	r27, r27
    3862:	aa 27       	eor	r26, r26
    3864:	62 17       	cp	r22, r18
    3866:	73 07       	cpc	r23, r19
    3868:	84 07       	cpc	r24, r20
    386a:	38 f0       	brcs	.+14     	; 0x387a <__divsf3_pse+0x26>
    386c:	9f 5f       	subi	r25, 0xFF	; 255
    386e:	5f 4f       	sbci	r21, 0xFF	; 255
    3870:	22 0f       	add	r18, r18
    3872:	33 1f       	adc	r19, r19
    3874:	44 1f       	adc	r20, r20
    3876:	aa 1f       	adc	r26, r26
    3878:	a9 f3       	breq	.-22     	; 0x3864 <__divsf3_pse+0x10>
    387a:	35 d0       	rcall	.+106    	; 0x38e6 <__divsf3_pse+0x92>
    387c:	0e 2e       	mov	r0, r30
    387e:	3a f0       	brmi	.+14     	; 0x388e <__divsf3_pse+0x3a>
    3880:	e0 e8       	ldi	r30, 0x80	; 128
    3882:	32 d0       	rcall	.+100    	; 0x38e8 <__divsf3_pse+0x94>
    3884:	91 50       	subi	r25, 0x01	; 1
    3886:	50 40       	sbci	r21, 0x00	; 0
    3888:	e6 95       	lsr	r30
    388a:	00 1c       	adc	r0, r0
    388c:	ca f7       	brpl	.-14     	; 0x3880 <__divsf3_pse+0x2c>
    388e:	2b d0       	rcall	.+86     	; 0x38e6 <__divsf3_pse+0x92>
    3890:	fe 2f       	mov	r31, r30
    3892:	29 d0       	rcall	.+82     	; 0x38e6 <__divsf3_pse+0x92>
    3894:	66 0f       	add	r22, r22
    3896:	77 1f       	adc	r23, r23
    3898:	88 1f       	adc	r24, r24
    389a:	bb 1f       	adc	r27, r27
    389c:	26 17       	cp	r18, r22
    389e:	37 07       	cpc	r19, r23
    38a0:	48 07       	cpc	r20, r24
    38a2:	ab 07       	cpc	r26, r27
    38a4:	b0 e8       	ldi	r27, 0x80	; 128
    38a6:	09 f0       	breq	.+2      	; 0x38aa <__divsf3_pse+0x56>
    38a8:	bb 0b       	sbc	r27, r27
    38aa:	80 2d       	mov	r24, r0
    38ac:	bf 01       	movw	r22, r30
    38ae:	ff 27       	eor	r31, r31
    38b0:	93 58       	subi	r25, 0x83	; 131
    38b2:	5f 4f       	sbci	r21, 0xFF	; 255
    38b4:	3a f0       	brmi	.+14     	; 0x38c4 <__divsf3_pse+0x70>
    38b6:	9e 3f       	cpi	r25, 0xFE	; 254
    38b8:	51 05       	cpc	r21, r1
    38ba:	78 f0       	brcs	.+30     	; 0x38da <__divsf3_pse+0x86>
    38bc:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__fp_inf>
    38c0:	0c 94 31 1d 	jmp	0x3a62	; 0x3a62 <__fp_szero>
    38c4:	5f 3f       	cpi	r21, 0xFF	; 255
    38c6:	e4 f3       	brlt	.-8      	; 0x38c0 <__divsf3_pse+0x6c>
    38c8:	98 3e       	cpi	r25, 0xE8	; 232
    38ca:	d4 f3       	brlt	.-12     	; 0x38c0 <__divsf3_pse+0x6c>
    38cc:	86 95       	lsr	r24
    38ce:	77 95       	ror	r23
    38d0:	67 95       	ror	r22
    38d2:	b7 95       	ror	r27
    38d4:	f7 95       	ror	r31
    38d6:	9f 5f       	subi	r25, 0xFF	; 255
    38d8:	c9 f7       	brne	.-14     	; 0x38cc <__divsf3_pse+0x78>
    38da:	88 0f       	add	r24, r24
    38dc:	91 1d       	adc	r25, r1
    38de:	96 95       	lsr	r25
    38e0:	87 95       	ror	r24
    38e2:	97 f9       	bld	r25, 7
    38e4:	08 95       	ret
    38e6:	e1 e0       	ldi	r30, 0x01	; 1
    38e8:	66 0f       	add	r22, r22
    38ea:	77 1f       	adc	r23, r23
    38ec:	88 1f       	adc	r24, r24
    38ee:	bb 1f       	adc	r27, r27
    38f0:	62 17       	cp	r22, r18
    38f2:	73 07       	cpc	r23, r19
    38f4:	84 07       	cpc	r24, r20
    38f6:	ba 07       	cpc	r27, r26
    38f8:	20 f0       	brcs	.+8      	; 0x3902 <__divsf3_pse+0xae>
    38fa:	62 1b       	sub	r22, r18
    38fc:	73 0b       	sbc	r23, r19
    38fe:	84 0b       	sbc	r24, r20
    3900:	ba 0b       	sbc	r27, r26
    3902:	ee 1f       	adc	r30, r30
    3904:	88 f7       	brcc	.-30     	; 0x38e8 <__divsf3_pse+0x94>
    3906:	e0 95       	com	r30
    3908:	08 95       	ret

0000390a <__floatunsisf>:
    390a:	e8 94       	clt
    390c:	09 c0       	rjmp	.+18     	; 0x3920 <__floatsisf+0x12>

0000390e <__floatsisf>:
    390e:	97 fb       	bst	r25, 7
    3910:	3e f4       	brtc	.+14     	; 0x3920 <__floatsisf+0x12>
    3912:	90 95       	com	r25
    3914:	80 95       	com	r24
    3916:	70 95       	com	r23
    3918:	61 95       	neg	r22
    391a:	7f 4f       	sbci	r23, 0xFF	; 255
    391c:	8f 4f       	sbci	r24, 0xFF	; 255
    391e:	9f 4f       	sbci	r25, 0xFF	; 255
    3920:	99 23       	and	r25, r25
    3922:	a9 f0       	breq	.+42     	; 0x394e <__floatsisf+0x40>
    3924:	f9 2f       	mov	r31, r25
    3926:	96 e9       	ldi	r25, 0x96	; 150
    3928:	bb 27       	eor	r27, r27
    392a:	93 95       	inc	r25
    392c:	f6 95       	lsr	r31
    392e:	87 95       	ror	r24
    3930:	77 95       	ror	r23
    3932:	67 95       	ror	r22
    3934:	b7 95       	ror	r27
    3936:	f1 11       	cpse	r31, r1
    3938:	f8 cf       	rjmp	.-16     	; 0x392a <__floatsisf+0x1c>
    393a:	fa f4       	brpl	.+62     	; 0x397a <__floatsisf+0x6c>
    393c:	bb 0f       	add	r27, r27
    393e:	11 f4       	brne	.+4      	; 0x3944 <__floatsisf+0x36>
    3940:	60 ff       	sbrs	r22, 0
    3942:	1b c0       	rjmp	.+54     	; 0x397a <__floatsisf+0x6c>
    3944:	6f 5f       	subi	r22, 0xFF	; 255
    3946:	7f 4f       	sbci	r23, 0xFF	; 255
    3948:	8f 4f       	sbci	r24, 0xFF	; 255
    394a:	9f 4f       	sbci	r25, 0xFF	; 255
    394c:	16 c0       	rjmp	.+44     	; 0x397a <__floatsisf+0x6c>
    394e:	88 23       	and	r24, r24
    3950:	11 f0       	breq	.+4      	; 0x3956 <__floatsisf+0x48>
    3952:	96 e9       	ldi	r25, 0x96	; 150
    3954:	11 c0       	rjmp	.+34     	; 0x3978 <__floatsisf+0x6a>
    3956:	77 23       	and	r23, r23
    3958:	21 f0       	breq	.+8      	; 0x3962 <__floatsisf+0x54>
    395a:	9e e8       	ldi	r25, 0x8E	; 142
    395c:	87 2f       	mov	r24, r23
    395e:	76 2f       	mov	r23, r22
    3960:	05 c0       	rjmp	.+10     	; 0x396c <__floatsisf+0x5e>
    3962:	66 23       	and	r22, r22
    3964:	71 f0       	breq	.+28     	; 0x3982 <__floatsisf+0x74>
    3966:	96 e8       	ldi	r25, 0x86	; 134
    3968:	86 2f       	mov	r24, r22
    396a:	70 e0       	ldi	r23, 0x00	; 0
    396c:	60 e0       	ldi	r22, 0x00	; 0
    396e:	2a f0       	brmi	.+10     	; 0x397a <__floatsisf+0x6c>
    3970:	9a 95       	dec	r25
    3972:	66 0f       	add	r22, r22
    3974:	77 1f       	adc	r23, r23
    3976:	88 1f       	adc	r24, r24
    3978:	da f7       	brpl	.-10     	; 0x3970 <__floatsisf+0x62>
    397a:	88 0f       	add	r24, r24
    397c:	96 95       	lsr	r25
    397e:	87 95       	ror	r24
    3980:	97 f9       	bld	r25, 7
    3982:	08 95       	ret

00003984 <__fp_cmp>:
    3984:	99 0f       	add	r25, r25
    3986:	00 08       	sbc	r0, r0
    3988:	55 0f       	add	r21, r21
    398a:	aa 0b       	sbc	r26, r26
    398c:	e0 e8       	ldi	r30, 0x80	; 128
    398e:	fe ef       	ldi	r31, 0xFE	; 254
    3990:	16 16       	cp	r1, r22
    3992:	17 06       	cpc	r1, r23
    3994:	e8 07       	cpc	r30, r24
    3996:	f9 07       	cpc	r31, r25
    3998:	c0 f0       	brcs	.+48     	; 0x39ca <__fp_cmp+0x46>
    399a:	12 16       	cp	r1, r18
    399c:	13 06       	cpc	r1, r19
    399e:	e4 07       	cpc	r30, r20
    39a0:	f5 07       	cpc	r31, r21
    39a2:	98 f0       	brcs	.+38     	; 0x39ca <__fp_cmp+0x46>
    39a4:	62 1b       	sub	r22, r18
    39a6:	73 0b       	sbc	r23, r19
    39a8:	84 0b       	sbc	r24, r20
    39aa:	95 0b       	sbc	r25, r21
    39ac:	39 f4       	brne	.+14     	; 0x39bc <__fp_cmp+0x38>
    39ae:	0a 26       	eor	r0, r26
    39b0:	61 f0       	breq	.+24     	; 0x39ca <__fp_cmp+0x46>
    39b2:	23 2b       	or	r18, r19
    39b4:	24 2b       	or	r18, r20
    39b6:	25 2b       	or	r18, r21
    39b8:	21 f4       	brne	.+8      	; 0x39c2 <__fp_cmp+0x3e>
    39ba:	08 95       	ret
    39bc:	0a 26       	eor	r0, r26
    39be:	09 f4       	brne	.+2      	; 0x39c2 <__fp_cmp+0x3e>
    39c0:	a1 40       	sbci	r26, 0x01	; 1
    39c2:	a6 95       	lsr	r26
    39c4:	8f ef       	ldi	r24, 0xFF	; 255
    39c6:	81 1d       	adc	r24, r1
    39c8:	81 1d       	adc	r24, r1
    39ca:	08 95       	ret

000039cc <__fp_inf>:
    39cc:	97 f9       	bld	r25, 7
    39ce:	9f 67       	ori	r25, 0x7F	; 127
    39d0:	80 e8       	ldi	r24, 0x80	; 128
    39d2:	70 e0       	ldi	r23, 0x00	; 0
    39d4:	60 e0       	ldi	r22, 0x00	; 0
    39d6:	08 95       	ret

000039d8 <__fp_nan>:
    39d8:	9f ef       	ldi	r25, 0xFF	; 255
    39da:	80 ec       	ldi	r24, 0xC0	; 192
    39dc:	08 95       	ret

000039de <__fp_pscA>:
    39de:	00 24       	eor	r0, r0
    39e0:	0a 94       	dec	r0
    39e2:	16 16       	cp	r1, r22
    39e4:	17 06       	cpc	r1, r23
    39e6:	18 06       	cpc	r1, r24
    39e8:	09 06       	cpc	r0, r25
    39ea:	08 95       	ret

000039ec <__fp_pscB>:
    39ec:	00 24       	eor	r0, r0
    39ee:	0a 94       	dec	r0
    39f0:	12 16       	cp	r1, r18
    39f2:	13 06       	cpc	r1, r19
    39f4:	14 06       	cpc	r1, r20
    39f6:	05 06       	cpc	r0, r21
    39f8:	08 95       	ret

000039fa <__fp_round>:
    39fa:	09 2e       	mov	r0, r25
    39fc:	03 94       	inc	r0
    39fe:	00 0c       	add	r0, r0
    3a00:	11 f4       	brne	.+4      	; 0x3a06 <__fp_round+0xc>
    3a02:	88 23       	and	r24, r24
    3a04:	52 f0       	brmi	.+20     	; 0x3a1a <__fp_round+0x20>
    3a06:	bb 0f       	add	r27, r27
    3a08:	40 f4       	brcc	.+16     	; 0x3a1a <__fp_round+0x20>
    3a0a:	bf 2b       	or	r27, r31
    3a0c:	11 f4       	brne	.+4      	; 0x3a12 <__fp_round+0x18>
    3a0e:	60 ff       	sbrs	r22, 0
    3a10:	04 c0       	rjmp	.+8      	; 0x3a1a <__fp_round+0x20>
    3a12:	6f 5f       	subi	r22, 0xFF	; 255
    3a14:	7f 4f       	sbci	r23, 0xFF	; 255
    3a16:	8f 4f       	sbci	r24, 0xFF	; 255
    3a18:	9f 4f       	sbci	r25, 0xFF	; 255
    3a1a:	08 95       	ret

00003a1c <__fp_split3>:
    3a1c:	57 fd       	sbrc	r21, 7
    3a1e:	90 58       	subi	r25, 0x80	; 128
    3a20:	44 0f       	add	r20, r20
    3a22:	55 1f       	adc	r21, r21
    3a24:	59 f0       	breq	.+22     	; 0x3a3c <__fp_splitA+0x10>
    3a26:	5f 3f       	cpi	r21, 0xFF	; 255
    3a28:	71 f0       	breq	.+28     	; 0x3a46 <__fp_splitA+0x1a>
    3a2a:	47 95       	ror	r20

00003a2c <__fp_splitA>:
    3a2c:	88 0f       	add	r24, r24
    3a2e:	97 fb       	bst	r25, 7
    3a30:	99 1f       	adc	r25, r25
    3a32:	61 f0       	breq	.+24     	; 0x3a4c <__fp_splitA+0x20>
    3a34:	9f 3f       	cpi	r25, 0xFF	; 255
    3a36:	79 f0       	breq	.+30     	; 0x3a56 <__fp_splitA+0x2a>
    3a38:	87 95       	ror	r24
    3a3a:	08 95       	ret
    3a3c:	12 16       	cp	r1, r18
    3a3e:	13 06       	cpc	r1, r19
    3a40:	14 06       	cpc	r1, r20
    3a42:	55 1f       	adc	r21, r21
    3a44:	f2 cf       	rjmp	.-28     	; 0x3a2a <__fp_split3+0xe>
    3a46:	46 95       	lsr	r20
    3a48:	f1 df       	rcall	.-30     	; 0x3a2c <__fp_splitA>
    3a4a:	08 c0       	rjmp	.+16     	; 0x3a5c <__fp_splitA+0x30>
    3a4c:	16 16       	cp	r1, r22
    3a4e:	17 06       	cpc	r1, r23
    3a50:	18 06       	cpc	r1, r24
    3a52:	99 1f       	adc	r25, r25
    3a54:	f1 cf       	rjmp	.-30     	; 0x3a38 <__fp_splitA+0xc>
    3a56:	86 95       	lsr	r24
    3a58:	71 05       	cpc	r23, r1
    3a5a:	61 05       	cpc	r22, r1
    3a5c:	08 94       	sec
    3a5e:	08 95       	ret

00003a60 <__fp_zero>:
    3a60:	e8 94       	clt

00003a62 <__fp_szero>:
    3a62:	bb 27       	eor	r27, r27
    3a64:	66 27       	eor	r22, r22
    3a66:	77 27       	eor	r23, r23
    3a68:	cb 01       	movw	r24, r22
    3a6a:	97 f9       	bld	r25, 7
    3a6c:	08 95       	ret

00003a6e <__gesf2>:
    3a6e:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__fp_cmp>
    3a72:	08 f4       	brcc	.+2      	; 0x3a76 <__gesf2+0x8>
    3a74:	8f ef       	ldi	r24, 0xFF	; 255
    3a76:	08 95       	ret

00003a78 <__mulsf3>:
    3a78:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__mulsf3x>
    3a7c:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <__fp_round>
    3a80:	0e 94 ef 1c 	call	0x39de	; 0x39de <__fp_pscA>
    3a84:	38 f0       	brcs	.+14     	; 0x3a94 <__mulsf3+0x1c>
    3a86:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <__fp_pscB>
    3a8a:	20 f0       	brcs	.+8      	; 0x3a94 <__mulsf3+0x1c>
    3a8c:	95 23       	and	r25, r21
    3a8e:	11 f0       	breq	.+4      	; 0x3a94 <__mulsf3+0x1c>
    3a90:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__fp_inf>
    3a94:	0c 94 ec 1c 	jmp	0x39d8	; 0x39d8 <__fp_nan>
    3a98:	11 24       	eor	r1, r1
    3a9a:	0c 94 31 1d 	jmp	0x3a62	; 0x3a62 <__fp_szero>

00003a9e <__mulsf3x>:
    3a9e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__fp_split3>
    3aa2:	70 f3       	brcs	.-36     	; 0x3a80 <__mulsf3+0x8>

00003aa4 <__mulsf3_pse>:
    3aa4:	95 9f       	mul	r25, r21
    3aa6:	c1 f3       	breq	.-16     	; 0x3a98 <__mulsf3+0x20>
    3aa8:	95 0f       	add	r25, r21
    3aaa:	50 e0       	ldi	r21, 0x00	; 0
    3aac:	55 1f       	adc	r21, r21
    3aae:	62 9f       	mul	r22, r18
    3ab0:	f0 01       	movw	r30, r0
    3ab2:	72 9f       	mul	r23, r18
    3ab4:	bb 27       	eor	r27, r27
    3ab6:	f0 0d       	add	r31, r0
    3ab8:	b1 1d       	adc	r27, r1
    3aba:	63 9f       	mul	r22, r19
    3abc:	aa 27       	eor	r26, r26
    3abe:	f0 0d       	add	r31, r0
    3ac0:	b1 1d       	adc	r27, r1
    3ac2:	aa 1f       	adc	r26, r26
    3ac4:	64 9f       	mul	r22, r20
    3ac6:	66 27       	eor	r22, r22
    3ac8:	b0 0d       	add	r27, r0
    3aca:	a1 1d       	adc	r26, r1
    3acc:	66 1f       	adc	r22, r22
    3ace:	82 9f       	mul	r24, r18
    3ad0:	22 27       	eor	r18, r18
    3ad2:	b0 0d       	add	r27, r0
    3ad4:	a1 1d       	adc	r26, r1
    3ad6:	62 1f       	adc	r22, r18
    3ad8:	73 9f       	mul	r23, r19
    3ada:	b0 0d       	add	r27, r0
    3adc:	a1 1d       	adc	r26, r1
    3ade:	62 1f       	adc	r22, r18
    3ae0:	83 9f       	mul	r24, r19
    3ae2:	a0 0d       	add	r26, r0
    3ae4:	61 1d       	adc	r22, r1
    3ae6:	22 1f       	adc	r18, r18
    3ae8:	74 9f       	mul	r23, r20
    3aea:	33 27       	eor	r19, r19
    3aec:	a0 0d       	add	r26, r0
    3aee:	61 1d       	adc	r22, r1
    3af0:	23 1f       	adc	r18, r19
    3af2:	84 9f       	mul	r24, r20
    3af4:	60 0d       	add	r22, r0
    3af6:	21 1d       	adc	r18, r1
    3af8:	82 2f       	mov	r24, r18
    3afa:	76 2f       	mov	r23, r22
    3afc:	6a 2f       	mov	r22, r26
    3afe:	11 24       	eor	r1, r1
    3b00:	9f 57       	subi	r25, 0x7F	; 127
    3b02:	50 40       	sbci	r21, 0x00	; 0
    3b04:	9a f0       	brmi	.+38     	; 0x3b2c <__mulsf3_pse+0x88>
    3b06:	f1 f0       	breq	.+60     	; 0x3b44 <__mulsf3_pse+0xa0>
    3b08:	88 23       	and	r24, r24
    3b0a:	4a f0       	brmi	.+18     	; 0x3b1e <__mulsf3_pse+0x7a>
    3b0c:	ee 0f       	add	r30, r30
    3b0e:	ff 1f       	adc	r31, r31
    3b10:	bb 1f       	adc	r27, r27
    3b12:	66 1f       	adc	r22, r22
    3b14:	77 1f       	adc	r23, r23
    3b16:	88 1f       	adc	r24, r24
    3b18:	91 50       	subi	r25, 0x01	; 1
    3b1a:	50 40       	sbci	r21, 0x00	; 0
    3b1c:	a9 f7       	brne	.-22     	; 0x3b08 <__mulsf3_pse+0x64>
    3b1e:	9e 3f       	cpi	r25, 0xFE	; 254
    3b20:	51 05       	cpc	r21, r1
    3b22:	80 f0       	brcs	.+32     	; 0x3b44 <__mulsf3_pse+0xa0>
    3b24:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__fp_inf>
    3b28:	0c 94 31 1d 	jmp	0x3a62	; 0x3a62 <__fp_szero>
    3b2c:	5f 3f       	cpi	r21, 0xFF	; 255
    3b2e:	e4 f3       	brlt	.-8      	; 0x3b28 <__mulsf3_pse+0x84>
    3b30:	98 3e       	cpi	r25, 0xE8	; 232
    3b32:	d4 f3       	brlt	.-12     	; 0x3b28 <__mulsf3_pse+0x84>
    3b34:	86 95       	lsr	r24
    3b36:	77 95       	ror	r23
    3b38:	67 95       	ror	r22
    3b3a:	b7 95       	ror	r27
    3b3c:	f7 95       	ror	r31
    3b3e:	e7 95       	ror	r30
    3b40:	9f 5f       	subi	r25, 0xFF	; 255
    3b42:	c1 f7       	brne	.-16     	; 0x3b34 <__mulsf3_pse+0x90>
    3b44:	fe 2b       	or	r31, r30
    3b46:	88 0f       	add	r24, r24
    3b48:	91 1d       	adc	r25, r1
    3b4a:	96 95       	lsr	r25
    3b4c:	87 95       	ror	r24
    3b4e:	97 f9       	bld	r25, 7
    3b50:	08 95       	ret

00003b52 <vfprintf>:
    3b52:	a0 e1       	ldi	r26, 0x10	; 16
    3b54:	b0 e0       	ldi	r27, 0x00	; 0
    3b56:	ef ea       	ldi	r30, 0xAF	; 175
    3b58:	fd e1       	ldi	r31, 0x1D	; 29
    3b5a:	0c 94 6a 21 	jmp	0x42d4	; 0x42d4 <__prologue_saves__>
    3b5e:	7c 01       	movw	r14, r24
    3b60:	1b 01       	movw	r2, r22
    3b62:	6a 01       	movw	r12, r20
    3b64:	fc 01       	movw	r30, r24
    3b66:	16 82       	std	Z+6, r1	; 0x06
    3b68:	17 82       	std	Z+7, r1	; 0x07
    3b6a:	83 81       	ldd	r24, Z+3	; 0x03
    3b6c:	81 ff       	sbrs	r24, 1
    3b6e:	44 c3       	rjmp	.+1672   	; 0x41f8 <__RODATA_PM_OFFSET__+0x1f8>
    3b70:	9e 01       	movw	r18, r28
    3b72:	2f 5f       	subi	r18, 0xFF	; 255
    3b74:	3f 4f       	sbci	r19, 0xFF	; 255
    3b76:	39 01       	movw	r6, r18
    3b78:	f7 01       	movw	r30, r14
    3b7a:	93 81       	ldd	r25, Z+3	; 0x03
    3b7c:	f1 01       	movw	r30, r2
    3b7e:	93 fd       	sbrc	r25, 3
    3b80:	85 91       	lpm	r24, Z+
    3b82:	93 ff       	sbrs	r25, 3
    3b84:	81 91       	ld	r24, Z+
    3b86:	1f 01       	movw	r2, r30
    3b88:	88 23       	and	r24, r24
    3b8a:	09 f4       	brne	.+2      	; 0x3b8e <vfprintf+0x3c>
    3b8c:	31 c3       	rjmp	.+1634   	; 0x41f0 <__RODATA_PM_OFFSET__+0x1f0>
    3b8e:	85 32       	cpi	r24, 0x25	; 37
    3b90:	39 f4       	brne	.+14     	; 0x3ba0 <vfprintf+0x4e>
    3b92:	93 fd       	sbrc	r25, 3
    3b94:	85 91       	lpm	r24, Z+
    3b96:	93 ff       	sbrs	r25, 3
    3b98:	81 91       	ld	r24, Z+
    3b9a:	1f 01       	movw	r2, r30
    3b9c:	85 32       	cpi	r24, 0x25	; 37
    3b9e:	39 f4       	brne	.+14     	; 0x3bae <vfprintf+0x5c>
    3ba0:	b7 01       	movw	r22, r14
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    3ba8:	56 01       	movw	r10, r12
    3baa:	65 01       	movw	r12, r10
    3bac:	e5 cf       	rjmp	.-54     	; 0x3b78 <vfprintf+0x26>
    3bae:	10 e0       	ldi	r17, 0x00	; 0
    3bb0:	51 2c       	mov	r5, r1
    3bb2:	91 2c       	mov	r9, r1
    3bb4:	ff e1       	ldi	r31, 0x1F	; 31
    3bb6:	f9 15       	cp	r31, r9
    3bb8:	d8 f0       	brcs	.+54     	; 0x3bf0 <vfprintf+0x9e>
    3bba:	8b 32       	cpi	r24, 0x2B	; 43
    3bbc:	79 f0       	breq	.+30     	; 0x3bdc <vfprintf+0x8a>
    3bbe:	38 f4       	brcc	.+14     	; 0x3bce <vfprintf+0x7c>
    3bc0:	80 32       	cpi	r24, 0x20	; 32
    3bc2:	79 f0       	breq	.+30     	; 0x3be2 <vfprintf+0x90>
    3bc4:	83 32       	cpi	r24, 0x23	; 35
    3bc6:	a1 f4       	brne	.+40     	; 0x3bf0 <vfprintf+0x9e>
    3bc8:	f9 2d       	mov	r31, r9
    3bca:	f0 61       	ori	r31, 0x10	; 16
    3bcc:	2e c0       	rjmp	.+92     	; 0x3c2a <vfprintf+0xd8>
    3bce:	8d 32       	cpi	r24, 0x2D	; 45
    3bd0:	61 f0       	breq	.+24     	; 0x3bea <vfprintf+0x98>
    3bd2:	80 33       	cpi	r24, 0x30	; 48
    3bd4:	69 f4       	brne	.+26     	; 0x3bf0 <vfprintf+0x9e>
    3bd6:	29 2d       	mov	r18, r9
    3bd8:	21 60       	ori	r18, 0x01	; 1
    3bda:	2d c0       	rjmp	.+90     	; 0x3c36 <vfprintf+0xe4>
    3bdc:	39 2d       	mov	r19, r9
    3bde:	32 60       	ori	r19, 0x02	; 2
    3be0:	93 2e       	mov	r9, r19
    3be2:	89 2d       	mov	r24, r9
    3be4:	84 60       	ori	r24, 0x04	; 4
    3be6:	98 2e       	mov	r9, r24
    3be8:	2a c0       	rjmp	.+84     	; 0x3c3e <vfprintf+0xec>
    3bea:	e9 2d       	mov	r30, r9
    3bec:	e8 60       	ori	r30, 0x08	; 8
    3bee:	15 c0       	rjmp	.+42     	; 0x3c1a <vfprintf+0xc8>
    3bf0:	97 fc       	sbrc	r9, 7
    3bf2:	2d c0       	rjmp	.+90     	; 0x3c4e <vfprintf+0xfc>
    3bf4:	20 ed       	ldi	r18, 0xD0	; 208
    3bf6:	28 0f       	add	r18, r24
    3bf8:	2a 30       	cpi	r18, 0x0A	; 10
    3bfa:	88 f4       	brcc	.+34     	; 0x3c1e <vfprintf+0xcc>
    3bfc:	96 fe       	sbrs	r9, 6
    3bfe:	06 c0       	rjmp	.+12     	; 0x3c0c <vfprintf+0xba>
    3c00:	3a e0       	ldi	r19, 0x0A	; 10
    3c02:	13 9f       	mul	r17, r19
    3c04:	20 0d       	add	r18, r0
    3c06:	11 24       	eor	r1, r1
    3c08:	12 2f       	mov	r17, r18
    3c0a:	19 c0       	rjmp	.+50     	; 0x3c3e <vfprintf+0xec>
    3c0c:	8a e0       	ldi	r24, 0x0A	; 10
    3c0e:	58 9e       	mul	r5, r24
    3c10:	20 0d       	add	r18, r0
    3c12:	11 24       	eor	r1, r1
    3c14:	52 2e       	mov	r5, r18
    3c16:	e9 2d       	mov	r30, r9
    3c18:	e0 62       	ori	r30, 0x20	; 32
    3c1a:	9e 2e       	mov	r9, r30
    3c1c:	10 c0       	rjmp	.+32     	; 0x3c3e <vfprintf+0xec>
    3c1e:	8e 32       	cpi	r24, 0x2E	; 46
    3c20:	31 f4       	brne	.+12     	; 0x3c2e <vfprintf+0xdc>
    3c22:	96 fc       	sbrc	r9, 6
    3c24:	e5 c2       	rjmp	.+1482   	; 0x41f0 <__RODATA_PM_OFFSET__+0x1f0>
    3c26:	f9 2d       	mov	r31, r9
    3c28:	f0 64       	ori	r31, 0x40	; 64
    3c2a:	9f 2e       	mov	r9, r31
    3c2c:	08 c0       	rjmp	.+16     	; 0x3c3e <vfprintf+0xec>
    3c2e:	8c 36       	cpi	r24, 0x6C	; 108
    3c30:	21 f4       	brne	.+8      	; 0x3c3a <vfprintf+0xe8>
    3c32:	29 2d       	mov	r18, r9
    3c34:	20 68       	ori	r18, 0x80	; 128
    3c36:	92 2e       	mov	r9, r18
    3c38:	02 c0       	rjmp	.+4      	; 0x3c3e <vfprintf+0xec>
    3c3a:	88 36       	cpi	r24, 0x68	; 104
    3c3c:	41 f4       	brne	.+16     	; 0x3c4e <vfprintf+0xfc>
    3c3e:	f1 01       	movw	r30, r2
    3c40:	93 fd       	sbrc	r25, 3
    3c42:	85 91       	lpm	r24, Z+
    3c44:	93 ff       	sbrs	r25, 3
    3c46:	81 91       	ld	r24, Z+
    3c48:	1f 01       	movw	r2, r30
    3c4a:	81 11       	cpse	r24, r1
    3c4c:	b3 cf       	rjmp	.-154    	; 0x3bb4 <vfprintf+0x62>
    3c4e:	9b eb       	ldi	r25, 0xBB	; 187
    3c50:	98 0f       	add	r25, r24
    3c52:	93 30       	cpi	r25, 0x03	; 3
    3c54:	20 f4       	brcc	.+8      	; 0x3c5e <vfprintf+0x10c>
    3c56:	99 2d       	mov	r25, r9
    3c58:	90 61       	ori	r25, 0x10	; 16
    3c5a:	80 5e       	subi	r24, 0xE0	; 224
    3c5c:	07 c0       	rjmp	.+14     	; 0x3c6c <vfprintf+0x11a>
    3c5e:	9b e9       	ldi	r25, 0x9B	; 155
    3c60:	98 0f       	add	r25, r24
    3c62:	93 30       	cpi	r25, 0x03	; 3
    3c64:	08 f0       	brcs	.+2      	; 0x3c68 <vfprintf+0x116>
    3c66:	66 c1       	rjmp	.+716    	; 0x3f34 <vfprintf+0x3e2>
    3c68:	99 2d       	mov	r25, r9
    3c6a:	9f 7e       	andi	r25, 0xEF	; 239
    3c6c:	96 ff       	sbrs	r25, 6
    3c6e:	16 e0       	ldi	r17, 0x06	; 6
    3c70:	9f 73       	andi	r25, 0x3F	; 63
    3c72:	99 2e       	mov	r9, r25
    3c74:	85 36       	cpi	r24, 0x65	; 101
    3c76:	19 f4       	brne	.+6      	; 0x3c7e <vfprintf+0x12c>
    3c78:	90 64       	ori	r25, 0x40	; 64
    3c7a:	99 2e       	mov	r9, r25
    3c7c:	08 c0       	rjmp	.+16     	; 0x3c8e <vfprintf+0x13c>
    3c7e:	86 36       	cpi	r24, 0x66	; 102
    3c80:	21 f4       	brne	.+8      	; 0x3c8a <vfprintf+0x138>
    3c82:	39 2f       	mov	r19, r25
    3c84:	30 68       	ori	r19, 0x80	; 128
    3c86:	93 2e       	mov	r9, r19
    3c88:	02 c0       	rjmp	.+4      	; 0x3c8e <vfprintf+0x13c>
    3c8a:	11 11       	cpse	r17, r1
    3c8c:	11 50       	subi	r17, 0x01	; 1
    3c8e:	97 fe       	sbrs	r9, 7
    3c90:	07 c0       	rjmp	.+14     	; 0x3ca0 <vfprintf+0x14e>
    3c92:	1c 33       	cpi	r17, 0x3C	; 60
    3c94:	50 f4       	brcc	.+20     	; 0x3caa <vfprintf+0x158>
    3c96:	44 24       	eor	r4, r4
    3c98:	43 94       	inc	r4
    3c9a:	41 0e       	add	r4, r17
    3c9c:	27 e0       	ldi	r18, 0x07	; 7
    3c9e:	0b c0       	rjmp	.+22     	; 0x3cb6 <vfprintf+0x164>
    3ca0:	18 30       	cpi	r17, 0x08	; 8
    3ca2:	38 f0       	brcs	.+14     	; 0x3cb2 <vfprintf+0x160>
    3ca4:	27 e0       	ldi	r18, 0x07	; 7
    3ca6:	17 e0       	ldi	r17, 0x07	; 7
    3ca8:	05 c0       	rjmp	.+10     	; 0x3cb4 <vfprintf+0x162>
    3caa:	27 e0       	ldi	r18, 0x07	; 7
    3cac:	9c e3       	ldi	r25, 0x3C	; 60
    3cae:	49 2e       	mov	r4, r25
    3cb0:	02 c0       	rjmp	.+4      	; 0x3cb6 <vfprintf+0x164>
    3cb2:	21 2f       	mov	r18, r17
    3cb4:	41 2c       	mov	r4, r1
    3cb6:	56 01       	movw	r10, r12
    3cb8:	84 e0       	ldi	r24, 0x04	; 4
    3cba:	a8 0e       	add	r10, r24
    3cbc:	b1 1c       	adc	r11, r1
    3cbe:	f6 01       	movw	r30, r12
    3cc0:	60 81       	ld	r22, Z
    3cc2:	71 81       	ldd	r23, Z+1	; 0x01
    3cc4:	82 81       	ldd	r24, Z+2	; 0x02
    3cc6:	93 81       	ldd	r25, Z+3	; 0x03
    3cc8:	04 2d       	mov	r16, r4
    3cca:	a3 01       	movw	r20, r6
    3ccc:	0e 94 07 22 	call	0x440e	; 0x440e <__ftoa_engine>
    3cd0:	6c 01       	movw	r12, r24
    3cd2:	f9 81       	ldd	r31, Y+1	; 0x01
    3cd4:	fc 87       	std	Y+12, r31	; 0x0c
    3cd6:	f0 ff       	sbrs	r31, 0
    3cd8:	02 c0       	rjmp	.+4      	; 0x3cde <vfprintf+0x18c>
    3cda:	f3 ff       	sbrs	r31, 3
    3cdc:	06 c0       	rjmp	.+12     	; 0x3cea <vfprintf+0x198>
    3cde:	91 fc       	sbrc	r9, 1
    3ce0:	06 c0       	rjmp	.+12     	; 0x3cee <vfprintf+0x19c>
    3ce2:	92 fe       	sbrs	r9, 2
    3ce4:	06 c0       	rjmp	.+12     	; 0x3cf2 <vfprintf+0x1a0>
    3ce6:	00 e2       	ldi	r16, 0x20	; 32
    3ce8:	05 c0       	rjmp	.+10     	; 0x3cf4 <vfprintf+0x1a2>
    3cea:	0d e2       	ldi	r16, 0x2D	; 45
    3cec:	03 c0       	rjmp	.+6      	; 0x3cf4 <vfprintf+0x1a2>
    3cee:	0b e2       	ldi	r16, 0x2B	; 43
    3cf0:	01 c0       	rjmp	.+2      	; 0x3cf4 <vfprintf+0x1a2>
    3cf2:	00 e0       	ldi	r16, 0x00	; 0
    3cf4:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cf6:	8c 70       	andi	r24, 0x0C	; 12
    3cf8:	19 f0       	breq	.+6      	; 0x3d00 <vfprintf+0x1ae>
    3cfa:	01 11       	cpse	r16, r1
    3cfc:	5a c2       	rjmp	.+1204   	; 0x41b2 <__RODATA_PM_OFFSET__+0x1b2>
    3cfe:	9b c2       	rjmp	.+1334   	; 0x4236 <__RODATA_PM_OFFSET__+0x236>
    3d00:	97 fe       	sbrs	r9, 7
    3d02:	10 c0       	rjmp	.+32     	; 0x3d24 <vfprintf+0x1d2>
    3d04:	4c 0c       	add	r4, r12
    3d06:	fc 85       	ldd	r31, Y+12	; 0x0c
    3d08:	f4 ff       	sbrs	r31, 4
    3d0a:	04 c0       	rjmp	.+8      	; 0x3d14 <vfprintf+0x1c2>
    3d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d0e:	81 33       	cpi	r24, 0x31	; 49
    3d10:	09 f4       	brne	.+2      	; 0x3d14 <vfprintf+0x1c2>
    3d12:	4a 94       	dec	r4
    3d14:	14 14       	cp	r1, r4
    3d16:	74 f5       	brge	.+92     	; 0x3d74 <vfprintf+0x222>
    3d18:	28 e0       	ldi	r18, 0x08	; 8
    3d1a:	24 15       	cp	r18, r4
    3d1c:	78 f5       	brcc	.+94     	; 0x3d7c <vfprintf+0x22a>
    3d1e:	88 e0       	ldi	r24, 0x08	; 8
    3d20:	48 2e       	mov	r4, r24
    3d22:	2c c0       	rjmp	.+88     	; 0x3d7c <vfprintf+0x22a>
    3d24:	96 fc       	sbrc	r9, 6
    3d26:	2a c0       	rjmp	.+84     	; 0x3d7c <vfprintf+0x22a>
    3d28:	81 2f       	mov	r24, r17
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	8c 15       	cp	r24, r12
    3d2e:	9d 05       	cpc	r25, r13
    3d30:	9c f0       	brlt	.+38     	; 0x3d58 <vfprintf+0x206>
    3d32:	3c ef       	ldi	r19, 0xFC	; 252
    3d34:	c3 16       	cp	r12, r19
    3d36:	3f ef       	ldi	r19, 0xFF	; 255
    3d38:	d3 06       	cpc	r13, r19
    3d3a:	74 f0       	brlt	.+28     	; 0x3d58 <vfprintf+0x206>
    3d3c:	89 2d       	mov	r24, r9
    3d3e:	80 68       	ori	r24, 0x80	; 128
    3d40:	98 2e       	mov	r9, r24
    3d42:	0a c0       	rjmp	.+20     	; 0x3d58 <vfprintf+0x206>
    3d44:	e2 e0       	ldi	r30, 0x02	; 2
    3d46:	f0 e0       	ldi	r31, 0x00	; 0
    3d48:	ec 0f       	add	r30, r28
    3d4a:	fd 1f       	adc	r31, r29
    3d4c:	e1 0f       	add	r30, r17
    3d4e:	f1 1d       	adc	r31, r1
    3d50:	80 81       	ld	r24, Z
    3d52:	80 33       	cpi	r24, 0x30	; 48
    3d54:	19 f4       	brne	.+6      	; 0x3d5c <vfprintf+0x20a>
    3d56:	11 50       	subi	r17, 0x01	; 1
    3d58:	11 11       	cpse	r17, r1
    3d5a:	f4 cf       	rjmp	.-24     	; 0x3d44 <vfprintf+0x1f2>
    3d5c:	97 fe       	sbrs	r9, 7
    3d5e:	0e c0       	rjmp	.+28     	; 0x3d7c <vfprintf+0x22a>
    3d60:	44 24       	eor	r4, r4
    3d62:	43 94       	inc	r4
    3d64:	41 0e       	add	r4, r17
    3d66:	81 2f       	mov	r24, r17
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	c8 16       	cp	r12, r24
    3d6c:	d9 06       	cpc	r13, r25
    3d6e:	2c f4       	brge	.+10     	; 0x3d7a <vfprintf+0x228>
    3d70:	1c 19       	sub	r17, r12
    3d72:	04 c0       	rjmp	.+8      	; 0x3d7c <vfprintf+0x22a>
    3d74:	44 24       	eor	r4, r4
    3d76:	43 94       	inc	r4
    3d78:	01 c0       	rjmp	.+2      	; 0x3d7c <vfprintf+0x22a>
    3d7a:	10 e0       	ldi	r17, 0x00	; 0
    3d7c:	97 fe       	sbrs	r9, 7
    3d7e:	06 c0       	rjmp	.+12     	; 0x3d8c <vfprintf+0x23a>
    3d80:	1c 14       	cp	r1, r12
    3d82:	1d 04       	cpc	r1, r13
    3d84:	34 f4       	brge	.+12     	; 0x3d92 <vfprintf+0x240>
    3d86:	c6 01       	movw	r24, r12
    3d88:	01 96       	adiw	r24, 0x01	; 1
    3d8a:	05 c0       	rjmp	.+10     	; 0x3d96 <vfprintf+0x244>
    3d8c:	85 e0       	ldi	r24, 0x05	; 5
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
    3d90:	02 c0       	rjmp	.+4      	; 0x3d96 <vfprintf+0x244>
    3d92:	81 e0       	ldi	r24, 0x01	; 1
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	01 11       	cpse	r16, r1
    3d98:	01 96       	adiw	r24, 0x01	; 1
    3d9a:	11 23       	and	r17, r17
    3d9c:	31 f0       	breq	.+12     	; 0x3daa <vfprintf+0x258>
    3d9e:	21 2f       	mov	r18, r17
    3da0:	30 e0       	ldi	r19, 0x00	; 0
    3da2:	2f 5f       	subi	r18, 0xFF	; 255
    3da4:	3f 4f       	sbci	r19, 0xFF	; 255
    3da6:	82 0f       	add	r24, r18
    3da8:	93 1f       	adc	r25, r19
    3daa:	25 2d       	mov	r18, r5
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	82 17       	cp	r24, r18
    3db0:	93 07       	cpc	r25, r19
    3db2:	14 f4       	brge	.+4      	; 0x3db8 <vfprintf+0x266>
    3db4:	58 1a       	sub	r5, r24
    3db6:	01 c0       	rjmp	.+2      	; 0x3dba <vfprintf+0x268>
    3db8:	51 2c       	mov	r5, r1
    3dba:	89 2d       	mov	r24, r9
    3dbc:	89 70       	andi	r24, 0x09	; 9
    3dbe:	49 f4       	brne	.+18     	; 0x3dd2 <vfprintf+0x280>
    3dc0:	55 20       	and	r5, r5
    3dc2:	39 f0       	breq	.+14     	; 0x3dd2 <vfprintf+0x280>
    3dc4:	b7 01       	movw	r22, r14
    3dc6:	80 e2       	ldi	r24, 0x20	; 32
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    3dce:	5a 94       	dec	r5
    3dd0:	f7 cf       	rjmp	.-18     	; 0x3dc0 <vfprintf+0x26e>
    3dd2:	00 23       	and	r16, r16
    3dd4:	29 f0       	breq	.+10     	; 0x3de0 <vfprintf+0x28e>
    3dd6:	b7 01       	movw	r22, r14
    3dd8:	80 2f       	mov	r24, r16
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    3de0:	93 fc       	sbrc	r9, 3
    3de2:	09 c0       	rjmp	.+18     	; 0x3df6 <vfprintf+0x2a4>
    3de4:	55 20       	and	r5, r5
    3de6:	39 f0       	breq	.+14     	; 0x3df6 <vfprintf+0x2a4>
    3de8:	b7 01       	movw	r22, r14
    3dea:	80 e3       	ldi	r24, 0x30	; 48
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    3df2:	5a 94       	dec	r5
    3df4:	f7 cf       	rjmp	.-18     	; 0x3de4 <vfprintf+0x292>
    3df6:	97 fe       	sbrs	r9, 7
    3df8:	4c c0       	rjmp	.+152    	; 0x3e92 <vfprintf+0x340>
    3dfa:	46 01       	movw	r8, r12
    3dfc:	d7 fe       	sbrs	r13, 7
    3dfe:	02 c0       	rjmp	.+4      	; 0x3e04 <vfprintf+0x2b2>
    3e00:	81 2c       	mov	r8, r1
    3e02:	91 2c       	mov	r9, r1
    3e04:	c6 01       	movw	r24, r12
    3e06:	88 19       	sub	r24, r8
    3e08:	99 09       	sbc	r25, r9
    3e0a:	f3 01       	movw	r30, r6
    3e0c:	e8 0f       	add	r30, r24
    3e0e:	f9 1f       	adc	r31, r25
    3e10:	ed 87       	std	Y+13, r30	; 0x0d
    3e12:	fe 87       	std	Y+14, r31	; 0x0e
    3e14:	96 01       	movw	r18, r12
    3e16:	24 19       	sub	r18, r4
    3e18:	31 09       	sbc	r19, r1
    3e1a:	2f 87       	std	Y+15, r18	; 0x0f
    3e1c:	38 8b       	std	Y+16, r19	; 0x10
    3e1e:	01 2f       	mov	r16, r17
    3e20:	10 e0       	ldi	r17, 0x00	; 0
    3e22:	11 95       	neg	r17
    3e24:	01 95       	neg	r16
    3e26:	11 09       	sbc	r17, r1
    3e28:	3f ef       	ldi	r19, 0xFF	; 255
    3e2a:	83 16       	cp	r8, r19
    3e2c:	93 06       	cpc	r9, r19
    3e2e:	29 f4       	brne	.+10     	; 0x3e3a <vfprintf+0x2e8>
    3e30:	b7 01       	movw	r22, r14
    3e32:	8e e2       	ldi	r24, 0x2E	; 46
    3e34:	90 e0       	ldi	r25, 0x00	; 0
    3e36:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    3e3a:	c8 14       	cp	r12, r8
    3e3c:	d9 04       	cpc	r13, r9
    3e3e:	4c f0       	brlt	.+18     	; 0x3e52 <vfprintf+0x300>
    3e40:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e42:	98 89       	ldd	r25, Y+16	; 0x10
    3e44:	88 15       	cp	r24, r8
    3e46:	99 05       	cpc	r25, r9
    3e48:	24 f4       	brge	.+8      	; 0x3e52 <vfprintf+0x300>
    3e4a:	ed 85       	ldd	r30, Y+13	; 0x0d
    3e4c:	fe 85       	ldd	r31, Y+14	; 0x0e
    3e4e:	81 81       	ldd	r24, Z+1	; 0x01
    3e50:	01 c0       	rjmp	.+2      	; 0x3e54 <vfprintf+0x302>
    3e52:	80 e3       	ldi	r24, 0x30	; 48
    3e54:	f1 e0       	ldi	r31, 0x01	; 1
    3e56:	8f 1a       	sub	r8, r31
    3e58:	91 08       	sbc	r9, r1
    3e5a:	2d 85       	ldd	r18, Y+13	; 0x0d
    3e5c:	3e 85       	ldd	r19, Y+14	; 0x0e
    3e5e:	2f 5f       	subi	r18, 0xFF	; 255
    3e60:	3f 4f       	sbci	r19, 0xFF	; 255
    3e62:	2d 87       	std	Y+13, r18	; 0x0d
    3e64:	3e 87       	std	Y+14, r19	; 0x0e
    3e66:	80 16       	cp	r8, r16
    3e68:	91 06       	cpc	r9, r17
    3e6a:	2c f0       	brlt	.+10     	; 0x3e76 <vfprintf+0x324>
    3e6c:	b7 01       	movw	r22, r14
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    3e74:	d9 cf       	rjmp	.-78     	; 0x3e28 <vfprintf+0x2d6>
    3e76:	c8 14       	cp	r12, r8
    3e78:	d9 04       	cpc	r13, r9
    3e7a:	41 f4       	brne	.+16     	; 0x3e8c <vfprintf+0x33a>
    3e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e7e:	96 33       	cpi	r25, 0x36	; 54
    3e80:	20 f4       	brcc	.+8      	; 0x3e8a <vfprintf+0x338>
    3e82:	95 33       	cpi	r25, 0x35	; 53
    3e84:	19 f4       	brne	.+6      	; 0x3e8c <vfprintf+0x33a>
    3e86:	3c 85       	ldd	r19, Y+12	; 0x0c
    3e88:	34 ff       	sbrs	r19, 4
    3e8a:	81 e3       	ldi	r24, 0x31	; 49
    3e8c:	b7 01       	movw	r22, r14
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	4e c0       	rjmp	.+156    	; 0x3f2e <vfprintf+0x3dc>
    3e92:	8a 81       	ldd	r24, Y+2	; 0x02
    3e94:	81 33       	cpi	r24, 0x31	; 49
    3e96:	19 f0       	breq	.+6      	; 0x3e9e <vfprintf+0x34c>
    3e98:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e9a:	9f 7e       	andi	r25, 0xEF	; 239
    3e9c:	9c 87       	std	Y+12, r25	; 0x0c
    3e9e:	b7 01       	movw	r22, r14
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    3ea6:	11 11       	cpse	r17, r1
    3ea8:	05 c0       	rjmp	.+10     	; 0x3eb4 <vfprintf+0x362>
    3eaa:	94 fc       	sbrc	r9, 4
    3eac:	18 c0       	rjmp	.+48     	; 0x3ede <vfprintf+0x38c>
    3eae:	85 e6       	ldi	r24, 0x65	; 101
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	17 c0       	rjmp	.+46     	; 0x3ee2 <vfprintf+0x390>
    3eb4:	b7 01       	movw	r22, r14
    3eb6:	8e e2       	ldi	r24, 0x2E	; 46
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    3ebe:	1e 5f       	subi	r17, 0xFE	; 254
    3ec0:	82 e0       	ldi	r24, 0x02	; 2
    3ec2:	01 e0       	ldi	r16, 0x01	; 1
    3ec4:	08 0f       	add	r16, r24
    3ec6:	f3 01       	movw	r30, r6
    3ec8:	e8 0f       	add	r30, r24
    3eca:	f1 1d       	adc	r31, r1
    3ecc:	80 81       	ld	r24, Z
    3ece:	b7 01       	movw	r22, r14
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    3ed6:	80 2f       	mov	r24, r16
    3ed8:	01 13       	cpse	r16, r17
    3eda:	f3 cf       	rjmp	.-26     	; 0x3ec2 <vfprintf+0x370>
    3edc:	e6 cf       	rjmp	.-52     	; 0x3eaa <vfprintf+0x358>
    3ede:	85 e4       	ldi	r24, 0x45	; 69
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	b7 01       	movw	r22, r14
    3ee4:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    3ee8:	d7 fc       	sbrc	r13, 7
    3eea:	06 c0       	rjmp	.+12     	; 0x3ef8 <vfprintf+0x3a6>
    3eec:	c1 14       	cp	r12, r1
    3eee:	d1 04       	cpc	r13, r1
    3ef0:	41 f4       	brne	.+16     	; 0x3f02 <vfprintf+0x3b0>
    3ef2:	ec 85       	ldd	r30, Y+12	; 0x0c
    3ef4:	e4 ff       	sbrs	r30, 4
    3ef6:	05 c0       	rjmp	.+10     	; 0x3f02 <vfprintf+0x3b0>
    3ef8:	d1 94       	neg	r13
    3efa:	c1 94       	neg	r12
    3efc:	d1 08       	sbc	r13, r1
    3efe:	8d e2       	ldi	r24, 0x2D	; 45
    3f00:	01 c0       	rjmp	.+2      	; 0x3f04 <vfprintf+0x3b2>
    3f02:	8b e2       	ldi	r24, 0x2B	; 43
    3f04:	b7 01       	movw	r22, r14
    3f06:	90 e0       	ldi	r25, 0x00	; 0
    3f08:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    3f0c:	80 e3       	ldi	r24, 0x30	; 48
    3f0e:	2a e0       	ldi	r18, 0x0A	; 10
    3f10:	c2 16       	cp	r12, r18
    3f12:	d1 04       	cpc	r13, r1
    3f14:	2c f0       	brlt	.+10     	; 0x3f20 <vfprintf+0x3ce>
    3f16:	8f 5f       	subi	r24, 0xFF	; 255
    3f18:	fa e0       	ldi	r31, 0x0A	; 10
    3f1a:	cf 1a       	sub	r12, r31
    3f1c:	d1 08       	sbc	r13, r1
    3f1e:	f7 cf       	rjmp	.-18     	; 0x3f0e <vfprintf+0x3bc>
    3f20:	b7 01       	movw	r22, r14
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    3f28:	b7 01       	movw	r22, r14
    3f2a:	c6 01       	movw	r24, r12
    3f2c:	c0 96       	adiw	r24, 0x30	; 48
    3f2e:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    3f32:	54 c1       	rjmp	.+680    	; 0x41dc <__RODATA_PM_OFFSET__+0x1dc>
    3f34:	83 36       	cpi	r24, 0x63	; 99
    3f36:	31 f0       	breq	.+12     	; 0x3f44 <vfprintf+0x3f2>
    3f38:	83 37       	cpi	r24, 0x73	; 115
    3f3a:	79 f0       	breq	.+30     	; 0x3f5a <vfprintf+0x408>
    3f3c:	83 35       	cpi	r24, 0x53	; 83
    3f3e:	09 f0       	breq	.+2      	; 0x3f42 <vfprintf+0x3f0>
    3f40:	56 c0       	rjmp	.+172    	; 0x3fee <vfprintf+0x49c>
    3f42:	20 c0       	rjmp	.+64     	; 0x3f84 <vfprintf+0x432>
    3f44:	56 01       	movw	r10, r12
    3f46:	32 e0       	ldi	r19, 0x02	; 2
    3f48:	a3 0e       	add	r10, r19
    3f4a:	b1 1c       	adc	r11, r1
    3f4c:	f6 01       	movw	r30, r12
    3f4e:	80 81       	ld	r24, Z
    3f50:	89 83       	std	Y+1, r24	; 0x01
    3f52:	01 e0       	ldi	r16, 0x01	; 1
    3f54:	10 e0       	ldi	r17, 0x00	; 0
    3f56:	63 01       	movw	r12, r6
    3f58:	12 c0       	rjmp	.+36     	; 0x3f7e <vfprintf+0x42c>
    3f5a:	56 01       	movw	r10, r12
    3f5c:	f2 e0       	ldi	r31, 0x02	; 2
    3f5e:	af 0e       	add	r10, r31
    3f60:	b1 1c       	adc	r11, r1
    3f62:	f6 01       	movw	r30, r12
    3f64:	c0 80       	ld	r12, Z
    3f66:	d1 80       	ldd	r13, Z+1	; 0x01
    3f68:	96 fe       	sbrs	r9, 6
    3f6a:	03 c0       	rjmp	.+6      	; 0x3f72 <vfprintf+0x420>
    3f6c:	61 2f       	mov	r22, r17
    3f6e:	70 e0       	ldi	r23, 0x00	; 0
    3f70:	02 c0       	rjmp	.+4      	; 0x3f76 <vfprintf+0x424>
    3f72:	6f ef       	ldi	r22, 0xFF	; 255
    3f74:	7f ef       	ldi	r23, 0xFF	; 255
    3f76:	c6 01       	movw	r24, r12
    3f78:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <strnlen>
    3f7c:	8c 01       	movw	r16, r24
    3f7e:	f9 2d       	mov	r31, r9
    3f80:	ff 77       	andi	r31, 0x7F	; 127
    3f82:	14 c0       	rjmp	.+40     	; 0x3fac <vfprintf+0x45a>
    3f84:	56 01       	movw	r10, r12
    3f86:	22 e0       	ldi	r18, 0x02	; 2
    3f88:	a2 0e       	add	r10, r18
    3f8a:	b1 1c       	adc	r11, r1
    3f8c:	f6 01       	movw	r30, r12
    3f8e:	c0 80       	ld	r12, Z
    3f90:	d1 80       	ldd	r13, Z+1	; 0x01
    3f92:	96 fe       	sbrs	r9, 6
    3f94:	03 c0       	rjmp	.+6      	; 0x3f9c <vfprintf+0x44a>
    3f96:	61 2f       	mov	r22, r17
    3f98:	70 e0       	ldi	r23, 0x00	; 0
    3f9a:	02 c0       	rjmp	.+4      	; 0x3fa0 <vfprintf+0x44e>
    3f9c:	6f ef       	ldi	r22, 0xFF	; 255
    3f9e:	7f ef       	ldi	r23, 0xFF	; 255
    3fa0:	c6 01       	movw	r24, r12
    3fa2:	0e 94 df 22 	call	0x45be	; 0x45be <strnlen_P>
    3fa6:	8c 01       	movw	r16, r24
    3fa8:	f9 2d       	mov	r31, r9
    3faa:	f0 68       	ori	r31, 0x80	; 128
    3fac:	9f 2e       	mov	r9, r31
    3fae:	f3 fd       	sbrc	r31, 3
    3fb0:	1a c0       	rjmp	.+52     	; 0x3fe6 <vfprintf+0x494>
    3fb2:	85 2d       	mov	r24, r5
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	08 17       	cp	r16, r24
    3fb8:	19 07       	cpc	r17, r25
    3fba:	a8 f4       	brcc	.+42     	; 0x3fe6 <vfprintf+0x494>
    3fbc:	b7 01       	movw	r22, r14
    3fbe:	80 e2       	ldi	r24, 0x20	; 32
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    3fc6:	5a 94       	dec	r5
    3fc8:	f4 cf       	rjmp	.-24     	; 0x3fb2 <vfprintf+0x460>
    3fca:	f6 01       	movw	r30, r12
    3fcc:	97 fc       	sbrc	r9, 7
    3fce:	85 91       	lpm	r24, Z+
    3fd0:	97 fe       	sbrs	r9, 7
    3fd2:	81 91       	ld	r24, Z+
    3fd4:	6f 01       	movw	r12, r30
    3fd6:	b7 01       	movw	r22, r14
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    3fde:	51 10       	cpse	r5, r1
    3fe0:	5a 94       	dec	r5
    3fe2:	01 50       	subi	r16, 0x01	; 1
    3fe4:	11 09       	sbc	r17, r1
    3fe6:	01 15       	cp	r16, r1
    3fe8:	11 05       	cpc	r17, r1
    3fea:	79 f7       	brne	.-34     	; 0x3fca <vfprintf+0x478>
    3fec:	f7 c0       	rjmp	.+494    	; 0x41dc <__RODATA_PM_OFFSET__+0x1dc>
    3fee:	84 36       	cpi	r24, 0x64	; 100
    3ff0:	11 f0       	breq	.+4      	; 0x3ff6 <vfprintf+0x4a4>
    3ff2:	89 36       	cpi	r24, 0x69	; 105
    3ff4:	61 f5       	brne	.+88     	; 0x404e <__RODATA_PM_OFFSET__+0x4e>
    3ff6:	56 01       	movw	r10, r12
    3ff8:	97 fe       	sbrs	r9, 7
    3ffa:	09 c0       	rjmp	.+18     	; 0x400e <__RODATA_PM_OFFSET__+0xe>
    3ffc:	24 e0       	ldi	r18, 0x04	; 4
    3ffe:	a2 0e       	add	r10, r18
    4000:	b1 1c       	adc	r11, r1
    4002:	f6 01       	movw	r30, r12
    4004:	60 81       	ld	r22, Z
    4006:	71 81       	ldd	r23, Z+1	; 0x01
    4008:	82 81       	ldd	r24, Z+2	; 0x02
    400a:	93 81       	ldd	r25, Z+3	; 0x03
    400c:	0a c0       	rjmp	.+20     	; 0x4022 <__RODATA_PM_OFFSET__+0x22>
    400e:	f2 e0       	ldi	r31, 0x02	; 2
    4010:	af 0e       	add	r10, r31
    4012:	b1 1c       	adc	r11, r1
    4014:	f6 01       	movw	r30, r12
    4016:	60 81       	ld	r22, Z
    4018:	71 81       	ldd	r23, Z+1	; 0x01
    401a:	07 2e       	mov	r0, r23
    401c:	00 0c       	add	r0, r0
    401e:	88 0b       	sbc	r24, r24
    4020:	99 0b       	sbc	r25, r25
    4022:	f9 2d       	mov	r31, r9
    4024:	ff 76       	andi	r31, 0x6F	; 111
    4026:	9f 2e       	mov	r9, r31
    4028:	97 ff       	sbrs	r25, 7
    402a:	09 c0       	rjmp	.+18     	; 0x403e <__RODATA_PM_OFFSET__+0x3e>
    402c:	90 95       	com	r25
    402e:	80 95       	com	r24
    4030:	70 95       	com	r23
    4032:	61 95       	neg	r22
    4034:	7f 4f       	sbci	r23, 0xFF	; 255
    4036:	8f 4f       	sbci	r24, 0xFF	; 255
    4038:	9f 4f       	sbci	r25, 0xFF	; 255
    403a:	f0 68       	ori	r31, 0x80	; 128
    403c:	9f 2e       	mov	r9, r31
    403e:	2a e0       	ldi	r18, 0x0A	; 10
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	a3 01       	movw	r20, r6
    4044:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <__ultoa_invert>
    4048:	c8 2e       	mov	r12, r24
    404a:	c6 18       	sub	r12, r6
    404c:	3f c0       	rjmp	.+126    	; 0x40cc <__RODATA_PM_OFFSET__+0xcc>
    404e:	09 2d       	mov	r16, r9
    4050:	85 37       	cpi	r24, 0x75	; 117
    4052:	21 f4       	brne	.+8      	; 0x405c <__RODATA_PM_OFFSET__+0x5c>
    4054:	0f 7e       	andi	r16, 0xEF	; 239
    4056:	2a e0       	ldi	r18, 0x0A	; 10
    4058:	30 e0       	ldi	r19, 0x00	; 0
    405a:	1d c0       	rjmp	.+58     	; 0x4096 <__RODATA_PM_OFFSET__+0x96>
    405c:	09 7f       	andi	r16, 0xF9	; 249
    405e:	8f 36       	cpi	r24, 0x6F	; 111
    4060:	91 f0       	breq	.+36     	; 0x4086 <__RODATA_PM_OFFSET__+0x86>
    4062:	18 f4       	brcc	.+6      	; 0x406a <__RODATA_PM_OFFSET__+0x6a>
    4064:	88 35       	cpi	r24, 0x58	; 88
    4066:	59 f0       	breq	.+22     	; 0x407e <__RODATA_PM_OFFSET__+0x7e>
    4068:	c3 c0       	rjmp	.+390    	; 0x41f0 <__RODATA_PM_OFFSET__+0x1f0>
    406a:	80 37       	cpi	r24, 0x70	; 112
    406c:	19 f0       	breq	.+6      	; 0x4074 <__RODATA_PM_OFFSET__+0x74>
    406e:	88 37       	cpi	r24, 0x78	; 120
    4070:	11 f0       	breq	.+4      	; 0x4076 <__RODATA_PM_OFFSET__+0x76>
    4072:	be c0       	rjmp	.+380    	; 0x41f0 <__RODATA_PM_OFFSET__+0x1f0>
    4074:	00 61       	ori	r16, 0x10	; 16
    4076:	04 ff       	sbrs	r16, 4
    4078:	09 c0       	rjmp	.+18     	; 0x408c <__RODATA_PM_OFFSET__+0x8c>
    407a:	04 60       	ori	r16, 0x04	; 4
    407c:	07 c0       	rjmp	.+14     	; 0x408c <__RODATA_PM_OFFSET__+0x8c>
    407e:	94 fe       	sbrs	r9, 4
    4080:	08 c0       	rjmp	.+16     	; 0x4092 <__RODATA_PM_OFFSET__+0x92>
    4082:	06 60       	ori	r16, 0x06	; 6
    4084:	06 c0       	rjmp	.+12     	; 0x4092 <__RODATA_PM_OFFSET__+0x92>
    4086:	28 e0       	ldi	r18, 0x08	; 8
    4088:	30 e0       	ldi	r19, 0x00	; 0
    408a:	05 c0       	rjmp	.+10     	; 0x4096 <__RODATA_PM_OFFSET__+0x96>
    408c:	20 e1       	ldi	r18, 0x10	; 16
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	02 c0       	rjmp	.+4      	; 0x4096 <__RODATA_PM_OFFSET__+0x96>
    4092:	20 e1       	ldi	r18, 0x10	; 16
    4094:	32 e0       	ldi	r19, 0x02	; 2
    4096:	56 01       	movw	r10, r12
    4098:	07 ff       	sbrs	r16, 7
    409a:	09 c0       	rjmp	.+18     	; 0x40ae <__RODATA_PM_OFFSET__+0xae>
    409c:	84 e0       	ldi	r24, 0x04	; 4
    409e:	a8 0e       	add	r10, r24
    40a0:	b1 1c       	adc	r11, r1
    40a2:	f6 01       	movw	r30, r12
    40a4:	60 81       	ld	r22, Z
    40a6:	71 81       	ldd	r23, Z+1	; 0x01
    40a8:	82 81       	ldd	r24, Z+2	; 0x02
    40aa:	93 81       	ldd	r25, Z+3	; 0x03
    40ac:	08 c0       	rjmp	.+16     	; 0x40be <__RODATA_PM_OFFSET__+0xbe>
    40ae:	f2 e0       	ldi	r31, 0x02	; 2
    40b0:	af 0e       	add	r10, r31
    40b2:	b1 1c       	adc	r11, r1
    40b4:	f6 01       	movw	r30, r12
    40b6:	60 81       	ld	r22, Z
    40b8:	71 81       	ldd	r23, Z+1	; 0x01
    40ba:	80 e0       	ldi	r24, 0x00	; 0
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	a3 01       	movw	r20, r6
    40c0:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <__ultoa_invert>
    40c4:	c8 2e       	mov	r12, r24
    40c6:	c6 18       	sub	r12, r6
    40c8:	0f 77       	andi	r16, 0x7F	; 127
    40ca:	90 2e       	mov	r9, r16
    40cc:	96 fe       	sbrs	r9, 6
    40ce:	0b c0       	rjmp	.+22     	; 0x40e6 <__RODATA_PM_OFFSET__+0xe6>
    40d0:	09 2d       	mov	r16, r9
    40d2:	0e 7f       	andi	r16, 0xFE	; 254
    40d4:	c1 16       	cp	r12, r17
    40d6:	50 f4       	brcc	.+20     	; 0x40ec <__RODATA_PM_OFFSET__+0xec>
    40d8:	94 fe       	sbrs	r9, 4
    40da:	0a c0       	rjmp	.+20     	; 0x40f0 <__RODATA_PM_OFFSET__+0xf0>
    40dc:	92 fc       	sbrc	r9, 2
    40de:	08 c0       	rjmp	.+16     	; 0x40f0 <__RODATA_PM_OFFSET__+0xf0>
    40e0:	09 2d       	mov	r16, r9
    40e2:	0e 7e       	andi	r16, 0xEE	; 238
    40e4:	05 c0       	rjmp	.+10     	; 0x40f0 <__RODATA_PM_OFFSET__+0xf0>
    40e6:	dc 2c       	mov	r13, r12
    40e8:	09 2d       	mov	r16, r9
    40ea:	03 c0       	rjmp	.+6      	; 0x40f2 <__RODATA_PM_OFFSET__+0xf2>
    40ec:	dc 2c       	mov	r13, r12
    40ee:	01 c0       	rjmp	.+2      	; 0x40f2 <__RODATA_PM_OFFSET__+0xf2>
    40f0:	d1 2e       	mov	r13, r17
    40f2:	04 ff       	sbrs	r16, 4
    40f4:	0d c0       	rjmp	.+26     	; 0x4110 <__RODATA_PM_OFFSET__+0x110>
    40f6:	fe 01       	movw	r30, r28
    40f8:	ec 0d       	add	r30, r12
    40fa:	f1 1d       	adc	r31, r1
    40fc:	80 81       	ld	r24, Z
    40fe:	80 33       	cpi	r24, 0x30	; 48
    4100:	11 f4       	brne	.+4      	; 0x4106 <__RODATA_PM_OFFSET__+0x106>
    4102:	09 7e       	andi	r16, 0xE9	; 233
    4104:	09 c0       	rjmp	.+18     	; 0x4118 <__RODATA_PM_OFFSET__+0x118>
    4106:	02 ff       	sbrs	r16, 2
    4108:	06 c0       	rjmp	.+12     	; 0x4116 <__RODATA_PM_OFFSET__+0x116>
    410a:	d3 94       	inc	r13
    410c:	d3 94       	inc	r13
    410e:	04 c0       	rjmp	.+8      	; 0x4118 <__RODATA_PM_OFFSET__+0x118>
    4110:	80 2f       	mov	r24, r16
    4112:	86 78       	andi	r24, 0x86	; 134
    4114:	09 f0       	breq	.+2      	; 0x4118 <__RODATA_PM_OFFSET__+0x118>
    4116:	d3 94       	inc	r13
    4118:	03 fd       	sbrc	r16, 3
    411a:	11 c0       	rjmp	.+34     	; 0x413e <__RODATA_PM_OFFSET__+0x13e>
    411c:	00 ff       	sbrs	r16, 0
    411e:	06 c0       	rjmp	.+12     	; 0x412c <__RODATA_PM_OFFSET__+0x12c>
    4120:	1c 2d       	mov	r17, r12
    4122:	d5 14       	cp	r13, r5
    4124:	80 f4       	brcc	.+32     	; 0x4146 <__RODATA_PM_OFFSET__+0x146>
    4126:	15 0d       	add	r17, r5
    4128:	1d 19       	sub	r17, r13
    412a:	0d c0       	rjmp	.+26     	; 0x4146 <__RODATA_PM_OFFSET__+0x146>
    412c:	d5 14       	cp	r13, r5
    412e:	58 f4       	brcc	.+22     	; 0x4146 <__RODATA_PM_OFFSET__+0x146>
    4130:	b7 01       	movw	r22, r14
    4132:	80 e2       	ldi	r24, 0x20	; 32
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    413a:	d3 94       	inc	r13
    413c:	f7 cf       	rjmp	.-18     	; 0x412c <__RODATA_PM_OFFSET__+0x12c>
    413e:	d5 14       	cp	r13, r5
    4140:	10 f4       	brcc	.+4      	; 0x4146 <__RODATA_PM_OFFSET__+0x146>
    4142:	5d 18       	sub	r5, r13
    4144:	01 c0       	rjmp	.+2      	; 0x4148 <__RODATA_PM_OFFSET__+0x148>
    4146:	51 2c       	mov	r5, r1
    4148:	04 ff       	sbrs	r16, 4
    414a:	10 c0       	rjmp	.+32     	; 0x416c <__RODATA_PM_OFFSET__+0x16c>
    414c:	b7 01       	movw	r22, r14
    414e:	80 e3       	ldi	r24, 0x30	; 48
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    4156:	02 ff       	sbrs	r16, 2
    4158:	17 c0       	rjmp	.+46     	; 0x4188 <__RODATA_PM_OFFSET__+0x188>
    415a:	01 fd       	sbrc	r16, 1
    415c:	03 c0       	rjmp	.+6      	; 0x4164 <__RODATA_PM_OFFSET__+0x164>
    415e:	88 e7       	ldi	r24, 0x78	; 120
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	02 c0       	rjmp	.+4      	; 0x4168 <__RODATA_PM_OFFSET__+0x168>
    4164:	88 e5       	ldi	r24, 0x58	; 88
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	b7 01       	movw	r22, r14
    416a:	0c c0       	rjmp	.+24     	; 0x4184 <__RODATA_PM_OFFSET__+0x184>
    416c:	80 2f       	mov	r24, r16
    416e:	86 78       	andi	r24, 0x86	; 134
    4170:	59 f0       	breq	.+22     	; 0x4188 <__RODATA_PM_OFFSET__+0x188>
    4172:	01 ff       	sbrs	r16, 1
    4174:	02 c0       	rjmp	.+4      	; 0x417a <__RODATA_PM_OFFSET__+0x17a>
    4176:	8b e2       	ldi	r24, 0x2B	; 43
    4178:	01 c0       	rjmp	.+2      	; 0x417c <__RODATA_PM_OFFSET__+0x17c>
    417a:	80 e2       	ldi	r24, 0x20	; 32
    417c:	07 fd       	sbrc	r16, 7
    417e:	8d e2       	ldi	r24, 0x2D	; 45
    4180:	b7 01       	movw	r22, r14
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    4188:	c1 16       	cp	r12, r17
    418a:	38 f4       	brcc	.+14     	; 0x419a <__RODATA_PM_OFFSET__+0x19a>
    418c:	b7 01       	movw	r22, r14
    418e:	80 e3       	ldi	r24, 0x30	; 48
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    4196:	11 50       	subi	r17, 0x01	; 1
    4198:	f7 cf       	rjmp	.-18     	; 0x4188 <__RODATA_PM_OFFSET__+0x188>
    419a:	ca 94       	dec	r12
    419c:	f3 01       	movw	r30, r6
    419e:	ec 0d       	add	r30, r12
    41a0:	f1 1d       	adc	r31, r1
    41a2:	80 81       	ld	r24, Z
    41a4:	b7 01       	movw	r22, r14
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    41ac:	c1 10       	cpse	r12, r1
    41ae:	f5 cf       	rjmp	.-22     	; 0x419a <__RODATA_PM_OFFSET__+0x19a>
    41b0:	15 c0       	rjmp	.+42     	; 0x41dc <__RODATA_PM_OFFSET__+0x1dc>
    41b2:	f4 e0       	ldi	r31, 0x04	; 4
    41b4:	f5 15       	cp	r31, r5
    41b6:	60 f5       	brcc	.+88     	; 0x4210 <__RODATA_PM_OFFSET__+0x210>
    41b8:	84 e0       	ldi	r24, 0x04	; 4
    41ba:	58 1a       	sub	r5, r24
    41bc:	93 fe       	sbrs	r9, 3
    41be:	1f c0       	rjmp	.+62     	; 0x41fe <__RODATA_PM_OFFSET__+0x1fe>
    41c0:	01 11       	cpse	r16, r1
    41c2:	27 c0       	rjmp	.+78     	; 0x4212 <__RODATA_PM_OFFSET__+0x212>
    41c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    41c6:	23 ff       	sbrs	r18, 3
    41c8:	2a c0       	rjmp	.+84     	; 0x421e <__RODATA_PM_OFFSET__+0x21e>
    41ca:	02 e5       	ldi	r16, 0x52	; 82
    41cc:	11 e0       	ldi	r17, 0x01	; 1
    41ce:	39 2d       	mov	r19, r9
    41d0:	30 71       	andi	r19, 0x10	; 16
    41d2:	93 2e       	mov	r9, r19
    41d4:	f8 01       	movw	r30, r16
    41d6:	84 91       	lpm	r24, Z
    41d8:	81 11       	cpse	r24, r1
    41da:	24 c0       	rjmp	.+72     	; 0x4224 <__RODATA_PM_OFFSET__+0x224>
    41dc:	55 20       	and	r5, r5
    41de:	09 f4       	brne	.+2      	; 0x41e2 <__RODATA_PM_OFFSET__+0x1e2>
    41e0:	e4 cc       	rjmp	.-1592   	; 0x3baa <vfprintf+0x58>
    41e2:	b7 01       	movw	r22, r14
    41e4:	80 e2       	ldi	r24, 0x20	; 32
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    41ec:	5a 94       	dec	r5
    41ee:	f6 cf       	rjmp	.-20     	; 0x41dc <__RODATA_PM_OFFSET__+0x1dc>
    41f0:	f7 01       	movw	r30, r14
    41f2:	86 81       	ldd	r24, Z+6	; 0x06
    41f4:	97 81       	ldd	r25, Z+7	; 0x07
    41f6:	26 c0       	rjmp	.+76     	; 0x4244 <__RODATA_PM_OFFSET__+0x244>
    41f8:	8f ef       	ldi	r24, 0xFF	; 255
    41fa:	9f ef       	ldi	r25, 0xFF	; 255
    41fc:	23 c0       	rjmp	.+70     	; 0x4244 <__RODATA_PM_OFFSET__+0x244>
    41fe:	b7 01       	movw	r22, r14
    4200:	80 e2       	ldi	r24, 0x20	; 32
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    4208:	5a 94       	dec	r5
    420a:	51 10       	cpse	r5, r1
    420c:	f8 cf       	rjmp	.-16     	; 0x41fe <__RODATA_PM_OFFSET__+0x1fe>
    420e:	d8 cf       	rjmp	.-80     	; 0x41c0 <__RODATA_PM_OFFSET__+0x1c0>
    4210:	51 2c       	mov	r5, r1
    4212:	b7 01       	movw	r22, r14
    4214:	80 2f       	mov	r24, r16
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    421c:	d3 cf       	rjmp	.-90     	; 0x41c4 <__RODATA_PM_OFFSET__+0x1c4>
    421e:	06 e5       	ldi	r16, 0x56	; 86
    4220:	11 e0       	ldi	r17, 0x01	; 1
    4222:	d5 cf       	rjmp	.-86     	; 0x41ce <__RODATA_PM_OFFSET__+0x1ce>
    4224:	91 10       	cpse	r9, r1
    4226:	80 52       	subi	r24, 0x20	; 32
    4228:	b7 01       	movw	r22, r14
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	0e 94 1c 23 	call	0x4638	; 0x4638 <fputc>
    4230:	0f 5f       	subi	r16, 0xFF	; 255
    4232:	1f 4f       	sbci	r17, 0xFF	; 255
    4234:	cf cf       	rjmp	.-98     	; 0x41d4 <__RODATA_PM_OFFSET__+0x1d4>
    4236:	23 e0       	ldi	r18, 0x03	; 3
    4238:	25 15       	cp	r18, r5
    423a:	10 f4       	brcc	.+4      	; 0x4240 <__RODATA_PM_OFFSET__+0x240>
    423c:	83 e0       	ldi	r24, 0x03	; 3
    423e:	bd cf       	rjmp	.-134    	; 0x41ba <__RODATA_PM_OFFSET__+0x1ba>
    4240:	51 2c       	mov	r5, r1
    4242:	c0 cf       	rjmp	.-128    	; 0x41c4 <__RODATA_PM_OFFSET__+0x1c4>
    4244:	60 96       	adiw	r28, 0x10	; 16
    4246:	e2 e1       	ldi	r30, 0x12	; 18
    4248:	0c 94 83 21 	jmp	0x4306	; 0x4306 <__epilogue_restores__>

0000424c <__divmodhi4>:
    424c:	97 fb       	bst	r25, 7
    424e:	07 2e       	mov	r0, r23
    4250:	16 f4       	brtc	.+4      	; 0x4256 <__divmodhi4+0xa>
    4252:	00 94       	com	r0
    4254:	07 d0       	rcall	.+14     	; 0x4264 <__divmodhi4_neg1>
    4256:	77 fd       	sbrc	r23, 7
    4258:	09 d0       	rcall	.+18     	; 0x426c <__divmodhi4_neg2>
    425a:	0e 94 9b 21 	call	0x4336	; 0x4336 <__udivmodhi4>
    425e:	07 fc       	sbrc	r0, 7
    4260:	05 d0       	rcall	.+10     	; 0x426c <__divmodhi4_neg2>
    4262:	3e f4       	brtc	.+14     	; 0x4272 <__divmodhi4_exit>

00004264 <__divmodhi4_neg1>:
    4264:	90 95       	com	r25
    4266:	81 95       	neg	r24
    4268:	9f 4f       	sbci	r25, 0xFF	; 255
    426a:	08 95       	ret

0000426c <__divmodhi4_neg2>:
    426c:	70 95       	com	r23
    426e:	61 95       	neg	r22
    4270:	7f 4f       	sbci	r23, 0xFF	; 255

00004272 <__divmodhi4_exit>:
    4272:	08 95       	ret

00004274 <__divmodsi4>:
    4274:	05 2e       	mov	r0, r21
    4276:	97 fb       	bst	r25, 7
    4278:	1e f4       	brtc	.+6      	; 0x4280 <__divmodsi4+0xc>
    427a:	00 94       	com	r0
    427c:	0e 94 51 21 	call	0x42a2	; 0x42a2 <__negsi2>
    4280:	57 fd       	sbrc	r21, 7
    4282:	07 d0       	rcall	.+14     	; 0x4292 <__divmodsi4_neg2>
    4284:	0e 94 af 21 	call	0x435e	; 0x435e <__udivmodsi4>
    4288:	07 fc       	sbrc	r0, 7
    428a:	03 d0       	rcall	.+6      	; 0x4292 <__divmodsi4_neg2>
    428c:	4e f4       	brtc	.+18     	; 0x42a0 <__divmodsi4_exit>
    428e:	0c 94 51 21 	jmp	0x42a2	; 0x42a2 <__negsi2>

00004292 <__divmodsi4_neg2>:
    4292:	50 95       	com	r21
    4294:	40 95       	com	r20
    4296:	30 95       	com	r19
    4298:	21 95       	neg	r18
    429a:	3f 4f       	sbci	r19, 0xFF	; 255
    429c:	4f 4f       	sbci	r20, 0xFF	; 255
    429e:	5f 4f       	sbci	r21, 0xFF	; 255

000042a0 <__divmodsi4_exit>:
    42a0:	08 95       	ret

000042a2 <__negsi2>:
    42a2:	90 95       	com	r25
    42a4:	80 95       	com	r24
    42a6:	70 95       	com	r23
    42a8:	61 95       	neg	r22
    42aa:	7f 4f       	sbci	r23, 0xFF	; 255
    42ac:	8f 4f       	sbci	r24, 0xFF	; 255
    42ae:	9f 4f       	sbci	r25, 0xFF	; 255
    42b0:	08 95       	ret

000042b2 <__tablejump2__>:
    42b2:	ee 0f       	add	r30, r30
    42b4:	ff 1f       	adc	r31, r31
    42b6:	05 90       	lpm	r0, Z+
    42b8:	f4 91       	lpm	r31, Z
    42ba:	e0 2d       	mov	r30, r0
    42bc:	09 94       	ijmp

000042be <__muluhisi3>:
    42be:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <__umulhisi3>
    42c2:	a5 9f       	mul	r26, r21
    42c4:	90 0d       	add	r25, r0
    42c6:	b4 9f       	mul	r27, r20
    42c8:	90 0d       	add	r25, r0
    42ca:	a4 9f       	mul	r26, r20
    42cc:	80 0d       	add	r24, r0
    42ce:	91 1d       	adc	r25, r1
    42d0:	11 24       	eor	r1, r1
    42d2:	08 95       	ret

000042d4 <__prologue_saves__>:
    42d4:	2f 92       	push	r2
    42d6:	3f 92       	push	r3
    42d8:	4f 92       	push	r4
    42da:	5f 92       	push	r5
    42dc:	6f 92       	push	r6
    42de:	7f 92       	push	r7
    42e0:	8f 92       	push	r8
    42e2:	9f 92       	push	r9
    42e4:	af 92       	push	r10
    42e6:	bf 92       	push	r11
    42e8:	cf 92       	push	r12
    42ea:	df 92       	push	r13
    42ec:	ef 92       	push	r14
    42ee:	ff 92       	push	r15
    42f0:	0f 93       	push	r16
    42f2:	1f 93       	push	r17
    42f4:	cf 93       	push	r28
    42f6:	df 93       	push	r29
    42f8:	cd b7       	in	r28, 0x3d	; 61
    42fa:	de b7       	in	r29, 0x3e	; 62
    42fc:	ca 1b       	sub	r28, r26
    42fe:	db 0b       	sbc	r29, r27
    4300:	cd bf       	out	0x3d, r28	; 61
    4302:	de bf       	out	0x3e, r29	; 62
    4304:	09 94       	ijmp

00004306 <__epilogue_restores__>:
    4306:	2a 88       	ldd	r2, Y+18	; 0x12
    4308:	39 88       	ldd	r3, Y+17	; 0x11
    430a:	48 88       	ldd	r4, Y+16	; 0x10
    430c:	5f 84       	ldd	r5, Y+15	; 0x0f
    430e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4310:	7d 84       	ldd	r7, Y+13	; 0x0d
    4312:	8c 84       	ldd	r8, Y+12	; 0x0c
    4314:	9b 84       	ldd	r9, Y+11	; 0x0b
    4316:	aa 84       	ldd	r10, Y+10	; 0x0a
    4318:	b9 84       	ldd	r11, Y+9	; 0x09
    431a:	c8 84       	ldd	r12, Y+8	; 0x08
    431c:	df 80       	ldd	r13, Y+7	; 0x07
    431e:	ee 80       	ldd	r14, Y+6	; 0x06
    4320:	fd 80       	ldd	r15, Y+5	; 0x05
    4322:	0c 81       	ldd	r16, Y+4	; 0x04
    4324:	1b 81       	ldd	r17, Y+3	; 0x03
    4326:	aa 81       	ldd	r26, Y+2	; 0x02
    4328:	b9 81       	ldd	r27, Y+1	; 0x01
    432a:	ce 0f       	add	r28, r30
    432c:	d1 1d       	adc	r29, r1
    432e:	cd bf       	out	0x3d, r28	; 61
    4330:	de bf       	out	0x3e, r29	; 62
    4332:	ed 01       	movw	r28, r26
    4334:	08 95       	ret

00004336 <__udivmodhi4>:
    4336:	aa 1b       	sub	r26, r26
    4338:	bb 1b       	sub	r27, r27
    433a:	51 e1       	ldi	r21, 0x11	; 17
    433c:	07 c0       	rjmp	.+14     	; 0x434c <__udivmodhi4_ep>

0000433e <__udivmodhi4_loop>:
    433e:	aa 1f       	adc	r26, r26
    4340:	bb 1f       	adc	r27, r27
    4342:	a6 17       	cp	r26, r22
    4344:	b7 07       	cpc	r27, r23
    4346:	10 f0       	brcs	.+4      	; 0x434c <__udivmodhi4_ep>
    4348:	a6 1b       	sub	r26, r22
    434a:	b7 0b       	sbc	r27, r23

0000434c <__udivmodhi4_ep>:
    434c:	88 1f       	adc	r24, r24
    434e:	99 1f       	adc	r25, r25
    4350:	5a 95       	dec	r21
    4352:	a9 f7       	brne	.-22     	; 0x433e <__udivmodhi4_loop>
    4354:	80 95       	com	r24
    4356:	90 95       	com	r25
    4358:	bc 01       	movw	r22, r24
    435a:	cd 01       	movw	r24, r26
    435c:	08 95       	ret

0000435e <__udivmodsi4>:
    435e:	a1 e2       	ldi	r26, 0x21	; 33
    4360:	1a 2e       	mov	r1, r26
    4362:	aa 1b       	sub	r26, r26
    4364:	bb 1b       	sub	r27, r27
    4366:	fd 01       	movw	r30, r26
    4368:	0d c0       	rjmp	.+26     	; 0x4384 <__udivmodsi4_ep>

0000436a <__udivmodsi4_loop>:
    436a:	aa 1f       	adc	r26, r26
    436c:	bb 1f       	adc	r27, r27
    436e:	ee 1f       	adc	r30, r30
    4370:	ff 1f       	adc	r31, r31
    4372:	a2 17       	cp	r26, r18
    4374:	b3 07       	cpc	r27, r19
    4376:	e4 07       	cpc	r30, r20
    4378:	f5 07       	cpc	r31, r21
    437a:	20 f0       	brcs	.+8      	; 0x4384 <__udivmodsi4_ep>
    437c:	a2 1b       	sub	r26, r18
    437e:	b3 0b       	sbc	r27, r19
    4380:	e4 0b       	sbc	r30, r20
    4382:	f5 0b       	sbc	r31, r21

00004384 <__udivmodsi4_ep>:
    4384:	66 1f       	adc	r22, r22
    4386:	77 1f       	adc	r23, r23
    4388:	88 1f       	adc	r24, r24
    438a:	99 1f       	adc	r25, r25
    438c:	1a 94       	dec	r1
    438e:	69 f7       	brne	.-38     	; 0x436a <__udivmodsi4_loop>
    4390:	60 95       	com	r22
    4392:	70 95       	com	r23
    4394:	80 95       	com	r24
    4396:	90 95       	com	r25
    4398:	9b 01       	movw	r18, r22
    439a:	ac 01       	movw	r20, r24
    439c:	bd 01       	movw	r22, r26
    439e:	cf 01       	movw	r24, r30
    43a0:	08 95       	ret

000043a2 <__umulhisi3>:
    43a2:	a2 9f       	mul	r26, r18
    43a4:	b0 01       	movw	r22, r0
    43a6:	b3 9f       	mul	r27, r19
    43a8:	c0 01       	movw	r24, r0
    43aa:	a3 9f       	mul	r26, r19
    43ac:	70 0d       	add	r23, r0
    43ae:	81 1d       	adc	r24, r1
    43b0:	11 24       	eor	r1, r1
    43b2:	91 1d       	adc	r25, r1
    43b4:	b2 9f       	mul	r27, r18
    43b6:	70 0d       	add	r23, r0
    43b8:	81 1d       	adc	r24, r1
    43ba:	11 24       	eor	r1, r1
    43bc:	91 1d       	adc	r25, r1
    43be:	08 95       	ret

000043c0 <atol>:
    43c0:	1f 93       	push	r17
    43c2:	fc 01       	movw	r30, r24
    43c4:	99 27       	eor	r25, r25
    43c6:	88 27       	eor	r24, r24
    43c8:	bc 01       	movw	r22, r24
    43ca:	e8 94       	clt
    43cc:	11 91       	ld	r17, Z+
    43ce:	10 32       	cpi	r17, 0x20	; 32
    43d0:	e9 f3       	breq	.-6      	; 0x43cc <atol+0xc>
    43d2:	19 30       	cpi	r17, 0x09	; 9
    43d4:	10 f0       	brcs	.+4      	; 0x43da <atol+0x1a>
    43d6:	1e 30       	cpi	r17, 0x0E	; 14
    43d8:	c8 f3       	brcs	.-14     	; 0x43cc <atol+0xc>
    43da:	1b 32       	cpi	r17, 0x2B	; 43
    43dc:	51 f0       	breq	.+20     	; 0x43f2 <atol+0x32>
    43de:	1d 32       	cpi	r17, 0x2D	; 45
    43e0:	49 f4       	brne	.+18     	; 0x43f4 <atol+0x34>
    43e2:	68 94       	set
    43e4:	06 c0       	rjmp	.+12     	; 0x43f2 <atol+0x32>
    43e6:	0e 94 07 23 	call	0x460e	; 0x460e <__mulsi_const_10>
    43ea:	61 0f       	add	r22, r17
    43ec:	71 1d       	adc	r23, r1
    43ee:	81 1d       	adc	r24, r1
    43f0:	91 1d       	adc	r25, r1
    43f2:	11 91       	ld	r17, Z+
    43f4:	10 53       	subi	r17, 0x30	; 48
    43f6:	1a 30       	cpi	r17, 0x0A	; 10
    43f8:	b0 f3       	brcs	.-20     	; 0x43e6 <atol+0x26>
    43fa:	3e f4       	brtc	.+14     	; 0x440a <atol+0x4a>
    43fc:	90 95       	com	r25
    43fe:	80 95       	com	r24
    4400:	70 95       	com	r23
    4402:	61 95       	neg	r22
    4404:	7f 4f       	sbci	r23, 0xFF	; 255
    4406:	8f 4f       	sbci	r24, 0xFF	; 255
    4408:	9f 4f       	sbci	r25, 0xFF	; 255
    440a:	1f 91       	pop	r17
    440c:	08 95       	ret

0000440e <__ftoa_engine>:
    440e:	28 30       	cpi	r18, 0x08	; 8
    4410:	08 f0       	brcs	.+2      	; 0x4414 <__ftoa_engine+0x6>
    4412:	27 e0       	ldi	r18, 0x07	; 7
    4414:	33 27       	eor	r19, r19
    4416:	da 01       	movw	r26, r20
    4418:	99 0f       	add	r25, r25
    441a:	31 1d       	adc	r19, r1
    441c:	87 fd       	sbrc	r24, 7
    441e:	91 60       	ori	r25, 0x01	; 1
    4420:	00 96       	adiw	r24, 0x00	; 0
    4422:	61 05       	cpc	r22, r1
    4424:	71 05       	cpc	r23, r1
    4426:	39 f4       	brne	.+14     	; 0x4436 <__ftoa_engine+0x28>
    4428:	32 60       	ori	r19, 0x02	; 2
    442a:	2e 5f       	subi	r18, 0xFE	; 254
    442c:	3d 93       	st	X+, r19
    442e:	30 e3       	ldi	r19, 0x30	; 48
    4430:	2a 95       	dec	r18
    4432:	e1 f7       	brne	.-8      	; 0x442c <__ftoa_engine+0x1e>
    4434:	08 95       	ret
    4436:	9f 3f       	cpi	r25, 0xFF	; 255
    4438:	30 f0       	brcs	.+12     	; 0x4446 <__ftoa_engine+0x38>
    443a:	80 38       	cpi	r24, 0x80	; 128
    443c:	71 05       	cpc	r23, r1
    443e:	61 05       	cpc	r22, r1
    4440:	09 f0       	breq	.+2      	; 0x4444 <__ftoa_engine+0x36>
    4442:	3c 5f       	subi	r19, 0xFC	; 252
    4444:	3c 5f       	subi	r19, 0xFC	; 252
    4446:	3d 93       	st	X+, r19
    4448:	91 30       	cpi	r25, 0x01	; 1
    444a:	08 f0       	brcs	.+2      	; 0x444e <__ftoa_engine+0x40>
    444c:	80 68       	ori	r24, 0x80	; 128
    444e:	91 1d       	adc	r25, r1
    4450:	df 93       	push	r29
    4452:	cf 93       	push	r28
    4454:	1f 93       	push	r17
    4456:	0f 93       	push	r16
    4458:	ff 92       	push	r15
    445a:	ef 92       	push	r14
    445c:	19 2f       	mov	r17, r25
    445e:	98 7f       	andi	r25, 0xF8	; 248
    4460:	96 95       	lsr	r25
    4462:	e9 2f       	mov	r30, r25
    4464:	96 95       	lsr	r25
    4466:	96 95       	lsr	r25
    4468:	e9 0f       	add	r30, r25
    446a:	ff 27       	eor	r31, r31
    446c:	ec 54       	subi	r30, 0x4C	; 76
    446e:	fe 4f       	sbci	r31, 0xFE	; 254
    4470:	99 27       	eor	r25, r25
    4472:	33 27       	eor	r19, r19
    4474:	ee 24       	eor	r14, r14
    4476:	ff 24       	eor	r15, r15
    4478:	a7 01       	movw	r20, r14
    447a:	e7 01       	movw	r28, r14
    447c:	05 90       	lpm	r0, Z+
    447e:	08 94       	sec
    4480:	07 94       	ror	r0
    4482:	28 f4       	brcc	.+10     	; 0x448e <__ftoa_engine+0x80>
    4484:	36 0f       	add	r19, r22
    4486:	e7 1e       	adc	r14, r23
    4488:	f8 1e       	adc	r15, r24
    448a:	49 1f       	adc	r20, r25
    448c:	51 1d       	adc	r21, r1
    448e:	66 0f       	add	r22, r22
    4490:	77 1f       	adc	r23, r23
    4492:	88 1f       	adc	r24, r24
    4494:	99 1f       	adc	r25, r25
    4496:	06 94       	lsr	r0
    4498:	a1 f7       	brne	.-24     	; 0x4482 <__ftoa_engine+0x74>
    449a:	05 90       	lpm	r0, Z+
    449c:	07 94       	ror	r0
    449e:	28 f4       	brcc	.+10     	; 0x44aa <__ftoa_engine+0x9c>
    44a0:	e7 0e       	add	r14, r23
    44a2:	f8 1e       	adc	r15, r24
    44a4:	49 1f       	adc	r20, r25
    44a6:	56 1f       	adc	r21, r22
    44a8:	c1 1d       	adc	r28, r1
    44aa:	77 0f       	add	r23, r23
    44ac:	88 1f       	adc	r24, r24
    44ae:	99 1f       	adc	r25, r25
    44b0:	66 1f       	adc	r22, r22
    44b2:	06 94       	lsr	r0
    44b4:	a1 f7       	brne	.-24     	; 0x449e <__ftoa_engine+0x90>
    44b6:	05 90       	lpm	r0, Z+
    44b8:	07 94       	ror	r0
    44ba:	28 f4       	brcc	.+10     	; 0x44c6 <__ftoa_engine+0xb8>
    44bc:	f8 0e       	add	r15, r24
    44be:	49 1f       	adc	r20, r25
    44c0:	56 1f       	adc	r21, r22
    44c2:	c7 1f       	adc	r28, r23
    44c4:	d1 1d       	adc	r29, r1
    44c6:	88 0f       	add	r24, r24
    44c8:	99 1f       	adc	r25, r25
    44ca:	66 1f       	adc	r22, r22
    44cc:	77 1f       	adc	r23, r23
    44ce:	06 94       	lsr	r0
    44d0:	a1 f7       	brne	.-24     	; 0x44ba <__ftoa_engine+0xac>
    44d2:	05 90       	lpm	r0, Z+
    44d4:	07 94       	ror	r0
    44d6:	20 f4       	brcc	.+8      	; 0x44e0 <__ftoa_engine+0xd2>
    44d8:	49 0f       	add	r20, r25
    44da:	56 1f       	adc	r21, r22
    44dc:	c7 1f       	adc	r28, r23
    44de:	d8 1f       	adc	r29, r24
    44e0:	99 0f       	add	r25, r25
    44e2:	66 1f       	adc	r22, r22
    44e4:	77 1f       	adc	r23, r23
    44e6:	88 1f       	adc	r24, r24
    44e8:	06 94       	lsr	r0
    44ea:	a9 f7       	brne	.-22     	; 0x44d6 <__ftoa_engine+0xc8>
    44ec:	84 91       	lpm	r24, Z
    44ee:	10 95       	com	r17
    44f0:	17 70       	andi	r17, 0x07	; 7
    44f2:	41 f0       	breq	.+16     	; 0x4504 <__ftoa_engine+0xf6>
    44f4:	d6 95       	lsr	r29
    44f6:	c7 95       	ror	r28
    44f8:	57 95       	ror	r21
    44fa:	47 95       	ror	r20
    44fc:	f7 94       	ror	r15
    44fe:	e7 94       	ror	r14
    4500:	1a 95       	dec	r17
    4502:	c1 f7       	brne	.-16     	; 0x44f4 <__ftoa_engine+0xe6>
    4504:	ea e5       	ldi	r30, 0x5A	; 90
    4506:	f1 e0       	ldi	r31, 0x01	; 1
    4508:	68 94       	set
    450a:	15 90       	lpm	r1, Z+
    450c:	15 91       	lpm	r17, Z+
    450e:	35 91       	lpm	r19, Z+
    4510:	65 91       	lpm	r22, Z+
    4512:	95 91       	lpm	r25, Z+
    4514:	05 90       	lpm	r0, Z+
    4516:	7f e2       	ldi	r23, 0x2F	; 47
    4518:	73 95       	inc	r23
    451a:	e1 18       	sub	r14, r1
    451c:	f1 0a       	sbc	r15, r17
    451e:	43 0b       	sbc	r20, r19
    4520:	56 0b       	sbc	r21, r22
    4522:	c9 0b       	sbc	r28, r25
    4524:	d0 09       	sbc	r29, r0
    4526:	c0 f7       	brcc	.-16     	; 0x4518 <__ftoa_engine+0x10a>
    4528:	e1 0c       	add	r14, r1
    452a:	f1 1e       	adc	r15, r17
    452c:	43 1f       	adc	r20, r19
    452e:	56 1f       	adc	r21, r22
    4530:	c9 1f       	adc	r28, r25
    4532:	d0 1d       	adc	r29, r0
    4534:	7e f4       	brtc	.+30     	; 0x4554 <__ftoa_engine+0x146>
    4536:	70 33       	cpi	r23, 0x30	; 48
    4538:	11 f4       	brne	.+4      	; 0x453e <__ftoa_engine+0x130>
    453a:	8a 95       	dec	r24
    453c:	e6 cf       	rjmp	.-52     	; 0x450a <__ftoa_engine+0xfc>
    453e:	e8 94       	clt
    4540:	01 50       	subi	r16, 0x01	; 1
    4542:	30 f0       	brcs	.+12     	; 0x4550 <__ftoa_engine+0x142>
    4544:	08 0f       	add	r16, r24
    4546:	0a f4       	brpl	.+2      	; 0x454a <__ftoa_engine+0x13c>
    4548:	00 27       	eor	r16, r16
    454a:	02 17       	cp	r16, r18
    454c:	08 f4       	brcc	.+2      	; 0x4550 <__ftoa_engine+0x142>
    454e:	20 2f       	mov	r18, r16
    4550:	23 95       	inc	r18
    4552:	02 2f       	mov	r16, r18
    4554:	7a 33       	cpi	r23, 0x3A	; 58
    4556:	28 f0       	brcs	.+10     	; 0x4562 <__ftoa_engine+0x154>
    4558:	79 e3       	ldi	r23, 0x39	; 57
    455a:	7d 93       	st	X+, r23
    455c:	2a 95       	dec	r18
    455e:	e9 f7       	brne	.-6      	; 0x455a <__ftoa_engine+0x14c>
    4560:	10 c0       	rjmp	.+32     	; 0x4582 <__ftoa_engine+0x174>
    4562:	7d 93       	st	X+, r23
    4564:	2a 95       	dec	r18
    4566:	89 f6       	brne	.-94     	; 0x450a <__ftoa_engine+0xfc>
    4568:	06 94       	lsr	r0
    456a:	97 95       	ror	r25
    456c:	67 95       	ror	r22
    456e:	37 95       	ror	r19
    4570:	17 95       	ror	r17
    4572:	17 94       	ror	r1
    4574:	e1 18       	sub	r14, r1
    4576:	f1 0a       	sbc	r15, r17
    4578:	43 0b       	sbc	r20, r19
    457a:	56 0b       	sbc	r21, r22
    457c:	c9 0b       	sbc	r28, r25
    457e:	d0 09       	sbc	r29, r0
    4580:	98 f0       	brcs	.+38     	; 0x45a8 <__ftoa_engine+0x19a>
    4582:	23 95       	inc	r18
    4584:	7e 91       	ld	r23, -X
    4586:	73 95       	inc	r23
    4588:	7a 33       	cpi	r23, 0x3A	; 58
    458a:	08 f0       	brcs	.+2      	; 0x458e <__ftoa_engine+0x180>
    458c:	70 e3       	ldi	r23, 0x30	; 48
    458e:	7c 93       	st	X, r23
    4590:	20 13       	cpse	r18, r16
    4592:	b8 f7       	brcc	.-18     	; 0x4582 <__ftoa_engine+0x174>
    4594:	7e 91       	ld	r23, -X
    4596:	70 61       	ori	r23, 0x10	; 16
    4598:	7d 93       	st	X+, r23
    459a:	30 f0       	brcs	.+12     	; 0x45a8 <__ftoa_engine+0x19a>
    459c:	83 95       	inc	r24
    459e:	71 e3       	ldi	r23, 0x31	; 49
    45a0:	7d 93       	st	X+, r23
    45a2:	70 e3       	ldi	r23, 0x30	; 48
    45a4:	2a 95       	dec	r18
    45a6:	e1 f7       	brne	.-8      	; 0x45a0 <__ftoa_engine+0x192>
    45a8:	11 24       	eor	r1, r1
    45aa:	ef 90       	pop	r14
    45ac:	ff 90       	pop	r15
    45ae:	0f 91       	pop	r16
    45b0:	1f 91       	pop	r17
    45b2:	cf 91       	pop	r28
    45b4:	df 91       	pop	r29
    45b6:	99 27       	eor	r25, r25
    45b8:	87 fd       	sbrc	r24, 7
    45ba:	90 95       	com	r25
    45bc:	08 95       	ret

000045be <strnlen_P>:
    45be:	fc 01       	movw	r30, r24
    45c0:	05 90       	lpm	r0, Z+
    45c2:	61 50       	subi	r22, 0x01	; 1
    45c4:	70 40       	sbci	r23, 0x00	; 0
    45c6:	01 10       	cpse	r0, r1
    45c8:	d8 f7       	brcc	.-10     	; 0x45c0 <strnlen_P+0x2>
    45ca:	80 95       	com	r24
    45cc:	90 95       	com	r25
    45ce:	8e 0f       	add	r24, r30
    45d0:	9f 1f       	adc	r25, r31
    45d2:	08 95       	ret

000045d4 <strcat>:
    45d4:	fb 01       	movw	r30, r22
    45d6:	dc 01       	movw	r26, r24
    45d8:	0d 90       	ld	r0, X+
    45da:	00 20       	and	r0, r0
    45dc:	e9 f7       	brne	.-6      	; 0x45d8 <strcat+0x4>
    45de:	11 97       	sbiw	r26, 0x01	; 1
    45e0:	01 90       	ld	r0, Z+
    45e2:	0d 92       	st	X+, r0
    45e4:	00 20       	and	r0, r0
    45e6:	e1 f7       	brne	.-8      	; 0x45e0 <strcat+0xc>
    45e8:	08 95       	ret

000045ea <strcpy>:
    45ea:	fb 01       	movw	r30, r22
    45ec:	dc 01       	movw	r26, r24
    45ee:	01 90       	ld	r0, Z+
    45f0:	0d 92       	st	X+, r0
    45f2:	00 20       	and	r0, r0
    45f4:	e1 f7       	brne	.-8      	; 0x45ee <strcpy+0x4>
    45f6:	08 95       	ret

000045f8 <strnlen>:
    45f8:	fc 01       	movw	r30, r24
    45fa:	61 50       	subi	r22, 0x01	; 1
    45fc:	70 40       	sbci	r23, 0x00	; 0
    45fe:	01 90       	ld	r0, Z+
    4600:	01 10       	cpse	r0, r1
    4602:	d8 f7       	brcc	.-10     	; 0x45fa <strnlen+0x2>
    4604:	80 95       	com	r24
    4606:	90 95       	com	r25
    4608:	8e 0f       	add	r24, r30
    460a:	9f 1f       	adc	r25, r31
    460c:	08 95       	ret

0000460e <__mulsi_const_10>:
    460e:	59 2f       	mov	r21, r25
    4610:	48 2f       	mov	r20, r24
    4612:	37 2f       	mov	r19, r23
    4614:	26 2f       	mov	r18, r22
    4616:	66 0f       	add	r22, r22
    4618:	77 1f       	adc	r23, r23
    461a:	88 1f       	adc	r24, r24
    461c:	99 1f       	adc	r25, r25
    461e:	66 0f       	add	r22, r22
    4620:	77 1f       	adc	r23, r23
    4622:	88 1f       	adc	r24, r24
    4624:	99 1f       	adc	r25, r25
    4626:	62 0f       	add	r22, r18
    4628:	73 1f       	adc	r23, r19
    462a:	84 1f       	adc	r24, r20
    462c:	95 1f       	adc	r25, r21
    462e:	66 0f       	add	r22, r22
    4630:	77 1f       	adc	r23, r23
    4632:	88 1f       	adc	r24, r24
    4634:	99 1f       	adc	r25, r25
    4636:	08 95       	ret

00004638 <fputc>:
    4638:	0f 93       	push	r16
    463a:	1f 93       	push	r17
    463c:	cf 93       	push	r28
    463e:	df 93       	push	r29
    4640:	fb 01       	movw	r30, r22
    4642:	23 81       	ldd	r18, Z+3	; 0x03
    4644:	21 fd       	sbrc	r18, 1
    4646:	03 c0       	rjmp	.+6      	; 0x464e <fputc+0x16>
    4648:	8f ef       	ldi	r24, 0xFF	; 255
    464a:	9f ef       	ldi	r25, 0xFF	; 255
    464c:	2c c0       	rjmp	.+88     	; 0x46a6 <fputc+0x6e>
    464e:	22 ff       	sbrs	r18, 2
    4650:	16 c0       	rjmp	.+44     	; 0x467e <fputc+0x46>
    4652:	46 81       	ldd	r20, Z+6	; 0x06
    4654:	57 81       	ldd	r21, Z+7	; 0x07
    4656:	24 81       	ldd	r18, Z+4	; 0x04
    4658:	35 81       	ldd	r19, Z+5	; 0x05
    465a:	42 17       	cp	r20, r18
    465c:	53 07       	cpc	r21, r19
    465e:	44 f4       	brge	.+16     	; 0x4670 <fputc+0x38>
    4660:	a0 81       	ld	r26, Z
    4662:	b1 81       	ldd	r27, Z+1	; 0x01
    4664:	9d 01       	movw	r18, r26
    4666:	2f 5f       	subi	r18, 0xFF	; 255
    4668:	3f 4f       	sbci	r19, 0xFF	; 255
    466a:	20 83       	st	Z, r18
    466c:	31 83       	std	Z+1, r19	; 0x01
    466e:	8c 93       	st	X, r24
    4670:	26 81       	ldd	r18, Z+6	; 0x06
    4672:	37 81       	ldd	r19, Z+7	; 0x07
    4674:	2f 5f       	subi	r18, 0xFF	; 255
    4676:	3f 4f       	sbci	r19, 0xFF	; 255
    4678:	26 83       	std	Z+6, r18	; 0x06
    467a:	37 83       	std	Z+7, r19	; 0x07
    467c:	14 c0       	rjmp	.+40     	; 0x46a6 <fputc+0x6e>
    467e:	8b 01       	movw	r16, r22
    4680:	ec 01       	movw	r28, r24
    4682:	fb 01       	movw	r30, r22
    4684:	00 84       	ldd	r0, Z+8	; 0x08
    4686:	f1 85       	ldd	r31, Z+9	; 0x09
    4688:	e0 2d       	mov	r30, r0
    468a:	09 95       	icall
    468c:	89 2b       	or	r24, r25
    468e:	e1 f6       	brne	.-72     	; 0x4648 <fputc+0x10>
    4690:	d8 01       	movw	r26, r16
    4692:	16 96       	adiw	r26, 0x06	; 6
    4694:	8d 91       	ld	r24, X+
    4696:	9c 91       	ld	r25, X
    4698:	17 97       	sbiw	r26, 0x07	; 7
    469a:	01 96       	adiw	r24, 0x01	; 1
    469c:	16 96       	adiw	r26, 0x06	; 6
    469e:	8d 93       	st	X+, r24
    46a0:	9c 93       	st	X, r25
    46a2:	17 97       	sbiw	r26, 0x07	; 7
    46a4:	ce 01       	movw	r24, r28
    46a6:	df 91       	pop	r29
    46a8:	cf 91       	pop	r28
    46aa:	1f 91       	pop	r17
    46ac:	0f 91       	pop	r16
    46ae:	08 95       	ret

000046b0 <sprintf>:
    46b0:	ae e0       	ldi	r26, 0x0E	; 14
    46b2:	b0 e0       	ldi	r27, 0x00	; 0
    46b4:	ee e5       	ldi	r30, 0x5E	; 94
    46b6:	f3 e2       	ldi	r31, 0x23	; 35
    46b8:	0c 94 78 21 	jmp	0x42f0	; 0x42f0 <__prologue_saves__+0x1c>
    46bc:	0d 89       	ldd	r16, Y+21	; 0x15
    46be:	1e 89       	ldd	r17, Y+22	; 0x16
    46c0:	86 e0       	ldi	r24, 0x06	; 6
    46c2:	8c 83       	std	Y+4, r24	; 0x04
    46c4:	09 83       	std	Y+1, r16	; 0x01
    46c6:	1a 83       	std	Y+2, r17	; 0x02
    46c8:	8f ef       	ldi	r24, 0xFF	; 255
    46ca:	9f e7       	ldi	r25, 0x7F	; 127
    46cc:	8d 83       	std	Y+5, r24	; 0x05
    46ce:	9e 83       	std	Y+6, r25	; 0x06
    46d0:	ae 01       	movw	r20, r28
    46d2:	47 5e       	subi	r20, 0xE7	; 231
    46d4:	5f 4f       	sbci	r21, 0xFF	; 255
    46d6:	6f 89       	ldd	r22, Y+23	; 0x17
    46d8:	78 8d       	ldd	r23, Y+24	; 0x18
    46da:	ce 01       	movw	r24, r28
    46dc:	01 96       	adiw	r24, 0x01	; 1
    46de:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <vfprintf>
    46e2:	ef 81       	ldd	r30, Y+7	; 0x07
    46e4:	f8 85       	ldd	r31, Y+8	; 0x08
    46e6:	e0 0f       	add	r30, r16
    46e8:	f1 1f       	adc	r31, r17
    46ea:	10 82       	st	Z, r1
    46ec:	2e 96       	adiw	r28, 0x0e	; 14
    46ee:	e4 e0       	ldi	r30, 0x04	; 4
    46f0:	0c 94 91 21 	jmp	0x4322	; 0x4322 <__epilogue_restores__+0x1c>

000046f4 <__ultoa_invert>:
    46f4:	fa 01       	movw	r30, r20
    46f6:	aa 27       	eor	r26, r26
    46f8:	28 30       	cpi	r18, 0x08	; 8
    46fa:	51 f1       	breq	.+84     	; 0x4750 <__ultoa_invert+0x5c>
    46fc:	20 31       	cpi	r18, 0x10	; 16
    46fe:	81 f1       	breq	.+96     	; 0x4760 <__ultoa_invert+0x6c>
    4700:	e8 94       	clt
    4702:	6f 93       	push	r22
    4704:	6e 7f       	andi	r22, 0xFE	; 254
    4706:	6e 5f       	subi	r22, 0xFE	; 254
    4708:	7f 4f       	sbci	r23, 0xFF	; 255
    470a:	8f 4f       	sbci	r24, 0xFF	; 255
    470c:	9f 4f       	sbci	r25, 0xFF	; 255
    470e:	af 4f       	sbci	r26, 0xFF	; 255
    4710:	b1 e0       	ldi	r27, 0x01	; 1
    4712:	3e d0       	rcall	.+124    	; 0x4790 <__ultoa_invert+0x9c>
    4714:	b4 e0       	ldi	r27, 0x04	; 4
    4716:	3c d0       	rcall	.+120    	; 0x4790 <__ultoa_invert+0x9c>
    4718:	67 0f       	add	r22, r23
    471a:	78 1f       	adc	r23, r24
    471c:	89 1f       	adc	r24, r25
    471e:	9a 1f       	adc	r25, r26
    4720:	a1 1d       	adc	r26, r1
    4722:	68 0f       	add	r22, r24
    4724:	79 1f       	adc	r23, r25
    4726:	8a 1f       	adc	r24, r26
    4728:	91 1d       	adc	r25, r1
    472a:	a1 1d       	adc	r26, r1
    472c:	6a 0f       	add	r22, r26
    472e:	71 1d       	adc	r23, r1
    4730:	81 1d       	adc	r24, r1
    4732:	91 1d       	adc	r25, r1
    4734:	a1 1d       	adc	r26, r1
    4736:	20 d0       	rcall	.+64     	; 0x4778 <__ultoa_invert+0x84>
    4738:	09 f4       	brne	.+2      	; 0x473c <__ultoa_invert+0x48>
    473a:	68 94       	set
    473c:	3f 91       	pop	r19
    473e:	2a e0       	ldi	r18, 0x0A	; 10
    4740:	26 9f       	mul	r18, r22
    4742:	11 24       	eor	r1, r1
    4744:	30 19       	sub	r19, r0
    4746:	30 5d       	subi	r19, 0xD0	; 208
    4748:	31 93       	st	Z+, r19
    474a:	de f6       	brtc	.-74     	; 0x4702 <__ultoa_invert+0xe>
    474c:	cf 01       	movw	r24, r30
    474e:	08 95       	ret
    4750:	46 2f       	mov	r20, r22
    4752:	47 70       	andi	r20, 0x07	; 7
    4754:	40 5d       	subi	r20, 0xD0	; 208
    4756:	41 93       	st	Z+, r20
    4758:	b3 e0       	ldi	r27, 0x03	; 3
    475a:	0f d0       	rcall	.+30     	; 0x477a <__ultoa_invert+0x86>
    475c:	c9 f7       	brne	.-14     	; 0x4750 <__ultoa_invert+0x5c>
    475e:	f6 cf       	rjmp	.-20     	; 0x474c <__ultoa_invert+0x58>
    4760:	46 2f       	mov	r20, r22
    4762:	4f 70       	andi	r20, 0x0F	; 15
    4764:	40 5d       	subi	r20, 0xD0	; 208
    4766:	4a 33       	cpi	r20, 0x3A	; 58
    4768:	18 f0       	brcs	.+6      	; 0x4770 <__ultoa_invert+0x7c>
    476a:	49 5d       	subi	r20, 0xD9	; 217
    476c:	31 fd       	sbrc	r19, 1
    476e:	40 52       	subi	r20, 0x20	; 32
    4770:	41 93       	st	Z+, r20
    4772:	02 d0       	rcall	.+4      	; 0x4778 <__ultoa_invert+0x84>
    4774:	a9 f7       	brne	.-22     	; 0x4760 <__ultoa_invert+0x6c>
    4776:	ea cf       	rjmp	.-44     	; 0x474c <__ultoa_invert+0x58>
    4778:	b4 e0       	ldi	r27, 0x04	; 4
    477a:	a6 95       	lsr	r26
    477c:	97 95       	ror	r25
    477e:	87 95       	ror	r24
    4780:	77 95       	ror	r23
    4782:	67 95       	ror	r22
    4784:	ba 95       	dec	r27
    4786:	c9 f7       	brne	.-14     	; 0x477a <__ultoa_invert+0x86>
    4788:	00 97       	sbiw	r24, 0x00	; 0
    478a:	61 05       	cpc	r22, r1
    478c:	71 05       	cpc	r23, r1
    478e:	08 95       	ret
    4790:	9b 01       	movw	r18, r22
    4792:	ac 01       	movw	r20, r24
    4794:	0a 2e       	mov	r0, r26
    4796:	06 94       	lsr	r0
    4798:	57 95       	ror	r21
    479a:	47 95       	ror	r20
    479c:	37 95       	ror	r19
    479e:	27 95       	ror	r18
    47a0:	ba 95       	dec	r27
    47a2:	c9 f7       	brne	.-14     	; 0x4796 <__ultoa_invert+0xa2>
    47a4:	62 0f       	add	r22, r18
    47a6:	73 1f       	adc	r23, r19
    47a8:	84 1f       	adc	r24, r20
    47aa:	95 1f       	adc	r25, r21
    47ac:	a0 1d       	adc	r26, r0
    47ae:	08 95       	ret

000047b0 <eeprom_read_block>:
    47b0:	60 50       	subi	r22, 0x00	; 0
    47b2:	7c 4e       	sbci	r23, 0xEC	; 236
    47b4:	0c 94 13 24 	jmp	0x4826	; 0x4826 <memcpy>

000047b8 <eeprom_update_block>:
    47b8:	dc 01       	movw	r26, r24
    47ba:	a4 0f       	add	r26, r20
    47bc:	b5 1f       	adc	r27, r21
    47be:	41 50       	subi	r20, 0x01	; 1
    47c0:	50 40       	sbci	r21, 0x00	; 0
    47c2:	48 f0       	brcs	.+18     	; 0x47d6 <eeprom_update_block+0x1e>
    47c4:	cb 01       	movw	r24, r22
    47c6:	84 0f       	add	r24, r20
    47c8:	95 1f       	adc	r25, r21
    47ca:	2e 91       	ld	r18, -X
    47cc:	0e 94 ed 23 	call	0x47da	; 0x47da <eeprom_update_r18>
    47d0:	41 50       	subi	r20, 0x01	; 1
    47d2:	50 40       	sbci	r21, 0x00	; 0
    47d4:	d0 f7       	brcc	.-12     	; 0x47ca <eeprom_update_block+0x12>
    47d6:	08 95       	ret

000047d8 <eeprom_update_byte>:
    47d8:	26 2f       	mov	r18, r22

000047da <eeprom_update_r18>:
    47da:	0e 94 0f 24 	call	0x481e	; 0x481e <eeprom_mapen>
    47de:	00 80       	ld	r0, Z
    47e0:	02 16       	cp	r0, r18
    47e2:	19 f0       	breq	.+6      	; 0x47ea <eeprom_update_r18+0x10>
    47e4:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <eeprom_write_r18>
    47e8:	01 97       	sbiw	r24, 0x01	; 1
    47ea:	01 97       	sbiw	r24, 0x01	; 1
    47ec:	08 95       	ret

000047ee <eeprom_write_byte>:
    47ee:	26 2f       	mov	r18, r22

000047f0 <eeprom_write_r18>:
    47f0:	af 93       	push	r26
    47f2:	bf 93       	push	r27
    47f4:	e0 e0       	ldi	r30, 0x00	; 0
    47f6:	f0 e1       	ldi	r31, 0x10	; 16
    47f8:	32 81       	ldd	r19, Z+2	; 0x02
    47fa:	31 fd       	sbrc	r19, 1
    47fc:	fd cf       	rjmp	.-6      	; 0x47f8 <eeprom_write_r18+0x8>
    47fe:	dc 01       	movw	r26, r24
    4800:	a0 50       	subi	r26, 0x00	; 0
    4802:	bc 4e       	sbci	r27, 0xEC	; 236
    4804:	2c 93       	st	X, r18
    4806:	2d e9       	ldi	r18, 0x9D	; 157
    4808:	24 bf       	out	0x34, r18	; 52
    480a:	23 e0       	ldi	r18, 0x03	; 3
    480c:	20 83       	st	Z, r18
    480e:	01 96       	adiw	r24, 0x01	; 1
    4810:	bf 91       	pop	r27
    4812:	af 91       	pop	r26
    4814:	08 95       	ret

00004816 <eeprom_read_byte>:
    4816:	03 d0       	rcall	.+6      	; 0x481e <eeprom_mapen>
    4818:	80 81       	ld	r24, Z
    481a:	99 27       	eor	r25, r25
    481c:	08 95       	ret

0000481e <eeprom_mapen>:
    481e:	fc 01       	movw	r30, r24
    4820:	e0 50       	subi	r30, 0x00	; 0
    4822:	fc 4e       	sbci	r31, 0xEC	; 236
    4824:	08 95       	ret

00004826 <memcpy>:
    4826:	fb 01       	movw	r30, r22
    4828:	dc 01       	movw	r26, r24
    482a:	02 c0       	rjmp	.+4      	; 0x4830 <memcpy+0xa>
    482c:	01 90       	ld	r0, Z+
    482e:	0d 92       	st	X+, r0
    4830:	41 50       	subi	r20, 0x01	; 1
    4832:	50 40       	sbci	r21, 0x00	; 0
    4834:	d8 f7       	brcc	.-10     	; 0x482c <memcpy+0x6>
    4836:	08 95       	ret

00004838 <_exit>:
    4838:	f8 94       	cli

0000483a <__stop_program>:
    483a:	ff cf       	rjmp	.-2      	; 0x483a <__stop_program>
