
FakeSensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d31  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000019ad  00000000  00000000  00001f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000362  00000000  00000000  000038ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00003c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000dbb  00000000  00000000  00003ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00004a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00004aa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  68:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  6c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  70:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  74:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62
  84:	0e 94 67 00 	call	0xce	; 0xce <main>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initialize>:
}

void initialize(void)
{
	
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;	// On-board pushbutton is on PC4
  90:	88 e0       	ldi	r24, 0x08	; 8
  92:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <__RODATA_PM_OFFSET__+0x7f8454>

	PORTB.OUTSET = PIN7_bm;				// LED is on PB7
  96:	e0 e2       	ldi	r30, 0x20	; 32
  98:	f4 e0       	ldi	r31, 0x04	; 4
  9a:	80 e8       	ldi	r24, 0x80	; 128
  9c:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN7_bm;				// Start with it HIGH
  9e:	81 83       	std	Z+1, r24	; 0x01

	PORTA.OUTCLR = PIN2_bm;				// Start with it LOW
  a0:	e0 e0       	ldi	r30, 0x00	; 0
  a2:	f4 e0       	ldi	r31, 0x04	; 4
  a4:	84 e0       	ldi	r24, 0x04	; 4
  a6:	86 83       	std	Z+6, r24	; 0x06
	PORTA.DIRSET = PIN2_bm;				// Shutter open sensor is on PA7
  a8:	81 83       	std	Z+1, r24	; 0x01

	PORTA.OUTCLR = PIN1_bm;				// Start with it LOW
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	86 83       	std	Z+6, r24	; 0x06
	PORTA.DIRSET = PIN1_bm;				// Shutter closed sensor is on PA7
  ae:	81 83       	std	Z+1, r24	; 0x01
  b0:	08 95       	ret

000000b2 <open>:
}

void open(void)
{

	PORTA.OUTCLR = PIN2_bm;
  b2:	e0 e0       	ldi	r30, 0x00	; 0
  b4:	f4 e0       	ldi	r31, 0x04	; 4
  b6:	84 e0       	ldi	r24, 0x04	; 4
  b8:	86 83       	std	Z+6, r24	; 0x06
	PORTA.OUTSET = PIN1_bm;
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	85 83       	std	Z+5, r24	; 0x05
  be:	08 95       	ret

000000c0 <close>:
}

void close(void)
{

	PORTA.OUTCLR = PIN1_bm;
  c0:	e0 e0       	ldi	r30, 0x00	; 0
  c2:	f4 e0       	ldi	r31, 0x04	; 4
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	86 83       	std	Z+6, r24	; 0x06
	PORTA.OUTSET = PIN2_bm;
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	85 83       	std	Z+5, r24	; 0x05
  cc:	08 95       	ret

000000ce <main>:
void open(void);

int main(void)
{

	initialize();
  ce:	0e 94 48 00 	call	0x90	; 0x90 <initialize>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2a e2       	ldi	r18, 0x2A	; 42
  d4:	8c e2       	ldi	r24, 0x2C	; 44
  d6:	9a e0       	ldi	r25, 0x0A	; 10
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0xa>
  e0:	00 00       	nop
	_delay_ms(1000);

	for (;;) {
		open();
  e2:	0e 94 59 00 	call	0xb2	; 0xb2 <open>
  e6:	2a e0       	ldi	r18, 0x0A	; 10
  e8:	8b e8       	ldi	r24, 0x8B	; 139
  ea:	92 e0       	ldi	r25, 0x02	; 2
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x1e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x28>
		_delay_ms(250);
		close();
  f6:	0e 94 60 00 	call	0xc0	; 0xc0 <close>
  fa:	2a e0       	ldi	r18, 0x0A	; 10
  fc:	8b e8       	ldi	r24, 0x8B	; 139
  fe:	92 e0       	ldi	r25, 0x02	; 2
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <__EEPROM_REGION_LENGTH__>
 108:	00 c0       	rjmp	.+0      	; 0x10a <__EEPROM_REGION_LENGTH__+0xa>
 10a:	eb cf       	rjmp	.-42     	; 0xe2 <main+0x14>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
