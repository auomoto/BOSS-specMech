
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00007f51  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007278  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c45  0000b278  00007278  0000730c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000a55  00802800  00802800  00007f51  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00007f51  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007fb0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000006c0  00000000  00000000  00007ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ccde  00000000  00000000  000086b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000480a  00000000  00000000  0001538e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005464  00000000  00000000  00019b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000014f4  00000000  00000000  0001effc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002825  00000000  00000000  000204f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000060dc  00000000  00000000  00022d15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000450  00000000  00000000  00028df1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 01 	jmp	0x268	; 0x268 <__ctors_end>
       4:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
       8:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
       c:	0c 94 94 2c 	jmp	0x5928	; 0x5928 <__vector_3>
      10:	0c 94 b6 2c 	jmp	0x596c	; 0x596c <__vector_4>
      14:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      18:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      1c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      20:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      24:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      28:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      2c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      30:	0c 94 f4 2c 	jmp	0x59e8	; 0x59e8 <__vector_12>
      34:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      38:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      3c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      40:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      44:	0c 94 45 2f 	jmp	0x5e8a	; 0x5e8a <__vector_17>
      48:	0c 94 93 2f 	jmp	0x5f26	; 0x5f26 <__vector_18>
      4c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      50:	0c 94 df 10 	jmp	0x21be	; 0x21be <__vector_20>
      54:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      58:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      5c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      60:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      64:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      68:	0c 94 ed 2e 	jmp	0x5dda	; 0x5dda <__vector_26>
      6c:	0c 94 0d 2f 	jmp	0x5e1a	; 0x5e1a <__vector_27>
      70:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      74:	0c 94 3d 30 	jmp	0x607a	; 0x607a <__vector_29>
      78:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      7c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      80:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      84:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      88:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      8c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      90:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      94:	0c 94 cf 2f 	jmp	0x5f9e	; 0x5f9e <__vector_37>
      98:	0c 94 fb 2f 	jmp	0x5ff6	; 0x5ff6 <__vector_38>
      9c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      a0:	fc 04       	cpc	r15, r12
      a2:	27 05       	cpc	r18, r7
      a4:	27 05       	cpc	r18, r7
      a6:	27 05       	cpc	r18, r7
      a8:	27 05       	cpc	r18, r7
      aa:	27 05       	cpc	r18, r7
      ac:	27 05       	cpc	r18, r7
      ae:	27 05       	cpc	r18, r7
      b0:	27 05       	cpc	r18, r7
      b2:	ff 04       	cpc	r15, r15
      b4:	27 05       	cpc	r18, r7
      b6:	27 05       	cpc	r18, r7
      b8:	27 05       	cpc	r18, r7
      ba:	27 05       	cpc	r18, r7
      bc:	27 05       	cpc	r18, r7
      be:	27 05       	cpc	r18, r7
      c0:	27 05       	cpc	r18, r7
      c2:	24 05       	cpc	r18, r4
      c4:	27 05       	cpc	r18, r7
      c6:	27 05       	cpc	r18, r7
      c8:	27 05       	cpc	r18, r7
      ca:	27 05       	cpc	r18, r7
      cc:	27 05       	cpc	r18, r7
      ce:	27 05       	cpc	r18, r7
      d0:	27 05       	cpc	r18, r7
      d2:	27 05       	cpc	r18, r7
      d4:	e7 04       	cpc	r14, r7
      d6:	27 05       	cpc	r18, r7
      d8:	27 05       	cpc	r18, r7
      da:	27 05       	cpc	r18, r7
      dc:	27 05       	cpc	r18, r7
      de:	27 05       	cpc	r18, r7
      e0:	27 05       	cpc	r18, r7
      e2:	27 05       	cpc	r18, r7
      e4:	27 05       	cpc	r18, r7
      e6:	27 05       	cpc	r18, r7
      e8:	ed 04       	cpc	r14, r13
      ea:	27 05       	cpc	r18, r7
      ec:	ea 04       	cpc	r14, r10
      ee:	27 05       	cpc	r18, r7
      f0:	27 05       	cpc	r18, r7
      f2:	f0 04       	cpc	r15, r0
      f4:	f3 04       	cpc	r15, r3
      f6:	f6 04       	cpc	r15, r6
      f8:	f9 04       	cpc	r15, r9
      fa:	f7 11       	cpse	r31, r7
      fc:	f7 11       	cpse	r31, r7
      fe:	f7 11       	cpse	r31, r7
     100:	57 19       	sub	r21, r7
     102:	57 19       	sub	r21, r7
     104:	57 19       	sub	r21, r7
     106:	57 19       	sub	r21, r7
     108:	57 19       	sub	r21, r7
     10a:	57 19       	sub	r21, r7
     10c:	57 19       	sub	r21, r7
     10e:	57 19       	sub	r21, r7
     110:	57 19       	sub	r21, r7
     112:	57 19       	sub	r21, r7
     114:	57 19       	sub	r21, r7
     116:	57 19       	sub	r21, r7
     118:	57 19       	sub	r21, r7
     11a:	57 19       	sub	r21, r7
     11c:	57 19       	sub	r21, r7
     11e:	57 19       	sub	r21, r7
     120:	57 19       	sub	r21, r7
     122:	57 19       	sub	r21, r7
     124:	19 19       	sub	r17, r9
     126:	57 19       	sub	r21, r7
     128:	57 19       	sub	r21, r7
     12a:	57 19       	sub	r21, r7
     12c:	57 19       	sub	r21, r7
     12e:	57 19       	sub	r21, r7
     130:	57 19       	sub	r21, r7
     132:	57 19       	sub	r21, r7
     134:	57 19       	sub	r21, r7
     136:	57 19       	sub	r21, r7
     138:	57 19       	sub	r21, r7
     13a:	ee 13       	cpse	r30, r30
     13c:	ee 13       	cpse	r30, r30
     13e:	ee 13       	cpse	r30, r30
     140:	a3 15       	cp	r26, r3
     142:	aa 15       	cp	r26, r10
     144:	57 19       	sub	r21, r7
     146:	57 19       	sub	r21, r7
     148:	57 19       	sub	r21, r7
     14a:	57 19       	sub	r21, r7
     14c:	57 19       	sub	r21, r7
     14e:	57 19       	sub	r21, r7
     150:	57 19       	sub	r21, r7
     152:	57 19       	sub	r21, r7
     154:	f3 16       	cp	r15, r19
     156:	19 17       	cp	r17, r25
     158:	ef 17       	cp	r30, r31
     15a:	57 19       	sub	r21, r7
     15c:	57 19       	sub	r21, r7
     15e:	57 19       	sub	r21, r7
     160:	78 18       	sub	r7, r8
     162:	57 19       	sub	r21, r7
     164:	c0 18       	sub	r12, r0

00000166 <__trampolines_end>:
     166:	6e 61       	ori	r22, 0x1E	; 30
     168:	6e 00       	.word	0x006e	; ????

0000016a <__c.2332>:
     16a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     17a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     18a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     19a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1aa:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ba:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1ca:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1da:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1ea:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1fa:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     20a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     21a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     22a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     23a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     24a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     25a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000268 <__ctors_end>:
     268:	11 24       	eor	r1, r1
     26a:	1f be       	out	0x3f, r1	; 63
     26c:	cf ef       	ldi	r28, 0xFF	; 255
     26e:	cd bf       	out	0x3d, r28	; 61
     270:	df e3       	ldi	r29, 0x3F	; 63
     272:	de bf       	out	0x3e, r29	; 62

00000274 <__do_clear_bss>:
     274:	22 e3       	ldi	r18, 0x32	; 50
     276:	a0 e0       	ldi	r26, 0x00	; 0
     278:	b8 e2       	ldi	r27, 0x28	; 40
     27a:	01 c0       	rjmp	.+2      	; 0x27e <.do_clear_bss_start>

0000027c <.do_clear_bss_loop>:
     27c:	1d 92       	st	X+, r1

0000027e <.do_clear_bss_start>:
     27e:	a5 35       	cpi	r26, 0x55	; 85
     280:	b2 07       	cpc	r27, r18
     282:	e1 f7       	brne	.-8      	; 0x27c <.do_clear_bss_loop>
     284:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <main>
     288:	0c 94 3a 39 	jmp	0x7274	; 0x7274 <_exit>

0000028c <__bad_interrupt>:
     28c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000290 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
uint8_t read_AD590(uint8_t sensor, float *temperature)
{
     290:	8f 92       	push	r8
     292:	9f 92       	push	r9
     294:	af 92       	push	r10
     296:	bf 92       	push	r11
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <read_AD590+0x16>
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <read_AD590+0x18>
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	7b 01       	movw	r14, r22

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     2ae:	81 30       	cpi	r24, 0x01	; 1
     2b0:	99 f0       	breq	.+38     	; 0x2d8 <read_AD590+0x48>
     2b2:	18 f0       	brcs	.+6      	; 0x2ba <read_AD590+0x2a>
     2b4:	82 30       	cpi	r24, 0x02	; 2
     2b6:	31 f0       	breq	.+12     	; 0x2c4 <read_AD590+0x34>
     2b8:	0a c0       	rjmp	.+20     	; 0x2ce <read_AD590+0x3e>
		case 0:
			pins = 0x04;	// t0 - Blue Camera
			offset = 0.0;
     2ba:	81 2c       	mov	r8, r1
     2bc:	91 2c       	mov	r9, r1
     2be:	54 01       	movw	r10, r8
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x04;	// t0 - Blue Camera
     2c0:	14 e0       	ldi	r17, 0x04	; 4
     2c2:	14 c0       	rjmp	.+40     	; 0x2ec <read_AD590+0x5c>
			offset = 4.2;	// Using old board, to be replaced
			break;

		case 2:
			pins = 0x40;	// t2 - Collimator
			offset = 0.0;
     2c4:	81 2c       	mov	r8, r1
     2c6:	91 2c       	mov	r9, r1
     2c8:	54 01       	movw	r10, r8
			pins = 0x10;	// t1 - Red Camera
			offset = 4.2;	// Using old board, to be replaced
			break;

		case 2:
			pins = 0x40;	// t2 - Collimator
     2ca:	10 e4       	ldi	r17, 0x40	; 64
			offset = 0.0;
			break;
     2cc:	0f c0       	rjmp	.+30     	; 0x2ec <read_AD590+0x5c>
{

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
     2ce:	81 2c       	mov	r8, r1
     2d0:	91 2c       	mov	r9, r1
     2d2:	54 01       	movw	r10, r8
			pins = 0x40;	// t2 - Collimator
			offset = 0.0;
			break;

		default:
			pins = 0x00;
     2d4:	10 e0       	ldi	r17, 0x00	; 0
			break;
     2d6:	0a c0       	rjmp	.+20     	; 0x2ec <read_AD590+0x5c>
			offset = 0.0;
			break;

		case 1:
			pins = 0x10;	// t1 - Red Camera
			offset = 4.2;	// Using old board, to be replaced
     2d8:	0f 2e       	mov	r0, r31
     2da:	f6 e6       	ldi	r31, 0x66	; 102
     2dc:	8f 2e       	mov	r8, r31
     2de:	98 2c       	mov	r9, r8
     2e0:	f6 e8       	ldi	r31, 0x86	; 134
     2e2:	af 2e       	mov	r10, r31
     2e4:	f0 e4       	ldi	r31, 0x40	; 64
     2e6:	bf 2e       	mov	r11, r31
     2e8:	f0 2d       	mov	r31, r0
			pins = 0x04;	// t0 - Blue Camera
			offset = 0.0;
			break;

		case 1:
			pins = 0x10;	// t1 - Red Camera
     2ea:	10 e1       	ldi	r17, 0x10	; 16
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2ec:	41 2f       	mov	r20, r17
     2ee:	40 95       	com	r20
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	87 e2       	ldi	r24, 0x27	; 39
     2f4:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pin
     2f8:	41 2f       	mov	r20, r17
     2fa:	6a e0       	ldi	r22, 0x0A	; 10
     2fc:	87 e2       	ldi	r24, 0x27	; 39
     2fe:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     302:	8f e4       	ldi	r24, 0x4F	; 79
     304:	93 ec       	ldi	r25, 0xC3	; 195
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <read_AD590+0x76>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <read_AD590+0x7c>
     30c:	00 00       	nop
	_delay_ms(20);								// Found by trial and error

	// Use 0.512 volts range and 128 samples per second
	if (read_ADS1115(ADC_TE, PGA0512, AIN3, DR128, &voltage) == ERROR) {
     30e:	8e 01       	movw	r16, r28
     310:	0f 5f       	subi	r16, 0xFF	; 255
     312:	1f 4f       	sbci	r17, 0xFF	; 255
     314:	20 e8       	ldi	r18, 0x80	; 128
     316:	40 e7       	ldi	r20, 0x70	; 112
     318:	68 e0       	ldi	r22, 0x08	; 8
     31a:	88 e4       	ldi	r24, 0x48	; 72
     31c:	0e 94 cb 01 	call	0x396	; 0x396 <read_ADS1115>
     320:	83 36       	cpi	r24, 0x63	; 99
     322:	51 f4       	brne	.+20     	; 0x338 <read_AD590+0xa8>
		*temperature = BADFLOAT;
     324:	40 e0       	ldi	r20, 0x00	; 0
     326:	50 e8       	ldi	r21, 0x80	; 128
     328:	66 e2       	ldi	r22, 0x26	; 38
     32a:	74 ec       	ldi	r23, 0xC4	; 196
     32c:	f7 01       	movw	r30, r14
     32e:	40 83       	st	Z, r20
     330:	51 83       	std	Z+1, r21	; 0x01
     332:	62 83       	std	Z+2, r22	; 0x02
     334:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
     336:	21 c0       	rjmp	.+66     	; 0x37a <read_AD590+0xea>
	}

	// Turn off all AD590 sensors
	write_MCP23008(AD590DRIVER, OLAT, 0x00);	// Set all pins low
     338:	40 e0       	ldi	r20, 0x00	; 0
     33a:	6a e0       	ldi	r22, 0x0A	; 10
     33c:	87 e2       	ldi	r24, 0x27	; 39
     33e:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
	*temperature = (AD590RESISTOR * voltage) - 273.15 + offset;
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	4a e7       	ldi	r20, 0x7A	; 122
     348:	54 e4       	ldi	r21, 0x44	; 68
     34a:	69 81       	ldd	r22, Y+1	; 0x01
     34c:	7a 81       	ldd	r23, Y+2	; 0x02
     34e:	8b 81       	ldd	r24, Y+3	; 0x03
     350:	9c 81       	ldd	r25, Y+4	; 0x04
     352:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
     356:	23 e3       	ldi	r18, 0x33	; 51
     358:	33 e9       	ldi	r19, 0x93	; 147
     35a:	48 e8       	ldi	r20, 0x88	; 136
     35c:	53 e4       	ldi	r21, 0x43	; 67
     35e:	0e 94 68 30 	call	0x60d0	; 0x60d0 <__subsf3>
     362:	9b 01       	movw	r18, r22
     364:	ac 01       	movw	r20, r24
     366:	c5 01       	movw	r24, r10
     368:	b4 01       	movw	r22, r8
     36a:	0e 94 69 30 	call	0x60d2	; 0x60d2 <__addsf3>
     36e:	f7 01       	movw	r30, r14
     370:	60 83       	st	Z, r22
     372:	71 83       	std	Z+1, r23	; 0x01
     374:	82 83       	std	Z+2, r24	; 0x02
     376:	93 83       	std	Z+3, r25	; 0x03

	return(NOERROR);
     378:	80 e0       	ldi	r24, 0x00	; 0

}
     37a:	24 96       	adiw	r28, 0x04	; 4
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	de bf       	out	0x3e, r29	; 62
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	bf 90       	pop	r11
     38e:	af 90       	pop	r10
     390:	9f 90       	pop	r9
     392:	8f 90       	pop	r8
     394:	08 95       	ret

00000396 <read_ADS1115>:
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
uint8_t read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins,
	uint8_t datarate, float *voltage)
{
     396:	8f 92       	push	r8
     398:	9f 92       	push	r9
     39a:	af 92       	push	r10
     39c:	bf 92       	push	r11
     39e:	cf 92       	push	r12
     3a0:	df 92       	push	r13
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	f8 2e       	mov	r15, r24
     3b0:	e6 2e       	mov	r14, r22
     3b2:	68 01       	movw	r12, r16
	float scale;
	uint8_t confighi, configlo, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     3b4:	46 2b       	or	r20, r22
     3b6:	c4 2f       	mov	r28, r20
     3b8:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     3ba:	d2 2f       	mov	r29, r18
     3bc:	d3 60       	ori	r29, 0x03	; 3

	*voltage = BADFLOAT;
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e8       	ldi	r25, 0x80	; 128
     3c2:	a6 e2       	ldi	r26, 0x26	; 38
     3c4:	b4 ec       	ldi	r27, 0xC4	; 196
     3c6:	f8 01       	movw	r30, r16
     3c8:	80 83       	st	Z, r24
     3ca:	91 83       	std	Z+1, r25	; 0x01
     3cc:	a2 83       	std	Z+2, r26	; 0x02
     3ce:	b3 83       	std	Z+3, r27	; 0x03
	if (start_TWI(addr, TWIWRITE == ERROR)) {		// TWI start condition
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	8f 2d       	mov	r24, r15
     3d4:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
     3d8:	08 2f       	mov	r16, r24
     3da:	88 23       	and	r24, r24
     3dc:	21 f0       	breq	.+8      	; 0x3e6 <read_ADS1115+0x50>
		stop_TWI();
     3de:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(ERROR);
     3e2:	13 e6       	ldi	r17, 0x63	; 99
     3e4:	b5 c0       	rjmp	.+362    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
	}
	if ((write_TWI(ADS1115CONFIG) == ERROR)) {		// Write the CONFIG register
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
     3ec:	18 2f       	mov	r17, r24
     3ee:	83 36       	cpi	r24, 0x63	; 99
     3f0:	19 f4       	brne	.+6      	; 0x3f8 <read_ADS1115+0x62>
		stop_TWI();
     3f2:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(ERROR);
     3f6:	ac c0       	rjmp	.+344    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
	}
	if ((write_TWI(confighi) == ERROR)) {			// Write high byte
     3f8:	8c 2f       	mov	r24, r28
     3fa:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
     3fe:	18 2f       	mov	r17, r24
     400:	83 36       	cpi	r24, 0x63	; 99
     402:	19 f4       	brne	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		stop_TWI();
     404:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(ERROR);
     408:	a3 c0       	rjmp	.+326    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
	}
	if ((write_TWI(configlo) == ERROR)) {			// Write low byte
     40a:	8d 2f       	mov	r24, r29
     40c:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
     410:	18 2f       	mov	r17, r24
     412:	83 36       	cpi	r24, 0x63	; 99
     414:	19 f4       	brne	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		stop_TWI();
     416:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(ERROR);
     41a:	9a c0       	rjmp	.+308    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
	}
	stop_TWI();
     41c:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     420:	f3 e5       	ldi	r31, 0x53	; 83
     422:	fa 95       	dec	r31
     424:	f1 f7       	brne	.-4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     426:	00 00       	nop

	_delay_us(25);									// Power-up time

	converting = YES;
     428:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     42a:	09 c0       	rjmp	.+18     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		start_TWI(addr, TWIREAD);
     42c:	61 e0       	ldi	r22, 0x01	; 1
     42e:	8f 2d       	mov	r24, r15
     430:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
		flag = readlast_TWI();
     434:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <readlast_TWI>
		if (flag & 0b10000000) {
     438:	88 23       	and	r24, r24
     43a:	0c f4       	brge	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
			converting = NO;
     43c:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     43e:	c1 11       	cpse	r28, r1
     440:	f5 cf       	rjmp	.-22     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		flag = readlast_TWI();
		if (flag & 0b10000000) {
			converting = NO;
		}
	}
	stop_TWI();
     442:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>

	start_TWI(addr, TWIWRITE);
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	8f 2d       	mov	r24, r15
     44a:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     454:	61 e0       	ldi	r22, 0x01	; 1
     456:	8f 2d       	mov	r24, r15
     458:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
	highbyte = read_TWI();
     45c:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <read_TWI>
     460:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     462:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <readlast_TWI>
     466:	d8 2f       	mov	r29, r24
	stop_TWI();
     468:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>

	value = highbyte;
     46c:	6c 2f       	mov	r22, r28
     46e:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     470:	76 2f       	mov	r23, r22
     472:	66 27       	eor	r22, r22
	value |= lowbyte;
     474:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     476:	84 e0       	ldi	r24, 0x04	; 4
     478:	e8 16       	cp	r14, r24
     47a:	49 f1       	breq	.+82     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     47c:	8e 15       	cp	r24, r14
     47e:	30 f0       	brcs	.+12     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     480:	ee 20       	and	r14, r14
     482:	d9 f1       	breq	.+118    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     484:	e2 e0       	ldi	r30, 0x02	; 2
     486:	ee 16       	cp	r14, r30
     488:	69 f1       	breq	.+90     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     48a:	42 c0       	rjmp	.+132    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     48c:	f8 e0       	ldi	r31, 0x08	; 8
     48e:	ef 16       	cp	r14, r31
     490:	09 f4       	brne	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     492:	42 c0       	rjmp	.+132    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     494:	8a e0       	ldi	r24, 0x0A	; 10
     496:	e8 16       	cp	r14, r24
     498:	21 f0       	breq	.+8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     49a:	e6 e0       	ldi	r30, 0x06	; 6
     49c:	ee 12       	cpse	r14, r30
     49e:	38 c0       	rjmp	.+112    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     4a0:	0b c0       	rjmp	.+22     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
		case PGA0256:
			scale = SCA0256;
     4a2:	0f 2e       	mov	r0, r31
     4a4:	f4 e7       	ldi	r31, 0x74	; 116
     4a6:	8f 2e       	mov	r8, r31
     4a8:	f3 e1       	ldi	r31, 0x13	; 19
     4aa:	9f 2e       	mov	r9, r31
     4ac:	f3 e0       	ldi	r31, 0x03	; 3
     4ae:	af 2e       	mov	r10, r31
     4b0:	f7 e3       	ldi	r31, 0x37	; 55
     4b2:	bf 2e       	mov	r11, r31
     4b4:	f0 2d       	mov	r31, r0
     4b6:	3a c0       	rjmp	.+116    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     4b8:	0f 2e       	mov	r0, r31
     4ba:	f4 e7       	ldi	r31, 0x74	; 116
     4bc:	8f 2e       	mov	r8, r31
     4be:	f3 e1       	ldi	r31, 0x13	; 19
     4c0:	9f 2e       	mov	r9, r31
     4c2:	f3 e0       	ldi	r31, 0x03	; 3
     4c4:	af 2e       	mov	r10, r31
     4c6:	f8 e3       	ldi	r31, 0x38	; 56
     4c8:	bf 2e       	mov	r11, r31
     4ca:	f0 2d       	mov	r31, r0
			break;
     4cc:	2f c0       	rjmp	.+94     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		case PGA2048:
			scale = SCA2048;
     4ce:	0f 2e       	mov	r0, r31
     4d0:	f2 e1       	ldi	r31, 0x12	; 18
     4d2:	8f 2e       	mov	r8, r31
     4d4:	f3 e1       	ldi	r31, 0x13	; 19
     4d6:	9f 2e       	mov	r9, r31
     4d8:	f3 e8       	ldi	r31, 0x83	; 131
     4da:	af 2e       	mov	r10, r31
     4dc:	f8 e3       	ldi	r31, 0x38	; 56
     4de:	bf 2e       	mov	r11, r31
     4e0:	f0 2d       	mov	r31, r0
			break;
     4e2:	24 c0       	rjmp	.+72     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		case PGA4096:
			scale = SCA4096;
     4e4:	0f 2e       	mov	r0, r31
     4e6:	f4 e7       	ldi	r31, 0x74	; 116
     4e8:	8f 2e       	mov	r8, r31
     4ea:	f3 e1       	ldi	r31, 0x13	; 19
     4ec:	9f 2e       	mov	r9, r31
     4ee:	f3 e0       	ldi	r31, 0x03	; 3
     4f0:	af 2e       	mov	r10, r31
     4f2:	f9 e3       	ldi	r31, 0x39	; 57
     4f4:	bf 2e       	mov	r11, r31
     4f6:	f0 2d       	mov	r31, r0
			break;
     4f8:	19 c0       	rjmp	.+50     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		case PGA6144:
			scale = SCA6144;
     4fa:	0f 2e       	mov	r0, r31
     4fc:	fe e2       	ldi	r31, 0x2E	; 46
     4fe:	8f 2e       	mov	r8, r31
     500:	fd e9       	ldi	r31, 0x9D	; 157
     502:	9f 2e       	mov	r9, r31
     504:	f4 e4       	ldi	r31, 0x44	; 68
     506:	af 2e       	mov	r10, r31
     508:	f9 e3       	ldi	r31, 0x39	; 57
     50a:	bf 2e       	mov	r11, r31
     50c:	f0 2d       	mov	r31, r0
			break;
     50e:	0e c0       	rjmp	.+28     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		default:
			scale = 0.0;
     510:	81 2c       	mov	r8, r1
     512:	91 2c       	mov	r9, r1
     514:	54 01       	movw	r10, r8
			break;
     516:	0a c0       	rjmp	.+20     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     518:	0f 2e       	mov	r0, r31
     51a:	f1 e7       	ldi	r31, 0x71	; 113
     51c:	8f 2e       	mov	r8, r31
     51e:	f3 e1       	ldi	r31, 0x13	; 19
     520:	9f 2e       	mov	r9, r31
     522:	f3 e8       	ldi	r31, 0x83	; 131
     524:	af 2e       	mov	r10, r31
     526:	f7 e3       	ldi	r31, 0x37	; 55
     528:	bf 2e       	mov	r11, r31
     52a:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	*voltage = scale * (float) value;
     52c:	07 2e       	mov	r0, r23
     52e:	00 0c       	add	r0, r0
     530:	88 0b       	sbc	r24, r24
     532:	99 0b       	sbc	r25, r25
     534:	0e 94 84 31 	call	0x6308	; 0x6308 <__floatsisf>
     538:	9b 01       	movw	r18, r22
     53a:	ac 01       	movw	r20, r24
     53c:	c5 01       	movw	r24, r10
     53e:	b4 01       	movw	r22, r8
     540:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
     544:	f6 01       	movw	r30, r12
     546:	60 83       	st	Z, r22
     548:	71 83       	std	Z+1, r23	; 0x01
     54a:	82 83       	std	Z+2, r24	; 0x02
     54c:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     54e:	10 2f       	mov	r17, r16

}
     550:	81 2f       	mov	r24, r17
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	bf 90       	pop	r11
     564:	af 90       	pop	r10
     566:	9f 90       	pop	r9
     568:	8f 90       	pop	r8
     56a:	08 95       	ret

0000056c <beeper>:
#include "globals.h"
#include "beeper.h"

void beeper(char *message)
{
     56c:	fc 01       	movw	r30, r24

	uint8_t i, len;

	len = strlen(message);
     56e:	dc 01       	movw	r26, r24
     570:	0d 90       	ld	r0, X+
     572:	00 20       	and	r0, r0
     574:	e9 f7       	brne	.-6      	; 0x570 <beeper+0x4>
     576:	11 97       	sbiw	r26, 0x01	; 1
     578:	a8 1b       	sub	r26, r24
	for (i = 0; i < len; i++) {
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	3c c0       	rjmp	.+120    	; 0x5f6 <beeper+0x8a>
		switch (*message++) {
     57e:	9f 01       	movw	r18, r30
     580:	2f 5f       	subi	r18, 0xFF	; 255
     582:	3f 4f       	sbci	r19, 0xFF	; 255
     584:	80 81       	ld	r24, Z
     586:	8d 32       	cpi	r24, 0x2D	; 45
     588:	91 f0       	breq	.+36     	; 0x5ae <beeper+0x42>
     58a:	8e 32       	cpi	r24, 0x2E	; 46
     58c:	19 f0       	breq	.+6      	; 0x594 <beeper+0x28>
     58e:	80 32       	cpi	r24, 0x20	; 32
     590:	21 f5       	brne	.+72     	; 0x5da <beeper+0x6e>
     592:	1a c0       	rjmp	.+52     	; 0x5c8 <beeper+0x5c>

			case '.':
				on_BEEPER;
     594:	84 e0       	ldi	r24, 0x04	; 4
     596:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x7f4425>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     59a:	4f ee       	ldi	r20, 0xEF	; 239
     59c:	59 e4       	ldi	r21, 0x49	; 73
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	41 50       	subi	r20, 0x01	; 1
     5a2:	50 40       	sbci	r21, 0x00	; 0
     5a4:	80 40       	sbci	r24, 0x00	; 0
     5a6:	e1 f7       	brne	.-8      	; 0x5a0 <beeper+0x34>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <beeper+0x3e>
     5aa:	00 00       	nop
     5ac:	16 c0       	rjmp	.+44     	; 0x5da <beeper+0x6e>
//				PORTB.OUTSET = PIN2_bm;
				_delay_ms(75);
				break;

			case '-':
				on_BEEPER;
     5ae:	84 e0       	ldi	r24, 0x04	; 4
     5b0:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x7f4425>
     5b4:	4f ec       	ldi	r20, 0xCF	; 207
     5b6:	5d ed       	ldi	r21, 0xDD	; 221
     5b8:	86 e0       	ldi	r24, 0x06	; 6
     5ba:	41 50       	subi	r20, 0x01	; 1
     5bc:	50 40       	sbci	r21, 0x00	; 0
     5be:	80 40       	sbci	r24, 0x00	; 0
     5c0:	e1 f7       	brne	.-8      	; 0x5ba <beeper+0x4e>
     5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <beeper+0x58>
     5c4:	00 00       	nop
     5c6:	09 c0       	rjmp	.+18     	; 0x5da <beeper+0x6e>
     5c8:	4f ec       	ldi	r20, 0xCF	; 207
     5ca:	5d ed       	ldi	r21, 0xDD	; 221
     5cc:	86 e0       	ldi	r24, 0x06	; 6
     5ce:	41 50       	subi	r20, 0x01	; 1
     5d0:	50 40       	sbci	r21, 0x00	; 0
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <beeper+0x62>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <beeper+0x6c>
     5d8:	00 00       	nop

			default:
				break;
		}

		off_BEEPER;
     5da:	84 e0       	ldi	r24, 0x04	; 4
     5dc:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x7f4426>
     5e0:	4f ee       	ldi	r20, 0xEF	; 239
     5e2:	59 e4       	ldi	r21, 0x49	; 73
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	41 50       	subi	r20, 0x01	; 1
     5e8:	50 40       	sbci	r21, 0x00	; 0
     5ea:	80 40       	sbci	r24, 0x00	; 0
     5ec:	e1 f7       	brne	.-8      	; 0x5e6 <beeper+0x7a>
     5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <beeper+0x84>
     5f0:	00 00       	nop
{

	uint8_t i, len;

	len = strlen(message);
	for (i = 0; i < len; i++) {
     5f2:	9f 5f       	subi	r25, 0xFF	; 255
		switch (*message++) {
     5f4:	f9 01       	movw	r30, r18
{

	uint8_t i, len;

	len = strlen(message);
	for (i = 0; i < len; i++) {
     5f6:	9a 17       	cp	r25, r26
     5f8:	10 f2       	brcs	.-124    	; 0x57e <beeper+0x12>
		off_BEEPER;
//		PORTB.OUTCLR = PIN2_bm;
		_delay_ms(75);

	}
     5fa:	08 95       	ret

000005fc <get_cmdline>:
	if ((d >= '0') && (d <= '9')) {
		return(ERROR);
	}
	return(NOERROR);

}
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	9c 01       	movw	r18, r24
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	1c c0       	rjmp	.+56     	; 0x63e <get_cmdline+0x42>
     606:	c6 e4       	ldi	r28, 0x46	; 70
     608:	de e2       	ldi	r29, 0x2E	; 46
     60a:	e8 81       	ld	r30, Y
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	e9 5b       	subi	r30, 0xB9	; 185
     610:	f2 4d       	sbci	r31, 0xD2	; 210
     612:	80 81       	ld	r24, Z
     614:	f9 01       	movw	r30, r18
     616:	e4 0f       	add	r30, r20
     618:	f1 1d       	adc	r31, r1
     61a:	80 83       	st	Z, r24
     61c:	a8 e4       	ldi	r26, 0x48	; 72
     61e:	be e2       	ldi	r27, 0x2E	; 46
     620:	8c 91       	ld	r24, X
     622:	81 50       	subi	r24, 0x01	; 1
     624:	8c 93       	st	X, r24
     626:	88 81       	ld	r24, Y
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	6e ef       	ldi	r22, 0xFE	; 254
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
     634:	88 83       	st	Y, r24
     636:	80 81       	ld	r24, Z
     638:	88 23       	and	r24, r24
     63a:	29 f0       	breq	.+10     	; 0x646 <get_cmdline+0x4a>
     63c:	4f 5f       	subi	r20, 0xFF	; 255
     63e:	80 91 48 2e 	lds	r24, 0x2E48	; 0x802e48 <recv0_buf+0x101>
     642:	81 11       	cpse	r24, r1
     644:	e0 cf       	rjmp	.-64     	; 0x606 <get_cmdline+0xa>
     646:	f9 01       	movw	r30, r18
     648:	e4 0f       	add	r30, r20
     64a:	f1 1d       	adc	r31, r1
     64c:	10 82       	st	Z, r1
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     654:	9f e9       	ldi	r25, 0x9F	; 159
     656:	98 0f       	add	r25, r24
     658:	9a 31       	cpi	r25, 0x1A	; 26
     65a:	28 f0       	brcs	.+10     	; 0x666 <isaletter+0x12>
     65c:	81 54       	subi	r24, 0x41	; 65
     65e:	8a 31       	cpi	r24, 0x1A	; 26
     660:	20 f4       	brcc	.+8      	; 0x66a <isaletter+0x16>
		return(ERROR);
     662:	83 e6       	ldi	r24, 0x63	; 99
     664:	08 95       	ret
     666:	83 e6       	ldi	r24, 0x63	; 99
     668:	08 95       	ret
	}
	return(NOERROR);
     66a:	80 e0       	ldi	r24, 0x00	; 0

}
     66c:	08 95       	ret

0000066e <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     67a:	e6 2e       	mov	r14, r22
     67c:	f1 2c       	mov	r15, r1
     67e:	84 e3       	ldi	r24, 0x34	; 52
     680:	8e 9d       	mul	r24, r14
     682:	f0 01       	movw	r30, r0
     684:	8f 9d       	mul	r24, r15
     686:	f0 0d       	add	r31, r0
     688:	11 24       	eor	r1, r1
     68a:	e1 5f       	subi	r30, 0xF1	; 241
     68c:	f7 4d       	sbci	r31, 0xD7	; 215
     68e:	8f e3       	ldi	r24, 0x3F	; 63
     690:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     692:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     694:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     696:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     698:	04 c0       	rjmp	.+8      	; 0x6a2 <parse_cmd+0x34>
		if (*ptr == '\0') {
     69a:	11 23       	and	r17, r17
     69c:	09 f4       	brne	.+2      	; 0x6a0 <parse_cmd+0x32>
     69e:	75 c0       	rjmp	.+234    	; 0x78a <parse_cmd+0x11c>
			return;
		}
		ptr++;
     6a0:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     6a2:	18 81       	ld	r17, Y
     6a4:	81 2f       	mov	r24, r17
     6a6:	0e 94 2a 03 	call	0x654	; 0x654 <isaletter>
     6aa:	88 23       	and	r24, r24
     6ac:	b1 f3       	breq	.-20     	; 0x69a <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     6ae:	21 96       	adiw	r28, 0x01	; 1
     6b0:	84 e3       	ldi	r24, 0x34	; 52
     6b2:	8e 9d       	mul	r24, r14
     6b4:	f0 01       	movw	r30, r0
     6b6:	8f 9d       	mul	r24, r15
     6b8:	f0 0d       	add	r31, r0
     6ba:	11 24       	eor	r1, r1
     6bc:	e1 5f       	subi	r30, 0xF1	; 241
     6be:	f7 4d       	sbci	r31, 0xD7	; 215
     6c0:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <parse_cmd+0x5e>
		if (*ptr == '\0') {
     6c4:	11 23       	and	r17, r17
     6c6:	09 f4       	brne	.+2      	; 0x6ca <parse_cmd+0x5c>
     6c8:	60 c0       	rjmp	.+192    	; 0x78a <parse_cmd+0x11c>
			return;
		}
		ptr++;
     6ca:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     6cc:	18 81       	ld	r17, Y
     6ce:	81 2f       	mov	r24, r17
     6d0:	0e 94 2a 03 	call	0x654	; 0x654 <isaletter>
     6d4:	88 23       	and	r24, r24
     6d6:	b1 f3       	breq	.-20     	; 0x6c4 <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     6d8:	21 96       	adiw	r28, 0x01	; 1
     6da:	84 e3       	ldi	r24, 0x34	; 52
     6dc:	8e 9d       	mul	r24, r14
     6de:	f0 01       	movw	r30, r0
     6e0:	8f 9d       	mul	r24, r15
     6e2:	f0 0d       	add	r31, r0
     6e4:	11 24       	eor	r1, r1
     6e6:	e1 5f       	subi	r30, 0xF1	; 241
     6e8:	f7 4d       	sbci	r31, 0xD7	; 215
     6ea:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	2a c0       	rjmp	.+84     	; 0x744 <parse_cmd+0xd6>
		if (*ptr == '\0') {
     6f0:	98 81       	ld	r25, Y
     6f2:	91 11       	cpse	r25, r1
     6f4:	0c c0       	rjmp	.+24     	; 0x70e <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     6f6:	94 e3       	ldi	r25, 0x34	; 52
     6f8:	9e 9d       	mul	r25, r14
     6fa:	f0 01       	movw	r30, r0
     6fc:	9f 9d       	mul	r25, r15
     6fe:	f0 0d       	add	r31, r0
     700:	11 24       	eor	r1, r1
     702:	e1 5f       	subi	r30, 0xF1	; 241
     704:	f7 4d       	sbci	r31, 0xD7	; 215
     706:	e8 0f       	add	r30, r24
     708:	f1 1d       	adc	r31, r1
     70a:	12 82       	std	Z+2, r1	; 0x02
			return;
     70c:	3e c0       	rjmp	.+124    	; 0x78a <parse_cmd+0x11c>
		}
		if (*ptr == ';') {			// Command ID separator
     70e:	9b 33       	cpi	r25, 0x3B	; 59
     710:	61 f4       	brne	.+24     	; 0x72a <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     712:	94 e3       	ldi	r25, 0x34	; 52
     714:	9e 9d       	mul	r25, r14
     716:	f0 01       	movw	r30, r0
     718:	9f 9d       	mul	r25, r15
     71a:	f0 0d       	add	r31, r0
     71c:	11 24       	eor	r1, r1
     71e:	e1 5f       	subi	r30, 0xF1	; 241
     720:	f7 4d       	sbci	r31, 0xD7	; 215
     722:	e8 0f       	add	r30, r24
     724:	f1 1d       	adc	r31, r1
     726:	12 82       	std	Z+2, r1	; 0x02
			break;
     728:	0f c0       	rjmp	.+30     	; 0x748 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     72a:	21 96       	adiw	r28, 0x01	; 1
     72c:	24 e3       	ldi	r18, 0x34	; 52
     72e:	2e 9d       	mul	r18, r14
     730:	f0 01       	movw	r30, r0
     732:	2f 9d       	mul	r18, r15
     734:	f0 0d       	add	r31, r0
     736:	11 24       	eor	r1, r1
     738:	e1 5f       	subi	r30, 0xF1	; 241
     73a:	f7 4d       	sbci	r31, 0xD7	; 215
     73c:	e8 0f       	add	r30, r24
     73e:	f1 1d       	adc	r31, r1
     740:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     742:	8f 5f       	subi	r24, 0xFF	; 255
     744:	89 32       	cpi	r24, 0x29	; 41
     746:	a0 f2       	brcs	.-88     	; 0x6f0 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
     748:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	1c c0       	rjmp	.+56     	; 0x786 <parse_cmd+0x118>
		if (*ptr == '\0') {
     74e:	98 81       	ld	r25, Y
     750:	91 11       	cpse	r25, r1
     752:	0c c0       	rjmp	.+24     	; 0x76c <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     754:	94 e3       	ldi	r25, 0x34	; 52
     756:	9e 9d       	mul	r25, r14
     758:	f0 01       	movw	r30, r0
     75a:	9f 9d       	mul	r25, r15
     75c:	f0 0d       	add	r31, r0
     75e:	11 24       	eor	r1, r1
     760:	e1 5f       	subi	r30, 0xF1	; 241
     762:	f7 4d       	sbci	r31, 0xD7	; 215
     764:	e8 0f       	add	r30, r24
     766:	f1 1d       	adc	r31, r1
     768:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     76a:	0f c0       	rjmp	.+30     	; 0x78a <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     76c:	21 96       	adiw	r28, 0x01	; 1
     76e:	24 e3       	ldi	r18, 0x34	; 52
     770:	2e 9d       	mul	r18, r14
     772:	f0 01       	movw	r30, r0
     774:	2f 9d       	mul	r18, r15
     776:	f0 0d       	add	r31, r0
     778:	11 24       	eor	r1, r1
     77a:	e1 5f       	subi	r30, 0xF1	; 241
     77c:	f7 4d       	sbci	r31, 0xD7	; 215
     77e:	e8 0f       	add	r30, r24
     780:	f1 1d       	adc	r31, r1
     782:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     784:	8f 5f       	subi	r24, 0xFF	; 255
     786:	89 30       	cpi	r24, 0x09	; 9
     788:	10 f3       	brcs	.-60     	; 0x74e <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	08 95       	ret

00000796 <printLine>:
		been run and the system has received a reboot acknowledge (the !). This
		is done to prevent unsolicited text being sent (error messages) at
		initialization or after a reboot.
------------------------------------------------------------------------------*/
void printLine(char *str)
{
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
     7a2:	c5 50       	subi	r28, 0x05	; 5
     7a4:	d1 40       	sbci	r29, 0x01	; 1
     7a6:	cd bf       	out	0x3d, r28	; 61
     7a8:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char prFormat[] = "$S%d%s";
     7aa:	27 e0       	ldi	r18, 0x07	; 7
     7ac:	ee e7       	ldi	r30, 0x7E	; 126
     7ae:	f2 eb       	ldi	r31, 0xB2	; 178
     7b0:	de 01       	movw	r26, r28
     7b2:	a1 50       	subi	r26, 0x01	; 1
     7b4:	bf 4f       	sbci	r27, 0xFF	; 255
     7b6:	01 90       	ld	r0, Z+
     7b8:	0d 92       	st	X+, r0
     7ba:	2a 95       	dec	r18
     7bc:	e1 f7       	brne	.-8      	; 0x7b6 <printLine+0x20>

	if (firstpass) {
     7be:	20 91 17 2a 	lds	r18, 0x2A17	; 0x802a17 <firstpass>
     7c2:	21 11       	cpse	r18, r1
     7c4:	2a c0       	rjmp	.+84     	; 0x81a <printLine+0x84>
		return;
	}

	sprintf(strbuf, prFormat, get_SPECID, str);
     7c6:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     7ca:	22 ff       	sbrs	r18, 2
     7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <printLine+0x3e>
     7ce:	22 e0       	ldi	r18, 0x02	; 2
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <printLine+0x42>
     7d4:	21 e0       	ldi	r18, 0x01	; 1
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	9f 93       	push	r25
     7da:	8f 93       	push	r24
     7dc:	3f 93       	push	r19
     7de:	2f 93       	push	r18
     7e0:	ce 01       	movw	r24, r28
     7e2:	81 50       	subi	r24, 0x01	; 1
     7e4:	9f 4f       	sbci	r25, 0xFF	; 255
     7e6:	9f 93       	push	r25
     7e8:	8f 93       	push	r24
     7ea:	8e 01       	movw	r16, r28
     7ec:	0f 5f       	subi	r16, 0xFF	; 255
     7ee:	1f 4f       	sbci	r17, 0xFF	; 255
     7f0:	1f 93       	push	r17
     7f2:	0f 93       	push	r16
     7f4:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
	checksum_NMEA(strbuf);
     7f8:	c8 01       	movw	r24, r16
     7fa:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     7fe:	f8 01       	movw	r30, r16
     800:	01 90       	ld	r0, Z+
     802:	00 20       	and	r0, r0
     804:	e9 f7       	brne	.-6      	; 0x800 <printLine+0x6a>
     806:	31 97       	sbiw	r30, 0x01	; 1
     808:	af 01       	movw	r20, r30
     80a:	40 1b       	sub	r20, r16
     80c:	51 0b       	sbc	r21, r17
     80e:	b8 01       	movw	r22, r16
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <send_USART>
     816:	cd bf       	out	0x3d, r28	; 61
     818:	de bf       	out	0x3e, r29	; 62

}
     81a:	cb 5f       	subi	r28, 0xFB	; 251
     81c:	de 4f       	sbci	r29, 0xFE	; 254
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	de bf       	out	0x3e, r29	; 62
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	08 95       	ret

0000082c <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     82c:	cf 92       	push	r12
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	cc 51       	subi	r28, 0x1C	; 28
     842:	d1 40       	sbci	r29, 0x01	; 1
     844:	cd bf       	out	0x3d, r28	; 61
     846:	de bf       	out	0x3e, r29	; 62
     848:	d8 2e       	mov	r13, r24
     84a:	c9 2e       	mov	r12, r25

	const char format_CMD[] = "CMD,%s,%s";
     84c:	8a e0       	ldi	r24, 0x0A	; 10
     84e:	e5 e8       	ldi	r30, 0x85	; 133
     850:	f2 eb       	ldi	r31, 0xB2	; 178
     852:	9e 01       	movw	r18, r28
     854:	2f 5f       	subi	r18, 0xFF	; 255
     856:	3f 4f       	sbci	r19, 0xFF	; 255
     858:	79 01       	movw	r14, r18
     85a:	d9 01       	movw	r26, r18
     85c:	01 90       	ld	r0, Z+
     85e:	0d 92       	st	X+, r0
     860:	8a 95       	dec	r24
     862:	e1 f7       	brne	.-8      	; 0x85c <echo_cmd+0x30>
	char currenttime[20], strbuf[BUFSIZE];

	get_time(currenttime);
     864:	8e 01       	movw	r16, r28
     866:	05 5f       	subi	r16, 0xF5	; 245
     868:	1f 4f       	sbci	r17, 0xFF	; 255
     86a:	c8 01       	movw	r24, r16
     86c:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
	sprintf(strbuf, format_CMD, currenttime, cmdline);
     870:	cf 92       	push	r12
     872:	df 92       	push	r13
     874:	1f 93       	push	r17
     876:	0f 93       	push	r16
     878:	ff 92       	push	r15
     87a:	ef 92       	push	r14
     87c:	0c 5e       	subi	r16, 0xEC	; 236
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	1f 93       	push	r17
     882:	0f 93       	push	r16
     884:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
	printLine(strbuf);
     888:	c8 01       	movw	r24, r16
     88a:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>

}
     88e:	cd bf       	out	0x3d, r28	; 61
     890:	de bf       	out	0x3e, r29	; 62
     892:	c4 5e       	subi	r28, 0xE4	; 228
     894:	de 4f       	sbci	r29, 0xFE	; 254
     896:	cd bf       	out	0x3d, r28	; 61
     898:	de bf       	out	0x3e, r29	; 62
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	ff 90       	pop	r15
     8a4:	ef 90       	pop	r14
     8a6:	df 90       	pop	r13
     8a8:	cf 90       	pop	r12
     8aa:	08 95       	ret

000008ac <send_EXprompt>:
/*------------------------------------------------------------------------------
void send_EXprompt(void)
	Sends an exclamation mark on USART port 0
------------------------------------------------------------------------------*/
void send_EXprompt(void)
{
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	00 d0       	rcall	.+0      	; 0x8b2 <send_EXprompt+0x6>
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62

	const char str[] = "!";
     8b6:	81 e2       	ldi	r24, 0x21	; 33
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	89 83       	std	Y+1, r24	; 0x01
     8bc:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     8be:	41 e0       	ldi	r20, 0x01	; 1
     8c0:	be 01       	movw	r22, r28
     8c2:	6f 5f       	subi	r22, 0xFF	; 255
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <send_USART>

}
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	08 95       	ret

000008d6 <rebootACKd>:
	Returns:
		YES if the reboot acknowledge string was received
		NO if it wasn't
------------------------------------------------------------------------------*/
uint8_t rebootACKd(char *cmdline)
{
     8d6:	cf 93       	push	r28

	if (!rebootackd) {
     8d8:	c0 91 0e 28 	lds	r28, 0x280E	; 0x80280e <rebootackd>
     8dc:	c1 11       	cpse	r28, r1
     8de:	21 c0       	rjmp	.+66     	; 0x922 <rebootACKd+0x4c>
     8e0:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     8e2:	80 81       	ld	r24, Z
     8e4:	81 32       	cpi	r24, 0x21	; 33
     8e6:	91 f4       	brne	.+36     	; 0x90c <rebootACKd+0x36>
     8e8:	91 81       	ldd	r25, Z+1	; 0x01
     8ea:	91 11       	cpse	r25, r1
     8ec:	0f c0       	rjmp	.+30     	; 0x90c <rebootACKd+0x36>
			init_RTC(511);		// 1-sec RTC clock ticks
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     8f6:	85 e0       	ldi	r24, 0x05	; 5
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
     8fe:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>
			rebootackd = YES;
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <rebootackd>
			return(YES);
     908:	c1 e0       	ldi	r28, 0x01	; 1
     90a:	0c c0       	rjmp	.+24     	; 0x924 <rebootACKd+0x4e>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     90c:	81 32       	cpi	r24, 0x21	; 33
     90e:	31 f4       	brne	.+12     	; 0x91c <rebootACKd+0x46>
     910:	81 81       	ldd	r24, Z+1	; 0x01
     912:	88 23       	and	r24, r24
     914:	19 f0       	breq	.+6      	; 0x91c <rebootACKd+0x46>
			reboot();
     916:	0e 94 37 30 	call	0x606e	; 0x606e <reboot>
			return(NO);
     91a:	04 c0       	rjmp	.+8      	; 0x924 <rebootACKd+0x4e>
		} else {
			send_EXprompt();
     91c:	0e 94 56 04 	call	0x8ac	; 0x8ac <send_EXprompt>
//			send_prompt('!');
			return(NO);
     920:	01 c0       	rjmp	.+2      	; 0x924 <rebootACKd+0x4e>
		}
	}

	return(YES);
     922:	c1 e0       	ldi	r28, 0x01	; 1

}
     924:	8c 2f       	mov	r24, r28
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <send_GTprompt>:
/*------------------------------------------------------------------------------
void send_GTprompt(void)
	Sends a greater than (>) on USART port 0
------------------------------------------------------------------------------*/
void send_GTprompt(void)
{
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	00 d0       	rcall	.+0      	; 0x930 <send_GTprompt+0x6>
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62

	const char str[] = ">";
     934:	8e e3       	ldi	r24, 0x3E	; 62
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     93c:	41 e0       	ldi	r20, 0x01	; 1
     93e:	be 01       	movw	r22, r28
     940:	6f 5f       	subi	r22, 0xFF	; 255
     942:	7f 4f       	sbci	r23, 0xFF	; 255
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <send_USART>

}
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
     95c:	cf 5f       	subi	r28, 0xFF	; 255
     95e:	d1 09       	sbc	r29, r1
     960:	cd bf       	out	0x3d, r28	; 61
     962:	de bf       	out	0x3e, r29	; 62

	char cmdline[BUFSIZE+1];		// BUFSIZE is the size of the ring buffer
	static uint8_t cstack = 0;		// pcmd index

	get_cmdline(cmdline);
     964:	ce 01       	movw	r24, r28
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	0e 94 fe 02 	call	0x5fc	; 0x5fc <get_cmdline>

	if (!rebootACKd(cmdline)) {		// Reboot not yet acknowledged
     96c:	ce 01       	movw	r24, r28
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <rebootACKd>
     974:	88 23       	and	r24, r24
     976:	09 f4       	brne	.+2      	; 0x97a <commands+0x26>
     978:	7c c0       	rjmp	.+248    	; 0xa72 <commands+0x11e>
		return;
	}

		// <CR> or ! alone are not errors
	if ((cmdline[0] == '\0') || (cmdline[0] == '!')) {
     97a:	89 81       	ldd	r24, Y+1	; 0x01
     97c:	88 23       	and	r24, r24
     97e:	11 f0       	breq	.+4      	; 0x984 <commands+0x30>
     980:	81 32       	cpi	r24, 0x21	; 33
     982:	29 f4       	brne	.+10     	; 0x98e <commands+0x3a>
		firstpass = NO;
     984:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <firstpass>
		send_GTprompt();
     988:	0e 94 95 04 	call	0x92a	; 0x92a <send_GTprompt>
		return;
     98c:	72 c0       	rjmp	.+228    	; 0xa72 <commands+0x11e>
	}

	echo_cmd(cmdline);
     98e:	ce 01       	movw	r24, r28
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	0e 94 16 04 	call	0x82c	; 0x82c <echo_cmd>
	parse_cmd(cmdline, cstack);
     996:	60 91 00 28 	lds	r22, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     99a:	ce 01       	movw	r24, r28
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	0e 94 37 03 	call	0x66e	; 0x66e <parse_cmd>

	switch (pcmd[cstack].cverb) {
     9a2:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     9a6:	24 e3       	ldi	r18, 0x34	; 52
     9a8:	82 9f       	mul	r24, r18
     9aa:	f0 01       	movw	r30, r0
     9ac:	11 24       	eor	r1, r1
     9ae:	e1 5f       	subi	r30, 0xF1	; 241
     9b0:	f7 4d       	sbci	r31, 0xD7	; 215
     9b2:	e0 81       	ld	r30, Z
     9b4:	4e 2f       	mov	r20, r30
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	fa 01       	movw	r30, r20
     9ba:	e9 54       	subi	r30, 0x49	; 73
     9bc:	f1 09       	sbc	r31, r1
     9be:	ed 32       	cpi	r30, 0x2D	; 45
     9c0:	f1 05       	cpc	r31, r1
     9c2:	08 f0       	brcs	.+2      	; 0x9c6 <commands+0x72>
     9c4:	44 c0       	rjmp	.+136    	; 0xa4e <commands+0xfa>
     9c6:	e0 5b       	subi	r30, 0xB0	; 176
     9c8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ca:	0c 94 51 36 	jmp	0x6ca2	; 0x6ca2 <__tablejump2__>
		case 'c':				// close
			close_PNEU(cstack);
     9ce:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <close_PNEU>
			break;
     9d2:	43 c0       	rjmp	.+134    	; 0xa5a <commands+0x106>

		case 'o':				// open
			open_PNEU(cstack);
     9d4:	0e 94 35 10 	call	0x206a	; 0x206a <open_PNEU>
			break;
     9d8:	40 c0       	rjmp	.+128    	; 0xa5a <commands+0x106>

		case 'm':				// move
			move_MOTOR_CMD(cstack);
     9da:	0e 94 a4 24 	call	0x4948	; 0x4948 <move_MOTOR_CMD>
			break;
     9de:	3d c0       	rjmp	.+122    	; 0xa5a <commands+0x106>

		case 'r':				// report
			report(cstack);
     9e0:	0e 94 27 11 	call	0x224e	; 0x224e <report>
			break;
     9e4:	3a c0       	rjmp	.+116    	; 0xa5a <commands+0x106>

		case 's':				// set
			set(cstack);
     9e6:	0e 94 1e 2a 	call	0x543c	; 0x543c <set>
			break;
     9ea:	37 c0       	rjmp	.+110    	; 0xa5a <commands+0x106>

		case 't':
			testroutine();
     9ec:	0e 94 3d 2c 	call	0x587a	; 0x587a <testroutine>
			break;
     9f0:	34 c0       	rjmp	.+104    	; 0xa5a <commands+0x106>

		case 'u':
			unstick_MOTOR_LIMIT(cstack);
     9f2:	0e 94 a8 28 	call	0x5150	; 0x5150 <unstick_MOTOR_LIMIT>
			break;
     9f6:	31 c0       	rjmp	.+98     	; 0xa5a <commands+0x106>

		case 'I':	// test init_MOTORS
			init_MOTORS();
     9f8:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <init_MOTORS>
			break;
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <commands+0x106>

		case 'R':				// Reboot
			if (motorsMoving()) {
     9fe:	0e 94 60 21 	call	0x42c0	; 0x42c0 <motorsMoving>
     a02:	88 23       	and	r24, r24
     a04:	39 f0       	breq	.+14     	; 0xa14 <commands+0xc0>
				printError(ERR_MTR, "commands: Can't reboot, motor moving");
     a06:	6f e8       	ldi	r22, 0x8F	; 143
     a08:	72 eb       	ldi	r23, 0xB2	; 178
     a0a:	86 e3       	ldi	r24, 0x36	; 54
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				break;
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <commands+0x106>
			} else {
				if (put_FRAM_ENCODERS() == ERROR) {
     a14:	0e 94 c1 21 	call	0x4382	; 0x4382 <put_FRAM_ENCODERS>
     a18:	83 36       	cpi	r24, 0x63	; 99
     a1a:	31 f4       	brne	.+12     	; 0xa28 <commands+0xd4>
					printError(ERR_FRAM, "commands: put_FRAM_ENCODERS error");
     a1c:	64 eb       	ldi	r22, 0xB4	; 180
     a1e:	72 eb       	ldi	r23, 0xB2	; 178
     a20:	83 e9       	ldi	r24, 0x93	; 147
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				}
				timerSAVEENCODER = 0;
     a28:	10 92 3c 2a 	sts	0x2A3C, r1	; 0x802a3c <timerSAVEENCODER>
				send_GTprompt();	// Aidan request
     a2c:	0e 94 95 04 	call	0x92a	; 0x92a <send_GTprompt>
     a30:	8f e3       	ldi	r24, 0x3F	; 63
     a32:	9d e0       	ldi	r25, 0x0D	; 13
     a34:	23 e0       	ldi	r18, 0x03	; 3
     a36:	81 50       	subi	r24, 0x01	; 1
     a38:	90 40       	sbci	r25, 0x00	; 0
     a3a:	20 40       	sbci	r18, 0x00	; 0
     a3c:	e1 f7       	brne	.-8      	; 0xa36 <commands+0xe2>
     a3e:	00 c0       	rjmp	.+0      	; 0xa40 <commands+0xec>
     a40:	00 00       	nop
				_delay_ms(100);
				reboot();			// in wdt.c
     a42:	0e 94 37 30 	call	0x606e	; 0x606e <reboot>
				return;
     a46:	15 c0       	rjmp	.+42     	; 0xa72 <commands+0x11e>
			}

		case 'Z':				// Write zero to encoder
			zero_MOTOR_CMD(cstack);
     a48:	0e 94 af 29 	call	0x535e	; 0x535e <zero_MOTOR_CMD>
			break;
     a4c:	06 c0       	rjmp	.+12     	; 0xa5a <commands+0x106>

		default:
			printError(ERR_BADCOMMAND, "Not a command");
     a4e:	66 ed       	ldi	r22, 0xD6	; 214
     a50:	72 eb       	ldi	r23, 0xB2	; 178
     a52:	89 ec       	ldi	r24, 0xC9	; 201
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     a5a:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	6a e0       	ldi	r22, 0x0A	; 10
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
     a6a:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	send_GTprompt();
     a6e:	0e 94 95 04 	call	0x92a	; 0x92a <send_GTprompt>

}
     a72:	c1 50       	subi	r28, 0x01	; 1
     a74:	df 4f       	sbci	r29, 0xFF	; 255
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	de bf       	out	0x3e, r29	; 62
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <check_isotime>:
#include "twi.h"
#include "errors.h"
#include "ds3231.h"

uint8_t check_isotime(char *isotime)
{
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
     a8c:	c0 5f       	subi	r28, 0xF0	; 240
     a8e:	d1 09       	sbc	r29, r1
     a90:	cd bf       	out	0x3d, r28	; 61
     a92:	de bf       	out	0x3e, r29	; 62
     a94:	8c 01       	movw	r16, r24

	char sbuf[10], strbuf[80];
	uint8_t i;
	int year, month, day, hours, minutes, seconds;
	const char msg0[] = "check_isotime: bad year";
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	e4 ee       	ldi	r30, 0xE4	; 228
     a9a:	f2 eb       	ldi	r31, 0xB2	; 178
     a9c:	de 01       	movw	r26, r28
     a9e:	a5 5a       	subi	r26, 0xA5	; 165
     aa0:	bf 4f       	sbci	r27, 0xFF	; 255
     aa2:	01 90       	ld	r0, Z+
     aa4:	0d 92       	st	X+, r0
     aa6:	8a 95       	dec	r24
     aa8:	e1 f7       	brne	.-8      	; 0xaa2 <check_isotime+0x22>
	const char msg1[] = "check_isotime: bad month";
     aaa:	89 e1       	ldi	r24, 0x19	; 25
     aac:	ec ef       	ldi	r30, 0xFC	; 252
     aae:	f2 eb       	ldi	r31, 0xB2	; 178
     ab0:	de 01       	movw	r26, r28
     ab2:	ad 58       	subi	r26, 0x8D	; 141
     ab4:	bf 4f       	sbci	r27, 0xFF	; 255
     ab6:	01 90       	ld	r0, Z+
     ab8:	0d 92       	st	X+, r0
     aba:	8a 95       	dec	r24
     abc:	e1 f7       	brne	.-8      	; 0xab6 <check_isotime+0x36>
	const char msg2[] = "check_isotime: bad day";
     abe:	87 e1       	ldi	r24, 0x17	; 23
     ac0:	e5 e1       	ldi	r30, 0x15	; 21
     ac2:	f3 eb       	ldi	r31, 0xB3	; 179
     ac4:	de 01       	movw	r26, r28
     ac6:	a4 57       	subi	r26, 0x74	; 116
     ac8:	bf 4f       	sbci	r27, 0xFF	; 255
     aca:	01 90       	ld	r0, Z+
     acc:	0d 92       	st	X+, r0
     ace:	8a 95       	dec	r24
     ad0:	e1 f7       	brne	.-8      	; 0xaca <check_isotime+0x4a>
	const char msg3[] = "check_isotime: bad hour";
     ad2:	88 e1       	ldi	r24, 0x18	; 24
     ad4:	ec e2       	ldi	r30, 0x2C	; 44
     ad6:	f3 eb       	ldi	r31, 0xB3	; 179
     ad8:	de 01       	movw	r26, r28
     ada:	ad 55       	subi	r26, 0x5D	; 93
     adc:	bf 4f       	sbci	r27, 0xFF	; 255
     ade:	01 90       	ld	r0, Z+
     ae0:	0d 92       	st	X+, r0
     ae2:	8a 95       	dec	r24
     ae4:	e1 f7       	brne	.-8      	; 0xade <check_isotime+0x5e>
	const char msg4[] = "check_isotime: bad minutes";
     ae6:	8b e1       	ldi	r24, 0x1B	; 27
     ae8:	e4 e4       	ldi	r30, 0x44	; 68
     aea:	f3 eb       	ldi	r31, 0xB3	; 179
     aec:	de 01       	movw	r26, r28
     aee:	a5 54       	subi	r26, 0x45	; 69
     af0:	bf 4f       	sbci	r27, 0xFF	; 255
     af2:	01 90       	ld	r0, Z+
     af4:	0d 92       	st	X+, r0
     af6:	8a 95       	dec	r24
     af8:	e1 f7       	brne	.-8      	; 0xaf2 <check_isotime+0x72>
	const char msg5[] = "check_isotime: bad seconds";
     afa:	8b e1       	ldi	r24, 0x1B	; 27
     afc:	ef e5       	ldi	r30, 0x5F	; 95
     afe:	f3 eb       	ldi	r31, 0xB3	; 179
     b00:	de 01       	movw	r26, r28
     b02:	aa 52       	subi	r26, 0x2A	; 42
     b04:	bf 4f       	sbci	r27, 0xFF	; 255
     b06:	01 90       	ld	r0, Z+
     b08:	0d 92       	st	X+, r0
     b0a:	8a 95       	dec	r24
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <check_isotime+0x86>

	for (i = 0; i < 4; i++) {
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	0e c0       	rjmp	.+28     	; 0xb2e <check_isotime+0xae>
		sbuf[i] = isotime[i];
     b12:	82 2f       	mov	r24, r18
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	f8 01       	movw	r30, r16
     b18:	e8 0f       	add	r30, r24
     b1a:	f9 1f       	adc	r31, r25
     b1c:	30 81       	ld	r19, Z
     b1e:	e1 e0       	ldi	r30, 0x01	; 1
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	ec 0f       	add	r30, r28
     b24:	fd 1f       	adc	r31, r29
     b26:	e8 0f       	add	r30, r24
     b28:	f9 1f       	adc	r31, r25
     b2a:	30 83       	st	Z, r19
	const char msg2[] = "check_isotime: bad day";
	const char msg3[] = "check_isotime: bad hour";
	const char msg4[] = "check_isotime: bad minutes";
	const char msg5[] = "check_isotime: bad seconds";

	for (i = 0; i < 4; i++) {
     b2c:	2f 5f       	subi	r18, 0xFF	; 255
     b2e:	24 30       	cpi	r18, 0x04	; 4
     b30:	80 f3       	brcs	.-32     	; 0xb12 <check_isotime+0x92>
		sbuf[i] = isotime[i];
	}
	sbuf[4] = '\0';
     b32:	1d 82       	std	Y+5, r1	; 0x05
	year = atoi(sbuf);
     b34:	ce 01       	movw	r24, r28
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	0e 94 d8 36 	call	0x6db0	; 0x6db0 <atoi>
	if ((year < 2021) || year > 2030) {
     b3c:	85 5e       	subi	r24, 0xE5	; 229
     b3e:	97 40       	sbci	r25, 0x07	; 7
     b40:	0a 97       	sbiw	r24, 0x0a	; 10
     b42:	40 f1       	brcs	.+80     	; 0xb94 <check_isotime+0x114>
		sprintf(strbuf, msg0);
     b44:	ce 01       	movw	r24, r28
     b46:	85 5a       	subi	r24, 0xA5	; 165
     b48:	9f 4f       	sbci	r25, 0xFF	; 255
     b4a:	9f 93       	push	r25
     b4c:	8f 93       	push	r24
     b4e:	8e 01       	movw	r16, r28
     b50:	05 5f       	subi	r16, 0xF5	; 245
     b52:	1f 4f       	sbci	r17, 0xFF	; 255
     b54:	1f 93       	push	r17
     b56:	0f 93       	push	r16
     b58:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
		printError(ERR_ISO, strbuf);
     b5c:	b8 01       	movw	r22, r16
     b5e:	8b e5       	ldi	r24, 0x5B	; 91
     b60:	92 e0       	ldi	r25, 0x02	; 2
     b62:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	83 e6       	ldi	r24, 0x63	; 99
     b70:	fd c0       	rjmp	.+506    	; 0xd6c <check_isotime+0x2ec>
	}
	for (i = 5; i < 7; i++) {
		sbuf[i-5] = isotime[i];
     b72:	28 2f       	mov	r18, r24
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	f9 01       	movw	r30, r18
     b78:	35 97       	sbiw	r30, 0x05	; 5
     b7a:	d8 01       	movw	r26, r16
     b7c:	a2 0f       	add	r26, r18
     b7e:	b3 1f       	adc	r27, r19
     b80:	9c 91       	ld	r25, X
     b82:	21 e0       	ldi	r18, 0x01	; 1
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	2c 0f       	add	r18, r28
     b88:	3d 1f       	adc	r19, r29
     b8a:	e2 0f       	add	r30, r18
     b8c:	f3 1f       	adc	r31, r19
     b8e:	90 83       	st	Z, r25
	if ((year < 2021) || year > 2030) {
		sprintf(strbuf, msg0);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 5; i < 7; i++) {
     b90:	8f 5f       	subi	r24, 0xFF	; 255
     b92:	01 c0       	rjmp	.+2      	; 0xb96 <check_isotime+0x116>
     b94:	85 e0       	ldi	r24, 0x05	; 5
     b96:	87 30       	cpi	r24, 0x07	; 7
     b98:	60 f3       	brcs	.-40     	; 0xb72 <check_isotime+0xf2>
		sbuf[i-5] = isotime[i];
	}
	sbuf[2] = '\0';
     b9a:	1b 82       	std	Y+3, r1	; 0x03
	month = atoi(sbuf);
     b9c:	ce 01       	movw	r24, r28
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	0e 94 d8 36 	call	0x6db0	; 0x6db0 <atoi>
	if ((month < 1) || (month > 12)) {
     ba4:	01 97       	sbiw	r24, 0x01	; 1
     ba6:	0c 97       	sbiw	r24, 0x0c	; 12
     ba8:	40 f1       	brcs	.+80     	; 0xbfa <check_isotime+0x17a>
		sprintf(strbuf, msg1);
     baa:	ce 01       	movw	r24, r28
     bac:	8d 58       	subi	r24, 0x8D	; 141
     bae:	9f 4f       	sbci	r25, 0xFF	; 255
     bb0:	9f 93       	push	r25
     bb2:	8f 93       	push	r24
     bb4:	8e 01       	movw	r16, r28
     bb6:	05 5f       	subi	r16, 0xF5	; 245
     bb8:	1f 4f       	sbci	r17, 0xFF	; 255
     bba:	1f 93       	push	r17
     bbc:	0f 93       	push	r16
     bbe:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
		printError(ERR_ISO, strbuf);
     bc2:	b8 01       	movw	r22, r16
     bc4:	8b e5       	ldi	r24, 0x5B	; 91
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	83 e6       	ldi	r24, 0x63	; 99
     bd6:	ca c0       	rjmp	.+404    	; 0xd6c <check_isotime+0x2ec>
	}
	for (i = 8; i < 10; i++) {
		sbuf[i-8] = isotime[i];
     bd8:	28 2f       	mov	r18, r24
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	f9 01       	movw	r30, r18
     bde:	38 97       	sbiw	r30, 0x08	; 8
     be0:	d8 01       	movw	r26, r16
     be2:	a2 0f       	add	r26, r18
     be4:	b3 1f       	adc	r27, r19
     be6:	9c 91       	ld	r25, X
     be8:	21 e0       	ldi	r18, 0x01	; 1
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	2c 0f       	add	r18, r28
     bee:	3d 1f       	adc	r19, r29
     bf0:	e2 0f       	add	r30, r18
     bf2:	f3 1f       	adc	r31, r19
     bf4:	90 83       	st	Z, r25
	if ((month < 1) || (month > 12)) {
		sprintf(strbuf, msg1);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 8; i < 10; i++) {
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	01 c0       	rjmp	.+2      	; 0xbfc <check_isotime+0x17c>
     bfa:	88 e0       	ldi	r24, 0x08	; 8
     bfc:	8a 30       	cpi	r24, 0x0A	; 10
     bfe:	60 f3       	brcs	.-40     	; 0xbd8 <check_isotime+0x158>
		sbuf[i-8] = isotime[i];
	}
	sbuf[2] = '\0';
     c00:	1b 82       	std	Y+3, r1	; 0x03
	day = atoi(sbuf);
     c02:	ce 01       	movw	r24, r28
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	0e 94 d8 36 	call	0x6db0	; 0x6db0 <atoi>
	if ((day < 1) || (day > 31)) {
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	4f 97       	sbiw	r24, 0x1f	; 31
     c0e:	40 f1       	brcs	.+80     	; 0xc60 <check_isotime+0x1e0>
		sprintf(strbuf, msg2);
     c10:	ce 01       	movw	r24, r28
     c12:	84 57       	subi	r24, 0x74	; 116
     c14:	9f 4f       	sbci	r25, 0xFF	; 255
     c16:	9f 93       	push	r25
     c18:	8f 93       	push	r24
     c1a:	8e 01       	movw	r16, r28
     c1c:	05 5f       	subi	r16, 0xF5	; 245
     c1e:	1f 4f       	sbci	r17, 0xFF	; 255
     c20:	1f 93       	push	r17
     c22:	0f 93       	push	r16
     c24:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
		printError(ERR_ISO, strbuf);
     c28:	b8 01       	movw	r22, r16
     c2a:	8b e5       	ldi	r24, 0x5B	; 91
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	83 e6       	ldi	r24, 0x63	; 99
     c3c:	97 c0       	rjmp	.+302    	; 0xd6c <check_isotime+0x2ec>
	}
	for (i = 11; i < 13; i++) {
		sbuf[i-11] = isotime[i];
     c3e:	28 2f       	mov	r18, r24
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	f9 01       	movw	r30, r18
     c44:	3b 97       	sbiw	r30, 0x0b	; 11
     c46:	d8 01       	movw	r26, r16
     c48:	a2 0f       	add	r26, r18
     c4a:	b3 1f       	adc	r27, r19
     c4c:	9c 91       	ld	r25, X
     c4e:	21 e0       	ldi	r18, 0x01	; 1
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	2c 0f       	add	r18, r28
     c54:	3d 1f       	adc	r19, r29
     c56:	e2 0f       	add	r30, r18
     c58:	f3 1f       	adc	r31, r19
     c5a:	90 83       	st	Z, r25
	if ((day < 1) || (day > 31)) {
		sprintf(strbuf, msg2);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 11; i < 13; i++) {
     c5c:	8f 5f       	subi	r24, 0xFF	; 255
     c5e:	01 c0       	rjmp	.+2      	; 0xc62 <check_isotime+0x1e2>
     c60:	8b e0       	ldi	r24, 0x0B	; 11
     c62:	8d 30       	cpi	r24, 0x0D	; 13
     c64:	60 f3       	brcs	.-40     	; 0xc3e <check_isotime+0x1be>
		sbuf[i-11] = isotime[i];
	}
	sbuf[2] = '\0';
     c66:	1b 82       	std	Y+3, r1	; 0x03
	hours = atoi(sbuf);
     c68:	ce 01       	movw	r24, r28
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	0e 94 d8 36 	call	0x6db0	; 0x6db0 <atoi>
	if ((hours < 0) || (hours > 23)) {
     c70:	48 97       	sbiw	r24, 0x18	; 24
     c72:	40 f1       	brcs	.+80     	; 0xcc4 <check_isotime+0x244>
		sprintf(strbuf, msg3);
     c74:	ce 01       	movw	r24, r28
     c76:	8d 55       	subi	r24, 0x5D	; 93
     c78:	9f 4f       	sbci	r25, 0xFF	; 255
     c7a:	9f 93       	push	r25
     c7c:	8f 93       	push	r24
     c7e:	8e 01       	movw	r16, r28
     c80:	05 5f       	subi	r16, 0xF5	; 245
     c82:	1f 4f       	sbci	r17, 0xFF	; 255
     c84:	1f 93       	push	r17
     c86:	0f 93       	push	r16
     c88:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
		printError(ERR_ISO, strbuf);
     c8c:	b8 01       	movw	r22, r16
     c8e:	8b e5       	ldi	r24, 0x5B	; 91
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	83 e6       	ldi	r24, 0x63	; 99
     ca0:	65 c0       	rjmp	.+202    	; 0xd6c <check_isotime+0x2ec>
	}
	for (i = 14; i < 16; i++) {
		sbuf[i-14] = isotime[i];
     ca2:	28 2f       	mov	r18, r24
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	f9 01       	movw	r30, r18
     ca8:	3e 97       	sbiw	r30, 0x0e	; 14
     caa:	d8 01       	movw	r26, r16
     cac:	a2 0f       	add	r26, r18
     cae:	b3 1f       	adc	r27, r19
     cb0:	9c 91       	ld	r25, X
     cb2:	21 e0       	ldi	r18, 0x01	; 1
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	2c 0f       	add	r18, r28
     cb8:	3d 1f       	adc	r19, r29
     cba:	e2 0f       	add	r30, r18
     cbc:	f3 1f       	adc	r31, r19
     cbe:	90 83       	st	Z, r25
	if ((hours < 0) || (hours > 23)) {
		sprintf(strbuf, msg3);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 14; i < 16; i++) {
     cc0:	8f 5f       	subi	r24, 0xFF	; 255
     cc2:	01 c0       	rjmp	.+2      	; 0xcc6 <check_isotime+0x246>
     cc4:	8e e0       	ldi	r24, 0x0E	; 14
     cc6:	80 31       	cpi	r24, 0x10	; 16
     cc8:	60 f3       	brcs	.-40     	; 0xca2 <check_isotime+0x222>
		sbuf[i-14] = isotime[i];
	}
	sbuf[2] = '\0';
     cca:	1b 82       	std	Y+3, r1	; 0x03
	minutes = atoi(sbuf);
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	0e 94 d8 36 	call	0x6db0	; 0x6db0 <atoi>
	if ((minutes < 0) || (minutes > 59)) {
     cd4:	cc 97       	sbiw	r24, 0x3c	; 60
     cd6:	40 f1       	brcs	.+80     	; 0xd28 <check_isotime+0x2a8>
		sprintf(strbuf, msg4);
     cd8:	ce 01       	movw	r24, r28
     cda:	85 54       	subi	r24, 0x45	; 69
     cdc:	9f 4f       	sbci	r25, 0xFF	; 255
     cde:	9f 93       	push	r25
     ce0:	8f 93       	push	r24
     ce2:	8e 01       	movw	r16, r28
     ce4:	05 5f       	subi	r16, 0xF5	; 245
     ce6:	1f 4f       	sbci	r17, 0xFF	; 255
     ce8:	1f 93       	push	r17
     cea:	0f 93       	push	r16
     cec:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
		printError(ERR_ISO, strbuf);
     cf0:	b8 01       	movw	r22, r16
     cf2:	8b e5       	ldi	r24, 0x5B	; 91
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	83 e6       	ldi	r24, 0x63	; 99
     d04:	33 c0       	rjmp	.+102    	; 0xd6c <check_isotime+0x2ec>
	}
	for (i = 17; i < 19; i++) {
		sbuf[i-17] = isotime[i];
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	f9 01       	movw	r30, r18
     d0c:	71 97       	sbiw	r30, 0x11	; 17
     d0e:	d8 01       	movw	r26, r16
     d10:	a2 0f       	add	r26, r18
     d12:	b3 1f       	adc	r27, r19
     d14:	9c 91       	ld	r25, X
     d16:	21 e0       	ldi	r18, 0x01	; 1
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	2c 0f       	add	r18, r28
     d1c:	3d 1f       	adc	r19, r29
     d1e:	e2 0f       	add	r30, r18
     d20:	f3 1f       	adc	r31, r19
     d22:	90 83       	st	Z, r25
	if ((minutes < 0) || (minutes > 59)) {
		sprintf(strbuf, msg4);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 17; i < 19; i++) {
     d24:	8f 5f       	subi	r24, 0xFF	; 255
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <check_isotime+0x2aa>
     d28:	81 e1       	ldi	r24, 0x11	; 17
     d2a:	83 31       	cpi	r24, 0x13	; 19
     d2c:	60 f3       	brcs	.-40     	; 0xd06 <check_isotime+0x286>
		sbuf[i-17] = isotime[i];
	}
	sbuf[2] = '\0';
     d2e:	1b 82       	std	Y+3, r1	; 0x03
	seconds = atoi(sbuf);
     d30:	ce 01       	movw	r24, r28
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	0e 94 d8 36 	call	0x6db0	; 0x6db0 <atoi>
	if ((seconds < 0) || (seconds > 59)) {
     d38:	cc 97       	sbiw	r24, 0x3c	; 60
     d3a:	b8 f0       	brcs	.+46     	; 0xd6a <check_isotime+0x2ea>
		sprintf(strbuf, msg5);
     d3c:	ce 01       	movw	r24, r28
     d3e:	8a 52       	subi	r24, 0x2A	; 42
     d40:	9f 4f       	sbci	r25, 0xFF	; 255
     d42:	9f 93       	push	r25
     d44:	8f 93       	push	r24
     d46:	8e 01       	movw	r16, r28
     d48:	05 5f       	subi	r16, 0xF5	; 245
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
     d4c:	1f 93       	push	r17
     d4e:	0f 93       	push	r16
     d50:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
		printError(ERR_ISO, strbuf);
     d54:	b8 01       	movw	r22, r16
     d56:	8b e5       	ldi	r24, 0x5B	; 91
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	83 e6       	ldi	r24, 0x63	; 99
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <check_isotime+0x2ec>
	}
	return(NOERROR);
     d6a:	80 e0       	ldi	r24, 0x00	; 0
}
     d6c:	c0 51       	subi	r28, 0x10	; 16
     d6e:	df 4f       	sbci	r29, 0xFF	; 255
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	08 95       	ret

00000d7e <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	a0 97       	sbiw	r28, 0x20	; 32
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	de bf       	out	0x3e, r29	; 62

	const char format_ISO[] = "20%02x-%02x-%02xT%02x:%02x:%02x";
     d90:	40 e2       	ldi	r20, 0x20	; 32
     d92:	ea e7       	ldi	r30, 0x7A	; 122
     d94:	f3 eb       	ldi	r31, 0xB3	; 179
     d96:	9e 01       	movw	r18, r28
     d98:	2f 5f       	subi	r18, 0xFF	; 255
     d9a:	3f 4f       	sbci	r19, 0xFF	; 255
     d9c:	d9 01       	movw	r26, r18
     d9e:	01 90       	ld	r0, Z+
     da0:	0d 92       	st	X+, r0
     da2:	4a 95       	dec	r20
     da4:	e1 f7       	brne	.-8      	; 0xd9e <convert_ds2iso+0x20>
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     da6:	fb 01       	movw	r30, r22
     da8:	b0 81       	ld	r27, Z
	minutes = (*ds3231time++);
     daa:	a1 81       	ldd	r26, Z+1	; 0x01
	hours = (*ds3231time++);
     dac:	12 81       	ldd	r17, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     dae:	04 81       	ldd	r16, Z+4	; 0x04
	month = (*ds3231time++);
     db0:	55 81       	ldd	r21, Z+5	; 0x05
	year = (*ds3231time);
     db2:	46 81       	ldd	r20, Z+6	; 0x06

	sprintf(isotime, format_ISO, year, month, date, hours, minutes, seconds);
     db4:	1f 92       	push	r1
     db6:	bf 93       	push	r27
     db8:	1f 92       	push	r1
     dba:	af 93       	push	r26
     dbc:	1f 92       	push	r1
     dbe:	1f 93       	push	r17
     dc0:	1f 92       	push	r1
     dc2:	0f 93       	push	r16
     dc4:	1f 92       	push	r1
     dc6:	5f 93       	push	r21
     dc8:	1f 92       	push	r1
     dca:	4f 93       	push	r20
     dcc:	3f 93       	push	r19
     dce:	2f 93       	push	r18
     dd0:	9f 93       	push	r25
     dd2:	8f 93       	push	r24
     dd4:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>

}
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	a0 96       	adiw	r28, 0x20	; 32
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	08 95       	ret

00000dec <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     dec:	dc 01       	movw	r26, r24
     dee:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     df0:	81 89       	ldd	r24, Z+17	; 0x11
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	c0 97       	sbiw	r24, 0x30	; 48
     df6:	82 95       	swap	r24
     df8:	92 95       	swap	r25
     dfa:	90 7f       	andi	r25, 0xF0	; 240
     dfc:	98 27       	eor	r25, r24
     dfe:	80 7f       	andi	r24, 0xF0	; 240
     e00:	98 27       	eor	r25, r24
     e02:	92 89       	ldd	r25, Z+18	; 0x12
     e04:	90 53       	subi	r25, 0x30	; 48
     e06:	89 2b       	or	r24, r25
     e08:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     e0a:	86 85       	ldd	r24, Z+14	; 0x0e
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	c0 97       	sbiw	r24, 0x30	; 48
     e10:	82 95       	swap	r24
     e12:	92 95       	swap	r25
     e14:	90 7f       	andi	r25, 0xF0	; 240
     e16:	98 27       	eor	r25, r24
     e18:	80 7f       	andi	r24, 0xF0	; 240
     e1a:	98 27       	eor	r25, r24
     e1c:	97 85       	ldd	r25, Z+15	; 0x0f
     e1e:	90 53       	subi	r25, 0x30	; 48
     e20:	89 2b       	or	r24, r25
     e22:	11 96       	adiw	r26, 0x01	; 1
     e24:	8c 93       	st	X, r24
     e26:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     e28:	83 85       	ldd	r24, Z+11	; 0x0b
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	c0 97       	sbiw	r24, 0x30	; 48
     e2e:	82 95       	swap	r24
     e30:	92 95       	swap	r25
     e32:	90 7f       	andi	r25, 0xF0	; 240
     e34:	98 27       	eor	r25, r24
     e36:	80 7f       	andi	r24, 0xF0	; 240
     e38:	98 27       	eor	r25, r24
     e3a:	94 85       	ldd	r25, Z+12	; 0x0c
     e3c:	90 53       	subi	r25, 0x30	; 48
     e3e:	89 2b       	or	r24, r25
     e40:	12 96       	adiw	r26, 0x02	; 2
     e42:	8c 93       	st	X, r24
     e44:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	13 96       	adiw	r26, 0x03	; 3
     e4a:	8c 93       	st	X, r24
     e4c:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     e4e:	80 85       	ldd	r24, Z+8	; 0x08
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	c0 97       	sbiw	r24, 0x30	; 48
     e54:	82 95       	swap	r24
     e56:	92 95       	swap	r25
     e58:	90 7f       	andi	r25, 0xF0	; 240
     e5a:	98 27       	eor	r25, r24
     e5c:	80 7f       	andi	r24, 0xF0	; 240
     e5e:	98 27       	eor	r25, r24
     e60:	91 85       	ldd	r25, Z+9	; 0x09
     e62:	90 53       	subi	r25, 0x30	; 48
     e64:	89 2b       	or	r24, r25
     e66:	14 96       	adiw	r26, 0x04	; 4
     e68:	8c 93       	st	X, r24
     e6a:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     e6c:	25 81       	ldd	r18, Z+5	; 0x05
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	20 53       	subi	r18, 0x30	; 48
     e72:	31 09       	sbc	r19, r1
     e74:	22 95       	swap	r18
     e76:	32 95       	swap	r19
     e78:	30 7f       	andi	r19, 0xF0	; 240
     e7a:	32 27       	eor	r19, r18
     e7c:	20 7f       	andi	r18, 0xF0	; 240
     e7e:	32 27       	eor	r19, r18
     e80:	86 81       	ldd	r24, Z+6	; 0x06
     e82:	80 53       	subi	r24, 0x30	; 48
     e84:	28 2b       	or	r18, r24
     e86:	15 96       	adiw	r26, 0x05	; 5
     e88:	2c 93       	st	X, r18
     e8a:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     e8c:	22 81       	ldd	r18, Z+2	; 0x02
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	20 53       	subi	r18, 0x30	; 48
     e92:	31 09       	sbc	r19, r1
     e94:	22 95       	swap	r18
     e96:	32 95       	swap	r19
     e98:	30 7f       	andi	r19, 0xF0	; 240
     e9a:	32 27       	eor	r19, r18
     e9c:	20 7f       	andi	r18, 0xF0	; 240
     e9e:	32 27       	eor	r19, r18
     ea0:	83 81       	ldd	r24, Z+3	; 0x03
     ea2:	80 53       	subi	r24, 0x30	; 48
     ea4:	28 2b       	or	r18, r24
     ea6:	16 96       	adiw	r26, 0x06	; 6
     ea8:	2c 93       	st	X, r18
     eaa:	08 95       	ret

00000eac <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     eac:	ef 92       	push	r14
     eae:	ff 92       	push	r15
     eb0:	0f 93       	push	r16
     eb2:	1f 93       	push	r17
     eb4:	cf 93       	push	r28
     eb6:	7b 01       	movw	r14, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
     ebe:	c8 2f       	mov	r28, r24
     ec0:	83 36       	cpi	r24, 0x63	; 99
     ec2:	19 f4       	brne	.+6      	; 0xeca <read_DS3231+0x1e>
		stop_TWI();
     ec4:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(ERROR);
     ec8:	26 c0       	rjmp	.+76     	; 0xf16 <read_DS3231+0x6a>
    }  

	if (write_TWI(0x00) == ERROR) {	// Register 00h
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
     ed0:	c8 2f       	mov	r28, r24
     ed2:	83 36       	cpi	r24, 0x63	; 99
     ed4:	19 f4       	brne	.+6      	; 0xedc <read_DS3231+0x30>
		stop_TWI();
     ed6:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(ERROR);
     eda:	1d c0       	rjmp	.+58     	; 0xf16 <read_DS3231+0x6a>
	}

	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	88 e6       	ldi	r24, 0x68	; 104
     ee0:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
     ee4:	c8 2f       	mov	r28, r24
     ee6:	83 36       	cpi	r24, 0x63	; 99
     ee8:	61 f4       	brne	.+24     	; 0xf02 <read_DS3231+0x56>
		stop_TWI();
     eea:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(ERROR);
     eee:	13 c0       	rjmp	.+38     	; 0xf16 <read_DS3231+0x6a>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     ef0:	87 01       	movw	r16, r14
     ef2:	0c 0f       	add	r16, r28
     ef4:	11 1d       	adc	r17, r1
     ef6:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <read_TWI>
     efa:	f8 01       	movw	r30, r16
     efc:	80 83       	st	Z, r24
	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 6; i++) {
     efe:	cf 5f       	subi	r28, 0xFF	; 255
     f00:	01 c0       	rjmp	.+2      	; 0xf04 <read_DS3231+0x58>
     f02:	c0 e0       	ldi	r28, 0x00	; 0
     f04:	c6 30       	cpi	r28, 0x06	; 6
     f06:	a0 f3       	brcs	.-24     	; 0xef0 <read_DS3231+0x44>
		ds3231time[i] = read_TWI();
	}

	ds3231time[6] = readlast_TWI();
     f08:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <readlast_TWI>
     f0c:	f7 01       	movw	r30, r14
     f0e:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     f10:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>

	return(NOERROR);
     f14:	c0 e0       	ldi	r28, 0x00	; 0

}
     f16:	8c 2f       	mov	r24, r28
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	ff 90       	pop	r15
     f20:	ef 90       	pop	r14
     f22:	08 95       	ret

00000f24 <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     f24:	ef 92       	push	r14
     f26:	ff 92       	push	r15
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	27 97       	sbiw	r28, 0x07	; 7
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (read_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     f3a:	be 01       	movw	r22, r28
     f3c:	6f 5f       	subi	r22, 0xFF	; 255
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	88 e6       	ldi	r24, 0x68	; 104
     f42:	0e 94 56 07 	call	0xeac	; 0xeac <read_DS3231>
     f46:	18 2f       	mov	r17, r24
     f48:	83 36       	cpi	r24, 0x63	; 99
     f4a:	79 f4       	brne	.+30     	; 0xf6a <get_time+0x46>
		printError(ERR_GETTIME, "get_time DS3231");
     f4c:	6a e9       	ldi	r22, 0x9A	; 154
     f4e:	73 eb       	ldi	r23, 0xB3	; 179
     f50:	85 e6       	ldi	r24, 0x65	; 101
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		strcpy(isotime, "DateTime?");
     f58:	8a e0       	ldi	r24, 0x0A	; 10
     f5a:	ea ea       	ldi	r30, 0xAA	; 170
     f5c:	f3 eb       	ldi	r31, 0xB3	; 179
     f5e:	d7 01       	movw	r26, r14
     f60:	01 90       	ld	r0, Z+
     f62:	0d 92       	st	X+, r0
     f64:	8a 95       	dec	r24
     f66:	e1 f7       	brne	.-8      	; 0xf60 <get_time+0x3c>
		return(ERROR);
     f68:	07 c0       	rjmp	.+14     	; 0xf78 <get_time+0x54>
	}

	convert_ds2iso(isotime, ds3231time);
     f6a:	be 01       	movw	r22, r28
     f6c:	6f 5f       	subi	r22, 0xFF	; 255
     f6e:	7f 4f       	sbci	r23, 0xFF	; 255
     f70:	c7 01       	movw	r24, r14
     f72:	0e 94 bf 06 	call	0xd7e	; 0xd7e <convert_ds2iso>
	return(NOERROR);
     f76:	10 e0       	ldi	r17, 0x00	; 0

}
     f78:	81 2f       	mov	r24, r17
     f7a:	27 96       	adiw	r28, 0x07	; 7
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	de bf       	out	0x3e, r29	; 62
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	08 95       	ret

00000f8c <write_DS3231>:
	Returns:
		ERROR for TWI start error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	8b 01       	movw	r16, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
     fa0:	c8 2f       	mov	r28, r24
     fa2:	83 36       	cpi	r24, 0x63	; 99
     fa4:	19 f4       	brne	.+6      	; 0xfac <write_DS3231+0x20>
		stop_TWI();
     fa6:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(ERROR);
     faa:	20 c0       	rjmp	.+64     	; 0xfec <write_DS3231+0x60>
	}

	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
     fb2:	c8 2f       	mov	r28, r24
     fb4:	83 36       	cpi	r24, 0x63	; 99
     fb6:	a1 f4       	brne	.+40     	; 0xfe0 <write_DS3231+0x54>
		stop_TWI();
     fb8:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(ERROR);
     fbc:	17 c0       	rjmp	.+46     	; 0xfec <write_DS3231+0x60>
	}

	for (i = 0; i < 7; i++) {
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     fbe:	78 01       	movw	r14, r16
     fc0:	8f ef       	ldi	r24, 0xFF	; 255
     fc2:	e8 1a       	sub	r14, r24
     fc4:	f8 0a       	sbc	r15, r24
     fc6:	f8 01       	movw	r30, r16
     fc8:	80 81       	ld	r24, Z
     fca:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
     fce:	c8 2f       	mov	r28, r24
     fd0:	83 36       	cpi	r24, 0x63	; 99
     fd2:	19 f4       	brne	.+6      	; 0xfda <write_DS3231+0x4e>
			stop_TWI();
     fd4:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
			return(ERROR);
     fd8:	09 c0       	rjmp	.+18     	; 0xfec <write_DS3231+0x60>
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     fda:	df 5f       	subi	r29, 0xFF	; 255
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     fdc:	87 01       	movw	r16, r14
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <write_DS3231+0x56>
     fe0:	d0 e0       	ldi	r29, 0x00	; 0
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     fe2:	d7 30       	cpi	r29, 0x07	; 7
     fe4:	60 f3       	brcs	.-40     	; 0xfbe <write_DS3231+0x32>
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
			stop_TWI();
			return(ERROR);
		}
	}
	stop_TWI();
     fe6:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>

	return(NOERROR);
     fea:	c0 e0       	ldi	r28, 0x00	; 0

}
     fec:	8c 2f       	mov	r24, r28
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	08 95       	ret

00000ffc <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	27 97       	sbiw	r28, 0x07	; 7
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (check_isotime(isotime) == ERROR) {
    1012:	0e 94 40 05 	call	0xa80	; 0xa80 <check_isotime>
    1016:	18 2f       	mov	r17, r24
    1018:	83 36       	cpi	r24, 0x63	; 99
    101a:	39 f4       	brne	.+14     	; 0x102a <put_time+0x2e>
		printError(ERR_ISO, "put_time: check_isotime error");
    101c:	64 eb       	ldi	r22, 0xB4	; 180
    101e:	73 eb       	ldi	r23, 0xB3	; 179
    1020:	8b e5       	ldi	r24, 0x5B	; 91
    1022:	92 e0       	ldi	r25, 0x02	; 2
    1024:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    1028:	16 c0       	rjmp	.+44     	; 0x1056 <put_time+0x5a>
	}
	convert_iso2ds(ds3231time, isotime);
    102a:	b7 01       	movw	r22, r14
    102c:	ce 01       	movw	r24, r28
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	0e 94 f6 06 	call	0xdec	; 0xdec <convert_iso2ds>
	if (write_DS3231(DS3231ADDR, ds3231time) == ERROR) {
    1034:	be 01       	movw	r22, r28
    1036:	6f 5f       	subi	r22, 0xFF	; 255
    1038:	7f 4f       	sbci	r23, 0xFF	; 255
    103a:	88 e6       	ldi	r24, 0x68	; 104
    103c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <write_DS3231>
    1040:	18 2f       	mov	r17, r24
    1042:	83 36       	cpi	r24, 0x63	; 99
    1044:	39 f4       	brne	.+14     	; 0x1054 <put_time+0x58>
		printError(ERR_PUTTIME, "put_time: write_DS3231 error");
    1046:	62 ed       	ldi	r22, 0xD2	; 210
    1048:	73 eb       	ldi	r23, 0xB3	; 179
    104a:	86 e6       	ldi	r24, 0x66	; 102
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <put_time+0x5a>
	}
	return(NOERROR);
    1054:	10 e0       	ldi	r17, 0x00	; 0

}
    1056:	81 2f       	mov	r24, r17
    1058:	27 96       	adiw	r28, 0x07	; 7
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	08 95       	ret

0000106a <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
    106a:	45 e1       	ldi	r20, 0x15	; 21
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	6b e0       	ldi	r22, 0x0B	; 11
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	0e 94 f6 38 	call	0x71ec	; 0x71ec <eeprom_read_block>
    1076:	08 95       	ret

00001078 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
    1078:	4b e0       	ldi	r20, 0x0B	; 11
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	0e 94 f6 38 	call	0x71ec	; 0x71ec <eeprom_read_block>
    1084:	08 95       	ret

00001086 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	65 97       	sbiw	r28, 0x15	; 21
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
    1094:	ce 01       	movw	r24, r28
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
    109c:	45 e1       	ldi	r20, 0x15	; 21
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	6b e0       	ldi	r22, 0x0B	; 11
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	ce 01       	movw	r24, r28
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <eeprom_update_block>

}
    10ac:	65 96       	adiw	r28, 0x15	; 21
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	08 95       	ret

000010b8 <update_VERSION>:

void update_VERSION(void)
{
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	2b 97       	sbiw	r28, 0x0b	; 11
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
    10c6:	8b e0       	ldi	r24, 0x0B	; 11
    10c8:	ef ee       	ldi	r30, 0xEF	; 239
    10ca:	f3 eb       	ldi	r31, 0xB3	; 179
    10cc:	de 01       	movw	r26, r28
    10ce:	11 96       	adiw	r26, 0x01	; 1
    10d0:	01 90       	ld	r0, Z+
    10d2:	0d 92       	st	X+, r0
    10d4:	8a 95       	dec	r24
    10d6:	e1 f7       	brne	.-8      	; 0x10d0 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
    10d8:	4b e0       	ldi	r20, 0x0B	; 11
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	ce 01       	movw	r24, r28
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	0e 94 fa 38 	call	0x71f4	; 0x71f4 <eeprom_update_block>

}
    10e8:	2b 96       	adiw	r28, 0x0b	; 11
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

000010f4 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
    10f4:	0e 94 43 08 	call	0x1086	; 0x1086 <update_BOOTTIME>
	update_VERSION();
    10f8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <update_VERSION>
    10fc:	08 95       	ret

000010fe <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	c8 50       	subi	r28, 0x08	; 8
    110c:	d1 40       	sbci	r29, 0x01	; 1
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char errorFormat[] = "ERR,%d,%s";
    1112:	2a e0       	ldi	r18, 0x0A	; 10
    1114:	ea ef       	ldi	r30, 0xFA	; 250
    1116:	f3 eb       	ldi	r31, 0xB3	; 179
    1118:	de 01       	movw	r26, r28
    111a:	a1 50       	subi	r26, 0x01	; 1
    111c:	bf 4f       	sbci	r27, 0xFF	; 255
    111e:	01 90       	ld	r0, Z+
    1120:	0d 92       	st	X+, r0
    1122:	2a 95       	dec	r18
    1124:	e1 f7       	brne	.-8      	; 0x111e <printError+0x20>

	if (!squelchErrors) {
    1126:	20 91 0d 28 	lds	r18, 0x280D	; 0x80280d <squelchErrors>
    112a:	21 11       	cpse	r18, r1
    112c:	15 c0       	rjmp	.+42     	; 0x1158 <printError+0x5a>
		sprintf(strbuf, errorFormat, errorNumber, errorString);
    112e:	7f 93       	push	r23
    1130:	6f 93       	push	r22
    1132:	9f 93       	push	r25
    1134:	8f 93       	push	r24
    1136:	ce 01       	movw	r24, r28
    1138:	81 50       	subi	r24, 0x01	; 1
    113a:	9f 4f       	sbci	r25, 0xFF	; 255
    113c:	9f 93       	push	r25
    113e:	8f 93       	push	r24
    1140:	8e 01       	movw	r16, r28
    1142:	0f 5f       	subi	r16, 0xFF	; 255
    1144:	1f 4f       	sbci	r17, 0xFF	; 255
    1146:	1f 93       	push	r17
    1148:	0f 93       	push	r16
    114a:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
		printLine(strbuf);
    114e:	c8 01       	movw	r24, r16
    1150:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	de bf       	out	0x3e, r29	; 62
	}

}
    1158:	c8 5f       	subi	r28, 0xF8	; 248
    115a:	de 4f       	sbci	r29, 0xFE	; 254
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	08 95       	ret

0000116a <read_FRAM>:
	Returns:
		ERROR on start_TWI error (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
    116a:	cf 92       	push	r12
    116c:	df 92       	push	r13
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	d8 2f       	mov	r29, r24
    117c:	d6 2e       	mov	r13, r22
    117e:	07 2f       	mov	r16, r23
    1180:	7a 01       	movw	r14, r20
    1182:	12 2f       	mov	r17, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if (start_TWI(addr, TWIWRITE) == ERROR) {		// TWI start
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
    118a:	c8 2f       	mov	r28, r24
    118c:	83 36       	cpi	r24, 0x63	; 99
    118e:	19 f4       	brne	.+6      	; 0x1196 <read_FRAM+0x2c>
		stop_TWI();
    1190:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(ERROR);
    1194:	2e c0       	rjmp	.+92     	; 0x11f2 <read_FRAM+0x88>
	}

	if (write_TWI(memhigh) == ERROR) {			// Send memory address
    1196:	80 2f       	mov	r24, r16
    1198:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
    119c:	c8 2f       	mov	r28, r24
    119e:	83 36       	cpi	r24, 0x63	; 99
    11a0:	41 f1       	breq	.+80     	; 0x11f2 <read_FRAM+0x88>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {
    11a2:	8d 2d       	mov	r24, r13
    11a4:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
    11a8:	c8 2f       	mov	r28, r24
    11aa:	83 36       	cpi	r24, 0x63	; 99
    11ac:	11 f1       	breq	.+68     	; 0x11f2 <read_FRAM+0x88>
		return(ERROR);
	}

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
    11ae:	61 e0       	ldi	r22, 0x01	; 1
    11b0:	8d 2f       	mov	r24, r29
    11b2:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
    11b6:	c8 2f       	mov	r28, r24
    11b8:	83 36       	cpi	r24, 0x63	; 99
    11ba:	d9 f0       	breq	.+54     	; 0x11f2 <read_FRAM+0x88>
    11bc:	c0 e0       	ldi	r28, 0x00	; 0
    11be:	08 c0       	rjmp	.+16     	; 0x11d0 <read_FRAM+0x66>
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
    11c0:	67 01       	movw	r12, r14
    11c2:	cc 0e       	add	r12, r28
    11c4:	d1 1c       	adc	r13, r1
    11c6:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <read_TWI>
    11ca:	f6 01       	movw	r30, r12
    11cc:	80 83       	st	Z, r24

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
    11ce:	cf 5f       	subi	r28, 0xFF	; 255
    11d0:	2c 2f       	mov	r18, r28
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 2f       	mov	r24, r17
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	28 17       	cp	r18, r24
    11dc:	39 07       	cpc	r19, r25
    11de:	84 f3       	brlt	.-32     	; 0x11c0 <read_FRAM+0x56>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
    11e0:	ec 01       	movw	r28, r24
    11e2:	ce 0d       	add	r28, r14
    11e4:	df 1d       	adc	r29, r15
    11e6:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <readlast_TWI>
    11ea:	88 83       	st	Y, r24

	stop_TWI();
    11ec:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>

	return(NOERROR);
    11f0:	c0 e0       	ldi	r28, 0x00	; 0

}
    11f2:	8c 2f       	mov	r24, r28
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	ff 90       	pop	r15
    11fe:	ef 90       	pop	r14
    1200:	df 90       	pop	r13
    1202:	cf 90       	pop	r12
    1204:	08 95       	ret

00001206 <get_SETTIME>:
	Input: None
	Output: The data from FRAM, presumably containing the time
	Returns: ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t get_SETTIME(char *lastsettime)
{
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	2a 97       	sbiw	r28, 0x0a	; 10
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	7c 01       	movw	r14, r24

	const char timeset[] = "Time Set?";
    121c:	8a e0       	ldi	r24, 0x0A	; 10
    121e:	e4 e0       	ldi	r30, 0x04	; 4
    1220:	f4 eb       	ldi	r31, 0xB4	; 180
    1222:	de 01       	movw	r26, r28
    1224:	11 96       	adiw	r26, 0x01	; 1
    1226:	01 90       	ld	r0, Z+
    1228:	0d 92       	st	X+, r0
    122a:	8a 95       	dec	r24
    122c:	e1 f7       	brne	.-8      	; 0x1226 <get_SETTIME+0x20>
	if (read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, ISOTIMELEN) == ERROR) {;
    122e:	24 e1       	ldi	r18, 0x14	; 20
    1230:	a7 01       	movw	r20, r14
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	80 e5       	ldi	r24, 0x50	; 80
    1238:	0e 94 b5 08 	call	0x116a	; 0x116a <read_FRAM>
    123c:	18 2f       	mov	r17, r24
    123e:	83 36       	cpi	r24, 0x63	; 99
    1240:	39 f4       	brne	.+14     	; 0x1250 <get_SETTIME+0x4a>
		strcpy(lastsettime, timeset);
    1242:	be 01       	movw	r22, r28
    1244:	6f 5f       	subi	r22, 0xFF	; 255
    1246:	7f 4f       	sbci	r23, 0xFF	; 255
    1248:	c7 01       	movw	r24, r14
    124a:	0e 94 0b 38 	call	0x7016	; 0x7016 <strcpy>
		return(ERROR);
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <get_SETTIME+0x4c>
	}
	return(NOERROR);
    1250:	10 e0       	ldi	r17, 0x00	; 0
}
    1252:	81 2f       	mov	r24, r17
    1254:	2a 96       	adiw	r28, 0x0a	; 10
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	ff 90       	pop	r15
    1262:	ef 90       	pop	r14
    1264:	08 95       	ret

00001266 <write_FRAM>:
	Returns:
		ERROR if start_TWI fails (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	f6 2e       	mov	r15, r22
    1274:	17 2f       	mov	r17, r23
    1276:	ea 01       	movw	r28, r20
    1278:	02 2f       	mov	r16, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if (start_TWI(addr, TWIWRITE) == ERROR) {	// TWI START
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
    1280:	83 36       	cpi	r24, 0x63	; 99
    1282:	e1 f0       	breq	.+56     	; 0x12bc <write_FRAM+0x56>
		return(ERROR);
	}

	if (write_TWI(memhigh) == ERROR) {			// FRAM address to write
    1284:	81 2f       	mov	r24, r17
    1286:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
    128a:	83 36       	cpi	r24, 0x63	; 99
    128c:	b9 f0       	breq	.+46     	; 0x12bc <write_FRAM+0x56>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
    128e:	8f 2d       	mov	r24, r15
    1290:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
    1294:	83 36       	cpi	r24, 0x63	; 99
    1296:	91 f0       	breq	.+36     	; 0x12bc <write_FRAM+0x56>
    1298:	10 e0       	ldi	r17, 0x00	; 0
    129a:	0b c0       	rjmp	.+22     	; 0x12b2 <write_FRAM+0x4c>
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    129c:	7e 01       	movw	r14, r28
    129e:	8f ef       	ldi	r24, 0xFF	; 255
    12a0:	e8 1a       	sub	r14, r24
    12a2:	f8 0a       	sbc	r15, r24
    12a4:	88 81       	ld	r24, Y
    12a6:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
    12aa:	83 36       	cpi	r24, 0x63	; 99
    12ac:	39 f0       	breq	.+14     	; 0x12bc <write_FRAM+0x56>
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    12ae:	1f 5f       	subi	r17, 0xFF	; 255
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    12b0:	e7 01       	movw	r28, r14
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    12b2:	10 17       	cp	r17, r16
    12b4:	98 f3       	brcs	.-26     	; 0x129c <write_FRAM+0x36>
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
			return(ERROR);
		}
	}

	stop_TWI();
    12b6:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>

	return(NOERROR);
    12ba:	80 e0       	ldi	r24, 0x00	; 0

}
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	ef 90       	pop	r14
    12c8:	08 95       	ret

000012ca <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor, float temperature)
{
    12ca:	8f 92       	push	r8
    12cc:	9f 92       	push	r9
    12ce:	af 92       	push	r10
    12d0:	bf 92       	push	r11
    12d2:	cf 92       	push	r12
    12d4:	df 92       	push	r13
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <get_humidity+0x1a>
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <get_humidity+0x1c>
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	6a 01       	movw	r12, r20
    12ec:	7b 01       	movw	r14, r22

	uint8_t adcpin;
	float voltage, humidity;

	switch (sensor) {
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	91 f0       	breq	.+36     	; 0x1316 <get_humidity+0x4c>
    12f2:	18 f0       	brcs	.+6      	; 0x12fa <get_humidity+0x30>
    12f4:	82 30       	cpi	r24, 0x02	; 2
    12f6:	19 f0       	breq	.+6      	; 0x12fe <get_humidity+0x34>
    12f8:	04 c0       	rjmp	.+8      	; 0x1302 <get_humidity+0x38>
		case 0:
			adcpin = AIN0;		// production
    12fa:	40 e4       	ldi	r20, 0x40	; 64
    12fc:	0d c0       	rjmp	.+26     	; 0x1318 <get_humidity+0x4e>
		case 1:
			adcpin = AIN1;
			break;

		case 2:
			adcpin = AIN2;
    12fe:	40 e6       	ldi	r20, 0x60	; 96
			break;
    1300:	0b c0       	rjmp	.+22     	; 0x1318 <get_humidity+0x4e>

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
    1302:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
    1304:	0f 2e       	mov	r0, r31
    1306:	c1 2c       	mov	r12, r1
    1308:	d1 2c       	mov	r13, r1
    130a:	f0 ea       	ldi	r31, 0xA0	; 160
    130c:	ef 2e       	mov	r14, r31
    130e:	f1 e4       	ldi	r31, 0x41	; 65
    1310:	ff 2e       	mov	r15, r31
    1312:	f0 2d       	mov	r31, r0
			break;
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <get_humidity+0x4e>
		case 0:
			adcpin = AIN0;		// production
			break;

		case 1:
			adcpin = AIN1;
    1316:	40 e5       	ldi	r20, 0x50	; 80
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
    1318:	8e 01       	movw	r16, r28
    131a:	0f 5f       	subi	r16, 0xFF	; 255
    131c:	1f 4f       	sbci	r17, 0xFF	; 255
    131e:	20 e8       	ldi	r18, 0x80	; 128
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	88 e4       	ldi	r24, 0x48	; 72
    1324:	0e 94 cb 01 	call	0x396	; 0x396 <read_ADS1115>
    1328:	83 36       	cpi	r24, 0x63	; 99
    132a:	89 f1       	breq	.+98     	; 0x138e <get_humidity+0xc4>
		humidity = BADFLOAT;
	}
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	40 ea       	ldi	r20, 0xA0	; 160
    1332:	50 e4       	ldi	r21, 0x40	; 64
    1334:	69 81       	ldd	r22, Y+1	; 0x01
    1336:	7a 81       	ldd	r23, Y+2	; 0x02
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	9c 81       	ldd	r25, Y+4	; 0x04
    133c:	0e 94 da 30 	call	0x61b4	; 0x61b4 <__divsf3>
    1340:	2a e0       	ldi	r18, 0x0A	; 10
    1342:	37 ed       	ldi	r19, 0xD7	; 215
    1344:	43 e2       	ldi	r20, 0x23	; 35
    1346:	5e e3       	ldi	r21, 0x3E	; 62
    1348:	0e 94 68 30 	call	0x60d0	; 0x60d0 <__subsf3>
    134c:	2f e5       	ldi	r18, 0x5F	; 95
    134e:	39 e2       	ldi	r19, 0x29	; 41
    1350:	4b ec       	ldi	r20, 0xCB	; 203
    1352:	5b e3       	ldi	r21, 0x3B	; 59
    1354:	0e 94 da 30 	call	0x61b4	; 0x61b4 <__divsf3>
    1358:	4b 01       	movw	r8, r22
    135a:	5c 01       	movw	r10, r24
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
    135c:	29 ec       	ldi	r18, 0xC9	; 201
    135e:	3e e8       	ldi	r19, 0x8E	; 142
    1360:	4d e0       	ldi	r20, 0x0D	; 13
    1362:	5b e3       	ldi	r21, 0x3B	; 59
    1364:	c7 01       	movw	r24, r14
    1366:	b6 01       	movw	r22, r12
    1368:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
    136c:	9b 01       	movw	r18, r22
    136e:	ac 01       	movw	r20, r24
    1370:	62 e2       	ldi	r22, 0x22	; 34
    1372:	7d ef       	ldi	r23, 0xFD	; 253
    1374:	86 e8       	ldi	r24, 0x86	; 134
    1376:	9f e3       	ldi	r25, 0x3F	; 63
    1378:	0e 94 68 30 	call	0x60d0	; 0x60d0 <__subsf3>
    137c:	9b 01       	movw	r18, r22
    137e:	ac 01       	movw	r20, r24
    1380:	c5 01       	movw	r24, r10
    1382:	b4 01       	movw	r22, r8
    1384:	0e 94 da 30 	call	0x61b4	; 0x61b4 <__divsf3>
    1388:	6b 01       	movw	r12, r22
    138a:	7c 01       	movw	r14, r24
    138c:	09 c0       	rjmp	.+18     	; 0x13a0 <get_humidity+0xd6>
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
		humidity = BADFLOAT;
    138e:	0f 2e       	mov	r0, r31
    1390:	c1 2c       	mov	r12, r1
    1392:	f0 e8       	ldi	r31, 0x80	; 128
    1394:	df 2e       	mov	r13, r31
    1396:	f6 e2       	ldi	r31, 0x26	; 38
    1398:	ef 2e       	mov	r14, r31
    139a:	f4 ec       	ldi	r31, 0xC4	; 196
    139c:	ff 2e       	mov	r15, r31
    139e:	f0 2d       	mov	r31, r0
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
	}

	if (humidity < 0.0) {
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	a9 01       	movw	r20, r18
    13a6:	c7 01       	movw	r24, r14
    13a8:	b6 01       	movw	r22, r12
    13aa:	0e 94 d5 30 	call	0x61aa	; 0x61aa <__cmpsf2>
    13ae:	88 23       	and	r24, r24
    13b0:	4c f4       	brge	.+18     	; 0x13c4 <get_humidity+0xfa>
		humidity = BADFLOAT;
    13b2:	0f 2e       	mov	r0, r31
    13b4:	c1 2c       	mov	r12, r1
    13b6:	f0 e8       	ldi	r31, 0x80	; 128
    13b8:	df 2e       	mov	r13, r31
    13ba:	f6 e2       	ldi	r31, 0x26	; 38
    13bc:	ef 2e       	mov	r14, r31
    13be:	f4 ec       	ldi	r31, 0xC4	; 196
    13c0:	ff 2e       	mov	r15, r31
    13c2:	f0 2d       	mov	r31, r0
	}

	return(humidity);

}
    13c4:	c7 01       	movw	r24, r14
    13c6:	b6 01       	movw	r22, r12
    13c8:	24 96       	adiw	r28, 0x04	; 4
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	de bf       	out	0x3e, r29	; 62
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	df 90       	pop	r13
    13dc:	cf 90       	pop	r12
    13de:	bf 90       	pop	r11
    13e0:	af 90       	pop	r10
    13e2:	9f 90       	pop	r9
    13e4:	8f 90       	pop	r8
    13e6:	08 95       	ret

000013e8 <initialize>:
#include "initialize.h"

uint8_t rebootackd;

void initialize(void)
{
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	2b 97       	sbiw	r28, 0x0b	; 11
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	rebootackd = NO;
    13f6:	10 92 0e 28 	sts	0x280E, r1	; 0x80280e <rebootackd>
	timerOLED = 0;					// See oled.h
    13fa:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    13fe:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display; fast until !
    1402:	80 ee       	ldi	r24, 0xE0	; 224
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
    140a:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>

	init_PORTS();
    140e:	0e 94 0e 11 	call	0x221c	; 0x221c <init_PORTS>
	init_TWI();
    1412:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <init_TWI>
	init_PNEU();
    1416:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <init_PNEU>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
    141a:	80 e2       	ldi	r24, 0x20	; 32
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <init_RTC>
	init_MMA8451();	// Accelerometer; needs TWI
    1422:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <init_MMA8451>
	init_OLED();	// Needs TWI
    1426:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <init_OLED>
	init_EEPROM();	// Needs TWI to get boot time from clock
    142a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <init_EEPROM>
	init_USART();
    142e:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <init_USART>
//	start_TCB0(1);	// 1 ms ticks for TWI & USART timeouts
	sei();
    1432:	78 94       	sei
	init_MOTORS();	// Needs USART & interrupts on
    1434:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <init_MOTORS>
	get_VERSION(versionstr);
    1438:	ce 01       	movw	r24, r28
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_VERSION>
	writestr_OLED(0,"specMech Version", 1);
    1440:	41 e0       	ldi	r20, 0x01	; 1
    1442:	6e e0       	ldi	r22, 0x0E	; 14
    1444:	74 eb       	ldi	r23, 0xB4	; 180
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
	writestr_OLED(0, versionstr, 2);
    144c:	42 e0       	ldi	r20, 0x02	; 2
    144e:	be 01       	movw	r22, r28
    1450:	6f 5f       	subi	r22, 0xFF	; 255
    1452:	7f 4f       	sbci	r23, 0xFF	; 255
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
	beeper(".... ..");
    145a:	8f e1       	ldi	r24, 0x1F	; 31
    145c:	94 eb       	ldi	r25, 0xB4	; 180
    145e:	0e 94 b6 02 	call	0x56c	; 0x56c <beeper>

}
    1462:	2b 96       	adiw	r28, 0x0b	; 11
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	08 95       	ret

0000146e <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
    146e:	0f 93       	push	r16
    1470:	1f 93       	push	r17
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	00 d0       	rcall	.+0      	; 0x1478 <read_ionpump+0xa>
    1478:	00 d0       	rcall	.+0      	; 0x147a <read_ionpump+0xc>
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	21 f0       	breq	.+8      	; 0x148a <read_ionpump+0x1c>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
    1482:	82 30       	cpi	r24, 0x02	; 2
    1484:	11 f5       	brne	.+68     	; 0x14ca <read_ionpump+0x5c>
		pins = AIN23;
    1486:	40 e3       	ldi	r20, 0x30	; 48
    1488:	01 c0       	rjmp	.+2      	; 0x148c <read_ionpump+0x1e>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
    148a:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(BADFLOAT);
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
    148c:	8e 01       	movw	r16, r28
    148e:	0f 5f       	subi	r16, 0xFF	; 255
    1490:	1f 4f       	sbci	r17, 0xFF	; 255
    1492:	20 e8       	ldi	r18, 0x80	; 128
    1494:	62 e0       	ldi	r22, 0x02	; 2
    1496:	89 e4       	ldi	r24, 0x49	; 73
    1498:	0e 94 cb 01 	call	0x396	; 0x396 <read_ADS1115>
    149c:	83 36       	cpi	r24, 0x63	; 99
    149e:	d1 f0       	breq	.+52     	; 0x14d4 <read_ionpump+0x66>
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
		return(BADFLOAT);
	}
*/
	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    14a0:	27 ea       	ldi	r18, 0xA7	; 167
    14a2:	38 ee       	ldi	r19, 0xE8	; 232
    14a4:	42 e0       	ldi	r20, 0x02	; 2
    14a6:	50 e4       	ldi	r21, 0x40	; 64
    14a8:	69 81       	ldd	r22, Y+1	; 0x01
    14aa:	7a 81       	ldd	r23, Y+2	; 0x02
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
    14b4:	2d ea       	ldi	r18, 0xAD	; 173
    14b6:	33 ea       	ldi	r19, 0xA3	; 163
    14b8:	4b ed       	ldi	r20, 0xDB	; 219
    14ba:	50 e4       	ldi	r21, 0x40	; 64
    14bc:	0e 94 68 30 	call	0x60d0	; 0x60d0 <__subsf3>
	return(vacuum);
    14c0:	56 2f       	mov	r21, r22
    14c2:	47 2f       	mov	r20, r23
    14c4:	38 2f       	mov	r19, r24
    14c6:	29 2f       	mov	r18, r25
    14c8:	09 c0       	rjmp	.+18     	; 0x14dc <read_ionpump+0x6e>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(BADFLOAT);
    14ca:	50 e0       	ldi	r21, 0x00	; 0
    14cc:	40 e8       	ldi	r20, 0x80	; 128
    14ce:	36 e2       	ldi	r19, 0x26	; 38
    14d0:	24 ec       	ldi	r18, 0xC4	; 196
    14d2:	04 c0       	rjmp	.+8      	; 0x14dc <read_ionpump+0x6e>
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
		return(BADFLOAT);
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	40 e8       	ldi	r20, 0x80	; 128
    14d8:	36 e2       	ldi	r19, 0x26	; 38
    14da:	24 ec       	ldi	r18, 0xC4	; 196
	}
*/
	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
    14dc:	65 2f       	mov	r22, r21
    14de:	74 2f       	mov	r23, r20
    14e0:	83 2f       	mov	r24, r19
    14e2:	92 2f       	mov	r25, r18
    14e4:	24 96       	adiw	r28, 0x04	; 4
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	08 95       	ret

000014f4 <get_ln2>:
#include "globals.h"
#include "ln2.h"

uint8_t get_ln2(uint8_t *ln2status)
{
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	c3 51       	subi	r28, 0x13	; 19
    1502:	d1 40       	sbci	r29, 0x01	; 1
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	8c 01       	movw	r16, r24

	char strbuf[BUFSIZE];
	const char fmt0[] = "LN2 response timeout";
    150a:	85 e1       	ldi	r24, 0x15	; 21
    150c:	e7 e2       	ldi	r30, 0x27	; 39
    150e:	f4 eb       	ldi	r31, 0xB4	; 180
    1510:	de 01       	movw	r26, r28
    1512:	a1 50       	subi	r26, 0x01	; 1
    1514:	bf 4f       	sbci	r27, 0xFF	; 255
    1516:	01 90       	ld	r0, Z+
    1518:	0d 92       	st	X+, r0
    151a:	8a 95       	dec	r24
    151c:	e1 f7       	brne	.-8      	; 0x1516 <get_ln2+0x22>

	recv3_buf.nxfrd = 0;
    151e:	10 92 4f 30 	sts	0x304F, r1	; 0x80304f <recv3_buf+0x100>
	recv3_buf.done = NO;
    1522:	10 92 4e 30 	sts	0x304E, r1	; 0x80304e <recv3_buf+0xff>

	send3_buf.nbytes = 1;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	80 93 4e 31 	sts	0x314E, r24	; 0x80314e <send3_buf+0xfe>
	send3_buf.data[0] = '\r';
    152c:	8d e0       	ldi	r24, 0x0D	; 13
    152e:	80 93 50 30 	sts	0x3050, r24	; 0x803050 <send3_buf>
	send_USART(3, send3_buf.data, 1);
    1532:	41 e0       	ldi	r20, 0x01	; 1
    1534:	60 e5       	ldi	r22, 0x50	; 80
    1536:	70 e3       	ldi	r23, 0x30	; 48
    1538:	83 e0       	ldi	r24, 0x03	; 3
    153a:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <send_USART>

	USART3_ticks = 0;
    153e:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <USART3_ticks>
    1542:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <USART3_ticks+0x1>
	while (recv3_buf.done == NO) {
    1546:	1e c0       	rjmp	.+60     	; 0x1584 <get_ln2+0x90>
		if (USART3_ticks > 4000) {
    1548:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <USART3_ticks>
    154c:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <USART3_ticks+0x1>
    1550:	81 3a       	cpi	r24, 0xA1	; 161
    1552:	9f 40       	sbci	r25, 0x0F	; 15
    1554:	b8 f0       	brcs	.+46     	; 0x1584 <get_ln2+0x90>
			sprintf(strbuf, fmt0);
    1556:	ce 01       	movw	r24, r28
    1558:	81 50       	subi	r24, 0x01	; 1
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	9f 93       	push	r25
    155e:	8f 93       	push	r24
    1560:	8e 01       	movw	r16, r28
    1562:	0f 5f       	subi	r16, 0xFF	; 255
    1564:	1f 4f       	sbci	r17, 0xFF	; 255
    1566:	1f 93       	push	r17
    1568:	0f 93       	push	r16
    156a:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			printError(ERR_LN2, strbuf);
    156e:	b8 01       	movw	r22, r16
    1570:	8d eb       	ldi	r24, 0xBD	; 189
    1572:	92 e0       	ldi	r25, 0x02	; 2
    1574:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			return(ERROR);
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	83 e6       	ldi	r24, 0x63	; 99
    1582:	0a c0       	rjmp	.+20     	; 0x1598 <get_ln2+0xa4>
	send3_buf.nbytes = 1;
	send3_buf.data[0] = '\r';
	send_USART(3, send3_buf.data, 1);

	USART3_ticks = 0;
	while (recv3_buf.done == NO) {
    1584:	80 91 4e 30 	lds	r24, 0x304E	; 0x80304e <recv3_buf+0xff>
    1588:	88 23       	and	r24, r24
    158a:	f1 f2       	breq	.-68     	; 0x1548 <get_ln2+0x54>
			printError(ERR_LN2, strbuf);
			return(ERROR);
		}
	}

	strcpy((char*) ln2status, (char*) recv3_buf.data);
    158c:	6f e4       	ldi	r22, 0x4F	; 79
    158e:	7f e2       	ldi	r23, 0x2F	; 47
    1590:	c8 01       	movw	r24, r16
    1592:	0e 94 0b 38 	call	0x7016	; 0x7016 <strcpy>
	return(NOERROR);
    1596:	80 e0       	ldi	r24, 0x00	; 0

    1598:	cd 5e       	subi	r28, 0xED	; 237
    159a:	de 4f       	sbci	r29, 0xFE	; 254
    159c:	cd bf       	out	0x3d, r28	; 61
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	1f 91       	pop	r17
    15a6:	0f 91       	pop	r16
    15a8:	08 95       	ret

000015aa <main>:
uint8_t firstpass;

int main(void)
{

	firstpass = YES;		// Set to NO in commands.c
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	80 93 17 2a 	sts	0x2A17, r24	; 0x802a17 <firstpass>
	squelchErrors = YES;
    15b0:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <squelchErrors>

	CPU_CCP = CCP_IOREG_gc;
    15b4:	98 ed       	ldi	r25, 0xD8	; 216
    15b6:	94 bf       	out	0x34, r25	; 52
	CLKCTRL.MCLKCTRLB = CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm;
    15b8:	e0 e6       	ldi	r30, 0x60	; 96
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	81 83       	std	Z+1, r24	; 0x01
	CLKCTRL.MCLKCTRLB = CLKCTRL_LOCKEN_bm;
    15be:	81 83       	std	Z+1, r24	; 0x01

	initialize();
    15c0:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <initialize>
	squelchErrors = NO;
    15c4:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <squelchErrors>

	for (;;) {
		if (recv0_buf.done) {
    15c8:	80 91 4a 2e 	lds	r24, 0x2E4A	; 0x802e4a <recv0_buf+0x103>
    15cc:	88 23       	and	r24, r24
    15ce:	21 f0       	breq	.+8      	; 0x15d8 <main+0x2e>
			recv0_buf.done = NO;
    15d0:	10 92 4a 2e 	sts	0x2E4A, r1	; 0x802e4a <recv0_buf+0x103>
			commands();
    15d4:	0e 94 aa 04 	call	0x954	; 0x954 <commands>
		}

		if (timerOLED > timeoutOLED) {	// Display timeout
    15d8:	20 91 18 2a 	lds	r18, 0x2A18	; 0x802a18 <timerOLED>
    15dc:	30 91 19 2a 	lds	r19, 0x2A19	; 0x802a19 <timerOLED+0x1>
    15e0:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <timeoutOLED>
    15e4:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <timeoutOLED+0x1>
    15e8:	82 17       	cp	r24, r18
    15ea:	93 07       	cpc	r25, r19
    15ec:	78 f4       	brcc	.+30     	; 0x160c <main+0x62>
			squelchErrors = YES;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <squelchErrors>
			clear_OLED(0);
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <clear_OLED>
			clear_OLED(1);
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <clear_OLED>
			timerOLED = 0;
    1600:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    1604:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>
			squelchErrors = NO;
    1608:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <squelchErrors>
		}

		if ((timerSAVEENCODER > timeoutSAVEENCODER) && rebootackd) {
    160c:	90 91 3c 2a 	lds	r25, 0x2A3C	; 0x802a3c <timerSAVEENCODER>
    1610:	80 91 3b 2a 	lds	r24, 0x2A3B	; 0x802a3b <timeoutSAVEENCODER>
    1614:	89 17       	cp	r24, r25
    1616:	c0 f6       	brcc	.-80     	; 0x15c8 <main+0x1e>
    1618:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <rebootackd>
    161c:	88 23       	and	r24, r24
    161e:	a1 f2       	breq	.-88     	; 0x15c8 <main+0x1e>
			squelchErrors = YES;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <squelchErrors>
			put_FRAM_ENCODERS();	// Maybe set a global error variable?
    1626:	0e 94 c1 21 	call	0x4382	; 0x4382 <put_FRAM_ENCODERS>
			timerSAVEENCODER = 0;
    162a:	10 92 3c 2a 	sts	0x2A3C, r1	; 0x802a3c <timerSAVEENCODER>
			squelchErrors = NO;
    162e:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <squelchErrors>
    1632:	ca cf       	rjmp	.-108    	; 0x15c8 <main+0x1e>

00001634 <read_MCP23008>:
	Returns:
		ERROR if TWI error
		NOERROR Otherwise
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	c8 2f       	mov	r28, r24
    163a:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
    1642:	83 36       	cpi	r24, 0x63	; 99
    1644:	51 f4       	brne	.+20     	; 0x165a <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 read error");
    1646:	6c e3       	ldi	r22, 0x3C	; 60
    1648:	74 eb       	ldi	r23, 0xB4	; 180
    164a:	82 e9       	ldi	r24, 0x92	; 146
    164c:	91 e0       	ldi	r25, 0x01	; 1
    164e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		stop_TWI();
    1652:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(0xFF);
    1656:	8f ef       	ldi	r24, 0xFF	; 255
    1658:	19 c0       	rjmp	.+50     	; 0x168c <read_MCP23008+0x58>
	}
	write_TWI(reg);
    165a:	8d 2f       	mov	r24, r29
    165c:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
	if (start_TWI(addr, TWIREAD) == ERROR) {
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	8c 2f       	mov	r24, r28
    1664:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
    1668:	83 36       	cpi	r24, 0x63	; 99
    166a:	51 f4       	brne	.+20     	; 0x1680 <read_MCP23008+0x4c>
		printError(ERR_MCP23008, "MCP23008 read error");
    166c:	6c e3       	ldi	r22, 0x3C	; 60
    166e:	74 eb       	ldi	r23, 0xB4	; 180
    1670:	82 e9       	ldi	r24, 0x92	; 146
    1672:	91 e0       	ldi	r25, 0x01	; 1
    1674:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		stop_TWI();
    1678:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(0xFF);
    167c:	8f ef       	ldi	r24, 0xFF	; 255
    167e:	06 c0       	rjmp	.+12     	; 0x168c <read_MCP23008+0x58>
	}
	value = readlast_TWI();
    1680:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <readlast_TWI>
    1684:	c8 2f       	mov	r28, r24
	stop_TWI();
    1686:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
	return(value);
    168a:	8c 2f       	mov	r24, r28

}
    168c:	df 91       	pop	r29
    168e:	cf 91       	pop	r28
    1690:	08 95       	ret

00001692 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	d6 2f       	mov	r29, r22
    169a:	14 2f       	mov	r17, r20

	uint8_t retval;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
    16a2:	c8 2f       	mov	r28, r24
    16a4:	83 36       	cpi	r24, 0x63	; 99
    16a6:	49 f4       	brne	.+18     	; 0x16ba <write_MCP23008+0x28>
		printError(ERR_MCP23008, "MCP23008 write error");
    16a8:	60 e5       	ldi	r22, 0x50	; 80
    16aa:	74 eb       	ldi	r23, 0xB4	; 180
    16ac:	82 e9       	ldi	r24, 0x92	; 146
    16ae:	91 e0       	ldi	r25, 0x01	; 1
    16b0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		stop_TWI();
    16b4:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(ERROR);
    16b8:	15 c0       	rjmp	.+42     	; 0x16e4 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(reg))) {
    16ba:	8d 2f       	mov	r24, r29
    16bc:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
    16c0:	88 23       	and	r24, r24
    16c2:	21 f0       	breq	.+8      	; 0x16cc <write_MCP23008+0x3a>
		stop_TWI();
    16c4:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(ERROR);
    16c8:	c3 e6       	ldi	r28, 0x63	; 99
    16ca:	0c c0       	rjmp	.+24     	; 0x16e4 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(val))) {
    16cc:	81 2f       	mov	r24, r17
    16ce:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
    16d2:	88 23       	and	r24, r24
    16d4:	21 f0       	breq	.+8      	; 0x16de <write_MCP23008+0x4c>
		stop_TWI();
    16d6:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(ERROR);
    16da:	c3 e6       	ldi	r28, 0x63	; 99
    16dc:	03 c0       	rjmp	.+6      	; 0x16e4 <write_MCP23008+0x52>
	}
	stop_TWI();
    16de:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
	return(NOERROR);
    16e2:	c0 e0       	ldi	r28, 0x00	; 0
	
}
    16e4:	8c 2f       	mov	r24, r28
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	08 95       	ret

000016ee <read_MCP9808>:
#include "errors.h"
#include "mcp9808.h"
#include "twi.h"

uint8_t read_MCP9808(float *temperature)
{
    16ee:	8f 92       	push	r8
    16f0:	9f 92       	push	r9
    16f2:	af 92       	push	r10
    16f4:	bf 92       	push	r11
    16f6:	ff 92       	push	r15
    16f8:	0f 93       	push	r16
    16fa:	1f 93       	push	r17
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	8c 01       	movw	r16, r24

	uint8_t highbyte, lowbyte, sign;
	float temp;

	if (start_TWI(MCP9808ADDR, TWIWRITE) == ERROR) {
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	88 e1       	ldi	r24, 0x18	; 24
    1706:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
    170a:	83 36       	cpi	r24, 0x63	; 99
    170c:	51 f4       	brne	.+20     	; 0x1722 <read_MCP9808+0x34>
		*temperature = BADFLOAT;
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	50 e8       	ldi	r21, 0x80	; 128
    1712:	66 e2       	ldi	r22, 0x26	; 38
    1714:	74 ec       	ldi	r23, 0xC4	; 196
    1716:	f8 01       	movw	r30, r16
    1718:	40 83       	st	Z, r20
    171a:	51 83       	std	Z+1, r21	; 0x01
    171c:	62 83       	std	Z+2, r22	; 0x02
    171e:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    1720:	43 c0       	rjmp	.+134    	; 0x17a8 <read_MCP9808+0xba>
	}
	write_TWI(TEMPREGISTER);
    1722:	85 e0       	ldi	r24, 0x05	; 5
    1724:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    1728:	61 e0       	ldi	r22, 0x01	; 1
    172a:	88 e1       	ldi	r24, 0x18	; 24
    172c:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
	highbyte = read_TWI();
    1730:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <read_TWI>
    1734:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    1736:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <readlast_TWI>
    173a:	d8 2f       	mov	r29, r24
	stop_TWI();
    173c:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1740:	fc 2f       	mov	r31, r28
    1742:	f0 71       	andi	r31, 0x10	; 16
    1744:	ff 2e       	mov	r15, r31
	highbyte &= 0x0F;					// Clear threshold & sign bits
    1746:	6c 2f       	mov	r22, r28
    1748:	6f 70       	andi	r22, 0x0F	; 15
	temp = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e 94 82 31 	call	0x6304	; 0x6304 <__floatunsisf>
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e8       	ldi	r20, 0x80	; 128
    175a:	51 e4       	ldi	r21, 0x41	; 65
    175c:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
    1760:	4b 01       	movw	r8, r22
    1762:	5c 01       	movw	r10, r24
    1764:	6d 2f       	mov	r22, r29
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 82 31 	call	0x6304	; 0x6304 <__floatunsisf>
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e8       	ldi	r20, 0x80	; 128
    1776:	5d e3       	ldi	r21, 0x3D	; 61
    1778:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
    177c:	9b 01       	movw	r18, r22
    177e:	ac 01       	movw	r20, r24
    1780:	c5 01       	movw	r24, r10
    1782:	b4 01       	movw	r22, r8
    1784:	0e 94 69 30 	call	0x60d2	; 0x60d2 <__addsf3>
	if (sign) {
    1788:	ff 20       	and	r15, r15
    178a:	41 f0       	breq	.+16     	; 0x179c <read_MCP9808+0xae>
		temp = 256.0 - temp;
    178c:	9b 01       	movw	r18, r22
    178e:	ac 01       	movw	r20, r24
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	80 e8       	ldi	r24, 0x80	; 128
    1796:	93 e4       	ldi	r25, 0x43	; 67
    1798:	0e 94 68 30 	call	0x60d0	; 0x60d0 <__subsf3>
	}
	*temperature = temp;
    179c:	f8 01       	movw	r30, r16
    179e:	60 83       	st	Z, r22
    17a0:	71 83       	std	Z+1, r23	; 0x01
    17a2:	82 83       	std	Z+2, r24	; 0x02
    17a4:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    17a6:	80 e0       	ldi	r24, 0x00	; 0
}
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	ff 90       	pop	r15
    17b2:	bf 90       	pop	r11
    17b4:	af 90       	pop	r10
    17b6:	9f 90       	pop	r9
    17b8:	8f 90       	pop	r8
    17ba:	08 95       	ret

000017bc <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    17bc:	ef 92       	push	r14
    17be:	ff 92       	push	r15
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	f8 2e       	mov	r15, r24
    17ca:	e6 2e       	mov	r14, r22
    17cc:	ea 01       	movw	r28, r20
    17ce:	02 2f       	mov	r16, r18

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
    17d6:	18 2f       	mov	r17, r24
    17d8:	83 36       	cpi	r24, 0x63	; 99
    17da:	19 f4       	brne	.+6      	; 0x17e2 <read_MMA8451+0x26>
		stop_TWI();
    17dc:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(ERROR);
    17e0:	23 c0       	rjmp	.+70     	; 0x1828 <__DATA_REGION_LENGTH__+0x28>
	}
	if (write_TWI(reg) == ERROR) {
    17e2:	8e 2d       	mov	r24, r14
    17e4:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
    17e8:	18 2f       	mov	r17, r24
    17ea:	83 36       	cpi	r24, 0x63	; 99
    17ec:	e9 f0       	breq	.+58     	; 0x1828 <__DATA_REGION_LENGTH__+0x28>
		return(ERROR);
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	8f 2d       	mov	r24, r15
    17f2:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
    17f6:	18 2f       	mov	r17, r24
    17f8:	83 36       	cpi	r24, 0x63	; 99
    17fa:	69 f4       	brne	.+26     	; 0x1816 <__DATA_REGION_LENGTH__+0x16>
		stop_TWI();
    17fc:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(ERROR);
    1800:	13 c0       	rjmp	.+38     	; 0x1828 <__DATA_REGION_LENGTH__+0x28>
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    1802:	7e 01       	movw	r14, r28
    1804:	8f ef       	ldi	r24, 0xFF	; 255
    1806:	e8 1a       	sub	r14, r24
    1808:	f8 0a       	sbc	r15, r24
    180a:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <read_TWI>
    180e:	88 83       	st	Y, r24
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    1810:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    1812:	e7 01       	movw	r28, r14
    1814:	01 c0       	rjmp	.+2      	; 0x1818 <__DATA_REGION_LENGTH__+0x18>
    1816:	11 e0       	ldi	r17, 0x01	; 1
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    1818:	10 17       	cp	r17, r16
    181a:	98 f3       	brcs	.-26     	; 0x1802 <__DATA_REGION_LENGTH__+0x2>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    181c:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <readlast_TWI>
    1820:	88 83       	st	Y, r24
	stop_TWI();
    1822:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
	return(NOERROR);
    1826:	10 e0       	ldi	r17, 0x00	; 0

}
    1828:	81 2f       	mov	r24, r17
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	1f 91       	pop	r17
    1830:	0f 91       	pop	r16
    1832:	ff 90       	pop	r15
    1834:	ef 90       	pop	r14
    1836:	08 95       	ret

00001838 <get_orientation>:
uint8_t get_orientation(float *x, float *y, float *z)
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
uint8_t get_orientation(float *x, float *y, float *z)
{
    1838:	cf 92       	push	r12
    183a:	df 92       	push	r13
    183c:	ef 92       	push	r14
    183e:	ff 92       	push	r15
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	26 97       	sbiw	r28, 0x06	; 6
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	6c 01       	movw	r12, r24
    1854:	7b 01       	movw	r14, r22
    1856:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = BADFLOAT;
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e8       	ldi	r25, 0x80	; 128
    185c:	a6 e2       	ldi	r26, 0x26	; 38
    185e:	b4 ec       	ldi	r27, 0xC4	; 196
    1860:	fa 01       	movw	r30, r20
    1862:	80 83       	st	Z, r24
    1864:	91 83       	std	Z+1, r25	; 0x01
    1866:	a2 83       	std	Z+2, r26	; 0x02
    1868:	b3 83       	std	Z+3, r27	; 0x03
    186a:	fb 01       	movw	r30, r22
    186c:	80 83       	st	Z, r24
    186e:	91 83       	std	Z+1, r25	; 0x01
    1870:	a2 83       	std	Z+2, r26	; 0x02
    1872:	b3 83       	std	Z+3, r27	; 0x03
    1874:	f6 01       	movw	r30, r12
    1876:	80 83       	st	Z, r24
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	a2 83       	std	Z+2, r26	; 0x02
    187c:	b3 83       	std	Z+3, r27	; 0x03

	if (read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6) == ERROR) {
    187e:	26 e0       	ldi	r18, 0x06	; 6
    1880:	ae 01       	movw	r20, r28
    1882:	4f 5f       	subi	r20, 0xFF	; 255
    1884:	5f 4f       	sbci	r21, 0xFF	; 255
    1886:	61 e0       	ldi	r22, 0x01	; 1
    1888:	8d e1       	ldi	r24, 0x1D	; 29
    188a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <read_MMA8451>
    188e:	83 36       	cpi	r24, 0x63	; 99
    1890:	09 f4       	brne	.+2      	; 0x1894 <get_orientation+0x5c>
    1892:	64 c0       	rjmp	.+200    	; 0x195c <get_orientation+0x124>
		return(ERROR);
	}

	ix = datain[0];
    1894:	69 81       	ldd	r22, Y+1	; 0x01
    1896:	70 e0       	ldi	r23, 0x00	; 0
	ix <<= 8;
    1898:	76 2f       	mov	r23, r22
    189a:	66 27       	eor	r22, r22
	ix |= datain[1];
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	68 2b       	or	r22, r24
	ix >>= 2;
    18a0:	75 95       	asr	r23
    18a2:	67 95       	ror	r22
    18a4:	75 95       	asr	r23
    18a6:	67 95       	ror	r22
	*x = 980.6 * ((float) ix/4096.0);
    18a8:	07 2e       	mov	r0, r23
    18aa:	00 0c       	add	r0, r0
    18ac:	88 0b       	sbc	r24, r24
    18ae:	99 0b       	sbc	r25, r25
    18b0:	0e 94 84 31 	call	0x6308	; 0x6308 <__floatsisf>
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	40 e8       	ldi	r20, 0x80	; 128
    18ba:	59 e3       	ldi	r21, 0x39	; 57
    18bc:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
    18c0:	26 e6       	ldi	r18, 0x66	; 102
    18c2:	36 e2       	ldi	r19, 0x26	; 38
    18c4:	45 e7       	ldi	r20, 0x75	; 117
    18c6:	54 e4       	ldi	r21, 0x44	; 68
    18c8:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
    18cc:	f6 01       	movw	r30, r12
    18ce:	60 83       	st	Z, r22
    18d0:	71 83       	std	Z+1, r23	; 0x01
    18d2:	82 83       	std	Z+2, r24	; 0x02
    18d4:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    18d6:	6b 81       	ldd	r22, Y+3	; 0x03
    18d8:	70 e0       	ldi	r23, 0x00	; 0
	iy <<= 8;
    18da:	76 2f       	mov	r23, r22
    18dc:	66 27       	eor	r22, r22
	iy |= datain[3];
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	68 2b       	or	r22, r24
	iy >>= 2;
    18e2:	75 95       	asr	r23
    18e4:	67 95       	ror	r22
    18e6:	75 95       	asr	r23
    18e8:	67 95       	ror	r22
	*y = 980.6 * ((float) iy/4096.0);
    18ea:	07 2e       	mov	r0, r23
    18ec:	00 0c       	add	r0, r0
    18ee:	88 0b       	sbc	r24, r24
    18f0:	99 0b       	sbc	r25, r25
    18f2:	0e 94 84 31 	call	0x6308	; 0x6308 <__floatsisf>
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e8       	ldi	r20, 0x80	; 128
    18fc:	59 e3       	ldi	r21, 0x39	; 57
    18fe:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
    1902:	26 e6       	ldi	r18, 0x66	; 102
    1904:	36 e2       	ldi	r19, 0x26	; 38
    1906:	45 e7       	ldi	r20, 0x75	; 117
    1908:	54 e4       	ldi	r21, 0x44	; 68
    190a:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
    190e:	f7 01       	movw	r30, r14
    1910:	60 83       	st	Z, r22
    1912:	71 83       	std	Z+1, r23	; 0x01
    1914:	82 83       	std	Z+2, r24	; 0x02
    1916:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    1918:	6d 81       	ldd	r22, Y+5	; 0x05
    191a:	70 e0       	ldi	r23, 0x00	; 0
	iz <<= 8;
    191c:	76 2f       	mov	r23, r22
    191e:	66 27       	eor	r22, r22
	iz |= datain[5];
    1920:	8e 81       	ldd	r24, Y+6	; 0x06
    1922:	68 2b       	or	r22, r24
	iz >>= 2;
    1924:	75 95       	asr	r23
    1926:	67 95       	ror	r22
    1928:	75 95       	asr	r23
    192a:	67 95       	ror	r22
	*z = 980.6 * ((float) iz/4096.0);
    192c:	07 2e       	mov	r0, r23
    192e:	00 0c       	add	r0, r0
    1930:	88 0b       	sbc	r24, r24
    1932:	99 0b       	sbc	r25, r25
    1934:	0e 94 84 31 	call	0x6308	; 0x6308 <__floatsisf>
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e8       	ldi	r20, 0x80	; 128
    193e:	59 e3       	ldi	r21, 0x39	; 57
    1940:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
    1944:	26 e6       	ldi	r18, 0x66	; 102
    1946:	36 e2       	ldi	r19, 0x26	; 38
    1948:	45 e7       	ldi	r20, 0x75	; 117
    194a:	54 e4       	ldi	r21, 0x44	; 68
    194c:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
    1950:	f8 01       	movw	r30, r16
    1952:	60 83       	st	Z, r22
    1954:	71 83       	std	Z+1, r23	; 0x01
    1956:	82 83       	std	Z+2, r24	; 0x02
    1958:	93 83       	std	Z+3, r25	; 0x03

	return(0);
    195a:	80 e0       	ldi	r24, 0x00	; 0

}
    195c:	26 96       	adiw	r28, 0x06	; 6
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	ff 90       	pop	r15
    196c:	ef 90       	pop	r14
    196e:	df 90       	pop	r13
    1970:	cf 90       	pop	r12
    1972:	08 95       	ret

00001974 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1974:	1f 93       	push	r17
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	d6 2f       	mov	r29, r22
    197c:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
    1984:	c8 2f       	mov	r28, r24
    1986:	88 23       	and	r24, r24
    1988:	21 f0       	breq	.+8      	; 0x1992 <write_MMA8451+0x1e>
		stop_TWI();
    198a:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(retval);
    198e:	8c 2f       	mov	r24, r28
    1990:	17 c0       	rjmp	.+46     	; 0x19c0 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1992:	8d 2f       	mov	r24, r29
    1994:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
    1998:	c8 2f       	mov	r28, r24
    199a:	88 23       	and	r24, r24
    199c:	21 f0       	breq	.+8      	; 0x19a6 <write_MMA8451+0x32>
		stop_TWI();
    199e:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(retval);
    19a2:	8c 2f       	mov	r24, r28
    19a4:	0d c0       	rjmp	.+26     	; 0x19c0 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    19a6:	81 2f       	mov	r24, r17
    19a8:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
    19ac:	c8 2f       	mov	r28, r24
    19ae:	88 23       	and	r24, r24
    19b0:	21 f0       	breq	.+8      	; 0x19ba <write_MMA8451+0x46>
		stop_TWI();
    19b2:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
		return(retval);
    19b6:	8c 2f       	mov	r24, r28
    19b8:	03 c0       	rjmp	.+6      	; 0x19c0 <write_MMA8451+0x4c>
	}
	stop_TWI();
    19ba:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>
	return(0);
    19be:	80 e0       	ldi	r24, 0x00	; 0
	
}
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	1f 91       	pop	r17
    19c6:	08 95       	ret

000019c8 <init_MMA8451>:
	sampling frequency (1.56 Hz), a low cutoff frequency on the high pass
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/
uint8_t init_MMA8451(void)
{
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	1f 92       	push	r1
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    19d2:	40 e4       	ldi	r20, 0x40	; 64
    19d4:	6b e2       	ldi	r22, 0x2B	; 43
    19d6:	8d e1       	ldi	r24, 0x1D	; 29
    19d8:	0e 94 ba 0c 	call	0x1974	; 0x1974 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    19dc:	21 e0       	ldi	r18, 0x01	; 1
    19de:	ae 01       	movw	r20, r28
    19e0:	4f 5f       	subi	r20, 0xFF	; 255
    19e2:	5f 4f       	sbci	r21, 0xFF	; 255
    19e4:	6b e2       	ldi	r22, 0x2B	; 43
    19e6:	8d e1       	ldi	r24, 0x1D	; 29
    19e8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <read_MMA8451>
	while (retval & 0x40) {
    19ec:	08 c0       	rjmp	.+16     	; 0x19fe <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    19ee:	21 e0       	ldi	r18, 0x01	; 1
    19f0:	ae 01       	movw	r20, r28
    19f2:	4f 5f       	subi	r20, 0xFF	; 255
    19f4:	5f 4f       	sbci	r21, 0xFF	; 255
    19f6:	6b e2       	ldi	r22, 0x2B	; 43
    19f8:	8d e1       	ldi	r24, 0x1D	; 29
    19fa:	0e 94 de 0b 	call	0x17bc	; 0x17bc <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	86 fd       	sbrc	r24, 6
    1a02:	f5 cf       	rjmp	.-22     	; 0x19ee <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    1a04:	40 ec       	ldi	r20, 0xC0	; 192
    1a06:	6f e0       	ldi	r22, 0x0F	; 15
    1a08:	8d e1       	ldi	r24, 0x1D	; 29
    1a0a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    1a0e:	42 e0       	ldi	r20, 0x02	; 2
    1a10:	6b e2       	ldi	r22, 0x2B	; 43
    1a12:	8d e1       	ldi	r24, 0x1D	; 29
    1a14:	0e 94 ba 0c 	call	0x1974	; 0x1974 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    1a18:	4d e3       	ldi	r20, 0x3D	; 61
    1a1a:	6a e2       	ldi	r22, 0x2A	; 42
    1a1c:	8d e1       	ldi	r24, 0x1D	; 29
    1a1e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <write_MMA8451>

	return(retval);

}
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	0f 90       	pop	r0
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	08 95       	ret

00001a2c <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum and \r\n to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    1a2c:	ef 92       	push	r14
    1a2e:	ff 92       	push	r15
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	2e 97       	sbiw	r28, 0x0e	; 14
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    1a44:	88 e0       	ldi	r24, 0x08	; 8
    1a46:	e5 e6       	ldi	r30, 0x65	; 101
    1a48:	f4 eb       	ldi	r31, 0xB4	; 180
    1a4a:	de 01       	movw	r26, r28
    1a4c:	11 96       	adiw	r26, 0x01	; 1
    1a4e:	01 90       	ld	r0, Z+
    1a50:	0d 92       	st	X+, r0
    1a52:	8a 95       	dec	r24
    1a54:	e1 f7       	brne	.-8      	; 0x1a4e <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    1a56:	f8 01       	movw	r30, r16
    1a58:	01 90       	ld	r0, Z+
    1a5a:	00 20       	and	r0, r0
    1a5c:	e9 f7       	brne	.-6      	; 0x1a58 <checksum_NMEA+0x2c>
    1a5e:	31 97       	sbiw	r30, 0x01	; 1
    1a60:	3e 2f       	mov	r19, r30
    1a62:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    1a64:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	06 c0       	rjmp	.+12     	; 0x1a76 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    1a6a:	f8 01       	movw	r30, r16
    1a6c:	e8 0f       	add	r30, r24
    1a6e:	f1 1d       	adc	r31, r1
    1a70:	20 81       	ld	r18, Z
    1a72:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1a74:	8f 5f       	subi	r24, 0xFF	; 255
    1a76:	83 17       	cp	r24, r19
    1a78:	c0 f3       	brcs	.-16     	; 0x1a6a <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1a7a:	1f 92       	push	r1
    1a7c:	9f 93       	push	r25
    1a7e:	ce 01       	movw	r24, r28
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	9f 93       	push	r25
    1a84:	8f 93       	push	r24
    1a86:	7e 01       	movw	r14, r28
    1a88:	89 e0       	ldi	r24, 0x09	; 9
    1a8a:	e8 0e       	add	r14, r24
    1a8c:	f1 1c       	adc	r15, r1
    1a8e:	ff 92       	push	r15
    1a90:	ef 92       	push	r14
    1a92:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
	strcat(str, chksum);
    1a96:	b7 01       	movw	r22, r14
    1a98:	c8 01       	movw	r24, r16
    1a9a:	0e 94 00 38 	call	0x7000	; 0x7000 <strcat>

}
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	2e 96       	adiw	r28, 0x0e	; 14
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	ff 90       	pop	r15
    1aba:	ef 90       	pop	r14
    1abc:	08 95       	ret

00001abe <reset_OLED>:
void reset_OLED(void)
	Pulls the OLED display reset line low for 1 ms. This seems to be needed.
------------------------------------------------------------------------------*/
void reset_OLED(void)
{
	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    1abe:	e0 e6       	ldi	r30, 0x60	; 96
    1ac0:	f4 e0       	ldi	r31, 0x04	; 4
    1ac2:	80 e4       	ldi	r24, 0x40	; 64
    1ac4:	86 83       	std	Z+6, r24	; 0x06
	PORTD.DIRSET = PIN6_bm;
    1ac6:	81 83       	std	Z+1, r24	; 0x01
    1ac8:	a3 ec       	ldi	r26, 0xC3	; 195
    1aca:	b9 e0       	ldi	r27, 0x09	; 9
    1acc:	11 97       	sbiw	r26, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <reset_OLED+0xe>
    1ad0:	00 c0       	rjmp	.+0      	; 0x1ad2 <reset_OLED+0x14>
    1ad2:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    1ad4:	85 83       	std	Z+5, r24	; 0x05
    1ad6:	08 95       	ret

00001ad8 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    1ad8:	cf 93       	push	r28
    1ada:	df 93       	push	r29
    1adc:	d6 2f       	mov	r29, r22
    1ade:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <start_TWI>
	write_TWI(type);
    1ae6:	8d 2f       	mov	r24, r29
    1ae8:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
	write_TWI(byteToSend);
    1aec:	8c 2f       	mov	r24, r28
    1aee:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <write_TWI>
	stop_TWI();
    1af2:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <stop_TWI>

}
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	08 95       	ret

00001afc <init_OLEDDISPLAY>:
	Initialize a Newhaven NHD-0216AW-1B3 OLED display. This is taken straight
	from https://github.com/NewhavenDisplay/NHD_US2066. The manual is not easy
	to understand but this seems to work.
------------------------------------------------------------------------------*/
void init_OLEDDISPLAY(uint8_t displaynumber)
{
    1afc:	cf 93       	push	r28

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
    1afe:	88 23       	and	r24, r24
    1b00:	29 f0       	breq	.+10     	; 0x1b0c <init_OLEDDISPLAY+0x10>
		twiaddr = OLEDADDR0;		
	} else if (displaynumber == 1) {	// Left-side display
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <init_OLEDDISPLAY+0xc>
    1b06:	9e c0       	rjmp	.+316    	; 0x1c44 <init_OLEDDISPLAY+0x148>
		twiaddr = OLEDADDR1;
    1b08:	cd e3       	ldi	r28, 0x3D	; 61
    1b0a:	01 c0       	rjmp	.+2      	; 0x1b0e <init_OLEDDISPLAY+0x12>
{

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
		twiaddr = OLEDADDR0;		
    1b0c:	cc e3       	ldi	r28, 0x3C	; 60
		twiaddr = OLEDADDR1;
	} else {
		return;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    1b0e:	4a e2       	ldi	r20, 0x2A	; 42
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	8c 2f       	mov	r24, r28
    1b14:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    1b18:	41 e7       	ldi	r20, 0x71	; 113
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	8c 2f       	mov	r24, r28
    1b1e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    1b22:	4c e5       	ldi	r20, 0x5C	; 92
    1b24:	60 e4       	ldi	r22, 0x40	; 64
    1b26:	8c 2f       	mov	r24, r28
    1b28:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1b2c:	48 e2       	ldi	r20, 0x28	; 40
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	8c 2f       	mov	r24, r28
    1b32:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    1b36:	48 e0       	ldi	r20, 0x08	; 8
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	8c 2f       	mov	r24, r28
    1b3c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1b40:	4a e2       	ldi	r20, 0x2A	; 42
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	8c 2f       	mov	r24, r28
    1b46:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1b4a:	49 e7       	ldi	r20, 0x79	; 121
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	8c 2f       	mov	r24, r28
    1b50:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    1b54:	45 ed       	ldi	r20, 0xD5	; 213
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	8c 2f       	mov	r24, r28
    1b5a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    1b5e:	40 e7       	ldi	r20, 0x70	; 112
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	8c 2f       	mov	r24, r28
    1b64:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1b68:	48 e7       	ldi	r20, 0x78	; 120
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	8c 2f       	mov	r24, r28
    1b6e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    1b72:	48 e0       	ldi	r20, 0x08	; 8
    1b74:	60 e0       	ldi	r22, 0x00	; 0
    1b76:	8c 2f       	mov	r24, r28
    1b78:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1b7c:	46 e0       	ldi	r20, 0x06	; 6
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	8c 2f       	mov	r24, r28
    1b82:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1b86:	42 e7       	ldi	r20, 0x72	; 114
    1b88:	60 e0       	ldi	r22, 0x00	; 0
    1b8a:	8c 2f       	mov	r24, r28
    1b8c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    1b90:	40 e0       	ldi	r20, 0x00	; 0
    1b92:	60 e4       	ldi	r22, 0x40	; 64
    1b94:	8c 2f       	mov	r24, r28
    1b96:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1b9a:	4a e2       	ldi	r20, 0x2A	; 42
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	8c 2f       	mov	r24, r28
    1ba0:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1ba4:	49 e7       	ldi	r20, 0x79	; 121
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	8c 2f       	mov	r24, r28
    1baa:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    1bae:	4a ed       	ldi	r20, 0xDA	; 218
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	8c 2f       	mov	r24, r28
    1bb4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	8c 2f       	mov	r24, r28
    1bbe:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    1bc2:	4c ed       	ldi	r20, 0xDC	; 220
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	8c 2f       	mov	r24, r28
    1bc8:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	8c 2f       	mov	r24, r28
    1bd2:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    1bd6:	41 e8       	ldi	r20, 0x81	; 129
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	8c 2f       	mov	r24, r28
    1bdc:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    1be0:	4f e7       	ldi	r20, 0x7F	; 127
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	8c 2f       	mov	r24, r28
    1be6:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1bea:	49 ed       	ldi	r20, 0xD9	; 217
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	8c 2f       	mov	r24, r28
    1bf0:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    1bf4:	41 ef       	ldi	r20, 0xF1	; 241
    1bf6:	60 e0       	ldi	r22, 0x00	; 0
    1bf8:	8c 2f       	mov	r24, r28
    1bfa:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    1bfe:	4b ed       	ldi	r20, 0xDB	; 219
    1c00:	60 e0       	ldi	r22, 0x00	; 0
    1c02:	8c 2f       	mov	r24, r28
    1c04:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    1c08:	40 e4       	ldi	r20, 0x40	; 64
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	8c 2f       	mov	r24, r28
    1c0e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1c12:	48 e7       	ldi	r20, 0x78	; 120
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	8c 2f       	mov	r24, r28
    1c18:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1c1c:	48 e2       	ldi	r20, 0x28	; 40
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	8c 2f       	mov	r24, r28
    1c22:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    1c26:	41 e0       	ldi	r20, 0x01	; 1
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	8c 2f       	mov	r24, r28
    1c2c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    1c30:	40 e8       	ldi	r20, 0x80	; 128
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	8c 2f       	mov	r24, r28
    1c36:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    1c3a:	4c e0       	ldi	r20, 0x0C	; 12
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	8c 2f       	mov	r24, r28
    1c40:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>

}
    1c44:	cf 91       	pop	r28
    1c46:	08 95       	ret

00001c48 <init_OLED>:
	Set up the two OLED displays
------------------------------------------------------------------------------*/
void init_OLED(void)
{

	reset_OLED();				// Need to start with a reset
    1c48:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <reset_OLED>
	init_OLEDDISPLAY(0);
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <init_OLEDDISPLAY>
	init_OLEDDISPLAY(1);
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <init_OLEDDISPLAY>
    1c58:	2f e3       	ldi	r18, 0x3F	; 63
    1c5a:	8d e0       	ldi	r24, 0x0D	; 13
    1c5c:	93 e0       	ldi	r25, 0x03	; 3
    1c5e:	21 50       	subi	r18, 0x01	; 1
    1c60:	80 40       	sbci	r24, 0x00	; 0
    1c62:	90 40       	sbci	r25, 0x00	; 0
    1c64:	e1 f7       	brne	.-8      	; 0x1c5e <init_OLED+0x16>
    1c66:	00 c0       	rjmp	.+0      	; 0x1c68 <init_OLED+0x20>
    1c68:	00 00       	nop
    1c6a:	08 95       	ret

00001c6c <writestr_OLED>:
	
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.
------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1c6c:	ef 92       	push	r14
    1c6e:	ff 92       	push	r15
    1c70:	0f 93       	push	r16
    1c72:	1f 93       	push	r17
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	e2 97       	sbiw	r28, 0x32	; 50
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    1c84:	91 e1       	ldi	r25, 0x11	; 17
    1c86:	ed e6       	ldi	r30, 0x6D	; 109
    1c88:	f4 eb       	ldi	r31, 0xB4	; 180
    1c8a:	de 01       	movw	r26, r28
    1c8c:	92 96       	adiw	r26, 0x22	; 34
    1c8e:	01 90       	ld	r0, Z+
    1c90:	0d 92       	st	X+, r0
    1c92:	9a 95       	dec	r25
    1c94:	e1 f7       	brne	.-8      	; 0x1c8e <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1c96:	81 11       	cpse	r24, r1
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1c9a:	0c e3       	ldi	r16, 0x3C	; 60
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1c9e:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	01 96       	adiw	r24, 0x01	; 1
    1ca4:	7c 01       	movw	r14, r24
    1ca6:	0e 94 0b 38 	call	0x7016	; 0x7016 <strcpy>
	if (strlen(strbuf) > 16) {
    1caa:	f7 01       	movw	r30, r14
    1cac:	01 90       	ld	r0, Z+
    1cae:	00 20       	and	r0, r0
    1cb0:	e9 f7       	brne	.-6      	; 0x1cac <writestr_OLED+0x40>
    1cb2:	31 97       	sbiw	r30, 0x01	; 1
    1cb4:	ee 19       	sub	r30, r14
    1cb6:	ff 09       	sbc	r31, r15
    1cb8:	71 97       	sbiw	r30, 0x11	; 17
    1cba:	08 f0       	brcs	.+2      	; 0x1cbe <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1cbc:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1cbe:	be 01       	movw	r22, r28
    1cc0:	6e 5d       	subi	r22, 0xDE	; 222
    1cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	01 96       	adiw	r24, 0x01	; 1
    1cc8:	0e 94 00 38 	call	0x7000	; 0x7000 <strcat>

	if (lineno == 1) {
    1ccc:	11 30       	cpi	r17, 0x01	; 1
    1cce:	39 f4       	brne	.+14     	; 0x1cde <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	80 2f       	mov	r24, r16
    1cd6:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1cda:	10 e0       	ldi	r17, 0x00	; 0
    1cdc:	12 c0       	rjmp	.+36     	; 0x1d02 <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1cde:	40 ec       	ldi	r20, 0xC0	; 192
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	80 2f       	mov	r24, r16
    1ce4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
    1ce8:	f8 cf       	rjmp	.-16     	; 0x1cda <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1cea:	e1 e0       	ldi	r30, 0x01	; 1
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	ec 0f       	add	r30, r28
    1cf0:	fd 1f       	adc	r31, r29
    1cf2:	e1 0f       	add	r30, r17
    1cf4:	f1 1d       	adc	r31, r1
    1cf6:	40 81       	ld	r20, Z
    1cf8:	60 e4       	ldi	r22, 0x40	; 64
    1cfa:	80 2f       	mov	r24, r16
    1cfc:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    1d00:	1f 5f       	subi	r17, 0xFF	; 255
    1d02:	10 31       	cpi	r17, 0x10	; 16
    1d04:	90 f3       	brcs	.-28     	; 0x1cea <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 0;
    1d06:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    1d0a:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>

}
    1d0e:	e2 96       	adiw	r28, 0x32	; 50
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	ff 90       	pop	r15
    1d1e:	ef 90       	pop	r14
    1d20:	08 95       	ret

00001d22 <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    1d22:	1f 93       	push	r17
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	1f 92       	push	r1
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	18 2f       	mov	r17, r24

	char nullstr[] = "";
    1d30:	19 82       	std	Y+1, r1	; 0x01
	writestr_OLED(displaynumber, nullstr, 1);
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	be 01       	movw	r22, r28
    1d36:	6f 5f       	subi	r22, 0xFF	; 255
    1d38:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3a:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
    1d3e:	42 e0       	ldi	r20, 0x02	; 2
    1d40:	be 01       	movw	r22, r28
    1d42:	6f 5f       	subi	r22, 0xFF	; 255
    1d44:	7f 4f       	sbci	r23, 0xFF	; 255
    1d46:	81 2f       	mov	r24, r17
    1d48:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
	timerOLED = 0;
    1d4c:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    1d50:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>

}
    1d54:	0f 90       	pop	r0
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	1f 91       	pop	r17
    1d5c:	08 95       	ret

00001d5e <read_PNEUSensors>:
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
{
    1d5e:	cf 92       	push	r12
    1d60:	df 92       	push	r13
    1d62:	ef 92       	push	r14
    1d64:	ff 92       	push	r15
    1d66:	0f 93       	push	r16
    1d68:	1f 93       	push	r17
    1d6a:	cf 93       	push	r28
    1d6c:	df 93       	push	r29
    1d6e:	6c 01       	movw	r12, r24
    1d70:	8b 01       	movw	r16, r22
    1d72:	7a 01       	movw	r14, r20
    1d74:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);	// NEEDS ERRORCHECK
    1d76:	69 e0       	ldi	r22, 0x09	; 9
    1d78:	81 e2       	ldi	r24, 0x21	; 33
    1d7a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1d7e:	98 2f       	mov	r25, r24
    1d80:	92 95       	swap	r25
    1d82:	96 95       	lsr	r25
    1d84:	96 95       	lsr	r25
    1d86:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    1d88:	91 30       	cpi	r25, 0x01	; 1
    1d8a:	21 f4       	brne	.+8      	; 0x1d94 <read_PNEUSensors+0x36>
		*shutter = 'c';
    1d8c:	93 e6       	ldi	r25, 0x63	; 99
    1d8e:	f6 01       	movw	r30, r12
    1d90:	90 83       	st	Z, r25
    1d92:	0f c0       	rjmp	.+30     	; 0x1db2 <read_PNEUSensors+0x54>
	} else if (state == 2) {
    1d94:	92 30       	cpi	r25, 0x02	; 2
    1d96:	21 f4       	brne	.+8      	; 0x1da0 <read_PNEUSensors+0x42>
		*shutter = 'o';
    1d98:	9f e6       	ldi	r25, 0x6F	; 111
    1d9a:	f6 01       	movw	r30, r12
    1d9c:	90 83       	st	Z, r25
    1d9e:	09 c0       	rjmp	.+18     	; 0x1db2 <read_PNEUSensors+0x54>
	} else if (state == 3) {
    1da0:	93 30       	cpi	r25, 0x03	; 3
    1da2:	21 f4       	brne	.+8      	; 0x1dac <read_PNEUSensors+0x4e>
		*shutter = 't';
    1da4:	94 e7       	ldi	r25, 0x74	; 116
    1da6:	f6 01       	movw	r30, r12
    1da8:	90 83       	st	Z, r25
    1daa:	03 c0       	rjmp	.+6      	; 0x1db2 <read_PNEUSensors+0x54>
	} else {
		*shutter = 'x';
    1dac:	98 e7       	ldi	r25, 0x78	; 120
    1dae:	f6 01       	movw	r30, r12
    1db0:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1db2:	98 2f       	mov	r25, r24
    1db4:	96 95       	lsr	r25
    1db6:	96 95       	lsr	r25
	state &= 0b00000011;
    1db8:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1dba:	91 30       	cpi	r25, 0x01	; 1
    1dbc:	21 f4       	brne	.+8      	; 0x1dc6 <read_PNEUSensors+0x68>
		*right = 'c';
    1dbe:	93 e6       	ldi	r25, 0x63	; 99
    1dc0:	f7 01       	movw	r30, r14
    1dc2:	90 83       	st	Z, r25
    1dc4:	0f c0       	rjmp	.+30     	; 0x1de4 <read_PNEUSensors+0x86>
	} else if (state == 2) {
    1dc6:	92 30       	cpi	r25, 0x02	; 2
    1dc8:	21 f4       	brne	.+8      	; 0x1dd2 <read_PNEUSensors+0x74>
		*right = 'o';
    1dca:	9f e6       	ldi	r25, 0x6F	; 111
    1dcc:	f7 01       	movw	r30, r14
    1dce:	90 83       	st	Z, r25
    1dd0:	09 c0       	rjmp	.+18     	; 0x1de4 <read_PNEUSensors+0x86>
	} else if (state == 3) {
    1dd2:	93 30       	cpi	r25, 0x03	; 3
    1dd4:	21 f4       	brne	.+8      	; 0x1dde <read_PNEUSensors+0x80>
		*right = 't';
    1dd6:	94 e7       	ldi	r25, 0x74	; 116
    1dd8:	f7 01       	movw	r30, r14
    1dda:	90 83       	st	Z, r25
    1ddc:	03 c0       	rjmp	.+6      	; 0x1de4 <read_PNEUSensors+0x86>
	} else {
		*right = 'x';
    1dde:	98 e7       	ldi	r25, 0x78	; 120
    1de0:	f7 01       	movw	r30, r14
    1de2:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1de4:	98 2f       	mov	r25, r24
    1de6:	92 95       	swap	r25
    1de8:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    1dea:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1dec:	91 30       	cpi	r25, 0x01	; 1
    1dee:	21 f4       	brne	.+8      	; 0x1df8 <read_PNEUSensors+0x9a>
		*left = 'o';
    1df0:	9f e6       	ldi	r25, 0x6F	; 111
    1df2:	f8 01       	movw	r30, r16
    1df4:	90 83       	st	Z, r25
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <read_PNEUSensors+0xb8>
	} else if (state == 2) {
    1df8:	92 30       	cpi	r25, 0x02	; 2
    1dfa:	21 f4       	brne	.+8      	; 0x1e04 <read_PNEUSensors+0xa6>
		*left = 'c';
    1dfc:	93 e6       	ldi	r25, 0x63	; 99
    1dfe:	f8 01       	movw	r30, r16
    1e00:	90 83       	st	Z, r25
    1e02:	09 c0       	rjmp	.+18     	; 0x1e16 <read_PNEUSensors+0xb8>
	} else if (state == 3) {
    1e04:	93 30       	cpi	r25, 0x03	; 3
    1e06:	21 f4       	brne	.+8      	; 0x1e10 <read_PNEUSensors+0xb2>
		*left = 't';
    1e08:	94 e7       	ldi	r25, 0x74	; 116
    1e0a:	f8 01       	movw	r30, r16
    1e0c:	90 83       	st	Z, r25
    1e0e:	03 c0       	rjmp	.+6      	; 0x1e16 <read_PNEUSensors+0xb8>
	} else {
		*left = 'x';
    1e10:	98 e7       	ldi	r25, 0x78	; 120
    1e12:	f8 01       	movw	r30, r16
    1e14:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1e16:	81 ff       	sbrs	r24, 1
    1e18:	03 c0       	rjmp	.+6      	; 0x1e20 <read_PNEUSensors+0xc2>
		*air = '0';
    1e1a:	80 e3       	ldi	r24, 0x30	; 48
    1e1c:	88 83       	st	Y, r24
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <read_PNEUSensors+0xc6>
	} else {
		*air = '1';
    1e20:	81 e3       	ldi	r24, 0x31	; 49
    1e22:	88 83       	st	Y, r24
	}
}
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	1f 91       	pop	r17
    1e2a:	0f 91       	pop	r16
    1e2c:	ff 90       	pop	r15
    1e2e:	ef 90       	pop	r14
    1e30:	df 90       	pop	r13
    1e32:	cf 90       	pop	r12
    1e34:	08 95       	ret

00001e36 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	d8 2f       	mov	r29, r24
    1e3c:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    1e3e:	69 e0       	ldi	r22, 0x09	; 9
    1e40:	84 e2       	ldi	r24, 0x24	; 36
    1e42:	0e 94 1a 0b 	call	0x1634	; 0x1634 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    1e46:	8d 2b       	or	r24, r29
    1e48:	48 2f       	mov	r20, r24
    1e4a:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1e4c:	6a e0       	ldi	r22, 0x0A	; 10
    1e4e:	84 e2       	ldi	r24, 0x24	; 36
    1e50:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	08 95       	ret

00001e5a <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(uint8_t cstack)
{
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	6a 97       	sbiw	r28, 0x1a	; 26
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    1e68:	99 e0       	ldi	r25, 0x09	; 9
    1e6a:	e8 eb       	ldi	r30, 0xB8	; 184
    1e6c:	f4 eb       	ldi	r31, 0xB4	; 180
    1e6e:	de 01       	movw	r26, r28
    1e70:	11 96       	adiw	r26, 0x01	; 1
    1e72:	01 90       	ld	r0, Z+
    1e74:	0d 92       	st	X+, r0
    1e76:	9a 95       	dec	r25
    1e78:	e1 f7       	brne	.-8      	; 0x1e72 <close_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1e7a:	24 e3       	ldi	r18, 0x34	; 52
    1e7c:	82 9f       	mul	r24, r18
    1e7e:	c0 01       	movw	r24, r0
    1e80:	11 24       	eor	r1, r1
    1e82:	fc 01       	movw	r30, r24
    1e84:	e1 5f       	subi	r30, 0xF1	; 241
    1e86:	f7 4d       	sbci	r31, 0xD7	; 215
    1e88:	81 81       	ldd	r24, Z+1	; 0x01
    1e8a:	8c 36       	cpi	r24, 0x6C	; 108
    1e8c:	31 f1       	breq	.+76     	; 0x1eda <close_PNEU+0x80>
    1e8e:	18 f4       	brcc	.+6      	; 0x1e96 <close_PNEU+0x3c>
    1e90:	82 36       	cpi	r24, 0x62	; 98
    1e92:	39 f0       	breq	.+14     	; 0x1ea2 <close_PNEU+0x48>
    1e94:	6a c0       	rjmp	.+212    	; 0x1f6a <close_PNEU+0x110>
    1e96:	82 37       	cpi	r24, 0x72	; 114
    1e98:	c1 f1       	breq	.+112    	; 0x1f0a <close_PNEU+0xb0>
    1e9a:	83 37       	cpi	r24, 0x73	; 115
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <close_PNEU+0x46>
    1e9e:	4d c0       	rjmp	.+154    	; 0x1f3a <close_PNEU+0xe0>
    1ea0:	64 c0       	rjmp	.+200    	; 0x1f6a <close_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1ea2:	6a ee       	ldi	r22, 0xEA	; 234
    1ea4:	84 e4       	ldi	r24, 0x44	; 68
    1ea6:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1eaa:	66 ee       	ldi	r22, 0xE6	; 230
    1eac:	88 e8       	ldi	r24, 0x88	; 136
    1eae:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1eb2:	8e e7       	ldi	r24, 0x7E	; 126
    1eb4:	94 eb       	ldi	r25, 0xB4	; 180
    1eb6:	9f 93       	push	r25
    1eb8:	8f 93       	push	r24
    1eba:	ce 01       	movw	r24, r28
    1ebc:	01 96       	adiw	r24, 0x01	; 1
    1ebe:	9f 93       	push	r25
    1ec0:	8f 93       	push	r24
    1ec2:	09 96       	adiw	r24, 0x09	; 9
    1ec4:	9f 93       	push	r25
    1ec6:	8f 93       	push	r24
    1ec8:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			break;
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	59 c0       	rjmp	.+178    	; 0x1f8c <close_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1eda:	6a ee       	ldi	r22, 0xEA	; 234
    1edc:	84 e4       	ldi	r24, 0x44	; 68
    1ede:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1ee2:	83 e8       	ldi	r24, 0x83	; 131
    1ee4:	94 eb       	ldi	r25, 0xB4	; 180
    1ee6:	9f 93       	push	r25
    1ee8:	8f 93       	push	r24
    1eea:	ce 01       	movw	r24, r28
    1eec:	01 96       	adiw	r24, 0x01	; 1
    1eee:	9f 93       	push	r25
    1ef0:	8f 93       	push	r24
    1ef2:	09 96       	adiw	r24, 0x09	; 9
    1ef4:	9f 93       	push	r25
    1ef6:	8f 93       	push	r24
    1ef8:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			break;
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	41 c0       	rjmp	.+130    	; 0x1f8c <close_PNEU+0x132>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1f0a:	66 ee       	ldi	r22, 0xE6	; 230
    1f0c:	88 e8       	ldi	r24, 0x88	; 136
    1f0e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1f12:	88 e8       	ldi	r24, 0x88	; 136
    1f14:	94 eb       	ldi	r25, 0xB4	; 180
    1f16:	9f 93       	push	r25
    1f18:	8f 93       	push	r24
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	01 96       	adiw	r24, 0x01	; 1
    1f1e:	9f 93       	push	r25
    1f20:	8f 93       	push	r24
    1f22:	09 96       	adiw	r24, 0x09	; 9
    1f24:	9f 93       	push	r25
    1f26:	8f 93       	push	r24
    1f28:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			break;
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	29 c0       	rjmp	.+82     	; 0x1f8c <close_PNEU+0x132>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1f3a:	6c ee       	ldi	r22, 0xEC	; 236
    1f3c:	82 e2       	ldi	r24, 0x22	; 34
    1f3e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1f42:	8e e8       	ldi	r24, 0x8E	; 142
    1f44:	94 eb       	ldi	r25, 0xB4	; 180
    1f46:	9f 93       	push	r25
    1f48:	8f 93       	push	r24
    1f4a:	ce 01       	movw	r24, r28
    1f4c:	01 96       	adiw	r24, 0x01	; 1
    1f4e:	9f 93       	push	r25
    1f50:	8f 93       	push	r24
    1f52:	09 96       	adiw	r24, 0x09	; 9
    1f54:	9f 93       	push	r25
    1f56:	8f 93       	push	r24
    1f58:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			break;
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	11 c0       	rjmp	.+34     	; 0x1f8c <close_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "close_PNEU bad object");
    1f6a:	66 e9       	ldi	r22, 0x96	; 150
    1f6c:	74 eb       	ldi	r23, 0xB4	; 180
    1f6e:	85 ef       	ldi	r24, 0xF5	; 245
    1f70:	91 e0       	ldi	r25, 0x01	; 1
    1f72:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			strcpy(outbuf, "close what?");
    1f76:	8c e0       	ldi	r24, 0x0C	; 12
    1f78:	ec ea       	ldi	r30, 0xAC	; 172
    1f7a:	f4 eb       	ldi	r31, 0xB4	; 180
    1f7c:	de 01       	movw	r26, r28
    1f7e:	1a 96       	adiw	r26, 0x0a	; 10
    1f80:	01 90       	ld	r0, Z+
    1f82:	0d 92       	st	X+, r0
    1f84:	8a 95       	dec	r24
    1f86:	e1 f7       	brne	.-8      	; 0x1f80 <close_PNEU+0x126>
			return(ERROR);
    1f88:	83 e6       	ldi	r24, 0x63	; 99
    1f8a:	0b c0       	rjmp	.+22     	; 0x1fa2 <close_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1f92:	41 e0       	ldi	r20, 0x01	; 1
    1f94:	be 01       	movw	r22, r28
    1f96:	66 5f       	subi	r22, 0xF6	; 246
    1f98:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
	return(NOERROR);
    1fa0:	80 e0       	ldi	r24, 0x00	; 0

}
    1fa2:	6a 96       	adiw	r28, 0x1a	; 26
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	df 91       	pop	r29
    1faa:	cf 91       	pop	r28
    1fac:	08 95       	ret

00001fae <init_PNEU>:
	is assumed to be in input mode.
------------------------------------------------------------------------------*/
uint8_t init_PNEU(void)
{

	if (write_MCP23008(HIGHCURRENT, IODIR, 0x00) == ERROR) {
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	60 e0       	ldi	r22, 0x00	; 0
    1fb2:	84 e2       	ldi	r24, 0x24	; 36
    1fb4:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
    1fb8:	83 36       	cpi	r24, 0x63	; 99
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <init_PNEU+0x10>
    1fbc:	55 c0       	rjmp	.+170    	; 0x2068 <init_PNEU+0xba>
		return(ERROR);
	}
	if (write_MCP23008(HIGHCURRENT, OLAT, 0x00) == ERROR) {
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	6a e0       	ldi	r22, 0x0A	; 10
    1fc2:	84 e2       	ldi	r24, 0x24	; 36
    1fc4:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
    1fc8:	83 36       	cpi	r24, 0x63	; 99
    1fca:	09 f4       	brne	.+2      	; 0x1fce <init_PNEU+0x20>
    1fcc:	4d c0       	rjmp	.+154    	; 0x2068 <init_PNEU+0xba>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IODIR, 0xFE) == ERROR) {	// Inputs
    1fce:	4e ef       	ldi	r20, 0xFE	; 254
    1fd0:	60 e0       	ldi	r22, 0x00	; 0
    1fd2:	81 e2       	ldi	r24, 0x21	; 33
    1fd4:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
    1fd8:	83 36       	cpi	r24, 0x63	; 99
    1fda:	09 f4       	brne	.+2      	; 0x1fde <init_PNEU+0x30>
    1fdc:	45 c0       	rjmp	.+138    	; 0x2068 <init_PNEU+0xba>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IPOL, 0x00) == ERROR) {
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	61 e0       	ldi	r22, 0x01	; 1
    1fe2:	81 e2       	ldi	r24, 0x21	; 33
    1fe4:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
    1fe8:	83 36       	cpi	r24, 0x63	; 99
    1fea:	f1 f1       	breq	.+124    	; 0x2068 <init_PNEU+0xba>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100) == ERROR) {
    1fec:	4c ef       	ldi	r20, 0xFC	; 252
    1fee:	62 e0       	ldi	r22, 0x02	; 2
    1ff0:	81 e2       	ldi	r24, 0x21	; 33
    1ff2:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
    1ff6:	83 36       	cpi	r24, 0x63	; 99
    1ff8:	b9 f1       	breq	.+110    	; 0x2068 <init_PNEU+0xba>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, INTCON, 0x00) == ERROR) {
    1ffa:	40 e0       	ldi	r20, 0x00	; 0
    1ffc:	64 e0       	ldi	r22, 0x04	; 4
    1ffe:	81 e2       	ldi	r24, 0x21	; 33
    2000:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
    2004:	83 36       	cpi	r24, 0x63	; 99
    2006:	81 f1       	breq	.+96     	; 0x2068 <init_PNEU+0xba>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IOCON, 0x20) == ERROR) { // Don't increment addr
    2008:	40 e2       	ldi	r20, 0x20	; 32
    200a:	65 e0       	ldi	r22, 0x05	; 5
    200c:	81 e2       	ldi	r24, 0x21	; 33
    200e:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
    2012:	83 36       	cpi	r24, 0x63	; 99
    2014:	49 f1       	breq	.+82     	; 0x2068 <init_PNEU+0xba>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPPU, 0x7F) == ERROR) { // Pullups (not really needed)
    2016:	4f e7       	ldi	r20, 0x7F	; 127
    2018:	66 e0       	ldi	r22, 0x06	; 6
    201a:	81 e2       	ldi	r24, 0x21	; 33
    201c:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
    2020:	83 36       	cpi	r24, 0x63	; 99
    2022:	11 f1       	breq	.+68     	; 0x2068 <init_PNEU+0xba>
		return(ERROR);
	}

	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    2024:	89 e0       	ldi	r24, 0x09	; 9
    2026:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>

	// Avoid clanking at startup
	write_MCP23008(HIGHCURRENT, OLAT, 0xEE);	// Open all pneumatic valves
    202a:	4e ee       	ldi	r20, 0xEE	; 238
    202c:	6a e0       	ldi	r22, 0x0A	; 10
    202e:	84 e2       	ldi	r24, 0x24	; 36
    2030:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
    2034:	2f e7       	ldi	r18, 0x7F	; 127
    2036:	84 e8       	ldi	r24, 0x84	; 132
    2038:	9e e1       	ldi	r25, 0x1E	; 30
    203a:	21 50       	subi	r18, 0x01	; 1
    203c:	80 40       	sbci	r24, 0x00	; 0
    203e:	90 40       	sbci	r25, 0x00	; 0
    2040:	e1 f7       	brne	.-8      	; 0x203a <init_PNEU+0x8c>
    2042:	00 c0       	rjmp	.+0      	; 0x2044 <init_PNEU+0x96>
    2044:	00 00       	nop
	_delay_ms(1000);								// Wait to fill
	set_PNEUVALVES(LEFTBM, LEFTCLOSE);			// Close everything
    2046:	6a ee       	ldi	r22, 0xEA	; 234
    2048:	84 e4       	ldi	r24, 0x44	; 68
    204a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
	set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    204e:	66 ee       	ldi	r22, 0xE6	; 230
    2050:	88 e8       	ldi	r24, 0x88	; 136
    2052:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
	set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    2056:	6c ee       	ldi	r22, 0xEC	; 236
    2058:	82 e2       	ldi	r24, 0x22	; 34
    205a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
	read_MCP23008(PNEUSENSORS, GPIO);
    205e:	69 e0       	ldi	r22, 0x09	; 9
    2060:	81 e2       	ldi	r24, 0x21	; 33
    2062:	0e 94 1a 0b 	call	0x1634	; 0x1634 <read_MCP23008>

	return(NOERROR);
    2066:	80 e0       	ldi	r24, 0x00	; 0

}
    2068:	08 95       	ret

0000206a <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(uint8_t cstack)
{
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	69 97       	sbiw	r28, 0x19	; 25
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	de bf       	out	0x3e, r29	; 62

	const char dformat_OPE[] = "Open %s";
    2078:	98 e0       	ldi	r25, 0x08	; 8
    207a:	e1 ee       	ldi	r30, 0xE1	; 225
    207c:	f4 eb       	ldi	r31, 0xB4	; 180
    207e:	de 01       	movw	r26, r28
    2080:	11 96       	adiw	r26, 0x01	; 1
    2082:	01 90       	ld	r0, Z+
    2084:	0d 92       	st	X+, r0
    2086:	9a 95       	dec	r25
    2088:	e1 f7       	brne	.-8      	; 0x2082 <open_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    208a:	24 e3       	ldi	r18, 0x34	; 52
    208c:	82 9f       	mul	r24, r18
    208e:	c0 01       	movw	r24, r0
    2090:	11 24       	eor	r1, r1
    2092:	fc 01       	movw	r30, r24
    2094:	e1 5f       	subi	r30, 0xF1	; 241
    2096:	f7 4d       	sbci	r31, 0xD7	; 215
    2098:	81 81       	ldd	r24, Z+1	; 0x01
    209a:	8c 36       	cpi	r24, 0x6C	; 108
    209c:	31 f1       	breq	.+76     	; 0x20ea <open_PNEU+0x80>
    209e:	18 f4       	brcc	.+6      	; 0x20a6 <open_PNEU+0x3c>
    20a0:	82 36       	cpi	r24, 0x62	; 98
    20a2:	39 f0       	breq	.+14     	; 0x20b2 <open_PNEU+0x48>
    20a4:	6a c0       	rjmp	.+212    	; 0x217a <open_PNEU+0x110>
    20a6:	82 37       	cpi	r24, 0x72	; 114
    20a8:	c1 f1       	breq	.+112    	; 0x211a <open_PNEU+0xb0>
    20aa:	83 37       	cpi	r24, 0x73	; 115
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <open_PNEU+0x46>
    20ae:	4d c0       	rjmp	.+154    	; 0x214a <open_PNEU+0xe0>
    20b0:	64 c0       	rjmp	.+200    	; 0x217a <open_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    20b2:	6e ea       	ldi	r22, 0xAE	; 174
    20b4:	84 e4       	ldi	r24, 0x44	; 68
    20b6:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    20ba:	6e e6       	ldi	r22, 0x6E	; 110
    20bc:	88 e8       	ldi	r24, 0x88	; 136
    20be:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    20c2:	8e e7       	ldi	r24, 0x7E	; 126
    20c4:	94 eb       	ldi	r25, 0xB4	; 180
    20c6:	9f 93       	push	r25
    20c8:	8f 93       	push	r24
    20ca:	ce 01       	movw	r24, r28
    20cc:	01 96       	adiw	r24, 0x01	; 1
    20ce:	9f 93       	push	r25
    20d0:	8f 93       	push	r24
    20d2:	08 96       	adiw	r24, 0x08	; 8
    20d4:	9f 93       	push	r25
    20d6:	8f 93       	push	r24
    20d8:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			break;
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	59 c0       	rjmp	.+178    	; 0x219c <open_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    20ea:	6e ea       	ldi	r22, 0xAE	; 174
    20ec:	84 e4       	ldi	r24, 0x44	; 68
    20ee:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    20f2:	83 e8       	ldi	r24, 0x83	; 131
    20f4:	94 eb       	ldi	r25, 0xB4	; 180
    20f6:	9f 93       	push	r25
    20f8:	8f 93       	push	r24
    20fa:	ce 01       	movw	r24, r28
    20fc:	01 96       	adiw	r24, 0x01	; 1
    20fe:	9f 93       	push	r25
    2100:	8f 93       	push	r24
    2102:	08 96       	adiw	r24, 0x08	; 8
    2104:	9f 93       	push	r25
    2106:	8f 93       	push	r24
    2108:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			break;
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	41 c0       	rjmp	.+130    	; 0x219c <open_PNEU+0x132>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    211a:	6e e6       	ldi	r22, 0x6E	; 110
    211c:	88 e8       	ldi	r24, 0x88	; 136
    211e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    2122:	88 e8       	ldi	r24, 0x88	; 136
    2124:	94 eb       	ldi	r25, 0xB4	; 180
    2126:	9f 93       	push	r25
    2128:	8f 93       	push	r24
    212a:	ce 01       	movw	r24, r28
    212c:	01 96       	adiw	r24, 0x01	; 1
    212e:	9f 93       	push	r25
    2130:	8f 93       	push	r24
    2132:	08 96       	adiw	r24, 0x08	; 8
    2134:	9f 93       	push	r25
    2136:	8f 93       	push	r24
    2138:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			break;
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	29 c0       	rjmp	.+82     	; 0x219c <open_PNEU+0x132>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    214a:	6e ec       	ldi	r22, 0xCE	; 206
    214c:	82 e2       	ldi	r24, 0x22	; 34
    214e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    2152:	8e e8       	ldi	r24, 0x8E	; 142
    2154:	94 eb       	ldi	r25, 0xB4	; 180
    2156:	9f 93       	push	r25
    2158:	8f 93       	push	r24
    215a:	ce 01       	movw	r24, r28
    215c:	01 96       	adiw	r24, 0x01	; 1
    215e:	9f 93       	push	r25
    2160:	8f 93       	push	r24
    2162:	08 96       	adiw	r24, 0x08	; 8
    2164:	9f 93       	push	r25
    2166:	8f 93       	push	r24
    2168:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			break;
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	11 c0       	rjmp	.+34     	; 0x219c <open_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "open_PNEU bad object");
    217a:	61 ec       	ldi	r22, 0xC1	; 193
    217c:	74 eb       	ldi	r23, 0xB4	; 180
    217e:	85 ef       	ldi	r24, 0xF5	; 245
    2180:	91 e0       	ldi	r25, 0x01	; 1
    2182:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			strcpy(outbuf, "open what?");
    2186:	8b e0       	ldi	r24, 0x0B	; 11
    2188:	e6 ed       	ldi	r30, 0xD6	; 214
    218a:	f4 eb       	ldi	r31, 0xB4	; 180
    218c:	de 01       	movw	r26, r28
    218e:	19 96       	adiw	r26, 0x09	; 9
    2190:	01 90       	ld	r0, Z+
    2192:	0d 92       	st	X+, r0
    2194:	8a 95       	dec	r24
    2196:	e1 f7       	brne	.-8      	; 0x2190 <open_PNEU+0x126>
			return(ERROR);
    2198:	83 e6       	ldi	r24, 0x63	; 99
    219a:	0b c0       	rjmp	.+22     	; 0x21b2 <open_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    21a2:	41 e0       	ldi	r20, 0x01	; 1
    21a4:	be 01       	movw	r22, r28
    21a6:	67 5f       	subi	r22, 0xF7	; 247
    21a8:	7f 4f       	sbci	r23, 0xFF	; 255
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
	return(NOERROR);
    21b0:	80 e0       	ldi	r24, 0x00	; 0

}
    21b2:	69 96       	adiw	r28, 0x19	; 25
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	08 95       	ret

000021be <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    21be:	1f 92       	push	r1
    21c0:	0f 92       	push	r0
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	0f 92       	push	r0
    21c6:	11 24       	eor	r1, r1
    21c8:	2f 93       	push	r18
    21ca:	3f 93       	push	r19
    21cc:	4f 93       	push	r20
    21ce:	5f 93       	push	r21
    21d0:	6f 93       	push	r22
    21d2:	7f 93       	push	r23
    21d4:	8f 93       	push	r24
    21d6:	9f 93       	push	r25
    21d8:	af 93       	push	r26
    21da:	bf 93       	push	r27
    21dc:	ef 93       	push	r30
    21de:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// MCP23008 interrupt
    21e0:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    21e4:	88 23       	and	r24, r24
    21e6:	4c f4       	brge	.+18     	; 0x21fa <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    21e8:	80 e8       	ldi	r24, 0x80	; 128
    21ea:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    21ee:	68 e0       	ldi	r22, 0x08	; 8
    21f0:	81 e2       	ldi	r24, 0x21	; 33
    21f2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <read_MCP23008>
    21f6:	80 93 1a 2a 	sts	0x2A1A, r24	; 0x802a1a <pneuState>
	}

}
    21fa:	ff 91       	pop	r31
    21fc:	ef 91       	pop	r30
    21fe:	bf 91       	pop	r27
    2200:	af 91       	pop	r26
    2202:	9f 91       	pop	r25
    2204:	8f 91       	pop	r24
    2206:	7f 91       	pop	r23
    2208:	6f 91       	pop	r22
    220a:	5f 91       	pop	r21
    220c:	4f 91       	pop	r20
    220e:	3f 91       	pop	r19
    2210:	2f 91       	pop	r18
    2212:	0f 90       	pop	r0
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	0f 90       	pop	r0
    2218:	1f 90       	pop	r1
    221a:	18 95       	reti

0000221c <init_PORTS>:
void init_PORTS(void)
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTB.DIRSET = PIN2_bm;		// Beeper
    221c:	e0 e2       	ldi	r30, 0x20	; 32
    221e:	f4 e0       	ldi	r31, 0x04	; 4
    2220:	94 e0       	ldi	r25, 0x04	; 4
    2222:	91 83       	std	Z+1, r25	; 0x01
	PORTB.DIRSET = PIN3_bm;		// Fan
    2224:	88 e0       	ldi	r24, 0x08	; 8
    2226:	81 83       	std	Z+1, r24	; 0x01
	PORTF.DIRCLR = PIN2_bm;		// specID jumper
    2228:	e0 ea       	ldi	r30, 0xA0	; 160
    222a:	f4 e0       	ldi	r31, 0x04	; 4
    222c:	92 83       	std	Z+2, r25	; 0x02
	PORTF.DIRSET = PIN5_bm;		// On-board LED
    222e:	90 e2       	ldi	r25, 0x20	; 32
    2230:	91 83       	std	Z+1, r25	; 0x01
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton
    2232:	9b e0       	ldi	r25, 0x0B	; 11
    2234:	96 8b       	std	Z+22, r25	; 0x16
	PORTC.OUTCLR = PIN3_bm;		// Reset the XPort
    2236:	e0 e4       	ldi	r30, 0x40	; 64
    2238:	f4 e0       	ldi	r31, 0x04	; 4
    223a:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;		// Set XPort reset pin as output
    223c:	81 83       	std	Z+1, r24	; 0x01
    223e:	a7 ea       	ldi	r26, 0xA7	; 167
    2240:	b1 e6       	ldi	r27, 0x61	; 97
    2242:	11 97       	sbiw	r26, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <init_PORTS+0x26>
    2246:	00 c0       	rjmp	.+0      	; 0x2248 <init_PORTS+0x2c>
    2248:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;		// Enable the XPort
    224a:	85 83       	std	Z+5, r24	; 0x05
    224c:	08 95       	ret

0000224e <report>:

	Returns:
		ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    224e:	2f 92       	push	r2
    2250:	3f 92       	push	r3
    2252:	4f 92       	push	r4
    2254:	5f 92       	push	r5
    2256:	6f 92       	push	r6
    2258:	7f 92       	push	r7
    225a:	8f 92       	push	r8
    225c:	9f 92       	push	r9
    225e:	af 92       	push	r10
    2260:	bf 92       	push	r11
    2262:	cf 92       	push	r12
    2264:	df 92       	push	r13
    2266:	ef 92       	push	r14
    2268:	ff 92       	push	r15
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	c1 51       	subi	r28, 0x11	; 17
    2278:	d4 40       	sbci	r29, 0x04	; 4
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE], version[11];
	char currenttime[20], lastsettime[20], boottime[20], encsavetime[20];
	char shutter, left, right, air, mlimit, mdir;
	const char format_ENV[] = "ENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
    227e:	95 e4       	ldi	r25, 0x45	; 69
    2280:	e4 e7       	ldi	r30, 0x74	; 116
    2282:	f6 eb       	ldi	r31, 0xB6	; 182
    2284:	de 01       	movw	r26, r28
    2286:	a2 5a       	subi	r26, 0xA2	; 162
    2288:	be 4f       	sbci	r27, 0xFE	; 254
    228a:	01 90       	ld	r0, Z+
    228c:	0d 92       	st	X+, r0
    228e:	9a 95       	dec	r25
    2290:	e1 f7       	brne	.-8      	; 0x228a <report+0x3c>
	const char format_LN2[] = "LN2,%s,%s";
    2292:	9a e0       	ldi	r25, 0x0A	; 10
    2294:	e9 eb       	ldi	r30, 0xB9	; 185
    2296:	f6 eb       	ldi	r31, 0xB6	; 182
    2298:	de 01       	movw	r26, r28
    229a:	ad 55       	subi	r26, 0x5D	; 93
    229c:	be 4f       	sbci	r27, 0xFE	; 254
    229e:	01 90       	ld	r0, Z+
    22a0:	0d 92       	st	X+, r0
    22a2:	9a 95       	dec	r25
    22a4:	e1 f7       	brne	.-8      	; 0x229e <report+0x50>
	const char format_MTR[] = "MTR,%s,%c,%ld,um,%ld,um/s,%d,mA,%c,dir,%c,lim,%s";
    22a6:	91 e3       	ldi	r25, 0x31	; 49
    22a8:	e3 ec       	ldi	r30, 0xC3	; 195
    22aa:	f6 eb       	ldi	r31, 0xB6	; 182
    22ac:	de 01       	movw	r26, r28
    22ae:	a3 55       	subi	r26, 0x53	; 83
    22b0:	be 4f       	sbci	r27, 0xFE	; 254
    22b2:	01 90       	ld	r0, Z+
    22b4:	0d 92       	st	X+, r0
    22b6:	9a 95       	dec	r25
    22b8:	e1 f7       	brne	.-8      	; 0x22b2 <report+0x64>
	const char format_MT0[] = "MET,%s,%c,%3.1f,V,%3.1f,C,%s,encSaveTime,%s";	// Motor, Voltage, Save-time
    22ba:	9c e2       	ldi	r25, 0x2C	; 44
    22bc:	e4 ef       	ldi	r30, 0xF4	; 244
    22be:	f6 eb       	ldi	r31, 0xB6	; 182
    22c0:	de 01       	movw	r26, r28
    22c2:	a2 52       	subi	r26, 0x22	; 34
    22c4:	be 4f       	sbci	r27, 0xFE	; 254
    22c6:	01 90       	ld	r0, Z+
    22c8:	0d 92       	st	X+, r0
    22ca:	9a 95       	dec	r25
    22cc:	e1 f7       	brne	.-8      	; 0x22c6 <report+0x78>
	const char format_MT1[] = "PID,%s,%c,%.2f,P,%.3f,I,%.2f,D,%ld,maxInt,%s";
    22ce:	9d e2       	ldi	r25, 0x2D	; 45
    22d0:	e0 e2       	ldi	r30, 0x20	; 32
    22d2:	f7 eb       	ldi	r31, 0xB7	; 183
    22d4:	de 01       	movw	r26, r28
    22d6:	a6 5f       	subi	r26, 0xF6	; 246
    22d8:	bd 4f       	sbci	r27, 0xFD	; 253
    22da:	01 90       	ld	r0, Z+
    22dc:	0d 92       	st	X+, r0
    22de:	9a 95       	dec	r25
    22e0:	e1 f7       	brne	.-8      	; 0x22da <report+0x8c>
	const char format_MT2[] = "DMM,%s,%c,%ld,dead,%ld,minP,%ld,maxP,%ld,qpps,%s";	// Dead, min, max, qpps
    22e2:	91 e3       	ldi	r25, 0x31	; 49
    22e4:	ed e4       	ldi	r30, 0x4D	; 77
    22e6:	f7 eb       	ldi	r31, 0xB7	; 183
    22e8:	de 01       	movw	r26, r28
    22ea:	a9 5c       	subi	r26, 0xC9	; 201
    22ec:	bd 4f       	sbci	r27, 0xFD	; 253
    22ee:	01 90       	ld	r0, Z+
    22f0:	0d 92       	st	X+, r0
    22f2:	9a 95       	dec	r25
    22f4:	e1 f7       	brne	.-8      	; 0x22ee <report+0xa0>
	const char format_MT3[] = "MIL,%s,%c,%ld,mA,0x%02x,S4,%s";	// Motor, current, limit function
    22f6:	9e e1       	ldi	r25, 0x1E	; 30
    22f8:	ee e7       	ldi	r30, 0x7E	; 126
    22fa:	f7 eb       	ldi	r31, 0xB7	; 183
    22fc:	de 01       	movw	r26, r28
    22fe:	a8 59       	subi	r26, 0x98	; 152
    2300:	bd 4f       	sbci	r27, 0xFD	; 253
    2302:	01 90       	ld	r0, Z+
    2304:	0d 92       	st	X+, r0
    2306:	9a 95       	dec	r25
    2308:	e1 f7       	brne	.-8      	; 0x2302 <report+0xb4>
	const char format_ORI[] = "ORI,%s,%3.1f,%3.1f,%3.1f,%s";	// Orientation
    230a:	9c e1       	ldi	r25, 0x1C	; 28
    230c:	ec e9       	ldi	r30, 0x9C	; 156
    230e:	f7 eb       	ldi	r31, 0xB7	; 183
    2310:	de 01       	movw	r26, r28
    2312:	aa 57       	subi	r26, 0x7A	; 122
    2314:	bd 4f       	sbci	r27, 0xFD	; 253
    2316:	01 90       	ld	r0, Z+
    2318:	0d 92       	st	X+, r0
    231a:	9a 95       	dec	r25
    231c:	e1 f7       	brne	.-8      	; 0x2316 <report+0xc8>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";				// For display
    231e:	92 e1       	ldi	r25, 0x12	; 18
    2320:	e8 eb       	ldi	r30, 0xB8	; 184
    2322:	f7 eb       	ldi	r31, 0xB7	; 183
    2324:	de 01       	movw	r26, r28
    2326:	ae 55       	subi	r26, 0x5E	; 94
    2328:	bd 4f       	sbci	r27, 0xFD	; 253
    232a:	01 90       	ld	r0, Z+
    232c:	0d 92       	st	X+, r0
    232e:	9a 95       	dec	r25
    2330:	e1 f7       	brne	.-8      	; 0x232a <report+0xdc>
	const char format_PNU[] = "PNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";	// Pneumatics
    2332:	9d e2       	ldi	r25, 0x2D	; 45
    2334:	ea ec       	ldi	r30, 0xCA	; 202
    2336:	f7 eb       	ldi	r31, 0xB7	; 183
    2338:	de 01       	movw	r26, r28
    233a:	ac 54       	subi	r26, 0x4C	; 76
    233c:	bd 4f       	sbci	r27, 0xFD	; 253
    233e:	01 90       	ld	r0, Z+
    2340:	0d 92       	st	X+, r0
    2342:	9a 95       	dec	r25
    2344:	e1 f7       	brne	.-8      	; 0x233e <report+0xf0>
	const char dformat_PN1[] = "Left:%c   Right:%c";
    2346:	93 e1       	ldi	r25, 0x13	; 19
    2348:	e7 ef       	ldi	r30, 0xF7	; 247
    234a:	f7 eb       	ldi	r31, 0xB7	; 183
    234c:	de 01       	movw	r26, r28
    234e:	af 51       	subi	r26, 0x1F	; 31
    2350:	bd 4f       	sbci	r27, 0xFD	; 253
    2352:	01 90       	ld	r0, Z+
    2354:	0d 92       	st	X+, r0
    2356:	9a 95       	dec	r25
    2358:	e1 f7       	brne	.-8      	; 0x2352 <report+0x104>
	const char dformat_PN2[] = "Shutter:%c  Air:%c";
    235a:	93 e1       	ldi	r25, 0x13	; 19
    235c:	ea e0       	ldi	r30, 0x0A	; 10
    235e:	f8 eb       	ldi	r31, 0xB8	; 184
    2360:	de 01       	movw	r26, r28
    2362:	ac 50       	subi	r26, 0x0C	; 12
    2364:	bd 4f       	sbci	r27, 0xFD	; 253
    2366:	01 90       	ld	r0, Z+
    2368:	0d 92       	st	X+, r0
    236a:	9a 95       	dec	r25
    236c:	e1 f7       	brne	.-8      	; 0x2366 <report+0x118>
	const char format_TIM[] = "TIM,%s,%s,set,%s,boot,%s";	// Time
    236e:	99 e1       	ldi	r25, 0x19	; 25
    2370:	ed e1       	ldi	r30, 0x1D	; 29
    2372:	f8 eb       	ldi	r31, 0xB8	; 184
    2374:	de 01       	movw	r26, r28
    2376:	a9 5f       	subi	r26, 0xF9	; 249
    2378:	bc 4f       	sbci	r27, 0xFC	; 252
    237a:	01 90       	ld	r0, Z+
    237c:	0d 92       	st	X+, r0
    237e:	9a 95       	dec	r25
    2380:	e1 f7       	brne	.-8      	; 0x237a <report+0x12c>
	const char format_VAC[] = "VAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";	// Vacuum
    2382:	95 e2       	ldi	r25, 0x25	; 37
    2384:	e6 e3       	ldi	r30, 0x36	; 54
    2386:	f8 eb       	ldi	r31, 0xB8	; 184
    2388:	de 01       	movw	r26, r28
    238a:	a0 5e       	subi	r26, 0xE0	; 224
    238c:	bc 4f       	sbci	r27, 0xFC	; 252
    238e:	01 90       	ld	r0, Z+
    2390:	0d 92       	st	X+, r0
    2392:	9a 95       	dec	r25
    2394:	e1 f7       	brne	.-8      	; 0x238e <report+0x140>
	const char dformat_VAC[] = "%5.2f  %5.2f";
    2396:	9d e0       	ldi	r25, 0x0D	; 13
    2398:	eb e5       	ldi	r30, 0x5B	; 91
    239a:	f8 eb       	ldi	r31, 0xB8	; 184
    239c:	de 01       	movw	r26, r28
    239e:	ab 5b       	subi	r26, 0xBB	; 187
    23a0:	bc 4f       	sbci	r27, 0xFC	; 252
    23a2:	01 90       	ld	r0, Z+
    23a4:	0d 92       	st	X+, r0
    23a6:	9a 95       	dec	r25
    23a8:	e1 f7       	brne	.-8      	; 0x23a2 <report+0x154>
	const char format_VER[] = "VER,%s,%s,%s";	// Version
    23aa:	9d e0       	ldi	r25, 0x0D	; 13
    23ac:	e8 e6       	ldi	r30, 0x68	; 104
    23ae:	f8 eb       	ldi	r31, 0xB8	; 184
    23b0:	de 01       	movw	r26, r28
    23b2:	ae 5a       	subi	r26, 0xAE	; 174
    23b4:	bc 4f       	sbci	r27, 0xFC	; 252
    23b6:	01 90       	ld	r0, Z+
    23b8:	0d 92       	st	X+, r0
    23ba:	9a 95       	dec	r25
    23bc:	e1 f7       	brne	.-8      	; 0x23b6 <report+0x168>
	uint16_t motorCurrent;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	PID pid;

	switch(pcmd[cstack].cobject) {
    23be:	08 2f       	mov	r16, r24
    23c0:	10 e0       	ldi	r17, 0x00	; 0
    23c2:	84 e3       	ldi	r24, 0x34	; 52
    23c4:	80 9f       	mul	r24, r16
    23c6:	f0 01       	movw	r30, r0
    23c8:	81 9f       	mul	r24, r17
    23ca:	f0 0d       	add	r31, r0
    23cc:	11 24       	eor	r1, r1
    23ce:	e1 5f       	subi	r30, 0xF1	; 241
    23d0:	f7 4d       	sbci	r31, 0xD7	; 215
    23d2:	e1 81       	ldd	r30, Z+1	; 0x01
    23d4:	8e 2f       	mov	r24, r30
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	fc 01       	movw	r30, r24
    23da:	e1 54       	subi	r30, 0x41	; 65
    23dc:	f1 09       	sbc	r31, r1
    23de:	e6 33       	cpi	r30, 0x36	; 54
    23e0:	f1 05       	cpc	r31, r1
    23e2:	08 f0       	brcs	.+2      	; 0x23e6 <report+0x198>
    23e4:	64 c7       	rjmp	.+3784   	; 0x32ae <report+0x1060>
    23e6:	e3 58       	subi	r30, 0x83	; 131
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	0c 94 51 36 	jmp	0x6ca2	; 0x6ca2 <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    23ee:	ce 01       	movw	r24, r28
    23f0:	86 5f       	subi	r24, 0xF6	; 246
    23f2:	9e 4f       	sbci	r25, 0xFE	; 254
    23f4:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
			controller = pcmd[cstack].cobject + 63;
    23f8:	84 e3       	ldi	r24, 0x34	; 52
    23fa:	80 9f       	mul	r24, r16
    23fc:	f0 01       	movw	r30, r0
    23fe:	81 9f       	mul	r24, r17
    2400:	f0 0d       	add	r31, r0
    2402:	11 24       	eor	r1, r1
    2404:	e1 5f       	subi	r30, 0xF1	; 241
    2406:	f7 4d       	sbci	r31, 0xD7	; 215
    2408:	d1 80       	ldd	r13, Z+1	; 0x01
    240a:	0f 2e       	mov	r0, r31
    240c:	ff e3       	ldi	r31, 0x3F	; 63
    240e:	ef 2e       	mov	r14, r31
    2410:	f0 2d       	mov	r31, r0
    2412:	ed 0c       	add	r14, r13

			if (get_MOTOR_FLOAT(controller, READMAINVOLTAGE, &voltage) == ERROR) {
    2414:	ae 01       	movw	r20, r28
    2416:	4c 52       	subi	r20, 0x2C	; 44
    2418:	5c 4f       	sbci	r21, 0xFC	; 252
    241a:	68 e1       	ldi	r22, 0x18	; 24
    241c:	8e 2d       	mov	r24, r14
    241e:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <get_MOTOR_FLOAT>
    2422:	f8 2e       	mov	r15, r24
    2424:	83 e6       	ldi	r24, 0x63	; 99
    2426:	f8 12       	cpse	r15, r24
    2428:	07 c0       	rjmp	.+14     	; 0x2438 <report+0x1ea>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT volts error");
    242a:	69 ee       	ldi	r22, 0xE9	; 233
    242c:	74 eb       	ldi	r23, 0xB4	; 180
    242e:	86 e3       	ldi	r24, 0x36	; 54
    2430:	91 e0       	ldi	r25, 0x01	; 1
    2432:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    2436:	47 c7       	rjmp	.+3726   	; 0x32c6 <report+0x1078>
			}

			if (get_FRAM_ENCSAVETIME(encsavetime) == ERROR) {
    2438:	ce 01       	movw	r24, r28
    243a:	8a 5b       	subi	r24, 0xBA	; 186
    243c:	9e 4f       	sbci	r25, 0xFE	; 254
    243e:	0e 94 a0 19 	call	0x3340	; 0x3340 <get_FRAM_ENCSAVETIME>
    2442:	f8 2e       	mov	r15, r24
    2444:	93 e6       	ldi	r25, 0x63	; 99
    2446:	89 13       	cpse	r24, r25
    2448:	11 c0       	rjmp	.+34     	; 0x246c <report+0x21e>
				sprintf(outbuf, "report: get_FRAM_ENCSAVEIME error");
    244a:	82 e2       	ldi	r24, 0x22	; 34
    244c:	ed e0       	ldi	r30, 0x0D	; 13
    244e:	f5 eb       	ldi	r31, 0xB5	; 181
    2450:	de 01       	movw	r26, r28
    2452:	11 96       	adiw	r26, 0x01	; 1
    2454:	01 90       	ld	r0, Z+
    2456:	0d 92       	st	X+, r0
    2458:	8a 95       	dec	r24
    245a:	e1 f7       	brne	.-8      	; 0x2454 <report+0x206>
				printError(ERR_MTR, outbuf);
    245c:	be 01       	movw	r22, r28
    245e:	6f 5f       	subi	r22, 0xFF	; 255
    2460:	7f 4f       	sbci	r23, 0xFF	; 255
    2462:	86 e3       	ldi	r24, 0x36	; 54
    2464:	91 e0       	ldi	r25, 0x01	; 1
    2466:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    246a:	2d c7       	rjmp	.+3674   	; 0x32c6 <report+0x1078>
			}

			if (get_MOTOR_FLOAT(controller, READTEMPERATURE, &t0) == ERROR) {
    246c:	ae 01       	movw	r20, r28
    246e:	40 53       	subi	r20, 0x30	; 48
    2470:	5c 4f       	sbci	r21, 0xFC	; 252
    2472:	62 e5       	ldi	r22, 0x52	; 82
    2474:	8e 2d       	mov	r24, r14
    2476:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <get_MOTOR_FLOAT>
    247a:	f8 2e       	mov	r15, r24
    247c:	83 e6       	ldi	r24, 0x63	; 99
    247e:	f8 12       	cpse	r15, r24
    2480:	07 c0       	rjmp	.+14     	; 0x2490 <report+0x242>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT temperature error");
    2482:	6f e2       	ldi	r22, 0x2F	; 47
    2484:	75 eb       	ldi	r23, 0xB5	; 181
    2486:	86 e3       	ldi	r24, 0x36	; 54
    2488:	91 e0       	ldi	r25, 0x01	; 1
    248a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    248e:	1b c7       	rjmp	.+3638   	; 0x32c6 <report+0x1078>
			}

			if (get_MOTOR_MAXCURRENT(controller, &maxCurrent) == ERROR) {
    2490:	be 01       	movw	r22, r28
    2492:	64 53       	subi	r22, 0x34	; 52
    2494:	7c 4f       	sbci	r23, 0xFC	; 252
    2496:	8e 2d       	mov	r24, r14
    2498:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <get_MOTOR_MAXCURRENT>
    249c:	f8 2e       	mov	r15, r24
    249e:	93 e6       	ldi	r25, 0x63	; 99
    24a0:	89 13       	cpse	r24, r25
    24a2:	07 c0       	rjmp	.+14     	; 0x24b2 <report+0x264>
				printError(ERR_MTR, "report: get_MOTOR_MAXCURRENT error");
    24a4:	69 e5       	ldi	r22, 0x59	; 89
    24a6:	75 eb       	ldi	r23, 0xB5	; 181
    24a8:	86 e3       	ldi	r24, 0x36	; 54
    24aa:	91 e0       	ldi	r25, 0x01	; 1
    24ac:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    24b0:	0a c7       	rjmp	.+3604   	; 0x32c6 <report+0x1078>
			}

			if (get_MOTOR_S4MODE(controller, &s4mode) == ERROR) {
    24b2:	be 01       	movw	r22, r28
    24b4:	6d 53       	subi	r22, 0x3D	; 61
    24b6:	7c 4f       	sbci	r23, 0xFC	; 252
    24b8:	8e 2d       	mov	r24, r14
    24ba:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <get_MOTOR_S4MODE>
    24be:	f8 2e       	mov	r15, r24
    24c0:	83 e6       	ldi	r24, 0x63	; 99
    24c2:	f8 12       	cpse	r15, r24
    24c4:	07 c0       	rjmp	.+14     	; 0x24d4 <report+0x286>
				printError(ERR_MTR, "report: get_MOTOR_S4MODE error");
    24c6:	6c e7       	ldi	r22, 0x7C	; 124
    24c8:	75 eb       	ldi	r23, 0xB5	; 181
    24ca:	86 e3       	ldi	r24, 0x36	; 54
    24cc:	91 e0       	ldi	r25, 0x01	; 1
    24ce:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    24d2:	f9 c6       	rjmp	.+3570   	; 0x32c6 <report+0x1078>
			}

			if (get_MOTOR_PID(controller, &pid) == ERROR) {
    24d4:	be 01       	movw	r22, r28
    24d6:	6a 51       	subi	r22, 0x1A	; 26
    24d8:	7c 4f       	sbci	r23, 0xFC	; 252
    24da:	8e 2d       	mov	r24, r14
    24dc:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <get_MOTOR_PID>
    24e0:	f8 2e       	mov	r15, r24
    24e2:	93 e6       	ldi	r25, 0x63	; 99
    24e4:	89 13       	cpse	r24, r25
    24e6:	07 c0       	rjmp	.+14     	; 0x24f6 <report+0x2a8>
				printError(ERR_MTR, "report: get_MOTOR_PID error");
    24e8:	6b e9       	ldi	r22, 0x9B	; 155
    24ea:	75 eb       	ldi	r23, 0xB5	; 181
    24ec:	86 e3       	ldi	r24, 0x36	; 54
    24ee:	91 e0       	ldi	r25, 0x01	; 1
    24f0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    24f4:	e8 c6       	rjmp	.+3536   	; 0x32c6 <report+0x1078>
			}

			sprintf(outbuf, format_MT0, currenttime, (char) (controller-63),
			voltage, t0, encsavetime, pcmd[cstack].cid);
    24f6:	24 e3       	ldi	r18, 0x34	; 52
    24f8:	20 9f       	mul	r18, r16
    24fa:	c0 01       	movw	r24, r0
    24fc:	21 9f       	mul	r18, r17
    24fe:	90 0d       	add	r25, r0
    2500:	11 24       	eor	r1, r1
    2502:	8c 01       	movw	r16, r24
    2504:	06 5c       	subi	r16, 0xC6	; 198
    2506:	17 4d       	sbci	r17, 0xD7	; 215
			if (get_MOTOR_PID(controller, &pid) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_PID error");
				return(ERROR);
			}

			sprintf(outbuf, format_MT0, currenttime, (char) (controller-63),
    2508:	1f 93       	push	r17
    250a:	0f 93       	push	r16
    250c:	ce 01       	movw	r24, r28
    250e:	8a 5b       	subi	r24, 0xBA	; 186
    2510:	9e 4f       	sbci	r25, 0xFE	; 254
    2512:	9f 93       	push	r25
    2514:	8f 93       	push	r24
    2516:	cd 52       	subi	r28, 0x2D	; 45
    2518:	dc 4f       	sbci	r29, 0xFC	; 252
    251a:	88 81       	ld	r24, Y
    251c:	c3 5d       	subi	r28, 0xD3	; 211
    251e:	d3 40       	sbci	r29, 0x03	; 3
    2520:	8f 93       	push	r24
    2522:	ce 52       	subi	r28, 0x2E	; 46
    2524:	dc 4f       	sbci	r29, 0xFC	; 252
    2526:	88 81       	ld	r24, Y
    2528:	c2 5d       	subi	r28, 0xD2	; 210
    252a:	d3 40       	sbci	r29, 0x03	; 3
    252c:	8f 93       	push	r24
    252e:	cf 52       	subi	r28, 0x2F	; 47
    2530:	dc 4f       	sbci	r29, 0xFC	; 252
    2532:	88 81       	ld	r24, Y
    2534:	c1 5d       	subi	r28, 0xD1	; 209
    2536:	d3 40       	sbci	r29, 0x03	; 3
    2538:	8f 93       	push	r24
    253a:	c0 53       	subi	r28, 0x30	; 48
    253c:	dc 4f       	sbci	r29, 0xFC	; 252
    253e:	88 81       	ld	r24, Y
    2540:	c0 5d       	subi	r28, 0xD0	; 208
    2542:	d3 40       	sbci	r29, 0x03	; 3
    2544:	8f 93       	push	r24
    2546:	c9 52       	subi	r28, 0x29	; 41
    2548:	dc 4f       	sbci	r29, 0xFC	; 252
    254a:	88 81       	ld	r24, Y
    254c:	c7 5d       	subi	r28, 0xD7	; 215
    254e:	d3 40       	sbci	r29, 0x03	; 3
    2550:	8f 93       	push	r24
    2552:	ca 52       	subi	r28, 0x2A	; 42
    2554:	dc 4f       	sbci	r29, 0xFC	; 252
    2556:	88 81       	ld	r24, Y
    2558:	c6 5d       	subi	r28, 0xD6	; 214
    255a:	d3 40       	sbci	r29, 0x03	; 3
    255c:	8f 93       	push	r24
    255e:	cb 52       	subi	r28, 0x2B	; 43
    2560:	dc 4f       	sbci	r29, 0xFC	; 252
    2562:	88 81       	ld	r24, Y
    2564:	c5 5d       	subi	r28, 0xD5	; 213
    2566:	d3 40       	sbci	r29, 0x03	; 3
    2568:	8f 93       	push	r24
    256a:	cc 52       	subi	r28, 0x2C	; 44
    256c:	dc 4f       	sbci	r29, 0xFC	; 252
    256e:	88 81       	ld	r24, Y
    2570:	c4 5d       	subi	r28, 0xD4	; 212
    2572:	d3 40       	sbci	r29, 0x03	; 3
    2574:	8f 93       	push	r24
    2576:	1f 92       	push	r1
    2578:	df 92       	push	r13
    257a:	5e 01       	movw	r10, r28
    257c:	86 ef       	ldi	r24, 0xF6	; 246
    257e:	a8 1a       	sub	r10, r24
    2580:	8e ef       	ldi	r24, 0xFE	; 254
    2582:	b8 0a       	sbc	r11, r24
    2584:	bf 92       	push	r11
    2586:	af 92       	push	r10
    2588:	ce 01       	movw	r24, r28
    258a:	82 52       	subi	r24, 0x22	; 34
    258c:	9e 4f       	sbci	r25, 0xFE	; 254
    258e:	9f 93       	push	r25
    2590:	8f 93       	push	r24
    2592:	8d 5d       	subi	r24, 0xDD	; 221
    2594:	91 40       	sbci	r25, 0x01	; 1
    2596:	7c 01       	movw	r14, r24
    2598:	9f 93       	push	r25
    259a:	8f 93       	push	r24
    259c:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			voltage, t0, encsavetime, pcmd[cstack].cid);
			printLine(outbuf);
    25a0:	c7 01       	movw	r24, r14
    25a2:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>

			sprintf(outbuf, format_MT3, currenttime, (char) (controller-63),
    25a6:	1f 93       	push	r17
    25a8:	0f 93       	push	r16
    25aa:	cd 53       	subi	r28, 0x3D	; 61
    25ac:	dc 4f       	sbci	r29, 0xFC	; 252
    25ae:	88 81       	ld	r24, Y
    25b0:	c3 5c       	subi	r28, 0xC3	; 195
    25b2:	d3 40       	sbci	r29, 0x03	; 3
    25b4:	1f 92       	push	r1
    25b6:	8f 93       	push	r24
    25b8:	c1 53       	subi	r28, 0x31	; 49
    25ba:	dc 4f       	sbci	r29, 0xFC	; 252
    25bc:	88 81       	ld	r24, Y
    25be:	cf 5c       	subi	r28, 0xCF	; 207
    25c0:	d3 40       	sbci	r29, 0x03	; 3
    25c2:	8f 93       	push	r24
    25c4:	c2 53       	subi	r28, 0x32	; 50
    25c6:	dc 4f       	sbci	r29, 0xFC	; 252
    25c8:	88 81       	ld	r24, Y
    25ca:	ce 5c       	subi	r28, 0xCE	; 206
    25cc:	d3 40       	sbci	r29, 0x03	; 3
    25ce:	8f 93       	push	r24
    25d0:	c3 53       	subi	r28, 0x33	; 51
    25d2:	dc 4f       	sbci	r29, 0xFC	; 252
    25d4:	88 81       	ld	r24, Y
    25d6:	cd 5c       	subi	r28, 0xCD	; 205
    25d8:	d3 40       	sbci	r29, 0x03	; 3
    25da:	8f 93       	push	r24
    25dc:	c4 53       	subi	r28, 0x34	; 52
    25de:	dc 4f       	sbci	r29, 0xFC	; 252
    25e0:	88 81       	ld	r24, Y
    25e2:	cc 5c       	subi	r28, 0xCC	; 204
    25e4:	d3 40       	sbci	r29, 0x03	; 3
    25e6:	8f 93       	push	r24
    25e8:	1f 92       	push	r1
    25ea:	df 92       	push	r13
    25ec:	bf 92       	push	r11
    25ee:	af 92       	push	r10
    25f0:	ce 01       	movw	r24, r28
    25f2:	88 59       	subi	r24, 0x98	; 152
    25f4:	9d 4f       	sbci	r25, 0xFD	; 253
    25f6:	9f 93       	push	r25
    25f8:	8f 93       	push	r24
    25fa:	ff 92       	push	r15
    25fc:	ef 92       	push	r14
    25fe:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			maxCurrent, s4mode, pcmd[cstack].cid);
			printLine(outbuf);
    2602:	cd bf       	out	0x3d, r28	; 61
    2604:	de bf       	out	0x3e, r29	; 62
    2606:	c7 01       	movw	r24, r14
    2608:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>

			sprintf(outbuf, format_MT1, currenttime, (char) (controller-63),
			pid.p, pid.i, pid.d, pid.maxI, pcmd[cstack].cid);
    260c:	c2 51       	subi	r28, 0x12	; 18
    260e:	dc 4f       	sbci	r29, 0xFC	; 252
    2610:	e8 81       	ld	r30, Y
    2612:	ce 5e       	subi	r28, 0xEE	; 238
    2614:	d3 40       	sbci	r29, 0x03	; 3
    2616:	c1 51       	subi	r28, 0x11	; 17
    2618:	dc 4f       	sbci	r29, 0xFC	; 252
    261a:	f8 81       	ld	r31, Y
    261c:	cf 5e       	subi	r28, 0xEF	; 239
    261e:	d3 40       	sbci	r29, 0x03	; 3
    2620:	c0 51       	subi	r28, 0x10	; 16
    2622:	dc 4f       	sbci	r29, 0xFC	; 252
    2624:	a8 81       	ld	r26, Y
    2626:	c0 5f       	subi	r28, 0xF0	; 240
    2628:	d3 40       	sbci	r29, 0x03	; 3
    262a:	cf 50       	subi	r28, 0x0F	; 15
    262c:	dc 4f       	sbci	r29, 0xFC	; 252
    262e:	b8 81       	ld	r27, Y
    2630:	c1 5f       	subi	r28, 0xF1	; 241
    2632:	d3 40       	sbci	r29, 0x03	; 3
    2634:	c6 51       	subi	r28, 0x16	; 22
    2636:	dc 4f       	sbci	r29, 0xFC	; 252
    2638:	48 81       	ld	r20, Y
    263a:	ca 5e       	subi	r28, 0xEA	; 234
    263c:	d3 40       	sbci	r29, 0x03	; 3
    263e:	c5 51       	subi	r28, 0x15	; 21
    2640:	dc 4f       	sbci	r29, 0xFC	; 252
    2642:	58 81       	ld	r21, Y
    2644:	cb 5e       	subi	r28, 0xEB	; 235
    2646:	d3 40       	sbci	r29, 0x03	; 3
    2648:	c4 51       	subi	r28, 0x14	; 20
    264a:	dc 4f       	sbci	r29, 0xFC	; 252
    264c:	68 81       	ld	r22, Y
    264e:	cc 5e       	subi	r28, 0xEC	; 236
    2650:	d3 40       	sbci	r29, 0x03	; 3
    2652:	c3 51       	subi	r28, 0x13	; 19
    2654:	dc 4f       	sbci	r29, 0xFC	; 252
    2656:	78 81       	ld	r23, Y
    2658:	cd 5e       	subi	r28, 0xED	; 237
    265a:	d3 40       	sbci	r29, 0x03	; 3
    265c:	ca 51       	subi	r28, 0x1A	; 26
    265e:	dc 4f       	sbci	r29, 0xFC	; 252
    2660:	88 81       	ld	r24, Y
    2662:	c6 5e       	subi	r28, 0xE6	; 230
    2664:	d3 40       	sbci	r29, 0x03	; 3
    2666:	c9 51       	subi	r28, 0x19	; 25
    2668:	dc 4f       	sbci	r29, 0xFC	; 252
    266a:	98 81       	ld	r25, Y
    266c:	c7 5e       	subi	r28, 0xE7	; 231
    266e:	d3 40       	sbci	r29, 0x03	; 3
    2670:	c8 51       	subi	r28, 0x18	; 24
    2672:	dc 4f       	sbci	r29, 0xFC	; 252
    2674:	28 81       	ld	r18, Y
    2676:	c8 5e       	subi	r28, 0xE8	; 232
    2678:	d3 40       	sbci	r29, 0x03	; 3
    267a:	c7 51       	subi	r28, 0x17	; 23
    267c:	dc 4f       	sbci	r29, 0xFC	; 252
    267e:	38 81       	ld	r19, Y
    2680:	c9 5e       	subi	r28, 0xE9	; 233
    2682:	d3 40       	sbci	r29, 0x03	; 3

			sprintf(outbuf, format_MT3, currenttime, (char) (controller-63),
			maxCurrent, s4mode, pcmd[cstack].cid);
			printLine(outbuf);

			sprintf(outbuf, format_MT1, currenttime, (char) (controller-63),
    2684:	1f 93       	push	r17
    2686:	0f 93       	push	r16
    2688:	cb 50       	subi	r28, 0x0B	; 11
    268a:	dc 4f       	sbci	r29, 0xFC	; 252
    268c:	c8 80       	ld	r12, Y
    268e:	c5 5f       	subi	r28, 0xF5	; 245
    2690:	d3 40       	sbci	r29, 0x03	; 3
    2692:	cf 92       	push	r12
    2694:	cc 50       	subi	r28, 0x0C	; 12
    2696:	dc 4f       	sbci	r29, 0xFC	; 252
    2698:	c8 80       	ld	r12, Y
    269a:	c4 5f       	subi	r28, 0xF4	; 244
    269c:	d3 40       	sbci	r29, 0x03	; 3
    269e:	cf 92       	push	r12
    26a0:	cd 50       	subi	r28, 0x0D	; 13
    26a2:	dc 4f       	sbci	r29, 0xFC	; 252
    26a4:	c8 80       	ld	r12, Y
    26a6:	c3 5f       	subi	r28, 0xF3	; 243
    26a8:	d3 40       	sbci	r29, 0x03	; 3
    26aa:	cf 92       	push	r12
    26ac:	ce 50       	subi	r28, 0x0E	; 14
    26ae:	dc 4f       	sbci	r29, 0xFC	; 252
    26b0:	c8 80       	ld	r12, Y
    26b2:	c2 5f       	subi	r28, 0xF2	; 242
    26b4:	d3 40       	sbci	r29, 0x03	; 3
    26b6:	cf 92       	push	r12
    26b8:	bf 93       	push	r27
    26ba:	af 93       	push	r26
    26bc:	ff 93       	push	r31
    26be:	ef 93       	push	r30
    26c0:	7f 93       	push	r23
    26c2:	6f 93       	push	r22
    26c4:	5f 93       	push	r21
    26c6:	4f 93       	push	r20
    26c8:	3f 93       	push	r19
    26ca:	2f 93       	push	r18
    26cc:	9f 93       	push	r25
    26ce:	8f 93       	push	r24
    26d0:	1f 92       	push	r1
    26d2:	df 92       	push	r13
    26d4:	bf 92       	push	r11
    26d6:	af 92       	push	r10
    26d8:	ce 01       	movw	r24, r28
    26da:	86 5f       	subi	r24, 0xF6	; 246
    26dc:	9d 4f       	sbci	r25, 0xFD	; 253
    26de:	9f 93       	push	r25
    26e0:	8f 93       	push	r24
    26e2:	ff 92       	push	r15
    26e4:	ef 92       	push	r14
    26e6:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			pid.p, pid.i, pid.d, pid.maxI, pcmd[cstack].cid);
			printLine(outbuf);
    26ea:	c7 01       	movw	r24, r14
    26ec:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>

			sprintf(outbuf, format_MT2, currenttime, (char) (controller-63),
    26f0:	1f 93       	push	r17
    26f2:	0f 93       	push	r16
    26f4:	cb 5f       	subi	r28, 0xFB	; 251
    26f6:	db 4f       	sbci	r29, 0xFB	; 251
    26f8:	88 81       	ld	r24, Y
    26fa:	c5 50       	subi	r28, 0x05	; 5
    26fc:	d4 40       	sbci	r29, 0x04	; 4
    26fe:	8f 93       	push	r24
    2700:	cc 5f       	subi	r28, 0xFC	; 252
    2702:	db 4f       	sbci	r29, 0xFB	; 251
    2704:	88 81       	ld	r24, Y
    2706:	c4 50       	subi	r28, 0x04	; 4
    2708:	d4 40       	sbci	r29, 0x04	; 4
    270a:	8f 93       	push	r24
    270c:	cd 5f       	subi	r28, 0xFD	; 253
    270e:	db 4f       	sbci	r29, 0xFB	; 251
    2710:	88 81       	ld	r24, Y
    2712:	c3 50       	subi	r28, 0x03	; 3
    2714:	d4 40       	sbci	r29, 0x04	; 4
    2716:	8f 93       	push	r24
    2718:	ce 5f       	subi	r28, 0xFE	; 254
    271a:	db 4f       	sbci	r29, 0xFB	; 251
    271c:	88 81       	ld	r24, Y
    271e:	c2 50       	subi	r28, 0x02	; 2
    2720:	d4 40       	sbci	r29, 0x04	; 4
    2722:	8f 93       	push	r24
    2724:	cf 5f       	subi	r28, 0xFF	; 255
    2726:	db 4f       	sbci	r29, 0xFB	; 251
    2728:	88 81       	ld	r24, Y
    272a:	c1 50       	subi	r28, 0x01	; 1
    272c:	d4 40       	sbci	r29, 0x04	; 4
    272e:	8f 93       	push	r24
    2730:	c0 50       	subi	r28, 0x00	; 0
    2732:	dc 4f       	sbci	r29, 0xFC	; 252
    2734:	88 81       	ld	r24, Y
    2736:	c0 50       	subi	r28, 0x00	; 0
    2738:	d4 40       	sbci	r29, 0x04	; 4
    273a:	8f 93       	push	r24
    273c:	c1 50       	subi	r28, 0x01	; 1
    273e:	dc 4f       	sbci	r29, 0xFC	; 252
    2740:	88 81       	ld	r24, Y
    2742:	cf 5f       	subi	r28, 0xFF	; 255
    2744:	d3 40       	sbci	r29, 0x03	; 3
    2746:	8f 93       	push	r24
    2748:	c2 50       	subi	r28, 0x02	; 2
    274a:	dc 4f       	sbci	r29, 0xFC	; 252
    274c:	88 81       	ld	r24, Y
    274e:	ce 5f       	subi	r28, 0xFE	; 254
    2750:	d3 40       	sbci	r29, 0x03	; 3
    2752:	8f 93       	push	r24
    2754:	c3 50       	subi	r28, 0x03	; 3
    2756:	dc 4f       	sbci	r29, 0xFC	; 252
    2758:	88 81       	ld	r24, Y
    275a:	cd 5f       	subi	r28, 0xFD	; 253
    275c:	d3 40       	sbci	r29, 0x03	; 3
    275e:	8f 93       	push	r24
    2760:	c4 50       	subi	r28, 0x04	; 4
    2762:	dc 4f       	sbci	r29, 0xFC	; 252
    2764:	88 81       	ld	r24, Y
    2766:	cc 5f       	subi	r28, 0xFC	; 252
    2768:	d3 40       	sbci	r29, 0x03	; 3
    276a:	8f 93       	push	r24
    276c:	c5 50       	subi	r28, 0x05	; 5
    276e:	dc 4f       	sbci	r29, 0xFC	; 252
    2770:	88 81       	ld	r24, Y
    2772:	cb 5f       	subi	r28, 0xFB	; 251
    2774:	d3 40       	sbci	r29, 0x03	; 3
    2776:	8f 93       	push	r24
    2778:	c6 50       	subi	r28, 0x06	; 6
    277a:	dc 4f       	sbci	r29, 0xFC	; 252
    277c:	88 81       	ld	r24, Y
    277e:	ca 5f       	subi	r28, 0xFA	; 250
    2780:	d3 40       	sbci	r29, 0x03	; 3
    2782:	8f 93       	push	r24
    2784:	c7 50       	subi	r28, 0x07	; 7
    2786:	dc 4f       	sbci	r29, 0xFC	; 252
    2788:	88 81       	ld	r24, Y
    278a:	c9 5f       	subi	r28, 0xF9	; 249
    278c:	d3 40       	sbci	r29, 0x03	; 3
    278e:	8f 93       	push	r24
    2790:	c8 50       	subi	r28, 0x08	; 8
    2792:	dc 4f       	sbci	r29, 0xFC	; 252
    2794:	88 81       	ld	r24, Y
    2796:	c8 5f       	subi	r28, 0xF8	; 248
    2798:	d3 40       	sbci	r29, 0x03	; 3
    279a:	8f 93       	push	r24
    279c:	c9 50       	subi	r28, 0x09	; 9
    279e:	dc 4f       	sbci	r29, 0xFC	; 252
    27a0:	88 81       	ld	r24, Y
    27a2:	c7 5f       	subi	r28, 0xF7	; 247
    27a4:	d3 40       	sbci	r29, 0x03	; 3
    27a6:	8f 93       	push	r24
    27a8:	ca 50       	subi	r28, 0x0A	; 10
    27aa:	dc 4f       	sbci	r29, 0xFC	; 252
    27ac:	88 81       	ld	r24, Y
    27ae:	c6 5f       	subi	r28, 0xF6	; 246
    27b0:	d3 40       	sbci	r29, 0x03	; 3
    27b2:	8f 93       	push	r24
    27b4:	1f 92       	push	r1
    27b6:	df 92       	push	r13
    27b8:	bf 92       	push	r11
    27ba:	af 92       	push	r10
    27bc:	ce 01       	movw	r24, r28
    27be:	89 5c       	subi	r24, 0xC9	; 201
    27c0:	9d 4f       	sbci	r25, 0xFD	; 253
    27c2:	9f 93       	push	r25
    27c4:	8f 93       	push	r24
    27c6:	ff 92       	push	r15
    27c8:	ef 92       	push	r14
    27ca:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
				pid.deadZone, pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
			printLine(outbuf);
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	de bf       	out	0x3e, r29	; 62
    27d2:	c7 01       	movw	r24, r14
    27d4:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    27d8:	f1 2c       	mov	r15, r1

			sprintf(outbuf, format_MT2, currenttime, (char) (controller-63),
				pid.deadZone, pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
			printLine(outbuf);

			break;
    27da:	75 c5       	rjmp	.+2794   	; 0x32c6 <report+0x1078>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    27dc:	ce 01       	movw	r24, r28
    27de:	86 5f       	subi	r24, 0xF6	; 246
    27e0:	9e 4f       	sbci	r25, 0xFE	; 254
    27e2:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
			controller = pcmd[cstack].cobject + 31;
    27e6:	84 e3       	ldi	r24, 0x34	; 52
    27e8:	80 9f       	mul	r24, r16
    27ea:	f0 01       	movw	r30, r0
    27ec:	81 9f       	mul	r24, r17
    27ee:	f0 0d       	add	r31, r0
    27f0:	11 24       	eor	r1, r1
    27f2:	e1 5f       	subi	r30, 0xF1	; 241
    27f4:	f7 4d       	sbci	r31, 0xD7	; 215
    27f6:	81 81       	ldd	r24, Z+1	; 0x01
    27f8:	0f 2e       	mov	r0, r31
    27fa:	ff e1       	ldi	r31, 0x1F	; 31
    27fc:	ef 2e       	mov	r14, r31
    27fe:	f0 2d       	mov	r31, r0
    2800:	e8 0e       	add	r14, r24

			if (get_MOTOR_ENCODER(controller, &encoderValue) == ERROR) {
    2802:	be 01       	movw	r22, r28
    2804:	6c 53       	subi	r22, 0x3C	; 60
    2806:	7c 4f       	sbci	r23, 0xFC	; 252
    2808:	8e 2d       	mov	r24, r14
    280a:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <get_MOTOR_ENCODER>
    280e:	f8 2e       	mov	r15, r24
    2810:	93 e6       	ldi	r25, 0x63	; 99
    2812:	89 13       	cpse	r24, r25
    2814:	07 c0       	rjmp	.+14     	; 0x2824 <report+0x5d6>
				printError(ERR_MTR, "report: get_MOTOR_ENCODER error");
    2816:	67 eb       	ldi	r22, 0xB7	; 183
    2818:	75 eb       	ldi	r23, 0xB5	; 181
    281a:	86 e3       	ldi	r24, 0x36	; 54
    281c:	91 e0       	ldi	r25, 0x01	; 1
    281e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    2822:	51 c5       	rjmp	.+2722   	; 0x32c6 <report+0x1078>
			}

			micronValue = encoderValue/ENC_COUNTS_PER_MICRON;
    2824:	cc 53       	subi	r28, 0x3C	; 60
    2826:	dc 4f       	sbci	r29, 0xFC	; 252
    2828:	68 81       	ld	r22, Y
    282a:	79 81       	ldd	r23, Y+1	; 0x01
    282c:	8a 81       	ldd	r24, Y+2	; 0x02
    282e:	9b 81       	ldd	r25, Y+3	; 0x03
    2830:	c4 5c       	subi	r28, 0xC4	; 196
    2832:	d3 40       	sbci	r29, 0x03	; 3
    2834:	2b e1       	ldi	r18, 0x1B	; 27
    2836:	31 e0       	ldi	r19, 0x01	; 1
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	50 e0       	ldi	r21, 0x00	; 0
    283c:	0e 94 32 36 	call	0x6c64	; 0x6c64 <__divmodsi4>
    2840:	d2 2e       	mov	r13, r18
    2842:	c3 2e       	mov	r12, r19
    2844:	b4 2e       	mov	r11, r20
    2846:	a5 2e       	mov	r10, r21

			if (get_MOTOR_SPEED(controller, &encoderSpeed) == ERROR) {
    2848:	be 01       	movw	r22, r28
    284a:	68 53       	subi	r22, 0x38	; 56
    284c:	7c 4f       	sbci	r23, 0xFC	; 252
    284e:	8e 2d       	mov	r24, r14
    2850:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <get_MOTOR_SPEED>
    2854:	83 36       	cpi	r24, 0x63	; 99
    2856:	61 f4       	brne	.+24     	; 0x2870 <report+0x622>
				encoderSpeed = 0x7FFFFFFF;
    2858:	8f ef       	ldi	r24, 0xFF	; 255
    285a:	9f ef       	ldi	r25, 0xFF	; 255
    285c:	af ef       	ldi	r26, 0xFF	; 255
    285e:	bf e7       	ldi	r27, 0x7F	; 127
    2860:	c8 53       	subi	r28, 0x38	; 56
    2862:	dc 4f       	sbci	r29, 0xFC	; 252
    2864:	88 83       	st	Y, r24
    2866:	99 83       	std	Y+1, r25	; 0x01
    2868:	aa 83       	std	Y+2, r26	; 0x02
    286a:	bb 83       	std	Y+3, r27	; 0x03
    286c:	c8 5c       	subi	r28, 0xC8	; 200
    286e:	d3 40       	sbci	r29, 0x03	; 3
			}

			micronSpeed = encoderSpeed/ENC_COUNTS_PER_MICRON;
    2870:	c8 53       	subi	r28, 0x38	; 56
    2872:	dc 4f       	sbci	r29, 0xFC	; 252
    2874:	68 81       	ld	r22, Y
    2876:	79 81       	ldd	r23, Y+1	; 0x01
    2878:	8a 81       	ldd	r24, Y+2	; 0x02
    287a:	9b 81       	ldd	r25, Y+3	; 0x03
    287c:	c8 5c       	subi	r28, 0xC8	; 200
    287e:	d3 40       	sbci	r29, 0x03	; 3
    2880:	2b e1       	ldi	r18, 0x1B	; 27
    2882:	31 e0       	ldi	r19, 0x01	; 1
    2884:	40 e0       	ldi	r20, 0x00	; 0
    2886:	50 e0       	ldi	r21, 0x00	; 0
    2888:	0e 94 32 36 	call	0x6c64	; 0x6c64 <__divmodsi4>
    288c:	92 2e       	mov	r9, r18
    288e:	83 2e       	mov	r8, r19
    2890:	74 2e       	mov	r7, r20
    2892:	65 2e       	mov	r6, r21

			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
    2894:	be 01       	movw	r22, r28
    2896:	68 52       	subi	r22, 0x28	; 40
    2898:	7c 4f       	sbci	r23, 0xFC	; 252
    289a:	8e 2d       	mov	r24, r14
    289c:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <get_MOTOR_CURRENT>
    28a0:	83 36       	cpi	r24, 0x63	; 99
    28a2:	71 f4       	brne	.+28     	; 0x28c0 <report+0x672>
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
    28a4:	67 ed       	ldi	r22, 0xD7	; 215
    28a6:	75 eb       	ldi	r23, 0xB5	; 181
    28a8:	86 e3       	ldi	r24, 0x36	; 54
    28aa:	91 e0       	ldi	r25, 0x01	; 1
    28ac:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				motorCurrent = 0xFFFF;
    28b0:	8f ef       	ldi	r24, 0xFF	; 255
    28b2:	9f ef       	ldi	r25, 0xFF	; 255
    28b4:	c8 52       	subi	r28, 0x28	; 40
    28b6:	dc 4f       	sbci	r29, 0xFC	; 252
    28b8:	88 83       	st	Y, r24
    28ba:	99 83       	std	Y+1, r25	; 0x01
    28bc:	c8 5d       	subi	r28, 0xD8	; 216
    28be:	d3 40       	sbci	r29, 0x03	; 3
			}

			mdir = '?';
			if (motorDir[controller - MOTOR_A] == MTRDIRPOSITIVE) {
    28c0:	f1 2c       	mov	r15, r1
    28c2:	80 e8       	ldi	r24, 0x80	; 128
    28c4:	e8 1a       	sub	r14, r24
    28c6:	f1 08       	sbc	r15, r1
    28c8:	f7 01       	movw	r30, r14
    28ca:	e3 5c       	subi	r30, 0xC3	; 195
    28cc:	f5 4d       	sbci	r31, 0xD5	; 213
    28ce:	80 81       	ld	r24, Z
    28d0:	81 30       	cpi	r24, 0x01	; 1
    28d2:	39 f0       	breq	.+14     	; 0x28e2 <report+0x694>
				mdir = 'F';
			} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
    28d4:	88 23       	and	r24, r24
    28d6:	51 f0       	breq	.+20     	; 0x28ec <report+0x69e>
			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
				motorCurrent = 0xFFFF;
			}

			mdir = '?';
    28d8:	0f 2e       	mov	r0, r31
    28da:	ff e3       	ldi	r31, 0x3F	; 63
    28dc:	5f 2e       	mov	r5, r31
    28de:	f0 2d       	mov	r31, r0
    28e0:	09 c0       	rjmp	.+18     	; 0x28f4 <report+0x6a6>
			if (motorDir[controller - MOTOR_A] == MTRDIRPOSITIVE) {
				mdir = 'F';
    28e2:	0f 2e       	mov	r0, r31
    28e4:	f6 e4       	ldi	r31, 0x46	; 70
    28e6:	5f 2e       	mov	r5, r31
    28e8:	f0 2d       	mov	r31, r0
    28ea:	04 c0       	rjmp	.+8      	; 0x28f4 <report+0x6a6>
			} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
				mdir = 'R';
    28ec:	0f 2e       	mov	r0, r31
    28ee:	f2 e5       	ldi	r31, 0x52	; 82
    28f0:	5f 2e       	mov	r5, r31
    28f2:	f0 2d       	mov	r31, r0
			}

			mlimit = '?';
			if (get_MOTOR_LIMITS() == ERROR) {
    28f4:	0e 94 2e 21 	call	0x425c	; 0x425c <get_MOTOR_LIMITS>
    28f8:	83 36       	cpi	r24, 0x63	; 99
    28fa:	41 f4       	brne	.+16     	; 0x290c <report+0x6be>
				printError(ERR_MTR, "report: get_MOTOR_LIMITS error");
    28fc:	67 ef       	ldi	r22, 0xF7	; 247
    28fe:	75 eb       	ldi	r23, 0xB5	; 181
    2900:	86 e3       	ldi	r24, 0x36	; 54
    2902:	91 e0       	ldi	r25, 0x01	; 1
    2904:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				mdir = 'F';
			} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
				mdir = 'R';
			}

			mlimit = '?';
    2908:	4f e3       	ldi	r20, 0x3F	; 63
    290a:	09 c0       	rjmp	.+18     	; 0x291e <report+0x6d0>
			if (get_MOTOR_LIMITS() == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_LIMITS error");
			} else {
				if (motorLim[controller - MOTOR_A] == YES) {
    290c:	f7 01       	movw	r30, r14
    290e:	e0 5c       	subi	r30, 0xC0	; 192
    2910:	f5 4d       	sbci	r31, 0xD5	; 213
    2912:	80 81       	ld	r24, Z
    2914:	81 30       	cpi	r24, 0x01	; 1
    2916:	11 f4       	brne	.+4      	; 0x291c <report+0x6ce>
					mlimit = 'Y';
    2918:	49 e5       	ldi	r20, 0x59	; 89
    291a:	01 c0       	rjmp	.+2      	; 0x291e <report+0x6d0>
				mdir = 'F';
			} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
				mdir = 'R';
			}

			mlimit = '?';
    291c:	4f e3       	ldi	r20, 0x3F	; 63
				} else if (motorLim[controller - MOTOR_A] == MTRLIMUNKNOWN) {
					mlimit = '?';
				}
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
    291e:	24 e3       	ldi	r18, 0x34	; 52
    2920:	20 9f       	mul	r18, r16
    2922:	c0 01       	movw	r24, r0
    2924:	21 9f       	mul	r18, r17
    2926:	90 0d       	add	r25, r0
    2928:	11 24       	eor	r1, r1
    292a:	9c 01       	movw	r18, r24
    292c:	26 5c       	subi	r18, 0xC6	; 198
    292e:	37 4d       	sbci	r19, 0xD7	; 215
					mlimit = 'Y';
				} else if (motorLim[controller - MOTOR_A] == MTRLIMUNKNOWN) {
					mlimit = '?';
				}
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
    2930:	fc 01       	movw	r30, r24
    2932:	e1 5f       	subi	r30, 0xF1	; 241
    2934:	f7 4d       	sbci	r31, 0xD7	; 215
    2936:	81 81       	ldd	r24, Z+1	; 0x01
    2938:	3f 93       	push	r19
    293a:	2f 93       	push	r18
    293c:	1f 92       	push	r1
    293e:	4f 93       	push	r20
    2940:	1f 92       	push	r1
    2942:	5f 92       	push	r5
    2944:	c7 52       	subi	r28, 0x27	; 39
    2946:	dc 4f       	sbci	r29, 0xFC	; 252
    2948:	98 81       	ld	r25, Y
    294a:	c9 5d       	subi	r28, 0xD9	; 217
    294c:	d3 40       	sbci	r29, 0x03	; 3
    294e:	9f 93       	push	r25
    2950:	c8 52       	subi	r28, 0x28	; 40
    2952:	dc 4f       	sbci	r29, 0xFC	; 252
    2954:	98 81       	ld	r25, Y
    2956:	c8 5d       	subi	r28, 0xD8	; 216
    2958:	d3 40       	sbci	r29, 0x03	; 3
    295a:	9f 93       	push	r25
    295c:	6f 92       	push	r6
    295e:	7f 92       	push	r7
    2960:	8f 92       	push	r8
    2962:	9f 92       	push	r9
    2964:	af 92       	push	r10
    2966:	bf 92       	push	r11
    2968:	cf 92       	push	r12
    296a:	df 92       	push	r13
    296c:	1f 92       	push	r1
    296e:	8f 93       	push	r24
    2970:	ce 01       	movw	r24, r28
    2972:	86 5f       	subi	r24, 0xF6	; 246
    2974:	9e 4f       	sbci	r25, 0xFE	; 254
    2976:	9f 93       	push	r25
    2978:	8f 93       	push	r24
    297a:	8d 55       	subi	r24, 0x5D	; 93
    297c:	9f 4f       	sbci	r25, 0xFF	; 255
    297e:	9f 93       	push	r25
    2980:	8f 93       	push	r24
    2982:	8e 01       	movw	r16, r28
    2984:	0f 5f       	subi	r16, 0xFF	; 255
    2986:	1f 4f       	sbci	r17, 0xFF	; 255
    2988:	1f 93       	push	r17
    298a:	0f 93       	push	r16
    298c:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
			printLine(outbuf);
    2990:	c8 01       	movw	r24, r16
    2992:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
			break;
    2996:	cd bf       	out	0x3d, r28	; 61
    2998:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    299a:	f1 2c       	mov	r15, r1
				}
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    299c:	94 c4       	rjmp	.+2344   	; 0x32c6 <report+0x1078>

		case 'd':			// copy of the above code
			for (i = 0; i < NMOTORS; i++) {
				get_time(currenttime);
    299e:	ce 01       	movw	r24, r28
    29a0:	86 5f       	subi	r24, 0xF6	; 246
    29a2:	9e 4f       	sbci	r25, 0xFE	; 254
    29a4:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
				controller = i + MOTOR_A;
    29a8:	68 94       	set
    29aa:	ee 24       	eor	r14, r14
    29ac:	e7 f8       	bld	r14, 7
    29ae:	eb 0c       	add	r14, r11

				if (get_MOTOR_ENCODER(controller, &encoderValue) == ERROR) {
    29b0:	be 01       	movw	r22, r28
    29b2:	6c 53       	subi	r22, 0x3C	; 60
    29b4:	7c 4f       	sbci	r23, 0xFC	; 252
    29b6:	8e 2d       	mov	r24, r14
    29b8:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <get_MOTOR_ENCODER>
    29bc:	f8 2e       	mov	r15, r24
    29be:	93 e6       	ldi	r25, 0x63	; 99
    29c0:	89 13       	cpse	r24, r25
    29c2:	07 c0       	rjmp	.+14     	; 0x29d2 <report+0x784>
					printError(ERR_MTR, "report: get_MOTOR_ENCODER error");
    29c4:	67 eb       	ldi	r22, 0xB7	; 183
    29c6:	75 eb       	ldi	r23, 0xB5	; 181
    29c8:	86 e3       	ldi	r24, 0x36	; 54
    29ca:	91 e0       	ldi	r25, 0x01	; 1
    29cc:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
					return(ERROR);
    29d0:	7a c4       	rjmp	.+2292   	; 0x32c6 <report+0x1078>
				}

				micronValue = encoderValue/ENC_COUNTS_PER_MICRON;
    29d2:	cc 53       	subi	r28, 0x3C	; 60
    29d4:	dc 4f       	sbci	r29, 0xFC	; 252
    29d6:	68 81       	ld	r22, Y
    29d8:	79 81       	ldd	r23, Y+1	; 0x01
    29da:	8a 81       	ldd	r24, Y+2	; 0x02
    29dc:	9b 81       	ldd	r25, Y+3	; 0x03
    29de:	c4 5c       	subi	r28, 0xC4	; 196
    29e0:	d3 40       	sbci	r29, 0x03	; 3
    29e2:	2b e1       	ldi	r18, 0x1B	; 27
    29e4:	31 e0       	ldi	r19, 0x01	; 1
    29e6:	40 e0       	ldi	r20, 0x00	; 0
    29e8:	50 e0       	ldi	r21, 0x00	; 0
    29ea:	0e 94 32 36 	call	0x6c64	; 0x6c64 <__divmodsi4>
    29ee:	a2 2e       	mov	r10, r18
    29f0:	93 2e       	mov	r9, r19
    29f2:	84 2e       	mov	r8, r20
    29f4:	75 2e       	mov	r7, r21

				if (get_MOTOR_SPEED(controller, &encoderSpeed) == ERROR) {
    29f6:	be 01       	movw	r22, r28
    29f8:	68 53       	subi	r22, 0x38	; 56
    29fa:	7c 4f       	sbci	r23, 0xFC	; 252
    29fc:	8e 2d       	mov	r24, r14
    29fe:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <get_MOTOR_SPEED>
    2a02:	83 36       	cpi	r24, 0x63	; 99
    2a04:	61 f4       	brne	.+24     	; 0x2a1e <report+0x7d0>
					encoderSpeed = 0x7FFFFFFF;
    2a06:	8f ef       	ldi	r24, 0xFF	; 255
    2a08:	9f ef       	ldi	r25, 0xFF	; 255
    2a0a:	af ef       	ldi	r26, 0xFF	; 255
    2a0c:	bf e7       	ldi	r27, 0x7F	; 127
    2a0e:	c8 53       	subi	r28, 0x38	; 56
    2a10:	dc 4f       	sbci	r29, 0xFC	; 252
    2a12:	88 83       	st	Y, r24
    2a14:	99 83       	std	Y+1, r25	; 0x01
    2a16:	aa 83       	std	Y+2, r26	; 0x02
    2a18:	bb 83       	std	Y+3, r27	; 0x03
    2a1a:	c8 5c       	subi	r28, 0xC8	; 200
    2a1c:	d3 40       	sbci	r29, 0x03	; 3
				}

				micronSpeed = encoderSpeed/ENC_COUNTS_PER_MICRON;
    2a1e:	c8 53       	subi	r28, 0x38	; 56
    2a20:	dc 4f       	sbci	r29, 0xFC	; 252
    2a22:	68 81       	ld	r22, Y
    2a24:	79 81       	ldd	r23, Y+1	; 0x01
    2a26:	8a 81       	ldd	r24, Y+2	; 0x02
    2a28:	9b 81       	ldd	r25, Y+3	; 0x03
    2a2a:	c8 5c       	subi	r28, 0xC8	; 200
    2a2c:	d3 40       	sbci	r29, 0x03	; 3
    2a2e:	2b e1       	ldi	r18, 0x1B	; 27
    2a30:	31 e0       	ldi	r19, 0x01	; 1
    2a32:	40 e0       	ldi	r20, 0x00	; 0
    2a34:	50 e0       	ldi	r21, 0x00	; 0
    2a36:	0e 94 32 36 	call	0x6c64	; 0x6c64 <__divmodsi4>
    2a3a:	62 2e       	mov	r6, r18
    2a3c:	53 2e       	mov	r5, r19
    2a3e:	44 2e       	mov	r4, r20
    2a40:	35 2e       	mov	r3, r21

				if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
    2a42:	be 01       	movw	r22, r28
    2a44:	68 52       	subi	r22, 0x28	; 40
    2a46:	7c 4f       	sbci	r23, 0xFC	; 252
    2a48:	8e 2d       	mov	r24, r14
    2a4a:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <get_MOTOR_CURRENT>
    2a4e:	83 36       	cpi	r24, 0x63	; 99
    2a50:	71 f4       	brne	.+28     	; 0x2a6e <report+0x820>
					printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
    2a52:	67 ed       	ldi	r22, 0xD7	; 215
    2a54:	75 eb       	ldi	r23, 0xB5	; 181
    2a56:	86 e3       	ldi	r24, 0x36	; 54
    2a58:	91 e0       	ldi	r25, 0x01	; 1
    2a5a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
					motorCurrent = 0xFFFF;
    2a5e:	8f ef       	ldi	r24, 0xFF	; 255
    2a60:	9f ef       	ldi	r25, 0xFF	; 255
    2a62:	c8 52       	subi	r28, 0x28	; 40
    2a64:	dc 4f       	sbci	r29, 0xFC	; 252
    2a66:	88 83       	st	Y, r24
    2a68:	99 83       	std	Y+1, r25	; 0x01
    2a6a:	c8 5d       	subi	r28, 0xD8	; 216
    2a6c:	d3 40       	sbci	r29, 0x03	; 3
				}

				mdir = '?';
				if (motorDir[controller - MOTOR_A] == MTRDIRPOSITIVE) {
    2a6e:	f1 2c       	mov	r15, r1
    2a70:	67 01       	movw	r12, r14
    2a72:	80 e8       	ldi	r24, 0x80	; 128
    2a74:	c8 1a       	sub	r12, r24
    2a76:	d1 08       	sbc	r13, r1
    2a78:	f6 01       	movw	r30, r12
    2a7a:	e3 5c       	subi	r30, 0xC3	; 195
    2a7c:	f5 4d       	sbci	r31, 0xD5	; 213
    2a7e:	80 81       	ld	r24, Z
    2a80:	81 30       	cpi	r24, 0x01	; 1
    2a82:	39 f0       	breq	.+14     	; 0x2a92 <report+0x844>
						mdir = 'F';
				} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
    2a84:	88 23       	and	r24, r24
    2a86:	51 f0       	breq	.+20     	; 0x2a9c <report+0x84e>
				if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
					printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
					motorCurrent = 0xFFFF;
				}

				mdir = '?';
    2a88:	0f 2e       	mov	r0, r31
    2a8a:	ff e3       	ldi	r31, 0x3F	; 63
    2a8c:	2f 2e       	mov	r2, r31
    2a8e:	f0 2d       	mov	r31, r0
    2a90:	09 c0       	rjmp	.+18     	; 0x2aa4 <report+0x856>
				if (motorDir[controller - MOTOR_A] == MTRDIRPOSITIVE) {
						mdir = 'F';
    2a92:	0f 2e       	mov	r0, r31
    2a94:	f6 e4       	ldi	r31, 0x46	; 70
    2a96:	2f 2e       	mov	r2, r31
    2a98:	f0 2d       	mov	r31, r0
    2a9a:	04 c0       	rjmp	.+8      	; 0x2aa4 <report+0x856>
				} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
						mdir = 'R';
    2a9c:	0f 2e       	mov	r0, r31
    2a9e:	f2 e5       	ldi	r31, 0x52	; 82
    2aa0:	2f 2e       	mov	r2, r31
    2aa2:	f0 2d       	mov	r31, r0
				}

				mlimit = '?';
				if (get_MOTOR_LIMITS() == ERROR) {
    2aa4:	0e 94 2e 21 	call	0x425c	; 0x425c <get_MOTOR_LIMITS>
    2aa8:	83 36       	cpi	r24, 0x63	; 99
    2aaa:	31 f4       	brne	.+12     	; 0x2ab8 <report+0x86a>
						printError(ERR_MTR, "report: get_MOTOR_LIMITS error");
    2aac:	67 ef       	ldi	r22, 0xF7	; 247
    2aae:	75 eb       	ldi	r23, 0xB5	; 181
    2ab0:	86 e3       	ldi	r24, 0x36	; 54
    2ab2:	91 e0       	ldi	r25, 0x01	; 1
    2ab4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				}
				if (motorLim[controller - MOTOR_A] == YES) {
    2ab8:	f6 01       	movw	r30, r12
    2aba:	e0 5c       	subi	r30, 0xC0	; 192
    2abc:	f5 4d       	sbci	r31, 0xD5	; 213
    2abe:	80 81       	ld	r24, Z
    2ac0:	81 30       	cpi	r24, 0x01	; 1
    2ac2:	11 f0       	breq	.+4      	; 0x2ac8 <report+0x87a>
						mdir = 'F';
				} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
						mdir = 'R';
				}

				mlimit = '?';
    2ac4:	2f e3       	ldi	r18, 0x3F	; 63
    2ac6:	01 c0       	rjmp	.+2      	; 0x2aca <report+0x87c>
				if (get_MOTOR_LIMITS() == ERROR) {
						printError(ERR_MTR, "report: get_MOTOR_LIMITS error");
				}
				if (motorLim[controller - MOTOR_A] == YES) {
						mlimit = 'Y';
    2ac8:	29 e5       	ldi	r18, 0x59	; 89
				}

				sprintf(outbuf, format_MTR, currenttime, controller-31, micronValue,
					micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
    2aca:	34 e3       	ldi	r19, 0x34	; 52
    2acc:	30 9f       	mul	r19, r16
    2ace:	c0 01       	movw	r24, r0
    2ad0:	31 9f       	mul	r19, r17
    2ad2:	90 0d       	add	r25, r0
    2ad4:	11 24       	eor	r1, r1
    2ad6:	86 5c       	subi	r24, 0xC6	; 198
    2ad8:	97 4d       	sbci	r25, 0xD7	; 215
				}
				if (motorLim[controller - MOTOR_A] == YES) {
						mlimit = 'Y';
				}

				sprintf(outbuf, format_MTR, currenttime, controller-31, micronValue,
    2ada:	9f 93       	push	r25
    2adc:	8f 93       	push	r24
    2ade:	1f 92       	push	r1
    2ae0:	2f 93       	push	r18
    2ae2:	1f 92       	push	r1
    2ae4:	2f 92       	push	r2
    2ae6:	c7 52       	subi	r28, 0x27	; 39
    2ae8:	dc 4f       	sbci	r29, 0xFC	; 252
    2aea:	88 81       	ld	r24, Y
    2aec:	c9 5d       	subi	r28, 0xD9	; 217
    2aee:	d3 40       	sbci	r29, 0x03	; 3
    2af0:	8f 93       	push	r24
    2af2:	c8 52       	subi	r28, 0x28	; 40
    2af4:	dc 4f       	sbci	r29, 0xFC	; 252
    2af6:	88 81       	ld	r24, Y
    2af8:	c8 5d       	subi	r28, 0xD8	; 216
    2afa:	d3 40       	sbci	r29, 0x03	; 3
    2afc:	8f 93       	push	r24
    2afe:	3f 92       	push	r3
    2b00:	4f 92       	push	r4
    2b02:	5f 92       	push	r5
    2b04:	6f 92       	push	r6
    2b06:	7f 92       	push	r7
    2b08:	8f 92       	push	r8
    2b0a:	9f 92       	push	r9
    2b0c:	af 92       	push	r10
    2b0e:	9f e1       	ldi	r25, 0x1F	; 31
    2b10:	e9 1a       	sub	r14, r25
    2b12:	f1 08       	sbc	r15, r1
    2b14:	ff 92       	push	r15
    2b16:	ef 92       	push	r14
    2b18:	ce 01       	movw	r24, r28
    2b1a:	86 5f       	subi	r24, 0xF6	; 246
    2b1c:	9e 4f       	sbci	r25, 0xFE	; 254
    2b1e:	9f 93       	push	r25
    2b20:	8f 93       	push	r24
    2b22:	8d 55       	subi	r24, 0x5D	; 93
    2b24:	9f 4f       	sbci	r25, 0xFF	; 255
    2b26:	9f 93       	push	r25
    2b28:	8f 93       	push	r24
    2b2a:	8c 5a       	subi	r24, 0xAC	; 172
    2b2c:	91 40       	sbci	r25, 0x01	; 1
    2b2e:	7c 01       	movw	r14, r24
    2b30:	9f 93       	push	r25
    2b32:	8f 93       	push	r24
    2b34:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
					micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
				printLine(outbuf);
    2b38:	c7 01       	movw	r24, r14
    2b3a:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
			printLine(outbuf);
			break;

		case 'd':			// copy of the above code
			for (i = 0; i < NMOTORS; i++) {
    2b3e:	b3 94       	inc	r11
    2b40:	cd bf       	out	0x3d, r28	; 61
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	01 c0       	rjmp	.+2      	; 0x2b48 <report+0x8fa>
	uint16_t motorCurrent;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	PID pid;

	switch(pcmd[cstack].cobject) {
    2b46:	b1 2c       	mov	r11, r1
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
			printLine(outbuf);
			break;

		case 'd':			// copy of the above code
			for (i = 0; i < NMOTORS; i++) {
    2b48:	92 e0       	ldi	r25, 0x02	; 2
    2b4a:	9b 15       	cp	r25, r11
    2b4c:	08 f0       	brcs	.+2      	; 0x2b50 <report+0x902>
    2b4e:	27 cf       	rjmp	.-434    	; 0x299e <report+0x750>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2b50:	f1 2c       	mov	r15, r1
    2b52:	b9 c3       	rjmp	.+1906   	; 0x32c6 <report+0x1078>
				printLine(outbuf);
			}
			break;

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	0e 94 01 2c 	call	0x5802	; 0x5802 <get_temperature>
    2b5a:	ab 01       	movw	r20, r22
    2b5c:	bc 01       	movw	r22, r24
    2b5e:	c0 53       	subi	r28, 0x30	; 48
    2b60:	dc 4f       	sbci	r29, 0xFC	; 252
    2b62:	48 83       	st	Y, r20
    2b64:	59 83       	std	Y+1, r21	; 0x01
    2b66:	6a 83       	std	Y+2, r22	; 0x02
    2b68:	7b 83       	std	Y+3, r23	; 0x03
    2b6a:	c0 5d       	subi	r28, 0xD0	; 208
    2b6c:	d3 40       	sbci	r29, 0x03	; 3
			h0 = get_humidity(0, t0);
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_humidity>
    2b74:	c6 2e       	mov	r12, r22
    2b76:	d7 2e       	mov	r13, r23
    2b78:	f8 2e       	mov	r15, r24
    2b7a:	e9 2e       	mov	r14, r25
			t1 = get_temperature(1);
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	0e 94 01 2c 	call	0x5802	; 0x5802 <get_temperature>
    2b82:	26 2e       	mov	r2, r22
    2b84:	37 2e       	mov	r3, r23
    2b86:	48 2e       	mov	r4, r24
    2b88:	59 2e       	mov	r5, r25
			h1 = get_humidity(1, t1);
    2b8a:	98 2f       	mov	r25, r24
    2b8c:	42 2d       	mov	r20, r2
    2b8e:	53 2d       	mov	r21, r3
    2b90:	69 2f       	mov	r22, r25
    2b92:	75 2d       	mov	r23, r5
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_humidity>
    2b9a:	ca 5f       	subi	r28, 0xFA	; 250
    2b9c:	db 4f       	sbci	r29, 0xFB	; 251
    2b9e:	68 83       	st	Y, r22
    2ba0:	c6 50       	subi	r28, 0x06	; 6
    2ba2:	d4 40       	sbci	r29, 0x04	; 4
    2ba4:	c9 5f       	subi	r28, 0xF9	; 249
    2ba6:	db 4f       	sbci	r29, 0xFB	; 251
    2ba8:	78 83       	st	Y, r23
    2baa:	c7 50       	subi	r28, 0x07	; 7
    2bac:	d4 40       	sbci	r29, 0x04	; 4
    2bae:	c8 5f       	subi	r28, 0xF8	; 248
    2bb0:	db 4f       	sbci	r29, 0xFB	; 251
    2bb2:	88 83       	st	Y, r24
    2bb4:	c8 50       	subi	r28, 0x08	; 8
    2bb6:	d4 40       	sbci	r29, 0x04	; 4
    2bb8:	c7 5f       	subi	r28, 0xF7	; 247
    2bba:	db 4f       	sbci	r29, 0xFB	; 251
    2bbc:	98 83       	st	Y, r25
    2bbe:	c9 50       	subi	r28, 0x09	; 9
    2bc0:	d4 40       	sbci	r29, 0x04	; 4
			t2 = get_temperature(2);
    2bc2:	82 e0       	ldi	r24, 0x02	; 2
    2bc4:	0e 94 01 2c 	call	0x5802	; 0x5802 <get_temperature>
    2bc8:	96 2e       	mov	r9, r22
    2bca:	87 2e       	mov	r8, r23
    2bcc:	78 2e       	mov	r7, r24
    2bce:	69 2e       	mov	r6, r25
			h2 = get_humidity(2, t2);
    2bd0:	98 2f       	mov	r25, r24
    2bd2:	49 2d       	mov	r20, r9
    2bd4:	58 2d       	mov	r21, r8
    2bd6:	69 2f       	mov	r22, r25
    2bd8:	76 2d       	mov	r23, r6
    2bda:	82 e0       	ldi	r24, 0x02	; 2
    2bdc:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_humidity>
    2be0:	c6 5f       	subi	r28, 0xF6	; 246
    2be2:	db 4f       	sbci	r29, 0xFB	; 251
    2be4:	68 83       	st	Y, r22
    2be6:	ca 50       	subi	r28, 0x0A	; 10
    2be8:	d4 40       	sbci	r29, 0x04	; 4
    2bea:	c5 5f       	subi	r28, 0xF5	; 245
    2bec:	db 4f       	sbci	r29, 0xFB	; 251
    2bee:	78 83       	st	Y, r23
    2bf0:	cb 50       	subi	r28, 0x0B	; 11
    2bf2:	d4 40       	sbci	r29, 0x04	; 4
    2bf4:	c4 5f       	subi	r28, 0xF4	; 244
    2bf6:	db 4f       	sbci	r29, 0xFB	; 251
    2bf8:	88 83       	st	Y, r24
    2bfa:	cc 50       	subi	r28, 0x0C	; 12
    2bfc:	d4 40       	sbci	r29, 0x04	; 4
    2bfe:	c3 5f       	subi	r28, 0xF3	; 243
    2c00:	db 4f       	sbci	r29, 0xFB	; 251
    2c02:	98 83       	st	Y, r25
    2c04:	cd 50       	subi	r28, 0x0D	; 13
    2c06:	d4 40       	sbci	r29, 0x04	; 4
			t3 = get_temperature(3);
    2c08:	83 e0       	ldi	r24, 0x03	; 3
    2c0a:	0e 94 01 2c 	call	0x5802	; 0x5802 <get_temperature>
    2c0e:	c2 5f       	subi	r28, 0xF2	; 242
    2c10:	db 4f       	sbci	r29, 0xFB	; 251
    2c12:	68 83       	st	Y, r22
    2c14:	ce 50       	subi	r28, 0x0E	; 14
    2c16:	d4 40       	sbci	r29, 0x04	; 4
    2c18:	c1 5f       	subi	r28, 0xF1	; 241
    2c1a:	db 4f       	sbci	r29, 0xFB	; 251
    2c1c:	78 83       	st	Y, r23
    2c1e:	cf 50       	subi	r28, 0x0F	; 15
    2c20:	d4 40       	sbci	r29, 0x04	; 4
    2c22:	c0 5f       	subi	r28, 0xF0	; 240
    2c24:	db 4f       	sbci	r29, 0xFB	; 251
    2c26:	88 83       	st	Y, r24
    2c28:	c0 51       	subi	r28, 0x10	; 16
    2c2a:	d4 40       	sbci	r29, 0x04	; 4
    2c2c:	cf 5e       	subi	r28, 0xEF	; 239
    2c2e:	db 4f       	sbci	r29, 0xFB	; 251
    2c30:	98 83       	st	Y, r25
    2c32:	c1 51       	subi	r28, 0x11	; 17
    2c34:	d4 40       	sbci	r29, 0x04	; 4
			get_time(currenttime);
    2c36:	5e 01       	movw	r10, r28
    2c38:	86 ef       	ldi	r24, 0xF6	; 246
    2c3a:	a8 1a       	sub	r10, r24
    2c3c:	8e ef       	ldi	r24, 0xFE	; 254
    2c3e:	b8 0a       	sbc	r11, r24
    2c40:	c5 01       	movw	r24, r10
    2c42:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    2c46:	24 e3       	ldi	r18, 0x34	; 52
    2c48:	20 9f       	mul	r18, r16
    2c4a:	c0 01       	movw	r24, r0
    2c4c:	21 9f       	mul	r18, r17
    2c4e:	90 0d       	add	r25, r0
    2c50:	11 24       	eor	r1, r1
    2c52:	86 5c       	subi	r24, 0xC6	; 198
    2c54:	97 4d       	sbci	r25, 0xD7	; 215
    2c56:	9f 93       	push	r25
    2c58:	8f 93       	push	r24
    2c5a:	cf 5e       	subi	r28, 0xEF	; 239
    2c5c:	db 4f       	sbci	r29, 0xFB	; 251
    2c5e:	98 81       	ld	r25, Y
    2c60:	c1 51       	subi	r28, 0x11	; 17
    2c62:	d4 40       	sbci	r29, 0x04	; 4
    2c64:	9f 93       	push	r25
    2c66:	c0 5f       	subi	r28, 0xF0	; 240
    2c68:	db 4f       	sbci	r29, 0xFB	; 251
    2c6a:	88 81       	ld	r24, Y
    2c6c:	c0 51       	subi	r28, 0x10	; 16
    2c6e:	d4 40       	sbci	r29, 0x04	; 4
    2c70:	8f 93       	push	r24
    2c72:	c1 5f       	subi	r28, 0xF1	; 241
    2c74:	db 4f       	sbci	r29, 0xFB	; 251
    2c76:	98 81       	ld	r25, Y
    2c78:	cf 50       	subi	r28, 0x0F	; 15
    2c7a:	d4 40       	sbci	r29, 0x04	; 4
    2c7c:	9f 93       	push	r25
    2c7e:	c2 5f       	subi	r28, 0xF2	; 242
    2c80:	db 4f       	sbci	r29, 0xFB	; 251
    2c82:	88 81       	ld	r24, Y
    2c84:	ce 50       	subi	r28, 0x0E	; 14
    2c86:	d4 40       	sbci	r29, 0x04	; 4
    2c88:	8f 93       	push	r24
    2c8a:	c3 5f       	subi	r28, 0xF3	; 243
    2c8c:	db 4f       	sbci	r29, 0xFB	; 251
    2c8e:	98 81       	ld	r25, Y
    2c90:	cd 50       	subi	r28, 0x0D	; 13
    2c92:	d4 40       	sbci	r29, 0x04	; 4
    2c94:	9f 93       	push	r25
    2c96:	c4 5f       	subi	r28, 0xF4	; 244
    2c98:	db 4f       	sbci	r29, 0xFB	; 251
    2c9a:	88 81       	ld	r24, Y
    2c9c:	cc 50       	subi	r28, 0x0C	; 12
    2c9e:	d4 40       	sbci	r29, 0x04	; 4
    2ca0:	8f 93       	push	r24
    2ca2:	c5 5f       	subi	r28, 0xF5	; 245
    2ca4:	db 4f       	sbci	r29, 0xFB	; 251
    2ca6:	98 81       	ld	r25, Y
    2ca8:	cb 50       	subi	r28, 0x0B	; 11
    2caa:	d4 40       	sbci	r29, 0x04	; 4
    2cac:	9f 93       	push	r25
    2cae:	c6 5f       	subi	r28, 0xF6	; 246
    2cb0:	db 4f       	sbci	r29, 0xFB	; 251
    2cb2:	88 81       	ld	r24, Y
    2cb4:	ca 50       	subi	r28, 0x0A	; 10
    2cb6:	d4 40       	sbci	r29, 0x04	; 4
    2cb8:	8f 93       	push	r24
    2cba:	6f 92       	push	r6
    2cbc:	7f 92       	push	r7
    2cbe:	8f 92       	push	r8
    2cc0:	9f 92       	push	r9
    2cc2:	c7 5f       	subi	r28, 0xF7	; 247
    2cc4:	db 4f       	sbci	r29, 0xFB	; 251
    2cc6:	98 81       	ld	r25, Y
    2cc8:	c9 50       	subi	r28, 0x09	; 9
    2cca:	d4 40       	sbci	r29, 0x04	; 4
    2ccc:	9f 93       	push	r25
    2cce:	c8 5f       	subi	r28, 0xF8	; 248
    2cd0:	db 4f       	sbci	r29, 0xFB	; 251
    2cd2:	88 81       	ld	r24, Y
    2cd4:	c8 50       	subi	r28, 0x08	; 8
    2cd6:	d4 40       	sbci	r29, 0x04	; 4
    2cd8:	8f 93       	push	r24
    2cda:	c9 5f       	subi	r28, 0xF9	; 249
    2cdc:	db 4f       	sbci	r29, 0xFB	; 251
    2cde:	98 81       	ld	r25, Y
    2ce0:	c7 50       	subi	r28, 0x07	; 7
    2ce2:	d4 40       	sbci	r29, 0x04	; 4
    2ce4:	9f 93       	push	r25
    2ce6:	ca 5f       	subi	r28, 0xFA	; 250
    2ce8:	db 4f       	sbci	r29, 0xFB	; 251
    2cea:	88 81       	ld	r24, Y
    2cec:	c6 50       	subi	r28, 0x06	; 6
    2cee:	d4 40       	sbci	r29, 0x04	; 4
    2cf0:	8f 93       	push	r24
    2cf2:	5f 92       	push	r5
    2cf4:	4f 92       	push	r4
    2cf6:	3f 92       	push	r3
    2cf8:	2f 92       	push	r2
    2cfa:	ef 92       	push	r14
    2cfc:	ff 92       	push	r15
    2cfe:	df 92       	push	r13
    2d00:	cf 92       	push	r12
    2d02:	cd 52       	subi	r28, 0x2D	; 45
    2d04:	dc 4f       	sbci	r29, 0xFC	; 252
    2d06:	88 81       	ld	r24, Y
    2d08:	c3 5d       	subi	r28, 0xD3	; 211
    2d0a:	d3 40       	sbci	r29, 0x03	; 3
    2d0c:	8f 93       	push	r24
    2d0e:	ce 52       	subi	r28, 0x2E	; 46
    2d10:	dc 4f       	sbci	r29, 0xFC	; 252
    2d12:	88 81       	ld	r24, Y
    2d14:	c2 5d       	subi	r28, 0xD2	; 210
    2d16:	d3 40       	sbci	r29, 0x03	; 3
    2d18:	8f 93       	push	r24
    2d1a:	cf 52       	subi	r28, 0x2F	; 47
    2d1c:	dc 4f       	sbci	r29, 0xFC	; 252
    2d1e:	88 81       	ld	r24, Y
    2d20:	c1 5d       	subi	r28, 0xD1	; 209
    2d22:	d3 40       	sbci	r29, 0x03	; 3
    2d24:	8f 93       	push	r24
    2d26:	c0 53       	subi	r28, 0x30	; 48
    2d28:	dc 4f       	sbci	r29, 0xFC	; 252
    2d2a:	88 81       	ld	r24, Y
    2d2c:	c0 5d       	subi	r28, 0xD0	; 208
    2d2e:	d3 40       	sbci	r29, 0x03	; 3
    2d30:	8f 93       	push	r24
    2d32:	bf 92       	push	r11
    2d34:	af 92       	push	r10
    2d36:	ce 01       	movw	r24, r28
    2d38:	82 5a       	subi	r24, 0xA2	; 162
    2d3a:	9e 4f       	sbci	r25, 0xFE	; 254
    2d3c:	9f 93       	push	r25
    2d3e:	8f 93       	push	r24
    2d40:	8e 01       	movw	r16, r28
    2d42:	0f 5f       	subi	r16, 0xFF	; 255
    2d44:	1f 4f       	sbci	r17, 0xFF	; 255
    2d46:	1f 93       	push	r17
    2d48:	0f 93       	push	r16
    2d4a:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			printLine(outbuf);
    2d4e:	cd bf       	out	0x3d, r28	; 61
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	c8 01       	movw	r24, r16
    2d54:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
			writestr_OLED(1, "Temp & Humidity", 1);
    2d58:	41 e0       	ldi	r20, 0x01	; 1
    2d5a:	66 e1       	ldi	r22, 0x16	; 22
    2d5c:	76 eb       	ldi	r23, 0xB6	; 182
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    2d64:	c0 53       	subi	r28, 0x30	; 48
    2d66:	dc 4f       	sbci	r29, 0xFC	; 252
    2d68:	b8 80       	ld	r11, Y
    2d6a:	c0 5d       	subi	r28, 0xD0	; 208
    2d6c:	d3 40       	sbci	r29, 0x03	; 3
    2d6e:	cf 52       	subi	r28, 0x2F	; 47
    2d70:	dc 4f       	sbci	r29, 0xFC	; 252
    2d72:	a8 80       	ld	r10, Y
    2d74:	c1 5d       	subi	r28, 0xD1	; 209
    2d76:	d3 40       	sbci	r29, 0x03	; 3
    2d78:	ce 52       	subi	r28, 0x2E	; 46
    2d7a:	dc 4f       	sbci	r29, 0xFC	; 252
    2d7c:	98 80       	ld	r9, Y
    2d7e:	c2 5d       	subi	r28, 0xD2	; 210
    2d80:	d3 40       	sbci	r29, 0x03	; 3
    2d82:	cd 52       	subi	r28, 0x2D	; 45
    2d84:	dc 4f       	sbci	r29, 0xFC	; 252
    2d86:	88 80       	ld	r8, Y
    2d88:	c3 5d       	subi	r28, 0xD3	; 211
    2d8a:	d3 40       	sbci	r29, 0x03	; 3
    2d8c:	26 e6       	ldi	r18, 0x66	; 102
    2d8e:	36 e6       	ldi	r19, 0x66	; 102
    2d90:	46 ee       	ldi	r20, 0xE6	; 230
    2d92:	5f e3       	ldi	r21, 0x3F	; 63
    2d94:	6b 2d       	mov	r22, r11
    2d96:	7a 2d       	mov	r23, r10
    2d98:	89 2d       	mov	r24, r9
    2d9a:	98 2d       	mov	r25, r8
    2d9c:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
    2da0:	ef 92       	push	r14
    2da2:	ff 92       	push	r15
    2da4:	df 92       	push	r13
    2da6:	cf 92       	push	r12
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	40 e0       	ldi	r20, 0x00	; 0
    2dae:	52 e4       	ldi	r21, 0x42	; 66
    2db0:	0e 94 69 30 	call	0x60d2	; 0x60d2 <__addsf3>
    2db4:	9f 93       	push	r25
    2db6:	8f 93       	push	r24
    2db8:	7f 93       	push	r23
    2dba:	6f 93       	push	r22
    2dbc:	8f 92       	push	r8
    2dbe:	9f 92       	push	r9
    2dc0:	af 92       	push	r10
    2dc2:	bf 92       	push	r11
    2dc4:	86 e2       	ldi	r24, 0x26	; 38
    2dc6:	96 eb       	ldi	r25, 0xB6	; 182
    2dc8:	9f 93       	push	r25
    2dca:	8f 93       	push	r24
    2dcc:	1f 93       	push	r17
    2dce:	0f 93       	push	r16
    2dd0:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			writestr_OLED(1, outbuf, 2);
    2dd4:	42 e0       	ldi	r20, 0x02	; 2
    2dd6:	b8 01       	movw	r22, r16
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			break;
    2dde:	cd bf       	out	0x3d, r28	; 61
    2de0:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2de2:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    2de4:	70 c2       	rjmp	.+1248   	; 0x32c6 <report+0x1078>

		case 'n':					// LN2 controller status
			if (get_ln2(ln2status) != ERROR) {
    2de6:	ce 01       	movw	r24, r28
    2de8:	81 5a       	subi	r24, 0xA1	; 161
    2dea:	9c 4f       	sbci	r25, 0xFC	; 252
    2dec:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <get_ln2>
    2df0:	83 36       	cpi	r24, 0x63	; 99
    2df2:	09 f4       	brne	.+2      	; 0x2df6 <report+0xba8>
    2df4:	67 c2       	rjmp	.+1230   	; 0x32c4 <report+0x1076>
				get_time(currenttime);
    2df6:	8e 01       	movw	r16, r28
    2df8:	06 5f       	subi	r16, 0xF6	; 246
    2dfa:	1e 4f       	sbci	r17, 0xFE	; 254
    2dfc:	c8 01       	movw	r24, r16
    2dfe:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
				sprintf(outbuf, format_LN2, currenttime, ln2status);
    2e02:	ce 01       	movw	r24, r28
    2e04:	81 5a       	subi	r24, 0xA1	; 161
    2e06:	9c 4f       	sbci	r25, 0xFC	; 252
    2e08:	9f 93       	push	r25
    2e0a:	8f 93       	push	r24
    2e0c:	1f 93       	push	r17
    2e0e:	0f 93       	push	r16
    2e10:	8c 5b       	subi	r24, 0xBC	; 188
    2e12:	91 40       	sbci	r25, 0x01	; 1
    2e14:	9f 93       	push	r25
    2e16:	8f 93       	push	r24
    2e18:	09 50       	subi	r16, 0x09	; 9
    2e1a:	11 40       	sbci	r17, 0x01	; 1
    2e1c:	1f 93       	push	r17
    2e1e:	0f 93       	push	r16
    2e20:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
				printLine(outbuf);
    2e24:	c8 01       	movw	r24, r16
    2e26:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
    2e2a:	cd bf       	out	0x3d, r28	; 61
    2e2c:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2e2e:	f1 2c       	mov	r15, r1
    2e30:	4a c2       	rjmp	.+1172   	; 0x32c6 <report+0x1078>
				printLine(outbuf);
			}
			break;

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    2e32:	ae 01       	movw	r20, r28
    2e34:	4e 51       	subi	r20, 0x1E	; 30
    2e36:	5c 4f       	sbci	r21, 0xFC	; 252
    2e38:	be 01       	movw	r22, r28
    2e3a:	62 52       	subi	r22, 0x22	; 34
    2e3c:	7c 4f       	sbci	r23, 0xFC	; 252
    2e3e:	ce 01       	movw	r24, r28
    2e40:	86 52       	subi	r24, 0x26	; 38
    2e42:	9c 4f       	sbci	r25, 0xFC	; 252
    2e44:	0e 94 1c 0c 	call	0x1838	; 0x1838 <get_orientation>
			get_time(currenttime);
    2e48:	7e 01       	movw	r14, r28
    2e4a:	96 ef       	ldi	r25, 0xF6	; 246
    2e4c:	e9 1a       	sub	r14, r25
    2e4e:	9e ef       	ldi	r25, 0xFE	; 254
    2e50:	f9 0a       	sbc	r15, r25
    2e52:	c7 01       	movw	r24, r14
    2e54:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
    2e58:	24 e3       	ldi	r18, 0x34	; 52
    2e5a:	20 9f       	mul	r18, r16
    2e5c:	c0 01       	movw	r24, r0
    2e5e:	21 9f       	mul	r18, r17
    2e60:	90 0d       	add	r25, r0
    2e62:	11 24       	eor	r1, r1
    2e64:	86 5c       	subi	r24, 0xC6	; 198
    2e66:	97 4d       	sbci	r25, 0xD7	; 215
    2e68:	9f 93       	push	r25
    2e6a:	8f 93       	push	r24
    2e6c:	cb 51       	subi	r28, 0x1B	; 27
    2e6e:	dc 4f       	sbci	r29, 0xFC	; 252
    2e70:	88 81       	ld	r24, Y
    2e72:	c5 5e       	subi	r28, 0xE5	; 229
    2e74:	d3 40       	sbci	r29, 0x03	; 3
    2e76:	8f 93       	push	r24
    2e78:	cc 51       	subi	r28, 0x1C	; 28
    2e7a:	dc 4f       	sbci	r29, 0xFC	; 252
    2e7c:	88 81       	ld	r24, Y
    2e7e:	c4 5e       	subi	r28, 0xE4	; 228
    2e80:	d3 40       	sbci	r29, 0x03	; 3
    2e82:	8f 93       	push	r24
    2e84:	cd 51       	subi	r28, 0x1D	; 29
    2e86:	dc 4f       	sbci	r29, 0xFC	; 252
    2e88:	88 81       	ld	r24, Y
    2e8a:	c3 5e       	subi	r28, 0xE3	; 227
    2e8c:	d3 40       	sbci	r29, 0x03	; 3
    2e8e:	8f 93       	push	r24
    2e90:	ce 51       	subi	r28, 0x1E	; 30
    2e92:	dc 4f       	sbci	r29, 0xFC	; 252
    2e94:	88 81       	ld	r24, Y
    2e96:	c2 5e       	subi	r28, 0xE2	; 226
    2e98:	d3 40       	sbci	r29, 0x03	; 3
    2e9a:	8f 93       	push	r24
    2e9c:	cf 51       	subi	r28, 0x1F	; 31
    2e9e:	dc 4f       	sbci	r29, 0xFC	; 252
    2ea0:	88 81       	ld	r24, Y
    2ea2:	c1 5e       	subi	r28, 0xE1	; 225
    2ea4:	d3 40       	sbci	r29, 0x03	; 3
    2ea6:	8f 93       	push	r24
    2ea8:	c0 52       	subi	r28, 0x20	; 32
    2eaa:	dc 4f       	sbci	r29, 0xFC	; 252
    2eac:	88 81       	ld	r24, Y
    2eae:	c0 5e       	subi	r28, 0xE0	; 224
    2eb0:	d3 40       	sbci	r29, 0x03	; 3
    2eb2:	8f 93       	push	r24
    2eb4:	c1 52       	subi	r28, 0x21	; 33
    2eb6:	dc 4f       	sbci	r29, 0xFC	; 252
    2eb8:	88 81       	ld	r24, Y
    2eba:	cf 5d       	subi	r28, 0xDF	; 223
    2ebc:	d3 40       	sbci	r29, 0x03	; 3
    2ebe:	8f 93       	push	r24
    2ec0:	c2 52       	subi	r28, 0x22	; 34
    2ec2:	dc 4f       	sbci	r29, 0xFC	; 252
    2ec4:	88 81       	ld	r24, Y
    2ec6:	ce 5d       	subi	r28, 0xDE	; 222
    2ec8:	d3 40       	sbci	r29, 0x03	; 3
    2eca:	8f 93       	push	r24
    2ecc:	c3 52       	subi	r28, 0x23	; 35
    2ece:	dc 4f       	sbci	r29, 0xFC	; 252
    2ed0:	88 81       	ld	r24, Y
    2ed2:	cd 5d       	subi	r28, 0xDD	; 221
    2ed4:	d3 40       	sbci	r29, 0x03	; 3
    2ed6:	8f 93       	push	r24
    2ed8:	c4 52       	subi	r28, 0x24	; 36
    2eda:	dc 4f       	sbci	r29, 0xFC	; 252
    2edc:	88 81       	ld	r24, Y
    2ede:	cc 5d       	subi	r28, 0xDC	; 220
    2ee0:	d3 40       	sbci	r29, 0x03	; 3
    2ee2:	8f 93       	push	r24
    2ee4:	c5 52       	subi	r28, 0x25	; 37
    2ee6:	dc 4f       	sbci	r29, 0xFC	; 252
    2ee8:	88 81       	ld	r24, Y
    2eea:	cb 5d       	subi	r28, 0xDB	; 219
    2eec:	d3 40       	sbci	r29, 0x03	; 3
    2eee:	8f 93       	push	r24
    2ef0:	c6 52       	subi	r28, 0x26	; 38
    2ef2:	dc 4f       	sbci	r29, 0xFC	; 252
    2ef4:	88 81       	ld	r24, Y
    2ef6:	ca 5d       	subi	r28, 0xDA	; 218
    2ef8:	d3 40       	sbci	r29, 0x03	; 3
    2efa:	8f 93       	push	r24
    2efc:	ff 92       	push	r15
    2efe:	ef 92       	push	r14
    2f00:	ce 01       	movw	r24, r28
    2f02:	8a 57       	subi	r24, 0x7A	; 122
    2f04:	9d 4f       	sbci	r25, 0xFD	; 253
    2f06:	9f 93       	push	r25
    2f08:	8f 93       	push	r24
    2f0a:	8e 01       	movw	r16, r28
    2f0c:	0f 5f       	subi	r16, 0xFF	; 255
    2f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f10:	1f 93       	push	r17
    2f12:	0f 93       	push	r16
    2f14:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			printLine(outbuf);
    2f18:	c8 01       	movw	r24, r16
    2f1a:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
			writestr_OLED(1, "Orientation", 1);
    2f1e:	41 e0       	ldi	r20, 0x01	; 1
    2f20:	6c e3       	ldi	r22, 0x3C	; 60
    2f22:	76 eb       	ldi	r23, 0xB6	; 182
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    2f2a:	cb 51       	subi	r28, 0x1B	; 27
    2f2c:	dc 4f       	sbci	r29, 0xFC	; 252
    2f2e:	88 81       	ld	r24, Y
    2f30:	c5 5e       	subi	r28, 0xE5	; 229
    2f32:	d3 40       	sbci	r29, 0x03	; 3
    2f34:	8f 93       	push	r24
    2f36:	cc 51       	subi	r28, 0x1C	; 28
    2f38:	dc 4f       	sbci	r29, 0xFC	; 252
    2f3a:	88 81       	ld	r24, Y
    2f3c:	c4 5e       	subi	r28, 0xE4	; 228
    2f3e:	d3 40       	sbci	r29, 0x03	; 3
    2f40:	8f 93       	push	r24
    2f42:	cd 51       	subi	r28, 0x1D	; 29
    2f44:	dc 4f       	sbci	r29, 0xFC	; 252
    2f46:	88 81       	ld	r24, Y
    2f48:	c3 5e       	subi	r28, 0xE3	; 227
    2f4a:	d3 40       	sbci	r29, 0x03	; 3
    2f4c:	8f 93       	push	r24
    2f4e:	ce 51       	subi	r28, 0x1E	; 30
    2f50:	dc 4f       	sbci	r29, 0xFC	; 252
    2f52:	88 81       	ld	r24, Y
    2f54:	c2 5e       	subi	r28, 0xE2	; 226
    2f56:	d3 40       	sbci	r29, 0x03	; 3
    2f58:	8f 93       	push	r24
    2f5a:	cf 51       	subi	r28, 0x1F	; 31
    2f5c:	dc 4f       	sbci	r29, 0xFC	; 252
    2f5e:	88 81       	ld	r24, Y
    2f60:	c1 5e       	subi	r28, 0xE1	; 225
    2f62:	d3 40       	sbci	r29, 0x03	; 3
    2f64:	8f 93       	push	r24
    2f66:	c0 52       	subi	r28, 0x20	; 32
    2f68:	dc 4f       	sbci	r29, 0xFC	; 252
    2f6a:	88 81       	ld	r24, Y
    2f6c:	c0 5e       	subi	r28, 0xE0	; 224
    2f6e:	d3 40       	sbci	r29, 0x03	; 3
    2f70:	8f 93       	push	r24
    2f72:	c1 52       	subi	r28, 0x21	; 33
    2f74:	dc 4f       	sbci	r29, 0xFC	; 252
    2f76:	88 81       	ld	r24, Y
    2f78:	cf 5d       	subi	r28, 0xDF	; 223
    2f7a:	d3 40       	sbci	r29, 0x03	; 3
    2f7c:	8f 93       	push	r24
    2f7e:	c2 52       	subi	r28, 0x22	; 34
    2f80:	dc 4f       	sbci	r29, 0xFC	; 252
    2f82:	88 81       	ld	r24, Y
    2f84:	ce 5d       	subi	r28, 0xDE	; 222
    2f86:	d3 40       	sbci	r29, 0x03	; 3
    2f88:	8f 93       	push	r24
    2f8a:	c3 52       	subi	r28, 0x23	; 35
    2f8c:	dc 4f       	sbci	r29, 0xFC	; 252
    2f8e:	88 81       	ld	r24, Y
    2f90:	cd 5d       	subi	r28, 0xDD	; 221
    2f92:	d3 40       	sbci	r29, 0x03	; 3
    2f94:	8f 93       	push	r24
    2f96:	c4 52       	subi	r28, 0x24	; 36
    2f98:	dc 4f       	sbci	r29, 0xFC	; 252
    2f9a:	88 81       	ld	r24, Y
    2f9c:	cc 5d       	subi	r28, 0xDC	; 220
    2f9e:	d3 40       	sbci	r29, 0x03	; 3
    2fa0:	8f 93       	push	r24
    2fa2:	c5 52       	subi	r28, 0x25	; 37
    2fa4:	dc 4f       	sbci	r29, 0xFC	; 252
    2fa6:	88 81       	ld	r24, Y
    2fa8:	cb 5d       	subi	r28, 0xDB	; 219
    2faa:	d3 40       	sbci	r29, 0x03	; 3
    2fac:	8f 93       	push	r24
    2fae:	c6 52       	subi	r28, 0x26	; 38
    2fb0:	dc 4f       	sbci	r29, 0xFC	; 252
    2fb2:	88 81       	ld	r24, Y
    2fb4:	ca 5d       	subi	r28, 0xDA	; 218
    2fb6:	d3 40       	sbci	r29, 0x03	; 3
    2fb8:	8f 93       	push	r24
    2fba:	ce 01       	movw	r24, r28
    2fbc:	8e 55       	subi	r24, 0x5E	; 94
    2fbe:	9d 4f       	sbci	r25, 0xFD	; 253
    2fc0:	9f 93       	push	r25
    2fc2:	8f 93       	push	r24
    2fc4:	1f 93       	push	r17
    2fc6:	0f 93       	push	r16
    2fc8:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			writestr_OLED(1, outbuf, 2);
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	de bf       	out	0x3e, r29	; 62
    2fd0:	42 e0       	ldi	r20, 0x02	; 2
    2fd2:	b8 01       	movw	r22, r16
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2fda:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    2fdc:	74 c1       	rjmp	.+744    	; 0x32c6 <report+0x1078>

		case 'p':					// Pneumatics
			get_time(currenttime);
    2fde:	7e 01       	movw	r14, r28
    2fe0:	96 ef       	ldi	r25, 0xF6	; 246
    2fe2:	e9 1a       	sub	r14, r25
    2fe4:	9e ef       	ldi	r25, 0xFE	; 254
    2fe6:	f9 0a       	sbc	r15, r25
    2fe8:	c7 01       	movw	r24, r14
    2fea:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
			read_PNEUSensors(&shutter, &left, &right, &air);
    2fee:	9e 01       	movw	r18, r28
    2ff0:	23 5a       	subi	r18, 0xA3	; 163
    2ff2:	3e 4f       	sbci	r19, 0xFE	; 254
    2ff4:	ae 01       	movw	r20, r28
    2ff6:	44 5a       	subi	r20, 0xA4	; 164
    2ff8:	5e 4f       	sbci	r21, 0xFE	; 254
    2ffa:	be 01       	movw	r22, r28
    2ffc:	65 5a       	subi	r22, 0xA5	; 165
    2ffe:	7e 4f       	sbci	r23, 0xFE	; 254
    3000:	ce 01       	movw	r24, r28
    3002:	86 5a       	subi	r24, 0xA6	; 166
    3004:	9e 4f       	sbci	r25, 0xFE	; 254
    3006:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <read_PNEUSensors>
			sprintf(outbuf, format_PNU, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    300a:	24 e3       	ldi	r18, 0x34	; 52
    300c:	20 9f       	mul	r18, r16
    300e:	c0 01       	movw	r24, r0
    3010:	21 9f       	mul	r18, r17
    3012:	90 0d       	add	r25, r0
    3014:	11 24       	eor	r1, r1
    3016:	86 5c       	subi	r24, 0xC6	; 198
    3018:	97 4d       	sbci	r25, 0xD7	; 215
    301a:	9f 93       	push	r25
    301c:	8f 93       	push	r24
    301e:	c3 5a       	subi	r28, 0xA3	; 163
    3020:	de 4f       	sbci	r29, 0xFE	; 254
    3022:	88 81       	ld	r24, Y
    3024:	cd 55       	subi	r28, 0x5D	; 93
    3026:	d1 40       	sbci	r29, 0x01	; 1
    3028:	1f 92       	push	r1
    302a:	8f 93       	push	r24
    302c:	c4 5a       	subi	r28, 0xA4	; 164
    302e:	de 4f       	sbci	r29, 0xFE	; 254
    3030:	88 81       	ld	r24, Y
    3032:	cc 55       	subi	r28, 0x5C	; 92
    3034:	d1 40       	sbci	r29, 0x01	; 1
    3036:	1f 92       	push	r1
    3038:	8f 93       	push	r24
    303a:	c5 5a       	subi	r28, 0xA5	; 165
    303c:	de 4f       	sbci	r29, 0xFE	; 254
    303e:	88 81       	ld	r24, Y
    3040:	cb 55       	subi	r28, 0x5B	; 91
    3042:	d1 40       	sbci	r29, 0x01	; 1
    3044:	1f 92       	push	r1
    3046:	8f 93       	push	r24
    3048:	c6 5a       	subi	r28, 0xA6	; 166
    304a:	de 4f       	sbci	r29, 0xFE	; 254
    304c:	88 81       	ld	r24, Y
    304e:	ca 55       	subi	r28, 0x5A	; 90
    3050:	d1 40       	sbci	r29, 0x01	; 1
    3052:	1f 92       	push	r1
    3054:	8f 93       	push	r24
    3056:	ff 92       	push	r15
    3058:	ef 92       	push	r14
    305a:	ce 01       	movw	r24, r28
    305c:	8c 54       	subi	r24, 0x4C	; 76
    305e:	9d 4f       	sbci	r25, 0xFD	; 253
    3060:	9f 93       	push	r25
    3062:	8f 93       	push	r24
    3064:	8e 01       	movw	r16, r28
    3066:	0f 5f       	subi	r16, 0xFF	; 255
    3068:	1f 4f       	sbci	r17, 0xFF	; 255
    306a:	1f 93       	push	r17
    306c:	0f 93       	push	r16
    306e:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			printLine(outbuf);
    3072:	c8 01       	movw	r24, r16
    3074:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
			sprintf(outbuf, dformat_PN1, left, right);
    3078:	c4 5a       	subi	r28, 0xA4	; 164
    307a:	de 4f       	sbci	r29, 0xFE	; 254
    307c:	88 81       	ld	r24, Y
    307e:	cc 55       	subi	r28, 0x5C	; 92
    3080:	d1 40       	sbci	r29, 0x01	; 1
    3082:	1f 92       	push	r1
    3084:	8f 93       	push	r24
    3086:	c5 5a       	subi	r28, 0xA5	; 165
    3088:	de 4f       	sbci	r29, 0xFE	; 254
    308a:	88 81       	ld	r24, Y
    308c:	cb 55       	subi	r28, 0x5B	; 91
    308e:	d1 40       	sbci	r29, 0x01	; 1
    3090:	1f 92       	push	r1
    3092:	8f 93       	push	r24
    3094:	ce 01       	movw	r24, r28
    3096:	8f 51       	subi	r24, 0x1F	; 31
    3098:	9d 4f       	sbci	r25, 0xFD	; 253
    309a:	9f 93       	push	r25
    309c:	8f 93       	push	r24
    309e:	1f 93       	push	r17
    30a0:	0f 93       	push	r16
    30a2:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			writestr_OLED(1, outbuf, 1);
    30a6:	41 e0       	ldi	r20, 0x01	; 1
    30a8:	b8 01       	movw	r22, r16
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    30b0:	c3 5a       	subi	r28, 0xA3	; 163
    30b2:	de 4f       	sbci	r29, 0xFE	; 254
    30b4:	88 81       	ld	r24, Y
    30b6:	cd 55       	subi	r28, 0x5D	; 93
    30b8:	d1 40       	sbci	r29, 0x01	; 1
    30ba:	1f 92       	push	r1
    30bc:	8f 93       	push	r24
    30be:	c6 5a       	subi	r28, 0xA6	; 166
    30c0:	de 4f       	sbci	r29, 0xFE	; 254
    30c2:	88 81       	ld	r24, Y
    30c4:	ca 55       	subi	r28, 0x5A	; 90
    30c6:	d1 40       	sbci	r29, 0x01	; 1
    30c8:	1f 92       	push	r1
    30ca:	8f 93       	push	r24
    30cc:	ce 01       	movw	r24, r28
    30ce:	8c 50       	subi	r24, 0x0C	; 12
    30d0:	9d 4f       	sbci	r25, 0xFD	; 253
    30d2:	9f 93       	push	r25
    30d4:	8f 93       	push	r24
    30d6:	1f 93       	push	r17
    30d8:	0f 93       	push	r16
    30da:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			writestr_OLED(1, outbuf, 2);
    30de:	cd bf       	out	0x3d, r28	; 61
    30e0:	de bf       	out	0x3e, r29	; 62
    30e2:	42 e0       	ldi	r20, 0x02	; 2
    30e4:	b8 01       	movw	r22, r16
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    30ec:	f1 2c       	mov	r15, r1
			printLine(outbuf);
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    30ee:	eb c0       	rjmp	.+470    	; 0x32c6 <report+0x1078>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    30f0:	7e 01       	movw	r14, r28
    30f2:	96 ef       	ldi	r25, 0xF6	; 246
    30f4:	e9 1a       	sub	r14, r25
    30f6:	9e ef       	ldi	r25, 0xFE	; 254
    30f8:	f9 0a       	sbc	r15, r25
    30fa:	c7 01       	movw	r24, r14
    30fc:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
			get_SETTIME(lastsettime);
    3100:	6e 01       	movw	r12, r28
    3102:	82 ee       	ldi	r24, 0xE2	; 226
    3104:	c8 1a       	sub	r12, r24
    3106:	8e ef       	ldi	r24, 0xFE	; 254
    3108:	d8 0a       	sbc	r13, r24
    310a:	c6 01       	movw	r24, r12
    310c:	0e 94 03 09 	call	0x1206	; 0x1206 <get_SETTIME>
			get_BOOTTIME(boottime);
    3110:	5e 01       	movw	r10, r28
    3112:	9e ec       	ldi	r25, 0xCE	; 206
    3114:	a9 1a       	sub	r10, r25
    3116:	9e ef       	ldi	r25, 0xFE	; 254
    3118:	b9 0a       	sbc	r11, r25
    311a:	c5 01       	movw	r24, r10
    311c:	0e 94 35 08 	call	0x106a	; 0x106a <get_BOOTTIME>
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    3120:	24 e3       	ldi	r18, 0x34	; 52
    3122:	20 9f       	mul	r18, r16
    3124:	c0 01       	movw	r24, r0
    3126:	21 9f       	mul	r18, r17
    3128:	90 0d       	add	r25, r0
    312a:	11 24       	eor	r1, r1
    312c:	86 5c       	subi	r24, 0xC6	; 198
    312e:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			get_SETTIME(lastsettime);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
    3130:	9f 93       	push	r25
    3132:	8f 93       	push	r24
    3134:	bf 92       	push	r11
    3136:	af 92       	push	r10
    3138:	df 92       	push	r13
    313a:	cf 92       	push	r12
    313c:	ff 92       	push	r15
    313e:	ef 92       	push	r14
    3140:	ce 01       	movw	r24, r28
    3142:	89 5f       	subi	r24, 0xF9	; 249
    3144:	9c 4f       	sbci	r25, 0xFC	; 252
    3146:	9f 93       	push	r25
    3148:	8f 93       	push	r24
    314a:	8e 01       	movw	r16, r28
    314c:	0f 5f       	subi	r16, 0xFF	; 255
    314e:	1f 4f       	sbci	r17, 0xFF	; 255
    3150:	1f 93       	push	r17
    3152:	0f 93       	push	r16
    3154:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
    3158:	c8 01       	movw	r24, r16
    315a:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
			writestr_OLED(1, "Time", 1);
    315e:	41 e0       	ldi	r20, 0x01	; 1
    3160:	68 e4       	ldi	r22, 0x48	; 72
    3162:	76 eb       	ldi	r23, 0xB6	; 182
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    316a:	b7 01       	movw	r22, r14
    316c:	65 5f       	subi	r22, 0xF5	; 245
    316e:	7f 4f       	sbci	r23, 0xFF	; 255
    3170:	42 e0       	ldi	r20, 0x02	; 2
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			break;
    3178:	cd bf       	out	0x3d, r28	; 61
    317a:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    317c:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    317e:	a3 c0       	rjmp	.+326    	; 0x32c6 <report+0x1078>

		case 'v':					// Vacuum
			redvac = read_ionpump(REDPUMP);
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	0e 94 37 0a 	call	0x146e	; 0x146e <read_ionpump>
    3186:	d6 2e       	mov	r13, r22
    3188:	c7 2e       	mov	r12, r23
    318a:	b8 2e       	mov	r11, r24
    318c:	a9 2e       	mov	r10, r25
			bluvac = read_ionpump(BLUEPUMP);
    318e:	82 e0       	ldi	r24, 0x02	; 2
    3190:	0e 94 37 0a 	call	0x146e	; 0x146e <read_ionpump>
    3194:	96 2e       	mov	r9, r22
    3196:	87 2e       	mov	r8, r23
    3198:	78 2e       	mov	r7, r24
    319a:	69 2e       	mov	r6, r25
			get_time(currenttime);
    319c:	7e 01       	movw	r14, r28
    319e:	96 ef       	ldi	r25, 0xF6	; 246
    31a0:	e9 1a       	sub	r14, r25
    31a2:	9e ef       	ldi	r25, 0xFE	; 254
    31a4:	f9 0a       	sbc	r15, r25
    31a6:	c7 01       	movw	r24, r14
    31a8:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
    31ac:	24 e3       	ldi	r18, 0x34	; 52
    31ae:	20 9f       	mul	r18, r16
    31b0:	c0 01       	movw	r24, r0
    31b2:	21 9f       	mul	r18, r17
    31b4:	90 0d       	add	r25, r0
    31b6:	11 24       	eor	r1, r1
    31b8:	86 5c       	subi	r24, 0xC6	; 198
    31ba:	97 4d       	sbci	r25, 0xD7	; 215
    31bc:	9f 93       	push	r25
    31be:	8f 93       	push	r24
    31c0:	6f 92       	push	r6
    31c2:	7f 92       	push	r7
    31c4:	8f 92       	push	r8
    31c6:	9f 92       	push	r9
    31c8:	af 92       	push	r10
    31ca:	bf 92       	push	r11
    31cc:	cf 92       	push	r12
    31ce:	df 92       	push	r13
    31d0:	ff 92       	push	r15
    31d2:	ef 92       	push	r14
    31d4:	ce 01       	movw	r24, r28
    31d6:	80 5e       	subi	r24, 0xE0	; 224
    31d8:	9c 4f       	sbci	r25, 0xFC	; 252
    31da:	9f 93       	push	r25
    31dc:	8f 93       	push	r24
    31de:	8e 01       	movw	r16, r28
    31e0:	0f 5f       	subi	r16, 0xFF	; 255
    31e2:	1f 4f       	sbci	r17, 0xFF	; 255
    31e4:	1f 93       	push	r17
    31e6:	0f 93       	push	r16
    31e8:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			printLine(outbuf);
    31ec:	c8 01       	movw	r24, r16
    31ee:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    31f2:	41 e0       	ldi	r20, 0x01	; 1
    31f4:	6d e4       	ldi	r22, 0x4D	; 77
    31f6:	76 eb       	ldi	r23, 0xB6	; 182
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    31fe:	6f 92       	push	r6
    3200:	7f 92       	push	r7
    3202:	8f 92       	push	r8
    3204:	9f 92       	push	r9
    3206:	af 92       	push	r10
    3208:	bf 92       	push	r11
    320a:	cf 92       	push	r12
    320c:	df 92       	push	r13
    320e:	ce 01       	movw	r24, r28
    3210:	8b 5b       	subi	r24, 0xBB	; 187
    3212:	9c 4f       	sbci	r25, 0xFC	; 252
    3214:	9f 93       	push	r25
    3216:	8f 93       	push	r24
    3218:	1f 93       	push	r17
    321a:	0f 93       	push	r16
    321c:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			writestr_OLED(1, outbuf, 2);
    3220:	42 e0       	ldi	r20, 0x02	; 2
    3222:	b8 01       	movw	r22, r16
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			break;
    322a:	cd bf       	out	0x3d, r28	; 61
    322c:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    322e:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    3230:	4a c0       	rjmp	.+148    	; 0x32c6 <report+0x1078>

		case 'V':					// Version
			get_VERSION(version);
    3232:	6e 01       	movw	r12, r28
    3234:	9f ef       	ldi	r25, 0xFF	; 255
    3236:	c9 0e       	add	r12, r25
    3238:	d1 1c       	adc	r13, r1
    323a:	c6 01       	movw	r24, r12
    323c:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_VERSION>
			get_time(currenttime);
    3240:	7e 01       	movw	r14, r28
    3242:	86 ef       	ldi	r24, 0xF6	; 246
    3244:	e8 1a       	sub	r14, r24
    3246:	8e ef       	ldi	r24, 0xFE	; 254
    3248:	f8 0a       	sbc	r15, r24
    324a:	c7 01       	movw	r24, r14
    324c:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
    3250:	24 e3       	ldi	r18, 0x34	; 52
    3252:	20 9f       	mul	r18, r16
    3254:	c0 01       	movw	r24, r0
    3256:	21 9f       	mul	r18, r17
    3258:	90 0d       	add	r25, r0
    325a:	11 24       	eor	r1, r1
    325c:	86 5c       	subi	r24, 0xC6	; 198
    325e:	97 4d       	sbci	r25, 0xD7	; 215
    3260:	9f 93       	push	r25
    3262:	8f 93       	push	r24
    3264:	df 92       	push	r13
    3266:	cf 92       	push	r12
    3268:	ff 92       	push	r15
    326a:	ef 92       	push	r14
    326c:	ce 01       	movw	r24, r28
    326e:	8e 5a       	subi	r24, 0xAE	; 174
    3270:	9c 4f       	sbci	r25, 0xFC	; 252
    3272:	9f 93       	push	r25
    3274:	8f 93       	push	r24
    3276:	8e 01       	movw	r16, r28
    3278:	0f 5f       	subi	r16, 0xFF	; 255
    327a:	1f 4f       	sbci	r17, 0xFF	; 255
    327c:	1f 93       	push	r17
    327e:	0f 93       	push	r16
    3280:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			printLine(outbuf);
    3284:	c8 01       	movw	r24, r16
    3286:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
			writestr_OLED(1, "specMech Version", 1);
    328a:	41 e0       	ldi	r20, 0x01	; 1
    328c:	6e e0       	ldi	r22, 0x0E	; 14
    328e:	74 eb       	ldi	r23, 0xB4	; 180
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			get_VERSION(outbuf);
    3296:	c8 01       	movw	r24, r16
    3298:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    329c:	42 e0       	ldi	r20, 0x02	; 2
    329e:	b8 01       	movw	r22, r16
    32a0:	81 e0       	ldi	r24, 0x01	; 1
    32a2:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			break;
    32a6:	cd bf       	out	0x3d, r28	; 61
    32a8:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    32aa:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    32ac:	0c c0       	rjmp	.+24     	; 0x32c6 <report+0x1078>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    32ae:	6d e5       	ldi	r22, 0x5D	; 93
    32b0:	76 eb       	ldi	r23, 0xB6	; 182
    32b2:	8a ec       	ldi	r24, 0xCA	; 202
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			return(ERROR);
    32ba:	0f 2e       	mov	r0, r31
    32bc:	f3 e6       	ldi	r31, 0x63	; 99
    32be:	ff 2e       	mov	r15, r31
    32c0:	f0 2d       	mov	r31, r0
    32c2:	01 c0       	rjmp	.+2      	; 0x32c6 <report+0x1078>
			break;
	}

	return(NOERROR);
    32c4:	f1 2c       	mov	r15, r1

}
    32c6:	8f 2d       	mov	r24, r15
    32c8:	cf 5e       	subi	r28, 0xEF	; 239
    32ca:	db 4f       	sbci	r29, 0xFB	; 251
    32cc:	cd bf       	out	0x3d, r28	; 61
    32ce:	de bf       	out	0x3e, r29	; 62
    32d0:	df 91       	pop	r29
    32d2:	cf 91       	pop	r28
    32d4:	1f 91       	pop	r17
    32d6:	0f 91       	pop	r16
    32d8:	ff 90       	pop	r15
    32da:	ef 90       	pop	r14
    32dc:	df 90       	pop	r13
    32de:	cf 90       	pop	r12
    32e0:	bf 90       	pop	r11
    32e2:	af 90       	pop	r10
    32e4:	9f 90       	pop	r9
    32e6:	8f 90       	pop	r8
    32e8:	7f 90       	pop	r7
    32ea:	6f 90       	pop	r6
    32ec:	5f 90       	pop	r5
    32ee:	4f 90       	pop	r4
    32f0:	3f 90       	pop	r3
    32f2:	2f 90       	pop	r2
    32f4:	08 95       	ret

000032f6 <crc16>:

-------------*/

	return(NOERROR);

}
    32f6:	dc 01       	movw	r26, r24
    32f8:	40 e0       	ldi	r20, 0x00	; 0
    32fa:	50 e0       	ldi	r21, 0x00	; 0
    32fc:	80 e0       	ldi	r24, 0x00	; 0
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	1b c0       	rjmp	.+54     	; 0x3338 <crc16+0x42>
    3302:	fd 01       	movw	r30, r26
    3304:	e4 0f       	add	r30, r20
    3306:	f5 1f       	adc	r31, r21
    3308:	20 81       	ld	r18, Z
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	32 2f       	mov	r19, r18
    330e:	22 27       	eor	r18, r18
    3310:	82 27       	eor	r24, r18
    3312:	93 27       	eor	r25, r19
    3314:	20 e0       	ldi	r18, 0x00	; 0
    3316:	0c c0       	rjmp	.+24     	; 0x3330 <crc16+0x3a>
    3318:	99 23       	and	r25, r25
    331a:	3c f4       	brge	.+14     	; 0x332a <crc16+0x34>
    331c:	88 0f       	add	r24, r24
    331e:	99 1f       	adc	r25, r25
    3320:	31 e2       	ldi	r19, 0x21	; 33
    3322:	83 27       	eor	r24, r19
    3324:	30 e1       	ldi	r19, 0x10	; 16
    3326:	93 27       	eor	r25, r19
    3328:	02 c0       	rjmp	.+4      	; 0x332e <crc16+0x38>
    332a:	88 0f       	add	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	2f 5f       	subi	r18, 0xFF	; 255
    3330:	28 30       	cpi	r18, 0x08	; 8
    3332:	90 f3       	brcs	.-28     	; 0x3318 <crc16+0x22>
    3334:	4f 5f       	subi	r20, 0xFF	; 255
    3336:	5f 4f       	sbci	r21, 0xFF	; 255
    3338:	46 17       	cp	r20, r22
    333a:	57 07       	cpc	r21, r23
    333c:	10 f3       	brcs	.-60     	; 0x3302 <crc16+0xc>
    333e:	08 95       	ret

00003340 <get_FRAM_ENCSAVETIME>:
    3340:	ef 92       	push	r14
    3342:	ff 92       	push	r15
    3344:	1f 93       	push	r17
    3346:	cf 93       	push	r28
    3348:	df 93       	push	r29
    334a:	cd b7       	in	r28, 0x3d	; 61
    334c:	de b7       	in	r29, 0x3e	; 62
    334e:	c6 57       	subi	r28, 0x76	; 118
    3350:	d1 09       	sbc	r29, r1
    3352:	cd bf       	out	0x3d, r28	; 61
    3354:	de bf       	out	0x3e, r29	; 62
    3356:	7c 01       	movw	r14, r24
    3358:	86 e2       	ldi	r24, 0x26	; 38
    335a:	e5 e7       	ldi	r30, 0x75	; 117
    335c:	f8 eb       	ldi	r31, 0xB8	; 184
    335e:	de 01       	movw	r26, r28
    3360:	af 5a       	subi	r26, 0xAF	; 175
    3362:	bf 4f       	sbci	r27, 0xFF	; 255
    3364:	01 90       	ld	r0, Z+
    3366:	0d 92       	st	X+, r0
    3368:	8a 95       	dec	r24
    336a:	e1 f7       	brne	.-8      	; 0x3364 <get_FRAM_ENCSAVETIME+0x24>
    336c:	24 e1       	ldi	r18, 0x14	; 20
    336e:	a7 01       	movw	r20, r14
    3370:	60 e2       	ldi	r22, 0x20	; 32
    3372:	70 e0       	ldi	r23, 0x00	; 0
    3374:	80 e5       	ldi	r24, 0x50	; 80
    3376:	0e 94 b5 08 	call	0x116a	; 0x116a <read_FRAM>
    337a:	18 2f       	mov	r17, r24
    337c:	83 36       	cpi	r24, 0x63	; 99
    337e:	b1 f4       	brne	.+44     	; 0x33ac <get_FRAM_ENCSAVETIME+0x6c>
    3380:	ce 01       	movw	r24, r28
    3382:	8f 5a       	subi	r24, 0xAF	; 175
    3384:	9f 4f       	sbci	r25, 0xFF	; 255
    3386:	9f 93       	push	r25
    3388:	8f 93       	push	r24
    338a:	80 55       	subi	r24, 0x50	; 80
    338c:	91 09       	sbc	r25, r1
    338e:	7c 01       	movw	r14, r24
    3390:	9f 93       	push	r25
    3392:	8f 93       	push	r24
    3394:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
    3398:	b7 01       	movw	r22, r14
    339a:	86 e3       	ldi	r24, 0x36	; 54
    339c:	91 e0       	ldi	r25, 0x01	; 1
    339e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    33a2:	0f 90       	pop	r0
    33a4:	0f 90       	pop	r0
    33a6:	0f 90       	pop	r0
    33a8:	0f 90       	pop	r0
    33aa:	03 c0       	rjmp	.+6      	; 0x33b2 <get_FRAM_ENCSAVETIME+0x72>
    33ac:	f7 01       	movw	r30, r14
    33ae:	13 8a       	std	Z+19, r1	; 0x13
    33b0:	10 e0       	ldi	r17, 0x00	; 0
    33b2:	81 2f       	mov	r24, r17
    33b4:	ca 58       	subi	r28, 0x8A	; 138
    33b6:	df 4f       	sbci	r29, 0xFF	; 255
    33b8:	cd bf       	out	0x3d, r28	; 61
    33ba:	de bf       	out	0x3e, r29	; 62
    33bc:	df 91       	pop	r29
    33be:	cf 91       	pop	r28
    33c0:	1f 91       	pop	r17
    33c2:	ff 90       	pop	r15
    33c4:	ef 90       	pop	r14
    33c6:	08 95       	ret

000033c8 <get_FRAM_MOTOR_ENCODER>:
    33c8:	cf 92       	push	r12
    33ca:	df 92       	push	r13
    33cc:	ef 92       	push	r14
    33ce:	ff 92       	push	r15
    33d0:	0f 93       	push	r16
    33d2:	1f 93       	push	r17
    33d4:	cf 93       	push	r28
    33d6:	df 93       	push	r29
    33d8:	cd b7       	in	r28, 0x3d	; 61
    33da:	de b7       	in	r29, 0x3e	; 62
    33dc:	c3 58       	subi	r28, 0x83	; 131
    33de:	d1 09       	sbc	r29, r1
    33e0:	cd bf       	out	0x3d, r28	; 61
    33e2:	de bf       	out	0x3e, r29	; 62
    33e4:	8b 01       	movw	r16, r22
    33e6:	9f e2       	ldi	r25, 0x2F	; 47
    33e8:	eb e9       	ldi	r30, 0x9B	; 155
    33ea:	f8 eb       	ldi	r31, 0xB8	; 184
    33ec:	de 01       	movw	r26, r28
    33ee:	ab 5a       	subi	r26, 0xAB	; 171
    33f0:	bf 4f       	sbci	r27, 0xFF	; 255
    33f2:	01 90       	ld	r0, Z+
    33f4:	0d 92       	st	X+, r0
    33f6:	9a 95       	dec	r25
    33f8:	e1 f7       	brne	.-8      	; 0x33f2 <get_FRAM_MOTOR_ENCODER+0x2a>
    33fa:	81 38       	cpi	r24, 0x81	; 129
    33fc:	59 f0       	breq	.+22     	; 0x3414 <get_FRAM_MOTOR_ENCODER+0x4c>
    33fe:	82 38       	cpi	r24, 0x82	; 130
    3400:	31 f0       	breq	.+12     	; 0x340e <get_FRAM_MOTOR_ENCODER+0x46>
    3402:	80 38       	cpi	r24, 0x80	; 128
    3404:	09 f0       	breq	.+2      	; 0x3408 <get_FRAM_MOTOR_ENCODER+0x40>
    3406:	69 c0       	rjmp	.+210    	; 0x34da <get_FRAM_MOTOR_ENCODER+0x112>
    3408:	64 e1       	ldi	r22, 0x14	; 20
    340a:	70 e0       	ldi	r23, 0x00	; 0
    340c:	05 c0       	rjmp	.+10     	; 0x3418 <get_FRAM_MOTOR_ENCODER+0x50>
    340e:	6c e1       	ldi	r22, 0x1C	; 28
    3410:	70 e0       	ldi	r23, 0x00	; 0
    3412:	02 c0       	rjmp	.+4      	; 0x3418 <get_FRAM_MOTOR_ENCODER+0x50>
    3414:	68 e1       	ldi	r22, 0x18	; 24
    3416:	70 e0       	ldi	r23, 0x00	; 0
    3418:	f8 2e       	mov	r15, r24
    341a:	24 e0       	ldi	r18, 0x04	; 4
    341c:	ae 01       	movw	r20, r28
    341e:	4f 5a       	subi	r20, 0xAF	; 175
    3420:	5f 4f       	sbci	r21, 0xFF	; 255
    3422:	80 e5       	ldi	r24, 0x50	; 80
    3424:	0e 94 b5 08 	call	0x116a	; 0x116a <read_FRAM>
    3428:	e8 2e       	mov	r14, r24
    342a:	83 e6       	ldi	r24, 0x63	; 99
    342c:	e8 12       	cpse	r14, r24
    342e:	24 c0       	rjmp	.+72     	; 0x3478 <get_FRAM_MOTOR_ENCODER+0xb0>
    3430:	81 ec       	ldi	r24, 0xC1	; 193
    3432:	8f 0d       	add	r24, r15
    3434:	1f 92       	push	r1
    3436:	8f 93       	push	r24
    3438:	ce 01       	movw	r24, r28
    343a:	8b 5a       	subi	r24, 0xAB	; 171
    343c:	9f 4f       	sbci	r25, 0xFF	; 255
    343e:	9f 93       	push	r25
    3440:	8f 93       	push	r24
    3442:	fe 01       	movw	r30, r28
    3444:	31 96       	adiw	r30, 0x01	; 1
    3446:	6f 01       	movw	r12, r30
    3448:	ff 93       	push	r31
    344a:	ef 93       	push	r30
    344c:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
    3450:	b6 01       	movw	r22, r12
    3452:	83 e9       	ldi	r24, 0x93	; 147
    3454:	91 e0       	ldi	r25, 0x01	; 1
    3456:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    345a:	8f ef       	ldi	r24, 0xFF	; 255
    345c:	9f ef       	ldi	r25, 0xFF	; 255
    345e:	dc 01       	movw	r26, r24
    3460:	f8 01       	movw	r30, r16
    3462:	80 83       	st	Z, r24
    3464:	91 83       	std	Z+1, r25	; 0x01
    3466:	a2 83       	std	Z+2, r26	; 0x02
    3468:	b3 83       	std	Z+3, r27	; 0x03
    346a:	0f 90       	pop	r0
    346c:	0f 90       	pop	r0
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	0f 90       	pop	r0
    3474:	0f 90       	pop	r0
    3476:	35 c0       	rjmp	.+106    	; 0x34e2 <get_FRAM_MOTOR_ENCODER+0x11a>
    3478:	62 96       	adiw	r28, 0x12	; 18
    347a:	8f ad       	ldd	r24, Y+63	; 0x3f
    347c:	62 97       	sbiw	r28, 0x12	; 18
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	a0 e0       	ldi	r26, 0x00	; 0
    3482:	b0 e0       	ldi	r27, 0x00	; 0
    3484:	78 2f       	mov	r23, r24
    3486:	66 27       	eor	r22, r22
    3488:	55 27       	eor	r21, r21
    348a:	44 27       	eor	r20, r20
    348c:	63 96       	adiw	r28, 0x13	; 19
    348e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3490:	63 97       	sbiw	r28, 0x13	; 19
    3492:	89 2f       	mov	r24, r25
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	a0 e0       	ldi	r26, 0x00	; 0
    3498:	b0 e0       	ldi	r27, 0x00	; 0
    349a:	dc 01       	movw	r26, r24
    349c:	99 27       	eor	r25, r25
    349e:	88 27       	eor	r24, r24
    34a0:	84 2b       	or	r24, r20
    34a2:	95 2b       	or	r25, r21
    34a4:	a6 2b       	or	r26, r22
    34a6:	b7 2b       	or	r27, r23
    34a8:	64 96       	adiw	r28, 0x14	; 20
    34aa:	4f ad       	ldd	r20, Y+63	; 0x3f
    34ac:	64 97       	sbiw	r28, 0x14	; 20
    34ae:	50 e0       	ldi	r21, 0x00	; 0
    34b0:	60 e0       	ldi	r22, 0x00	; 0
    34b2:	70 e0       	ldi	r23, 0x00	; 0
    34b4:	76 2f       	mov	r23, r22
    34b6:	65 2f       	mov	r22, r21
    34b8:	54 2f       	mov	r21, r20
    34ba:	44 27       	eor	r20, r20
    34bc:	84 2b       	or	r24, r20
    34be:	95 2b       	or	r25, r21
    34c0:	a6 2b       	or	r26, r22
    34c2:	b7 2b       	or	r27, r23
    34c4:	65 96       	adiw	r28, 0x15	; 21
    34c6:	2f ad       	ldd	r18, Y+63	; 0x3f
    34c8:	65 97       	sbiw	r28, 0x15	; 21
    34ca:	82 2b       	or	r24, r18
    34cc:	f8 01       	movw	r30, r16
    34ce:	80 83       	st	Z, r24
    34d0:	91 83       	std	Z+1, r25	; 0x01
    34d2:	a2 83       	std	Z+2, r26	; 0x02
    34d4:	b3 83       	std	Z+3, r27	; 0x03
    34d6:	e1 2c       	mov	r14, r1
    34d8:	04 c0       	rjmp	.+8      	; 0x34e2 <get_FRAM_MOTOR_ENCODER+0x11a>
    34da:	0f 2e       	mov	r0, r31
    34dc:	f3 e6       	ldi	r31, 0x63	; 99
    34de:	ef 2e       	mov	r14, r31
    34e0:	f0 2d       	mov	r31, r0
    34e2:	8e 2d       	mov	r24, r14
    34e4:	cd 57       	subi	r28, 0x7D	; 125
    34e6:	df 4f       	sbci	r29, 0xFF	; 255
    34e8:	cd bf       	out	0x3d, r28	; 61
    34ea:	de bf       	out	0x3e, r29	; 62
    34ec:	df 91       	pop	r29
    34ee:	cf 91       	pop	r28
    34f0:	1f 91       	pop	r17
    34f2:	0f 91       	pop	r16
    34f4:	ff 90       	pop	r15
    34f6:	ef 90       	pop	r14
    34f8:	df 90       	pop	r13
    34fa:	cf 90       	pop	r12
    34fc:	08 95       	ret

000034fe <get_MOTOR>:
    34fe:	3f 92       	push	r3
    3500:	4f 92       	push	r4
    3502:	5f 92       	push	r5
    3504:	6f 92       	push	r6
    3506:	7f 92       	push	r7
    3508:	8f 92       	push	r8
    350a:	9f 92       	push	r9
    350c:	af 92       	push	r10
    350e:	bf 92       	push	r11
    3510:	cf 92       	push	r12
    3512:	df 92       	push	r13
    3514:	ef 92       	push	r14
    3516:	ff 92       	push	r15
    3518:	0f 93       	push	r16
    351a:	1f 93       	push	r17
    351c:	cf 93       	push	r28
    351e:	df 93       	push	r29
    3520:	cd b7       	in	r28, 0x3d	; 61
    3522:	de b7       	in	r29, 0x3e	; 62
    3524:	ce 58       	subi	r28, 0x8E	; 142
    3526:	d1 09       	sbc	r29, r1
    3528:	cd bf       	out	0x3d, r28	; 61
    352a:	de bf       	out	0x3e, r29	; 62
    352c:	38 2e       	mov	r3, r24
    352e:	7a 01       	movw	r14, r20
    3530:	42 2e       	mov	r4, r18
    3532:	8d b6       	in	r8, 0x3d	; 61
    3534:	9e b6       	in	r9, 0x3e	; 62
    3536:	a2 2e       	mov	r10, r18
    3538:	b1 2c       	mov	r11, r1
    353a:	c5 01       	movw	r24, r10
    353c:	02 96       	adiw	r24, 0x02	; 2
    353e:	35 01       	movw	r6, r10
    3540:	2f ef       	ldi	r18, 0xFF	; 255
    3542:	62 1a       	sub	r6, r18
    3544:	72 0a       	sbc	r7, r18
    3546:	ed b7       	in	r30, 0x3d	; 61
    3548:	fe b7       	in	r31, 0x3e	; 62
    354a:	e8 1b       	sub	r30, r24
    354c:	f9 0b       	sbc	r31, r25
    354e:	ed bf       	out	0x3d, r30	; 61
    3550:	fe bf       	out	0x3e, r31	; 62
    3552:	2d b7       	in	r18, 0x3d	; 61
    3554:	3e b7       	in	r19, 0x3e	; 62
    3556:	2f 5f       	subi	r18, 0xFF	; 255
    3558:	3f 4f       	sbci	r19, 0xFF	; 255
    355a:	69 01       	movw	r12, r18
    355c:	89 01       	movw	r16, r18
    355e:	80 e2       	ldi	r24, 0x20	; 32
    3560:	ea ec       	ldi	r30, 0xCA	; 202
    3562:	f8 eb       	ldi	r31, 0xB8	; 184
    3564:	de 01       	movw	r26, r28
    3566:	af 5a       	subi	r26, 0xAF	; 175
    3568:	bf 4f       	sbci	r27, 0xFF	; 255
    356a:	01 90       	ld	r0, Z+
    356c:	0d 92       	st	X+, r0
    356e:	8a 95       	dec	r24
    3570:	e1 f7       	brne	.-8      	; 0x356a <get_MOTOR+0x6c>
    3572:	8e e1       	ldi	r24, 0x1E	; 30
    3574:	ea ee       	ldi	r30, 0xEA	; 234
    3576:	f8 eb       	ldi	r31, 0xB8	; 184
    3578:	de 01       	movw	r26, r28
    357a:	af 58       	subi	r26, 0x8F	; 143
    357c:	bf 4f       	sbci	r27, 0xFF	; 255
    357e:	01 90       	ld	r0, Z+
    3580:	0d 92       	st	X+, r0
    3582:	8a 95       	dec	r24
    3584:	e1 f7       	brne	.-8      	; 0x357e <get_MOTOR+0x80>
    3586:	68 94       	set
    3588:	55 24       	eor	r5, r5
    358a:	51 f8       	bld	r5, 1
    358c:	54 0c       	add	r5, r4
    358e:	10 92 42 2b 	sts	0x2B42, r1	; 0x802b42 <ser_recv1+0xff>
    3592:	50 92 41 2b 	sts	0x2B41, r5	; 0x802b41 <ser_recv1+0xfe>
    3596:	ed b7       	in	r30, 0x3d	; 61
    3598:	fe b7       	in	r31, 0x3e	; 62
    359a:	31 82       	std	Z+1, r3	; 0x01
    359c:	f9 01       	movw	r30, r18
    359e:	61 83       	std	Z+1, r22	; 0x01
    35a0:	62 e0       	ldi	r22, 0x02	; 2
    35a2:	70 e0       	ldi	r23, 0x00	; 0
    35a4:	c9 01       	movw	r24, r18
    35a6:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <crc16>
    35aa:	f6 01       	movw	r30, r12
    35ac:	92 83       	std	Z+2, r25	; 0x02
    35ae:	83 83       	std	Z+3, r24	; 0x03
    35b0:	62 e0       	ldi	r22, 0x02	; 2
    35b2:	c6 01       	movw	r24, r12
    35b4:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <send_USART1>
    35b8:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    35bc:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
    35c0:	24 c0       	rjmp	.+72     	; 0x360a <get_MOTOR+0x10c>
    35c2:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    35c6:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    35ca:	85 36       	cpi	r24, 0x65	; 101
    35cc:	91 05       	cpc	r25, r1
    35ce:	e8 f0       	brcs	.+58     	; 0x360a <get_MOTOR+0x10c>
    35d0:	81 ec       	ldi	r24, 0xC1	; 193
    35d2:	83 0d       	add	r24, r3
    35d4:	1f 92       	push	r1
    35d6:	8f 93       	push	r24
    35d8:	ce 01       	movw	r24, r28
    35da:	8f 5a       	subi	r24, 0xAF	; 175
    35dc:	9f 4f       	sbci	r25, 0xFF	; 255
    35de:	9f 93       	push	r25
    35e0:	8f 93       	push	r24
    35e2:	8e 01       	movw	r16, r28
    35e4:	0f 5f       	subi	r16, 0xFF	; 255
    35e6:	1f 4f       	sbci	r17, 0xFF	; 255
    35e8:	1f 93       	push	r17
    35ea:	0f 93       	push	r16
    35ec:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
    35f0:	b8 01       	movw	r22, r16
    35f2:	80 e3       	ldi	r24, 0x30	; 48
    35f4:	91 e0       	ldi	r25, 0x01	; 1
    35f6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    35fa:	0f 90       	pop	r0
    35fc:	0f 90       	pop	r0
    35fe:	0f 90       	pop	r0
    3600:	0f 90       	pop	r0
    3602:	0f 90       	pop	r0
    3604:	0f 90       	pop	r0
    3606:	83 e6       	ldi	r24, 0x63	; 99
    3608:	56 c0       	rjmp	.+172    	; 0x36b6 <get_MOTOR+0x1b8>
    360a:	90 91 42 2b 	lds	r25, 0x2B42	; 0x802b42 <ser_recv1+0xff>
    360e:	80 91 41 2b 	lds	r24, 0x2B41	; 0x802b41 <ser_recv1+0xfe>
    3612:	98 17       	cp	r25, r24
    3614:	b0 f2       	brcs	.-84     	; 0x35c2 <get_MOTOR+0xc4>
    3616:	f5 01       	movw	r30, r10
    3618:	ed 5b       	subi	r30, 0xBD	; 189
    361a:	f5 4d       	sbci	r31, 0xD5	; 213
    361c:	a0 80       	ld	r10, Z
    361e:	b1 2c       	mov	r11, r1
    3620:	ba 2c       	mov	r11, r10
    3622:	aa 24       	eor	r10, r10
    3624:	f3 01       	movw	r30, r6
    3626:	ed 5b       	subi	r30, 0xBD	; 189
    3628:	f5 4d       	sbci	r31, 0xD5	; 213
    362a:	80 81       	ld	r24, Z
    362c:	a8 2a       	or	r10, r24
    362e:	22 e0       	ldi	r18, 0x02	; 2
    3630:	0b c0       	rjmp	.+22     	; 0x3648 <get_MOTOR+0x14a>
    3632:	82 2f       	mov	r24, r18
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	fc 01       	movw	r30, r24
    3638:	ef 5b       	subi	r30, 0xBF	; 191
    363a:	f5 4d       	sbci	r31, 0xD5	; 213
    363c:	30 81       	ld	r19, Z
    363e:	f8 01       	movw	r30, r16
    3640:	e8 0f       	add	r30, r24
    3642:	f9 1f       	adc	r31, r25
    3644:	30 83       	st	Z, r19
    3646:	2f 5f       	subi	r18, 0xFF	; 255
    3648:	25 15       	cp	r18, r5
    364a:	98 f3       	brcs	.-26     	; 0x3632 <get_MOTOR+0x134>
    364c:	65 2d       	mov	r22, r5
    364e:	70 e0       	ldi	r23, 0x00	; 0
    3650:	c6 01       	movw	r24, r12
    3652:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <crc16>
    3656:	a8 16       	cp	r10, r24
    3658:	b9 06       	cpc	r11, r25
    365a:	49 f1       	breq	.+82     	; 0x36ae <get_MOTOR+0x1b0>
    365c:	81 ec       	ldi	r24, 0xC1	; 193
    365e:	83 0d       	add	r24, r3
    3660:	1f 92       	push	r1
    3662:	8f 93       	push	r24
    3664:	ce 01       	movw	r24, r28
    3666:	8f 58       	subi	r24, 0x8F	; 143
    3668:	9f 4f       	sbci	r25, 0xFF	; 255
    366a:	9f 93       	push	r25
    366c:	8f 93       	push	r24
    366e:	8e 01       	movw	r16, r28
    3670:	0f 5f       	subi	r16, 0xFF	; 255
    3672:	1f 4f       	sbci	r17, 0xFF	; 255
    3674:	1f 93       	push	r17
    3676:	0f 93       	push	r16
    3678:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
    367c:	b8 01       	movw	r22, r16
    367e:	81 e3       	ldi	r24, 0x31	; 49
    3680:	91 e0       	ldi	r25, 0x01	; 1
    3682:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	0f 90       	pop	r0
    368c:	0f 90       	pop	r0
    368e:	0f 90       	pop	r0
    3690:	0f 90       	pop	r0
    3692:	83 e6       	ldi	r24, 0x63	; 99
    3694:	10 c0       	rjmp	.+32     	; 0x36b6 <get_MOTOR+0x1b8>
    3696:	82 2f       	mov	r24, r18
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	f7 01       	movw	r30, r14
    369c:	e8 0f       	add	r30, r24
    369e:	f9 1f       	adc	r31, r25
    36a0:	dc 01       	movw	r26, r24
    36a2:	ad 5b       	subi	r26, 0xBD	; 189
    36a4:	b5 4d       	sbci	r27, 0xD5	; 213
    36a6:	8c 91       	ld	r24, X
    36a8:	80 83       	st	Z, r24
    36aa:	2f 5f       	subi	r18, 0xFF	; 255
    36ac:	01 c0       	rjmp	.+2      	; 0x36b0 <get_MOTOR+0x1b2>
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	24 15       	cp	r18, r4
    36b2:	88 f3       	brcs	.-30     	; 0x3696 <get_MOTOR+0x198>
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	8d be       	out	0x3d, r8	; 61
    36b8:	9e be       	out	0x3e, r9	; 62
    36ba:	c2 57       	subi	r28, 0x72	; 114
    36bc:	df 4f       	sbci	r29, 0xFF	; 255
    36be:	cd bf       	out	0x3d, r28	; 61
    36c0:	de bf       	out	0x3e, r29	; 62
    36c2:	df 91       	pop	r29
    36c4:	cf 91       	pop	r28
    36c6:	1f 91       	pop	r17
    36c8:	0f 91       	pop	r16
    36ca:	ff 90       	pop	r15
    36cc:	ef 90       	pop	r14
    36ce:	df 90       	pop	r13
    36d0:	cf 90       	pop	r12
    36d2:	bf 90       	pop	r11
    36d4:	af 90       	pop	r10
    36d6:	9f 90       	pop	r9
    36d8:	8f 90       	pop	r8
    36da:	7f 90       	pop	r7
    36dc:	6f 90       	pop	r6
    36de:	5f 90       	pop	r5
    36e0:	4f 90       	pop	r4
    36e2:	3f 90       	pop	r3
    36e4:	08 95       	ret

000036e6 <get_MOTOR_CURRENT>:
    36e6:	cf 92       	push	r12
    36e8:	df 92       	push	r13
    36ea:	ef 92       	push	r14
    36ec:	ff 92       	push	r15
    36ee:	0f 93       	push	r16
    36f0:	1f 93       	push	r17
    36f2:	cf 93       	push	r28
    36f4:	df 93       	push	r29
    36f6:	cd b7       	in	r28, 0x3d	; 61
    36f8:	de b7       	in	r29, 0x3e	; 62
    36fa:	cd 57       	subi	r28, 0x7D	; 125
    36fc:	d1 09       	sbc	r29, r1
    36fe:	cd bf       	out	0x3d, r28	; 61
    3700:	de bf       	out	0x3e, r29	; 62
    3702:	e8 2e       	mov	r14, r24
    3704:	8b 01       	movw	r16, r22
    3706:	89 e2       	ldi	r24, 0x29	; 41
    3708:	e8 e0       	ldi	r30, 0x08	; 8
    370a:	f9 eb       	ldi	r31, 0xB9	; 185
    370c:	de 01       	movw	r26, r28
    370e:	11 96       	adiw	r26, 0x01	; 1
    3710:	01 90       	ld	r0, Z+
    3712:	0d 92       	st	X+, r0
    3714:	8a 95       	dec	r24
    3716:	e1 f7       	brne	.-8      	; 0x3710 <get_MOTOR_CURRENT+0x2a>
    3718:	24 e0       	ldi	r18, 0x04	; 4
    371a:	ae 01       	movw	r20, r28
    371c:	46 58       	subi	r20, 0x86	; 134
    371e:	5f 4f       	sbci	r21, 0xFF	; 255
    3720:	61 e3       	ldi	r22, 0x31	; 49
    3722:	8e 2d       	mov	r24, r14
    3724:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <get_MOTOR>
    3728:	f8 2e       	mov	r15, r24
    372a:	83 e6       	ldi	r24, 0x63	; 99
    372c:	f8 12       	cpse	r15, r24
    372e:	21 c0       	rjmp	.+66     	; 0x3772 <get_MOTOR_CURRENT+0x8c>
    3730:	81 ec       	ldi	r24, 0xC1	; 193
    3732:	8e 0d       	add	r24, r14
    3734:	1f 92       	push	r1
    3736:	8f 93       	push	r24
    3738:	ce 01       	movw	r24, r28
    373a:	01 96       	adiw	r24, 0x01	; 1
    373c:	9f 93       	push	r25
    373e:	8f 93       	push	r24
    3740:	6e 01       	movw	r12, r28
    3742:	ea e2       	ldi	r30, 0x2A	; 42
    3744:	ce 0e       	add	r12, r30
    3746:	d1 1c       	adc	r13, r1
    3748:	df 92       	push	r13
    374a:	cf 92       	push	r12
    374c:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
    3750:	b6 01       	movw	r22, r12
    3752:	86 e3       	ldi	r24, 0x36	; 54
    3754:	91 e0       	ldi	r25, 0x01	; 1
    3756:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    375a:	8f ef       	ldi	r24, 0xFF	; 255
    375c:	9f ef       	ldi	r25, 0xFF	; 255
    375e:	f8 01       	movw	r30, r16
    3760:	80 83       	st	Z, r24
    3762:	91 83       	std	Z+1, r25	; 0x01
    3764:	0f 90       	pop	r0
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	0f 90       	pop	r0
    3770:	19 c0       	rjmp	.+50     	; 0x37a4 <get_MOTOR_CURRENT+0xbe>
    3772:	eb 96       	adiw	r28, 0x3b	; 59
    3774:	8f ad       	ldd	r24, Y+63	; 0x3f
    3776:	eb 97       	sbiw	r28, 0x3b	; 59
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	98 2f       	mov	r25, r24
    377c:	88 27       	eor	r24, r24
    377e:	ec 96       	adiw	r28, 0x3c	; 60
    3780:	2f ad       	ldd	r18, Y+63	; 0x3f
    3782:	ec 97       	sbiw	r28, 0x3c	; 60
    3784:	82 2b       	or	r24, r18
    3786:	9c 01       	movw	r18, r24
    3788:	22 0f       	add	r18, r18
    378a:	33 1f       	adc	r19, r19
    378c:	88 0f       	add	r24, r24
    378e:	99 1f       	adc	r25, r25
    3790:	88 0f       	add	r24, r24
    3792:	99 1f       	adc	r25, r25
    3794:	88 0f       	add	r24, r24
    3796:	99 1f       	adc	r25, r25
    3798:	82 0f       	add	r24, r18
    379a:	93 1f       	adc	r25, r19
    379c:	f8 01       	movw	r30, r16
    379e:	80 83       	st	Z, r24
    37a0:	91 83       	std	Z+1, r25	; 0x01
    37a2:	f1 2c       	mov	r15, r1
    37a4:	8f 2d       	mov	r24, r15
    37a6:	c3 58       	subi	r28, 0x83	; 131
    37a8:	df 4f       	sbci	r29, 0xFF	; 255
    37aa:	cd bf       	out	0x3d, r28	; 61
    37ac:	de bf       	out	0x3e, r29	; 62
    37ae:	df 91       	pop	r29
    37b0:	cf 91       	pop	r28
    37b2:	1f 91       	pop	r17
    37b4:	0f 91       	pop	r16
    37b6:	ff 90       	pop	r15
    37b8:	ef 90       	pop	r14
    37ba:	df 90       	pop	r13
    37bc:	cf 90       	pop	r12
    37be:	08 95       	ret

000037c0 <get_MOTOR_ENCODER>:
    37c0:	ef 92       	push	r14
    37c2:	ff 92       	push	r15
    37c4:	0f 93       	push	r16
    37c6:	1f 93       	push	r17
    37c8:	cf 93       	push	r28
    37ca:	df 93       	push	r29
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    37d0:	ce 57       	subi	r28, 0x7E	; 126
    37d2:	d1 09       	sbc	r29, r1
    37d4:	cd bf       	out	0x3d, r28	; 61
    37d6:	de bf       	out	0x3e, r29	; 62
    37d8:	e8 2e       	mov	r14, r24
    37da:	8b 01       	movw	r16, r22
    37dc:	89 e2       	ldi	r24, 0x29	; 41
    37de:	e1 e3       	ldi	r30, 0x31	; 49
    37e0:	f9 eb       	ldi	r31, 0xB9	; 185
    37e2:	de 01       	movw	r26, r28
    37e4:	aa 5a       	subi	r26, 0xAA	; 170
    37e6:	bf 4f       	sbci	r27, 0xFF	; 255
    37e8:	01 90       	ld	r0, Z+
    37ea:	0d 92       	st	X+, r0
    37ec:	8a 95       	dec	r24
    37ee:	e1 f7       	brne	.-8      	; 0x37e8 <get_MOTOR_ENCODER+0x28>
    37f0:	25 e0       	ldi	r18, 0x05	; 5
    37f2:	ae 01       	movw	r20, r28
    37f4:	4f 5a       	subi	r20, 0xAF	; 175
    37f6:	5f 4f       	sbci	r21, 0xFF	; 255
    37f8:	60 e1       	ldi	r22, 0x10	; 16
    37fa:	8e 2d       	mov	r24, r14
    37fc:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <get_MOTOR>
    3800:	f8 2e       	mov	r15, r24
    3802:	83 e6       	ldi	r24, 0x63	; 99
    3804:	f8 12       	cpse	r15, r24
    3806:	1c c0       	rjmp	.+56     	; 0x3840 <get_MOTOR_ENCODER+0x80>
    3808:	81 ec       	ldi	r24, 0xC1	; 193
    380a:	8e 0d       	add	r24, r14
    380c:	1f 92       	push	r1
    380e:	8f 93       	push	r24
    3810:	ce 01       	movw	r24, r28
    3812:	8a 5a       	subi	r24, 0xAA	; 170
    3814:	9f 4f       	sbci	r25, 0xFF	; 255
    3816:	9f 93       	push	r25
    3818:	8f 93       	push	r24
    381a:	8e 01       	movw	r16, r28
    381c:	0f 5f       	subi	r16, 0xFF	; 255
    381e:	1f 4f       	sbci	r17, 0xFF	; 255
    3820:	1f 93       	push	r17
    3822:	0f 93       	push	r16
    3824:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
    3828:	b8 01       	movw	r22, r16
    382a:	86 e3       	ldi	r24, 0x36	; 54
    382c:	91 e0       	ldi	r25, 0x01	; 1
    382e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0
    3836:	0f 90       	pop	r0
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	30 c0       	rjmp	.+96     	; 0x38a0 <get_MOTOR_ENCODER+0xe0>
    3840:	62 96       	adiw	r28, 0x12	; 18
    3842:	8f ad       	ldd	r24, Y+63	; 0x3f
    3844:	62 97       	sbiw	r28, 0x12	; 18
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	a0 e0       	ldi	r26, 0x00	; 0
    384a:	b0 e0       	ldi	r27, 0x00	; 0
    384c:	78 2f       	mov	r23, r24
    384e:	66 27       	eor	r22, r22
    3850:	55 27       	eor	r21, r21
    3852:	44 27       	eor	r20, r20
    3854:	63 96       	adiw	r28, 0x13	; 19
    3856:	9f ad       	ldd	r25, Y+63	; 0x3f
    3858:	63 97       	sbiw	r28, 0x13	; 19
    385a:	89 2f       	mov	r24, r25
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	a0 e0       	ldi	r26, 0x00	; 0
    3860:	b0 e0       	ldi	r27, 0x00	; 0
    3862:	dc 01       	movw	r26, r24
    3864:	99 27       	eor	r25, r25
    3866:	88 27       	eor	r24, r24
    3868:	84 2b       	or	r24, r20
    386a:	95 2b       	or	r25, r21
    386c:	a6 2b       	or	r26, r22
    386e:	b7 2b       	or	r27, r23
    3870:	64 96       	adiw	r28, 0x14	; 20
    3872:	4f ad       	ldd	r20, Y+63	; 0x3f
    3874:	64 97       	sbiw	r28, 0x14	; 20
    3876:	50 e0       	ldi	r21, 0x00	; 0
    3878:	60 e0       	ldi	r22, 0x00	; 0
    387a:	70 e0       	ldi	r23, 0x00	; 0
    387c:	76 2f       	mov	r23, r22
    387e:	65 2f       	mov	r22, r21
    3880:	54 2f       	mov	r21, r20
    3882:	44 27       	eor	r20, r20
    3884:	84 2b       	or	r24, r20
    3886:	95 2b       	or	r25, r21
    3888:	a6 2b       	or	r26, r22
    388a:	b7 2b       	or	r27, r23
    388c:	65 96       	adiw	r28, 0x15	; 21
    388e:	2f ad       	ldd	r18, Y+63	; 0x3f
    3890:	65 97       	sbiw	r28, 0x15	; 21
    3892:	82 2b       	or	r24, r18
    3894:	f8 01       	movw	r30, r16
    3896:	80 83       	st	Z, r24
    3898:	91 83       	std	Z+1, r25	; 0x01
    389a:	a2 83       	std	Z+2, r26	; 0x02
    389c:	b3 83       	std	Z+3, r27	; 0x03
    389e:	f1 2c       	mov	r15, r1
    38a0:	8f 2d       	mov	r24, r15
    38a2:	c2 58       	subi	r28, 0x82	; 130
    38a4:	df 4f       	sbci	r29, 0xFF	; 255
    38a6:	cd bf       	out	0x3d, r28	; 61
    38a8:	de bf       	out	0x3e, r29	; 62
    38aa:	df 91       	pop	r29
    38ac:	cf 91       	pop	r28
    38ae:	1f 91       	pop	r17
    38b0:	0f 91       	pop	r16
    38b2:	ff 90       	pop	r15
    38b4:	ef 90       	pop	r14
    38b6:	08 95       	ret

000038b8 <get_MOTOR_FLOAT>:
    38b8:	cf 92       	push	r12
    38ba:	df 92       	push	r13
    38bc:	ef 92       	push	r14
    38be:	ff 92       	push	r15
    38c0:	0f 93       	push	r16
    38c2:	1f 93       	push	r17
    38c4:	cf 93       	push	r28
    38c6:	df 93       	push	r29
    38c8:	cd b7       	in	r28, 0x3d	; 61
    38ca:	de b7       	in	r29, 0x3e	; 62
    38cc:	c9 57       	subi	r28, 0x79	; 121
    38ce:	d1 09       	sbc	r29, r1
    38d0:	cd bf       	out	0x3d, r28	; 61
    38d2:	de bf       	out	0x3e, r29	; 62
    38d4:	e8 2e       	mov	r14, r24
    38d6:	8a 01       	movw	r16, r20
    38d8:	87 e2       	ldi	r24, 0x27	; 39
    38da:	ea e5       	ldi	r30, 0x5A	; 90
    38dc:	f9 eb       	ldi	r31, 0xB9	; 185
    38de:	de 01       	movw	r26, r28
    38e0:	ad 5a       	subi	r26, 0xAD	; 173
    38e2:	bf 4f       	sbci	r27, 0xFF	; 255
    38e4:	01 90       	ld	r0, Z+
    38e6:	0d 92       	st	X+, r0
    38e8:	8a 95       	dec	r24
    38ea:	e1 f7       	brne	.-8      	; 0x38e4 <get_MOTOR_FLOAT+0x2c>
    38ec:	22 e0       	ldi	r18, 0x02	; 2
    38ee:	ae 01       	movw	r20, r28
    38f0:	4f 5a       	subi	r20, 0xAF	; 175
    38f2:	5f 4f       	sbci	r21, 0xFF	; 255
    38f4:	8e 2d       	mov	r24, r14
    38f6:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <get_MOTOR>
    38fa:	f8 2e       	mov	r15, r24
    38fc:	83 e6       	ldi	r24, 0x63	; 99
    38fe:	f8 12       	cpse	r15, r24
    3900:	25 c0       	rjmp	.+74     	; 0x394c <get_MOTOR_FLOAT+0x94>
    3902:	81 ec       	ldi	r24, 0xC1	; 193
    3904:	8e 0d       	add	r24, r14
    3906:	1f 92       	push	r1
    3908:	8f 93       	push	r24
    390a:	ce 01       	movw	r24, r28
    390c:	8d 5a       	subi	r24, 0xAD	; 173
    390e:	9f 4f       	sbci	r25, 0xFF	; 255
    3910:	9f 93       	push	r25
    3912:	8f 93       	push	r24
    3914:	fe 01       	movw	r30, r28
    3916:	31 96       	adiw	r30, 0x01	; 1
    3918:	6f 01       	movw	r12, r30
    391a:	ff 93       	push	r31
    391c:	ef 93       	push	r30
    391e:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
    3922:	b6 01       	movw	r22, r12
    3924:	86 e3       	ldi	r24, 0x36	; 54
    3926:	91 e0       	ldi	r25, 0x01	; 1
    3928:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    392c:	80 e0       	ldi	r24, 0x00	; 0
    392e:	90 e8       	ldi	r25, 0x80	; 128
    3930:	a6 e2       	ldi	r26, 0x26	; 38
    3932:	b4 ec       	ldi	r27, 0xC4	; 196
    3934:	f8 01       	movw	r30, r16
    3936:	80 83       	st	Z, r24
    3938:	91 83       	std	Z+1, r25	; 0x01
    393a:	a2 83       	std	Z+2, r26	; 0x02
    393c:	b3 83       	std	Z+3, r27	; 0x03
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	0f 90       	pop	r0
    3944:	0f 90       	pop	r0
    3946:	0f 90       	pop	r0
    3948:	0f 90       	pop	r0
    394a:	1c c0       	rjmp	.+56     	; 0x3984 <get_MOTOR_FLOAT+0xcc>
    394c:	62 96       	adiw	r28, 0x12	; 18
    394e:	6f ad       	ldd	r22, Y+63	; 0x3f
    3950:	62 97       	sbiw	r28, 0x12	; 18
    3952:	70 e0       	ldi	r23, 0x00	; 0
    3954:	76 2f       	mov	r23, r22
    3956:	66 27       	eor	r22, r22
    3958:	63 96       	adiw	r28, 0x13	; 19
    395a:	8f ad       	ldd	r24, Y+63	; 0x3f
    395c:	63 97       	sbiw	r28, 0x13	; 19
    395e:	68 2b       	or	r22, r24
    3960:	07 2e       	mov	r0, r23
    3962:	00 0c       	add	r0, r0
    3964:	88 0b       	sbc	r24, r24
    3966:	99 0b       	sbc	r25, r25
    3968:	0e 94 84 31 	call	0x6308	; 0x6308 <__floatsisf>
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	40 e2       	ldi	r20, 0x20	; 32
    3972:	51 e4       	ldi	r21, 0x41	; 65
    3974:	0e 94 da 30 	call	0x61b4	; 0x61b4 <__divsf3>
    3978:	f8 01       	movw	r30, r16
    397a:	60 83       	st	Z, r22
    397c:	71 83       	std	Z+1, r23	; 0x01
    397e:	82 83       	std	Z+2, r24	; 0x02
    3980:	93 83       	std	Z+3, r25	; 0x03
    3982:	f1 2c       	mov	r15, r1
    3984:	8f 2d       	mov	r24, r15
    3986:	c7 58       	subi	r28, 0x87	; 135
    3988:	df 4f       	sbci	r29, 0xFF	; 255
    398a:	cd bf       	out	0x3d, r28	; 61
    398c:	de bf       	out	0x3e, r29	; 62
    398e:	df 91       	pop	r29
    3990:	cf 91       	pop	r28
    3992:	1f 91       	pop	r17
    3994:	0f 91       	pop	r16
    3996:	ff 90       	pop	r15
    3998:	ef 90       	pop	r14
    399a:	df 90       	pop	r13
    399c:	cf 90       	pop	r12
    399e:	08 95       	ret

000039a0 <get_MOTOR_MAXCURRENT>:
    39a0:	cf 92       	push	r12
    39a2:	df 92       	push	r13
    39a4:	ef 92       	push	r14
    39a6:	ff 92       	push	r15
    39a8:	0f 93       	push	r16
    39aa:	1f 93       	push	r17
    39ac:	cf 93       	push	r28
    39ae:	df 93       	push	r29
    39b0:	cd b7       	in	r28, 0x3d	; 61
    39b2:	de b7       	in	r29, 0x3e	; 62
    39b4:	c4 58       	subi	r28, 0x84	; 132
    39b6:	d1 09       	sbc	r29, r1
    39b8:	cd bf       	out	0x3d, r28	; 61
    39ba:	de bf       	out	0x3e, r29	; 62
    39bc:	e8 2e       	mov	r14, r24
    39be:	8b 01       	movw	r16, r22
    39c0:	8c e2       	ldi	r24, 0x2C	; 44
    39c2:	e1 e8       	ldi	r30, 0x81	; 129
    39c4:	f9 eb       	ldi	r31, 0xB9	; 185
    39c6:	de 01       	movw	r26, r28
    39c8:	11 96       	adiw	r26, 0x01	; 1
    39ca:	01 90       	ld	r0, Z+
    39cc:	0d 92       	st	X+, r0
    39ce:	8a 95       	dec	r24
    39d0:	e1 f7       	brne	.-8      	; 0x39ca <get_MOTOR_MAXCURRENT+0x2a>
    39d2:	28 e0       	ldi	r18, 0x08	; 8
    39d4:	ae 01       	movw	r20, r28
    39d6:	43 58       	subi	r20, 0x83	; 131
    39d8:	5f 4f       	sbci	r21, 0xFF	; 255
    39da:	67 e8       	ldi	r22, 0x87	; 135
    39dc:	8e 2d       	mov	r24, r14
    39de:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <get_MOTOR>
    39e2:	f8 2e       	mov	r15, r24
    39e4:	83 e6       	ldi	r24, 0x63	; 99
    39e6:	f8 12       	cpse	r15, r24
    39e8:	1b c0       	rjmp	.+54     	; 0x3a20 <get_MOTOR_MAXCURRENT+0x80>
    39ea:	81 ec       	ldi	r24, 0xC1	; 193
    39ec:	8e 0d       	add	r24, r14
    39ee:	1f 92       	push	r1
    39f0:	8f 93       	push	r24
    39f2:	ce 01       	movw	r24, r28
    39f4:	01 96       	adiw	r24, 0x01	; 1
    39f6:	9f 93       	push	r25
    39f8:	8f 93       	push	r24
    39fa:	8e 01       	movw	r16, r28
    39fc:	03 5d       	subi	r16, 0xD3	; 211
    39fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3a00:	1f 93       	push	r17
    3a02:	0f 93       	push	r16
    3a04:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
    3a08:	b8 01       	movw	r22, r16
    3a0a:	86 e3       	ldi	r24, 0x36	; 54
    3a0c:	91 e0       	ldi	r25, 0x01	; 1
    3a0e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    3a12:	0f 90       	pop	r0
    3a14:	0f 90       	pop	r0
    3a16:	0f 90       	pop	r0
    3a18:	0f 90       	pop	r0
    3a1a:	0f 90       	pop	r0
    3a1c:	0f 90       	pop	r0
    3a1e:	45 c0       	rjmp	.+138    	; 0x3aaa <get_MOTOR_MAXCURRENT+0x10a>
    3a20:	ee 96       	adiw	r28, 0x3e	; 62
    3a22:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a24:	ee 97       	sbiw	r28, 0x3e	; 62
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	a0 e0       	ldi	r26, 0x00	; 0
    3a2a:	b0 e0       	ldi	r27, 0x00	; 0
    3a2c:	f8 2e       	mov	r15, r24
    3a2e:	ee 24       	eor	r14, r14
    3a30:	dd 24       	eor	r13, r13
    3a32:	cc 24       	eor	r12, r12
    3a34:	ef 96       	adiw	r28, 0x3f	; 63
    3a36:	4f ad       	ldd	r20, Y+63	; 0x3f
    3a38:	ef 97       	sbiw	r28, 0x3f	; 63
    3a3a:	50 e0       	ldi	r21, 0x00	; 0
    3a3c:	60 e0       	ldi	r22, 0x00	; 0
    3a3e:	70 e0       	ldi	r23, 0x00	; 0
    3a40:	da 01       	movw	r26, r20
    3a42:	99 27       	eor	r25, r25
    3a44:	88 27       	eor	r24, r24
    3a46:	8c 29       	or	r24, r12
    3a48:	9d 29       	or	r25, r13
    3a4a:	ae 29       	or	r26, r14
    3a4c:	bf 29       	or	r27, r15
    3a4e:	c1 58       	subi	r28, 0x81	; 129
    3a50:	df 4f       	sbci	r29, 0xFF	; 255
    3a52:	48 81       	ld	r20, Y
    3a54:	cf 57       	subi	r28, 0x7F	; 127
    3a56:	d0 40       	sbci	r29, 0x00	; 0
    3a58:	50 e0       	ldi	r21, 0x00	; 0
    3a5a:	60 e0       	ldi	r22, 0x00	; 0
    3a5c:	70 e0       	ldi	r23, 0x00	; 0
    3a5e:	76 2f       	mov	r23, r22
    3a60:	65 2f       	mov	r22, r21
    3a62:	54 2f       	mov	r21, r20
    3a64:	44 27       	eor	r20, r20
    3a66:	84 2b       	or	r24, r20
    3a68:	95 2b       	or	r25, r21
    3a6a:	a6 2b       	or	r26, r22
    3a6c:	b7 2b       	or	r27, r23
    3a6e:	c0 58       	subi	r28, 0x80	; 128
    3a70:	df 4f       	sbci	r29, 0xFF	; 255
    3a72:	28 81       	ld	r18, Y
    3a74:	c0 58       	subi	r28, 0x80	; 128
    3a76:	d0 40       	sbci	r29, 0x00	; 0
    3a78:	82 2b       	or	r24, r18
    3a7a:	88 0f       	add	r24, r24
    3a7c:	99 1f       	adc	r25, r25
    3a7e:	aa 1f       	adc	r26, r26
    3a80:	bb 1f       	adc	r27, r27
    3a82:	ac 01       	movw	r20, r24
    3a84:	bd 01       	movw	r22, r26
    3a86:	44 0f       	add	r20, r20
    3a88:	55 1f       	adc	r21, r21
    3a8a:	66 1f       	adc	r22, r22
    3a8c:	77 1f       	adc	r23, r23
    3a8e:	44 0f       	add	r20, r20
    3a90:	55 1f       	adc	r21, r21
    3a92:	66 1f       	adc	r22, r22
    3a94:	77 1f       	adc	r23, r23
    3a96:	84 0f       	add	r24, r20
    3a98:	95 1f       	adc	r25, r21
    3a9a:	a6 1f       	adc	r26, r22
    3a9c:	b7 1f       	adc	r27, r23
    3a9e:	f8 01       	movw	r30, r16
    3aa0:	80 83       	st	Z, r24
    3aa2:	91 83       	std	Z+1, r25	; 0x01
    3aa4:	a2 83       	std	Z+2, r26	; 0x02
    3aa6:	b3 83       	std	Z+3, r27	; 0x03
    3aa8:	f1 2c       	mov	r15, r1
    3aaa:	8f 2d       	mov	r24, r15
    3aac:	cc 57       	subi	r28, 0x7C	; 124
    3aae:	df 4f       	sbci	r29, 0xFF	; 255
    3ab0:	cd bf       	out	0x3d, r28	; 61
    3ab2:	de bf       	out	0x3e, r29	; 62
    3ab4:	df 91       	pop	r29
    3ab6:	cf 91       	pop	r28
    3ab8:	1f 91       	pop	r17
    3aba:	0f 91       	pop	r16
    3abc:	ff 90       	pop	r15
    3abe:	ef 90       	pop	r14
    3ac0:	df 90       	pop	r13
    3ac2:	cf 90       	pop	r12
    3ac4:	08 95       	ret

00003ac6 <get_MOTOR_PID>:
    3ac6:	ef 92       	push	r14
    3ac8:	ff 92       	push	r15
    3aca:	0f 93       	push	r16
    3acc:	1f 93       	push	r17
    3ace:	cf 93       	push	r28
    3ad0:	df 93       	push	r29
    3ad2:	cd b7       	in	r28, 0x3d	; 61
    3ad4:	de b7       	in	r29, 0x3e	; 62
    3ad6:	c1 59       	subi	r28, 0x91	; 145
    3ad8:	d1 09       	sbc	r29, r1
    3ada:	cd bf       	out	0x3d, r28	; 61
    3adc:	de bf       	out	0x3e, r29	; 62
    3ade:	f8 2e       	mov	r15, r24
    3ae0:	8b 01       	movw	r16, r22
    3ae2:	85 e2       	ldi	r24, 0x25	; 37
    3ae4:	ed ea       	ldi	r30, 0xAD	; 173
    3ae6:	f9 eb       	ldi	r31, 0xB9	; 185
    3ae8:	de 01       	movw	r26, r28
    3aea:	11 96       	adiw	r26, 0x01	; 1
    3aec:	01 90       	ld	r0, Z+
    3aee:	0d 92       	st	X+, r0
    3af0:	8a 95       	dec	r24
    3af2:	e1 f7       	brne	.-8      	; 0x3aec <get_MOTOR_PID+0x26>
    3af4:	2c e1       	ldi	r18, 0x1C	; 28
    3af6:	ae 01       	movw	r20, r28
    3af8:	4a 58       	subi	r20, 0x8A	; 138
    3afa:	5f 4f       	sbci	r21, 0xFF	; 255
    3afc:	6f e3       	ldi	r22, 0x3F	; 63
    3afe:	8f 2d       	mov	r24, r15
    3b00:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <get_MOTOR>
    3b04:	e8 2e       	mov	r14, r24
    3b06:	83 e6       	ldi	r24, 0x63	; 99
    3b08:	e8 12       	cpse	r14, r24
    3b0a:	1b c0       	rjmp	.+54     	; 0x3b42 <get_MOTOR_PID+0x7c>
    3b0c:	81 ec       	ldi	r24, 0xC1	; 193
    3b0e:	8f 0d       	add	r24, r15
    3b10:	1f 92       	push	r1
    3b12:	8f 93       	push	r24
    3b14:	ce 01       	movw	r24, r28
    3b16:	01 96       	adiw	r24, 0x01	; 1
    3b18:	9f 93       	push	r25
    3b1a:	8f 93       	push	r24
    3b1c:	8e 01       	movw	r16, r28
    3b1e:	0a 5d       	subi	r16, 0xDA	; 218
    3b20:	1f 4f       	sbci	r17, 0xFF	; 255
    3b22:	1f 93       	push	r17
    3b24:	0f 93       	push	r16
    3b26:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
    3b2a:	b8 01       	movw	r22, r16
    3b2c:	86 e3       	ldi	r24, 0x36	; 54
    3b2e:	91 e0       	ldi	r25, 0x01	; 1
    3b30:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    3b34:	0f 90       	pop	r0
    3b36:	0f 90       	pop	r0
    3b38:	0f 90       	pop	r0
    3b3a:	0f 90       	pop	r0
    3b3c:	0f 90       	pop	r0
    3b3e:	0f 90       	pop	r0
    3b40:	e5 c1       	rjmp	.+970    	; 0x3f0c <get_MOTOR_PID+0x446>
    3b42:	e7 96       	adiw	r28, 0x37	; 55
    3b44:	4f ad       	ldd	r20, Y+63	; 0x3f
    3b46:	e7 97       	sbiw	r28, 0x37	; 55
    3b48:	50 e0       	ldi	r21, 0x00	; 0
    3b4a:	60 e0       	ldi	r22, 0x00	; 0
    3b4c:	70 e0       	ldi	r23, 0x00	; 0
    3b4e:	74 2f       	mov	r23, r20
    3b50:	66 27       	eor	r22, r22
    3b52:	55 27       	eor	r21, r21
    3b54:	44 27       	eor	r20, r20
    3b56:	e8 96       	adiw	r28, 0x38	; 56
    3b58:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b5a:	e8 97       	sbiw	r28, 0x38	; 56
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	a0 e0       	ldi	r26, 0x00	; 0
    3b60:	b0 e0       	ldi	r27, 0x00	; 0
    3b62:	dc 01       	movw	r26, r24
    3b64:	99 27       	eor	r25, r25
    3b66:	88 27       	eor	r24, r24
    3b68:	48 2b       	or	r20, r24
    3b6a:	59 2b       	or	r21, r25
    3b6c:	6a 2b       	or	r22, r26
    3b6e:	7b 2b       	or	r23, r27
    3b70:	e9 96       	adiw	r28, 0x39	; 57
    3b72:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b74:	e9 97       	sbiw	r28, 0x39	; 57
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	a0 e0       	ldi	r26, 0x00	; 0
    3b7a:	b0 e0       	ldi	r27, 0x00	; 0
    3b7c:	ba 2f       	mov	r27, r26
    3b7e:	a9 2f       	mov	r26, r25
    3b80:	98 2f       	mov	r25, r24
    3b82:	88 27       	eor	r24, r24
    3b84:	84 2b       	or	r24, r20
    3b86:	95 2b       	or	r25, r21
    3b88:	a6 2b       	or	r26, r22
    3b8a:	b7 2b       	or	r27, r23
    3b8c:	ea 96       	adiw	r28, 0x3a	; 58
    3b8e:	2f ad       	ldd	r18, Y+63	; 0x3f
    3b90:	ea 97       	sbiw	r28, 0x3a	; 58
    3b92:	bc 01       	movw	r22, r24
    3b94:	cd 01       	movw	r24, r26
    3b96:	62 2b       	or	r22, r18
    3b98:	0e 94 84 31 	call	0x6308	; 0x6308 <__floatsisf>
    3b9c:	20 e0       	ldi	r18, 0x00	; 0
    3b9e:	30 e0       	ldi	r19, 0x00	; 0
    3ba0:	40 e8       	ldi	r20, 0x80	; 128
    3ba2:	5a e3       	ldi	r21, 0x3A	; 58
    3ba4:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
    3ba8:	f8 01       	movw	r30, r16
    3baa:	60 83       	st	Z, r22
    3bac:	71 83       	std	Z+1, r23	; 0x01
    3bae:	82 83       	std	Z+2, r24	; 0x02
    3bb0:	93 83       	std	Z+3, r25	; 0x03
    3bb2:	eb 96       	adiw	r28, 0x3b	; 59
    3bb4:	4f ad       	ldd	r20, Y+63	; 0x3f
    3bb6:	eb 97       	sbiw	r28, 0x3b	; 59
    3bb8:	50 e0       	ldi	r21, 0x00	; 0
    3bba:	60 e0       	ldi	r22, 0x00	; 0
    3bbc:	70 e0       	ldi	r23, 0x00	; 0
    3bbe:	74 2f       	mov	r23, r20
    3bc0:	66 27       	eor	r22, r22
    3bc2:	55 27       	eor	r21, r21
    3bc4:	44 27       	eor	r20, r20
    3bc6:	ec 96       	adiw	r28, 0x3c	; 60
    3bc8:	8f ad       	ldd	r24, Y+63	; 0x3f
    3bca:	ec 97       	sbiw	r28, 0x3c	; 60
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	a0 e0       	ldi	r26, 0x00	; 0
    3bd0:	b0 e0       	ldi	r27, 0x00	; 0
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	99 27       	eor	r25, r25
    3bd6:	88 27       	eor	r24, r24
    3bd8:	48 2b       	or	r20, r24
    3bda:	59 2b       	or	r21, r25
    3bdc:	6a 2b       	or	r22, r26
    3bde:	7b 2b       	or	r23, r27
    3be0:	ed 96       	adiw	r28, 0x3d	; 61
    3be2:	8f ad       	ldd	r24, Y+63	; 0x3f
    3be4:	ed 97       	sbiw	r28, 0x3d	; 61
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	a0 e0       	ldi	r26, 0x00	; 0
    3bea:	b0 e0       	ldi	r27, 0x00	; 0
    3bec:	ba 2f       	mov	r27, r26
    3bee:	a9 2f       	mov	r26, r25
    3bf0:	98 2f       	mov	r25, r24
    3bf2:	88 27       	eor	r24, r24
    3bf4:	84 2b       	or	r24, r20
    3bf6:	95 2b       	or	r25, r21
    3bf8:	a6 2b       	or	r26, r22
    3bfa:	b7 2b       	or	r27, r23
    3bfc:	ee 96       	adiw	r28, 0x3e	; 62
    3bfe:	2f ad       	ldd	r18, Y+63	; 0x3f
    3c00:	ee 97       	sbiw	r28, 0x3e	; 62
    3c02:	bc 01       	movw	r22, r24
    3c04:	cd 01       	movw	r24, r26
    3c06:	62 2b       	or	r22, r18
    3c08:	0e 94 84 31 	call	0x6308	; 0x6308 <__floatsisf>
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	40 e8       	ldi	r20, 0x80	; 128
    3c12:	5a e3       	ldi	r21, 0x3A	; 58
    3c14:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
    3c18:	f8 01       	movw	r30, r16
    3c1a:	64 83       	std	Z+4, r22	; 0x04
    3c1c:	75 83       	std	Z+5, r23	; 0x05
    3c1e:	86 83       	std	Z+6, r24	; 0x06
    3c20:	97 83       	std	Z+7, r25	; 0x07
    3c22:	ef 96       	adiw	r28, 0x3f	; 63
    3c24:	4f ad       	ldd	r20, Y+63	; 0x3f
    3c26:	ef 97       	sbiw	r28, 0x3f	; 63
    3c28:	50 e0       	ldi	r21, 0x00	; 0
    3c2a:	60 e0       	ldi	r22, 0x00	; 0
    3c2c:	70 e0       	ldi	r23, 0x00	; 0
    3c2e:	74 2f       	mov	r23, r20
    3c30:	66 27       	eor	r22, r22
    3c32:	55 27       	eor	r21, r21
    3c34:	44 27       	eor	r20, r20
    3c36:	c1 58       	subi	r28, 0x81	; 129
    3c38:	df 4f       	sbci	r29, 0xFF	; 255
    3c3a:	88 81       	ld	r24, Y
    3c3c:	cf 57       	subi	r28, 0x7F	; 127
    3c3e:	d0 40       	sbci	r29, 0x00	; 0
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	a0 e0       	ldi	r26, 0x00	; 0
    3c44:	b0 e0       	ldi	r27, 0x00	; 0
    3c46:	dc 01       	movw	r26, r24
    3c48:	99 27       	eor	r25, r25
    3c4a:	88 27       	eor	r24, r24
    3c4c:	48 2b       	or	r20, r24
    3c4e:	59 2b       	or	r21, r25
    3c50:	6a 2b       	or	r22, r26
    3c52:	7b 2b       	or	r23, r27
    3c54:	c0 58       	subi	r28, 0x80	; 128
    3c56:	df 4f       	sbci	r29, 0xFF	; 255
    3c58:	88 81       	ld	r24, Y
    3c5a:	c0 58       	subi	r28, 0x80	; 128
    3c5c:	d0 40       	sbci	r29, 0x00	; 0
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	a0 e0       	ldi	r26, 0x00	; 0
    3c62:	b0 e0       	ldi	r27, 0x00	; 0
    3c64:	ba 2f       	mov	r27, r26
    3c66:	a9 2f       	mov	r26, r25
    3c68:	98 2f       	mov	r25, r24
    3c6a:	88 27       	eor	r24, r24
    3c6c:	84 2b       	or	r24, r20
    3c6e:	95 2b       	or	r25, r21
    3c70:	a6 2b       	or	r26, r22
    3c72:	b7 2b       	or	r27, r23
    3c74:	cf 57       	subi	r28, 0x7F	; 127
    3c76:	df 4f       	sbci	r29, 0xFF	; 255
    3c78:	28 81       	ld	r18, Y
    3c7a:	c1 58       	subi	r28, 0x81	; 129
    3c7c:	d0 40       	sbci	r29, 0x00	; 0
    3c7e:	bc 01       	movw	r22, r24
    3c80:	cd 01       	movw	r24, r26
    3c82:	62 2b       	or	r22, r18
    3c84:	0e 94 84 31 	call	0x6308	; 0x6308 <__floatsisf>
    3c88:	20 e0       	ldi	r18, 0x00	; 0
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	40 e8       	ldi	r20, 0x80	; 128
    3c8e:	5a e3       	ldi	r21, 0x3A	; 58
    3c90:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
    3c94:	f8 01       	movw	r30, r16
    3c96:	60 87       	std	Z+8, r22	; 0x08
    3c98:	71 87       	std	Z+9, r23	; 0x09
    3c9a:	82 87       	std	Z+10, r24	; 0x0a
    3c9c:	93 87       	std	Z+11, r25	; 0x0b
    3c9e:	ce 57       	subi	r28, 0x7E	; 126
    3ca0:	df 4f       	sbci	r29, 0xFF	; 255
    3ca2:	88 81       	ld	r24, Y
    3ca4:	c2 58       	subi	r28, 0x82	; 130
    3ca6:	d0 40       	sbci	r29, 0x00	; 0
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	a0 e0       	ldi	r26, 0x00	; 0
    3cac:	b0 e0       	ldi	r27, 0x00	; 0
    3cae:	78 2f       	mov	r23, r24
    3cb0:	66 27       	eor	r22, r22
    3cb2:	55 27       	eor	r21, r21
    3cb4:	44 27       	eor	r20, r20
    3cb6:	cd 57       	subi	r28, 0x7D	; 125
    3cb8:	df 4f       	sbci	r29, 0xFF	; 255
    3cba:	98 81       	ld	r25, Y
    3cbc:	c3 58       	subi	r28, 0x83	; 131
    3cbe:	d0 40       	sbci	r29, 0x00	; 0
    3cc0:	89 2f       	mov	r24, r25
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	a0 e0       	ldi	r26, 0x00	; 0
    3cc6:	b0 e0       	ldi	r27, 0x00	; 0
    3cc8:	dc 01       	movw	r26, r24
    3cca:	99 27       	eor	r25, r25
    3ccc:	88 27       	eor	r24, r24
    3cce:	84 2b       	or	r24, r20
    3cd0:	95 2b       	or	r25, r21
    3cd2:	a6 2b       	or	r26, r22
    3cd4:	b7 2b       	or	r27, r23
    3cd6:	cc 57       	subi	r28, 0x7C	; 124
    3cd8:	df 4f       	sbci	r29, 0xFF	; 255
    3cda:	48 81       	ld	r20, Y
    3cdc:	c4 58       	subi	r28, 0x84	; 132
    3cde:	d0 40       	sbci	r29, 0x00	; 0
    3ce0:	50 e0       	ldi	r21, 0x00	; 0
    3ce2:	60 e0       	ldi	r22, 0x00	; 0
    3ce4:	70 e0       	ldi	r23, 0x00	; 0
    3ce6:	76 2f       	mov	r23, r22
    3ce8:	65 2f       	mov	r22, r21
    3cea:	54 2f       	mov	r21, r20
    3cec:	44 27       	eor	r20, r20
    3cee:	84 2b       	or	r24, r20
    3cf0:	95 2b       	or	r25, r21
    3cf2:	a6 2b       	or	r26, r22
    3cf4:	b7 2b       	or	r27, r23
    3cf6:	cb 57       	subi	r28, 0x7B	; 123
    3cf8:	df 4f       	sbci	r29, 0xFF	; 255
    3cfa:	28 81       	ld	r18, Y
    3cfc:	c5 58       	subi	r28, 0x85	; 133
    3cfe:	d0 40       	sbci	r29, 0x00	; 0
    3d00:	82 2b       	or	r24, r18
    3d02:	84 87       	std	Z+12, r24	; 0x0c
    3d04:	95 87       	std	Z+13, r25	; 0x0d
    3d06:	a6 87       	std	Z+14, r26	; 0x0e
    3d08:	b7 87       	std	Z+15, r27	; 0x0f
    3d0a:	ca 57       	subi	r28, 0x7A	; 122
    3d0c:	df 4f       	sbci	r29, 0xFF	; 255
    3d0e:	88 81       	ld	r24, Y
    3d10:	c6 58       	subi	r28, 0x86	; 134
    3d12:	d0 40       	sbci	r29, 0x00	; 0
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	a0 e0       	ldi	r26, 0x00	; 0
    3d18:	b0 e0       	ldi	r27, 0x00	; 0
    3d1a:	78 2f       	mov	r23, r24
    3d1c:	66 27       	eor	r22, r22
    3d1e:	55 27       	eor	r21, r21
    3d20:	44 27       	eor	r20, r20
    3d22:	c9 57       	subi	r28, 0x79	; 121
    3d24:	df 4f       	sbci	r29, 0xFF	; 255
    3d26:	98 81       	ld	r25, Y
    3d28:	c7 58       	subi	r28, 0x87	; 135
    3d2a:	d0 40       	sbci	r29, 0x00	; 0
    3d2c:	89 2f       	mov	r24, r25
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	a0 e0       	ldi	r26, 0x00	; 0
    3d32:	b0 e0       	ldi	r27, 0x00	; 0
    3d34:	dc 01       	movw	r26, r24
    3d36:	99 27       	eor	r25, r25
    3d38:	88 27       	eor	r24, r24
    3d3a:	84 2b       	or	r24, r20
    3d3c:	95 2b       	or	r25, r21
    3d3e:	a6 2b       	or	r26, r22
    3d40:	b7 2b       	or	r27, r23
    3d42:	c8 57       	subi	r28, 0x78	; 120
    3d44:	df 4f       	sbci	r29, 0xFF	; 255
    3d46:	48 81       	ld	r20, Y
    3d48:	c8 58       	subi	r28, 0x88	; 136
    3d4a:	d0 40       	sbci	r29, 0x00	; 0
    3d4c:	50 e0       	ldi	r21, 0x00	; 0
    3d4e:	60 e0       	ldi	r22, 0x00	; 0
    3d50:	70 e0       	ldi	r23, 0x00	; 0
    3d52:	76 2f       	mov	r23, r22
    3d54:	65 2f       	mov	r22, r21
    3d56:	54 2f       	mov	r21, r20
    3d58:	44 27       	eor	r20, r20
    3d5a:	84 2b       	or	r24, r20
    3d5c:	95 2b       	or	r25, r21
    3d5e:	a6 2b       	or	r26, r22
    3d60:	b7 2b       	or	r27, r23
    3d62:	c7 57       	subi	r28, 0x77	; 119
    3d64:	df 4f       	sbci	r29, 0xFF	; 255
    3d66:	28 81       	ld	r18, Y
    3d68:	c9 58       	subi	r28, 0x89	; 137
    3d6a:	d0 40       	sbci	r29, 0x00	; 0
    3d6c:	82 2b       	or	r24, r18
    3d6e:	80 8b       	std	Z+16, r24	; 0x10
    3d70:	91 8b       	std	Z+17, r25	; 0x11
    3d72:	a2 8b       	std	Z+18, r26	; 0x12
    3d74:	b3 8b       	std	Z+19, r27	; 0x13
    3d76:	c6 57       	subi	r28, 0x76	; 118
    3d78:	df 4f       	sbci	r29, 0xFF	; 255
    3d7a:	88 81       	ld	r24, Y
    3d7c:	ca 58       	subi	r28, 0x8A	; 138
    3d7e:	d0 40       	sbci	r29, 0x00	; 0
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	a0 e0       	ldi	r26, 0x00	; 0
    3d84:	b0 e0       	ldi	r27, 0x00	; 0
    3d86:	78 2f       	mov	r23, r24
    3d88:	66 27       	eor	r22, r22
    3d8a:	55 27       	eor	r21, r21
    3d8c:	44 27       	eor	r20, r20
    3d8e:	c5 57       	subi	r28, 0x75	; 117
    3d90:	df 4f       	sbci	r29, 0xFF	; 255
    3d92:	98 81       	ld	r25, Y
    3d94:	cb 58       	subi	r28, 0x8B	; 139
    3d96:	d0 40       	sbci	r29, 0x00	; 0
    3d98:	89 2f       	mov	r24, r25
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	a0 e0       	ldi	r26, 0x00	; 0
    3d9e:	b0 e0       	ldi	r27, 0x00	; 0
    3da0:	dc 01       	movw	r26, r24
    3da2:	99 27       	eor	r25, r25
    3da4:	88 27       	eor	r24, r24
    3da6:	84 2b       	or	r24, r20
    3da8:	95 2b       	or	r25, r21
    3daa:	a6 2b       	or	r26, r22
    3dac:	b7 2b       	or	r27, r23
    3dae:	c4 57       	subi	r28, 0x74	; 116
    3db0:	df 4f       	sbci	r29, 0xFF	; 255
    3db2:	48 81       	ld	r20, Y
    3db4:	cc 58       	subi	r28, 0x8C	; 140
    3db6:	d0 40       	sbci	r29, 0x00	; 0
    3db8:	50 e0       	ldi	r21, 0x00	; 0
    3dba:	60 e0       	ldi	r22, 0x00	; 0
    3dbc:	70 e0       	ldi	r23, 0x00	; 0
    3dbe:	76 2f       	mov	r23, r22
    3dc0:	65 2f       	mov	r22, r21
    3dc2:	54 2f       	mov	r21, r20
    3dc4:	44 27       	eor	r20, r20
    3dc6:	84 2b       	or	r24, r20
    3dc8:	95 2b       	or	r25, r21
    3dca:	a6 2b       	or	r26, r22
    3dcc:	b7 2b       	or	r27, r23
    3dce:	c3 57       	subi	r28, 0x73	; 115
    3dd0:	df 4f       	sbci	r29, 0xFF	; 255
    3dd2:	28 81       	ld	r18, Y
    3dd4:	cd 58       	subi	r28, 0x8D	; 141
    3dd6:	d0 40       	sbci	r29, 0x00	; 0
    3dd8:	82 2b       	or	r24, r18
    3dda:	84 8b       	std	Z+20, r24	; 0x14
    3ddc:	95 8b       	std	Z+21, r25	; 0x15
    3dde:	a6 8b       	std	Z+22, r26	; 0x16
    3de0:	b7 8b       	std	Z+23, r27	; 0x17
    3de2:	c2 57       	subi	r28, 0x72	; 114
    3de4:	df 4f       	sbci	r29, 0xFF	; 255
    3de6:	88 81       	ld	r24, Y
    3de8:	ce 58       	subi	r28, 0x8E	; 142
    3dea:	d0 40       	sbci	r29, 0x00	; 0
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	a0 e0       	ldi	r26, 0x00	; 0
    3df0:	b0 e0       	ldi	r27, 0x00	; 0
    3df2:	78 2f       	mov	r23, r24
    3df4:	66 27       	eor	r22, r22
    3df6:	55 27       	eor	r21, r21
    3df8:	44 27       	eor	r20, r20
    3dfa:	c1 57       	subi	r28, 0x71	; 113
    3dfc:	df 4f       	sbci	r29, 0xFF	; 255
    3dfe:	98 81       	ld	r25, Y
    3e00:	cf 58       	subi	r28, 0x8F	; 143
    3e02:	d0 40       	sbci	r29, 0x00	; 0
    3e04:	89 2f       	mov	r24, r25
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	a0 e0       	ldi	r26, 0x00	; 0
    3e0a:	b0 e0       	ldi	r27, 0x00	; 0
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	99 27       	eor	r25, r25
    3e10:	88 27       	eor	r24, r24
    3e12:	84 2b       	or	r24, r20
    3e14:	95 2b       	or	r25, r21
    3e16:	a6 2b       	or	r26, r22
    3e18:	b7 2b       	or	r27, r23
    3e1a:	c0 57       	subi	r28, 0x70	; 112
    3e1c:	df 4f       	sbci	r29, 0xFF	; 255
    3e1e:	48 81       	ld	r20, Y
    3e20:	c0 59       	subi	r28, 0x90	; 144
    3e22:	d0 40       	sbci	r29, 0x00	; 0
    3e24:	50 e0       	ldi	r21, 0x00	; 0
    3e26:	60 e0       	ldi	r22, 0x00	; 0
    3e28:	70 e0       	ldi	r23, 0x00	; 0
    3e2a:	76 2f       	mov	r23, r22
    3e2c:	65 2f       	mov	r22, r21
    3e2e:	54 2f       	mov	r21, r20
    3e30:	44 27       	eor	r20, r20
    3e32:	84 2b       	or	r24, r20
    3e34:	95 2b       	or	r25, r21
    3e36:	a6 2b       	or	r26, r22
    3e38:	b7 2b       	or	r27, r23
    3e3a:	cf 56       	subi	r28, 0x6F	; 111
    3e3c:	df 4f       	sbci	r29, 0xFF	; 255
    3e3e:	28 81       	ld	r18, Y
    3e40:	c1 59       	subi	r28, 0x91	; 145
    3e42:	d0 40       	sbci	r29, 0x00	; 0
    3e44:	82 2b       	or	r24, r18
    3e46:	80 8f       	std	Z+24, r24	; 0x18
    3e48:	91 8f       	std	Z+25, r25	; 0x19
    3e4a:	a2 8f       	std	Z+26, r26	; 0x1a
    3e4c:	b3 8f       	std	Z+27, r27	; 0x1b
    3e4e:	20 e1       	ldi	r18, 0x10	; 16
    3e50:	ae 01       	movw	r20, r28
    3e52:	4a 58       	subi	r20, 0x8A	; 138
    3e54:	5f 4f       	sbci	r21, 0xFF	; 255
    3e56:	67 e3       	ldi	r22, 0x37	; 55
    3e58:	8f 2d       	mov	r24, r15
    3e5a:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <get_MOTOR>
    3e5e:	e8 2e       	mov	r14, r24
    3e60:	f3 e6       	ldi	r31, 0x63	; 99
    3e62:	8f 13       	cpse	r24, r31
    3e64:	1b c0       	rjmp	.+54     	; 0x3e9c <get_MOTOR_PID+0x3d6>
    3e66:	81 ec       	ldi	r24, 0xC1	; 193
    3e68:	8f 0d       	add	r24, r15
    3e6a:	1f 92       	push	r1
    3e6c:	8f 93       	push	r24
    3e6e:	ce 01       	movw	r24, r28
    3e70:	01 96       	adiw	r24, 0x01	; 1
    3e72:	9f 93       	push	r25
    3e74:	8f 93       	push	r24
    3e76:	8e 01       	movw	r16, r28
    3e78:	0a 5d       	subi	r16, 0xDA	; 218
    3e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e7c:	1f 93       	push	r17
    3e7e:	0f 93       	push	r16
    3e80:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
    3e84:	b8 01       	movw	r22, r16
    3e86:	86 e3       	ldi	r24, 0x36	; 54
    3e88:	91 e0       	ldi	r25, 0x01	; 1
    3e8a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    3e8e:	0f 90       	pop	r0
    3e90:	0f 90       	pop	r0
    3e92:	0f 90       	pop	r0
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	0f 90       	pop	r0
    3e9a:	38 c0       	rjmp	.+112    	; 0x3f0c <get_MOTOR_PID+0x446>
    3e9c:	ce 57       	subi	r28, 0x7E	; 126
    3e9e:	df 4f       	sbci	r29, 0xFF	; 255
    3ea0:	88 81       	ld	r24, Y
    3ea2:	c2 58       	subi	r28, 0x82	; 130
    3ea4:	d0 40       	sbci	r29, 0x00	; 0
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	a0 e0       	ldi	r26, 0x00	; 0
    3eaa:	b0 e0       	ldi	r27, 0x00	; 0
    3eac:	78 2f       	mov	r23, r24
    3eae:	66 27       	eor	r22, r22
    3eb0:	55 27       	eor	r21, r21
    3eb2:	44 27       	eor	r20, r20
    3eb4:	cd 57       	subi	r28, 0x7D	; 125
    3eb6:	df 4f       	sbci	r29, 0xFF	; 255
    3eb8:	98 81       	ld	r25, Y
    3eba:	c3 58       	subi	r28, 0x83	; 131
    3ebc:	d0 40       	sbci	r29, 0x00	; 0
    3ebe:	89 2f       	mov	r24, r25
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	a0 e0       	ldi	r26, 0x00	; 0
    3ec4:	b0 e0       	ldi	r27, 0x00	; 0
    3ec6:	dc 01       	movw	r26, r24
    3ec8:	99 27       	eor	r25, r25
    3eca:	88 27       	eor	r24, r24
    3ecc:	84 2b       	or	r24, r20
    3ece:	95 2b       	or	r25, r21
    3ed0:	a6 2b       	or	r26, r22
    3ed2:	b7 2b       	or	r27, r23
    3ed4:	cc 57       	subi	r28, 0x7C	; 124
    3ed6:	df 4f       	sbci	r29, 0xFF	; 255
    3ed8:	48 81       	ld	r20, Y
    3eda:	c4 58       	subi	r28, 0x84	; 132
    3edc:	d0 40       	sbci	r29, 0x00	; 0
    3ede:	50 e0       	ldi	r21, 0x00	; 0
    3ee0:	60 e0       	ldi	r22, 0x00	; 0
    3ee2:	70 e0       	ldi	r23, 0x00	; 0
    3ee4:	76 2f       	mov	r23, r22
    3ee6:	65 2f       	mov	r22, r21
    3ee8:	54 2f       	mov	r21, r20
    3eea:	44 27       	eor	r20, r20
    3eec:	84 2b       	or	r24, r20
    3eee:	95 2b       	or	r25, r21
    3ef0:	a6 2b       	or	r26, r22
    3ef2:	b7 2b       	or	r27, r23
    3ef4:	cb 57       	subi	r28, 0x7B	; 123
    3ef6:	df 4f       	sbci	r29, 0xFF	; 255
    3ef8:	28 81       	ld	r18, Y
    3efa:	c5 58       	subi	r28, 0x85	; 133
    3efc:	d0 40       	sbci	r29, 0x00	; 0
    3efe:	82 2b       	or	r24, r18
    3f00:	f8 01       	movw	r30, r16
    3f02:	84 8f       	std	Z+28, r24	; 0x1c
    3f04:	95 8f       	std	Z+29, r25	; 0x1d
    3f06:	a6 8f       	std	Z+30, r26	; 0x1e
    3f08:	b7 8f       	std	Z+31, r27	; 0x1f
    3f0a:	e1 2c       	mov	r14, r1
    3f0c:	8e 2d       	mov	r24, r14
    3f0e:	cf 56       	subi	r28, 0x6F	; 111
    3f10:	df 4f       	sbci	r29, 0xFF	; 255
    3f12:	cd bf       	out	0x3d, r28	; 61
    3f14:	de bf       	out	0x3e, r29	; 62
    3f16:	df 91       	pop	r29
    3f18:	cf 91       	pop	r28
    3f1a:	1f 91       	pop	r17
    3f1c:	0f 91       	pop	r16
    3f1e:	ff 90       	pop	r15
    3f20:	ef 90       	pop	r14
    3f22:	08 95       	ret

00003f24 <get_MOTOR_S4MODE>:
    3f24:	cf 92       	push	r12
    3f26:	df 92       	push	r13
    3f28:	ef 92       	push	r14
    3f2a:	ff 92       	push	r15
    3f2c:	0f 93       	push	r16
    3f2e:	1f 93       	push	r17
    3f30:	cf 93       	push	r28
    3f32:	df 93       	push	r29
    3f34:	cd b7       	in	r28, 0x3d	; 61
    3f36:	de b7       	in	r29, 0x3e	; 62
    3f38:	c7 57       	subi	r28, 0x77	; 119
    3f3a:	d1 09       	sbc	r29, r1
    3f3c:	cd bf       	out	0x3d, r28	; 61
    3f3e:	de bf       	out	0x3e, r29	; 62
    3f40:	08 2f       	mov	r16, r24
    3f42:	7b 01       	movw	r14, r22
    3f44:	84 e2       	ldi	r24, 0x24	; 36
    3f46:	e2 ed       	ldi	r30, 0xD2	; 210
    3f48:	f9 eb       	ldi	r31, 0xB9	; 185
    3f4a:	de 01       	movw	r26, r28
    3f4c:	11 96       	adiw	r26, 0x01	; 1
    3f4e:	01 90       	ld	r0, Z+
    3f50:	0d 92       	st	X+, r0
    3f52:	8a 95       	dec	r24
    3f54:	e1 f7       	brne	.-8      	; 0x3f4e <get_MOTOR_S4MODE+0x2a>
    3f56:	23 e0       	ldi	r18, 0x03	; 3
    3f58:	ae 01       	movw	r20, r28
    3f5a:	4b 58       	subi	r20, 0x8B	; 139
    3f5c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f5e:	6b e4       	ldi	r22, 0x4B	; 75
    3f60:	80 2f       	mov	r24, r16
    3f62:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <get_MOTOR>
    3f66:	18 2f       	mov	r17, r24
    3f68:	83 36       	cpi	r24, 0x63	; 99
    3f6a:	f1 f4       	brne	.+60     	; 0x3fa8 <get_MOTOR_S4MODE+0x84>
    3f6c:	0f 53       	subi	r16, 0x3F	; 63
    3f6e:	1f 92       	push	r1
    3f70:	0f 93       	push	r16
    3f72:	ce 01       	movw	r24, r28
    3f74:	01 96       	adiw	r24, 0x01	; 1
    3f76:	9f 93       	push	r25
    3f78:	8f 93       	push	r24
    3f7a:	6e 01       	movw	r12, r28
    3f7c:	85 e2       	ldi	r24, 0x25	; 37
    3f7e:	c8 0e       	add	r12, r24
    3f80:	d1 1c       	adc	r13, r1
    3f82:	df 92       	push	r13
    3f84:	cf 92       	push	r12
    3f86:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
    3f8a:	b6 01       	movw	r22, r12
    3f8c:	86 e3       	ldi	r24, 0x36	; 54
    3f8e:	91 e0       	ldi	r25, 0x01	; 1
    3f90:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    3f94:	8f ef       	ldi	r24, 0xFF	; 255
    3f96:	f7 01       	movw	r30, r14
    3f98:	80 83       	st	Z, r24
    3f9a:	0f 90       	pop	r0
    3f9c:	0f 90       	pop	r0
    3f9e:	0f 90       	pop	r0
    3fa0:	0f 90       	pop	r0
    3fa2:	0f 90       	pop	r0
    3fa4:	0f 90       	pop	r0
    3fa6:	06 c0       	rjmp	.+12     	; 0x3fb4 <get_MOTOR_S4MODE+0x90>
    3fa8:	e7 96       	adiw	r28, 0x37	; 55
    3faa:	8f ad       	ldd	r24, Y+63	; 0x3f
    3fac:	e7 97       	sbiw	r28, 0x37	; 55
    3fae:	f7 01       	movw	r30, r14
    3fb0:	80 83       	st	Z, r24
    3fb2:	10 e0       	ldi	r17, 0x00	; 0
    3fb4:	81 2f       	mov	r24, r17
    3fb6:	c9 58       	subi	r28, 0x89	; 137
    3fb8:	df 4f       	sbci	r29, 0xFF	; 255
    3fba:	cd bf       	out	0x3d, r28	; 61
    3fbc:	de bf       	out	0x3e, r29	; 62
    3fbe:	df 91       	pop	r29
    3fc0:	cf 91       	pop	r28
    3fc2:	1f 91       	pop	r17
    3fc4:	0f 91       	pop	r16
    3fc6:	ff 90       	pop	r15
    3fc8:	ef 90       	pop	r14
    3fca:	df 90       	pop	r13
    3fcc:	cf 90       	pop	r12
    3fce:	08 95       	ret

00003fd0 <get_MOTOR_SPEED>:
    3fd0:	ef 92       	push	r14
    3fd2:	ff 92       	push	r15
    3fd4:	0f 93       	push	r16
    3fd6:	1f 93       	push	r17
    3fd8:	cf 93       	push	r28
    3fda:	df 93       	push	r29
    3fdc:	cd b7       	in	r28, 0x3d	; 61
    3fde:	de b7       	in	r29, 0x3e	; 62
    3fe0:	c1 58       	subi	r28, 0x81	; 129
    3fe2:	d1 09       	sbc	r29, r1
    3fe4:	cd bf       	out	0x3d, r28	; 61
    3fe6:	de bf       	out	0x3e, r29	; 62
    3fe8:	e8 2e       	mov	r14, r24
    3fea:	8b 01       	movw	r16, r22
    3fec:	8c e2       	ldi	r24, 0x2C	; 44
    3fee:	e6 ef       	ldi	r30, 0xF6	; 246
    3ff0:	f9 eb       	ldi	r31, 0xB9	; 185
    3ff2:	de 01       	movw	r26, r28
    3ff4:	aa 5a       	subi	r26, 0xAA	; 170
    3ff6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ff8:	01 90       	ld	r0, Z+
    3ffa:	0d 92       	st	X+, r0
    3ffc:	8a 95       	dec	r24
    3ffe:	e1 f7       	brne	.-8      	; 0x3ff8 <get_MOTOR_SPEED+0x28>
    4000:	25 e0       	ldi	r18, 0x05	; 5
    4002:	ae 01       	movw	r20, r28
    4004:	4f 5a       	subi	r20, 0xAF	; 175
    4006:	5f 4f       	sbci	r21, 0xFF	; 255
    4008:	62 e1       	ldi	r22, 0x12	; 18
    400a:	8e 2d       	mov	r24, r14
    400c:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <get_MOTOR>
    4010:	f8 2e       	mov	r15, r24
    4012:	83 e6       	ldi	r24, 0x63	; 99
    4014:	f8 12       	cpse	r15, r24
    4016:	1c c0       	rjmp	.+56     	; 0x4050 <__RODATA_PM_OFFSET__+0x50>
    4018:	81 ec       	ldi	r24, 0xC1	; 193
    401a:	8e 0d       	add	r24, r14
    401c:	1f 92       	push	r1
    401e:	8f 93       	push	r24
    4020:	ce 01       	movw	r24, r28
    4022:	8a 5a       	subi	r24, 0xAA	; 170
    4024:	9f 4f       	sbci	r25, 0xFF	; 255
    4026:	9f 93       	push	r25
    4028:	8f 93       	push	r24
    402a:	8e 01       	movw	r16, r28
    402c:	0f 5f       	subi	r16, 0xFF	; 255
    402e:	1f 4f       	sbci	r17, 0xFF	; 255
    4030:	1f 93       	push	r17
    4032:	0f 93       	push	r16
    4034:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
    4038:	b8 01       	movw	r22, r16
    403a:	86 e3       	ldi	r24, 0x36	; 54
    403c:	91 e0       	ldi	r25, 0x01	; 1
    403e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    4042:	0f 90       	pop	r0
    4044:	0f 90       	pop	r0
    4046:	0f 90       	pop	r0
    4048:	0f 90       	pop	r0
    404a:	0f 90       	pop	r0
    404c:	0f 90       	pop	r0
    404e:	30 c0       	rjmp	.+96     	; 0x40b0 <__RODATA_PM_OFFSET__+0xb0>
    4050:	62 96       	adiw	r28, 0x12	; 18
    4052:	8f ad       	ldd	r24, Y+63	; 0x3f
    4054:	62 97       	sbiw	r28, 0x12	; 18
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	a0 e0       	ldi	r26, 0x00	; 0
    405a:	b0 e0       	ldi	r27, 0x00	; 0
    405c:	78 2f       	mov	r23, r24
    405e:	66 27       	eor	r22, r22
    4060:	55 27       	eor	r21, r21
    4062:	44 27       	eor	r20, r20
    4064:	63 96       	adiw	r28, 0x13	; 19
    4066:	9f ad       	ldd	r25, Y+63	; 0x3f
    4068:	63 97       	sbiw	r28, 0x13	; 19
    406a:	89 2f       	mov	r24, r25
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	a0 e0       	ldi	r26, 0x00	; 0
    4070:	b0 e0       	ldi	r27, 0x00	; 0
    4072:	dc 01       	movw	r26, r24
    4074:	99 27       	eor	r25, r25
    4076:	88 27       	eor	r24, r24
    4078:	84 2b       	or	r24, r20
    407a:	95 2b       	or	r25, r21
    407c:	a6 2b       	or	r26, r22
    407e:	b7 2b       	or	r27, r23
    4080:	64 96       	adiw	r28, 0x14	; 20
    4082:	4f ad       	ldd	r20, Y+63	; 0x3f
    4084:	64 97       	sbiw	r28, 0x14	; 20
    4086:	50 e0       	ldi	r21, 0x00	; 0
    4088:	60 e0       	ldi	r22, 0x00	; 0
    408a:	70 e0       	ldi	r23, 0x00	; 0
    408c:	76 2f       	mov	r23, r22
    408e:	65 2f       	mov	r22, r21
    4090:	54 2f       	mov	r21, r20
    4092:	44 27       	eor	r20, r20
    4094:	84 2b       	or	r24, r20
    4096:	95 2b       	or	r25, r21
    4098:	a6 2b       	or	r26, r22
    409a:	b7 2b       	or	r27, r23
    409c:	65 96       	adiw	r28, 0x15	; 21
    409e:	2f ad       	ldd	r18, Y+63	; 0x3f
    40a0:	65 97       	sbiw	r28, 0x15	; 21
    40a2:	82 2b       	or	r24, r18
    40a4:	f8 01       	movw	r30, r16
    40a6:	80 83       	st	Z, r24
    40a8:	91 83       	std	Z+1, r25	; 0x01
    40aa:	a2 83       	std	Z+2, r26	; 0x02
    40ac:	b3 83       	std	Z+3, r27	; 0x03
    40ae:	f1 2c       	mov	r15, r1
    40b0:	8f 2d       	mov	r24, r15
    40b2:	cf 57       	subi	r28, 0x7F	; 127
    40b4:	df 4f       	sbci	r29, 0xFF	; 255
    40b6:	cd bf       	out	0x3d, r28	; 61
    40b8:	de bf       	out	0x3e, r29	; 62
    40ba:	df 91       	pop	r29
    40bc:	cf 91       	pop	r28
    40be:	1f 91       	pop	r17
    40c0:	0f 91       	pop	r16
    40c2:	ff 90       	pop	r15
    40c4:	ef 90       	pop	r14
    40c6:	08 95       	ret

000040c8 <get_MOTOR_STATUS>:
    40c8:	ef 92       	push	r14
    40ca:	ff 92       	push	r15
    40cc:	0f 93       	push	r16
    40ce:	1f 93       	push	r17
    40d0:	cf 93       	push	r28
    40d2:	df 93       	push	r29
    40d4:	cd b7       	in	r28, 0x3d	; 61
    40d6:	de b7       	in	r29, 0x3e	; 62
    40d8:	c9 57       	subi	r28, 0x79	; 121
    40da:	d1 09       	sbc	r29, r1
    40dc:	cd bf       	out	0x3d, r28	; 61
    40de:	de bf       	out	0x3e, r29	; 62
    40e0:	e8 2e       	mov	r14, r24
    40e2:	8b 01       	movw	r16, r22
    40e4:	85 e2       	ldi	r24, 0x25	; 37
    40e6:	e2 e2       	ldi	r30, 0x22	; 34
    40e8:	fa eb       	ldi	r31, 0xBA	; 186
    40ea:	de 01       	movw	r26, r28
    40ec:	af 5a       	subi	r26, 0xAF	; 175
    40ee:	bf 4f       	sbci	r27, 0xFF	; 255
    40f0:	01 90       	ld	r0, Z+
    40f2:	0d 92       	st	X+, r0
    40f4:	8a 95       	dec	r24
    40f6:	e1 f7       	brne	.-8      	; 0x40f0 <get_MOTOR_STATUS+0x28>
    40f8:	24 e0       	ldi	r18, 0x04	; 4
    40fa:	ae 01       	movw	r20, r28
    40fc:	4a 58       	subi	r20, 0x8A	; 138
    40fe:	5f 4f       	sbci	r21, 0xFF	; 255
    4100:	6a e5       	ldi	r22, 0x5A	; 90
    4102:	8e 2d       	mov	r24, r14
    4104:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <get_MOTOR>
    4108:	f8 2e       	mov	r15, r24
    410a:	83 e6       	ldi	r24, 0x63	; 99
    410c:	f8 12       	cpse	r15, r24
    410e:	1d c0       	rjmp	.+58     	; 0x414a <get_MOTOR_STATUS+0x82>
    4110:	8e 2d       	mov	r24, r14
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	cf 97       	sbiw	r24, 0x3f	; 63
    4116:	9f 93       	push	r25
    4118:	8f 93       	push	r24
    411a:	ce 01       	movw	r24, r28
    411c:	8f 5a       	subi	r24, 0xAF	; 175
    411e:	9f 4f       	sbci	r25, 0xFF	; 255
    4120:	9f 93       	push	r25
    4122:	8f 93       	push	r24
    4124:	8e 01       	movw	r16, r28
    4126:	0f 5f       	subi	r16, 0xFF	; 255
    4128:	1f 4f       	sbci	r17, 0xFF	; 255
    412a:	1f 93       	push	r17
    412c:	0f 93       	push	r16
    412e:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
    4132:	b8 01       	movw	r22, r16
    4134:	86 e3       	ldi	r24, 0x36	; 54
    4136:	91 e0       	ldi	r25, 0x01	; 1
    4138:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    413c:	0f 90       	pop	r0
    413e:	0f 90       	pop	r0
    4140:	0f 90       	pop	r0
    4142:	0f 90       	pop	r0
    4144:	0f 90       	pop	r0
    4146:	0f 90       	pop	r0
    4148:	30 c0       	rjmp	.+96     	; 0x41aa <get_MOTOR_STATUS+0xe2>
    414a:	e7 96       	adiw	r28, 0x37	; 55
    414c:	8f ad       	ldd	r24, Y+63	; 0x3f
    414e:	e7 97       	sbiw	r28, 0x37	; 55
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	a0 e0       	ldi	r26, 0x00	; 0
    4154:	b0 e0       	ldi	r27, 0x00	; 0
    4156:	78 2f       	mov	r23, r24
    4158:	66 27       	eor	r22, r22
    415a:	55 27       	eor	r21, r21
    415c:	44 27       	eor	r20, r20
    415e:	e8 96       	adiw	r28, 0x38	; 56
    4160:	9f ad       	ldd	r25, Y+63	; 0x3f
    4162:	e8 97       	sbiw	r28, 0x38	; 56
    4164:	89 2f       	mov	r24, r25
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	a0 e0       	ldi	r26, 0x00	; 0
    416a:	b0 e0       	ldi	r27, 0x00	; 0
    416c:	dc 01       	movw	r26, r24
    416e:	99 27       	eor	r25, r25
    4170:	88 27       	eor	r24, r24
    4172:	84 2b       	or	r24, r20
    4174:	95 2b       	or	r25, r21
    4176:	a6 2b       	or	r26, r22
    4178:	b7 2b       	or	r27, r23
    417a:	e9 96       	adiw	r28, 0x39	; 57
    417c:	4f ad       	ldd	r20, Y+63	; 0x3f
    417e:	e9 97       	sbiw	r28, 0x39	; 57
    4180:	50 e0       	ldi	r21, 0x00	; 0
    4182:	60 e0       	ldi	r22, 0x00	; 0
    4184:	70 e0       	ldi	r23, 0x00	; 0
    4186:	76 2f       	mov	r23, r22
    4188:	65 2f       	mov	r22, r21
    418a:	54 2f       	mov	r21, r20
    418c:	44 27       	eor	r20, r20
    418e:	84 2b       	or	r24, r20
    4190:	95 2b       	or	r25, r21
    4192:	a6 2b       	or	r26, r22
    4194:	b7 2b       	or	r27, r23
    4196:	ea 96       	adiw	r28, 0x3a	; 58
    4198:	2f ad       	ldd	r18, Y+63	; 0x3f
    419a:	ea 97       	sbiw	r28, 0x3a	; 58
    419c:	82 2b       	or	r24, r18
    419e:	f8 01       	movw	r30, r16
    41a0:	80 83       	st	Z, r24
    41a2:	91 83       	std	Z+1, r25	; 0x01
    41a4:	a2 83       	std	Z+2, r26	; 0x02
    41a6:	b3 83       	std	Z+3, r27	; 0x03
    41a8:	f1 2c       	mov	r15, r1
    41aa:	8f 2d       	mov	r24, r15
    41ac:	c7 58       	subi	r28, 0x87	; 135
    41ae:	df 4f       	sbci	r29, 0xFF	; 255
    41b0:	cd bf       	out	0x3d, r28	; 61
    41b2:	de bf       	out	0x3e, r29	; 62
    41b4:	df 91       	pop	r29
    41b6:	cf 91       	pop	r28
    41b8:	1f 91       	pop	r17
    41ba:	0f 91       	pop	r16
    41bc:	ff 90       	pop	r15
    41be:	ef 90       	pop	r14
    41c0:	08 95       	ret

000041c2 <get_MOTOR_LIMIT>:
    41c2:	0f 93       	push	r16
    41c4:	1f 93       	push	r17
    41c6:	cf 93       	push	r28
    41c8:	df 93       	push	r29
    41ca:	cd b7       	in	r28, 0x3d	; 61
    41cc:	de b7       	in	r29, 0x3e	; 62
    41ce:	c2 58       	subi	r28, 0x82	; 130
    41d0:	d1 09       	sbc	r29, r1
    41d2:	cd bf       	out	0x3d, r28	; 61
    41d4:	de bf       	out	0x3e, r29	; 62
    41d6:	18 2f       	mov	r17, r24
    41d8:	8e e2       	ldi	r24, 0x2E	; 46
    41da:	e7 e4       	ldi	r30, 0x47	; 71
    41dc:	fa eb       	ldi	r31, 0xBA	; 186
    41de:	de 01       	movw	r26, r28
    41e0:	af 5a       	subi	r26, 0xAF	; 175
    41e2:	bf 4f       	sbci	r27, 0xFF	; 255
    41e4:	01 90       	ld	r0, Z+
    41e6:	0d 92       	st	X+, r0
    41e8:	8a 95       	dec	r24
    41ea:	e1 f7       	brne	.-8      	; 0x41e4 <get_MOTOR_LIMIT+0x22>
    41ec:	be 01       	movw	r22, r28
    41ee:	61 58       	subi	r22, 0x81	; 129
    41f0:	7f 4f       	sbci	r23, 0xFF	; 255
    41f2:	81 2f       	mov	r24, r17
    41f4:	0e 94 64 20 	call	0x40c8	; 0x40c8 <get_MOTOR_STATUS>
    41f8:	83 36       	cpi	r24, 0x63	; 99
    41fa:	d1 f4       	brne	.+52     	; 0x4230 <get_MOTOR_LIMIT+0x6e>
    41fc:	1f 51       	subi	r17, 0x1F	; 31
    41fe:	1f 92       	push	r1
    4200:	1f 93       	push	r17
    4202:	ce 01       	movw	r24, r28
    4204:	8f 5a       	subi	r24, 0xAF	; 175
    4206:	9f 4f       	sbci	r25, 0xFF	; 255
    4208:	9f 93       	push	r25
    420a:	8f 93       	push	r24
    420c:	8e 01       	movw	r16, r28
    420e:	0f 5f       	subi	r16, 0xFF	; 255
    4210:	1f 4f       	sbci	r17, 0xFF	; 255
    4212:	1f 93       	push	r17
    4214:	0f 93       	push	r16
    4216:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
    421a:	b8 01       	movw	r22, r16
    421c:	86 e3       	ldi	r24, 0x36	; 54
    421e:	91 e0       	ldi	r25, 0x01	; 1
    4220:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    4224:	0f 90       	pop	r0
    4226:	0f 90       	pop	r0
    4228:	0f 90       	pop	r0
    422a:	0f 90       	pop	r0
    422c:	0f 90       	pop	r0
    422e:	0f 90       	pop	r0
    4230:	c1 58       	subi	r28, 0x81	; 129
    4232:	df 4f       	sbci	r29, 0xFF	; 255
    4234:	88 81       	ld	r24, Y
    4236:	99 81       	ldd	r25, Y+1	; 0x01
    4238:	aa 81       	ldd	r26, Y+2	; 0x02
    423a:	bb 81       	ldd	r27, Y+3	; 0x03
    423c:	cf 57       	subi	r28, 0x7F	; 127
    423e:	d0 40       	sbci	r29, 0x00	; 0
    4240:	a6 ff       	sbrs	r26, 6
    4242:	02 c0       	rjmp	.+4      	; 0x4248 <get_MOTOR_LIMIT+0x86>
    4244:	81 e0       	ldi	r24, 0x01	; 1
    4246:	01 c0       	rjmp	.+2      	; 0x424a <get_MOTOR_LIMIT+0x88>
    4248:	80 e0       	ldi	r24, 0x00	; 0
    424a:	ce 57       	subi	r28, 0x7E	; 126
    424c:	df 4f       	sbci	r29, 0xFF	; 255
    424e:	cd bf       	out	0x3d, r28	; 61
    4250:	de bf       	out	0x3e, r29	; 62
    4252:	df 91       	pop	r29
    4254:	cf 91       	pop	r28
    4256:	1f 91       	pop	r17
    4258:	0f 91       	pop	r16
    425a:	08 95       	ret

0000425c <get_MOTOR_LIMITS>:
    425c:	ef 92       	push	r14
    425e:	ff 92       	push	r15
    4260:	1f 93       	push	r17
    4262:	cf 93       	push	r28
    4264:	df 93       	push	r29
    4266:	00 d0       	rcall	.+0      	; 0x4268 <get_MOTOR_LIMITS+0xc>
    4268:	00 d0       	rcall	.+0      	; 0x426a <get_MOTOR_LIMITS+0xe>
    426a:	cd b7       	in	r28, 0x3d	; 61
    426c:	de b7       	in	r29, 0x3e	; 62
    426e:	10 e0       	ldi	r17, 0x00	; 0
    4270:	1b c0       	rjmp	.+54     	; 0x42a8 <get_MOTOR_LIMITS+0x4c>
    4272:	e1 2e       	mov	r14, r17
    4274:	f1 2c       	mov	r15, r1
    4276:	f7 01       	movw	r30, r14
    4278:	e0 5c       	subi	r30, 0xC0	; 192
    427a:	f5 4d       	sbci	r31, 0xD5	; 213
    427c:	10 82       	st	Z, r1
    427e:	be 01       	movw	r22, r28
    4280:	6f 5f       	subi	r22, 0xFF	; 255
    4282:	7f 4f       	sbci	r23, 0xFF	; 255
    4284:	80 e8       	ldi	r24, 0x80	; 128
    4286:	81 0f       	add	r24, r17
    4288:	0e 94 64 20 	call	0x40c8	; 0x40c8 <get_MOTOR_STATUS>
    428c:	83 36       	cpi	r24, 0x63	; 99
    428e:	59 f0       	breq	.+22     	; 0x42a6 <get_MOTOR_LIMITS+0x4a>
    4290:	89 81       	ldd	r24, Y+1	; 0x01
    4292:	9a 81       	ldd	r25, Y+2	; 0x02
    4294:	ab 81       	ldd	r26, Y+3	; 0x03
    4296:	bc 81       	ldd	r27, Y+4	; 0x04
    4298:	a6 ff       	sbrs	r26, 6
    429a:	05 c0       	rjmp	.+10     	; 0x42a6 <get_MOTOR_LIMITS+0x4a>
    429c:	f7 01       	movw	r30, r14
    429e:	e0 5c       	subi	r30, 0xC0	; 192
    42a0:	f5 4d       	sbci	r31, 0xD5	; 213
    42a2:	81 e0       	ldi	r24, 0x01	; 1
    42a4:	80 83       	st	Z, r24
    42a6:	1f 5f       	subi	r17, 0xFF	; 255
    42a8:	13 30       	cpi	r17, 0x03	; 3
    42aa:	18 f3       	brcs	.-58     	; 0x4272 <get_MOTOR_LIMITS+0x16>
    42ac:	80 e0       	ldi	r24, 0x00	; 0
    42ae:	24 96       	adiw	r28, 0x04	; 4
    42b0:	cd bf       	out	0x3d, r28	; 61
    42b2:	de bf       	out	0x3e, r29	; 62
    42b4:	df 91       	pop	r29
    42b6:	cf 91       	pop	r28
    42b8:	1f 91       	pop	r17
    42ba:	ff 90       	pop	r15
    42bc:	ef 90       	pop	r14
    42be:	08 95       	ret

000042c0 <motorsMoving>:
    42c0:	ef 92       	push	r14
    42c2:	ff 92       	push	r15
    42c4:	0f 93       	push	r16
    42c6:	1f 93       	push	r17
    42c8:	cf 93       	push	r28
    42ca:	df 93       	push	r29
    42cc:	cd b7       	in	r28, 0x3d	; 61
    42ce:	de b7       	in	r29, 0x3e	; 62
    42d0:	ce 57       	subi	r28, 0x7E	; 126
    42d2:	d1 09       	sbc	r29, r1
    42d4:	cd bf       	out	0x3d, r28	; 61
    42d6:	de bf       	out	0x3e, r29	; 62
    42d8:	8a e2       	ldi	r24, 0x2A	; 42
    42da:	ee e9       	ldi	r30, 0x9E	; 158
    42dc:	fa eb       	ldi	r31, 0xBA	; 186
    42de:	de 01       	movw	r26, r28
    42e0:	11 96       	adiw	r26, 0x01	; 1
    42e2:	01 90       	ld	r0, Z+
    42e4:	0d 92       	st	X+, r0
    42e6:	8a 95       	dec	r24
    42e8:	e1 f7       	brne	.-8      	; 0x42e2 <motorsMoving+0x22>
    42ea:	ef 96       	adiw	r28, 0x3f	; 63
    42ec:	1c ae       	std	Y+60, r1	; 0x3c
    42ee:	1d ae       	std	Y+61, r1	; 0x3d
    42f0:	1e ae       	std	Y+62, r1	; 0x3e
    42f2:	1f ae       	std	Y+63, r1	; 0x3f
    42f4:	ef 97       	sbiw	r28, 0x3f	; 63
    42f6:	00 e0       	ldi	r16, 0x00	; 0
    42f8:	10 e0       	ldi	r17, 0x00	; 0
    42fa:	31 c0       	rjmp	.+98     	; 0x435e <motorsMoving+0x9e>
    42fc:	be 01       	movw	r22, r28
    42fe:	65 58       	subi	r22, 0x85	; 133
    4300:	7f 4f       	sbci	r23, 0xFF	; 255
    4302:	80 e8       	ldi	r24, 0x80	; 128
    4304:	81 0f       	add	r24, r17
    4306:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <get_MOTOR_SPEED>
    430a:	83 36       	cpi	r24, 0x63	; 99
    430c:	e1 f4       	brne	.+56     	; 0x4346 <motorsMoving+0x86>
    430e:	1f 92       	push	r1
    4310:	81 e4       	ldi	r24, 0x41	; 65
    4312:	81 0f       	add	r24, r17
    4314:	8f 93       	push	r24
    4316:	ce 01       	movw	r24, r28
    4318:	01 96       	adiw	r24, 0x01	; 1
    431a:	9f 93       	push	r25
    431c:	8f 93       	push	r24
    431e:	7e 01       	movw	r14, r28
    4320:	8b e2       	ldi	r24, 0x2B	; 43
    4322:	e8 0e       	add	r14, r24
    4324:	f1 1c       	adc	r15, r1
    4326:	ff 92       	push	r15
    4328:	ef 92       	push	r14
    432a:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
    432e:	b7 01       	movw	r22, r14
    4330:	86 e3       	ldi	r24, 0x36	; 54
    4332:	91 e0       	ldi	r25, 0x01	; 1
    4334:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    4338:	0f 90       	pop	r0
    433a:	0f 90       	pop	r0
    433c:	0f 90       	pop	r0
    433e:	0f 90       	pop	r0
    4340:	0f 90       	pop	r0
    4342:	0f 90       	pop	r0
    4344:	0b c0       	rjmp	.+22     	; 0x435c <motorsMoving+0x9c>
    4346:	ef 96       	adiw	r28, 0x3f	; 63
    4348:	8c ad       	ldd	r24, Y+60	; 0x3c
    434a:	9d ad       	ldd	r25, Y+61	; 0x3d
    434c:	ae ad       	ldd	r26, Y+62	; 0x3e
    434e:	bf ad       	ldd	r27, Y+63	; 0x3f
    4350:	ef 97       	sbiw	r28, 0x3f	; 63
    4352:	89 2b       	or	r24, r25
    4354:	8a 2b       	or	r24, r26
    4356:	8b 2b       	or	r24, r27
    4358:	09 f0       	breq	.+2      	; 0x435c <motorsMoving+0x9c>
    435a:	0f 5f       	subi	r16, 0xFF	; 255
    435c:	1f 5f       	subi	r17, 0xFF	; 255
    435e:	13 30       	cpi	r17, 0x03	; 3
    4360:	68 f2       	brcs	.-102    	; 0x42fc <motorsMoving+0x3c>
    4362:	00 23       	and	r16, r16
    4364:	11 f0       	breq	.+4      	; 0x436a <motorsMoving+0xaa>
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	01 c0       	rjmp	.+2      	; 0x436c <motorsMoving+0xac>
    436a:	80 e0       	ldi	r24, 0x00	; 0
    436c:	c2 58       	subi	r28, 0x82	; 130
    436e:	df 4f       	sbci	r29, 0xFF	; 255
    4370:	cd bf       	out	0x3d, r28	; 61
    4372:	de bf       	out	0x3e, r29	; 62
    4374:	df 91       	pop	r29
    4376:	cf 91       	pop	r28
    4378:	1f 91       	pop	r17
    437a:	0f 91       	pop	r16
    437c:	ff 90       	pop	r15
    437e:	ef 90       	pop	r14
    4380:	08 95       	ret

00004382 <put_FRAM_ENCODERS>:
    4382:	1f 93       	push	r17
    4384:	cf 93       	push	r28
    4386:	df 93       	push	r29
    4388:	cd b7       	in	r28, 0x3d	; 61
    438a:	de b7       	in	r29, 0x3e	; 62
    438c:	a2 97       	sbiw	r28, 0x22	; 34
    438e:	cd bf       	out	0x3d, r28	; 61
    4390:	de bf       	out	0x3e, r29	; 62
    4392:	86 e0       	ldi	r24, 0x06	; 6
    4394:	e8 e7       	ldi	r30, 0x78	; 120
    4396:	f2 eb       	ldi	r31, 0xB2	; 178
    4398:	de 01       	movw	r26, r28
    439a:	59 96       	adiw	r26, 0x19	; 25
    439c:	01 90       	ld	r0, Z+
    439e:	0d 92       	st	X+, r0
    43a0:	8a 95       	dec	r24
    43a2:	e1 f7       	brne	.-8      	; 0x439c <put_FRAM_ENCODERS+0x1a>
    43a4:	10 e0       	ldi	r17, 0x00	; 0
    43a6:	27 c0       	rjmp	.+78     	; 0x43f6 <put_FRAM_ENCODERS+0x74>
    43a8:	be 01       	movw	r22, r28
    43aa:	61 5e       	subi	r22, 0xE1	; 225
    43ac:	7f 4f       	sbci	r23, 0xFF	; 255
    43ae:	80 e8       	ldi	r24, 0x80	; 128
    43b0:	81 0f       	add	r24, r17
    43b2:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <get_MOTOR_ENCODER>
    43b6:	83 36       	cpi	r24, 0x63	; 99
    43b8:	71 f1       	breq	.+92     	; 0x4416 <put_FRAM_ENCODERS+0x94>
    43ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    43bc:	98 a1       	ldd	r25, Y+32	; 0x20
    43be:	29 a1       	ldd	r18, Y+33	; 0x21
    43c0:	3a a1       	ldd	r19, Y+34	; 0x22
    43c2:	3d 8b       	std	Y+21, r19	; 0x15
    43c4:	2e 8b       	std	Y+22, r18	; 0x16
    43c6:	9f 8b       	std	Y+23, r25	; 0x17
    43c8:	88 8f       	std	Y+24, r24	; 0x18
    43ca:	e1 2f       	mov	r30, r17
    43cc:	f0 e0       	ldi	r31, 0x00	; 0
    43ce:	ee 0f       	add	r30, r30
    43d0:	ff 1f       	adc	r31, r31
    43d2:	81 e0       	ldi	r24, 0x01	; 1
    43d4:	90 e0       	ldi	r25, 0x00	; 0
    43d6:	8c 0f       	add	r24, r28
    43d8:	9d 1f       	adc	r25, r29
    43da:	e8 0f       	add	r30, r24
    43dc:	f9 1f       	adc	r31, r25
    43de:	60 8d       	ldd	r22, Z+24	; 0x18
    43e0:	71 8d       	ldd	r23, Z+25	; 0x19
    43e2:	24 e0       	ldi	r18, 0x04	; 4
    43e4:	ae 01       	movw	r20, r28
    43e6:	4b 5e       	subi	r20, 0xEB	; 235
    43e8:	5f 4f       	sbci	r21, 0xFF	; 255
    43ea:	80 e5       	ldi	r24, 0x50	; 80
    43ec:	0e 94 33 09 	call	0x1266	; 0x1266 <write_FRAM>
    43f0:	83 36       	cpi	r24, 0x63	; 99
    43f2:	89 f0       	breq	.+34     	; 0x4416 <put_FRAM_ENCODERS+0x94>
    43f4:	1f 5f       	subi	r17, 0xFF	; 255
    43f6:	13 30       	cpi	r17, 0x03	; 3
    43f8:	b8 f2       	brcs	.-82     	; 0x43a8 <put_FRAM_ENCODERS+0x26>
    43fa:	ce 01       	movw	r24, r28
    43fc:	01 96       	adiw	r24, 0x01	; 1
    43fe:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
    4402:	24 e1       	ldi	r18, 0x14	; 20
    4404:	ae 01       	movw	r20, r28
    4406:	4f 5f       	subi	r20, 0xFF	; 255
    4408:	5f 4f       	sbci	r21, 0xFF	; 255
    440a:	60 e2       	ldi	r22, 0x20	; 32
    440c:	70 e0       	ldi	r23, 0x00	; 0
    440e:	80 e5       	ldi	r24, 0x50	; 80
    4410:	0e 94 33 09 	call	0x1266	; 0x1266 <write_FRAM>
    4414:	80 e0       	ldi	r24, 0x00	; 0
    4416:	a2 96       	adiw	r28, 0x22	; 34
    4418:	cd bf       	out	0x3d, r28	; 61
    441a:	de bf       	out	0x3e, r29	; 62
    441c:	df 91       	pop	r29
    441e:	cf 91       	pop	r28
    4420:	1f 91       	pop	r17
    4422:	08 95       	ret

00004424 <put_MOTOR>:
    4424:	8f 92       	push	r8
    4426:	9f 92       	push	r9
    4428:	af 92       	push	r10
    442a:	bf 92       	push	r11
    442c:	cf 92       	push	r12
    442e:	df 92       	push	r13
    4430:	ef 92       	push	r14
    4432:	ff 92       	push	r15
    4434:	0f 93       	push	r16
    4436:	1f 93       	push	r17
    4438:	cf 93       	push	r28
    443a:	df 93       	push	r29
    443c:	cd b7       	in	r28, 0x3d	; 61
    443e:	de b7       	in	r29, 0x3e	; 62
    4440:	c5 59       	subi	r28, 0x95	; 149
    4442:	d1 09       	sbc	r29, r1
    4444:	cd bf       	out	0x3d, r28	; 61
    4446:	de bf       	out	0x3e, r29	; 62
    4448:	a8 2e       	mov	r10, r24
    444a:	b2 2e       	mov	r11, r18
    444c:	cd b6       	in	r12, 0x3d	; 61
    444e:	de b6       	in	r13, 0x3e	; 62
    4450:	80 e2       	ldi	r24, 0x20	; 32
    4452:	e8 ec       	ldi	r30, 0xC8	; 200
    4454:	fa eb       	ldi	r31, 0xBA	; 186
    4456:	de 01       	movw	r26, r28
    4458:	11 96       	adiw	r26, 0x01	; 1
    445a:	01 90       	ld	r0, Z+
    445c:	0d 92       	st	X+, r0
    445e:	8a 95       	dec	r24
    4460:	e1 f7       	brne	.-8      	; 0x445a <put_MOTOR+0x36>
    4462:	85 e2       	ldi	r24, 0x25	; 37
    4464:	e8 ee       	ldi	r30, 0xE8	; 232
    4466:	fa eb       	ldi	r31, 0xBA	; 186
    4468:	de 01       	movw	r26, r28
    446a:	91 96       	adiw	r26, 0x21	; 33
    446c:	01 90       	ld	r0, Z+
    446e:	0d 92       	st	X+, r0
    4470:	8a 95       	dec	r24
    4472:	e1 f7       	brne	.-8      	; 0x446c <put_MOTOR+0x48>
    4474:	82 2e       	mov	r8, r18
    4476:	91 2c       	mov	r9, r1
    4478:	c4 01       	movw	r24, r8
    447a:	04 96       	adiw	r24, 0x04	; 4
    447c:	74 01       	movw	r14, r8
    447e:	23 e0       	ldi	r18, 0x03	; 3
    4480:	e2 0e       	add	r14, r18
    4482:	f1 1c       	adc	r15, r1
    4484:	ad b7       	in	r26, 0x3d	; 61
    4486:	be b7       	in	r27, 0x3e	; 62
    4488:	a8 1b       	sub	r26, r24
    448a:	b9 0b       	sbc	r27, r25
    448c:	ad bf       	out	0x3d, r26	; 61
    448e:	be bf       	out	0x3e, r27	; 62
    4490:	0d b7       	in	r16, 0x3d	; 61
    4492:	1e b7       	in	r17, 0x3e	; 62
    4494:	0f 5f       	subi	r16, 0xFF	; 255
    4496:	1f 4f       	sbci	r17, 0xFF	; 255
    4498:	f8 01       	movw	r30, r16
    449a:	10 92 42 2b 	sts	0x2B42, r1	; 0x802b42 <ser_recv1+0xff>
    449e:	81 e0       	ldi	r24, 0x01	; 1
    44a0:	80 93 41 2b 	sts	0x2B41, r24	; 0x802b41 <ser_recv1+0xfe>
    44a4:	11 96       	adiw	r26, 0x01	; 1
    44a6:	ac 92       	st	X, r10
    44a8:	61 83       	std	Z+1, r22	; 0x01
    44aa:	60 e0       	ldi	r22, 0x00	; 0
    44ac:	0e c0       	rjmp	.+28     	; 0x44ca <put_MOTOR+0xa6>
    44ae:	86 2f       	mov	r24, r22
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	9c 01       	movw	r18, r24
    44b4:	2e 5f       	subi	r18, 0xFE	; 254
    44b6:	3f 4f       	sbci	r19, 0xFF	; 255
    44b8:	da 01       	movw	r26, r20
    44ba:	a8 0f       	add	r26, r24
    44bc:	b9 1f       	adc	r27, r25
    44be:	8c 91       	ld	r24, X
    44c0:	df 01       	movw	r26, r30
    44c2:	a2 0f       	add	r26, r18
    44c4:	b3 1f       	adc	r27, r19
    44c6:	8c 93       	st	X, r24
    44c8:	6f 5f       	subi	r22, 0xFF	; 255
    44ca:	6b 15       	cp	r22, r11
    44cc:	80 f3       	brcs	.-32     	; 0x44ae <put_MOTOR+0x8a>
    44ce:	b2 e0       	ldi	r27, 0x02	; 2
    44d0:	8b 0e       	add	r8, r27
    44d2:	91 1c       	adc	r9, r1
    44d4:	b4 01       	movw	r22, r8
    44d6:	c8 01       	movw	r24, r16
    44d8:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <crc16>
    44dc:	d8 01       	movw	r26, r16
    44de:	a8 0d       	add	r26, r8
    44e0:	b9 1d       	adc	r27, r9
    44e2:	9c 93       	st	X, r25
    44e4:	f8 01       	movw	r30, r16
    44e6:	ee 0d       	add	r30, r14
    44e8:	ff 1d       	adc	r31, r15
    44ea:	80 83       	st	Z, r24
    44ec:	64 e0       	ldi	r22, 0x04	; 4
    44ee:	6b 0d       	add	r22, r11
    44f0:	c8 01       	movw	r24, r16
    44f2:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <send_USART1>
    44f6:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    44fa:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
    44fe:	24 c0       	rjmp	.+72     	; 0x4548 <put_MOTOR+0x124>
    4500:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    4504:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    4508:	85 36       	cpi	r24, 0x65	; 101
    450a:	91 05       	cpc	r25, r1
    450c:	e0 f0       	brcs	.+56     	; 0x4546 <put_MOTOR+0x122>
    450e:	81 ec       	ldi	r24, 0xC1	; 193
    4510:	8a 0d       	add	r24, r10
    4512:	1f 92       	push	r1
    4514:	8f 93       	push	r24
    4516:	ce 01       	movw	r24, r28
    4518:	01 96       	adiw	r24, 0x01	; 1
    451a:	9f 93       	push	r25
    451c:	8f 93       	push	r24
    451e:	8e 01       	movw	r16, r28
    4520:	0a 5b       	subi	r16, 0xBA	; 186
    4522:	1f 4f       	sbci	r17, 0xFF	; 255
    4524:	1f 93       	push	r17
    4526:	0f 93       	push	r16
    4528:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
    452c:	b8 01       	movw	r22, r16
    452e:	86 e3       	ldi	r24, 0x36	; 54
    4530:	91 e0       	ldi	r25, 0x01	; 1
    4532:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    4536:	0f 90       	pop	r0
    4538:	0f 90       	pop	r0
    453a:	0f 90       	pop	r0
    453c:	0f 90       	pop	r0
    453e:	0f 90       	pop	r0
    4540:	0f 90       	pop	r0
    4542:	83 e6       	ldi	r24, 0x63	; 99
    4544:	2a c0       	rjmp	.+84     	; 0x459a <put_MOTOR+0x176>
    4546:	00 00       	nop
    4548:	90 91 42 2b 	lds	r25, 0x2B42	; 0x802b42 <ser_recv1+0xff>
    454c:	80 91 41 2b 	lds	r24, 0x2B41	; 0x802b41 <ser_recv1+0xfe>
    4550:	98 17       	cp	r25, r24
    4552:	b0 f2       	brcs	.-84     	; 0x4500 <put_MOTOR+0xdc>
    4554:	90 91 43 2a 	lds	r25, 0x2A43	; 0x802a43 <ser_recv1>
    4558:	9f 3f       	cpi	r25, 0xFF	; 255
    455a:	f1 f0       	breq	.+60     	; 0x4598 <put_MOTOR+0x174>
    455c:	81 ee       	ldi	r24, 0xE1	; 225
    455e:	8a 0d       	add	r24, r10
    4560:	1f 92       	push	r1
    4562:	9f 93       	push	r25
    4564:	1f 92       	push	r1
    4566:	8f 93       	push	r24
    4568:	ce 01       	movw	r24, r28
    456a:	81 96       	adiw	r24, 0x21	; 33
    456c:	9f 93       	push	r25
    456e:	8f 93       	push	r24
    4570:	8e 01       	movw	r16, r28
    4572:	0a 5b       	subi	r16, 0xBA	; 186
    4574:	1f 4f       	sbci	r17, 0xFF	; 255
    4576:	1f 93       	push	r17
    4578:	0f 93       	push	r16
    457a:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
    457e:	b8 01       	movw	r22, r16
    4580:	86 e3       	ldi	r24, 0x36	; 54
    4582:	91 e0       	ldi	r25, 0x01	; 1
    4584:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    4588:	2d b7       	in	r18, 0x3d	; 61
    458a:	3e b7       	in	r19, 0x3e	; 62
    458c:	28 5f       	subi	r18, 0xF8	; 248
    458e:	3f 4f       	sbci	r19, 0xFF	; 255
    4590:	2d bf       	out	0x3d, r18	; 61
    4592:	3e bf       	out	0x3e, r19	; 62
    4594:	83 e6       	ldi	r24, 0x63	; 99
    4596:	01 c0       	rjmp	.+2      	; 0x459a <put_MOTOR+0x176>
    4598:	80 e0       	ldi	r24, 0x00	; 0
    459a:	cd be       	out	0x3d, r12	; 61
    459c:	de be       	out	0x3e, r13	; 62
    459e:	cb 56       	subi	r28, 0x6B	; 107
    45a0:	df 4f       	sbci	r29, 0xFF	; 255
    45a2:	cd bf       	out	0x3d, r28	; 61
    45a4:	de bf       	out	0x3e, r29	; 62
    45a6:	df 91       	pop	r29
    45a8:	cf 91       	pop	r28
    45aa:	1f 91       	pop	r17
    45ac:	0f 91       	pop	r16
    45ae:	ff 90       	pop	r15
    45b0:	ef 90       	pop	r14
    45b2:	df 90       	pop	r13
    45b4:	cf 90       	pop	r12
    45b6:	bf 90       	pop	r11
    45b8:	af 90       	pop	r10
    45ba:	9f 90       	pop	r9
    45bc:	8f 90       	pop	r8
    45be:	08 95       	ret

000045c0 <move_MOTOR>:
    45c0:	bf 92       	push	r11
    45c2:	cf 92       	push	r12
    45c4:	df 92       	push	r13
    45c6:	ef 92       	push	r14
    45c8:	ff 92       	push	r15
    45ca:	0f 93       	push	r16
    45cc:	1f 93       	push	r17
    45ce:	cf 93       	push	r28
    45d0:	df 93       	push	r29
    45d2:	cd b7       	in	r28, 0x3d	; 61
    45d4:	de b7       	in	r29, 0x3e	; 62
    45d6:	c7 58       	subi	r28, 0x87	; 135
    45d8:	d1 09       	sbc	r29, r1
    45da:	cd bf       	out	0x3d, r28	; 61
    45dc:	de bf       	out	0x3e, r29	; 62
    45de:	18 2f       	mov	r17, r24
    45e0:	6a 01       	movw	r12, r20
    45e2:	7b 01       	movw	r14, r22
    45e4:	82 e2       	ldi	r24, 0x22	; 34
    45e6:	ed e0       	ldi	r30, 0x0D	; 13
    45e8:	fb eb       	ldi	r31, 0xBB	; 187
    45ea:	de 01       	movw	r26, r28
    45ec:	11 96       	adiw	r26, 0x01	; 1
    45ee:	01 90       	ld	r0, Z+
    45f0:	0d 92       	st	X+, r0
    45f2:	8a 95       	dec	r24
    45f4:	e1 f7       	brne	.-8      	; 0x45ee <move_MOTOR+0x2e>
    45f6:	68 94       	set
    45f8:	bb 24       	eor	r11, r11
    45fa:	b7 f8       	bld	r11, 7
    45fc:	b1 0e       	add	r11, r17
    45fe:	be 01       	movw	r22, r28
    4600:	6c 57       	subi	r22, 0x7C	; 124
    4602:	7f 4f       	sbci	r23, 0xFF	; 255
    4604:	81 2f       	mov	r24, r17
    4606:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <get_MOTOR_ENCODER>
    460a:	cc 57       	subi	r28, 0x7C	; 124
    460c:	df 4f       	sbci	r29, 0xFF	; 255
    460e:	88 81       	ld	r24, Y
    4610:	99 81       	ldd	r25, Y+1	; 0x01
    4612:	aa 81       	ldd	r26, Y+2	; 0x02
    4614:	bb 81       	ldd	r27, Y+3	; 0x03
    4616:	c4 58       	subi	r28, 0x84	; 132
    4618:	d0 40       	sbci	r29, 0x00	; 0
    461a:	8c 15       	cp	r24, r12
    461c:	9d 05       	cpc	r25, r13
    461e:	ae 05       	cpc	r26, r14
    4620:	bf 05       	cpc	r27, r15
    4622:	09 f4       	brne	.+2      	; 0x4626 <move_MOTOR+0x66>
    4624:	84 c0       	rjmp	.+264    	; 0x472e <move_MOTOR+0x16e>
    4626:	e4 96       	adiw	r28, 0x34	; 52
    4628:	1f ae       	std	Y+63, r1	; 0x3f
    462a:	e4 97       	sbiw	r28, 0x34	; 52
    462c:	e5 96       	adiw	r28, 0x35	; 53
    462e:	1f ae       	std	Y+63, r1	; 0x3f
    4630:	e5 97       	sbiw	r28, 0x35	; 53
    4632:	37 e3       	ldi	r19, 0x37	; 55
    4634:	e6 96       	adiw	r28, 0x36	; 54
    4636:	3f af       	std	Y+63, r19	; 0x3f
    4638:	e6 97       	sbiw	r28, 0x36	; 54
    463a:	2a e4       	ldi	r18, 0x4A	; 74
    463c:	e7 96       	adiw	r28, 0x37	; 55
    463e:	2f af       	std	Y+63, r18	; 0x3f
    4640:	e7 97       	sbiw	r28, 0x37	; 55
    4642:	e8 96       	adiw	r28, 0x38	; 56
    4644:	1f ae       	std	Y+63, r1	; 0x3f
    4646:	e8 97       	sbiw	r28, 0x38	; 56
    4648:	e9 96       	adiw	r28, 0x39	; 57
    464a:	1f ae       	std	Y+63, r1	; 0x3f
    464c:	e9 97       	sbiw	r28, 0x39	; 57
    464e:	4b e1       	ldi	r20, 0x1B	; 27
    4650:	ea 96       	adiw	r28, 0x3a	; 58
    4652:	4f af       	std	Y+63, r20	; 0x3f
    4654:	ea 97       	sbiw	r28, 0x3a	; 58
    4656:	45 ea       	ldi	r20, 0xA5	; 165
    4658:	eb 96       	adiw	r28, 0x3b	; 59
    465a:	4f af       	std	Y+63, r20	; 0x3f
    465c:	eb 97       	sbiw	r28, 0x3b	; 59
    465e:	ec 96       	adiw	r28, 0x3c	; 60
    4660:	1f ae       	std	Y+63, r1	; 0x3f
    4662:	ec 97       	sbiw	r28, 0x3c	; 60
    4664:	ed 96       	adiw	r28, 0x3d	; 61
    4666:	1f ae       	std	Y+63, r1	; 0x3f
    4668:	ed 97       	sbiw	r28, 0x3d	; 61
    466a:	ee 96       	adiw	r28, 0x3e	; 62
    466c:	3f af       	std	Y+63, r19	; 0x3f
    466e:	ee 97       	sbiw	r28, 0x3e	; 62
    4670:	ef 96       	adiw	r28, 0x3f	; 63
    4672:	2f af       	std	Y+63, r18	; 0x3f
    4674:	ef 97       	sbiw	r28, 0x3f	; 63
    4676:	c1 58       	subi	r28, 0x81	; 129
    4678:	df 4f       	sbci	r29, 0xFF	; 255
    467a:	f8 82       	st	Y, r15
    467c:	cf 57       	subi	r28, 0x7F	; 127
    467e:	d0 40       	sbci	r29, 0x00	; 0
    4680:	c0 58       	subi	r28, 0x80	; 128
    4682:	df 4f       	sbci	r29, 0xFF	; 255
    4684:	e8 82       	st	Y, r14
    4686:	c0 58       	subi	r28, 0x80	; 128
    4688:	d0 40       	sbci	r29, 0x00	; 0
    468a:	cf 57       	subi	r28, 0x7F	; 127
    468c:	df 4f       	sbci	r29, 0xFF	; 255
    468e:	d8 82       	st	Y, r13
    4690:	c1 58       	subi	r28, 0x81	; 129
    4692:	d0 40       	sbci	r29, 0x00	; 0
    4694:	ce 57       	subi	r28, 0x7E	; 126
    4696:	df 4f       	sbci	r29, 0xFF	; 255
    4698:	c8 82       	st	Y, r12
    469a:	c2 58       	subi	r28, 0x82	; 130
    469c:	d0 40       	sbci	r29, 0x00	; 0
    469e:	21 e0       	ldi	r18, 0x01	; 1
    46a0:	cd 57       	subi	r28, 0x7D	; 125
    46a2:	df 4f       	sbci	r29, 0xFF	; 255
    46a4:	28 83       	st	Y, r18
    46a6:	c3 58       	subi	r28, 0x83	; 131
    46a8:	d0 40       	sbci	r29, 0x00	; 0
    46aa:	8c 15       	cp	r24, r12
    46ac:	9d 05       	cpc	r25, r13
    46ae:	ae 05       	cpc	r26, r14
    46b0:	bf 05       	cpc	r27, r15
    46b2:	3c f4       	brge	.+14     	; 0x46c2 <move_MOTOR+0x102>
    46b4:	eb 2d       	mov	r30, r11
    46b6:	f0 e0       	ldi	r31, 0x00	; 0
    46b8:	e3 5c       	subi	r30, 0xC3	; 195
    46ba:	f5 4d       	sbci	r31, 0xD5	; 213
    46bc:	81 e0       	ldi	r24, 0x01	; 1
    46be:	80 83       	st	Z, r24
    46c0:	0a c0       	rjmp	.+20     	; 0x46d6 <move_MOTOR+0x116>
    46c2:	c8 16       	cp	r12, r24
    46c4:	d9 06       	cpc	r13, r25
    46c6:	ea 06       	cpc	r14, r26
    46c8:	fb 06       	cpc	r15, r27
    46ca:	2c f4       	brge	.+10     	; 0x46d6 <move_MOTOR+0x116>
    46cc:	eb 2d       	mov	r30, r11
    46ce:	f0 e0       	ldi	r31, 0x00	; 0
    46d0:	e3 5c       	subi	r30, 0xC3	; 195
    46d2:	f5 4d       	sbci	r31, 0xD5	; 213
    46d4:	10 82       	st	Z, r1
    46d6:	21 e1       	ldi	r18, 0x11	; 17
    46d8:	ae 01       	movw	r20, r28
    46da:	4d 58       	subi	r20, 0x8D	; 141
    46dc:	5f 4f       	sbci	r21, 0xFF	; 255
    46de:	61 e4       	ldi	r22, 0x41	; 65
    46e0:	81 2f       	mov	r24, r17
    46e2:	0e 94 12 22 	call	0x4424	; 0x4424 <put_MOTOR>
    46e6:	08 2f       	mov	r16, r24
    46e8:	83 36       	cpi	r24, 0x63	; 99
    46ea:	19 f5       	brne	.+70     	; 0x4732 <move_MOTOR+0x172>
    46ec:	eb 2d       	mov	r30, r11
    46ee:	f0 e0       	ldi	r31, 0x00	; 0
    46f0:	e3 5c       	subi	r30, 0xC3	; 195
    46f2:	f5 4d       	sbci	r31, 0xD5	; 213
    46f4:	82 e0       	ldi	r24, 0x02	; 2
    46f6:	80 83       	st	Z, r24
    46f8:	1f 53       	subi	r17, 0x3F	; 63
    46fa:	1f 92       	push	r1
    46fc:	1f 93       	push	r17
    46fe:	ce 01       	movw	r24, r28
    4700:	01 96       	adiw	r24, 0x01	; 1
    4702:	9f 93       	push	r25
    4704:	8f 93       	push	r24
    4706:	7e 01       	movw	r14, r28
    4708:	83 e2       	ldi	r24, 0x23	; 35
    470a:	e8 0e       	add	r14, r24
    470c:	f1 1c       	adc	r15, r1
    470e:	ff 92       	push	r15
    4710:	ef 92       	push	r14
    4712:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
    4716:	b7 01       	movw	r22, r14
    4718:	86 e3       	ldi	r24, 0x36	; 54
    471a:	91 e0       	ldi	r25, 0x01	; 1
    471c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    4720:	0f 90       	pop	r0
    4722:	0f 90       	pop	r0
    4724:	0f 90       	pop	r0
    4726:	0f 90       	pop	r0
    4728:	0f 90       	pop	r0
    472a:	0f 90       	pop	r0
    472c:	03 c0       	rjmp	.+6      	; 0x4734 <move_MOTOR+0x174>
    472e:	00 e0       	ldi	r16, 0x00	; 0
    4730:	01 c0       	rjmp	.+2      	; 0x4734 <move_MOTOR+0x174>
    4732:	00 e0       	ldi	r16, 0x00	; 0
    4734:	80 2f       	mov	r24, r16
    4736:	c9 57       	subi	r28, 0x79	; 121
    4738:	df 4f       	sbci	r29, 0xFF	; 255
    473a:	cd bf       	out	0x3d, r28	; 61
    473c:	de bf       	out	0x3e, r29	; 62
    473e:	df 91       	pop	r29
    4740:	cf 91       	pop	r28
    4742:	1f 91       	pop	r17
    4744:	0f 91       	pop	r16
    4746:	ff 90       	pop	r15
    4748:	ef 90       	pop	r14
    474a:	df 90       	pop	r13
    474c:	cf 90       	pop	r12
    474e:	bf 90       	pop	r11
    4750:	08 95       	ret

00004752 <move_MOTORS_PISTON>:

uint8_t move_MOTORS_PISTON(int32_t deltaValue)
{
    4752:	8f 92       	push	r8
    4754:	9f 92       	push	r9
    4756:	af 92       	push	r10
    4758:	bf 92       	push	r11
    475a:	df 92       	push	r13
    475c:	ef 92       	push	r14
    475e:	ff 92       	push	r15
    4760:	0f 93       	push	r16
    4762:	1f 93       	push	r17
    4764:	cf 93       	push	r28
    4766:	df 93       	push	r29
    4768:	cd b7       	in	r28, 0x3d	; 61
    476a:	de b7       	in	r29, 0x3e	; 62
    476c:	c5 5c       	subi	r28, 0xC5	; 197
    476e:	d1 09       	sbc	r29, r1
    4770:	cd bf       	out	0x3d, r28	; 61
    4772:	de bf       	out	0x3e, r29	; 62
    4774:	4b 01       	movw	r8, r22
    4776:	5c 01       	movw	r10, r24

	char strbuf[80];
	uint8_t i, mtraddr;
	int32_t curPos[3], newPos[3];
	const char fmt0[] = "move_MOTORS_PISTON: get_MOTOR_ENCODER error on %c";
    4778:	82 e3       	ldi	r24, 0x32	; 50
    477a:	e4 ec       	ldi	r30, 0xC4	; 196
    477c:	fb eb       	ldi	r31, 0xBB	; 187
    477e:	de 01       	movw	r26, r28
    4780:	a7 59       	subi	r26, 0x97	; 151
    4782:	bf 4f       	sbci	r27, 0xFF	; 255
    4784:	01 90       	ld	r0, Z+
    4786:	0d 92       	st	X+, r0
    4788:	8a 95       	dec	r24
    478a:	e1 f7       	brne	.-8      	; 0x4784 <move_MOTORS_PISTON+0x32>
	const char fmt1[] = "move_MOTORS_PISTON: move_MOTOR error on %c";
    478c:	8b e2       	ldi	r24, 0x2B	; 43
    478e:	e6 ef       	ldi	r30, 0xF6	; 246
    4790:	fb eb       	ldi	r31, 0xBB	; 187
    4792:	de 01       	movw	r26, r28
    4794:	a5 56       	subi	r26, 0x65	; 101
    4796:	bf 4f       	sbci	r27, 0xFF	; 255
    4798:	01 90       	ld	r0, Z+
    479a:	0d 92       	st	X+, r0
    479c:	8a 95       	dec	r24
    479e:	e1 f7       	brne	.-8      	; 0x4798 <move_MOTORS_PISTON+0x46>

	for (i = 0; i < NMOTORS; i++) {
    47a0:	f1 2c       	mov	r15, r1
    47a2:	52 c0       	rjmp	.+164    	; 0x4848 <move_MOTORS_PISTON+0xf6>
		mtraddr = i + MOTOR_A;
    47a4:	68 94       	set
    47a6:	dd 24       	eor	r13, r13
    47a8:	d7 f8       	bld	r13, 7
    47aa:	df 0c       	add	r13, r15
		if (get_MOTOR_ENCODER(mtraddr, &curPos[i]) == ERROR) {
    47ac:	0f 2d       	mov	r16, r15
    47ae:	10 e0       	ldi	r17, 0x00	; 0
    47b0:	b8 01       	movw	r22, r16
    47b2:	66 0f       	add	r22, r22
    47b4:	77 1f       	adc	r23, r23
    47b6:	66 0f       	add	r22, r22
    47b8:	77 1f       	adc	r23, r23
    47ba:	81 e5       	ldi	r24, 0x51	; 81
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	8c 0f       	add	r24, r28
    47c0:	9d 1f       	adc	r25, r29
    47c2:	68 0f       	add	r22, r24
    47c4:	79 1f       	adc	r23, r25
    47c6:	8d 2d       	mov	r24, r13
    47c8:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <get_MOTOR_ENCODER>
    47cc:	e8 2e       	mov	r14, r24
    47ce:	93 e6       	ldi	r25, 0x63	; 99
    47d0:	89 13       	cpse	r24, r25
    47d2:	1d c0       	rjmp	.+58     	; 0x480e <move_MOTORS_PISTON+0xbc>
			sprintf(strbuf, fmt0, mtraddr-63);
    47d4:	8d 2d       	mov	r24, r13
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	cf 97       	sbiw	r24, 0x3f	; 63
    47da:	9f 93       	push	r25
    47dc:	8f 93       	push	r24
    47de:	ce 01       	movw	r24, r28
    47e0:	87 59       	subi	r24, 0x97	; 151
    47e2:	9f 4f       	sbci	r25, 0xFF	; 255
    47e4:	9f 93       	push	r25
    47e6:	8f 93       	push	r24
    47e8:	8e 01       	movw	r16, r28
    47ea:	0f 5f       	subi	r16, 0xFF	; 255
    47ec:	1f 4f       	sbci	r17, 0xFF	; 255
    47ee:	1f 93       	push	r17
    47f0:	0f 93       	push	r16
    47f2:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			printError(ERR_MTR, strbuf);
    47f6:	b8 01       	movw	r22, r16
    47f8:	86 e3       	ldi	r24, 0x36	; 54
    47fa:	91 e0       	ldi	r25, 0x01	; 1
    47fc:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			return(ERROR);
    4800:	0f 90       	pop	r0
    4802:	0f 90       	pop	r0
    4804:	0f 90       	pop	r0
    4806:	0f 90       	pop	r0
    4808:	0f 90       	pop	r0
    480a:	0f 90       	pop	r0
    480c:	8c c0       	rjmp	.+280    	; 0x4926 <move_MOTORS_PISTON+0x1d4>
		}
		newPos[i] = curPos[i] + deltaValue;
    480e:	00 0f       	add	r16, r16
    4810:	11 1f       	adc	r17, r17
    4812:	00 0f       	add	r16, r16
    4814:	11 1f       	adc	r17, r17
    4816:	e1 e5       	ldi	r30, 0x51	; 81
    4818:	f0 e0       	ldi	r31, 0x00	; 0
    481a:	ec 0f       	add	r30, r28
    481c:	fd 1f       	adc	r31, r29
    481e:	e0 0f       	add	r30, r16
    4820:	f1 1f       	adc	r31, r17
    4822:	80 81       	ld	r24, Z
    4824:	91 81       	ldd	r25, Z+1	; 0x01
    4826:	a2 81       	ldd	r26, Z+2	; 0x02
    4828:	b3 81       	ldd	r27, Z+3	; 0x03
    482a:	88 0d       	add	r24, r8
    482c:	99 1d       	adc	r25, r9
    482e:	aa 1d       	adc	r26, r10
    4830:	bb 1d       	adc	r27, r11
    4832:	ed e5       	ldi	r30, 0x5D	; 93
    4834:	f0 e0       	ldi	r31, 0x00	; 0
    4836:	ec 0f       	add	r30, r28
    4838:	fd 1f       	adc	r31, r29
    483a:	e0 0f       	add	r30, r16
    483c:	f1 1f       	adc	r31, r17
    483e:	80 83       	st	Z, r24
    4840:	91 83       	std	Z+1, r25	; 0x01
    4842:	a2 83       	std	Z+2, r26	; 0x02
    4844:	b3 83       	std	Z+3, r27	; 0x03
	uint8_t i, mtraddr;
	int32_t curPos[3], newPos[3];
	const char fmt0[] = "move_MOTORS_PISTON: get_MOTOR_ENCODER error on %c";
	const char fmt1[] = "move_MOTORS_PISTON: move_MOTOR error on %c";

	for (i = 0; i < NMOTORS; i++) {
    4846:	f3 94       	inc	r15
    4848:	82 e0       	ldi	r24, 0x02	; 2
    484a:	8f 15       	cp	r24, r15
    484c:	08 f0       	brcs	.+2      	; 0x4850 <move_MOTORS_PISTON+0xfe>
    484e:	aa cf       	rjmp	.-172    	; 0x47a4 <move_MOTORS_PISTON+0x52>
    4850:	f1 2c       	mov	r15, r1
    4852:	64 c0       	rjmp	.+200    	; 0x491c <move_MOTORS_PISTON+0x1ca>
		}
		newPos[i] = curPos[i] + deltaValue;
	}

	for (i = 0; i < NMOTORS; i++) {
		mtraddr = i + MOTOR_A;
    4854:	68 94       	set
    4856:	dd 24       	eor	r13, r13
    4858:	d7 f8       	bld	r13, 7
    485a:	df 0c       	add	r13, r15
		if (move_MOTOR(mtraddr, newPos[i]) == ERROR) {
    485c:	0f 2d       	mov	r16, r15
    485e:	10 e0       	ldi	r17, 0x00	; 0
    4860:	f8 01       	movw	r30, r16
    4862:	ee 0f       	add	r30, r30
    4864:	ff 1f       	adc	r31, r31
    4866:	ee 0f       	add	r30, r30
    4868:	ff 1f       	adc	r31, r31
    486a:	8d e5       	ldi	r24, 0x5D	; 93
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	8c 0f       	add	r24, r28
    4870:	9d 1f       	adc	r25, r29
    4872:	e8 0f       	add	r30, r24
    4874:	f9 1f       	adc	r31, r25
    4876:	80 80       	ld	r8, Z
    4878:	91 80       	ldd	r9, Z+1	; 0x01
    487a:	a2 80       	ldd	r10, Z+2	; 0x02
    487c:	b3 80       	ldd	r11, Z+3	; 0x03
    487e:	b5 01       	movw	r22, r10
    4880:	a4 01       	movw	r20, r8
    4882:	8d 2d       	mov	r24, r13
    4884:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <move_MOTOR>
    4888:	e8 2e       	mov	r14, r24
    488a:	93 e6       	ldi	r25, 0x63	; 99
    488c:	89 13       	cpse	r24, r25
    488e:	1d c0       	rjmp	.+58     	; 0x48ca <move_MOTORS_PISTON+0x178>
			sprintf(strbuf, fmt1, mtraddr-63);
    4890:	8d 2d       	mov	r24, r13
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	cf 97       	sbiw	r24, 0x3f	; 63
    4896:	9f 93       	push	r25
    4898:	8f 93       	push	r24
    489a:	ce 01       	movw	r24, r28
    489c:	85 56       	subi	r24, 0x65	; 101
    489e:	9f 4f       	sbci	r25, 0xFF	; 255
    48a0:	9f 93       	push	r25
    48a2:	8f 93       	push	r24
    48a4:	8e 01       	movw	r16, r28
    48a6:	0f 5f       	subi	r16, 0xFF	; 255
    48a8:	1f 4f       	sbci	r17, 0xFF	; 255
    48aa:	1f 93       	push	r17
    48ac:	0f 93       	push	r16
    48ae:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			printError(ERR_MTR, strbuf);
    48b2:	b8 01       	movw	r22, r16
    48b4:	86 e3       	ldi	r24, 0x36	; 54
    48b6:	91 e0       	ldi	r25, 0x01	; 1
    48b8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			return(ERROR);
    48bc:	0f 90       	pop	r0
    48be:	0f 90       	pop	r0
    48c0:	0f 90       	pop	r0
    48c2:	0f 90       	pop	r0
    48c4:	0f 90       	pop	r0
    48c6:	0f 90       	pop	r0
    48c8:	2e c0       	rjmp	.+92     	; 0x4926 <move_MOTORS_PISTON+0x1d4>
		}
		motorDir[i] = MTRDIRUNKNOWN;
    48ca:	82 e0       	ldi	r24, 0x02	; 2
    48cc:	f8 01       	movw	r30, r16
    48ce:	e3 5c       	subi	r30, 0xC3	; 195
    48d0:	f5 4d       	sbci	r31, 0xD5	; 213
    48d2:	80 83       	st	Z, r24
		if (newPos[i] > curPos[i]) {
    48d4:	f8 01       	movw	r30, r16
    48d6:	ee 0f       	add	r30, r30
    48d8:	ff 1f       	adc	r31, r31
    48da:	ee 0f       	add	r30, r30
    48dc:	ff 1f       	adc	r31, r31
    48de:	81 e5       	ldi	r24, 0x51	; 81
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	8c 0f       	add	r24, r28
    48e4:	9d 1f       	adc	r25, r29
    48e6:	e8 0f       	add	r30, r24
    48e8:	f9 1f       	adc	r31, r25
    48ea:	80 81       	ld	r24, Z
    48ec:	91 81       	ldd	r25, Z+1	; 0x01
    48ee:	a2 81       	ldd	r26, Z+2	; 0x02
    48f0:	b3 81       	ldd	r27, Z+3	; 0x03
    48f2:	88 15       	cp	r24, r8
    48f4:	99 05       	cpc	r25, r9
    48f6:	aa 05       	cpc	r26, r10
    48f8:	bb 05       	cpc	r27, r11
    48fa:	34 f4       	brge	.+12     	; 0x4908 <move_MOTORS_PISTON+0x1b6>
			motorDir[i] = MTRDIRPOSITIVE;
    48fc:	f8 01       	movw	r30, r16
    48fe:	e3 5c       	subi	r30, 0xC3	; 195
    4900:	f5 4d       	sbci	r31, 0xD5	; 213
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	80 83       	st	Z, r24
    4906:	09 c0       	rjmp	.+18     	; 0x491a <move_MOTORS_PISTON+0x1c8>
		} else if (newPos[i] < curPos[i]) {
    4908:	88 16       	cp	r8, r24
    490a:	99 06       	cpc	r9, r25
    490c:	aa 06       	cpc	r10, r26
    490e:	bb 06       	cpc	r11, r27
    4910:	24 f4       	brge	.+8      	; 0x491a <move_MOTORS_PISTON+0x1c8>
			motorDir[i] = MTRDIRNEGATIVE;
    4912:	f8 01       	movw	r30, r16
    4914:	e3 5c       	subi	r30, 0xC3	; 195
    4916:	f5 4d       	sbci	r31, 0xD5	; 213
    4918:	10 82       	st	Z, r1
			return(ERROR);
		}
		newPos[i] = curPos[i] + deltaValue;
	}

	for (i = 0; i < NMOTORS; i++) {
    491a:	f3 94       	inc	r15
    491c:	92 e0       	ldi	r25, 0x02	; 2
    491e:	9f 15       	cp	r25, r15
    4920:	08 f0       	brcs	.+2      	; 0x4924 <move_MOTORS_PISTON+0x1d2>
    4922:	98 cf       	rjmp	.-208    	; 0x4854 <move_MOTORS_PISTON+0x102>
		} else if (newPos[i] < curPos[i]) {
			motorDir[i] = MTRDIRNEGATIVE;
		}
	}

	return(NOERROR);
    4924:	e1 2c       	mov	r14, r1

}
    4926:	8e 2d       	mov	r24, r14
    4928:	cb 53       	subi	r28, 0x3B	; 59
    492a:	df 4f       	sbci	r29, 0xFF	; 255
    492c:	cd bf       	out	0x3d, r28	; 61
    492e:	de bf       	out	0x3e, r29	; 62
    4930:	df 91       	pop	r29
    4932:	cf 91       	pop	r28
    4934:	1f 91       	pop	r17
    4936:	0f 91       	pop	r16
    4938:	ff 90       	pop	r15
    493a:	ef 90       	pop	r14
    493c:	df 90       	pop	r13
    493e:	bf 90       	pop	r11
    4940:	af 90       	pop	r10
    4942:	9f 90       	pop	r9
    4944:	8f 90       	pop	r8
    4946:	08 95       	ret

00004948 <move_MOTOR_CMD>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR_CMD(uint8_t cstack)
{
    4948:	8f 92       	push	r8
    494a:	9f 92       	push	r9
    494c:	af 92       	push	r10
    494e:	bf 92       	push	r11
    4950:	ef 92       	push	r14
    4952:	ff 92       	push	r15
    4954:	0f 93       	push	r16
    4956:	1f 93       	push	r17
    4958:	cf 93       	push	r28
    495a:	df 93       	push	r29
    495c:	cd b7       	in	r28, 0x3d	; 61
    495e:	de b7       	in	r29, 0x3e	; 62
    4960:	c4 5e       	subi	r28, 0xE4	; 228
    4962:	d1 09       	sbc	r29, r1
    4964:	cd bf       	out	0x3d, r28	; 61
    4966:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	uint8_t motor, controller;
	int32_t newPosition, currentPosition, deltaPos;
	const char fmt0[] = "move_MOTOR_CMD: get_MOTOR_ENCODER error";
    4968:	98 e2       	ldi	r25, 0x28	; 40
    496a:	e1 e2       	ldi	r30, 0x21	; 33
    496c:	fc eb       	ldi	r31, 0xBC	; 188
    496e:	de 01       	movw	r26, r28
    4970:	ab 5a       	subi	r26, 0xAB	; 171
    4972:	bf 4f       	sbci	r27, 0xFF	; 255
    4974:	01 90       	ld	r0, Z+
    4976:	0d 92       	st	X+, r0
    4978:	9a 95       	dec	r25
    497a:	e1 f7       	brne	.-8      	; 0x4974 <move_MOTOR_CMD+0x2c>
	const char fmt1[] = "move_MOTOR_CMD: unknown motor";
    497c:	9e e1       	ldi	r25, 0x1E	; 30
    497e:	e9 e4       	ldi	r30, 0x49	; 73
    4980:	fc eb       	ldi	r31, 0xBC	; 188
    4982:	de 01       	movw	r26, r28
    4984:	a3 58       	subi	r26, 0x83	; 131
    4986:	bf 4f       	sbci	r27, 0xFF	; 255
    4988:	01 90       	ld	r0, Z+
    498a:	0d 92       	st	X+, r0
    498c:	9a 95       	dec	r25
    498e:	e1 f7       	brne	.-8      	; 0x4988 <move_MOTOR_CMD+0x40>
	const char fmt2[] = "move_MOTOR_CMD: move_MOTOR error";
    4990:	91 e2       	ldi	r25, 0x21	; 33
    4992:	e7 e6       	ldi	r30, 0x67	; 103
    4994:	fc eb       	ldi	r31, 0xBC	; 188
    4996:	de 01       	movw	r26, r28
    4998:	a5 56       	subi	r26, 0x65	; 101
    499a:	bf 4f       	sbci	r27, 0xFF	; 255
    499c:	01 90       	ld	r0, Z+
    499e:	0d 92       	st	X+, r0
    49a0:	9a 95       	dec	r25
    49a2:	e1 f7       	brne	.-8      	; 0x499c <move_MOTOR_CMD+0x54>
	const char fmt3[] = "move_MOTOR_CMD: move_MOTORS_PISTON error";
    49a4:	99 e2       	ldi	r25, 0x29	; 41
    49a6:	e8 e8       	ldi	r30, 0x88	; 136
    49a8:	fc eb       	ldi	r31, 0xBC	; 188
    49aa:	de 01       	movw	r26, r28
    49ac:	a4 54       	subi	r26, 0x44	; 68
    49ae:	bf 4f       	sbci	r27, 0xFF	; 255
    49b0:	01 90       	ld	r0, Z+
    49b2:	0d 92       	st	X+, r0
    49b4:	9a 95       	dec	r25
    49b6:	e1 f7       	brne	.-8      	; 0x49b0 <move_MOTOR_CMD+0x68>

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    49b8:	08 2f       	mov	r16, r24
    49ba:	10 e0       	ldi	r17, 0x00	; 0
    49bc:	84 e3       	ldi	r24, 0x34	; 52
    49be:	80 9f       	mul	r24, r16
    49c0:	f0 01       	movw	r30, r0
    49c2:	81 9f       	mul	r24, r17
    49c4:	f0 0d       	add	r31, r0
    49c6:	11 24       	eor	r1, r1
    49c8:	e1 5f       	subi	r30, 0xF1	; 241
    49ca:	f7 4d       	sbci	r31, 0xD7	; 215
    49cc:	82 81       	ldd	r24, Z+2	; 0x02
    49ce:	88 23       	and	r24, r24
    49d0:	09 f4       	brne	.+2      	; 0x49d4 <move_MOTOR_CMD+0x8c>
    49d2:	1c c1       	rjmp	.+568    	; 0x4c0c <move_MOTOR_CMD+0x2c4>
		return(NOERROR);
	}

	motor = pcmd[cstack].cobject;
    49d4:	84 e3       	ldi	r24, 0x34	; 52
    49d6:	80 9f       	mul	r24, r16
    49d8:	f0 01       	movw	r30, r0
    49da:	81 9f       	mul	r24, r17
    49dc:	f0 0d       	add	r31, r0
    49de:	11 24       	eor	r1, r1
    49e0:	e1 5f       	subi	r30, 0xF1	; 241
    49e2:	f7 4d       	sbci	r31, 0xD7	; 215
    49e4:	81 81       	ldd	r24, Z+1	; 0x01

	switch(motor) {
    49e6:	84 36       	cpi	r24, 0x64	; 100
    49e8:	40 f4       	brcc	.+16     	; 0x49fa <move_MOTOR_CMD+0xb2>
    49ea:	81 36       	cpi	r24, 0x61	; 97
    49ec:	08 f0       	brcs	.+2      	; 0x49f0 <move_MOTOR_CMD+0xa8>
    49ee:	41 c0       	rjmp	.+130    	; 0x4a72 <move_MOTOR_CMD+0x12a>
    49f0:	9f eb       	ldi	r25, 0xBF	; 191
    49f2:	98 0f       	add	r25, r24
    49f4:	93 30       	cpi	r25, 0x03	; 3
    49f6:	28 f0       	brcs	.+10     	; 0x4a02 <move_MOTOR_CMD+0xba>
    49f8:	aa c0       	rjmp	.+340    	; 0x4b4e <move_MOTOR_CMD+0x206>
    49fa:	84 36       	cpi	r24, 0x64	; 100
    49fc:	09 f4       	brne	.+2      	; 0x4a00 <move_MOTOR_CMD+0xb8>
    49fe:	7b c0       	rjmp	.+246    	; 0x4af6 <move_MOTOR_CMD+0x1ae>
    4a00:	a6 c0       	rjmp	.+332    	; 0x4b4e <move_MOTOR_CMD+0x206>

		case 'A':			// Move absolute
		case 'B':
		case 'C':
			controller = motor + 63;
    4a02:	0f 2e       	mov	r0, r31
    4a04:	ff e3       	ldi	r31, 0x3F	; 63
    4a06:	ef 2e       	mov	r14, r31
    4a08:	f0 2d       	mov	r31, r0
    4a0a:	e8 0e       	add	r14, r24
			if (get_MOTOR_ENCODER(controller, &currentPosition) == ERROR) {
    4a0c:	be 01       	movw	r22, r28
    4a0e:	6f 5a       	subi	r22, 0xAF	; 175
    4a10:	7f 4f       	sbci	r23, 0xFF	; 255
    4a12:	8e 2d       	mov	r24, r14
    4a14:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <get_MOTOR_ENCODER>
    4a18:	f8 2e       	mov	r15, r24
    4a1a:	83 e6       	ldi	r24, 0x63	; 99
    4a1c:	f8 12       	cpse	r15, r24
    4a1e:	16 c0       	rjmp	.+44     	; 0x4a4c <move_MOTOR_CMD+0x104>
				sprintf(strbuf, fmt0);
    4a20:	ce 01       	movw	r24, r28
    4a22:	8b 5a       	subi	r24, 0xAB	; 171
    4a24:	9f 4f       	sbci	r25, 0xFF	; 255
    4a26:	9f 93       	push	r25
    4a28:	8f 93       	push	r24
    4a2a:	8e 01       	movw	r16, r28
    4a2c:	0f 5f       	subi	r16, 0xFF	; 255
    4a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    4a30:	1f 93       	push	r17
    4a32:	0f 93       	push	r16
    4a34:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
				printError(ERR_MTR_ENC_VAL, strbuf);
    4a38:	b8 01       	movw	r22, r16
    4a3a:	85 e3       	ldi	r24, 0x35	; 53
    4a3c:	91 e0       	ldi	r25, 0x01	; 1
    4a3e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    4a42:	0f 90       	pop	r0
    4a44:	0f 90       	pop	r0
    4a46:	0f 90       	pop	r0
    4a48:	0f 90       	pop	r0
    4a4a:	e5 c0       	rjmp	.+458    	; 0x4c16 <move_MOTOR_CMD+0x2ce>
			}
			newPosition = (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    4a4c:	24 e3       	ldi	r18, 0x34	; 52
    4a4e:	20 9f       	mul	r18, r16
    4a50:	c0 01       	movw	r24, r0
    4a52:	21 9f       	mul	r18, r17
    4a54:	90 0d       	add	r25, r0
    4a56:	11 24       	eor	r1, r1
    4a58:	8f 5e       	subi	r24, 0xEF	; 239
    4a5a:	97 4d       	sbci	r25, 0xD7	; 215
    4a5c:	0e 94 f6 36 	call	0x6dec	; 0x6dec <atol>
    4a60:	9b 01       	movw	r18, r22
    4a62:	ac 01       	movw	r20, r24
    4a64:	ab e1       	ldi	r26, 0x1B	; 27
    4a66:	b1 e0       	ldi	r27, 0x01	; 1
    4a68:	0e 94 57 36 	call	0x6cae	; 0x6cae <__muluhisi3>
    4a6c:	4b 01       	movw	r8, r22
    4a6e:	5c 01       	movw	r10, r24
			break;
    4a70:	88 c0       	rjmp	.+272    	; 0x4b82 <move_MOTOR_CMD+0x23a>

		case 'a':			// Move relative
		case 'b':
		case 'c':
			controller = motor + 31;
    4a72:	0f 2e       	mov	r0, r31
    4a74:	ff e1       	ldi	r31, 0x1F	; 31
    4a76:	ef 2e       	mov	r14, r31
    4a78:	f0 2d       	mov	r31, r0
    4a7a:	e8 0e       	add	r14, r24
			if (get_MOTOR_ENCODER(controller, &currentPosition) == ERROR) {
    4a7c:	be 01       	movw	r22, r28
    4a7e:	6f 5a       	subi	r22, 0xAF	; 175
    4a80:	7f 4f       	sbci	r23, 0xFF	; 255
    4a82:	8e 2d       	mov	r24, r14
    4a84:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <get_MOTOR_ENCODER>
    4a88:	f8 2e       	mov	r15, r24
    4a8a:	83 e6       	ldi	r24, 0x63	; 99
    4a8c:	f8 12       	cpse	r15, r24
    4a8e:	16 c0       	rjmp	.+44     	; 0x4abc <move_MOTOR_CMD+0x174>
				sprintf(strbuf, fmt0);
    4a90:	ce 01       	movw	r24, r28
    4a92:	8b 5a       	subi	r24, 0xAB	; 171
    4a94:	9f 4f       	sbci	r25, 0xFF	; 255
    4a96:	9f 93       	push	r25
    4a98:	8f 93       	push	r24
    4a9a:	8e 01       	movw	r16, r28
    4a9c:	0f 5f       	subi	r16, 0xFF	; 255
    4a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    4aa0:	1f 93       	push	r17
    4aa2:	0f 93       	push	r16
    4aa4:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
				printError(ERR_MTR_ENC_VAL, strbuf);
    4aa8:	b8 01       	movw	r22, r16
    4aaa:	85 e3       	ldi	r24, 0x35	; 53
    4aac:	91 e0       	ldi	r25, 0x01	; 1
    4aae:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    4ab2:	0f 90       	pop	r0
    4ab4:	0f 90       	pop	r0
    4ab6:	0f 90       	pop	r0
    4ab8:	0f 90       	pop	r0
    4aba:	ad c0       	rjmp	.+346    	; 0x4c16 <move_MOTOR_CMD+0x2ce>
			}
			newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    4abc:	24 e3       	ldi	r18, 0x34	; 52
    4abe:	20 9f       	mul	r18, r16
    4ac0:	c0 01       	movw	r24, r0
    4ac2:	21 9f       	mul	r18, r17
    4ac4:	90 0d       	add	r25, r0
    4ac6:	11 24       	eor	r1, r1
    4ac8:	8f 5e       	subi	r24, 0xEF	; 239
    4aca:	97 4d       	sbci	r25, 0xD7	; 215
    4acc:	0e 94 f6 36 	call	0x6dec	; 0x6dec <atol>
    4ad0:	9b 01       	movw	r18, r22
    4ad2:	ac 01       	movw	r20, r24
    4ad4:	ab e1       	ldi	r26, 0x1B	; 27
    4ad6:	b1 e0       	ldi	r27, 0x01	; 1
    4ad8:	0e 94 57 36 	call	0x6cae	; 0x6cae <__muluhisi3>
    4adc:	65 96       	adiw	r28, 0x15	; 21
    4ade:	0c ad       	ldd	r16, Y+60	; 0x3c
    4ae0:	1d ad       	ldd	r17, Y+61	; 0x3d
    4ae2:	2e ad       	ldd	r18, Y+62	; 0x3e
    4ae4:	3f ad       	ldd	r19, Y+63	; 0x3f
    4ae6:	65 97       	sbiw	r28, 0x15	; 21
    4ae8:	4b 01       	movw	r8, r22
    4aea:	5c 01       	movw	r10, r24
    4aec:	80 0e       	add	r8, r16
    4aee:	91 1e       	adc	r9, r17
    4af0:	a2 1e       	adc	r10, r18
    4af2:	b3 1e       	adc	r11, r19
			break;
    4af4:	46 c0       	rjmp	.+140    	; 0x4b82 <move_MOTOR_CMD+0x23a>

		case 'd':
			deltaPos = (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    4af6:	24 e3       	ldi	r18, 0x34	; 52
    4af8:	20 9f       	mul	r18, r16
    4afa:	c0 01       	movw	r24, r0
    4afc:	21 9f       	mul	r18, r17
    4afe:	90 0d       	add	r25, r0
    4b00:	11 24       	eor	r1, r1
    4b02:	8f 5e       	subi	r24, 0xEF	; 239
    4b04:	97 4d       	sbci	r25, 0xD7	; 215
    4b06:	0e 94 f6 36 	call	0x6dec	; 0x6dec <atol>
    4b0a:	9b 01       	movw	r18, r22
    4b0c:	ac 01       	movw	r20, r24
    4b0e:	ab e1       	ldi	r26, 0x1B	; 27
    4b10:	b1 e0       	ldi	r27, 0x01	; 1
    4b12:	0e 94 57 36 	call	0x6cae	; 0x6cae <__muluhisi3>
			if (move_MOTORS_PISTON(deltaPos) == ERROR) {
    4b16:	0e 94 a9 23 	call	0x4752	; 0x4752 <move_MOTORS_PISTON>
    4b1a:	f8 2e       	mov	r15, r24
    4b1c:	83 e6       	ldi	r24, 0x63	; 99
    4b1e:	f8 12       	cpse	r15, r24
    4b20:	77 c0       	rjmp	.+238    	; 0x4c10 <move_MOTOR_CMD+0x2c8>
				sprintf(strbuf, fmt3);
    4b22:	ce 01       	movw	r24, r28
    4b24:	84 54       	subi	r24, 0x44	; 68
    4b26:	9f 4f       	sbci	r25, 0xFF	; 255
    4b28:	9f 93       	push	r25
    4b2a:	8f 93       	push	r24
    4b2c:	8e 01       	movw	r16, r28
    4b2e:	0f 5f       	subi	r16, 0xFF	; 255
    4b30:	1f 4f       	sbci	r17, 0xFF	; 255
    4b32:	1f 93       	push	r17
    4b34:	0f 93       	push	r16
    4b36:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
				printError(ERR_MTR, strbuf);
    4b3a:	b8 01       	movw	r22, r16
    4b3c:	86 e3       	ldi	r24, 0x36	; 54
    4b3e:	91 e0       	ldi	r25, 0x01	; 1
    4b40:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    4b44:	0f 90       	pop	r0
    4b46:	0f 90       	pop	r0
    4b48:	0f 90       	pop	r0
    4b4a:	0f 90       	pop	r0
    4b4c:	64 c0       	rjmp	.+200    	; 0x4c16 <move_MOTOR_CMD+0x2ce>
			}
			return(NOERROR);

		default:
			sprintf(strbuf, fmt1);
    4b4e:	ce 01       	movw	r24, r28
    4b50:	83 58       	subi	r24, 0x83	; 131
    4b52:	9f 4f       	sbci	r25, 0xFF	; 255
    4b54:	9f 93       	push	r25
    4b56:	8f 93       	push	r24
    4b58:	8e 01       	movw	r16, r28
    4b5a:	0f 5f       	subi	r16, 0xFF	; 255
    4b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4b5e:	1f 93       	push	r17
    4b60:	0f 93       	push	r16
    4b62:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			printError(ERR_MTR, strbuf);
    4b66:	b8 01       	movw	r22, r16
    4b68:	86 e3       	ldi	r24, 0x36	; 54
    4b6a:	91 e0       	ldi	r25, 0x01	; 1
    4b6c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			return(ERROR);
    4b70:	0f 90       	pop	r0
    4b72:	0f 90       	pop	r0
    4b74:	0f 90       	pop	r0
    4b76:	0f 90       	pop	r0
    4b78:	0f 2e       	mov	r0, r31
    4b7a:	f3 e6       	ldi	r31, 0x63	; 99
    4b7c:	ff 2e       	mov	r15, r31
    4b7e:	f0 2d       	mov	r31, r0
    4b80:	4a c0       	rjmp	.+148    	; 0x4c16 <move_MOTOR_CMD+0x2ce>
			break;	
	}

	motorDir[controller - MOTOR_A] = MTRDIRUNKNOWN;
    4b82:	0e 2d       	mov	r16, r14
    4b84:	10 e0       	ldi	r17, 0x00	; 0
    4b86:	00 58       	subi	r16, 0x80	; 128
    4b88:	11 09       	sbc	r17, r1
    4b8a:	f8 01       	movw	r30, r16
    4b8c:	e3 5c       	subi	r30, 0xC3	; 195
    4b8e:	f5 4d       	sbci	r31, 0xD5	; 213
    4b90:	82 e0       	ldi	r24, 0x02	; 2
    4b92:	80 83       	st	Z, r24

	if (move_MOTOR(controller, newPosition) == ERROR) {
    4b94:	b5 01       	movw	r22, r10
    4b96:	a4 01       	movw	r20, r8
    4b98:	8e 2d       	mov	r24, r14
    4b9a:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <move_MOTOR>
    4b9e:	f8 2e       	mov	r15, r24
    4ba0:	83 e6       	ldi	r24, 0x63	; 99
    4ba2:	f8 12       	cpse	r15, r24
    4ba4:	16 c0       	rjmp	.+44     	; 0x4bd2 <move_MOTOR_CMD+0x28a>
		sprintf(strbuf, fmt2);
    4ba6:	ce 01       	movw	r24, r28
    4ba8:	85 56       	subi	r24, 0x65	; 101
    4baa:	9f 4f       	sbci	r25, 0xFF	; 255
    4bac:	9f 93       	push	r25
    4bae:	8f 93       	push	r24
    4bb0:	8e 01       	movw	r16, r28
    4bb2:	0f 5f       	subi	r16, 0xFF	; 255
    4bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    4bb6:	1f 93       	push	r17
    4bb8:	0f 93       	push	r16
    4bba:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
		printError(ERR_MTR, strbuf);
    4bbe:	b8 01       	movw	r22, r16
    4bc0:	86 e3       	ldi	r24, 0x36	; 54
    4bc2:	91 e0       	ldi	r25, 0x01	; 1
    4bc4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    4bc8:	0f 90       	pop	r0
    4bca:	0f 90       	pop	r0
    4bcc:	0f 90       	pop	r0
    4bce:	0f 90       	pop	r0
    4bd0:	22 c0       	rjmp	.+68     	; 0x4c16 <move_MOTOR_CMD+0x2ce>
	}

	if (newPosition < currentPosition) {
    4bd2:	65 96       	adiw	r28, 0x15	; 21
    4bd4:	8c ad       	ldd	r24, Y+60	; 0x3c
    4bd6:	9d ad       	ldd	r25, Y+61	; 0x3d
    4bd8:	ae ad       	ldd	r26, Y+62	; 0x3e
    4bda:	bf ad       	ldd	r27, Y+63	; 0x3f
    4bdc:	65 97       	sbiw	r28, 0x15	; 21
    4bde:	88 16       	cp	r8, r24
    4be0:	99 06       	cpc	r9, r25
    4be2:	aa 06       	cpc	r10, r26
    4be4:	bb 06       	cpc	r11, r27
    4be6:	34 f4       	brge	.+12     	; 0x4bf4 <move_MOTOR_CMD+0x2ac>
		motorDir[controller - MOTOR_A] = MTRDIRNEGATIVE;
    4be8:	f8 01       	movw	r30, r16
    4bea:	e3 5c       	subi	r30, 0xC3	; 195
    4bec:	f5 4d       	sbci	r31, 0xD5	; 213
    4bee:	10 82       	st	Z, r1
	} else if (newPosition > currentPosition) {
		motorDir[controller - MOTOR_A] = MTRDIRPOSITIVE;
	}

	return(NOERROR);
    4bf0:	f1 2c       	mov	r15, r1
    4bf2:	11 c0       	rjmp	.+34     	; 0x4c16 <move_MOTOR_CMD+0x2ce>
		return(ERROR);
	}

	if (newPosition < currentPosition) {
		motorDir[controller - MOTOR_A] = MTRDIRNEGATIVE;
	} else if (newPosition > currentPosition) {
    4bf4:	88 15       	cp	r24, r8
    4bf6:	99 05       	cpc	r25, r9
    4bf8:	aa 05       	cpc	r26, r10
    4bfa:	bb 05       	cpc	r27, r11
    4bfc:	5c f4       	brge	.+22     	; 0x4c14 <move_MOTOR_CMD+0x2cc>
		motorDir[controller - MOTOR_A] = MTRDIRPOSITIVE;
    4bfe:	f8 01       	movw	r30, r16
    4c00:	e3 5c       	subi	r30, 0xC3	; 195
    4c02:	f5 4d       	sbci	r31, 0xD5	; 213
    4c04:	81 e0       	ldi	r24, 0x01	; 1
    4c06:	80 83       	st	Z, r24
	}

	return(NOERROR);
    4c08:	f1 2c       	mov	r15, r1
    4c0a:	05 c0       	rjmp	.+10     	; 0x4c16 <move_MOTOR_CMD+0x2ce>
	const char fmt1[] = "move_MOTOR_CMD: unknown motor";
	const char fmt2[] = "move_MOTOR_CMD: move_MOTOR error";
	const char fmt3[] = "move_MOTOR_CMD: move_MOTORS_PISTON error";

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
		return(NOERROR);
    4c0c:	f1 2c       	mov	r15, r1
    4c0e:	03 c0       	rjmp	.+6      	; 0x4c16 <move_MOTOR_CMD+0x2ce>
			if (move_MOTORS_PISTON(deltaPos) == ERROR) {
				sprintf(strbuf, fmt3);
				printError(ERR_MTR, strbuf);
				return(ERROR);
			}
			return(NOERROR);
    4c10:	f1 2c       	mov	r15, r1
    4c12:	01 c0       	rjmp	.+2      	; 0x4c16 <move_MOTOR_CMD+0x2ce>
		motorDir[controller - MOTOR_A] = MTRDIRNEGATIVE;
	} else if (newPosition > currentPosition) {
		motorDir[controller - MOTOR_A] = MTRDIRPOSITIVE;
	}

	return(NOERROR);
    4c14:	f1 2c       	mov	r15, r1

}
    4c16:	8f 2d       	mov	r24, r15
    4c18:	cc 51       	subi	r28, 0x1C	; 28
    4c1a:	df 4f       	sbci	r29, 0xFF	; 255
    4c1c:	cd bf       	out	0x3d, r28	; 61
    4c1e:	de bf       	out	0x3e, r29	; 62
    4c20:	df 91       	pop	r29
    4c22:	cf 91       	pop	r28
    4c24:	1f 91       	pop	r17
    4c26:	0f 91       	pop	r16
    4c28:	ff 90       	pop	r15
    4c2a:	ef 90       	pop	r14
    4c2c:	bf 90       	pop	r11
    4c2e:	af 90       	pop	r10
    4c30:	9f 90       	pop	r9
    4c32:	8f 90       	pop	r8
    4c34:	08 95       	ret

00004c36 <put_MOTOR_ENCODER>:
	Returns:
		ERROR:		If put_MOTOR returns an error
		NOERROR:	Otherwise
------------------------------------------------------------------------------*/
uint8_t put_MOTOR_ENCODER(uint8_t mtraddr, int32_t encoderValue)
{
    4c36:	ef 92       	push	r14
    4c38:	ff 92       	push	r15
    4c3a:	0f 93       	push	r16
    4c3c:	1f 93       	push	r17
    4c3e:	cf 93       	push	r28
    4c40:	df 93       	push	r29
    4c42:	cd b7       	in	r28, 0x3d	; 61
    4c44:	de b7       	in	r29, 0x3e	; 62
    4c46:	cd 57       	subi	r28, 0x7D	; 125
    4c48:	d1 09       	sbc	r29, r1
    4c4a:	cd bf       	out	0x3d, r28	; 61
    4c4c:	de bf       	out	0x3e, r29	; 62
    4c4e:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_ENCODER: put_MOTOR error on %c";
    4c50:	89 e2       	ldi	r24, 0x29	; 41
    4c52:	e1 eb       	ldi	r30, 0xB1	; 177
    4c54:	fc eb       	ldi	r31, 0xBC	; 188
    4c56:	de 01       	movw	r26, r28
    4c58:	11 96       	adiw	r26, 0x01	; 1
    4c5a:	01 90       	ld	r0, Z+
    4c5c:	0d 92       	st	X+, r0
    4c5e:	8a 95       	dec	r24
    4c60:	e1 f7       	brne	.-8      	; 0x4c5a <put_MOTOR_ENCODER+0x24>
	char strbuf[80];
	uint8_t data[4];

	data[0] = (encoderValue >> 24) & 0xFF;
    4c62:	eb 96       	adiw	r28, 0x3b	; 59
    4c64:	7f af       	std	Y+63, r23	; 0x3f
    4c66:	eb 97       	sbiw	r28, 0x3b	; 59
	data[1] = (encoderValue >> 16) & 0xFF;
    4c68:	ec 96       	adiw	r28, 0x3c	; 60
    4c6a:	6f af       	std	Y+63, r22	; 0x3f
    4c6c:	ec 97       	sbiw	r28, 0x3c	; 60
	data[2] = (encoderValue >> 8) & 0xFF;
    4c6e:	ed 96       	adiw	r28, 0x3d	; 61
    4c70:	5f af       	std	Y+63, r21	; 0x3f
    4c72:	ed 97       	sbiw	r28, 0x3d	; 61
	data[3] = encoderValue & 0xFF;
    4c74:	ee 96       	adiw	r28, 0x3e	; 62
    4c76:	4f af       	std	Y+63, r20	; 0x3f
    4c78:	ee 97       	sbiw	r28, 0x3e	; 62

	if (put_MOTOR(mtraddr, PUTENCODER, data, 4) == ERROR) {
    4c7a:	24 e0       	ldi	r18, 0x04	; 4
    4c7c:	ae 01       	movw	r20, r28
    4c7e:	46 58       	subi	r20, 0x86	; 134
    4c80:	5f 4f       	sbci	r21, 0xFF	; 255
    4c82:	66 e1       	ldi	r22, 0x16	; 22
    4c84:	80 2f       	mov	r24, r16
    4c86:	0e 94 12 22 	call	0x4424	; 0x4424 <put_MOTOR>
    4c8a:	18 2f       	mov	r17, r24
    4c8c:	83 36       	cpi	r24, 0x63	; 99
    4c8e:	d9 f4       	brne	.+54     	; 0x4cc6 <put_MOTOR_ENCODER+0x90>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    4c90:	0f 53       	subi	r16, 0x3F	; 63
    4c92:	1f 92       	push	r1
    4c94:	0f 93       	push	r16
    4c96:	ce 01       	movw	r24, r28
    4c98:	01 96       	adiw	r24, 0x01	; 1
    4c9a:	9f 93       	push	r25
    4c9c:	8f 93       	push	r24
    4c9e:	7e 01       	movw	r14, r28
    4ca0:	8a e2       	ldi	r24, 0x2A	; 42
    4ca2:	e8 0e       	add	r14, r24
    4ca4:	f1 1c       	adc	r15, r1
    4ca6:	ff 92       	push	r15
    4ca8:	ef 92       	push	r14
    4caa:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
		printError(ERR_MTR, strbuf);
    4cae:	b7 01       	movw	r22, r14
    4cb0:	86 e3       	ldi	r24, 0x36	; 54
    4cb2:	91 e0       	ldi	r25, 0x01	; 1
    4cb4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    4cb8:	0f 90       	pop	r0
    4cba:	0f 90       	pop	r0
    4cbc:	0f 90       	pop	r0
    4cbe:	0f 90       	pop	r0
    4cc0:	0f 90       	pop	r0
    4cc2:	0f 90       	pop	r0
    4cc4:	01 c0       	rjmp	.+2      	; 0x4cc8 <put_MOTOR_ENCODER+0x92>
	}

	return(NOERROR);
    4cc6:	10 e0       	ldi	r17, 0x00	; 0

}
    4cc8:	81 2f       	mov	r24, r17
    4cca:	c3 58       	subi	r28, 0x83	; 131
    4ccc:	df 4f       	sbci	r29, 0xFF	; 255
    4cce:	cd bf       	out	0x3d, r28	; 61
    4cd0:	de bf       	out	0x3e, r29	; 62
    4cd2:	df 91       	pop	r29
    4cd4:	cf 91       	pop	r28
    4cd6:	1f 91       	pop	r17
    4cd8:	0f 91       	pop	r16
    4cda:	ff 90       	pop	r15
    4cdc:	ef 90       	pop	r14
    4cde:	08 95       	ret

00004ce0 <init_MOTORS>:
		NOERROR otherwise

ADD ERROR CHECKS?
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    4ce0:	0f 93       	push	r16
    4ce2:	1f 93       	push	r17
    4ce4:	cf 93       	push	r28
    4ce6:	df 93       	push	r29
    4ce8:	00 d0       	rcall	.+0      	; 0x4cea <init_MOTORS+0xa>
    4cea:	00 d0       	rcall	.+0      	; 0x4cec <init_MOTORS+0xc>
    4cec:	cd b7       	in	r28, 0x3d	; 61
    4cee:	de b7       	in	r29, 0x3e	; 62
    4cf0:	2f e3       	ldi	r18, 0x3F	; 63
    4cf2:	8d e0       	ldi	r24, 0x0D	; 13
    4cf4:	93 e0       	ldi	r25, 0x03	; 3
    4cf6:	21 50       	subi	r18, 0x01	; 1
    4cf8:	80 40       	sbci	r24, 0x00	; 0
    4cfa:	90 40       	sbci	r25, 0x00	; 0
    4cfc:	e1 f7       	brne	.-8      	; 0x4cf6 <init_MOTORS+0x16>
    4cfe:	00 c0       	rjmp	.+0      	; 0x4d00 <init_MOTORS+0x20>
    4d00:	00 00       	nop

	uint8_t i, mtraddr;
	int32_t encoderValue;

	_delay_ms(100);		// Wait to boot up
	timerSAVEENCODER = 0;
    4d02:	10 92 3c 2a 	sts	0x2A3C, r1	; 0x802a3c <timerSAVEENCODER>
	timeoutSAVEENCODER = SAVEENCODERPERIOD;
    4d06:	84 e0       	ldi	r24, 0x04	; 4
    4d08:	80 93 3b 2a 	sts	0x2A3B, r24	; 0x802a3b <timeoutSAVEENCODER>

	for (i = 0; i < NMOTORS; i++) {
    4d0c:	10 e0       	ldi	r17, 0x00	; 0
    4d0e:	1b c0       	rjmp	.+54     	; 0x4d46 <init_MOTORS+0x66>
		motorDir[i] = MTRDIRUNKNOWN;
    4d10:	81 2f       	mov	r24, r17
    4d12:	90 e0       	ldi	r25, 0x00	; 0
    4d14:	fc 01       	movw	r30, r24
    4d16:	e3 5c       	subi	r30, 0xC3	; 195
    4d18:	f5 4d       	sbci	r31, 0xD5	; 213
    4d1a:	22 e0       	ldi	r18, 0x02	; 2
    4d1c:	20 83       	st	Z, r18
		motorLim[i] = MTRLIMUNKNOWN;
    4d1e:	fc 01       	movw	r30, r24
    4d20:	e0 5c       	subi	r30, 0xC0	; 192
    4d22:	f5 4d       	sbci	r31, 0xD5	; 213
    4d24:	10 82       	st	Z, r1
		mtraddr = i + MOTOR_A;
    4d26:	00 e8       	ldi	r16, 0x80	; 128
    4d28:	01 0f       	add	r16, r17
		get_FRAM_MOTOR_ENCODER(mtraddr, &encoderValue);
    4d2a:	be 01       	movw	r22, r28
    4d2c:	6f 5f       	subi	r22, 0xFF	; 255
    4d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    4d30:	80 2f       	mov	r24, r16
    4d32:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <get_FRAM_MOTOR_ENCODER>
		put_MOTOR_ENCODER(mtraddr, encoderValue);
    4d36:	49 81       	ldd	r20, Y+1	; 0x01
    4d38:	5a 81       	ldd	r21, Y+2	; 0x02
    4d3a:	6b 81       	ldd	r22, Y+3	; 0x03
    4d3c:	7c 81       	ldd	r23, Y+4	; 0x04
    4d3e:	80 2f       	mov	r24, r16
    4d40:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <put_MOTOR_ENCODER>

	_delay_ms(100);		// Wait to boot up
	timerSAVEENCODER = 0;
	timeoutSAVEENCODER = SAVEENCODERPERIOD;

	for (i = 0; i < NMOTORS; i++) {
    4d44:	1f 5f       	subi	r17, 0xFF	; 255
    4d46:	13 30       	cpi	r17, 0x03	; 3
    4d48:	18 f3       	brcs	.-58     	; 0x4d10 <init_MOTORS+0x30>
		put_MOTOR_ENCODER(mtraddr, encoderValue);
	}

	return(NOERROR);

}
    4d4a:	80 e0       	ldi	r24, 0x00	; 0
    4d4c:	24 96       	adiw	r28, 0x04	; 4
    4d4e:	cd bf       	out	0x3d, r28	; 61
    4d50:	de bf       	out	0x3e, r29	; 62
    4d52:	df 91       	pop	r29
    4d54:	cf 91       	pop	r28
    4d56:	1f 91       	pop	r17
    4d58:	0f 91       	pop	r16
    4d5a:	08 95       	ret

00004d5c <put_MOTOR_PID>:
		ERROR:		If put_MOTOR returns an error
		NOERROR:	Otherwise
------------------------------------------------------------------------------*/

uint8_t put_MOTOR_PID(uint8_t mtraddr, PID pid)
{
    4d5c:	9f 92       	push	r9
    4d5e:	af 92       	push	r10
    4d60:	bf 92       	push	r11
    4d62:	cf 92       	push	r12
    4d64:	df 92       	push	r13
    4d66:	ef 92       	push	r14
    4d68:	ff 92       	push	r15
    4d6a:	0f 93       	push	r16
    4d6c:	1f 93       	push	r17
    4d6e:	cf 93       	push	r28
    4d70:	df 93       	push	r29
    4d72:	cd b7       	in	r28, 0x3d	; 61
    4d74:	de b7       	in	r29, 0x3e	; 62
    4d76:	cf 5b       	subi	r28, 0xBF	; 191
    4d78:	d1 09       	sbc	r29, r1
    4d7a:	cd bf       	out	0x3d, r28	; 61
    4d7c:	de bf       	out	0x3e, r29	; 62
    4d7e:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_PID: put_MOTOR error pid on %c";
    4d80:	89 e2       	ldi	r24, 0x29	; 41
    4d82:	ea ed       	ldi	r30, 0xDA	; 218
    4d84:	fc eb       	ldi	r31, 0xBC	; 188
    4d86:	de 01       	movw	r26, r28
    4d88:	11 96       	adiw	r26, 0x01	; 1
    4d8a:	01 90       	ld	r0, Z+
    4d8c:	0d 92       	st	X+, r0
    4d8e:	8a 95       	dec	r24
    4d90:	e1 f7       	brne	.-8      	; 0x4d8a <put_MOTOR_PID+0x2e>
	const char fmt2[] = "put_MOTOR_PID: put_MOTOR error qpps on %c";
    4d92:	8a e2       	ldi	r24, 0x2A	; 42
    4d94:	e3 e0       	ldi	r30, 0x03	; 3
    4d96:	fd eb       	ldi	r31, 0xBD	; 189
    4d98:	de 01       	movw	r26, r28
    4d9a:	9a 96       	adiw	r26, 0x2a	; 42
    4d9c:	01 90       	ld	r0, Z+
    4d9e:	0d 92       	st	X+, r0
    4da0:	8a 95       	dec	r24
    4da2:	e1 f7       	brne	.-8      	; 0x4d9c <put_MOTOR_PID+0x40>
	char strbuf[80];
	uint8_t data[28];
	int32_t p, i, d;

	p = (int32_t) (pid.p * 1024.0);
    4da4:	c3 53       	subi	r28, 0x33	; 51
    4da6:	df 4f       	sbci	r29, 0xFF	; 255
    4da8:	68 81       	ld	r22, Y
    4daa:	79 81       	ldd	r23, Y+1	; 0x01
    4dac:	8a 81       	ldd	r24, Y+2	; 0x02
    4dae:	9b 81       	ldd	r25, Y+3	; 0x03
    4db0:	cd 5c       	subi	r28, 0xCD	; 205
    4db2:	d0 40       	sbci	r29, 0x00	; 0
    4db4:	20 e0       	ldi	r18, 0x00	; 0
    4db6:	30 e0       	ldi	r19, 0x00	; 0
    4db8:	40 e8       	ldi	r20, 0x80	; 128
    4dba:	54 e4       	ldi	r21, 0x44	; 68
    4dbc:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
    4dc0:	0e 94 4c 31 	call	0x6298	; 0x6298 <__fixsfsi>
    4dc4:	c6 2e       	mov	r12, r22
    4dc6:	b7 2e       	mov	r11, r23
    4dc8:	a8 2e       	mov	r10, r24
    4dca:	99 2e       	mov	r9, r25
	i = (int32_t) (pid.i * 1024.0);
    4dcc:	cf 52       	subi	r28, 0x2F	; 47
    4dce:	df 4f       	sbci	r29, 0xFF	; 255
    4dd0:	68 81       	ld	r22, Y
    4dd2:	79 81       	ldd	r23, Y+1	; 0x01
    4dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    4dd8:	c1 5d       	subi	r28, 0xD1	; 209
    4dda:	d0 40       	sbci	r29, 0x00	; 0
    4ddc:	20 e0       	ldi	r18, 0x00	; 0
    4dde:	30 e0       	ldi	r19, 0x00	; 0
    4de0:	40 e8       	ldi	r20, 0x80	; 128
    4de2:	54 e4       	ldi	r21, 0x44	; 68
    4de4:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
    4de8:	0e 94 4c 31 	call	0x6298	; 0x6298 <__fixsfsi>
    4dec:	16 2f       	mov	r17, r22
    4dee:	f7 2e       	mov	r15, r23
    4df0:	e8 2e       	mov	r14, r24
    4df2:	d9 2e       	mov	r13, r25
	d = (int32_t) (pid.d * 1024.0);
    4df4:	cb 52       	subi	r28, 0x2B	; 43
    4df6:	df 4f       	sbci	r29, 0xFF	; 255
    4df8:	68 81       	ld	r22, Y
    4dfa:	79 81       	ldd	r23, Y+1	; 0x01
    4dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    4dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    4e00:	c5 5d       	subi	r28, 0xD5	; 213
    4e02:	d0 40       	sbci	r29, 0x00	; 0
    4e04:	20 e0       	ldi	r18, 0x00	; 0
    4e06:	30 e0       	ldi	r19, 0x00	; 0
    4e08:	40 e8       	ldi	r20, 0x80	; 128
    4e0a:	54 e4       	ldi	r21, 0x44	; 68
    4e0c:	0e 94 34 32 	call	0x6468	; 0x6468 <__mulsf3>
    4e10:	0e 94 4c 31 	call	0x6298	; 0x6298 <__fixsfsi>

	data[0] = (d >> 24) & 0xFF;
    4e14:	cc 55       	subi	r28, 0x5C	; 92
    4e16:	df 4f       	sbci	r29, 0xFF	; 255
    4e18:	98 83       	st	Y, r25
    4e1a:	c4 5a       	subi	r28, 0xA4	; 164
    4e1c:	d0 40       	sbci	r29, 0x00	; 0
	data[1] = (d >> 16) & 0xFF;
    4e1e:	cb 55       	subi	r28, 0x5B	; 91
    4e20:	df 4f       	sbci	r29, 0xFF	; 255
    4e22:	88 83       	st	Y, r24
    4e24:	c5 5a       	subi	r28, 0xA5	; 165
    4e26:	d0 40       	sbci	r29, 0x00	; 0
	data[2] = (d >> 8) & 0xFF;
    4e28:	ca 55       	subi	r28, 0x5A	; 90
    4e2a:	df 4f       	sbci	r29, 0xFF	; 255
    4e2c:	78 83       	st	Y, r23
    4e2e:	c6 5a       	subi	r28, 0xA6	; 166
    4e30:	d0 40       	sbci	r29, 0x00	; 0
	data[3] = d & 0xFF;
    4e32:	c9 55       	subi	r28, 0x59	; 89
    4e34:	df 4f       	sbci	r29, 0xFF	; 255
    4e36:	68 83       	st	Y, r22
    4e38:	c7 5a       	subi	r28, 0xA7	; 167
    4e3a:	d0 40       	sbci	r29, 0x00	; 0
	data[4] = (p >> 24) & 0xFF;
    4e3c:	c8 55       	subi	r28, 0x58	; 88
    4e3e:	df 4f       	sbci	r29, 0xFF	; 255
    4e40:	98 82       	st	Y, r9
    4e42:	c8 5a       	subi	r28, 0xA8	; 168
    4e44:	d0 40       	sbci	r29, 0x00	; 0
	data[5] = (p >> 16) & 0xFF;
    4e46:	c7 55       	subi	r28, 0x57	; 87
    4e48:	df 4f       	sbci	r29, 0xFF	; 255
    4e4a:	a8 82       	st	Y, r10
    4e4c:	c9 5a       	subi	r28, 0xA9	; 169
    4e4e:	d0 40       	sbci	r29, 0x00	; 0
	data[6] = (p >> 8) & 0xFF;
    4e50:	c6 55       	subi	r28, 0x56	; 86
    4e52:	df 4f       	sbci	r29, 0xFF	; 255
    4e54:	b8 82       	st	Y, r11
    4e56:	ca 5a       	subi	r28, 0xAA	; 170
    4e58:	d0 40       	sbci	r29, 0x00	; 0
	data[7] = p & 0xFF;
    4e5a:	c5 55       	subi	r28, 0x55	; 85
    4e5c:	df 4f       	sbci	r29, 0xFF	; 255
    4e5e:	c8 82       	st	Y, r12
    4e60:	cb 5a       	subi	r28, 0xAB	; 171
    4e62:	d0 40       	sbci	r29, 0x00	; 0
	data[8] = (i >> 24) & 0xFF;
    4e64:	c4 55       	subi	r28, 0x54	; 84
    4e66:	df 4f       	sbci	r29, 0xFF	; 255
    4e68:	d8 82       	st	Y, r13
    4e6a:	cc 5a       	subi	r28, 0xAC	; 172
    4e6c:	d0 40       	sbci	r29, 0x00	; 0
	data[9] = (i >> 16) & 0xFF;
    4e6e:	c3 55       	subi	r28, 0x53	; 83
    4e70:	df 4f       	sbci	r29, 0xFF	; 255
    4e72:	e8 82       	st	Y, r14
    4e74:	cd 5a       	subi	r28, 0xAD	; 173
    4e76:	d0 40       	sbci	r29, 0x00	; 0
	data[10] = (i >> 8) & 0xFF;
    4e78:	c2 55       	subi	r28, 0x52	; 82
    4e7a:	df 4f       	sbci	r29, 0xFF	; 255
    4e7c:	f8 82       	st	Y, r15
    4e7e:	ce 5a       	subi	r28, 0xAE	; 174
    4e80:	d0 40       	sbci	r29, 0x00	; 0
	data[11] = i & 0xFF;
    4e82:	c1 55       	subi	r28, 0x51	; 81
    4e84:	df 4f       	sbci	r29, 0xFF	; 255
    4e86:	18 83       	st	Y, r17
    4e88:	cf 5a       	subi	r28, 0xAF	; 175
    4e8a:	d0 40       	sbci	r29, 0x00	; 0
	data[12] = (pid.maxI >> 24) & 0xFF;
    4e8c:	c7 52       	subi	r28, 0x27	; 39
    4e8e:	df 4f       	sbci	r29, 0xFF	; 255
    4e90:	88 81       	ld	r24, Y
    4e92:	c9 5d       	subi	r28, 0xD9	; 217
    4e94:	d0 40       	sbci	r29, 0x00	; 0
    4e96:	c6 52       	subi	r28, 0x26	; 38
    4e98:	df 4f       	sbci	r29, 0xFF	; 255
    4e9a:	98 81       	ld	r25, Y
    4e9c:	ca 5d       	subi	r28, 0xDA	; 218
    4e9e:	d0 40       	sbci	r29, 0x00	; 0
    4ea0:	c5 52       	subi	r28, 0x25	; 37
    4ea2:	df 4f       	sbci	r29, 0xFF	; 255
    4ea4:	28 81       	ld	r18, Y
    4ea6:	cb 5d       	subi	r28, 0xDB	; 219
    4ea8:	d0 40       	sbci	r29, 0x00	; 0
    4eaa:	c4 52       	subi	r28, 0x24	; 36
    4eac:	df 4f       	sbci	r29, 0xFF	; 255
    4eae:	38 81       	ld	r19, Y
    4eb0:	cc 5d       	subi	r28, 0xDC	; 220
    4eb2:	d0 40       	sbci	r29, 0x00	; 0
    4eb4:	c0 55       	subi	r28, 0x50	; 80
    4eb6:	df 4f       	sbci	r29, 0xFF	; 255
    4eb8:	38 83       	st	Y, r19
    4eba:	c0 5b       	subi	r28, 0xB0	; 176
    4ebc:	d0 40       	sbci	r29, 0x00	; 0
	data[13] = (pid.maxI >> 16) & 0xFF;
    4ebe:	cf 54       	subi	r28, 0x4F	; 79
    4ec0:	df 4f       	sbci	r29, 0xFF	; 255
    4ec2:	28 83       	st	Y, r18
    4ec4:	c1 5b       	subi	r28, 0xB1	; 177
    4ec6:	d0 40       	sbci	r29, 0x00	; 0
	data[14] = (pid.maxI >> 8) & 0xFF;
    4ec8:	ce 54       	subi	r28, 0x4E	; 78
    4eca:	df 4f       	sbci	r29, 0xFF	; 255
    4ecc:	98 83       	st	Y, r25
    4ece:	c2 5b       	subi	r28, 0xB2	; 178
    4ed0:	d0 40       	sbci	r29, 0x00	; 0
	data[15] = pid.maxI & 0xFF;
    4ed2:	cd 54       	subi	r28, 0x4D	; 77
    4ed4:	df 4f       	sbci	r29, 0xFF	; 255
    4ed6:	88 83       	st	Y, r24
    4ed8:	c3 5b       	subi	r28, 0xB3	; 179
    4eda:	d0 40       	sbci	r29, 0x00	; 0
	data[16] = (pid.deadZone >> 24) & 0xFF;
    4edc:	c3 52       	subi	r28, 0x23	; 35
    4ede:	df 4f       	sbci	r29, 0xFF	; 255
    4ee0:	88 81       	ld	r24, Y
    4ee2:	cd 5d       	subi	r28, 0xDD	; 221
    4ee4:	d0 40       	sbci	r29, 0x00	; 0
    4ee6:	c2 52       	subi	r28, 0x22	; 34
    4ee8:	df 4f       	sbci	r29, 0xFF	; 255
    4eea:	98 81       	ld	r25, Y
    4eec:	ce 5d       	subi	r28, 0xDE	; 222
    4eee:	d0 40       	sbci	r29, 0x00	; 0
    4ef0:	c1 52       	subi	r28, 0x21	; 33
    4ef2:	df 4f       	sbci	r29, 0xFF	; 255
    4ef4:	28 81       	ld	r18, Y
    4ef6:	cf 5d       	subi	r28, 0xDF	; 223
    4ef8:	d0 40       	sbci	r29, 0x00	; 0
    4efa:	c0 52       	subi	r28, 0x20	; 32
    4efc:	df 4f       	sbci	r29, 0xFF	; 255
    4efe:	38 81       	ld	r19, Y
    4f00:	c0 5e       	subi	r28, 0xE0	; 224
    4f02:	d0 40       	sbci	r29, 0x00	; 0
    4f04:	cc 54       	subi	r28, 0x4C	; 76
    4f06:	df 4f       	sbci	r29, 0xFF	; 255
    4f08:	38 83       	st	Y, r19
    4f0a:	c4 5b       	subi	r28, 0xB4	; 180
    4f0c:	d0 40       	sbci	r29, 0x00	; 0
	data[17] = (pid.deadZone >> 16) & 0xFF;
    4f0e:	cb 54       	subi	r28, 0x4B	; 75
    4f10:	df 4f       	sbci	r29, 0xFF	; 255
    4f12:	28 83       	st	Y, r18
    4f14:	c5 5b       	subi	r28, 0xB5	; 181
    4f16:	d0 40       	sbci	r29, 0x00	; 0
	data[18] = (pid.deadZone >> 8) & 0xFF;
    4f18:	ca 54       	subi	r28, 0x4A	; 74
    4f1a:	df 4f       	sbci	r29, 0xFF	; 255
    4f1c:	98 83       	st	Y, r25
    4f1e:	c6 5b       	subi	r28, 0xB6	; 182
    4f20:	d0 40       	sbci	r29, 0x00	; 0
	data[19] = pid.deadZone & 0xFF;
    4f22:	c9 54       	subi	r28, 0x49	; 73
    4f24:	df 4f       	sbci	r29, 0xFF	; 255
    4f26:	88 83       	st	Y, r24
    4f28:	c7 5b       	subi	r28, 0xB7	; 183
    4f2a:	d0 40       	sbci	r29, 0x00	; 0
	data[20] = (pid.minPos >> 24) & 0xFF;
    4f2c:	cf 51       	subi	r28, 0x1F	; 31
    4f2e:	df 4f       	sbci	r29, 0xFF	; 255
    4f30:	88 81       	ld	r24, Y
    4f32:	c1 5e       	subi	r28, 0xE1	; 225
    4f34:	d0 40       	sbci	r29, 0x00	; 0
    4f36:	ce 51       	subi	r28, 0x1E	; 30
    4f38:	df 4f       	sbci	r29, 0xFF	; 255
    4f3a:	98 81       	ld	r25, Y
    4f3c:	c2 5e       	subi	r28, 0xE2	; 226
    4f3e:	d0 40       	sbci	r29, 0x00	; 0
    4f40:	cd 51       	subi	r28, 0x1D	; 29
    4f42:	df 4f       	sbci	r29, 0xFF	; 255
    4f44:	28 81       	ld	r18, Y
    4f46:	c3 5e       	subi	r28, 0xE3	; 227
    4f48:	d0 40       	sbci	r29, 0x00	; 0
    4f4a:	cc 51       	subi	r28, 0x1C	; 28
    4f4c:	df 4f       	sbci	r29, 0xFF	; 255
    4f4e:	38 81       	ld	r19, Y
    4f50:	c4 5e       	subi	r28, 0xE4	; 228
    4f52:	d0 40       	sbci	r29, 0x00	; 0
    4f54:	c8 54       	subi	r28, 0x48	; 72
    4f56:	df 4f       	sbci	r29, 0xFF	; 255
    4f58:	38 83       	st	Y, r19
    4f5a:	c8 5b       	subi	r28, 0xB8	; 184
    4f5c:	d0 40       	sbci	r29, 0x00	; 0
	data[21] = (pid.minPos >> 16) & 0xFF;
    4f5e:	c7 54       	subi	r28, 0x47	; 71
    4f60:	df 4f       	sbci	r29, 0xFF	; 255
    4f62:	28 83       	st	Y, r18
    4f64:	c9 5b       	subi	r28, 0xB9	; 185
    4f66:	d0 40       	sbci	r29, 0x00	; 0
	data[22] = (pid.minPos >> 8) & 0xFF;
    4f68:	c6 54       	subi	r28, 0x46	; 70
    4f6a:	df 4f       	sbci	r29, 0xFF	; 255
    4f6c:	98 83       	st	Y, r25
    4f6e:	ca 5b       	subi	r28, 0xBA	; 186
    4f70:	d0 40       	sbci	r29, 0x00	; 0
	data[23] = pid.minPos & 0xFF;
    4f72:	c5 54       	subi	r28, 0x45	; 69
    4f74:	df 4f       	sbci	r29, 0xFF	; 255
    4f76:	88 83       	st	Y, r24
    4f78:	cb 5b       	subi	r28, 0xBB	; 187
    4f7a:	d0 40       	sbci	r29, 0x00	; 0
	data[24] = (pid.maxPos >> 24) & 0xFF;
    4f7c:	cb 51       	subi	r28, 0x1B	; 27
    4f7e:	df 4f       	sbci	r29, 0xFF	; 255
    4f80:	88 81       	ld	r24, Y
    4f82:	c5 5e       	subi	r28, 0xE5	; 229
    4f84:	d0 40       	sbci	r29, 0x00	; 0
    4f86:	ca 51       	subi	r28, 0x1A	; 26
    4f88:	df 4f       	sbci	r29, 0xFF	; 255
    4f8a:	98 81       	ld	r25, Y
    4f8c:	c6 5e       	subi	r28, 0xE6	; 230
    4f8e:	d0 40       	sbci	r29, 0x00	; 0
    4f90:	c9 51       	subi	r28, 0x19	; 25
    4f92:	df 4f       	sbci	r29, 0xFF	; 255
    4f94:	28 81       	ld	r18, Y
    4f96:	c7 5e       	subi	r28, 0xE7	; 231
    4f98:	d0 40       	sbci	r29, 0x00	; 0
    4f9a:	c8 51       	subi	r28, 0x18	; 24
    4f9c:	df 4f       	sbci	r29, 0xFF	; 255
    4f9e:	38 81       	ld	r19, Y
    4fa0:	c8 5e       	subi	r28, 0xE8	; 232
    4fa2:	d0 40       	sbci	r29, 0x00	; 0
    4fa4:	c4 54       	subi	r28, 0x44	; 68
    4fa6:	df 4f       	sbci	r29, 0xFF	; 255
    4fa8:	38 83       	st	Y, r19
    4faa:	cc 5b       	subi	r28, 0xBC	; 188
    4fac:	d0 40       	sbci	r29, 0x00	; 0
	data[25] = (pid.maxPos >> 16) & 0xFF;
    4fae:	c3 54       	subi	r28, 0x43	; 67
    4fb0:	df 4f       	sbci	r29, 0xFF	; 255
    4fb2:	28 83       	st	Y, r18
    4fb4:	cd 5b       	subi	r28, 0xBD	; 189
    4fb6:	d0 40       	sbci	r29, 0x00	; 0
	data[26] = (pid.maxPos >> 8) & 0xFF;
    4fb8:	c2 54       	subi	r28, 0x42	; 66
    4fba:	df 4f       	sbci	r29, 0xFF	; 255
    4fbc:	98 83       	st	Y, r25
    4fbe:	ce 5b       	subi	r28, 0xBE	; 190
    4fc0:	d0 40       	sbci	r29, 0x00	; 0
	data[27] = pid.maxPos & 0xFF;
    4fc2:	c1 54       	subi	r28, 0x41	; 65
    4fc4:	df 4f       	sbci	r29, 0xFF	; 255
    4fc6:	88 83       	st	Y, r24
    4fc8:	cf 5b       	subi	r28, 0xBF	; 191
    4fca:	d0 40       	sbci	r29, 0x00	; 0

	if (put_MOTOR(mtraddr, SETPID, data, 28) == ERROR) {
    4fcc:	2c e1       	ldi	r18, 0x1C	; 28
    4fce:	ae 01       	movw	r20, r28
    4fd0:	4c 55       	subi	r20, 0x5C	; 92
    4fd2:	5f 4f       	sbci	r21, 0xFF	; 255
    4fd4:	6d e3       	ldi	r22, 0x3D	; 61
    4fd6:	80 2f       	mov	r24, r16
    4fd8:	0e 94 12 22 	call	0x4424	; 0x4424 <put_MOTOR>
    4fdc:	18 2f       	mov	r17, r24
    4fde:	83 36       	cpi	r24, 0x63	; 99
    4fe0:	d9 f4       	brne	.+54     	; 0x5018 <put_MOTOR_PID+0x2bc>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    4fe2:	0f 53       	subi	r16, 0x3F	; 63
    4fe4:	1f 92       	push	r1
    4fe6:	0f 93       	push	r16
    4fe8:	ce 01       	movw	r24, r28
    4fea:	01 96       	adiw	r24, 0x01	; 1
    4fec:	9f 93       	push	r25
    4fee:	8f 93       	push	r24
    4ff0:	7e 01       	movw	r14, r28
    4ff2:	84 e5       	ldi	r24, 0x54	; 84
    4ff4:	e8 0e       	add	r14, r24
    4ff6:	f1 1c       	adc	r15, r1
    4ff8:	ff 92       	push	r15
    4ffa:	ef 92       	push	r14
    4ffc:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
		printError(ERR_MTR, strbuf);
    5000:	b7 01       	movw	r22, r14
    5002:	86 e3       	ldi	r24, 0x36	; 54
    5004:	91 e0       	ldi	r25, 0x01	; 1
    5006:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    500a:	0f 90       	pop	r0
    500c:	0f 90       	pop	r0
    500e:	0f 90       	pop	r0
    5010:	0f 90       	pop	r0
    5012:	0f 90       	pop	r0
    5014:	0f 90       	pop	r0
    5016:	8b c0       	rjmp	.+278    	; 0x512e <put_MOTOR_PID+0x3d2>
	}

	data[0] = data[1] = data[2] = data[3] = 0;
    5018:	c9 55       	subi	r28, 0x59	; 89
    501a:	df 4f       	sbci	r29, 0xFF	; 255
    501c:	18 82       	st	Y, r1
    501e:	c7 5a       	subi	r28, 0xA7	; 167
    5020:	d0 40       	sbci	r29, 0x00	; 0
    5022:	ca 55       	subi	r28, 0x5A	; 90
    5024:	df 4f       	sbci	r29, 0xFF	; 255
    5026:	18 82       	st	Y, r1
    5028:	c6 5a       	subi	r28, 0xA6	; 166
    502a:	d0 40       	sbci	r29, 0x00	; 0
    502c:	cb 55       	subi	r28, 0x5B	; 91
    502e:	df 4f       	sbci	r29, 0xFF	; 255
    5030:	18 82       	st	Y, r1
    5032:	c5 5a       	subi	r28, 0xA5	; 165
    5034:	d0 40       	sbci	r29, 0x00	; 0
    5036:	cc 55       	subi	r28, 0x5C	; 92
    5038:	df 4f       	sbci	r29, 0xFF	; 255
    503a:	18 82       	st	Y, r1
    503c:	c4 5a       	subi	r28, 0xA4	; 164
    503e:	d0 40       	sbci	r29, 0x00	; 0
	data[4] = data[5] = data[6] = data[7] = 0;
    5040:	c5 55       	subi	r28, 0x55	; 85
    5042:	df 4f       	sbci	r29, 0xFF	; 255
    5044:	18 82       	st	Y, r1
    5046:	cb 5a       	subi	r28, 0xAB	; 171
    5048:	d0 40       	sbci	r29, 0x00	; 0
    504a:	c6 55       	subi	r28, 0x56	; 86
    504c:	df 4f       	sbci	r29, 0xFF	; 255
    504e:	18 82       	st	Y, r1
    5050:	ca 5a       	subi	r28, 0xAA	; 170
    5052:	d0 40       	sbci	r29, 0x00	; 0
    5054:	c7 55       	subi	r28, 0x57	; 87
    5056:	df 4f       	sbci	r29, 0xFF	; 255
    5058:	18 82       	st	Y, r1
    505a:	c9 5a       	subi	r28, 0xA9	; 169
    505c:	d0 40       	sbci	r29, 0x00	; 0
    505e:	c8 55       	subi	r28, 0x58	; 88
    5060:	df 4f       	sbci	r29, 0xFF	; 255
    5062:	18 82       	st	Y, r1
    5064:	c8 5a       	subi	r28, 0xA8	; 168
    5066:	d0 40       	sbci	r29, 0x00	; 0
	data[8] = data[9] = data[10] = data[11] = 0;
    5068:	c1 55       	subi	r28, 0x51	; 81
    506a:	df 4f       	sbci	r29, 0xFF	; 255
    506c:	18 82       	st	Y, r1
    506e:	cf 5a       	subi	r28, 0xAF	; 175
    5070:	d0 40       	sbci	r29, 0x00	; 0
    5072:	c2 55       	subi	r28, 0x52	; 82
    5074:	df 4f       	sbci	r29, 0xFF	; 255
    5076:	18 82       	st	Y, r1
    5078:	ce 5a       	subi	r28, 0xAE	; 174
    507a:	d0 40       	sbci	r29, 0x00	; 0
    507c:	c3 55       	subi	r28, 0x53	; 83
    507e:	df 4f       	sbci	r29, 0xFF	; 255
    5080:	18 82       	st	Y, r1
    5082:	cd 5a       	subi	r28, 0xAD	; 173
    5084:	d0 40       	sbci	r29, 0x00	; 0
    5086:	c4 55       	subi	r28, 0x54	; 84
    5088:	df 4f       	sbci	r29, 0xFF	; 255
    508a:	18 82       	st	Y, r1
    508c:	cc 5a       	subi	r28, 0xAC	; 172
    508e:	d0 40       	sbci	r29, 0x00	; 0
	data[12] = (pid.qpps >> 24) & 0xFF;
    5090:	c7 51       	subi	r28, 0x17	; 23
    5092:	df 4f       	sbci	r29, 0xFF	; 255
    5094:	88 81       	ld	r24, Y
    5096:	c9 5e       	subi	r28, 0xE9	; 233
    5098:	d0 40       	sbci	r29, 0x00	; 0
    509a:	c6 51       	subi	r28, 0x16	; 22
    509c:	df 4f       	sbci	r29, 0xFF	; 255
    509e:	98 81       	ld	r25, Y
    50a0:	ca 5e       	subi	r28, 0xEA	; 234
    50a2:	d0 40       	sbci	r29, 0x00	; 0
    50a4:	c5 51       	subi	r28, 0x15	; 21
    50a6:	df 4f       	sbci	r29, 0xFF	; 255
    50a8:	28 81       	ld	r18, Y
    50aa:	cb 5e       	subi	r28, 0xEB	; 235
    50ac:	d0 40       	sbci	r29, 0x00	; 0
    50ae:	c4 51       	subi	r28, 0x14	; 20
    50b0:	df 4f       	sbci	r29, 0xFF	; 255
    50b2:	38 81       	ld	r19, Y
    50b4:	cc 5e       	subi	r28, 0xEC	; 236
    50b6:	d0 40       	sbci	r29, 0x00	; 0
    50b8:	c0 55       	subi	r28, 0x50	; 80
    50ba:	df 4f       	sbci	r29, 0xFF	; 255
    50bc:	38 83       	st	Y, r19
    50be:	c0 5b       	subi	r28, 0xB0	; 176
    50c0:	d0 40       	sbci	r29, 0x00	; 0
	data[13] = (pid.qpps >> 16) & 0xFF;
    50c2:	cf 54       	subi	r28, 0x4F	; 79
    50c4:	df 4f       	sbci	r29, 0xFF	; 255
    50c6:	28 83       	st	Y, r18
    50c8:	c1 5b       	subi	r28, 0xB1	; 177
    50ca:	d0 40       	sbci	r29, 0x00	; 0
	data[14] = (pid.qpps >> 8) & 0xFF;
    50cc:	ce 54       	subi	r28, 0x4E	; 78
    50ce:	df 4f       	sbci	r29, 0xFF	; 255
    50d0:	98 83       	st	Y, r25
    50d2:	c2 5b       	subi	r28, 0xB2	; 178
    50d4:	d0 40       	sbci	r29, 0x00	; 0
	data[15] = pid.qpps & 0xFF;
    50d6:	cd 54       	subi	r28, 0x4D	; 77
    50d8:	df 4f       	sbci	r29, 0xFF	; 255
    50da:	88 83       	st	Y, r24
    50dc:	c3 5b       	subi	r28, 0xB3	; 179
    50de:	d0 40       	sbci	r29, 0x00	; 0

	if (put_MOTOR(mtraddr, SETQPPS, data, 16) == ERROR) {
    50e0:	20 e1       	ldi	r18, 0x10	; 16
    50e2:	ae 01       	movw	r20, r28
    50e4:	4c 55       	subi	r20, 0x5C	; 92
    50e6:	5f 4f       	sbci	r21, 0xFF	; 255
    50e8:	6c e1       	ldi	r22, 0x1C	; 28
    50ea:	80 2f       	mov	r24, r16
    50ec:	0e 94 12 22 	call	0x4424	; 0x4424 <put_MOTOR>
    50f0:	18 2f       	mov	r17, r24
    50f2:	83 36       	cpi	r24, 0x63	; 99
    50f4:	d9 f4       	brne	.+54     	; 0x512c <put_MOTOR_PID+0x3d0>
		sprintf(strbuf, fmt2, (char) (mtraddr-63));
    50f6:	0f 53       	subi	r16, 0x3F	; 63
    50f8:	1f 92       	push	r1
    50fa:	0f 93       	push	r16
    50fc:	ce 01       	movw	r24, r28
    50fe:	8a 96       	adiw	r24, 0x2a	; 42
    5100:	9f 93       	push	r25
    5102:	8f 93       	push	r24
    5104:	7e 01       	movw	r14, r28
    5106:	84 e5       	ldi	r24, 0x54	; 84
    5108:	e8 0e       	add	r14, r24
    510a:	f1 1c       	adc	r15, r1
    510c:	ff 92       	push	r15
    510e:	ef 92       	push	r14
    5110:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
		printError(ERR_MTR, strbuf);
    5114:	b7 01       	movw	r22, r14
    5116:	86 e3       	ldi	r24, 0x36	; 54
    5118:	91 e0       	ldi	r25, 0x01	; 1
    511a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    511e:	0f 90       	pop	r0
    5120:	0f 90       	pop	r0
    5122:	0f 90       	pop	r0
    5124:	0f 90       	pop	r0
    5126:	0f 90       	pop	r0
    5128:	0f 90       	pop	r0
    512a:	01 c0       	rjmp	.+2      	; 0x512e <put_MOTOR_PID+0x3d2>
	}

	return(NOERROR);
    512c:	10 e0       	ldi	r17, 0x00	; 0
}
    512e:	81 2f       	mov	r24, r17
    5130:	c1 54       	subi	r28, 0x41	; 65
    5132:	df 4f       	sbci	r29, 0xFF	; 255
    5134:	cd bf       	out	0x3d, r28	; 61
    5136:	de bf       	out	0x3e, r29	; 62
    5138:	df 91       	pop	r29
    513a:	cf 91       	pop	r28
    513c:	1f 91       	pop	r17
    513e:	0f 91       	pop	r16
    5140:	ff 90       	pop	r15
    5142:	ef 90       	pop	r14
    5144:	df 90       	pop	r13
    5146:	cf 90       	pop	r12
    5148:	bf 90       	pop	r11
    514a:	af 90       	pop	r10
    514c:	9f 90       	pop	r9
    514e:	08 95       	ret

00005150 <unstick_MOTOR_LIMIT>:
	Returns:
		ERROR
		NOERROR
------------------------------------------------------------------------------*/
uint8_t unstick_MOTOR_LIMIT(uint8_t cstack)
{
    5150:	bf 92       	push	r11
    5152:	cf 92       	push	r12
    5154:	df 92       	push	r13
    5156:	ef 92       	push	r14
    5158:	ff 92       	push	r15
    515a:	0f 93       	push	r16
    515c:	1f 93       	push	r17
    515e:	cf 93       	push	r28
    5160:	df 93       	push	r29
    5162:	cd b7       	in	r28, 0x3d	; 61
    5164:	de b7       	in	r29, 0x3e	; 62
    5166:	c8 55       	subi	r28, 0x58	; 88
    5168:	d1 09       	sbc	r29, r1
    516a:	cd bf       	out	0x3d, r28	; 61
    516c:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	uint8_t i, mtraddr, mtrIndex, direction, stuck;
	int32_t encodervalue, encoderspeed, newPosition;

	mtraddr = pcmd[cstack].cobject + 31;	// 128, 129, or 130
    516e:	24 e3       	ldi	r18, 0x34	; 52
    5170:	82 9f       	mul	r24, r18
    5172:	c0 01       	movw	r24, r0
    5174:	11 24       	eor	r1, r1
    5176:	fc 01       	movw	r30, r24
    5178:	e1 5f       	subi	r30, 0xF1	; 241
    517a:	f7 4d       	sbci	r31, 0xD7	; 215
    517c:	e1 81       	ldd	r30, Z+1	; 0x01
    517e:	1f e1       	ldi	r17, 0x1F	; 31
    5180:	1e 0f       	add	r17, r30
	mtrIndex = mtraddr - MOTOR_A;
    5182:	e1 56       	subi	r30, 0x61	; 97
	direction = motorDir[mtrIndex];		// Save the most recent command direction
    5184:	f0 e0       	ldi	r31, 0x00	; 0
    5186:	e3 5c       	subi	r30, 0xC3	; 195
    5188:	f5 4d       	sbci	r31, 0xD5	; 213
    518a:	b0 80       	ld	r11, Z

//sprintf(strbuf, "mtraddr = %d, mtrIndex = %d, direction = %d", mtraddr, mtrIndex, direction);
//printLine(strbuf);

	if (get_MOTOR_LIMIT(mtraddr) == NO) {
    518c:	81 2f       	mov	r24, r17
    518e:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <get_MOTOR_LIMIT>
    5192:	08 2f       	mov	r16, r24
    5194:	81 11       	cpse	r24, r1
    5196:	1c c0       	rjmp	.+56     	; 0x51d0 <unstick_MOTOR_LIMIT+0x80>
		sprintf(strbuf, "motor %c not stuck", mtraddr - 31);
    5198:	81 2f       	mov	r24, r17
    519a:	90 e0       	ldi	r25, 0x00	; 0
    519c:	4f 97       	sbiw	r24, 0x1f	; 31
    519e:	9f 93       	push	r25
    51a0:	8f 93       	push	r24
    51a2:	8d e2       	ldi	r24, 0x2D	; 45
    51a4:	9d eb       	ldi	r25, 0xBD	; 189
    51a6:	9f 93       	push	r25
    51a8:	8f 93       	push	r24
    51aa:	ce 01       	movw	r24, r28
    51ac:	01 96       	adiw	r24, 0x01	; 1
    51ae:	7c 01       	movw	r14, r24
    51b0:	9f 93       	push	r25
    51b2:	8f 93       	push	r24
    51b4:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
		printError(ERR_MTR, strbuf);
    51b8:	b7 01       	movw	r22, r14
    51ba:	86 e3       	ldi	r24, 0x36	; 54
    51bc:	91 e0       	ldi	r25, 0x01	; 1
    51be:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(NOERROR);
    51c2:	0f 90       	pop	r0
    51c4:	0f 90       	pop	r0
    51c6:	0f 90       	pop	r0
    51c8:	0f 90       	pop	r0
    51ca:	0f 90       	pop	r0
    51cc:	0f 90       	pop	r0
    51ce:	b8 c0       	rjmp	.+368    	; 0x5340 <unstick_MOTOR_LIMIT+0x1f0>
	}

	stuck = YES;
	get_MOTOR_ENCODER(mtraddr, &encodervalue);
    51d0:	be 01       	movw	r22, r28
    51d2:	6f 5a       	subi	r22, 0xAF	; 175
    51d4:	7f 4f       	sbci	r23, 0xFF	; 255
    51d6:	81 2f       	mov	r24, r17
    51d8:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <get_MOTOR_ENCODER>

//sprintf(strbuf, "current position = %ld", encodervalue);
//printLine(strbuf);

	for (i = 0; i < 3; i++) {
    51dc:	00 e0       	ldi	r16, 0x00	; 0
    51de:	7a c0       	rjmp	.+244    	; 0x52d4 <unstick_MOTOR_LIMIT+0x184>

		// Try the opposite direction first
		if (direction == MTRDIRNEGATIVE) {
    51e0:	b1 10       	cpse	r11, r1
    51e2:	0d c0       	rjmp	.+26     	; 0x51fe <unstick_MOTOR_LIMIT+0xae>
			newPosition = encodervalue + 2 * ENC_COUNTS_PER_MICRON;
    51e4:	65 96       	adiw	r28, 0x15	; 21
    51e6:	cc ac       	ldd	r12, Y+60	; 0x3c
    51e8:	dd ac       	ldd	r13, Y+61	; 0x3d
    51ea:	ee ac       	ldd	r14, Y+62	; 0x3e
    51ec:	ff ac       	ldd	r15, Y+63	; 0x3f
    51ee:	65 97       	sbiw	r28, 0x15	; 21
    51f0:	96 e3       	ldi	r25, 0x36	; 54
    51f2:	c9 0e       	add	r12, r25
    51f4:	92 e0       	ldi	r25, 0x02	; 2
    51f6:	d9 1e       	adc	r13, r25
    51f8:	e1 1c       	adc	r14, r1
    51fa:	f1 1c       	adc	r15, r1
    51fc:	0c c0       	rjmp	.+24     	; 0x5216 <unstick_MOTOR_LIMIT+0xc6>
		} else {
			newPosition = encodervalue - 2 * ENC_COUNTS_PER_MICRON;			
    51fe:	65 96       	adiw	r28, 0x15	; 21
    5200:	cc ac       	ldd	r12, Y+60	; 0x3c
    5202:	dd ac       	ldd	r13, Y+61	; 0x3d
    5204:	ee ac       	ldd	r14, Y+62	; 0x3e
    5206:	ff ac       	ldd	r15, Y+63	; 0x3f
    5208:	65 97       	sbiw	r28, 0x15	; 21
    520a:	26 e3       	ldi	r18, 0x36	; 54
    520c:	c2 1a       	sub	r12, r18
    520e:	22 e0       	ldi	r18, 0x02	; 2
    5210:	d2 0a       	sbc	r13, r18
    5212:	e1 08       	sbc	r14, r1
    5214:	f1 08       	sbc	r15, r1
		}

//sprintf(strbuf, "moving to %ld", newPosition);
//printLine(strbuf);

		move_MOTOR(mtraddr, newPosition);
    5216:	b7 01       	movw	r22, r14
    5218:	a6 01       	movw	r20, r12
    521a:	81 2f       	mov	r24, r17
    521c:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <move_MOTOR>
		get_MOTOR_SPEED(mtraddr, &encoderspeed);
    5220:	be 01       	movw	r22, r28
    5222:	6b 5a       	subi	r22, 0xAB	; 171
    5224:	7f 4f       	sbci	r23, 0xFF	; 255
    5226:	81 2f       	mov	r24, r17
    5228:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <get_MOTOR_SPEED>
		while (encoderspeed) {
    522c:	06 c0       	rjmp	.+12     	; 0x523a <unstick_MOTOR_LIMIT+0xea>
			get_MOTOR_SPEED(mtraddr, &encoderspeed);
    522e:	be 01       	movw	r22, r28
    5230:	6b 5a       	subi	r22, 0xAB	; 171
    5232:	7f 4f       	sbci	r23, 0xFF	; 255
    5234:	81 2f       	mov	r24, r17
    5236:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <get_MOTOR_SPEED>
//sprintf(strbuf, "moving to %ld", newPosition);
//printLine(strbuf);

		move_MOTOR(mtraddr, newPosition);
		get_MOTOR_SPEED(mtraddr, &encoderspeed);
		while (encoderspeed) {
    523a:	69 96       	adiw	r28, 0x19	; 25
    523c:	8c ad       	ldd	r24, Y+60	; 0x3c
    523e:	9d ad       	ldd	r25, Y+61	; 0x3d
    5240:	ae ad       	ldd	r26, Y+62	; 0x3e
    5242:	bf ad       	ldd	r27, Y+63	; 0x3f
    5244:	69 97       	sbiw	r28, 0x19	; 25
    5246:	89 2b       	or	r24, r25
    5248:	8a 2b       	or	r24, r26
    524a:	8b 2b       	or	r24, r27
    524c:	81 f7       	brne	.-32     	; 0x522e <unstick_MOTOR_LIMIT+0xde>
//printLine(strbuf);

		}
//		_delay_ms(3000);

		if (get_MOTOR_LIMIT(mtraddr) == NO) {
    524e:	81 2f       	mov	r24, r17
    5250:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <get_MOTOR_LIMIT>
    5254:	88 23       	and	r24, r24
    5256:	09 f4       	brne	.+2      	; 0x525a <unstick_MOTOR_LIMIT+0x10a>
    5258:	42 c0       	rjmp	.+132    	; 0x52de <unstick_MOTOR_LIMIT+0x18e>
			stuck = NO;
			break;
		}

		// Try the same direction
		if (direction == MTRDIRNEGATIVE) {
    525a:	b1 10       	cpse	r11, r1
    525c:	0d c0       	rjmp	.+26     	; 0x5278 <unstick_MOTOR_LIMIT+0x128>
			newPosition = encodervalue - 2 * ENC_COUNTS_PER_MICRON;
    525e:	65 96       	adiw	r28, 0x15	; 21
    5260:	cc ac       	ldd	r12, Y+60	; 0x3c
    5262:	dd ac       	ldd	r13, Y+61	; 0x3d
    5264:	ee ac       	ldd	r14, Y+62	; 0x3e
    5266:	ff ac       	ldd	r15, Y+63	; 0x3f
    5268:	65 97       	sbiw	r28, 0x15	; 21
    526a:	86 e3       	ldi	r24, 0x36	; 54
    526c:	c8 1a       	sub	r12, r24
    526e:	82 e0       	ldi	r24, 0x02	; 2
    5270:	d8 0a       	sbc	r13, r24
    5272:	e1 08       	sbc	r14, r1
    5274:	f1 08       	sbc	r15, r1
    5276:	0c c0       	rjmp	.+24     	; 0x5290 <unstick_MOTOR_LIMIT+0x140>
		} else {
			newPosition = encodervalue + 2 * ENC_COUNTS_PER_MICRON;
    5278:	65 96       	adiw	r28, 0x15	; 21
    527a:	cc ac       	ldd	r12, Y+60	; 0x3c
    527c:	dd ac       	ldd	r13, Y+61	; 0x3d
    527e:	ee ac       	ldd	r14, Y+62	; 0x3e
    5280:	ff ac       	ldd	r15, Y+63	; 0x3f
    5282:	65 97       	sbiw	r28, 0x15	; 21
    5284:	96 e3       	ldi	r25, 0x36	; 54
    5286:	c9 0e       	add	r12, r25
    5288:	92 e0       	ldi	r25, 0x02	; 2
    528a:	d9 1e       	adc	r13, r25
    528c:	e1 1c       	adc	r14, r1
    528e:	f1 1c       	adc	r15, r1
		}
		move_MOTOR(mtraddr, newPosition);
    5290:	b7 01       	movw	r22, r14
    5292:	a6 01       	movw	r20, r12
    5294:	81 2f       	mov	r24, r17
    5296:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <move_MOTOR>
		get_MOTOR_SPEED(mtraddr, &encoderspeed);
    529a:	be 01       	movw	r22, r28
    529c:	6b 5a       	subi	r22, 0xAB	; 171
    529e:	7f 4f       	sbci	r23, 0xFF	; 255
    52a0:	81 2f       	mov	r24, r17
    52a2:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <get_MOTOR_SPEED>
		while (encoderspeed) {
    52a6:	06 c0       	rjmp	.+12     	; 0x52b4 <unstick_MOTOR_LIMIT+0x164>
			get_MOTOR_SPEED(mtraddr, &encoderspeed);
    52a8:	be 01       	movw	r22, r28
    52aa:	6b 5a       	subi	r22, 0xAB	; 171
    52ac:	7f 4f       	sbci	r23, 0xFF	; 255
    52ae:	81 2f       	mov	r24, r17
    52b0:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <get_MOTOR_SPEED>
		} else {
			newPosition = encodervalue + 2 * ENC_COUNTS_PER_MICRON;
		}
		move_MOTOR(mtraddr, newPosition);
		get_MOTOR_SPEED(mtraddr, &encoderspeed);
		while (encoderspeed) {
    52b4:	69 96       	adiw	r28, 0x19	; 25
    52b6:	8c ad       	ldd	r24, Y+60	; 0x3c
    52b8:	9d ad       	ldd	r25, Y+61	; 0x3d
    52ba:	ae ad       	ldd	r26, Y+62	; 0x3e
    52bc:	bf ad       	ldd	r27, Y+63	; 0x3f
    52be:	69 97       	sbiw	r28, 0x19	; 25
    52c0:	89 2b       	or	r24, r25
    52c2:	8a 2b       	or	r24, r26
    52c4:	8b 2b       	or	r24, r27
    52c6:	81 f7       	brne	.-32     	; 0x52a8 <unstick_MOTOR_LIMIT+0x158>
//sprintf(strbuf, "encoderspeed = %ld", encoderspeed);
//printLine(strbuf);
		}
//		_delay_ms(2000);

		if (get_MOTOR_LIMIT(mtraddr) == NO) {
    52c8:	81 2f       	mov	r24, r17
    52ca:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <get_MOTOR_LIMIT>
    52ce:	88 23       	and	r24, r24
    52d0:	41 f0       	breq	.+16     	; 0x52e2 <unstick_MOTOR_LIMIT+0x192>
	get_MOTOR_ENCODER(mtraddr, &encodervalue);

//sprintf(strbuf, "current position = %ld", encodervalue);
//printLine(strbuf);

	for (i = 0; i < 3; i++) {
    52d2:	0f 5f       	subi	r16, 0xFF	; 255
    52d4:	03 30       	cpi	r16, 0x03	; 3
    52d6:	08 f4       	brcc	.+2      	; 0x52da <unstick_MOTOR_LIMIT+0x18a>
    52d8:	83 cf       	rjmp	.-250    	; 0x51e0 <unstick_MOTOR_LIMIT+0x90>
		sprintf(strbuf, "motor %c not stuck", mtraddr - 31);
		printError(ERR_MTR, strbuf);
		return(NOERROR);
	}

	stuck = YES;
    52da:	81 e0       	ldi	r24, 0x01	; 1
    52dc:	03 c0       	rjmp	.+6      	; 0x52e4 <unstick_MOTOR_LIMIT+0x194>
//		_delay_ms(3000);

		if (get_MOTOR_LIMIT(mtraddr) == NO) {
//sprintf(strbuf, "unstuck at i=%d, opposite direction", i);
//printLine(strbuf);
			stuck = NO;
    52de:	80 e0       	ldi	r24, 0x00	; 0
    52e0:	01 c0       	rjmp	.+2      	; 0x52e4 <unstick_MOTOR_LIMIT+0x194>
//		_delay_ms(2000);

		if (get_MOTOR_LIMIT(mtraddr) == NO) {
//sprintf(strbuf, "unstuck at i=%d, same direction", i);
//printLine(strbuf);
			stuck = NO;
    52e2:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
	if (stuck == YES) {		// Tried 3 times and failed
    52e4:	81 30       	cpi	r24, 0x01	; 1
    52e6:	59 f1       	breq	.+86     	; 0x533e <unstick_MOTOR_LIMIT+0x1ee>
//printLine(strbuf);
		return(ERROR);
	}

	// Move 200 um away
	get_MOTOR_ENCODER(mtraddr, &encodervalue);
    52e8:	be 01       	movw	r22, r28
    52ea:	6f 5a       	subi	r22, 0xAF	; 175
    52ec:	7f 4f       	sbci	r23, 0xFF	; 255
    52ee:	81 2f       	mov	r24, r17
    52f0:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <get_MOTOR_ENCODER>
	if (direction == MTRDIRNEGATIVE) {
    52f4:	b1 10       	cpse	r11, r1
    52f6:	0d c0       	rjmp	.+26     	; 0x5312 <unstick_MOTOR_LIMIT+0x1c2>
		newPosition = encodervalue + 200L * ENC_COUNTS_PER_MICRON;
    52f8:	65 96       	adiw	r28, 0x15	; 21
    52fa:	cc ac       	ldd	r12, Y+60	; 0x3c
    52fc:	dd ac       	ldd	r13, Y+61	; 0x3d
    52fe:	ee ac       	ldd	r14, Y+62	; 0x3e
    5300:	ff ac       	ldd	r15, Y+63	; 0x3f
    5302:	65 97       	sbiw	r28, 0x15	; 21
    5304:	28 e1       	ldi	r18, 0x18	; 24
    5306:	c2 0e       	add	r12, r18
    5308:	2d ed       	ldi	r18, 0xDD	; 221
    530a:	d2 1e       	adc	r13, r18
    530c:	e1 1c       	adc	r14, r1
    530e:	f1 1c       	adc	r15, r1
    5310:	0f c0       	rjmp	.+30     	; 0x5330 <unstick_MOTOR_LIMIT+0x1e0>
	} else if (direction == MTRDIRPOSITIVE) {
    5312:	81 e0       	ldi	r24, 0x01	; 1
    5314:	b8 12       	cpse	r11, r24
    5316:	0c c0       	rjmp	.+24     	; 0x5330 <unstick_MOTOR_LIMIT+0x1e0>
		newPosition = encodervalue - 200L * ENC_COUNTS_PER_MICRON;
    5318:	65 96       	adiw	r28, 0x15	; 21
    531a:	cc ac       	ldd	r12, Y+60	; 0x3c
    531c:	dd ac       	ldd	r13, Y+61	; 0x3d
    531e:	ee ac       	ldd	r14, Y+62	; 0x3e
    5320:	ff ac       	ldd	r15, Y+63	; 0x3f
    5322:	65 97       	sbiw	r28, 0x15	; 21
    5324:	98 e1       	ldi	r25, 0x18	; 24
    5326:	c9 1a       	sub	r12, r25
    5328:	9d ed       	ldi	r25, 0xDD	; 221
    532a:	d9 0a       	sbc	r13, r25
    532c:	e1 08       	sbc	r14, r1
    532e:	f1 08       	sbc	r15, r1
	} 
//sprintf(strbuf, "encodervalue = %ld, newPosition = %ld", encodervalue, newPosition);
//printLine(strbuf);
	move_MOTOR(mtraddr, newPosition);
    5330:	b7 01       	movw	r22, r14
    5332:	a6 01       	movw	r20, r12
    5334:	81 2f       	mov	r24, r17
    5336:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <move_MOTOR>
	return(NOERROR);
    533a:	00 e0       	ldi	r16, 0x00	; 0
    533c:	01 c0       	rjmp	.+2      	; 0x5340 <unstick_MOTOR_LIMIT+0x1f0>
		}
	}
	if (stuck == YES) {		// Tried 3 times and failed
//sprintf(strbuf, "tried 3 times and failed");
//printLine(strbuf);
		return(ERROR);
    533e:	03 e6       	ldi	r16, 0x63	; 99
//sprintf(strbuf, "encodervalue = %ld, newPosition = %ld", encodervalue, newPosition);
//printLine(strbuf);
	move_MOTOR(mtraddr, newPosition);
	return(NOERROR);

}
    5340:	80 2f       	mov	r24, r16
    5342:	c8 5a       	subi	r28, 0xA8	; 168
    5344:	df 4f       	sbci	r29, 0xFF	; 255
    5346:	cd bf       	out	0x3d, r28	; 61
    5348:	de bf       	out	0x3e, r29	; 62
    534a:	df 91       	pop	r29
    534c:	cf 91       	pop	r28
    534e:	1f 91       	pop	r17
    5350:	0f 91       	pop	r16
    5352:	ff 90       	pop	r15
    5354:	ef 90       	pop	r14
    5356:	df 90       	pop	r13
    5358:	cf 90       	pop	r12
    535a:	bf 90       	pop	r11
    535c:	08 95       	ret

0000535e <zero_MOTOR_CMD>:

	Outputs:
		None
------------------------------------------------------------------------------*/
void zero_MOTOR_CMD(uint8_t cstack)
{
    535e:	0f 93       	push	r16
    5360:	1f 93       	push	r17
    5362:	cf 93       	push	r28
    5364:	df 93       	push	r29
    5366:	cd b7       	in	r28, 0x3d	; 61
    5368:	de b7       	in	r29, 0x3e	; 62
    536a:	c5 5a       	subi	r28, 0xA5	; 165
    536c:	d1 09       	sbc	r29, r1
    536e:	cd bf       	out	0x3d, r28	; 61
    5370:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	const char fmt0[] = "zero_MOTOR_CMD: failed put_MOTOR_ENCODER on %c";
    5372:	9f e2       	ldi	r25, 0x2F	; 47
    5374:	e0 e4       	ldi	r30, 0x40	; 64
    5376:	fd eb       	ldi	r31, 0xBD	; 189
    5378:	de 01       	movw	r26, r28
    537a:	af 5a       	subi	r26, 0xAF	; 175
    537c:	bf 4f       	sbci	r27, 0xFF	; 255
    537e:	01 90       	ld	r0, Z+
    5380:	0d 92       	st	X+, r0
    5382:	9a 95       	dec	r25
    5384:	e1 f7       	brne	.-8      	; 0x537e <zero_MOTOR_CMD+0x20>
	const char fmt1[] = "zero_MOTOR_CMD: not a motor name (%c)";
    5386:	96 e2       	ldi	r25, 0x26	; 38
    5388:	ef e6       	ldi	r30, 0x6F	; 111
    538a:	fd eb       	ldi	r31, 0xBD	; 189
    538c:	de 01       	movw	r26, r28
    538e:	a0 58       	subi	r26, 0x80	; 128
    5390:	bf 4f       	sbci	r27, 0xFF	; 255
    5392:	01 90       	ld	r0, Z+
    5394:	0d 92       	st	X+, r0
    5396:	9a 95       	dec	r25
    5398:	e1 f7       	brne	.-8      	; 0x5392 <zero_MOTOR_CMD+0x34>
	uint8_t motor, mtraddr, retval;

	motor = pcmd[cstack].cobject;	// The char a, b, or c
    539a:	24 e3       	ldi	r18, 0x34	; 52
    539c:	82 9f       	mul	r24, r18
    539e:	c0 01       	movw	r24, r0
    53a0:	11 24       	eor	r1, r1
    53a2:	fc 01       	movw	r30, r24
    53a4:	e1 5f       	subi	r30, 0xF1	; 241
    53a6:	f7 4d       	sbci	r31, 0xD7	; 215
    53a8:	11 81       	ldd	r17, Z+1	; 0x01

	switch (motor) {
    53aa:	8f e9       	ldi	r24, 0x9F	; 159
    53ac:	81 0f       	add	r24, r17
    53ae:	83 30       	cpi	r24, 0x03	; 3
    53b0:	18 f5       	brcc	.+70     	; 0x53f8 <zero_MOTOR_CMD+0x9a>
		case 'a':
		case 'b':
		case 'c':
			mtraddr = motor + 31;
			retval = put_MOTOR_ENCODER(mtraddr, 0L);
    53b2:	40 e0       	ldi	r20, 0x00	; 0
    53b4:	50 e0       	ldi	r21, 0x00	; 0
    53b6:	ba 01       	movw	r22, r20
    53b8:	8f e1       	ldi	r24, 0x1F	; 31
    53ba:	81 0f       	add	r24, r17
    53bc:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <put_MOTOR_ENCODER>
			if (retval == ERROR) {
    53c0:	83 36       	cpi	r24, 0x63	; 99
    53c2:	99 f5       	brne	.+102    	; 0x542a <zero_MOTOR_CMD+0xcc>
				sprintf(strbuf, fmt0, motor);
    53c4:	1f 92       	push	r1
    53c6:	1f 93       	push	r17
    53c8:	ce 01       	movw	r24, r28
    53ca:	8f 5a       	subi	r24, 0xAF	; 175
    53cc:	9f 4f       	sbci	r25, 0xFF	; 255
    53ce:	9f 93       	push	r25
    53d0:	8f 93       	push	r24
    53d2:	8e 01       	movw	r16, r28
    53d4:	0f 5f       	subi	r16, 0xFF	; 255
    53d6:	1f 4f       	sbci	r17, 0xFF	; 255
    53d8:	1f 93       	push	r17
    53da:	0f 93       	push	r16
    53dc:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
				printError(ERR_ZERMTR, strbuf);
    53e0:	b8 01       	movw	r22, r16
    53e2:	87 e3       	ldi	r24, 0x37	; 55
    53e4:	91 e0       	ldi	r25, 0x01	; 1
    53e6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return;
    53ea:	0f 90       	pop	r0
    53ec:	0f 90       	pop	r0
    53ee:	0f 90       	pop	r0
    53f0:	0f 90       	pop	r0
    53f2:	0f 90       	pop	r0
    53f4:	0f 90       	pop	r0
    53f6:	19 c0       	rjmp	.+50     	; 0x542a <zero_MOTOR_CMD+0xcc>
			}
			break;

		default:
			sprintf(strbuf, fmt1, motor);
    53f8:	1f 92       	push	r1
    53fa:	1f 93       	push	r17
    53fc:	ce 01       	movw	r24, r28
    53fe:	80 58       	subi	r24, 0x80	; 128
    5400:	9f 4f       	sbci	r25, 0xFF	; 255
    5402:	9f 93       	push	r25
    5404:	8f 93       	push	r24
    5406:	8e 01       	movw	r16, r28
    5408:	0f 5f       	subi	r16, 0xFF	; 255
    540a:	1f 4f       	sbci	r17, 0xFF	; 255
    540c:	1f 93       	push	r17
    540e:	0f 93       	push	r16
    5410:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			printError(ERR_ZERMTR, strbuf);
    5414:	b8 01       	movw	r22, r16
    5416:	87 e3       	ldi	r24, 0x37	; 55
    5418:	91 e0       	ldi	r25, 0x01	; 1
    541a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			break;
    541e:	0f 90       	pop	r0
    5420:	0f 90       	pop	r0
    5422:	0f 90       	pop	r0
    5424:	0f 90       	pop	r0
    5426:	0f 90       	pop	r0
    5428:	0f 90       	pop	r0
		
	}
    542a:	cb 55       	subi	r28, 0x5B	; 91
    542c:	df 4f       	sbci	r29, 0xFF	; 255
    542e:	cd bf       	out	0x3d, r28	; 61
    5430:	de bf       	out	0x3e, r29	; 62
    5432:	df 91       	pop	r29
    5434:	cf 91       	pop	r28
    5436:	1f 91       	pop	r17
    5438:	0f 91       	pop	r16
    543a:	08 95       	ret

0000543c <set>:
	Returns:
		ERROR if an invalid object was requested.
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    543c:	ef 92       	push	r14
    543e:	ff 92       	push	r15
    5440:	0f 93       	push	r16
    5442:	1f 93       	push	r17
    5444:	cf 93       	push	r28
    5446:	df 93       	push	r29
    5448:	cd b7       	in	r28, 0x3d	; 61
    544a:	de b7       	in	r29, 0x3e	; 62
    544c:	c8 5f       	subi	r28, 0xF8	; 248
    544e:	d1 09       	sbc	r29, r1
    5450:	cd bf       	out	0x3d, r28	; 61
    5452:	de bf       	out	0x3e, r29	; 62
	char object;
	uint8_t i, mtraddr;
//	int32_t newEncoderValue;
	PID motorPID;
//	const char fmt0[] = "set: put_MOTOR_ENCODER error on %c";
	const char fmt1[] = "set: bad time format";
    5454:	95 e1       	ldi	r25, 0x15	; 21
    5456:	e5 e9       	ldi	r30, 0x95	; 149
    5458:	fd eb       	ldi	r31, 0xBD	; 189
    545a:	de 01       	movw	r26, r28
    545c:	af 58       	subi	r26, 0x8F	; 143
    545e:	bf 4f       	sbci	r27, 0xFF	; 255
    5460:	01 90       	ld	r0, Z+
    5462:	0d 92       	st	X+, r0
    5464:	9a 95       	dec	r25
    5466:	e1 f7       	brne	.-8      	; 0x5460 <set+0x24>
	const char fmt2[] = "set: put_time error";
    5468:	94 e1       	ldi	r25, 0x14	; 20
    546a:	ea ea       	ldi	r30, 0xAA	; 170
    546c:	fd eb       	ldi	r31, 0xBD	; 189
    546e:	de 01       	movw	r26, r28
    5470:	aa 57       	subi	r26, 0x7A	; 122
    5472:	bf 4f       	sbci	r27, 0xFF	; 255
    5474:	01 90       	ld	r0, Z+
    5476:	0d 92       	st	X+, r0
    5478:	9a 95       	dec	r25
    547a:	e1 f7       	brne	.-8      	; 0x5474 <set+0x38>
	const char fmt3[] = "set: write_FRAM error";
    547c:	96 e1       	ldi	r25, 0x16	; 22
    547e:	ee eb       	ldi	r30, 0xBE	; 190
    5480:	fd eb       	ldi	r31, 0xBD	; 189
    5482:	de 01       	movw	r26, r28
    5484:	a6 56       	subi	r26, 0x66	; 102
    5486:	bf 4f       	sbci	r27, 0xFF	; 255
    5488:	01 90       	ld	r0, Z+
    548a:	0d 92       	st	X+, r0
    548c:	9a 95       	dec	r25
    548e:	e1 f7       	brne	.-8      	; 0x5488 <set+0x4c>
	const char fmt4[] = "set: what?";
    5490:	9b e0       	ldi	r25, 0x0B	; 11
    5492:	e4 ed       	ldi	r30, 0xD4	; 212
    5494:	fd eb       	ldi	r31, 0xBD	; 189
    5496:	de 01       	movw	r26, r28
    5498:	a0 55       	subi	r26, 0x50	; 80
    549a:	bf 4f       	sbci	r27, 0xFF	; 255
    549c:	01 90       	ld	r0, Z+
    549e:	0d 92       	st	X+, r0
    54a0:	9a 95       	dec	r25
    54a2:	e1 f7       	brne	.-8      	; 0x549c <set+0x60>
//	const char fmt5[] = "set: encoder value out of range %ld";
	const char fmt6[] = "set: get_MOTOR_PID error on %c";
    54a4:	9f e1       	ldi	r25, 0x1F	; 31
    54a6:	ef ed       	ldi	r30, 0xDF	; 223
    54a8:	fd eb       	ldi	r31, 0xBD	; 189
    54aa:	de 01       	movw	r26, r28
    54ac:	a5 54       	subi	r26, 0x45	; 69
    54ae:	bf 4f       	sbci	r27, 0xFF	; 255
    54b0:	01 90       	ld	r0, Z+
    54b2:	0d 92       	st	X+, r0
    54b4:	9a 95       	dec	r25
    54b6:	e1 f7       	brne	.-8      	; 0x54b0 <set+0x74>
	const char fmt7[] = "set: put_MOTOR_PID error on %c";
    54b8:	9f e1       	ldi	r25, 0x1F	; 31
    54ba:	ee ef       	ldi	r30, 0xFE	; 254
    54bc:	fd eb       	ldi	r31, 0xBD	; 189
    54be:	de 01       	movw	r26, r28
    54c0:	a6 52       	subi	r26, 0x26	; 38
    54c2:	bf 4f       	sbci	r27, 0xFF	; 255
    54c4:	01 90       	ld	r0, Z+
    54c6:	0d 92       	st	X+, r0
    54c8:	9a 95       	dec	r25
    54ca:	e1 f7       	brne	.-8      	; 0x54c4 <set+0x88>

	object = pcmd[cstack].cobject;
    54cc:	90 e0       	ldi	r25, 0x00	; 0
    54ce:	24 e3       	ldi	r18, 0x34	; 52
    54d0:	28 9f       	mul	r18, r24
    54d2:	f0 01       	movw	r30, r0
    54d4:	29 9f       	mul	r18, r25
    54d6:	f0 0d       	add	r31, r0
    54d8:	11 24       	eor	r1, r1
    54da:	e1 5f       	subi	r30, 0xF1	; 241
    54dc:	f7 4d       	sbci	r31, 0xD7	; 215
    54de:	21 81       	ldd	r18, Z+1	; 0x01
	switch(object) {
    54e0:	23 37       	cpi	r18, 0x73	; 115
    54e2:	09 f4       	brne	.+2      	; 0x54e6 <set+0xaa>
    54e4:	64 c1       	rjmp	.+712    	; 0x57ae <set+0x372>
    54e6:	38 f4       	brcc	.+14     	; 0x54f6 <set+0xba>
    54e8:	2c 34       	cpi	r18, 0x4C	; 76
    54ea:	09 f4       	brne	.+2      	; 0x54ee <set+0xb2>
    54ec:	e5 c0       	rjmp	.+458    	; 0x56b8 <set+0x27c>
    54ee:	2c 36       	cpi	r18, 0x6C	; 108
    54f0:	09 f4       	brne	.+2      	; 0x54f4 <set+0xb8>
    54f2:	5d c1       	rjmp	.+698    	; 0x57ae <set+0x372>
    54f4:	62 c1       	rjmp	.+708    	; 0x57ba <set+0x37e>
    54f6:	24 37       	cpi	r18, 0x74	; 116
    54f8:	21 f0       	breq	.+8      	; 0x5502 <set+0xc6>
    54fa:	25 37       	cpi	r18, 0x75	; 117
    54fc:	09 f4       	brne	.+2      	; 0x5500 <set+0xc4>
    54fe:	dc c0       	rjmp	.+440    	; 0x56b8 <set+0x27c>
    5500:	5c c1       	rjmp	.+696    	; 0x57ba <set+0x37e>
			}
			break;
*/

		case 't':		// Time
			if (strlen(pcmd[cstack].cvalue) != 19) {
    5502:	44 e3       	ldi	r20, 0x34	; 52
    5504:	48 9f       	mul	r20, r24
    5506:	90 01       	movw	r18, r0
    5508:	49 9f       	mul	r20, r25
    550a:	30 0d       	add	r19, r0
    550c:	11 24       	eor	r1, r1
    550e:	c9 01       	movw	r24, r18
    5510:	8f 5e       	subi	r24, 0xEF	; 239
    5512:	97 4d       	sbci	r25, 0xD7	; 215
    5514:	7c 01       	movw	r14, r24
    5516:	fc 01       	movw	r30, r24
    5518:	01 90       	ld	r0, Z+
    551a:	00 20       	and	r0, r0
    551c:	e9 f7       	brne	.-6      	; 0x5518 <set+0xdc>
    551e:	31 97       	sbiw	r30, 0x01	; 1
    5520:	e8 1b       	sub	r30, r24
    5522:	f9 0b       	sbc	r31, r25
    5524:	73 97       	sbiw	r30, 0x13	; 19
    5526:	b9 f0       	breq	.+46     	; 0x5556 <set+0x11a>
				sprintf(strbuf, fmt1);
    5528:	ce 01       	movw	r24, r28
    552a:	8f 58       	subi	r24, 0x8F	; 143
    552c:	9f 4f       	sbci	r25, 0xFF	; 255
    552e:	9f 93       	push	r25
    5530:	8f 93       	push	r24
    5532:	8e 01       	movw	r16, r28
    5534:	0f 5f       	subi	r16, 0xFF	; 255
    5536:	1f 4f       	sbci	r17, 0xFF	; 255
    5538:	1f 93       	push	r17
    553a:	0f 93       	push	r16
    553c:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
				printError(ERR_SETTIME, strbuf);
    5540:	b8 01       	movw	r22, r16
    5542:	8a e5       	ldi	r24, 0x5A	; 90
    5544:	92 e0       	ldi	r25, 0x02	; 2
    5546:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    554a:	0f 90       	pop	r0
    554c:	0f 90       	pop	r0
    554e:	0f 90       	pop	r0
    5550:	0f 90       	pop	r0
    5552:	13 e6       	ldi	r17, 0x63	; 99
    5554:	4a c1       	rjmp	.+660    	; 0x57ea <set+0x3ae>
			}
			if (put_time(pcmd[cstack].cvalue) == ERROR) {
    5556:	0e 94 fe 07 	call	0xffc	; 0xffc <put_time>
    555a:	18 2f       	mov	r17, r24
    555c:	83 36       	cpi	r24, 0x63	; 99
    555e:	b1 f4       	brne	.+44     	; 0x558c <set+0x150>
				sprintf(strbuf, fmt2);
    5560:	ce 01       	movw	r24, r28
    5562:	8a 57       	subi	r24, 0x7A	; 122
    5564:	9f 4f       	sbci	r25, 0xFF	; 255
    5566:	9f 93       	push	r25
    5568:	8f 93       	push	r24
    556a:	85 58       	subi	r24, 0x85	; 133
    556c:	91 09       	sbc	r25, r1
    556e:	7c 01       	movw	r14, r24
    5570:	9f 93       	push	r25
    5572:	8f 93       	push	r24
    5574:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
				printError(ERR_ISO, strbuf);
    5578:	b7 01       	movw	r22, r14
    557a:	8b e5       	ldi	r24, 0x5B	; 91
    557c:	92 e0       	ldi	r25, 0x02	; 2
    557e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    5582:	0f 90       	pop	r0
    5584:	0f 90       	pop	r0
    5586:	0f 90       	pop	r0
    5588:	0f 90       	pop	r0
    558a:	2f c1       	rjmp	.+606    	; 0x57ea <set+0x3ae>
			}
			if (write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20) == ERROR) {
    558c:	24 e1       	ldi	r18, 0x14	; 20
    558e:	a7 01       	movw	r20, r14
    5590:	60 e0       	ldi	r22, 0x00	; 0
    5592:	70 e0       	ldi	r23, 0x00	; 0
    5594:	80 e5       	ldi	r24, 0x50	; 80
    5596:	0e 94 33 09 	call	0x1266	; 0x1266 <write_FRAM>
    559a:	18 2f       	mov	r17, r24
    559c:	83 36       	cpi	r24, 0x63	; 99
    559e:	09 f0       	breq	.+2      	; 0x55a2 <set+0x166>
    55a0:	23 c1       	rjmp	.+582    	; 0x57e8 <set+0x3ac>
				sprintf(strbuf, fmt3);
    55a2:	ce 01       	movw	r24, r28
    55a4:	86 56       	subi	r24, 0x66	; 102
    55a6:	9f 4f       	sbci	r25, 0xFF	; 255
    55a8:	9f 93       	push	r25
    55aa:	8f 93       	push	r24
    55ac:	89 59       	subi	r24, 0x99	; 153
    55ae:	91 09       	sbc	r25, r1
    55b0:	7c 01       	movw	r14, r24
    55b2:	9f 93       	push	r25
    55b4:	8f 93       	push	r24
    55b6:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
				printError(ERR_ISO, strbuf);
    55ba:	b7 01       	movw	r22, r14
    55bc:	8b e5       	ldi	r24, 0x5B	; 91
    55be:	92 e0       	ldi	r25, 0x02	; 2
    55c0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    55c4:	0f 90       	pop	r0
    55c6:	0f 90       	pop	r0
    55c8:	0f 90       	pop	r0
    55ca:	0f 90       	pop	r0
    55cc:	0e c1       	rjmp	.+540    	; 0x57ea <set+0x3ae>
			break;

		case 'u':		// Unsafe motor encoder limits
		case 'L':
			for (i = 0; i < NMOTORS; i++) {
				mtraddr = i + MOTOR_A;
    55ce:	68 94       	set
    55d0:	ff 24       	eor	r15, r15
    55d2:	f7 f8       	bld	r15, 7
    55d4:	f0 0e       	add	r15, r16
				if (get_MOTOR_PID(mtraddr, &motorPID) == ERROR) {
    55d6:	be 01       	movw	r22, r28
    55d8:	6f 5a       	subi	r22, 0xAF	; 175
    55da:	7f 4f       	sbci	r23, 0xFF	; 255
    55dc:	8f 2d       	mov	r24, r15
    55de:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <get_MOTOR_PID>
    55e2:	18 2f       	mov	r17, r24
    55e4:	83 36       	cpi	r24, 0x63	; 99
    55e6:	e9 f4       	brne	.+58     	; 0x5622 <set+0x1e6>
					sprintf(strbuf, fmt6, mtraddr - 31);
    55e8:	8f 2d       	mov	r24, r15
    55ea:	90 e0       	ldi	r25, 0x00	; 0
    55ec:	4f 97       	sbiw	r24, 0x1f	; 31
    55ee:	9f 93       	push	r25
    55f0:	8f 93       	push	r24
    55f2:	ce 01       	movw	r24, r28
    55f4:	85 54       	subi	r24, 0x45	; 69
    55f6:	9f 4f       	sbci	r25, 0xFF	; 255
    55f8:	9f 93       	push	r25
    55fa:	8f 93       	push	r24
    55fc:	8a 5b       	subi	r24, 0xBA	; 186
    55fe:	91 09       	sbc	r25, r1
    5600:	7c 01       	movw	r14, r24
    5602:	9f 93       	push	r25
    5604:	8f 93       	push	r24
    5606:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
					printError(ERR_MTR, strbuf);
    560a:	b7 01       	movw	r22, r14
    560c:	86 e3       	ldi	r24, 0x36	; 54
    560e:	91 e0       	ldi	r25, 0x01	; 1
    5610:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
					return(ERROR);
    5614:	0f 90       	pop	r0
    5616:	0f 90       	pop	r0
    5618:	0f 90       	pop	r0
    561a:	0f 90       	pop	r0
    561c:	0f 90       	pop	r0
    561e:	0f 90       	pop	r0
    5620:	e4 c0       	rjmp	.+456    	; 0x57ea <set+0x3ae>
				}
				motorPID.minPos = PID_MINPOSUNSAFE;
    5622:	80 ee       	ldi	r24, 0xE0	; 224
    5624:	9e e5       	ldi	r25, 0x5E	; 94
    5626:	a8 ef       	ldi	r26, 0xF8	; 248
    5628:	bf ef       	ldi	r27, 0xFF	; 255
    562a:	a9 96       	adiw	r28, 0x29	; 41
    562c:	8c af       	std	Y+60, r24	; 0x3c
    562e:	9d af       	std	Y+61, r25	; 0x3d
    5630:	ae af       	std	Y+62, r26	; 0x3e
    5632:	bf af       	std	Y+63, r27	; 0x3f
    5634:	a9 97       	sbiw	r28, 0x29	; 41
				motorPID.maxPos = PID_MAXPOSUNSAFE;
    5636:	80 e4       	ldi	r24, 0x40	; 64
    5638:	92 e4       	ldi	r25, 0x42	; 66
    563a:	af e0       	ldi	r26, 0x0F	; 15
    563c:	b0 e0       	ldi	r27, 0x00	; 0
    563e:	ad 96       	adiw	r28, 0x2d	; 45
    5640:	8c af       	std	Y+60, r24	; 0x3c
    5642:	9d af       	std	Y+61, r25	; 0x3d
    5644:	ae af       	std	Y+62, r26	; 0x3e
    5646:	bf af       	std	Y+63, r27	; 0x3f
    5648:	ad 97       	sbiw	r28, 0x2d	; 45
				if (put_MOTOR_PID(mtraddr, motorPID) == ERROR) {
    564a:	8d b7       	in	r24, 0x3d	; 61
    564c:	9e b7       	in	r25, 0x3e	; 62
    564e:	80 97       	sbiw	r24, 0x20	; 32
    5650:	8d bf       	out	0x3d, r24	; 61
    5652:	9e bf       	out	0x3e, r25	; 62
    5654:	ad b7       	in	r26, 0x3d	; 61
    5656:	be b7       	in	r27, 0x3e	; 62
    5658:	11 96       	adiw	r26, 0x01	; 1
    565a:	80 e2       	ldi	r24, 0x20	; 32
    565c:	fe 01       	movw	r30, r28
    565e:	ef 5a       	subi	r30, 0xAF	; 175
    5660:	ff 4f       	sbci	r31, 0xFF	; 255
    5662:	01 90       	ld	r0, Z+
    5664:	0d 92       	st	X+, r0
    5666:	8a 95       	dec	r24
    5668:	e1 f7       	brne	.-8      	; 0x5662 <set+0x226>
    566a:	8f 2d       	mov	r24, r15
    566c:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <put_MOTOR_PID>
    5670:	18 2f       	mov	r17, r24
    5672:	cd bf       	out	0x3d, r28	; 61
    5674:	de bf       	out	0x3e, r29	; 62
    5676:	13 36       	cpi	r17, 0x63	; 99
    5678:	e9 f4       	brne	.+58     	; 0x56b4 <set+0x278>
					sprintf(strbuf, fmt7, mtraddr - 31);
    567a:	8f 2d       	mov	r24, r15
    567c:	90 e0       	ldi	r25, 0x00	; 0
    567e:	4f 97       	sbiw	r24, 0x1f	; 31
    5680:	9f 93       	push	r25
    5682:	8f 93       	push	r24
    5684:	ce 01       	movw	r24, r28
    5686:	86 52       	subi	r24, 0x26	; 38
    5688:	9f 4f       	sbci	r25, 0xFF	; 255
    568a:	9f 93       	push	r25
    568c:	8f 93       	push	r24
    568e:	89 5d       	subi	r24, 0xD9	; 217
    5690:	91 09       	sbc	r25, r1
    5692:	7c 01       	movw	r14, r24
    5694:	9f 93       	push	r25
    5696:	8f 93       	push	r24
    5698:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
					printError(ERR_MTR, strbuf);
    569c:	b7 01       	movw	r22, r14
    569e:	86 e3       	ldi	r24, 0x36	; 54
    56a0:	91 e0       	ldi	r25, 0x01	; 1
    56a2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
					return(ERROR);
    56a6:	0f 90       	pop	r0
    56a8:	0f 90       	pop	r0
    56aa:	0f 90       	pop	r0
    56ac:	0f 90       	pop	r0
    56ae:	0f 90       	pop	r0
    56b0:	0f 90       	pop	r0
    56b2:	9b c0       	rjmp	.+310    	; 0x57ea <set+0x3ae>
			}
			break;

		case 'u':		// Unsafe motor encoder limits
		case 'L':
			for (i = 0; i < NMOTORS; i++) {
    56b4:	0f 5f       	subi	r16, 0xFF	; 255
    56b6:	01 c0       	rjmp	.+2      	; 0x56ba <set+0x27e>
//	const char fmt5[] = "set: encoder value out of range %ld";
	const char fmt6[] = "set: get_MOTOR_PID error on %c";
	const char fmt7[] = "set: put_MOTOR_PID error on %c";

	object = pcmd[cstack].cobject;
	switch(object) {
    56b8:	00 e0       	ldi	r16, 0x00	; 0
			}
			break;

		case 'u':		// Unsafe motor encoder limits
		case 'L':
			for (i = 0; i < NMOTORS; i++) {
    56ba:	03 30       	cpi	r16, 0x03	; 3
    56bc:	08 f4       	brcc	.+2      	; 0x56c0 <set+0x284>
    56be:	87 cf       	rjmp	.-242    	; 0x55ce <set+0x192>
			sprintf(strbuf, fmt4);
			printError(ERR_SET, strbuf);
			return(ERROR);
	}

	return(NOERROR);
    56c0:	10 e0       	ldi	r17, 0x00	; 0
    56c2:	93 c0       	rjmp	.+294    	; 0x57ea <set+0x3ae>
			break;

		case 's':		// Safe motor encoder limits
		case 'l':
			for (i = 0; i < NMOTORS; i++) {
				mtraddr = i + MOTOR_A;
    56c4:	68 94       	set
    56c6:	ff 24       	eor	r15, r15
    56c8:	f7 f8       	bld	r15, 7
    56ca:	f0 0e       	add	r15, r16
				if (get_MOTOR_PID(mtraddr, &motorPID) == ERROR) {
    56cc:	be 01       	movw	r22, r28
    56ce:	6f 5a       	subi	r22, 0xAF	; 175
    56d0:	7f 4f       	sbci	r23, 0xFF	; 255
    56d2:	8f 2d       	mov	r24, r15
    56d4:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <get_MOTOR_PID>
    56d8:	18 2f       	mov	r17, r24
    56da:	83 36       	cpi	r24, 0x63	; 99
    56dc:	e9 f4       	brne	.+58     	; 0x5718 <set+0x2dc>
					sprintf(strbuf, fmt6, mtraddr - 31);
    56de:	8f 2d       	mov	r24, r15
    56e0:	90 e0       	ldi	r25, 0x00	; 0
    56e2:	4f 97       	sbiw	r24, 0x1f	; 31
    56e4:	9f 93       	push	r25
    56e6:	8f 93       	push	r24
    56e8:	ce 01       	movw	r24, r28
    56ea:	85 54       	subi	r24, 0x45	; 69
    56ec:	9f 4f       	sbci	r25, 0xFF	; 255
    56ee:	9f 93       	push	r25
    56f0:	8f 93       	push	r24
    56f2:	8a 5b       	subi	r24, 0xBA	; 186
    56f4:	91 09       	sbc	r25, r1
    56f6:	7c 01       	movw	r14, r24
    56f8:	9f 93       	push	r25
    56fa:	8f 93       	push	r24
    56fc:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
					printError(ERR_MTR, strbuf);
    5700:	b7 01       	movw	r22, r14
    5702:	86 e3       	ldi	r24, 0x36	; 54
    5704:	91 e0       	ldi	r25, 0x01	; 1
    5706:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
					return(ERROR);
    570a:	0f 90       	pop	r0
    570c:	0f 90       	pop	r0
    570e:	0f 90       	pop	r0
    5710:	0f 90       	pop	r0
    5712:	0f 90       	pop	r0
    5714:	0f 90       	pop	r0
    5716:	69 c0       	rjmp	.+210    	; 0x57ea <set+0x3ae>
				}
				motorPID.minPos = PID_MINPOS;
    5718:	80 e8       	ldi	r24, 0x80	; 128
    571a:	98 e3       	ldi	r25, 0x38	; 56
    571c:	a1 e0       	ldi	r26, 0x01	; 1
    571e:	b0 e0       	ldi	r27, 0x00	; 0
    5720:	a9 96       	adiw	r28, 0x29	; 41
    5722:	8c af       	std	Y+60, r24	; 0x3c
    5724:	9d af       	std	Y+61, r25	; 0x3d
    5726:	ae af       	std	Y+62, r26	; 0x3e
    5728:	bf af       	std	Y+63, r27	; 0x3f
    572a:	a9 97       	sbiw	r28, 0x29	; 41
				motorPID.maxPos = PID_MAXPOS;
    572c:	80 e0       	ldi	r24, 0x00	; 0
    572e:	95 e3       	ldi	r25, 0x35	; 53
    5730:	ac e0       	ldi	r26, 0x0C	; 12
    5732:	b0 e0       	ldi	r27, 0x00	; 0
    5734:	ad 96       	adiw	r28, 0x2d	; 45
    5736:	8c af       	std	Y+60, r24	; 0x3c
    5738:	9d af       	std	Y+61, r25	; 0x3d
    573a:	ae af       	std	Y+62, r26	; 0x3e
    573c:	bf af       	std	Y+63, r27	; 0x3f
    573e:	ad 97       	sbiw	r28, 0x2d	; 45
				if (put_MOTOR_PID(mtraddr, motorPID) == ERROR) {
    5740:	8d b7       	in	r24, 0x3d	; 61
    5742:	9e b7       	in	r25, 0x3e	; 62
    5744:	80 97       	sbiw	r24, 0x20	; 32
    5746:	8d bf       	out	0x3d, r24	; 61
    5748:	9e bf       	out	0x3e, r25	; 62
    574a:	ad b7       	in	r26, 0x3d	; 61
    574c:	be b7       	in	r27, 0x3e	; 62
    574e:	11 96       	adiw	r26, 0x01	; 1
    5750:	80 e2       	ldi	r24, 0x20	; 32
    5752:	fe 01       	movw	r30, r28
    5754:	ef 5a       	subi	r30, 0xAF	; 175
    5756:	ff 4f       	sbci	r31, 0xFF	; 255
    5758:	01 90       	ld	r0, Z+
    575a:	0d 92       	st	X+, r0
    575c:	8a 95       	dec	r24
    575e:	e1 f7       	brne	.-8      	; 0x5758 <set+0x31c>
    5760:	8f 2d       	mov	r24, r15
    5762:	0e 94 ae 26 	call	0x4d5c	; 0x4d5c <put_MOTOR_PID>
    5766:	18 2f       	mov	r17, r24
    5768:	cd bf       	out	0x3d, r28	; 61
    576a:	de bf       	out	0x3e, r29	; 62
    576c:	13 36       	cpi	r17, 0x63	; 99
    576e:	e9 f4       	brne	.+58     	; 0x57aa <set+0x36e>
					sprintf(strbuf, fmt7, mtraddr - 31);
    5770:	8f 2d       	mov	r24, r15
    5772:	90 e0       	ldi	r25, 0x00	; 0
    5774:	4f 97       	sbiw	r24, 0x1f	; 31
    5776:	9f 93       	push	r25
    5778:	8f 93       	push	r24
    577a:	ce 01       	movw	r24, r28
    577c:	86 52       	subi	r24, 0x26	; 38
    577e:	9f 4f       	sbci	r25, 0xFF	; 255
    5780:	9f 93       	push	r25
    5782:	8f 93       	push	r24
    5784:	89 5d       	subi	r24, 0xD9	; 217
    5786:	91 09       	sbc	r25, r1
    5788:	7c 01       	movw	r14, r24
    578a:	9f 93       	push	r25
    578c:	8f 93       	push	r24
    578e:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
					printError(ERR_MTR, strbuf);
    5792:	b7 01       	movw	r22, r14
    5794:	86 e3       	ldi	r24, 0x36	; 54
    5796:	91 e0       	ldi	r25, 0x01	; 1
    5798:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
					return(ERROR);
    579c:	0f 90       	pop	r0
    579e:	0f 90       	pop	r0
    57a0:	0f 90       	pop	r0
    57a2:	0f 90       	pop	r0
    57a4:	0f 90       	pop	r0
    57a6:	0f 90       	pop	r0
    57a8:	20 c0       	rjmp	.+64     	; 0x57ea <set+0x3ae>
			}
			break;

		case 's':		// Safe motor encoder limits
		case 'l':
			for (i = 0; i < NMOTORS; i++) {
    57aa:	0f 5f       	subi	r16, 0xFF	; 255
    57ac:	01 c0       	rjmp	.+2      	; 0x57b0 <set+0x374>
//	const char fmt5[] = "set: encoder value out of range %ld";
	const char fmt6[] = "set: get_MOTOR_PID error on %c";
	const char fmt7[] = "set: put_MOTOR_PID error on %c";

	object = pcmd[cstack].cobject;
	switch(object) {
    57ae:	00 e0       	ldi	r16, 0x00	; 0
			}
			break;

		case 's':		// Safe motor encoder limits
		case 'l':
			for (i = 0; i < NMOTORS; i++) {
    57b0:	03 30       	cpi	r16, 0x03	; 3
    57b2:	08 f4       	brcc	.+2      	; 0x57b6 <set+0x37a>
    57b4:	87 cf       	rjmp	.-242    	; 0x56c4 <set+0x288>
			sprintf(strbuf, fmt4);
			printError(ERR_SET, strbuf);
			return(ERROR);
	}

	return(NOERROR);
    57b6:	10 e0       	ldi	r17, 0x00	; 0
    57b8:	18 c0       	rjmp	.+48     	; 0x57ea <set+0x3ae>
				}
			}
			break;

		default:
			sprintf(strbuf, fmt4);
    57ba:	ce 01       	movw	r24, r28
    57bc:	80 55       	subi	r24, 0x50	; 80
    57be:	9f 4f       	sbci	r25, 0xFF	; 255
    57c0:	9f 93       	push	r25
    57c2:	8f 93       	push	r24
    57c4:	8e 01       	movw	r16, r28
    57c6:	0f 5f       	subi	r16, 0xFF	; 255
    57c8:	1f 4f       	sbci	r17, 0xFF	; 255
    57ca:	1f 93       	push	r17
    57cc:	0f 93       	push	r16
    57ce:	0e 94 76 38 	call	0x70ec	; 0x70ec <sprintf>
			printError(ERR_SET, strbuf);
    57d2:	b8 01       	movw	r22, r16
    57d4:	89 e5       	ldi	r24, 0x59	; 89
    57d6:	92 e0       	ldi	r25, 0x02	; 2
    57d8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			return(ERROR);
    57dc:	0f 90       	pop	r0
    57de:	0f 90       	pop	r0
    57e0:	0f 90       	pop	r0
    57e2:	0f 90       	pop	r0
    57e4:	13 e6       	ldi	r17, 0x63	; 99
    57e6:	01 c0       	rjmp	.+2      	; 0x57ea <set+0x3ae>
	}

	return(NOERROR);
    57e8:	10 e0       	ldi	r17, 0x00	; 0

}
    57ea:	81 2f       	mov	r24, r17
    57ec:	c8 50       	subi	r28, 0x08	; 8
    57ee:	df 4f       	sbci	r29, 0xFF	; 255
    57f0:	cd bf       	out	0x3d, r28	; 61
    57f2:	de bf       	out	0x3e, r29	; 62
    57f4:	df 91       	pop	r29
    57f6:	cf 91       	pop	r28
    57f8:	1f 91       	pop	r17
    57fa:	0f 91       	pop	r16
    57fc:	ff 90       	pop	r15
    57fe:	ef 90       	pop	r14
    5800:	08 95       	ret

00005802 <get_temperature>:
	point for the actual devices.

	The signal is 1.5E-3 mV/K with a 1500 kOhm dropping resistor.
------------------------------------------------------------------------------*/
float get_temperature(uint8_t sensor)
{
    5802:	cf 93       	push	r28
    5804:	df 93       	push	r29
    5806:	00 d0       	rcall	.+0      	; 0x5808 <get_temperature+0x6>
    5808:	00 d0       	rcall	.+0      	; 0x580a <get_temperature+0x8>
    580a:	cd b7       	in	r28, 0x3d	; 61
    580c:	de b7       	in	r29, 0x3e	; 62

	float temperature;

	switch (sensor) {
    580e:	83 30       	cpi	r24, 0x03	; 3
    5810:	18 f0       	brcs	.+6      	; 0x5818 <get_temperature+0x16>
    5812:	83 30       	cpi	r24, 0x03	; 3
    5814:	39 f0       	breq	.+14     	; 0x5824 <get_temperature+0x22>
    5816:	0b c0       	rjmp	.+22     	; 0x582e <get_temperature+0x2c>
		case 0:
		case 1:
		case 2:
			read_AD590(sensor, &temperature);
    5818:	be 01       	movw	r22, r28
    581a:	6f 5f       	subi	r22, 0xFF	; 255
    581c:	7f 4f       	sbci	r23, 0xFF	; 255
    581e:	0e 94 48 01 	call	0x290	; 0x290 <read_AD590>
			break;
    5822:	0d c0       	rjmp	.+26     	; 0x583e <get_temperature+0x3c>

		case 3:
			read_MCP9808(&temperature);
    5824:	ce 01       	movw	r24, r28
    5826:	01 96       	adiw	r24, 0x01	; 1
    5828:	0e 94 77 0b 	call	0x16ee	; 0x16ee <read_MCP9808>
			break;
    582c:	08 c0       	rjmp	.+16     	; 0x583e <get_temperature+0x3c>

		default:
			temperature = BADFLOAT;
    582e:	80 e0       	ldi	r24, 0x00	; 0
    5830:	90 e8       	ldi	r25, 0x80	; 128
    5832:	a6 e2       	ldi	r26, 0x26	; 38
    5834:	b4 ec       	ldi	r27, 0xC4	; 196
    5836:	89 83       	std	Y+1, r24	; 0x01
    5838:	9a 83       	std	Y+2, r25	; 0x02
    583a:	ab 83       	std	Y+3, r26	; 0x03
    583c:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}

	if (temperature < -50.0) {
    583e:	69 81       	ldd	r22, Y+1	; 0x01
    5840:	7a 81       	ldd	r23, Y+2	; 0x02
    5842:	8b 81       	ldd	r24, Y+3	; 0x03
    5844:	9c 81       	ldd	r25, Y+4	; 0x04
    5846:	20 e0       	ldi	r18, 0x00	; 0
    5848:	30 e0       	ldi	r19, 0x00	; 0
    584a:	48 e4       	ldi	r20, 0x48	; 72
    584c:	52 ec       	ldi	r21, 0xC2	; 194
    584e:	0e 94 d5 30 	call	0x61aa	; 0x61aa <__cmpsf2>
    5852:	88 23       	and	r24, r24
    5854:	44 f4       	brge	.+16     	; 0x5866 <get_temperature+0x64>
		temperature = BADFLOAT;
    5856:	80 e0       	ldi	r24, 0x00	; 0
    5858:	90 e8       	ldi	r25, 0x80	; 128
    585a:	a6 e2       	ldi	r26, 0x26	; 38
    585c:	b4 ec       	ldi	r27, 0xC4	; 196
    585e:	89 83       	std	Y+1, r24	; 0x01
    5860:	9a 83       	std	Y+2, r25	; 0x02
    5862:	ab 83       	std	Y+3, r26	; 0x03
    5864:	bc 83       	std	Y+4, r27	; 0x04
	}

	return(temperature);
    5866:	69 81       	ldd	r22, Y+1	; 0x01
    5868:	7a 81       	ldd	r23, Y+2	; 0x02
    586a:	8b 81       	ldd	r24, Y+3	; 0x03
    586c:	9c 81       	ldd	r25, Y+4	; 0x04

}
    586e:	24 96       	adiw	r28, 0x04	; 4
    5870:	cd bf       	out	0x3d, r28	; 61
    5872:	de bf       	out	0x3e, r29	; 62
    5874:	df 91       	pop	r29
    5876:	cf 91       	pop	r28
    5878:	08 95       	ret

0000587a <testroutine>:
#include "commands.h"
#include "errors.h"
#include "beeper.h"

void testroutine(void)
{
    587a:	cf 93       	push	r28
    587c:	df 93       	push	r29
    587e:	cd b7       	in	r28, 0x3d	; 61
    5880:	de b7       	in	r29, 0x3e	; 62
    5882:	c0 55       	subi	r28, 0x50	; 80
    5884:	d1 09       	sbc	r29, r1
    5886:	cd bf       	out	0x3d, r28	; 61
    5888:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
//	uint8_t i;

	strcpy(strbuf, "TESTING\r");
    588a:	89 e0       	ldi	r24, 0x09	; 9
    588c:	ed e1       	ldi	r30, 0x1D	; 29
    588e:	fe eb       	ldi	r31, 0xBE	; 190
    5890:	be 01       	movw	r22, r28
    5892:	6f 5f       	subi	r22, 0xFF	; 255
    5894:	7f 4f       	sbci	r23, 0xFF	; 255
    5896:	db 01       	movw	r26, r22
    5898:	01 90       	ld	r0, Z+
    589a:	0d 92       	st	X+, r0
    589c:	8a 95       	dec	r24
    589e:	e1 f7       	brne	.-8      	; 0x5898 <testroutine+0x1e>
	send_USART(3, (uint8_t*) strbuf, strlen(strbuf));
    58a0:	fb 01       	movw	r30, r22
    58a2:	01 90       	ld	r0, Z+
    58a4:	00 20       	and	r0, r0
    58a6:	e9 f7       	brne	.-6      	; 0x58a2 <testroutine+0x28>
    58a8:	31 97       	sbiw	r30, 0x01	; 1
    58aa:	af 01       	movw	r20, r30
    58ac:	46 1b       	sub	r20, r22
    58ae:	57 0b       	sbc	r21, r23
    58b0:	83 e0       	ldi	r24, 0x03	; 3
    58b2:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <send_USART>
	get_MOTOR_MAXCURRENT(130, &value);
---*/

//	stop_MOTOR(128);

    58b6:	c0 5b       	subi	r28, 0xB0	; 176
    58b8:	df 4f       	sbci	r29, 0xFF	; 255
    58ba:	cd bf       	out	0x3d, r28	; 61
    58bc:	de bf       	out	0x3e, r29	; 62
    58be:	df 91       	pop	r29
    58c0:	cf 91       	pop	r28
    58c2:	08 95       	ret

000058c4 <init_RTC>:
	Turn off the TCB0 timer
------------------------------------------------------------------------------*/
void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    58c4:	ac 01       	movw	r20, r24
    58c6:	e0 e6       	ldi	r30, 0x60	; 96
    58c8:	f0 e0       	ldi	r31, 0x00	; 0
    58ca:	94 8d       	ldd	r25, Z+28	; 0x1c
    58cc:	9e 7f       	andi	r25, 0xFE	; 254
    58ce:	88 ed       	ldi	r24, 0xD8	; 216
    58d0:	84 bf       	out	0x34, r24	; 52
    58d2:	94 8f       	std	Z+28, r25	; 0x1c
    58d4:	01 c0       	rjmp	.+2      	; 0x58d8 <init_RTC+0x14>
    58d6:	00 00       	nop
    58d8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    58dc:	96 fd       	sbrc	r25, 6
    58de:	fb cf       	rjmp	.-10     	; 0x58d6 <init_RTC+0x12>
    58e0:	e0 e6       	ldi	r30, 0x60	; 96
    58e2:	f0 e0       	ldi	r31, 0x00	; 0
    58e4:	94 8d       	ldd	r25, Z+28	; 0x1c
    58e6:	9b 7f       	andi	r25, 0xFB	; 251
    58e8:	28 ed       	ldi	r18, 0xD8	; 216
    58ea:	24 bf       	out	0x34, r18	; 52
    58ec:	94 8f       	std	Z+28, r25	; 0x1c
    58ee:	94 8d       	ldd	r25, Z+28	; 0x1c
    58f0:	91 60       	ori	r25, 0x01	; 1
    58f2:	24 bf       	out	0x34, r18	; 52
    58f4:	94 8f       	std	Z+28, r25	; 0x1c
    58f6:	01 c0       	rjmp	.+2      	; 0x58fa <init_RTC+0x36>
    58f8:	00 00       	nop
    58fa:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    58fe:	91 11       	cpse	r25, r1
    5900:	fb cf       	rjmp	.-10     	; 0x58f8 <init_RTC+0x34>
    5902:	e0 e4       	ldi	r30, 0x40	; 64
    5904:	f1 e0       	ldi	r31, 0x01	; 1
    5906:	42 87       	std	Z+10, r20	; 0x0a
    5908:	53 87       	std	Z+11, r21	; 0x0b
    590a:	82 e0       	ldi	r24, 0x02	; 2
    590c:	87 83       	std	Z+7, r24	; 0x07
    590e:	85 81       	ldd	r24, Z+5	; 0x05
    5910:	81 60       	ori	r24, 0x01	; 1
    5912:	85 83       	std	Z+5, r24	; 0x05
    5914:	81 eb       	ldi	r24, 0xB1	; 177
    5916:	80 83       	st	Z, r24
    5918:	82 81       	ldd	r24, Z+2	; 0x02
    591a:	81 60       	ori	r24, 0x01	; 1
    591c:	82 83       	std	Z+2, r24	; 0x02
    591e:	81 e2       	ldi	r24, 0x21	; 33
    5920:	80 8b       	std	Z+16, r24	; 0x10
    5922:	81 e0       	ldi	r24, 0x01	; 1
    5924:	82 8b       	std	Z+18, r24	; 0x12
    5926:	08 95       	ret

00005928 <__vector_3>:
    5928:	1f 92       	push	r1
    592a:	0f 92       	push	r0
    592c:	0f b6       	in	r0, 0x3f	; 63
    592e:	0f 92       	push	r0
    5930:	11 24       	eor	r1, r1
    5932:	8f 93       	push	r24
    5934:	9f 93       	push	r25
    5936:	81 e0       	ldi	r24, 0x01	; 1
    5938:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>
    593c:	80 91 18 2a 	lds	r24, 0x2A18	; 0x802a18 <timerOLED>
    5940:	90 91 19 2a 	lds	r25, 0x2A19	; 0x802a19 <timerOLED+0x1>
    5944:	01 96       	adiw	r24, 0x01	; 1
    5946:	80 93 18 2a 	sts	0x2A18, r24	; 0x802a18 <timerOLED>
    594a:	90 93 19 2a 	sts	0x2A19, r25	; 0x802a19 <timerOLED+0x1>
    594e:	80 e2       	ldi	r24, 0x20	; 32
    5950:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>
    5954:	80 91 3c 2a 	lds	r24, 0x2A3C	; 0x802a3c <timerSAVEENCODER>
    5958:	8f 5f       	subi	r24, 0xFF	; 255
    595a:	80 93 3c 2a 	sts	0x2A3C, r24	; 0x802a3c <timerSAVEENCODER>
    595e:	9f 91       	pop	r25
    5960:	8f 91       	pop	r24
    5962:	0f 90       	pop	r0
    5964:	0f be       	out	0x3f, r0	; 63
    5966:	0f 90       	pop	r0
    5968:	1f 90       	pop	r1
    596a:	18 95       	reti

0000596c <__vector_4>:
    596c:	1f 92       	push	r1
    596e:	0f 92       	push	r0
    5970:	0f b6       	in	r0, 0x3f	; 63
    5972:	0f 92       	push	r0
    5974:	11 24       	eor	r1, r1
    5976:	8f 93       	push	r24
    5978:	9f 93       	push	r25
    597a:	81 e0       	ldi	r24, 0x01	; 1
    597c:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7f4153>
    5980:	80 91 0b 28 	lds	r24, 0x280B	; 0x80280b <testTicks>
    5984:	90 91 0c 28 	lds	r25, 0x280C	; 0x80280c <testTicks+0x1>
    5988:	01 96       	adiw	r24, 0x01	; 1
    598a:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <testTicks>
    598e:	90 93 0c 28 	sts	0x280C, r25	; 0x80280c <testTicks+0x1>
    5992:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    5996:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    599a:	01 96       	adiw	r24, 0x01	; 1
    599c:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <USART0_ticks>
    59a0:	90 93 04 28 	sts	0x2804, r25	; 0x802804 <USART0_ticks+0x1>
    59a4:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    59a8:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    59ac:	01 96       	adiw	r24, 0x01	; 1
    59ae:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <USART1_ticks>
    59b2:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <USART1_ticks+0x1>
    59b6:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <USART3_ticks>
    59ba:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <USART3_ticks+0x1>
    59be:	01 96       	adiw	r24, 0x01	; 1
    59c0:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <USART3_ticks>
    59c4:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <USART3_ticks+0x1>
    59c8:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    59cc:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    59d0:	01 96       	adiw	r24, 0x01	; 1
    59d2:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <TWI_ticks>
    59d6:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <TWI_ticks+0x1>
    59da:	9f 91       	pop	r25
    59dc:	8f 91       	pop	r24
    59de:	0f 90       	pop	r0
    59e0:	0f be       	out	0x3f, r0	; 63
    59e2:	0f 90       	pop	r0
    59e4:	1f 90       	pop	r1
    59e6:	18 95       	reti

000059e8 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    59e8:	1f 92       	push	r1
    59ea:	0f 92       	push	r0
    59ec:	0f b6       	in	r0, 0x3f	; 63
    59ee:	0f 92       	push	r0
    59f0:	11 24       	eor	r1, r1
    59f2:	8f 93       	push	r24

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    59f4:	81 e0       	ldi	r24, 0x01	; 1
    59f6:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>

    59fa:	8f 91       	pop	r24
    59fc:	0f 90       	pop	r0
    59fe:	0f be       	out	0x3f, r0	; 63
    5a00:	0f 90       	pop	r0
    5a02:	1f 90       	pop	r1
    5a04:	18 95       	reti

00005a06 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    5a06:	e0 ea       	ldi	r30, 0xA0	; 160
    5a08:	f8 e0       	ldi	r31, 0x08	; 8
    5a0a:	87 e0       	ldi	r24, 0x07	; 7
    5a0c:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    5a0e:	83 81       	ldd	r24, Z+3	; 0x03
    5a10:	81 60       	ori	r24, 0x01	; 1
    5a12:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    5a14:	85 81       	ldd	r24, Z+5	; 0x05
    5a16:	81 60       	ori	r24, 0x01	; 1
    5a18:	85 83       	std	Z+5, r24	; 0x05
    5a1a:	08 95       	ret

00005a1c <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    5a1c:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    5a20:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    5a24:	0f c0       	rjmp	.+30     	; 0x5a44 <read_TWI+0x28>
		asm("nop");
    5a26:	00 00       	nop
		if (TWI_ticks > 50) {					// Typically 0 ticks needed
    5a28:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    5a2c:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    5a30:	c3 97       	sbiw	r24, 0x33	; 51
    5a32:	40 f0       	brcs	.+16     	; 0x5a44 <read_TWI+0x28>
			printError(ERR_TWI, "read_TWI timeout");
    5a34:	66 e2       	ldi	r22, 0x26	; 38
    5a36:	7e eb       	ldi	r23, 0xBE	; 190
    5a38:	81 e9       	ldi	r24, 0x91	; 145
    5a3a:	91 e0       	ldi	r25, 0x01	; 1
    5a3c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
//			stop_TCB0();
			return(0xFF);
    5a40:	8f ef       	ldi	r24, 0xFF	; 255
    5a42:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    5a44:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5a48:	88 23       	and	r24, r24
    5a4a:	6c f7       	brge	.-38     	; 0x5a26 <read_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK
    5a4c:	e0 ea       	ldi	r30, 0xA0	; 160
    5a4e:	f8 e0       	ldi	r31, 0x08	; 8
    5a50:	84 81       	ldd	r24, Z+4	; 0x04
    5a52:	8b 7f       	andi	r24, 0xFB	; 251
    5a54:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;							// Next read
    5a56:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    5a58:	94 81       	ldd	r25, Z+4	; 0x04
    5a5a:	92 60       	ori	r25, 0x02	; 2
    5a5c:	94 83       	std	Z+4, r25	; 0x04

	return(data);

}
    5a5e:	08 95       	ret

00005a60 <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    5a60:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    5a64:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    5a68:	0f c0       	rjmp	.+30     	; 0x5a88 <readlast_TWI+0x28>
		asm("nop");
    5a6a:	00 00       	nop
		if (TWI_ticks > 50) {						// Typically 0 ticks needed
    5a6c:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    5a70:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    5a74:	c3 97       	sbiw	r24, 0x33	; 51
    5a76:	40 f0       	brcs	.+16     	; 0x5a88 <readlast_TWI+0x28>
			printError(ERR_TWI, "readlast timeout");
    5a78:	67 e3       	ldi	r22, 0x37	; 55
    5a7a:	7e eb       	ldi	r23, 0xBE	; 190
    5a7c:	81 e9       	ldi	r24, 0x91	; 145
    5a7e:	91 e0       	ldi	r25, 0x01	; 1
    5a80:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
//			stop_TCB0();
			return(0xFF);
    5a84:	8f ef       	ldi	r24, 0xFF	; 255
    5a86:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    5a88:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5a8c:	88 23       	and	r24, r24
    5a8e:	6c f7       	brge	.-38     	; 0x5a6a <readlast_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    5a90:	e0 ea       	ldi	r30, 0xA0	; 160
    5a92:	f8 e0       	ldi	r31, 0x08	; 8
    5a94:	84 81       	ldd	r24, Z+4	; 0x04
    5a96:	84 60       	ori	r24, 0x04	; 4
    5a98:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    5a9a:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    5a9c:	08 95       	ret

00005a9e <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    5a9e:	61 30       	cpi	r22, 0x01	; 1
    5aa0:	39 f4       	brne	.+14     	; 0x5ab0 <start_TWI+0x12>
		TWI0.MADDR = ((addr << 1) | 0x01);
    5aa2:	90 e0       	ldi	r25, 0x00	; 0
    5aa4:	88 0f       	add	r24, r24
    5aa6:	99 1f       	adc	r25, r25
    5aa8:	81 60       	ori	r24, 0x01	; 1
    5aaa:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    5aae:	03 c0       	rjmp	.+6      	; 0x5ab6 <start_TWI+0x18>
	} else {
		TWI0.MADDR = (addr << 1);
    5ab0:	88 0f       	add	r24, r24
    5ab2:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

	TWI_ticks = 0;
    5ab6:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    5aba:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    5abe:	0f c0       	rjmp	.+30     	; 0x5ade <start_TWI+0x40>
		asm("nop");								// Wait for addr transmission
    5ac0:	00 00       	nop
		if (TWI_ticks > 50) {
    5ac2:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    5ac6:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    5aca:	c3 97       	sbiw	r24, 0x33	; 51
    5acc:	40 f0       	brcs	.+16     	; 0x5ade <start_TWI+0x40>
			printError(ERR_TWI, "TWI start timeout");
    5ace:	68 e4       	ldi	r22, 0x48	; 72
    5ad0:	7e eb       	ldi	r23, 0xBE	; 190
    5ad2:	81 e9       	ldi	r24, 0x91	; 145
    5ad4:	91 e0       	ldi	r25, 0x01	; 1
    5ad6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
//			stop_TCB0();
			return(ERROR);
    5ada:	83 e6       	ldi	r24, 0x63	; 99
    5adc:	08 95       	ret
		TWI0.MADDR = (addr << 1);
	}

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    5ade:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5ae2:	80 7c       	andi	r24, 0xC0	; 192
    5ae4:	69 f3       	breq	.-38     	; 0x5ac0 <start_TWI+0x22>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    5ae6:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5aea:	82 ff       	sbrs	r24, 2
    5aec:	08 c0       	rjmp	.+16     	; 0x5afe <start_TWI+0x60>
		printError(ERR_TWI, "TWI bus");
    5aee:	6a e5       	ldi	r22, 0x5A	; 90
    5af0:	7e eb       	ldi	r23, 0xBE	; 190
    5af2:	81 e9       	ldi	r24, 0x91	; 145
    5af4:	91 e0       	ldi	r25, 0x01	; 1
    5af6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    5afa:	83 e6       	ldi	r24, 0x63	; 99
    5afc:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    5afe:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5b02:	83 ff       	sbrs	r24, 3
    5b04:	08 c0       	rjmp	.+16     	; 0x5b16 <start_TWI+0x78>
		printError(ERR_TWI, "TWI arbitration");
    5b06:	62 e6       	ldi	r22, 0x62	; 98
    5b08:	7e eb       	ldi	r23, 0xBE	; 190
    5b0a:	81 e9       	ldi	r24, 0x91	; 145
    5b0c:	91 e0       	ldi	r25, 0x01	; 1
    5b0e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    5b12:	83 e6       	ldi	r24, 0x63	; 99
    5b14:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    5b16:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5b1a:	89 2f       	mov	r24, r25
    5b1c:	80 71       	andi	r24, 0x10	; 16
    5b1e:	94 ff       	sbrs	r25, 4
    5b20:	07 c0       	rjmp	.+14     	; 0x5b30 <start_TWI+0x92>
		printError(ERR_TWI, "TWI no device responded");
    5b22:	62 e7       	ldi	r22, 0x72	; 114
    5b24:	7e eb       	ldi	r23, 0xBE	; 190
    5b26:	81 e9       	ldi	r24, 0x91	; 145
    5b28:	91 e0       	ldi	r25, 0x01	; 1
    5b2a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    5b2e:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    5b30:	08 95       	ret

00005b32 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    5b32:	87 e0       	ldi	r24, 0x07	; 7
    5b34:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    5b38:	08 95       	ret

00005b3a <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
    5b3a:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    5b3e:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    5b42:	10 c0       	rjmp	.+32     	; 0x5b64 <write_TWI+0x2a>
		asm("nop");
    5b44:	00 00       	nop
		if (TWI_ticks > 50) {
    5b46:	20 91 05 28 	lds	r18, 0x2805	; 0x802805 <TWI_ticks>
    5b4a:	30 91 06 28 	lds	r19, 0x2806	; 0x802806 <TWI_ticks+0x1>
    5b4e:	23 33       	cpi	r18, 0x33	; 51
    5b50:	31 05       	cpc	r19, r1
    5b52:	40 f0       	brcs	.+16     	; 0x5b64 <write_TWI+0x2a>
			printError(ERR_TWI, "write_TWI error1");
    5b54:	6a e8       	ldi	r22, 0x8A	; 138
    5b56:	7e eb       	ldi	r23, 0xBE	; 190
    5b58:	81 e9       	ldi	r24, 0x91	; 145
    5b5a:	91 e0       	ldi	r25, 0x01	; 1
    5b5c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
//			stop_TCB0();
			return(ERROR);
    5b60:	83 e6       	ldi	r24, 0x63	; 99
    5b62:	08 95       	ret
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    5b64:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5b68:	96 ff       	sbrs	r25, 6
    5b6a:	ec cf       	rjmp	.-40     	; 0x5b44 <write_TWI+0xa>
			return(ERROR);
		}
	}
//	stop_TCB0();

	TWI0.MDATA = data;
    5b6c:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	TWI_ticks = 0;
    5b70:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    5b74:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    5b78:	0f c0       	rjmp	.+30     	; 0x5b98 <write_TWI+0x5e>
		asm("nop");
    5b7a:	00 00       	nop
		if (TWI_ticks > 50) {
    5b7c:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    5b80:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    5b84:	c3 97       	sbiw	r24, 0x33	; 51
    5b86:	40 f0       	brcs	.+16     	; 0x5b98 <write_TWI+0x5e>
			printError(ERR_TWI, "write_TWI error2");
    5b88:	6b e9       	ldi	r22, 0x9B	; 155
    5b8a:	7e eb       	ldi	r23, 0xBE	; 190
    5b8c:	81 e9       	ldi	r24, 0x91	; 145
    5b8e:	91 e0       	ldi	r25, 0x01	; 1
    5b90:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
//			stop_TCB0();
			return(ERROR);
    5b94:	83 e6       	ldi	r24, 0x63	; 99
    5b96:	08 95       	ret

	TWI0.MDATA = data;

	TWI_ticks = 0;
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    5b98:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5b9c:	86 ff       	sbrs	r24, 6
    5b9e:	ed cf       	rjmp	.-38     	; 0x5b7a <write_TWI+0x40>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    5ba0:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5ba4:	89 2f       	mov	r24, r25
    5ba6:	80 71       	andi	r24, 0x10	; 16
    5ba8:	94 ff       	sbrs	r25, 4
    5baa:	07 c0       	rjmp	.+14     	; 0x5bba <write_TWI+0x80>
		printError(ERR_TWI, "ACK not received");
    5bac:	6c ea       	ldi	r22, 0xAC	; 172
    5bae:	7e eb       	ldi	r23, 0xBE	; 190
    5bb0:	81 e9       	ldi	r24, 0x91	; 145
    5bb2:	91 e0       	ldi	r25, 0x01	; 1
    5bb4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    5bb8:	83 e6       	ldi	r24, 0x63	; 99
	} else {
		return(NOERROR);
	}

}
    5bba:	08 95       	ret

00005bbc <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    5bbc:	e0 e0       	ldi	r30, 0x00	; 0
    5bbe:	f4 e0       	ldi	r31, 0x04	; 4
    5bc0:	81 e0       	ldi	r24, 0x01	; 1
    5bc2:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    5bc4:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    5bc6:	e0 e0       	ldi	r30, 0x00	; 0
    5bc8:	f8 e0       	ldi	r31, 0x08	; 8
    5bca:	2b e5       	ldi	r18, 0x5B	; 91
    5bcc:	31 e0       	ldi	r19, 0x01	; 1
    5bce:	20 87       	std	Z+8, r18	; 0x08
    5bd0:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    5bd2:	95 81       	ldd	r25, Z+5	; 0x05
    5bd4:	90 68       	ori	r25, 0x80	; 128
    5bd6:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    5bd8:	96 81       	ldd	r25, Z+6	; 0x06
    5bda:	90 64       	ori	r25, 0x40	; 64
    5bdc:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    5bde:	96 81       	ldd	r25, Z+6	; 0x06
    5be0:	90 68       	ori	r25, 0x80	; 128
    5be2:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;					// Set up send/receive buffers
    5be4:	10 92 49 2f 	sts	0x2F49, r1	; 0x802f49 <send0_buf+0xfe>
	send0_buf.tail = 0;
    5be8:	10 92 4a 2f 	sts	0x2F4A, r1	; 0x802f4a <send0_buf+0xff>
	send0_buf.done = YES;
    5bec:	80 93 4e 2f 	sts	0x2F4E, r24	; 0x802f4e <send0_buf+0x103>
	recv0_buf.head = 0;
    5bf0:	10 92 45 2e 	sts	0x2E45, r1	; 0x802e45 <recv0_buf+0xfe>
	recv0_buf.tail = 0;
    5bf4:	10 92 46 2e 	sts	0x2E46, r1	; 0x802e46 <recv0_buf+0xff>
	recv0_buf.data[0] = '\0';
    5bf8:	10 92 47 2d 	sts	0x2D47, r1	; 0x802d47 <recv0_buf>
	recv0_buf.length = 0;
    5bfc:	10 92 48 2e 	sts	0x2E48, r1	; 0x802e48 <recv0_buf+0x101>
	recv0_buf.done = NO;
    5c00:	10 92 4a 2e 	sts	0x2E4A, r1	; 0x802e4a <recv0_buf+0x103>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    5c04:	e0 e4       	ldi	r30, 0x40	; 64
    5c06:	f4 e0       	ldi	r31, 0x04	; 4
    5c08:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    5c0a:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    5c0c:	e0 e2       	ldi	r30, 0x20	; 32
    5c0e:	f8 e0       	ldi	r31, 0x08	; 8
    5c10:	20 87       	std	Z+8, r18	; 0x08
    5c12:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    5c14:	95 81       	ldd	r25, Z+5	; 0x05
    5c16:	90 68       	ori	r25, 0x80	; 128
    5c18:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    5c1a:	96 81       	ldd	r25, Z+6	; 0x06
    5c1c:	90 64       	ori	r25, 0x40	; 64
    5c1e:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    5c20:	96 81       	ldd	r25, Z+6	; 0x06
    5c22:	90 68       	ori	r25, 0x80	; 128
    5c24:	96 83       	std	Z+6, r25	; 0x06

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    5c26:	e0 e2       	ldi	r30, 0x20	; 32
    5c28:	f4 e0       	ldi	r31, 0x04	; 4
    5c2a:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    5c2c:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    5c2e:	e0 e6       	ldi	r30, 0x60	; 96
    5c30:	f8 e0       	ldi	r31, 0x08	; 8
    5c32:	27 e4       	ldi	r18, 0x47	; 71
    5c34:	30 e1       	ldi	r19, 0x10	; 16
    5c36:	20 87       	std	Z+8, r18	; 0x08
    5c38:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    5c3a:	95 81       	ldd	r25, Z+5	; 0x05
    5c3c:	90 68       	ori	r25, 0x80	; 128
    5c3e:	95 83       	std	Z+5, r25	; 0x05
	USART3.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    5c40:	96 81       	ldd	r25, Z+6	; 0x06
    5c42:	90 64       	ori	r25, 0x40	; 64
    5c44:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    5c46:	96 81       	ldd	r25, Z+6	; 0x06
    5c48:	90 68       	ori	r25, 0x80	; 128
    5c4a:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    5c4c:	80 93 4f 31 	sts	0x314F, r24	; 0x80314f <send3_buf+0xff>
	recv3_buf.done = NO;
    5c50:	10 92 4e 30 	sts	0x304E, r1	; 0x80304e <recv3_buf+0xff>
    5c54:	08 95       	ret

00005c56 <send_USART>:
		"transmit data register empty" interrupt (DREIE). The USARTn_DRE_vect
		puts the bytes into the transmit register until the tail catches up
		to the head of the circular buffer.
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    5c56:	0f 93       	push	r16
    5c58:	1f 93       	push	r17
    5c5a:	cf 93       	push	r28
    5c5c:	df 93       	push	r29
    5c5e:	eb 01       	movw	r28, r22
    5c60:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    5c62:	81 30       	cpi	r24, 0x01	; 1
    5c64:	b1 f1       	breq	.+108    	; 0x5cd2 <send_USART+0x7c>
    5c66:	20 f0       	brcs	.+8      	; 0x5c70 <send_USART+0x1a>
    5c68:	83 30       	cpi	r24, 0x03	; 3
    5c6a:	09 f4       	brne	.+2      	; 0x5c6e <send_USART+0x18>
    5c6c:	6f c0       	rjmp	.+222    	; 0x5d4c <send_USART+0xf6>
    5c6e:	99 c0       	rjmp	.+306    	; 0x5da2 <send_USART+0x14c>
		case 0:		// Ethernet port
			send0_buf.done = NO;
    5c70:	10 92 4e 2f 	sts	0x2F4E, r1	; 0x802f4e <send0_buf+0x103>
			for (i = 0; i < nbytes; i++) {
    5c74:	20 e0       	ldi	r18, 0x00	; 0
    5c76:	11 c0       	rjmp	.+34     	; 0x5c9a <send_USART+0x44>
				send0_buf.data[send0_buf.head] = *data++;
    5c78:	e9 e4       	ldi	r30, 0x49	; 73
    5c7a:	ff e2       	ldi	r31, 0x2F	; 47
    5c7c:	80 81       	ld	r24, Z
    5c7e:	90 e0       	ldi	r25, 0x00	; 0
    5c80:	38 81       	ld	r19, Y
    5c82:	dc 01       	movw	r26, r24
    5c84:	a5 5b       	subi	r26, 0xB5	; 181
    5c86:	b1 4d       	sbci	r27, 0xD1	; 209
    5c88:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    5c8a:	01 96       	adiw	r24, 0x01	; 1
    5c8c:	6e ef       	ldi	r22, 0xFE	; 254
    5c8e:	70 e0       	ldi	r23, 0x00	; 0
    5c90:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    5c94:	80 83       	st	Z, r24
	uint16_t crc;

	switch (port) {
		case 0:		// Ethernet port
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    5c96:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    5c98:	21 96       	adiw	r28, 0x01	; 1
	uint16_t crc;

	switch (port) {
		case 0:		// Ethernet port
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    5c9a:	21 17       	cp	r18, r17
    5c9c:	68 f3       	brcs	.-38     	; 0x5c78 <send_USART+0x22>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    5c9e:	e0 e0       	ldi	r30, 0x00	; 0
    5ca0:	f8 e0       	ldi	r31, 0x08	; 8
    5ca2:	85 81       	ldd	r24, Z+5	; 0x05
    5ca4:	80 62       	ori	r24, 0x20	; 32
    5ca6:	85 83       	std	Z+5, r24	; 0x05
			USART0_ticks = 0;
    5ca8:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <USART0_ticks>
    5cac:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <USART0_ticks+0x1>
			while (send0_buf.done == NO) {
    5cb0:	0b c0       	rjmp	.+22     	; 0x5cc8 <send_USART+0x72>
				if (USART0_ticks > 100) {				// 0.1 second enough?
    5cb2:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    5cb6:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    5cba:	85 36       	cpi	r24, 0x65	; 101
    5cbc:	91 05       	cpc	r25, r1
    5cbe:	20 f0       	brcs	.+8      	; 0x5cc8 <send_USART+0x72>
					send0_buf.done = YES;
    5cc0:	81 e0       	ldi	r24, 0x01	; 1
    5cc2:	80 93 4e 2f 	sts	0x2F4E, r24	; 0x802f4e <send0_buf+0x103>
					return;
    5cc6:	6d c0       	rjmp	.+218    	; 0x5da2 <send_USART+0x14c>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			USART0_ticks = 0;
			while (send0_buf.done == NO) {
    5cc8:	80 91 4e 2f 	lds	r24, 0x2F4E	; 0x802f4e <send0_buf+0x103>
    5ccc:	88 23       	and	r24, r24
    5cce:	89 f3       	breq	.-30     	; 0x5cb2 <send_USART+0x5c>
    5cd0:	68 c0       	rjmp	.+208    	; 0x5da2 <send_USART+0x14c>
				}
			}
			break;

		case 1:		// Collimator motor controllers
			crc = crc16(data, nbytes);
    5cd2:	64 2f       	mov	r22, r20
    5cd4:	70 e0       	ldi	r23, 0x00	; 0
    5cd6:	ce 01       	movw	r24, r28
    5cd8:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <crc16>
    5cdc:	48 2f       	mov	r20, r24
    5cde:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    5ce0:	20 e0       	ldi	r18, 0x00	; 0
    5ce2:	11 c0       	rjmp	.+34     	; 0x5d06 <send_USART+0xb0>
				send1_buf.data[send1_buf.head] = *data++;
    5ce4:	ef e4       	ldi	r30, 0x4F	; 79
    5ce6:	f2 e3       	ldi	r31, 0x32	; 50
    5ce8:	80 81       	ld	r24, Z
    5cea:	90 e0       	ldi	r25, 0x00	; 0
    5cec:	38 81       	ld	r19, Y
    5cee:	dc 01       	movw	r26, r24
    5cf0:	af 5a       	subi	r26, 0xAF	; 175
    5cf2:	be 4c       	sbci	r27, 0xCE	; 206
    5cf4:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    5cf6:	01 96       	adiw	r24, 0x01	; 1
    5cf8:	6e ef       	ldi	r22, 0xFE	; 254
    5cfa:	70 e0       	ldi	r23, 0x00	; 0
    5cfc:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    5d00:	80 83       	st	Z, r24
			}
			break;

		case 1:		// Collimator motor controllers
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    5d02:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    5d04:	21 96       	adiw	r28, 0x01	; 1
			}
			break;

		case 1:		// Collimator motor controllers
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    5d06:	21 17       	cp	r18, r17
    5d08:	68 f3       	brcs	.-38     	; 0x5ce4 <send_USART+0x8e>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    5d0a:	ef e4       	ldi	r30, 0x4F	; 79
    5d0c:	f2 e3       	ldi	r31, 0x32	; 50
    5d0e:	80 81       	ld	r24, Z
    5d10:	90 e0       	ldi	r25, 0x00	; 0
    5d12:	dc 01       	movw	r26, r24
    5d14:	af 5a       	subi	r26, 0xAF	; 175
    5d16:	be 4c       	sbci	r27, 0xCE	; 206
    5d18:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    5d1a:	01 96       	adiw	r24, 0x01	; 1
    5d1c:	2e ef       	ldi	r18, 0xFE	; 254
    5d1e:	30 e0       	ldi	r19, 0x00	; 0
    5d20:	b9 01       	movw	r22, r18
    5d22:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    5d26:	90 e0       	ldi	r25, 0x00	; 0
    5d28:	dc 01       	movw	r26, r24
    5d2a:	af 5a       	subi	r26, 0xAF	; 175
    5d2c:	be 4c       	sbci	r27, 0xCE	; 206
    5d2e:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    5d30:	01 96       	adiw	r24, 0x01	; 1
    5d32:	b9 01       	movw	r22, r18
    5d34:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    5d38:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    5d3a:	1e 5f       	subi	r17, 0xFE	; 254
    5d3c:	10 93 51 32 	sts	0x3251, r17	; 0x803251 <send1_buf+0x100>
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    5d40:	e0 e2       	ldi	r30, 0x20	; 32
    5d42:	f8 e0       	ldi	r31, 0x08	; 8
    5d44:	85 81       	ldd	r24, Z+5	; 0x05
    5d46:	80 62       	ori	r24, 0x20	; 32
    5d48:	85 83       	std	Z+5, r24	; 0x05
			break;
    5d4a:	2b c0       	rjmp	.+86     	; 0x5da2 <send_USART+0x14c>

		case 3:		// LN2 controller
			send3_buf.nbytes = nbytes;
    5d4c:	40 93 4e 31 	sts	0x314E, r20	; 0x80314e <send3_buf+0xfe>
			send3_buf.nxfrd = 0;
    5d50:	10 92 50 31 	sts	0x3150, r1	; 0x803150 <send3_buf+0x100>
			send3_buf.done = NO;
    5d54:	10 92 4f 31 	sts	0x314F, r1	; 0x80314f <send3_buf+0xff>
			for (i = 0; i < nbytes; i++) {
    5d58:	80 e0       	ldi	r24, 0x00	; 0
    5d5a:	08 c0       	rjmp	.+16     	; 0x5d6c <send_USART+0x116>
				send3_buf.data[i] = *data++;
    5d5c:	e8 2f       	mov	r30, r24
    5d5e:	f0 e0       	ldi	r31, 0x00	; 0
    5d60:	98 81       	ld	r25, Y
    5d62:	e0 5b       	subi	r30, 0xB0	; 176
    5d64:	ff 4c       	sbci	r31, 0xCF	; 207
    5d66:	90 83       	st	Z, r25

		case 3:		// LN2 controller
			send3_buf.nbytes = nbytes;
			send3_buf.nxfrd = 0;
			send3_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    5d68:	8f 5f       	subi	r24, 0xFF	; 255
				send3_buf.data[i] = *data++;
    5d6a:	21 96       	adiw	r28, 0x01	; 1

		case 3:		// LN2 controller
			send3_buf.nbytes = nbytes;
			send3_buf.nxfrd = 0;
			send3_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    5d6c:	81 17       	cp	r24, r17
    5d6e:	b0 f3       	brcs	.-20     	; 0x5d5c <send_USART+0x106>
				send3_buf.data[i] = *data++;
			}
			USART3_ticks = 0;
    5d70:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <USART3_ticks>
    5d74:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <USART3_ticks+0x1>
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    5d78:	e0 e6       	ldi	r30, 0x60	; 96
    5d7a:	f8 e0       	ldi	r31, 0x08	; 8
    5d7c:	85 81       	ldd	r24, Z+5	; 0x05
    5d7e:	80 62       	ori	r24, 0x20	; 32
    5d80:	85 83       	std	Z+5, r24	; 0x05
			while (send3_buf.done == NO) {
    5d82:	0b c0       	rjmp	.+22     	; 0x5d9a <send_USART+0x144>
				if (USART3_ticks > 500) {		// 1 second enough?
    5d84:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <USART3_ticks>
    5d88:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <USART3_ticks+0x1>
    5d8c:	85 3f       	cpi	r24, 0xF5	; 245
    5d8e:	91 40       	sbci	r25, 0x01	; 1
    5d90:	20 f0       	brcs	.+8      	; 0x5d9a <send_USART+0x144>
					send3_buf.done = YES;
    5d92:	81 e0       	ldi	r24, 0x01	; 1
    5d94:	80 93 4f 31 	sts	0x314F, r24	; 0x80314f <send3_buf+0xff>
					return;
    5d98:	04 c0       	rjmp	.+8      	; 0x5da2 <send_USART+0x14c>
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[i] = *data++;
			}
			USART3_ticks = 0;
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			while (send3_buf.done == NO) {
    5d9a:	80 91 4f 31 	lds	r24, 0x314F	; 0x80314f <send3_buf+0xff>
    5d9e:	88 23       	and	r24, r24
    5da0:	89 f3       	breq	.-30     	; 0x5d84 <send_USART+0x12e>

		default:
			break;
	}

}
    5da2:	df 91       	pop	r29
    5da4:	cf 91       	pop	r28
    5da6:	1f 91       	pop	r17
    5da8:	0f 91       	pop	r16
    5daa:	08 95       	ret

00005dac <send_USART1>:

void send_USART1(uint8_t *data, uint8_t nbytes)
{
    5dac:	dc 01       	movw	r26, r24
	char strbuf[80];
	sprintf(strbuf, " sending nbytes=%d", nbytes);
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
    5dae:	10 92 42 2c 	sts	0x2C42, r1	; 0x802c42 <ser_send1+0xff>
	ser_send1.n2xfr = nbytes;
    5db2:	60 93 41 2c 	sts	0x2C41, r22	; 0x802c41 <ser_send1+0xfe>
	for (i = 0; i < nbytes; i++) {
    5db6:	90 e0       	ldi	r25, 0x00	; 0
    5db8:	08 c0       	rjmp	.+16     	; 0x5dca <send_USART1+0x1e>
		ser_send1.data[i] = *data++;
    5dba:	e9 2f       	mov	r30, r25
    5dbc:	f0 e0       	ldi	r31, 0x00	; 0
    5dbe:	8c 91       	ld	r24, X
    5dc0:	ed 5b       	subi	r30, 0xBD	; 189
    5dc2:	f4 4d       	sbci	r31, 0xD4	; 212
    5dc4:	80 83       	st	Z, r24
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
	ser_send1.n2xfr = nbytes;
	for (i = 0; i < nbytes; i++) {
    5dc6:	9f 5f       	subi	r25, 0xFF	; 255
		ser_send1.data[i] = *data++;
    5dc8:	11 96       	adiw	r26, 0x01	; 1
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
	ser_send1.n2xfr = nbytes;
	for (i = 0; i < nbytes; i++) {
    5dca:	96 17       	cp	r25, r22
    5dcc:	b0 f3       	brcs	.-20     	; 0x5dba <send_USART1+0xe>
		sprintf(strbuf, " n=%d: %d (0x%02X)", i, ser_send1.data[i], ser_send1.data[i]);
		printLine(strbuf);
#endif
	}

	USART1.CTRLA |= USART_DREIE_bm;		// Enable DRE interrupts
    5dce:	e0 e2       	ldi	r30, 0x20	; 32
    5dd0:	f8 e0       	ldi	r31, 0x08	; 8
    5dd2:	85 81       	ldd	r24, Z+5	; 0x05
    5dd4:	80 62       	ori	r24, 0x20	; 32
    5dd6:	85 83       	std	Z+5, r24	; 0x05
    5dd8:	08 95       	ret

00005dda <__vector_26>:
/*------------------------------------------------------------------------------
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    5dda:	1f 92       	push	r1
    5ddc:	0f 92       	push	r0
    5dde:	0f b6       	in	r0, 0x3f	; 63
    5de0:	0f 92       	push	r0
    5de2:	11 24       	eor	r1, r1
    5de4:	8f 93       	push	r24
    5de6:	af 93       	push	r26
    5de8:	bf 93       	push	r27
    5dea:	ef 93       	push	r30
    5dec:	ff 93       	push	r31

	ser_recv1.data[ser_recv1.nxfrd++] = USART1.RXDATAL;
    5dee:	a2 e4       	ldi	r26, 0x42	; 66
    5df0:	bb e2       	ldi	r27, 0x2B	; 43
    5df2:	ec 91       	ld	r30, X
    5df4:	81 e0       	ldi	r24, 0x01	; 1
    5df6:	8e 0f       	add	r24, r30
    5df8:	8c 93       	st	X, r24
    5dfa:	f0 e0       	ldi	r31, 0x00	; 0
    5dfc:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
    5e00:	ed 5b       	subi	r30, 0xBD	; 189
    5e02:	f5 4d       	sbci	r31, 0xD5	; 213
    5e04:	80 83       	st	Z, r24

}
    5e06:	ff 91       	pop	r31
    5e08:	ef 91       	pop	r30
    5e0a:	bf 91       	pop	r27
    5e0c:	af 91       	pop	r26
    5e0e:	8f 91       	pop	r24
    5e10:	0f 90       	pop	r0
    5e12:	0f be       	out	0x3f, r0	; 63
    5e14:	0f 90       	pop	r0
    5e16:	1f 90       	pop	r1
    5e18:	18 95       	reti

00005e1a <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    5e1a:	1f 92       	push	r1
    5e1c:	0f 92       	push	r0
    5e1e:	0f b6       	in	r0, 0x3f	; 63
    5e20:	0f 92       	push	r0
    5e22:	11 24       	eor	r1, r1
    5e24:	8f 93       	push	r24
    5e26:	9f 93       	push	r25
    5e28:	af 93       	push	r26
    5e2a:	bf 93       	push	r27
    5e2c:	cf 93       	push	r28
    5e2e:	df 93       	push	r29
    5e30:	ef 93       	push	r30
    5e32:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    5e34:	a0 e2       	ldi	r26, 0x20	; 32
    5e36:	b8 e0       	ldi	r27, 0x08	; 8
    5e38:	15 96       	adiw	r26, 0x05	; 5
    5e3a:	8c 91       	ld	r24, X
    5e3c:	15 97       	sbiw	r26, 0x05	; 5
    5e3e:	8f 7d       	andi	r24, 0xDF	; 223
    5e40:	15 96       	adiw	r26, 0x05	; 5
    5e42:	8c 93       	st	X, r24
    5e44:	15 97       	sbiw	r26, 0x05	; 5
	USART1.TXDATAL = ser_send1.data[ser_send1.nxfrd++];
    5e46:	c2 e4       	ldi	r28, 0x42	; 66
    5e48:	dc e2       	ldi	r29, 0x2C	; 44
    5e4a:	e8 81       	ld	r30, Y
    5e4c:	81 e0       	ldi	r24, 0x01	; 1
    5e4e:	8e 0f       	add	r24, r30
    5e50:	88 83       	st	Y, r24
    5e52:	f0 e0       	ldi	r31, 0x00	; 0
    5e54:	ed 5b       	subi	r30, 0xBD	; 189
    5e56:	f4 4d       	sbci	r31, 0xD4	; 212
    5e58:	90 81       	ld	r25, Z
    5e5a:	12 96       	adiw	r26, 0x02	; 2
    5e5c:	9c 93       	st	X, r25
	if (ser_send1.nxfrd < ser_send1.n2xfr) {
    5e5e:	90 91 41 2c 	lds	r25, 0x2C41	; 0x802c41 <ser_send1+0xfe>
    5e62:	89 17       	cp	r24, r25
    5e64:	28 f4       	brcc	.+10     	; 0x5e70 <__vector_27+0x56>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts	
    5e66:	e0 e2       	ldi	r30, 0x20	; 32
    5e68:	f8 e0       	ldi	r31, 0x08	; 8
    5e6a:	85 81       	ldd	r24, Z+5	; 0x05
    5e6c:	80 62       	ori	r24, 0x20	; 32
    5e6e:	85 83       	std	Z+5, r24	; 0x05
	}

}
    5e70:	ff 91       	pop	r31
    5e72:	ef 91       	pop	r30
    5e74:	df 91       	pop	r29
    5e76:	cf 91       	pop	r28
    5e78:	bf 91       	pop	r27
    5e7a:	af 91       	pop	r26
    5e7c:	9f 91       	pop	r25
    5e7e:	8f 91       	pop	r24
    5e80:	0f 90       	pop	r0
    5e82:	0f be       	out	0x3f, r0	; 63
    5e84:	0f 90       	pop	r0
    5e86:	1f 90       	pop	r1
    5e88:	18 95       	reti

00005e8a <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    5e8a:	1f 92       	push	r1
    5e8c:	0f 92       	push	r0
    5e8e:	0f b6       	in	r0, 0x3f	; 63
    5e90:	0f 92       	push	r0
    5e92:	11 24       	eor	r1, r1
    5e94:	5f 93       	push	r21
    5e96:	6f 93       	push	r22
    5e98:	7f 93       	push	r23
    5e9a:	8f 93       	push	r24
    5e9c:	9f 93       	push	r25
    5e9e:	af 93       	push	r26
    5ea0:	bf 93       	push	r27
    5ea2:	ef 93       	push	r30
    5ea4:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    5ea6:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if (recv0_buf.length < (BUFSIZE-1)) {		// BUFSIZE-1 to make room for the terminating \0
    5eaa:	80 91 48 2e 	lds	r24, 0x2E48	; 0x802e48 <recv0_buf+0x101>
    5eae:	8d 3f       	cpi	r24, 0xFD	; 253
    5eb0:	10 f5       	brcc	.+68     	; 0x5ef6 <__vector_17+0x6c>
//		c = USART0.RXDATAL;
		if ((char) c == '\r') {
    5eb2:	9d 30       	cpi	r25, 0x0D	; 13
    5eb4:	51 f4       	brne	.+20     	; 0x5eca <__vector_17+0x40>
			recv0_buf.done = YES;
    5eb6:	81 e0       	ldi	r24, 0x01	; 1
    5eb8:	80 93 4a 2e 	sts	0x2E4A, r24	; 0x802e4a <recv0_buf+0x103>
			recv0_buf.data[recv0_buf.head] = '\0';
    5ebc:	e0 91 45 2e 	lds	r30, 0x2E45	; 0x802e45 <recv0_buf+0xfe>
    5ec0:	f0 e0       	ldi	r31, 0x00	; 0
    5ec2:	e9 5b       	subi	r30, 0xB9	; 185
    5ec4:	f2 4d       	sbci	r31, 0xD2	; 210
    5ec6:	10 82       	st	Z, r1
    5ec8:	06 c0       	rjmp	.+12     	; 0x5ed6 <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    5eca:	e0 91 45 2e 	lds	r30, 0x2E45	; 0x802e45 <recv0_buf+0xfe>
    5ece:	f0 e0       	ldi	r31, 0x00	; 0
    5ed0:	e9 5b       	subi	r30, 0xB9	; 185
    5ed2:	f2 4d       	sbci	r31, 0xD2	; 210
    5ed4:	90 83       	st	Z, r25
		}
		recv0_buf.length++;
    5ed6:	e8 e4       	ldi	r30, 0x48	; 72
    5ed8:	fe e2       	ldi	r31, 0x2E	; 46
    5eda:	80 81       	ld	r24, Z
    5edc:	8f 5f       	subi	r24, 0xFF	; 255
    5ede:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    5ee0:	e5 e4       	ldi	r30, 0x45	; 69
    5ee2:	fe e2       	ldi	r31, 0x2E	; 46
    5ee4:	80 81       	ld	r24, Z
    5ee6:	90 e0       	ldi	r25, 0x00	; 0
    5ee8:	01 96       	adiw	r24, 0x01	; 1
    5eea:	6e ef       	ldi	r22, 0xFE	; 254
    5eec:	70 e0       	ldi	r23, 0x00	; 0
    5eee:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <__divmodhi4>
    5ef2:	80 83       	st	Z, r24
    5ef4:	0a c0       	rjmp	.+20     	; 0x5f0a <__vector_17+0x80>
	} else {
		recv0_buf.head = 0;
    5ef6:	10 92 45 2e 	sts	0x2E45, r1	; 0x802e45 <recv0_buf+0xfe>
		recv0_buf.tail = 0;
    5efa:	10 92 46 2e 	sts	0x2E46, r1	; 0x802e46 <recv0_buf+0xff>
		recv0_buf.data[0] = '\0';
    5efe:	10 92 47 2d 	sts	0x2D47, r1	; 0x802d47 <recv0_buf>
		recv0_buf.length = 0;
    5f02:	10 92 48 2e 	sts	0x2E48, r1	; 0x802e48 <recv0_buf+0x101>
		recv0_buf.done = NO;
    5f06:	10 92 4a 2e 	sts	0x2E4A, r1	; 0x802e4a <recv0_buf+0x103>
	}
}
    5f0a:	ff 91       	pop	r31
    5f0c:	ef 91       	pop	r30
    5f0e:	bf 91       	pop	r27
    5f10:	af 91       	pop	r26
    5f12:	9f 91       	pop	r25
    5f14:	8f 91       	pop	r24
    5f16:	7f 91       	pop	r23
    5f18:	6f 91       	pop	r22
    5f1a:	5f 91       	pop	r21
    5f1c:	0f 90       	pop	r0
    5f1e:	0f be       	out	0x3f, r0	; 63
    5f20:	0f 90       	pop	r0
    5f22:	1f 90       	pop	r1
    5f24:	18 95       	reti

00005f26 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    5f26:	1f 92       	push	r1
    5f28:	0f 92       	push	r0
    5f2a:	0f b6       	in	r0, 0x3f	; 63
    5f2c:	0f 92       	push	r0
    5f2e:	11 24       	eor	r1, r1
    5f30:	2f 93       	push	r18
    5f32:	8f 93       	push	r24
    5f34:	9f 93       	push	r25
    5f36:	ef 93       	push	r30
    5f38:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    5f3a:	e0 e0       	ldi	r30, 0x00	; 0
    5f3c:	f8 e0       	ldi	r31, 0x08	; 8
    5f3e:	85 81       	ldd	r24, Z+5	; 0x05
    5f40:	8f 7d       	andi	r24, 0xDF	; 223
    5f42:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    5f44:	80 91 49 2f 	lds	r24, 0x2F49	; 0x802f49 <send0_buf+0xfe>
    5f48:	e0 91 4a 2f 	lds	r30, 0x2F4A	; 0x802f4a <send0_buf+0xff>
    5f4c:	8e 17       	cp	r24, r30
    5f4e:	d1 f0       	breq	.+52     	; 0x5f84 <__vector_18+0x5e>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    5f50:	81 e0       	ldi	r24, 0x01	; 1
    5f52:	8e 0f       	add	r24, r30
    5f54:	80 93 4a 2f 	sts	0x2F4A, r24	; 0x802f4a <send0_buf+0xff>
    5f58:	f0 e0       	ldi	r31, 0x00	; 0
    5f5a:	e5 5b       	subi	r30, 0xB5	; 181
    5f5c:	f1 4d       	sbci	r31, 0xD1	; 209
    5f5e:	90 81       	ld	r25, Z
    5f60:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    5f64:	91 e0       	ldi	r25, 0x01	; 1
    5f66:	8e 3f       	cpi	r24, 0xFE	; 254
    5f68:	08 f4       	brcc	.+2      	; 0x5f6c <__vector_18+0x46>
    5f6a:	90 e0       	ldi	r25, 0x00	; 0
    5f6c:	91 95       	neg	r25
    5f6e:	29 2f       	mov	r18, r25
    5f70:	22 0f       	add	r18, r18
    5f72:	82 1b       	sub	r24, r18
    5f74:	80 93 4a 2f 	sts	0x2F4A, r24	; 0x802f4a <send0_buf+0xff>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    5f78:	e0 e0       	ldi	r30, 0x00	; 0
    5f7a:	f8 e0       	ldi	r31, 0x08	; 8
    5f7c:	85 81       	ldd	r24, Z+5	; 0x05
    5f7e:	80 62       	ori	r24, 0x20	; 32
    5f80:	85 83       	std	Z+5, r24	; 0x05
    5f82:	03 c0       	rjmp	.+6      	; 0x5f8a <__vector_18+0x64>
	} else {
		send0_buf.done = YES;
    5f84:	81 e0       	ldi	r24, 0x01	; 1
    5f86:	80 93 4e 2f 	sts	0x2F4E, r24	; 0x802f4e <send0_buf+0x103>
	}

}
    5f8a:	ff 91       	pop	r31
    5f8c:	ef 91       	pop	r30
    5f8e:	9f 91       	pop	r25
    5f90:	8f 91       	pop	r24
    5f92:	2f 91       	pop	r18
    5f94:	0f 90       	pop	r0
    5f96:	0f be       	out	0x3f, r0	; 63
    5f98:	0f 90       	pop	r0
    5f9a:	1f 90       	pop	r1
    5f9c:	18 95       	reti

00005f9e <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    5f9e:	1f 92       	push	r1
    5fa0:	0f 92       	push	r0
    5fa2:	0f b6       	in	r0, 0x3f	; 63
    5fa4:	0f 92       	push	r0
    5fa6:	11 24       	eor	r1, r1
    5fa8:	2f 93       	push	r18
    5faa:	3f 93       	push	r19
    5fac:	8f 93       	push	r24
    5fae:	9f 93       	push	r25
    5fb0:	ef 93       	push	r30
    5fb2:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    5fb4:	90 91 60 08 	lds	r25, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>

	recv3_buf.data[recv3_buf.nxfrd] = c;
    5fb8:	80 91 4f 30 	lds	r24, 0x304F	; 0x80304f <recv3_buf+0x100>
    5fbc:	28 2f       	mov	r18, r24
    5fbe:	30 e0       	ldi	r19, 0x00	; 0
    5fc0:	f9 01       	movw	r30, r18
    5fc2:	e1 5b       	subi	r30, 0xB1	; 177
    5fc4:	f0 4d       	sbci	r31, 0xD0	; 208
    5fc6:	90 83       	st	Z, r25

	if (((char) c) == '\r') {
    5fc8:	9d 30       	cpi	r25, 0x0D	; 13
    5fca:	39 f4       	brne	.+14     	; 0x5fda <__vector_37+0x3c>
		recv3_buf.data[recv3_buf.nxfrd] = '\0';
    5fcc:	f9 01       	movw	r30, r18
    5fce:	e1 5b       	subi	r30, 0xB1	; 177
    5fd0:	f0 4d       	sbci	r31, 0xD0	; 208
    5fd2:	10 82       	st	Z, r1
		recv3_buf.done = YES;
    5fd4:	91 e0       	ldi	r25, 0x01	; 1
    5fd6:	90 93 4e 30 	sts	0x304E, r25	; 0x80304e <recv3_buf+0xff>
	}

	recv3_buf.nxfrd++;
    5fda:	8f 5f       	subi	r24, 0xFF	; 255
    5fdc:	80 93 4f 30 	sts	0x304F, r24	; 0x80304f <recv3_buf+0x100>

}
    5fe0:	ff 91       	pop	r31
    5fe2:	ef 91       	pop	r30
    5fe4:	9f 91       	pop	r25
    5fe6:	8f 91       	pop	r24
    5fe8:	3f 91       	pop	r19
    5fea:	2f 91       	pop	r18
    5fec:	0f 90       	pop	r0
    5fee:	0f be       	out	0x3f, r0	; 63
    5ff0:	0f 90       	pop	r0
    5ff2:	1f 90       	pop	r1
    5ff4:	18 95       	reti

00005ff6 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    5ff6:	1f 92       	push	r1
    5ff8:	0f 92       	push	r0
    5ffa:	0f b6       	in	r0, 0x3f	; 63
    5ffc:	0f 92       	push	r0
    5ffe:	11 24       	eor	r1, r1
    6000:	8f 93       	push	r24
    6002:	9f 93       	push	r25
    6004:	af 93       	push	r26
    6006:	bf 93       	push	r27
    6008:	cf 93       	push	r28
    600a:	df 93       	push	r29
    600c:	ef 93       	push	r30
    600e:	ff 93       	push	r31

	USART3.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    6010:	a0 e6       	ldi	r26, 0x60	; 96
    6012:	b8 e0       	ldi	r27, 0x08	; 8
    6014:	15 96       	adiw	r26, 0x05	; 5
    6016:	8c 91       	ld	r24, X
    6018:	15 97       	sbiw	r26, 0x05	; 5
    601a:	8f 7d       	andi	r24, 0xDF	; 223
    601c:	15 96       	adiw	r26, 0x05	; 5
    601e:	8c 93       	st	X, r24
    6020:	15 97       	sbiw	r26, 0x05	; 5
	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    6022:	c0 e5       	ldi	r28, 0x50	; 80
    6024:	d1 e3       	ldi	r29, 0x31	; 49
    6026:	e8 81       	ld	r30, Y
    6028:	81 e0       	ldi	r24, 0x01	; 1
    602a:	8e 0f       	add	r24, r30
    602c:	88 83       	st	Y, r24
    602e:	f0 e0       	ldi	r31, 0x00	; 0
    6030:	e0 5b       	subi	r30, 0xB0	; 176
    6032:	ff 4c       	sbci	r31, 0xCF	; 207
    6034:	90 81       	ld	r25, Z
    6036:	12 96       	adiw	r26, 0x02	; 2
    6038:	9c 93       	st	X, r25
	if (send3_buf.nxfrd < send3_buf.nbytes) {
    603a:	90 91 4e 31 	lds	r25, 0x314E	; 0x80314e <send3_buf+0xfe>
    603e:	89 17       	cp	r24, r25
    6040:	30 f4       	brcc	.+12     	; 0x604e <__vector_38+0x58>
		USART3.CTRLA |= USART_DREIE_bm;			// Turn on interrupts
    6042:	e0 e6       	ldi	r30, 0x60	; 96
    6044:	f8 e0       	ldi	r31, 0x08	; 8
    6046:	85 81       	ldd	r24, Z+5	; 0x05
    6048:	80 62       	ori	r24, 0x20	; 32
    604a:	85 83       	std	Z+5, r24	; 0x05
    604c:	03 c0       	rjmp	.+6      	; 0x6054 <__vector_38+0x5e>
	} else {
		send3_buf.done = YES;
    604e:	81 e0       	ldi	r24, 0x01	; 1
    6050:	80 93 4f 31 	sts	0x314F, r24	; 0x80314f <send3_buf+0xff>
	}

}
    6054:	ff 91       	pop	r31
    6056:	ef 91       	pop	r30
    6058:	df 91       	pop	r29
    605a:	cf 91       	pop	r28
    605c:	bf 91       	pop	r27
    605e:	af 91       	pop	r26
    6060:	9f 91       	pop	r25
    6062:	8f 91       	pop	r24
    6064:	0f 90       	pop	r0
    6066:	0f be       	out	0x3f, r0	; 63
    6068:	0f 90       	pop	r0
    606a:	1f 90       	pop	r1
    606c:	18 95       	reti

0000606e <reboot>:
#include "wdt.h"

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
    606e:	88 ed       	ldi	r24, 0xD8	; 216
    6070:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    6072:	81 e0       	ldi	r24, 0x01	; 1
    6074:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    6078:	08 95       	ret

0000607a <__vector_29>:

}

ISR(PORTF_PORT_vect)
{
    607a:	1f 92       	push	r1
    607c:	0f 92       	push	r0
    607e:	0f b6       	in	r0, 0x3f	; 63
    6080:	0f 92       	push	r0
    6082:	11 24       	eor	r1, r1
    6084:	2f 93       	push	r18
    6086:	3f 93       	push	r19
    6088:	4f 93       	push	r20
    608a:	5f 93       	push	r21
    608c:	6f 93       	push	r22
    608e:	7f 93       	push	r23
    6090:	8f 93       	push	r24
    6092:	9f 93       	push	r25
    6094:	af 93       	push	r26
    6096:	bf 93       	push	r27
    6098:	ef 93       	push	r30
    609a:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
    609c:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
    60a0:	86 ff       	sbrs	r24, 6
    60a2:	05 c0       	rjmp	.+10     	; 0x60ae <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
    60a4:	80 e4       	ldi	r24, 0x40	; 64
    60a6:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
    60aa:	0e 94 37 30 	call	0x606e	; 0x606e <reboot>
	}

}
    60ae:	ff 91       	pop	r31
    60b0:	ef 91       	pop	r30
    60b2:	bf 91       	pop	r27
    60b4:	af 91       	pop	r26
    60b6:	9f 91       	pop	r25
    60b8:	8f 91       	pop	r24
    60ba:	7f 91       	pop	r23
    60bc:	6f 91       	pop	r22
    60be:	5f 91       	pop	r21
    60c0:	4f 91       	pop	r20
    60c2:	3f 91       	pop	r19
    60c4:	2f 91       	pop	r18
    60c6:	0f 90       	pop	r0
    60c8:	0f be       	out	0x3f, r0	; 63
    60ca:	0f 90       	pop	r0
    60cc:	1f 90       	pop	r1
    60ce:	18 95       	reti

000060d0 <__subsf3>:
    60d0:	50 58       	subi	r21, 0x80	; 128

000060d2 <__addsf3>:
    60d2:	bb 27       	eor	r27, r27
    60d4:	aa 27       	eor	r26, r26
    60d6:	0e 94 80 30 	call	0x6100	; 0x6100 <__addsf3x>
    60da:	0c 94 fa 31 	jmp	0x63f4	; 0x63f4 <__fp_round>
    60de:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <__fp_pscA>
    60e2:	38 f0       	brcs	.+14     	; 0x60f2 <__addsf3+0x20>
    60e4:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__fp_pscB>
    60e8:	20 f0       	brcs	.+8      	; 0x60f2 <__addsf3+0x20>
    60ea:	39 f4       	brne	.+14     	; 0x60fa <__addsf3+0x28>
    60ec:	9f 3f       	cpi	r25, 0xFF	; 255
    60ee:	19 f4       	brne	.+6      	; 0x60f6 <__addsf3+0x24>
    60f0:	26 f4       	brtc	.+8      	; 0x60fa <__addsf3+0x28>
    60f2:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__fp_nan>
    60f6:	0e f4       	brtc	.+2      	; 0x60fa <__addsf3+0x28>
    60f8:	e0 95       	com	r30
    60fa:	e7 fb       	bst	r30, 7
    60fc:	0c 94 e3 31 	jmp	0x63c6	; 0x63c6 <__fp_inf>

00006100 <__addsf3x>:
    6100:	e9 2f       	mov	r30, r25
    6102:	0e 94 0b 32 	call	0x6416	; 0x6416 <__fp_split3>
    6106:	58 f3       	brcs	.-42     	; 0x60de <__addsf3+0xc>
    6108:	ba 17       	cp	r27, r26
    610a:	62 07       	cpc	r22, r18
    610c:	73 07       	cpc	r23, r19
    610e:	84 07       	cpc	r24, r20
    6110:	95 07       	cpc	r25, r21
    6112:	20 f0       	brcs	.+8      	; 0x611c <__addsf3x+0x1c>
    6114:	79 f4       	brne	.+30     	; 0x6134 <__addsf3x+0x34>
    6116:	a6 f5       	brtc	.+104    	; 0x6180 <__addsf3x+0x80>
    6118:	0c 94 2d 32 	jmp	0x645a	; 0x645a <__fp_zero>
    611c:	0e f4       	brtc	.+2      	; 0x6120 <__addsf3x+0x20>
    611e:	e0 95       	com	r30
    6120:	0b 2e       	mov	r0, r27
    6122:	ba 2f       	mov	r27, r26
    6124:	a0 2d       	mov	r26, r0
    6126:	0b 01       	movw	r0, r22
    6128:	b9 01       	movw	r22, r18
    612a:	90 01       	movw	r18, r0
    612c:	0c 01       	movw	r0, r24
    612e:	ca 01       	movw	r24, r20
    6130:	a0 01       	movw	r20, r0
    6132:	11 24       	eor	r1, r1
    6134:	ff 27       	eor	r31, r31
    6136:	59 1b       	sub	r21, r25
    6138:	99 f0       	breq	.+38     	; 0x6160 <__addsf3x+0x60>
    613a:	59 3f       	cpi	r21, 0xF9	; 249
    613c:	50 f4       	brcc	.+20     	; 0x6152 <__addsf3x+0x52>
    613e:	50 3e       	cpi	r21, 0xE0	; 224
    6140:	68 f1       	brcs	.+90     	; 0x619c <__addsf3x+0x9c>
    6142:	1a 16       	cp	r1, r26
    6144:	f0 40       	sbci	r31, 0x00	; 0
    6146:	a2 2f       	mov	r26, r18
    6148:	23 2f       	mov	r18, r19
    614a:	34 2f       	mov	r19, r20
    614c:	44 27       	eor	r20, r20
    614e:	58 5f       	subi	r21, 0xF8	; 248
    6150:	f3 cf       	rjmp	.-26     	; 0x6138 <__addsf3x+0x38>
    6152:	46 95       	lsr	r20
    6154:	37 95       	ror	r19
    6156:	27 95       	ror	r18
    6158:	a7 95       	ror	r26
    615a:	f0 40       	sbci	r31, 0x00	; 0
    615c:	53 95       	inc	r21
    615e:	c9 f7       	brne	.-14     	; 0x6152 <__addsf3x+0x52>
    6160:	7e f4       	brtc	.+30     	; 0x6180 <__addsf3x+0x80>
    6162:	1f 16       	cp	r1, r31
    6164:	ba 0b       	sbc	r27, r26
    6166:	62 0b       	sbc	r22, r18
    6168:	73 0b       	sbc	r23, r19
    616a:	84 0b       	sbc	r24, r20
    616c:	ba f0       	brmi	.+46     	; 0x619c <__addsf3x+0x9c>
    616e:	91 50       	subi	r25, 0x01	; 1
    6170:	a1 f0       	breq	.+40     	; 0x619a <__addsf3x+0x9a>
    6172:	ff 0f       	add	r31, r31
    6174:	bb 1f       	adc	r27, r27
    6176:	66 1f       	adc	r22, r22
    6178:	77 1f       	adc	r23, r23
    617a:	88 1f       	adc	r24, r24
    617c:	c2 f7       	brpl	.-16     	; 0x616e <__addsf3x+0x6e>
    617e:	0e c0       	rjmp	.+28     	; 0x619c <__addsf3x+0x9c>
    6180:	ba 0f       	add	r27, r26
    6182:	62 1f       	adc	r22, r18
    6184:	73 1f       	adc	r23, r19
    6186:	84 1f       	adc	r24, r20
    6188:	48 f4       	brcc	.+18     	; 0x619c <__addsf3x+0x9c>
    618a:	87 95       	ror	r24
    618c:	77 95       	ror	r23
    618e:	67 95       	ror	r22
    6190:	b7 95       	ror	r27
    6192:	f7 95       	ror	r31
    6194:	9e 3f       	cpi	r25, 0xFE	; 254
    6196:	08 f0       	brcs	.+2      	; 0x619a <__addsf3x+0x9a>
    6198:	b0 cf       	rjmp	.-160    	; 0x60fa <__addsf3+0x28>
    619a:	93 95       	inc	r25
    619c:	88 0f       	add	r24, r24
    619e:	08 f0       	brcs	.+2      	; 0x61a2 <__addsf3x+0xa2>
    61a0:	99 27       	eor	r25, r25
    61a2:	ee 0f       	add	r30, r30
    61a4:	97 95       	ror	r25
    61a6:	87 95       	ror	r24
    61a8:	08 95       	ret

000061aa <__cmpsf2>:
    61aa:	0e 94 bf 31 	call	0x637e	; 0x637e <__fp_cmp>
    61ae:	08 f4       	brcc	.+2      	; 0x61b2 <__cmpsf2+0x8>
    61b0:	81 e0       	ldi	r24, 0x01	; 1
    61b2:	08 95       	ret

000061b4 <__divsf3>:
    61b4:	0e 94 ee 30 	call	0x61dc	; 0x61dc <__divsf3x>
    61b8:	0c 94 fa 31 	jmp	0x63f4	; 0x63f4 <__fp_round>
    61bc:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__fp_pscB>
    61c0:	58 f0       	brcs	.+22     	; 0x61d8 <__divsf3+0x24>
    61c2:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <__fp_pscA>
    61c6:	40 f0       	brcs	.+16     	; 0x61d8 <__divsf3+0x24>
    61c8:	29 f4       	brne	.+10     	; 0x61d4 <__divsf3+0x20>
    61ca:	5f 3f       	cpi	r21, 0xFF	; 255
    61cc:	29 f0       	breq	.+10     	; 0x61d8 <__divsf3+0x24>
    61ce:	0c 94 e3 31 	jmp	0x63c6	; 0x63c6 <__fp_inf>
    61d2:	51 11       	cpse	r21, r1
    61d4:	0c 94 2e 32 	jmp	0x645c	; 0x645c <__fp_szero>
    61d8:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__fp_nan>

000061dc <__divsf3x>:
    61dc:	0e 94 0b 32 	call	0x6416	; 0x6416 <__fp_split3>
    61e0:	68 f3       	brcs	.-38     	; 0x61bc <__divsf3+0x8>

000061e2 <__divsf3_pse>:
    61e2:	99 23       	and	r25, r25
    61e4:	b1 f3       	breq	.-20     	; 0x61d2 <__divsf3+0x1e>
    61e6:	55 23       	and	r21, r21
    61e8:	91 f3       	breq	.-28     	; 0x61ce <__divsf3+0x1a>
    61ea:	95 1b       	sub	r25, r21
    61ec:	55 0b       	sbc	r21, r21
    61ee:	bb 27       	eor	r27, r27
    61f0:	aa 27       	eor	r26, r26
    61f2:	62 17       	cp	r22, r18
    61f4:	73 07       	cpc	r23, r19
    61f6:	84 07       	cpc	r24, r20
    61f8:	38 f0       	brcs	.+14     	; 0x6208 <__divsf3_pse+0x26>
    61fa:	9f 5f       	subi	r25, 0xFF	; 255
    61fc:	5f 4f       	sbci	r21, 0xFF	; 255
    61fe:	22 0f       	add	r18, r18
    6200:	33 1f       	adc	r19, r19
    6202:	44 1f       	adc	r20, r20
    6204:	aa 1f       	adc	r26, r26
    6206:	a9 f3       	breq	.-22     	; 0x61f2 <__divsf3_pse+0x10>
    6208:	35 d0       	rcall	.+106    	; 0x6274 <__divsf3_pse+0x92>
    620a:	0e 2e       	mov	r0, r30
    620c:	3a f0       	brmi	.+14     	; 0x621c <__divsf3_pse+0x3a>
    620e:	e0 e8       	ldi	r30, 0x80	; 128
    6210:	32 d0       	rcall	.+100    	; 0x6276 <__divsf3_pse+0x94>
    6212:	91 50       	subi	r25, 0x01	; 1
    6214:	50 40       	sbci	r21, 0x00	; 0
    6216:	e6 95       	lsr	r30
    6218:	00 1c       	adc	r0, r0
    621a:	ca f7       	brpl	.-14     	; 0x620e <__divsf3_pse+0x2c>
    621c:	2b d0       	rcall	.+86     	; 0x6274 <__divsf3_pse+0x92>
    621e:	fe 2f       	mov	r31, r30
    6220:	29 d0       	rcall	.+82     	; 0x6274 <__divsf3_pse+0x92>
    6222:	66 0f       	add	r22, r22
    6224:	77 1f       	adc	r23, r23
    6226:	88 1f       	adc	r24, r24
    6228:	bb 1f       	adc	r27, r27
    622a:	26 17       	cp	r18, r22
    622c:	37 07       	cpc	r19, r23
    622e:	48 07       	cpc	r20, r24
    6230:	ab 07       	cpc	r26, r27
    6232:	b0 e8       	ldi	r27, 0x80	; 128
    6234:	09 f0       	breq	.+2      	; 0x6238 <__divsf3_pse+0x56>
    6236:	bb 0b       	sbc	r27, r27
    6238:	80 2d       	mov	r24, r0
    623a:	bf 01       	movw	r22, r30
    623c:	ff 27       	eor	r31, r31
    623e:	93 58       	subi	r25, 0x83	; 131
    6240:	5f 4f       	sbci	r21, 0xFF	; 255
    6242:	3a f0       	brmi	.+14     	; 0x6252 <__divsf3_pse+0x70>
    6244:	9e 3f       	cpi	r25, 0xFE	; 254
    6246:	51 05       	cpc	r21, r1
    6248:	78 f0       	brcs	.+30     	; 0x6268 <__divsf3_pse+0x86>
    624a:	0c 94 e3 31 	jmp	0x63c6	; 0x63c6 <__fp_inf>
    624e:	0c 94 2e 32 	jmp	0x645c	; 0x645c <__fp_szero>
    6252:	5f 3f       	cpi	r21, 0xFF	; 255
    6254:	e4 f3       	brlt	.-8      	; 0x624e <__divsf3_pse+0x6c>
    6256:	98 3e       	cpi	r25, 0xE8	; 232
    6258:	d4 f3       	brlt	.-12     	; 0x624e <__divsf3_pse+0x6c>
    625a:	86 95       	lsr	r24
    625c:	77 95       	ror	r23
    625e:	67 95       	ror	r22
    6260:	b7 95       	ror	r27
    6262:	f7 95       	ror	r31
    6264:	9f 5f       	subi	r25, 0xFF	; 255
    6266:	c9 f7       	brne	.-14     	; 0x625a <__divsf3_pse+0x78>
    6268:	88 0f       	add	r24, r24
    626a:	91 1d       	adc	r25, r1
    626c:	96 95       	lsr	r25
    626e:	87 95       	ror	r24
    6270:	97 f9       	bld	r25, 7
    6272:	08 95       	ret
    6274:	e1 e0       	ldi	r30, 0x01	; 1
    6276:	66 0f       	add	r22, r22
    6278:	77 1f       	adc	r23, r23
    627a:	88 1f       	adc	r24, r24
    627c:	bb 1f       	adc	r27, r27
    627e:	62 17       	cp	r22, r18
    6280:	73 07       	cpc	r23, r19
    6282:	84 07       	cpc	r24, r20
    6284:	ba 07       	cpc	r27, r26
    6286:	20 f0       	brcs	.+8      	; 0x6290 <__divsf3_pse+0xae>
    6288:	62 1b       	sub	r22, r18
    628a:	73 0b       	sbc	r23, r19
    628c:	84 0b       	sbc	r24, r20
    628e:	ba 0b       	sbc	r27, r26
    6290:	ee 1f       	adc	r30, r30
    6292:	88 f7       	brcc	.-30     	; 0x6276 <__divsf3_pse+0x94>
    6294:	e0 95       	com	r30
    6296:	08 95       	ret

00006298 <__fixsfsi>:
    6298:	0e 94 53 31 	call	0x62a6	; 0x62a6 <__fixunssfsi>
    629c:	68 94       	set
    629e:	b1 11       	cpse	r27, r1
    62a0:	0c 94 2e 32 	jmp	0x645c	; 0x645c <__fp_szero>
    62a4:	08 95       	ret

000062a6 <__fixunssfsi>:
    62a6:	0e 94 13 32 	call	0x6426	; 0x6426 <__fp_splitA>
    62aa:	88 f0       	brcs	.+34     	; 0x62ce <__fixunssfsi+0x28>
    62ac:	9f 57       	subi	r25, 0x7F	; 127
    62ae:	98 f0       	brcs	.+38     	; 0x62d6 <__fixunssfsi+0x30>
    62b0:	b9 2f       	mov	r27, r25
    62b2:	99 27       	eor	r25, r25
    62b4:	b7 51       	subi	r27, 0x17	; 23
    62b6:	b0 f0       	brcs	.+44     	; 0x62e4 <__fixunssfsi+0x3e>
    62b8:	e1 f0       	breq	.+56     	; 0x62f2 <__fixunssfsi+0x4c>
    62ba:	66 0f       	add	r22, r22
    62bc:	77 1f       	adc	r23, r23
    62be:	88 1f       	adc	r24, r24
    62c0:	99 1f       	adc	r25, r25
    62c2:	1a f0       	brmi	.+6      	; 0x62ca <__fixunssfsi+0x24>
    62c4:	ba 95       	dec	r27
    62c6:	c9 f7       	brne	.-14     	; 0x62ba <__fixunssfsi+0x14>
    62c8:	14 c0       	rjmp	.+40     	; 0x62f2 <__fixunssfsi+0x4c>
    62ca:	b1 30       	cpi	r27, 0x01	; 1
    62cc:	91 f0       	breq	.+36     	; 0x62f2 <__fixunssfsi+0x4c>
    62ce:	0e 94 2d 32 	call	0x645a	; 0x645a <__fp_zero>
    62d2:	b1 e0       	ldi	r27, 0x01	; 1
    62d4:	08 95       	ret
    62d6:	0c 94 2d 32 	jmp	0x645a	; 0x645a <__fp_zero>
    62da:	67 2f       	mov	r22, r23
    62dc:	78 2f       	mov	r23, r24
    62de:	88 27       	eor	r24, r24
    62e0:	b8 5f       	subi	r27, 0xF8	; 248
    62e2:	39 f0       	breq	.+14     	; 0x62f2 <__fixunssfsi+0x4c>
    62e4:	b9 3f       	cpi	r27, 0xF9	; 249
    62e6:	cc f3       	brlt	.-14     	; 0x62da <__fixunssfsi+0x34>
    62e8:	86 95       	lsr	r24
    62ea:	77 95       	ror	r23
    62ec:	67 95       	ror	r22
    62ee:	b3 95       	inc	r27
    62f0:	d9 f7       	brne	.-10     	; 0x62e8 <__fixunssfsi+0x42>
    62f2:	3e f4       	brtc	.+14     	; 0x6302 <__fixunssfsi+0x5c>
    62f4:	90 95       	com	r25
    62f6:	80 95       	com	r24
    62f8:	70 95       	com	r23
    62fa:	61 95       	neg	r22
    62fc:	7f 4f       	sbci	r23, 0xFF	; 255
    62fe:	8f 4f       	sbci	r24, 0xFF	; 255
    6300:	9f 4f       	sbci	r25, 0xFF	; 255
    6302:	08 95       	ret

00006304 <__floatunsisf>:
    6304:	e8 94       	clt
    6306:	09 c0       	rjmp	.+18     	; 0x631a <__floatsisf+0x12>

00006308 <__floatsisf>:
    6308:	97 fb       	bst	r25, 7
    630a:	3e f4       	brtc	.+14     	; 0x631a <__floatsisf+0x12>
    630c:	90 95       	com	r25
    630e:	80 95       	com	r24
    6310:	70 95       	com	r23
    6312:	61 95       	neg	r22
    6314:	7f 4f       	sbci	r23, 0xFF	; 255
    6316:	8f 4f       	sbci	r24, 0xFF	; 255
    6318:	9f 4f       	sbci	r25, 0xFF	; 255
    631a:	99 23       	and	r25, r25
    631c:	a9 f0       	breq	.+42     	; 0x6348 <__floatsisf+0x40>
    631e:	f9 2f       	mov	r31, r25
    6320:	96 e9       	ldi	r25, 0x96	; 150
    6322:	bb 27       	eor	r27, r27
    6324:	93 95       	inc	r25
    6326:	f6 95       	lsr	r31
    6328:	87 95       	ror	r24
    632a:	77 95       	ror	r23
    632c:	67 95       	ror	r22
    632e:	b7 95       	ror	r27
    6330:	f1 11       	cpse	r31, r1
    6332:	f8 cf       	rjmp	.-16     	; 0x6324 <__floatsisf+0x1c>
    6334:	fa f4       	brpl	.+62     	; 0x6374 <__floatsisf+0x6c>
    6336:	bb 0f       	add	r27, r27
    6338:	11 f4       	brne	.+4      	; 0x633e <__floatsisf+0x36>
    633a:	60 ff       	sbrs	r22, 0
    633c:	1b c0       	rjmp	.+54     	; 0x6374 <__floatsisf+0x6c>
    633e:	6f 5f       	subi	r22, 0xFF	; 255
    6340:	7f 4f       	sbci	r23, 0xFF	; 255
    6342:	8f 4f       	sbci	r24, 0xFF	; 255
    6344:	9f 4f       	sbci	r25, 0xFF	; 255
    6346:	16 c0       	rjmp	.+44     	; 0x6374 <__floatsisf+0x6c>
    6348:	88 23       	and	r24, r24
    634a:	11 f0       	breq	.+4      	; 0x6350 <__floatsisf+0x48>
    634c:	96 e9       	ldi	r25, 0x96	; 150
    634e:	11 c0       	rjmp	.+34     	; 0x6372 <__floatsisf+0x6a>
    6350:	77 23       	and	r23, r23
    6352:	21 f0       	breq	.+8      	; 0x635c <__floatsisf+0x54>
    6354:	9e e8       	ldi	r25, 0x8E	; 142
    6356:	87 2f       	mov	r24, r23
    6358:	76 2f       	mov	r23, r22
    635a:	05 c0       	rjmp	.+10     	; 0x6366 <__floatsisf+0x5e>
    635c:	66 23       	and	r22, r22
    635e:	71 f0       	breq	.+28     	; 0x637c <__floatsisf+0x74>
    6360:	96 e8       	ldi	r25, 0x86	; 134
    6362:	86 2f       	mov	r24, r22
    6364:	70 e0       	ldi	r23, 0x00	; 0
    6366:	60 e0       	ldi	r22, 0x00	; 0
    6368:	2a f0       	brmi	.+10     	; 0x6374 <__floatsisf+0x6c>
    636a:	9a 95       	dec	r25
    636c:	66 0f       	add	r22, r22
    636e:	77 1f       	adc	r23, r23
    6370:	88 1f       	adc	r24, r24
    6372:	da f7       	brpl	.-10     	; 0x636a <__floatsisf+0x62>
    6374:	88 0f       	add	r24, r24
    6376:	96 95       	lsr	r25
    6378:	87 95       	ror	r24
    637a:	97 f9       	bld	r25, 7
    637c:	08 95       	ret

0000637e <__fp_cmp>:
    637e:	99 0f       	add	r25, r25
    6380:	00 08       	sbc	r0, r0
    6382:	55 0f       	add	r21, r21
    6384:	aa 0b       	sbc	r26, r26
    6386:	e0 e8       	ldi	r30, 0x80	; 128
    6388:	fe ef       	ldi	r31, 0xFE	; 254
    638a:	16 16       	cp	r1, r22
    638c:	17 06       	cpc	r1, r23
    638e:	e8 07       	cpc	r30, r24
    6390:	f9 07       	cpc	r31, r25
    6392:	c0 f0       	brcs	.+48     	; 0x63c4 <__fp_cmp+0x46>
    6394:	12 16       	cp	r1, r18
    6396:	13 06       	cpc	r1, r19
    6398:	e4 07       	cpc	r30, r20
    639a:	f5 07       	cpc	r31, r21
    639c:	98 f0       	brcs	.+38     	; 0x63c4 <__fp_cmp+0x46>
    639e:	62 1b       	sub	r22, r18
    63a0:	73 0b       	sbc	r23, r19
    63a2:	84 0b       	sbc	r24, r20
    63a4:	95 0b       	sbc	r25, r21
    63a6:	39 f4       	brne	.+14     	; 0x63b6 <__fp_cmp+0x38>
    63a8:	0a 26       	eor	r0, r26
    63aa:	61 f0       	breq	.+24     	; 0x63c4 <__fp_cmp+0x46>
    63ac:	23 2b       	or	r18, r19
    63ae:	24 2b       	or	r18, r20
    63b0:	25 2b       	or	r18, r21
    63b2:	21 f4       	brne	.+8      	; 0x63bc <__fp_cmp+0x3e>
    63b4:	08 95       	ret
    63b6:	0a 26       	eor	r0, r26
    63b8:	09 f4       	brne	.+2      	; 0x63bc <__fp_cmp+0x3e>
    63ba:	a1 40       	sbci	r26, 0x01	; 1
    63bc:	a6 95       	lsr	r26
    63be:	8f ef       	ldi	r24, 0xFF	; 255
    63c0:	81 1d       	adc	r24, r1
    63c2:	81 1d       	adc	r24, r1
    63c4:	08 95       	ret

000063c6 <__fp_inf>:
    63c6:	97 f9       	bld	r25, 7
    63c8:	9f 67       	ori	r25, 0x7F	; 127
    63ca:	80 e8       	ldi	r24, 0x80	; 128
    63cc:	70 e0       	ldi	r23, 0x00	; 0
    63ce:	60 e0       	ldi	r22, 0x00	; 0
    63d0:	08 95       	ret

000063d2 <__fp_nan>:
    63d2:	9f ef       	ldi	r25, 0xFF	; 255
    63d4:	80 ec       	ldi	r24, 0xC0	; 192
    63d6:	08 95       	ret

000063d8 <__fp_pscA>:
    63d8:	00 24       	eor	r0, r0
    63da:	0a 94       	dec	r0
    63dc:	16 16       	cp	r1, r22
    63de:	17 06       	cpc	r1, r23
    63e0:	18 06       	cpc	r1, r24
    63e2:	09 06       	cpc	r0, r25
    63e4:	08 95       	ret

000063e6 <__fp_pscB>:
    63e6:	00 24       	eor	r0, r0
    63e8:	0a 94       	dec	r0
    63ea:	12 16       	cp	r1, r18
    63ec:	13 06       	cpc	r1, r19
    63ee:	14 06       	cpc	r1, r20
    63f0:	05 06       	cpc	r0, r21
    63f2:	08 95       	ret

000063f4 <__fp_round>:
    63f4:	09 2e       	mov	r0, r25
    63f6:	03 94       	inc	r0
    63f8:	00 0c       	add	r0, r0
    63fa:	11 f4       	brne	.+4      	; 0x6400 <__fp_round+0xc>
    63fc:	88 23       	and	r24, r24
    63fe:	52 f0       	brmi	.+20     	; 0x6414 <__fp_round+0x20>
    6400:	bb 0f       	add	r27, r27
    6402:	40 f4       	brcc	.+16     	; 0x6414 <__fp_round+0x20>
    6404:	bf 2b       	or	r27, r31
    6406:	11 f4       	brne	.+4      	; 0x640c <__fp_round+0x18>
    6408:	60 ff       	sbrs	r22, 0
    640a:	04 c0       	rjmp	.+8      	; 0x6414 <__fp_round+0x20>
    640c:	6f 5f       	subi	r22, 0xFF	; 255
    640e:	7f 4f       	sbci	r23, 0xFF	; 255
    6410:	8f 4f       	sbci	r24, 0xFF	; 255
    6412:	9f 4f       	sbci	r25, 0xFF	; 255
    6414:	08 95       	ret

00006416 <__fp_split3>:
    6416:	57 fd       	sbrc	r21, 7
    6418:	90 58       	subi	r25, 0x80	; 128
    641a:	44 0f       	add	r20, r20
    641c:	55 1f       	adc	r21, r21
    641e:	59 f0       	breq	.+22     	; 0x6436 <__fp_splitA+0x10>
    6420:	5f 3f       	cpi	r21, 0xFF	; 255
    6422:	71 f0       	breq	.+28     	; 0x6440 <__fp_splitA+0x1a>
    6424:	47 95       	ror	r20

00006426 <__fp_splitA>:
    6426:	88 0f       	add	r24, r24
    6428:	97 fb       	bst	r25, 7
    642a:	99 1f       	adc	r25, r25
    642c:	61 f0       	breq	.+24     	; 0x6446 <__fp_splitA+0x20>
    642e:	9f 3f       	cpi	r25, 0xFF	; 255
    6430:	79 f0       	breq	.+30     	; 0x6450 <__fp_splitA+0x2a>
    6432:	87 95       	ror	r24
    6434:	08 95       	ret
    6436:	12 16       	cp	r1, r18
    6438:	13 06       	cpc	r1, r19
    643a:	14 06       	cpc	r1, r20
    643c:	55 1f       	adc	r21, r21
    643e:	f2 cf       	rjmp	.-28     	; 0x6424 <__fp_split3+0xe>
    6440:	46 95       	lsr	r20
    6442:	f1 df       	rcall	.-30     	; 0x6426 <__fp_splitA>
    6444:	08 c0       	rjmp	.+16     	; 0x6456 <__fp_splitA+0x30>
    6446:	16 16       	cp	r1, r22
    6448:	17 06       	cpc	r1, r23
    644a:	18 06       	cpc	r1, r24
    644c:	99 1f       	adc	r25, r25
    644e:	f1 cf       	rjmp	.-30     	; 0x6432 <__fp_splitA+0xc>
    6450:	86 95       	lsr	r24
    6452:	71 05       	cpc	r23, r1
    6454:	61 05       	cpc	r22, r1
    6456:	08 94       	sec
    6458:	08 95       	ret

0000645a <__fp_zero>:
    645a:	e8 94       	clt

0000645c <__fp_szero>:
    645c:	bb 27       	eor	r27, r27
    645e:	66 27       	eor	r22, r22
    6460:	77 27       	eor	r23, r23
    6462:	cb 01       	movw	r24, r22
    6464:	97 f9       	bld	r25, 7
    6466:	08 95       	ret

00006468 <__mulsf3>:
    6468:	0e 94 47 32 	call	0x648e	; 0x648e <__mulsf3x>
    646c:	0c 94 fa 31 	jmp	0x63f4	; 0x63f4 <__fp_round>
    6470:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <__fp_pscA>
    6474:	38 f0       	brcs	.+14     	; 0x6484 <__mulsf3+0x1c>
    6476:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__fp_pscB>
    647a:	20 f0       	brcs	.+8      	; 0x6484 <__mulsf3+0x1c>
    647c:	95 23       	and	r25, r21
    647e:	11 f0       	breq	.+4      	; 0x6484 <__mulsf3+0x1c>
    6480:	0c 94 e3 31 	jmp	0x63c6	; 0x63c6 <__fp_inf>
    6484:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__fp_nan>
    6488:	11 24       	eor	r1, r1
    648a:	0c 94 2e 32 	jmp	0x645c	; 0x645c <__fp_szero>

0000648e <__mulsf3x>:
    648e:	0e 94 0b 32 	call	0x6416	; 0x6416 <__fp_split3>
    6492:	70 f3       	brcs	.-36     	; 0x6470 <__mulsf3+0x8>

00006494 <__mulsf3_pse>:
    6494:	95 9f       	mul	r25, r21
    6496:	c1 f3       	breq	.-16     	; 0x6488 <__mulsf3+0x20>
    6498:	95 0f       	add	r25, r21
    649a:	50 e0       	ldi	r21, 0x00	; 0
    649c:	55 1f       	adc	r21, r21
    649e:	62 9f       	mul	r22, r18
    64a0:	f0 01       	movw	r30, r0
    64a2:	72 9f       	mul	r23, r18
    64a4:	bb 27       	eor	r27, r27
    64a6:	f0 0d       	add	r31, r0
    64a8:	b1 1d       	adc	r27, r1
    64aa:	63 9f       	mul	r22, r19
    64ac:	aa 27       	eor	r26, r26
    64ae:	f0 0d       	add	r31, r0
    64b0:	b1 1d       	adc	r27, r1
    64b2:	aa 1f       	adc	r26, r26
    64b4:	64 9f       	mul	r22, r20
    64b6:	66 27       	eor	r22, r22
    64b8:	b0 0d       	add	r27, r0
    64ba:	a1 1d       	adc	r26, r1
    64bc:	66 1f       	adc	r22, r22
    64be:	82 9f       	mul	r24, r18
    64c0:	22 27       	eor	r18, r18
    64c2:	b0 0d       	add	r27, r0
    64c4:	a1 1d       	adc	r26, r1
    64c6:	62 1f       	adc	r22, r18
    64c8:	73 9f       	mul	r23, r19
    64ca:	b0 0d       	add	r27, r0
    64cc:	a1 1d       	adc	r26, r1
    64ce:	62 1f       	adc	r22, r18
    64d0:	83 9f       	mul	r24, r19
    64d2:	a0 0d       	add	r26, r0
    64d4:	61 1d       	adc	r22, r1
    64d6:	22 1f       	adc	r18, r18
    64d8:	74 9f       	mul	r23, r20
    64da:	33 27       	eor	r19, r19
    64dc:	a0 0d       	add	r26, r0
    64de:	61 1d       	adc	r22, r1
    64e0:	23 1f       	adc	r18, r19
    64e2:	84 9f       	mul	r24, r20
    64e4:	60 0d       	add	r22, r0
    64e6:	21 1d       	adc	r18, r1
    64e8:	82 2f       	mov	r24, r18
    64ea:	76 2f       	mov	r23, r22
    64ec:	6a 2f       	mov	r22, r26
    64ee:	11 24       	eor	r1, r1
    64f0:	9f 57       	subi	r25, 0x7F	; 127
    64f2:	50 40       	sbci	r21, 0x00	; 0
    64f4:	9a f0       	brmi	.+38     	; 0x651c <__mulsf3_pse+0x88>
    64f6:	f1 f0       	breq	.+60     	; 0x6534 <__mulsf3_pse+0xa0>
    64f8:	88 23       	and	r24, r24
    64fa:	4a f0       	brmi	.+18     	; 0x650e <__mulsf3_pse+0x7a>
    64fc:	ee 0f       	add	r30, r30
    64fe:	ff 1f       	adc	r31, r31
    6500:	bb 1f       	adc	r27, r27
    6502:	66 1f       	adc	r22, r22
    6504:	77 1f       	adc	r23, r23
    6506:	88 1f       	adc	r24, r24
    6508:	91 50       	subi	r25, 0x01	; 1
    650a:	50 40       	sbci	r21, 0x00	; 0
    650c:	a9 f7       	brne	.-22     	; 0x64f8 <__mulsf3_pse+0x64>
    650e:	9e 3f       	cpi	r25, 0xFE	; 254
    6510:	51 05       	cpc	r21, r1
    6512:	80 f0       	brcs	.+32     	; 0x6534 <__mulsf3_pse+0xa0>
    6514:	0c 94 e3 31 	jmp	0x63c6	; 0x63c6 <__fp_inf>
    6518:	0c 94 2e 32 	jmp	0x645c	; 0x645c <__fp_szero>
    651c:	5f 3f       	cpi	r21, 0xFF	; 255
    651e:	e4 f3       	brlt	.-8      	; 0x6518 <__mulsf3_pse+0x84>
    6520:	98 3e       	cpi	r25, 0xE8	; 232
    6522:	d4 f3       	brlt	.-12     	; 0x6518 <__mulsf3_pse+0x84>
    6524:	86 95       	lsr	r24
    6526:	77 95       	ror	r23
    6528:	67 95       	ror	r22
    652a:	b7 95       	ror	r27
    652c:	f7 95       	ror	r31
    652e:	e7 95       	ror	r30
    6530:	9f 5f       	subi	r25, 0xFF	; 255
    6532:	c1 f7       	brne	.-16     	; 0x6524 <__mulsf3_pse+0x90>
    6534:	fe 2b       	or	r31, r30
    6536:	88 0f       	add	r24, r24
    6538:	91 1d       	adc	r25, r1
    653a:	96 95       	lsr	r25
    653c:	87 95       	ror	r24
    653e:	97 f9       	bld	r25, 7
    6540:	08 95       	ret

00006542 <vfprintf>:
    6542:	a0 e1       	ldi	r26, 0x10	; 16
    6544:	b0 e0       	ldi	r27, 0x00	; 0
    6546:	e7 ea       	ldi	r30, 0xA7	; 167
    6548:	f2 e3       	ldi	r31, 0x32	; 50
    654a:	0c 94 62 36 	jmp	0x6cc4	; 0x6cc4 <__prologue_saves__>
    654e:	7c 01       	movw	r14, r24
    6550:	1b 01       	movw	r2, r22
    6552:	6a 01       	movw	r12, r20
    6554:	fc 01       	movw	r30, r24
    6556:	16 82       	std	Z+6, r1	; 0x06
    6558:	17 82       	std	Z+7, r1	; 0x07
    655a:	83 81       	ldd	r24, Z+3	; 0x03
    655c:	81 ff       	sbrs	r24, 1
    655e:	44 c3       	rjmp	.+1672   	; 0x6be8 <vfprintf+0x6a6>
    6560:	9e 01       	movw	r18, r28
    6562:	2f 5f       	subi	r18, 0xFF	; 255
    6564:	3f 4f       	sbci	r19, 0xFF	; 255
    6566:	39 01       	movw	r6, r18
    6568:	f7 01       	movw	r30, r14
    656a:	93 81       	ldd	r25, Z+3	; 0x03
    656c:	f1 01       	movw	r30, r2
    656e:	93 fd       	sbrc	r25, 3
    6570:	85 91       	lpm	r24, Z+
    6572:	93 ff       	sbrs	r25, 3
    6574:	81 91       	ld	r24, Z+
    6576:	1f 01       	movw	r2, r30
    6578:	88 23       	and	r24, r24
    657a:	09 f4       	brne	.+2      	; 0x657e <vfprintf+0x3c>
    657c:	31 c3       	rjmp	.+1634   	; 0x6be0 <vfprintf+0x69e>
    657e:	85 32       	cpi	r24, 0x25	; 37
    6580:	39 f4       	brne	.+14     	; 0x6590 <vfprintf+0x4e>
    6582:	93 fd       	sbrc	r25, 3
    6584:	85 91       	lpm	r24, Z+
    6586:	93 ff       	sbrs	r25, 3
    6588:	81 91       	ld	r24, Z+
    658a:	1f 01       	movw	r2, r30
    658c:	85 32       	cpi	r24, 0x25	; 37
    658e:	39 f4       	brne	.+14     	; 0x659e <vfprintf+0x5c>
    6590:	b7 01       	movw	r22, r14
    6592:	90 e0       	ldi	r25, 0x00	; 0
    6594:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    6598:	56 01       	movw	r10, r12
    659a:	65 01       	movw	r12, r10
    659c:	e5 cf       	rjmp	.-54     	; 0x6568 <vfprintf+0x26>
    659e:	10 e0       	ldi	r17, 0x00	; 0
    65a0:	51 2c       	mov	r5, r1
    65a2:	91 2c       	mov	r9, r1
    65a4:	ff e1       	ldi	r31, 0x1F	; 31
    65a6:	f9 15       	cp	r31, r9
    65a8:	d8 f0       	brcs	.+54     	; 0x65e0 <vfprintf+0x9e>
    65aa:	8b 32       	cpi	r24, 0x2B	; 43
    65ac:	79 f0       	breq	.+30     	; 0x65cc <vfprintf+0x8a>
    65ae:	38 f4       	brcc	.+14     	; 0x65be <vfprintf+0x7c>
    65b0:	80 32       	cpi	r24, 0x20	; 32
    65b2:	79 f0       	breq	.+30     	; 0x65d2 <vfprintf+0x90>
    65b4:	83 32       	cpi	r24, 0x23	; 35
    65b6:	a1 f4       	brne	.+40     	; 0x65e0 <vfprintf+0x9e>
    65b8:	f9 2d       	mov	r31, r9
    65ba:	f0 61       	ori	r31, 0x10	; 16
    65bc:	2e c0       	rjmp	.+92     	; 0x661a <vfprintf+0xd8>
    65be:	8d 32       	cpi	r24, 0x2D	; 45
    65c0:	61 f0       	breq	.+24     	; 0x65da <vfprintf+0x98>
    65c2:	80 33       	cpi	r24, 0x30	; 48
    65c4:	69 f4       	brne	.+26     	; 0x65e0 <vfprintf+0x9e>
    65c6:	29 2d       	mov	r18, r9
    65c8:	21 60       	ori	r18, 0x01	; 1
    65ca:	2d c0       	rjmp	.+90     	; 0x6626 <vfprintf+0xe4>
    65cc:	39 2d       	mov	r19, r9
    65ce:	32 60       	ori	r19, 0x02	; 2
    65d0:	93 2e       	mov	r9, r19
    65d2:	89 2d       	mov	r24, r9
    65d4:	84 60       	ori	r24, 0x04	; 4
    65d6:	98 2e       	mov	r9, r24
    65d8:	2a c0       	rjmp	.+84     	; 0x662e <vfprintf+0xec>
    65da:	e9 2d       	mov	r30, r9
    65dc:	e8 60       	ori	r30, 0x08	; 8
    65de:	15 c0       	rjmp	.+42     	; 0x660a <vfprintf+0xc8>
    65e0:	97 fc       	sbrc	r9, 7
    65e2:	2d c0       	rjmp	.+90     	; 0x663e <vfprintf+0xfc>
    65e4:	20 ed       	ldi	r18, 0xD0	; 208
    65e6:	28 0f       	add	r18, r24
    65e8:	2a 30       	cpi	r18, 0x0A	; 10
    65ea:	88 f4       	brcc	.+34     	; 0x660e <vfprintf+0xcc>
    65ec:	96 fe       	sbrs	r9, 6
    65ee:	06 c0       	rjmp	.+12     	; 0x65fc <vfprintf+0xba>
    65f0:	3a e0       	ldi	r19, 0x0A	; 10
    65f2:	13 9f       	mul	r17, r19
    65f4:	20 0d       	add	r18, r0
    65f6:	11 24       	eor	r1, r1
    65f8:	12 2f       	mov	r17, r18
    65fa:	19 c0       	rjmp	.+50     	; 0x662e <vfprintf+0xec>
    65fc:	8a e0       	ldi	r24, 0x0A	; 10
    65fe:	58 9e       	mul	r5, r24
    6600:	20 0d       	add	r18, r0
    6602:	11 24       	eor	r1, r1
    6604:	52 2e       	mov	r5, r18
    6606:	e9 2d       	mov	r30, r9
    6608:	e0 62       	ori	r30, 0x20	; 32
    660a:	9e 2e       	mov	r9, r30
    660c:	10 c0       	rjmp	.+32     	; 0x662e <vfprintf+0xec>
    660e:	8e 32       	cpi	r24, 0x2E	; 46
    6610:	31 f4       	brne	.+12     	; 0x661e <vfprintf+0xdc>
    6612:	96 fc       	sbrc	r9, 6
    6614:	e5 c2       	rjmp	.+1482   	; 0x6be0 <vfprintf+0x69e>
    6616:	f9 2d       	mov	r31, r9
    6618:	f0 64       	ori	r31, 0x40	; 64
    661a:	9f 2e       	mov	r9, r31
    661c:	08 c0       	rjmp	.+16     	; 0x662e <vfprintf+0xec>
    661e:	8c 36       	cpi	r24, 0x6C	; 108
    6620:	21 f4       	brne	.+8      	; 0x662a <vfprintf+0xe8>
    6622:	29 2d       	mov	r18, r9
    6624:	20 68       	ori	r18, 0x80	; 128
    6626:	92 2e       	mov	r9, r18
    6628:	02 c0       	rjmp	.+4      	; 0x662e <vfprintf+0xec>
    662a:	88 36       	cpi	r24, 0x68	; 104
    662c:	41 f4       	brne	.+16     	; 0x663e <vfprintf+0xfc>
    662e:	f1 01       	movw	r30, r2
    6630:	93 fd       	sbrc	r25, 3
    6632:	85 91       	lpm	r24, Z+
    6634:	93 ff       	sbrs	r25, 3
    6636:	81 91       	ld	r24, Z+
    6638:	1f 01       	movw	r2, r30
    663a:	81 11       	cpse	r24, r1
    663c:	b3 cf       	rjmp	.-154    	; 0x65a4 <vfprintf+0x62>
    663e:	9b eb       	ldi	r25, 0xBB	; 187
    6640:	98 0f       	add	r25, r24
    6642:	93 30       	cpi	r25, 0x03	; 3
    6644:	20 f4       	brcc	.+8      	; 0x664e <vfprintf+0x10c>
    6646:	99 2d       	mov	r25, r9
    6648:	90 61       	ori	r25, 0x10	; 16
    664a:	80 5e       	subi	r24, 0xE0	; 224
    664c:	07 c0       	rjmp	.+14     	; 0x665c <vfprintf+0x11a>
    664e:	9b e9       	ldi	r25, 0x9B	; 155
    6650:	98 0f       	add	r25, r24
    6652:	93 30       	cpi	r25, 0x03	; 3
    6654:	08 f0       	brcs	.+2      	; 0x6658 <vfprintf+0x116>
    6656:	66 c1       	rjmp	.+716    	; 0x6924 <vfprintf+0x3e2>
    6658:	99 2d       	mov	r25, r9
    665a:	9f 7e       	andi	r25, 0xEF	; 239
    665c:	96 ff       	sbrs	r25, 6
    665e:	16 e0       	ldi	r17, 0x06	; 6
    6660:	9f 73       	andi	r25, 0x3F	; 63
    6662:	99 2e       	mov	r9, r25
    6664:	85 36       	cpi	r24, 0x65	; 101
    6666:	19 f4       	brne	.+6      	; 0x666e <vfprintf+0x12c>
    6668:	90 64       	ori	r25, 0x40	; 64
    666a:	99 2e       	mov	r9, r25
    666c:	08 c0       	rjmp	.+16     	; 0x667e <vfprintf+0x13c>
    666e:	86 36       	cpi	r24, 0x66	; 102
    6670:	21 f4       	brne	.+8      	; 0x667a <vfprintf+0x138>
    6672:	39 2f       	mov	r19, r25
    6674:	30 68       	ori	r19, 0x80	; 128
    6676:	93 2e       	mov	r9, r19
    6678:	02 c0       	rjmp	.+4      	; 0x667e <vfprintf+0x13c>
    667a:	11 11       	cpse	r17, r1
    667c:	11 50       	subi	r17, 0x01	; 1
    667e:	97 fe       	sbrs	r9, 7
    6680:	07 c0       	rjmp	.+14     	; 0x6690 <vfprintf+0x14e>
    6682:	1c 33       	cpi	r17, 0x3C	; 60
    6684:	50 f4       	brcc	.+20     	; 0x669a <vfprintf+0x158>
    6686:	44 24       	eor	r4, r4
    6688:	43 94       	inc	r4
    668a:	41 0e       	add	r4, r17
    668c:	27 e0       	ldi	r18, 0x07	; 7
    668e:	0b c0       	rjmp	.+22     	; 0x66a6 <vfprintf+0x164>
    6690:	18 30       	cpi	r17, 0x08	; 8
    6692:	38 f0       	brcs	.+14     	; 0x66a2 <vfprintf+0x160>
    6694:	27 e0       	ldi	r18, 0x07	; 7
    6696:	17 e0       	ldi	r17, 0x07	; 7
    6698:	05 c0       	rjmp	.+10     	; 0x66a4 <vfprintf+0x162>
    669a:	27 e0       	ldi	r18, 0x07	; 7
    669c:	9c e3       	ldi	r25, 0x3C	; 60
    669e:	49 2e       	mov	r4, r25
    66a0:	02 c0       	rjmp	.+4      	; 0x66a6 <vfprintf+0x164>
    66a2:	21 2f       	mov	r18, r17
    66a4:	41 2c       	mov	r4, r1
    66a6:	56 01       	movw	r10, r12
    66a8:	84 e0       	ldi	r24, 0x04	; 4
    66aa:	a8 0e       	add	r10, r24
    66ac:	b1 1c       	adc	r11, r1
    66ae:	f6 01       	movw	r30, r12
    66b0:	60 81       	ld	r22, Z
    66b2:	71 81       	ldd	r23, Z+1	; 0x01
    66b4:	82 81       	ldd	r24, Z+2	; 0x02
    66b6:	93 81       	ldd	r25, Z+3	; 0x03
    66b8:	04 2d       	mov	r16, r4
    66ba:	a3 01       	movw	r20, r6
    66bc:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <__ftoa_engine>
    66c0:	6c 01       	movw	r12, r24
    66c2:	f9 81       	ldd	r31, Y+1	; 0x01
    66c4:	fc 87       	std	Y+12, r31	; 0x0c
    66c6:	f0 ff       	sbrs	r31, 0
    66c8:	02 c0       	rjmp	.+4      	; 0x66ce <vfprintf+0x18c>
    66ca:	f3 ff       	sbrs	r31, 3
    66cc:	06 c0       	rjmp	.+12     	; 0x66da <vfprintf+0x198>
    66ce:	91 fc       	sbrc	r9, 1
    66d0:	06 c0       	rjmp	.+12     	; 0x66de <vfprintf+0x19c>
    66d2:	92 fe       	sbrs	r9, 2
    66d4:	06 c0       	rjmp	.+12     	; 0x66e2 <vfprintf+0x1a0>
    66d6:	00 e2       	ldi	r16, 0x20	; 32
    66d8:	05 c0       	rjmp	.+10     	; 0x66e4 <vfprintf+0x1a2>
    66da:	0d e2       	ldi	r16, 0x2D	; 45
    66dc:	03 c0       	rjmp	.+6      	; 0x66e4 <vfprintf+0x1a2>
    66de:	0b e2       	ldi	r16, 0x2B	; 43
    66e0:	01 c0       	rjmp	.+2      	; 0x66e4 <vfprintf+0x1a2>
    66e2:	00 e0       	ldi	r16, 0x00	; 0
    66e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    66e6:	8c 70       	andi	r24, 0x0C	; 12
    66e8:	19 f0       	breq	.+6      	; 0x66f0 <vfprintf+0x1ae>
    66ea:	01 11       	cpse	r16, r1
    66ec:	5a c2       	rjmp	.+1204   	; 0x6ba2 <vfprintf+0x660>
    66ee:	9b c2       	rjmp	.+1334   	; 0x6c26 <vfprintf+0x6e4>
    66f0:	97 fe       	sbrs	r9, 7
    66f2:	10 c0       	rjmp	.+32     	; 0x6714 <vfprintf+0x1d2>
    66f4:	4c 0c       	add	r4, r12
    66f6:	fc 85       	ldd	r31, Y+12	; 0x0c
    66f8:	f4 ff       	sbrs	r31, 4
    66fa:	04 c0       	rjmp	.+8      	; 0x6704 <vfprintf+0x1c2>
    66fc:	8a 81       	ldd	r24, Y+2	; 0x02
    66fe:	81 33       	cpi	r24, 0x31	; 49
    6700:	09 f4       	brne	.+2      	; 0x6704 <vfprintf+0x1c2>
    6702:	4a 94       	dec	r4
    6704:	14 14       	cp	r1, r4
    6706:	74 f5       	brge	.+92     	; 0x6764 <vfprintf+0x222>
    6708:	28 e0       	ldi	r18, 0x08	; 8
    670a:	24 15       	cp	r18, r4
    670c:	78 f5       	brcc	.+94     	; 0x676c <vfprintf+0x22a>
    670e:	88 e0       	ldi	r24, 0x08	; 8
    6710:	48 2e       	mov	r4, r24
    6712:	2c c0       	rjmp	.+88     	; 0x676c <vfprintf+0x22a>
    6714:	96 fc       	sbrc	r9, 6
    6716:	2a c0       	rjmp	.+84     	; 0x676c <vfprintf+0x22a>
    6718:	81 2f       	mov	r24, r17
    671a:	90 e0       	ldi	r25, 0x00	; 0
    671c:	8c 15       	cp	r24, r12
    671e:	9d 05       	cpc	r25, r13
    6720:	9c f0       	brlt	.+38     	; 0x6748 <vfprintf+0x206>
    6722:	3c ef       	ldi	r19, 0xFC	; 252
    6724:	c3 16       	cp	r12, r19
    6726:	3f ef       	ldi	r19, 0xFF	; 255
    6728:	d3 06       	cpc	r13, r19
    672a:	74 f0       	brlt	.+28     	; 0x6748 <vfprintf+0x206>
    672c:	89 2d       	mov	r24, r9
    672e:	80 68       	ori	r24, 0x80	; 128
    6730:	98 2e       	mov	r9, r24
    6732:	0a c0       	rjmp	.+20     	; 0x6748 <vfprintf+0x206>
    6734:	e2 e0       	ldi	r30, 0x02	; 2
    6736:	f0 e0       	ldi	r31, 0x00	; 0
    6738:	ec 0f       	add	r30, r28
    673a:	fd 1f       	adc	r31, r29
    673c:	e1 0f       	add	r30, r17
    673e:	f1 1d       	adc	r31, r1
    6740:	80 81       	ld	r24, Z
    6742:	80 33       	cpi	r24, 0x30	; 48
    6744:	19 f4       	brne	.+6      	; 0x674c <vfprintf+0x20a>
    6746:	11 50       	subi	r17, 0x01	; 1
    6748:	11 11       	cpse	r17, r1
    674a:	f4 cf       	rjmp	.-24     	; 0x6734 <vfprintf+0x1f2>
    674c:	97 fe       	sbrs	r9, 7
    674e:	0e c0       	rjmp	.+28     	; 0x676c <vfprintf+0x22a>
    6750:	44 24       	eor	r4, r4
    6752:	43 94       	inc	r4
    6754:	41 0e       	add	r4, r17
    6756:	81 2f       	mov	r24, r17
    6758:	90 e0       	ldi	r25, 0x00	; 0
    675a:	c8 16       	cp	r12, r24
    675c:	d9 06       	cpc	r13, r25
    675e:	2c f4       	brge	.+10     	; 0x676a <vfprintf+0x228>
    6760:	1c 19       	sub	r17, r12
    6762:	04 c0       	rjmp	.+8      	; 0x676c <vfprintf+0x22a>
    6764:	44 24       	eor	r4, r4
    6766:	43 94       	inc	r4
    6768:	01 c0       	rjmp	.+2      	; 0x676c <vfprintf+0x22a>
    676a:	10 e0       	ldi	r17, 0x00	; 0
    676c:	97 fe       	sbrs	r9, 7
    676e:	06 c0       	rjmp	.+12     	; 0x677c <vfprintf+0x23a>
    6770:	1c 14       	cp	r1, r12
    6772:	1d 04       	cpc	r1, r13
    6774:	34 f4       	brge	.+12     	; 0x6782 <vfprintf+0x240>
    6776:	c6 01       	movw	r24, r12
    6778:	01 96       	adiw	r24, 0x01	; 1
    677a:	05 c0       	rjmp	.+10     	; 0x6786 <vfprintf+0x244>
    677c:	85 e0       	ldi	r24, 0x05	; 5
    677e:	90 e0       	ldi	r25, 0x00	; 0
    6780:	02 c0       	rjmp	.+4      	; 0x6786 <vfprintf+0x244>
    6782:	81 e0       	ldi	r24, 0x01	; 1
    6784:	90 e0       	ldi	r25, 0x00	; 0
    6786:	01 11       	cpse	r16, r1
    6788:	01 96       	adiw	r24, 0x01	; 1
    678a:	11 23       	and	r17, r17
    678c:	31 f0       	breq	.+12     	; 0x679a <vfprintf+0x258>
    678e:	21 2f       	mov	r18, r17
    6790:	30 e0       	ldi	r19, 0x00	; 0
    6792:	2f 5f       	subi	r18, 0xFF	; 255
    6794:	3f 4f       	sbci	r19, 0xFF	; 255
    6796:	82 0f       	add	r24, r18
    6798:	93 1f       	adc	r25, r19
    679a:	25 2d       	mov	r18, r5
    679c:	30 e0       	ldi	r19, 0x00	; 0
    679e:	82 17       	cp	r24, r18
    67a0:	93 07       	cpc	r25, r19
    67a2:	14 f4       	brge	.+4      	; 0x67a8 <vfprintf+0x266>
    67a4:	58 1a       	sub	r5, r24
    67a6:	01 c0       	rjmp	.+2      	; 0x67aa <vfprintf+0x268>
    67a8:	51 2c       	mov	r5, r1
    67aa:	89 2d       	mov	r24, r9
    67ac:	89 70       	andi	r24, 0x09	; 9
    67ae:	49 f4       	brne	.+18     	; 0x67c2 <vfprintf+0x280>
    67b0:	55 20       	and	r5, r5
    67b2:	39 f0       	breq	.+14     	; 0x67c2 <vfprintf+0x280>
    67b4:	b7 01       	movw	r22, r14
    67b6:	80 e2       	ldi	r24, 0x20	; 32
    67b8:	90 e0       	ldi	r25, 0x00	; 0
    67ba:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    67be:	5a 94       	dec	r5
    67c0:	f7 cf       	rjmp	.-18     	; 0x67b0 <vfprintf+0x26e>
    67c2:	00 23       	and	r16, r16
    67c4:	29 f0       	breq	.+10     	; 0x67d0 <vfprintf+0x28e>
    67c6:	b7 01       	movw	r22, r14
    67c8:	80 2f       	mov	r24, r16
    67ca:	90 e0       	ldi	r25, 0x00	; 0
    67cc:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    67d0:	93 fc       	sbrc	r9, 3
    67d2:	09 c0       	rjmp	.+18     	; 0x67e6 <vfprintf+0x2a4>
    67d4:	55 20       	and	r5, r5
    67d6:	39 f0       	breq	.+14     	; 0x67e6 <vfprintf+0x2a4>
    67d8:	b7 01       	movw	r22, r14
    67da:	80 e3       	ldi	r24, 0x30	; 48
    67dc:	90 e0       	ldi	r25, 0x00	; 0
    67de:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    67e2:	5a 94       	dec	r5
    67e4:	f7 cf       	rjmp	.-18     	; 0x67d4 <vfprintf+0x292>
    67e6:	97 fe       	sbrs	r9, 7
    67e8:	4c c0       	rjmp	.+152    	; 0x6882 <vfprintf+0x340>
    67ea:	46 01       	movw	r8, r12
    67ec:	d7 fe       	sbrs	r13, 7
    67ee:	02 c0       	rjmp	.+4      	; 0x67f4 <vfprintf+0x2b2>
    67f0:	81 2c       	mov	r8, r1
    67f2:	91 2c       	mov	r9, r1
    67f4:	c6 01       	movw	r24, r12
    67f6:	88 19       	sub	r24, r8
    67f8:	99 09       	sbc	r25, r9
    67fa:	f3 01       	movw	r30, r6
    67fc:	e8 0f       	add	r30, r24
    67fe:	f9 1f       	adc	r31, r25
    6800:	ed 87       	std	Y+13, r30	; 0x0d
    6802:	fe 87       	std	Y+14, r31	; 0x0e
    6804:	96 01       	movw	r18, r12
    6806:	24 19       	sub	r18, r4
    6808:	31 09       	sbc	r19, r1
    680a:	2f 87       	std	Y+15, r18	; 0x0f
    680c:	38 8b       	std	Y+16, r19	; 0x10
    680e:	01 2f       	mov	r16, r17
    6810:	10 e0       	ldi	r17, 0x00	; 0
    6812:	11 95       	neg	r17
    6814:	01 95       	neg	r16
    6816:	11 09       	sbc	r17, r1
    6818:	3f ef       	ldi	r19, 0xFF	; 255
    681a:	83 16       	cp	r8, r19
    681c:	93 06       	cpc	r9, r19
    681e:	29 f4       	brne	.+10     	; 0x682a <vfprintf+0x2e8>
    6820:	b7 01       	movw	r22, r14
    6822:	8e e2       	ldi	r24, 0x2E	; 46
    6824:	90 e0       	ldi	r25, 0x00	; 0
    6826:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    682a:	c8 14       	cp	r12, r8
    682c:	d9 04       	cpc	r13, r9
    682e:	4c f0       	brlt	.+18     	; 0x6842 <vfprintf+0x300>
    6830:	8f 85       	ldd	r24, Y+15	; 0x0f
    6832:	98 89       	ldd	r25, Y+16	; 0x10
    6834:	88 15       	cp	r24, r8
    6836:	99 05       	cpc	r25, r9
    6838:	24 f4       	brge	.+8      	; 0x6842 <vfprintf+0x300>
    683a:	ed 85       	ldd	r30, Y+13	; 0x0d
    683c:	fe 85       	ldd	r31, Y+14	; 0x0e
    683e:	81 81       	ldd	r24, Z+1	; 0x01
    6840:	01 c0       	rjmp	.+2      	; 0x6844 <vfprintf+0x302>
    6842:	80 e3       	ldi	r24, 0x30	; 48
    6844:	f1 e0       	ldi	r31, 0x01	; 1
    6846:	8f 1a       	sub	r8, r31
    6848:	91 08       	sbc	r9, r1
    684a:	2d 85       	ldd	r18, Y+13	; 0x0d
    684c:	3e 85       	ldd	r19, Y+14	; 0x0e
    684e:	2f 5f       	subi	r18, 0xFF	; 255
    6850:	3f 4f       	sbci	r19, 0xFF	; 255
    6852:	2d 87       	std	Y+13, r18	; 0x0d
    6854:	3e 87       	std	Y+14, r19	; 0x0e
    6856:	80 16       	cp	r8, r16
    6858:	91 06       	cpc	r9, r17
    685a:	2c f0       	brlt	.+10     	; 0x6866 <vfprintf+0x324>
    685c:	b7 01       	movw	r22, r14
    685e:	90 e0       	ldi	r25, 0x00	; 0
    6860:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    6864:	d9 cf       	rjmp	.-78     	; 0x6818 <vfprintf+0x2d6>
    6866:	c8 14       	cp	r12, r8
    6868:	d9 04       	cpc	r13, r9
    686a:	41 f4       	brne	.+16     	; 0x687c <vfprintf+0x33a>
    686c:	9a 81       	ldd	r25, Y+2	; 0x02
    686e:	96 33       	cpi	r25, 0x36	; 54
    6870:	20 f4       	brcc	.+8      	; 0x687a <vfprintf+0x338>
    6872:	95 33       	cpi	r25, 0x35	; 53
    6874:	19 f4       	brne	.+6      	; 0x687c <vfprintf+0x33a>
    6876:	3c 85       	ldd	r19, Y+12	; 0x0c
    6878:	34 ff       	sbrs	r19, 4
    687a:	81 e3       	ldi	r24, 0x31	; 49
    687c:	b7 01       	movw	r22, r14
    687e:	90 e0       	ldi	r25, 0x00	; 0
    6880:	4e c0       	rjmp	.+156    	; 0x691e <vfprintf+0x3dc>
    6882:	8a 81       	ldd	r24, Y+2	; 0x02
    6884:	81 33       	cpi	r24, 0x31	; 49
    6886:	19 f0       	breq	.+6      	; 0x688e <vfprintf+0x34c>
    6888:	9c 85       	ldd	r25, Y+12	; 0x0c
    688a:	9f 7e       	andi	r25, 0xEF	; 239
    688c:	9c 87       	std	Y+12, r25	; 0x0c
    688e:	b7 01       	movw	r22, r14
    6890:	90 e0       	ldi	r25, 0x00	; 0
    6892:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    6896:	11 11       	cpse	r17, r1
    6898:	05 c0       	rjmp	.+10     	; 0x68a4 <vfprintf+0x362>
    689a:	94 fc       	sbrc	r9, 4
    689c:	18 c0       	rjmp	.+48     	; 0x68ce <vfprintf+0x38c>
    689e:	85 e6       	ldi	r24, 0x65	; 101
    68a0:	90 e0       	ldi	r25, 0x00	; 0
    68a2:	17 c0       	rjmp	.+46     	; 0x68d2 <vfprintf+0x390>
    68a4:	b7 01       	movw	r22, r14
    68a6:	8e e2       	ldi	r24, 0x2E	; 46
    68a8:	90 e0       	ldi	r25, 0x00	; 0
    68aa:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    68ae:	1e 5f       	subi	r17, 0xFE	; 254
    68b0:	82 e0       	ldi	r24, 0x02	; 2
    68b2:	01 e0       	ldi	r16, 0x01	; 1
    68b4:	08 0f       	add	r16, r24
    68b6:	f3 01       	movw	r30, r6
    68b8:	e8 0f       	add	r30, r24
    68ba:	f1 1d       	adc	r31, r1
    68bc:	80 81       	ld	r24, Z
    68be:	b7 01       	movw	r22, r14
    68c0:	90 e0       	ldi	r25, 0x00	; 0
    68c2:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    68c6:	80 2f       	mov	r24, r16
    68c8:	01 13       	cpse	r16, r17
    68ca:	f3 cf       	rjmp	.-26     	; 0x68b2 <vfprintf+0x370>
    68cc:	e6 cf       	rjmp	.-52     	; 0x689a <vfprintf+0x358>
    68ce:	85 e4       	ldi	r24, 0x45	; 69
    68d0:	90 e0       	ldi	r25, 0x00	; 0
    68d2:	b7 01       	movw	r22, r14
    68d4:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    68d8:	d7 fc       	sbrc	r13, 7
    68da:	06 c0       	rjmp	.+12     	; 0x68e8 <vfprintf+0x3a6>
    68dc:	c1 14       	cp	r12, r1
    68de:	d1 04       	cpc	r13, r1
    68e0:	41 f4       	brne	.+16     	; 0x68f2 <vfprintf+0x3b0>
    68e2:	ec 85       	ldd	r30, Y+12	; 0x0c
    68e4:	e4 ff       	sbrs	r30, 4
    68e6:	05 c0       	rjmp	.+10     	; 0x68f2 <vfprintf+0x3b0>
    68e8:	d1 94       	neg	r13
    68ea:	c1 94       	neg	r12
    68ec:	d1 08       	sbc	r13, r1
    68ee:	8d e2       	ldi	r24, 0x2D	; 45
    68f0:	01 c0       	rjmp	.+2      	; 0x68f4 <vfprintf+0x3b2>
    68f2:	8b e2       	ldi	r24, 0x2B	; 43
    68f4:	b7 01       	movw	r22, r14
    68f6:	90 e0       	ldi	r25, 0x00	; 0
    68f8:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    68fc:	80 e3       	ldi	r24, 0x30	; 48
    68fe:	2a e0       	ldi	r18, 0x0A	; 10
    6900:	c2 16       	cp	r12, r18
    6902:	d1 04       	cpc	r13, r1
    6904:	2c f0       	brlt	.+10     	; 0x6910 <vfprintf+0x3ce>
    6906:	8f 5f       	subi	r24, 0xFF	; 255
    6908:	fa e0       	ldi	r31, 0x0A	; 10
    690a:	cf 1a       	sub	r12, r31
    690c:	d1 08       	sbc	r13, r1
    690e:	f7 cf       	rjmp	.-18     	; 0x68fe <vfprintf+0x3bc>
    6910:	b7 01       	movw	r22, r14
    6912:	90 e0       	ldi	r25, 0x00	; 0
    6914:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    6918:	b7 01       	movw	r22, r14
    691a:	c6 01       	movw	r24, r12
    691c:	c0 96       	adiw	r24, 0x30	; 48
    691e:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    6922:	54 c1       	rjmp	.+680    	; 0x6bcc <vfprintf+0x68a>
    6924:	83 36       	cpi	r24, 0x63	; 99
    6926:	31 f0       	breq	.+12     	; 0x6934 <vfprintf+0x3f2>
    6928:	83 37       	cpi	r24, 0x73	; 115
    692a:	79 f0       	breq	.+30     	; 0x694a <vfprintf+0x408>
    692c:	83 35       	cpi	r24, 0x53	; 83
    692e:	09 f0       	breq	.+2      	; 0x6932 <vfprintf+0x3f0>
    6930:	56 c0       	rjmp	.+172    	; 0x69de <vfprintf+0x49c>
    6932:	20 c0       	rjmp	.+64     	; 0x6974 <vfprintf+0x432>
    6934:	56 01       	movw	r10, r12
    6936:	32 e0       	ldi	r19, 0x02	; 2
    6938:	a3 0e       	add	r10, r19
    693a:	b1 1c       	adc	r11, r1
    693c:	f6 01       	movw	r30, r12
    693e:	80 81       	ld	r24, Z
    6940:	89 83       	std	Y+1, r24	; 0x01
    6942:	01 e0       	ldi	r16, 0x01	; 1
    6944:	10 e0       	ldi	r17, 0x00	; 0
    6946:	63 01       	movw	r12, r6
    6948:	12 c0       	rjmp	.+36     	; 0x696e <vfprintf+0x42c>
    694a:	56 01       	movw	r10, r12
    694c:	f2 e0       	ldi	r31, 0x02	; 2
    694e:	af 0e       	add	r10, r31
    6950:	b1 1c       	adc	r11, r1
    6952:	f6 01       	movw	r30, r12
    6954:	c0 80       	ld	r12, Z
    6956:	d1 80       	ldd	r13, Z+1	; 0x01
    6958:	96 fe       	sbrs	r9, 6
    695a:	03 c0       	rjmp	.+6      	; 0x6962 <vfprintf+0x420>
    695c:	61 2f       	mov	r22, r17
    695e:	70 e0       	ldi	r23, 0x00	; 0
    6960:	02 c0       	rjmp	.+4      	; 0x6966 <vfprintf+0x424>
    6962:	6f ef       	ldi	r22, 0xFF	; 255
    6964:	7f ef       	ldi	r23, 0xFF	; 255
    6966:	c6 01       	movw	r24, r12
    6968:	0e 94 12 38 	call	0x7024	; 0x7024 <strnlen>
    696c:	8c 01       	movw	r16, r24
    696e:	f9 2d       	mov	r31, r9
    6970:	ff 77       	andi	r31, 0x7F	; 127
    6972:	14 c0       	rjmp	.+40     	; 0x699c <vfprintf+0x45a>
    6974:	56 01       	movw	r10, r12
    6976:	22 e0       	ldi	r18, 0x02	; 2
    6978:	a2 0e       	add	r10, r18
    697a:	b1 1c       	adc	r11, r1
    697c:	f6 01       	movw	r30, r12
    697e:	c0 80       	ld	r12, Z
    6980:	d1 80       	ldd	r13, Z+1	; 0x01
    6982:	96 fe       	sbrs	r9, 6
    6984:	03 c0       	rjmp	.+6      	; 0x698c <vfprintf+0x44a>
    6986:	61 2f       	mov	r22, r17
    6988:	70 e0       	ldi	r23, 0x00	; 0
    698a:	02 c0       	rjmp	.+4      	; 0x6990 <vfprintf+0x44e>
    698c:	6f ef       	ldi	r22, 0xFF	; 255
    698e:	7f ef       	ldi	r23, 0xFF	; 255
    6990:	c6 01       	movw	r24, r12
    6992:	0e 94 f5 37 	call	0x6fea	; 0x6fea <strnlen_P>
    6996:	8c 01       	movw	r16, r24
    6998:	f9 2d       	mov	r31, r9
    699a:	f0 68       	ori	r31, 0x80	; 128
    699c:	9f 2e       	mov	r9, r31
    699e:	f3 fd       	sbrc	r31, 3
    69a0:	1a c0       	rjmp	.+52     	; 0x69d6 <vfprintf+0x494>
    69a2:	85 2d       	mov	r24, r5
    69a4:	90 e0       	ldi	r25, 0x00	; 0
    69a6:	08 17       	cp	r16, r24
    69a8:	19 07       	cpc	r17, r25
    69aa:	a8 f4       	brcc	.+42     	; 0x69d6 <vfprintf+0x494>
    69ac:	b7 01       	movw	r22, r14
    69ae:	80 e2       	ldi	r24, 0x20	; 32
    69b0:	90 e0       	ldi	r25, 0x00	; 0
    69b2:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    69b6:	5a 94       	dec	r5
    69b8:	f4 cf       	rjmp	.-24     	; 0x69a2 <vfprintf+0x460>
    69ba:	f6 01       	movw	r30, r12
    69bc:	97 fc       	sbrc	r9, 7
    69be:	85 91       	lpm	r24, Z+
    69c0:	97 fe       	sbrs	r9, 7
    69c2:	81 91       	ld	r24, Z+
    69c4:	6f 01       	movw	r12, r30
    69c6:	b7 01       	movw	r22, r14
    69c8:	90 e0       	ldi	r25, 0x00	; 0
    69ca:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    69ce:	51 10       	cpse	r5, r1
    69d0:	5a 94       	dec	r5
    69d2:	01 50       	subi	r16, 0x01	; 1
    69d4:	11 09       	sbc	r17, r1
    69d6:	01 15       	cp	r16, r1
    69d8:	11 05       	cpc	r17, r1
    69da:	79 f7       	brne	.-34     	; 0x69ba <vfprintf+0x478>
    69dc:	f7 c0       	rjmp	.+494    	; 0x6bcc <vfprintf+0x68a>
    69de:	84 36       	cpi	r24, 0x64	; 100
    69e0:	11 f0       	breq	.+4      	; 0x69e6 <vfprintf+0x4a4>
    69e2:	89 36       	cpi	r24, 0x69	; 105
    69e4:	61 f5       	brne	.+88     	; 0x6a3e <vfprintf+0x4fc>
    69e6:	56 01       	movw	r10, r12
    69e8:	97 fe       	sbrs	r9, 7
    69ea:	09 c0       	rjmp	.+18     	; 0x69fe <vfprintf+0x4bc>
    69ec:	24 e0       	ldi	r18, 0x04	; 4
    69ee:	a2 0e       	add	r10, r18
    69f0:	b1 1c       	adc	r11, r1
    69f2:	f6 01       	movw	r30, r12
    69f4:	60 81       	ld	r22, Z
    69f6:	71 81       	ldd	r23, Z+1	; 0x01
    69f8:	82 81       	ldd	r24, Z+2	; 0x02
    69fa:	93 81       	ldd	r25, Z+3	; 0x03
    69fc:	0a c0       	rjmp	.+20     	; 0x6a12 <vfprintf+0x4d0>
    69fe:	f2 e0       	ldi	r31, 0x02	; 2
    6a00:	af 0e       	add	r10, r31
    6a02:	b1 1c       	adc	r11, r1
    6a04:	f6 01       	movw	r30, r12
    6a06:	60 81       	ld	r22, Z
    6a08:	71 81       	ldd	r23, Z+1	; 0x01
    6a0a:	07 2e       	mov	r0, r23
    6a0c:	00 0c       	add	r0, r0
    6a0e:	88 0b       	sbc	r24, r24
    6a10:	99 0b       	sbc	r25, r25
    6a12:	f9 2d       	mov	r31, r9
    6a14:	ff 76       	andi	r31, 0x6F	; 111
    6a16:	9f 2e       	mov	r9, r31
    6a18:	97 ff       	sbrs	r25, 7
    6a1a:	09 c0       	rjmp	.+18     	; 0x6a2e <vfprintf+0x4ec>
    6a1c:	90 95       	com	r25
    6a1e:	80 95       	com	r24
    6a20:	70 95       	com	r23
    6a22:	61 95       	neg	r22
    6a24:	7f 4f       	sbci	r23, 0xFF	; 255
    6a26:	8f 4f       	sbci	r24, 0xFF	; 255
    6a28:	9f 4f       	sbci	r25, 0xFF	; 255
    6a2a:	f0 68       	ori	r31, 0x80	; 128
    6a2c:	9f 2e       	mov	r9, r31
    6a2e:	2a e0       	ldi	r18, 0x0A	; 10
    6a30:	30 e0       	ldi	r19, 0x00	; 0
    6a32:	a3 01       	movw	r20, r6
    6a34:	0e 94 98 38 	call	0x7130	; 0x7130 <__ultoa_invert>
    6a38:	c8 2e       	mov	r12, r24
    6a3a:	c6 18       	sub	r12, r6
    6a3c:	3f c0       	rjmp	.+126    	; 0x6abc <vfprintf+0x57a>
    6a3e:	09 2d       	mov	r16, r9
    6a40:	85 37       	cpi	r24, 0x75	; 117
    6a42:	21 f4       	brne	.+8      	; 0x6a4c <vfprintf+0x50a>
    6a44:	0f 7e       	andi	r16, 0xEF	; 239
    6a46:	2a e0       	ldi	r18, 0x0A	; 10
    6a48:	30 e0       	ldi	r19, 0x00	; 0
    6a4a:	1d c0       	rjmp	.+58     	; 0x6a86 <vfprintf+0x544>
    6a4c:	09 7f       	andi	r16, 0xF9	; 249
    6a4e:	8f 36       	cpi	r24, 0x6F	; 111
    6a50:	91 f0       	breq	.+36     	; 0x6a76 <vfprintf+0x534>
    6a52:	18 f4       	brcc	.+6      	; 0x6a5a <vfprintf+0x518>
    6a54:	88 35       	cpi	r24, 0x58	; 88
    6a56:	59 f0       	breq	.+22     	; 0x6a6e <vfprintf+0x52c>
    6a58:	c3 c0       	rjmp	.+390    	; 0x6be0 <vfprintf+0x69e>
    6a5a:	80 37       	cpi	r24, 0x70	; 112
    6a5c:	19 f0       	breq	.+6      	; 0x6a64 <vfprintf+0x522>
    6a5e:	88 37       	cpi	r24, 0x78	; 120
    6a60:	11 f0       	breq	.+4      	; 0x6a66 <vfprintf+0x524>
    6a62:	be c0       	rjmp	.+380    	; 0x6be0 <vfprintf+0x69e>
    6a64:	00 61       	ori	r16, 0x10	; 16
    6a66:	04 ff       	sbrs	r16, 4
    6a68:	09 c0       	rjmp	.+18     	; 0x6a7c <vfprintf+0x53a>
    6a6a:	04 60       	ori	r16, 0x04	; 4
    6a6c:	07 c0       	rjmp	.+14     	; 0x6a7c <vfprintf+0x53a>
    6a6e:	94 fe       	sbrs	r9, 4
    6a70:	08 c0       	rjmp	.+16     	; 0x6a82 <vfprintf+0x540>
    6a72:	06 60       	ori	r16, 0x06	; 6
    6a74:	06 c0       	rjmp	.+12     	; 0x6a82 <vfprintf+0x540>
    6a76:	28 e0       	ldi	r18, 0x08	; 8
    6a78:	30 e0       	ldi	r19, 0x00	; 0
    6a7a:	05 c0       	rjmp	.+10     	; 0x6a86 <vfprintf+0x544>
    6a7c:	20 e1       	ldi	r18, 0x10	; 16
    6a7e:	30 e0       	ldi	r19, 0x00	; 0
    6a80:	02 c0       	rjmp	.+4      	; 0x6a86 <vfprintf+0x544>
    6a82:	20 e1       	ldi	r18, 0x10	; 16
    6a84:	32 e0       	ldi	r19, 0x02	; 2
    6a86:	56 01       	movw	r10, r12
    6a88:	07 ff       	sbrs	r16, 7
    6a8a:	09 c0       	rjmp	.+18     	; 0x6a9e <vfprintf+0x55c>
    6a8c:	84 e0       	ldi	r24, 0x04	; 4
    6a8e:	a8 0e       	add	r10, r24
    6a90:	b1 1c       	adc	r11, r1
    6a92:	f6 01       	movw	r30, r12
    6a94:	60 81       	ld	r22, Z
    6a96:	71 81       	ldd	r23, Z+1	; 0x01
    6a98:	82 81       	ldd	r24, Z+2	; 0x02
    6a9a:	93 81       	ldd	r25, Z+3	; 0x03
    6a9c:	08 c0       	rjmp	.+16     	; 0x6aae <vfprintf+0x56c>
    6a9e:	f2 e0       	ldi	r31, 0x02	; 2
    6aa0:	af 0e       	add	r10, r31
    6aa2:	b1 1c       	adc	r11, r1
    6aa4:	f6 01       	movw	r30, r12
    6aa6:	60 81       	ld	r22, Z
    6aa8:	71 81       	ldd	r23, Z+1	; 0x01
    6aaa:	80 e0       	ldi	r24, 0x00	; 0
    6aac:	90 e0       	ldi	r25, 0x00	; 0
    6aae:	a3 01       	movw	r20, r6
    6ab0:	0e 94 98 38 	call	0x7130	; 0x7130 <__ultoa_invert>
    6ab4:	c8 2e       	mov	r12, r24
    6ab6:	c6 18       	sub	r12, r6
    6ab8:	0f 77       	andi	r16, 0x7F	; 127
    6aba:	90 2e       	mov	r9, r16
    6abc:	96 fe       	sbrs	r9, 6
    6abe:	0b c0       	rjmp	.+22     	; 0x6ad6 <vfprintf+0x594>
    6ac0:	09 2d       	mov	r16, r9
    6ac2:	0e 7f       	andi	r16, 0xFE	; 254
    6ac4:	c1 16       	cp	r12, r17
    6ac6:	50 f4       	brcc	.+20     	; 0x6adc <vfprintf+0x59a>
    6ac8:	94 fe       	sbrs	r9, 4
    6aca:	0a c0       	rjmp	.+20     	; 0x6ae0 <vfprintf+0x59e>
    6acc:	92 fc       	sbrc	r9, 2
    6ace:	08 c0       	rjmp	.+16     	; 0x6ae0 <vfprintf+0x59e>
    6ad0:	09 2d       	mov	r16, r9
    6ad2:	0e 7e       	andi	r16, 0xEE	; 238
    6ad4:	05 c0       	rjmp	.+10     	; 0x6ae0 <vfprintf+0x59e>
    6ad6:	dc 2c       	mov	r13, r12
    6ad8:	09 2d       	mov	r16, r9
    6ada:	03 c0       	rjmp	.+6      	; 0x6ae2 <vfprintf+0x5a0>
    6adc:	dc 2c       	mov	r13, r12
    6ade:	01 c0       	rjmp	.+2      	; 0x6ae2 <vfprintf+0x5a0>
    6ae0:	d1 2e       	mov	r13, r17
    6ae2:	04 ff       	sbrs	r16, 4
    6ae4:	0d c0       	rjmp	.+26     	; 0x6b00 <vfprintf+0x5be>
    6ae6:	fe 01       	movw	r30, r28
    6ae8:	ec 0d       	add	r30, r12
    6aea:	f1 1d       	adc	r31, r1
    6aec:	80 81       	ld	r24, Z
    6aee:	80 33       	cpi	r24, 0x30	; 48
    6af0:	11 f4       	brne	.+4      	; 0x6af6 <vfprintf+0x5b4>
    6af2:	09 7e       	andi	r16, 0xE9	; 233
    6af4:	09 c0       	rjmp	.+18     	; 0x6b08 <vfprintf+0x5c6>
    6af6:	02 ff       	sbrs	r16, 2
    6af8:	06 c0       	rjmp	.+12     	; 0x6b06 <vfprintf+0x5c4>
    6afa:	d3 94       	inc	r13
    6afc:	d3 94       	inc	r13
    6afe:	04 c0       	rjmp	.+8      	; 0x6b08 <vfprintf+0x5c6>
    6b00:	80 2f       	mov	r24, r16
    6b02:	86 78       	andi	r24, 0x86	; 134
    6b04:	09 f0       	breq	.+2      	; 0x6b08 <vfprintf+0x5c6>
    6b06:	d3 94       	inc	r13
    6b08:	03 fd       	sbrc	r16, 3
    6b0a:	11 c0       	rjmp	.+34     	; 0x6b2e <vfprintf+0x5ec>
    6b0c:	00 ff       	sbrs	r16, 0
    6b0e:	06 c0       	rjmp	.+12     	; 0x6b1c <vfprintf+0x5da>
    6b10:	1c 2d       	mov	r17, r12
    6b12:	d5 14       	cp	r13, r5
    6b14:	80 f4       	brcc	.+32     	; 0x6b36 <vfprintf+0x5f4>
    6b16:	15 0d       	add	r17, r5
    6b18:	1d 19       	sub	r17, r13
    6b1a:	0d c0       	rjmp	.+26     	; 0x6b36 <vfprintf+0x5f4>
    6b1c:	d5 14       	cp	r13, r5
    6b1e:	58 f4       	brcc	.+22     	; 0x6b36 <vfprintf+0x5f4>
    6b20:	b7 01       	movw	r22, r14
    6b22:	80 e2       	ldi	r24, 0x20	; 32
    6b24:	90 e0       	ldi	r25, 0x00	; 0
    6b26:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    6b2a:	d3 94       	inc	r13
    6b2c:	f7 cf       	rjmp	.-18     	; 0x6b1c <vfprintf+0x5da>
    6b2e:	d5 14       	cp	r13, r5
    6b30:	10 f4       	brcc	.+4      	; 0x6b36 <vfprintf+0x5f4>
    6b32:	5d 18       	sub	r5, r13
    6b34:	01 c0       	rjmp	.+2      	; 0x6b38 <vfprintf+0x5f6>
    6b36:	51 2c       	mov	r5, r1
    6b38:	04 ff       	sbrs	r16, 4
    6b3a:	10 c0       	rjmp	.+32     	; 0x6b5c <vfprintf+0x61a>
    6b3c:	b7 01       	movw	r22, r14
    6b3e:	80 e3       	ldi	r24, 0x30	; 48
    6b40:	90 e0       	ldi	r25, 0x00	; 0
    6b42:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    6b46:	02 ff       	sbrs	r16, 2
    6b48:	17 c0       	rjmp	.+46     	; 0x6b78 <vfprintf+0x636>
    6b4a:	01 fd       	sbrc	r16, 1
    6b4c:	03 c0       	rjmp	.+6      	; 0x6b54 <vfprintf+0x612>
    6b4e:	88 e7       	ldi	r24, 0x78	; 120
    6b50:	90 e0       	ldi	r25, 0x00	; 0
    6b52:	02 c0       	rjmp	.+4      	; 0x6b58 <vfprintf+0x616>
    6b54:	88 e5       	ldi	r24, 0x58	; 88
    6b56:	90 e0       	ldi	r25, 0x00	; 0
    6b58:	b7 01       	movw	r22, r14
    6b5a:	0c c0       	rjmp	.+24     	; 0x6b74 <vfprintf+0x632>
    6b5c:	80 2f       	mov	r24, r16
    6b5e:	86 78       	andi	r24, 0x86	; 134
    6b60:	59 f0       	breq	.+22     	; 0x6b78 <vfprintf+0x636>
    6b62:	01 ff       	sbrs	r16, 1
    6b64:	02 c0       	rjmp	.+4      	; 0x6b6a <vfprintf+0x628>
    6b66:	8b e2       	ldi	r24, 0x2B	; 43
    6b68:	01 c0       	rjmp	.+2      	; 0x6b6c <vfprintf+0x62a>
    6b6a:	80 e2       	ldi	r24, 0x20	; 32
    6b6c:	07 fd       	sbrc	r16, 7
    6b6e:	8d e2       	ldi	r24, 0x2D	; 45
    6b70:	b7 01       	movw	r22, r14
    6b72:	90 e0       	ldi	r25, 0x00	; 0
    6b74:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    6b78:	c1 16       	cp	r12, r17
    6b7a:	38 f4       	brcc	.+14     	; 0x6b8a <vfprintf+0x648>
    6b7c:	b7 01       	movw	r22, r14
    6b7e:	80 e3       	ldi	r24, 0x30	; 48
    6b80:	90 e0       	ldi	r25, 0x00	; 0
    6b82:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    6b86:	11 50       	subi	r17, 0x01	; 1
    6b88:	f7 cf       	rjmp	.-18     	; 0x6b78 <vfprintf+0x636>
    6b8a:	ca 94       	dec	r12
    6b8c:	f3 01       	movw	r30, r6
    6b8e:	ec 0d       	add	r30, r12
    6b90:	f1 1d       	adc	r31, r1
    6b92:	80 81       	ld	r24, Z
    6b94:	b7 01       	movw	r22, r14
    6b96:	90 e0       	ldi	r25, 0x00	; 0
    6b98:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    6b9c:	c1 10       	cpse	r12, r1
    6b9e:	f5 cf       	rjmp	.-22     	; 0x6b8a <vfprintf+0x648>
    6ba0:	15 c0       	rjmp	.+42     	; 0x6bcc <vfprintf+0x68a>
    6ba2:	f4 e0       	ldi	r31, 0x04	; 4
    6ba4:	f5 15       	cp	r31, r5
    6ba6:	60 f5       	brcc	.+88     	; 0x6c00 <vfprintf+0x6be>
    6ba8:	84 e0       	ldi	r24, 0x04	; 4
    6baa:	58 1a       	sub	r5, r24
    6bac:	93 fe       	sbrs	r9, 3
    6bae:	1f c0       	rjmp	.+62     	; 0x6bee <vfprintf+0x6ac>
    6bb0:	01 11       	cpse	r16, r1
    6bb2:	27 c0       	rjmp	.+78     	; 0x6c02 <vfprintf+0x6c0>
    6bb4:	2c 85       	ldd	r18, Y+12	; 0x0c
    6bb6:	23 ff       	sbrs	r18, 3
    6bb8:	2a c0       	rjmp	.+84     	; 0x6c0e <vfprintf+0x6cc>
    6bba:	06 e6       	ldi	r16, 0x66	; 102
    6bbc:	11 e0       	ldi	r17, 0x01	; 1
    6bbe:	39 2d       	mov	r19, r9
    6bc0:	30 71       	andi	r19, 0x10	; 16
    6bc2:	93 2e       	mov	r9, r19
    6bc4:	f8 01       	movw	r30, r16
    6bc6:	84 91       	lpm	r24, Z
    6bc8:	81 11       	cpse	r24, r1
    6bca:	24 c0       	rjmp	.+72     	; 0x6c14 <vfprintf+0x6d2>
    6bcc:	55 20       	and	r5, r5
    6bce:	09 f4       	brne	.+2      	; 0x6bd2 <vfprintf+0x690>
    6bd0:	e4 cc       	rjmp	.-1592   	; 0x659a <vfprintf+0x58>
    6bd2:	b7 01       	movw	r22, r14
    6bd4:	80 e2       	ldi	r24, 0x20	; 32
    6bd6:	90 e0       	ldi	r25, 0x00	; 0
    6bd8:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    6bdc:	5a 94       	dec	r5
    6bde:	f6 cf       	rjmp	.-20     	; 0x6bcc <vfprintf+0x68a>
    6be0:	f7 01       	movw	r30, r14
    6be2:	86 81       	ldd	r24, Z+6	; 0x06
    6be4:	97 81       	ldd	r25, Z+7	; 0x07
    6be6:	26 c0       	rjmp	.+76     	; 0x6c34 <vfprintf+0x6f2>
    6be8:	8f ef       	ldi	r24, 0xFF	; 255
    6bea:	9f ef       	ldi	r25, 0xFF	; 255
    6bec:	23 c0       	rjmp	.+70     	; 0x6c34 <vfprintf+0x6f2>
    6bee:	b7 01       	movw	r22, r14
    6bf0:	80 e2       	ldi	r24, 0x20	; 32
    6bf2:	90 e0       	ldi	r25, 0x00	; 0
    6bf4:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    6bf8:	5a 94       	dec	r5
    6bfa:	51 10       	cpse	r5, r1
    6bfc:	f8 cf       	rjmp	.-16     	; 0x6bee <vfprintf+0x6ac>
    6bfe:	d8 cf       	rjmp	.-80     	; 0x6bb0 <vfprintf+0x66e>
    6c00:	51 2c       	mov	r5, r1
    6c02:	b7 01       	movw	r22, r14
    6c04:	80 2f       	mov	r24, r16
    6c06:	90 e0       	ldi	r25, 0x00	; 0
    6c08:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    6c0c:	d3 cf       	rjmp	.-90     	; 0x6bb4 <vfprintf+0x672>
    6c0e:	0a e6       	ldi	r16, 0x6A	; 106
    6c10:	11 e0       	ldi	r17, 0x01	; 1
    6c12:	d5 cf       	rjmp	.-86     	; 0x6bbe <vfprintf+0x67c>
    6c14:	91 10       	cpse	r9, r1
    6c16:	80 52       	subi	r24, 0x20	; 32
    6c18:	b7 01       	movw	r22, r14
    6c1a:	90 e0       	ldi	r25, 0x00	; 0
    6c1c:	0e 94 3a 38 	call	0x7074	; 0x7074 <fputc>
    6c20:	0f 5f       	subi	r16, 0xFF	; 255
    6c22:	1f 4f       	sbci	r17, 0xFF	; 255
    6c24:	cf cf       	rjmp	.-98     	; 0x6bc4 <vfprintf+0x682>
    6c26:	23 e0       	ldi	r18, 0x03	; 3
    6c28:	25 15       	cp	r18, r5
    6c2a:	10 f4       	brcc	.+4      	; 0x6c30 <vfprintf+0x6ee>
    6c2c:	83 e0       	ldi	r24, 0x03	; 3
    6c2e:	bd cf       	rjmp	.-134    	; 0x6baa <vfprintf+0x668>
    6c30:	51 2c       	mov	r5, r1
    6c32:	c0 cf       	rjmp	.-128    	; 0x6bb4 <vfprintf+0x672>
    6c34:	60 96       	adiw	r28, 0x10	; 16
    6c36:	e2 e1       	ldi	r30, 0x12	; 18
    6c38:	0c 94 7b 36 	jmp	0x6cf6	; 0x6cf6 <__epilogue_restores__>

00006c3c <__divmodhi4>:
    6c3c:	97 fb       	bst	r25, 7
    6c3e:	07 2e       	mov	r0, r23
    6c40:	16 f4       	brtc	.+4      	; 0x6c46 <__divmodhi4+0xa>
    6c42:	00 94       	com	r0
    6c44:	07 d0       	rcall	.+14     	; 0x6c54 <__divmodhi4_neg1>
    6c46:	77 fd       	sbrc	r23, 7
    6c48:	09 d0       	rcall	.+18     	; 0x6c5c <__divmodhi4_neg2>
    6c4a:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__udivmodhi4>
    6c4e:	07 fc       	sbrc	r0, 7
    6c50:	05 d0       	rcall	.+10     	; 0x6c5c <__divmodhi4_neg2>
    6c52:	3e f4       	brtc	.+14     	; 0x6c62 <__divmodhi4_exit>

00006c54 <__divmodhi4_neg1>:
    6c54:	90 95       	com	r25
    6c56:	81 95       	neg	r24
    6c58:	9f 4f       	sbci	r25, 0xFF	; 255
    6c5a:	08 95       	ret

00006c5c <__divmodhi4_neg2>:
    6c5c:	70 95       	com	r23
    6c5e:	61 95       	neg	r22
    6c60:	7f 4f       	sbci	r23, 0xFF	; 255

00006c62 <__divmodhi4_exit>:
    6c62:	08 95       	ret

00006c64 <__divmodsi4>:
    6c64:	05 2e       	mov	r0, r21
    6c66:	97 fb       	bst	r25, 7
    6c68:	1e f4       	brtc	.+6      	; 0x6c70 <__divmodsi4+0xc>
    6c6a:	00 94       	com	r0
    6c6c:	0e 94 49 36 	call	0x6c92	; 0x6c92 <__negsi2>
    6c70:	57 fd       	sbrc	r21, 7
    6c72:	07 d0       	rcall	.+14     	; 0x6c82 <__divmodsi4_neg2>
    6c74:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__udivmodsi4>
    6c78:	07 fc       	sbrc	r0, 7
    6c7a:	03 d0       	rcall	.+6      	; 0x6c82 <__divmodsi4_neg2>
    6c7c:	4e f4       	brtc	.+18     	; 0x6c90 <__divmodsi4_exit>
    6c7e:	0c 94 49 36 	jmp	0x6c92	; 0x6c92 <__negsi2>

00006c82 <__divmodsi4_neg2>:
    6c82:	50 95       	com	r21
    6c84:	40 95       	com	r20
    6c86:	30 95       	com	r19
    6c88:	21 95       	neg	r18
    6c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    6c8c:	4f 4f       	sbci	r20, 0xFF	; 255
    6c8e:	5f 4f       	sbci	r21, 0xFF	; 255

00006c90 <__divmodsi4_exit>:
    6c90:	08 95       	ret

00006c92 <__negsi2>:
    6c92:	90 95       	com	r25
    6c94:	80 95       	com	r24
    6c96:	70 95       	com	r23
    6c98:	61 95       	neg	r22
    6c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    6c9c:	8f 4f       	sbci	r24, 0xFF	; 255
    6c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    6ca0:	08 95       	ret

00006ca2 <__tablejump2__>:
    6ca2:	ee 0f       	add	r30, r30
    6ca4:	ff 1f       	adc	r31, r31
    6ca6:	05 90       	lpm	r0, Z+
    6ca8:	f4 91       	lpm	r31, Z
    6caa:	e0 2d       	mov	r30, r0
    6cac:	09 94       	ijmp

00006cae <__muluhisi3>:
    6cae:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <__umulhisi3>
    6cb2:	a5 9f       	mul	r26, r21
    6cb4:	90 0d       	add	r25, r0
    6cb6:	b4 9f       	mul	r27, r20
    6cb8:	90 0d       	add	r25, r0
    6cba:	a4 9f       	mul	r26, r20
    6cbc:	80 0d       	add	r24, r0
    6cbe:	91 1d       	adc	r25, r1
    6cc0:	11 24       	eor	r1, r1
    6cc2:	08 95       	ret

00006cc4 <__prologue_saves__>:
    6cc4:	2f 92       	push	r2
    6cc6:	3f 92       	push	r3
    6cc8:	4f 92       	push	r4
    6cca:	5f 92       	push	r5
    6ccc:	6f 92       	push	r6
    6cce:	7f 92       	push	r7
    6cd0:	8f 92       	push	r8
    6cd2:	9f 92       	push	r9
    6cd4:	af 92       	push	r10
    6cd6:	bf 92       	push	r11
    6cd8:	cf 92       	push	r12
    6cda:	df 92       	push	r13
    6cdc:	ef 92       	push	r14
    6cde:	ff 92       	push	r15
    6ce0:	0f 93       	push	r16
    6ce2:	1f 93       	push	r17
    6ce4:	cf 93       	push	r28
    6ce6:	df 93       	push	r29
    6ce8:	cd b7       	in	r28, 0x3d	; 61
    6cea:	de b7       	in	r29, 0x3e	; 62
    6cec:	ca 1b       	sub	r28, r26
    6cee:	db 0b       	sbc	r29, r27
    6cf0:	cd bf       	out	0x3d, r28	; 61
    6cf2:	de bf       	out	0x3e, r29	; 62
    6cf4:	09 94       	ijmp

00006cf6 <__epilogue_restores__>:
    6cf6:	2a 88       	ldd	r2, Y+18	; 0x12
    6cf8:	39 88       	ldd	r3, Y+17	; 0x11
    6cfa:	48 88       	ldd	r4, Y+16	; 0x10
    6cfc:	5f 84       	ldd	r5, Y+15	; 0x0f
    6cfe:	6e 84       	ldd	r6, Y+14	; 0x0e
    6d00:	7d 84       	ldd	r7, Y+13	; 0x0d
    6d02:	8c 84       	ldd	r8, Y+12	; 0x0c
    6d04:	9b 84       	ldd	r9, Y+11	; 0x0b
    6d06:	aa 84       	ldd	r10, Y+10	; 0x0a
    6d08:	b9 84       	ldd	r11, Y+9	; 0x09
    6d0a:	c8 84       	ldd	r12, Y+8	; 0x08
    6d0c:	df 80       	ldd	r13, Y+7	; 0x07
    6d0e:	ee 80       	ldd	r14, Y+6	; 0x06
    6d10:	fd 80       	ldd	r15, Y+5	; 0x05
    6d12:	0c 81       	ldd	r16, Y+4	; 0x04
    6d14:	1b 81       	ldd	r17, Y+3	; 0x03
    6d16:	aa 81       	ldd	r26, Y+2	; 0x02
    6d18:	b9 81       	ldd	r27, Y+1	; 0x01
    6d1a:	ce 0f       	add	r28, r30
    6d1c:	d1 1d       	adc	r29, r1
    6d1e:	cd bf       	out	0x3d, r28	; 61
    6d20:	de bf       	out	0x3e, r29	; 62
    6d22:	ed 01       	movw	r28, r26
    6d24:	08 95       	ret

00006d26 <__udivmodhi4>:
    6d26:	aa 1b       	sub	r26, r26
    6d28:	bb 1b       	sub	r27, r27
    6d2a:	51 e1       	ldi	r21, 0x11	; 17
    6d2c:	07 c0       	rjmp	.+14     	; 0x6d3c <__udivmodhi4_ep>

00006d2e <__udivmodhi4_loop>:
    6d2e:	aa 1f       	adc	r26, r26
    6d30:	bb 1f       	adc	r27, r27
    6d32:	a6 17       	cp	r26, r22
    6d34:	b7 07       	cpc	r27, r23
    6d36:	10 f0       	brcs	.+4      	; 0x6d3c <__udivmodhi4_ep>
    6d38:	a6 1b       	sub	r26, r22
    6d3a:	b7 0b       	sbc	r27, r23

00006d3c <__udivmodhi4_ep>:
    6d3c:	88 1f       	adc	r24, r24
    6d3e:	99 1f       	adc	r25, r25
    6d40:	5a 95       	dec	r21
    6d42:	a9 f7       	brne	.-22     	; 0x6d2e <__udivmodhi4_loop>
    6d44:	80 95       	com	r24
    6d46:	90 95       	com	r25
    6d48:	bc 01       	movw	r22, r24
    6d4a:	cd 01       	movw	r24, r26
    6d4c:	08 95       	ret

00006d4e <__udivmodsi4>:
    6d4e:	a1 e2       	ldi	r26, 0x21	; 33
    6d50:	1a 2e       	mov	r1, r26
    6d52:	aa 1b       	sub	r26, r26
    6d54:	bb 1b       	sub	r27, r27
    6d56:	fd 01       	movw	r30, r26
    6d58:	0d c0       	rjmp	.+26     	; 0x6d74 <__udivmodsi4_ep>

00006d5a <__udivmodsi4_loop>:
    6d5a:	aa 1f       	adc	r26, r26
    6d5c:	bb 1f       	adc	r27, r27
    6d5e:	ee 1f       	adc	r30, r30
    6d60:	ff 1f       	adc	r31, r31
    6d62:	a2 17       	cp	r26, r18
    6d64:	b3 07       	cpc	r27, r19
    6d66:	e4 07       	cpc	r30, r20
    6d68:	f5 07       	cpc	r31, r21
    6d6a:	20 f0       	brcs	.+8      	; 0x6d74 <__udivmodsi4_ep>
    6d6c:	a2 1b       	sub	r26, r18
    6d6e:	b3 0b       	sbc	r27, r19
    6d70:	e4 0b       	sbc	r30, r20
    6d72:	f5 0b       	sbc	r31, r21

00006d74 <__udivmodsi4_ep>:
    6d74:	66 1f       	adc	r22, r22
    6d76:	77 1f       	adc	r23, r23
    6d78:	88 1f       	adc	r24, r24
    6d7a:	99 1f       	adc	r25, r25
    6d7c:	1a 94       	dec	r1
    6d7e:	69 f7       	brne	.-38     	; 0x6d5a <__udivmodsi4_loop>
    6d80:	60 95       	com	r22
    6d82:	70 95       	com	r23
    6d84:	80 95       	com	r24
    6d86:	90 95       	com	r25
    6d88:	9b 01       	movw	r18, r22
    6d8a:	ac 01       	movw	r20, r24
    6d8c:	bd 01       	movw	r22, r26
    6d8e:	cf 01       	movw	r24, r30
    6d90:	08 95       	ret

00006d92 <__umulhisi3>:
    6d92:	a2 9f       	mul	r26, r18
    6d94:	b0 01       	movw	r22, r0
    6d96:	b3 9f       	mul	r27, r19
    6d98:	c0 01       	movw	r24, r0
    6d9a:	a3 9f       	mul	r26, r19
    6d9c:	70 0d       	add	r23, r0
    6d9e:	81 1d       	adc	r24, r1
    6da0:	11 24       	eor	r1, r1
    6da2:	91 1d       	adc	r25, r1
    6da4:	b2 9f       	mul	r27, r18
    6da6:	70 0d       	add	r23, r0
    6da8:	81 1d       	adc	r24, r1
    6daa:	11 24       	eor	r1, r1
    6dac:	91 1d       	adc	r25, r1
    6dae:	08 95       	ret

00006db0 <atoi>:
    6db0:	fc 01       	movw	r30, r24
    6db2:	88 27       	eor	r24, r24
    6db4:	99 27       	eor	r25, r25
    6db6:	e8 94       	clt
    6db8:	21 91       	ld	r18, Z+
    6dba:	20 32       	cpi	r18, 0x20	; 32
    6dbc:	e9 f3       	breq	.-6      	; 0x6db8 <atoi+0x8>
    6dbe:	29 30       	cpi	r18, 0x09	; 9
    6dc0:	10 f0       	brcs	.+4      	; 0x6dc6 <atoi+0x16>
    6dc2:	2e 30       	cpi	r18, 0x0E	; 14
    6dc4:	c8 f3       	brcs	.-14     	; 0x6db8 <atoi+0x8>
    6dc6:	2b 32       	cpi	r18, 0x2B	; 43
    6dc8:	41 f0       	breq	.+16     	; 0x6dda <atoi+0x2a>
    6dca:	2d 32       	cpi	r18, 0x2D	; 45
    6dcc:	39 f4       	brne	.+14     	; 0x6ddc <atoi+0x2c>
    6dce:	68 94       	set
    6dd0:	04 c0       	rjmp	.+8      	; 0x6dda <atoi+0x2a>
    6dd2:	0e 94 32 38 	call	0x7064	; 0x7064 <__mulhi_const_10>
    6dd6:	82 0f       	add	r24, r18
    6dd8:	91 1d       	adc	r25, r1
    6dda:	21 91       	ld	r18, Z+
    6ddc:	20 53       	subi	r18, 0x30	; 48
    6dde:	2a 30       	cpi	r18, 0x0A	; 10
    6de0:	c0 f3       	brcs	.-16     	; 0x6dd2 <atoi+0x22>
    6de2:	1e f4       	brtc	.+6      	; 0x6dea <atoi+0x3a>
    6de4:	90 95       	com	r25
    6de6:	81 95       	neg	r24
    6de8:	9f 4f       	sbci	r25, 0xFF	; 255
    6dea:	08 95       	ret

00006dec <atol>:
    6dec:	1f 93       	push	r17
    6dee:	fc 01       	movw	r30, r24
    6df0:	99 27       	eor	r25, r25
    6df2:	88 27       	eor	r24, r24
    6df4:	bc 01       	movw	r22, r24
    6df6:	e8 94       	clt
    6df8:	11 91       	ld	r17, Z+
    6dfa:	10 32       	cpi	r17, 0x20	; 32
    6dfc:	e9 f3       	breq	.-6      	; 0x6df8 <atol+0xc>
    6dfe:	19 30       	cpi	r17, 0x09	; 9
    6e00:	10 f0       	brcs	.+4      	; 0x6e06 <atol+0x1a>
    6e02:	1e 30       	cpi	r17, 0x0E	; 14
    6e04:	c8 f3       	brcs	.-14     	; 0x6df8 <atol+0xc>
    6e06:	1b 32       	cpi	r17, 0x2B	; 43
    6e08:	51 f0       	breq	.+20     	; 0x6e1e <atol+0x32>
    6e0a:	1d 32       	cpi	r17, 0x2D	; 45
    6e0c:	49 f4       	brne	.+18     	; 0x6e20 <atol+0x34>
    6e0e:	68 94       	set
    6e10:	06 c0       	rjmp	.+12     	; 0x6e1e <atol+0x32>
    6e12:	0e 94 1d 38 	call	0x703a	; 0x703a <__mulsi_const_10>
    6e16:	61 0f       	add	r22, r17
    6e18:	71 1d       	adc	r23, r1
    6e1a:	81 1d       	adc	r24, r1
    6e1c:	91 1d       	adc	r25, r1
    6e1e:	11 91       	ld	r17, Z+
    6e20:	10 53       	subi	r17, 0x30	; 48
    6e22:	1a 30       	cpi	r17, 0x0A	; 10
    6e24:	b0 f3       	brcs	.-20     	; 0x6e12 <atol+0x26>
    6e26:	3e f4       	brtc	.+14     	; 0x6e36 <atol+0x4a>
    6e28:	90 95       	com	r25
    6e2a:	80 95       	com	r24
    6e2c:	70 95       	com	r23
    6e2e:	61 95       	neg	r22
    6e30:	7f 4f       	sbci	r23, 0xFF	; 255
    6e32:	8f 4f       	sbci	r24, 0xFF	; 255
    6e34:	9f 4f       	sbci	r25, 0xFF	; 255
    6e36:	1f 91       	pop	r17
    6e38:	08 95       	ret

00006e3a <__ftoa_engine>:
    6e3a:	28 30       	cpi	r18, 0x08	; 8
    6e3c:	08 f0       	brcs	.+2      	; 0x6e40 <__ftoa_engine+0x6>
    6e3e:	27 e0       	ldi	r18, 0x07	; 7
    6e40:	33 27       	eor	r19, r19
    6e42:	da 01       	movw	r26, r20
    6e44:	99 0f       	add	r25, r25
    6e46:	31 1d       	adc	r19, r1
    6e48:	87 fd       	sbrc	r24, 7
    6e4a:	91 60       	ori	r25, 0x01	; 1
    6e4c:	00 96       	adiw	r24, 0x00	; 0
    6e4e:	61 05       	cpc	r22, r1
    6e50:	71 05       	cpc	r23, r1
    6e52:	39 f4       	brne	.+14     	; 0x6e62 <__ftoa_engine+0x28>
    6e54:	32 60       	ori	r19, 0x02	; 2
    6e56:	2e 5f       	subi	r18, 0xFE	; 254
    6e58:	3d 93       	st	X+, r19
    6e5a:	30 e3       	ldi	r19, 0x30	; 48
    6e5c:	2a 95       	dec	r18
    6e5e:	e1 f7       	brne	.-8      	; 0x6e58 <__ftoa_engine+0x1e>
    6e60:	08 95       	ret
    6e62:	9f 3f       	cpi	r25, 0xFF	; 255
    6e64:	30 f0       	brcs	.+12     	; 0x6e72 <__ftoa_engine+0x38>
    6e66:	80 38       	cpi	r24, 0x80	; 128
    6e68:	71 05       	cpc	r23, r1
    6e6a:	61 05       	cpc	r22, r1
    6e6c:	09 f0       	breq	.+2      	; 0x6e70 <__ftoa_engine+0x36>
    6e6e:	3c 5f       	subi	r19, 0xFC	; 252
    6e70:	3c 5f       	subi	r19, 0xFC	; 252
    6e72:	3d 93       	st	X+, r19
    6e74:	91 30       	cpi	r25, 0x01	; 1
    6e76:	08 f0       	brcs	.+2      	; 0x6e7a <__ftoa_engine+0x40>
    6e78:	80 68       	ori	r24, 0x80	; 128
    6e7a:	91 1d       	adc	r25, r1
    6e7c:	df 93       	push	r29
    6e7e:	cf 93       	push	r28
    6e80:	1f 93       	push	r17
    6e82:	0f 93       	push	r16
    6e84:	ff 92       	push	r15
    6e86:	ef 92       	push	r14
    6e88:	19 2f       	mov	r17, r25
    6e8a:	98 7f       	andi	r25, 0xF8	; 248
    6e8c:	96 95       	lsr	r25
    6e8e:	e9 2f       	mov	r30, r25
    6e90:	96 95       	lsr	r25
    6e92:	96 95       	lsr	r25
    6e94:	e9 0f       	add	r30, r25
    6e96:	ff 27       	eor	r31, r31
    6e98:	e8 53       	subi	r30, 0x38	; 56
    6e9a:	fe 4f       	sbci	r31, 0xFE	; 254
    6e9c:	99 27       	eor	r25, r25
    6e9e:	33 27       	eor	r19, r19
    6ea0:	ee 24       	eor	r14, r14
    6ea2:	ff 24       	eor	r15, r15
    6ea4:	a7 01       	movw	r20, r14
    6ea6:	e7 01       	movw	r28, r14
    6ea8:	05 90       	lpm	r0, Z+
    6eaa:	08 94       	sec
    6eac:	07 94       	ror	r0
    6eae:	28 f4       	brcc	.+10     	; 0x6eba <__ftoa_engine+0x80>
    6eb0:	36 0f       	add	r19, r22
    6eb2:	e7 1e       	adc	r14, r23
    6eb4:	f8 1e       	adc	r15, r24
    6eb6:	49 1f       	adc	r20, r25
    6eb8:	51 1d       	adc	r21, r1
    6eba:	66 0f       	add	r22, r22
    6ebc:	77 1f       	adc	r23, r23
    6ebe:	88 1f       	adc	r24, r24
    6ec0:	99 1f       	adc	r25, r25
    6ec2:	06 94       	lsr	r0
    6ec4:	a1 f7       	brne	.-24     	; 0x6eae <__ftoa_engine+0x74>
    6ec6:	05 90       	lpm	r0, Z+
    6ec8:	07 94       	ror	r0
    6eca:	28 f4       	brcc	.+10     	; 0x6ed6 <__ftoa_engine+0x9c>
    6ecc:	e7 0e       	add	r14, r23
    6ece:	f8 1e       	adc	r15, r24
    6ed0:	49 1f       	adc	r20, r25
    6ed2:	56 1f       	adc	r21, r22
    6ed4:	c1 1d       	adc	r28, r1
    6ed6:	77 0f       	add	r23, r23
    6ed8:	88 1f       	adc	r24, r24
    6eda:	99 1f       	adc	r25, r25
    6edc:	66 1f       	adc	r22, r22
    6ede:	06 94       	lsr	r0
    6ee0:	a1 f7       	brne	.-24     	; 0x6eca <__ftoa_engine+0x90>
    6ee2:	05 90       	lpm	r0, Z+
    6ee4:	07 94       	ror	r0
    6ee6:	28 f4       	brcc	.+10     	; 0x6ef2 <__ftoa_engine+0xb8>
    6ee8:	f8 0e       	add	r15, r24
    6eea:	49 1f       	adc	r20, r25
    6eec:	56 1f       	adc	r21, r22
    6eee:	c7 1f       	adc	r28, r23
    6ef0:	d1 1d       	adc	r29, r1
    6ef2:	88 0f       	add	r24, r24
    6ef4:	99 1f       	adc	r25, r25
    6ef6:	66 1f       	adc	r22, r22
    6ef8:	77 1f       	adc	r23, r23
    6efa:	06 94       	lsr	r0
    6efc:	a1 f7       	brne	.-24     	; 0x6ee6 <__ftoa_engine+0xac>
    6efe:	05 90       	lpm	r0, Z+
    6f00:	07 94       	ror	r0
    6f02:	20 f4       	brcc	.+8      	; 0x6f0c <__ftoa_engine+0xd2>
    6f04:	49 0f       	add	r20, r25
    6f06:	56 1f       	adc	r21, r22
    6f08:	c7 1f       	adc	r28, r23
    6f0a:	d8 1f       	adc	r29, r24
    6f0c:	99 0f       	add	r25, r25
    6f0e:	66 1f       	adc	r22, r22
    6f10:	77 1f       	adc	r23, r23
    6f12:	88 1f       	adc	r24, r24
    6f14:	06 94       	lsr	r0
    6f16:	a9 f7       	brne	.-22     	; 0x6f02 <__ftoa_engine+0xc8>
    6f18:	84 91       	lpm	r24, Z
    6f1a:	10 95       	com	r17
    6f1c:	17 70       	andi	r17, 0x07	; 7
    6f1e:	41 f0       	breq	.+16     	; 0x6f30 <__ftoa_engine+0xf6>
    6f20:	d6 95       	lsr	r29
    6f22:	c7 95       	ror	r28
    6f24:	57 95       	ror	r21
    6f26:	47 95       	ror	r20
    6f28:	f7 94       	ror	r15
    6f2a:	e7 94       	ror	r14
    6f2c:	1a 95       	dec	r17
    6f2e:	c1 f7       	brne	.-16     	; 0x6f20 <__ftoa_engine+0xe6>
    6f30:	ee e6       	ldi	r30, 0x6E	; 110
    6f32:	f1 e0       	ldi	r31, 0x01	; 1
    6f34:	68 94       	set
    6f36:	15 90       	lpm	r1, Z+
    6f38:	15 91       	lpm	r17, Z+
    6f3a:	35 91       	lpm	r19, Z+
    6f3c:	65 91       	lpm	r22, Z+
    6f3e:	95 91       	lpm	r25, Z+
    6f40:	05 90       	lpm	r0, Z+
    6f42:	7f e2       	ldi	r23, 0x2F	; 47
    6f44:	73 95       	inc	r23
    6f46:	e1 18       	sub	r14, r1
    6f48:	f1 0a       	sbc	r15, r17
    6f4a:	43 0b       	sbc	r20, r19
    6f4c:	56 0b       	sbc	r21, r22
    6f4e:	c9 0b       	sbc	r28, r25
    6f50:	d0 09       	sbc	r29, r0
    6f52:	c0 f7       	brcc	.-16     	; 0x6f44 <__ftoa_engine+0x10a>
    6f54:	e1 0c       	add	r14, r1
    6f56:	f1 1e       	adc	r15, r17
    6f58:	43 1f       	adc	r20, r19
    6f5a:	56 1f       	adc	r21, r22
    6f5c:	c9 1f       	adc	r28, r25
    6f5e:	d0 1d       	adc	r29, r0
    6f60:	7e f4       	brtc	.+30     	; 0x6f80 <__ftoa_engine+0x146>
    6f62:	70 33       	cpi	r23, 0x30	; 48
    6f64:	11 f4       	brne	.+4      	; 0x6f6a <__ftoa_engine+0x130>
    6f66:	8a 95       	dec	r24
    6f68:	e6 cf       	rjmp	.-52     	; 0x6f36 <__ftoa_engine+0xfc>
    6f6a:	e8 94       	clt
    6f6c:	01 50       	subi	r16, 0x01	; 1
    6f6e:	30 f0       	brcs	.+12     	; 0x6f7c <__ftoa_engine+0x142>
    6f70:	08 0f       	add	r16, r24
    6f72:	0a f4       	brpl	.+2      	; 0x6f76 <__ftoa_engine+0x13c>
    6f74:	00 27       	eor	r16, r16
    6f76:	02 17       	cp	r16, r18
    6f78:	08 f4       	brcc	.+2      	; 0x6f7c <__ftoa_engine+0x142>
    6f7a:	20 2f       	mov	r18, r16
    6f7c:	23 95       	inc	r18
    6f7e:	02 2f       	mov	r16, r18
    6f80:	7a 33       	cpi	r23, 0x3A	; 58
    6f82:	28 f0       	brcs	.+10     	; 0x6f8e <__ftoa_engine+0x154>
    6f84:	79 e3       	ldi	r23, 0x39	; 57
    6f86:	7d 93       	st	X+, r23
    6f88:	2a 95       	dec	r18
    6f8a:	e9 f7       	brne	.-6      	; 0x6f86 <__ftoa_engine+0x14c>
    6f8c:	10 c0       	rjmp	.+32     	; 0x6fae <__ftoa_engine+0x174>
    6f8e:	7d 93       	st	X+, r23
    6f90:	2a 95       	dec	r18
    6f92:	89 f6       	brne	.-94     	; 0x6f36 <__ftoa_engine+0xfc>
    6f94:	06 94       	lsr	r0
    6f96:	97 95       	ror	r25
    6f98:	67 95       	ror	r22
    6f9a:	37 95       	ror	r19
    6f9c:	17 95       	ror	r17
    6f9e:	17 94       	ror	r1
    6fa0:	e1 18       	sub	r14, r1
    6fa2:	f1 0a       	sbc	r15, r17
    6fa4:	43 0b       	sbc	r20, r19
    6fa6:	56 0b       	sbc	r21, r22
    6fa8:	c9 0b       	sbc	r28, r25
    6faa:	d0 09       	sbc	r29, r0
    6fac:	98 f0       	brcs	.+38     	; 0x6fd4 <__ftoa_engine+0x19a>
    6fae:	23 95       	inc	r18
    6fb0:	7e 91       	ld	r23, -X
    6fb2:	73 95       	inc	r23
    6fb4:	7a 33       	cpi	r23, 0x3A	; 58
    6fb6:	08 f0       	brcs	.+2      	; 0x6fba <__ftoa_engine+0x180>
    6fb8:	70 e3       	ldi	r23, 0x30	; 48
    6fba:	7c 93       	st	X, r23
    6fbc:	20 13       	cpse	r18, r16
    6fbe:	b8 f7       	brcc	.-18     	; 0x6fae <__ftoa_engine+0x174>
    6fc0:	7e 91       	ld	r23, -X
    6fc2:	70 61       	ori	r23, 0x10	; 16
    6fc4:	7d 93       	st	X+, r23
    6fc6:	30 f0       	brcs	.+12     	; 0x6fd4 <__ftoa_engine+0x19a>
    6fc8:	83 95       	inc	r24
    6fca:	71 e3       	ldi	r23, 0x31	; 49
    6fcc:	7d 93       	st	X+, r23
    6fce:	70 e3       	ldi	r23, 0x30	; 48
    6fd0:	2a 95       	dec	r18
    6fd2:	e1 f7       	brne	.-8      	; 0x6fcc <__ftoa_engine+0x192>
    6fd4:	11 24       	eor	r1, r1
    6fd6:	ef 90       	pop	r14
    6fd8:	ff 90       	pop	r15
    6fda:	0f 91       	pop	r16
    6fdc:	1f 91       	pop	r17
    6fde:	cf 91       	pop	r28
    6fe0:	df 91       	pop	r29
    6fe2:	99 27       	eor	r25, r25
    6fe4:	87 fd       	sbrc	r24, 7
    6fe6:	90 95       	com	r25
    6fe8:	08 95       	ret

00006fea <strnlen_P>:
    6fea:	fc 01       	movw	r30, r24
    6fec:	05 90       	lpm	r0, Z+
    6fee:	61 50       	subi	r22, 0x01	; 1
    6ff0:	70 40       	sbci	r23, 0x00	; 0
    6ff2:	01 10       	cpse	r0, r1
    6ff4:	d8 f7       	brcc	.-10     	; 0x6fec <strnlen_P+0x2>
    6ff6:	80 95       	com	r24
    6ff8:	90 95       	com	r25
    6ffa:	8e 0f       	add	r24, r30
    6ffc:	9f 1f       	adc	r25, r31
    6ffe:	08 95       	ret

00007000 <strcat>:
    7000:	fb 01       	movw	r30, r22
    7002:	dc 01       	movw	r26, r24
    7004:	0d 90       	ld	r0, X+
    7006:	00 20       	and	r0, r0
    7008:	e9 f7       	brne	.-6      	; 0x7004 <strcat+0x4>
    700a:	11 97       	sbiw	r26, 0x01	; 1
    700c:	01 90       	ld	r0, Z+
    700e:	0d 92       	st	X+, r0
    7010:	00 20       	and	r0, r0
    7012:	e1 f7       	brne	.-8      	; 0x700c <strcat+0xc>
    7014:	08 95       	ret

00007016 <strcpy>:
    7016:	fb 01       	movw	r30, r22
    7018:	dc 01       	movw	r26, r24
    701a:	01 90       	ld	r0, Z+
    701c:	0d 92       	st	X+, r0
    701e:	00 20       	and	r0, r0
    7020:	e1 f7       	brne	.-8      	; 0x701a <strcpy+0x4>
    7022:	08 95       	ret

00007024 <strnlen>:
    7024:	fc 01       	movw	r30, r24
    7026:	61 50       	subi	r22, 0x01	; 1
    7028:	70 40       	sbci	r23, 0x00	; 0
    702a:	01 90       	ld	r0, Z+
    702c:	01 10       	cpse	r0, r1
    702e:	d8 f7       	brcc	.-10     	; 0x7026 <strnlen+0x2>
    7030:	80 95       	com	r24
    7032:	90 95       	com	r25
    7034:	8e 0f       	add	r24, r30
    7036:	9f 1f       	adc	r25, r31
    7038:	08 95       	ret

0000703a <__mulsi_const_10>:
    703a:	59 2f       	mov	r21, r25
    703c:	48 2f       	mov	r20, r24
    703e:	37 2f       	mov	r19, r23
    7040:	26 2f       	mov	r18, r22
    7042:	66 0f       	add	r22, r22
    7044:	77 1f       	adc	r23, r23
    7046:	88 1f       	adc	r24, r24
    7048:	99 1f       	adc	r25, r25
    704a:	66 0f       	add	r22, r22
    704c:	77 1f       	adc	r23, r23
    704e:	88 1f       	adc	r24, r24
    7050:	99 1f       	adc	r25, r25
    7052:	62 0f       	add	r22, r18
    7054:	73 1f       	adc	r23, r19
    7056:	84 1f       	adc	r24, r20
    7058:	95 1f       	adc	r25, r21
    705a:	66 0f       	add	r22, r22
    705c:	77 1f       	adc	r23, r23
    705e:	88 1f       	adc	r24, r24
    7060:	99 1f       	adc	r25, r25
    7062:	08 95       	ret

00007064 <__mulhi_const_10>:
    7064:	7a e0       	ldi	r23, 0x0A	; 10
    7066:	97 9f       	mul	r25, r23
    7068:	90 2d       	mov	r25, r0
    706a:	87 9f       	mul	r24, r23
    706c:	80 2d       	mov	r24, r0
    706e:	91 0d       	add	r25, r1
    7070:	11 24       	eor	r1, r1
    7072:	08 95       	ret

00007074 <fputc>:
    7074:	0f 93       	push	r16
    7076:	1f 93       	push	r17
    7078:	cf 93       	push	r28
    707a:	df 93       	push	r29
    707c:	fb 01       	movw	r30, r22
    707e:	23 81       	ldd	r18, Z+3	; 0x03
    7080:	21 fd       	sbrc	r18, 1
    7082:	03 c0       	rjmp	.+6      	; 0x708a <fputc+0x16>
    7084:	8f ef       	ldi	r24, 0xFF	; 255
    7086:	9f ef       	ldi	r25, 0xFF	; 255
    7088:	2c c0       	rjmp	.+88     	; 0x70e2 <fputc+0x6e>
    708a:	22 ff       	sbrs	r18, 2
    708c:	16 c0       	rjmp	.+44     	; 0x70ba <fputc+0x46>
    708e:	46 81       	ldd	r20, Z+6	; 0x06
    7090:	57 81       	ldd	r21, Z+7	; 0x07
    7092:	24 81       	ldd	r18, Z+4	; 0x04
    7094:	35 81       	ldd	r19, Z+5	; 0x05
    7096:	42 17       	cp	r20, r18
    7098:	53 07       	cpc	r21, r19
    709a:	44 f4       	brge	.+16     	; 0x70ac <fputc+0x38>
    709c:	a0 81       	ld	r26, Z
    709e:	b1 81       	ldd	r27, Z+1	; 0x01
    70a0:	9d 01       	movw	r18, r26
    70a2:	2f 5f       	subi	r18, 0xFF	; 255
    70a4:	3f 4f       	sbci	r19, 0xFF	; 255
    70a6:	20 83       	st	Z, r18
    70a8:	31 83       	std	Z+1, r19	; 0x01
    70aa:	8c 93       	st	X, r24
    70ac:	26 81       	ldd	r18, Z+6	; 0x06
    70ae:	37 81       	ldd	r19, Z+7	; 0x07
    70b0:	2f 5f       	subi	r18, 0xFF	; 255
    70b2:	3f 4f       	sbci	r19, 0xFF	; 255
    70b4:	26 83       	std	Z+6, r18	; 0x06
    70b6:	37 83       	std	Z+7, r19	; 0x07
    70b8:	14 c0       	rjmp	.+40     	; 0x70e2 <fputc+0x6e>
    70ba:	8b 01       	movw	r16, r22
    70bc:	ec 01       	movw	r28, r24
    70be:	fb 01       	movw	r30, r22
    70c0:	00 84       	ldd	r0, Z+8	; 0x08
    70c2:	f1 85       	ldd	r31, Z+9	; 0x09
    70c4:	e0 2d       	mov	r30, r0
    70c6:	09 95       	icall
    70c8:	89 2b       	or	r24, r25
    70ca:	e1 f6       	brne	.-72     	; 0x7084 <fputc+0x10>
    70cc:	d8 01       	movw	r26, r16
    70ce:	16 96       	adiw	r26, 0x06	; 6
    70d0:	8d 91       	ld	r24, X+
    70d2:	9c 91       	ld	r25, X
    70d4:	17 97       	sbiw	r26, 0x07	; 7
    70d6:	01 96       	adiw	r24, 0x01	; 1
    70d8:	16 96       	adiw	r26, 0x06	; 6
    70da:	8d 93       	st	X+, r24
    70dc:	9c 93       	st	X, r25
    70de:	17 97       	sbiw	r26, 0x07	; 7
    70e0:	ce 01       	movw	r24, r28
    70e2:	df 91       	pop	r29
    70e4:	cf 91       	pop	r28
    70e6:	1f 91       	pop	r17
    70e8:	0f 91       	pop	r16
    70ea:	08 95       	ret

000070ec <sprintf>:
    70ec:	ae e0       	ldi	r26, 0x0E	; 14
    70ee:	b0 e0       	ldi	r27, 0x00	; 0
    70f0:	ec e7       	ldi	r30, 0x7C	; 124
    70f2:	f8 e3       	ldi	r31, 0x38	; 56
    70f4:	0c 94 70 36 	jmp	0x6ce0	; 0x6ce0 <__prologue_saves__+0x1c>
    70f8:	0d 89       	ldd	r16, Y+21	; 0x15
    70fa:	1e 89       	ldd	r17, Y+22	; 0x16
    70fc:	86 e0       	ldi	r24, 0x06	; 6
    70fe:	8c 83       	std	Y+4, r24	; 0x04
    7100:	09 83       	std	Y+1, r16	; 0x01
    7102:	1a 83       	std	Y+2, r17	; 0x02
    7104:	8f ef       	ldi	r24, 0xFF	; 255
    7106:	9f e7       	ldi	r25, 0x7F	; 127
    7108:	8d 83       	std	Y+5, r24	; 0x05
    710a:	9e 83       	std	Y+6, r25	; 0x06
    710c:	ae 01       	movw	r20, r28
    710e:	47 5e       	subi	r20, 0xE7	; 231
    7110:	5f 4f       	sbci	r21, 0xFF	; 255
    7112:	6f 89       	ldd	r22, Y+23	; 0x17
    7114:	78 8d       	ldd	r23, Y+24	; 0x18
    7116:	ce 01       	movw	r24, r28
    7118:	01 96       	adiw	r24, 0x01	; 1
    711a:	0e 94 a1 32 	call	0x6542	; 0x6542 <vfprintf>
    711e:	ef 81       	ldd	r30, Y+7	; 0x07
    7120:	f8 85       	ldd	r31, Y+8	; 0x08
    7122:	e0 0f       	add	r30, r16
    7124:	f1 1f       	adc	r31, r17
    7126:	10 82       	st	Z, r1
    7128:	2e 96       	adiw	r28, 0x0e	; 14
    712a:	e4 e0       	ldi	r30, 0x04	; 4
    712c:	0c 94 89 36 	jmp	0x6d12	; 0x6d12 <__epilogue_restores__+0x1c>

00007130 <__ultoa_invert>:
    7130:	fa 01       	movw	r30, r20
    7132:	aa 27       	eor	r26, r26
    7134:	28 30       	cpi	r18, 0x08	; 8
    7136:	51 f1       	breq	.+84     	; 0x718c <__ultoa_invert+0x5c>
    7138:	20 31       	cpi	r18, 0x10	; 16
    713a:	81 f1       	breq	.+96     	; 0x719c <__ultoa_invert+0x6c>
    713c:	e8 94       	clt
    713e:	6f 93       	push	r22
    7140:	6e 7f       	andi	r22, 0xFE	; 254
    7142:	6e 5f       	subi	r22, 0xFE	; 254
    7144:	7f 4f       	sbci	r23, 0xFF	; 255
    7146:	8f 4f       	sbci	r24, 0xFF	; 255
    7148:	9f 4f       	sbci	r25, 0xFF	; 255
    714a:	af 4f       	sbci	r26, 0xFF	; 255
    714c:	b1 e0       	ldi	r27, 0x01	; 1
    714e:	3e d0       	rcall	.+124    	; 0x71cc <__ultoa_invert+0x9c>
    7150:	b4 e0       	ldi	r27, 0x04	; 4
    7152:	3c d0       	rcall	.+120    	; 0x71cc <__ultoa_invert+0x9c>
    7154:	67 0f       	add	r22, r23
    7156:	78 1f       	adc	r23, r24
    7158:	89 1f       	adc	r24, r25
    715a:	9a 1f       	adc	r25, r26
    715c:	a1 1d       	adc	r26, r1
    715e:	68 0f       	add	r22, r24
    7160:	79 1f       	adc	r23, r25
    7162:	8a 1f       	adc	r24, r26
    7164:	91 1d       	adc	r25, r1
    7166:	a1 1d       	adc	r26, r1
    7168:	6a 0f       	add	r22, r26
    716a:	71 1d       	adc	r23, r1
    716c:	81 1d       	adc	r24, r1
    716e:	91 1d       	adc	r25, r1
    7170:	a1 1d       	adc	r26, r1
    7172:	20 d0       	rcall	.+64     	; 0x71b4 <__ultoa_invert+0x84>
    7174:	09 f4       	brne	.+2      	; 0x7178 <__ultoa_invert+0x48>
    7176:	68 94       	set
    7178:	3f 91       	pop	r19
    717a:	2a e0       	ldi	r18, 0x0A	; 10
    717c:	26 9f       	mul	r18, r22
    717e:	11 24       	eor	r1, r1
    7180:	30 19       	sub	r19, r0
    7182:	30 5d       	subi	r19, 0xD0	; 208
    7184:	31 93       	st	Z+, r19
    7186:	de f6       	brtc	.-74     	; 0x713e <__ultoa_invert+0xe>
    7188:	cf 01       	movw	r24, r30
    718a:	08 95       	ret
    718c:	46 2f       	mov	r20, r22
    718e:	47 70       	andi	r20, 0x07	; 7
    7190:	40 5d       	subi	r20, 0xD0	; 208
    7192:	41 93       	st	Z+, r20
    7194:	b3 e0       	ldi	r27, 0x03	; 3
    7196:	0f d0       	rcall	.+30     	; 0x71b6 <__ultoa_invert+0x86>
    7198:	c9 f7       	brne	.-14     	; 0x718c <__ultoa_invert+0x5c>
    719a:	f6 cf       	rjmp	.-20     	; 0x7188 <__ultoa_invert+0x58>
    719c:	46 2f       	mov	r20, r22
    719e:	4f 70       	andi	r20, 0x0F	; 15
    71a0:	40 5d       	subi	r20, 0xD0	; 208
    71a2:	4a 33       	cpi	r20, 0x3A	; 58
    71a4:	18 f0       	brcs	.+6      	; 0x71ac <__ultoa_invert+0x7c>
    71a6:	49 5d       	subi	r20, 0xD9	; 217
    71a8:	31 fd       	sbrc	r19, 1
    71aa:	40 52       	subi	r20, 0x20	; 32
    71ac:	41 93       	st	Z+, r20
    71ae:	02 d0       	rcall	.+4      	; 0x71b4 <__ultoa_invert+0x84>
    71b0:	a9 f7       	brne	.-22     	; 0x719c <__ultoa_invert+0x6c>
    71b2:	ea cf       	rjmp	.-44     	; 0x7188 <__ultoa_invert+0x58>
    71b4:	b4 e0       	ldi	r27, 0x04	; 4
    71b6:	a6 95       	lsr	r26
    71b8:	97 95       	ror	r25
    71ba:	87 95       	ror	r24
    71bc:	77 95       	ror	r23
    71be:	67 95       	ror	r22
    71c0:	ba 95       	dec	r27
    71c2:	c9 f7       	brne	.-14     	; 0x71b6 <__ultoa_invert+0x86>
    71c4:	00 97       	sbiw	r24, 0x00	; 0
    71c6:	61 05       	cpc	r22, r1
    71c8:	71 05       	cpc	r23, r1
    71ca:	08 95       	ret
    71cc:	9b 01       	movw	r18, r22
    71ce:	ac 01       	movw	r20, r24
    71d0:	0a 2e       	mov	r0, r26
    71d2:	06 94       	lsr	r0
    71d4:	57 95       	ror	r21
    71d6:	47 95       	ror	r20
    71d8:	37 95       	ror	r19
    71da:	27 95       	ror	r18
    71dc:	ba 95       	dec	r27
    71de:	c9 f7       	brne	.-14     	; 0x71d2 <__ultoa_invert+0xa2>
    71e0:	62 0f       	add	r22, r18
    71e2:	73 1f       	adc	r23, r19
    71e4:	84 1f       	adc	r24, r20
    71e6:	95 1f       	adc	r25, r21
    71e8:	a0 1d       	adc	r26, r0
    71ea:	08 95       	ret

000071ec <eeprom_read_block>:
    71ec:	60 50       	subi	r22, 0x00	; 0
    71ee:	7c 4e       	sbci	r23, 0xEC	; 236
    71f0:	0c 94 31 39 	jmp	0x7262	; 0x7262 <memcpy>

000071f4 <eeprom_update_block>:
    71f4:	dc 01       	movw	r26, r24
    71f6:	a4 0f       	add	r26, r20
    71f8:	b5 1f       	adc	r27, r21
    71fa:	41 50       	subi	r20, 0x01	; 1
    71fc:	50 40       	sbci	r21, 0x00	; 0
    71fe:	48 f0       	brcs	.+18     	; 0x7212 <eeprom_update_block+0x1e>
    7200:	cb 01       	movw	r24, r22
    7202:	84 0f       	add	r24, r20
    7204:	95 1f       	adc	r25, r21
    7206:	2e 91       	ld	r18, -X
    7208:	0e 94 0b 39 	call	0x7216	; 0x7216 <eeprom_update_r18>
    720c:	41 50       	subi	r20, 0x01	; 1
    720e:	50 40       	sbci	r21, 0x00	; 0
    7210:	d0 f7       	brcc	.-12     	; 0x7206 <eeprom_update_block+0x12>
    7212:	08 95       	ret

00007214 <eeprom_update_byte>:
    7214:	26 2f       	mov	r18, r22

00007216 <eeprom_update_r18>:
    7216:	0e 94 2d 39 	call	0x725a	; 0x725a <eeprom_mapen>
    721a:	00 80       	ld	r0, Z
    721c:	02 16       	cp	r0, r18
    721e:	19 f0       	breq	.+6      	; 0x7226 <eeprom_update_r18+0x10>
    7220:	0e 94 16 39 	call	0x722c	; 0x722c <eeprom_write_r18>
    7224:	01 97       	sbiw	r24, 0x01	; 1
    7226:	01 97       	sbiw	r24, 0x01	; 1
    7228:	08 95       	ret

0000722a <eeprom_write_byte>:
    722a:	26 2f       	mov	r18, r22

0000722c <eeprom_write_r18>:
    722c:	af 93       	push	r26
    722e:	bf 93       	push	r27
    7230:	e0 e0       	ldi	r30, 0x00	; 0
    7232:	f0 e1       	ldi	r31, 0x10	; 16
    7234:	32 81       	ldd	r19, Z+2	; 0x02
    7236:	31 fd       	sbrc	r19, 1
    7238:	fd cf       	rjmp	.-6      	; 0x7234 <eeprom_write_r18+0x8>
    723a:	dc 01       	movw	r26, r24
    723c:	a0 50       	subi	r26, 0x00	; 0
    723e:	bc 4e       	sbci	r27, 0xEC	; 236
    7240:	2c 93       	st	X, r18
    7242:	2d e9       	ldi	r18, 0x9D	; 157
    7244:	24 bf       	out	0x34, r18	; 52
    7246:	23 e0       	ldi	r18, 0x03	; 3
    7248:	20 83       	st	Z, r18
    724a:	01 96       	adiw	r24, 0x01	; 1
    724c:	bf 91       	pop	r27
    724e:	af 91       	pop	r26
    7250:	08 95       	ret

00007252 <eeprom_read_byte>:
    7252:	03 d0       	rcall	.+6      	; 0x725a <eeprom_mapen>
    7254:	80 81       	ld	r24, Z
    7256:	99 27       	eor	r25, r25
    7258:	08 95       	ret

0000725a <eeprom_mapen>:
    725a:	fc 01       	movw	r30, r24
    725c:	e0 50       	subi	r30, 0x00	; 0
    725e:	fc 4e       	sbci	r31, 0xEC	; 236
    7260:	08 95       	ret

00007262 <memcpy>:
    7262:	fb 01       	movw	r30, r22
    7264:	dc 01       	movw	r26, r24
    7266:	02 c0       	rjmp	.+4      	; 0x726c <memcpy+0xa>
    7268:	01 90       	ld	r0, Z+
    726a:	0d 92       	st	X+, r0
    726c:	41 50       	subi	r20, 0x01	; 1
    726e:	50 40       	sbci	r21, 0x00	; 0
    7270:	d8 f7       	brcc	.-10     	; 0x7268 <memcpy+0x6>
    7272:	08 95       	ret

00007274 <_exit>:
    7274:	f8 94       	cli

00007276 <__stop_program>:
    7276:	ff cf       	rjmp	.-2      	; 0x7276 <__stop_program>
