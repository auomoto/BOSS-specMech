
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  00004a18  00004acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000046ac  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  000086ac  000046ac  00004760  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000082e  00802802  00802802  00004ace  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00004ace  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004b2c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000660  00000000  00000000  00004b70  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a337  00000000  00000000  000051d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004770  00000000  00000000  0000f507  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000457a  00000000  00000000  00013c77  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ebc  00000000  00000000  000181f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000022a1  00000000  00000000  000190b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000404a  00000000  00000000  0001b351  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b0  00000000  00000000  0001f39b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 01 	jmp	0x254	; 0x254 <__ctors_end>
       4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       c:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__vector_3>
      10:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      14:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      18:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      1c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      20:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      24:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      28:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      2c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      30:	0c 94 25 18 	jmp	0x304a	; 0x304a <__vector_12>
      34:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      38:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      3c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      40:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      44:	0c 94 84 19 	jmp	0x3308	; 0x3308 <__vector_17>
      48:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__vector_18>
      4c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      50:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__vector_20>
      54:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      58:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      5c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      60:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      64:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      68:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__vector_26>
      6c:	0c 94 29 1a 	jmp	0x3452	; 0x3452 <__vector_27>
      70:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      74:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__vector_29>
      78:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      7c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      80:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      84:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      88:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      8c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      90:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      94:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <__vector_37>
      98:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__vector_38>
      9c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      a0:	96 04       	cpc	r9, r6
      a2:	a4 04       	cpc	r10, r4
      a4:	a4 04       	cpc	r10, r4
      a6:	a4 04       	cpc	r10, r4
      a8:	a4 04       	cpc	r10, r4
      aa:	a4 04       	cpc	r10, r4
      ac:	a4 04       	cpc	r10, r4
      ae:	a4 04       	cpc	r10, r4
      b0:	a4 04       	cpc	r10, r4
      b2:	a4 04       	cpc	r10, r4
      b4:	a4 04       	cpc	r10, r4
      b6:	a4 04       	cpc	r10, r4
      b8:	a4 04       	cpc	r10, r4
      ba:	a4 04       	cpc	r10, r4
      bc:	a4 04       	cpc	r10, r4
      be:	a4 04       	cpc	r10, r4
      c0:	a4 04       	cpc	r10, r4
      c2:	7c 04       	cpc	r7, r12
      c4:	a4 04       	cpc	r10, r4
      c6:	a4 04       	cpc	r10, r4
      c8:	a4 04       	cpc	r10, r4
      ca:	a4 04       	cpc	r10, r4
      cc:	a4 04       	cpc	r10, r4
      ce:	a4 04       	cpc	r10, r4
      d0:	a4 04       	cpc	r10, r4
      d2:	a4 04       	cpc	r10, r4
      d4:	a4 04       	cpc	r10, r4
      d6:	86 04       	cpc	r8, r6
      d8:	a4 04       	cpc	r10, r4
      da:	81 04       	cpc	r8, r1
      dc:	a4 04       	cpc	r10, r4
      de:	a4 04       	cpc	r10, r4
      e0:	8a 04       	cpc	r8, r10
      e2:	8e 04       	cpc	r8, r14
      e4:	92 04       	cpc	r9, r2
      e6:	7d 0e       	add	r7, r29
      e8:	7d 0e       	add	r7, r29
      ea:	7d 0e       	add	r7, r29
      ec:	e2 13       	cpse	r30, r18
      ee:	e2 13       	cpse	r30, r18
      f0:	e2 13       	cpse	r30, r18
      f2:	e2 13       	cpse	r30, r18
      f4:	e2 13       	cpse	r30, r18
      f6:	e2 13       	cpse	r30, r18
      f8:	e2 13       	cpse	r30, r18
      fa:	e2 13       	cpse	r30, r18
      fc:	e2 13       	cpse	r30, r18
      fe:	e2 13       	cpse	r30, r18
     100:	e2 13       	cpse	r30, r18
     102:	e2 13       	cpse	r30, r18
     104:	e2 13       	cpse	r30, r18
     106:	e2 13       	cpse	r30, r18
     108:	e2 13       	cpse	r30, r18
     10a:	e2 13       	cpse	r30, r18
     10c:	e2 13       	cpse	r30, r18
     10e:	e2 13       	cpse	r30, r18
     110:	90 13       	cpse	r25, r16
     112:	e2 13       	cpse	r30, r18
     114:	e2 13       	cpse	r30, r18
     116:	e2 13       	cpse	r30, r18
     118:	e2 13       	cpse	r30, r18
     11a:	e2 13       	cpse	r30, r18
     11c:	e2 13       	cpse	r30, r18
     11e:	e2 13       	cpse	r30, r18
     120:	e2 13       	cpse	r30, r18
     122:	e2 13       	cpse	r30, r18
     124:	e2 13       	cpse	r30, r18
     126:	23 0f       	add	r18, r19
     128:	23 0f       	add	r18, r19
     12a:	23 0f       	add	r18, r19
     12c:	e2 13       	cpse	r30, r18
     12e:	f7 0f       	add	r31, r23
     130:	e2 13       	cpse	r30, r18
     132:	e2 13       	cpse	r30, r18
     134:	e2 13       	cpse	r30, r18
     136:	e2 13       	cpse	r30, r18
     138:	e2 13       	cpse	r30, r18
     13a:	e2 13       	cpse	r30, r18
     13c:	e2 13       	cpse	r30, r18
     13e:	e2 13       	cpse	r30, r18
     140:	e2 13       	cpse	r30, r18
     142:	37 11       	cpse	r19, r7
     144:	25 12       	cpse	r2, r21
     146:	e2 13       	cpse	r30, r18
     148:	e2 13       	cpse	r30, r18
     14a:	e2 13       	cpse	r30, r18
     14c:	c3 12       	cpse	r12, r19
     14e:	e2 13       	cpse	r30, r18
     150:	22 13       	cpse	r18, r18

00000152 <__trampolines_end>:
     152:	6e 61       	ori	r22, 0x1E	; 30
     154:	6e 00       	.word	0x006e	; ????

00000156 <__c.2332>:
     156:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     166:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     176:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     186:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     196:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1a6:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1b6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1c6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1d6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1e6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1f6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     206:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     216:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     226:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     236:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     246:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000254 <__ctors_end>:
     254:	11 24       	eor	r1, r1
     256:	1f be       	out	0x3f, r1	; 63
     258:	cf ef       	ldi	r28, 0xFF	; 255
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	df e3       	ldi	r29, 0x3F	; 63
     25e:	de bf       	out	0x3e, r29	; 62

00000260 <__do_copy_data>:
     260:	18 e2       	ldi	r17, 0x28	; 40
     262:	a0 e0       	ldi	r26, 0x00	; 0
     264:	b8 e2       	ldi	r27, 0x28	; 40
     266:	e8 e1       	ldi	r30, 0x18	; 24
     268:	fa e4       	ldi	r31, 0x4A	; 74
     26a:	02 c0       	rjmp	.+4      	; 0x270 <__do_copy_data+0x10>
     26c:	05 90       	lpm	r0, Z+
     26e:	0d 92       	st	X+, r0
     270:	a2 30       	cpi	r26, 0x02	; 2
     272:	b1 07       	cpc	r27, r17
     274:	d9 f7       	brne	.-10     	; 0x26c <__do_copy_data+0xc>

00000276 <__do_clear_bss>:
     276:	20 e3       	ldi	r18, 0x30	; 48
     278:	a2 e0       	ldi	r26, 0x02	; 2
     27a:	b8 e2       	ldi	r27, 0x28	; 40
     27c:	01 c0       	rjmp	.+2      	; 0x280 <.do_clear_bss_start>

0000027e <.do_clear_bss_loop>:
     27e:	1d 92       	st	X+, r1

00000280 <.do_clear_bss_start>:
     280:	a0 33       	cpi	r26, 0x30	; 48
     282:	b2 07       	cpc	r27, r18
     284:	e1 f7       	brne	.-8      	; 0x27e <.do_clear_bss_loop>
     286:	0e 94 26 08 	call	0x104c	; 0x104c <main>
     28a:	0c 94 54 23 	jmp	0x46a8	; 0x46a8 <_exit>

0000028e <__bad_interrupt>:
     28e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000292 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
float read_AD590(uint8_t sensor)
{
     292:	cf 92       	push	r12
     294:	df 92       	push	r13
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	cf 93       	push	r28

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	c9 f0       	breq	.+50     	; 0x2d2 <read_AD590+0x40>
     2a0:	18 f0       	brcs	.+6      	; 0x2a8 <read_AD590+0x16>
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	61 f0       	breq	.+24     	; 0x2be <read_AD590+0x2c>
     2a6:	10 c0       	rjmp	.+32     	; 0x2c8 <read_AD590+0x36>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     2a8:	0f 2e       	mov	r0, r31
     2aa:	f3 e3       	ldi	r31, 0x33	; 51
     2ac:	cf 2e       	mov	r12, r31
     2ae:	dc 2c       	mov	r13, r12
     2b0:	f3 ef       	ldi	r31, 0xF3	; 243
     2b2:	ef 2e       	mov	r14, r31
     2b4:	f0 e4       	ldi	r31, 0x40	; 64
     2b6:	ff 2e       	mov	r15, r31
     2b8:	f0 2d       	mov	r31, r0
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     2ba:	c1 e0       	ldi	r28, 0x01	; 1
     2bc:	0e c0       	rjmp	.+28     	; 0x2da <read_AD590+0x48>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     2be:	c1 2c       	mov	r12, r1
     2c0:	d1 2c       	mov	r13, r1
     2c2:	76 01       	movw	r14, r12
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     2c4:	c0 e1       	ldi	r28, 0x10	; 16
			offset = 0.0;
			break;
     2c6:	09 c0       	rjmp	.+18     	; 0x2da <read_AD590+0x48>
{

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
     2c8:	c1 2c       	mov	r12, r1
     2ca:	d1 2c       	mov	r13, r1
     2cc:	76 01       	movw	r14, r12
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2ce:	c0 e0       	ldi	r28, 0x00	; 0
			break;
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <read_AD590+0x48>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2d2:	c1 2c       	mov	r12, r1
     2d4:	d1 2c       	mov	r13, r1
     2d6:	76 01       	movw	r14, r12
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2d8:	c4 e0       	ldi	r28, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	66 e0       	ldi	r22, 0x06	; 6
     2de:	87 e2       	ldi	r24, 0x27	; 39
     2e0:	0e 94 4b 08 	call	0x1096	; 0x1096 <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2e4:	4c 2f       	mov	r20, r28
     2e6:	40 95       	com	r20
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	87 e2       	ldi	r24, 0x27	; 39
     2ec:	0e 94 4b 08 	call	0x1096	; 0x1096 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     2f0:	4c 2f       	mov	r20, r28
     2f2:	6a e0       	ldi	r22, 0x0A	; 10
     2f4:	87 e2       	ldi	r24, 0x27	; 39
     2f6:	0e 94 4b 08 	call	0x1096	; 0x1096 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fa:	86 e1       	ldi	r24, 0x16	; 22
     2fc:	8a 95       	dec	r24
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <read_AD590+0x6a>
     300:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	voltage = read_ADS1115(ADC_TE, PGA0512, AIN3, DR128);
     302:	20 e8       	ldi	r18, 0x80	; 128
     304:	40 e7       	ldi	r20, 0x70	; 112
     306:	68 e0       	ldi	r22, 0x08	; 8
     308:	88 e4       	ldi	r24, 0x48	; 72
     30a:	0e 94 9f 01 	call	0x33e	; 0x33e <read_ADS1115>
	temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	4a e7       	ldi	r20, 0x7A	; 122
     314:	54 e4       	ldi	r21, 0x44	; 68
     316:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__mulsf3>
     31a:	23 e3       	ldi	r18, 0x33	; 51
     31c:	33 e9       	ldi	r19, 0x93	; 147
     31e:	48 e8       	ldi	r20, 0x88	; 136
     320:	53 e4       	ldi	r21, 0x43	; 67
     322:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <__subsf3>
     326:	9b 01       	movw	r18, r22
     328:	ac 01       	movw	r20, r24
     32a:	c7 01       	movw	r24, r14
     32c:	b6 01       	movw	r22, r12
     32e:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__addsf3>
	return(temperature);

}
     332:	cf 91       	pop	r28
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	08 95       	ret

0000033e <read_ADS1115>:
		datarate - one of the eight selectable data rates. We chose the
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
float read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins, uint8_t datarate)
{
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	d8 2f       	mov	r29, r24
     350:	f6 2e       	mov	r15, r22
	float scale, voltage;
	uint8_t confighi, configlo, retval, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     352:	46 2b       	or	r20, r22
     354:	c4 2f       	mov	r28, r20
     356:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     358:	12 2f       	mov	r17, r18
     35a:	13 60       	ori	r17, 0x03	; 3

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start condition
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
     362:	08 2f       	mov	r16, r24
     364:	88 23       	and	r24, r24
     366:	69 f0       	breq	.+26     	; 0x382 <read_ADS1115+0x44>
		stop_TWI();
     368:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
		return(retval);
     36c:	60 2f       	mov	r22, r16
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 bd 1b 	call	0x377a	; 0x377a <__floatunsisf>
     378:	56 2f       	mov	r21, r22
     37a:	47 2f       	mov	r20, r23
     37c:	38 2f       	mov	r19, r24
     37e:	29 2f       	mov	r18, r25
     380:	d0 c0       	rjmp	.+416    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	}
	if ((retval = write_TWI(ADS1115CONFIG))) {		// Write the CONFIG register
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
     388:	08 2f       	mov	r16, r24
     38a:	88 23       	and	r24, r24
     38c:	69 f0       	breq	.+26     	; 0x3a8 <read_ADS1115+0x6a>
		stop_TWI();
     38e:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
		return(retval);
     392:	60 2f       	mov	r22, r16
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 bd 1b 	call	0x377a	; 0x377a <__floatunsisf>
     39e:	56 2f       	mov	r21, r22
     3a0:	47 2f       	mov	r20, r23
     3a2:	38 2f       	mov	r19, r24
     3a4:	29 2f       	mov	r18, r25
     3a6:	bd c0       	rjmp	.+378    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	}
	if ((retval = write_TWI(confighi))) {			// Write high byte
     3a8:	8c 2f       	mov	r24, r28
     3aa:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
     3ae:	c8 2f       	mov	r28, r24
     3b0:	88 23       	and	r24, r24
     3b2:	69 f0       	breq	.+26     	; 0x3ce <read_ADS1115+0x90>
		stop_TWI();
     3b4:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
		return(retval);
     3b8:	6c 2f       	mov	r22, r28
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 bd 1b 	call	0x377a	; 0x377a <__floatunsisf>
     3c4:	56 2f       	mov	r21, r22
     3c6:	47 2f       	mov	r20, r23
     3c8:	38 2f       	mov	r19, r24
     3ca:	29 2f       	mov	r18, r25
     3cc:	aa c0       	rjmp	.+340    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	}
	if ((retval = write_TWI(configlo))) {			// Write low byte
     3ce:	81 2f       	mov	r24, r17
     3d0:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
     3d4:	c8 2f       	mov	r28, r24
     3d6:	88 23       	and	r24, r24
     3d8:	69 f0       	breq	.+26     	; 0x3f4 <read_ADS1115+0xb6>
		stop_TWI();
     3da:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
		return(retval);
     3de:	6c 2f       	mov	r22, r28
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 bd 1b 	call	0x377a	; 0x377a <__floatunsisf>
     3ea:	56 2f       	mov	r21, r22
     3ec:	47 2f       	mov	r20, r23
     3ee:	38 2f       	mov	r19, r24
     3f0:	29 2f       	mov	r18, r25
     3f2:	97 c0       	rjmp	.+302    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	}
	stop_TWI();
     3f4:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
     3f8:	8c e1       	ldi	r24, 0x1C	; 28
     3fa:	8a 95       	dec	r24
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <read_ADS1115+0xbc>

	_delay_us(25);									// Power-up time

	converting = YES;
     3fe:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     400:	09 c0       	rjmp	.+18     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		start_TWI(addr, TWIREAD);
     402:	61 e0       	ldi	r22, 0x01	; 1
     404:	8d 2f       	mov	r24, r29
     406:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
     40a:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <readlast_TWI>
		if (flag & 0b10000000) {			// or add a timer timeout
     40e:	88 23       	and	r24, r24
     410:	0c f4       	brge	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			converting = NO;
     412:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     414:	c1 11       	cpse	r28, r1
     416:	f5 cf       	rjmp	.-22     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
		if (flag & 0b10000000) {			// or add a timer timeout
			converting = NO;
		}
	}
	stop_TWI();
     418:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>

	start_TWI(addr, TWIWRITE);
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	8d 2f       	mov	r24, r29
     420:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	8d 2f       	mov	r24, r29
     42e:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
	highbyte = read_TWI();
     432:	0e 94 4a 18 	call	0x3094	; 0x3094 <read_TWI>
     436:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     438:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <readlast_TWI>
     43c:	d8 2f       	mov	r29, r24
	stop_TWI();
     43e:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>

	value = highbyte;
     442:	6c 2f       	mov	r22, r28
     444:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     446:	76 2f       	mov	r23, r22
     448:	66 27       	eor	r22, r22
	value |= lowbyte;
     44a:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     44c:	84 e0       	ldi	r24, 0x04	; 4
     44e:	f8 16       	cp	r15, r24
     450:	49 f1       	breq	.+82     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     452:	8f 15       	cp	r24, r15
     454:	30 f0       	brcs	.+12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     456:	ff 20       	and	r15, r15
     458:	d9 f1       	breq	.+118    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	f8 16       	cp	r15, r24
     45e:	69 f1       	breq	.+90     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     460:	42 c0       	rjmp	.+132    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     462:	88 e0       	ldi	r24, 0x08	; 8
     464:	f8 16       	cp	r15, r24
     466:	09 f4       	brne	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     468:	42 c0       	rjmp	.+132    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     46a:	8a e0       	ldi	r24, 0x0A	; 10
     46c:	f8 16       	cp	r15, r24
     46e:	21 f0       	breq	.+8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     470:	86 e0       	ldi	r24, 0x06	; 6
     472:	f8 12       	cpse	r15, r24
     474:	38 c0       	rjmp	.+112    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     476:	0b c0       	rjmp	.+22     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		case PGA0256:
			scale = SCA0256;
     478:	0f 2e       	mov	r0, r31
     47a:	f4 e7       	ldi	r31, 0x74	; 116
     47c:	cf 2e       	mov	r12, r31
     47e:	f3 e1       	ldi	r31, 0x13	; 19
     480:	df 2e       	mov	r13, r31
     482:	f3 e0       	ldi	r31, 0x03	; 3
     484:	ef 2e       	mov	r14, r31
     486:	f7 e3       	ldi	r31, 0x37	; 55
     488:	ff 2e       	mov	r15, r31
     48a:	f0 2d       	mov	r31, r0
     48c:	3a c0       	rjmp	.+116    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     48e:	0f 2e       	mov	r0, r31
     490:	f4 e7       	ldi	r31, 0x74	; 116
     492:	cf 2e       	mov	r12, r31
     494:	f3 e1       	ldi	r31, 0x13	; 19
     496:	df 2e       	mov	r13, r31
     498:	f3 e0       	ldi	r31, 0x03	; 3
     49a:	ef 2e       	mov	r14, r31
     49c:	f8 e3       	ldi	r31, 0x38	; 56
     49e:	ff 2e       	mov	r15, r31
     4a0:	f0 2d       	mov	r31, r0
			break;
     4a2:	2f c0       	rjmp	.+94     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		case PGA2048:
			scale = SCA2048;
     4a4:	0f 2e       	mov	r0, r31
     4a6:	f2 e1       	ldi	r31, 0x12	; 18
     4a8:	cf 2e       	mov	r12, r31
     4aa:	f3 e1       	ldi	r31, 0x13	; 19
     4ac:	df 2e       	mov	r13, r31
     4ae:	f3 e8       	ldi	r31, 0x83	; 131
     4b0:	ef 2e       	mov	r14, r31
     4b2:	f8 e3       	ldi	r31, 0x38	; 56
     4b4:	ff 2e       	mov	r15, r31
     4b6:	f0 2d       	mov	r31, r0
			break;
     4b8:	24 c0       	rjmp	.+72     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		case PGA4096:
			scale = SCA4096;
     4ba:	0f 2e       	mov	r0, r31
     4bc:	f4 e7       	ldi	r31, 0x74	; 116
     4be:	cf 2e       	mov	r12, r31
     4c0:	f3 e1       	ldi	r31, 0x13	; 19
     4c2:	df 2e       	mov	r13, r31
     4c4:	f3 e0       	ldi	r31, 0x03	; 3
     4c6:	ef 2e       	mov	r14, r31
     4c8:	f9 e3       	ldi	r31, 0x39	; 57
     4ca:	ff 2e       	mov	r15, r31
     4cc:	f0 2d       	mov	r31, r0
			break;
     4ce:	19 c0       	rjmp	.+50     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		case PGA6144:
			scale = SCA6144;
     4d0:	0f 2e       	mov	r0, r31
     4d2:	fe e2       	ldi	r31, 0x2E	; 46
     4d4:	cf 2e       	mov	r12, r31
     4d6:	fd e9       	ldi	r31, 0x9D	; 157
     4d8:	df 2e       	mov	r13, r31
     4da:	f4 e4       	ldi	r31, 0x44	; 68
     4dc:	ef 2e       	mov	r14, r31
     4de:	f9 e3       	ldi	r31, 0x39	; 57
     4e0:	ff 2e       	mov	r15, r31
     4e2:	f0 2d       	mov	r31, r0
			break;
     4e4:	0e c0       	rjmp	.+28     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		default:
			scale = 0.0;
     4e6:	c1 2c       	mov	r12, r1
     4e8:	d1 2c       	mov	r13, r1
     4ea:	76 01       	movw	r14, r12
			break;
     4ec:	0a c0       	rjmp	.+20     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     4ee:	0f 2e       	mov	r0, r31
     4f0:	f1 e7       	ldi	r31, 0x71	; 113
     4f2:	cf 2e       	mov	r12, r31
     4f4:	f3 e1       	ldi	r31, 0x13	; 19
     4f6:	df 2e       	mov	r13, r31
     4f8:	f3 e8       	ldi	r31, 0x83	; 131
     4fa:	ef 2e       	mov	r14, r31
     4fc:	f7 e3       	ldi	r31, 0x37	; 55
     4fe:	ff 2e       	mov	r15, r31
     500:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	voltage = scale * (float) value;
     502:	07 2e       	mov	r0, r23
     504:	00 0c       	add	r0, r0
     506:	88 0b       	sbc	r24, r24
     508:	99 0b       	sbc	r25, r25
     50a:	0e 94 bf 1b 	call	0x377e	; 0x377e <__floatsisf>
     50e:	9b 01       	movw	r18, r22
     510:	ac 01       	movw	r20, r24
     512:	c7 01       	movw	r24, r14
     514:	b6 01       	movw	r22, r12
     516:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__mulsf3>
	return(voltage);
     51a:	56 2f       	mov	r21, r22
     51c:	47 2f       	mov	r20, r23
     51e:	38 2f       	mov	r19, r24
     520:	29 2f       	mov	r18, r25

}
     522:	65 2f       	mov	r22, r21
     524:	74 2f       	mov	r23, r20
     526:	83 2f       	mov	r24, r19
     528:	92 2f       	mov	r25, r18
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	df 90       	pop	r13
     538:	cf 90       	pop	r12
     53a:	08 95       	ret

0000053c <init_BEEPER>:
#include "beeper.h"

void init_BEEPER(void)
{

	PORTB.OUTSET = PIN2_bm;
     53c:	e0 e2       	ldi	r30, 0x20	; 32
     53e:	f4 e0       	ldi	r31, 0x04	; 4
     540:	84 e0       	ldi	r24, 0x04	; 4
     542:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     544:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = PIN2_bm;
     546:	86 83       	std	Z+6, r24	; 0x06
     548:	08 95       	ret

0000054a <echo_cmd>:
{
	if ((d >= '0') && (d <= '9')) {
		return(1);
	}
	return(0);
}
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	c4 51       	subi	r28, 0x14	; 20
     558:	d1 40       	sbci	r29, 0x01	; 1
     55a:	cd bf       	out	0x3d, r28	; 61
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	2b e0       	ldi	r18, 0x0B	; 11
     560:	ec ea       	ldi	r30, 0xAC	; 172
     562:	f6 e8       	ldi	r31, 0x86	; 134
     564:	de 01       	movw	r26, r28
     566:	11 96       	adiw	r26, 0x01	; 1
     568:	01 90       	ld	r0, Z+
     56a:	0d 92       	st	X+, r0
     56c:	2a 95       	dec	r18
     56e:	e1 f7       	brne	.-8      	; 0x568 <echo_cmd+0x1e>
     570:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     574:	22 ff       	sbrs	r18, 2
     576:	03 c0       	rjmp	.+6      	; 0x57e <echo_cmd+0x34>
     578:	22 e0       	ldi	r18, 0x02	; 2
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	02 c0       	rjmp	.+4      	; 0x582 <echo_cmd+0x38>
     57e:	21 e0       	ldi	r18, 0x01	; 1
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	9f 93       	push	r25
     584:	8f 93       	push	r24
     586:	3f 93       	push	r19
     588:	2f 93       	push	r18
     58a:	ce 01       	movw	r24, r28
     58c:	01 96       	adiw	r24, 0x01	; 1
     58e:	9f 93       	push	r25
     590:	8f 93       	push	r24
     592:	8e 01       	movw	r16, r28
     594:	04 5f       	subi	r16, 0xF4	; 244
     596:	1f 4f       	sbci	r17, 0xFF	; 255
     598:	1f 93       	push	r17
     59a:	0f 93       	push	r16
     59c:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
     5a0:	c8 01       	movw	r24, r16
     5a2:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <checksum_NMEA>
     5a6:	f8 01       	movw	r30, r16
     5a8:	01 90       	ld	r0, Z+
     5aa:	00 20       	and	r0, r0
     5ac:	e9 f7       	brne	.-6      	; 0x5a8 <echo_cmd+0x5e>
     5ae:	31 97       	sbiw	r30, 0x01	; 1
     5b0:	af 01       	movw	r20, r30
     5b2:	40 1b       	sub	r20, r16
     5b4:	51 0b       	sbc	r21, r17
     5b6:	b8 01       	movw	r22, r16
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>
     5be:	cd bf       	out	0x3d, r28	; 61
     5c0:	de bf       	out	0x3e, r29	; 62
     5c2:	cc 5e       	subi	r28, 0xEC	; 236
     5c4:	de 4f       	sbci	r29, 0xFE	; 254
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	08 95       	ret

000005d4 <get_cmdline>:
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	9c 01       	movw	r18, r24
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	1c c0       	rjmp	.+56     	; 0x616 <get_cmdline+0x42>
     5de:	c7 e1       	ldi	r28, 0x17	; 23
     5e0:	dc e2       	ldi	r29, 0x2C	; 44
     5e2:	e8 81       	ld	r30, Y
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	e9 5e       	subi	r30, 0xE9	; 233
     5e8:	f4 4d       	sbci	r31, 0xD4	; 212
     5ea:	80 81       	ld	r24, Z
     5ec:	f9 01       	movw	r30, r18
     5ee:	e4 0f       	add	r30, r20
     5f0:	f1 1d       	adc	r31, r1
     5f2:	80 83       	st	Z, r24
     5f4:	a9 e1       	ldi	r26, 0x19	; 25
     5f6:	bc e2       	ldi	r27, 0x2C	; 44
     5f8:	8c 91       	ld	r24, X
     5fa:	81 50       	subi	r24, 0x01	; 1
     5fc:	8c 93       	st	X, r24
     5fe:	88 81       	ld	r24, Y
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	6f ef       	ldi	r22, 0xFF	; 255
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__divmodhi4>
     60c:	88 83       	st	Y, r24
     60e:	80 81       	ld	r24, Z
     610:	88 23       	and	r24, r24
     612:	29 f0       	breq	.+10     	; 0x61e <get_cmdline+0x4a>
     614:	4f 5f       	subi	r20, 0xFF	; 255
     616:	80 91 19 2c 	lds	r24, 0x2C19	; 0x802c19 <recv0_buf+0x102>
     61a:	81 11       	cpse	r24, r1
     61c:	e0 cf       	rjmp	.-64     	; 0x5de <get_cmdline+0xa>
     61e:	f9 01       	movw	r30, r18
     620:	e4 0f       	add	r30, r20
     622:	f1 1d       	adc	r31, r1
     624:	10 82       	st	Z, r1
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     62c:	9f e9       	ldi	r25, 0x9F	; 159
     62e:	98 0f       	add	r25, r24
     630:	9a 31       	cpi	r25, 0x1A	; 26
     632:	28 f0       	brcs	.+10     	; 0x63e <isaletter+0x12>
     634:	81 54       	subi	r24, 0x41	; 65
     636:	8a 31       	cpi	r24, 0x1A	; 26
     638:	20 f4       	brcc	.+8      	; 0x642 <isaletter+0x16>
		return(1);
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	08 95       	ret
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	08 95       	ret
	}
	return(0);
     642:	80 e0       	ldi	r24, 0x00	; 0

}
     644:	08 95       	ret

00000646 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     652:	e6 2e       	mov	r14, r22
     654:	f1 2c       	mov	r15, r1
     656:	84 e3       	ldi	r24, 0x34	; 52
     658:	8e 9d       	mul	r24, r14
     65a:	f0 01       	movw	r30, r0
     65c:	8f 9d       	mul	r24, r15
     65e:	f0 0d       	add	r31, r0
     660:	11 24       	eor	r1, r1
     662:	ed 5f       	subi	r30, 0xFD	; 253
     664:	f7 4d       	sbci	r31, 0xD7	; 215
     666:	8f e3       	ldi	r24, 0x3F	; 63
     668:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     66a:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     66c:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     66e:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {
     670:	04 c0       	rjmp	.+8      	; 0x67a <parse_cmd+0x34>
		if (*ptr == '\0') {
     672:	11 23       	and	r17, r17
     674:	09 f4       	brne	.+2      	; 0x678 <parse_cmd+0x32>
     676:	75 c0       	rjmp	.+234    	; 0x762 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     678:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {
     67a:	18 81       	ld	r17, Y
     67c:	81 2f       	mov	r24, r17
     67e:	0e 94 16 03 	call	0x62c	; 0x62c <isaletter>
     682:	88 23       	and	r24, r24
     684:	b1 f3       	breq	.-20     	; 0x672 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     686:	21 96       	adiw	r28, 0x01	; 1
     688:	84 e3       	ldi	r24, 0x34	; 52
     68a:	8e 9d       	mul	r24, r14
     68c:	f0 01       	movw	r30, r0
     68e:	8f 9d       	mul	r24, r15
     690:	f0 0d       	add	r31, r0
     692:	11 24       	eor	r1, r1
     694:	ed 5f       	subi	r30, 0xFD	; 253
     696:	f7 4d       	sbci	r31, 0xD7	; 215
     698:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {
     69a:	04 c0       	rjmp	.+8      	; 0x6a4 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     69c:	11 23       	and	r17, r17
     69e:	09 f4       	brne	.+2      	; 0x6a2 <parse_cmd+0x5c>
     6a0:	60 c0       	rjmp	.+192    	; 0x762 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     6a2:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {
     6a4:	18 81       	ld	r17, Y
     6a6:	81 2f       	mov	r24, r17
     6a8:	0e 94 16 03 	call	0x62c	; 0x62c <isaletter>
     6ac:	88 23       	and	r24, r24
     6ae:	b1 f3       	breq	.-20     	; 0x69c <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     6b0:	21 96       	adiw	r28, 0x01	; 1
     6b2:	84 e3       	ldi	r24, 0x34	; 52
     6b4:	8e 9d       	mul	r24, r14
     6b6:	f0 01       	movw	r30, r0
     6b8:	8f 9d       	mul	r24, r15
     6ba:	f0 0d       	add	r31, r0
     6bc:	11 24       	eor	r1, r1
     6be:	ed 5f       	subi	r30, 0xFD	; 253
     6c0:	f7 4d       	sbci	r31, 0xD7	; 215
     6c2:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	2a c0       	rjmp	.+84     	; 0x71c <parse_cmd+0xd6>
		if (*ptr == '\0') {
     6c8:	98 81       	ld	r25, Y
     6ca:	91 11       	cpse	r25, r1
     6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     6ce:	94 e3       	ldi	r25, 0x34	; 52
     6d0:	9e 9d       	mul	r25, r14
     6d2:	f0 01       	movw	r30, r0
     6d4:	9f 9d       	mul	r25, r15
     6d6:	f0 0d       	add	r31, r0
     6d8:	11 24       	eor	r1, r1
     6da:	ed 5f       	subi	r30, 0xFD	; 253
     6dc:	f7 4d       	sbci	r31, 0xD7	; 215
     6de:	e8 0f       	add	r30, r24
     6e0:	f1 1d       	adc	r31, r1
     6e2:	12 82       	std	Z+2, r1	; 0x02
			return;
     6e4:	3e c0       	rjmp	.+124    	; 0x762 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {
     6e6:	9b 33       	cpi	r25, 0x3B	; 59
     6e8:	61 f4       	brne	.+24     	; 0x702 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     6ea:	94 e3       	ldi	r25, 0x34	; 52
     6ec:	9e 9d       	mul	r25, r14
     6ee:	f0 01       	movw	r30, r0
     6f0:	9f 9d       	mul	r25, r15
     6f2:	f0 0d       	add	r31, r0
     6f4:	11 24       	eor	r1, r1
     6f6:	ed 5f       	subi	r30, 0xFD	; 253
     6f8:	f7 4d       	sbci	r31, 0xD7	; 215
     6fa:	e8 0f       	add	r30, r24
     6fc:	f1 1d       	adc	r31, r1
     6fe:	12 82       	std	Z+2, r1	; 0x02
			break;
     700:	0f c0       	rjmp	.+30     	; 0x720 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     702:	21 96       	adiw	r28, 0x01	; 1
     704:	24 e3       	ldi	r18, 0x34	; 52
     706:	2e 9d       	mul	r18, r14
     708:	f0 01       	movw	r30, r0
     70a:	2f 9d       	mul	r18, r15
     70c:	f0 0d       	add	r31, r0
     70e:	11 24       	eor	r1, r1
     710:	ed 5f       	subi	r30, 0xFD	; 253
     712:	f7 4d       	sbci	r31, 0xD7	; 215
     714:	e8 0f       	add	r30, r24
     716:	f1 1d       	adc	r31, r1
     718:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     71a:	8f 5f       	subi	r24, 0xFF	; 255
     71c:	89 32       	cpi	r24, 0x29	; 41
     71e:	a0 f2       	brcs	.-88     	; 0x6c8 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
     720:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	1c c0       	rjmp	.+56     	; 0x75e <parse_cmd+0x118>
		if (*ptr == '\0') {
     726:	98 81       	ld	r25, Y
     728:	91 11       	cpse	r25, r1
     72a:	0c c0       	rjmp	.+24     	; 0x744 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     72c:	94 e3       	ldi	r25, 0x34	; 52
     72e:	9e 9d       	mul	r25, r14
     730:	f0 01       	movw	r30, r0
     732:	9f 9d       	mul	r25, r15
     734:	f0 0d       	add	r31, r0
     736:	11 24       	eor	r1, r1
     738:	ed 5f       	subi	r30, 0xFD	; 253
     73a:	f7 4d       	sbci	r31, 0xD7	; 215
     73c:	e8 0f       	add	r30, r24
     73e:	f1 1d       	adc	r31, r1
     740:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     742:	0f c0       	rjmp	.+30     	; 0x762 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     744:	21 96       	adiw	r28, 0x01	; 1
     746:	24 e3       	ldi	r18, 0x34	; 52
     748:	2e 9d       	mul	r18, r14
     74a:	f0 01       	movw	r30, r0
     74c:	2f 9d       	mul	r18, r15
     74e:	f0 0d       	add	r31, r0
     750:	11 24       	eor	r1, r1
     752:	ed 5f       	subi	r30, 0xFD	; 253
     754:	f7 4d       	sbci	r31, 0xD7	; 215
     756:	e8 0f       	add	r30, r24
     758:	f1 1d       	adc	r31, r1
     75a:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     75c:	8f 5f       	subi	r24, 0xFF	; 255
     75e:	89 30       	cpi	r24, 0x09	; 9
     760:	10 f3       	brcs	.-60     	; 0x726 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	ff 90       	pop	r15
     76a:	ef 90       	pop	r14
     76c:	08 95       	ret

0000076e <send_prompt>:

	If specMech is rebooted, it will only prompt with a single exclamation
	point (!) until it receives an acknowledgment in the form of a single !.
------------------------------------------------------------------------------*/
void send_prompt(uint8_t prompt_flag)
{
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	6d 97       	sbiw	r28, 0x1d	; 29
     77c:	cd bf       	out	0x3d, r28	; 61
     77e:	de bf       	out	0x3e, r29	; 62

	const char str0[] = ">";
     780:	2e e3       	ldi	r18, 0x3E	; 62
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	29 83       	std	Y+1, r18	; 0x01
     786:	3a 83       	std	Y+2, r19	; 0x02
	const char str1[] = "!";
     788:	21 e2       	ldi	r18, 0x21	; 33
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	2b 83       	std	Y+3, r18	; 0x03
     78e:	3c 83       	std	Y+4, r19	; 0x04

	char prompt_str[25];

	switch (prompt_flag) {
     790:	88 23       	and	r24, r24
     792:	19 f0       	breq	.+6      	; 0x79a <send_prompt+0x2c>
     794:	81 30       	cpi	r24, 0x01	; 1
     796:	b9 f0       	breq	.+46     	; 0x7c6 <send_prompt+0x58>
     798:	2c c0       	rjmp	.+88     	; 0x7f2 <send_prompt+0x84>
		case GREATERPROMPT:
			strcpy(prompt_str, str0);
     79a:	8e 01       	movw	r16, r28
     79c:	0b 5f       	subi	r16, 0xFB	; 251
     79e:	1f 4f       	sbci	r17, 0xFF	; 255
     7a0:	be 01       	movw	r22, r28
     7a2:	6f 5f       	subi	r22, 0xFF	; 255
     7a4:	7f 4f       	sbci	r23, 0xFF	; 255
     7a6:	c8 01       	movw	r24, r16
     7a8:	0e 94 2d 22 	call	0x445a	; 0x445a <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     7ac:	f8 01       	movw	r30, r16
     7ae:	01 90       	ld	r0, Z+
     7b0:	00 20       	and	r0, r0
     7b2:	e9 f7       	brne	.-6      	; 0x7ae <send_prompt+0x40>
     7b4:	31 97       	sbiw	r30, 0x01	; 1
     7b6:	af 01       	movw	r20, r30
     7b8:	40 1b       	sub	r20, r16
     7ba:	51 0b       	sbc	r21, r17
     7bc:	b8 01       	movw	r22, r16
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>
			break;
     7c4:	2b c0       	rjmp	.+86     	; 0x81c <send_prompt+0xae>
			strcpy(prompt_str, str0);
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
			break;
*/
		case EXCLAIMPROMPT:
			strcpy(prompt_str, str1);
     7c6:	8e 01       	movw	r16, r28
     7c8:	0b 5f       	subi	r16, 0xFB	; 251
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
     7cc:	be 01       	movw	r22, r28
     7ce:	6d 5f       	subi	r22, 0xFD	; 253
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
     7d2:	c8 01       	movw	r24, r16
     7d4:	0e 94 2d 22 	call	0x445a	; 0x445a <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     7d8:	f8 01       	movw	r30, r16
     7da:	01 90       	ld	r0, Z+
     7dc:	00 20       	and	r0, r0
     7de:	e9 f7       	brne	.-6      	; 0x7da <send_prompt+0x6c>
     7e0:	31 97       	sbiw	r30, 0x01	; 1
     7e2:	af 01       	movw	r20, r30
     7e4:	40 1b       	sub	r20, r16
     7e6:	51 0b       	sbc	r21, r17
     7e8:	b8 01       	movw	r22, r16
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>
			break;
     7f0:	15 c0       	rjmp	.+42     	; 0x81c <send_prompt+0xae>

		default:
			strcpy(prompt_str, str1);
     7f2:	8e 01       	movw	r16, r28
     7f4:	0b 5f       	subi	r16, 0xFB	; 251
     7f6:	1f 4f       	sbci	r17, 0xFF	; 255
     7f8:	be 01       	movw	r22, r28
     7fa:	6d 5f       	subi	r22, 0xFD	; 253
     7fc:	7f 4f       	sbci	r23, 0xFF	; 255
     7fe:	c8 01       	movw	r24, r16
     800:	0e 94 2d 22 	call	0x445a	; 0x445a <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     804:	f8 01       	movw	r30, r16
     806:	01 90       	ld	r0, Z+
     808:	00 20       	and	r0, r0
     80a:	e9 f7       	brne	.-6      	; 0x806 <send_prompt+0x98>
     80c:	31 97       	sbiw	r30, 0x01	; 1
     80e:	af 01       	movw	r20, r30
     810:	40 1b       	sub	r20, r16
     812:	51 0b       	sbc	r21, r17
     814:	b8 01       	movw	r22, r16
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>
			break;

	}

}
     81c:	6d 96       	adiw	r28, 0x1d	; 29
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	de bf       	out	0x3e, r29	; 62
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	08 95       	ret

0000082c <rebootACKd>:
uint8_t rebootACKd(char *cmdline)
{

	static uint8_t rebootnack = 1;
	
	if (rebootnack) {
     82c:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     830:	22 23       	and	r18, r18
     832:	31 f1       	breq	.+76     	; 0x880 <rebootACKd+0x54>
     834:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     836:	80 81       	ld	r24, Z
     838:	81 32       	cpi	r24, 0x21	; 33
     83a:	a1 f4       	brne	.+40     	; 0x864 <rebootACKd+0x38>
     83c:	91 81       	ldd	r25, Z+1	; 0x01
     83e:	91 11       	cpse	r25, r1
     840:	11 c0       	rjmp	.+34     	; 0x864 <rebootACKd+0x38>
			init_RTC(511);		// 1-sec RTC clock ticks
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0e 94 11 17 	call	0x2e22	; 0x2e22 <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     84a:	85 e0       	ldi	r24, 0x05	; 5
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timeoutOLED>
     852:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timeoutOLED+0x1>
			send_prompt(GREATERPROMPT);
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	0e 94 b7 03 	call	0x76e	; 0x76e <send_prompt>
			rebootnack = 0;
     85c:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
			return(YES);
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	08 95       	ret
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     864:	81 32       	cpi	r24, 0x21	; 33
     866:	39 f4       	brne	.+14     	; 0x876 <rebootACKd+0x4a>
     868:	81 81       	ldd	r24, Z+1	; 0x01
     86a:	88 23       	and	r24, r24
     86c:	21 f0       	breq	.+8      	; 0x876 <rebootACKd+0x4a>
//			send_prompt(EXCLAIMPROMPT);
			reboot();
     86e:	0e 94 c3 1a 	call	0x3586	; 0x3586 <reboot>
			return(NO);
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	08 95       	ret
		} else {
			send_prompt(EXCLAIMPROMPT);
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	0e 94 b7 03 	call	0x76e	; 0x76e <send_prompt>
			return(NO);
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	08 95       	ret
		}
	}

	return(YES);
     880:	81 e0       	ldi	r24, 0x01	; 1

}
     882:	08 95       	ret

00000884 <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	cd b7       	in	r28, 0x3d	; 61
     88a:	de b7       	in	r29, 0x3e	; 62
     88c:	cf 5f       	subi	r28, 0xFF	; 255
     88e:	d1 09       	sbc	r29, r1
     890:	cd bf       	out	0x3d, r28	; 61
     892:	de bf       	out	0x3e, r29	; 62
			break;
		}
	}
	cmdline[i] = '\0';		// Overflow protection
*/
	get_cmdline(cmdline);
     894:	ce 01       	movw	r24, r28
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <get_cmdline>

	if (!rebootACKd(cmdline)) {
     89c:	ce 01       	movw	r24, r28
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	0e 94 16 04 	call	0x82c	; 0x82c <rebootACKd>
     8a4:	88 23       	and	r24, r24
     8a6:	09 f4       	brne	.+2      	; 0x8aa <commands+0x26>
     8a8:	5d c0       	rjmp	.+186    	; 0x964 <commands+0xe0>
			return;
		}
	}
*/
	// Echo the command back to the user
		echo_cmd(cmdline);
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	0e 94 a5 02 	call	0x54a	; 0x54a <echo_cmd>

	if (strlen(cmdline) == 0) {		// Catch a terminal cr (not an error)
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
     8b4:	81 11       	cpse	r24, r1
     8b6:	03 c0       	rjmp	.+6      	; 0x8be <commands+0x3a>
		send_prompt(GREATERPROMPT);
     8b8:	0e 94 b7 03 	call	0x76e	; 0x76e <send_prompt>
		return;
     8bc:	53 c0       	rjmp	.+166    	; 0x964 <commands+0xe0>
	}

	parse_cmd(cmdline, cstack);
     8be:	60 91 02 28 	lds	r22, 0x2802	; 0x802802 <__data_end>
     8c2:	ce 01       	movw	r24, r28
     8c4:	01 96       	adiw	r24, 0x01	; 1
     8c6:	0e 94 23 03 	call	0x646	; 0x646 <parse_cmd>
	verb = pcmd[cstack].cverb;
     8ca:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     8ce:	24 e3       	ldi	r18, 0x34	; 52
     8d0:	82 9f       	mul	r24, r18
     8d2:	d0 01       	movw	r26, r0
     8d4:	11 24       	eor	r1, r1
     8d6:	ad 5f       	subi	r26, 0xFD	; 253
     8d8:	b7 4d       	sbci	r27, 0xD7	; 215
     8da:	ec 91       	ld	r30, X
	object = pcmd[cstack].cobject;
     8dc:	11 96       	adiw	r26, 0x01	; 1
     8de:	9c 91       	ld	r25, X

	switch (verb) {
     8e0:	4e 2f       	mov	r20, r30
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	fa 01       	movw	r30, r20
     8e6:	e2 55       	subi	r30, 0x52	; 82
     8e8:	f1 09       	sbc	r31, r1
     8ea:	e3 32       	cpi	r30, 0x23	; 35
     8ec:	f1 05       	cpc	r31, r1
     8ee:	60 f5       	brcc	.+88     	; 0x948 <commands+0xc4>
     8f0:	e0 5b       	subi	r30, 0xB0	; 176
     8f2:	ff 4f       	sbci	r31, 0xFF	; 255
     8f4:	0c 94 91 20 	jmp	0x4122	; 0x4122 <__tablejump2__>
		case 'c':				// close
			prompt_flag = close_PNEU(object);
     8f8:	89 2f       	mov	r24, r25
     8fa:	0e 94 4a 0c 	call	0x1894	; 0x1894 <close_PNEU>
     8fe:	28 2f       	mov	r18, r24
			break;
     900:	24 c0       	rjmp	.+72     	; 0x94a <commands+0xc6>

		case 'o':				// open
			prompt_flag = open_PNEU(object);
     902:	89 2f       	mov	r24, r25
     904:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <open_PNEU>
     908:	28 2f       	mov	r18, r24
			break;
     90a:	1f c0       	rjmp	.+62     	; 0x94a <commands+0xc6>

		case 'm':				// move
			ROBOMove(cstack);
     90c:	0e 94 90 15 	call	0x2b20	; 0x2b20 <ROBOMove>
void commands(void)
{

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	char verb, object;				// Get rid of these and use cstack instead
	uint8_t prompt_flag = GREATERPROMPT;
     910:	20 e0       	ldi	r18, 0x00	; 0
			prompt_flag = open_PNEU(object);
			break;

		case 'm':				// move
			ROBOMove(cstack);
			break;
     912:	1b c0       	rjmp	.+54     	; 0x94a <commands+0xc6>

		case 'r':				// Report
			prompt_flag = report(cstack);
     914:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <report>
     918:	28 2f       	mov	r18, r24
			break;
     91a:	17 c0       	rjmp	.+46     	; 0x94a <commands+0xc6>

		case 's':				// Set
			prompt_flag = set(cstack);
     91c:	0e 94 84 17 	call	0x2f08	; 0x2f08 <set>
     920:	28 2f       	mov	r18, r24
			break;
     922:	13 c0       	rjmp	.+38     	; 0x94a <commands+0xc6>

		case 't':
			testroutine();
     924:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <testroutine>
void commands(void)
{

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	char verb, object;				// Get rid of these and use cstack instead
	uint8_t prompt_flag = GREATERPROMPT;
     928:	20 e0       	ldi	r18, 0x00	; 0
			prompt_flag = set(cstack);
			break;

		case 't':
			testroutine();
			break;
     92a:	0f c0       	rjmp	.+30     	; 0x94a <commands+0xc6>

		case 'R':				// Reboot
			send_prompt(GREATERPROMPT);
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	0e 94 b7 03 	call	0x76e	; 0x76e <send_prompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     932:	8a e6       	ldi	r24, 0x6A	; 106
     934:	94 e0       	ldi	r25, 0x04	; 4
     936:	21 e0       	ldi	r18, 0x01	; 1
     938:	81 50       	subi	r24, 0x01	; 1
     93a:	90 40       	sbci	r25, 0x00	; 0
     93c:	20 40       	sbci	r18, 0x00	; 0
     93e:	e1 f7       	brne	.-8      	; 0x938 <commands+0xb4>
     940:	00 c0       	rjmp	.+0      	; 0x942 <commands+0xbe>
			_delay_ms(100);		// Avoid finishing the command loop before reboot
			reboot();
     942:	0e 94 c3 1a 	call	0x3586	; 0x3586 <reboot>
			return;
     946:	0e c0       	rjmp	.+28     	; 0x964 <commands+0xe0>

		default:
			prompt_flag = GREATERPROMPT;
     948:	20 e0       	ldi	r18, 0x00	; 0
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     94a:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	01 96       	adiw	r24, 0x01	; 1
     952:	6a e0       	ldi	r22, 0x0A	; 10
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__divmodhi4>
     95a:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <__data_end>
	send_prompt(prompt_flag);
     95e:	82 2f       	mov	r24, r18
     960:	0e 94 b7 03 	call	0x76e	; 0x76e <send_prompt>

}
     964:	c1 50       	subi	r28, 0x01	; 1
     966:	df 4f       	sbci	r29, 0xFF	; 255
     968:	cd bf       	out	0x3d, r28	; 61
     96a:	de bf       	out	0x3e, r29	; 62
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     972:	fb 01       	movw	r30, r22
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     974:	70 81       	ld	r23, Z
	minutes = (*ds3231time++);
     976:	61 81       	ldd	r22, Z+1	; 0x01
	hours = (*ds3231time++);
     978:	52 81       	ldd	r21, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     97a:	44 81       	ldd	r20, Z+4	; 0x04
	month = (*ds3231time++);
     97c:	35 81       	ldd	r19, Z+5	; 0x05
	year = (*ds3231time);
     97e:	26 81       	ldd	r18, Z+6	; 0x06

	sprintf(isotime, "20%02x-%02x-%02xT%02x:%02x:%02x",
     980:	1f 92       	push	r1
     982:	7f 93       	push	r23
     984:	1f 92       	push	r1
     986:	6f 93       	push	r22
     988:	1f 92       	push	r1
     98a:	5f 93       	push	r21
     98c:	1f 92       	push	r1
     98e:	4f 93       	push	r20
     990:	1f 92       	push	r1
     992:	3f 93       	push	r19
     994:	1f 92       	push	r1
     996:	2f 93       	push	r18
     998:	27 eb       	ldi	r18, 0xB7	; 183
     99a:	36 e8       	ldi	r19, 0x86	; 134
     99c:	3f 93       	push	r19
     99e:	2f 93       	push	r18
     9a0:	9f 93       	push	r25
     9a2:	8f 93       	push	r24
     9a4:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
		year, month, date, hours, minutes, seconds);

}
     9a8:	8d b7       	in	r24, 0x3d	; 61
     9aa:	9e b7       	in	r25, 0x3e	; 62
     9ac:	40 96       	adiw	r24, 0x10	; 16
     9ae:	8d bf       	out	0x3d, r24	; 61
     9b0:	9e bf       	out	0x3e, r25	; 62
     9b2:	08 95       	ret

000009b4 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ssZ
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     9b4:	dc 01       	movw	r26, r24
     9b6:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     9b8:	81 89       	ldd	r24, Z+17	; 0x11
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	c0 97       	sbiw	r24, 0x30	; 48
     9be:	82 95       	swap	r24
     9c0:	92 95       	swap	r25
     9c2:	90 7f       	andi	r25, 0xF0	; 240
     9c4:	98 27       	eor	r25, r24
     9c6:	80 7f       	andi	r24, 0xF0	; 240
     9c8:	98 27       	eor	r25, r24
     9ca:	92 89       	ldd	r25, Z+18	; 0x12
     9cc:	90 53       	subi	r25, 0x30	; 48
     9ce:	89 2b       	or	r24, r25
     9d0:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     9d2:	86 85       	ldd	r24, Z+14	; 0x0e
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	c0 97       	sbiw	r24, 0x30	; 48
     9d8:	82 95       	swap	r24
     9da:	92 95       	swap	r25
     9dc:	90 7f       	andi	r25, 0xF0	; 240
     9de:	98 27       	eor	r25, r24
     9e0:	80 7f       	andi	r24, 0xF0	; 240
     9e2:	98 27       	eor	r25, r24
     9e4:	97 85       	ldd	r25, Z+15	; 0x0f
     9e6:	90 53       	subi	r25, 0x30	; 48
     9e8:	89 2b       	or	r24, r25
     9ea:	11 96       	adiw	r26, 0x01	; 1
     9ec:	8c 93       	st	X, r24
     9ee:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     9f0:	83 85       	ldd	r24, Z+11	; 0x0b
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	c0 97       	sbiw	r24, 0x30	; 48
     9f6:	82 95       	swap	r24
     9f8:	92 95       	swap	r25
     9fa:	90 7f       	andi	r25, 0xF0	; 240
     9fc:	98 27       	eor	r25, r24
     9fe:	80 7f       	andi	r24, 0xF0	; 240
     a00:	98 27       	eor	r25, r24
     a02:	94 85       	ldd	r25, Z+12	; 0x0c
     a04:	90 53       	subi	r25, 0x30	; 48
     a06:	89 2b       	or	r24, r25
     a08:	12 96       	adiw	r26, 0x02	; 2
     a0a:	8c 93       	st	X, r24
     a0c:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	13 96       	adiw	r26, 0x03	; 3
     a12:	8c 93       	st	X, r24
     a14:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     a16:	80 85       	ldd	r24, Z+8	; 0x08
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	c0 97       	sbiw	r24, 0x30	; 48
     a1c:	82 95       	swap	r24
     a1e:	92 95       	swap	r25
     a20:	90 7f       	andi	r25, 0xF0	; 240
     a22:	98 27       	eor	r25, r24
     a24:	80 7f       	andi	r24, 0xF0	; 240
     a26:	98 27       	eor	r25, r24
     a28:	91 85       	ldd	r25, Z+9	; 0x09
     a2a:	90 53       	subi	r25, 0x30	; 48
     a2c:	89 2b       	or	r24, r25
     a2e:	14 96       	adiw	r26, 0x04	; 4
     a30:	8c 93       	st	X, r24
     a32:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     a34:	25 81       	ldd	r18, Z+5	; 0x05
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	20 53       	subi	r18, 0x30	; 48
     a3a:	31 09       	sbc	r19, r1
     a3c:	22 95       	swap	r18
     a3e:	32 95       	swap	r19
     a40:	30 7f       	andi	r19, 0xF0	; 240
     a42:	32 27       	eor	r19, r18
     a44:	20 7f       	andi	r18, 0xF0	; 240
     a46:	32 27       	eor	r19, r18
     a48:	86 81       	ldd	r24, Z+6	; 0x06
     a4a:	80 53       	subi	r24, 0x30	; 48
     a4c:	28 2b       	or	r18, r24
     a4e:	15 96       	adiw	r26, 0x05	; 5
     a50:	2c 93       	st	X, r18
     a52:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     a54:	22 81       	ldd	r18, Z+2	; 0x02
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	20 53       	subi	r18, 0x30	; 48
     a5a:	31 09       	sbc	r19, r1
     a5c:	22 95       	swap	r18
     a5e:	32 95       	swap	r19
     a60:	30 7f       	andi	r19, 0xF0	; 240
     a62:	32 27       	eor	r19, r18
     a64:	20 7f       	andi	r18, 0xF0	; 240
     a66:	32 27       	eor	r19, r18
     a68:	83 81       	ldd	r24, Z+3	; 0x03
     a6a:	80 53       	subi	r24, 0x30	; 48
     a6c:	28 2b       	or	r18, r24
     a6e:	16 96       	adiw	r26, 0x06	; 6
     a70:	2c 93       	st	X, r18
     a72:	08 95       	ret

00000a74 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     a74:	ef 92       	push	r14
     a76:	ff 92       	push	r15
     a78:	0f 93       	push	r16
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	7b 01       	movw	r14, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
     a86:	c8 2f       	mov	r28, r24
     a88:	88 23       	and	r24, r24
     a8a:	21 f0       	breq	.+8      	; 0xa94 <read_DS3231+0x20>
		stop_TWI();
     a8c:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
		return(retval);
     a90:	8c 2f       	mov	r24, r28
     a92:	28 c0       	rjmp	.+80     	; 0xae4 <read_DS3231+0x70>
    }  

	if ((retval = write_TWI(0x00))) {	// Register 00h
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
     a9a:	c8 2f       	mov	r28, r24
     a9c:	88 23       	and	r24, r24
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <read_DS3231+0x34>
		stop_TWI();
     aa0:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
		return(retval);
     aa4:	8c 2f       	mov	r24, r28
     aa6:	1e c0       	rjmp	.+60     	; 0xae4 <read_DS3231+0x70>
	}
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
     aa8:	61 e0       	ldi	r22, 0x01	; 1
     aaa:	88 e6       	ldi	r24, 0x68	; 104
     aac:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
     ab0:	c8 2f       	mov	r28, r24
     ab2:	88 23       	and	r24, r24
     ab4:	69 f0       	breq	.+26     	; 0xad0 <read_DS3231+0x5c>
		stop_TWI();
     ab6:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
		return(retval);
     aba:	8c 2f       	mov	r24, r28
     abc:	13 c0       	rjmp	.+38     	; 0xae4 <read_DS3231+0x70>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     abe:	87 01       	movw	r16, r14
     ac0:	0c 0f       	add	r16, r28
     ac2:	11 1d       	adc	r17, r1
     ac4:	0e 94 4a 18 	call	0x3094	; 0x3094 <read_TWI>
     ac8:	f8 01       	movw	r30, r16
     aca:	80 83       	st	Z, r24
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 6; i++) {
     acc:	cf 5f       	subi	r28, 0xFF	; 255
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <read_DS3231+0x5e>
     ad0:	c0 e0       	ldi	r28, 0x00	; 0
     ad2:	c6 30       	cpi	r28, 0x06	; 6
     ad4:	a0 f3       	brcs	.-24     	; 0xabe <read_DS3231+0x4a>
		ds3231time[i] = read_TWI();
	}
	ds3231time[6] = readlast_TWI();
     ad6:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <readlast_TWI>
     ada:	f7 01       	movw	r30, r14
     adc:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     ade:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>

	return(0);
     ae2:	80 e0       	ldi	r24, 0x00	; 0

}
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	08 95       	ret

00000af0 <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     af0:	0f 93       	push	r16
     af2:	1f 93       	push	r17
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	27 97       	sbiw	r28, 0x07	; 7
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	de bf       	out	0x3e, r29	; 62
     b02:	8c 01       	movw	r16, r24

	uint8_t retval, ds3231time[7];

	if ((retval = read_DS3231(DS3231ADDR, ds3231time))) {
     b04:	be 01       	movw	r22, r28
     b06:	6f 5f       	subi	r22, 0xFF	; 255
     b08:	7f 4f       	sbci	r23, 0xFF	; 255
     b0a:	88 e6       	ldi	r24, 0x68	; 104
     b0c:	0e 94 3a 05 	call	0xa74	; 0xa74 <read_DS3231>
     b10:	88 23       	and	r24, r24
     b12:	49 f0       	breq	.+18     	; 0xb26 <get_time+0x36>
// avoid a bootup announcement at boot-time by not sending this
//		printError(ERR_GETTIME, "DS3231 get_time");
		strcpy(isotime, "CurrentTime?");
     b14:	9d e0       	ldi	r25, 0x0D	; 13
     b16:	e7 ed       	ldi	r30, 0xD7	; 215
     b18:	f6 e8       	ldi	r31, 0x86	; 134
     b1a:	d8 01       	movw	r26, r16
     b1c:	01 90       	ld	r0, Z+
     b1e:	0d 92       	st	X+, r0
     b20:	9a 95       	dec	r25
     b22:	e1 f7       	brne	.-8      	; 0xb1c <get_time+0x2c>
		return(retval);
     b24:	07 c0       	rjmp	.+14     	; 0xb34 <get_time+0x44>
	}

	convert_ds2iso(isotime, ds3231time);
     b26:	be 01       	movw	r22, r28
     b28:	6f 5f       	subi	r22, 0xFF	; 255
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	c8 01       	movw	r24, r16
     b2e:	0e 94 b9 04 	call	0x972	; 0x972 <convert_ds2iso>
	return(0);
     b32:	80 e0       	ldi	r24, 0x00	; 0

}
     b34:	27 96       	adiw	r28, 0x07	; 7
     b36:	cd bf       	out	0x3d, r28	; 61
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	08 95       	ret

00000b44 <write_DS3231>:

	Returns
		TWI errors
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	8b 01       	movw	r16, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
     b58:	c8 2f       	mov	r28, r24
     b5a:	88 23       	and	r24, r24
     b5c:	21 f0       	breq	.+8      	; 0xb66 <write_DS3231+0x22>
		stop_TWI();
     b5e:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
		return(retval);
     b62:	8c 2f       	mov	r24, r28
     b64:	22 c0       	rjmp	.+68     	; 0xbaa <write_DS3231+0x66>
	}

	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
     b6c:	c8 2f       	mov	r28, r24
     b6e:	88 23       	and	r24, r24
     b70:	b1 f0       	breq	.+44     	; 0xb9e <write_DS3231+0x5a>
		stop_TWI();
     b72:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
		return(retval);
     b76:	8c 2f       	mov	r24, r28
     b78:	18 c0       	rjmp	.+48     	; 0xbaa <write_DS3231+0x66>
	}

	for (i = 0; i < 7; i++) {
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b7a:	78 01       	movw	r14, r16
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	e8 1a       	sub	r14, r24
     b80:	f8 0a       	sbc	r15, r24
     b82:	f8 01       	movw	r30, r16
     b84:	80 81       	ld	r24, Z
     b86:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
     b8a:	c8 2f       	mov	r28, r24
     b8c:	88 23       	and	r24, r24
     b8e:	21 f0       	breq	.+8      	; 0xb98 <write_DS3231+0x54>
			stop_TWI();
     b90:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
			return(retval);
     b94:	8c 2f       	mov	r24, r28
     b96:	09 c0       	rjmp	.+18     	; 0xbaa <write_DS3231+0x66>
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b98:	df 5f       	subi	r29, 0xFF	; 255
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b9a:	87 01       	movw	r16, r14
     b9c:	01 c0       	rjmp	.+2      	; 0xba0 <write_DS3231+0x5c>
     b9e:	d0 e0       	ldi	r29, 0x00	; 0
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     ba0:	d7 30       	cpi	r29, 0x07	; 7
     ba2:	58 f3       	brcs	.-42     	; 0xb7a <write_DS3231+0x36>
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
			stop_TWI();
			return(retval);
		}
	}
	stop_TWI();
     ba4:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>

	return(0);
     ba8:	80 e0       	ldi	r24, 0x00	; 0

}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	08 95       	ret

00000bb8 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	27 97       	sbiw	r28, 0x07	; 7
     bc2:	cd bf       	out	0x3d, r28	; 61
     bc4:	de bf       	out	0x3e, r29	; 62

	uint8_t retval, ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     bc6:	bc 01       	movw	r22, r24
     bc8:	ce 01       	movw	r24, r28
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	0e 94 da 04 	call	0x9b4	; 0x9b4 <convert_iso2ds>
	if ((retval = write_DS3231(DS3231ADDR, ds3231time))) {
     bd0:	be 01       	movw	r22, r28
     bd2:	6f 5f       	subi	r22, 0xFF	; 255
     bd4:	7f 4f       	sbci	r23, 0xFF	; 255
     bd6:	88 e6       	ldi	r24, 0x68	; 104
     bd8:	0e 94 a2 05 	call	0xb44	; 0xb44 <write_DS3231>
		return(retval);
	}
	return(0);

}
     bdc:	27 96       	adiw	r28, 0x07	; 7
     bde:	cd bf       	out	0x3d, r28	; 61
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	08 95       	ret

00000be8 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     be8:	45 e1       	ldi	r20, 0x15	; 21
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	6b e0       	ldi	r22, 0x0B	; 11
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	0e 94 10 23 	call	0x4620	; 0x4620 <eeprom_read_block>
     bf4:	08 95       	ret

00000bf6 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     bf6:	4b e0       	ldi	r20, 0x0B	; 11
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	0e 94 10 23 	call	0x4620	; 0x4620 <eeprom_read_block>
     c02:	08 95       	ret

00000c04 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	65 97       	sbiw	r28, 0x15	; 21
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     c12:	ce 01       	movw	r24, r28
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     c1a:	45 e1       	ldi	r20, 0x15	; 21
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	6b e0       	ldi	r22, 0x0B	; 11
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	ce 01       	movw	r24, r28
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	0e 94 14 23 	call	0x4628	; 0x4628 <eeprom_update_block>

}
     c2a:	65 96       	adiw	r28, 0x15	; 21
     c2c:	cd bf       	out	0x3d, r28	; 61
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	08 95       	ret

00000c36 <update_VERSION>:

void update_VERSION(void)
{
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	2b 97       	sbiw	r28, 0x0b	; 11
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     c44:	8b e0       	ldi	r24, 0x0B	; 11
     c46:	e4 ee       	ldi	r30, 0xE4	; 228
     c48:	f6 e8       	ldi	r31, 0x86	; 134
     c4a:	de 01       	movw	r26, r28
     c4c:	11 96       	adiw	r26, 0x01	; 1
     c4e:	01 90       	ld	r0, Z+
     c50:	0d 92       	st	X+, r0
     c52:	8a 95       	dec	r24
     c54:	e1 f7       	brne	.-8      	; 0xc4e <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     c56:	4b e0       	ldi	r20, 0x0B	; 11
     c58:	50 e0       	ldi	r21, 0x00	; 0
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	ce 01       	movw	r24, r28
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	0e 94 14 23 	call	0x4628	; 0x4628 <eeprom_update_block>

}
     c66:	2b 96       	adiw	r28, 0x0b	; 11
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     c72:	0e 94 02 06 	call	0xc04	; 0xc04 <update_BOOTTIME>
	update_VERSION();
     c76:	0e 94 1b 06 	call	0xc36	; 0xc36 <update_VERSION>
     c7a:	08 95       	ret

00000c7c <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	cf 55       	subi	r28, 0x5F	; 95
     c8a:	d1 09       	sbc	r29, r1
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	de bf       	out	0x3e, r29	; 62

	char strbuf[81];
	const char errorFormat[] = "$S%dERR,%d,%s";
     c90:	2e e0       	ldi	r18, 0x0E	; 14
     c92:	ef ee       	ldi	r30, 0xEF	; 239
     c94:	f6 e8       	ldi	r31, 0x86	; 134
     c96:	de 01       	movw	r26, r28
     c98:	ae 5a       	subi	r26, 0xAE	; 174
     c9a:	bf 4f       	sbci	r27, 0xFF	; 255
     c9c:	01 90       	ld	r0, Z+
     c9e:	0d 92       	st	X+, r0
     ca0:	2a 95       	dec	r18
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <printError+0x20>

	sprintf(strbuf, errorFormat, get_SPECID, errorNumber, errorString);
     ca4:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     ca8:	22 ff       	sbrs	r18, 2
     caa:	03 c0       	rjmp	.+6      	; 0xcb2 <printError+0x36>
     cac:	22 e0       	ldi	r18, 0x02	; 2
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <printError+0x3a>
     cb2:	21 e0       	ldi	r18, 0x01	; 1
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	7f 93       	push	r23
     cb8:	6f 93       	push	r22
     cba:	9f 93       	push	r25
     cbc:	8f 93       	push	r24
     cbe:	3f 93       	push	r19
     cc0:	2f 93       	push	r18
     cc2:	ce 01       	movw	r24, r28
     cc4:	8e 5a       	subi	r24, 0xAE	; 174
     cc6:	9f 4f       	sbci	r25, 0xFF	; 255
     cc8:	9f 93       	push	r25
     cca:	8f 93       	push	r24
     ccc:	8e 01       	movw	r16, r28
     cce:	0f 5f       	subi	r16, 0xFF	; 255
     cd0:	1f 4f       	sbci	r17, 0xFF	; 255
     cd2:	1f 93       	push	r17
     cd4:	0f 93       	push	r16
     cd6:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
	checksum_NMEA(strbuf);
     cda:	c8 01       	movw	r24, r16
     cdc:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     ce0:	f8 01       	movw	r30, r16
     ce2:	01 90       	ld	r0, Z+
     ce4:	00 20       	and	r0, r0
     ce6:	e9 f7       	brne	.-6      	; 0xce2 <printError+0x66>
     ce8:	31 97       	sbiw	r30, 0x01	; 1
     cea:	af 01       	movw	r20, r30
     cec:	40 1b       	sub	r20, r16
     cee:	51 0b       	sbc	r21, r17
     cf0:	b8 01       	movw	r22, r16
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>

}
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	c1 5a       	subi	r28, 0xA1	; 161
     cfe:	df 4f       	sbci	r29, 0xFF	; 255
     d00:	cd bf       	out	0x3d, r28	; 61
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	08 95       	ret

00000d0e <read_FRAM>:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)

------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	c8 2f       	mov	r28, r24
     d1c:	e6 2e       	mov	r14, r22
     d1e:	f7 2e       	mov	r15, r23
     d20:	8a 01       	movw	r16, r20
     d22:	d2 2f       	mov	r29, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
     d2a:	81 11       	cpse	r24, r1
     d2c:	2b c0       	rjmp	.+86     	; 0xd84 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {			// Send memory address
     d2e:	8f 2d       	mov	r24, r15
     d30:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
     d34:	81 11       	cpse	r24, r1
     d36:	26 c0       	rjmp	.+76     	; 0xd84 <read_FRAM+0x76>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {
     d38:	8e 2d       	mov	r24, r14
     d3a:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
     d3e:	81 11       	cpse	r24, r1
     d40:	21 c0       	rjmp	.+66     	; 0xd84 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	8c 2f       	mov	r24, r28
     d46:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
     d4a:	81 11       	cpse	r24, r1
     d4c:	1b c0       	rjmp	.+54     	; 0xd84 <read_FRAM+0x76>
     d4e:	c0 e0       	ldi	r28, 0x00	; 0
     d50:	08 c0       	rjmp	.+16     	; 0xd62 <read_FRAM+0x54>
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     d52:	78 01       	movw	r14, r16
     d54:	ec 0e       	add	r14, r28
     d56:	f1 1c       	adc	r15, r1
     d58:	0e 94 4a 18 	call	0x3094	; 0x3094 <read_TWI>
     d5c:	f7 01       	movw	r30, r14
     d5e:	80 83       	st	Z, r24

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
     d60:	cf 5f       	subi	r28, 0xFF	; 255
     d62:	2c 2f       	mov	r18, r28
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	8d 2f       	mov	r24, r29
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	28 17       	cp	r18, r24
     d6e:	39 07       	cpc	r19, r25
     d70:	84 f3       	brlt	.-32     	; 0xd52 <read_FRAM+0x44>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     d72:	ec 01       	movw	r28, r24
     d74:	c0 0f       	add	r28, r16
     d76:	d1 1f       	adc	r29, r17
     d78:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <readlast_TWI>
     d7c:	88 83       	st	Y, r24

	stop_TWI();
     d7e:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>

	return(0);
     d82:	80 e0       	ldi	r24, 0x00	; 0

}
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	ff 90       	pop	r15
     d8e:	ef 90       	pop	r14
     d90:	08 95       	ret

00000d92 <write_FRAM>:
	Returns:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     d92:	ef 92       	push	r14
     d94:	ff 92       	push	r15
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	f6 2e       	mov	r15, r22
     da0:	17 2f       	mov	r17, r23
     da2:	ea 01       	movw	r28, r20
     da4:	02 2f       	mov	r16, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if ((retval = start_TWI(addr, TWIWRITE))) {	// TWI START
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
     dac:	81 11       	cpse	r24, r1
     dae:	1c c0       	rjmp	.+56     	; 0xde8 <write_FRAM+0x56>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {		// FRAM address to write
     db0:	81 2f       	mov	r24, r17
     db2:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
     db6:	81 11       	cpse	r24, r1
     db8:	17 c0       	rjmp	.+46     	; 0xde8 <write_FRAM+0x56>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
     dba:	8f 2d       	mov	r24, r15
     dbc:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
     dc0:	81 11       	cpse	r24, r1
     dc2:	12 c0       	rjmp	.+36     	; 0xde8 <write_FRAM+0x56>
     dc4:	10 e0       	ldi	r17, 0x00	; 0
     dc6:	0b c0       	rjmp	.+22     	; 0xdde <write_FRAM+0x4c>
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     dc8:	7e 01       	movw	r14, r28
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	e8 1a       	sub	r14, r24
     dce:	f8 0a       	sbc	r15, r24
     dd0:	88 81       	ld	r24, Y
     dd2:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
     dd6:	81 11       	cpse	r24, r1
     dd8:	07 c0       	rjmp	.+14     	; 0xde8 <write_FRAM+0x56>
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     dda:	1f 5f       	subi	r17, 0xFF	; 255
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     ddc:	e7 01       	movw	r28, r14
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     dde:	10 17       	cp	r17, r16
     de0:	98 f3       	brcs	.-26     	; 0xdc8 <write_FRAM+0x36>
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
			return(retval);
		}
	}

	stop_TWI();
     de2:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>

	return(0);
     de6:	80 e0       	ldi	r24, 0x00	; 0

}
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	08 95       	ret

00000df6 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     df6:	8f 92       	push	r8
     df8:	9f 92       	push	r9
     dfa:	af 92       	push	r10
     dfc:	bf 92       	push	r11
     dfe:	cf 92       	push	r12
     e00:	df 92       	push	r13
     e02:	ef 92       	push	r14
     e04:	ff 92       	push	r15

	uint8_t adcpin;
	float humidity, temperature;

	switch (sensor) {
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	59 f0       	breq	.+22     	; 0xe20 <get_humidity+0x2a>
     e0a:	18 f0       	brcs	.+6      	; 0xe12 <get_humidity+0x1c>
     e0c:	82 30       	cpi	r24, 0x02	; 2
     e0e:	79 f0       	breq	.+30     	; 0xe2e <get_humidity+0x38>
     e10:	15 c0       	rjmp	.+42     	; 0xe3c <get_humidity+0x46>
		case 0:
			temperature = get_temperature(0);
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <get_temperature>
     e18:	4b 01       	movw	r8, r22
     e1a:	5c 01       	movw	r10, r24
//			adcpin = AIN1;		// test unit
			adcpin = AIN0;		// production
     e1c:	40 e4       	ldi	r20, 0x40	; 64
			break;
     e1e:	17 c0       	rjmp	.+46     	; 0xe4e <get_humidity+0x58>
		case 1:
			temperature = get_temperature(1);
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <get_temperature>
     e26:	4b 01       	movw	r8, r22
     e28:	5c 01       	movw	r10, r24
			adcpin = AIN1;
     e2a:	40 e5       	ldi	r20, 0x50	; 80
			break;
     e2c:	10 c0       	rjmp	.+32     	; 0xe4e <get_humidity+0x58>
		case 2:
			temperature = get_temperature(2);
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <get_temperature>
     e34:	4b 01       	movw	r8, r22
     e36:	5c 01       	movw	r10, r24
			adcpin = AIN2;
     e38:	40 e6       	ldi	r20, 0x60	; 96
			break;
     e3a:	09 c0       	rjmp	.+18     	; 0xe4e <get_humidity+0x58>
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     e3c:	0f 2e       	mov	r0, r31
     e3e:	81 2c       	mov	r8, r1
     e40:	91 2c       	mov	r9, r1
     e42:	f0 ea       	ldi	r31, 0xA0	; 160
     e44:	af 2e       	mov	r10, r31
     e46:	f1 e4       	ldi	r31, 0x41	; 65
     e48:	bf 2e       	mov	r11, r31
     e4a:	f0 2d       	mov	r31, r0
			temperature = get_temperature(2);
			adcpin = AIN2;
			break;
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     e4c:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	humidity = ((read_ADS1115(ADC_RH, PGA6144, adcpin, DR128)/5.0) - 0.16) / 0.0062;
     e4e:	20 e8       	ldi	r18, 0x80	; 128
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	88 e4       	ldi	r24, 0x48	; 72
     e54:	0e 94 9f 01 	call	0x33e	; 0x33e <read_ADS1115>
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 ea       	ldi	r20, 0xA0	; 160
     e5e:	50 e4       	ldi	r21, 0x40	; 64
     e60:	0e 94 4b 1b 	call	0x3696	; 0x3696 <__divsf3>
     e64:	2a e0       	ldi	r18, 0x0A	; 10
     e66:	37 ed       	ldi	r19, 0xD7	; 215
     e68:	43 e2       	ldi	r20, 0x23	; 35
     e6a:	5e e3       	ldi	r21, 0x3E	; 62
     e6c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <__subsf3>
     e70:	2f e5       	ldi	r18, 0x5F	; 95
     e72:	39 e2       	ldi	r19, 0x29	; 41
     e74:	4b ec       	ldi	r20, 0xCB	; 203
     e76:	5b e3       	ldi	r21, 0x3B	; 59
     e78:	0e 94 4b 1b 	call	0x3696	; 0x3696 <__divsf3>
     e7c:	6b 01       	movw	r12, r22
     e7e:	7c 01       	movw	r14, r24
	humidity = (humidity / (1.0546 - 0.00216 * temperature));
     e80:	29 ec       	ldi	r18, 0xC9	; 201
     e82:	3e e8       	ldi	r19, 0x8E	; 142
     e84:	4d e0       	ldi	r20, 0x0D	; 13
     e86:	5b e3       	ldi	r21, 0x3B	; 59
     e88:	c5 01       	movw	r24, r10
     e8a:	b4 01       	movw	r22, r8
     e8c:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__mulsf3>
     e90:	9b 01       	movw	r18, r22
     e92:	ac 01       	movw	r20, r24
     e94:	62 e2       	ldi	r22, 0x22	; 34
     e96:	7d ef       	ldi	r23, 0xFD	; 253
     e98:	86 e8       	ldi	r24, 0x86	; 134
     e9a:	9f e3       	ldi	r25, 0x3F	; 63
     e9c:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <__subsf3>
     ea0:	9b 01       	movw	r18, r22
     ea2:	ac 01       	movw	r20, r24
     ea4:	c7 01       	movw	r24, r14
     ea6:	b6 01       	movw	r22, r12
     ea8:	0e 94 4b 1b 	call	0x3696	; 0x3696 <__divsf3>
	return(humidity);

}
     eac:	ff 90       	pop	r15
     eae:	ef 90       	pop	r14
     eb0:	df 90       	pop	r13
     eb2:	cf 90       	pop	r12
     eb4:	bf 90       	pop	r11
     eb6:	af 90       	pop	r10
     eb8:	9f 90       	pop	r9
     eba:	8f 90       	pop	r8
     ebc:	08 95       	ret

00000ebe <initialize0>:
*/

void initialize0(void)
{

	init_PORTS();
     ebe:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <init_PORTS>
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton setup
     ec2:	8b e0       	ldi	r24, 0x0B	; 11
     ec4:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f44b6>
	init_XPORT();
     ec8:	0e 94 cd 1a 	call	0x359a	; 0x359a <init_XPORT>
	init_SPECID();
     ecc:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <init_SPECID>
	init_LED();
     ed0:	0e 94 20 08 	call	0x1040	; 0x1040 <init_LED>
	init_BEEPER();
     ed4:	0e 94 9e 02 	call	0x53c	; 0x53c <init_BEEPER>
	init_TWI();
     ed8:	0e 94 3f 18 	call	0x307e	; 0x307e <init_TWI>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
     edc:	80 e2       	ldi	r24, 0x20	; 32
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 11 17 	call	0x2e22	; 0x2e22 <init_RTC>
	init_USART();
     ee4:	0e 94 a6 18 	call	0x314c	; 0x314c <init_USART>
     ee8:	08 95       	ret

00000eea <initialize1>:

}

void initialize1(void)
{
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	2b 97       	sbiw	r28, 0x0b	; 11
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	init_ROBO();
     ef8:	0e 94 3f 14 	call	0x287e	; 0x287e <init_ROBO>
	init_MMA8451();
     efc:	0e 94 ba 09 	call	0x1374	; 0x1374 <init_MMA8451>
	init_PNEU();
     f00:	0e 94 8f 0b 	call	0x171e	; 0x171e <init_PNEU>
	init_OLED(0);
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	0e 94 47 0a 	call	0x148e	; 0x148e <init_OLED>
	init_OLED(1);
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	0e 94 47 0a 	call	0x148e	; 0x148e <init_OLED>
	init_EEPROM();	// Needs TWI
     f10:	0e 94 39 06 	call	0xc72	; 0xc72 <init_EEPROM>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
     f14:	80 ee       	ldi	r24, 0xE0	; 224
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timeoutOLED>
     f1c:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timeoutOLED+0x1>
	get_VERSION(versionstr);
     f20:	ce 01       	movw	r24, r28
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <get_VERSION>
	writestr_OLED(1,"specMech Version", 1);
     f28:	41 e0       	ldi	r20, 0x01	; 1
     f2a:	6d ef       	ldi	r22, 0xFD	; 253
     f2c:	76 e8       	ldi	r23, 0x86	; 134
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	0e 94 07 0b 	call	0x160e	; 0x160e <writestr_OLED>
	writestr_OLED(1, versionstr, 2);
     f34:	42 e0       	ldi	r20, 0x02	; 2
     f36:	be 01       	movw	r22, r28
     f38:	6f 5f       	subi	r22, 0xFF	; 255
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	0e 94 07 0b 	call	0x160e	; 0x160e <writestr_OLED>

}
     f42:	2b 96       	adiw	r28, 0x0b	; 11
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	08 95       	ret

00000f4e <__vector_29>:

/*----------------------------------------------------------------------
Curiosity Nano on-board pushbutton reboots the system
----------------------------------------------------------------------*/
ISR(PORTF_PORT_vect)
{
     f4e:	1f 92       	push	r1
     f50:	0f 92       	push	r0
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	0f 92       	push	r0
     f56:	11 24       	eor	r1, r1
     f58:	2f 93       	push	r18
     f5a:	3f 93       	push	r19
     f5c:	4f 93       	push	r20
     f5e:	5f 93       	push	r21
     f60:	6f 93       	push	r22
     f62:	7f 93       	push	r23
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
     f68:	af 93       	push	r26
     f6a:	bf 93       	push	r27
     f6c:	ef 93       	push	r30
     f6e:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
     f70:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
     f74:	86 ff       	sbrs	r24, 6
     f76:	05 c0       	rjmp	.+10     	; 0xf82 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
     f78:	80 e4       	ldi	r24, 0x40	; 64
     f7a:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
     f7e:	0e 94 c3 1a 	call	0x3586	; 0x3586 <reboot>
	}

}
     f82:	ff 91       	pop	r31
     f84:	ef 91       	pop	r30
     f86:	bf 91       	pop	r27
     f88:	af 91       	pop	r26
     f8a:	9f 91       	pop	r25
     f8c:	8f 91       	pop	r24
     f8e:	7f 91       	pop	r23
     f90:	6f 91       	pop	r22
     f92:	5f 91       	pop	r21
     f94:	4f 91       	pop	r20
     f96:	3f 91       	pop	r19
     f98:	2f 91       	pop	r18
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	0f 90       	pop	r0
     fa0:	1f 90       	pop	r1
     fa2:	18 95       	reti

00000fa4 <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
     fa4:	cf 92       	push	r12
     fa6:	df 92       	push	r13
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	21 f0       	breq	.+8      	; 0xfb8 <read_ionpump+0x14>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
     fb0:	82 30       	cpi	r24, 0x02	; 2
     fb2:	79 f5       	brne	.+94     	; 0x1012 <read_ionpump+0x6e>
		pins = AIN23;
     fb4:	40 e3       	ldi	r20, 0x30	; 48
     fb6:	01 c0       	rjmp	.+2      	; 0xfba <read_ionpump+0x16>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
     fb8:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(-666.0);
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);
     fba:	20 e8       	ldi	r18, 0x80	; 128
     fbc:	62 e0       	ldi	r22, 0x02	; 2
     fbe:	89 e4       	ldi	r24, 0x49	; 73
     fc0:	0e 94 9f 01 	call	0x33e	; 0x33e <read_ADS1115>
     fc4:	6b 01       	movw	r12, r22
     fc6:	7c 01       	movw	r14, r24

	if (voltage < 0.4) {						// Useful range for the Modion pump
     fc8:	2d ec       	ldi	r18, 0xCD	; 205
     fca:	3c ec       	ldi	r19, 0xCC	; 204
     fcc:	4c ec       	ldi	r20, 0xCC	; 204
     fce:	5e e3       	ldi	r21, 0x3E	; 62
     fd0:	0e 94 46 1b 	call	0x368c	; 0x368c <__cmpsf2>
     fd4:	88 23       	and	r24, r24
     fd6:	14 f1       	brlt	.+68     	; 0x101c <read_ionpump+0x78>
		return(-666.0);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	50 e4       	ldi	r21, 0x40	; 64
     fe0:	c7 01       	movw	r24, r14
     fe2:	b6 01       	movw	r22, r12
     fe4:	0e 94 6f 1c 	call	0x38de	; 0x38de <__gesf2>
     fe8:	18 16       	cp	r1, r24
     fea:	ec f0       	brlt	.+58     	; 0x1026 <read_ionpump+0x82>
		return(-666.0);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
     fec:	29 e7       	ldi	r18, 0x79	; 121
     fee:	39 ee       	ldi	r19, 0xE9	; 233
     ff0:	42 e0       	ldi	r20, 0x02	; 2
     ff2:	50 e4       	ldi	r21, 0x40	; 64
     ff4:	c7 01       	movw	r24, r14
     ff6:	b6 01       	movw	r22, r12
     ff8:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__mulsf3>
     ffc:	2e e6       	ldi	r18, 0x6E	; 110
     ffe:	33 ea       	ldi	r19, 0xA3	; 163
    1000:	4b ed       	ldi	r20, 0xDB	; 219
    1002:	50 e4       	ldi	r21, 0x40	; 64
    1004:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <__subsf3>

	return(vacuum);
    1008:	56 2f       	mov	r21, r22
    100a:	47 2f       	mov	r20, r23
    100c:	38 2f       	mov	r19, r24
    100e:	29 2f       	mov	r18, r25
    1010:	0e c0       	rjmp	.+28     	; 0x102e <read_ionpump+0x8a>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(-666.0);
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	40 e8       	ldi	r20, 0x80	; 128
    1016:	36 e2       	ldi	r19, 0x26	; 38
    1018:	24 ec       	ldi	r18, 0xC4	; 196
    101a:	09 c0       	rjmp	.+18     	; 0x102e <read_ionpump+0x8a>
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);

	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(-666.0);							// after ISO224 op-amp is 0.5 to 2.0 V
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	40 e8       	ldi	r20, 0x80	; 128
    1020:	36 e2       	ldi	r19, 0x26	; 38
    1022:	24 ec       	ldi	r18, 0xC4	; 196
    1024:	04 c0       	rjmp	.+8      	; 0x102e <read_ionpump+0x8a>
	} else if (voltage > 2.0) {
		return(-666.0);
    1026:	50 e0       	ldi	r21, 0x00	; 0
    1028:	40 e8       	ldi	r20, 0x80	; 128
    102a:	36 e2       	ldi	r19, 0x26	; 38
    102c:	24 ec       	ldi	r18, 0xC4	; 196
	vacuum = ISO224SLOPE * voltage + ISO224INTER;

	return(vacuum);
//return(voltage);

}
    102e:	65 2f       	mov	r22, r21
    1030:	74 2f       	mov	r23, r20
    1032:	83 2f       	mov	r24, r19
    1034:	92 2f       	mov	r25, r18
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	df 90       	pop	r13
    103c:	cf 90       	pop	r12
    103e:	08 95       	ret

00001040 <init_LED>:
#include "globals.h"

void init_LED(void)
{
	PORTF.OUTSET = PIN5_bm;
    1040:	e0 ea       	ldi	r30, 0xA0	; 160
    1042:	f4 e0       	ldi	r31, 0x04	; 4
    1044:	80 e2       	ldi	r24, 0x20	; 32
    1046:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN5_bm;
    1048:	81 83       	std	Z+1, r24	; 0x01
    104a:	08 95       	ret

0000104c <main>:
extern void initialize(void);

int main(void)
{

	initialize0();
    104c:	0e 94 5f 07 	call	0xebe	; 0xebe <initialize0>
	sei();
    1050:	78 94       	sei
	initialize1();
    1052:	0e 94 75 07 	call	0xeea	; 0xeea <initialize1>

	for (;;) {
		if (recv0_buf.done) {
    1056:	80 91 1b 2c 	lds	r24, 0x2C1B	; 0x802c1b <recv0_buf+0x104>
    105a:	88 23       	and	r24, r24
    105c:	e1 f3       	breq	.-8      	; 0x1056 <main+0xa>
			recv0_buf.done = NO;
    105e:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0x104>
			commands();
    1062:	0e 94 42 04 	call	0x884	; 0x884 <commands>
    1066:	f7 cf       	rjmp	.-18     	; 0x1056 <main+0xa>

00001068 <read_MCP23008>:
	Returns:
		val - data in that MCP23008 register
		Function return value is 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	c8 2f       	mov	r28, r24
    106e:	d6 2f       	mov	r29, r22

	uint8_t val;

	start_TWI(addr, TWIWRITE);
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
	write_TWI(reg);
    1076:	8d 2f       	mov	r24, r29
    1078:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
	start_TWI(addr, TWIREAD);
    107c:	61 e0       	ldi	r22, 0x01	; 1
    107e:	8c 2f       	mov	r24, r28
    1080:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
	val = readlast_TWI();
    1084:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <readlast_TWI>
    1088:	c8 2f       	mov	r28, r24
	stop_TWI();
    108a:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
	return(val);

}
    108e:	8c 2f       	mov	r24, r28
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	08 95       	ret

00001096 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	d6 2f       	mov	r29, r22
    109e:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
    10a6:	c8 2f       	mov	r28, r24
    10a8:	88 23       	and	r24, r24
    10aa:	21 f0       	breq	.+8      	; 0x10b4 <write_MCP23008+0x1e>
		stop_TWI();
    10ac:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
		return(retval);
    10b0:	8c 2f       	mov	r24, r28
    10b2:	17 c0       	rjmp	.+46     	; 0x10e2 <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    10b4:	8d 2f       	mov	r24, r29
    10b6:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
    10ba:	c8 2f       	mov	r28, r24
    10bc:	88 23       	and	r24, r24
    10be:	21 f0       	breq	.+8      	; 0x10c8 <write_MCP23008+0x32>
		stop_TWI();
    10c0:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
		return(retval);
    10c4:	8c 2f       	mov	r24, r28
    10c6:	0d c0       	rjmp	.+26     	; 0x10e2 <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(val))) {
    10c8:	81 2f       	mov	r24, r17
    10ca:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
    10ce:	c8 2f       	mov	r28, r24
    10d0:	88 23       	and	r24, r24
    10d2:	21 f0       	breq	.+8      	; 0x10dc <write_MCP23008+0x46>
		stop_TWI();
    10d4:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
		return(retval);
    10d8:	8c 2f       	mov	r24, r28
    10da:	03 c0       	rjmp	.+6      	; 0x10e2 <write_MCP23008+0x4c>
	}
	stop_TWI();
    10dc:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
	return(0);
    10e0:	80 e0       	ldi	r24, 0x00	; 0
	
}
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	1f 91       	pop	r17
    10e8:	08 95       	ret

000010ea <read_MCP9808>:
#include "globals.h"
#include "mcp9808.h"
#include "twi.h"

float read_MCP9808(void)
{
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29

	uint8_t highbyte, lowbyte, sign;
	float temperature;

	start_TWI(MCP9808ADDR, TWIWRITE);
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	88 e1       	ldi	r24, 0x18	; 24
    10fc:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
	write_TWI(TEMPREGISTER);
    1100:	85 e0       	ldi	r24, 0x05	; 5
    1102:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    1106:	61 e0       	ldi	r22, 0x01	; 1
    1108:	88 e1       	ldi	r24, 0x18	; 24
    110a:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
	highbyte = read_TWI();
    110e:	0e 94 4a 18 	call	0x3094	; 0x3094 <read_TWI>
    1112:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    1114:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <readlast_TWI>
    1118:	d8 2f       	mov	r29, r24
	stop_TWI();
    111a:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    111e:	1c 2f       	mov	r17, r28
    1120:	10 71       	andi	r17, 0x10	; 16
	highbyte &= 0x0F;					// Clear threshold & sign bits
    1122:	6c 2f       	mov	r22, r28
    1124:	6f 70       	andi	r22, 0x0F	; 15
	temperature = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 bd 1b 	call	0x377a	; 0x377a <__floatunsisf>
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e8       	ldi	r20, 0x80	; 128
    1136:	51 e4       	ldi	r21, 0x41	; 65
    1138:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__mulsf3>
    113c:	6b 01       	movw	r12, r22
    113e:	7c 01       	movw	r14, r24
    1140:	6d 2f       	mov	r22, r29
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 bd 1b 	call	0x377a	; 0x377a <__floatunsisf>
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e8       	ldi	r20, 0x80	; 128
    1152:	5d e3       	ldi	r21, 0x3D	; 61
    1154:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__mulsf3>
    1158:	9b 01       	movw	r18, r22
    115a:	ac 01       	movw	r20, r24
    115c:	c7 01       	movw	r24, r14
    115e:	b6 01       	movw	r22, r12
    1160:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__addsf3>
	if (sign) {
    1164:	11 23       	and	r17, r17
    1166:	41 f0       	breq	.+16     	; 0x1178 <read_MCP9808+0x8e>
		temperature = 256.0 - temperature;
    1168:	9b 01       	movw	r18, r22
    116a:	ac 01       	movw	r20, r24
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	80 e8       	ldi	r24, 0x80	; 128
    1172:	93 e4       	ldi	r25, 0x43	; 67
    1174:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <__subsf3>
	}
	return(temperature);
}
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	1f 91       	pop	r17
    117e:	ff 90       	pop	r15
    1180:	ef 90       	pop	r14
    1182:	df 90       	pop	r13
    1184:	cf 90       	pop	r12
    1186:	08 95       	ret

00001188 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    1188:	ef 92       	push	r14
    118a:	ff 92       	push	r15
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	18 2f       	mov	r17, r24
    1196:	f6 2e       	mov	r15, r22
    1198:	ea 01       	movw	r28, r20
    119a:	02 2f       	mov	r16, r18

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
    11a2:	81 11       	cpse	r24, r1
    11a4:	1e c0       	rjmp	.+60     	; 0x11e2 <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = write_TWI(reg))) {
    11a6:	8f 2d       	mov	r24, r15
    11a8:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
    11ac:	81 11       	cpse	r24, r1
    11ae:	19 c0       	rjmp	.+50     	; 0x11e2 <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
    11b0:	61 e0       	ldi	r22, 0x01	; 1
    11b2:	81 2f       	mov	r24, r17
    11b4:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
    11b8:	81 11       	cpse	r24, r1
    11ba:	13 c0       	rjmp	.+38     	; 0x11e2 <read_MMA8451+0x5a>
    11bc:	11 e0       	ldi	r17, 0x01	; 1
    11be:	09 c0       	rjmp	.+18     	; 0x11d2 <read_MMA8451+0x4a>
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    11c0:	7e 01       	movw	r14, r28
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	e8 1a       	sub	r14, r24
    11c6:	f8 0a       	sbc	r15, r24
    11c8:	0e 94 4a 18 	call	0x3094	; 0x3094 <read_TWI>
    11cc:	88 83       	st	Y, r24
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    11ce:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    11d0:	e7 01       	movw	r28, r14
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    11d2:	10 17       	cp	r17, r16
    11d4:	a8 f3       	brcs	.-22     	; 0x11c0 <read_MMA8451+0x38>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    11d6:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <readlast_TWI>
    11da:	88 83       	st	Y, r24
	stop_TWI();
    11dc:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
	return(0);
    11e0:	80 e0       	ldi	r24, 0x00	; 0

}
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	ff 90       	pop	r15
    11ec:	ef 90       	pop	r14
    11ee:	08 95       	ret

000011f0 <get_orientation>:
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
//uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
uint8_t get_orientation(float *x, float *y, float *z)
{
    11f0:	cf 92       	push	r12
    11f2:	df 92       	push	r13
    11f4:	ef 92       	push	r14
    11f6:	ff 92       	push	r15
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	26 97       	sbiw	r28, 0x06	; 6
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	6c 01       	movw	r12, r24
    120c:	7b 01       	movw	r14, r22
    120e:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -666.0;
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e8       	ldi	r25, 0x80	; 128
    1214:	a6 e2       	ldi	r26, 0x26	; 38
    1216:	b4 ec       	ldi	r27, 0xC4	; 196
    1218:	fa 01       	movw	r30, r20
    121a:	80 83       	st	Z, r24
    121c:	91 83       	std	Z+1, r25	; 0x01
    121e:	a2 83       	std	Z+2, r26	; 0x02
    1220:	b3 83       	std	Z+3, r27	; 0x03
    1222:	fb 01       	movw	r30, r22
    1224:	80 83       	st	Z, r24
    1226:	91 83       	std	Z+1, r25	; 0x01
    1228:	a2 83       	std	Z+2, r26	; 0x02
    122a:	b3 83       	std	Z+3, r27	; 0x03
    122c:	f6 01       	movw	r30, r12
    122e:	80 83       	st	Z, r24
    1230:	91 83       	std	Z+1, r25	; 0x01
    1232:	a2 83       	std	Z+2, r26	; 0x02
    1234:	b3 83       	std	Z+3, r27	; 0x03

	read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6);
    1236:	26 e0       	ldi	r18, 0x06	; 6
    1238:	ae 01       	movw	r20, r28
    123a:	4f 5f       	subi	r20, 0xFF	; 255
    123c:	5f 4f       	sbci	r21, 0xFF	; 255
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	8d e1       	ldi	r24, 0x1D	; 29
    1242:	0e 94 c4 08 	call	0x1188	; 0x1188 <read_MMA8451>

	ix = datain[0];
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    124a:	98 2f       	mov	r25, r24
    124c:	88 27       	eor	r24, r24
	ix |= datain[1];
    124e:	2a 81       	ldd	r18, Y+2	; 0x02
    1250:	82 2b       	or	r24, r18
	ix /= 4;
    1252:	bc 01       	movw	r22, r24
    1254:	77 23       	and	r23, r23
    1256:	14 f4       	brge	.+4      	; 0x125c <get_orientation+0x6c>
    1258:	6d 5f       	subi	r22, 0xFD	; 253
    125a:	7f 4f       	sbci	r23, 0xFF	; 255
    125c:	75 95       	asr	r23
    125e:	67 95       	ror	r22
    1260:	75 95       	asr	r23
    1262:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    1264:	07 2e       	mov	r0, r23
    1266:	00 0c       	add	r0, r0
    1268:	88 0b       	sbc	r24, r24
    126a:	99 0b       	sbc	r25, r25
    126c:	0e 94 bf 1b 	call	0x377e	; 0x377e <__floatsisf>
    1270:	26 e6       	ldi	r18, 0x66	; 102
    1272:	36 e2       	ldi	r19, 0x26	; 38
    1274:	45 e7       	ldi	r20, 0x75	; 117
    1276:	5e e3       	ldi	r21, 0x3E	; 62
    1278:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__mulsf3>
    127c:	f6 01       	movw	r30, r12
    127e:	60 83       	st	Z, r22
    1280:	71 83       	std	Z+1, r23	; 0x01
    1282:	82 83       	std	Z+2, r24	; 0x02
    1284:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    128a:	98 2f       	mov	r25, r24
    128c:	88 27       	eor	r24, r24
	iy |= datain[3];
    128e:	2c 81       	ldd	r18, Y+4	; 0x04
    1290:	82 2b       	or	r24, r18
	iy /= 4;
    1292:	bc 01       	movw	r22, r24
    1294:	77 23       	and	r23, r23
    1296:	14 f4       	brge	.+4      	; 0x129c <get_orientation+0xac>
    1298:	6d 5f       	subi	r22, 0xFD	; 253
    129a:	7f 4f       	sbci	r23, 0xFF	; 255
    129c:	75 95       	asr	r23
    129e:	67 95       	ror	r22
    12a0:	75 95       	asr	r23
    12a2:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    12a4:	07 2e       	mov	r0, r23
    12a6:	00 0c       	add	r0, r0
    12a8:	88 0b       	sbc	r24, r24
    12aa:	99 0b       	sbc	r25, r25
    12ac:	0e 94 bf 1b 	call	0x377e	; 0x377e <__floatsisf>
    12b0:	26 e6       	ldi	r18, 0x66	; 102
    12b2:	36 e2       	ldi	r19, 0x26	; 38
    12b4:	45 e7       	ldi	r20, 0x75	; 117
    12b6:	5e e3       	ldi	r21, 0x3E	; 62
    12b8:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__mulsf3>
    12bc:	f7 01       	movw	r30, r14
    12be:	60 83       	st	Z, r22
    12c0:	71 83       	std	Z+1, r23	; 0x01
    12c2:	82 83       	std	Z+2, r24	; 0x02
    12c4:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    12ca:	98 2f       	mov	r25, r24
    12cc:	88 27       	eor	r24, r24
	iz |= datain[5];
    12ce:	2e 81       	ldd	r18, Y+6	; 0x06
    12d0:	82 2b       	or	r24, r18
	iz /= 4;
    12d2:	bc 01       	movw	r22, r24
    12d4:	77 23       	and	r23, r23
    12d6:	14 f4       	brge	.+4      	; 0x12dc <get_orientation+0xec>
    12d8:	6d 5f       	subi	r22, 0xFD	; 253
    12da:	7f 4f       	sbci	r23, 0xFF	; 255
    12dc:	75 95       	asr	r23
    12de:	67 95       	ror	r22
    12e0:	75 95       	asr	r23
    12e2:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    12e4:	07 2e       	mov	r0, r23
    12e6:	00 0c       	add	r0, r0
    12e8:	88 0b       	sbc	r24, r24
    12ea:	99 0b       	sbc	r25, r25
    12ec:	0e 94 bf 1b 	call	0x377e	; 0x377e <__floatsisf>
    12f0:	26 e6       	ldi	r18, 0x66	; 102
    12f2:	36 e2       	ldi	r19, 0x26	; 38
    12f4:	45 e7       	ldi	r20, 0x75	; 117
    12f6:	5e e3       	ldi	r21, 0x3E	; 62
    12f8:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__mulsf3>
    12fc:	f8 01       	movw	r30, r16
    12fe:	60 83       	st	Z, r22
    1300:	71 83       	std	Z+1, r23	; 0x01
    1302:	82 83       	std	Z+2, r24	; 0x02
    1304:	93 83       	std	Z+3, r25	; 0x03

	return(0);

}
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	26 96       	adiw	r28, 0x06	; 6
    130a:	cd bf       	out	0x3d, r28	; 61
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	ff 90       	pop	r15
    1318:	ef 90       	pop	r14
    131a:	df 90       	pop	r13
    131c:	cf 90       	pop	r12
    131e:	08 95       	ret

00001320 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	d6 2f       	mov	r29, r22
    1328:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
    1330:	c8 2f       	mov	r28, r24
    1332:	88 23       	and	r24, r24
    1334:	21 f0       	breq	.+8      	; 0x133e <write_MMA8451+0x1e>
		stop_TWI();
    1336:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
		return(retval);
    133a:	8c 2f       	mov	r24, r28
    133c:	17 c0       	rjmp	.+46     	; 0x136c <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    133e:	8d 2f       	mov	r24, r29
    1340:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
    1344:	c8 2f       	mov	r28, r24
    1346:	88 23       	and	r24, r24
    1348:	21 f0       	breq	.+8      	; 0x1352 <write_MMA8451+0x32>
		stop_TWI();
    134a:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
		return(retval);
    134e:	8c 2f       	mov	r24, r28
    1350:	0d c0       	rjmp	.+26     	; 0x136c <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1352:	81 2f       	mov	r24, r17
    1354:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
    1358:	c8 2f       	mov	r28, r24
    135a:	88 23       	and	r24, r24
    135c:	21 f0       	breq	.+8      	; 0x1366 <write_MMA8451+0x46>
		stop_TWI();
    135e:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
		return(retval);
    1362:	8c 2f       	mov	r24, r28
    1364:	03 c0       	rjmp	.+6      	; 0x136c <write_MMA8451+0x4c>
	}
	stop_TWI();
    1366:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>
	return(0);
    136a:	80 e0       	ldi	r24, 0x00	; 0
	
}
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	1f 91       	pop	r17
    1372:	08 95       	ret

00001374 <init_MMA8451>:
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/

uint8_t init_MMA8451(void)
{
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	1f 92       	push	r1
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    137e:	40 e4       	ldi	r20, 0x40	; 64
    1380:	6b e2       	ldi	r22, 0x2B	; 43
    1382:	8d e1       	ldi	r24, 0x1D	; 29
    1384:	0e 94 90 09 	call	0x1320	; 0x1320 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    1388:	21 e0       	ldi	r18, 0x01	; 1
    138a:	ae 01       	movw	r20, r28
    138c:	4f 5f       	subi	r20, 0xFF	; 255
    138e:	5f 4f       	sbci	r21, 0xFF	; 255
    1390:	6b e2       	ldi	r22, 0x2B	; 43
    1392:	8d e1       	ldi	r24, 0x1D	; 29
    1394:	0e 94 c4 08 	call	0x1188	; 0x1188 <read_MMA8451>
	while (retval & 0x40) {
    1398:	08 c0       	rjmp	.+16     	; 0x13aa <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    139a:	21 e0       	ldi	r18, 0x01	; 1
    139c:	ae 01       	movw	r20, r28
    139e:	4f 5f       	subi	r20, 0xFF	; 255
    13a0:	5f 4f       	sbci	r21, 0xFF	; 255
    13a2:	6b e2       	ldi	r22, 0x2B	; 43
    13a4:	8d e1       	ldi	r24, 0x1D	; 29
    13a6:	0e 94 c4 08 	call	0x1188	; 0x1188 <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	86 fd       	sbrc	r24, 6
    13ae:	f5 cf       	rjmp	.-22     	; 0x139a <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    13b0:	40 ec       	ldi	r20, 0xC0	; 192
    13b2:	6f e0       	ldi	r22, 0x0F	; 15
    13b4:	8d e1       	ldi	r24, 0x1D	; 29
    13b6:	0e 94 90 09 	call	0x1320	; 0x1320 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    13ba:	42 e0       	ldi	r20, 0x02	; 2
    13bc:	6b e2       	ldi	r22, 0x2B	; 43
    13be:	8d e1       	ldi	r24, 0x1D	; 29
    13c0:	0e 94 90 09 	call	0x1320	; 0x1320 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    13c4:	4d e3       	ldi	r20, 0x3D	; 61
    13c6:	6a e2       	ldi	r22, 0x2A	; 42
    13c8:	8d e1       	ldi	r24, 0x1D	; 29
    13ca:	0e 94 90 09 	call	0x1320	; 0x1320 <write_MMA8451>

	return(retval);

}
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	0f 90       	pop	r0
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	08 95       	ret

000013d8 <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    13d8:	ef 92       	push	r14
    13da:	ff 92       	push	r15
    13dc:	0f 93       	push	r16
    13de:	1f 93       	push	r17
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	2e 97       	sbiw	r28, 0x0e	; 14
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    13f0:	88 e0       	ldi	r24, 0x08	; 8
    13f2:	ee e0       	ldi	r30, 0x0E	; 14
    13f4:	f7 e8       	ldi	r31, 0x87	; 135
    13f6:	de 01       	movw	r26, r28
    13f8:	11 96       	adiw	r26, 0x01	; 1
    13fa:	01 90       	ld	r0, Z+
    13fc:	0d 92       	st	X+, r0
    13fe:	8a 95       	dec	r24
    1400:	e1 f7       	brne	.-8      	; 0x13fa <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    1402:	f8 01       	movw	r30, r16
    1404:	01 90       	ld	r0, Z+
    1406:	00 20       	and	r0, r0
    1408:	e9 f7       	brne	.-6      	; 0x1404 <checksum_NMEA+0x2c>
    140a:	31 97       	sbiw	r30, 0x01	; 1
    140c:	3e 2f       	mov	r19, r30
    140e:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    1410:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	06 c0       	rjmp	.+12     	; 0x1422 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    1416:	f8 01       	movw	r30, r16
    1418:	e8 0f       	add	r30, r24
    141a:	f1 1d       	adc	r31, r1
    141c:	20 81       	ld	r18, Z
    141e:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1420:	8f 5f       	subi	r24, 0xFF	; 255
    1422:	83 17       	cp	r24, r19
    1424:	c0 f3       	brcs	.-16     	; 0x1416 <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1426:	1f 92       	push	r1
    1428:	9f 93       	push	r25
    142a:	ce 01       	movw	r24, r28
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	9f 93       	push	r25
    1430:	8f 93       	push	r24
    1432:	7e 01       	movw	r14, r28
    1434:	89 e0       	ldi	r24, 0x09	; 9
    1436:	e8 0e       	add	r14, r24
    1438:	f1 1c       	adc	r15, r1
    143a:	ff 92       	push	r15
    143c:	ef 92       	push	r14
    143e:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
	strcat(str, chksum);
    1442:	b7 01       	movw	r22, r14
    1444:	c8 01       	movw	r24, r16
    1446:	0e 94 22 22 	call	0x4444	; 0x4444 <strcat>

}
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	2e 96       	adiw	r28, 0x0e	; 14
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	ff 90       	pop	r15
    1466:	ef 90       	pop	r14
    1468:	08 95       	ret

0000146a <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	d6 2f       	mov	r29, r22
    1470:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	0e 94 67 18 	call	0x30ce	; 0x30ce <start_TWI>
	write_TWI(type);
    1478:	8d 2f       	mov	r24, r29
    147a:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
	write_TWI(byteToSend);
    147e:	8c 2f       	mov	r24, r28
    1480:	0e 94 91 18 	call	0x3122	; 0x3122 <write_TWI>
	stop_TWI();
    1484:	0e 94 8d 18 	call	0x311a	; 0x311a <stop_TWI>

}
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
    148e:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    1490:	e0 e6       	ldi	r30, 0x60	; 96
    1492:	f4 e0       	ldi	r31, 0x04	; 4
    1494:	90 e4       	ldi	r25, 0x40	; 64
    1496:	96 83       	std	Z+6, r25	; 0x06
	PORTD.DIRSET = PIN6_bm;
    1498:	91 83       	std	Z+1, r25	; 0x01
    149a:	a1 e4       	ldi	r26, 0x41	; 65
    149c:	b3 e0       	ldi	r27, 0x03	; 3
    149e:	11 97       	sbiw	r26, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <init_OLED+0x10>
    14a2:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    14a4:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
    14a6:	81 11       	cpse	r24, r1
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <init_OLED+0x20>
		twiaddr = OLEDADDR0;
    14aa:	cc e3       	ldi	r28, 0x3C	; 60
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
    14ae:	cd e3       	ldi	r28, 0x3D	; 61
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    14b0:	4a e2       	ldi	r20, 0x2A	; 42
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	8c 2f       	mov	r24, r28
    14b6:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    14ba:	41 e7       	ldi	r20, 0x71	; 113
    14bc:	60 e0       	ldi	r22, 0x00	; 0
    14be:	8c 2f       	mov	r24, r28
    14c0:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    14c4:	4c e5       	ldi	r20, 0x5C	; 92
    14c6:	60 e4       	ldi	r22, 0x40	; 64
    14c8:	8c 2f       	mov	r24, r28
    14ca:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    14ce:	48 e2       	ldi	r20, 0x28	; 40
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	8c 2f       	mov	r24, r28
    14d4:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    14d8:	48 e0       	ldi	r20, 0x08	; 8
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	8c 2f       	mov	r24, r28
    14de:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    14e2:	4a e2       	ldi	r20, 0x2A	; 42
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	8c 2f       	mov	r24, r28
    14e8:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    14ec:	49 e7       	ldi	r20, 0x79	; 121
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	8c 2f       	mov	r24, r28
    14f2:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    14f6:	45 ed       	ldi	r20, 0xD5	; 213
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	8c 2f       	mov	r24, r28
    14fc:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    1500:	40 e7       	ldi	r20, 0x70	; 112
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	8c 2f       	mov	r24, r28
    1506:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    150a:	48 e7       	ldi	r20, 0x78	; 120
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	8c 2f       	mov	r24, r28
    1510:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    1514:	48 e0       	ldi	r20, 0x08	; 8
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	8c 2f       	mov	r24, r28
    151a:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    151e:	46 e0       	ldi	r20, 0x06	; 6
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	8c 2f       	mov	r24, r28
    1524:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1528:	42 e7       	ldi	r20, 0x72	; 114
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	8c 2f       	mov	r24, r28
    152e:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    1532:	40 e0       	ldi	r20, 0x00	; 0
    1534:	60 e4       	ldi	r22, 0x40	; 64
    1536:	8c 2f       	mov	r24, r28
    1538:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    153c:	4a e2       	ldi	r20, 0x2A	; 42
    153e:	60 e0       	ldi	r22, 0x00	; 0
    1540:	8c 2f       	mov	r24, r28
    1542:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1546:	49 e7       	ldi	r20, 0x79	; 121
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	8c 2f       	mov	r24, r28
    154c:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    1550:	4a ed       	ldi	r20, 0xDA	; 218
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	8c 2f       	mov	r24, r28
    1556:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	8c 2f       	mov	r24, r28
    1560:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    1564:	4c ed       	ldi	r20, 0xDC	; 220
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	8c 2f       	mov	r24, r28
    156a:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    156e:	40 e0       	ldi	r20, 0x00	; 0
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	8c 2f       	mov	r24, r28
    1574:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    1578:	41 e8       	ldi	r20, 0x81	; 129
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	8c 2f       	mov	r24, r28
    157e:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    1582:	4f e7       	ldi	r20, 0x7F	; 127
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	8c 2f       	mov	r24, r28
    1588:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    158c:	49 ed       	ldi	r20, 0xD9	; 217
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	8c 2f       	mov	r24, r28
    1592:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    1596:	41 ef       	ldi	r20, 0xF1	; 241
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	8c 2f       	mov	r24, r28
    159c:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    15a0:	4b ed       	ldi	r20, 0xDB	; 219
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	8c 2f       	mov	r24, r28
    15a6:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    15aa:	40 e4       	ldi	r20, 0x40	; 64
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	8c 2f       	mov	r24, r28
    15b0:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    15b4:	48 e7       	ldi	r20, 0x78	; 120
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	8c 2f       	mov	r24, r28
    15ba:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    15be:	48 e2       	ldi	r20, 0x28	; 40
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	8c 2f       	mov	r24, r28
    15c4:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    15c8:	41 e0       	ldi	r20, 0x01	; 1
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	8c 2f       	mov	r24, r28
    15ce:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    15d2:	40 e8       	ldi	r20, 0x80	; 128
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	8c 2f       	mov	r24, r28
    15d8:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    15dc:	4c e0       	ldi	r20, 0x0C	; 12
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	8c 2f       	mov	r24, r28
    15e2:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
    15e6:	ba e6       	ldi	r27, 0x6A	; 106
    15e8:	24 e0       	ldi	r18, 0x04	; 4
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	b1 50       	subi	r27, 0x01	; 1
    15ee:	20 40       	sbci	r18, 0x00	; 0
    15f0:	80 40       	sbci	r24, 0x00	; 0
    15f2:	e1 f7       	brne	.-8      	; 0x15ec <init_OLED+0x15e>
    15f4:	00 c0       	rjmp	.+0      	; 0x15f6 <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
    15f6:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <timerOLED>
    15fa:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED+0x1>
	timeoutOLED = 5;
    15fe:	85 e0       	ldi	r24, 0x05	; 5
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timeoutOLED>
    1606:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timeoutOLED+0x1>

}
    160a:	cf 91       	pop	r28
    160c:	08 95       	ret

0000160e <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    160e:	ef 92       	push	r14
    1610:	ff 92       	push	r15
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	e2 97       	sbiw	r28, 0x32	; 50
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    1626:	91 e1       	ldi	r25, 0x11	; 17
    1628:	e6 e1       	ldi	r30, 0x16	; 22
    162a:	f7 e8       	ldi	r31, 0x87	; 135
    162c:	de 01       	movw	r26, r28
    162e:	92 96       	adiw	r26, 0x22	; 34
    1630:	01 90       	ld	r0, Z+
    1632:	0d 92       	st	X+, r0
    1634:	9a 95       	dec	r25
    1636:	e1 f7       	brne	.-8      	; 0x1630 <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1638:	81 11       	cpse	r24, r1
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    163c:	0c e3       	ldi	r16, 0x3C	; 60
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1640:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    1642:	ce 01       	movw	r24, r28
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	7c 01       	movw	r14, r24
    1648:	0e 94 2d 22 	call	0x445a	; 0x445a <strcpy>
	if (strlen(strbuf) > 16) {
    164c:	f7 01       	movw	r30, r14
    164e:	01 90       	ld	r0, Z+
    1650:	00 20       	and	r0, r0
    1652:	e9 f7       	brne	.-6      	; 0x164e <writestr_OLED+0x40>
    1654:	31 97       	sbiw	r30, 0x01	; 1
    1656:	ee 19       	sub	r30, r14
    1658:	ff 09       	sbc	r31, r15
    165a:	71 97       	sbiw	r30, 0x11	; 17
    165c:	08 f0       	brcs	.+2      	; 0x1660 <writestr_OLED+0x52>
		strbuf[16] = '\0';
    165e:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1660:	be 01       	movw	r22, r28
    1662:	6e 5d       	subi	r22, 0xDE	; 222
    1664:	7f 4f       	sbci	r23, 0xFF	; 255
    1666:	ce 01       	movw	r24, r28
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	0e 94 22 22 	call	0x4444	; 0x4444 <strcat>

	if (lineno == 1) {
    166e:	11 30       	cpi	r17, 0x01	; 1
    1670:	39 f4       	brne	.+14     	; 0x1680 <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    1672:	40 e8       	ldi	r20, 0x80	; 128
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	80 2f       	mov	r24, r16
    1678:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    167c:	10 e0       	ldi	r17, 0x00	; 0
    167e:	12 c0       	rjmp	.+36     	; 0x16a4 <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1680:	40 ec       	ldi	r20, 0xC0	; 192
    1682:	60 e0       	ldi	r22, 0x00	; 0
    1684:	80 2f       	mov	r24, r16
    1686:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>
    168a:	f8 cf       	rjmp	.-16     	; 0x167c <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    168c:	e1 e0       	ldi	r30, 0x01	; 1
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	ec 0f       	add	r30, r28
    1692:	fd 1f       	adc	r31, r29
    1694:	e1 0f       	add	r30, r17
    1696:	f1 1d       	adc	r31, r1
    1698:	40 81       	ld	r20, Z
    169a:	60 e4       	ldi	r22, 0x40	; 64
    169c:	80 2f       	mov	r24, r16
    169e:	0e 94 35 0a 	call	0x146a	; 0x146a <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    16a2:	1f 5f       	subi	r17, 0xFF	; 255
    16a4:	10 31       	cpi	r17, 0x10	; 16
    16a6:	90 f3       	brcs	.-28     	; 0x168c <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	80 93 0b 2a 	sts	0x2A0B, r24	; 0x802a0b <timerOLED>
    16b0:	90 93 0c 2a 	sts	0x2A0C, r25	; 0x802a0c <timerOLED+0x1>

}
    16b4:	e2 96       	adiw	r28, 0x32	; 50
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	1f 91       	pop	r17
    16c0:	0f 91       	pop	r16
    16c2:	ff 90       	pop	r15
    16c4:	ef 90       	pop	r14
    16c6:	08 95       	ret

000016c8 <clear_OLED>:
/*------------------------------------------------------------------------------
void clear_OLED(uint8_t displaynumber)
	Clears the OLED screen by writing blank spaces to both lines.
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    16c8:	1f 93       	push	r17
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	61 97       	sbiw	r28, 0x11	; 17
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	18 2f       	mov	r17, r24

	char blanks[] = "                ";	// Does const put this in flash?
    16da:	81 e1       	ldi	r24, 0x11	; 17
    16dc:	e6 e1       	ldi	r30, 0x16	; 22
    16de:	f7 e8       	ldi	r31, 0x87	; 135
    16e0:	de 01       	movw	r26, r28
    16e2:	11 96       	adiw	r26, 0x01	; 1
    16e4:	01 90       	ld	r0, Z+
    16e6:	0d 92       	st	X+, r0
    16e8:	8a 95       	dec	r24
    16ea:	e1 f7       	brne	.-8      	; 0x16e4 <clear_OLED+0x1c>

	writestr_OLED(displaynumber, blanks, 1);
    16ec:	41 e0       	ldi	r20, 0x01	; 1
    16ee:	be 01       	movw	r22, r28
    16f0:	6f 5f       	subi	r22, 0xFF	; 255
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	81 2f       	mov	r24, r17
    16f6:	0e 94 07 0b 	call	0x160e	; 0x160e <writestr_OLED>
	writestr_OLED(displaynumber, blanks, 2);
    16fa:	42 e0       	ldi	r20, 0x02	; 2
    16fc:	be 01       	movw	r22, r28
    16fe:	6f 5f       	subi	r22, 0xFF	; 255
    1700:	7f 4f       	sbci	r23, 0xFF	; 255
    1702:	81 2f       	mov	r24, r17
    1704:	0e 94 07 0b 	call	0x160e	; 0x160e <writestr_OLED>
	timerOLED = 0;
    1708:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <timerOLED>
    170c:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED+0x1>

}
    1710:	61 96       	adiw	r28, 0x11	; 17
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	08 95       	ret

0000171e <init_PNEU>:
uint8_t init_PNEU(void)
{

	uint8_t retval;

	if ((retval = write_MCP23008(HIGHCURRENT, IODIR, 0x00))) {
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	84 e2       	ldi	r24, 0x24	; 36
    1724:	0e 94 4b 08 	call	0x1096	; 0x1096 <write_MCP23008>
    1728:	81 11       	cpse	r24, r1
    172a:	35 c0       	rjmp	.+106    	; 0x1796 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, 0x00))) {
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	6a e0       	ldi	r22, 0x0A	; 10
    1730:	84 e2       	ldi	r24, 0x24	; 36
    1732:	0e 94 4b 08 	call	0x1096	; 0x1096 <write_MCP23008>
    1736:	81 11       	cpse	r24, r1
    1738:	2e c0       	rjmp	.+92     	; 0x1796 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IODIR, 0xFE))) {	// Inputs
    173a:	4e ef       	ldi	r20, 0xFE	; 254
    173c:	60 e0       	ldi	r22, 0x00	; 0
    173e:	81 e2       	ldi	r24, 0x21	; 33
    1740:	0e 94 4b 08 	call	0x1096	; 0x1096 <write_MCP23008>
    1744:	81 11       	cpse	r24, r1
    1746:	27 c0       	rjmp	.+78     	; 0x1796 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IPOL, 0x00))) {
    1748:	40 e0       	ldi	r20, 0x00	; 0
    174a:	61 e0       	ldi	r22, 0x01	; 1
    174c:	81 e2       	ldi	r24, 0x21	; 33
    174e:	0e 94 4b 08 	call	0x1096	; 0x1096 <write_MCP23008>
    1752:	81 11       	cpse	r24, r1
    1754:	20 c0       	rjmp	.+64     	; 0x1796 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100))) {
    1756:	4c ef       	ldi	r20, 0xFC	; 252
    1758:	62 e0       	ldi	r22, 0x02	; 2
    175a:	81 e2       	ldi	r24, 0x21	; 33
    175c:	0e 94 4b 08 	call	0x1096	; 0x1096 <write_MCP23008>
    1760:	81 11       	cpse	r24, r1
    1762:	19 c0       	rjmp	.+50     	; 0x1796 <init_PNEU+0x78>
			return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, INTCON, 0x00))) {
    1764:	40 e0       	ldi	r20, 0x00	; 0
    1766:	64 e0       	ldi	r22, 0x04	; 4
    1768:	81 e2       	ldi	r24, 0x21	; 33
    176a:	0e 94 4b 08 	call	0x1096	; 0x1096 <write_MCP23008>
    176e:	81 11       	cpse	r24, r1
    1770:	12 c0       	rjmp	.+36     	; 0x1796 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IOCON, 0x20))) { // Don't increment addr
    1772:	40 e2       	ldi	r20, 0x20	; 32
    1774:	65 e0       	ldi	r22, 0x05	; 5
    1776:	81 e2       	ldi	r24, 0x21	; 33
    1778:	0e 94 4b 08 	call	0x1096	; 0x1096 <write_MCP23008>
    177c:	81 11       	cpse	r24, r1
    177e:	0b c0       	rjmp	.+22     	; 0x1796 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPPU, 0x7F))) { // Pullups (not really needed)
    1780:	4f e7       	ldi	r20, 0x7F	; 127
    1782:	66 e0       	ldi	r22, 0x06	; 6
    1784:	81 e2       	ldi	r24, 0x21	; 33
    1786:	0e 94 4b 08 	call	0x1096	; 0x1096 <write_MCP23008>
    178a:	81 11       	cpse	r24, r1
    178c:	04 c0       	rjmp	.+8      	; 0x1796 <init_PNEU+0x78>
		return(retval);
	}
	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    178e:	89 e0       	ldi	r24, 0x09	; 9
    1790:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	return(0);
    1794:	80 e0       	ldi	r24, 0x00	; 0

}
    1796:	08 95       	ret

00001798 <read_PNEUSENSORS>:
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
{
    1798:	cf 92       	push	r12
    179a:	df 92       	push	r13
    179c:	ef 92       	push	r14
    179e:	ff 92       	push	r15
    17a0:	0f 93       	push	r16
    17a2:	1f 93       	push	r17
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	6c 01       	movw	r12, r24
    17aa:	8b 01       	movw	r16, r22
    17ac:	7a 01       	movw	r14, r20
    17ae:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);
    17b0:	69 e0       	ldi	r22, 0x09	; 9
    17b2:	81 e2       	ldi	r24, 0x21	; 33
    17b4:	0e 94 34 08 	call	0x1068	; 0x1068 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    17b8:	98 2f       	mov	r25, r24
    17ba:	92 95       	swap	r25
    17bc:	96 95       	lsr	r25
    17be:	96 95       	lsr	r25
    17c0:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    17c2:	91 30       	cpi	r25, 0x01	; 1
    17c4:	21 f4       	brne	.+8      	; 0x17ce <read_PNEUSENSORS+0x36>
		*shutter = 'c';
    17c6:	93 e6       	ldi	r25, 0x63	; 99
    17c8:	f6 01       	movw	r30, r12
    17ca:	90 83       	st	Z, r25
    17cc:	0f c0       	rjmp	.+30     	; 0x17ec <read_PNEUSENSORS+0x54>
	} else if (state == 2) {
    17ce:	92 30       	cpi	r25, 0x02	; 2
    17d0:	21 f4       	brne	.+8      	; 0x17da <read_PNEUSENSORS+0x42>
		*shutter = 'o';
    17d2:	9f e6       	ldi	r25, 0x6F	; 111
    17d4:	f6 01       	movw	r30, r12
    17d6:	90 83       	st	Z, r25
    17d8:	09 c0       	rjmp	.+18     	; 0x17ec <read_PNEUSENSORS+0x54>
	} else if (state == 3) {
    17da:	93 30       	cpi	r25, 0x03	; 3
    17dc:	21 f4       	brne	.+8      	; 0x17e6 <read_PNEUSENSORS+0x4e>
		*shutter = 't';
    17de:	94 e7       	ldi	r25, 0x74	; 116
    17e0:	f6 01       	movw	r30, r12
    17e2:	90 83       	st	Z, r25
    17e4:	03 c0       	rjmp	.+6      	; 0x17ec <read_PNEUSENSORS+0x54>
	} else {
		*shutter = 'x';
    17e6:	98 e7       	ldi	r25, 0x78	; 120
    17e8:	f6 01       	movw	r30, r12
    17ea:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    17ec:	98 2f       	mov	r25, r24
    17ee:	96 95       	lsr	r25
    17f0:	96 95       	lsr	r25
	state &= 0b00000011;
    17f2:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    17f4:	91 30       	cpi	r25, 0x01	; 1
    17f6:	21 f4       	brne	.+8      	; 0x1800 <__DATA_REGION_LENGTH__>
		*right = 'c';
    17f8:	93 e6       	ldi	r25, 0x63	; 99
    17fa:	f7 01       	movw	r30, r14
    17fc:	90 83       	st	Z, r25
    17fe:	0f c0       	rjmp	.+30     	; 0x181e <__DATA_REGION_LENGTH__+0x1e>
	} else if (state == 2) {
    1800:	92 30       	cpi	r25, 0x02	; 2
    1802:	21 f4       	brne	.+8      	; 0x180c <__DATA_REGION_LENGTH__+0xc>
		*right = 'o';
    1804:	9f e6       	ldi	r25, 0x6F	; 111
    1806:	f7 01       	movw	r30, r14
    1808:	90 83       	st	Z, r25
    180a:	09 c0       	rjmp	.+18     	; 0x181e <__DATA_REGION_LENGTH__+0x1e>
	} else if (state == 3) {
    180c:	93 30       	cpi	r25, 0x03	; 3
    180e:	21 f4       	brne	.+8      	; 0x1818 <__DATA_REGION_LENGTH__+0x18>
		*right = 't';
    1810:	94 e7       	ldi	r25, 0x74	; 116
    1812:	f7 01       	movw	r30, r14
    1814:	90 83       	st	Z, r25
    1816:	03 c0       	rjmp	.+6      	; 0x181e <__DATA_REGION_LENGTH__+0x1e>
	} else {
		*right = 'x';
    1818:	98 e7       	ldi	r25, 0x78	; 120
    181a:	f7 01       	movw	r30, r14
    181c:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    181e:	98 2f       	mov	r25, r24
    1820:	92 95       	swap	r25
    1822:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    1824:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1826:	91 30       	cpi	r25, 0x01	; 1
    1828:	21 f4       	brne	.+8      	; 0x1832 <__DATA_REGION_LENGTH__+0x32>
		*left = 'o';
    182a:	9f e6       	ldi	r25, 0x6F	; 111
    182c:	f8 01       	movw	r30, r16
    182e:	90 83       	st	Z, r25
    1830:	0f c0       	rjmp	.+30     	; 0x1850 <__DATA_REGION_LENGTH__+0x50>
	} else if (state == 2) {
    1832:	92 30       	cpi	r25, 0x02	; 2
    1834:	21 f4       	brne	.+8      	; 0x183e <__DATA_REGION_LENGTH__+0x3e>
		*left = 'c';
    1836:	93 e6       	ldi	r25, 0x63	; 99
    1838:	f8 01       	movw	r30, r16
    183a:	90 83       	st	Z, r25
    183c:	09 c0       	rjmp	.+18     	; 0x1850 <__DATA_REGION_LENGTH__+0x50>
	} else if (state == 3) {
    183e:	93 30       	cpi	r25, 0x03	; 3
    1840:	21 f4       	brne	.+8      	; 0x184a <__DATA_REGION_LENGTH__+0x4a>
		*left = 't';
    1842:	94 e7       	ldi	r25, 0x74	; 116
    1844:	f8 01       	movw	r30, r16
    1846:	90 83       	st	Z, r25
    1848:	03 c0       	rjmp	.+6      	; 0x1850 <__DATA_REGION_LENGTH__+0x50>
	} else {
		*left = 'x';
    184a:	98 e7       	ldi	r25, 0x78	; 120
    184c:	f8 01       	movw	r30, r16
    184e:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1850:	81 ff       	sbrs	r24, 1
    1852:	03 c0       	rjmp	.+6      	; 0x185a <__DATA_REGION_LENGTH__+0x5a>
		*air = '0';
    1854:	80 e3       	ldi	r24, 0x30	; 48
    1856:	88 83       	st	Y, r24
    1858:	02 c0       	rjmp	.+4      	; 0x185e <__DATA_REGION_LENGTH__+0x5e>
	} else {
		*air = '1';
    185a:	81 e3       	ldi	r24, 0x31	; 49
    185c:	88 83       	st	Y, r24
	}
}
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	0f 91       	pop	r16
    1866:	ff 90       	pop	r15
    1868:	ef 90       	pop	r14
    186a:	df 90       	pop	r13
    186c:	cf 90       	pop	r12
    186e:	08 95       	ret

00001870 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	d8 2f       	mov	r29, r24
    1876:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    1878:	69 e0       	ldi	r22, 0x09	; 9
    187a:	84 e2       	ldi	r24, 0x24	; 36
    187c:	0e 94 34 08 	call	0x1068	; 0x1068 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    1880:	8d 2b       	or	r24, r29
    1882:	48 2f       	mov	r20, r24
    1884:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1886:	6a e0       	ldi	r22, 0x0A	; 10
    1888:	84 e2       	ldi	r24, 0x24	; 36
    188a:	0e 94 4b 08 	call	0x1096	; 0x1096 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	08 95       	ret

00001894 <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(char mech)
{
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	6a 97       	sbiw	r28, 0x1a	; 26
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    18a2:	99 e0       	ldi	r25, 0x09	; 9
    18a4:	ef e3       	ldi	r30, 0x3F	; 63
    18a6:	f7 e8       	ldi	r31, 0x87	; 135
    18a8:	de 01       	movw	r26, r28
    18aa:	11 96       	adiw	r26, 0x01	; 1
    18ac:	01 90       	ld	r0, Z+
    18ae:	0d 92       	st	X+, r0
    18b0:	9a 95       	dec	r25
    18b2:	e1 f7       	brne	.-8      	; 0x18ac <close_PNEU+0x18>
	char outbuf[17];

	switch (mech) {
    18b4:	8c 36       	cpi	r24, 0x6C	; 108
    18b6:	31 f1       	breq	.+76     	; 0x1904 <close_PNEU+0x70>
    18b8:	18 f4       	brcc	.+6      	; 0x18c0 <close_PNEU+0x2c>
    18ba:	82 36       	cpi	r24, 0x62	; 98
    18bc:	39 f0       	breq	.+14     	; 0x18cc <close_PNEU+0x38>
    18be:	75 c0       	rjmp	.+234    	; 0x19aa <close_PNEU+0x116>
    18c0:	82 37       	cpi	r24, 0x72	; 114
    18c2:	c1 f1       	breq	.+112    	; 0x1934 <close_PNEU+0xa0>
    18c4:	83 37       	cpi	r24, 0x73	; 115
    18c6:	09 f4       	brne	.+2      	; 0x18ca <close_PNEU+0x36>
    18c8:	4d c0       	rjmp	.+154    	; 0x1964 <close_PNEU+0xd0>
    18ca:	6f c0       	rjmp	.+222    	; 0x19aa <close_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    18cc:	6a ee       	ldi	r22, 0xEA	; 234
    18ce:	84 e4       	ldi	r24, 0x44	; 68
    18d0:	0e 94 38 0c 	call	0x1870	; 0x1870 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    18d4:	66 ee       	ldi	r22, 0xE6	; 230
    18d6:	88 e8       	ldi	r24, 0x88	; 136
    18d8:	0e 94 38 0c 	call	0x1870	; 0x1870 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    18dc:	87 e2       	ldi	r24, 0x27	; 39
    18de:	97 e8       	ldi	r25, 0x87	; 135
    18e0:	9f 93       	push	r25
    18e2:	8f 93       	push	r24
    18e4:	ce 01       	movw	r24, r28
    18e6:	01 96       	adiw	r24, 0x01	; 1
    18e8:	9f 93       	push	r25
    18ea:	8f 93       	push	r24
    18ec:	09 96       	adiw	r24, 0x09	; 9
    18ee:	9f 93       	push	r25
    18f0:	8f 93       	push	r24
    18f2:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
			break;
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	47 c0       	rjmp	.+142    	; 0x1992 <close_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1904:	6a ee       	ldi	r22, 0xEA	; 234
    1906:	84 e4       	ldi	r24, 0x44	; 68
    1908:	0e 94 38 0c 	call	0x1870	; 0x1870 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    190c:	8c e2       	ldi	r24, 0x2C	; 44
    190e:	97 e8       	ldi	r25, 0x87	; 135
    1910:	9f 93       	push	r25
    1912:	8f 93       	push	r24
    1914:	ce 01       	movw	r24, r28
    1916:	01 96       	adiw	r24, 0x01	; 1
    1918:	9f 93       	push	r25
    191a:	8f 93       	push	r24
    191c:	09 96       	adiw	r24, 0x09	; 9
    191e:	9f 93       	push	r25
    1920:	8f 93       	push	r24
    1922:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
			break;
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	2f c0       	rjmp	.+94     	; 0x1992 <close_PNEU+0xfe>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1934:	66 ee       	ldi	r22, 0xE6	; 230
    1936:	88 e8       	ldi	r24, 0x88	; 136
    1938:	0e 94 38 0c 	call	0x1870	; 0x1870 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    193c:	81 e3       	ldi	r24, 0x31	; 49
    193e:	97 e8       	ldi	r25, 0x87	; 135
    1940:	9f 93       	push	r25
    1942:	8f 93       	push	r24
    1944:	ce 01       	movw	r24, r28
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	9f 93       	push	r25
    194a:	8f 93       	push	r24
    194c:	09 96       	adiw	r24, 0x09	; 9
    194e:	9f 93       	push	r25
    1950:	8f 93       	push	r24
    1952:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
			break;
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	17 c0       	rjmp	.+46     	; 0x1992 <close_PNEU+0xfe>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1964:	6c ee       	ldi	r22, 0xEC	; 236
    1966:	82 e2       	ldi	r24, 0x22	; 34
    1968:	0e 94 38 0c 	call	0x1870	; 0x1870 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    196c:	87 e3       	ldi	r24, 0x37	; 55
    196e:	97 e8       	ldi	r25, 0x87	; 135
    1970:	9f 93       	push	r25
    1972:	8f 93       	push	r24
    1974:	ce 01       	movw	r24, r28
    1976:	01 96       	adiw	r24, 0x01	; 1
    1978:	9f 93       	push	r25
    197a:	8f 93       	push	r24
    197c:	09 96       	adiw	r24, 0x09	; 9
    197e:	9f 93       	push	r25
    1980:	8f 93       	push	r24
    1982:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
			break;
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
			return(ERRORPROMPT);
			break;

	}

	clear_OLED(1);
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1998:	41 e0       	ldi	r20, 0x01	; 1
    199a:	be 01       	movw	r22, r28
    199c:	66 5f       	subi	r22, 0xF6	; 246
    199e:	7f 4f       	sbci	r23, 0xFF	; 255
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	0e 94 07 0b 	call	0x160e	; 0x160e <writestr_OLED>
	return(GREATERPROMPT);
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	01 c0       	rjmp	.+2      	; 0x19ac <close_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
			sprintf(outbuf, dformat_CLO, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    19aa:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    19ac:	6a 96       	adiw	r28, 0x1a	; 26
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	08 95       	ret

000019b8 <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(char mechanism)
{
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	69 97       	sbiw	r28, 0x19	; 25
    19c2:	cd bf       	out	0x3d, r28	; 61
    19c4:	de bf       	out	0x3e, r29	; 62


	const char dformat_OPE[] = "Open %s";
    19c6:	98 e0       	ldi	r25, 0x08	; 8
    19c8:	e8 e4       	ldi	r30, 0x48	; 72
    19ca:	f7 e8       	ldi	r31, 0x87	; 135
    19cc:	de 01       	movw	r26, r28
    19ce:	11 96       	adiw	r26, 0x01	; 1
    19d0:	01 90       	ld	r0, Z+
    19d2:	0d 92       	st	X+, r0
    19d4:	9a 95       	dec	r25
    19d6:	e1 f7       	brne	.-8      	; 0x19d0 <open_PNEU+0x18>
	char outbuf[17];

	switch (mechanism) {
    19d8:	8c 36       	cpi	r24, 0x6C	; 108
    19da:	31 f1       	breq	.+76     	; 0x1a28 <open_PNEU+0x70>
    19dc:	18 f4       	brcc	.+6      	; 0x19e4 <open_PNEU+0x2c>
    19de:	82 36       	cpi	r24, 0x62	; 98
    19e0:	39 f0       	breq	.+14     	; 0x19f0 <open_PNEU+0x38>
    19e2:	75 c0       	rjmp	.+234    	; 0x1ace <open_PNEU+0x116>
    19e4:	82 37       	cpi	r24, 0x72	; 114
    19e6:	c1 f1       	breq	.+112    	; 0x1a58 <open_PNEU+0xa0>
    19e8:	83 37       	cpi	r24, 0x73	; 115
    19ea:	09 f4       	brne	.+2      	; 0x19ee <open_PNEU+0x36>
    19ec:	4d c0       	rjmp	.+154    	; 0x1a88 <open_PNEU+0xd0>
    19ee:	6f c0       	rjmp	.+222    	; 0x1ace <open_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    19f0:	6e ea       	ldi	r22, 0xAE	; 174
    19f2:	84 e4       	ldi	r24, 0x44	; 68
    19f4:	0e 94 38 0c 	call	0x1870	; 0x1870 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    19f8:	6e e6       	ldi	r22, 0x6E	; 110
    19fa:	88 e8       	ldi	r24, 0x88	; 136
    19fc:	0e 94 38 0c 	call	0x1870	; 0x1870 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1a00:	87 e2       	ldi	r24, 0x27	; 39
    1a02:	97 e8       	ldi	r25, 0x87	; 135
    1a04:	9f 93       	push	r25
    1a06:	8f 93       	push	r24
    1a08:	ce 01       	movw	r24, r28
    1a0a:	01 96       	adiw	r24, 0x01	; 1
    1a0c:	9f 93       	push	r25
    1a0e:	8f 93       	push	r24
    1a10:	08 96       	adiw	r24, 0x08	; 8
    1a12:	9f 93       	push	r25
    1a14:	8f 93       	push	r24
    1a16:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
			break;
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	47 c0       	rjmp	.+142    	; 0x1ab6 <open_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1a28:	6e ea       	ldi	r22, 0xAE	; 174
    1a2a:	84 e4       	ldi	r24, 0x44	; 68
    1a2c:	0e 94 38 0c 	call	0x1870	; 0x1870 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1a30:	8c e2       	ldi	r24, 0x2C	; 44
    1a32:	97 e8       	ldi	r25, 0x87	; 135
    1a34:	9f 93       	push	r25
    1a36:	8f 93       	push	r24
    1a38:	ce 01       	movw	r24, r28
    1a3a:	01 96       	adiw	r24, 0x01	; 1
    1a3c:	9f 93       	push	r25
    1a3e:	8f 93       	push	r24
    1a40:	08 96       	adiw	r24, 0x08	; 8
    1a42:	9f 93       	push	r25
    1a44:	8f 93       	push	r24
    1a46:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
			break;
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	2f c0       	rjmp	.+94     	; 0x1ab6 <open_PNEU+0xfe>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1a58:	6e e6       	ldi	r22, 0x6E	; 110
    1a5a:	88 e8       	ldi	r24, 0x88	; 136
    1a5c:	0e 94 38 0c 	call	0x1870	; 0x1870 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1a60:	81 e3       	ldi	r24, 0x31	; 49
    1a62:	97 e8       	ldi	r25, 0x87	; 135
    1a64:	9f 93       	push	r25
    1a66:	8f 93       	push	r24
    1a68:	ce 01       	movw	r24, r28
    1a6a:	01 96       	adiw	r24, 0x01	; 1
    1a6c:	9f 93       	push	r25
    1a6e:	8f 93       	push	r24
    1a70:	08 96       	adiw	r24, 0x08	; 8
    1a72:	9f 93       	push	r25
    1a74:	8f 93       	push	r24
    1a76:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
			break;
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	17 c0       	rjmp	.+46     	; 0x1ab6 <open_PNEU+0xfe>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1a88:	6e ec       	ldi	r22, 0xCE	; 206
    1a8a:	82 e2       	ldi	r24, 0x22	; 34
    1a8c:	0e 94 38 0c 	call	0x1870	; 0x1870 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1a90:	87 e3       	ldi	r24, 0x37	; 55
    1a92:	97 e8       	ldi	r25, 0x87	; 135
    1a94:	9f 93       	push	r25
    1a96:	8f 93       	push	r24
    1a98:	ce 01       	movw	r24, r28
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	9f 93       	push	r25
    1a9e:	8f 93       	push	r24
    1aa0:	08 96       	adiw	r24, 0x08	; 8
    1aa2:	9f 93       	push	r25
    1aa4:	8f 93       	push	r24
    1aa6:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
			break;
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
		default:
			return(ERRORPROMPT);

	}

	clear_OLED(1);
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1abc:	41 e0       	ldi	r20, 0x01	; 1
    1abe:	be 01       	movw	r22, r28
    1ac0:	67 5f       	subi	r22, 0xF7	; 247
    1ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	0e 94 07 0b 	call	0x160e	; 0x160e <writestr_OLED>
	return(GREATERPROMPT);
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	01 c0       	rjmp	.+2      	; 0x1ad0 <open_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
			sprintf(outbuf, dformat_OPE, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    1ace:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    1ad0:	69 96       	adiw	r28, 0x19	; 25
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	08 95       	ret

00001adc <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1adc:	1f 92       	push	r1
    1ade:	0f 92       	push	r0
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	0f 92       	push	r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	2f 93       	push	r18
    1ae8:	3f 93       	push	r19
    1aea:	4f 93       	push	r20
    1aec:	5f 93       	push	r21
    1aee:	6f 93       	push	r22
    1af0:	7f 93       	push	r23
    1af2:	8f 93       	push	r24
    1af4:	9f 93       	push	r25
    1af6:	af 93       	push	r26
    1af8:	bf 93       	push	r27
    1afa:	ef 93       	push	r30
    1afc:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1afe:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1b02:	88 23       	and	r24, r24
    1b04:	4c f4       	brge	.+18     	; 0x1b18 <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1b06:	80 e8       	ldi	r24, 0x80	; 128
    1b08:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1b0c:	68 e0       	ldi	r22, 0x08	; 8
    1b0e:	81 e2       	ldi	r24, 0x21	; 33
    1b10:	0e 94 34 08 	call	0x1068	; 0x1068 <read_MCP23008>
    1b14:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <pneuState>
	}

}
    1b18:	ff 91       	pop	r31
    1b1a:	ef 91       	pop	r30
    1b1c:	bf 91       	pop	r27
    1b1e:	af 91       	pop	r26
    1b20:	9f 91       	pop	r25
    1b22:	8f 91       	pop	r24
    1b24:	7f 91       	pop	r23
    1b26:	6f 91       	pop	r22
    1b28:	5f 91       	pop	r21
    1b2a:	4f 91       	pop	r20
    1b2c:	3f 91       	pop	r19
    1b2e:	2f 91       	pop	r18
    1b30:	0f 90       	pop	r0
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	0f 90       	pop	r0
    1b36:	1f 90       	pop	r1
    1b38:	18 95       	reti

00001b3a <init_PORTS>:
	sure nothing lurks in the background by accident.
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
    1b3a:	e0 e0       	ldi	r30, 0x00	; 0
    1b3c:	f4 e0       	ldi	r31, 0x04	; 4
    1b3e:	88 e0       	ldi	r24, 0x08	; 8
    1b40:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
    1b42:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
    1b44:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
    1b46:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
    1b48:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    1b4a:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    1b4c:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
    1b4e:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
    1b50:	e0 e2       	ldi	r30, 0x20	; 32
    1b52:	f4 e0       	ldi	r31, 0x04	; 4
    1b54:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
    1b56:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
    1b58:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
    1b5a:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
    1b5c:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
    1b5e:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
    1b60:	e0 e4       	ldi	r30, 0x40	; 64
    1b62:	f4 e0       	ldi	r31, 0x04	; 4
    1b64:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
    1b66:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
    1b68:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
    1b6a:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
    1b6c:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
    1b6e:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
    1b70:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
    1b72:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b74:	e0 e6       	ldi	r30, 0x60	; 96
    1b76:	f4 e0       	ldi	r31, 0x04	; 4
    1b78:	94 e0       	ldi	r25, 0x04	; 4
    1b7a:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b7c:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b7e:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b80:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b82:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b84:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b86:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b88:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
    1b8a:	e0 e8       	ldi	r30, 0x80	; 128
    1b8c:	f4 e0       	ldi	r31, 0x04	; 4
    1b8e:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
    1b90:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
    1b92:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
    1b94:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
    1b96:	e0 ea       	ldi	r30, 0xA0	; 160
    1b98:	f4 e0       	ldi	r31, 0x04	; 4
    1b9a:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
    1b9c:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
    1b9e:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
    1ba0:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
    1ba2:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
    1ba4:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
    1ba6:	86 8b       	std	Z+22, r24	; 0x16
    1ba8:	08 95       	ret

00001baa <report>:
	Returns
		0 - GREATERPROMPT on success
		1 - ERRORPROMPT on error (invalid command noun)
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1baa:	2f 92       	push	r2
    1bac:	3f 92       	push	r3
    1bae:	4f 92       	push	r4
    1bb0:	5f 92       	push	r5
    1bb2:	6f 92       	push	r6
    1bb4:	7f 92       	push	r7
    1bb6:	8f 92       	push	r8
    1bb8:	9f 92       	push	r9
    1bba:	af 92       	push	r10
    1bbc:	bf 92       	push	r11
    1bbe:	cf 92       	push	r12
    1bc0:	df 92       	push	r13
    1bc2:	ef 92       	push	r14
    1bc4:	ff 92       	push	r15
    1bc6:	0f 93       	push	r16
    1bc8:	1f 93       	push	r17
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	c1 50       	subi	r28, 0x01	; 1
    1bd4:	d3 40       	sbci	r29, 0x03	; 3
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE+10], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "$S%dENV,%s,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%s";
    1bda:	92 e4       	ldi	r25, 0x42	; 66
    1bdc:	ee ea       	ldi	r30, 0xAE	; 174
    1bde:	f7 e8       	ldi	r31, 0x87	; 135
    1be0:	de 01       	movw	r26, r28
    1be2:	ab 5a       	subi	r26, 0xAB	; 171
    1be4:	be 4f       	sbci	r27, 0xFE	; 254
    1be6:	01 90       	ld	r0, Z+
    1be8:	0d 92       	st	X+, r0
    1bea:	9a 95       	dec	r25
    1bec:	e1 f7       	brne	.-8      	; 0x1be6 <report+0x3c>
	const char format_MTR[] = "$S%dMTR,%s,%c,%ld,microns,%ld,microns/sec,%d,mA,%s";
    1bee:	93 e3       	ldi	r25, 0x33	; 51
    1bf0:	e0 ef       	ldi	r30, 0xF0	; 240
    1bf2:	f7 e8       	ldi	r31, 0x87	; 135
    1bf4:	de 01       	movw	r26, r28
    1bf6:	a9 56       	subi	r26, 0x69	; 105
    1bf8:	be 4f       	sbci	r27, 0xFE	; 254
    1bfa:	01 90       	ld	r0, Z+
    1bfc:	0d 92       	st	X+, r0
    1bfe:	9a 95       	dec	r25
    1c00:	e1 f7       	brne	.-8      	; 0x1bfa <report+0x50>
	const char format1_MTR[] = "$S%dMTR,%s,%c,%3.1f,V,%3.1f,C,%s";
    1c02:	91 e2       	ldi	r25, 0x21	; 33
    1c04:	e3 e2       	ldi	r30, 0x23	; 35
    1c06:	f8 e8       	ldi	r31, 0x88	; 136
    1c08:	de 01       	movw	r26, r28
    1c0a:	a6 53       	subi	r26, 0x36	; 54
    1c0c:	be 4f       	sbci	r27, 0xFE	; 254
    1c0e:	01 90       	ld	r0, Z+
    1c10:	0d 92       	st	X+, r0
    1c12:	9a 95       	dec	r25
    1c14:	e1 f7       	brne	.-8      	; 0x1c0e <report+0x64>
	const char format_ORI[] = "$S%dORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1c16:	90 e2       	ldi	r25, 0x20	; 32
    1c18:	e4 e4       	ldi	r30, 0x44	; 68
    1c1a:	f8 e8       	ldi	r31, 0x88	; 136
    1c1c:	de 01       	movw	r26, r28
    1c1e:	a5 51       	subi	r26, 0x15	; 21
    1c20:	be 4f       	sbci	r27, 0xFE	; 254
    1c22:	01 90       	ld	r0, Z+
    1c24:	0d 92       	st	X+, r0
    1c26:	9a 95       	dec	r25
    1c28:	e1 f7       	brne	.-8      	; 0x1c22 <report+0x78>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1c2a:	92 e1       	ldi	r25, 0x12	; 18
    1c2c:	e4 e6       	ldi	r30, 0x64	; 100
    1c2e:	f8 e8       	ldi	r31, 0x88	; 136
    1c30:	de 01       	movw	r26, r28
    1c32:	a5 5f       	subi	r26, 0xF5	; 245
    1c34:	bd 4f       	sbci	r27, 0xFD	; 253
    1c36:	01 90       	ld	r0, Z+
    1c38:	0d 92       	st	X+, r0
    1c3a:	9a 95       	dec	r25
    1c3c:	e1 f7       	brne	.-8      	; 0x1c36 <report+0x8c>
	const char format_PNU[] = "$S%dPNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1c3e:	91 e3       	ldi	r25, 0x31	; 49
    1c40:	e6 e7       	ldi	r30, 0x76	; 118
    1c42:	f8 e8       	ldi	r31, 0x88	; 136
    1c44:	de 01       	movw	r26, r28
    1c46:	a3 5e       	subi	r26, 0xE3	; 227
    1c48:	bd 4f       	sbci	r27, 0xFD	; 253
    1c4a:	01 90       	ld	r0, Z+
    1c4c:	0d 92       	st	X+, r0
    1c4e:	9a 95       	dec	r25
    1c50:	e1 f7       	brne	.-8      	; 0x1c4a <report+0xa0>
	const char dformat_PN1[] = "left:%c   right:%c";
    1c52:	93 e1       	ldi	r25, 0x13	; 19
    1c54:	e7 ea       	ldi	r30, 0xA7	; 167
    1c56:	f8 e8       	ldi	r31, 0x88	; 136
    1c58:	de 01       	movw	r26, r28
    1c5a:	a2 5b       	subi	r26, 0xB2	; 178
    1c5c:	bd 4f       	sbci	r27, 0xFD	; 253
    1c5e:	01 90       	ld	r0, Z+
    1c60:	0d 92       	st	X+, r0
    1c62:	9a 95       	dec	r25
    1c64:	e1 f7       	brne	.-8      	; 0x1c5e <report+0xb4>
	const char dformat_PN2[] = "shutter:%c  air:%c";
    1c66:	93 e1       	ldi	r25, 0x13	; 19
    1c68:	ea eb       	ldi	r30, 0xBA	; 186
    1c6a:	f8 e8       	ldi	r31, 0x88	; 136
    1c6c:	de 01       	movw	r26, r28
    1c6e:	af 59       	subi	r26, 0x9F	; 159
    1c70:	bd 4f       	sbci	r27, 0xFD	; 253
    1c72:	01 90       	ld	r0, Z+
    1c74:	0d 92       	st	X+, r0
    1c76:	9a 95       	dec	r25
    1c78:	e1 f7       	brne	.-8      	; 0x1c72 <report+0xc8>
	const char format_TIM[] = "$S%dTIM,%s,%s,set,%s,boot,%s";
    1c7a:	9d e1       	ldi	r25, 0x1D	; 29
    1c7c:	ed ec       	ldi	r30, 0xCD	; 205
    1c7e:	f8 e8       	ldi	r31, 0x88	; 136
    1c80:	de 01       	movw	r26, r28
    1c82:	ac 58       	subi	r26, 0x8C	; 140
    1c84:	bd 4f       	sbci	r27, 0xFD	; 253
    1c86:	01 90       	ld	r0, Z+
    1c88:	0d 92       	st	X+, r0
    1c8a:	9a 95       	dec	r25
    1c8c:	e1 f7       	brne	.-8      	; 0x1c86 <report+0xdc>
	const char format_VAC[] = "$S%dVAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1c8e:	99 e2       	ldi	r25, 0x29	; 41
    1c90:	ea ee       	ldi	r30, 0xEA	; 234
    1c92:	f8 e8       	ldi	r31, 0x88	; 136
    1c94:	de 01       	movw	r26, r28
    1c96:	af 56       	subi	r26, 0x6F	; 111
    1c98:	bd 4f       	sbci	r27, 0xFD	; 253
    1c9a:	01 90       	ld	r0, Z+
    1c9c:	0d 92       	st	X+, r0
    1c9e:	9a 95       	dec	r25
    1ca0:	e1 f7       	brne	.-8      	; 0x1c9a <report+0xf0>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1ca2:	9d e0       	ldi	r25, 0x0D	; 13
    1ca4:	e3 e1       	ldi	r30, 0x13	; 19
    1ca6:	f9 e8       	ldi	r31, 0x89	; 137
    1ca8:	de 01       	movw	r26, r28
    1caa:	a6 54       	subi	r26, 0x46	; 70
    1cac:	bd 4f       	sbci	r27, 0xFD	; 253
    1cae:	01 90       	ld	r0, Z+
    1cb0:	0d 92       	st	X+, r0
    1cb2:	9a 95       	dec	r25
    1cb4:	e1 f7       	brne	.-8      	; 0x1cae <report+0x104>
	const char format_VER[] = "$S%dVER,%s,%s,%s";
    1cb6:	91 e1       	ldi	r25, 0x11	; 17
    1cb8:	e0 e2       	ldi	r30, 0x20	; 32
    1cba:	f9 e8       	ldi	r31, 0x89	; 137
    1cbc:	de 01       	movw	r26, r28
    1cbe:	a9 53       	subi	r26, 0x39	; 57
    1cc0:	bd 4f       	sbci	r27, 0xFD	; 253
    1cc2:	01 90       	ld	r0, Z+
    1cc4:	0d 92       	st	X+, r0
    1cc6:	9a 95       	dec	r25
    1cc8:	e1 f7       	brne	.-8      	; 0x1cc2 <report+0x118>
	float voltage;							// voltage
	uint16_t current;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum

	switch(pcmd[cstack].cobject) {
    1cca:	08 2f       	mov	r16, r24
    1ccc:	10 e0       	ldi	r17, 0x00	; 0
    1cce:	84 e3       	ldi	r24, 0x34	; 52
    1cd0:	80 9f       	mul	r24, r16
    1cd2:	f0 01       	movw	r30, r0
    1cd4:	81 9f       	mul	r24, r17
    1cd6:	f0 0d       	add	r31, r0
    1cd8:	11 24       	eor	r1, r1
    1cda:	ed 5f       	subi	r30, 0xFD	; 253
    1cdc:	f7 4d       	sbci	r31, 0xD7	; 215
    1cde:	e1 81       	ldd	r30, Z+1	; 0x01
    1ce0:	8e 2f       	mov	r24, r30
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	e1 54       	subi	r30, 0x41	; 65
    1ce8:	f1 09       	sbc	r31, r1
    1cea:	e6 33       	cpi	r30, 0x36	; 54
    1cec:	f1 05       	cpc	r31, r1
    1cee:	08 f0       	brcs	.+2      	; 0x1cf2 <report+0x148>
    1cf0:	69 c5       	rjmp	.+2770   	; 0x27c4 <report+0xc1a>
    1cf2:	ed 58       	subi	r30, 0x8D	; 141
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	0c 94 91 20 	jmp	0x4122	; 0x4122 <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    1cfa:	ce 01       	movw	r24, r28
    1cfc:	8b 5e       	subi	r24, 0xEB	; 235
    1cfe:	9e 4f       	sbci	r25, 0xFE	; 254
    1d00:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_time>
			controller = pcmd[cstack].cobject + 63;
    1d04:	84 e3       	ldi	r24, 0x34	; 52
    1d06:	80 9f       	mul	r24, r16
    1d08:	f0 01       	movw	r30, r0
    1d0a:	81 9f       	mul	r24, r17
    1d0c:	f0 0d       	add	r31, r0
    1d0e:	11 24       	eor	r1, r1
    1d10:	ed 5f       	subi	r30, 0xFD	; 253
    1d12:	f7 4d       	sbci	r31, 0xD7	; 215
    1d14:	e1 80       	ldd	r14, Z+1	; 0x01
    1d16:	0f 2e       	mov	r0, r31
    1d18:	ff e3       	ldi	r31, 0x3F	; 63
    1d1a:	ff 2e       	mov	r15, r31
    1d1c:	f0 2d       	mov	r31, r0
    1d1e:	fe 0c       	add	r15, r14
			retval = get_ROBOFloat(controller, ROBOREADMAINVOLTAGE, &voltage);
    1d20:	ae 01       	movw	r20, r28
    1d22:	48 51       	subi	r20, 0x18	; 24
    1d24:	5d 4f       	sbci	r21, 0xFD	; 253
    1d26:	68 e1       	ldi	r22, 0x18	; 24
    1d28:	8f 2d       	mov	r24, r15
    1d2a:	0e 94 f6 15 	call	0x2bec	; 0x2bec <get_ROBOFloat>
			if (retval == ERROR) {
    1d2e:	83 36       	cpi	r24, 0x63	; 99
    1d30:	61 f4       	brne	.+24     	; 0x1d4a <report+0x1a0>
				voltage = -666.0;
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e8       	ldi	r25, 0x80	; 128
    1d36:	a6 e2       	ldi	r26, 0x26	; 38
    1d38:	b4 ec       	ldi	r27, 0xC4	; 196
    1d3a:	c8 51       	subi	r28, 0x18	; 24
    1d3c:	dd 4f       	sbci	r29, 0xFD	; 253
    1d3e:	88 83       	st	Y, r24
    1d40:	99 83       	std	Y+1, r25	; 0x01
    1d42:	aa 83       	std	Y+2, r26	; 0x02
    1d44:	bb 83       	std	Y+3, r27	; 0x03
    1d46:	c8 5e       	subi	r28, 0xE8	; 232
    1d48:	d2 40       	sbci	r29, 0x02	; 2
			}
			retval = get_ROBOFloat(controller, ROBOREADTEMPERATURE, &t0);
    1d4a:	ae 01       	movw	r20, r28
    1d4c:	4c 51       	subi	r20, 0x1C	; 28
    1d4e:	5d 4f       	sbci	r21, 0xFD	; 253
    1d50:	62 e5       	ldi	r22, 0x52	; 82
    1d52:	8f 2d       	mov	r24, r15
    1d54:	0e 94 f6 15 	call	0x2bec	; 0x2bec <get_ROBOFloat>
			if (retval == ERROR) {
    1d58:	83 36       	cpi	r24, 0x63	; 99
    1d5a:	61 f4       	brne	.+24     	; 0x1d74 <report+0x1ca>
				t0 = -666.0;
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e8       	ldi	r25, 0x80	; 128
    1d60:	a6 e2       	ldi	r26, 0x26	; 38
    1d62:	b4 ec       	ldi	r27, 0xC4	; 196
    1d64:	cc 51       	subi	r28, 0x1C	; 28
    1d66:	dd 4f       	sbci	r29, 0xFD	; 253
    1d68:	88 83       	st	Y, r24
    1d6a:	99 83       	std	Y+1, r25	; 0x01
    1d6c:	aa 83       	std	Y+2, r26	; 0x02
    1d6e:	bb 83       	std	Y+3, r27	; 0x03
    1d70:	c4 5e       	subi	r28, 0xE4	; 228
    1d72:	d2 40       	sbci	r29, 0x02	; 2
			}
			sprintf(outbuf, format1_MTR, get_SPECID, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
    1d74:	24 e3       	ldi	r18, 0x34	; 52
    1d76:	20 9f       	mul	r18, r16
    1d78:	c0 01       	movw	r24, r0
    1d7a:	21 9f       	mul	r18, r17
    1d7c:	90 0d       	add	r25, r0
    1d7e:	11 24       	eor	r1, r1
    1d80:	82 5d       	subi	r24, 0xD2	; 210
    1d82:	97 4d       	sbci	r25, 0xD7	; 215
			}
			retval = get_ROBOFloat(controller, ROBOREADTEMPERATURE, &t0);
			if (retval == ERROR) {
				t0 = -666.0;
			}
			sprintf(outbuf, format1_MTR, get_SPECID, currenttime, (char) (controller-63),
    1d84:	cc 51       	subi	r28, 0x1C	; 28
    1d86:	dd 4f       	sbci	r29, 0xFD	; 253
    1d88:	68 81       	ld	r22, Y
    1d8a:	c4 5e       	subi	r28, 0xE4	; 228
    1d8c:	d2 40       	sbci	r29, 0x02	; 2
    1d8e:	cb 51       	subi	r28, 0x1B	; 27
    1d90:	dd 4f       	sbci	r29, 0xFD	; 253
    1d92:	78 81       	ld	r23, Y
    1d94:	c5 5e       	subi	r28, 0xE5	; 229
    1d96:	d2 40       	sbci	r29, 0x02	; 2
    1d98:	ca 51       	subi	r28, 0x1A	; 26
    1d9a:	dd 4f       	sbci	r29, 0xFD	; 253
    1d9c:	e8 81       	ld	r30, Y
    1d9e:	c6 5e       	subi	r28, 0xE6	; 230
    1da0:	d2 40       	sbci	r29, 0x02	; 2
    1da2:	c9 51       	subi	r28, 0x19	; 25
    1da4:	dd 4f       	sbci	r29, 0xFD	; 253
    1da6:	f8 81       	ld	r31, Y
    1da8:	c7 5e       	subi	r28, 0xE7	; 231
    1daa:	d2 40       	sbci	r29, 0x02	; 2
    1dac:	c8 51       	subi	r28, 0x18	; 24
    1dae:	dd 4f       	sbci	r29, 0xFD	; 253
    1db0:	28 81       	ld	r18, Y
    1db2:	c8 5e       	subi	r28, 0xE8	; 232
    1db4:	d2 40       	sbci	r29, 0x02	; 2
    1db6:	c7 51       	subi	r28, 0x17	; 23
    1db8:	dd 4f       	sbci	r29, 0xFD	; 253
    1dba:	38 81       	ld	r19, Y
    1dbc:	c9 5e       	subi	r28, 0xE9	; 233
    1dbe:	d2 40       	sbci	r29, 0x02	; 2
    1dc0:	c6 51       	subi	r28, 0x16	; 22
    1dc2:	dd 4f       	sbci	r29, 0xFD	; 253
    1dc4:	48 81       	ld	r20, Y
    1dc6:	ca 5e       	subi	r28, 0xEA	; 234
    1dc8:	d2 40       	sbci	r29, 0x02	; 2
    1dca:	c5 51       	subi	r28, 0x15	; 21
    1dcc:	dd 4f       	sbci	r29, 0xFD	; 253
    1dce:	58 81       	ld	r21, Y
    1dd0:	cb 5e       	subi	r28, 0xEB	; 235
    1dd2:	d2 40       	sbci	r29, 0x02	; 2
    1dd4:	a0 91 a8 04 	lds	r26, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1dd8:	a2 ff       	sbrs	r26, 2
    1dda:	03 c0       	rjmp	.+6      	; 0x1de2 <report+0x238>
    1ddc:	a2 e0       	ldi	r26, 0x02	; 2
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <report+0x23c>
    1de2:	a1 e0       	ldi	r26, 0x01	; 1
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	9f 93       	push	r25
    1de8:	8f 93       	push	r24
    1dea:	ff 93       	push	r31
    1dec:	ef 93       	push	r30
    1dee:	7f 93       	push	r23
    1df0:	6f 93       	push	r22
    1df2:	5f 93       	push	r21
    1df4:	4f 93       	push	r20
    1df6:	3f 93       	push	r19
    1df8:	2f 93       	push	r18
    1dfa:	1f 92       	push	r1
    1dfc:	ef 92       	push	r14
    1dfe:	ce 01       	movw	r24, r28
    1e00:	8b 5e       	subi	r24, 0xEB	; 235
    1e02:	9e 4f       	sbci	r25, 0xFE	; 254
    1e04:	9f 93       	push	r25
    1e06:	8f 93       	push	r24
    1e08:	bf 93       	push	r27
    1e0a:	af 93       	push	r26
    1e0c:	8b 54       	subi	r24, 0x4B	; 75
    1e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e10:	9f 93       	push	r25
    1e12:	8f 93       	push	r24
    1e14:	8e 01       	movw	r16, r28
    1e16:	0f 5f       	subi	r16, 0xFF	; 255
    1e18:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1a:	1f 93       	push	r17
    1e1c:	0f 93       	push	r16
    1e1e:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
				voltage, t0, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    1e22:	c8 01       	movw	r24, r16
    1e24:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1e28:	f8 01       	movw	r30, r16
    1e2a:	01 90       	ld	r0, Z+
    1e2c:	00 20       	and	r0, r0
    1e2e:	e9 f7       	brne	.-6      	; 0x1e2a <report+0x280>
    1e30:	31 97       	sbiw	r30, 0x01	; 1
    1e32:	af 01       	movw	r20, r30
    1e34:	40 1b       	sub	r20, r16
    1e36:	51 0b       	sbc	r21, r17
    1e38:	b8 01       	movw	r22, r16
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>
			break;
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	c5 c4       	rjmp	.+2442   	; 0x27d0 <report+0xc26>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    1e46:	ce 01       	movw	r24, r28
    1e48:	8b 5e       	subi	r24, 0xEB	; 235
    1e4a:	9e 4f       	sbci	r25, 0xFE	; 254
    1e4c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_time>
			controller = pcmd[cstack].cobject + 31;
    1e50:	84 e3       	ldi	r24, 0x34	; 52
    1e52:	80 9f       	mul	r24, r16
    1e54:	f0 01       	movw	r30, r0
    1e56:	81 9f       	mul	r24, r17
    1e58:	f0 0d       	add	r31, r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	ed 5f       	subi	r30, 0xFD	; 253
    1e5e:	f7 4d       	sbci	r31, 0xD7	; 215
    1e60:	81 81       	ldd	r24, Z+1	; 0x01
    1e62:	0f 2e       	mov	r0, r31
    1e64:	ff e1       	ldi	r31, 0x1F	; 31
    1e66:	7f 2e       	mov	r7, r31
    1e68:	f0 2d       	mov	r31, r0
    1e6a:	78 0e       	add	r7, r24
			retval = get_ROBOEncoder(controller, ROBOREADENCODERCOUNT, &encoderValue);
    1e6c:	ae 01       	movw	r20, r28
    1e6e:	48 52       	subi	r20, 0x28	; 40
    1e70:	5d 4f       	sbci	r21, 0xFD	; 253
    1e72:	60 e1       	ldi	r22, 0x10	; 16
    1e74:	87 2d       	mov	r24, r7
    1e76:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <get_ROBOEncoder>
			if (retval == ERROR) {
    1e7a:	83 36       	cpi	r24, 0x63	; 99
    1e7c:	61 f4       	brne	.+24     	; 0x1e96 <report+0x2ec>
				encoderValue = 0x7FFFFFFF;
    1e7e:	8f ef       	ldi	r24, 0xFF	; 255
    1e80:	9f ef       	ldi	r25, 0xFF	; 255
    1e82:	af ef       	ldi	r26, 0xFF	; 255
    1e84:	bf e7       	ldi	r27, 0x7F	; 127
    1e86:	c8 52       	subi	r28, 0x28	; 40
    1e88:	dd 4f       	sbci	r29, 0xFD	; 253
    1e8a:	88 83       	st	Y, r24
    1e8c:	99 83       	std	Y+1, r25	; 0x01
    1e8e:	aa 83       	std	Y+2, r26	; 0x02
    1e90:	bb 83       	std	Y+3, r27	; 0x03
    1e92:	c8 5d       	subi	r28, 0xD8	; 216
    1e94:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronValue = encoderValue/ROBOCOUNTSPERMICRON;
    1e96:	c8 52       	subi	r28, 0x28	; 40
    1e98:	dd 4f       	sbci	r29, 0xFD	; 253
    1e9a:	68 81       	ld	r22, Y
    1e9c:	79 81       	ldd	r23, Y+1	; 0x01
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea2:	c8 5d       	subi	r28, 0xD8	; 216
    1ea4:	d2 40       	sbci	r29, 0x02	; 2
    1ea6:	2c e0       	ldi	r18, 0x0C	; 12
    1ea8:	31 e0       	ldi	r19, 0x01	; 1
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	50 e0       	ldi	r21, 0x00	; 0
    1eae:	0e 94 72 20 	call	0x40e4	; 0x40e4 <__divmodsi4>
    1eb2:	f2 2e       	mov	r15, r18
    1eb4:	e3 2e       	mov	r14, r19
    1eb6:	d4 2e       	mov	r13, r20
    1eb8:	c5 2e       	mov	r12, r21
			retval = get_ROBOEncoder(controller, ROBOREADENCODERSPEED, &encoderSpeed);
    1eba:	ae 01       	movw	r20, r28
    1ebc:	44 52       	subi	r20, 0x24	; 36
    1ebe:	5d 4f       	sbci	r21, 0xFD	; 253
    1ec0:	62 e1       	ldi	r22, 0x12	; 18
    1ec2:	87 2d       	mov	r24, r7
    1ec4:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <get_ROBOEncoder>
			if (retval == ERROR) {
    1ec8:	83 36       	cpi	r24, 0x63	; 99
    1eca:	61 f4       	brne	.+24     	; 0x1ee4 <report+0x33a>
				encoderSpeed = 0x7FFFFFFF;
    1ecc:	8f ef       	ldi	r24, 0xFF	; 255
    1ece:	9f ef       	ldi	r25, 0xFF	; 255
    1ed0:	af ef       	ldi	r26, 0xFF	; 255
    1ed2:	bf e7       	ldi	r27, 0x7F	; 127
    1ed4:	c4 52       	subi	r28, 0x24	; 36
    1ed6:	dd 4f       	sbci	r29, 0xFD	; 253
    1ed8:	88 83       	st	Y, r24
    1eda:	99 83       	std	Y+1, r25	; 0x01
    1edc:	aa 83       	std	Y+2, r26	; 0x02
    1ede:	bb 83       	std	Y+3, r27	; 0x03
    1ee0:	cc 5d       	subi	r28, 0xDC	; 220
    1ee2:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronSpeed = encoderSpeed/ROBOCOUNTSPERMICRON;			
    1ee4:	c4 52       	subi	r28, 0x24	; 36
    1ee6:	dd 4f       	sbci	r29, 0xFD	; 253
    1ee8:	68 81       	ld	r22, Y
    1eea:	79 81       	ldd	r23, Y+1	; 0x01
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef0:	cc 5d       	subi	r28, 0xDC	; 220
    1ef2:	d2 40       	sbci	r29, 0x02	; 2
    1ef4:	2c e0       	ldi	r18, 0x0C	; 12
    1ef6:	31 e0       	ldi	r19, 0x01	; 1
    1ef8:	40 e0       	ldi	r20, 0x00	; 0
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	0e 94 72 20 	call	0x40e4	; 0x40e4 <__divmodsi4>
    1f00:	b2 2e       	mov	r11, r18
    1f02:	a3 2e       	mov	r10, r19
    1f04:	94 2e       	mov	r9, r20
    1f06:	85 2e       	mov	r8, r21
			retval = get_ROBOInt32(controller, ROBOREADCURRENT, &icurrents);
    1f08:	ae 01       	movw	r20, r28
    1f0a:	40 52       	subi	r20, 0x20	; 32
    1f0c:	5d 4f       	sbci	r21, 0xFD	; 253
    1f0e:	61 e3       	ldi	r22, 0x31	; 49
    1f10:	87 2d       	mov	r24, r7
    1f12:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <get_ROBOInt32>
			if (retval == ERROR) {
    1f16:	83 36       	cpi	r24, 0x63	; 99
    1f18:	61 f4       	brne	.+24     	; 0x1f32 <report+0x388>
				icurrents = 0x7FFFFFFF;
    1f1a:	8f ef       	ldi	r24, 0xFF	; 255
    1f1c:	9f ef       	ldi	r25, 0xFF	; 255
    1f1e:	af ef       	ldi	r26, 0xFF	; 255
    1f20:	bf e7       	ldi	r27, 0x7F	; 127
    1f22:	c0 52       	subi	r28, 0x20	; 32
    1f24:	dd 4f       	sbci	r29, 0xFD	; 253
    1f26:	88 83       	st	Y, r24
    1f28:	99 83       	std	Y+1, r25	; 0x01
    1f2a:	aa 83       	std	Y+2, r26	; 0x02
    1f2c:	bb 83       	std	Y+3, r27	; 0x03
    1f2e:	c0 5e       	subi	r28, 0xE0	; 224
    1f30:	d2 40       	sbci	r29, 0x02	; 2
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
    1f32:	c0 52       	subi	r28, 0x20	; 32
    1f34:	dd 4f       	sbci	r29, 0xFD	; 253
    1f36:	88 81       	ld	r24, Y
    1f38:	99 81       	ldd	r25, Y+1	; 0x01
    1f3a:	aa 81       	ldd	r26, Y+2	; 0x02
    1f3c:	bb 81       	ldd	r27, Y+3	; 0x03
    1f3e:	c0 5e       	subi	r28, 0xE0	; 224
    1f40:	d2 40       	sbci	r29, 0x02	; 2
    1f42:	cd 01       	movw	r24, r26
    1f44:	aa 27       	eor	r26, r26
    1f46:	bb 27       	eor	r27, r27
    1f48:	9c 01       	movw	r18, r24
    1f4a:	22 0f       	add	r18, r18
    1f4c:	33 1f       	adc	r19, r19
    1f4e:	88 0f       	add	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	82 0f       	add	r24, r18
    1f5c:	93 1f       	adc	r25, r19
			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, current, pcmd[cstack].cid);
    1f5e:	44 e3       	ldi	r20, 0x34	; 52
    1f60:	40 9f       	mul	r20, r16
    1f62:	90 01       	movw	r18, r0
    1f64:	41 9f       	mul	r20, r17
    1f66:	30 0d       	add	r19, r0
    1f68:	11 24       	eor	r1, r1
    1f6a:	a9 01       	movw	r20, r18
    1f6c:	42 5d       	subi	r20, 0xD2	; 210
    1f6e:	57 4d       	sbci	r21, 0xD7	; 215
			retval = get_ROBOInt32(controller, ROBOREADCURRENT, &icurrents);
			if (retval == ERROR) {
				icurrents = 0x7FFFFFFF;
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
    1f70:	f9 01       	movw	r30, r18
    1f72:	ed 5f       	subi	r30, 0xFD	; 253
    1f74:	f7 4d       	sbci	r31, 0xD7	; 215
    1f76:	21 81       	ldd	r18, Z+1	; 0x01
    1f78:	30 91 a8 04 	lds	r19, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1f7c:	32 ff       	sbrs	r19, 2
    1f7e:	03 c0       	rjmp	.+6      	; 0x1f86 <report+0x3dc>
    1f80:	32 e0       	ldi	r19, 0x02	; 2
    1f82:	60 e0       	ldi	r22, 0x00	; 0
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <report+0x3e0>
    1f86:	31 e0       	ldi	r19, 0x01	; 1
    1f88:	60 e0       	ldi	r22, 0x00	; 0
    1f8a:	5f 93       	push	r21
    1f8c:	4f 93       	push	r20
    1f8e:	9f 93       	push	r25
    1f90:	8f 93       	push	r24
    1f92:	8f 92       	push	r8
    1f94:	9f 92       	push	r9
    1f96:	af 92       	push	r10
    1f98:	bf 92       	push	r11
    1f9a:	cf 92       	push	r12
    1f9c:	df 92       	push	r13
    1f9e:	ef 92       	push	r14
    1fa0:	ff 92       	push	r15
    1fa2:	1f 92       	push	r1
    1fa4:	2f 93       	push	r18
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	8b 5e       	subi	r24, 0xEB	; 235
    1faa:	9e 4f       	sbci	r25, 0xFE	; 254
    1fac:	9f 93       	push	r25
    1fae:	8f 93       	push	r24
    1fb0:	6f 93       	push	r22
    1fb2:	3f 93       	push	r19
    1fb4:	8e 57       	subi	r24, 0x7E	; 126
    1fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb8:	9f 93       	push	r25
    1fba:	8f 93       	push	r24
    1fbc:	8e 01       	movw	r16, r28
    1fbe:	0f 5f       	subi	r16, 0xFF	; 255
    1fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc2:	1f 93       	push	r17
    1fc4:	0f 93       	push	r16
    1fc6:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
				micronValue, micronSpeed, current, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    1fca:	c8 01       	movw	r24, r16
    1fcc:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1fd0:	f8 01       	movw	r30, r16
    1fd2:	01 90       	ld	r0, Z+
    1fd4:	00 20       	and	r0, r0
    1fd6:	e9 f7       	brne	.-6      	; 0x1fd2 <report+0x428>
    1fd8:	31 97       	sbiw	r30, 0x01	; 1
    1fda:	af 01       	movw	r20, r30
    1fdc:	40 1b       	sub	r20, r16
    1fde:	51 0b       	sbc	r21, r17
    1fe0:	b8 01       	movw	r22, r16
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>
			break;
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	f1 c3       	rjmp	.+2018   	; 0x27d0 <report+0xc26>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <get_temperature>
    1ff4:	cc 51       	subi	r28, 0x1C	; 28
    1ff6:	dd 4f       	sbci	r29, 0xFD	; 253
    1ff8:	68 83       	st	Y, r22
    1ffa:	79 83       	std	Y+1, r23	; 0x01
    1ffc:	8a 83       	std	Y+2, r24	; 0x02
    1ffe:	9b 83       	std	Y+3, r25	; 0x03
    2000:	c4 5e       	subi	r28, 0xE4	; 228
    2002:	d2 40       	sbci	r29, 0x02	; 2
			h0 = get_humidity(0);
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <get_humidity>
    200a:	f6 2e       	mov	r15, r22
    200c:	e7 2e       	mov	r14, r23
    200e:	d8 2e       	mov	r13, r24
    2010:	c9 2e       	mov	r12, r25
			t1 = get_temperature(1);
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <get_temperature>
    2018:	c8 50       	subi	r28, 0x08	; 8
    201a:	dd 4f       	sbci	r29, 0xFD	; 253
    201c:	68 83       	st	Y, r22
    201e:	c8 5f       	subi	r28, 0xF8	; 248
    2020:	d2 40       	sbci	r29, 0x02	; 2
    2022:	c7 50       	subi	r28, 0x07	; 7
    2024:	dd 4f       	sbci	r29, 0xFD	; 253
    2026:	78 83       	st	Y, r23
    2028:	c9 5f       	subi	r28, 0xF9	; 249
    202a:	d2 40       	sbci	r29, 0x02	; 2
    202c:	c6 50       	subi	r28, 0x06	; 6
    202e:	dd 4f       	sbci	r29, 0xFD	; 253
    2030:	88 83       	st	Y, r24
    2032:	ca 5f       	subi	r28, 0xFA	; 250
    2034:	d2 40       	sbci	r29, 0x02	; 2
    2036:	c5 50       	subi	r28, 0x05	; 5
    2038:	dd 4f       	sbci	r29, 0xFD	; 253
    203a:	98 83       	st	Y, r25
    203c:	cb 5f       	subi	r28, 0xFB	; 251
    203e:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <get_humidity>
    2046:	c4 50       	subi	r28, 0x04	; 4
    2048:	dd 4f       	sbci	r29, 0xFD	; 253
    204a:	68 83       	st	Y, r22
    204c:	cc 5f       	subi	r28, 0xFC	; 252
    204e:	d2 40       	sbci	r29, 0x02	; 2
    2050:	c3 50       	subi	r28, 0x03	; 3
    2052:	dd 4f       	sbci	r29, 0xFD	; 253
    2054:	78 83       	st	Y, r23
    2056:	cd 5f       	subi	r28, 0xFD	; 253
    2058:	d2 40       	sbci	r29, 0x02	; 2
    205a:	c2 50       	subi	r28, 0x02	; 2
    205c:	dd 4f       	sbci	r29, 0xFD	; 253
    205e:	88 83       	st	Y, r24
    2060:	ce 5f       	subi	r28, 0xFE	; 254
    2062:	d2 40       	sbci	r29, 0x02	; 2
    2064:	c1 50       	subi	r28, 0x01	; 1
    2066:	dd 4f       	sbci	r29, 0xFD	; 253
    2068:	98 83       	st	Y, r25
    206a:	cf 5f       	subi	r28, 0xFF	; 255
    206c:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <get_temperature>
    2074:	b6 2e       	mov	r11, r22
    2076:	a7 2e       	mov	r10, r23
    2078:	98 2e       	mov	r9, r24
    207a:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    207c:	82 e0       	ldi	r24, 0x02	; 2
    207e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <get_humidity>
    2082:	76 2e       	mov	r7, r22
    2084:	67 2e       	mov	r6, r23
    2086:	58 2e       	mov	r5, r24
    2088:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    208a:	83 e0       	ldi	r24, 0x03	; 3
    208c:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <get_temperature>
    2090:	c0 50       	subi	r28, 0x00	; 0
    2092:	dd 4f       	sbci	r29, 0xFD	; 253
    2094:	68 83       	st	Y, r22
    2096:	c0 50       	subi	r28, 0x00	; 0
    2098:	d3 40       	sbci	r29, 0x03	; 3
    209a:	cf 5f       	subi	r28, 0xFF	; 255
    209c:	dc 4f       	sbci	r29, 0xFC	; 252
    209e:	78 83       	st	Y, r23
    20a0:	c1 50       	subi	r28, 0x01	; 1
    20a2:	d3 40       	sbci	r29, 0x03	; 3
    20a4:	38 2e       	mov	r3, r24
    20a6:	29 2e       	mov	r2, r25
			get_time(currenttime);
    20a8:	ce 01       	movw	r24, r28
    20aa:	8b 5e       	subi	r24, 0xEB	; 235
    20ac:	9e 4f       	sbci	r25, 0xFE	; 254
    20ae:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_time>
			sprintf(outbuf, format_ENV, get_SPECID, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    20b2:	24 e3       	ldi	r18, 0x34	; 52
    20b4:	20 9f       	mul	r18, r16
    20b6:	c0 01       	movw	r24, r0
    20b8:	21 9f       	mul	r18, r17
    20ba:	90 0d       	add	r25, r0
    20bc:	11 24       	eor	r1, r1
    20be:	82 5d       	subi	r24, 0xD2	; 210
    20c0:	97 4d       	sbci	r25, 0xD7	; 215
    20c2:	cc 51       	subi	r28, 0x1C	; 28
    20c4:	dd 4f       	sbci	r29, 0xFD	; 253
    20c6:	28 81       	ld	r18, Y
    20c8:	c4 5e       	subi	r28, 0xE4	; 228
    20ca:	d2 40       	sbci	r29, 0x02	; 2
    20cc:	cb 51       	subi	r28, 0x1B	; 27
    20ce:	dd 4f       	sbci	r29, 0xFD	; 253
    20d0:	38 81       	ld	r19, Y
    20d2:	c5 5e       	subi	r28, 0xE5	; 229
    20d4:	d2 40       	sbci	r29, 0x02	; 2
    20d6:	ca 51       	subi	r28, 0x1A	; 26
    20d8:	dd 4f       	sbci	r29, 0xFD	; 253
    20da:	48 81       	ld	r20, Y
    20dc:	c6 5e       	subi	r28, 0xE6	; 230
    20de:	d2 40       	sbci	r29, 0x02	; 2
    20e0:	c9 51       	subi	r28, 0x19	; 25
    20e2:	dd 4f       	sbci	r29, 0xFD	; 253
    20e4:	58 81       	ld	r21, Y
    20e6:	c7 5e       	subi	r28, 0xE7	; 231
    20e8:	d2 40       	sbci	r29, 0x02	; 2
    20ea:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    20ee:	62 ff       	sbrs	r22, 2
    20f0:	03 c0       	rjmp	.+6      	; 0x20f8 <report+0x54e>
    20f2:	62 e0       	ldi	r22, 0x02	; 2
    20f4:	70 e0       	ldi	r23, 0x00	; 0
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <report+0x552>
    20f8:	61 e0       	ldi	r22, 0x01	; 1
    20fa:	70 e0       	ldi	r23, 0x00	; 0
    20fc:	9f 93       	push	r25
    20fe:	8f 93       	push	r24
    2100:	2f 92       	push	r2
    2102:	3f 92       	push	r3
    2104:	cf 5f       	subi	r28, 0xFF	; 255
    2106:	dc 4f       	sbci	r29, 0xFC	; 252
    2108:	98 81       	ld	r25, Y
    210a:	c1 50       	subi	r28, 0x01	; 1
    210c:	d3 40       	sbci	r29, 0x03	; 3
    210e:	9f 93       	push	r25
    2110:	c0 50       	subi	r28, 0x00	; 0
    2112:	dd 4f       	sbci	r29, 0xFD	; 253
    2114:	88 81       	ld	r24, Y
    2116:	c0 50       	subi	r28, 0x00	; 0
    2118:	d3 40       	sbci	r29, 0x03	; 3
    211a:	8f 93       	push	r24
    211c:	4f 92       	push	r4
    211e:	5f 92       	push	r5
    2120:	6f 92       	push	r6
    2122:	7f 92       	push	r7
    2124:	8f 92       	push	r8
    2126:	9f 92       	push	r9
    2128:	af 92       	push	r10
    212a:	bf 92       	push	r11
    212c:	c1 50       	subi	r28, 0x01	; 1
    212e:	dd 4f       	sbci	r29, 0xFD	; 253
    2130:	98 81       	ld	r25, Y
    2132:	cf 5f       	subi	r28, 0xFF	; 255
    2134:	d2 40       	sbci	r29, 0x02	; 2
    2136:	9f 93       	push	r25
    2138:	c2 50       	subi	r28, 0x02	; 2
    213a:	dd 4f       	sbci	r29, 0xFD	; 253
    213c:	88 81       	ld	r24, Y
    213e:	ce 5f       	subi	r28, 0xFE	; 254
    2140:	d2 40       	sbci	r29, 0x02	; 2
    2142:	8f 93       	push	r24
    2144:	c3 50       	subi	r28, 0x03	; 3
    2146:	dd 4f       	sbci	r29, 0xFD	; 253
    2148:	98 81       	ld	r25, Y
    214a:	cd 5f       	subi	r28, 0xFD	; 253
    214c:	d2 40       	sbci	r29, 0x02	; 2
    214e:	9f 93       	push	r25
    2150:	c4 50       	subi	r28, 0x04	; 4
    2152:	dd 4f       	sbci	r29, 0xFD	; 253
    2154:	88 81       	ld	r24, Y
    2156:	cc 5f       	subi	r28, 0xFC	; 252
    2158:	d2 40       	sbci	r29, 0x02	; 2
    215a:	8f 93       	push	r24
    215c:	c5 50       	subi	r28, 0x05	; 5
    215e:	dd 4f       	sbci	r29, 0xFD	; 253
    2160:	98 81       	ld	r25, Y
    2162:	cb 5f       	subi	r28, 0xFB	; 251
    2164:	d2 40       	sbci	r29, 0x02	; 2
    2166:	9f 93       	push	r25
    2168:	c6 50       	subi	r28, 0x06	; 6
    216a:	dd 4f       	sbci	r29, 0xFD	; 253
    216c:	88 81       	ld	r24, Y
    216e:	ca 5f       	subi	r28, 0xFA	; 250
    2170:	d2 40       	sbci	r29, 0x02	; 2
    2172:	8f 93       	push	r24
    2174:	c7 50       	subi	r28, 0x07	; 7
    2176:	dd 4f       	sbci	r29, 0xFD	; 253
    2178:	98 81       	ld	r25, Y
    217a:	c9 5f       	subi	r28, 0xF9	; 249
    217c:	d2 40       	sbci	r29, 0x02	; 2
    217e:	9f 93       	push	r25
    2180:	c8 50       	subi	r28, 0x08	; 8
    2182:	dd 4f       	sbci	r29, 0xFD	; 253
    2184:	88 81       	ld	r24, Y
    2186:	c8 5f       	subi	r28, 0xF8	; 248
    2188:	d2 40       	sbci	r29, 0x02	; 2
    218a:	8f 93       	push	r24
    218c:	cf 92       	push	r12
    218e:	df 92       	push	r13
    2190:	ef 92       	push	r14
    2192:	ff 92       	push	r15
    2194:	5f 93       	push	r21
    2196:	4f 93       	push	r20
    2198:	3f 93       	push	r19
    219a:	2f 93       	push	r18
    219c:	ce 01       	movw	r24, r28
    219e:	8b 5e       	subi	r24, 0xEB	; 235
    21a0:	9e 4f       	sbci	r25, 0xFE	; 254
    21a2:	9f 93       	push	r25
    21a4:	8f 93       	push	r24
    21a6:	7f 93       	push	r23
    21a8:	6f 93       	push	r22
    21aa:	80 5c       	subi	r24, 0xC0	; 192
    21ac:	9f 4f       	sbci	r25, 0xFF	; 255
    21ae:	9f 93       	push	r25
    21b0:	8f 93       	push	r24
    21b2:	8e 01       	movw	r16, r28
    21b4:	0f 5f       	subi	r16, 0xFF	; 255
    21b6:	1f 4f       	sbci	r17, 0xFF	; 255
    21b8:	1f 93       	push	r17
    21ba:	0f 93       	push	r16
    21bc:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
			checksum_NMEA(outbuf);
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	c8 01       	movw	r24, r16
    21c6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    21ca:	f8 01       	movw	r30, r16
    21cc:	01 90       	ld	r0, Z+
    21ce:	00 20       	and	r0, r0
    21d0:	e9 f7       	brne	.-6      	; 0x21cc <report+0x622>
    21d2:	31 97       	sbiw	r30, 0x01	; 1
    21d4:	af 01       	movw	r20, r30
    21d6:	40 1b       	sub	r20, r16
    21d8:	51 0b       	sbc	r21, r17
    21da:	b8 01       	movw	r22, r16
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>
			writestr_OLED(1, "Temp & Humidity", 1);
    21e2:	41 e0       	ldi	r20, 0x01	; 1
    21e4:	60 e5       	ldi	r22, 0x50	; 80
    21e6:	77 e8       	ldi	r23, 0x87	; 135
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	0e 94 07 0b 	call	0x160e	; 0x160e <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    21ee:	cc 51       	subi	r28, 0x1C	; 28
    21f0:	dd 4f       	sbci	r29, 0xFD	; 253
    21f2:	b8 80       	ld	r11, Y
    21f4:	c4 5e       	subi	r28, 0xE4	; 228
    21f6:	d2 40       	sbci	r29, 0x02	; 2
    21f8:	cb 51       	subi	r28, 0x1B	; 27
    21fa:	dd 4f       	sbci	r29, 0xFD	; 253
    21fc:	a8 80       	ld	r10, Y
    21fe:	c5 5e       	subi	r28, 0xE5	; 229
    2200:	d2 40       	sbci	r29, 0x02	; 2
    2202:	ca 51       	subi	r28, 0x1A	; 26
    2204:	dd 4f       	sbci	r29, 0xFD	; 253
    2206:	98 80       	ld	r9, Y
    2208:	c6 5e       	subi	r28, 0xE6	; 230
    220a:	d2 40       	sbci	r29, 0x02	; 2
    220c:	c9 51       	subi	r28, 0x19	; 25
    220e:	dd 4f       	sbci	r29, 0xFD	; 253
    2210:	88 80       	ld	r8, Y
    2212:	c7 5e       	subi	r28, 0xE7	; 231
    2214:	d2 40       	sbci	r29, 0x02	; 2
    2216:	26 e6       	ldi	r18, 0x66	; 102
    2218:	36 e6       	ldi	r19, 0x66	; 102
    221a:	46 ee       	ldi	r20, 0xE6	; 230
    221c:	5f e3       	ldi	r21, 0x3F	; 63
    221e:	6b 2d       	mov	r22, r11
    2220:	7a 2d       	mov	r23, r10
    2222:	89 2d       	mov	r24, r9
    2224:	98 2d       	mov	r25, r8
    2226:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__mulsf3>
    222a:	cf 92       	push	r12
    222c:	df 92       	push	r13
    222e:	ef 92       	push	r14
    2230:	ff 92       	push	r15
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	52 e4       	ldi	r21, 0x42	; 66
    223a:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__addsf3>
    223e:	9f 93       	push	r25
    2240:	8f 93       	push	r24
    2242:	7f 93       	push	r23
    2244:	6f 93       	push	r22
    2246:	8f 92       	push	r8
    2248:	9f 92       	push	r9
    224a:	af 92       	push	r10
    224c:	bf 92       	push	r11
    224e:	80 e6       	ldi	r24, 0x60	; 96
    2250:	97 e8       	ldi	r25, 0x87	; 135
    2252:	9f 93       	push	r25
    2254:	8f 93       	push	r24
    2256:	1f 93       	push	r17
    2258:	0f 93       	push	r16
    225a:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
			writestr_OLED(1, outbuf, 2);
    225e:	42 e0       	ldi	r20, 0x02	; 2
    2260:	b8 01       	movw	r22, r16
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	0e 94 07 0b 	call	0x160e	; 0x160e <writestr_OLED>
			break;
    2268:	cd bf       	out	0x3d, r28	; 61
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	b1 c2       	rjmp	.+1378   	; 0x27d0 <report+0xc26>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    226e:	ae 01       	movw	r20, r28
    2270:	4c 50       	subi	r20, 0x0C	; 12
    2272:	5d 4f       	sbci	r21, 0xFD	; 253
    2274:	be 01       	movw	r22, r28
    2276:	60 51       	subi	r22, 0x10	; 16
    2278:	7d 4f       	sbci	r23, 0xFD	; 253
    227a:	ce 01       	movw	r24, r28
    227c:	84 51       	subi	r24, 0x14	; 20
    227e:	9d 4f       	sbci	r25, 0xFD	; 253
    2280:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <get_orientation>
			get_time(currenttime);
    2284:	ce 01       	movw	r24, r28
    2286:	8b 5e       	subi	r24, 0xEB	; 235
    2288:	9e 4f       	sbci	r25, 0xFE	; 254
    228a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_time>
			sprintf(outbuf, format_ORI, get_SPECID, currenttime, x, y, z, pcmd[cstack].cid);
    228e:	24 e3       	ldi	r18, 0x34	; 52
    2290:	20 9f       	mul	r18, r16
    2292:	c0 01       	movw	r24, r0
    2294:	21 9f       	mul	r18, r17
    2296:	90 0d       	add	r25, r0
    2298:	11 24       	eor	r1, r1
    229a:	82 5d       	subi	r24, 0xD2	; 210
    229c:	97 4d       	sbci	r25, 0xD7	; 215
    229e:	cc 50       	subi	r28, 0x0C	; 12
    22a0:	dd 4f       	sbci	r29, 0xFD	; 253
    22a2:	a8 81       	ld	r26, Y
    22a4:	c4 5f       	subi	r28, 0xF4	; 244
    22a6:	d2 40       	sbci	r29, 0x02	; 2
    22a8:	cb 50       	subi	r28, 0x0B	; 11
    22aa:	dd 4f       	sbci	r29, 0xFD	; 253
    22ac:	b8 81       	ld	r27, Y
    22ae:	c5 5f       	subi	r28, 0xF5	; 245
    22b0:	d2 40       	sbci	r29, 0x02	; 2
    22b2:	ca 50       	subi	r28, 0x0A	; 10
    22b4:	dd 4f       	sbci	r29, 0xFD	; 253
    22b6:	18 81       	ld	r17, Y
    22b8:	c6 5f       	subi	r28, 0xF6	; 246
    22ba:	d2 40       	sbci	r29, 0x02	; 2
    22bc:	c9 50       	subi	r28, 0x09	; 9
    22be:	dd 4f       	sbci	r29, 0xFD	; 253
    22c0:	08 81       	ld	r16, Y
    22c2:	c7 5f       	subi	r28, 0xF7	; 247
    22c4:	d2 40       	sbci	r29, 0x02	; 2
    22c6:	c0 51       	subi	r28, 0x10	; 16
    22c8:	dd 4f       	sbci	r29, 0xFD	; 253
    22ca:	68 81       	ld	r22, Y
    22cc:	c0 5f       	subi	r28, 0xF0	; 240
    22ce:	d2 40       	sbci	r29, 0x02	; 2
    22d0:	cf 50       	subi	r28, 0x0F	; 15
    22d2:	dd 4f       	sbci	r29, 0xFD	; 253
    22d4:	78 81       	ld	r23, Y
    22d6:	c1 5f       	subi	r28, 0xF1	; 241
    22d8:	d2 40       	sbci	r29, 0x02	; 2
    22da:	ce 50       	subi	r28, 0x0E	; 14
    22dc:	dd 4f       	sbci	r29, 0xFD	; 253
    22de:	e8 81       	ld	r30, Y
    22e0:	c2 5f       	subi	r28, 0xF2	; 242
    22e2:	d2 40       	sbci	r29, 0x02	; 2
    22e4:	cd 50       	subi	r28, 0x0D	; 13
    22e6:	dd 4f       	sbci	r29, 0xFD	; 253
    22e8:	f8 81       	ld	r31, Y
    22ea:	c3 5f       	subi	r28, 0xF3	; 243
    22ec:	d2 40       	sbci	r29, 0x02	; 2
    22ee:	c4 51       	subi	r28, 0x14	; 20
    22f0:	dd 4f       	sbci	r29, 0xFD	; 253
    22f2:	28 81       	ld	r18, Y
    22f4:	cc 5e       	subi	r28, 0xEC	; 236
    22f6:	d2 40       	sbci	r29, 0x02	; 2
    22f8:	c3 51       	subi	r28, 0x13	; 19
    22fa:	dd 4f       	sbci	r29, 0xFD	; 253
    22fc:	38 81       	ld	r19, Y
    22fe:	cd 5e       	subi	r28, 0xED	; 237
    2300:	d2 40       	sbci	r29, 0x02	; 2
    2302:	c2 51       	subi	r28, 0x12	; 18
    2304:	dd 4f       	sbci	r29, 0xFD	; 253
    2306:	48 81       	ld	r20, Y
    2308:	ce 5e       	subi	r28, 0xEE	; 238
    230a:	d2 40       	sbci	r29, 0x02	; 2
    230c:	c1 51       	subi	r28, 0x11	; 17
    230e:	dd 4f       	sbci	r29, 0xFD	; 253
    2310:	58 81       	ld	r21, Y
    2312:	cf 5e       	subi	r28, 0xEF	; 239
    2314:	d2 40       	sbci	r29, 0x02	; 2
    2316:	f0 90 a8 04 	lds	r15, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    231a:	f2 fe       	sbrs	r15, 2
    231c:	05 c0       	rjmp	.+10     	; 0x2328 <report+0x77e>
    231e:	68 94       	set
    2320:	ff 24       	eor	r15, r15
    2322:	f1 f8       	bld	r15, 1
    2324:	e1 2c       	mov	r14, r1
    2326:	03 c0       	rjmp	.+6      	; 0x232e <report+0x784>
    2328:	ff 24       	eor	r15, r15
    232a:	f3 94       	inc	r15
    232c:	e1 2c       	mov	r14, r1
    232e:	9f 93       	push	r25
    2330:	8f 93       	push	r24
    2332:	0f 93       	push	r16
    2334:	1f 93       	push	r17
    2336:	bf 93       	push	r27
    2338:	af 93       	push	r26
    233a:	ff 93       	push	r31
    233c:	ef 93       	push	r30
    233e:	7f 93       	push	r23
    2340:	6f 93       	push	r22
    2342:	5f 93       	push	r21
    2344:	4f 93       	push	r20
    2346:	3f 93       	push	r19
    2348:	2f 93       	push	r18
    234a:	ce 01       	movw	r24, r28
    234c:	8b 5e       	subi	r24, 0xEB	; 235
    234e:	9e 4f       	sbci	r25, 0xFE	; 254
    2350:	9f 93       	push	r25
    2352:	8f 93       	push	r24
    2354:	ef 92       	push	r14
    2356:	ff 92       	push	r15
    2358:	8a 52       	subi	r24, 0x2A	; 42
    235a:	9f 4f       	sbci	r25, 0xFF	; 255
    235c:	9f 93       	push	r25
    235e:	8f 93       	push	r24
    2360:	8e 01       	movw	r16, r28
    2362:	0f 5f       	subi	r16, 0xFF	; 255
    2364:	1f 4f       	sbci	r17, 0xFF	; 255
    2366:	1f 93       	push	r17
    2368:	0f 93       	push	r16
    236a:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
			checksum_NMEA(outbuf);
    236e:	c8 01       	movw	r24, r16
    2370:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2374:	f8 01       	movw	r30, r16
    2376:	01 90       	ld	r0, Z+
    2378:	00 20       	and	r0, r0
    237a:	e9 f7       	brne	.-6      	; 0x2376 <report+0x7cc>
    237c:	31 97       	sbiw	r30, 0x01	; 1
    237e:	af 01       	movw	r20, r30
    2380:	40 1b       	sub	r20, r16
    2382:	51 0b       	sbc	r21, r17
    2384:	b8 01       	movw	r22, r16
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>
			writestr_OLED(1, "Orientation", 1);
    238c:	41 e0       	ldi	r20, 0x01	; 1
    238e:	66 e7       	ldi	r22, 0x76	; 118
    2390:	77 e8       	ldi	r23, 0x87	; 135
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	0e 94 07 0b 	call	0x160e	; 0x160e <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    2398:	c9 50       	subi	r28, 0x09	; 9
    239a:	dd 4f       	sbci	r29, 0xFD	; 253
    239c:	88 81       	ld	r24, Y
    239e:	c7 5f       	subi	r28, 0xF7	; 247
    23a0:	d2 40       	sbci	r29, 0x02	; 2
    23a2:	8f 93       	push	r24
    23a4:	ca 50       	subi	r28, 0x0A	; 10
    23a6:	dd 4f       	sbci	r29, 0xFD	; 253
    23a8:	88 81       	ld	r24, Y
    23aa:	c6 5f       	subi	r28, 0xF6	; 246
    23ac:	d2 40       	sbci	r29, 0x02	; 2
    23ae:	8f 93       	push	r24
    23b0:	cb 50       	subi	r28, 0x0B	; 11
    23b2:	dd 4f       	sbci	r29, 0xFD	; 253
    23b4:	88 81       	ld	r24, Y
    23b6:	c5 5f       	subi	r28, 0xF5	; 245
    23b8:	d2 40       	sbci	r29, 0x02	; 2
    23ba:	8f 93       	push	r24
    23bc:	cc 50       	subi	r28, 0x0C	; 12
    23be:	dd 4f       	sbci	r29, 0xFD	; 253
    23c0:	88 81       	ld	r24, Y
    23c2:	c4 5f       	subi	r28, 0xF4	; 244
    23c4:	d2 40       	sbci	r29, 0x02	; 2
    23c6:	8f 93       	push	r24
    23c8:	cd 50       	subi	r28, 0x0D	; 13
    23ca:	dd 4f       	sbci	r29, 0xFD	; 253
    23cc:	88 81       	ld	r24, Y
    23ce:	c3 5f       	subi	r28, 0xF3	; 243
    23d0:	d2 40       	sbci	r29, 0x02	; 2
    23d2:	8f 93       	push	r24
    23d4:	ce 50       	subi	r28, 0x0E	; 14
    23d6:	dd 4f       	sbci	r29, 0xFD	; 253
    23d8:	88 81       	ld	r24, Y
    23da:	c2 5f       	subi	r28, 0xF2	; 242
    23dc:	d2 40       	sbci	r29, 0x02	; 2
    23de:	8f 93       	push	r24
    23e0:	cf 50       	subi	r28, 0x0F	; 15
    23e2:	dd 4f       	sbci	r29, 0xFD	; 253
    23e4:	88 81       	ld	r24, Y
    23e6:	c1 5f       	subi	r28, 0xF1	; 241
    23e8:	d2 40       	sbci	r29, 0x02	; 2
    23ea:	8f 93       	push	r24
    23ec:	c0 51       	subi	r28, 0x10	; 16
    23ee:	dd 4f       	sbci	r29, 0xFD	; 253
    23f0:	88 81       	ld	r24, Y
    23f2:	c0 5f       	subi	r28, 0xF0	; 240
    23f4:	d2 40       	sbci	r29, 0x02	; 2
    23f6:	8f 93       	push	r24
    23f8:	c1 51       	subi	r28, 0x11	; 17
    23fa:	dd 4f       	sbci	r29, 0xFD	; 253
    23fc:	88 81       	ld	r24, Y
    23fe:	cf 5e       	subi	r28, 0xEF	; 239
    2400:	d2 40       	sbci	r29, 0x02	; 2
    2402:	8f 93       	push	r24
    2404:	c2 51       	subi	r28, 0x12	; 18
    2406:	dd 4f       	sbci	r29, 0xFD	; 253
    2408:	88 81       	ld	r24, Y
    240a:	ce 5e       	subi	r28, 0xEE	; 238
    240c:	d2 40       	sbci	r29, 0x02	; 2
    240e:	8f 93       	push	r24
    2410:	c3 51       	subi	r28, 0x13	; 19
    2412:	dd 4f       	sbci	r29, 0xFD	; 253
    2414:	88 81       	ld	r24, Y
    2416:	cd 5e       	subi	r28, 0xED	; 237
    2418:	d2 40       	sbci	r29, 0x02	; 2
    241a:	8f 93       	push	r24
    241c:	c4 51       	subi	r28, 0x14	; 20
    241e:	dd 4f       	sbci	r29, 0xFD	; 253
    2420:	88 81       	ld	r24, Y
    2422:	cc 5e       	subi	r28, 0xEC	; 236
    2424:	d2 40       	sbci	r29, 0x02	; 2
    2426:	8f 93       	push	r24
    2428:	ce 01       	movw	r24, r28
    242a:	85 5f       	subi	r24, 0xF5	; 245
    242c:	9d 4f       	sbci	r25, 0xFD	; 253
    242e:	9f 93       	push	r25
    2430:	8f 93       	push	r24
    2432:	1f 93       	push	r17
    2434:	0f 93       	push	r16
    2436:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
			writestr_OLED(1, outbuf, 2);
    243a:	cd bf       	out	0x3d, r28	; 61
    243c:	de bf       	out	0x3e, r29	; 62
    243e:	42 e0       	ldi	r20, 0x02	; 2
    2440:	b8 01       	movw	r22, r16
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	0e 94 07 0b 	call	0x160e	; 0x160e <writestr_OLED>
			break;
    2448:	c3 c1       	rjmp	.+902    	; 0x27d0 <report+0xc26>

		case 'p':
			get_time(currenttime);
    244a:	ce 01       	movw	r24, r28
    244c:	8b 5e       	subi	r24, 0xEB	; 235
    244e:	9e 4f       	sbci	r25, 0xFE	; 254
    2450:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_time>
			read_PNEUSENSORS(&shutter, &left, &right, &air);
    2454:	9e 01       	movw	r18, r28
    2456:	2c 5a       	subi	r18, 0xAC	; 172
    2458:	3e 4f       	sbci	r19, 0xFE	; 254
    245a:	ae 01       	movw	r20, r28
    245c:	4d 5a       	subi	r20, 0xAD	; 173
    245e:	5e 4f       	sbci	r21, 0xFE	; 254
    2460:	be 01       	movw	r22, r28
    2462:	6e 5a       	subi	r22, 0xAE	; 174
    2464:	7e 4f       	sbci	r23, 0xFE	; 254
    2466:	ce 01       	movw	r24, r28
    2468:	8f 5a       	subi	r24, 0xAF	; 175
    246a:	9e 4f       	sbci	r25, 0xFE	; 254
    246c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <read_PNEUSENSORS>
			sprintf(outbuf, format_PNU, get_SPECID, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    2470:	24 e3       	ldi	r18, 0x34	; 52
    2472:	20 9f       	mul	r18, r16
    2474:	c0 01       	movw	r24, r0
    2476:	21 9f       	mul	r18, r17
    2478:	90 0d       	add	r25, r0
    247a:	11 24       	eor	r1, r1
    247c:	82 5d       	subi	r24, 0xD2	; 210
    247e:	97 4d       	sbci	r25, 0xD7	; 215
    2480:	cc 5a       	subi	r28, 0xAC	; 172
    2482:	de 4f       	sbci	r29, 0xFE	; 254
    2484:	58 81       	ld	r21, Y
    2486:	c4 55       	subi	r28, 0x54	; 84
    2488:	d1 40       	sbci	r29, 0x01	; 1
    248a:	cd 5a       	subi	r28, 0xAD	; 173
    248c:	de 4f       	sbci	r29, 0xFE	; 254
    248e:	48 81       	ld	r20, Y
    2490:	c3 55       	subi	r28, 0x53	; 83
    2492:	d1 40       	sbci	r29, 0x01	; 1
    2494:	ce 5a       	subi	r28, 0xAE	; 174
    2496:	de 4f       	sbci	r29, 0xFE	; 254
    2498:	38 81       	ld	r19, Y
    249a:	c2 55       	subi	r28, 0x52	; 82
    249c:	d1 40       	sbci	r29, 0x01	; 1
    249e:	cf 5a       	subi	r28, 0xAF	; 175
    24a0:	de 4f       	sbci	r29, 0xFE	; 254
    24a2:	28 81       	ld	r18, Y
    24a4:	c1 55       	subi	r28, 0x51	; 81
    24a6:	d1 40       	sbci	r29, 0x01	; 1
    24a8:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    24ac:	62 ff       	sbrs	r22, 2
    24ae:	03 c0       	rjmp	.+6      	; 0x24b6 <report+0x90c>
    24b0:	62 e0       	ldi	r22, 0x02	; 2
    24b2:	70 e0       	ldi	r23, 0x00	; 0
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <report+0x910>
    24b6:	61 e0       	ldi	r22, 0x01	; 1
    24b8:	70 e0       	ldi	r23, 0x00	; 0
    24ba:	9f 93       	push	r25
    24bc:	8f 93       	push	r24
    24be:	1f 92       	push	r1
    24c0:	5f 93       	push	r21
    24c2:	1f 92       	push	r1
    24c4:	4f 93       	push	r20
    24c6:	1f 92       	push	r1
    24c8:	3f 93       	push	r19
    24ca:	1f 92       	push	r1
    24cc:	2f 93       	push	r18
    24ce:	ce 01       	movw	r24, r28
    24d0:	8b 5e       	subi	r24, 0xEB	; 235
    24d2:	9e 4f       	sbci	r25, 0xFE	; 254
    24d4:	9f 93       	push	r25
    24d6:	8f 93       	push	r24
    24d8:	7f 93       	push	r23
    24da:	6f 93       	push	r22
    24dc:	88 5f       	subi	r24, 0xF8	; 248
    24de:	9e 4f       	sbci	r25, 0xFE	; 254
    24e0:	9f 93       	push	r25
    24e2:	8f 93       	push	r24
    24e4:	8e 01       	movw	r16, r28
    24e6:	0f 5f       	subi	r16, 0xFF	; 255
    24e8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ea:	1f 93       	push	r17
    24ec:	0f 93       	push	r16
    24ee:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
			checksum_NMEA(outbuf);
    24f2:	c8 01       	movw	r24, r16
    24f4:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    24f8:	f8 01       	movw	r30, r16
    24fa:	01 90       	ld	r0, Z+
    24fc:	00 20       	and	r0, r0
    24fe:	e9 f7       	brne	.-6      	; 0x24fa <report+0x950>
    2500:	31 97       	sbiw	r30, 0x01	; 1
    2502:	af 01       	movw	r20, r30
    2504:	40 1b       	sub	r20, r16
    2506:	51 0b       	sbc	r21, r17
    2508:	b8 01       	movw	r22, r16
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>
			sprintf(outbuf, dformat_PN1, left, right);
    2510:	cd 5a       	subi	r28, 0xAD	; 173
    2512:	de 4f       	sbci	r29, 0xFE	; 254
    2514:	88 81       	ld	r24, Y
    2516:	c3 55       	subi	r28, 0x53	; 83
    2518:	d1 40       	sbci	r29, 0x01	; 1
    251a:	1f 92       	push	r1
    251c:	8f 93       	push	r24
    251e:	ce 5a       	subi	r28, 0xAE	; 174
    2520:	de 4f       	sbci	r29, 0xFE	; 254
    2522:	88 81       	ld	r24, Y
    2524:	c2 55       	subi	r28, 0x52	; 82
    2526:	d1 40       	sbci	r29, 0x01	; 1
    2528:	1f 92       	push	r1
    252a:	8f 93       	push	r24
    252c:	ce 01       	movw	r24, r28
    252e:	82 5b       	subi	r24, 0xB2	; 178
    2530:	9d 4f       	sbci	r25, 0xFD	; 253
    2532:	9f 93       	push	r25
    2534:	8f 93       	push	r24
    2536:	1f 93       	push	r17
    2538:	0f 93       	push	r16
    253a:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
			writestr_OLED(1, outbuf, 1);
    253e:	41 e0       	ldi	r20, 0x01	; 1
    2540:	b8 01       	movw	r22, r16
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	0e 94 07 0b 	call	0x160e	; 0x160e <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2548:	cc 5a       	subi	r28, 0xAC	; 172
    254a:	de 4f       	sbci	r29, 0xFE	; 254
    254c:	88 81       	ld	r24, Y
    254e:	c4 55       	subi	r28, 0x54	; 84
    2550:	d1 40       	sbci	r29, 0x01	; 1
    2552:	1f 92       	push	r1
    2554:	8f 93       	push	r24
    2556:	cf 5a       	subi	r28, 0xAF	; 175
    2558:	de 4f       	sbci	r29, 0xFE	; 254
    255a:	88 81       	ld	r24, Y
    255c:	c1 55       	subi	r28, 0x51	; 81
    255e:	d1 40       	sbci	r29, 0x01	; 1
    2560:	1f 92       	push	r1
    2562:	8f 93       	push	r24
    2564:	ce 01       	movw	r24, r28
    2566:	8f 59       	subi	r24, 0x9F	; 159
    2568:	9d 4f       	sbci	r25, 0xFD	; 253
    256a:	9f 93       	push	r25
    256c:	8f 93       	push	r24
    256e:	1f 93       	push	r17
    2570:	0f 93       	push	r16
    2572:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	42 e0       	ldi	r20, 0x02	; 2
    257c:	b8 01       	movw	r22, r16
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	0e 94 07 0b 	call	0x160e	; 0x160e <writestr_OLED>
			break;
    2584:	25 c1       	rjmp	.+586    	; 0x27d0 <report+0xc26>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    2586:	ce 01       	movw	r24, r28
    2588:	8b 5e       	subi	r24, 0xEB	; 235
    258a:	9e 4f       	sbci	r25, 0xFE	; 254
    258c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_time>
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
    2590:	24 e1       	ldi	r18, 0x14	; 20
    2592:	ae 01       	movw	r20, r28
    2594:	47 5d       	subi	r20, 0xD7	; 215
    2596:	5e 4f       	sbci	r21, 0xFE	; 254
    2598:	60 e0       	ldi	r22, 0x00	; 0
    259a:	70 e0       	ldi	r23, 0x00	; 0
    259c:	80 e5       	ldi	r24, 0x50	; 80
    259e:	0e 94 87 06 	call	0xd0e	; 0xd0e <read_FRAM>
			get_BOOTTIME(boottime);
    25a2:	ce 01       	movw	r24, r28
    25a4:	83 5c       	subi	r24, 0xC3	; 195
    25a6:	9e 4f       	sbci	r25, 0xFE	; 254
    25a8:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    25ac:	24 e3       	ldi	r18, 0x34	; 52
    25ae:	20 9f       	mul	r18, r16
    25b0:	c0 01       	movw	r24, r0
    25b2:	21 9f       	mul	r18, r17
    25b4:	90 0d       	add	r25, r0
    25b6:	11 24       	eor	r1, r1
    25b8:	82 5d       	subi	r24, 0xD2	; 210
    25ba:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
    25bc:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    25c0:	22 ff       	sbrs	r18, 2
    25c2:	03 c0       	rjmp	.+6      	; 0x25ca <report+0xa20>
    25c4:	22 e0       	ldi	r18, 0x02	; 2
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	02 c0       	rjmp	.+4      	; 0x25ce <report+0xa24>
    25ca:	21 e0       	ldi	r18, 0x01	; 1
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	9f 93       	push	r25
    25d0:	8f 93       	push	r24
    25d2:	ce 01       	movw	r24, r28
    25d4:	83 5c       	subi	r24, 0xC3	; 195
    25d6:	9e 4f       	sbci	r25, 0xFE	; 254
    25d8:	9f 93       	push	r25
    25da:	8f 93       	push	r24
    25dc:	44 97       	sbiw	r24, 0x14	; 20
    25de:	9f 93       	push	r25
    25e0:	8f 93       	push	r24
    25e2:	8e 01       	movw	r16, r28
    25e4:	0b 5e       	subi	r16, 0xEB	; 235
    25e6:	1e 4f       	sbci	r17, 0xFE	; 254
    25e8:	1f 93       	push	r17
    25ea:	0f 93       	push	r16
    25ec:	3f 93       	push	r19
    25ee:	2f 93       	push	r18
    25f0:	85 5b       	subi	r24, 0xB5	; 181
    25f2:	9e 4f       	sbci	r25, 0xFE	; 254
    25f4:	9f 93       	push	r25
    25f6:	8f 93       	push	r24
    25f8:	83 57       	subi	r24, 0x73	; 115
    25fa:	92 40       	sbci	r25, 0x02	; 2
    25fc:	7c 01       	movw	r14, r24
    25fe:	9f 93       	push	r25
    2600:	8f 93       	push	r24
    2602:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    2606:	c7 01       	movw	r24, r14
    2608:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    260c:	f7 01       	movw	r30, r14
    260e:	01 90       	ld	r0, Z+
    2610:	00 20       	and	r0, r0
    2612:	e9 f7       	brne	.-6      	; 0x260e <report+0xa64>
    2614:	31 97       	sbiw	r30, 0x01	; 1
    2616:	af 01       	movw	r20, r30
    2618:	4e 19       	sub	r20, r14
    261a:	5f 09       	sbc	r21, r15
    261c:	b7 01       	movw	r22, r14
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>
			writestr_OLED(1, "Time", 1);
    2624:	41 e0       	ldi	r20, 0x01	; 1
    2626:	62 e8       	ldi	r22, 0x82	; 130
    2628:	77 e8       	ldi	r23, 0x87	; 135
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	0e 94 07 0b 	call	0x160e	; 0x160e <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    2630:	b8 01       	movw	r22, r16
    2632:	65 5f       	subi	r22, 0xF5	; 245
    2634:	7f 4f       	sbci	r23, 0xFF	; 255
    2636:	42 e0       	ldi	r20, 0x02	; 2
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	0e 94 07 0b 	call	0x160e	; 0x160e <writestr_OLED>
			break;
    263e:	cd bf       	out	0x3d, r28	; 61
    2640:	de bf       	out	0x3e, r29	; 62
    2642:	c6 c0       	rjmp	.+396    	; 0x27d0 <report+0xc26>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <read_ionpump>
    264a:	f6 2e       	mov	r15, r22
    264c:	e7 2e       	mov	r14, r23
    264e:	d8 2e       	mov	r13, r24
    2650:	c9 2e       	mov	r12, r25
			bluvac = read_ionpump(BLUEPUMP);
    2652:	82 e0       	ldi	r24, 0x02	; 2
    2654:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <read_ionpump>
    2658:	b6 2e       	mov	r11, r22
    265a:	a7 2e       	mov	r10, r23
    265c:	98 2e       	mov	r9, r24
    265e:	89 2e       	mov	r8, r25
			get_time(currenttime);
    2660:	ce 01       	movw	r24, r28
    2662:	8b 5e       	subi	r24, 0xEB	; 235
    2664:	9e 4f       	sbci	r25, 0xFE	; 254
    2666:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_time>
			sprintf(outbuf, format_VAC, get_SPECID, currenttime, redvac, bluvac, pcmd[cstack].cid);
    266a:	24 e3       	ldi	r18, 0x34	; 52
    266c:	20 9f       	mul	r18, r16
    266e:	c0 01       	movw	r24, r0
    2670:	21 9f       	mul	r18, r17
    2672:	90 0d       	add	r25, r0
    2674:	11 24       	eor	r1, r1
    2676:	82 5d       	subi	r24, 0xD2	; 210
    2678:	97 4d       	sbci	r25, 0xD7	; 215
    267a:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    267e:	22 ff       	sbrs	r18, 2
    2680:	03 c0       	rjmp	.+6      	; 0x2688 <report+0xade>
    2682:	22 e0       	ldi	r18, 0x02	; 2
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	02 c0       	rjmp	.+4      	; 0x268c <report+0xae2>
    2688:	21 e0       	ldi	r18, 0x01	; 1
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	9f 93       	push	r25
    268e:	8f 93       	push	r24
    2690:	8f 92       	push	r8
    2692:	9f 92       	push	r9
    2694:	af 92       	push	r10
    2696:	bf 92       	push	r11
    2698:	cf 92       	push	r12
    269a:	df 92       	push	r13
    269c:	ef 92       	push	r14
    269e:	ff 92       	push	r15
    26a0:	ce 01       	movw	r24, r28
    26a2:	8b 5e       	subi	r24, 0xEB	; 235
    26a4:	9e 4f       	sbci	r25, 0xFE	; 254
    26a6:	9f 93       	push	r25
    26a8:	8f 93       	push	r24
    26aa:	3f 93       	push	r19
    26ac:	2f 93       	push	r18
    26ae:	84 58       	subi	r24, 0x84	; 132
    26b0:	9e 4f       	sbci	r25, 0xFE	; 254
    26b2:	9f 93       	push	r25
    26b4:	8f 93       	push	r24
    26b6:	8e 01       	movw	r16, r28
    26b8:	0f 5f       	subi	r16, 0xFF	; 255
    26ba:	1f 4f       	sbci	r17, 0xFF	; 255
    26bc:	1f 93       	push	r17
    26be:	0f 93       	push	r16
    26c0:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
			checksum_NMEA(outbuf);
    26c4:	c8 01       	movw	r24, r16
    26c6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    26ca:	f8 01       	movw	r30, r16
    26cc:	01 90       	ld	r0, Z+
    26ce:	00 20       	and	r0, r0
    26d0:	e9 f7       	brne	.-6      	; 0x26cc <report+0xb22>
    26d2:	31 97       	sbiw	r30, 0x01	; 1
    26d4:	af 01       	movw	r20, r30
    26d6:	40 1b       	sub	r20, r16
    26d8:	51 0b       	sbc	r21, r17
    26da:	b8 01       	movw	r22, r16
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    26e2:	41 e0       	ldi	r20, 0x01	; 1
    26e4:	67 e8       	ldi	r22, 0x87	; 135
    26e6:	77 e8       	ldi	r23, 0x87	; 135
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	0e 94 07 0b 	call	0x160e	; 0x160e <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    26ee:	8f 92       	push	r8
    26f0:	9f 92       	push	r9
    26f2:	af 92       	push	r10
    26f4:	bf 92       	push	r11
    26f6:	cf 92       	push	r12
    26f8:	df 92       	push	r13
    26fa:	ef 92       	push	r14
    26fc:	ff 92       	push	r15
    26fe:	ce 01       	movw	r24, r28
    2700:	86 54       	subi	r24, 0x46	; 70
    2702:	9d 4f       	sbci	r25, 0xFD	; 253
    2704:	9f 93       	push	r25
    2706:	8f 93       	push	r24
    2708:	1f 93       	push	r17
    270a:	0f 93       	push	r16
    270c:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2710:	42 e0       	ldi	r20, 0x02	; 2
    2712:	b8 01       	movw	r22, r16
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	0e 94 07 0b 	call	0x160e	; 0x160e <writestr_OLED>
			break;
    271a:	cd bf       	out	0x3d, r28	; 61
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	58 c0       	rjmp	.+176    	; 0x27d0 <report+0xc26>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    2720:	ce 01       	movw	r24, r28
    2722:	86 5f       	subi	r24, 0xF6	; 246
    2724:	9e 4f       	sbci	r25, 0xFE	; 254
    2726:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <get_VERSION>
			get_time(currenttime);
    272a:	ce 01       	movw	r24, r28
    272c:	8b 5e       	subi	r24, 0xEB	; 235
    272e:	9e 4f       	sbci	r25, 0xFE	; 254
    2730:	0e 94 78 05 	call	0xaf0	; 0xaf0 <get_time>
			sprintf(outbuf, format_VER, get_SPECID, currenttime, version, pcmd[cstack].cid);
    2734:	24 e3       	ldi	r18, 0x34	; 52
    2736:	20 9f       	mul	r18, r16
    2738:	c0 01       	movw	r24, r0
    273a:	21 9f       	mul	r18, r17
    273c:	90 0d       	add	r25, r0
    273e:	11 24       	eor	r1, r1
    2740:	82 5d       	subi	r24, 0xD2	; 210
    2742:	97 4d       	sbci	r25, 0xD7	; 215
    2744:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2748:	22 ff       	sbrs	r18, 2
    274a:	03 c0       	rjmp	.+6      	; 0x2752 <report+0xba8>
    274c:	22 e0       	ldi	r18, 0x02	; 2
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <report+0xbac>
    2752:	21 e0       	ldi	r18, 0x01	; 1
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	9f 93       	push	r25
    2758:	8f 93       	push	r24
    275a:	ce 01       	movw	r24, r28
    275c:	86 5f       	subi	r24, 0xF6	; 246
    275e:	9e 4f       	sbci	r25, 0xFE	; 254
    2760:	9f 93       	push	r25
    2762:	8f 93       	push	r24
    2764:	0b 96       	adiw	r24, 0x0b	; 11
    2766:	9f 93       	push	r25
    2768:	8f 93       	push	r24
    276a:	3f 93       	push	r19
    276c:	2f 93       	push	r18
    276e:	8e 54       	subi	r24, 0x4E	; 78
    2770:	9e 4f       	sbci	r25, 0xFE	; 254
    2772:	9f 93       	push	r25
    2774:	8f 93       	push	r24
    2776:	8e 01       	movw	r16, r28
    2778:	0f 5f       	subi	r16, 0xFF	; 255
    277a:	1f 4f       	sbci	r17, 0xFF	; 255
    277c:	1f 93       	push	r17
    277e:	0f 93       	push	r16
    2780:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
			checksum_NMEA(outbuf);
    2784:	c8 01       	movw	r24, r16
    2786:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    278a:	f8 01       	movw	r30, r16
    278c:	01 90       	ld	r0, Z+
    278e:	00 20       	and	r0, r0
    2790:	e9 f7       	brne	.-6      	; 0x278c <report+0xbe2>
    2792:	31 97       	sbiw	r30, 0x01	; 1
    2794:	af 01       	movw	r20, r30
    2796:	40 1b       	sub	r20, r16
    2798:	51 0b       	sbc	r21, r17
    279a:	b8 01       	movw	r22, r16
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>
			writestr_OLED(1, "specMech Version", 1);
    27a2:	41 e0       	ldi	r20, 0x01	; 1
    27a4:	6d ef       	ldi	r22, 0xFD	; 253
    27a6:	76 e8       	ldi	r23, 0x86	; 134
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	0e 94 07 0b 	call	0x160e	; 0x160e <writestr_OLED>
			get_VERSION(outbuf);
    27ae:	c8 01       	movw	r24, r16
    27b0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    27b4:	42 e0       	ldi	r20, 0x02	; 2
    27b6:	b8 01       	movw	r22, r16
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	0e 94 07 0b 	call	0x160e	; 0x160e <writestr_OLED>
			break;
    27be:	cd bf       	out	0x3d, r28	; 61
    27c0:	de bf       	out	0x3e, r29	; 62
    27c2:	06 c0       	rjmp	.+12     	; 0x27d0 <report+0xc26>

		default:
			printError(ERR_BADOBJECT, "report: invalid object");
    27c4:	67 e9       	ldi	r22, 0x97	; 151
    27c6:	77 e8       	ldi	r23, 0x87	; 135
    27c8:	89 ec       	ldi	r24, 0xC9	; 201
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
			break;
	}

	return(GREATERPROMPT);

}
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	cf 5f       	subi	r28, 0xFF	; 255
    27d4:	dc 4f       	sbci	r29, 0xFC	; 252
    27d6:	cd bf       	out	0x3d, r28	; 61
    27d8:	de bf       	out	0x3e, r29	; 62
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	1f 91       	pop	r17
    27e0:	0f 91       	pop	r16
    27e2:	ff 90       	pop	r15
    27e4:	ef 90       	pop	r14
    27e6:	df 90       	pop	r13
    27e8:	cf 90       	pop	r12
    27ea:	bf 90       	pop	r11
    27ec:	af 90       	pop	r10
    27ee:	9f 90       	pop	r9
    27f0:	8f 90       	pop	r8
    27f2:	7f 90       	pop	r7
    27f4:	6f 90       	pop	r6
    27f6:	5f 90       	pop	r5
    27f8:	4f 90       	pop	r4
    27fa:	3f 90       	pop	r3
    27fc:	2f 90       	pop	r2
    27fe:	08 95       	ret

00002800 <set_ROBOEncoder>:
/*------------------------------------------------------------------------------
	Does not print an error. It's only called at reboot. We should have a
	double-check at startup to make sure the encoder values agree before a move.
------------------------------------------------------------------------------*/
uint8_t set_ROBOEncoder(uint8_t controller, uint32_t value)
{
    2800:	cf 93       	push	r28
    2802:	df 93       	push	r29
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	26 97       	sbiw	r28, 0x06	; 6
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	de bf       	out	0x3e, r29	; 62

	uint8_t tbuf[6];

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    280e:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <recv1_buf>
	recv1_buf.nbytes = 1;
    2812:	91 e0       	ldi	r25, 0x01	; 1
    2814:	90 93 13 2b 	sts	0x2B13, r25	; 0x802b13 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2818:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0x103>
	recv1_buf.done = NO;
    281c:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>

	tbuf[0] = controller;
    2820:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBOSETENCODER;
    2822:	86 e1       	ldi	r24, 0x16	; 22
    2824:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (value >> 24) & 0xFF;
    2826:	7b 83       	std	Y+3, r23	; 0x03
	tbuf[3] = (value >> 16) & 0xFF;
    2828:	6c 83       	std	Y+4, r22	; 0x04
	tbuf[4] = (value >> 8) & 0xFF;
    282a:	5d 83       	std	Y+5, r21	; 0x05
	tbuf[5] = value & 0xFF;
    282c:	4e 83       	std	Y+6, r20	; 0x06

	send_USART(1, tbuf, 6);
    282e:	46 e0       	ldi	r20, 0x06	; 6
    2830:	be 01       	movw	r22, r28
    2832:	6f 5f       	subi	r22, 0xFF	; 255
    2834:	7f 4f       	sbci	r23, 0xFF	; 255
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>

	start_TCB0(1);				// Start 1 ms ticks timer
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	0e 94 0c 18 	call	0x3018	; 0x3018 <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Data received
    2844:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv1_buf+0x104>
    2848:	81 30       	cpi	r24, 0x01	; 1
    284a:	41 f4       	brne	.+16     	; 0x285c <set_ROBOEncoder+0x5c>
			stop_TCB0();
    284c:	0e 94 22 18 	call	0x3044	; 0x3044 <stop_TCB0>
		if (ticks > 50) {		// 4 ms just barely works at 38400 baud
			stop_TCB0();
			return(ERROR);
		}
	}
	if (recv1_buf.data[0] != 0xFF) {
    2850:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <recv1_buf>
    2854:	8f 3f       	cpi	r24, 0xFF	; 255
    2856:	61 f0       	breq	.+24     	; 0x2870 <set_ROBOEncoder+0x70>
		return(ERROR);
    2858:	83 e6       	ldi	r24, 0x63	; 99
    285a:	0b c0       	rjmp	.+22     	; 0x2872 <set_ROBOEncoder+0x72>
	for (;;) {
		if (recv1_buf.done == YES) {	// Data received
			stop_TCB0();
			break;
		}
		if (ticks > 50) {		// 4 ms just barely works at 38400 baud
    285c:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <ticks>
    2860:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <ticks+0x1>
    2864:	c3 97       	sbiw	r24, 0x33	; 51
    2866:	70 f3       	brcs	.-36     	; 0x2844 <set_ROBOEncoder+0x44>
			stop_TCB0();
    2868:	0e 94 22 18 	call	0x3044	; 0x3044 <stop_TCB0>
			return(ERROR);
    286c:	83 e6       	ldi	r24, 0x63	; 99
    286e:	01 c0       	rjmp	.+2      	; 0x2872 <set_ROBOEncoder+0x72>
		}
	}
	if (recv1_buf.data[0] != 0xFF) {
		return(ERROR);
	}
	return(NOERROR);
    2870:	80 e0       	ldi	r24, 0x00	; 0

}
    2872:	26 96       	adiw	r28, 0x06	; 6
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	de bf       	out	0x3e, r29	; 62
    2878:	df 91       	pop	r29
    287a:	cf 91       	pop	r28
    287c:	08 95       	ret

0000287e <init_ROBO>:
	return(NOERROR);

}

uint8_t init_ROBO(void)
{
    287e:	cf 93       	push	r28
    2880:	df 93       	push	r29

	uint8_t controller, error = 0;
    2882:	d0 e0       	ldi	r29, 0x00	; 0
	uint32_t encoderValue;

	for (controller = 128; controller < 131; controller++) {
    2884:	c0 e8       	ldi	r28, 0x80	; 128
    2886:	0b c0       	rjmp	.+22     	; 0x289e <init_ROBO+0x20>
		// get saved encoder value from FRAM
		encoderValue = 22 * ROBOCOUNTSPERMICRON;	// Proxy for now
		if (set_ROBOEncoder(controller, encoderValue) == ERROR) {
    2888:	48 e0       	ldi	r20, 0x08	; 8
    288a:	57 e1       	ldi	r21, 0x17	; 23
    288c:	60 e0       	ldi	r22, 0x00	; 0
    288e:	70 e0       	ldi	r23, 0x00	; 0
    2890:	8c 2f       	mov	r24, r28
    2892:	0e 94 00 14 	call	0x2800	; 0x2800 <set_ROBOEncoder>
    2896:	83 36       	cpi	r24, 0x63	; 99
    2898:	09 f4       	brne	.+2      	; 0x289c <init_ROBO+0x1e>
			error++;
    289a:	df 5f       	subi	r29, 0xFF	; 255
{

	uint8_t controller, error = 0;
	uint32_t encoderValue;

	for (controller = 128; controller < 131; controller++) {
    289c:	cf 5f       	subi	r28, 0xFF	; 255
    289e:	c3 38       	cpi	r28, 0x83	; 131
    28a0:	98 f3       	brcs	.-26     	; 0x2888 <init_ROBO+0xa>
		encoderValue = 22 * ROBOCOUNTSPERMICRON;	// Proxy for now
		if (set_ROBOEncoder(controller, encoderValue) == ERROR) {
			error++;
		}
	}
	if (error) {
    28a2:	dd 23       	and	r29, r29
    28a4:	11 f0       	breq	.+4      	; 0x28aa <init_ROBO+0x2c>
		return(ERROR);
    28a6:	83 e6       	ldi	r24, 0x63	; 99
    28a8:	01 c0       	rjmp	.+2      	; 0x28ac <init_ROBO+0x2e>
	} else {
		return(NOERROR);
    28aa:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    28ac:	df 91       	pop	r29
    28ae:	cf 91       	pop	r28
    28b0:	08 95       	ret

000028b2 <crc16>:

	Returns:
		The CRC16 value as an unsigned 16-bit word
------------------------------------------------------------------------------*/
uint16_t crc16(unsigned char *packet, uint16_t nBytes)
{
    28b2:	dc 01       	movw	r26, r24

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    28b4:	40 e0       	ldi	r20, 0x00	; 0
    28b6:	50 e0       	ldi	r21, 0x00	; 0
------------------------------------------------------------------------------*/
uint16_t crc16(unsigned char *packet, uint16_t nBytes)
{

	uint8_t bit;
	uint16_t crc = 0;
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	90 e0       	ldi	r25, 0x00	; 0
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    28bc:	1b c0       	rjmp	.+54     	; 0x28f4 <crc16+0x42>
		crc = crc ^ ((uint16_t) packet[byte] << 8);
    28be:	fd 01       	movw	r30, r26
    28c0:	e4 0f       	add	r30, r20
    28c2:	f5 1f       	adc	r31, r21
    28c4:	20 81       	ld	r18, Z
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	32 2f       	mov	r19, r18
    28ca:	22 27       	eor	r18, r18
    28cc:	82 27       	eor	r24, r18
    28ce:	93 27       	eor	r25, r19
		for (bit = 0; bit < 8; bit++) {
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	0c c0       	rjmp	.+24     	; 0x28ec <crc16+0x3a>
			if (crc & 0x8000) {
    28d4:	99 23       	and	r25, r25
    28d6:	3c f4       	brge	.+14     	; 0x28e6 <crc16+0x34>
				crc = (crc << 1) ^ 0x1021;
    28d8:	88 0f       	add	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	31 e2       	ldi	r19, 0x21	; 33
    28de:	83 27       	eor	r24, r19
    28e0:	30 e1       	ldi	r19, 0x10	; 16
    28e2:	93 27       	eor	r25, r19
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <crc16+0x38>
			} else {
				crc = crc << 1;
    28e6:	88 0f       	add	r24, r24
    28e8:	99 1f       	adc	r25, r25
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
		crc = crc ^ ((uint16_t) packet[byte] << 8);
		for (bit = 0; bit < 8; bit++) {
    28ea:	2f 5f       	subi	r18, 0xFF	; 255
    28ec:	28 30       	cpi	r18, 0x08	; 8
    28ee:	90 f3       	brcs	.-28     	; 0x28d4 <crc16+0x22>

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    28f0:	4f 5f       	subi	r20, 0xFF	; 255
    28f2:	5f 4f       	sbci	r21, 0xFF	; 255
    28f4:	46 17       	cp	r20, r22
    28f6:	57 07       	cpc	r21, r23
    28f8:	10 f3       	brcs	.-60     	; 0x28be <crc16+0xc>
				crc = crc << 1;
			}
		}
	}
	return (crc);
    28fa:	08 95       	ret

000028fc <ROBOGoTo>:
	Returns:
		ERROR if an error occured
		NOERROR on success
------------------------------------------------------------------------------*/
uint8_t ROBOGoTo(uint8_t controller, int32_t newPosition)
{
    28fc:	cf 93       	push	r28
    28fe:	df 93       	push	r29
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
    2904:	65 97       	sbiw	r28, 0x15	; 21
    2906:	cd bf       	out	0x3d, r28	; 61
    2908:	de bf       	out	0x3e, r29	; 62
	acceleration = ACCELERATION;
	deceleration = DECELERATION;
	speed = SPEED;
	buffer = 0;							// 0 -> command is buffered

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    290a:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <recv1_buf>
	recv1_buf.nbytes = 1;
    290e:	91 e0       	ldi	r25, 0x01	; 1
    2910:	90 93 13 2b 	sts	0x2B13, r25	; 0x802b13 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2914:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2918:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>

	tbuf[0] = controller;
    291c:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBODRIVETO;				// Command 65
    291e:	81 e4       	ldi	r24, 0x41	; 65
    2920:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (acceleration >> 24) & 0XFF;
    2922:	1b 82       	std	Y+3, r1	; 0x03
	tbuf[3] = (acceleration >> 16) & 0xFF;
    2924:	1c 82       	std	Y+4, r1	; 0x04
	tbuf[4] = (acceleration >> 8) & 0xFF;
    2926:	80 e2       	ldi	r24, 0x20	; 32
    2928:	8d 83       	std	Y+5, r24	; 0x05
	tbuf[5] = (acceleration) & 0xFF;
    292a:	1e 82       	std	Y+6, r1	; 0x06
	tbuf[6] = (speed >> 24) & 0xFF;
    292c:	1f 82       	std	Y+7, r1	; 0x07
	tbuf[7] = (speed >> 16) & 0xFF;
    292e:	18 86       	std	Y+8, r1	; 0x08
	tbuf[8] = (speed >> 8) & 0xFF;
    2930:	90 e4       	ldi	r25, 0x40	; 64
    2932:	99 87       	std	Y+9, r25	; 0x09
	tbuf[9] = (speed) & 0xFF;
    2934:	1a 86       	std	Y+10, r1	; 0x0a
	tbuf[10] = (deceleration >> 24) & 0xFF;
    2936:	1b 86       	std	Y+11, r1	; 0x0b
	tbuf[11] = (deceleration >> 16) & 0xFF;
    2938:	1c 86       	std	Y+12, r1	; 0x0c
	tbuf[12] = (deceleration >> 8) & 0xFF;
    293a:	8d 87       	std	Y+13, r24	; 0x0d
	tbuf[13] = (deceleration) & 0xFF;
    293c:	1e 86       	std	Y+14, r1	; 0x0e
	tbuf[14] = (newPosition >> 24) & 0xFF;
    293e:	7f 87       	std	Y+15, r23	; 0x0f
	tbuf[15] = (newPosition >> 16) & 0xFF;
    2940:	68 8b       	std	Y+16, r22	; 0x10
	tbuf[16] = (newPosition >> 8) & 0xFF;
    2942:	59 8b       	std	Y+17, r21	; 0x11
	tbuf[17] = (newPosition) & 0xFF;
    2944:	4a 8b       	std	Y+18, r20	; 0x12
	tbuf[18] = buffer;
    2946:	1b 8a       	std	Y+19, r1	; 0x13
	crc = crc16(tbuf, 19);
    2948:	63 e1       	ldi	r22, 0x13	; 19
    294a:	70 e0       	ldi	r23, 0x00	; 0
    294c:	ce 01       	movw	r24, r28
    294e:	01 96       	adiw	r24, 0x01	; 1
    2950:	0e 94 59 14 	call	0x28b2	; 0x28b2 <crc16>
	tbuf[19] = (crc >> 8) & 0xFF;
    2954:	9c 8b       	std	Y+20, r25	; 0x14
	tbuf[20] = crc & 0xFF;
    2956:	8d 8b       	std	Y+21, r24	; 0x15

	send_USART(1, tbuf, 21);
    2958:	45 e1       	ldi	r20, 0x15	; 21
    295a:	be 01       	movw	r22, r28
    295c:	6f 5f       	subi	r22, 0xFF	; 255
    295e:	7f 4f       	sbci	r23, 0xFF	; 255
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>

	start_TCB0(1);				// Start 1 ms ticks timer
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	0e 94 0c 18 	call	0x3018	; 0x3018 <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Data received
    296e:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv1_buf+0x104>
    2972:	81 30       	cpi	r24, 0x01	; 1
    2974:	81 f0       	breq	.+32     	; 0x2996 <ROBOGoTo+0x9a>
			break;
		}
		if (ticks > 50) {		// 4 ms just barely works at 38400 baud
    2976:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <ticks>
    297a:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <ticks+0x1>
    297e:	c3 97       	sbiw	r24, 0x33	; 51
    2980:	b0 f3       	brcs	.-20     	; 0x296e <ROBOGoTo+0x72>
			stop_TCB0();
    2982:	0e 94 22 18 	call	0x3044	; 0x3044 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "Timeout ROBOGoTo reply");
    2986:	61 e3       	ldi	r22, 0x31	; 49
    2988:	79 e8       	ldi	r23, 0x89	; 137
    298a:	8f e2       	ldi	r24, 0x2F	; 47
    298c:	91 e0       	ldi	r25, 0x01	; 1
    298e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
			return(ERROR);
    2992:	83 e6       	ldi	r24, 0x63	; 99
    2994:	0f c0       	rjmp	.+30     	; 0x29b4 <ROBOGoTo+0xb8>
		}
	}
	stop_TCB0();
    2996:	0e 94 22 18 	call	0x3044	; 0x3044 <stop_TCB0>

	if (recv1_buf.data[0] != 0xFF) {
    299a:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <recv1_buf>
    299e:	8f 3f       	cpi	r24, 0xFF	; 255
    29a0:	41 f0       	breq	.+16     	; 0x29b2 <ROBOGoTo+0xb6>
		printError(ERR_MTRTIMEOUT, "Bad reply (not 0xFF) ROBOGoTo");		
    29a2:	68 e4       	ldi	r22, 0x48	; 72
    29a4:	79 e8       	ldi	r23, 0x89	; 137
    29a6:	8f e2       	ldi	r24, 0x2F	; 47
    29a8:	91 e0       	ldi	r25, 0x01	; 1
    29aa:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
		return(ERROR);
    29ae:	83 e6       	ldi	r24, 0x63	; 99
    29b0:	01 c0       	rjmp	.+2      	; 0x29b4 <ROBOGoTo+0xb8>
	}

	return(NOERROR);
    29b2:	80 e0       	ldi	r24, 0x00	; 0
}
    29b4:	65 96       	adiw	r28, 0x15	; 21
    29b6:	cd bf       	out	0x3d, r28	; 61
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	08 95       	ret

000029c0 <get_ROBOEncoder>:
			Bit1 - Direction (0=forward, 1-backwards)
			Bit2 - Counter overflow (1=overflow occurred, clear after reading)
			Bits 3-7 are "reserved" and masked out here since Bit7 returns 1
------------------------------------------------------------------------------*/
uint8_t get_ROBOEncoder(uint8_t controller, uint8_t command, int32_t *value)
{
    29c0:	ef 92       	push	r14
    29c2:	ff 92       	push	r15
    29c4:	0f 93       	push	r16
    29c6:	1f 93       	push	r17
    29c8:	cf 93       	push	r28
    29ca:	df 93       	push	r29
    29cc:	cd b7       	in	r28, 0x3d	; 61
    29ce:	de b7       	in	r29, 0x3e	; 62
    29d0:	27 97       	sbiw	r28, 0x07	; 7
    29d2:	cd bf       	out	0x3d, r28	; 61
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	8a 01       	movw	r16, r20
	uint8_t i, tbuf[7];
	uint16_t crcReceived, crcExpected;

	recv1_buf.nbytes = 7;
    29d8:	97 e0       	ldi	r25, 0x07	; 7
    29da:	90 93 13 2b 	sts	0x2B13, r25	; 0x802b13 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    29de:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0x103>
	recv1_buf.done = NO;
    29e2:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>

	tbuf[0] = controller;
    29e6:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    29e8:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);
    29ea:	42 e0       	ldi	r20, 0x02	; 2
    29ec:	be 01       	movw	r22, r28
    29ee:	6f 5f       	subi	r22, 0xFF	; 255
    29f0:	7f 4f       	sbci	r23, 0xFF	; 255
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>
	start_TCB0(1);
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	0e 94 0c 18 	call	0x3018	; 0x3018 <start_TCB0>
	while (recv1_buf.done == NO) {
    2a00:	11 c0       	rjmp	.+34     	; 0x2a24 <get_ROBOEncoder+0x64>
		asm("nop");
    2a02:	00 00       	nop
		if (ticks > 50) {
    2a04:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <ticks>
    2a08:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <ticks+0x1>
    2a0c:	c3 97       	sbiw	r24, 0x33	; 51
    2a0e:	50 f0       	brcs	.+20     	; 0x2a24 <get_ROBOEncoder+0x64>
			stop_TCB0();
    2a10:	0e 94 22 18 	call	0x3044	; 0x3044 <stop_TCB0>
			printError(ERR_MTRENCREAD, "ROBOEncoder read timeout");
    2a14:	66 e6       	ldi	r22, 0x66	; 102
    2a16:	79 e8       	ldi	r23, 0x89	; 137
    2a18:	80 e3       	ldi	r24, 0x30	; 48
    2a1a:	91 e0       	ldi	r25, 0x01	; 1
    2a1c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
			return(ERROR);
    2a20:	83 e6       	ldi	r24, 0x63	; 99
    2a22:	74 c0       	rjmp	.+232    	; 0x2b0c <get_ROBOEncoder+0x14c>

	tbuf[0] = controller;
	tbuf[1] = command;
	send_USART(1, tbuf, 2);
	start_TCB0(1);
	while (recv1_buf.done == NO) {
    2a24:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv1_buf+0x104>
    2a28:	88 23       	and	r24, r24
    2a2a:	59 f3       	breq	.-42     	; 0x2a02 <get_ROBOEncoder+0x42>
			stop_TCB0();
			printError(ERR_MTRENCREAD, "ROBOEncoder read timeout");
			return(ERROR);
		}
	}
	stop_TCB0();
    2a2c:	0e 94 22 18 	call	0x3044	; 0x3044 <stop_TCB0>

	crcReceived = (recv1_buf.data[5] << 8) | recv1_buf.data[6];
    2a30:	e2 e1       	ldi	r30, 0x12	; 18
    2a32:	fa e2       	ldi	r31, 0x2A	; 42
    2a34:	e5 80       	ldd	r14, Z+5	; 0x05
    2a36:	f1 2c       	mov	r15, r1
    2a38:	fe 2c       	mov	r15, r14
    2a3a:	ee 24       	eor	r14, r14
    2a3c:	86 81       	ldd	r24, Z+6	; 0x06
    2a3e:	e8 2a       	or	r14, r24

	for (i = 2; i < 7; i++) {
    2a40:	22 e0       	ldi	r18, 0x02	; 2
    2a42:	0e c0       	rjmp	.+28     	; 0x2a60 <get_ROBOEncoder+0xa0>
		tbuf[i] = recv1_buf.data[i-2];
    2a44:	82 2f       	mov	r24, r18
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	fc 01       	movw	r30, r24
    2a4a:	e0 5f       	subi	r30, 0xF0	; 240
    2a4c:	f5 4d       	sbci	r31, 0xD5	; 213
    2a4e:	30 81       	ld	r19, Z
    2a50:	e1 e0       	ldi	r30, 0x01	; 1
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	ec 0f       	add	r30, r28
    2a56:	fd 1f       	adc	r31, r29
    2a58:	e8 0f       	add	r30, r24
    2a5a:	f9 1f       	adc	r31, r25
    2a5c:	30 83       	st	Z, r19
	}
	stop_TCB0();

	crcReceived = (recv1_buf.data[5] << 8) | recv1_buf.data[6];

	for (i = 2; i < 7; i++) {
    2a5e:	2f 5f       	subi	r18, 0xFF	; 255
    2a60:	27 30       	cpi	r18, 0x07	; 7
    2a62:	80 f3       	brcs	.-32     	; 0x2a44 <get_ROBOEncoder+0x84>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 7);
    2a64:	67 e0       	ldi	r22, 0x07	; 7
    2a66:	70 e0       	ldi	r23, 0x00	; 0
    2a68:	ce 01       	movw	r24, r28
    2a6a:	01 96       	adiw	r24, 0x01	; 1
    2a6c:	0e 94 59 14 	call	0x28b2	; 0x28b2 <crc16>

	if (crcReceived != crcExpected) {
    2a70:	e8 16       	cp	r14, r24
    2a72:	f9 06       	cpc	r15, r25
    2a74:	71 f0       	breq	.+28     	; 0x2a92 <get_ROBOEncoder+0xd2>
		*value = 0;
    2a76:	d8 01       	movw	r26, r16
    2a78:	1d 92       	st	X+, r1
    2a7a:	1d 92       	st	X+, r1
    2a7c:	1d 92       	st	X+, r1
    2a7e:	1c 92       	st	X, r1
    2a80:	13 97       	sbiw	r26, 0x03	; 3
		printError(ERR_MTRENCCRC, "ROBOEncoder CRC error");
    2a82:	6f e7       	ldi	r22, 0x7F	; 127
    2a84:	79 e8       	ldi	r23, 0x89	; 137
    2a86:	81 e3       	ldi	r24, 0x31	; 49
    2a88:	91 e0       	ldi	r25, 0x01	; 1
    2a8a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
		return(ERROR);
    2a8e:	83 e6       	ldi	r24, 0x63	; 99
    2a90:	3d c0       	rjmp	.+122    	; 0x2b0c <get_ROBOEncoder+0x14c>
	}

	*value =  (uint32_t) recv1_buf.data[0] << 24;
    2a92:	22 e1       	ldi	r18, 0x12	; 18
    2a94:	3a e2       	ldi	r19, 0x2A	; 42
    2a96:	f9 01       	movw	r30, r18
    2a98:	80 81       	ld	r24, Z
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	a0 e0       	ldi	r26, 0x00	; 0
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	78 2f       	mov	r23, r24
    2aa2:	66 27       	eor	r22, r22
    2aa4:	55 27       	eor	r21, r21
    2aa6:	44 27       	eor	r20, r20
    2aa8:	d8 01       	movw	r26, r16
    2aaa:	4d 93       	st	X+, r20
    2aac:	5d 93       	st	X+, r21
    2aae:	6d 93       	st	X+, r22
    2ab0:	7c 93       	st	X, r23
    2ab2:	13 97       	sbiw	r26, 0x03	; 3
	*value |= (uint32_t) recv1_buf.data[1] << 16;
    2ab4:	91 81       	ldd	r25, Z+1	; 0x01
    2ab6:	89 2f       	mov	r24, r25
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	a0 e0       	ldi	r26, 0x00	; 0
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	dc 01       	movw	r26, r24
    2ac0:	99 27       	eor	r25, r25
    2ac2:	88 27       	eor	r24, r24
    2ac4:	84 2b       	or	r24, r20
    2ac6:	95 2b       	or	r25, r21
    2ac8:	a6 2b       	or	r26, r22
    2aca:	b7 2b       	or	r27, r23
    2acc:	f8 01       	movw	r30, r16
    2ace:	80 83       	st	Z, r24
    2ad0:	91 83       	std	Z+1, r25	; 0x01
    2ad2:	a2 83       	std	Z+2, r26	; 0x02
    2ad4:	b3 83       	std	Z+3, r27	; 0x03
	*value |= (uint32_t) recv1_buf.data[2] << 8;
    2ad6:	f9 01       	movw	r30, r18
    2ad8:	42 81       	ldd	r20, Z+2	; 0x02
    2ada:	50 e0       	ldi	r21, 0x00	; 0
    2adc:	60 e0       	ldi	r22, 0x00	; 0
    2ade:	70 e0       	ldi	r23, 0x00	; 0
    2ae0:	76 2f       	mov	r23, r22
    2ae2:	65 2f       	mov	r22, r21
    2ae4:	54 2f       	mov	r21, r20
    2ae6:	44 27       	eor	r20, r20
    2ae8:	84 2b       	or	r24, r20
    2aea:	95 2b       	or	r25, r21
    2aec:	a6 2b       	or	r26, r22
    2aee:	b7 2b       	or	r27, r23
    2af0:	f8 01       	movw	r30, r16
    2af2:	80 83       	st	Z, r24
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	a2 83       	std	Z+2, r26	; 0x02
    2af8:	b3 83       	std	Z+3, r27	; 0x03
	*value |= (uint32_t) recv1_buf.data[3];
    2afa:	f9 01       	movw	r30, r18
    2afc:	23 81       	ldd	r18, Z+3	; 0x03
    2afe:	82 2b       	or	r24, r18
    2b00:	f8 01       	movw	r30, r16
    2b02:	80 83       	st	Z, r24
    2b04:	91 83       	std	Z+1, r25	; 0x01
    2b06:	a2 83       	std	Z+2, r26	; 0x02
    2b08:	b3 83       	std	Z+3, r27	; 0x03

	return(NOERROR);
    2b0a:	80 e0       	ldi	r24, 0x00	; 0

}
    2b0c:	27 96       	adiw	r28, 0x07	; 7
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	df 91       	pop	r29
    2b14:	cf 91       	pop	r28
    2b16:	1f 91       	pop	r17
    2b18:	0f 91       	pop	r16
    2b1a:	ff 90       	pop	r15
    2b1c:	ef 90       	pop	r14
    2b1e:	08 95       	ret

00002b20 <ROBOMove>:

	Output:
		ERROR if an unknown motor designator (A, B, C, or a, b, c) is read.
------------------------------------------------------------------------------*/
uint8_t ROBOMove(uint8_t cstack)
{
    2b20:	ff 92       	push	r15
    2b22:	0f 93       	push	r16
    2b24:	1f 93       	push	r17
    2b26:	cf 93       	push	r28
    2b28:	df 93       	push	r29
    2b2a:	00 d0       	rcall	.+0      	; 0x2b2c <ROBOMove+0xc>
    2b2c:	00 d0       	rcall	.+0      	; 0x2b2e <ROBOMove+0xe>
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
	uint8_t motor, controller, retval;
	int32_t newPosition, currentPosition;

	motor = pcmd[cstack].cobject;
    2b32:	08 2f       	mov	r16, r24
    2b34:	10 e0       	ldi	r17, 0x00	; 0
    2b36:	84 e3       	ldi	r24, 0x34	; 52
    2b38:	80 9f       	mul	r24, r16
    2b3a:	f0 01       	movw	r30, r0
    2b3c:	81 9f       	mul	r24, r17
    2b3e:	f0 0d       	add	r31, r0
    2b40:	11 24       	eor	r1, r1
    2b42:	ed 5f       	subi	r30, 0xFD	; 253
    2b44:	f7 4d       	sbci	r31, 0xD7	; 215
    2b46:	81 81       	ldd	r24, Z+1	; 0x01
	switch(motor) {
    2b48:	81 34       	cpi	r24, 0x41	; 65
    2b4a:	00 f1       	brcs	.+64     	; 0x2b8c <ROBOMove+0x6c>
    2b4c:	84 34       	cpi	r24, 0x44	; 68
    2b4e:	28 f0       	brcs	.+10     	; 0x2b5a <ROBOMove+0x3a>
    2b50:	9f e9       	ldi	r25, 0x9F	; 159
    2b52:	98 0f       	add	r25, r24
    2b54:	93 30       	cpi	r25, 0x03	; 3
    2b56:	58 f0       	brcs	.+22     	; 0x2b6e <ROBOMove+0x4e>
    2b58:	19 c0       	rjmp	.+50     	; 0x2b8c <ROBOMove+0x6c>
		case 'A':
		case 'B':
		case 'C':
			controller = motor + 63;
    2b5a:	0f 2e       	mov	r0, r31
    2b5c:	ff e3       	ldi	r31, 0x3F	; 63
    2b5e:	ff 2e       	mov	r15, r31
    2b60:	f0 2d       	mov	r31, r0
    2b62:	f8 0e       	add	r15, r24
			currentPosition = 0;
    2b64:	19 82       	std	Y+1, r1	; 0x01
    2b66:	1a 82       	std	Y+2, r1	; 0x02
    2b68:	1b 82       	std	Y+3, r1	; 0x03
    2b6a:	1c 82       	std	Y+4, r1	; 0x04
			break;
    2b6c:	17 c0       	rjmp	.+46     	; 0x2b9c <ROBOMove+0x7c>
		case 'a':
		case 'b':
		case 'c':
			controller = motor + 31;
    2b6e:	0f 2e       	mov	r0, r31
    2b70:	ff e1       	ldi	r31, 0x1F	; 31
    2b72:	ff 2e       	mov	r15, r31
    2b74:	f0 2d       	mov	r31, r0
    2b76:	f8 0e       	add	r15, r24
			retval = get_ROBOEncoder(controller, ROBOREADENCODERCOUNT, &currentPosition);
    2b78:	ae 01       	movw	r20, r28
    2b7a:	4f 5f       	subi	r20, 0xFF	; 255
    2b7c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b7e:	60 e1       	ldi	r22, 0x10	; 16
    2b80:	8f 2d       	mov	r24, r15
    2b82:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <get_ROBOEncoder>
			if (retval == ERROR) {
    2b86:	83 36       	cpi	r24, 0x63	; 99
    2b88:	49 f4       	brne	.+18     	; 0x2b9c <ROBOMove+0x7c>
    2b8a:	26 c0       	rjmp	.+76     	; 0x2bd8 <ROBOMove+0xb8>
				return(ERROR);
			}
			break;

		default:
			printError(ERR_UNKNOWNMTR, "ROBOMove invalid motor designator");
    2b8c:	65 e9       	ldi	r22, 0x95	; 149
    2b8e:	79 e8       	ldi	r23, 0x89	; 137
    2b90:	8d e2       	ldi	r24, 0x2D	; 45
    2b92:	91 e0       	ldi	r25, 0x01	; 1
    2b94:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
			return(ERROR);
    2b98:	83 e6       	ldi	r24, 0x63	; 99
    2b9a:	1f c0       	rjmp	.+62     	; 0x2bda <ROBOMove+0xba>
			break;	
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);
    2b9c:	24 e3       	ldi	r18, 0x34	; 52
    2b9e:	20 9f       	mul	r18, r16
    2ba0:	c0 01       	movw	r24, r0
    2ba2:	21 9f       	mul	r18, r17
    2ba4:	90 0d       	add	r25, r0
    2ba6:	11 24       	eor	r1, r1
    2ba8:	8b 5f       	subi	r24, 0xFB	; 251
    2baa:	97 4d       	sbci	r25, 0xD7	; 215
    2bac:	0e 94 18 21 	call	0x4230	; 0x4230 <atol>
    2bb0:	9b 01       	movw	r18, r22
    2bb2:	ac 01       	movw	r20, r24
    2bb4:	ac e0       	ldi	r26, 0x0C	; 12
    2bb6:	b1 e0       	ldi	r27, 0x01	; 1
    2bb8:	0e 94 97 20 	call	0x412e	; 0x412e <__muluhisi3>
    2bbc:	09 81       	ldd	r16, Y+1	; 0x01
    2bbe:	1a 81       	ldd	r17, Y+2	; 0x02
    2bc0:	2b 81       	ldd	r18, Y+3	; 0x03
    2bc2:	3c 81       	ldd	r19, Y+4	; 0x04
    2bc4:	ab 01       	movw	r20, r22
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	40 0f       	add	r20, r16
    2bca:	51 1f       	adc	r21, r17
    2bcc:	62 1f       	adc	r22, r18
    2bce:	73 1f       	adc	r23, r19

	return(ROBOGoTo(controller, newPosition));
    2bd0:	8f 2d       	mov	r24, r15
    2bd2:	0e 94 7e 14 	call	0x28fc	; 0x28fc <ROBOGoTo>
    2bd6:	01 c0       	rjmp	.+2      	; 0x2bda <ROBOMove+0xba>
		case 'b':
		case 'c':
			controller = motor + 31;
			retval = get_ROBOEncoder(controller, ROBOREADENCODERCOUNT, &currentPosition);
			if (retval == ERROR) {
				return(ERROR);
    2bd8:	83 e6       	ldi	r24, 0x63	; 99

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);

	return(ROBOGoTo(controller, newPosition));

}
    2bda:	24 96       	adiw	r28, 0x04	; 4
    2bdc:	cd bf       	out	0x3d, r28	; 61
    2bde:	de bf       	out	0x3e, r29	; 62
    2be0:	df 91       	pop	r29
    2be2:	cf 91       	pop	r28
    2be4:	1f 91       	pop	r17
    2be6:	0f 91       	pop	r16
    2be8:	ff 90       	pop	r15
    2bea:	08 95       	ret

00002bec <get_ROBOFloat>:
	Returns:
		ERROR - on error
		NOERROR - no error
------------------------------------------------------------------------------*/
uint8_t get_ROBOFloat(uint8_t controller, uint8_t command, float *value)
{
    2bec:	af 92       	push	r10
    2bee:	bf 92       	push	r11
    2bf0:	cf 92       	push	r12
    2bf2:	df 92       	push	r13
    2bf4:	ef 92       	push	r14
    2bf6:	ff 92       	push	r15
    2bf8:	0f 93       	push	r16
    2bfa:	1f 93       	push	r17
    2bfc:	cf 93       	push	r28
    2bfe:	df 93       	push	r29
    2c00:	00 d0       	rcall	.+0      	; 0x2c02 <get_ROBOFloat+0x16>
    2c02:	00 d0       	rcall	.+0      	; 0x2c04 <get_ROBOFloat+0x18>
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62
    2c08:	a8 2e       	mov	r10, r24
    2c0a:	b6 2e       	mov	r11, r22
    2c0c:	7a 01       	movw	r14, r20
	uint8_t tbuf[4];
	uint16_t tempval, crcReceived, crcExpected;

	recv1_buf.nbytes = 4;
    2c0e:	84 e0       	ldi	r24, 0x04	; 4
    2c10:	80 93 13 2b 	sts	0x2B13, r24	; 0x802b13 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2c14:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2c18:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>

	tbuf[0] = controller;
    2c1c:	a9 82       	std	Y+1, r10	; 0x01
	tbuf[1] = command;
    2c1e:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);
    2c20:	42 e0       	ldi	r20, 0x02	; 2
    2c22:	be 01       	movw	r22, r28
    2c24:	6f 5f       	subi	r22, 0xFF	; 255
    2c26:	7f 4f       	sbci	r23, 0xFF	; 255
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>

	start_TCB0(1);
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	0e 94 0c 18 	call	0x3018	; 0x3018 <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {
    2c36:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv1_buf+0x104>
    2c3a:	81 30       	cpi	r24, 0x01	; 1
    2c3c:	81 f0       	breq	.+32     	; 0x2c5e <get_ROBOFloat+0x72>
			break;
		}
		if (ticks > 50) {
    2c3e:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <ticks>
    2c42:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <ticks+0x1>
    2c46:	c3 97       	sbiw	r24, 0x33	; 51
    2c48:	b0 f3       	brcs	.-20     	; 0x2c36 <get_ROBOFloat+0x4a>
			stop_TCB0();
    2c4a:	0e 94 22 18 	call	0x3044	; 0x3044 <stop_TCB0>
			printError(ERR_MTRENCREAD, "ROBOFloat timeout");
    2c4e:	67 eb       	ldi	r22, 0xB7	; 183
    2c50:	79 e8       	ldi	r23, 0x89	; 137
    2c52:	80 e3       	ldi	r24, 0x30	; 48
    2c54:	91 e0       	ldi	r25, 0x01	; 1
    2c56:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
			return(ERROR);
    2c5a:	83 e6       	ldi	r24, 0x63	; 99
    2c5c:	36 c0       	rjmp	.+108    	; 0x2cca <get_ROBOFloat+0xde>
		}
	}
	stop_TCB0();
    2c5e:	0e 94 22 18 	call	0x3044	; 0x3044 <stop_TCB0>

	tempval = (recv1_buf.data[0] << 8) | recv1_buf.data[1];
    2c62:	e2 e1       	ldi	r30, 0x12	; 18
    2c64:	fa e2       	ldi	r31, 0x2A	; 42
    2c66:	90 81       	ld	r25, Z
    2c68:	c9 2e       	mov	r12, r25
    2c6a:	d1 2c       	mov	r13, r1
    2c6c:	dc 2c       	mov	r13, r12
    2c6e:	cc 24       	eor	r12, r12
    2c70:	81 81       	ldd	r24, Z+1	; 0x01
    2c72:	c8 2a       	or	r12, r24
	crcReceived = (recv1_buf.data[2] << 8) | recv1_buf.data[3];
    2c74:	02 81       	ldd	r16, Z+2	; 0x02
    2c76:	10 e0       	ldi	r17, 0x00	; 0
    2c78:	10 2f       	mov	r17, r16
    2c7a:	00 27       	eor	r16, r16
    2c7c:	23 81       	ldd	r18, Z+3	; 0x03
    2c7e:	02 2b       	or	r16, r18
	recv1_buf.data[2] = recv1_buf.data[0];
    2c80:	92 83       	std	Z+2, r25	; 0x02
	recv1_buf.data[3] = recv1_buf.data[1];
    2c82:	83 83       	std	Z+3, r24	; 0x03
	recv1_buf.data[0] = controller;
    2c84:	a0 82       	st	Z, r10
	recv1_buf.data[1] = command;
    2c86:	b1 82       	std	Z+1, r11	; 0x01
	crcExpected = crc16(recv1_buf.data, 4);
    2c88:	64 e0       	ldi	r22, 0x04	; 4
    2c8a:	70 e0       	ldi	r23, 0x00	; 0
    2c8c:	cf 01       	movw	r24, r30
    2c8e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <crc16>
	if (crcExpected != crcReceived) {
    2c92:	08 17       	cp	r16, r24
    2c94:	19 07       	cpc	r17, r25
    2c96:	41 f0       	breq	.+16     	; 0x2ca8 <get_ROBOFloat+0xbc>
		printError(ERR_MTRENCCRC, "ROBOFloat CRC error");
    2c98:	69 ec       	ldi	r22, 0xC9	; 201
    2c9a:	79 e8       	ldi	r23, 0x89	; 137
    2c9c:	81 e3       	ldi	r24, 0x31	; 49
    2c9e:	91 e0       	ldi	r25, 0x01	; 1
    2ca0:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
		return(ERROR);
    2ca4:	83 e6       	ldi	r24, 0x63	; 99
    2ca6:	11 c0       	rjmp	.+34     	; 0x2cca <get_ROBOFloat+0xde>
	} else {
		*value = ((float) tempval / 10.0);
    2ca8:	b6 01       	movw	r22, r12
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	0e 94 bd 1b 	call	0x377a	; 0x377a <__floatunsisf>
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	40 e2       	ldi	r20, 0x20	; 32
    2cb8:	51 e4       	ldi	r21, 0x41	; 65
    2cba:	0e 94 4b 1b 	call	0x3696	; 0x3696 <__divsf3>
    2cbe:	f7 01       	movw	r30, r14
    2cc0:	60 83       	st	Z, r22
    2cc2:	71 83       	std	Z+1, r23	; 0x01
    2cc4:	82 83       	std	Z+2, r24	; 0x02
    2cc6:	93 83       	std	Z+3, r25	; 0x03
		return(NOERROR);
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2cca:	24 96       	adiw	r28, 0x04	; 4
    2ccc:	cd bf       	out	0x3d, r28	; 61
    2cce:	de bf       	out	0x3e, r29	; 62
    2cd0:	df 91       	pop	r29
    2cd2:	cf 91       	pop	r28
    2cd4:	1f 91       	pop	r17
    2cd6:	0f 91       	pop	r16
    2cd8:	ff 90       	pop	r15
    2cda:	ef 90       	pop	r14
    2cdc:	df 90       	pop	r13
    2cde:	cf 90       	pop	r12
    2ce0:	bf 90       	pop	r11
    2ce2:	af 90       	pop	r10
    2ce4:	08 95       	ret

00002ce6 <get_ROBOInt32>:

	Returns:
		
------------------------------------------------------------------------------*/
uint8_t get_ROBOInt32(uint8_t controller, uint8_t command, uint32_t *value)
{
    2ce6:	ef 92       	push	r14
    2ce8:	ff 92       	push	r15
    2cea:	0f 93       	push	r16
    2cec:	1f 93       	push	r17
    2cee:	cf 93       	push	r28
    2cf0:	df 93       	push	r29
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
    2cf6:	26 97       	sbiw	r28, 0x06	; 6
    2cf8:	cd bf       	out	0x3d, r28	; 61
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	8a 01       	movw	r16, r20
	uint8_t i, tbuf[6];
	uint16_t crcReceived, crcExpected;
	uint32_t tempval;

	recv1_buf.nbytes = 6;
    2cfe:	96 e0       	ldi	r25, 0x06	; 6
    2d00:	90 93 13 2b 	sts	0x2B13, r25	; 0x802b13 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2d04:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2d08:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>

	tbuf[0] = controller;
    2d0c:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    2d0e:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);
    2d10:	42 e0       	ldi	r20, 0x02	; 2
    2d12:	be 01       	movw	r22, r28
    2d14:	6f 5f       	subi	r22, 0xFF	; 255
    2d16:	7f 4f       	sbci	r23, 0xFF	; 255
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>
	start_TCB0(1);
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	0e 94 0c 18 	call	0x3018	; 0x3018 <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {
    2d26:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv1_buf+0x104>
    2d2a:	81 30       	cpi	r24, 0x01	; 1
    2d2c:	81 f0       	breq	.+32     	; 0x2d4e <get_ROBOInt32+0x68>
			break;
		}
		if (ticks > 50) {
    2d2e:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <ticks>
    2d32:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <ticks+0x1>
    2d36:	c3 97       	sbiw	r24, 0x33	; 51
    2d38:	b0 f3       	brcs	.-20     	; 0x2d26 <get_ROBOInt32+0x40>
			stop_TCB0();
    2d3a:	0e 94 22 18 	call	0x3044	; 0x3044 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "get_ROBOInt32 timeout");
    2d3e:	6d ed       	ldi	r22, 0xDD	; 221
    2d40:	79 e8       	ldi	r23, 0x89	; 137
    2d42:	8f e2       	ldi	r24, 0x2F	; 47
    2d44:	91 e0       	ldi	r25, 0x01	; 1
    2d46:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
			return(ERROR);
    2d4a:	83 e6       	ldi	r24, 0x63	; 99
    2d4c:	60 c0       	rjmp	.+192    	; 0x2e0e <get_ROBOInt32+0x128>
		}
	}
	stop_TCB0();
    2d4e:	0e 94 22 18 	call	0x3044	; 0x3044 <stop_TCB0>

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];
    2d52:	e2 e1       	ldi	r30, 0x12	; 18
    2d54:	fa e2       	ldi	r31, 0x2A	; 42
    2d56:	e4 80       	ldd	r14, Z+4	; 0x04
    2d58:	f1 2c       	mov	r15, r1
    2d5a:	fe 2c       	mov	r15, r14
    2d5c:	ee 24       	eor	r14, r14
    2d5e:	85 81       	ldd	r24, Z+5	; 0x05
    2d60:	e8 2a       	or	r14, r24

	for (i = 2; i < 6; i++) {
    2d62:	22 e0       	ldi	r18, 0x02	; 2
    2d64:	0e c0       	rjmp	.+28     	; 0x2d82 <get_ROBOInt32+0x9c>
		tbuf[i] = recv1_buf.data[i-2];
    2d66:	82 2f       	mov	r24, r18
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	e0 5f       	subi	r30, 0xF0	; 240
    2d6e:	f5 4d       	sbci	r31, 0xD5	; 213
    2d70:	30 81       	ld	r19, Z
    2d72:	e1 e0       	ldi	r30, 0x01	; 1
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	ec 0f       	add	r30, r28
    2d78:	fd 1f       	adc	r31, r29
    2d7a:	e8 0f       	add	r30, r24
    2d7c:	f9 1f       	adc	r31, r25
    2d7e:	30 83       	st	Z, r19
	}
	stop_TCB0();

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {
    2d80:	2f 5f       	subi	r18, 0xFF	; 255
    2d82:	26 30       	cpi	r18, 0x06	; 6
    2d84:	80 f3       	brcs	.-32     	; 0x2d66 <get_ROBOInt32+0x80>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 6);
    2d86:	66 e0       	ldi	r22, 0x06	; 6
    2d88:	70 e0       	ldi	r23, 0x00	; 0
    2d8a:	ce 01       	movw	r24, r28
    2d8c:	01 96       	adiw	r24, 0x01	; 1
    2d8e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <crc16>

	if (crcReceived != crcExpected) {
    2d92:	e8 16       	cp	r14, r24
    2d94:	f9 06       	cpc	r15, r25
    2d96:	89 f0       	breq	.+34     	; 0x2dba <get_ROBOInt32+0xd4>
		printError(ERR_MTRENCCRC, "get_ROBOInt32 CRC error");
    2d98:	63 ef       	ldi	r22, 0xF3	; 243
    2d9a:	79 e8       	ldi	r23, 0x89	; 137
    2d9c:	81 e3       	ldi	r24, 0x31	; 49
    2d9e:	91 e0       	ldi	r25, 0x01	; 1
    2da0:	0e 94 3e 06 	call	0xc7c	; 0xc7c <printError>
		*value = 0x7FFFFFFF;
    2da4:	8f ef       	ldi	r24, 0xFF	; 255
    2da6:	9f ef       	ldi	r25, 0xFF	; 255
    2da8:	af ef       	ldi	r26, 0xFF	; 255
    2daa:	bf e7       	ldi	r27, 0x7F	; 127
    2dac:	f8 01       	movw	r30, r16
    2dae:	80 83       	st	Z, r24
    2db0:	91 83       	std	Z+1, r25	; 0x01
    2db2:	a2 83       	std	Z+2, r26	; 0x02
    2db4:	b3 83       	std	Z+3, r27	; 0x03
		return(ERROR);
    2db6:	83 e6       	ldi	r24, 0x63	; 99
    2db8:	2a c0       	rjmp	.+84     	; 0x2e0e <get_ROBOInt32+0x128>
	}

	tempval =  (uint32_t) recv1_buf.data[0] << 24;
    2dba:	e2 e1       	ldi	r30, 0x12	; 18
    2dbc:	fa e2       	ldi	r31, 0x2A	; 42
    2dbe:	80 81       	ld	r24, Z
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	a0 e0       	ldi	r26, 0x00	; 0
    2dc4:	b0 e0       	ldi	r27, 0x00	; 0
    2dc6:	78 2f       	mov	r23, r24
    2dc8:	66 27       	eor	r22, r22
    2dca:	55 27       	eor	r21, r21
    2dcc:	44 27       	eor	r20, r20
	tempval |= (uint32_t) recv1_buf.data[1] << 16;
    2dce:	91 81       	ldd	r25, Z+1	; 0x01
    2dd0:	89 2f       	mov	r24, r25
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	a0 e0       	ldi	r26, 0x00	; 0
    2dd6:	b0 e0       	ldi	r27, 0x00	; 0
    2dd8:	dc 01       	movw	r26, r24
    2dda:	99 27       	eor	r25, r25
    2ddc:	88 27       	eor	r24, r24
    2dde:	84 2b       	or	r24, r20
    2de0:	95 2b       	or	r25, r21
    2de2:	a6 2b       	or	r26, r22
    2de4:	b7 2b       	or	r27, r23
	tempval |= (uint32_t) recv1_buf.data[2] << 8;
    2de6:	42 81       	ldd	r20, Z+2	; 0x02
    2de8:	50 e0       	ldi	r21, 0x00	; 0
    2dea:	60 e0       	ldi	r22, 0x00	; 0
    2dec:	70 e0       	ldi	r23, 0x00	; 0
    2dee:	76 2f       	mov	r23, r22
    2df0:	65 2f       	mov	r22, r21
    2df2:	54 2f       	mov	r21, r20
    2df4:	44 27       	eor	r20, r20
    2df6:	84 2b       	or	r24, r20
    2df8:	95 2b       	or	r25, r21
    2dfa:	a6 2b       	or	r26, r22
    2dfc:	b7 2b       	or	r27, r23
	tempval |= (uint32_t) recv1_buf.data[3];
    2dfe:	23 81       	ldd	r18, Z+3	; 0x03
    2e00:	82 2b       	or	r24, r18
	*value = tempval;
    2e02:	f8 01       	movw	r30, r16
    2e04:	80 83       	st	Z, r24
    2e06:	91 83       	std	Z+1, r25	; 0x01
    2e08:	a2 83       	std	Z+2, r26	; 0x02
    2e0a:	b3 83       	std	Z+3, r27	; 0x03
	return(NOERROR);
    2e0c:	80 e0       	ldi	r24, 0x00	; 0

}
    2e0e:	26 96       	adiw	r28, 0x06	; 6
    2e10:	cd bf       	out	0x3d, r28	; 61
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	df 91       	pop	r29
    2e16:	cf 91       	pop	r28
    2e18:	1f 91       	pop	r17
    2e1a:	0f 91       	pop	r16
    2e1c:	ff 90       	pop	r15
    2e1e:	ef 90       	pop	r14
    2e20:	08 95       	ret

00002e22 <init_RTC>:
			between interrupts. ticks = 30719 generates an interrupt
			every minute. ticks = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticks)
{
    2e22:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2e24:	e0 e6       	ldi	r30, 0x60	; 96
    2e26:	f0 e0       	ldi	r31, 0x00	; 0
    2e28:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    2e2a:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    2e2c:	88 ed       	ldi	r24, 0xD8	; 216
    2e2e:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2e30:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2e32:	01 c0       	rjmp	.+2      	; 0x2e36 <init_RTC+0x14>
		asm("nop");
    2e34:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2e36:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    2e3a:	96 fd       	sbrc	r25, 6
    2e3c:	fb cf       	rjmp	.-10     	; 0x2e34 <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2e3e:	e0 e6       	ldi	r30, 0x60	; 96
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    2e44:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    2e46:	28 ed       	ldi	r18, 0xD8	; 216
    2e48:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2e4a:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    2e4c:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    2e4e:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    2e50:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2e52:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    2e54:	01 c0       	rjmp	.+2      	; 0x2e58 <init_RTC+0x36>
		asm("nop");
    2e56:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    2e58:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    2e5c:	91 11       	cpse	r25, r1
    2e5e:	fb cf       	rjmp	.-10     	; 0x2e56 <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticks;
    2e60:	e0 e4       	ldi	r30, 0x40	; 64
    2e62:	f1 e0       	ldi	r31, 0x01	; 1
    2e64:	42 87       	std	Z+10, r20	; 0x0a
    2e66:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    2e68:	82 e0       	ldi	r24, 0x02	; 2
    2e6a:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    2e6c:	85 81       	ldd	r24, Z+5	; 0x05
    2e6e:	81 60       	ori	r24, 0x01	; 1
    2e70:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    2e72:	81 eb       	ldi	r24, 0xB1	; 177
    2e74:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    2e76:	82 81       	ldd	r24, Z+2	; 0x02
    2e78:	81 60       	ori	r24, 0x01	; 1
    2e7a:	82 83       	std	Z+2, r24	; 0x02
    2e7c:	08 95       	ret

00002e7e <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    2e7e:	1f 92       	push	r1
    2e80:	0f 92       	push	r0
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	0f 92       	push	r0
    2e86:	11 24       	eor	r1, r1
    2e88:	2f 93       	push	r18
    2e8a:	3f 93       	push	r19
    2e8c:	4f 93       	push	r20
    2e8e:	5f 93       	push	r21
    2e90:	6f 93       	push	r22
    2e92:	7f 93       	push	r23
    2e94:	8f 93       	push	r24
    2e96:	9f 93       	push	r25
    2e98:	af 93       	push	r26
    2e9a:	bf 93       	push	r27
    2e9c:	ef 93       	push	r30
    2e9e:	ff 93       	push	r31

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	if (timerOLED) {
    2ea6:	80 91 0b 2a 	lds	r24, 0x2A0B	; 0x802a0b <timerOLED>
    2eaa:	90 91 0c 2a 	lds	r25, 0x2A0C	; 0x802a0c <timerOLED+0x1>
    2eae:	00 97       	sbiw	r24, 0x00	; 0
    2eb0:	b9 f0       	breq	.+46     	; 0x2ee0 <__vector_3+0x62>
		if (timerOLED > timeoutOLED) {	// Display timeout
    2eb2:	20 91 0d 2a 	lds	r18, 0x2A0D	; 0x802a0d <timeoutOLED>
    2eb6:	30 91 0e 2a 	lds	r19, 0x2A0E	; 0x802a0e <timeoutOLED+0x1>
    2eba:	28 17       	cp	r18, r24
    2ebc:	39 07       	cpc	r19, r25
    2ebe:	58 f4       	brcc	.+22     	; 0x2ed6 <__vector_3+0x58>
			clear_OLED(0);
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <clear_OLED>
			clear_OLED(1);
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <clear_OLED>
			timerOLED = 0;
    2ecc:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <timerOLED>
    2ed0:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED+0x1>
    2ed4:	05 c0       	rjmp	.+10     	; 0x2ee0 <__vector_3+0x62>
		} else {
			timerOLED++;
    2ed6:	01 96       	adiw	r24, 0x01	; 1
    2ed8:	80 93 0b 2a 	sts	0x2A0B, r24	; 0x802a0b <timerOLED>
    2edc:	90 93 0c 2a 	sts	0x2A0C, r25	; 0x802a0c <timerOLED+0x1>
		}
	}
	toggle_LED;						// Defined in led.c
    2ee0:	80 e2       	ldi	r24, 0x20	; 32
    2ee2:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>

}
    2ee6:	ff 91       	pop	r31
    2ee8:	ef 91       	pop	r30
    2eea:	bf 91       	pop	r27
    2eec:	af 91       	pop	r26
    2eee:	9f 91       	pop	r25
    2ef0:	8f 91       	pop	r24
    2ef2:	7f 91       	pop	r23
    2ef4:	6f 91       	pop	r22
    2ef6:	5f 91       	pop	r21
    2ef8:	4f 91       	pop	r20
    2efa:	3f 91       	pop	r19
    2efc:	2f 91       	pop	r18
    2efe:	0f 90       	pop	r0
    2f00:	0f be       	out	0x3f, r0	; 63
    2f02:	0f 90       	pop	r0
    2f04:	1f 90       	pop	r1
    2f06:	18 95       	reti

00002f08 <set>:
	Returns:
		GREATERPROMPT on success
		ERRORPROMPT if an invalid object was requested.
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    2f08:	cf 93       	push	r28
    2f0a:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	24 e3       	ldi	r18, 0x34	; 52
    2f10:	28 9f       	mul	r18, r24
    2f12:	f0 01       	movw	r30, r0
    2f14:	29 9f       	mul	r18, r25
    2f16:	f0 0d       	add	r31, r0
    2f18:	11 24       	eor	r1, r1
    2f1a:	ed 5f       	subi	r30, 0xFD	; 253
    2f1c:	f7 4d       	sbci	r31, 0xD7	; 215
    2f1e:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    2f20:	24 37       	cpi	r18, 0x74	; 116
    2f22:	e9 f4       	brne	.+58     	; 0x2f5e <set+0x56>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    2f24:	24 e3       	ldi	r18, 0x34	; 52
    2f26:	28 9f       	mul	r18, r24
    2f28:	e0 01       	movw	r28, r0
    2f2a:	29 9f       	mul	r18, r25
    2f2c:	d0 0d       	add	r29, r0
    2f2e:	11 24       	eor	r1, r1
    2f30:	cb 5f       	subi	r28, 0xFB	; 251
    2f32:	d7 4d       	sbci	r29, 0xD7	; 215
    2f34:	fe 01       	movw	r30, r28
    2f36:	01 90       	ld	r0, Z+
    2f38:	00 20       	and	r0, r0
    2f3a:	e9 f7       	brne	.-6      	; 0x2f36 <set+0x2e>
    2f3c:	31 97       	sbiw	r30, 0x01	; 1
    2f3e:	ec 1b       	sub	r30, r28
    2f40:	fd 0b       	sbc	r31, r29
    2f42:	73 97       	sbiw	r30, 0x13	; 19
    2f44:	71 f4       	brne	.+28     	; 0x2f62 <set+0x5a>
				return(ERRORPROMPT);
			}
			put_time(pcmd[cstack].cvalue);
    2f46:	ce 01       	movw	r24, r28
    2f48:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <put_time>
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    2f4c:	24 e1       	ldi	r18, 0x14	; 20
    2f4e:	ae 01       	movw	r20, r28
    2f50:	60 e0       	ldi	r22, 0x00	; 0
    2f52:	70 e0       	ldi	r23, 0x00	; 0
    2f54:	80 e5       	ldi	r24, 0x50	; 80
    2f56:	0e 94 c9 06 	call	0xd92	; 0xd92 <write_FRAM>
			break;

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
    2f5c:	03 c0       	rjmp	.+6      	; 0x2f64 <set+0x5c>
			put_time(pcmd[cstack].cvalue);
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			return(ERRORPROMPT);
    2f5e:	82 e0       	ldi	r24, 0x02	; 2
    2f60:	01 c0       	rjmp	.+2      	; 0x2f64 <set+0x5c>
	object = pcmd[cstack].cobject;

	switch(object) {
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
				return(ERRORPROMPT);
    2f62:	82 e0       	ldi	r24, 0x02	; 2

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
}
    2f64:	df 91       	pop	r29
    2f66:	cf 91       	pop	r28
    2f68:	08 95       	ret

00002f6a <init_SPECID>:
	pullup. Must be called AFTER init_PORTS().
------------------------------------------------------------------------------*/
void init_SPECID(void)
{

	PORTF.PIN2CTRL &= ~PORT_PULLUPEN_bm;	// Remove pullup
    2f6a:	e0 ea       	ldi	r30, 0xA0	; 160
    2f6c:	f4 e0       	ldi	r31, 0x04	; 4
    2f6e:	82 89       	ldd	r24, Z+18	; 0x12
    2f70:	87 7f       	andi	r24, 0xF7	; 247
    2f72:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.DIRCLR = PIN2_bm;					// Set as input
    2f74:	84 e0       	ldi	r24, 0x04	; 4
    2f76:	82 83       	std	Z+2, r24	; 0x02
    2f78:	08 95       	ret

00002f7a <get_temperature>:
float get_temperature(uint8_t sensor)
{

	float temperature;

	switch (sensor) {
    2f7a:	83 30       	cpi	r24, 0x03	; 3
    2f7c:	18 f0       	brcs	.+6      	; 0x2f84 <get_temperature+0xa>
    2f7e:	83 30       	cpi	r24, 0x03	; 3
    2f80:	21 f0       	breq	.+8      	; 0x2f8a <get_temperature+0x10>
    2f82:	06 c0       	rjmp	.+12     	; 0x2f90 <get_temperature+0x16>
		case 0:
		case 1:
		case 2:
			temperature = read_AD590(sensor);
    2f84:	0e 94 49 01 	call	0x292	; 0x292 <read_AD590>
			break;
    2f88:	08 95       	ret
		case 3:
			temperature = read_MCP9808();
    2f8a:	0e 94 75 08 	call	0x10ea	; 0x10ea <read_MCP9808>
			break;
    2f8e:	08 95       	ret
		default:
			temperature = -999.9;
    2f90:	6a e9       	ldi	r22, 0x9A	; 154
    2f92:	79 ef       	ldi	r23, 0xF9	; 249
    2f94:	89 e7       	ldi	r24, 0x79	; 121
    2f96:	94 ec       	ldi	r25, 0xC4	; 196
			break;
	}

	return(temperature);

}
    2f98:	08 95       	ret

00002f9a <testroutine>:
#include "usart.h"
#include "roboclaw.h"
#include "testroutine.h"

void testroutine(void)
{
    2f9a:	0f 93       	push	r16
    2f9c:	1f 93       	push	r17
    2f9e:	cf 93       	push	r28
    2fa0:	df 93       	push	r29
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	e2 97       	sbiw	r28, 0x32	; 50
    2fa8:	cd bf       	out	0x3d, r28	; 61
    2faa:	de bf       	out	0x3e, r29	; 62


	char buf[50];

	start_TCB0(1);
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	0e 94 0c 18 	call	0x3018	; 0x3018 <start_TCB0>
    2fb4:	8d e8       	ldi	r24, 0x8D	; 141
    2fb6:	90 e2       	ldi	r25, 0x20	; 32
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	f1 f7       	brne	.-4      	; 0x2fb8 <testroutine+0x1e>
    2fbc:	00 00       	nop
	_delay_ms(10);
	stop_TCB0();
    2fbe:	0e 94 22 18 	call	0x3044	; 0x3044 <stop_TCB0>
	sprintf(buf, "ticks = %d\r\n", ticks);
    2fc2:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <ticks>
    2fc6:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <ticks+0x1>
    2fca:	9f 93       	push	r25
    2fcc:	8f 93       	push	r24
    2fce:	8b e0       	ldi	r24, 0x0B	; 11
    2fd0:	9a e8       	ldi	r25, 0x8A	; 138
    2fd2:	9f 93       	push	r25
    2fd4:	8f 93       	push	r24
    2fd6:	8e 01       	movw	r16, r28
    2fd8:	0f 5f       	subi	r16, 0xFF	; 255
    2fda:	1f 4f       	sbci	r17, 0xFF	; 255
    2fdc:	1f 93       	push	r17
    2fde:	0f 93       	push	r16
    2fe0:	0e 94 90 22 	call	0x4520	; 0x4520 <sprintf>
	send_USART(0, (uint8_t*) buf, strlen(buf));
    2fe4:	f8 01       	movw	r30, r16
    2fe6:	01 90       	ld	r0, Z+
    2fe8:	00 20       	and	r0, r0
    2fea:	e9 f7       	brne	.-6      	; 0x2fe6 <testroutine+0x4c>
    2fec:	31 97       	sbiw	r30, 0x01	; 1
    2fee:	af 01       	movw	r20, r30
    2ff0:	40 1b       	sub	r20, r16
    2ff2:	51 0b       	sbc	r21, r17
    2ff4:	b8 01       	movw	r22, r16
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	0e 94 fe 18 	call	0x31fc	; 0x31fc <send_USART>
	write_MCP23008(addr, OLAT, 0x00);
	_delay_ms(1000);
	write_MCP23008(addr, OLAT, 0xFF);
	send_USART(0, (uint8_t*) buf, strlen(buf));
*/
	return;
    2ffc:	0f 90       	pop	r0
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	0f 90       	pop	r0
    3008:	e2 96       	adiw	r28, 0x32	; 50
    300a:	cd bf       	out	0x3d, r28	; 61
    300c:	de bf       	out	0x3e, r29	; 62
    300e:	df 91       	pop	r29
    3010:	cf 91       	pop	r28
    3012:	1f 91       	pop	r17
    3014:	0f 91       	pop	r16
    3016:	08 95       	ret

00003018 <start_TCB0>:
#include "timers.h"

void start_TCB0(uint16_t msPeriod)
{

	ticks = 0;
    3018:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <ticks>
    301c:	10 92 11 2a 	sts	0x2A11, r1	; 0x802a11 <ticks+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    3020:	25 e0       	ldi	r18, 0x05	; 5
    3022:	3d e0       	ldi	r19, 0x0D	; 13
    3024:	ac 01       	movw	r20, r24
    3026:	42 9f       	mul	r20, r18
    3028:	c0 01       	movw	r24, r0
    302a:	43 9f       	mul	r20, r19
    302c:	90 0d       	add	r25, r0
    302e:	52 9f       	mul	r21, r18
    3030:	90 0d       	add	r25, r0
    3032:	11 24       	eor	r1, r1
    3034:	e0 e8       	ldi	r30, 0x80	; 128
    3036:	fa e0       	ldi	r31, 0x0A	; 10
    3038:	84 87       	std	Z+12, r24	; 0x0c
    303a:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	85 83       	std	Z+5, r24	; 0x05
//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    3040:	80 83       	st	Z, r24
    3042:	08 95       	ret

00003044 <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    3044:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    3048:	08 95       	ret

0000304a <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    304a:	1f 92       	push	r1
    304c:	0f 92       	push	r0
    304e:	0f b6       	in	r0, 0x3f	; 63
    3050:	0f 92       	push	r0
    3052:	11 24       	eor	r1, r1
    3054:	8f 93       	push	r24
    3056:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks++;
    305e:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <ticks>
    3062:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <ticks+0x1>
    3066:	01 96       	adiw	r24, 0x01	; 1
    3068:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <ticks>
    306c:	90 93 11 2a 	sts	0x2A11, r25	; 0x802a11 <ticks+0x1>

    3070:	9f 91       	pop	r25
    3072:	8f 91       	pop	r24
    3074:	0f 90       	pop	r0
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	0f 90       	pop	r0
    307a:	1f 90       	pop	r1
    307c:	18 95       	reti

0000307e <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    307e:	e0 ea       	ldi	r30, 0xA0	; 160
    3080:	f8 e0       	ldi	r31, 0x08	; 8
    3082:	8b e0       	ldi	r24, 0x0B	; 11
    3084:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    3086:	83 81       	ldd	r24, Z+3	; 0x03
    3088:	81 60       	ori	r24, 0x01	; 1
    308a:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    308c:	85 81       	ldd	r24, Z+5	; 0x05
    308e:	81 60       	ori	r24, 0x01	; 1
    3090:	85 83       	std	Z+5, r24	; 0x05
    3092:	08 95       	ret

00003094 <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    3094:	01 c0       	rjmp	.+2      	; 0x3098 <read_TWI+0x4>
		asm("nop");								// Should set timer here
    3096:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    3098:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    309c:	88 23       	and	r24, r24
    309e:	dc f7       	brge	.-10     	; 0x3096 <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    30a0:	e0 ea       	ldi	r30, 0xA0	; 160
    30a2:	f8 e0       	ldi	r31, 0x08	; 8
    30a4:	84 81       	ldd	r24, Z+4	; 0x04
    30a6:	8b 7f       	andi	r24, 0xFB	; 251
    30a8:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    30aa:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    30ac:	94 81       	ldd	r25, Z+4	; 0x04
    30ae:	92 60       	ori	r25, 0x02	; 2
    30b0:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    30b2:	08 95       	ret

000030b4 <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    30b4:	01 c0       	rjmp	.+2      	; 0x30b8 <readlast_TWI+0x4>
		asm("nop");
    30b6:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    30b8:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    30bc:	88 23       	and	r24, r24
    30be:	dc f7       	brge	.-10     	; 0x30b6 <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    30c0:	e0 ea       	ldi	r30, 0xA0	; 160
    30c2:	f8 e0       	ldi	r31, 0x08	; 8
    30c4:	84 81       	ldd	r24, Z+4	; 0x04
    30c6:	84 60       	ori	r24, 0x04	; 4
    30c8:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    30ca:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    30cc:	08 95       	ret

000030ce <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    30ce:	61 30       	cpi	r22, 0x01	; 1
    30d0:	39 f4       	brne	.+14     	; 0x30e0 <start_TWI+0x12>
//		addr = ((addr << 1) | 0x01);
		TWI0.MADDR = ((addr << 1) | 0x01);
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	88 0f       	add	r24, r24
    30d6:	99 1f       	adc	r25, r25
    30d8:	81 60       	ori	r24, 0x01	; 1
    30da:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    30de:	05 c0       	rjmp	.+10     	; 0x30ea <start_TWI+0x1c>
	} else {
//		addr = ((addr << 1) & ~0x01);
//		addr = (addr << 1);
		TWI0.MADDR = (addr << 1);
    30e0:	88 0f       	add	r24, r24
    30e2:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    30e6:	01 c0       	rjmp	.+2      	; 0x30ea <start_TWI+0x1c>
	}

//	TWI0.MADDR = addr;							// Start condition

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
		asm("nop");								// Wait for addr transmission
    30e8:	00 00       	nop
		TWI0.MADDR = (addr << 1);
	}

//	TWI0.MADDR = addr;							// Start condition

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    30ea:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    30ee:	80 7c       	andi	r24, 0xC0	; 192
    30f0:	d9 f3       	breq	.-10     	; 0x30e8 <start_TWI+0x1a>
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    30f2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    30f6:	82 fd       	sbrc	r24, 2
    30f8:	0c c0       	rjmp	.+24     	; 0x3112 <start_TWI+0x44>
		return(TWIBUSERR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    30fa:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    30fe:	83 fd       	sbrc	r24, 3
    3100:	0a c0       	rjmp	.+20     	; 0x3116 <start_TWI+0x48>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    3102:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3106:	89 2f       	mov	r24, r25
    3108:	80 71       	andi	r24, 0x10	; 16
    310a:	94 ff       	sbrs	r25, 4
    310c:	05 c0       	rjmp	.+10     	; 0x3118 <start_TWI+0x4a>
		return(TWINODEVICE);
    310e:	84 e0       	ldi	r24, 0x04	; 4
    3110:	08 95       	ret
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERR);
    3112:	82 e0       	ldi	r24, 0x02	; 2
    3114:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    3116:	83 e0       	ldi	r24, 0x03	; 3
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
	} else {									// OK
		return(0);
	}
}
    3118:	08 95       	ret

0000311a <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    311a:	87 e0       	ldi	r24, 0x07	; 7
    311c:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    3120:	08 95       	ret

00003122 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    3122:	01 c0       	rjmp	.+2      	; 0x3126 <write_TWI+0x4>
		asm("nop");
    3124:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    3126:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    312a:	96 ff       	sbrs	r25, 6
    312c:	fb cf       	rjmp	.-10     	; 0x3124 <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    312e:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    3132:	01 c0       	rjmp	.+2      	; 0x3136 <write_TWI+0x14>
		asm("nop");
    3134:	00 00       	nop
		asm("nop");
	}

	TWI0.MDATA = data;

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    3136:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    313a:	86 ff       	sbrs	r24, 6
    313c:	fb cf       	rjmp	.-10     	; 0x3134 <write_TWI+0x12>
		asm("nop");
	}

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    313e:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3142:	89 2f       	mov	r24, r25
    3144:	80 71       	andi	r24, 0x10	; 16
    3146:	94 fd       	sbrc	r25, 4
		return(TWINODEVICE);
    3148:	84 e0       	ldi	r24, 0x04	; 4
	} else {
		return(0);
	}

}
    314a:	08 95       	ret

0000314c <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    314c:	e0 e0       	ldi	r30, 0x00	; 0
    314e:	f4 e0       	ldi	r31, 0x04	; 4
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    3154:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    3156:	e0 e0       	ldi	r30, 0x00	; 0
    3158:	f8 e0       	ldi	r31, 0x08	; 8
    315a:	2d e6       	ldi	r18, 0x6D	; 109
    315c:	35 e0       	ldi	r19, 0x05	; 5
    315e:	20 87       	std	Z+8, r18	; 0x08
    3160:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    3162:	95 81       	ldd	r25, Z+5	; 0x05
    3164:	90 68       	ori	r25, 0x80	; 128
    3166:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    3168:	96 81       	ldd	r25, Z+6	; 0x06
    316a:	90 64       	ori	r25, 0x40	; 64
    316c:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART Receiver
    316e:	96 81       	ldd	r25, Z+6	; 0x06
    3170:	90 68       	ori	r25, 0x80	; 128
    3172:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;
    3174:	10 92 1b 2d 	sts	0x2D1B, r1	; 0x802d1b <send0_buf+0xff>
	send0_buf.tail = 0;
    3178:	10 92 1c 2d 	sts	0x2D1C, r1	; 0x802d1c <send0_buf+0x100>
	send0_buf.done = YES;
    317c:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0x104>
	recv0_buf.head = 0;
    3180:	10 92 16 2c 	sts	0x2C16, r1	; 0x802c16 <recv0_buf+0xff>
	recv0_buf.tail = 0;
    3184:	10 92 17 2c 	sts	0x2C17, r1	; 0x802c17 <recv0_buf+0x100>
	recv0_buf.data[0] = '\0';
    3188:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv0_buf>
	recv0_buf.length = 0;
    318c:	10 92 19 2c 	sts	0x2C19, r1	; 0x802c19 <recv0_buf+0x102>
	recv0_buf.done = NO;
    3190:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0x104>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    3194:	e0 e4       	ldi	r30, 0x40	; 64
    3196:	f4 e0       	ldi	r31, 0x04	; 4
    3198:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    319a:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
    319c:	e0 e2       	ldi	r30, 0x20	; 32
    319e:	f8 e0       	ldi	r31, 0x08	; 8
    31a0:	4b e5       	ldi	r20, 0x5B	; 91
    31a2:	51 e0       	ldi	r21, 0x01	; 1
    31a4:	40 87       	std	Z+8, r20	; 0x08
    31a6:	51 87       	std	Z+9, r21	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    31a8:	95 81       	ldd	r25, Z+5	; 0x05
    31aa:	90 68       	ori	r25, 0x80	; 128
    31ac:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;
    31ae:	96 81       	ldd	r25, Z+6	; 0x06
    31b0:	90 64       	ori	r25, 0x40	; 64
    31b2:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;
    31b4:	96 81       	ldd	r25, Z+6	; 0x06
    31b6:	90 68       	ori	r25, 0x80	; 128
    31b8:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    31ba:	10 92 2a 30 	sts	0x302A, r1	; 0x80302a <send1_buf+0xff>
	send1_buf.tail = 0;
    31be:	10 92 2b 30 	sts	0x302B, r1	; 0x80302b <send1_buf+0x100>
	send1_buf.done = YES;
    31c2:	80 93 2f 30 	sts	0x302F, r24	; 0x80302f <send1_buf+0x104>
	recv1_buf.head = 0;
    31c6:	10 92 11 2b 	sts	0x2B11, r1	; 0x802b11 <recv1_buf+0xff>
	recv1_buf.tail = 0;
    31ca:	10 92 12 2b 	sts	0x2B12, r1	; 0x802b12 <recv1_buf+0x100>
	recv1_buf.data[0] = '\0';
    31ce:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <recv1_buf>
	recv1_buf.done = NO;
    31d2:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    31d6:	e0 e2       	ldi	r30, 0x20	; 32
    31d8:	f4 e0       	ldi	r31, 0x04	; 4
    31da:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    31dc:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    31de:	e0 e6       	ldi	r30, 0x60	; 96
    31e0:	f8 e0       	ldi	r31, 0x08	; 8
    31e2:	20 87       	std	Z+8, r18	; 0x08
    31e4:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    31e6:	96 81       	ldd	r25, Z+6	; 0x06
    31e8:	90 64       	ori	r25, 0x40	; 64
    31ea:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    31ec:	96 81       	ldd	r25, Z+6	; 0x06
    31ee:	90 68       	ori	r25, 0x80	; 128
    31f0:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    31f2:	80 93 2a 2f 	sts	0x2F2A, r24	; 0x802f2a <send3_buf+0x104>
	recv3_buf.done = NO;
    31f6:	10 92 25 2e 	sts	0x2E25, r1	; 0x802e25 <recv3_buf+0x104>
    31fa:	08 95       	ret

000031fc <send_USART>:
		port - The USARTn port (0, 1, or 3)
		data - Contains the data to send
		nbytes - Number of bytes to send
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    31fc:	0f 93       	push	r16
    31fe:	1f 93       	push	r17
    3200:	cf 93       	push	r28
    3202:	df 93       	push	r29
    3204:	eb 01       	movw	r28, r22
    3206:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    3208:	81 30       	cpi	r24, 0x01	; 1
    320a:	01 f1       	breq	.+64     	; 0x324c <send_USART+0x50>
    320c:	b0 f0       	brcs	.+44     	; 0x323a <send_USART+0x3e>
    320e:	83 30       	cpi	r24, 0x03	; 3
    3210:	09 f4       	brne	.+2      	; 0x3214 <send_USART+0x18>
    3212:	6d c0       	rjmp	.+218    	; 0x32ee <send_USART+0xf2>
    3214:	74 c0       	rjmp	.+232    	; 0x32fe <send_USART+0x102>
		case 0:
			for (i = 0; i < nbytes; i++) {
				send0_buf.data[send0_buf.head] = *data++;
    3216:	eb e1       	ldi	r30, 0x1B	; 27
    3218:	fd e2       	ldi	r31, 0x2D	; 45
    321a:	80 81       	ld	r24, Z
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	38 81       	ld	r19, Y
    3220:	dc 01       	movw	r26, r24
    3222:	a4 5e       	subi	r26, 0xE4	; 228
    3224:	b3 4d       	sbci	r27, 0xD3	; 211
    3226:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    3228:	01 96       	adiw	r24, 0x01	; 1
    322a:	6f ef       	ldi	r22, 0xFF	; 255
    322c:	70 e0       	ldi	r23, 0x00	; 0
    322e:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__divmodhi4>
    3232:	80 83       	st	Z, r24
	uint8_t i;
	uint16_t crc;

	switch (port) {
		case 0:
			for (i = 0; i < nbytes; i++) {
    3234:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    3236:	21 96       	adiw	r28, 0x01	; 1
    3238:	01 c0       	rjmp	.+2      	; 0x323c <send_USART+0x40>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    323a:	20 e0       	ldi	r18, 0x00	; 0
		case 0:
			for (i = 0; i < nbytes; i++) {
    323c:	21 17       	cp	r18, r17
    323e:	58 f3       	brcs	.-42     	; 0x3216 <send_USART+0x1a>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3240:	e0 e0       	ldi	r30, 0x00	; 0
    3242:	f8 e0       	ldi	r31, 0x08	; 8
    3244:	85 81       	ldd	r24, Z+5	; 0x05
    3246:	80 62       	ori	r24, 0x20	; 32
    3248:	85 83       	std	Z+5, r24	; 0x05
			break;
    324a:	59 c0       	rjmp	.+178    	; 0x32fe <send_USART+0x102>

		case 1:
			crc = crc16(data, nbytes);
    324c:	64 2f       	mov	r22, r20
    324e:	70 e0       	ldi	r23, 0x00	; 0
    3250:	ce 01       	movw	r24, r28
    3252:	0e 94 59 14 	call	0x28b2	; 0x28b2 <crc16>
    3256:	48 2f       	mov	r20, r24
    3258:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	11 c0       	rjmp	.+34     	; 0x3280 <send_USART+0x84>
				send1_buf.data[send1_buf.head] = *data++;
    325e:	ea e2       	ldi	r30, 0x2A	; 42
    3260:	f0 e3       	ldi	r31, 0x30	; 48
    3262:	80 81       	ld	r24, Z
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	38 81       	ld	r19, Y
    3268:	dc 01       	movw	r26, r24
    326a:	a5 5d       	subi	r26, 0xD5	; 213
    326c:	b0 4d       	sbci	r27, 0xD0	; 208
    326e:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3270:	01 96       	adiw	r24, 0x01	; 1
    3272:	6f ef       	ldi	r22, 0xFF	; 255
    3274:	70 e0       	ldi	r23, 0x00	; 0
    3276:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__divmodhi4>
    327a:	80 83       	st	Z, r24
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    327c:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    327e:	21 96       	adiw	r28, 0x01	; 1
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    3280:	21 17       	cp	r18, r17
    3282:	68 f3       	brcs	.-38     	; 0x325e <send_USART+0x62>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    3284:	ea e2       	ldi	r30, 0x2A	; 42
    3286:	f0 e3       	ldi	r31, 0x30	; 48
    3288:	80 81       	ld	r24, Z
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	dc 01       	movw	r26, r24
    328e:	a5 5d       	subi	r26, 0xD5	; 213
    3290:	b0 4d       	sbci	r27, 0xD0	; 208
    3292:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3294:	01 96       	adiw	r24, 0x01	; 1
    3296:	2f ef       	ldi	r18, 0xFF	; 255
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	b9 01       	movw	r22, r18
    329c:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	dc 01       	movw	r26, r24
    32a4:	a5 5d       	subi	r26, 0xD5	; 213
    32a6:	b0 4d       	sbci	r27, 0xD0	; 208
    32a8:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    32aa:	01 96       	adiw	r24, 0x01	; 1
    32ac:	b9 01       	movw	r22, r18
    32ae:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__divmodhi4>
    32b2:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    32b4:	1e 5f       	subi	r17, 0xFE	; 254
    32b6:	10 93 2c 30 	sts	0x302C, r17	; 0x80302c <send1_buf+0x101>
			send1_buf.nxfrd = 0;
    32ba:	10 92 2e 30 	sts	0x302E, r1	; 0x80302e <send1_buf+0x103>
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    32be:	e0 e2       	ldi	r30, 0x20	; 32
    32c0:	f8 e0       	ldi	r31, 0x08	; 8
    32c2:	85 81       	ldd	r24, Z+5	; 0x05
    32c4:	80 62       	ori	r24, 0x20	; 32
    32c6:	85 83       	std	Z+5, r24	; 0x05
			break;
    32c8:	1a c0       	rjmp	.+52     	; 0x32fe <send_USART+0x102>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    32ca:	e5 e2       	ldi	r30, 0x25	; 37
    32cc:	ff e2       	ldi	r31, 0x2F	; 47
    32ce:	80 81       	ld	r24, Z
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	38 81       	ld	r19, Y
    32d4:	dc 01       	movw	r26, r24
    32d6:	aa 5d       	subi	r26, 0xDA	; 218
    32d8:	b1 4d       	sbci	r27, 0xD1	; 209
    32da:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    32dc:	01 96       	adiw	r24, 0x01	; 1
    32de:	6f ef       	ldi	r22, 0xFF	; 255
    32e0:	70 e0       	ldi	r23, 0x00	; 0
    32e2:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__divmodhi4>
    32e6:	80 83       	st	Z, r24
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    32e8:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    32ea:	21 96       	adiw	r28, 0x01	; 1
    32ec:	01 c0       	rjmp	.+2      	; 0x32f0 <send_USART+0xf4>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    32ee:	20 e0       	ldi	r18, 0x00	; 0
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    32f0:	21 17       	cp	r18, r17
    32f2:	58 f3       	brcs	.-42     	; 0x32ca <send_USART+0xce>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    32f4:	e0 e6       	ldi	r30, 0x60	; 96
    32f6:	f8 e0       	ldi	r31, 0x08	; 8
    32f8:	85 81       	ldd	r24, Z+5	; 0x05
    32fa:	80 62       	ori	r24, 0x20	; 32
    32fc:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    32fe:	df 91       	pop	r29
    3300:	cf 91       	pop	r28
    3302:	1f 91       	pop	r17
    3304:	0f 91       	pop	r16
    3306:	08 95       	ret

00003308 <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    3308:	1f 92       	push	r1
    330a:	0f 92       	push	r0
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	0f 92       	push	r0
    3310:	11 24       	eor	r1, r1
    3312:	5f 93       	push	r21
    3314:	6f 93       	push	r22
    3316:	7f 93       	push	r23
    3318:	8f 93       	push	r24
    331a:	9f 93       	push	r25
    331c:	af 93       	push	r26
    331e:	bf 93       	push	r27
    3320:	ef 93       	push	r30
    3322:	ff 93       	push	r31

	uint8_t c;

	if (recv0_buf.length < BUFSIZE) {
    3324:	80 91 19 2c 	lds	r24, 0x2C19	; 0x802c19 <recv0_buf+0x102>
    3328:	8f 3f       	cpi	r24, 0xFF	; 255
    332a:	19 f1       	breq	.+70     	; 0x3372 <__vector_17+0x6a>
		c = USART0.RXDATAL;
    332c:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
		if ((char) c == '\r') {
    3330:	8d 30       	cpi	r24, 0x0D	; 13
    3332:	51 f4       	brne	.+20     	; 0x3348 <__vector_17+0x40>
			recv0_buf.done = YES;
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	80 93 1b 2c 	sts	0x2C1B, r24	; 0x802c1b <recv0_buf+0x104>
			recv0_buf.data[recv0_buf.head] = '\0';
    333a:	e0 91 16 2c 	lds	r30, 0x2C16	; 0x802c16 <recv0_buf+0xff>
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	e9 5e       	subi	r30, 0xE9	; 233
    3342:	f4 4d       	sbci	r31, 0xD4	; 212
    3344:	10 82       	st	Z, r1
    3346:	06 c0       	rjmp	.+12     	; 0x3354 <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    3348:	e0 91 16 2c 	lds	r30, 0x2C16	; 0x802c16 <recv0_buf+0xff>
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	e9 5e       	subi	r30, 0xE9	; 233
    3350:	f4 4d       	sbci	r31, 0xD4	; 212
    3352:	80 83       	st	Z, r24
		}
		recv0_buf.length++;
    3354:	e9 e1       	ldi	r30, 0x19	; 25
    3356:	fc e2       	ldi	r31, 0x2C	; 44
    3358:	80 81       	ld	r24, Z
    335a:	8f 5f       	subi	r24, 0xFF	; 255
    335c:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    335e:	e6 e1       	ldi	r30, 0x16	; 22
    3360:	fc e2       	ldi	r31, 0x2C	; 44
    3362:	80 81       	ld	r24, Z
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	01 96       	adiw	r24, 0x01	; 1
    3368:	6f ef       	ldi	r22, 0xFF	; 255
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	0e 94 5e 20 	call	0x40bc	; 0x40bc <__divmodhi4>
    3370:	80 83       	st	Z, r24
	}
}
    3372:	ff 91       	pop	r31
    3374:	ef 91       	pop	r30
    3376:	bf 91       	pop	r27
    3378:	af 91       	pop	r26
    337a:	9f 91       	pop	r25
    337c:	8f 91       	pop	r24
    337e:	7f 91       	pop	r23
    3380:	6f 91       	pop	r22
    3382:	5f 91       	pop	r21
    3384:	0f 90       	pop	r0
    3386:	0f be       	out	0x3f, r0	; 63
    3388:	0f 90       	pop	r0
    338a:	1f 90       	pop	r1
    338c:	18 95       	reti

0000338e <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    338e:	1f 92       	push	r1
    3390:	0f 92       	push	r0
    3392:	0f b6       	in	r0, 0x3f	; 63
    3394:	0f 92       	push	r0
    3396:	11 24       	eor	r1, r1
    3398:	8f 93       	push	r24
    339a:	9f 93       	push	r25
    339c:	ef 93       	push	r30
    339e:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    33a0:	e0 e0       	ldi	r30, 0x00	; 0
    33a2:	f8 e0       	ldi	r31, 0x08	; 8
    33a4:	85 81       	ldd	r24, Z+5	; 0x05
    33a6:	8f 7d       	andi	r24, 0xDF	; 223
    33a8:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    33aa:	80 91 1b 2d 	lds	r24, 0x2D1B	; 0x802d1b <send0_buf+0xff>
    33ae:	e0 91 1c 2d 	lds	r30, 0x2D1C	; 0x802d1c <send0_buf+0x100>
    33b2:	8e 17       	cp	r24, r30
    33b4:	b9 f0       	breq	.+46     	; 0x33e4 <__vector_18+0x56>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    33b6:	91 e0       	ldi	r25, 0x01	; 1
    33b8:	9e 0f       	add	r25, r30
    33ba:	90 93 1c 2d 	sts	0x2D1C, r25	; 0x802d1c <send0_buf+0x100>
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	e4 5e       	subi	r30, 0xE4	; 228
    33c2:	f3 4d       	sbci	r31, 0xD3	; 211
    33c4:	80 81       	ld	r24, Z
    33c6:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	9f 3f       	cpi	r25, 0xFF	; 255
    33ce:	08 f4       	brcc	.+2      	; 0x33d2 <__vector_18+0x44>
    33d0:	80 e0       	ldi	r24, 0x00	; 0
    33d2:	89 0f       	add	r24, r25
    33d4:	80 93 1c 2d 	sts	0x2D1C, r24	; 0x802d1c <send0_buf+0x100>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    33d8:	e0 e0       	ldi	r30, 0x00	; 0
    33da:	f8 e0       	ldi	r31, 0x08	; 8
    33dc:	85 81       	ldd	r24, Z+5	; 0x05
    33de:	80 62       	ori	r24, 0x20	; 32
    33e0:	85 83       	std	Z+5, r24	; 0x05
    33e2:	03 c0       	rjmp	.+6      	; 0x33ea <__vector_18+0x5c>
	} else {
		send0_buf.done = YES;
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0x104>
	}

}
    33ea:	ff 91       	pop	r31
    33ec:	ef 91       	pop	r30
    33ee:	9f 91       	pop	r25
    33f0:	8f 91       	pop	r24
    33f2:	0f 90       	pop	r0
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	0f 90       	pop	r0
    33f8:	1f 90       	pop	r1
    33fa:	18 95       	reti

000033fc <__vector_26>:
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.

------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    33fc:	1f 92       	push	r1
    33fe:	0f 92       	push	r0
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	0f 92       	push	r0
    3404:	11 24       	eor	r1, r1
    3406:	2f 93       	push	r18
    3408:	8f 93       	push	r24
    340a:	9f 93       	push	r25
    340c:	ef 93       	push	r30
    340e:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    3410:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>

	if (recv1_buf.nxfrd < recv1_buf.nbytes) {
    3414:	e0 91 15 2b 	lds	r30, 0x2B15	; 0x802b15 <recv1_buf+0x103>
    3418:	80 91 13 2b 	lds	r24, 0x2B13	; 0x802b13 <recv1_buf+0x101>
    341c:	e8 17       	cp	r30, r24
    341e:	40 f4       	brcc	.+16     	; 0x3430 <__vector_26+0x34>
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    3420:	21 e0       	ldi	r18, 0x01	; 1
    3422:	2e 0f       	add	r18, r30
    3424:	20 93 15 2b 	sts	0x2B15, r18	; 0x802b15 <recv1_buf+0x103>
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	ee 5e       	subi	r30, 0xEE	; 238
    342c:	f5 4d       	sbci	r31, 0xD5	; 213
    342e:	90 83       	st	Z, r25
	}

	if (recv1_buf.nxfrd >= recv1_buf.nbytes) {
    3430:	90 91 15 2b 	lds	r25, 0x2B15	; 0x802b15 <recv1_buf+0x103>
    3434:	98 17       	cp	r25, r24
    3436:	18 f0       	brcs	.+6      	; 0x343e <__vector_26+0x42>
		recv1_buf.done = YES;
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	80 93 16 2b 	sts	0x2B16, r24	; 0x802b16 <recv1_buf+0x104>
	}

}
    343e:	ff 91       	pop	r31
    3440:	ef 91       	pop	r30
    3442:	9f 91       	pop	r25
    3444:	8f 91       	pop	r24
    3446:	2f 91       	pop	r18
    3448:	0f 90       	pop	r0
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	0f 90       	pop	r0
    344e:	1f 90       	pop	r1
    3450:	18 95       	reti

00003452 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    3452:	1f 92       	push	r1
    3454:	0f 92       	push	r0
    3456:	0f b6       	in	r0, 0x3f	; 63
    3458:	0f 92       	push	r0
    345a:	11 24       	eor	r1, r1
    345c:	8f 93       	push	r24
    345e:	9f 93       	push	r25
    3460:	ef 93       	push	r30
    3462:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    3464:	e0 e2       	ldi	r30, 0x20	; 32
    3466:	f8 e0       	ldi	r31, 0x08	; 8
    3468:	85 81       	ldd	r24, Z+5	; 0x05
    346a:	8f 7d       	andi	r24, 0xDF	; 223
    346c:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    346e:	80 91 2a 30 	lds	r24, 0x302A	; 0x80302a <send1_buf+0xff>
    3472:	e0 91 2b 30 	lds	r30, 0x302B	; 0x80302b <send1_buf+0x100>
    3476:	8e 17       	cp	r24, r30
    3478:	b9 f0       	breq	.+46     	; 0x34a8 <__vector_27+0x56>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    347a:	91 e0       	ldi	r25, 0x01	; 1
    347c:	9e 0f       	add	r25, r30
    347e:	90 93 2b 30 	sts	0x302B, r25	; 0x80302b <send1_buf+0x100>
    3482:	f0 e0       	ldi	r31, 0x00	; 0
    3484:	e5 5d       	subi	r30, 0xD5	; 213
    3486:	f0 4d       	sbci	r31, 0xD0	; 208
    3488:	80 81       	ld	r24, Z
    348a:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	9f 3f       	cpi	r25, 0xFF	; 255
    3492:	08 f4       	brcc	.+2      	; 0x3496 <__vector_27+0x44>
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	89 0f       	add	r24, r25
    3498:	80 93 2b 30 	sts	0x302B, r24	; 0x80302b <send1_buf+0x100>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    349c:	e0 e2       	ldi	r30, 0x20	; 32
    349e:	f8 e0       	ldi	r31, 0x08	; 8
    34a0:	85 81       	ldd	r24, Z+5	; 0x05
    34a2:	80 62       	ori	r24, 0x20	; 32
    34a4:	85 83       	std	Z+5, r24	; 0x05
    34a6:	03 c0       	rjmp	.+6      	; 0x34ae <__vector_27+0x5c>
	} else {
		send1_buf.done = YES;
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	80 93 2f 30 	sts	0x302F, r24	; 0x80302f <send1_buf+0x104>
	if (send1_buf.nxfrd >= send1_buf.nbytes) {
		USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
		send1_buf.done = YES;
	}
*/
}
    34ae:	ff 91       	pop	r31
    34b0:	ef 91       	pop	r30
    34b2:	9f 91       	pop	r25
    34b4:	8f 91       	pop	r24
    34b6:	0f 90       	pop	r0
    34b8:	0f be       	out	0x3f, r0	; 63
    34ba:	0f 90       	pop	r0
    34bc:	1f 90       	pop	r1
    34be:	18 95       	reti

000034c0 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    34c0:	1f 92       	push	r1
    34c2:	0f 92       	push	r0
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	0f 92       	push	r0
    34c8:	11 24       	eor	r1, r1
    34ca:	8f 93       	push	r24
    34cc:	9f 93       	push	r25
    34ce:	af 93       	push	r26
    34d0:	bf 93       	push	r27
    34d2:	ef 93       	push	r30
    34d4:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    34d6:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    34da:	8d 30       	cpi	r24, 0x0D	; 13
    34dc:	21 f0       	breq	.+8      	; 0x34e6 <__vector_37+0x26>
    34de:	e0 91 24 2e 	lds	r30, 0x2E24	; 0x802e24 <recv3_buf+0x103>
    34e2:	ee 3f       	cpi	r30, 0xFE	; 254
    34e4:	78 f0       	brcs	.+30     	; 0x3504 <__vector_37+0x44>
		recv3_buf.done = YES;
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	80 93 25 2e 	sts	0x2E25, r24	; 0x802e25 <recv3_buf+0x104>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    34ec:	a4 e2       	ldi	r26, 0x24	; 36
    34ee:	be e2       	ldi	r27, 0x2E	; 46
    34f0:	8c 91       	ld	r24, X
    34f2:	e8 2f       	mov	r30, r24
    34f4:	f0 e0       	ldi	r31, 0x00	; 0
    34f6:	ef 5d       	subi	r30, 0xDF	; 223
    34f8:	f2 4d       	sbci	r31, 0xD2	; 210
    34fa:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    34fc:	80 93 22 2e 	sts	0x2E22, r24	; 0x802e22 <recv3_buf+0x101>
		recv3_buf.nxfrd = 0;
    3500:	1c 92       	st	X, r1
		return;
    3502:	08 c0       	rjmp	.+16     	; 0x3514 <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    3504:	91 e0       	ldi	r25, 0x01	; 1
    3506:	9e 0f       	add	r25, r30
    3508:	90 93 24 2e 	sts	0x2E24, r25	; 0x802e24 <recv3_buf+0x103>
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	ef 5d       	subi	r30, 0xDF	; 223
    3510:	f2 4d       	sbci	r31, 0xD2	; 210
    3512:	80 83       	st	Z, r24
	}

}
    3514:	ff 91       	pop	r31
    3516:	ef 91       	pop	r30
    3518:	bf 91       	pop	r27
    351a:	af 91       	pop	r26
    351c:	9f 91       	pop	r25
    351e:	8f 91       	pop	r24
    3520:	0f 90       	pop	r0
    3522:	0f be       	out	0x3f, r0	; 63
    3524:	0f 90       	pop	r0
    3526:	1f 90       	pop	r1
    3528:	18 95       	reti

0000352a <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    352a:	1f 92       	push	r1
    352c:	0f 92       	push	r0
    352e:	0f b6       	in	r0, 0x3f	; 63
    3530:	0f 92       	push	r0
    3532:	11 24       	eor	r1, r1
    3534:	8f 93       	push	r24
    3536:	9f 93       	push	r25
    3538:	af 93       	push	r26
    353a:	bf 93       	push	r27
    353c:	ef 93       	push	r30
    353e:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    3540:	a9 e2       	ldi	r26, 0x29	; 41
    3542:	bf e2       	ldi	r27, 0x2F	; 47
    3544:	ec 91       	ld	r30, X
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	8e 0f       	add	r24, r30
    354a:	8c 93       	st	X, r24
    354c:	f0 e0       	ldi	r31, 0x00	; 0
    354e:	ea 5d       	subi	r30, 0xDA	; 218
    3550:	f1 4d       	sbci	r31, 0xD1	; 209
    3552:	90 81       	ld	r25, Z
    3554:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    3558:	90 91 27 2f 	lds	r25, 0x2F27	; 0x802f27 <send3_buf+0x101>
    355c:	89 17       	cp	r24, r25
    355e:	40 f0       	brcs	.+16     	; 0x3570 <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    3560:	e0 e6       	ldi	r30, 0x60	; 96
    3562:	f8 e0       	ldi	r31, 0x08	; 8
    3564:	85 81       	ldd	r24, Z+5	; 0x05
    3566:	8f 7d       	andi	r24, 0xDF	; 223
    3568:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	80 93 2a 2f 	sts	0x2F2A, r24	; 0x802f2a <send3_buf+0x104>
	}

}
    3570:	ff 91       	pop	r31
    3572:	ef 91       	pop	r30
    3574:	bf 91       	pop	r27
    3576:	af 91       	pop	r26
    3578:	9f 91       	pop	r25
    357a:	8f 91       	pop	r24
    357c:	0f 90       	pop	r0
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	0f 90       	pop	r0
    3582:	1f 90       	pop	r1
    3584:	18 95       	reti

00003586 <reboot>:
#include "wdt.h"

void reboot(void)
{

	init_USART();
    3586:	0e 94 a6 18 	call	0x314c	; 0x314c <init_USART>
	init_XPORT();
    358a:	0e 94 cd 1a 	call	0x359a	; 0x359a <init_XPORT>
	CPU_CCP = CCP_IOREG_gc;
    358e:	88 ed       	ldi	r24, 0xD8	; 216
    3590:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    3598:	08 95       	ret

0000359a <init_XPORT>:
#include "initialize.h"

void init_XPORT(void)
{

	PORTC.OUTCLR = PIN3_bm;		// PC3 is the /RESET pin for the XPort
    359a:	e0 e4       	ldi	r30, 0x40	; 64
    359c:	f4 e0       	ldi	r31, 0x04	; 4
    359e:	88 e0       	ldi	r24, 0x08	; 8
    35a0:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;
    35a2:	81 83       	std	Z+1, r24	; 0x01
    35a4:	ad e8       	ldi	r26, 0x8D	; 141
    35a6:	b0 e2       	ldi	r27, 0x20	; 32
    35a8:	11 97       	sbiw	r26, 0x01	; 1
    35aa:	f1 f7       	brne	.-4      	; 0x35a8 <init_XPORT+0xe>
    35ac:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;
    35ae:	85 83       	std	Z+5, r24	; 0x05
    35b0:	08 95       	ret

000035b2 <__subsf3>:
    35b2:	50 58       	subi	r21, 0x80	; 128

000035b4 <__addsf3>:
    35b4:	bb 27       	eor	r27, r27
    35b6:	aa 27       	eor	r26, r26
    35b8:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__addsf3x>
    35bc:	0c 94 35 1c 	jmp	0x386a	; 0x386a <__fp_round>
    35c0:	0e 94 27 1c 	call	0x384e	; 0x384e <__fp_pscA>
    35c4:	38 f0       	brcs	.+14     	; 0x35d4 <__addsf3+0x20>
    35c6:	0e 94 2e 1c 	call	0x385c	; 0x385c <__fp_pscB>
    35ca:	20 f0       	brcs	.+8      	; 0x35d4 <__addsf3+0x20>
    35cc:	39 f4       	brne	.+14     	; 0x35dc <__addsf3+0x28>
    35ce:	9f 3f       	cpi	r25, 0xFF	; 255
    35d0:	19 f4       	brne	.+6      	; 0x35d8 <__addsf3+0x24>
    35d2:	26 f4       	brtc	.+8      	; 0x35dc <__addsf3+0x28>
    35d4:	0c 94 24 1c 	jmp	0x3848	; 0x3848 <__fp_nan>
    35d8:	0e f4       	brtc	.+2      	; 0x35dc <__addsf3+0x28>
    35da:	e0 95       	com	r30
    35dc:	e7 fb       	bst	r30, 7
    35de:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__fp_inf>

000035e2 <__addsf3x>:
    35e2:	e9 2f       	mov	r30, r25
    35e4:	0e 94 46 1c 	call	0x388c	; 0x388c <__fp_split3>
    35e8:	58 f3       	brcs	.-42     	; 0x35c0 <__addsf3+0xc>
    35ea:	ba 17       	cp	r27, r26
    35ec:	62 07       	cpc	r22, r18
    35ee:	73 07       	cpc	r23, r19
    35f0:	84 07       	cpc	r24, r20
    35f2:	95 07       	cpc	r25, r21
    35f4:	20 f0       	brcs	.+8      	; 0x35fe <__addsf3x+0x1c>
    35f6:	79 f4       	brne	.+30     	; 0x3616 <__addsf3x+0x34>
    35f8:	a6 f5       	brtc	.+104    	; 0x3662 <__addsf3x+0x80>
    35fa:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__fp_zero>
    35fe:	0e f4       	brtc	.+2      	; 0x3602 <__addsf3x+0x20>
    3600:	e0 95       	com	r30
    3602:	0b 2e       	mov	r0, r27
    3604:	ba 2f       	mov	r27, r26
    3606:	a0 2d       	mov	r26, r0
    3608:	0b 01       	movw	r0, r22
    360a:	b9 01       	movw	r22, r18
    360c:	90 01       	movw	r18, r0
    360e:	0c 01       	movw	r0, r24
    3610:	ca 01       	movw	r24, r20
    3612:	a0 01       	movw	r20, r0
    3614:	11 24       	eor	r1, r1
    3616:	ff 27       	eor	r31, r31
    3618:	59 1b       	sub	r21, r25
    361a:	99 f0       	breq	.+38     	; 0x3642 <__addsf3x+0x60>
    361c:	59 3f       	cpi	r21, 0xF9	; 249
    361e:	50 f4       	brcc	.+20     	; 0x3634 <__addsf3x+0x52>
    3620:	50 3e       	cpi	r21, 0xE0	; 224
    3622:	68 f1       	brcs	.+90     	; 0x367e <__addsf3x+0x9c>
    3624:	1a 16       	cp	r1, r26
    3626:	f0 40       	sbci	r31, 0x00	; 0
    3628:	a2 2f       	mov	r26, r18
    362a:	23 2f       	mov	r18, r19
    362c:	34 2f       	mov	r19, r20
    362e:	44 27       	eor	r20, r20
    3630:	58 5f       	subi	r21, 0xF8	; 248
    3632:	f3 cf       	rjmp	.-26     	; 0x361a <__addsf3x+0x38>
    3634:	46 95       	lsr	r20
    3636:	37 95       	ror	r19
    3638:	27 95       	ror	r18
    363a:	a7 95       	ror	r26
    363c:	f0 40       	sbci	r31, 0x00	; 0
    363e:	53 95       	inc	r21
    3640:	c9 f7       	brne	.-14     	; 0x3634 <__addsf3x+0x52>
    3642:	7e f4       	brtc	.+30     	; 0x3662 <__addsf3x+0x80>
    3644:	1f 16       	cp	r1, r31
    3646:	ba 0b       	sbc	r27, r26
    3648:	62 0b       	sbc	r22, r18
    364a:	73 0b       	sbc	r23, r19
    364c:	84 0b       	sbc	r24, r20
    364e:	ba f0       	brmi	.+46     	; 0x367e <__addsf3x+0x9c>
    3650:	91 50       	subi	r25, 0x01	; 1
    3652:	a1 f0       	breq	.+40     	; 0x367c <__addsf3x+0x9a>
    3654:	ff 0f       	add	r31, r31
    3656:	bb 1f       	adc	r27, r27
    3658:	66 1f       	adc	r22, r22
    365a:	77 1f       	adc	r23, r23
    365c:	88 1f       	adc	r24, r24
    365e:	c2 f7       	brpl	.-16     	; 0x3650 <__addsf3x+0x6e>
    3660:	0e c0       	rjmp	.+28     	; 0x367e <__addsf3x+0x9c>
    3662:	ba 0f       	add	r27, r26
    3664:	62 1f       	adc	r22, r18
    3666:	73 1f       	adc	r23, r19
    3668:	84 1f       	adc	r24, r20
    366a:	48 f4       	brcc	.+18     	; 0x367e <__addsf3x+0x9c>
    366c:	87 95       	ror	r24
    366e:	77 95       	ror	r23
    3670:	67 95       	ror	r22
    3672:	b7 95       	ror	r27
    3674:	f7 95       	ror	r31
    3676:	9e 3f       	cpi	r25, 0xFE	; 254
    3678:	08 f0       	brcs	.+2      	; 0x367c <__addsf3x+0x9a>
    367a:	b0 cf       	rjmp	.-160    	; 0x35dc <__addsf3+0x28>
    367c:	93 95       	inc	r25
    367e:	88 0f       	add	r24, r24
    3680:	08 f0       	brcs	.+2      	; 0x3684 <__addsf3x+0xa2>
    3682:	99 27       	eor	r25, r25
    3684:	ee 0f       	add	r30, r30
    3686:	97 95       	ror	r25
    3688:	87 95       	ror	r24
    368a:	08 95       	ret

0000368c <__cmpsf2>:
    368c:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__fp_cmp>
    3690:	08 f4       	brcc	.+2      	; 0x3694 <__cmpsf2+0x8>
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	08 95       	ret

00003696 <__divsf3>:
    3696:	0e 94 5f 1b 	call	0x36be	; 0x36be <__divsf3x>
    369a:	0c 94 35 1c 	jmp	0x386a	; 0x386a <__fp_round>
    369e:	0e 94 2e 1c 	call	0x385c	; 0x385c <__fp_pscB>
    36a2:	58 f0       	brcs	.+22     	; 0x36ba <__divsf3+0x24>
    36a4:	0e 94 27 1c 	call	0x384e	; 0x384e <__fp_pscA>
    36a8:	40 f0       	brcs	.+16     	; 0x36ba <__divsf3+0x24>
    36aa:	29 f4       	brne	.+10     	; 0x36b6 <__divsf3+0x20>
    36ac:	5f 3f       	cpi	r21, 0xFF	; 255
    36ae:	29 f0       	breq	.+10     	; 0x36ba <__divsf3+0x24>
    36b0:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__fp_inf>
    36b4:	51 11       	cpse	r21, r1
    36b6:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__fp_szero>
    36ba:	0c 94 24 1c 	jmp	0x3848	; 0x3848 <__fp_nan>

000036be <__divsf3x>:
    36be:	0e 94 46 1c 	call	0x388c	; 0x388c <__fp_split3>
    36c2:	68 f3       	brcs	.-38     	; 0x369e <__divsf3+0x8>

000036c4 <__divsf3_pse>:
    36c4:	99 23       	and	r25, r25
    36c6:	b1 f3       	breq	.-20     	; 0x36b4 <__divsf3+0x1e>
    36c8:	55 23       	and	r21, r21
    36ca:	91 f3       	breq	.-28     	; 0x36b0 <__divsf3+0x1a>
    36cc:	95 1b       	sub	r25, r21
    36ce:	55 0b       	sbc	r21, r21
    36d0:	bb 27       	eor	r27, r27
    36d2:	aa 27       	eor	r26, r26
    36d4:	62 17       	cp	r22, r18
    36d6:	73 07       	cpc	r23, r19
    36d8:	84 07       	cpc	r24, r20
    36da:	38 f0       	brcs	.+14     	; 0x36ea <__divsf3_pse+0x26>
    36dc:	9f 5f       	subi	r25, 0xFF	; 255
    36de:	5f 4f       	sbci	r21, 0xFF	; 255
    36e0:	22 0f       	add	r18, r18
    36e2:	33 1f       	adc	r19, r19
    36e4:	44 1f       	adc	r20, r20
    36e6:	aa 1f       	adc	r26, r26
    36e8:	a9 f3       	breq	.-22     	; 0x36d4 <__divsf3_pse+0x10>
    36ea:	35 d0       	rcall	.+106    	; 0x3756 <__divsf3_pse+0x92>
    36ec:	0e 2e       	mov	r0, r30
    36ee:	3a f0       	brmi	.+14     	; 0x36fe <__divsf3_pse+0x3a>
    36f0:	e0 e8       	ldi	r30, 0x80	; 128
    36f2:	32 d0       	rcall	.+100    	; 0x3758 <__divsf3_pse+0x94>
    36f4:	91 50       	subi	r25, 0x01	; 1
    36f6:	50 40       	sbci	r21, 0x00	; 0
    36f8:	e6 95       	lsr	r30
    36fa:	00 1c       	adc	r0, r0
    36fc:	ca f7       	brpl	.-14     	; 0x36f0 <__divsf3_pse+0x2c>
    36fe:	2b d0       	rcall	.+86     	; 0x3756 <__divsf3_pse+0x92>
    3700:	fe 2f       	mov	r31, r30
    3702:	29 d0       	rcall	.+82     	; 0x3756 <__divsf3_pse+0x92>
    3704:	66 0f       	add	r22, r22
    3706:	77 1f       	adc	r23, r23
    3708:	88 1f       	adc	r24, r24
    370a:	bb 1f       	adc	r27, r27
    370c:	26 17       	cp	r18, r22
    370e:	37 07       	cpc	r19, r23
    3710:	48 07       	cpc	r20, r24
    3712:	ab 07       	cpc	r26, r27
    3714:	b0 e8       	ldi	r27, 0x80	; 128
    3716:	09 f0       	breq	.+2      	; 0x371a <__divsf3_pse+0x56>
    3718:	bb 0b       	sbc	r27, r27
    371a:	80 2d       	mov	r24, r0
    371c:	bf 01       	movw	r22, r30
    371e:	ff 27       	eor	r31, r31
    3720:	93 58       	subi	r25, 0x83	; 131
    3722:	5f 4f       	sbci	r21, 0xFF	; 255
    3724:	3a f0       	brmi	.+14     	; 0x3734 <__divsf3_pse+0x70>
    3726:	9e 3f       	cpi	r25, 0xFE	; 254
    3728:	51 05       	cpc	r21, r1
    372a:	78 f0       	brcs	.+30     	; 0x374a <__divsf3_pse+0x86>
    372c:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__fp_inf>
    3730:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__fp_szero>
    3734:	5f 3f       	cpi	r21, 0xFF	; 255
    3736:	e4 f3       	brlt	.-8      	; 0x3730 <__divsf3_pse+0x6c>
    3738:	98 3e       	cpi	r25, 0xE8	; 232
    373a:	d4 f3       	brlt	.-12     	; 0x3730 <__divsf3_pse+0x6c>
    373c:	86 95       	lsr	r24
    373e:	77 95       	ror	r23
    3740:	67 95       	ror	r22
    3742:	b7 95       	ror	r27
    3744:	f7 95       	ror	r31
    3746:	9f 5f       	subi	r25, 0xFF	; 255
    3748:	c9 f7       	brne	.-14     	; 0x373c <__divsf3_pse+0x78>
    374a:	88 0f       	add	r24, r24
    374c:	91 1d       	adc	r25, r1
    374e:	96 95       	lsr	r25
    3750:	87 95       	ror	r24
    3752:	97 f9       	bld	r25, 7
    3754:	08 95       	ret
    3756:	e1 e0       	ldi	r30, 0x01	; 1
    3758:	66 0f       	add	r22, r22
    375a:	77 1f       	adc	r23, r23
    375c:	88 1f       	adc	r24, r24
    375e:	bb 1f       	adc	r27, r27
    3760:	62 17       	cp	r22, r18
    3762:	73 07       	cpc	r23, r19
    3764:	84 07       	cpc	r24, r20
    3766:	ba 07       	cpc	r27, r26
    3768:	20 f0       	brcs	.+8      	; 0x3772 <__divsf3_pse+0xae>
    376a:	62 1b       	sub	r22, r18
    376c:	73 0b       	sbc	r23, r19
    376e:	84 0b       	sbc	r24, r20
    3770:	ba 0b       	sbc	r27, r26
    3772:	ee 1f       	adc	r30, r30
    3774:	88 f7       	brcc	.-30     	; 0x3758 <__divsf3_pse+0x94>
    3776:	e0 95       	com	r30
    3778:	08 95       	ret

0000377a <__floatunsisf>:
    377a:	e8 94       	clt
    377c:	09 c0       	rjmp	.+18     	; 0x3790 <__floatsisf+0x12>

0000377e <__floatsisf>:
    377e:	97 fb       	bst	r25, 7
    3780:	3e f4       	brtc	.+14     	; 0x3790 <__floatsisf+0x12>
    3782:	90 95       	com	r25
    3784:	80 95       	com	r24
    3786:	70 95       	com	r23
    3788:	61 95       	neg	r22
    378a:	7f 4f       	sbci	r23, 0xFF	; 255
    378c:	8f 4f       	sbci	r24, 0xFF	; 255
    378e:	9f 4f       	sbci	r25, 0xFF	; 255
    3790:	99 23       	and	r25, r25
    3792:	a9 f0       	breq	.+42     	; 0x37be <__floatsisf+0x40>
    3794:	f9 2f       	mov	r31, r25
    3796:	96 e9       	ldi	r25, 0x96	; 150
    3798:	bb 27       	eor	r27, r27
    379a:	93 95       	inc	r25
    379c:	f6 95       	lsr	r31
    379e:	87 95       	ror	r24
    37a0:	77 95       	ror	r23
    37a2:	67 95       	ror	r22
    37a4:	b7 95       	ror	r27
    37a6:	f1 11       	cpse	r31, r1
    37a8:	f8 cf       	rjmp	.-16     	; 0x379a <__floatsisf+0x1c>
    37aa:	fa f4       	brpl	.+62     	; 0x37ea <__floatsisf+0x6c>
    37ac:	bb 0f       	add	r27, r27
    37ae:	11 f4       	brne	.+4      	; 0x37b4 <__floatsisf+0x36>
    37b0:	60 ff       	sbrs	r22, 0
    37b2:	1b c0       	rjmp	.+54     	; 0x37ea <__floatsisf+0x6c>
    37b4:	6f 5f       	subi	r22, 0xFF	; 255
    37b6:	7f 4f       	sbci	r23, 0xFF	; 255
    37b8:	8f 4f       	sbci	r24, 0xFF	; 255
    37ba:	9f 4f       	sbci	r25, 0xFF	; 255
    37bc:	16 c0       	rjmp	.+44     	; 0x37ea <__floatsisf+0x6c>
    37be:	88 23       	and	r24, r24
    37c0:	11 f0       	breq	.+4      	; 0x37c6 <__floatsisf+0x48>
    37c2:	96 e9       	ldi	r25, 0x96	; 150
    37c4:	11 c0       	rjmp	.+34     	; 0x37e8 <__floatsisf+0x6a>
    37c6:	77 23       	and	r23, r23
    37c8:	21 f0       	breq	.+8      	; 0x37d2 <__floatsisf+0x54>
    37ca:	9e e8       	ldi	r25, 0x8E	; 142
    37cc:	87 2f       	mov	r24, r23
    37ce:	76 2f       	mov	r23, r22
    37d0:	05 c0       	rjmp	.+10     	; 0x37dc <__floatsisf+0x5e>
    37d2:	66 23       	and	r22, r22
    37d4:	71 f0       	breq	.+28     	; 0x37f2 <__floatsisf+0x74>
    37d6:	96 e8       	ldi	r25, 0x86	; 134
    37d8:	86 2f       	mov	r24, r22
    37da:	70 e0       	ldi	r23, 0x00	; 0
    37dc:	60 e0       	ldi	r22, 0x00	; 0
    37de:	2a f0       	brmi	.+10     	; 0x37ea <__floatsisf+0x6c>
    37e0:	9a 95       	dec	r25
    37e2:	66 0f       	add	r22, r22
    37e4:	77 1f       	adc	r23, r23
    37e6:	88 1f       	adc	r24, r24
    37e8:	da f7       	brpl	.-10     	; 0x37e0 <__floatsisf+0x62>
    37ea:	88 0f       	add	r24, r24
    37ec:	96 95       	lsr	r25
    37ee:	87 95       	ror	r24
    37f0:	97 f9       	bld	r25, 7
    37f2:	08 95       	ret

000037f4 <__fp_cmp>:
    37f4:	99 0f       	add	r25, r25
    37f6:	00 08       	sbc	r0, r0
    37f8:	55 0f       	add	r21, r21
    37fa:	aa 0b       	sbc	r26, r26
    37fc:	e0 e8       	ldi	r30, 0x80	; 128
    37fe:	fe ef       	ldi	r31, 0xFE	; 254
    3800:	16 16       	cp	r1, r22
    3802:	17 06       	cpc	r1, r23
    3804:	e8 07       	cpc	r30, r24
    3806:	f9 07       	cpc	r31, r25
    3808:	c0 f0       	brcs	.+48     	; 0x383a <__fp_cmp+0x46>
    380a:	12 16       	cp	r1, r18
    380c:	13 06       	cpc	r1, r19
    380e:	e4 07       	cpc	r30, r20
    3810:	f5 07       	cpc	r31, r21
    3812:	98 f0       	brcs	.+38     	; 0x383a <__fp_cmp+0x46>
    3814:	62 1b       	sub	r22, r18
    3816:	73 0b       	sbc	r23, r19
    3818:	84 0b       	sbc	r24, r20
    381a:	95 0b       	sbc	r25, r21
    381c:	39 f4       	brne	.+14     	; 0x382c <__fp_cmp+0x38>
    381e:	0a 26       	eor	r0, r26
    3820:	61 f0       	breq	.+24     	; 0x383a <__fp_cmp+0x46>
    3822:	23 2b       	or	r18, r19
    3824:	24 2b       	or	r18, r20
    3826:	25 2b       	or	r18, r21
    3828:	21 f4       	brne	.+8      	; 0x3832 <__fp_cmp+0x3e>
    382a:	08 95       	ret
    382c:	0a 26       	eor	r0, r26
    382e:	09 f4       	brne	.+2      	; 0x3832 <__fp_cmp+0x3e>
    3830:	a1 40       	sbci	r26, 0x01	; 1
    3832:	a6 95       	lsr	r26
    3834:	8f ef       	ldi	r24, 0xFF	; 255
    3836:	81 1d       	adc	r24, r1
    3838:	81 1d       	adc	r24, r1
    383a:	08 95       	ret

0000383c <__fp_inf>:
    383c:	97 f9       	bld	r25, 7
    383e:	9f 67       	ori	r25, 0x7F	; 127
    3840:	80 e8       	ldi	r24, 0x80	; 128
    3842:	70 e0       	ldi	r23, 0x00	; 0
    3844:	60 e0       	ldi	r22, 0x00	; 0
    3846:	08 95       	ret

00003848 <__fp_nan>:
    3848:	9f ef       	ldi	r25, 0xFF	; 255
    384a:	80 ec       	ldi	r24, 0xC0	; 192
    384c:	08 95       	ret

0000384e <__fp_pscA>:
    384e:	00 24       	eor	r0, r0
    3850:	0a 94       	dec	r0
    3852:	16 16       	cp	r1, r22
    3854:	17 06       	cpc	r1, r23
    3856:	18 06       	cpc	r1, r24
    3858:	09 06       	cpc	r0, r25
    385a:	08 95       	ret

0000385c <__fp_pscB>:
    385c:	00 24       	eor	r0, r0
    385e:	0a 94       	dec	r0
    3860:	12 16       	cp	r1, r18
    3862:	13 06       	cpc	r1, r19
    3864:	14 06       	cpc	r1, r20
    3866:	05 06       	cpc	r0, r21
    3868:	08 95       	ret

0000386a <__fp_round>:
    386a:	09 2e       	mov	r0, r25
    386c:	03 94       	inc	r0
    386e:	00 0c       	add	r0, r0
    3870:	11 f4       	brne	.+4      	; 0x3876 <__fp_round+0xc>
    3872:	88 23       	and	r24, r24
    3874:	52 f0       	brmi	.+20     	; 0x388a <__fp_round+0x20>
    3876:	bb 0f       	add	r27, r27
    3878:	40 f4       	brcc	.+16     	; 0x388a <__fp_round+0x20>
    387a:	bf 2b       	or	r27, r31
    387c:	11 f4       	brne	.+4      	; 0x3882 <__fp_round+0x18>
    387e:	60 ff       	sbrs	r22, 0
    3880:	04 c0       	rjmp	.+8      	; 0x388a <__fp_round+0x20>
    3882:	6f 5f       	subi	r22, 0xFF	; 255
    3884:	7f 4f       	sbci	r23, 0xFF	; 255
    3886:	8f 4f       	sbci	r24, 0xFF	; 255
    3888:	9f 4f       	sbci	r25, 0xFF	; 255
    388a:	08 95       	ret

0000388c <__fp_split3>:
    388c:	57 fd       	sbrc	r21, 7
    388e:	90 58       	subi	r25, 0x80	; 128
    3890:	44 0f       	add	r20, r20
    3892:	55 1f       	adc	r21, r21
    3894:	59 f0       	breq	.+22     	; 0x38ac <__fp_splitA+0x10>
    3896:	5f 3f       	cpi	r21, 0xFF	; 255
    3898:	71 f0       	breq	.+28     	; 0x38b6 <__fp_splitA+0x1a>
    389a:	47 95       	ror	r20

0000389c <__fp_splitA>:
    389c:	88 0f       	add	r24, r24
    389e:	97 fb       	bst	r25, 7
    38a0:	99 1f       	adc	r25, r25
    38a2:	61 f0       	breq	.+24     	; 0x38bc <__fp_splitA+0x20>
    38a4:	9f 3f       	cpi	r25, 0xFF	; 255
    38a6:	79 f0       	breq	.+30     	; 0x38c6 <__fp_splitA+0x2a>
    38a8:	87 95       	ror	r24
    38aa:	08 95       	ret
    38ac:	12 16       	cp	r1, r18
    38ae:	13 06       	cpc	r1, r19
    38b0:	14 06       	cpc	r1, r20
    38b2:	55 1f       	adc	r21, r21
    38b4:	f2 cf       	rjmp	.-28     	; 0x389a <__fp_split3+0xe>
    38b6:	46 95       	lsr	r20
    38b8:	f1 df       	rcall	.-30     	; 0x389c <__fp_splitA>
    38ba:	08 c0       	rjmp	.+16     	; 0x38cc <__fp_splitA+0x30>
    38bc:	16 16       	cp	r1, r22
    38be:	17 06       	cpc	r1, r23
    38c0:	18 06       	cpc	r1, r24
    38c2:	99 1f       	adc	r25, r25
    38c4:	f1 cf       	rjmp	.-30     	; 0x38a8 <__fp_splitA+0xc>
    38c6:	86 95       	lsr	r24
    38c8:	71 05       	cpc	r23, r1
    38ca:	61 05       	cpc	r22, r1
    38cc:	08 94       	sec
    38ce:	08 95       	ret

000038d0 <__fp_zero>:
    38d0:	e8 94       	clt

000038d2 <__fp_szero>:
    38d2:	bb 27       	eor	r27, r27
    38d4:	66 27       	eor	r22, r22
    38d6:	77 27       	eor	r23, r23
    38d8:	cb 01       	movw	r24, r22
    38da:	97 f9       	bld	r25, 7
    38dc:	08 95       	ret

000038de <__gesf2>:
    38de:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__fp_cmp>
    38e2:	08 f4       	brcc	.+2      	; 0x38e6 <__gesf2+0x8>
    38e4:	8f ef       	ldi	r24, 0xFF	; 255
    38e6:	08 95       	ret

000038e8 <__mulsf3>:
    38e8:	0e 94 87 1c 	call	0x390e	; 0x390e <__mulsf3x>
    38ec:	0c 94 35 1c 	jmp	0x386a	; 0x386a <__fp_round>
    38f0:	0e 94 27 1c 	call	0x384e	; 0x384e <__fp_pscA>
    38f4:	38 f0       	brcs	.+14     	; 0x3904 <__mulsf3+0x1c>
    38f6:	0e 94 2e 1c 	call	0x385c	; 0x385c <__fp_pscB>
    38fa:	20 f0       	brcs	.+8      	; 0x3904 <__mulsf3+0x1c>
    38fc:	95 23       	and	r25, r21
    38fe:	11 f0       	breq	.+4      	; 0x3904 <__mulsf3+0x1c>
    3900:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__fp_inf>
    3904:	0c 94 24 1c 	jmp	0x3848	; 0x3848 <__fp_nan>
    3908:	11 24       	eor	r1, r1
    390a:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__fp_szero>

0000390e <__mulsf3x>:
    390e:	0e 94 46 1c 	call	0x388c	; 0x388c <__fp_split3>
    3912:	70 f3       	brcs	.-36     	; 0x38f0 <__mulsf3+0x8>

00003914 <__mulsf3_pse>:
    3914:	95 9f       	mul	r25, r21
    3916:	c1 f3       	breq	.-16     	; 0x3908 <__mulsf3+0x20>
    3918:	95 0f       	add	r25, r21
    391a:	50 e0       	ldi	r21, 0x00	; 0
    391c:	55 1f       	adc	r21, r21
    391e:	62 9f       	mul	r22, r18
    3920:	f0 01       	movw	r30, r0
    3922:	72 9f       	mul	r23, r18
    3924:	bb 27       	eor	r27, r27
    3926:	f0 0d       	add	r31, r0
    3928:	b1 1d       	adc	r27, r1
    392a:	63 9f       	mul	r22, r19
    392c:	aa 27       	eor	r26, r26
    392e:	f0 0d       	add	r31, r0
    3930:	b1 1d       	adc	r27, r1
    3932:	aa 1f       	adc	r26, r26
    3934:	64 9f       	mul	r22, r20
    3936:	66 27       	eor	r22, r22
    3938:	b0 0d       	add	r27, r0
    393a:	a1 1d       	adc	r26, r1
    393c:	66 1f       	adc	r22, r22
    393e:	82 9f       	mul	r24, r18
    3940:	22 27       	eor	r18, r18
    3942:	b0 0d       	add	r27, r0
    3944:	a1 1d       	adc	r26, r1
    3946:	62 1f       	adc	r22, r18
    3948:	73 9f       	mul	r23, r19
    394a:	b0 0d       	add	r27, r0
    394c:	a1 1d       	adc	r26, r1
    394e:	62 1f       	adc	r22, r18
    3950:	83 9f       	mul	r24, r19
    3952:	a0 0d       	add	r26, r0
    3954:	61 1d       	adc	r22, r1
    3956:	22 1f       	adc	r18, r18
    3958:	74 9f       	mul	r23, r20
    395a:	33 27       	eor	r19, r19
    395c:	a0 0d       	add	r26, r0
    395e:	61 1d       	adc	r22, r1
    3960:	23 1f       	adc	r18, r19
    3962:	84 9f       	mul	r24, r20
    3964:	60 0d       	add	r22, r0
    3966:	21 1d       	adc	r18, r1
    3968:	82 2f       	mov	r24, r18
    396a:	76 2f       	mov	r23, r22
    396c:	6a 2f       	mov	r22, r26
    396e:	11 24       	eor	r1, r1
    3970:	9f 57       	subi	r25, 0x7F	; 127
    3972:	50 40       	sbci	r21, 0x00	; 0
    3974:	9a f0       	brmi	.+38     	; 0x399c <__mulsf3_pse+0x88>
    3976:	f1 f0       	breq	.+60     	; 0x39b4 <__mulsf3_pse+0xa0>
    3978:	88 23       	and	r24, r24
    397a:	4a f0       	brmi	.+18     	; 0x398e <__mulsf3_pse+0x7a>
    397c:	ee 0f       	add	r30, r30
    397e:	ff 1f       	adc	r31, r31
    3980:	bb 1f       	adc	r27, r27
    3982:	66 1f       	adc	r22, r22
    3984:	77 1f       	adc	r23, r23
    3986:	88 1f       	adc	r24, r24
    3988:	91 50       	subi	r25, 0x01	; 1
    398a:	50 40       	sbci	r21, 0x00	; 0
    398c:	a9 f7       	brne	.-22     	; 0x3978 <__mulsf3_pse+0x64>
    398e:	9e 3f       	cpi	r25, 0xFE	; 254
    3990:	51 05       	cpc	r21, r1
    3992:	80 f0       	brcs	.+32     	; 0x39b4 <__mulsf3_pse+0xa0>
    3994:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__fp_inf>
    3998:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__fp_szero>
    399c:	5f 3f       	cpi	r21, 0xFF	; 255
    399e:	e4 f3       	brlt	.-8      	; 0x3998 <__mulsf3_pse+0x84>
    39a0:	98 3e       	cpi	r25, 0xE8	; 232
    39a2:	d4 f3       	brlt	.-12     	; 0x3998 <__mulsf3_pse+0x84>
    39a4:	86 95       	lsr	r24
    39a6:	77 95       	ror	r23
    39a8:	67 95       	ror	r22
    39aa:	b7 95       	ror	r27
    39ac:	f7 95       	ror	r31
    39ae:	e7 95       	ror	r30
    39b0:	9f 5f       	subi	r25, 0xFF	; 255
    39b2:	c1 f7       	brne	.-16     	; 0x39a4 <__mulsf3_pse+0x90>
    39b4:	fe 2b       	or	r31, r30
    39b6:	88 0f       	add	r24, r24
    39b8:	91 1d       	adc	r25, r1
    39ba:	96 95       	lsr	r25
    39bc:	87 95       	ror	r24
    39be:	97 f9       	bld	r25, 7
    39c0:	08 95       	ret

000039c2 <vfprintf>:
    39c2:	a0 e1       	ldi	r26, 0x10	; 16
    39c4:	b0 e0       	ldi	r27, 0x00	; 0
    39c6:	e7 ee       	ldi	r30, 0xE7	; 231
    39c8:	fc e1       	ldi	r31, 0x1C	; 28
    39ca:	0c 94 a2 20 	jmp	0x4144	; 0x4144 <__prologue_saves__>
    39ce:	7c 01       	movw	r14, r24
    39d0:	1b 01       	movw	r2, r22
    39d2:	6a 01       	movw	r12, r20
    39d4:	fc 01       	movw	r30, r24
    39d6:	16 82       	std	Z+6, r1	; 0x06
    39d8:	17 82       	std	Z+7, r1	; 0x07
    39da:	83 81       	ldd	r24, Z+3	; 0x03
    39dc:	81 ff       	sbrs	r24, 1
    39de:	44 c3       	rjmp	.+1672   	; 0x4068 <__RODATA_PM_OFFSET__+0x68>
    39e0:	9e 01       	movw	r18, r28
    39e2:	2f 5f       	subi	r18, 0xFF	; 255
    39e4:	3f 4f       	sbci	r19, 0xFF	; 255
    39e6:	39 01       	movw	r6, r18
    39e8:	f7 01       	movw	r30, r14
    39ea:	93 81       	ldd	r25, Z+3	; 0x03
    39ec:	f1 01       	movw	r30, r2
    39ee:	93 fd       	sbrc	r25, 3
    39f0:	85 91       	lpm	r24, Z+
    39f2:	93 ff       	sbrs	r25, 3
    39f4:	81 91       	ld	r24, Z+
    39f6:	1f 01       	movw	r2, r30
    39f8:	88 23       	and	r24, r24
    39fa:	09 f4       	brne	.+2      	; 0x39fe <vfprintf+0x3c>
    39fc:	31 c3       	rjmp	.+1634   	; 0x4060 <__RODATA_PM_OFFSET__+0x60>
    39fe:	85 32       	cpi	r24, 0x25	; 37
    3a00:	39 f4       	brne	.+14     	; 0x3a10 <vfprintf+0x4e>
    3a02:	93 fd       	sbrc	r25, 3
    3a04:	85 91       	lpm	r24, Z+
    3a06:	93 ff       	sbrs	r25, 3
    3a08:	81 91       	ld	r24, Z+
    3a0a:	1f 01       	movw	r2, r30
    3a0c:	85 32       	cpi	r24, 0x25	; 37
    3a0e:	39 f4       	brne	.+14     	; 0x3a1e <vfprintf+0x5c>
    3a10:	b7 01       	movw	r22, r14
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    3a18:	56 01       	movw	r10, r12
    3a1a:	65 01       	movw	r12, r10
    3a1c:	e5 cf       	rjmp	.-54     	; 0x39e8 <vfprintf+0x26>
    3a1e:	10 e0       	ldi	r17, 0x00	; 0
    3a20:	51 2c       	mov	r5, r1
    3a22:	91 2c       	mov	r9, r1
    3a24:	ff e1       	ldi	r31, 0x1F	; 31
    3a26:	f9 15       	cp	r31, r9
    3a28:	d8 f0       	brcs	.+54     	; 0x3a60 <vfprintf+0x9e>
    3a2a:	8b 32       	cpi	r24, 0x2B	; 43
    3a2c:	79 f0       	breq	.+30     	; 0x3a4c <vfprintf+0x8a>
    3a2e:	38 f4       	brcc	.+14     	; 0x3a3e <vfprintf+0x7c>
    3a30:	80 32       	cpi	r24, 0x20	; 32
    3a32:	79 f0       	breq	.+30     	; 0x3a52 <vfprintf+0x90>
    3a34:	83 32       	cpi	r24, 0x23	; 35
    3a36:	a1 f4       	brne	.+40     	; 0x3a60 <vfprintf+0x9e>
    3a38:	f9 2d       	mov	r31, r9
    3a3a:	f0 61       	ori	r31, 0x10	; 16
    3a3c:	2e c0       	rjmp	.+92     	; 0x3a9a <vfprintf+0xd8>
    3a3e:	8d 32       	cpi	r24, 0x2D	; 45
    3a40:	61 f0       	breq	.+24     	; 0x3a5a <vfprintf+0x98>
    3a42:	80 33       	cpi	r24, 0x30	; 48
    3a44:	69 f4       	brne	.+26     	; 0x3a60 <vfprintf+0x9e>
    3a46:	29 2d       	mov	r18, r9
    3a48:	21 60       	ori	r18, 0x01	; 1
    3a4a:	2d c0       	rjmp	.+90     	; 0x3aa6 <vfprintf+0xe4>
    3a4c:	39 2d       	mov	r19, r9
    3a4e:	32 60       	ori	r19, 0x02	; 2
    3a50:	93 2e       	mov	r9, r19
    3a52:	89 2d       	mov	r24, r9
    3a54:	84 60       	ori	r24, 0x04	; 4
    3a56:	98 2e       	mov	r9, r24
    3a58:	2a c0       	rjmp	.+84     	; 0x3aae <vfprintf+0xec>
    3a5a:	e9 2d       	mov	r30, r9
    3a5c:	e8 60       	ori	r30, 0x08	; 8
    3a5e:	15 c0       	rjmp	.+42     	; 0x3a8a <vfprintf+0xc8>
    3a60:	97 fc       	sbrc	r9, 7
    3a62:	2d c0       	rjmp	.+90     	; 0x3abe <vfprintf+0xfc>
    3a64:	20 ed       	ldi	r18, 0xD0	; 208
    3a66:	28 0f       	add	r18, r24
    3a68:	2a 30       	cpi	r18, 0x0A	; 10
    3a6a:	88 f4       	brcc	.+34     	; 0x3a8e <vfprintf+0xcc>
    3a6c:	96 fe       	sbrs	r9, 6
    3a6e:	06 c0       	rjmp	.+12     	; 0x3a7c <vfprintf+0xba>
    3a70:	3a e0       	ldi	r19, 0x0A	; 10
    3a72:	13 9f       	mul	r17, r19
    3a74:	20 0d       	add	r18, r0
    3a76:	11 24       	eor	r1, r1
    3a78:	12 2f       	mov	r17, r18
    3a7a:	19 c0       	rjmp	.+50     	; 0x3aae <vfprintf+0xec>
    3a7c:	8a e0       	ldi	r24, 0x0A	; 10
    3a7e:	58 9e       	mul	r5, r24
    3a80:	20 0d       	add	r18, r0
    3a82:	11 24       	eor	r1, r1
    3a84:	52 2e       	mov	r5, r18
    3a86:	e9 2d       	mov	r30, r9
    3a88:	e0 62       	ori	r30, 0x20	; 32
    3a8a:	9e 2e       	mov	r9, r30
    3a8c:	10 c0       	rjmp	.+32     	; 0x3aae <vfprintf+0xec>
    3a8e:	8e 32       	cpi	r24, 0x2E	; 46
    3a90:	31 f4       	brne	.+12     	; 0x3a9e <vfprintf+0xdc>
    3a92:	96 fc       	sbrc	r9, 6
    3a94:	e5 c2       	rjmp	.+1482   	; 0x4060 <__RODATA_PM_OFFSET__+0x60>
    3a96:	f9 2d       	mov	r31, r9
    3a98:	f0 64       	ori	r31, 0x40	; 64
    3a9a:	9f 2e       	mov	r9, r31
    3a9c:	08 c0       	rjmp	.+16     	; 0x3aae <vfprintf+0xec>
    3a9e:	8c 36       	cpi	r24, 0x6C	; 108
    3aa0:	21 f4       	brne	.+8      	; 0x3aaa <vfprintf+0xe8>
    3aa2:	29 2d       	mov	r18, r9
    3aa4:	20 68       	ori	r18, 0x80	; 128
    3aa6:	92 2e       	mov	r9, r18
    3aa8:	02 c0       	rjmp	.+4      	; 0x3aae <vfprintf+0xec>
    3aaa:	88 36       	cpi	r24, 0x68	; 104
    3aac:	41 f4       	brne	.+16     	; 0x3abe <vfprintf+0xfc>
    3aae:	f1 01       	movw	r30, r2
    3ab0:	93 fd       	sbrc	r25, 3
    3ab2:	85 91       	lpm	r24, Z+
    3ab4:	93 ff       	sbrs	r25, 3
    3ab6:	81 91       	ld	r24, Z+
    3ab8:	1f 01       	movw	r2, r30
    3aba:	81 11       	cpse	r24, r1
    3abc:	b3 cf       	rjmp	.-154    	; 0x3a24 <vfprintf+0x62>
    3abe:	9b eb       	ldi	r25, 0xBB	; 187
    3ac0:	98 0f       	add	r25, r24
    3ac2:	93 30       	cpi	r25, 0x03	; 3
    3ac4:	20 f4       	brcc	.+8      	; 0x3ace <vfprintf+0x10c>
    3ac6:	99 2d       	mov	r25, r9
    3ac8:	90 61       	ori	r25, 0x10	; 16
    3aca:	80 5e       	subi	r24, 0xE0	; 224
    3acc:	07 c0       	rjmp	.+14     	; 0x3adc <vfprintf+0x11a>
    3ace:	9b e9       	ldi	r25, 0x9B	; 155
    3ad0:	98 0f       	add	r25, r24
    3ad2:	93 30       	cpi	r25, 0x03	; 3
    3ad4:	08 f0       	brcs	.+2      	; 0x3ad8 <vfprintf+0x116>
    3ad6:	66 c1       	rjmp	.+716    	; 0x3da4 <vfprintf+0x3e2>
    3ad8:	99 2d       	mov	r25, r9
    3ada:	9f 7e       	andi	r25, 0xEF	; 239
    3adc:	96 ff       	sbrs	r25, 6
    3ade:	16 e0       	ldi	r17, 0x06	; 6
    3ae0:	9f 73       	andi	r25, 0x3F	; 63
    3ae2:	99 2e       	mov	r9, r25
    3ae4:	85 36       	cpi	r24, 0x65	; 101
    3ae6:	19 f4       	brne	.+6      	; 0x3aee <vfprintf+0x12c>
    3ae8:	90 64       	ori	r25, 0x40	; 64
    3aea:	99 2e       	mov	r9, r25
    3aec:	08 c0       	rjmp	.+16     	; 0x3afe <vfprintf+0x13c>
    3aee:	86 36       	cpi	r24, 0x66	; 102
    3af0:	21 f4       	brne	.+8      	; 0x3afa <vfprintf+0x138>
    3af2:	39 2f       	mov	r19, r25
    3af4:	30 68       	ori	r19, 0x80	; 128
    3af6:	93 2e       	mov	r9, r19
    3af8:	02 c0       	rjmp	.+4      	; 0x3afe <vfprintf+0x13c>
    3afa:	11 11       	cpse	r17, r1
    3afc:	11 50       	subi	r17, 0x01	; 1
    3afe:	97 fe       	sbrs	r9, 7
    3b00:	07 c0       	rjmp	.+14     	; 0x3b10 <vfprintf+0x14e>
    3b02:	1c 33       	cpi	r17, 0x3C	; 60
    3b04:	50 f4       	brcc	.+20     	; 0x3b1a <vfprintf+0x158>
    3b06:	44 24       	eor	r4, r4
    3b08:	43 94       	inc	r4
    3b0a:	41 0e       	add	r4, r17
    3b0c:	27 e0       	ldi	r18, 0x07	; 7
    3b0e:	0b c0       	rjmp	.+22     	; 0x3b26 <vfprintf+0x164>
    3b10:	18 30       	cpi	r17, 0x08	; 8
    3b12:	38 f0       	brcs	.+14     	; 0x3b22 <vfprintf+0x160>
    3b14:	27 e0       	ldi	r18, 0x07	; 7
    3b16:	17 e0       	ldi	r17, 0x07	; 7
    3b18:	05 c0       	rjmp	.+10     	; 0x3b24 <vfprintf+0x162>
    3b1a:	27 e0       	ldi	r18, 0x07	; 7
    3b1c:	9c e3       	ldi	r25, 0x3C	; 60
    3b1e:	49 2e       	mov	r4, r25
    3b20:	02 c0       	rjmp	.+4      	; 0x3b26 <vfprintf+0x164>
    3b22:	21 2f       	mov	r18, r17
    3b24:	41 2c       	mov	r4, r1
    3b26:	56 01       	movw	r10, r12
    3b28:	84 e0       	ldi	r24, 0x04	; 4
    3b2a:	a8 0e       	add	r10, r24
    3b2c:	b1 1c       	adc	r11, r1
    3b2e:	f6 01       	movw	r30, r12
    3b30:	60 81       	ld	r22, Z
    3b32:	71 81       	ldd	r23, Z+1	; 0x01
    3b34:	82 81       	ldd	r24, Z+2	; 0x02
    3b36:	93 81       	ldd	r25, Z+3	; 0x03
    3b38:	04 2d       	mov	r16, r4
    3b3a:	a3 01       	movw	r20, r6
    3b3c:	0e 94 3f 21 	call	0x427e	; 0x427e <__ftoa_engine>
    3b40:	6c 01       	movw	r12, r24
    3b42:	f9 81       	ldd	r31, Y+1	; 0x01
    3b44:	fc 87       	std	Y+12, r31	; 0x0c
    3b46:	f0 ff       	sbrs	r31, 0
    3b48:	02 c0       	rjmp	.+4      	; 0x3b4e <vfprintf+0x18c>
    3b4a:	f3 ff       	sbrs	r31, 3
    3b4c:	06 c0       	rjmp	.+12     	; 0x3b5a <vfprintf+0x198>
    3b4e:	91 fc       	sbrc	r9, 1
    3b50:	06 c0       	rjmp	.+12     	; 0x3b5e <vfprintf+0x19c>
    3b52:	92 fe       	sbrs	r9, 2
    3b54:	06 c0       	rjmp	.+12     	; 0x3b62 <vfprintf+0x1a0>
    3b56:	00 e2       	ldi	r16, 0x20	; 32
    3b58:	05 c0       	rjmp	.+10     	; 0x3b64 <vfprintf+0x1a2>
    3b5a:	0d e2       	ldi	r16, 0x2D	; 45
    3b5c:	03 c0       	rjmp	.+6      	; 0x3b64 <vfprintf+0x1a2>
    3b5e:	0b e2       	ldi	r16, 0x2B	; 43
    3b60:	01 c0       	rjmp	.+2      	; 0x3b64 <vfprintf+0x1a2>
    3b62:	00 e0       	ldi	r16, 0x00	; 0
    3b64:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b66:	8c 70       	andi	r24, 0x0C	; 12
    3b68:	19 f0       	breq	.+6      	; 0x3b70 <vfprintf+0x1ae>
    3b6a:	01 11       	cpse	r16, r1
    3b6c:	5a c2       	rjmp	.+1204   	; 0x4022 <__RODATA_PM_OFFSET__+0x22>
    3b6e:	9b c2       	rjmp	.+1334   	; 0x40a6 <__RODATA_PM_OFFSET__+0xa6>
    3b70:	97 fe       	sbrs	r9, 7
    3b72:	10 c0       	rjmp	.+32     	; 0x3b94 <vfprintf+0x1d2>
    3b74:	4c 0c       	add	r4, r12
    3b76:	fc 85       	ldd	r31, Y+12	; 0x0c
    3b78:	f4 ff       	sbrs	r31, 4
    3b7a:	04 c0       	rjmp	.+8      	; 0x3b84 <vfprintf+0x1c2>
    3b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b7e:	81 33       	cpi	r24, 0x31	; 49
    3b80:	09 f4       	brne	.+2      	; 0x3b84 <vfprintf+0x1c2>
    3b82:	4a 94       	dec	r4
    3b84:	14 14       	cp	r1, r4
    3b86:	74 f5       	brge	.+92     	; 0x3be4 <vfprintf+0x222>
    3b88:	28 e0       	ldi	r18, 0x08	; 8
    3b8a:	24 15       	cp	r18, r4
    3b8c:	78 f5       	brcc	.+94     	; 0x3bec <vfprintf+0x22a>
    3b8e:	88 e0       	ldi	r24, 0x08	; 8
    3b90:	48 2e       	mov	r4, r24
    3b92:	2c c0       	rjmp	.+88     	; 0x3bec <vfprintf+0x22a>
    3b94:	96 fc       	sbrc	r9, 6
    3b96:	2a c0       	rjmp	.+84     	; 0x3bec <vfprintf+0x22a>
    3b98:	81 2f       	mov	r24, r17
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	8c 15       	cp	r24, r12
    3b9e:	9d 05       	cpc	r25, r13
    3ba0:	9c f0       	brlt	.+38     	; 0x3bc8 <vfprintf+0x206>
    3ba2:	3c ef       	ldi	r19, 0xFC	; 252
    3ba4:	c3 16       	cp	r12, r19
    3ba6:	3f ef       	ldi	r19, 0xFF	; 255
    3ba8:	d3 06       	cpc	r13, r19
    3baa:	74 f0       	brlt	.+28     	; 0x3bc8 <vfprintf+0x206>
    3bac:	89 2d       	mov	r24, r9
    3bae:	80 68       	ori	r24, 0x80	; 128
    3bb0:	98 2e       	mov	r9, r24
    3bb2:	0a c0       	rjmp	.+20     	; 0x3bc8 <vfprintf+0x206>
    3bb4:	e2 e0       	ldi	r30, 0x02	; 2
    3bb6:	f0 e0       	ldi	r31, 0x00	; 0
    3bb8:	ec 0f       	add	r30, r28
    3bba:	fd 1f       	adc	r31, r29
    3bbc:	e1 0f       	add	r30, r17
    3bbe:	f1 1d       	adc	r31, r1
    3bc0:	80 81       	ld	r24, Z
    3bc2:	80 33       	cpi	r24, 0x30	; 48
    3bc4:	19 f4       	brne	.+6      	; 0x3bcc <vfprintf+0x20a>
    3bc6:	11 50       	subi	r17, 0x01	; 1
    3bc8:	11 11       	cpse	r17, r1
    3bca:	f4 cf       	rjmp	.-24     	; 0x3bb4 <vfprintf+0x1f2>
    3bcc:	97 fe       	sbrs	r9, 7
    3bce:	0e c0       	rjmp	.+28     	; 0x3bec <vfprintf+0x22a>
    3bd0:	44 24       	eor	r4, r4
    3bd2:	43 94       	inc	r4
    3bd4:	41 0e       	add	r4, r17
    3bd6:	81 2f       	mov	r24, r17
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	c8 16       	cp	r12, r24
    3bdc:	d9 06       	cpc	r13, r25
    3bde:	2c f4       	brge	.+10     	; 0x3bea <vfprintf+0x228>
    3be0:	1c 19       	sub	r17, r12
    3be2:	04 c0       	rjmp	.+8      	; 0x3bec <vfprintf+0x22a>
    3be4:	44 24       	eor	r4, r4
    3be6:	43 94       	inc	r4
    3be8:	01 c0       	rjmp	.+2      	; 0x3bec <vfprintf+0x22a>
    3bea:	10 e0       	ldi	r17, 0x00	; 0
    3bec:	97 fe       	sbrs	r9, 7
    3bee:	06 c0       	rjmp	.+12     	; 0x3bfc <vfprintf+0x23a>
    3bf0:	1c 14       	cp	r1, r12
    3bf2:	1d 04       	cpc	r1, r13
    3bf4:	34 f4       	brge	.+12     	; 0x3c02 <vfprintf+0x240>
    3bf6:	c6 01       	movw	r24, r12
    3bf8:	01 96       	adiw	r24, 0x01	; 1
    3bfa:	05 c0       	rjmp	.+10     	; 0x3c06 <vfprintf+0x244>
    3bfc:	85 e0       	ldi	r24, 0x05	; 5
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	02 c0       	rjmp	.+4      	; 0x3c06 <vfprintf+0x244>
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	01 11       	cpse	r16, r1
    3c08:	01 96       	adiw	r24, 0x01	; 1
    3c0a:	11 23       	and	r17, r17
    3c0c:	31 f0       	breq	.+12     	; 0x3c1a <vfprintf+0x258>
    3c0e:	21 2f       	mov	r18, r17
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	2f 5f       	subi	r18, 0xFF	; 255
    3c14:	3f 4f       	sbci	r19, 0xFF	; 255
    3c16:	82 0f       	add	r24, r18
    3c18:	93 1f       	adc	r25, r19
    3c1a:	25 2d       	mov	r18, r5
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	82 17       	cp	r24, r18
    3c20:	93 07       	cpc	r25, r19
    3c22:	14 f4       	brge	.+4      	; 0x3c28 <vfprintf+0x266>
    3c24:	58 1a       	sub	r5, r24
    3c26:	01 c0       	rjmp	.+2      	; 0x3c2a <vfprintf+0x268>
    3c28:	51 2c       	mov	r5, r1
    3c2a:	89 2d       	mov	r24, r9
    3c2c:	89 70       	andi	r24, 0x09	; 9
    3c2e:	49 f4       	brne	.+18     	; 0x3c42 <vfprintf+0x280>
    3c30:	55 20       	and	r5, r5
    3c32:	39 f0       	breq	.+14     	; 0x3c42 <vfprintf+0x280>
    3c34:	b7 01       	movw	r22, r14
    3c36:	80 e2       	ldi	r24, 0x20	; 32
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    3c3e:	5a 94       	dec	r5
    3c40:	f7 cf       	rjmp	.-18     	; 0x3c30 <vfprintf+0x26e>
    3c42:	00 23       	and	r16, r16
    3c44:	29 f0       	breq	.+10     	; 0x3c50 <vfprintf+0x28e>
    3c46:	b7 01       	movw	r22, r14
    3c48:	80 2f       	mov	r24, r16
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    3c50:	93 fc       	sbrc	r9, 3
    3c52:	09 c0       	rjmp	.+18     	; 0x3c66 <vfprintf+0x2a4>
    3c54:	55 20       	and	r5, r5
    3c56:	39 f0       	breq	.+14     	; 0x3c66 <vfprintf+0x2a4>
    3c58:	b7 01       	movw	r22, r14
    3c5a:	80 e3       	ldi	r24, 0x30	; 48
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    3c62:	5a 94       	dec	r5
    3c64:	f7 cf       	rjmp	.-18     	; 0x3c54 <vfprintf+0x292>
    3c66:	97 fe       	sbrs	r9, 7
    3c68:	4c c0       	rjmp	.+152    	; 0x3d02 <vfprintf+0x340>
    3c6a:	46 01       	movw	r8, r12
    3c6c:	d7 fe       	sbrs	r13, 7
    3c6e:	02 c0       	rjmp	.+4      	; 0x3c74 <vfprintf+0x2b2>
    3c70:	81 2c       	mov	r8, r1
    3c72:	91 2c       	mov	r9, r1
    3c74:	c6 01       	movw	r24, r12
    3c76:	88 19       	sub	r24, r8
    3c78:	99 09       	sbc	r25, r9
    3c7a:	f3 01       	movw	r30, r6
    3c7c:	e8 0f       	add	r30, r24
    3c7e:	f9 1f       	adc	r31, r25
    3c80:	ed 87       	std	Y+13, r30	; 0x0d
    3c82:	fe 87       	std	Y+14, r31	; 0x0e
    3c84:	96 01       	movw	r18, r12
    3c86:	24 19       	sub	r18, r4
    3c88:	31 09       	sbc	r19, r1
    3c8a:	2f 87       	std	Y+15, r18	; 0x0f
    3c8c:	38 8b       	std	Y+16, r19	; 0x10
    3c8e:	01 2f       	mov	r16, r17
    3c90:	10 e0       	ldi	r17, 0x00	; 0
    3c92:	11 95       	neg	r17
    3c94:	01 95       	neg	r16
    3c96:	11 09       	sbc	r17, r1
    3c98:	3f ef       	ldi	r19, 0xFF	; 255
    3c9a:	83 16       	cp	r8, r19
    3c9c:	93 06       	cpc	r9, r19
    3c9e:	29 f4       	brne	.+10     	; 0x3caa <vfprintf+0x2e8>
    3ca0:	b7 01       	movw	r22, r14
    3ca2:	8e e2       	ldi	r24, 0x2E	; 46
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    3caa:	c8 14       	cp	r12, r8
    3cac:	d9 04       	cpc	r13, r9
    3cae:	4c f0       	brlt	.+18     	; 0x3cc2 <vfprintf+0x300>
    3cb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cb2:	98 89       	ldd	r25, Y+16	; 0x10
    3cb4:	88 15       	cp	r24, r8
    3cb6:	99 05       	cpc	r25, r9
    3cb8:	24 f4       	brge	.+8      	; 0x3cc2 <vfprintf+0x300>
    3cba:	ed 85       	ldd	r30, Y+13	; 0x0d
    3cbc:	fe 85       	ldd	r31, Y+14	; 0x0e
    3cbe:	81 81       	ldd	r24, Z+1	; 0x01
    3cc0:	01 c0       	rjmp	.+2      	; 0x3cc4 <vfprintf+0x302>
    3cc2:	80 e3       	ldi	r24, 0x30	; 48
    3cc4:	f1 e0       	ldi	r31, 0x01	; 1
    3cc6:	8f 1a       	sub	r8, r31
    3cc8:	91 08       	sbc	r9, r1
    3cca:	2d 85       	ldd	r18, Y+13	; 0x0d
    3ccc:	3e 85       	ldd	r19, Y+14	; 0x0e
    3cce:	2f 5f       	subi	r18, 0xFF	; 255
    3cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd2:	2d 87       	std	Y+13, r18	; 0x0d
    3cd4:	3e 87       	std	Y+14, r19	; 0x0e
    3cd6:	80 16       	cp	r8, r16
    3cd8:	91 06       	cpc	r9, r17
    3cda:	2c f0       	brlt	.+10     	; 0x3ce6 <vfprintf+0x324>
    3cdc:	b7 01       	movw	r22, r14
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    3ce4:	d9 cf       	rjmp	.-78     	; 0x3c98 <vfprintf+0x2d6>
    3ce6:	c8 14       	cp	r12, r8
    3ce8:	d9 04       	cpc	r13, r9
    3cea:	41 f4       	brne	.+16     	; 0x3cfc <vfprintf+0x33a>
    3cec:	9a 81       	ldd	r25, Y+2	; 0x02
    3cee:	96 33       	cpi	r25, 0x36	; 54
    3cf0:	20 f4       	brcc	.+8      	; 0x3cfa <vfprintf+0x338>
    3cf2:	95 33       	cpi	r25, 0x35	; 53
    3cf4:	19 f4       	brne	.+6      	; 0x3cfc <vfprintf+0x33a>
    3cf6:	3c 85       	ldd	r19, Y+12	; 0x0c
    3cf8:	34 ff       	sbrs	r19, 4
    3cfa:	81 e3       	ldi	r24, 0x31	; 49
    3cfc:	b7 01       	movw	r22, r14
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	4e c0       	rjmp	.+156    	; 0x3d9e <vfprintf+0x3dc>
    3d02:	8a 81       	ldd	r24, Y+2	; 0x02
    3d04:	81 33       	cpi	r24, 0x31	; 49
    3d06:	19 f0       	breq	.+6      	; 0x3d0e <vfprintf+0x34c>
    3d08:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d0a:	9f 7e       	andi	r25, 0xEF	; 239
    3d0c:	9c 87       	std	Y+12, r25	; 0x0c
    3d0e:	b7 01       	movw	r22, r14
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    3d16:	11 11       	cpse	r17, r1
    3d18:	05 c0       	rjmp	.+10     	; 0x3d24 <vfprintf+0x362>
    3d1a:	94 fc       	sbrc	r9, 4
    3d1c:	18 c0       	rjmp	.+48     	; 0x3d4e <vfprintf+0x38c>
    3d1e:	85 e6       	ldi	r24, 0x65	; 101
    3d20:	90 e0       	ldi	r25, 0x00	; 0
    3d22:	17 c0       	rjmp	.+46     	; 0x3d52 <vfprintf+0x390>
    3d24:	b7 01       	movw	r22, r14
    3d26:	8e e2       	ldi	r24, 0x2E	; 46
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    3d2e:	1e 5f       	subi	r17, 0xFE	; 254
    3d30:	82 e0       	ldi	r24, 0x02	; 2
    3d32:	01 e0       	ldi	r16, 0x01	; 1
    3d34:	08 0f       	add	r16, r24
    3d36:	f3 01       	movw	r30, r6
    3d38:	e8 0f       	add	r30, r24
    3d3a:	f1 1d       	adc	r31, r1
    3d3c:	80 81       	ld	r24, Z
    3d3e:	b7 01       	movw	r22, r14
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    3d46:	80 2f       	mov	r24, r16
    3d48:	01 13       	cpse	r16, r17
    3d4a:	f3 cf       	rjmp	.-26     	; 0x3d32 <vfprintf+0x370>
    3d4c:	e6 cf       	rjmp	.-52     	; 0x3d1a <vfprintf+0x358>
    3d4e:	85 e4       	ldi	r24, 0x45	; 69
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	b7 01       	movw	r22, r14
    3d54:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    3d58:	d7 fc       	sbrc	r13, 7
    3d5a:	06 c0       	rjmp	.+12     	; 0x3d68 <vfprintf+0x3a6>
    3d5c:	c1 14       	cp	r12, r1
    3d5e:	d1 04       	cpc	r13, r1
    3d60:	41 f4       	brne	.+16     	; 0x3d72 <vfprintf+0x3b0>
    3d62:	ec 85       	ldd	r30, Y+12	; 0x0c
    3d64:	e4 ff       	sbrs	r30, 4
    3d66:	05 c0       	rjmp	.+10     	; 0x3d72 <vfprintf+0x3b0>
    3d68:	d1 94       	neg	r13
    3d6a:	c1 94       	neg	r12
    3d6c:	d1 08       	sbc	r13, r1
    3d6e:	8d e2       	ldi	r24, 0x2D	; 45
    3d70:	01 c0       	rjmp	.+2      	; 0x3d74 <vfprintf+0x3b2>
    3d72:	8b e2       	ldi	r24, 0x2B	; 43
    3d74:	b7 01       	movw	r22, r14
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    3d7c:	80 e3       	ldi	r24, 0x30	; 48
    3d7e:	2a e0       	ldi	r18, 0x0A	; 10
    3d80:	c2 16       	cp	r12, r18
    3d82:	d1 04       	cpc	r13, r1
    3d84:	2c f0       	brlt	.+10     	; 0x3d90 <vfprintf+0x3ce>
    3d86:	8f 5f       	subi	r24, 0xFF	; 255
    3d88:	fa e0       	ldi	r31, 0x0A	; 10
    3d8a:	cf 1a       	sub	r12, r31
    3d8c:	d1 08       	sbc	r13, r1
    3d8e:	f7 cf       	rjmp	.-18     	; 0x3d7e <vfprintf+0x3bc>
    3d90:	b7 01       	movw	r22, r14
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    3d98:	b7 01       	movw	r22, r14
    3d9a:	c6 01       	movw	r24, r12
    3d9c:	c0 96       	adiw	r24, 0x30	; 48
    3d9e:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    3da2:	54 c1       	rjmp	.+680    	; 0x404c <__RODATA_PM_OFFSET__+0x4c>
    3da4:	83 36       	cpi	r24, 0x63	; 99
    3da6:	31 f0       	breq	.+12     	; 0x3db4 <vfprintf+0x3f2>
    3da8:	83 37       	cpi	r24, 0x73	; 115
    3daa:	79 f0       	breq	.+30     	; 0x3dca <vfprintf+0x408>
    3dac:	83 35       	cpi	r24, 0x53	; 83
    3dae:	09 f0       	breq	.+2      	; 0x3db2 <vfprintf+0x3f0>
    3db0:	56 c0       	rjmp	.+172    	; 0x3e5e <vfprintf+0x49c>
    3db2:	20 c0       	rjmp	.+64     	; 0x3df4 <vfprintf+0x432>
    3db4:	56 01       	movw	r10, r12
    3db6:	32 e0       	ldi	r19, 0x02	; 2
    3db8:	a3 0e       	add	r10, r19
    3dba:	b1 1c       	adc	r11, r1
    3dbc:	f6 01       	movw	r30, r12
    3dbe:	80 81       	ld	r24, Z
    3dc0:	89 83       	std	Y+1, r24	; 0x01
    3dc2:	01 e0       	ldi	r16, 0x01	; 1
    3dc4:	10 e0       	ldi	r17, 0x00	; 0
    3dc6:	63 01       	movw	r12, r6
    3dc8:	12 c0       	rjmp	.+36     	; 0x3dee <vfprintf+0x42c>
    3dca:	56 01       	movw	r10, r12
    3dcc:	f2 e0       	ldi	r31, 0x02	; 2
    3dce:	af 0e       	add	r10, r31
    3dd0:	b1 1c       	adc	r11, r1
    3dd2:	f6 01       	movw	r30, r12
    3dd4:	c0 80       	ld	r12, Z
    3dd6:	d1 80       	ldd	r13, Z+1	; 0x01
    3dd8:	96 fe       	sbrs	r9, 6
    3dda:	03 c0       	rjmp	.+6      	; 0x3de2 <vfprintf+0x420>
    3ddc:	61 2f       	mov	r22, r17
    3dde:	70 e0       	ldi	r23, 0x00	; 0
    3de0:	02 c0       	rjmp	.+4      	; 0x3de6 <vfprintf+0x424>
    3de2:	6f ef       	ldi	r22, 0xFF	; 255
    3de4:	7f ef       	ldi	r23, 0xFF	; 255
    3de6:	c6 01       	movw	r24, r12
    3de8:	0e 94 34 22 	call	0x4468	; 0x4468 <strnlen>
    3dec:	8c 01       	movw	r16, r24
    3dee:	f9 2d       	mov	r31, r9
    3df0:	ff 77       	andi	r31, 0x7F	; 127
    3df2:	14 c0       	rjmp	.+40     	; 0x3e1c <vfprintf+0x45a>
    3df4:	56 01       	movw	r10, r12
    3df6:	22 e0       	ldi	r18, 0x02	; 2
    3df8:	a2 0e       	add	r10, r18
    3dfa:	b1 1c       	adc	r11, r1
    3dfc:	f6 01       	movw	r30, r12
    3dfe:	c0 80       	ld	r12, Z
    3e00:	d1 80       	ldd	r13, Z+1	; 0x01
    3e02:	96 fe       	sbrs	r9, 6
    3e04:	03 c0       	rjmp	.+6      	; 0x3e0c <vfprintf+0x44a>
    3e06:	61 2f       	mov	r22, r17
    3e08:	70 e0       	ldi	r23, 0x00	; 0
    3e0a:	02 c0       	rjmp	.+4      	; 0x3e10 <vfprintf+0x44e>
    3e0c:	6f ef       	ldi	r22, 0xFF	; 255
    3e0e:	7f ef       	ldi	r23, 0xFF	; 255
    3e10:	c6 01       	movw	r24, r12
    3e12:	0e 94 17 22 	call	0x442e	; 0x442e <strnlen_P>
    3e16:	8c 01       	movw	r16, r24
    3e18:	f9 2d       	mov	r31, r9
    3e1a:	f0 68       	ori	r31, 0x80	; 128
    3e1c:	9f 2e       	mov	r9, r31
    3e1e:	f3 fd       	sbrc	r31, 3
    3e20:	1a c0       	rjmp	.+52     	; 0x3e56 <vfprintf+0x494>
    3e22:	85 2d       	mov	r24, r5
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	08 17       	cp	r16, r24
    3e28:	19 07       	cpc	r17, r25
    3e2a:	a8 f4       	brcc	.+42     	; 0x3e56 <vfprintf+0x494>
    3e2c:	b7 01       	movw	r22, r14
    3e2e:	80 e2       	ldi	r24, 0x20	; 32
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    3e36:	5a 94       	dec	r5
    3e38:	f4 cf       	rjmp	.-24     	; 0x3e22 <vfprintf+0x460>
    3e3a:	f6 01       	movw	r30, r12
    3e3c:	97 fc       	sbrc	r9, 7
    3e3e:	85 91       	lpm	r24, Z+
    3e40:	97 fe       	sbrs	r9, 7
    3e42:	81 91       	ld	r24, Z+
    3e44:	6f 01       	movw	r12, r30
    3e46:	b7 01       	movw	r22, r14
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    3e4e:	51 10       	cpse	r5, r1
    3e50:	5a 94       	dec	r5
    3e52:	01 50       	subi	r16, 0x01	; 1
    3e54:	11 09       	sbc	r17, r1
    3e56:	01 15       	cp	r16, r1
    3e58:	11 05       	cpc	r17, r1
    3e5a:	79 f7       	brne	.-34     	; 0x3e3a <vfprintf+0x478>
    3e5c:	f7 c0       	rjmp	.+494    	; 0x404c <__RODATA_PM_OFFSET__+0x4c>
    3e5e:	84 36       	cpi	r24, 0x64	; 100
    3e60:	11 f0       	breq	.+4      	; 0x3e66 <vfprintf+0x4a4>
    3e62:	89 36       	cpi	r24, 0x69	; 105
    3e64:	61 f5       	brne	.+88     	; 0x3ebe <vfprintf+0x4fc>
    3e66:	56 01       	movw	r10, r12
    3e68:	97 fe       	sbrs	r9, 7
    3e6a:	09 c0       	rjmp	.+18     	; 0x3e7e <vfprintf+0x4bc>
    3e6c:	24 e0       	ldi	r18, 0x04	; 4
    3e6e:	a2 0e       	add	r10, r18
    3e70:	b1 1c       	adc	r11, r1
    3e72:	f6 01       	movw	r30, r12
    3e74:	60 81       	ld	r22, Z
    3e76:	71 81       	ldd	r23, Z+1	; 0x01
    3e78:	82 81       	ldd	r24, Z+2	; 0x02
    3e7a:	93 81       	ldd	r25, Z+3	; 0x03
    3e7c:	0a c0       	rjmp	.+20     	; 0x3e92 <vfprintf+0x4d0>
    3e7e:	f2 e0       	ldi	r31, 0x02	; 2
    3e80:	af 0e       	add	r10, r31
    3e82:	b1 1c       	adc	r11, r1
    3e84:	f6 01       	movw	r30, r12
    3e86:	60 81       	ld	r22, Z
    3e88:	71 81       	ldd	r23, Z+1	; 0x01
    3e8a:	07 2e       	mov	r0, r23
    3e8c:	00 0c       	add	r0, r0
    3e8e:	88 0b       	sbc	r24, r24
    3e90:	99 0b       	sbc	r25, r25
    3e92:	f9 2d       	mov	r31, r9
    3e94:	ff 76       	andi	r31, 0x6F	; 111
    3e96:	9f 2e       	mov	r9, r31
    3e98:	97 ff       	sbrs	r25, 7
    3e9a:	09 c0       	rjmp	.+18     	; 0x3eae <vfprintf+0x4ec>
    3e9c:	90 95       	com	r25
    3e9e:	80 95       	com	r24
    3ea0:	70 95       	com	r23
    3ea2:	61 95       	neg	r22
    3ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ea6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eaa:	f0 68       	ori	r31, 0x80	; 128
    3eac:	9f 2e       	mov	r9, r31
    3eae:	2a e0       	ldi	r18, 0x0A	; 10
    3eb0:	30 e0       	ldi	r19, 0x00	; 0
    3eb2:	a3 01       	movw	r20, r6
    3eb4:	0e 94 b2 22 	call	0x4564	; 0x4564 <__ultoa_invert>
    3eb8:	c8 2e       	mov	r12, r24
    3eba:	c6 18       	sub	r12, r6
    3ebc:	3f c0       	rjmp	.+126    	; 0x3f3c <vfprintf+0x57a>
    3ebe:	09 2d       	mov	r16, r9
    3ec0:	85 37       	cpi	r24, 0x75	; 117
    3ec2:	21 f4       	brne	.+8      	; 0x3ecc <vfprintf+0x50a>
    3ec4:	0f 7e       	andi	r16, 0xEF	; 239
    3ec6:	2a e0       	ldi	r18, 0x0A	; 10
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	1d c0       	rjmp	.+58     	; 0x3f06 <vfprintf+0x544>
    3ecc:	09 7f       	andi	r16, 0xF9	; 249
    3ece:	8f 36       	cpi	r24, 0x6F	; 111
    3ed0:	91 f0       	breq	.+36     	; 0x3ef6 <vfprintf+0x534>
    3ed2:	18 f4       	brcc	.+6      	; 0x3eda <vfprintf+0x518>
    3ed4:	88 35       	cpi	r24, 0x58	; 88
    3ed6:	59 f0       	breq	.+22     	; 0x3eee <vfprintf+0x52c>
    3ed8:	c3 c0       	rjmp	.+390    	; 0x4060 <__RODATA_PM_OFFSET__+0x60>
    3eda:	80 37       	cpi	r24, 0x70	; 112
    3edc:	19 f0       	breq	.+6      	; 0x3ee4 <vfprintf+0x522>
    3ede:	88 37       	cpi	r24, 0x78	; 120
    3ee0:	11 f0       	breq	.+4      	; 0x3ee6 <vfprintf+0x524>
    3ee2:	be c0       	rjmp	.+380    	; 0x4060 <__RODATA_PM_OFFSET__+0x60>
    3ee4:	00 61       	ori	r16, 0x10	; 16
    3ee6:	04 ff       	sbrs	r16, 4
    3ee8:	09 c0       	rjmp	.+18     	; 0x3efc <vfprintf+0x53a>
    3eea:	04 60       	ori	r16, 0x04	; 4
    3eec:	07 c0       	rjmp	.+14     	; 0x3efc <vfprintf+0x53a>
    3eee:	94 fe       	sbrs	r9, 4
    3ef0:	08 c0       	rjmp	.+16     	; 0x3f02 <vfprintf+0x540>
    3ef2:	06 60       	ori	r16, 0x06	; 6
    3ef4:	06 c0       	rjmp	.+12     	; 0x3f02 <vfprintf+0x540>
    3ef6:	28 e0       	ldi	r18, 0x08	; 8
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	05 c0       	rjmp	.+10     	; 0x3f06 <vfprintf+0x544>
    3efc:	20 e1       	ldi	r18, 0x10	; 16
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	02 c0       	rjmp	.+4      	; 0x3f06 <vfprintf+0x544>
    3f02:	20 e1       	ldi	r18, 0x10	; 16
    3f04:	32 e0       	ldi	r19, 0x02	; 2
    3f06:	56 01       	movw	r10, r12
    3f08:	07 ff       	sbrs	r16, 7
    3f0a:	09 c0       	rjmp	.+18     	; 0x3f1e <vfprintf+0x55c>
    3f0c:	84 e0       	ldi	r24, 0x04	; 4
    3f0e:	a8 0e       	add	r10, r24
    3f10:	b1 1c       	adc	r11, r1
    3f12:	f6 01       	movw	r30, r12
    3f14:	60 81       	ld	r22, Z
    3f16:	71 81       	ldd	r23, Z+1	; 0x01
    3f18:	82 81       	ldd	r24, Z+2	; 0x02
    3f1a:	93 81       	ldd	r25, Z+3	; 0x03
    3f1c:	08 c0       	rjmp	.+16     	; 0x3f2e <vfprintf+0x56c>
    3f1e:	f2 e0       	ldi	r31, 0x02	; 2
    3f20:	af 0e       	add	r10, r31
    3f22:	b1 1c       	adc	r11, r1
    3f24:	f6 01       	movw	r30, r12
    3f26:	60 81       	ld	r22, Z
    3f28:	71 81       	ldd	r23, Z+1	; 0x01
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	a3 01       	movw	r20, r6
    3f30:	0e 94 b2 22 	call	0x4564	; 0x4564 <__ultoa_invert>
    3f34:	c8 2e       	mov	r12, r24
    3f36:	c6 18       	sub	r12, r6
    3f38:	0f 77       	andi	r16, 0x7F	; 127
    3f3a:	90 2e       	mov	r9, r16
    3f3c:	96 fe       	sbrs	r9, 6
    3f3e:	0b c0       	rjmp	.+22     	; 0x3f56 <vfprintf+0x594>
    3f40:	09 2d       	mov	r16, r9
    3f42:	0e 7f       	andi	r16, 0xFE	; 254
    3f44:	c1 16       	cp	r12, r17
    3f46:	50 f4       	brcc	.+20     	; 0x3f5c <vfprintf+0x59a>
    3f48:	94 fe       	sbrs	r9, 4
    3f4a:	0a c0       	rjmp	.+20     	; 0x3f60 <vfprintf+0x59e>
    3f4c:	92 fc       	sbrc	r9, 2
    3f4e:	08 c0       	rjmp	.+16     	; 0x3f60 <vfprintf+0x59e>
    3f50:	09 2d       	mov	r16, r9
    3f52:	0e 7e       	andi	r16, 0xEE	; 238
    3f54:	05 c0       	rjmp	.+10     	; 0x3f60 <vfprintf+0x59e>
    3f56:	dc 2c       	mov	r13, r12
    3f58:	09 2d       	mov	r16, r9
    3f5a:	03 c0       	rjmp	.+6      	; 0x3f62 <vfprintf+0x5a0>
    3f5c:	dc 2c       	mov	r13, r12
    3f5e:	01 c0       	rjmp	.+2      	; 0x3f62 <vfprintf+0x5a0>
    3f60:	d1 2e       	mov	r13, r17
    3f62:	04 ff       	sbrs	r16, 4
    3f64:	0d c0       	rjmp	.+26     	; 0x3f80 <vfprintf+0x5be>
    3f66:	fe 01       	movw	r30, r28
    3f68:	ec 0d       	add	r30, r12
    3f6a:	f1 1d       	adc	r31, r1
    3f6c:	80 81       	ld	r24, Z
    3f6e:	80 33       	cpi	r24, 0x30	; 48
    3f70:	11 f4       	brne	.+4      	; 0x3f76 <vfprintf+0x5b4>
    3f72:	09 7e       	andi	r16, 0xE9	; 233
    3f74:	09 c0       	rjmp	.+18     	; 0x3f88 <vfprintf+0x5c6>
    3f76:	02 ff       	sbrs	r16, 2
    3f78:	06 c0       	rjmp	.+12     	; 0x3f86 <vfprintf+0x5c4>
    3f7a:	d3 94       	inc	r13
    3f7c:	d3 94       	inc	r13
    3f7e:	04 c0       	rjmp	.+8      	; 0x3f88 <vfprintf+0x5c6>
    3f80:	80 2f       	mov	r24, r16
    3f82:	86 78       	andi	r24, 0x86	; 134
    3f84:	09 f0       	breq	.+2      	; 0x3f88 <vfprintf+0x5c6>
    3f86:	d3 94       	inc	r13
    3f88:	03 fd       	sbrc	r16, 3
    3f8a:	11 c0       	rjmp	.+34     	; 0x3fae <vfprintf+0x5ec>
    3f8c:	00 ff       	sbrs	r16, 0
    3f8e:	06 c0       	rjmp	.+12     	; 0x3f9c <vfprintf+0x5da>
    3f90:	1c 2d       	mov	r17, r12
    3f92:	d5 14       	cp	r13, r5
    3f94:	80 f4       	brcc	.+32     	; 0x3fb6 <vfprintf+0x5f4>
    3f96:	15 0d       	add	r17, r5
    3f98:	1d 19       	sub	r17, r13
    3f9a:	0d c0       	rjmp	.+26     	; 0x3fb6 <vfprintf+0x5f4>
    3f9c:	d5 14       	cp	r13, r5
    3f9e:	58 f4       	brcc	.+22     	; 0x3fb6 <vfprintf+0x5f4>
    3fa0:	b7 01       	movw	r22, r14
    3fa2:	80 e2       	ldi	r24, 0x20	; 32
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    3faa:	d3 94       	inc	r13
    3fac:	f7 cf       	rjmp	.-18     	; 0x3f9c <vfprintf+0x5da>
    3fae:	d5 14       	cp	r13, r5
    3fb0:	10 f4       	brcc	.+4      	; 0x3fb6 <vfprintf+0x5f4>
    3fb2:	5d 18       	sub	r5, r13
    3fb4:	01 c0       	rjmp	.+2      	; 0x3fb8 <vfprintf+0x5f6>
    3fb6:	51 2c       	mov	r5, r1
    3fb8:	04 ff       	sbrs	r16, 4
    3fba:	10 c0       	rjmp	.+32     	; 0x3fdc <vfprintf+0x61a>
    3fbc:	b7 01       	movw	r22, r14
    3fbe:	80 e3       	ldi	r24, 0x30	; 48
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    3fc6:	02 ff       	sbrs	r16, 2
    3fc8:	17 c0       	rjmp	.+46     	; 0x3ff8 <vfprintf+0x636>
    3fca:	01 fd       	sbrc	r16, 1
    3fcc:	03 c0       	rjmp	.+6      	; 0x3fd4 <vfprintf+0x612>
    3fce:	88 e7       	ldi	r24, 0x78	; 120
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	02 c0       	rjmp	.+4      	; 0x3fd8 <vfprintf+0x616>
    3fd4:	88 e5       	ldi	r24, 0x58	; 88
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	b7 01       	movw	r22, r14
    3fda:	0c c0       	rjmp	.+24     	; 0x3ff4 <vfprintf+0x632>
    3fdc:	80 2f       	mov	r24, r16
    3fde:	86 78       	andi	r24, 0x86	; 134
    3fe0:	59 f0       	breq	.+22     	; 0x3ff8 <vfprintf+0x636>
    3fe2:	01 ff       	sbrs	r16, 1
    3fe4:	02 c0       	rjmp	.+4      	; 0x3fea <vfprintf+0x628>
    3fe6:	8b e2       	ldi	r24, 0x2B	; 43
    3fe8:	01 c0       	rjmp	.+2      	; 0x3fec <vfprintf+0x62a>
    3fea:	80 e2       	ldi	r24, 0x20	; 32
    3fec:	07 fd       	sbrc	r16, 7
    3fee:	8d e2       	ldi	r24, 0x2D	; 45
    3ff0:	b7 01       	movw	r22, r14
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    3ff8:	c1 16       	cp	r12, r17
    3ffa:	38 f4       	brcc	.+14     	; 0x400a <__RODATA_PM_OFFSET__+0xa>
    3ffc:	b7 01       	movw	r22, r14
    3ffe:	80 e3       	ldi	r24, 0x30	; 48
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    4006:	11 50       	subi	r17, 0x01	; 1
    4008:	f7 cf       	rjmp	.-18     	; 0x3ff8 <vfprintf+0x636>
    400a:	ca 94       	dec	r12
    400c:	f3 01       	movw	r30, r6
    400e:	ec 0d       	add	r30, r12
    4010:	f1 1d       	adc	r31, r1
    4012:	80 81       	ld	r24, Z
    4014:	b7 01       	movw	r22, r14
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    401c:	c1 10       	cpse	r12, r1
    401e:	f5 cf       	rjmp	.-22     	; 0x400a <__RODATA_PM_OFFSET__+0xa>
    4020:	15 c0       	rjmp	.+42     	; 0x404c <__RODATA_PM_OFFSET__+0x4c>
    4022:	f4 e0       	ldi	r31, 0x04	; 4
    4024:	f5 15       	cp	r31, r5
    4026:	60 f5       	brcc	.+88     	; 0x4080 <__RODATA_PM_OFFSET__+0x80>
    4028:	84 e0       	ldi	r24, 0x04	; 4
    402a:	58 1a       	sub	r5, r24
    402c:	93 fe       	sbrs	r9, 3
    402e:	1f c0       	rjmp	.+62     	; 0x406e <__RODATA_PM_OFFSET__+0x6e>
    4030:	01 11       	cpse	r16, r1
    4032:	27 c0       	rjmp	.+78     	; 0x4082 <__RODATA_PM_OFFSET__+0x82>
    4034:	2c 85       	ldd	r18, Y+12	; 0x0c
    4036:	23 ff       	sbrs	r18, 3
    4038:	2a c0       	rjmp	.+84     	; 0x408e <__RODATA_PM_OFFSET__+0x8e>
    403a:	02 e5       	ldi	r16, 0x52	; 82
    403c:	11 e0       	ldi	r17, 0x01	; 1
    403e:	39 2d       	mov	r19, r9
    4040:	30 71       	andi	r19, 0x10	; 16
    4042:	93 2e       	mov	r9, r19
    4044:	f8 01       	movw	r30, r16
    4046:	84 91       	lpm	r24, Z
    4048:	81 11       	cpse	r24, r1
    404a:	24 c0       	rjmp	.+72     	; 0x4094 <__RODATA_PM_OFFSET__+0x94>
    404c:	55 20       	and	r5, r5
    404e:	09 f4       	brne	.+2      	; 0x4052 <__RODATA_PM_OFFSET__+0x52>
    4050:	e4 cc       	rjmp	.-1592   	; 0x3a1a <vfprintf+0x58>
    4052:	b7 01       	movw	r22, r14
    4054:	80 e2       	ldi	r24, 0x20	; 32
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    405c:	5a 94       	dec	r5
    405e:	f6 cf       	rjmp	.-20     	; 0x404c <__RODATA_PM_OFFSET__+0x4c>
    4060:	f7 01       	movw	r30, r14
    4062:	86 81       	ldd	r24, Z+6	; 0x06
    4064:	97 81       	ldd	r25, Z+7	; 0x07
    4066:	26 c0       	rjmp	.+76     	; 0x40b4 <__RODATA_PM_OFFSET__+0xb4>
    4068:	8f ef       	ldi	r24, 0xFF	; 255
    406a:	9f ef       	ldi	r25, 0xFF	; 255
    406c:	23 c0       	rjmp	.+70     	; 0x40b4 <__RODATA_PM_OFFSET__+0xb4>
    406e:	b7 01       	movw	r22, r14
    4070:	80 e2       	ldi	r24, 0x20	; 32
    4072:	90 e0       	ldi	r25, 0x00	; 0
    4074:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    4078:	5a 94       	dec	r5
    407a:	51 10       	cpse	r5, r1
    407c:	f8 cf       	rjmp	.-16     	; 0x406e <__RODATA_PM_OFFSET__+0x6e>
    407e:	d8 cf       	rjmp	.-80     	; 0x4030 <__RODATA_PM_OFFSET__+0x30>
    4080:	51 2c       	mov	r5, r1
    4082:	b7 01       	movw	r22, r14
    4084:	80 2f       	mov	r24, r16
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    408c:	d3 cf       	rjmp	.-90     	; 0x4034 <__RODATA_PM_OFFSET__+0x34>
    408e:	06 e5       	ldi	r16, 0x56	; 86
    4090:	11 e0       	ldi	r17, 0x01	; 1
    4092:	d5 cf       	rjmp	.-86     	; 0x403e <__RODATA_PM_OFFSET__+0x3e>
    4094:	91 10       	cpse	r9, r1
    4096:	80 52       	subi	r24, 0x20	; 32
    4098:	b7 01       	movw	r22, r14
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	0e 94 54 22 	call	0x44a8	; 0x44a8 <fputc>
    40a0:	0f 5f       	subi	r16, 0xFF	; 255
    40a2:	1f 4f       	sbci	r17, 0xFF	; 255
    40a4:	cf cf       	rjmp	.-98     	; 0x4044 <__RODATA_PM_OFFSET__+0x44>
    40a6:	23 e0       	ldi	r18, 0x03	; 3
    40a8:	25 15       	cp	r18, r5
    40aa:	10 f4       	brcc	.+4      	; 0x40b0 <__RODATA_PM_OFFSET__+0xb0>
    40ac:	83 e0       	ldi	r24, 0x03	; 3
    40ae:	bd cf       	rjmp	.-134    	; 0x402a <__RODATA_PM_OFFSET__+0x2a>
    40b0:	51 2c       	mov	r5, r1
    40b2:	c0 cf       	rjmp	.-128    	; 0x4034 <__RODATA_PM_OFFSET__+0x34>
    40b4:	60 96       	adiw	r28, 0x10	; 16
    40b6:	e2 e1       	ldi	r30, 0x12	; 18
    40b8:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <__epilogue_restores__>

000040bc <__divmodhi4>:
    40bc:	97 fb       	bst	r25, 7
    40be:	07 2e       	mov	r0, r23
    40c0:	16 f4       	brtc	.+4      	; 0x40c6 <__divmodhi4+0xa>
    40c2:	00 94       	com	r0
    40c4:	07 d0       	rcall	.+14     	; 0x40d4 <__divmodhi4_neg1>
    40c6:	77 fd       	sbrc	r23, 7
    40c8:	09 d0       	rcall	.+18     	; 0x40dc <__divmodhi4_neg2>
    40ca:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__udivmodhi4>
    40ce:	07 fc       	sbrc	r0, 7
    40d0:	05 d0       	rcall	.+10     	; 0x40dc <__divmodhi4_neg2>
    40d2:	3e f4       	brtc	.+14     	; 0x40e2 <__divmodhi4_exit>

000040d4 <__divmodhi4_neg1>:
    40d4:	90 95       	com	r25
    40d6:	81 95       	neg	r24
    40d8:	9f 4f       	sbci	r25, 0xFF	; 255
    40da:	08 95       	ret

000040dc <__divmodhi4_neg2>:
    40dc:	70 95       	com	r23
    40de:	61 95       	neg	r22
    40e0:	7f 4f       	sbci	r23, 0xFF	; 255

000040e2 <__divmodhi4_exit>:
    40e2:	08 95       	ret

000040e4 <__divmodsi4>:
    40e4:	05 2e       	mov	r0, r21
    40e6:	97 fb       	bst	r25, 7
    40e8:	1e f4       	brtc	.+6      	; 0x40f0 <__divmodsi4+0xc>
    40ea:	00 94       	com	r0
    40ec:	0e 94 89 20 	call	0x4112	; 0x4112 <__negsi2>
    40f0:	57 fd       	sbrc	r21, 7
    40f2:	07 d0       	rcall	.+14     	; 0x4102 <__divmodsi4_neg2>
    40f4:	0e 94 e7 20 	call	0x41ce	; 0x41ce <__udivmodsi4>
    40f8:	07 fc       	sbrc	r0, 7
    40fa:	03 d0       	rcall	.+6      	; 0x4102 <__divmodsi4_neg2>
    40fc:	4e f4       	brtc	.+18     	; 0x4110 <__divmodsi4_exit>
    40fe:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__negsi2>

00004102 <__divmodsi4_neg2>:
    4102:	50 95       	com	r21
    4104:	40 95       	com	r20
    4106:	30 95       	com	r19
    4108:	21 95       	neg	r18
    410a:	3f 4f       	sbci	r19, 0xFF	; 255
    410c:	4f 4f       	sbci	r20, 0xFF	; 255
    410e:	5f 4f       	sbci	r21, 0xFF	; 255

00004110 <__divmodsi4_exit>:
    4110:	08 95       	ret

00004112 <__negsi2>:
    4112:	90 95       	com	r25
    4114:	80 95       	com	r24
    4116:	70 95       	com	r23
    4118:	61 95       	neg	r22
    411a:	7f 4f       	sbci	r23, 0xFF	; 255
    411c:	8f 4f       	sbci	r24, 0xFF	; 255
    411e:	9f 4f       	sbci	r25, 0xFF	; 255
    4120:	08 95       	ret

00004122 <__tablejump2__>:
    4122:	ee 0f       	add	r30, r30
    4124:	ff 1f       	adc	r31, r31
    4126:	05 90       	lpm	r0, Z+
    4128:	f4 91       	lpm	r31, Z
    412a:	e0 2d       	mov	r30, r0
    412c:	09 94       	ijmp

0000412e <__muluhisi3>:
    412e:	0e 94 09 21 	call	0x4212	; 0x4212 <__umulhisi3>
    4132:	a5 9f       	mul	r26, r21
    4134:	90 0d       	add	r25, r0
    4136:	b4 9f       	mul	r27, r20
    4138:	90 0d       	add	r25, r0
    413a:	a4 9f       	mul	r26, r20
    413c:	80 0d       	add	r24, r0
    413e:	91 1d       	adc	r25, r1
    4140:	11 24       	eor	r1, r1
    4142:	08 95       	ret

00004144 <__prologue_saves__>:
    4144:	2f 92       	push	r2
    4146:	3f 92       	push	r3
    4148:	4f 92       	push	r4
    414a:	5f 92       	push	r5
    414c:	6f 92       	push	r6
    414e:	7f 92       	push	r7
    4150:	8f 92       	push	r8
    4152:	9f 92       	push	r9
    4154:	af 92       	push	r10
    4156:	bf 92       	push	r11
    4158:	cf 92       	push	r12
    415a:	df 92       	push	r13
    415c:	ef 92       	push	r14
    415e:	ff 92       	push	r15
    4160:	0f 93       	push	r16
    4162:	1f 93       	push	r17
    4164:	cf 93       	push	r28
    4166:	df 93       	push	r29
    4168:	cd b7       	in	r28, 0x3d	; 61
    416a:	de b7       	in	r29, 0x3e	; 62
    416c:	ca 1b       	sub	r28, r26
    416e:	db 0b       	sbc	r29, r27
    4170:	cd bf       	out	0x3d, r28	; 61
    4172:	de bf       	out	0x3e, r29	; 62
    4174:	09 94       	ijmp

00004176 <__epilogue_restores__>:
    4176:	2a 88       	ldd	r2, Y+18	; 0x12
    4178:	39 88       	ldd	r3, Y+17	; 0x11
    417a:	48 88       	ldd	r4, Y+16	; 0x10
    417c:	5f 84       	ldd	r5, Y+15	; 0x0f
    417e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4180:	7d 84       	ldd	r7, Y+13	; 0x0d
    4182:	8c 84       	ldd	r8, Y+12	; 0x0c
    4184:	9b 84       	ldd	r9, Y+11	; 0x0b
    4186:	aa 84       	ldd	r10, Y+10	; 0x0a
    4188:	b9 84       	ldd	r11, Y+9	; 0x09
    418a:	c8 84       	ldd	r12, Y+8	; 0x08
    418c:	df 80       	ldd	r13, Y+7	; 0x07
    418e:	ee 80       	ldd	r14, Y+6	; 0x06
    4190:	fd 80       	ldd	r15, Y+5	; 0x05
    4192:	0c 81       	ldd	r16, Y+4	; 0x04
    4194:	1b 81       	ldd	r17, Y+3	; 0x03
    4196:	aa 81       	ldd	r26, Y+2	; 0x02
    4198:	b9 81       	ldd	r27, Y+1	; 0x01
    419a:	ce 0f       	add	r28, r30
    419c:	d1 1d       	adc	r29, r1
    419e:	cd bf       	out	0x3d, r28	; 61
    41a0:	de bf       	out	0x3e, r29	; 62
    41a2:	ed 01       	movw	r28, r26
    41a4:	08 95       	ret

000041a6 <__udivmodhi4>:
    41a6:	aa 1b       	sub	r26, r26
    41a8:	bb 1b       	sub	r27, r27
    41aa:	51 e1       	ldi	r21, 0x11	; 17
    41ac:	07 c0       	rjmp	.+14     	; 0x41bc <__udivmodhi4_ep>

000041ae <__udivmodhi4_loop>:
    41ae:	aa 1f       	adc	r26, r26
    41b0:	bb 1f       	adc	r27, r27
    41b2:	a6 17       	cp	r26, r22
    41b4:	b7 07       	cpc	r27, r23
    41b6:	10 f0       	brcs	.+4      	; 0x41bc <__udivmodhi4_ep>
    41b8:	a6 1b       	sub	r26, r22
    41ba:	b7 0b       	sbc	r27, r23

000041bc <__udivmodhi4_ep>:
    41bc:	88 1f       	adc	r24, r24
    41be:	99 1f       	adc	r25, r25
    41c0:	5a 95       	dec	r21
    41c2:	a9 f7       	brne	.-22     	; 0x41ae <__udivmodhi4_loop>
    41c4:	80 95       	com	r24
    41c6:	90 95       	com	r25
    41c8:	bc 01       	movw	r22, r24
    41ca:	cd 01       	movw	r24, r26
    41cc:	08 95       	ret

000041ce <__udivmodsi4>:
    41ce:	a1 e2       	ldi	r26, 0x21	; 33
    41d0:	1a 2e       	mov	r1, r26
    41d2:	aa 1b       	sub	r26, r26
    41d4:	bb 1b       	sub	r27, r27
    41d6:	fd 01       	movw	r30, r26
    41d8:	0d c0       	rjmp	.+26     	; 0x41f4 <__udivmodsi4_ep>

000041da <__udivmodsi4_loop>:
    41da:	aa 1f       	adc	r26, r26
    41dc:	bb 1f       	adc	r27, r27
    41de:	ee 1f       	adc	r30, r30
    41e0:	ff 1f       	adc	r31, r31
    41e2:	a2 17       	cp	r26, r18
    41e4:	b3 07       	cpc	r27, r19
    41e6:	e4 07       	cpc	r30, r20
    41e8:	f5 07       	cpc	r31, r21
    41ea:	20 f0       	brcs	.+8      	; 0x41f4 <__udivmodsi4_ep>
    41ec:	a2 1b       	sub	r26, r18
    41ee:	b3 0b       	sbc	r27, r19
    41f0:	e4 0b       	sbc	r30, r20
    41f2:	f5 0b       	sbc	r31, r21

000041f4 <__udivmodsi4_ep>:
    41f4:	66 1f       	adc	r22, r22
    41f6:	77 1f       	adc	r23, r23
    41f8:	88 1f       	adc	r24, r24
    41fa:	99 1f       	adc	r25, r25
    41fc:	1a 94       	dec	r1
    41fe:	69 f7       	brne	.-38     	; 0x41da <__udivmodsi4_loop>
    4200:	60 95       	com	r22
    4202:	70 95       	com	r23
    4204:	80 95       	com	r24
    4206:	90 95       	com	r25
    4208:	9b 01       	movw	r18, r22
    420a:	ac 01       	movw	r20, r24
    420c:	bd 01       	movw	r22, r26
    420e:	cf 01       	movw	r24, r30
    4210:	08 95       	ret

00004212 <__umulhisi3>:
    4212:	a2 9f       	mul	r26, r18
    4214:	b0 01       	movw	r22, r0
    4216:	b3 9f       	mul	r27, r19
    4218:	c0 01       	movw	r24, r0
    421a:	a3 9f       	mul	r26, r19
    421c:	70 0d       	add	r23, r0
    421e:	81 1d       	adc	r24, r1
    4220:	11 24       	eor	r1, r1
    4222:	91 1d       	adc	r25, r1
    4224:	b2 9f       	mul	r27, r18
    4226:	70 0d       	add	r23, r0
    4228:	81 1d       	adc	r24, r1
    422a:	11 24       	eor	r1, r1
    422c:	91 1d       	adc	r25, r1
    422e:	08 95       	ret

00004230 <atol>:
    4230:	1f 93       	push	r17
    4232:	fc 01       	movw	r30, r24
    4234:	99 27       	eor	r25, r25
    4236:	88 27       	eor	r24, r24
    4238:	bc 01       	movw	r22, r24
    423a:	e8 94       	clt
    423c:	11 91       	ld	r17, Z+
    423e:	10 32       	cpi	r17, 0x20	; 32
    4240:	e9 f3       	breq	.-6      	; 0x423c <atol+0xc>
    4242:	19 30       	cpi	r17, 0x09	; 9
    4244:	10 f0       	brcs	.+4      	; 0x424a <atol+0x1a>
    4246:	1e 30       	cpi	r17, 0x0E	; 14
    4248:	c8 f3       	brcs	.-14     	; 0x423c <atol+0xc>
    424a:	1b 32       	cpi	r17, 0x2B	; 43
    424c:	51 f0       	breq	.+20     	; 0x4262 <atol+0x32>
    424e:	1d 32       	cpi	r17, 0x2D	; 45
    4250:	49 f4       	brne	.+18     	; 0x4264 <atol+0x34>
    4252:	68 94       	set
    4254:	06 c0       	rjmp	.+12     	; 0x4262 <atol+0x32>
    4256:	0e 94 3f 22 	call	0x447e	; 0x447e <__mulsi_const_10>
    425a:	61 0f       	add	r22, r17
    425c:	71 1d       	adc	r23, r1
    425e:	81 1d       	adc	r24, r1
    4260:	91 1d       	adc	r25, r1
    4262:	11 91       	ld	r17, Z+
    4264:	10 53       	subi	r17, 0x30	; 48
    4266:	1a 30       	cpi	r17, 0x0A	; 10
    4268:	b0 f3       	brcs	.-20     	; 0x4256 <atol+0x26>
    426a:	3e f4       	brtc	.+14     	; 0x427a <atol+0x4a>
    426c:	90 95       	com	r25
    426e:	80 95       	com	r24
    4270:	70 95       	com	r23
    4272:	61 95       	neg	r22
    4274:	7f 4f       	sbci	r23, 0xFF	; 255
    4276:	8f 4f       	sbci	r24, 0xFF	; 255
    4278:	9f 4f       	sbci	r25, 0xFF	; 255
    427a:	1f 91       	pop	r17
    427c:	08 95       	ret

0000427e <__ftoa_engine>:
    427e:	28 30       	cpi	r18, 0x08	; 8
    4280:	08 f0       	brcs	.+2      	; 0x4284 <__ftoa_engine+0x6>
    4282:	27 e0       	ldi	r18, 0x07	; 7
    4284:	33 27       	eor	r19, r19
    4286:	da 01       	movw	r26, r20
    4288:	99 0f       	add	r25, r25
    428a:	31 1d       	adc	r19, r1
    428c:	87 fd       	sbrc	r24, 7
    428e:	91 60       	ori	r25, 0x01	; 1
    4290:	00 96       	adiw	r24, 0x00	; 0
    4292:	61 05       	cpc	r22, r1
    4294:	71 05       	cpc	r23, r1
    4296:	39 f4       	brne	.+14     	; 0x42a6 <__ftoa_engine+0x28>
    4298:	32 60       	ori	r19, 0x02	; 2
    429a:	2e 5f       	subi	r18, 0xFE	; 254
    429c:	3d 93       	st	X+, r19
    429e:	30 e3       	ldi	r19, 0x30	; 48
    42a0:	2a 95       	dec	r18
    42a2:	e1 f7       	brne	.-8      	; 0x429c <__ftoa_engine+0x1e>
    42a4:	08 95       	ret
    42a6:	9f 3f       	cpi	r25, 0xFF	; 255
    42a8:	30 f0       	brcs	.+12     	; 0x42b6 <__ftoa_engine+0x38>
    42aa:	80 38       	cpi	r24, 0x80	; 128
    42ac:	71 05       	cpc	r23, r1
    42ae:	61 05       	cpc	r22, r1
    42b0:	09 f0       	breq	.+2      	; 0x42b4 <__ftoa_engine+0x36>
    42b2:	3c 5f       	subi	r19, 0xFC	; 252
    42b4:	3c 5f       	subi	r19, 0xFC	; 252
    42b6:	3d 93       	st	X+, r19
    42b8:	91 30       	cpi	r25, 0x01	; 1
    42ba:	08 f0       	brcs	.+2      	; 0x42be <__ftoa_engine+0x40>
    42bc:	80 68       	ori	r24, 0x80	; 128
    42be:	91 1d       	adc	r25, r1
    42c0:	df 93       	push	r29
    42c2:	cf 93       	push	r28
    42c4:	1f 93       	push	r17
    42c6:	0f 93       	push	r16
    42c8:	ff 92       	push	r15
    42ca:	ef 92       	push	r14
    42cc:	19 2f       	mov	r17, r25
    42ce:	98 7f       	andi	r25, 0xF8	; 248
    42d0:	96 95       	lsr	r25
    42d2:	e9 2f       	mov	r30, r25
    42d4:	96 95       	lsr	r25
    42d6:	96 95       	lsr	r25
    42d8:	e9 0f       	add	r30, r25
    42da:	ff 27       	eor	r31, r31
    42dc:	ec 54       	subi	r30, 0x4C	; 76
    42de:	fe 4f       	sbci	r31, 0xFE	; 254
    42e0:	99 27       	eor	r25, r25
    42e2:	33 27       	eor	r19, r19
    42e4:	ee 24       	eor	r14, r14
    42e6:	ff 24       	eor	r15, r15
    42e8:	a7 01       	movw	r20, r14
    42ea:	e7 01       	movw	r28, r14
    42ec:	05 90       	lpm	r0, Z+
    42ee:	08 94       	sec
    42f0:	07 94       	ror	r0
    42f2:	28 f4       	brcc	.+10     	; 0x42fe <__ftoa_engine+0x80>
    42f4:	36 0f       	add	r19, r22
    42f6:	e7 1e       	adc	r14, r23
    42f8:	f8 1e       	adc	r15, r24
    42fa:	49 1f       	adc	r20, r25
    42fc:	51 1d       	adc	r21, r1
    42fe:	66 0f       	add	r22, r22
    4300:	77 1f       	adc	r23, r23
    4302:	88 1f       	adc	r24, r24
    4304:	99 1f       	adc	r25, r25
    4306:	06 94       	lsr	r0
    4308:	a1 f7       	brne	.-24     	; 0x42f2 <__ftoa_engine+0x74>
    430a:	05 90       	lpm	r0, Z+
    430c:	07 94       	ror	r0
    430e:	28 f4       	brcc	.+10     	; 0x431a <__ftoa_engine+0x9c>
    4310:	e7 0e       	add	r14, r23
    4312:	f8 1e       	adc	r15, r24
    4314:	49 1f       	adc	r20, r25
    4316:	56 1f       	adc	r21, r22
    4318:	c1 1d       	adc	r28, r1
    431a:	77 0f       	add	r23, r23
    431c:	88 1f       	adc	r24, r24
    431e:	99 1f       	adc	r25, r25
    4320:	66 1f       	adc	r22, r22
    4322:	06 94       	lsr	r0
    4324:	a1 f7       	brne	.-24     	; 0x430e <__ftoa_engine+0x90>
    4326:	05 90       	lpm	r0, Z+
    4328:	07 94       	ror	r0
    432a:	28 f4       	brcc	.+10     	; 0x4336 <__ftoa_engine+0xb8>
    432c:	f8 0e       	add	r15, r24
    432e:	49 1f       	adc	r20, r25
    4330:	56 1f       	adc	r21, r22
    4332:	c7 1f       	adc	r28, r23
    4334:	d1 1d       	adc	r29, r1
    4336:	88 0f       	add	r24, r24
    4338:	99 1f       	adc	r25, r25
    433a:	66 1f       	adc	r22, r22
    433c:	77 1f       	adc	r23, r23
    433e:	06 94       	lsr	r0
    4340:	a1 f7       	brne	.-24     	; 0x432a <__ftoa_engine+0xac>
    4342:	05 90       	lpm	r0, Z+
    4344:	07 94       	ror	r0
    4346:	20 f4       	brcc	.+8      	; 0x4350 <__ftoa_engine+0xd2>
    4348:	49 0f       	add	r20, r25
    434a:	56 1f       	adc	r21, r22
    434c:	c7 1f       	adc	r28, r23
    434e:	d8 1f       	adc	r29, r24
    4350:	99 0f       	add	r25, r25
    4352:	66 1f       	adc	r22, r22
    4354:	77 1f       	adc	r23, r23
    4356:	88 1f       	adc	r24, r24
    4358:	06 94       	lsr	r0
    435a:	a9 f7       	brne	.-22     	; 0x4346 <__ftoa_engine+0xc8>
    435c:	84 91       	lpm	r24, Z
    435e:	10 95       	com	r17
    4360:	17 70       	andi	r17, 0x07	; 7
    4362:	41 f0       	breq	.+16     	; 0x4374 <__ftoa_engine+0xf6>
    4364:	d6 95       	lsr	r29
    4366:	c7 95       	ror	r28
    4368:	57 95       	ror	r21
    436a:	47 95       	ror	r20
    436c:	f7 94       	ror	r15
    436e:	e7 94       	ror	r14
    4370:	1a 95       	dec	r17
    4372:	c1 f7       	brne	.-16     	; 0x4364 <__ftoa_engine+0xe6>
    4374:	ea e5       	ldi	r30, 0x5A	; 90
    4376:	f1 e0       	ldi	r31, 0x01	; 1
    4378:	68 94       	set
    437a:	15 90       	lpm	r1, Z+
    437c:	15 91       	lpm	r17, Z+
    437e:	35 91       	lpm	r19, Z+
    4380:	65 91       	lpm	r22, Z+
    4382:	95 91       	lpm	r25, Z+
    4384:	05 90       	lpm	r0, Z+
    4386:	7f e2       	ldi	r23, 0x2F	; 47
    4388:	73 95       	inc	r23
    438a:	e1 18       	sub	r14, r1
    438c:	f1 0a       	sbc	r15, r17
    438e:	43 0b       	sbc	r20, r19
    4390:	56 0b       	sbc	r21, r22
    4392:	c9 0b       	sbc	r28, r25
    4394:	d0 09       	sbc	r29, r0
    4396:	c0 f7       	brcc	.-16     	; 0x4388 <__ftoa_engine+0x10a>
    4398:	e1 0c       	add	r14, r1
    439a:	f1 1e       	adc	r15, r17
    439c:	43 1f       	adc	r20, r19
    439e:	56 1f       	adc	r21, r22
    43a0:	c9 1f       	adc	r28, r25
    43a2:	d0 1d       	adc	r29, r0
    43a4:	7e f4       	brtc	.+30     	; 0x43c4 <__ftoa_engine+0x146>
    43a6:	70 33       	cpi	r23, 0x30	; 48
    43a8:	11 f4       	brne	.+4      	; 0x43ae <__ftoa_engine+0x130>
    43aa:	8a 95       	dec	r24
    43ac:	e6 cf       	rjmp	.-52     	; 0x437a <__ftoa_engine+0xfc>
    43ae:	e8 94       	clt
    43b0:	01 50       	subi	r16, 0x01	; 1
    43b2:	30 f0       	brcs	.+12     	; 0x43c0 <__ftoa_engine+0x142>
    43b4:	08 0f       	add	r16, r24
    43b6:	0a f4       	brpl	.+2      	; 0x43ba <__ftoa_engine+0x13c>
    43b8:	00 27       	eor	r16, r16
    43ba:	02 17       	cp	r16, r18
    43bc:	08 f4       	brcc	.+2      	; 0x43c0 <__ftoa_engine+0x142>
    43be:	20 2f       	mov	r18, r16
    43c0:	23 95       	inc	r18
    43c2:	02 2f       	mov	r16, r18
    43c4:	7a 33       	cpi	r23, 0x3A	; 58
    43c6:	28 f0       	brcs	.+10     	; 0x43d2 <__ftoa_engine+0x154>
    43c8:	79 e3       	ldi	r23, 0x39	; 57
    43ca:	7d 93       	st	X+, r23
    43cc:	2a 95       	dec	r18
    43ce:	e9 f7       	brne	.-6      	; 0x43ca <__ftoa_engine+0x14c>
    43d0:	10 c0       	rjmp	.+32     	; 0x43f2 <__ftoa_engine+0x174>
    43d2:	7d 93       	st	X+, r23
    43d4:	2a 95       	dec	r18
    43d6:	89 f6       	brne	.-94     	; 0x437a <__ftoa_engine+0xfc>
    43d8:	06 94       	lsr	r0
    43da:	97 95       	ror	r25
    43dc:	67 95       	ror	r22
    43de:	37 95       	ror	r19
    43e0:	17 95       	ror	r17
    43e2:	17 94       	ror	r1
    43e4:	e1 18       	sub	r14, r1
    43e6:	f1 0a       	sbc	r15, r17
    43e8:	43 0b       	sbc	r20, r19
    43ea:	56 0b       	sbc	r21, r22
    43ec:	c9 0b       	sbc	r28, r25
    43ee:	d0 09       	sbc	r29, r0
    43f0:	98 f0       	brcs	.+38     	; 0x4418 <__ftoa_engine+0x19a>
    43f2:	23 95       	inc	r18
    43f4:	7e 91       	ld	r23, -X
    43f6:	73 95       	inc	r23
    43f8:	7a 33       	cpi	r23, 0x3A	; 58
    43fa:	08 f0       	brcs	.+2      	; 0x43fe <__ftoa_engine+0x180>
    43fc:	70 e3       	ldi	r23, 0x30	; 48
    43fe:	7c 93       	st	X, r23
    4400:	20 13       	cpse	r18, r16
    4402:	b8 f7       	brcc	.-18     	; 0x43f2 <__ftoa_engine+0x174>
    4404:	7e 91       	ld	r23, -X
    4406:	70 61       	ori	r23, 0x10	; 16
    4408:	7d 93       	st	X+, r23
    440a:	30 f0       	brcs	.+12     	; 0x4418 <__ftoa_engine+0x19a>
    440c:	83 95       	inc	r24
    440e:	71 e3       	ldi	r23, 0x31	; 49
    4410:	7d 93       	st	X+, r23
    4412:	70 e3       	ldi	r23, 0x30	; 48
    4414:	2a 95       	dec	r18
    4416:	e1 f7       	brne	.-8      	; 0x4410 <__ftoa_engine+0x192>
    4418:	11 24       	eor	r1, r1
    441a:	ef 90       	pop	r14
    441c:	ff 90       	pop	r15
    441e:	0f 91       	pop	r16
    4420:	1f 91       	pop	r17
    4422:	cf 91       	pop	r28
    4424:	df 91       	pop	r29
    4426:	99 27       	eor	r25, r25
    4428:	87 fd       	sbrc	r24, 7
    442a:	90 95       	com	r25
    442c:	08 95       	ret

0000442e <strnlen_P>:
    442e:	fc 01       	movw	r30, r24
    4430:	05 90       	lpm	r0, Z+
    4432:	61 50       	subi	r22, 0x01	; 1
    4434:	70 40       	sbci	r23, 0x00	; 0
    4436:	01 10       	cpse	r0, r1
    4438:	d8 f7       	brcc	.-10     	; 0x4430 <strnlen_P+0x2>
    443a:	80 95       	com	r24
    443c:	90 95       	com	r25
    443e:	8e 0f       	add	r24, r30
    4440:	9f 1f       	adc	r25, r31
    4442:	08 95       	ret

00004444 <strcat>:
    4444:	fb 01       	movw	r30, r22
    4446:	dc 01       	movw	r26, r24
    4448:	0d 90       	ld	r0, X+
    444a:	00 20       	and	r0, r0
    444c:	e9 f7       	brne	.-6      	; 0x4448 <strcat+0x4>
    444e:	11 97       	sbiw	r26, 0x01	; 1
    4450:	01 90       	ld	r0, Z+
    4452:	0d 92       	st	X+, r0
    4454:	00 20       	and	r0, r0
    4456:	e1 f7       	brne	.-8      	; 0x4450 <strcat+0xc>
    4458:	08 95       	ret

0000445a <strcpy>:
    445a:	fb 01       	movw	r30, r22
    445c:	dc 01       	movw	r26, r24
    445e:	01 90       	ld	r0, Z+
    4460:	0d 92       	st	X+, r0
    4462:	00 20       	and	r0, r0
    4464:	e1 f7       	brne	.-8      	; 0x445e <strcpy+0x4>
    4466:	08 95       	ret

00004468 <strnlen>:
    4468:	fc 01       	movw	r30, r24
    446a:	61 50       	subi	r22, 0x01	; 1
    446c:	70 40       	sbci	r23, 0x00	; 0
    446e:	01 90       	ld	r0, Z+
    4470:	01 10       	cpse	r0, r1
    4472:	d8 f7       	brcc	.-10     	; 0x446a <strnlen+0x2>
    4474:	80 95       	com	r24
    4476:	90 95       	com	r25
    4478:	8e 0f       	add	r24, r30
    447a:	9f 1f       	adc	r25, r31
    447c:	08 95       	ret

0000447e <__mulsi_const_10>:
    447e:	59 2f       	mov	r21, r25
    4480:	48 2f       	mov	r20, r24
    4482:	37 2f       	mov	r19, r23
    4484:	26 2f       	mov	r18, r22
    4486:	66 0f       	add	r22, r22
    4488:	77 1f       	adc	r23, r23
    448a:	88 1f       	adc	r24, r24
    448c:	99 1f       	adc	r25, r25
    448e:	66 0f       	add	r22, r22
    4490:	77 1f       	adc	r23, r23
    4492:	88 1f       	adc	r24, r24
    4494:	99 1f       	adc	r25, r25
    4496:	62 0f       	add	r22, r18
    4498:	73 1f       	adc	r23, r19
    449a:	84 1f       	adc	r24, r20
    449c:	95 1f       	adc	r25, r21
    449e:	66 0f       	add	r22, r22
    44a0:	77 1f       	adc	r23, r23
    44a2:	88 1f       	adc	r24, r24
    44a4:	99 1f       	adc	r25, r25
    44a6:	08 95       	ret

000044a8 <fputc>:
    44a8:	0f 93       	push	r16
    44aa:	1f 93       	push	r17
    44ac:	cf 93       	push	r28
    44ae:	df 93       	push	r29
    44b0:	fb 01       	movw	r30, r22
    44b2:	23 81       	ldd	r18, Z+3	; 0x03
    44b4:	21 fd       	sbrc	r18, 1
    44b6:	03 c0       	rjmp	.+6      	; 0x44be <fputc+0x16>
    44b8:	8f ef       	ldi	r24, 0xFF	; 255
    44ba:	9f ef       	ldi	r25, 0xFF	; 255
    44bc:	2c c0       	rjmp	.+88     	; 0x4516 <fputc+0x6e>
    44be:	22 ff       	sbrs	r18, 2
    44c0:	16 c0       	rjmp	.+44     	; 0x44ee <fputc+0x46>
    44c2:	46 81       	ldd	r20, Z+6	; 0x06
    44c4:	57 81       	ldd	r21, Z+7	; 0x07
    44c6:	24 81       	ldd	r18, Z+4	; 0x04
    44c8:	35 81       	ldd	r19, Z+5	; 0x05
    44ca:	42 17       	cp	r20, r18
    44cc:	53 07       	cpc	r21, r19
    44ce:	44 f4       	brge	.+16     	; 0x44e0 <fputc+0x38>
    44d0:	a0 81       	ld	r26, Z
    44d2:	b1 81       	ldd	r27, Z+1	; 0x01
    44d4:	9d 01       	movw	r18, r26
    44d6:	2f 5f       	subi	r18, 0xFF	; 255
    44d8:	3f 4f       	sbci	r19, 0xFF	; 255
    44da:	20 83       	st	Z, r18
    44dc:	31 83       	std	Z+1, r19	; 0x01
    44de:	8c 93       	st	X, r24
    44e0:	26 81       	ldd	r18, Z+6	; 0x06
    44e2:	37 81       	ldd	r19, Z+7	; 0x07
    44e4:	2f 5f       	subi	r18, 0xFF	; 255
    44e6:	3f 4f       	sbci	r19, 0xFF	; 255
    44e8:	26 83       	std	Z+6, r18	; 0x06
    44ea:	37 83       	std	Z+7, r19	; 0x07
    44ec:	14 c0       	rjmp	.+40     	; 0x4516 <fputc+0x6e>
    44ee:	8b 01       	movw	r16, r22
    44f0:	ec 01       	movw	r28, r24
    44f2:	fb 01       	movw	r30, r22
    44f4:	00 84       	ldd	r0, Z+8	; 0x08
    44f6:	f1 85       	ldd	r31, Z+9	; 0x09
    44f8:	e0 2d       	mov	r30, r0
    44fa:	09 95       	icall
    44fc:	89 2b       	or	r24, r25
    44fe:	e1 f6       	brne	.-72     	; 0x44b8 <fputc+0x10>
    4500:	d8 01       	movw	r26, r16
    4502:	16 96       	adiw	r26, 0x06	; 6
    4504:	8d 91       	ld	r24, X+
    4506:	9c 91       	ld	r25, X
    4508:	17 97       	sbiw	r26, 0x07	; 7
    450a:	01 96       	adiw	r24, 0x01	; 1
    450c:	16 96       	adiw	r26, 0x06	; 6
    450e:	8d 93       	st	X+, r24
    4510:	9c 93       	st	X, r25
    4512:	17 97       	sbiw	r26, 0x07	; 7
    4514:	ce 01       	movw	r24, r28
    4516:	df 91       	pop	r29
    4518:	cf 91       	pop	r28
    451a:	1f 91       	pop	r17
    451c:	0f 91       	pop	r16
    451e:	08 95       	ret

00004520 <sprintf>:
    4520:	ae e0       	ldi	r26, 0x0E	; 14
    4522:	b0 e0       	ldi	r27, 0x00	; 0
    4524:	e6 e9       	ldi	r30, 0x96	; 150
    4526:	f2 e2       	ldi	r31, 0x22	; 34
    4528:	0c 94 b0 20 	jmp	0x4160	; 0x4160 <__prologue_saves__+0x1c>
    452c:	0d 89       	ldd	r16, Y+21	; 0x15
    452e:	1e 89       	ldd	r17, Y+22	; 0x16
    4530:	86 e0       	ldi	r24, 0x06	; 6
    4532:	8c 83       	std	Y+4, r24	; 0x04
    4534:	09 83       	std	Y+1, r16	; 0x01
    4536:	1a 83       	std	Y+2, r17	; 0x02
    4538:	8f ef       	ldi	r24, 0xFF	; 255
    453a:	9f e7       	ldi	r25, 0x7F	; 127
    453c:	8d 83       	std	Y+5, r24	; 0x05
    453e:	9e 83       	std	Y+6, r25	; 0x06
    4540:	ae 01       	movw	r20, r28
    4542:	47 5e       	subi	r20, 0xE7	; 231
    4544:	5f 4f       	sbci	r21, 0xFF	; 255
    4546:	6f 89       	ldd	r22, Y+23	; 0x17
    4548:	78 8d       	ldd	r23, Y+24	; 0x18
    454a:	ce 01       	movw	r24, r28
    454c:	01 96       	adiw	r24, 0x01	; 1
    454e:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <vfprintf>
    4552:	ef 81       	ldd	r30, Y+7	; 0x07
    4554:	f8 85       	ldd	r31, Y+8	; 0x08
    4556:	e0 0f       	add	r30, r16
    4558:	f1 1f       	adc	r31, r17
    455a:	10 82       	st	Z, r1
    455c:	2e 96       	adiw	r28, 0x0e	; 14
    455e:	e4 e0       	ldi	r30, 0x04	; 4
    4560:	0c 94 c9 20 	jmp	0x4192	; 0x4192 <__epilogue_restores__+0x1c>

00004564 <__ultoa_invert>:
    4564:	fa 01       	movw	r30, r20
    4566:	aa 27       	eor	r26, r26
    4568:	28 30       	cpi	r18, 0x08	; 8
    456a:	51 f1       	breq	.+84     	; 0x45c0 <__ultoa_invert+0x5c>
    456c:	20 31       	cpi	r18, 0x10	; 16
    456e:	81 f1       	breq	.+96     	; 0x45d0 <__ultoa_invert+0x6c>
    4570:	e8 94       	clt
    4572:	6f 93       	push	r22
    4574:	6e 7f       	andi	r22, 0xFE	; 254
    4576:	6e 5f       	subi	r22, 0xFE	; 254
    4578:	7f 4f       	sbci	r23, 0xFF	; 255
    457a:	8f 4f       	sbci	r24, 0xFF	; 255
    457c:	9f 4f       	sbci	r25, 0xFF	; 255
    457e:	af 4f       	sbci	r26, 0xFF	; 255
    4580:	b1 e0       	ldi	r27, 0x01	; 1
    4582:	3e d0       	rcall	.+124    	; 0x4600 <__ultoa_invert+0x9c>
    4584:	b4 e0       	ldi	r27, 0x04	; 4
    4586:	3c d0       	rcall	.+120    	; 0x4600 <__ultoa_invert+0x9c>
    4588:	67 0f       	add	r22, r23
    458a:	78 1f       	adc	r23, r24
    458c:	89 1f       	adc	r24, r25
    458e:	9a 1f       	adc	r25, r26
    4590:	a1 1d       	adc	r26, r1
    4592:	68 0f       	add	r22, r24
    4594:	79 1f       	adc	r23, r25
    4596:	8a 1f       	adc	r24, r26
    4598:	91 1d       	adc	r25, r1
    459a:	a1 1d       	adc	r26, r1
    459c:	6a 0f       	add	r22, r26
    459e:	71 1d       	adc	r23, r1
    45a0:	81 1d       	adc	r24, r1
    45a2:	91 1d       	adc	r25, r1
    45a4:	a1 1d       	adc	r26, r1
    45a6:	20 d0       	rcall	.+64     	; 0x45e8 <__ultoa_invert+0x84>
    45a8:	09 f4       	brne	.+2      	; 0x45ac <__ultoa_invert+0x48>
    45aa:	68 94       	set
    45ac:	3f 91       	pop	r19
    45ae:	2a e0       	ldi	r18, 0x0A	; 10
    45b0:	26 9f       	mul	r18, r22
    45b2:	11 24       	eor	r1, r1
    45b4:	30 19       	sub	r19, r0
    45b6:	30 5d       	subi	r19, 0xD0	; 208
    45b8:	31 93       	st	Z+, r19
    45ba:	de f6       	brtc	.-74     	; 0x4572 <__ultoa_invert+0xe>
    45bc:	cf 01       	movw	r24, r30
    45be:	08 95       	ret
    45c0:	46 2f       	mov	r20, r22
    45c2:	47 70       	andi	r20, 0x07	; 7
    45c4:	40 5d       	subi	r20, 0xD0	; 208
    45c6:	41 93       	st	Z+, r20
    45c8:	b3 e0       	ldi	r27, 0x03	; 3
    45ca:	0f d0       	rcall	.+30     	; 0x45ea <__ultoa_invert+0x86>
    45cc:	c9 f7       	brne	.-14     	; 0x45c0 <__ultoa_invert+0x5c>
    45ce:	f6 cf       	rjmp	.-20     	; 0x45bc <__ultoa_invert+0x58>
    45d0:	46 2f       	mov	r20, r22
    45d2:	4f 70       	andi	r20, 0x0F	; 15
    45d4:	40 5d       	subi	r20, 0xD0	; 208
    45d6:	4a 33       	cpi	r20, 0x3A	; 58
    45d8:	18 f0       	brcs	.+6      	; 0x45e0 <__ultoa_invert+0x7c>
    45da:	49 5d       	subi	r20, 0xD9	; 217
    45dc:	31 fd       	sbrc	r19, 1
    45de:	40 52       	subi	r20, 0x20	; 32
    45e0:	41 93       	st	Z+, r20
    45e2:	02 d0       	rcall	.+4      	; 0x45e8 <__ultoa_invert+0x84>
    45e4:	a9 f7       	brne	.-22     	; 0x45d0 <__ultoa_invert+0x6c>
    45e6:	ea cf       	rjmp	.-44     	; 0x45bc <__ultoa_invert+0x58>
    45e8:	b4 e0       	ldi	r27, 0x04	; 4
    45ea:	a6 95       	lsr	r26
    45ec:	97 95       	ror	r25
    45ee:	87 95       	ror	r24
    45f0:	77 95       	ror	r23
    45f2:	67 95       	ror	r22
    45f4:	ba 95       	dec	r27
    45f6:	c9 f7       	brne	.-14     	; 0x45ea <__ultoa_invert+0x86>
    45f8:	00 97       	sbiw	r24, 0x00	; 0
    45fa:	61 05       	cpc	r22, r1
    45fc:	71 05       	cpc	r23, r1
    45fe:	08 95       	ret
    4600:	9b 01       	movw	r18, r22
    4602:	ac 01       	movw	r20, r24
    4604:	0a 2e       	mov	r0, r26
    4606:	06 94       	lsr	r0
    4608:	57 95       	ror	r21
    460a:	47 95       	ror	r20
    460c:	37 95       	ror	r19
    460e:	27 95       	ror	r18
    4610:	ba 95       	dec	r27
    4612:	c9 f7       	brne	.-14     	; 0x4606 <__ultoa_invert+0xa2>
    4614:	62 0f       	add	r22, r18
    4616:	73 1f       	adc	r23, r19
    4618:	84 1f       	adc	r24, r20
    461a:	95 1f       	adc	r25, r21
    461c:	a0 1d       	adc	r26, r0
    461e:	08 95       	ret

00004620 <eeprom_read_block>:
    4620:	60 50       	subi	r22, 0x00	; 0
    4622:	7c 4e       	sbci	r23, 0xEC	; 236
    4624:	0c 94 4b 23 	jmp	0x4696	; 0x4696 <memcpy>

00004628 <eeprom_update_block>:
    4628:	dc 01       	movw	r26, r24
    462a:	a4 0f       	add	r26, r20
    462c:	b5 1f       	adc	r27, r21
    462e:	41 50       	subi	r20, 0x01	; 1
    4630:	50 40       	sbci	r21, 0x00	; 0
    4632:	48 f0       	brcs	.+18     	; 0x4646 <eeprom_update_block+0x1e>
    4634:	cb 01       	movw	r24, r22
    4636:	84 0f       	add	r24, r20
    4638:	95 1f       	adc	r25, r21
    463a:	2e 91       	ld	r18, -X
    463c:	0e 94 25 23 	call	0x464a	; 0x464a <eeprom_update_r18>
    4640:	41 50       	subi	r20, 0x01	; 1
    4642:	50 40       	sbci	r21, 0x00	; 0
    4644:	d0 f7       	brcc	.-12     	; 0x463a <eeprom_update_block+0x12>
    4646:	08 95       	ret

00004648 <eeprom_update_byte>:
    4648:	26 2f       	mov	r18, r22

0000464a <eeprom_update_r18>:
    464a:	0e 94 47 23 	call	0x468e	; 0x468e <eeprom_mapen>
    464e:	00 80       	ld	r0, Z
    4650:	02 16       	cp	r0, r18
    4652:	19 f0       	breq	.+6      	; 0x465a <eeprom_update_r18+0x10>
    4654:	0e 94 30 23 	call	0x4660	; 0x4660 <eeprom_write_r18>
    4658:	01 97       	sbiw	r24, 0x01	; 1
    465a:	01 97       	sbiw	r24, 0x01	; 1
    465c:	08 95       	ret

0000465e <eeprom_write_byte>:
    465e:	26 2f       	mov	r18, r22

00004660 <eeprom_write_r18>:
    4660:	af 93       	push	r26
    4662:	bf 93       	push	r27
    4664:	e0 e0       	ldi	r30, 0x00	; 0
    4666:	f0 e1       	ldi	r31, 0x10	; 16
    4668:	32 81       	ldd	r19, Z+2	; 0x02
    466a:	31 fd       	sbrc	r19, 1
    466c:	fd cf       	rjmp	.-6      	; 0x4668 <eeprom_write_r18+0x8>
    466e:	dc 01       	movw	r26, r24
    4670:	a0 50       	subi	r26, 0x00	; 0
    4672:	bc 4e       	sbci	r27, 0xEC	; 236
    4674:	2c 93       	st	X, r18
    4676:	2d e9       	ldi	r18, 0x9D	; 157
    4678:	24 bf       	out	0x34, r18	; 52
    467a:	23 e0       	ldi	r18, 0x03	; 3
    467c:	20 83       	st	Z, r18
    467e:	01 96       	adiw	r24, 0x01	; 1
    4680:	bf 91       	pop	r27
    4682:	af 91       	pop	r26
    4684:	08 95       	ret

00004686 <eeprom_read_byte>:
    4686:	03 d0       	rcall	.+6      	; 0x468e <eeprom_mapen>
    4688:	80 81       	ld	r24, Z
    468a:	99 27       	eor	r25, r25
    468c:	08 95       	ret

0000468e <eeprom_mapen>:
    468e:	fc 01       	movw	r30, r24
    4690:	e0 50       	subi	r30, 0x00	; 0
    4692:	fc 4e       	sbci	r31, 0xEC	; 236
    4694:	08 95       	ret

00004696 <memcpy>:
    4696:	fb 01       	movw	r30, r22
    4698:	dc 01       	movw	r26, r24
    469a:	02 c0       	rjmp	.+4      	; 0x46a0 <memcpy+0xa>
    469c:	01 90       	ld	r0, Z+
    469e:	0d 92       	st	X+, r0
    46a0:	41 50       	subi	r20, 0x01	; 1
    46a2:	50 40       	sbci	r21, 0x00	; 0
    46a4:	d8 f7       	brcc	.-10     	; 0x469c <memcpy+0x6>
    46a6:	08 95       	ret

000046a8 <_exit>:
    46a8:	f8 94       	cli

000046aa <__stop_program>:
    46aa:	ff cf       	rjmp	.-2      	; 0x46aa <__stop_program>
