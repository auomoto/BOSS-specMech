
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000523b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004c44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000563  00008c44  00004c44  00004cd8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000831  00802800  00802800  0000523b  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  0000523b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005298  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000628  00000000  00000000  000052d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a09f  00000000  00000000  00005900  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000044ad  00000000  00000000  0000f99f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000440b  00000000  00000000  00013e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001048  00000000  00000000  00018258  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002388  00000000  00000000  000192a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000444f  00000000  00000000  0001b628  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003c8  00000000  00000000  0001fa77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 01 	jmp	0x266	; 0x266 <__ctors_end>
       4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       c:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__vector_3>
      10:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      14:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      18:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      1c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      20:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      24:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      28:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      2c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      30:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__vector_12>
      34:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      38:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      3c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      40:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      44:	0c 94 20 1c 	jmp	0x3840	; 0x3840 <__vector_17>
      48:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__vector_18>
      4c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      50:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__vector_20>
      54:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      58:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      5c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      60:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      64:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      68:	0c 94 aa 1c 	jmp	0x3954	; 0x3954 <__vector_26>
      6c:	0c 94 d5 1c 	jmp	0x39aa	; 0x39aa <__vector_27>
      70:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      74:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__vector_29>
      78:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      7c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      80:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      84:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      88:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      8c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      90:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      94:	0c 94 11 1d 	jmp	0x3a22	; 0x3a22 <__vector_37>
      98:	0c 94 46 1d 	jmp	0x3a8c	; 0x3a8c <__vector_38>
      9c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      a0:	ac 04       	cpc	r10, r12
      a2:	d0 04       	cpc	r13, r0
      a4:	d0 04       	cpc	r13, r0
      a6:	d0 04       	cpc	r13, r0
      a8:	d0 04       	cpc	r13, r0
      aa:	d0 04       	cpc	r13, r0
      ac:	d0 04       	cpc	r13, r0
      ae:	d0 04       	cpc	r13, r0
      b0:	d0 04       	cpc	r13, r0
      b2:	af 04       	cpc	r10, r15
      b4:	d0 04       	cpc	r13, r0
      b6:	d0 04       	cpc	r13, r0
      b8:	d0 04       	cpc	r13, r0
      ba:	d0 04       	cpc	r13, r0
      bc:	d0 04       	cpc	r13, r0
      be:	d0 04       	cpc	r13, r0
      c0:	d0 04       	cpc	r13, r0
      c2:	d0 04       	cpc	r13, r0
      c4:	d0 04       	cpc	r13, r0
      c6:	d0 04       	cpc	r13, r0
      c8:	d0 04       	cpc	r13, r0
      ca:	d0 04       	cpc	r13, r0
      cc:	d0 04       	cpc	r13, r0
      ce:	d0 04       	cpc	r13, r0
      d0:	d0 04       	cpc	r13, r0
      d2:	d0 04       	cpc	r13, r0
      d4:	9a 04       	cpc	r9, r10
      d6:	d0 04       	cpc	r13, r0
      d8:	d0 04       	cpc	r13, r0
      da:	d0 04       	cpc	r13, r0
      dc:	d0 04       	cpc	r13, r0
      de:	d0 04       	cpc	r13, r0
      e0:	d0 04       	cpc	r13, r0
      e2:	d0 04       	cpc	r13, r0
      e4:	d0 04       	cpc	r13, r0
      e6:	d0 04       	cpc	r13, r0
      e8:	a0 04       	cpc	r10, r0
      ea:	d0 04       	cpc	r13, r0
      ec:	9d 04       	cpc	r9, r13
      ee:	d0 04       	cpc	r13, r0
      f0:	d0 04       	cpc	r13, r0
      f2:	a3 04       	cpc	r10, r3
      f4:	a6 04       	cpc	r10, r6
      f6:	a9 04       	cpc	r10, r9
      f8:	3b 0f       	add	r19, r27
      fa:	3b 0f       	add	r19, r27
      fc:	3b 0f       	add	r19, r27
      fe:	fd 13       	cpse	r31, r29
     100:	fd 13       	cpse	r31, r29
     102:	fd 13       	cpse	r31, r29
     104:	fd 13       	cpse	r31, r29
     106:	fd 13       	cpse	r31, r29
     108:	fd 13       	cpse	r31, r29
     10a:	fd 13       	cpse	r31, r29
     10c:	fd 13       	cpse	r31, r29
     10e:	fd 13       	cpse	r31, r29
     110:	fd 13       	cpse	r31, r29
     112:	fd 13       	cpse	r31, r29
     114:	fd 13       	cpse	r31, r29
     116:	fd 13       	cpse	r31, r29
     118:	fd 13       	cpse	r31, r29
     11a:	fd 13       	cpse	r31, r29
     11c:	fd 13       	cpse	r31, r29
     11e:	fd 13       	cpse	r31, r29
     120:	fd 13       	cpse	r31, r29
     122:	bf 13       	cpse	r27, r31
     124:	fd 13       	cpse	r31, r29
     126:	fd 13       	cpse	r31, r29
     128:	fd 13       	cpse	r31, r29
     12a:	fd 13       	cpse	r31, r29
     12c:	fd 13       	cpse	r31, r29
     12e:	fd 13       	cpse	r31, r29
     130:	fd 13       	cpse	r31, r29
     132:	fd 13       	cpse	r31, r29
     134:	fd 13       	cpse	r31, r29
     136:	fd 13       	cpse	r31, r29
     138:	cb 0f       	add	r28, r27
     13a:	cb 0f       	add	r28, r27
     13c:	cb 0f       	add	r28, r27
     13e:	fd 13       	cpse	r31, r29
     140:	82 10       	cpse	r8, r2
     142:	fd 13       	cpse	r31, r29
     144:	fd 13       	cpse	r31, r29
     146:	fd 13       	cpse	r31, r29
     148:	fd 13       	cpse	r31, r29
     14a:	fd 13       	cpse	r31, r29
     14c:	fd 13       	cpse	r31, r29
     14e:	fd 13       	cpse	r31, r29
     150:	fd 13       	cpse	r31, r29
     152:	fd 13       	cpse	r31, r29
     154:	bf 11       	cpse	r27, r15
     156:	95 12       	cpse	r9, r21
     158:	fd 13       	cpse	r31, r29
     15a:	fd 13       	cpse	r31, r29
     15c:	fd 13       	cpse	r31, r29
     15e:	1e 13       	cpse	r17, r30
     160:	fd 13       	cpse	r31, r29
     162:	66 13       	cpse	r22, r22

00000164 <__trampolines_end>:
     164:	6e 61       	ori	r22, 0x1E	; 30
     166:	6e 00       	.word	0x006e	; ????

00000168 <__c.2332>:
     168:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     178:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     188:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     198:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1a8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1b8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1c8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1d8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1e8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1f8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     208:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     218:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     228:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     238:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     248:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     258:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf ef       	ldi	r28, 0xFF	; 255
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	df e3       	ldi	r29, 0x3F	; 63
     270:	de bf       	out	0x3e, r29	; 62

00000272 <__do_clear_bss>:
     272:	20 e3       	ldi	r18, 0x30	; 48
     274:	a0 e0       	ldi	r26, 0x00	; 0
     276:	b8 e2       	ldi	r27, 0x28	; 40
     278:	01 c0       	rjmp	.+2      	; 0x27c <.do_clear_bss_start>

0000027a <.do_clear_bss_loop>:
     27a:	1d 92       	st	X+, r1

0000027c <.do_clear_bss_start>:
     27c:	a1 33       	cpi	r26, 0x31	; 49
     27e:	b2 07       	cpc	r27, r18
     280:	e1 f7       	brne	.-8      	; 0x27a <.do_clear_bss_loop>
     282:	0e 94 a7 08 	call	0x114e	; 0x114e <main>
     286:	0c 94 20 26 	jmp	0x4c40	; 0x4c40 <_exit>

0000028a <__bad_interrupt>:
     28a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028e <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
uint8_t read_AD590(uint8_t sensor, float *temperature)
{
     28e:	8f 92       	push	r8
     290:	9f 92       	push	r9
     292:	af 92       	push	r10
     294:	bf 92       	push	r11
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <read_AD590+0x16>
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <read_AD590+0x18>
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	7b 01       	movw	r14, r22

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	c9 f0       	breq	.+50     	; 0x2e2 <read_AD590+0x54>
     2b0:	18 f0       	brcs	.+6      	; 0x2b8 <read_AD590+0x2a>
     2b2:	82 30       	cpi	r24, 0x02	; 2
     2b4:	61 f0       	breq	.+24     	; 0x2ce <read_AD590+0x40>
     2b6:	10 c0       	rjmp	.+32     	; 0x2d8 <read_AD590+0x4a>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     2b8:	0f 2e       	mov	r0, r31
     2ba:	f3 e3       	ldi	r31, 0x33	; 51
     2bc:	8f 2e       	mov	r8, r31
     2be:	98 2c       	mov	r9, r8
     2c0:	f3 ef       	ldi	r31, 0xF3	; 243
     2c2:	af 2e       	mov	r10, r31
     2c4:	f0 e4       	ldi	r31, 0x40	; 64
     2c6:	bf 2e       	mov	r11, r31
     2c8:	f0 2d       	mov	r31, r0
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     2ca:	11 e0       	ldi	r17, 0x01	; 1
     2cc:	0e c0       	rjmp	.+28     	; 0x2ea <read_AD590+0x5c>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     2ce:	81 2c       	mov	r8, r1
     2d0:	91 2c       	mov	r9, r1
     2d2:	54 01       	movw	r10, r8
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     2d4:	10 e1       	ldi	r17, 0x10	; 16
			offset = 0.0;
			break;
     2d6:	09 c0       	rjmp	.+18     	; 0x2ea <read_AD590+0x5c>
{

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
     2d8:	81 2c       	mov	r8, r1
     2da:	91 2c       	mov	r9, r1
     2dc:	54 01       	movw	r10, r8
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2de:	10 e0       	ldi	r17, 0x00	; 0
			break;
     2e0:	04 c0       	rjmp	.+8      	; 0x2ea <read_AD590+0x5c>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2e2:	81 2c       	mov	r8, r1
     2e4:	91 2c       	mov	r9, r1
     2e6:	54 01       	movw	r10, r8
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2e8:	14 e0       	ldi	r17, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	66 e0       	ldi	r22, 0x06	; 6
     2ee:	87 e2       	ldi	r24, 0x27	; 39
     2f0:	0e 94 16 09 	call	0x122c	; 0x122c <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2f4:	41 2f       	mov	r20, r17
     2f6:	40 95       	com	r20
     2f8:	60 e0       	ldi	r22, 0x00	; 0
     2fa:	87 e2       	ldi	r24, 0x27	; 39
     2fc:	0e 94 16 09 	call	0x122c	; 0x122c <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     300:	41 2f       	mov	r20, r17
     302:	6a e0       	ldi	r22, 0x0A	; 10
     304:	87 e2       	ldi	r24, 0x27	; 39
     306:	0e 94 16 09 	call	0x122c	; 0x122c <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30a:	86 e1       	ldi	r24, 0x16	; 22
     30c:	8a 95       	dec	r24
     30e:	f1 f7       	brne	.-4      	; 0x30c <read_AD590+0x7e>
     310:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	if (read_ADS1115(ADC_TE, PGA0512, AIN3, DR128, &voltage) == ERROR) {
     312:	8e 01       	movw	r16, r28
     314:	0f 5f       	subi	r16, 0xFF	; 255
     316:	1f 4f       	sbci	r17, 0xFF	; 255
     318:	20 e8       	ldi	r18, 0x80	; 128
     31a:	40 e7       	ldi	r20, 0x70	; 112
     31c:	68 e0       	ldi	r22, 0x08	; 8
     31e:	88 e4       	ldi	r24, 0x48	; 72
     320:	0e 94 c8 01 	call	0x390	; 0x390 <read_ADS1115>
     324:	83 36       	cpi	r24, 0x63	; 99
     326:	51 f4       	brne	.+20     	; 0x33c <read_AD590+0xae>
		*temperature = BADFLOAT;
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	50 e8       	ldi	r21, 0x80	; 128
     32c:	66 e2       	ldi	r22, 0x26	; 38
     32e:	74 ec       	ldi	r23, 0xC4	; 196
     330:	f7 01       	movw	r30, r14
     332:	40 83       	st	Z, r20
     334:	51 83       	std	Z+1, r21	; 0x01
     336:	62 83       	std	Z+2, r22	; 0x02
     338:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
     33a:	1c c0       	rjmp	.+56     	; 0x374 <read_AD590+0xe6>
	}
	*temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     33c:	20 e0       	ldi	r18, 0x00	; 0
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	4a e7       	ldi	r20, 0x7A	; 122
     342:	54 e4       	ldi	r21, 0x44	; 68
     344:	69 81       	ldd	r22, Y+1	; 0x01
     346:	7a 81       	ldd	r23, Y+2	; 0x02
     348:	8b 81       	ldd	r24, Y+3	; 0x03
     34a:	9c 81       	ldd	r25, Y+4	; 0x04
     34c:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <__mulsf3>
     350:	23 e3       	ldi	r18, 0x33	; 51
     352:	33 e9       	ldi	r19, 0x93	; 147
     354:	48 e8       	ldi	r20, 0x88	; 136
     356:	53 e4       	ldi	r21, 0x43	; 67
     358:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <__subsf3>
     35c:	9b 01       	movw	r18, r22
     35e:	ac 01       	movw	r20, r24
     360:	c5 01       	movw	r24, r10
     362:	b4 01       	movw	r22, r8
     364:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__addsf3>
     368:	f7 01       	movw	r30, r14
     36a:	60 83       	st	Z, r22
     36c:	71 83       	std	Z+1, r23	; 0x01
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     372:	80 e0       	ldi	r24, 0x00	; 0

}
     374:	24 96       	adiw	r28, 0x04	; 4
     376:	cd bf       	out	0x3d, r28	; 61
     378:	de bf       	out	0x3e, r29	; 62
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	bf 90       	pop	r11
     388:	af 90       	pop	r10
     38a:	9f 90       	pop	r9
     38c:	8f 90       	pop	r8
     38e:	08 95       	ret

00000390 <read_ADS1115>:
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
uint8_t read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins,
	uint8_t datarate, float *voltage)
{
     390:	8f 92       	push	r8
     392:	9f 92       	push	r9
     394:	af 92       	push	r10
     396:	bf 92       	push	r11
     398:	cf 92       	push	r12
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	f8 2e       	mov	r15, r24
     3aa:	e6 2e       	mov	r14, r22
     3ac:	68 01       	movw	r12, r16
	float scale;
	uint8_t confighi, configlo, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     3ae:	46 2b       	or	r20, r22
     3b0:	c4 2f       	mov	r28, r20
     3b2:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     3b4:	d2 2f       	mov	r29, r18
     3b6:	d3 60       	ori	r29, 0x03	; 3

	*voltage = BADFLOAT;
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e8       	ldi	r25, 0x80	; 128
     3bc:	a6 e2       	ldi	r26, 0x26	; 38
     3be:	b4 ec       	ldi	r27, 0xC4	; 196
     3c0:	f8 01       	movw	r30, r16
     3c2:	80 83       	st	Z, r24
     3c4:	91 83       	std	Z+1, r25	; 0x01
     3c6:	a2 83       	std	Z+2, r26	; 0x02
     3c8:	b3 83       	std	Z+3, r27	; 0x03
	if (start_TWI(addr, TWIWRITE == ERROR)) {		// TWI start condition
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	8f 2d       	mov	r24, r15
     3ce:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
     3d2:	08 2f       	mov	r16, r24
     3d4:	88 23       	and	r24, r24
     3d6:	21 f0       	breq	.+8      	; 0x3e0 <read_ADS1115+0x50>
		stop_TWI();
     3d8:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(ERROR);
     3dc:	13 e6       	ldi	r17, 0x63	; 99
     3de:	b4 c0       	rjmp	.+360    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	if ((write_TWI(ADS1115CONFIG) == ERROR)) {		// Write the CONFIG register
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
     3e6:	18 2f       	mov	r17, r24
     3e8:	83 36       	cpi	r24, 0x63	; 99
     3ea:	19 f4       	brne	.+6      	; 0x3f2 <read_ADS1115+0x62>
		stop_TWI();
     3ec:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(ERROR);
     3f0:	ab c0       	rjmp	.+342    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	if ((write_TWI(confighi) == ERROR)) {			// Write high byte
     3f2:	8c 2f       	mov	r24, r28
     3f4:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
     3f8:	18 2f       	mov	r17, r24
     3fa:	83 36       	cpi	r24, 0x63	; 99
     3fc:	19 f4       	brne	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		stop_TWI();
     3fe:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(ERROR);
     402:	a2 c0       	rjmp	.+324    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	if ((write_TWI(configlo) == ERROR)) {			// Write low byte
     404:	8d 2f       	mov	r24, r29
     406:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
     40a:	18 2f       	mov	r17, r24
     40c:	83 36       	cpi	r24, 0x63	; 99
     40e:	19 f4       	brne	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		stop_TWI();
     410:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(ERROR);
     414:	99 c0       	rjmp	.+306    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	stop_TWI();
     416:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
     41a:	fc e1       	ldi	r31, 0x1C	; 28
     41c:	fa 95       	dec	r31
     41e:	f1 f7       	brne	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>

	_delay_us(25);									// Power-up time

	converting = YES;
     420:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     422:	09 c0       	rjmp	.+18     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		start_TWI(addr, TWIREAD);
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	8f 2d       	mov	r24, r15
     428:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
		flag = readlast_TWI();
     42c:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <readlast_TWI>
		if (flag & 0b10000000) {
     430:	88 23       	and	r24, r24
     432:	0c f4       	brge	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			converting = NO;
     434:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     436:	c1 11       	cpse	r28, r1
     438:	f5 cf       	rjmp	.-22     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		flag = readlast_TWI();
		if (flag & 0b10000000) {
			converting = NO;
		}
	}
	stop_TWI();
     43a:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>

	start_TWI(addr, TWIWRITE);
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	8f 2d       	mov	r24, r15
     442:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	8f 2d       	mov	r24, r15
     450:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
	highbyte = read_TWI();
     454:	0e 94 2e 1a 	call	0x345c	; 0x345c <read_TWI>
     458:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     45a:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <readlast_TWI>
     45e:	d8 2f       	mov	r29, r24
	stop_TWI();
     460:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>

	value = highbyte;
     464:	6c 2f       	mov	r22, r28
     466:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     468:	76 2f       	mov	r23, r22
     46a:	66 27       	eor	r22, r22
	value |= lowbyte;
     46c:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     46e:	84 e0       	ldi	r24, 0x04	; 4
     470:	e8 16       	cp	r14, r24
     472:	49 f1       	breq	.+82     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     474:	8e 15       	cp	r24, r14
     476:	30 f0       	brcs	.+12     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     478:	ee 20       	and	r14, r14
     47a:	d9 f1       	breq	.+118    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     47c:	e2 e0       	ldi	r30, 0x02	; 2
     47e:	ee 16       	cp	r14, r30
     480:	69 f1       	breq	.+90     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     482:	42 c0       	rjmp	.+132    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     484:	f8 e0       	ldi	r31, 0x08	; 8
     486:	ef 16       	cp	r14, r31
     488:	09 f4       	brne	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     48a:	42 c0       	rjmp	.+132    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     48c:	8a e0       	ldi	r24, 0x0A	; 10
     48e:	e8 16       	cp	r14, r24
     490:	21 f0       	breq	.+8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     492:	e6 e0       	ldi	r30, 0x06	; 6
     494:	ee 12       	cpse	r14, r30
     496:	38 c0       	rjmp	.+112    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     498:	0b c0       	rjmp	.+22     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		case PGA0256:
			scale = SCA0256;
     49a:	0f 2e       	mov	r0, r31
     49c:	f4 e7       	ldi	r31, 0x74	; 116
     49e:	8f 2e       	mov	r8, r31
     4a0:	f3 e1       	ldi	r31, 0x13	; 19
     4a2:	9f 2e       	mov	r9, r31
     4a4:	f3 e0       	ldi	r31, 0x03	; 3
     4a6:	af 2e       	mov	r10, r31
     4a8:	f7 e3       	ldi	r31, 0x37	; 55
     4aa:	bf 2e       	mov	r11, r31
     4ac:	f0 2d       	mov	r31, r0
     4ae:	3a c0       	rjmp	.+116    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     4b0:	0f 2e       	mov	r0, r31
     4b2:	f4 e7       	ldi	r31, 0x74	; 116
     4b4:	8f 2e       	mov	r8, r31
     4b6:	f3 e1       	ldi	r31, 0x13	; 19
     4b8:	9f 2e       	mov	r9, r31
     4ba:	f3 e0       	ldi	r31, 0x03	; 3
     4bc:	af 2e       	mov	r10, r31
     4be:	f8 e3       	ldi	r31, 0x38	; 56
     4c0:	bf 2e       	mov	r11, r31
     4c2:	f0 2d       	mov	r31, r0
			break;
     4c4:	2f c0       	rjmp	.+94     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		case PGA2048:
			scale = SCA2048;
     4c6:	0f 2e       	mov	r0, r31
     4c8:	f2 e1       	ldi	r31, 0x12	; 18
     4ca:	8f 2e       	mov	r8, r31
     4cc:	f3 e1       	ldi	r31, 0x13	; 19
     4ce:	9f 2e       	mov	r9, r31
     4d0:	f3 e8       	ldi	r31, 0x83	; 131
     4d2:	af 2e       	mov	r10, r31
     4d4:	f8 e3       	ldi	r31, 0x38	; 56
     4d6:	bf 2e       	mov	r11, r31
     4d8:	f0 2d       	mov	r31, r0
			break;
     4da:	24 c0       	rjmp	.+72     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		case PGA4096:
			scale = SCA4096;
     4dc:	0f 2e       	mov	r0, r31
     4de:	f4 e7       	ldi	r31, 0x74	; 116
     4e0:	8f 2e       	mov	r8, r31
     4e2:	f3 e1       	ldi	r31, 0x13	; 19
     4e4:	9f 2e       	mov	r9, r31
     4e6:	f3 e0       	ldi	r31, 0x03	; 3
     4e8:	af 2e       	mov	r10, r31
     4ea:	f9 e3       	ldi	r31, 0x39	; 57
     4ec:	bf 2e       	mov	r11, r31
     4ee:	f0 2d       	mov	r31, r0
			break;
     4f0:	19 c0       	rjmp	.+50     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		case PGA6144:
			scale = SCA6144;
     4f2:	0f 2e       	mov	r0, r31
     4f4:	fe e2       	ldi	r31, 0x2E	; 46
     4f6:	8f 2e       	mov	r8, r31
     4f8:	fd e9       	ldi	r31, 0x9D	; 157
     4fa:	9f 2e       	mov	r9, r31
     4fc:	f4 e4       	ldi	r31, 0x44	; 68
     4fe:	af 2e       	mov	r10, r31
     500:	f9 e3       	ldi	r31, 0x39	; 57
     502:	bf 2e       	mov	r11, r31
     504:	f0 2d       	mov	r31, r0
			break;
     506:	0e c0       	rjmp	.+28     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		default:
			scale = 0.0;
     508:	81 2c       	mov	r8, r1
     50a:	91 2c       	mov	r9, r1
     50c:	54 01       	movw	r10, r8
			break;
     50e:	0a c0       	rjmp	.+20     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     510:	0f 2e       	mov	r0, r31
     512:	f1 e7       	ldi	r31, 0x71	; 113
     514:	8f 2e       	mov	r8, r31
     516:	f3 e1       	ldi	r31, 0x13	; 19
     518:	9f 2e       	mov	r9, r31
     51a:	f3 e8       	ldi	r31, 0x83	; 131
     51c:	af 2e       	mov	r10, r31
     51e:	f7 e3       	ldi	r31, 0x37	; 55
     520:	bf 2e       	mov	r11, r31
     522:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	*voltage = scale * (float) value;
     524:	07 2e       	mov	r0, r23
     526:	00 0c       	add	r0, r0
     528:	88 0b       	sbc	r24, r24
     52a:	99 0b       	sbc	r25, r25
     52c:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__floatsisf>
     530:	9b 01       	movw	r18, r22
     532:	ac 01       	movw	r20, r24
     534:	c5 01       	movw	r24, r10
     536:	b4 01       	movw	r22, r8
     538:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <__mulsf3>
     53c:	f6 01       	movw	r30, r12
     53e:	60 83       	st	Z, r22
     540:	71 83       	std	Z+1, r23	; 0x01
     542:	82 83       	std	Z+2, r24	; 0x02
     544:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     546:	10 2f       	mov	r17, r16

}
     548:	81 2f       	mov	r24, r17
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	ff 90       	pop	r15
     554:	ef 90       	pop	r14
     556:	df 90       	pop	r13
     558:	cf 90       	pop	r12
     55a:	bf 90       	pop	r11
     55c:	af 90       	pop	r10
     55e:	9f 90       	pop	r9
     560:	8f 90       	pop	r8
     562:	08 95       	ret

00000564 <get_cmdline>:
	if ((d >= '0') && (d <= '9')) {
		return(ERROR);
	}
	return(NOERROR);

}
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	9c 01       	movw	r18, r24
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	1c c0       	rjmp	.+56     	; 0x5a6 <get_cmdline+0x42>
     56e:	cc e1       	ldi	r28, 0x1C	; 28
     570:	dc e2       	ldi	r29, 0x2C	; 44
     572:	e8 81       	ld	r30, Y
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	e3 5e       	subi	r30, 0xE3	; 227
     578:	f4 4d       	sbci	r31, 0xD4	; 212
     57a:	80 81       	ld	r24, Z
     57c:	f9 01       	movw	r30, r18
     57e:	e4 0f       	add	r30, r20
     580:	f1 1d       	adc	r31, r1
     582:	80 83       	st	Z, r24
     584:	ae e1       	ldi	r26, 0x1E	; 30
     586:	bc e2       	ldi	r27, 0x2C	; 44
     588:	8c 91       	ld	r24, X
     58a:	81 50       	subi	r24, 0x01	; 1
     58c:	8c 93       	st	X, r24
     58e:	88 81       	ld	r24, Y
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	6e ef       	ldi	r22, 0xFE	; 254
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	0e 94 2a 23 	call	0x4654	; 0x4654 <__divmodhi4>
     59c:	88 83       	st	Y, r24
     59e:	80 81       	ld	r24, Z
     5a0:	88 23       	and	r24, r24
     5a2:	29 f0       	breq	.+10     	; 0x5ae <get_cmdline+0x4a>
     5a4:	4f 5f       	subi	r20, 0xFF	; 255
     5a6:	80 91 1e 2c 	lds	r24, 0x2C1E	; 0x802c1e <recv0_buf+0x101>
     5aa:	81 11       	cpse	r24, r1
     5ac:	e0 cf       	rjmp	.-64     	; 0x56e <get_cmdline+0xa>
     5ae:	f9 01       	movw	r30, r18
     5b0:	e4 0f       	add	r30, r20
     5b2:	f1 1d       	adc	r31, r1
     5b4:	10 82       	st	Z, r1
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	08 95       	ret

000005bc <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     5bc:	9f e9       	ldi	r25, 0x9F	; 159
     5be:	98 0f       	add	r25, r24
     5c0:	9a 31       	cpi	r25, 0x1A	; 26
     5c2:	28 f0       	brcs	.+10     	; 0x5ce <isaletter+0x12>
     5c4:	81 54       	subi	r24, 0x41	; 65
     5c6:	8a 31       	cpi	r24, 0x1A	; 26
     5c8:	20 f4       	brcc	.+8      	; 0x5d2 <isaletter+0x16>
		return(ERROR);
     5ca:	83 e6       	ldi	r24, 0x63	; 99
     5cc:	08 95       	ret
     5ce:	83 e6       	ldi	r24, 0x63	; 99
     5d0:	08 95       	ret
	}
	return(NOERROR);
     5d2:	80 e0       	ldi	r24, 0x00	; 0

}
     5d4:	08 95       	ret

000005d6 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     5e2:	e6 2e       	mov	r14, r22
     5e4:	f1 2c       	mov	r15, r1
     5e6:	84 e3       	ldi	r24, 0x34	; 52
     5e8:	8e 9d       	mul	r24, r14
     5ea:	f0 01       	movw	r30, r0
     5ec:	8f 9d       	mul	r24, r15
     5ee:	f0 0d       	add	r31, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	ed 5f       	subi	r30, 0xFD	; 253
     5f4:	f7 4d       	sbci	r31, 0xD7	; 215
     5f6:	8f e3       	ldi	r24, 0x3F	; 63
     5f8:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     5fa:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     5fc:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     5fe:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     600:	04 c0       	rjmp	.+8      	; 0x60a <parse_cmd+0x34>
		if (*ptr == '\0') {
     602:	11 23       	and	r17, r17
     604:	09 f4       	brne	.+2      	; 0x608 <parse_cmd+0x32>
     606:	75 c0       	rjmp	.+234    	; 0x6f2 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     608:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     60a:	18 81       	ld	r17, Y
     60c:	81 2f       	mov	r24, r17
     60e:	0e 94 de 02 	call	0x5bc	; 0x5bc <isaletter>
     612:	88 23       	and	r24, r24
     614:	b1 f3       	breq	.-20     	; 0x602 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     616:	21 96       	adiw	r28, 0x01	; 1
     618:	84 e3       	ldi	r24, 0x34	; 52
     61a:	8e 9d       	mul	r24, r14
     61c:	f0 01       	movw	r30, r0
     61e:	8f 9d       	mul	r24, r15
     620:	f0 0d       	add	r31, r0
     622:	11 24       	eor	r1, r1
     624:	ed 5f       	subi	r30, 0xFD	; 253
     626:	f7 4d       	sbci	r31, 0xD7	; 215
     628:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     62a:	04 c0       	rjmp	.+8      	; 0x634 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     62c:	11 23       	and	r17, r17
     62e:	09 f4       	brne	.+2      	; 0x632 <parse_cmd+0x5c>
     630:	60 c0       	rjmp	.+192    	; 0x6f2 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     632:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     634:	18 81       	ld	r17, Y
     636:	81 2f       	mov	r24, r17
     638:	0e 94 de 02 	call	0x5bc	; 0x5bc <isaletter>
     63c:	88 23       	and	r24, r24
     63e:	b1 f3       	breq	.-20     	; 0x62c <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     640:	21 96       	adiw	r28, 0x01	; 1
     642:	84 e3       	ldi	r24, 0x34	; 52
     644:	8e 9d       	mul	r24, r14
     646:	f0 01       	movw	r30, r0
     648:	8f 9d       	mul	r24, r15
     64a:	f0 0d       	add	r31, r0
     64c:	11 24       	eor	r1, r1
     64e:	ed 5f       	subi	r30, 0xFD	; 253
     650:	f7 4d       	sbci	r31, 0xD7	; 215
     652:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	2a c0       	rjmp	.+84     	; 0x6ac <parse_cmd+0xd6>
		if (*ptr == '\0') {
     658:	98 81       	ld	r25, Y
     65a:	91 11       	cpse	r25, r1
     65c:	0c c0       	rjmp	.+24     	; 0x676 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     65e:	94 e3       	ldi	r25, 0x34	; 52
     660:	9e 9d       	mul	r25, r14
     662:	f0 01       	movw	r30, r0
     664:	9f 9d       	mul	r25, r15
     666:	f0 0d       	add	r31, r0
     668:	11 24       	eor	r1, r1
     66a:	ed 5f       	subi	r30, 0xFD	; 253
     66c:	f7 4d       	sbci	r31, 0xD7	; 215
     66e:	e8 0f       	add	r30, r24
     670:	f1 1d       	adc	r31, r1
     672:	12 82       	std	Z+2, r1	; 0x02
			return;
     674:	3e c0       	rjmp	.+124    	; 0x6f2 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {			// Command ID separator
     676:	9b 33       	cpi	r25, 0x3B	; 59
     678:	61 f4       	brne	.+24     	; 0x692 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     67a:	94 e3       	ldi	r25, 0x34	; 52
     67c:	9e 9d       	mul	r25, r14
     67e:	f0 01       	movw	r30, r0
     680:	9f 9d       	mul	r25, r15
     682:	f0 0d       	add	r31, r0
     684:	11 24       	eor	r1, r1
     686:	ed 5f       	subi	r30, 0xFD	; 253
     688:	f7 4d       	sbci	r31, 0xD7	; 215
     68a:	e8 0f       	add	r30, r24
     68c:	f1 1d       	adc	r31, r1
     68e:	12 82       	std	Z+2, r1	; 0x02
			break;
     690:	0f c0       	rjmp	.+30     	; 0x6b0 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     692:	21 96       	adiw	r28, 0x01	; 1
     694:	24 e3       	ldi	r18, 0x34	; 52
     696:	2e 9d       	mul	r18, r14
     698:	f0 01       	movw	r30, r0
     69a:	2f 9d       	mul	r18, r15
     69c:	f0 0d       	add	r31, r0
     69e:	11 24       	eor	r1, r1
     6a0:	ed 5f       	subi	r30, 0xFD	; 253
     6a2:	f7 4d       	sbci	r31, 0xD7	; 215
     6a4:	e8 0f       	add	r30, r24
     6a6:	f1 1d       	adc	r31, r1
     6a8:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6aa:	8f 5f       	subi	r24, 0xFF	; 255
     6ac:	89 32       	cpi	r24, 0x29	; 41
     6ae:	a0 f2       	brcs	.-88     	; 0x658 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
     6b0:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	1c c0       	rjmp	.+56     	; 0x6ee <parse_cmd+0x118>
		if (*ptr == '\0') {
     6b6:	98 81       	ld	r25, Y
     6b8:	91 11       	cpse	r25, r1
     6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     6bc:	94 e3       	ldi	r25, 0x34	; 52
     6be:	9e 9d       	mul	r25, r14
     6c0:	f0 01       	movw	r30, r0
     6c2:	9f 9d       	mul	r25, r15
     6c4:	f0 0d       	add	r31, r0
     6c6:	11 24       	eor	r1, r1
     6c8:	ed 5f       	subi	r30, 0xFD	; 253
     6ca:	f7 4d       	sbci	r31, 0xD7	; 215
     6cc:	e8 0f       	add	r30, r24
     6ce:	f1 1d       	adc	r31, r1
     6d0:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     6d2:	0f c0       	rjmp	.+30     	; 0x6f2 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     6d4:	21 96       	adiw	r28, 0x01	; 1
     6d6:	24 e3       	ldi	r18, 0x34	; 52
     6d8:	2e 9d       	mul	r18, r14
     6da:	f0 01       	movw	r30, r0
     6dc:	2f 9d       	mul	r18, r15
     6de:	f0 0d       	add	r31, r0
     6e0:	11 24       	eor	r1, r1
     6e2:	ed 5f       	subi	r30, 0xFD	; 253
     6e4:	f7 4d       	sbci	r31, 0xD7	; 215
     6e6:	e8 0f       	add	r30, r24
     6e8:	f1 1d       	adc	r31, r1
     6ea:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     6ec:	8f 5f       	subi	r24, 0xFF	; 255
     6ee:	89 30       	cpi	r24, 0x09	; 9
     6f0:	10 f3       	brcs	.-60     	; 0x6b6 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	08 95       	ret

000006fe <printLine>:
		been run and the system has received a reboot acknowledge (the !). This
		is done to prevent unsolicited text being sent (error messages) at
		initialization or after a reboot.
------------------------------------------------------------------------------*/
void printLine(char *str)
{
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	c5 50       	subi	r28, 0x05	; 5
     70c:	d1 40       	sbci	r29, 0x01	; 1
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char prFormat[] = "$S%d%s";
     712:	27 e0       	ldi	r18, 0x07	; 7
     714:	e4 e4       	ldi	r30, 0x44	; 68
     716:	fc e8       	ldi	r31, 0x8C	; 140
     718:	de 01       	movw	r26, r28
     71a:	a1 50       	subi	r26, 0x01	; 1
     71c:	bf 4f       	sbci	r27, 0xFF	; 255
     71e:	01 90       	ld	r0, Z+
     720:	0d 92       	st	X+, r0
     722:	2a 95       	dec	r18
     724:	e1 f7       	brne	.-8      	; 0x71e <printLine+0x20>

	if (firstpass) {
     726:	20 91 0b 2a 	lds	r18, 0x2A0B	; 0x802a0b <firstpass>
     72a:	21 11       	cpse	r18, r1
     72c:	2a c0       	rjmp	.+84     	; 0x782 <printLine+0x84>
		return;
	}

	sprintf(strbuf, prFormat, get_SPECID, str);
     72e:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     732:	22 ff       	sbrs	r18, 2
     734:	03 c0       	rjmp	.+6      	; 0x73c <printLine+0x3e>
     736:	22 e0       	ldi	r18, 0x02	; 2
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	02 c0       	rjmp	.+4      	; 0x740 <printLine+0x42>
     73c:	21 e0       	ldi	r18, 0x01	; 1
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	9f 93       	push	r25
     742:	8f 93       	push	r24
     744:	3f 93       	push	r19
     746:	2f 93       	push	r18
     748:	ce 01       	movw	r24, r28
     74a:	81 50       	subi	r24, 0x01	; 1
     74c:	9f 4f       	sbci	r25, 0xFF	; 255
     74e:	9f 93       	push	r25
     750:	8f 93       	push	r24
     752:	8e 01       	movw	r16, r28
     754:	0f 5f       	subi	r16, 0xFF	; 255
     756:	1f 4f       	sbci	r17, 0xFF	; 255
     758:	1f 93       	push	r17
     75a:	0f 93       	push	r16
     75c:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
	checksum_NMEA(strbuf);
     760:	c8 01       	movw	r24, r16
     762:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     766:	f8 01       	movw	r30, r16
     768:	01 90       	ld	r0, Z+
     76a:	00 20       	and	r0, r0
     76c:	e9 f7       	brne	.-6      	; 0x768 <printLine+0x6a>
     76e:	31 97       	sbiw	r30, 0x01	; 1
     770:	af 01       	movw	r20, r30
     772:	40 1b       	sub	r20, r16
     774:	51 0b       	sbc	r21, r17
     776:	b8 01       	movw	r22, r16
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	0e 94 82 1b 	call	0x3704	; 0x3704 <send_USART>
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	de bf       	out	0x3e, r29	; 62

}
     782:	cb 5f       	subi	r28, 0xFB	; 251
     784:	de 4f       	sbci	r29, 0xFE	; 254
     786:	cd bf       	out	0x3d, r28	; 61
     788:	de bf       	out	0x3e, r29	; 62
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	08 95       	ret

00000794 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     794:	cf 92       	push	r12
     796:	df 92       	push	r13
     798:	ef 92       	push	r14
     79a:	ff 92       	push	r15
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	cc 51       	subi	r28, 0x1C	; 28
     7aa:	d1 40       	sbci	r29, 0x01	; 1
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	d8 2e       	mov	r13, r24
     7b2:	c9 2e       	mov	r12, r25

	const char format_CMD[] = "CMD,%s,%s";
     7b4:	8a e0       	ldi	r24, 0x0A	; 10
     7b6:	eb e4       	ldi	r30, 0x4B	; 75
     7b8:	fc e8       	ldi	r31, 0x8C	; 140
     7ba:	9e 01       	movw	r18, r28
     7bc:	2f 5f       	subi	r18, 0xFF	; 255
     7be:	3f 4f       	sbci	r19, 0xFF	; 255
     7c0:	79 01       	movw	r14, r18
     7c2:	d9 01       	movw	r26, r18
     7c4:	01 90       	ld	r0, Z+
     7c6:	0d 92       	st	X+, r0
     7c8:	8a 95       	dec	r24
     7ca:	e1 f7       	brne	.-8      	; 0x7c4 <echo_cmd+0x30>
	char currenttime[20], strbuf[BUFSIZE];

	get_time(currenttime);
     7cc:	8e 01       	movw	r16, r28
     7ce:	05 5f       	subi	r16, 0xF5	; 245
     7d0:	1f 4f       	sbci	r17, 0xFF	; 255
     7d2:	c8 01       	movw	r24, r16
     7d4:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
	sprintf(strbuf, format_CMD, currenttime, cmdline);
     7d8:	cf 92       	push	r12
     7da:	df 92       	push	r13
     7dc:	1f 93       	push	r17
     7de:	0f 93       	push	r16
     7e0:	ff 92       	push	r15
     7e2:	ef 92       	push	r14
     7e4:	0c 5e       	subi	r16, 0xEC	; 236
     7e6:	1f 4f       	sbci	r17, 0xFF	; 255
     7e8:	1f 93       	push	r17
     7ea:	0f 93       	push	r16
     7ec:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
	printLine(strbuf);
     7f0:	c8 01       	movw	r24, r16
     7f2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

}
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	c4 5e       	subi	r28, 0xE4	; 228
     7fc:	de 4f       	sbci	r29, 0xFE	; 254
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	de bf       	out	0x3e, r29	; 62
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	df 90       	pop	r13
     810:	cf 90       	pop	r12
     812:	08 95       	ret

00000814 <send_EXprompt>:
/*------------------------------------------------------------------------------
void send_EXprompt(void)
	Sends an exclamation mark on USART port 0
------------------------------------------------------------------------------*/
void send_EXprompt(void)
{
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	00 d0       	rcall	.+0      	; 0x81a <send_EXprompt+0x6>
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62

	const char str[] = "!";
     81e:	81 e2       	ldi	r24, 0x21	; 33
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	89 83       	std	Y+1, r24	; 0x01
     824:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     826:	41 e0       	ldi	r20, 0x01	; 1
     828:	be 01       	movw	r22, r28
     82a:	6f 5f       	subi	r22, 0xFF	; 255
     82c:	7f 4f       	sbci	r23, 0xFF	; 255
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	0e 94 82 1b 	call	0x3704	; 0x3704 <send_USART>

}
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <rebootACKd>:
	Returns:
		YES if the reboot acknowledge string was received
		NO if it wasn't
------------------------------------------------------------------------------*/
uint8_t rebootACKd(char *cmdline)
{
     83e:	cf 93       	push	r28

	if (!rebootackd) {
     840:	c0 91 02 28 	lds	r28, 0x2802	; 0x802802 <rebootackd>
     844:	c1 11       	cpse	r28, r1
     846:	21 c0       	rjmp	.+66     	; 0x88a <rebootACKd+0x4c>
     848:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     84a:	80 81       	ld	r24, Z
     84c:	81 32       	cpi	r24, 0x21	; 33
     84e:	91 f4       	brne	.+36     	; 0x874 <rebootACKd+0x36>
     850:	91 81       	ldd	r25, Z+1	; 0x01
     852:	91 11       	cpse	r25, r1
     854:	0f c0       	rjmp	.+30     	; 0x874 <rebootACKd+0x36>
			init_RTC(511);		// 1-sec RTC clock ticks
     856:	8f ef       	ldi	r24, 0xFF	; 255
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	0e 94 26 19 	call	0x324c	; 0x324c <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     85e:	85 e0       	ldi	r24, 0x05	; 5
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	80 93 0e 2a 	sts	0x2A0E, r24	; 0x802a0e <timeoutOLED>
     866:	90 93 0f 2a 	sts	0x2A0F, r25	; 0x802a0f <timeoutOLED+0x1>
			rebootackd = YES;
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <rebootackd>
			return(YES);
     870:	c1 e0       	ldi	r28, 0x01	; 1
     872:	0c c0       	rjmp	.+24     	; 0x88c <rebootACKd+0x4e>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     874:	81 32       	cpi	r24, 0x21	; 33
     876:	31 f4       	brne	.+12     	; 0x884 <rebootACKd+0x46>
     878:	81 81       	ldd	r24, Z+1	; 0x01
     87a:	88 23       	and	r24, r24
     87c:	19 f0       	breq	.+6      	; 0x884 <rebootACKd+0x46>
			reboot();
     87e:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <reboot>
			return(NO);
     882:	04 c0       	rjmp	.+8      	; 0x88c <rebootACKd+0x4e>
		} else {
			send_EXprompt();
     884:	0e 94 0a 04 	call	0x814	; 0x814 <send_EXprompt>
//			send_prompt('!');
			return(NO);
     888:	01 c0       	rjmp	.+2      	; 0x88c <rebootACKd+0x4e>
		}
	}

	return(YES);
     88a:	c1 e0       	ldi	r28, 0x01	; 1

}
     88c:	8c 2f       	mov	r24, r28
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <send_GTprompt>:
/*------------------------------------------------------------------------------
void send_GTprompt(void)
	Sends a greater than (>) on USART port 0
------------------------------------------------------------------------------*/
void send_GTprompt(void)
{
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	00 d0       	rcall	.+0      	; 0x898 <send_GTprompt+0x6>
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62

	const char str[] = ">";
     89c:	8e e3       	ldi	r24, 0x3E	; 62
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	89 83       	std	Y+1, r24	; 0x01
     8a2:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     8a4:	41 e0       	ldi	r20, 0x01	; 1
     8a6:	be 01       	movw	r22, r28
     8a8:	6f 5f       	subi	r22, 0xFF	; 255
     8aa:	7f 4f       	sbci	r23, 0xFF	; 255
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	0e 94 82 1b 	call	0x3704	; 0x3704 <send_USART>

}
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	cf 5f       	subi	r28, 0xFF	; 255
     8c6:	d1 09       	sbc	r29, r1
     8c8:	cd bf       	out	0x3d, r28	; 61
     8ca:	de bf       	out	0x3e, r29	; 62

	char cmdline[BUFSIZE+1];		// BUFSIZE is the size of the ring buffer
	static uint8_t cstack = 0;		// pcmd index

	get_cmdline(cmdline);
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 b2 02 	call	0x564	; 0x564 <get_cmdline>

	if (!rebootACKd(cmdline)) {		// Reboot not yet acknowledged
     8d4:	ce 01       	movw	r24, r28
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	0e 94 1f 04 	call	0x83e	; 0x83e <rebootACKd>
     8dc:	88 23       	and	r24, r24
     8de:	09 f4       	brne	.+2      	; 0x8e2 <commands+0x26>
     8e0:	71 c0       	rjmp	.+226    	; 0x9c4 <commands+0x108>
		return;
	}

		// <CR> or ! alone are not errors
	if ((cmdline[0] == '\0') || (cmdline[0] == '!')) {
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	88 23       	and	r24, r24
     8e6:	11 f0       	breq	.+4      	; 0x8ec <commands+0x30>
     8e8:	81 32       	cpi	r24, 0x21	; 33
     8ea:	29 f4       	brne	.+10     	; 0x8f6 <commands+0x3a>
		firstpass = NO;
     8ec:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <firstpass>
		send_GTprompt();
     8f0:	0e 94 49 04 	call	0x892	; 0x892 <send_GTprompt>
		return;
     8f4:	67 c0       	rjmp	.+206    	; 0x9c4 <commands+0x108>
	}

	echo_cmd(cmdline);
     8f6:	ce 01       	movw	r24, r28
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	0e 94 ca 03 	call	0x794	; 0x794 <echo_cmd>
	parse_cmd(cmdline, cstack);
     8fe:	60 91 00 28 	lds	r22, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     902:	ce 01       	movw	r24, r28
     904:	01 96       	adiw	r24, 0x01	; 1
     906:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <parse_cmd>

	switch (pcmd[cstack].cverb) {
     90a:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     90e:	24 e3       	ldi	r18, 0x34	; 52
     910:	82 9f       	mul	r24, r18
     912:	f0 01       	movw	r30, r0
     914:	11 24       	eor	r1, r1
     916:	ed 5f       	subi	r30, 0xFD	; 253
     918:	f7 4d       	sbci	r31, 0xD7	; 215
     91a:	e0 81       	ld	r30, Z
     91c:	4e 2f       	mov	r20, r30
     91e:	50 e0       	ldi	r21, 0x00	; 0
     920:	fa 01       	movw	r30, r20
     922:	e9 54       	subi	r30, 0x49	; 73
     924:	f1 09       	sbc	r31, r1
     926:	ec 32       	cpi	r30, 0x2C	; 44
     928:	f1 05       	cpc	r31, r1
     92a:	d0 f5       	brcc	.+116    	; 0x9a0 <commands+0xe4>
     92c:	e0 5b       	subi	r30, 0xB0	; 176
     92e:	ff 4f       	sbci	r31, 0xFF	; 255
     930:	0c 94 5d 23 	jmp	0x46ba	; 0x46ba <__tablejump2__>
		case 'c':				// close
			close_PNEU(cstack);
     934:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <close_PNEU>
			break;
     938:	39 c0       	rjmp	.+114    	; 0x9ac <commands+0xf0>

		case 'o':				// open
			open_PNEU(cstack);
     93a:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <open_PNEU>
			break;
     93e:	36 c0       	rjmp	.+108    	; 0x9ac <commands+0xf0>

		case 'm':				// move
			move_MOTOR(cstack);
     940:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <move_MOTOR>
			break;
     944:	33 c0       	rjmp	.+102    	; 0x9ac <commands+0xf0>

		case 'r':				// report
			report(cstack);
     946:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <report>
			break;
     94a:	30 c0       	rjmp	.+96     	; 0x9ac <commands+0xf0>

		case 's':				// set
			set(cstack);
     94c:	0e 94 76 19 	call	0x32ec	; 0x32ec <set>
			break;
     950:	2d c0       	rjmp	.+90     	; 0x9ac <commands+0xf0>

		case 't':
			testroutine();
     952:	0e 94 db 19 	call	0x33b6	; 0x33b6 <testroutine>
			break;
     956:	2a c0       	rjmp	.+84     	; 0x9ac <commands+0xf0>

		case 'I':	// test init_MOTORS
			init_MOTORS();
     958:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <init_MOTORS>
			break;
     95c:	27 c0       	rjmp	.+78     	; 0x9ac <commands+0xf0>

		case 'R':				// Reboot
			squelchErrors = YES;
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <squelchErrors>
			if (motorsMoving()) {
     964:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <motorsMoving>
     968:	88 23       	and	r24, r24
     96a:	49 f0       	breq	.+18     	; 0x97e <commands+0xc2>
				squelchErrors = NO;
     96c:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <squelchErrors>
				printError(ERR_MOTORMOVING, "Can't reboot, motor moving");
     970:	65 e5       	ldi	r22, 0x55	; 85
     972:	7c e8       	ldi	r23, 0x8C	; 140
     974:	84 e3       	ldi	r24, 0x34	; 52
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
				break;
     97c:	17 c0       	rjmp	.+46     	; 0x9ac <commands+0xf0>
			} else {
				saveFRAM_MOTOREncoders();
     97e:	0e 94 8d 18 	call	0x311a	; 0x311a <saveFRAM_MOTOREncoders>
				timerSAVEENCODER = 0;
     982:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerSAVEENCODER>
				send_GTprompt();	// Aidan request
     986:	0e 94 49 04 	call	0x892	; 0x892 <send_GTprompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     98a:	8a e6       	ldi	r24, 0x6A	; 106
     98c:	94 e0       	ldi	r25, 0x04	; 4
     98e:	21 e0       	ldi	r18, 0x01	; 1
     990:	81 50       	subi	r24, 0x01	; 1
     992:	90 40       	sbci	r25, 0x00	; 0
     994:	20 40       	sbci	r18, 0x00	; 0
     996:	e1 f7       	brne	.-8      	; 0x990 <commands+0xd4>
     998:	00 c0       	rjmp	.+0      	; 0x99a <commands+0xde>
				_delay_ms(100);		// Avoids finishing the command loop before reboot
				reboot();
     99a:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <reboot>
				return;
     99e:	12 c0       	rjmp	.+36     	; 0x9c4 <commands+0x108>
			}

		default:
			printError(ERR_BADCOMMAND, "Not a command");
     9a0:	60 e7       	ldi	r22, 0x70	; 112
     9a2:	7c e8       	ldi	r23, 0x8C	; 140
     9a4:	89 ec       	ldi	r24, 0xC9	; 201
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     9ac:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	6a e0       	ldi	r22, 0x0A	; 10
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	0e 94 2a 23 	call	0x4654	; 0x4654 <__divmodhi4>
     9bc:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	send_GTprompt();
     9c0:	0e 94 49 04 	call	0x892	; 0x892 <send_GTprompt>

}
     9c4:	c1 50       	subi	r28, 0x01	; 1
     9c6:	df 4f       	sbci	r29, 0xFF	; 255
     9c8:	cd bf       	out	0x3d, r28	; 61
     9ca:	de bf       	out	0x3e, r29	; 62
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62
     9de:	a0 97       	sbiw	r28, 0x20	; 32
     9e0:	cd bf       	out	0x3d, r28	; 61
     9e2:	de bf       	out	0x3e, r29	; 62

	const char format_ISO[] = "20%02x-%02x-%02xT%02x:%02x:%02x";
     9e4:	40 e2       	ldi	r20, 0x20	; 32
     9e6:	ee e7       	ldi	r30, 0x7E	; 126
     9e8:	fc e8       	ldi	r31, 0x8C	; 140
     9ea:	9e 01       	movw	r18, r28
     9ec:	2f 5f       	subi	r18, 0xFF	; 255
     9ee:	3f 4f       	sbci	r19, 0xFF	; 255
     9f0:	d9 01       	movw	r26, r18
     9f2:	01 90       	ld	r0, Z+
     9f4:	0d 92       	st	X+, r0
     9f6:	4a 95       	dec	r20
     9f8:	e1 f7       	brne	.-8      	; 0x9f2 <convert_ds2iso+0x20>
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     9fa:	fb 01       	movw	r30, r22
     9fc:	b0 81       	ld	r27, Z
	minutes = (*ds3231time++);
     9fe:	a1 81       	ldd	r26, Z+1	; 0x01
	hours = (*ds3231time++);
     a00:	12 81       	ldd	r17, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     a02:	04 81       	ldd	r16, Z+4	; 0x04
	month = (*ds3231time++);
     a04:	55 81       	ldd	r21, Z+5	; 0x05
	year = (*ds3231time);
     a06:	46 81       	ldd	r20, Z+6	; 0x06

	sprintf(isotime, format_ISO, year, month, date, hours, minutes, seconds);
     a08:	1f 92       	push	r1
     a0a:	bf 93       	push	r27
     a0c:	1f 92       	push	r1
     a0e:	af 93       	push	r26
     a10:	1f 92       	push	r1
     a12:	1f 93       	push	r17
     a14:	1f 92       	push	r1
     a16:	0f 93       	push	r16
     a18:	1f 92       	push	r1
     a1a:	5f 93       	push	r21
     a1c:	1f 92       	push	r1
     a1e:	4f 93       	push	r20
     a20:	3f 93       	push	r19
     a22:	2f 93       	push	r18
     a24:	9f 93       	push	r25
     a26:	8f 93       	push	r24
     a28:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>

}
     a2c:	cd bf       	out	0x3d, r28	; 61
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	a0 96       	adiw	r28, 0x20	; 32
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	de bf       	out	0x3e, r29	; 62
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	08 95       	ret

00000a40 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     a40:	dc 01       	movw	r26, r24
     a42:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     a44:	81 89       	ldd	r24, Z+17	; 0x11
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	c0 97       	sbiw	r24, 0x30	; 48
     a4a:	82 95       	swap	r24
     a4c:	92 95       	swap	r25
     a4e:	90 7f       	andi	r25, 0xF0	; 240
     a50:	98 27       	eor	r25, r24
     a52:	80 7f       	andi	r24, 0xF0	; 240
     a54:	98 27       	eor	r25, r24
     a56:	92 89       	ldd	r25, Z+18	; 0x12
     a58:	90 53       	subi	r25, 0x30	; 48
     a5a:	89 2b       	or	r24, r25
     a5c:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     a5e:	86 85       	ldd	r24, Z+14	; 0x0e
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	c0 97       	sbiw	r24, 0x30	; 48
     a64:	82 95       	swap	r24
     a66:	92 95       	swap	r25
     a68:	90 7f       	andi	r25, 0xF0	; 240
     a6a:	98 27       	eor	r25, r24
     a6c:	80 7f       	andi	r24, 0xF0	; 240
     a6e:	98 27       	eor	r25, r24
     a70:	97 85       	ldd	r25, Z+15	; 0x0f
     a72:	90 53       	subi	r25, 0x30	; 48
     a74:	89 2b       	or	r24, r25
     a76:	11 96       	adiw	r26, 0x01	; 1
     a78:	8c 93       	st	X, r24
     a7a:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     a7c:	83 85       	ldd	r24, Z+11	; 0x0b
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	c0 97       	sbiw	r24, 0x30	; 48
     a82:	82 95       	swap	r24
     a84:	92 95       	swap	r25
     a86:	90 7f       	andi	r25, 0xF0	; 240
     a88:	98 27       	eor	r25, r24
     a8a:	80 7f       	andi	r24, 0xF0	; 240
     a8c:	98 27       	eor	r25, r24
     a8e:	94 85       	ldd	r25, Z+12	; 0x0c
     a90:	90 53       	subi	r25, 0x30	; 48
     a92:	89 2b       	or	r24, r25
     a94:	12 96       	adiw	r26, 0x02	; 2
     a96:	8c 93       	st	X, r24
     a98:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	13 96       	adiw	r26, 0x03	; 3
     a9e:	8c 93       	st	X, r24
     aa0:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     aa2:	80 85       	ldd	r24, Z+8	; 0x08
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	c0 97       	sbiw	r24, 0x30	; 48
     aa8:	82 95       	swap	r24
     aaa:	92 95       	swap	r25
     aac:	90 7f       	andi	r25, 0xF0	; 240
     aae:	98 27       	eor	r25, r24
     ab0:	80 7f       	andi	r24, 0xF0	; 240
     ab2:	98 27       	eor	r25, r24
     ab4:	91 85       	ldd	r25, Z+9	; 0x09
     ab6:	90 53       	subi	r25, 0x30	; 48
     ab8:	89 2b       	or	r24, r25
     aba:	14 96       	adiw	r26, 0x04	; 4
     abc:	8c 93       	st	X, r24
     abe:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     ac0:	25 81       	ldd	r18, Z+5	; 0x05
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	20 53       	subi	r18, 0x30	; 48
     ac6:	31 09       	sbc	r19, r1
     ac8:	22 95       	swap	r18
     aca:	32 95       	swap	r19
     acc:	30 7f       	andi	r19, 0xF0	; 240
     ace:	32 27       	eor	r19, r18
     ad0:	20 7f       	andi	r18, 0xF0	; 240
     ad2:	32 27       	eor	r19, r18
     ad4:	86 81       	ldd	r24, Z+6	; 0x06
     ad6:	80 53       	subi	r24, 0x30	; 48
     ad8:	28 2b       	or	r18, r24
     ada:	15 96       	adiw	r26, 0x05	; 5
     adc:	2c 93       	st	X, r18
     ade:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     ae0:	22 81       	ldd	r18, Z+2	; 0x02
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	20 53       	subi	r18, 0x30	; 48
     ae6:	31 09       	sbc	r19, r1
     ae8:	22 95       	swap	r18
     aea:	32 95       	swap	r19
     aec:	30 7f       	andi	r19, 0xF0	; 240
     aee:	32 27       	eor	r19, r18
     af0:	20 7f       	andi	r18, 0xF0	; 240
     af2:	32 27       	eor	r19, r18
     af4:	83 81       	ldd	r24, Z+3	; 0x03
     af6:	80 53       	subi	r24, 0x30	; 48
     af8:	28 2b       	or	r18, r24
     afa:	16 96       	adiw	r26, 0x06	; 6
     afc:	2c 93       	st	X, r18
     afe:	08 95       	ret

00000b00 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	7b 01       	movw	r14, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
     b12:	c8 2f       	mov	r28, r24
     b14:	83 36       	cpi	r24, 0x63	; 99
     b16:	19 f4       	brne	.+6      	; 0xb1e <read_DS3231+0x1e>
		stop_TWI();
     b18:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(ERROR);
     b1c:	26 c0       	rjmp	.+76     	; 0xb6a <read_DS3231+0x6a>
    }  

	if (write_TWI(0x00) == ERROR) {	// Register 00h
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
     b24:	c8 2f       	mov	r28, r24
     b26:	83 36       	cpi	r24, 0x63	; 99
     b28:	19 f4       	brne	.+6      	; 0xb30 <read_DS3231+0x30>
		stop_TWI();
     b2a:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(ERROR);
     b2e:	1d c0       	rjmp	.+58     	; 0xb6a <read_DS3231+0x6a>
	}

	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	88 e6       	ldi	r24, 0x68	; 104
     b34:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
     b38:	c8 2f       	mov	r28, r24
     b3a:	83 36       	cpi	r24, 0x63	; 99
     b3c:	61 f4       	brne	.+24     	; 0xb56 <read_DS3231+0x56>
		stop_TWI();
     b3e:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(ERROR);
     b42:	13 c0       	rjmp	.+38     	; 0xb6a <read_DS3231+0x6a>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     b44:	87 01       	movw	r16, r14
     b46:	0c 0f       	add	r16, r28
     b48:	11 1d       	adc	r17, r1
     b4a:	0e 94 2e 1a 	call	0x345c	; 0x345c <read_TWI>
     b4e:	f8 01       	movw	r30, r16
     b50:	80 83       	st	Z, r24
	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 6; i++) {
     b52:	cf 5f       	subi	r28, 0xFF	; 255
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <read_DS3231+0x58>
     b56:	c0 e0       	ldi	r28, 0x00	; 0
     b58:	c6 30       	cpi	r28, 0x06	; 6
     b5a:	a0 f3       	brcs	.-24     	; 0xb44 <read_DS3231+0x44>
		ds3231time[i] = read_TWI();
	}

	ds3231time[6] = readlast_TWI();
     b5c:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <readlast_TWI>
     b60:	f7 01       	movw	r30, r14
     b62:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     b64:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>

	return(NOERROR);
     b68:	c0 e0       	ldi	r28, 0x00	; 0

}
     b6a:	8c 2f       	mov	r24, r28
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
     b72:	ff 90       	pop	r15
     b74:	ef 90       	pop	r14
     b76:	08 95       	ret

00000b78 <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     b78:	ef 92       	push	r14
     b7a:	ff 92       	push	r15
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	27 97       	sbiw	r28, 0x07	; 7
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (read_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     b8e:	be 01       	movw	r22, r28
     b90:	6f 5f       	subi	r22, 0xFF	; 255
     b92:	7f 4f       	sbci	r23, 0xFF	; 255
     b94:	88 e6       	ldi	r24, 0x68	; 104
     b96:	0e 94 80 05 	call	0xb00	; 0xb00 <read_DS3231>
     b9a:	18 2f       	mov	r17, r24
     b9c:	83 36       	cpi	r24, 0x63	; 99
     b9e:	79 f4       	brne	.+30     	; 0xbbe <get_time+0x46>
		printError(ERR_GETTIME, "get_time DS3231");
     ba0:	6e e9       	ldi	r22, 0x9E	; 158
     ba2:	7c e8       	ldi	r23, 0x8C	; 140
     ba4:	85 e6       	ldi	r24, 0x65	; 101
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		strcpy(isotime, "DateTime?");
     bac:	8a e0       	ldi	r24, 0x0A	; 10
     bae:	ee ea       	ldi	r30, 0xAE	; 174
     bb0:	fc e8       	ldi	r31, 0x8C	; 140
     bb2:	d7 01       	movw	r26, r14
     bb4:	01 90       	ld	r0, Z+
     bb6:	0d 92       	st	X+, r0
     bb8:	8a 95       	dec	r24
     bba:	e1 f7       	brne	.-8      	; 0xbb4 <get_time+0x3c>
		return(ERROR);
     bbc:	07 c0       	rjmp	.+14     	; 0xbcc <get_time+0x54>
	}

	convert_ds2iso(isotime, ds3231time);
     bbe:	be 01       	movw	r22, r28
     bc0:	6f 5f       	subi	r22, 0xFF	; 255
     bc2:	7f 4f       	sbci	r23, 0xFF	; 255
     bc4:	c7 01       	movw	r24, r14
     bc6:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <convert_ds2iso>
	return(NOERROR);
     bca:	10 e0       	ldi	r17, 0x00	; 0

}
     bcc:	81 2f       	mov	r24, r17
     bce:	27 96       	adiw	r28, 0x07	; 7
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	08 95       	ret

00000be0 <write_DS3231>:
	Returns:
		ERROR for TWI start error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	8b 01       	movw	r16, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
     bf4:	c8 2f       	mov	r28, r24
     bf6:	83 36       	cpi	r24, 0x63	; 99
     bf8:	19 f4       	brne	.+6      	; 0xc00 <write_DS3231+0x20>
		stop_TWI();
     bfa:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(ERROR);
     bfe:	20 c0       	rjmp	.+64     	; 0xc40 <write_DS3231+0x60>
	}

	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
     c06:	c8 2f       	mov	r28, r24
     c08:	83 36       	cpi	r24, 0x63	; 99
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <write_DS3231+0x54>
		stop_TWI();
     c0c:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(ERROR);
     c10:	17 c0       	rjmp	.+46     	; 0xc40 <write_DS3231+0x60>
	}

	for (i = 0; i < 7; i++) {
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     c12:	78 01       	movw	r14, r16
     c14:	8f ef       	ldi	r24, 0xFF	; 255
     c16:	e8 1a       	sub	r14, r24
     c18:	f8 0a       	sbc	r15, r24
     c1a:	f8 01       	movw	r30, r16
     c1c:	80 81       	ld	r24, Z
     c1e:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
     c22:	c8 2f       	mov	r28, r24
     c24:	83 36       	cpi	r24, 0x63	; 99
     c26:	19 f4       	brne	.+6      	; 0xc2e <write_DS3231+0x4e>
			stop_TWI();
     c28:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
			return(ERROR);
     c2c:	09 c0       	rjmp	.+18     	; 0xc40 <write_DS3231+0x60>
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     c2e:	df 5f       	subi	r29, 0xFF	; 255
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     c30:	87 01       	movw	r16, r14
     c32:	01 c0       	rjmp	.+2      	; 0xc36 <write_DS3231+0x56>
     c34:	d0 e0       	ldi	r29, 0x00	; 0
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     c36:	d7 30       	cpi	r29, 0x07	; 7
     c38:	60 f3       	brcs	.-40     	; 0xc12 <write_DS3231+0x32>
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
			stop_TWI();
			return(ERROR);
		}
	}
	stop_TWI();
     c3a:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>

	return(NOERROR);
     c3e:	c0 e0       	ldi	r28, 0x00	; 0

}
     c40:	8c 2f       	mov	r24, r28
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	ff 90       	pop	r15
     c4c:	ef 90       	pop	r14
     c4e:	08 95       	ret

00000c50 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	27 97       	sbiw	r28, 0x07	; 7
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	de bf       	out	0x3e, r29	; 62

	uint8_t ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     c60:	bc 01       	movw	r22, r24
     c62:	ce 01       	movw	r24, r28
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	0e 94 20 05 	call	0xa40	; 0xa40 <convert_iso2ds>
	if (write_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     c6a:	be 01       	movw	r22, r28
     c6c:	6f 5f       	subi	r22, 0xFF	; 255
     c6e:	7f 4f       	sbci	r23, 0xFF	; 255
     c70:	88 e6       	ldi	r24, 0x68	; 104
     c72:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <write_DS3231>
     c76:	18 2f       	mov	r17, r24
     c78:	83 36       	cpi	r24, 0x63	; 99
     c7a:	39 f4       	brne	.+14     	; 0xc8a <put_time+0x3a>
		printError(ERR_PUTTIME, "put_time DS3231");
     c7c:	68 eb       	ldi	r22, 0xB8	; 184
     c7e:	7c e8       	ldi	r23, 0x8C	; 140
     c80:	86 e6       	ldi	r24, 0x66	; 102
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		return(ERROR);
     c88:	01 c0       	rjmp	.+2      	; 0xc8c <put_time+0x3c>
	}
	return(NOERROR);
     c8a:	10 e0       	ldi	r17, 0x00	; 0

}
     c8c:	81 2f       	mov	r24, r17
     c8e:	27 96       	adiw	r28, 0x07	; 7
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	08 95       	ret

00000c9c <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     c9c:	45 e1       	ldi	r20, 0x15	; 21
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	6b e0       	ldi	r22, 0x0B	; 11
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <eeprom_read_block>
     ca8:	08 95       	ret

00000caa <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     caa:	4b e0       	ldi	r20, 0x0B	; 11
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <eeprom_read_block>
     cb6:	08 95       	ret

00000cb8 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	65 97       	sbiw	r28, 0x15	; 21
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     cc6:	ce 01       	movw	r24, r28
     cc8:	01 96       	adiw	r24, 0x01	; 1
     cca:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     cce:	45 e1       	ldi	r20, 0x15	; 21
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	6b e0       	ldi	r22, 0x0B	; 11
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	ce 01       	movw	r24, r28
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <eeprom_update_block>

}
     cde:	65 96       	adiw	r28, 0x15	; 21
     ce0:	cd bf       	out	0x3d, r28	; 61
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret

00000cea <update_VERSION>:

void update_VERSION(void)
{
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	2b 97       	sbiw	r28, 0x0b	; 11
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     cf8:	8b e0       	ldi	r24, 0x0B	; 11
     cfa:	e8 ec       	ldi	r30, 0xC8	; 200
     cfc:	fc e8       	ldi	r31, 0x8C	; 140
     cfe:	de 01       	movw	r26, r28
     d00:	11 96       	adiw	r26, 0x01	; 1
     d02:	01 90       	ld	r0, Z+
     d04:	0d 92       	st	X+, r0
     d06:	8a 95       	dec	r24
     d08:	e1 f7       	brne	.-8      	; 0xd02 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     d0a:	4b e0       	ldi	r20, 0x0B	; 11
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	ce 01       	movw	r24, r28
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <eeprom_update_block>

}
     d1a:	2b 96       	adiw	r28, 0x0b	; 11
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     d26:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <update_BOOTTIME>
	update_VERSION();
     d2a:	0e 94 75 06 	call	0xcea	; 0xcea <update_VERSION>
     d2e:	08 95       	ret

00000d30 <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	c8 50       	subi	r28, 0x08	; 8
     d3e:	d1 40       	sbci	r29, 0x01	; 1
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char errorFormat[] = "ERR,%d,%s";
     d44:	2a e0       	ldi	r18, 0x0A	; 10
     d46:	e3 ed       	ldi	r30, 0xD3	; 211
     d48:	fc e8       	ldi	r31, 0x8C	; 140
     d4a:	de 01       	movw	r26, r28
     d4c:	a1 50       	subi	r26, 0x01	; 1
     d4e:	bf 4f       	sbci	r27, 0xFF	; 255
     d50:	01 90       	ld	r0, Z+
     d52:	0d 92       	st	X+, r0
     d54:	2a 95       	dec	r18
     d56:	e1 f7       	brne	.-8      	; 0xd50 <printError+0x20>

	if (!squelchErrors) {
     d58:	20 91 01 28 	lds	r18, 0x2801	; 0x802801 <squelchErrors>
     d5c:	21 11       	cpse	r18, r1
     d5e:	15 c0       	rjmp	.+42     	; 0xd8a <printError+0x5a>
		sprintf(strbuf, errorFormat, errorNumber, errorString);
     d60:	7f 93       	push	r23
     d62:	6f 93       	push	r22
     d64:	9f 93       	push	r25
     d66:	8f 93       	push	r24
     d68:	ce 01       	movw	r24, r28
     d6a:	81 50       	subi	r24, 0x01	; 1
     d6c:	9f 4f       	sbci	r25, 0xFF	; 255
     d6e:	9f 93       	push	r25
     d70:	8f 93       	push	r24
     d72:	8e 01       	movw	r16, r28
     d74:	0f 5f       	subi	r16, 0xFF	; 255
     d76:	1f 4f       	sbci	r17, 0xFF	; 255
     d78:	1f 93       	push	r17
     d7a:	0f 93       	push	r16
     d7c:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
		printLine(strbuf);
     d80:	c8 01       	movw	r24, r16
     d82:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	de bf       	out	0x3e, r29	; 62
	}

}
     d8a:	c8 5f       	subi	r28, 0xF8	; 248
     d8c:	de 4f       	sbci	r29, 0xFE	; 254
     d8e:	cd bf       	out	0x3d, r28	; 61
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	08 95       	ret

00000d9c <read_FRAM>:
	Returns:
		ERROR on start_TWI error (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     d9c:	cf 92       	push	r12
     d9e:	df 92       	push	r13
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	d8 2f       	mov	r29, r24
     dae:	d6 2e       	mov	r13, r22
     db0:	07 2f       	mov	r16, r23
     db2:	7a 01       	movw	r14, r20
     db4:	12 2f       	mov	r17, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if (start_TWI(addr, TWIWRITE) == ERROR) {		// TWI start
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
     dbc:	c8 2f       	mov	r28, r24
     dbe:	83 36       	cpi	r24, 0x63	; 99
     dc0:	19 f4       	brne	.+6      	; 0xdc8 <read_FRAM+0x2c>
		stop_TWI();
     dc2:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(ERROR);
     dc6:	2e c0       	rjmp	.+92     	; 0xe24 <read_FRAM+0x88>
	}

	if (write_TWI(memhigh) == ERROR) {			// Send memory address
     dc8:	80 2f       	mov	r24, r16
     dca:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
     dce:	c8 2f       	mov	r28, r24
     dd0:	83 36       	cpi	r24, 0x63	; 99
     dd2:	41 f1       	breq	.+80     	; 0xe24 <read_FRAM+0x88>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {
     dd4:	8d 2d       	mov	r24, r13
     dd6:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
     dda:	c8 2f       	mov	r28, r24
     ddc:	83 36       	cpi	r24, 0x63	; 99
     dde:	11 f1       	breq	.+68     	; 0xe24 <read_FRAM+0x88>
		return(ERROR);
	}

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	8d 2f       	mov	r24, r29
     de4:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
     de8:	c8 2f       	mov	r28, r24
     dea:	83 36       	cpi	r24, 0x63	; 99
     dec:	d9 f0       	breq	.+54     	; 0xe24 <read_FRAM+0x88>
     dee:	c0 e0       	ldi	r28, 0x00	; 0
     df0:	08 c0       	rjmp	.+16     	; 0xe02 <read_FRAM+0x66>
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     df2:	67 01       	movw	r12, r14
     df4:	cc 0e       	add	r12, r28
     df6:	d1 1c       	adc	r13, r1
     df8:	0e 94 2e 1a 	call	0x345c	; 0x345c <read_TWI>
     dfc:	f6 01       	movw	r30, r12
     dfe:	80 83       	st	Z, r24

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
     e00:	cf 5f       	subi	r28, 0xFF	; 255
     e02:	2c 2f       	mov	r18, r28
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	81 2f       	mov	r24, r17
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	28 17       	cp	r18, r24
     e0e:	39 07       	cpc	r19, r25
     e10:	84 f3       	brlt	.-32     	; 0xdf2 <read_FRAM+0x56>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     e12:	ec 01       	movw	r28, r24
     e14:	ce 0d       	add	r28, r14
     e16:	df 1d       	adc	r29, r15
     e18:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <readlast_TWI>
     e1c:	88 83       	st	Y, r24

	stop_TWI();
     e1e:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>

	return(NOERROR);
     e22:	c0 e0       	ldi	r28, 0x00	; 0

}
     e24:	8c 2f       	mov	r24, r28
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	df 90       	pop	r13
     e34:	cf 90       	pop	r12
     e36:	08 95       	ret

00000e38 <get_SETTIME>:
#include "twi.h"
#include "fram.h"

#include "commands.h" // only for testing
uint8_t get_SETTIME(char *lastsettime)
{
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	2a 97       	sbiw	r28, 0x0a	; 10
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	7c 01       	movw	r14, r24

	const char timeset[] = "Time Set?";
     e4e:	8a e0       	ldi	r24, 0x0A	; 10
     e50:	ed ed       	ldi	r30, 0xDD	; 221
     e52:	fc e8       	ldi	r31, 0x8C	; 140
     e54:	de 01       	movw	r26, r28
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	01 90       	ld	r0, Z+
     e5a:	0d 92       	st	X+, r0
     e5c:	8a 95       	dec	r24
     e5e:	e1 f7       	brne	.-8      	; 0xe58 <get_SETTIME+0x20>
	if (read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, ISOTIMELEN) == ERROR) {;
     e60:	24 e1       	ldi	r18, 0x14	; 20
     e62:	a7 01       	movw	r20, r14
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	80 e5       	ldi	r24, 0x50	; 80
     e6a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <read_FRAM>
     e6e:	18 2f       	mov	r17, r24
     e70:	83 36       	cpi	r24, 0x63	; 99
     e72:	39 f4       	brne	.+14     	; 0xe82 <get_SETTIME+0x4a>
		strcpy(lastsettime, timeset);
     e74:	be 01       	movw	r22, r28
     e76:	6f 5f       	subi	r22, 0xFF	; 255
     e78:	7f 4f       	sbci	r23, 0xFF	; 255
     e7a:	c7 01       	movw	r24, r14
     e7c:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <strcpy>
		return(ERROR);
     e80:	01 c0       	rjmp	.+2      	; 0xe84 <get_SETTIME+0x4c>
	}
	return(NOERROR);
     e82:	10 e0       	ldi	r17, 0x00	; 0
}
     e84:	81 2f       	mov	r24, r17
     e86:	2a 96       	adiw	r28, 0x0a	; 10
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	08 95       	ret

00000e98 <write_FRAM>:
	Returns:
		ERROR if start_TWI fails (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	f6 2e       	mov	r15, r22
     ea6:	17 2f       	mov	r17, r23
     ea8:	ea 01       	movw	r28, r20
     eaa:	02 2f       	mov	r16, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if (start_TWI(addr, TWIWRITE) == ERROR) {	// TWI START
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
     eb2:	83 36       	cpi	r24, 0x63	; 99
     eb4:	e1 f0       	breq	.+56     	; 0xeee <write_FRAM+0x56>
		return(ERROR);
	}

	if (write_TWI(memhigh) == ERROR) {			// FRAM address to write
     eb6:	81 2f       	mov	r24, r17
     eb8:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
     ebc:	83 36       	cpi	r24, 0x63	; 99
     ebe:	b9 f0       	breq	.+46     	; 0xeee <write_FRAM+0x56>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
     ec0:	8f 2d       	mov	r24, r15
     ec2:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
     ec6:	83 36       	cpi	r24, 0x63	; 99
     ec8:	91 f0       	breq	.+36     	; 0xeee <write_FRAM+0x56>
     eca:	10 e0       	ldi	r17, 0x00	; 0
     ecc:	0b c0       	rjmp	.+22     	; 0xee4 <write_FRAM+0x4c>
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
     ece:	7e 01       	movw	r14, r28
     ed0:	8f ef       	ldi	r24, 0xFF	; 255
     ed2:	e8 1a       	sub	r14, r24
     ed4:	f8 0a       	sbc	r15, r24
     ed6:	88 81       	ld	r24, Y
     ed8:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
     edc:	83 36       	cpi	r24, 0x63	; 99
     ede:	39 f0       	breq	.+14     	; 0xeee <write_FRAM+0x56>
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
     ee0:	1f 5f       	subi	r17, 0xFF	; 255
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
     ee2:	e7 01       	movw	r28, r14
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
     ee4:	10 17       	cp	r17, r16
     ee6:	98 f3       	brcs	.-26     	; 0xece <write_FRAM+0x36>
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
			return(ERROR);
		}
	}

	stop_TWI();
     ee8:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>

	return(NOERROR);
     eec:	80 e0       	ldi	r24, 0x00	; 0

}
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	08 95       	ret

00000efc <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     efc:	8f 92       	push	r8
     efe:	9f 92       	push	r9
     f00:	af 92       	push	r10
     f02:	bf 92       	push	r11
     f04:	cf 92       	push	r12
     f06:	df 92       	push	r13
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	00 d0       	rcall	.+0      	; 0xf16 <get_humidity+0x1a>
     f16:	00 d0       	rcall	.+0      	; 0xf18 <get_humidity+0x1c>
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62

	uint8_t adcpin;
	float voltage, humidity, temperature;

	switch (sensor) {
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	59 f0       	breq	.+22     	; 0xf36 <get_humidity+0x3a>
     f20:	18 f0       	brcs	.+6      	; 0xf28 <get_humidity+0x2c>
     f22:	82 30       	cpi	r24, 0x02	; 2
     f24:	79 f0       	breq	.+30     	; 0xf44 <get_humidity+0x48>
     f26:	15 c0       	rjmp	.+42     	; 0xf52 <get_humidity+0x56>
		case 0:
			temperature = get_temperature(0);
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	0e 94 b3 19 	call	0x3366	; 0x3366 <get_temperature>
     f2e:	6b 01       	movw	r12, r22
     f30:	7c 01       	movw	r14, r24
			adcpin = AIN0;		// production
     f32:	40 e4       	ldi	r20, 0x40	; 64
			break;
     f34:	17 c0       	rjmp	.+46     	; 0xf64 <get_humidity+0x68>

		case 1:
			temperature = get_temperature(1);
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	0e 94 b3 19 	call	0x3366	; 0x3366 <get_temperature>
     f3c:	6b 01       	movw	r12, r22
     f3e:	7c 01       	movw	r14, r24
			adcpin = AIN1;
     f40:	40 e5       	ldi	r20, 0x50	; 80
			break;
     f42:	10 c0       	rjmp	.+32     	; 0xf64 <get_humidity+0x68>

		case 2:
			temperature = get_temperature(2);
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	0e 94 b3 19 	call	0x3366	; 0x3366 <get_temperature>
     f4a:	6b 01       	movw	r12, r22
     f4c:	7c 01       	movw	r14, r24
			adcpin = AIN2;
     f4e:	40 e6       	ldi	r20, 0x60	; 96
			break;
     f50:	09 c0       	rjmp	.+18     	; 0xf64 <get_humidity+0x68>

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     f52:	0f 2e       	mov	r0, r31
     f54:	c1 2c       	mov	r12, r1
     f56:	d1 2c       	mov	r13, r1
     f58:	f0 ea       	ldi	r31, 0xA0	; 160
     f5a:	ef 2e       	mov	r14, r31
     f5c:	f1 e4       	ldi	r31, 0x41	; 65
     f5e:	ff 2e       	mov	r15, r31
     f60:	f0 2d       	mov	r31, r0
			adcpin = AIN2;
			break;

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     f62:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
     f64:	8e 01       	movw	r16, r28
     f66:	0f 5f       	subi	r16, 0xFF	; 255
     f68:	1f 4f       	sbci	r17, 0xFF	; 255
     f6a:	20 e8       	ldi	r18, 0x80	; 128
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	88 e4       	ldi	r24, 0x48	; 72
     f70:	0e 94 c8 01 	call	0x390	; 0x390 <read_ADS1115>
     f74:	83 36       	cpi	r24, 0x63	; 99
     f76:	79 f1       	breq	.+94     	; 0xfd6 <get_humidity+0xda>
		humidity = BADFLOAT;
	}
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 ea       	ldi	r20, 0xA0	; 160
     f7e:	50 e4       	ldi	r21, 0x40	; 64
     f80:	69 81       	ldd	r22, Y+1	; 0x01
     f82:	7a 81       	ldd	r23, Y+2	; 0x02
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	9c 81       	ldd	r25, Y+4	; 0x04
     f88:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <__divsf3>
     f8c:	2a e0       	ldi	r18, 0x0A	; 10
     f8e:	37 ed       	ldi	r19, 0xD7	; 215
     f90:	43 e2       	ldi	r20, 0x23	; 35
     f92:	5e e3       	ldi	r21, 0x3E	; 62
     f94:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <__subsf3>
     f98:	2f e5       	ldi	r18, 0x5F	; 95
     f9a:	39 e2       	ldi	r19, 0x29	; 41
     f9c:	4b ec       	ldi	r20, 0xCB	; 203
     f9e:	5b e3       	ldi	r21, 0x3B	; 59
     fa0:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <__divsf3>
     fa4:	4b 01       	movw	r8, r22
     fa6:	5c 01       	movw	r10, r24
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
     fa8:	29 ec       	ldi	r18, 0xC9	; 201
     faa:	3e e8       	ldi	r19, 0x8E	; 142
     fac:	4d e0       	ldi	r20, 0x0D	; 13
     fae:	5b e3       	ldi	r21, 0x3B	; 59
     fb0:	c7 01       	movw	r24, r14
     fb2:	b6 01       	movw	r22, r12
     fb4:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <__mulsf3>
     fb8:	9b 01       	movw	r18, r22
     fba:	ac 01       	movw	r20, r24
     fbc:	62 e2       	ldi	r22, 0x22	; 34
     fbe:	7d ef       	ldi	r23, 0xFD	; 253
     fc0:	86 e8       	ldi	r24, 0x86	; 134
     fc2:	9f e3       	ldi	r25, 0x3F	; 63
     fc4:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <__subsf3>
     fc8:	9b 01       	movw	r18, r22
     fca:	ac 01       	movw	r20, r24
     fcc:	c5 01       	movw	r24, r10
     fce:	b4 01       	movw	r22, r8
     fd0:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <__divsf3>
     fd4:	04 c0       	rjmp	.+8      	; 0xfde <get_humidity+0xe2>
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
		humidity = BADFLOAT;
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	70 e8       	ldi	r23, 0x80	; 128
     fda:	86 e2       	ldi	r24, 0x26	; 38
     fdc:	94 ec       	ldi	r25, 0xC4	; 196
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
	}

	return(humidity);

}
     fde:	24 96       	adiw	r28, 0x04	; 4
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	df 90       	pop	r13
     ff2:	cf 90       	pop	r12
     ff4:	bf 90       	pop	r11
     ff6:	af 90       	pop	r10
     ff8:	9f 90       	pop	r9
     ffa:	8f 90       	pop	r8
     ffc:	08 95       	ret

00000ffe <initialize>:
#include "errors.h" //TESTING

uint8_t rebootackd;

void initialize(void)
{
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	2b 97       	sbiw	r28, 0x0b	; 11
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	rebootackd = NO;
    100c:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <rebootackd>
	timerOLED = 0;					// See oled.h
    1010:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED>
    1014:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED+0x1>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
    1018:	80 ee       	ldi	r24, 0xE0	; 224
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	80 93 0e 2a 	sts	0x2A0E, r24	; 0x802a0e <timeoutOLED>
    1020:	90 93 0f 2a 	sts	0x2A0F, r25	; 0x802a0f <timeoutOLED+0x1>

	init_PORTS();
    1024:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <init_PORTS>
	init_TWI();
    1028:	0e 94 23 1a 	call	0x3446	; 0x3446 <init_TWI>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
    102c:	80 e2       	ldi	r24, 0x20	; 32
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 26 19 	call	0x324c	; 0x324c <init_RTC>
	init_MMA8451();	// Accelerometer; needs TWI
    1034:	0e 94 b1 0a 	call	0x1562	; 0x1562 <init_MMA8451>
	init_OLED();	// Needs TWI
    1038:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <init_OLED>
	init_EEPROM();	// Needs TWI to get boot time from clock
    103c:	0e 94 93 06 	call	0xd26	; 0xd26 <init_EEPROM>
	init_USART();
    1040:	0e 94 28 1b 	call	0x3650	; 0x3650 <init_USART>
	sei();
    1044:	78 94       	sei

	init_MOTORS();	// Needs USART & interrupts on
    1046:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <init_MOTORS>
	get_VERSION(versionstr);
    104a:	ce 01       	movw	r24, r28
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	0e 94 55 06 	call	0xcaa	; 0xcaa <get_VERSION>
	writestr_OLED(0,"specMech Version", 1);
    1052:	41 e0       	ldi	r20, 0x01	; 1
    1054:	67 ee       	ldi	r22, 0xE7	; 231
    1056:	7c e8       	ldi	r23, 0x8C	; 140
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	0e 94 01 0c 	call	0x1802	; 0x1802 <writestr_OLED>
	writestr_OLED(0, versionstr, 2);
    105e:	42 e0       	ldi	r20, 0x02	; 2
    1060:	be 01       	movw	r22, r28
    1062:	6f 5f       	subi	r22, 0xFF	; 255
    1064:	7f 4f       	sbci	r23, 0xFF	; 255
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	0e 94 01 0c 	call	0x1802	; 0x1802 <writestr_OLED>

}
    106c:	2b 96       	adiw	r28, 0x0b	; 11
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	08 95       	ret

00001078 <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
    1078:	cf 92       	push	r12
    107a:	df 92       	push	r13
    107c:	ef 92       	push	r14
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	00 d0       	rcall	.+0      	; 0x108a <read_ionpump+0x12>
    108a:	00 d0       	rcall	.+0      	; 0x108c <read_ionpump+0x14>
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	21 f0       	breq	.+8      	; 0x109c <read_ionpump+0x24>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
    1094:	82 30       	cpi	r24, 0x02	; 2
    1096:	c1 f5       	brne	.+112    	; 0x1108 <read_ionpump+0x90>
		pins = AIN23;
    1098:	40 e3       	ldi	r20, 0x30	; 48
    109a:	01 c0       	rjmp	.+2      	; 0x109e <read_ionpump+0x26>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
    109c:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(BADFLOAT);
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
    109e:	8e 01       	movw	r16, r28
    10a0:	0f 5f       	subi	r16, 0xFF	; 255
    10a2:	1f 4f       	sbci	r17, 0xFF	; 255
    10a4:	20 e8       	ldi	r18, 0x80	; 128
    10a6:	62 e0       	ldi	r22, 0x02	; 2
    10a8:	89 e4       	ldi	r24, 0x49	; 73
    10aa:	0e 94 c8 01 	call	0x390	; 0x390 <read_ADS1115>
    10ae:	83 36       	cpi	r24, 0x63	; 99
    10b0:	81 f1       	breq	.+96     	; 0x1112 <read_ionpump+0x9a>
		return(BADFLOAT);
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
    10b2:	c9 80       	ldd	r12, Y+1	; 0x01
    10b4:	da 80       	ldd	r13, Y+2	; 0x02
    10b6:	eb 80       	ldd	r14, Y+3	; 0x03
    10b8:	fc 80       	ldd	r15, Y+4	; 0x04
    10ba:	2d ec       	ldi	r18, 0xCD	; 205
    10bc:	3c ec       	ldi	r19, 0xCC	; 204
    10be:	4c ec       	ldi	r20, 0xCC	; 204
    10c0:	5e e3       	ldi	r21, 0x3E	; 62
    10c2:	c7 01       	movw	r24, r14
    10c4:	b6 01       	movw	r22, r12
    10c6:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__cmpsf2>
    10ca:	88 23       	and	r24, r24
    10cc:	3c f1       	brlt	.+78     	; 0x111c <read_ionpump+0xa4>
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	50 e4       	ldi	r21, 0x40	; 64
    10d6:	c7 01       	movw	r24, r14
    10d8:	b6 01       	movw	r22, r12
    10da:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <__gesf2>
    10de:	18 16       	cp	r1, r24
    10e0:	14 f1       	brlt	.+68     	; 0x1126 <read_ionpump+0xae>
		return(BADFLOAT);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    10e2:	29 e7       	ldi	r18, 0x79	; 121
    10e4:	39 ee       	ldi	r19, 0xE9	; 233
    10e6:	42 e0       	ldi	r20, 0x02	; 2
    10e8:	50 e4       	ldi	r21, 0x40	; 64
    10ea:	c7 01       	movw	r24, r14
    10ec:	b6 01       	movw	r22, r12
    10ee:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <__mulsf3>
    10f2:	2e e6       	ldi	r18, 0x6E	; 110
    10f4:	33 ea       	ldi	r19, 0xA3	; 163
    10f6:	4b ed       	ldi	r20, 0xDB	; 219
    10f8:	50 e4       	ldi	r21, 0x40	; 64
    10fa:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <__subsf3>
	return(vacuum);
    10fe:	56 2f       	mov	r21, r22
    1100:	47 2f       	mov	r20, r23
    1102:	38 2f       	mov	r19, r24
    1104:	29 2f       	mov	r18, r25
    1106:	13 c0       	rjmp	.+38     	; 0x112e <read_ionpump+0xb6>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(BADFLOAT);
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	40 e8       	ldi	r20, 0x80	; 128
    110c:	36 e2       	ldi	r19, 0x26	; 38
    110e:	24 ec       	ldi	r18, 0xC4	; 196
    1110:	0e c0       	rjmp	.+28     	; 0x112e <read_ionpump+0xb6>
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
		return(BADFLOAT);
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	40 e8       	ldi	r20, 0x80	; 128
    1116:	36 e2       	ldi	r19, 0x26	; 38
    1118:	24 ec       	ldi	r18, 0xC4	; 196
    111a:	09 c0       	rjmp	.+18     	; 0x112e <read_ionpump+0xb6>
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	40 e8       	ldi	r20, 0x80	; 128
    1120:	36 e2       	ldi	r19, 0x26	; 38
    1122:	24 ec       	ldi	r18, 0xC4	; 196
    1124:	04 c0       	rjmp	.+8      	; 0x112e <read_ionpump+0xb6>
	} else if (voltage > 2.0) {
		return(BADFLOAT);
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	40 e8       	ldi	r20, 0x80	; 128
    112a:	36 e2       	ldi	r19, 0x26	; 38
    112c:	24 ec       	ldi	r18, 0xC4	; 196
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
    112e:	65 2f       	mov	r22, r21
    1130:	74 2f       	mov	r23, r20
    1132:	83 2f       	mov	r24, r19
    1134:	92 2f       	mov	r25, r18
    1136:	24 96       	adiw	r28, 0x04	; 4
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	08 95       	ret

0000114e <main>:
void read_PNEUSensors(char*, char*, char*, char*);	//TESTING

int main(void)
{

	firstpass = YES;		// Set to NO in commands.c
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	80 93 0b 2a 	sts	0x2A0B, r24	; 0x802a0b <firstpass>
	squelchErrors = YES;	// Don't need this?
    1154:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <squelchErrors>
	initialize();
    1158:	0e 94 ff 07 	call	0xffe	; 0xffe <initialize>
	squelchErrors = NO;
    115c:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <squelchErrors>

	for (;;) {
		if (recv0_buf.done) {
    1160:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <recv0_buf+0x103>
    1164:	88 23       	and	r24, r24
    1166:	21 f0       	breq	.+8      	; 0x1170 <main+0x22>
			recv0_buf.done = NO;
    1168:	10 92 20 2c 	sts	0x2C20, r1	; 0x802c20 <recv0_buf+0x103>
			commands();
    116c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <commands>
		}
		if (timerOLED > timeoutOLED) {	// Display timeout
    1170:	20 91 0c 2a 	lds	r18, 0x2A0C	; 0x802a0c <timerOLED>
    1174:	30 91 0d 2a 	lds	r19, 0x2A0D	; 0x802a0d <timerOLED+0x1>
    1178:	80 91 0e 2a 	lds	r24, 0x2A0E	; 0x802a0e <timeoutOLED>
    117c:	90 91 0f 2a 	lds	r25, 0x2A0F	; 0x802a0f <timeoutOLED+0x1>
    1180:	82 17       	cp	r24, r18
    1182:	93 07       	cpc	r25, r19
    1184:	78 f4       	brcc	.+30     	; 0x11a4 <main+0x56>
			squelchErrors = YES;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <squelchErrors>
			clear_OLED(0);
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <clear_OLED>
			clear_OLED(1);
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <clear_OLED>
			timerOLED = 0;
    1198:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED>
    119c:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED+0x1>
			squelchErrors = NO;
    11a0:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <squelchErrors>
		} if ((timerSAVEENCODER > timeoutSAVEENCODER) && rebootackd) {
    11a4:	90 91 16 2a 	lds	r25, 0x2A16	; 0x802a16 <timerSAVEENCODER>
    11a8:	80 91 11 2a 	lds	r24, 0x2A11	; 0x802a11 <timeoutSAVEENCODER>
    11ac:	89 17       	cp	r24, r25
    11ae:	c0 f6       	brcc	.-80     	; 0x1160 <main+0x12>
    11b0:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <rebootackd>
    11b4:	88 23       	and	r24, r24
    11b6:	a1 f2       	breq	.-88     	; 0x1160 <main+0x12>
			squelchErrors = YES;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <squelchErrors>
			putFRAM_MOTOREncoder(128);
    11be:	80 e8       	ldi	r24, 0x80	; 128
    11c0:	0e 94 56 18 	call	0x30ac	; 0x30ac <putFRAM_MOTOREncoder>
			timerSAVEENCODER = 0;
    11c4:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerSAVEENCODER>
			squelchErrors = NO;
    11c8:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <squelchErrors>
    11cc:	c9 cf       	rjmp	.-110    	; 0x1160 <main+0x12>

000011ce <read_MCP23008>:
	Returns:
		ERROR if TWI error
		NOERROR Otherwise
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	c8 2f       	mov	r28, r24
    11d4:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
    11dc:	83 36       	cpi	r24, 0x63	; 99
    11de:	51 f4       	brne	.+20     	; 0x11f4 <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 read error");
    11e0:	68 ef       	ldi	r22, 0xF8	; 248
    11e2:	7c e8       	ldi	r23, 0x8C	; 140
    11e4:	82 e9       	ldi	r24, 0x92	; 146
    11e6:	91 e0       	ldi	r25, 0x01	; 1
    11e8:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		stop_TWI();
    11ec:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(0xFF);
    11f0:	8f ef       	ldi	r24, 0xFF	; 255
    11f2:	19 c0       	rjmp	.+50     	; 0x1226 <read_MCP23008+0x58>
	}
	write_TWI(reg);
    11f4:	8d 2f       	mov	r24, r29
    11f6:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
	if (start_TWI(addr, TWIREAD) == ERROR) {
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	8c 2f       	mov	r24, r28
    11fe:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
    1202:	83 36       	cpi	r24, 0x63	; 99
    1204:	51 f4       	brne	.+20     	; 0x121a <read_MCP23008+0x4c>
		printError(ERR_MCP23008, "MCP23008 read error");
    1206:	68 ef       	ldi	r22, 0xF8	; 248
    1208:	7c e8       	ldi	r23, 0x8C	; 140
    120a:	82 e9       	ldi	r24, 0x92	; 146
    120c:	91 e0       	ldi	r25, 0x01	; 1
    120e:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		stop_TWI();
    1212:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(0xFF);
    1216:	8f ef       	ldi	r24, 0xFF	; 255
    1218:	06 c0       	rjmp	.+12     	; 0x1226 <read_MCP23008+0x58>
	}
	value = readlast_TWI();
    121a:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <readlast_TWI>
    121e:	c8 2f       	mov	r28, r24
	stop_TWI();
    1220:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
	return(value);
    1224:	8c 2f       	mov	r24, r28

}
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	08 95       	ret

0000122c <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	d6 2f       	mov	r29, r22
    1234:	14 2f       	mov	r17, r20

	uint8_t retval;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
    123c:	c8 2f       	mov	r28, r24
    123e:	83 36       	cpi	r24, 0x63	; 99
    1240:	49 f4       	brne	.+18     	; 0x1254 <write_MCP23008+0x28>
		printError(ERR_MCP23008, "MCP23008 write error");
    1242:	6c e0       	ldi	r22, 0x0C	; 12
    1244:	7d e8       	ldi	r23, 0x8D	; 141
    1246:	82 e9       	ldi	r24, 0x92	; 146
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		stop_TWI();
    124e:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(ERROR);
    1252:	15 c0       	rjmp	.+42     	; 0x127e <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(reg))) {
    1254:	8d 2f       	mov	r24, r29
    1256:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
    125a:	88 23       	and	r24, r24
    125c:	21 f0       	breq	.+8      	; 0x1266 <write_MCP23008+0x3a>
		stop_TWI();
    125e:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(ERROR);
    1262:	c3 e6       	ldi	r28, 0x63	; 99
    1264:	0c c0       	rjmp	.+24     	; 0x127e <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(val))) {
    1266:	81 2f       	mov	r24, r17
    1268:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
    126c:	88 23       	and	r24, r24
    126e:	21 f0       	breq	.+8      	; 0x1278 <write_MCP23008+0x4c>
		stop_TWI();
    1270:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(ERROR);
    1274:	c3 e6       	ldi	r28, 0x63	; 99
    1276:	03 c0       	rjmp	.+6      	; 0x127e <write_MCP23008+0x52>
	}
	stop_TWI();
    1278:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
	return(NOERROR);
    127c:	c0 e0       	ldi	r28, 0x00	; 0
	
}
    127e:	8c 2f       	mov	r24, r28
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	08 95       	ret

00001288 <read_MCP9808>:
#include "errors.h"
#include "mcp9808.h"
#include "twi.h"

uint8_t read_MCP9808(float *temperature)
{
    1288:	8f 92       	push	r8
    128a:	9f 92       	push	r9
    128c:	af 92       	push	r10
    128e:	bf 92       	push	r11
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	8c 01       	movw	r16, r24

	uint8_t highbyte, lowbyte, sign;
	float temp;

	if (start_TWI(MCP9808ADDR, TWIWRITE) == ERROR) {
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	88 e1       	ldi	r24, 0x18	; 24
    12a0:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
    12a4:	83 36       	cpi	r24, 0x63	; 99
    12a6:	51 f4       	brne	.+20     	; 0x12bc <read_MCP9808+0x34>
		*temperature = BADFLOAT;
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	50 e8       	ldi	r21, 0x80	; 128
    12ac:	66 e2       	ldi	r22, 0x26	; 38
    12ae:	74 ec       	ldi	r23, 0xC4	; 196
    12b0:	f8 01       	movw	r30, r16
    12b2:	40 83       	st	Z, r20
    12b4:	51 83       	std	Z+1, r21	; 0x01
    12b6:	62 83       	std	Z+2, r22	; 0x02
    12b8:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    12ba:	43 c0       	rjmp	.+134    	; 0x1342 <read_MCP9808+0xba>
	}
	write_TWI(TEMPREGISTER);
    12bc:	85 e0       	ldi	r24, 0x05	; 5
    12be:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    12c2:	61 e0       	ldi	r22, 0x01	; 1
    12c4:	88 e1       	ldi	r24, 0x18	; 24
    12c6:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
	highbyte = read_TWI();
    12ca:	0e 94 2e 1a 	call	0x345c	; 0x345c <read_TWI>
    12ce:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    12d0:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <readlast_TWI>
    12d4:	d8 2f       	mov	r29, r24
	stop_TWI();
    12d6:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    12da:	fc 2f       	mov	r31, r28
    12dc:	f0 71       	andi	r31, 0x10	; 16
    12de:	ff 2e       	mov	r15, r31
	highbyte &= 0x0F;					// Clear threshold & sign bits
    12e0:	6c 2f       	mov	r22, r28
    12e2:	6f 70       	andi	r22, 0x0F	; 15
	temp = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <__floatunsisf>
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	40 e8       	ldi	r20, 0x80	; 128
    12f4:	51 e4       	ldi	r21, 0x41	; 65
    12f6:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <__mulsf3>
    12fa:	4b 01       	movw	r8, r22
    12fc:	5c 01       	movw	r10, r24
    12fe:	6d 2f       	mov	r22, r29
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <__floatunsisf>
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e8       	ldi	r20, 0x80	; 128
    1310:	5d e3       	ldi	r21, 0x3D	; 61
    1312:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <__mulsf3>
    1316:	9b 01       	movw	r18, r22
    1318:	ac 01       	movw	r20, r24
    131a:	c5 01       	movw	r24, r10
    131c:	b4 01       	movw	r22, r8
    131e:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__addsf3>
	if (sign) {
    1322:	ff 20       	and	r15, r15
    1324:	41 f0       	breq	.+16     	; 0x1336 <read_MCP9808+0xae>
		temp = 256.0 - temp;
    1326:	9b 01       	movw	r18, r22
    1328:	ac 01       	movw	r20, r24
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	80 e8       	ldi	r24, 0x80	; 128
    1330:	93 e4       	ldi	r25, 0x43	; 67
    1332:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <__subsf3>
	}
	*temperature = temp;
    1336:	f8 01       	movw	r30, r16
    1338:	60 83       	st	Z, r22
    133a:	71 83       	std	Z+1, r23	; 0x01
    133c:	82 83       	std	Z+2, r24	; 0x02
    133e:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    1340:	80 e0       	ldi	r24, 0x00	; 0
}
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	bf 90       	pop	r11
    134e:	af 90       	pop	r10
    1350:	9f 90       	pop	r9
    1352:	8f 90       	pop	r8
    1354:	08 95       	ret

00001356 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    1356:	ef 92       	push	r14
    1358:	ff 92       	push	r15
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	f8 2e       	mov	r15, r24
    1364:	e6 2e       	mov	r14, r22
    1366:	ea 01       	movw	r28, r20
    1368:	02 2f       	mov	r16, r18

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
    1370:	18 2f       	mov	r17, r24
    1372:	83 36       	cpi	r24, 0x63	; 99
    1374:	19 f4       	brne	.+6      	; 0x137c <read_MMA8451+0x26>
		stop_TWI();
    1376:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(ERROR);
    137a:	23 c0       	rjmp	.+70     	; 0x13c2 <read_MMA8451+0x6c>
	}
	if (write_TWI(reg) == ERROR) {
    137c:	8e 2d       	mov	r24, r14
    137e:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
    1382:	18 2f       	mov	r17, r24
    1384:	83 36       	cpi	r24, 0x63	; 99
    1386:	e9 f0       	breq	.+58     	; 0x13c2 <read_MMA8451+0x6c>
		return(ERROR);
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
    1388:	61 e0       	ldi	r22, 0x01	; 1
    138a:	8f 2d       	mov	r24, r15
    138c:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
    1390:	18 2f       	mov	r17, r24
    1392:	83 36       	cpi	r24, 0x63	; 99
    1394:	69 f4       	brne	.+26     	; 0x13b0 <read_MMA8451+0x5a>
		stop_TWI();
    1396:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(ERROR);
    139a:	13 c0       	rjmp	.+38     	; 0x13c2 <read_MMA8451+0x6c>
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    139c:	7e 01       	movw	r14, r28
    139e:	8f ef       	ldi	r24, 0xFF	; 255
    13a0:	e8 1a       	sub	r14, r24
    13a2:	f8 0a       	sbc	r15, r24
    13a4:	0e 94 2e 1a 	call	0x345c	; 0x345c <read_TWI>
    13a8:	88 83       	st	Y, r24
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    13aa:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    13ac:	e7 01       	movw	r28, r14
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <read_MMA8451+0x5c>
    13b0:	11 e0       	ldi	r17, 0x01	; 1
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    13b2:	10 17       	cp	r17, r16
    13b4:	98 f3       	brcs	.-26     	; 0x139c <read_MMA8451+0x46>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    13b6:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <readlast_TWI>
    13ba:	88 83       	st	Y, r24
	stop_TWI();
    13bc:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
	return(NOERROR);
    13c0:	10 e0       	ldi	r17, 0x00	; 0

}
    13c2:	81 2f       	mov	r24, r17
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	1f 91       	pop	r17
    13ca:	0f 91       	pop	r16
    13cc:	ff 90       	pop	r15
    13ce:	ef 90       	pop	r14
    13d0:	08 95       	ret

000013d2 <get_orientation>:
uint8_t get_orientation(float *x, float *y, float *z)
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
uint8_t get_orientation(float *x, float *y, float *z)
{
    13d2:	cf 92       	push	r12
    13d4:	df 92       	push	r13
    13d6:	ef 92       	push	r14
    13d8:	ff 92       	push	r15
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	26 97       	sbiw	r28, 0x06	; 6
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	6c 01       	movw	r12, r24
    13ee:	7b 01       	movw	r14, r22
    13f0:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = BADFLOAT;
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	90 e8       	ldi	r25, 0x80	; 128
    13f6:	a6 e2       	ldi	r26, 0x26	; 38
    13f8:	b4 ec       	ldi	r27, 0xC4	; 196
    13fa:	fa 01       	movw	r30, r20
    13fc:	80 83       	st	Z, r24
    13fe:	91 83       	std	Z+1, r25	; 0x01
    1400:	a2 83       	std	Z+2, r26	; 0x02
    1402:	b3 83       	std	Z+3, r27	; 0x03
    1404:	fb 01       	movw	r30, r22
    1406:	80 83       	st	Z, r24
    1408:	91 83       	std	Z+1, r25	; 0x01
    140a:	a2 83       	std	Z+2, r26	; 0x02
    140c:	b3 83       	std	Z+3, r27	; 0x03
    140e:	f6 01       	movw	r30, r12
    1410:	80 83       	st	Z, r24
    1412:	91 83       	std	Z+1, r25	; 0x01
    1414:	a2 83       	std	Z+2, r26	; 0x02
    1416:	b3 83       	std	Z+3, r27	; 0x03

	if (read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6) == ERROR) {
    1418:	26 e0       	ldi	r18, 0x06	; 6
    141a:	ae 01       	movw	r20, r28
    141c:	4f 5f       	subi	r20, 0xFF	; 255
    141e:	5f 4f       	sbci	r21, 0xFF	; 255
    1420:	61 e0       	ldi	r22, 0x01	; 1
    1422:	8d e1       	ldi	r24, 0x1D	; 29
    1424:	0e 94 ab 09 	call	0x1356	; 0x1356 <read_MMA8451>
    1428:	83 36       	cpi	r24, 0x63	; 99
    142a:	09 f4       	brne	.+2      	; 0x142e <get_orientation+0x5c>
    142c:	64 c0       	rjmp	.+200    	; 0x14f6 <get_orientation+0x124>
		return(ERROR);
	}

	ix = datain[0];
    142e:	69 81       	ldd	r22, Y+1	; 0x01
    1430:	70 e0       	ldi	r23, 0x00	; 0
	ix <<= 8;
    1432:	76 2f       	mov	r23, r22
    1434:	66 27       	eor	r22, r22
	ix |= datain[1];
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	68 2b       	or	r22, r24
	ix >>= 2;
    143a:	75 95       	asr	r23
    143c:	67 95       	ror	r22
    143e:	75 95       	asr	r23
    1440:	67 95       	ror	r22
	*x = 980.6 * ((float) ix/4096.0);
    1442:	07 2e       	mov	r0, r23
    1444:	00 0c       	add	r0, r0
    1446:	88 0b       	sbc	r24, r24
    1448:	99 0b       	sbc	r25, r25
    144a:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__floatsisf>
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e8       	ldi	r20, 0x80	; 128
    1454:	59 e3       	ldi	r21, 0x39	; 57
    1456:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <__mulsf3>
    145a:	26 e6       	ldi	r18, 0x66	; 102
    145c:	36 e2       	ldi	r19, 0x26	; 38
    145e:	45 e7       	ldi	r20, 0x75	; 117
    1460:	54 e4       	ldi	r21, 0x44	; 68
    1462:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <__mulsf3>
    1466:	f6 01       	movw	r30, r12
    1468:	60 83       	st	Z, r22
    146a:	71 83       	std	Z+1, r23	; 0x01
    146c:	82 83       	std	Z+2, r24	; 0x02
    146e:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    1470:	6b 81       	ldd	r22, Y+3	; 0x03
    1472:	70 e0       	ldi	r23, 0x00	; 0
	iy <<= 8;
    1474:	76 2f       	mov	r23, r22
    1476:	66 27       	eor	r22, r22
	iy |= datain[3];
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	68 2b       	or	r22, r24
	iy >>= 2;
    147c:	75 95       	asr	r23
    147e:	67 95       	ror	r22
    1480:	75 95       	asr	r23
    1482:	67 95       	ror	r22
	*y = 980.6 * ((float) iy/4096.0);
    1484:	07 2e       	mov	r0, r23
    1486:	00 0c       	add	r0, r0
    1488:	88 0b       	sbc	r24, r24
    148a:	99 0b       	sbc	r25, r25
    148c:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__floatsisf>
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e8       	ldi	r20, 0x80	; 128
    1496:	59 e3       	ldi	r21, 0x39	; 57
    1498:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <__mulsf3>
    149c:	26 e6       	ldi	r18, 0x66	; 102
    149e:	36 e2       	ldi	r19, 0x26	; 38
    14a0:	45 e7       	ldi	r20, 0x75	; 117
    14a2:	54 e4       	ldi	r21, 0x44	; 68
    14a4:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <__mulsf3>
    14a8:	f7 01       	movw	r30, r14
    14aa:	60 83       	st	Z, r22
    14ac:	71 83       	std	Z+1, r23	; 0x01
    14ae:	82 83       	std	Z+2, r24	; 0x02
    14b0:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    14b2:	6d 81       	ldd	r22, Y+5	; 0x05
    14b4:	70 e0       	ldi	r23, 0x00	; 0
	iz <<= 8;
    14b6:	76 2f       	mov	r23, r22
    14b8:	66 27       	eor	r22, r22
	iz |= datain[5];
    14ba:	8e 81       	ldd	r24, Y+6	; 0x06
    14bc:	68 2b       	or	r22, r24
	iz >>= 2;
    14be:	75 95       	asr	r23
    14c0:	67 95       	ror	r22
    14c2:	75 95       	asr	r23
    14c4:	67 95       	ror	r22
	*z = 980.6 * ((float) iz/4096.0);
    14c6:	07 2e       	mov	r0, r23
    14c8:	00 0c       	add	r0, r0
    14ca:	88 0b       	sbc	r24, r24
    14cc:	99 0b       	sbc	r25, r25
    14ce:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__floatsisf>
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e8       	ldi	r20, 0x80	; 128
    14d8:	59 e3       	ldi	r21, 0x39	; 57
    14da:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <__mulsf3>
    14de:	26 e6       	ldi	r18, 0x66	; 102
    14e0:	36 e2       	ldi	r19, 0x26	; 38
    14e2:	45 e7       	ldi	r20, 0x75	; 117
    14e4:	54 e4       	ldi	r21, 0x44	; 68
    14e6:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <__mulsf3>
    14ea:	f8 01       	movw	r30, r16
    14ec:	60 83       	st	Z, r22
    14ee:	71 83       	std	Z+1, r23	; 0x01
    14f0:	82 83       	std	Z+2, r24	; 0x02
    14f2:	93 83       	std	Z+3, r25	; 0x03

	return(0);
    14f4:	80 e0       	ldi	r24, 0x00	; 0

}
    14f6:	26 96       	adiw	r28, 0x06	; 6
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	ff 90       	pop	r15
    1506:	ef 90       	pop	r14
    1508:	df 90       	pop	r13
    150a:	cf 90       	pop	r12
    150c:	08 95       	ret

0000150e <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	d6 2f       	mov	r29, r22
    1516:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
    151e:	c8 2f       	mov	r28, r24
    1520:	88 23       	and	r24, r24
    1522:	21 f0       	breq	.+8      	; 0x152c <write_MMA8451+0x1e>
		stop_TWI();
    1524:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(retval);
    1528:	8c 2f       	mov	r24, r28
    152a:	17 c0       	rjmp	.+46     	; 0x155a <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    152c:	8d 2f       	mov	r24, r29
    152e:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
    1532:	c8 2f       	mov	r28, r24
    1534:	88 23       	and	r24, r24
    1536:	21 f0       	breq	.+8      	; 0x1540 <write_MMA8451+0x32>
		stop_TWI();
    1538:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(retval);
    153c:	8c 2f       	mov	r24, r28
    153e:	0d c0       	rjmp	.+26     	; 0x155a <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1540:	81 2f       	mov	r24, r17
    1542:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
    1546:	c8 2f       	mov	r28, r24
    1548:	88 23       	and	r24, r24
    154a:	21 f0       	breq	.+8      	; 0x1554 <write_MMA8451+0x46>
		stop_TWI();
    154c:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
		return(retval);
    1550:	8c 2f       	mov	r24, r28
    1552:	03 c0       	rjmp	.+6      	; 0x155a <write_MMA8451+0x4c>
	}
	stop_TWI();
    1554:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>
	return(0);
    1558:	80 e0       	ldi	r24, 0x00	; 0
	
}
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	1f 91       	pop	r17
    1560:	08 95       	ret

00001562 <init_MMA8451>:
	sampling frequency (1.56 Hz), a low cutoff frequency on the high pass
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/
uint8_t init_MMA8451(void)
{
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	1f 92       	push	r1
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    156c:	40 e4       	ldi	r20, 0x40	; 64
    156e:	6b e2       	ldi	r22, 0x2B	; 43
    1570:	8d e1       	ldi	r24, 0x1D	; 29
    1572:	0e 94 87 0a 	call	0x150e	; 0x150e <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    1576:	21 e0       	ldi	r18, 0x01	; 1
    1578:	ae 01       	movw	r20, r28
    157a:	4f 5f       	subi	r20, 0xFF	; 255
    157c:	5f 4f       	sbci	r21, 0xFF	; 255
    157e:	6b e2       	ldi	r22, 0x2B	; 43
    1580:	8d e1       	ldi	r24, 0x1D	; 29
    1582:	0e 94 ab 09 	call	0x1356	; 0x1356 <read_MMA8451>
	while (retval & 0x40) {
    1586:	08 c0       	rjmp	.+16     	; 0x1598 <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    1588:	21 e0       	ldi	r18, 0x01	; 1
    158a:	ae 01       	movw	r20, r28
    158c:	4f 5f       	subi	r20, 0xFF	; 255
    158e:	5f 4f       	sbci	r21, 0xFF	; 255
    1590:	6b e2       	ldi	r22, 0x2B	; 43
    1592:	8d e1       	ldi	r24, 0x1D	; 29
    1594:	0e 94 ab 09 	call	0x1356	; 0x1356 <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	86 fd       	sbrc	r24, 6
    159c:	f5 cf       	rjmp	.-22     	; 0x1588 <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    159e:	40 ec       	ldi	r20, 0xC0	; 192
    15a0:	6f e0       	ldi	r22, 0x0F	; 15
    15a2:	8d e1       	ldi	r24, 0x1D	; 29
    15a4:	0e 94 87 0a 	call	0x150e	; 0x150e <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    15a8:	42 e0       	ldi	r20, 0x02	; 2
    15aa:	6b e2       	ldi	r22, 0x2B	; 43
    15ac:	8d e1       	ldi	r24, 0x1D	; 29
    15ae:	0e 94 87 0a 	call	0x150e	; 0x150e <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    15b2:	4d e3       	ldi	r20, 0x3D	; 61
    15b4:	6a e2       	ldi	r22, 0x2A	; 42
    15b6:	8d e1       	ldi	r24, 0x1D	; 29
    15b8:	0e 94 87 0a 	call	0x150e	; 0x150e <write_MMA8451>

	return(retval);

}
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	0f 90       	pop	r0
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	08 95       	ret

000015c6 <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum and \r\n to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	2e 97       	sbiw	r28, 0x0e	; 14
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    15de:	88 e0       	ldi	r24, 0x08	; 8
    15e0:	e1 e2       	ldi	r30, 0x21	; 33
    15e2:	fd e8       	ldi	r31, 0x8D	; 141
    15e4:	de 01       	movw	r26, r28
    15e6:	11 96       	adiw	r26, 0x01	; 1
    15e8:	01 90       	ld	r0, Z+
    15ea:	0d 92       	st	X+, r0
    15ec:	8a 95       	dec	r24
    15ee:	e1 f7       	brne	.-8      	; 0x15e8 <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    15f0:	f8 01       	movw	r30, r16
    15f2:	01 90       	ld	r0, Z+
    15f4:	00 20       	and	r0, r0
    15f6:	e9 f7       	brne	.-6      	; 0x15f2 <checksum_NMEA+0x2c>
    15f8:	31 97       	sbiw	r30, 0x01	; 1
    15fa:	3e 2f       	mov	r19, r30
    15fc:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    15fe:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	06 c0       	rjmp	.+12     	; 0x1610 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    1604:	f8 01       	movw	r30, r16
    1606:	e8 0f       	add	r30, r24
    1608:	f1 1d       	adc	r31, r1
    160a:	20 81       	ld	r18, Z
    160c:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    160e:	8f 5f       	subi	r24, 0xFF	; 255
    1610:	83 17       	cp	r24, r19
    1612:	c0 f3       	brcs	.-16     	; 0x1604 <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1614:	1f 92       	push	r1
    1616:	9f 93       	push	r25
    1618:	ce 01       	movw	r24, r28
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	9f 93       	push	r25
    161e:	8f 93       	push	r24
    1620:	7e 01       	movw	r14, r28
    1622:	89 e0       	ldi	r24, 0x09	; 9
    1624:	e8 0e       	add	r14, r24
    1626:	f1 1c       	adc	r15, r1
    1628:	ff 92       	push	r15
    162a:	ef 92       	push	r14
    162c:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
	strcat(str, chksum);
    1630:	b7 01       	movw	r22, r14
    1632:	c8 01       	movw	r24, r16
    1634:	0e 94 ee 24 	call	0x49dc	; 0x49dc <strcat>

}
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	2e 96       	adiw	r28, 0x0e	; 14
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	ff 90       	pop	r15
    1654:	ef 90       	pop	r14
    1656:	08 95       	ret

00001658 <reset_OLED>:
void reset_OLED(void)
	Pulls the OLED display reset line low for 1 ms. This seems to be needed.
------------------------------------------------------------------------------*/
void reset_OLED(void)
{
	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    1658:	e0 e6       	ldi	r30, 0x60	; 96
    165a:	f4 e0       	ldi	r31, 0x04	; 4
    165c:	80 e4       	ldi	r24, 0x40	; 64
    165e:	86 83       	std	Z+6, r24	; 0x06
	PORTD.DIRSET = PIN6_bm;
    1660:	81 83       	std	Z+1, r24	; 0x01
    1662:	a1 e4       	ldi	r26, 0x41	; 65
    1664:	b3 e0       	ldi	r27, 0x03	; 3
    1666:	11 97       	sbiw	r26, 0x01	; 1
    1668:	f1 f7       	brne	.-4      	; 0x1666 <reset_OLED+0xe>
    166a:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    166c:	85 83       	std	Z+5, r24	; 0x05
    166e:	08 95       	ret

00001670 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	d6 2f       	mov	r29, r22
    1676:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <start_TWI>
	write_TWI(type);
    167e:	8d 2f       	mov	r24, r29
    1680:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
	write_TWI(byteToSend);
    1684:	8c 2f       	mov	r24, r28
    1686:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <write_TWI>
	stop_TWI();
    168a:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <stop_TWI>

}
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <init_OLEDDISPLAY>:
	Initialize a Newhaven NHD-0216AW-1B3 OLED display. This is taken straight
	from https://github.com/NewhavenDisplay/NHD_US2066. The manual is not easy
	to understand but this seems to work.
------------------------------------------------------------------------------*/
void init_OLEDDISPLAY(uint8_t displaynumber)
{
    1694:	cf 93       	push	r28

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
    1696:	88 23       	and	r24, r24
    1698:	29 f0       	breq	.+10     	; 0x16a4 <init_OLEDDISPLAY+0x10>
		twiaddr = OLEDADDR0;		
	} else if (displaynumber == 1) {	// Left-side display
    169a:	81 30       	cpi	r24, 0x01	; 1
    169c:	09 f0       	breq	.+2      	; 0x16a0 <init_OLEDDISPLAY+0xc>
    169e:	9e c0       	rjmp	.+316    	; 0x17dc <init_OLEDDISPLAY+0x148>
		twiaddr = OLEDADDR1;
    16a0:	cd e3       	ldi	r28, 0x3D	; 61
    16a2:	01 c0       	rjmp	.+2      	; 0x16a6 <init_OLEDDISPLAY+0x12>
{

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
		twiaddr = OLEDADDR0;		
    16a4:	cc e3       	ldi	r28, 0x3C	; 60
		twiaddr = OLEDADDR1;
	} else {
		return;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    16a6:	4a e2       	ldi	r20, 0x2A	; 42
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	8c 2f       	mov	r24, r28
    16ac:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    16b0:	41 e7       	ldi	r20, 0x71	; 113
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	8c 2f       	mov	r24, r28
    16b6:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    16ba:	4c e5       	ldi	r20, 0x5C	; 92
    16bc:	60 e4       	ldi	r22, 0x40	; 64
    16be:	8c 2f       	mov	r24, r28
    16c0:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    16c4:	48 e2       	ldi	r20, 0x28	; 40
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	8c 2f       	mov	r24, r28
    16ca:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    16ce:	48 e0       	ldi	r20, 0x08	; 8
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	8c 2f       	mov	r24, r28
    16d4:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    16d8:	4a e2       	ldi	r20, 0x2A	; 42
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	8c 2f       	mov	r24, r28
    16de:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    16e2:	49 e7       	ldi	r20, 0x79	; 121
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	8c 2f       	mov	r24, r28
    16e8:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    16ec:	45 ed       	ldi	r20, 0xD5	; 213
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	8c 2f       	mov	r24, r28
    16f2:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    16f6:	40 e7       	ldi	r20, 0x70	; 112
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	8c 2f       	mov	r24, r28
    16fc:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1700:	48 e7       	ldi	r20, 0x78	; 120
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	8c 2f       	mov	r24, r28
    1706:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    170a:	48 e0       	ldi	r20, 0x08	; 8
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	8c 2f       	mov	r24, r28
    1710:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1714:	46 e0       	ldi	r20, 0x06	; 6
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	8c 2f       	mov	r24, r28
    171a:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    171e:	42 e7       	ldi	r20, 0x72	; 114
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	8c 2f       	mov	r24, r28
    1724:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	60 e4       	ldi	r22, 0x40	; 64
    172c:	8c 2f       	mov	r24, r28
    172e:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1732:	4a e2       	ldi	r20, 0x2A	; 42
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	8c 2f       	mov	r24, r28
    1738:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    173c:	49 e7       	ldi	r20, 0x79	; 121
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	8c 2f       	mov	r24, r28
    1742:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    1746:	4a ed       	ldi	r20, 0xDA	; 218
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	8c 2f       	mov	r24, r28
    174c:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1750:	40 e0       	ldi	r20, 0x00	; 0
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	8c 2f       	mov	r24, r28
    1756:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    175a:	4c ed       	ldi	r20, 0xDC	; 220
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	8c 2f       	mov	r24, r28
    1760:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    1764:	40 e0       	ldi	r20, 0x00	; 0
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	8c 2f       	mov	r24, r28
    176a:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    176e:	41 e8       	ldi	r20, 0x81	; 129
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	8c 2f       	mov	r24, r28
    1774:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    1778:	4f e7       	ldi	r20, 0x7F	; 127
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	8c 2f       	mov	r24, r28
    177e:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1782:	49 ed       	ldi	r20, 0xD9	; 217
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	8c 2f       	mov	r24, r28
    1788:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    178c:	41 ef       	ldi	r20, 0xF1	; 241
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	8c 2f       	mov	r24, r28
    1792:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    1796:	4b ed       	ldi	r20, 0xDB	; 219
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	8c 2f       	mov	r24, r28
    179c:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    17a0:	40 e4       	ldi	r20, 0x40	; 64
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	8c 2f       	mov	r24, r28
    17a6:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    17aa:	48 e7       	ldi	r20, 0x78	; 120
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	8c 2f       	mov	r24, r28
    17b0:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    17b4:	48 e2       	ldi	r20, 0x28	; 40
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	8c 2f       	mov	r24, r28
    17ba:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    17be:	41 e0       	ldi	r20, 0x01	; 1
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	8c 2f       	mov	r24, r28
    17c4:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    17c8:	40 e8       	ldi	r20, 0x80	; 128
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	8c 2f       	mov	r24, r28
    17ce:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    17d2:	4c e0       	ldi	r20, 0x0C	; 12
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	8c 2f       	mov	r24, r28
    17d8:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>

}
    17dc:	cf 91       	pop	r28
    17de:	08 95       	ret

000017e0 <init_OLED>:
	Set up the two OLED displays
------------------------------------------------------------------------------*/
void init_OLED(void)
{

	reset_OLED();				// Need to start with a reset
    17e0:	0e 94 2c 0b 	call	0x1658	; 0x1658 <reset_OLED>
	init_OLEDDISPLAY(0);
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	0e 94 4a 0b 	call	0x1694	; 0x1694 <init_OLEDDISPLAY>
	init_OLEDDISPLAY(1);
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	0e 94 4a 0b 	call	0x1694	; 0x1694 <init_OLEDDISPLAY>
    17f0:	2a e6       	ldi	r18, 0x6A	; 106
    17f2:	84 e0       	ldi	r24, 0x04	; 4
    17f4:	91 e0       	ldi	r25, 0x01	; 1
    17f6:	21 50       	subi	r18, 0x01	; 1
    17f8:	80 40       	sbci	r24, 0x00	; 0
    17fa:	90 40       	sbci	r25, 0x00	; 0
    17fc:	e1 f7       	brne	.-8      	; 0x17f6 <init_OLED+0x16>
    17fe:	00 c0       	rjmp	.+0      	; 0x1800 <__DATA_REGION_LENGTH__>
    1800:	08 95       	ret

00001802 <writestr_OLED>:
	
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.
------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1802:	ef 92       	push	r14
    1804:	ff 92       	push	r15
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	e2 97       	sbiw	r28, 0x32	; 50
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	de bf       	out	0x3e, r29	; 62
    1818:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    181a:	91 e1       	ldi	r25, 0x11	; 17
    181c:	e9 e2       	ldi	r30, 0x29	; 41
    181e:	fd e8       	ldi	r31, 0x8D	; 141
    1820:	de 01       	movw	r26, r28
    1822:	92 96       	adiw	r26, 0x22	; 34
    1824:	01 90       	ld	r0, Z+
    1826:	0d 92       	st	X+, r0
    1828:	9a 95       	dec	r25
    182a:	e1 f7       	brne	.-8      	; 0x1824 <writestr_OLED+0x22>

	if (displaynumber == 0) {
    182c:	81 11       	cpse	r24, r1
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1830:	0c e3       	ldi	r16, 0x3C	; 60
    1832:	01 c0       	rjmp	.+2      	; 0x1836 <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1834:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    1836:	ce 01       	movw	r24, r28
    1838:	01 96       	adiw	r24, 0x01	; 1
    183a:	7c 01       	movw	r14, r24
    183c:	0e 94 f9 24 	call	0x49f2	; 0x49f2 <strcpy>
	if (strlen(strbuf) > 16) {
    1840:	f7 01       	movw	r30, r14
    1842:	01 90       	ld	r0, Z+
    1844:	00 20       	and	r0, r0
    1846:	e9 f7       	brne	.-6      	; 0x1842 <writestr_OLED+0x40>
    1848:	31 97       	sbiw	r30, 0x01	; 1
    184a:	ee 19       	sub	r30, r14
    184c:	ff 09       	sbc	r31, r15
    184e:	71 97       	sbiw	r30, 0x11	; 17
    1850:	08 f0       	brcs	.+2      	; 0x1854 <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1852:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1854:	be 01       	movw	r22, r28
    1856:	6e 5d       	subi	r22, 0xDE	; 222
    1858:	7f 4f       	sbci	r23, 0xFF	; 255
    185a:	ce 01       	movw	r24, r28
    185c:	01 96       	adiw	r24, 0x01	; 1
    185e:	0e 94 ee 24 	call	0x49dc	; 0x49dc <strcat>

	if (lineno == 1) {
    1862:	11 30       	cpi	r17, 0x01	; 1
    1864:	39 f4       	brne	.+14     	; 0x1874 <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    1866:	40 e8       	ldi	r20, 0x80	; 128
    1868:	60 e0       	ldi	r22, 0x00	; 0
    186a:	80 2f       	mov	r24, r16
    186c:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1870:	10 e0       	ldi	r17, 0x00	; 0
    1872:	12 c0       	rjmp	.+36     	; 0x1898 <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1874:	40 ec       	ldi	r20, 0xC0	; 192
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	80 2f       	mov	r24, r16
    187a:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>
    187e:	f8 cf       	rjmp	.-16     	; 0x1870 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1880:	e1 e0       	ldi	r30, 0x01	; 1
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	ec 0f       	add	r30, r28
    1886:	fd 1f       	adc	r31, r29
    1888:	e1 0f       	add	r30, r17
    188a:	f1 1d       	adc	r31, r1
    188c:	40 81       	ld	r20, Z
    188e:	60 e4       	ldi	r22, 0x40	; 64
    1890:	80 2f       	mov	r24, r16
    1892:	0e 94 38 0b 	call	0x1670	; 0x1670 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    1896:	1f 5f       	subi	r17, 0xFF	; 255
    1898:	10 31       	cpi	r17, 0x10	; 16
    189a:	90 f3       	brcs	.-28     	; 0x1880 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <timerOLED>
    18a4:	90 93 0d 2a 	sts	0x2A0D, r25	; 0x802a0d <timerOLED+0x1>

}
    18a8:	e2 96       	adiw	r28, 0x32	; 50
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	ff 90       	pop	r15
    18b8:	ef 90       	pop	r14
    18ba:	08 95       	ret

000018bc <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    18bc:	1f 93       	push	r17
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	1f 92       	push	r1
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	18 2f       	mov	r17, r24

	char nullstr[] = "";
    18ca:	19 82       	std	Y+1, r1	; 0x01
	writestr_OLED(displaynumber, nullstr, 1);
    18cc:	41 e0       	ldi	r20, 0x01	; 1
    18ce:	be 01       	movw	r22, r28
    18d0:	6f 5f       	subi	r22, 0xFF	; 255
    18d2:	7f 4f       	sbci	r23, 0xFF	; 255
    18d4:	0e 94 01 0c 	call	0x1802	; 0x1802 <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
    18d8:	42 e0       	ldi	r20, 0x02	; 2
    18da:	be 01       	movw	r22, r28
    18dc:	6f 5f       	subi	r22, 0xFF	; 255
    18de:	7f 4f       	sbci	r23, 0xFF	; 255
    18e0:	81 2f       	mov	r24, r17
    18e2:	0e 94 01 0c 	call	0x1802	; 0x1802 <writestr_OLED>
	timerOLED = 0;
    18e6:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED>
    18ea:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED+0x1>

}
    18ee:	0f 90       	pop	r0
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	1f 91       	pop	r17
    18f6:	08 95       	ret

000018f8 <read_PNEUSensors>:
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
{
    18f8:	cf 92       	push	r12
    18fa:	df 92       	push	r13
    18fc:	ef 92       	push	r14
    18fe:	ff 92       	push	r15
    1900:	0f 93       	push	r16
    1902:	1f 93       	push	r17
    1904:	cf 93       	push	r28
    1906:	df 93       	push	r29
    1908:	6c 01       	movw	r12, r24
    190a:	8b 01       	movw	r16, r22
    190c:	7a 01       	movw	r14, r20
    190e:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);	// NEEDS ERRORCHECK
    1910:	69 e0       	ldi	r22, 0x09	; 9
    1912:	81 e2       	ldi	r24, 0x21	; 33
    1914:	0e 94 e7 08 	call	0x11ce	; 0x11ce <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1918:	98 2f       	mov	r25, r24
    191a:	92 95       	swap	r25
    191c:	96 95       	lsr	r25
    191e:	96 95       	lsr	r25
    1920:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    1922:	91 30       	cpi	r25, 0x01	; 1
    1924:	21 f4       	brne	.+8      	; 0x192e <read_PNEUSensors+0x36>
		*shutter = 'c';
    1926:	93 e6       	ldi	r25, 0x63	; 99
    1928:	f6 01       	movw	r30, r12
    192a:	90 83       	st	Z, r25
    192c:	0f c0       	rjmp	.+30     	; 0x194c <read_PNEUSensors+0x54>
	} else if (state == 2) {
    192e:	92 30       	cpi	r25, 0x02	; 2
    1930:	21 f4       	brne	.+8      	; 0x193a <read_PNEUSensors+0x42>
		*shutter = 'o';
    1932:	9f e6       	ldi	r25, 0x6F	; 111
    1934:	f6 01       	movw	r30, r12
    1936:	90 83       	st	Z, r25
    1938:	09 c0       	rjmp	.+18     	; 0x194c <read_PNEUSensors+0x54>
	} else if (state == 3) {
    193a:	93 30       	cpi	r25, 0x03	; 3
    193c:	21 f4       	brne	.+8      	; 0x1946 <read_PNEUSensors+0x4e>
		*shutter = 't';
    193e:	94 e7       	ldi	r25, 0x74	; 116
    1940:	f6 01       	movw	r30, r12
    1942:	90 83       	st	Z, r25
    1944:	03 c0       	rjmp	.+6      	; 0x194c <read_PNEUSensors+0x54>
	} else {
		*shutter = 'x';
    1946:	98 e7       	ldi	r25, 0x78	; 120
    1948:	f6 01       	movw	r30, r12
    194a:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    194c:	98 2f       	mov	r25, r24
    194e:	96 95       	lsr	r25
    1950:	96 95       	lsr	r25
	state &= 0b00000011;
    1952:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1954:	91 30       	cpi	r25, 0x01	; 1
    1956:	21 f4       	brne	.+8      	; 0x1960 <read_PNEUSensors+0x68>
		*right = 'c';
    1958:	93 e6       	ldi	r25, 0x63	; 99
    195a:	f7 01       	movw	r30, r14
    195c:	90 83       	st	Z, r25
    195e:	0f c0       	rjmp	.+30     	; 0x197e <read_PNEUSensors+0x86>
	} else if (state == 2) {
    1960:	92 30       	cpi	r25, 0x02	; 2
    1962:	21 f4       	brne	.+8      	; 0x196c <read_PNEUSensors+0x74>
		*right = 'o';
    1964:	9f e6       	ldi	r25, 0x6F	; 111
    1966:	f7 01       	movw	r30, r14
    1968:	90 83       	st	Z, r25
    196a:	09 c0       	rjmp	.+18     	; 0x197e <read_PNEUSensors+0x86>
	} else if (state == 3) {
    196c:	93 30       	cpi	r25, 0x03	; 3
    196e:	21 f4       	brne	.+8      	; 0x1978 <read_PNEUSensors+0x80>
		*right = 't';
    1970:	94 e7       	ldi	r25, 0x74	; 116
    1972:	f7 01       	movw	r30, r14
    1974:	90 83       	st	Z, r25
    1976:	03 c0       	rjmp	.+6      	; 0x197e <read_PNEUSensors+0x86>
	} else {
		*right = 'x';
    1978:	98 e7       	ldi	r25, 0x78	; 120
    197a:	f7 01       	movw	r30, r14
    197c:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    197e:	98 2f       	mov	r25, r24
    1980:	92 95       	swap	r25
    1982:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    1984:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1986:	91 30       	cpi	r25, 0x01	; 1
    1988:	21 f4       	brne	.+8      	; 0x1992 <read_PNEUSensors+0x9a>
		*left = 'o';
    198a:	9f e6       	ldi	r25, 0x6F	; 111
    198c:	f8 01       	movw	r30, r16
    198e:	90 83       	st	Z, r25
    1990:	0f c0       	rjmp	.+30     	; 0x19b0 <read_PNEUSensors+0xb8>
	} else if (state == 2) {
    1992:	92 30       	cpi	r25, 0x02	; 2
    1994:	21 f4       	brne	.+8      	; 0x199e <read_PNEUSensors+0xa6>
		*left = 'c';
    1996:	93 e6       	ldi	r25, 0x63	; 99
    1998:	f8 01       	movw	r30, r16
    199a:	90 83       	st	Z, r25
    199c:	09 c0       	rjmp	.+18     	; 0x19b0 <read_PNEUSensors+0xb8>
	} else if (state == 3) {
    199e:	93 30       	cpi	r25, 0x03	; 3
    19a0:	21 f4       	brne	.+8      	; 0x19aa <read_PNEUSensors+0xb2>
		*left = 't';
    19a2:	94 e7       	ldi	r25, 0x74	; 116
    19a4:	f8 01       	movw	r30, r16
    19a6:	90 83       	st	Z, r25
    19a8:	03 c0       	rjmp	.+6      	; 0x19b0 <read_PNEUSensors+0xb8>
	} else {
		*left = 'x';
    19aa:	98 e7       	ldi	r25, 0x78	; 120
    19ac:	f8 01       	movw	r30, r16
    19ae:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    19b0:	81 ff       	sbrs	r24, 1
    19b2:	03 c0       	rjmp	.+6      	; 0x19ba <read_PNEUSensors+0xc2>
		*air = '0';
    19b4:	80 e3       	ldi	r24, 0x30	; 48
    19b6:	88 83       	st	Y, r24
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <read_PNEUSensors+0xc6>
	} else {
		*air = '1';
    19ba:	81 e3       	ldi	r24, 0x31	; 49
    19bc:	88 83       	st	Y, r24
	}
}
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	ff 90       	pop	r15
    19c8:	ef 90       	pop	r14
    19ca:	df 90       	pop	r13
    19cc:	cf 90       	pop	r12
    19ce:	08 95       	ret

000019d0 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	d8 2f       	mov	r29, r24
    19d6:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    19d8:	69 e0       	ldi	r22, 0x09	; 9
    19da:	84 e2       	ldi	r24, 0x24	; 36
    19dc:	0e 94 e7 08 	call	0x11ce	; 0x11ce <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    19e0:	8d 2b       	or	r24, r29
    19e2:	48 2f       	mov	r20, r24
    19e4:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    19e6:	6a e0       	ldi	r22, 0x0A	; 10
    19e8:	84 e2       	ldi	r24, 0x24	; 36
    19ea:	0e 94 16 09 	call	0x122c	; 0x122c <write_MCP23008>
		return(retval);
	}

	return(0);

}
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	08 95       	ret

000019f4 <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(uint8_t cstack)
{
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	6a 97       	sbiw	r28, 0x1a	; 26
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    1a02:	99 e0       	ldi	r25, 0x09	; 9
    1a04:	e4 e7       	ldi	r30, 0x74	; 116
    1a06:	fd e8       	ldi	r31, 0x8D	; 141
    1a08:	de 01       	movw	r26, r28
    1a0a:	11 96       	adiw	r26, 0x01	; 1
    1a0c:	01 90       	ld	r0, Z+
    1a0e:	0d 92       	st	X+, r0
    1a10:	9a 95       	dec	r25
    1a12:	e1 f7       	brne	.-8      	; 0x1a0c <close_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1a14:	24 e3       	ldi	r18, 0x34	; 52
    1a16:	82 9f       	mul	r24, r18
    1a18:	c0 01       	movw	r24, r0
    1a1a:	11 24       	eor	r1, r1
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	ed 5f       	subi	r30, 0xFD	; 253
    1a20:	f7 4d       	sbci	r31, 0xD7	; 215
    1a22:	81 81       	ldd	r24, Z+1	; 0x01
    1a24:	8c 36       	cpi	r24, 0x6C	; 108
    1a26:	31 f1       	breq	.+76     	; 0x1a74 <close_PNEU+0x80>
    1a28:	18 f4       	brcc	.+6      	; 0x1a30 <close_PNEU+0x3c>
    1a2a:	82 36       	cpi	r24, 0x62	; 98
    1a2c:	39 f0       	breq	.+14     	; 0x1a3c <close_PNEU+0x48>
    1a2e:	6a c0       	rjmp	.+212    	; 0x1b04 <close_PNEU+0x110>
    1a30:	82 37       	cpi	r24, 0x72	; 114
    1a32:	c1 f1       	breq	.+112    	; 0x1aa4 <close_PNEU+0xb0>
    1a34:	83 37       	cpi	r24, 0x73	; 115
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <close_PNEU+0x46>
    1a38:	4d c0       	rjmp	.+154    	; 0x1ad4 <close_PNEU+0xe0>
    1a3a:	64 c0       	rjmp	.+200    	; 0x1b04 <close_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1a3c:	6a ee       	ldi	r22, 0xEA	; 234
    1a3e:	84 e4       	ldi	r24, 0x44	; 68
    1a40:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1a44:	66 ee       	ldi	r22, 0xE6	; 230
    1a46:	88 e8       	ldi	r24, 0x88	; 136
    1a48:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1a4c:	8a e3       	ldi	r24, 0x3A	; 58
    1a4e:	9d e8       	ldi	r25, 0x8D	; 141
    1a50:	9f 93       	push	r25
    1a52:	8f 93       	push	r24
    1a54:	ce 01       	movw	r24, r28
    1a56:	01 96       	adiw	r24, 0x01	; 1
    1a58:	9f 93       	push	r25
    1a5a:	8f 93       	push	r24
    1a5c:	09 96       	adiw	r24, 0x09	; 9
    1a5e:	9f 93       	push	r25
    1a60:	8f 93       	push	r24
    1a62:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
			break;
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	59 c0       	rjmp	.+178    	; 0x1b26 <close_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1a74:	6a ee       	ldi	r22, 0xEA	; 234
    1a76:	84 e4       	ldi	r24, 0x44	; 68
    1a78:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1a7c:	8f e3       	ldi	r24, 0x3F	; 63
    1a7e:	9d e8       	ldi	r25, 0x8D	; 141
    1a80:	9f 93       	push	r25
    1a82:	8f 93       	push	r24
    1a84:	ce 01       	movw	r24, r28
    1a86:	01 96       	adiw	r24, 0x01	; 1
    1a88:	9f 93       	push	r25
    1a8a:	8f 93       	push	r24
    1a8c:	09 96       	adiw	r24, 0x09	; 9
    1a8e:	9f 93       	push	r25
    1a90:	8f 93       	push	r24
    1a92:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
			break;
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	41 c0       	rjmp	.+130    	; 0x1b26 <close_PNEU+0x132>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1aa4:	66 ee       	ldi	r22, 0xE6	; 230
    1aa6:	88 e8       	ldi	r24, 0x88	; 136
    1aa8:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1aac:	84 e4       	ldi	r24, 0x44	; 68
    1aae:	9d e8       	ldi	r25, 0x8D	; 141
    1ab0:	9f 93       	push	r25
    1ab2:	8f 93       	push	r24
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	01 96       	adiw	r24, 0x01	; 1
    1ab8:	9f 93       	push	r25
    1aba:	8f 93       	push	r24
    1abc:	09 96       	adiw	r24, 0x09	; 9
    1abe:	9f 93       	push	r25
    1ac0:	8f 93       	push	r24
    1ac2:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
			break;
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	29 c0       	rjmp	.+82     	; 0x1b26 <close_PNEU+0x132>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1ad4:	6c ee       	ldi	r22, 0xEC	; 236
    1ad6:	82 e2       	ldi	r24, 0x22	; 34
    1ad8:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1adc:	8a e4       	ldi	r24, 0x4A	; 74
    1ade:	9d e8       	ldi	r25, 0x8D	; 141
    1ae0:	9f 93       	push	r25
    1ae2:	8f 93       	push	r24
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	01 96       	adiw	r24, 0x01	; 1
    1ae8:	9f 93       	push	r25
    1aea:	8f 93       	push	r24
    1aec:	09 96       	adiw	r24, 0x09	; 9
    1aee:	9f 93       	push	r25
    1af0:	8f 93       	push	r24
    1af2:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
			break;
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	11 c0       	rjmp	.+34     	; 0x1b26 <close_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "close_PNEU bad object");
    1b04:	62 e5       	ldi	r22, 0x52	; 82
    1b06:	7d e8       	ldi	r23, 0x8D	; 141
    1b08:	85 ef       	ldi	r24, 0xF5	; 245
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			strcpy(outbuf, "close what?");
    1b10:	8c e0       	ldi	r24, 0x0C	; 12
    1b12:	e8 e6       	ldi	r30, 0x68	; 104
    1b14:	fd e8       	ldi	r31, 0x8D	; 141
    1b16:	de 01       	movw	r26, r28
    1b18:	1a 96       	adiw	r26, 0x0a	; 10
    1b1a:	01 90       	ld	r0, Z+
    1b1c:	0d 92       	st	X+, r0
    1b1e:	8a 95       	dec	r24
    1b20:	e1 f7       	brne	.-8      	; 0x1b1a <close_PNEU+0x126>
			return(ERROR);
    1b22:	83 e6       	ldi	r24, 0x63	; 99
    1b24:	0b c0       	rjmp	.+22     	; 0x1b3c <close_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1b2c:	41 e0       	ldi	r20, 0x01	; 1
    1b2e:	be 01       	movw	r22, r28
    1b30:	66 5f       	subi	r22, 0xF6	; 246
    1b32:	7f 4f       	sbci	r23, 0xFF	; 255
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	0e 94 01 0c 	call	0x1802	; 0x1802 <writestr_OLED>
	return(NOERROR);
    1b3a:	80 e0       	ldi	r24, 0x00	; 0

}
    1b3c:	6a 96       	adiw	r28, 0x1a	; 26
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	08 95       	ret

00001b48 <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(uint8_t cstack)
{
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	69 97       	sbiw	r28, 0x19	; 25
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	de bf       	out	0x3e, r29	; 62

	const char dformat_OPE[] = "Open %s";
    1b56:	98 e0       	ldi	r25, 0x08	; 8
    1b58:	ed e9       	ldi	r30, 0x9D	; 157
    1b5a:	fd e8       	ldi	r31, 0x8D	; 141
    1b5c:	de 01       	movw	r26, r28
    1b5e:	11 96       	adiw	r26, 0x01	; 1
    1b60:	01 90       	ld	r0, Z+
    1b62:	0d 92       	st	X+, r0
    1b64:	9a 95       	dec	r25
    1b66:	e1 f7       	brne	.-8      	; 0x1b60 <open_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1b68:	24 e3       	ldi	r18, 0x34	; 52
    1b6a:	82 9f       	mul	r24, r18
    1b6c:	c0 01       	movw	r24, r0
    1b6e:	11 24       	eor	r1, r1
    1b70:	fc 01       	movw	r30, r24
    1b72:	ed 5f       	subi	r30, 0xFD	; 253
    1b74:	f7 4d       	sbci	r31, 0xD7	; 215
    1b76:	81 81       	ldd	r24, Z+1	; 0x01
    1b78:	8c 36       	cpi	r24, 0x6C	; 108
    1b7a:	31 f1       	breq	.+76     	; 0x1bc8 <open_PNEU+0x80>
    1b7c:	18 f4       	brcc	.+6      	; 0x1b84 <open_PNEU+0x3c>
    1b7e:	82 36       	cpi	r24, 0x62	; 98
    1b80:	39 f0       	breq	.+14     	; 0x1b90 <open_PNEU+0x48>
    1b82:	6a c0       	rjmp	.+212    	; 0x1c58 <open_PNEU+0x110>
    1b84:	82 37       	cpi	r24, 0x72	; 114
    1b86:	c1 f1       	breq	.+112    	; 0x1bf8 <open_PNEU+0xb0>
    1b88:	83 37       	cpi	r24, 0x73	; 115
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <open_PNEU+0x46>
    1b8c:	4d c0       	rjmp	.+154    	; 0x1c28 <open_PNEU+0xe0>
    1b8e:	64 c0       	rjmp	.+200    	; 0x1c58 <open_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1b90:	6e ea       	ldi	r22, 0xAE	; 174
    1b92:	84 e4       	ldi	r24, 0x44	; 68
    1b94:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1b98:	6e e6       	ldi	r22, 0x6E	; 110
    1b9a:	88 e8       	ldi	r24, 0x88	; 136
    1b9c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1ba0:	8a e3       	ldi	r24, 0x3A	; 58
    1ba2:	9d e8       	ldi	r25, 0x8D	; 141
    1ba4:	9f 93       	push	r25
    1ba6:	8f 93       	push	r24
    1ba8:	ce 01       	movw	r24, r28
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	9f 93       	push	r25
    1bae:	8f 93       	push	r24
    1bb0:	08 96       	adiw	r24, 0x08	; 8
    1bb2:	9f 93       	push	r25
    1bb4:	8f 93       	push	r24
    1bb6:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
			break;
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	59 c0       	rjmp	.+178    	; 0x1c7a <open_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1bc8:	6e ea       	ldi	r22, 0xAE	; 174
    1bca:	84 e4       	ldi	r24, 0x44	; 68
    1bcc:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1bd0:	8f e3       	ldi	r24, 0x3F	; 63
    1bd2:	9d e8       	ldi	r25, 0x8D	; 141
    1bd4:	9f 93       	push	r25
    1bd6:	8f 93       	push	r24
    1bd8:	ce 01       	movw	r24, r28
    1bda:	01 96       	adiw	r24, 0x01	; 1
    1bdc:	9f 93       	push	r25
    1bde:	8f 93       	push	r24
    1be0:	08 96       	adiw	r24, 0x08	; 8
    1be2:	9f 93       	push	r25
    1be4:	8f 93       	push	r24
    1be6:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
			break;
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	41 c0       	rjmp	.+130    	; 0x1c7a <open_PNEU+0x132>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1bf8:	6e e6       	ldi	r22, 0x6E	; 110
    1bfa:	88 e8       	ldi	r24, 0x88	; 136
    1bfc:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1c00:	84 e4       	ldi	r24, 0x44	; 68
    1c02:	9d e8       	ldi	r25, 0x8D	; 141
    1c04:	9f 93       	push	r25
    1c06:	8f 93       	push	r24
    1c08:	ce 01       	movw	r24, r28
    1c0a:	01 96       	adiw	r24, 0x01	; 1
    1c0c:	9f 93       	push	r25
    1c0e:	8f 93       	push	r24
    1c10:	08 96       	adiw	r24, 0x08	; 8
    1c12:	9f 93       	push	r25
    1c14:	8f 93       	push	r24
    1c16:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
			break;
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	29 c0       	rjmp	.+82     	; 0x1c7a <open_PNEU+0x132>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1c28:	6e ec       	ldi	r22, 0xCE	; 206
    1c2a:	82 e2       	ldi	r24, 0x22	; 34
    1c2c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1c30:	8a e4       	ldi	r24, 0x4A	; 74
    1c32:	9d e8       	ldi	r25, 0x8D	; 141
    1c34:	9f 93       	push	r25
    1c36:	8f 93       	push	r24
    1c38:	ce 01       	movw	r24, r28
    1c3a:	01 96       	adiw	r24, 0x01	; 1
    1c3c:	9f 93       	push	r25
    1c3e:	8f 93       	push	r24
    1c40:	08 96       	adiw	r24, 0x08	; 8
    1c42:	9f 93       	push	r25
    1c44:	8f 93       	push	r24
    1c46:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
			break;
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	11 c0       	rjmp	.+34     	; 0x1c7a <open_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "open_PNEU bad object");
    1c58:	6d e7       	ldi	r22, 0x7D	; 125
    1c5a:	7d e8       	ldi	r23, 0x8D	; 141
    1c5c:	85 ef       	ldi	r24, 0xF5	; 245
    1c5e:	91 e0       	ldi	r25, 0x01	; 1
    1c60:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			strcpy(outbuf, "open what?");
    1c64:	8b e0       	ldi	r24, 0x0B	; 11
    1c66:	e2 e9       	ldi	r30, 0x92	; 146
    1c68:	fd e8       	ldi	r31, 0x8D	; 141
    1c6a:	de 01       	movw	r26, r28
    1c6c:	19 96       	adiw	r26, 0x09	; 9
    1c6e:	01 90       	ld	r0, Z+
    1c70:	0d 92       	st	X+, r0
    1c72:	8a 95       	dec	r24
    1c74:	e1 f7       	brne	.-8      	; 0x1c6e <open_PNEU+0x126>
			return(ERROR);
    1c76:	83 e6       	ldi	r24, 0x63	; 99
    1c78:	0b c0       	rjmp	.+22     	; 0x1c90 <open_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1c80:	41 e0       	ldi	r20, 0x01	; 1
    1c82:	be 01       	movw	r22, r28
    1c84:	67 5f       	subi	r22, 0xF7	; 247
    1c86:	7f 4f       	sbci	r23, 0xFF	; 255
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	0e 94 01 0c 	call	0x1802	; 0x1802 <writestr_OLED>
	return(NOERROR);
    1c8e:	80 e0       	ldi	r24, 0x00	; 0

}
    1c90:	69 96       	adiw	r28, 0x19	; 25
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	08 95       	ret

00001c9c <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1c9c:	1f 92       	push	r1
    1c9e:	0f 92       	push	r0
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	0f 92       	push	r0
    1ca4:	11 24       	eor	r1, r1
    1ca6:	2f 93       	push	r18
    1ca8:	3f 93       	push	r19
    1caa:	4f 93       	push	r20
    1cac:	5f 93       	push	r21
    1cae:	6f 93       	push	r22
    1cb0:	7f 93       	push	r23
    1cb2:	8f 93       	push	r24
    1cb4:	9f 93       	push	r25
    1cb6:	af 93       	push	r26
    1cb8:	bf 93       	push	r27
    1cba:	ef 93       	push	r30
    1cbc:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1cbe:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1cc2:	88 23       	and	r24, r24
    1cc4:	4c f4       	brge	.+18     	; 0x1cd8 <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1cc6:	80 e8       	ldi	r24, 0x80	; 128
    1cc8:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1ccc:	68 e0       	ldi	r22, 0x08	; 8
    1cce:	81 e2       	ldi	r24, 0x21	; 33
    1cd0:	0e 94 e7 08 	call	0x11ce	; 0x11ce <read_MCP23008>
    1cd4:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <pneuState>
	}

}
    1cd8:	ff 91       	pop	r31
    1cda:	ef 91       	pop	r30
    1cdc:	bf 91       	pop	r27
    1cde:	af 91       	pop	r26
    1ce0:	9f 91       	pop	r25
    1ce2:	8f 91       	pop	r24
    1ce4:	7f 91       	pop	r23
    1ce6:	6f 91       	pop	r22
    1ce8:	5f 91       	pop	r21
    1cea:	4f 91       	pop	r20
    1cec:	3f 91       	pop	r19
    1cee:	2f 91       	pop	r18
    1cf0:	0f 90       	pop	r0
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	0f 90       	pop	r0
    1cf6:	1f 90       	pop	r1
    1cf8:	18 95       	reti

00001cfa <init_PORTS>:
void init_PORTS(void)
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTB.DIRSET = PIN2_bm;		// Beeper
    1cfa:	84 e0       	ldi	r24, 0x04	; 4
    1cfc:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7f4421>
	PORTF.DIRCLR = PIN2_bm;		// specID jumper
    1d00:	e0 ea       	ldi	r30, 0xA0	; 160
    1d02:	f4 e0       	ldi	r31, 0x04	; 4
    1d04:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRSET = PIN5_bm;		// On-board LED
    1d06:	80 e2       	ldi	r24, 0x20	; 32
    1d08:	81 83       	std	Z+1, r24	; 0x01
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton
    1d0a:	8b e0       	ldi	r24, 0x0B	; 11
    1d0c:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.OUTCLR = PIN3_bm;		// Reset the XPort
    1d0e:	e0 e4       	ldi	r30, 0x40	; 64
    1d10:	f4 e0       	ldi	r31, 0x04	; 4
    1d12:	88 e0       	ldi	r24, 0x08	; 8
    1d14:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;		// Set XPort reset pin as output
    1d16:	81 83       	std	Z+1, r24	; 0x01
    1d18:	ad e8       	ldi	r26, 0x8D	; 141
    1d1a:	b0 e2       	ldi	r27, 0x20	; 32
    1d1c:	11 97       	sbiw	r26, 0x01	; 1
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <init_PORTS+0x22>
    1d20:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;		// Enable the XPort
    1d22:	85 83       	std	Z+5, r24	; 0x05
    1d24:	08 95       	ret

00001d26 <report>:

	Returns:
		ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1d26:	2f 92       	push	r2
    1d28:	3f 92       	push	r3
    1d2a:	4f 92       	push	r4
    1d2c:	5f 92       	push	r5
    1d2e:	6f 92       	push	r6
    1d30:	7f 92       	push	r7
    1d32:	8f 92       	push	r8
    1d34:	9f 92       	push	r9
    1d36:	af 92       	push	r10
    1d38:	bf 92       	push	r11
    1d3a:	cf 92       	push	r12
    1d3c:	df 92       	push	r13
    1d3e:	ef 92       	push	r14
    1d40:	ff 92       	push	r15
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	c0 5e       	subi	r28, 0xE0	; 224
    1d50:	d2 40       	sbci	r29, 0x02	; 2
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "ENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
    1d56:	95 e4       	ldi	r25, 0x45	; 69
    1d58:	e3 e0       	ldi	r30, 0x03	; 3
    1d5a:	fe e8       	ldi	r31, 0x8E	; 142
    1d5c:	de 01       	movw	r26, r28
    1d5e:	a6 5b       	subi	r26, 0xB6	; 182
    1d60:	be 4f       	sbci	r27, 0xFE	; 254
    1d62:	01 90       	ld	r0, Z+
    1d64:	0d 92       	st	X+, r0
    1d66:	9a 95       	dec	r25
    1d68:	e1 f7       	brne	.-8      	; 0x1d62 <report+0x3c>
	const char format_MTR[] = "MTR,%s,%c,%ld,microns,%ld,microns/sec,%d,mA,%s";
    1d6a:	9f e2       	ldi	r25, 0x2F	; 47
    1d6c:	e8 e4       	ldi	r30, 0x48	; 72
    1d6e:	fe e8       	ldi	r31, 0x8E	; 142
    1d70:	de 01       	movw	r26, r28
    1d72:	a1 57       	subi	r26, 0x71	; 113
    1d74:	be 4f       	sbci	r27, 0xFE	; 254
    1d76:	01 90       	ld	r0, Z+
    1d78:	0d 92       	st	X+, r0
    1d7a:	9a 95       	dec	r25
    1d7c:	e1 f7       	brne	.-8      	; 0x1d76 <report+0x50>
	const char format_MTV[] = "MTV,%s,%c,%3.1f,V,%3.1f,C,%s";
    1d7e:	9d e1       	ldi	r25, 0x1D	; 29
    1d80:	e7 e7       	ldi	r30, 0x77	; 119
    1d82:	fe e8       	ldi	r31, 0x8E	; 142
    1d84:	de 01       	movw	r26, r28
    1d86:	a2 54       	subi	r26, 0x42	; 66
    1d88:	be 4f       	sbci	r27, 0xFE	; 254
    1d8a:	01 90       	ld	r0, Z+
    1d8c:	0d 92       	st	X+, r0
    1d8e:	9a 95       	dec	r25
    1d90:	e1 f7       	brne	.-8      	; 0x1d8a <report+0x64>
	const char format_ORI[] = "ORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1d92:	9c e1       	ldi	r25, 0x1C	; 28
    1d94:	e4 e9       	ldi	r30, 0x94	; 148
    1d96:	fe e8       	ldi	r31, 0x8E	; 142
    1d98:	de 01       	movw	r26, r28
    1d9a:	a5 52       	subi	r26, 0x25	; 37
    1d9c:	be 4f       	sbci	r27, 0xFE	; 254
    1d9e:	01 90       	ld	r0, Z+
    1da0:	0d 92       	st	X+, r0
    1da2:	9a 95       	dec	r25
    1da4:	e1 f7       	brne	.-8      	; 0x1d9e <report+0x78>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1da6:	92 e1       	ldi	r25, 0x12	; 18
    1da8:	e0 eb       	ldi	r30, 0xB0	; 176
    1daa:	fe e8       	ldi	r31, 0x8E	; 142
    1dac:	de 01       	movw	r26, r28
    1dae:	a9 50       	subi	r26, 0x09	; 9
    1db0:	be 4f       	sbci	r27, 0xFE	; 254
    1db2:	01 90       	ld	r0, Z+
    1db4:	0d 92       	st	X+, r0
    1db6:	9a 95       	dec	r25
    1db8:	e1 f7       	brne	.-8      	; 0x1db2 <report+0x8c>
	const char format_PNU[] = "PNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1dba:	9d e2       	ldi	r25, 0x2D	; 45
    1dbc:	e2 ec       	ldi	r30, 0xC2	; 194
    1dbe:	fe e8       	ldi	r31, 0x8E	; 142
    1dc0:	de 01       	movw	r26, r28
    1dc2:	a7 5f       	subi	r26, 0xF7	; 247
    1dc4:	bd 4f       	sbci	r27, 0xFD	; 253
    1dc6:	01 90       	ld	r0, Z+
    1dc8:	0d 92       	st	X+, r0
    1dca:	9a 95       	dec	r25
    1dcc:	e1 f7       	brne	.-8      	; 0x1dc6 <report+0xa0>
	const char dformat_PN1[] = "Left:%c   Right:%c";
    1dce:	93 e1       	ldi	r25, 0x13	; 19
    1dd0:	ef ee       	ldi	r30, 0xEF	; 239
    1dd2:	fe e8       	ldi	r31, 0x8E	; 142
    1dd4:	de 01       	movw	r26, r28
    1dd6:	aa 5c       	subi	r26, 0xCA	; 202
    1dd8:	bd 4f       	sbci	r27, 0xFD	; 253
    1dda:	01 90       	ld	r0, Z+
    1ddc:	0d 92       	st	X+, r0
    1dde:	9a 95       	dec	r25
    1de0:	e1 f7       	brne	.-8      	; 0x1dda <report+0xb4>
	const char dformat_PN2[] = "Shutter:%c  Air:%c";
    1de2:	93 e1       	ldi	r25, 0x13	; 19
    1de4:	e2 e0       	ldi	r30, 0x02	; 2
    1de6:	ff e8       	ldi	r31, 0x8F	; 143
    1de8:	de 01       	movw	r26, r28
    1dea:	a7 5b       	subi	r26, 0xB7	; 183
    1dec:	bd 4f       	sbci	r27, 0xFD	; 253
    1dee:	01 90       	ld	r0, Z+
    1df0:	0d 92       	st	X+, r0
    1df2:	9a 95       	dec	r25
    1df4:	e1 f7       	brne	.-8      	; 0x1dee <report+0xc8>
	const char format_TIM[] = "TIM,%s,%s,set,%s,boot,%s";
    1df6:	99 e1       	ldi	r25, 0x19	; 25
    1df8:	e5 e1       	ldi	r30, 0x15	; 21
    1dfa:	ff e8       	ldi	r31, 0x8F	; 143
    1dfc:	de 01       	movw	r26, r28
    1dfe:	a4 5a       	subi	r26, 0xA4	; 164
    1e00:	bd 4f       	sbci	r27, 0xFD	; 253
    1e02:	01 90       	ld	r0, Z+
    1e04:	0d 92       	st	X+, r0
    1e06:	9a 95       	dec	r25
    1e08:	e1 f7       	brne	.-8      	; 0x1e02 <report+0xdc>
	const char format_VAC[] = "VAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1e0a:	95 e2       	ldi	r25, 0x25	; 37
    1e0c:	ee e2       	ldi	r30, 0x2E	; 46
    1e0e:	ff e8       	ldi	r31, 0x8F	; 143
    1e10:	de 01       	movw	r26, r28
    1e12:	ab 58       	subi	r26, 0x8B	; 139
    1e14:	bd 4f       	sbci	r27, 0xFD	; 253
    1e16:	01 90       	ld	r0, Z+
    1e18:	0d 92       	st	X+, r0
    1e1a:	9a 95       	dec	r25
    1e1c:	e1 f7       	brne	.-8      	; 0x1e16 <report+0xf0>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1e1e:	9d e0       	ldi	r25, 0x0D	; 13
    1e20:	e3 e5       	ldi	r30, 0x53	; 83
    1e22:	ff e8       	ldi	r31, 0x8F	; 143
    1e24:	de 01       	movw	r26, r28
    1e26:	a6 56       	subi	r26, 0x66	; 102
    1e28:	bd 4f       	sbci	r27, 0xFD	; 253
    1e2a:	01 90       	ld	r0, Z+
    1e2c:	0d 92       	st	X+, r0
    1e2e:	9a 95       	dec	r25
    1e30:	e1 f7       	brne	.-8      	; 0x1e2a <report+0x104>
	const char format_VER[] = "VER,%s,%s,%s";
    1e32:	9d e0       	ldi	r25, 0x0D	; 13
    1e34:	e0 e6       	ldi	r30, 0x60	; 96
    1e36:	ff e8       	ldi	r31, 0x8F	; 143
    1e38:	de 01       	movw	r26, r28
    1e3a:	a9 55       	subi	r26, 0x59	; 89
    1e3c:	bd 4f       	sbci	r27, 0xFD	; 253
    1e3e:	01 90       	ld	r0, Z+
    1e40:	0d 92       	st	X+, r0
    1e42:	9a 95       	dec	r25
    1e44:	e1 f7       	brne	.-8      	; 0x1e3e <report+0x118>
	float voltage;							// voltage
	uint16_t motorCurrent;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum

	switch(pcmd[cstack].cobject) {
    1e46:	08 2f       	mov	r16, r24
    1e48:	10 e0       	ldi	r17, 0x00	; 0
    1e4a:	84 e3       	ldi	r24, 0x34	; 52
    1e4c:	80 9f       	mul	r24, r16
    1e4e:	f0 01       	movw	r30, r0
    1e50:	81 9f       	mul	r24, r17
    1e52:	f0 0d       	add	r31, r0
    1e54:	11 24       	eor	r1, r1
    1e56:	ed 5f       	subi	r30, 0xFD	; 253
    1e58:	f7 4d       	sbci	r31, 0xD7	; 215
    1e5a:	e1 81       	ldd	r30, Z+1	; 0x01
    1e5c:	8e 2f       	mov	r24, r30
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	fc 01       	movw	r30, r24
    1e62:	e1 54       	subi	r30, 0x41	; 65
    1e64:	f1 09       	sbc	r31, r1
    1e66:	e6 33       	cpi	r30, 0x36	; 54
    1e68:	f1 05       	cpc	r31, r1
    1e6a:	08 f0       	brcs	.+2      	; 0x1e6e <report+0x148>
    1e6c:	c6 c4       	rjmp	.+2444   	; 0x27fa <report+0xad4>
    1e6e:	e4 58       	subi	r30, 0x84	; 132
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	0c 94 5d 23 	jmp	0x46ba	; 0x46ba <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    1e76:	ce 01       	movw	r24, r28
    1e78:	86 5f       	subi	r24, 0xF6	; 246
    1e7a:	9e 4f       	sbci	r25, 0xFE	; 254
    1e7c:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
			controller = pcmd[cstack].cobject + 63;
    1e80:	84 e3       	ldi	r24, 0x34	; 52
    1e82:	80 9f       	mul	r24, r16
    1e84:	f0 01       	movw	r30, r0
    1e86:	81 9f       	mul	r24, r17
    1e88:	f0 0d       	add	r31, r0
    1e8a:	11 24       	eor	r1, r1
    1e8c:	ed 5f       	subi	r30, 0xFD	; 253
    1e8e:	f7 4d       	sbci	r31, 0xD7	; 215
    1e90:	f1 80       	ldd	r15, Z+1	; 0x01
    1e92:	0f 2e       	mov	r0, r31
    1e94:	ff e3       	ldi	r31, 0x3F	; 63
    1e96:	ef 2e       	mov	r14, r31
    1e98:	f0 2d       	mov	r31, r0
    1e9a:	ef 0c       	add	r14, r15
			retval = get_MOTORFloat(controller, READMAINVOLTAGE, &voltage);
    1e9c:	ae 01       	movw	r20, r28
    1e9e:	4b 53       	subi	r20, 0x3B	; 59
    1ea0:	5d 4f       	sbci	r21, 0xFD	; 253
    1ea2:	68 e1       	ldi	r22, 0x18	; 24
    1ea4:	8e 2d       	mov	r24, r14
    1ea6:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <get_MOTORFloat>
			if (retval == ERROR) {
    1eaa:	83 36       	cpi	r24, 0x63	; 99
    1eac:	61 f4       	brne	.+24     	; 0x1ec6 <report+0x1a0>
				voltage = -666.0;
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e8       	ldi	r25, 0x80	; 128
    1eb2:	a6 e2       	ldi	r26, 0x26	; 38
    1eb4:	b4 ec       	ldi	r27, 0xC4	; 196
    1eb6:	cb 53       	subi	r28, 0x3B	; 59
    1eb8:	dd 4f       	sbci	r29, 0xFD	; 253
    1eba:	88 83       	st	Y, r24
    1ebc:	99 83       	std	Y+1, r25	; 0x01
    1ebe:	aa 83       	std	Y+2, r26	; 0x02
    1ec0:	bb 83       	std	Y+3, r27	; 0x03
    1ec2:	c5 5c       	subi	r28, 0xC5	; 197
    1ec4:	d2 40       	sbci	r29, 0x02	; 2
			}
			retval = get_MOTORFloat(controller, READTEMPERATURE, &t0);
    1ec6:	ae 01       	movw	r20, r28
    1ec8:	4f 53       	subi	r20, 0x3F	; 63
    1eca:	5d 4f       	sbci	r21, 0xFD	; 253
    1ecc:	62 e5       	ldi	r22, 0x52	; 82
    1ece:	8e 2d       	mov	r24, r14
    1ed0:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <get_MOTORFloat>
			if (retval == ERROR) {
    1ed4:	83 36       	cpi	r24, 0x63	; 99
    1ed6:	61 f4       	brne	.+24     	; 0x1ef0 <report+0x1ca>
				t0 = -666.0;
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	90 e8       	ldi	r25, 0x80	; 128
    1edc:	a6 e2       	ldi	r26, 0x26	; 38
    1ede:	b4 ec       	ldi	r27, 0xC4	; 196
    1ee0:	cf 53       	subi	r28, 0x3F	; 63
    1ee2:	dd 4f       	sbci	r29, 0xFD	; 253
    1ee4:	88 83       	st	Y, r24
    1ee6:	99 83       	std	Y+1, r25	; 0x01
    1ee8:	aa 83       	std	Y+2, r26	; 0x02
    1eea:	bb 83       	std	Y+3, r27	; 0x03
    1eec:	c1 5c       	subi	r28, 0xC1	; 193
    1eee:	d2 40       	sbci	r29, 0x02	; 2
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
    1ef0:	24 e3       	ldi	r18, 0x34	; 52
    1ef2:	20 9f       	mul	r18, r16
    1ef4:	c0 01       	movw	r24, r0
    1ef6:	21 9f       	mul	r18, r17
    1ef8:	90 0d       	add	r25, r0
    1efa:	11 24       	eor	r1, r1
    1efc:	82 5d       	subi	r24, 0xD2	; 210
    1efe:	97 4d       	sbci	r25, 0xD7	; 215
			}
			retval = get_MOTORFloat(controller, READTEMPERATURE, &t0);
			if (retval == ERROR) {
				t0 = -666.0;
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
    1f00:	9f 93       	push	r25
    1f02:	8f 93       	push	r24
    1f04:	cc 53       	subi	r28, 0x3C	; 60
    1f06:	dd 4f       	sbci	r29, 0xFD	; 253
    1f08:	88 81       	ld	r24, Y
    1f0a:	c4 5c       	subi	r28, 0xC4	; 196
    1f0c:	d2 40       	sbci	r29, 0x02	; 2
    1f0e:	8f 93       	push	r24
    1f10:	cd 53       	subi	r28, 0x3D	; 61
    1f12:	dd 4f       	sbci	r29, 0xFD	; 253
    1f14:	88 81       	ld	r24, Y
    1f16:	c3 5c       	subi	r28, 0xC3	; 195
    1f18:	d2 40       	sbci	r29, 0x02	; 2
    1f1a:	8f 93       	push	r24
    1f1c:	ce 53       	subi	r28, 0x3E	; 62
    1f1e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f20:	88 81       	ld	r24, Y
    1f22:	c2 5c       	subi	r28, 0xC2	; 194
    1f24:	d2 40       	sbci	r29, 0x02	; 2
    1f26:	8f 93       	push	r24
    1f28:	cf 53       	subi	r28, 0x3F	; 63
    1f2a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f2c:	88 81       	ld	r24, Y
    1f2e:	c1 5c       	subi	r28, 0xC1	; 193
    1f30:	d2 40       	sbci	r29, 0x02	; 2
    1f32:	8f 93       	push	r24
    1f34:	c8 53       	subi	r28, 0x38	; 56
    1f36:	dd 4f       	sbci	r29, 0xFD	; 253
    1f38:	88 81       	ld	r24, Y
    1f3a:	c8 5c       	subi	r28, 0xC8	; 200
    1f3c:	d2 40       	sbci	r29, 0x02	; 2
    1f3e:	8f 93       	push	r24
    1f40:	c9 53       	subi	r28, 0x39	; 57
    1f42:	dd 4f       	sbci	r29, 0xFD	; 253
    1f44:	88 81       	ld	r24, Y
    1f46:	c7 5c       	subi	r28, 0xC7	; 199
    1f48:	d2 40       	sbci	r29, 0x02	; 2
    1f4a:	8f 93       	push	r24
    1f4c:	ca 53       	subi	r28, 0x3A	; 58
    1f4e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f50:	88 81       	ld	r24, Y
    1f52:	c6 5c       	subi	r28, 0xC6	; 198
    1f54:	d2 40       	sbci	r29, 0x02	; 2
    1f56:	8f 93       	push	r24
    1f58:	cb 53       	subi	r28, 0x3B	; 59
    1f5a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f5c:	88 81       	ld	r24, Y
    1f5e:	c5 5c       	subi	r28, 0xC5	; 197
    1f60:	d2 40       	sbci	r29, 0x02	; 2
    1f62:	8f 93       	push	r24
    1f64:	1f 92       	push	r1
    1f66:	ff 92       	push	r15
    1f68:	ce 01       	movw	r24, r28
    1f6a:	86 5f       	subi	r24, 0xF6	; 246
    1f6c:	9e 4f       	sbci	r25, 0xFE	; 254
    1f6e:	9f 93       	push	r25
    1f70:	8f 93       	push	r24
    1f72:	8c 54       	subi	r24, 0x4C	; 76
    1f74:	9f 4f       	sbci	r25, 0xFF	; 255
    1f76:	9f 93       	push	r25
    1f78:	8f 93       	push	r24
    1f7a:	8e 01       	movw	r16, r28
    1f7c:	0f 5f       	subi	r16, 0xFF	; 255
    1f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f80:	1f 93       	push	r17
    1f82:	0f 93       	push	r16
    1f84:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
				voltage, t0, pcmd[cstack].cid);
			printLine(outbuf);
    1f88:	c8 01       	movw	r24, r16
    1f8a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			break;
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    1f92:	80 e0       	ldi	r24, 0x00	; 0
				t0 = -666.0;
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    1f94:	39 c4       	rjmp	.+2162   	; 0x2808 <report+0xae2>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    1f96:	ce 01       	movw	r24, r28
    1f98:	86 5f       	subi	r24, 0xF6	; 246
    1f9a:	9e 4f       	sbci	r25, 0xFE	; 254
    1f9c:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
			controller = pcmd[cstack].cobject + 31;
    1fa0:	84 e3       	ldi	r24, 0x34	; 52
    1fa2:	80 9f       	mul	r24, r16
    1fa4:	f0 01       	movw	r30, r0
    1fa6:	81 9f       	mul	r24, r17
    1fa8:	f0 0d       	add	r31, r0
    1faa:	11 24       	eor	r1, r1
    1fac:	ed 5f       	subi	r30, 0xFD	; 253
    1fae:	f7 4d       	sbci	r31, 0xD7	; 215
    1fb0:	81 81       	ldd	r24, Z+1	; 0x01
    1fb2:	0f 2e       	mov	r0, r31
    1fb4:	ff e1       	ldi	r31, 0x1F	; 31
    1fb6:	7f 2e       	mov	r7, r31
    1fb8:	f0 2d       	mov	r31, r0
    1fba:	78 0e       	add	r7, r24
			retval = get_MOTOREncoder(controller, ENCODERCOUNT, &encoderValue);
    1fbc:	ae 01       	movw	r20, r28
    1fbe:	4b 54       	subi	r20, 0x4B	; 75
    1fc0:	5d 4f       	sbci	r21, 0xFD	; 253
    1fc2:	60 e1       	ldi	r22, 0x10	; 16
    1fc4:	87 2d       	mov	r24, r7
    1fc6:	0e 94 be 14 	call	0x297c	; 0x297c <get_MOTOREncoder>
			if (retval == ERROR) {
    1fca:	83 36       	cpi	r24, 0x63	; 99
    1fcc:	61 f4       	brne	.+24     	; 0x1fe6 <report+0x2c0>
				encoderValue = 0x7FFFFFFF;
    1fce:	8f ef       	ldi	r24, 0xFF	; 255
    1fd0:	9f ef       	ldi	r25, 0xFF	; 255
    1fd2:	af ef       	ldi	r26, 0xFF	; 255
    1fd4:	bf e7       	ldi	r27, 0x7F	; 127
    1fd6:	cb 54       	subi	r28, 0x4B	; 75
    1fd8:	dd 4f       	sbci	r29, 0xFD	; 253
    1fda:	88 83       	st	Y, r24
    1fdc:	99 83       	std	Y+1, r25	; 0x01
    1fde:	aa 83       	std	Y+2, r26	; 0x02
    1fe0:	bb 83       	std	Y+3, r27	; 0x03
    1fe2:	c5 5b       	subi	r28, 0xB5	; 181
    1fe4:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronValue = enc2microns(encoderValue);
    1fe6:	cb 54       	subi	r28, 0x4B	; 75
    1fe8:	dd 4f       	sbci	r29, 0xFD	; 253
    1fea:	68 81       	ld	r22, Y
    1fec:	79 81       	ldd	r23, Y+1	; 0x01
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff2:	c5 5b       	subi	r28, 0xB5	; 181
    1ff4:	d2 40       	sbci	r29, 0x02	; 2
    1ff6:	0e 94 40 14 	call	0x2880	; 0x2880 <enc2microns>
    1ffa:	6c 01       	movw	r12, r24
    1ffc:	99 0f       	add	r25, r25
    1ffe:	ee 08       	sbc	r14, r14
    2000:	ff 08       	sbc	r15, r15
//			micronValue = encoderValue/ROBOCOUNTSPERMICRON;

			if (get_MOTORSpeed(controller, &encoderSpeed, &encoderDirection) == ERROR) {
    2002:	ae 01       	movw	r20, r28
    2004:	4c 54       	subi	r20, 0x4C	; 76
    2006:	5d 4f       	sbci	r21, 0xFD	; 253
    2008:	be 01       	movw	r22, r28
    200a:	67 54       	subi	r22, 0x47	; 71
    200c:	7d 4f       	sbci	r23, 0xFD	; 253
    200e:	87 2d       	mov	r24, r7
    2010:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <get_MOTORSpeed>
    2014:	83 36       	cpi	r24, 0x63	; 99
    2016:	61 f4       	brne	.+24     	; 0x2030 <report+0x30a>
				encoderSpeed = 0x7FFFFFFF;
    2018:	8f ef       	ldi	r24, 0xFF	; 255
    201a:	9f ef       	ldi	r25, 0xFF	; 255
    201c:	af ef       	ldi	r26, 0xFF	; 255
    201e:	bf e7       	ldi	r27, 0x7F	; 127
    2020:	c7 54       	subi	r28, 0x47	; 71
    2022:	dd 4f       	sbci	r29, 0xFD	; 253
    2024:	88 83       	st	Y, r24
    2026:	99 83       	std	Y+1, r25	; 0x01
    2028:	aa 83       	std	Y+2, r26	; 0x02
    202a:	bb 83       	std	Y+3, r27	; 0x03
    202c:	c9 5b       	subi	r28, 0xB9	; 185
    202e:	d2 40       	sbci	r29, 0x02	; 2
			if (retval == ERROR) {
				encoderSpeed = 0x7FFFFFFF;
			}
*/

			micronSpeed = enc2microns(encoderSpeed);
    2030:	c7 54       	subi	r28, 0x47	; 71
    2032:	dd 4f       	sbci	r29, 0xFD	; 253
    2034:	68 81       	ld	r22, Y
    2036:	79 81       	ldd	r23, Y+1	; 0x01
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	9b 81       	ldd	r25, Y+3	; 0x03
    203c:	c9 5b       	subi	r28, 0xB9	; 185
    203e:	d2 40       	sbci	r29, 0x02	; 2
    2040:	0e 94 40 14 	call	0x2880	; 0x2880 <enc2microns>
    2044:	4c 01       	movw	r8, r24
    2046:	99 0f       	add	r25, r25
    2048:	aa 08       	sbc	r10, r10
    204a:	bb 08       	sbc	r11, r11
//			micronSpeed = encoderSpeed/ROBOCOUNTSPERMICRON;
			retval = get_MOTORCurrent(controller, ROBOREADCURRENT, &icurrents);
    204c:	ae 01       	movw	r20, r28
    204e:	43 54       	subi	r20, 0x43	; 67
    2050:	5d 4f       	sbci	r21, 0xFD	; 253
    2052:	61 e3       	ldi	r22, 0x31	; 49
    2054:	87 2d       	mov	r24, r7
    2056:	0e 94 f5 15 	call	0x2bea	; 0x2bea <get_MOTORCurrent>
			if (retval == ERROR) {
    205a:	83 36       	cpi	r24, 0x63	; 99
    205c:	59 f4       	brne	.+22     	; 0x2074 <report+0x34e>
				icurrents = 0xFFFFFFFF;
    205e:	8f ef       	ldi	r24, 0xFF	; 255
    2060:	9f ef       	ldi	r25, 0xFF	; 255
    2062:	dc 01       	movw	r26, r24
    2064:	c3 54       	subi	r28, 0x43	; 67
    2066:	dd 4f       	sbci	r29, 0xFD	; 253
    2068:	88 83       	st	Y, r24
    206a:	99 83       	std	Y+1, r25	; 0x01
    206c:	aa 83       	std	Y+2, r26	; 0x02
    206e:	bb 83       	std	Y+3, r27	; 0x03
    2070:	cd 5b       	subi	r28, 0xBD	; 189
    2072:	d2 40       	sbci	r29, 0x02	; 2
			}
			motorCurrent = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
    2074:	c3 54       	subi	r28, 0x43	; 67
    2076:	dd 4f       	sbci	r29, 0xFD	; 253
    2078:	48 81       	ld	r20, Y
    207a:	59 81       	ldd	r21, Y+1	; 0x01
    207c:	6a 81       	ldd	r22, Y+2	; 0x02
    207e:	7b 81       	ldd	r23, Y+3	; 0x03
    2080:	cd 5b       	subi	r28, 0xBD	; 189
    2082:	d2 40       	sbci	r29, 0x02	; 2
    2084:	ab 01       	movw	r20, r22
    2086:	66 27       	eor	r22, r22
    2088:	77 27       	eor	r23, r23
    208a:	ca 01       	movw	r24, r20
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	44 0f       	add	r20, r20
    2092:	55 1f       	adc	r21, r21
    2094:	44 0f       	add	r20, r20
    2096:	55 1f       	adc	r21, r21
    2098:	44 0f       	add	r20, r20
    209a:	55 1f       	adc	r21, r21
    209c:	48 0f       	add	r20, r24
    209e:	59 1f       	adc	r21, r25
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
    20a0:	24 e3       	ldi	r18, 0x34	; 52
    20a2:	20 9f       	mul	r18, r16
    20a4:	c0 01       	movw	r24, r0
    20a6:	21 9f       	mul	r18, r17
    20a8:	90 0d       	add	r25, r0
    20aa:	11 24       	eor	r1, r1
    20ac:	9c 01       	movw	r18, r24
    20ae:	22 5d       	subi	r18, 0xD2	; 210
    20b0:	37 4d       	sbci	r19, 0xD7	; 215
			retval = get_MOTORCurrent(controller, ROBOREADCURRENT, &icurrents);
			if (retval == ERROR) {
				icurrents = 0xFFFFFFFF;
			}
			motorCurrent = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
    20b2:	fc 01       	movw	r30, r24
    20b4:	ed 5f       	subi	r30, 0xFD	; 253
    20b6:	f7 4d       	sbci	r31, 0xD7	; 215
    20b8:	81 81       	ldd	r24, Z+1	; 0x01
    20ba:	3f 93       	push	r19
    20bc:	2f 93       	push	r18
    20be:	5f 93       	push	r21
    20c0:	4f 93       	push	r20
    20c2:	bf 92       	push	r11
    20c4:	af 92       	push	r10
    20c6:	9f 92       	push	r9
    20c8:	8f 92       	push	r8
    20ca:	ff 92       	push	r15
    20cc:	ef 92       	push	r14
    20ce:	df 92       	push	r13
    20d0:	cf 92       	push	r12
    20d2:	1f 92       	push	r1
    20d4:	8f 93       	push	r24
    20d6:	ce 01       	movw	r24, r28
    20d8:	86 5f       	subi	r24, 0xF6	; 246
    20da:	9e 4f       	sbci	r25, 0xFE	; 254
    20dc:	9f 93       	push	r25
    20de:	8f 93       	push	r24
    20e0:	8b 57       	subi	r24, 0x7B	; 123
    20e2:	9f 4f       	sbci	r25, 0xFF	; 255
    20e4:	9f 93       	push	r25
    20e6:	8f 93       	push	r24
    20e8:	8e 01       	movw	r16, r28
    20ea:	0f 5f       	subi	r16, 0xFF	; 255
    20ec:	1f 4f       	sbci	r17, 0xFF	; 255
    20ee:	1f 93       	push	r17
    20f0:	0f 93       	push	r16
    20f2:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
				micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
			printLine(outbuf);
    20f6:	c8 01       	movw	r24, r16
    20f8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			break;
    20fc:	cd bf       	out	0x3d, r28	; 61
    20fe:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2100:	80 e0       	ldi	r24, 0x00	; 0
			}
			motorCurrent = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    2102:	82 c3       	rjmp	.+1796   	; 0x2808 <report+0xae2>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	0e 94 b3 19 	call	0x3366	; 0x3366 <get_temperature>
    210a:	cf 53       	subi	r28, 0x3F	; 63
    210c:	dd 4f       	sbci	r29, 0xFD	; 253
    210e:	68 83       	st	Y, r22
    2110:	79 83       	std	Y+1, r23	; 0x01
    2112:	8a 83       	std	Y+2, r24	; 0x02
    2114:	9b 83       	std	Y+3, r25	; 0x03
    2116:	c1 5c       	subi	r28, 0xC1	; 193
    2118:	d2 40       	sbci	r29, 0x02	; 2
			h0 = get_humidity(0);
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	0e 94 7e 07 	call	0xefc	; 0xefc <get_humidity>
    2120:	d6 2e       	mov	r13, r22
    2122:	c7 2e       	mov	r12, r23
    2124:	b8 2e       	mov	r11, r24
    2126:	a9 2e       	mov	r10, r25
			t1 = get_temperature(1);
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	0e 94 b3 19 	call	0x3366	; 0x3366 <get_temperature>
    212e:	cb 52       	subi	r28, 0x2B	; 43
    2130:	dd 4f       	sbci	r29, 0xFD	; 253
    2132:	68 83       	st	Y, r22
    2134:	c5 5d       	subi	r28, 0xD5	; 213
    2136:	d2 40       	sbci	r29, 0x02	; 2
    2138:	ca 52       	subi	r28, 0x2A	; 42
    213a:	dd 4f       	sbci	r29, 0xFD	; 253
    213c:	78 83       	st	Y, r23
    213e:	c6 5d       	subi	r28, 0xD6	; 214
    2140:	d2 40       	sbci	r29, 0x02	; 2
    2142:	c9 52       	subi	r28, 0x29	; 41
    2144:	dd 4f       	sbci	r29, 0xFD	; 253
    2146:	88 83       	st	Y, r24
    2148:	c7 5d       	subi	r28, 0xD7	; 215
    214a:	d2 40       	sbci	r29, 0x02	; 2
    214c:	c8 52       	subi	r28, 0x28	; 40
    214e:	dd 4f       	sbci	r29, 0xFD	; 253
    2150:	98 83       	st	Y, r25
    2152:	c8 5d       	subi	r28, 0xD8	; 216
    2154:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	0e 94 7e 07 	call	0xefc	; 0xefc <get_humidity>
    215c:	c7 52       	subi	r28, 0x27	; 39
    215e:	dd 4f       	sbci	r29, 0xFD	; 253
    2160:	68 83       	st	Y, r22
    2162:	c9 5d       	subi	r28, 0xD9	; 217
    2164:	d2 40       	sbci	r29, 0x02	; 2
    2166:	c6 52       	subi	r28, 0x26	; 38
    2168:	dd 4f       	sbci	r29, 0xFD	; 253
    216a:	78 83       	st	Y, r23
    216c:	ca 5d       	subi	r28, 0xDA	; 218
    216e:	d2 40       	sbci	r29, 0x02	; 2
    2170:	c5 52       	subi	r28, 0x25	; 37
    2172:	dd 4f       	sbci	r29, 0xFD	; 253
    2174:	88 83       	st	Y, r24
    2176:	cb 5d       	subi	r28, 0xDB	; 219
    2178:	d2 40       	sbci	r29, 0x02	; 2
    217a:	c4 52       	subi	r28, 0x24	; 36
    217c:	dd 4f       	sbci	r29, 0xFD	; 253
    217e:	98 83       	st	Y, r25
    2180:	cc 5d       	subi	r28, 0xDC	; 220
    2182:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    2184:	82 e0       	ldi	r24, 0x02	; 2
    2186:	0e 94 b3 19 	call	0x3366	; 0x3366 <get_temperature>
    218a:	c3 52       	subi	r28, 0x23	; 35
    218c:	dd 4f       	sbci	r29, 0xFD	; 253
    218e:	68 83       	st	Y, r22
    2190:	cd 5d       	subi	r28, 0xDD	; 221
    2192:	d2 40       	sbci	r29, 0x02	; 2
    2194:	c2 52       	subi	r28, 0x22	; 34
    2196:	dd 4f       	sbci	r29, 0xFD	; 253
    2198:	78 83       	st	Y, r23
    219a:	ce 5d       	subi	r28, 0xDE	; 222
    219c:	d2 40       	sbci	r29, 0x02	; 2
    219e:	98 2e       	mov	r9, r24
    21a0:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    21a2:	82 e0       	ldi	r24, 0x02	; 2
    21a4:	0e 94 7e 07 	call	0xefc	; 0xefc <get_humidity>
    21a8:	76 2e       	mov	r7, r22
    21aa:	67 2e       	mov	r6, r23
    21ac:	58 2e       	mov	r5, r24
    21ae:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    21b0:	83 e0       	ldi	r24, 0x03	; 3
    21b2:	0e 94 b3 19 	call	0x3366	; 0x3366 <get_temperature>
    21b6:	c1 52       	subi	r28, 0x21	; 33
    21b8:	dd 4f       	sbci	r29, 0xFD	; 253
    21ba:	68 83       	st	Y, r22
    21bc:	cf 5d       	subi	r28, 0xDF	; 223
    21be:	d2 40       	sbci	r29, 0x02	; 2
    21c0:	c0 52       	subi	r28, 0x20	; 32
    21c2:	dd 4f       	sbci	r29, 0xFD	; 253
    21c4:	78 83       	st	Y, r23
    21c6:	c0 5e       	subi	r28, 0xE0	; 224
    21c8:	d2 40       	sbci	r29, 0x02	; 2
    21ca:	38 2e       	mov	r3, r24
    21cc:	29 2e       	mov	r2, r25
			get_time(currenttime);
    21ce:	7e 01       	movw	r14, r28
    21d0:	96 ef       	ldi	r25, 0xF6	; 246
    21d2:	e9 1a       	sub	r14, r25
    21d4:	9e ef       	ldi	r25, 0xFE	; 254
    21d6:	f9 0a       	sbc	r15, r25
    21d8:	c7 01       	movw	r24, r14
    21da:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    21de:	24 e3       	ldi	r18, 0x34	; 52
    21e0:	20 9f       	mul	r18, r16
    21e2:	c0 01       	movw	r24, r0
    21e4:	21 9f       	mul	r18, r17
    21e6:	90 0d       	add	r25, r0
    21e8:	11 24       	eor	r1, r1
    21ea:	82 5d       	subi	r24, 0xD2	; 210
    21ec:	97 4d       	sbci	r25, 0xD7	; 215
    21ee:	9f 93       	push	r25
    21f0:	8f 93       	push	r24
    21f2:	2f 92       	push	r2
    21f4:	3f 92       	push	r3
    21f6:	c0 52       	subi	r28, 0x20	; 32
    21f8:	dd 4f       	sbci	r29, 0xFD	; 253
    21fa:	88 81       	ld	r24, Y
    21fc:	c0 5e       	subi	r28, 0xE0	; 224
    21fe:	d2 40       	sbci	r29, 0x02	; 2
    2200:	8f 93       	push	r24
    2202:	c1 52       	subi	r28, 0x21	; 33
    2204:	dd 4f       	sbci	r29, 0xFD	; 253
    2206:	98 81       	ld	r25, Y
    2208:	cf 5d       	subi	r28, 0xDF	; 223
    220a:	d2 40       	sbci	r29, 0x02	; 2
    220c:	9f 93       	push	r25
    220e:	4f 92       	push	r4
    2210:	5f 92       	push	r5
    2212:	6f 92       	push	r6
    2214:	7f 92       	push	r7
    2216:	8f 92       	push	r8
    2218:	9f 92       	push	r9
    221a:	c2 52       	subi	r28, 0x22	; 34
    221c:	dd 4f       	sbci	r29, 0xFD	; 253
    221e:	88 81       	ld	r24, Y
    2220:	ce 5d       	subi	r28, 0xDE	; 222
    2222:	d2 40       	sbci	r29, 0x02	; 2
    2224:	8f 93       	push	r24
    2226:	c3 52       	subi	r28, 0x23	; 35
    2228:	dd 4f       	sbci	r29, 0xFD	; 253
    222a:	98 81       	ld	r25, Y
    222c:	cd 5d       	subi	r28, 0xDD	; 221
    222e:	d2 40       	sbci	r29, 0x02	; 2
    2230:	9f 93       	push	r25
    2232:	c4 52       	subi	r28, 0x24	; 36
    2234:	dd 4f       	sbci	r29, 0xFD	; 253
    2236:	88 81       	ld	r24, Y
    2238:	cc 5d       	subi	r28, 0xDC	; 220
    223a:	d2 40       	sbci	r29, 0x02	; 2
    223c:	8f 93       	push	r24
    223e:	c5 52       	subi	r28, 0x25	; 37
    2240:	dd 4f       	sbci	r29, 0xFD	; 253
    2242:	98 81       	ld	r25, Y
    2244:	cb 5d       	subi	r28, 0xDB	; 219
    2246:	d2 40       	sbci	r29, 0x02	; 2
    2248:	9f 93       	push	r25
    224a:	c6 52       	subi	r28, 0x26	; 38
    224c:	dd 4f       	sbci	r29, 0xFD	; 253
    224e:	88 81       	ld	r24, Y
    2250:	ca 5d       	subi	r28, 0xDA	; 218
    2252:	d2 40       	sbci	r29, 0x02	; 2
    2254:	8f 93       	push	r24
    2256:	c7 52       	subi	r28, 0x27	; 39
    2258:	dd 4f       	sbci	r29, 0xFD	; 253
    225a:	98 81       	ld	r25, Y
    225c:	c9 5d       	subi	r28, 0xD9	; 217
    225e:	d2 40       	sbci	r29, 0x02	; 2
    2260:	9f 93       	push	r25
    2262:	c8 52       	subi	r28, 0x28	; 40
    2264:	dd 4f       	sbci	r29, 0xFD	; 253
    2266:	88 81       	ld	r24, Y
    2268:	c8 5d       	subi	r28, 0xD8	; 216
    226a:	d2 40       	sbci	r29, 0x02	; 2
    226c:	8f 93       	push	r24
    226e:	c9 52       	subi	r28, 0x29	; 41
    2270:	dd 4f       	sbci	r29, 0xFD	; 253
    2272:	98 81       	ld	r25, Y
    2274:	c7 5d       	subi	r28, 0xD7	; 215
    2276:	d2 40       	sbci	r29, 0x02	; 2
    2278:	9f 93       	push	r25
    227a:	ca 52       	subi	r28, 0x2A	; 42
    227c:	dd 4f       	sbci	r29, 0xFD	; 253
    227e:	88 81       	ld	r24, Y
    2280:	c6 5d       	subi	r28, 0xD6	; 214
    2282:	d2 40       	sbci	r29, 0x02	; 2
    2284:	8f 93       	push	r24
    2286:	cb 52       	subi	r28, 0x2B	; 43
    2288:	dd 4f       	sbci	r29, 0xFD	; 253
    228a:	98 81       	ld	r25, Y
    228c:	c5 5d       	subi	r28, 0xD5	; 213
    228e:	d2 40       	sbci	r29, 0x02	; 2
    2290:	9f 93       	push	r25
    2292:	af 92       	push	r10
    2294:	bf 92       	push	r11
    2296:	cf 92       	push	r12
    2298:	df 92       	push	r13
    229a:	cc 53       	subi	r28, 0x3C	; 60
    229c:	dd 4f       	sbci	r29, 0xFD	; 253
    229e:	88 81       	ld	r24, Y
    22a0:	c4 5c       	subi	r28, 0xC4	; 196
    22a2:	d2 40       	sbci	r29, 0x02	; 2
    22a4:	8f 93       	push	r24
    22a6:	cd 53       	subi	r28, 0x3D	; 61
    22a8:	dd 4f       	sbci	r29, 0xFD	; 253
    22aa:	88 81       	ld	r24, Y
    22ac:	c3 5c       	subi	r28, 0xC3	; 195
    22ae:	d2 40       	sbci	r29, 0x02	; 2
    22b0:	8f 93       	push	r24
    22b2:	ce 53       	subi	r28, 0x3E	; 62
    22b4:	dd 4f       	sbci	r29, 0xFD	; 253
    22b6:	88 81       	ld	r24, Y
    22b8:	c2 5c       	subi	r28, 0xC2	; 194
    22ba:	d2 40       	sbci	r29, 0x02	; 2
    22bc:	8f 93       	push	r24
    22be:	cf 53       	subi	r28, 0x3F	; 63
    22c0:	dd 4f       	sbci	r29, 0xFD	; 253
    22c2:	88 81       	ld	r24, Y
    22c4:	c1 5c       	subi	r28, 0xC1	; 193
    22c6:	d2 40       	sbci	r29, 0x02	; 2
    22c8:	8f 93       	push	r24
    22ca:	ff 92       	push	r15
    22cc:	ef 92       	push	r14
    22ce:	ce 01       	movw	r24, r28
    22d0:	86 5b       	subi	r24, 0xB6	; 182
    22d2:	9e 4f       	sbci	r25, 0xFE	; 254
    22d4:	9f 93       	push	r25
    22d6:	8f 93       	push	r24
    22d8:	8e 01       	movw	r16, r28
    22da:	0f 5f       	subi	r16, 0xFF	; 255
    22dc:	1f 4f       	sbci	r17, 0xFF	; 255
    22de:	1f 93       	push	r17
    22e0:	0f 93       	push	r16
    22e2:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
			printLine(outbuf);
    22e6:	cd bf       	out	0x3d, r28	; 61
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	c8 01       	movw	r24, r16
    22ec:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "Temp & Humidity", 1);
    22f0:	41 e0       	ldi	r20, 0x01	; 1
    22f2:	65 ea       	ldi	r22, 0xA5	; 165
    22f4:	7d e8       	ldi	r23, 0x8D	; 141
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	0e 94 01 0c 	call	0x1802	; 0x1802 <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    22fc:	cf 53       	subi	r28, 0x3F	; 63
    22fe:	dd 4f       	sbci	r29, 0xFD	; 253
    2300:	f8 80       	ld	r15, Y
    2302:	c1 5c       	subi	r28, 0xC1	; 193
    2304:	d2 40       	sbci	r29, 0x02	; 2
    2306:	ce 53       	subi	r28, 0x3E	; 62
    2308:	dd 4f       	sbci	r29, 0xFD	; 253
    230a:	e8 80       	ld	r14, Y
    230c:	c2 5c       	subi	r28, 0xC2	; 194
    230e:	d2 40       	sbci	r29, 0x02	; 2
    2310:	cd 53       	subi	r28, 0x3D	; 61
    2312:	dd 4f       	sbci	r29, 0xFD	; 253
    2314:	98 80       	ld	r9, Y
    2316:	c3 5c       	subi	r28, 0xC3	; 195
    2318:	d2 40       	sbci	r29, 0x02	; 2
    231a:	cc 53       	subi	r28, 0x3C	; 60
    231c:	dd 4f       	sbci	r29, 0xFD	; 253
    231e:	88 80       	ld	r8, Y
    2320:	c4 5c       	subi	r28, 0xC4	; 196
    2322:	d2 40       	sbci	r29, 0x02	; 2
    2324:	26 e6       	ldi	r18, 0x66	; 102
    2326:	36 e6       	ldi	r19, 0x66	; 102
    2328:	46 ee       	ldi	r20, 0xE6	; 230
    232a:	5f e3       	ldi	r21, 0x3F	; 63
    232c:	6f 2d       	mov	r22, r15
    232e:	7e 2d       	mov	r23, r14
    2330:	89 2d       	mov	r24, r9
    2332:	98 2d       	mov	r25, r8
    2334:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <__mulsf3>
    2338:	af 92       	push	r10
    233a:	bf 92       	push	r11
    233c:	cf 92       	push	r12
    233e:	df 92       	push	r13
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	52 e4       	ldi	r21, 0x42	; 66
    2348:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__addsf3>
    234c:	9f 93       	push	r25
    234e:	8f 93       	push	r24
    2350:	7f 93       	push	r23
    2352:	6f 93       	push	r22
    2354:	8f 92       	push	r8
    2356:	9f 92       	push	r9
    2358:	ef 92       	push	r14
    235a:	ff 92       	push	r15
    235c:	85 eb       	ldi	r24, 0xB5	; 181
    235e:	9d e8       	ldi	r25, 0x8D	; 141
    2360:	9f 93       	push	r25
    2362:	8f 93       	push	r24
    2364:	1f 93       	push	r17
    2366:	0f 93       	push	r16
    2368:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
			writestr_OLED(1, outbuf, 2);
    236c:	42 e0       	ldi	r20, 0x02	; 2
    236e:	b8 01       	movw	r22, r16
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	0e 94 01 0c 	call	0x1802	; 0x1802 <writestr_OLED>
			break;
    2376:	cd bf       	out	0x3d, r28	; 61
    2378:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    237a:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    237c:	45 c2       	rjmp	.+1162   	; 0x2808 <report+0xae2>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    237e:	ae 01       	movw	r20, r28
    2380:	4f 52       	subi	r20, 0x2F	; 47
    2382:	5d 4f       	sbci	r21, 0xFD	; 253
    2384:	be 01       	movw	r22, r28
    2386:	63 53       	subi	r22, 0x33	; 51
    2388:	7d 4f       	sbci	r23, 0xFD	; 253
    238a:	ce 01       	movw	r24, r28
    238c:	87 53       	subi	r24, 0x37	; 55
    238e:	9d 4f       	sbci	r25, 0xFD	; 253
    2390:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <get_orientation>
			get_time(currenttime);
    2394:	7e 01       	movw	r14, r28
    2396:	96 ef       	ldi	r25, 0xF6	; 246
    2398:	e9 1a       	sub	r14, r25
    239a:	9e ef       	ldi	r25, 0xFE	; 254
    239c:	f9 0a       	sbc	r15, r25
    239e:	c7 01       	movw	r24, r14
    23a0:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
    23a4:	24 e3       	ldi	r18, 0x34	; 52
    23a6:	20 9f       	mul	r18, r16
    23a8:	c0 01       	movw	r24, r0
    23aa:	21 9f       	mul	r18, r17
    23ac:	90 0d       	add	r25, r0
    23ae:	11 24       	eor	r1, r1
    23b0:	82 5d       	subi	r24, 0xD2	; 210
    23b2:	97 4d       	sbci	r25, 0xD7	; 215
    23b4:	9f 93       	push	r25
    23b6:	8f 93       	push	r24
    23b8:	cc 52       	subi	r28, 0x2C	; 44
    23ba:	dd 4f       	sbci	r29, 0xFD	; 253
    23bc:	88 81       	ld	r24, Y
    23be:	c4 5d       	subi	r28, 0xD4	; 212
    23c0:	d2 40       	sbci	r29, 0x02	; 2
    23c2:	8f 93       	push	r24
    23c4:	cd 52       	subi	r28, 0x2D	; 45
    23c6:	dd 4f       	sbci	r29, 0xFD	; 253
    23c8:	88 81       	ld	r24, Y
    23ca:	c3 5d       	subi	r28, 0xD3	; 211
    23cc:	d2 40       	sbci	r29, 0x02	; 2
    23ce:	8f 93       	push	r24
    23d0:	ce 52       	subi	r28, 0x2E	; 46
    23d2:	dd 4f       	sbci	r29, 0xFD	; 253
    23d4:	88 81       	ld	r24, Y
    23d6:	c2 5d       	subi	r28, 0xD2	; 210
    23d8:	d2 40       	sbci	r29, 0x02	; 2
    23da:	8f 93       	push	r24
    23dc:	cf 52       	subi	r28, 0x2F	; 47
    23de:	dd 4f       	sbci	r29, 0xFD	; 253
    23e0:	88 81       	ld	r24, Y
    23e2:	c1 5d       	subi	r28, 0xD1	; 209
    23e4:	d2 40       	sbci	r29, 0x02	; 2
    23e6:	8f 93       	push	r24
    23e8:	c0 53       	subi	r28, 0x30	; 48
    23ea:	dd 4f       	sbci	r29, 0xFD	; 253
    23ec:	88 81       	ld	r24, Y
    23ee:	c0 5d       	subi	r28, 0xD0	; 208
    23f0:	d2 40       	sbci	r29, 0x02	; 2
    23f2:	8f 93       	push	r24
    23f4:	c1 53       	subi	r28, 0x31	; 49
    23f6:	dd 4f       	sbci	r29, 0xFD	; 253
    23f8:	88 81       	ld	r24, Y
    23fa:	cf 5c       	subi	r28, 0xCF	; 207
    23fc:	d2 40       	sbci	r29, 0x02	; 2
    23fe:	8f 93       	push	r24
    2400:	c2 53       	subi	r28, 0x32	; 50
    2402:	dd 4f       	sbci	r29, 0xFD	; 253
    2404:	88 81       	ld	r24, Y
    2406:	ce 5c       	subi	r28, 0xCE	; 206
    2408:	d2 40       	sbci	r29, 0x02	; 2
    240a:	8f 93       	push	r24
    240c:	c3 53       	subi	r28, 0x33	; 51
    240e:	dd 4f       	sbci	r29, 0xFD	; 253
    2410:	88 81       	ld	r24, Y
    2412:	cd 5c       	subi	r28, 0xCD	; 205
    2414:	d2 40       	sbci	r29, 0x02	; 2
    2416:	8f 93       	push	r24
    2418:	c4 53       	subi	r28, 0x34	; 52
    241a:	dd 4f       	sbci	r29, 0xFD	; 253
    241c:	88 81       	ld	r24, Y
    241e:	cc 5c       	subi	r28, 0xCC	; 204
    2420:	d2 40       	sbci	r29, 0x02	; 2
    2422:	8f 93       	push	r24
    2424:	c5 53       	subi	r28, 0x35	; 53
    2426:	dd 4f       	sbci	r29, 0xFD	; 253
    2428:	88 81       	ld	r24, Y
    242a:	cb 5c       	subi	r28, 0xCB	; 203
    242c:	d2 40       	sbci	r29, 0x02	; 2
    242e:	8f 93       	push	r24
    2430:	c6 53       	subi	r28, 0x36	; 54
    2432:	dd 4f       	sbci	r29, 0xFD	; 253
    2434:	88 81       	ld	r24, Y
    2436:	ca 5c       	subi	r28, 0xCA	; 202
    2438:	d2 40       	sbci	r29, 0x02	; 2
    243a:	8f 93       	push	r24
    243c:	c7 53       	subi	r28, 0x37	; 55
    243e:	dd 4f       	sbci	r29, 0xFD	; 253
    2440:	88 81       	ld	r24, Y
    2442:	c9 5c       	subi	r28, 0xC9	; 201
    2444:	d2 40       	sbci	r29, 0x02	; 2
    2446:	8f 93       	push	r24
    2448:	ff 92       	push	r15
    244a:	ef 92       	push	r14
    244c:	ce 01       	movw	r24, r28
    244e:	85 52       	subi	r24, 0x25	; 37
    2450:	9e 4f       	sbci	r25, 0xFE	; 254
    2452:	9f 93       	push	r25
    2454:	8f 93       	push	r24
    2456:	8e 01       	movw	r16, r28
    2458:	0f 5f       	subi	r16, 0xFF	; 255
    245a:	1f 4f       	sbci	r17, 0xFF	; 255
    245c:	1f 93       	push	r17
    245e:	0f 93       	push	r16
    2460:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
			printLine(outbuf);
    2464:	c8 01       	movw	r24, r16
    2466:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "Orientation", 1);
    246a:	41 e0       	ldi	r20, 0x01	; 1
    246c:	6b ec       	ldi	r22, 0xCB	; 203
    246e:	7d e8       	ldi	r23, 0x8D	; 141
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	0e 94 01 0c 	call	0x1802	; 0x1802 <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    2476:	cc 52       	subi	r28, 0x2C	; 44
    2478:	dd 4f       	sbci	r29, 0xFD	; 253
    247a:	88 81       	ld	r24, Y
    247c:	c4 5d       	subi	r28, 0xD4	; 212
    247e:	d2 40       	sbci	r29, 0x02	; 2
    2480:	8f 93       	push	r24
    2482:	cd 52       	subi	r28, 0x2D	; 45
    2484:	dd 4f       	sbci	r29, 0xFD	; 253
    2486:	88 81       	ld	r24, Y
    2488:	c3 5d       	subi	r28, 0xD3	; 211
    248a:	d2 40       	sbci	r29, 0x02	; 2
    248c:	8f 93       	push	r24
    248e:	ce 52       	subi	r28, 0x2E	; 46
    2490:	dd 4f       	sbci	r29, 0xFD	; 253
    2492:	88 81       	ld	r24, Y
    2494:	c2 5d       	subi	r28, 0xD2	; 210
    2496:	d2 40       	sbci	r29, 0x02	; 2
    2498:	8f 93       	push	r24
    249a:	cf 52       	subi	r28, 0x2F	; 47
    249c:	dd 4f       	sbci	r29, 0xFD	; 253
    249e:	88 81       	ld	r24, Y
    24a0:	c1 5d       	subi	r28, 0xD1	; 209
    24a2:	d2 40       	sbci	r29, 0x02	; 2
    24a4:	8f 93       	push	r24
    24a6:	c0 53       	subi	r28, 0x30	; 48
    24a8:	dd 4f       	sbci	r29, 0xFD	; 253
    24aa:	88 81       	ld	r24, Y
    24ac:	c0 5d       	subi	r28, 0xD0	; 208
    24ae:	d2 40       	sbci	r29, 0x02	; 2
    24b0:	8f 93       	push	r24
    24b2:	c1 53       	subi	r28, 0x31	; 49
    24b4:	dd 4f       	sbci	r29, 0xFD	; 253
    24b6:	88 81       	ld	r24, Y
    24b8:	cf 5c       	subi	r28, 0xCF	; 207
    24ba:	d2 40       	sbci	r29, 0x02	; 2
    24bc:	8f 93       	push	r24
    24be:	c2 53       	subi	r28, 0x32	; 50
    24c0:	dd 4f       	sbci	r29, 0xFD	; 253
    24c2:	88 81       	ld	r24, Y
    24c4:	ce 5c       	subi	r28, 0xCE	; 206
    24c6:	d2 40       	sbci	r29, 0x02	; 2
    24c8:	8f 93       	push	r24
    24ca:	c3 53       	subi	r28, 0x33	; 51
    24cc:	dd 4f       	sbci	r29, 0xFD	; 253
    24ce:	88 81       	ld	r24, Y
    24d0:	cd 5c       	subi	r28, 0xCD	; 205
    24d2:	d2 40       	sbci	r29, 0x02	; 2
    24d4:	8f 93       	push	r24
    24d6:	c4 53       	subi	r28, 0x34	; 52
    24d8:	dd 4f       	sbci	r29, 0xFD	; 253
    24da:	88 81       	ld	r24, Y
    24dc:	cc 5c       	subi	r28, 0xCC	; 204
    24de:	d2 40       	sbci	r29, 0x02	; 2
    24e0:	8f 93       	push	r24
    24e2:	c5 53       	subi	r28, 0x35	; 53
    24e4:	dd 4f       	sbci	r29, 0xFD	; 253
    24e6:	88 81       	ld	r24, Y
    24e8:	cb 5c       	subi	r28, 0xCB	; 203
    24ea:	d2 40       	sbci	r29, 0x02	; 2
    24ec:	8f 93       	push	r24
    24ee:	c6 53       	subi	r28, 0x36	; 54
    24f0:	dd 4f       	sbci	r29, 0xFD	; 253
    24f2:	88 81       	ld	r24, Y
    24f4:	ca 5c       	subi	r28, 0xCA	; 202
    24f6:	d2 40       	sbci	r29, 0x02	; 2
    24f8:	8f 93       	push	r24
    24fa:	c7 53       	subi	r28, 0x37	; 55
    24fc:	dd 4f       	sbci	r29, 0xFD	; 253
    24fe:	88 81       	ld	r24, Y
    2500:	c9 5c       	subi	r28, 0xC9	; 201
    2502:	d2 40       	sbci	r29, 0x02	; 2
    2504:	8f 93       	push	r24
    2506:	ce 01       	movw	r24, r28
    2508:	89 50       	subi	r24, 0x09	; 9
    250a:	9e 4f       	sbci	r25, 0xFE	; 254
    250c:	9f 93       	push	r25
    250e:	8f 93       	push	r24
    2510:	1f 93       	push	r17
    2512:	0f 93       	push	r16
    2514:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2518:	cd bf       	out	0x3d, r28	; 61
    251a:	de bf       	out	0x3e, r29	; 62
    251c:	42 e0       	ldi	r20, 0x02	; 2
    251e:	b8 01       	movw	r22, r16
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	0e 94 01 0c 	call	0x1802	; 0x1802 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2526:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    2528:	6f c1       	rjmp	.+734    	; 0x2808 <report+0xae2>

		case 'p':					// Pneumatics
			get_time(currenttime);
    252a:	7e 01       	movw	r14, r28
    252c:	96 ef       	ldi	r25, 0xF6	; 246
    252e:	e9 1a       	sub	r14, r25
    2530:	9e ef       	ldi	r25, 0xFE	; 254
    2532:	f9 0a       	sbc	r15, r25
    2534:	c7 01       	movw	r24, r14
    2536:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
			read_PNEUSensors(&shutter, &left, &right, &air);
    253a:	9e 01       	movw	r18, r28
    253c:	27 5b       	subi	r18, 0xB7	; 183
    253e:	3e 4f       	sbci	r19, 0xFE	; 254
    2540:	ae 01       	movw	r20, r28
    2542:	48 5b       	subi	r20, 0xB8	; 184
    2544:	5e 4f       	sbci	r21, 0xFE	; 254
    2546:	be 01       	movw	r22, r28
    2548:	69 5b       	subi	r22, 0xB9	; 185
    254a:	7e 4f       	sbci	r23, 0xFE	; 254
    254c:	ce 01       	movw	r24, r28
    254e:	8a 5b       	subi	r24, 0xBA	; 186
    2550:	9e 4f       	sbci	r25, 0xFE	; 254
    2552:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <read_PNEUSensors>
			sprintf(outbuf, format_PNU, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    2556:	24 e3       	ldi	r18, 0x34	; 52
    2558:	20 9f       	mul	r18, r16
    255a:	c0 01       	movw	r24, r0
    255c:	21 9f       	mul	r18, r17
    255e:	90 0d       	add	r25, r0
    2560:	11 24       	eor	r1, r1
    2562:	82 5d       	subi	r24, 0xD2	; 210
    2564:	97 4d       	sbci	r25, 0xD7	; 215
    2566:	9f 93       	push	r25
    2568:	8f 93       	push	r24
    256a:	c7 5b       	subi	r28, 0xB7	; 183
    256c:	de 4f       	sbci	r29, 0xFE	; 254
    256e:	88 81       	ld	r24, Y
    2570:	c9 54       	subi	r28, 0x49	; 73
    2572:	d1 40       	sbci	r29, 0x01	; 1
    2574:	1f 92       	push	r1
    2576:	8f 93       	push	r24
    2578:	c8 5b       	subi	r28, 0xB8	; 184
    257a:	de 4f       	sbci	r29, 0xFE	; 254
    257c:	88 81       	ld	r24, Y
    257e:	c8 54       	subi	r28, 0x48	; 72
    2580:	d1 40       	sbci	r29, 0x01	; 1
    2582:	1f 92       	push	r1
    2584:	8f 93       	push	r24
    2586:	c9 5b       	subi	r28, 0xB9	; 185
    2588:	de 4f       	sbci	r29, 0xFE	; 254
    258a:	88 81       	ld	r24, Y
    258c:	c7 54       	subi	r28, 0x47	; 71
    258e:	d1 40       	sbci	r29, 0x01	; 1
    2590:	1f 92       	push	r1
    2592:	8f 93       	push	r24
    2594:	ca 5b       	subi	r28, 0xBA	; 186
    2596:	de 4f       	sbci	r29, 0xFE	; 254
    2598:	88 81       	ld	r24, Y
    259a:	c6 54       	subi	r28, 0x46	; 70
    259c:	d1 40       	sbci	r29, 0x01	; 1
    259e:	1f 92       	push	r1
    25a0:	8f 93       	push	r24
    25a2:	ff 92       	push	r15
    25a4:	ef 92       	push	r14
    25a6:	ce 01       	movw	r24, r28
    25a8:	87 5f       	subi	r24, 0xF7	; 247
    25aa:	9d 4f       	sbci	r25, 0xFD	; 253
    25ac:	9f 93       	push	r25
    25ae:	8f 93       	push	r24
    25b0:	8e 01       	movw	r16, r28
    25b2:	0f 5f       	subi	r16, 0xFF	; 255
    25b4:	1f 4f       	sbci	r17, 0xFF	; 255
    25b6:	1f 93       	push	r17
    25b8:	0f 93       	push	r16
    25ba:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
			printLine(outbuf);
    25be:	c8 01       	movw	r24, r16
    25c0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			sprintf(outbuf, dformat_PN1, left, right);
    25c4:	c8 5b       	subi	r28, 0xB8	; 184
    25c6:	de 4f       	sbci	r29, 0xFE	; 254
    25c8:	88 81       	ld	r24, Y
    25ca:	c8 54       	subi	r28, 0x48	; 72
    25cc:	d1 40       	sbci	r29, 0x01	; 1
    25ce:	1f 92       	push	r1
    25d0:	8f 93       	push	r24
    25d2:	c9 5b       	subi	r28, 0xB9	; 185
    25d4:	de 4f       	sbci	r29, 0xFE	; 254
    25d6:	88 81       	ld	r24, Y
    25d8:	c7 54       	subi	r28, 0x47	; 71
    25da:	d1 40       	sbci	r29, 0x01	; 1
    25dc:	1f 92       	push	r1
    25de:	8f 93       	push	r24
    25e0:	ce 01       	movw	r24, r28
    25e2:	8a 5c       	subi	r24, 0xCA	; 202
    25e4:	9d 4f       	sbci	r25, 0xFD	; 253
    25e6:	9f 93       	push	r25
    25e8:	8f 93       	push	r24
    25ea:	1f 93       	push	r17
    25ec:	0f 93       	push	r16
    25ee:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
			writestr_OLED(1, outbuf, 1);
    25f2:	41 e0       	ldi	r20, 0x01	; 1
    25f4:	b8 01       	movw	r22, r16
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	0e 94 01 0c 	call	0x1802	; 0x1802 <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    25fc:	c7 5b       	subi	r28, 0xB7	; 183
    25fe:	de 4f       	sbci	r29, 0xFE	; 254
    2600:	88 81       	ld	r24, Y
    2602:	c9 54       	subi	r28, 0x49	; 73
    2604:	d1 40       	sbci	r29, 0x01	; 1
    2606:	1f 92       	push	r1
    2608:	8f 93       	push	r24
    260a:	ca 5b       	subi	r28, 0xBA	; 186
    260c:	de 4f       	sbci	r29, 0xFE	; 254
    260e:	88 81       	ld	r24, Y
    2610:	c6 54       	subi	r28, 0x46	; 70
    2612:	d1 40       	sbci	r29, 0x01	; 1
    2614:	1f 92       	push	r1
    2616:	8f 93       	push	r24
    2618:	ce 01       	movw	r24, r28
    261a:	87 5b       	subi	r24, 0xB7	; 183
    261c:	9d 4f       	sbci	r25, 0xFD	; 253
    261e:	9f 93       	push	r25
    2620:	8f 93       	push	r24
    2622:	1f 93       	push	r17
    2624:	0f 93       	push	r16
    2626:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
			writestr_OLED(1, outbuf, 2);
    262a:	cd bf       	out	0x3d, r28	; 61
    262c:	de bf       	out	0x3e, r29	; 62
    262e:	42 e0       	ldi	r20, 0x02	; 2
    2630:	b8 01       	movw	r22, r16
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	0e 94 01 0c 	call	0x1802	; 0x1802 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2638:	80 e0       	ldi	r24, 0x00	; 0
			printLine(outbuf);
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    263a:	e6 c0       	rjmp	.+460    	; 0x2808 <report+0xae2>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    263c:	7e 01       	movw	r14, r28
    263e:	96 ef       	ldi	r25, 0xF6	; 246
    2640:	e9 1a       	sub	r14, r25
    2642:	9e ef       	ldi	r25, 0xFE	; 254
    2644:	f9 0a       	sbc	r15, r25
    2646:	c7 01       	movw	r24, r14
    2648:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
			get_SETTIME(lastsettime);
    264c:	6e 01       	movw	r12, r28
    264e:	82 ee       	ldi	r24, 0xE2	; 226
    2650:	c8 1a       	sub	r12, r24
    2652:	8e ef       	ldi	r24, 0xFE	; 254
    2654:	d8 0a       	sbc	r13, r24
    2656:	c6 01       	movw	r24, r12
    2658:	0e 94 1c 07 	call	0xe38	; 0xe38 <get_SETTIME>
//			read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
    265c:	5e 01       	movw	r10, r28
    265e:	9e ec       	ldi	r25, 0xCE	; 206
    2660:	a9 1a       	sub	r10, r25
    2662:	9e ef       	ldi	r25, 0xFE	; 254
    2664:	b9 0a       	sbc	r11, r25
    2666:	c5 01       	movw	r24, r10
    2668:	0e 94 4e 06 	call	0xc9c	; 0xc9c <get_BOOTTIME>
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    266c:	24 e3       	ldi	r18, 0x34	; 52
    266e:	20 9f       	mul	r18, r16
    2670:	c0 01       	movw	r24, r0
    2672:	21 9f       	mul	r18, r17
    2674:	90 0d       	add	r25, r0
    2676:	11 24       	eor	r1, r1
    2678:	82 5d       	subi	r24, 0xD2	; 210
    267a:	97 4d       	sbci	r25, 0xD7	; 215
		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			get_SETTIME(lastsettime);
//			read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
    267c:	9f 93       	push	r25
    267e:	8f 93       	push	r24
    2680:	bf 92       	push	r11
    2682:	af 92       	push	r10
    2684:	df 92       	push	r13
    2686:	cf 92       	push	r12
    2688:	ff 92       	push	r15
    268a:	ef 92       	push	r14
    268c:	ce 01       	movw	r24, r28
    268e:	84 5a       	subi	r24, 0xA4	; 164
    2690:	9d 4f       	sbci	r25, 0xFD	; 253
    2692:	9f 93       	push	r25
    2694:	8f 93       	push	r24
    2696:	8e 01       	movw	r16, r28
    2698:	0f 5f       	subi	r16, 0xFF	; 255
    269a:	1f 4f       	sbci	r17, 0xFF	; 255
    269c:	1f 93       	push	r17
    269e:	0f 93       	push	r16
    26a0:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
    26a4:	c8 01       	movw	r24, r16
    26a6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "Time", 1);
    26aa:	41 e0       	ldi	r20, 0x01	; 1
    26ac:	67 ed       	ldi	r22, 0xD7	; 215
    26ae:	7d e8       	ldi	r23, 0x8D	; 141
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	0e 94 01 0c 	call	0x1802	; 0x1802 <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    26b6:	b7 01       	movw	r22, r14
    26b8:	65 5f       	subi	r22, 0xF5	; 245
    26ba:	7f 4f       	sbci	r23, 0xFF	; 255
    26bc:	42 e0       	ldi	r20, 0x02	; 2
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	0e 94 01 0c 	call	0x1802	; 0x1802 <writestr_OLED>
			break;
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    26c8:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    26ca:	9e c0       	rjmp	.+316    	; 0x2808 <report+0xae2>

		case 'v':					// Vacuum
			redvac = read_ionpump(REDPUMP);
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	0e 94 3c 08 	call	0x1078	; 0x1078 <read_ionpump>
    26d2:	d6 2e       	mov	r13, r22
    26d4:	c7 2e       	mov	r12, r23
    26d6:	b8 2e       	mov	r11, r24
    26d8:	a9 2e       	mov	r10, r25
			bluvac = read_ionpump(BLUEPUMP);
    26da:	82 e0       	ldi	r24, 0x02	; 2
    26dc:	0e 94 3c 08 	call	0x1078	; 0x1078 <read_ionpump>
    26e0:	96 2e       	mov	r9, r22
    26e2:	87 2e       	mov	r8, r23
    26e4:	78 2e       	mov	r7, r24
    26e6:	69 2e       	mov	r6, r25
			get_time(currenttime);
    26e8:	7e 01       	movw	r14, r28
    26ea:	96 ef       	ldi	r25, 0xF6	; 246
    26ec:	e9 1a       	sub	r14, r25
    26ee:	9e ef       	ldi	r25, 0xFE	; 254
    26f0:	f9 0a       	sbc	r15, r25
    26f2:	c7 01       	movw	r24, r14
    26f4:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
    26f8:	24 e3       	ldi	r18, 0x34	; 52
    26fa:	20 9f       	mul	r18, r16
    26fc:	c0 01       	movw	r24, r0
    26fe:	21 9f       	mul	r18, r17
    2700:	90 0d       	add	r25, r0
    2702:	11 24       	eor	r1, r1
    2704:	82 5d       	subi	r24, 0xD2	; 210
    2706:	97 4d       	sbci	r25, 0xD7	; 215
    2708:	9f 93       	push	r25
    270a:	8f 93       	push	r24
    270c:	6f 92       	push	r6
    270e:	7f 92       	push	r7
    2710:	8f 92       	push	r8
    2712:	9f 92       	push	r9
    2714:	af 92       	push	r10
    2716:	bf 92       	push	r11
    2718:	cf 92       	push	r12
    271a:	df 92       	push	r13
    271c:	ff 92       	push	r15
    271e:	ef 92       	push	r14
    2720:	ce 01       	movw	r24, r28
    2722:	8b 58       	subi	r24, 0x8B	; 139
    2724:	9d 4f       	sbci	r25, 0xFD	; 253
    2726:	9f 93       	push	r25
    2728:	8f 93       	push	r24
    272a:	8e 01       	movw	r16, r28
    272c:	0f 5f       	subi	r16, 0xFF	; 255
    272e:	1f 4f       	sbci	r17, 0xFF	; 255
    2730:	1f 93       	push	r17
    2732:	0f 93       	push	r16
    2734:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
			printLine(outbuf);
    2738:	c8 01       	movw	r24, r16
    273a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    273e:	41 e0       	ldi	r20, 0x01	; 1
    2740:	6c ed       	ldi	r22, 0xDC	; 220
    2742:	7d e8       	ldi	r23, 0x8D	; 141
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	0e 94 01 0c 	call	0x1802	; 0x1802 <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    274a:	6f 92       	push	r6
    274c:	7f 92       	push	r7
    274e:	8f 92       	push	r8
    2750:	9f 92       	push	r9
    2752:	af 92       	push	r10
    2754:	bf 92       	push	r11
    2756:	cf 92       	push	r12
    2758:	df 92       	push	r13
    275a:	ce 01       	movw	r24, r28
    275c:	86 56       	subi	r24, 0x66	; 102
    275e:	9d 4f       	sbci	r25, 0xFD	; 253
    2760:	9f 93       	push	r25
    2762:	8f 93       	push	r24
    2764:	1f 93       	push	r17
    2766:	0f 93       	push	r16
    2768:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
			writestr_OLED(1, outbuf, 2);
    276c:	42 e0       	ldi	r20, 0x02	; 2
    276e:	b8 01       	movw	r22, r16
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	0e 94 01 0c 	call	0x1802	; 0x1802 <writestr_OLED>
			break;
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    277a:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    277c:	45 c0       	rjmp	.+138    	; 0x2808 <report+0xae2>

		case 'V':					// Version
			get_VERSION(version);
    277e:	6e 01       	movw	r12, r28
    2780:	9f ef       	ldi	r25, 0xFF	; 255
    2782:	c9 0e       	add	r12, r25
    2784:	d1 1c       	adc	r13, r1
    2786:	c6 01       	movw	r24, r12
    2788:	0e 94 55 06 	call	0xcaa	; 0xcaa <get_VERSION>
			get_time(currenttime);
    278c:	7e 01       	movw	r14, r28
    278e:	86 ef       	ldi	r24, 0xF6	; 246
    2790:	e8 1a       	sub	r14, r24
    2792:	8e ef       	ldi	r24, 0xFE	; 254
    2794:	f8 0a       	sbc	r15, r24
    2796:	c7 01       	movw	r24, r14
    2798:	0e 94 bc 05 	call	0xb78	; 0xb78 <get_time>
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
    279c:	24 e3       	ldi	r18, 0x34	; 52
    279e:	20 9f       	mul	r18, r16
    27a0:	c0 01       	movw	r24, r0
    27a2:	21 9f       	mul	r18, r17
    27a4:	90 0d       	add	r25, r0
    27a6:	11 24       	eor	r1, r1
    27a8:	82 5d       	subi	r24, 0xD2	; 210
    27aa:	97 4d       	sbci	r25, 0xD7	; 215
    27ac:	9f 93       	push	r25
    27ae:	8f 93       	push	r24
    27b0:	df 92       	push	r13
    27b2:	cf 92       	push	r12
    27b4:	ff 92       	push	r15
    27b6:	ef 92       	push	r14
    27b8:	ce 01       	movw	r24, r28
    27ba:	89 55       	subi	r24, 0x59	; 89
    27bc:	9d 4f       	sbci	r25, 0xFD	; 253
    27be:	9f 93       	push	r25
    27c0:	8f 93       	push	r24
    27c2:	8e 01       	movw	r16, r28
    27c4:	0f 5f       	subi	r16, 0xFF	; 255
    27c6:	1f 4f       	sbci	r17, 0xFF	; 255
    27c8:	1f 93       	push	r17
    27ca:	0f 93       	push	r16
    27cc:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <sprintf>
			printLine(outbuf);
    27d0:	c8 01       	movw	r24, r16
    27d2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "specMech Version", 1);
    27d6:	41 e0       	ldi	r20, 0x01	; 1
    27d8:	67 ee       	ldi	r22, 0xE7	; 231
    27da:	7c e8       	ldi	r23, 0x8C	; 140
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	0e 94 01 0c 	call	0x1802	; 0x1802 <writestr_OLED>
			get_VERSION(outbuf);
    27e2:	c8 01       	movw	r24, r16
    27e4:	0e 94 55 06 	call	0xcaa	; 0xcaa <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    27e8:	42 e0       	ldi	r20, 0x02	; 2
    27ea:	b8 01       	movw	r22, r16
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	0e 94 01 0c 	call	0x1802	; 0x1802 <writestr_OLED>
			break;
    27f2:	cd bf       	out	0x3d, r28	; 61
    27f4:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    27f6:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    27f8:	07 c0       	rjmp	.+14     	; 0x2808 <report+0xae2>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    27fa:	6c ee       	ldi	r22, 0xEC	; 236
    27fc:	7d e8       	ldi	r23, 0x8D	; 141
    27fe:	8a ec       	ldi	r24, 0xCA	; 202
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			return(ERROR);
    2806:	83 e6       	ldi	r24, 0x63	; 99
			break;
	}

	return(NOERROR);

}
    2808:	c0 52       	subi	r28, 0x20	; 32
    280a:	dd 4f       	sbci	r29, 0xFD	; 253
    280c:	cd bf       	out	0x3d, r28	; 61
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	df 91       	pop	r29
    2812:	cf 91       	pop	r28
    2814:	1f 91       	pop	r17
    2816:	0f 91       	pop	r16
    2818:	ff 90       	pop	r15
    281a:	ef 90       	pop	r14
    281c:	df 90       	pop	r13
    281e:	cf 90       	pop	r12
    2820:	bf 90       	pop	r11
    2822:	af 90       	pop	r10
    2824:	9f 90       	pop	r9
    2826:	8f 90       	pop	r8
    2828:	7f 90       	pop	r7
    282a:	6f 90       	pop	r6
    282c:	5f 90       	pop	r5
    282e:	4f 90       	pop	r4
    2830:	3f 90       	pop	r3
    2832:	2f 90       	pop	r2
    2834:	08 95       	ret

00002836 <crc16>:
	int32_t temp;

	temp = ((int32_t) micronValue * ENC_COUNTS_PER_MICRON) + ENC_ZEROPOINT;
	return((uint32_t) temp);

}
    2836:	dc 01       	movw	r26, r24
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	50 e0       	ldi	r21, 0x00	; 0
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	1b c0       	rjmp	.+54     	; 0x2878 <crc16+0x42>
    2842:	fd 01       	movw	r30, r26
    2844:	e4 0f       	add	r30, r20
    2846:	f5 1f       	adc	r31, r21
    2848:	20 81       	ld	r18, Z
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	32 2f       	mov	r19, r18
    284e:	22 27       	eor	r18, r18
    2850:	82 27       	eor	r24, r18
    2852:	93 27       	eor	r25, r19
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	0c c0       	rjmp	.+24     	; 0x2870 <crc16+0x3a>
    2858:	99 23       	and	r25, r25
    285a:	3c f4       	brge	.+14     	; 0x286a <crc16+0x34>
    285c:	88 0f       	add	r24, r24
    285e:	99 1f       	adc	r25, r25
    2860:	31 e2       	ldi	r19, 0x21	; 33
    2862:	83 27       	eor	r24, r19
    2864:	30 e1       	ldi	r19, 0x10	; 16
    2866:	93 27       	eor	r25, r19
    2868:	02 c0       	rjmp	.+4      	; 0x286e <crc16+0x38>
    286a:	88 0f       	add	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	2f 5f       	subi	r18, 0xFF	; 255
    2870:	28 30       	cpi	r18, 0x08	; 8
    2872:	90 f3       	brcs	.-28     	; 0x2858 <crc16+0x22>
    2874:	4f 5f       	subi	r20, 0xFF	; 255
    2876:	5f 4f       	sbci	r21, 0xFF	; 255
    2878:	46 17       	cp	r20, r22
    287a:	57 07       	cpc	r21, r23
    287c:	10 f3       	brcs	.-60     	; 0x2842 <crc16+0xc>
    287e:	08 95       	ret

00002880 <enc2microns>:
    2880:	cf 92       	push	r12
    2882:	df 92       	push	r13
    2884:	ef 92       	push	r14
    2886:	ff 92       	push	r15
    2888:	6b 01       	movw	r12, r22
    288a:	7c 01       	movw	r14, r24
    288c:	8f ef       	ldi	r24, 0xFF	; 255
    288e:	c8 16       	cp	r12, r24
    2890:	d8 06       	cpc	r13, r24
    2892:	e8 06       	cpc	r14, r24
    2894:	8f e7       	ldi	r24, 0x7F	; 127
    2896:	f8 06       	cpc	r15, r24
    2898:	30 f0       	brcs	.+12     	; 0x28a6 <enc2microns+0x26>
    289a:	6d e6       	ldi	r22, 0x6D	; 109
    289c:	7f e8       	ldi	r23, 0x8F	; 143
    289e:	85 e3       	ldi	r24, 0x35	; 53
    28a0:	91 e0       	ldi	r25, 0x01	; 1
    28a2:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
    28a6:	c7 01       	movw	r24, r14
    28a8:	b6 01       	movw	r22, r12
    28aa:	2c e0       	ldi	r18, 0x0C	; 12
    28ac:	31 e0       	ldi	r19, 0x01	; 1
    28ae:	40 e0       	ldi	r20, 0x00	; 0
    28b0:	50 e0       	ldi	r21, 0x00	; 0
    28b2:	0e 94 3e 23 	call	0x467c	; 0x467c <__divmodsi4>
    28b6:	c9 01       	movw	r24, r18
    28b8:	ff 90       	pop	r15
    28ba:	ef 90       	pop	r14
    28bc:	df 90       	pop	r13
    28be:	cf 90       	pop	r12
    28c0:	08 95       	ret

000028c2 <getFRAM_MOTOREncoder>:
    28c2:	0f 93       	push	r16
    28c4:	1f 93       	push	r17
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	00 d0       	rcall	.+0      	; 0x28cc <getFRAM_MOTOREncoder+0xa>
    28cc:	00 d0       	rcall	.+0      	; 0x28ce <getFRAM_MOTOREncoder+0xc>
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62
    28d2:	8b 01       	movw	r16, r22
    28d4:	81 38       	cpi	r24, 0x81	; 129
    28d6:	59 f0       	breq	.+22     	; 0x28ee <getFRAM_MOTOREncoder+0x2c>
    28d8:	82 38       	cpi	r24, 0x82	; 130
    28da:	31 f0       	breq	.+12     	; 0x28e8 <getFRAM_MOTOREncoder+0x26>
    28dc:	80 38       	cpi	r24, 0x80	; 128
    28de:	09 f0       	breq	.+2      	; 0x28e2 <getFRAM_MOTOREncoder+0x20>
    28e0:	44 c0       	rjmp	.+136    	; 0x296a <getFRAM_MOTOREncoder+0xa8>
    28e2:	64 e1       	ldi	r22, 0x14	; 20
    28e4:	70 e0       	ldi	r23, 0x00	; 0
    28e6:	05 c0       	rjmp	.+10     	; 0x28f2 <getFRAM_MOTOREncoder+0x30>
    28e8:	6c e1       	ldi	r22, 0x1C	; 28
    28ea:	70 e0       	ldi	r23, 0x00	; 0
    28ec:	02 c0       	rjmp	.+4      	; 0x28f2 <getFRAM_MOTOREncoder+0x30>
    28ee:	68 e1       	ldi	r22, 0x18	; 24
    28f0:	70 e0       	ldi	r23, 0x00	; 0
    28f2:	24 e0       	ldi	r18, 0x04	; 4
    28f4:	ae 01       	movw	r20, r28
    28f6:	4f 5f       	subi	r20, 0xFF	; 255
    28f8:	5f 4f       	sbci	r21, 0xFF	; 255
    28fa:	80 e5       	ldi	r24, 0x50	; 80
    28fc:	0e 94 ce 06 	call	0xd9c	; 0xd9c <read_FRAM>
    2900:	83 36       	cpi	r24, 0x63	; 99
    2902:	51 f4       	brne	.+20     	; 0x2918 <getFRAM_MOTOREncoder+0x56>
    2904:	4f ef       	ldi	r20, 0xFF	; 255
    2906:	5f ef       	ldi	r21, 0xFF	; 255
    2908:	6f ef       	ldi	r22, 0xFF	; 255
    290a:	7f e7       	ldi	r23, 0x7F	; 127
    290c:	f8 01       	movw	r30, r16
    290e:	40 83       	st	Z, r20
    2910:	51 83       	std	Z+1, r21	; 0x01
    2912:	62 83       	std	Z+2, r22	; 0x02
    2914:	73 83       	std	Z+3, r23	; 0x03
    2916:	2a c0       	rjmp	.+84     	; 0x296c <getFRAM_MOTOREncoder+0xaa>
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	a0 e0       	ldi	r26, 0x00	; 0
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	78 2f       	mov	r23, r24
    2922:	66 27       	eor	r22, r22
    2924:	55 27       	eor	r21, r21
    2926:	44 27       	eor	r20, r20
    2928:	9a 81       	ldd	r25, Y+2	; 0x02
    292a:	89 2f       	mov	r24, r25
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	a0 e0       	ldi	r26, 0x00	; 0
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	dc 01       	movw	r26, r24
    2934:	99 27       	eor	r25, r25
    2936:	88 27       	eor	r24, r24
    2938:	84 2b       	or	r24, r20
    293a:	95 2b       	or	r25, r21
    293c:	a6 2b       	or	r26, r22
    293e:	b7 2b       	or	r27, r23
    2940:	4b 81       	ldd	r20, Y+3	; 0x03
    2942:	50 e0       	ldi	r21, 0x00	; 0
    2944:	60 e0       	ldi	r22, 0x00	; 0
    2946:	70 e0       	ldi	r23, 0x00	; 0
    2948:	76 2f       	mov	r23, r22
    294a:	65 2f       	mov	r22, r21
    294c:	54 2f       	mov	r21, r20
    294e:	44 27       	eor	r20, r20
    2950:	84 2b       	or	r24, r20
    2952:	95 2b       	or	r25, r21
    2954:	a6 2b       	or	r26, r22
    2956:	b7 2b       	or	r27, r23
    2958:	2c 81       	ldd	r18, Y+4	; 0x04
    295a:	82 2b       	or	r24, r18
    295c:	f8 01       	movw	r30, r16
    295e:	80 83       	st	Z, r24
    2960:	91 83       	std	Z+1, r25	; 0x01
    2962:	a2 83       	std	Z+2, r26	; 0x02
    2964:	b3 83       	std	Z+3, r27	; 0x03
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	01 c0       	rjmp	.+2      	; 0x296c <getFRAM_MOTOREncoder+0xaa>
    296a:	83 e6       	ldi	r24, 0x63	; 99
    296c:	24 96       	adiw	r28, 0x04	; 4
    296e:	cd bf       	out	0x3d, r28	; 61
    2970:	de bf       	out	0x3e, r29	; 62
    2972:	df 91       	pop	r29
    2974:	cf 91       	pop	r28
    2976:	1f 91       	pop	r17
    2978:	0f 91       	pop	r16
    297a:	08 95       	ret

0000297c <get_MOTOREncoder>:
    297c:	ef 92       	push	r14
    297e:	ff 92       	push	r15
    2980:	0f 93       	push	r16
    2982:	1f 93       	push	r17
    2984:	cf 93       	push	r28
    2986:	df 93       	push	r29
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
    298c:	27 97       	sbiw	r28, 0x07	; 7
    298e:	cd bf       	out	0x3d, r28	; 61
    2990:	de bf       	out	0x3e, r29	; 62
    2992:	8a 01       	movw	r16, r20
    2994:	97 e0       	ldi	r25, 0x07	; 7
    2996:	90 93 19 2b 	sts	0x2B19, r25	; 0x802b19 <recv1_buf+0x100>
    299a:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv1_buf+0x102>
    299e:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>
    29a2:	89 83       	std	Y+1, r24	; 0x01
    29a4:	6a 83       	std	Y+2, r22	; 0x02
    29a6:	42 e0       	ldi	r20, 0x02	; 2
    29a8:	be 01       	movw	r22, r28
    29aa:	6f 5f       	subi	r22, 0xFF	; 255
    29ac:	7f 4f       	sbci	r23, 0xFF	; 255
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	0e 94 82 1b 	call	0x3704	; 0x3704 <send_USART>
    29b4:	10 92 14 2a 	sts	0x2A14, r1	; 0x802a14 <USART1_ticks>
    29b8:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <USART1_ticks+0x1>
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	0e 94 de 19 	call	0x33bc	; 0x33bc <start_TCB0>
    29c4:	10 c0       	rjmp	.+32     	; 0x29e6 <get_MOTOREncoder+0x6a>
    29c6:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <USART1_ticks>
    29ca:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <USART1_ticks+0x1>
    29ce:	c3 97       	sbiw	r24, 0x33	; 51
    29d0:	50 f0       	brcs	.+20     	; 0x29e6 <get_MOTOREncoder+0x6a>
    29d2:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
    29d6:	64 e9       	ldi	r22, 0x94	; 148
    29d8:	7f e8       	ldi	r23, 0x8F	; 143
    29da:	80 e3       	ldi	r24, 0x30	; 48
    29dc:	91 e0       	ldi	r25, 0x01	; 1
    29de:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
    29e2:	83 e6       	ldi	r24, 0x63	; 99
    29e4:	76 c0       	rjmp	.+236    	; 0x2ad2 <get_MOTOREncoder+0x156>
    29e6:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <recv1_buf+0x103>
    29ea:	88 23       	and	r24, r24
    29ec:	61 f3       	breq	.-40     	; 0x29c6 <get_MOTOREncoder+0x4a>
    29ee:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
    29f2:	e9 e1       	ldi	r30, 0x19	; 25
    29f4:	fa e2       	ldi	r31, 0x2A	; 42
    29f6:	e5 80       	ldd	r14, Z+5	; 0x05
    29f8:	f1 2c       	mov	r15, r1
    29fa:	fe 2c       	mov	r15, r14
    29fc:	ee 24       	eor	r14, r14
    29fe:	86 81       	ldd	r24, Z+6	; 0x06
    2a00:	e8 2a       	or	r14, r24
    2a02:	22 e0       	ldi	r18, 0x02	; 2
    2a04:	0e c0       	rjmp	.+28     	; 0x2a22 <get_MOTOREncoder+0xa6>
    2a06:	82 2f       	mov	r24, r18
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	e9 5e       	subi	r30, 0xE9	; 233
    2a0e:	f5 4d       	sbci	r31, 0xD5	; 213
    2a10:	30 81       	ld	r19, Z
    2a12:	e1 e0       	ldi	r30, 0x01	; 1
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	ec 0f       	add	r30, r28
    2a18:	fd 1f       	adc	r31, r29
    2a1a:	e8 0f       	add	r30, r24
    2a1c:	f9 1f       	adc	r31, r25
    2a1e:	30 83       	st	Z, r19
    2a20:	2f 5f       	subi	r18, 0xFF	; 255
    2a22:	27 30       	cpi	r18, 0x07	; 7
    2a24:	80 f3       	brcs	.-32     	; 0x2a06 <get_MOTOREncoder+0x8a>
    2a26:	67 e0       	ldi	r22, 0x07	; 7
    2a28:	70 e0       	ldi	r23, 0x00	; 0
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	01 96       	adiw	r24, 0x01	; 1
    2a2e:	0e 94 1b 14 	call	0x2836	; 0x2836 <crc16>
    2a32:	e8 16       	cp	r14, r24
    2a34:	f9 06       	cpc	r15, r25
    2a36:	81 f0       	breq	.+32     	; 0x2a58 <get_MOTOREncoder+0xdc>
    2a38:	8f ef       	ldi	r24, 0xFF	; 255
    2a3a:	9f ef       	ldi	r25, 0xFF	; 255
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	f8 01       	movw	r30, r16
    2a40:	80 83       	st	Z, r24
    2a42:	91 83       	std	Z+1, r25	; 0x01
    2a44:	a2 83       	std	Z+2, r26	; 0x02
    2a46:	b3 83       	std	Z+3, r27	; 0x03
    2a48:	6d ea       	ldi	r22, 0xAD	; 173
    2a4a:	7f e8       	ldi	r23, 0x8F	; 143
    2a4c:	81 e3       	ldi	r24, 0x31	; 49
    2a4e:	91 e0       	ldi	r25, 0x01	; 1
    2a50:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
    2a54:	83 e6       	ldi	r24, 0x63	; 99
    2a56:	3d c0       	rjmp	.+122    	; 0x2ad2 <get_MOTOREncoder+0x156>
    2a58:	29 e1       	ldi	r18, 0x19	; 25
    2a5a:	3a e2       	ldi	r19, 0x2A	; 42
    2a5c:	d9 01       	movw	r26, r18
    2a5e:	8c 91       	ld	r24, X
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	a0 e0       	ldi	r26, 0x00	; 0
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	78 2f       	mov	r23, r24
    2a68:	66 27       	eor	r22, r22
    2a6a:	55 27       	eor	r21, r21
    2a6c:	44 27       	eor	r20, r20
    2a6e:	f8 01       	movw	r30, r16
    2a70:	40 83       	st	Z, r20
    2a72:	51 83       	std	Z+1, r21	; 0x01
    2a74:	62 83       	std	Z+2, r22	; 0x02
    2a76:	73 83       	std	Z+3, r23	; 0x03
    2a78:	d9 01       	movw	r26, r18
    2a7a:	11 96       	adiw	r26, 0x01	; 1
    2a7c:	9c 91       	ld	r25, X
    2a7e:	89 2f       	mov	r24, r25
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	a0 e0       	ldi	r26, 0x00	; 0
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	dc 01       	movw	r26, r24
    2a88:	99 27       	eor	r25, r25
    2a8a:	88 27       	eor	r24, r24
    2a8c:	84 2b       	or	r24, r20
    2a8e:	95 2b       	or	r25, r21
    2a90:	a6 2b       	or	r26, r22
    2a92:	b7 2b       	or	r27, r23
    2a94:	80 83       	st	Z, r24
    2a96:	91 83       	std	Z+1, r25	; 0x01
    2a98:	a2 83       	std	Z+2, r26	; 0x02
    2a9a:	b3 83       	std	Z+3, r27	; 0x03
    2a9c:	f9 01       	movw	r30, r18
    2a9e:	42 81       	ldd	r20, Z+2	; 0x02
    2aa0:	50 e0       	ldi	r21, 0x00	; 0
    2aa2:	60 e0       	ldi	r22, 0x00	; 0
    2aa4:	70 e0       	ldi	r23, 0x00	; 0
    2aa6:	76 2f       	mov	r23, r22
    2aa8:	65 2f       	mov	r22, r21
    2aaa:	54 2f       	mov	r21, r20
    2aac:	44 27       	eor	r20, r20
    2aae:	84 2b       	or	r24, r20
    2ab0:	95 2b       	or	r25, r21
    2ab2:	a6 2b       	or	r26, r22
    2ab4:	b7 2b       	or	r27, r23
    2ab6:	f8 01       	movw	r30, r16
    2ab8:	80 83       	st	Z, r24
    2aba:	91 83       	std	Z+1, r25	; 0x01
    2abc:	a2 83       	std	Z+2, r26	; 0x02
    2abe:	b3 83       	std	Z+3, r27	; 0x03
    2ac0:	f9 01       	movw	r30, r18
    2ac2:	23 81       	ldd	r18, Z+3	; 0x03
    2ac4:	82 2b       	or	r24, r18
    2ac6:	f8 01       	movw	r30, r16
    2ac8:	80 83       	st	Z, r24
    2aca:	91 83       	std	Z+1, r25	; 0x01
    2acc:	a2 83       	std	Z+2, r26	; 0x02
    2ace:	b3 83       	std	Z+3, r27	; 0x03
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	27 96       	adiw	r28, 0x07	; 7
    2ad4:	cd bf       	out	0x3d, r28	; 61
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	ff 90       	pop	r15
    2ae2:	ef 90       	pop	r14
    2ae4:	08 95       	ret

00002ae6 <get_MOTORFloat>:
    2ae6:	af 92       	push	r10
    2ae8:	bf 92       	push	r11
    2aea:	cf 92       	push	r12
    2aec:	df 92       	push	r13
    2aee:	ef 92       	push	r14
    2af0:	ff 92       	push	r15
    2af2:	0f 93       	push	r16
    2af4:	1f 93       	push	r17
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	00 d0       	rcall	.+0      	; 0x2afc <get_MOTORFloat+0x16>
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <get_MOTORFloat+0x18>
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	a8 2e       	mov	r10, r24
    2b04:	b6 2e       	mov	r11, r22
    2b06:	7a 01       	movw	r14, r20
    2b08:	84 e0       	ldi	r24, 0x04	; 4
    2b0a:	80 93 19 2b 	sts	0x2B19, r24	; 0x802b19 <recv1_buf+0x100>
    2b0e:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv1_buf+0x102>
    2b12:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>
    2b16:	a9 82       	std	Y+1, r10	; 0x01
    2b18:	6a 83       	std	Y+2, r22	; 0x02
    2b1a:	42 e0       	ldi	r20, 0x02	; 2
    2b1c:	be 01       	movw	r22, r28
    2b1e:	6f 5f       	subi	r22, 0xFF	; 255
    2b20:	7f 4f       	sbci	r23, 0xFF	; 255
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	0e 94 82 1b 	call	0x3704	; 0x3704 <send_USART>
    2b28:	10 92 14 2a 	sts	0x2A14, r1	; 0x802a14 <USART1_ticks>
    2b2c:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <USART1_ticks+0x1>
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	0e 94 de 19 	call	0x33bc	; 0x33bc <start_TCB0>
    2b38:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <recv1_buf+0x103>
    2b3c:	81 30       	cpi	r24, 0x01	; 1
    2b3e:	81 f0       	breq	.+32     	; 0x2b60 <get_MOTORFloat+0x7a>
    2b40:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <USART1_ticks>
    2b44:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <USART1_ticks+0x1>
    2b48:	c3 97       	sbiw	r24, 0x33	; 51
    2b4a:	b0 f3       	brcs	.-20     	; 0x2b38 <get_MOTORFloat+0x52>
    2b4c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
    2b50:	62 ec       	ldi	r22, 0xC2	; 194
    2b52:	7f e8       	ldi	r23, 0x8F	; 143
    2b54:	80 e3       	ldi	r24, 0x30	; 48
    2b56:	91 e0       	ldi	r25, 0x01	; 1
    2b58:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
    2b5c:	83 e6       	ldi	r24, 0x63	; 99
    2b5e:	37 c0       	rjmp	.+110    	; 0x2bce <get_MOTORFloat+0xe8>
    2b60:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
    2b64:	e9 e1       	ldi	r30, 0x19	; 25
    2b66:	fa e2       	ldi	r31, 0x2A	; 42
    2b68:	90 81       	ld	r25, Z
    2b6a:	c9 2e       	mov	r12, r25
    2b6c:	d1 2c       	mov	r13, r1
    2b6e:	dc 2c       	mov	r13, r12
    2b70:	cc 24       	eor	r12, r12
    2b72:	81 81       	ldd	r24, Z+1	; 0x01
    2b74:	c8 2a       	or	r12, r24
    2b76:	02 81       	ldd	r16, Z+2	; 0x02
    2b78:	10 e0       	ldi	r17, 0x00	; 0
    2b7a:	10 2f       	mov	r17, r16
    2b7c:	00 27       	eor	r16, r16
    2b7e:	23 81       	ldd	r18, Z+3	; 0x03
    2b80:	02 2b       	or	r16, r18
    2b82:	a9 82       	std	Y+1, r10	; 0x01
    2b84:	ba 82       	std	Y+2, r11	; 0x02
    2b86:	9b 83       	std	Y+3, r25	; 0x03
    2b88:	8c 83       	std	Y+4, r24	; 0x04
    2b8a:	64 e0       	ldi	r22, 0x04	; 4
    2b8c:	70 e0       	ldi	r23, 0x00	; 0
    2b8e:	ce 01       	movw	r24, r28
    2b90:	01 96       	adiw	r24, 0x01	; 1
    2b92:	0e 94 1b 14 	call	0x2836	; 0x2836 <crc16>
    2b96:	08 17       	cp	r16, r24
    2b98:	19 07       	cpc	r17, r25
    2b9a:	41 f0       	breq	.+16     	; 0x2bac <get_MOTORFloat+0xc6>
    2b9c:	69 ed       	ldi	r22, 0xD9	; 217
    2b9e:	7f e8       	ldi	r23, 0x8F	; 143
    2ba0:	81 e3       	ldi	r24, 0x31	; 49
    2ba2:	91 e0       	ldi	r25, 0x01	; 1
    2ba4:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
    2ba8:	83 e6       	ldi	r24, 0x63	; 99
    2baa:	11 c0       	rjmp	.+34     	; 0x2bce <get_MOTORFloat+0xe8>
    2bac:	b6 01       	movw	r22, r12
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <__floatunsisf>
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 e2       	ldi	r20, 0x20	; 32
    2bbc:	51 e4       	ldi	r21, 0x41	; 65
    2bbe:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <__divsf3>
    2bc2:	f7 01       	movw	r30, r14
    2bc4:	60 83       	st	Z, r22
    2bc6:	71 83       	std	Z+1, r23	; 0x01
    2bc8:	82 83       	std	Z+2, r24	; 0x02
    2bca:	93 83       	std	Z+3, r25	; 0x03
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	24 96       	adiw	r28, 0x04	; 4
    2bd0:	cd bf       	out	0x3d, r28	; 61
    2bd2:	de bf       	out	0x3e, r29	; 62
    2bd4:	df 91       	pop	r29
    2bd6:	cf 91       	pop	r28
    2bd8:	1f 91       	pop	r17
    2bda:	0f 91       	pop	r16
    2bdc:	ff 90       	pop	r15
    2bde:	ef 90       	pop	r14
    2be0:	df 90       	pop	r13
    2be2:	cf 90       	pop	r12
    2be4:	bf 90       	pop	r11
    2be6:	af 90       	pop	r10
    2be8:	08 95       	ret

00002bea <get_MOTORCurrent>:
    2bea:	ef 92       	push	r14
    2bec:	ff 92       	push	r15
    2bee:	0f 93       	push	r16
    2bf0:	1f 93       	push	r17
    2bf2:	cf 93       	push	r28
    2bf4:	df 93       	push	r29
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    2bfa:	26 97       	sbiw	r28, 0x06	; 6
    2bfc:	cd bf       	out	0x3d, r28	; 61
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	8a 01       	movw	r16, r20
    2c02:	96 e0       	ldi	r25, 0x06	; 6
    2c04:	90 93 19 2b 	sts	0x2B19, r25	; 0x802b19 <recv1_buf+0x100>
    2c08:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv1_buf+0x102>
    2c0c:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>
    2c10:	89 83       	std	Y+1, r24	; 0x01
    2c12:	6a 83       	std	Y+2, r22	; 0x02
    2c14:	42 e0       	ldi	r20, 0x02	; 2
    2c16:	be 01       	movw	r22, r28
    2c18:	6f 5f       	subi	r22, 0xFF	; 255
    2c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	0e 94 82 1b 	call	0x3704	; 0x3704 <send_USART>
    2c22:	10 92 14 2a 	sts	0x2A14, r1	; 0x802a14 <USART1_ticks>
    2c26:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <USART1_ticks+0x1>
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	0e 94 de 19 	call	0x33bc	; 0x33bc <start_TCB0>
    2c32:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <recv1_buf+0x103>
    2c36:	81 30       	cpi	r24, 0x01	; 1
    2c38:	61 f4       	brne	.+24     	; 0x2c52 <get_MOTORCurrent+0x68>
    2c3a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
    2c3e:	e9 e1       	ldi	r30, 0x19	; 25
    2c40:	fa e2       	ldi	r31, 0x2A	; 42
    2c42:	e4 80       	ldd	r14, Z+4	; 0x04
    2c44:	f1 2c       	mov	r15, r1
    2c46:	fe 2c       	mov	r15, r14
    2c48:	ee 24       	eor	r14, r14
    2c4a:	85 81       	ldd	r24, Z+5	; 0x05
    2c4c:	e8 2a       	or	r14, r24
    2c4e:	22 e0       	ldi	r18, 0x02	; 2
    2c50:	1e c0       	rjmp	.+60     	; 0x2c8e <get_MOTORCurrent+0xa4>
    2c52:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <USART1_ticks>
    2c56:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <USART1_ticks+0x1>
    2c5a:	c3 97       	sbiw	r24, 0x33	; 51
    2c5c:	50 f3       	brcs	.-44     	; 0x2c32 <get_MOTORCurrent+0x48>
    2c5e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
    2c62:	6c ee       	ldi	r22, 0xEC	; 236
    2c64:	7f e8       	ldi	r23, 0x8F	; 143
    2c66:	8f e2       	ldi	r24, 0x2F	; 47
    2c68:	91 e0       	ldi	r25, 0x01	; 1
    2c6a:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
    2c6e:	83 e6       	ldi	r24, 0x63	; 99
    2c70:	53 c0       	rjmp	.+166    	; 0x2d18 <get_MOTORCurrent+0x12e>
    2c72:	82 2f       	mov	r24, r18
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	fc 01       	movw	r30, r24
    2c78:	e9 5e       	subi	r30, 0xE9	; 233
    2c7a:	f5 4d       	sbci	r31, 0xD5	; 213
    2c7c:	30 81       	ld	r19, Z
    2c7e:	e1 e0       	ldi	r30, 0x01	; 1
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	ec 0f       	add	r30, r28
    2c84:	fd 1f       	adc	r31, r29
    2c86:	e8 0f       	add	r30, r24
    2c88:	f9 1f       	adc	r31, r25
    2c8a:	30 83       	st	Z, r19
    2c8c:	2f 5f       	subi	r18, 0xFF	; 255
    2c8e:	26 30       	cpi	r18, 0x06	; 6
    2c90:	80 f3       	brcs	.-32     	; 0x2c72 <get_MOTORCurrent+0x88>
    2c92:	66 e0       	ldi	r22, 0x06	; 6
    2c94:	70 e0       	ldi	r23, 0x00	; 0
    2c96:	ce 01       	movw	r24, r28
    2c98:	01 96       	adiw	r24, 0x01	; 1
    2c9a:	0e 94 1b 14 	call	0x2836	; 0x2836 <crc16>
    2c9e:	e8 16       	cp	r14, r24
    2ca0:	f9 06       	cpc	r15, r25
    2ca2:	81 f0       	breq	.+32     	; 0x2cc4 <get_MOTORCurrent+0xda>
    2ca4:	65 e0       	ldi	r22, 0x05	; 5
    2ca6:	70 e9       	ldi	r23, 0x90	; 144
    2ca8:	81 e3       	ldi	r24, 0x31	; 49
    2caa:	91 e0       	ldi	r25, 0x01	; 1
    2cac:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
    2cb0:	8f ef       	ldi	r24, 0xFF	; 255
    2cb2:	9f ef       	ldi	r25, 0xFF	; 255
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	f8 01       	movw	r30, r16
    2cb8:	80 83       	st	Z, r24
    2cba:	91 83       	std	Z+1, r25	; 0x01
    2cbc:	a2 83       	std	Z+2, r26	; 0x02
    2cbe:	b3 83       	std	Z+3, r27	; 0x03
    2cc0:	83 e6       	ldi	r24, 0x63	; 99
    2cc2:	2a c0       	rjmp	.+84     	; 0x2d18 <get_MOTORCurrent+0x12e>
    2cc4:	e9 e1       	ldi	r30, 0x19	; 25
    2cc6:	fa e2       	ldi	r31, 0x2A	; 42
    2cc8:	80 81       	ld	r24, Z
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	a0 e0       	ldi	r26, 0x00	; 0
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	78 2f       	mov	r23, r24
    2cd2:	66 27       	eor	r22, r22
    2cd4:	55 27       	eor	r21, r21
    2cd6:	44 27       	eor	r20, r20
    2cd8:	91 81       	ldd	r25, Z+1	; 0x01
    2cda:	89 2f       	mov	r24, r25
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	a0 e0       	ldi	r26, 0x00	; 0
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	99 27       	eor	r25, r25
    2ce6:	88 27       	eor	r24, r24
    2ce8:	84 2b       	or	r24, r20
    2cea:	95 2b       	or	r25, r21
    2cec:	a6 2b       	or	r26, r22
    2cee:	b7 2b       	or	r27, r23
    2cf0:	42 81       	ldd	r20, Z+2	; 0x02
    2cf2:	50 e0       	ldi	r21, 0x00	; 0
    2cf4:	60 e0       	ldi	r22, 0x00	; 0
    2cf6:	70 e0       	ldi	r23, 0x00	; 0
    2cf8:	76 2f       	mov	r23, r22
    2cfa:	65 2f       	mov	r22, r21
    2cfc:	54 2f       	mov	r21, r20
    2cfe:	44 27       	eor	r20, r20
    2d00:	84 2b       	or	r24, r20
    2d02:	95 2b       	or	r25, r21
    2d04:	a6 2b       	or	r26, r22
    2d06:	b7 2b       	or	r27, r23
    2d08:	23 81       	ldd	r18, Z+3	; 0x03
    2d0a:	82 2b       	or	r24, r18
    2d0c:	f8 01       	movw	r30, r16
    2d0e:	80 83       	st	Z, r24
    2d10:	91 83       	std	Z+1, r25	; 0x01
    2d12:	a2 83       	std	Z+2, r26	; 0x02
    2d14:	b3 83       	std	Z+3, r27	; 0x03
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	26 96       	adiw	r28, 0x06	; 6
    2d1a:	cd bf       	out	0x3d, r28	; 61
    2d1c:	de bf       	out	0x3e, r29	; 62
    2d1e:	df 91       	pop	r29
    2d20:	cf 91       	pop	r28
    2d22:	1f 91       	pop	r17
    2d24:	0f 91       	pop	r16
    2d26:	ff 90       	pop	r15
    2d28:	ef 90       	pop	r14
    2d2a:	08 95       	ret

00002d2c <get_MOTORSpeed>:
    2d2c:	cf 92       	push	r12
    2d2e:	df 92       	push	r13
    2d30:	ef 92       	push	r14
    2d32:	ff 92       	push	r15
    2d34:	0f 93       	push	r16
    2d36:	1f 93       	push	r17
    2d38:	cf 93       	push	r28
    2d3a:	df 93       	push	r29
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
    2d40:	27 97       	sbiw	r28, 0x07	; 7
    2d42:	cd bf       	out	0x3d, r28	; 61
    2d44:	de bf       	out	0x3e, r29	; 62
    2d46:	8b 01       	movw	r16, r22
    2d48:	7a 01       	movw	r14, r20
    2d4a:	97 e0       	ldi	r25, 0x07	; 7
    2d4c:	90 93 19 2b 	sts	0x2B19, r25	; 0x802b19 <recv1_buf+0x100>
    2d50:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv1_buf+0x102>
    2d54:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>
    2d58:	89 83       	std	Y+1, r24	; 0x01
    2d5a:	82 e1       	ldi	r24, 0x12	; 18
    2d5c:	8a 83       	std	Y+2, r24	; 0x02
    2d5e:	42 e0       	ldi	r20, 0x02	; 2
    2d60:	be 01       	movw	r22, r28
    2d62:	6f 5f       	subi	r22, 0xFF	; 255
    2d64:	7f 4f       	sbci	r23, 0xFF	; 255
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	0e 94 82 1b 	call	0x3704	; 0x3704 <send_USART>
    2d6c:	10 92 14 2a 	sts	0x2A14, r1	; 0x802a14 <USART1_ticks>
    2d70:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <USART1_ticks+0x1>
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	0e 94 de 19 	call	0x33bc	; 0x33bc <start_TCB0>
    2d7c:	10 c0       	rjmp	.+32     	; 0x2d9e <get_MOTORSpeed+0x72>
    2d7e:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <USART1_ticks>
    2d82:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <USART1_ticks+0x1>
    2d86:	c3 97       	sbiw	r24, 0x33	; 51
    2d88:	50 f0       	brcs	.+20     	; 0x2d9e <get_MOTORSpeed+0x72>
    2d8a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
    2d8e:	60 e2       	ldi	r22, 0x20	; 32
    2d90:	70 e9       	ldi	r23, 0x90	; 144
    2d92:	80 e3       	ldi	r24, 0x30	; 48
    2d94:	91 e0       	ldi	r25, 0x01	; 1
    2d96:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
    2d9a:	83 e6       	ldi	r24, 0x63	; 99
    2d9c:	79 c0       	rjmp	.+242    	; 0x2e90 <get_MOTORSpeed+0x164>
    2d9e:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <recv1_buf+0x103>
    2da2:	88 23       	and	r24, r24
    2da4:	61 f3       	breq	.-40     	; 0x2d7e <get_MOTORSpeed+0x52>
    2da6:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
    2daa:	e9 e1       	ldi	r30, 0x19	; 25
    2dac:	fa e2       	ldi	r31, 0x2A	; 42
    2dae:	c5 80       	ldd	r12, Z+5	; 0x05
    2db0:	d1 2c       	mov	r13, r1
    2db2:	dc 2c       	mov	r13, r12
    2db4:	cc 24       	eor	r12, r12
    2db6:	86 81       	ldd	r24, Z+6	; 0x06
    2db8:	c8 2a       	or	r12, r24
    2dba:	22 e0       	ldi	r18, 0x02	; 2
    2dbc:	0e c0       	rjmp	.+28     	; 0x2dda <get_MOTORSpeed+0xae>
    2dbe:	82 2f       	mov	r24, r18
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	e9 5e       	subi	r30, 0xE9	; 233
    2dc6:	f5 4d       	sbci	r31, 0xD5	; 213
    2dc8:	30 81       	ld	r19, Z
    2dca:	e1 e0       	ldi	r30, 0x01	; 1
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	ec 0f       	add	r30, r28
    2dd0:	fd 1f       	adc	r31, r29
    2dd2:	e8 0f       	add	r30, r24
    2dd4:	f9 1f       	adc	r31, r25
    2dd6:	30 83       	st	Z, r19
    2dd8:	2f 5f       	subi	r18, 0xFF	; 255
    2dda:	27 30       	cpi	r18, 0x07	; 7
    2ddc:	80 f3       	brcs	.-32     	; 0x2dbe <get_MOTORSpeed+0x92>
    2dde:	67 e0       	ldi	r22, 0x07	; 7
    2de0:	70 e0       	ldi	r23, 0x00	; 0
    2de2:	ce 01       	movw	r24, r28
    2de4:	01 96       	adiw	r24, 0x01	; 1
    2de6:	0e 94 1b 14 	call	0x2836	; 0x2836 <crc16>
    2dea:	c8 16       	cp	r12, r24
    2dec:	d9 06       	cpc	r13, r25
    2dee:	81 f0       	breq	.+32     	; 0x2e10 <get_MOTORSpeed+0xe4>
    2df0:	8f ef       	ldi	r24, 0xFF	; 255
    2df2:	9f ef       	ldi	r25, 0xFF	; 255
    2df4:	dc 01       	movw	r26, r24
    2df6:	f8 01       	movw	r30, r16
    2df8:	80 83       	st	Z, r24
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	a2 83       	std	Z+2, r26	; 0x02
    2dfe:	b3 83       	std	Z+3, r27	; 0x03
    2e00:	67 e3       	ldi	r22, 0x37	; 55
    2e02:	70 e9       	ldi	r23, 0x90	; 144
    2e04:	81 e3       	ldi	r24, 0x31	; 49
    2e06:	91 e0       	ldi	r25, 0x01	; 1
    2e08:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
    2e0c:	83 e6       	ldi	r24, 0x63	; 99
    2e0e:	40 c0       	rjmp	.+128    	; 0x2e90 <get_MOTORSpeed+0x164>
    2e10:	29 e1       	ldi	r18, 0x19	; 25
    2e12:	3a e2       	ldi	r19, 0x2A	; 42
    2e14:	d9 01       	movw	r26, r18
    2e16:	8c 91       	ld	r24, X
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	a0 e0       	ldi	r26, 0x00	; 0
    2e1c:	b0 e0       	ldi	r27, 0x00	; 0
    2e1e:	78 2f       	mov	r23, r24
    2e20:	66 27       	eor	r22, r22
    2e22:	55 27       	eor	r21, r21
    2e24:	44 27       	eor	r20, r20
    2e26:	f8 01       	movw	r30, r16
    2e28:	40 83       	st	Z, r20
    2e2a:	51 83       	std	Z+1, r21	; 0x01
    2e2c:	62 83       	std	Z+2, r22	; 0x02
    2e2e:	73 83       	std	Z+3, r23	; 0x03
    2e30:	d9 01       	movw	r26, r18
    2e32:	11 96       	adiw	r26, 0x01	; 1
    2e34:	9c 91       	ld	r25, X
    2e36:	89 2f       	mov	r24, r25
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	a0 e0       	ldi	r26, 0x00	; 0
    2e3c:	b0 e0       	ldi	r27, 0x00	; 0
    2e3e:	dc 01       	movw	r26, r24
    2e40:	99 27       	eor	r25, r25
    2e42:	88 27       	eor	r24, r24
    2e44:	84 2b       	or	r24, r20
    2e46:	95 2b       	or	r25, r21
    2e48:	a6 2b       	or	r26, r22
    2e4a:	b7 2b       	or	r27, r23
    2e4c:	80 83       	st	Z, r24
    2e4e:	91 83       	std	Z+1, r25	; 0x01
    2e50:	a2 83       	std	Z+2, r26	; 0x02
    2e52:	b3 83       	std	Z+3, r27	; 0x03
    2e54:	f9 01       	movw	r30, r18
    2e56:	42 81       	ldd	r20, Z+2	; 0x02
    2e58:	50 e0       	ldi	r21, 0x00	; 0
    2e5a:	60 e0       	ldi	r22, 0x00	; 0
    2e5c:	70 e0       	ldi	r23, 0x00	; 0
    2e5e:	76 2f       	mov	r23, r22
    2e60:	65 2f       	mov	r22, r21
    2e62:	54 2f       	mov	r21, r20
    2e64:	44 27       	eor	r20, r20
    2e66:	84 2b       	or	r24, r20
    2e68:	95 2b       	or	r25, r21
    2e6a:	a6 2b       	or	r26, r22
    2e6c:	b7 2b       	or	r27, r23
    2e6e:	f8 01       	movw	r30, r16
    2e70:	80 83       	st	Z, r24
    2e72:	91 83       	std	Z+1, r25	; 0x01
    2e74:	a2 83       	std	Z+2, r26	; 0x02
    2e76:	b3 83       	std	Z+3, r27	; 0x03
    2e78:	f9 01       	movw	r30, r18
    2e7a:	23 81       	ldd	r18, Z+3	; 0x03
    2e7c:	82 2b       	or	r24, r18
    2e7e:	f8 01       	movw	r30, r16
    2e80:	80 83       	st	Z, r24
    2e82:	91 83       	std	Z+1, r25	; 0x01
    2e84:	a2 83       	std	Z+2, r26	; 0x02
    2e86:	b3 83       	std	Z+3, r27	; 0x03
    2e88:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8a:	d7 01       	movw	r26, r14
    2e8c:	8c 93       	st	X, r24
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	27 96       	adiw	r28, 0x07	; 7
    2e92:	cd bf       	out	0x3d, r28	; 61
    2e94:	de bf       	out	0x3e, r29	; 62
    2e96:	df 91       	pop	r29
    2e98:	cf 91       	pop	r28
    2e9a:	1f 91       	pop	r17
    2e9c:	0f 91       	pop	r16
    2e9e:	ff 90       	pop	r15
    2ea0:	ef 90       	pop	r14
    2ea2:	df 90       	pop	r13
    2ea4:	cf 90       	pop	r12
    2ea6:	08 95       	ret

00002ea8 <motorsMoving>:

uint8_t motorsMoving(void)
{
    2ea8:	1f 93       	push	r17
    2eaa:	cf 93       	push	r28
    2eac:	df 93       	push	r29
    2eae:	00 d0       	rcall	.+0      	; 0x2eb0 <motorsMoving+0x8>
    2eb0:	00 d0       	rcall	.+0      	; 0x2eb2 <motorsMoving+0xa>
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	uint32_t encoderSpeed;

	for (i = MOTOR_A; i <= MOTOR_C; i++) {
    2eb6:	10 e8       	ldi	r17, 0x80	; 128
    2eb8:	10 c0       	rjmp	.+32     	; 0x2eda <motorsMoving+0x32>
		get_MOTOREncoder(i, ENCODERSPEED, &encoderSpeed);
    2eba:	ae 01       	movw	r20, r28
    2ebc:	4f 5f       	subi	r20, 0xFF	; 255
    2ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    2ec0:	62 e1       	ldi	r22, 0x12	; 18
    2ec2:	81 2f       	mov	r24, r17
    2ec4:	0e 94 be 14 	call	0x297c	; 0x297c <get_MOTOREncoder>
		if (encoderSpeed) {
    2ec8:	89 81       	ldd	r24, Y+1	; 0x01
    2eca:	9a 81       	ldd	r25, Y+2	; 0x02
    2ecc:	ab 81       	ldd	r26, Y+3	; 0x03
    2ece:	bc 81       	ldd	r27, Y+4	; 0x04
    2ed0:	89 2b       	or	r24, r25
    2ed2:	8a 2b       	or	r24, r26
    2ed4:	8b 2b       	or	r24, r27
    2ed6:	29 f4       	brne	.+10     	; 0x2ee2 <motorsMoving+0x3a>
uint8_t motorsMoving(void)
{
	uint8_t i;
	uint32_t encoderSpeed;

	for (i = MOTOR_A; i <= MOTOR_C; i++) {
    2ed8:	1f 5f       	subi	r17, 0xFF	; 255
    2eda:	13 38       	cpi	r17, 0x83	; 131
    2edc:	70 f3       	brcs	.-36     	; 0x2eba <motorsMoving+0x12>
		if (encoderSpeed) {
			return(YES);
		}
	}

	return(NO);
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	01 c0       	rjmp	.+2      	; 0x2ee4 <motorsMoving+0x3c>
	uint32_t encoderSpeed;

	for (i = MOTOR_A; i <= MOTOR_C; i++) {
		get_MOTOREncoder(i, ENCODERSPEED, &encoderSpeed);
		if (encoderSpeed) {
			return(YES);
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	return(NO);

}
    2ee4:	24 96       	adiw	r28, 0x04	; 4
    2ee6:	cd bf       	out	0x3d, r28	; 61
    2ee8:	de bf       	out	0x3e, r29	; 62
    2eea:	df 91       	pop	r29
    2eec:	cf 91       	pop	r28
    2eee:	1f 91       	pop	r17
    2ef0:	08 95       	ret

00002ef2 <move_MOTORAbsolute>:
	Returns:
		ERROR on USART timeout or bad (not 0xFF) ack
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTORAbsolute(uint8_t controller, int32_t newPosition)
{
    2ef2:	cf 93       	push	r28
    2ef4:	df 93       	push	r29
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	65 97       	sbiw	r28, 0x15	; 21
    2efc:	cd bf       	out	0x3d, r28	; 61
    2efe:	de bf       	out	0x3e, r29	; 62
	acceleration = ACCELERATION;
	deceleration = DECELERATION;
	speed = SPEED;
	buffer = 0;							// 0 -> command is buffered

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    2f00:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <recv1_buf>
	recv1_buf.nbytes = 1;
    2f04:	91 e0       	ldi	r25, 0x01	; 1
    2f06:	90 93 19 2b 	sts	0x2B19, r25	; 0x802b19 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    2f0a:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv1_buf+0x102>
	recv1_buf.done = NO;
    2f0e:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>

	tbuf[0] = controller;
    2f12:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBODRIVETO;				// Command 65
    2f14:	81 e4       	ldi	r24, 0x41	; 65
    2f16:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (acceleration >> 24) & 0XFF;
    2f18:	1b 82       	std	Y+3, r1	; 0x03
	tbuf[3] = (acceleration >> 16) & 0xFF;
    2f1a:	1c 82       	std	Y+4, r1	; 0x04
	tbuf[4] = (acceleration >> 8) & 0xFF;
    2f1c:	80 e2       	ldi	r24, 0x20	; 32
    2f1e:	8d 83       	std	Y+5, r24	; 0x05
	tbuf[5] = (acceleration) & 0xFF;
    2f20:	1e 82       	std	Y+6, r1	; 0x06
	tbuf[6] = (speed >> 24) & 0xFF;
    2f22:	1f 82       	std	Y+7, r1	; 0x07
	tbuf[7] = (speed >> 16) & 0xFF;
    2f24:	18 86       	std	Y+8, r1	; 0x08
	tbuf[8] = (speed >> 8) & 0xFF;
    2f26:	90 e4       	ldi	r25, 0x40	; 64
    2f28:	99 87       	std	Y+9, r25	; 0x09
	tbuf[9] = (speed) & 0xFF;
    2f2a:	1a 86       	std	Y+10, r1	; 0x0a
	tbuf[10] = (deceleration >> 24) & 0xFF;
    2f2c:	1b 86       	std	Y+11, r1	; 0x0b
	tbuf[11] = (deceleration >> 16) & 0xFF;
    2f2e:	1c 86       	std	Y+12, r1	; 0x0c
	tbuf[12] = (deceleration >> 8) & 0xFF;
    2f30:	8d 87       	std	Y+13, r24	; 0x0d
	tbuf[13] = (deceleration) & 0xFF;
    2f32:	1e 86       	std	Y+14, r1	; 0x0e
	tbuf[14] = (newPosition >> 24) & 0xFF;
    2f34:	7f 87       	std	Y+15, r23	; 0x0f
	tbuf[15] = (newPosition >> 16) & 0xFF;
    2f36:	68 8b       	std	Y+16, r22	; 0x10
	tbuf[16] = (newPosition >> 8) & 0xFF;
    2f38:	59 8b       	std	Y+17, r21	; 0x11
	tbuf[17] = (newPosition) & 0xFF;
    2f3a:	4a 8b       	std	Y+18, r20	; 0x12
	tbuf[18] = buffer;
    2f3c:	1b 8a       	std	Y+19, r1	; 0x13
	crc = crc16(tbuf, 19);
    2f3e:	63 e1       	ldi	r22, 0x13	; 19
    2f40:	70 e0       	ldi	r23, 0x00	; 0
    2f42:	ce 01       	movw	r24, r28
    2f44:	01 96       	adiw	r24, 0x01	; 1
    2f46:	0e 94 1b 14 	call	0x2836	; 0x2836 <crc16>
	tbuf[19] = (crc >> 8) & 0xFF;
    2f4a:	9c 8b       	std	Y+20, r25	; 0x14
	tbuf[20] = crc & 0xFF;
    2f4c:	8d 8b       	std	Y+21, r24	; 0x15

	send_USART(1, tbuf, 21);			// Send command
    2f4e:	45 e1       	ldi	r20, 0x15	; 21
    2f50:	be 01       	movw	r22, r28
    2f52:	6f 5f       	subi	r22, 0xFF	; 255
    2f54:	7f 4f       	sbci	r23, 0xFF	; 255
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	0e 94 82 1b 	call	0x3704	; 0x3704 <send_USART>

	USART1_ticks = 0;
    2f5c:	10 92 14 2a 	sts	0x2A14, r1	; 0x802a14 <USART1_ticks>
    2f60:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <USART1_ticks+0x1>
	start_TCB0(1);						// Start 1 ms ticks timer
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	0e 94 de 19 	call	0x33bc	; 0x33bc <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    2f6c:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <recv1_buf+0x103>
    2f70:	81 30       	cpi	r24, 0x01	; 1
    2f72:	41 f4       	brne	.+16     	; 0x2f84 <move_MOTORAbsolute+0x92>
			stop_TCB0();
    2f74:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute timeout");
			return(ERROR);
		}
	}

	if (recv1_buf.data[0] != 0xFF) {
    2f78:	80 91 19 2a 	lds	r24, 0x2A19	; 0x802a19 <recv1_buf>
    2f7c:	8f 3f       	cpi	r24, 0xFF	; 255
    2f7e:	91 f4       	brne	.+36     	; 0x2fa4 <move_MOTORAbsolute+0xb2>
		printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute ack");		
		return(ERROR);
	}

	return(NOERROR);
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	17 c0       	rjmp	.+46     	; 0x2fb2 <move_MOTORAbsolute+0xc0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
			stop_TCB0();
			break;
		}
		if (USART1_ticks > 50) {				// 4 ms just barely works at 38400 baud
    2f84:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <USART1_ticks>
    2f88:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <USART1_ticks+0x1>
    2f8c:	c3 97       	sbiw	r24, 0x33	; 51
    2f8e:	70 f3       	brcs	.-36     	; 0x2f6c <move_MOTORAbsolute+0x7a>
			stop_TCB0();
    2f90:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute timeout");
    2f94:	60 e5       	ldi	r22, 0x50	; 80
    2f96:	70 e9       	ldi	r23, 0x90	; 144
    2f98:	8f e2       	ldi	r24, 0x2F	; 47
    2f9a:	91 e0       	ldi	r25, 0x01	; 1
    2f9c:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			return(ERROR);
    2fa0:	83 e6       	ldi	r24, 0x63	; 99
    2fa2:	07 c0       	rjmp	.+14     	; 0x2fb2 <move_MOTORAbsolute+0xc0>
		}
	}

	if (recv1_buf.data[0] != 0xFF) {
		printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute ack");		
    2fa4:	6b e6       	ldi	r22, 0x6B	; 107
    2fa6:	70 e9       	ldi	r23, 0x90	; 144
    2fa8:	8f e2       	ldi	r24, 0x2F	; 47
    2faa:	91 e0       	ldi	r25, 0x01	; 1
    2fac:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		return(ERROR);
    2fb0:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);
}
    2fb2:	65 96       	adiw	r28, 0x15	; 21
    2fb4:	cd bf       	out	0x3d, r28	; 61
    2fb6:	de bf       	out	0x3e, r29	; 62
    2fb8:	df 91       	pop	r29
    2fba:	cf 91       	pop	r28
    2fbc:	08 95       	ret

00002fbe <move_MOTOR>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR(uint8_t cstack)
{
    2fbe:	cf 92       	push	r12
    2fc0:	df 92       	push	r13
    2fc2:	ef 92       	push	r14
    2fc4:	ff 92       	push	r15
    2fc6:	1f 93       	push	r17
    2fc8:	cf 93       	push	r28
    2fca:	df 93       	push	r29
    2fcc:	00 d0       	rcall	.+0      	; 0x2fce <move_MOTOR+0x10>
    2fce:	00 d0       	rcall	.+0      	; 0x2fd0 <move_MOTOR+0x12>
    2fd0:	cd b7       	in	r28, 0x3d	; 61
    2fd2:	de b7       	in	r29, 0x3e	; 62

	uint8_t motor, controller, retval;
	uint32_t newPosition, currentPosition;

	motor = pcmd[cstack].cobject;
    2fd4:	e8 2e       	mov	r14, r24
    2fd6:	f1 2c       	mov	r15, r1
    2fd8:	84 e3       	ldi	r24, 0x34	; 52
    2fda:	8e 9d       	mul	r24, r14
    2fdc:	f0 01       	movw	r30, r0
    2fde:	8f 9d       	mul	r24, r15
    2fe0:	f0 0d       	add	r31, r0
    2fe2:	11 24       	eor	r1, r1
    2fe4:	ed 5f       	subi	r30, 0xFD	; 253
    2fe6:	f7 4d       	sbci	r31, 0xD7	; 215
    2fe8:	81 81       	ldd	r24, Z+1	; 0x01
	switch(motor) {
    2fea:	81 34       	cpi	r24, 0x41	; 65
    2fec:	d0 f0       	brcs	.+52     	; 0x3022 <move_MOTOR+0x64>
    2fee:	84 34       	cpi	r24, 0x44	; 68
    2ff0:	28 f0       	brcs	.+10     	; 0x2ffc <move_MOTOR+0x3e>
    2ff2:	9f e9       	ldi	r25, 0x9F	; 159
    2ff4:	98 0f       	add	r25, r24
    2ff6:	93 30       	cpi	r25, 0x03	; 3
    2ff8:	40 f0       	brcs	.+16     	; 0x300a <move_MOTOR+0x4c>
    2ffa:	13 c0       	rjmp	.+38     	; 0x3022 <move_MOTOR+0x64>
		case 'A':
		case 'B':
		case 'C':
			controller = motor + 63;
    2ffc:	1f e3       	ldi	r17, 0x3F	; 63
    2ffe:	18 0f       	add	r17, r24
			currentPosition = 0;
    3000:	19 82       	std	Y+1, r1	; 0x01
    3002:	1a 82       	std	Y+2, r1	; 0x02
    3004:	1b 82       	std	Y+3, r1	; 0x03
    3006:	1c 82       	std	Y+4, r1	; 0x04
			break;
    3008:	14 c0       	rjmp	.+40     	; 0x3032 <move_MOTOR+0x74>

		case 'a':
		case 'b':
		case 'c':
			controller = motor + 31;
    300a:	1f e1       	ldi	r17, 0x1F	; 31
    300c:	18 0f       	add	r17, r24
			retval = get_MOTOREncoder(controller, ENCODERCOUNT, &currentPosition);
    300e:	ae 01       	movw	r20, r28
    3010:	4f 5f       	subi	r20, 0xFF	; 255
    3012:	5f 4f       	sbci	r21, 0xFF	; 255
    3014:	60 e1       	ldi	r22, 0x10	; 16
    3016:	81 2f       	mov	r24, r17
    3018:	0e 94 be 14 	call	0x297c	; 0x297c <get_MOTOREncoder>
			if (retval == ERROR) {
    301c:	83 36       	cpi	r24, 0x63	; 99
    301e:	49 f4       	brne	.+18     	; 0x3032 <move_MOTOR+0x74>
    3020:	39 c0       	rjmp	.+114    	; 0x3094 <move_MOTOR+0xd6>
				return(ERROR);
			}
			break;

		default:
			printError(ERR_UNKNOWNMTR, "move_MOTOR unknown motor");
    3022:	62 e8       	ldi	r22, 0x82	; 130
    3024:	70 e9       	ldi	r23, 0x90	; 144
    3026:	8d e2       	ldi	r24, 0x2D	; 45
    3028:	91 e0       	ldi	r25, 0x01	; 1
    302a:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			return(ERROR);
    302e:	83 e6       	ldi	r24, 0x63	; 99
    3030:	32 c0       	rjmp	.+100    	; 0x3096 <move_MOTOR+0xd8>
			break;	
	}

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    3032:	84 e3       	ldi	r24, 0x34	; 52
    3034:	8e 9d       	mul	r24, r14
    3036:	f0 01       	movw	r30, r0
    3038:	8f 9d       	mul	r24, r15
    303a:	f0 0d       	add	r31, r0
    303c:	11 24       	eor	r1, r1
    303e:	ed 5f       	subi	r30, 0xFD	; 253
    3040:	f7 4d       	sbci	r31, 0xD7	; 215
    3042:	82 81       	ldd	r24, Z+2	; 0x02
    3044:	81 11       	cpse	r24, r1
    3046:	08 c0       	rjmp	.+16     	; 0x3058 <move_MOTOR+0x9a>
		printError(ERR_MTRNULLMOVE, "move_MOTOR no position or increment");
    3048:	6b e9       	ldi	r22, 0x9B	; 155
    304a:	70 e9       	ldi	r23, 0x90	; 144
    304c:	83 e3       	ldi	r24, 0x33	; 51
    304e:	91 e0       	ldi	r25, 0x01	; 1
    3050:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		return(ERROR);
    3054:	83 e6       	ldi	r24, 0x63	; 99
    3056:	1f c0       	rjmp	.+62     	; 0x3096 <move_MOTOR+0xd8>
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);
    3058:	24 e3       	ldi	r18, 0x34	; 52
    305a:	2e 9d       	mul	r18, r14
    305c:	c0 01       	movw	r24, r0
    305e:	2f 9d       	mul	r18, r15
    3060:	90 0d       	add	r25, r0
    3062:	11 24       	eor	r1, r1
    3064:	8b 5f       	subi	r24, 0xFB	; 251
    3066:	97 4d       	sbci	r25, 0xD7	; 215
    3068:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <atol>
    306c:	9b 01       	movw	r18, r22
    306e:	ac 01       	movw	r20, r24
    3070:	ac e0       	ldi	r26, 0x0C	; 12
    3072:	b1 e0       	ldi	r27, 0x01	; 1
    3074:	0e 94 63 23 	call	0x46c6	; 0x46c6 <__muluhisi3>
    3078:	c9 80       	ldd	r12, Y+1	; 0x01
    307a:	da 80       	ldd	r13, Y+2	; 0x02
    307c:	eb 80       	ldd	r14, Y+3	; 0x03
    307e:	fc 80       	ldd	r15, Y+4	; 0x04
    3080:	ab 01       	movw	r20, r22
    3082:	bc 01       	movw	r22, r24
    3084:	4c 0d       	add	r20, r12
    3086:	5d 1d       	adc	r21, r13
    3088:	6e 1d       	adc	r22, r14
    308a:	7f 1d       	adc	r23, r15
	return(move_MOTORAbsolute(controller, newPosition));
    308c:	81 2f       	mov	r24, r17
    308e:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <move_MOTORAbsolute>
    3092:	01 c0       	rjmp	.+2      	; 0x3096 <move_MOTOR+0xd8>
		case 'b':
		case 'c':
			controller = motor + 31;
			retval = get_MOTOREncoder(controller, ENCODERCOUNT, &currentPosition);
			if (retval == ERROR) {
				return(ERROR);
    3094:	83 e6       	ldi	r24, 0x63	; 99
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);
	return(move_MOTORAbsolute(controller, newPosition));

}
    3096:	24 96       	adiw	r28, 0x04	; 4
    3098:	cd bf       	out	0x3d, r28	; 61
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	df 91       	pop	r29
    309e:	cf 91       	pop	r28
    30a0:	1f 91       	pop	r17
    30a2:	ff 90       	pop	r15
    30a4:	ef 90       	pop	r14
    30a6:	df 90       	pop	r13
    30a8:	cf 90       	pop	r12
    30aa:	08 95       	ret

000030ac <putFRAM_MOTOREncoder>:
	Returns:
		ERROR on get_MOTOREncoder or write_FRAM failure
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t putFRAM_MOTOREncoder(uint8_t controller)
{
    30ac:	0f 93       	push	r16
    30ae:	1f 93       	push	r17
    30b0:	cf 93       	push	r28
    30b2:	df 93       	push	r29
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
    30b8:	28 97       	sbiw	r28, 0x08	; 8
    30ba:	cd bf       	out	0x3d, r28	; 61
    30bc:	de bf       	out	0x3e, r29	; 62

	uint8_t tbuf[4];
	uint16_t memaddr;
	uint32_t encoderValue;

	switch (controller) {
    30be:	81 38       	cpi	r24, 0x81	; 129
    30c0:	51 f0       	breq	.+20     	; 0x30d6 <putFRAM_MOTOREncoder+0x2a>
    30c2:	82 38       	cpi	r24, 0x82	; 130
    30c4:	29 f0       	breq	.+10     	; 0x30d0 <putFRAM_MOTOREncoder+0x24>
    30c6:	80 38       	cpi	r24, 0x80	; 128
    30c8:	f9 f4       	brne	.+62     	; 0x3108 <putFRAM_MOTOREncoder+0x5c>
		case MOTOR_A:
			memaddr = ENCAFRAMADDR;
    30ca:	04 e1       	ldi	r16, 0x14	; 20
    30cc:	10 e0       	ldi	r17, 0x00	; 0
    30ce:	05 c0       	rjmp	.+10     	; 0x30da <putFRAM_MOTOREncoder+0x2e>
		case MOTOR_B:
			memaddr = ENCBFRAMADDR;
			break;

		case MOTOR_C:
			memaddr = ENCCFRAMADDR;
    30d0:	0c e1       	ldi	r16, 0x1C	; 28
    30d2:	10 e0       	ldi	r17, 0x00	; 0
			break;
    30d4:	02 c0       	rjmp	.+4      	; 0x30da <putFRAM_MOTOREncoder+0x2e>
		case MOTOR_A:
			memaddr = ENCAFRAMADDR;
			break;

		case MOTOR_B:
			memaddr = ENCBFRAMADDR;
    30d6:	08 e1       	ldi	r16, 0x18	; 24
    30d8:	10 e0       	ldi	r17, 0x00	; 0

		default:
			return(ERROR);
	}

	get_MOTOREncoder(controller, ENCODERCOUNT, &encoderValue);
    30da:	ae 01       	movw	r20, r28
    30dc:	4b 5f       	subi	r20, 0xFB	; 251
    30de:	5f 4f       	sbci	r21, 0xFF	; 255
    30e0:	60 e1       	ldi	r22, 0x10	; 16
    30e2:	0e 94 be 14 	call	0x297c	; 0x297c <get_MOTOREncoder>
	tbuf[0] = (encoderValue >> 24) & 0xFF;
    30e6:	8d 81       	ldd	r24, Y+5	; 0x05
    30e8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ea:	2f 81       	ldd	r18, Y+7	; 0x07
    30ec:	38 85       	ldd	r19, Y+8	; 0x08
    30ee:	39 83       	std	Y+1, r19	; 0x01
	tbuf[1] = (encoderValue >> 16) & 0xFF;
    30f0:	2a 83       	std	Y+2, r18	; 0x02
	tbuf[2] = (encoderValue >> 8) & 0xFF;
    30f2:	9b 83       	std	Y+3, r25	; 0x03
	tbuf[3] = encoderValue & 0xFF;
    30f4:	8c 83       	std	Y+4, r24	; 0x04
	return(write_FRAM(FRAMTWIADDR, memaddr, tbuf, 4));
    30f6:	24 e0       	ldi	r18, 0x04	; 4
    30f8:	ae 01       	movw	r20, r28
    30fa:	4f 5f       	subi	r20, 0xFF	; 255
    30fc:	5f 4f       	sbci	r21, 0xFF	; 255
    30fe:	b8 01       	movw	r22, r16
    3100:	80 e5       	ldi	r24, 0x50	; 80
    3102:	0e 94 4c 07 	call	0xe98	; 0xe98 <write_FRAM>
    3106:	01 c0       	rjmp	.+2      	; 0x310a <putFRAM_MOTOREncoder+0x5e>
		case MOTOR_C:
			memaddr = ENCCFRAMADDR;
			break;

		default:
			return(ERROR);
    3108:	83 e6       	ldi	r24, 0x63	; 99
	tbuf[1] = (encoderValue >> 16) & 0xFF;
	tbuf[2] = (encoderValue >> 8) & 0xFF;
	tbuf[3] = encoderValue & 0xFF;
	return(write_FRAM(FRAMTWIADDR, memaddr, tbuf, 4));

}
    310a:	28 96       	adiw	r28, 0x08	; 8
    310c:	cd bf       	out	0x3d, r28	; 61
    310e:	de bf       	out	0x3e, r29	; 62
    3110:	df 91       	pop	r29
    3112:	cf 91       	pop	r28
    3114:	1f 91       	pop	r17
    3116:	0f 91       	pop	r16
    3118:	08 95       	ret

0000311a <saveFRAM_MOTOREncoders>:

uint8_t saveFRAM_MOTOREncoders(void)
{
    311a:	cf 93       	push	r28
    311c:	df 93       	push	r29
	uint8_t i, error = 0, retval;
    311e:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = MOTOR_A; i <= MOTOR_C; i++) {
    3120:	c0 e8       	ldi	r28, 0x80	; 128
    3122:	05 c0       	rjmp	.+10     	; 0x312e <saveFRAM_MOTOREncoders+0x14>
		retval = putFRAM_MOTOREncoder(i);
    3124:	8c 2f       	mov	r24, r28
    3126:	0e 94 56 18 	call	0x30ac	; 0x30ac <putFRAM_MOTOREncoder>
		error += retval;
    312a:	d8 0f       	add	r29, r24

uint8_t saveFRAM_MOTOREncoders(void)
{
	uint8_t i, error = 0, retval;

	for (i = MOTOR_A; i <= MOTOR_C; i++) {
    312c:	cf 5f       	subi	r28, 0xFF	; 255
    312e:	c3 38       	cpi	r28, 0x83	; 131
    3130:	c8 f3       	brcs	.-14     	; 0x3124 <saveFRAM_MOTOREncoders+0xa>
		retval = putFRAM_MOTOREncoder(i);
		error += retval;
	}
	if (error) {
    3132:	dd 23       	and	r29, r29
    3134:	11 f0       	breq	.+4      	; 0x313a <saveFRAM_MOTOREncoders+0x20>
		return(ERROR);
    3136:	83 e6       	ldi	r24, 0x63	; 99
    3138:	01 c0       	rjmp	.+2      	; 0x313c <saveFRAM_MOTOREncoders+0x22>
	} else {
		return(NOERROR);
    313a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	08 95       	ret

00003142 <set_MOTOREncoder>:
		Does not print an error. It's only called at reboot. We should have a
		double-check at startup to make sure the encoder values agree before
		a move.
------------------------------------------------------------------------------*/
uint8_t set_MOTOREncoder(uint8_t controller, uint32_t value)
{
    3142:	cf 93       	push	r28
    3144:	df 93       	push	r29
    3146:	cd b7       	in	r28, 0x3d	; 61
    3148:	de b7       	in	r29, 0x3e	; 62
    314a:	28 97       	sbiw	r28, 0x08	; 8
    314c:	cd bf       	out	0x3d, r28	; 61
    314e:	de bf       	out	0x3e, r29	; 62

	uint8_t tbuf[8];
	uint16_t crc = 0;
	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    3150:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <recv1_buf>
	recv1_buf.nbytes = 1;
    3154:	91 e0       	ldi	r25, 0x01	; 1
    3156:	90 93 19 2b 	sts	0x2B19, r25	; 0x802b19 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    315a:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv1_buf+0x102>
	recv1_buf.done = NO;
    315e:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>
	tbuf[0] = controller;
    3162:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBOSETENCODER;
    3164:	86 e1       	ldi	r24, 0x16	; 22
    3166:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (value >> 24) & 0xFF;
    3168:	7b 83       	std	Y+3, r23	; 0x03
	tbuf[3] = (value >> 16) & 0xFF;
    316a:	6c 83       	std	Y+4, r22	; 0x04
	tbuf[4] = (value >> 8) & 0xFF;
    316c:	5d 83       	std	Y+5, r21	; 0x05
	tbuf[5] = value & 0xFF;
    316e:	4e 83       	std	Y+6, r20	; 0x06
	crc = crc16(tbuf, 6);
    3170:	66 e0       	ldi	r22, 0x06	; 6
    3172:	70 e0       	ldi	r23, 0x00	; 0
    3174:	ce 01       	movw	r24, r28
    3176:	01 96       	adiw	r24, 0x01	; 1
    3178:	0e 94 1b 14 	call	0x2836	; 0x2836 <crc16>
	tbuf[6] = (crc >> 8) & 0xFF;
    317c:	9f 83       	std	Y+7, r25	; 0x07
	tbuf[7] = crc & 0xFF;
    317e:	88 87       	std	Y+8, r24	; 0x08

	send_USART(1, tbuf, 8);				// Send the command
    3180:	48 e0       	ldi	r20, 0x08	; 8
    3182:	be 01       	movw	r22, r28
    3184:	6f 5f       	subi	r22, 0xFF	; 255
    3186:	7f 4f       	sbci	r23, 0xFF	; 255
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	0e 94 82 1b 	call	0x3704	; 0x3704 <send_USART>

	USART1_ticks = 0;
    318e:	10 92 14 2a 	sts	0x2A14, r1	; 0x802a14 <USART1_ticks>
    3192:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <USART1_ticks+0x1>
	start_TCB0(1);						// Start 1 ms ticks timer
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	0e 94 de 19 	call	0x33bc	; 0x33bc <start_TCB0>

	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    319e:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <recv1_buf+0x103>
    31a2:	81 30       	cpi	r24, 0x01	; 1
    31a4:	41 f4       	brne	.+16     	; 0x31b6 <set_MOTOREncoder+0x74>
			stop_TCB0();
    31a6:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
			return(ERROR);
		}

	}

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
    31aa:	80 91 19 2a 	lds	r24, 0x2A19	; 0x802a19 <recv1_buf>
    31ae:	8f 3f       	cpi	r24, 0xFF	; 255
    31b0:	91 f4       	brne	.+36     	; 0x31d6 <set_MOTOREncoder+0x94>
		printError(ERR_MTRTIMEOUT, "set_MOTOREncoder bad ack");
		return(ERROR);
	}

	return(NOERROR);
    31b2:	80 e0       	ldi	r24, 0x00	; 0
    31b4:	17 c0       	rjmp	.+46     	; 0x31e4 <set_MOTOREncoder+0xa2>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
			stop_TCB0();
			break;
		}
		if (USART1_ticks > 50) {				// 4 ms barely works at 38400 baud
    31b6:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <USART1_ticks>
    31ba:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <USART1_ticks+0x1>
    31be:	c3 97       	sbiw	r24, 0x33	; 51
    31c0:	70 f3       	brcs	.-36     	; 0x319e <set_MOTOREncoder+0x5c>
			stop_TCB0();
    31c2:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "set_MOTOREncoder timeout");
    31c6:	6f eb       	ldi	r22, 0xBF	; 191
    31c8:	70 e9       	ldi	r23, 0x90	; 144
    31ca:	8f e2       	ldi	r24, 0x2F	; 47
    31cc:	91 e0       	ldi	r25, 0x01	; 1
    31ce:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			return(ERROR);
    31d2:	83 e6       	ldi	r24, 0x63	; 99
    31d4:	07 c0       	rjmp	.+14     	; 0x31e4 <set_MOTOREncoder+0xa2>
		}

	}

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
		printError(ERR_MTRTIMEOUT, "set_MOTOREncoder bad ack");
    31d6:	68 ed       	ldi	r22, 0xD8	; 216
    31d8:	70 e9       	ldi	r23, 0x90	; 144
    31da:	8f e2       	ldi	r24, 0x2F	; 47
    31dc:	91 e0       	ldi	r25, 0x01	; 1
    31de:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		return(ERROR);
    31e2:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    31e4:	28 96       	adiw	r28, 0x08	; 8
    31e6:	cd bf       	out	0x3d, r28	; 61
    31e8:	de bf       	out	0x3e, r29	; 62
    31ea:	df 91       	pop	r29
    31ec:	cf 91       	pop	r28
    31ee:	08 95       	ret

000031f0 <init_MOTORS>:
		NOERROR otherwise

NEED TO FIGURE OUT WHAT TO DO ABOUT ERRORS
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    31f0:	1f 93       	push	r17
    31f2:	cf 93       	push	r28
    31f4:	df 93       	push	r29
    31f6:	00 d0       	rcall	.+0      	; 0x31f8 <init_MOTORS+0x8>
    31f8:	00 d0       	rcall	.+0      	; 0x31fa <init_MOTORS+0xa>
    31fa:	cd b7       	in	r28, 0x3d	; 61
    31fc:	de b7       	in	r29, 0x3e	; 62
    31fe:	2a e6       	ldi	r18, 0x6A	; 106
    3200:	84 e0       	ldi	r24, 0x04	; 4
    3202:	91 e0       	ldi	r25, 0x01	; 1
    3204:	21 50       	subi	r18, 0x01	; 1
    3206:	80 40       	sbci	r24, 0x00	; 0
    3208:	90 40       	sbci	r25, 0x00	; 0
    320a:	e1 f7       	brne	.-8      	; 0x3204 <init_MOTORS+0x14>
    320c:	00 c0       	rjmp	.+0      	; 0x320e <init_MOTORS+0x1e>

	uint8_t controller;
	uint32_t encoderValue;

	_delay_ms(100);	// 50 seems to work
	timerSAVEENCODER = 0;
    320e:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerSAVEENCODER>
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;
    3212:	8b e0       	ldi	r24, 0x0B	; 11
    3214:	80 93 11 2a 	sts	0x2A11, r24	; 0x802a11 <timeoutSAVEENCODER>
	for (controller = MOTOR_A; controller <= MOTOR_C; controller++) {
    3218:	10 e8       	ldi	r17, 0x80	; 128
    321a:	0e c0       	rjmp	.+28     	; 0x3238 <init_MOTORS+0x48>
		getFRAM_MOTOREncoder(controller, &encoderValue);
    321c:	be 01       	movw	r22, r28
    321e:	6f 5f       	subi	r22, 0xFF	; 255
    3220:	7f 4f       	sbci	r23, 0xFF	; 255
    3222:	81 2f       	mov	r24, r17
    3224:	0e 94 61 14 	call	0x28c2	; 0x28c2 <getFRAM_MOTOREncoder>
		set_MOTOREncoder(controller, encoderValue);
    3228:	49 81       	ldd	r20, Y+1	; 0x01
    322a:	5a 81       	ldd	r21, Y+2	; 0x02
    322c:	6b 81       	ldd	r22, Y+3	; 0x03
    322e:	7c 81       	ldd	r23, Y+4	; 0x04
    3230:	81 2f       	mov	r24, r17
    3232:	0e 94 a1 18 	call	0x3142	; 0x3142 <set_MOTOREncoder>
	uint32_t encoderValue;

	_delay_ms(100);	// 50 seems to work
	timerSAVEENCODER = 0;
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;
	for (controller = MOTOR_A; controller <= MOTOR_C; controller++) {
    3236:	1f 5f       	subi	r17, 0xFF	; 255
    3238:	13 38       	cpi	r17, 0x83	; 131
    323a:	80 f3       	brcs	.-32     	; 0x321c <init_MOTORS+0x2c>
		getFRAM_MOTOREncoder(controller, &encoderValue);
		set_MOTOREncoder(controller, encoderValue);
	}

	return(NOERROR);
}
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	24 96       	adiw	r28, 0x04	; 4
    3240:	cd bf       	out	0x3d, r28	; 61
    3242:	de bf       	out	0x3e, r29	; 62
    3244:	df 91       	pop	r29
    3246:	cf 91       	pop	r28
    3248:	1f 91       	pop	r17
    324a:	08 95       	ret

0000324c <init_RTC>:
			between interrupts. ticksRTC = 30719 generates an interrupt
			every minute. ticksRTC = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticksRTC)
{
    324c:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    324e:	e0 e6       	ldi	r30, 0x60	; 96
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    3254:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    3256:	88 ed       	ldi	r24, 0xD8	; 216
    3258:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    325a:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    325c:	01 c0       	rjmp	.+2      	; 0x3260 <init_RTC+0x14>
		asm("nop");
    325e:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    3260:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    3264:	96 fd       	sbrc	r25, 6
    3266:	fb cf       	rjmp	.-10     	; 0x325e <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    3268:	e0 e6       	ldi	r30, 0x60	; 96
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    326e:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    3270:	28 ed       	ldi	r18, 0xD8	; 216
    3272:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    3274:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    3276:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    3278:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    327a:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    327c:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    327e:	01 c0       	rjmp	.+2      	; 0x3282 <init_RTC+0x36>
		asm("nop");
    3280:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    3282:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    3286:	91 11       	cpse	r25, r1
    3288:	fb cf       	rjmp	.-10     	; 0x3280 <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticksRTC;
    328a:	e0 e4       	ldi	r30, 0x40	; 64
    328c:	f1 e0       	ldi	r31, 0x01	; 1
    328e:	42 87       	std	Z+10, r20	; 0x0a
    3290:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    3292:	82 e0       	ldi	r24, 0x02	; 2
    3294:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    3296:	85 81       	ldd	r24, Z+5	; 0x05
    3298:	81 60       	ori	r24, 0x01	; 1
    329a:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz) and set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    329c:	81 eb       	ldi	r24, 0xB1	; 177
    329e:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable interrupt on overflow
    32a0:	82 81       	ldd	r24, Z+2	; 0x02
    32a2:	81 60       	ori	r24, 0x01	; 1
    32a4:	82 83       	std	Z+2, r24	; 0x02
    32a6:	08 95       	ret

000032a8 <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    32a8:	1f 92       	push	r1
    32aa:	0f 92       	push	r0
    32ac:	0f b6       	in	r0, 0x3f	; 63
    32ae:	0f 92       	push	r0
    32b0:	11 24       	eor	r1, r1
    32b2:	8f 93       	push	r24
    32b4:	9f 93       	push	r25

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	timerOLED++;					// Turn off the OLED display
    32bc:	80 91 0c 2a 	lds	r24, 0x2A0C	; 0x802a0c <timerOLED>
    32c0:	90 91 0d 2a 	lds	r25, 0x2A0D	; 0x802a0d <timerOLED+0x1>
    32c4:	01 96       	adiw	r24, 0x01	; 1
    32c6:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <timerOLED>
    32ca:	90 93 0d 2a 	sts	0x2A0D, r25	; 0x802a0d <timerOLED+0x1>
	toggle_LED;						// Blink the light
    32ce:	80 e2       	ldi	r24, 0x20	; 32
    32d0:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>
	timerSAVEENCODER++;				// Save the motor encoder values
    32d4:	80 91 16 2a 	lds	r24, 0x2A16	; 0x802a16 <timerSAVEENCODER>
    32d8:	8f 5f       	subi	r24, 0xFF	; 255
    32da:	80 93 16 2a 	sts	0x2A16, r24	; 0x802a16 <timerSAVEENCODER>

}
    32de:	9f 91       	pop	r25
    32e0:	8f 91       	pop	r24
    32e2:	0f 90       	pop	r0
    32e4:	0f be       	out	0x3f, r0	; 63
    32e6:	0f 90       	pop	r0
    32e8:	1f 90       	pop	r1
    32ea:	18 95       	reti

000032ec <set>:
	Returns:
		ERROR if an invalid object was requested.
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    32ec:	cf 93       	push	r28
    32ee:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	24 e3       	ldi	r18, 0x34	; 52
    32f4:	28 9f       	mul	r18, r24
    32f6:	f0 01       	movw	r30, r0
    32f8:	29 9f       	mul	r18, r25
    32fa:	f0 0d       	add	r31, r0
    32fc:	11 24       	eor	r1, r1
    32fe:	ed 5f       	subi	r30, 0xFD	; 253
    3300:	f7 4d       	sbci	r31, 0xD7	; 215
    3302:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    3304:	24 37       	cpi	r18, 0x74	; 116
    3306:	29 f5       	brne	.+74     	; 0x3352 <set+0x66>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    3308:	24 e3       	ldi	r18, 0x34	; 52
    330a:	28 9f       	mul	r18, r24
    330c:	e0 01       	movw	r28, r0
    330e:	29 9f       	mul	r18, r25
    3310:	d0 0d       	add	r29, r0
    3312:	11 24       	eor	r1, r1
    3314:	cb 5f       	subi	r28, 0xFB	; 251
    3316:	d7 4d       	sbci	r29, 0xD7	; 215
    3318:	fe 01       	movw	r30, r28
    331a:	01 90       	ld	r0, Z+
    331c:	00 20       	and	r0, r0
    331e:	e9 f7       	brne	.-6      	; 0x331a <set+0x2e>
    3320:	31 97       	sbiw	r30, 0x01	; 1
    3322:	ec 1b       	sub	r30, r28
    3324:	fd 0b       	sbc	r31, r29
    3326:	73 97       	sbiw	r30, 0x13	; 19
    3328:	41 f0       	breq	.+16     	; 0x333a <set+0x4e>
				printError(ERR_SETTIME, "set: bad time format");
    332a:	61 ef       	ldi	r22, 0xF1	; 241
    332c:	70 e9       	ldi	r23, 0x90	; 144
    332e:	8a e5       	ldi	r24, 0x5A	; 90
    3330:	92 e0       	ldi	r25, 0x02	; 2
    3332:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
				return(ERROR);
    3336:	83 e6       	ldi	r24, 0x63	; 99
    3338:	13 c0       	rjmp	.+38     	; 0x3360 <set+0x74>
			}
			put_time(pcmd[cstack].cvalue);
    333a:	ce 01       	movw	r24, r28
    333c:	0e 94 28 06 	call	0xc50	; 0xc50 <put_time>
			write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    3340:	24 e1       	ldi	r18, 0x14	; 20
    3342:	ae 01       	movw	r20, r28
    3344:	60 e0       	ldi	r22, 0x00	; 0
    3346:	70 e0       	ldi	r23, 0x00	; 0
    3348:	80 e5       	ldi	r24, 0x50	; 80
    334a:	0e 94 4c 07 	call	0xe98	; 0xe98 <write_FRAM>

		default:
			printError(ERR_SET, "set what?");
			return(ERROR);
	}
	return(NOERROR);
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	07 c0       	rjmp	.+14     	; 0x3360 <set+0x74>
			write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
//			write_FRAM(FRAMTWIADDR, SETTIMEFRAM, (uint8_t*) pcmd[cstack].cvalue);
			break;

		default:
			printError(ERR_SET, "set what?");
    3352:	66 e0       	ldi	r22, 0x06	; 6
    3354:	71 e9       	ldi	r23, 0x91	; 145
    3356:	89 e5       	ldi	r24, 0x59	; 89
    3358:	92 e0       	ldi	r25, 0x02	; 2
    335a:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			return(ERROR);
    335e:	83 e6       	ldi	r24, 0x63	; 99
	}
	return(NOERROR);
}
    3360:	df 91       	pop	r29
    3362:	cf 91       	pop	r28
    3364:	08 95       	ret

00003366 <get_temperature>:
	point for the actual devices.

	The signal is 1.5E-3 mV/K with a 1500 kOhm dropping resistor.
------------------------------------------------------------------------------*/
float get_temperature(uint8_t sensor)
{
    3366:	cf 93       	push	r28
    3368:	df 93       	push	r29
    336a:	00 d0       	rcall	.+0      	; 0x336c <get_temperature+0x6>
    336c:	00 d0       	rcall	.+0      	; 0x336e <get_temperature+0x8>
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62

	float temperature;

	switch (sensor) {
    3372:	83 30       	cpi	r24, 0x03	; 3
    3374:	18 f0       	brcs	.+6      	; 0x337c <get_temperature+0x16>
    3376:	83 30       	cpi	r24, 0x03	; 3
    3378:	39 f0       	breq	.+14     	; 0x3388 <get_temperature+0x22>
    337a:	0b c0       	rjmp	.+22     	; 0x3392 <get_temperature+0x2c>
		case 0:
		case 1:
		case 2:
			read_AD590(sensor, &temperature);
    337c:	be 01       	movw	r22, r28
    337e:	6f 5f       	subi	r22, 0xFF	; 255
    3380:	7f 4f       	sbci	r23, 0xFF	; 255
    3382:	0e 94 47 01 	call	0x28e	; 0x28e <read_AD590>
			break;
    3386:	0d c0       	rjmp	.+26     	; 0x33a2 <get_temperature+0x3c>
		case 3:
			read_MCP9808(&temperature);
    3388:	ce 01       	movw	r24, r28
    338a:	01 96       	adiw	r24, 0x01	; 1
    338c:	0e 94 44 09 	call	0x1288	; 0x1288 <read_MCP9808>
			break;
    3390:	08 c0       	rjmp	.+16     	; 0x33a2 <get_temperature+0x3c>
		default:
			temperature = -666.0;
    3392:	80 e0       	ldi	r24, 0x00	; 0
    3394:	90 e8       	ldi	r25, 0x80	; 128
    3396:	a6 e2       	ldi	r26, 0x26	; 38
    3398:	b4 ec       	ldi	r27, 0xC4	; 196
    339a:	89 83       	std	Y+1, r24	; 0x01
    339c:	9a 83       	std	Y+2, r25	; 0x02
    339e:	ab 83       	std	Y+3, r26	; 0x03
    33a0:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}

	return(temperature);
    33a2:	69 81       	ldd	r22, Y+1	; 0x01
    33a4:	7a 81       	ldd	r23, Y+2	; 0x02
    33a6:	8b 81       	ldd	r24, Y+3	; 0x03
    33a8:	9c 81       	ldd	r25, Y+4	; 0x04

}
    33aa:	24 96       	adiw	r28, 0x04	; 4
    33ac:	cd bf       	out	0x3d, r28	; 61
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	df 91       	pop	r29
    33b2:	cf 91       	pop	r28
    33b4:	08 95       	ret

000033b6 <testroutine>:

void testroutine(void)
{


	init_MOTORS();
    33b6:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <init_MOTORS>
    33ba:	08 95       	ret

000033bc <start_TCB0>:
	Output:
		None
------------------------------------------------------------------------------*/
void start_TCB0(uint16_t msPeriod)
{
ticks = 0;
    33bc:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <ticks>
    33c0:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <ticks+0x1>
	// Check for overflows; msPeriod=19ms is max for 3.33MHz
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);
    33c4:	25 e0       	ldi	r18, 0x05	; 5
    33c6:	3d e0       	ldi	r19, 0x0D	; 13
    33c8:	ac 01       	movw	r20, r24
    33ca:	42 9f       	mul	r20, r18
    33cc:	c0 01       	movw	r24, r0
    33ce:	43 9f       	mul	r20, r19
    33d0:	90 0d       	add	r25, r0
    33d2:	52 9f       	mul	r21, r18
    33d4:	90 0d       	add	r25, r0
    33d6:	11 24       	eor	r1, r1
    33d8:	e0 e8       	ldi	r30, 0x80	; 128
    33da:	fa e0       	ldi	r31, 0x0A	; 10
    33dc:	84 87       	std	Z+12, r24	; 0x0c
    33de:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	85 83       	std	Z+5, r24	; 0x05
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    33e4:	80 83       	st	Z, r24
    33e6:	08 95       	ret

000033e8 <stop_TCB0>:
	Turn off the TCB0 timer
------------------------------------------------------------------------------*/
void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    33e8:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    33ec:	08 95       	ret

000033ee <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    33ee:	1f 92       	push	r1
    33f0:	0f 92       	push	r0
    33f2:	0f b6       	in	r0, 0x3f	; 63
    33f4:	0f 92       	push	r0
    33f6:	11 24       	eor	r1, r1
    33f8:	8f 93       	push	r24
    33fa:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks++;
    3402:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    3406:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    340a:	01 96       	adiw	r24, 0x01	; 1
    340c:	80 93 17 2a 	sts	0x2A17, r24	; 0x802a17 <ticks>
    3410:	90 93 18 2a 	sts	0x2A18, r25	; 0x802a18 <ticks+0x1>
	TWI_ticks++;
    3414:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <TWI_ticks>
    3418:	90 91 13 2a 	lds	r25, 0x2A13	; 0x802a13 <TWI_ticks+0x1>
    341c:	01 96       	adiw	r24, 0x01	; 1
    341e:	80 93 12 2a 	sts	0x2A12, r24	; 0x802a12 <TWI_ticks>
    3422:	90 93 13 2a 	sts	0x2A13, r25	; 0x802a13 <TWI_ticks+0x1>
	USART1_ticks++;
    3426:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <USART1_ticks>
    342a:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <USART1_ticks+0x1>
    342e:	01 96       	adiw	r24, 0x01	; 1
    3430:	80 93 14 2a 	sts	0x2A14, r24	; 0x802a14 <USART1_ticks>
    3434:	90 93 15 2a 	sts	0x2A15, r25	; 0x802a15 <USART1_ticks+0x1>

    3438:	9f 91       	pop	r25
    343a:	8f 91       	pop	r24
    343c:	0f 90       	pop	r0
    343e:	0f be       	out	0x3f, r0	; 63
    3440:	0f 90       	pop	r0
    3442:	1f 90       	pop	r1
    3444:	18 95       	reti

00003446 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    3446:	e0 ea       	ldi	r30, 0xA0	; 160
    3448:	f8 e0       	ldi	r31, 0x08	; 8
    344a:	8b e0       	ldi	r24, 0x0B	; 11
    344c:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    344e:	83 81       	ldd	r24, Z+3	; 0x03
    3450:	81 60       	ori	r24, 0x01	; 1
    3452:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    3454:	85 81       	ldd	r24, Z+5	; 0x05
    3456:	81 60       	ori	r24, 0x01	; 1
    3458:	85 83       	std	Z+5, r24	; 0x05
    345a:	08 95       	ret

0000345c <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    345c:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <TWI_ticks>
    3460:	10 92 13 2a 	sts	0x2A13, r1	; 0x802a13 <TWI_ticks+0x1>
	start_TCB0(1);								// 1 ms ticks
    3464:	81 e0       	ldi	r24, 0x01	; 1
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	0e 94 de 19 	call	0x33bc	; 0x33bc <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    346c:	11 c0       	rjmp	.+34     	; 0x3490 <read_TWI+0x34>
		asm("nop");
    346e:	00 00       	nop
		if (TWI_ticks > 50) {					// Typically 0 ticks needed
    3470:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <TWI_ticks>
    3474:	90 91 13 2a 	lds	r25, 0x2A13	; 0x802a13 <TWI_ticks+0x1>
    3478:	c3 97       	sbiw	r24, 0x33	; 51
    347a:	50 f0       	brcs	.+20     	; 0x3490 <read_TWI+0x34>
			printError(ERR_TWI, "read_TWI timeout");
    347c:	60 e1       	ldi	r22, 0x10	; 16
    347e:	71 e9       	ldi	r23, 0x91	; 145
    3480:	81 e9       	ldi	r24, 0x91	; 145
    3482:	91 e0       	ldi	r25, 0x01	; 1
    3484:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			stop_TCB0();
    3488:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
			return(0xFF);
    348c:	8f ef       	ldi	r24, 0xFF	; 255
    348e:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    3490:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3494:	88 23       	and	r24, r24
    3496:	5c f7       	brge	.-42     	; 0x346e <read_TWI+0x12>
			printError(ERR_TWI, "read_TWI timeout");
			stop_TCB0();
			return(0xFF);
		}
	}
	stop_TCB0();
    3498:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK
    349c:	e0 ea       	ldi	r30, 0xA0	; 160
    349e:	f8 e0       	ldi	r31, 0x08	; 8
    34a0:	84 81       	ldd	r24, Z+4	; 0x04
    34a2:	8b 7f       	andi	r24, 0xFB	; 251
    34a4:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;							// Next read
    34a6:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    34a8:	94 81       	ldd	r25, Z+4	; 0x04
    34aa:	92 60       	ori	r25, 0x02	; 2
    34ac:	94 83       	std	Z+4, r25	; 0x04

	return(data);

}
    34ae:	08 95       	ret

000034b0 <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    34b0:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <TWI_ticks>
    34b4:	10 92 13 2a 	sts	0x2A13, r1	; 0x802a13 <TWI_ticks+0x1>
	start_TCB0(1);								// 1 ms ticks
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	0e 94 de 19 	call	0x33bc	; 0x33bc <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    34c0:	11 c0       	rjmp	.+34     	; 0x34e4 <readlast_TWI+0x34>
		asm("nop");
    34c2:	00 00       	nop
		if (TWI_ticks > 50) {						// Typically 0 ticks needed
    34c4:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <TWI_ticks>
    34c8:	90 91 13 2a 	lds	r25, 0x2A13	; 0x802a13 <TWI_ticks+0x1>
    34cc:	c3 97       	sbiw	r24, 0x33	; 51
    34ce:	50 f0       	brcs	.+20     	; 0x34e4 <readlast_TWI+0x34>
			printError(ERR_TWI, "readlast timeout");
    34d0:	61 e2       	ldi	r22, 0x21	; 33
    34d2:	71 e9       	ldi	r23, 0x91	; 145
    34d4:	81 e9       	ldi	r24, 0x91	; 145
    34d6:	91 e0       	ldi	r25, 0x01	; 1
    34d8:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			stop_TCB0();
    34dc:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
			return(0xFF);
    34e0:	8f ef       	ldi	r24, 0xFF	; 255
    34e2:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    34e4:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    34e8:	88 23       	and	r24, r24
    34ea:	5c f7       	brge	.-42     	; 0x34c2 <readlast_TWI+0x12>
			printError(ERR_TWI, "readlast timeout");
			stop_TCB0();
			return(0xFF);
		}
	}
	stop_TCB0();
    34ec:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    34f0:	e0 ea       	ldi	r30, 0xA0	; 160
    34f2:	f8 e0       	ldi	r31, 0x08	; 8
    34f4:	84 81       	ldd	r24, Z+4	; 0x04
    34f6:	84 60       	ori	r24, 0x04	; 4
    34f8:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    34fa:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    34fc:	08 95       	ret

000034fe <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    34fe:	61 30       	cpi	r22, 0x01	; 1
    3500:	39 f4       	brne	.+14     	; 0x3510 <start_TWI+0x12>
		TWI0.MADDR = ((addr << 1) | 0x01);
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	88 0f       	add	r24, r24
    3506:	99 1f       	adc	r25, r25
    3508:	81 60       	ori	r24, 0x01	; 1
    350a:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    350e:	03 c0       	rjmp	.+6      	; 0x3516 <start_TWI+0x18>
	} else {
		TWI0.MADDR = (addr << 1);
    3510:	88 0f       	add	r24, r24
    3512:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

	TWI_ticks = 0;
    3516:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <TWI_ticks>
    351a:	10 92 13 2a 	sts	0x2A13, r1	; 0x802a13 <TWI_ticks+0x1>
	start_TCB0(1);								// 1 ms ticks
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	0e 94 de 19 	call	0x33bc	; 0x33bc <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    3526:	11 c0       	rjmp	.+34     	; 0x354a <start_TWI+0x4c>
		asm("nop");								// Wait for addr transmission
    3528:	00 00       	nop
		if (TWI_ticks > 50) {
    352a:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <TWI_ticks>
    352e:	90 91 13 2a 	lds	r25, 0x2A13	; 0x802a13 <TWI_ticks+0x1>
    3532:	c3 97       	sbiw	r24, 0x33	; 51
    3534:	50 f0       	brcs	.+20     	; 0x354a <start_TWI+0x4c>
			printError(ERR_TWI, "TWI start timeout");
    3536:	62 e3       	ldi	r22, 0x32	; 50
    3538:	71 e9       	ldi	r23, 0x91	; 145
    353a:	81 e9       	ldi	r24, 0x91	; 145
    353c:	91 e0       	ldi	r25, 0x01	; 1
    353e:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			stop_TCB0();
    3542:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
			return(ERROR);
    3546:	83 e6       	ldi	r24, 0x63	; 99
    3548:	08 95       	ret
		TWI0.MADDR = (addr << 1);
	}

	TWI_ticks = 0;
	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    354a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    354e:	80 7c       	andi	r24, 0xC0	; 192
    3550:	59 f3       	breq	.-42     	; 0x3528 <start_TWI+0x2a>
			printError(ERR_TWI, "TWI start timeout");
			stop_TCB0();
			return(ERROR);
		}
	}
	stop_TCB0();
    3552:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    3556:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    355a:	82 ff       	sbrs	r24, 2
    355c:	08 c0       	rjmp	.+16     	; 0x356e <start_TWI+0x70>
		printError(ERR_TWI, "TWI bus");
    355e:	64 e4       	ldi	r22, 0x44	; 68
    3560:	71 e9       	ldi	r23, 0x91	; 145
    3562:	81 e9       	ldi	r24, 0x91	; 145
    3564:	91 e0       	ldi	r25, 0x01	; 1
    3566:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		return(ERROR);
    356a:	83 e6       	ldi	r24, 0x63	; 99
    356c:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    356e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3572:	83 ff       	sbrs	r24, 3
    3574:	08 c0       	rjmp	.+16     	; 0x3586 <start_TWI+0x88>
		printError(ERR_TWI, "TWI arbitration");
    3576:	6c e4       	ldi	r22, 0x4C	; 76
    3578:	71 e9       	ldi	r23, 0x91	; 145
    357a:	81 e9       	ldi	r24, 0x91	; 145
    357c:	91 e0       	ldi	r25, 0x01	; 1
    357e:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		return(ERROR);
    3582:	83 e6       	ldi	r24, 0x63	; 99
    3584:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    3586:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    358a:	89 2f       	mov	r24, r25
    358c:	80 71       	andi	r24, 0x10	; 16
    358e:	94 ff       	sbrs	r25, 4
    3590:	07 c0       	rjmp	.+14     	; 0x35a0 <start_TWI+0xa2>
		printError(ERR_TWI, "TWI no device responded");
    3592:	6c e5       	ldi	r22, 0x5C	; 92
    3594:	71 e9       	ldi	r23, 0x91	; 145
    3596:	81 e9       	ldi	r24, 0x91	; 145
    3598:	91 e0       	ldi	r25, 0x01	; 1
    359a:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		return(ERROR);
    359e:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    35a0:	08 95       	ret

000035a2 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    35a2:	87 e0       	ldi	r24, 0x07	; 7
    35a4:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    35a8:	08 95       	ret

000035aa <write_TWI>:
	is required to get out of the NOP loop at the top.

	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{
    35aa:	cf 93       	push	r28
    35ac:	c8 2f       	mov	r28, r24

	TWI_ticks = 0;
    35ae:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <TWI_ticks>
    35b2:	10 92 13 2a 	sts	0x2A13, r1	; 0x802a13 <TWI_ticks+0x1>
	start_TCB0(1);							// 1 ms ticks
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	0e 94 de 19 	call	0x33bc	; 0x33bc <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    35be:	11 c0       	rjmp	.+34     	; 0x35e2 <write_TWI+0x38>
		asm("nop");
    35c0:	00 00       	nop
		if (TWI_ticks > 50) {
    35c2:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <TWI_ticks>
    35c6:	90 91 13 2a 	lds	r25, 0x2A13	; 0x802a13 <TWI_ticks+0x1>
    35ca:	c3 97       	sbiw	r24, 0x33	; 51
    35cc:	50 f0       	brcs	.+20     	; 0x35e2 <write_TWI+0x38>
			printError(ERR_TWI, "write_TWI error1");
    35ce:	64 e7       	ldi	r22, 0x74	; 116
    35d0:	71 e9       	ldi	r23, 0x91	; 145
    35d2:	81 e9       	ldi	r24, 0x91	; 145
    35d4:	91 e0       	ldi	r25, 0x01	; 1
    35d6:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			stop_TCB0();
    35da:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
			return(ERROR);
    35de:	83 e6       	ldi	r24, 0x63	; 99
    35e0:	35 c0       	rjmp	.+106    	; 0x364c <write_TWI+0xa2>
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    35e2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    35e6:	86 ff       	sbrs	r24, 6
    35e8:	eb cf       	rjmp	.-42     	; 0x35c0 <write_TWI+0x16>
			printError(ERR_TWI, "write_TWI error1");
			stop_TCB0();
			return(ERROR);
		}
	}
	stop_TCB0();
    35ea:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>

	TWI0.MDATA = data;
    35ee:	c0 93 a8 08 	sts	0x08A8, r28	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	TWI_ticks = 0;
    35f2:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <TWI_ticks>
    35f6:	10 92 13 2a 	sts	0x2A13, r1	; 0x802a13 <TWI_ticks+0x1>
	start_TCB0(1);
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	0e 94 de 19 	call	0x33bc	; 0x33bc <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    3602:	11 c0       	rjmp	.+34     	; 0x3626 <write_TWI+0x7c>
		asm("nop");
    3604:	00 00       	nop
		if (TWI_ticks > 50) {
    3606:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <TWI_ticks>
    360a:	90 91 13 2a 	lds	r25, 0x2A13	; 0x802a13 <TWI_ticks+0x1>
    360e:	c3 97       	sbiw	r24, 0x33	; 51
    3610:	50 f0       	brcs	.+20     	; 0x3626 <write_TWI+0x7c>
			printError(ERR_TWI, "write_TWI error2");
    3612:	65 e8       	ldi	r22, 0x85	; 133
    3614:	71 e9       	ldi	r23, 0x91	; 145
    3616:	81 e9       	ldi	r24, 0x91	; 145
    3618:	91 e0       	ldi	r25, 0x01	; 1
    361a:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
			stop_TCB0();
    361e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
			return(ERROR);
    3622:	83 e6       	ldi	r24, 0x63	; 99
    3624:	13 c0       	rjmp	.+38     	; 0x364c <write_TWI+0xa2>

	TWI0.MDATA = data;

	TWI_ticks = 0;
	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    3626:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    362a:	86 ff       	sbrs	r24, 6
    362c:	eb cf       	rjmp	.-42     	; 0x3604 <write_TWI+0x5a>
			printError(ERR_TWI, "write_TWI error2");
			stop_TCB0();
			return(ERROR);
		}
	}
	stop_TCB0();
    362e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    3632:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3636:	89 2f       	mov	r24, r25
    3638:	80 71       	andi	r24, 0x10	; 16
    363a:	94 ff       	sbrs	r25, 4
    363c:	07 c0       	rjmp	.+14     	; 0x364c <write_TWI+0xa2>
		printError(ERR_TWI, "ACK not received");
    363e:	66 e9       	ldi	r22, 0x96	; 150
    3640:	71 e9       	ldi	r23, 0x91	; 145
    3642:	81 e9       	ldi	r24, 0x91	; 145
    3644:	91 e0       	ldi	r25, 0x01	; 1
    3646:	0e 94 98 06 	call	0xd30	; 0xd30 <printError>
		return(ERROR);
    364a:	83 e6       	ldi	r24, 0x63	; 99
	} else {
		return(NOERROR);
	}

}
    364c:	cf 91       	pop	r28
    364e:	08 95       	ret

00003650 <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    3650:	e0 e0       	ldi	r30, 0x00	; 0
    3652:	f4 e0       	ldi	r31, 0x04	; 4
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    3658:	81 83       	std	Z+1, r24	; 0x01
//	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    365a:	e0 e0       	ldi	r30, 0x00	; 0
    365c:	f8 e0       	ldi	r31, 0x08	; 8
    365e:	24 e7       	ldi	r18, 0x74	; 116
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	20 87       	std	Z+8, r18	; 0x08
    3664:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    3666:	95 81       	ldd	r25, Z+5	; 0x05
    3668:	90 68       	ori	r25, 0x80	; 128
    366a:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    366c:	96 81       	ldd	r25, Z+6	; 0x06
    366e:	90 64       	ori	r25, 0x40	; 64
    3670:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    3672:	96 81       	ldd	r25, Z+6	; 0x06
    3674:	90 68       	ori	r25, 0x80	; 128
    3676:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;					// Set up send/receive buffers
    3678:	10 92 1f 2d 	sts	0x2D1F, r1	; 0x802d1f <send0_buf+0xfe>
	send0_buf.tail = 0;
    367c:	10 92 20 2d 	sts	0x2D20, r1	; 0x802d20 <send0_buf+0xff>
	send0_buf.done = YES;
    3680:	80 93 24 2d 	sts	0x2D24, r24	; 0x802d24 <send0_buf+0x103>
	recv0_buf.head = 0;
    3684:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0xfe>
	recv0_buf.tail = 0;
    3688:	10 92 1c 2c 	sts	0x2C1C, r1	; 0x802c1c <recv0_buf+0xff>
	recv0_buf.data[0] = '\0';
    368c:	10 92 1d 2b 	sts	0x2B1D, r1	; 0x802b1d <recv0_buf>
	recv0_buf.length = 0;
    3690:	10 92 1e 2c 	sts	0x2C1E, r1	; 0x802c1e <recv0_buf+0x101>
	recv0_buf.done = NO;
    3694:	10 92 20 2c 	sts	0x2C20, r1	; 0x802c20 <recv0_buf+0x103>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    3698:	e0 e4       	ldi	r30, 0x40	; 64
    369a:	f4 e0       	ldi	r31, 0x04	; 4
    369c:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    369e:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
    36a0:	e0 e2       	ldi	r30, 0x20	; 32
    36a2:	f8 e0       	ldi	r31, 0x08	; 8
    36a4:	2b e5       	ldi	r18, 0x5B	; 91
    36a6:	31 e0       	ldi	r19, 0x01	; 1
    36a8:	20 87       	std	Z+8, r18	; 0x08
    36aa:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    36ac:	95 81       	ldd	r25, Z+5	; 0x05
    36ae:	90 68       	ori	r25, 0x80	; 128
    36b0:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    36b2:	96 81       	ldd	r25, Z+6	; 0x06
    36b4:	90 64       	ori	r25, 0x40	; 64
    36b6:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    36b8:	96 81       	ldd	r25, Z+6	; 0x06
    36ba:	90 68       	ori	r25, 0x80	; 128
    36bc:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    36be:	10 92 2b 30 	sts	0x302B, r1	; 0x80302b <send1_buf+0xfe>
	send1_buf.tail = 0;
    36c2:	10 92 2c 30 	sts	0x302C, r1	; 0x80302c <send1_buf+0xff>
	send1_buf.done = YES;
    36c6:	80 93 30 30 	sts	0x3030, r24	; 0x803030 <send1_buf+0x103>
	recv1_buf.head = 0;
    36ca:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv1_buf+0xfe>
	recv1_buf.tail = 0;
    36ce:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0xff>
	recv1_buf.data[0] = '\0';
    36d2:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <recv1_buf>
	recv1_buf.done = NO;
    36d6:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    36da:	e0 e2       	ldi	r30, 0x20	; 32
    36dc:	f4 e0       	ldi	r31, 0x04	; 4
    36de:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    36e0:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    36e2:	e0 e6       	ldi	r30, 0x60	; 96
    36e4:	f8 e0       	ldi	r31, 0x08	; 8
    36e6:	2d e6       	ldi	r18, 0x6D	; 109
    36e8:	35 e0       	ldi	r19, 0x05	; 5
    36ea:	20 87       	std	Z+8, r18	; 0x08
    36ec:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    36ee:	96 81       	ldd	r25, Z+6	; 0x06
    36f0:	90 64       	ori	r25, 0x40	; 64
    36f2:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    36f4:	96 81       	ldd	r25, Z+6	; 0x06
    36f6:	90 68       	ori	r25, 0x80	; 128
    36f8:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    36fa:	80 93 2c 2f 	sts	0x2F2C, r24	; 0x802f2c <send3_buf+0x103>
	recv3_buf.done = NO;
    36fe:	10 92 28 2e 	sts	0x2E28, r1	; 0x802e28 <recv3_buf+0x103>
    3702:	08 95       	ret

00003704 <send_USART>:
		"transmit data register empty" interrupt (DREIE). The USARTn_DRE_vect
		puts the bytes into the transmit register until the tail catches up
		to the head of the circular buffer.
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    3704:	0f 93       	push	r16
    3706:	1f 93       	push	r17
    3708:	cf 93       	push	r28
    370a:	df 93       	push	r29
    370c:	eb 01       	movw	r28, r22
    370e:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    3710:	81 30       	cpi	r24, 0x01	; 1
    3712:	d1 f1       	breq	.+116    	; 0x3788 <send_USART+0x84>
    3714:	20 f0       	brcs	.+8      	; 0x371e <send_USART+0x1a>
    3716:	83 30       	cpi	r24, 0x03	; 3
    3718:	09 f4       	brne	.+2      	; 0x371c <send_USART+0x18>
    371a:	85 c0       	rjmp	.+266    	; 0x3826 <send_USART+0x122>
    371c:	8c c0       	rjmp	.+280    	; 0x3836 <send_USART+0x132>
		case 0:
			send0_buf.done = NO;
    371e:	10 92 24 2d 	sts	0x2D24, r1	; 0x802d24 <send0_buf+0x103>
			for (i = 0; i < nbytes; i++) {
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	11 c0       	rjmp	.+34     	; 0x3748 <send_USART+0x44>
				send0_buf.data[send0_buf.head] = *data++;
    3726:	ef e1       	ldi	r30, 0x1F	; 31
    3728:	fd e2       	ldi	r31, 0x2D	; 45
    372a:	80 81       	ld	r24, Z
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	38 81       	ld	r19, Y
    3730:	dc 01       	movw	r26, r24
    3732:	af 5d       	subi	r26, 0xDF	; 223
    3734:	b3 4d       	sbci	r27, 0xD3	; 211
    3736:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    3738:	01 96       	adiw	r24, 0x01	; 1
    373a:	6e ef       	ldi	r22, 0xFE	; 254
    373c:	70 e0       	ldi	r23, 0x00	; 0
    373e:	0e 94 2a 23 	call	0x4654	; 0x4654 <__divmodhi4>
    3742:	80 83       	st	Z, r24
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    3744:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    3746:	21 96       	adiw	r28, 0x01	; 1
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    3748:	21 17       	cp	r18, r17
    374a:	68 f3       	brcs	.-38     	; 0x3726 <send_USART+0x22>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    374c:	e0 e0       	ldi	r30, 0x00	; 0
    374e:	f8 e0       	ldi	r31, 0x08	; 8
    3750:	85 81       	ldd	r24, Z+5	; 0x05
    3752:	80 62       	ori	r24, 0x20	; 32
    3754:	85 83       	std	Z+5, r24	; 0x05
			start_TCB0(10);						// 10 ms ticks
    3756:	8a e0       	ldi	r24, 0x0A	; 10
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	0e 94 de 19 	call	0x33bc	; 0x33bc <start_TCB0>
			while (send0_buf.done == NO) {
    375e:	0d c0       	rjmp	.+26     	; 0x377a <send_USART+0x76>
				if (ticks > 100) {				// 1 second enough?
    3760:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    3764:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    3768:	85 36       	cpi	r24, 0x65	; 101
    376a:	91 05       	cpc	r25, r1
    376c:	30 f0       	brcs	.+12     	; 0x377a <send_USART+0x76>
					stop_TCB0();
    376e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
					send0_buf.done = YES;
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	80 93 24 2d 	sts	0x2D24, r24	; 0x802d24 <send0_buf+0x103>
					return;
    3778:	5e c0       	rjmp	.+188    	; 0x3836 <send_USART+0x132>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			start_TCB0(10);						// 10 ms ticks
			while (send0_buf.done == NO) {
    377a:	80 91 24 2d 	lds	r24, 0x2D24	; 0x802d24 <send0_buf+0x103>
    377e:	88 23       	and	r24, r24
    3780:	79 f3       	breq	.-34     	; 0x3760 <send_USART+0x5c>
					stop_TCB0();
					send0_buf.done = YES;
					return;
				}
			}
			stop_TCB0();
    3782:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <stop_TCB0>
			break;
    3786:	57 c0       	rjmp	.+174    	; 0x3836 <send_USART+0x132>

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
    3788:	64 2f       	mov	r22, r20
    378a:	70 e0       	ldi	r23, 0x00	; 0
    378c:	ce 01       	movw	r24, r28
    378e:	0e 94 1b 14 	call	0x2836	; 0x2836 <crc16>
    3792:	48 2f       	mov	r20, r24
    3794:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    3796:	20 e0       	ldi	r18, 0x00	; 0
    3798:	11 c0       	rjmp	.+34     	; 0x37bc <send_USART+0xb8>
				send1_buf.data[send1_buf.head] = *data++;
    379a:	eb e2       	ldi	r30, 0x2B	; 43
    379c:	f0 e3       	ldi	r31, 0x30	; 48
    379e:	80 81       	ld	r24, Z
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	38 81       	ld	r19, Y
    37a4:	dc 01       	movw	r26, r24
    37a6:	a3 5d       	subi	r26, 0xD3	; 211
    37a8:	b0 4d       	sbci	r27, 0xD0	; 208
    37aa:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    37ac:	01 96       	adiw	r24, 0x01	; 1
    37ae:	6e ef       	ldi	r22, 0xFE	; 254
    37b0:	70 e0       	ldi	r23, 0x00	; 0
    37b2:	0e 94 2a 23 	call	0x4654	; 0x4654 <__divmodhi4>
    37b6:	80 83       	st	Z, r24
			stop_TCB0();
			break;

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    37b8:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    37ba:	21 96       	adiw	r28, 0x01	; 1
			stop_TCB0();
			break;

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    37bc:	21 17       	cp	r18, r17
    37be:	68 f3       	brcs	.-38     	; 0x379a <send_USART+0x96>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    37c0:	eb e2       	ldi	r30, 0x2B	; 43
    37c2:	f0 e3       	ldi	r31, 0x30	; 48
    37c4:	80 81       	ld	r24, Z
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	dc 01       	movw	r26, r24
    37ca:	a3 5d       	subi	r26, 0xD3	; 211
    37cc:	b0 4d       	sbci	r27, 0xD0	; 208
    37ce:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    37d0:	01 96       	adiw	r24, 0x01	; 1
    37d2:	2e ef       	ldi	r18, 0xFE	; 254
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	b9 01       	movw	r22, r18
    37d8:	0e 94 2a 23 	call	0x4654	; 0x4654 <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	dc 01       	movw	r26, r24
    37e0:	a3 5d       	subi	r26, 0xD3	; 211
    37e2:	b0 4d       	sbci	r27, 0xD0	; 208
    37e4:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    37e6:	01 96       	adiw	r24, 0x01	; 1
    37e8:	b9 01       	movw	r22, r18
    37ea:	0e 94 2a 23 	call	0x4654	; 0x4654 <__divmodhi4>
    37ee:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    37f0:	1e 5f       	subi	r17, 0xFE	; 254
    37f2:	10 93 2d 30 	sts	0x302D, r17	; 0x80302d <send1_buf+0x100>
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    37f6:	e0 e2       	ldi	r30, 0x20	; 32
    37f8:	f8 e0       	ldi	r31, 0x08	; 8
    37fa:	85 81       	ldd	r24, Z+5	; 0x05
    37fc:	80 62       	ori	r24, 0x20	; 32
    37fe:	85 83       	std	Z+5, r24	; 0x05
			break;
    3800:	1a c0       	rjmp	.+52     	; 0x3836 <send_USART+0x132>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    3802:	e7 e2       	ldi	r30, 0x27	; 39
    3804:	ff e2       	ldi	r31, 0x2F	; 47
    3806:	80 81       	ld	r24, Z
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	38 81       	ld	r19, Y
    380c:	dc 01       	movw	r26, r24
    380e:	a7 5d       	subi	r26, 0xD7	; 215
    3810:	b1 4d       	sbci	r27, 0xD1	; 209
    3812:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    3814:	01 96       	adiw	r24, 0x01	; 1
    3816:	6e ef       	ldi	r22, 0xFE	; 254
    3818:	70 e0       	ldi	r23, 0x00	; 0
    381a:	0e 94 2a 23 	call	0x4654	; 0x4654 <__divmodhi4>
    381e:	80 83       	st	Z, r24
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    3820:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    3822:	21 96       	adiw	r28, 0x01	; 1
    3824:	01 c0       	rjmp	.+2      	; 0x3828 <send_USART+0x124>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    3826:	20 e0       	ldi	r18, 0x00	; 0
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    3828:	21 17       	cp	r18, r17
    382a:	58 f3       	brcs	.-42     	; 0x3802 <send_USART+0xfe>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    382c:	e0 e6       	ldi	r30, 0x60	; 96
    382e:	f8 e0       	ldi	r31, 0x08	; 8
    3830:	85 81       	ldd	r24, Z+5	; 0x05
    3832:	80 62       	ori	r24, 0x20	; 32
    3834:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    3836:	df 91       	pop	r29
    3838:	cf 91       	pop	r28
    383a:	1f 91       	pop	r17
    383c:	0f 91       	pop	r16
    383e:	08 95       	ret

00003840 <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    3840:	1f 92       	push	r1
    3842:	0f 92       	push	r0
    3844:	0f b6       	in	r0, 0x3f	; 63
    3846:	0f 92       	push	r0
    3848:	11 24       	eor	r1, r1
    384a:	5f 93       	push	r21
    384c:	6f 93       	push	r22
    384e:	7f 93       	push	r23
    3850:	8f 93       	push	r24
    3852:	9f 93       	push	r25
    3854:	af 93       	push	r26
    3856:	bf 93       	push	r27
    3858:	ef 93       	push	r30
    385a:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    385c:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if (recv0_buf.length < (BUFSIZE-1)) {		// BUFSIZE-1 to make room for the terminating \0
    3860:	80 91 1e 2c 	lds	r24, 0x2C1E	; 0x802c1e <recv0_buf+0x101>
    3864:	8d 3f       	cpi	r24, 0xFD	; 253
    3866:	10 f5       	brcc	.+68     	; 0x38ac <__vector_17+0x6c>
//		c = USART0.RXDATAL;
		if ((char) c == '\r') {
    3868:	9d 30       	cpi	r25, 0x0D	; 13
    386a:	51 f4       	brne	.+20     	; 0x3880 <__vector_17+0x40>
			recv0_buf.done = YES;
    386c:	81 e0       	ldi	r24, 0x01	; 1
    386e:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <recv0_buf+0x103>
			recv0_buf.data[recv0_buf.head] = '\0';
    3872:	e0 91 1b 2c 	lds	r30, 0x2C1B	; 0x802c1b <recv0_buf+0xfe>
    3876:	f0 e0       	ldi	r31, 0x00	; 0
    3878:	e3 5e       	subi	r30, 0xE3	; 227
    387a:	f4 4d       	sbci	r31, 0xD4	; 212
    387c:	10 82       	st	Z, r1
    387e:	06 c0       	rjmp	.+12     	; 0x388c <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    3880:	e0 91 1b 2c 	lds	r30, 0x2C1B	; 0x802c1b <recv0_buf+0xfe>
    3884:	f0 e0       	ldi	r31, 0x00	; 0
    3886:	e3 5e       	subi	r30, 0xE3	; 227
    3888:	f4 4d       	sbci	r31, 0xD4	; 212
    388a:	90 83       	st	Z, r25
		}
		recv0_buf.length++;
    388c:	ee e1       	ldi	r30, 0x1E	; 30
    388e:	fc e2       	ldi	r31, 0x2C	; 44
    3890:	80 81       	ld	r24, Z
    3892:	8f 5f       	subi	r24, 0xFF	; 255
    3894:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    3896:	eb e1       	ldi	r30, 0x1B	; 27
    3898:	fc e2       	ldi	r31, 0x2C	; 44
    389a:	80 81       	ld	r24, Z
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	01 96       	adiw	r24, 0x01	; 1
    38a0:	6e ef       	ldi	r22, 0xFE	; 254
    38a2:	70 e0       	ldi	r23, 0x00	; 0
    38a4:	0e 94 2a 23 	call	0x4654	; 0x4654 <__divmodhi4>
    38a8:	80 83       	st	Z, r24
    38aa:	0a c0       	rjmp	.+20     	; 0x38c0 <__vector_17+0x80>
	} else {
		recv0_buf.head = 0;
    38ac:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0xfe>
		recv0_buf.tail = 0;
    38b0:	10 92 1c 2c 	sts	0x2C1C, r1	; 0x802c1c <recv0_buf+0xff>
		recv0_buf.data[0] = '\0';
    38b4:	10 92 1d 2b 	sts	0x2B1D, r1	; 0x802b1d <recv0_buf>
		recv0_buf.length = 0;
    38b8:	10 92 1e 2c 	sts	0x2C1E, r1	; 0x802c1e <recv0_buf+0x101>
		recv0_buf.done = NO;
    38bc:	10 92 20 2c 	sts	0x2C20, r1	; 0x802c20 <recv0_buf+0x103>
	}
}
    38c0:	ff 91       	pop	r31
    38c2:	ef 91       	pop	r30
    38c4:	bf 91       	pop	r27
    38c6:	af 91       	pop	r26
    38c8:	9f 91       	pop	r25
    38ca:	8f 91       	pop	r24
    38cc:	7f 91       	pop	r23
    38ce:	6f 91       	pop	r22
    38d0:	5f 91       	pop	r21
    38d2:	0f 90       	pop	r0
    38d4:	0f be       	out	0x3f, r0	; 63
    38d6:	0f 90       	pop	r0
    38d8:	1f 90       	pop	r1
    38da:	18 95       	reti

000038dc <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    38dc:	1f 92       	push	r1
    38de:	0f 92       	push	r0
    38e0:	0f b6       	in	r0, 0x3f	; 63
    38e2:	0f 92       	push	r0
    38e4:	11 24       	eor	r1, r1
    38e6:	2f 93       	push	r18
    38e8:	8f 93       	push	r24
    38ea:	9f 93       	push	r25
    38ec:	ef 93       	push	r30
    38ee:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    38f0:	e0 e0       	ldi	r30, 0x00	; 0
    38f2:	f8 e0       	ldi	r31, 0x08	; 8
    38f4:	85 81       	ldd	r24, Z+5	; 0x05
    38f6:	8f 7d       	andi	r24, 0xDF	; 223
    38f8:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    38fa:	80 91 1f 2d 	lds	r24, 0x2D1F	; 0x802d1f <send0_buf+0xfe>
    38fe:	e0 91 20 2d 	lds	r30, 0x2D20	; 0x802d20 <send0_buf+0xff>
    3902:	8e 17       	cp	r24, r30
    3904:	d1 f0       	breq	.+52     	; 0x393a <__vector_18+0x5e>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	8e 0f       	add	r24, r30
    390a:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0xff>
    390e:	f0 e0       	ldi	r31, 0x00	; 0
    3910:	ef 5d       	subi	r30, 0xDF	; 223
    3912:	f3 4d       	sbci	r31, 0xD3	; 211
    3914:	90 81       	ld	r25, Z
    3916:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    391a:	91 e0       	ldi	r25, 0x01	; 1
    391c:	8e 3f       	cpi	r24, 0xFE	; 254
    391e:	08 f4       	brcc	.+2      	; 0x3922 <__vector_18+0x46>
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	91 95       	neg	r25
    3924:	29 2f       	mov	r18, r25
    3926:	22 0f       	add	r18, r18
    3928:	82 1b       	sub	r24, r18
    392a:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0xff>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    392e:	e0 e0       	ldi	r30, 0x00	; 0
    3930:	f8 e0       	ldi	r31, 0x08	; 8
    3932:	85 81       	ldd	r24, Z+5	; 0x05
    3934:	80 62       	ori	r24, 0x20	; 32
    3936:	85 83       	std	Z+5, r24	; 0x05
    3938:	03 c0       	rjmp	.+6      	; 0x3940 <__vector_18+0x64>
	} else {
		send0_buf.done = YES;
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	80 93 24 2d 	sts	0x2D24, r24	; 0x802d24 <send0_buf+0x103>
	}

}
    3940:	ff 91       	pop	r31
    3942:	ef 91       	pop	r30
    3944:	9f 91       	pop	r25
    3946:	8f 91       	pop	r24
    3948:	2f 91       	pop	r18
    394a:	0f 90       	pop	r0
    394c:	0f be       	out	0x3f, r0	; 63
    394e:	0f 90       	pop	r0
    3950:	1f 90       	pop	r1
    3952:	18 95       	reti

00003954 <__vector_26>:
/*------------------------------------------------------------------------------
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    3954:	1f 92       	push	r1
    3956:	0f 92       	push	r0
    3958:	0f b6       	in	r0, 0x3f	; 63
    395a:	0f 92       	push	r0
    395c:	11 24       	eor	r1, r1
    395e:	2f 93       	push	r18
    3960:	8f 93       	push	r24
    3962:	9f 93       	push	r25
    3964:	ef 93       	push	r30
    3966:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    3968:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>

	if (recv1_buf.nxfrd < recv1_buf.nbytes) {
    396c:	e0 91 1b 2b 	lds	r30, 0x2B1B	; 0x802b1b <recv1_buf+0x102>
    3970:	80 91 19 2b 	lds	r24, 0x2B19	; 0x802b19 <recv1_buf+0x100>
    3974:	e8 17       	cp	r30, r24
    3976:	40 f4       	brcc	.+16     	; 0x3988 <__vector_26+0x34>
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    3978:	21 e0       	ldi	r18, 0x01	; 1
    397a:	2e 0f       	add	r18, r30
    397c:	20 93 1b 2b 	sts	0x2B1B, r18	; 0x802b1b <recv1_buf+0x102>
    3980:	f0 e0       	ldi	r31, 0x00	; 0
    3982:	e7 5e       	subi	r30, 0xE7	; 231
    3984:	f5 4d       	sbci	r31, 0xD5	; 213
    3986:	90 83       	st	Z, r25
	}

	if (recv1_buf.nxfrd >= recv1_buf.nbytes) {
    3988:	90 91 1b 2b 	lds	r25, 0x2B1B	; 0x802b1b <recv1_buf+0x102>
    398c:	98 17       	cp	r25, r24
    398e:	18 f0       	brcs	.+6      	; 0x3996 <__vector_26+0x42>
		recv1_buf.done = YES;
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	80 93 1c 2b 	sts	0x2B1C, r24	; 0x802b1c <recv1_buf+0x103>
	}

}
    3996:	ff 91       	pop	r31
    3998:	ef 91       	pop	r30
    399a:	9f 91       	pop	r25
    399c:	8f 91       	pop	r24
    399e:	2f 91       	pop	r18
    39a0:	0f 90       	pop	r0
    39a2:	0f be       	out	0x3f, r0	; 63
    39a4:	0f 90       	pop	r0
    39a6:	1f 90       	pop	r1
    39a8:	18 95       	reti

000039aa <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    39aa:	1f 92       	push	r1
    39ac:	0f 92       	push	r0
    39ae:	0f b6       	in	r0, 0x3f	; 63
    39b0:	0f 92       	push	r0
    39b2:	11 24       	eor	r1, r1
    39b4:	2f 93       	push	r18
    39b6:	8f 93       	push	r24
    39b8:	9f 93       	push	r25
    39ba:	ef 93       	push	r30
    39bc:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    39be:	e0 e2       	ldi	r30, 0x20	; 32
    39c0:	f8 e0       	ldi	r31, 0x08	; 8
    39c2:	85 81       	ldd	r24, Z+5	; 0x05
    39c4:	8f 7d       	andi	r24, 0xDF	; 223
    39c6:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    39c8:	80 91 2b 30 	lds	r24, 0x302B	; 0x80302b <send1_buf+0xfe>
    39cc:	e0 91 2c 30 	lds	r30, 0x302C	; 0x80302c <send1_buf+0xff>
    39d0:	8e 17       	cp	r24, r30
    39d2:	d1 f0       	breq	.+52     	; 0x3a08 <__vector_27+0x5e>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    39d4:	81 e0       	ldi	r24, 0x01	; 1
    39d6:	8e 0f       	add	r24, r30
    39d8:	80 93 2c 30 	sts	0x302C, r24	; 0x80302c <send1_buf+0xff>
    39dc:	f0 e0       	ldi	r31, 0x00	; 0
    39de:	e3 5d       	subi	r30, 0xD3	; 211
    39e0:	f0 4d       	sbci	r31, 0xD0	; 208
    39e2:	90 81       	ld	r25, Z
    39e4:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    39e8:	91 e0       	ldi	r25, 0x01	; 1
    39ea:	8e 3f       	cpi	r24, 0xFE	; 254
    39ec:	08 f4       	brcc	.+2      	; 0x39f0 <__vector_27+0x46>
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	91 95       	neg	r25
    39f2:	29 2f       	mov	r18, r25
    39f4:	22 0f       	add	r18, r18
    39f6:	82 1b       	sub	r24, r18
    39f8:	80 93 2c 30 	sts	0x302C, r24	; 0x80302c <send1_buf+0xff>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    39fc:	e0 e2       	ldi	r30, 0x20	; 32
    39fe:	f8 e0       	ldi	r31, 0x08	; 8
    3a00:	85 81       	ldd	r24, Z+5	; 0x05
    3a02:	80 62       	ori	r24, 0x20	; 32
    3a04:	85 83       	std	Z+5, r24	; 0x05
    3a06:	03 c0       	rjmp	.+6      	; 0x3a0e <__vector_27+0x64>
	} else {
		send1_buf.done = YES;
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	80 93 30 30 	sts	0x3030, r24	; 0x803030 <send1_buf+0x103>
	}

}
    3a0e:	ff 91       	pop	r31
    3a10:	ef 91       	pop	r30
    3a12:	9f 91       	pop	r25
    3a14:	8f 91       	pop	r24
    3a16:	2f 91       	pop	r18
    3a18:	0f 90       	pop	r0
    3a1a:	0f be       	out	0x3f, r0	; 63
    3a1c:	0f 90       	pop	r0
    3a1e:	1f 90       	pop	r1
    3a20:	18 95       	reti

00003a22 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    3a22:	1f 92       	push	r1
    3a24:	0f 92       	push	r0
    3a26:	0f b6       	in	r0, 0x3f	; 63
    3a28:	0f 92       	push	r0
    3a2a:	11 24       	eor	r1, r1
    3a2c:	8f 93       	push	r24
    3a2e:	9f 93       	push	r25
    3a30:	af 93       	push	r26
    3a32:	bf 93       	push	r27
    3a34:	ef 93       	push	r30
    3a36:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    3a38:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    3a3c:	8d 30       	cpi	r24, 0x0D	; 13
    3a3e:	21 f0       	breq	.+8      	; 0x3a48 <__vector_37+0x26>
    3a40:	e0 91 27 2e 	lds	r30, 0x2E27	; 0x802e27 <recv3_buf+0x102>
    3a44:	ed 3f       	cpi	r30, 0xFD	; 253
    3a46:	78 f0       	brcs	.+30     	; 0x3a66 <__vector_37+0x44>
		recv3_buf.done = YES;
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	80 93 28 2e 	sts	0x2E28, r24	; 0x802e28 <recv3_buf+0x103>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    3a4e:	a7 e2       	ldi	r26, 0x27	; 39
    3a50:	be e2       	ldi	r27, 0x2E	; 46
    3a52:	8c 91       	ld	r24, X
    3a54:	e8 2f       	mov	r30, r24
    3a56:	f0 e0       	ldi	r31, 0x00	; 0
    3a58:	eb 5d       	subi	r30, 0xDB	; 219
    3a5a:	f2 4d       	sbci	r31, 0xD2	; 210
    3a5c:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    3a5e:	80 93 25 2e 	sts	0x2E25, r24	; 0x802e25 <recv3_buf+0x100>
		recv3_buf.nxfrd = 0;
    3a62:	1c 92       	st	X, r1
		return;
    3a64:	08 c0       	rjmp	.+16     	; 0x3a76 <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    3a66:	91 e0       	ldi	r25, 0x01	; 1
    3a68:	9e 0f       	add	r25, r30
    3a6a:	90 93 27 2e 	sts	0x2E27, r25	; 0x802e27 <recv3_buf+0x102>
    3a6e:	f0 e0       	ldi	r31, 0x00	; 0
    3a70:	eb 5d       	subi	r30, 0xDB	; 219
    3a72:	f2 4d       	sbci	r31, 0xD2	; 210
    3a74:	80 83       	st	Z, r24
	}

}
    3a76:	ff 91       	pop	r31
    3a78:	ef 91       	pop	r30
    3a7a:	bf 91       	pop	r27
    3a7c:	af 91       	pop	r26
    3a7e:	9f 91       	pop	r25
    3a80:	8f 91       	pop	r24
    3a82:	0f 90       	pop	r0
    3a84:	0f be       	out	0x3f, r0	; 63
    3a86:	0f 90       	pop	r0
    3a88:	1f 90       	pop	r1
    3a8a:	18 95       	reti

00003a8c <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    3a8c:	1f 92       	push	r1
    3a8e:	0f 92       	push	r0
    3a90:	0f b6       	in	r0, 0x3f	; 63
    3a92:	0f 92       	push	r0
    3a94:	11 24       	eor	r1, r1
    3a96:	8f 93       	push	r24
    3a98:	9f 93       	push	r25
    3a9a:	af 93       	push	r26
    3a9c:	bf 93       	push	r27
    3a9e:	ef 93       	push	r30
    3aa0:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    3aa2:	ab e2       	ldi	r26, 0x2B	; 43
    3aa4:	bf e2       	ldi	r27, 0x2F	; 47
    3aa6:	ec 91       	ld	r30, X
    3aa8:	81 e0       	ldi	r24, 0x01	; 1
    3aaa:	8e 0f       	add	r24, r30
    3aac:	8c 93       	st	X, r24
    3aae:	f0 e0       	ldi	r31, 0x00	; 0
    3ab0:	e7 5d       	subi	r30, 0xD7	; 215
    3ab2:	f1 4d       	sbci	r31, 0xD1	; 209
    3ab4:	90 81       	ld	r25, Z
    3ab6:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    3aba:	90 91 29 2f 	lds	r25, 0x2F29	; 0x802f29 <send3_buf+0x100>
    3abe:	89 17       	cp	r24, r25
    3ac0:	40 f0       	brcs	.+16     	; 0x3ad2 <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    3ac2:	e0 e6       	ldi	r30, 0x60	; 96
    3ac4:	f8 e0       	ldi	r31, 0x08	; 8
    3ac6:	85 81       	ldd	r24, Z+5	; 0x05
    3ac8:	8f 7d       	andi	r24, 0xDF	; 223
    3aca:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	80 93 2c 2f 	sts	0x2F2C, r24	; 0x802f2c <send3_buf+0x103>
	}

}
    3ad2:	ff 91       	pop	r31
    3ad4:	ef 91       	pop	r30
    3ad6:	bf 91       	pop	r27
    3ad8:	af 91       	pop	r26
    3ada:	9f 91       	pop	r25
    3adc:	8f 91       	pop	r24
    3ade:	0f 90       	pop	r0
    3ae0:	0f be       	out	0x3f, r0	; 63
    3ae2:	0f 90       	pop	r0
    3ae4:	1f 90       	pop	r1
    3ae6:	18 95       	reti

00003ae8 <reboot>:
#include "wdt.h"

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
    3ae8:	88 ed       	ldi	r24, 0xD8	; 216
    3aea:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    3aec:	81 e0       	ldi	r24, 0x01	; 1
    3aee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    3af2:	08 95       	ret

00003af4 <__vector_29>:

}

ISR(PORTF_PORT_vect)
{
    3af4:	1f 92       	push	r1
    3af6:	0f 92       	push	r0
    3af8:	0f b6       	in	r0, 0x3f	; 63
    3afa:	0f 92       	push	r0
    3afc:	11 24       	eor	r1, r1
    3afe:	2f 93       	push	r18
    3b00:	3f 93       	push	r19
    3b02:	4f 93       	push	r20
    3b04:	5f 93       	push	r21
    3b06:	6f 93       	push	r22
    3b08:	7f 93       	push	r23
    3b0a:	8f 93       	push	r24
    3b0c:	9f 93       	push	r25
    3b0e:	af 93       	push	r26
    3b10:	bf 93       	push	r27
    3b12:	ef 93       	push	r30
    3b14:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
    3b16:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
    3b1a:	86 ff       	sbrs	r24, 6
    3b1c:	05 c0       	rjmp	.+10     	; 0x3b28 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
    3b1e:	80 e4       	ldi	r24, 0x40	; 64
    3b20:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
    3b24:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <reboot>
	}

}
    3b28:	ff 91       	pop	r31
    3b2a:	ef 91       	pop	r30
    3b2c:	bf 91       	pop	r27
    3b2e:	af 91       	pop	r26
    3b30:	9f 91       	pop	r25
    3b32:	8f 91       	pop	r24
    3b34:	7f 91       	pop	r23
    3b36:	6f 91       	pop	r22
    3b38:	5f 91       	pop	r21
    3b3a:	4f 91       	pop	r20
    3b3c:	3f 91       	pop	r19
    3b3e:	2f 91       	pop	r18
    3b40:	0f 90       	pop	r0
    3b42:	0f be       	out	0x3f, r0	; 63
    3b44:	0f 90       	pop	r0
    3b46:	1f 90       	pop	r1
    3b48:	18 95       	reti

00003b4a <__subsf3>:
    3b4a:	50 58       	subi	r21, 0x80	; 128

00003b4c <__addsf3>:
    3b4c:	bb 27       	eor	r27, r27
    3b4e:	aa 27       	eor	r26, r26
    3b50:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__addsf3x>
    3b54:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__fp_round>
    3b58:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__fp_pscA>
    3b5c:	38 f0       	brcs	.+14     	; 0x3b6c <__addsf3+0x20>
    3b5e:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__fp_pscB>
    3b62:	20 f0       	brcs	.+8      	; 0x3b6c <__addsf3+0x20>
    3b64:	39 f4       	brne	.+14     	; 0x3b74 <__addsf3+0x28>
    3b66:	9f 3f       	cpi	r25, 0xFF	; 255
    3b68:	19 f4       	brne	.+6      	; 0x3b70 <__addsf3+0x24>
    3b6a:	26 f4       	brtc	.+8      	; 0x3b74 <__addsf3+0x28>
    3b6c:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <__fp_nan>
    3b70:	0e f4       	brtc	.+2      	; 0x3b74 <__addsf3+0x28>
    3b72:	e0 95       	com	r30
    3b74:	e7 fb       	bst	r30, 7
    3b76:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <__fp_inf>

00003b7a <__addsf3x>:
    3b7a:	e9 2f       	mov	r30, r25
    3b7c:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__fp_split3>
    3b80:	58 f3       	brcs	.-42     	; 0x3b58 <__addsf3+0xc>
    3b82:	ba 17       	cp	r27, r26
    3b84:	62 07       	cpc	r22, r18
    3b86:	73 07       	cpc	r23, r19
    3b88:	84 07       	cpc	r24, r20
    3b8a:	95 07       	cpc	r25, r21
    3b8c:	20 f0       	brcs	.+8      	; 0x3b96 <__addsf3x+0x1c>
    3b8e:	79 f4       	brne	.+30     	; 0x3bae <__addsf3x+0x34>
    3b90:	a6 f5       	brtc	.+104    	; 0x3bfa <__addsf3x+0x80>
    3b92:	0c 94 34 1f 	jmp	0x3e68	; 0x3e68 <__fp_zero>
    3b96:	0e f4       	brtc	.+2      	; 0x3b9a <__addsf3x+0x20>
    3b98:	e0 95       	com	r30
    3b9a:	0b 2e       	mov	r0, r27
    3b9c:	ba 2f       	mov	r27, r26
    3b9e:	a0 2d       	mov	r26, r0
    3ba0:	0b 01       	movw	r0, r22
    3ba2:	b9 01       	movw	r22, r18
    3ba4:	90 01       	movw	r18, r0
    3ba6:	0c 01       	movw	r0, r24
    3ba8:	ca 01       	movw	r24, r20
    3baa:	a0 01       	movw	r20, r0
    3bac:	11 24       	eor	r1, r1
    3bae:	ff 27       	eor	r31, r31
    3bb0:	59 1b       	sub	r21, r25
    3bb2:	99 f0       	breq	.+38     	; 0x3bda <__addsf3x+0x60>
    3bb4:	59 3f       	cpi	r21, 0xF9	; 249
    3bb6:	50 f4       	brcc	.+20     	; 0x3bcc <__addsf3x+0x52>
    3bb8:	50 3e       	cpi	r21, 0xE0	; 224
    3bba:	68 f1       	brcs	.+90     	; 0x3c16 <__addsf3x+0x9c>
    3bbc:	1a 16       	cp	r1, r26
    3bbe:	f0 40       	sbci	r31, 0x00	; 0
    3bc0:	a2 2f       	mov	r26, r18
    3bc2:	23 2f       	mov	r18, r19
    3bc4:	34 2f       	mov	r19, r20
    3bc6:	44 27       	eor	r20, r20
    3bc8:	58 5f       	subi	r21, 0xF8	; 248
    3bca:	f3 cf       	rjmp	.-26     	; 0x3bb2 <__addsf3x+0x38>
    3bcc:	46 95       	lsr	r20
    3bce:	37 95       	ror	r19
    3bd0:	27 95       	ror	r18
    3bd2:	a7 95       	ror	r26
    3bd4:	f0 40       	sbci	r31, 0x00	; 0
    3bd6:	53 95       	inc	r21
    3bd8:	c9 f7       	brne	.-14     	; 0x3bcc <__addsf3x+0x52>
    3bda:	7e f4       	brtc	.+30     	; 0x3bfa <__addsf3x+0x80>
    3bdc:	1f 16       	cp	r1, r31
    3bde:	ba 0b       	sbc	r27, r26
    3be0:	62 0b       	sbc	r22, r18
    3be2:	73 0b       	sbc	r23, r19
    3be4:	84 0b       	sbc	r24, r20
    3be6:	ba f0       	brmi	.+46     	; 0x3c16 <__addsf3x+0x9c>
    3be8:	91 50       	subi	r25, 0x01	; 1
    3bea:	a1 f0       	breq	.+40     	; 0x3c14 <__addsf3x+0x9a>
    3bec:	ff 0f       	add	r31, r31
    3bee:	bb 1f       	adc	r27, r27
    3bf0:	66 1f       	adc	r22, r22
    3bf2:	77 1f       	adc	r23, r23
    3bf4:	88 1f       	adc	r24, r24
    3bf6:	c2 f7       	brpl	.-16     	; 0x3be8 <__addsf3x+0x6e>
    3bf8:	0e c0       	rjmp	.+28     	; 0x3c16 <__addsf3x+0x9c>
    3bfa:	ba 0f       	add	r27, r26
    3bfc:	62 1f       	adc	r22, r18
    3bfe:	73 1f       	adc	r23, r19
    3c00:	84 1f       	adc	r24, r20
    3c02:	48 f4       	brcc	.+18     	; 0x3c16 <__addsf3x+0x9c>
    3c04:	87 95       	ror	r24
    3c06:	77 95       	ror	r23
    3c08:	67 95       	ror	r22
    3c0a:	b7 95       	ror	r27
    3c0c:	f7 95       	ror	r31
    3c0e:	9e 3f       	cpi	r25, 0xFE	; 254
    3c10:	08 f0       	brcs	.+2      	; 0x3c14 <__addsf3x+0x9a>
    3c12:	b0 cf       	rjmp	.-160    	; 0x3b74 <__addsf3+0x28>
    3c14:	93 95       	inc	r25
    3c16:	88 0f       	add	r24, r24
    3c18:	08 f0       	brcs	.+2      	; 0x3c1c <__addsf3x+0xa2>
    3c1a:	99 27       	eor	r25, r25
    3c1c:	ee 0f       	add	r30, r30
    3c1e:	97 95       	ror	r25
    3c20:	87 95       	ror	r24
    3c22:	08 95       	ret

00003c24 <__cmpsf2>:
    3c24:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <__fp_cmp>
    3c28:	08 f4       	brcc	.+2      	; 0x3c2c <__cmpsf2+0x8>
    3c2a:	81 e0       	ldi	r24, 0x01	; 1
    3c2c:	08 95       	ret

00003c2e <__divsf3>:
    3c2e:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <__divsf3x>
    3c32:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__fp_round>
    3c36:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__fp_pscB>
    3c3a:	58 f0       	brcs	.+22     	; 0x3c52 <__divsf3+0x24>
    3c3c:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__fp_pscA>
    3c40:	40 f0       	brcs	.+16     	; 0x3c52 <__divsf3+0x24>
    3c42:	29 f4       	brne	.+10     	; 0x3c4e <__divsf3+0x20>
    3c44:	5f 3f       	cpi	r21, 0xFF	; 255
    3c46:	29 f0       	breq	.+10     	; 0x3c52 <__divsf3+0x24>
    3c48:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <__fp_inf>
    3c4c:	51 11       	cpse	r21, r1
    3c4e:	0c 94 35 1f 	jmp	0x3e6a	; 0x3e6a <__fp_szero>
    3c52:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <__fp_nan>

00003c56 <__divsf3x>:
    3c56:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__fp_split3>
    3c5a:	68 f3       	brcs	.-38     	; 0x3c36 <__divsf3+0x8>

00003c5c <__divsf3_pse>:
    3c5c:	99 23       	and	r25, r25
    3c5e:	b1 f3       	breq	.-20     	; 0x3c4c <__divsf3+0x1e>
    3c60:	55 23       	and	r21, r21
    3c62:	91 f3       	breq	.-28     	; 0x3c48 <__divsf3+0x1a>
    3c64:	95 1b       	sub	r25, r21
    3c66:	55 0b       	sbc	r21, r21
    3c68:	bb 27       	eor	r27, r27
    3c6a:	aa 27       	eor	r26, r26
    3c6c:	62 17       	cp	r22, r18
    3c6e:	73 07       	cpc	r23, r19
    3c70:	84 07       	cpc	r24, r20
    3c72:	38 f0       	brcs	.+14     	; 0x3c82 <__divsf3_pse+0x26>
    3c74:	9f 5f       	subi	r25, 0xFF	; 255
    3c76:	5f 4f       	sbci	r21, 0xFF	; 255
    3c78:	22 0f       	add	r18, r18
    3c7a:	33 1f       	adc	r19, r19
    3c7c:	44 1f       	adc	r20, r20
    3c7e:	aa 1f       	adc	r26, r26
    3c80:	a9 f3       	breq	.-22     	; 0x3c6c <__divsf3_pse+0x10>
    3c82:	35 d0       	rcall	.+106    	; 0x3cee <__divsf3_pse+0x92>
    3c84:	0e 2e       	mov	r0, r30
    3c86:	3a f0       	brmi	.+14     	; 0x3c96 <__divsf3_pse+0x3a>
    3c88:	e0 e8       	ldi	r30, 0x80	; 128
    3c8a:	32 d0       	rcall	.+100    	; 0x3cf0 <__divsf3_pse+0x94>
    3c8c:	91 50       	subi	r25, 0x01	; 1
    3c8e:	50 40       	sbci	r21, 0x00	; 0
    3c90:	e6 95       	lsr	r30
    3c92:	00 1c       	adc	r0, r0
    3c94:	ca f7       	brpl	.-14     	; 0x3c88 <__divsf3_pse+0x2c>
    3c96:	2b d0       	rcall	.+86     	; 0x3cee <__divsf3_pse+0x92>
    3c98:	fe 2f       	mov	r31, r30
    3c9a:	29 d0       	rcall	.+82     	; 0x3cee <__divsf3_pse+0x92>
    3c9c:	66 0f       	add	r22, r22
    3c9e:	77 1f       	adc	r23, r23
    3ca0:	88 1f       	adc	r24, r24
    3ca2:	bb 1f       	adc	r27, r27
    3ca4:	26 17       	cp	r18, r22
    3ca6:	37 07       	cpc	r19, r23
    3ca8:	48 07       	cpc	r20, r24
    3caa:	ab 07       	cpc	r26, r27
    3cac:	b0 e8       	ldi	r27, 0x80	; 128
    3cae:	09 f0       	breq	.+2      	; 0x3cb2 <__divsf3_pse+0x56>
    3cb0:	bb 0b       	sbc	r27, r27
    3cb2:	80 2d       	mov	r24, r0
    3cb4:	bf 01       	movw	r22, r30
    3cb6:	ff 27       	eor	r31, r31
    3cb8:	93 58       	subi	r25, 0x83	; 131
    3cba:	5f 4f       	sbci	r21, 0xFF	; 255
    3cbc:	3a f0       	brmi	.+14     	; 0x3ccc <__divsf3_pse+0x70>
    3cbe:	9e 3f       	cpi	r25, 0xFE	; 254
    3cc0:	51 05       	cpc	r21, r1
    3cc2:	78 f0       	brcs	.+30     	; 0x3ce2 <__divsf3_pse+0x86>
    3cc4:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <__fp_inf>
    3cc8:	0c 94 35 1f 	jmp	0x3e6a	; 0x3e6a <__fp_szero>
    3ccc:	5f 3f       	cpi	r21, 0xFF	; 255
    3cce:	e4 f3       	brlt	.-8      	; 0x3cc8 <__divsf3_pse+0x6c>
    3cd0:	98 3e       	cpi	r25, 0xE8	; 232
    3cd2:	d4 f3       	brlt	.-12     	; 0x3cc8 <__divsf3_pse+0x6c>
    3cd4:	86 95       	lsr	r24
    3cd6:	77 95       	ror	r23
    3cd8:	67 95       	ror	r22
    3cda:	b7 95       	ror	r27
    3cdc:	f7 95       	ror	r31
    3cde:	9f 5f       	subi	r25, 0xFF	; 255
    3ce0:	c9 f7       	brne	.-14     	; 0x3cd4 <__divsf3_pse+0x78>
    3ce2:	88 0f       	add	r24, r24
    3ce4:	91 1d       	adc	r25, r1
    3ce6:	96 95       	lsr	r25
    3ce8:	87 95       	ror	r24
    3cea:	97 f9       	bld	r25, 7
    3cec:	08 95       	ret
    3cee:	e1 e0       	ldi	r30, 0x01	; 1
    3cf0:	66 0f       	add	r22, r22
    3cf2:	77 1f       	adc	r23, r23
    3cf4:	88 1f       	adc	r24, r24
    3cf6:	bb 1f       	adc	r27, r27
    3cf8:	62 17       	cp	r22, r18
    3cfa:	73 07       	cpc	r23, r19
    3cfc:	84 07       	cpc	r24, r20
    3cfe:	ba 07       	cpc	r27, r26
    3d00:	20 f0       	brcs	.+8      	; 0x3d0a <__divsf3_pse+0xae>
    3d02:	62 1b       	sub	r22, r18
    3d04:	73 0b       	sbc	r23, r19
    3d06:	84 0b       	sbc	r24, r20
    3d08:	ba 0b       	sbc	r27, r26
    3d0a:	ee 1f       	adc	r30, r30
    3d0c:	88 f7       	brcc	.-30     	; 0x3cf0 <__divsf3_pse+0x94>
    3d0e:	e0 95       	com	r30
    3d10:	08 95       	ret

00003d12 <__floatunsisf>:
    3d12:	e8 94       	clt
    3d14:	09 c0       	rjmp	.+18     	; 0x3d28 <__floatsisf+0x12>

00003d16 <__floatsisf>:
    3d16:	97 fb       	bst	r25, 7
    3d18:	3e f4       	brtc	.+14     	; 0x3d28 <__floatsisf+0x12>
    3d1a:	90 95       	com	r25
    3d1c:	80 95       	com	r24
    3d1e:	70 95       	com	r23
    3d20:	61 95       	neg	r22
    3d22:	7f 4f       	sbci	r23, 0xFF	; 255
    3d24:	8f 4f       	sbci	r24, 0xFF	; 255
    3d26:	9f 4f       	sbci	r25, 0xFF	; 255
    3d28:	99 23       	and	r25, r25
    3d2a:	a9 f0       	breq	.+42     	; 0x3d56 <__floatsisf+0x40>
    3d2c:	f9 2f       	mov	r31, r25
    3d2e:	96 e9       	ldi	r25, 0x96	; 150
    3d30:	bb 27       	eor	r27, r27
    3d32:	93 95       	inc	r25
    3d34:	f6 95       	lsr	r31
    3d36:	87 95       	ror	r24
    3d38:	77 95       	ror	r23
    3d3a:	67 95       	ror	r22
    3d3c:	b7 95       	ror	r27
    3d3e:	f1 11       	cpse	r31, r1
    3d40:	f8 cf       	rjmp	.-16     	; 0x3d32 <__floatsisf+0x1c>
    3d42:	fa f4       	brpl	.+62     	; 0x3d82 <__floatsisf+0x6c>
    3d44:	bb 0f       	add	r27, r27
    3d46:	11 f4       	brne	.+4      	; 0x3d4c <__floatsisf+0x36>
    3d48:	60 ff       	sbrs	r22, 0
    3d4a:	1b c0       	rjmp	.+54     	; 0x3d82 <__floatsisf+0x6c>
    3d4c:	6f 5f       	subi	r22, 0xFF	; 255
    3d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d50:	8f 4f       	sbci	r24, 0xFF	; 255
    3d52:	9f 4f       	sbci	r25, 0xFF	; 255
    3d54:	16 c0       	rjmp	.+44     	; 0x3d82 <__floatsisf+0x6c>
    3d56:	88 23       	and	r24, r24
    3d58:	11 f0       	breq	.+4      	; 0x3d5e <__floatsisf+0x48>
    3d5a:	96 e9       	ldi	r25, 0x96	; 150
    3d5c:	11 c0       	rjmp	.+34     	; 0x3d80 <__floatsisf+0x6a>
    3d5e:	77 23       	and	r23, r23
    3d60:	21 f0       	breq	.+8      	; 0x3d6a <__floatsisf+0x54>
    3d62:	9e e8       	ldi	r25, 0x8E	; 142
    3d64:	87 2f       	mov	r24, r23
    3d66:	76 2f       	mov	r23, r22
    3d68:	05 c0       	rjmp	.+10     	; 0x3d74 <__floatsisf+0x5e>
    3d6a:	66 23       	and	r22, r22
    3d6c:	71 f0       	breq	.+28     	; 0x3d8a <__floatsisf+0x74>
    3d6e:	96 e8       	ldi	r25, 0x86	; 134
    3d70:	86 2f       	mov	r24, r22
    3d72:	70 e0       	ldi	r23, 0x00	; 0
    3d74:	60 e0       	ldi	r22, 0x00	; 0
    3d76:	2a f0       	brmi	.+10     	; 0x3d82 <__floatsisf+0x6c>
    3d78:	9a 95       	dec	r25
    3d7a:	66 0f       	add	r22, r22
    3d7c:	77 1f       	adc	r23, r23
    3d7e:	88 1f       	adc	r24, r24
    3d80:	da f7       	brpl	.-10     	; 0x3d78 <__floatsisf+0x62>
    3d82:	88 0f       	add	r24, r24
    3d84:	96 95       	lsr	r25
    3d86:	87 95       	ror	r24
    3d88:	97 f9       	bld	r25, 7
    3d8a:	08 95       	ret

00003d8c <__fp_cmp>:
    3d8c:	99 0f       	add	r25, r25
    3d8e:	00 08       	sbc	r0, r0
    3d90:	55 0f       	add	r21, r21
    3d92:	aa 0b       	sbc	r26, r26
    3d94:	e0 e8       	ldi	r30, 0x80	; 128
    3d96:	fe ef       	ldi	r31, 0xFE	; 254
    3d98:	16 16       	cp	r1, r22
    3d9a:	17 06       	cpc	r1, r23
    3d9c:	e8 07       	cpc	r30, r24
    3d9e:	f9 07       	cpc	r31, r25
    3da0:	c0 f0       	brcs	.+48     	; 0x3dd2 <__fp_cmp+0x46>
    3da2:	12 16       	cp	r1, r18
    3da4:	13 06       	cpc	r1, r19
    3da6:	e4 07       	cpc	r30, r20
    3da8:	f5 07       	cpc	r31, r21
    3daa:	98 f0       	brcs	.+38     	; 0x3dd2 <__fp_cmp+0x46>
    3dac:	62 1b       	sub	r22, r18
    3dae:	73 0b       	sbc	r23, r19
    3db0:	84 0b       	sbc	r24, r20
    3db2:	95 0b       	sbc	r25, r21
    3db4:	39 f4       	brne	.+14     	; 0x3dc4 <__fp_cmp+0x38>
    3db6:	0a 26       	eor	r0, r26
    3db8:	61 f0       	breq	.+24     	; 0x3dd2 <__fp_cmp+0x46>
    3dba:	23 2b       	or	r18, r19
    3dbc:	24 2b       	or	r18, r20
    3dbe:	25 2b       	or	r18, r21
    3dc0:	21 f4       	brne	.+8      	; 0x3dca <__fp_cmp+0x3e>
    3dc2:	08 95       	ret
    3dc4:	0a 26       	eor	r0, r26
    3dc6:	09 f4       	brne	.+2      	; 0x3dca <__fp_cmp+0x3e>
    3dc8:	a1 40       	sbci	r26, 0x01	; 1
    3dca:	a6 95       	lsr	r26
    3dcc:	8f ef       	ldi	r24, 0xFF	; 255
    3dce:	81 1d       	adc	r24, r1
    3dd0:	81 1d       	adc	r24, r1
    3dd2:	08 95       	ret

00003dd4 <__fp_inf>:
    3dd4:	97 f9       	bld	r25, 7
    3dd6:	9f 67       	ori	r25, 0x7F	; 127
    3dd8:	80 e8       	ldi	r24, 0x80	; 128
    3dda:	70 e0       	ldi	r23, 0x00	; 0
    3ddc:	60 e0       	ldi	r22, 0x00	; 0
    3dde:	08 95       	ret

00003de0 <__fp_nan>:
    3de0:	9f ef       	ldi	r25, 0xFF	; 255
    3de2:	80 ec       	ldi	r24, 0xC0	; 192
    3de4:	08 95       	ret

00003de6 <__fp_pscA>:
    3de6:	00 24       	eor	r0, r0
    3de8:	0a 94       	dec	r0
    3dea:	16 16       	cp	r1, r22
    3dec:	17 06       	cpc	r1, r23
    3dee:	18 06       	cpc	r1, r24
    3df0:	09 06       	cpc	r0, r25
    3df2:	08 95       	ret

00003df4 <__fp_pscB>:
    3df4:	00 24       	eor	r0, r0
    3df6:	0a 94       	dec	r0
    3df8:	12 16       	cp	r1, r18
    3dfa:	13 06       	cpc	r1, r19
    3dfc:	14 06       	cpc	r1, r20
    3dfe:	05 06       	cpc	r0, r21
    3e00:	08 95       	ret

00003e02 <__fp_round>:
    3e02:	09 2e       	mov	r0, r25
    3e04:	03 94       	inc	r0
    3e06:	00 0c       	add	r0, r0
    3e08:	11 f4       	brne	.+4      	; 0x3e0e <__fp_round+0xc>
    3e0a:	88 23       	and	r24, r24
    3e0c:	52 f0       	brmi	.+20     	; 0x3e22 <__fp_round+0x20>
    3e0e:	bb 0f       	add	r27, r27
    3e10:	40 f4       	brcc	.+16     	; 0x3e22 <__fp_round+0x20>
    3e12:	bf 2b       	or	r27, r31
    3e14:	11 f4       	brne	.+4      	; 0x3e1a <__fp_round+0x18>
    3e16:	60 ff       	sbrs	r22, 0
    3e18:	04 c0       	rjmp	.+8      	; 0x3e22 <__fp_round+0x20>
    3e1a:	6f 5f       	subi	r22, 0xFF	; 255
    3e1c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e1e:	8f 4f       	sbci	r24, 0xFF	; 255
    3e20:	9f 4f       	sbci	r25, 0xFF	; 255
    3e22:	08 95       	ret

00003e24 <__fp_split3>:
    3e24:	57 fd       	sbrc	r21, 7
    3e26:	90 58       	subi	r25, 0x80	; 128
    3e28:	44 0f       	add	r20, r20
    3e2a:	55 1f       	adc	r21, r21
    3e2c:	59 f0       	breq	.+22     	; 0x3e44 <__fp_splitA+0x10>
    3e2e:	5f 3f       	cpi	r21, 0xFF	; 255
    3e30:	71 f0       	breq	.+28     	; 0x3e4e <__fp_splitA+0x1a>
    3e32:	47 95       	ror	r20

00003e34 <__fp_splitA>:
    3e34:	88 0f       	add	r24, r24
    3e36:	97 fb       	bst	r25, 7
    3e38:	99 1f       	adc	r25, r25
    3e3a:	61 f0       	breq	.+24     	; 0x3e54 <__fp_splitA+0x20>
    3e3c:	9f 3f       	cpi	r25, 0xFF	; 255
    3e3e:	79 f0       	breq	.+30     	; 0x3e5e <__fp_splitA+0x2a>
    3e40:	87 95       	ror	r24
    3e42:	08 95       	ret
    3e44:	12 16       	cp	r1, r18
    3e46:	13 06       	cpc	r1, r19
    3e48:	14 06       	cpc	r1, r20
    3e4a:	55 1f       	adc	r21, r21
    3e4c:	f2 cf       	rjmp	.-28     	; 0x3e32 <__fp_split3+0xe>
    3e4e:	46 95       	lsr	r20
    3e50:	f1 df       	rcall	.-30     	; 0x3e34 <__fp_splitA>
    3e52:	08 c0       	rjmp	.+16     	; 0x3e64 <__fp_splitA+0x30>
    3e54:	16 16       	cp	r1, r22
    3e56:	17 06       	cpc	r1, r23
    3e58:	18 06       	cpc	r1, r24
    3e5a:	99 1f       	adc	r25, r25
    3e5c:	f1 cf       	rjmp	.-30     	; 0x3e40 <__fp_splitA+0xc>
    3e5e:	86 95       	lsr	r24
    3e60:	71 05       	cpc	r23, r1
    3e62:	61 05       	cpc	r22, r1
    3e64:	08 94       	sec
    3e66:	08 95       	ret

00003e68 <__fp_zero>:
    3e68:	e8 94       	clt

00003e6a <__fp_szero>:
    3e6a:	bb 27       	eor	r27, r27
    3e6c:	66 27       	eor	r22, r22
    3e6e:	77 27       	eor	r23, r23
    3e70:	cb 01       	movw	r24, r22
    3e72:	97 f9       	bld	r25, 7
    3e74:	08 95       	ret

00003e76 <__gesf2>:
    3e76:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <__fp_cmp>
    3e7a:	08 f4       	brcc	.+2      	; 0x3e7e <__gesf2+0x8>
    3e7c:	8f ef       	ldi	r24, 0xFF	; 255
    3e7e:	08 95       	ret

00003e80 <__mulsf3>:
    3e80:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <__mulsf3x>
    3e84:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__fp_round>
    3e88:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__fp_pscA>
    3e8c:	38 f0       	brcs	.+14     	; 0x3e9c <__mulsf3+0x1c>
    3e8e:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <__fp_pscB>
    3e92:	20 f0       	brcs	.+8      	; 0x3e9c <__mulsf3+0x1c>
    3e94:	95 23       	and	r25, r21
    3e96:	11 f0       	breq	.+4      	; 0x3e9c <__mulsf3+0x1c>
    3e98:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <__fp_inf>
    3e9c:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <__fp_nan>
    3ea0:	11 24       	eor	r1, r1
    3ea2:	0c 94 35 1f 	jmp	0x3e6a	; 0x3e6a <__fp_szero>

00003ea6 <__mulsf3x>:
    3ea6:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__fp_split3>
    3eaa:	70 f3       	brcs	.-36     	; 0x3e88 <__mulsf3+0x8>

00003eac <__mulsf3_pse>:
    3eac:	95 9f       	mul	r25, r21
    3eae:	c1 f3       	breq	.-16     	; 0x3ea0 <__mulsf3+0x20>
    3eb0:	95 0f       	add	r25, r21
    3eb2:	50 e0       	ldi	r21, 0x00	; 0
    3eb4:	55 1f       	adc	r21, r21
    3eb6:	62 9f       	mul	r22, r18
    3eb8:	f0 01       	movw	r30, r0
    3eba:	72 9f       	mul	r23, r18
    3ebc:	bb 27       	eor	r27, r27
    3ebe:	f0 0d       	add	r31, r0
    3ec0:	b1 1d       	adc	r27, r1
    3ec2:	63 9f       	mul	r22, r19
    3ec4:	aa 27       	eor	r26, r26
    3ec6:	f0 0d       	add	r31, r0
    3ec8:	b1 1d       	adc	r27, r1
    3eca:	aa 1f       	adc	r26, r26
    3ecc:	64 9f       	mul	r22, r20
    3ece:	66 27       	eor	r22, r22
    3ed0:	b0 0d       	add	r27, r0
    3ed2:	a1 1d       	adc	r26, r1
    3ed4:	66 1f       	adc	r22, r22
    3ed6:	82 9f       	mul	r24, r18
    3ed8:	22 27       	eor	r18, r18
    3eda:	b0 0d       	add	r27, r0
    3edc:	a1 1d       	adc	r26, r1
    3ede:	62 1f       	adc	r22, r18
    3ee0:	73 9f       	mul	r23, r19
    3ee2:	b0 0d       	add	r27, r0
    3ee4:	a1 1d       	adc	r26, r1
    3ee6:	62 1f       	adc	r22, r18
    3ee8:	83 9f       	mul	r24, r19
    3eea:	a0 0d       	add	r26, r0
    3eec:	61 1d       	adc	r22, r1
    3eee:	22 1f       	adc	r18, r18
    3ef0:	74 9f       	mul	r23, r20
    3ef2:	33 27       	eor	r19, r19
    3ef4:	a0 0d       	add	r26, r0
    3ef6:	61 1d       	adc	r22, r1
    3ef8:	23 1f       	adc	r18, r19
    3efa:	84 9f       	mul	r24, r20
    3efc:	60 0d       	add	r22, r0
    3efe:	21 1d       	adc	r18, r1
    3f00:	82 2f       	mov	r24, r18
    3f02:	76 2f       	mov	r23, r22
    3f04:	6a 2f       	mov	r22, r26
    3f06:	11 24       	eor	r1, r1
    3f08:	9f 57       	subi	r25, 0x7F	; 127
    3f0a:	50 40       	sbci	r21, 0x00	; 0
    3f0c:	9a f0       	brmi	.+38     	; 0x3f34 <__mulsf3_pse+0x88>
    3f0e:	f1 f0       	breq	.+60     	; 0x3f4c <__mulsf3_pse+0xa0>
    3f10:	88 23       	and	r24, r24
    3f12:	4a f0       	brmi	.+18     	; 0x3f26 <__mulsf3_pse+0x7a>
    3f14:	ee 0f       	add	r30, r30
    3f16:	ff 1f       	adc	r31, r31
    3f18:	bb 1f       	adc	r27, r27
    3f1a:	66 1f       	adc	r22, r22
    3f1c:	77 1f       	adc	r23, r23
    3f1e:	88 1f       	adc	r24, r24
    3f20:	91 50       	subi	r25, 0x01	; 1
    3f22:	50 40       	sbci	r21, 0x00	; 0
    3f24:	a9 f7       	brne	.-22     	; 0x3f10 <__mulsf3_pse+0x64>
    3f26:	9e 3f       	cpi	r25, 0xFE	; 254
    3f28:	51 05       	cpc	r21, r1
    3f2a:	80 f0       	brcs	.+32     	; 0x3f4c <__mulsf3_pse+0xa0>
    3f2c:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <__fp_inf>
    3f30:	0c 94 35 1f 	jmp	0x3e6a	; 0x3e6a <__fp_szero>
    3f34:	5f 3f       	cpi	r21, 0xFF	; 255
    3f36:	e4 f3       	brlt	.-8      	; 0x3f30 <__mulsf3_pse+0x84>
    3f38:	98 3e       	cpi	r25, 0xE8	; 232
    3f3a:	d4 f3       	brlt	.-12     	; 0x3f30 <__mulsf3_pse+0x84>
    3f3c:	86 95       	lsr	r24
    3f3e:	77 95       	ror	r23
    3f40:	67 95       	ror	r22
    3f42:	b7 95       	ror	r27
    3f44:	f7 95       	ror	r31
    3f46:	e7 95       	ror	r30
    3f48:	9f 5f       	subi	r25, 0xFF	; 255
    3f4a:	c1 f7       	brne	.-16     	; 0x3f3c <__mulsf3_pse+0x90>
    3f4c:	fe 2b       	or	r31, r30
    3f4e:	88 0f       	add	r24, r24
    3f50:	91 1d       	adc	r25, r1
    3f52:	96 95       	lsr	r25
    3f54:	87 95       	ror	r24
    3f56:	97 f9       	bld	r25, 7
    3f58:	08 95       	ret

00003f5a <vfprintf>:
    3f5a:	a0 e1       	ldi	r26, 0x10	; 16
    3f5c:	b0 e0       	ldi	r27, 0x00	; 0
    3f5e:	e3 eb       	ldi	r30, 0xB3	; 179
    3f60:	ff e1       	ldi	r31, 0x1F	; 31
    3f62:	0c 94 6e 23 	jmp	0x46dc	; 0x46dc <__prologue_saves__>
    3f66:	7c 01       	movw	r14, r24
    3f68:	1b 01       	movw	r2, r22
    3f6a:	6a 01       	movw	r12, r20
    3f6c:	fc 01       	movw	r30, r24
    3f6e:	16 82       	std	Z+6, r1	; 0x06
    3f70:	17 82       	std	Z+7, r1	; 0x07
    3f72:	83 81       	ldd	r24, Z+3	; 0x03
    3f74:	81 ff       	sbrs	r24, 1
    3f76:	44 c3       	rjmp	.+1672   	; 0x4600 <__RODATA_PM_OFFSET__+0x600>
    3f78:	9e 01       	movw	r18, r28
    3f7a:	2f 5f       	subi	r18, 0xFF	; 255
    3f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f7e:	39 01       	movw	r6, r18
    3f80:	f7 01       	movw	r30, r14
    3f82:	93 81       	ldd	r25, Z+3	; 0x03
    3f84:	f1 01       	movw	r30, r2
    3f86:	93 fd       	sbrc	r25, 3
    3f88:	85 91       	lpm	r24, Z+
    3f8a:	93 ff       	sbrs	r25, 3
    3f8c:	81 91       	ld	r24, Z+
    3f8e:	1f 01       	movw	r2, r30
    3f90:	88 23       	and	r24, r24
    3f92:	09 f4       	brne	.+2      	; 0x3f96 <vfprintf+0x3c>
    3f94:	31 c3       	rjmp	.+1634   	; 0x45f8 <__RODATA_PM_OFFSET__+0x5f8>
    3f96:	85 32       	cpi	r24, 0x25	; 37
    3f98:	39 f4       	brne	.+14     	; 0x3fa8 <vfprintf+0x4e>
    3f9a:	93 fd       	sbrc	r25, 3
    3f9c:	85 91       	lpm	r24, Z+
    3f9e:	93 ff       	sbrs	r25, 3
    3fa0:	81 91       	ld	r24, Z+
    3fa2:	1f 01       	movw	r2, r30
    3fa4:	85 32       	cpi	r24, 0x25	; 37
    3fa6:	39 f4       	brne	.+14     	; 0x3fb6 <vfprintf+0x5c>
    3fa8:	b7 01       	movw	r22, r14
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    3fb0:	56 01       	movw	r10, r12
    3fb2:	65 01       	movw	r12, r10
    3fb4:	e5 cf       	rjmp	.-54     	; 0x3f80 <vfprintf+0x26>
    3fb6:	10 e0       	ldi	r17, 0x00	; 0
    3fb8:	51 2c       	mov	r5, r1
    3fba:	91 2c       	mov	r9, r1
    3fbc:	ff e1       	ldi	r31, 0x1F	; 31
    3fbe:	f9 15       	cp	r31, r9
    3fc0:	d8 f0       	brcs	.+54     	; 0x3ff8 <vfprintf+0x9e>
    3fc2:	8b 32       	cpi	r24, 0x2B	; 43
    3fc4:	79 f0       	breq	.+30     	; 0x3fe4 <vfprintf+0x8a>
    3fc6:	38 f4       	brcc	.+14     	; 0x3fd6 <vfprintf+0x7c>
    3fc8:	80 32       	cpi	r24, 0x20	; 32
    3fca:	79 f0       	breq	.+30     	; 0x3fea <vfprintf+0x90>
    3fcc:	83 32       	cpi	r24, 0x23	; 35
    3fce:	a1 f4       	brne	.+40     	; 0x3ff8 <vfprintf+0x9e>
    3fd0:	f9 2d       	mov	r31, r9
    3fd2:	f0 61       	ori	r31, 0x10	; 16
    3fd4:	2e c0       	rjmp	.+92     	; 0x4032 <__RODATA_PM_OFFSET__+0x32>
    3fd6:	8d 32       	cpi	r24, 0x2D	; 45
    3fd8:	61 f0       	breq	.+24     	; 0x3ff2 <vfprintf+0x98>
    3fda:	80 33       	cpi	r24, 0x30	; 48
    3fdc:	69 f4       	brne	.+26     	; 0x3ff8 <vfprintf+0x9e>
    3fde:	29 2d       	mov	r18, r9
    3fe0:	21 60       	ori	r18, 0x01	; 1
    3fe2:	2d c0       	rjmp	.+90     	; 0x403e <__RODATA_PM_OFFSET__+0x3e>
    3fe4:	39 2d       	mov	r19, r9
    3fe6:	32 60       	ori	r19, 0x02	; 2
    3fe8:	93 2e       	mov	r9, r19
    3fea:	89 2d       	mov	r24, r9
    3fec:	84 60       	ori	r24, 0x04	; 4
    3fee:	98 2e       	mov	r9, r24
    3ff0:	2a c0       	rjmp	.+84     	; 0x4046 <__RODATA_PM_OFFSET__+0x46>
    3ff2:	e9 2d       	mov	r30, r9
    3ff4:	e8 60       	ori	r30, 0x08	; 8
    3ff6:	15 c0       	rjmp	.+42     	; 0x4022 <__RODATA_PM_OFFSET__+0x22>
    3ff8:	97 fc       	sbrc	r9, 7
    3ffa:	2d c0       	rjmp	.+90     	; 0x4056 <__RODATA_PM_OFFSET__+0x56>
    3ffc:	20 ed       	ldi	r18, 0xD0	; 208
    3ffe:	28 0f       	add	r18, r24
    4000:	2a 30       	cpi	r18, 0x0A	; 10
    4002:	88 f4       	brcc	.+34     	; 0x4026 <__RODATA_PM_OFFSET__+0x26>
    4004:	96 fe       	sbrs	r9, 6
    4006:	06 c0       	rjmp	.+12     	; 0x4014 <__RODATA_PM_OFFSET__+0x14>
    4008:	3a e0       	ldi	r19, 0x0A	; 10
    400a:	13 9f       	mul	r17, r19
    400c:	20 0d       	add	r18, r0
    400e:	11 24       	eor	r1, r1
    4010:	12 2f       	mov	r17, r18
    4012:	19 c0       	rjmp	.+50     	; 0x4046 <__RODATA_PM_OFFSET__+0x46>
    4014:	8a e0       	ldi	r24, 0x0A	; 10
    4016:	58 9e       	mul	r5, r24
    4018:	20 0d       	add	r18, r0
    401a:	11 24       	eor	r1, r1
    401c:	52 2e       	mov	r5, r18
    401e:	e9 2d       	mov	r30, r9
    4020:	e0 62       	ori	r30, 0x20	; 32
    4022:	9e 2e       	mov	r9, r30
    4024:	10 c0       	rjmp	.+32     	; 0x4046 <__RODATA_PM_OFFSET__+0x46>
    4026:	8e 32       	cpi	r24, 0x2E	; 46
    4028:	31 f4       	brne	.+12     	; 0x4036 <__RODATA_PM_OFFSET__+0x36>
    402a:	96 fc       	sbrc	r9, 6
    402c:	e5 c2       	rjmp	.+1482   	; 0x45f8 <__RODATA_PM_OFFSET__+0x5f8>
    402e:	f9 2d       	mov	r31, r9
    4030:	f0 64       	ori	r31, 0x40	; 64
    4032:	9f 2e       	mov	r9, r31
    4034:	08 c0       	rjmp	.+16     	; 0x4046 <__RODATA_PM_OFFSET__+0x46>
    4036:	8c 36       	cpi	r24, 0x6C	; 108
    4038:	21 f4       	brne	.+8      	; 0x4042 <__RODATA_PM_OFFSET__+0x42>
    403a:	29 2d       	mov	r18, r9
    403c:	20 68       	ori	r18, 0x80	; 128
    403e:	92 2e       	mov	r9, r18
    4040:	02 c0       	rjmp	.+4      	; 0x4046 <__RODATA_PM_OFFSET__+0x46>
    4042:	88 36       	cpi	r24, 0x68	; 104
    4044:	41 f4       	brne	.+16     	; 0x4056 <__RODATA_PM_OFFSET__+0x56>
    4046:	f1 01       	movw	r30, r2
    4048:	93 fd       	sbrc	r25, 3
    404a:	85 91       	lpm	r24, Z+
    404c:	93 ff       	sbrs	r25, 3
    404e:	81 91       	ld	r24, Z+
    4050:	1f 01       	movw	r2, r30
    4052:	81 11       	cpse	r24, r1
    4054:	b3 cf       	rjmp	.-154    	; 0x3fbc <vfprintf+0x62>
    4056:	9b eb       	ldi	r25, 0xBB	; 187
    4058:	98 0f       	add	r25, r24
    405a:	93 30       	cpi	r25, 0x03	; 3
    405c:	20 f4       	brcc	.+8      	; 0x4066 <__RODATA_PM_OFFSET__+0x66>
    405e:	99 2d       	mov	r25, r9
    4060:	90 61       	ori	r25, 0x10	; 16
    4062:	80 5e       	subi	r24, 0xE0	; 224
    4064:	07 c0       	rjmp	.+14     	; 0x4074 <__RODATA_PM_OFFSET__+0x74>
    4066:	9b e9       	ldi	r25, 0x9B	; 155
    4068:	98 0f       	add	r25, r24
    406a:	93 30       	cpi	r25, 0x03	; 3
    406c:	08 f0       	brcs	.+2      	; 0x4070 <__RODATA_PM_OFFSET__+0x70>
    406e:	66 c1       	rjmp	.+716    	; 0x433c <__RODATA_PM_OFFSET__+0x33c>
    4070:	99 2d       	mov	r25, r9
    4072:	9f 7e       	andi	r25, 0xEF	; 239
    4074:	96 ff       	sbrs	r25, 6
    4076:	16 e0       	ldi	r17, 0x06	; 6
    4078:	9f 73       	andi	r25, 0x3F	; 63
    407a:	99 2e       	mov	r9, r25
    407c:	85 36       	cpi	r24, 0x65	; 101
    407e:	19 f4       	brne	.+6      	; 0x4086 <__RODATA_PM_OFFSET__+0x86>
    4080:	90 64       	ori	r25, 0x40	; 64
    4082:	99 2e       	mov	r9, r25
    4084:	08 c0       	rjmp	.+16     	; 0x4096 <__RODATA_PM_OFFSET__+0x96>
    4086:	86 36       	cpi	r24, 0x66	; 102
    4088:	21 f4       	brne	.+8      	; 0x4092 <__RODATA_PM_OFFSET__+0x92>
    408a:	39 2f       	mov	r19, r25
    408c:	30 68       	ori	r19, 0x80	; 128
    408e:	93 2e       	mov	r9, r19
    4090:	02 c0       	rjmp	.+4      	; 0x4096 <__RODATA_PM_OFFSET__+0x96>
    4092:	11 11       	cpse	r17, r1
    4094:	11 50       	subi	r17, 0x01	; 1
    4096:	97 fe       	sbrs	r9, 7
    4098:	07 c0       	rjmp	.+14     	; 0x40a8 <__RODATA_PM_OFFSET__+0xa8>
    409a:	1c 33       	cpi	r17, 0x3C	; 60
    409c:	50 f4       	brcc	.+20     	; 0x40b2 <__RODATA_PM_OFFSET__+0xb2>
    409e:	44 24       	eor	r4, r4
    40a0:	43 94       	inc	r4
    40a2:	41 0e       	add	r4, r17
    40a4:	27 e0       	ldi	r18, 0x07	; 7
    40a6:	0b c0       	rjmp	.+22     	; 0x40be <__RODATA_PM_OFFSET__+0xbe>
    40a8:	18 30       	cpi	r17, 0x08	; 8
    40aa:	38 f0       	brcs	.+14     	; 0x40ba <__RODATA_PM_OFFSET__+0xba>
    40ac:	27 e0       	ldi	r18, 0x07	; 7
    40ae:	17 e0       	ldi	r17, 0x07	; 7
    40b0:	05 c0       	rjmp	.+10     	; 0x40bc <__RODATA_PM_OFFSET__+0xbc>
    40b2:	27 e0       	ldi	r18, 0x07	; 7
    40b4:	9c e3       	ldi	r25, 0x3C	; 60
    40b6:	49 2e       	mov	r4, r25
    40b8:	02 c0       	rjmp	.+4      	; 0x40be <__RODATA_PM_OFFSET__+0xbe>
    40ba:	21 2f       	mov	r18, r17
    40bc:	41 2c       	mov	r4, r1
    40be:	56 01       	movw	r10, r12
    40c0:	84 e0       	ldi	r24, 0x04	; 4
    40c2:	a8 0e       	add	r10, r24
    40c4:	b1 1c       	adc	r11, r1
    40c6:	f6 01       	movw	r30, r12
    40c8:	60 81       	ld	r22, Z
    40ca:	71 81       	ldd	r23, Z+1	; 0x01
    40cc:	82 81       	ldd	r24, Z+2	; 0x02
    40ce:	93 81       	ldd	r25, Z+3	; 0x03
    40d0:	04 2d       	mov	r16, r4
    40d2:	a3 01       	movw	r20, r6
    40d4:	0e 94 0b 24 	call	0x4816	; 0x4816 <__ftoa_engine>
    40d8:	6c 01       	movw	r12, r24
    40da:	f9 81       	ldd	r31, Y+1	; 0x01
    40dc:	fc 87       	std	Y+12, r31	; 0x0c
    40de:	f0 ff       	sbrs	r31, 0
    40e0:	02 c0       	rjmp	.+4      	; 0x40e6 <__RODATA_PM_OFFSET__+0xe6>
    40e2:	f3 ff       	sbrs	r31, 3
    40e4:	06 c0       	rjmp	.+12     	; 0x40f2 <__RODATA_PM_OFFSET__+0xf2>
    40e6:	91 fc       	sbrc	r9, 1
    40e8:	06 c0       	rjmp	.+12     	; 0x40f6 <__RODATA_PM_OFFSET__+0xf6>
    40ea:	92 fe       	sbrs	r9, 2
    40ec:	06 c0       	rjmp	.+12     	; 0x40fa <__RODATA_PM_OFFSET__+0xfa>
    40ee:	00 e2       	ldi	r16, 0x20	; 32
    40f0:	05 c0       	rjmp	.+10     	; 0x40fc <__RODATA_PM_OFFSET__+0xfc>
    40f2:	0d e2       	ldi	r16, 0x2D	; 45
    40f4:	03 c0       	rjmp	.+6      	; 0x40fc <__RODATA_PM_OFFSET__+0xfc>
    40f6:	0b e2       	ldi	r16, 0x2B	; 43
    40f8:	01 c0       	rjmp	.+2      	; 0x40fc <__RODATA_PM_OFFSET__+0xfc>
    40fa:	00 e0       	ldi	r16, 0x00	; 0
    40fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    40fe:	8c 70       	andi	r24, 0x0C	; 12
    4100:	19 f0       	breq	.+6      	; 0x4108 <__RODATA_PM_OFFSET__+0x108>
    4102:	01 11       	cpse	r16, r1
    4104:	5a c2       	rjmp	.+1204   	; 0x45ba <__RODATA_PM_OFFSET__+0x5ba>
    4106:	9b c2       	rjmp	.+1334   	; 0x463e <__RODATA_PM_OFFSET__+0x63e>
    4108:	97 fe       	sbrs	r9, 7
    410a:	10 c0       	rjmp	.+32     	; 0x412c <__RODATA_PM_OFFSET__+0x12c>
    410c:	4c 0c       	add	r4, r12
    410e:	fc 85       	ldd	r31, Y+12	; 0x0c
    4110:	f4 ff       	sbrs	r31, 4
    4112:	04 c0       	rjmp	.+8      	; 0x411c <__RODATA_PM_OFFSET__+0x11c>
    4114:	8a 81       	ldd	r24, Y+2	; 0x02
    4116:	81 33       	cpi	r24, 0x31	; 49
    4118:	09 f4       	brne	.+2      	; 0x411c <__RODATA_PM_OFFSET__+0x11c>
    411a:	4a 94       	dec	r4
    411c:	14 14       	cp	r1, r4
    411e:	74 f5       	brge	.+92     	; 0x417c <__RODATA_PM_OFFSET__+0x17c>
    4120:	28 e0       	ldi	r18, 0x08	; 8
    4122:	24 15       	cp	r18, r4
    4124:	78 f5       	brcc	.+94     	; 0x4184 <__RODATA_PM_OFFSET__+0x184>
    4126:	88 e0       	ldi	r24, 0x08	; 8
    4128:	48 2e       	mov	r4, r24
    412a:	2c c0       	rjmp	.+88     	; 0x4184 <__RODATA_PM_OFFSET__+0x184>
    412c:	96 fc       	sbrc	r9, 6
    412e:	2a c0       	rjmp	.+84     	; 0x4184 <__RODATA_PM_OFFSET__+0x184>
    4130:	81 2f       	mov	r24, r17
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	8c 15       	cp	r24, r12
    4136:	9d 05       	cpc	r25, r13
    4138:	9c f0       	brlt	.+38     	; 0x4160 <__RODATA_PM_OFFSET__+0x160>
    413a:	3c ef       	ldi	r19, 0xFC	; 252
    413c:	c3 16       	cp	r12, r19
    413e:	3f ef       	ldi	r19, 0xFF	; 255
    4140:	d3 06       	cpc	r13, r19
    4142:	74 f0       	brlt	.+28     	; 0x4160 <__RODATA_PM_OFFSET__+0x160>
    4144:	89 2d       	mov	r24, r9
    4146:	80 68       	ori	r24, 0x80	; 128
    4148:	98 2e       	mov	r9, r24
    414a:	0a c0       	rjmp	.+20     	; 0x4160 <__RODATA_PM_OFFSET__+0x160>
    414c:	e2 e0       	ldi	r30, 0x02	; 2
    414e:	f0 e0       	ldi	r31, 0x00	; 0
    4150:	ec 0f       	add	r30, r28
    4152:	fd 1f       	adc	r31, r29
    4154:	e1 0f       	add	r30, r17
    4156:	f1 1d       	adc	r31, r1
    4158:	80 81       	ld	r24, Z
    415a:	80 33       	cpi	r24, 0x30	; 48
    415c:	19 f4       	brne	.+6      	; 0x4164 <__RODATA_PM_OFFSET__+0x164>
    415e:	11 50       	subi	r17, 0x01	; 1
    4160:	11 11       	cpse	r17, r1
    4162:	f4 cf       	rjmp	.-24     	; 0x414c <__RODATA_PM_OFFSET__+0x14c>
    4164:	97 fe       	sbrs	r9, 7
    4166:	0e c0       	rjmp	.+28     	; 0x4184 <__RODATA_PM_OFFSET__+0x184>
    4168:	44 24       	eor	r4, r4
    416a:	43 94       	inc	r4
    416c:	41 0e       	add	r4, r17
    416e:	81 2f       	mov	r24, r17
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	c8 16       	cp	r12, r24
    4174:	d9 06       	cpc	r13, r25
    4176:	2c f4       	brge	.+10     	; 0x4182 <__RODATA_PM_OFFSET__+0x182>
    4178:	1c 19       	sub	r17, r12
    417a:	04 c0       	rjmp	.+8      	; 0x4184 <__RODATA_PM_OFFSET__+0x184>
    417c:	44 24       	eor	r4, r4
    417e:	43 94       	inc	r4
    4180:	01 c0       	rjmp	.+2      	; 0x4184 <__RODATA_PM_OFFSET__+0x184>
    4182:	10 e0       	ldi	r17, 0x00	; 0
    4184:	97 fe       	sbrs	r9, 7
    4186:	06 c0       	rjmp	.+12     	; 0x4194 <__RODATA_PM_OFFSET__+0x194>
    4188:	1c 14       	cp	r1, r12
    418a:	1d 04       	cpc	r1, r13
    418c:	34 f4       	brge	.+12     	; 0x419a <__RODATA_PM_OFFSET__+0x19a>
    418e:	c6 01       	movw	r24, r12
    4190:	01 96       	adiw	r24, 0x01	; 1
    4192:	05 c0       	rjmp	.+10     	; 0x419e <__RODATA_PM_OFFSET__+0x19e>
    4194:	85 e0       	ldi	r24, 0x05	; 5
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	02 c0       	rjmp	.+4      	; 0x419e <__RODATA_PM_OFFSET__+0x19e>
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	01 11       	cpse	r16, r1
    41a0:	01 96       	adiw	r24, 0x01	; 1
    41a2:	11 23       	and	r17, r17
    41a4:	31 f0       	breq	.+12     	; 0x41b2 <__RODATA_PM_OFFSET__+0x1b2>
    41a6:	21 2f       	mov	r18, r17
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	2f 5f       	subi	r18, 0xFF	; 255
    41ac:	3f 4f       	sbci	r19, 0xFF	; 255
    41ae:	82 0f       	add	r24, r18
    41b0:	93 1f       	adc	r25, r19
    41b2:	25 2d       	mov	r18, r5
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	82 17       	cp	r24, r18
    41b8:	93 07       	cpc	r25, r19
    41ba:	14 f4       	brge	.+4      	; 0x41c0 <__RODATA_PM_OFFSET__+0x1c0>
    41bc:	58 1a       	sub	r5, r24
    41be:	01 c0       	rjmp	.+2      	; 0x41c2 <__RODATA_PM_OFFSET__+0x1c2>
    41c0:	51 2c       	mov	r5, r1
    41c2:	89 2d       	mov	r24, r9
    41c4:	89 70       	andi	r24, 0x09	; 9
    41c6:	49 f4       	brne	.+18     	; 0x41da <__RODATA_PM_OFFSET__+0x1da>
    41c8:	55 20       	and	r5, r5
    41ca:	39 f0       	breq	.+14     	; 0x41da <__RODATA_PM_OFFSET__+0x1da>
    41cc:	b7 01       	movw	r22, r14
    41ce:	80 e2       	ldi	r24, 0x20	; 32
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    41d6:	5a 94       	dec	r5
    41d8:	f7 cf       	rjmp	.-18     	; 0x41c8 <__RODATA_PM_OFFSET__+0x1c8>
    41da:	00 23       	and	r16, r16
    41dc:	29 f0       	breq	.+10     	; 0x41e8 <__RODATA_PM_OFFSET__+0x1e8>
    41de:	b7 01       	movw	r22, r14
    41e0:	80 2f       	mov	r24, r16
    41e2:	90 e0       	ldi	r25, 0x00	; 0
    41e4:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    41e8:	93 fc       	sbrc	r9, 3
    41ea:	09 c0       	rjmp	.+18     	; 0x41fe <__RODATA_PM_OFFSET__+0x1fe>
    41ec:	55 20       	and	r5, r5
    41ee:	39 f0       	breq	.+14     	; 0x41fe <__RODATA_PM_OFFSET__+0x1fe>
    41f0:	b7 01       	movw	r22, r14
    41f2:	80 e3       	ldi	r24, 0x30	; 48
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    41fa:	5a 94       	dec	r5
    41fc:	f7 cf       	rjmp	.-18     	; 0x41ec <__RODATA_PM_OFFSET__+0x1ec>
    41fe:	97 fe       	sbrs	r9, 7
    4200:	4c c0       	rjmp	.+152    	; 0x429a <__RODATA_PM_OFFSET__+0x29a>
    4202:	46 01       	movw	r8, r12
    4204:	d7 fe       	sbrs	r13, 7
    4206:	02 c0       	rjmp	.+4      	; 0x420c <__RODATA_PM_OFFSET__+0x20c>
    4208:	81 2c       	mov	r8, r1
    420a:	91 2c       	mov	r9, r1
    420c:	c6 01       	movw	r24, r12
    420e:	88 19       	sub	r24, r8
    4210:	99 09       	sbc	r25, r9
    4212:	f3 01       	movw	r30, r6
    4214:	e8 0f       	add	r30, r24
    4216:	f9 1f       	adc	r31, r25
    4218:	ed 87       	std	Y+13, r30	; 0x0d
    421a:	fe 87       	std	Y+14, r31	; 0x0e
    421c:	96 01       	movw	r18, r12
    421e:	24 19       	sub	r18, r4
    4220:	31 09       	sbc	r19, r1
    4222:	2f 87       	std	Y+15, r18	; 0x0f
    4224:	38 8b       	std	Y+16, r19	; 0x10
    4226:	01 2f       	mov	r16, r17
    4228:	10 e0       	ldi	r17, 0x00	; 0
    422a:	11 95       	neg	r17
    422c:	01 95       	neg	r16
    422e:	11 09       	sbc	r17, r1
    4230:	3f ef       	ldi	r19, 0xFF	; 255
    4232:	83 16       	cp	r8, r19
    4234:	93 06       	cpc	r9, r19
    4236:	29 f4       	brne	.+10     	; 0x4242 <__RODATA_PM_OFFSET__+0x242>
    4238:	b7 01       	movw	r22, r14
    423a:	8e e2       	ldi	r24, 0x2E	; 46
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    4242:	c8 14       	cp	r12, r8
    4244:	d9 04       	cpc	r13, r9
    4246:	4c f0       	brlt	.+18     	; 0x425a <__RODATA_PM_OFFSET__+0x25a>
    4248:	8f 85       	ldd	r24, Y+15	; 0x0f
    424a:	98 89       	ldd	r25, Y+16	; 0x10
    424c:	88 15       	cp	r24, r8
    424e:	99 05       	cpc	r25, r9
    4250:	24 f4       	brge	.+8      	; 0x425a <__RODATA_PM_OFFSET__+0x25a>
    4252:	ed 85       	ldd	r30, Y+13	; 0x0d
    4254:	fe 85       	ldd	r31, Y+14	; 0x0e
    4256:	81 81       	ldd	r24, Z+1	; 0x01
    4258:	01 c0       	rjmp	.+2      	; 0x425c <__RODATA_PM_OFFSET__+0x25c>
    425a:	80 e3       	ldi	r24, 0x30	; 48
    425c:	f1 e0       	ldi	r31, 0x01	; 1
    425e:	8f 1a       	sub	r8, r31
    4260:	91 08       	sbc	r9, r1
    4262:	2d 85       	ldd	r18, Y+13	; 0x0d
    4264:	3e 85       	ldd	r19, Y+14	; 0x0e
    4266:	2f 5f       	subi	r18, 0xFF	; 255
    4268:	3f 4f       	sbci	r19, 0xFF	; 255
    426a:	2d 87       	std	Y+13, r18	; 0x0d
    426c:	3e 87       	std	Y+14, r19	; 0x0e
    426e:	80 16       	cp	r8, r16
    4270:	91 06       	cpc	r9, r17
    4272:	2c f0       	brlt	.+10     	; 0x427e <__RODATA_PM_OFFSET__+0x27e>
    4274:	b7 01       	movw	r22, r14
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    427c:	d9 cf       	rjmp	.-78     	; 0x4230 <__RODATA_PM_OFFSET__+0x230>
    427e:	c8 14       	cp	r12, r8
    4280:	d9 04       	cpc	r13, r9
    4282:	41 f4       	brne	.+16     	; 0x4294 <__RODATA_PM_OFFSET__+0x294>
    4284:	9a 81       	ldd	r25, Y+2	; 0x02
    4286:	96 33       	cpi	r25, 0x36	; 54
    4288:	20 f4       	brcc	.+8      	; 0x4292 <__RODATA_PM_OFFSET__+0x292>
    428a:	95 33       	cpi	r25, 0x35	; 53
    428c:	19 f4       	brne	.+6      	; 0x4294 <__RODATA_PM_OFFSET__+0x294>
    428e:	3c 85       	ldd	r19, Y+12	; 0x0c
    4290:	34 ff       	sbrs	r19, 4
    4292:	81 e3       	ldi	r24, 0x31	; 49
    4294:	b7 01       	movw	r22, r14
    4296:	90 e0       	ldi	r25, 0x00	; 0
    4298:	4e c0       	rjmp	.+156    	; 0x4336 <__RODATA_PM_OFFSET__+0x336>
    429a:	8a 81       	ldd	r24, Y+2	; 0x02
    429c:	81 33       	cpi	r24, 0x31	; 49
    429e:	19 f0       	breq	.+6      	; 0x42a6 <__RODATA_PM_OFFSET__+0x2a6>
    42a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    42a2:	9f 7e       	andi	r25, 0xEF	; 239
    42a4:	9c 87       	std	Y+12, r25	; 0x0c
    42a6:	b7 01       	movw	r22, r14
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    42ae:	11 11       	cpse	r17, r1
    42b0:	05 c0       	rjmp	.+10     	; 0x42bc <__RODATA_PM_OFFSET__+0x2bc>
    42b2:	94 fc       	sbrc	r9, 4
    42b4:	18 c0       	rjmp	.+48     	; 0x42e6 <__RODATA_PM_OFFSET__+0x2e6>
    42b6:	85 e6       	ldi	r24, 0x65	; 101
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	17 c0       	rjmp	.+46     	; 0x42ea <__RODATA_PM_OFFSET__+0x2ea>
    42bc:	b7 01       	movw	r22, r14
    42be:	8e e2       	ldi	r24, 0x2E	; 46
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    42c6:	1e 5f       	subi	r17, 0xFE	; 254
    42c8:	82 e0       	ldi	r24, 0x02	; 2
    42ca:	01 e0       	ldi	r16, 0x01	; 1
    42cc:	08 0f       	add	r16, r24
    42ce:	f3 01       	movw	r30, r6
    42d0:	e8 0f       	add	r30, r24
    42d2:	f1 1d       	adc	r31, r1
    42d4:	80 81       	ld	r24, Z
    42d6:	b7 01       	movw	r22, r14
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    42de:	80 2f       	mov	r24, r16
    42e0:	01 13       	cpse	r16, r17
    42e2:	f3 cf       	rjmp	.-26     	; 0x42ca <__RODATA_PM_OFFSET__+0x2ca>
    42e4:	e6 cf       	rjmp	.-52     	; 0x42b2 <__RODATA_PM_OFFSET__+0x2b2>
    42e6:	85 e4       	ldi	r24, 0x45	; 69
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	b7 01       	movw	r22, r14
    42ec:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    42f0:	d7 fc       	sbrc	r13, 7
    42f2:	06 c0       	rjmp	.+12     	; 0x4300 <__RODATA_PM_OFFSET__+0x300>
    42f4:	c1 14       	cp	r12, r1
    42f6:	d1 04       	cpc	r13, r1
    42f8:	41 f4       	brne	.+16     	; 0x430a <__RODATA_PM_OFFSET__+0x30a>
    42fa:	ec 85       	ldd	r30, Y+12	; 0x0c
    42fc:	e4 ff       	sbrs	r30, 4
    42fe:	05 c0       	rjmp	.+10     	; 0x430a <__RODATA_PM_OFFSET__+0x30a>
    4300:	d1 94       	neg	r13
    4302:	c1 94       	neg	r12
    4304:	d1 08       	sbc	r13, r1
    4306:	8d e2       	ldi	r24, 0x2D	; 45
    4308:	01 c0       	rjmp	.+2      	; 0x430c <__RODATA_PM_OFFSET__+0x30c>
    430a:	8b e2       	ldi	r24, 0x2B	; 43
    430c:	b7 01       	movw	r22, r14
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    4314:	80 e3       	ldi	r24, 0x30	; 48
    4316:	2a e0       	ldi	r18, 0x0A	; 10
    4318:	c2 16       	cp	r12, r18
    431a:	d1 04       	cpc	r13, r1
    431c:	2c f0       	brlt	.+10     	; 0x4328 <__RODATA_PM_OFFSET__+0x328>
    431e:	8f 5f       	subi	r24, 0xFF	; 255
    4320:	fa e0       	ldi	r31, 0x0A	; 10
    4322:	cf 1a       	sub	r12, r31
    4324:	d1 08       	sbc	r13, r1
    4326:	f7 cf       	rjmp	.-18     	; 0x4316 <__RODATA_PM_OFFSET__+0x316>
    4328:	b7 01       	movw	r22, r14
    432a:	90 e0       	ldi	r25, 0x00	; 0
    432c:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    4330:	b7 01       	movw	r22, r14
    4332:	c6 01       	movw	r24, r12
    4334:	c0 96       	adiw	r24, 0x30	; 48
    4336:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    433a:	54 c1       	rjmp	.+680    	; 0x45e4 <__RODATA_PM_OFFSET__+0x5e4>
    433c:	83 36       	cpi	r24, 0x63	; 99
    433e:	31 f0       	breq	.+12     	; 0x434c <__RODATA_PM_OFFSET__+0x34c>
    4340:	83 37       	cpi	r24, 0x73	; 115
    4342:	79 f0       	breq	.+30     	; 0x4362 <__RODATA_PM_OFFSET__+0x362>
    4344:	83 35       	cpi	r24, 0x53	; 83
    4346:	09 f0       	breq	.+2      	; 0x434a <__RODATA_PM_OFFSET__+0x34a>
    4348:	56 c0       	rjmp	.+172    	; 0x43f6 <__RODATA_PM_OFFSET__+0x3f6>
    434a:	20 c0       	rjmp	.+64     	; 0x438c <__RODATA_PM_OFFSET__+0x38c>
    434c:	56 01       	movw	r10, r12
    434e:	32 e0       	ldi	r19, 0x02	; 2
    4350:	a3 0e       	add	r10, r19
    4352:	b1 1c       	adc	r11, r1
    4354:	f6 01       	movw	r30, r12
    4356:	80 81       	ld	r24, Z
    4358:	89 83       	std	Y+1, r24	; 0x01
    435a:	01 e0       	ldi	r16, 0x01	; 1
    435c:	10 e0       	ldi	r17, 0x00	; 0
    435e:	63 01       	movw	r12, r6
    4360:	12 c0       	rjmp	.+36     	; 0x4386 <__RODATA_PM_OFFSET__+0x386>
    4362:	56 01       	movw	r10, r12
    4364:	f2 e0       	ldi	r31, 0x02	; 2
    4366:	af 0e       	add	r10, r31
    4368:	b1 1c       	adc	r11, r1
    436a:	f6 01       	movw	r30, r12
    436c:	c0 80       	ld	r12, Z
    436e:	d1 80       	ldd	r13, Z+1	; 0x01
    4370:	96 fe       	sbrs	r9, 6
    4372:	03 c0       	rjmp	.+6      	; 0x437a <__RODATA_PM_OFFSET__+0x37a>
    4374:	61 2f       	mov	r22, r17
    4376:	70 e0       	ldi	r23, 0x00	; 0
    4378:	02 c0       	rjmp	.+4      	; 0x437e <__RODATA_PM_OFFSET__+0x37e>
    437a:	6f ef       	ldi	r22, 0xFF	; 255
    437c:	7f ef       	ldi	r23, 0xFF	; 255
    437e:	c6 01       	movw	r24, r12
    4380:	0e 94 00 25 	call	0x4a00	; 0x4a00 <strnlen>
    4384:	8c 01       	movw	r16, r24
    4386:	f9 2d       	mov	r31, r9
    4388:	ff 77       	andi	r31, 0x7F	; 127
    438a:	14 c0       	rjmp	.+40     	; 0x43b4 <__RODATA_PM_OFFSET__+0x3b4>
    438c:	56 01       	movw	r10, r12
    438e:	22 e0       	ldi	r18, 0x02	; 2
    4390:	a2 0e       	add	r10, r18
    4392:	b1 1c       	adc	r11, r1
    4394:	f6 01       	movw	r30, r12
    4396:	c0 80       	ld	r12, Z
    4398:	d1 80       	ldd	r13, Z+1	; 0x01
    439a:	96 fe       	sbrs	r9, 6
    439c:	03 c0       	rjmp	.+6      	; 0x43a4 <__RODATA_PM_OFFSET__+0x3a4>
    439e:	61 2f       	mov	r22, r17
    43a0:	70 e0       	ldi	r23, 0x00	; 0
    43a2:	02 c0       	rjmp	.+4      	; 0x43a8 <__RODATA_PM_OFFSET__+0x3a8>
    43a4:	6f ef       	ldi	r22, 0xFF	; 255
    43a6:	7f ef       	ldi	r23, 0xFF	; 255
    43a8:	c6 01       	movw	r24, r12
    43aa:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <strnlen_P>
    43ae:	8c 01       	movw	r16, r24
    43b0:	f9 2d       	mov	r31, r9
    43b2:	f0 68       	ori	r31, 0x80	; 128
    43b4:	9f 2e       	mov	r9, r31
    43b6:	f3 fd       	sbrc	r31, 3
    43b8:	1a c0       	rjmp	.+52     	; 0x43ee <__RODATA_PM_OFFSET__+0x3ee>
    43ba:	85 2d       	mov	r24, r5
    43bc:	90 e0       	ldi	r25, 0x00	; 0
    43be:	08 17       	cp	r16, r24
    43c0:	19 07       	cpc	r17, r25
    43c2:	a8 f4       	brcc	.+42     	; 0x43ee <__RODATA_PM_OFFSET__+0x3ee>
    43c4:	b7 01       	movw	r22, r14
    43c6:	80 e2       	ldi	r24, 0x20	; 32
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    43ce:	5a 94       	dec	r5
    43d0:	f4 cf       	rjmp	.-24     	; 0x43ba <__RODATA_PM_OFFSET__+0x3ba>
    43d2:	f6 01       	movw	r30, r12
    43d4:	97 fc       	sbrc	r9, 7
    43d6:	85 91       	lpm	r24, Z+
    43d8:	97 fe       	sbrs	r9, 7
    43da:	81 91       	ld	r24, Z+
    43dc:	6f 01       	movw	r12, r30
    43de:	b7 01       	movw	r22, r14
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    43e6:	51 10       	cpse	r5, r1
    43e8:	5a 94       	dec	r5
    43ea:	01 50       	subi	r16, 0x01	; 1
    43ec:	11 09       	sbc	r17, r1
    43ee:	01 15       	cp	r16, r1
    43f0:	11 05       	cpc	r17, r1
    43f2:	79 f7       	brne	.-34     	; 0x43d2 <__RODATA_PM_OFFSET__+0x3d2>
    43f4:	f7 c0       	rjmp	.+494    	; 0x45e4 <__RODATA_PM_OFFSET__+0x5e4>
    43f6:	84 36       	cpi	r24, 0x64	; 100
    43f8:	11 f0       	breq	.+4      	; 0x43fe <__RODATA_PM_OFFSET__+0x3fe>
    43fa:	89 36       	cpi	r24, 0x69	; 105
    43fc:	61 f5       	brne	.+88     	; 0x4456 <__RODATA_PM_OFFSET__+0x456>
    43fe:	56 01       	movw	r10, r12
    4400:	97 fe       	sbrs	r9, 7
    4402:	09 c0       	rjmp	.+18     	; 0x4416 <__RODATA_PM_OFFSET__+0x416>
    4404:	24 e0       	ldi	r18, 0x04	; 4
    4406:	a2 0e       	add	r10, r18
    4408:	b1 1c       	adc	r11, r1
    440a:	f6 01       	movw	r30, r12
    440c:	60 81       	ld	r22, Z
    440e:	71 81       	ldd	r23, Z+1	; 0x01
    4410:	82 81       	ldd	r24, Z+2	; 0x02
    4412:	93 81       	ldd	r25, Z+3	; 0x03
    4414:	0a c0       	rjmp	.+20     	; 0x442a <__RODATA_PM_OFFSET__+0x42a>
    4416:	f2 e0       	ldi	r31, 0x02	; 2
    4418:	af 0e       	add	r10, r31
    441a:	b1 1c       	adc	r11, r1
    441c:	f6 01       	movw	r30, r12
    441e:	60 81       	ld	r22, Z
    4420:	71 81       	ldd	r23, Z+1	; 0x01
    4422:	07 2e       	mov	r0, r23
    4424:	00 0c       	add	r0, r0
    4426:	88 0b       	sbc	r24, r24
    4428:	99 0b       	sbc	r25, r25
    442a:	f9 2d       	mov	r31, r9
    442c:	ff 76       	andi	r31, 0x6F	; 111
    442e:	9f 2e       	mov	r9, r31
    4430:	97 ff       	sbrs	r25, 7
    4432:	09 c0       	rjmp	.+18     	; 0x4446 <__RODATA_PM_OFFSET__+0x446>
    4434:	90 95       	com	r25
    4436:	80 95       	com	r24
    4438:	70 95       	com	r23
    443a:	61 95       	neg	r22
    443c:	7f 4f       	sbci	r23, 0xFF	; 255
    443e:	8f 4f       	sbci	r24, 0xFF	; 255
    4440:	9f 4f       	sbci	r25, 0xFF	; 255
    4442:	f0 68       	ori	r31, 0x80	; 128
    4444:	9f 2e       	mov	r9, r31
    4446:	2a e0       	ldi	r18, 0x0A	; 10
    4448:	30 e0       	ldi	r19, 0x00	; 0
    444a:	a3 01       	movw	r20, r6
    444c:	0e 94 7e 25 	call	0x4afc	; 0x4afc <__ultoa_invert>
    4450:	c8 2e       	mov	r12, r24
    4452:	c6 18       	sub	r12, r6
    4454:	3f c0       	rjmp	.+126    	; 0x44d4 <__RODATA_PM_OFFSET__+0x4d4>
    4456:	09 2d       	mov	r16, r9
    4458:	85 37       	cpi	r24, 0x75	; 117
    445a:	21 f4       	brne	.+8      	; 0x4464 <__RODATA_PM_OFFSET__+0x464>
    445c:	0f 7e       	andi	r16, 0xEF	; 239
    445e:	2a e0       	ldi	r18, 0x0A	; 10
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	1d c0       	rjmp	.+58     	; 0x449e <__RODATA_PM_OFFSET__+0x49e>
    4464:	09 7f       	andi	r16, 0xF9	; 249
    4466:	8f 36       	cpi	r24, 0x6F	; 111
    4468:	91 f0       	breq	.+36     	; 0x448e <__RODATA_PM_OFFSET__+0x48e>
    446a:	18 f4       	brcc	.+6      	; 0x4472 <__RODATA_PM_OFFSET__+0x472>
    446c:	88 35       	cpi	r24, 0x58	; 88
    446e:	59 f0       	breq	.+22     	; 0x4486 <__RODATA_PM_OFFSET__+0x486>
    4470:	c3 c0       	rjmp	.+390    	; 0x45f8 <__RODATA_PM_OFFSET__+0x5f8>
    4472:	80 37       	cpi	r24, 0x70	; 112
    4474:	19 f0       	breq	.+6      	; 0x447c <__RODATA_PM_OFFSET__+0x47c>
    4476:	88 37       	cpi	r24, 0x78	; 120
    4478:	11 f0       	breq	.+4      	; 0x447e <__RODATA_PM_OFFSET__+0x47e>
    447a:	be c0       	rjmp	.+380    	; 0x45f8 <__RODATA_PM_OFFSET__+0x5f8>
    447c:	00 61       	ori	r16, 0x10	; 16
    447e:	04 ff       	sbrs	r16, 4
    4480:	09 c0       	rjmp	.+18     	; 0x4494 <__RODATA_PM_OFFSET__+0x494>
    4482:	04 60       	ori	r16, 0x04	; 4
    4484:	07 c0       	rjmp	.+14     	; 0x4494 <__RODATA_PM_OFFSET__+0x494>
    4486:	94 fe       	sbrs	r9, 4
    4488:	08 c0       	rjmp	.+16     	; 0x449a <__RODATA_PM_OFFSET__+0x49a>
    448a:	06 60       	ori	r16, 0x06	; 6
    448c:	06 c0       	rjmp	.+12     	; 0x449a <__RODATA_PM_OFFSET__+0x49a>
    448e:	28 e0       	ldi	r18, 0x08	; 8
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	05 c0       	rjmp	.+10     	; 0x449e <__RODATA_PM_OFFSET__+0x49e>
    4494:	20 e1       	ldi	r18, 0x10	; 16
    4496:	30 e0       	ldi	r19, 0x00	; 0
    4498:	02 c0       	rjmp	.+4      	; 0x449e <__RODATA_PM_OFFSET__+0x49e>
    449a:	20 e1       	ldi	r18, 0x10	; 16
    449c:	32 e0       	ldi	r19, 0x02	; 2
    449e:	56 01       	movw	r10, r12
    44a0:	07 ff       	sbrs	r16, 7
    44a2:	09 c0       	rjmp	.+18     	; 0x44b6 <__RODATA_PM_OFFSET__+0x4b6>
    44a4:	84 e0       	ldi	r24, 0x04	; 4
    44a6:	a8 0e       	add	r10, r24
    44a8:	b1 1c       	adc	r11, r1
    44aa:	f6 01       	movw	r30, r12
    44ac:	60 81       	ld	r22, Z
    44ae:	71 81       	ldd	r23, Z+1	; 0x01
    44b0:	82 81       	ldd	r24, Z+2	; 0x02
    44b2:	93 81       	ldd	r25, Z+3	; 0x03
    44b4:	08 c0       	rjmp	.+16     	; 0x44c6 <__RODATA_PM_OFFSET__+0x4c6>
    44b6:	f2 e0       	ldi	r31, 0x02	; 2
    44b8:	af 0e       	add	r10, r31
    44ba:	b1 1c       	adc	r11, r1
    44bc:	f6 01       	movw	r30, r12
    44be:	60 81       	ld	r22, Z
    44c0:	71 81       	ldd	r23, Z+1	; 0x01
    44c2:	80 e0       	ldi	r24, 0x00	; 0
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	a3 01       	movw	r20, r6
    44c8:	0e 94 7e 25 	call	0x4afc	; 0x4afc <__ultoa_invert>
    44cc:	c8 2e       	mov	r12, r24
    44ce:	c6 18       	sub	r12, r6
    44d0:	0f 77       	andi	r16, 0x7F	; 127
    44d2:	90 2e       	mov	r9, r16
    44d4:	96 fe       	sbrs	r9, 6
    44d6:	0b c0       	rjmp	.+22     	; 0x44ee <__RODATA_PM_OFFSET__+0x4ee>
    44d8:	09 2d       	mov	r16, r9
    44da:	0e 7f       	andi	r16, 0xFE	; 254
    44dc:	c1 16       	cp	r12, r17
    44de:	50 f4       	brcc	.+20     	; 0x44f4 <__RODATA_PM_OFFSET__+0x4f4>
    44e0:	94 fe       	sbrs	r9, 4
    44e2:	0a c0       	rjmp	.+20     	; 0x44f8 <__RODATA_PM_OFFSET__+0x4f8>
    44e4:	92 fc       	sbrc	r9, 2
    44e6:	08 c0       	rjmp	.+16     	; 0x44f8 <__RODATA_PM_OFFSET__+0x4f8>
    44e8:	09 2d       	mov	r16, r9
    44ea:	0e 7e       	andi	r16, 0xEE	; 238
    44ec:	05 c0       	rjmp	.+10     	; 0x44f8 <__RODATA_PM_OFFSET__+0x4f8>
    44ee:	dc 2c       	mov	r13, r12
    44f0:	09 2d       	mov	r16, r9
    44f2:	03 c0       	rjmp	.+6      	; 0x44fa <__RODATA_PM_OFFSET__+0x4fa>
    44f4:	dc 2c       	mov	r13, r12
    44f6:	01 c0       	rjmp	.+2      	; 0x44fa <__RODATA_PM_OFFSET__+0x4fa>
    44f8:	d1 2e       	mov	r13, r17
    44fa:	04 ff       	sbrs	r16, 4
    44fc:	0d c0       	rjmp	.+26     	; 0x4518 <__RODATA_PM_OFFSET__+0x518>
    44fe:	fe 01       	movw	r30, r28
    4500:	ec 0d       	add	r30, r12
    4502:	f1 1d       	adc	r31, r1
    4504:	80 81       	ld	r24, Z
    4506:	80 33       	cpi	r24, 0x30	; 48
    4508:	11 f4       	brne	.+4      	; 0x450e <__RODATA_PM_OFFSET__+0x50e>
    450a:	09 7e       	andi	r16, 0xE9	; 233
    450c:	09 c0       	rjmp	.+18     	; 0x4520 <__RODATA_PM_OFFSET__+0x520>
    450e:	02 ff       	sbrs	r16, 2
    4510:	06 c0       	rjmp	.+12     	; 0x451e <__RODATA_PM_OFFSET__+0x51e>
    4512:	d3 94       	inc	r13
    4514:	d3 94       	inc	r13
    4516:	04 c0       	rjmp	.+8      	; 0x4520 <__RODATA_PM_OFFSET__+0x520>
    4518:	80 2f       	mov	r24, r16
    451a:	86 78       	andi	r24, 0x86	; 134
    451c:	09 f0       	breq	.+2      	; 0x4520 <__RODATA_PM_OFFSET__+0x520>
    451e:	d3 94       	inc	r13
    4520:	03 fd       	sbrc	r16, 3
    4522:	11 c0       	rjmp	.+34     	; 0x4546 <__RODATA_PM_OFFSET__+0x546>
    4524:	00 ff       	sbrs	r16, 0
    4526:	06 c0       	rjmp	.+12     	; 0x4534 <__RODATA_PM_OFFSET__+0x534>
    4528:	1c 2d       	mov	r17, r12
    452a:	d5 14       	cp	r13, r5
    452c:	80 f4       	brcc	.+32     	; 0x454e <__RODATA_PM_OFFSET__+0x54e>
    452e:	15 0d       	add	r17, r5
    4530:	1d 19       	sub	r17, r13
    4532:	0d c0       	rjmp	.+26     	; 0x454e <__RODATA_PM_OFFSET__+0x54e>
    4534:	d5 14       	cp	r13, r5
    4536:	58 f4       	brcc	.+22     	; 0x454e <__RODATA_PM_OFFSET__+0x54e>
    4538:	b7 01       	movw	r22, r14
    453a:	80 e2       	ldi	r24, 0x20	; 32
    453c:	90 e0       	ldi	r25, 0x00	; 0
    453e:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    4542:	d3 94       	inc	r13
    4544:	f7 cf       	rjmp	.-18     	; 0x4534 <__RODATA_PM_OFFSET__+0x534>
    4546:	d5 14       	cp	r13, r5
    4548:	10 f4       	brcc	.+4      	; 0x454e <__RODATA_PM_OFFSET__+0x54e>
    454a:	5d 18       	sub	r5, r13
    454c:	01 c0       	rjmp	.+2      	; 0x4550 <__RODATA_PM_OFFSET__+0x550>
    454e:	51 2c       	mov	r5, r1
    4550:	04 ff       	sbrs	r16, 4
    4552:	10 c0       	rjmp	.+32     	; 0x4574 <__RODATA_PM_OFFSET__+0x574>
    4554:	b7 01       	movw	r22, r14
    4556:	80 e3       	ldi	r24, 0x30	; 48
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    455e:	02 ff       	sbrs	r16, 2
    4560:	17 c0       	rjmp	.+46     	; 0x4590 <__RODATA_PM_OFFSET__+0x590>
    4562:	01 fd       	sbrc	r16, 1
    4564:	03 c0       	rjmp	.+6      	; 0x456c <__RODATA_PM_OFFSET__+0x56c>
    4566:	88 e7       	ldi	r24, 0x78	; 120
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	02 c0       	rjmp	.+4      	; 0x4570 <__RODATA_PM_OFFSET__+0x570>
    456c:	88 e5       	ldi	r24, 0x58	; 88
    456e:	90 e0       	ldi	r25, 0x00	; 0
    4570:	b7 01       	movw	r22, r14
    4572:	0c c0       	rjmp	.+24     	; 0x458c <__RODATA_PM_OFFSET__+0x58c>
    4574:	80 2f       	mov	r24, r16
    4576:	86 78       	andi	r24, 0x86	; 134
    4578:	59 f0       	breq	.+22     	; 0x4590 <__RODATA_PM_OFFSET__+0x590>
    457a:	01 ff       	sbrs	r16, 1
    457c:	02 c0       	rjmp	.+4      	; 0x4582 <__RODATA_PM_OFFSET__+0x582>
    457e:	8b e2       	ldi	r24, 0x2B	; 43
    4580:	01 c0       	rjmp	.+2      	; 0x4584 <__RODATA_PM_OFFSET__+0x584>
    4582:	80 e2       	ldi	r24, 0x20	; 32
    4584:	07 fd       	sbrc	r16, 7
    4586:	8d e2       	ldi	r24, 0x2D	; 45
    4588:	b7 01       	movw	r22, r14
    458a:	90 e0       	ldi	r25, 0x00	; 0
    458c:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    4590:	c1 16       	cp	r12, r17
    4592:	38 f4       	brcc	.+14     	; 0x45a2 <__RODATA_PM_OFFSET__+0x5a2>
    4594:	b7 01       	movw	r22, r14
    4596:	80 e3       	ldi	r24, 0x30	; 48
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    459e:	11 50       	subi	r17, 0x01	; 1
    45a0:	f7 cf       	rjmp	.-18     	; 0x4590 <__RODATA_PM_OFFSET__+0x590>
    45a2:	ca 94       	dec	r12
    45a4:	f3 01       	movw	r30, r6
    45a6:	ec 0d       	add	r30, r12
    45a8:	f1 1d       	adc	r31, r1
    45aa:	80 81       	ld	r24, Z
    45ac:	b7 01       	movw	r22, r14
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    45b4:	c1 10       	cpse	r12, r1
    45b6:	f5 cf       	rjmp	.-22     	; 0x45a2 <__RODATA_PM_OFFSET__+0x5a2>
    45b8:	15 c0       	rjmp	.+42     	; 0x45e4 <__RODATA_PM_OFFSET__+0x5e4>
    45ba:	f4 e0       	ldi	r31, 0x04	; 4
    45bc:	f5 15       	cp	r31, r5
    45be:	60 f5       	brcc	.+88     	; 0x4618 <__RODATA_PM_OFFSET__+0x618>
    45c0:	84 e0       	ldi	r24, 0x04	; 4
    45c2:	58 1a       	sub	r5, r24
    45c4:	93 fe       	sbrs	r9, 3
    45c6:	1f c0       	rjmp	.+62     	; 0x4606 <__RODATA_PM_OFFSET__+0x606>
    45c8:	01 11       	cpse	r16, r1
    45ca:	27 c0       	rjmp	.+78     	; 0x461a <__RODATA_PM_OFFSET__+0x61a>
    45cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    45ce:	23 ff       	sbrs	r18, 3
    45d0:	2a c0       	rjmp	.+84     	; 0x4626 <__RODATA_PM_OFFSET__+0x626>
    45d2:	04 e6       	ldi	r16, 0x64	; 100
    45d4:	11 e0       	ldi	r17, 0x01	; 1
    45d6:	39 2d       	mov	r19, r9
    45d8:	30 71       	andi	r19, 0x10	; 16
    45da:	93 2e       	mov	r9, r19
    45dc:	f8 01       	movw	r30, r16
    45de:	84 91       	lpm	r24, Z
    45e0:	81 11       	cpse	r24, r1
    45e2:	24 c0       	rjmp	.+72     	; 0x462c <__RODATA_PM_OFFSET__+0x62c>
    45e4:	55 20       	and	r5, r5
    45e6:	09 f4       	brne	.+2      	; 0x45ea <__RODATA_PM_OFFSET__+0x5ea>
    45e8:	e4 cc       	rjmp	.-1592   	; 0x3fb2 <vfprintf+0x58>
    45ea:	b7 01       	movw	r22, r14
    45ec:	80 e2       	ldi	r24, 0x20	; 32
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    45f4:	5a 94       	dec	r5
    45f6:	f6 cf       	rjmp	.-20     	; 0x45e4 <__RODATA_PM_OFFSET__+0x5e4>
    45f8:	f7 01       	movw	r30, r14
    45fa:	86 81       	ldd	r24, Z+6	; 0x06
    45fc:	97 81       	ldd	r25, Z+7	; 0x07
    45fe:	26 c0       	rjmp	.+76     	; 0x464c <__RODATA_PM_OFFSET__+0x64c>
    4600:	8f ef       	ldi	r24, 0xFF	; 255
    4602:	9f ef       	ldi	r25, 0xFF	; 255
    4604:	23 c0       	rjmp	.+70     	; 0x464c <__RODATA_PM_OFFSET__+0x64c>
    4606:	b7 01       	movw	r22, r14
    4608:	80 e2       	ldi	r24, 0x20	; 32
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    4610:	5a 94       	dec	r5
    4612:	51 10       	cpse	r5, r1
    4614:	f8 cf       	rjmp	.-16     	; 0x4606 <__RODATA_PM_OFFSET__+0x606>
    4616:	d8 cf       	rjmp	.-80     	; 0x45c8 <__RODATA_PM_OFFSET__+0x5c8>
    4618:	51 2c       	mov	r5, r1
    461a:	b7 01       	movw	r22, r14
    461c:	80 2f       	mov	r24, r16
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    4624:	d3 cf       	rjmp	.-90     	; 0x45cc <__RODATA_PM_OFFSET__+0x5cc>
    4626:	08 e6       	ldi	r16, 0x68	; 104
    4628:	11 e0       	ldi	r17, 0x01	; 1
    462a:	d5 cf       	rjmp	.-86     	; 0x45d6 <__RODATA_PM_OFFSET__+0x5d6>
    462c:	91 10       	cpse	r9, r1
    462e:	80 52       	subi	r24, 0x20	; 32
    4630:	b7 01       	movw	r22, r14
    4632:	90 e0       	ldi	r25, 0x00	; 0
    4634:	0e 94 20 25 	call	0x4a40	; 0x4a40 <fputc>
    4638:	0f 5f       	subi	r16, 0xFF	; 255
    463a:	1f 4f       	sbci	r17, 0xFF	; 255
    463c:	cf cf       	rjmp	.-98     	; 0x45dc <__RODATA_PM_OFFSET__+0x5dc>
    463e:	23 e0       	ldi	r18, 0x03	; 3
    4640:	25 15       	cp	r18, r5
    4642:	10 f4       	brcc	.+4      	; 0x4648 <__RODATA_PM_OFFSET__+0x648>
    4644:	83 e0       	ldi	r24, 0x03	; 3
    4646:	bd cf       	rjmp	.-134    	; 0x45c2 <__RODATA_PM_OFFSET__+0x5c2>
    4648:	51 2c       	mov	r5, r1
    464a:	c0 cf       	rjmp	.-128    	; 0x45cc <__RODATA_PM_OFFSET__+0x5cc>
    464c:	60 96       	adiw	r28, 0x10	; 16
    464e:	e2 e1       	ldi	r30, 0x12	; 18
    4650:	0c 94 87 23 	jmp	0x470e	; 0x470e <__epilogue_restores__>

00004654 <__divmodhi4>:
    4654:	97 fb       	bst	r25, 7
    4656:	07 2e       	mov	r0, r23
    4658:	16 f4       	brtc	.+4      	; 0x465e <__divmodhi4+0xa>
    465a:	00 94       	com	r0
    465c:	07 d0       	rcall	.+14     	; 0x466c <__divmodhi4_neg1>
    465e:	77 fd       	sbrc	r23, 7
    4660:	09 d0       	rcall	.+18     	; 0x4674 <__divmodhi4_neg2>
    4662:	0e 94 9f 23 	call	0x473e	; 0x473e <__udivmodhi4>
    4666:	07 fc       	sbrc	r0, 7
    4668:	05 d0       	rcall	.+10     	; 0x4674 <__divmodhi4_neg2>
    466a:	3e f4       	brtc	.+14     	; 0x467a <__divmodhi4_exit>

0000466c <__divmodhi4_neg1>:
    466c:	90 95       	com	r25
    466e:	81 95       	neg	r24
    4670:	9f 4f       	sbci	r25, 0xFF	; 255
    4672:	08 95       	ret

00004674 <__divmodhi4_neg2>:
    4674:	70 95       	com	r23
    4676:	61 95       	neg	r22
    4678:	7f 4f       	sbci	r23, 0xFF	; 255

0000467a <__divmodhi4_exit>:
    467a:	08 95       	ret

0000467c <__divmodsi4>:
    467c:	05 2e       	mov	r0, r21
    467e:	97 fb       	bst	r25, 7
    4680:	1e f4       	brtc	.+6      	; 0x4688 <__divmodsi4+0xc>
    4682:	00 94       	com	r0
    4684:	0e 94 55 23 	call	0x46aa	; 0x46aa <__negsi2>
    4688:	57 fd       	sbrc	r21, 7
    468a:	07 d0       	rcall	.+14     	; 0x469a <__divmodsi4_neg2>
    468c:	0e 94 b3 23 	call	0x4766	; 0x4766 <__udivmodsi4>
    4690:	07 fc       	sbrc	r0, 7
    4692:	03 d0       	rcall	.+6      	; 0x469a <__divmodsi4_neg2>
    4694:	4e f4       	brtc	.+18     	; 0x46a8 <__divmodsi4_exit>
    4696:	0c 94 55 23 	jmp	0x46aa	; 0x46aa <__negsi2>

0000469a <__divmodsi4_neg2>:
    469a:	50 95       	com	r21
    469c:	40 95       	com	r20
    469e:	30 95       	com	r19
    46a0:	21 95       	neg	r18
    46a2:	3f 4f       	sbci	r19, 0xFF	; 255
    46a4:	4f 4f       	sbci	r20, 0xFF	; 255
    46a6:	5f 4f       	sbci	r21, 0xFF	; 255

000046a8 <__divmodsi4_exit>:
    46a8:	08 95       	ret

000046aa <__negsi2>:
    46aa:	90 95       	com	r25
    46ac:	80 95       	com	r24
    46ae:	70 95       	com	r23
    46b0:	61 95       	neg	r22
    46b2:	7f 4f       	sbci	r23, 0xFF	; 255
    46b4:	8f 4f       	sbci	r24, 0xFF	; 255
    46b6:	9f 4f       	sbci	r25, 0xFF	; 255
    46b8:	08 95       	ret

000046ba <__tablejump2__>:
    46ba:	ee 0f       	add	r30, r30
    46bc:	ff 1f       	adc	r31, r31
    46be:	05 90       	lpm	r0, Z+
    46c0:	f4 91       	lpm	r31, Z
    46c2:	e0 2d       	mov	r30, r0
    46c4:	09 94       	ijmp

000046c6 <__muluhisi3>:
    46c6:	0e 94 d5 23 	call	0x47aa	; 0x47aa <__umulhisi3>
    46ca:	a5 9f       	mul	r26, r21
    46cc:	90 0d       	add	r25, r0
    46ce:	b4 9f       	mul	r27, r20
    46d0:	90 0d       	add	r25, r0
    46d2:	a4 9f       	mul	r26, r20
    46d4:	80 0d       	add	r24, r0
    46d6:	91 1d       	adc	r25, r1
    46d8:	11 24       	eor	r1, r1
    46da:	08 95       	ret

000046dc <__prologue_saves__>:
    46dc:	2f 92       	push	r2
    46de:	3f 92       	push	r3
    46e0:	4f 92       	push	r4
    46e2:	5f 92       	push	r5
    46e4:	6f 92       	push	r6
    46e6:	7f 92       	push	r7
    46e8:	8f 92       	push	r8
    46ea:	9f 92       	push	r9
    46ec:	af 92       	push	r10
    46ee:	bf 92       	push	r11
    46f0:	cf 92       	push	r12
    46f2:	df 92       	push	r13
    46f4:	ef 92       	push	r14
    46f6:	ff 92       	push	r15
    46f8:	0f 93       	push	r16
    46fa:	1f 93       	push	r17
    46fc:	cf 93       	push	r28
    46fe:	df 93       	push	r29
    4700:	cd b7       	in	r28, 0x3d	; 61
    4702:	de b7       	in	r29, 0x3e	; 62
    4704:	ca 1b       	sub	r28, r26
    4706:	db 0b       	sbc	r29, r27
    4708:	cd bf       	out	0x3d, r28	; 61
    470a:	de bf       	out	0x3e, r29	; 62
    470c:	09 94       	ijmp

0000470e <__epilogue_restores__>:
    470e:	2a 88       	ldd	r2, Y+18	; 0x12
    4710:	39 88       	ldd	r3, Y+17	; 0x11
    4712:	48 88       	ldd	r4, Y+16	; 0x10
    4714:	5f 84       	ldd	r5, Y+15	; 0x0f
    4716:	6e 84       	ldd	r6, Y+14	; 0x0e
    4718:	7d 84       	ldd	r7, Y+13	; 0x0d
    471a:	8c 84       	ldd	r8, Y+12	; 0x0c
    471c:	9b 84       	ldd	r9, Y+11	; 0x0b
    471e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4720:	b9 84       	ldd	r11, Y+9	; 0x09
    4722:	c8 84       	ldd	r12, Y+8	; 0x08
    4724:	df 80       	ldd	r13, Y+7	; 0x07
    4726:	ee 80       	ldd	r14, Y+6	; 0x06
    4728:	fd 80       	ldd	r15, Y+5	; 0x05
    472a:	0c 81       	ldd	r16, Y+4	; 0x04
    472c:	1b 81       	ldd	r17, Y+3	; 0x03
    472e:	aa 81       	ldd	r26, Y+2	; 0x02
    4730:	b9 81       	ldd	r27, Y+1	; 0x01
    4732:	ce 0f       	add	r28, r30
    4734:	d1 1d       	adc	r29, r1
    4736:	cd bf       	out	0x3d, r28	; 61
    4738:	de bf       	out	0x3e, r29	; 62
    473a:	ed 01       	movw	r28, r26
    473c:	08 95       	ret

0000473e <__udivmodhi4>:
    473e:	aa 1b       	sub	r26, r26
    4740:	bb 1b       	sub	r27, r27
    4742:	51 e1       	ldi	r21, 0x11	; 17
    4744:	07 c0       	rjmp	.+14     	; 0x4754 <__udivmodhi4_ep>

00004746 <__udivmodhi4_loop>:
    4746:	aa 1f       	adc	r26, r26
    4748:	bb 1f       	adc	r27, r27
    474a:	a6 17       	cp	r26, r22
    474c:	b7 07       	cpc	r27, r23
    474e:	10 f0       	brcs	.+4      	; 0x4754 <__udivmodhi4_ep>
    4750:	a6 1b       	sub	r26, r22
    4752:	b7 0b       	sbc	r27, r23

00004754 <__udivmodhi4_ep>:
    4754:	88 1f       	adc	r24, r24
    4756:	99 1f       	adc	r25, r25
    4758:	5a 95       	dec	r21
    475a:	a9 f7       	brne	.-22     	; 0x4746 <__udivmodhi4_loop>
    475c:	80 95       	com	r24
    475e:	90 95       	com	r25
    4760:	bc 01       	movw	r22, r24
    4762:	cd 01       	movw	r24, r26
    4764:	08 95       	ret

00004766 <__udivmodsi4>:
    4766:	a1 e2       	ldi	r26, 0x21	; 33
    4768:	1a 2e       	mov	r1, r26
    476a:	aa 1b       	sub	r26, r26
    476c:	bb 1b       	sub	r27, r27
    476e:	fd 01       	movw	r30, r26
    4770:	0d c0       	rjmp	.+26     	; 0x478c <__udivmodsi4_ep>

00004772 <__udivmodsi4_loop>:
    4772:	aa 1f       	adc	r26, r26
    4774:	bb 1f       	adc	r27, r27
    4776:	ee 1f       	adc	r30, r30
    4778:	ff 1f       	adc	r31, r31
    477a:	a2 17       	cp	r26, r18
    477c:	b3 07       	cpc	r27, r19
    477e:	e4 07       	cpc	r30, r20
    4780:	f5 07       	cpc	r31, r21
    4782:	20 f0       	brcs	.+8      	; 0x478c <__udivmodsi4_ep>
    4784:	a2 1b       	sub	r26, r18
    4786:	b3 0b       	sbc	r27, r19
    4788:	e4 0b       	sbc	r30, r20
    478a:	f5 0b       	sbc	r31, r21

0000478c <__udivmodsi4_ep>:
    478c:	66 1f       	adc	r22, r22
    478e:	77 1f       	adc	r23, r23
    4790:	88 1f       	adc	r24, r24
    4792:	99 1f       	adc	r25, r25
    4794:	1a 94       	dec	r1
    4796:	69 f7       	brne	.-38     	; 0x4772 <__udivmodsi4_loop>
    4798:	60 95       	com	r22
    479a:	70 95       	com	r23
    479c:	80 95       	com	r24
    479e:	90 95       	com	r25
    47a0:	9b 01       	movw	r18, r22
    47a2:	ac 01       	movw	r20, r24
    47a4:	bd 01       	movw	r22, r26
    47a6:	cf 01       	movw	r24, r30
    47a8:	08 95       	ret

000047aa <__umulhisi3>:
    47aa:	a2 9f       	mul	r26, r18
    47ac:	b0 01       	movw	r22, r0
    47ae:	b3 9f       	mul	r27, r19
    47b0:	c0 01       	movw	r24, r0
    47b2:	a3 9f       	mul	r26, r19
    47b4:	70 0d       	add	r23, r0
    47b6:	81 1d       	adc	r24, r1
    47b8:	11 24       	eor	r1, r1
    47ba:	91 1d       	adc	r25, r1
    47bc:	b2 9f       	mul	r27, r18
    47be:	70 0d       	add	r23, r0
    47c0:	81 1d       	adc	r24, r1
    47c2:	11 24       	eor	r1, r1
    47c4:	91 1d       	adc	r25, r1
    47c6:	08 95       	ret

000047c8 <atol>:
    47c8:	1f 93       	push	r17
    47ca:	fc 01       	movw	r30, r24
    47cc:	99 27       	eor	r25, r25
    47ce:	88 27       	eor	r24, r24
    47d0:	bc 01       	movw	r22, r24
    47d2:	e8 94       	clt
    47d4:	11 91       	ld	r17, Z+
    47d6:	10 32       	cpi	r17, 0x20	; 32
    47d8:	e9 f3       	breq	.-6      	; 0x47d4 <atol+0xc>
    47da:	19 30       	cpi	r17, 0x09	; 9
    47dc:	10 f0       	brcs	.+4      	; 0x47e2 <atol+0x1a>
    47de:	1e 30       	cpi	r17, 0x0E	; 14
    47e0:	c8 f3       	brcs	.-14     	; 0x47d4 <atol+0xc>
    47e2:	1b 32       	cpi	r17, 0x2B	; 43
    47e4:	51 f0       	breq	.+20     	; 0x47fa <atol+0x32>
    47e6:	1d 32       	cpi	r17, 0x2D	; 45
    47e8:	49 f4       	brne	.+18     	; 0x47fc <atol+0x34>
    47ea:	68 94       	set
    47ec:	06 c0       	rjmp	.+12     	; 0x47fa <atol+0x32>
    47ee:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <__mulsi_const_10>
    47f2:	61 0f       	add	r22, r17
    47f4:	71 1d       	adc	r23, r1
    47f6:	81 1d       	adc	r24, r1
    47f8:	91 1d       	adc	r25, r1
    47fa:	11 91       	ld	r17, Z+
    47fc:	10 53       	subi	r17, 0x30	; 48
    47fe:	1a 30       	cpi	r17, 0x0A	; 10
    4800:	b0 f3       	brcs	.-20     	; 0x47ee <atol+0x26>
    4802:	3e f4       	brtc	.+14     	; 0x4812 <atol+0x4a>
    4804:	90 95       	com	r25
    4806:	80 95       	com	r24
    4808:	70 95       	com	r23
    480a:	61 95       	neg	r22
    480c:	7f 4f       	sbci	r23, 0xFF	; 255
    480e:	8f 4f       	sbci	r24, 0xFF	; 255
    4810:	9f 4f       	sbci	r25, 0xFF	; 255
    4812:	1f 91       	pop	r17
    4814:	08 95       	ret

00004816 <__ftoa_engine>:
    4816:	28 30       	cpi	r18, 0x08	; 8
    4818:	08 f0       	brcs	.+2      	; 0x481c <__ftoa_engine+0x6>
    481a:	27 e0       	ldi	r18, 0x07	; 7
    481c:	33 27       	eor	r19, r19
    481e:	da 01       	movw	r26, r20
    4820:	99 0f       	add	r25, r25
    4822:	31 1d       	adc	r19, r1
    4824:	87 fd       	sbrc	r24, 7
    4826:	91 60       	ori	r25, 0x01	; 1
    4828:	00 96       	adiw	r24, 0x00	; 0
    482a:	61 05       	cpc	r22, r1
    482c:	71 05       	cpc	r23, r1
    482e:	39 f4       	brne	.+14     	; 0x483e <__ftoa_engine+0x28>
    4830:	32 60       	ori	r19, 0x02	; 2
    4832:	2e 5f       	subi	r18, 0xFE	; 254
    4834:	3d 93       	st	X+, r19
    4836:	30 e3       	ldi	r19, 0x30	; 48
    4838:	2a 95       	dec	r18
    483a:	e1 f7       	brne	.-8      	; 0x4834 <__ftoa_engine+0x1e>
    483c:	08 95       	ret
    483e:	9f 3f       	cpi	r25, 0xFF	; 255
    4840:	30 f0       	brcs	.+12     	; 0x484e <__ftoa_engine+0x38>
    4842:	80 38       	cpi	r24, 0x80	; 128
    4844:	71 05       	cpc	r23, r1
    4846:	61 05       	cpc	r22, r1
    4848:	09 f0       	breq	.+2      	; 0x484c <__ftoa_engine+0x36>
    484a:	3c 5f       	subi	r19, 0xFC	; 252
    484c:	3c 5f       	subi	r19, 0xFC	; 252
    484e:	3d 93       	st	X+, r19
    4850:	91 30       	cpi	r25, 0x01	; 1
    4852:	08 f0       	brcs	.+2      	; 0x4856 <__ftoa_engine+0x40>
    4854:	80 68       	ori	r24, 0x80	; 128
    4856:	91 1d       	adc	r25, r1
    4858:	df 93       	push	r29
    485a:	cf 93       	push	r28
    485c:	1f 93       	push	r17
    485e:	0f 93       	push	r16
    4860:	ff 92       	push	r15
    4862:	ef 92       	push	r14
    4864:	19 2f       	mov	r17, r25
    4866:	98 7f       	andi	r25, 0xF8	; 248
    4868:	96 95       	lsr	r25
    486a:	e9 2f       	mov	r30, r25
    486c:	96 95       	lsr	r25
    486e:	96 95       	lsr	r25
    4870:	e9 0f       	add	r30, r25
    4872:	ff 27       	eor	r31, r31
    4874:	ea 53       	subi	r30, 0x3A	; 58
    4876:	fe 4f       	sbci	r31, 0xFE	; 254
    4878:	99 27       	eor	r25, r25
    487a:	33 27       	eor	r19, r19
    487c:	ee 24       	eor	r14, r14
    487e:	ff 24       	eor	r15, r15
    4880:	a7 01       	movw	r20, r14
    4882:	e7 01       	movw	r28, r14
    4884:	05 90       	lpm	r0, Z+
    4886:	08 94       	sec
    4888:	07 94       	ror	r0
    488a:	28 f4       	brcc	.+10     	; 0x4896 <__ftoa_engine+0x80>
    488c:	36 0f       	add	r19, r22
    488e:	e7 1e       	adc	r14, r23
    4890:	f8 1e       	adc	r15, r24
    4892:	49 1f       	adc	r20, r25
    4894:	51 1d       	adc	r21, r1
    4896:	66 0f       	add	r22, r22
    4898:	77 1f       	adc	r23, r23
    489a:	88 1f       	adc	r24, r24
    489c:	99 1f       	adc	r25, r25
    489e:	06 94       	lsr	r0
    48a0:	a1 f7       	brne	.-24     	; 0x488a <__ftoa_engine+0x74>
    48a2:	05 90       	lpm	r0, Z+
    48a4:	07 94       	ror	r0
    48a6:	28 f4       	brcc	.+10     	; 0x48b2 <__ftoa_engine+0x9c>
    48a8:	e7 0e       	add	r14, r23
    48aa:	f8 1e       	adc	r15, r24
    48ac:	49 1f       	adc	r20, r25
    48ae:	56 1f       	adc	r21, r22
    48b0:	c1 1d       	adc	r28, r1
    48b2:	77 0f       	add	r23, r23
    48b4:	88 1f       	adc	r24, r24
    48b6:	99 1f       	adc	r25, r25
    48b8:	66 1f       	adc	r22, r22
    48ba:	06 94       	lsr	r0
    48bc:	a1 f7       	brne	.-24     	; 0x48a6 <__ftoa_engine+0x90>
    48be:	05 90       	lpm	r0, Z+
    48c0:	07 94       	ror	r0
    48c2:	28 f4       	brcc	.+10     	; 0x48ce <__ftoa_engine+0xb8>
    48c4:	f8 0e       	add	r15, r24
    48c6:	49 1f       	adc	r20, r25
    48c8:	56 1f       	adc	r21, r22
    48ca:	c7 1f       	adc	r28, r23
    48cc:	d1 1d       	adc	r29, r1
    48ce:	88 0f       	add	r24, r24
    48d0:	99 1f       	adc	r25, r25
    48d2:	66 1f       	adc	r22, r22
    48d4:	77 1f       	adc	r23, r23
    48d6:	06 94       	lsr	r0
    48d8:	a1 f7       	brne	.-24     	; 0x48c2 <__ftoa_engine+0xac>
    48da:	05 90       	lpm	r0, Z+
    48dc:	07 94       	ror	r0
    48de:	20 f4       	brcc	.+8      	; 0x48e8 <__ftoa_engine+0xd2>
    48e0:	49 0f       	add	r20, r25
    48e2:	56 1f       	adc	r21, r22
    48e4:	c7 1f       	adc	r28, r23
    48e6:	d8 1f       	adc	r29, r24
    48e8:	99 0f       	add	r25, r25
    48ea:	66 1f       	adc	r22, r22
    48ec:	77 1f       	adc	r23, r23
    48ee:	88 1f       	adc	r24, r24
    48f0:	06 94       	lsr	r0
    48f2:	a9 f7       	brne	.-22     	; 0x48de <__ftoa_engine+0xc8>
    48f4:	84 91       	lpm	r24, Z
    48f6:	10 95       	com	r17
    48f8:	17 70       	andi	r17, 0x07	; 7
    48fa:	41 f0       	breq	.+16     	; 0x490c <__ftoa_engine+0xf6>
    48fc:	d6 95       	lsr	r29
    48fe:	c7 95       	ror	r28
    4900:	57 95       	ror	r21
    4902:	47 95       	ror	r20
    4904:	f7 94       	ror	r15
    4906:	e7 94       	ror	r14
    4908:	1a 95       	dec	r17
    490a:	c1 f7       	brne	.-16     	; 0x48fc <__ftoa_engine+0xe6>
    490c:	ec e6       	ldi	r30, 0x6C	; 108
    490e:	f1 e0       	ldi	r31, 0x01	; 1
    4910:	68 94       	set
    4912:	15 90       	lpm	r1, Z+
    4914:	15 91       	lpm	r17, Z+
    4916:	35 91       	lpm	r19, Z+
    4918:	65 91       	lpm	r22, Z+
    491a:	95 91       	lpm	r25, Z+
    491c:	05 90       	lpm	r0, Z+
    491e:	7f e2       	ldi	r23, 0x2F	; 47
    4920:	73 95       	inc	r23
    4922:	e1 18       	sub	r14, r1
    4924:	f1 0a       	sbc	r15, r17
    4926:	43 0b       	sbc	r20, r19
    4928:	56 0b       	sbc	r21, r22
    492a:	c9 0b       	sbc	r28, r25
    492c:	d0 09       	sbc	r29, r0
    492e:	c0 f7       	brcc	.-16     	; 0x4920 <__ftoa_engine+0x10a>
    4930:	e1 0c       	add	r14, r1
    4932:	f1 1e       	adc	r15, r17
    4934:	43 1f       	adc	r20, r19
    4936:	56 1f       	adc	r21, r22
    4938:	c9 1f       	adc	r28, r25
    493a:	d0 1d       	adc	r29, r0
    493c:	7e f4       	brtc	.+30     	; 0x495c <__ftoa_engine+0x146>
    493e:	70 33       	cpi	r23, 0x30	; 48
    4940:	11 f4       	brne	.+4      	; 0x4946 <__ftoa_engine+0x130>
    4942:	8a 95       	dec	r24
    4944:	e6 cf       	rjmp	.-52     	; 0x4912 <__ftoa_engine+0xfc>
    4946:	e8 94       	clt
    4948:	01 50       	subi	r16, 0x01	; 1
    494a:	30 f0       	brcs	.+12     	; 0x4958 <__ftoa_engine+0x142>
    494c:	08 0f       	add	r16, r24
    494e:	0a f4       	brpl	.+2      	; 0x4952 <__ftoa_engine+0x13c>
    4950:	00 27       	eor	r16, r16
    4952:	02 17       	cp	r16, r18
    4954:	08 f4       	brcc	.+2      	; 0x4958 <__ftoa_engine+0x142>
    4956:	20 2f       	mov	r18, r16
    4958:	23 95       	inc	r18
    495a:	02 2f       	mov	r16, r18
    495c:	7a 33       	cpi	r23, 0x3A	; 58
    495e:	28 f0       	brcs	.+10     	; 0x496a <__ftoa_engine+0x154>
    4960:	79 e3       	ldi	r23, 0x39	; 57
    4962:	7d 93       	st	X+, r23
    4964:	2a 95       	dec	r18
    4966:	e9 f7       	brne	.-6      	; 0x4962 <__ftoa_engine+0x14c>
    4968:	10 c0       	rjmp	.+32     	; 0x498a <__ftoa_engine+0x174>
    496a:	7d 93       	st	X+, r23
    496c:	2a 95       	dec	r18
    496e:	89 f6       	brne	.-94     	; 0x4912 <__ftoa_engine+0xfc>
    4970:	06 94       	lsr	r0
    4972:	97 95       	ror	r25
    4974:	67 95       	ror	r22
    4976:	37 95       	ror	r19
    4978:	17 95       	ror	r17
    497a:	17 94       	ror	r1
    497c:	e1 18       	sub	r14, r1
    497e:	f1 0a       	sbc	r15, r17
    4980:	43 0b       	sbc	r20, r19
    4982:	56 0b       	sbc	r21, r22
    4984:	c9 0b       	sbc	r28, r25
    4986:	d0 09       	sbc	r29, r0
    4988:	98 f0       	brcs	.+38     	; 0x49b0 <__ftoa_engine+0x19a>
    498a:	23 95       	inc	r18
    498c:	7e 91       	ld	r23, -X
    498e:	73 95       	inc	r23
    4990:	7a 33       	cpi	r23, 0x3A	; 58
    4992:	08 f0       	brcs	.+2      	; 0x4996 <__ftoa_engine+0x180>
    4994:	70 e3       	ldi	r23, 0x30	; 48
    4996:	7c 93       	st	X, r23
    4998:	20 13       	cpse	r18, r16
    499a:	b8 f7       	brcc	.-18     	; 0x498a <__ftoa_engine+0x174>
    499c:	7e 91       	ld	r23, -X
    499e:	70 61       	ori	r23, 0x10	; 16
    49a0:	7d 93       	st	X+, r23
    49a2:	30 f0       	brcs	.+12     	; 0x49b0 <__ftoa_engine+0x19a>
    49a4:	83 95       	inc	r24
    49a6:	71 e3       	ldi	r23, 0x31	; 49
    49a8:	7d 93       	st	X+, r23
    49aa:	70 e3       	ldi	r23, 0x30	; 48
    49ac:	2a 95       	dec	r18
    49ae:	e1 f7       	brne	.-8      	; 0x49a8 <__ftoa_engine+0x192>
    49b0:	11 24       	eor	r1, r1
    49b2:	ef 90       	pop	r14
    49b4:	ff 90       	pop	r15
    49b6:	0f 91       	pop	r16
    49b8:	1f 91       	pop	r17
    49ba:	cf 91       	pop	r28
    49bc:	df 91       	pop	r29
    49be:	99 27       	eor	r25, r25
    49c0:	87 fd       	sbrc	r24, 7
    49c2:	90 95       	com	r25
    49c4:	08 95       	ret

000049c6 <strnlen_P>:
    49c6:	fc 01       	movw	r30, r24
    49c8:	05 90       	lpm	r0, Z+
    49ca:	61 50       	subi	r22, 0x01	; 1
    49cc:	70 40       	sbci	r23, 0x00	; 0
    49ce:	01 10       	cpse	r0, r1
    49d0:	d8 f7       	brcc	.-10     	; 0x49c8 <strnlen_P+0x2>
    49d2:	80 95       	com	r24
    49d4:	90 95       	com	r25
    49d6:	8e 0f       	add	r24, r30
    49d8:	9f 1f       	adc	r25, r31
    49da:	08 95       	ret

000049dc <strcat>:
    49dc:	fb 01       	movw	r30, r22
    49de:	dc 01       	movw	r26, r24
    49e0:	0d 90       	ld	r0, X+
    49e2:	00 20       	and	r0, r0
    49e4:	e9 f7       	brne	.-6      	; 0x49e0 <strcat+0x4>
    49e6:	11 97       	sbiw	r26, 0x01	; 1
    49e8:	01 90       	ld	r0, Z+
    49ea:	0d 92       	st	X+, r0
    49ec:	00 20       	and	r0, r0
    49ee:	e1 f7       	brne	.-8      	; 0x49e8 <strcat+0xc>
    49f0:	08 95       	ret

000049f2 <strcpy>:
    49f2:	fb 01       	movw	r30, r22
    49f4:	dc 01       	movw	r26, r24
    49f6:	01 90       	ld	r0, Z+
    49f8:	0d 92       	st	X+, r0
    49fa:	00 20       	and	r0, r0
    49fc:	e1 f7       	brne	.-8      	; 0x49f6 <strcpy+0x4>
    49fe:	08 95       	ret

00004a00 <strnlen>:
    4a00:	fc 01       	movw	r30, r24
    4a02:	61 50       	subi	r22, 0x01	; 1
    4a04:	70 40       	sbci	r23, 0x00	; 0
    4a06:	01 90       	ld	r0, Z+
    4a08:	01 10       	cpse	r0, r1
    4a0a:	d8 f7       	brcc	.-10     	; 0x4a02 <strnlen+0x2>
    4a0c:	80 95       	com	r24
    4a0e:	90 95       	com	r25
    4a10:	8e 0f       	add	r24, r30
    4a12:	9f 1f       	adc	r25, r31
    4a14:	08 95       	ret

00004a16 <__mulsi_const_10>:
    4a16:	59 2f       	mov	r21, r25
    4a18:	48 2f       	mov	r20, r24
    4a1a:	37 2f       	mov	r19, r23
    4a1c:	26 2f       	mov	r18, r22
    4a1e:	66 0f       	add	r22, r22
    4a20:	77 1f       	adc	r23, r23
    4a22:	88 1f       	adc	r24, r24
    4a24:	99 1f       	adc	r25, r25
    4a26:	66 0f       	add	r22, r22
    4a28:	77 1f       	adc	r23, r23
    4a2a:	88 1f       	adc	r24, r24
    4a2c:	99 1f       	adc	r25, r25
    4a2e:	62 0f       	add	r22, r18
    4a30:	73 1f       	adc	r23, r19
    4a32:	84 1f       	adc	r24, r20
    4a34:	95 1f       	adc	r25, r21
    4a36:	66 0f       	add	r22, r22
    4a38:	77 1f       	adc	r23, r23
    4a3a:	88 1f       	adc	r24, r24
    4a3c:	99 1f       	adc	r25, r25
    4a3e:	08 95       	ret

00004a40 <fputc>:
    4a40:	0f 93       	push	r16
    4a42:	1f 93       	push	r17
    4a44:	cf 93       	push	r28
    4a46:	df 93       	push	r29
    4a48:	fb 01       	movw	r30, r22
    4a4a:	23 81       	ldd	r18, Z+3	; 0x03
    4a4c:	21 fd       	sbrc	r18, 1
    4a4e:	03 c0       	rjmp	.+6      	; 0x4a56 <fputc+0x16>
    4a50:	8f ef       	ldi	r24, 0xFF	; 255
    4a52:	9f ef       	ldi	r25, 0xFF	; 255
    4a54:	2c c0       	rjmp	.+88     	; 0x4aae <fputc+0x6e>
    4a56:	22 ff       	sbrs	r18, 2
    4a58:	16 c0       	rjmp	.+44     	; 0x4a86 <fputc+0x46>
    4a5a:	46 81       	ldd	r20, Z+6	; 0x06
    4a5c:	57 81       	ldd	r21, Z+7	; 0x07
    4a5e:	24 81       	ldd	r18, Z+4	; 0x04
    4a60:	35 81       	ldd	r19, Z+5	; 0x05
    4a62:	42 17       	cp	r20, r18
    4a64:	53 07       	cpc	r21, r19
    4a66:	44 f4       	brge	.+16     	; 0x4a78 <fputc+0x38>
    4a68:	a0 81       	ld	r26, Z
    4a6a:	b1 81       	ldd	r27, Z+1	; 0x01
    4a6c:	9d 01       	movw	r18, r26
    4a6e:	2f 5f       	subi	r18, 0xFF	; 255
    4a70:	3f 4f       	sbci	r19, 0xFF	; 255
    4a72:	20 83       	st	Z, r18
    4a74:	31 83       	std	Z+1, r19	; 0x01
    4a76:	8c 93       	st	X, r24
    4a78:	26 81       	ldd	r18, Z+6	; 0x06
    4a7a:	37 81       	ldd	r19, Z+7	; 0x07
    4a7c:	2f 5f       	subi	r18, 0xFF	; 255
    4a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a80:	26 83       	std	Z+6, r18	; 0x06
    4a82:	37 83       	std	Z+7, r19	; 0x07
    4a84:	14 c0       	rjmp	.+40     	; 0x4aae <fputc+0x6e>
    4a86:	8b 01       	movw	r16, r22
    4a88:	ec 01       	movw	r28, r24
    4a8a:	fb 01       	movw	r30, r22
    4a8c:	00 84       	ldd	r0, Z+8	; 0x08
    4a8e:	f1 85       	ldd	r31, Z+9	; 0x09
    4a90:	e0 2d       	mov	r30, r0
    4a92:	09 95       	icall
    4a94:	89 2b       	or	r24, r25
    4a96:	e1 f6       	brne	.-72     	; 0x4a50 <fputc+0x10>
    4a98:	d8 01       	movw	r26, r16
    4a9a:	16 96       	adiw	r26, 0x06	; 6
    4a9c:	8d 91       	ld	r24, X+
    4a9e:	9c 91       	ld	r25, X
    4aa0:	17 97       	sbiw	r26, 0x07	; 7
    4aa2:	01 96       	adiw	r24, 0x01	; 1
    4aa4:	16 96       	adiw	r26, 0x06	; 6
    4aa6:	8d 93       	st	X+, r24
    4aa8:	9c 93       	st	X, r25
    4aaa:	17 97       	sbiw	r26, 0x07	; 7
    4aac:	ce 01       	movw	r24, r28
    4aae:	df 91       	pop	r29
    4ab0:	cf 91       	pop	r28
    4ab2:	1f 91       	pop	r17
    4ab4:	0f 91       	pop	r16
    4ab6:	08 95       	ret

00004ab8 <sprintf>:
    4ab8:	ae e0       	ldi	r26, 0x0E	; 14
    4aba:	b0 e0       	ldi	r27, 0x00	; 0
    4abc:	e2 e6       	ldi	r30, 0x62	; 98
    4abe:	f5 e2       	ldi	r31, 0x25	; 37
    4ac0:	0c 94 7c 23 	jmp	0x46f8	; 0x46f8 <__prologue_saves__+0x1c>
    4ac4:	0d 89       	ldd	r16, Y+21	; 0x15
    4ac6:	1e 89       	ldd	r17, Y+22	; 0x16
    4ac8:	86 e0       	ldi	r24, 0x06	; 6
    4aca:	8c 83       	std	Y+4, r24	; 0x04
    4acc:	09 83       	std	Y+1, r16	; 0x01
    4ace:	1a 83       	std	Y+2, r17	; 0x02
    4ad0:	8f ef       	ldi	r24, 0xFF	; 255
    4ad2:	9f e7       	ldi	r25, 0x7F	; 127
    4ad4:	8d 83       	std	Y+5, r24	; 0x05
    4ad6:	9e 83       	std	Y+6, r25	; 0x06
    4ad8:	ae 01       	movw	r20, r28
    4ada:	47 5e       	subi	r20, 0xE7	; 231
    4adc:	5f 4f       	sbci	r21, 0xFF	; 255
    4ade:	6f 89       	ldd	r22, Y+23	; 0x17
    4ae0:	78 8d       	ldd	r23, Y+24	; 0x18
    4ae2:	ce 01       	movw	r24, r28
    4ae4:	01 96       	adiw	r24, 0x01	; 1
    4ae6:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <vfprintf>
    4aea:	ef 81       	ldd	r30, Y+7	; 0x07
    4aec:	f8 85       	ldd	r31, Y+8	; 0x08
    4aee:	e0 0f       	add	r30, r16
    4af0:	f1 1f       	adc	r31, r17
    4af2:	10 82       	st	Z, r1
    4af4:	2e 96       	adiw	r28, 0x0e	; 14
    4af6:	e4 e0       	ldi	r30, 0x04	; 4
    4af8:	0c 94 95 23 	jmp	0x472a	; 0x472a <__epilogue_restores__+0x1c>

00004afc <__ultoa_invert>:
    4afc:	fa 01       	movw	r30, r20
    4afe:	aa 27       	eor	r26, r26
    4b00:	28 30       	cpi	r18, 0x08	; 8
    4b02:	51 f1       	breq	.+84     	; 0x4b58 <__ultoa_invert+0x5c>
    4b04:	20 31       	cpi	r18, 0x10	; 16
    4b06:	81 f1       	breq	.+96     	; 0x4b68 <__ultoa_invert+0x6c>
    4b08:	e8 94       	clt
    4b0a:	6f 93       	push	r22
    4b0c:	6e 7f       	andi	r22, 0xFE	; 254
    4b0e:	6e 5f       	subi	r22, 0xFE	; 254
    4b10:	7f 4f       	sbci	r23, 0xFF	; 255
    4b12:	8f 4f       	sbci	r24, 0xFF	; 255
    4b14:	9f 4f       	sbci	r25, 0xFF	; 255
    4b16:	af 4f       	sbci	r26, 0xFF	; 255
    4b18:	b1 e0       	ldi	r27, 0x01	; 1
    4b1a:	3e d0       	rcall	.+124    	; 0x4b98 <__ultoa_invert+0x9c>
    4b1c:	b4 e0       	ldi	r27, 0x04	; 4
    4b1e:	3c d0       	rcall	.+120    	; 0x4b98 <__ultoa_invert+0x9c>
    4b20:	67 0f       	add	r22, r23
    4b22:	78 1f       	adc	r23, r24
    4b24:	89 1f       	adc	r24, r25
    4b26:	9a 1f       	adc	r25, r26
    4b28:	a1 1d       	adc	r26, r1
    4b2a:	68 0f       	add	r22, r24
    4b2c:	79 1f       	adc	r23, r25
    4b2e:	8a 1f       	adc	r24, r26
    4b30:	91 1d       	adc	r25, r1
    4b32:	a1 1d       	adc	r26, r1
    4b34:	6a 0f       	add	r22, r26
    4b36:	71 1d       	adc	r23, r1
    4b38:	81 1d       	adc	r24, r1
    4b3a:	91 1d       	adc	r25, r1
    4b3c:	a1 1d       	adc	r26, r1
    4b3e:	20 d0       	rcall	.+64     	; 0x4b80 <__ultoa_invert+0x84>
    4b40:	09 f4       	brne	.+2      	; 0x4b44 <__ultoa_invert+0x48>
    4b42:	68 94       	set
    4b44:	3f 91       	pop	r19
    4b46:	2a e0       	ldi	r18, 0x0A	; 10
    4b48:	26 9f       	mul	r18, r22
    4b4a:	11 24       	eor	r1, r1
    4b4c:	30 19       	sub	r19, r0
    4b4e:	30 5d       	subi	r19, 0xD0	; 208
    4b50:	31 93       	st	Z+, r19
    4b52:	de f6       	brtc	.-74     	; 0x4b0a <__ultoa_invert+0xe>
    4b54:	cf 01       	movw	r24, r30
    4b56:	08 95       	ret
    4b58:	46 2f       	mov	r20, r22
    4b5a:	47 70       	andi	r20, 0x07	; 7
    4b5c:	40 5d       	subi	r20, 0xD0	; 208
    4b5e:	41 93       	st	Z+, r20
    4b60:	b3 e0       	ldi	r27, 0x03	; 3
    4b62:	0f d0       	rcall	.+30     	; 0x4b82 <__ultoa_invert+0x86>
    4b64:	c9 f7       	brne	.-14     	; 0x4b58 <__ultoa_invert+0x5c>
    4b66:	f6 cf       	rjmp	.-20     	; 0x4b54 <__ultoa_invert+0x58>
    4b68:	46 2f       	mov	r20, r22
    4b6a:	4f 70       	andi	r20, 0x0F	; 15
    4b6c:	40 5d       	subi	r20, 0xD0	; 208
    4b6e:	4a 33       	cpi	r20, 0x3A	; 58
    4b70:	18 f0       	brcs	.+6      	; 0x4b78 <__ultoa_invert+0x7c>
    4b72:	49 5d       	subi	r20, 0xD9	; 217
    4b74:	31 fd       	sbrc	r19, 1
    4b76:	40 52       	subi	r20, 0x20	; 32
    4b78:	41 93       	st	Z+, r20
    4b7a:	02 d0       	rcall	.+4      	; 0x4b80 <__ultoa_invert+0x84>
    4b7c:	a9 f7       	brne	.-22     	; 0x4b68 <__ultoa_invert+0x6c>
    4b7e:	ea cf       	rjmp	.-44     	; 0x4b54 <__ultoa_invert+0x58>
    4b80:	b4 e0       	ldi	r27, 0x04	; 4
    4b82:	a6 95       	lsr	r26
    4b84:	97 95       	ror	r25
    4b86:	87 95       	ror	r24
    4b88:	77 95       	ror	r23
    4b8a:	67 95       	ror	r22
    4b8c:	ba 95       	dec	r27
    4b8e:	c9 f7       	brne	.-14     	; 0x4b82 <__ultoa_invert+0x86>
    4b90:	00 97       	sbiw	r24, 0x00	; 0
    4b92:	61 05       	cpc	r22, r1
    4b94:	71 05       	cpc	r23, r1
    4b96:	08 95       	ret
    4b98:	9b 01       	movw	r18, r22
    4b9a:	ac 01       	movw	r20, r24
    4b9c:	0a 2e       	mov	r0, r26
    4b9e:	06 94       	lsr	r0
    4ba0:	57 95       	ror	r21
    4ba2:	47 95       	ror	r20
    4ba4:	37 95       	ror	r19
    4ba6:	27 95       	ror	r18
    4ba8:	ba 95       	dec	r27
    4baa:	c9 f7       	brne	.-14     	; 0x4b9e <__ultoa_invert+0xa2>
    4bac:	62 0f       	add	r22, r18
    4bae:	73 1f       	adc	r23, r19
    4bb0:	84 1f       	adc	r24, r20
    4bb2:	95 1f       	adc	r25, r21
    4bb4:	a0 1d       	adc	r26, r0
    4bb6:	08 95       	ret

00004bb8 <eeprom_read_block>:
    4bb8:	60 50       	subi	r22, 0x00	; 0
    4bba:	7c 4e       	sbci	r23, 0xEC	; 236
    4bbc:	0c 94 17 26 	jmp	0x4c2e	; 0x4c2e <memcpy>

00004bc0 <eeprom_update_block>:
    4bc0:	dc 01       	movw	r26, r24
    4bc2:	a4 0f       	add	r26, r20
    4bc4:	b5 1f       	adc	r27, r21
    4bc6:	41 50       	subi	r20, 0x01	; 1
    4bc8:	50 40       	sbci	r21, 0x00	; 0
    4bca:	48 f0       	brcs	.+18     	; 0x4bde <eeprom_update_block+0x1e>
    4bcc:	cb 01       	movw	r24, r22
    4bce:	84 0f       	add	r24, r20
    4bd0:	95 1f       	adc	r25, r21
    4bd2:	2e 91       	ld	r18, -X
    4bd4:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <eeprom_update_r18>
    4bd8:	41 50       	subi	r20, 0x01	; 1
    4bda:	50 40       	sbci	r21, 0x00	; 0
    4bdc:	d0 f7       	brcc	.-12     	; 0x4bd2 <eeprom_update_block+0x12>
    4bde:	08 95       	ret

00004be0 <eeprom_update_byte>:
    4be0:	26 2f       	mov	r18, r22

00004be2 <eeprom_update_r18>:
    4be2:	0e 94 13 26 	call	0x4c26	; 0x4c26 <eeprom_mapen>
    4be6:	00 80       	ld	r0, Z
    4be8:	02 16       	cp	r0, r18
    4bea:	19 f0       	breq	.+6      	; 0x4bf2 <eeprom_update_r18+0x10>
    4bec:	0e 94 fc 25 	call	0x4bf8	; 0x4bf8 <eeprom_write_r18>
    4bf0:	01 97       	sbiw	r24, 0x01	; 1
    4bf2:	01 97       	sbiw	r24, 0x01	; 1
    4bf4:	08 95       	ret

00004bf6 <eeprom_write_byte>:
    4bf6:	26 2f       	mov	r18, r22

00004bf8 <eeprom_write_r18>:
    4bf8:	af 93       	push	r26
    4bfa:	bf 93       	push	r27
    4bfc:	e0 e0       	ldi	r30, 0x00	; 0
    4bfe:	f0 e1       	ldi	r31, 0x10	; 16
    4c00:	32 81       	ldd	r19, Z+2	; 0x02
    4c02:	31 fd       	sbrc	r19, 1
    4c04:	fd cf       	rjmp	.-6      	; 0x4c00 <eeprom_write_r18+0x8>
    4c06:	dc 01       	movw	r26, r24
    4c08:	a0 50       	subi	r26, 0x00	; 0
    4c0a:	bc 4e       	sbci	r27, 0xEC	; 236
    4c0c:	2c 93       	st	X, r18
    4c0e:	2d e9       	ldi	r18, 0x9D	; 157
    4c10:	24 bf       	out	0x34, r18	; 52
    4c12:	23 e0       	ldi	r18, 0x03	; 3
    4c14:	20 83       	st	Z, r18
    4c16:	01 96       	adiw	r24, 0x01	; 1
    4c18:	bf 91       	pop	r27
    4c1a:	af 91       	pop	r26
    4c1c:	08 95       	ret

00004c1e <eeprom_read_byte>:
    4c1e:	03 d0       	rcall	.+6      	; 0x4c26 <eeprom_mapen>
    4c20:	80 81       	ld	r24, Z
    4c22:	99 27       	eor	r25, r25
    4c24:	08 95       	ret

00004c26 <eeprom_mapen>:
    4c26:	fc 01       	movw	r30, r24
    4c28:	e0 50       	subi	r30, 0x00	; 0
    4c2a:	fc 4e       	sbci	r31, 0xEC	; 236
    4c2c:	08 95       	ret

00004c2e <memcpy>:
    4c2e:	fb 01       	movw	r30, r22
    4c30:	dc 01       	movw	r26, r24
    4c32:	02 c0       	rjmp	.+4      	; 0x4c38 <memcpy+0xa>
    4c34:	01 90       	ld	r0, Z+
    4c36:	0d 92       	st	X+, r0
    4c38:	41 50       	subi	r20, 0x01	; 1
    4c3a:	50 40       	sbci	r21, 0x00	; 0
    4c3c:	d8 f7       	brcc	.-10     	; 0x4c34 <memcpy+0x6>
    4c3e:	08 95       	ret

00004c40 <_exit>:
    4c40:	f8 94       	cli

00004c42 <__stop_program>:
    4c42:	ff cf       	rjmp	.-2      	; 0x4c42 <__stop_program>
