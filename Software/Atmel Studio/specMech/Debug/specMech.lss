
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00007039  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000644c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b59  0000a44c  0000644c  000064e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000a53  00802800  00802800  00007039  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007098  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000650  00000000  00000000  000070d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b226  00000000  00000000  00007728  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004432  00000000  00000000  0001294e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000499c  00000000  00000000  00016d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001354  00000000  00000000  0001b71c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000246f  00000000  00000000  0001ca70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005609  00000000  00000000  0001eedf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000400  00000000  00000000  000244e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 01 	jmp	0x266	; 0x266 <__ctors_end>
       4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       c:	0c 94 6e 25 	jmp	0x4adc	; 0x4adc <__vector_3>
      10:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      14:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      18:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      1c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      20:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      24:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      28:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      2c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      30:	0c 94 a2 25 	jmp	0x4b44	; 0x4b44 <__vector_12>
      34:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      38:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      3c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      40:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      44:	0c 94 d5 27 	jmp	0x4faa	; 0x4faa <__vector_17>
      48:	0c 94 23 28 	jmp	0x5046	; 0x5046 <__vector_18>
      4c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      50:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__vector_20>
      54:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      58:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      5c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      60:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      64:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      68:	0c 94 5f 28 	jmp	0x50be	; 0x50be <__vector_26>
      6c:	0c 94 7f 28 	jmp	0x50fe	; 0x50fe <__vector_27>
      70:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      74:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__vector_29>
      78:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      7c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      80:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      84:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      88:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      8c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      90:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      94:	0c 94 b9 28 	jmp	0x5172	; 0x5172 <__vector_37>
      98:	0c 94 ee 28 	jmp	0x51dc	; 0x51dc <__vector_38>
      9c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      a0:	ac 04       	cpc	r10, r12
      a2:	d3 04       	cpc	r13, r3
      a4:	d3 04       	cpc	r13, r3
      a6:	d3 04       	cpc	r13, r3
      a8:	d3 04       	cpc	r13, r3
      aa:	d3 04       	cpc	r13, r3
      ac:	d3 04       	cpc	r13, r3
      ae:	d3 04       	cpc	r13, r3
      b0:	d3 04       	cpc	r13, r3
      b2:	af 04       	cpc	r10, r15
      b4:	d3 04       	cpc	r13, r3
      b6:	d3 04       	cpc	r13, r3
      b8:	d3 04       	cpc	r13, r3
      ba:	d3 04       	cpc	r13, r3
      bc:	d3 04       	cpc	r13, r3
      be:	d3 04       	cpc	r13, r3
      c0:	d3 04       	cpc	r13, r3
      c2:	d3 04       	cpc	r13, r3
      c4:	d3 04       	cpc	r13, r3
      c6:	d3 04       	cpc	r13, r3
      c8:	d3 04       	cpc	r13, r3
      ca:	d3 04       	cpc	r13, r3
      cc:	d3 04       	cpc	r13, r3
      ce:	d3 04       	cpc	r13, r3
      d0:	d3 04       	cpc	r13, r3
      d2:	d3 04       	cpc	r13, r3
      d4:	9a 04       	cpc	r9, r10
      d6:	d3 04       	cpc	r13, r3
      d8:	d3 04       	cpc	r13, r3
      da:	d3 04       	cpc	r13, r3
      dc:	d3 04       	cpc	r13, r3
      de:	d3 04       	cpc	r13, r3
      e0:	d3 04       	cpc	r13, r3
      e2:	d3 04       	cpc	r13, r3
      e4:	d3 04       	cpc	r13, r3
      e6:	d3 04       	cpc	r13, r3
      e8:	a0 04       	cpc	r10, r0
      ea:	d3 04       	cpc	r13, r3
      ec:	9d 04       	cpc	r9, r13
      ee:	d3 04       	cpc	r13, r3
      f0:	d3 04       	cpc	r13, r3
      f2:	a3 04       	cpc	r10, r3
      f4:	a6 04       	cpc	r10, r6
      f6:	a9 04       	cpc	r10, r9
      f8:	63 10       	cpse	r6, r3
      fa:	63 10       	cpse	r6, r3
      fc:	63 10       	cpse	r6, r3
      fe:	57 16       	cp	r5, r23
     100:	57 16       	cp	r5, r23
     102:	57 16       	cp	r5, r23
     104:	57 16       	cp	r5, r23
     106:	57 16       	cp	r5, r23
     108:	57 16       	cp	r5, r23
     10a:	57 16       	cp	r5, r23
     10c:	57 16       	cp	r5, r23
     10e:	57 16       	cp	r5, r23
     110:	57 16       	cp	r5, r23
     112:	57 16       	cp	r5, r23
     114:	57 16       	cp	r5, r23
     116:	57 16       	cp	r5, r23
     118:	57 16       	cp	r5, r23
     11a:	57 16       	cp	r5, r23
     11c:	57 16       	cp	r5, r23
     11e:	57 16       	cp	r5, r23
     120:	57 16       	cp	r5, r23
     122:	19 16       	cp	r1, r25
     124:	57 16       	cp	r5, r23
     126:	57 16       	cp	r5, r23
     128:	57 16       	cp	r5, r23
     12a:	57 16       	cp	r5, r23
     12c:	57 16       	cp	r5, r23
     12e:	57 16       	cp	r5, r23
     130:	57 16       	cp	r5, r23
     132:	57 16       	cp	r5, r23
     134:	57 16       	cp	r5, r23
     136:	57 16       	cp	r5, r23
     138:	2e 12       	cpse	r2, r30
     13a:	2e 12       	cpse	r2, r30
     13c:	2e 12       	cpse	r2, r30
     13e:	57 16       	cp	r5, r23
     140:	dc 12       	cpse	r13, r28
     142:	57 16       	cp	r5, r23
     144:	57 16       	cp	r5, r23
     146:	57 16       	cp	r5, r23
     148:	57 16       	cp	r5, r23
     14a:	57 16       	cp	r5, r23
     14c:	57 16       	cp	r5, r23
     14e:	57 16       	cp	r5, r23
     150:	57 16       	cp	r5, r23
     152:	57 16       	cp	r5, r23
     154:	19 14       	cp	r1, r9
     156:	ef 14       	cp	r14, r15
     158:	57 16       	cp	r5, r23
     15a:	57 16       	cp	r5, r23
     15c:	57 16       	cp	r5, r23
     15e:	78 15       	cp	r23, r8
     160:	57 16       	cp	r5, r23
     162:	c0 15       	cp	r28, r0

00000164 <__trampolines_end>:
     164:	6e 61       	ori	r22, 0x1E	; 30
     166:	6e 00       	.word	0x006e	; ????

00000168 <__c.2332>:
     168:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     178:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     188:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     198:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1a8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1b8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1c8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1d8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1e8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1f8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     208:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     218:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     228:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     238:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     248:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     258:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf ef       	ldi	r28, 0xFF	; 255
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	df e3       	ldi	r29, 0x3F	; 63
     270:	de bf       	out	0x3e, r29	; 62

00000272 <__do_clear_bss>:
     272:	22 e3       	ldi	r18, 0x32	; 50
     274:	a0 e0       	ldi	r26, 0x00	; 0
     276:	b8 e2       	ldi	r27, 0x28	; 40
     278:	01 c0       	rjmp	.+2      	; 0x27c <.do_clear_bss_start>

0000027a <.do_clear_bss_loop>:
     27a:	1d 92       	st	X+, r1

0000027c <.do_clear_bss_start>:
     27c:	a3 35       	cpi	r26, 0x53	; 83
     27e:	b2 07       	cpc	r27, r18
     280:	e1 f7       	brne	.-8      	; 0x27a <.do_clear_bss_loop>
     282:	0e 94 c3 09 	call	0x1386	; 0x1386 <main>
     286:	0c 94 24 32 	jmp	0x6448	; 0x6448 <_exit>

0000028a <__bad_interrupt>:
     28a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028e <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
uint8_t read_AD590(uint8_t sensor, float *temperature)
{
     28e:	8f 92       	push	r8
     290:	9f 92       	push	r9
     292:	af 92       	push	r10
     294:	bf 92       	push	r11
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <read_AD590+0x16>
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <read_AD590+0x18>
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	7b 01       	movw	r14, r22

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	c9 f0       	breq	.+50     	; 0x2e2 <read_AD590+0x54>
     2b0:	18 f0       	brcs	.+6      	; 0x2b8 <read_AD590+0x2a>
     2b2:	82 30       	cpi	r24, 0x02	; 2
     2b4:	61 f0       	breq	.+24     	; 0x2ce <read_AD590+0x40>
     2b6:	10 c0       	rjmp	.+32     	; 0x2d8 <read_AD590+0x4a>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     2b8:	0f 2e       	mov	r0, r31
     2ba:	f3 e3       	ldi	r31, 0x33	; 51
     2bc:	8f 2e       	mov	r8, r31
     2be:	98 2c       	mov	r9, r8
     2c0:	f3 ef       	ldi	r31, 0xF3	; 243
     2c2:	af 2e       	mov	r10, r31
     2c4:	f0 e4       	ldi	r31, 0x40	; 64
     2c6:	bf 2e       	mov	r11, r31
     2c8:	f0 2d       	mov	r31, r0
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     2ca:	11 e0       	ldi	r17, 0x01	; 1
     2cc:	0e c0       	rjmp	.+28     	; 0x2ea <read_AD590+0x5c>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     2ce:	81 2c       	mov	r8, r1
     2d0:	91 2c       	mov	r9, r1
     2d2:	54 01       	movw	r10, r8
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     2d4:	10 e1       	ldi	r17, 0x10	; 16
			offset = 0.0;
			break;
     2d6:	09 c0       	rjmp	.+18     	; 0x2ea <read_AD590+0x5c>
{

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
     2d8:	81 2c       	mov	r8, r1
     2da:	91 2c       	mov	r9, r1
     2dc:	54 01       	movw	r10, r8
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2de:	10 e0       	ldi	r17, 0x00	; 0
			break;
     2e0:	04 c0       	rjmp	.+8      	; 0x2ea <read_AD590+0x5c>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2e2:	81 2c       	mov	r8, r1
     2e4:	91 2c       	mov	r9, r1
     2e6:	54 01       	movw	r10, r8
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2e8:	14 e0       	ldi	r17, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	66 e0       	ldi	r22, 0x06	; 6
     2ee:	87 e2       	ldi	r24, 0x27	; 39
     2f0:	0e 94 2a 0a 	call	0x1454	; 0x1454 <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2f4:	41 2f       	mov	r20, r17
     2f6:	40 95       	com	r20
     2f8:	60 e0       	ldi	r22, 0x00	; 0
     2fa:	87 e2       	ldi	r24, 0x27	; 39
     2fc:	0e 94 2a 0a 	call	0x1454	; 0x1454 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     300:	41 2f       	mov	r20, r17
     302:	6a e0       	ldi	r22, 0x0A	; 10
     304:	87 e2       	ldi	r24, 0x27	; 39
     306:	0e 94 2a 0a 	call	0x1454	; 0x1454 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30a:	86 e1       	ldi	r24, 0x16	; 22
     30c:	8a 95       	dec	r24
     30e:	f1 f7       	brne	.-4      	; 0x30c <read_AD590+0x7e>
     310:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	if (read_ADS1115(ADC_TE, PGA0512, AIN3, DR128, &voltage) == ERROR) {
     312:	8e 01       	movw	r16, r28
     314:	0f 5f       	subi	r16, 0xFF	; 255
     316:	1f 4f       	sbci	r17, 0xFF	; 255
     318:	20 e8       	ldi	r18, 0x80	; 128
     31a:	40 e7       	ldi	r20, 0x70	; 112
     31c:	68 e0       	ldi	r22, 0x08	; 8
     31e:	88 e4       	ldi	r24, 0x48	; 72
     320:	0e 94 c8 01 	call	0x390	; 0x390 <read_ADS1115>
     324:	83 36       	cpi	r24, 0x63	; 99
     326:	51 f4       	brne	.+20     	; 0x33c <read_AD590+0xae>
		*temperature = BADFLOAT;
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	50 e8       	ldi	r21, 0x80	; 128
     32c:	66 e2       	ldi	r22, 0x26	; 38
     32e:	74 ec       	ldi	r23, 0xC4	; 196
     330:	f7 01       	movw	r30, r14
     332:	40 83       	st	Z, r20
     334:	51 83       	std	Z+1, r21	; 0x01
     336:	62 83       	std	Z+2, r22	; 0x02
     338:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
     33a:	1c c0       	rjmp	.+56     	; 0x374 <read_AD590+0xe6>
	}
	*temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     33c:	20 e0       	ldi	r18, 0x00	; 0
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	4a e7       	ldi	r20, 0x7A	; 122
     342:	54 e4       	ldi	r21, 0x44	; 68
     344:	69 81       	ldd	r22, Y+1	; 0x01
     346:	7a 81       	ldd	r23, Y+2	; 0x02
     348:	8b 81       	ldd	r24, Y+3	; 0x03
     34a:	9c 81       	ldd	r25, Y+4	; 0x04
     34c:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
     350:	23 e3       	ldi	r18, 0x33	; 51
     352:	33 e9       	ldi	r19, 0x93	; 147
     354:	48 e8       	ldi	r20, 0x88	; 136
     356:	53 e4       	ldi	r21, 0x43	; 67
     358:	0e 94 4d 29 	call	0x529a	; 0x529a <__subsf3>
     35c:	9b 01       	movw	r18, r22
     35e:	ac 01       	movw	r20, r24
     360:	c5 01       	movw	r24, r10
     362:	b4 01       	movw	r22, r8
     364:	0e 94 4e 29 	call	0x529c	; 0x529c <__addsf3>
     368:	f7 01       	movw	r30, r14
     36a:	60 83       	st	Z, r22
     36c:	71 83       	std	Z+1, r23	; 0x01
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     372:	80 e0       	ldi	r24, 0x00	; 0

}
     374:	24 96       	adiw	r28, 0x04	; 4
     376:	cd bf       	out	0x3d, r28	; 61
     378:	de bf       	out	0x3e, r29	; 62
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	bf 90       	pop	r11
     388:	af 90       	pop	r10
     38a:	9f 90       	pop	r9
     38c:	8f 90       	pop	r8
     38e:	08 95       	ret

00000390 <read_ADS1115>:
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
uint8_t read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins,
	uint8_t datarate, float *voltage)
{
     390:	8f 92       	push	r8
     392:	9f 92       	push	r9
     394:	af 92       	push	r10
     396:	bf 92       	push	r11
     398:	cf 92       	push	r12
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	f8 2e       	mov	r15, r24
     3aa:	e6 2e       	mov	r14, r22
     3ac:	68 01       	movw	r12, r16
	float scale;
	uint8_t confighi, configlo, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     3ae:	46 2b       	or	r20, r22
     3b0:	c4 2f       	mov	r28, r20
     3b2:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     3b4:	d2 2f       	mov	r29, r18
     3b6:	d3 60       	ori	r29, 0x03	; 3

	*voltage = BADFLOAT;
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e8       	ldi	r25, 0x80	; 128
     3bc:	a6 e2       	ldi	r26, 0x26	; 38
     3be:	b4 ec       	ldi	r27, 0xC4	; 196
     3c0:	f8 01       	movw	r30, r16
     3c2:	80 83       	st	Z, r24
     3c4:	91 83       	std	Z+1, r25	; 0x01
     3c6:	a2 83       	std	Z+2, r26	; 0x02
     3c8:	b3 83       	std	Z+3, r27	; 0x03
	if (start_TWI(addr, TWIWRITE == ERROR)) {		// TWI start condition
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	8f 2d       	mov	r24, r15
     3ce:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
     3d2:	08 2f       	mov	r16, r24
     3d4:	88 23       	and	r24, r24
     3d6:	21 f0       	breq	.+8      	; 0x3e0 <read_ADS1115+0x50>
		stop_TWI();
     3d8:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(ERROR);
     3dc:	13 e6       	ldi	r17, 0x63	; 99
     3de:	b4 c0       	rjmp	.+360    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	if ((write_TWI(ADS1115CONFIG) == ERROR)) {		// Write the CONFIG register
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
     3e6:	18 2f       	mov	r17, r24
     3e8:	83 36       	cpi	r24, 0x63	; 99
     3ea:	19 f4       	brne	.+6      	; 0x3f2 <read_ADS1115+0x62>
		stop_TWI();
     3ec:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(ERROR);
     3f0:	ab c0       	rjmp	.+342    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	if ((write_TWI(confighi) == ERROR)) {			// Write high byte
     3f2:	8c 2f       	mov	r24, r28
     3f4:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
     3f8:	18 2f       	mov	r17, r24
     3fa:	83 36       	cpi	r24, 0x63	; 99
     3fc:	19 f4       	brne	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		stop_TWI();
     3fe:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(ERROR);
     402:	a2 c0       	rjmp	.+324    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	if ((write_TWI(configlo) == ERROR)) {			// Write low byte
     404:	8d 2f       	mov	r24, r29
     406:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
     40a:	18 2f       	mov	r17, r24
     40c:	83 36       	cpi	r24, 0x63	; 99
     40e:	19 f4       	brne	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		stop_TWI();
     410:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(ERROR);
     414:	99 c0       	rjmp	.+306    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	stop_TWI();
     416:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
     41a:	fc e1       	ldi	r31, 0x1C	; 28
     41c:	fa 95       	dec	r31
     41e:	f1 f7       	brne	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>

	_delay_us(25);									// Power-up time

	converting = YES;
     420:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     422:	09 c0       	rjmp	.+18     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		start_TWI(addr, TWIREAD);
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	8f 2d       	mov	r24, r15
     428:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
		flag = readlast_TWI();
     42c:	0e 94 04 26 	call	0x4c08	; 0x4c08 <readlast_TWI>
		if (flag & 0b10000000) {
     430:	88 23       	and	r24, r24
     432:	0c f4       	brge	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			converting = NO;
     434:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     436:	c1 11       	cpse	r28, r1
     438:	f5 cf       	rjmp	.-22     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		flag = readlast_TWI();
		if (flag & 0b10000000) {
			converting = NO;
		}
	}
	stop_TWI();
     43a:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>

	start_TWI(addr, TWIWRITE);
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	8f 2d       	mov	r24, r15
     442:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	8f 2d       	mov	r24, r15
     450:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
	highbyte = read_TWI();
     454:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <read_TWI>
     458:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     45a:	0e 94 04 26 	call	0x4c08	; 0x4c08 <readlast_TWI>
     45e:	d8 2f       	mov	r29, r24
	stop_TWI();
     460:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>

	value = highbyte;
     464:	6c 2f       	mov	r22, r28
     466:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     468:	76 2f       	mov	r23, r22
     46a:	66 27       	eor	r22, r22
	value |= lowbyte;
     46c:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     46e:	84 e0       	ldi	r24, 0x04	; 4
     470:	e8 16       	cp	r14, r24
     472:	49 f1       	breq	.+82     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     474:	8e 15       	cp	r24, r14
     476:	30 f0       	brcs	.+12     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     478:	ee 20       	and	r14, r14
     47a:	d9 f1       	breq	.+118    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     47c:	e2 e0       	ldi	r30, 0x02	; 2
     47e:	ee 16       	cp	r14, r30
     480:	69 f1       	breq	.+90     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     482:	42 c0       	rjmp	.+132    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     484:	f8 e0       	ldi	r31, 0x08	; 8
     486:	ef 16       	cp	r14, r31
     488:	09 f4       	brne	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     48a:	42 c0       	rjmp	.+132    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     48c:	8a e0       	ldi	r24, 0x0A	; 10
     48e:	e8 16       	cp	r14, r24
     490:	21 f0       	breq	.+8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     492:	e6 e0       	ldi	r30, 0x06	; 6
     494:	ee 12       	cpse	r14, r30
     496:	38 c0       	rjmp	.+112    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     498:	0b c0       	rjmp	.+22     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		case PGA0256:
			scale = SCA0256;
     49a:	0f 2e       	mov	r0, r31
     49c:	f4 e7       	ldi	r31, 0x74	; 116
     49e:	8f 2e       	mov	r8, r31
     4a0:	f3 e1       	ldi	r31, 0x13	; 19
     4a2:	9f 2e       	mov	r9, r31
     4a4:	f3 e0       	ldi	r31, 0x03	; 3
     4a6:	af 2e       	mov	r10, r31
     4a8:	f7 e3       	ldi	r31, 0x37	; 55
     4aa:	bf 2e       	mov	r11, r31
     4ac:	f0 2d       	mov	r31, r0
     4ae:	3a c0       	rjmp	.+116    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     4b0:	0f 2e       	mov	r0, r31
     4b2:	f4 e7       	ldi	r31, 0x74	; 116
     4b4:	8f 2e       	mov	r8, r31
     4b6:	f3 e1       	ldi	r31, 0x13	; 19
     4b8:	9f 2e       	mov	r9, r31
     4ba:	f3 e0       	ldi	r31, 0x03	; 3
     4bc:	af 2e       	mov	r10, r31
     4be:	f8 e3       	ldi	r31, 0x38	; 56
     4c0:	bf 2e       	mov	r11, r31
     4c2:	f0 2d       	mov	r31, r0
			break;
     4c4:	2f c0       	rjmp	.+94     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		case PGA2048:
			scale = SCA2048;
     4c6:	0f 2e       	mov	r0, r31
     4c8:	f2 e1       	ldi	r31, 0x12	; 18
     4ca:	8f 2e       	mov	r8, r31
     4cc:	f3 e1       	ldi	r31, 0x13	; 19
     4ce:	9f 2e       	mov	r9, r31
     4d0:	f3 e8       	ldi	r31, 0x83	; 131
     4d2:	af 2e       	mov	r10, r31
     4d4:	f8 e3       	ldi	r31, 0x38	; 56
     4d6:	bf 2e       	mov	r11, r31
     4d8:	f0 2d       	mov	r31, r0
			break;
     4da:	24 c0       	rjmp	.+72     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		case PGA4096:
			scale = SCA4096;
     4dc:	0f 2e       	mov	r0, r31
     4de:	f4 e7       	ldi	r31, 0x74	; 116
     4e0:	8f 2e       	mov	r8, r31
     4e2:	f3 e1       	ldi	r31, 0x13	; 19
     4e4:	9f 2e       	mov	r9, r31
     4e6:	f3 e0       	ldi	r31, 0x03	; 3
     4e8:	af 2e       	mov	r10, r31
     4ea:	f9 e3       	ldi	r31, 0x39	; 57
     4ec:	bf 2e       	mov	r11, r31
     4ee:	f0 2d       	mov	r31, r0
			break;
     4f0:	19 c0       	rjmp	.+50     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		case PGA6144:
			scale = SCA6144;
     4f2:	0f 2e       	mov	r0, r31
     4f4:	fe e2       	ldi	r31, 0x2E	; 46
     4f6:	8f 2e       	mov	r8, r31
     4f8:	fd e9       	ldi	r31, 0x9D	; 157
     4fa:	9f 2e       	mov	r9, r31
     4fc:	f4 e4       	ldi	r31, 0x44	; 68
     4fe:	af 2e       	mov	r10, r31
     500:	f9 e3       	ldi	r31, 0x39	; 57
     502:	bf 2e       	mov	r11, r31
     504:	f0 2d       	mov	r31, r0
			break;
     506:	0e c0       	rjmp	.+28     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		default:
			scale = 0.0;
     508:	81 2c       	mov	r8, r1
     50a:	91 2c       	mov	r9, r1
     50c:	54 01       	movw	r10, r8
			break;
     50e:	0a c0       	rjmp	.+20     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     510:	0f 2e       	mov	r0, r31
     512:	f1 e7       	ldi	r31, 0x71	; 113
     514:	8f 2e       	mov	r8, r31
     516:	f3 e1       	ldi	r31, 0x13	; 19
     518:	9f 2e       	mov	r9, r31
     51a:	f3 e8       	ldi	r31, 0x83	; 131
     51c:	af 2e       	mov	r10, r31
     51e:	f7 e3       	ldi	r31, 0x37	; 55
     520:	bf 2e       	mov	r11, r31
     522:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	*voltage = scale * (float) value;
     524:	07 2e       	mov	r0, r23
     526:	00 0c       	add	r0, r0
     528:	88 0b       	sbc	r24, r24
     52a:	99 0b       	sbc	r25, r25
     52c:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <__floatsisf>
     530:	9b 01       	movw	r18, r22
     532:	ac 01       	movw	r20, r24
     534:	c5 01       	movw	r24, r10
     536:	b4 01       	movw	r22, r8
     538:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
     53c:	f6 01       	movw	r30, r12
     53e:	60 83       	st	Z, r22
     540:	71 83       	std	Z+1, r23	; 0x01
     542:	82 83       	std	Z+2, r24	; 0x02
     544:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     546:	10 2f       	mov	r17, r16

}
     548:	81 2f       	mov	r24, r17
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	ff 90       	pop	r15
     554:	ef 90       	pop	r14
     556:	df 90       	pop	r13
     558:	cf 90       	pop	r12
     55a:	bf 90       	pop	r11
     55c:	af 90       	pop	r10
     55e:	9f 90       	pop	r9
     560:	8f 90       	pop	r8
     562:	08 95       	ret

00000564 <get_cmdline>:
	if ((d >= '0') && (d <= '9')) {
		return(ERROR);
	}
	return(NOERROR);

}
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	9c 01       	movw	r18, r24
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	1c c0       	rjmp	.+56     	; 0x5a6 <get_cmdline+0x42>
     56e:	ce e3       	ldi	r28, 0x3E	; 62
     570:	de e2       	ldi	r29, 0x2E	; 46
     572:	e8 81       	ld	r30, Y
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	e1 5c       	subi	r30, 0xC1	; 193
     578:	f2 4d       	sbci	r31, 0xD2	; 210
     57a:	80 81       	ld	r24, Z
     57c:	f9 01       	movw	r30, r18
     57e:	e4 0f       	add	r30, r20
     580:	f1 1d       	adc	r31, r1
     582:	80 83       	st	Z, r24
     584:	a0 e4       	ldi	r26, 0x40	; 64
     586:	be e2       	ldi	r27, 0x2E	; 46
     588:	8c 91       	ld	r24, X
     58a:	81 50       	subi	r24, 0x01	; 1
     58c:	8c 93       	st	X, r24
     58e:	88 81       	ld	r24, Y
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	6e ef       	ldi	r22, 0xFE	; 254
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__divmodhi4>
     59c:	88 83       	st	Y, r24
     59e:	80 81       	ld	r24, Z
     5a0:	88 23       	and	r24, r24
     5a2:	29 f0       	breq	.+10     	; 0x5ae <get_cmdline+0x4a>
     5a4:	4f 5f       	subi	r20, 0xFF	; 255
     5a6:	80 91 40 2e 	lds	r24, 0x2E40	; 0x802e40 <recv0_buf+0x101>
     5aa:	81 11       	cpse	r24, r1
     5ac:	e0 cf       	rjmp	.-64     	; 0x56e <get_cmdline+0xa>
     5ae:	f9 01       	movw	r30, r18
     5b0:	e4 0f       	add	r30, r20
     5b2:	f1 1d       	adc	r31, r1
     5b4:	10 82       	st	Z, r1
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	08 95       	ret

000005bc <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     5bc:	9f e9       	ldi	r25, 0x9F	; 159
     5be:	98 0f       	add	r25, r24
     5c0:	9a 31       	cpi	r25, 0x1A	; 26
     5c2:	28 f0       	brcs	.+10     	; 0x5ce <isaletter+0x12>
     5c4:	81 54       	subi	r24, 0x41	; 65
     5c6:	8a 31       	cpi	r24, 0x1A	; 26
     5c8:	20 f4       	brcc	.+8      	; 0x5d2 <isaletter+0x16>
		return(ERROR);
     5ca:	83 e6       	ldi	r24, 0x63	; 99
     5cc:	08 95       	ret
     5ce:	83 e6       	ldi	r24, 0x63	; 99
     5d0:	08 95       	ret
	}
	return(NOERROR);
     5d2:	80 e0       	ldi	r24, 0x00	; 0

}
     5d4:	08 95       	ret

000005d6 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     5e2:	e6 2e       	mov	r14, r22
     5e4:	f1 2c       	mov	r15, r1
     5e6:	84 e3       	ldi	r24, 0x34	; 52
     5e8:	8e 9d       	mul	r24, r14
     5ea:	f0 01       	movw	r30, r0
     5ec:	8f 9d       	mul	r24, r15
     5ee:	f0 0d       	add	r31, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	e3 5f       	subi	r30, 0xF3	; 243
     5f4:	f7 4d       	sbci	r31, 0xD7	; 215
     5f6:	8f e3       	ldi	r24, 0x3F	; 63
     5f8:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     5fa:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     5fc:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     5fe:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     600:	04 c0       	rjmp	.+8      	; 0x60a <parse_cmd+0x34>
		if (*ptr == '\0') {
     602:	11 23       	and	r17, r17
     604:	09 f4       	brne	.+2      	; 0x608 <parse_cmd+0x32>
     606:	75 c0       	rjmp	.+234    	; 0x6f2 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     608:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     60a:	18 81       	ld	r17, Y
     60c:	81 2f       	mov	r24, r17
     60e:	0e 94 de 02 	call	0x5bc	; 0x5bc <isaletter>
     612:	88 23       	and	r24, r24
     614:	b1 f3       	breq	.-20     	; 0x602 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     616:	21 96       	adiw	r28, 0x01	; 1
     618:	84 e3       	ldi	r24, 0x34	; 52
     61a:	8e 9d       	mul	r24, r14
     61c:	f0 01       	movw	r30, r0
     61e:	8f 9d       	mul	r24, r15
     620:	f0 0d       	add	r31, r0
     622:	11 24       	eor	r1, r1
     624:	e3 5f       	subi	r30, 0xF3	; 243
     626:	f7 4d       	sbci	r31, 0xD7	; 215
     628:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     62a:	04 c0       	rjmp	.+8      	; 0x634 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     62c:	11 23       	and	r17, r17
     62e:	09 f4       	brne	.+2      	; 0x632 <parse_cmd+0x5c>
     630:	60 c0       	rjmp	.+192    	; 0x6f2 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     632:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     634:	18 81       	ld	r17, Y
     636:	81 2f       	mov	r24, r17
     638:	0e 94 de 02 	call	0x5bc	; 0x5bc <isaletter>
     63c:	88 23       	and	r24, r24
     63e:	b1 f3       	breq	.-20     	; 0x62c <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     640:	21 96       	adiw	r28, 0x01	; 1
     642:	84 e3       	ldi	r24, 0x34	; 52
     644:	8e 9d       	mul	r24, r14
     646:	f0 01       	movw	r30, r0
     648:	8f 9d       	mul	r24, r15
     64a:	f0 0d       	add	r31, r0
     64c:	11 24       	eor	r1, r1
     64e:	e3 5f       	subi	r30, 0xF3	; 243
     650:	f7 4d       	sbci	r31, 0xD7	; 215
     652:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	2a c0       	rjmp	.+84     	; 0x6ac <parse_cmd+0xd6>
		if (*ptr == '\0') {
     658:	98 81       	ld	r25, Y
     65a:	91 11       	cpse	r25, r1
     65c:	0c c0       	rjmp	.+24     	; 0x676 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     65e:	94 e3       	ldi	r25, 0x34	; 52
     660:	9e 9d       	mul	r25, r14
     662:	f0 01       	movw	r30, r0
     664:	9f 9d       	mul	r25, r15
     666:	f0 0d       	add	r31, r0
     668:	11 24       	eor	r1, r1
     66a:	e3 5f       	subi	r30, 0xF3	; 243
     66c:	f7 4d       	sbci	r31, 0xD7	; 215
     66e:	e8 0f       	add	r30, r24
     670:	f1 1d       	adc	r31, r1
     672:	12 82       	std	Z+2, r1	; 0x02
			return;
     674:	3e c0       	rjmp	.+124    	; 0x6f2 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {			// Command ID separator
     676:	9b 33       	cpi	r25, 0x3B	; 59
     678:	61 f4       	brne	.+24     	; 0x692 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     67a:	94 e3       	ldi	r25, 0x34	; 52
     67c:	9e 9d       	mul	r25, r14
     67e:	f0 01       	movw	r30, r0
     680:	9f 9d       	mul	r25, r15
     682:	f0 0d       	add	r31, r0
     684:	11 24       	eor	r1, r1
     686:	e3 5f       	subi	r30, 0xF3	; 243
     688:	f7 4d       	sbci	r31, 0xD7	; 215
     68a:	e8 0f       	add	r30, r24
     68c:	f1 1d       	adc	r31, r1
     68e:	12 82       	std	Z+2, r1	; 0x02
			break;
     690:	0f c0       	rjmp	.+30     	; 0x6b0 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     692:	21 96       	adiw	r28, 0x01	; 1
     694:	24 e3       	ldi	r18, 0x34	; 52
     696:	2e 9d       	mul	r18, r14
     698:	f0 01       	movw	r30, r0
     69a:	2f 9d       	mul	r18, r15
     69c:	f0 0d       	add	r31, r0
     69e:	11 24       	eor	r1, r1
     6a0:	e3 5f       	subi	r30, 0xF3	; 243
     6a2:	f7 4d       	sbci	r31, 0xD7	; 215
     6a4:	e8 0f       	add	r30, r24
     6a6:	f1 1d       	adc	r31, r1
     6a8:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6aa:	8f 5f       	subi	r24, 0xFF	; 255
     6ac:	89 32       	cpi	r24, 0x29	; 41
     6ae:	a0 f2       	brcs	.-88     	; 0x658 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
     6b0:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	1c c0       	rjmp	.+56     	; 0x6ee <parse_cmd+0x118>
		if (*ptr == '\0') {
     6b6:	98 81       	ld	r25, Y
     6b8:	91 11       	cpse	r25, r1
     6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     6bc:	94 e3       	ldi	r25, 0x34	; 52
     6be:	9e 9d       	mul	r25, r14
     6c0:	f0 01       	movw	r30, r0
     6c2:	9f 9d       	mul	r25, r15
     6c4:	f0 0d       	add	r31, r0
     6c6:	11 24       	eor	r1, r1
     6c8:	e3 5f       	subi	r30, 0xF3	; 243
     6ca:	f7 4d       	sbci	r31, 0xD7	; 215
     6cc:	e8 0f       	add	r30, r24
     6ce:	f1 1d       	adc	r31, r1
     6d0:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     6d2:	0f c0       	rjmp	.+30     	; 0x6f2 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     6d4:	21 96       	adiw	r28, 0x01	; 1
     6d6:	24 e3       	ldi	r18, 0x34	; 52
     6d8:	2e 9d       	mul	r18, r14
     6da:	f0 01       	movw	r30, r0
     6dc:	2f 9d       	mul	r18, r15
     6de:	f0 0d       	add	r31, r0
     6e0:	11 24       	eor	r1, r1
     6e2:	e3 5f       	subi	r30, 0xF3	; 243
     6e4:	f7 4d       	sbci	r31, 0xD7	; 215
     6e6:	e8 0f       	add	r30, r24
     6e8:	f1 1d       	adc	r31, r1
     6ea:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     6ec:	8f 5f       	subi	r24, 0xFF	; 255
     6ee:	89 30       	cpi	r24, 0x09	; 9
     6f0:	10 f3       	brcs	.-60     	; 0x6b6 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	08 95       	ret

000006fe <printLine>:
		been run and the system has received a reboot acknowledge (the !). This
		is done to prevent unsolicited text being sent (error messages) at
		initialization or after a reboot.
------------------------------------------------------------------------------*/
void printLine(char *str)
{
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	c5 50       	subi	r28, 0x05	; 5
     70c:	d1 40       	sbci	r29, 0x01	; 1
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char prFormat[] = "$S%d%s";
     712:	27 e0       	ldi	r18, 0x07	; 7
     714:	e2 e5       	ldi	r30, 0x52	; 82
     716:	f4 ea       	ldi	r31, 0xA4	; 164
     718:	de 01       	movw	r26, r28
     71a:	a1 50       	subi	r26, 0x01	; 1
     71c:	bf 4f       	sbci	r27, 0xFF	; 255
     71e:	01 90       	ld	r0, Z+
     720:	0d 92       	st	X+, r0
     722:	2a 95       	dec	r18
     724:	e1 f7       	brne	.-8      	; 0x71e <printLine+0x20>

	if (firstpass) {
     726:	20 91 15 2a 	lds	r18, 0x2A15	; 0x802a15 <firstpass>
     72a:	21 11       	cpse	r18, r1
     72c:	2a c0       	rjmp	.+84     	; 0x782 <printLine+0x84>
		return;
	}

	sprintf(strbuf, prFormat, get_SPECID, str);
     72e:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     732:	22 ff       	sbrs	r18, 2
     734:	03 c0       	rjmp	.+6      	; 0x73c <printLine+0x3e>
     736:	22 e0       	ldi	r18, 0x02	; 2
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	02 c0       	rjmp	.+4      	; 0x740 <printLine+0x42>
     73c:	21 e0       	ldi	r18, 0x01	; 1
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	9f 93       	push	r25
     742:	8f 93       	push	r24
     744:	3f 93       	push	r19
     746:	2f 93       	push	r18
     748:	ce 01       	movw	r24, r28
     74a:	81 50       	subi	r24, 0x01	; 1
     74c:	9f 4f       	sbci	r25, 0xFF	; 255
     74e:	9f 93       	push	r25
     750:	8f 93       	push	r24
     752:	8e 01       	movw	r16, r28
     754:	0f 5f       	subi	r16, 0xFF	; 255
     756:	1f 4f       	sbci	r17, 0xFF	; 255
     758:	1f 93       	push	r17
     75a:	0f 93       	push	r16
     75c:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
	checksum_NMEA(strbuf);
     760:	c8 01       	movw	r24, r16
     762:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     766:	f8 01       	movw	r30, r16
     768:	01 90       	ld	r0, Z+
     76a:	00 20       	and	r0, r0
     76c:	e9 f7       	brne	.-6      	; 0x768 <printLine+0x6a>
     76e:	31 97       	sbiw	r30, 0x01	; 1
     770:	af 01       	movw	r20, r30
     772:	40 1b       	sub	r20, r16
     774:	51 0b       	sbc	r21, r17
     776:	b8 01       	movw	r22, r16
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <send_USART>
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	de bf       	out	0x3e, r29	; 62

}
     782:	cb 5f       	subi	r28, 0xFB	; 251
     784:	de 4f       	sbci	r29, 0xFE	; 254
     786:	cd bf       	out	0x3d, r28	; 61
     788:	de bf       	out	0x3e, r29	; 62
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	08 95       	ret

00000794 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     794:	cf 92       	push	r12
     796:	df 92       	push	r13
     798:	ef 92       	push	r14
     79a:	ff 92       	push	r15
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	cc 51       	subi	r28, 0x1C	; 28
     7aa:	d1 40       	sbci	r29, 0x01	; 1
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	d8 2e       	mov	r13, r24
     7b2:	c9 2e       	mov	r12, r25

	const char format_CMD[] = "CMD,%s,%s";
     7b4:	8a e0       	ldi	r24, 0x0A	; 10
     7b6:	e9 e5       	ldi	r30, 0x59	; 89
     7b8:	f4 ea       	ldi	r31, 0xA4	; 164
     7ba:	9e 01       	movw	r18, r28
     7bc:	2f 5f       	subi	r18, 0xFF	; 255
     7be:	3f 4f       	sbci	r19, 0xFF	; 255
     7c0:	79 01       	movw	r14, r18
     7c2:	d9 01       	movw	r26, r18
     7c4:	01 90       	ld	r0, Z+
     7c6:	0d 92       	st	X+, r0
     7c8:	8a 95       	dec	r24
     7ca:	e1 f7       	brne	.-8      	; 0x7c4 <echo_cmd+0x30>
	char currenttime[20], strbuf[BUFSIZE];

	get_time(currenttime);
     7cc:	8e 01       	movw	r16, r28
     7ce:	05 5f       	subi	r16, 0xF5	; 245
     7d0:	1f 4f       	sbci	r17, 0xFF	; 255
     7d2:	c8 01       	movw	r24, r16
     7d4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
	sprintf(strbuf, format_CMD, currenttime, cmdline);
     7d8:	cf 92       	push	r12
     7da:	df 92       	push	r13
     7dc:	1f 93       	push	r17
     7de:	0f 93       	push	r16
     7e0:	ff 92       	push	r15
     7e2:	ef 92       	push	r14
     7e4:	0c 5e       	subi	r16, 0xEC	; 236
     7e6:	1f 4f       	sbci	r17, 0xFF	; 255
     7e8:	1f 93       	push	r17
     7ea:	0f 93       	push	r16
     7ec:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
	printLine(strbuf);
     7f0:	c8 01       	movw	r24, r16
     7f2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

}
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	c4 5e       	subi	r28, 0xE4	; 228
     7fc:	de 4f       	sbci	r29, 0xFE	; 254
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	de bf       	out	0x3e, r29	; 62
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	df 90       	pop	r13
     810:	cf 90       	pop	r12
     812:	08 95       	ret

00000814 <send_EXprompt>:
/*------------------------------------------------------------------------------
void send_EXprompt(void)
	Sends an exclamation mark on USART port 0
------------------------------------------------------------------------------*/
void send_EXprompt(void)
{
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	00 d0       	rcall	.+0      	; 0x81a <send_EXprompt+0x6>
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62

	const char str[] = "!";
     81e:	81 e2       	ldi	r24, 0x21	; 33
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	89 83       	std	Y+1, r24	; 0x01
     824:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     826:	41 e0       	ldi	r20, 0x01	; 1
     828:	be 01       	movw	r22, r28
     82a:	6f 5f       	subi	r22, 0xFF	; 255
     82c:	7f 4f       	sbci	r23, 0xFF	; 255
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <send_USART>

}
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <rebootACKd>:
	Returns:
		YES if the reboot acknowledge string was received
		NO if it wasn't
------------------------------------------------------------------------------*/
uint8_t rebootACKd(char *cmdline)
{
     83e:	cf 93       	push	r28

	if (!rebootackd) {
     840:	c0 91 0c 28 	lds	r28, 0x280C	; 0x80280c <rebootackd>
     844:	c1 11       	cpse	r28, r1
     846:	21 c0       	rjmp	.+66     	; 0x88a <rebootACKd+0x4c>
     848:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     84a:	80 81       	ld	r24, Z
     84c:	81 32       	cpi	r24, 0x21	; 33
     84e:	91 f4       	brne	.+36     	; 0x874 <rebootACKd+0x36>
     850:	91 81       	ldd	r25, Z+1	; 0x01
     852:	91 11       	cpse	r25, r1
     854:	0f c0       	rjmp	.+30     	; 0x874 <rebootACKd+0x36>
			init_RTC(511);		// 1-sec RTC clock ticks
     856:	8f ef       	ldi	r24, 0xFF	; 255
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	0e 94 40 25 	call	0x4a80	; 0x4a80 <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     85e:	85 e0       	ldi	r24, 0x05	; 5
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
     866:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>
			rebootackd = YES;
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	80 93 0c 28 	sts	0x280C, r24	; 0x80280c <rebootackd>
			return(YES);
     870:	c1 e0       	ldi	r28, 0x01	; 1
     872:	0c c0       	rjmp	.+24     	; 0x88c <rebootACKd+0x4e>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     874:	81 32       	cpi	r24, 0x21	; 33
     876:	31 f4       	brne	.+12     	; 0x884 <rebootACKd+0x46>
     878:	81 81       	ldd	r24, Z+1	; 0x01
     87a:	88 23       	and	r24, r24
     87c:	19 f0       	breq	.+6      	; 0x884 <rebootACKd+0x46>
			reboot();
     87e:	0e 94 1c 29 	call	0x5238	; 0x5238 <reboot>
			return(NO);
     882:	04 c0       	rjmp	.+8      	; 0x88c <rebootACKd+0x4e>
		} else {
			send_EXprompt();
     884:	0e 94 0a 04 	call	0x814	; 0x814 <send_EXprompt>
//			send_prompt('!');
			return(NO);
     888:	01 c0       	rjmp	.+2      	; 0x88c <rebootACKd+0x4e>
		}
	}

	return(YES);
     88a:	c1 e0       	ldi	r28, 0x01	; 1

}
     88c:	8c 2f       	mov	r24, r28
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <send_GTprompt>:
/*------------------------------------------------------------------------------
void send_GTprompt(void)
	Sends a greater than (>) on USART port 0
------------------------------------------------------------------------------*/
void send_GTprompt(void)
{
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	00 d0       	rcall	.+0      	; 0x898 <send_GTprompt+0x6>
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62

	const char str[] = ">";
     89c:	8e e3       	ldi	r24, 0x3E	; 62
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	89 83       	std	Y+1, r24	; 0x01
     8a2:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     8a4:	41 e0       	ldi	r20, 0x01	; 1
     8a6:	be 01       	movw	r22, r28
     8a8:	6f 5f       	subi	r22, 0xFF	; 255
     8aa:	7f 4f       	sbci	r23, 0xFF	; 255
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <send_USART>

}
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	cf 5f       	subi	r28, 0xFF	; 255
     8c6:	d1 09       	sbc	r29, r1
     8c8:	cd bf       	out	0x3d, r28	; 61
     8ca:	de bf       	out	0x3e, r29	; 62

	char cmdline[BUFSIZE+1];		// BUFSIZE is the size of the ring buffer
	static uint8_t cstack = 0;		// pcmd index

	get_cmdline(cmdline);
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 b2 02 	call	0x564	; 0x564 <get_cmdline>

	if (!rebootACKd(cmdline)) {		// Reboot not yet acknowledged
     8d4:	ce 01       	movw	r24, r28
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	0e 94 1f 04 	call	0x83e	; 0x83e <rebootACKd>
     8dc:	88 23       	and	r24, r24
     8de:	09 f4       	brne	.+2      	; 0x8e2 <commands+0x26>
     8e0:	74 c0       	rjmp	.+232    	; 0x9ca <commands+0x10e>
		return;
	}

		// <CR> or ! alone are not errors
	if ((cmdline[0] == '\0') || (cmdline[0] == '!')) {
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	88 23       	and	r24, r24
     8e6:	11 f0       	breq	.+4      	; 0x8ec <commands+0x30>
     8e8:	81 32       	cpi	r24, 0x21	; 33
     8ea:	29 f4       	brne	.+10     	; 0x8f6 <commands+0x3a>
		firstpass = NO;
     8ec:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <firstpass>
		send_GTprompt();
     8f0:	0e 94 49 04 	call	0x892	; 0x892 <send_GTprompt>
		return;
     8f4:	6a c0       	rjmp	.+212    	; 0x9ca <commands+0x10e>
	}

	echo_cmd(cmdline);
     8f6:	ce 01       	movw	r24, r28
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	0e 94 ca 03 	call	0x794	; 0x794 <echo_cmd>
	parse_cmd(cmdline, cstack);
     8fe:	60 91 00 28 	lds	r22, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     902:	ce 01       	movw	r24, r28
     904:	01 96       	adiw	r24, 0x01	; 1
     906:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <parse_cmd>

	switch (pcmd[cstack].cverb) {
     90a:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     90e:	24 e3       	ldi	r18, 0x34	; 52
     910:	82 9f       	mul	r24, r18
     912:	f0 01       	movw	r30, r0
     914:	11 24       	eor	r1, r1
     916:	e3 5f       	subi	r30, 0xF3	; 243
     918:	f7 4d       	sbci	r31, 0xD7	; 215
     91a:	e0 81       	ld	r30, Z
     91c:	4e 2f       	mov	r20, r30
     91e:	50 e0       	ldi	r21, 0x00	; 0
     920:	fa 01       	movw	r30, r20
     922:	e9 54       	subi	r30, 0x49	; 73
     924:	f1 09       	sbc	r31, r1
     926:	ec 32       	cpi	r30, 0x2C	; 44
     928:	f1 05       	cpc	r31, r1
     92a:	e8 f5       	brcc	.+122    	; 0x9a6 <commands+0xea>
     92c:	e0 5b       	subi	r30, 0xB0	; 176
     92e:	ff 4f       	sbci	r31, 0xFF	; 255
     930:	0c 94 3b 2f 	jmp	0x5e76	; 0x5e76 <__tablejump2__>
		case 'c':				// close
			close_PNEU(cstack);
     934:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <close_PNEU>
			break;
     938:	3c c0       	rjmp	.+120    	; 0x9b2 <commands+0xf6>

		case 'o':				// open
			open_PNEU(cstack);
     93a:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <open_PNEU>
			break;
     93e:	39 c0       	rjmp	.+114    	; 0x9b2 <commands+0xf6>

		case 'm':				// move
			move_MOTOR_CMD(cstack);
     940:	0e 94 2b 24 	call	0x4856	; 0x4856 <move_MOTOR_CMD>
			break;
     944:	36 c0       	rjmp	.+108    	; 0x9b2 <commands+0xf6>

		case 'r':				// report
			report(cstack);
     946:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <report>
			break;
     94a:	33 c0       	rjmp	.+102    	; 0x9b2 <commands+0xf6>

		case 's':				// set
			set(cstack);
     94c:	0e 94 b6 24 	call	0x496c	; 0x496c <set>
			break;
     950:	30 c0       	rjmp	.+96     	; 0x9b2 <commands+0xf6>

		case 't':
			testroutine();
     952:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <testroutine>
			break;
     956:	2d c0       	rjmp	.+90     	; 0x9b2 <commands+0xf6>

		case 'I':	// test init_MOTORS
			init_MOTORS();
     958:	0e 94 51 23 	call	0x46a2	; 0x46a2 <init_MOTORS>
			break;
     95c:	2a c0       	rjmp	.+84     	; 0x9b2 <commands+0xf6>

		case 'R':				// Reboot
			if (motorsMoving()) {
     95e:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <motorsMoving>
     962:	88 23       	and	r24, r24
     964:	39 f0       	breq	.+14     	; 0x974 <commands+0xb8>
				printError(ERR_MTR, "commands: Can't reboot, motor moving");
     966:	63 e6       	ldi	r22, 0x63	; 99
     968:	74 ea       	ldi	r23, 0xA4	; 164
     96a:	86 e3       	ldi	r24, 0x36	; 54
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				break;
     972:	1f c0       	rjmp	.+62     	; 0x9b2 <commands+0xf6>
			} else {
				if (put_FRAM_ENCODERS() == ERROR) {
     974:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <put_FRAM_ENCODERS>
     978:	83 36       	cpi	r24, 0x63	; 99
     97a:	31 f4       	brne	.+12     	; 0x988 <commands+0xcc>
					printError(ERR_FRAM, "commands: put_FRAM_ENCODERS error");
     97c:	68 e8       	ldi	r22, 0x88	; 136
     97e:	74 ea       	ldi	r23, 0xA4	; 164
     980:	83 e9       	ldi	r24, 0x93	; 147
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				}
				timerSAVEENCODER = 0;
     988:	10 92 3a 2a 	sts	0x2A3A, r1	; 0x802a3a <timerSAVEENCODER>
				send_GTprompt();	// Aidan request
     98c:	0e 94 49 04 	call	0x892	; 0x892 <send_GTprompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     990:	8a e6       	ldi	r24, 0x6A	; 106
     992:	94 e0       	ldi	r25, 0x04	; 4
     994:	21 e0       	ldi	r18, 0x01	; 1
     996:	81 50       	subi	r24, 0x01	; 1
     998:	90 40       	sbci	r25, 0x00	; 0
     99a:	20 40       	sbci	r18, 0x00	; 0
     99c:	e1 f7       	brne	.-8      	; 0x996 <commands+0xda>
     99e:	00 c0       	rjmp	.+0      	; 0x9a0 <commands+0xe4>
				_delay_ms(100);
				reboot();			// in wdt.c
     9a0:	0e 94 1c 29 	call	0x5238	; 0x5238 <reboot>
				return;
     9a4:	12 c0       	rjmp	.+36     	; 0x9ca <commands+0x10e>
			}

		default:
			printError(ERR_BADCOMMAND, "Not a command");
     9a6:	6a ea       	ldi	r22, 0xAA	; 170
     9a8:	74 ea       	ldi	r23, 0xA4	; 164
     9aa:	89 ec       	ldi	r24, 0xC9	; 201
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     9b2:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	6a e0       	ldi	r22, 0x0A	; 10
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__divmodhi4>
     9c2:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	send_GTprompt();
     9c6:	0e 94 49 04 	call	0x892	; 0x892 <send_GTprompt>

}
     9ca:	c1 50       	subi	r28, 0x01	; 1
     9cc:	df 4f       	sbci	r29, 0xFF	; 255
     9ce:	cd bf       	out	0x3d, r28	; 61
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	08 95       	ret

000009d8 <check_isotime>:
#include "twi.h"
#include "errors.h"
#include "ds3231.h"

uint8_t check_isotime(char *isotime)
{
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	2a 97       	sbiw	r28, 0x0a	; 10
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	8c 01       	movw	r16, r24
	char sbuf[10];
	uint8_t i;
	int year, month, day, hours, minutes, seconds;

	for (i = 0; i < 4; i++) {
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	0e c0       	rjmp	.+28     	; 0xa0c <check_isotime+0x34>
		sbuf[i] = isotime[i];
     9f0:	82 2f       	mov	r24, r18
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	f8 01       	movw	r30, r16
     9f6:	e8 0f       	add	r30, r24
     9f8:	f9 1f       	adc	r31, r25
     9fa:	30 81       	ld	r19, Z
     9fc:	e1 e0       	ldi	r30, 0x01	; 1
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	ec 0f       	add	r30, r28
     a02:	fd 1f       	adc	r31, r29
     a04:	e8 0f       	add	r30, r24
     a06:	f9 1f       	adc	r31, r25
     a08:	30 83       	st	Z, r19
{
	char sbuf[10];
	uint8_t i;
	int year, month, day, hours, minutes, seconds;

	for (i = 0; i < 4; i++) {
     a0a:	2f 5f       	subi	r18, 0xFF	; 255
     a0c:	24 30       	cpi	r18, 0x04	; 4
     a0e:	80 f3       	brcs	.-32     	; 0x9f0 <check_isotime+0x18>
		sbuf[i] = isotime[i];
	}
	sbuf[4] = '\0';
     a10:	1d 82       	std	Y+5, r1	; 0x05
	year = atoi(sbuf);
     a12:	ce 01       	movw	r24, r28
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <atoi>
	if ((year < 2021) || year > 2030) {
     a1a:	85 5e       	subi	r24, 0xE5	; 229
     a1c:	97 40       	sbci	r25, 0x07	; 7
     a1e:	0a 97       	sbiw	r24, 0x0a	; 10
     a20:	c8 f0       	brcs	.+50     	; 0xa54 <check_isotime+0x7c>
		printError(ERR_ISO, "check_isotime: year out of range (2021-2030)");
     a22:	68 eb       	ldi	r22, 0xB8	; 184
     a24:	74 ea       	ldi	r23, 0xA4	; 164
     a26:	8b e5       	ldi	r24, 0x5B	; 91
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
     a2e:	83 e6       	ldi	r24, 0x63	; 99
     a30:	b2 c0       	rjmp	.+356    	; 0xb96 <check_isotime+0x1be>
	}
	for (i = 5; i < 7; i++) {
		sbuf[i-5] = isotime[i];
     a32:	28 2f       	mov	r18, r24
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	f9 01       	movw	r30, r18
     a38:	35 97       	sbiw	r30, 0x05	; 5
     a3a:	d8 01       	movw	r26, r16
     a3c:	a2 0f       	add	r26, r18
     a3e:	b3 1f       	adc	r27, r19
     a40:	9c 91       	ld	r25, X
     a42:	21 e0       	ldi	r18, 0x01	; 1
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	2c 0f       	add	r18, r28
     a48:	3d 1f       	adc	r19, r29
     a4a:	e2 0f       	add	r30, r18
     a4c:	f3 1f       	adc	r31, r19
     a4e:	90 83       	st	Z, r25
	year = atoi(sbuf);
	if ((year < 2021) || year > 2030) {
		printError(ERR_ISO, "check_isotime: year out of range (2021-2030)");
		return(ERROR);
	}
	for (i = 5; i < 7; i++) {
     a50:	8f 5f       	subi	r24, 0xFF	; 255
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <check_isotime+0x7e>
     a54:	85 e0       	ldi	r24, 0x05	; 5
     a56:	87 30       	cpi	r24, 0x07	; 7
     a58:	60 f3       	brcs	.-40     	; 0xa32 <check_isotime+0x5a>
		sbuf[i-5] = isotime[i];
	}
	sbuf[2] = '\0';
     a5a:	1b 82       	std	Y+3, r1	; 0x03
	month = atoi(sbuf);
     a5c:	ce 01       	movw	r24, r28
     a5e:	01 96       	adiw	r24, 0x01	; 1
     a60:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <atoi>
	if ((month < 1) || (month > 12)) {
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	0c 97       	sbiw	r24, 0x0c	; 12
     a68:	c8 f0       	brcs	.+50     	; 0xa9c <check_isotime+0xc4>
		printError(ERR_ISO, "check_isotime: invalid month (not 1-12)");
     a6a:	65 ee       	ldi	r22, 0xE5	; 229
     a6c:	74 ea       	ldi	r23, 0xA4	; 164
     a6e:	8b e5       	ldi	r24, 0x5B	; 91
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
     a76:	83 e6       	ldi	r24, 0x63	; 99
     a78:	8e c0       	rjmp	.+284    	; 0xb96 <check_isotime+0x1be>
	}
	for (i = 8; i < 10; i++) {
		sbuf[i-8] = isotime[i];
     a7a:	28 2f       	mov	r18, r24
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	f9 01       	movw	r30, r18
     a80:	38 97       	sbiw	r30, 0x08	; 8
     a82:	d8 01       	movw	r26, r16
     a84:	a2 0f       	add	r26, r18
     a86:	b3 1f       	adc	r27, r19
     a88:	9c 91       	ld	r25, X
     a8a:	21 e0       	ldi	r18, 0x01	; 1
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	2c 0f       	add	r18, r28
     a90:	3d 1f       	adc	r19, r29
     a92:	e2 0f       	add	r30, r18
     a94:	f3 1f       	adc	r31, r19
     a96:	90 83       	st	Z, r25
	month = atoi(sbuf);
	if ((month < 1) || (month > 12)) {
		printError(ERR_ISO, "check_isotime: invalid month (not 1-12)");
		return(ERROR);
	}
	for (i = 8; i < 10; i++) {
     a98:	8f 5f       	subi	r24, 0xFF	; 255
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <check_isotime+0xc6>
     a9c:	88 e0       	ldi	r24, 0x08	; 8
     a9e:	8a 30       	cpi	r24, 0x0A	; 10
     aa0:	60 f3       	brcs	.-40     	; 0xa7a <check_isotime+0xa2>
		sbuf[i-8] = isotime[i];
	}
	sbuf[2] = '\0';
     aa2:	1b 82       	std	Y+3, r1	; 0x03
	day = atoi(sbuf);
     aa4:	ce 01       	movw	r24, r28
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <atoi>
	if ((day < 1) || (day > 31)) {
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	4f 97       	sbiw	r24, 0x1f	; 31
     ab0:	c8 f0       	brcs	.+50     	; 0xae4 <check_isotime+0x10c>
		printError(ERR_ISO, "check_isotime: invalid day (not 1-31)");
     ab2:	6d e0       	ldi	r22, 0x0D	; 13
     ab4:	75 ea       	ldi	r23, 0xA5	; 165
     ab6:	8b e5       	ldi	r24, 0x5B	; 91
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
     abe:	83 e6       	ldi	r24, 0x63	; 99
     ac0:	6a c0       	rjmp	.+212    	; 0xb96 <check_isotime+0x1be>
	}
	for (i = 11; i < 13; i++) {
		sbuf[i-11] = isotime[i];
     ac2:	28 2f       	mov	r18, r24
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	f9 01       	movw	r30, r18
     ac8:	3b 97       	sbiw	r30, 0x0b	; 11
     aca:	d8 01       	movw	r26, r16
     acc:	a2 0f       	add	r26, r18
     ace:	b3 1f       	adc	r27, r19
     ad0:	9c 91       	ld	r25, X
     ad2:	21 e0       	ldi	r18, 0x01	; 1
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	2c 0f       	add	r18, r28
     ad8:	3d 1f       	adc	r19, r29
     ada:	e2 0f       	add	r30, r18
     adc:	f3 1f       	adc	r31, r19
     ade:	90 83       	st	Z, r25
	day = atoi(sbuf);
	if ((day < 1) || (day > 31)) {
		printError(ERR_ISO, "check_isotime: invalid day (not 1-31)");
		return(ERROR);
	}
	for (i = 11; i < 13; i++) {
     ae0:	8f 5f       	subi	r24, 0xFF	; 255
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <check_isotime+0x10e>
     ae4:	8b e0       	ldi	r24, 0x0B	; 11
     ae6:	8d 30       	cpi	r24, 0x0D	; 13
     ae8:	60 f3       	brcs	.-40     	; 0xac2 <check_isotime+0xea>
		sbuf[i-11] = isotime[i];
	}
	sbuf[2] = '\0';
     aea:	1b 82       	std	Y+3, r1	; 0x03
	hours = atoi(sbuf);
     aec:	ce 01       	movw	r24, r28
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <atoi>
	if ((hours < 0) || (hours > 23)) {
     af4:	48 97       	sbiw	r24, 0x18	; 24
     af6:	c8 f0       	brcs	.+50     	; 0xb2a <check_isotime+0x152>
		printError(ERR_ISO, "check_isotime: invalid hour");
     af8:	63 e3       	ldi	r22, 0x33	; 51
     afa:	75 ea       	ldi	r23, 0xA5	; 165
     afc:	8b e5       	ldi	r24, 0x5B	; 91
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
     b04:	83 e6       	ldi	r24, 0x63	; 99
     b06:	47 c0       	rjmp	.+142    	; 0xb96 <check_isotime+0x1be>
	}
	for (i = 14; i < 16; i++) {
		sbuf[i-14] = isotime[i];
     b08:	28 2f       	mov	r18, r24
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	f9 01       	movw	r30, r18
     b0e:	3e 97       	sbiw	r30, 0x0e	; 14
     b10:	d8 01       	movw	r26, r16
     b12:	a2 0f       	add	r26, r18
     b14:	b3 1f       	adc	r27, r19
     b16:	9c 91       	ld	r25, X
     b18:	21 e0       	ldi	r18, 0x01	; 1
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	2c 0f       	add	r18, r28
     b1e:	3d 1f       	adc	r19, r29
     b20:	e2 0f       	add	r30, r18
     b22:	f3 1f       	adc	r31, r19
     b24:	90 83       	st	Z, r25
	hours = atoi(sbuf);
	if ((hours < 0) || (hours > 23)) {
		printError(ERR_ISO, "check_isotime: invalid hour");
		return(ERROR);
	}
	for (i = 14; i < 16; i++) {
     b26:	8f 5f       	subi	r24, 0xFF	; 255
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <check_isotime+0x154>
     b2a:	8e e0       	ldi	r24, 0x0E	; 14
     b2c:	80 31       	cpi	r24, 0x10	; 16
     b2e:	60 f3       	brcs	.-40     	; 0xb08 <check_isotime+0x130>
		sbuf[i-14] = isotime[i];
	}
	sbuf[2] = '\0';
     b30:	1b 82       	std	Y+3, r1	; 0x03
	minutes = atoi(sbuf);
     b32:	ce 01       	movw	r24, r28
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <atoi>
	if ((minutes < 0) || (minutes > 59)) {
     b3a:	cc 97       	sbiw	r24, 0x3c	; 60
     b3c:	c8 f0       	brcs	.+50     	; 0xb70 <check_isotime+0x198>
		printError(ERR_ISO, "check_isotime: invalid minutes");
     b3e:	6f e4       	ldi	r22, 0x4F	; 79
     b40:	75 ea       	ldi	r23, 0xA5	; 165
     b42:	8b e5       	ldi	r24, 0x5B	; 91
     b44:	92 e0       	ldi	r25, 0x02	; 2
     b46:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
     b4a:	83 e6       	ldi	r24, 0x63	; 99
     b4c:	24 c0       	rjmp	.+72     	; 0xb96 <check_isotime+0x1be>
	}
	for (i = 17; i < 19; i++) {
		sbuf[i-17] = isotime[i];
     b4e:	28 2f       	mov	r18, r24
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	f9 01       	movw	r30, r18
     b54:	71 97       	sbiw	r30, 0x11	; 17
     b56:	d8 01       	movw	r26, r16
     b58:	a2 0f       	add	r26, r18
     b5a:	b3 1f       	adc	r27, r19
     b5c:	9c 91       	ld	r25, X
     b5e:	21 e0       	ldi	r18, 0x01	; 1
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	2c 0f       	add	r18, r28
     b64:	3d 1f       	adc	r19, r29
     b66:	e2 0f       	add	r30, r18
     b68:	f3 1f       	adc	r31, r19
     b6a:	90 83       	st	Z, r25
	minutes = atoi(sbuf);
	if ((minutes < 0) || (minutes > 59)) {
		printError(ERR_ISO, "check_isotime: invalid minutes");
		return(ERROR);
	}
	for (i = 17; i < 19; i++) {
     b6c:	8f 5f       	subi	r24, 0xFF	; 255
     b6e:	01 c0       	rjmp	.+2      	; 0xb72 <check_isotime+0x19a>
     b70:	81 e1       	ldi	r24, 0x11	; 17
     b72:	83 31       	cpi	r24, 0x13	; 19
     b74:	60 f3       	brcs	.-40     	; 0xb4e <check_isotime+0x176>
		sbuf[i-17] = isotime[i];
	}
	sbuf[2] = '\0';
     b76:	1b 82       	std	Y+3, r1	; 0x03
	seconds = atoi(sbuf);
     b78:	ce 01       	movw	r24, r28
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <atoi>
	if ((seconds < 0) || (seconds > 59)) {
     b80:	cc 97       	sbiw	r24, 0x3c	; 60
     b82:	40 f0       	brcs	.+16     	; 0xb94 <check_isotime+0x1bc>
		printError(ERR_ISO, "check_isotime: invalid seconds");
     b84:	6e e6       	ldi	r22, 0x6E	; 110
     b86:	75 ea       	ldi	r23, 0xA5	; 165
     b88:	8b e5       	ldi	r24, 0x5B	; 91
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
     b90:	83 e6       	ldi	r24, 0x63	; 99
     b92:	01 c0       	rjmp	.+2      	; 0xb96 <check_isotime+0x1be>
	}
	return(NOERROR);
     b94:	80 e0       	ldi	r24, 0x00	; 0
}
     b96:	2a 96       	adiw	r28, 0x0a	; 10
     b98:	cd bf       	out	0x3d, r28	; 61
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	08 95       	ret

00000ba6 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	a0 97       	sbiw	r28, 0x20	; 32
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	de bf       	out	0x3e, r29	; 62

	const char format_ISO[] = "20%02x-%02x-%02xT%02x:%02x:%02x";
     bb8:	40 e2       	ldi	r20, 0x20	; 32
     bba:	ed e8       	ldi	r30, 0x8D	; 141
     bbc:	f5 ea       	ldi	r31, 0xA5	; 165
     bbe:	9e 01       	movw	r18, r28
     bc0:	2f 5f       	subi	r18, 0xFF	; 255
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	d9 01       	movw	r26, r18
     bc6:	01 90       	ld	r0, Z+
     bc8:	0d 92       	st	X+, r0
     bca:	4a 95       	dec	r20
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <convert_ds2iso+0x20>
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     bce:	fb 01       	movw	r30, r22
     bd0:	b0 81       	ld	r27, Z
	minutes = (*ds3231time++);
     bd2:	a1 81       	ldd	r26, Z+1	; 0x01
	hours = (*ds3231time++);
     bd4:	12 81       	ldd	r17, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     bd6:	04 81       	ldd	r16, Z+4	; 0x04
	month = (*ds3231time++);
     bd8:	55 81       	ldd	r21, Z+5	; 0x05
	year = (*ds3231time);
     bda:	46 81       	ldd	r20, Z+6	; 0x06

	sprintf(isotime, format_ISO, year, month, date, hours, minutes, seconds);
     bdc:	1f 92       	push	r1
     bde:	bf 93       	push	r27
     be0:	1f 92       	push	r1
     be2:	af 93       	push	r26
     be4:	1f 92       	push	r1
     be6:	1f 93       	push	r17
     be8:	1f 92       	push	r1
     bea:	0f 93       	push	r16
     bec:	1f 92       	push	r1
     bee:	5f 93       	push	r21
     bf0:	1f 92       	push	r1
     bf2:	4f 93       	push	r20
     bf4:	3f 93       	push	r19
     bf6:	2f 93       	push	r18
     bf8:	9f 93       	push	r25
     bfa:	8f 93       	push	r24
     bfc:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>

}
     c00:	cd bf       	out	0x3d, r28	; 61
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	a0 96       	adiw	r28, 0x20	; 32
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	08 95       	ret

00000c14 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     c14:	dc 01       	movw	r26, r24
     c16:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     c18:	81 89       	ldd	r24, Z+17	; 0x11
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	c0 97       	sbiw	r24, 0x30	; 48
     c1e:	82 95       	swap	r24
     c20:	92 95       	swap	r25
     c22:	90 7f       	andi	r25, 0xF0	; 240
     c24:	98 27       	eor	r25, r24
     c26:	80 7f       	andi	r24, 0xF0	; 240
     c28:	98 27       	eor	r25, r24
     c2a:	92 89       	ldd	r25, Z+18	; 0x12
     c2c:	90 53       	subi	r25, 0x30	; 48
     c2e:	89 2b       	or	r24, r25
     c30:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     c32:	86 85       	ldd	r24, Z+14	; 0x0e
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	c0 97       	sbiw	r24, 0x30	; 48
     c38:	82 95       	swap	r24
     c3a:	92 95       	swap	r25
     c3c:	90 7f       	andi	r25, 0xF0	; 240
     c3e:	98 27       	eor	r25, r24
     c40:	80 7f       	andi	r24, 0xF0	; 240
     c42:	98 27       	eor	r25, r24
     c44:	97 85       	ldd	r25, Z+15	; 0x0f
     c46:	90 53       	subi	r25, 0x30	; 48
     c48:	89 2b       	or	r24, r25
     c4a:	11 96       	adiw	r26, 0x01	; 1
     c4c:	8c 93       	st	X, r24
     c4e:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     c50:	83 85       	ldd	r24, Z+11	; 0x0b
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	c0 97       	sbiw	r24, 0x30	; 48
     c56:	82 95       	swap	r24
     c58:	92 95       	swap	r25
     c5a:	90 7f       	andi	r25, 0xF0	; 240
     c5c:	98 27       	eor	r25, r24
     c5e:	80 7f       	andi	r24, 0xF0	; 240
     c60:	98 27       	eor	r25, r24
     c62:	94 85       	ldd	r25, Z+12	; 0x0c
     c64:	90 53       	subi	r25, 0x30	; 48
     c66:	89 2b       	or	r24, r25
     c68:	12 96       	adiw	r26, 0x02	; 2
     c6a:	8c 93       	st	X, r24
     c6c:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	13 96       	adiw	r26, 0x03	; 3
     c72:	8c 93       	st	X, r24
     c74:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     c76:	80 85       	ldd	r24, Z+8	; 0x08
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	c0 97       	sbiw	r24, 0x30	; 48
     c7c:	82 95       	swap	r24
     c7e:	92 95       	swap	r25
     c80:	90 7f       	andi	r25, 0xF0	; 240
     c82:	98 27       	eor	r25, r24
     c84:	80 7f       	andi	r24, 0xF0	; 240
     c86:	98 27       	eor	r25, r24
     c88:	91 85       	ldd	r25, Z+9	; 0x09
     c8a:	90 53       	subi	r25, 0x30	; 48
     c8c:	89 2b       	or	r24, r25
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8c 93       	st	X, r24
     c92:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     c94:	25 81       	ldd	r18, Z+5	; 0x05
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	20 53       	subi	r18, 0x30	; 48
     c9a:	31 09       	sbc	r19, r1
     c9c:	22 95       	swap	r18
     c9e:	32 95       	swap	r19
     ca0:	30 7f       	andi	r19, 0xF0	; 240
     ca2:	32 27       	eor	r19, r18
     ca4:	20 7f       	andi	r18, 0xF0	; 240
     ca6:	32 27       	eor	r19, r18
     ca8:	86 81       	ldd	r24, Z+6	; 0x06
     caa:	80 53       	subi	r24, 0x30	; 48
     cac:	28 2b       	or	r18, r24
     cae:	15 96       	adiw	r26, 0x05	; 5
     cb0:	2c 93       	st	X, r18
     cb2:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     cb4:	22 81       	ldd	r18, Z+2	; 0x02
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	20 53       	subi	r18, 0x30	; 48
     cba:	31 09       	sbc	r19, r1
     cbc:	22 95       	swap	r18
     cbe:	32 95       	swap	r19
     cc0:	30 7f       	andi	r19, 0xF0	; 240
     cc2:	32 27       	eor	r19, r18
     cc4:	20 7f       	andi	r18, 0xF0	; 240
     cc6:	32 27       	eor	r19, r18
     cc8:	83 81       	ldd	r24, Z+3	; 0x03
     cca:	80 53       	subi	r24, 0x30	; 48
     ccc:	28 2b       	or	r18, r24
     cce:	16 96       	adiw	r26, 0x06	; 6
     cd0:	2c 93       	st	X, r18
     cd2:	08 95       	ret

00000cd4 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	7b 01       	movw	r14, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
     ce6:	c8 2f       	mov	r28, r24
     ce8:	83 36       	cpi	r24, 0x63	; 99
     cea:	19 f4       	brne	.+6      	; 0xcf2 <read_DS3231+0x1e>
		stop_TWI();
     cec:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(ERROR);
     cf0:	26 c0       	rjmp	.+76     	; 0xd3e <read_DS3231+0x6a>
    }  

	if (write_TWI(0x00) == ERROR) {	// Register 00h
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
     cf8:	c8 2f       	mov	r28, r24
     cfa:	83 36       	cpi	r24, 0x63	; 99
     cfc:	19 f4       	brne	.+6      	; 0xd04 <read_DS3231+0x30>
		stop_TWI();
     cfe:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(ERROR);
     d02:	1d c0       	rjmp	.+58     	; 0xd3e <read_DS3231+0x6a>
	}

	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
     d04:	61 e0       	ldi	r22, 0x01	; 1
     d06:	88 e6       	ldi	r24, 0x68	; 104
     d08:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
     d0c:	c8 2f       	mov	r28, r24
     d0e:	83 36       	cpi	r24, 0x63	; 99
     d10:	61 f4       	brne	.+24     	; 0xd2a <read_DS3231+0x56>
		stop_TWI();
     d12:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(ERROR);
     d16:	13 c0       	rjmp	.+38     	; 0xd3e <read_DS3231+0x6a>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     d18:	87 01       	movw	r16, r14
     d1a:	0c 0f       	add	r16, r28
     d1c:	11 1d       	adc	r17, r1
     d1e:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <read_TWI>
     d22:	f8 01       	movw	r30, r16
     d24:	80 83       	st	Z, r24
	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 6; i++) {
     d26:	cf 5f       	subi	r28, 0xFF	; 255
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <read_DS3231+0x58>
     d2a:	c0 e0       	ldi	r28, 0x00	; 0
     d2c:	c6 30       	cpi	r28, 0x06	; 6
     d2e:	a0 f3       	brcs	.-24     	; 0xd18 <read_DS3231+0x44>
		ds3231time[i] = read_TWI();
	}

	ds3231time[6] = readlast_TWI();
     d30:	0e 94 04 26 	call	0x4c08	; 0x4c08 <readlast_TWI>
     d34:	f7 01       	movw	r30, r14
     d36:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     d38:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>

	return(NOERROR);
     d3c:	c0 e0       	ldi	r28, 0x00	; 0

}
     d3e:	8c 2f       	mov	r24, r28
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	ff 90       	pop	r15
     d48:	ef 90       	pop	r14
     d4a:	08 95       	ret

00000d4c <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     d4c:	ef 92       	push	r14
     d4e:	ff 92       	push	r15
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	27 97       	sbiw	r28, 0x07	; 7
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (read_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     d62:	be 01       	movw	r22, r28
     d64:	6f 5f       	subi	r22, 0xFF	; 255
     d66:	7f 4f       	sbci	r23, 0xFF	; 255
     d68:	88 e6       	ldi	r24, 0x68	; 104
     d6a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <read_DS3231>
     d6e:	18 2f       	mov	r17, r24
     d70:	83 36       	cpi	r24, 0x63	; 99
     d72:	79 f4       	brne	.+30     	; 0xd92 <get_time+0x46>
		printError(ERR_GETTIME, "get_time DS3231");
     d74:	6d ea       	ldi	r22, 0xAD	; 173
     d76:	75 ea       	ldi	r23, 0xA5	; 165
     d78:	85 e6       	ldi	r24, 0x65	; 101
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		strcpy(isotime, "DateTime?");
     d80:	8a e0       	ldi	r24, 0x0A	; 10
     d82:	ed eb       	ldi	r30, 0xBD	; 189
     d84:	f5 ea       	ldi	r31, 0xA5	; 165
     d86:	d7 01       	movw	r26, r14
     d88:	01 90       	ld	r0, Z+
     d8a:	0d 92       	st	X+, r0
     d8c:	8a 95       	dec	r24
     d8e:	e1 f7       	brne	.-8      	; 0xd88 <get_time+0x3c>
		return(ERROR);
     d90:	07 c0       	rjmp	.+14     	; 0xda0 <get_time+0x54>
	}

	convert_ds2iso(isotime, ds3231time);
     d92:	be 01       	movw	r22, r28
     d94:	6f 5f       	subi	r22, 0xFF	; 255
     d96:	7f 4f       	sbci	r23, 0xFF	; 255
     d98:	c7 01       	movw	r24, r14
     d9a:	0e 94 d3 05 	call	0xba6	; 0xba6 <convert_ds2iso>
	return(NOERROR);
     d9e:	10 e0       	ldi	r17, 0x00	; 0

}
     da0:	81 2f       	mov	r24, r17
     da2:	27 96       	adiw	r28, 0x07	; 7
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	ff 90       	pop	r15
     db0:	ef 90       	pop	r14
     db2:	08 95       	ret

00000db4 <write_DS3231>:
	Returns:
		ERROR for TWI start error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	8b 01       	movw	r16, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
     dc8:	c8 2f       	mov	r28, r24
     dca:	83 36       	cpi	r24, 0x63	; 99
     dcc:	19 f4       	brne	.+6      	; 0xdd4 <write_DS3231+0x20>
		stop_TWI();
     dce:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(ERROR);
     dd2:	20 c0       	rjmp	.+64     	; 0xe14 <write_DS3231+0x60>
	}

	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
     dda:	c8 2f       	mov	r28, r24
     ddc:	83 36       	cpi	r24, 0x63	; 99
     dde:	a1 f4       	brne	.+40     	; 0xe08 <write_DS3231+0x54>
		stop_TWI();
     de0:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(ERROR);
     de4:	17 c0       	rjmp	.+46     	; 0xe14 <write_DS3231+0x60>
	}

	for (i = 0; i < 7; i++) {
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     de6:	78 01       	movw	r14, r16
     de8:	8f ef       	ldi	r24, 0xFF	; 255
     dea:	e8 1a       	sub	r14, r24
     dec:	f8 0a       	sbc	r15, r24
     dee:	f8 01       	movw	r30, r16
     df0:	80 81       	ld	r24, Z
     df2:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
     df6:	c8 2f       	mov	r28, r24
     df8:	83 36       	cpi	r24, 0x63	; 99
     dfa:	19 f4       	brne	.+6      	; 0xe02 <write_DS3231+0x4e>
			stop_TWI();
     dfc:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
			return(ERROR);
     e00:	09 c0       	rjmp	.+18     	; 0xe14 <write_DS3231+0x60>
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     e02:	df 5f       	subi	r29, 0xFF	; 255
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     e04:	87 01       	movw	r16, r14
     e06:	01 c0       	rjmp	.+2      	; 0xe0a <write_DS3231+0x56>
     e08:	d0 e0       	ldi	r29, 0x00	; 0
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     e0a:	d7 30       	cpi	r29, 0x07	; 7
     e0c:	60 f3       	brcs	.-40     	; 0xde6 <write_DS3231+0x32>
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
			stop_TWI();
			return(ERROR);
		}
	}
	stop_TWI();
     e0e:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>

	return(NOERROR);
     e12:	c0 e0       	ldi	r28, 0x00	; 0

}
     e14:	8c 2f       	mov	r24, r28
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	ff 90       	pop	r15
     e20:	ef 90       	pop	r14
     e22:	08 95       	ret

00000e24 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     e24:	ef 92       	push	r14
     e26:	ff 92       	push	r15
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	27 97       	sbiw	r28, 0x07	; 7
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (check_isotime(isotime) == ERROR) {
     e3a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <check_isotime>
     e3e:	18 2f       	mov	r17, r24
     e40:	83 36       	cpi	r24, 0x63	; 99
     e42:	39 f4       	brne	.+14     	; 0xe52 <put_time+0x2e>
		printError(ERR_ISO, "put_time: check_isotime error");
     e44:	67 ec       	ldi	r22, 0xC7	; 199
     e46:	75 ea       	ldi	r23, 0xA5	; 165
     e48:	8b e5       	ldi	r24, 0x5B	; 91
     e4a:	92 e0       	ldi	r25, 0x02	; 2
     e4c:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
     e50:	16 c0       	rjmp	.+44     	; 0xe7e <put_time+0x5a>
	}
	convert_iso2ds(ds3231time, isotime);
     e52:	b7 01       	movw	r22, r14
     e54:	ce 01       	movw	r24, r28
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	0e 94 0a 06 	call	0xc14	; 0xc14 <convert_iso2ds>
	if (write_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     e5c:	be 01       	movw	r22, r28
     e5e:	6f 5f       	subi	r22, 0xFF	; 255
     e60:	7f 4f       	sbci	r23, 0xFF	; 255
     e62:	88 e6       	ldi	r24, 0x68	; 104
     e64:	0e 94 da 06 	call	0xdb4	; 0xdb4 <write_DS3231>
     e68:	18 2f       	mov	r17, r24
     e6a:	83 36       	cpi	r24, 0x63	; 99
     e6c:	39 f4       	brne	.+14     	; 0xe7c <put_time+0x58>
		printError(ERR_PUTTIME, "put_time: write_DS3231 error");
     e6e:	65 ee       	ldi	r22, 0xE5	; 229
     e70:	75 ea       	ldi	r23, 0xA5	; 165
     e72:	86 e6       	ldi	r24, 0x66	; 102
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <put_time+0x5a>
	}
	return(NOERROR);
     e7c:	10 e0       	ldi	r17, 0x00	; 0

}
     e7e:	81 2f       	mov	r24, r17
     e80:	27 96       	adiw	r28, 0x07	; 7
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	1f 91       	pop	r17
     e8c:	ff 90       	pop	r15
     e8e:	ef 90       	pop	r14
     e90:	08 95       	ret

00000e92 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     e92:	45 e1       	ldi	r20, 0x15	; 21
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	6b e0       	ldi	r22, 0x0B	; 11
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <eeprom_read_block>
     e9e:	08 95       	ret

00000ea0 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     ea0:	4b e0       	ldi	r20, 0x0B	; 11
     ea2:	50 e0       	ldi	r21, 0x00	; 0
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <eeprom_read_block>
     eac:	08 95       	ret

00000eae <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	65 97       	sbiw	r28, 0x15	; 21
     eb8:	cd bf       	out	0x3d, r28	; 61
     eba:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     ebc:	ce 01       	movw	r24, r28
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     ec4:	45 e1       	ldi	r20, 0x15	; 21
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	6b e0       	ldi	r22, 0x0B	; 11
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	ce 01       	movw	r24, r28
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <eeprom_update_block>

}
     ed4:	65 96       	adiw	r28, 0x15	; 21
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <update_VERSION>:

void update_VERSION(void)
{
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	2b 97       	sbiw	r28, 0x0b	; 11
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     eee:	8b e0       	ldi	r24, 0x0B	; 11
     ef0:	e2 e0       	ldi	r30, 0x02	; 2
     ef2:	f6 ea       	ldi	r31, 0xA6	; 166
     ef4:	de 01       	movw	r26, r28
     ef6:	11 96       	adiw	r26, 0x01	; 1
     ef8:	01 90       	ld	r0, Z+
     efa:	0d 92       	st	X+, r0
     efc:	8a 95       	dec	r24
     efe:	e1 f7       	brne	.-8      	; 0xef8 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     f00:	4b e0       	ldi	r20, 0x0B	; 11
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	ce 01       	movw	r24, r28
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <eeprom_update_block>

}
     f10:	2b 96       	adiw	r28, 0x0b	; 11
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     f1c:	0e 94 57 07 	call	0xeae	; 0xeae <update_BOOTTIME>
	update_VERSION();
     f20:	0e 94 70 07 	call	0xee0	; 0xee0 <update_VERSION>
     f24:	08 95       	ret

00000f26 <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	c8 50       	subi	r28, 0x08	; 8
     f34:	d1 40       	sbci	r29, 0x01	; 1
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char errorFormat[] = "ERR,%d,%s";
     f3a:	2a e0       	ldi	r18, 0x0A	; 10
     f3c:	ed e0       	ldi	r30, 0x0D	; 13
     f3e:	f6 ea       	ldi	r31, 0xA6	; 166
     f40:	de 01       	movw	r26, r28
     f42:	a1 50       	subi	r26, 0x01	; 1
     f44:	bf 4f       	sbci	r27, 0xFF	; 255
     f46:	01 90       	ld	r0, Z+
     f48:	0d 92       	st	X+, r0
     f4a:	2a 95       	dec	r18
     f4c:	e1 f7       	brne	.-8      	; 0xf46 <printError+0x20>

squelchErrors=NO;
     f4e:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <squelchErrors>
	if (!squelchErrors) {
     f52:	20 91 0b 28 	lds	r18, 0x280B	; 0x80280b <squelchErrors>
     f56:	21 11       	cpse	r18, r1
     f58:	15 c0       	rjmp	.+42     	; 0xf84 <printError+0x5e>
		sprintf(strbuf, errorFormat, errorNumber, errorString);
     f5a:	7f 93       	push	r23
     f5c:	6f 93       	push	r22
     f5e:	9f 93       	push	r25
     f60:	8f 93       	push	r24
     f62:	ce 01       	movw	r24, r28
     f64:	81 50       	subi	r24, 0x01	; 1
     f66:	9f 4f       	sbci	r25, 0xFF	; 255
     f68:	9f 93       	push	r25
     f6a:	8f 93       	push	r24
     f6c:	8e 01       	movw	r16, r28
     f6e:	0f 5f       	subi	r16, 0xFF	; 255
     f70:	1f 4f       	sbci	r17, 0xFF	; 255
     f72:	1f 93       	push	r17
     f74:	0f 93       	push	r16
     f76:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
		printLine(strbuf);
     f7a:	c8 01       	movw	r24, r16
     f7c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
     f80:	cd bf       	out	0x3d, r28	; 61
     f82:	de bf       	out	0x3e, r29	; 62
	}

}
     f84:	c8 5f       	subi	r28, 0xF8	; 248
     f86:	de 4f       	sbci	r29, 0xFE	; 254
     f88:	cd bf       	out	0x3d, r28	; 61
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	08 95       	ret

00000f96 <read_FRAM>:
	Returns:
		ERROR on start_TWI error (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     f96:	cf 92       	push	r12
     f98:	df 92       	push	r13
     f9a:	ef 92       	push	r14
     f9c:	ff 92       	push	r15
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	d8 2f       	mov	r29, r24
     fa8:	d6 2e       	mov	r13, r22
     faa:	07 2f       	mov	r16, r23
     fac:	7a 01       	movw	r14, r20
     fae:	12 2f       	mov	r17, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if (start_TWI(addr, TWIWRITE) == ERROR) {		// TWI start
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
     fb6:	c8 2f       	mov	r28, r24
     fb8:	83 36       	cpi	r24, 0x63	; 99
     fba:	19 f4       	brne	.+6      	; 0xfc2 <read_FRAM+0x2c>
		stop_TWI();
     fbc:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(ERROR);
     fc0:	2e c0       	rjmp	.+92     	; 0x101e <read_FRAM+0x88>
	}

	if (write_TWI(memhigh) == ERROR) {			// Send memory address
     fc2:	80 2f       	mov	r24, r16
     fc4:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
     fc8:	c8 2f       	mov	r28, r24
     fca:	83 36       	cpi	r24, 0x63	; 99
     fcc:	41 f1       	breq	.+80     	; 0x101e <read_FRAM+0x88>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {
     fce:	8d 2d       	mov	r24, r13
     fd0:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
     fd4:	c8 2f       	mov	r28, r24
     fd6:	83 36       	cpi	r24, 0x63	; 99
     fd8:	11 f1       	breq	.+68     	; 0x101e <read_FRAM+0x88>
		return(ERROR);
	}

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	8d 2f       	mov	r24, r29
     fde:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
     fe2:	c8 2f       	mov	r28, r24
     fe4:	83 36       	cpi	r24, 0x63	; 99
     fe6:	d9 f0       	breq	.+54     	; 0x101e <read_FRAM+0x88>
     fe8:	c0 e0       	ldi	r28, 0x00	; 0
     fea:	08 c0       	rjmp	.+16     	; 0xffc <read_FRAM+0x66>
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     fec:	67 01       	movw	r12, r14
     fee:	cc 0e       	add	r12, r28
     ff0:	d1 1c       	adc	r13, r1
     ff2:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <read_TWI>
     ff6:	f6 01       	movw	r30, r12
     ff8:	80 83       	st	Z, r24

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
     ffa:	cf 5f       	subi	r28, 0xFF	; 255
     ffc:	2c 2f       	mov	r18, r28
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 2f       	mov	r24, r17
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	28 17       	cp	r18, r24
    1008:	39 07       	cpc	r19, r25
    100a:	84 f3       	brlt	.-32     	; 0xfec <read_FRAM+0x56>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
    100c:	ec 01       	movw	r28, r24
    100e:	ce 0d       	add	r28, r14
    1010:	df 1d       	adc	r29, r15
    1012:	0e 94 04 26 	call	0x4c08	; 0x4c08 <readlast_TWI>
    1016:	88 83       	st	Y, r24

	stop_TWI();
    1018:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>

	return(NOERROR);
    101c:	c0 e0       	ldi	r28, 0x00	; 0

}
    101e:	8c 2f       	mov	r24, r28
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	08 95       	ret

00001032 <get_SETTIME>:
	Input: None
	Output: The data from FRAM, presumably containing the time
	Returns: ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t get_SETTIME(char *lastsettime)
{
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	2a 97       	sbiw	r28, 0x0a	; 10
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	7c 01       	movw	r14, r24

	const char timeset[] = "Time Set?";
    1048:	8a e0       	ldi	r24, 0x0A	; 10
    104a:	e7 e1       	ldi	r30, 0x17	; 23
    104c:	f6 ea       	ldi	r31, 0xA6	; 166
    104e:	de 01       	movw	r26, r28
    1050:	11 96       	adiw	r26, 0x01	; 1
    1052:	01 90       	ld	r0, Z+
    1054:	0d 92       	st	X+, r0
    1056:	8a 95       	dec	r24
    1058:	e1 f7       	brne	.-8      	; 0x1052 <get_SETTIME+0x20>
	if (read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, ISOTIMELEN) == ERROR) {;
    105a:	24 e1       	ldi	r18, 0x14	; 20
    105c:	a7 01       	movw	r20, r14
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	80 e5       	ldi	r24, 0x50	; 80
    1064:	0e 94 cb 07 	call	0xf96	; 0xf96 <read_FRAM>
    1068:	18 2f       	mov	r17, r24
    106a:	83 36       	cpi	r24, 0x63	; 99
    106c:	39 f4       	brne	.+14     	; 0x107c <get_SETTIME+0x4a>
		strcpy(lastsettime, timeset);
    106e:	be 01       	movw	r22, r28
    1070:	6f 5f       	subi	r22, 0xFF	; 255
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	c7 01       	movw	r24, r14
    1076:	0e 94 f5 30 	call	0x61ea	; 0x61ea <strcpy>
		return(ERROR);
    107a:	01 c0       	rjmp	.+2      	; 0x107e <get_SETTIME+0x4c>
	}
	return(NOERROR);
    107c:	10 e0       	ldi	r17, 0x00	; 0
}
    107e:	81 2f       	mov	r24, r17
    1080:	2a 96       	adiw	r28, 0x0a	; 10
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	08 95       	ret

00001092 <write_FRAM>:
	Returns:
		ERROR if start_TWI fails (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
    1092:	ef 92       	push	r14
    1094:	ff 92       	push	r15
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	f6 2e       	mov	r15, r22
    10a0:	17 2f       	mov	r17, r23
    10a2:	ea 01       	movw	r28, r20
    10a4:	02 2f       	mov	r16, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if (start_TWI(addr, TWIWRITE) == ERROR) {	// TWI START
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
    10ac:	83 36       	cpi	r24, 0x63	; 99
    10ae:	e1 f0       	breq	.+56     	; 0x10e8 <write_FRAM+0x56>
		return(ERROR);
	}

	if (write_TWI(memhigh) == ERROR) {			// FRAM address to write
    10b0:	81 2f       	mov	r24, r17
    10b2:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
    10b6:	83 36       	cpi	r24, 0x63	; 99
    10b8:	b9 f0       	breq	.+46     	; 0x10e8 <write_FRAM+0x56>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
    10ba:	8f 2d       	mov	r24, r15
    10bc:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
    10c0:	83 36       	cpi	r24, 0x63	; 99
    10c2:	91 f0       	breq	.+36     	; 0x10e8 <write_FRAM+0x56>
    10c4:	10 e0       	ldi	r17, 0x00	; 0
    10c6:	0b c0       	rjmp	.+22     	; 0x10de <write_FRAM+0x4c>
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    10c8:	7e 01       	movw	r14, r28
    10ca:	8f ef       	ldi	r24, 0xFF	; 255
    10cc:	e8 1a       	sub	r14, r24
    10ce:	f8 0a       	sbc	r15, r24
    10d0:	88 81       	ld	r24, Y
    10d2:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
    10d6:	83 36       	cpi	r24, 0x63	; 99
    10d8:	39 f0       	breq	.+14     	; 0x10e8 <write_FRAM+0x56>
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    10da:	1f 5f       	subi	r17, 0xFF	; 255
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    10dc:	e7 01       	movw	r28, r14
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    10de:	10 17       	cp	r17, r16
    10e0:	98 f3       	brcs	.-26     	; 0x10c8 <write_FRAM+0x36>
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
			return(ERROR);
		}
	}

	stop_TWI();
    10e2:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>

	return(NOERROR);
    10e6:	80 e0       	ldi	r24, 0x00	; 0

}
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	08 95       	ret

000010f6 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
    10f6:	8f 92       	push	r8
    10f8:	9f 92       	push	r9
    10fa:	af 92       	push	r10
    10fc:	bf 92       	push	r11
    10fe:	cf 92       	push	r12
    1100:	df 92       	push	r13
    1102:	ef 92       	push	r14
    1104:	ff 92       	push	r15
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	00 d0       	rcall	.+0      	; 0x1110 <get_humidity+0x1a>
    1110:	00 d0       	rcall	.+0      	; 0x1112 <get_humidity+0x1c>
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62

	uint8_t adcpin;
	float voltage, humidity, temperature;

	switch (sensor) {
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	59 f0       	breq	.+22     	; 0x1130 <get_humidity+0x3a>
    111a:	18 f0       	brcs	.+6      	; 0x1122 <get_humidity+0x2c>
    111c:	82 30       	cpi	r24, 0x02	; 2
    111e:	79 f0       	breq	.+30     	; 0x113e <get_humidity+0x48>
    1120:	15 c0       	rjmp	.+42     	; 0x114c <get_humidity+0x56>
		case 0:
			temperature = get_temperature(0);
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	0e 94 00 25 	call	0x4a00	; 0x4a00 <get_temperature>
    1128:	6b 01       	movw	r12, r22
    112a:	7c 01       	movw	r14, r24
			adcpin = AIN0;		// production
    112c:	40 e4       	ldi	r20, 0x40	; 64
			break;
    112e:	17 c0       	rjmp	.+46     	; 0x115e <get_humidity+0x68>

		case 1:
			temperature = get_temperature(1);
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	0e 94 00 25 	call	0x4a00	; 0x4a00 <get_temperature>
    1136:	6b 01       	movw	r12, r22
    1138:	7c 01       	movw	r14, r24
			adcpin = AIN1;
    113a:	40 e5       	ldi	r20, 0x50	; 80
			break;
    113c:	10 c0       	rjmp	.+32     	; 0x115e <get_humidity+0x68>

		case 2:
			temperature = get_temperature(2);
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	0e 94 00 25 	call	0x4a00	; 0x4a00 <get_temperature>
    1144:	6b 01       	movw	r12, r22
    1146:	7c 01       	movw	r14, r24
			adcpin = AIN2;
    1148:	40 e6       	ldi	r20, 0x60	; 96
			break;
    114a:	09 c0       	rjmp	.+18     	; 0x115e <get_humidity+0x68>

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
    114c:	0f 2e       	mov	r0, r31
    114e:	c1 2c       	mov	r12, r1
    1150:	d1 2c       	mov	r13, r1
    1152:	f0 ea       	ldi	r31, 0xA0	; 160
    1154:	ef 2e       	mov	r14, r31
    1156:	f1 e4       	ldi	r31, 0x41	; 65
    1158:	ff 2e       	mov	r15, r31
    115a:	f0 2d       	mov	r31, r0
			adcpin = AIN2;
			break;

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
    115c:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
    115e:	8e 01       	movw	r16, r28
    1160:	0f 5f       	subi	r16, 0xFF	; 255
    1162:	1f 4f       	sbci	r17, 0xFF	; 255
    1164:	20 e8       	ldi	r18, 0x80	; 128
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	88 e4       	ldi	r24, 0x48	; 72
    116a:	0e 94 c8 01 	call	0x390	; 0x390 <read_ADS1115>
    116e:	83 36       	cpi	r24, 0x63	; 99
    1170:	89 f1       	breq	.+98     	; 0x11d4 <get_humidity+0xde>
		humidity = BADFLOAT;
	}
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 ea       	ldi	r20, 0xA0	; 160
    1178:	50 e4       	ldi	r21, 0x40	; 64
    117a:	69 81       	ldd	r22, Y+1	; 0x01
    117c:	7a 81       	ldd	r23, Y+2	; 0x02
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	0e 94 bf 29 	call	0x537e	; 0x537e <__divsf3>
    1186:	2a e0       	ldi	r18, 0x0A	; 10
    1188:	37 ed       	ldi	r19, 0xD7	; 215
    118a:	43 e2       	ldi	r20, 0x23	; 35
    118c:	5e e3       	ldi	r21, 0x3E	; 62
    118e:	0e 94 4d 29 	call	0x529a	; 0x529a <__subsf3>
    1192:	2f e5       	ldi	r18, 0x5F	; 95
    1194:	39 e2       	ldi	r19, 0x29	; 41
    1196:	4b ec       	ldi	r20, 0xCB	; 203
    1198:	5b e3       	ldi	r21, 0x3B	; 59
    119a:	0e 94 bf 29 	call	0x537e	; 0x537e <__divsf3>
    119e:	4b 01       	movw	r8, r22
    11a0:	5c 01       	movw	r10, r24
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
    11a2:	29 ec       	ldi	r18, 0xC9	; 201
    11a4:	3e e8       	ldi	r19, 0x8E	; 142
    11a6:	4d e0       	ldi	r20, 0x0D	; 13
    11a8:	5b e3       	ldi	r21, 0x3B	; 59
    11aa:	c7 01       	movw	r24, r14
    11ac:	b6 01       	movw	r22, r12
    11ae:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
    11b2:	9b 01       	movw	r18, r22
    11b4:	ac 01       	movw	r20, r24
    11b6:	62 e2       	ldi	r22, 0x22	; 34
    11b8:	7d ef       	ldi	r23, 0xFD	; 253
    11ba:	86 e8       	ldi	r24, 0x86	; 134
    11bc:	9f e3       	ldi	r25, 0x3F	; 63
    11be:	0e 94 4d 29 	call	0x529a	; 0x529a <__subsf3>
    11c2:	9b 01       	movw	r18, r22
    11c4:	ac 01       	movw	r20, r24
    11c6:	c5 01       	movw	r24, r10
    11c8:	b4 01       	movw	r22, r8
    11ca:	0e 94 bf 29 	call	0x537e	; 0x537e <__divsf3>
    11ce:	6b 01       	movw	r12, r22
    11d0:	7c 01       	movw	r14, r24
    11d2:	09 c0       	rjmp	.+18     	; 0x11e6 <get_humidity+0xf0>
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
		humidity = BADFLOAT;
    11d4:	0f 2e       	mov	r0, r31
    11d6:	c1 2c       	mov	r12, r1
    11d8:	f0 e8       	ldi	r31, 0x80	; 128
    11da:	df 2e       	mov	r13, r31
    11dc:	f6 e2       	ldi	r31, 0x26	; 38
    11de:	ef 2e       	mov	r14, r31
    11e0:	f4 ec       	ldi	r31, 0xC4	; 196
    11e2:	ff 2e       	mov	r15, r31
    11e4:	f0 2d       	mov	r31, r0
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
	}

	if (humidity < 0.0) {
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	a9 01       	movw	r20, r18
    11ec:	c7 01       	movw	r24, r14
    11ee:	b6 01       	movw	r22, r12
    11f0:	0e 94 ba 29 	call	0x5374	; 0x5374 <__cmpsf2>
    11f4:	88 23       	and	r24, r24
    11f6:	4c f4       	brge	.+18     	; 0x120a <get_humidity+0x114>
		humidity = BADFLOAT;
    11f8:	0f 2e       	mov	r0, r31
    11fa:	c1 2c       	mov	r12, r1
    11fc:	f0 e8       	ldi	r31, 0x80	; 128
    11fe:	df 2e       	mov	r13, r31
    1200:	f6 e2       	ldi	r31, 0x26	; 38
    1202:	ef 2e       	mov	r14, r31
    1204:	f4 ec       	ldi	r31, 0xC4	; 196
    1206:	ff 2e       	mov	r15, r31
    1208:	f0 2d       	mov	r31, r0
	}

	return(humidity);

}
    120a:	c7 01       	movw	r24, r14
    120c:	b6 01       	movw	r22, r12
    120e:	24 96       	adiw	r28, 0x04	; 4
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	ff 90       	pop	r15
    121e:	ef 90       	pop	r14
    1220:	df 90       	pop	r13
    1222:	cf 90       	pop	r12
    1224:	bf 90       	pop	r11
    1226:	af 90       	pop	r10
    1228:	9f 90       	pop	r9
    122a:	8f 90       	pop	r8
    122c:	08 95       	ret

0000122e <initialize>:
#include "initialize.h"

uint8_t rebootackd;

void initialize(void)
{
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	2b 97       	sbiw	r28, 0x0b	; 11
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	rebootackd = NO;
    123c:	10 92 0c 28 	sts	0x280C, r1	; 0x80280c <rebootackd>
	timerOLED = 0;					// See oled.h
    1240:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerOLED>
    1244:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <timerOLED+0x1>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
    1248:	80 ee       	ldi	r24, 0xE0	; 224
    124a:	91 e0       	ldi	r25, 0x01	; 1
    124c:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
    1250:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>

	init_PORTS();
    1254:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <init_PORTS>
	init_TWI();
    1258:	0e 94 d7 25 	call	0x4bae	; 0x4bae <init_TWI>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
    125c:	80 e2       	ldi	r24, 0x20	; 32
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 40 25 	call	0x4a80	; 0x4a80 <init_RTC>
	init_MMA8451();	// Accelerometer; needs TWI
    1264:	0e 94 c5 0b 	call	0x178a	; 0x178a <init_MMA8451>
	init_OLED();	// Needs TWI
    1268:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <init_OLED>
	init_EEPROM();	// Needs TWI to get boot time from clock
    126c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <init_EEPROM>
	init_USART();
    1270:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <init_USART>
	start_TCB0(1);	// 1 ms ticks for TWI & USART timeouts
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 90 25 	call	0x4b20	; 0x4b20 <start_TCB0>
	sei();
    127c:	78 94       	sei

	init_MOTORS();	// Needs USART & interrupts on
    127e:	0e 94 51 23 	call	0x46a2	; 0x46a2 <init_MOTORS>
	get_VERSION(versionstr);
    1282:	ce 01       	movw	r24, r28
    1284:	01 96       	adiw	r24, 0x01	; 1
    1286:	0e 94 50 07 	call	0xea0	; 0xea0 <get_VERSION>
	writestr_OLED(0,"specMech Version", 1);
    128a:	41 e0       	ldi	r20, 0x01	; 1
    128c:	61 e2       	ldi	r22, 0x21	; 33
    128e:	76 ea       	ldi	r23, 0xA6	; 166
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <writestr_OLED>
	writestr_OLED(0, versionstr, 2);
    1296:	42 e0       	ldi	r20, 0x02	; 2
    1298:	be 01       	movw	r22, r28
    129a:	6f 5f       	subi	r22, 0xFF	; 255
    129c:	7f 4f       	sbci	r23, 0xFF	; 255
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <writestr_OLED>

}
    12a4:	2b 96       	adiw	r28, 0x0b	; 11
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	08 95       	ret

000012b0 <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
    12b0:	cf 92       	push	r12
    12b2:	df 92       	push	r13
    12b4:	ef 92       	push	r14
    12b6:	ff 92       	push	r15
    12b8:	0f 93       	push	r16
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <read_ionpump+0x12>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <read_ionpump+0x14>
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	21 f0       	breq	.+8      	; 0x12d4 <read_ionpump+0x24>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
    12cc:	82 30       	cpi	r24, 0x02	; 2
    12ce:	c1 f5       	brne	.+112    	; 0x1340 <read_ionpump+0x90>
		pins = AIN23;
    12d0:	40 e3       	ldi	r20, 0x30	; 48
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <read_ionpump+0x26>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
    12d4:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(BADFLOAT);
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
    12d6:	8e 01       	movw	r16, r28
    12d8:	0f 5f       	subi	r16, 0xFF	; 255
    12da:	1f 4f       	sbci	r17, 0xFF	; 255
    12dc:	20 e8       	ldi	r18, 0x80	; 128
    12de:	62 e0       	ldi	r22, 0x02	; 2
    12e0:	89 e4       	ldi	r24, 0x49	; 73
    12e2:	0e 94 c8 01 	call	0x390	; 0x390 <read_ADS1115>
    12e6:	83 36       	cpi	r24, 0x63	; 99
    12e8:	81 f1       	breq	.+96     	; 0x134a <read_ionpump+0x9a>
		return(BADFLOAT);
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
    12ea:	c9 80       	ldd	r12, Y+1	; 0x01
    12ec:	da 80       	ldd	r13, Y+2	; 0x02
    12ee:	eb 80       	ldd	r14, Y+3	; 0x03
    12f0:	fc 80       	ldd	r15, Y+4	; 0x04
    12f2:	2d ec       	ldi	r18, 0xCD	; 205
    12f4:	3c ec       	ldi	r19, 0xCC	; 204
    12f6:	4c ec       	ldi	r20, 0xCC	; 204
    12f8:	5e e3       	ldi	r21, 0x3E	; 62
    12fa:	c7 01       	movw	r24, r14
    12fc:	b6 01       	movw	r22, r12
    12fe:	0e 94 ba 29 	call	0x5374	; 0x5374 <__cmpsf2>
    1302:	88 23       	and	r24, r24
    1304:	3c f1       	brlt	.+78     	; 0x1354 <read_ionpump+0xa4>
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	50 e4       	ldi	r21, 0x40	; 64
    130e:	c7 01       	movw	r24, r14
    1310:	b6 01       	movw	r22, r12
    1312:	0e 94 19 2b 	call	0x5632	; 0x5632 <__gesf2>
    1316:	18 16       	cp	r1, r24
    1318:	14 f1       	brlt	.+68     	; 0x135e <read_ionpump+0xae>
		return(BADFLOAT);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    131a:	29 e7       	ldi	r18, 0x79	; 121
    131c:	39 ee       	ldi	r19, 0xE9	; 233
    131e:	42 e0       	ldi	r20, 0x02	; 2
    1320:	50 e4       	ldi	r21, 0x40	; 64
    1322:	c7 01       	movw	r24, r14
    1324:	b6 01       	movw	r22, r12
    1326:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
    132a:	2e e6       	ldi	r18, 0x6E	; 110
    132c:	33 ea       	ldi	r19, 0xA3	; 163
    132e:	4b ed       	ldi	r20, 0xDB	; 219
    1330:	50 e4       	ldi	r21, 0x40	; 64
    1332:	0e 94 4d 29 	call	0x529a	; 0x529a <__subsf3>
	return(vacuum);
    1336:	56 2f       	mov	r21, r22
    1338:	47 2f       	mov	r20, r23
    133a:	38 2f       	mov	r19, r24
    133c:	29 2f       	mov	r18, r25
    133e:	13 c0       	rjmp	.+38     	; 0x1366 <read_ionpump+0xb6>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(BADFLOAT);
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	40 e8       	ldi	r20, 0x80	; 128
    1344:	36 e2       	ldi	r19, 0x26	; 38
    1346:	24 ec       	ldi	r18, 0xC4	; 196
    1348:	0e c0       	rjmp	.+28     	; 0x1366 <read_ionpump+0xb6>
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
		return(BADFLOAT);
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	40 e8       	ldi	r20, 0x80	; 128
    134e:	36 e2       	ldi	r19, 0x26	; 38
    1350:	24 ec       	ldi	r18, 0xC4	; 196
    1352:	09 c0       	rjmp	.+18     	; 0x1366 <read_ionpump+0xb6>
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
    1354:	50 e0       	ldi	r21, 0x00	; 0
    1356:	40 e8       	ldi	r20, 0x80	; 128
    1358:	36 e2       	ldi	r19, 0x26	; 38
    135a:	24 ec       	ldi	r18, 0xC4	; 196
    135c:	04 c0       	rjmp	.+8      	; 0x1366 <read_ionpump+0xb6>
	} else if (voltage > 2.0) {
		return(BADFLOAT);
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	40 e8       	ldi	r20, 0x80	; 128
    1362:	36 e2       	ldi	r19, 0x26	; 38
    1364:	24 ec       	ldi	r18, 0xC4	; 196
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
    1366:	65 2f       	mov	r22, r21
    1368:	74 2f       	mov	r23, r20
    136a:	83 2f       	mov	r24, r19
    136c:	92 2f       	mov	r25, r18
    136e:	24 96       	adiw	r28, 0x04	; 4
    1370:	cd bf       	out	0x3d, r28	; 61
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	ff 90       	pop	r15
    137e:	ef 90       	pop	r14
    1380:	df 90       	pop	r13
    1382:	cf 90       	pop	r12
    1384:	08 95       	ret

00001386 <main>:
void read_PNEUSensors(char*, char*, char*, char*);	//TESTING

int main(void)
{

	firstpass = YES;		// Set to NO in commands.c
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	80 93 15 2a 	sts	0x2A15, r24	; 0x802a15 <firstpass>
//	squelchErrors = YES;	// Don't need this?
	initialize();
    138c:	0e 94 17 09 	call	0x122e	; 0x122e <initialize>
	squelchErrors = NO;
    1390:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <squelchErrors>

	for (;;) {
		if (recv0_buf.done) {
    1394:	80 91 42 2e 	lds	r24, 0x2E42	; 0x802e42 <recv0_buf+0x103>
    1398:	88 23       	and	r24, r24
    139a:	21 f0       	breq	.+8      	; 0x13a4 <main+0x1e>
			recv0_buf.done = NO;
    139c:	10 92 42 2e 	sts	0x2E42, r1	; 0x802e42 <recv0_buf+0x103>
			commands();
    13a0:	0e 94 5e 04 	call	0x8bc	; 0x8bc <commands>
		}
		if (timerOLED > timeoutOLED) {	// Display timeout
    13a4:	20 91 16 2a 	lds	r18, 0x2A16	; 0x802a16 <timerOLED>
    13a8:	30 91 17 2a 	lds	r19, 0x2A17	; 0x802a17 <timerOLED+0x1>
    13ac:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <timeoutOLED>
    13b0:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <timeoutOLED+0x1>
    13b4:	82 17       	cp	r24, r18
    13b6:	93 07       	cpc	r25, r19
    13b8:	78 f4       	brcc	.+30     	; 0x13d8 <main+0x52>
			squelchErrors = YES;
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <squelchErrors>
			clear_OLED(0);
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <clear_OLED>
			clear_OLED(1);
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <clear_OLED>
			timerOLED = 0;
    13cc:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerOLED>
    13d0:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <timerOLED+0x1>
			squelchErrors = NO;
    13d4:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <squelchErrors>
		} if ((timerSAVEENCODER > timeoutSAVEENCODER) && rebootackd) {
    13d8:	90 91 3a 2a 	lds	r25, 0x2A3A	; 0x802a3a <timerSAVEENCODER>
    13dc:	80 91 39 2a 	lds	r24, 0x2A39	; 0x802a39 <timeoutSAVEENCODER>
    13e0:	89 17       	cp	r24, r25
    13e2:	c0 f6       	brcc	.-80     	; 0x1394 <main+0xe>
    13e4:	80 91 0c 28 	lds	r24, 0x280C	; 0x80280c <rebootackd>
    13e8:	88 23       	and	r24, r24
    13ea:	a1 f2       	breq	.-88     	; 0x1394 <main+0xe>
//			squelchErrors = YES;
//			put_FRAM_ENCODERS();	// Maybe set a global error variable?
			timerSAVEENCODER = 0;
    13ec:	10 92 3a 2a 	sts	0x2A3A, r1	; 0x802a3a <timerSAVEENCODER>
			squelchErrors = NO;
    13f0:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <squelchErrors>
    13f4:	cf cf       	rjmp	.-98     	; 0x1394 <main+0xe>

000013f6 <read_MCP23008>:
	Returns:
		ERROR if TWI error
		NOERROR Otherwise
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	c8 2f       	mov	r28, r24
    13fc:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
    1404:	83 36       	cpi	r24, 0x63	; 99
    1406:	51 f4       	brne	.+20     	; 0x141c <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 read error");
    1408:	62 e3       	ldi	r22, 0x32	; 50
    140a:	76 ea       	ldi	r23, 0xA6	; 166
    140c:	82 e9       	ldi	r24, 0x92	; 146
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		stop_TWI();
    1414:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(0xFF);
    1418:	8f ef       	ldi	r24, 0xFF	; 255
    141a:	19 c0       	rjmp	.+50     	; 0x144e <read_MCP23008+0x58>
	}
	write_TWI(reg);
    141c:	8d 2f       	mov	r24, r29
    141e:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
	if (start_TWI(addr, TWIREAD) == ERROR) {
    1422:	61 e0       	ldi	r22, 0x01	; 1
    1424:	8c 2f       	mov	r24, r28
    1426:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
    142a:	83 36       	cpi	r24, 0x63	; 99
    142c:	51 f4       	brne	.+20     	; 0x1442 <read_MCP23008+0x4c>
		printError(ERR_MCP23008, "MCP23008 read error");
    142e:	62 e3       	ldi	r22, 0x32	; 50
    1430:	76 ea       	ldi	r23, 0xA6	; 166
    1432:	82 e9       	ldi	r24, 0x92	; 146
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		stop_TWI();
    143a:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(0xFF);
    143e:	8f ef       	ldi	r24, 0xFF	; 255
    1440:	06 c0       	rjmp	.+12     	; 0x144e <read_MCP23008+0x58>
	}
	value = readlast_TWI();
    1442:	0e 94 04 26 	call	0x4c08	; 0x4c08 <readlast_TWI>
    1446:	c8 2f       	mov	r28, r24
	stop_TWI();
    1448:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
	return(value);
    144c:	8c 2f       	mov	r24, r28

}
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	08 95       	ret

00001454 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	d6 2f       	mov	r29, r22
    145c:	14 2f       	mov	r17, r20

	uint8_t retval;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
    1464:	c8 2f       	mov	r28, r24
    1466:	83 36       	cpi	r24, 0x63	; 99
    1468:	49 f4       	brne	.+18     	; 0x147c <write_MCP23008+0x28>
		printError(ERR_MCP23008, "MCP23008 write error");
    146a:	66 e4       	ldi	r22, 0x46	; 70
    146c:	76 ea       	ldi	r23, 0xA6	; 166
    146e:	82 e9       	ldi	r24, 0x92	; 146
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		stop_TWI();
    1476:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(ERROR);
    147a:	15 c0       	rjmp	.+42     	; 0x14a6 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(reg))) {
    147c:	8d 2f       	mov	r24, r29
    147e:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
    1482:	88 23       	and	r24, r24
    1484:	21 f0       	breq	.+8      	; 0x148e <write_MCP23008+0x3a>
		stop_TWI();
    1486:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(ERROR);
    148a:	c3 e6       	ldi	r28, 0x63	; 99
    148c:	0c c0       	rjmp	.+24     	; 0x14a6 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(val))) {
    148e:	81 2f       	mov	r24, r17
    1490:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
    1494:	88 23       	and	r24, r24
    1496:	21 f0       	breq	.+8      	; 0x14a0 <write_MCP23008+0x4c>
		stop_TWI();
    1498:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(ERROR);
    149c:	c3 e6       	ldi	r28, 0x63	; 99
    149e:	03 c0       	rjmp	.+6      	; 0x14a6 <write_MCP23008+0x52>
	}
	stop_TWI();
    14a0:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
	return(NOERROR);
    14a4:	c0 e0       	ldi	r28, 0x00	; 0
	
}
    14a6:	8c 2f       	mov	r24, r28
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	08 95       	ret

000014b0 <read_MCP9808>:
#include "errors.h"
#include "mcp9808.h"
#include "twi.h"

uint8_t read_MCP9808(float *temperature)
{
    14b0:	8f 92       	push	r8
    14b2:	9f 92       	push	r9
    14b4:	af 92       	push	r10
    14b6:	bf 92       	push	r11
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	8c 01       	movw	r16, r24

	uint8_t highbyte, lowbyte, sign;
	float temp;

	if (start_TWI(MCP9808ADDR, TWIWRITE) == ERROR) {
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	88 e1       	ldi	r24, 0x18	; 24
    14c8:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
    14cc:	83 36       	cpi	r24, 0x63	; 99
    14ce:	51 f4       	brne	.+20     	; 0x14e4 <read_MCP9808+0x34>
		*temperature = BADFLOAT;
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	50 e8       	ldi	r21, 0x80	; 128
    14d4:	66 e2       	ldi	r22, 0x26	; 38
    14d6:	74 ec       	ldi	r23, 0xC4	; 196
    14d8:	f8 01       	movw	r30, r16
    14da:	40 83       	st	Z, r20
    14dc:	51 83       	std	Z+1, r21	; 0x01
    14de:	62 83       	std	Z+2, r22	; 0x02
    14e0:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    14e2:	43 c0       	rjmp	.+134    	; 0x156a <read_MCP9808+0xba>
	}
	write_TWI(TEMPREGISTER);
    14e4:	85 e0       	ldi	r24, 0x05	; 5
    14e6:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    14ea:	61 e0       	ldi	r22, 0x01	; 1
    14ec:	88 e1       	ldi	r24, 0x18	; 24
    14ee:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
	highbyte = read_TWI();
    14f2:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <read_TWI>
    14f6:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    14f8:	0e 94 04 26 	call	0x4c08	; 0x4c08 <readlast_TWI>
    14fc:	d8 2f       	mov	r29, r24
	stop_TWI();
    14fe:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1502:	fc 2f       	mov	r31, r28
    1504:	f0 71       	andi	r31, 0x10	; 16
    1506:	ff 2e       	mov	r15, r31
	highbyte &= 0x0F;					// Clear threshold & sign bits
    1508:	6c 2f       	mov	r22, r28
    150a:	6f 70       	andi	r22, 0x0F	; 15
	temp = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 67 2a 	call	0x54ce	; 0x54ce <__floatunsisf>
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e8       	ldi	r20, 0x80	; 128
    151c:	51 e4       	ldi	r21, 0x41	; 65
    151e:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
    1522:	4b 01       	movw	r8, r22
    1524:	5c 01       	movw	r10, r24
    1526:	6d 2f       	mov	r22, r29
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 67 2a 	call	0x54ce	; 0x54ce <__floatunsisf>
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	40 e8       	ldi	r20, 0x80	; 128
    1538:	5d e3       	ldi	r21, 0x3D	; 61
    153a:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
    153e:	9b 01       	movw	r18, r22
    1540:	ac 01       	movw	r20, r24
    1542:	c5 01       	movw	r24, r10
    1544:	b4 01       	movw	r22, r8
    1546:	0e 94 4e 29 	call	0x529c	; 0x529c <__addsf3>
	if (sign) {
    154a:	ff 20       	and	r15, r15
    154c:	41 f0       	breq	.+16     	; 0x155e <read_MCP9808+0xae>
		temp = 256.0 - temp;
    154e:	9b 01       	movw	r18, r22
    1550:	ac 01       	movw	r20, r24
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	80 e8       	ldi	r24, 0x80	; 128
    1558:	93 e4       	ldi	r25, 0x43	; 67
    155a:	0e 94 4d 29 	call	0x529a	; 0x529a <__subsf3>
	}
	*temperature = temp;
    155e:	f8 01       	movw	r30, r16
    1560:	60 83       	st	Z, r22
    1562:	71 83       	std	Z+1, r23	; 0x01
    1564:	82 83       	std	Z+2, r24	; 0x02
    1566:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    1568:	80 e0       	ldi	r24, 0x00	; 0
}
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	ff 90       	pop	r15
    1574:	bf 90       	pop	r11
    1576:	af 90       	pop	r10
    1578:	9f 90       	pop	r9
    157a:	8f 90       	pop	r8
    157c:	08 95       	ret

0000157e <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    157e:	ef 92       	push	r14
    1580:	ff 92       	push	r15
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	f8 2e       	mov	r15, r24
    158c:	e6 2e       	mov	r14, r22
    158e:	ea 01       	movw	r28, r20
    1590:	02 2f       	mov	r16, r18

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
    1598:	18 2f       	mov	r17, r24
    159a:	83 36       	cpi	r24, 0x63	; 99
    159c:	19 f4       	brne	.+6      	; 0x15a4 <read_MMA8451+0x26>
		stop_TWI();
    159e:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(ERROR);
    15a2:	23 c0       	rjmp	.+70     	; 0x15ea <read_MMA8451+0x6c>
	}
	if (write_TWI(reg) == ERROR) {
    15a4:	8e 2d       	mov	r24, r14
    15a6:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
    15aa:	18 2f       	mov	r17, r24
    15ac:	83 36       	cpi	r24, 0x63	; 99
    15ae:	e9 f0       	breq	.+58     	; 0x15ea <read_MMA8451+0x6c>
		return(ERROR);
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
    15b0:	61 e0       	ldi	r22, 0x01	; 1
    15b2:	8f 2d       	mov	r24, r15
    15b4:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
    15b8:	18 2f       	mov	r17, r24
    15ba:	83 36       	cpi	r24, 0x63	; 99
    15bc:	69 f4       	brne	.+26     	; 0x15d8 <read_MMA8451+0x5a>
		stop_TWI();
    15be:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(ERROR);
    15c2:	13 c0       	rjmp	.+38     	; 0x15ea <read_MMA8451+0x6c>
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    15c4:	7e 01       	movw	r14, r28
    15c6:	8f ef       	ldi	r24, 0xFF	; 255
    15c8:	e8 1a       	sub	r14, r24
    15ca:	f8 0a       	sbc	r15, r24
    15cc:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <read_TWI>
    15d0:	88 83       	st	Y, r24
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    15d2:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    15d4:	e7 01       	movw	r28, r14
    15d6:	01 c0       	rjmp	.+2      	; 0x15da <read_MMA8451+0x5c>
    15d8:	11 e0       	ldi	r17, 0x01	; 1
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    15da:	10 17       	cp	r17, r16
    15dc:	98 f3       	brcs	.-26     	; 0x15c4 <read_MMA8451+0x46>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    15de:	0e 94 04 26 	call	0x4c08	; 0x4c08 <readlast_TWI>
    15e2:	88 83       	st	Y, r24
	stop_TWI();
    15e4:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
	return(NOERROR);
    15e8:	10 e0       	ldi	r17, 0x00	; 0

}
    15ea:	81 2f       	mov	r24, r17
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	ff 90       	pop	r15
    15f6:	ef 90       	pop	r14
    15f8:	08 95       	ret

000015fa <get_orientation>:
uint8_t get_orientation(float *x, float *y, float *z)
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
uint8_t get_orientation(float *x, float *y, float *z)
{
    15fa:	cf 92       	push	r12
    15fc:	df 92       	push	r13
    15fe:	ef 92       	push	r14
    1600:	ff 92       	push	r15
    1602:	0f 93       	push	r16
    1604:	1f 93       	push	r17
    1606:	cf 93       	push	r28
    1608:	df 93       	push	r29
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	26 97       	sbiw	r28, 0x06	; 6
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	6c 01       	movw	r12, r24
    1616:	7b 01       	movw	r14, r22
    1618:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = BADFLOAT;
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e8       	ldi	r25, 0x80	; 128
    161e:	a6 e2       	ldi	r26, 0x26	; 38
    1620:	b4 ec       	ldi	r27, 0xC4	; 196
    1622:	fa 01       	movw	r30, r20
    1624:	80 83       	st	Z, r24
    1626:	91 83       	std	Z+1, r25	; 0x01
    1628:	a2 83       	std	Z+2, r26	; 0x02
    162a:	b3 83       	std	Z+3, r27	; 0x03
    162c:	fb 01       	movw	r30, r22
    162e:	80 83       	st	Z, r24
    1630:	91 83       	std	Z+1, r25	; 0x01
    1632:	a2 83       	std	Z+2, r26	; 0x02
    1634:	b3 83       	std	Z+3, r27	; 0x03
    1636:	f6 01       	movw	r30, r12
    1638:	80 83       	st	Z, r24
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	a2 83       	std	Z+2, r26	; 0x02
    163e:	b3 83       	std	Z+3, r27	; 0x03

	if (read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6) == ERROR) {
    1640:	26 e0       	ldi	r18, 0x06	; 6
    1642:	ae 01       	movw	r20, r28
    1644:	4f 5f       	subi	r20, 0xFF	; 255
    1646:	5f 4f       	sbci	r21, 0xFF	; 255
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	8d e1       	ldi	r24, 0x1D	; 29
    164c:	0e 94 bf 0a 	call	0x157e	; 0x157e <read_MMA8451>
    1650:	83 36       	cpi	r24, 0x63	; 99
    1652:	09 f4       	brne	.+2      	; 0x1656 <get_orientation+0x5c>
    1654:	64 c0       	rjmp	.+200    	; 0x171e <get_orientation+0x124>
		return(ERROR);
	}

	ix = datain[0];
    1656:	69 81       	ldd	r22, Y+1	; 0x01
    1658:	70 e0       	ldi	r23, 0x00	; 0
	ix <<= 8;
    165a:	76 2f       	mov	r23, r22
    165c:	66 27       	eor	r22, r22
	ix |= datain[1];
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	68 2b       	or	r22, r24
	ix >>= 2;
    1662:	75 95       	asr	r23
    1664:	67 95       	ror	r22
    1666:	75 95       	asr	r23
    1668:	67 95       	ror	r22
	*x = 980.6 * ((float) ix/4096.0);
    166a:	07 2e       	mov	r0, r23
    166c:	00 0c       	add	r0, r0
    166e:	88 0b       	sbc	r24, r24
    1670:	99 0b       	sbc	r25, r25
    1672:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <__floatsisf>
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e8       	ldi	r20, 0x80	; 128
    167c:	59 e3       	ldi	r21, 0x39	; 57
    167e:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
    1682:	26 e6       	ldi	r18, 0x66	; 102
    1684:	36 e2       	ldi	r19, 0x26	; 38
    1686:	45 e7       	ldi	r20, 0x75	; 117
    1688:	54 e4       	ldi	r21, 0x44	; 68
    168a:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
    168e:	f6 01       	movw	r30, r12
    1690:	60 83       	st	Z, r22
    1692:	71 83       	std	Z+1, r23	; 0x01
    1694:	82 83       	std	Z+2, r24	; 0x02
    1696:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    1698:	6b 81       	ldd	r22, Y+3	; 0x03
    169a:	70 e0       	ldi	r23, 0x00	; 0
	iy <<= 8;
    169c:	76 2f       	mov	r23, r22
    169e:	66 27       	eor	r22, r22
	iy |= datain[3];
    16a0:	8c 81       	ldd	r24, Y+4	; 0x04
    16a2:	68 2b       	or	r22, r24
	iy >>= 2;
    16a4:	75 95       	asr	r23
    16a6:	67 95       	ror	r22
    16a8:	75 95       	asr	r23
    16aa:	67 95       	ror	r22
	*y = 980.6 * ((float) iy/4096.0);
    16ac:	07 2e       	mov	r0, r23
    16ae:	00 0c       	add	r0, r0
    16b0:	88 0b       	sbc	r24, r24
    16b2:	99 0b       	sbc	r25, r25
    16b4:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <__floatsisf>
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	59 e3       	ldi	r21, 0x39	; 57
    16c0:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
    16c4:	26 e6       	ldi	r18, 0x66	; 102
    16c6:	36 e2       	ldi	r19, 0x26	; 38
    16c8:	45 e7       	ldi	r20, 0x75	; 117
    16ca:	54 e4       	ldi	r21, 0x44	; 68
    16cc:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
    16d0:	f7 01       	movw	r30, r14
    16d2:	60 83       	st	Z, r22
    16d4:	71 83       	std	Z+1, r23	; 0x01
    16d6:	82 83       	std	Z+2, r24	; 0x02
    16d8:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    16da:	6d 81       	ldd	r22, Y+5	; 0x05
    16dc:	70 e0       	ldi	r23, 0x00	; 0
	iz <<= 8;
    16de:	76 2f       	mov	r23, r22
    16e0:	66 27       	eor	r22, r22
	iz |= datain[5];
    16e2:	8e 81       	ldd	r24, Y+6	; 0x06
    16e4:	68 2b       	or	r22, r24
	iz >>= 2;
    16e6:	75 95       	asr	r23
    16e8:	67 95       	ror	r22
    16ea:	75 95       	asr	r23
    16ec:	67 95       	ror	r22
	*z = 980.6 * ((float) iz/4096.0);
    16ee:	07 2e       	mov	r0, r23
    16f0:	00 0c       	add	r0, r0
    16f2:	88 0b       	sbc	r24, r24
    16f4:	99 0b       	sbc	r25, r25
    16f6:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <__floatsisf>
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e8       	ldi	r20, 0x80	; 128
    1700:	59 e3       	ldi	r21, 0x39	; 57
    1702:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
    1706:	26 e6       	ldi	r18, 0x66	; 102
    1708:	36 e2       	ldi	r19, 0x26	; 38
    170a:	45 e7       	ldi	r20, 0x75	; 117
    170c:	54 e4       	ldi	r21, 0x44	; 68
    170e:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
    1712:	f8 01       	movw	r30, r16
    1714:	60 83       	st	Z, r22
    1716:	71 83       	std	Z+1, r23	; 0x01
    1718:	82 83       	std	Z+2, r24	; 0x02
    171a:	93 83       	std	Z+3, r25	; 0x03

	return(0);
    171c:	80 e0       	ldi	r24, 0x00	; 0

}
    171e:	26 96       	adiw	r28, 0x06	; 6
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	ff 90       	pop	r15
    172e:	ef 90       	pop	r14
    1730:	df 90       	pop	r13
    1732:	cf 90       	pop	r12
    1734:	08 95       	ret

00001736 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1736:	1f 93       	push	r17
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	d6 2f       	mov	r29, r22
    173e:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
    1746:	c8 2f       	mov	r28, r24
    1748:	88 23       	and	r24, r24
    174a:	21 f0       	breq	.+8      	; 0x1754 <write_MMA8451+0x1e>
		stop_TWI();
    174c:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(retval);
    1750:	8c 2f       	mov	r24, r28
    1752:	17 c0       	rjmp	.+46     	; 0x1782 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1754:	8d 2f       	mov	r24, r29
    1756:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
    175a:	c8 2f       	mov	r28, r24
    175c:	88 23       	and	r24, r24
    175e:	21 f0       	breq	.+8      	; 0x1768 <write_MMA8451+0x32>
		stop_TWI();
    1760:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(retval);
    1764:	8c 2f       	mov	r24, r28
    1766:	0d c0       	rjmp	.+26     	; 0x1782 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1768:	81 2f       	mov	r24, r17
    176a:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
    176e:	c8 2f       	mov	r28, r24
    1770:	88 23       	and	r24, r24
    1772:	21 f0       	breq	.+8      	; 0x177c <write_MMA8451+0x46>
		stop_TWI();
    1774:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
		return(retval);
    1778:	8c 2f       	mov	r24, r28
    177a:	03 c0       	rjmp	.+6      	; 0x1782 <write_MMA8451+0x4c>
	}
	stop_TWI();
    177c:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>
	return(0);
    1780:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	1f 91       	pop	r17
    1788:	08 95       	ret

0000178a <init_MMA8451>:
	sampling frequency (1.56 Hz), a low cutoff frequency on the high pass
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/
uint8_t init_MMA8451(void)
{
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	1f 92       	push	r1
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    1794:	40 e4       	ldi	r20, 0x40	; 64
    1796:	6b e2       	ldi	r22, 0x2B	; 43
    1798:	8d e1       	ldi	r24, 0x1D	; 29
    179a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    179e:	21 e0       	ldi	r18, 0x01	; 1
    17a0:	ae 01       	movw	r20, r28
    17a2:	4f 5f       	subi	r20, 0xFF	; 255
    17a4:	5f 4f       	sbci	r21, 0xFF	; 255
    17a6:	6b e2       	ldi	r22, 0x2B	; 43
    17a8:	8d e1       	ldi	r24, 0x1D	; 29
    17aa:	0e 94 bf 0a 	call	0x157e	; 0x157e <read_MMA8451>
	while (retval & 0x40) {
    17ae:	08 c0       	rjmp	.+16     	; 0x17c0 <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    17b0:	21 e0       	ldi	r18, 0x01	; 1
    17b2:	ae 01       	movw	r20, r28
    17b4:	4f 5f       	subi	r20, 0xFF	; 255
    17b6:	5f 4f       	sbci	r21, 0xFF	; 255
    17b8:	6b e2       	ldi	r22, 0x2B	; 43
    17ba:	8d e1       	ldi	r24, 0x1D	; 29
    17bc:	0e 94 bf 0a 	call	0x157e	; 0x157e <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	86 fd       	sbrc	r24, 6
    17c4:	f5 cf       	rjmp	.-22     	; 0x17b0 <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    17c6:	40 ec       	ldi	r20, 0xC0	; 192
    17c8:	6f e0       	ldi	r22, 0x0F	; 15
    17ca:	8d e1       	ldi	r24, 0x1D	; 29
    17cc:	0e 94 9b 0b 	call	0x1736	; 0x1736 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    17d0:	42 e0       	ldi	r20, 0x02	; 2
    17d2:	6b e2       	ldi	r22, 0x2B	; 43
    17d4:	8d e1       	ldi	r24, 0x1D	; 29
    17d6:	0e 94 9b 0b 	call	0x1736	; 0x1736 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    17da:	4d e3       	ldi	r20, 0x3D	; 61
    17dc:	6a e2       	ldi	r22, 0x2A	; 42
    17de:	8d e1       	ldi	r24, 0x1D	; 29
    17e0:	0e 94 9b 0b 	call	0x1736	; 0x1736 <write_MMA8451>

	return(retval);

}
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	0f 90       	pop	r0
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	08 95       	ret

000017ee <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum and \r\n to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    17ee:	ef 92       	push	r14
    17f0:	ff 92       	push	r15
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	2e 97       	sbiw	r28, 0x0e	; 14
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    1806:	88 e0       	ldi	r24, 0x08	; 8
    1808:	eb e5       	ldi	r30, 0x5B	; 91
    180a:	f6 ea       	ldi	r31, 0xA6	; 166
    180c:	de 01       	movw	r26, r28
    180e:	11 96       	adiw	r26, 0x01	; 1
    1810:	01 90       	ld	r0, Z+
    1812:	0d 92       	st	X+, r0
    1814:	8a 95       	dec	r24
    1816:	e1 f7       	brne	.-8      	; 0x1810 <__DATA_REGION_LENGTH__+0x10>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    1818:	f8 01       	movw	r30, r16
    181a:	01 90       	ld	r0, Z+
    181c:	00 20       	and	r0, r0
    181e:	e9 f7       	brne	.-6      	; 0x181a <__DATA_REGION_LENGTH__+0x1a>
    1820:	31 97       	sbiw	r30, 0x01	; 1
    1822:	3e 2f       	mov	r19, r30
    1824:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    1826:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	06 c0       	rjmp	.+12     	; 0x1838 <__DATA_REGION_LENGTH__+0x38>
		checksum ^= str[i];
    182c:	f8 01       	movw	r30, r16
    182e:	e8 0f       	add	r30, r24
    1830:	f1 1d       	adc	r31, r1
    1832:	20 81       	ld	r18, Z
    1834:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1836:	8f 5f       	subi	r24, 0xFF	; 255
    1838:	83 17       	cp	r24, r19
    183a:	c0 f3       	brcs	.-16     	; 0x182c <__DATA_REGION_LENGTH__+0x2c>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    183c:	1f 92       	push	r1
    183e:	9f 93       	push	r25
    1840:	ce 01       	movw	r24, r28
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	9f 93       	push	r25
    1846:	8f 93       	push	r24
    1848:	7e 01       	movw	r14, r28
    184a:	89 e0       	ldi	r24, 0x09	; 9
    184c:	e8 0e       	add	r14, r24
    184e:	f1 1c       	adc	r15, r1
    1850:	ff 92       	push	r15
    1852:	ef 92       	push	r14
    1854:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
	strcat(str, chksum);
    1858:	b7 01       	movw	r22, r14
    185a:	c8 01       	movw	r24, r16
    185c:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <strcat>

}
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	2e 96       	adiw	r28, 0x0e	; 14
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	ff 90       	pop	r15
    187c:	ef 90       	pop	r14
    187e:	08 95       	ret

00001880 <reset_OLED>:
void reset_OLED(void)
	Pulls the OLED display reset line low for 1 ms. This seems to be needed.
------------------------------------------------------------------------------*/
void reset_OLED(void)
{
	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    1880:	e0 e6       	ldi	r30, 0x60	; 96
    1882:	f4 e0       	ldi	r31, 0x04	; 4
    1884:	80 e4       	ldi	r24, 0x40	; 64
    1886:	86 83       	std	Z+6, r24	; 0x06
	PORTD.DIRSET = PIN6_bm;
    1888:	81 83       	std	Z+1, r24	; 0x01
    188a:	a1 e4       	ldi	r26, 0x41	; 65
    188c:	b3 e0       	ldi	r27, 0x03	; 3
    188e:	11 97       	sbiw	r26, 0x01	; 1
    1890:	f1 f7       	brne	.-4      	; 0x188e <reset_OLED+0xe>
    1892:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    1894:	85 83       	std	Z+5, r24	; 0x05
    1896:	08 95       	ret

00001898 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    1898:	cf 93       	push	r28
    189a:	df 93       	push	r29
    189c:	d6 2f       	mov	r29, r22
    189e:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    18a0:	60 e0       	ldi	r22, 0x00	; 0
    18a2:	0e 94 23 26 	call	0x4c46	; 0x4c46 <start_TWI>
	write_TWI(type);
    18a6:	8d 2f       	mov	r24, r29
    18a8:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
	write_TWI(byteToSend);
    18ac:	8c 2f       	mov	r24, r28
    18ae:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <write_TWI>
	stop_TWI();
    18b2:	0e 94 6d 26 	call	0x4cda	; 0x4cda <stop_TWI>

}
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	08 95       	ret

000018bc <init_OLEDDISPLAY>:
	Initialize a Newhaven NHD-0216AW-1B3 OLED display. This is taken straight
	from https://github.com/NewhavenDisplay/NHD_US2066. The manual is not easy
	to understand but this seems to work.
------------------------------------------------------------------------------*/
void init_OLEDDISPLAY(uint8_t displaynumber)
{
    18bc:	cf 93       	push	r28

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
    18be:	88 23       	and	r24, r24
    18c0:	29 f0       	breq	.+10     	; 0x18cc <init_OLEDDISPLAY+0x10>
		twiaddr = OLEDADDR0;		
	} else if (displaynumber == 1) {	// Left-side display
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <init_OLEDDISPLAY+0xc>
    18c6:	9e c0       	rjmp	.+316    	; 0x1a04 <init_OLEDDISPLAY+0x148>
		twiaddr = OLEDADDR1;
    18c8:	cd e3       	ldi	r28, 0x3D	; 61
    18ca:	01 c0       	rjmp	.+2      	; 0x18ce <init_OLEDDISPLAY+0x12>
{

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
		twiaddr = OLEDADDR0;		
    18cc:	cc e3       	ldi	r28, 0x3C	; 60
		twiaddr = OLEDADDR1;
	} else {
		return;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    18ce:	4a e2       	ldi	r20, 0x2A	; 42
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	8c 2f       	mov	r24, r28
    18d4:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    18d8:	41 e7       	ldi	r20, 0x71	; 113
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	8c 2f       	mov	r24, r28
    18de:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    18e2:	4c e5       	ldi	r20, 0x5C	; 92
    18e4:	60 e4       	ldi	r22, 0x40	; 64
    18e6:	8c 2f       	mov	r24, r28
    18e8:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    18ec:	48 e2       	ldi	r20, 0x28	; 40
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	8c 2f       	mov	r24, r28
    18f2:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    18f6:	48 e0       	ldi	r20, 0x08	; 8
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	8c 2f       	mov	r24, r28
    18fc:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1900:	4a e2       	ldi	r20, 0x2A	; 42
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	8c 2f       	mov	r24, r28
    1906:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    190a:	49 e7       	ldi	r20, 0x79	; 121
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	8c 2f       	mov	r24, r28
    1910:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    1914:	45 ed       	ldi	r20, 0xD5	; 213
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	8c 2f       	mov	r24, r28
    191a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    191e:	40 e7       	ldi	r20, 0x70	; 112
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	8c 2f       	mov	r24, r28
    1924:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1928:	48 e7       	ldi	r20, 0x78	; 120
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	8c 2f       	mov	r24, r28
    192e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    1932:	48 e0       	ldi	r20, 0x08	; 8
    1934:	60 e0       	ldi	r22, 0x00	; 0
    1936:	8c 2f       	mov	r24, r28
    1938:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    193c:	46 e0       	ldi	r20, 0x06	; 6
    193e:	60 e0       	ldi	r22, 0x00	; 0
    1940:	8c 2f       	mov	r24, r28
    1942:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1946:	42 e7       	ldi	r20, 0x72	; 114
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	8c 2f       	mov	r24, r28
    194c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	60 e4       	ldi	r22, 0x40	; 64
    1954:	8c 2f       	mov	r24, r28
    1956:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    195a:	4a e2       	ldi	r20, 0x2A	; 42
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	8c 2f       	mov	r24, r28
    1960:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1964:	49 e7       	ldi	r20, 0x79	; 121
    1966:	60 e0       	ldi	r22, 0x00	; 0
    1968:	8c 2f       	mov	r24, r28
    196a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    196e:	4a ed       	ldi	r20, 0xDA	; 218
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	8c 2f       	mov	r24, r28
    1974:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	8c 2f       	mov	r24, r28
    197e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    1982:	4c ed       	ldi	r20, 0xDC	; 220
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	8c 2f       	mov	r24, r28
    1988:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	8c 2f       	mov	r24, r28
    1992:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    1996:	41 e8       	ldi	r20, 0x81	; 129
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	8c 2f       	mov	r24, r28
    199c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    19a0:	4f e7       	ldi	r20, 0x7F	; 127
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	8c 2f       	mov	r24, r28
    19a6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    19aa:	49 ed       	ldi	r20, 0xD9	; 217
    19ac:	60 e0       	ldi	r22, 0x00	; 0
    19ae:	8c 2f       	mov	r24, r28
    19b0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    19b4:	41 ef       	ldi	r20, 0xF1	; 241
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	8c 2f       	mov	r24, r28
    19ba:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    19be:	4b ed       	ldi	r20, 0xDB	; 219
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	8c 2f       	mov	r24, r28
    19c4:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    19c8:	40 e4       	ldi	r20, 0x40	; 64
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	8c 2f       	mov	r24, r28
    19ce:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    19d2:	48 e7       	ldi	r20, 0x78	; 120
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	8c 2f       	mov	r24, r28
    19d8:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    19dc:	48 e2       	ldi	r20, 0x28	; 40
    19de:	60 e0       	ldi	r22, 0x00	; 0
    19e0:	8c 2f       	mov	r24, r28
    19e2:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    19e6:	41 e0       	ldi	r20, 0x01	; 1
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	8c 2f       	mov	r24, r28
    19ec:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    19f0:	40 e8       	ldi	r20, 0x80	; 128
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	8c 2f       	mov	r24, r28
    19f6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    19fa:	4c e0       	ldi	r20, 0x0C	; 12
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	8c 2f       	mov	r24, r28
    1a00:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>

}
    1a04:	cf 91       	pop	r28
    1a06:	08 95       	ret

00001a08 <init_OLED>:
	Set up the two OLED displays
------------------------------------------------------------------------------*/
void init_OLED(void)
{

	reset_OLED();				// Need to start with a reset
    1a08:	0e 94 40 0c 	call	0x1880	; 0x1880 <reset_OLED>
	init_OLEDDISPLAY(0);
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <init_OLEDDISPLAY>
	init_OLEDDISPLAY(1);
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <init_OLEDDISPLAY>
    1a18:	2a e6       	ldi	r18, 0x6A	; 106
    1a1a:	84 e0       	ldi	r24, 0x04	; 4
    1a1c:	91 e0       	ldi	r25, 0x01	; 1
    1a1e:	21 50       	subi	r18, 0x01	; 1
    1a20:	80 40       	sbci	r24, 0x00	; 0
    1a22:	90 40       	sbci	r25, 0x00	; 0
    1a24:	e1 f7       	brne	.-8      	; 0x1a1e <init_OLED+0x16>
    1a26:	00 c0       	rjmp	.+0      	; 0x1a28 <init_OLED+0x20>
    1a28:	08 95       	ret

00001a2a <writestr_OLED>:
	
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.
------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1a2a:	ef 92       	push	r14
    1a2c:	ff 92       	push	r15
    1a2e:	0f 93       	push	r16
    1a30:	1f 93       	push	r17
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	e2 97       	sbiw	r28, 0x32	; 50
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    1a42:	91 e1       	ldi	r25, 0x11	; 17
    1a44:	e3 e6       	ldi	r30, 0x63	; 99
    1a46:	f6 ea       	ldi	r31, 0xA6	; 166
    1a48:	de 01       	movw	r26, r28
    1a4a:	92 96       	adiw	r26, 0x22	; 34
    1a4c:	01 90       	ld	r0, Z+
    1a4e:	0d 92       	st	X+, r0
    1a50:	9a 95       	dec	r25
    1a52:	e1 f7       	brne	.-8      	; 0x1a4c <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1a54:	81 11       	cpse	r24, r1
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1a58:	0c e3       	ldi	r16, 0x3C	; 60
    1a5a:	01 c0       	rjmp	.+2      	; 0x1a5e <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1a5c:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    1a5e:	ce 01       	movw	r24, r28
    1a60:	01 96       	adiw	r24, 0x01	; 1
    1a62:	7c 01       	movw	r14, r24
    1a64:	0e 94 f5 30 	call	0x61ea	; 0x61ea <strcpy>
	if (strlen(strbuf) > 16) {
    1a68:	f7 01       	movw	r30, r14
    1a6a:	01 90       	ld	r0, Z+
    1a6c:	00 20       	and	r0, r0
    1a6e:	e9 f7       	brne	.-6      	; 0x1a6a <writestr_OLED+0x40>
    1a70:	31 97       	sbiw	r30, 0x01	; 1
    1a72:	ee 19       	sub	r30, r14
    1a74:	ff 09       	sbc	r31, r15
    1a76:	71 97       	sbiw	r30, 0x11	; 17
    1a78:	08 f0       	brcs	.+2      	; 0x1a7c <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1a7a:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1a7c:	be 01       	movw	r22, r28
    1a7e:	6e 5d       	subi	r22, 0xDE	; 222
    1a80:	7f 4f       	sbci	r23, 0xFF	; 255
    1a82:	ce 01       	movw	r24, r28
    1a84:	01 96       	adiw	r24, 0x01	; 1
    1a86:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <strcat>

	if (lineno == 1) {
    1a8a:	11 30       	cpi	r17, 0x01	; 1
    1a8c:	39 f4       	brne	.+14     	; 0x1a9c <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    1a8e:	40 e8       	ldi	r20, 0x80	; 128
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	80 2f       	mov	r24, r16
    1a94:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1a98:	10 e0       	ldi	r17, 0x00	; 0
    1a9a:	12 c0       	rjmp	.+36     	; 0x1ac0 <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1a9c:	40 ec       	ldi	r20, 0xC0	; 192
    1a9e:	60 e0       	ldi	r22, 0x00	; 0
    1aa0:	80 2f       	mov	r24, r16
    1aa2:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>
    1aa6:	f8 cf       	rjmp	.-16     	; 0x1a98 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1aa8:	e1 e0       	ldi	r30, 0x01	; 1
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	ec 0f       	add	r30, r28
    1aae:	fd 1f       	adc	r31, r29
    1ab0:	e1 0f       	add	r30, r17
    1ab2:	f1 1d       	adc	r31, r1
    1ab4:	40 81       	ld	r20, Z
    1ab6:	60 e4       	ldi	r22, 0x40	; 64
    1ab8:	80 2f       	mov	r24, r16
    1aba:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    1abe:	1f 5f       	subi	r17, 0xFF	; 255
    1ac0:	10 31       	cpi	r17, 0x10	; 16
    1ac2:	90 f3       	brcs	.-28     	; 0x1aa8 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	80 93 16 2a 	sts	0x2A16, r24	; 0x802a16 <timerOLED>
    1acc:	90 93 17 2a 	sts	0x2A17, r25	; 0x802a17 <timerOLED+0x1>

}
    1ad0:	e2 96       	adiw	r28, 0x32	; 50
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	ff 90       	pop	r15
    1ae0:	ef 90       	pop	r14
    1ae2:	08 95       	ret

00001ae4 <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    1ae4:	1f 93       	push	r17
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	1f 92       	push	r1
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
    1af0:	18 2f       	mov	r17, r24

	char nullstr[] = "";
    1af2:	19 82       	std	Y+1, r1	; 0x01
	writestr_OLED(displaynumber, nullstr, 1);
    1af4:	41 e0       	ldi	r20, 0x01	; 1
    1af6:	be 01       	movw	r22, r28
    1af8:	6f 5f       	subi	r22, 0xFF	; 255
    1afa:	7f 4f       	sbci	r23, 0xFF	; 255
    1afc:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
    1b00:	42 e0       	ldi	r20, 0x02	; 2
    1b02:	be 01       	movw	r22, r28
    1b04:	6f 5f       	subi	r22, 0xFF	; 255
    1b06:	7f 4f       	sbci	r23, 0xFF	; 255
    1b08:	81 2f       	mov	r24, r17
    1b0a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <writestr_OLED>
	timerOLED = 0;
    1b0e:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerOLED>
    1b12:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <timerOLED+0x1>

}
    1b16:	0f 90       	pop	r0
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	08 95       	ret

00001b20 <read_PNEUSensors>:
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
{
    1b20:	cf 92       	push	r12
    1b22:	df 92       	push	r13
    1b24:	ef 92       	push	r14
    1b26:	ff 92       	push	r15
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	6c 01       	movw	r12, r24
    1b32:	8b 01       	movw	r16, r22
    1b34:	7a 01       	movw	r14, r20
    1b36:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);	// NEEDS ERRORCHECK
    1b38:	69 e0       	ldi	r22, 0x09	; 9
    1b3a:	81 e2       	ldi	r24, 0x21	; 33
    1b3c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1b40:	98 2f       	mov	r25, r24
    1b42:	92 95       	swap	r25
    1b44:	96 95       	lsr	r25
    1b46:	96 95       	lsr	r25
    1b48:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    1b4a:	91 30       	cpi	r25, 0x01	; 1
    1b4c:	21 f4       	brne	.+8      	; 0x1b56 <read_PNEUSensors+0x36>
		*shutter = 'c';
    1b4e:	93 e6       	ldi	r25, 0x63	; 99
    1b50:	f6 01       	movw	r30, r12
    1b52:	90 83       	st	Z, r25
    1b54:	0f c0       	rjmp	.+30     	; 0x1b74 <read_PNEUSensors+0x54>
	} else if (state == 2) {
    1b56:	92 30       	cpi	r25, 0x02	; 2
    1b58:	21 f4       	brne	.+8      	; 0x1b62 <read_PNEUSensors+0x42>
		*shutter = 'o';
    1b5a:	9f e6       	ldi	r25, 0x6F	; 111
    1b5c:	f6 01       	movw	r30, r12
    1b5e:	90 83       	st	Z, r25
    1b60:	09 c0       	rjmp	.+18     	; 0x1b74 <read_PNEUSensors+0x54>
	} else if (state == 3) {
    1b62:	93 30       	cpi	r25, 0x03	; 3
    1b64:	21 f4       	brne	.+8      	; 0x1b6e <read_PNEUSensors+0x4e>
		*shutter = 't';
    1b66:	94 e7       	ldi	r25, 0x74	; 116
    1b68:	f6 01       	movw	r30, r12
    1b6a:	90 83       	st	Z, r25
    1b6c:	03 c0       	rjmp	.+6      	; 0x1b74 <read_PNEUSensors+0x54>
	} else {
		*shutter = 'x';
    1b6e:	98 e7       	ldi	r25, 0x78	; 120
    1b70:	f6 01       	movw	r30, r12
    1b72:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1b74:	98 2f       	mov	r25, r24
    1b76:	96 95       	lsr	r25
    1b78:	96 95       	lsr	r25
	state &= 0b00000011;
    1b7a:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1b7c:	91 30       	cpi	r25, 0x01	; 1
    1b7e:	21 f4       	brne	.+8      	; 0x1b88 <read_PNEUSensors+0x68>
		*right = 'c';
    1b80:	93 e6       	ldi	r25, 0x63	; 99
    1b82:	f7 01       	movw	r30, r14
    1b84:	90 83       	st	Z, r25
    1b86:	0f c0       	rjmp	.+30     	; 0x1ba6 <read_PNEUSensors+0x86>
	} else if (state == 2) {
    1b88:	92 30       	cpi	r25, 0x02	; 2
    1b8a:	21 f4       	brne	.+8      	; 0x1b94 <read_PNEUSensors+0x74>
		*right = 'o';
    1b8c:	9f e6       	ldi	r25, 0x6F	; 111
    1b8e:	f7 01       	movw	r30, r14
    1b90:	90 83       	st	Z, r25
    1b92:	09 c0       	rjmp	.+18     	; 0x1ba6 <read_PNEUSensors+0x86>
	} else if (state == 3) {
    1b94:	93 30       	cpi	r25, 0x03	; 3
    1b96:	21 f4       	brne	.+8      	; 0x1ba0 <read_PNEUSensors+0x80>
		*right = 't';
    1b98:	94 e7       	ldi	r25, 0x74	; 116
    1b9a:	f7 01       	movw	r30, r14
    1b9c:	90 83       	st	Z, r25
    1b9e:	03 c0       	rjmp	.+6      	; 0x1ba6 <read_PNEUSensors+0x86>
	} else {
		*right = 'x';
    1ba0:	98 e7       	ldi	r25, 0x78	; 120
    1ba2:	f7 01       	movw	r30, r14
    1ba4:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1ba6:	98 2f       	mov	r25, r24
    1ba8:	92 95       	swap	r25
    1baa:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    1bac:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1bae:	91 30       	cpi	r25, 0x01	; 1
    1bb0:	21 f4       	brne	.+8      	; 0x1bba <read_PNEUSensors+0x9a>
		*left = 'o';
    1bb2:	9f e6       	ldi	r25, 0x6F	; 111
    1bb4:	f8 01       	movw	r30, r16
    1bb6:	90 83       	st	Z, r25
    1bb8:	0f c0       	rjmp	.+30     	; 0x1bd8 <read_PNEUSensors+0xb8>
	} else if (state == 2) {
    1bba:	92 30       	cpi	r25, 0x02	; 2
    1bbc:	21 f4       	brne	.+8      	; 0x1bc6 <read_PNEUSensors+0xa6>
		*left = 'c';
    1bbe:	93 e6       	ldi	r25, 0x63	; 99
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	90 83       	st	Z, r25
    1bc4:	09 c0       	rjmp	.+18     	; 0x1bd8 <read_PNEUSensors+0xb8>
	} else if (state == 3) {
    1bc6:	93 30       	cpi	r25, 0x03	; 3
    1bc8:	21 f4       	brne	.+8      	; 0x1bd2 <read_PNEUSensors+0xb2>
		*left = 't';
    1bca:	94 e7       	ldi	r25, 0x74	; 116
    1bcc:	f8 01       	movw	r30, r16
    1bce:	90 83       	st	Z, r25
    1bd0:	03 c0       	rjmp	.+6      	; 0x1bd8 <read_PNEUSensors+0xb8>
	} else {
		*left = 'x';
    1bd2:	98 e7       	ldi	r25, 0x78	; 120
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1bd8:	81 ff       	sbrs	r24, 1
    1bda:	03 c0       	rjmp	.+6      	; 0x1be2 <read_PNEUSensors+0xc2>
		*air = '0';
    1bdc:	80 e3       	ldi	r24, 0x30	; 48
    1bde:	88 83       	st	Y, r24
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <read_PNEUSensors+0xc6>
	} else {
		*air = '1';
    1be2:	81 e3       	ldi	r24, 0x31	; 49
    1be4:	88 83       	st	Y, r24
	}
}
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
    1bee:	ff 90       	pop	r15
    1bf0:	ef 90       	pop	r14
    1bf2:	df 90       	pop	r13
    1bf4:	cf 90       	pop	r12
    1bf6:	08 95       	ret

00001bf8 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	d8 2f       	mov	r29, r24
    1bfe:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    1c00:	69 e0       	ldi	r22, 0x09	; 9
    1c02:	84 e2       	ldi	r24, 0x24	; 36
    1c04:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    1c08:	8d 2b       	or	r24, r29
    1c0a:	48 2f       	mov	r20, r24
    1c0c:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1c0e:	6a e0       	ldi	r22, 0x0A	; 10
    1c10:	84 e2       	ldi	r24, 0x24	; 36
    1c12:	0e 94 2a 0a 	call	0x1454	; 0x1454 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	08 95       	ret

00001c1c <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(uint8_t cstack)
{
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	6a 97       	sbiw	r28, 0x1a	; 26
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    1c2a:	99 e0       	ldi	r25, 0x09	; 9
    1c2c:	ee ea       	ldi	r30, 0xAE	; 174
    1c2e:	f6 ea       	ldi	r31, 0xA6	; 166
    1c30:	de 01       	movw	r26, r28
    1c32:	11 96       	adiw	r26, 0x01	; 1
    1c34:	01 90       	ld	r0, Z+
    1c36:	0d 92       	st	X+, r0
    1c38:	9a 95       	dec	r25
    1c3a:	e1 f7       	brne	.-8      	; 0x1c34 <close_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1c3c:	24 e3       	ldi	r18, 0x34	; 52
    1c3e:	82 9f       	mul	r24, r18
    1c40:	c0 01       	movw	r24, r0
    1c42:	11 24       	eor	r1, r1
    1c44:	fc 01       	movw	r30, r24
    1c46:	e3 5f       	subi	r30, 0xF3	; 243
    1c48:	f7 4d       	sbci	r31, 0xD7	; 215
    1c4a:	81 81       	ldd	r24, Z+1	; 0x01
    1c4c:	8c 36       	cpi	r24, 0x6C	; 108
    1c4e:	31 f1       	breq	.+76     	; 0x1c9c <close_PNEU+0x80>
    1c50:	18 f4       	brcc	.+6      	; 0x1c58 <close_PNEU+0x3c>
    1c52:	82 36       	cpi	r24, 0x62	; 98
    1c54:	39 f0       	breq	.+14     	; 0x1c64 <close_PNEU+0x48>
    1c56:	6a c0       	rjmp	.+212    	; 0x1d2c <close_PNEU+0x110>
    1c58:	82 37       	cpi	r24, 0x72	; 114
    1c5a:	c1 f1       	breq	.+112    	; 0x1ccc <close_PNEU+0xb0>
    1c5c:	83 37       	cpi	r24, 0x73	; 115
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <close_PNEU+0x46>
    1c60:	4d c0       	rjmp	.+154    	; 0x1cfc <close_PNEU+0xe0>
    1c62:	64 c0       	rjmp	.+200    	; 0x1d2c <close_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1c64:	6a ee       	ldi	r22, 0xEA	; 234
    1c66:	84 e4       	ldi	r24, 0x44	; 68
    1c68:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1c6c:	66 ee       	ldi	r22, 0xE6	; 230
    1c6e:	88 e8       	ldi	r24, 0x88	; 136
    1c70:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1c74:	84 e7       	ldi	r24, 0x74	; 116
    1c76:	96 ea       	ldi	r25, 0xA6	; 166
    1c78:	9f 93       	push	r25
    1c7a:	8f 93       	push	r24
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	9f 93       	push	r25
    1c82:	8f 93       	push	r24
    1c84:	09 96       	adiw	r24, 0x09	; 9
    1c86:	9f 93       	push	r25
    1c88:	8f 93       	push	r24
    1c8a:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			break;
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	59 c0       	rjmp	.+178    	; 0x1d4e <close_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1c9c:	6a ee       	ldi	r22, 0xEA	; 234
    1c9e:	84 e4       	ldi	r24, 0x44	; 68
    1ca0:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1ca4:	89 e7       	ldi	r24, 0x79	; 121
    1ca6:	96 ea       	ldi	r25, 0xA6	; 166
    1ca8:	9f 93       	push	r25
    1caa:	8f 93       	push	r24
    1cac:	ce 01       	movw	r24, r28
    1cae:	01 96       	adiw	r24, 0x01	; 1
    1cb0:	9f 93       	push	r25
    1cb2:	8f 93       	push	r24
    1cb4:	09 96       	adiw	r24, 0x09	; 9
    1cb6:	9f 93       	push	r25
    1cb8:	8f 93       	push	r24
    1cba:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			break;
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	41 c0       	rjmp	.+130    	; 0x1d4e <close_PNEU+0x132>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1ccc:	66 ee       	ldi	r22, 0xE6	; 230
    1cce:	88 e8       	ldi	r24, 0x88	; 136
    1cd0:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1cd4:	8e e7       	ldi	r24, 0x7E	; 126
    1cd6:	96 ea       	ldi	r25, 0xA6	; 166
    1cd8:	9f 93       	push	r25
    1cda:	8f 93       	push	r24
    1cdc:	ce 01       	movw	r24, r28
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	9f 93       	push	r25
    1ce2:	8f 93       	push	r24
    1ce4:	09 96       	adiw	r24, 0x09	; 9
    1ce6:	9f 93       	push	r25
    1ce8:	8f 93       	push	r24
    1cea:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			break;
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	29 c0       	rjmp	.+82     	; 0x1d4e <close_PNEU+0x132>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1cfc:	6c ee       	ldi	r22, 0xEC	; 236
    1cfe:	82 e2       	ldi	r24, 0x22	; 34
    1d00:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1d04:	84 e8       	ldi	r24, 0x84	; 132
    1d06:	96 ea       	ldi	r25, 0xA6	; 166
    1d08:	9f 93       	push	r25
    1d0a:	8f 93       	push	r24
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	01 96       	adiw	r24, 0x01	; 1
    1d10:	9f 93       	push	r25
    1d12:	8f 93       	push	r24
    1d14:	09 96       	adiw	r24, 0x09	; 9
    1d16:	9f 93       	push	r25
    1d18:	8f 93       	push	r24
    1d1a:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			break;
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	11 c0       	rjmp	.+34     	; 0x1d4e <close_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "close_PNEU bad object");
    1d2c:	6c e8       	ldi	r22, 0x8C	; 140
    1d2e:	76 ea       	ldi	r23, 0xA6	; 166
    1d30:	85 ef       	ldi	r24, 0xF5	; 245
    1d32:	91 e0       	ldi	r25, 0x01	; 1
    1d34:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			strcpy(outbuf, "close what?");
    1d38:	8c e0       	ldi	r24, 0x0C	; 12
    1d3a:	e2 ea       	ldi	r30, 0xA2	; 162
    1d3c:	f6 ea       	ldi	r31, 0xA6	; 166
    1d3e:	de 01       	movw	r26, r28
    1d40:	1a 96       	adiw	r26, 0x0a	; 10
    1d42:	01 90       	ld	r0, Z+
    1d44:	0d 92       	st	X+, r0
    1d46:	8a 95       	dec	r24
    1d48:	e1 f7       	brne	.-8      	; 0x1d42 <close_PNEU+0x126>
			return(ERROR);
    1d4a:	83 e6       	ldi	r24, 0x63	; 99
    1d4c:	0b c0       	rjmp	.+22     	; 0x1d64 <close_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1d54:	41 e0       	ldi	r20, 0x01	; 1
    1d56:	be 01       	movw	r22, r28
    1d58:	66 5f       	subi	r22, 0xF6	; 246
    1d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <writestr_OLED>
	return(NOERROR);
    1d62:	80 e0       	ldi	r24, 0x00	; 0

}
    1d64:	6a 96       	adiw	r28, 0x1a	; 26
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	08 95       	ret

00001d70 <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(uint8_t cstack)
{
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	69 97       	sbiw	r28, 0x19	; 25
    1d7a:	cd bf       	out	0x3d, r28	; 61
    1d7c:	de bf       	out	0x3e, r29	; 62

	const char dformat_OPE[] = "Open %s";
    1d7e:	98 e0       	ldi	r25, 0x08	; 8
    1d80:	e7 ed       	ldi	r30, 0xD7	; 215
    1d82:	f6 ea       	ldi	r31, 0xA6	; 166
    1d84:	de 01       	movw	r26, r28
    1d86:	11 96       	adiw	r26, 0x01	; 1
    1d88:	01 90       	ld	r0, Z+
    1d8a:	0d 92       	st	X+, r0
    1d8c:	9a 95       	dec	r25
    1d8e:	e1 f7       	brne	.-8      	; 0x1d88 <open_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1d90:	24 e3       	ldi	r18, 0x34	; 52
    1d92:	82 9f       	mul	r24, r18
    1d94:	c0 01       	movw	r24, r0
    1d96:	11 24       	eor	r1, r1
    1d98:	fc 01       	movw	r30, r24
    1d9a:	e3 5f       	subi	r30, 0xF3	; 243
    1d9c:	f7 4d       	sbci	r31, 0xD7	; 215
    1d9e:	81 81       	ldd	r24, Z+1	; 0x01
    1da0:	8c 36       	cpi	r24, 0x6C	; 108
    1da2:	31 f1       	breq	.+76     	; 0x1df0 <open_PNEU+0x80>
    1da4:	18 f4       	brcc	.+6      	; 0x1dac <open_PNEU+0x3c>
    1da6:	82 36       	cpi	r24, 0x62	; 98
    1da8:	39 f0       	breq	.+14     	; 0x1db8 <open_PNEU+0x48>
    1daa:	6a c0       	rjmp	.+212    	; 0x1e80 <open_PNEU+0x110>
    1dac:	82 37       	cpi	r24, 0x72	; 114
    1dae:	c1 f1       	breq	.+112    	; 0x1e20 <open_PNEU+0xb0>
    1db0:	83 37       	cpi	r24, 0x73	; 115
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <open_PNEU+0x46>
    1db4:	4d c0       	rjmp	.+154    	; 0x1e50 <open_PNEU+0xe0>
    1db6:	64 c0       	rjmp	.+200    	; 0x1e80 <open_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1db8:	6e ea       	ldi	r22, 0xAE	; 174
    1dba:	84 e4       	ldi	r24, 0x44	; 68
    1dbc:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1dc0:	6e e6       	ldi	r22, 0x6E	; 110
    1dc2:	88 e8       	ldi	r24, 0x88	; 136
    1dc4:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1dc8:	84 e7       	ldi	r24, 0x74	; 116
    1dca:	96 ea       	ldi	r25, 0xA6	; 166
    1dcc:	9f 93       	push	r25
    1dce:	8f 93       	push	r24
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	01 96       	adiw	r24, 0x01	; 1
    1dd4:	9f 93       	push	r25
    1dd6:	8f 93       	push	r24
    1dd8:	08 96       	adiw	r24, 0x08	; 8
    1dda:	9f 93       	push	r25
    1ddc:	8f 93       	push	r24
    1dde:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			break;
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	59 c0       	rjmp	.+178    	; 0x1ea2 <open_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1df0:	6e ea       	ldi	r22, 0xAE	; 174
    1df2:	84 e4       	ldi	r24, 0x44	; 68
    1df4:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1df8:	89 e7       	ldi	r24, 0x79	; 121
    1dfa:	96 ea       	ldi	r25, 0xA6	; 166
    1dfc:	9f 93       	push	r25
    1dfe:	8f 93       	push	r24
    1e00:	ce 01       	movw	r24, r28
    1e02:	01 96       	adiw	r24, 0x01	; 1
    1e04:	9f 93       	push	r25
    1e06:	8f 93       	push	r24
    1e08:	08 96       	adiw	r24, 0x08	; 8
    1e0a:	9f 93       	push	r25
    1e0c:	8f 93       	push	r24
    1e0e:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			break;
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	41 c0       	rjmp	.+130    	; 0x1ea2 <open_PNEU+0x132>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1e20:	6e e6       	ldi	r22, 0x6E	; 110
    1e22:	88 e8       	ldi	r24, 0x88	; 136
    1e24:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1e28:	8e e7       	ldi	r24, 0x7E	; 126
    1e2a:	96 ea       	ldi	r25, 0xA6	; 166
    1e2c:	9f 93       	push	r25
    1e2e:	8f 93       	push	r24
    1e30:	ce 01       	movw	r24, r28
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	9f 93       	push	r25
    1e36:	8f 93       	push	r24
    1e38:	08 96       	adiw	r24, 0x08	; 8
    1e3a:	9f 93       	push	r25
    1e3c:	8f 93       	push	r24
    1e3e:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			break;
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	29 c0       	rjmp	.+82     	; 0x1ea2 <open_PNEU+0x132>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1e50:	6e ec       	ldi	r22, 0xCE	; 206
    1e52:	82 e2       	ldi	r24, 0x22	; 34
    1e54:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1e58:	84 e8       	ldi	r24, 0x84	; 132
    1e5a:	96 ea       	ldi	r25, 0xA6	; 166
    1e5c:	9f 93       	push	r25
    1e5e:	8f 93       	push	r24
    1e60:	ce 01       	movw	r24, r28
    1e62:	01 96       	adiw	r24, 0x01	; 1
    1e64:	9f 93       	push	r25
    1e66:	8f 93       	push	r24
    1e68:	08 96       	adiw	r24, 0x08	; 8
    1e6a:	9f 93       	push	r25
    1e6c:	8f 93       	push	r24
    1e6e:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			break;
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	11 c0       	rjmp	.+34     	; 0x1ea2 <open_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "open_PNEU bad object");
    1e80:	67 eb       	ldi	r22, 0xB7	; 183
    1e82:	76 ea       	ldi	r23, 0xA6	; 166
    1e84:	85 ef       	ldi	r24, 0xF5	; 245
    1e86:	91 e0       	ldi	r25, 0x01	; 1
    1e88:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			strcpy(outbuf, "open what?");
    1e8c:	8b e0       	ldi	r24, 0x0B	; 11
    1e8e:	ec ec       	ldi	r30, 0xCC	; 204
    1e90:	f6 ea       	ldi	r31, 0xA6	; 166
    1e92:	de 01       	movw	r26, r28
    1e94:	19 96       	adiw	r26, 0x09	; 9
    1e96:	01 90       	ld	r0, Z+
    1e98:	0d 92       	st	X+, r0
    1e9a:	8a 95       	dec	r24
    1e9c:	e1 f7       	brne	.-8      	; 0x1e96 <open_PNEU+0x126>
			return(ERROR);
    1e9e:	83 e6       	ldi	r24, 0x63	; 99
    1ea0:	0b c0       	rjmp	.+22     	; 0x1eb8 <open_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	be 01       	movw	r22, r28
    1eac:	67 5f       	subi	r22, 0xF7	; 247
    1eae:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <writestr_OLED>
	return(NOERROR);
    1eb6:	80 e0       	ldi	r24, 0x00	; 0

}
    1eb8:	69 96       	adiw	r28, 0x19	; 25
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	08 95       	ret

00001ec4 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1ec4:	1f 92       	push	r1
    1ec6:	0f 92       	push	r0
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	0f 92       	push	r0
    1ecc:	11 24       	eor	r1, r1
    1ece:	2f 93       	push	r18
    1ed0:	3f 93       	push	r19
    1ed2:	4f 93       	push	r20
    1ed4:	5f 93       	push	r21
    1ed6:	6f 93       	push	r22
    1ed8:	7f 93       	push	r23
    1eda:	8f 93       	push	r24
    1edc:	9f 93       	push	r25
    1ede:	af 93       	push	r26
    1ee0:	bf 93       	push	r27
    1ee2:	ef 93       	push	r30
    1ee4:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1ee6:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1eea:	88 23       	and	r24, r24
    1eec:	4c f4       	brge	.+18     	; 0x1f00 <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1eee:	80 e8       	ldi	r24, 0x80	; 128
    1ef0:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1ef4:	68 e0       	ldi	r22, 0x08	; 8
    1ef6:	81 e2       	ldi	r24, 0x21	; 33
    1ef8:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <read_MCP23008>
    1efc:	80 93 18 2a 	sts	0x2A18, r24	; 0x802a18 <pneuState>
	}

}
    1f00:	ff 91       	pop	r31
    1f02:	ef 91       	pop	r30
    1f04:	bf 91       	pop	r27
    1f06:	af 91       	pop	r26
    1f08:	9f 91       	pop	r25
    1f0a:	8f 91       	pop	r24
    1f0c:	7f 91       	pop	r23
    1f0e:	6f 91       	pop	r22
    1f10:	5f 91       	pop	r21
    1f12:	4f 91       	pop	r20
    1f14:	3f 91       	pop	r19
    1f16:	2f 91       	pop	r18
    1f18:	0f 90       	pop	r0
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	0f 90       	pop	r0
    1f1e:	1f 90       	pop	r1
    1f20:	18 95       	reti

00001f22 <init_PORTS>:
void init_PORTS(void)
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTB.DIRSET = PIN2_bm;		// Beeper
    1f22:	84 e0       	ldi	r24, 0x04	; 4
    1f24:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7f4421>
	PORTF.DIRCLR = PIN2_bm;		// specID jumper
    1f28:	e0 ea       	ldi	r30, 0xA0	; 160
    1f2a:	f4 e0       	ldi	r31, 0x04	; 4
    1f2c:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRSET = PIN5_bm;		// On-board LED
    1f2e:	80 e2       	ldi	r24, 0x20	; 32
    1f30:	81 83       	std	Z+1, r24	; 0x01
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton
    1f32:	8b e0       	ldi	r24, 0x0B	; 11
    1f34:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.OUTCLR = PIN3_bm;		// Reset the XPort
    1f36:	e0 e4       	ldi	r30, 0x40	; 64
    1f38:	f4 e0       	ldi	r31, 0x04	; 4
    1f3a:	88 e0       	ldi	r24, 0x08	; 8
    1f3c:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;		// Set XPort reset pin as output
    1f3e:	81 83       	std	Z+1, r24	; 0x01
    1f40:	ad e8       	ldi	r26, 0x8D	; 141
    1f42:	b0 e2       	ldi	r27, 0x20	; 32
    1f44:	11 97       	sbiw	r26, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <init_PORTS+0x22>
    1f48:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;		// Enable the XPort
    1f4a:	85 83       	std	Z+5, r24	; 0x05
    1f4c:	08 95       	ret

00001f4e <report>:

	Returns:
		ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1f4e:	2f 92       	push	r2
    1f50:	3f 92       	push	r3
    1f52:	4f 92       	push	r4
    1f54:	5f 92       	push	r5
    1f56:	6f 92       	push	r6
    1f58:	7f 92       	push	r7
    1f5a:	8f 92       	push	r8
    1f5c:	9f 92       	push	r9
    1f5e:	af 92       	push	r10
    1f60:	bf 92       	push	r11
    1f62:	cf 92       	push	r12
    1f64:	df 92       	push	r13
    1f66:	ef 92       	push	r14
    1f68:	ff 92       	push	r15
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	c1 57       	subi	r28, 0x71	; 113
    1f78:	d3 40       	sbci	r29, 0x03	; 3
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "ENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
    1f7e:	95 e4       	ldi	r25, 0x45	; 69
    1f80:	e9 e2       	ldi	r30, 0x29	; 41
    1f82:	f8 ea       	ldi	r31, 0xA8	; 168
    1f84:	de 01       	movw	r26, r28
    1f86:	a6 5b       	subi	r26, 0xB6	; 182
    1f88:	be 4f       	sbci	r27, 0xFE	; 254
    1f8a:	01 90       	ld	r0, Z+
    1f8c:	0d 92       	st	X+, r0
    1f8e:	9a 95       	dec	r25
    1f90:	e1 f7       	brne	.-8      	; 0x1f8a <report+0x3c>
	const char format_MTR[] = "MTR,%s,%c,%ld,um,%ld,um/s,%d,mA,%s";
    1f92:	93 e2       	ldi	r25, 0x23	; 35
    1f94:	ee e6       	ldi	r30, 0x6E	; 110
    1f96:	f8 ea       	ldi	r31, 0xA8	; 168
    1f98:	de 01       	movw	r26, r28
    1f9a:	a1 57       	subi	r26, 0x71	; 113
    1f9c:	be 4f       	sbci	r27, 0xFE	; 254
    1f9e:	01 90       	ld	r0, Z+
    1fa0:	0d 92       	st	X+, r0
    1fa2:	9a 95       	dec	r25
    1fa4:	e1 f7       	brne	.-8      	; 0x1f9e <report+0x50>
	const char format_MT0[] = "ETI,%s,Mtr %c,%3.1f,V,%3.1f,C,%ld,mA,0x%02x,S4,%s";
    1fa6:	92 e3       	ldi	r25, 0x32	; 50
    1fa8:	e1 e9       	ldi	r30, 0x91	; 145
    1faa:	f8 ea       	ldi	r31, 0xA8	; 168
    1fac:	de 01       	movw	r26, r28
    1fae:	ae 54       	subi	r26, 0x4E	; 78
    1fb0:	be 4f       	sbci	r27, 0xFE	; 254
    1fb2:	01 90       	ld	r0, Z+
    1fb4:	0d 92       	st	X+, r0
    1fb6:	9a 95       	dec	r25
    1fb8:	e1 f7       	brne	.-8      	; 0x1fb2 <report+0x64>
	const char format_MT1[] = "PID,%s,Mtr %c,%.2f,P,%.3f,I,%.2f,D,%ld,maxInt,%s";
    1fba:	91 e3       	ldi	r25, 0x31	; 49
    1fbc:	e3 ec       	ldi	r30, 0xC3	; 195
    1fbe:	f8 ea       	ldi	r31, 0xA8	; 168
    1fc0:	de 01       	movw	r26, r28
    1fc2:	ac 51       	subi	r26, 0x1C	; 28
    1fc4:	be 4f       	sbci	r27, 0xFE	; 254
    1fc6:	01 90       	ld	r0, Z+
    1fc8:	0d 92       	st	X+, r0
    1fca:	9a 95       	dec	r25
    1fcc:	e1 f7       	brne	.-8      	; 0x1fc6 <report+0x78>
	const char format_MT2[] = "DMM,%s,Mtr %c,%ld,dead,%ld,minP,%ld,maxP,%ld,qpps,%s";
    1fce:	95 e3       	ldi	r25, 0x35	; 53
    1fd0:	e4 ef       	ldi	r30, 0xF4	; 244
    1fd2:	f8 ea       	ldi	r31, 0xA8	; 168
    1fd4:	de 01       	movw	r26, r28
    1fd6:	ab 5e       	subi	r26, 0xEB	; 235
    1fd8:	bd 4f       	sbci	r27, 0xFD	; 253
    1fda:	01 90       	ld	r0, Z+
    1fdc:	0d 92       	st	X+, r0
    1fde:	9a 95       	dec	r25
    1fe0:	e1 f7       	brne	.-8      	; 0x1fda <report+0x8c>
	const char format_ORI[] = "ORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1fe2:	9c e1       	ldi	r25, 0x1C	; 28
    1fe4:	e9 e2       	ldi	r30, 0x29	; 41
    1fe6:	f9 ea       	ldi	r31, 0xA9	; 169
    1fe8:	de 01       	movw	r26, r28
    1fea:	a6 5b       	subi	r26, 0xB6	; 182
    1fec:	bd 4f       	sbci	r27, 0xFD	; 253
    1fee:	01 90       	ld	r0, Z+
    1ff0:	0d 92       	st	X+, r0
    1ff2:	9a 95       	dec	r25
    1ff4:	e1 f7       	brne	.-8      	; 0x1fee <report+0xa0>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1ff6:	92 e1       	ldi	r25, 0x12	; 18
    1ff8:	e5 e4       	ldi	r30, 0x45	; 69
    1ffa:	f9 ea       	ldi	r31, 0xA9	; 169
    1ffc:	de 01       	movw	r26, r28
    1ffe:	aa 59       	subi	r26, 0x9A	; 154
    2000:	bd 4f       	sbci	r27, 0xFD	; 253
    2002:	01 90       	ld	r0, Z+
    2004:	0d 92       	st	X+, r0
    2006:	9a 95       	dec	r25
    2008:	e1 f7       	brne	.-8      	; 0x2002 <report+0xb4>
	const char format_PNU[] = "PNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    200a:	9d e2       	ldi	r25, 0x2D	; 45
    200c:	e7 e5       	ldi	r30, 0x57	; 87
    200e:	f9 ea       	ldi	r31, 0xA9	; 169
    2010:	de 01       	movw	r26, r28
    2012:	a8 58       	subi	r26, 0x88	; 136
    2014:	bd 4f       	sbci	r27, 0xFD	; 253
    2016:	01 90       	ld	r0, Z+
    2018:	0d 92       	st	X+, r0
    201a:	9a 95       	dec	r25
    201c:	e1 f7       	brne	.-8      	; 0x2016 <report+0xc8>
	const char dformat_PN1[] = "Left:%c   Right:%c";
    201e:	93 e1       	ldi	r25, 0x13	; 19
    2020:	e4 e8       	ldi	r30, 0x84	; 132
    2022:	f9 ea       	ldi	r31, 0xA9	; 169
    2024:	de 01       	movw	r26, r28
    2026:	ab 55       	subi	r26, 0x5B	; 91
    2028:	bd 4f       	sbci	r27, 0xFD	; 253
    202a:	01 90       	ld	r0, Z+
    202c:	0d 92       	st	X+, r0
    202e:	9a 95       	dec	r25
    2030:	e1 f7       	brne	.-8      	; 0x202a <report+0xdc>
	const char dformat_PN2[] = "Shutter:%c  Air:%c";
    2032:	93 e1       	ldi	r25, 0x13	; 19
    2034:	e7 e9       	ldi	r30, 0x97	; 151
    2036:	f9 ea       	ldi	r31, 0xA9	; 169
    2038:	de 01       	movw	r26, r28
    203a:	a8 54       	subi	r26, 0x48	; 72
    203c:	bd 4f       	sbci	r27, 0xFD	; 253
    203e:	01 90       	ld	r0, Z+
    2040:	0d 92       	st	X+, r0
    2042:	9a 95       	dec	r25
    2044:	e1 f7       	brne	.-8      	; 0x203e <report+0xf0>
	const char format_TIM[] = "TIM,%s,%s,set,%s,boot,%s";
    2046:	99 e1       	ldi	r25, 0x19	; 25
    2048:	ea ea       	ldi	r30, 0xAA	; 170
    204a:	f9 ea       	ldi	r31, 0xA9	; 169
    204c:	de 01       	movw	r26, r28
    204e:	a5 53       	subi	r26, 0x35	; 53
    2050:	bd 4f       	sbci	r27, 0xFD	; 253
    2052:	01 90       	ld	r0, Z+
    2054:	0d 92       	st	X+, r0
    2056:	9a 95       	dec	r25
    2058:	e1 f7       	brne	.-8      	; 0x2052 <report+0x104>
	const char format_VAC[] = "VAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    205a:	95 e2       	ldi	r25, 0x25	; 37
    205c:	e3 ec       	ldi	r30, 0xC3	; 195
    205e:	f9 ea       	ldi	r31, 0xA9	; 169
    2060:	de 01       	movw	r26, r28
    2062:	ac 51       	subi	r26, 0x1C	; 28
    2064:	bd 4f       	sbci	r27, 0xFD	; 253
    2066:	01 90       	ld	r0, Z+
    2068:	0d 92       	st	X+, r0
    206a:	9a 95       	dec	r25
    206c:	e1 f7       	brne	.-8      	; 0x2066 <report+0x118>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    206e:	9d e0       	ldi	r25, 0x0D	; 13
    2070:	e8 ee       	ldi	r30, 0xE8	; 232
    2072:	f9 ea       	ldi	r31, 0xA9	; 169
    2074:	de 01       	movw	r26, r28
    2076:	a7 5f       	subi	r26, 0xF7	; 247
    2078:	bc 4f       	sbci	r27, 0xFC	; 252
    207a:	01 90       	ld	r0, Z+
    207c:	0d 92       	st	X+, r0
    207e:	9a 95       	dec	r25
    2080:	e1 f7       	brne	.-8      	; 0x207a <report+0x12c>
	const char format_VER[] = "VER,%s,%s,%s";
    2082:	9d e0       	ldi	r25, 0x0D	; 13
    2084:	e5 ef       	ldi	r30, 0xF5	; 245
    2086:	f9 ea       	ldi	r31, 0xA9	; 169
    2088:	de 01       	movw	r26, r28
    208a:	aa 5e       	subi	r26, 0xEA	; 234
    208c:	bc 4f       	sbci	r27, 0xFC	; 252
    208e:	01 90       	ld	r0, Z+
    2090:	0d 92       	st	X+, r0
    2092:	9a 95       	dec	r25
    2094:	e1 f7       	brne	.-8      	; 0x208e <report+0x140>
	uint16_t motorCurrent;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	PID pid;

	switch(pcmd[cstack].cobject) {
    2096:	08 2f       	mov	r16, r24
    2098:	10 e0       	ldi	r17, 0x00	; 0
    209a:	84 e3       	ldi	r24, 0x34	; 52
    209c:	80 9f       	mul	r24, r16
    209e:	f0 01       	movw	r30, r0
    20a0:	81 9f       	mul	r24, r17
    20a2:	f0 0d       	add	r31, r0
    20a4:	11 24       	eor	r1, r1
    20a6:	e3 5f       	subi	r30, 0xF3	; 243
    20a8:	f7 4d       	sbci	r31, 0xD7	; 215
    20aa:	e1 81       	ldd	r30, Z+1	; 0x01
    20ac:	8e 2f       	mov	r24, r30
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	fc 01       	movw	r30, r24
    20b2:	e1 54       	subi	r30, 0x41	; 65
    20b4:	f1 09       	sbc	r31, r1
    20b6:	e6 33       	cpi	r30, 0x36	; 54
    20b8:	f1 05       	cpc	r31, r1
    20ba:	08 f0       	brcs	.+2      	; 0x20be <report+0x170>
    20bc:	f8 c5       	rjmp	.+3056   	; 0x2cae <report+0xd60>
    20be:	e4 58       	subi	r30, 0x84	; 132
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	0c 94 3b 2f 	jmp	0x5e76	; 0x5e76 <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    20c6:	ce 01       	movw	r24, r28
    20c8:	86 5f       	subi	r24, 0xF6	; 246
    20ca:	9e 4f       	sbci	r25, 0xFE	; 254
    20cc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
			controller = pcmd[cstack].cobject + 63;
    20d0:	84 e3       	ldi	r24, 0x34	; 52
    20d2:	80 9f       	mul	r24, r16
    20d4:	f0 01       	movw	r30, r0
    20d6:	81 9f       	mul	r24, r17
    20d8:	f0 0d       	add	r31, r0
    20da:	11 24       	eor	r1, r1
    20dc:	e3 5f       	subi	r30, 0xF3	; 243
    20de:	f7 4d       	sbci	r31, 0xD7	; 215
    20e0:	d1 80       	ldd	r13, Z+1	; 0x01
    20e2:	0f 2e       	mov	r0, r31
    20e4:	ff e3       	ldi	r31, 0x3F	; 63
    20e6:	ef 2e       	mov	r14, r31
    20e8:	f0 2d       	mov	r31, r0
    20ea:	ed 0c       	add	r14, r13

			if (get_MOTOR_FLOAT(controller, READMAINVOLTAGE, &voltage) == ERROR) {
    20ec:	ae 01       	movw	r20, r28
    20ee:	4c 5c       	subi	r20, 0xCC	; 204
    20f0:	5c 4f       	sbci	r21, 0xFC	; 252
    20f2:	68 e1       	ldi	r22, 0x18	; 24
    20f4:	8e 2d       	mov	r24, r14
    20f6:	0e 94 54 19 	call	0x32a8	; 0x32a8 <get_MOTOR_FLOAT>
    20fa:	f8 2e       	mov	r15, r24
    20fc:	83 e6       	ldi	r24, 0x63	; 99
    20fe:	f8 12       	cpse	r15, r24
    2100:	07 c0       	rjmp	.+14     	; 0x2110 <report+0x1c2>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT volts error");
    2102:	6f ed       	ldi	r22, 0xDF	; 223
    2104:	76 ea       	ldi	r23, 0xA6	; 166
    2106:	86 e3       	ldi	r24, 0x36	; 54
    2108:	91 e0       	ldi	r25, 0x01	; 1
    210a:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				return(ERROR);
    210e:	d9 c5       	rjmp	.+2994   	; 0x2cc2 <report+0xd74>
			}

			if (get_MOTOR_FLOAT(controller, READTEMPERATURE, &t0) == ERROR) {
    2110:	ae 01       	movw	r20, r28
    2112:	40 5d       	subi	r20, 0xD0	; 208
    2114:	5c 4f       	sbci	r21, 0xFC	; 252
    2116:	62 e5       	ldi	r22, 0x52	; 82
    2118:	8e 2d       	mov	r24, r14
    211a:	0e 94 54 19 	call	0x32a8	; 0x32a8 <get_MOTOR_FLOAT>
    211e:	f8 2e       	mov	r15, r24
    2120:	93 e6       	ldi	r25, 0x63	; 99
    2122:	89 13       	cpse	r24, r25
    2124:	07 c0       	rjmp	.+14     	; 0x2134 <report+0x1e6>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT temperature error");
    2126:	63 e0       	ldi	r22, 0x03	; 3
    2128:	77 ea       	ldi	r23, 0xA7	; 167
    212a:	86 e3       	ldi	r24, 0x36	; 54
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				return(ERROR);
    2132:	c7 c5       	rjmp	.+2958   	; 0x2cc2 <report+0xd74>
			}

			if (get_MOTOR_MAXCURRENT(controller, &maxCurrent) == ERROR) {
    2134:	be 01       	movw	r22, r28
    2136:	64 5d       	subi	r22, 0xD4	; 212
    2138:	7c 4f       	sbci	r23, 0xFC	; 252
    213a:	8e 2d       	mov	r24, r14
    213c:	0e 94 c7 19 	call	0x338e	; 0x338e <get_MOTOR_MAXCURRENT>
    2140:	f8 2e       	mov	r15, r24
    2142:	83 e6       	ldi	r24, 0x63	; 99
    2144:	f8 12       	cpse	r15, r24
    2146:	07 c0       	rjmp	.+14     	; 0x2156 <report+0x208>
				printError(ERR_MTR, "report: get_MOTOR_MAXCURRENT error");
    2148:	6d e2       	ldi	r22, 0x2D	; 45
    214a:	77 ea       	ldi	r23, 0xA7	; 167
    214c:	86 e3       	ldi	r24, 0x36	; 54
    214e:	91 e0       	ldi	r25, 0x01	; 1
    2150:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				return(ERROR);
    2154:	b6 c5       	rjmp	.+2924   	; 0x2cc2 <report+0xd74>
			}

			if (get_MOTOR_S4MODE(controller, &s4mode) == ERROR) {
    2156:	be 01       	movw	r22, r28
    2158:	6d 5d       	subi	r22, 0xDD	; 221
    215a:	7c 4f       	sbci	r23, 0xFC	; 252
    215c:	8e 2d       	mov	r24, r14
    215e:	0e 94 89 1c 	call	0x3912	; 0x3912 <get_MOTOR_S4MODE>
    2162:	f8 2e       	mov	r15, r24
    2164:	93 e6       	ldi	r25, 0x63	; 99
    2166:	89 13       	cpse	r24, r25
    2168:	07 c0       	rjmp	.+14     	; 0x2178 <report+0x22a>
				printError(ERR_MTR, "report: get_MOTOR_S4MODE error");
    216a:	60 e5       	ldi	r22, 0x50	; 80
    216c:	77 ea       	ldi	r23, 0xA7	; 167
    216e:	86 e3       	ldi	r24, 0x36	; 54
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				return(ERROR);
    2176:	a5 c5       	rjmp	.+2890   	; 0x2cc2 <report+0xd74>
			}

			sprintf(outbuf, format_MT0, currenttime, (char) (controller-63),
				voltage, t0, maxCurrent, s4mode, pcmd[cstack].cid);
    2178:	24 e3       	ldi	r18, 0x34	; 52
    217a:	20 9f       	mul	r18, r16
    217c:	c0 01       	movw	r24, r0
    217e:	21 9f       	mul	r18, r17
    2180:	90 0d       	add	r25, r0
    2182:	11 24       	eor	r1, r1
    2184:	8c 01       	movw	r16, r24
    2186:	08 5c       	subi	r16, 0xC8	; 200
    2188:	17 4d       	sbci	r17, 0xD7	; 215
			if (get_MOTOR_S4MODE(controller, &s4mode) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_S4MODE error");
				return(ERROR);
			}

			sprintf(outbuf, format_MT0, currenttime, (char) (controller-63),
    218a:	1f 93       	push	r17
    218c:	0f 93       	push	r16
    218e:	cd 5d       	subi	r28, 0xDD	; 221
    2190:	dc 4f       	sbci	r29, 0xFC	; 252
    2192:	88 81       	ld	r24, Y
    2194:	c3 52       	subi	r28, 0x23	; 35
    2196:	d3 40       	sbci	r29, 0x03	; 3
    2198:	1f 92       	push	r1
    219a:	8f 93       	push	r24
    219c:	c1 5d       	subi	r28, 0xD1	; 209
    219e:	dc 4f       	sbci	r29, 0xFC	; 252
    21a0:	88 81       	ld	r24, Y
    21a2:	cf 52       	subi	r28, 0x2F	; 47
    21a4:	d3 40       	sbci	r29, 0x03	; 3
    21a6:	8f 93       	push	r24
    21a8:	c2 5d       	subi	r28, 0xD2	; 210
    21aa:	dc 4f       	sbci	r29, 0xFC	; 252
    21ac:	88 81       	ld	r24, Y
    21ae:	ce 52       	subi	r28, 0x2E	; 46
    21b0:	d3 40       	sbci	r29, 0x03	; 3
    21b2:	8f 93       	push	r24
    21b4:	c3 5d       	subi	r28, 0xD3	; 211
    21b6:	dc 4f       	sbci	r29, 0xFC	; 252
    21b8:	88 81       	ld	r24, Y
    21ba:	cd 52       	subi	r28, 0x2D	; 45
    21bc:	d3 40       	sbci	r29, 0x03	; 3
    21be:	8f 93       	push	r24
    21c0:	c4 5d       	subi	r28, 0xD4	; 212
    21c2:	dc 4f       	sbci	r29, 0xFC	; 252
    21c4:	88 81       	ld	r24, Y
    21c6:	cc 52       	subi	r28, 0x2C	; 44
    21c8:	d3 40       	sbci	r29, 0x03	; 3
    21ca:	8f 93       	push	r24
    21cc:	cd 5c       	subi	r28, 0xCD	; 205
    21ce:	dc 4f       	sbci	r29, 0xFC	; 252
    21d0:	88 81       	ld	r24, Y
    21d2:	c3 53       	subi	r28, 0x33	; 51
    21d4:	d3 40       	sbci	r29, 0x03	; 3
    21d6:	8f 93       	push	r24
    21d8:	ce 5c       	subi	r28, 0xCE	; 206
    21da:	dc 4f       	sbci	r29, 0xFC	; 252
    21dc:	88 81       	ld	r24, Y
    21de:	c2 53       	subi	r28, 0x32	; 50
    21e0:	d3 40       	sbci	r29, 0x03	; 3
    21e2:	8f 93       	push	r24
    21e4:	cf 5c       	subi	r28, 0xCF	; 207
    21e6:	dc 4f       	sbci	r29, 0xFC	; 252
    21e8:	88 81       	ld	r24, Y
    21ea:	c1 53       	subi	r28, 0x31	; 49
    21ec:	d3 40       	sbci	r29, 0x03	; 3
    21ee:	8f 93       	push	r24
    21f0:	c0 5d       	subi	r28, 0xD0	; 208
    21f2:	dc 4f       	sbci	r29, 0xFC	; 252
    21f4:	88 81       	ld	r24, Y
    21f6:	c0 53       	subi	r28, 0x30	; 48
    21f8:	d3 40       	sbci	r29, 0x03	; 3
    21fa:	8f 93       	push	r24
    21fc:	c9 5c       	subi	r28, 0xC9	; 201
    21fe:	dc 4f       	sbci	r29, 0xFC	; 252
    2200:	88 81       	ld	r24, Y
    2202:	c7 53       	subi	r28, 0x37	; 55
    2204:	d3 40       	sbci	r29, 0x03	; 3
    2206:	8f 93       	push	r24
    2208:	ca 5c       	subi	r28, 0xCA	; 202
    220a:	dc 4f       	sbci	r29, 0xFC	; 252
    220c:	88 81       	ld	r24, Y
    220e:	c6 53       	subi	r28, 0x36	; 54
    2210:	d3 40       	sbci	r29, 0x03	; 3
    2212:	8f 93       	push	r24
    2214:	cb 5c       	subi	r28, 0xCB	; 203
    2216:	dc 4f       	sbci	r29, 0xFC	; 252
    2218:	88 81       	ld	r24, Y
    221a:	c5 53       	subi	r28, 0x35	; 53
    221c:	d3 40       	sbci	r29, 0x03	; 3
    221e:	8f 93       	push	r24
    2220:	cc 5c       	subi	r28, 0xCC	; 204
    2222:	dc 4f       	sbci	r29, 0xFC	; 252
    2224:	88 81       	ld	r24, Y
    2226:	c4 53       	subi	r28, 0x34	; 52
    2228:	d3 40       	sbci	r29, 0x03	; 3
    222a:	8f 93       	push	r24
    222c:	1f 92       	push	r1
    222e:	df 92       	push	r13
    2230:	ce 01       	movw	r24, r28
    2232:	86 5f       	subi	r24, 0xF6	; 246
    2234:	9e 4f       	sbci	r25, 0xFE	; 254
    2236:	9f 93       	push	r25
    2238:	8f 93       	push	r24
    223a:	88 55       	subi	r24, 0x58	; 88
    223c:	9f 4f       	sbci	r25, 0xFF	; 255
    223e:	9f 93       	push	r25
    2240:	8f 93       	push	r24
    2242:	81 5b       	subi	r24, 0xB1	; 177
    2244:	91 40       	sbci	r25, 0x01	; 1
    2246:	5c 01       	movw	r10, r24
    2248:	9f 93       	push	r25
    224a:	8f 93       	push	r24
    224c:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
				voltage, t0, maxCurrent, s4mode, pcmd[cstack].cid);
			printLine(outbuf);
    2250:	c5 01       	movw	r24, r10
    2252:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

			if (get_MOTOR_PID(controller, &pid) == ERROR) {
    2256:	be 01       	movw	r22, r28
    2258:	6a 5b       	subi	r22, 0xBA	; 186
    225a:	7c 4f       	sbci	r23, 0xFC	; 252
    225c:	8e 2d       	mov	r24, r14
    225e:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <get_MOTOR_PID>
    2262:	f8 2e       	mov	r15, r24
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	de bf       	out	0x3e, r29	; 62
    2268:	93 e6       	ldi	r25, 0x63	; 99
    226a:	f9 12       	cpse	r15, r25
    226c:	07 c0       	rjmp	.+14     	; 0x227c <report+0x32e>
				printError(ERR_MTR, "report: get_MOTOR_PID error");
    226e:	6f e6       	ldi	r22, 0x6F	; 111
    2270:	77 ea       	ldi	r23, 0xA7	; 167
    2272:	86 e3       	ldi	r24, 0x36	; 54
    2274:	91 e0       	ldi	r25, 0x01	; 1
    2276:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				return(ERROR);
    227a:	23 c5       	rjmp	.+2630   	; 0x2cc2 <report+0xd74>
			}

			sprintf(outbuf, format_MT1, currenttime, (char) (controller-63),
			pid.p, pid.i, pid.d, pid.maxI, pcmd[cstack].cid);
    227c:	c2 5b       	subi	r28, 0xB2	; 178
    227e:	dc 4f       	sbci	r29, 0xFC	; 252
    2280:	e8 81       	ld	r30, Y
    2282:	ce 54       	subi	r28, 0x4E	; 78
    2284:	d3 40       	sbci	r29, 0x03	; 3
    2286:	c1 5b       	subi	r28, 0xB1	; 177
    2288:	dc 4f       	sbci	r29, 0xFC	; 252
    228a:	f8 81       	ld	r31, Y
    228c:	cf 54       	subi	r28, 0x4F	; 79
    228e:	d3 40       	sbci	r29, 0x03	; 3
    2290:	c0 5b       	subi	r28, 0xB0	; 176
    2292:	dc 4f       	sbci	r29, 0xFC	; 252
    2294:	a8 81       	ld	r26, Y
    2296:	c0 55       	subi	r28, 0x50	; 80
    2298:	d3 40       	sbci	r29, 0x03	; 3
    229a:	cf 5a       	subi	r28, 0xAF	; 175
    229c:	dc 4f       	sbci	r29, 0xFC	; 252
    229e:	b8 81       	ld	r27, Y
    22a0:	c1 55       	subi	r28, 0x51	; 81
    22a2:	d3 40       	sbci	r29, 0x03	; 3
    22a4:	c6 5b       	subi	r28, 0xB6	; 182
    22a6:	dc 4f       	sbci	r29, 0xFC	; 252
    22a8:	48 81       	ld	r20, Y
    22aa:	ca 54       	subi	r28, 0x4A	; 74
    22ac:	d3 40       	sbci	r29, 0x03	; 3
    22ae:	c5 5b       	subi	r28, 0xB5	; 181
    22b0:	dc 4f       	sbci	r29, 0xFC	; 252
    22b2:	58 81       	ld	r21, Y
    22b4:	cb 54       	subi	r28, 0x4B	; 75
    22b6:	d3 40       	sbci	r29, 0x03	; 3
    22b8:	c4 5b       	subi	r28, 0xB4	; 180
    22ba:	dc 4f       	sbci	r29, 0xFC	; 252
    22bc:	68 81       	ld	r22, Y
    22be:	cc 54       	subi	r28, 0x4C	; 76
    22c0:	d3 40       	sbci	r29, 0x03	; 3
    22c2:	c3 5b       	subi	r28, 0xB3	; 179
    22c4:	dc 4f       	sbci	r29, 0xFC	; 252
    22c6:	78 81       	ld	r23, Y
    22c8:	cd 54       	subi	r28, 0x4D	; 77
    22ca:	d3 40       	sbci	r29, 0x03	; 3
    22cc:	ca 5b       	subi	r28, 0xBA	; 186
    22ce:	dc 4f       	sbci	r29, 0xFC	; 252
    22d0:	88 81       	ld	r24, Y
    22d2:	c6 54       	subi	r28, 0x46	; 70
    22d4:	d3 40       	sbci	r29, 0x03	; 3
    22d6:	c9 5b       	subi	r28, 0xB9	; 185
    22d8:	dc 4f       	sbci	r29, 0xFC	; 252
    22da:	98 81       	ld	r25, Y
    22dc:	c7 54       	subi	r28, 0x47	; 71
    22de:	d3 40       	sbci	r29, 0x03	; 3
    22e0:	c8 5b       	subi	r28, 0xB8	; 184
    22e2:	dc 4f       	sbci	r29, 0xFC	; 252
    22e4:	28 81       	ld	r18, Y
    22e6:	c8 54       	subi	r28, 0x48	; 72
    22e8:	d3 40       	sbci	r29, 0x03	; 3
    22ea:	c7 5b       	subi	r28, 0xB7	; 183
    22ec:	dc 4f       	sbci	r29, 0xFC	; 252
    22ee:	38 81       	ld	r19, Y
    22f0:	c9 54       	subi	r28, 0x49	; 73
    22f2:	d3 40       	sbci	r29, 0x03	; 3
			if (get_MOTOR_PID(controller, &pid) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_PID error");
				return(ERROR);
			}

			sprintf(outbuf, format_MT1, currenttime, (char) (controller-63),
    22f4:	1f 93       	push	r17
    22f6:	0f 93       	push	r16
    22f8:	cb 5a       	subi	r28, 0xAB	; 171
    22fa:	dc 4f       	sbci	r29, 0xFC	; 252
    22fc:	f8 80       	ld	r15, Y
    22fe:	c5 55       	subi	r28, 0x55	; 85
    2300:	d3 40       	sbci	r29, 0x03	; 3
    2302:	ff 92       	push	r15
    2304:	cc 5a       	subi	r28, 0xAC	; 172
    2306:	dc 4f       	sbci	r29, 0xFC	; 252
    2308:	f8 80       	ld	r15, Y
    230a:	c4 55       	subi	r28, 0x54	; 84
    230c:	d3 40       	sbci	r29, 0x03	; 3
    230e:	ff 92       	push	r15
    2310:	cd 5a       	subi	r28, 0xAD	; 173
    2312:	dc 4f       	sbci	r29, 0xFC	; 252
    2314:	f8 80       	ld	r15, Y
    2316:	c3 55       	subi	r28, 0x53	; 83
    2318:	d3 40       	sbci	r29, 0x03	; 3
    231a:	ff 92       	push	r15
    231c:	ce 5a       	subi	r28, 0xAE	; 174
    231e:	dc 4f       	sbci	r29, 0xFC	; 252
    2320:	f8 80       	ld	r15, Y
    2322:	c2 55       	subi	r28, 0x52	; 82
    2324:	d3 40       	sbci	r29, 0x03	; 3
    2326:	ff 92       	push	r15
    2328:	bf 93       	push	r27
    232a:	af 93       	push	r26
    232c:	ff 93       	push	r31
    232e:	ef 93       	push	r30
    2330:	7f 93       	push	r23
    2332:	6f 93       	push	r22
    2334:	5f 93       	push	r21
    2336:	4f 93       	push	r20
    2338:	3f 93       	push	r19
    233a:	2f 93       	push	r18
    233c:	9f 93       	push	r25
    233e:	8f 93       	push	r24
    2340:	1f 92       	push	r1
    2342:	df 92       	push	r13
    2344:	5e 01       	movw	r10, r28
    2346:	86 ef       	ldi	r24, 0xF6	; 246
    2348:	a8 1a       	sub	r10, r24
    234a:	8e ef       	ldi	r24, 0xFE	; 254
    234c:	b8 0a       	sbc	r11, r24
    234e:	bf 92       	push	r11
    2350:	af 92       	push	r10
    2352:	ce 01       	movw	r24, r28
    2354:	8c 51       	subi	r24, 0x1C	; 28
    2356:	9e 4f       	sbci	r25, 0xFE	; 254
    2358:	9f 93       	push	r25
    235a:	8f 93       	push	r24
    235c:	83 5e       	subi	r24, 0xE3	; 227
    235e:	91 40       	sbci	r25, 0x01	; 1
    2360:	7c 01       	movw	r14, r24
    2362:	9f 93       	push	r25
    2364:	8f 93       	push	r24
    2366:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			pid.p, pid.i, pid.d, pid.maxI, pcmd[cstack].cid);
			printLine(outbuf);
    236a:	c7 01       	movw	r24, r14
    236c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

			sprintf(outbuf, format_MT2, currenttime, (char) (controller-63),
    2370:	1f 93       	push	r17
    2372:	0f 93       	push	r16
    2374:	cb 59       	subi	r28, 0x9B	; 155
    2376:	dc 4f       	sbci	r29, 0xFC	; 252
    2378:	88 81       	ld	r24, Y
    237a:	c5 56       	subi	r28, 0x65	; 101
    237c:	d3 40       	sbci	r29, 0x03	; 3
    237e:	8f 93       	push	r24
    2380:	cc 59       	subi	r28, 0x9C	; 156
    2382:	dc 4f       	sbci	r29, 0xFC	; 252
    2384:	88 81       	ld	r24, Y
    2386:	c4 56       	subi	r28, 0x64	; 100
    2388:	d3 40       	sbci	r29, 0x03	; 3
    238a:	8f 93       	push	r24
    238c:	cd 59       	subi	r28, 0x9D	; 157
    238e:	dc 4f       	sbci	r29, 0xFC	; 252
    2390:	88 81       	ld	r24, Y
    2392:	c3 56       	subi	r28, 0x63	; 99
    2394:	d3 40       	sbci	r29, 0x03	; 3
    2396:	8f 93       	push	r24
    2398:	ce 59       	subi	r28, 0x9E	; 158
    239a:	dc 4f       	sbci	r29, 0xFC	; 252
    239c:	88 81       	ld	r24, Y
    239e:	c2 56       	subi	r28, 0x62	; 98
    23a0:	d3 40       	sbci	r29, 0x03	; 3
    23a2:	8f 93       	push	r24
    23a4:	cf 59       	subi	r28, 0x9F	; 159
    23a6:	dc 4f       	sbci	r29, 0xFC	; 252
    23a8:	88 81       	ld	r24, Y
    23aa:	c1 56       	subi	r28, 0x61	; 97
    23ac:	d3 40       	sbci	r29, 0x03	; 3
    23ae:	8f 93       	push	r24
    23b0:	c0 5a       	subi	r28, 0xA0	; 160
    23b2:	dc 4f       	sbci	r29, 0xFC	; 252
    23b4:	88 81       	ld	r24, Y
    23b6:	c0 56       	subi	r28, 0x60	; 96
    23b8:	d3 40       	sbci	r29, 0x03	; 3
    23ba:	8f 93       	push	r24
    23bc:	c1 5a       	subi	r28, 0xA1	; 161
    23be:	dc 4f       	sbci	r29, 0xFC	; 252
    23c0:	88 81       	ld	r24, Y
    23c2:	cf 55       	subi	r28, 0x5F	; 95
    23c4:	d3 40       	sbci	r29, 0x03	; 3
    23c6:	8f 93       	push	r24
    23c8:	c2 5a       	subi	r28, 0xA2	; 162
    23ca:	dc 4f       	sbci	r29, 0xFC	; 252
    23cc:	88 81       	ld	r24, Y
    23ce:	ce 55       	subi	r28, 0x5E	; 94
    23d0:	d3 40       	sbci	r29, 0x03	; 3
    23d2:	8f 93       	push	r24
    23d4:	c3 5a       	subi	r28, 0xA3	; 163
    23d6:	dc 4f       	sbci	r29, 0xFC	; 252
    23d8:	88 81       	ld	r24, Y
    23da:	cd 55       	subi	r28, 0x5D	; 93
    23dc:	d3 40       	sbci	r29, 0x03	; 3
    23de:	8f 93       	push	r24
    23e0:	c4 5a       	subi	r28, 0xA4	; 164
    23e2:	dc 4f       	sbci	r29, 0xFC	; 252
    23e4:	88 81       	ld	r24, Y
    23e6:	cc 55       	subi	r28, 0x5C	; 92
    23e8:	d3 40       	sbci	r29, 0x03	; 3
    23ea:	8f 93       	push	r24
    23ec:	c5 5a       	subi	r28, 0xA5	; 165
    23ee:	dc 4f       	sbci	r29, 0xFC	; 252
    23f0:	88 81       	ld	r24, Y
    23f2:	cb 55       	subi	r28, 0x5B	; 91
    23f4:	d3 40       	sbci	r29, 0x03	; 3
    23f6:	8f 93       	push	r24
    23f8:	c6 5a       	subi	r28, 0xA6	; 166
    23fa:	dc 4f       	sbci	r29, 0xFC	; 252
    23fc:	88 81       	ld	r24, Y
    23fe:	ca 55       	subi	r28, 0x5A	; 90
    2400:	d3 40       	sbci	r29, 0x03	; 3
    2402:	8f 93       	push	r24
    2404:	c7 5a       	subi	r28, 0xA7	; 167
    2406:	dc 4f       	sbci	r29, 0xFC	; 252
    2408:	88 81       	ld	r24, Y
    240a:	c9 55       	subi	r28, 0x59	; 89
    240c:	d3 40       	sbci	r29, 0x03	; 3
    240e:	8f 93       	push	r24
    2410:	c8 5a       	subi	r28, 0xA8	; 168
    2412:	dc 4f       	sbci	r29, 0xFC	; 252
    2414:	88 81       	ld	r24, Y
    2416:	c8 55       	subi	r28, 0x58	; 88
    2418:	d3 40       	sbci	r29, 0x03	; 3
    241a:	8f 93       	push	r24
    241c:	c9 5a       	subi	r28, 0xA9	; 169
    241e:	dc 4f       	sbci	r29, 0xFC	; 252
    2420:	88 81       	ld	r24, Y
    2422:	c7 55       	subi	r28, 0x57	; 87
    2424:	d3 40       	sbci	r29, 0x03	; 3
    2426:	8f 93       	push	r24
    2428:	ca 5a       	subi	r28, 0xAA	; 170
    242a:	dc 4f       	sbci	r29, 0xFC	; 252
    242c:	88 81       	ld	r24, Y
    242e:	c6 55       	subi	r28, 0x56	; 86
    2430:	d3 40       	sbci	r29, 0x03	; 3
    2432:	8f 93       	push	r24
    2434:	1f 92       	push	r1
    2436:	df 92       	push	r13
    2438:	bf 92       	push	r11
    243a:	af 92       	push	r10
    243c:	ce 01       	movw	r24, r28
    243e:	8b 5e       	subi	r24, 0xEB	; 235
    2440:	9d 4f       	sbci	r25, 0xFD	; 253
    2442:	9f 93       	push	r25
    2444:	8f 93       	push	r24
    2446:	ff 92       	push	r15
    2448:	ef 92       	push	r14
    244a:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
				pid.deadZone, pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
			printLine(outbuf);
    244e:	cd bf       	out	0x3d, r28	; 61
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	c7 01       	movw	r24, r14
    2454:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2458:	f1 2c       	mov	r15, r1
			printLine(outbuf);

			sprintf(outbuf, format_MT2, currenttime, (char) (controller-63),
				pid.deadZone, pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    245a:	33 c4       	rjmp	.+2150   	; 0x2cc2 <report+0xd74>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    245c:	ce 01       	movw	r24, r28
    245e:	86 5f       	subi	r24, 0xF6	; 246
    2460:	9e 4f       	sbci	r25, 0xFE	; 254
    2462:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
			controller = pcmd[cstack].cobject + 31;
    2466:	84 e3       	ldi	r24, 0x34	; 52
    2468:	80 9f       	mul	r24, r16
    246a:	f0 01       	movw	r30, r0
    246c:	81 9f       	mul	r24, r17
    246e:	f0 0d       	add	r31, r0
    2470:	11 24       	eor	r1, r1
    2472:	e3 5f       	subi	r30, 0xF3	; 243
    2474:	f7 4d       	sbci	r31, 0xD7	; 215
    2476:	81 81       	ldd	r24, Z+1	; 0x01
    2478:	0f 2e       	mov	r0, r31
    247a:	ff e1       	ldi	r31, 0x1F	; 31
    247c:	ef 2e       	mov	r14, r31
    247e:	f0 2d       	mov	r31, r0
    2480:	e8 0e       	add	r14, r24

			if (get_MOTOR_ENCODER(controller, &encoderValue) == ERROR) {
    2482:	be 01       	movw	r22, r28
    2484:	6c 5d       	subi	r22, 0xDC	; 220
    2486:	7c 4f       	sbci	r23, 0xFC	; 252
    2488:	8e 2d       	mov	r24, r14
    248a:	0e 94 c6 18 	call	0x318c	; 0x318c <get_MOTOR_ENCODER>
    248e:	f8 2e       	mov	r15, r24
    2490:	93 e6       	ldi	r25, 0x63	; 99
    2492:	89 13       	cpse	r24, r25
    2494:	07 c0       	rjmp	.+14     	; 0x24a4 <report+0x556>
				printError(ERR_MTR, "report: get_MOTOR_ENCODER error");
    2496:	6b e8       	ldi	r22, 0x8B	; 139
    2498:	77 ea       	ldi	r23, 0xA7	; 167
    249a:	86 e3       	ldi	r24, 0x36	; 54
    249c:	91 e0       	ldi	r25, 0x01	; 1
    249e:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				return(ERROR);
    24a2:	0f c4       	rjmp	.+2078   	; 0x2cc2 <report+0xd74>
			}
			micronValue = encoderValue/ENC_COUNTS_PER_MICRON;
    24a4:	cc 5d       	subi	r28, 0xDC	; 220
    24a6:	dc 4f       	sbci	r29, 0xFC	; 252
    24a8:	68 81       	ld	r22, Y
    24aa:	79 81       	ldd	r23, Y+1	; 0x01
    24ac:	8a 81       	ldd	r24, Y+2	; 0x02
    24ae:	9b 81       	ldd	r25, Y+3	; 0x03
    24b0:	c4 52       	subi	r28, 0x24	; 36
    24b2:	d3 40       	sbci	r29, 0x03	; 3
    24b4:	2b e1       	ldi	r18, 0x1B	; 27
    24b6:	31 e0       	ldi	r19, 0x01	; 1
    24b8:	40 e0       	ldi	r20, 0x00	; 0
    24ba:	50 e0       	ldi	r21, 0x00	; 0
    24bc:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__divmodsi4>
    24c0:	f2 2e       	mov	r15, r18
    24c2:	d3 2e       	mov	r13, r19
    24c4:	c4 2e       	mov	r12, r20
    24c6:	b5 2e       	mov	r11, r21

			if (get_MOTOR_SPEED(controller, &encoderSpeed) == ERROR) {
    24c8:	be 01       	movw	r22, r28
    24ca:	68 5d       	subi	r22, 0xD8	; 216
    24cc:	7c 4f       	sbci	r23, 0xFC	; 252
    24ce:	8e 2d       	mov	r24, r14
    24d0:	0e 94 df 1c 	call	0x39be	; 0x39be <get_MOTOR_SPEED>
    24d4:	83 36       	cpi	r24, 0x63	; 99
    24d6:	61 f4       	brne	.+24     	; 0x24f0 <report+0x5a2>
				encoderSpeed = 0x7FFFFFFF;
    24d8:	8f ef       	ldi	r24, 0xFF	; 255
    24da:	9f ef       	ldi	r25, 0xFF	; 255
    24dc:	af ef       	ldi	r26, 0xFF	; 255
    24de:	bf e7       	ldi	r27, 0x7F	; 127
    24e0:	c8 5d       	subi	r28, 0xD8	; 216
    24e2:	dc 4f       	sbci	r29, 0xFC	; 252
    24e4:	88 83       	st	Y, r24
    24e6:	99 83       	std	Y+1, r25	; 0x01
    24e8:	aa 83       	std	Y+2, r26	; 0x02
    24ea:	bb 83       	std	Y+3, r27	; 0x03
    24ec:	c8 52       	subi	r28, 0x28	; 40
    24ee:	d3 40       	sbci	r29, 0x03	; 3
			}

			micronSpeed = encoderSpeed/ENC_COUNTS_PER_MICRON;
    24f0:	c8 5d       	subi	r28, 0xD8	; 216
    24f2:	dc 4f       	sbci	r29, 0xFC	; 252
    24f4:	68 81       	ld	r22, Y
    24f6:	79 81       	ldd	r23, Y+1	; 0x01
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	9b 81       	ldd	r25, Y+3	; 0x03
    24fc:	c8 52       	subi	r28, 0x28	; 40
    24fe:	d3 40       	sbci	r29, 0x03	; 3
    2500:	2b e1       	ldi	r18, 0x1B	; 27
    2502:	31 e0       	ldi	r19, 0x01	; 1
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	50 e0       	ldi	r21, 0x00	; 0
    2508:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__divmodsi4>
    250c:	a2 2e       	mov	r10, r18
    250e:	93 2e       	mov	r9, r19
    2510:	84 2e       	mov	r8, r20
    2512:	75 2e       	mov	r7, r21

			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
    2514:	be 01       	movw	r22, r28
    2516:	68 5c       	subi	r22, 0xC8	; 200
    2518:	7c 4f       	sbci	r23, 0xFC	; 252
    251a:	8e 2d       	mov	r24, r14
    251c:	0e 94 59 18 	call	0x30b2	; 0x30b2 <get_MOTOR_CURRENT>
    2520:	83 36       	cpi	r24, 0x63	; 99
    2522:	71 f4       	brne	.+28     	; 0x2540 <report+0x5f2>
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
    2524:	6b ea       	ldi	r22, 0xAB	; 171
    2526:	77 ea       	ldi	r23, 0xA7	; 167
    2528:	86 e3       	ldi	r24, 0x36	; 54
    252a:	91 e0       	ldi	r25, 0x01	; 1
    252c:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				motorCurrent = 0xFFFF;
    2530:	8f ef       	ldi	r24, 0xFF	; 255
    2532:	9f ef       	ldi	r25, 0xFF	; 255
    2534:	c8 5c       	subi	r28, 0xC8	; 200
    2536:	dc 4f       	sbci	r29, 0xFC	; 252
    2538:	88 83       	st	Y, r24
    253a:	99 83       	std	Y+1, r25	; 0x01
    253c:	c8 53       	subi	r28, 0x38	; 56
    253e:	d3 40       	sbci	r29, 0x03	; 3
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
			micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
    2540:	24 e3       	ldi	r18, 0x34	; 52
    2542:	20 9f       	mul	r18, r16
    2544:	c0 01       	movw	r24, r0
    2546:	21 9f       	mul	r18, r17
    2548:	90 0d       	add	r25, r0
    254a:	11 24       	eor	r1, r1
    254c:	9c 01       	movw	r18, r24
    254e:	28 5c       	subi	r18, 0xC8	; 200
    2550:	37 4d       	sbci	r19, 0xD7	; 215

			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
				motorCurrent = 0xFFFF;
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
    2552:	fc 01       	movw	r30, r24
    2554:	e3 5f       	subi	r30, 0xF3	; 243
    2556:	f7 4d       	sbci	r31, 0xD7	; 215
    2558:	81 81       	ldd	r24, Z+1	; 0x01
    255a:	3f 93       	push	r19
    255c:	2f 93       	push	r18
    255e:	c7 5c       	subi	r28, 0xC7	; 199
    2560:	dc 4f       	sbci	r29, 0xFC	; 252
    2562:	98 81       	ld	r25, Y
    2564:	c9 53       	subi	r28, 0x39	; 57
    2566:	d3 40       	sbci	r29, 0x03	; 3
    2568:	9f 93       	push	r25
    256a:	c8 5c       	subi	r28, 0xC8	; 200
    256c:	dc 4f       	sbci	r29, 0xFC	; 252
    256e:	98 81       	ld	r25, Y
    2570:	c8 53       	subi	r28, 0x38	; 56
    2572:	d3 40       	sbci	r29, 0x03	; 3
    2574:	9f 93       	push	r25
    2576:	7f 92       	push	r7
    2578:	8f 92       	push	r8
    257a:	9f 92       	push	r9
    257c:	af 92       	push	r10
    257e:	bf 92       	push	r11
    2580:	cf 92       	push	r12
    2582:	df 92       	push	r13
    2584:	ff 92       	push	r15
    2586:	1f 92       	push	r1
    2588:	8f 93       	push	r24
    258a:	ce 01       	movw	r24, r28
    258c:	86 5f       	subi	r24, 0xF6	; 246
    258e:	9e 4f       	sbci	r25, 0xFE	; 254
    2590:	9f 93       	push	r25
    2592:	8f 93       	push	r24
    2594:	8b 57       	subi	r24, 0x7B	; 123
    2596:	9f 4f       	sbci	r25, 0xFF	; 255
    2598:	9f 93       	push	r25
    259a:	8f 93       	push	r24
    259c:	8e 01       	movw	r16, r28
    259e:	0f 5f       	subi	r16, 0xFF	; 255
    25a0:	1f 4f       	sbci	r17, 0xFF	; 255
    25a2:	1f 93       	push	r17
    25a4:	0f 93       	push	r16
    25a6:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
			printLine(outbuf);
    25aa:	c8 01       	movw	r24, r16
    25ac:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			break;
    25b0:	cd bf       	out	0x3d, r28	; 61
    25b2:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    25b4:	f1 2c       	mov	r15, r1
				motorCurrent = 0xFFFF;
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
			micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    25b6:	85 c3       	rjmp	.+1802   	; 0x2cc2 <report+0xd74>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	0e 94 00 25 	call	0x4a00	; 0x4a00 <get_temperature>
    25be:	c0 5d       	subi	r28, 0xD0	; 208
    25c0:	dc 4f       	sbci	r29, 0xFC	; 252
    25c2:	68 83       	st	Y, r22
    25c4:	79 83       	std	Y+1, r23	; 0x01
    25c6:	8a 83       	std	Y+2, r24	; 0x02
    25c8:	9b 83       	std	Y+3, r25	; 0x03
    25ca:	c0 53       	subi	r28, 0x30	; 48
    25cc:	d3 40       	sbci	r29, 0x03	; 3
			h0 = get_humidity(0);
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <get_humidity>
    25d4:	d6 2e       	mov	r13, r22
    25d6:	c7 2e       	mov	r12, r23
    25d8:	b8 2e       	mov	r11, r24
    25da:	a9 2e       	mov	r10, r25
			t1 = get_temperature(1);
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	0e 94 00 25 	call	0x4a00	; 0x4a00 <get_temperature>
    25e2:	ca 59       	subi	r28, 0x9A	; 154
    25e4:	dc 4f       	sbci	r29, 0xFC	; 252
    25e6:	68 83       	st	Y, r22
    25e8:	c6 56       	subi	r28, 0x66	; 102
    25ea:	d3 40       	sbci	r29, 0x03	; 3
    25ec:	c9 59       	subi	r28, 0x99	; 153
    25ee:	dc 4f       	sbci	r29, 0xFC	; 252
    25f0:	78 83       	st	Y, r23
    25f2:	c7 56       	subi	r28, 0x67	; 103
    25f4:	d3 40       	sbci	r29, 0x03	; 3
    25f6:	c8 59       	subi	r28, 0x98	; 152
    25f8:	dc 4f       	sbci	r29, 0xFC	; 252
    25fa:	88 83       	st	Y, r24
    25fc:	c8 56       	subi	r28, 0x68	; 104
    25fe:	d3 40       	sbci	r29, 0x03	; 3
    2600:	c7 59       	subi	r28, 0x97	; 151
    2602:	dc 4f       	sbci	r29, 0xFC	; 252
    2604:	98 83       	st	Y, r25
    2606:	c9 56       	subi	r28, 0x69	; 105
    2608:	d3 40       	sbci	r29, 0x03	; 3
			h1 = get_humidity(1);
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <get_humidity>
    2610:	c6 59       	subi	r28, 0x96	; 150
    2612:	dc 4f       	sbci	r29, 0xFC	; 252
    2614:	68 83       	st	Y, r22
    2616:	ca 56       	subi	r28, 0x6A	; 106
    2618:	d3 40       	sbci	r29, 0x03	; 3
    261a:	c5 59       	subi	r28, 0x95	; 149
    261c:	dc 4f       	sbci	r29, 0xFC	; 252
    261e:	78 83       	st	Y, r23
    2620:	cb 56       	subi	r28, 0x6B	; 107
    2622:	d3 40       	sbci	r29, 0x03	; 3
    2624:	c4 59       	subi	r28, 0x94	; 148
    2626:	dc 4f       	sbci	r29, 0xFC	; 252
    2628:	88 83       	st	Y, r24
    262a:	cc 56       	subi	r28, 0x6C	; 108
    262c:	d3 40       	sbci	r29, 0x03	; 3
    262e:	c3 59       	subi	r28, 0x93	; 147
    2630:	dc 4f       	sbci	r29, 0xFC	; 252
    2632:	98 83       	st	Y, r25
    2634:	cd 56       	subi	r28, 0x6D	; 109
    2636:	d3 40       	sbci	r29, 0x03	; 3
			t2 = get_temperature(2);
    2638:	82 e0       	ldi	r24, 0x02	; 2
    263a:	0e 94 00 25 	call	0x4a00	; 0x4a00 <get_temperature>
    263e:	c2 59       	subi	r28, 0x92	; 146
    2640:	dc 4f       	sbci	r29, 0xFC	; 252
    2642:	68 83       	st	Y, r22
    2644:	ce 56       	subi	r28, 0x6E	; 110
    2646:	d3 40       	sbci	r29, 0x03	; 3
    2648:	c1 59       	subi	r28, 0x91	; 145
    264a:	dc 4f       	sbci	r29, 0xFC	; 252
    264c:	78 83       	st	Y, r23
    264e:	cf 56       	subi	r28, 0x6F	; 111
    2650:	d3 40       	sbci	r29, 0x03	; 3
    2652:	98 2e       	mov	r9, r24
    2654:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    2656:	82 e0       	ldi	r24, 0x02	; 2
    2658:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <get_humidity>
    265c:	76 2e       	mov	r7, r22
    265e:	67 2e       	mov	r6, r23
    2660:	58 2e       	mov	r5, r24
    2662:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    2664:	83 e0       	ldi	r24, 0x03	; 3
    2666:	0e 94 00 25 	call	0x4a00	; 0x4a00 <get_temperature>
    266a:	c0 59       	subi	r28, 0x90	; 144
    266c:	dc 4f       	sbci	r29, 0xFC	; 252
    266e:	68 83       	st	Y, r22
    2670:	c0 57       	subi	r28, 0x70	; 112
    2672:	d3 40       	sbci	r29, 0x03	; 3
    2674:	cf 58       	subi	r28, 0x8F	; 143
    2676:	dc 4f       	sbci	r29, 0xFC	; 252
    2678:	78 83       	st	Y, r23
    267a:	c1 57       	subi	r28, 0x71	; 113
    267c:	d3 40       	sbci	r29, 0x03	; 3
    267e:	38 2e       	mov	r3, r24
    2680:	29 2e       	mov	r2, r25
			get_time(currenttime);
    2682:	7e 01       	movw	r14, r28
    2684:	96 ef       	ldi	r25, 0xF6	; 246
    2686:	e9 1a       	sub	r14, r25
    2688:	9e ef       	ldi	r25, 0xFE	; 254
    268a:	f9 0a       	sbc	r15, r25
    268c:	c7 01       	movw	r24, r14
    268e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    2692:	24 e3       	ldi	r18, 0x34	; 52
    2694:	20 9f       	mul	r18, r16
    2696:	c0 01       	movw	r24, r0
    2698:	21 9f       	mul	r18, r17
    269a:	90 0d       	add	r25, r0
    269c:	11 24       	eor	r1, r1
    269e:	88 5c       	subi	r24, 0xC8	; 200
    26a0:	97 4d       	sbci	r25, 0xD7	; 215
    26a2:	9f 93       	push	r25
    26a4:	8f 93       	push	r24
    26a6:	2f 92       	push	r2
    26a8:	3f 92       	push	r3
    26aa:	cf 58       	subi	r28, 0x8F	; 143
    26ac:	dc 4f       	sbci	r29, 0xFC	; 252
    26ae:	88 81       	ld	r24, Y
    26b0:	c1 57       	subi	r28, 0x71	; 113
    26b2:	d3 40       	sbci	r29, 0x03	; 3
    26b4:	8f 93       	push	r24
    26b6:	c0 59       	subi	r28, 0x90	; 144
    26b8:	dc 4f       	sbci	r29, 0xFC	; 252
    26ba:	98 81       	ld	r25, Y
    26bc:	c0 57       	subi	r28, 0x70	; 112
    26be:	d3 40       	sbci	r29, 0x03	; 3
    26c0:	9f 93       	push	r25
    26c2:	4f 92       	push	r4
    26c4:	5f 92       	push	r5
    26c6:	6f 92       	push	r6
    26c8:	7f 92       	push	r7
    26ca:	8f 92       	push	r8
    26cc:	9f 92       	push	r9
    26ce:	c1 59       	subi	r28, 0x91	; 145
    26d0:	dc 4f       	sbci	r29, 0xFC	; 252
    26d2:	88 81       	ld	r24, Y
    26d4:	cf 56       	subi	r28, 0x6F	; 111
    26d6:	d3 40       	sbci	r29, 0x03	; 3
    26d8:	8f 93       	push	r24
    26da:	c2 59       	subi	r28, 0x92	; 146
    26dc:	dc 4f       	sbci	r29, 0xFC	; 252
    26de:	98 81       	ld	r25, Y
    26e0:	ce 56       	subi	r28, 0x6E	; 110
    26e2:	d3 40       	sbci	r29, 0x03	; 3
    26e4:	9f 93       	push	r25
    26e6:	c3 59       	subi	r28, 0x93	; 147
    26e8:	dc 4f       	sbci	r29, 0xFC	; 252
    26ea:	88 81       	ld	r24, Y
    26ec:	cd 56       	subi	r28, 0x6D	; 109
    26ee:	d3 40       	sbci	r29, 0x03	; 3
    26f0:	8f 93       	push	r24
    26f2:	c4 59       	subi	r28, 0x94	; 148
    26f4:	dc 4f       	sbci	r29, 0xFC	; 252
    26f6:	98 81       	ld	r25, Y
    26f8:	cc 56       	subi	r28, 0x6C	; 108
    26fa:	d3 40       	sbci	r29, 0x03	; 3
    26fc:	9f 93       	push	r25
    26fe:	c5 59       	subi	r28, 0x95	; 149
    2700:	dc 4f       	sbci	r29, 0xFC	; 252
    2702:	88 81       	ld	r24, Y
    2704:	cb 56       	subi	r28, 0x6B	; 107
    2706:	d3 40       	sbci	r29, 0x03	; 3
    2708:	8f 93       	push	r24
    270a:	c6 59       	subi	r28, 0x96	; 150
    270c:	dc 4f       	sbci	r29, 0xFC	; 252
    270e:	98 81       	ld	r25, Y
    2710:	ca 56       	subi	r28, 0x6A	; 106
    2712:	d3 40       	sbci	r29, 0x03	; 3
    2714:	9f 93       	push	r25
    2716:	c7 59       	subi	r28, 0x97	; 151
    2718:	dc 4f       	sbci	r29, 0xFC	; 252
    271a:	88 81       	ld	r24, Y
    271c:	c9 56       	subi	r28, 0x69	; 105
    271e:	d3 40       	sbci	r29, 0x03	; 3
    2720:	8f 93       	push	r24
    2722:	c8 59       	subi	r28, 0x98	; 152
    2724:	dc 4f       	sbci	r29, 0xFC	; 252
    2726:	98 81       	ld	r25, Y
    2728:	c8 56       	subi	r28, 0x68	; 104
    272a:	d3 40       	sbci	r29, 0x03	; 3
    272c:	9f 93       	push	r25
    272e:	c9 59       	subi	r28, 0x99	; 153
    2730:	dc 4f       	sbci	r29, 0xFC	; 252
    2732:	88 81       	ld	r24, Y
    2734:	c7 56       	subi	r28, 0x67	; 103
    2736:	d3 40       	sbci	r29, 0x03	; 3
    2738:	8f 93       	push	r24
    273a:	ca 59       	subi	r28, 0x9A	; 154
    273c:	dc 4f       	sbci	r29, 0xFC	; 252
    273e:	98 81       	ld	r25, Y
    2740:	c6 56       	subi	r28, 0x66	; 102
    2742:	d3 40       	sbci	r29, 0x03	; 3
    2744:	9f 93       	push	r25
    2746:	af 92       	push	r10
    2748:	bf 92       	push	r11
    274a:	cf 92       	push	r12
    274c:	df 92       	push	r13
    274e:	cd 5c       	subi	r28, 0xCD	; 205
    2750:	dc 4f       	sbci	r29, 0xFC	; 252
    2752:	88 81       	ld	r24, Y
    2754:	c3 53       	subi	r28, 0x33	; 51
    2756:	d3 40       	sbci	r29, 0x03	; 3
    2758:	8f 93       	push	r24
    275a:	ce 5c       	subi	r28, 0xCE	; 206
    275c:	dc 4f       	sbci	r29, 0xFC	; 252
    275e:	88 81       	ld	r24, Y
    2760:	c2 53       	subi	r28, 0x32	; 50
    2762:	d3 40       	sbci	r29, 0x03	; 3
    2764:	8f 93       	push	r24
    2766:	cf 5c       	subi	r28, 0xCF	; 207
    2768:	dc 4f       	sbci	r29, 0xFC	; 252
    276a:	88 81       	ld	r24, Y
    276c:	c1 53       	subi	r28, 0x31	; 49
    276e:	d3 40       	sbci	r29, 0x03	; 3
    2770:	8f 93       	push	r24
    2772:	c0 5d       	subi	r28, 0xD0	; 208
    2774:	dc 4f       	sbci	r29, 0xFC	; 252
    2776:	88 81       	ld	r24, Y
    2778:	c0 53       	subi	r28, 0x30	; 48
    277a:	d3 40       	sbci	r29, 0x03	; 3
    277c:	8f 93       	push	r24
    277e:	ff 92       	push	r15
    2780:	ef 92       	push	r14
    2782:	ce 01       	movw	r24, r28
    2784:	86 5b       	subi	r24, 0xB6	; 182
    2786:	9e 4f       	sbci	r25, 0xFE	; 254
    2788:	9f 93       	push	r25
    278a:	8f 93       	push	r24
    278c:	8e 01       	movw	r16, r28
    278e:	0f 5f       	subi	r16, 0xFF	; 255
    2790:	1f 4f       	sbci	r17, 0xFF	; 255
    2792:	1f 93       	push	r17
    2794:	0f 93       	push	r16
    2796:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			printLine(outbuf);
    279a:	cd bf       	out	0x3d, r28	; 61
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	c8 01       	movw	r24, r16
    27a0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "Temp & Humidity", 1);
    27a4:	41 e0       	ldi	r20, 0x01	; 1
    27a6:	6b ec       	ldi	r22, 0xCB	; 203
    27a8:	77 ea       	ldi	r23, 0xA7	; 167
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    27b0:	c0 5d       	subi	r28, 0xD0	; 208
    27b2:	dc 4f       	sbci	r29, 0xFC	; 252
    27b4:	f8 80       	ld	r15, Y
    27b6:	c0 53       	subi	r28, 0x30	; 48
    27b8:	d3 40       	sbci	r29, 0x03	; 3
    27ba:	cf 5c       	subi	r28, 0xCF	; 207
    27bc:	dc 4f       	sbci	r29, 0xFC	; 252
    27be:	e8 80       	ld	r14, Y
    27c0:	c1 53       	subi	r28, 0x31	; 49
    27c2:	d3 40       	sbci	r29, 0x03	; 3
    27c4:	ce 5c       	subi	r28, 0xCE	; 206
    27c6:	dc 4f       	sbci	r29, 0xFC	; 252
    27c8:	98 80       	ld	r9, Y
    27ca:	c2 53       	subi	r28, 0x32	; 50
    27cc:	d3 40       	sbci	r29, 0x03	; 3
    27ce:	cd 5c       	subi	r28, 0xCD	; 205
    27d0:	dc 4f       	sbci	r29, 0xFC	; 252
    27d2:	88 80       	ld	r8, Y
    27d4:	c3 53       	subi	r28, 0x33	; 51
    27d6:	d3 40       	sbci	r29, 0x03	; 3
    27d8:	26 e6       	ldi	r18, 0x66	; 102
    27da:	36 e6       	ldi	r19, 0x66	; 102
    27dc:	46 ee       	ldi	r20, 0xE6	; 230
    27de:	5f e3       	ldi	r21, 0x3F	; 63
    27e0:	6f 2d       	mov	r22, r15
    27e2:	7e 2d       	mov	r23, r14
    27e4:	89 2d       	mov	r24, r9
    27e6:	98 2d       	mov	r25, r8
    27e8:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
    27ec:	af 92       	push	r10
    27ee:	bf 92       	push	r11
    27f0:	cf 92       	push	r12
    27f2:	df 92       	push	r13
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	52 e4       	ldi	r21, 0x42	; 66
    27fc:	0e 94 4e 29 	call	0x529c	; 0x529c <__addsf3>
    2800:	9f 93       	push	r25
    2802:	8f 93       	push	r24
    2804:	7f 93       	push	r23
    2806:	6f 93       	push	r22
    2808:	8f 92       	push	r8
    280a:	9f 92       	push	r9
    280c:	ef 92       	push	r14
    280e:	ff 92       	push	r15
    2810:	8b ed       	ldi	r24, 0xDB	; 219
    2812:	97 ea       	ldi	r25, 0xA7	; 167
    2814:	9f 93       	push	r25
    2816:	8f 93       	push	r24
    2818:	1f 93       	push	r17
    281a:	0f 93       	push	r16
    281c:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2820:	42 e0       	ldi	r20, 0x02	; 2
    2822:	b8 01       	movw	r22, r16
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <writestr_OLED>
			break;
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    282e:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    2830:	48 c2       	rjmp	.+1168   	; 0x2cc2 <report+0xd74>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    2832:	ae 01       	movw	r20, r28
    2834:	4e 5b       	subi	r20, 0xBE	; 190
    2836:	5c 4f       	sbci	r21, 0xFC	; 252
    2838:	be 01       	movw	r22, r28
    283a:	62 5c       	subi	r22, 0xC2	; 194
    283c:	7c 4f       	sbci	r23, 0xFC	; 252
    283e:	ce 01       	movw	r24, r28
    2840:	86 5c       	subi	r24, 0xC6	; 198
    2842:	9c 4f       	sbci	r25, 0xFC	; 252
    2844:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <get_orientation>
			get_time(currenttime);
    2848:	7e 01       	movw	r14, r28
    284a:	96 ef       	ldi	r25, 0xF6	; 246
    284c:	e9 1a       	sub	r14, r25
    284e:	9e ef       	ldi	r25, 0xFE	; 254
    2850:	f9 0a       	sbc	r15, r25
    2852:	c7 01       	movw	r24, r14
    2854:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
    2858:	24 e3       	ldi	r18, 0x34	; 52
    285a:	20 9f       	mul	r18, r16
    285c:	c0 01       	movw	r24, r0
    285e:	21 9f       	mul	r18, r17
    2860:	90 0d       	add	r25, r0
    2862:	11 24       	eor	r1, r1
    2864:	88 5c       	subi	r24, 0xC8	; 200
    2866:	97 4d       	sbci	r25, 0xD7	; 215
    2868:	9f 93       	push	r25
    286a:	8f 93       	push	r24
    286c:	cb 5b       	subi	r28, 0xBB	; 187
    286e:	dc 4f       	sbci	r29, 0xFC	; 252
    2870:	88 81       	ld	r24, Y
    2872:	c5 54       	subi	r28, 0x45	; 69
    2874:	d3 40       	sbci	r29, 0x03	; 3
    2876:	8f 93       	push	r24
    2878:	cc 5b       	subi	r28, 0xBC	; 188
    287a:	dc 4f       	sbci	r29, 0xFC	; 252
    287c:	88 81       	ld	r24, Y
    287e:	c4 54       	subi	r28, 0x44	; 68
    2880:	d3 40       	sbci	r29, 0x03	; 3
    2882:	8f 93       	push	r24
    2884:	cd 5b       	subi	r28, 0xBD	; 189
    2886:	dc 4f       	sbci	r29, 0xFC	; 252
    2888:	88 81       	ld	r24, Y
    288a:	c3 54       	subi	r28, 0x43	; 67
    288c:	d3 40       	sbci	r29, 0x03	; 3
    288e:	8f 93       	push	r24
    2890:	ce 5b       	subi	r28, 0xBE	; 190
    2892:	dc 4f       	sbci	r29, 0xFC	; 252
    2894:	88 81       	ld	r24, Y
    2896:	c2 54       	subi	r28, 0x42	; 66
    2898:	d3 40       	sbci	r29, 0x03	; 3
    289a:	8f 93       	push	r24
    289c:	cf 5b       	subi	r28, 0xBF	; 191
    289e:	dc 4f       	sbci	r29, 0xFC	; 252
    28a0:	88 81       	ld	r24, Y
    28a2:	c1 54       	subi	r28, 0x41	; 65
    28a4:	d3 40       	sbci	r29, 0x03	; 3
    28a6:	8f 93       	push	r24
    28a8:	c0 5c       	subi	r28, 0xC0	; 192
    28aa:	dc 4f       	sbci	r29, 0xFC	; 252
    28ac:	88 81       	ld	r24, Y
    28ae:	c0 54       	subi	r28, 0x40	; 64
    28b0:	d3 40       	sbci	r29, 0x03	; 3
    28b2:	8f 93       	push	r24
    28b4:	c1 5c       	subi	r28, 0xC1	; 193
    28b6:	dc 4f       	sbci	r29, 0xFC	; 252
    28b8:	88 81       	ld	r24, Y
    28ba:	cf 53       	subi	r28, 0x3F	; 63
    28bc:	d3 40       	sbci	r29, 0x03	; 3
    28be:	8f 93       	push	r24
    28c0:	c2 5c       	subi	r28, 0xC2	; 194
    28c2:	dc 4f       	sbci	r29, 0xFC	; 252
    28c4:	88 81       	ld	r24, Y
    28c6:	ce 53       	subi	r28, 0x3E	; 62
    28c8:	d3 40       	sbci	r29, 0x03	; 3
    28ca:	8f 93       	push	r24
    28cc:	c3 5c       	subi	r28, 0xC3	; 195
    28ce:	dc 4f       	sbci	r29, 0xFC	; 252
    28d0:	88 81       	ld	r24, Y
    28d2:	cd 53       	subi	r28, 0x3D	; 61
    28d4:	d3 40       	sbci	r29, 0x03	; 3
    28d6:	8f 93       	push	r24
    28d8:	c4 5c       	subi	r28, 0xC4	; 196
    28da:	dc 4f       	sbci	r29, 0xFC	; 252
    28dc:	88 81       	ld	r24, Y
    28de:	cc 53       	subi	r28, 0x3C	; 60
    28e0:	d3 40       	sbci	r29, 0x03	; 3
    28e2:	8f 93       	push	r24
    28e4:	c5 5c       	subi	r28, 0xC5	; 197
    28e6:	dc 4f       	sbci	r29, 0xFC	; 252
    28e8:	88 81       	ld	r24, Y
    28ea:	cb 53       	subi	r28, 0x3B	; 59
    28ec:	d3 40       	sbci	r29, 0x03	; 3
    28ee:	8f 93       	push	r24
    28f0:	c6 5c       	subi	r28, 0xC6	; 198
    28f2:	dc 4f       	sbci	r29, 0xFC	; 252
    28f4:	88 81       	ld	r24, Y
    28f6:	ca 53       	subi	r28, 0x3A	; 58
    28f8:	d3 40       	sbci	r29, 0x03	; 3
    28fa:	8f 93       	push	r24
    28fc:	ff 92       	push	r15
    28fe:	ef 92       	push	r14
    2900:	ce 01       	movw	r24, r28
    2902:	86 5b       	subi	r24, 0xB6	; 182
    2904:	9d 4f       	sbci	r25, 0xFD	; 253
    2906:	9f 93       	push	r25
    2908:	8f 93       	push	r24
    290a:	8e 01       	movw	r16, r28
    290c:	0f 5f       	subi	r16, 0xFF	; 255
    290e:	1f 4f       	sbci	r17, 0xFF	; 255
    2910:	1f 93       	push	r17
    2912:	0f 93       	push	r16
    2914:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			printLine(outbuf);
    2918:	c8 01       	movw	r24, r16
    291a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "Orientation", 1);
    291e:	41 e0       	ldi	r20, 0x01	; 1
    2920:	61 ef       	ldi	r22, 0xF1	; 241
    2922:	77 ea       	ldi	r23, 0xA7	; 167
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    292a:	cb 5b       	subi	r28, 0xBB	; 187
    292c:	dc 4f       	sbci	r29, 0xFC	; 252
    292e:	88 81       	ld	r24, Y
    2930:	c5 54       	subi	r28, 0x45	; 69
    2932:	d3 40       	sbci	r29, 0x03	; 3
    2934:	8f 93       	push	r24
    2936:	cc 5b       	subi	r28, 0xBC	; 188
    2938:	dc 4f       	sbci	r29, 0xFC	; 252
    293a:	88 81       	ld	r24, Y
    293c:	c4 54       	subi	r28, 0x44	; 68
    293e:	d3 40       	sbci	r29, 0x03	; 3
    2940:	8f 93       	push	r24
    2942:	cd 5b       	subi	r28, 0xBD	; 189
    2944:	dc 4f       	sbci	r29, 0xFC	; 252
    2946:	88 81       	ld	r24, Y
    2948:	c3 54       	subi	r28, 0x43	; 67
    294a:	d3 40       	sbci	r29, 0x03	; 3
    294c:	8f 93       	push	r24
    294e:	ce 5b       	subi	r28, 0xBE	; 190
    2950:	dc 4f       	sbci	r29, 0xFC	; 252
    2952:	88 81       	ld	r24, Y
    2954:	c2 54       	subi	r28, 0x42	; 66
    2956:	d3 40       	sbci	r29, 0x03	; 3
    2958:	8f 93       	push	r24
    295a:	cf 5b       	subi	r28, 0xBF	; 191
    295c:	dc 4f       	sbci	r29, 0xFC	; 252
    295e:	88 81       	ld	r24, Y
    2960:	c1 54       	subi	r28, 0x41	; 65
    2962:	d3 40       	sbci	r29, 0x03	; 3
    2964:	8f 93       	push	r24
    2966:	c0 5c       	subi	r28, 0xC0	; 192
    2968:	dc 4f       	sbci	r29, 0xFC	; 252
    296a:	88 81       	ld	r24, Y
    296c:	c0 54       	subi	r28, 0x40	; 64
    296e:	d3 40       	sbci	r29, 0x03	; 3
    2970:	8f 93       	push	r24
    2972:	c1 5c       	subi	r28, 0xC1	; 193
    2974:	dc 4f       	sbci	r29, 0xFC	; 252
    2976:	88 81       	ld	r24, Y
    2978:	cf 53       	subi	r28, 0x3F	; 63
    297a:	d3 40       	sbci	r29, 0x03	; 3
    297c:	8f 93       	push	r24
    297e:	c2 5c       	subi	r28, 0xC2	; 194
    2980:	dc 4f       	sbci	r29, 0xFC	; 252
    2982:	88 81       	ld	r24, Y
    2984:	ce 53       	subi	r28, 0x3E	; 62
    2986:	d3 40       	sbci	r29, 0x03	; 3
    2988:	8f 93       	push	r24
    298a:	c3 5c       	subi	r28, 0xC3	; 195
    298c:	dc 4f       	sbci	r29, 0xFC	; 252
    298e:	88 81       	ld	r24, Y
    2990:	cd 53       	subi	r28, 0x3D	; 61
    2992:	d3 40       	sbci	r29, 0x03	; 3
    2994:	8f 93       	push	r24
    2996:	c4 5c       	subi	r28, 0xC4	; 196
    2998:	dc 4f       	sbci	r29, 0xFC	; 252
    299a:	88 81       	ld	r24, Y
    299c:	cc 53       	subi	r28, 0x3C	; 60
    299e:	d3 40       	sbci	r29, 0x03	; 3
    29a0:	8f 93       	push	r24
    29a2:	c5 5c       	subi	r28, 0xC5	; 197
    29a4:	dc 4f       	sbci	r29, 0xFC	; 252
    29a6:	88 81       	ld	r24, Y
    29a8:	cb 53       	subi	r28, 0x3B	; 59
    29aa:	d3 40       	sbci	r29, 0x03	; 3
    29ac:	8f 93       	push	r24
    29ae:	c6 5c       	subi	r28, 0xC6	; 198
    29b0:	dc 4f       	sbci	r29, 0xFC	; 252
    29b2:	88 81       	ld	r24, Y
    29b4:	ca 53       	subi	r28, 0x3A	; 58
    29b6:	d3 40       	sbci	r29, 0x03	; 3
    29b8:	8f 93       	push	r24
    29ba:	ce 01       	movw	r24, r28
    29bc:	8a 59       	subi	r24, 0x9A	; 154
    29be:	9d 4f       	sbci	r25, 0xFD	; 253
    29c0:	9f 93       	push	r25
    29c2:	8f 93       	push	r24
    29c4:	1f 93       	push	r17
    29c6:	0f 93       	push	r16
    29c8:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			writestr_OLED(1, outbuf, 2);
    29cc:	cd bf       	out	0x3d, r28	; 61
    29ce:	de bf       	out	0x3e, r29	; 62
    29d0:	42 e0       	ldi	r20, 0x02	; 2
    29d2:	b8 01       	movw	r22, r16
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    29da:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    29dc:	72 c1       	rjmp	.+740    	; 0x2cc2 <report+0xd74>

		case 'p':					// Pneumatics
			get_time(currenttime);
    29de:	7e 01       	movw	r14, r28
    29e0:	96 ef       	ldi	r25, 0xF6	; 246
    29e2:	e9 1a       	sub	r14, r25
    29e4:	9e ef       	ldi	r25, 0xFE	; 254
    29e6:	f9 0a       	sbc	r15, r25
    29e8:	c7 01       	movw	r24, r14
    29ea:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
			read_PNEUSensors(&shutter, &left, &right, &air);
    29ee:	9e 01       	movw	r18, r28
    29f0:	27 5b       	subi	r18, 0xB7	; 183
    29f2:	3e 4f       	sbci	r19, 0xFE	; 254
    29f4:	ae 01       	movw	r20, r28
    29f6:	48 5b       	subi	r20, 0xB8	; 184
    29f8:	5e 4f       	sbci	r21, 0xFE	; 254
    29fa:	be 01       	movw	r22, r28
    29fc:	69 5b       	subi	r22, 0xB9	; 185
    29fe:	7e 4f       	sbci	r23, 0xFE	; 254
    2a00:	ce 01       	movw	r24, r28
    2a02:	8a 5b       	subi	r24, 0xBA	; 186
    2a04:	9e 4f       	sbci	r25, 0xFE	; 254
    2a06:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <read_PNEUSensors>
			sprintf(outbuf, format_PNU, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    2a0a:	24 e3       	ldi	r18, 0x34	; 52
    2a0c:	20 9f       	mul	r18, r16
    2a0e:	c0 01       	movw	r24, r0
    2a10:	21 9f       	mul	r18, r17
    2a12:	90 0d       	add	r25, r0
    2a14:	11 24       	eor	r1, r1
    2a16:	88 5c       	subi	r24, 0xC8	; 200
    2a18:	97 4d       	sbci	r25, 0xD7	; 215
    2a1a:	9f 93       	push	r25
    2a1c:	8f 93       	push	r24
    2a1e:	c7 5b       	subi	r28, 0xB7	; 183
    2a20:	de 4f       	sbci	r29, 0xFE	; 254
    2a22:	88 81       	ld	r24, Y
    2a24:	c9 54       	subi	r28, 0x49	; 73
    2a26:	d1 40       	sbci	r29, 0x01	; 1
    2a28:	1f 92       	push	r1
    2a2a:	8f 93       	push	r24
    2a2c:	c8 5b       	subi	r28, 0xB8	; 184
    2a2e:	de 4f       	sbci	r29, 0xFE	; 254
    2a30:	88 81       	ld	r24, Y
    2a32:	c8 54       	subi	r28, 0x48	; 72
    2a34:	d1 40       	sbci	r29, 0x01	; 1
    2a36:	1f 92       	push	r1
    2a38:	8f 93       	push	r24
    2a3a:	c9 5b       	subi	r28, 0xB9	; 185
    2a3c:	de 4f       	sbci	r29, 0xFE	; 254
    2a3e:	88 81       	ld	r24, Y
    2a40:	c7 54       	subi	r28, 0x47	; 71
    2a42:	d1 40       	sbci	r29, 0x01	; 1
    2a44:	1f 92       	push	r1
    2a46:	8f 93       	push	r24
    2a48:	ca 5b       	subi	r28, 0xBA	; 186
    2a4a:	de 4f       	sbci	r29, 0xFE	; 254
    2a4c:	88 81       	ld	r24, Y
    2a4e:	c6 54       	subi	r28, 0x46	; 70
    2a50:	d1 40       	sbci	r29, 0x01	; 1
    2a52:	1f 92       	push	r1
    2a54:	8f 93       	push	r24
    2a56:	ff 92       	push	r15
    2a58:	ef 92       	push	r14
    2a5a:	ce 01       	movw	r24, r28
    2a5c:	88 58       	subi	r24, 0x88	; 136
    2a5e:	9d 4f       	sbci	r25, 0xFD	; 253
    2a60:	9f 93       	push	r25
    2a62:	8f 93       	push	r24
    2a64:	8e 01       	movw	r16, r28
    2a66:	0f 5f       	subi	r16, 0xFF	; 255
    2a68:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6a:	1f 93       	push	r17
    2a6c:	0f 93       	push	r16
    2a6e:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			printLine(outbuf);
    2a72:	c8 01       	movw	r24, r16
    2a74:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			sprintf(outbuf, dformat_PN1, left, right);
    2a78:	c8 5b       	subi	r28, 0xB8	; 184
    2a7a:	de 4f       	sbci	r29, 0xFE	; 254
    2a7c:	88 81       	ld	r24, Y
    2a7e:	c8 54       	subi	r28, 0x48	; 72
    2a80:	d1 40       	sbci	r29, 0x01	; 1
    2a82:	1f 92       	push	r1
    2a84:	8f 93       	push	r24
    2a86:	c9 5b       	subi	r28, 0xB9	; 185
    2a88:	de 4f       	sbci	r29, 0xFE	; 254
    2a8a:	88 81       	ld	r24, Y
    2a8c:	c7 54       	subi	r28, 0x47	; 71
    2a8e:	d1 40       	sbci	r29, 0x01	; 1
    2a90:	1f 92       	push	r1
    2a92:	8f 93       	push	r24
    2a94:	ce 01       	movw	r24, r28
    2a96:	8b 55       	subi	r24, 0x5B	; 91
    2a98:	9d 4f       	sbci	r25, 0xFD	; 253
    2a9a:	9f 93       	push	r25
    2a9c:	8f 93       	push	r24
    2a9e:	1f 93       	push	r17
    2aa0:	0f 93       	push	r16
    2aa2:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			writestr_OLED(1, outbuf, 1);
    2aa6:	41 e0       	ldi	r20, 0x01	; 1
    2aa8:	b8 01       	movw	r22, r16
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2ab0:	c7 5b       	subi	r28, 0xB7	; 183
    2ab2:	de 4f       	sbci	r29, 0xFE	; 254
    2ab4:	88 81       	ld	r24, Y
    2ab6:	c9 54       	subi	r28, 0x49	; 73
    2ab8:	d1 40       	sbci	r29, 0x01	; 1
    2aba:	1f 92       	push	r1
    2abc:	8f 93       	push	r24
    2abe:	ca 5b       	subi	r28, 0xBA	; 186
    2ac0:	de 4f       	sbci	r29, 0xFE	; 254
    2ac2:	88 81       	ld	r24, Y
    2ac4:	c6 54       	subi	r28, 0x46	; 70
    2ac6:	d1 40       	sbci	r29, 0x01	; 1
    2ac8:	1f 92       	push	r1
    2aca:	8f 93       	push	r24
    2acc:	ce 01       	movw	r24, r28
    2ace:	88 54       	subi	r24, 0x48	; 72
    2ad0:	9d 4f       	sbci	r25, 0xFD	; 253
    2ad2:	9f 93       	push	r25
    2ad4:	8f 93       	push	r24
    2ad6:	1f 93       	push	r17
    2ad8:	0f 93       	push	r16
    2ada:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2ade:	cd bf       	out	0x3d, r28	; 61
    2ae0:	de bf       	out	0x3e, r29	; 62
    2ae2:	42 e0       	ldi	r20, 0x02	; 2
    2ae4:	b8 01       	movw	r22, r16
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2aec:	f1 2c       	mov	r15, r1
			printLine(outbuf);
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    2aee:	e9 c0       	rjmp	.+466    	; 0x2cc2 <report+0xd74>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    2af0:	7e 01       	movw	r14, r28
    2af2:	96 ef       	ldi	r25, 0xF6	; 246
    2af4:	e9 1a       	sub	r14, r25
    2af6:	9e ef       	ldi	r25, 0xFE	; 254
    2af8:	f9 0a       	sbc	r15, r25
    2afa:	c7 01       	movw	r24, r14
    2afc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
			get_SETTIME(lastsettime);
    2b00:	6e 01       	movw	r12, r28
    2b02:	82 ee       	ldi	r24, 0xE2	; 226
    2b04:	c8 1a       	sub	r12, r24
    2b06:	8e ef       	ldi	r24, 0xFE	; 254
    2b08:	d8 0a       	sbc	r13, r24
    2b0a:	c6 01       	movw	r24, r12
    2b0c:	0e 94 19 08 	call	0x1032	; 0x1032 <get_SETTIME>
			get_BOOTTIME(boottime);
    2b10:	5e 01       	movw	r10, r28
    2b12:	9e ec       	ldi	r25, 0xCE	; 206
    2b14:	a9 1a       	sub	r10, r25
    2b16:	9e ef       	ldi	r25, 0xFE	; 254
    2b18:	b9 0a       	sbc	r11, r25
    2b1a:	c5 01       	movw	r24, r10
    2b1c:	0e 94 49 07 	call	0xe92	; 0xe92 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    2b20:	24 e3       	ldi	r18, 0x34	; 52
    2b22:	20 9f       	mul	r18, r16
    2b24:	c0 01       	movw	r24, r0
    2b26:	21 9f       	mul	r18, r17
    2b28:	90 0d       	add	r25, r0
    2b2a:	11 24       	eor	r1, r1
    2b2c:	88 5c       	subi	r24, 0xC8	; 200
    2b2e:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			get_SETTIME(lastsettime);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
    2b30:	9f 93       	push	r25
    2b32:	8f 93       	push	r24
    2b34:	bf 92       	push	r11
    2b36:	af 92       	push	r10
    2b38:	df 92       	push	r13
    2b3a:	cf 92       	push	r12
    2b3c:	ff 92       	push	r15
    2b3e:	ef 92       	push	r14
    2b40:	ce 01       	movw	r24, r28
    2b42:	85 53       	subi	r24, 0x35	; 53
    2b44:	9d 4f       	sbci	r25, 0xFD	; 253
    2b46:	9f 93       	push	r25
    2b48:	8f 93       	push	r24
    2b4a:	8e 01       	movw	r16, r28
    2b4c:	0f 5f       	subi	r16, 0xFF	; 255
    2b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b50:	1f 93       	push	r17
    2b52:	0f 93       	push	r16
    2b54:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
    2b58:	c8 01       	movw	r24, r16
    2b5a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "Time", 1);
    2b5e:	41 e0       	ldi	r20, 0x01	; 1
    2b60:	6d ef       	ldi	r22, 0xFD	; 253
    2b62:	77 ea       	ldi	r23, 0xA7	; 167
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    2b6a:	b7 01       	movw	r22, r14
    2b6c:	65 5f       	subi	r22, 0xF5	; 245
    2b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b70:	42 e0       	ldi	r20, 0x02	; 2
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <writestr_OLED>
			break;
    2b78:	cd bf       	out	0x3d, r28	; 61
    2b7a:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2b7c:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    2b7e:	a1 c0       	rjmp	.+322    	; 0x2cc2 <report+0xd74>

		case 'v':					// Vacuum
			redvac = read_ionpump(REDPUMP);
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	0e 94 58 09 	call	0x12b0	; 0x12b0 <read_ionpump>
    2b86:	d6 2e       	mov	r13, r22
    2b88:	c7 2e       	mov	r12, r23
    2b8a:	b8 2e       	mov	r11, r24
    2b8c:	a9 2e       	mov	r10, r25
			bluvac = read_ionpump(BLUEPUMP);
    2b8e:	82 e0       	ldi	r24, 0x02	; 2
    2b90:	0e 94 58 09 	call	0x12b0	; 0x12b0 <read_ionpump>
    2b94:	96 2e       	mov	r9, r22
    2b96:	87 2e       	mov	r8, r23
    2b98:	78 2e       	mov	r7, r24
    2b9a:	69 2e       	mov	r6, r25
			get_time(currenttime);
    2b9c:	7e 01       	movw	r14, r28
    2b9e:	96 ef       	ldi	r25, 0xF6	; 246
    2ba0:	e9 1a       	sub	r14, r25
    2ba2:	9e ef       	ldi	r25, 0xFE	; 254
    2ba4:	f9 0a       	sbc	r15, r25
    2ba6:	c7 01       	movw	r24, r14
    2ba8:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
    2bac:	24 e3       	ldi	r18, 0x34	; 52
    2bae:	20 9f       	mul	r18, r16
    2bb0:	c0 01       	movw	r24, r0
    2bb2:	21 9f       	mul	r18, r17
    2bb4:	90 0d       	add	r25, r0
    2bb6:	11 24       	eor	r1, r1
    2bb8:	88 5c       	subi	r24, 0xC8	; 200
    2bba:	97 4d       	sbci	r25, 0xD7	; 215
    2bbc:	9f 93       	push	r25
    2bbe:	8f 93       	push	r24
    2bc0:	6f 92       	push	r6
    2bc2:	7f 92       	push	r7
    2bc4:	8f 92       	push	r8
    2bc6:	9f 92       	push	r9
    2bc8:	af 92       	push	r10
    2bca:	bf 92       	push	r11
    2bcc:	cf 92       	push	r12
    2bce:	df 92       	push	r13
    2bd0:	ff 92       	push	r15
    2bd2:	ef 92       	push	r14
    2bd4:	ce 01       	movw	r24, r28
    2bd6:	8c 51       	subi	r24, 0x1C	; 28
    2bd8:	9d 4f       	sbci	r25, 0xFD	; 253
    2bda:	9f 93       	push	r25
    2bdc:	8f 93       	push	r24
    2bde:	8e 01       	movw	r16, r28
    2be0:	0f 5f       	subi	r16, 0xFF	; 255
    2be2:	1f 4f       	sbci	r17, 0xFF	; 255
    2be4:	1f 93       	push	r17
    2be6:	0f 93       	push	r16
    2be8:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			printLine(outbuf);
    2bec:	c8 01       	movw	r24, r16
    2bee:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    2bf2:	41 e0       	ldi	r20, 0x01	; 1
    2bf4:	62 e0       	ldi	r22, 0x02	; 2
    2bf6:	78 ea       	ldi	r23, 0xA8	; 168
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    2bfe:	6f 92       	push	r6
    2c00:	7f 92       	push	r7
    2c02:	8f 92       	push	r8
    2c04:	9f 92       	push	r9
    2c06:	af 92       	push	r10
    2c08:	bf 92       	push	r11
    2c0a:	cf 92       	push	r12
    2c0c:	df 92       	push	r13
    2c0e:	ce 01       	movw	r24, r28
    2c10:	87 5f       	subi	r24, 0xF7	; 247
    2c12:	9c 4f       	sbci	r25, 0xFC	; 252
    2c14:	9f 93       	push	r25
    2c16:	8f 93       	push	r24
    2c18:	1f 93       	push	r17
    2c1a:	0f 93       	push	r16
    2c1c:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2c20:	42 e0       	ldi	r20, 0x02	; 2
    2c22:	b8 01       	movw	r22, r16
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <writestr_OLED>
			break;
    2c2a:	cd bf       	out	0x3d, r28	; 61
    2c2c:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2c2e:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    2c30:	48 c0       	rjmp	.+144    	; 0x2cc2 <report+0xd74>

		case 'V':					// Version
			get_VERSION(version);
    2c32:	6e 01       	movw	r12, r28
    2c34:	9f ef       	ldi	r25, 0xFF	; 255
    2c36:	c9 0e       	add	r12, r25
    2c38:	d1 1c       	adc	r13, r1
    2c3a:	c6 01       	movw	r24, r12
    2c3c:	0e 94 50 07 	call	0xea0	; 0xea0 <get_VERSION>
			get_time(currenttime);
    2c40:	7e 01       	movw	r14, r28
    2c42:	86 ef       	ldi	r24, 0xF6	; 246
    2c44:	e8 1a       	sub	r14, r24
    2c46:	8e ef       	ldi	r24, 0xFE	; 254
    2c48:	f8 0a       	sbc	r15, r24
    2c4a:	c7 01       	movw	r24, r14
    2c4c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_time>
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
    2c50:	24 e3       	ldi	r18, 0x34	; 52
    2c52:	20 9f       	mul	r18, r16
    2c54:	c0 01       	movw	r24, r0
    2c56:	21 9f       	mul	r18, r17
    2c58:	90 0d       	add	r25, r0
    2c5a:	11 24       	eor	r1, r1
    2c5c:	88 5c       	subi	r24, 0xC8	; 200
    2c5e:	97 4d       	sbci	r25, 0xD7	; 215
    2c60:	9f 93       	push	r25
    2c62:	8f 93       	push	r24
    2c64:	df 92       	push	r13
    2c66:	cf 92       	push	r12
    2c68:	ff 92       	push	r15
    2c6a:	ef 92       	push	r14
    2c6c:	ce 01       	movw	r24, r28
    2c6e:	8a 5e       	subi	r24, 0xEA	; 234
    2c70:	9c 4f       	sbci	r25, 0xFC	; 252
    2c72:	9f 93       	push	r25
    2c74:	8f 93       	push	r24
    2c76:	8e 01       	movw	r16, r28
    2c78:	0f 5f       	subi	r16, 0xFF	; 255
    2c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7c:	1f 93       	push	r17
    2c7e:	0f 93       	push	r16
    2c80:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
			printLine(outbuf);
    2c84:	c8 01       	movw	r24, r16
    2c86:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "specMech Version", 1);
    2c8a:	41 e0       	ldi	r20, 0x01	; 1
    2c8c:	61 e2       	ldi	r22, 0x21	; 33
    2c8e:	76 ea       	ldi	r23, 0xA6	; 166
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <writestr_OLED>
			get_VERSION(outbuf);
    2c96:	c8 01       	movw	r24, r16
    2c98:	0e 94 50 07 	call	0xea0	; 0xea0 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    2c9c:	42 e0       	ldi	r20, 0x02	; 2
    2c9e:	b8 01       	movw	r22, r16
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <writestr_OLED>
			break;
    2ca6:	cd bf       	out	0x3d, r28	; 61
    2ca8:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2caa:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    2cac:	0a c0       	rjmp	.+20     	; 0x2cc2 <report+0xd74>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    2cae:	62 e1       	ldi	r22, 0x12	; 18
    2cb0:	78 ea       	ldi	r23, 0xA8	; 168
    2cb2:	8a ec       	ldi	r24, 0xCA	; 202
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			return(ERROR);
    2cba:	0f 2e       	mov	r0, r31
    2cbc:	f3 e6       	ldi	r31, 0x63	; 99
    2cbe:	ff 2e       	mov	r15, r31
    2cc0:	f0 2d       	mov	r31, r0
			break;
	}

	return(NOERROR);

}
    2cc2:	8f 2d       	mov	r24, r15
    2cc4:	cf 58       	subi	r28, 0x8F	; 143
    2cc6:	dc 4f       	sbci	r29, 0xFC	; 252
    2cc8:	cd bf       	out	0x3d, r28	; 61
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	df 91       	pop	r29
    2cce:	cf 91       	pop	r28
    2cd0:	1f 91       	pop	r17
    2cd2:	0f 91       	pop	r16
    2cd4:	ff 90       	pop	r15
    2cd6:	ef 90       	pop	r14
    2cd8:	df 90       	pop	r13
    2cda:	cf 90       	pop	r12
    2cdc:	bf 90       	pop	r11
    2cde:	af 90       	pop	r10
    2ce0:	9f 90       	pop	r9
    2ce2:	8f 90       	pop	r8
    2ce4:	7f 90       	pop	r7
    2ce6:	6f 90       	pop	r6
    2ce8:	5f 90       	pop	r5
    2cea:	4f 90       	pop	r4
    2cec:	3f 90       	pop	r3
    2cee:	2f 90       	pop	r2
    2cf0:	08 95       	ret

00002cf2 <crc16>:
	}

	// TBD: Check that all motors are at the same position

	return(NOERROR);
}
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	40 e0       	ldi	r20, 0x00	; 0
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	1b c0       	rjmp	.+54     	; 0x2d34 <crc16+0x42>
    2cfe:	fd 01       	movw	r30, r26
    2d00:	e4 0f       	add	r30, r20
    2d02:	f5 1f       	adc	r31, r21
    2d04:	20 81       	ld	r18, Z
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	32 2f       	mov	r19, r18
    2d0a:	22 27       	eor	r18, r18
    2d0c:	82 27       	eor	r24, r18
    2d0e:	93 27       	eor	r25, r19
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	0c c0       	rjmp	.+24     	; 0x2d2c <crc16+0x3a>
    2d14:	99 23       	and	r25, r25
    2d16:	3c f4       	brge	.+14     	; 0x2d26 <crc16+0x34>
    2d18:	88 0f       	add	r24, r24
    2d1a:	99 1f       	adc	r25, r25
    2d1c:	31 e2       	ldi	r19, 0x21	; 33
    2d1e:	83 27       	eor	r24, r19
    2d20:	30 e1       	ldi	r19, 0x10	; 16
    2d22:	93 27       	eor	r25, r19
    2d24:	02 c0       	rjmp	.+4      	; 0x2d2a <crc16+0x38>
    2d26:	88 0f       	add	r24, r24
    2d28:	99 1f       	adc	r25, r25
    2d2a:	2f 5f       	subi	r18, 0xFF	; 255
    2d2c:	28 30       	cpi	r18, 0x08	; 8
    2d2e:	90 f3       	brcs	.-28     	; 0x2d14 <crc16+0x22>
    2d30:	4f 5f       	subi	r20, 0xFF	; 255
    2d32:	5f 4f       	sbci	r21, 0xFF	; 255
    2d34:	46 17       	cp	r20, r22
    2d36:	57 07       	cpc	r21, r23
    2d38:	10 f3       	brcs	.-60     	; 0x2cfe <crc16+0xc>
    2d3a:	08 95       	ret

00002d3c <get_FRAM_MOTOR_ENCODER>:
    2d3c:	cf 92       	push	r12
    2d3e:	df 92       	push	r13
    2d40:	ef 92       	push	r14
    2d42:	ff 92       	push	r15
    2d44:	0f 93       	push	r16
    2d46:	1f 93       	push	r17
    2d48:	cf 93       	push	r28
    2d4a:	df 93       	push	r29
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    2d50:	c3 58       	subi	r28, 0x83	; 131
    2d52:	d1 09       	sbc	r29, r1
    2d54:	cd bf       	out	0x3d, r28	; 61
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	8b 01       	movw	r16, r22
    2d5a:	9f e2       	ldi	r25, 0x2F	; 47
    2d5c:	e2 e0       	ldi	r30, 0x02	; 2
    2d5e:	fa ea       	ldi	r31, 0xAA	; 170
    2d60:	de 01       	movw	r26, r28
    2d62:	11 96       	adiw	r26, 0x01	; 1
    2d64:	01 90       	ld	r0, Z+
    2d66:	0d 92       	st	X+, r0
    2d68:	9a 95       	dec	r25
    2d6a:	e1 f7       	brne	.-8      	; 0x2d64 <get_FRAM_MOTOR_ENCODER+0x28>
    2d6c:	81 38       	cpi	r24, 0x81	; 129
    2d6e:	59 f0       	breq	.+22     	; 0x2d86 <get_FRAM_MOTOR_ENCODER+0x4a>
    2d70:	82 38       	cpi	r24, 0x82	; 130
    2d72:	31 f0       	breq	.+12     	; 0x2d80 <get_FRAM_MOTOR_ENCODER+0x44>
    2d74:	80 38       	cpi	r24, 0x80	; 128
    2d76:	09 f0       	breq	.+2      	; 0x2d7a <get_FRAM_MOTOR_ENCODER+0x3e>
    2d78:	71 c0       	rjmp	.+226    	; 0x2e5c <get_FRAM_MOTOR_ENCODER+0x120>
    2d7a:	64 e1       	ldi	r22, 0x14	; 20
    2d7c:	70 e0       	ldi	r23, 0x00	; 0
    2d7e:	05 c0       	rjmp	.+10     	; 0x2d8a <get_FRAM_MOTOR_ENCODER+0x4e>
    2d80:	6c e1       	ldi	r22, 0x1C	; 28
    2d82:	70 e0       	ldi	r23, 0x00	; 0
    2d84:	02 c0       	rjmp	.+4      	; 0x2d8a <get_FRAM_MOTOR_ENCODER+0x4e>
    2d86:	68 e1       	ldi	r22, 0x18	; 24
    2d88:	70 e0       	ldi	r23, 0x00	; 0
    2d8a:	f8 2e       	mov	r15, r24
    2d8c:	24 e0       	ldi	r18, 0x04	; 4
    2d8e:	ae 01       	movw	r20, r28
    2d90:	40 58       	subi	r20, 0x80	; 128
    2d92:	5f 4f       	sbci	r21, 0xFF	; 255
    2d94:	80 e5       	ldi	r24, 0x50	; 80
    2d96:	0e 94 cb 07 	call	0xf96	; 0xf96 <read_FRAM>
    2d9a:	e8 2e       	mov	r14, r24
    2d9c:	83 e6       	ldi	r24, 0x63	; 99
    2d9e:	e8 12       	cpse	r14, r24
    2da0:	24 c0       	rjmp	.+72     	; 0x2dea <get_FRAM_MOTOR_ENCODER+0xae>
    2da2:	81 ec       	ldi	r24, 0xC1	; 193
    2da4:	8f 0d       	add	r24, r15
    2da6:	1f 92       	push	r1
    2da8:	8f 93       	push	r24
    2daa:	ce 01       	movw	r24, r28
    2dac:	01 96       	adiw	r24, 0x01	; 1
    2dae:	9f 93       	push	r25
    2db0:	8f 93       	push	r24
    2db2:	6e 01       	movw	r12, r28
    2db4:	e0 e3       	ldi	r30, 0x30	; 48
    2db6:	ce 0e       	add	r12, r30
    2db8:	d1 1c       	adc	r13, r1
    2dba:	df 92       	push	r13
    2dbc:	cf 92       	push	r12
    2dbe:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    2dc2:	b6 01       	movw	r22, r12
    2dc4:	83 e9       	ldi	r24, 0x93	; 147
    2dc6:	91 e0       	ldi	r25, 0x01	; 1
    2dc8:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    2dcc:	8f ef       	ldi	r24, 0xFF	; 255
    2dce:	9f ef       	ldi	r25, 0xFF	; 255
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	f8 01       	movw	r30, r16
    2dd4:	80 83       	st	Z, r24
    2dd6:	91 83       	std	Z+1, r25	; 0x01
    2dd8:	a2 83       	std	Z+2, r26	; 0x02
    2dda:	b3 83       	std	Z+3, r27	; 0x03
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	0f 90       	pop	r0
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	3d c0       	rjmp	.+122    	; 0x2e64 <get_FRAM_MOTOR_ENCODER+0x128>
    2dea:	c0 58       	subi	r28, 0x80	; 128
    2dec:	df 4f       	sbci	r29, 0xFF	; 255
    2dee:	88 81       	ld	r24, Y
    2df0:	c0 58       	subi	r28, 0x80	; 128
    2df2:	d0 40       	sbci	r29, 0x00	; 0
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	a0 e0       	ldi	r26, 0x00	; 0
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	78 2f       	mov	r23, r24
    2dfc:	66 27       	eor	r22, r22
    2dfe:	55 27       	eor	r21, r21
    2e00:	44 27       	eor	r20, r20
    2e02:	cf 57       	subi	r28, 0x7F	; 127
    2e04:	df 4f       	sbci	r29, 0xFF	; 255
    2e06:	98 81       	ld	r25, Y
    2e08:	c1 58       	subi	r28, 0x81	; 129
    2e0a:	d0 40       	sbci	r29, 0x00	; 0
    2e0c:	89 2f       	mov	r24, r25
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	a0 e0       	ldi	r26, 0x00	; 0
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	dc 01       	movw	r26, r24
    2e16:	99 27       	eor	r25, r25
    2e18:	88 27       	eor	r24, r24
    2e1a:	84 2b       	or	r24, r20
    2e1c:	95 2b       	or	r25, r21
    2e1e:	a6 2b       	or	r26, r22
    2e20:	b7 2b       	or	r27, r23
    2e22:	ce 57       	subi	r28, 0x7E	; 126
    2e24:	df 4f       	sbci	r29, 0xFF	; 255
    2e26:	48 81       	ld	r20, Y
    2e28:	c2 58       	subi	r28, 0x82	; 130
    2e2a:	d0 40       	sbci	r29, 0x00	; 0
    2e2c:	50 e0       	ldi	r21, 0x00	; 0
    2e2e:	60 e0       	ldi	r22, 0x00	; 0
    2e30:	70 e0       	ldi	r23, 0x00	; 0
    2e32:	76 2f       	mov	r23, r22
    2e34:	65 2f       	mov	r22, r21
    2e36:	54 2f       	mov	r21, r20
    2e38:	44 27       	eor	r20, r20
    2e3a:	84 2b       	or	r24, r20
    2e3c:	95 2b       	or	r25, r21
    2e3e:	a6 2b       	or	r26, r22
    2e40:	b7 2b       	or	r27, r23
    2e42:	cd 57       	subi	r28, 0x7D	; 125
    2e44:	df 4f       	sbci	r29, 0xFF	; 255
    2e46:	28 81       	ld	r18, Y
    2e48:	c3 58       	subi	r28, 0x83	; 131
    2e4a:	d0 40       	sbci	r29, 0x00	; 0
    2e4c:	82 2b       	or	r24, r18
    2e4e:	f8 01       	movw	r30, r16
    2e50:	80 83       	st	Z, r24
    2e52:	91 83       	std	Z+1, r25	; 0x01
    2e54:	a2 83       	std	Z+2, r26	; 0x02
    2e56:	b3 83       	std	Z+3, r27	; 0x03
    2e58:	e1 2c       	mov	r14, r1
    2e5a:	04 c0       	rjmp	.+8      	; 0x2e64 <get_FRAM_MOTOR_ENCODER+0x128>
    2e5c:	0f 2e       	mov	r0, r31
    2e5e:	f3 e6       	ldi	r31, 0x63	; 99
    2e60:	ef 2e       	mov	r14, r31
    2e62:	f0 2d       	mov	r31, r0
    2e64:	8e 2d       	mov	r24, r14
    2e66:	cd 57       	subi	r28, 0x7D	; 125
    2e68:	df 4f       	sbci	r29, 0xFF	; 255
    2e6a:	cd bf       	out	0x3d, r28	; 61
    2e6c:	de bf       	out	0x3e, r29	; 62
    2e6e:	df 91       	pop	r29
    2e70:	cf 91       	pop	r28
    2e72:	1f 91       	pop	r17
    2e74:	0f 91       	pop	r16
    2e76:	ff 90       	pop	r15
    2e78:	ef 90       	pop	r14
    2e7a:	df 90       	pop	r13
    2e7c:	cf 90       	pop	r12
    2e7e:	08 95       	ret

00002e80 <get_MOTOR>:
    2e80:	2f 92       	push	r2
    2e82:	3f 92       	push	r3
    2e84:	4f 92       	push	r4
    2e86:	5f 92       	push	r5
    2e88:	6f 92       	push	r6
    2e8a:	7f 92       	push	r7
    2e8c:	8f 92       	push	r8
    2e8e:	9f 92       	push	r9
    2e90:	af 92       	push	r10
    2e92:	bf 92       	push	r11
    2e94:	cf 92       	push	r12
    2e96:	df 92       	push	r13
    2e98:	ef 92       	push	r14
    2e9a:	ff 92       	push	r15
    2e9c:	0f 93       	push	r16
    2e9e:	1f 93       	push	r17
    2ea0:	cf 93       	push	r28
    2ea2:	df 93       	push	r29
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    2ea8:	cf 58       	subi	r28, 0x8F	; 143
    2eaa:	d1 09       	sbc	r29, r1
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	de bf       	out	0x3e, r29	; 62
    2eb0:	c1 57       	subi	r28, 0x71	; 113
    2eb2:	df 4f       	sbci	r29, 0xFF	; 255
    2eb4:	88 83       	st	Y, r24
    2eb6:	cf 58       	subi	r28, 0x8F	; 143
    2eb8:	d0 40       	sbci	r29, 0x00	; 0
    2eba:	7a 01       	movw	r14, r20
    2ebc:	42 2e       	mov	r4, r18
    2ebe:	6d b6       	in	r6, 0x3d	; 61
    2ec0:	7e b6       	in	r7, 0x3e	; 62
    2ec2:	c2 2e       	mov	r12, r18
    2ec4:	d1 2c       	mov	r13, r1
    2ec6:	c6 01       	movw	r24, r12
    2ec8:	02 96       	adiw	r24, 0x02	; 2
    2eca:	16 01       	movw	r2, r12
    2ecc:	2f ef       	ldi	r18, 0xFF	; 255
    2ece:	22 1a       	sub	r2, r18
    2ed0:	32 0a       	sbc	r3, r18
    2ed2:	ed b7       	in	r30, 0x3d	; 61
    2ed4:	fe b7       	in	r31, 0x3e	; 62
    2ed6:	e8 1b       	sub	r30, r24
    2ed8:	f9 0b       	sbc	r31, r25
    2eda:	ed bf       	out	0x3d, r30	; 61
    2edc:	fe bf       	out	0x3e, r31	; 62
    2ede:	2d b7       	in	r18, 0x3d	; 61
    2ee0:	3e b7       	in	r19, 0x3e	; 62
    2ee2:	2f 5f       	subi	r18, 0xFF	; 255
    2ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee6:	59 01       	movw	r10, r18
    2ee8:	89 01       	movw	r16, r18
    2eea:	80 e2       	ldi	r24, 0x20	; 32
    2eec:	ec e4       	ldi	r30, 0x4C	; 76
    2eee:	fa ea       	ldi	r31, 0xAA	; 170
    2ef0:	de 01       	movw	r26, r28
    2ef2:	af 5a       	subi	r26, 0xAF	; 175
    2ef4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ef6:	01 90       	ld	r0, Z+
    2ef8:	0d 92       	st	X+, r0
    2efa:	8a 95       	dec	r24
    2efc:	e1 f7       	brne	.-8      	; 0x2ef6 <get_MOTOR+0x76>
    2efe:	8e e1       	ldi	r24, 0x1E	; 30
    2f00:	ec e6       	ldi	r30, 0x6C	; 108
    2f02:	fa ea       	ldi	r31, 0xAA	; 170
    2f04:	de 01       	movw	r26, r28
    2f06:	af 58       	subi	r26, 0x8F	; 143
    2f08:	bf 4f       	sbci	r27, 0xFF	; 255
    2f0a:	01 90       	ld	r0, Z+
    2f0c:	0d 92       	st	X+, r0
    2f0e:	8a 95       	dec	r24
    2f10:	e1 f7       	brne	.-8      	; 0x2f0a <get_MOTOR+0x8a>
    2f12:	68 94       	set
    2f14:	55 24       	eor	r5, r5
    2f16:	51 f8       	bld	r5, 1
    2f18:	54 0c       	add	r5, r4
    2f1a:	10 92 3a 2b 	sts	0x2B3A, r1	; 0x802b3a <ser_recv1+0xff>
    2f1e:	50 92 39 2b 	sts	0x2B39, r5	; 0x802b39 <ser_recv1+0xfe>
    2f22:	c1 57       	subi	r28, 0x71	; 113
    2f24:	df 4f       	sbci	r29, 0xFF	; 255
    2f26:	28 81       	ld	r18, Y
    2f28:	cf 58       	subi	r28, 0x8F	; 143
    2f2a:	d0 40       	sbci	r29, 0x00	; 0
    2f2c:	ed b7       	in	r30, 0x3d	; 61
    2f2e:	fe b7       	in	r31, 0x3e	; 62
    2f30:	21 83       	std	Z+1, r18	; 0x01
    2f32:	f5 01       	movw	r30, r10
    2f34:	61 83       	std	Z+1, r22	; 0x01
    2f36:	62 e0       	ldi	r22, 0x02	; 2
    2f38:	c5 01       	movw	r24, r10
    2f3a:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <send_USART1>
    2f3e:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    2f42:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
    2f46:	27 c0       	rjmp	.+78     	; 0x2f96 <get_MOTOR+0x116>
    2f48:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    2f4c:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    2f50:	c3 97       	sbiw	r24, 0x33	; 51
    2f52:	08 f1       	brcs	.+66     	; 0x2f96 <get_MOTOR+0x116>
    2f54:	c1 57       	subi	r28, 0x71	; 113
    2f56:	df 4f       	sbci	r29, 0xFF	; 255
    2f58:	88 81       	ld	r24, Y
    2f5a:	cf 58       	subi	r28, 0x8F	; 143
    2f5c:	d0 40       	sbci	r29, 0x00	; 0
    2f5e:	8f 53       	subi	r24, 0x3F	; 63
    2f60:	1f 92       	push	r1
    2f62:	8f 93       	push	r24
    2f64:	ce 01       	movw	r24, r28
    2f66:	8f 5a       	subi	r24, 0xAF	; 175
    2f68:	9f 4f       	sbci	r25, 0xFF	; 255
    2f6a:	9f 93       	push	r25
    2f6c:	8f 93       	push	r24
    2f6e:	8e 01       	movw	r16, r28
    2f70:	0f 5f       	subi	r16, 0xFF	; 255
    2f72:	1f 4f       	sbci	r17, 0xFF	; 255
    2f74:	1f 93       	push	r17
    2f76:	0f 93       	push	r16
    2f78:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    2f7c:	b8 01       	movw	r22, r16
    2f7e:	80 e3       	ldi	r24, 0x30	; 48
    2f80:	91 e0       	ldi	r25, 0x01	; 1
    2f82:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    2f86:	0f 90       	pop	r0
    2f88:	0f 90       	pop	r0
    2f8a:	0f 90       	pop	r0
    2f8c:	0f 90       	pop	r0
    2f8e:	0f 90       	pop	r0
    2f90:	0f 90       	pop	r0
    2f92:	83 e6       	ldi	r24, 0x63	; 99
    2f94:	75 c0       	rjmp	.+234    	; 0x3080 <get_MOTOR+0x200>
    2f96:	90 91 3a 2b 	lds	r25, 0x2B3A	; 0x802b3a <ser_recv1+0xff>
    2f9a:	80 91 39 2b 	lds	r24, 0x2B39	; 0x802b39 <ser_recv1+0xfe>
    2f9e:	98 17       	cp	r25, r24
    2fa0:	98 f2       	brcs	.-90     	; 0x2f48 <get_MOTOR+0xc8>
    2fa2:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    2fa6:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    2faa:	9f 93       	push	r25
    2fac:	8f 93       	push	r24
    2fae:	81 e3       	ldi	r24, 0x31	; 49
    2fb0:	9a ea       	ldi	r25, 0xAA	; 170
    2fb2:	9f 93       	push	r25
    2fb4:	8f 93       	push	r24
    2fb6:	9e 01       	movw	r18, r28
    2fb8:	2f 5f       	subi	r18, 0xFF	; 255
    2fba:	3f 4f       	sbci	r19, 0xFF	; 255
    2fbc:	49 01       	movw	r8, r18
    2fbe:	3f 93       	push	r19
    2fc0:	2f 93       	push	r18
    2fc2:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    2fc6:	c4 01       	movw	r24, r8
    2fc8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
    2fcc:	f6 01       	movw	r30, r12
    2fce:	e5 5c       	subi	r30, 0xC5	; 197
    2fd0:	f5 4d       	sbci	r31, 0xD5	; 213
    2fd2:	c0 80       	ld	r12, Z
    2fd4:	d1 2c       	mov	r13, r1
    2fd6:	dc 2c       	mov	r13, r12
    2fd8:	cc 24       	eor	r12, r12
    2fda:	f1 01       	movw	r30, r2
    2fdc:	e5 5c       	subi	r30, 0xC5	; 197
    2fde:	f5 4d       	sbci	r31, 0xD5	; 213
    2fe0:	80 81       	ld	r24, Z
    2fe2:	c8 2a       	or	r12, r24
    2fe4:	0f 90       	pop	r0
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
    2fec:	0f 90       	pop	r0
    2fee:	0f 90       	pop	r0
    2ff0:	22 e0       	ldi	r18, 0x02	; 2
    2ff2:	0b c0       	rjmp	.+22     	; 0x300a <get_MOTOR+0x18a>
    2ff4:	82 2f       	mov	r24, r18
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	e7 5c       	subi	r30, 0xC7	; 199
    2ffc:	f5 4d       	sbci	r31, 0xD5	; 213
    2ffe:	30 81       	ld	r19, Z
    3000:	f8 01       	movw	r30, r16
    3002:	e8 0f       	add	r30, r24
    3004:	f9 1f       	adc	r31, r25
    3006:	30 83       	st	Z, r19
    3008:	2f 5f       	subi	r18, 0xFF	; 255
    300a:	25 15       	cp	r18, r5
    300c:	98 f3       	brcs	.-26     	; 0x2ff4 <get_MOTOR+0x174>
    300e:	65 2d       	mov	r22, r5
    3010:	70 e0       	ldi	r23, 0x00	; 0
    3012:	c5 01       	movw	r24, r10
    3014:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <crc16>
    3018:	c8 16       	cp	r12, r24
    301a:	d9 06       	cpc	r13, r25
    301c:	69 f1       	breq	.+90     	; 0x3078 <get_MOTOR+0x1f8>
    301e:	c1 57       	subi	r28, 0x71	; 113
    3020:	df 4f       	sbci	r29, 0xFF	; 255
    3022:	88 81       	ld	r24, Y
    3024:	cf 58       	subi	r28, 0x8F	; 143
    3026:	d0 40       	sbci	r29, 0x00	; 0
    3028:	8f 53       	subi	r24, 0x3F	; 63
    302a:	1f 92       	push	r1
    302c:	8f 93       	push	r24
    302e:	ce 01       	movw	r24, r28
    3030:	8f 58       	subi	r24, 0x8F	; 143
    3032:	9f 4f       	sbci	r25, 0xFF	; 255
    3034:	9f 93       	push	r25
    3036:	8f 93       	push	r24
    3038:	8e 01       	movw	r16, r28
    303a:	0f 5f       	subi	r16, 0xFF	; 255
    303c:	1f 4f       	sbci	r17, 0xFF	; 255
    303e:	1f 93       	push	r17
    3040:	0f 93       	push	r16
    3042:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    3046:	b8 01       	movw	r22, r16
    3048:	81 e3       	ldi	r24, 0x31	; 49
    304a:	91 e0       	ldi	r25, 0x01	; 1
    304c:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	0f 90       	pop	r0
    3058:	0f 90       	pop	r0
    305a:	0f 90       	pop	r0
    305c:	83 e6       	ldi	r24, 0x63	; 99
    305e:	10 c0       	rjmp	.+32     	; 0x3080 <get_MOTOR+0x200>
    3060:	82 2f       	mov	r24, r18
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	f7 01       	movw	r30, r14
    3066:	e8 0f       	add	r30, r24
    3068:	f9 1f       	adc	r31, r25
    306a:	dc 01       	movw	r26, r24
    306c:	a5 5c       	subi	r26, 0xC5	; 197
    306e:	b5 4d       	sbci	r27, 0xD5	; 213
    3070:	8c 91       	ld	r24, X
    3072:	80 83       	st	Z, r24
    3074:	2f 5f       	subi	r18, 0xFF	; 255
    3076:	01 c0       	rjmp	.+2      	; 0x307a <get_MOTOR+0x1fa>
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	24 15       	cp	r18, r4
    307c:	88 f3       	brcs	.-30     	; 0x3060 <get_MOTOR+0x1e0>
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	6d be       	out	0x3d, r6	; 61
    3082:	7e be       	out	0x3e, r7	; 62
    3084:	c1 57       	subi	r28, 0x71	; 113
    3086:	df 4f       	sbci	r29, 0xFF	; 255
    3088:	cd bf       	out	0x3d, r28	; 61
    308a:	de bf       	out	0x3e, r29	; 62
    308c:	df 91       	pop	r29
    308e:	cf 91       	pop	r28
    3090:	1f 91       	pop	r17
    3092:	0f 91       	pop	r16
    3094:	ff 90       	pop	r15
    3096:	ef 90       	pop	r14
    3098:	df 90       	pop	r13
    309a:	cf 90       	pop	r12
    309c:	bf 90       	pop	r11
    309e:	af 90       	pop	r10
    30a0:	9f 90       	pop	r9
    30a2:	8f 90       	pop	r8
    30a4:	7f 90       	pop	r7
    30a6:	6f 90       	pop	r6
    30a8:	5f 90       	pop	r5
    30aa:	4f 90       	pop	r4
    30ac:	3f 90       	pop	r3
    30ae:	2f 90       	pop	r2
    30b0:	08 95       	ret

000030b2 <get_MOTOR_CURRENT>:
    30b2:	cf 92       	push	r12
    30b4:	df 92       	push	r13
    30b6:	ef 92       	push	r14
    30b8:	ff 92       	push	r15
    30ba:	0f 93       	push	r16
    30bc:	1f 93       	push	r17
    30be:	cf 93       	push	r28
    30c0:	df 93       	push	r29
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    30c6:	cd 57       	subi	r28, 0x7D	; 125
    30c8:	d1 09       	sbc	r29, r1
    30ca:	cd bf       	out	0x3d, r28	; 61
    30cc:	de bf       	out	0x3e, r29	; 62
    30ce:	e8 2e       	mov	r14, r24
    30d0:	8b 01       	movw	r16, r22
    30d2:	89 e2       	ldi	r24, 0x29	; 41
    30d4:	ea e8       	ldi	r30, 0x8A	; 138
    30d6:	fa ea       	ldi	r31, 0xAA	; 170
    30d8:	de 01       	movw	r26, r28
    30da:	11 96       	adiw	r26, 0x01	; 1
    30dc:	01 90       	ld	r0, Z+
    30de:	0d 92       	st	X+, r0
    30e0:	8a 95       	dec	r24
    30e2:	e1 f7       	brne	.-8      	; 0x30dc <get_MOTOR_CURRENT+0x2a>
    30e4:	24 e0       	ldi	r18, 0x04	; 4
    30e6:	ae 01       	movw	r20, r28
    30e8:	46 58       	subi	r20, 0x86	; 134
    30ea:	5f 4f       	sbci	r21, 0xFF	; 255
    30ec:	61 e3       	ldi	r22, 0x31	; 49
    30ee:	8e 2d       	mov	r24, r14
    30f0:	0e 94 40 17 	call	0x2e80	; 0x2e80 <get_MOTOR>
    30f4:	f8 2e       	mov	r15, r24
    30f6:	83 e6       	ldi	r24, 0x63	; 99
    30f8:	f8 12       	cpse	r15, r24
    30fa:	21 c0       	rjmp	.+66     	; 0x313e <get_MOTOR_CURRENT+0x8c>
    30fc:	81 ec       	ldi	r24, 0xC1	; 193
    30fe:	8e 0d       	add	r24, r14
    3100:	1f 92       	push	r1
    3102:	8f 93       	push	r24
    3104:	ce 01       	movw	r24, r28
    3106:	01 96       	adiw	r24, 0x01	; 1
    3108:	9f 93       	push	r25
    310a:	8f 93       	push	r24
    310c:	6e 01       	movw	r12, r28
    310e:	ea e2       	ldi	r30, 0x2A	; 42
    3110:	ce 0e       	add	r12, r30
    3112:	d1 1c       	adc	r13, r1
    3114:	df 92       	push	r13
    3116:	cf 92       	push	r12
    3118:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    311c:	b6 01       	movw	r22, r12
    311e:	86 e3       	ldi	r24, 0x36	; 54
    3120:	91 e0       	ldi	r25, 0x01	; 1
    3122:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    3126:	8f ef       	ldi	r24, 0xFF	; 255
    3128:	9f ef       	ldi	r25, 0xFF	; 255
    312a:	f8 01       	movw	r30, r16
    312c:	80 83       	st	Z, r24
    312e:	91 83       	std	Z+1, r25	; 0x01
    3130:	0f 90       	pop	r0
    3132:	0f 90       	pop	r0
    3134:	0f 90       	pop	r0
    3136:	0f 90       	pop	r0
    3138:	0f 90       	pop	r0
    313a:	0f 90       	pop	r0
    313c:	19 c0       	rjmp	.+50     	; 0x3170 <get_MOTOR_CURRENT+0xbe>
    313e:	eb 96       	adiw	r28, 0x3b	; 59
    3140:	8f ad       	ldd	r24, Y+63	; 0x3f
    3142:	eb 97       	sbiw	r28, 0x3b	; 59
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	98 2f       	mov	r25, r24
    3148:	88 27       	eor	r24, r24
    314a:	ec 96       	adiw	r28, 0x3c	; 60
    314c:	2f ad       	ldd	r18, Y+63	; 0x3f
    314e:	ec 97       	sbiw	r28, 0x3c	; 60
    3150:	82 2b       	or	r24, r18
    3152:	9c 01       	movw	r18, r24
    3154:	22 0f       	add	r18, r18
    3156:	33 1f       	adc	r19, r19
    3158:	88 0f       	add	r24, r24
    315a:	99 1f       	adc	r25, r25
    315c:	88 0f       	add	r24, r24
    315e:	99 1f       	adc	r25, r25
    3160:	88 0f       	add	r24, r24
    3162:	99 1f       	adc	r25, r25
    3164:	82 0f       	add	r24, r18
    3166:	93 1f       	adc	r25, r19
    3168:	f8 01       	movw	r30, r16
    316a:	80 83       	st	Z, r24
    316c:	91 83       	std	Z+1, r25	; 0x01
    316e:	f1 2c       	mov	r15, r1
    3170:	8f 2d       	mov	r24, r15
    3172:	c3 58       	subi	r28, 0x83	; 131
    3174:	df 4f       	sbci	r29, 0xFF	; 255
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	de bf       	out	0x3e, r29	; 62
    317a:	df 91       	pop	r29
    317c:	cf 91       	pop	r28
    317e:	1f 91       	pop	r17
    3180:	0f 91       	pop	r16
    3182:	ff 90       	pop	r15
    3184:	ef 90       	pop	r14
    3186:	df 90       	pop	r13
    3188:	cf 90       	pop	r12
    318a:	08 95       	ret

0000318c <get_MOTOR_ENCODER>:
    318c:	ef 92       	push	r14
    318e:	ff 92       	push	r15
    3190:	0f 93       	push	r16
    3192:	1f 93       	push	r17
    3194:	cf 93       	push	r28
    3196:	df 93       	push	r29
    3198:	cd b7       	in	r28, 0x3d	; 61
    319a:	de b7       	in	r29, 0x3e	; 62
    319c:	ce 57       	subi	r28, 0x7E	; 126
    319e:	d1 09       	sbc	r29, r1
    31a0:	cd bf       	out	0x3d, r28	; 61
    31a2:	de bf       	out	0x3e, r29	; 62
    31a4:	e8 2e       	mov	r14, r24
    31a6:	8b 01       	movw	r16, r22
    31a8:	89 e2       	ldi	r24, 0x29	; 41
    31aa:	ef eb       	ldi	r30, 0xBF	; 191
    31ac:	fa ea       	ldi	r31, 0xAA	; 170
    31ae:	de 01       	movw	r26, r28
    31b0:	11 96       	adiw	r26, 0x01	; 1
    31b2:	01 90       	ld	r0, Z+
    31b4:	0d 92       	st	X+, r0
    31b6:	8a 95       	dec	r24
    31b8:	e1 f7       	brne	.-8      	; 0x31b2 <get_MOTOR_ENCODER+0x26>
    31ba:	25 e0       	ldi	r18, 0x05	; 5
    31bc:	ae 01       	movw	r20, r28
    31be:	46 58       	subi	r20, 0x86	; 134
    31c0:	5f 4f       	sbci	r21, 0xFF	; 255
    31c2:	60 e1       	ldi	r22, 0x10	; 16
    31c4:	8e 2d       	mov	r24, r14
    31c6:	0e 94 40 17 	call	0x2e80	; 0x2e80 <get_MOTOR>
    31ca:	f8 2e       	mov	r15, r24
    31cc:	83 e6       	ldi	r24, 0x63	; 99
    31ce:	f8 12       	cpse	r15, r24
    31d0:	1b c0       	rjmp	.+54     	; 0x3208 <get_MOTOR_ENCODER+0x7c>
    31d2:	81 ec       	ldi	r24, 0xC1	; 193
    31d4:	8e 0d       	add	r24, r14
    31d6:	1f 92       	push	r1
    31d8:	8f 93       	push	r24
    31da:	ce 01       	movw	r24, r28
    31dc:	01 96       	adiw	r24, 0x01	; 1
    31de:	9f 93       	push	r25
    31e0:	8f 93       	push	r24
    31e2:	8e 01       	movw	r16, r28
    31e4:	06 5d       	subi	r16, 0xD6	; 214
    31e6:	1f 4f       	sbci	r17, 0xFF	; 255
    31e8:	1f 93       	push	r17
    31ea:	0f 93       	push	r16
    31ec:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    31f0:	b8 01       	movw	r22, r16
    31f2:	86 e3       	ldi	r24, 0x36	; 54
    31f4:	91 e0       	ldi	r25, 0x01	; 1
    31f6:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    31fa:	0f 90       	pop	r0
    31fc:	0f 90       	pop	r0
    31fe:	0f 90       	pop	r0
    3200:	0f 90       	pop	r0
    3202:	0f 90       	pop	r0
    3204:	0f 90       	pop	r0
    3206:	44 c0       	rjmp	.+136    	; 0x3290 <get_MOTOR_ENCODER+0x104>
    3208:	eb 96       	adiw	r28, 0x3b	; 59
    320a:	8f ad       	ldd	r24, Y+63	; 0x3f
    320c:	eb 97       	sbiw	r28, 0x3b	; 59
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	a0 e0       	ldi	r26, 0x00	; 0
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	78 2f       	mov	r23, r24
    3216:	66 27       	eor	r22, r22
    3218:	55 27       	eor	r21, r21
    321a:	44 27       	eor	r20, r20
    321c:	ec 96       	adiw	r28, 0x3c	; 60
    321e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3220:	ec 97       	sbiw	r28, 0x3c	; 60
    3222:	89 2f       	mov	r24, r25
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	a0 e0       	ldi	r26, 0x00	; 0
    3228:	b0 e0       	ldi	r27, 0x00	; 0
    322a:	dc 01       	movw	r26, r24
    322c:	99 27       	eor	r25, r25
    322e:	88 27       	eor	r24, r24
    3230:	84 2b       	or	r24, r20
    3232:	95 2b       	or	r25, r21
    3234:	a6 2b       	or	r26, r22
    3236:	b7 2b       	or	r27, r23
    3238:	ed 96       	adiw	r28, 0x3d	; 61
    323a:	4f ad       	ldd	r20, Y+63	; 0x3f
    323c:	ed 97       	sbiw	r28, 0x3d	; 61
    323e:	50 e0       	ldi	r21, 0x00	; 0
    3240:	60 e0       	ldi	r22, 0x00	; 0
    3242:	70 e0       	ldi	r23, 0x00	; 0
    3244:	76 2f       	mov	r23, r22
    3246:	65 2f       	mov	r22, r21
    3248:	54 2f       	mov	r21, r20
    324a:	44 27       	eor	r20, r20
    324c:	84 2b       	or	r24, r20
    324e:	95 2b       	or	r25, r21
    3250:	a6 2b       	or	r26, r22
    3252:	b7 2b       	or	r27, r23
    3254:	ee 96       	adiw	r28, 0x3e	; 62
    3256:	2f ad       	ldd	r18, Y+63	; 0x3f
    3258:	ee 97       	sbiw	r28, 0x3e	; 62
    325a:	82 2b       	or	r24, r18
    325c:	f8 01       	movw	r30, r16
    325e:	80 83       	st	Z, r24
    3260:	91 83       	std	Z+1, r25	; 0x01
    3262:	a2 83       	std	Z+2, r26	; 0x02
    3264:	b3 83       	std	Z+3, r27	; 0x03
    3266:	bf 93       	push	r27
    3268:	af 93       	push	r26
    326a:	9f 93       	push	r25
    326c:	8f 93       	push	r24
    326e:	83 eb       	ldi	r24, 0xB3	; 179
    3270:	9a ea       	ldi	r25, 0xAA	; 170
    3272:	9f 93       	push	r25
    3274:	8f 93       	push	r24
    3276:	8e 01       	movw	r16, r28
    3278:	06 5d       	subi	r16, 0xD6	; 214
    327a:	1f 4f       	sbci	r17, 0xFF	; 255
    327c:	1f 93       	push	r17
    327e:	0f 93       	push	r16
    3280:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    3284:	c8 01       	movw	r24, r16
    3286:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
    328a:	cd bf       	out	0x3d, r28	; 61
    328c:	de bf       	out	0x3e, r29	; 62
    328e:	f1 2c       	mov	r15, r1
    3290:	8f 2d       	mov	r24, r15
    3292:	c2 58       	subi	r28, 0x82	; 130
    3294:	df 4f       	sbci	r29, 0xFF	; 255
    3296:	cd bf       	out	0x3d, r28	; 61
    3298:	de bf       	out	0x3e, r29	; 62
    329a:	df 91       	pop	r29
    329c:	cf 91       	pop	r28
    329e:	1f 91       	pop	r17
    32a0:	0f 91       	pop	r16
    32a2:	ff 90       	pop	r15
    32a4:	ef 90       	pop	r14
    32a6:	08 95       	ret

000032a8 <get_MOTOR_FLOAT>:
    32a8:	cf 92       	push	r12
    32aa:	df 92       	push	r13
    32ac:	ef 92       	push	r14
    32ae:	ff 92       	push	r15
    32b0:	0f 93       	push	r16
    32b2:	1f 93       	push	r17
    32b4:	cf 93       	push	r28
    32b6:	df 93       	push	r29
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62
    32bc:	c9 57       	subi	r28, 0x79	; 121
    32be:	d1 09       	sbc	r29, r1
    32c0:	cd bf       	out	0x3d, r28	; 61
    32c2:	de bf       	out	0x3e, r29	; 62
    32c4:	e8 2e       	mov	r14, r24
    32c6:	8a 01       	movw	r16, r20
    32c8:	87 e2       	ldi	r24, 0x27	; 39
    32ca:	e8 ee       	ldi	r30, 0xE8	; 232
    32cc:	fa ea       	ldi	r31, 0xAA	; 170
    32ce:	de 01       	movw	r26, r28
    32d0:	11 96       	adiw	r26, 0x01	; 1
    32d2:	01 90       	ld	r0, Z+
    32d4:	0d 92       	st	X+, r0
    32d6:	8a 95       	dec	r24
    32d8:	e1 f7       	brne	.-8      	; 0x32d2 <get_MOTOR_FLOAT+0x2a>
    32da:	22 e0       	ldi	r18, 0x02	; 2
    32dc:	ae 01       	movw	r20, r28
    32de:	48 58       	subi	r20, 0x88	; 136
    32e0:	5f 4f       	sbci	r21, 0xFF	; 255
    32e2:	8e 2d       	mov	r24, r14
    32e4:	0e 94 40 17 	call	0x2e80	; 0x2e80 <get_MOTOR>
    32e8:	f8 2e       	mov	r15, r24
    32ea:	83 e6       	ldi	r24, 0x63	; 99
    32ec:	f8 12       	cpse	r15, r24
    32ee:	25 c0       	rjmp	.+74     	; 0x333a <get_MOTOR_FLOAT+0x92>
    32f0:	81 ec       	ldi	r24, 0xC1	; 193
    32f2:	8e 0d       	add	r24, r14
    32f4:	1f 92       	push	r1
    32f6:	8f 93       	push	r24
    32f8:	ce 01       	movw	r24, r28
    32fa:	01 96       	adiw	r24, 0x01	; 1
    32fc:	9f 93       	push	r25
    32fe:	8f 93       	push	r24
    3300:	6e 01       	movw	r12, r28
    3302:	e8 e2       	ldi	r30, 0x28	; 40
    3304:	ce 0e       	add	r12, r30
    3306:	d1 1c       	adc	r13, r1
    3308:	df 92       	push	r13
    330a:	cf 92       	push	r12
    330c:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    3310:	b6 01       	movw	r22, r12
    3312:	86 e3       	ldi	r24, 0x36	; 54
    3314:	91 e0       	ldi	r25, 0x01	; 1
    3316:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	90 e8       	ldi	r25, 0x80	; 128
    331e:	a6 e2       	ldi	r26, 0x26	; 38
    3320:	b4 ec       	ldi	r27, 0xC4	; 196
    3322:	f8 01       	movw	r30, r16
    3324:	80 83       	st	Z, r24
    3326:	91 83       	std	Z+1, r25	; 0x01
    3328:	a2 83       	std	Z+2, r26	; 0x02
    332a:	b3 83       	std	Z+3, r27	; 0x03
    332c:	0f 90       	pop	r0
    332e:	0f 90       	pop	r0
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	1c c0       	rjmp	.+56     	; 0x3372 <get_MOTOR_FLOAT+0xca>
    333a:	e9 96       	adiw	r28, 0x39	; 57
    333c:	6f ad       	ldd	r22, Y+63	; 0x3f
    333e:	e9 97       	sbiw	r28, 0x39	; 57
    3340:	70 e0       	ldi	r23, 0x00	; 0
    3342:	76 2f       	mov	r23, r22
    3344:	66 27       	eor	r22, r22
    3346:	ea 96       	adiw	r28, 0x3a	; 58
    3348:	8f ad       	ldd	r24, Y+63	; 0x3f
    334a:	ea 97       	sbiw	r28, 0x3a	; 58
    334c:	68 2b       	or	r22, r24
    334e:	07 2e       	mov	r0, r23
    3350:	00 0c       	add	r0, r0
    3352:	88 0b       	sbc	r24, r24
    3354:	99 0b       	sbc	r25, r25
    3356:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <__floatsisf>
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	40 e2       	ldi	r20, 0x20	; 32
    3360:	51 e4       	ldi	r21, 0x41	; 65
    3362:	0e 94 bf 29 	call	0x537e	; 0x537e <__divsf3>
    3366:	f8 01       	movw	r30, r16
    3368:	60 83       	st	Z, r22
    336a:	71 83       	std	Z+1, r23	; 0x01
    336c:	82 83       	std	Z+2, r24	; 0x02
    336e:	93 83       	std	Z+3, r25	; 0x03
    3370:	f1 2c       	mov	r15, r1
    3372:	8f 2d       	mov	r24, r15
    3374:	c7 58       	subi	r28, 0x87	; 135
    3376:	df 4f       	sbci	r29, 0xFF	; 255
    3378:	cd bf       	out	0x3d, r28	; 61
    337a:	de bf       	out	0x3e, r29	; 62
    337c:	df 91       	pop	r29
    337e:	cf 91       	pop	r28
    3380:	1f 91       	pop	r17
    3382:	0f 91       	pop	r16
    3384:	ff 90       	pop	r15
    3386:	ef 90       	pop	r14
    3388:	df 90       	pop	r13
    338a:	cf 90       	pop	r12
    338c:	08 95       	ret

0000338e <get_MOTOR_MAXCURRENT>:
    338e:	cf 92       	push	r12
    3390:	df 92       	push	r13
    3392:	ef 92       	push	r14
    3394:	ff 92       	push	r15
    3396:	0f 93       	push	r16
    3398:	1f 93       	push	r17
    339a:	cf 93       	push	r28
    339c:	df 93       	push	r29
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
    33a2:	c4 58       	subi	r28, 0x84	; 132
    33a4:	d1 09       	sbc	r29, r1
    33a6:	cd bf       	out	0x3d, r28	; 61
    33a8:	de bf       	out	0x3e, r29	; 62
    33aa:	e8 2e       	mov	r14, r24
    33ac:	8b 01       	movw	r16, r22
    33ae:	8c e2       	ldi	r24, 0x2C	; 44
    33b0:	ef e0       	ldi	r30, 0x0F	; 15
    33b2:	fb ea       	ldi	r31, 0xAB	; 171
    33b4:	de 01       	movw	r26, r28
    33b6:	11 96       	adiw	r26, 0x01	; 1
    33b8:	01 90       	ld	r0, Z+
    33ba:	0d 92       	st	X+, r0
    33bc:	8a 95       	dec	r24
    33be:	e1 f7       	brne	.-8      	; 0x33b8 <get_MOTOR_MAXCURRENT+0x2a>
    33c0:	28 e0       	ldi	r18, 0x08	; 8
    33c2:	ae 01       	movw	r20, r28
    33c4:	43 58       	subi	r20, 0x83	; 131
    33c6:	5f 4f       	sbci	r21, 0xFF	; 255
    33c8:	67 e8       	ldi	r22, 0x87	; 135
    33ca:	8e 2d       	mov	r24, r14
    33cc:	0e 94 40 17 	call	0x2e80	; 0x2e80 <get_MOTOR>
    33d0:	f8 2e       	mov	r15, r24
    33d2:	83 e6       	ldi	r24, 0x63	; 99
    33d4:	f8 12       	cpse	r15, r24
    33d6:	1b c0       	rjmp	.+54     	; 0x340e <get_MOTOR_MAXCURRENT+0x80>
    33d8:	81 ec       	ldi	r24, 0xC1	; 193
    33da:	8e 0d       	add	r24, r14
    33dc:	1f 92       	push	r1
    33de:	8f 93       	push	r24
    33e0:	ce 01       	movw	r24, r28
    33e2:	01 96       	adiw	r24, 0x01	; 1
    33e4:	9f 93       	push	r25
    33e6:	8f 93       	push	r24
    33e8:	8e 01       	movw	r16, r28
    33ea:	03 5d       	subi	r16, 0xD3	; 211
    33ec:	1f 4f       	sbci	r17, 0xFF	; 255
    33ee:	1f 93       	push	r17
    33f0:	0f 93       	push	r16
    33f2:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    33f6:	b8 01       	movw	r22, r16
    33f8:	86 e3       	ldi	r24, 0x36	; 54
    33fa:	91 e0       	ldi	r25, 0x01	; 1
    33fc:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    3400:	0f 90       	pop	r0
    3402:	0f 90       	pop	r0
    3404:	0f 90       	pop	r0
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	0f 90       	pop	r0
    340c:	45 c0       	rjmp	.+138    	; 0x3498 <get_MOTOR_MAXCURRENT+0x10a>
    340e:	ee 96       	adiw	r28, 0x3e	; 62
    3410:	8f ad       	ldd	r24, Y+63	; 0x3f
    3412:	ee 97       	sbiw	r28, 0x3e	; 62
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	a0 e0       	ldi	r26, 0x00	; 0
    3418:	b0 e0       	ldi	r27, 0x00	; 0
    341a:	f8 2e       	mov	r15, r24
    341c:	ee 24       	eor	r14, r14
    341e:	dd 24       	eor	r13, r13
    3420:	cc 24       	eor	r12, r12
    3422:	ef 96       	adiw	r28, 0x3f	; 63
    3424:	4f ad       	ldd	r20, Y+63	; 0x3f
    3426:	ef 97       	sbiw	r28, 0x3f	; 63
    3428:	50 e0       	ldi	r21, 0x00	; 0
    342a:	60 e0       	ldi	r22, 0x00	; 0
    342c:	70 e0       	ldi	r23, 0x00	; 0
    342e:	da 01       	movw	r26, r20
    3430:	99 27       	eor	r25, r25
    3432:	88 27       	eor	r24, r24
    3434:	8c 29       	or	r24, r12
    3436:	9d 29       	or	r25, r13
    3438:	ae 29       	or	r26, r14
    343a:	bf 29       	or	r27, r15
    343c:	c1 58       	subi	r28, 0x81	; 129
    343e:	df 4f       	sbci	r29, 0xFF	; 255
    3440:	48 81       	ld	r20, Y
    3442:	cf 57       	subi	r28, 0x7F	; 127
    3444:	d0 40       	sbci	r29, 0x00	; 0
    3446:	50 e0       	ldi	r21, 0x00	; 0
    3448:	60 e0       	ldi	r22, 0x00	; 0
    344a:	70 e0       	ldi	r23, 0x00	; 0
    344c:	76 2f       	mov	r23, r22
    344e:	65 2f       	mov	r22, r21
    3450:	54 2f       	mov	r21, r20
    3452:	44 27       	eor	r20, r20
    3454:	84 2b       	or	r24, r20
    3456:	95 2b       	or	r25, r21
    3458:	a6 2b       	or	r26, r22
    345a:	b7 2b       	or	r27, r23
    345c:	c0 58       	subi	r28, 0x80	; 128
    345e:	df 4f       	sbci	r29, 0xFF	; 255
    3460:	28 81       	ld	r18, Y
    3462:	c0 58       	subi	r28, 0x80	; 128
    3464:	d0 40       	sbci	r29, 0x00	; 0
    3466:	82 2b       	or	r24, r18
    3468:	88 0f       	add	r24, r24
    346a:	99 1f       	adc	r25, r25
    346c:	aa 1f       	adc	r26, r26
    346e:	bb 1f       	adc	r27, r27
    3470:	ac 01       	movw	r20, r24
    3472:	bd 01       	movw	r22, r26
    3474:	44 0f       	add	r20, r20
    3476:	55 1f       	adc	r21, r21
    3478:	66 1f       	adc	r22, r22
    347a:	77 1f       	adc	r23, r23
    347c:	44 0f       	add	r20, r20
    347e:	55 1f       	adc	r21, r21
    3480:	66 1f       	adc	r22, r22
    3482:	77 1f       	adc	r23, r23
    3484:	84 0f       	add	r24, r20
    3486:	95 1f       	adc	r25, r21
    3488:	a6 1f       	adc	r26, r22
    348a:	b7 1f       	adc	r27, r23
    348c:	f8 01       	movw	r30, r16
    348e:	80 83       	st	Z, r24
    3490:	91 83       	std	Z+1, r25	; 0x01
    3492:	a2 83       	std	Z+2, r26	; 0x02
    3494:	b3 83       	std	Z+3, r27	; 0x03
    3496:	f1 2c       	mov	r15, r1
    3498:	8f 2d       	mov	r24, r15
    349a:	cc 57       	subi	r28, 0x7C	; 124
    349c:	df 4f       	sbci	r29, 0xFF	; 255
    349e:	cd bf       	out	0x3d, r28	; 61
    34a0:	de bf       	out	0x3e, r29	; 62
    34a2:	df 91       	pop	r29
    34a4:	cf 91       	pop	r28
    34a6:	1f 91       	pop	r17
    34a8:	0f 91       	pop	r16
    34aa:	ff 90       	pop	r15
    34ac:	ef 90       	pop	r14
    34ae:	df 90       	pop	r13
    34b0:	cf 90       	pop	r12
    34b2:	08 95       	ret

000034b4 <get_MOTOR_PID>:
    34b4:	ef 92       	push	r14
    34b6:	ff 92       	push	r15
    34b8:	0f 93       	push	r16
    34ba:	1f 93       	push	r17
    34bc:	cf 93       	push	r28
    34be:	df 93       	push	r29
    34c0:	cd b7       	in	r28, 0x3d	; 61
    34c2:	de b7       	in	r29, 0x3e	; 62
    34c4:	c1 59       	subi	r28, 0x91	; 145
    34c6:	d1 09       	sbc	r29, r1
    34c8:	cd bf       	out	0x3d, r28	; 61
    34ca:	de bf       	out	0x3e, r29	; 62
    34cc:	f8 2e       	mov	r15, r24
    34ce:	8b 01       	movw	r16, r22
    34d0:	85 e2       	ldi	r24, 0x25	; 37
    34d2:	eb e3       	ldi	r30, 0x3B	; 59
    34d4:	fb ea       	ldi	r31, 0xAB	; 171
    34d6:	de 01       	movw	r26, r28
    34d8:	11 96       	adiw	r26, 0x01	; 1
    34da:	01 90       	ld	r0, Z+
    34dc:	0d 92       	st	X+, r0
    34de:	8a 95       	dec	r24
    34e0:	e1 f7       	brne	.-8      	; 0x34da <get_MOTOR_PID+0x26>
    34e2:	2c e1       	ldi	r18, 0x1C	; 28
    34e4:	ae 01       	movw	r20, r28
    34e6:	4a 58       	subi	r20, 0x8A	; 138
    34e8:	5f 4f       	sbci	r21, 0xFF	; 255
    34ea:	6f e3       	ldi	r22, 0x3F	; 63
    34ec:	8f 2d       	mov	r24, r15
    34ee:	0e 94 40 17 	call	0x2e80	; 0x2e80 <get_MOTOR>
    34f2:	e8 2e       	mov	r14, r24
    34f4:	83 e6       	ldi	r24, 0x63	; 99
    34f6:	e8 12       	cpse	r14, r24
    34f8:	1b c0       	rjmp	.+54     	; 0x3530 <get_MOTOR_PID+0x7c>
    34fa:	81 ec       	ldi	r24, 0xC1	; 193
    34fc:	8f 0d       	add	r24, r15
    34fe:	1f 92       	push	r1
    3500:	8f 93       	push	r24
    3502:	ce 01       	movw	r24, r28
    3504:	01 96       	adiw	r24, 0x01	; 1
    3506:	9f 93       	push	r25
    3508:	8f 93       	push	r24
    350a:	8e 01       	movw	r16, r28
    350c:	0a 5d       	subi	r16, 0xDA	; 218
    350e:	1f 4f       	sbci	r17, 0xFF	; 255
    3510:	1f 93       	push	r17
    3512:	0f 93       	push	r16
    3514:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    3518:	b8 01       	movw	r22, r16
    351a:	86 e3       	ldi	r24, 0x36	; 54
    351c:	91 e0       	ldi	r25, 0x01	; 1
    351e:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    3522:	0f 90       	pop	r0
    3524:	0f 90       	pop	r0
    3526:	0f 90       	pop	r0
    3528:	0f 90       	pop	r0
    352a:	0f 90       	pop	r0
    352c:	0f 90       	pop	r0
    352e:	e5 c1       	rjmp	.+970    	; 0x38fa <get_MOTOR_PID+0x446>
    3530:	e7 96       	adiw	r28, 0x37	; 55
    3532:	4f ad       	ldd	r20, Y+63	; 0x3f
    3534:	e7 97       	sbiw	r28, 0x37	; 55
    3536:	50 e0       	ldi	r21, 0x00	; 0
    3538:	60 e0       	ldi	r22, 0x00	; 0
    353a:	70 e0       	ldi	r23, 0x00	; 0
    353c:	74 2f       	mov	r23, r20
    353e:	66 27       	eor	r22, r22
    3540:	55 27       	eor	r21, r21
    3542:	44 27       	eor	r20, r20
    3544:	e8 96       	adiw	r28, 0x38	; 56
    3546:	8f ad       	ldd	r24, Y+63	; 0x3f
    3548:	e8 97       	sbiw	r28, 0x38	; 56
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	a0 e0       	ldi	r26, 0x00	; 0
    354e:	b0 e0       	ldi	r27, 0x00	; 0
    3550:	dc 01       	movw	r26, r24
    3552:	99 27       	eor	r25, r25
    3554:	88 27       	eor	r24, r24
    3556:	48 2b       	or	r20, r24
    3558:	59 2b       	or	r21, r25
    355a:	6a 2b       	or	r22, r26
    355c:	7b 2b       	or	r23, r27
    355e:	e9 96       	adiw	r28, 0x39	; 57
    3560:	8f ad       	ldd	r24, Y+63	; 0x3f
    3562:	e9 97       	sbiw	r28, 0x39	; 57
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	a0 e0       	ldi	r26, 0x00	; 0
    3568:	b0 e0       	ldi	r27, 0x00	; 0
    356a:	ba 2f       	mov	r27, r26
    356c:	a9 2f       	mov	r26, r25
    356e:	98 2f       	mov	r25, r24
    3570:	88 27       	eor	r24, r24
    3572:	84 2b       	or	r24, r20
    3574:	95 2b       	or	r25, r21
    3576:	a6 2b       	or	r26, r22
    3578:	b7 2b       	or	r27, r23
    357a:	ea 96       	adiw	r28, 0x3a	; 58
    357c:	2f ad       	ldd	r18, Y+63	; 0x3f
    357e:	ea 97       	sbiw	r28, 0x3a	; 58
    3580:	bc 01       	movw	r22, r24
    3582:	cd 01       	movw	r24, r26
    3584:	62 2b       	or	r22, r18
    3586:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <__floatsisf>
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	40 e8       	ldi	r20, 0x80	; 128
    3590:	5a e3       	ldi	r21, 0x3A	; 58
    3592:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
    3596:	f8 01       	movw	r30, r16
    3598:	60 83       	st	Z, r22
    359a:	71 83       	std	Z+1, r23	; 0x01
    359c:	82 83       	std	Z+2, r24	; 0x02
    359e:	93 83       	std	Z+3, r25	; 0x03
    35a0:	eb 96       	adiw	r28, 0x3b	; 59
    35a2:	4f ad       	ldd	r20, Y+63	; 0x3f
    35a4:	eb 97       	sbiw	r28, 0x3b	; 59
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	60 e0       	ldi	r22, 0x00	; 0
    35aa:	70 e0       	ldi	r23, 0x00	; 0
    35ac:	74 2f       	mov	r23, r20
    35ae:	66 27       	eor	r22, r22
    35b0:	55 27       	eor	r21, r21
    35b2:	44 27       	eor	r20, r20
    35b4:	ec 96       	adiw	r28, 0x3c	; 60
    35b6:	8f ad       	ldd	r24, Y+63	; 0x3f
    35b8:	ec 97       	sbiw	r28, 0x3c	; 60
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	a0 e0       	ldi	r26, 0x00	; 0
    35be:	b0 e0       	ldi	r27, 0x00	; 0
    35c0:	dc 01       	movw	r26, r24
    35c2:	99 27       	eor	r25, r25
    35c4:	88 27       	eor	r24, r24
    35c6:	48 2b       	or	r20, r24
    35c8:	59 2b       	or	r21, r25
    35ca:	6a 2b       	or	r22, r26
    35cc:	7b 2b       	or	r23, r27
    35ce:	ed 96       	adiw	r28, 0x3d	; 61
    35d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    35d2:	ed 97       	sbiw	r28, 0x3d	; 61
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	a0 e0       	ldi	r26, 0x00	; 0
    35d8:	b0 e0       	ldi	r27, 0x00	; 0
    35da:	ba 2f       	mov	r27, r26
    35dc:	a9 2f       	mov	r26, r25
    35de:	98 2f       	mov	r25, r24
    35e0:	88 27       	eor	r24, r24
    35e2:	84 2b       	or	r24, r20
    35e4:	95 2b       	or	r25, r21
    35e6:	a6 2b       	or	r26, r22
    35e8:	b7 2b       	or	r27, r23
    35ea:	ee 96       	adiw	r28, 0x3e	; 62
    35ec:	2f ad       	ldd	r18, Y+63	; 0x3f
    35ee:	ee 97       	sbiw	r28, 0x3e	; 62
    35f0:	bc 01       	movw	r22, r24
    35f2:	cd 01       	movw	r24, r26
    35f4:	62 2b       	or	r22, r18
    35f6:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <__floatsisf>
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	40 e8       	ldi	r20, 0x80	; 128
    3600:	5a e3       	ldi	r21, 0x3A	; 58
    3602:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
    3606:	f8 01       	movw	r30, r16
    3608:	64 83       	std	Z+4, r22	; 0x04
    360a:	75 83       	std	Z+5, r23	; 0x05
    360c:	86 83       	std	Z+6, r24	; 0x06
    360e:	97 83       	std	Z+7, r25	; 0x07
    3610:	ef 96       	adiw	r28, 0x3f	; 63
    3612:	4f ad       	ldd	r20, Y+63	; 0x3f
    3614:	ef 97       	sbiw	r28, 0x3f	; 63
    3616:	50 e0       	ldi	r21, 0x00	; 0
    3618:	60 e0       	ldi	r22, 0x00	; 0
    361a:	70 e0       	ldi	r23, 0x00	; 0
    361c:	74 2f       	mov	r23, r20
    361e:	66 27       	eor	r22, r22
    3620:	55 27       	eor	r21, r21
    3622:	44 27       	eor	r20, r20
    3624:	c1 58       	subi	r28, 0x81	; 129
    3626:	df 4f       	sbci	r29, 0xFF	; 255
    3628:	88 81       	ld	r24, Y
    362a:	cf 57       	subi	r28, 0x7F	; 127
    362c:	d0 40       	sbci	r29, 0x00	; 0
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	a0 e0       	ldi	r26, 0x00	; 0
    3632:	b0 e0       	ldi	r27, 0x00	; 0
    3634:	dc 01       	movw	r26, r24
    3636:	99 27       	eor	r25, r25
    3638:	88 27       	eor	r24, r24
    363a:	48 2b       	or	r20, r24
    363c:	59 2b       	or	r21, r25
    363e:	6a 2b       	or	r22, r26
    3640:	7b 2b       	or	r23, r27
    3642:	c0 58       	subi	r28, 0x80	; 128
    3644:	df 4f       	sbci	r29, 0xFF	; 255
    3646:	88 81       	ld	r24, Y
    3648:	c0 58       	subi	r28, 0x80	; 128
    364a:	d0 40       	sbci	r29, 0x00	; 0
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	a0 e0       	ldi	r26, 0x00	; 0
    3650:	b0 e0       	ldi	r27, 0x00	; 0
    3652:	ba 2f       	mov	r27, r26
    3654:	a9 2f       	mov	r26, r25
    3656:	98 2f       	mov	r25, r24
    3658:	88 27       	eor	r24, r24
    365a:	84 2b       	or	r24, r20
    365c:	95 2b       	or	r25, r21
    365e:	a6 2b       	or	r26, r22
    3660:	b7 2b       	or	r27, r23
    3662:	cf 57       	subi	r28, 0x7F	; 127
    3664:	df 4f       	sbci	r29, 0xFF	; 255
    3666:	28 81       	ld	r18, Y
    3668:	c1 58       	subi	r28, 0x81	; 129
    366a:	d0 40       	sbci	r29, 0x00	; 0
    366c:	bc 01       	movw	r22, r24
    366e:	cd 01       	movw	r24, r26
    3670:	62 2b       	or	r22, r18
    3672:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <__floatsisf>
    3676:	20 e0       	ldi	r18, 0x00	; 0
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	40 e8       	ldi	r20, 0x80	; 128
    367c:	5a e3       	ldi	r21, 0x3A	; 58
    367e:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
    3682:	f8 01       	movw	r30, r16
    3684:	60 87       	std	Z+8, r22	; 0x08
    3686:	71 87       	std	Z+9, r23	; 0x09
    3688:	82 87       	std	Z+10, r24	; 0x0a
    368a:	93 87       	std	Z+11, r25	; 0x0b
    368c:	ce 57       	subi	r28, 0x7E	; 126
    368e:	df 4f       	sbci	r29, 0xFF	; 255
    3690:	88 81       	ld	r24, Y
    3692:	c2 58       	subi	r28, 0x82	; 130
    3694:	d0 40       	sbci	r29, 0x00	; 0
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	a0 e0       	ldi	r26, 0x00	; 0
    369a:	b0 e0       	ldi	r27, 0x00	; 0
    369c:	78 2f       	mov	r23, r24
    369e:	66 27       	eor	r22, r22
    36a0:	55 27       	eor	r21, r21
    36a2:	44 27       	eor	r20, r20
    36a4:	cd 57       	subi	r28, 0x7D	; 125
    36a6:	df 4f       	sbci	r29, 0xFF	; 255
    36a8:	98 81       	ld	r25, Y
    36aa:	c3 58       	subi	r28, 0x83	; 131
    36ac:	d0 40       	sbci	r29, 0x00	; 0
    36ae:	89 2f       	mov	r24, r25
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	a0 e0       	ldi	r26, 0x00	; 0
    36b4:	b0 e0       	ldi	r27, 0x00	; 0
    36b6:	dc 01       	movw	r26, r24
    36b8:	99 27       	eor	r25, r25
    36ba:	88 27       	eor	r24, r24
    36bc:	84 2b       	or	r24, r20
    36be:	95 2b       	or	r25, r21
    36c0:	a6 2b       	or	r26, r22
    36c2:	b7 2b       	or	r27, r23
    36c4:	cc 57       	subi	r28, 0x7C	; 124
    36c6:	df 4f       	sbci	r29, 0xFF	; 255
    36c8:	48 81       	ld	r20, Y
    36ca:	c4 58       	subi	r28, 0x84	; 132
    36cc:	d0 40       	sbci	r29, 0x00	; 0
    36ce:	50 e0       	ldi	r21, 0x00	; 0
    36d0:	60 e0       	ldi	r22, 0x00	; 0
    36d2:	70 e0       	ldi	r23, 0x00	; 0
    36d4:	76 2f       	mov	r23, r22
    36d6:	65 2f       	mov	r22, r21
    36d8:	54 2f       	mov	r21, r20
    36da:	44 27       	eor	r20, r20
    36dc:	84 2b       	or	r24, r20
    36de:	95 2b       	or	r25, r21
    36e0:	a6 2b       	or	r26, r22
    36e2:	b7 2b       	or	r27, r23
    36e4:	cb 57       	subi	r28, 0x7B	; 123
    36e6:	df 4f       	sbci	r29, 0xFF	; 255
    36e8:	28 81       	ld	r18, Y
    36ea:	c5 58       	subi	r28, 0x85	; 133
    36ec:	d0 40       	sbci	r29, 0x00	; 0
    36ee:	82 2b       	or	r24, r18
    36f0:	84 87       	std	Z+12, r24	; 0x0c
    36f2:	95 87       	std	Z+13, r25	; 0x0d
    36f4:	a6 87       	std	Z+14, r26	; 0x0e
    36f6:	b7 87       	std	Z+15, r27	; 0x0f
    36f8:	ca 57       	subi	r28, 0x7A	; 122
    36fa:	df 4f       	sbci	r29, 0xFF	; 255
    36fc:	88 81       	ld	r24, Y
    36fe:	c6 58       	subi	r28, 0x86	; 134
    3700:	d0 40       	sbci	r29, 0x00	; 0
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	a0 e0       	ldi	r26, 0x00	; 0
    3706:	b0 e0       	ldi	r27, 0x00	; 0
    3708:	78 2f       	mov	r23, r24
    370a:	66 27       	eor	r22, r22
    370c:	55 27       	eor	r21, r21
    370e:	44 27       	eor	r20, r20
    3710:	c9 57       	subi	r28, 0x79	; 121
    3712:	df 4f       	sbci	r29, 0xFF	; 255
    3714:	98 81       	ld	r25, Y
    3716:	c7 58       	subi	r28, 0x87	; 135
    3718:	d0 40       	sbci	r29, 0x00	; 0
    371a:	89 2f       	mov	r24, r25
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	a0 e0       	ldi	r26, 0x00	; 0
    3720:	b0 e0       	ldi	r27, 0x00	; 0
    3722:	dc 01       	movw	r26, r24
    3724:	99 27       	eor	r25, r25
    3726:	88 27       	eor	r24, r24
    3728:	84 2b       	or	r24, r20
    372a:	95 2b       	or	r25, r21
    372c:	a6 2b       	or	r26, r22
    372e:	b7 2b       	or	r27, r23
    3730:	c8 57       	subi	r28, 0x78	; 120
    3732:	df 4f       	sbci	r29, 0xFF	; 255
    3734:	48 81       	ld	r20, Y
    3736:	c8 58       	subi	r28, 0x88	; 136
    3738:	d0 40       	sbci	r29, 0x00	; 0
    373a:	50 e0       	ldi	r21, 0x00	; 0
    373c:	60 e0       	ldi	r22, 0x00	; 0
    373e:	70 e0       	ldi	r23, 0x00	; 0
    3740:	76 2f       	mov	r23, r22
    3742:	65 2f       	mov	r22, r21
    3744:	54 2f       	mov	r21, r20
    3746:	44 27       	eor	r20, r20
    3748:	84 2b       	or	r24, r20
    374a:	95 2b       	or	r25, r21
    374c:	a6 2b       	or	r26, r22
    374e:	b7 2b       	or	r27, r23
    3750:	c7 57       	subi	r28, 0x77	; 119
    3752:	df 4f       	sbci	r29, 0xFF	; 255
    3754:	28 81       	ld	r18, Y
    3756:	c9 58       	subi	r28, 0x89	; 137
    3758:	d0 40       	sbci	r29, 0x00	; 0
    375a:	82 2b       	or	r24, r18
    375c:	80 8b       	std	Z+16, r24	; 0x10
    375e:	91 8b       	std	Z+17, r25	; 0x11
    3760:	a2 8b       	std	Z+18, r26	; 0x12
    3762:	b3 8b       	std	Z+19, r27	; 0x13
    3764:	c6 57       	subi	r28, 0x76	; 118
    3766:	df 4f       	sbci	r29, 0xFF	; 255
    3768:	88 81       	ld	r24, Y
    376a:	ca 58       	subi	r28, 0x8A	; 138
    376c:	d0 40       	sbci	r29, 0x00	; 0
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	a0 e0       	ldi	r26, 0x00	; 0
    3772:	b0 e0       	ldi	r27, 0x00	; 0
    3774:	78 2f       	mov	r23, r24
    3776:	66 27       	eor	r22, r22
    3778:	55 27       	eor	r21, r21
    377a:	44 27       	eor	r20, r20
    377c:	c5 57       	subi	r28, 0x75	; 117
    377e:	df 4f       	sbci	r29, 0xFF	; 255
    3780:	98 81       	ld	r25, Y
    3782:	cb 58       	subi	r28, 0x8B	; 139
    3784:	d0 40       	sbci	r29, 0x00	; 0
    3786:	89 2f       	mov	r24, r25
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	a0 e0       	ldi	r26, 0x00	; 0
    378c:	b0 e0       	ldi	r27, 0x00	; 0
    378e:	dc 01       	movw	r26, r24
    3790:	99 27       	eor	r25, r25
    3792:	88 27       	eor	r24, r24
    3794:	84 2b       	or	r24, r20
    3796:	95 2b       	or	r25, r21
    3798:	a6 2b       	or	r26, r22
    379a:	b7 2b       	or	r27, r23
    379c:	c4 57       	subi	r28, 0x74	; 116
    379e:	df 4f       	sbci	r29, 0xFF	; 255
    37a0:	48 81       	ld	r20, Y
    37a2:	cc 58       	subi	r28, 0x8C	; 140
    37a4:	d0 40       	sbci	r29, 0x00	; 0
    37a6:	50 e0       	ldi	r21, 0x00	; 0
    37a8:	60 e0       	ldi	r22, 0x00	; 0
    37aa:	70 e0       	ldi	r23, 0x00	; 0
    37ac:	76 2f       	mov	r23, r22
    37ae:	65 2f       	mov	r22, r21
    37b0:	54 2f       	mov	r21, r20
    37b2:	44 27       	eor	r20, r20
    37b4:	84 2b       	or	r24, r20
    37b6:	95 2b       	or	r25, r21
    37b8:	a6 2b       	or	r26, r22
    37ba:	b7 2b       	or	r27, r23
    37bc:	c3 57       	subi	r28, 0x73	; 115
    37be:	df 4f       	sbci	r29, 0xFF	; 255
    37c0:	28 81       	ld	r18, Y
    37c2:	cd 58       	subi	r28, 0x8D	; 141
    37c4:	d0 40       	sbci	r29, 0x00	; 0
    37c6:	82 2b       	or	r24, r18
    37c8:	84 8b       	std	Z+20, r24	; 0x14
    37ca:	95 8b       	std	Z+21, r25	; 0x15
    37cc:	a6 8b       	std	Z+22, r26	; 0x16
    37ce:	b7 8b       	std	Z+23, r27	; 0x17
    37d0:	c2 57       	subi	r28, 0x72	; 114
    37d2:	df 4f       	sbci	r29, 0xFF	; 255
    37d4:	88 81       	ld	r24, Y
    37d6:	ce 58       	subi	r28, 0x8E	; 142
    37d8:	d0 40       	sbci	r29, 0x00	; 0
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	a0 e0       	ldi	r26, 0x00	; 0
    37de:	b0 e0       	ldi	r27, 0x00	; 0
    37e0:	78 2f       	mov	r23, r24
    37e2:	66 27       	eor	r22, r22
    37e4:	55 27       	eor	r21, r21
    37e6:	44 27       	eor	r20, r20
    37e8:	c1 57       	subi	r28, 0x71	; 113
    37ea:	df 4f       	sbci	r29, 0xFF	; 255
    37ec:	98 81       	ld	r25, Y
    37ee:	cf 58       	subi	r28, 0x8F	; 143
    37f0:	d0 40       	sbci	r29, 0x00	; 0
    37f2:	89 2f       	mov	r24, r25
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	a0 e0       	ldi	r26, 0x00	; 0
    37f8:	b0 e0       	ldi	r27, 0x00	; 0
    37fa:	dc 01       	movw	r26, r24
    37fc:	99 27       	eor	r25, r25
    37fe:	88 27       	eor	r24, r24
    3800:	84 2b       	or	r24, r20
    3802:	95 2b       	or	r25, r21
    3804:	a6 2b       	or	r26, r22
    3806:	b7 2b       	or	r27, r23
    3808:	c0 57       	subi	r28, 0x70	; 112
    380a:	df 4f       	sbci	r29, 0xFF	; 255
    380c:	48 81       	ld	r20, Y
    380e:	c0 59       	subi	r28, 0x90	; 144
    3810:	d0 40       	sbci	r29, 0x00	; 0
    3812:	50 e0       	ldi	r21, 0x00	; 0
    3814:	60 e0       	ldi	r22, 0x00	; 0
    3816:	70 e0       	ldi	r23, 0x00	; 0
    3818:	76 2f       	mov	r23, r22
    381a:	65 2f       	mov	r22, r21
    381c:	54 2f       	mov	r21, r20
    381e:	44 27       	eor	r20, r20
    3820:	84 2b       	or	r24, r20
    3822:	95 2b       	or	r25, r21
    3824:	a6 2b       	or	r26, r22
    3826:	b7 2b       	or	r27, r23
    3828:	cf 56       	subi	r28, 0x6F	; 111
    382a:	df 4f       	sbci	r29, 0xFF	; 255
    382c:	28 81       	ld	r18, Y
    382e:	c1 59       	subi	r28, 0x91	; 145
    3830:	d0 40       	sbci	r29, 0x00	; 0
    3832:	82 2b       	or	r24, r18
    3834:	80 8f       	std	Z+24, r24	; 0x18
    3836:	91 8f       	std	Z+25, r25	; 0x19
    3838:	a2 8f       	std	Z+26, r26	; 0x1a
    383a:	b3 8f       	std	Z+27, r27	; 0x1b
    383c:	20 e1       	ldi	r18, 0x10	; 16
    383e:	ae 01       	movw	r20, r28
    3840:	4a 58       	subi	r20, 0x8A	; 138
    3842:	5f 4f       	sbci	r21, 0xFF	; 255
    3844:	67 e3       	ldi	r22, 0x37	; 55
    3846:	8f 2d       	mov	r24, r15
    3848:	0e 94 40 17 	call	0x2e80	; 0x2e80 <get_MOTOR>
    384c:	e8 2e       	mov	r14, r24
    384e:	f3 e6       	ldi	r31, 0x63	; 99
    3850:	8f 13       	cpse	r24, r31
    3852:	1b c0       	rjmp	.+54     	; 0x388a <get_MOTOR_PID+0x3d6>
    3854:	81 ec       	ldi	r24, 0xC1	; 193
    3856:	8f 0d       	add	r24, r15
    3858:	1f 92       	push	r1
    385a:	8f 93       	push	r24
    385c:	ce 01       	movw	r24, r28
    385e:	01 96       	adiw	r24, 0x01	; 1
    3860:	9f 93       	push	r25
    3862:	8f 93       	push	r24
    3864:	8e 01       	movw	r16, r28
    3866:	0a 5d       	subi	r16, 0xDA	; 218
    3868:	1f 4f       	sbci	r17, 0xFF	; 255
    386a:	1f 93       	push	r17
    386c:	0f 93       	push	r16
    386e:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    3872:	b8 01       	movw	r22, r16
    3874:	86 e3       	ldi	r24, 0x36	; 54
    3876:	91 e0       	ldi	r25, 0x01	; 1
    3878:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    387c:	0f 90       	pop	r0
    387e:	0f 90       	pop	r0
    3880:	0f 90       	pop	r0
    3882:	0f 90       	pop	r0
    3884:	0f 90       	pop	r0
    3886:	0f 90       	pop	r0
    3888:	38 c0       	rjmp	.+112    	; 0x38fa <get_MOTOR_PID+0x446>
    388a:	ce 57       	subi	r28, 0x7E	; 126
    388c:	df 4f       	sbci	r29, 0xFF	; 255
    388e:	88 81       	ld	r24, Y
    3890:	c2 58       	subi	r28, 0x82	; 130
    3892:	d0 40       	sbci	r29, 0x00	; 0
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	a0 e0       	ldi	r26, 0x00	; 0
    3898:	b0 e0       	ldi	r27, 0x00	; 0
    389a:	78 2f       	mov	r23, r24
    389c:	66 27       	eor	r22, r22
    389e:	55 27       	eor	r21, r21
    38a0:	44 27       	eor	r20, r20
    38a2:	cd 57       	subi	r28, 0x7D	; 125
    38a4:	df 4f       	sbci	r29, 0xFF	; 255
    38a6:	98 81       	ld	r25, Y
    38a8:	c3 58       	subi	r28, 0x83	; 131
    38aa:	d0 40       	sbci	r29, 0x00	; 0
    38ac:	89 2f       	mov	r24, r25
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	a0 e0       	ldi	r26, 0x00	; 0
    38b2:	b0 e0       	ldi	r27, 0x00	; 0
    38b4:	dc 01       	movw	r26, r24
    38b6:	99 27       	eor	r25, r25
    38b8:	88 27       	eor	r24, r24
    38ba:	84 2b       	or	r24, r20
    38bc:	95 2b       	or	r25, r21
    38be:	a6 2b       	or	r26, r22
    38c0:	b7 2b       	or	r27, r23
    38c2:	cc 57       	subi	r28, 0x7C	; 124
    38c4:	df 4f       	sbci	r29, 0xFF	; 255
    38c6:	48 81       	ld	r20, Y
    38c8:	c4 58       	subi	r28, 0x84	; 132
    38ca:	d0 40       	sbci	r29, 0x00	; 0
    38cc:	50 e0       	ldi	r21, 0x00	; 0
    38ce:	60 e0       	ldi	r22, 0x00	; 0
    38d0:	70 e0       	ldi	r23, 0x00	; 0
    38d2:	76 2f       	mov	r23, r22
    38d4:	65 2f       	mov	r22, r21
    38d6:	54 2f       	mov	r21, r20
    38d8:	44 27       	eor	r20, r20
    38da:	84 2b       	or	r24, r20
    38dc:	95 2b       	or	r25, r21
    38de:	a6 2b       	or	r26, r22
    38e0:	b7 2b       	or	r27, r23
    38e2:	cb 57       	subi	r28, 0x7B	; 123
    38e4:	df 4f       	sbci	r29, 0xFF	; 255
    38e6:	28 81       	ld	r18, Y
    38e8:	c5 58       	subi	r28, 0x85	; 133
    38ea:	d0 40       	sbci	r29, 0x00	; 0
    38ec:	82 2b       	or	r24, r18
    38ee:	f8 01       	movw	r30, r16
    38f0:	84 8f       	std	Z+28, r24	; 0x1c
    38f2:	95 8f       	std	Z+29, r25	; 0x1d
    38f4:	a6 8f       	std	Z+30, r26	; 0x1e
    38f6:	b7 8f       	std	Z+31, r27	; 0x1f
    38f8:	e1 2c       	mov	r14, r1
    38fa:	8e 2d       	mov	r24, r14
    38fc:	cf 56       	subi	r28, 0x6F	; 111
    38fe:	df 4f       	sbci	r29, 0xFF	; 255
    3900:	cd bf       	out	0x3d, r28	; 61
    3902:	de bf       	out	0x3e, r29	; 62
    3904:	df 91       	pop	r29
    3906:	cf 91       	pop	r28
    3908:	1f 91       	pop	r17
    390a:	0f 91       	pop	r16
    390c:	ff 90       	pop	r15
    390e:	ef 90       	pop	r14
    3910:	08 95       	ret

00003912 <get_MOTOR_S4MODE>:
    3912:	cf 92       	push	r12
    3914:	df 92       	push	r13
    3916:	ef 92       	push	r14
    3918:	ff 92       	push	r15
    391a:	0f 93       	push	r16
    391c:	1f 93       	push	r17
    391e:	cf 93       	push	r28
    3920:	df 93       	push	r29
    3922:	cd b7       	in	r28, 0x3d	; 61
    3924:	de b7       	in	r29, 0x3e	; 62
    3926:	c7 57       	subi	r28, 0x77	; 119
    3928:	d1 09       	sbc	r29, r1
    392a:	cd bf       	out	0x3d, r28	; 61
    392c:	de bf       	out	0x3e, r29	; 62
    392e:	08 2f       	mov	r16, r24
    3930:	7b 01       	movw	r14, r22
    3932:	84 e2       	ldi	r24, 0x24	; 36
    3934:	e0 e6       	ldi	r30, 0x60	; 96
    3936:	fb ea       	ldi	r31, 0xAB	; 171
    3938:	de 01       	movw	r26, r28
    393a:	11 96       	adiw	r26, 0x01	; 1
    393c:	01 90       	ld	r0, Z+
    393e:	0d 92       	st	X+, r0
    3940:	8a 95       	dec	r24
    3942:	e1 f7       	brne	.-8      	; 0x393c <get_MOTOR_S4MODE+0x2a>
    3944:	23 e0       	ldi	r18, 0x03	; 3
    3946:	ae 01       	movw	r20, r28
    3948:	4b 58       	subi	r20, 0x8B	; 139
    394a:	5f 4f       	sbci	r21, 0xFF	; 255
    394c:	6b e4       	ldi	r22, 0x4B	; 75
    394e:	80 2f       	mov	r24, r16
    3950:	0e 94 40 17 	call	0x2e80	; 0x2e80 <get_MOTOR>
    3954:	18 2f       	mov	r17, r24
    3956:	83 36       	cpi	r24, 0x63	; 99
    3958:	f1 f4       	brne	.+60     	; 0x3996 <get_MOTOR_S4MODE+0x84>
    395a:	0f 53       	subi	r16, 0x3F	; 63
    395c:	1f 92       	push	r1
    395e:	0f 93       	push	r16
    3960:	ce 01       	movw	r24, r28
    3962:	01 96       	adiw	r24, 0x01	; 1
    3964:	9f 93       	push	r25
    3966:	8f 93       	push	r24
    3968:	6e 01       	movw	r12, r28
    396a:	85 e2       	ldi	r24, 0x25	; 37
    396c:	c8 0e       	add	r12, r24
    396e:	d1 1c       	adc	r13, r1
    3970:	df 92       	push	r13
    3972:	cf 92       	push	r12
    3974:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    3978:	b6 01       	movw	r22, r12
    397a:	86 e3       	ldi	r24, 0x36	; 54
    397c:	91 e0       	ldi	r25, 0x01	; 1
    397e:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    3982:	8f ef       	ldi	r24, 0xFF	; 255
    3984:	f7 01       	movw	r30, r14
    3986:	80 83       	st	Z, r24
    3988:	0f 90       	pop	r0
    398a:	0f 90       	pop	r0
    398c:	0f 90       	pop	r0
    398e:	0f 90       	pop	r0
    3990:	0f 90       	pop	r0
    3992:	0f 90       	pop	r0
    3994:	06 c0       	rjmp	.+12     	; 0x39a2 <get_MOTOR_S4MODE+0x90>
    3996:	e7 96       	adiw	r28, 0x37	; 55
    3998:	8f ad       	ldd	r24, Y+63	; 0x3f
    399a:	e7 97       	sbiw	r28, 0x37	; 55
    399c:	f7 01       	movw	r30, r14
    399e:	80 83       	st	Z, r24
    39a0:	10 e0       	ldi	r17, 0x00	; 0
    39a2:	81 2f       	mov	r24, r17
    39a4:	c9 58       	subi	r28, 0x89	; 137
    39a6:	df 4f       	sbci	r29, 0xFF	; 255
    39a8:	cd bf       	out	0x3d, r28	; 61
    39aa:	de bf       	out	0x3e, r29	; 62
    39ac:	df 91       	pop	r29
    39ae:	cf 91       	pop	r28
    39b0:	1f 91       	pop	r17
    39b2:	0f 91       	pop	r16
    39b4:	ff 90       	pop	r15
    39b6:	ef 90       	pop	r14
    39b8:	df 90       	pop	r13
    39ba:	cf 90       	pop	r12
    39bc:	08 95       	ret

000039be <get_MOTOR_SPEED>:
    39be:	ef 92       	push	r14
    39c0:	ff 92       	push	r15
    39c2:	0f 93       	push	r16
    39c4:	1f 93       	push	r17
    39c6:	cf 93       	push	r28
    39c8:	df 93       	push	r29
    39ca:	cd b7       	in	r28, 0x3d	; 61
    39cc:	de b7       	in	r29, 0x3e	; 62
    39ce:	c1 58       	subi	r28, 0x81	; 129
    39d0:	d1 09       	sbc	r29, r1
    39d2:	cd bf       	out	0x3d, r28	; 61
    39d4:	de bf       	out	0x3e, r29	; 62
    39d6:	e8 2e       	mov	r14, r24
    39d8:	8b 01       	movw	r16, r22
    39da:	8c e2       	ldi	r24, 0x2C	; 44
    39dc:	e4 e8       	ldi	r30, 0x84	; 132
    39de:	fb ea       	ldi	r31, 0xAB	; 171
    39e0:	de 01       	movw	r26, r28
    39e2:	11 96       	adiw	r26, 0x01	; 1
    39e4:	01 90       	ld	r0, Z+
    39e6:	0d 92       	st	X+, r0
    39e8:	8a 95       	dec	r24
    39ea:	e1 f7       	brne	.-8      	; 0x39e4 <get_MOTOR_SPEED+0x26>
    39ec:	25 e0       	ldi	r18, 0x05	; 5
    39ee:	ae 01       	movw	r20, r28
    39f0:	43 58       	subi	r20, 0x83	; 131
    39f2:	5f 4f       	sbci	r21, 0xFF	; 255
    39f4:	62 e1       	ldi	r22, 0x12	; 18
    39f6:	8e 2d       	mov	r24, r14
    39f8:	0e 94 40 17 	call	0x2e80	; 0x2e80 <get_MOTOR>
    39fc:	f8 2e       	mov	r15, r24
    39fe:	83 e6       	ldi	r24, 0x63	; 99
    3a00:	f8 12       	cpse	r15, r24
    3a02:	1b c0       	rjmp	.+54     	; 0x3a3a <get_MOTOR_SPEED+0x7c>
    3a04:	81 ec       	ldi	r24, 0xC1	; 193
    3a06:	8e 0d       	add	r24, r14
    3a08:	1f 92       	push	r1
    3a0a:	8f 93       	push	r24
    3a0c:	ce 01       	movw	r24, r28
    3a0e:	01 96       	adiw	r24, 0x01	; 1
    3a10:	9f 93       	push	r25
    3a12:	8f 93       	push	r24
    3a14:	8e 01       	movw	r16, r28
    3a16:	03 5d       	subi	r16, 0xD3	; 211
    3a18:	1f 4f       	sbci	r17, 0xFF	; 255
    3a1a:	1f 93       	push	r17
    3a1c:	0f 93       	push	r16
    3a1e:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    3a22:	b8 01       	movw	r22, r16
    3a24:	86 e3       	ldi	r24, 0x36	; 54
    3a26:	91 e0       	ldi	r25, 0x01	; 1
    3a28:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    3a2c:	0f 90       	pop	r0
    3a2e:	0f 90       	pop	r0
    3a30:	0f 90       	pop	r0
    3a32:	0f 90       	pop	r0
    3a34:	0f 90       	pop	r0
    3a36:	0f 90       	pop	r0
    3a38:	34 c0       	rjmp	.+104    	; 0x3aa2 <get_MOTOR_SPEED+0xe4>
    3a3a:	ee 96       	adiw	r28, 0x3e	; 62
    3a3c:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a3e:	ee 97       	sbiw	r28, 0x3e	; 62
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	a0 e0       	ldi	r26, 0x00	; 0
    3a44:	b0 e0       	ldi	r27, 0x00	; 0
    3a46:	78 2f       	mov	r23, r24
    3a48:	66 27       	eor	r22, r22
    3a4a:	55 27       	eor	r21, r21
    3a4c:	44 27       	eor	r20, r20
    3a4e:	ef 96       	adiw	r28, 0x3f	; 63
    3a50:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a52:	ef 97       	sbiw	r28, 0x3f	; 63
    3a54:	89 2f       	mov	r24, r25
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	a0 e0       	ldi	r26, 0x00	; 0
    3a5a:	b0 e0       	ldi	r27, 0x00	; 0
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	99 27       	eor	r25, r25
    3a60:	88 27       	eor	r24, r24
    3a62:	84 2b       	or	r24, r20
    3a64:	95 2b       	or	r25, r21
    3a66:	a6 2b       	or	r26, r22
    3a68:	b7 2b       	or	r27, r23
    3a6a:	c1 58       	subi	r28, 0x81	; 129
    3a6c:	df 4f       	sbci	r29, 0xFF	; 255
    3a6e:	48 81       	ld	r20, Y
    3a70:	cf 57       	subi	r28, 0x7F	; 127
    3a72:	d0 40       	sbci	r29, 0x00	; 0
    3a74:	50 e0       	ldi	r21, 0x00	; 0
    3a76:	60 e0       	ldi	r22, 0x00	; 0
    3a78:	70 e0       	ldi	r23, 0x00	; 0
    3a7a:	76 2f       	mov	r23, r22
    3a7c:	65 2f       	mov	r22, r21
    3a7e:	54 2f       	mov	r21, r20
    3a80:	44 27       	eor	r20, r20
    3a82:	84 2b       	or	r24, r20
    3a84:	95 2b       	or	r25, r21
    3a86:	a6 2b       	or	r26, r22
    3a88:	b7 2b       	or	r27, r23
    3a8a:	c0 58       	subi	r28, 0x80	; 128
    3a8c:	df 4f       	sbci	r29, 0xFF	; 255
    3a8e:	28 81       	ld	r18, Y
    3a90:	c0 58       	subi	r28, 0x80	; 128
    3a92:	d0 40       	sbci	r29, 0x00	; 0
    3a94:	82 2b       	or	r24, r18
    3a96:	f8 01       	movw	r30, r16
    3a98:	80 83       	st	Z, r24
    3a9a:	91 83       	std	Z+1, r25	; 0x01
    3a9c:	a2 83       	std	Z+2, r26	; 0x02
    3a9e:	b3 83       	std	Z+3, r27	; 0x03
    3aa0:	f1 2c       	mov	r15, r1
    3aa2:	8f 2d       	mov	r24, r15
    3aa4:	cf 57       	subi	r28, 0x7F	; 127
    3aa6:	df 4f       	sbci	r29, 0xFF	; 255
    3aa8:	cd bf       	out	0x3d, r28	; 61
    3aaa:	de bf       	out	0x3e, r29	; 62
    3aac:	df 91       	pop	r29
    3aae:	cf 91       	pop	r28
    3ab0:	1f 91       	pop	r17
    3ab2:	0f 91       	pop	r16
    3ab4:	ff 90       	pop	r15
    3ab6:	ef 90       	pop	r14
    3ab8:	08 95       	ret

00003aba <motorsMoving>:
    3aba:	ef 92       	push	r14
    3abc:	ff 92       	push	r15
    3abe:	0f 93       	push	r16
    3ac0:	1f 93       	push	r17
    3ac2:	cf 93       	push	r28
    3ac4:	df 93       	push	r29
    3ac6:	cd b7       	in	r28, 0x3d	; 61
    3ac8:	de b7       	in	r29, 0x3e	; 62
    3aca:	ce 57       	subi	r28, 0x7E	; 126
    3acc:	d1 09       	sbc	r29, r1
    3ace:	cd bf       	out	0x3d, r28	; 61
    3ad0:	de bf       	out	0x3e, r29	; 62
    3ad2:	8a e2       	ldi	r24, 0x2A	; 42
    3ad4:	e0 eb       	ldi	r30, 0xB0	; 176
    3ad6:	fb ea       	ldi	r31, 0xAB	; 171
    3ad8:	de 01       	movw	r26, r28
    3ada:	11 96       	adiw	r26, 0x01	; 1
    3adc:	01 90       	ld	r0, Z+
    3ade:	0d 92       	st	X+, r0
    3ae0:	8a 95       	dec	r24
    3ae2:	e1 f7       	brne	.-8      	; 0x3adc <motorsMoving+0x22>
    3ae4:	ef 96       	adiw	r28, 0x3f	; 63
    3ae6:	1c ae       	std	Y+60, r1	; 0x3c
    3ae8:	1d ae       	std	Y+61, r1	; 0x3d
    3aea:	1e ae       	std	Y+62, r1	; 0x3e
    3aec:	1f ae       	std	Y+63, r1	; 0x3f
    3aee:	ef 97       	sbiw	r28, 0x3f	; 63
    3af0:	00 e0       	ldi	r16, 0x00	; 0
    3af2:	10 e8       	ldi	r17, 0x80	; 128
    3af4:	30 c0       	rjmp	.+96     	; 0x3b56 <motorsMoving+0x9c>
    3af6:	be 01       	movw	r22, r28
    3af8:	65 58       	subi	r22, 0x85	; 133
    3afa:	7f 4f       	sbci	r23, 0xFF	; 255
    3afc:	81 2f       	mov	r24, r17
    3afe:	0e 94 df 1c 	call	0x39be	; 0x39be <get_MOTOR_SPEED>
    3b02:	83 36       	cpi	r24, 0x63	; 99
    3b04:	e1 f4       	brne	.+56     	; 0x3b3e <motorsMoving+0x84>
    3b06:	1f 92       	push	r1
    3b08:	81 ec       	ldi	r24, 0xC1	; 193
    3b0a:	81 0f       	add	r24, r17
    3b0c:	8f 93       	push	r24
    3b0e:	ce 01       	movw	r24, r28
    3b10:	01 96       	adiw	r24, 0x01	; 1
    3b12:	9f 93       	push	r25
    3b14:	8f 93       	push	r24
    3b16:	7e 01       	movw	r14, r28
    3b18:	8b e2       	ldi	r24, 0x2B	; 43
    3b1a:	e8 0e       	add	r14, r24
    3b1c:	f1 1c       	adc	r15, r1
    3b1e:	ff 92       	push	r15
    3b20:	ef 92       	push	r14
    3b22:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    3b26:	b7 01       	movw	r22, r14
    3b28:	86 e3       	ldi	r24, 0x36	; 54
    3b2a:	91 e0       	ldi	r25, 0x01	; 1
    3b2c:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    3b30:	0f 90       	pop	r0
    3b32:	0f 90       	pop	r0
    3b34:	0f 90       	pop	r0
    3b36:	0f 90       	pop	r0
    3b38:	0f 90       	pop	r0
    3b3a:	0f 90       	pop	r0
    3b3c:	0b c0       	rjmp	.+22     	; 0x3b54 <motorsMoving+0x9a>
    3b3e:	ef 96       	adiw	r28, 0x3f	; 63
    3b40:	8c ad       	ldd	r24, Y+60	; 0x3c
    3b42:	9d ad       	ldd	r25, Y+61	; 0x3d
    3b44:	ae ad       	ldd	r26, Y+62	; 0x3e
    3b46:	bf ad       	ldd	r27, Y+63	; 0x3f
    3b48:	ef 97       	sbiw	r28, 0x3f	; 63
    3b4a:	89 2b       	or	r24, r25
    3b4c:	8a 2b       	or	r24, r26
    3b4e:	8b 2b       	or	r24, r27
    3b50:	09 f0       	breq	.+2      	; 0x3b54 <motorsMoving+0x9a>
    3b52:	0f 5f       	subi	r16, 0xFF	; 255
    3b54:	1f 5f       	subi	r17, 0xFF	; 255
    3b56:	11 38       	cpi	r17, 0x81	; 129
    3b58:	70 f2       	brcs	.-100    	; 0x3af6 <motorsMoving+0x3c>
    3b5a:	80 2f       	mov	r24, r16
    3b5c:	c2 58       	subi	r28, 0x82	; 130
    3b5e:	df 4f       	sbci	r29, 0xFF	; 255
    3b60:	cd bf       	out	0x3d, r28	; 61
    3b62:	de bf       	out	0x3e, r29	; 62
    3b64:	df 91       	pop	r29
    3b66:	cf 91       	pop	r28
    3b68:	1f 91       	pop	r17
    3b6a:	0f 91       	pop	r16
    3b6c:	ff 90       	pop	r15
    3b6e:	ef 90       	pop	r14
    3b70:	08 95       	ret

00003b72 <put_FRAM_ENCODERS>:
    3b72:	df 92       	push	r13
    3b74:	ef 92       	push	r14
    3b76:	ff 92       	push	r15
    3b78:	0f 93       	push	r16
    3b7a:	1f 93       	push	r17
    3b7c:	cf 93       	push	r28
    3b7e:	df 93       	push	r29
    3b80:	cd b7       	in	r28, 0x3d	; 61
    3b82:	de b7       	in	r29, 0x3e	; 62
    3b84:	c7 5f       	subi	r28, 0xF7	; 247
    3b86:	d1 09       	sbc	r29, r1
    3b88:	cd bf       	out	0x3d, r28	; 61
    3b8a:	de bf       	out	0x3e, r29	; 62
    3b8c:	81 e3       	ldi	r24, 0x31	; 49
    3b8e:	ea ed       	ldi	r30, 0xDA	; 218
    3b90:	fb ea       	ldi	r31, 0xAB	; 171
    3b92:	de 01       	movw	r26, r28
    3b94:	11 96       	adiw	r26, 0x01	; 1
    3b96:	01 90       	ld	r0, Z+
    3b98:	0d 92       	st	X+, r0
    3b9a:	8a 95       	dec	r24
    3b9c:	e1 f7       	brne	.-8      	; 0x3b96 <put_FRAM_ENCODERS+0x24>
    3b9e:	8b e2       	ldi	r24, 0x2B	; 43
    3ba0:	eb e0       	ldi	r30, 0x0B	; 11
    3ba2:	fc ea       	ldi	r31, 0xAC	; 172
    3ba4:	de 01       	movw	r26, r28
    3ba6:	d2 96       	adiw	r26, 0x32	; 50
    3ba8:	01 90       	ld	r0, Z+
    3baa:	0d 92       	st	X+, r0
    3bac:	8a 95       	dec	r24
    3bae:	e1 f7       	brne	.-8      	; 0x3ba8 <put_FRAM_ENCODERS+0x36>
    3bb0:	8a e3       	ldi	r24, 0x3A	; 58
    3bb2:	e6 e3       	ldi	r30, 0x36	; 54
    3bb4:	fc ea       	ldi	r31, 0xAC	; 172
    3bb6:	de 01       	movw	r26, r28
    3bb8:	a3 5a       	subi	r26, 0xA3	; 163
    3bba:	bf 4f       	sbci	r27, 0xFF	; 255
    3bbc:	01 90       	ld	r0, Z+
    3bbe:	0d 92       	st	X+, r0
    3bc0:	8a 95       	dec	r24
    3bc2:	e1 f7       	brne	.-8      	; 0x3bbc <put_FRAM_ENCODERS+0x4a>
    3bc4:	80 e8       	ldi	r24, 0x80	; 128
    3bc6:	c5 51       	subi	r28, 0x15	; 21
    3bc8:	df 4f       	sbci	r29, 0xFF	; 255
    3bca:	88 83       	st	Y, r24
    3bcc:	cb 5e       	subi	r28, 0xEB	; 235
    3bce:	d0 40       	sbci	r29, 0x00	; 0
    3bd0:	81 e8       	ldi	r24, 0x81	; 129
    3bd2:	c4 51       	subi	r28, 0x14	; 20
    3bd4:	df 4f       	sbci	r29, 0xFF	; 255
    3bd6:	88 83       	st	Y, r24
    3bd8:	cc 5e       	subi	r28, 0xEC	; 236
    3bda:	d0 40       	sbci	r29, 0x00	; 0
    3bdc:	82 e8       	ldi	r24, 0x82	; 130
    3bde:	c3 51       	subi	r28, 0x13	; 19
    3be0:	df 4f       	sbci	r29, 0xFF	; 255
    3be2:	88 83       	st	Y, r24
    3be4:	cd 5e       	subi	r28, 0xED	; 237
    3be6:	d0 40       	sbci	r29, 0x00	; 0
    3be8:	86 e0       	ldi	r24, 0x06	; 6
    3bea:	ec e4       	ldi	r30, 0x4C	; 76
    3bec:	f4 ea       	ldi	r31, 0xA4	; 164
    3bee:	de 01       	movw	r26, r28
    3bf0:	a2 51       	subi	r26, 0x12	; 18
    3bf2:	bf 4f       	sbci	r27, 0xFF	; 255
    3bf4:	01 90       	ld	r0, Z+
    3bf6:	0d 92       	st	X+, r0
    3bf8:	8a 95       	dec	r24
    3bfa:	e1 f7       	brne	.-8      	; 0x3bf4 <put_FRAM_ENCODERS+0x82>
    3bfc:	e1 2c       	mov	r14, r1
    3bfe:	a6 c0       	rjmp	.+332    	; 0x3d4c <put_FRAM_ENCODERS+0x1da>
    3c00:	0e 2d       	mov	r16, r14
    3c02:	10 e0       	ldi	r17, 0x00	; 0
    3c04:	eb ee       	ldi	r30, 0xEB	; 235
    3c06:	f0 e0       	ldi	r31, 0x00	; 0
    3c08:	ec 0f       	add	r30, r28
    3c0a:	fd 1f       	adc	r31, r29
    3c0c:	e0 0f       	add	r30, r16
    3c0e:	f1 1f       	adc	r31, r17
    3c10:	d0 80       	ld	r13, Z
    3c12:	be 01       	movw	r22, r28
    3c14:	6c 50       	subi	r22, 0x0C	; 12
    3c16:	7f 4f       	sbci	r23, 0xFF	; 255
    3c18:	8d 2d       	mov	r24, r13
    3c1a:	0e 94 c6 18 	call	0x318c	; 0x318c <get_MOTOR_ENCODER>
    3c1e:	f8 2e       	mov	r15, r24
    3c20:	23 e6       	ldi	r18, 0x63	; 99
    3c22:	82 13       	cpse	r24, r18
    3c24:	1b c0       	rjmp	.+54     	; 0x3c5c <put_FRAM_ENCODERS+0xea>
    3c26:	81 ec       	ldi	r24, 0xC1	; 193
    3c28:	8d 0d       	add	r24, r13
    3c2a:	1f 92       	push	r1
    3c2c:	8f 93       	push	r24
    3c2e:	ce 01       	movw	r24, r28
    3c30:	01 96       	adiw	r24, 0x01	; 1
    3c32:	9f 93       	push	r25
    3c34:	8f 93       	push	r24
    3c36:	8e 01       	movw	r16, r28
    3c38:	09 56       	subi	r16, 0x69	; 105
    3c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c3c:	1f 93       	push	r17
    3c3e:	0f 93       	push	r16
    3c40:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    3c44:	b8 01       	movw	r22, r16
    3c46:	86 e3       	ldi	r24, 0x36	; 54
    3c48:	91 e0       	ldi	r25, 0x01	; 1
    3c4a:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    3c4e:	0f 90       	pop	r0
    3c50:	0f 90       	pop	r0
    3c52:	0f 90       	pop	r0
    3c54:	0f 90       	pop	r0
    3c56:	0f 90       	pop	r0
    3c58:	0f 90       	pop	r0
    3c5a:	7c c0       	rjmp	.+248    	; 0x3d54 <put_FRAM_ENCODERS+0x1e2>
    3c5c:	cc 50       	subi	r28, 0x0C	; 12
    3c5e:	df 4f       	sbci	r29, 0xFF	; 255
    3c60:	88 81       	ld	r24, Y
    3c62:	99 81       	ldd	r25, Y+1	; 0x01
    3c64:	aa 81       	ldd	r26, Y+2	; 0x02
    3c66:	bb 81       	ldd	r27, Y+3	; 0x03
    3c68:	c4 5f       	subi	r28, 0xF4	; 244
    3c6a:	d0 40       	sbci	r29, 0x00	; 0
    3c6c:	ac 01       	movw	r20, r24
    3c6e:	bd 01       	movw	r22, r26
    3c70:	48 5f       	subi	r20, 0xF8	; 248
    3c72:	53 4b       	sbci	r21, 0xB3	; 179
    3c74:	6e 4f       	sbci	r22, 0xFE	; 254
    3c76:	7f 4f       	sbci	r23, 0xFF	; 255
    3c78:	49 35       	cpi	r20, 0x59	; 89
    3c7a:	54 44       	sbci	r21, 0x44	; 68
    3c7c:	6e 40       	sbci	r22, 0x0E	; 14
    3c7e:	71 05       	cpc	r23, r1
    3c80:	00 f1       	brcs	.+64     	; 0x3cc2 <put_FRAM_ENCODERS+0x150>
    3c82:	81 ec       	ldi	r24, 0xC1	; 193
    3c84:	8d 0d       	add	r24, r13
    3c86:	1f 92       	push	r1
    3c88:	8f 93       	push	r24
    3c8a:	ce 01       	movw	r24, r28
    3c8c:	83 5a       	subi	r24, 0xA3	; 163
    3c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c90:	9f 93       	push	r25
    3c92:	8f 93       	push	r24
    3c94:	8e 01       	movw	r16, r28
    3c96:	09 56       	subi	r16, 0x69	; 105
    3c98:	1f 4f       	sbci	r17, 0xFF	; 255
    3c9a:	1f 93       	push	r17
    3c9c:	0f 93       	push	r16
    3c9e:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    3ca2:	b8 01       	movw	r22, r16
    3ca4:	86 e3       	ldi	r24, 0x36	; 54
    3ca6:	91 e0       	ldi	r25, 0x01	; 1
    3ca8:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    3cac:	0f 90       	pop	r0
    3cae:	0f 90       	pop	r0
    3cb0:	0f 90       	pop	r0
    3cb2:	0f 90       	pop	r0
    3cb4:	0f 90       	pop	r0
    3cb6:	0f 90       	pop	r0
    3cb8:	0f 2e       	mov	r0, r31
    3cba:	f3 e6       	ldi	r31, 0x63	; 99
    3cbc:	ff 2e       	mov	r15, r31
    3cbe:	f0 2d       	mov	r31, r0
    3cc0:	49 c0       	rjmp	.+146    	; 0x3d54 <put_FRAM_ENCODERS+0x1e2>
    3cc2:	c9 51       	subi	r28, 0x19	; 25
    3cc4:	df 4f       	sbci	r29, 0xFF	; 255
    3cc6:	b8 83       	st	Y, r27
    3cc8:	c7 5e       	subi	r28, 0xE7	; 231
    3cca:	d0 40       	sbci	r29, 0x00	; 0
    3ccc:	c8 51       	subi	r28, 0x18	; 24
    3cce:	df 4f       	sbci	r29, 0xFF	; 255
    3cd0:	a8 83       	st	Y, r26
    3cd2:	c8 5e       	subi	r28, 0xE8	; 232
    3cd4:	d0 40       	sbci	r29, 0x00	; 0
    3cd6:	c7 51       	subi	r28, 0x17	; 23
    3cd8:	df 4f       	sbci	r29, 0xFF	; 255
    3cda:	98 83       	st	Y, r25
    3cdc:	c9 5e       	subi	r28, 0xE9	; 233
    3cde:	d0 40       	sbci	r29, 0x00	; 0
    3ce0:	c6 51       	subi	r28, 0x16	; 22
    3ce2:	df 4f       	sbci	r29, 0xFF	; 255
    3ce4:	88 83       	st	Y, r24
    3ce6:	ca 5e       	subi	r28, 0xEA	; 234
    3ce8:	d0 40       	sbci	r29, 0x00	; 0
    3cea:	00 0f       	add	r16, r16
    3cec:	11 1f       	adc	r17, r17
    3cee:	ee ee       	ldi	r30, 0xEE	; 238
    3cf0:	f0 e0       	ldi	r31, 0x00	; 0
    3cf2:	ec 0f       	add	r30, r28
    3cf4:	fd 1f       	adc	r31, r29
    3cf6:	e0 0f       	add	r30, r16
    3cf8:	f1 1f       	adc	r31, r17
    3cfa:	10 81       	ld	r17, Z
    3cfc:	71 81       	ldd	r23, Z+1	; 0x01
    3cfe:	24 e0       	ldi	r18, 0x04	; 4
    3d00:	ae 01       	movw	r20, r28
    3d02:	49 51       	subi	r20, 0x19	; 25
    3d04:	5f 4f       	sbci	r21, 0xFF	; 255
    3d06:	61 2f       	mov	r22, r17
    3d08:	80 e5       	ldi	r24, 0x50	; 80
    3d0a:	0e 94 49 08 	call	0x1092	; 0x1092 <write_FRAM>
    3d0e:	f8 2e       	mov	r15, r24
    3d10:	83 e6       	ldi	r24, 0x63	; 99
    3d12:	f8 12       	cpse	r15, r24
    3d14:	1a c0       	rjmp	.+52     	; 0x3d4a <put_FRAM_ENCODERS+0x1d8>
    3d16:	1f 53       	subi	r17, 0x3F	; 63
    3d18:	1f 92       	push	r1
    3d1a:	1f 93       	push	r17
    3d1c:	ce 01       	movw	r24, r28
    3d1e:	c2 96       	adiw	r24, 0x32	; 50
    3d20:	9f 93       	push	r25
    3d22:	8f 93       	push	r24
    3d24:	8e 01       	movw	r16, r28
    3d26:	09 56       	subi	r16, 0x69	; 105
    3d28:	1f 4f       	sbci	r17, 0xFF	; 255
    3d2a:	1f 93       	push	r17
    3d2c:	0f 93       	push	r16
    3d2e:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    3d32:	b8 01       	movw	r22, r16
    3d34:	83 e9       	ldi	r24, 0x93	; 147
    3d36:	91 e0       	ldi	r25, 0x01	; 1
    3d38:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    3d3c:	0f 90       	pop	r0
    3d3e:	0f 90       	pop	r0
    3d40:	0f 90       	pop	r0
    3d42:	0f 90       	pop	r0
    3d44:	0f 90       	pop	r0
    3d46:	0f 90       	pop	r0
    3d48:	05 c0       	rjmp	.+10     	; 0x3d54 <put_FRAM_ENCODERS+0x1e2>
    3d4a:	e3 94       	inc	r14
    3d4c:	ee 20       	and	r14, r14
    3d4e:	09 f4       	brne	.+2      	; 0x3d52 <put_FRAM_ENCODERS+0x1e0>
    3d50:	57 cf       	rjmp	.-338    	; 0x3c00 <put_FRAM_ENCODERS+0x8e>
    3d52:	f1 2c       	mov	r15, r1
    3d54:	8f 2d       	mov	r24, r15
    3d56:	c9 50       	subi	r28, 0x09	; 9
    3d58:	df 4f       	sbci	r29, 0xFF	; 255
    3d5a:	cd bf       	out	0x3d, r28	; 61
    3d5c:	de bf       	out	0x3e, r29	; 62
    3d5e:	df 91       	pop	r29
    3d60:	cf 91       	pop	r28
    3d62:	1f 91       	pop	r17
    3d64:	0f 91       	pop	r16
    3d66:	ff 90       	pop	r15
    3d68:	ef 90       	pop	r14
    3d6a:	df 90       	pop	r13
    3d6c:	08 95       	ret

00003d6e <put_MOTOR>:
    3d6e:	8f 92       	push	r8
    3d70:	9f 92       	push	r9
    3d72:	af 92       	push	r10
    3d74:	bf 92       	push	r11
    3d76:	cf 92       	push	r12
    3d78:	df 92       	push	r13
    3d7a:	ef 92       	push	r14
    3d7c:	ff 92       	push	r15
    3d7e:	0f 93       	push	r16
    3d80:	1f 93       	push	r17
    3d82:	cf 93       	push	r28
    3d84:	df 93       	push	r29
    3d86:	cd b7       	in	r28, 0x3d	; 61
    3d88:	de b7       	in	r29, 0x3e	; 62
    3d8a:	c5 59       	subi	r28, 0x95	; 149
    3d8c:	d1 09       	sbc	r29, r1
    3d8e:	cd bf       	out	0x3d, r28	; 61
    3d90:	de bf       	out	0x3e, r29	; 62
    3d92:	a8 2e       	mov	r10, r24
    3d94:	b2 2e       	mov	r11, r18
    3d96:	cd b6       	in	r12, 0x3d	; 61
    3d98:	de b6       	in	r13, 0x3e	; 62
    3d9a:	80 e2       	ldi	r24, 0x20	; 32
    3d9c:	eb e8       	ldi	r30, 0x8B	; 139
    3d9e:	fc ea       	ldi	r31, 0xAC	; 172
    3da0:	de 01       	movw	r26, r28
    3da2:	11 96       	adiw	r26, 0x01	; 1
    3da4:	01 90       	ld	r0, Z+
    3da6:	0d 92       	st	X+, r0
    3da8:	8a 95       	dec	r24
    3daa:	e1 f7       	brne	.-8      	; 0x3da4 <put_MOTOR+0x36>
    3dac:	85 e2       	ldi	r24, 0x25	; 37
    3dae:	eb ea       	ldi	r30, 0xAB	; 171
    3db0:	fc ea       	ldi	r31, 0xAC	; 172
    3db2:	de 01       	movw	r26, r28
    3db4:	91 96       	adiw	r26, 0x21	; 33
    3db6:	01 90       	ld	r0, Z+
    3db8:	0d 92       	st	X+, r0
    3dba:	8a 95       	dec	r24
    3dbc:	e1 f7       	brne	.-8      	; 0x3db6 <put_MOTOR+0x48>
    3dbe:	82 2e       	mov	r8, r18
    3dc0:	91 2c       	mov	r9, r1
    3dc2:	c4 01       	movw	r24, r8
    3dc4:	04 96       	adiw	r24, 0x04	; 4
    3dc6:	74 01       	movw	r14, r8
    3dc8:	23 e0       	ldi	r18, 0x03	; 3
    3dca:	e2 0e       	add	r14, r18
    3dcc:	f1 1c       	adc	r15, r1
    3dce:	ad b7       	in	r26, 0x3d	; 61
    3dd0:	be b7       	in	r27, 0x3e	; 62
    3dd2:	a8 1b       	sub	r26, r24
    3dd4:	b9 0b       	sbc	r27, r25
    3dd6:	ad bf       	out	0x3d, r26	; 61
    3dd8:	be bf       	out	0x3e, r27	; 62
    3dda:	0d b7       	in	r16, 0x3d	; 61
    3ddc:	1e b7       	in	r17, 0x3e	; 62
    3dde:	0f 5f       	subi	r16, 0xFF	; 255
    3de0:	1f 4f       	sbci	r17, 0xFF	; 255
    3de2:	f8 01       	movw	r30, r16
    3de4:	10 92 3a 2b 	sts	0x2B3A, r1	; 0x802b3a <ser_recv1+0xff>
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	80 93 39 2b 	sts	0x2B39, r24	; 0x802b39 <ser_recv1+0xfe>
    3dee:	11 96       	adiw	r26, 0x01	; 1
    3df0:	ac 92       	st	X, r10
    3df2:	61 83       	std	Z+1, r22	; 0x01
    3df4:	60 e0       	ldi	r22, 0x00	; 0
    3df6:	0e c0       	rjmp	.+28     	; 0x3e14 <put_MOTOR+0xa6>
    3df8:	86 2f       	mov	r24, r22
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	9c 01       	movw	r18, r24
    3dfe:	2e 5f       	subi	r18, 0xFE	; 254
    3e00:	3f 4f       	sbci	r19, 0xFF	; 255
    3e02:	da 01       	movw	r26, r20
    3e04:	a8 0f       	add	r26, r24
    3e06:	b9 1f       	adc	r27, r25
    3e08:	8c 91       	ld	r24, X
    3e0a:	df 01       	movw	r26, r30
    3e0c:	a2 0f       	add	r26, r18
    3e0e:	b3 1f       	adc	r27, r19
    3e10:	8c 93       	st	X, r24
    3e12:	6f 5f       	subi	r22, 0xFF	; 255
    3e14:	6b 15       	cp	r22, r11
    3e16:	80 f3       	brcs	.-32     	; 0x3df8 <put_MOTOR+0x8a>
    3e18:	b2 e0       	ldi	r27, 0x02	; 2
    3e1a:	8b 0e       	add	r8, r27
    3e1c:	91 1c       	adc	r9, r1
    3e1e:	b4 01       	movw	r22, r8
    3e20:	c8 01       	movw	r24, r16
    3e22:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <crc16>
    3e26:	d8 01       	movw	r26, r16
    3e28:	a8 0d       	add	r26, r8
    3e2a:	b9 1d       	adc	r27, r9
    3e2c:	9c 93       	st	X, r25
    3e2e:	f8 01       	movw	r30, r16
    3e30:	ee 0d       	add	r30, r14
    3e32:	ff 1d       	adc	r31, r15
    3e34:	80 83       	st	Z, r24
    3e36:	64 e0       	ldi	r22, 0x04	; 4
    3e38:	6b 0d       	add	r22, r11
    3e3a:	c8 01       	movw	r24, r16
    3e3c:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <send_USART1>
    3e40:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    3e44:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
    3e48:	23 c0       	rjmp	.+70     	; 0x3e90 <put_MOTOR+0x122>
    3e4a:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    3e4e:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    3e52:	c3 97       	sbiw	r24, 0x33	; 51
    3e54:	e0 f0       	brcs	.+56     	; 0x3e8e <put_MOTOR+0x120>
    3e56:	81 ec       	ldi	r24, 0xC1	; 193
    3e58:	8a 0d       	add	r24, r10
    3e5a:	1f 92       	push	r1
    3e5c:	8f 93       	push	r24
    3e5e:	ce 01       	movw	r24, r28
    3e60:	01 96       	adiw	r24, 0x01	; 1
    3e62:	9f 93       	push	r25
    3e64:	8f 93       	push	r24
    3e66:	8e 01       	movw	r16, r28
    3e68:	0a 5b       	subi	r16, 0xBA	; 186
    3e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e6c:	1f 93       	push	r17
    3e6e:	0f 93       	push	r16
    3e70:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    3e74:	b8 01       	movw	r22, r16
    3e76:	86 e3       	ldi	r24, 0x36	; 54
    3e78:	91 e0       	ldi	r25, 0x01	; 1
    3e7a:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    3e7e:	0f 90       	pop	r0
    3e80:	0f 90       	pop	r0
    3e82:	0f 90       	pop	r0
    3e84:	0f 90       	pop	r0
    3e86:	0f 90       	pop	r0
    3e88:	0f 90       	pop	r0
    3e8a:	83 e6       	ldi	r24, 0x63	; 99
    3e8c:	41 c0       	rjmp	.+130    	; 0x3f10 <put_MOTOR+0x1a2>
    3e8e:	00 00       	nop
    3e90:	90 91 3a 2b 	lds	r25, 0x2B3A	; 0x802b3a <ser_recv1+0xff>
    3e94:	80 91 39 2b 	lds	r24, 0x2B39	; 0x802b39 <ser_recv1+0xfe>
    3e98:	98 17       	cp	r25, r24
    3e9a:	b8 f2       	brcs	.-82     	; 0x3e4a <put_MOTOR+0xdc>
    3e9c:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    3ea0:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    3ea4:	9f 93       	push	r25
    3ea6:	8f 93       	push	r24
    3ea8:	80 e7       	ldi	r24, 0x70	; 112
    3eaa:	9c ea       	ldi	r25, 0xAC	; 172
    3eac:	9f 93       	push	r25
    3eae:	8f 93       	push	r24
    3eb0:	8e 01       	movw	r16, r28
    3eb2:	0a 5b       	subi	r16, 0xBA	; 186
    3eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    3eb6:	1f 93       	push	r17
    3eb8:	0f 93       	push	r16
    3eba:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    3ebe:	c8 01       	movw	r24, r16
    3ec0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
    3ec4:	90 91 3b 2a 	lds	r25, 0x2A3B	; 0x802a3b <ser_recv1>
    3ec8:	0f 90       	pop	r0
    3eca:	0f 90       	pop	r0
    3ecc:	0f 90       	pop	r0
    3ece:	0f 90       	pop	r0
    3ed0:	0f 90       	pop	r0
    3ed2:	0f 90       	pop	r0
    3ed4:	9f 3f       	cpi	r25, 0xFF	; 255
    3ed6:	d9 f0       	breq	.+54     	; 0x3f0e <put_MOTOR+0x1a0>
    3ed8:	81 ec       	ldi	r24, 0xC1	; 193
    3eda:	8a 0d       	add	r24, r10
    3edc:	1f 92       	push	r1
    3ede:	9f 93       	push	r25
    3ee0:	1f 92       	push	r1
    3ee2:	8f 93       	push	r24
    3ee4:	ce 01       	movw	r24, r28
    3ee6:	81 96       	adiw	r24, 0x21	; 33
    3ee8:	9f 93       	push	r25
    3eea:	8f 93       	push	r24
    3eec:	1f 93       	push	r17
    3eee:	0f 93       	push	r16
    3ef0:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    3ef4:	b8 01       	movw	r22, r16
    3ef6:	86 e3       	ldi	r24, 0x36	; 54
    3ef8:	91 e0       	ldi	r25, 0x01	; 1
    3efa:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    3efe:	2d b7       	in	r18, 0x3d	; 61
    3f00:	3e b7       	in	r19, 0x3e	; 62
    3f02:	28 5f       	subi	r18, 0xF8	; 248
    3f04:	3f 4f       	sbci	r19, 0xFF	; 255
    3f06:	2d bf       	out	0x3d, r18	; 61
    3f08:	3e bf       	out	0x3e, r19	; 62
    3f0a:	83 e6       	ldi	r24, 0x63	; 99
    3f0c:	01 c0       	rjmp	.+2      	; 0x3f10 <put_MOTOR+0x1a2>
    3f0e:	80 e0       	ldi	r24, 0x00	; 0
    3f10:	cd be       	out	0x3d, r12	; 61
    3f12:	de be       	out	0x3e, r13	; 62
    3f14:	cb 56       	subi	r28, 0x6B	; 107
    3f16:	df 4f       	sbci	r29, 0xFF	; 255
    3f18:	cd bf       	out	0x3d, r28	; 61
    3f1a:	de bf       	out	0x3e, r29	; 62
    3f1c:	df 91       	pop	r29
    3f1e:	cf 91       	pop	r28
    3f20:	1f 91       	pop	r17
    3f22:	0f 91       	pop	r16
    3f24:	ff 90       	pop	r15
    3f26:	ef 90       	pop	r14
    3f28:	df 90       	pop	r13
    3f2a:	cf 90       	pop	r12
    3f2c:	bf 90       	pop	r11
    3f2e:	af 90       	pop	r10
    3f30:	9f 90       	pop	r9
    3f32:	8f 90       	pop	r8
    3f34:	08 95       	ret

00003f36 <move_MOTOR>:
    3f36:	ef 92       	push	r14
    3f38:	ff 92       	push	r15
    3f3a:	0f 93       	push	r16
    3f3c:	1f 93       	push	r17
    3f3e:	cf 93       	push	r28
    3f40:	df 93       	push	r29
    3f42:	cd b7       	in	r28, 0x3d	; 61
    3f44:	de b7       	in	r29, 0x3e	; 62
    3f46:	c3 58       	subi	r28, 0x83	; 131
    3f48:	d1 09       	sbc	r29, r1
    3f4a:	cd bf       	out	0x3d, r28	; 61
    3f4c:	de bf       	out	0x3e, r29	; 62
    3f4e:	f8 2e       	mov	r15, r24
    3f50:	82 e2       	ldi	r24, 0x22	; 34
    3f52:	eb ed       	ldi	r30, 0xDB	; 219
    3f54:	fc ea       	ldi	r31, 0xAC	; 172
    3f56:	de 01       	movw	r26, r28
    3f58:	11 96       	adiw	r26, 0x01	; 1
    3f5a:	01 90       	ld	r0, Z+
    3f5c:	0d 92       	st	X+, r0
    3f5e:	8a 95       	dec	r24
    3f60:	e1 f7       	brne	.-8      	; 0x3f5a <move_MOTOR+0x24>
    3f62:	e4 96       	adiw	r28, 0x34	; 52
    3f64:	1f ae       	std	Y+63, r1	; 0x3f
    3f66:	e4 97       	sbiw	r28, 0x34	; 52
    3f68:	e5 96       	adiw	r28, 0x35	; 53
    3f6a:	1f ae       	std	Y+63, r1	; 0x3f
    3f6c:	e5 97       	sbiw	r28, 0x35	; 53
    3f6e:	9b e1       	ldi	r25, 0x1B	; 27
    3f70:	e6 96       	adiw	r28, 0x36	; 54
    3f72:	9f af       	std	Y+63, r25	; 0x3f
    3f74:	e6 97       	sbiw	r28, 0x36	; 54
    3f76:	85 ea       	ldi	r24, 0xA5	; 165
    3f78:	e7 96       	adiw	r28, 0x37	; 55
    3f7a:	8f af       	std	Y+63, r24	; 0x3f
    3f7c:	e7 97       	sbiw	r28, 0x37	; 55
    3f7e:	e8 96       	adiw	r28, 0x38	; 56
    3f80:	1f ae       	std	Y+63, r1	; 0x3f
    3f82:	e8 97       	sbiw	r28, 0x38	; 56
    3f84:	e9 96       	adiw	r28, 0x39	; 57
    3f86:	1f ae       	std	Y+63, r1	; 0x3f
    3f88:	e9 97       	sbiw	r28, 0x39	; 57
    3f8a:	ea 96       	adiw	r28, 0x3a	; 58
    3f8c:	9f af       	std	Y+63, r25	; 0x3f
    3f8e:	ea 97       	sbiw	r28, 0x3a	; 58
    3f90:	eb 96       	adiw	r28, 0x3b	; 59
    3f92:	8f af       	std	Y+63, r24	; 0x3f
    3f94:	eb 97       	sbiw	r28, 0x3b	; 59
    3f96:	ec 96       	adiw	r28, 0x3c	; 60
    3f98:	1f ae       	std	Y+63, r1	; 0x3f
    3f9a:	ec 97       	sbiw	r28, 0x3c	; 60
    3f9c:	ed 96       	adiw	r28, 0x3d	; 61
    3f9e:	1f ae       	std	Y+63, r1	; 0x3f
    3fa0:	ed 97       	sbiw	r28, 0x3d	; 61
    3fa2:	8d e0       	ldi	r24, 0x0D	; 13
    3fa4:	ee 96       	adiw	r28, 0x3e	; 62
    3fa6:	8f af       	std	Y+63, r24	; 0x3f
    3fa8:	ee 97       	sbiw	r28, 0x3e	; 62
    3faa:	82 ed       	ldi	r24, 0xD2	; 210
    3fac:	ef 96       	adiw	r28, 0x3f	; 63
    3fae:	8f af       	std	Y+63, r24	; 0x3f
    3fb0:	ef 97       	sbiw	r28, 0x3f	; 63
    3fb2:	c1 58       	subi	r28, 0x81	; 129
    3fb4:	df 4f       	sbci	r29, 0xFF	; 255
    3fb6:	78 83       	st	Y, r23
    3fb8:	cf 57       	subi	r28, 0x7F	; 127
    3fba:	d0 40       	sbci	r29, 0x00	; 0
    3fbc:	c0 58       	subi	r28, 0x80	; 128
    3fbe:	df 4f       	sbci	r29, 0xFF	; 255
    3fc0:	68 83       	st	Y, r22
    3fc2:	c0 58       	subi	r28, 0x80	; 128
    3fc4:	d0 40       	sbci	r29, 0x00	; 0
    3fc6:	cf 57       	subi	r28, 0x7F	; 127
    3fc8:	df 4f       	sbci	r29, 0xFF	; 255
    3fca:	58 83       	st	Y, r21
    3fcc:	c1 58       	subi	r28, 0x81	; 129
    3fce:	d0 40       	sbci	r29, 0x00	; 0
    3fd0:	ce 57       	subi	r28, 0x7E	; 126
    3fd2:	df 4f       	sbci	r29, 0xFF	; 255
    3fd4:	48 83       	st	Y, r20
    3fd6:	c2 58       	subi	r28, 0x82	; 130
    3fd8:	d0 40       	sbci	r29, 0x00	; 0
    3fda:	cd 57       	subi	r28, 0x7D	; 125
    3fdc:	df 4f       	sbci	r29, 0xFF	; 255
    3fde:	18 82       	st	Y, r1
    3fe0:	c3 58       	subi	r28, 0x83	; 131
    3fe2:	d0 40       	sbci	r29, 0x00	; 0
    3fe4:	7f 93       	push	r23
    3fe6:	6f 93       	push	r22
    3fe8:	5f 93       	push	r21
    3fea:	4f 93       	push	r20
    3fec:	80 ed       	ldi	r24, 0xD0	; 208
    3fee:	9c ea       	ldi	r25, 0xAC	; 172
    3ff0:	9f 93       	push	r25
    3ff2:	8f 93       	push	r24
    3ff4:	8e 01       	movw	r16, r28
    3ff6:	0d 5d       	subi	r16, 0xDD	; 221
    3ff8:	1f 4f       	sbci	r17, 0xFF	; 255
    3ffa:	1f 93       	push	r17
    3ffc:	0f 93       	push	r16
    3ffe:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    4002:	c8 01       	movw	r24, r16
    4004:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
    4008:	21 e1       	ldi	r18, 0x11	; 17
    400a:	ae 01       	movw	r20, r28
    400c:	4d 58       	subi	r20, 0x8D	; 141
    400e:	5f 4f       	sbci	r21, 0xFF	; 255
    4010:	61 e4       	ldi	r22, 0x41	; 65
    4012:	8f 2d       	mov	r24, r15
    4014:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <put_MOTOR>
    4018:	18 2f       	mov	r17, r24
    401a:	cd bf       	out	0x3d, r28	; 61
    401c:	de bf       	out	0x3e, r29	; 62
    401e:	13 36       	cpi	r17, 0x63	; 99
    4020:	e1 f4       	brne	.+56     	; 0x405a <__RODATA_PM_OFFSET__+0x5a>
    4022:	81 ec       	ldi	r24, 0xC1	; 193
    4024:	8f 0d       	add	r24, r15
    4026:	1f 92       	push	r1
    4028:	8f 93       	push	r24
    402a:	ce 01       	movw	r24, r28
    402c:	01 96       	adiw	r24, 0x01	; 1
    402e:	9f 93       	push	r25
    4030:	8f 93       	push	r24
    4032:	7e 01       	movw	r14, r28
    4034:	93 e2       	ldi	r25, 0x23	; 35
    4036:	e9 0e       	add	r14, r25
    4038:	f1 1c       	adc	r15, r1
    403a:	ff 92       	push	r15
    403c:	ef 92       	push	r14
    403e:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
    4042:	b7 01       	movw	r22, r14
    4044:	86 e3       	ldi	r24, 0x36	; 54
    4046:	91 e0       	ldi	r25, 0x01	; 1
    4048:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
    404c:	0f 90       	pop	r0
    404e:	0f 90       	pop	r0
    4050:	0f 90       	pop	r0
    4052:	0f 90       	pop	r0
    4054:	0f 90       	pop	r0
    4056:	0f 90       	pop	r0
    4058:	01 c0       	rjmp	.+2      	; 0x405c <__RODATA_PM_OFFSET__+0x5c>
    405a:	10 e0       	ldi	r17, 0x00	; 0
    405c:	81 2f       	mov	r24, r17
    405e:	cd 57       	subi	r28, 0x7D	; 125
    4060:	df 4f       	sbci	r29, 0xFF	; 255
    4062:	cd bf       	out	0x3d, r28	; 61
    4064:	de bf       	out	0x3e, r29	; 62
    4066:	df 91       	pop	r29
    4068:	cf 91       	pop	r28
    406a:	1f 91       	pop	r17
    406c:	0f 91       	pop	r16
    406e:	ff 90       	pop	r15
    4070:	ef 90       	pop	r14
    4072:	08 95       	ret

00004074 <put_MOTOR_ENCODER>:
	Returns:
		ERROR:		If put_MOTOR returns an error
		NOERROR:	Otherwise
------------------------------------------------------------------------------*/
uint8_t put_MOTOR_ENCODER(uint8_t mtraddr, int32_t encoderValue)
{
    4074:	ef 92       	push	r14
    4076:	ff 92       	push	r15
    4078:	0f 93       	push	r16
    407a:	1f 93       	push	r17
    407c:	cf 93       	push	r28
    407e:	df 93       	push	r29
    4080:	cd b7       	in	r28, 0x3d	; 61
    4082:	de b7       	in	r29, 0x3e	; 62
    4084:	cd 57       	subi	r28, 0x7D	; 125
    4086:	d1 09       	sbc	r29, r1
    4088:	cd bf       	out	0x3d, r28	; 61
    408a:	de bf       	out	0x3e, r29	; 62
    408c:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_ENCODER: put_MOTOR error on %c";
    408e:	89 e2       	ldi	r24, 0x29	; 41
    4090:	ed e7       	ldi	r30, 0x7D	; 125
    4092:	fd ea       	ldi	r31, 0xAD	; 173
    4094:	de 01       	movw	r26, r28
    4096:	11 96       	adiw	r26, 0x01	; 1
    4098:	01 90       	ld	r0, Z+
    409a:	0d 92       	st	X+, r0
    409c:	8a 95       	dec	r24
    409e:	e1 f7       	brne	.-8      	; 0x4098 <put_MOTOR_ENCODER+0x24>
	char strbuf[80];
	uint8_t data[4];

	data[0] = (encoderValue >> 24) & 0xFF;
    40a0:	eb 96       	adiw	r28, 0x3b	; 59
    40a2:	7f af       	std	Y+63, r23	; 0x3f
    40a4:	eb 97       	sbiw	r28, 0x3b	; 59
	data[1] = (encoderValue >> 16) & 0xFF;
    40a6:	ec 96       	adiw	r28, 0x3c	; 60
    40a8:	6f af       	std	Y+63, r22	; 0x3f
    40aa:	ec 97       	sbiw	r28, 0x3c	; 60
	data[2] = (encoderValue >> 8) & 0xFF;
    40ac:	ed 96       	adiw	r28, 0x3d	; 61
    40ae:	5f af       	std	Y+63, r21	; 0x3f
    40b0:	ed 97       	sbiw	r28, 0x3d	; 61
	data[3] = encoderValue & 0xFF;
    40b2:	ee 96       	adiw	r28, 0x3e	; 62
    40b4:	4f af       	std	Y+63, r20	; 0x3f
    40b6:	ee 97       	sbiw	r28, 0x3e	; 62

	if (put_MOTOR(mtraddr, PUTENCODER, data, 4) == ERROR) {
    40b8:	24 e0       	ldi	r18, 0x04	; 4
    40ba:	ae 01       	movw	r20, r28
    40bc:	46 58       	subi	r20, 0x86	; 134
    40be:	5f 4f       	sbci	r21, 0xFF	; 255
    40c0:	66 e1       	ldi	r22, 0x16	; 22
    40c2:	80 2f       	mov	r24, r16
    40c4:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <put_MOTOR>
    40c8:	18 2f       	mov	r17, r24
    40ca:	83 36       	cpi	r24, 0x63	; 99
    40cc:	d9 f4       	brne	.+54     	; 0x4104 <put_MOTOR_ENCODER+0x90>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    40ce:	0f 53       	subi	r16, 0x3F	; 63
    40d0:	1f 92       	push	r1
    40d2:	0f 93       	push	r16
    40d4:	ce 01       	movw	r24, r28
    40d6:	01 96       	adiw	r24, 0x01	; 1
    40d8:	9f 93       	push	r25
    40da:	8f 93       	push	r24
    40dc:	7e 01       	movw	r14, r28
    40de:	8a e2       	ldi	r24, 0x2A	; 42
    40e0:	e8 0e       	add	r14, r24
    40e2:	f1 1c       	adc	r15, r1
    40e4:	ff 92       	push	r15
    40e6:	ef 92       	push	r14
    40e8:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
		printError(ERR_MTR, strbuf);
    40ec:	b7 01       	movw	r22, r14
    40ee:	86 e3       	ldi	r24, 0x36	; 54
    40f0:	91 e0       	ldi	r25, 0x01	; 1
    40f2:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    40f6:	0f 90       	pop	r0
    40f8:	0f 90       	pop	r0
    40fa:	0f 90       	pop	r0
    40fc:	0f 90       	pop	r0
    40fe:	0f 90       	pop	r0
    4100:	0f 90       	pop	r0
    4102:	01 c0       	rjmp	.+2      	; 0x4106 <put_MOTOR_ENCODER+0x92>
	}

	return(NOERROR);
    4104:	10 e0       	ldi	r17, 0x00	; 0

}
    4106:	81 2f       	mov	r24, r17
    4108:	c3 58       	subi	r28, 0x83	; 131
    410a:	df 4f       	sbci	r29, 0xFF	; 255
    410c:	cd bf       	out	0x3d, r28	; 61
    410e:	de bf       	out	0x3e, r29	; 62
    4110:	df 91       	pop	r29
    4112:	cf 91       	pop	r28
    4114:	1f 91       	pop	r17
    4116:	0f 91       	pop	r16
    4118:	ff 90       	pop	r15
    411a:	ef 90       	pop	r14
    411c:	08 95       	ret

0000411e <put_MOTOR_MAXCURRENT>:
	Returns:
		ERROR:			If put_MOTOR returns an error
		NOERROR:		Otherwise
------------------------------------------------------------------------------*/
uint8_t put_MOTOR_MAXCURRENT(uint8_t mtraddr, int32_t maxCurrent)
{
    411e:	ef 92       	push	r14
    4120:	ff 92       	push	r15
    4122:	0f 93       	push	r16
    4124:	1f 93       	push	r17
    4126:	cf 93       	push	r28
    4128:	df 93       	push	r29
    412a:	cd b7       	in	r28, 0x3d	; 61
    412c:	de b7       	in	r29, 0x3e	; 62
    412e:	c4 58       	subi	r28, 0x84	; 132
    4130:	d1 09       	sbc	r29, r1
    4132:	cd bf       	out	0x3d, r28	; 61
    4134:	de bf       	out	0x3e, r29	; 62
    4136:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_MAXCURRENT: put_MOTOR error on %c";
    4138:	8c e2       	ldi	r24, 0x2C	; 44
    413a:	e6 ea       	ldi	r30, 0xA6	; 166
    413c:	fd ea       	ldi	r31, 0xAD	; 173
    413e:	de 01       	movw	r26, r28
    4140:	11 96       	adiw	r26, 0x01	; 1
    4142:	01 90       	ld	r0, Z+
    4144:	0d 92       	st	X+, r0
    4146:	8a 95       	dec	r24
    4148:	e1 f7       	brne	.-8      	; 0x4142 <put_MOTOR_MAXCURRENT+0x24>
	char strbuf[80];
	uint8_t data[8];

	maxCurrent /= 10;			// convert to 10 mA units
    414a:	cb 01       	movw	r24, r22
    414c:	ba 01       	movw	r22, r20
    414e:	2a e0       	ldi	r18, 0x0A	; 10
    4150:	30 e0       	ldi	r19, 0x00	; 0
    4152:	40 e0       	ldi	r20, 0x00	; 0
    4154:	50 e0       	ldi	r21, 0x00	; 0
    4156:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <__divmodsi4>
	data[0] = (maxCurrent >> 24) & 0xFF;
    415a:	ee 96       	adiw	r28, 0x3e	; 62
    415c:	5f af       	std	Y+63, r21	; 0x3f
    415e:	ee 97       	sbiw	r28, 0x3e	; 62
	data[1] = (maxCurrent >> 16) & 0xFF;
    4160:	ef 96       	adiw	r28, 0x3f	; 63
    4162:	4f af       	std	Y+63, r20	; 0x3f
    4164:	ef 97       	sbiw	r28, 0x3f	; 63
	data[2] = (maxCurrent >> 8) & 0xFF;
    4166:	c1 58       	subi	r28, 0x81	; 129
    4168:	df 4f       	sbci	r29, 0xFF	; 255
    416a:	38 83       	st	Y, r19
    416c:	cf 57       	subi	r28, 0x7F	; 127
    416e:	d0 40       	sbci	r29, 0x00	; 0
	data[3] = maxCurrent & 0xFF;
    4170:	c0 58       	subi	r28, 0x80	; 128
    4172:	df 4f       	sbci	r29, 0xFF	; 255
    4174:	28 83       	st	Y, r18
    4176:	c0 58       	subi	r28, 0x80	; 128
    4178:	d0 40       	sbci	r29, 0x00	; 0
	data[4] = data[5] = data[6] = data[7] = 0;
    417a:	cc 57       	subi	r28, 0x7C	; 124
    417c:	df 4f       	sbci	r29, 0xFF	; 255
    417e:	18 82       	st	Y, r1
    4180:	c4 58       	subi	r28, 0x84	; 132
    4182:	d0 40       	sbci	r29, 0x00	; 0
    4184:	cd 57       	subi	r28, 0x7D	; 125
    4186:	df 4f       	sbci	r29, 0xFF	; 255
    4188:	18 82       	st	Y, r1
    418a:	c3 58       	subi	r28, 0x83	; 131
    418c:	d0 40       	sbci	r29, 0x00	; 0
    418e:	ce 57       	subi	r28, 0x7E	; 126
    4190:	df 4f       	sbci	r29, 0xFF	; 255
    4192:	18 82       	st	Y, r1
    4194:	c2 58       	subi	r28, 0x82	; 130
    4196:	d0 40       	sbci	r29, 0x00	; 0
    4198:	cf 57       	subi	r28, 0x7F	; 127
    419a:	df 4f       	sbci	r29, 0xFF	; 255
    419c:	18 82       	st	Y, r1
    419e:	c1 58       	subi	r28, 0x81	; 129
    41a0:	d0 40       	sbci	r29, 0x00	; 0
	if (put_MOTOR(mtraddr, PUTMAXCURRENT, data, 8) == ERROR) {
    41a2:	28 e0       	ldi	r18, 0x08	; 8
    41a4:	ae 01       	movw	r20, r28
    41a6:	43 58       	subi	r20, 0x83	; 131
    41a8:	5f 4f       	sbci	r21, 0xFF	; 255
    41aa:	65 e8       	ldi	r22, 0x85	; 133
    41ac:	80 2f       	mov	r24, r16
    41ae:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <put_MOTOR>
    41b2:	18 2f       	mov	r17, r24
    41b4:	83 36       	cpi	r24, 0x63	; 99
    41b6:	d9 f4       	brne	.+54     	; 0x41ee <put_MOTOR_MAXCURRENT+0xd0>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    41b8:	0f 53       	subi	r16, 0x3F	; 63
    41ba:	1f 92       	push	r1
    41bc:	0f 93       	push	r16
    41be:	ce 01       	movw	r24, r28
    41c0:	01 96       	adiw	r24, 0x01	; 1
    41c2:	9f 93       	push	r25
    41c4:	8f 93       	push	r24
    41c6:	7e 01       	movw	r14, r28
    41c8:	8d e2       	ldi	r24, 0x2D	; 45
    41ca:	e8 0e       	add	r14, r24
    41cc:	f1 1c       	adc	r15, r1
    41ce:	ff 92       	push	r15
    41d0:	ef 92       	push	r14
    41d2:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
		printError(ERR_MTR, strbuf);
    41d6:	b7 01       	movw	r22, r14
    41d8:	86 e3       	ldi	r24, 0x36	; 54
    41da:	91 e0       	ldi	r25, 0x01	; 1
    41dc:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    41e0:	0f 90       	pop	r0
    41e2:	0f 90       	pop	r0
    41e4:	0f 90       	pop	r0
    41e6:	0f 90       	pop	r0
    41e8:	0f 90       	pop	r0
    41ea:	0f 90       	pop	r0
    41ec:	01 c0       	rjmp	.+2      	; 0x41f0 <put_MOTOR_MAXCURRENT+0xd2>
	}
	return(NOERROR);
    41ee:	10 e0       	ldi	r17, 0x00	; 0
}
    41f0:	81 2f       	mov	r24, r17
    41f2:	cc 57       	subi	r28, 0x7C	; 124
    41f4:	df 4f       	sbci	r29, 0xFF	; 255
    41f6:	cd bf       	out	0x3d, r28	; 61
    41f8:	de bf       	out	0x3e, r29	; 62
    41fa:	df 91       	pop	r29
    41fc:	cf 91       	pop	r28
    41fe:	1f 91       	pop	r17
    4200:	0f 91       	pop	r16
    4202:	ff 90       	pop	r15
    4204:	ef 90       	pop	r14
    4206:	08 95       	ret

00004208 <put_MOTOR_PID>:
	Returns:
		ERROR:		If put_MOTOR returns an error
		NOERROR:	Otherwise
------------------------------------------------------------------------------*/
uint8_t put_MOTOR_PID(uint8_t mtraddr, PID pid)
{
    4208:	9f 92       	push	r9
    420a:	af 92       	push	r10
    420c:	bf 92       	push	r11
    420e:	cf 92       	push	r12
    4210:	df 92       	push	r13
    4212:	ef 92       	push	r14
    4214:	ff 92       	push	r15
    4216:	0f 93       	push	r16
    4218:	1f 93       	push	r17
    421a:	cf 93       	push	r28
    421c:	df 93       	push	r29
    421e:	cd b7       	in	r28, 0x3d	; 61
    4220:	de b7       	in	r29, 0x3e	; 62
    4222:	cf 5b       	subi	r28, 0xBF	; 191
    4224:	d1 09       	sbc	r29, r1
    4226:	cd bf       	out	0x3d, r28	; 61
    4228:	de bf       	out	0x3e, r29	; 62
    422a:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_PID: put_MOTOR error pid on %c";
    422c:	89 e2       	ldi	r24, 0x29	; 41
    422e:	e2 ed       	ldi	r30, 0xD2	; 210
    4230:	fd ea       	ldi	r31, 0xAD	; 173
    4232:	de 01       	movw	r26, r28
    4234:	11 96       	adiw	r26, 0x01	; 1
    4236:	01 90       	ld	r0, Z+
    4238:	0d 92       	st	X+, r0
    423a:	8a 95       	dec	r24
    423c:	e1 f7       	brne	.-8      	; 0x4236 <put_MOTOR_PID+0x2e>
	const char fmt2[] = "put_MOTOR_PID: put_MOTOR error qpps on %c";
    423e:	8a e2       	ldi	r24, 0x2A	; 42
    4240:	eb ef       	ldi	r30, 0xFB	; 251
    4242:	fd ea       	ldi	r31, 0xAD	; 173
    4244:	de 01       	movw	r26, r28
    4246:	9a 96       	adiw	r26, 0x2a	; 42
    4248:	01 90       	ld	r0, Z+
    424a:	0d 92       	st	X+, r0
    424c:	8a 95       	dec	r24
    424e:	e1 f7       	brne	.-8      	; 0x4248 <put_MOTOR_PID+0x40>
	char strbuf[80];
	uint8_t data[28];
	int32_t p, i, d;

	p = (int32_t) (pid.p * 1024.0);
    4250:	c3 53       	subi	r28, 0x33	; 51
    4252:	df 4f       	sbci	r29, 0xFF	; 255
    4254:	68 81       	ld	r22, Y
    4256:	79 81       	ldd	r23, Y+1	; 0x01
    4258:	8a 81       	ldd	r24, Y+2	; 0x02
    425a:	9b 81       	ldd	r25, Y+3	; 0x03
    425c:	cd 5c       	subi	r28, 0xCD	; 205
    425e:	d0 40       	sbci	r29, 0x00	; 0
    4260:	20 e0       	ldi	r18, 0x00	; 0
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	40 e8       	ldi	r20, 0x80	; 128
    4266:	54 e4       	ldi	r21, 0x44	; 68
    4268:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
    426c:	0e 94 31 2a 	call	0x5462	; 0x5462 <__fixsfsi>
    4270:	c6 2e       	mov	r12, r22
    4272:	b7 2e       	mov	r11, r23
    4274:	a8 2e       	mov	r10, r24
    4276:	99 2e       	mov	r9, r25
	i = (int32_t) (pid.i * 1024.0);
    4278:	cf 52       	subi	r28, 0x2F	; 47
    427a:	df 4f       	sbci	r29, 0xFF	; 255
    427c:	68 81       	ld	r22, Y
    427e:	79 81       	ldd	r23, Y+1	; 0x01
    4280:	8a 81       	ldd	r24, Y+2	; 0x02
    4282:	9b 81       	ldd	r25, Y+3	; 0x03
    4284:	c1 5d       	subi	r28, 0xD1	; 209
    4286:	d0 40       	sbci	r29, 0x00	; 0
    4288:	20 e0       	ldi	r18, 0x00	; 0
    428a:	30 e0       	ldi	r19, 0x00	; 0
    428c:	40 e8       	ldi	r20, 0x80	; 128
    428e:	54 e4       	ldi	r21, 0x44	; 68
    4290:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
    4294:	0e 94 31 2a 	call	0x5462	; 0x5462 <__fixsfsi>
    4298:	16 2f       	mov	r17, r22
    429a:	f7 2e       	mov	r15, r23
    429c:	e8 2e       	mov	r14, r24
    429e:	d9 2e       	mov	r13, r25
	d = (int32_t) (pid.d * 1024.0);
    42a0:	cb 52       	subi	r28, 0x2B	; 43
    42a2:	df 4f       	sbci	r29, 0xFF	; 255
    42a4:	68 81       	ld	r22, Y
    42a6:	79 81       	ldd	r23, Y+1	; 0x01
    42a8:	8a 81       	ldd	r24, Y+2	; 0x02
    42aa:	9b 81       	ldd	r25, Y+3	; 0x03
    42ac:	c5 5d       	subi	r28, 0xD5	; 213
    42ae:	d0 40       	sbci	r29, 0x00	; 0
    42b0:	20 e0       	ldi	r18, 0x00	; 0
    42b2:	30 e0       	ldi	r19, 0x00	; 0
    42b4:	40 e8       	ldi	r20, 0x80	; 128
    42b6:	54 e4       	ldi	r21, 0x44	; 68
    42b8:	0e 94 1e 2b 	call	0x563c	; 0x563c <__mulsf3>
    42bc:	0e 94 31 2a 	call	0x5462	; 0x5462 <__fixsfsi>

	data[0] = (d >> 24) & 0xFF;
    42c0:	cc 55       	subi	r28, 0x5C	; 92
    42c2:	df 4f       	sbci	r29, 0xFF	; 255
    42c4:	98 83       	st	Y, r25
    42c6:	c4 5a       	subi	r28, 0xA4	; 164
    42c8:	d0 40       	sbci	r29, 0x00	; 0
	data[1] = (d >> 16) & 0xFF;
    42ca:	cb 55       	subi	r28, 0x5B	; 91
    42cc:	df 4f       	sbci	r29, 0xFF	; 255
    42ce:	88 83       	st	Y, r24
    42d0:	c5 5a       	subi	r28, 0xA5	; 165
    42d2:	d0 40       	sbci	r29, 0x00	; 0
	data[2] = (d >> 8) & 0xFF;
    42d4:	ca 55       	subi	r28, 0x5A	; 90
    42d6:	df 4f       	sbci	r29, 0xFF	; 255
    42d8:	78 83       	st	Y, r23
    42da:	c6 5a       	subi	r28, 0xA6	; 166
    42dc:	d0 40       	sbci	r29, 0x00	; 0
	data[3] = d & 0xFF;
    42de:	c9 55       	subi	r28, 0x59	; 89
    42e0:	df 4f       	sbci	r29, 0xFF	; 255
    42e2:	68 83       	st	Y, r22
    42e4:	c7 5a       	subi	r28, 0xA7	; 167
    42e6:	d0 40       	sbci	r29, 0x00	; 0
	data[4] = (p >> 24) & 0xFF;
    42e8:	c8 55       	subi	r28, 0x58	; 88
    42ea:	df 4f       	sbci	r29, 0xFF	; 255
    42ec:	98 82       	st	Y, r9
    42ee:	c8 5a       	subi	r28, 0xA8	; 168
    42f0:	d0 40       	sbci	r29, 0x00	; 0
	data[5] = (p >> 16) & 0xFF;
    42f2:	c7 55       	subi	r28, 0x57	; 87
    42f4:	df 4f       	sbci	r29, 0xFF	; 255
    42f6:	a8 82       	st	Y, r10
    42f8:	c9 5a       	subi	r28, 0xA9	; 169
    42fa:	d0 40       	sbci	r29, 0x00	; 0
	data[6] = (p >> 8) & 0xFF;
    42fc:	c6 55       	subi	r28, 0x56	; 86
    42fe:	df 4f       	sbci	r29, 0xFF	; 255
    4300:	b8 82       	st	Y, r11
    4302:	ca 5a       	subi	r28, 0xAA	; 170
    4304:	d0 40       	sbci	r29, 0x00	; 0
	data[7] = p & 0xFF;
    4306:	c5 55       	subi	r28, 0x55	; 85
    4308:	df 4f       	sbci	r29, 0xFF	; 255
    430a:	c8 82       	st	Y, r12
    430c:	cb 5a       	subi	r28, 0xAB	; 171
    430e:	d0 40       	sbci	r29, 0x00	; 0
	data[8] = (i >> 24) & 0xFF;
    4310:	c4 55       	subi	r28, 0x54	; 84
    4312:	df 4f       	sbci	r29, 0xFF	; 255
    4314:	d8 82       	st	Y, r13
    4316:	cc 5a       	subi	r28, 0xAC	; 172
    4318:	d0 40       	sbci	r29, 0x00	; 0
	data[9] = (i >> 16) & 0xFF;
    431a:	c3 55       	subi	r28, 0x53	; 83
    431c:	df 4f       	sbci	r29, 0xFF	; 255
    431e:	e8 82       	st	Y, r14
    4320:	cd 5a       	subi	r28, 0xAD	; 173
    4322:	d0 40       	sbci	r29, 0x00	; 0
	data[10] = (i >> 8) & 0xFF;
    4324:	c2 55       	subi	r28, 0x52	; 82
    4326:	df 4f       	sbci	r29, 0xFF	; 255
    4328:	f8 82       	st	Y, r15
    432a:	ce 5a       	subi	r28, 0xAE	; 174
    432c:	d0 40       	sbci	r29, 0x00	; 0
	data[11] = i & 0xFF;
    432e:	c1 55       	subi	r28, 0x51	; 81
    4330:	df 4f       	sbci	r29, 0xFF	; 255
    4332:	18 83       	st	Y, r17
    4334:	cf 5a       	subi	r28, 0xAF	; 175
    4336:	d0 40       	sbci	r29, 0x00	; 0
	data[12] = (pid.maxI >> 24) & 0xFF;
    4338:	c7 52       	subi	r28, 0x27	; 39
    433a:	df 4f       	sbci	r29, 0xFF	; 255
    433c:	88 81       	ld	r24, Y
    433e:	c9 5d       	subi	r28, 0xD9	; 217
    4340:	d0 40       	sbci	r29, 0x00	; 0
    4342:	c6 52       	subi	r28, 0x26	; 38
    4344:	df 4f       	sbci	r29, 0xFF	; 255
    4346:	98 81       	ld	r25, Y
    4348:	ca 5d       	subi	r28, 0xDA	; 218
    434a:	d0 40       	sbci	r29, 0x00	; 0
    434c:	c5 52       	subi	r28, 0x25	; 37
    434e:	df 4f       	sbci	r29, 0xFF	; 255
    4350:	28 81       	ld	r18, Y
    4352:	cb 5d       	subi	r28, 0xDB	; 219
    4354:	d0 40       	sbci	r29, 0x00	; 0
    4356:	c4 52       	subi	r28, 0x24	; 36
    4358:	df 4f       	sbci	r29, 0xFF	; 255
    435a:	38 81       	ld	r19, Y
    435c:	cc 5d       	subi	r28, 0xDC	; 220
    435e:	d0 40       	sbci	r29, 0x00	; 0
    4360:	c0 55       	subi	r28, 0x50	; 80
    4362:	df 4f       	sbci	r29, 0xFF	; 255
    4364:	38 83       	st	Y, r19
    4366:	c0 5b       	subi	r28, 0xB0	; 176
    4368:	d0 40       	sbci	r29, 0x00	; 0
	data[13] = (pid.maxI >> 16) & 0xFF;
    436a:	cf 54       	subi	r28, 0x4F	; 79
    436c:	df 4f       	sbci	r29, 0xFF	; 255
    436e:	28 83       	st	Y, r18
    4370:	c1 5b       	subi	r28, 0xB1	; 177
    4372:	d0 40       	sbci	r29, 0x00	; 0
	data[14] = (pid.maxI >> 8) & 0xFF;
    4374:	ce 54       	subi	r28, 0x4E	; 78
    4376:	df 4f       	sbci	r29, 0xFF	; 255
    4378:	98 83       	st	Y, r25
    437a:	c2 5b       	subi	r28, 0xB2	; 178
    437c:	d0 40       	sbci	r29, 0x00	; 0
	data[15] = pid.maxI & 0xFF;
    437e:	cd 54       	subi	r28, 0x4D	; 77
    4380:	df 4f       	sbci	r29, 0xFF	; 255
    4382:	88 83       	st	Y, r24
    4384:	c3 5b       	subi	r28, 0xB3	; 179
    4386:	d0 40       	sbci	r29, 0x00	; 0
	data[16] = (pid.deadZone >> 24) & 0xFF;
    4388:	c3 52       	subi	r28, 0x23	; 35
    438a:	df 4f       	sbci	r29, 0xFF	; 255
    438c:	88 81       	ld	r24, Y
    438e:	cd 5d       	subi	r28, 0xDD	; 221
    4390:	d0 40       	sbci	r29, 0x00	; 0
    4392:	c2 52       	subi	r28, 0x22	; 34
    4394:	df 4f       	sbci	r29, 0xFF	; 255
    4396:	98 81       	ld	r25, Y
    4398:	ce 5d       	subi	r28, 0xDE	; 222
    439a:	d0 40       	sbci	r29, 0x00	; 0
    439c:	c1 52       	subi	r28, 0x21	; 33
    439e:	df 4f       	sbci	r29, 0xFF	; 255
    43a0:	28 81       	ld	r18, Y
    43a2:	cf 5d       	subi	r28, 0xDF	; 223
    43a4:	d0 40       	sbci	r29, 0x00	; 0
    43a6:	c0 52       	subi	r28, 0x20	; 32
    43a8:	df 4f       	sbci	r29, 0xFF	; 255
    43aa:	38 81       	ld	r19, Y
    43ac:	c0 5e       	subi	r28, 0xE0	; 224
    43ae:	d0 40       	sbci	r29, 0x00	; 0
    43b0:	cc 54       	subi	r28, 0x4C	; 76
    43b2:	df 4f       	sbci	r29, 0xFF	; 255
    43b4:	38 83       	st	Y, r19
    43b6:	c4 5b       	subi	r28, 0xB4	; 180
    43b8:	d0 40       	sbci	r29, 0x00	; 0
	data[17] = (pid.deadZone >> 16) & 0xFF;
    43ba:	cb 54       	subi	r28, 0x4B	; 75
    43bc:	df 4f       	sbci	r29, 0xFF	; 255
    43be:	28 83       	st	Y, r18
    43c0:	c5 5b       	subi	r28, 0xB5	; 181
    43c2:	d0 40       	sbci	r29, 0x00	; 0
	data[18] = (pid.deadZone >> 8) & 0xFF;
    43c4:	ca 54       	subi	r28, 0x4A	; 74
    43c6:	df 4f       	sbci	r29, 0xFF	; 255
    43c8:	98 83       	st	Y, r25
    43ca:	c6 5b       	subi	r28, 0xB6	; 182
    43cc:	d0 40       	sbci	r29, 0x00	; 0
	data[19] = pid.deadZone & 0xFF;
    43ce:	c9 54       	subi	r28, 0x49	; 73
    43d0:	df 4f       	sbci	r29, 0xFF	; 255
    43d2:	88 83       	st	Y, r24
    43d4:	c7 5b       	subi	r28, 0xB7	; 183
    43d6:	d0 40       	sbci	r29, 0x00	; 0
	data[20] = (pid.minPos >> 24) & 0xFF;
    43d8:	cf 51       	subi	r28, 0x1F	; 31
    43da:	df 4f       	sbci	r29, 0xFF	; 255
    43dc:	88 81       	ld	r24, Y
    43de:	c1 5e       	subi	r28, 0xE1	; 225
    43e0:	d0 40       	sbci	r29, 0x00	; 0
    43e2:	ce 51       	subi	r28, 0x1E	; 30
    43e4:	df 4f       	sbci	r29, 0xFF	; 255
    43e6:	98 81       	ld	r25, Y
    43e8:	c2 5e       	subi	r28, 0xE2	; 226
    43ea:	d0 40       	sbci	r29, 0x00	; 0
    43ec:	cd 51       	subi	r28, 0x1D	; 29
    43ee:	df 4f       	sbci	r29, 0xFF	; 255
    43f0:	28 81       	ld	r18, Y
    43f2:	c3 5e       	subi	r28, 0xE3	; 227
    43f4:	d0 40       	sbci	r29, 0x00	; 0
    43f6:	cc 51       	subi	r28, 0x1C	; 28
    43f8:	df 4f       	sbci	r29, 0xFF	; 255
    43fa:	38 81       	ld	r19, Y
    43fc:	c4 5e       	subi	r28, 0xE4	; 228
    43fe:	d0 40       	sbci	r29, 0x00	; 0
    4400:	c8 54       	subi	r28, 0x48	; 72
    4402:	df 4f       	sbci	r29, 0xFF	; 255
    4404:	38 83       	st	Y, r19
    4406:	c8 5b       	subi	r28, 0xB8	; 184
    4408:	d0 40       	sbci	r29, 0x00	; 0
	data[21] = (pid.minPos >> 16) & 0xFF;
    440a:	c7 54       	subi	r28, 0x47	; 71
    440c:	df 4f       	sbci	r29, 0xFF	; 255
    440e:	28 83       	st	Y, r18
    4410:	c9 5b       	subi	r28, 0xB9	; 185
    4412:	d0 40       	sbci	r29, 0x00	; 0
	data[22] = (pid.minPos >> 8) & 0xFF;
    4414:	c6 54       	subi	r28, 0x46	; 70
    4416:	df 4f       	sbci	r29, 0xFF	; 255
    4418:	98 83       	st	Y, r25
    441a:	ca 5b       	subi	r28, 0xBA	; 186
    441c:	d0 40       	sbci	r29, 0x00	; 0
	data[23] = pid.minPos & 0xFF;
    441e:	c5 54       	subi	r28, 0x45	; 69
    4420:	df 4f       	sbci	r29, 0xFF	; 255
    4422:	88 83       	st	Y, r24
    4424:	cb 5b       	subi	r28, 0xBB	; 187
    4426:	d0 40       	sbci	r29, 0x00	; 0
	data[24] = (pid.maxPos >> 24) & 0xFF;
    4428:	cb 51       	subi	r28, 0x1B	; 27
    442a:	df 4f       	sbci	r29, 0xFF	; 255
    442c:	88 81       	ld	r24, Y
    442e:	c5 5e       	subi	r28, 0xE5	; 229
    4430:	d0 40       	sbci	r29, 0x00	; 0
    4432:	ca 51       	subi	r28, 0x1A	; 26
    4434:	df 4f       	sbci	r29, 0xFF	; 255
    4436:	98 81       	ld	r25, Y
    4438:	c6 5e       	subi	r28, 0xE6	; 230
    443a:	d0 40       	sbci	r29, 0x00	; 0
    443c:	c9 51       	subi	r28, 0x19	; 25
    443e:	df 4f       	sbci	r29, 0xFF	; 255
    4440:	28 81       	ld	r18, Y
    4442:	c7 5e       	subi	r28, 0xE7	; 231
    4444:	d0 40       	sbci	r29, 0x00	; 0
    4446:	c8 51       	subi	r28, 0x18	; 24
    4448:	df 4f       	sbci	r29, 0xFF	; 255
    444a:	38 81       	ld	r19, Y
    444c:	c8 5e       	subi	r28, 0xE8	; 232
    444e:	d0 40       	sbci	r29, 0x00	; 0
    4450:	c4 54       	subi	r28, 0x44	; 68
    4452:	df 4f       	sbci	r29, 0xFF	; 255
    4454:	38 83       	st	Y, r19
    4456:	cc 5b       	subi	r28, 0xBC	; 188
    4458:	d0 40       	sbci	r29, 0x00	; 0
	data[25] = (pid.maxPos >> 16) & 0xFF;
    445a:	c3 54       	subi	r28, 0x43	; 67
    445c:	df 4f       	sbci	r29, 0xFF	; 255
    445e:	28 83       	st	Y, r18
    4460:	cd 5b       	subi	r28, 0xBD	; 189
    4462:	d0 40       	sbci	r29, 0x00	; 0
	data[26] = (pid.maxPos >> 8) & 0xFF;
    4464:	c2 54       	subi	r28, 0x42	; 66
    4466:	df 4f       	sbci	r29, 0xFF	; 255
    4468:	98 83       	st	Y, r25
    446a:	ce 5b       	subi	r28, 0xBE	; 190
    446c:	d0 40       	sbci	r29, 0x00	; 0
	data[27] = pid.maxPos & 0xFF;
    446e:	c1 54       	subi	r28, 0x41	; 65
    4470:	df 4f       	sbci	r29, 0xFF	; 255
    4472:	88 83       	st	Y, r24
    4474:	cf 5b       	subi	r28, 0xBF	; 191
    4476:	d0 40       	sbci	r29, 0x00	; 0

	if (put_MOTOR(mtraddr, SETPID, data, 28) == ERROR) {
    4478:	2c e1       	ldi	r18, 0x1C	; 28
    447a:	ae 01       	movw	r20, r28
    447c:	4c 55       	subi	r20, 0x5C	; 92
    447e:	5f 4f       	sbci	r21, 0xFF	; 255
    4480:	6d e3       	ldi	r22, 0x3D	; 61
    4482:	80 2f       	mov	r24, r16
    4484:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <put_MOTOR>
    4488:	18 2f       	mov	r17, r24
    448a:	83 36       	cpi	r24, 0x63	; 99
    448c:	d9 f4       	brne	.+54     	; 0x44c4 <put_MOTOR_PID+0x2bc>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    448e:	0f 53       	subi	r16, 0x3F	; 63
    4490:	1f 92       	push	r1
    4492:	0f 93       	push	r16
    4494:	ce 01       	movw	r24, r28
    4496:	01 96       	adiw	r24, 0x01	; 1
    4498:	9f 93       	push	r25
    449a:	8f 93       	push	r24
    449c:	7e 01       	movw	r14, r28
    449e:	84 e5       	ldi	r24, 0x54	; 84
    44a0:	e8 0e       	add	r14, r24
    44a2:	f1 1c       	adc	r15, r1
    44a4:	ff 92       	push	r15
    44a6:	ef 92       	push	r14
    44a8:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
		printError(ERR_MTR, strbuf);
    44ac:	b7 01       	movw	r22, r14
    44ae:	86 e3       	ldi	r24, 0x36	; 54
    44b0:	91 e0       	ldi	r25, 0x01	; 1
    44b2:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    44b6:	0f 90       	pop	r0
    44b8:	0f 90       	pop	r0
    44ba:	0f 90       	pop	r0
    44bc:	0f 90       	pop	r0
    44be:	0f 90       	pop	r0
    44c0:	0f 90       	pop	r0
    44c2:	8b c0       	rjmp	.+278    	; 0x45da <put_MOTOR_PID+0x3d2>
	}

	data[0] = data[1] = data[2] = data[3] = 0;
    44c4:	c9 55       	subi	r28, 0x59	; 89
    44c6:	df 4f       	sbci	r29, 0xFF	; 255
    44c8:	18 82       	st	Y, r1
    44ca:	c7 5a       	subi	r28, 0xA7	; 167
    44cc:	d0 40       	sbci	r29, 0x00	; 0
    44ce:	ca 55       	subi	r28, 0x5A	; 90
    44d0:	df 4f       	sbci	r29, 0xFF	; 255
    44d2:	18 82       	st	Y, r1
    44d4:	c6 5a       	subi	r28, 0xA6	; 166
    44d6:	d0 40       	sbci	r29, 0x00	; 0
    44d8:	cb 55       	subi	r28, 0x5B	; 91
    44da:	df 4f       	sbci	r29, 0xFF	; 255
    44dc:	18 82       	st	Y, r1
    44de:	c5 5a       	subi	r28, 0xA5	; 165
    44e0:	d0 40       	sbci	r29, 0x00	; 0
    44e2:	cc 55       	subi	r28, 0x5C	; 92
    44e4:	df 4f       	sbci	r29, 0xFF	; 255
    44e6:	18 82       	st	Y, r1
    44e8:	c4 5a       	subi	r28, 0xA4	; 164
    44ea:	d0 40       	sbci	r29, 0x00	; 0
	data[4] = data[5] = data[6] = data[7] = 0;
    44ec:	c5 55       	subi	r28, 0x55	; 85
    44ee:	df 4f       	sbci	r29, 0xFF	; 255
    44f0:	18 82       	st	Y, r1
    44f2:	cb 5a       	subi	r28, 0xAB	; 171
    44f4:	d0 40       	sbci	r29, 0x00	; 0
    44f6:	c6 55       	subi	r28, 0x56	; 86
    44f8:	df 4f       	sbci	r29, 0xFF	; 255
    44fa:	18 82       	st	Y, r1
    44fc:	ca 5a       	subi	r28, 0xAA	; 170
    44fe:	d0 40       	sbci	r29, 0x00	; 0
    4500:	c7 55       	subi	r28, 0x57	; 87
    4502:	df 4f       	sbci	r29, 0xFF	; 255
    4504:	18 82       	st	Y, r1
    4506:	c9 5a       	subi	r28, 0xA9	; 169
    4508:	d0 40       	sbci	r29, 0x00	; 0
    450a:	c8 55       	subi	r28, 0x58	; 88
    450c:	df 4f       	sbci	r29, 0xFF	; 255
    450e:	18 82       	st	Y, r1
    4510:	c8 5a       	subi	r28, 0xA8	; 168
    4512:	d0 40       	sbci	r29, 0x00	; 0
	data[8] = data[9] = data[10] = data[11] = 0;
    4514:	c1 55       	subi	r28, 0x51	; 81
    4516:	df 4f       	sbci	r29, 0xFF	; 255
    4518:	18 82       	st	Y, r1
    451a:	cf 5a       	subi	r28, 0xAF	; 175
    451c:	d0 40       	sbci	r29, 0x00	; 0
    451e:	c2 55       	subi	r28, 0x52	; 82
    4520:	df 4f       	sbci	r29, 0xFF	; 255
    4522:	18 82       	st	Y, r1
    4524:	ce 5a       	subi	r28, 0xAE	; 174
    4526:	d0 40       	sbci	r29, 0x00	; 0
    4528:	c3 55       	subi	r28, 0x53	; 83
    452a:	df 4f       	sbci	r29, 0xFF	; 255
    452c:	18 82       	st	Y, r1
    452e:	cd 5a       	subi	r28, 0xAD	; 173
    4530:	d0 40       	sbci	r29, 0x00	; 0
    4532:	c4 55       	subi	r28, 0x54	; 84
    4534:	df 4f       	sbci	r29, 0xFF	; 255
    4536:	18 82       	st	Y, r1
    4538:	cc 5a       	subi	r28, 0xAC	; 172
    453a:	d0 40       	sbci	r29, 0x00	; 0
	data[12] = (pid.qpps >> 24) & 0xFF;
    453c:	c7 51       	subi	r28, 0x17	; 23
    453e:	df 4f       	sbci	r29, 0xFF	; 255
    4540:	88 81       	ld	r24, Y
    4542:	c9 5e       	subi	r28, 0xE9	; 233
    4544:	d0 40       	sbci	r29, 0x00	; 0
    4546:	c6 51       	subi	r28, 0x16	; 22
    4548:	df 4f       	sbci	r29, 0xFF	; 255
    454a:	98 81       	ld	r25, Y
    454c:	ca 5e       	subi	r28, 0xEA	; 234
    454e:	d0 40       	sbci	r29, 0x00	; 0
    4550:	c5 51       	subi	r28, 0x15	; 21
    4552:	df 4f       	sbci	r29, 0xFF	; 255
    4554:	28 81       	ld	r18, Y
    4556:	cb 5e       	subi	r28, 0xEB	; 235
    4558:	d0 40       	sbci	r29, 0x00	; 0
    455a:	c4 51       	subi	r28, 0x14	; 20
    455c:	df 4f       	sbci	r29, 0xFF	; 255
    455e:	38 81       	ld	r19, Y
    4560:	cc 5e       	subi	r28, 0xEC	; 236
    4562:	d0 40       	sbci	r29, 0x00	; 0
    4564:	c0 55       	subi	r28, 0x50	; 80
    4566:	df 4f       	sbci	r29, 0xFF	; 255
    4568:	38 83       	st	Y, r19
    456a:	c0 5b       	subi	r28, 0xB0	; 176
    456c:	d0 40       	sbci	r29, 0x00	; 0
	data[13] = (pid.qpps >> 16) & 0xFF;
    456e:	cf 54       	subi	r28, 0x4F	; 79
    4570:	df 4f       	sbci	r29, 0xFF	; 255
    4572:	28 83       	st	Y, r18
    4574:	c1 5b       	subi	r28, 0xB1	; 177
    4576:	d0 40       	sbci	r29, 0x00	; 0
	data[14] = (pid.qpps >> 8) & 0xFF;
    4578:	ce 54       	subi	r28, 0x4E	; 78
    457a:	df 4f       	sbci	r29, 0xFF	; 255
    457c:	98 83       	st	Y, r25
    457e:	c2 5b       	subi	r28, 0xB2	; 178
    4580:	d0 40       	sbci	r29, 0x00	; 0
	data[15] = pid.qpps & 0xFF;
    4582:	cd 54       	subi	r28, 0x4D	; 77
    4584:	df 4f       	sbci	r29, 0xFF	; 255
    4586:	88 83       	st	Y, r24
    4588:	c3 5b       	subi	r28, 0xB3	; 179
    458a:	d0 40       	sbci	r29, 0x00	; 0

	if (put_MOTOR(mtraddr, SETQPPS, data, 16) == ERROR) {
    458c:	20 e1       	ldi	r18, 0x10	; 16
    458e:	ae 01       	movw	r20, r28
    4590:	4c 55       	subi	r20, 0x5C	; 92
    4592:	5f 4f       	sbci	r21, 0xFF	; 255
    4594:	6c e1       	ldi	r22, 0x1C	; 28
    4596:	80 2f       	mov	r24, r16
    4598:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <put_MOTOR>
    459c:	18 2f       	mov	r17, r24
    459e:	83 36       	cpi	r24, 0x63	; 99
    45a0:	d9 f4       	brne	.+54     	; 0x45d8 <put_MOTOR_PID+0x3d0>
		sprintf(strbuf, fmt2, (char) (mtraddr-63));
    45a2:	0f 53       	subi	r16, 0x3F	; 63
    45a4:	1f 92       	push	r1
    45a6:	0f 93       	push	r16
    45a8:	ce 01       	movw	r24, r28
    45aa:	8a 96       	adiw	r24, 0x2a	; 42
    45ac:	9f 93       	push	r25
    45ae:	8f 93       	push	r24
    45b0:	7e 01       	movw	r14, r28
    45b2:	84 e5       	ldi	r24, 0x54	; 84
    45b4:	e8 0e       	add	r14, r24
    45b6:	f1 1c       	adc	r15, r1
    45b8:	ff 92       	push	r15
    45ba:	ef 92       	push	r14
    45bc:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
		printError(ERR_MTR, strbuf);
    45c0:	b7 01       	movw	r22, r14
    45c2:	86 e3       	ldi	r24, 0x36	; 54
    45c4:	91 e0       	ldi	r25, 0x01	; 1
    45c6:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    45ca:	0f 90       	pop	r0
    45cc:	0f 90       	pop	r0
    45ce:	0f 90       	pop	r0
    45d0:	0f 90       	pop	r0
    45d2:	0f 90       	pop	r0
    45d4:	0f 90       	pop	r0
    45d6:	01 c0       	rjmp	.+2      	; 0x45da <put_MOTOR_PID+0x3d2>
	}

	return(NOERROR);
    45d8:	10 e0       	ldi	r17, 0x00	; 0
}
    45da:	81 2f       	mov	r24, r17
    45dc:	c1 54       	subi	r28, 0x41	; 65
    45de:	df 4f       	sbci	r29, 0xFF	; 255
    45e0:	cd bf       	out	0x3d, r28	; 61
    45e2:	de bf       	out	0x3e, r29	; 62
    45e4:	df 91       	pop	r29
    45e6:	cf 91       	pop	r28
    45e8:	1f 91       	pop	r17
    45ea:	0f 91       	pop	r16
    45ec:	ff 90       	pop	r15
    45ee:	ef 90       	pop	r14
    45f0:	df 90       	pop	r13
    45f2:	cf 90       	pop	r12
    45f4:	bf 90       	pop	r11
    45f6:	af 90       	pop	r10
    45f8:	9f 90       	pop	r9
    45fa:	08 95       	ret

000045fc <put_MOTOR_S4MODE>:
	Returns:
		ERROR if the put_MOTOR routine fails
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t put_MOTOR_S4MODE(uint8_t mtraddr)
{
    45fc:	ef 92       	push	r14
    45fe:	ff 92       	push	r15
    4600:	0f 93       	push	r16
    4602:	1f 93       	push	r17
    4604:	cf 93       	push	r28
    4606:	df 93       	push	r29
    4608:	cd b7       	in	r28, 0x3d	; 61
    460a:	de b7       	in	r29, 0x3e	; 62
    460c:	cb 57       	subi	r28, 0x7B	; 123
    460e:	d1 09       	sbc	r29, r1
    4610:	cd bf       	out	0x3d, r28	; 61
    4612:	de bf       	out	0x3e, r29	; 62
    4614:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_S4MODE: put_MOTOR error on %c";
    4616:	88 e2       	ldi	r24, 0x28	; 40
    4618:	e5 e2       	ldi	r30, 0x25	; 37
    461a:	fe ea       	ldi	r31, 0xAE	; 174
    461c:	de 01       	movw	r26, r28
    461e:	11 96       	adiw	r26, 0x01	; 1
    4620:	01 90       	ld	r0, Z+
    4622:	0d 92       	st	X+, r0
    4624:	8a 95       	dec	r24
    4626:	e1 f7       	brne	.-8      	; 0x4620 <put_MOTOR_S4MODE+0x24>
	char strbuf[80];
	uint8_t data[3];

	data[0] = 0x00;
    4628:	ea 96       	adiw	r28, 0x3a	; 58
    462a:	1f ae       	std	Y+63, r1	; 0x3f
    462c:	ea 97       	sbiw	r28, 0x3a	; 58
	data[1] = S4MODE;	// 0x72, Home(User)/Limit(Fwd)
    462e:	82 e7       	ldi	r24, 0x72	; 114
    4630:	eb 96       	adiw	r28, 0x3b	; 59
    4632:	8f af       	std	Y+63, r24	; 0x3f
    4634:	eb 97       	sbiw	r28, 0x3b	; 59
	data[2] = 0x00;
    4636:	ec 96       	adiw	r28, 0x3c	; 60
    4638:	1f ae       	std	Y+63, r1	; 0x3f
    463a:	ec 97       	sbiw	r28, 0x3c	; 60

	if (put_MOTOR(mtraddr, SETS4MODE, data, 3) == ERROR) {
    463c:	23 e0       	ldi	r18, 0x03	; 3
    463e:	ae 01       	movw	r20, r28
    4640:	47 58       	subi	r20, 0x87	; 135
    4642:	5f 4f       	sbci	r21, 0xFF	; 255
    4644:	6a e4       	ldi	r22, 0x4A	; 74
    4646:	80 2f       	mov	r24, r16
    4648:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <put_MOTOR>
    464c:	18 2f       	mov	r17, r24
    464e:	83 36       	cpi	r24, 0x63	; 99
    4650:	d9 f4       	brne	.+54     	; 0x4688 <put_MOTOR_S4MODE+0x8c>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    4652:	0f 53       	subi	r16, 0x3F	; 63
    4654:	1f 92       	push	r1
    4656:	0f 93       	push	r16
    4658:	ce 01       	movw	r24, r28
    465a:	01 96       	adiw	r24, 0x01	; 1
    465c:	9f 93       	push	r25
    465e:	8f 93       	push	r24
    4660:	7e 01       	movw	r14, r28
    4662:	89 e2       	ldi	r24, 0x29	; 41
    4664:	e8 0e       	add	r14, r24
    4666:	f1 1c       	adc	r15, r1
    4668:	ff 92       	push	r15
    466a:	ef 92       	push	r14
    466c:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
		printError(ERR_MTR, strbuf);
    4670:	b7 01       	movw	r22, r14
    4672:	86 e3       	ldi	r24, 0x36	; 54
    4674:	91 e0       	ldi	r25, 0x01	; 1
    4676:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    467a:	0f 90       	pop	r0
    467c:	0f 90       	pop	r0
    467e:	0f 90       	pop	r0
    4680:	0f 90       	pop	r0
    4682:	0f 90       	pop	r0
    4684:	0f 90       	pop	r0
    4686:	01 c0       	rjmp	.+2      	; 0x468a <put_MOTOR_S4MODE+0x8e>
	}

	return(NOERROR);
    4688:	10 e0       	ldi	r17, 0x00	; 0

}
    468a:	81 2f       	mov	r24, r17
    468c:	c5 58       	subi	r28, 0x85	; 133
    468e:	df 4f       	sbci	r29, 0xFF	; 255
    4690:	cd bf       	out	0x3d, r28	; 61
    4692:	de bf       	out	0x3e, r29	; 62
    4694:	df 91       	pop	r29
    4696:	cf 91       	pop	r28
    4698:	1f 91       	pop	r17
    469a:	0f 91       	pop	r16
    469c:	ff 90       	pop	r15
    469e:	ef 90       	pop	r14
    46a0:	08 95       	ret

000046a2 <init_MOTORS>:
		NOERROR otherwise

ADD ERROR CHECKS?
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    46a2:	1f 93       	push	r17
    46a4:	cf 93       	push	r28
    46a6:	df 93       	push	r29
    46a8:	cd b7       	in	r28, 0x3d	; 61
    46aa:	de b7       	in	r29, 0x3e	; 62
    46ac:	a4 97       	sbiw	r28, 0x24	; 36
    46ae:	cd bf       	out	0x3d, r28	; 61
    46b0:	de bf       	out	0x3e, r29	; 62
    46b2:	2a e6       	ldi	r18, 0x6A	; 106
    46b4:	84 e0       	ldi	r24, 0x04	; 4
    46b6:	91 e0       	ldi	r25, 0x01	; 1
    46b8:	21 50       	subi	r18, 0x01	; 1
    46ba:	80 40       	sbci	r24, 0x00	; 0
    46bc:	90 40       	sbci	r25, 0x00	; 0
    46be:	e1 f7       	brne	.-8      	; 0x46b8 <init_MOTORS+0x16>
    46c0:	00 c0       	rjmp	.+0      	; 0x46c2 <init_MOTORS+0x20>
	int32_t encoderValue;
	PID pid;

	_delay_ms(100);

	pid.p = PID_P;
    46c2:	80 e0       	ldi	r24, 0x00	; 0
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	a0 e9       	ldi	r26, 0x90	; 144
    46c8:	b2 e4       	ldi	r27, 0x42	; 66
    46ca:	8d 83       	std	Y+5, r24	; 0x05
    46cc:	9e 83       	std	Y+6, r25	; 0x06
    46ce:	af 83       	std	Y+7, r26	; 0x07
    46d0:	b8 87       	std	Y+8, r27	; 0x08
	pid.i = PID_I;
    46d2:	80 e0       	ldi	r24, 0x00	; 0
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	a0 e8       	ldi	r26, 0x80	; 128
    46d8:	bf e3       	ldi	r27, 0x3F	; 63
    46da:	89 87       	std	Y+9, r24	; 0x09
    46dc:	9a 87       	std	Y+10, r25	; 0x0a
    46de:	ab 87       	std	Y+11, r26	; 0x0b
    46e0:	bc 87       	std	Y+12, r27	; 0x0c
	pid.d = PID_D;
    46e2:	80 e0       	ldi	r24, 0x00	; 0
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	ab e9       	ldi	r26, 0x9B	; 155
    46e8:	b3 e4       	ldi	r27, 0x43	; 67
    46ea:	8d 87       	std	Y+13, r24	; 0x0d
    46ec:	9e 87       	std	Y+14, r25	; 0x0e
    46ee:	af 87       	std	Y+15, r26	; 0x0f
    46f0:	b8 8b       	std	Y+16, r27	; 0x10
	pid.maxI = PID_MAXI;
    46f2:	80 e9       	ldi	r24, 0x90	; 144
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	a0 e0       	ldi	r26, 0x00	; 0
    46f8:	b0 e0       	ldi	r27, 0x00	; 0
    46fa:	89 8b       	std	Y+17, r24	; 0x11
    46fc:	9a 8b       	std	Y+18, r25	; 0x12
    46fe:	ab 8b       	std	Y+19, r26	; 0x13
    4700:	bc 8b       	std	Y+20, r27	; 0x14
	pid.deadZone = PID_DEADZONE;
    4702:	86 e0       	ldi	r24, 0x06	; 6
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	a0 e0       	ldi	r26, 0x00	; 0
    4708:	b0 e0       	ldi	r27, 0x00	; 0
    470a:	8d 8b       	std	Y+21, r24	; 0x15
    470c:	9e 8b       	std	Y+22, r25	; 0x16
    470e:	af 8b       	std	Y+23, r26	; 0x17
    4710:	b8 8f       	std	Y+24, r27	; 0x18
	pid.minPos = PID_MINPOS;
    4712:	88 ef       	ldi	r24, 0xF8	; 248
    4714:	93 eb       	ldi	r25, 0xB3	; 179
    4716:	ae ef       	ldi	r26, 0xFE	; 254
    4718:	bf ef       	ldi	r27, 0xFF	; 255
    471a:	89 8f       	std	Y+25, r24	; 0x19
    471c:	9a 8f       	std	Y+26, r25	; 0x1a
    471e:	ab 8f       	std	Y+27, r26	; 0x1b
    4720:	bc 8f       	std	Y+28, r27	; 0x1c
	pid.maxPos = PID_MAXPOS;
    4722:	80 e5       	ldi	r24, 0x50	; 80
    4724:	98 ef       	ldi	r25, 0xF8	; 248
    4726:	ac e0       	ldi	r26, 0x0C	; 12
    4728:	b0 e0       	ldi	r27, 0x00	; 0
    472a:	8d 8f       	std	Y+29, r24	; 0x1d
    472c:	9e 8f       	std	Y+30, r25	; 0x1e
    472e:	af 8f       	std	Y+31, r26	; 0x1f
    4730:	b8 a3       	std	Y+32, r27	; 0x20
	pid.qpps = PID_QPPS;
    4732:	80 eb       	ldi	r24, 0xB0	; 176
    4734:	96 e3       	ldi	r25, 0x36	; 54
    4736:	a0 e0       	ldi	r26, 0x00	; 0
    4738:	b0 e0       	ldi	r27, 0x00	; 0
    473a:	89 a3       	std	Y+33, r24	; 0x21
    473c:	9a a3       	std	Y+34, r25	; 0x22
    473e:	ab a3       	std	Y+35, r26	; 0x23
    4740:	bc a3       	std	Y+36, r27	; 0x24

	timerSAVEENCODER = 0;
    4742:	10 92 3a 2a 	sts	0x2A3A, r1	; 0x802a3a <timerSAVEENCODER>
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;
    4746:	8b e0       	ldi	r24, 0x0B	; 11
    4748:	80 93 39 2a 	sts	0x2A39, r24	; 0x802a39 <timeoutSAVEENCODER>

	for (controller = MOTOR_A; controller <= MOTOR_C; controller++) {
    474c:	10 e8       	ldi	r17, 0x80	; 128
    474e:	2c c0       	rjmp	.+88     	; 0x47a8 <init_MOTORS+0x106>
		get_FRAM_MOTOR_ENCODER(controller, &encoderValue);
    4750:	be 01       	movw	r22, r28
    4752:	6f 5f       	subi	r22, 0xFF	; 255
    4754:	7f 4f       	sbci	r23, 0xFF	; 255
    4756:	81 2f       	mov	r24, r17
    4758:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <get_FRAM_MOTOR_ENCODER>
		put_MOTOR_ENCODER(controller, encoderValue);
    475c:	49 81       	ldd	r20, Y+1	; 0x01
    475e:	5a 81       	ldd	r21, Y+2	; 0x02
    4760:	6b 81       	ldd	r22, Y+3	; 0x03
    4762:	7c 81       	ldd	r23, Y+4	; 0x04
    4764:	81 2f       	mov	r24, r17
    4766:	0e 94 3a 20 	call	0x4074	; 0x4074 <put_MOTOR_ENCODER>
		put_MOTOR_MAXCURRENT(controller, MAXCURRENT);
    476a:	40 ed       	ldi	r20, 0xD0	; 208
    476c:	57 e0       	ldi	r21, 0x07	; 7
    476e:	60 e0       	ldi	r22, 0x00	; 0
    4770:	70 e0       	ldi	r23, 0x00	; 0
    4772:	81 2f       	mov	r24, r17
    4774:	0e 94 8f 20 	call	0x411e	; 0x411e <put_MOTOR_MAXCURRENT>
		put_MOTOR_PID(controller, pid);
    4778:	8d b7       	in	r24, 0x3d	; 61
    477a:	9e b7       	in	r25, 0x3e	; 62
    477c:	80 97       	sbiw	r24, 0x20	; 32
    477e:	8d bf       	out	0x3d, r24	; 61
    4780:	9e bf       	out	0x3e, r25	; 62
    4782:	ad b7       	in	r26, 0x3d	; 61
    4784:	be b7       	in	r27, 0x3e	; 62
    4786:	11 96       	adiw	r26, 0x01	; 1
    4788:	80 e2       	ldi	r24, 0x20	; 32
    478a:	fe 01       	movw	r30, r28
    478c:	35 96       	adiw	r30, 0x05	; 5
    478e:	01 90       	ld	r0, Z+
    4790:	0d 92       	st	X+, r0
    4792:	8a 95       	dec	r24
    4794:	e1 f7       	brne	.-8      	; 0x478e <init_MOTORS+0xec>
    4796:	81 2f       	mov	r24, r17
    4798:	0e 94 04 21 	call	0x4208	; 0x4208 <put_MOTOR_PID>
		put_MOTOR_S4MODE(controller);
    479c:	cd bf       	out	0x3d, r28	; 61
    479e:	de bf       	out	0x3e, r29	; 62
    47a0:	81 2f       	mov	r24, r17
    47a2:	0e 94 fe 22 	call	0x45fc	; 0x45fc <put_MOTOR_S4MODE>
	pid.qpps = PID_QPPS;

	timerSAVEENCODER = 0;
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;

	for (controller = MOTOR_A; controller <= MOTOR_C; controller++) {
    47a6:	1f 5f       	subi	r17, 0xFF	; 255
    47a8:	13 38       	cpi	r17, 0x83	; 131
    47aa:	90 f2       	brcs	.-92     	; 0x4750 <init_MOTORS+0xae>
		put_MOTOR_S4MODE(controller);
	}

	return(NOERROR);

}
    47ac:	80 e0       	ldi	r24, 0x00	; 0
    47ae:	a4 96       	adiw	r28, 0x24	; 36
    47b0:	cd bf       	out	0x3d, r28	; 61
    47b2:	de bf       	out	0x3e, r29	; 62
    47b4:	df 91       	pop	r29
    47b6:	cf 91       	pop	r28
    47b8:	1f 91       	pop	r17
    47ba:	08 95       	ret

000047bc <stop_MOTOR>:
	return(NOERROR);

}

uint8_t stop_MOTOR(uint8_t mtraddr)
{
    47bc:	ef 92       	push	r14
    47be:	ff 92       	push	r15
    47c0:	0f 93       	push	r16
    47c2:	1f 93       	push	r17
    47c4:	cf 93       	push	r28
    47c6:	df 93       	push	r29
    47c8:	cd b7       	in	r28, 0x3d	; 61
    47ca:	de b7       	in	r29, 0x3e	; 62
    47cc:	c3 57       	subi	r28, 0x73	; 115
    47ce:	d1 09       	sbc	r29, r1
    47d0:	cd bf       	out	0x3d, r28	; 61
    47d2:	de bf       	out	0x3e, r29	; 62
    47d4:	08 2f       	mov	r16, r24

	char strbuf[80];
	uint8_t tbuf[1];
	const char fmt[] = "stop_MOTOR: put_MOTOR error on %c";
    47d6:	82 e2       	ldi	r24, 0x22	; 34
    47d8:	ed e4       	ldi	r30, 0x4D	; 77
    47da:	fe ea       	ldi	r31, 0xAE	; 174
    47dc:	de 01       	movw	r26, r28
    47de:	ae 5a       	subi	r26, 0xAE	; 174
    47e0:	bf 4f       	sbci	r27, 0xFF	; 255
    47e2:	01 90       	ld	r0, Z+
    47e4:	0d 92       	st	X+, r0
    47e6:	8a 95       	dec	r24
    47e8:	e1 f7       	brne	.-8      	; 0x47e2 <stop_MOTOR+0x26>

	tbuf[0] = 0;
    47ea:	62 96       	adiw	r28, 0x12	; 18
    47ec:	1f ae       	std	Y+63, r1	; 0x3f
    47ee:	62 97       	sbiw	r28, 0x12	; 18
	if (put_MOTOR(mtraddr, STOP, tbuf, 1) == ERROR) {
    47f0:	21 e0       	ldi	r18, 0x01	; 1
    47f2:	ae 01       	movw	r20, r28
    47f4:	4f 5a       	subi	r20, 0xAF	; 175
    47f6:	5f 4f       	sbci	r21, 0xFF	; 255
    47f8:	60 e0       	ldi	r22, 0x00	; 0
    47fa:	80 2f       	mov	r24, r16
    47fc:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <put_MOTOR>
    4800:	18 2f       	mov	r17, r24
    4802:	83 36       	cpi	r24, 0x63	; 99
    4804:	d9 f4       	brne	.+54     	; 0x483c <stop_MOTOR+0x80>
		sprintf(strbuf, fmt, (char) (mtraddr-63));
    4806:	0f 53       	subi	r16, 0x3F	; 63
    4808:	1f 92       	push	r1
    480a:	0f 93       	push	r16
    480c:	ce 01       	movw	r24, r28
    480e:	8e 5a       	subi	r24, 0xAE	; 174
    4810:	9f 4f       	sbci	r25, 0xFF	; 255
    4812:	9f 93       	push	r25
    4814:	8f 93       	push	r24
    4816:	81 55       	subi	r24, 0x51	; 81
    4818:	91 09       	sbc	r25, r1
    481a:	7c 01       	movw	r14, r24
    481c:	9f 93       	push	r25
    481e:	8f 93       	push	r24
    4820:	0e 94 60 31 	call	0x62c0	; 0x62c0 <sprintf>
		printError(ERR_MTR, strbuf);
    4824:	b7 01       	movw	r22, r14
    4826:	86 e3       	ldi	r24, 0x36	; 54
    4828:	91 e0       	ldi	r25, 0x01	; 1
    482a:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    482e:	0f 90       	pop	r0
    4830:	0f 90       	pop	r0
    4832:	0f 90       	pop	r0
    4834:	0f 90       	pop	r0
    4836:	0f 90       	pop	r0
    4838:	0f 90       	pop	r0
    483a:	01 c0       	rjmp	.+2      	; 0x483e <stop_MOTOR+0x82>
	}
	return(NOERROR);
    483c:	10 e0       	ldi	r17, 0x00	; 0

    483e:	81 2f       	mov	r24, r17
    4840:	cd 58       	subi	r28, 0x8D	; 141
    4842:	df 4f       	sbci	r29, 0xFF	; 255
    4844:	cd bf       	out	0x3d, r28	; 61
    4846:	de bf       	out	0x3e, r29	; 62
    4848:	df 91       	pop	r29
    484a:	cf 91       	pop	r28
    484c:	1f 91       	pop	r17
    484e:	0f 91       	pop	r16
    4850:	ff 90       	pop	r15
    4852:	ef 90       	pop	r14
    4854:	08 95       	ret

00004856 <move_MOTOR_CMD>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR_CMD(uint8_t cstack)
{
    4856:	cf 92       	push	r12
    4858:	df 92       	push	r13
    485a:	ef 92       	push	r14
    485c:	ff 92       	push	r15
    485e:	1f 93       	push	r17
    4860:	cf 93       	push	r28
    4862:	df 93       	push	r29
    4864:	00 d0       	rcall	.+0      	; 0x4866 <move_MOTOR_CMD+0x10>
    4866:	00 d0       	rcall	.+0      	; 0x4868 <move_MOTOR_CMD+0x12>
    4868:	cd b7       	in	r28, 0x3d	; 61
    486a:	de b7       	in	r29, 0x3e	; 62

	uint8_t motor, controller, retval;
	int32_t newPosition, currentPosition;

	motor = pcmd[cstack].cobject;
    486c:	e8 2e       	mov	r14, r24
    486e:	f1 2c       	mov	r15, r1
    4870:	84 e3       	ldi	r24, 0x34	; 52
    4872:	8e 9d       	mul	r24, r14
    4874:	f0 01       	movw	r30, r0
    4876:	8f 9d       	mul	r24, r15
    4878:	f0 0d       	add	r31, r0
    487a:	11 24       	eor	r1, r1
    487c:	e3 5f       	subi	r30, 0xF3	; 243
    487e:	f7 4d       	sbci	r31, 0xD7	; 215
    4880:	81 81       	ldd	r24, Z+1	; 0x01
	switch(motor) {
    4882:	88 35       	cpi	r24, 0x58	; 88
    4884:	61 f0       	breq	.+24     	; 0x489e <move_MOTOR_CMD+0x48>
    4886:	28 f4       	brcc	.+10     	; 0x4892 <move_MOTOR_CMD+0x3c>
    4888:	9f eb       	ldi	r25, 0xBF	; 191
    488a:	98 0f       	add	r25, r24
    488c:	93 30       	cpi	r25, 0x03	; 3
    488e:	60 f0       	brcs	.+24     	; 0x48a8 <move_MOTOR_CMD+0x52>
    4890:	24 c0       	rjmp	.+72     	; 0x48da <move_MOTOR_CMD+0x84>
    4892:	81 36       	cpi	r24, 0x61	; 97
    4894:	10 f1       	brcs	.+68     	; 0x48da <move_MOTOR_CMD+0x84>
    4896:	84 36       	cpi	r24, 0x64	; 100
    4898:	70 f0       	brcs	.+28     	; 0x48b6 <move_MOTOR_CMD+0x60>
    489a:	88 37       	cpi	r24, 0x78	; 120
    489c:	f1 f4       	brne	.+60     	; 0x48da <move_MOTOR_CMD+0x84>
		case 'x':
		case 'X':
			stop_MOTOR(128);
    489e:	80 e8       	ldi	r24, 0x80	; 128
    48a0:	0e 94 de 23 	call	0x47bc	; 0x47bc <stop_MOTOR>
//			stop_MOTOR(129);		// NEED TO AVOID BUFFER OVERWRITE?
//			stop_MOTOR(130);
			return(NOERROR);
    48a4:	10 e0       	ldi	r17, 0x00	; 0
    48a6:	56 c0       	rjmp	.+172    	; 0x4954 <move_MOTOR_CMD+0xfe>

		case 'A':
		case 'B':
		case 'C':
			controller = motor + 63;
    48a8:	1f e3       	ldi	r17, 0x3F	; 63
    48aa:	18 0f       	add	r17, r24
			currentPosition = 0;
    48ac:	19 82       	std	Y+1, r1	; 0x01
    48ae:	1a 82       	std	Y+2, r1	; 0x02
    48b0:	1b 82       	std	Y+3, r1	; 0x03
    48b2:	1c 82       	std	Y+4, r1	; 0x04
			break;
    48b4:	1a c0       	rjmp	.+52     	; 0x48ea <move_MOTOR_CMD+0x94>

		case 'a':
		case 'b':
		case 'c':
			controller = motor + 31;
    48b6:	1f e1       	ldi	r17, 0x1F	; 31
    48b8:	18 0f       	add	r17, r24
			retval = get_MOTOR_ENCODER(controller, &currentPosition);
    48ba:	be 01       	movw	r22, r28
    48bc:	6f 5f       	subi	r22, 0xFF	; 255
    48be:	7f 4f       	sbci	r23, 0xFF	; 255
    48c0:	81 2f       	mov	r24, r17
    48c2:	0e 94 c6 18 	call	0x318c	; 0x318c <get_MOTOR_ENCODER>
			if (retval == ERROR) {
    48c6:	83 36       	cpi	r24, 0x63	; 99
    48c8:	81 f4       	brne	.+32     	; 0x48ea <move_MOTOR_CMD+0x94>
				printError(ERR_MTR_ENC_VAL, "move_MOTOR_CMD: get_MOTOR_ENCODER error");
    48ca:	6f e6       	ldi	r22, 0x6F	; 111
    48cc:	7e ea       	ldi	r23, 0xAE	; 174
    48ce:	85 e3       	ldi	r24, 0x35	; 53
    48d0:	91 e0       	ldi	r25, 0x01	; 1
    48d2:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				return(ERROR);
    48d6:	13 e6       	ldi	r17, 0x63	; 99
    48d8:	3d c0       	rjmp	.+122    	; 0x4954 <move_MOTOR_CMD+0xfe>
			}
			break;

		default:
			printError(ERR_MTR, "move_MOTOR_CMD: unknown motor");
    48da:	67 e9       	ldi	r22, 0x97	; 151
    48dc:	7e ea       	ldi	r23, 0xAE	; 174
    48de:	86 e3       	ldi	r24, 0x36	; 54
    48e0:	91 e0       	ldi	r25, 0x01	; 1
    48e2:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			return(ERROR);
    48e6:	13 e6       	ldi	r17, 0x63	; 99
    48e8:	35 c0       	rjmp	.+106    	; 0x4954 <move_MOTOR_CMD+0xfe>
			break;	
	}

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    48ea:	84 e3       	ldi	r24, 0x34	; 52
    48ec:	8e 9d       	mul	r24, r14
    48ee:	f0 01       	movw	r30, r0
    48f0:	8f 9d       	mul	r24, r15
    48f2:	f0 0d       	add	r31, r0
    48f4:	11 24       	eor	r1, r1
    48f6:	e3 5f       	subi	r30, 0xF3	; 243
    48f8:	f7 4d       	sbci	r31, 0xD7	; 215
    48fa:	82 81       	ldd	r24, Z+2	; 0x02
    48fc:	88 23       	and	r24, r24
    48fe:	39 f1       	breq	.+78     	; 0x494e <move_MOTOR_CMD+0xf8>
		return(NOERROR);
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    4900:	24 e3       	ldi	r18, 0x34	; 52
    4902:	2e 9d       	mul	r18, r14
    4904:	c0 01       	movw	r24, r0
    4906:	2f 9d       	mul	r18, r15
    4908:	90 0d       	add	r25, r0
    490a:	11 24       	eor	r1, r1
    490c:	81 5f       	subi	r24, 0xF1	; 241
    490e:	97 4d       	sbci	r25, 0xD7	; 215
    4910:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <atol>
    4914:	9b 01       	movw	r18, r22
    4916:	ac 01       	movw	r20, r24
    4918:	ab e1       	ldi	r26, 0x1B	; 27
    491a:	b1 e0       	ldi	r27, 0x01	; 1
    491c:	0e 94 41 2f 	call	0x5e82	; 0x5e82 <__muluhisi3>
    4920:	c9 80       	ldd	r12, Y+1	; 0x01
    4922:	da 80       	ldd	r13, Y+2	; 0x02
    4924:	eb 80       	ldd	r14, Y+3	; 0x03
    4926:	fc 80       	ldd	r15, Y+4	; 0x04
    4928:	ab 01       	movw	r20, r22
    492a:	bc 01       	movw	r22, r24
    492c:	4c 0d       	add	r20, r12
    492e:	5d 1d       	adc	r21, r13
    4930:	6e 1d       	adc	r22, r14
    4932:	7f 1d       	adc	r23, r15

	if (move_MOTOR(controller, newPosition) == ERROR) {
    4934:	81 2f       	mov	r24, r17
    4936:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <move_MOTOR>
    493a:	18 2f       	mov	r17, r24
    493c:	83 36       	cpi	r24, 0x63	; 99
    493e:	49 f4       	brne	.+18     	; 0x4952 <move_MOTOR_CMD+0xfc>
		printError(ERR_MTR, "move_MOTOR_CMD: move_MOTOR error");
    4940:	65 eb       	ldi	r22, 0xB5	; 181
    4942:	7e ea       	ldi	r23, 0xAE	; 174
    4944:	86 e3       	ldi	r24, 0x36	; 54
    4946:	91 e0       	ldi	r25, 0x01	; 1
    4948:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    494c:	03 c0       	rjmp	.+6      	; 0x4954 <move_MOTOR_CMD+0xfe>
			return(ERROR);
			break;	
	}

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
		return(NOERROR);
    494e:	10 e0       	ldi	r17, 0x00	; 0
    4950:	01 c0       	rjmp	.+2      	; 0x4954 <move_MOTOR_CMD+0xfe>
	if (move_MOTOR(controller, newPosition) == ERROR) {
		printError(ERR_MTR, "move_MOTOR_CMD: move_MOTOR error");
		return(ERROR);
	}

	return(ERROR);
    4952:	13 e6       	ldi	r17, 0x63	; 99

}
    4954:	81 2f       	mov	r24, r17
    4956:	24 96       	adiw	r28, 0x04	; 4
    4958:	cd bf       	out	0x3d, r28	; 61
    495a:	de bf       	out	0x3e, r29	; 62
    495c:	df 91       	pop	r29
    495e:	cf 91       	pop	r28
    4960:	1f 91       	pop	r17
    4962:	ff 90       	pop	r15
    4964:	ef 90       	pop	r14
    4966:	df 90       	pop	r13
    4968:	cf 90       	pop	r12
    496a:	08 95       	ret

0000496c <set>:
	Returns:
		ERROR if an invalid object was requested.
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    496c:	1f 93       	push	r17
    496e:	cf 93       	push	r28
    4970:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	24 e3       	ldi	r18, 0x34	; 52
    4976:	28 9f       	mul	r18, r24
    4978:	f0 01       	movw	r30, r0
    497a:	29 9f       	mul	r18, r25
    497c:	f0 0d       	add	r31, r0
    497e:	11 24       	eor	r1, r1
    4980:	e3 5f       	subi	r30, 0xF3	; 243
    4982:	f7 4d       	sbci	r31, 0xD7	; 215
    4984:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    4986:	24 37       	cpi	r18, 0x74	; 116
    4988:	79 f5       	brne	.+94     	; 0x49e8 <set+0x7c>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    498a:	24 e3       	ldi	r18, 0x34	; 52
    498c:	28 9f       	mul	r18, r24
    498e:	e0 01       	movw	r28, r0
    4990:	29 9f       	mul	r18, r25
    4992:	d0 0d       	add	r29, r0
    4994:	11 24       	eor	r1, r1
    4996:	c1 5f       	subi	r28, 0xF1	; 241
    4998:	d7 4d       	sbci	r29, 0xD7	; 215
    499a:	fe 01       	movw	r30, r28
    499c:	01 90       	ld	r0, Z+
    499e:	00 20       	and	r0, r0
    49a0:	e9 f7       	brne	.-6      	; 0x499c <set+0x30>
    49a2:	31 97       	sbiw	r30, 0x01	; 1
    49a4:	ec 1b       	sub	r30, r28
    49a6:	fd 0b       	sbc	r31, r29
    49a8:	73 97       	sbiw	r30, 0x13	; 19
    49aa:	41 f0       	breq	.+16     	; 0x49bc <set+0x50>
				printError(ERR_SETTIME, "set: bad time format");
    49ac:	66 ed       	ldi	r22, 0xD6	; 214
    49ae:	7e ea       	ldi	r23, 0xAE	; 174
    49b0:	8a e5       	ldi	r24, 0x5A	; 90
    49b2:	92 e0       	ldi	r25, 0x02	; 2
    49b4:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				return(ERROR);
    49b8:	13 e6       	ldi	r17, 0x63	; 99
    49ba:	1d c0       	rjmp	.+58     	; 0x49f6 <set+0x8a>
			}
			if (put_time(pcmd[cstack].cvalue) == ERROR) {
    49bc:	ce 01       	movw	r24, r28
    49be:	0e 94 12 07 	call	0xe24	; 0xe24 <put_time>
    49c2:	18 2f       	mov	r17, r24
    49c4:	83 36       	cpi	r24, 0x63	; 99
    49c6:	39 f4       	brne	.+14     	; 0x49d6 <set+0x6a>
				printError(ERR_ISO, "set time: put_time error");
    49c8:	6b ee       	ldi	r22, 0xEB	; 235
    49ca:	7e ea       	ldi	r23, 0xAE	; 174
    49cc:	8b e5       	ldi	r24, 0x5B	; 91
    49ce:	92 e0       	ldi	r25, 0x02	; 2
    49d0:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
				return(ERROR);
    49d4:	10 c0       	rjmp	.+32     	; 0x49f6 <set+0x8a>
			}
			write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    49d6:	24 e1       	ldi	r18, 0x14	; 20
    49d8:	ae 01       	movw	r20, r28
    49da:	60 e0       	ldi	r22, 0x00	; 0
    49dc:	70 e0       	ldi	r23, 0x00	; 0
    49de:	80 e5       	ldi	r24, 0x50	; 80
    49e0:	0e 94 49 08 	call	0x1092	; 0x1092 <write_FRAM>

		default:
			printError(ERR_SET, "set what?");
			return(ERROR);
	}
	return(NOERROR);
    49e4:	10 e0       	ldi	r17, 0x00	; 0
    49e6:	07 c0       	rjmp	.+14     	; 0x49f6 <set+0x8a>
			}
			write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			printError(ERR_SET, "set what?");
    49e8:	64 e0       	ldi	r22, 0x04	; 4
    49ea:	7f ea       	ldi	r23, 0xAF	; 175
    49ec:	89 e5       	ldi	r24, 0x59	; 89
    49ee:	92 e0       	ldi	r25, 0x02	; 2
    49f0:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
			return(ERROR);
    49f4:	13 e6       	ldi	r17, 0x63	; 99
	}
	return(NOERROR);
}
    49f6:	81 2f       	mov	r24, r17
    49f8:	df 91       	pop	r29
    49fa:	cf 91       	pop	r28
    49fc:	1f 91       	pop	r17
    49fe:	08 95       	ret

00004a00 <get_temperature>:
	point for the actual devices.

	The signal is 1.5E-3 mV/K with a 1500 kOhm dropping resistor.
------------------------------------------------------------------------------*/
float get_temperature(uint8_t sensor)
{
    4a00:	cf 93       	push	r28
    4a02:	df 93       	push	r29
    4a04:	00 d0       	rcall	.+0      	; 0x4a06 <get_temperature+0x6>
    4a06:	00 d0       	rcall	.+0      	; 0x4a08 <get_temperature+0x8>
    4a08:	cd b7       	in	r28, 0x3d	; 61
    4a0a:	de b7       	in	r29, 0x3e	; 62

	float temperature;

	switch (sensor) {
    4a0c:	83 30       	cpi	r24, 0x03	; 3
    4a0e:	18 f0       	brcs	.+6      	; 0x4a16 <get_temperature+0x16>
    4a10:	83 30       	cpi	r24, 0x03	; 3
    4a12:	39 f0       	breq	.+14     	; 0x4a22 <get_temperature+0x22>
    4a14:	0b c0       	rjmp	.+22     	; 0x4a2c <get_temperature+0x2c>
		case 0:
		case 1:
		case 2:
			read_AD590(sensor, &temperature);
    4a16:	be 01       	movw	r22, r28
    4a18:	6f 5f       	subi	r22, 0xFF	; 255
    4a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a1c:	0e 94 47 01 	call	0x28e	; 0x28e <read_AD590>
			break;
    4a20:	0d c0       	rjmp	.+26     	; 0x4a3c <get_temperature+0x3c>

		case 3:
			read_MCP9808(&temperature);
    4a22:	ce 01       	movw	r24, r28
    4a24:	01 96       	adiw	r24, 0x01	; 1
    4a26:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <read_MCP9808>
			break;
    4a2a:	08 c0       	rjmp	.+16     	; 0x4a3c <get_temperature+0x3c>

		default:
			temperature = BADFLOAT;
    4a2c:	80 e0       	ldi	r24, 0x00	; 0
    4a2e:	90 e8       	ldi	r25, 0x80	; 128
    4a30:	a6 e2       	ldi	r26, 0x26	; 38
    4a32:	b4 ec       	ldi	r27, 0xC4	; 196
    4a34:	89 83       	std	Y+1, r24	; 0x01
    4a36:	9a 83       	std	Y+2, r25	; 0x02
    4a38:	ab 83       	std	Y+3, r26	; 0x03
    4a3a:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}

	if (temperature < -50.0) {
    4a3c:	69 81       	ldd	r22, Y+1	; 0x01
    4a3e:	7a 81       	ldd	r23, Y+2	; 0x02
    4a40:	8b 81       	ldd	r24, Y+3	; 0x03
    4a42:	9c 81       	ldd	r25, Y+4	; 0x04
    4a44:	20 e0       	ldi	r18, 0x00	; 0
    4a46:	30 e0       	ldi	r19, 0x00	; 0
    4a48:	48 e4       	ldi	r20, 0x48	; 72
    4a4a:	52 ec       	ldi	r21, 0xC2	; 194
    4a4c:	0e 94 ba 29 	call	0x5374	; 0x5374 <__cmpsf2>
    4a50:	88 23       	and	r24, r24
    4a52:	44 f4       	brge	.+16     	; 0x4a64 <get_temperature+0x64>
		temperature = BADFLOAT;
    4a54:	80 e0       	ldi	r24, 0x00	; 0
    4a56:	90 e8       	ldi	r25, 0x80	; 128
    4a58:	a6 e2       	ldi	r26, 0x26	; 38
    4a5a:	b4 ec       	ldi	r27, 0xC4	; 196
    4a5c:	89 83       	std	Y+1, r24	; 0x01
    4a5e:	9a 83       	std	Y+2, r25	; 0x02
    4a60:	ab 83       	std	Y+3, r26	; 0x03
    4a62:	bc 83       	std	Y+4, r27	; 0x04
	}

	return(temperature);
    4a64:	69 81       	ldd	r22, Y+1	; 0x01
    4a66:	7a 81       	ldd	r23, Y+2	; 0x02
    4a68:	8b 81       	ldd	r24, Y+3	; 0x03
    4a6a:	9c 81       	ldd	r25, Y+4	; 0x04

}
    4a6c:	24 96       	adiw	r28, 0x04	; 4
    4a6e:	cd bf       	out	0x3d, r28	; 61
    4a70:	de bf       	out	0x3e, r29	; 62
    4a72:	df 91       	pop	r29
    4a74:	cf 91       	pop	r28
    4a76:	08 95       	ret

00004a78 <testroutine>:
	get_MOTOR_MAXCURRENT(128, &value);
	get_MOTOR_MAXCURRENT(129, &value);
	get_MOTOR_MAXCURRENT(130, &value);
---*/

	stop_MOTOR(128);
    4a78:	80 e8       	ldi	r24, 0x80	; 128
    4a7a:	0e 94 de 23 	call	0x47bc	; 0x47bc <stop_MOTOR>
    4a7e:	08 95       	ret

00004a80 <init_RTC>:
	Turn off the TCB0 timer
------------------------------------------------------------------------------*/
void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    4a80:	ac 01       	movw	r20, r24
    4a82:	e0 e6       	ldi	r30, 0x60	; 96
    4a84:	f0 e0       	ldi	r31, 0x00	; 0
    4a86:	94 8d       	ldd	r25, Z+28	; 0x1c
    4a88:	9e 7f       	andi	r25, 0xFE	; 254
    4a8a:	88 ed       	ldi	r24, 0xD8	; 216
    4a8c:	84 bf       	out	0x34, r24	; 52
    4a8e:	94 8f       	std	Z+28, r25	; 0x1c
    4a90:	01 c0       	rjmp	.+2      	; 0x4a94 <init_RTC+0x14>
    4a92:	00 00       	nop
    4a94:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    4a98:	96 fd       	sbrc	r25, 6
    4a9a:	fb cf       	rjmp	.-10     	; 0x4a92 <init_RTC+0x12>
    4a9c:	e0 e6       	ldi	r30, 0x60	; 96
    4a9e:	f0 e0       	ldi	r31, 0x00	; 0
    4aa0:	94 8d       	ldd	r25, Z+28	; 0x1c
    4aa2:	9b 7f       	andi	r25, 0xFB	; 251
    4aa4:	28 ed       	ldi	r18, 0xD8	; 216
    4aa6:	24 bf       	out	0x34, r18	; 52
    4aa8:	94 8f       	std	Z+28, r25	; 0x1c
    4aaa:	94 8d       	ldd	r25, Z+28	; 0x1c
    4aac:	91 60       	ori	r25, 0x01	; 1
    4aae:	24 bf       	out	0x34, r18	; 52
    4ab0:	94 8f       	std	Z+28, r25	; 0x1c
    4ab2:	01 c0       	rjmp	.+2      	; 0x4ab6 <init_RTC+0x36>
    4ab4:	00 00       	nop
    4ab6:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    4aba:	91 11       	cpse	r25, r1
    4abc:	fb cf       	rjmp	.-10     	; 0x4ab4 <init_RTC+0x34>
    4abe:	e0 e4       	ldi	r30, 0x40	; 64
    4ac0:	f1 e0       	ldi	r31, 0x01	; 1
    4ac2:	42 87       	std	Z+10, r20	; 0x0a
    4ac4:	53 87       	std	Z+11, r21	; 0x0b
    4ac6:	82 e0       	ldi	r24, 0x02	; 2
    4ac8:	87 83       	std	Z+7, r24	; 0x07
    4aca:	85 81       	ldd	r24, Z+5	; 0x05
    4acc:	81 60       	ori	r24, 0x01	; 1
    4ace:	85 83       	std	Z+5, r24	; 0x05
    4ad0:	81 eb       	ldi	r24, 0xB1	; 177
    4ad2:	80 83       	st	Z, r24
    4ad4:	82 81       	ldd	r24, Z+2	; 0x02
    4ad6:	81 60       	ori	r24, 0x01	; 1
    4ad8:	82 83       	std	Z+2, r24	; 0x02
    4ada:	08 95       	ret

00004adc <__vector_3>:
    4adc:	1f 92       	push	r1
    4ade:	0f 92       	push	r0
    4ae0:	0f b6       	in	r0, 0x3f	; 63
    4ae2:	0f 92       	push	r0
    4ae4:	11 24       	eor	r1, r1
    4ae6:	8f 93       	push	r24
    4ae8:	9f 93       	push	r25
    4aea:	81 e0       	ldi	r24, 0x01	; 1
    4aec:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>
    4af0:	80 91 16 2a 	lds	r24, 0x2A16	; 0x802a16 <timerOLED>
    4af4:	90 91 17 2a 	lds	r25, 0x2A17	; 0x802a17 <timerOLED+0x1>
    4af8:	01 96       	adiw	r24, 0x01	; 1
    4afa:	80 93 16 2a 	sts	0x2A16, r24	; 0x802a16 <timerOLED>
    4afe:	90 93 17 2a 	sts	0x2A17, r25	; 0x802a17 <timerOLED+0x1>
    4b02:	80 e2       	ldi	r24, 0x20	; 32
    4b04:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>
    4b08:	80 91 3a 2a 	lds	r24, 0x2A3A	; 0x802a3a <timerSAVEENCODER>
    4b0c:	8f 5f       	subi	r24, 0xFF	; 255
    4b0e:	80 93 3a 2a 	sts	0x2A3A, r24	; 0x802a3a <timerSAVEENCODER>
    4b12:	9f 91       	pop	r25
    4b14:	8f 91       	pop	r24
    4b16:	0f 90       	pop	r0
    4b18:	0f be       	out	0x3f, r0	; 63
    4b1a:	0f 90       	pop	r0
    4b1c:	1f 90       	pop	r1
    4b1e:	18 95       	reti

00004b20 <start_TCB0>:
    4b20:	25 e0       	ldi	r18, 0x05	; 5
    4b22:	3d e0       	ldi	r19, 0x0D	; 13
    4b24:	ac 01       	movw	r20, r24
    4b26:	42 9f       	mul	r20, r18
    4b28:	c0 01       	movw	r24, r0
    4b2a:	43 9f       	mul	r20, r19
    4b2c:	90 0d       	add	r25, r0
    4b2e:	52 9f       	mul	r21, r18
    4b30:	90 0d       	add	r25, r0
    4b32:	11 24       	eor	r1, r1
    4b34:	e0 e8       	ldi	r30, 0x80	; 128
    4b36:	fa e0       	ldi	r31, 0x0A	; 10
    4b38:	84 87       	std	Z+12, r24	; 0x0c
    4b3a:	95 87       	std	Z+13, r25	; 0x0d
    4b3c:	81 e0       	ldi	r24, 0x01	; 1
    4b3e:	85 83       	std	Z+5, r24	; 0x05
    4b40:	80 83       	st	Z, r24
    4b42:	08 95       	ret

00004b44 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    4b44:	1f 92       	push	r1
    4b46:	0f 92       	push	r0
    4b48:	0f b6       	in	r0, 0x3f	; 63
    4b4a:	0f 92       	push	r0
    4b4c:	11 24       	eor	r1, r1
    4b4e:	8f 93       	push	r24
    4b50:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    4b52:	81 e0       	ldi	r24, 0x01	; 1
    4b54:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	USART0_ticks++;
    4b58:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    4b5c:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    4b60:	01 96       	adiw	r24, 0x01	; 1
    4b62:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <USART0_ticks>
    4b66:	90 93 04 28 	sts	0x2804, r25	; 0x802804 <USART0_ticks+0x1>
	USART1_ticks++;
    4b6a:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    4b6e:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    4b72:	01 96       	adiw	r24, 0x01	; 1
    4b74:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <USART1_ticks>
    4b78:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <USART1_ticks+0x1>
	USART3_ticks++;
    4b7c:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <USART3_ticks>
    4b80:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <USART3_ticks+0x1>
    4b84:	01 96       	adiw	r24, 0x01	; 1
    4b86:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <USART3_ticks>
    4b8a:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <USART3_ticks+0x1>
	TWI_ticks++;
    4b8e:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4b92:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4b96:	01 96       	adiw	r24, 0x01	; 1
    4b98:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <TWI_ticks>
    4b9c:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <TWI_ticks+0x1>

    4ba0:	9f 91       	pop	r25
    4ba2:	8f 91       	pop	r24
    4ba4:	0f 90       	pop	r0
    4ba6:	0f be       	out	0x3f, r0	; 63
    4ba8:	0f 90       	pop	r0
    4baa:	1f 90       	pop	r1
    4bac:	18 95       	reti

00004bae <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    4bae:	e0 ea       	ldi	r30, 0xA0	; 160
    4bb0:	f8 e0       	ldi	r31, 0x08	; 8
    4bb2:	8b e0       	ldi	r24, 0x0B	; 11
    4bb4:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    4bb6:	83 81       	ldd	r24, Z+3	; 0x03
    4bb8:	81 60       	ori	r24, 0x01	; 1
    4bba:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    4bbc:	85 81       	ldd	r24, Z+5	; 0x05
    4bbe:	81 60       	ori	r24, 0x01	; 1
    4bc0:	85 83       	std	Z+5, r24	; 0x05
    4bc2:	08 95       	ret

00004bc4 <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    4bc4:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4bc8:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    4bcc:	0f c0       	rjmp	.+30     	; 0x4bec <read_TWI+0x28>
		asm("nop");
    4bce:	00 00       	nop
		if (TWI_ticks > 50) {					// Typically 0 ticks needed
    4bd0:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4bd4:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4bd8:	c3 97       	sbiw	r24, 0x33	; 51
    4bda:	40 f0       	brcs	.+16     	; 0x4bec <read_TWI+0x28>
			printError(ERR_TWI, "read_TWI timeout");
    4bdc:	6e e0       	ldi	r22, 0x0E	; 14
    4bde:	7f ea       	ldi	r23, 0xAF	; 175
    4be0:	81 e9       	ldi	r24, 0x91	; 145
    4be2:	91 e0       	ldi	r25, 0x01	; 1
    4be4:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
//			stop_TCB0();
			return(0xFF);
    4be8:	8f ef       	ldi	r24, 0xFF	; 255
    4bea:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    4bec:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4bf0:	88 23       	and	r24, r24
    4bf2:	6c f7       	brge	.-38     	; 0x4bce <read_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK
    4bf4:	e0 ea       	ldi	r30, 0xA0	; 160
    4bf6:	f8 e0       	ldi	r31, 0x08	; 8
    4bf8:	84 81       	ldd	r24, Z+4	; 0x04
    4bfa:	8b 7f       	andi	r24, 0xFB	; 251
    4bfc:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;							// Next read
    4bfe:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    4c00:	94 81       	ldd	r25, Z+4	; 0x04
    4c02:	92 60       	ori	r25, 0x02	; 2
    4c04:	94 83       	std	Z+4, r25	; 0x04

	return(data);

}
    4c06:	08 95       	ret

00004c08 <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    4c08:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4c0c:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    4c10:	0f c0       	rjmp	.+30     	; 0x4c30 <readlast_TWI+0x28>
		asm("nop");
    4c12:	00 00       	nop
		if (TWI_ticks > 50) {						// Typically 0 ticks needed
    4c14:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4c18:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4c1c:	c3 97       	sbiw	r24, 0x33	; 51
    4c1e:	40 f0       	brcs	.+16     	; 0x4c30 <readlast_TWI+0x28>
			printError(ERR_TWI, "readlast timeout");
    4c20:	6f e1       	ldi	r22, 0x1F	; 31
    4c22:	7f ea       	ldi	r23, 0xAF	; 175
    4c24:	81 e9       	ldi	r24, 0x91	; 145
    4c26:	91 e0       	ldi	r25, 0x01	; 1
    4c28:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
//			stop_TCB0();
			return(0xFF);
    4c2c:	8f ef       	ldi	r24, 0xFF	; 255
    4c2e:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    4c30:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4c34:	88 23       	and	r24, r24
    4c36:	6c f7       	brge	.-38     	; 0x4c12 <readlast_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    4c38:	e0 ea       	ldi	r30, 0xA0	; 160
    4c3a:	f8 e0       	ldi	r31, 0x08	; 8
    4c3c:	84 81       	ldd	r24, Z+4	; 0x04
    4c3e:	84 60       	ori	r24, 0x04	; 4
    4c40:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    4c42:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    4c44:	08 95       	ret

00004c46 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    4c46:	61 30       	cpi	r22, 0x01	; 1
    4c48:	39 f4       	brne	.+14     	; 0x4c58 <start_TWI+0x12>
		TWI0.MADDR = ((addr << 1) | 0x01);
    4c4a:	90 e0       	ldi	r25, 0x00	; 0
    4c4c:	88 0f       	add	r24, r24
    4c4e:	99 1f       	adc	r25, r25
    4c50:	81 60       	ori	r24, 0x01	; 1
    4c52:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    4c56:	03 c0       	rjmp	.+6      	; 0x4c5e <start_TWI+0x18>
	} else {
		TWI0.MADDR = (addr << 1);
    4c58:	88 0f       	add	r24, r24
    4c5a:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

	TWI_ticks = 0;
    4c5e:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4c62:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    4c66:	0f c0       	rjmp	.+30     	; 0x4c86 <start_TWI+0x40>
		asm("nop");								// Wait for addr transmission
    4c68:	00 00       	nop
		if (TWI_ticks > 50) {
    4c6a:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4c6e:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4c72:	c3 97       	sbiw	r24, 0x33	; 51
    4c74:	40 f0       	brcs	.+16     	; 0x4c86 <start_TWI+0x40>
			printError(ERR_TWI, "TWI start timeout");
    4c76:	60 e3       	ldi	r22, 0x30	; 48
    4c78:	7f ea       	ldi	r23, 0xAF	; 175
    4c7a:	81 e9       	ldi	r24, 0x91	; 145
    4c7c:	91 e0       	ldi	r25, 0x01	; 1
    4c7e:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
//			stop_TCB0();
			return(ERROR);
    4c82:	83 e6       	ldi	r24, 0x63	; 99
    4c84:	08 95       	ret
		TWI0.MADDR = (addr << 1);
	}

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    4c86:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4c8a:	80 7c       	andi	r24, 0xC0	; 192
    4c8c:	69 f3       	breq	.-38     	; 0x4c68 <start_TWI+0x22>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    4c8e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4c92:	82 ff       	sbrs	r24, 2
    4c94:	08 c0       	rjmp	.+16     	; 0x4ca6 <start_TWI+0x60>
		printError(ERR_TWI, "TWI bus");
    4c96:	62 e4       	ldi	r22, 0x42	; 66
    4c98:	7f ea       	ldi	r23, 0xAF	; 175
    4c9a:	81 e9       	ldi	r24, 0x91	; 145
    4c9c:	91 e0       	ldi	r25, 0x01	; 1
    4c9e:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    4ca2:	83 e6       	ldi	r24, 0x63	; 99
    4ca4:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    4ca6:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4caa:	83 ff       	sbrs	r24, 3
    4cac:	08 c0       	rjmp	.+16     	; 0x4cbe <start_TWI+0x78>
		printError(ERR_TWI, "TWI arbitration");
    4cae:	6a e4       	ldi	r22, 0x4A	; 74
    4cb0:	7f ea       	ldi	r23, 0xAF	; 175
    4cb2:	81 e9       	ldi	r24, 0x91	; 145
    4cb4:	91 e0       	ldi	r25, 0x01	; 1
    4cb6:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    4cba:	83 e6       	ldi	r24, 0x63	; 99
    4cbc:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    4cbe:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4cc2:	89 2f       	mov	r24, r25
    4cc4:	80 71       	andi	r24, 0x10	; 16
    4cc6:	94 ff       	sbrs	r25, 4
    4cc8:	07 c0       	rjmp	.+14     	; 0x4cd8 <start_TWI+0x92>
		printError(ERR_TWI, "TWI no device responded");
    4cca:	6a e5       	ldi	r22, 0x5A	; 90
    4ccc:	7f ea       	ldi	r23, 0xAF	; 175
    4cce:	81 e9       	ldi	r24, 0x91	; 145
    4cd0:	91 e0       	ldi	r25, 0x01	; 1
    4cd2:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    4cd6:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    4cd8:	08 95       	ret

00004cda <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    4cda:	87 e0       	ldi	r24, 0x07	; 7
    4cdc:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    4ce0:	08 95       	ret

00004ce2 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
    4ce2:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4ce6:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    4cea:	10 c0       	rjmp	.+32     	; 0x4d0c <write_TWI+0x2a>
		asm("nop");
    4cec:	00 00       	nop
		if (TWI_ticks > 50) {
    4cee:	20 91 05 28 	lds	r18, 0x2805	; 0x802805 <TWI_ticks>
    4cf2:	30 91 06 28 	lds	r19, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4cf6:	23 33       	cpi	r18, 0x33	; 51
    4cf8:	31 05       	cpc	r19, r1
    4cfa:	40 f0       	brcs	.+16     	; 0x4d0c <write_TWI+0x2a>
			printError(ERR_TWI, "write_TWI error1");
    4cfc:	62 e7       	ldi	r22, 0x72	; 114
    4cfe:	7f ea       	ldi	r23, 0xAF	; 175
    4d00:	81 e9       	ldi	r24, 0x91	; 145
    4d02:	91 e0       	ldi	r25, 0x01	; 1
    4d04:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
//			stop_TCB0();
			return(ERROR);
    4d08:	83 e6       	ldi	r24, 0x63	; 99
    4d0a:	08 95       	ret
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    4d0c:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4d10:	96 ff       	sbrs	r25, 6
    4d12:	ec cf       	rjmp	.-40     	; 0x4cec <write_TWI+0xa>
			return(ERROR);
		}
	}
//	stop_TCB0();

	TWI0.MDATA = data;
    4d14:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	TWI_ticks = 0;
    4d18:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    4d1c:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    4d20:	0f c0       	rjmp	.+30     	; 0x4d40 <write_TWI+0x5e>
		asm("nop");
    4d22:	00 00       	nop
		if (TWI_ticks > 50) {
    4d24:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    4d28:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    4d2c:	c3 97       	sbiw	r24, 0x33	; 51
    4d2e:	40 f0       	brcs	.+16     	; 0x4d40 <write_TWI+0x5e>
			printError(ERR_TWI, "write_TWI error2");
    4d30:	63 e8       	ldi	r22, 0x83	; 131
    4d32:	7f ea       	ldi	r23, 0xAF	; 175
    4d34:	81 e9       	ldi	r24, 0x91	; 145
    4d36:	91 e0       	ldi	r25, 0x01	; 1
    4d38:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
//			stop_TCB0();
			return(ERROR);
    4d3c:	83 e6       	ldi	r24, 0x63	; 99
    4d3e:	08 95       	ret

	TWI0.MDATA = data;

	TWI_ticks = 0;
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    4d40:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4d44:	86 ff       	sbrs	r24, 6
    4d46:	ed cf       	rjmp	.-38     	; 0x4d22 <write_TWI+0x40>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    4d48:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    4d4c:	89 2f       	mov	r24, r25
    4d4e:	80 71       	andi	r24, 0x10	; 16
    4d50:	94 ff       	sbrs	r25, 4
    4d52:	07 c0       	rjmp	.+14     	; 0x4d62 <write_TWI+0x80>
		printError(ERR_TWI, "ACK not received");
    4d54:	64 e9       	ldi	r22, 0x94	; 148
    4d56:	7f ea       	ldi	r23, 0xAF	; 175
    4d58:	81 e9       	ldi	r24, 0x91	; 145
    4d5a:	91 e0       	ldi	r25, 0x01	; 1
    4d5c:	0e 94 93 07 	call	0xf26	; 0xf26 <printError>
		return(ERROR);
    4d60:	83 e6       	ldi	r24, 0x63	; 99
	} else {
		return(NOERROR);
	}

}
    4d62:	08 95       	ret

00004d64 <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    4d64:	e0 e0       	ldi	r30, 0x00	; 0
    4d66:	f4 e0       	ldi	r31, 0x04	; 4
    4d68:	81 e0       	ldi	r24, 0x01	; 1
    4d6a:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    4d6c:	81 83       	std	Z+1, r24	; 0x01
//	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    4d6e:	e0 e0       	ldi	r30, 0x00	; 0
    4d70:	f8 e0       	ldi	r31, 0x08	; 8
    4d72:	24 e7       	ldi	r18, 0x74	; 116
    4d74:	30 e0       	ldi	r19, 0x00	; 0
    4d76:	20 87       	std	Z+8, r18	; 0x08
    4d78:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    4d7a:	95 81       	ldd	r25, Z+5	; 0x05
    4d7c:	90 68       	ori	r25, 0x80	; 128
    4d7e:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    4d80:	96 81       	ldd	r25, Z+6	; 0x06
    4d82:	90 64       	ori	r25, 0x40	; 64
    4d84:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    4d86:	96 81       	ldd	r25, Z+6	; 0x06
    4d88:	90 68       	ori	r25, 0x80	; 128
    4d8a:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;					// Set up send/receive buffers
    4d8c:	10 92 41 2f 	sts	0x2F41, r1	; 0x802f41 <send0_buf+0xfe>
	send0_buf.tail = 0;
    4d90:	10 92 42 2f 	sts	0x2F42, r1	; 0x802f42 <send0_buf+0xff>
	send0_buf.done = YES;
    4d94:	80 93 46 2f 	sts	0x2F46, r24	; 0x802f46 <send0_buf+0x103>
	recv0_buf.head = 0;
    4d98:	10 92 3d 2e 	sts	0x2E3D, r1	; 0x802e3d <recv0_buf+0xfe>
	recv0_buf.tail = 0;
    4d9c:	10 92 3e 2e 	sts	0x2E3E, r1	; 0x802e3e <recv0_buf+0xff>
	recv0_buf.data[0] = '\0';
    4da0:	10 92 3f 2d 	sts	0x2D3F, r1	; 0x802d3f <recv0_buf>
	recv0_buf.length = 0;
    4da4:	10 92 40 2e 	sts	0x2E40, r1	; 0x802e40 <recv0_buf+0x101>
	recv0_buf.done = NO;
    4da8:	10 92 42 2e 	sts	0x2E42, r1	; 0x802e42 <recv0_buf+0x103>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    4dac:	e0 e4       	ldi	r30, 0x40	; 64
    4dae:	f4 e0       	ldi	r31, 0x04	; 4
    4db0:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    4db2:	81 83       	std	Z+1, r24	; 0x01
//	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
//	USART1.BAUD = (uint16_t) USART_BAUD_RATE(9600);
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(57600);
    4db4:	e0 e2       	ldi	r30, 0x20	; 32
    4db6:	f8 e0       	ldi	r31, 0x08	; 8
    4db8:	27 ee       	ldi	r18, 0xE7	; 231
    4dba:	30 e0       	ldi	r19, 0x00	; 0
    4dbc:	20 87       	std	Z+8, r18	; 0x08
    4dbe:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    4dc0:	95 81       	ldd	r25, Z+5	; 0x05
    4dc2:	90 68       	ori	r25, 0x80	; 128
    4dc4:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    4dc6:	96 81       	ldd	r25, Z+6	; 0x06
    4dc8:	90 64       	ori	r25, 0x40	; 64
    4dca:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    4dcc:	96 81       	ldd	r25, Z+6	; 0x06
    4dce:	90 68       	ori	r25, 0x80	; 128
    4dd0:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    4dd2:	10 92 4d 32 	sts	0x324D, r1	; 0x80324d <send1_buf+0xfe>
	send1_buf.tail = 0;
    4dd6:	10 92 4e 32 	sts	0x324E, r1	; 0x80324e <send1_buf+0xff>
	send1_buf.done = YES;
    4dda:	80 93 52 32 	sts	0x3252, r24	; 0x803252 <send1_buf+0x103>
	recv1_buf.head = 0;
    4dde:	10 92 39 2d 	sts	0x2D39, r1	; 0x802d39 <recv1_buf+0xfe>
	recv1_buf.tail = 0;
    4de2:	10 92 3a 2d 	sts	0x2D3A, r1	; 0x802d3a <recv1_buf+0xff>
	recv1_buf.data[0] = '\0';
    4de6:	10 92 3b 2c 	sts	0x2C3B, r1	; 0x802c3b <recv1_buf>
	recv1_buf.length = 0;				// Not used
    4dea:	10 92 3c 2d 	sts	0x2D3C, r1	; 0x802d3c <recv1_buf+0x101>
	recv1_buf.done = NO;
    4dee:	10 92 3e 2d 	sts	0x2D3E, r1	; 0x802d3e <recv1_buf+0x103>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    4df2:	e0 e2       	ldi	r30, 0x20	; 32
    4df4:	f4 e0       	ldi	r31, 0x04	; 4
    4df6:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    4df8:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    4dfa:	e0 e6       	ldi	r30, 0x60	; 96
    4dfc:	f8 e0       	ldi	r31, 0x08	; 8
    4dfe:	2d e6       	ldi	r18, 0x6D	; 109
    4e00:	35 e0       	ldi	r19, 0x05	; 5
    4e02:	20 87       	std	Z+8, r18	; 0x08
    4e04:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    4e06:	96 81       	ldd	r25, Z+6	; 0x06
    4e08:	90 64       	ori	r25, 0x40	; 64
    4e0a:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    4e0c:	96 81       	ldd	r25, Z+6	; 0x06
    4e0e:	90 68       	ori	r25, 0x80	; 128
    4e10:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    4e12:	80 93 4e 31 	sts	0x314E, r24	; 0x80314e <send3_buf+0x103>
	recv3_buf.done = NO;
    4e16:	10 92 4a 30 	sts	0x304A, r1	; 0x80304a <recv3_buf+0x103>
    4e1a:	08 95       	ret

00004e1c <send_USART>:
		"transmit data register empty" interrupt (DREIE). The USARTn_DRE_vect
		puts the bytes into the transmit register until the tail catches up
		to the head of the circular buffer.
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    4e1c:	0f 93       	push	r16
    4e1e:	1f 93       	push	r17
    4e20:	cf 93       	push	r28
    4e22:	df 93       	push	r29
    4e24:	eb 01       	movw	r28, r22
    4e26:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    4e28:	81 30       	cpi	r24, 0x01	; 1
    4e2a:	b1 f1       	breq	.+108    	; 0x4e98 <send_USART+0x7c>
    4e2c:	20 f0       	brcs	.+8      	; 0x4e36 <send_USART+0x1a>
    4e2e:	83 30       	cpi	r24, 0x03	; 3
    4e30:	09 f4       	brne	.+2      	; 0x4e34 <send_USART+0x18>
    4e32:	81 c0       	rjmp	.+258    	; 0x4f36 <send_USART+0x11a>
    4e34:	88 c0       	rjmp	.+272    	; 0x4f46 <send_USART+0x12a>
		case 0:
			send0_buf.done = NO;
    4e36:	10 92 46 2f 	sts	0x2F46, r1	; 0x802f46 <send0_buf+0x103>
			for (i = 0; i < nbytes; i++) {
    4e3a:	20 e0       	ldi	r18, 0x00	; 0
    4e3c:	11 c0       	rjmp	.+34     	; 0x4e60 <send_USART+0x44>
				send0_buf.data[send0_buf.head] = *data++;
    4e3e:	e1 e4       	ldi	r30, 0x41	; 65
    4e40:	ff e2       	ldi	r31, 0x2F	; 47
    4e42:	80 81       	ld	r24, Z
    4e44:	90 e0       	ldi	r25, 0x00	; 0
    4e46:	38 81       	ld	r19, Y
    4e48:	dc 01       	movw	r26, r24
    4e4a:	ad 5b       	subi	r26, 0xBD	; 189
    4e4c:	b1 4d       	sbci	r27, 0xD1	; 209
    4e4e:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    4e50:	01 96       	adiw	r24, 0x01	; 1
    4e52:	6e ef       	ldi	r22, 0xFE	; 254
    4e54:	70 e0       	ldi	r23, 0x00	; 0
    4e56:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__divmodhi4>
    4e5a:	80 83       	st	Z, r24
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    4e5c:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    4e5e:	21 96       	adiw	r28, 0x01	; 1
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    4e60:	21 17       	cp	r18, r17
    4e62:	68 f3       	brcs	.-38     	; 0x4e3e <send_USART+0x22>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    4e64:	e0 e0       	ldi	r30, 0x00	; 0
    4e66:	f8 e0       	ldi	r31, 0x08	; 8
    4e68:	85 81       	ldd	r24, Z+5	; 0x05
    4e6a:	80 62       	ori	r24, 0x20	; 32
    4e6c:	85 83       	std	Z+5, r24	; 0x05
			USART0_ticks = 0;
    4e6e:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <USART0_ticks>
    4e72:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <USART0_ticks+0x1>
			while (send0_buf.done == NO) {
    4e76:	0b c0       	rjmp	.+22     	; 0x4e8e <send_USART+0x72>
				if (USART0_ticks > 100) {				// 1 second enough?
    4e78:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    4e7c:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    4e80:	85 36       	cpi	r24, 0x65	; 101
    4e82:	91 05       	cpc	r25, r1
    4e84:	20 f0       	brcs	.+8      	; 0x4e8e <send_USART+0x72>
					send0_buf.done = YES;
    4e86:	81 e0       	ldi	r24, 0x01	; 1
    4e88:	80 93 46 2f 	sts	0x2F46, r24	; 0x802f46 <send0_buf+0x103>
					return;
    4e8c:	5c c0       	rjmp	.+184    	; 0x4f46 <send_USART+0x12a>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			USART0_ticks = 0;
			while (send0_buf.done == NO) {
    4e8e:	80 91 46 2f 	lds	r24, 0x2F46	; 0x802f46 <send0_buf+0x103>
    4e92:	88 23       	and	r24, r24
    4e94:	89 f3       	breq	.-30     	; 0x4e78 <send_USART+0x5c>
    4e96:	57 c0       	rjmp	.+174    	; 0x4f46 <send_USART+0x12a>
				}
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
    4e98:	64 2f       	mov	r22, r20
    4e9a:	70 e0       	ldi	r23, 0x00	; 0
    4e9c:	ce 01       	movw	r24, r28
    4e9e:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <crc16>
    4ea2:	48 2f       	mov	r20, r24
    4ea4:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    4ea6:	20 e0       	ldi	r18, 0x00	; 0
    4ea8:	11 c0       	rjmp	.+34     	; 0x4ecc <send_USART+0xb0>
				send1_buf.data[send1_buf.head] = *data++;
    4eaa:	ed e4       	ldi	r30, 0x4D	; 77
    4eac:	f2 e3       	ldi	r31, 0x32	; 50
    4eae:	80 81       	ld	r24, Z
    4eb0:	90 e0       	ldi	r25, 0x00	; 0
    4eb2:	38 81       	ld	r19, Y
    4eb4:	dc 01       	movw	r26, r24
    4eb6:	a1 5b       	subi	r26, 0xB1	; 177
    4eb8:	be 4c       	sbci	r27, 0xCE	; 206
    4eba:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    4ebc:	01 96       	adiw	r24, 0x01	; 1
    4ebe:	6e ef       	ldi	r22, 0xFE	; 254
    4ec0:	70 e0       	ldi	r23, 0x00	; 0
    4ec2:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__divmodhi4>
    4ec6:	80 83       	st	Z, r24
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    4ec8:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    4eca:	21 96       	adiw	r28, 0x01	; 1
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    4ecc:	21 17       	cp	r18, r17
    4ece:	68 f3       	brcs	.-38     	; 0x4eaa <send_USART+0x8e>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    4ed0:	ed e4       	ldi	r30, 0x4D	; 77
    4ed2:	f2 e3       	ldi	r31, 0x32	; 50
    4ed4:	80 81       	ld	r24, Z
    4ed6:	90 e0       	ldi	r25, 0x00	; 0
    4ed8:	dc 01       	movw	r26, r24
    4eda:	a1 5b       	subi	r26, 0xB1	; 177
    4edc:	be 4c       	sbci	r27, 0xCE	; 206
    4ede:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    4ee0:	01 96       	adiw	r24, 0x01	; 1
    4ee2:	2e ef       	ldi	r18, 0xFE	; 254
    4ee4:	30 e0       	ldi	r19, 0x00	; 0
    4ee6:	b9 01       	movw	r22, r18
    4ee8:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    4eec:	90 e0       	ldi	r25, 0x00	; 0
    4eee:	dc 01       	movw	r26, r24
    4ef0:	a1 5b       	subi	r26, 0xB1	; 177
    4ef2:	be 4c       	sbci	r27, 0xCE	; 206
    4ef4:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    4ef6:	01 96       	adiw	r24, 0x01	; 1
    4ef8:	b9 01       	movw	r22, r18
    4efa:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__divmodhi4>
    4efe:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    4f00:	1e 5f       	subi	r17, 0xFE	; 254
    4f02:	10 93 4f 32 	sts	0x324F, r17	; 0x80324f <send1_buf+0x100>
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    4f06:	e0 e2       	ldi	r30, 0x20	; 32
    4f08:	f8 e0       	ldi	r31, 0x08	; 8
    4f0a:	85 81       	ldd	r24, Z+5	; 0x05
    4f0c:	80 62       	ori	r24, 0x20	; 32
    4f0e:	85 83       	std	Z+5, r24	; 0x05
			break;
    4f10:	1a c0       	rjmp	.+52     	; 0x4f46 <send_USART+0x12a>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    4f12:	e9 e4       	ldi	r30, 0x49	; 73
    4f14:	f1 e3       	ldi	r31, 0x31	; 49
    4f16:	80 81       	ld	r24, Z
    4f18:	90 e0       	ldi	r25, 0x00	; 0
    4f1a:	38 81       	ld	r19, Y
    4f1c:	dc 01       	movw	r26, r24
    4f1e:	a5 5b       	subi	r26, 0xB5	; 181
    4f20:	bf 4c       	sbci	r27, 0xCF	; 207
    4f22:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    4f24:	01 96       	adiw	r24, 0x01	; 1
    4f26:	6e ef       	ldi	r22, 0xFE	; 254
    4f28:	70 e0       	ldi	r23, 0x00	; 0
    4f2a:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__divmodhi4>
    4f2e:	80 83       	st	Z, r24
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    4f30:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    4f32:	21 96       	adiw	r28, 0x01	; 1
    4f34:	01 c0       	rjmp	.+2      	; 0x4f38 <send_USART+0x11c>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    4f36:	20 e0       	ldi	r18, 0x00	; 0
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    4f38:	21 17       	cp	r18, r17
    4f3a:	58 f3       	brcs	.-42     	; 0x4f12 <send_USART+0xf6>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    4f3c:	e0 e6       	ldi	r30, 0x60	; 96
    4f3e:	f8 e0       	ldi	r31, 0x08	; 8
    4f40:	85 81       	ldd	r24, Z+5	; 0x05
    4f42:	80 62       	ori	r24, 0x20	; 32
    4f44:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    4f46:	df 91       	pop	r29
    4f48:	cf 91       	pop	r28
    4f4a:	1f 91       	pop	r17
    4f4c:	0f 91       	pop	r16
    4f4e:	08 95       	ret

00004f50 <send_USART1>:

void send_USART1(uint8_t *data, uint8_t nbytes)
{
    4f50:	1f 93       	push	r17
    4f52:	cf 93       	push	r28
    4f54:	df 93       	push	r29
    4f56:	ec 01       	movw	r28, r24
    4f58:	16 2f       	mov	r17, r22

	uint8_t i;
	uint16_t crc;

	crc = crc16(data, nbytes);
    4f5a:	70 e0       	ldi	r23, 0x00	; 0
    4f5c:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <crc16>
	ser_send1.nxfrd = 0;
    4f60:	10 92 3a 2c 	sts	0x2C3A, r1	; 0x802c3a <ser_send1+0xff>
	ser_send1.n2xfr = nbytes+2;
    4f64:	22 e0       	ldi	r18, 0x02	; 2
    4f66:	21 0f       	add	r18, r17
    4f68:	20 93 39 2c 	sts	0x2C39, r18	; 0x802c39 <ser_send1+0xfe>
	for (i = 0; i < nbytes; i++) {
    4f6c:	20 e0       	ldi	r18, 0x00	; 0
    4f6e:	08 c0       	rjmp	.+16     	; 0x4f80 <send_USART1+0x30>
		ser_send1.data[i] = *data++;
    4f70:	e2 2f       	mov	r30, r18
    4f72:	f0 e0       	ldi	r31, 0x00	; 0
    4f74:	38 81       	ld	r19, Y
    4f76:	e5 5c       	subi	r30, 0xC5	; 197
    4f78:	f4 4d       	sbci	r31, 0xD4	; 212
    4f7a:	30 83       	st	Z, r19
	uint16_t crc;

	crc = crc16(data, nbytes);
	ser_send1.nxfrd = 0;
	ser_send1.n2xfr = nbytes+2;
	for (i = 0; i < nbytes; i++) {
    4f7c:	2f 5f       	subi	r18, 0xFF	; 255
		ser_send1.data[i] = *data++;
    4f7e:	21 96       	adiw	r28, 0x01	; 1
	uint16_t crc;

	crc = crc16(data, nbytes);
	ser_send1.nxfrd = 0;
	ser_send1.n2xfr = nbytes+2;
	for (i = 0; i < nbytes; i++) {
    4f80:	21 17       	cp	r18, r17
    4f82:	b0 f3       	brcs	.-20     	; 0x4f70 <send_USART1+0x20>
		ser_send1.data[i] = *data++;
	}
	ser_send1.data[nbytes] = (crc >> 8);
    4f84:	21 2f       	mov	r18, r17
    4f86:	30 e0       	ldi	r19, 0x00	; 0
    4f88:	f9 01       	movw	r30, r18
    4f8a:	e5 5c       	subi	r30, 0xC5	; 197
    4f8c:	f4 4d       	sbci	r31, 0xD4	; 212
    4f8e:	90 83       	st	Z, r25
	ser_send1.data[nbytes+1] = (crc & 0xFF);
    4f90:	f9 01       	movw	r30, r18
    4f92:	e4 5c       	subi	r30, 0xC4	; 196
    4f94:	f4 4d       	sbci	r31, 0xD4	; 212
    4f96:	80 83       	st	Z, r24
	USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    4f98:	e0 e2       	ldi	r30, 0x20	; 32
    4f9a:	f8 e0       	ldi	r31, 0x08	; 8
    4f9c:	85 81       	ldd	r24, Z+5	; 0x05
    4f9e:	80 62       	ori	r24, 0x20	; 32
    4fa0:	85 83       	std	Z+5, r24	; 0x05

}
    4fa2:	df 91       	pop	r29
    4fa4:	cf 91       	pop	r28
    4fa6:	1f 91       	pop	r17
    4fa8:	08 95       	ret

00004faa <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    4faa:	1f 92       	push	r1
    4fac:	0f 92       	push	r0
    4fae:	0f b6       	in	r0, 0x3f	; 63
    4fb0:	0f 92       	push	r0
    4fb2:	11 24       	eor	r1, r1
    4fb4:	5f 93       	push	r21
    4fb6:	6f 93       	push	r22
    4fb8:	7f 93       	push	r23
    4fba:	8f 93       	push	r24
    4fbc:	9f 93       	push	r25
    4fbe:	af 93       	push	r26
    4fc0:	bf 93       	push	r27
    4fc2:	ef 93       	push	r30
    4fc4:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    4fc6:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if (recv0_buf.length < (BUFSIZE-1)) {		// BUFSIZE-1 to make room for the terminating \0
    4fca:	80 91 40 2e 	lds	r24, 0x2E40	; 0x802e40 <recv0_buf+0x101>
    4fce:	8d 3f       	cpi	r24, 0xFD	; 253
    4fd0:	10 f5       	brcc	.+68     	; 0x5016 <__vector_17+0x6c>
//		c = USART0.RXDATAL;
		if ((char) c == '\r') {
    4fd2:	9d 30       	cpi	r25, 0x0D	; 13
    4fd4:	51 f4       	brne	.+20     	; 0x4fea <__vector_17+0x40>
			recv0_buf.done = YES;
    4fd6:	81 e0       	ldi	r24, 0x01	; 1
    4fd8:	80 93 42 2e 	sts	0x2E42, r24	; 0x802e42 <recv0_buf+0x103>
			recv0_buf.data[recv0_buf.head] = '\0';
    4fdc:	e0 91 3d 2e 	lds	r30, 0x2E3D	; 0x802e3d <recv0_buf+0xfe>
    4fe0:	f0 e0       	ldi	r31, 0x00	; 0
    4fe2:	e1 5c       	subi	r30, 0xC1	; 193
    4fe4:	f2 4d       	sbci	r31, 0xD2	; 210
    4fe6:	10 82       	st	Z, r1
    4fe8:	06 c0       	rjmp	.+12     	; 0x4ff6 <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    4fea:	e0 91 3d 2e 	lds	r30, 0x2E3D	; 0x802e3d <recv0_buf+0xfe>
    4fee:	f0 e0       	ldi	r31, 0x00	; 0
    4ff0:	e1 5c       	subi	r30, 0xC1	; 193
    4ff2:	f2 4d       	sbci	r31, 0xD2	; 210
    4ff4:	90 83       	st	Z, r25
		}
		recv0_buf.length++;
    4ff6:	e0 e4       	ldi	r30, 0x40	; 64
    4ff8:	fe e2       	ldi	r31, 0x2E	; 46
    4ffa:	80 81       	ld	r24, Z
    4ffc:	8f 5f       	subi	r24, 0xFF	; 255
    4ffe:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    5000:	ed e3       	ldi	r30, 0x3D	; 61
    5002:	fe e2       	ldi	r31, 0x2E	; 46
    5004:	80 81       	ld	r24, Z
    5006:	90 e0       	ldi	r25, 0x00	; 0
    5008:	01 96       	adiw	r24, 0x01	; 1
    500a:	6e ef       	ldi	r22, 0xFE	; 254
    500c:	70 e0       	ldi	r23, 0x00	; 0
    500e:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__divmodhi4>
    5012:	80 83       	st	Z, r24
    5014:	0a c0       	rjmp	.+20     	; 0x502a <__vector_17+0x80>
	} else {
		recv0_buf.head = 0;
    5016:	10 92 3d 2e 	sts	0x2E3D, r1	; 0x802e3d <recv0_buf+0xfe>
		recv0_buf.tail = 0;
    501a:	10 92 3e 2e 	sts	0x2E3E, r1	; 0x802e3e <recv0_buf+0xff>
		recv0_buf.data[0] = '\0';
    501e:	10 92 3f 2d 	sts	0x2D3F, r1	; 0x802d3f <recv0_buf>
		recv0_buf.length = 0;
    5022:	10 92 40 2e 	sts	0x2E40, r1	; 0x802e40 <recv0_buf+0x101>
		recv0_buf.done = NO;
    5026:	10 92 42 2e 	sts	0x2E42, r1	; 0x802e42 <recv0_buf+0x103>
	}
}
    502a:	ff 91       	pop	r31
    502c:	ef 91       	pop	r30
    502e:	bf 91       	pop	r27
    5030:	af 91       	pop	r26
    5032:	9f 91       	pop	r25
    5034:	8f 91       	pop	r24
    5036:	7f 91       	pop	r23
    5038:	6f 91       	pop	r22
    503a:	5f 91       	pop	r21
    503c:	0f 90       	pop	r0
    503e:	0f be       	out	0x3f, r0	; 63
    5040:	0f 90       	pop	r0
    5042:	1f 90       	pop	r1
    5044:	18 95       	reti

00005046 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    5046:	1f 92       	push	r1
    5048:	0f 92       	push	r0
    504a:	0f b6       	in	r0, 0x3f	; 63
    504c:	0f 92       	push	r0
    504e:	11 24       	eor	r1, r1
    5050:	2f 93       	push	r18
    5052:	8f 93       	push	r24
    5054:	9f 93       	push	r25
    5056:	ef 93       	push	r30
    5058:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    505a:	e0 e0       	ldi	r30, 0x00	; 0
    505c:	f8 e0       	ldi	r31, 0x08	; 8
    505e:	85 81       	ldd	r24, Z+5	; 0x05
    5060:	8f 7d       	andi	r24, 0xDF	; 223
    5062:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    5064:	80 91 41 2f 	lds	r24, 0x2F41	; 0x802f41 <send0_buf+0xfe>
    5068:	e0 91 42 2f 	lds	r30, 0x2F42	; 0x802f42 <send0_buf+0xff>
    506c:	8e 17       	cp	r24, r30
    506e:	d1 f0       	breq	.+52     	; 0x50a4 <__vector_18+0x5e>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    5070:	81 e0       	ldi	r24, 0x01	; 1
    5072:	8e 0f       	add	r24, r30
    5074:	80 93 42 2f 	sts	0x2F42, r24	; 0x802f42 <send0_buf+0xff>
    5078:	f0 e0       	ldi	r31, 0x00	; 0
    507a:	ed 5b       	subi	r30, 0xBD	; 189
    507c:	f1 4d       	sbci	r31, 0xD1	; 209
    507e:	90 81       	ld	r25, Z
    5080:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    5084:	91 e0       	ldi	r25, 0x01	; 1
    5086:	8e 3f       	cpi	r24, 0xFE	; 254
    5088:	08 f4       	brcc	.+2      	; 0x508c <__vector_18+0x46>
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	91 95       	neg	r25
    508e:	29 2f       	mov	r18, r25
    5090:	22 0f       	add	r18, r18
    5092:	82 1b       	sub	r24, r18
    5094:	80 93 42 2f 	sts	0x2F42, r24	; 0x802f42 <send0_buf+0xff>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    5098:	e0 e0       	ldi	r30, 0x00	; 0
    509a:	f8 e0       	ldi	r31, 0x08	; 8
    509c:	85 81       	ldd	r24, Z+5	; 0x05
    509e:	80 62       	ori	r24, 0x20	; 32
    50a0:	85 83       	std	Z+5, r24	; 0x05
    50a2:	03 c0       	rjmp	.+6      	; 0x50aa <__vector_18+0x64>
	} else {
		send0_buf.done = YES;
    50a4:	81 e0       	ldi	r24, 0x01	; 1
    50a6:	80 93 46 2f 	sts	0x2F46, r24	; 0x802f46 <send0_buf+0x103>
	}

}
    50aa:	ff 91       	pop	r31
    50ac:	ef 91       	pop	r30
    50ae:	9f 91       	pop	r25
    50b0:	8f 91       	pop	r24
    50b2:	2f 91       	pop	r18
    50b4:	0f 90       	pop	r0
    50b6:	0f be       	out	0x3f, r0	; 63
    50b8:	0f 90       	pop	r0
    50ba:	1f 90       	pop	r1
    50bc:	18 95       	reti

000050be <__vector_26>:
/*------------------------------------------------------------------------------
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    50be:	1f 92       	push	r1
    50c0:	0f 92       	push	r0
    50c2:	0f b6       	in	r0, 0x3f	; 63
    50c4:	0f 92       	push	r0
    50c6:	11 24       	eor	r1, r1
    50c8:	8f 93       	push	r24
    50ca:	af 93       	push	r26
    50cc:	bf 93       	push	r27
    50ce:	ef 93       	push	r30
    50d0:	ff 93       	push	r31

	ser_recv1.data[ser_recv1.nxfrd++] = USART1.RXDATAL;
    50d2:	aa e3       	ldi	r26, 0x3A	; 58
    50d4:	bb e2       	ldi	r27, 0x2B	; 43
    50d6:	ec 91       	ld	r30, X
    50d8:	81 e0       	ldi	r24, 0x01	; 1
    50da:	8e 0f       	add	r24, r30
    50dc:	8c 93       	st	X, r24
    50de:	f0 e0       	ldi	r31, 0x00	; 0
    50e0:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
    50e4:	e5 5c       	subi	r30, 0xC5	; 197
    50e6:	f5 4d       	sbci	r31, 0xD5	; 213
    50e8:	80 83       	st	Z, r24

}
    50ea:	ff 91       	pop	r31
    50ec:	ef 91       	pop	r30
    50ee:	bf 91       	pop	r27
    50f0:	af 91       	pop	r26
    50f2:	8f 91       	pop	r24
    50f4:	0f 90       	pop	r0
    50f6:	0f be       	out	0x3f, r0	; 63
    50f8:	0f 90       	pop	r0
    50fa:	1f 90       	pop	r1
    50fc:	18 95       	reti

000050fe <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    50fe:	1f 92       	push	r1
    5100:	0f 92       	push	r0
    5102:	0f b6       	in	r0, 0x3f	; 63
    5104:	0f 92       	push	r0
    5106:	11 24       	eor	r1, r1
    5108:	8f 93       	push	r24
    510a:	9f 93       	push	r25
    510c:	af 93       	push	r26
    510e:	bf 93       	push	r27
    5110:	cf 93       	push	r28
    5112:	df 93       	push	r29
    5114:	ef 93       	push	r30
    5116:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    5118:	a0 e2       	ldi	r26, 0x20	; 32
    511a:	b8 e0       	ldi	r27, 0x08	; 8
    511c:	15 96       	adiw	r26, 0x05	; 5
    511e:	8c 91       	ld	r24, X
    5120:	15 97       	sbiw	r26, 0x05	; 5
    5122:	8f 7d       	andi	r24, 0xDF	; 223
    5124:	15 96       	adiw	r26, 0x05	; 5
    5126:	8c 93       	st	X, r24
    5128:	15 97       	sbiw	r26, 0x05	; 5
	USART1.TXDATAL = ser_send1.data[send1_buf.nxfrd++];
    512a:	c1 e5       	ldi	r28, 0x51	; 81
    512c:	d2 e3       	ldi	r29, 0x32	; 50
    512e:	e8 81       	ld	r30, Y
    5130:	81 e0       	ldi	r24, 0x01	; 1
    5132:	8e 0f       	add	r24, r30
    5134:	88 83       	st	Y, r24
    5136:	f0 e0       	ldi	r31, 0x00	; 0
    5138:	e5 5c       	subi	r30, 0xC5	; 197
    513a:	f4 4d       	sbci	r31, 0xD4	; 212
    513c:	80 81       	ld	r24, Z
    513e:	12 96       	adiw	r26, 0x02	; 2
    5140:	8c 93       	st	X, r24
	if (ser_send1.nxfrd < ser_send1.n2xfr) {
    5142:	90 91 3a 2c 	lds	r25, 0x2C3A	; 0x802c3a <ser_send1+0xff>
    5146:	80 91 39 2c 	lds	r24, 0x2C39	; 0x802c39 <ser_send1+0xfe>
    514a:	98 17       	cp	r25, r24
    514c:	28 f4       	brcc	.+10     	; 0x5158 <__vector_27+0x5a>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts	
    514e:	e0 e2       	ldi	r30, 0x20	; 32
    5150:	f8 e0       	ldi	r31, 0x08	; 8
    5152:	85 81       	ldd	r24, Z+5	; 0x05
    5154:	80 62       	ori	r24, 0x20	; 32
    5156:	85 83       	std	Z+5, r24	; 0x05
	}

}
    5158:	ff 91       	pop	r31
    515a:	ef 91       	pop	r30
    515c:	df 91       	pop	r29
    515e:	cf 91       	pop	r28
    5160:	bf 91       	pop	r27
    5162:	af 91       	pop	r26
    5164:	9f 91       	pop	r25
    5166:	8f 91       	pop	r24
    5168:	0f 90       	pop	r0
    516a:	0f be       	out	0x3f, r0	; 63
    516c:	0f 90       	pop	r0
    516e:	1f 90       	pop	r1
    5170:	18 95       	reti

00005172 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    5172:	1f 92       	push	r1
    5174:	0f 92       	push	r0
    5176:	0f b6       	in	r0, 0x3f	; 63
    5178:	0f 92       	push	r0
    517a:	11 24       	eor	r1, r1
    517c:	8f 93       	push	r24
    517e:	9f 93       	push	r25
    5180:	af 93       	push	r26
    5182:	bf 93       	push	r27
    5184:	ef 93       	push	r30
    5186:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    5188:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    518c:	8d 30       	cpi	r24, 0x0D	; 13
    518e:	21 f0       	breq	.+8      	; 0x5198 <__vector_37+0x26>
    5190:	e0 91 49 30 	lds	r30, 0x3049	; 0x803049 <recv3_buf+0x102>
    5194:	ed 3f       	cpi	r30, 0xFD	; 253
    5196:	78 f0       	brcs	.+30     	; 0x51b6 <__vector_37+0x44>
		recv3_buf.done = YES;
    5198:	81 e0       	ldi	r24, 0x01	; 1
    519a:	80 93 4a 30 	sts	0x304A, r24	; 0x80304a <recv3_buf+0x103>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    519e:	a9 e4       	ldi	r26, 0x49	; 73
    51a0:	b0 e3       	ldi	r27, 0x30	; 48
    51a2:	8c 91       	ld	r24, X
    51a4:	e8 2f       	mov	r30, r24
    51a6:	f0 e0       	ldi	r31, 0x00	; 0
    51a8:	e9 5b       	subi	r30, 0xB9	; 185
    51aa:	f0 4d       	sbci	r31, 0xD0	; 208
    51ac:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    51ae:	80 93 47 30 	sts	0x3047, r24	; 0x803047 <recv3_buf+0x100>
		recv3_buf.nxfrd = 0;
    51b2:	1c 92       	st	X, r1
		return;
    51b4:	08 c0       	rjmp	.+16     	; 0x51c6 <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    51b6:	91 e0       	ldi	r25, 0x01	; 1
    51b8:	9e 0f       	add	r25, r30
    51ba:	90 93 49 30 	sts	0x3049, r25	; 0x803049 <recv3_buf+0x102>
    51be:	f0 e0       	ldi	r31, 0x00	; 0
    51c0:	e9 5b       	subi	r30, 0xB9	; 185
    51c2:	f0 4d       	sbci	r31, 0xD0	; 208
    51c4:	80 83       	st	Z, r24
	}

}
    51c6:	ff 91       	pop	r31
    51c8:	ef 91       	pop	r30
    51ca:	bf 91       	pop	r27
    51cc:	af 91       	pop	r26
    51ce:	9f 91       	pop	r25
    51d0:	8f 91       	pop	r24
    51d2:	0f 90       	pop	r0
    51d4:	0f be       	out	0x3f, r0	; 63
    51d6:	0f 90       	pop	r0
    51d8:	1f 90       	pop	r1
    51da:	18 95       	reti

000051dc <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    51dc:	1f 92       	push	r1
    51de:	0f 92       	push	r0
    51e0:	0f b6       	in	r0, 0x3f	; 63
    51e2:	0f 92       	push	r0
    51e4:	11 24       	eor	r1, r1
    51e6:	8f 93       	push	r24
    51e8:	9f 93       	push	r25
    51ea:	af 93       	push	r26
    51ec:	bf 93       	push	r27
    51ee:	ef 93       	push	r30
    51f0:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    51f2:	ad e4       	ldi	r26, 0x4D	; 77
    51f4:	b1 e3       	ldi	r27, 0x31	; 49
    51f6:	ec 91       	ld	r30, X
    51f8:	81 e0       	ldi	r24, 0x01	; 1
    51fa:	8e 0f       	add	r24, r30
    51fc:	8c 93       	st	X, r24
    51fe:	f0 e0       	ldi	r31, 0x00	; 0
    5200:	e5 5b       	subi	r30, 0xB5	; 181
    5202:	ff 4c       	sbci	r31, 0xCF	; 207
    5204:	90 81       	ld	r25, Z
    5206:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    520a:	90 91 4b 31 	lds	r25, 0x314B	; 0x80314b <send3_buf+0x100>
    520e:	89 17       	cp	r24, r25
    5210:	40 f0       	brcs	.+16     	; 0x5222 <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    5212:	e0 e6       	ldi	r30, 0x60	; 96
    5214:	f8 e0       	ldi	r31, 0x08	; 8
    5216:	85 81       	ldd	r24, Z+5	; 0x05
    5218:	8f 7d       	andi	r24, 0xDF	; 223
    521a:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    521c:	81 e0       	ldi	r24, 0x01	; 1
    521e:	80 93 4e 31 	sts	0x314E, r24	; 0x80314e <send3_buf+0x103>
	}

}
    5222:	ff 91       	pop	r31
    5224:	ef 91       	pop	r30
    5226:	bf 91       	pop	r27
    5228:	af 91       	pop	r26
    522a:	9f 91       	pop	r25
    522c:	8f 91       	pop	r24
    522e:	0f 90       	pop	r0
    5230:	0f be       	out	0x3f, r0	; 63
    5232:	0f 90       	pop	r0
    5234:	1f 90       	pop	r1
    5236:	18 95       	reti

00005238 <reboot>:
#include "wdt.h"

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
    5238:	88 ed       	ldi	r24, 0xD8	; 216
    523a:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    523c:	81 e0       	ldi	r24, 0x01	; 1
    523e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    5242:	08 95       	ret

00005244 <__vector_29>:

}

ISR(PORTF_PORT_vect)
{
    5244:	1f 92       	push	r1
    5246:	0f 92       	push	r0
    5248:	0f b6       	in	r0, 0x3f	; 63
    524a:	0f 92       	push	r0
    524c:	11 24       	eor	r1, r1
    524e:	2f 93       	push	r18
    5250:	3f 93       	push	r19
    5252:	4f 93       	push	r20
    5254:	5f 93       	push	r21
    5256:	6f 93       	push	r22
    5258:	7f 93       	push	r23
    525a:	8f 93       	push	r24
    525c:	9f 93       	push	r25
    525e:	af 93       	push	r26
    5260:	bf 93       	push	r27
    5262:	ef 93       	push	r30
    5264:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
    5266:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
    526a:	86 ff       	sbrs	r24, 6
    526c:	05 c0       	rjmp	.+10     	; 0x5278 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
    526e:	80 e4       	ldi	r24, 0x40	; 64
    5270:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
    5274:	0e 94 1c 29 	call	0x5238	; 0x5238 <reboot>
	}

}
    5278:	ff 91       	pop	r31
    527a:	ef 91       	pop	r30
    527c:	bf 91       	pop	r27
    527e:	af 91       	pop	r26
    5280:	9f 91       	pop	r25
    5282:	8f 91       	pop	r24
    5284:	7f 91       	pop	r23
    5286:	6f 91       	pop	r22
    5288:	5f 91       	pop	r21
    528a:	4f 91       	pop	r20
    528c:	3f 91       	pop	r19
    528e:	2f 91       	pop	r18
    5290:	0f 90       	pop	r0
    5292:	0f be       	out	0x3f, r0	; 63
    5294:	0f 90       	pop	r0
    5296:	1f 90       	pop	r1
    5298:	18 95       	reti

0000529a <__subsf3>:
    529a:	50 58       	subi	r21, 0x80	; 128

0000529c <__addsf3>:
    529c:	bb 27       	eor	r27, r27
    529e:	aa 27       	eor	r26, r26
    52a0:	0e 94 65 29 	call	0x52ca	; 0x52ca <__addsf3x>
    52a4:	0c 94 df 2a 	jmp	0x55be	; 0x55be <__fp_round>
    52a8:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <__fp_pscA>
    52ac:	38 f0       	brcs	.+14     	; 0x52bc <__addsf3+0x20>
    52ae:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <__fp_pscB>
    52b2:	20 f0       	brcs	.+8      	; 0x52bc <__addsf3+0x20>
    52b4:	39 f4       	brne	.+14     	; 0x52c4 <__addsf3+0x28>
    52b6:	9f 3f       	cpi	r25, 0xFF	; 255
    52b8:	19 f4       	brne	.+6      	; 0x52c0 <__addsf3+0x24>
    52ba:	26 f4       	brtc	.+8      	; 0x52c4 <__addsf3+0x28>
    52bc:	0c 94 ce 2a 	jmp	0x559c	; 0x559c <__fp_nan>
    52c0:	0e f4       	brtc	.+2      	; 0x52c4 <__addsf3+0x28>
    52c2:	e0 95       	com	r30
    52c4:	e7 fb       	bst	r30, 7
    52c6:	0c 94 c8 2a 	jmp	0x5590	; 0x5590 <__fp_inf>

000052ca <__addsf3x>:
    52ca:	e9 2f       	mov	r30, r25
    52cc:	0e 94 f0 2a 	call	0x55e0	; 0x55e0 <__fp_split3>
    52d0:	58 f3       	brcs	.-42     	; 0x52a8 <__addsf3+0xc>
    52d2:	ba 17       	cp	r27, r26
    52d4:	62 07       	cpc	r22, r18
    52d6:	73 07       	cpc	r23, r19
    52d8:	84 07       	cpc	r24, r20
    52da:	95 07       	cpc	r25, r21
    52dc:	20 f0       	brcs	.+8      	; 0x52e6 <__addsf3x+0x1c>
    52de:	79 f4       	brne	.+30     	; 0x52fe <__addsf3x+0x34>
    52e0:	a6 f5       	brtc	.+104    	; 0x534a <__addsf3x+0x80>
    52e2:	0c 94 12 2b 	jmp	0x5624	; 0x5624 <__fp_zero>
    52e6:	0e f4       	brtc	.+2      	; 0x52ea <__addsf3x+0x20>
    52e8:	e0 95       	com	r30
    52ea:	0b 2e       	mov	r0, r27
    52ec:	ba 2f       	mov	r27, r26
    52ee:	a0 2d       	mov	r26, r0
    52f0:	0b 01       	movw	r0, r22
    52f2:	b9 01       	movw	r22, r18
    52f4:	90 01       	movw	r18, r0
    52f6:	0c 01       	movw	r0, r24
    52f8:	ca 01       	movw	r24, r20
    52fa:	a0 01       	movw	r20, r0
    52fc:	11 24       	eor	r1, r1
    52fe:	ff 27       	eor	r31, r31
    5300:	59 1b       	sub	r21, r25
    5302:	99 f0       	breq	.+38     	; 0x532a <__addsf3x+0x60>
    5304:	59 3f       	cpi	r21, 0xF9	; 249
    5306:	50 f4       	brcc	.+20     	; 0x531c <__addsf3x+0x52>
    5308:	50 3e       	cpi	r21, 0xE0	; 224
    530a:	68 f1       	brcs	.+90     	; 0x5366 <__addsf3x+0x9c>
    530c:	1a 16       	cp	r1, r26
    530e:	f0 40       	sbci	r31, 0x00	; 0
    5310:	a2 2f       	mov	r26, r18
    5312:	23 2f       	mov	r18, r19
    5314:	34 2f       	mov	r19, r20
    5316:	44 27       	eor	r20, r20
    5318:	58 5f       	subi	r21, 0xF8	; 248
    531a:	f3 cf       	rjmp	.-26     	; 0x5302 <__addsf3x+0x38>
    531c:	46 95       	lsr	r20
    531e:	37 95       	ror	r19
    5320:	27 95       	ror	r18
    5322:	a7 95       	ror	r26
    5324:	f0 40       	sbci	r31, 0x00	; 0
    5326:	53 95       	inc	r21
    5328:	c9 f7       	brne	.-14     	; 0x531c <__addsf3x+0x52>
    532a:	7e f4       	brtc	.+30     	; 0x534a <__addsf3x+0x80>
    532c:	1f 16       	cp	r1, r31
    532e:	ba 0b       	sbc	r27, r26
    5330:	62 0b       	sbc	r22, r18
    5332:	73 0b       	sbc	r23, r19
    5334:	84 0b       	sbc	r24, r20
    5336:	ba f0       	brmi	.+46     	; 0x5366 <__addsf3x+0x9c>
    5338:	91 50       	subi	r25, 0x01	; 1
    533a:	a1 f0       	breq	.+40     	; 0x5364 <__addsf3x+0x9a>
    533c:	ff 0f       	add	r31, r31
    533e:	bb 1f       	adc	r27, r27
    5340:	66 1f       	adc	r22, r22
    5342:	77 1f       	adc	r23, r23
    5344:	88 1f       	adc	r24, r24
    5346:	c2 f7       	brpl	.-16     	; 0x5338 <__addsf3x+0x6e>
    5348:	0e c0       	rjmp	.+28     	; 0x5366 <__addsf3x+0x9c>
    534a:	ba 0f       	add	r27, r26
    534c:	62 1f       	adc	r22, r18
    534e:	73 1f       	adc	r23, r19
    5350:	84 1f       	adc	r24, r20
    5352:	48 f4       	brcc	.+18     	; 0x5366 <__addsf3x+0x9c>
    5354:	87 95       	ror	r24
    5356:	77 95       	ror	r23
    5358:	67 95       	ror	r22
    535a:	b7 95       	ror	r27
    535c:	f7 95       	ror	r31
    535e:	9e 3f       	cpi	r25, 0xFE	; 254
    5360:	08 f0       	brcs	.+2      	; 0x5364 <__addsf3x+0x9a>
    5362:	b0 cf       	rjmp	.-160    	; 0x52c4 <__addsf3+0x28>
    5364:	93 95       	inc	r25
    5366:	88 0f       	add	r24, r24
    5368:	08 f0       	brcs	.+2      	; 0x536c <__addsf3x+0xa2>
    536a:	99 27       	eor	r25, r25
    536c:	ee 0f       	add	r30, r30
    536e:	97 95       	ror	r25
    5370:	87 95       	ror	r24
    5372:	08 95       	ret

00005374 <__cmpsf2>:
    5374:	0e 94 a4 2a 	call	0x5548	; 0x5548 <__fp_cmp>
    5378:	08 f4       	brcc	.+2      	; 0x537c <__cmpsf2+0x8>
    537a:	81 e0       	ldi	r24, 0x01	; 1
    537c:	08 95       	ret

0000537e <__divsf3>:
    537e:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__divsf3x>
    5382:	0c 94 df 2a 	jmp	0x55be	; 0x55be <__fp_round>
    5386:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <__fp_pscB>
    538a:	58 f0       	brcs	.+22     	; 0x53a2 <__divsf3+0x24>
    538c:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <__fp_pscA>
    5390:	40 f0       	brcs	.+16     	; 0x53a2 <__divsf3+0x24>
    5392:	29 f4       	brne	.+10     	; 0x539e <__divsf3+0x20>
    5394:	5f 3f       	cpi	r21, 0xFF	; 255
    5396:	29 f0       	breq	.+10     	; 0x53a2 <__divsf3+0x24>
    5398:	0c 94 c8 2a 	jmp	0x5590	; 0x5590 <__fp_inf>
    539c:	51 11       	cpse	r21, r1
    539e:	0c 94 13 2b 	jmp	0x5626	; 0x5626 <__fp_szero>
    53a2:	0c 94 ce 2a 	jmp	0x559c	; 0x559c <__fp_nan>

000053a6 <__divsf3x>:
    53a6:	0e 94 f0 2a 	call	0x55e0	; 0x55e0 <__fp_split3>
    53aa:	68 f3       	brcs	.-38     	; 0x5386 <__divsf3+0x8>

000053ac <__divsf3_pse>:
    53ac:	99 23       	and	r25, r25
    53ae:	b1 f3       	breq	.-20     	; 0x539c <__divsf3+0x1e>
    53b0:	55 23       	and	r21, r21
    53b2:	91 f3       	breq	.-28     	; 0x5398 <__divsf3+0x1a>
    53b4:	95 1b       	sub	r25, r21
    53b6:	55 0b       	sbc	r21, r21
    53b8:	bb 27       	eor	r27, r27
    53ba:	aa 27       	eor	r26, r26
    53bc:	62 17       	cp	r22, r18
    53be:	73 07       	cpc	r23, r19
    53c0:	84 07       	cpc	r24, r20
    53c2:	38 f0       	brcs	.+14     	; 0x53d2 <__divsf3_pse+0x26>
    53c4:	9f 5f       	subi	r25, 0xFF	; 255
    53c6:	5f 4f       	sbci	r21, 0xFF	; 255
    53c8:	22 0f       	add	r18, r18
    53ca:	33 1f       	adc	r19, r19
    53cc:	44 1f       	adc	r20, r20
    53ce:	aa 1f       	adc	r26, r26
    53d0:	a9 f3       	breq	.-22     	; 0x53bc <__divsf3_pse+0x10>
    53d2:	35 d0       	rcall	.+106    	; 0x543e <__divsf3_pse+0x92>
    53d4:	0e 2e       	mov	r0, r30
    53d6:	3a f0       	brmi	.+14     	; 0x53e6 <__divsf3_pse+0x3a>
    53d8:	e0 e8       	ldi	r30, 0x80	; 128
    53da:	32 d0       	rcall	.+100    	; 0x5440 <__divsf3_pse+0x94>
    53dc:	91 50       	subi	r25, 0x01	; 1
    53de:	50 40       	sbci	r21, 0x00	; 0
    53e0:	e6 95       	lsr	r30
    53e2:	00 1c       	adc	r0, r0
    53e4:	ca f7       	brpl	.-14     	; 0x53d8 <__divsf3_pse+0x2c>
    53e6:	2b d0       	rcall	.+86     	; 0x543e <__divsf3_pse+0x92>
    53e8:	fe 2f       	mov	r31, r30
    53ea:	29 d0       	rcall	.+82     	; 0x543e <__divsf3_pse+0x92>
    53ec:	66 0f       	add	r22, r22
    53ee:	77 1f       	adc	r23, r23
    53f0:	88 1f       	adc	r24, r24
    53f2:	bb 1f       	adc	r27, r27
    53f4:	26 17       	cp	r18, r22
    53f6:	37 07       	cpc	r19, r23
    53f8:	48 07       	cpc	r20, r24
    53fa:	ab 07       	cpc	r26, r27
    53fc:	b0 e8       	ldi	r27, 0x80	; 128
    53fe:	09 f0       	breq	.+2      	; 0x5402 <__divsf3_pse+0x56>
    5400:	bb 0b       	sbc	r27, r27
    5402:	80 2d       	mov	r24, r0
    5404:	bf 01       	movw	r22, r30
    5406:	ff 27       	eor	r31, r31
    5408:	93 58       	subi	r25, 0x83	; 131
    540a:	5f 4f       	sbci	r21, 0xFF	; 255
    540c:	3a f0       	brmi	.+14     	; 0x541c <__divsf3_pse+0x70>
    540e:	9e 3f       	cpi	r25, 0xFE	; 254
    5410:	51 05       	cpc	r21, r1
    5412:	78 f0       	brcs	.+30     	; 0x5432 <__divsf3_pse+0x86>
    5414:	0c 94 c8 2a 	jmp	0x5590	; 0x5590 <__fp_inf>
    5418:	0c 94 13 2b 	jmp	0x5626	; 0x5626 <__fp_szero>
    541c:	5f 3f       	cpi	r21, 0xFF	; 255
    541e:	e4 f3       	brlt	.-8      	; 0x5418 <__divsf3_pse+0x6c>
    5420:	98 3e       	cpi	r25, 0xE8	; 232
    5422:	d4 f3       	brlt	.-12     	; 0x5418 <__divsf3_pse+0x6c>
    5424:	86 95       	lsr	r24
    5426:	77 95       	ror	r23
    5428:	67 95       	ror	r22
    542a:	b7 95       	ror	r27
    542c:	f7 95       	ror	r31
    542e:	9f 5f       	subi	r25, 0xFF	; 255
    5430:	c9 f7       	brne	.-14     	; 0x5424 <__divsf3_pse+0x78>
    5432:	88 0f       	add	r24, r24
    5434:	91 1d       	adc	r25, r1
    5436:	96 95       	lsr	r25
    5438:	87 95       	ror	r24
    543a:	97 f9       	bld	r25, 7
    543c:	08 95       	ret
    543e:	e1 e0       	ldi	r30, 0x01	; 1
    5440:	66 0f       	add	r22, r22
    5442:	77 1f       	adc	r23, r23
    5444:	88 1f       	adc	r24, r24
    5446:	bb 1f       	adc	r27, r27
    5448:	62 17       	cp	r22, r18
    544a:	73 07       	cpc	r23, r19
    544c:	84 07       	cpc	r24, r20
    544e:	ba 07       	cpc	r27, r26
    5450:	20 f0       	brcs	.+8      	; 0x545a <__divsf3_pse+0xae>
    5452:	62 1b       	sub	r22, r18
    5454:	73 0b       	sbc	r23, r19
    5456:	84 0b       	sbc	r24, r20
    5458:	ba 0b       	sbc	r27, r26
    545a:	ee 1f       	adc	r30, r30
    545c:	88 f7       	brcc	.-30     	; 0x5440 <__divsf3_pse+0x94>
    545e:	e0 95       	com	r30
    5460:	08 95       	ret

00005462 <__fixsfsi>:
    5462:	0e 94 38 2a 	call	0x5470	; 0x5470 <__fixunssfsi>
    5466:	68 94       	set
    5468:	b1 11       	cpse	r27, r1
    546a:	0c 94 13 2b 	jmp	0x5626	; 0x5626 <__fp_szero>
    546e:	08 95       	ret

00005470 <__fixunssfsi>:
    5470:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <__fp_splitA>
    5474:	88 f0       	brcs	.+34     	; 0x5498 <__fixunssfsi+0x28>
    5476:	9f 57       	subi	r25, 0x7F	; 127
    5478:	98 f0       	brcs	.+38     	; 0x54a0 <__fixunssfsi+0x30>
    547a:	b9 2f       	mov	r27, r25
    547c:	99 27       	eor	r25, r25
    547e:	b7 51       	subi	r27, 0x17	; 23
    5480:	b0 f0       	brcs	.+44     	; 0x54ae <__fixunssfsi+0x3e>
    5482:	e1 f0       	breq	.+56     	; 0x54bc <__fixunssfsi+0x4c>
    5484:	66 0f       	add	r22, r22
    5486:	77 1f       	adc	r23, r23
    5488:	88 1f       	adc	r24, r24
    548a:	99 1f       	adc	r25, r25
    548c:	1a f0       	brmi	.+6      	; 0x5494 <__fixunssfsi+0x24>
    548e:	ba 95       	dec	r27
    5490:	c9 f7       	brne	.-14     	; 0x5484 <__fixunssfsi+0x14>
    5492:	14 c0       	rjmp	.+40     	; 0x54bc <__fixunssfsi+0x4c>
    5494:	b1 30       	cpi	r27, 0x01	; 1
    5496:	91 f0       	breq	.+36     	; 0x54bc <__fixunssfsi+0x4c>
    5498:	0e 94 12 2b 	call	0x5624	; 0x5624 <__fp_zero>
    549c:	b1 e0       	ldi	r27, 0x01	; 1
    549e:	08 95       	ret
    54a0:	0c 94 12 2b 	jmp	0x5624	; 0x5624 <__fp_zero>
    54a4:	67 2f       	mov	r22, r23
    54a6:	78 2f       	mov	r23, r24
    54a8:	88 27       	eor	r24, r24
    54aa:	b8 5f       	subi	r27, 0xF8	; 248
    54ac:	39 f0       	breq	.+14     	; 0x54bc <__fixunssfsi+0x4c>
    54ae:	b9 3f       	cpi	r27, 0xF9	; 249
    54b0:	cc f3       	brlt	.-14     	; 0x54a4 <__fixunssfsi+0x34>
    54b2:	86 95       	lsr	r24
    54b4:	77 95       	ror	r23
    54b6:	67 95       	ror	r22
    54b8:	b3 95       	inc	r27
    54ba:	d9 f7       	brne	.-10     	; 0x54b2 <__fixunssfsi+0x42>
    54bc:	3e f4       	brtc	.+14     	; 0x54cc <__fixunssfsi+0x5c>
    54be:	90 95       	com	r25
    54c0:	80 95       	com	r24
    54c2:	70 95       	com	r23
    54c4:	61 95       	neg	r22
    54c6:	7f 4f       	sbci	r23, 0xFF	; 255
    54c8:	8f 4f       	sbci	r24, 0xFF	; 255
    54ca:	9f 4f       	sbci	r25, 0xFF	; 255
    54cc:	08 95       	ret

000054ce <__floatunsisf>:
    54ce:	e8 94       	clt
    54d0:	09 c0       	rjmp	.+18     	; 0x54e4 <__floatsisf+0x12>

000054d2 <__floatsisf>:
    54d2:	97 fb       	bst	r25, 7
    54d4:	3e f4       	brtc	.+14     	; 0x54e4 <__floatsisf+0x12>
    54d6:	90 95       	com	r25
    54d8:	80 95       	com	r24
    54da:	70 95       	com	r23
    54dc:	61 95       	neg	r22
    54de:	7f 4f       	sbci	r23, 0xFF	; 255
    54e0:	8f 4f       	sbci	r24, 0xFF	; 255
    54e2:	9f 4f       	sbci	r25, 0xFF	; 255
    54e4:	99 23       	and	r25, r25
    54e6:	a9 f0       	breq	.+42     	; 0x5512 <__floatsisf+0x40>
    54e8:	f9 2f       	mov	r31, r25
    54ea:	96 e9       	ldi	r25, 0x96	; 150
    54ec:	bb 27       	eor	r27, r27
    54ee:	93 95       	inc	r25
    54f0:	f6 95       	lsr	r31
    54f2:	87 95       	ror	r24
    54f4:	77 95       	ror	r23
    54f6:	67 95       	ror	r22
    54f8:	b7 95       	ror	r27
    54fa:	f1 11       	cpse	r31, r1
    54fc:	f8 cf       	rjmp	.-16     	; 0x54ee <__floatsisf+0x1c>
    54fe:	fa f4       	brpl	.+62     	; 0x553e <__floatsisf+0x6c>
    5500:	bb 0f       	add	r27, r27
    5502:	11 f4       	brne	.+4      	; 0x5508 <__floatsisf+0x36>
    5504:	60 ff       	sbrs	r22, 0
    5506:	1b c0       	rjmp	.+54     	; 0x553e <__floatsisf+0x6c>
    5508:	6f 5f       	subi	r22, 0xFF	; 255
    550a:	7f 4f       	sbci	r23, 0xFF	; 255
    550c:	8f 4f       	sbci	r24, 0xFF	; 255
    550e:	9f 4f       	sbci	r25, 0xFF	; 255
    5510:	16 c0       	rjmp	.+44     	; 0x553e <__floatsisf+0x6c>
    5512:	88 23       	and	r24, r24
    5514:	11 f0       	breq	.+4      	; 0x551a <__floatsisf+0x48>
    5516:	96 e9       	ldi	r25, 0x96	; 150
    5518:	11 c0       	rjmp	.+34     	; 0x553c <__floatsisf+0x6a>
    551a:	77 23       	and	r23, r23
    551c:	21 f0       	breq	.+8      	; 0x5526 <__floatsisf+0x54>
    551e:	9e e8       	ldi	r25, 0x8E	; 142
    5520:	87 2f       	mov	r24, r23
    5522:	76 2f       	mov	r23, r22
    5524:	05 c0       	rjmp	.+10     	; 0x5530 <__floatsisf+0x5e>
    5526:	66 23       	and	r22, r22
    5528:	71 f0       	breq	.+28     	; 0x5546 <__floatsisf+0x74>
    552a:	96 e8       	ldi	r25, 0x86	; 134
    552c:	86 2f       	mov	r24, r22
    552e:	70 e0       	ldi	r23, 0x00	; 0
    5530:	60 e0       	ldi	r22, 0x00	; 0
    5532:	2a f0       	brmi	.+10     	; 0x553e <__floatsisf+0x6c>
    5534:	9a 95       	dec	r25
    5536:	66 0f       	add	r22, r22
    5538:	77 1f       	adc	r23, r23
    553a:	88 1f       	adc	r24, r24
    553c:	da f7       	brpl	.-10     	; 0x5534 <__floatsisf+0x62>
    553e:	88 0f       	add	r24, r24
    5540:	96 95       	lsr	r25
    5542:	87 95       	ror	r24
    5544:	97 f9       	bld	r25, 7
    5546:	08 95       	ret

00005548 <__fp_cmp>:
    5548:	99 0f       	add	r25, r25
    554a:	00 08       	sbc	r0, r0
    554c:	55 0f       	add	r21, r21
    554e:	aa 0b       	sbc	r26, r26
    5550:	e0 e8       	ldi	r30, 0x80	; 128
    5552:	fe ef       	ldi	r31, 0xFE	; 254
    5554:	16 16       	cp	r1, r22
    5556:	17 06       	cpc	r1, r23
    5558:	e8 07       	cpc	r30, r24
    555a:	f9 07       	cpc	r31, r25
    555c:	c0 f0       	brcs	.+48     	; 0x558e <__fp_cmp+0x46>
    555e:	12 16       	cp	r1, r18
    5560:	13 06       	cpc	r1, r19
    5562:	e4 07       	cpc	r30, r20
    5564:	f5 07       	cpc	r31, r21
    5566:	98 f0       	brcs	.+38     	; 0x558e <__fp_cmp+0x46>
    5568:	62 1b       	sub	r22, r18
    556a:	73 0b       	sbc	r23, r19
    556c:	84 0b       	sbc	r24, r20
    556e:	95 0b       	sbc	r25, r21
    5570:	39 f4       	brne	.+14     	; 0x5580 <__fp_cmp+0x38>
    5572:	0a 26       	eor	r0, r26
    5574:	61 f0       	breq	.+24     	; 0x558e <__fp_cmp+0x46>
    5576:	23 2b       	or	r18, r19
    5578:	24 2b       	or	r18, r20
    557a:	25 2b       	or	r18, r21
    557c:	21 f4       	brne	.+8      	; 0x5586 <__fp_cmp+0x3e>
    557e:	08 95       	ret
    5580:	0a 26       	eor	r0, r26
    5582:	09 f4       	brne	.+2      	; 0x5586 <__fp_cmp+0x3e>
    5584:	a1 40       	sbci	r26, 0x01	; 1
    5586:	a6 95       	lsr	r26
    5588:	8f ef       	ldi	r24, 0xFF	; 255
    558a:	81 1d       	adc	r24, r1
    558c:	81 1d       	adc	r24, r1
    558e:	08 95       	ret

00005590 <__fp_inf>:
    5590:	97 f9       	bld	r25, 7
    5592:	9f 67       	ori	r25, 0x7F	; 127
    5594:	80 e8       	ldi	r24, 0x80	; 128
    5596:	70 e0       	ldi	r23, 0x00	; 0
    5598:	60 e0       	ldi	r22, 0x00	; 0
    559a:	08 95       	ret

0000559c <__fp_nan>:
    559c:	9f ef       	ldi	r25, 0xFF	; 255
    559e:	80 ec       	ldi	r24, 0xC0	; 192
    55a0:	08 95       	ret

000055a2 <__fp_pscA>:
    55a2:	00 24       	eor	r0, r0
    55a4:	0a 94       	dec	r0
    55a6:	16 16       	cp	r1, r22
    55a8:	17 06       	cpc	r1, r23
    55aa:	18 06       	cpc	r1, r24
    55ac:	09 06       	cpc	r0, r25
    55ae:	08 95       	ret

000055b0 <__fp_pscB>:
    55b0:	00 24       	eor	r0, r0
    55b2:	0a 94       	dec	r0
    55b4:	12 16       	cp	r1, r18
    55b6:	13 06       	cpc	r1, r19
    55b8:	14 06       	cpc	r1, r20
    55ba:	05 06       	cpc	r0, r21
    55bc:	08 95       	ret

000055be <__fp_round>:
    55be:	09 2e       	mov	r0, r25
    55c0:	03 94       	inc	r0
    55c2:	00 0c       	add	r0, r0
    55c4:	11 f4       	brne	.+4      	; 0x55ca <__fp_round+0xc>
    55c6:	88 23       	and	r24, r24
    55c8:	52 f0       	brmi	.+20     	; 0x55de <__fp_round+0x20>
    55ca:	bb 0f       	add	r27, r27
    55cc:	40 f4       	brcc	.+16     	; 0x55de <__fp_round+0x20>
    55ce:	bf 2b       	or	r27, r31
    55d0:	11 f4       	brne	.+4      	; 0x55d6 <__fp_round+0x18>
    55d2:	60 ff       	sbrs	r22, 0
    55d4:	04 c0       	rjmp	.+8      	; 0x55de <__fp_round+0x20>
    55d6:	6f 5f       	subi	r22, 0xFF	; 255
    55d8:	7f 4f       	sbci	r23, 0xFF	; 255
    55da:	8f 4f       	sbci	r24, 0xFF	; 255
    55dc:	9f 4f       	sbci	r25, 0xFF	; 255
    55de:	08 95       	ret

000055e0 <__fp_split3>:
    55e0:	57 fd       	sbrc	r21, 7
    55e2:	90 58       	subi	r25, 0x80	; 128
    55e4:	44 0f       	add	r20, r20
    55e6:	55 1f       	adc	r21, r21
    55e8:	59 f0       	breq	.+22     	; 0x5600 <__fp_splitA+0x10>
    55ea:	5f 3f       	cpi	r21, 0xFF	; 255
    55ec:	71 f0       	breq	.+28     	; 0x560a <__fp_splitA+0x1a>
    55ee:	47 95       	ror	r20

000055f0 <__fp_splitA>:
    55f0:	88 0f       	add	r24, r24
    55f2:	97 fb       	bst	r25, 7
    55f4:	99 1f       	adc	r25, r25
    55f6:	61 f0       	breq	.+24     	; 0x5610 <__fp_splitA+0x20>
    55f8:	9f 3f       	cpi	r25, 0xFF	; 255
    55fa:	79 f0       	breq	.+30     	; 0x561a <__fp_splitA+0x2a>
    55fc:	87 95       	ror	r24
    55fe:	08 95       	ret
    5600:	12 16       	cp	r1, r18
    5602:	13 06       	cpc	r1, r19
    5604:	14 06       	cpc	r1, r20
    5606:	55 1f       	adc	r21, r21
    5608:	f2 cf       	rjmp	.-28     	; 0x55ee <__fp_split3+0xe>
    560a:	46 95       	lsr	r20
    560c:	f1 df       	rcall	.-30     	; 0x55f0 <__fp_splitA>
    560e:	08 c0       	rjmp	.+16     	; 0x5620 <__fp_splitA+0x30>
    5610:	16 16       	cp	r1, r22
    5612:	17 06       	cpc	r1, r23
    5614:	18 06       	cpc	r1, r24
    5616:	99 1f       	adc	r25, r25
    5618:	f1 cf       	rjmp	.-30     	; 0x55fc <__fp_splitA+0xc>
    561a:	86 95       	lsr	r24
    561c:	71 05       	cpc	r23, r1
    561e:	61 05       	cpc	r22, r1
    5620:	08 94       	sec
    5622:	08 95       	ret

00005624 <__fp_zero>:
    5624:	e8 94       	clt

00005626 <__fp_szero>:
    5626:	bb 27       	eor	r27, r27
    5628:	66 27       	eor	r22, r22
    562a:	77 27       	eor	r23, r23
    562c:	cb 01       	movw	r24, r22
    562e:	97 f9       	bld	r25, 7
    5630:	08 95       	ret

00005632 <__gesf2>:
    5632:	0e 94 a4 2a 	call	0x5548	; 0x5548 <__fp_cmp>
    5636:	08 f4       	brcc	.+2      	; 0x563a <__gesf2+0x8>
    5638:	8f ef       	ldi	r24, 0xFF	; 255
    563a:	08 95       	ret

0000563c <__mulsf3>:
    563c:	0e 94 31 2b 	call	0x5662	; 0x5662 <__mulsf3x>
    5640:	0c 94 df 2a 	jmp	0x55be	; 0x55be <__fp_round>
    5644:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <__fp_pscA>
    5648:	38 f0       	brcs	.+14     	; 0x5658 <__mulsf3+0x1c>
    564a:	0e 94 d8 2a 	call	0x55b0	; 0x55b0 <__fp_pscB>
    564e:	20 f0       	brcs	.+8      	; 0x5658 <__mulsf3+0x1c>
    5650:	95 23       	and	r25, r21
    5652:	11 f0       	breq	.+4      	; 0x5658 <__mulsf3+0x1c>
    5654:	0c 94 c8 2a 	jmp	0x5590	; 0x5590 <__fp_inf>
    5658:	0c 94 ce 2a 	jmp	0x559c	; 0x559c <__fp_nan>
    565c:	11 24       	eor	r1, r1
    565e:	0c 94 13 2b 	jmp	0x5626	; 0x5626 <__fp_szero>

00005662 <__mulsf3x>:
    5662:	0e 94 f0 2a 	call	0x55e0	; 0x55e0 <__fp_split3>
    5666:	70 f3       	brcs	.-36     	; 0x5644 <__mulsf3+0x8>

00005668 <__mulsf3_pse>:
    5668:	95 9f       	mul	r25, r21
    566a:	c1 f3       	breq	.-16     	; 0x565c <__mulsf3+0x20>
    566c:	95 0f       	add	r25, r21
    566e:	50 e0       	ldi	r21, 0x00	; 0
    5670:	55 1f       	adc	r21, r21
    5672:	62 9f       	mul	r22, r18
    5674:	f0 01       	movw	r30, r0
    5676:	72 9f       	mul	r23, r18
    5678:	bb 27       	eor	r27, r27
    567a:	f0 0d       	add	r31, r0
    567c:	b1 1d       	adc	r27, r1
    567e:	63 9f       	mul	r22, r19
    5680:	aa 27       	eor	r26, r26
    5682:	f0 0d       	add	r31, r0
    5684:	b1 1d       	adc	r27, r1
    5686:	aa 1f       	adc	r26, r26
    5688:	64 9f       	mul	r22, r20
    568a:	66 27       	eor	r22, r22
    568c:	b0 0d       	add	r27, r0
    568e:	a1 1d       	adc	r26, r1
    5690:	66 1f       	adc	r22, r22
    5692:	82 9f       	mul	r24, r18
    5694:	22 27       	eor	r18, r18
    5696:	b0 0d       	add	r27, r0
    5698:	a1 1d       	adc	r26, r1
    569a:	62 1f       	adc	r22, r18
    569c:	73 9f       	mul	r23, r19
    569e:	b0 0d       	add	r27, r0
    56a0:	a1 1d       	adc	r26, r1
    56a2:	62 1f       	adc	r22, r18
    56a4:	83 9f       	mul	r24, r19
    56a6:	a0 0d       	add	r26, r0
    56a8:	61 1d       	adc	r22, r1
    56aa:	22 1f       	adc	r18, r18
    56ac:	74 9f       	mul	r23, r20
    56ae:	33 27       	eor	r19, r19
    56b0:	a0 0d       	add	r26, r0
    56b2:	61 1d       	adc	r22, r1
    56b4:	23 1f       	adc	r18, r19
    56b6:	84 9f       	mul	r24, r20
    56b8:	60 0d       	add	r22, r0
    56ba:	21 1d       	adc	r18, r1
    56bc:	82 2f       	mov	r24, r18
    56be:	76 2f       	mov	r23, r22
    56c0:	6a 2f       	mov	r22, r26
    56c2:	11 24       	eor	r1, r1
    56c4:	9f 57       	subi	r25, 0x7F	; 127
    56c6:	50 40       	sbci	r21, 0x00	; 0
    56c8:	9a f0       	brmi	.+38     	; 0x56f0 <__mulsf3_pse+0x88>
    56ca:	f1 f0       	breq	.+60     	; 0x5708 <__mulsf3_pse+0xa0>
    56cc:	88 23       	and	r24, r24
    56ce:	4a f0       	brmi	.+18     	; 0x56e2 <__mulsf3_pse+0x7a>
    56d0:	ee 0f       	add	r30, r30
    56d2:	ff 1f       	adc	r31, r31
    56d4:	bb 1f       	adc	r27, r27
    56d6:	66 1f       	adc	r22, r22
    56d8:	77 1f       	adc	r23, r23
    56da:	88 1f       	adc	r24, r24
    56dc:	91 50       	subi	r25, 0x01	; 1
    56de:	50 40       	sbci	r21, 0x00	; 0
    56e0:	a9 f7       	brne	.-22     	; 0x56cc <__mulsf3_pse+0x64>
    56e2:	9e 3f       	cpi	r25, 0xFE	; 254
    56e4:	51 05       	cpc	r21, r1
    56e6:	80 f0       	brcs	.+32     	; 0x5708 <__mulsf3_pse+0xa0>
    56e8:	0c 94 c8 2a 	jmp	0x5590	; 0x5590 <__fp_inf>
    56ec:	0c 94 13 2b 	jmp	0x5626	; 0x5626 <__fp_szero>
    56f0:	5f 3f       	cpi	r21, 0xFF	; 255
    56f2:	e4 f3       	brlt	.-8      	; 0x56ec <__mulsf3_pse+0x84>
    56f4:	98 3e       	cpi	r25, 0xE8	; 232
    56f6:	d4 f3       	brlt	.-12     	; 0x56ec <__mulsf3_pse+0x84>
    56f8:	86 95       	lsr	r24
    56fa:	77 95       	ror	r23
    56fc:	67 95       	ror	r22
    56fe:	b7 95       	ror	r27
    5700:	f7 95       	ror	r31
    5702:	e7 95       	ror	r30
    5704:	9f 5f       	subi	r25, 0xFF	; 255
    5706:	c1 f7       	brne	.-16     	; 0x56f8 <__mulsf3_pse+0x90>
    5708:	fe 2b       	or	r31, r30
    570a:	88 0f       	add	r24, r24
    570c:	91 1d       	adc	r25, r1
    570e:	96 95       	lsr	r25
    5710:	87 95       	ror	r24
    5712:	97 f9       	bld	r25, 7
    5714:	08 95       	ret

00005716 <vfprintf>:
    5716:	a0 e1       	ldi	r26, 0x10	; 16
    5718:	b0 e0       	ldi	r27, 0x00	; 0
    571a:	e1 e9       	ldi	r30, 0x91	; 145
    571c:	fb e2       	ldi	r31, 0x2B	; 43
    571e:	0c 94 4c 2f 	jmp	0x5e98	; 0x5e98 <__prologue_saves__>
    5722:	7c 01       	movw	r14, r24
    5724:	1b 01       	movw	r2, r22
    5726:	6a 01       	movw	r12, r20
    5728:	fc 01       	movw	r30, r24
    572a:	16 82       	std	Z+6, r1	; 0x06
    572c:	17 82       	std	Z+7, r1	; 0x07
    572e:	83 81       	ldd	r24, Z+3	; 0x03
    5730:	81 ff       	sbrs	r24, 1
    5732:	44 c3       	rjmp	.+1672   	; 0x5dbc <vfprintf+0x6a6>
    5734:	9e 01       	movw	r18, r28
    5736:	2f 5f       	subi	r18, 0xFF	; 255
    5738:	3f 4f       	sbci	r19, 0xFF	; 255
    573a:	39 01       	movw	r6, r18
    573c:	f7 01       	movw	r30, r14
    573e:	93 81       	ldd	r25, Z+3	; 0x03
    5740:	f1 01       	movw	r30, r2
    5742:	93 fd       	sbrc	r25, 3
    5744:	85 91       	lpm	r24, Z+
    5746:	93 ff       	sbrs	r25, 3
    5748:	81 91       	ld	r24, Z+
    574a:	1f 01       	movw	r2, r30
    574c:	88 23       	and	r24, r24
    574e:	09 f4       	brne	.+2      	; 0x5752 <vfprintf+0x3c>
    5750:	31 c3       	rjmp	.+1634   	; 0x5db4 <vfprintf+0x69e>
    5752:	85 32       	cpi	r24, 0x25	; 37
    5754:	39 f4       	brne	.+14     	; 0x5764 <vfprintf+0x4e>
    5756:	93 fd       	sbrc	r25, 3
    5758:	85 91       	lpm	r24, Z+
    575a:	93 ff       	sbrs	r25, 3
    575c:	81 91       	ld	r24, Z+
    575e:	1f 01       	movw	r2, r30
    5760:	85 32       	cpi	r24, 0x25	; 37
    5762:	39 f4       	brne	.+14     	; 0x5772 <vfprintf+0x5c>
    5764:	b7 01       	movw	r22, r14
    5766:	90 e0       	ldi	r25, 0x00	; 0
    5768:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    576c:	56 01       	movw	r10, r12
    576e:	65 01       	movw	r12, r10
    5770:	e5 cf       	rjmp	.-54     	; 0x573c <vfprintf+0x26>
    5772:	10 e0       	ldi	r17, 0x00	; 0
    5774:	51 2c       	mov	r5, r1
    5776:	91 2c       	mov	r9, r1
    5778:	ff e1       	ldi	r31, 0x1F	; 31
    577a:	f9 15       	cp	r31, r9
    577c:	d8 f0       	brcs	.+54     	; 0x57b4 <vfprintf+0x9e>
    577e:	8b 32       	cpi	r24, 0x2B	; 43
    5780:	79 f0       	breq	.+30     	; 0x57a0 <vfprintf+0x8a>
    5782:	38 f4       	brcc	.+14     	; 0x5792 <vfprintf+0x7c>
    5784:	80 32       	cpi	r24, 0x20	; 32
    5786:	79 f0       	breq	.+30     	; 0x57a6 <vfprintf+0x90>
    5788:	83 32       	cpi	r24, 0x23	; 35
    578a:	a1 f4       	brne	.+40     	; 0x57b4 <vfprintf+0x9e>
    578c:	f9 2d       	mov	r31, r9
    578e:	f0 61       	ori	r31, 0x10	; 16
    5790:	2e c0       	rjmp	.+92     	; 0x57ee <vfprintf+0xd8>
    5792:	8d 32       	cpi	r24, 0x2D	; 45
    5794:	61 f0       	breq	.+24     	; 0x57ae <vfprintf+0x98>
    5796:	80 33       	cpi	r24, 0x30	; 48
    5798:	69 f4       	brne	.+26     	; 0x57b4 <vfprintf+0x9e>
    579a:	29 2d       	mov	r18, r9
    579c:	21 60       	ori	r18, 0x01	; 1
    579e:	2d c0       	rjmp	.+90     	; 0x57fa <vfprintf+0xe4>
    57a0:	39 2d       	mov	r19, r9
    57a2:	32 60       	ori	r19, 0x02	; 2
    57a4:	93 2e       	mov	r9, r19
    57a6:	89 2d       	mov	r24, r9
    57a8:	84 60       	ori	r24, 0x04	; 4
    57aa:	98 2e       	mov	r9, r24
    57ac:	2a c0       	rjmp	.+84     	; 0x5802 <vfprintf+0xec>
    57ae:	e9 2d       	mov	r30, r9
    57b0:	e8 60       	ori	r30, 0x08	; 8
    57b2:	15 c0       	rjmp	.+42     	; 0x57de <vfprintf+0xc8>
    57b4:	97 fc       	sbrc	r9, 7
    57b6:	2d c0       	rjmp	.+90     	; 0x5812 <vfprintf+0xfc>
    57b8:	20 ed       	ldi	r18, 0xD0	; 208
    57ba:	28 0f       	add	r18, r24
    57bc:	2a 30       	cpi	r18, 0x0A	; 10
    57be:	88 f4       	brcc	.+34     	; 0x57e2 <vfprintf+0xcc>
    57c0:	96 fe       	sbrs	r9, 6
    57c2:	06 c0       	rjmp	.+12     	; 0x57d0 <vfprintf+0xba>
    57c4:	3a e0       	ldi	r19, 0x0A	; 10
    57c6:	13 9f       	mul	r17, r19
    57c8:	20 0d       	add	r18, r0
    57ca:	11 24       	eor	r1, r1
    57cc:	12 2f       	mov	r17, r18
    57ce:	19 c0       	rjmp	.+50     	; 0x5802 <vfprintf+0xec>
    57d0:	8a e0       	ldi	r24, 0x0A	; 10
    57d2:	58 9e       	mul	r5, r24
    57d4:	20 0d       	add	r18, r0
    57d6:	11 24       	eor	r1, r1
    57d8:	52 2e       	mov	r5, r18
    57da:	e9 2d       	mov	r30, r9
    57dc:	e0 62       	ori	r30, 0x20	; 32
    57de:	9e 2e       	mov	r9, r30
    57e0:	10 c0       	rjmp	.+32     	; 0x5802 <vfprintf+0xec>
    57e2:	8e 32       	cpi	r24, 0x2E	; 46
    57e4:	31 f4       	brne	.+12     	; 0x57f2 <vfprintf+0xdc>
    57e6:	96 fc       	sbrc	r9, 6
    57e8:	e5 c2       	rjmp	.+1482   	; 0x5db4 <vfprintf+0x69e>
    57ea:	f9 2d       	mov	r31, r9
    57ec:	f0 64       	ori	r31, 0x40	; 64
    57ee:	9f 2e       	mov	r9, r31
    57f0:	08 c0       	rjmp	.+16     	; 0x5802 <vfprintf+0xec>
    57f2:	8c 36       	cpi	r24, 0x6C	; 108
    57f4:	21 f4       	brne	.+8      	; 0x57fe <vfprintf+0xe8>
    57f6:	29 2d       	mov	r18, r9
    57f8:	20 68       	ori	r18, 0x80	; 128
    57fa:	92 2e       	mov	r9, r18
    57fc:	02 c0       	rjmp	.+4      	; 0x5802 <vfprintf+0xec>
    57fe:	88 36       	cpi	r24, 0x68	; 104
    5800:	41 f4       	brne	.+16     	; 0x5812 <vfprintf+0xfc>
    5802:	f1 01       	movw	r30, r2
    5804:	93 fd       	sbrc	r25, 3
    5806:	85 91       	lpm	r24, Z+
    5808:	93 ff       	sbrs	r25, 3
    580a:	81 91       	ld	r24, Z+
    580c:	1f 01       	movw	r2, r30
    580e:	81 11       	cpse	r24, r1
    5810:	b3 cf       	rjmp	.-154    	; 0x5778 <vfprintf+0x62>
    5812:	9b eb       	ldi	r25, 0xBB	; 187
    5814:	98 0f       	add	r25, r24
    5816:	93 30       	cpi	r25, 0x03	; 3
    5818:	20 f4       	brcc	.+8      	; 0x5822 <vfprintf+0x10c>
    581a:	99 2d       	mov	r25, r9
    581c:	90 61       	ori	r25, 0x10	; 16
    581e:	80 5e       	subi	r24, 0xE0	; 224
    5820:	07 c0       	rjmp	.+14     	; 0x5830 <vfprintf+0x11a>
    5822:	9b e9       	ldi	r25, 0x9B	; 155
    5824:	98 0f       	add	r25, r24
    5826:	93 30       	cpi	r25, 0x03	; 3
    5828:	08 f0       	brcs	.+2      	; 0x582c <vfprintf+0x116>
    582a:	66 c1       	rjmp	.+716    	; 0x5af8 <vfprintf+0x3e2>
    582c:	99 2d       	mov	r25, r9
    582e:	9f 7e       	andi	r25, 0xEF	; 239
    5830:	96 ff       	sbrs	r25, 6
    5832:	16 e0       	ldi	r17, 0x06	; 6
    5834:	9f 73       	andi	r25, 0x3F	; 63
    5836:	99 2e       	mov	r9, r25
    5838:	85 36       	cpi	r24, 0x65	; 101
    583a:	19 f4       	brne	.+6      	; 0x5842 <vfprintf+0x12c>
    583c:	90 64       	ori	r25, 0x40	; 64
    583e:	99 2e       	mov	r9, r25
    5840:	08 c0       	rjmp	.+16     	; 0x5852 <vfprintf+0x13c>
    5842:	86 36       	cpi	r24, 0x66	; 102
    5844:	21 f4       	brne	.+8      	; 0x584e <vfprintf+0x138>
    5846:	39 2f       	mov	r19, r25
    5848:	30 68       	ori	r19, 0x80	; 128
    584a:	93 2e       	mov	r9, r19
    584c:	02 c0       	rjmp	.+4      	; 0x5852 <vfprintf+0x13c>
    584e:	11 11       	cpse	r17, r1
    5850:	11 50       	subi	r17, 0x01	; 1
    5852:	97 fe       	sbrs	r9, 7
    5854:	07 c0       	rjmp	.+14     	; 0x5864 <vfprintf+0x14e>
    5856:	1c 33       	cpi	r17, 0x3C	; 60
    5858:	50 f4       	brcc	.+20     	; 0x586e <vfprintf+0x158>
    585a:	44 24       	eor	r4, r4
    585c:	43 94       	inc	r4
    585e:	41 0e       	add	r4, r17
    5860:	27 e0       	ldi	r18, 0x07	; 7
    5862:	0b c0       	rjmp	.+22     	; 0x587a <vfprintf+0x164>
    5864:	18 30       	cpi	r17, 0x08	; 8
    5866:	38 f0       	brcs	.+14     	; 0x5876 <vfprintf+0x160>
    5868:	27 e0       	ldi	r18, 0x07	; 7
    586a:	17 e0       	ldi	r17, 0x07	; 7
    586c:	05 c0       	rjmp	.+10     	; 0x5878 <vfprintf+0x162>
    586e:	27 e0       	ldi	r18, 0x07	; 7
    5870:	9c e3       	ldi	r25, 0x3C	; 60
    5872:	49 2e       	mov	r4, r25
    5874:	02 c0       	rjmp	.+4      	; 0x587a <vfprintf+0x164>
    5876:	21 2f       	mov	r18, r17
    5878:	41 2c       	mov	r4, r1
    587a:	56 01       	movw	r10, r12
    587c:	84 e0       	ldi	r24, 0x04	; 4
    587e:	a8 0e       	add	r10, r24
    5880:	b1 1c       	adc	r11, r1
    5882:	f6 01       	movw	r30, r12
    5884:	60 81       	ld	r22, Z
    5886:	71 81       	ldd	r23, Z+1	; 0x01
    5888:	82 81       	ldd	r24, Z+2	; 0x02
    588a:	93 81       	ldd	r25, Z+3	; 0x03
    588c:	04 2d       	mov	r16, r4
    588e:	a3 01       	movw	r20, r6
    5890:	0e 94 07 30 	call	0x600e	; 0x600e <__ftoa_engine>
    5894:	6c 01       	movw	r12, r24
    5896:	f9 81       	ldd	r31, Y+1	; 0x01
    5898:	fc 87       	std	Y+12, r31	; 0x0c
    589a:	f0 ff       	sbrs	r31, 0
    589c:	02 c0       	rjmp	.+4      	; 0x58a2 <vfprintf+0x18c>
    589e:	f3 ff       	sbrs	r31, 3
    58a0:	06 c0       	rjmp	.+12     	; 0x58ae <vfprintf+0x198>
    58a2:	91 fc       	sbrc	r9, 1
    58a4:	06 c0       	rjmp	.+12     	; 0x58b2 <vfprintf+0x19c>
    58a6:	92 fe       	sbrs	r9, 2
    58a8:	06 c0       	rjmp	.+12     	; 0x58b6 <vfprintf+0x1a0>
    58aa:	00 e2       	ldi	r16, 0x20	; 32
    58ac:	05 c0       	rjmp	.+10     	; 0x58b8 <vfprintf+0x1a2>
    58ae:	0d e2       	ldi	r16, 0x2D	; 45
    58b0:	03 c0       	rjmp	.+6      	; 0x58b8 <vfprintf+0x1a2>
    58b2:	0b e2       	ldi	r16, 0x2B	; 43
    58b4:	01 c0       	rjmp	.+2      	; 0x58b8 <vfprintf+0x1a2>
    58b6:	00 e0       	ldi	r16, 0x00	; 0
    58b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    58ba:	8c 70       	andi	r24, 0x0C	; 12
    58bc:	19 f0       	breq	.+6      	; 0x58c4 <vfprintf+0x1ae>
    58be:	01 11       	cpse	r16, r1
    58c0:	5a c2       	rjmp	.+1204   	; 0x5d76 <vfprintf+0x660>
    58c2:	9b c2       	rjmp	.+1334   	; 0x5dfa <vfprintf+0x6e4>
    58c4:	97 fe       	sbrs	r9, 7
    58c6:	10 c0       	rjmp	.+32     	; 0x58e8 <vfprintf+0x1d2>
    58c8:	4c 0c       	add	r4, r12
    58ca:	fc 85       	ldd	r31, Y+12	; 0x0c
    58cc:	f4 ff       	sbrs	r31, 4
    58ce:	04 c0       	rjmp	.+8      	; 0x58d8 <vfprintf+0x1c2>
    58d0:	8a 81       	ldd	r24, Y+2	; 0x02
    58d2:	81 33       	cpi	r24, 0x31	; 49
    58d4:	09 f4       	brne	.+2      	; 0x58d8 <vfprintf+0x1c2>
    58d6:	4a 94       	dec	r4
    58d8:	14 14       	cp	r1, r4
    58da:	74 f5       	brge	.+92     	; 0x5938 <vfprintf+0x222>
    58dc:	28 e0       	ldi	r18, 0x08	; 8
    58de:	24 15       	cp	r18, r4
    58e0:	78 f5       	brcc	.+94     	; 0x5940 <vfprintf+0x22a>
    58e2:	88 e0       	ldi	r24, 0x08	; 8
    58e4:	48 2e       	mov	r4, r24
    58e6:	2c c0       	rjmp	.+88     	; 0x5940 <vfprintf+0x22a>
    58e8:	96 fc       	sbrc	r9, 6
    58ea:	2a c0       	rjmp	.+84     	; 0x5940 <vfprintf+0x22a>
    58ec:	81 2f       	mov	r24, r17
    58ee:	90 e0       	ldi	r25, 0x00	; 0
    58f0:	8c 15       	cp	r24, r12
    58f2:	9d 05       	cpc	r25, r13
    58f4:	9c f0       	brlt	.+38     	; 0x591c <vfprintf+0x206>
    58f6:	3c ef       	ldi	r19, 0xFC	; 252
    58f8:	c3 16       	cp	r12, r19
    58fa:	3f ef       	ldi	r19, 0xFF	; 255
    58fc:	d3 06       	cpc	r13, r19
    58fe:	74 f0       	brlt	.+28     	; 0x591c <vfprintf+0x206>
    5900:	89 2d       	mov	r24, r9
    5902:	80 68       	ori	r24, 0x80	; 128
    5904:	98 2e       	mov	r9, r24
    5906:	0a c0       	rjmp	.+20     	; 0x591c <vfprintf+0x206>
    5908:	e2 e0       	ldi	r30, 0x02	; 2
    590a:	f0 e0       	ldi	r31, 0x00	; 0
    590c:	ec 0f       	add	r30, r28
    590e:	fd 1f       	adc	r31, r29
    5910:	e1 0f       	add	r30, r17
    5912:	f1 1d       	adc	r31, r1
    5914:	80 81       	ld	r24, Z
    5916:	80 33       	cpi	r24, 0x30	; 48
    5918:	19 f4       	brne	.+6      	; 0x5920 <vfprintf+0x20a>
    591a:	11 50       	subi	r17, 0x01	; 1
    591c:	11 11       	cpse	r17, r1
    591e:	f4 cf       	rjmp	.-24     	; 0x5908 <vfprintf+0x1f2>
    5920:	97 fe       	sbrs	r9, 7
    5922:	0e c0       	rjmp	.+28     	; 0x5940 <vfprintf+0x22a>
    5924:	44 24       	eor	r4, r4
    5926:	43 94       	inc	r4
    5928:	41 0e       	add	r4, r17
    592a:	81 2f       	mov	r24, r17
    592c:	90 e0       	ldi	r25, 0x00	; 0
    592e:	c8 16       	cp	r12, r24
    5930:	d9 06       	cpc	r13, r25
    5932:	2c f4       	brge	.+10     	; 0x593e <vfprintf+0x228>
    5934:	1c 19       	sub	r17, r12
    5936:	04 c0       	rjmp	.+8      	; 0x5940 <vfprintf+0x22a>
    5938:	44 24       	eor	r4, r4
    593a:	43 94       	inc	r4
    593c:	01 c0       	rjmp	.+2      	; 0x5940 <vfprintf+0x22a>
    593e:	10 e0       	ldi	r17, 0x00	; 0
    5940:	97 fe       	sbrs	r9, 7
    5942:	06 c0       	rjmp	.+12     	; 0x5950 <vfprintf+0x23a>
    5944:	1c 14       	cp	r1, r12
    5946:	1d 04       	cpc	r1, r13
    5948:	34 f4       	brge	.+12     	; 0x5956 <vfprintf+0x240>
    594a:	c6 01       	movw	r24, r12
    594c:	01 96       	adiw	r24, 0x01	; 1
    594e:	05 c0       	rjmp	.+10     	; 0x595a <vfprintf+0x244>
    5950:	85 e0       	ldi	r24, 0x05	; 5
    5952:	90 e0       	ldi	r25, 0x00	; 0
    5954:	02 c0       	rjmp	.+4      	; 0x595a <vfprintf+0x244>
    5956:	81 e0       	ldi	r24, 0x01	; 1
    5958:	90 e0       	ldi	r25, 0x00	; 0
    595a:	01 11       	cpse	r16, r1
    595c:	01 96       	adiw	r24, 0x01	; 1
    595e:	11 23       	and	r17, r17
    5960:	31 f0       	breq	.+12     	; 0x596e <vfprintf+0x258>
    5962:	21 2f       	mov	r18, r17
    5964:	30 e0       	ldi	r19, 0x00	; 0
    5966:	2f 5f       	subi	r18, 0xFF	; 255
    5968:	3f 4f       	sbci	r19, 0xFF	; 255
    596a:	82 0f       	add	r24, r18
    596c:	93 1f       	adc	r25, r19
    596e:	25 2d       	mov	r18, r5
    5970:	30 e0       	ldi	r19, 0x00	; 0
    5972:	82 17       	cp	r24, r18
    5974:	93 07       	cpc	r25, r19
    5976:	14 f4       	brge	.+4      	; 0x597c <vfprintf+0x266>
    5978:	58 1a       	sub	r5, r24
    597a:	01 c0       	rjmp	.+2      	; 0x597e <vfprintf+0x268>
    597c:	51 2c       	mov	r5, r1
    597e:	89 2d       	mov	r24, r9
    5980:	89 70       	andi	r24, 0x09	; 9
    5982:	49 f4       	brne	.+18     	; 0x5996 <vfprintf+0x280>
    5984:	55 20       	and	r5, r5
    5986:	39 f0       	breq	.+14     	; 0x5996 <vfprintf+0x280>
    5988:	b7 01       	movw	r22, r14
    598a:	80 e2       	ldi	r24, 0x20	; 32
    598c:	90 e0       	ldi	r25, 0x00	; 0
    598e:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5992:	5a 94       	dec	r5
    5994:	f7 cf       	rjmp	.-18     	; 0x5984 <vfprintf+0x26e>
    5996:	00 23       	and	r16, r16
    5998:	29 f0       	breq	.+10     	; 0x59a4 <vfprintf+0x28e>
    599a:	b7 01       	movw	r22, r14
    599c:	80 2f       	mov	r24, r16
    599e:	90 e0       	ldi	r25, 0x00	; 0
    59a0:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    59a4:	93 fc       	sbrc	r9, 3
    59a6:	09 c0       	rjmp	.+18     	; 0x59ba <vfprintf+0x2a4>
    59a8:	55 20       	and	r5, r5
    59aa:	39 f0       	breq	.+14     	; 0x59ba <vfprintf+0x2a4>
    59ac:	b7 01       	movw	r22, r14
    59ae:	80 e3       	ldi	r24, 0x30	; 48
    59b0:	90 e0       	ldi	r25, 0x00	; 0
    59b2:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    59b6:	5a 94       	dec	r5
    59b8:	f7 cf       	rjmp	.-18     	; 0x59a8 <vfprintf+0x292>
    59ba:	97 fe       	sbrs	r9, 7
    59bc:	4c c0       	rjmp	.+152    	; 0x5a56 <vfprintf+0x340>
    59be:	46 01       	movw	r8, r12
    59c0:	d7 fe       	sbrs	r13, 7
    59c2:	02 c0       	rjmp	.+4      	; 0x59c8 <vfprintf+0x2b2>
    59c4:	81 2c       	mov	r8, r1
    59c6:	91 2c       	mov	r9, r1
    59c8:	c6 01       	movw	r24, r12
    59ca:	88 19       	sub	r24, r8
    59cc:	99 09       	sbc	r25, r9
    59ce:	f3 01       	movw	r30, r6
    59d0:	e8 0f       	add	r30, r24
    59d2:	f9 1f       	adc	r31, r25
    59d4:	ed 87       	std	Y+13, r30	; 0x0d
    59d6:	fe 87       	std	Y+14, r31	; 0x0e
    59d8:	96 01       	movw	r18, r12
    59da:	24 19       	sub	r18, r4
    59dc:	31 09       	sbc	r19, r1
    59de:	2f 87       	std	Y+15, r18	; 0x0f
    59e0:	38 8b       	std	Y+16, r19	; 0x10
    59e2:	01 2f       	mov	r16, r17
    59e4:	10 e0       	ldi	r17, 0x00	; 0
    59e6:	11 95       	neg	r17
    59e8:	01 95       	neg	r16
    59ea:	11 09       	sbc	r17, r1
    59ec:	3f ef       	ldi	r19, 0xFF	; 255
    59ee:	83 16       	cp	r8, r19
    59f0:	93 06       	cpc	r9, r19
    59f2:	29 f4       	brne	.+10     	; 0x59fe <vfprintf+0x2e8>
    59f4:	b7 01       	movw	r22, r14
    59f6:	8e e2       	ldi	r24, 0x2E	; 46
    59f8:	90 e0       	ldi	r25, 0x00	; 0
    59fa:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    59fe:	c8 14       	cp	r12, r8
    5a00:	d9 04       	cpc	r13, r9
    5a02:	4c f0       	brlt	.+18     	; 0x5a16 <vfprintf+0x300>
    5a04:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a06:	98 89       	ldd	r25, Y+16	; 0x10
    5a08:	88 15       	cp	r24, r8
    5a0a:	99 05       	cpc	r25, r9
    5a0c:	24 f4       	brge	.+8      	; 0x5a16 <vfprintf+0x300>
    5a0e:	ed 85       	ldd	r30, Y+13	; 0x0d
    5a10:	fe 85       	ldd	r31, Y+14	; 0x0e
    5a12:	81 81       	ldd	r24, Z+1	; 0x01
    5a14:	01 c0       	rjmp	.+2      	; 0x5a18 <vfprintf+0x302>
    5a16:	80 e3       	ldi	r24, 0x30	; 48
    5a18:	f1 e0       	ldi	r31, 0x01	; 1
    5a1a:	8f 1a       	sub	r8, r31
    5a1c:	91 08       	sbc	r9, r1
    5a1e:	2d 85       	ldd	r18, Y+13	; 0x0d
    5a20:	3e 85       	ldd	r19, Y+14	; 0x0e
    5a22:	2f 5f       	subi	r18, 0xFF	; 255
    5a24:	3f 4f       	sbci	r19, 0xFF	; 255
    5a26:	2d 87       	std	Y+13, r18	; 0x0d
    5a28:	3e 87       	std	Y+14, r19	; 0x0e
    5a2a:	80 16       	cp	r8, r16
    5a2c:	91 06       	cpc	r9, r17
    5a2e:	2c f0       	brlt	.+10     	; 0x5a3a <vfprintf+0x324>
    5a30:	b7 01       	movw	r22, r14
    5a32:	90 e0       	ldi	r25, 0x00	; 0
    5a34:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5a38:	d9 cf       	rjmp	.-78     	; 0x59ec <vfprintf+0x2d6>
    5a3a:	c8 14       	cp	r12, r8
    5a3c:	d9 04       	cpc	r13, r9
    5a3e:	41 f4       	brne	.+16     	; 0x5a50 <vfprintf+0x33a>
    5a40:	9a 81       	ldd	r25, Y+2	; 0x02
    5a42:	96 33       	cpi	r25, 0x36	; 54
    5a44:	20 f4       	brcc	.+8      	; 0x5a4e <vfprintf+0x338>
    5a46:	95 33       	cpi	r25, 0x35	; 53
    5a48:	19 f4       	brne	.+6      	; 0x5a50 <vfprintf+0x33a>
    5a4a:	3c 85       	ldd	r19, Y+12	; 0x0c
    5a4c:	34 ff       	sbrs	r19, 4
    5a4e:	81 e3       	ldi	r24, 0x31	; 49
    5a50:	b7 01       	movw	r22, r14
    5a52:	90 e0       	ldi	r25, 0x00	; 0
    5a54:	4e c0       	rjmp	.+156    	; 0x5af2 <vfprintf+0x3dc>
    5a56:	8a 81       	ldd	r24, Y+2	; 0x02
    5a58:	81 33       	cpi	r24, 0x31	; 49
    5a5a:	19 f0       	breq	.+6      	; 0x5a62 <vfprintf+0x34c>
    5a5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a5e:	9f 7e       	andi	r25, 0xEF	; 239
    5a60:	9c 87       	std	Y+12, r25	; 0x0c
    5a62:	b7 01       	movw	r22, r14
    5a64:	90 e0       	ldi	r25, 0x00	; 0
    5a66:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5a6a:	11 11       	cpse	r17, r1
    5a6c:	05 c0       	rjmp	.+10     	; 0x5a78 <vfprintf+0x362>
    5a6e:	94 fc       	sbrc	r9, 4
    5a70:	18 c0       	rjmp	.+48     	; 0x5aa2 <vfprintf+0x38c>
    5a72:	85 e6       	ldi	r24, 0x65	; 101
    5a74:	90 e0       	ldi	r25, 0x00	; 0
    5a76:	17 c0       	rjmp	.+46     	; 0x5aa6 <vfprintf+0x390>
    5a78:	b7 01       	movw	r22, r14
    5a7a:	8e e2       	ldi	r24, 0x2E	; 46
    5a7c:	90 e0       	ldi	r25, 0x00	; 0
    5a7e:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5a82:	1e 5f       	subi	r17, 0xFE	; 254
    5a84:	82 e0       	ldi	r24, 0x02	; 2
    5a86:	01 e0       	ldi	r16, 0x01	; 1
    5a88:	08 0f       	add	r16, r24
    5a8a:	f3 01       	movw	r30, r6
    5a8c:	e8 0f       	add	r30, r24
    5a8e:	f1 1d       	adc	r31, r1
    5a90:	80 81       	ld	r24, Z
    5a92:	b7 01       	movw	r22, r14
    5a94:	90 e0       	ldi	r25, 0x00	; 0
    5a96:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5a9a:	80 2f       	mov	r24, r16
    5a9c:	01 13       	cpse	r16, r17
    5a9e:	f3 cf       	rjmp	.-26     	; 0x5a86 <vfprintf+0x370>
    5aa0:	e6 cf       	rjmp	.-52     	; 0x5a6e <vfprintf+0x358>
    5aa2:	85 e4       	ldi	r24, 0x45	; 69
    5aa4:	90 e0       	ldi	r25, 0x00	; 0
    5aa6:	b7 01       	movw	r22, r14
    5aa8:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5aac:	d7 fc       	sbrc	r13, 7
    5aae:	06 c0       	rjmp	.+12     	; 0x5abc <vfprintf+0x3a6>
    5ab0:	c1 14       	cp	r12, r1
    5ab2:	d1 04       	cpc	r13, r1
    5ab4:	41 f4       	brne	.+16     	; 0x5ac6 <vfprintf+0x3b0>
    5ab6:	ec 85       	ldd	r30, Y+12	; 0x0c
    5ab8:	e4 ff       	sbrs	r30, 4
    5aba:	05 c0       	rjmp	.+10     	; 0x5ac6 <vfprintf+0x3b0>
    5abc:	d1 94       	neg	r13
    5abe:	c1 94       	neg	r12
    5ac0:	d1 08       	sbc	r13, r1
    5ac2:	8d e2       	ldi	r24, 0x2D	; 45
    5ac4:	01 c0       	rjmp	.+2      	; 0x5ac8 <vfprintf+0x3b2>
    5ac6:	8b e2       	ldi	r24, 0x2B	; 43
    5ac8:	b7 01       	movw	r22, r14
    5aca:	90 e0       	ldi	r25, 0x00	; 0
    5acc:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5ad0:	80 e3       	ldi	r24, 0x30	; 48
    5ad2:	2a e0       	ldi	r18, 0x0A	; 10
    5ad4:	c2 16       	cp	r12, r18
    5ad6:	d1 04       	cpc	r13, r1
    5ad8:	2c f0       	brlt	.+10     	; 0x5ae4 <vfprintf+0x3ce>
    5ada:	8f 5f       	subi	r24, 0xFF	; 255
    5adc:	fa e0       	ldi	r31, 0x0A	; 10
    5ade:	cf 1a       	sub	r12, r31
    5ae0:	d1 08       	sbc	r13, r1
    5ae2:	f7 cf       	rjmp	.-18     	; 0x5ad2 <vfprintf+0x3bc>
    5ae4:	b7 01       	movw	r22, r14
    5ae6:	90 e0       	ldi	r25, 0x00	; 0
    5ae8:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5aec:	b7 01       	movw	r22, r14
    5aee:	c6 01       	movw	r24, r12
    5af0:	c0 96       	adiw	r24, 0x30	; 48
    5af2:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5af6:	54 c1       	rjmp	.+680    	; 0x5da0 <vfprintf+0x68a>
    5af8:	83 36       	cpi	r24, 0x63	; 99
    5afa:	31 f0       	breq	.+12     	; 0x5b08 <vfprintf+0x3f2>
    5afc:	83 37       	cpi	r24, 0x73	; 115
    5afe:	79 f0       	breq	.+30     	; 0x5b1e <vfprintf+0x408>
    5b00:	83 35       	cpi	r24, 0x53	; 83
    5b02:	09 f0       	breq	.+2      	; 0x5b06 <vfprintf+0x3f0>
    5b04:	56 c0       	rjmp	.+172    	; 0x5bb2 <vfprintf+0x49c>
    5b06:	20 c0       	rjmp	.+64     	; 0x5b48 <vfprintf+0x432>
    5b08:	56 01       	movw	r10, r12
    5b0a:	32 e0       	ldi	r19, 0x02	; 2
    5b0c:	a3 0e       	add	r10, r19
    5b0e:	b1 1c       	adc	r11, r1
    5b10:	f6 01       	movw	r30, r12
    5b12:	80 81       	ld	r24, Z
    5b14:	89 83       	std	Y+1, r24	; 0x01
    5b16:	01 e0       	ldi	r16, 0x01	; 1
    5b18:	10 e0       	ldi	r17, 0x00	; 0
    5b1a:	63 01       	movw	r12, r6
    5b1c:	12 c0       	rjmp	.+36     	; 0x5b42 <vfprintf+0x42c>
    5b1e:	56 01       	movw	r10, r12
    5b20:	f2 e0       	ldi	r31, 0x02	; 2
    5b22:	af 0e       	add	r10, r31
    5b24:	b1 1c       	adc	r11, r1
    5b26:	f6 01       	movw	r30, r12
    5b28:	c0 80       	ld	r12, Z
    5b2a:	d1 80       	ldd	r13, Z+1	; 0x01
    5b2c:	96 fe       	sbrs	r9, 6
    5b2e:	03 c0       	rjmp	.+6      	; 0x5b36 <vfprintf+0x420>
    5b30:	61 2f       	mov	r22, r17
    5b32:	70 e0       	ldi	r23, 0x00	; 0
    5b34:	02 c0       	rjmp	.+4      	; 0x5b3a <vfprintf+0x424>
    5b36:	6f ef       	ldi	r22, 0xFF	; 255
    5b38:	7f ef       	ldi	r23, 0xFF	; 255
    5b3a:	c6 01       	movw	r24, r12
    5b3c:	0e 94 fc 30 	call	0x61f8	; 0x61f8 <strnlen>
    5b40:	8c 01       	movw	r16, r24
    5b42:	f9 2d       	mov	r31, r9
    5b44:	ff 77       	andi	r31, 0x7F	; 127
    5b46:	14 c0       	rjmp	.+40     	; 0x5b70 <vfprintf+0x45a>
    5b48:	56 01       	movw	r10, r12
    5b4a:	22 e0       	ldi	r18, 0x02	; 2
    5b4c:	a2 0e       	add	r10, r18
    5b4e:	b1 1c       	adc	r11, r1
    5b50:	f6 01       	movw	r30, r12
    5b52:	c0 80       	ld	r12, Z
    5b54:	d1 80       	ldd	r13, Z+1	; 0x01
    5b56:	96 fe       	sbrs	r9, 6
    5b58:	03 c0       	rjmp	.+6      	; 0x5b60 <vfprintf+0x44a>
    5b5a:	61 2f       	mov	r22, r17
    5b5c:	70 e0       	ldi	r23, 0x00	; 0
    5b5e:	02 c0       	rjmp	.+4      	; 0x5b64 <vfprintf+0x44e>
    5b60:	6f ef       	ldi	r22, 0xFF	; 255
    5b62:	7f ef       	ldi	r23, 0xFF	; 255
    5b64:	c6 01       	movw	r24, r12
    5b66:	0e 94 df 30 	call	0x61be	; 0x61be <strnlen_P>
    5b6a:	8c 01       	movw	r16, r24
    5b6c:	f9 2d       	mov	r31, r9
    5b6e:	f0 68       	ori	r31, 0x80	; 128
    5b70:	9f 2e       	mov	r9, r31
    5b72:	f3 fd       	sbrc	r31, 3
    5b74:	1a c0       	rjmp	.+52     	; 0x5baa <vfprintf+0x494>
    5b76:	85 2d       	mov	r24, r5
    5b78:	90 e0       	ldi	r25, 0x00	; 0
    5b7a:	08 17       	cp	r16, r24
    5b7c:	19 07       	cpc	r17, r25
    5b7e:	a8 f4       	brcc	.+42     	; 0x5baa <vfprintf+0x494>
    5b80:	b7 01       	movw	r22, r14
    5b82:	80 e2       	ldi	r24, 0x20	; 32
    5b84:	90 e0       	ldi	r25, 0x00	; 0
    5b86:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5b8a:	5a 94       	dec	r5
    5b8c:	f4 cf       	rjmp	.-24     	; 0x5b76 <vfprintf+0x460>
    5b8e:	f6 01       	movw	r30, r12
    5b90:	97 fc       	sbrc	r9, 7
    5b92:	85 91       	lpm	r24, Z+
    5b94:	97 fe       	sbrs	r9, 7
    5b96:	81 91       	ld	r24, Z+
    5b98:	6f 01       	movw	r12, r30
    5b9a:	b7 01       	movw	r22, r14
    5b9c:	90 e0       	ldi	r25, 0x00	; 0
    5b9e:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5ba2:	51 10       	cpse	r5, r1
    5ba4:	5a 94       	dec	r5
    5ba6:	01 50       	subi	r16, 0x01	; 1
    5ba8:	11 09       	sbc	r17, r1
    5baa:	01 15       	cp	r16, r1
    5bac:	11 05       	cpc	r17, r1
    5bae:	79 f7       	brne	.-34     	; 0x5b8e <vfprintf+0x478>
    5bb0:	f7 c0       	rjmp	.+494    	; 0x5da0 <vfprintf+0x68a>
    5bb2:	84 36       	cpi	r24, 0x64	; 100
    5bb4:	11 f0       	breq	.+4      	; 0x5bba <vfprintf+0x4a4>
    5bb6:	89 36       	cpi	r24, 0x69	; 105
    5bb8:	61 f5       	brne	.+88     	; 0x5c12 <vfprintf+0x4fc>
    5bba:	56 01       	movw	r10, r12
    5bbc:	97 fe       	sbrs	r9, 7
    5bbe:	09 c0       	rjmp	.+18     	; 0x5bd2 <vfprintf+0x4bc>
    5bc0:	24 e0       	ldi	r18, 0x04	; 4
    5bc2:	a2 0e       	add	r10, r18
    5bc4:	b1 1c       	adc	r11, r1
    5bc6:	f6 01       	movw	r30, r12
    5bc8:	60 81       	ld	r22, Z
    5bca:	71 81       	ldd	r23, Z+1	; 0x01
    5bcc:	82 81       	ldd	r24, Z+2	; 0x02
    5bce:	93 81       	ldd	r25, Z+3	; 0x03
    5bd0:	0a c0       	rjmp	.+20     	; 0x5be6 <vfprintf+0x4d0>
    5bd2:	f2 e0       	ldi	r31, 0x02	; 2
    5bd4:	af 0e       	add	r10, r31
    5bd6:	b1 1c       	adc	r11, r1
    5bd8:	f6 01       	movw	r30, r12
    5bda:	60 81       	ld	r22, Z
    5bdc:	71 81       	ldd	r23, Z+1	; 0x01
    5bde:	07 2e       	mov	r0, r23
    5be0:	00 0c       	add	r0, r0
    5be2:	88 0b       	sbc	r24, r24
    5be4:	99 0b       	sbc	r25, r25
    5be6:	f9 2d       	mov	r31, r9
    5be8:	ff 76       	andi	r31, 0x6F	; 111
    5bea:	9f 2e       	mov	r9, r31
    5bec:	97 ff       	sbrs	r25, 7
    5bee:	09 c0       	rjmp	.+18     	; 0x5c02 <vfprintf+0x4ec>
    5bf0:	90 95       	com	r25
    5bf2:	80 95       	com	r24
    5bf4:	70 95       	com	r23
    5bf6:	61 95       	neg	r22
    5bf8:	7f 4f       	sbci	r23, 0xFF	; 255
    5bfa:	8f 4f       	sbci	r24, 0xFF	; 255
    5bfc:	9f 4f       	sbci	r25, 0xFF	; 255
    5bfe:	f0 68       	ori	r31, 0x80	; 128
    5c00:	9f 2e       	mov	r9, r31
    5c02:	2a e0       	ldi	r18, 0x0A	; 10
    5c04:	30 e0       	ldi	r19, 0x00	; 0
    5c06:	a3 01       	movw	r20, r6
    5c08:	0e 94 82 31 	call	0x6304	; 0x6304 <__ultoa_invert>
    5c0c:	c8 2e       	mov	r12, r24
    5c0e:	c6 18       	sub	r12, r6
    5c10:	3f c0       	rjmp	.+126    	; 0x5c90 <vfprintf+0x57a>
    5c12:	09 2d       	mov	r16, r9
    5c14:	85 37       	cpi	r24, 0x75	; 117
    5c16:	21 f4       	brne	.+8      	; 0x5c20 <vfprintf+0x50a>
    5c18:	0f 7e       	andi	r16, 0xEF	; 239
    5c1a:	2a e0       	ldi	r18, 0x0A	; 10
    5c1c:	30 e0       	ldi	r19, 0x00	; 0
    5c1e:	1d c0       	rjmp	.+58     	; 0x5c5a <vfprintf+0x544>
    5c20:	09 7f       	andi	r16, 0xF9	; 249
    5c22:	8f 36       	cpi	r24, 0x6F	; 111
    5c24:	91 f0       	breq	.+36     	; 0x5c4a <vfprintf+0x534>
    5c26:	18 f4       	brcc	.+6      	; 0x5c2e <vfprintf+0x518>
    5c28:	88 35       	cpi	r24, 0x58	; 88
    5c2a:	59 f0       	breq	.+22     	; 0x5c42 <vfprintf+0x52c>
    5c2c:	c3 c0       	rjmp	.+390    	; 0x5db4 <vfprintf+0x69e>
    5c2e:	80 37       	cpi	r24, 0x70	; 112
    5c30:	19 f0       	breq	.+6      	; 0x5c38 <vfprintf+0x522>
    5c32:	88 37       	cpi	r24, 0x78	; 120
    5c34:	11 f0       	breq	.+4      	; 0x5c3a <vfprintf+0x524>
    5c36:	be c0       	rjmp	.+380    	; 0x5db4 <vfprintf+0x69e>
    5c38:	00 61       	ori	r16, 0x10	; 16
    5c3a:	04 ff       	sbrs	r16, 4
    5c3c:	09 c0       	rjmp	.+18     	; 0x5c50 <vfprintf+0x53a>
    5c3e:	04 60       	ori	r16, 0x04	; 4
    5c40:	07 c0       	rjmp	.+14     	; 0x5c50 <vfprintf+0x53a>
    5c42:	94 fe       	sbrs	r9, 4
    5c44:	08 c0       	rjmp	.+16     	; 0x5c56 <vfprintf+0x540>
    5c46:	06 60       	ori	r16, 0x06	; 6
    5c48:	06 c0       	rjmp	.+12     	; 0x5c56 <vfprintf+0x540>
    5c4a:	28 e0       	ldi	r18, 0x08	; 8
    5c4c:	30 e0       	ldi	r19, 0x00	; 0
    5c4e:	05 c0       	rjmp	.+10     	; 0x5c5a <vfprintf+0x544>
    5c50:	20 e1       	ldi	r18, 0x10	; 16
    5c52:	30 e0       	ldi	r19, 0x00	; 0
    5c54:	02 c0       	rjmp	.+4      	; 0x5c5a <vfprintf+0x544>
    5c56:	20 e1       	ldi	r18, 0x10	; 16
    5c58:	32 e0       	ldi	r19, 0x02	; 2
    5c5a:	56 01       	movw	r10, r12
    5c5c:	07 ff       	sbrs	r16, 7
    5c5e:	09 c0       	rjmp	.+18     	; 0x5c72 <vfprintf+0x55c>
    5c60:	84 e0       	ldi	r24, 0x04	; 4
    5c62:	a8 0e       	add	r10, r24
    5c64:	b1 1c       	adc	r11, r1
    5c66:	f6 01       	movw	r30, r12
    5c68:	60 81       	ld	r22, Z
    5c6a:	71 81       	ldd	r23, Z+1	; 0x01
    5c6c:	82 81       	ldd	r24, Z+2	; 0x02
    5c6e:	93 81       	ldd	r25, Z+3	; 0x03
    5c70:	08 c0       	rjmp	.+16     	; 0x5c82 <vfprintf+0x56c>
    5c72:	f2 e0       	ldi	r31, 0x02	; 2
    5c74:	af 0e       	add	r10, r31
    5c76:	b1 1c       	adc	r11, r1
    5c78:	f6 01       	movw	r30, r12
    5c7a:	60 81       	ld	r22, Z
    5c7c:	71 81       	ldd	r23, Z+1	; 0x01
    5c7e:	80 e0       	ldi	r24, 0x00	; 0
    5c80:	90 e0       	ldi	r25, 0x00	; 0
    5c82:	a3 01       	movw	r20, r6
    5c84:	0e 94 82 31 	call	0x6304	; 0x6304 <__ultoa_invert>
    5c88:	c8 2e       	mov	r12, r24
    5c8a:	c6 18       	sub	r12, r6
    5c8c:	0f 77       	andi	r16, 0x7F	; 127
    5c8e:	90 2e       	mov	r9, r16
    5c90:	96 fe       	sbrs	r9, 6
    5c92:	0b c0       	rjmp	.+22     	; 0x5caa <vfprintf+0x594>
    5c94:	09 2d       	mov	r16, r9
    5c96:	0e 7f       	andi	r16, 0xFE	; 254
    5c98:	c1 16       	cp	r12, r17
    5c9a:	50 f4       	brcc	.+20     	; 0x5cb0 <vfprintf+0x59a>
    5c9c:	94 fe       	sbrs	r9, 4
    5c9e:	0a c0       	rjmp	.+20     	; 0x5cb4 <vfprintf+0x59e>
    5ca0:	92 fc       	sbrc	r9, 2
    5ca2:	08 c0       	rjmp	.+16     	; 0x5cb4 <vfprintf+0x59e>
    5ca4:	09 2d       	mov	r16, r9
    5ca6:	0e 7e       	andi	r16, 0xEE	; 238
    5ca8:	05 c0       	rjmp	.+10     	; 0x5cb4 <vfprintf+0x59e>
    5caa:	dc 2c       	mov	r13, r12
    5cac:	09 2d       	mov	r16, r9
    5cae:	03 c0       	rjmp	.+6      	; 0x5cb6 <vfprintf+0x5a0>
    5cb0:	dc 2c       	mov	r13, r12
    5cb2:	01 c0       	rjmp	.+2      	; 0x5cb6 <vfprintf+0x5a0>
    5cb4:	d1 2e       	mov	r13, r17
    5cb6:	04 ff       	sbrs	r16, 4
    5cb8:	0d c0       	rjmp	.+26     	; 0x5cd4 <vfprintf+0x5be>
    5cba:	fe 01       	movw	r30, r28
    5cbc:	ec 0d       	add	r30, r12
    5cbe:	f1 1d       	adc	r31, r1
    5cc0:	80 81       	ld	r24, Z
    5cc2:	80 33       	cpi	r24, 0x30	; 48
    5cc4:	11 f4       	brne	.+4      	; 0x5cca <vfprintf+0x5b4>
    5cc6:	09 7e       	andi	r16, 0xE9	; 233
    5cc8:	09 c0       	rjmp	.+18     	; 0x5cdc <vfprintf+0x5c6>
    5cca:	02 ff       	sbrs	r16, 2
    5ccc:	06 c0       	rjmp	.+12     	; 0x5cda <vfprintf+0x5c4>
    5cce:	d3 94       	inc	r13
    5cd0:	d3 94       	inc	r13
    5cd2:	04 c0       	rjmp	.+8      	; 0x5cdc <vfprintf+0x5c6>
    5cd4:	80 2f       	mov	r24, r16
    5cd6:	86 78       	andi	r24, 0x86	; 134
    5cd8:	09 f0       	breq	.+2      	; 0x5cdc <vfprintf+0x5c6>
    5cda:	d3 94       	inc	r13
    5cdc:	03 fd       	sbrc	r16, 3
    5cde:	11 c0       	rjmp	.+34     	; 0x5d02 <vfprintf+0x5ec>
    5ce0:	00 ff       	sbrs	r16, 0
    5ce2:	06 c0       	rjmp	.+12     	; 0x5cf0 <vfprintf+0x5da>
    5ce4:	1c 2d       	mov	r17, r12
    5ce6:	d5 14       	cp	r13, r5
    5ce8:	80 f4       	brcc	.+32     	; 0x5d0a <vfprintf+0x5f4>
    5cea:	15 0d       	add	r17, r5
    5cec:	1d 19       	sub	r17, r13
    5cee:	0d c0       	rjmp	.+26     	; 0x5d0a <vfprintf+0x5f4>
    5cf0:	d5 14       	cp	r13, r5
    5cf2:	58 f4       	brcc	.+22     	; 0x5d0a <vfprintf+0x5f4>
    5cf4:	b7 01       	movw	r22, r14
    5cf6:	80 e2       	ldi	r24, 0x20	; 32
    5cf8:	90 e0       	ldi	r25, 0x00	; 0
    5cfa:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5cfe:	d3 94       	inc	r13
    5d00:	f7 cf       	rjmp	.-18     	; 0x5cf0 <vfprintf+0x5da>
    5d02:	d5 14       	cp	r13, r5
    5d04:	10 f4       	brcc	.+4      	; 0x5d0a <vfprintf+0x5f4>
    5d06:	5d 18       	sub	r5, r13
    5d08:	01 c0       	rjmp	.+2      	; 0x5d0c <vfprintf+0x5f6>
    5d0a:	51 2c       	mov	r5, r1
    5d0c:	04 ff       	sbrs	r16, 4
    5d0e:	10 c0       	rjmp	.+32     	; 0x5d30 <vfprintf+0x61a>
    5d10:	b7 01       	movw	r22, r14
    5d12:	80 e3       	ldi	r24, 0x30	; 48
    5d14:	90 e0       	ldi	r25, 0x00	; 0
    5d16:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5d1a:	02 ff       	sbrs	r16, 2
    5d1c:	17 c0       	rjmp	.+46     	; 0x5d4c <vfprintf+0x636>
    5d1e:	01 fd       	sbrc	r16, 1
    5d20:	03 c0       	rjmp	.+6      	; 0x5d28 <vfprintf+0x612>
    5d22:	88 e7       	ldi	r24, 0x78	; 120
    5d24:	90 e0       	ldi	r25, 0x00	; 0
    5d26:	02 c0       	rjmp	.+4      	; 0x5d2c <vfprintf+0x616>
    5d28:	88 e5       	ldi	r24, 0x58	; 88
    5d2a:	90 e0       	ldi	r25, 0x00	; 0
    5d2c:	b7 01       	movw	r22, r14
    5d2e:	0c c0       	rjmp	.+24     	; 0x5d48 <vfprintf+0x632>
    5d30:	80 2f       	mov	r24, r16
    5d32:	86 78       	andi	r24, 0x86	; 134
    5d34:	59 f0       	breq	.+22     	; 0x5d4c <vfprintf+0x636>
    5d36:	01 ff       	sbrs	r16, 1
    5d38:	02 c0       	rjmp	.+4      	; 0x5d3e <vfprintf+0x628>
    5d3a:	8b e2       	ldi	r24, 0x2B	; 43
    5d3c:	01 c0       	rjmp	.+2      	; 0x5d40 <vfprintf+0x62a>
    5d3e:	80 e2       	ldi	r24, 0x20	; 32
    5d40:	07 fd       	sbrc	r16, 7
    5d42:	8d e2       	ldi	r24, 0x2D	; 45
    5d44:	b7 01       	movw	r22, r14
    5d46:	90 e0       	ldi	r25, 0x00	; 0
    5d48:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5d4c:	c1 16       	cp	r12, r17
    5d4e:	38 f4       	brcc	.+14     	; 0x5d5e <vfprintf+0x648>
    5d50:	b7 01       	movw	r22, r14
    5d52:	80 e3       	ldi	r24, 0x30	; 48
    5d54:	90 e0       	ldi	r25, 0x00	; 0
    5d56:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5d5a:	11 50       	subi	r17, 0x01	; 1
    5d5c:	f7 cf       	rjmp	.-18     	; 0x5d4c <vfprintf+0x636>
    5d5e:	ca 94       	dec	r12
    5d60:	f3 01       	movw	r30, r6
    5d62:	ec 0d       	add	r30, r12
    5d64:	f1 1d       	adc	r31, r1
    5d66:	80 81       	ld	r24, Z
    5d68:	b7 01       	movw	r22, r14
    5d6a:	90 e0       	ldi	r25, 0x00	; 0
    5d6c:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5d70:	c1 10       	cpse	r12, r1
    5d72:	f5 cf       	rjmp	.-22     	; 0x5d5e <vfprintf+0x648>
    5d74:	15 c0       	rjmp	.+42     	; 0x5da0 <vfprintf+0x68a>
    5d76:	f4 e0       	ldi	r31, 0x04	; 4
    5d78:	f5 15       	cp	r31, r5
    5d7a:	60 f5       	brcc	.+88     	; 0x5dd4 <vfprintf+0x6be>
    5d7c:	84 e0       	ldi	r24, 0x04	; 4
    5d7e:	58 1a       	sub	r5, r24
    5d80:	93 fe       	sbrs	r9, 3
    5d82:	1f c0       	rjmp	.+62     	; 0x5dc2 <vfprintf+0x6ac>
    5d84:	01 11       	cpse	r16, r1
    5d86:	27 c0       	rjmp	.+78     	; 0x5dd6 <vfprintf+0x6c0>
    5d88:	2c 85       	ldd	r18, Y+12	; 0x0c
    5d8a:	23 ff       	sbrs	r18, 3
    5d8c:	2a c0       	rjmp	.+84     	; 0x5de2 <vfprintf+0x6cc>
    5d8e:	04 e6       	ldi	r16, 0x64	; 100
    5d90:	11 e0       	ldi	r17, 0x01	; 1
    5d92:	39 2d       	mov	r19, r9
    5d94:	30 71       	andi	r19, 0x10	; 16
    5d96:	93 2e       	mov	r9, r19
    5d98:	f8 01       	movw	r30, r16
    5d9a:	84 91       	lpm	r24, Z
    5d9c:	81 11       	cpse	r24, r1
    5d9e:	24 c0       	rjmp	.+72     	; 0x5de8 <vfprintf+0x6d2>
    5da0:	55 20       	and	r5, r5
    5da2:	09 f4       	brne	.+2      	; 0x5da6 <vfprintf+0x690>
    5da4:	e4 cc       	rjmp	.-1592   	; 0x576e <vfprintf+0x58>
    5da6:	b7 01       	movw	r22, r14
    5da8:	80 e2       	ldi	r24, 0x20	; 32
    5daa:	90 e0       	ldi	r25, 0x00	; 0
    5dac:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5db0:	5a 94       	dec	r5
    5db2:	f6 cf       	rjmp	.-20     	; 0x5da0 <vfprintf+0x68a>
    5db4:	f7 01       	movw	r30, r14
    5db6:	86 81       	ldd	r24, Z+6	; 0x06
    5db8:	97 81       	ldd	r25, Z+7	; 0x07
    5dba:	26 c0       	rjmp	.+76     	; 0x5e08 <vfprintf+0x6f2>
    5dbc:	8f ef       	ldi	r24, 0xFF	; 255
    5dbe:	9f ef       	ldi	r25, 0xFF	; 255
    5dc0:	23 c0       	rjmp	.+70     	; 0x5e08 <vfprintf+0x6f2>
    5dc2:	b7 01       	movw	r22, r14
    5dc4:	80 e2       	ldi	r24, 0x20	; 32
    5dc6:	90 e0       	ldi	r25, 0x00	; 0
    5dc8:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5dcc:	5a 94       	dec	r5
    5dce:	51 10       	cpse	r5, r1
    5dd0:	f8 cf       	rjmp	.-16     	; 0x5dc2 <vfprintf+0x6ac>
    5dd2:	d8 cf       	rjmp	.-80     	; 0x5d84 <vfprintf+0x66e>
    5dd4:	51 2c       	mov	r5, r1
    5dd6:	b7 01       	movw	r22, r14
    5dd8:	80 2f       	mov	r24, r16
    5dda:	90 e0       	ldi	r25, 0x00	; 0
    5ddc:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5de0:	d3 cf       	rjmp	.-90     	; 0x5d88 <vfprintf+0x672>
    5de2:	08 e6       	ldi	r16, 0x68	; 104
    5de4:	11 e0       	ldi	r17, 0x01	; 1
    5de6:	d5 cf       	rjmp	.-86     	; 0x5d92 <vfprintf+0x67c>
    5de8:	91 10       	cpse	r9, r1
    5dea:	80 52       	subi	r24, 0x20	; 32
    5dec:	b7 01       	movw	r22, r14
    5dee:	90 e0       	ldi	r25, 0x00	; 0
    5df0:	0e 94 24 31 	call	0x6248	; 0x6248 <fputc>
    5df4:	0f 5f       	subi	r16, 0xFF	; 255
    5df6:	1f 4f       	sbci	r17, 0xFF	; 255
    5df8:	cf cf       	rjmp	.-98     	; 0x5d98 <vfprintf+0x682>
    5dfa:	23 e0       	ldi	r18, 0x03	; 3
    5dfc:	25 15       	cp	r18, r5
    5dfe:	10 f4       	brcc	.+4      	; 0x5e04 <vfprintf+0x6ee>
    5e00:	83 e0       	ldi	r24, 0x03	; 3
    5e02:	bd cf       	rjmp	.-134    	; 0x5d7e <vfprintf+0x668>
    5e04:	51 2c       	mov	r5, r1
    5e06:	c0 cf       	rjmp	.-128    	; 0x5d88 <vfprintf+0x672>
    5e08:	60 96       	adiw	r28, 0x10	; 16
    5e0a:	e2 e1       	ldi	r30, 0x12	; 18
    5e0c:	0c 94 65 2f 	jmp	0x5eca	; 0x5eca <__epilogue_restores__>

00005e10 <__divmodhi4>:
    5e10:	97 fb       	bst	r25, 7
    5e12:	07 2e       	mov	r0, r23
    5e14:	16 f4       	brtc	.+4      	; 0x5e1a <__divmodhi4+0xa>
    5e16:	00 94       	com	r0
    5e18:	07 d0       	rcall	.+14     	; 0x5e28 <__divmodhi4_neg1>
    5e1a:	77 fd       	sbrc	r23, 7
    5e1c:	09 d0       	rcall	.+18     	; 0x5e30 <__divmodhi4_neg2>
    5e1e:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <__udivmodhi4>
    5e22:	07 fc       	sbrc	r0, 7
    5e24:	05 d0       	rcall	.+10     	; 0x5e30 <__divmodhi4_neg2>
    5e26:	3e f4       	brtc	.+14     	; 0x5e36 <__divmodhi4_exit>

00005e28 <__divmodhi4_neg1>:
    5e28:	90 95       	com	r25
    5e2a:	81 95       	neg	r24
    5e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    5e2e:	08 95       	ret

00005e30 <__divmodhi4_neg2>:
    5e30:	70 95       	com	r23
    5e32:	61 95       	neg	r22
    5e34:	7f 4f       	sbci	r23, 0xFF	; 255

00005e36 <__divmodhi4_exit>:
    5e36:	08 95       	ret

00005e38 <__divmodsi4>:
    5e38:	05 2e       	mov	r0, r21
    5e3a:	97 fb       	bst	r25, 7
    5e3c:	1e f4       	brtc	.+6      	; 0x5e44 <__divmodsi4+0xc>
    5e3e:	00 94       	com	r0
    5e40:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__negsi2>
    5e44:	57 fd       	sbrc	r21, 7
    5e46:	07 d0       	rcall	.+14     	; 0x5e56 <__divmodsi4_neg2>
    5e48:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <__udivmodsi4>
    5e4c:	07 fc       	sbrc	r0, 7
    5e4e:	03 d0       	rcall	.+6      	; 0x5e56 <__divmodsi4_neg2>
    5e50:	4e f4       	brtc	.+18     	; 0x5e64 <__divmodsi4_exit>
    5e52:	0c 94 33 2f 	jmp	0x5e66	; 0x5e66 <__negsi2>

00005e56 <__divmodsi4_neg2>:
    5e56:	50 95       	com	r21
    5e58:	40 95       	com	r20
    5e5a:	30 95       	com	r19
    5e5c:	21 95       	neg	r18
    5e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    5e60:	4f 4f       	sbci	r20, 0xFF	; 255
    5e62:	5f 4f       	sbci	r21, 0xFF	; 255

00005e64 <__divmodsi4_exit>:
    5e64:	08 95       	ret

00005e66 <__negsi2>:
    5e66:	90 95       	com	r25
    5e68:	80 95       	com	r24
    5e6a:	70 95       	com	r23
    5e6c:	61 95       	neg	r22
    5e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    5e70:	8f 4f       	sbci	r24, 0xFF	; 255
    5e72:	9f 4f       	sbci	r25, 0xFF	; 255
    5e74:	08 95       	ret

00005e76 <__tablejump2__>:
    5e76:	ee 0f       	add	r30, r30
    5e78:	ff 1f       	adc	r31, r31
    5e7a:	05 90       	lpm	r0, Z+
    5e7c:	f4 91       	lpm	r31, Z
    5e7e:	e0 2d       	mov	r30, r0
    5e80:	09 94       	ijmp

00005e82 <__muluhisi3>:
    5e82:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <__umulhisi3>
    5e86:	a5 9f       	mul	r26, r21
    5e88:	90 0d       	add	r25, r0
    5e8a:	b4 9f       	mul	r27, r20
    5e8c:	90 0d       	add	r25, r0
    5e8e:	a4 9f       	mul	r26, r20
    5e90:	80 0d       	add	r24, r0
    5e92:	91 1d       	adc	r25, r1
    5e94:	11 24       	eor	r1, r1
    5e96:	08 95       	ret

00005e98 <__prologue_saves__>:
    5e98:	2f 92       	push	r2
    5e9a:	3f 92       	push	r3
    5e9c:	4f 92       	push	r4
    5e9e:	5f 92       	push	r5
    5ea0:	6f 92       	push	r6
    5ea2:	7f 92       	push	r7
    5ea4:	8f 92       	push	r8
    5ea6:	9f 92       	push	r9
    5ea8:	af 92       	push	r10
    5eaa:	bf 92       	push	r11
    5eac:	cf 92       	push	r12
    5eae:	df 92       	push	r13
    5eb0:	ef 92       	push	r14
    5eb2:	ff 92       	push	r15
    5eb4:	0f 93       	push	r16
    5eb6:	1f 93       	push	r17
    5eb8:	cf 93       	push	r28
    5eba:	df 93       	push	r29
    5ebc:	cd b7       	in	r28, 0x3d	; 61
    5ebe:	de b7       	in	r29, 0x3e	; 62
    5ec0:	ca 1b       	sub	r28, r26
    5ec2:	db 0b       	sbc	r29, r27
    5ec4:	cd bf       	out	0x3d, r28	; 61
    5ec6:	de bf       	out	0x3e, r29	; 62
    5ec8:	09 94       	ijmp

00005eca <__epilogue_restores__>:
    5eca:	2a 88       	ldd	r2, Y+18	; 0x12
    5ecc:	39 88       	ldd	r3, Y+17	; 0x11
    5ece:	48 88       	ldd	r4, Y+16	; 0x10
    5ed0:	5f 84       	ldd	r5, Y+15	; 0x0f
    5ed2:	6e 84       	ldd	r6, Y+14	; 0x0e
    5ed4:	7d 84       	ldd	r7, Y+13	; 0x0d
    5ed6:	8c 84       	ldd	r8, Y+12	; 0x0c
    5ed8:	9b 84       	ldd	r9, Y+11	; 0x0b
    5eda:	aa 84       	ldd	r10, Y+10	; 0x0a
    5edc:	b9 84       	ldd	r11, Y+9	; 0x09
    5ede:	c8 84       	ldd	r12, Y+8	; 0x08
    5ee0:	df 80       	ldd	r13, Y+7	; 0x07
    5ee2:	ee 80       	ldd	r14, Y+6	; 0x06
    5ee4:	fd 80       	ldd	r15, Y+5	; 0x05
    5ee6:	0c 81       	ldd	r16, Y+4	; 0x04
    5ee8:	1b 81       	ldd	r17, Y+3	; 0x03
    5eea:	aa 81       	ldd	r26, Y+2	; 0x02
    5eec:	b9 81       	ldd	r27, Y+1	; 0x01
    5eee:	ce 0f       	add	r28, r30
    5ef0:	d1 1d       	adc	r29, r1
    5ef2:	cd bf       	out	0x3d, r28	; 61
    5ef4:	de bf       	out	0x3e, r29	; 62
    5ef6:	ed 01       	movw	r28, r26
    5ef8:	08 95       	ret

00005efa <__udivmodhi4>:
    5efa:	aa 1b       	sub	r26, r26
    5efc:	bb 1b       	sub	r27, r27
    5efe:	51 e1       	ldi	r21, 0x11	; 17
    5f00:	07 c0       	rjmp	.+14     	; 0x5f10 <__udivmodhi4_ep>

00005f02 <__udivmodhi4_loop>:
    5f02:	aa 1f       	adc	r26, r26
    5f04:	bb 1f       	adc	r27, r27
    5f06:	a6 17       	cp	r26, r22
    5f08:	b7 07       	cpc	r27, r23
    5f0a:	10 f0       	brcs	.+4      	; 0x5f10 <__udivmodhi4_ep>
    5f0c:	a6 1b       	sub	r26, r22
    5f0e:	b7 0b       	sbc	r27, r23

00005f10 <__udivmodhi4_ep>:
    5f10:	88 1f       	adc	r24, r24
    5f12:	99 1f       	adc	r25, r25
    5f14:	5a 95       	dec	r21
    5f16:	a9 f7       	brne	.-22     	; 0x5f02 <__udivmodhi4_loop>
    5f18:	80 95       	com	r24
    5f1a:	90 95       	com	r25
    5f1c:	bc 01       	movw	r22, r24
    5f1e:	cd 01       	movw	r24, r26
    5f20:	08 95       	ret

00005f22 <__udivmodsi4>:
    5f22:	a1 e2       	ldi	r26, 0x21	; 33
    5f24:	1a 2e       	mov	r1, r26
    5f26:	aa 1b       	sub	r26, r26
    5f28:	bb 1b       	sub	r27, r27
    5f2a:	fd 01       	movw	r30, r26
    5f2c:	0d c0       	rjmp	.+26     	; 0x5f48 <__udivmodsi4_ep>

00005f2e <__udivmodsi4_loop>:
    5f2e:	aa 1f       	adc	r26, r26
    5f30:	bb 1f       	adc	r27, r27
    5f32:	ee 1f       	adc	r30, r30
    5f34:	ff 1f       	adc	r31, r31
    5f36:	a2 17       	cp	r26, r18
    5f38:	b3 07       	cpc	r27, r19
    5f3a:	e4 07       	cpc	r30, r20
    5f3c:	f5 07       	cpc	r31, r21
    5f3e:	20 f0       	brcs	.+8      	; 0x5f48 <__udivmodsi4_ep>
    5f40:	a2 1b       	sub	r26, r18
    5f42:	b3 0b       	sbc	r27, r19
    5f44:	e4 0b       	sbc	r30, r20
    5f46:	f5 0b       	sbc	r31, r21

00005f48 <__udivmodsi4_ep>:
    5f48:	66 1f       	adc	r22, r22
    5f4a:	77 1f       	adc	r23, r23
    5f4c:	88 1f       	adc	r24, r24
    5f4e:	99 1f       	adc	r25, r25
    5f50:	1a 94       	dec	r1
    5f52:	69 f7       	brne	.-38     	; 0x5f2e <__udivmodsi4_loop>
    5f54:	60 95       	com	r22
    5f56:	70 95       	com	r23
    5f58:	80 95       	com	r24
    5f5a:	90 95       	com	r25
    5f5c:	9b 01       	movw	r18, r22
    5f5e:	ac 01       	movw	r20, r24
    5f60:	bd 01       	movw	r22, r26
    5f62:	cf 01       	movw	r24, r30
    5f64:	08 95       	ret

00005f66 <__umulhisi3>:
    5f66:	a2 9f       	mul	r26, r18
    5f68:	b0 01       	movw	r22, r0
    5f6a:	b3 9f       	mul	r27, r19
    5f6c:	c0 01       	movw	r24, r0
    5f6e:	a3 9f       	mul	r26, r19
    5f70:	70 0d       	add	r23, r0
    5f72:	81 1d       	adc	r24, r1
    5f74:	11 24       	eor	r1, r1
    5f76:	91 1d       	adc	r25, r1
    5f78:	b2 9f       	mul	r27, r18
    5f7a:	70 0d       	add	r23, r0
    5f7c:	81 1d       	adc	r24, r1
    5f7e:	11 24       	eor	r1, r1
    5f80:	91 1d       	adc	r25, r1
    5f82:	08 95       	ret

00005f84 <atoi>:
    5f84:	fc 01       	movw	r30, r24
    5f86:	88 27       	eor	r24, r24
    5f88:	99 27       	eor	r25, r25
    5f8a:	e8 94       	clt
    5f8c:	21 91       	ld	r18, Z+
    5f8e:	20 32       	cpi	r18, 0x20	; 32
    5f90:	e9 f3       	breq	.-6      	; 0x5f8c <atoi+0x8>
    5f92:	29 30       	cpi	r18, 0x09	; 9
    5f94:	10 f0       	brcs	.+4      	; 0x5f9a <atoi+0x16>
    5f96:	2e 30       	cpi	r18, 0x0E	; 14
    5f98:	c8 f3       	brcs	.-14     	; 0x5f8c <atoi+0x8>
    5f9a:	2b 32       	cpi	r18, 0x2B	; 43
    5f9c:	41 f0       	breq	.+16     	; 0x5fae <atoi+0x2a>
    5f9e:	2d 32       	cpi	r18, 0x2D	; 45
    5fa0:	39 f4       	brne	.+14     	; 0x5fb0 <atoi+0x2c>
    5fa2:	68 94       	set
    5fa4:	04 c0       	rjmp	.+8      	; 0x5fae <atoi+0x2a>
    5fa6:	0e 94 1c 31 	call	0x6238	; 0x6238 <__mulhi_const_10>
    5faa:	82 0f       	add	r24, r18
    5fac:	91 1d       	adc	r25, r1
    5fae:	21 91       	ld	r18, Z+
    5fb0:	20 53       	subi	r18, 0x30	; 48
    5fb2:	2a 30       	cpi	r18, 0x0A	; 10
    5fb4:	c0 f3       	brcs	.-16     	; 0x5fa6 <atoi+0x22>
    5fb6:	1e f4       	brtc	.+6      	; 0x5fbe <atoi+0x3a>
    5fb8:	90 95       	com	r25
    5fba:	81 95       	neg	r24
    5fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    5fbe:	08 95       	ret

00005fc0 <atol>:
    5fc0:	1f 93       	push	r17
    5fc2:	fc 01       	movw	r30, r24
    5fc4:	99 27       	eor	r25, r25
    5fc6:	88 27       	eor	r24, r24
    5fc8:	bc 01       	movw	r22, r24
    5fca:	e8 94       	clt
    5fcc:	11 91       	ld	r17, Z+
    5fce:	10 32       	cpi	r17, 0x20	; 32
    5fd0:	e9 f3       	breq	.-6      	; 0x5fcc <atol+0xc>
    5fd2:	19 30       	cpi	r17, 0x09	; 9
    5fd4:	10 f0       	brcs	.+4      	; 0x5fda <atol+0x1a>
    5fd6:	1e 30       	cpi	r17, 0x0E	; 14
    5fd8:	c8 f3       	brcs	.-14     	; 0x5fcc <atol+0xc>
    5fda:	1b 32       	cpi	r17, 0x2B	; 43
    5fdc:	51 f0       	breq	.+20     	; 0x5ff2 <atol+0x32>
    5fde:	1d 32       	cpi	r17, 0x2D	; 45
    5fe0:	49 f4       	brne	.+18     	; 0x5ff4 <atol+0x34>
    5fe2:	68 94       	set
    5fe4:	06 c0       	rjmp	.+12     	; 0x5ff2 <atol+0x32>
    5fe6:	0e 94 07 31 	call	0x620e	; 0x620e <__mulsi_const_10>
    5fea:	61 0f       	add	r22, r17
    5fec:	71 1d       	adc	r23, r1
    5fee:	81 1d       	adc	r24, r1
    5ff0:	91 1d       	adc	r25, r1
    5ff2:	11 91       	ld	r17, Z+
    5ff4:	10 53       	subi	r17, 0x30	; 48
    5ff6:	1a 30       	cpi	r17, 0x0A	; 10
    5ff8:	b0 f3       	brcs	.-20     	; 0x5fe6 <atol+0x26>
    5ffa:	3e f4       	brtc	.+14     	; 0x600a <atol+0x4a>
    5ffc:	90 95       	com	r25
    5ffe:	80 95       	com	r24
    6000:	70 95       	com	r23
    6002:	61 95       	neg	r22
    6004:	7f 4f       	sbci	r23, 0xFF	; 255
    6006:	8f 4f       	sbci	r24, 0xFF	; 255
    6008:	9f 4f       	sbci	r25, 0xFF	; 255
    600a:	1f 91       	pop	r17
    600c:	08 95       	ret

0000600e <__ftoa_engine>:
    600e:	28 30       	cpi	r18, 0x08	; 8
    6010:	08 f0       	brcs	.+2      	; 0x6014 <__ftoa_engine+0x6>
    6012:	27 e0       	ldi	r18, 0x07	; 7
    6014:	33 27       	eor	r19, r19
    6016:	da 01       	movw	r26, r20
    6018:	99 0f       	add	r25, r25
    601a:	31 1d       	adc	r19, r1
    601c:	87 fd       	sbrc	r24, 7
    601e:	91 60       	ori	r25, 0x01	; 1
    6020:	00 96       	adiw	r24, 0x00	; 0
    6022:	61 05       	cpc	r22, r1
    6024:	71 05       	cpc	r23, r1
    6026:	39 f4       	brne	.+14     	; 0x6036 <__ftoa_engine+0x28>
    6028:	32 60       	ori	r19, 0x02	; 2
    602a:	2e 5f       	subi	r18, 0xFE	; 254
    602c:	3d 93       	st	X+, r19
    602e:	30 e3       	ldi	r19, 0x30	; 48
    6030:	2a 95       	dec	r18
    6032:	e1 f7       	brne	.-8      	; 0x602c <__ftoa_engine+0x1e>
    6034:	08 95       	ret
    6036:	9f 3f       	cpi	r25, 0xFF	; 255
    6038:	30 f0       	brcs	.+12     	; 0x6046 <__ftoa_engine+0x38>
    603a:	80 38       	cpi	r24, 0x80	; 128
    603c:	71 05       	cpc	r23, r1
    603e:	61 05       	cpc	r22, r1
    6040:	09 f0       	breq	.+2      	; 0x6044 <__ftoa_engine+0x36>
    6042:	3c 5f       	subi	r19, 0xFC	; 252
    6044:	3c 5f       	subi	r19, 0xFC	; 252
    6046:	3d 93       	st	X+, r19
    6048:	91 30       	cpi	r25, 0x01	; 1
    604a:	08 f0       	brcs	.+2      	; 0x604e <__ftoa_engine+0x40>
    604c:	80 68       	ori	r24, 0x80	; 128
    604e:	91 1d       	adc	r25, r1
    6050:	df 93       	push	r29
    6052:	cf 93       	push	r28
    6054:	1f 93       	push	r17
    6056:	0f 93       	push	r16
    6058:	ff 92       	push	r15
    605a:	ef 92       	push	r14
    605c:	19 2f       	mov	r17, r25
    605e:	98 7f       	andi	r25, 0xF8	; 248
    6060:	96 95       	lsr	r25
    6062:	e9 2f       	mov	r30, r25
    6064:	96 95       	lsr	r25
    6066:	96 95       	lsr	r25
    6068:	e9 0f       	add	r30, r25
    606a:	ff 27       	eor	r31, r31
    606c:	ea 53       	subi	r30, 0x3A	; 58
    606e:	fe 4f       	sbci	r31, 0xFE	; 254
    6070:	99 27       	eor	r25, r25
    6072:	33 27       	eor	r19, r19
    6074:	ee 24       	eor	r14, r14
    6076:	ff 24       	eor	r15, r15
    6078:	a7 01       	movw	r20, r14
    607a:	e7 01       	movw	r28, r14
    607c:	05 90       	lpm	r0, Z+
    607e:	08 94       	sec
    6080:	07 94       	ror	r0
    6082:	28 f4       	brcc	.+10     	; 0x608e <__ftoa_engine+0x80>
    6084:	36 0f       	add	r19, r22
    6086:	e7 1e       	adc	r14, r23
    6088:	f8 1e       	adc	r15, r24
    608a:	49 1f       	adc	r20, r25
    608c:	51 1d       	adc	r21, r1
    608e:	66 0f       	add	r22, r22
    6090:	77 1f       	adc	r23, r23
    6092:	88 1f       	adc	r24, r24
    6094:	99 1f       	adc	r25, r25
    6096:	06 94       	lsr	r0
    6098:	a1 f7       	brne	.-24     	; 0x6082 <__ftoa_engine+0x74>
    609a:	05 90       	lpm	r0, Z+
    609c:	07 94       	ror	r0
    609e:	28 f4       	brcc	.+10     	; 0x60aa <__ftoa_engine+0x9c>
    60a0:	e7 0e       	add	r14, r23
    60a2:	f8 1e       	adc	r15, r24
    60a4:	49 1f       	adc	r20, r25
    60a6:	56 1f       	adc	r21, r22
    60a8:	c1 1d       	adc	r28, r1
    60aa:	77 0f       	add	r23, r23
    60ac:	88 1f       	adc	r24, r24
    60ae:	99 1f       	adc	r25, r25
    60b0:	66 1f       	adc	r22, r22
    60b2:	06 94       	lsr	r0
    60b4:	a1 f7       	brne	.-24     	; 0x609e <__ftoa_engine+0x90>
    60b6:	05 90       	lpm	r0, Z+
    60b8:	07 94       	ror	r0
    60ba:	28 f4       	brcc	.+10     	; 0x60c6 <__ftoa_engine+0xb8>
    60bc:	f8 0e       	add	r15, r24
    60be:	49 1f       	adc	r20, r25
    60c0:	56 1f       	adc	r21, r22
    60c2:	c7 1f       	adc	r28, r23
    60c4:	d1 1d       	adc	r29, r1
    60c6:	88 0f       	add	r24, r24
    60c8:	99 1f       	adc	r25, r25
    60ca:	66 1f       	adc	r22, r22
    60cc:	77 1f       	adc	r23, r23
    60ce:	06 94       	lsr	r0
    60d0:	a1 f7       	brne	.-24     	; 0x60ba <__ftoa_engine+0xac>
    60d2:	05 90       	lpm	r0, Z+
    60d4:	07 94       	ror	r0
    60d6:	20 f4       	brcc	.+8      	; 0x60e0 <__ftoa_engine+0xd2>
    60d8:	49 0f       	add	r20, r25
    60da:	56 1f       	adc	r21, r22
    60dc:	c7 1f       	adc	r28, r23
    60de:	d8 1f       	adc	r29, r24
    60e0:	99 0f       	add	r25, r25
    60e2:	66 1f       	adc	r22, r22
    60e4:	77 1f       	adc	r23, r23
    60e6:	88 1f       	adc	r24, r24
    60e8:	06 94       	lsr	r0
    60ea:	a9 f7       	brne	.-22     	; 0x60d6 <__ftoa_engine+0xc8>
    60ec:	84 91       	lpm	r24, Z
    60ee:	10 95       	com	r17
    60f0:	17 70       	andi	r17, 0x07	; 7
    60f2:	41 f0       	breq	.+16     	; 0x6104 <__ftoa_engine+0xf6>
    60f4:	d6 95       	lsr	r29
    60f6:	c7 95       	ror	r28
    60f8:	57 95       	ror	r21
    60fa:	47 95       	ror	r20
    60fc:	f7 94       	ror	r15
    60fe:	e7 94       	ror	r14
    6100:	1a 95       	dec	r17
    6102:	c1 f7       	brne	.-16     	; 0x60f4 <__ftoa_engine+0xe6>
    6104:	ec e6       	ldi	r30, 0x6C	; 108
    6106:	f1 e0       	ldi	r31, 0x01	; 1
    6108:	68 94       	set
    610a:	15 90       	lpm	r1, Z+
    610c:	15 91       	lpm	r17, Z+
    610e:	35 91       	lpm	r19, Z+
    6110:	65 91       	lpm	r22, Z+
    6112:	95 91       	lpm	r25, Z+
    6114:	05 90       	lpm	r0, Z+
    6116:	7f e2       	ldi	r23, 0x2F	; 47
    6118:	73 95       	inc	r23
    611a:	e1 18       	sub	r14, r1
    611c:	f1 0a       	sbc	r15, r17
    611e:	43 0b       	sbc	r20, r19
    6120:	56 0b       	sbc	r21, r22
    6122:	c9 0b       	sbc	r28, r25
    6124:	d0 09       	sbc	r29, r0
    6126:	c0 f7       	brcc	.-16     	; 0x6118 <__ftoa_engine+0x10a>
    6128:	e1 0c       	add	r14, r1
    612a:	f1 1e       	adc	r15, r17
    612c:	43 1f       	adc	r20, r19
    612e:	56 1f       	adc	r21, r22
    6130:	c9 1f       	adc	r28, r25
    6132:	d0 1d       	adc	r29, r0
    6134:	7e f4       	brtc	.+30     	; 0x6154 <__ftoa_engine+0x146>
    6136:	70 33       	cpi	r23, 0x30	; 48
    6138:	11 f4       	brne	.+4      	; 0x613e <__ftoa_engine+0x130>
    613a:	8a 95       	dec	r24
    613c:	e6 cf       	rjmp	.-52     	; 0x610a <__ftoa_engine+0xfc>
    613e:	e8 94       	clt
    6140:	01 50       	subi	r16, 0x01	; 1
    6142:	30 f0       	brcs	.+12     	; 0x6150 <__ftoa_engine+0x142>
    6144:	08 0f       	add	r16, r24
    6146:	0a f4       	brpl	.+2      	; 0x614a <__ftoa_engine+0x13c>
    6148:	00 27       	eor	r16, r16
    614a:	02 17       	cp	r16, r18
    614c:	08 f4       	brcc	.+2      	; 0x6150 <__ftoa_engine+0x142>
    614e:	20 2f       	mov	r18, r16
    6150:	23 95       	inc	r18
    6152:	02 2f       	mov	r16, r18
    6154:	7a 33       	cpi	r23, 0x3A	; 58
    6156:	28 f0       	brcs	.+10     	; 0x6162 <__ftoa_engine+0x154>
    6158:	79 e3       	ldi	r23, 0x39	; 57
    615a:	7d 93       	st	X+, r23
    615c:	2a 95       	dec	r18
    615e:	e9 f7       	brne	.-6      	; 0x615a <__ftoa_engine+0x14c>
    6160:	10 c0       	rjmp	.+32     	; 0x6182 <__ftoa_engine+0x174>
    6162:	7d 93       	st	X+, r23
    6164:	2a 95       	dec	r18
    6166:	89 f6       	brne	.-94     	; 0x610a <__ftoa_engine+0xfc>
    6168:	06 94       	lsr	r0
    616a:	97 95       	ror	r25
    616c:	67 95       	ror	r22
    616e:	37 95       	ror	r19
    6170:	17 95       	ror	r17
    6172:	17 94       	ror	r1
    6174:	e1 18       	sub	r14, r1
    6176:	f1 0a       	sbc	r15, r17
    6178:	43 0b       	sbc	r20, r19
    617a:	56 0b       	sbc	r21, r22
    617c:	c9 0b       	sbc	r28, r25
    617e:	d0 09       	sbc	r29, r0
    6180:	98 f0       	brcs	.+38     	; 0x61a8 <__ftoa_engine+0x19a>
    6182:	23 95       	inc	r18
    6184:	7e 91       	ld	r23, -X
    6186:	73 95       	inc	r23
    6188:	7a 33       	cpi	r23, 0x3A	; 58
    618a:	08 f0       	brcs	.+2      	; 0x618e <__ftoa_engine+0x180>
    618c:	70 e3       	ldi	r23, 0x30	; 48
    618e:	7c 93       	st	X, r23
    6190:	20 13       	cpse	r18, r16
    6192:	b8 f7       	brcc	.-18     	; 0x6182 <__ftoa_engine+0x174>
    6194:	7e 91       	ld	r23, -X
    6196:	70 61       	ori	r23, 0x10	; 16
    6198:	7d 93       	st	X+, r23
    619a:	30 f0       	brcs	.+12     	; 0x61a8 <__ftoa_engine+0x19a>
    619c:	83 95       	inc	r24
    619e:	71 e3       	ldi	r23, 0x31	; 49
    61a0:	7d 93       	st	X+, r23
    61a2:	70 e3       	ldi	r23, 0x30	; 48
    61a4:	2a 95       	dec	r18
    61a6:	e1 f7       	brne	.-8      	; 0x61a0 <__ftoa_engine+0x192>
    61a8:	11 24       	eor	r1, r1
    61aa:	ef 90       	pop	r14
    61ac:	ff 90       	pop	r15
    61ae:	0f 91       	pop	r16
    61b0:	1f 91       	pop	r17
    61b2:	cf 91       	pop	r28
    61b4:	df 91       	pop	r29
    61b6:	99 27       	eor	r25, r25
    61b8:	87 fd       	sbrc	r24, 7
    61ba:	90 95       	com	r25
    61bc:	08 95       	ret

000061be <strnlen_P>:
    61be:	fc 01       	movw	r30, r24
    61c0:	05 90       	lpm	r0, Z+
    61c2:	61 50       	subi	r22, 0x01	; 1
    61c4:	70 40       	sbci	r23, 0x00	; 0
    61c6:	01 10       	cpse	r0, r1
    61c8:	d8 f7       	brcc	.-10     	; 0x61c0 <strnlen_P+0x2>
    61ca:	80 95       	com	r24
    61cc:	90 95       	com	r25
    61ce:	8e 0f       	add	r24, r30
    61d0:	9f 1f       	adc	r25, r31
    61d2:	08 95       	ret

000061d4 <strcat>:
    61d4:	fb 01       	movw	r30, r22
    61d6:	dc 01       	movw	r26, r24
    61d8:	0d 90       	ld	r0, X+
    61da:	00 20       	and	r0, r0
    61dc:	e9 f7       	brne	.-6      	; 0x61d8 <strcat+0x4>
    61de:	11 97       	sbiw	r26, 0x01	; 1
    61e0:	01 90       	ld	r0, Z+
    61e2:	0d 92       	st	X+, r0
    61e4:	00 20       	and	r0, r0
    61e6:	e1 f7       	brne	.-8      	; 0x61e0 <strcat+0xc>
    61e8:	08 95       	ret

000061ea <strcpy>:
    61ea:	fb 01       	movw	r30, r22
    61ec:	dc 01       	movw	r26, r24
    61ee:	01 90       	ld	r0, Z+
    61f0:	0d 92       	st	X+, r0
    61f2:	00 20       	and	r0, r0
    61f4:	e1 f7       	brne	.-8      	; 0x61ee <strcpy+0x4>
    61f6:	08 95       	ret

000061f8 <strnlen>:
    61f8:	fc 01       	movw	r30, r24
    61fa:	61 50       	subi	r22, 0x01	; 1
    61fc:	70 40       	sbci	r23, 0x00	; 0
    61fe:	01 90       	ld	r0, Z+
    6200:	01 10       	cpse	r0, r1
    6202:	d8 f7       	brcc	.-10     	; 0x61fa <strnlen+0x2>
    6204:	80 95       	com	r24
    6206:	90 95       	com	r25
    6208:	8e 0f       	add	r24, r30
    620a:	9f 1f       	adc	r25, r31
    620c:	08 95       	ret

0000620e <__mulsi_const_10>:
    620e:	59 2f       	mov	r21, r25
    6210:	48 2f       	mov	r20, r24
    6212:	37 2f       	mov	r19, r23
    6214:	26 2f       	mov	r18, r22
    6216:	66 0f       	add	r22, r22
    6218:	77 1f       	adc	r23, r23
    621a:	88 1f       	adc	r24, r24
    621c:	99 1f       	adc	r25, r25
    621e:	66 0f       	add	r22, r22
    6220:	77 1f       	adc	r23, r23
    6222:	88 1f       	adc	r24, r24
    6224:	99 1f       	adc	r25, r25
    6226:	62 0f       	add	r22, r18
    6228:	73 1f       	adc	r23, r19
    622a:	84 1f       	adc	r24, r20
    622c:	95 1f       	adc	r25, r21
    622e:	66 0f       	add	r22, r22
    6230:	77 1f       	adc	r23, r23
    6232:	88 1f       	adc	r24, r24
    6234:	99 1f       	adc	r25, r25
    6236:	08 95       	ret

00006238 <__mulhi_const_10>:
    6238:	7a e0       	ldi	r23, 0x0A	; 10
    623a:	97 9f       	mul	r25, r23
    623c:	90 2d       	mov	r25, r0
    623e:	87 9f       	mul	r24, r23
    6240:	80 2d       	mov	r24, r0
    6242:	91 0d       	add	r25, r1
    6244:	11 24       	eor	r1, r1
    6246:	08 95       	ret

00006248 <fputc>:
    6248:	0f 93       	push	r16
    624a:	1f 93       	push	r17
    624c:	cf 93       	push	r28
    624e:	df 93       	push	r29
    6250:	fb 01       	movw	r30, r22
    6252:	23 81       	ldd	r18, Z+3	; 0x03
    6254:	21 fd       	sbrc	r18, 1
    6256:	03 c0       	rjmp	.+6      	; 0x625e <fputc+0x16>
    6258:	8f ef       	ldi	r24, 0xFF	; 255
    625a:	9f ef       	ldi	r25, 0xFF	; 255
    625c:	2c c0       	rjmp	.+88     	; 0x62b6 <fputc+0x6e>
    625e:	22 ff       	sbrs	r18, 2
    6260:	16 c0       	rjmp	.+44     	; 0x628e <fputc+0x46>
    6262:	46 81       	ldd	r20, Z+6	; 0x06
    6264:	57 81       	ldd	r21, Z+7	; 0x07
    6266:	24 81       	ldd	r18, Z+4	; 0x04
    6268:	35 81       	ldd	r19, Z+5	; 0x05
    626a:	42 17       	cp	r20, r18
    626c:	53 07       	cpc	r21, r19
    626e:	44 f4       	brge	.+16     	; 0x6280 <fputc+0x38>
    6270:	a0 81       	ld	r26, Z
    6272:	b1 81       	ldd	r27, Z+1	; 0x01
    6274:	9d 01       	movw	r18, r26
    6276:	2f 5f       	subi	r18, 0xFF	; 255
    6278:	3f 4f       	sbci	r19, 0xFF	; 255
    627a:	20 83       	st	Z, r18
    627c:	31 83       	std	Z+1, r19	; 0x01
    627e:	8c 93       	st	X, r24
    6280:	26 81       	ldd	r18, Z+6	; 0x06
    6282:	37 81       	ldd	r19, Z+7	; 0x07
    6284:	2f 5f       	subi	r18, 0xFF	; 255
    6286:	3f 4f       	sbci	r19, 0xFF	; 255
    6288:	26 83       	std	Z+6, r18	; 0x06
    628a:	37 83       	std	Z+7, r19	; 0x07
    628c:	14 c0       	rjmp	.+40     	; 0x62b6 <fputc+0x6e>
    628e:	8b 01       	movw	r16, r22
    6290:	ec 01       	movw	r28, r24
    6292:	fb 01       	movw	r30, r22
    6294:	00 84       	ldd	r0, Z+8	; 0x08
    6296:	f1 85       	ldd	r31, Z+9	; 0x09
    6298:	e0 2d       	mov	r30, r0
    629a:	09 95       	icall
    629c:	89 2b       	or	r24, r25
    629e:	e1 f6       	brne	.-72     	; 0x6258 <fputc+0x10>
    62a0:	d8 01       	movw	r26, r16
    62a2:	16 96       	adiw	r26, 0x06	; 6
    62a4:	8d 91       	ld	r24, X+
    62a6:	9c 91       	ld	r25, X
    62a8:	17 97       	sbiw	r26, 0x07	; 7
    62aa:	01 96       	adiw	r24, 0x01	; 1
    62ac:	16 96       	adiw	r26, 0x06	; 6
    62ae:	8d 93       	st	X+, r24
    62b0:	9c 93       	st	X, r25
    62b2:	17 97       	sbiw	r26, 0x07	; 7
    62b4:	ce 01       	movw	r24, r28
    62b6:	df 91       	pop	r29
    62b8:	cf 91       	pop	r28
    62ba:	1f 91       	pop	r17
    62bc:	0f 91       	pop	r16
    62be:	08 95       	ret

000062c0 <sprintf>:
    62c0:	ae e0       	ldi	r26, 0x0E	; 14
    62c2:	b0 e0       	ldi	r27, 0x00	; 0
    62c4:	e6 e6       	ldi	r30, 0x66	; 102
    62c6:	f1 e3       	ldi	r31, 0x31	; 49
    62c8:	0c 94 5a 2f 	jmp	0x5eb4	; 0x5eb4 <__prologue_saves__+0x1c>
    62cc:	0d 89       	ldd	r16, Y+21	; 0x15
    62ce:	1e 89       	ldd	r17, Y+22	; 0x16
    62d0:	86 e0       	ldi	r24, 0x06	; 6
    62d2:	8c 83       	std	Y+4, r24	; 0x04
    62d4:	09 83       	std	Y+1, r16	; 0x01
    62d6:	1a 83       	std	Y+2, r17	; 0x02
    62d8:	8f ef       	ldi	r24, 0xFF	; 255
    62da:	9f e7       	ldi	r25, 0x7F	; 127
    62dc:	8d 83       	std	Y+5, r24	; 0x05
    62de:	9e 83       	std	Y+6, r25	; 0x06
    62e0:	ae 01       	movw	r20, r28
    62e2:	47 5e       	subi	r20, 0xE7	; 231
    62e4:	5f 4f       	sbci	r21, 0xFF	; 255
    62e6:	6f 89       	ldd	r22, Y+23	; 0x17
    62e8:	78 8d       	ldd	r23, Y+24	; 0x18
    62ea:	ce 01       	movw	r24, r28
    62ec:	01 96       	adiw	r24, 0x01	; 1
    62ee:	0e 94 8b 2b 	call	0x5716	; 0x5716 <vfprintf>
    62f2:	ef 81       	ldd	r30, Y+7	; 0x07
    62f4:	f8 85       	ldd	r31, Y+8	; 0x08
    62f6:	e0 0f       	add	r30, r16
    62f8:	f1 1f       	adc	r31, r17
    62fa:	10 82       	st	Z, r1
    62fc:	2e 96       	adiw	r28, 0x0e	; 14
    62fe:	e4 e0       	ldi	r30, 0x04	; 4
    6300:	0c 94 73 2f 	jmp	0x5ee6	; 0x5ee6 <__epilogue_restores__+0x1c>

00006304 <__ultoa_invert>:
    6304:	fa 01       	movw	r30, r20
    6306:	aa 27       	eor	r26, r26
    6308:	28 30       	cpi	r18, 0x08	; 8
    630a:	51 f1       	breq	.+84     	; 0x6360 <__ultoa_invert+0x5c>
    630c:	20 31       	cpi	r18, 0x10	; 16
    630e:	81 f1       	breq	.+96     	; 0x6370 <__ultoa_invert+0x6c>
    6310:	e8 94       	clt
    6312:	6f 93       	push	r22
    6314:	6e 7f       	andi	r22, 0xFE	; 254
    6316:	6e 5f       	subi	r22, 0xFE	; 254
    6318:	7f 4f       	sbci	r23, 0xFF	; 255
    631a:	8f 4f       	sbci	r24, 0xFF	; 255
    631c:	9f 4f       	sbci	r25, 0xFF	; 255
    631e:	af 4f       	sbci	r26, 0xFF	; 255
    6320:	b1 e0       	ldi	r27, 0x01	; 1
    6322:	3e d0       	rcall	.+124    	; 0x63a0 <__ultoa_invert+0x9c>
    6324:	b4 e0       	ldi	r27, 0x04	; 4
    6326:	3c d0       	rcall	.+120    	; 0x63a0 <__ultoa_invert+0x9c>
    6328:	67 0f       	add	r22, r23
    632a:	78 1f       	adc	r23, r24
    632c:	89 1f       	adc	r24, r25
    632e:	9a 1f       	adc	r25, r26
    6330:	a1 1d       	adc	r26, r1
    6332:	68 0f       	add	r22, r24
    6334:	79 1f       	adc	r23, r25
    6336:	8a 1f       	adc	r24, r26
    6338:	91 1d       	adc	r25, r1
    633a:	a1 1d       	adc	r26, r1
    633c:	6a 0f       	add	r22, r26
    633e:	71 1d       	adc	r23, r1
    6340:	81 1d       	adc	r24, r1
    6342:	91 1d       	adc	r25, r1
    6344:	a1 1d       	adc	r26, r1
    6346:	20 d0       	rcall	.+64     	; 0x6388 <__ultoa_invert+0x84>
    6348:	09 f4       	brne	.+2      	; 0x634c <__ultoa_invert+0x48>
    634a:	68 94       	set
    634c:	3f 91       	pop	r19
    634e:	2a e0       	ldi	r18, 0x0A	; 10
    6350:	26 9f       	mul	r18, r22
    6352:	11 24       	eor	r1, r1
    6354:	30 19       	sub	r19, r0
    6356:	30 5d       	subi	r19, 0xD0	; 208
    6358:	31 93       	st	Z+, r19
    635a:	de f6       	brtc	.-74     	; 0x6312 <__ultoa_invert+0xe>
    635c:	cf 01       	movw	r24, r30
    635e:	08 95       	ret
    6360:	46 2f       	mov	r20, r22
    6362:	47 70       	andi	r20, 0x07	; 7
    6364:	40 5d       	subi	r20, 0xD0	; 208
    6366:	41 93       	st	Z+, r20
    6368:	b3 e0       	ldi	r27, 0x03	; 3
    636a:	0f d0       	rcall	.+30     	; 0x638a <__ultoa_invert+0x86>
    636c:	c9 f7       	brne	.-14     	; 0x6360 <__ultoa_invert+0x5c>
    636e:	f6 cf       	rjmp	.-20     	; 0x635c <__ultoa_invert+0x58>
    6370:	46 2f       	mov	r20, r22
    6372:	4f 70       	andi	r20, 0x0F	; 15
    6374:	40 5d       	subi	r20, 0xD0	; 208
    6376:	4a 33       	cpi	r20, 0x3A	; 58
    6378:	18 f0       	brcs	.+6      	; 0x6380 <__ultoa_invert+0x7c>
    637a:	49 5d       	subi	r20, 0xD9	; 217
    637c:	31 fd       	sbrc	r19, 1
    637e:	40 52       	subi	r20, 0x20	; 32
    6380:	41 93       	st	Z+, r20
    6382:	02 d0       	rcall	.+4      	; 0x6388 <__ultoa_invert+0x84>
    6384:	a9 f7       	brne	.-22     	; 0x6370 <__ultoa_invert+0x6c>
    6386:	ea cf       	rjmp	.-44     	; 0x635c <__ultoa_invert+0x58>
    6388:	b4 e0       	ldi	r27, 0x04	; 4
    638a:	a6 95       	lsr	r26
    638c:	97 95       	ror	r25
    638e:	87 95       	ror	r24
    6390:	77 95       	ror	r23
    6392:	67 95       	ror	r22
    6394:	ba 95       	dec	r27
    6396:	c9 f7       	brne	.-14     	; 0x638a <__ultoa_invert+0x86>
    6398:	00 97       	sbiw	r24, 0x00	; 0
    639a:	61 05       	cpc	r22, r1
    639c:	71 05       	cpc	r23, r1
    639e:	08 95       	ret
    63a0:	9b 01       	movw	r18, r22
    63a2:	ac 01       	movw	r20, r24
    63a4:	0a 2e       	mov	r0, r26
    63a6:	06 94       	lsr	r0
    63a8:	57 95       	ror	r21
    63aa:	47 95       	ror	r20
    63ac:	37 95       	ror	r19
    63ae:	27 95       	ror	r18
    63b0:	ba 95       	dec	r27
    63b2:	c9 f7       	brne	.-14     	; 0x63a6 <__ultoa_invert+0xa2>
    63b4:	62 0f       	add	r22, r18
    63b6:	73 1f       	adc	r23, r19
    63b8:	84 1f       	adc	r24, r20
    63ba:	95 1f       	adc	r25, r21
    63bc:	a0 1d       	adc	r26, r0
    63be:	08 95       	ret

000063c0 <eeprom_read_block>:
    63c0:	60 50       	subi	r22, 0x00	; 0
    63c2:	7c 4e       	sbci	r23, 0xEC	; 236
    63c4:	0c 94 1b 32 	jmp	0x6436	; 0x6436 <memcpy>

000063c8 <eeprom_update_block>:
    63c8:	dc 01       	movw	r26, r24
    63ca:	a4 0f       	add	r26, r20
    63cc:	b5 1f       	adc	r27, r21
    63ce:	41 50       	subi	r20, 0x01	; 1
    63d0:	50 40       	sbci	r21, 0x00	; 0
    63d2:	48 f0       	brcs	.+18     	; 0x63e6 <eeprom_update_block+0x1e>
    63d4:	cb 01       	movw	r24, r22
    63d6:	84 0f       	add	r24, r20
    63d8:	95 1f       	adc	r25, r21
    63da:	2e 91       	ld	r18, -X
    63dc:	0e 94 f5 31 	call	0x63ea	; 0x63ea <eeprom_update_r18>
    63e0:	41 50       	subi	r20, 0x01	; 1
    63e2:	50 40       	sbci	r21, 0x00	; 0
    63e4:	d0 f7       	brcc	.-12     	; 0x63da <eeprom_update_block+0x12>
    63e6:	08 95       	ret

000063e8 <eeprom_update_byte>:
    63e8:	26 2f       	mov	r18, r22

000063ea <eeprom_update_r18>:
    63ea:	0e 94 17 32 	call	0x642e	; 0x642e <eeprom_mapen>
    63ee:	00 80       	ld	r0, Z
    63f0:	02 16       	cp	r0, r18
    63f2:	19 f0       	breq	.+6      	; 0x63fa <eeprom_update_r18+0x10>
    63f4:	0e 94 00 32 	call	0x6400	; 0x6400 <eeprom_write_r18>
    63f8:	01 97       	sbiw	r24, 0x01	; 1
    63fa:	01 97       	sbiw	r24, 0x01	; 1
    63fc:	08 95       	ret

000063fe <eeprom_write_byte>:
    63fe:	26 2f       	mov	r18, r22

00006400 <eeprom_write_r18>:
    6400:	af 93       	push	r26
    6402:	bf 93       	push	r27
    6404:	e0 e0       	ldi	r30, 0x00	; 0
    6406:	f0 e1       	ldi	r31, 0x10	; 16
    6408:	32 81       	ldd	r19, Z+2	; 0x02
    640a:	31 fd       	sbrc	r19, 1
    640c:	fd cf       	rjmp	.-6      	; 0x6408 <eeprom_write_r18+0x8>
    640e:	dc 01       	movw	r26, r24
    6410:	a0 50       	subi	r26, 0x00	; 0
    6412:	bc 4e       	sbci	r27, 0xEC	; 236
    6414:	2c 93       	st	X, r18
    6416:	2d e9       	ldi	r18, 0x9D	; 157
    6418:	24 bf       	out	0x34, r18	; 52
    641a:	23 e0       	ldi	r18, 0x03	; 3
    641c:	20 83       	st	Z, r18
    641e:	01 96       	adiw	r24, 0x01	; 1
    6420:	bf 91       	pop	r27
    6422:	af 91       	pop	r26
    6424:	08 95       	ret

00006426 <eeprom_read_byte>:
    6426:	03 d0       	rcall	.+6      	; 0x642e <eeprom_mapen>
    6428:	80 81       	ld	r24, Z
    642a:	99 27       	eor	r25, r25
    642c:	08 95       	ret

0000642e <eeprom_mapen>:
    642e:	fc 01       	movw	r30, r24
    6430:	e0 50       	subi	r30, 0x00	; 0
    6432:	fc 4e       	sbci	r31, 0xEC	; 236
    6434:	08 95       	ret

00006436 <memcpy>:
    6436:	fb 01       	movw	r30, r22
    6438:	dc 01       	movw	r26, r24
    643a:	02 c0       	rjmp	.+4      	; 0x6440 <memcpy+0xa>
    643c:	01 90       	ld	r0, Z+
    643e:	0d 92       	st	X+, r0
    6440:	41 50       	subi	r20, 0x01	; 1
    6442:	50 40       	sbci	r21, 0x00	; 0
    6444:	d8 f7       	brcc	.-10     	; 0x643c <memcpy+0x6>
    6446:	08 95       	ret

00006448 <_exit>:
    6448:	f8 94       	cli

0000644a <__stop_program>:
    644a:	ff cf       	rjmp	.-2      	; 0x644a <__stop_program>
