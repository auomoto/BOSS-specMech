
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00007daf  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000070da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c41  0000b0da  000070da  0000716e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000a5b  00802800  00802800  00007daf  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00007daf  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007e0c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000680  00000000  00000000  00007e50  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000c54d  00000000  00000000  000084d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004561  00000000  00000000  00014a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000050cb  00000000  00000000  00018f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000014b0  00000000  00000000  0001e04c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000026ec  00000000  00000000  0001f4fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005f49  00000000  00000000  00021be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000430  00000000  00000000  00027b31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 01 	jmp	0x268	; 0x268 <__ctors_end>
       4:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
       8:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
       c:	0c 94 d9 2b 	jmp	0x57b2	; 0x57b2 <__vector_3>
      10:	0c 94 fb 2b 	jmp	0x57f6	; 0x57f6 <__vector_4>
      14:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      18:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      1c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      20:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      24:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      28:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      2c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      30:	0c 94 39 2c 	jmp	0x5872	; 0x5872 <__vector_12>
      34:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      38:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      3c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      40:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      44:	0c 94 76 2e 	jmp	0x5cec	; 0x5cec <__vector_17>
      48:	0c 94 c4 2e 	jmp	0x5d88	; 0x5d88 <__vector_18>
      4c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      50:	0c 94 4e 10 	jmp	0x209c	; 0x209c <__vector_20>
      54:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      58:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      5c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      60:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      64:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      68:	0c 94 1e 2e 	jmp	0x5c3c	; 0x5c3c <__vector_26>
      6c:	0c 94 3e 2e 	jmp	0x5c7c	; 0x5c7c <__vector_27>
      70:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      74:	0c 94 69 2f 	jmp	0x5ed2	; 0x5ed2 <__vector_29>
      78:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      7c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      80:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      84:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      88:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      8c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      90:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      94:	0c 94 00 2f 	jmp	0x5e00	; 0x5e00 <__vector_37>
      98:	0c 94 35 2f 	jmp	0x5e6a	; 0x5e6a <__vector_38>
      9c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      a0:	b1 04       	cpc	r11, r1
      a2:	db 04       	cpc	r13, r11
      a4:	db 04       	cpc	r13, r11
      a6:	db 04       	cpc	r13, r11
      a8:	db 04       	cpc	r13, r11
      aa:	db 04       	cpc	r13, r11
      ac:	db 04       	cpc	r13, r11
      ae:	db 04       	cpc	r13, r11
      b0:	db 04       	cpc	r13, r11
      b2:	b4 04       	cpc	r11, r4
      b4:	db 04       	cpc	r13, r11
      b6:	db 04       	cpc	r13, r11
      b8:	db 04       	cpc	r13, r11
      ba:	db 04       	cpc	r13, r11
      bc:	db 04       	cpc	r13, r11
      be:	db 04       	cpc	r13, r11
      c0:	db 04       	cpc	r13, r11
      c2:	d8 04       	cpc	r13, r8
      c4:	db 04       	cpc	r13, r11
      c6:	db 04       	cpc	r13, r11
      c8:	db 04       	cpc	r13, r11
      ca:	db 04       	cpc	r13, r11
      cc:	db 04       	cpc	r13, r11
      ce:	db 04       	cpc	r13, r11
      d0:	db 04       	cpc	r13, r11
      d2:	db 04       	cpc	r13, r11
      d4:	9c 04       	cpc	r9, r12
      d6:	db 04       	cpc	r13, r11
      d8:	db 04       	cpc	r13, r11
      da:	db 04       	cpc	r13, r11
      dc:	db 04       	cpc	r13, r11
      de:	db 04       	cpc	r13, r11
      e0:	db 04       	cpc	r13, r11
      e2:	db 04       	cpc	r13, r11
      e4:	db 04       	cpc	r13, r11
      e6:	db 04       	cpc	r13, r11
      e8:	a2 04       	cpc	r10, r2
      ea:	db 04       	cpc	r13, r11
      ec:	9f 04       	cpc	r9, r15
      ee:	db 04       	cpc	r13, r11
      f0:	db 04       	cpc	r13, r11
      f2:	a5 04       	cpc	r10, r5
      f4:	a8 04       	cpc	r10, r8
      f6:	ab 04       	cpc	r10, r11
      f8:	ae 04       	cpc	r10, r14
      fa:	6a 11       	cpse	r22, r10
      fc:	6a 11       	cpse	r22, r10
      fe:	6a 11       	cpse	r22, r10
     100:	98 18       	sub	r9, r8
     102:	98 18       	sub	r9, r8
     104:	98 18       	sub	r9, r8
     106:	98 18       	sub	r9, r8
     108:	98 18       	sub	r9, r8
     10a:	98 18       	sub	r9, r8
     10c:	98 18       	sub	r9, r8
     10e:	98 18       	sub	r9, r8
     110:	98 18       	sub	r9, r8
     112:	98 18       	sub	r9, r8
     114:	98 18       	sub	r9, r8
     116:	98 18       	sub	r9, r8
     118:	98 18       	sub	r9, r8
     11a:	98 18       	sub	r9, r8
     11c:	98 18       	sub	r9, r8
     11e:	98 18       	sub	r9, r8
     120:	98 18       	sub	r9, r8
     122:	98 18       	sub	r9, r8
     124:	5a 18       	sub	r5, r10
     126:	98 18       	sub	r9, r8
     128:	98 18       	sub	r9, r8
     12a:	98 18       	sub	r9, r8
     12c:	98 18       	sub	r9, r8
     12e:	98 18       	sub	r9, r8
     130:	98 18       	sub	r9, r8
     132:	98 18       	sub	r9, r8
     134:	98 18       	sub	r9, r8
     136:	98 18       	sub	r9, r8
     138:	98 18       	sub	r9, r8
     13a:	61 13       	cpse	r22, r17
     13c:	61 13       	cpse	r22, r17
     13e:	61 13       	cpse	r22, r17
     140:	16 15       	cp	r17, r6
     142:	1d 15       	cp	r17, r13
     144:	98 18       	sub	r9, r8
     146:	98 18       	sub	r9, r8
     148:	98 18       	sub	r9, r8
     14a:	98 18       	sub	r9, r8
     14c:	98 18       	sub	r9, r8
     14e:	98 18       	sub	r9, r8
     150:	98 18       	sub	r9, r8
     152:	98 18       	sub	r9, r8
     154:	98 18       	sub	r9, r8
     156:	5a 16       	cp	r5, r26
     158:	30 17       	cp	r19, r16
     15a:	98 18       	sub	r9, r8
     15c:	98 18       	sub	r9, r8
     15e:	98 18       	sub	r9, r8
     160:	b9 17       	cp	r27, r25
     162:	98 18       	sub	r9, r8
     164:	01 18       	sub	r0, r1

00000166 <__trampolines_end>:
     166:	6e 61       	ori	r22, 0x1E	; 30
     168:	6e 00       	.word	0x006e	; ????

0000016a <__c.2332>:
     16a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     17a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     18a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     19a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1aa:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ba:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1ca:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1da:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1ea:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1fa:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     20a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     21a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     22a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     23a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     24a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     25a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000268 <__ctors_end>:
     268:	11 24       	eor	r1, r1
     26a:	1f be       	out	0x3f, r1	; 63
     26c:	cf ef       	ldi	r28, 0xFF	; 255
     26e:	cd bf       	out	0x3d, r28	; 61
     270:	df e3       	ldi	r29, 0x3F	; 63
     272:	de bf       	out	0x3e, r29	; 62

00000274 <__do_clear_bss>:
     274:	22 e3       	ldi	r18, 0x32	; 50
     276:	a0 e0       	ldi	r26, 0x00	; 0
     278:	b8 e2       	ldi	r27, 0x28	; 40
     27a:	01 c0       	rjmp	.+2      	; 0x27e <.do_clear_bss_start>

0000027c <.do_clear_bss_loop>:
     27c:	1d 92       	st	X+, r1

0000027e <.do_clear_bss_start>:
     27e:	ab 35       	cpi	r26, 0x5B	; 91
     280:	b2 07       	cpc	r27, r18
     282:	e1 f7       	brne	.-8      	; 0x27c <.do_clear_bss_loop>
     284:	0e 94 5f 0a 	call	0x14be	; 0x14be <main>
     288:	0c 94 6b 38 	jmp	0x70d6	; 0x70d6 <_exit>

0000028c <__bad_interrupt>:
     28c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000290 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
uint8_t read_AD590(uint8_t sensor, float *temperature)
{
     290:	8f 92       	push	r8
     292:	9f 92       	push	r9
     294:	af 92       	push	r10
     296:	bf 92       	push	r11
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <read_AD590+0x16>
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <read_AD590+0x18>
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	7b 01       	movw	r14, r22

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     2ae:	81 30       	cpi	r24, 0x01	; 1
     2b0:	c9 f0       	breq	.+50     	; 0x2e4 <read_AD590+0x54>
     2b2:	18 f0       	brcs	.+6      	; 0x2ba <read_AD590+0x2a>
     2b4:	82 30       	cpi	r24, 0x02	; 2
     2b6:	61 f0       	breq	.+24     	; 0x2d0 <read_AD590+0x40>
     2b8:	10 c0       	rjmp	.+32     	; 0x2da <read_AD590+0x4a>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     2ba:	0f 2e       	mov	r0, r31
     2bc:	f3 e3       	ldi	r31, 0x33	; 51
     2be:	8f 2e       	mov	r8, r31
     2c0:	98 2c       	mov	r9, r8
     2c2:	f3 ef       	ldi	r31, 0xF3	; 243
     2c4:	af 2e       	mov	r10, r31
     2c6:	f0 e4       	ldi	r31, 0x40	; 64
     2c8:	bf 2e       	mov	r11, r31
     2ca:	f0 2d       	mov	r31, r0
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     2cc:	11 e0       	ldi	r17, 0x01	; 1
     2ce:	0e c0       	rjmp	.+28     	; 0x2ec <read_AD590+0x5c>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     2d0:	81 2c       	mov	r8, r1
     2d2:	91 2c       	mov	r9, r1
     2d4:	54 01       	movw	r10, r8
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     2d6:	10 e1       	ldi	r17, 0x10	; 16
			offset = 0.0;
			break;
     2d8:	09 c0       	rjmp	.+18     	; 0x2ec <read_AD590+0x5c>
{

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
     2da:	81 2c       	mov	r8, r1
     2dc:	91 2c       	mov	r9, r1
     2de:	54 01       	movw	r10, r8
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2e0:	10 e0       	ldi	r17, 0x00	; 0
			break;
     2e2:	04 c0       	rjmp	.+8      	; 0x2ec <read_AD590+0x5c>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2e4:	81 2c       	mov	r8, r1
     2e6:	91 2c       	mov	r9, r1
     2e8:	54 01       	movw	r10, r8
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2ea:	14 e0       	ldi	r17, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	66 e0       	ldi	r22, 0x06	; 6
     2f0:	87 e2       	ldi	r24, 0x27	; 39
     2f2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2f6:	41 2f       	mov	r20, r17
     2f8:	40 95       	com	r20
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	87 e2       	ldi	r24, 0x27	; 39
     2fe:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     302:	41 2f       	mov	r20, r17
     304:	6a e0       	ldi	r22, 0x0A	; 10
     306:	87 e2       	ldi	r24, 0x27	; 39
     308:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30c:	86 e1       	ldi	r24, 0x16	; 22
     30e:	8a 95       	dec	r24
     310:	f1 f7       	brne	.-4      	; 0x30e <read_AD590+0x7e>
     312:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	if (read_ADS1115(ADC_TE, PGA0512, AIN3, DR128, &voltage) == ERROR) {
     314:	8e 01       	movw	r16, r28
     316:	0f 5f       	subi	r16, 0xFF	; 255
     318:	1f 4f       	sbci	r17, 0xFF	; 255
     31a:	20 e8       	ldi	r18, 0x80	; 128
     31c:	40 e7       	ldi	r20, 0x70	; 112
     31e:	68 e0       	ldi	r22, 0x08	; 8
     320:	88 e4       	ldi	r24, 0x48	; 72
     322:	0e 94 c9 01 	call	0x392	; 0x392 <read_ADS1115>
     326:	83 36       	cpi	r24, 0x63	; 99
     328:	51 f4       	brne	.+20     	; 0x33e <read_AD590+0xae>
		*temperature = BADFLOAT;
     32a:	40 e0       	ldi	r20, 0x00	; 0
     32c:	50 e8       	ldi	r21, 0x80	; 128
     32e:	66 e2       	ldi	r22, 0x26	; 38
     330:	74 ec       	ldi	r23, 0xC4	; 196
     332:	f7 01       	movw	r30, r14
     334:	40 83       	st	Z, r20
     336:	51 83       	std	Z+1, r21	; 0x01
     338:	62 83       	std	Z+2, r22	; 0x02
     33a:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
     33c:	1c c0       	rjmp	.+56     	; 0x376 <read_AD590+0xe6>
	}
	*temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	4a e7       	ldi	r20, 0x7A	; 122
     344:	54 e4       	ldi	r21, 0x44	; 68
     346:	69 81       	ldd	r22, Y+1	; 0x01
     348:	7a 81       	ldd	r23, Y+2	; 0x02
     34a:	8b 81       	ldd	r24, Y+3	; 0x03
     34c:	9c 81       	ldd	r25, Y+4	; 0x04
     34e:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
     352:	23 e3       	ldi	r18, 0x33	; 51
     354:	33 e9       	ldi	r19, 0x93	; 147
     356:	48 e8       	ldi	r20, 0x88	; 136
     358:	53 e4       	ldi	r21, 0x43	; 67
     35a:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <__subsf3>
     35e:	9b 01       	movw	r18, r22
     360:	ac 01       	movw	r20, r24
     362:	c5 01       	movw	r24, r10
     364:	b4 01       	movw	r22, r8
     366:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <__addsf3>
     36a:	f7 01       	movw	r30, r14
     36c:	60 83       	st	Z, r22
     36e:	71 83       	std	Z+1, r23	; 0x01
     370:	82 83       	std	Z+2, r24	; 0x02
     372:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     374:	80 e0       	ldi	r24, 0x00	; 0

}
     376:	24 96       	adiw	r28, 0x04	; 4
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	de bf       	out	0x3e, r29	; 62
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	ff 90       	pop	r15
     386:	ef 90       	pop	r14
     388:	bf 90       	pop	r11
     38a:	af 90       	pop	r10
     38c:	9f 90       	pop	r9
     38e:	8f 90       	pop	r8
     390:	08 95       	ret

00000392 <read_ADS1115>:
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
uint8_t read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins,
	uint8_t datarate, float *voltage)
{
     392:	8f 92       	push	r8
     394:	9f 92       	push	r9
     396:	af 92       	push	r10
     398:	bf 92       	push	r11
     39a:	cf 92       	push	r12
     39c:	df 92       	push	r13
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	f8 2e       	mov	r15, r24
     3ac:	e6 2e       	mov	r14, r22
     3ae:	68 01       	movw	r12, r16
	float scale;
	uint8_t confighi, configlo, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     3b0:	46 2b       	or	r20, r22
     3b2:	c4 2f       	mov	r28, r20
     3b4:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     3b6:	d2 2f       	mov	r29, r18
     3b8:	d3 60       	ori	r29, 0x03	; 3

	*voltage = BADFLOAT;
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e8       	ldi	r25, 0x80	; 128
     3be:	a6 e2       	ldi	r26, 0x26	; 38
     3c0:	b4 ec       	ldi	r27, 0xC4	; 196
     3c2:	f8 01       	movw	r30, r16
     3c4:	80 83       	st	Z, r24
     3c6:	91 83       	std	Z+1, r25	; 0x01
     3c8:	a2 83       	std	Z+2, r26	; 0x02
     3ca:	b3 83       	std	Z+3, r27	; 0x03
	if (start_TWI(addr, TWIWRITE == ERROR)) {		// TWI start condition
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	8f 2d       	mov	r24, r15
     3d0:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
     3d4:	08 2f       	mov	r16, r24
     3d6:	88 23       	and	r24, r24
     3d8:	21 f0       	breq	.+8      	; 0x3e2 <read_ADS1115+0x50>
		stop_TWI();
     3da:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(ERROR);
     3de:	13 e6       	ldi	r17, 0x63	; 99
     3e0:	b4 c0       	rjmp	.+360    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
	}
	if ((write_TWI(ADS1115CONFIG) == ERROR)) {		// Write the CONFIG register
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
     3e8:	18 2f       	mov	r17, r24
     3ea:	83 36       	cpi	r24, 0x63	; 99
     3ec:	19 f4       	brne	.+6      	; 0x3f4 <read_ADS1115+0x62>
		stop_TWI();
     3ee:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(ERROR);
     3f2:	ab c0       	rjmp	.+342    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
	}
	if ((write_TWI(confighi) == ERROR)) {			// Write high byte
     3f4:	8c 2f       	mov	r24, r28
     3f6:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
     3fa:	18 2f       	mov	r17, r24
     3fc:	83 36       	cpi	r24, 0x63	; 99
     3fe:	19 f4       	brne	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		stop_TWI();
     400:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(ERROR);
     404:	a2 c0       	rjmp	.+324    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
	}
	if ((write_TWI(configlo) == ERROR)) {			// Write low byte
     406:	8d 2f       	mov	r24, r29
     408:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
     40c:	18 2f       	mov	r17, r24
     40e:	83 36       	cpi	r24, 0x63	; 99
     410:	19 f4       	brne	.+6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		stop_TWI();
     412:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(ERROR);
     416:	99 c0       	rjmp	.+306    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
	}
	stop_TWI();
     418:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
     41c:	fc e1       	ldi	r31, 0x1C	; 28
     41e:	fa 95       	dec	r31
     420:	f1 f7       	brne	.-4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>

	_delay_us(25);									// Power-up time

	converting = YES;
     422:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     424:	09 c0       	rjmp	.+18     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		start_TWI(addr, TWIREAD);
     426:	61 e0       	ldi	r22, 0x01	; 1
     428:	8f 2d       	mov	r24, r15
     42a:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
		flag = readlast_TWI();
     42e:	0e 94 75 2c 	call	0x58ea	; 0x58ea <readlast_TWI>
		if (flag & 0b10000000) {
     432:	88 23       	and	r24, r24
     434:	0c f4       	brge	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
			converting = NO;
     436:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     438:	c1 11       	cpse	r28, r1
     43a:	f5 cf       	rjmp	.-22     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		flag = readlast_TWI();
		if (flag & 0b10000000) {
			converting = NO;
		}
	}
	stop_TWI();
     43c:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>

	start_TWI(addr, TWIWRITE);
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	8f 2d       	mov	r24, r15
     444:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     44e:	61 e0       	ldi	r22, 0x01	; 1
     450:	8f 2d       	mov	r24, r15
     452:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
	highbyte = read_TWI();
     456:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <read_TWI>
     45a:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     45c:	0e 94 75 2c 	call	0x58ea	; 0x58ea <readlast_TWI>
     460:	d8 2f       	mov	r29, r24
	stop_TWI();
     462:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>

	value = highbyte;
     466:	6c 2f       	mov	r22, r28
     468:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     46a:	76 2f       	mov	r23, r22
     46c:	66 27       	eor	r22, r22
	value |= lowbyte;
     46e:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     470:	84 e0       	ldi	r24, 0x04	; 4
     472:	e8 16       	cp	r14, r24
     474:	49 f1       	breq	.+82     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     476:	8e 15       	cp	r24, r14
     478:	30 f0       	brcs	.+12     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     47a:	ee 20       	and	r14, r14
     47c:	d9 f1       	breq	.+118    	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     47e:	e2 e0       	ldi	r30, 0x02	; 2
     480:	ee 16       	cp	r14, r30
     482:	69 f1       	breq	.+90     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     484:	42 c0       	rjmp	.+132    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     486:	f8 e0       	ldi	r31, 0x08	; 8
     488:	ef 16       	cp	r14, r31
     48a:	09 f4       	brne	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     48c:	42 c0       	rjmp	.+132    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     48e:	8a e0       	ldi	r24, 0x0A	; 10
     490:	e8 16       	cp	r14, r24
     492:	21 f0       	breq	.+8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     494:	e6 e0       	ldi	r30, 0x06	; 6
     496:	ee 12       	cpse	r14, r30
     498:	38 c0       	rjmp	.+112    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     49a:	0b c0       	rjmp	.+22     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		case PGA0256:
			scale = SCA0256;
     49c:	0f 2e       	mov	r0, r31
     49e:	f4 e7       	ldi	r31, 0x74	; 116
     4a0:	8f 2e       	mov	r8, r31
     4a2:	f3 e1       	ldi	r31, 0x13	; 19
     4a4:	9f 2e       	mov	r9, r31
     4a6:	f3 e0       	ldi	r31, 0x03	; 3
     4a8:	af 2e       	mov	r10, r31
     4aa:	f7 e3       	ldi	r31, 0x37	; 55
     4ac:	bf 2e       	mov	r11, r31
     4ae:	f0 2d       	mov	r31, r0
     4b0:	3a c0       	rjmp	.+116    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     4b2:	0f 2e       	mov	r0, r31
     4b4:	f4 e7       	ldi	r31, 0x74	; 116
     4b6:	8f 2e       	mov	r8, r31
     4b8:	f3 e1       	ldi	r31, 0x13	; 19
     4ba:	9f 2e       	mov	r9, r31
     4bc:	f3 e0       	ldi	r31, 0x03	; 3
     4be:	af 2e       	mov	r10, r31
     4c0:	f8 e3       	ldi	r31, 0x38	; 56
     4c2:	bf 2e       	mov	r11, r31
     4c4:	f0 2d       	mov	r31, r0
			break;
     4c6:	2f c0       	rjmp	.+94     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
		case PGA2048:
			scale = SCA2048;
     4c8:	0f 2e       	mov	r0, r31
     4ca:	f2 e1       	ldi	r31, 0x12	; 18
     4cc:	8f 2e       	mov	r8, r31
     4ce:	f3 e1       	ldi	r31, 0x13	; 19
     4d0:	9f 2e       	mov	r9, r31
     4d2:	f3 e8       	ldi	r31, 0x83	; 131
     4d4:	af 2e       	mov	r10, r31
     4d6:	f8 e3       	ldi	r31, 0x38	; 56
     4d8:	bf 2e       	mov	r11, r31
     4da:	f0 2d       	mov	r31, r0
			break;
     4dc:	24 c0       	rjmp	.+72     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
		case PGA4096:
			scale = SCA4096;
     4de:	0f 2e       	mov	r0, r31
     4e0:	f4 e7       	ldi	r31, 0x74	; 116
     4e2:	8f 2e       	mov	r8, r31
     4e4:	f3 e1       	ldi	r31, 0x13	; 19
     4e6:	9f 2e       	mov	r9, r31
     4e8:	f3 e0       	ldi	r31, 0x03	; 3
     4ea:	af 2e       	mov	r10, r31
     4ec:	f9 e3       	ldi	r31, 0x39	; 57
     4ee:	bf 2e       	mov	r11, r31
     4f0:	f0 2d       	mov	r31, r0
			break;
     4f2:	19 c0       	rjmp	.+50     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
		case PGA6144:
			scale = SCA6144;
     4f4:	0f 2e       	mov	r0, r31
     4f6:	fe e2       	ldi	r31, 0x2E	; 46
     4f8:	8f 2e       	mov	r8, r31
     4fa:	fd e9       	ldi	r31, 0x9D	; 157
     4fc:	9f 2e       	mov	r9, r31
     4fe:	f4 e4       	ldi	r31, 0x44	; 68
     500:	af 2e       	mov	r10, r31
     502:	f9 e3       	ldi	r31, 0x39	; 57
     504:	bf 2e       	mov	r11, r31
     506:	f0 2d       	mov	r31, r0
			break;
     508:	0e c0       	rjmp	.+28     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
		default:
			scale = 0.0;
     50a:	81 2c       	mov	r8, r1
     50c:	91 2c       	mov	r9, r1
     50e:	54 01       	movw	r10, r8
			break;
     510:	0a c0       	rjmp	.+20     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     512:	0f 2e       	mov	r0, r31
     514:	f1 e7       	ldi	r31, 0x71	; 113
     516:	8f 2e       	mov	r8, r31
     518:	f3 e1       	ldi	r31, 0x13	; 19
     51a:	9f 2e       	mov	r9, r31
     51c:	f3 e8       	ldi	r31, 0x83	; 131
     51e:	af 2e       	mov	r10, r31
     520:	f7 e3       	ldi	r31, 0x37	; 55
     522:	bf 2e       	mov	r11, r31
     524:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	*voltage = scale * (float) value;
     526:	07 2e       	mov	r0, r23
     528:	00 0c       	add	r0, r0
     52a:	88 0b       	sbc	r24, r24
     52c:	99 0b       	sbc	r25, r25
     52e:	0e 94 b0 30 	call	0x6160	; 0x6160 <__floatsisf>
     532:	9b 01       	movw	r18, r22
     534:	ac 01       	movw	r20, r24
     536:	c5 01       	movw	r24, r10
     538:	b4 01       	movw	r22, r8
     53a:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
     53e:	f6 01       	movw	r30, r12
     540:	60 83       	st	Z, r22
     542:	71 83       	std	Z+1, r23	; 0x01
     544:	82 83       	std	Z+2, r24	; 0x02
     546:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     548:	10 2f       	mov	r17, r16

}
     54a:	81 2f       	mov	r24, r17
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	1f 91       	pop	r17
     552:	0f 91       	pop	r16
     554:	ff 90       	pop	r15
     556:	ef 90       	pop	r14
     558:	df 90       	pop	r13
     55a:	cf 90       	pop	r12
     55c:	bf 90       	pop	r11
     55e:	af 90       	pop	r10
     560:	9f 90       	pop	r9
     562:	8f 90       	pop	r8
     564:	08 95       	ret

00000566 <get_cmdline>:
	if ((d >= '0') && (d <= '9')) {
		return(ERROR);
	}
	return(NOERROR);

}
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	9c 01       	movw	r18, r24
     56c:	40 e0       	ldi	r20, 0x00	; 0
     56e:	1c c0       	rjmp	.+56     	; 0x5a8 <get_cmdline+0x42>
     570:	c6 e4       	ldi	r28, 0x46	; 70
     572:	de e2       	ldi	r29, 0x2E	; 46
     574:	e8 81       	ld	r30, Y
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	e9 5b       	subi	r30, 0xB9	; 185
     57a:	f2 4d       	sbci	r31, 0xD2	; 210
     57c:	80 81       	ld	r24, Z
     57e:	f9 01       	movw	r30, r18
     580:	e4 0f       	add	r30, r20
     582:	f1 1d       	adc	r31, r1
     584:	80 83       	st	Z, r24
     586:	a8 e4       	ldi	r26, 0x48	; 72
     588:	be e2       	ldi	r27, 0x2E	; 46
     58a:	8c 91       	ld	r24, X
     58c:	81 50       	subi	r24, 0x01	; 1
     58e:	8c 93       	st	X, r24
     590:	88 81       	ld	r24, Y
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	01 96       	adiw	r24, 0x01	; 1
     596:	6e ef       	ldi	r22, 0xFE	; 254
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <__divmodhi4>
     59e:	88 83       	st	Y, r24
     5a0:	80 81       	ld	r24, Z
     5a2:	88 23       	and	r24, r24
     5a4:	29 f0       	breq	.+10     	; 0x5b0 <get_cmdline+0x4a>
     5a6:	4f 5f       	subi	r20, 0xFF	; 255
     5a8:	80 91 48 2e 	lds	r24, 0x2E48	; 0x802e48 <recv0_buf+0x101>
     5ac:	81 11       	cpse	r24, r1
     5ae:	e0 cf       	rjmp	.-64     	; 0x570 <get_cmdline+0xa>
     5b0:	f9 01       	movw	r30, r18
     5b2:	e4 0f       	add	r30, r20
     5b4:	f1 1d       	adc	r31, r1
     5b6:	10 82       	st	Z, r1
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     5be:	9f e9       	ldi	r25, 0x9F	; 159
     5c0:	98 0f       	add	r25, r24
     5c2:	9a 31       	cpi	r25, 0x1A	; 26
     5c4:	28 f0       	brcs	.+10     	; 0x5d0 <isaletter+0x12>
     5c6:	81 54       	subi	r24, 0x41	; 65
     5c8:	8a 31       	cpi	r24, 0x1A	; 26
     5ca:	20 f4       	brcc	.+8      	; 0x5d4 <isaletter+0x16>
		return(ERROR);
     5cc:	83 e6       	ldi	r24, 0x63	; 99
     5ce:	08 95       	ret
     5d0:	83 e6       	ldi	r24, 0x63	; 99
     5d2:	08 95       	ret
	}
	return(NOERROR);
     5d4:	80 e0       	ldi	r24, 0x00	; 0

}
     5d6:	08 95       	ret

000005d8 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     5d8:	ef 92       	push	r14
     5da:	ff 92       	push	r15
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     5e4:	e6 2e       	mov	r14, r22
     5e6:	f1 2c       	mov	r15, r1
     5e8:	84 e3       	ldi	r24, 0x34	; 52
     5ea:	8e 9d       	mul	r24, r14
     5ec:	f0 01       	movw	r30, r0
     5ee:	8f 9d       	mul	r24, r15
     5f0:	f0 0d       	add	r31, r0
     5f2:	11 24       	eor	r1, r1
     5f4:	e1 5f       	subi	r30, 0xF1	; 241
     5f6:	f7 4d       	sbci	r31, 0xD7	; 215
     5f8:	8f e3       	ldi	r24, 0x3F	; 63
     5fa:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     5fc:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     5fe:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     600:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     602:	04 c0       	rjmp	.+8      	; 0x60c <parse_cmd+0x34>
		if (*ptr == '\0') {
     604:	11 23       	and	r17, r17
     606:	09 f4       	brne	.+2      	; 0x60a <parse_cmd+0x32>
     608:	75 c0       	rjmp	.+234    	; 0x6f4 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     60a:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     60c:	18 81       	ld	r17, Y
     60e:	81 2f       	mov	r24, r17
     610:	0e 94 df 02 	call	0x5be	; 0x5be <isaletter>
     614:	88 23       	and	r24, r24
     616:	b1 f3       	breq	.-20     	; 0x604 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     618:	21 96       	adiw	r28, 0x01	; 1
     61a:	84 e3       	ldi	r24, 0x34	; 52
     61c:	8e 9d       	mul	r24, r14
     61e:	f0 01       	movw	r30, r0
     620:	8f 9d       	mul	r24, r15
     622:	f0 0d       	add	r31, r0
     624:	11 24       	eor	r1, r1
     626:	e1 5f       	subi	r30, 0xF1	; 241
     628:	f7 4d       	sbci	r31, 0xD7	; 215
     62a:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     62c:	04 c0       	rjmp	.+8      	; 0x636 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     62e:	11 23       	and	r17, r17
     630:	09 f4       	brne	.+2      	; 0x634 <parse_cmd+0x5c>
     632:	60 c0       	rjmp	.+192    	; 0x6f4 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     634:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     636:	18 81       	ld	r17, Y
     638:	81 2f       	mov	r24, r17
     63a:	0e 94 df 02 	call	0x5be	; 0x5be <isaletter>
     63e:	88 23       	and	r24, r24
     640:	b1 f3       	breq	.-20     	; 0x62e <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     642:	21 96       	adiw	r28, 0x01	; 1
     644:	84 e3       	ldi	r24, 0x34	; 52
     646:	8e 9d       	mul	r24, r14
     648:	f0 01       	movw	r30, r0
     64a:	8f 9d       	mul	r24, r15
     64c:	f0 0d       	add	r31, r0
     64e:	11 24       	eor	r1, r1
     650:	e1 5f       	subi	r30, 0xF1	; 241
     652:	f7 4d       	sbci	r31, 0xD7	; 215
     654:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	2a c0       	rjmp	.+84     	; 0x6ae <parse_cmd+0xd6>
		if (*ptr == '\0') {
     65a:	98 81       	ld	r25, Y
     65c:	91 11       	cpse	r25, r1
     65e:	0c c0       	rjmp	.+24     	; 0x678 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     660:	94 e3       	ldi	r25, 0x34	; 52
     662:	9e 9d       	mul	r25, r14
     664:	f0 01       	movw	r30, r0
     666:	9f 9d       	mul	r25, r15
     668:	f0 0d       	add	r31, r0
     66a:	11 24       	eor	r1, r1
     66c:	e1 5f       	subi	r30, 0xF1	; 241
     66e:	f7 4d       	sbci	r31, 0xD7	; 215
     670:	e8 0f       	add	r30, r24
     672:	f1 1d       	adc	r31, r1
     674:	12 82       	std	Z+2, r1	; 0x02
			return;
     676:	3e c0       	rjmp	.+124    	; 0x6f4 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {			// Command ID separator
     678:	9b 33       	cpi	r25, 0x3B	; 59
     67a:	61 f4       	brne	.+24     	; 0x694 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     67c:	94 e3       	ldi	r25, 0x34	; 52
     67e:	9e 9d       	mul	r25, r14
     680:	f0 01       	movw	r30, r0
     682:	9f 9d       	mul	r25, r15
     684:	f0 0d       	add	r31, r0
     686:	11 24       	eor	r1, r1
     688:	e1 5f       	subi	r30, 0xF1	; 241
     68a:	f7 4d       	sbci	r31, 0xD7	; 215
     68c:	e8 0f       	add	r30, r24
     68e:	f1 1d       	adc	r31, r1
     690:	12 82       	std	Z+2, r1	; 0x02
			break;
     692:	0f c0       	rjmp	.+30     	; 0x6b2 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     694:	21 96       	adiw	r28, 0x01	; 1
     696:	24 e3       	ldi	r18, 0x34	; 52
     698:	2e 9d       	mul	r18, r14
     69a:	f0 01       	movw	r30, r0
     69c:	2f 9d       	mul	r18, r15
     69e:	f0 0d       	add	r31, r0
     6a0:	11 24       	eor	r1, r1
     6a2:	e1 5f       	subi	r30, 0xF1	; 241
     6a4:	f7 4d       	sbci	r31, 0xD7	; 215
     6a6:	e8 0f       	add	r30, r24
     6a8:	f1 1d       	adc	r31, r1
     6aa:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6ac:	8f 5f       	subi	r24, 0xFF	; 255
     6ae:	89 32       	cpi	r24, 0x29	; 41
     6b0:	a0 f2       	brcs	.-88     	; 0x65a <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
     6b2:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	1c c0       	rjmp	.+56     	; 0x6f0 <parse_cmd+0x118>
		if (*ptr == '\0') {
     6b8:	98 81       	ld	r25, Y
     6ba:	91 11       	cpse	r25, r1
     6bc:	0c c0       	rjmp	.+24     	; 0x6d6 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     6be:	94 e3       	ldi	r25, 0x34	; 52
     6c0:	9e 9d       	mul	r25, r14
     6c2:	f0 01       	movw	r30, r0
     6c4:	9f 9d       	mul	r25, r15
     6c6:	f0 0d       	add	r31, r0
     6c8:	11 24       	eor	r1, r1
     6ca:	e1 5f       	subi	r30, 0xF1	; 241
     6cc:	f7 4d       	sbci	r31, 0xD7	; 215
     6ce:	e8 0f       	add	r30, r24
     6d0:	f1 1d       	adc	r31, r1
     6d2:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     6d4:	0f c0       	rjmp	.+30     	; 0x6f4 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     6d6:	21 96       	adiw	r28, 0x01	; 1
     6d8:	24 e3       	ldi	r18, 0x34	; 52
     6da:	2e 9d       	mul	r18, r14
     6dc:	f0 01       	movw	r30, r0
     6de:	2f 9d       	mul	r18, r15
     6e0:	f0 0d       	add	r31, r0
     6e2:	11 24       	eor	r1, r1
     6e4:	e1 5f       	subi	r30, 0xF1	; 241
     6e6:	f7 4d       	sbci	r31, 0xD7	; 215
     6e8:	e8 0f       	add	r30, r24
     6ea:	f1 1d       	adc	r31, r1
     6ec:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     6ee:	8f 5f       	subi	r24, 0xFF	; 255
     6f0:	89 30       	cpi	r24, 0x09	; 9
     6f2:	10 f3       	brcs	.-60     	; 0x6b8 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	ff 90       	pop	r15
     6fc:	ef 90       	pop	r14
     6fe:	08 95       	ret

00000700 <printLine>:
		been run and the system has received a reboot acknowledge (the !). This
		is done to prevent unsolicited text being sent (error messages) at
		initialization or after a reboot.
------------------------------------------------------------------------------*/
void printLine(char *str)
{
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	c5 50       	subi	r28, 0x05	; 5
     70e:	d1 40       	sbci	r29, 0x01	; 1
     710:	cd bf       	out	0x3d, r28	; 61
     712:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char prFormat[] = "$S%d%s";
     714:	27 e0       	ldi	r18, 0x07	; 7
     716:	e0 ee       	ldi	r30, 0xE0	; 224
     718:	f0 eb       	ldi	r31, 0xB0	; 176
     71a:	de 01       	movw	r26, r28
     71c:	a1 50       	subi	r26, 0x01	; 1
     71e:	bf 4f       	sbci	r27, 0xFF	; 255
     720:	01 90       	ld	r0, Z+
     722:	0d 92       	st	X+, r0
     724:	2a 95       	dec	r18
     726:	e1 f7       	brne	.-8      	; 0x720 <printLine+0x20>

	if (firstpass) {
     728:	20 91 17 2a 	lds	r18, 0x2A17	; 0x802a17 <firstpass>
     72c:	21 11       	cpse	r18, r1
     72e:	2a c0       	rjmp	.+84     	; 0x784 <printLine+0x84>
		return;
	}

	sprintf(strbuf, prFormat, get_SPECID, str);
     730:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     734:	22 ff       	sbrs	r18, 2
     736:	03 c0       	rjmp	.+6      	; 0x73e <printLine+0x3e>
     738:	22 e0       	ldi	r18, 0x02	; 2
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	02 c0       	rjmp	.+4      	; 0x742 <printLine+0x42>
     73e:	21 e0       	ldi	r18, 0x01	; 1
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	3f 93       	push	r19
     748:	2f 93       	push	r18
     74a:	ce 01       	movw	r24, r28
     74c:	81 50       	subi	r24, 0x01	; 1
     74e:	9f 4f       	sbci	r25, 0xFF	; 255
     750:	9f 93       	push	r25
     752:	8f 93       	push	r24
     754:	8e 01       	movw	r16, r28
     756:	0f 5f       	subi	r16, 0xFF	; 255
     758:	1f 4f       	sbci	r17, 0xFF	; 255
     75a:	1f 93       	push	r17
     75c:	0f 93       	push	r16
     75e:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
	checksum_NMEA(strbuf);
     762:	c8 01       	movw	r24, r16
     764:	0e 94 a8 0c 	call	0x1950	; 0x1950 <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     768:	f8 01       	movw	r30, r16
     76a:	01 90       	ld	r0, Z+
     76c:	00 20       	and	r0, r0
     76e:	e9 f7       	brne	.-6      	; 0x76a <printLine+0x6a>
     770:	31 97       	sbiw	r30, 0x01	; 1
     772:	af 01       	movw	r20, r30
     774:	40 1b       	sub	r20, r16
     776:	51 0b       	sbc	r21, r17
     778:	b8 01       	movw	r22, r16
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 6d 2d 	call	0x5ada	; 0x5ada <send_USART>
     780:	cd bf       	out	0x3d, r28	; 61
     782:	de bf       	out	0x3e, r29	; 62

}
     784:	cb 5f       	subi	r28, 0xFB	; 251
     786:	de 4f       	sbci	r29, 0xFE	; 254
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	08 95       	ret

00000796 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     796:	cf 92       	push	r12
     798:	df 92       	push	r13
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	cc 51       	subi	r28, 0x1C	; 28
     7ac:	d1 40       	sbci	r29, 0x01	; 1
     7ae:	cd bf       	out	0x3d, r28	; 61
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	d8 2e       	mov	r13, r24
     7b4:	c9 2e       	mov	r12, r25

	const char format_CMD[] = "CMD,%s,%s";
     7b6:	8a e0       	ldi	r24, 0x0A	; 10
     7b8:	e7 ee       	ldi	r30, 0xE7	; 231
     7ba:	f0 eb       	ldi	r31, 0xB0	; 176
     7bc:	9e 01       	movw	r18, r28
     7be:	2f 5f       	subi	r18, 0xFF	; 255
     7c0:	3f 4f       	sbci	r19, 0xFF	; 255
     7c2:	79 01       	movw	r14, r18
     7c4:	d9 01       	movw	r26, r18
     7c6:	01 90       	ld	r0, Z+
     7c8:	0d 92       	st	X+, r0
     7ca:	8a 95       	dec	r24
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <echo_cmd+0x30>
	char currenttime[20], strbuf[BUFSIZE];

	get_time(currenttime);
     7ce:	8e 01       	movw	r16, r28
     7d0:	05 5f       	subi	r16, 0xF5	; 245
     7d2:	1f 4f       	sbci	r17, 0xFF	; 255
     7d4:	c8 01       	movw	r24, r16
     7d6:	0e 94 46 07 	call	0xe8c	; 0xe8c <get_time>
	sprintf(strbuf, format_CMD, currenttime, cmdline);
     7da:	cf 92       	push	r12
     7dc:	df 92       	push	r13
     7de:	1f 93       	push	r17
     7e0:	0f 93       	push	r16
     7e2:	ff 92       	push	r15
     7e4:	ef 92       	push	r14
     7e6:	0c 5e       	subi	r16, 0xEC	; 236
     7e8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ea:	1f 93       	push	r17
     7ec:	0f 93       	push	r16
     7ee:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
	printLine(strbuf);
     7f2:	c8 01       	movw	r24, r16
     7f4:	0e 94 80 03 	call	0x700	; 0x700 <printLine>

}
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	c4 5e       	subi	r28, 0xE4	; 228
     7fe:	de 4f       	sbci	r29, 0xFE	; 254
     800:	cd bf       	out	0x3d, r28	; 61
     802:	de bf       	out	0x3e, r29	; 62
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	1f 91       	pop	r17
     80a:	0f 91       	pop	r16
     80c:	ff 90       	pop	r15
     80e:	ef 90       	pop	r14
     810:	df 90       	pop	r13
     812:	cf 90       	pop	r12
     814:	08 95       	ret

00000816 <send_EXprompt>:
/*------------------------------------------------------------------------------
void send_EXprompt(void)
	Sends an exclamation mark on USART port 0
------------------------------------------------------------------------------*/
void send_EXprompt(void)
{
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	00 d0       	rcall	.+0      	; 0x81c <send_EXprompt+0x6>
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62

	const char str[] = "!";
     820:	81 e2       	ldi	r24, 0x21	; 33
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	89 83       	std	Y+1, r24	; 0x01
     826:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	be 01       	movw	r22, r28
     82c:	6f 5f       	subi	r22, 0xFF	; 255
     82e:	7f 4f       	sbci	r23, 0xFF	; 255
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	0e 94 6d 2d 	call	0x5ada	; 0x5ada <send_USART>

}
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	08 95       	ret

00000840 <rebootACKd>:
	Returns:
		YES if the reboot acknowledge string was received
		NO if it wasn't
------------------------------------------------------------------------------*/
uint8_t rebootACKd(char *cmdline)
{
     840:	cf 93       	push	r28

	if (!rebootackd) {
     842:	c0 91 0e 28 	lds	r28, 0x280E	; 0x80280e <rebootackd>
     846:	c1 11       	cpse	r28, r1
     848:	21 c0       	rjmp	.+66     	; 0x88c <rebootACKd+0x4c>
     84a:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     84c:	80 81       	ld	r24, Z
     84e:	81 32       	cpi	r24, 0x21	; 33
     850:	91 f4       	brne	.+36     	; 0x876 <rebootACKd+0x36>
     852:	91 81       	ldd	r25, Z+1	; 0x01
     854:	91 11       	cpse	r25, r1
     856:	0f c0       	rjmp	.+30     	; 0x876 <rebootACKd+0x36>
			init_RTC(511);		// 1-sec RTC clock ticks
     858:	8f ef       	ldi	r24, 0xFF	; 255
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	0e 94 a7 2b 	call	0x574e	; 0x574e <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     860:	85 e0       	ldi	r24, 0x05	; 5
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
     868:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>
			rebootackd = YES;
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <rebootackd>
			return(YES);
     872:	c1 e0       	ldi	r28, 0x01	; 1
     874:	0c c0       	rjmp	.+24     	; 0x88e <rebootACKd+0x4e>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     876:	81 32       	cpi	r24, 0x21	; 33
     878:	31 f4       	brne	.+12     	; 0x886 <rebootACKd+0x46>
     87a:	81 81       	ldd	r24, Z+1	; 0x01
     87c:	88 23       	and	r24, r24
     87e:	19 f0       	breq	.+6      	; 0x886 <rebootACKd+0x46>
			reboot();
     880:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <reboot>
			return(NO);
     884:	04 c0       	rjmp	.+8      	; 0x88e <rebootACKd+0x4e>
		} else {
			send_EXprompt();
     886:	0e 94 0b 04 	call	0x816	; 0x816 <send_EXprompt>
//			send_prompt('!');
			return(NO);
     88a:	01 c0       	rjmp	.+2      	; 0x88e <rebootACKd+0x4e>
		}
	}

	return(YES);
     88c:	c1 e0       	ldi	r28, 0x01	; 1

}
     88e:	8c 2f       	mov	r24, r28
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <send_GTprompt>:
/*------------------------------------------------------------------------------
void send_GTprompt(void)
	Sends a greater than (>) on USART port 0
------------------------------------------------------------------------------*/
void send_GTprompt(void)
{
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	00 d0       	rcall	.+0      	; 0x89a <send_GTprompt+0x6>
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62

	const char str[] = ">";
     89e:	8e e3       	ldi	r24, 0x3E	; 62
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	89 83       	std	Y+1, r24	; 0x01
     8a4:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     8a6:	41 e0       	ldi	r20, 0x01	; 1
     8a8:	be 01       	movw	r22, r28
     8aa:	6f 5f       	subi	r22, 0xFF	; 255
     8ac:	7f 4f       	sbci	r23, 0xFF	; 255
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	0e 94 6d 2d 	call	0x5ada	; 0x5ada <send_USART>

}
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	cf 5f       	subi	r28, 0xFF	; 255
     8c8:	d1 09       	sbc	r29, r1
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	de bf       	out	0x3e, r29	; 62

	char cmdline[BUFSIZE+1];		// BUFSIZE is the size of the ring buffer
	static uint8_t cstack = 0;		// pcmd index

	get_cmdline(cmdline);
     8ce:	ce 01       	movw	r24, r28
     8d0:	01 96       	adiw	r24, 0x01	; 1
     8d2:	0e 94 b3 02 	call	0x566	; 0x566 <get_cmdline>

	if (!rebootACKd(cmdline)) {		// Reboot not yet acknowledged
     8d6:	ce 01       	movw	r24, r28
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	0e 94 20 04 	call	0x840	; 0x840 <rebootACKd>
     8de:	88 23       	and	r24, r24
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <commands+0x26>
     8e2:	7b c0       	rjmp	.+246    	; 0x9da <commands+0x11c>
		return;
	}

		// <CR> or ! alone are not errors
	if ((cmdline[0] == '\0') || (cmdline[0] == '!')) {
     8e4:	89 81       	ldd	r24, Y+1	; 0x01
     8e6:	88 23       	and	r24, r24
     8e8:	11 f0       	breq	.+4      	; 0x8ee <commands+0x30>
     8ea:	81 32       	cpi	r24, 0x21	; 33
     8ec:	29 f4       	brne	.+10     	; 0x8f8 <commands+0x3a>
		firstpass = NO;
     8ee:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <firstpass>
		send_GTprompt();
     8f2:	0e 94 4a 04 	call	0x894	; 0x894 <send_GTprompt>
		return;
     8f6:	71 c0       	rjmp	.+226    	; 0x9da <commands+0x11c>
	}

	echo_cmd(cmdline);
     8f8:	ce 01       	movw	r24, r28
     8fa:	01 96       	adiw	r24, 0x01	; 1
     8fc:	0e 94 cb 03 	call	0x796	; 0x796 <echo_cmd>
	parse_cmd(cmdline, cstack);
     900:	60 91 00 28 	lds	r22, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     904:	ce 01       	movw	r24, r28
     906:	01 96       	adiw	r24, 0x01	; 1
     908:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <parse_cmd>

	switch (pcmd[cstack].cverb) {
     90c:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     910:	24 e3       	ldi	r18, 0x34	; 52
     912:	82 9f       	mul	r24, r18
     914:	f0 01       	movw	r30, r0
     916:	11 24       	eor	r1, r1
     918:	e1 5f       	subi	r30, 0xF1	; 241
     91a:	f7 4d       	sbci	r31, 0xD7	; 215
     91c:	e0 81       	ld	r30, Z
     91e:	4e 2f       	mov	r20, r30
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	fa 01       	movw	r30, r20
     924:	e9 54       	subi	r30, 0x49	; 73
     926:	f1 09       	sbc	r31, r1
     928:	ed 32       	cpi	r30, 0x2D	; 45
     92a:	f1 05       	cpc	r31, r1
     92c:	08 f0       	brcs	.+2      	; 0x930 <commands+0x72>
     92e:	43 c0       	rjmp	.+134    	; 0x9b6 <commands+0xf8>
     930:	e0 5b       	subi	r30, 0xB0	; 176
     932:	ff 4f       	sbci	r31, 0xFF	; 255
     934:	0c 94 82 35 	jmp	0x6b04	; 0x6b04 <__tablejump2__>
		case 'c':				// close
			close_PNEU(cstack);
     938:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <close_PNEU>
			break;
     93c:	42 c0       	rjmp	.+132    	; 0x9c2 <commands+0x104>

		case 'o':				// open
			open_PNEU(cstack);
     93e:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <open_PNEU>
			break;
     942:	3f c0       	rjmp	.+126    	; 0x9c2 <commands+0x104>

		case 'm':				// move
			move_MOTOR_CMD(cstack);
     944:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <move_MOTOR_CMD>
			break;
     948:	3c c0       	rjmp	.+120    	; 0x9c2 <commands+0x104>

		case 'r':				// report
			report(cstack);
     94a:	0e 94 a4 10 	call	0x2148	; 0x2148 <report>
			break;
     94e:	39 c0       	rjmp	.+114    	; 0x9c2 <commands+0x104>

		case 's':				// set
			set(cstack);
     950:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <set>
			break;
     954:	36 c0       	rjmp	.+108    	; 0x9c2 <commands+0x104>

		case 't':
			testroutine();
     956:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <testroutine>
			break;
     95a:	33 c0       	rjmp	.+102    	; 0x9c2 <commands+0x104>

		case 'u':
			unstick_MOTOR_LIMIT(cstack);
     95c:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <unstick_MOTOR_LIMIT>
			break;
     960:	30 c0       	rjmp	.+96     	; 0x9c2 <commands+0x104>

		case 'I':	// test init_MOTORS
			init_MOTORS();
     962:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <init_MOTORS>
			break;
     966:	2d c0       	rjmp	.+90     	; 0x9c2 <commands+0x104>

		case 'R':				// Reboot
			if (motorsMoving()) {
     968:	0e 94 9f 20 	call	0x413e	; 0x413e <motorsMoving>
     96c:	88 23       	and	r24, r24
     96e:	39 f0       	breq	.+14     	; 0x97e <commands+0xc0>
				printError(ERR_MTR, "commands: Can't reboot, motor moving");
     970:	61 ef       	ldi	r22, 0xF1	; 241
     972:	70 eb       	ldi	r23, 0xB0	; 176
     974:	86 e3       	ldi	r24, 0x36	; 54
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				break;
     97c:	22 c0       	rjmp	.+68     	; 0x9c2 <commands+0x104>
			} else {
				if (put_FRAM_ENCODERS() == ERROR) {
     97e:	0e 94 00 21 	call	0x4200	; 0x4200 <put_FRAM_ENCODERS>
     982:	83 36       	cpi	r24, 0x63	; 99
     984:	31 f4       	brne	.+12     	; 0x992 <commands+0xd4>
					printError(ERR_FRAM, "commands: put_FRAM_ENCODERS error");
     986:	66 e1       	ldi	r22, 0x16	; 22
     988:	71 eb       	ldi	r23, 0xB1	; 177
     98a:	83 e9       	ldi	r24, 0x93	; 147
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				}
				timerSAVEENCODER = 0;
     992:	10 92 3c 2a 	sts	0x2A3C, r1	; 0x802a3c <timerSAVEENCODER>
				send_GTprompt();	// Aidan request
     996:	0e 94 4a 04 	call	0x894	; 0x894 <send_GTprompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     99a:	8a e6       	ldi	r24, 0x6A	; 106
     99c:	94 e0       	ldi	r25, 0x04	; 4
     99e:	21 e0       	ldi	r18, 0x01	; 1
     9a0:	81 50       	subi	r24, 0x01	; 1
     9a2:	90 40       	sbci	r25, 0x00	; 0
     9a4:	20 40       	sbci	r18, 0x00	; 0
     9a6:	e1 f7       	brne	.-8      	; 0x9a0 <commands+0xe2>
     9a8:	00 c0       	rjmp	.+0      	; 0x9aa <commands+0xec>
				_delay_ms(100);
				reboot();			// in wdt.c
     9aa:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <reboot>
				return;
     9ae:	15 c0       	rjmp	.+42     	; 0x9da <commands+0x11c>
			}

		case 'Z':				// Write zero to encoder
			zero_MOTOR_CMD(cstack);
     9b0:	0e 94 ed 28 	call	0x51da	; 0x51da <zero_MOTOR_CMD>
			break;
     9b4:	06 c0       	rjmp	.+12     	; 0x9c2 <commands+0x104>

		default:
			printError(ERR_BADCOMMAND, "Not a command");
     9b6:	68 e3       	ldi	r22, 0x38	; 56
     9b8:	71 eb       	ldi	r23, 0xB1	; 177
     9ba:	89 ec       	ldi	r24, 0xC9	; 201
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     9c2:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	6a e0       	ldi	r22, 0x0A	; 10
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <__divmodhi4>
     9d2:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	send_GTprompt();
     9d6:	0e 94 4a 04 	call	0x894	; 0x894 <send_GTprompt>

}
     9da:	c1 50       	subi	r28, 0x01	; 1
     9dc:	df 4f       	sbci	r29, 0xFF	; 255
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	de bf       	out	0x3e, r29	; 62
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	08 95       	ret

000009e8 <check_isotime>:
#include "twi.h"
#include "errors.h"
#include "ds3231.h"

uint8_t check_isotime(char *isotime)
{
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
     9f4:	c0 5f       	subi	r28, 0xF0	; 240
     9f6:	d1 09       	sbc	r29, r1
     9f8:	cd bf       	out	0x3d, r28	; 61
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	8c 01       	movw	r16, r24

	char sbuf[10], strbuf[80];
	uint8_t i;
	int year, month, day, hours, minutes, seconds;
	const char msg0[] = "check_isotime: bad year";
     9fe:	88 e1       	ldi	r24, 0x18	; 24
     a00:	e6 e4       	ldi	r30, 0x46	; 70
     a02:	f1 eb       	ldi	r31, 0xB1	; 177
     a04:	de 01       	movw	r26, r28
     a06:	a5 5a       	subi	r26, 0xA5	; 165
     a08:	bf 4f       	sbci	r27, 0xFF	; 255
     a0a:	01 90       	ld	r0, Z+
     a0c:	0d 92       	st	X+, r0
     a0e:	8a 95       	dec	r24
     a10:	e1 f7       	brne	.-8      	; 0xa0a <check_isotime+0x22>
	const char msg1[] = "check_isotime: bad month";
     a12:	89 e1       	ldi	r24, 0x19	; 25
     a14:	ee e5       	ldi	r30, 0x5E	; 94
     a16:	f1 eb       	ldi	r31, 0xB1	; 177
     a18:	de 01       	movw	r26, r28
     a1a:	ad 58       	subi	r26, 0x8D	; 141
     a1c:	bf 4f       	sbci	r27, 0xFF	; 255
     a1e:	01 90       	ld	r0, Z+
     a20:	0d 92       	st	X+, r0
     a22:	8a 95       	dec	r24
     a24:	e1 f7       	brne	.-8      	; 0xa1e <check_isotime+0x36>
	const char msg2[] = "check_isotime: bad day";
     a26:	87 e1       	ldi	r24, 0x17	; 23
     a28:	e7 e7       	ldi	r30, 0x77	; 119
     a2a:	f1 eb       	ldi	r31, 0xB1	; 177
     a2c:	de 01       	movw	r26, r28
     a2e:	a4 57       	subi	r26, 0x74	; 116
     a30:	bf 4f       	sbci	r27, 0xFF	; 255
     a32:	01 90       	ld	r0, Z+
     a34:	0d 92       	st	X+, r0
     a36:	8a 95       	dec	r24
     a38:	e1 f7       	brne	.-8      	; 0xa32 <check_isotime+0x4a>
	const char msg3[] = "check_isotime: bad hour";
     a3a:	88 e1       	ldi	r24, 0x18	; 24
     a3c:	ee e8       	ldi	r30, 0x8E	; 142
     a3e:	f1 eb       	ldi	r31, 0xB1	; 177
     a40:	de 01       	movw	r26, r28
     a42:	ad 55       	subi	r26, 0x5D	; 93
     a44:	bf 4f       	sbci	r27, 0xFF	; 255
     a46:	01 90       	ld	r0, Z+
     a48:	0d 92       	st	X+, r0
     a4a:	8a 95       	dec	r24
     a4c:	e1 f7       	brne	.-8      	; 0xa46 <check_isotime+0x5e>
	const char msg4[] = "check_isotime: bad minutes";
     a4e:	8b e1       	ldi	r24, 0x1B	; 27
     a50:	e6 ea       	ldi	r30, 0xA6	; 166
     a52:	f1 eb       	ldi	r31, 0xB1	; 177
     a54:	de 01       	movw	r26, r28
     a56:	a5 54       	subi	r26, 0x45	; 69
     a58:	bf 4f       	sbci	r27, 0xFF	; 255
     a5a:	01 90       	ld	r0, Z+
     a5c:	0d 92       	st	X+, r0
     a5e:	8a 95       	dec	r24
     a60:	e1 f7       	brne	.-8      	; 0xa5a <check_isotime+0x72>
	const char msg5[] = "check_isotime: bad seconds";
     a62:	8b e1       	ldi	r24, 0x1B	; 27
     a64:	e1 ec       	ldi	r30, 0xC1	; 193
     a66:	f1 eb       	ldi	r31, 0xB1	; 177
     a68:	de 01       	movw	r26, r28
     a6a:	aa 52       	subi	r26, 0x2A	; 42
     a6c:	bf 4f       	sbci	r27, 0xFF	; 255
     a6e:	01 90       	ld	r0, Z+
     a70:	0d 92       	st	X+, r0
     a72:	8a 95       	dec	r24
     a74:	e1 f7       	brne	.-8      	; 0xa6e <check_isotime+0x86>

	for (i = 0; i < 4; i++) {
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	0e c0       	rjmp	.+28     	; 0xa96 <check_isotime+0xae>
		sbuf[i] = isotime[i];
     a7a:	82 2f       	mov	r24, r18
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	f8 01       	movw	r30, r16
     a80:	e8 0f       	add	r30, r24
     a82:	f9 1f       	adc	r31, r25
     a84:	30 81       	ld	r19, Z
     a86:	e1 e0       	ldi	r30, 0x01	; 1
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	ec 0f       	add	r30, r28
     a8c:	fd 1f       	adc	r31, r29
     a8e:	e8 0f       	add	r30, r24
     a90:	f9 1f       	adc	r31, r25
     a92:	30 83       	st	Z, r19
	const char msg2[] = "check_isotime: bad day";
	const char msg3[] = "check_isotime: bad hour";
	const char msg4[] = "check_isotime: bad minutes";
	const char msg5[] = "check_isotime: bad seconds";

	for (i = 0; i < 4; i++) {
     a94:	2f 5f       	subi	r18, 0xFF	; 255
     a96:	24 30       	cpi	r18, 0x04	; 4
     a98:	80 f3       	brcs	.-32     	; 0xa7a <check_isotime+0x92>
		sbuf[i] = isotime[i];
	}
	sbuf[4] = '\0';
     a9a:	1d 82       	std	Y+5, r1	; 0x05
	year = atoi(sbuf);
     a9c:	ce 01       	movw	r24, r28
     a9e:	01 96       	adiw	r24, 0x01	; 1
     aa0:	0e 94 09 36 	call	0x6c12	; 0x6c12 <atoi>
	if ((year < 2021) || year > 2030) {
     aa4:	85 5e       	subi	r24, 0xE5	; 229
     aa6:	97 40       	sbci	r25, 0x07	; 7
     aa8:	0a 97       	sbiw	r24, 0x0a	; 10
     aaa:	40 f1       	brcs	.+80     	; 0xafc <check_isotime+0x114>
		sprintf(strbuf, msg0);
     aac:	ce 01       	movw	r24, r28
     aae:	85 5a       	subi	r24, 0xA5	; 165
     ab0:	9f 4f       	sbci	r25, 0xFF	; 255
     ab2:	9f 93       	push	r25
     ab4:	8f 93       	push	r24
     ab6:	8e 01       	movw	r16, r28
     ab8:	05 5f       	subi	r16, 0xF5	; 245
     aba:	1f 4f       	sbci	r17, 0xFF	; 255
     abc:	1f 93       	push	r17
     abe:	0f 93       	push	r16
     ac0:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
		printError(ERR_ISO, strbuf);
     ac4:	b8 01       	movw	r22, r16
     ac6:	8b e5       	ldi	r24, 0x5B	; 91
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		return(ERROR);
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	83 e6       	ldi	r24, 0x63	; 99
     ad8:	fd c0       	rjmp	.+506    	; 0xcd4 <check_isotime+0x2ec>
	}
	for (i = 5; i < 7; i++) {
		sbuf[i-5] = isotime[i];
     ada:	28 2f       	mov	r18, r24
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	f9 01       	movw	r30, r18
     ae0:	35 97       	sbiw	r30, 0x05	; 5
     ae2:	d8 01       	movw	r26, r16
     ae4:	a2 0f       	add	r26, r18
     ae6:	b3 1f       	adc	r27, r19
     ae8:	9c 91       	ld	r25, X
     aea:	21 e0       	ldi	r18, 0x01	; 1
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	2c 0f       	add	r18, r28
     af0:	3d 1f       	adc	r19, r29
     af2:	e2 0f       	add	r30, r18
     af4:	f3 1f       	adc	r31, r19
     af6:	90 83       	st	Z, r25
	if ((year < 2021) || year > 2030) {
		sprintf(strbuf, msg0);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 5; i < 7; i++) {
     af8:	8f 5f       	subi	r24, 0xFF	; 255
     afa:	01 c0       	rjmp	.+2      	; 0xafe <check_isotime+0x116>
     afc:	85 e0       	ldi	r24, 0x05	; 5
     afe:	87 30       	cpi	r24, 0x07	; 7
     b00:	60 f3       	brcs	.-40     	; 0xada <check_isotime+0xf2>
		sbuf[i-5] = isotime[i];
	}
	sbuf[2] = '\0';
     b02:	1b 82       	std	Y+3, r1	; 0x03
	month = atoi(sbuf);
     b04:	ce 01       	movw	r24, r28
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	0e 94 09 36 	call	0x6c12	; 0x6c12 <atoi>
	if ((month < 1) || (month > 12)) {
     b0c:	01 97       	sbiw	r24, 0x01	; 1
     b0e:	0c 97       	sbiw	r24, 0x0c	; 12
     b10:	40 f1       	brcs	.+80     	; 0xb62 <check_isotime+0x17a>
		sprintf(strbuf, msg1);
     b12:	ce 01       	movw	r24, r28
     b14:	8d 58       	subi	r24, 0x8D	; 141
     b16:	9f 4f       	sbci	r25, 0xFF	; 255
     b18:	9f 93       	push	r25
     b1a:	8f 93       	push	r24
     b1c:	8e 01       	movw	r16, r28
     b1e:	05 5f       	subi	r16, 0xF5	; 245
     b20:	1f 4f       	sbci	r17, 0xFF	; 255
     b22:	1f 93       	push	r17
     b24:	0f 93       	push	r16
     b26:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
		printError(ERR_ISO, strbuf);
     b2a:	b8 01       	movw	r22, r16
     b2c:	8b e5       	ldi	r24, 0x5B	; 91
     b2e:	92 e0       	ldi	r25, 0x02	; 2
     b30:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		return(ERROR);
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	83 e6       	ldi	r24, 0x63	; 99
     b3e:	ca c0       	rjmp	.+404    	; 0xcd4 <check_isotime+0x2ec>
	}
	for (i = 8; i < 10; i++) {
		sbuf[i-8] = isotime[i];
     b40:	28 2f       	mov	r18, r24
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	f9 01       	movw	r30, r18
     b46:	38 97       	sbiw	r30, 0x08	; 8
     b48:	d8 01       	movw	r26, r16
     b4a:	a2 0f       	add	r26, r18
     b4c:	b3 1f       	adc	r27, r19
     b4e:	9c 91       	ld	r25, X
     b50:	21 e0       	ldi	r18, 0x01	; 1
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	2c 0f       	add	r18, r28
     b56:	3d 1f       	adc	r19, r29
     b58:	e2 0f       	add	r30, r18
     b5a:	f3 1f       	adc	r31, r19
     b5c:	90 83       	st	Z, r25
	if ((month < 1) || (month > 12)) {
		sprintf(strbuf, msg1);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 8; i < 10; i++) {
     b5e:	8f 5f       	subi	r24, 0xFF	; 255
     b60:	01 c0       	rjmp	.+2      	; 0xb64 <check_isotime+0x17c>
     b62:	88 e0       	ldi	r24, 0x08	; 8
     b64:	8a 30       	cpi	r24, 0x0A	; 10
     b66:	60 f3       	brcs	.-40     	; 0xb40 <check_isotime+0x158>
		sbuf[i-8] = isotime[i];
	}
	sbuf[2] = '\0';
     b68:	1b 82       	std	Y+3, r1	; 0x03
	day = atoi(sbuf);
     b6a:	ce 01       	movw	r24, r28
     b6c:	01 96       	adiw	r24, 0x01	; 1
     b6e:	0e 94 09 36 	call	0x6c12	; 0x6c12 <atoi>
	if ((day < 1) || (day > 31)) {
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	4f 97       	sbiw	r24, 0x1f	; 31
     b76:	40 f1       	brcs	.+80     	; 0xbc8 <check_isotime+0x1e0>
		sprintf(strbuf, msg2);
     b78:	ce 01       	movw	r24, r28
     b7a:	84 57       	subi	r24, 0x74	; 116
     b7c:	9f 4f       	sbci	r25, 0xFF	; 255
     b7e:	9f 93       	push	r25
     b80:	8f 93       	push	r24
     b82:	8e 01       	movw	r16, r28
     b84:	05 5f       	subi	r16, 0xF5	; 245
     b86:	1f 4f       	sbci	r17, 0xFF	; 255
     b88:	1f 93       	push	r17
     b8a:	0f 93       	push	r16
     b8c:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
		printError(ERR_ISO, strbuf);
     b90:	b8 01       	movw	r22, r16
     b92:	8b e5       	ldi	r24, 0x5B	; 91
     b94:	92 e0       	ldi	r25, 0x02	; 2
     b96:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		return(ERROR);
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	83 e6       	ldi	r24, 0x63	; 99
     ba4:	97 c0       	rjmp	.+302    	; 0xcd4 <check_isotime+0x2ec>
	}
	for (i = 11; i < 13; i++) {
		sbuf[i-11] = isotime[i];
     ba6:	28 2f       	mov	r18, r24
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	f9 01       	movw	r30, r18
     bac:	3b 97       	sbiw	r30, 0x0b	; 11
     bae:	d8 01       	movw	r26, r16
     bb0:	a2 0f       	add	r26, r18
     bb2:	b3 1f       	adc	r27, r19
     bb4:	9c 91       	ld	r25, X
     bb6:	21 e0       	ldi	r18, 0x01	; 1
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	2c 0f       	add	r18, r28
     bbc:	3d 1f       	adc	r19, r29
     bbe:	e2 0f       	add	r30, r18
     bc0:	f3 1f       	adc	r31, r19
     bc2:	90 83       	st	Z, r25
	if ((day < 1) || (day > 31)) {
		sprintf(strbuf, msg2);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 11; i < 13; i++) {
     bc4:	8f 5f       	subi	r24, 0xFF	; 255
     bc6:	01 c0       	rjmp	.+2      	; 0xbca <check_isotime+0x1e2>
     bc8:	8b e0       	ldi	r24, 0x0B	; 11
     bca:	8d 30       	cpi	r24, 0x0D	; 13
     bcc:	60 f3       	brcs	.-40     	; 0xba6 <check_isotime+0x1be>
		sbuf[i-11] = isotime[i];
	}
	sbuf[2] = '\0';
     bce:	1b 82       	std	Y+3, r1	; 0x03
	hours = atoi(sbuf);
     bd0:	ce 01       	movw	r24, r28
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	0e 94 09 36 	call	0x6c12	; 0x6c12 <atoi>
	if ((hours < 0) || (hours > 23)) {
     bd8:	48 97       	sbiw	r24, 0x18	; 24
     bda:	40 f1       	brcs	.+80     	; 0xc2c <check_isotime+0x244>
		sprintf(strbuf, msg3);
     bdc:	ce 01       	movw	r24, r28
     bde:	8d 55       	subi	r24, 0x5D	; 93
     be0:	9f 4f       	sbci	r25, 0xFF	; 255
     be2:	9f 93       	push	r25
     be4:	8f 93       	push	r24
     be6:	8e 01       	movw	r16, r28
     be8:	05 5f       	subi	r16, 0xF5	; 245
     bea:	1f 4f       	sbci	r17, 0xFF	; 255
     bec:	1f 93       	push	r17
     bee:	0f 93       	push	r16
     bf0:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
		printError(ERR_ISO, strbuf);
     bf4:	b8 01       	movw	r22, r16
     bf6:	8b e5       	ldi	r24, 0x5B	; 91
     bf8:	92 e0       	ldi	r25, 0x02	; 2
     bfa:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		return(ERROR);
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	83 e6       	ldi	r24, 0x63	; 99
     c08:	65 c0       	rjmp	.+202    	; 0xcd4 <check_isotime+0x2ec>
	}
	for (i = 14; i < 16; i++) {
		sbuf[i-14] = isotime[i];
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	f9 01       	movw	r30, r18
     c10:	3e 97       	sbiw	r30, 0x0e	; 14
     c12:	d8 01       	movw	r26, r16
     c14:	a2 0f       	add	r26, r18
     c16:	b3 1f       	adc	r27, r19
     c18:	9c 91       	ld	r25, X
     c1a:	21 e0       	ldi	r18, 0x01	; 1
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	2c 0f       	add	r18, r28
     c20:	3d 1f       	adc	r19, r29
     c22:	e2 0f       	add	r30, r18
     c24:	f3 1f       	adc	r31, r19
     c26:	90 83       	st	Z, r25
	if ((hours < 0) || (hours > 23)) {
		sprintf(strbuf, msg3);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 14; i < 16; i++) {
     c28:	8f 5f       	subi	r24, 0xFF	; 255
     c2a:	01 c0       	rjmp	.+2      	; 0xc2e <check_isotime+0x246>
     c2c:	8e e0       	ldi	r24, 0x0E	; 14
     c2e:	80 31       	cpi	r24, 0x10	; 16
     c30:	60 f3       	brcs	.-40     	; 0xc0a <check_isotime+0x222>
		sbuf[i-14] = isotime[i];
	}
	sbuf[2] = '\0';
     c32:	1b 82       	std	Y+3, r1	; 0x03
	minutes = atoi(sbuf);
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	0e 94 09 36 	call	0x6c12	; 0x6c12 <atoi>
	if ((minutes < 0) || (minutes > 59)) {
     c3c:	cc 97       	sbiw	r24, 0x3c	; 60
     c3e:	40 f1       	brcs	.+80     	; 0xc90 <check_isotime+0x2a8>
		sprintf(strbuf, msg4);
     c40:	ce 01       	movw	r24, r28
     c42:	85 54       	subi	r24, 0x45	; 69
     c44:	9f 4f       	sbci	r25, 0xFF	; 255
     c46:	9f 93       	push	r25
     c48:	8f 93       	push	r24
     c4a:	8e 01       	movw	r16, r28
     c4c:	05 5f       	subi	r16, 0xF5	; 245
     c4e:	1f 4f       	sbci	r17, 0xFF	; 255
     c50:	1f 93       	push	r17
     c52:	0f 93       	push	r16
     c54:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
		printError(ERR_ISO, strbuf);
     c58:	b8 01       	movw	r22, r16
     c5a:	8b e5       	ldi	r24, 0x5B	; 91
     c5c:	92 e0       	ldi	r25, 0x02	; 2
     c5e:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		return(ERROR);
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	83 e6       	ldi	r24, 0x63	; 99
     c6c:	33 c0       	rjmp	.+102    	; 0xcd4 <check_isotime+0x2ec>
	}
	for (i = 17; i < 19; i++) {
		sbuf[i-17] = isotime[i];
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	f9 01       	movw	r30, r18
     c74:	71 97       	sbiw	r30, 0x11	; 17
     c76:	d8 01       	movw	r26, r16
     c78:	a2 0f       	add	r26, r18
     c7a:	b3 1f       	adc	r27, r19
     c7c:	9c 91       	ld	r25, X
     c7e:	21 e0       	ldi	r18, 0x01	; 1
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	2c 0f       	add	r18, r28
     c84:	3d 1f       	adc	r19, r29
     c86:	e2 0f       	add	r30, r18
     c88:	f3 1f       	adc	r31, r19
     c8a:	90 83       	st	Z, r25
	if ((minutes < 0) || (minutes > 59)) {
		sprintf(strbuf, msg4);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 17; i < 19; i++) {
     c8c:	8f 5f       	subi	r24, 0xFF	; 255
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <check_isotime+0x2aa>
     c90:	81 e1       	ldi	r24, 0x11	; 17
     c92:	83 31       	cpi	r24, 0x13	; 19
     c94:	60 f3       	brcs	.-40     	; 0xc6e <check_isotime+0x286>
		sbuf[i-17] = isotime[i];
	}
	sbuf[2] = '\0';
     c96:	1b 82       	std	Y+3, r1	; 0x03
	seconds = atoi(sbuf);
     c98:	ce 01       	movw	r24, r28
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	0e 94 09 36 	call	0x6c12	; 0x6c12 <atoi>
	if ((seconds < 0) || (seconds > 59)) {
     ca0:	cc 97       	sbiw	r24, 0x3c	; 60
     ca2:	b8 f0       	brcs	.+46     	; 0xcd2 <check_isotime+0x2ea>
		sprintf(strbuf, msg5);
     ca4:	ce 01       	movw	r24, r28
     ca6:	8a 52       	subi	r24, 0x2A	; 42
     ca8:	9f 4f       	sbci	r25, 0xFF	; 255
     caa:	9f 93       	push	r25
     cac:	8f 93       	push	r24
     cae:	8e 01       	movw	r16, r28
     cb0:	05 5f       	subi	r16, 0xF5	; 245
     cb2:	1f 4f       	sbci	r17, 0xFF	; 255
     cb4:	1f 93       	push	r17
     cb6:	0f 93       	push	r16
     cb8:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
		printError(ERR_ISO, strbuf);
     cbc:	b8 01       	movw	r22, r16
     cbe:	8b e5       	ldi	r24, 0x5B	; 91
     cc0:	92 e0       	ldi	r25, 0x02	; 2
     cc2:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		return(ERROR);
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	83 e6       	ldi	r24, 0x63	; 99
     cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <check_isotime+0x2ec>
	}
	return(NOERROR);
     cd2:	80 e0       	ldi	r24, 0x00	; 0
}
     cd4:	c0 51       	subi	r28, 0x10	; 16
     cd6:	df 4f       	sbci	r29, 0xFF	; 255
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	08 95       	ret

00000ce6 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	a0 97       	sbiw	r28, 0x20	; 32
     cf4:	cd bf       	out	0x3d, r28	; 61
     cf6:	de bf       	out	0x3e, r29	; 62

	const char format_ISO[] = "20%02x-%02x-%02xT%02x:%02x:%02x";
     cf8:	40 e2       	ldi	r20, 0x20	; 32
     cfa:	ec ed       	ldi	r30, 0xDC	; 220
     cfc:	f1 eb       	ldi	r31, 0xB1	; 177
     cfe:	9e 01       	movw	r18, r28
     d00:	2f 5f       	subi	r18, 0xFF	; 255
     d02:	3f 4f       	sbci	r19, 0xFF	; 255
     d04:	d9 01       	movw	r26, r18
     d06:	01 90       	ld	r0, Z+
     d08:	0d 92       	st	X+, r0
     d0a:	4a 95       	dec	r20
     d0c:	e1 f7       	brne	.-8      	; 0xd06 <convert_ds2iso+0x20>
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     d0e:	fb 01       	movw	r30, r22
     d10:	b0 81       	ld	r27, Z
	minutes = (*ds3231time++);
     d12:	a1 81       	ldd	r26, Z+1	; 0x01
	hours = (*ds3231time++);
     d14:	12 81       	ldd	r17, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     d16:	04 81       	ldd	r16, Z+4	; 0x04
	month = (*ds3231time++);
     d18:	55 81       	ldd	r21, Z+5	; 0x05
	year = (*ds3231time);
     d1a:	46 81       	ldd	r20, Z+6	; 0x06

	sprintf(isotime, format_ISO, year, month, date, hours, minutes, seconds);
     d1c:	1f 92       	push	r1
     d1e:	bf 93       	push	r27
     d20:	1f 92       	push	r1
     d22:	af 93       	push	r26
     d24:	1f 92       	push	r1
     d26:	1f 93       	push	r17
     d28:	1f 92       	push	r1
     d2a:	0f 93       	push	r16
     d2c:	1f 92       	push	r1
     d2e:	5f 93       	push	r21
     d30:	1f 92       	push	r1
     d32:	4f 93       	push	r20
     d34:	3f 93       	push	r19
     d36:	2f 93       	push	r18
     d38:	9f 93       	push	r25
     d3a:	8f 93       	push	r24
     d3c:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>

}
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	a0 96       	adiw	r28, 0x20	; 32
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	08 95       	ret

00000d54 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     d54:	dc 01       	movw	r26, r24
     d56:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     d58:	81 89       	ldd	r24, Z+17	; 0x11
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	c0 97       	sbiw	r24, 0x30	; 48
     d5e:	82 95       	swap	r24
     d60:	92 95       	swap	r25
     d62:	90 7f       	andi	r25, 0xF0	; 240
     d64:	98 27       	eor	r25, r24
     d66:	80 7f       	andi	r24, 0xF0	; 240
     d68:	98 27       	eor	r25, r24
     d6a:	92 89       	ldd	r25, Z+18	; 0x12
     d6c:	90 53       	subi	r25, 0x30	; 48
     d6e:	89 2b       	or	r24, r25
     d70:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     d72:	86 85       	ldd	r24, Z+14	; 0x0e
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	c0 97       	sbiw	r24, 0x30	; 48
     d78:	82 95       	swap	r24
     d7a:	92 95       	swap	r25
     d7c:	90 7f       	andi	r25, 0xF0	; 240
     d7e:	98 27       	eor	r25, r24
     d80:	80 7f       	andi	r24, 0xF0	; 240
     d82:	98 27       	eor	r25, r24
     d84:	97 85       	ldd	r25, Z+15	; 0x0f
     d86:	90 53       	subi	r25, 0x30	; 48
     d88:	89 2b       	or	r24, r25
     d8a:	11 96       	adiw	r26, 0x01	; 1
     d8c:	8c 93       	st	X, r24
     d8e:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     d90:	83 85       	ldd	r24, Z+11	; 0x0b
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	c0 97       	sbiw	r24, 0x30	; 48
     d96:	82 95       	swap	r24
     d98:	92 95       	swap	r25
     d9a:	90 7f       	andi	r25, 0xF0	; 240
     d9c:	98 27       	eor	r25, r24
     d9e:	80 7f       	andi	r24, 0xF0	; 240
     da0:	98 27       	eor	r25, r24
     da2:	94 85       	ldd	r25, Z+12	; 0x0c
     da4:	90 53       	subi	r25, 0x30	; 48
     da6:	89 2b       	or	r24, r25
     da8:	12 96       	adiw	r26, 0x02	; 2
     daa:	8c 93       	st	X, r24
     dac:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	8c 93       	st	X, r24
     db4:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     db6:	80 85       	ldd	r24, Z+8	; 0x08
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	c0 97       	sbiw	r24, 0x30	; 48
     dbc:	82 95       	swap	r24
     dbe:	92 95       	swap	r25
     dc0:	90 7f       	andi	r25, 0xF0	; 240
     dc2:	98 27       	eor	r25, r24
     dc4:	80 7f       	andi	r24, 0xF0	; 240
     dc6:	98 27       	eor	r25, r24
     dc8:	91 85       	ldd	r25, Z+9	; 0x09
     dca:	90 53       	subi	r25, 0x30	; 48
     dcc:	89 2b       	or	r24, r25
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	8c 93       	st	X, r24
     dd2:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     dd4:	25 81       	ldd	r18, Z+5	; 0x05
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	20 53       	subi	r18, 0x30	; 48
     dda:	31 09       	sbc	r19, r1
     ddc:	22 95       	swap	r18
     dde:	32 95       	swap	r19
     de0:	30 7f       	andi	r19, 0xF0	; 240
     de2:	32 27       	eor	r19, r18
     de4:	20 7f       	andi	r18, 0xF0	; 240
     de6:	32 27       	eor	r19, r18
     de8:	86 81       	ldd	r24, Z+6	; 0x06
     dea:	80 53       	subi	r24, 0x30	; 48
     dec:	28 2b       	or	r18, r24
     dee:	15 96       	adiw	r26, 0x05	; 5
     df0:	2c 93       	st	X, r18
     df2:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     df4:	22 81       	ldd	r18, Z+2	; 0x02
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	20 53       	subi	r18, 0x30	; 48
     dfa:	31 09       	sbc	r19, r1
     dfc:	22 95       	swap	r18
     dfe:	32 95       	swap	r19
     e00:	30 7f       	andi	r19, 0xF0	; 240
     e02:	32 27       	eor	r19, r18
     e04:	20 7f       	andi	r18, 0xF0	; 240
     e06:	32 27       	eor	r19, r18
     e08:	83 81       	ldd	r24, Z+3	; 0x03
     e0a:	80 53       	subi	r24, 0x30	; 48
     e0c:	28 2b       	or	r18, r24
     e0e:	16 96       	adiw	r26, 0x06	; 6
     e10:	2c 93       	st	X, r18
     e12:	08 95       	ret

00000e14 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	7b 01       	movw	r14, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
     e26:	c8 2f       	mov	r28, r24
     e28:	83 36       	cpi	r24, 0x63	; 99
     e2a:	19 f4       	brne	.+6      	; 0xe32 <read_DS3231+0x1e>
		stop_TWI();
     e2c:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(ERROR);
     e30:	26 c0       	rjmp	.+76     	; 0xe7e <read_DS3231+0x6a>
    }  

	if (write_TWI(0x00) == ERROR) {	// Register 00h
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
     e38:	c8 2f       	mov	r28, r24
     e3a:	83 36       	cpi	r24, 0x63	; 99
     e3c:	19 f4       	brne	.+6      	; 0xe44 <read_DS3231+0x30>
		stop_TWI();
     e3e:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(ERROR);
     e42:	1d c0       	rjmp	.+58     	; 0xe7e <read_DS3231+0x6a>
	}

	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
     e44:	61 e0       	ldi	r22, 0x01	; 1
     e46:	88 e6       	ldi	r24, 0x68	; 104
     e48:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
     e4c:	c8 2f       	mov	r28, r24
     e4e:	83 36       	cpi	r24, 0x63	; 99
     e50:	61 f4       	brne	.+24     	; 0xe6a <read_DS3231+0x56>
		stop_TWI();
     e52:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(ERROR);
     e56:	13 c0       	rjmp	.+38     	; 0xe7e <read_DS3231+0x6a>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     e58:	87 01       	movw	r16, r14
     e5a:	0c 0f       	add	r16, r28
     e5c:	11 1d       	adc	r17, r1
     e5e:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <read_TWI>
     e62:	f8 01       	movw	r30, r16
     e64:	80 83       	st	Z, r24
	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 6; i++) {
     e66:	cf 5f       	subi	r28, 0xFF	; 255
     e68:	01 c0       	rjmp	.+2      	; 0xe6c <read_DS3231+0x58>
     e6a:	c0 e0       	ldi	r28, 0x00	; 0
     e6c:	c6 30       	cpi	r28, 0x06	; 6
     e6e:	a0 f3       	brcs	.-24     	; 0xe58 <read_DS3231+0x44>
		ds3231time[i] = read_TWI();
	}

	ds3231time[6] = readlast_TWI();
     e70:	0e 94 75 2c 	call	0x58ea	; 0x58ea <readlast_TWI>
     e74:	f7 01       	movw	r30, r14
     e76:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     e78:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>

	return(NOERROR);
     e7c:	c0 e0       	ldi	r28, 0x00	; 0

}
     e7e:	8c 2f       	mov	r24, r28
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	ff 90       	pop	r15
     e88:	ef 90       	pop	r14
     e8a:	08 95       	ret

00000e8c <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	27 97       	sbiw	r28, 0x07	; 7
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (read_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     ea2:	be 01       	movw	r22, r28
     ea4:	6f 5f       	subi	r22, 0xFF	; 255
     ea6:	7f 4f       	sbci	r23, 0xFF	; 255
     ea8:	88 e6       	ldi	r24, 0x68	; 104
     eaa:	0e 94 0a 07 	call	0xe14	; 0xe14 <read_DS3231>
     eae:	18 2f       	mov	r17, r24
     eb0:	83 36       	cpi	r24, 0x63	; 99
     eb2:	79 f4       	brne	.+30     	; 0xed2 <get_time+0x46>
		printError(ERR_GETTIME, "get_time DS3231");
     eb4:	6c ef       	ldi	r22, 0xFC	; 252
     eb6:	71 eb       	ldi	r23, 0xB1	; 177
     eb8:	85 e6       	ldi	r24, 0x65	; 101
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		strcpy(isotime, "DateTime?");
     ec0:	8a e0       	ldi	r24, 0x0A	; 10
     ec2:	ec e0       	ldi	r30, 0x0C	; 12
     ec4:	f2 eb       	ldi	r31, 0xB2	; 178
     ec6:	d7 01       	movw	r26, r14
     ec8:	01 90       	ld	r0, Z+
     eca:	0d 92       	st	X+, r0
     ecc:	8a 95       	dec	r24
     ece:	e1 f7       	brne	.-8      	; 0xec8 <get_time+0x3c>
		return(ERROR);
     ed0:	07 c0       	rjmp	.+14     	; 0xee0 <get_time+0x54>
	}

	convert_ds2iso(isotime, ds3231time);
     ed2:	be 01       	movw	r22, r28
     ed4:	6f 5f       	subi	r22, 0xFF	; 255
     ed6:	7f 4f       	sbci	r23, 0xFF	; 255
     ed8:	c7 01       	movw	r24, r14
     eda:	0e 94 73 06 	call	0xce6	; 0xce6 <convert_ds2iso>
	return(NOERROR);
     ede:	10 e0       	ldi	r17, 0x00	; 0

}
     ee0:	81 2f       	mov	r24, r17
     ee2:	27 96       	adiw	r28, 0x07	; 7
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	ff 90       	pop	r15
     ef0:	ef 90       	pop	r14
     ef2:	08 95       	ret

00000ef4 <write_DS3231>:
	Returns:
		ERROR for TWI start error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     ef4:	ef 92       	push	r14
     ef6:	ff 92       	push	r15
     ef8:	0f 93       	push	r16
     efa:	1f 93       	push	r17
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	8b 01       	movw	r16, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
     f08:	c8 2f       	mov	r28, r24
     f0a:	83 36       	cpi	r24, 0x63	; 99
     f0c:	19 f4       	brne	.+6      	; 0xf14 <write_DS3231+0x20>
		stop_TWI();
     f0e:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(ERROR);
     f12:	20 c0       	rjmp	.+64     	; 0xf54 <write_DS3231+0x60>
	}

	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
     f1a:	c8 2f       	mov	r28, r24
     f1c:	83 36       	cpi	r24, 0x63	; 99
     f1e:	a1 f4       	brne	.+40     	; 0xf48 <write_DS3231+0x54>
		stop_TWI();
     f20:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(ERROR);
     f24:	17 c0       	rjmp	.+46     	; 0xf54 <write_DS3231+0x60>
	}

	for (i = 0; i < 7; i++) {
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     f26:	78 01       	movw	r14, r16
     f28:	8f ef       	ldi	r24, 0xFF	; 255
     f2a:	e8 1a       	sub	r14, r24
     f2c:	f8 0a       	sbc	r15, r24
     f2e:	f8 01       	movw	r30, r16
     f30:	80 81       	ld	r24, Z
     f32:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
     f36:	c8 2f       	mov	r28, r24
     f38:	83 36       	cpi	r24, 0x63	; 99
     f3a:	19 f4       	brne	.+6      	; 0xf42 <write_DS3231+0x4e>
			stop_TWI();
     f3c:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
			return(ERROR);
     f40:	09 c0       	rjmp	.+18     	; 0xf54 <write_DS3231+0x60>
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     f42:	df 5f       	subi	r29, 0xFF	; 255
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     f44:	87 01       	movw	r16, r14
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <write_DS3231+0x56>
     f48:	d0 e0       	ldi	r29, 0x00	; 0
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     f4a:	d7 30       	cpi	r29, 0x07	; 7
     f4c:	60 f3       	brcs	.-40     	; 0xf26 <write_DS3231+0x32>
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
			stop_TWI();
			return(ERROR);
		}
	}
	stop_TWI();
     f4e:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>

	return(NOERROR);
     f52:	c0 e0       	ldi	r28, 0x00	; 0

}
     f54:	8c 2f       	mov	r24, r28
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	08 95       	ret

00000f64 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     f64:	ef 92       	push	r14
     f66:	ff 92       	push	r15
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	27 97       	sbiw	r28, 0x07	; 7
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (check_isotime(isotime) == ERROR) {
     f7a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <check_isotime>
     f7e:	18 2f       	mov	r17, r24
     f80:	83 36       	cpi	r24, 0x63	; 99
     f82:	39 f4       	brne	.+14     	; 0xf92 <put_time+0x2e>
		printError(ERR_ISO, "put_time: check_isotime error");
     f84:	66 e1       	ldi	r22, 0x16	; 22
     f86:	72 eb       	ldi	r23, 0xB2	; 178
     f88:	8b e5       	ldi	r24, 0x5B	; 91
     f8a:	92 e0       	ldi	r25, 0x02	; 2
     f8c:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		return(ERROR);
     f90:	16 c0       	rjmp	.+44     	; 0xfbe <put_time+0x5a>
	}
	convert_iso2ds(ds3231time, isotime);
     f92:	b7 01       	movw	r22, r14
     f94:	ce 01       	movw	r24, r28
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	0e 94 aa 06 	call	0xd54	; 0xd54 <convert_iso2ds>
	if (write_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     f9c:	be 01       	movw	r22, r28
     f9e:	6f 5f       	subi	r22, 0xFF	; 255
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255
     fa2:	88 e6       	ldi	r24, 0x68	; 104
     fa4:	0e 94 7a 07 	call	0xef4	; 0xef4 <write_DS3231>
     fa8:	18 2f       	mov	r17, r24
     faa:	83 36       	cpi	r24, 0x63	; 99
     fac:	39 f4       	brne	.+14     	; 0xfbc <put_time+0x58>
		printError(ERR_PUTTIME, "put_time: write_DS3231 error");
     fae:	64 e3       	ldi	r22, 0x34	; 52
     fb0:	72 eb       	ldi	r23, 0xB2	; 178
     fb2:	86 e6       	ldi	r24, 0x66	; 102
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		return(ERROR);
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <put_time+0x5a>
	}
	return(NOERROR);
     fbc:	10 e0       	ldi	r17, 0x00	; 0

}
     fbe:	81 2f       	mov	r24, r17
     fc0:	27 96       	adiw	r28, 0x07	; 7
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	de bf       	out	0x3e, r29	; 62
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	ff 90       	pop	r15
     fce:	ef 90       	pop	r14
     fd0:	08 95       	ret

00000fd2 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     fd2:	45 e1       	ldi	r20, 0x15	; 21
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	6b e0       	ldi	r22, 0x0B	; 11
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	0e 94 27 38 	call	0x704e	; 0x704e <eeprom_read_block>
     fde:	08 95       	ret

00000fe0 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     fe0:	4b e0       	ldi	r20, 0x0B	; 11
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	0e 94 27 38 	call	0x704e	; 0x704e <eeprom_read_block>
     fec:	08 95       	ret

00000fee <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	65 97       	sbiw	r28, 0x15	; 21
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     ffc:	ce 01       	movw	r24, r28
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	0e 94 46 07 	call	0xe8c	; 0xe8c <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
    1004:	45 e1       	ldi	r20, 0x15	; 21
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	6b e0       	ldi	r22, 0x0B	; 11
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	ce 01       	movw	r24, r28
    100e:	01 96       	adiw	r24, 0x01	; 1
    1010:	0e 94 2b 38 	call	0x7056	; 0x7056 <eeprom_update_block>

}
    1014:	65 96       	adiw	r28, 0x15	; 21
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	08 95       	ret

00001020 <update_VERSION>:

void update_VERSION(void)
{
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	2b 97       	sbiw	r28, 0x0b	; 11
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
    102e:	8b e0       	ldi	r24, 0x0B	; 11
    1030:	e1 e5       	ldi	r30, 0x51	; 81
    1032:	f2 eb       	ldi	r31, 0xB2	; 178
    1034:	de 01       	movw	r26, r28
    1036:	11 96       	adiw	r26, 0x01	; 1
    1038:	01 90       	ld	r0, Z+
    103a:	0d 92       	st	X+, r0
    103c:	8a 95       	dec	r24
    103e:	e1 f7       	brne	.-8      	; 0x1038 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
    1040:	4b e0       	ldi	r20, 0x0B	; 11
    1042:	50 e0       	ldi	r21, 0x00	; 0
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	ce 01       	movw	r24, r28
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	0e 94 2b 38 	call	0x7056	; 0x7056 <eeprom_update_block>

}
    1050:	2b 96       	adiw	r28, 0x0b	; 11
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
    105c:	0e 94 f7 07 	call	0xfee	; 0xfee <update_BOOTTIME>
	update_VERSION();
    1060:	0e 94 10 08 	call	0x1020	; 0x1020 <update_VERSION>
    1064:	08 95       	ret

00001066 <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	c8 50       	subi	r28, 0x08	; 8
    1074:	d1 40       	sbci	r29, 0x01	; 1
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char errorFormat[] = "ERR,%d,%s";
    107a:	2a e0       	ldi	r18, 0x0A	; 10
    107c:	ec e5       	ldi	r30, 0x5C	; 92
    107e:	f2 eb       	ldi	r31, 0xB2	; 178
    1080:	de 01       	movw	r26, r28
    1082:	a1 50       	subi	r26, 0x01	; 1
    1084:	bf 4f       	sbci	r27, 0xFF	; 255
    1086:	01 90       	ld	r0, Z+
    1088:	0d 92       	st	X+, r0
    108a:	2a 95       	dec	r18
    108c:	e1 f7       	brne	.-8      	; 0x1086 <printError+0x20>

	if (!squelchErrors) {
    108e:	20 91 0d 28 	lds	r18, 0x280D	; 0x80280d <squelchErrors>
    1092:	21 11       	cpse	r18, r1
    1094:	15 c0       	rjmp	.+42     	; 0x10c0 <printError+0x5a>
		sprintf(strbuf, errorFormat, errorNumber, errorString);
    1096:	7f 93       	push	r23
    1098:	6f 93       	push	r22
    109a:	9f 93       	push	r25
    109c:	8f 93       	push	r24
    109e:	ce 01       	movw	r24, r28
    10a0:	81 50       	subi	r24, 0x01	; 1
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	9f 93       	push	r25
    10a6:	8f 93       	push	r24
    10a8:	8e 01       	movw	r16, r28
    10aa:	0f 5f       	subi	r16, 0xFF	; 255
    10ac:	1f 4f       	sbci	r17, 0xFF	; 255
    10ae:	1f 93       	push	r17
    10b0:	0f 93       	push	r16
    10b2:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
		printLine(strbuf);
    10b6:	c8 01       	movw	r24, r16
    10b8:	0e 94 80 03 	call	0x700	; 0x700 <printLine>
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	de bf       	out	0x3e, r29	; 62
	}

}
    10c0:	c8 5f       	subi	r28, 0xF8	; 248
    10c2:	de 4f       	sbci	r29, 0xFE	; 254
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	08 95       	ret

000010d2 <read_FRAM>:
	Returns:
		ERROR on start_TWI error (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
    10d2:	cf 92       	push	r12
    10d4:	df 92       	push	r13
    10d6:	ef 92       	push	r14
    10d8:	ff 92       	push	r15
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	d8 2f       	mov	r29, r24
    10e4:	d6 2e       	mov	r13, r22
    10e6:	07 2f       	mov	r16, r23
    10e8:	7a 01       	movw	r14, r20
    10ea:	12 2f       	mov	r17, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if (start_TWI(addr, TWIWRITE) == ERROR) {		// TWI start
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
    10f2:	c8 2f       	mov	r28, r24
    10f4:	83 36       	cpi	r24, 0x63	; 99
    10f6:	19 f4       	brne	.+6      	; 0x10fe <read_FRAM+0x2c>
		stop_TWI();
    10f8:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(ERROR);
    10fc:	2e c0       	rjmp	.+92     	; 0x115a <read_FRAM+0x88>
	}

	if (write_TWI(memhigh) == ERROR) {			// Send memory address
    10fe:	80 2f       	mov	r24, r16
    1100:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
    1104:	c8 2f       	mov	r28, r24
    1106:	83 36       	cpi	r24, 0x63	; 99
    1108:	41 f1       	breq	.+80     	; 0x115a <read_FRAM+0x88>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {
    110a:	8d 2d       	mov	r24, r13
    110c:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
    1110:	c8 2f       	mov	r28, r24
    1112:	83 36       	cpi	r24, 0x63	; 99
    1114:	11 f1       	breq	.+68     	; 0x115a <read_FRAM+0x88>
		return(ERROR);
	}

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
    1116:	61 e0       	ldi	r22, 0x01	; 1
    1118:	8d 2f       	mov	r24, r29
    111a:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
    111e:	c8 2f       	mov	r28, r24
    1120:	83 36       	cpi	r24, 0x63	; 99
    1122:	d9 f0       	breq	.+54     	; 0x115a <read_FRAM+0x88>
    1124:	c0 e0       	ldi	r28, 0x00	; 0
    1126:	08 c0       	rjmp	.+16     	; 0x1138 <read_FRAM+0x66>
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
    1128:	67 01       	movw	r12, r14
    112a:	cc 0e       	add	r12, r28
    112c:	d1 1c       	adc	r13, r1
    112e:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <read_TWI>
    1132:	f6 01       	movw	r30, r12
    1134:	80 83       	st	Z, r24

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
    1136:	cf 5f       	subi	r28, 0xFF	; 255
    1138:	2c 2f       	mov	r18, r28
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 2f       	mov	r24, r17
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	28 17       	cp	r18, r24
    1144:	39 07       	cpc	r19, r25
    1146:	84 f3       	brlt	.-32     	; 0x1128 <read_FRAM+0x56>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
    1148:	ec 01       	movw	r28, r24
    114a:	ce 0d       	add	r28, r14
    114c:	df 1d       	adc	r29, r15
    114e:	0e 94 75 2c 	call	0x58ea	; 0x58ea <readlast_TWI>
    1152:	88 83       	st	Y, r24

	stop_TWI();
    1154:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>

	return(NOERROR);
    1158:	c0 e0       	ldi	r28, 0x00	; 0

}
    115a:	8c 2f       	mov	r24, r28
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	df 90       	pop	r13
    116a:	cf 90       	pop	r12
    116c:	08 95       	ret

0000116e <get_SETTIME>:
	Input: None
	Output: The data from FRAM, presumably containing the time
	Returns: ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t get_SETTIME(char *lastsettime)
{
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	2a 97       	sbiw	r28, 0x0a	; 10
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	7c 01       	movw	r14, r24

	const char timeset[] = "Time Set?";
    1184:	8a e0       	ldi	r24, 0x0A	; 10
    1186:	e6 e6       	ldi	r30, 0x66	; 102
    1188:	f2 eb       	ldi	r31, 0xB2	; 178
    118a:	de 01       	movw	r26, r28
    118c:	11 96       	adiw	r26, 0x01	; 1
    118e:	01 90       	ld	r0, Z+
    1190:	0d 92       	st	X+, r0
    1192:	8a 95       	dec	r24
    1194:	e1 f7       	brne	.-8      	; 0x118e <get_SETTIME+0x20>
	if (read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, ISOTIMELEN) == ERROR) {;
    1196:	24 e1       	ldi	r18, 0x14	; 20
    1198:	a7 01       	movw	r20, r14
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	80 e5       	ldi	r24, 0x50	; 80
    11a0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <read_FRAM>
    11a4:	18 2f       	mov	r17, r24
    11a6:	83 36       	cpi	r24, 0x63	; 99
    11a8:	39 f4       	brne	.+14     	; 0x11b8 <get_SETTIME+0x4a>
		strcpy(lastsettime, timeset);
    11aa:	be 01       	movw	r22, r28
    11ac:	6f 5f       	subi	r22, 0xFF	; 255
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	c7 01       	movw	r24, r14
    11b2:	0e 94 3c 37 	call	0x6e78	; 0x6e78 <strcpy>
		return(ERROR);
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <get_SETTIME+0x4c>
	}
	return(NOERROR);
    11b8:	10 e0       	ldi	r17, 0x00	; 0
}
    11ba:	81 2f       	mov	r24, r17
    11bc:	2a 96       	adiw	r28, 0x0a	; 10
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	08 95       	ret

000011ce <write_FRAM>:
	Returns:
		ERROR if start_TWI fails (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	f6 2e       	mov	r15, r22
    11dc:	17 2f       	mov	r17, r23
    11de:	ea 01       	movw	r28, r20
    11e0:	02 2f       	mov	r16, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if (start_TWI(addr, TWIWRITE) == ERROR) {	// TWI START
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
    11e8:	83 36       	cpi	r24, 0x63	; 99
    11ea:	e1 f0       	breq	.+56     	; 0x1224 <write_FRAM+0x56>
		return(ERROR);
	}

	if (write_TWI(memhigh) == ERROR) {			// FRAM address to write
    11ec:	81 2f       	mov	r24, r17
    11ee:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
    11f2:	83 36       	cpi	r24, 0x63	; 99
    11f4:	b9 f0       	breq	.+46     	; 0x1224 <write_FRAM+0x56>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
    11f6:	8f 2d       	mov	r24, r15
    11f8:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
    11fc:	83 36       	cpi	r24, 0x63	; 99
    11fe:	91 f0       	breq	.+36     	; 0x1224 <write_FRAM+0x56>
    1200:	10 e0       	ldi	r17, 0x00	; 0
    1202:	0b c0       	rjmp	.+22     	; 0x121a <write_FRAM+0x4c>
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    1204:	7e 01       	movw	r14, r28
    1206:	8f ef       	ldi	r24, 0xFF	; 255
    1208:	e8 1a       	sub	r14, r24
    120a:	f8 0a       	sbc	r15, r24
    120c:	88 81       	ld	r24, Y
    120e:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
    1212:	83 36       	cpi	r24, 0x63	; 99
    1214:	39 f0       	breq	.+14     	; 0x1224 <write_FRAM+0x56>
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    1216:	1f 5f       	subi	r17, 0xFF	; 255
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    1218:	e7 01       	movw	r28, r14
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    121a:	10 17       	cp	r17, r16
    121c:	98 f3       	brcs	.-26     	; 0x1204 <write_FRAM+0x36>
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
			return(ERROR);
		}
	}

	stop_TWI();
    121e:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>

	return(NOERROR);
    1222:	80 e0       	ldi	r24, 0x00	; 0

}
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	ff 90       	pop	r15
    122e:	ef 90       	pop	r14
    1230:	08 95       	ret

00001232 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
    1232:	8f 92       	push	r8
    1234:	9f 92       	push	r9
    1236:	af 92       	push	r10
    1238:	bf 92       	push	r11
    123a:	cf 92       	push	r12
    123c:	df 92       	push	r13
    123e:	ef 92       	push	r14
    1240:	ff 92       	push	r15
    1242:	0f 93       	push	r16
    1244:	1f 93       	push	r17
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	00 d0       	rcall	.+0      	; 0x124c <get_humidity+0x1a>
    124c:	00 d0       	rcall	.+0      	; 0x124e <get_humidity+0x1c>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62

	uint8_t adcpin;
	float voltage, humidity, temperature;

	switch (sensor) {
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	59 f0       	breq	.+22     	; 0x126c <get_humidity+0x3a>
    1256:	18 f0       	brcs	.+6      	; 0x125e <get_humidity+0x2c>
    1258:	82 30       	cpi	r24, 0x02	; 2
    125a:	79 f0       	breq	.+30     	; 0x127a <get_humidity+0x48>
    125c:	15 c0       	rjmp	.+42     	; 0x1288 <get_humidity+0x56>
		case 0:
			temperature = get_temperature(0);
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	0e 94 3f 2b 	call	0x567e	; 0x567e <get_temperature>
    1264:	6b 01       	movw	r12, r22
    1266:	7c 01       	movw	r14, r24
			adcpin = AIN0;		// production
    1268:	40 e4       	ldi	r20, 0x40	; 64
			break;
    126a:	17 c0       	rjmp	.+46     	; 0x129a <get_humidity+0x68>

		case 1:
			temperature = get_temperature(1);
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	0e 94 3f 2b 	call	0x567e	; 0x567e <get_temperature>
    1272:	6b 01       	movw	r12, r22
    1274:	7c 01       	movw	r14, r24
			adcpin = AIN1;
    1276:	40 e5       	ldi	r20, 0x50	; 80
			break;
    1278:	10 c0       	rjmp	.+32     	; 0x129a <get_humidity+0x68>

		case 2:
			temperature = get_temperature(2);
    127a:	82 e0       	ldi	r24, 0x02	; 2
    127c:	0e 94 3f 2b 	call	0x567e	; 0x567e <get_temperature>
    1280:	6b 01       	movw	r12, r22
    1282:	7c 01       	movw	r14, r24
			adcpin = AIN2;
    1284:	40 e6       	ldi	r20, 0x60	; 96
			break;
    1286:	09 c0       	rjmp	.+18     	; 0x129a <get_humidity+0x68>

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
    1288:	0f 2e       	mov	r0, r31
    128a:	c1 2c       	mov	r12, r1
    128c:	d1 2c       	mov	r13, r1
    128e:	f0 ea       	ldi	r31, 0xA0	; 160
    1290:	ef 2e       	mov	r14, r31
    1292:	f1 e4       	ldi	r31, 0x41	; 65
    1294:	ff 2e       	mov	r15, r31
    1296:	f0 2d       	mov	r31, r0
			adcpin = AIN2;
			break;

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
    1298:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
    129a:	8e 01       	movw	r16, r28
    129c:	0f 5f       	subi	r16, 0xFF	; 255
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	20 e8       	ldi	r18, 0x80	; 128
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	88 e4       	ldi	r24, 0x48	; 72
    12a6:	0e 94 c9 01 	call	0x392	; 0x392 <read_ADS1115>
    12aa:	83 36       	cpi	r24, 0x63	; 99
    12ac:	89 f1       	breq	.+98     	; 0x1310 <get_humidity+0xde>
		humidity = BADFLOAT;
	}
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 ea       	ldi	r20, 0xA0	; 160
    12b4:	50 e4       	ldi	r21, 0x40	; 64
    12b6:	69 81       	ldd	r22, Y+1	; 0x01
    12b8:	7a 81       	ldd	r23, Y+2	; 0x02
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	0e 94 06 30 	call	0x600c	; 0x600c <__divsf3>
    12c2:	2a e0       	ldi	r18, 0x0A	; 10
    12c4:	37 ed       	ldi	r19, 0xD7	; 215
    12c6:	43 e2       	ldi	r20, 0x23	; 35
    12c8:	5e e3       	ldi	r21, 0x3E	; 62
    12ca:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <__subsf3>
    12ce:	2f e5       	ldi	r18, 0x5F	; 95
    12d0:	39 e2       	ldi	r19, 0x29	; 41
    12d2:	4b ec       	ldi	r20, 0xCB	; 203
    12d4:	5b e3       	ldi	r21, 0x3B	; 59
    12d6:	0e 94 06 30 	call	0x600c	; 0x600c <__divsf3>
    12da:	4b 01       	movw	r8, r22
    12dc:	5c 01       	movw	r10, r24
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
    12de:	29 ec       	ldi	r18, 0xC9	; 201
    12e0:	3e e8       	ldi	r19, 0x8E	; 142
    12e2:	4d e0       	ldi	r20, 0x0D	; 13
    12e4:	5b e3       	ldi	r21, 0x3B	; 59
    12e6:	c7 01       	movw	r24, r14
    12e8:	b6 01       	movw	r22, r12
    12ea:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
    12ee:	9b 01       	movw	r18, r22
    12f0:	ac 01       	movw	r20, r24
    12f2:	62 e2       	ldi	r22, 0x22	; 34
    12f4:	7d ef       	ldi	r23, 0xFD	; 253
    12f6:	86 e8       	ldi	r24, 0x86	; 134
    12f8:	9f e3       	ldi	r25, 0x3F	; 63
    12fa:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <__subsf3>
    12fe:	9b 01       	movw	r18, r22
    1300:	ac 01       	movw	r20, r24
    1302:	c5 01       	movw	r24, r10
    1304:	b4 01       	movw	r22, r8
    1306:	0e 94 06 30 	call	0x600c	; 0x600c <__divsf3>
    130a:	6b 01       	movw	r12, r22
    130c:	7c 01       	movw	r14, r24
    130e:	09 c0       	rjmp	.+18     	; 0x1322 <get_humidity+0xf0>
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
		humidity = BADFLOAT;
    1310:	0f 2e       	mov	r0, r31
    1312:	c1 2c       	mov	r12, r1
    1314:	f0 e8       	ldi	r31, 0x80	; 128
    1316:	df 2e       	mov	r13, r31
    1318:	f6 e2       	ldi	r31, 0x26	; 38
    131a:	ef 2e       	mov	r14, r31
    131c:	f4 ec       	ldi	r31, 0xC4	; 196
    131e:	ff 2e       	mov	r15, r31
    1320:	f0 2d       	mov	r31, r0
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
	}

	if (humidity < 0.0) {
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	a9 01       	movw	r20, r18
    1328:	c7 01       	movw	r24, r14
    132a:	b6 01       	movw	r22, r12
    132c:	0e 94 01 30 	call	0x6002	; 0x6002 <__cmpsf2>
    1330:	88 23       	and	r24, r24
    1332:	4c f4       	brge	.+18     	; 0x1346 <get_humidity+0x114>
		humidity = BADFLOAT;
    1334:	0f 2e       	mov	r0, r31
    1336:	c1 2c       	mov	r12, r1
    1338:	f0 e8       	ldi	r31, 0x80	; 128
    133a:	df 2e       	mov	r13, r31
    133c:	f6 e2       	ldi	r31, 0x26	; 38
    133e:	ef 2e       	mov	r14, r31
    1340:	f4 ec       	ldi	r31, 0xC4	; 196
    1342:	ff 2e       	mov	r15, r31
    1344:	f0 2d       	mov	r31, r0
	}

	return(humidity);

}
    1346:	c7 01       	movw	r24, r14
    1348:	b6 01       	movw	r22, r12
    134a:	24 96       	adiw	r28, 0x04	; 4
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	ff 90       	pop	r15
    135a:	ef 90       	pop	r14
    135c:	df 90       	pop	r13
    135e:	cf 90       	pop	r12
    1360:	bf 90       	pop	r11
    1362:	af 90       	pop	r10
    1364:	9f 90       	pop	r9
    1366:	8f 90       	pop	r8
    1368:	08 95       	ret

0000136a <initialize>:
#include "initialize.h"

uint8_t rebootackd;

void initialize(void)
{
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	2b 97       	sbiw	r28, 0x0b	; 11
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	rebootackd = NO;
    1378:	10 92 0e 28 	sts	0x280E, r1	; 0x80280e <rebootackd>
	timerOLED = 0;					// See oled.h
    137c:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    1380:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display; fast until !
    1384:	80 ee       	ldi	r24, 0xE0	; 224
    1386:	91 e0       	ldi	r25, 0x01	; 1
    1388:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
    138c:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>

	init_PORTS();
    1390:	0e 94 7d 10 	call	0x20fa	; 0x20fa <init_PORTS>
	init_TWI();
    1394:	0e 94 48 2c 	call	0x5890	; 0x5890 <init_TWI>
	init_PNEU();
    1398:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <init_PNEU>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
    139c:	80 e2       	ldi	r24, 0x20	; 32
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 a7 2b 	call	0x574e	; 0x574e <init_RTC>
	init_MMA8451();	// Accelerometer; needs TWI
    13a4:	0e 94 76 0c 	call	0x18ec	; 0x18ec <init_MMA8451>
	init_OLED();	// Needs TWI
    13a8:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <init_OLED>
	init_EEPROM();	// Needs TWI to get boot time from clock
    13ac:	0e 94 2e 08 	call	0x105c	; 0x105c <init_EEPROM>
	init_USART();
    13b0:	0e 94 23 2d 	call	0x5a46	; 0x5a46 <init_USART>
//	start_TCB0(1);	// 1 ms ticks for TWI & USART timeouts
	sei();
    13b4:	78 94       	sei
	init_MOTORS();	// Needs USART & interrupts on
    13b6:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <init_MOTORS>
	get_VERSION(versionstr);
    13ba:	ce 01       	movw	r24, r28
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <get_VERSION>
	writestr_OLED(0,"specMech Version", 1);
    13c2:	41 e0       	ldi	r20, 0x01	; 1
    13c4:	60 e7       	ldi	r22, 0x70	; 112
    13c6:	72 eb       	ldi	r23, 0xB2	; 178
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <writestr_OLED>
	writestr_OLED(0, versionstr, 2);
    13ce:	42 e0       	ldi	r20, 0x02	; 2
    13d0:	be 01       	movw	r22, r28
    13d2:	6f 5f       	subi	r22, 0xFF	; 255
    13d4:	7f 4f       	sbci	r23, 0xFF	; 255
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <writestr_OLED>

}
    13dc:	2b 96       	adiw	r28, 0x0b	; 11
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	08 95       	ret

000013e8 <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
    13e8:	cf 92       	push	r12
    13ea:	df 92       	push	r13
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <read_ionpump+0x12>
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <read_ionpump+0x14>
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	21 f0       	breq	.+8      	; 0x140c <read_ionpump+0x24>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
    1404:	82 30       	cpi	r24, 0x02	; 2
    1406:	c1 f5       	brne	.+112    	; 0x1478 <read_ionpump+0x90>
		pins = AIN23;
    1408:	40 e3       	ldi	r20, 0x30	; 48
    140a:	01 c0       	rjmp	.+2      	; 0x140e <read_ionpump+0x26>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
    140c:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(BADFLOAT);
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
    140e:	8e 01       	movw	r16, r28
    1410:	0f 5f       	subi	r16, 0xFF	; 255
    1412:	1f 4f       	sbci	r17, 0xFF	; 255
    1414:	20 e8       	ldi	r18, 0x80	; 128
    1416:	62 e0       	ldi	r22, 0x02	; 2
    1418:	89 e4       	ldi	r24, 0x49	; 73
    141a:	0e 94 c9 01 	call	0x392	; 0x392 <read_ADS1115>
    141e:	83 36       	cpi	r24, 0x63	; 99
    1420:	81 f1       	breq	.+96     	; 0x1482 <read_ionpump+0x9a>
		return(BADFLOAT);
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
    1422:	c9 80       	ldd	r12, Y+1	; 0x01
    1424:	da 80       	ldd	r13, Y+2	; 0x02
    1426:	eb 80       	ldd	r14, Y+3	; 0x03
    1428:	fc 80       	ldd	r15, Y+4	; 0x04
    142a:	2d ec       	ldi	r18, 0xCD	; 205
    142c:	3c ec       	ldi	r19, 0xCC	; 204
    142e:	4c ec       	ldi	r20, 0xCC	; 204
    1430:	5e e3       	ldi	r21, 0x3E	; 62
    1432:	c7 01       	movw	r24, r14
    1434:	b6 01       	movw	r22, r12
    1436:	0e 94 01 30 	call	0x6002	; 0x6002 <__cmpsf2>
    143a:	88 23       	and	r24, r24
    143c:	3c f1       	brlt	.+78     	; 0x148c <read_ionpump+0xa4>
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e0       	ldi	r20, 0x00	; 0
    1444:	50 e4       	ldi	r21, 0x40	; 64
    1446:	c7 01       	movw	r24, r14
    1448:	b6 01       	movw	r22, r12
    144a:	0e 94 60 31 	call	0x62c0	; 0x62c0 <__gesf2>
    144e:	18 16       	cp	r1, r24
    1450:	14 f1       	brlt	.+68     	; 0x1496 <read_ionpump+0xae>
		return(BADFLOAT);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    1452:	29 e7       	ldi	r18, 0x79	; 121
    1454:	39 ee       	ldi	r19, 0xE9	; 233
    1456:	42 e0       	ldi	r20, 0x02	; 2
    1458:	50 e4       	ldi	r21, 0x40	; 64
    145a:	c7 01       	movw	r24, r14
    145c:	b6 01       	movw	r22, r12
    145e:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
    1462:	2e e6       	ldi	r18, 0x6E	; 110
    1464:	33 ea       	ldi	r19, 0xA3	; 163
    1466:	4b ed       	ldi	r20, 0xDB	; 219
    1468:	50 e4       	ldi	r21, 0x40	; 64
    146a:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <__subsf3>
	return(vacuum);
    146e:	56 2f       	mov	r21, r22
    1470:	47 2f       	mov	r20, r23
    1472:	38 2f       	mov	r19, r24
    1474:	29 2f       	mov	r18, r25
    1476:	13 c0       	rjmp	.+38     	; 0x149e <read_ionpump+0xb6>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(BADFLOAT);
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	40 e8       	ldi	r20, 0x80	; 128
    147c:	36 e2       	ldi	r19, 0x26	; 38
    147e:	24 ec       	ldi	r18, 0xC4	; 196
    1480:	0e c0       	rjmp	.+28     	; 0x149e <read_ionpump+0xb6>
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
		return(BADFLOAT);
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	40 e8       	ldi	r20, 0x80	; 128
    1486:	36 e2       	ldi	r19, 0x26	; 38
    1488:	24 ec       	ldi	r18, 0xC4	; 196
    148a:	09 c0       	rjmp	.+18     	; 0x149e <read_ionpump+0xb6>
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
    148c:	50 e0       	ldi	r21, 0x00	; 0
    148e:	40 e8       	ldi	r20, 0x80	; 128
    1490:	36 e2       	ldi	r19, 0x26	; 38
    1492:	24 ec       	ldi	r18, 0xC4	; 196
    1494:	04 c0       	rjmp	.+8      	; 0x149e <read_ionpump+0xb6>
	} else if (voltage > 2.0) {
		return(BADFLOAT);
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	40 e8       	ldi	r20, 0x80	; 128
    149a:	36 e2       	ldi	r19, 0x26	; 38
    149c:	24 ec       	ldi	r18, 0xC4	; 196
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
    149e:	65 2f       	mov	r22, r21
    14a0:	74 2f       	mov	r23, r20
    14a2:	83 2f       	mov	r24, r19
    14a4:	92 2f       	mov	r25, r18
    14a6:	24 96       	adiw	r28, 0x04	; 4
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	ff 90       	pop	r15
    14b6:	ef 90       	pop	r14
    14b8:	df 90       	pop	r13
    14ba:	cf 90       	pop	r12
    14bc:	08 95       	ret

000014be <main>:
uint8_t firstpass;

int main(void)
{

	firstpass = YES;		// Set to NO in commands.c
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	80 93 17 2a 	sts	0x2A17, r24	; 0x802a17 <firstpass>
	squelchErrors = YES;
    14c4:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <squelchErrors>
	initialize();
    14c8:	0e 94 b5 09 	call	0x136a	; 0x136a <initialize>
	squelchErrors = NO;
    14cc:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <squelchErrors>

	for (;;) {
		if (recv0_buf.done) {
    14d0:	80 91 4a 2e 	lds	r24, 0x2E4A	; 0x802e4a <recv0_buf+0x103>
    14d4:	88 23       	and	r24, r24
    14d6:	21 f0       	breq	.+8      	; 0x14e0 <main+0x22>
			recv0_buf.done = NO;
    14d8:	10 92 4a 2e 	sts	0x2E4A, r1	; 0x802e4a <recv0_buf+0x103>
			commands();
    14dc:	0e 94 5f 04 	call	0x8be	; 0x8be <commands>
		}
if (testTicks > 2000) {
    14e0:	80 91 0b 28 	lds	r24, 0x280B	; 0x80280b <testTicks>
    14e4:	90 91 0c 28 	lds	r25, 0x280C	; 0x80280c <testTicks+0x1>
    14e8:	81 3d       	cpi	r24, 0xD1	; 209
    14ea:	97 40       	sbci	r25, 0x07	; 7
    14ec:	38 f0       	brcs	.+14     	; 0x14fc <main+0x3e>
	testTicks = 0;
    14ee:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <testTicks>
    14f2:	10 92 0c 28 	sts	0x280C, r1	; 0x80280c <testTicks+0x1>
	PORTB.OUTTGL = PIN5_bm;
    14f6:	80 e2       	ldi	r24, 0x20	; 32
    14f8:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x7f4427>
}
		if (timerOLED > timeoutOLED) {	// Display timeout
    14fc:	20 91 18 2a 	lds	r18, 0x2A18	; 0x802a18 <timerOLED>
    1500:	30 91 19 2a 	lds	r19, 0x2A19	; 0x802a19 <timerOLED+0x1>
    1504:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <timeoutOLED>
    1508:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <timeoutOLED+0x1>
    150c:	82 17       	cp	r24, r18
    150e:	93 07       	cpc	r25, r19
    1510:	78 f4       	brcc	.+30     	; 0x1530 <main+0x72>
			squelchErrors = YES;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <squelchErrors>
			clear_OLED(0);
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <clear_OLED>
			clear_OLED(1);
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <clear_OLED>
			timerOLED = 0;
    1524:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    1528:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>
			squelchErrors = NO;
    152c:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <squelchErrors>
		} if ((timerSAVEENCODER > timeoutSAVEENCODER) && rebootackd) {
    1530:	90 91 3c 2a 	lds	r25, 0x2A3C	; 0x802a3c <timerSAVEENCODER>
    1534:	80 91 3b 2a 	lds	r24, 0x2A3B	; 0x802a3b <timeoutSAVEENCODER>
    1538:	89 17       	cp	r24, r25
    153a:	50 f6       	brcc	.-108    	; 0x14d0 <main+0x12>
    153c:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <rebootackd>
    1540:	88 23       	and	r24, r24
    1542:	31 f2       	breq	.-116    	; 0x14d0 <main+0x12>
			squelchErrors = YES;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <squelchErrors>
			put_FRAM_ENCODERS();	// Maybe set a global error variable?
    154a:	0e 94 00 21 	call	0x4200	; 0x4200 <put_FRAM_ENCODERS>
			timerSAVEENCODER = 0;
    154e:	10 92 3c 2a 	sts	0x2A3C, r1	; 0x802a3c <timerSAVEENCODER>
			squelchErrors = NO;
    1552:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <squelchErrors>
    1556:	bc cf       	rjmp	.-136    	; 0x14d0 <main+0x12>

00001558 <read_MCP23008>:
	Returns:
		ERROR if TWI error
		NOERROR Otherwise
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	c8 2f       	mov	r28, r24
    155e:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
    1566:	83 36       	cpi	r24, 0x63	; 99
    1568:	51 f4       	brne	.+20     	; 0x157e <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 read error");
    156a:	61 e8       	ldi	r22, 0x81	; 129
    156c:	72 eb       	ldi	r23, 0xB2	; 178
    156e:	82 e9       	ldi	r24, 0x92	; 146
    1570:	91 e0       	ldi	r25, 0x01	; 1
    1572:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		stop_TWI();
    1576:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(0xFF);
    157a:	8f ef       	ldi	r24, 0xFF	; 255
    157c:	19 c0       	rjmp	.+50     	; 0x15b0 <read_MCP23008+0x58>
	}
	write_TWI(reg);
    157e:	8d 2f       	mov	r24, r29
    1580:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
	if (start_TWI(addr, TWIREAD) == ERROR) {
    1584:	61 e0       	ldi	r22, 0x01	; 1
    1586:	8c 2f       	mov	r24, r28
    1588:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
    158c:	83 36       	cpi	r24, 0x63	; 99
    158e:	51 f4       	brne	.+20     	; 0x15a4 <read_MCP23008+0x4c>
		printError(ERR_MCP23008, "MCP23008 read error");
    1590:	61 e8       	ldi	r22, 0x81	; 129
    1592:	72 eb       	ldi	r23, 0xB2	; 178
    1594:	82 e9       	ldi	r24, 0x92	; 146
    1596:	91 e0       	ldi	r25, 0x01	; 1
    1598:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		stop_TWI();
    159c:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(0xFF);
    15a0:	8f ef       	ldi	r24, 0xFF	; 255
    15a2:	06 c0       	rjmp	.+12     	; 0x15b0 <read_MCP23008+0x58>
	}
	value = readlast_TWI();
    15a4:	0e 94 75 2c 	call	0x58ea	; 0x58ea <readlast_TWI>
    15a8:	c8 2f       	mov	r28, r24
	stop_TWI();
    15aa:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
	return(value);
    15ae:	8c 2f       	mov	r24, r28

}
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	08 95       	ret

000015b6 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	d6 2f       	mov	r29, r22
    15be:	14 2f       	mov	r17, r20

	uint8_t retval;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
    15c6:	c8 2f       	mov	r28, r24
    15c8:	83 36       	cpi	r24, 0x63	; 99
    15ca:	49 f4       	brne	.+18     	; 0x15de <write_MCP23008+0x28>
		printError(ERR_MCP23008, "MCP23008 write error");
    15cc:	65 e9       	ldi	r22, 0x95	; 149
    15ce:	72 eb       	ldi	r23, 0xB2	; 178
    15d0:	82 e9       	ldi	r24, 0x92	; 146
    15d2:	91 e0       	ldi	r25, 0x01	; 1
    15d4:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		stop_TWI();
    15d8:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(ERROR);
    15dc:	15 c0       	rjmp	.+42     	; 0x1608 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(reg))) {
    15de:	8d 2f       	mov	r24, r29
    15e0:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
    15e4:	88 23       	and	r24, r24
    15e6:	21 f0       	breq	.+8      	; 0x15f0 <write_MCP23008+0x3a>
		stop_TWI();
    15e8:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(ERROR);
    15ec:	c3 e6       	ldi	r28, 0x63	; 99
    15ee:	0c c0       	rjmp	.+24     	; 0x1608 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(val))) {
    15f0:	81 2f       	mov	r24, r17
    15f2:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
    15f6:	88 23       	and	r24, r24
    15f8:	21 f0       	breq	.+8      	; 0x1602 <write_MCP23008+0x4c>
		stop_TWI();
    15fa:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(ERROR);
    15fe:	c3 e6       	ldi	r28, 0x63	; 99
    1600:	03 c0       	rjmp	.+6      	; 0x1608 <write_MCP23008+0x52>
	}
	stop_TWI();
    1602:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
	return(NOERROR);
    1606:	c0 e0       	ldi	r28, 0x00	; 0
	
}
    1608:	8c 2f       	mov	r24, r28
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	1f 91       	pop	r17
    1610:	08 95       	ret

00001612 <read_MCP9808>:
#include "errors.h"
#include "mcp9808.h"
#include "twi.h"

uint8_t read_MCP9808(float *temperature)
{
    1612:	8f 92       	push	r8
    1614:	9f 92       	push	r9
    1616:	af 92       	push	r10
    1618:	bf 92       	push	r11
    161a:	ff 92       	push	r15
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	8c 01       	movw	r16, r24

	uint8_t highbyte, lowbyte, sign;
	float temp;

	if (start_TWI(MCP9808ADDR, TWIWRITE) == ERROR) {
    1626:	60 e0       	ldi	r22, 0x00	; 0
    1628:	88 e1       	ldi	r24, 0x18	; 24
    162a:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
    162e:	83 36       	cpi	r24, 0x63	; 99
    1630:	51 f4       	brne	.+20     	; 0x1646 <read_MCP9808+0x34>
		*temperature = BADFLOAT;
    1632:	40 e0       	ldi	r20, 0x00	; 0
    1634:	50 e8       	ldi	r21, 0x80	; 128
    1636:	66 e2       	ldi	r22, 0x26	; 38
    1638:	74 ec       	ldi	r23, 0xC4	; 196
    163a:	f8 01       	movw	r30, r16
    163c:	40 83       	st	Z, r20
    163e:	51 83       	std	Z+1, r21	; 0x01
    1640:	62 83       	std	Z+2, r22	; 0x02
    1642:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    1644:	43 c0       	rjmp	.+134    	; 0x16cc <read_MCP9808+0xba>
	}
	write_TWI(TEMPREGISTER);
    1646:	85 e0       	ldi	r24, 0x05	; 5
    1648:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    164c:	61 e0       	ldi	r22, 0x01	; 1
    164e:	88 e1       	ldi	r24, 0x18	; 24
    1650:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
	highbyte = read_TWI();
    1654:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <read_TWI>
    1658:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    165a:	0e 94 75 2c 	call	0x58ea	; 0x58ea <readlast_TWI>
    165e:	d8 2f       	mov	r29, r24
	stop_TWI();
    1660:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1664:	fc 2f       	mov	r31, r28
    1666:	f0 71       	andi	r31, 0x10	; 16
    1668:	ff 2e       	mov	r15, r31
	highbyte &= 0x0F;					// Clear threshold & sign bits
    166a:	6c 2f       	mov	r22, r28
    166c:	6f 70       	andi	r22, 0x0F	; 15
	temp = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 ae 30 	call	0x615c	; 0x615c <__floatunsisf>
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e8       	ldi	r20, 0x80	; 128
    167e:	51 e4       	ldi	r21, 0x41	; 65
    1680:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
    1684:	4b 01       	movw	r8, r22
    1686:	5c 01       	movw	r10, r24
    1688:	6d 2f       	mov	r22, r29
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0e 94 ae 30 	call	0x615c	; 0x615c <__floatunsisf>
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e8       	ldi	r20, 0x80	; 128
    169a:	5d e3       	ldi	r21, 0x3D	; 61
    169c:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
    16a0:	9b 01       	movw	r18, r22
    16a2:	ac 01       	movw	r20, r24
    16a4:	c5 01       	movw	r24, r10
    16a6:	b4 01       	movw	r22, r8
    16a8:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <__addsf3>
	if (sign) {
    16ac:	ff 20       	and	r15, r15
    16ae:	41 f0       	breq	.+16     	; 0x16c0 <read_MCP9808+0xae>
		temp = 256.0 - temp;
    16b0:	9b 01       	movw	r18, r22
    16b2:	ac 01       	movw	r20, r24
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	80 e8       	ldi	r24, 0x80	; 128
    16ba:	93 e4       	ldi	r25, 0x43	; 67
    16bc:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <__subsf3>
	}
	*temperature = temp;
    16c0:	f8 01       	movw	r30, r16
    16c2:	60 83       	st	Z, r22
    16c4:	71 83       	std	Z+1, r23	; 0x01
    16c6:	82 83       	std	Z+2, r24	; 0x02
    16c8:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    16ca:	80 e0       	ldi	r24, 0x00	; 0
}
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	1f 91       	pop	r17
    16d2:	0f 91       	pop	r16
    16d4:	ff 90       	pop	r15
    16d6:	bf 90       	pop	r11
    16d8:	af 90       	pop	r10
    16da:	9f 90       	pop	r9
    16dc:	8f 90       	pop	r8
    16de:	08 95       	ret

000016e0 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    16e0:	ef 92       	push	r14
    16e2:	ff 92       	push	r15
    16e4:	0f 93       	push	r16
    16e6:	1f 93       	push	r17
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	f8 2e       	mov	r15, r24
    16ee:	e6 2e       	mov	r14, r22
    16f0:	ea 01       	movw	r28, r20
    16f2:	02 2f       	mov	r16, r18

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
    16fa:	18 2f       	mov	r17, r24
    16fc:	83 36       	cpi	r24, 0x63	; 99
    16fe:	19 f4       	brne	.+6      	; 0x1706 <read_MMA8451+0x26>
		stop_TWI();
    1700:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(ERROR);
    1704:	23 c0       	rjmp	.+70     	; 0x174c <read_MMA8451+0x6c>
	}
	if (write_TWI(reg) == ERROR) {
    1706:	8e 2d       	mov	r24, r14
    1708:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
    170c:	18 2f       	mov	r17, r24
    170e:	83 36       	cpi	r24, 0x63	; 99
    1710:	e9 f0       	breq	.+58     	; 0x174c <read_MMA8451+0x6c>
		return(ERROR);
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
    1712:	61 e0       	ldi	r22, 0x01	; 1
    1714:	8f 2d       	mov	r24, r15
    1716:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
    171a:	18 2f       	mov	r17, r24
    171c:	83 36       	cpi	r24, 0x63	; 99
    171e:	69 f4       	brne	.+26     	; 0x173a <read_MMA8451+0x5a>
		stop_TWI();
    1720:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(ERROR);
    1724:	13 c0       	rjmp	.+38     	; 0x174c <read_MMA8451+0x6c>
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    1726:	7e 01       	movw	r14, r28
    1728:	8f ef       	ldi	r24, 0xFF	; 255
    172a:	e8 1a       	sub	r14, r24
    172c:	f8 0a       	sbc	r15, r24
    172e:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <read_TWI>
    1732:	88 83       	st	Y, r24
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    1734:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    1736:	e7 01       	movw	r28, r14
    1738:	01 c0       	rjmp	.+2      	; 0x173c <read_MMA8451+0x5c>
    173a:	11 e0       	ldi	r17, 0x01	; 1
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    173c:	10 17       	cp	r17, r16
    173e:	98 f3       	brcs	.-26     	; 0x1726 <read_MMA8451+0x46>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    1740:	0e 94 75 2c 	call	0x58ea	; 0x58ea <readlast_TWI>
    1744:	88 83       	st	Y, r24
	stop_TWI();
    1746:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
	return(NOERROR);
    174a:	10 e0       	ldi	r17, 0x00	; 0

}
    174c:	81 2f       	mov	r24, r17
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	1f 91       	pop	r17
    1754:	0f 91       	pop	r16
    1756:	ff 90       	pop	r15
    1758:	ef 90       	pop	r14
    175a:	08 95       	ret

0000175c <get_orientation>:
uint8_t get_orientation(float *x, float *y, float *z)
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
uint8_t get_orientation(float *x, float *y, float *z)
{
    175c:	cf 92       	push	r12
    175e:	df 92       	push	r13
    1760:	ef 92       	push	r14
    1762:	ff 92       	push	r15
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	26 97       	sbiw	r28, 0x06	; 6
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	6c 01       	movw	r12, r24
    1778:	7b 01       	movw	r14, r22
    177a:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = BADFLOAT;
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	90 e8       	ldi	r25, 0x80	; 128
    1780:	a6 e2       	ldi	r26, 0x26	; 38
    1782:	b4 ec       	ldi	r27, 0xC4	; 196
    1784:	fa 01       	movw	r30, r20
    1786:	80 83       	st	Z, r24
    1788:	91 83       	std	Z+1, r25	; 0x01
    178a:	a2 83       	std	Z+2, r26	; 0x02
    178c:	b3 83       	std	Z+3, r27	; 0x03
    178e:	fb 01       	movw	r30, r22
    1790:	80 83       	st	Z, r24
    1792:	91 83       	std	Z+1, r25	; 0x01
    1794:	a2 83       	std	Z+2, r26	; 0x02
    1796:	b3 83       	std	Z+3, r27	; 0x03
    1798:	f6 01       	movw	r30, r12
    179a:	80 83       	st	Z, r24
    179c:	91 83       	std	Z+1, r25	; 0x01
    179e:	a2 83       	std	Z+2, r26	; 0x02
    17a0:	b3 83       	std	Z+3, r27	; 0x03

	if (read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6) == ERROR) {
    17a2:	26 e0       	ldi	r18, 0x06	; 6
    17a4:	ae 01       	movw	r20, r28
    17a6:	4f 5f       	subi	r20, 0xFF	; 255
    17a8:	5f 4f       	sbci	r21, 0xFF	; 255
    17aa:	61 e0       	ldi	r22, 0x01	; 1
    17ac:	8d e1       	ldi	r24, 0x1D	; 29
    17ae:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <read_MMA8451>
    17b2:	83 36       	cpi	r24, 0x63	; 99
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <get_orientation+0x5c>
    17b6:	64 c0       	rjmp	.+200    	; 0x1880 <__DATA_REGION_LENGTH__+0x80>
		return(ERROR);
	}

	ix = datain[0];
    17b8:	69 81       	ldd	r22, Y+1	; 0x01
    17ba:	70 e0       	ldi	r23, 0x00	; 0
	ix <<= 8;
    17bc:	76 2f       	mov	r23, r22
    17be:	66 27       	eor	r22, r22
	ix |= datain[1];
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	68 2b       	or	r22, r24
	ix >>= 2;
    17c4:	75 95       	asr	r23
    17c6:	67 95       	ror	r22
    17c8:	75 95       	asr	r23
    17ca:	67 95       	ror	r22
	*x = 980.6 * ((float) ix/4096.0);
    17cc:	07 2e       	mov	r0, r23
    17ce:	00 0c       	add	r0, r0
    17d0:	88 0b       	sbc	r24, r24
    17d2:	99 0b       	sbc	r25, r25
    17d4:	0e 94 b0 30 	call	0x6160	; 0x6160 <__floatsisf>
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e8       	ldi	r20, 0x80	; 128
    17de:	59 e3       	ldi	r21, 0x39	; 57
    17e0:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
    17e4:	26 e6       	ldi	r18, 0x66	; 102
    17e6:	36 e2       	ldi	r19, 0x26	; 38
    17e8:	45 e7       	ldi	r20, 0x75	; 117
    17ea:	54 e4       	ldi	r21, 0x44	; 68
    17ec:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
    17f0:	f6 01       	movw	r30, r12
    17f2:	60 83       	st	Z, r22
    17f4:	71 83       	std	Z+1, r23	; 0x01
    17f6:	82 83       	std	Z+2, r24	; 0x02
    17f8:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    17fa:	6b 81       	ldd	r22, Y+3	; 0x03
    17fc:	70 e0       	ldi	r23, 0x00	; 0
	iy <<= 8;
    17fe:	76 2f       	mov	r23, r22
    1800:	66 27       	eor	r22, r22
	iy |= datain[3];
    1802:	8c 81       	ldd	r24, Y+4	; 0x04
    1804:	68 2b       	or	r22, r24
	iy >>= 2;
    1806:	75 95       	asr	r23
    1808:	67 95       	ror	r22
    180a:	75 95       	asr	r23
    180c:	67 95       	ror	r22
	*y = 980.6 * ((float) iy/4096.0);
    180e:	07 2e       	mov	r0, r23
    1810:	00 0c       	add	r0, r0
    1812:	88 0b       	sbc	r24, r24
    1814:	99 0b       	sbc	r25, r25
    1816:	0e 94 b0 30 	call	0x6160	; 0x6160 <__floatsisf>
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e8       	ldi	r20, 0x80	; 128
    1820:	59 e3       	ldi	r21, 0x39	; 57
    1822:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
    1826:	26 e6       	ldi	r18, 0x66	; 102
    1828:	36 e2       	ldi	r19, 0x26	; 38
    182a:	45 e7       	ldi	r20, 0x75	; 117
    182c:	54 e4       	ldi	r21, 0x44	; 68
    182e:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
    1832:	f7 01       	movw	r30, r14
    1834:	60 83       	st	Z, r22
    1836:	71 83       	std	Z+1, r23	; 0x01
    1838:	82 83       	std	Z+2, r24	; 0x02
    183a:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    183c:	6d 81       	ldd	r22, Y+5	; 0x05
    183e:	70 e0       	ldi	r23, 0x00	; 0
	iz <<= 8;
    1840:	76 2f       	mov	r23, r22
    1842:	66 27       	eor	r22, r22
	iz |= datain[5];
    1844:	8e 81       	ldd	r24, Y+6	; 0x06
    1846:	68 2b       	or	r22, r24
	iz >>= 2;
    1848:	75 95       	asr	r23
    184a:	67 95       	ror	r22
    184c:	75 95       	asr	r23
    184e:	67 95       	ror	r22
	*z = 980.6 * ((float) iz/4096.0);
    1850:	07 2e       	mov	r0, r23
    1852:	00 0c       	add	r0, r0
    1854:	88 0b       	sbc	r24, r24
    1856:	99 0b       	sbc	r25, r25
    1858:	0e 94 b0 30 	call	0x6160	; 0x6160 <__floatsisf>
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e8       	ldi	r20, 0x80	; 128
    1862:	59 e3       	ldi	r21, 0x39	; 57
    1864:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
    1868:	26 e6       	ldi	r18, 0x66	; 102
    186a:	36 e2       	ldi	r19, 0x26	; 38
    186c:	45 e7       	ldi	r20, 0x75	; 117
    186e:	54 e4       	ldi	r21, 0x44	; 68
    1870:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
    1874:	f8 01       	movw	r30, r16
    1876:	60 83       	st	Z, r22
    1878:	71 83       	std	Z+1, r23	; 0x01
    187a:	82 83       	std	Z+2, r24	; 0x02
    187c:	93 83       	std	Z+3, r25	; 0x03

	return(0);
    187e:	80 e0       	ldi	r24, 0x00	; 0

}
    1880:	26 96       	adiw	r28, 0x06	; 6
    1882:	cd bf       	out	0x3d, r28	; 61
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	0f 91       	pop	r16
    188e:	ff 90       	pop	r15
    1890:	ef 90       	pop	r14
    1892:	df 90       	pop	r13
    1894:	cf 90       	pop	r12
    1896:	08 95       	ret

00001898 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	d6 2f       	mov	r29, r22
    18a0:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
    18a8:	c8 2f       	mov	r28, r24
    18aa:	88 23       	and	r24, r24
    18ac:	21 f0       	breq	.+8      	; 0x18b6 <write_MMA8451+0x1e>
		stop_TWI();
    18ae:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(retval);
    18b2:	8c 2f       	mov	r24, r28
    18b4:	17 c0       	rjmp	.+46     	; 0x18e4 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    18b6:	8d 2f       	mov	r24, r29
    18b8:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
    18bc:	c8 2f       	mov	r28, r24
    18be:	88 23       	and	r24, r24
    18c0:	21 f0       	breq	.+8      	; 0x18ca <write_MMA8451+0x32>
		stop_TWI();
    18c2:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(retval);
    18c6:	8c 2f       	mov	r24, r28
    18c8:	0d c0       	rjmp	.+26     	; 0x18e4 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    18ca:	81 2f       	mov	r24, r17
    18cc:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
    18d0:	c8 2f       	mov	r28, r24
    18d2:	88 23       	and	r24, r24
    18d4:	21 f0       	breq	.+8      	; 0x18de <write_MMA8451+0x46>
		stop_TWI();
    18d6:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
		return(retval);
    18da:	8c 2f       	mov	r24, r28
    18dc:	03 c0       	rjmp	.+6      	; 0x18e4 <write_MMA8451+0x4c>
	}
	stop_TWI();
    18de:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>
	return(0);
    18e2:	80 e0       	ldi	r24, 0x00	; 0
	
}
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	08 95       	ret

000018ec <init_MMA8451>:
	sampling frequency (1.56 Hz), a low cutoff frequency on the high pass
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/
uint8_t init_MMA8451(void)
{
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	1f 92       	push	r1
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    18f6:	40 e4       	ldi	r20, 0x40	; 64
    18f8:	6b e2       	ldi	r22, 0x2B	; 43
    18fa:	8d e1       	ldi	r24, 0x1D	; 29
    18fc:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    1900:	21 e0       	ldi	r18, 0x01	; 1
    1902:	ae 01       	movw	r20, r28
    1904:	4f 5f       	subi	r20, 0xFF	; 255
    1906:	5f 4f       	sbci	r21, 0xFF	; 255
    1908:	6b e2       	ldi	r22, 0x2B	; 43
    190a:	8d e1       	ldi	r24, 0x1D	; 29
    190c:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <read_MMA8451>
	while (retval & 0x40) {
    1910:	08 c0       	rjmp	.+16     	; 0x1922 <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    1912:	21 e0       	ldi	r18, 0x01	; 1
    1914:	ae 01       	movw	r20, r28
    1916:	4f 5f       	subi	r20, 0xFF	; 255
    1918:	5f 4f       	sbci	r21, 0xFF	; 255
    191a:	6b e2       	ldi	r22, 0x2B	; 43
    191c:	8d e1       	ldi	r24, 0x1D	; 29
    191e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	86 fd       	sbrc	r24, 6
    1926:	f5 cf       	rjmp	.-22     	; 0x1912 <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    1928:	40 ec       	ldi	r20, 0xC0	; 192
    192a:	6f e0       	ldi	r22, 0x0F	; 15
    192c:	8d e1       	ldi	r24, 0x1D	; 29
    192e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    1932:	42 e0       	ldi	r20, 0x02	; 2
    1934:	6b e2       	ldi	r22, 0x2B	; 43
    1936:	8d e1       	ldi	r24, 0x1D	; 29
    1938:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    193c:	4d e3       	ldi	r20, 0x3D	; 61
    193e:	6a e2       	ldi	r22, 0x2A	; 42
    1940:	8d e1       	ldi	r24, 0x1D	; 29
    1942:	0e 94 4c 0c 	call	0x1898	; 0x1898 <write_MMA8451>

	return(retval);

}
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	0f 90       	pop	r0
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	08 95       	ret

00001950 <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum and \r\n to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    1950:	ef 92       	push	r14
    1952:	ff 92       	push	r15
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	2e 97       	sbiw	r28, 0x0e	; 14
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    1968:	88 e0       	ldi	r24, 0x08	; 8
    196a:	ea ea       	ldi	r30, 0xAA	; 170
    196c:	f2 eb       	ldi	r31, 0xB2	; 178
    196e:	de 01       	movw	r26, r28
    1970:	11 96       	adiw	r26, 0x01	; 1
    1972:	01 90       	ld	r0, Z+
    1974:	0d 92       	st	X+, r0
    1976:	8a 95       	dec	r24
    1978:	e1 f7       	brne	.-8      	; 0x1972 <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    197a:	f8 01       	movw	r30, r16
    197c:	01 90       	ld	r0, Z+
    197e:	00 20       	and	r0, r0
    1980:	e9 f7       	brne	.-6      	; 0x197c <checksum_NMEA+0x2c>
    1982:	31 97       	sbiw	r30, 0x01	; 1
    1984:	3e 2f       	mov	r19, r30
    1986:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    1988:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	06 c0       	rjmp	.+12     	; 0x199a <checksum_NMEA+0x4a>
		checksum ^= str[i];
    198e:	f8 01       	movw	r30, r16
    1990:	e8 0f       	add	r30, r24
    1992:	f1 1d       	adc	r31, r1
    1994:	20 81       	ld	r18, Z
    1996:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1998:	8f 5f       	subi	r24, 0xFF	; 255
    199a:	83 17       	cp	r24, r19
    199c:	c0 f3       	brcs	.-16     	; 0x198e <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    199e:	1f 92       	push	r1
    19a0:	9f 93       	push	r25
    19a2:	ce 01       	movw	r24, r28
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	9f 93       	push	r25
    19a8:	8f 93       	push	r24
    19aa:	7e 01       	movw	r14, r28
    19ac:	89 e0       	ldi	r24, 0x09	; 9
    19ae:	e8 0e       	add	r14, r24
    19b0:	f1 1c       	adc	r15, r1
    19b2:	ff 92       	push	r15
    19b4:	ef 92       	push	r14
    19b6:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
	strcat(str, chksum);
    19ba:	b7 01       	movw	r22, r14
    19bc:	c8 01       	movw	r24, r16
    19be:	0e 94 31 37 	call	0x6e62	; 0x6e62 <strcat>

}
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	2e 96       	adiw	r28, 0x0e	; 14
    19d0:	cd bf       	out	0x3d, r28	; 61
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	1f 91       	pop	r17
    19da:	0f 91       	pop	r16
    19dc:	ff 90       	pop	r15
    19de:	ef 90       	pop	r14
    19e0:	08 95       	ret

000019e2 <reset_OLED>:
void reset_OLED(void)
	Pulls the OLED display reset line low for 1 ms. This seems to be needed.
------------------------------------------------------------------------------*/
void reset_OLED(void)
{
	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    19e2:	e0 e6       	ldi	r30, 0x60	; 96
    19e4:	f4 e0       	ldi	r31, 0x04	; 4
    19e6:	80 e4       	ldi	r24, 0x40	; 64
    19e8:	86 83       	std	Z+6, r24	; 0x06
	PORTD.DIRSET = PIN6_bm;
    19ea:	81 83       	std	Z+1, r24	; 0x01
    19ec:	a1 e4       	ldi	r26, 0x41	; 65
    19ee:	b3 e0       	ldi	r27, 0x03	; 3
    19f0:	11 97       	sbiw	r26, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <reset_OLED+0xe>
    19f4:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    19f6:	85 83       	std	Z+5, r24	; 0x05
    19f8:	08 95       	ret

000019fa <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	d6 2f       	mov	r29, r22
    1a00:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    1a02:	60 e0       	ldi	r22, 0x00	; 0
    1a04:	0e 94 94 2c 	call	0x5928	; 0x5928 <start_TWI>
	write_TWI(type);
    1a08:	8d 2f       	mov	r24, r29
    1a0a:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
	write_TWI(byteToSend);
    1a0e:	8c 2f       	mov	r24, r28
    1a10:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <write_TWI>
	stop_TWI();
    1a14:	0e 94 de 2c 	call	0x59bc	; 0x59bc <stop_TWI>

}
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	08 95       	ret

00001a1e <init_OLEDDISPLAY>:
	Initialize a Newhaven NHD-0216AW-1B3 OLED display. This is taken straight
	from https://github.com/NewhavenDisplay/NHD_US2066. The manual is not easy
	to understand but this seems to work.
------------------------------------------------------------------------------*/
void init_OLEDDISPLAY(uint8_t displaynumber)
{
    1a1e:	cf 93       	push	r28

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
    1a20:	88 23       	and	r24, r24
    1a22:	29 f0       	breq	.+10     	; 0x1a2e <init_OLEDDISPLAY+0x10>
		twiaddr = OLEDADDR0;		
	} else if (displaynumber == 1) {	// Left-side display
    1a24:	81 30       	cpi	r24, 0x01	; 1
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <init_OLEDDISPLAY+0xc>
    1a28:	9e c0       	rjmp	.+316    	; 0x1b66 <init_OLEDDISPLAY+0x148>
		twiaddr = OLEDADDR1;
    1a2a:	cd e3       	ldi	r28, 0x3D	; 61
    1a2c:	01 c0       	rjmp	.+2      	; 0x1a30 <init_OLEDDISPLAY+0x12>
{

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
		twiaddr = OLEDADDR0;		
    1a2e:	cc e3       	ldi	r28, 0x3C	; 60
		twiaddr = OLEDADDR1;
	} else {
		return;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    1a30:	4a e2       	ldi	r20, 0x2A	; 42
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	8c 2f       	mov	r24, r28
    1a36:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    1a3a:	41 e7       	ldi	r20, 0x71	; 113
    1a3c:	60 e0       	ldi	r22, 0x00	; 0
    1a3e:	8c 2f       	mov	r24, r28
    1a40:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    1a44:	4c e5       	ldi	r20, 0x5C	; 92
    1a46:	60 e4       	ldi	r22, 0x40	; 64
    1a48:	8c 2f       	mov	r24, r28
    1a4a:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1a4e:	48 e2       	ldi	r20, 0x28	; 40
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	8c 2f       	mov	r24, r28
    1a54:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    1a58:	48 e0       	ldi	r20, 0x08	; 8
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	8c 2f       	mov	r24, r28
    1a5e:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1a62:	4a e2       	ldi	r20, 0x2A	; 42
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	8c 2f       	mov	r24, r28
    1a68:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1a6c:	49 e7       	ldi	r20, 0x79	; 121
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	8c 2f       	mov	r24, r28
    1a72:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    1a76:	45 ed       	ldi	r20, 0xD5	; 213
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	8c 2f       	mov	r24, r28
    1a7c:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    1a80:	40 e7       	ldi	r20, 0x70	; 112
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	8c 2f       	mov	r24, r28
    1a86:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1a8a:	48 e7       	ldi	r20, 0x78	; 120
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
    1a8e:	8c 2f       	mov	r24, r28
    1a90:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    1a94:	48 e0       	ldi	r20, 0x08	; 8
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	8c 2f       	mov	r24, r28
    1a9a:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1a9e:	46 e0       	ldi	r20, 0x06	; 6
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	8c 2f       	mov	r24, r28
    1aa4:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1aa8:	42 e7       	ldi	r20, 0x72	; 114
    1aaa:	60 e0       	ldi	r22, 0x00	; 0
    1aac:	8c 2f       	mov	r24, r28
    1aae:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    1ab2:	40 e0       	ldi	r20, 0x00	; 0
    1ab4:	60 e4       	ldi	r22, 0x40	; 64
    1ab6:	8c 2f       	mov	r24, r28
    1ab8:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1abc:	4a e2       	ldi	r20, 0x2A	; 42
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	8c 2f       	mov	r24, r28
    1ac2:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1ac6:	49 e7       	ldi	r20, 0x79	; 121
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	8c 2f       	mov	r24, r28
    1acc:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    1ad0:	4a ed       	ldi	r20, 0xDA	; 218
    1ad2:	60 e0       	ldi	r22, 0x00	; 0
    1ad4:	8c 2f       	mov	r24, r28
    1ad6:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	8c 2f       	mov	r24, r28
    1ae0:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    1ae4:	4c ed       	ldi	r20, 0xDC	; 220
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	8c 2f       	mov	r24, r28
    1aea:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    1aee:	40 e0       	ldi	r20, 0x00	; 0
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	8c 2f       	mov	r24, r28
    1af4:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    1af8:	41 e8       	ldi	r20, 0x81	; 129
    1afa:	60 e0       	ldi	r22, 0x00	; 0
    1afc:	8c 2f       	mov	r24, r28
    1afe:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    1b02:	4f e7       	ldi	r20, 0x7F	; 127
    1b04:	60 e0       	ldi	r22, 0x00	; 0
    1b06:	8c 2f       	mov	r24, r28
    1b08:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1b0c:	49 ed       	ldi	r20, 0xD9	; 217
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	8c 2f       	mov	r24, r28
    1b12:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    1b16:	41 ef       	ldi	r20, 0xF1	; 241
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	8c 2f       	mov	r24, r28
    1b1c:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    1b20:	4b ed       	ldi	r20, 0xDB	; 219
    1b22:	60 e0       	ldi	r22, 0x00	; 0
    1b24:	8c 2f       	mov	r24, r28
    1b26:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    1b2a:	40 e4       	ldi	r20, 0x40	; 64
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	8c 2f       	mov	r24, r28
    1b30:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1b34:	48 e7       	ldi	r20, 0x78	; 120
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	8c 2f       	mov	r24, r28
    1b3a:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1b3e:	48 e2       	ldi	r20, 0x28	; 40
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	8c 2f       	mov	r24, r28
    1b44:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    1b48:	41 e0       	ldi	r20, 0x01	; 1
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	8c 2f       	mov	r24, r28
    1b4e:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    1b52:	40 e8       	ldi	r20, 0x80	; 128
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	8c 2f       	mov	r24, r28
    1b58:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    1b5c:	4c e0       	ldi	r20, 0x0C	; 12
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	8c 2f       	mov	r24, r28
    1b62:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>

}
    1b66:	cf 91       	pop	r28
    1b68:	08 95       	ret

00001b6a <init_OLED>:
	Set up the two OLED displays
------------------------------------------------------------------------------*/
void init_OLED(void)
{

	reset_OLED();				// Need to start with a reset
    1b6a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <reset_OLED>
	init_OLEDDISPLAY(0);
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <init_OLEDDISPLAY>
	init_OLEDDISPLAY(1);
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <init_OLEDDISPLAY>
    1b7a:	2a e6       	ldi	r18, 0x6A	; 106
    1b7c:	84 e0       	ldi	r24, 0x04	; 4
    1b7e:	91 e0       	ldi	r25, 0x01	; 1
    1b80:	21 50       	subi	r18, 0x01	; 1
    1b82:	80 40       	sbci	r24, 0x00	; 0
    1b84:	90 40       	sbci	r25, 0x00	; 0
    1b86:	e1 f7       	brne	.-8      	; 0x1b80 <init_OLED+0x16>
    1b88:	00 c0       	rjmp	.+0      	; 0x1b8a <init_OLED+0x20>
    1b8a:	08 95       	ret

00001b8c <writestr_OLED>:
	
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.
------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1b8c:	ef 92       	push	r14
    1b8e:	ff 92       	push	r15
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	e2 97       	sbiw	r28, 0x32	; 50
    1b9e:	cd bf       	out	0x3d, r28	; 61
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    1ba4:	91 e1       	ldi	r25, 0x11	; 17
    1ba6:	e2 eb       	ldi	r30, 0xB2	; 178
    1ba8:	f2 eb       	ldi	r31, 0xB2	; 178
    1baa:	de 01       	movw	r26, r28
    1bac:	92 96       	adiw	r26, 0x22	; 34
    1bae:	01 90       	ld	r0, Z+
    1bb0:	0d 92       	st	X+, r0
    1bb2:	9a 95       	dec	r25
    1bb4:	e1 f7       	brne	.-8      	; 0x1bae <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1bb6:	81 11       	cpse	r24, r1
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1bba:	0c e3       	ldi	r16, 0x3C	; 60
    1bbc:	01 c0       	rjmp	.+2      	; 0x1bc0 <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1bbe:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	7c 01       	movw	r14, r24
    1bc6:	0e 94 3c 37 	call	0x6e78	; 0x6e78 <strcpy>
	if (strlen(strbuf) > 16) {
    1bca:	f7 01       	movw	r30, r14
    1bcc:	01 90       	ld	r0, Z+
    1bce:	00 20       	and	r0, r0
    1bd0:	e9 f7       	brne	.-6      	; 0x1bcc <writestr_OLED+0x40>
    1bd2:	31 97       	sbiw	r30, 0x01	; 1
    1bd4:	ee 19       	sub	r30, r14
    1bd6:	ff 09       	sbc	r31, r15
    1bd8:	71 97       	sbiw	r30, 0x11	; 17
    1bda:	08 f0       	brcs	.+2      	; 0x1bde <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1bdc:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1bde:	be 01       	movw	r22, r28
    1be0:	6e 5d       	subi	r22, 0xDE	; 222
    1be2:	7f 4f       	sbci	r23, 0xFF	; 255
    1be4:	ce 01       	movw	r24, r28
    1be6:	01 96       	adiw	r24, 0x01	; 1
    1be8:	0e 94 31 37 	call	0x6e62	; 0x6e62 <strcat>

	if (lineno == 1) {
    1bec:	11 30       	cpi	r17, 0x01	; 1
    1bee:	39 f4       	brne	.+14     	; 0x1bfe <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    1bf0:	40 e8       	ldi	r20, 0x80	; 128
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	80 2f       	mov	r24, r16
    1bf6:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1bfa:	10 e0       	ldi	r17, 0x00	; 0
    1bfc:	12 c0       	rjmp	.+36     	; 0x1c22 <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1bfe:	40 ec       	ldi	r20, 0xC0	; 192
    1c00:	60 e0       	ldi	r22, 0x00	; 0
    1c02:	80 2f       	mov	r24, r16
    1c04:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>
    1c08:	f8 cf       	rjmp	.-16     	; 0x1bfa <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1c0a:	e1 e0       	ldi	r30, 0x01	; 1
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	ec 0f       	add	r30, r28
    1c10:	fd 1f       	adc	r31, r29
    1c12:	e1 0f       	add	r30, r17
    1c14:	f1 1d       	adc	r31, r1
    1c16:	40 81       	ld	r20, Z
    1c18:	60 e4       	ldi	r22, 0x40	; 64
    1c1a:	80 2f       	mov	r24, r16
    1c1c:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    1c20:	1f 5f       	subi	r17, 0xFF	; 255
    1c22:	10 31       	cpi	r17, 0x10	; 16
    1c24:	90 f3       	brcs	.-28     	; 0x1c0a <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 0;
    1c26:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    1c2a:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>

}
    1c2e:	e2 96       	adiw	r28, 0x32	; 50
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	1f 91       	pop	r17
    1c3a:	0f 91       	pop	r16
    1c3c:	ff 90       	pop	r15
    1c3e:	ef 90       	pop	r14
    1c40:	08 95       	ret

00001c42 <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    1c42:	1f 93       	push	r17
    1c44:	cf 93       	push	r28
    1c46:	df 93       	push	r29
    1c48:	1f 92       	push	r1
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	18 2f       	mov	r17, r24

	char nullstr[] = "";
    1c50:	19 82       	std	Y+1, r1	; 0x01
	writestr_OLED(displaynumber, nullstr, 1);
    1c52:	41 e0       	ldi	r20, 0x01	; 1
    1c54:	be 01       	movw	r22, r28
    1c56:	6f 5f       	subi	r22, 0xFF	; 255
    1c58:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
    1c5e:	42 e0       	ldi	r20, 0x02	; 2
    1c60:	be 01       	movw	r22, r28
    1c62:	6f 5f       	subi	r22, 0xFF	; 255
    1c64:	7f 4f       	sbci	r23, 0xFF	; 255
    1c66:	81 2f       	mov	r24, r17
    1c68:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <writestr_OLED>
	timerOLED = 0;
    1c6c:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    1c70:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>

}
    1c74:	0f 90       	pop	r0
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	1f 91       	pop	r17
    1c7c:	08 95       	ret

00001c7e <init_PNEU>:
	is assumed to be in input mode.
------------------------------------------------------------------------------*/
uint8_t init_PNEU(void)
{

	if (write_MCP23008(HIGHCURRENT, IODIR, 0x00) == ERROR) {
    1c7e:	40 e0       	ldi	r20, 0x00	; 0
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	84 e2       	ldi	r24, 0x24	; 36
    1c84:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <write_MCP23008>
    1c88:	83 36       	cpi	r24, 0x63	; 99
    1c8a:	a9 f1       	breq	.+106    	; 0x1cf6 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(HIGHCURRENT, OLAT, 0x00) == ERROR) {
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	6a e0       	ldi	r22, 0x0A	; 10
    1c90:	84 e2       	ldi	r24, 0x24	; 36
    1c92:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <write_MCP23008>
    1c96:	83 36       	cpi	r24, 0x63	; 99
    1c98:	71 f1       	breq	.+92     	; 0x1cf6 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IODIR, 0xFE) == ERROR) {	// Inputs
    1c9a:	4e ef       	ldi	r20, 0xFE	; 254
    1c9c:	60 e0       	ldi	r22, 0x00	; 0
    1c9e:	81 e2       	ldi	r24, 0x21	; 33
    1ca0:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <write_MCP23008>
    1ca4:	83 36       	cpi	r24, 0x63	; 99
    1ca6:	39 f1       	breq	.+78     	; 0x1cf6 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IPOL, 0x00) == ERROR) {
    1ca8:	40 e0       	ldi	r20, 0x00	; 0
    1caa:	61 e0       	ldi	r22, 0x01	; 1
    1cac:	81 e2       	ldi	r24, 0x21	; 33
    1cae:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <write_MCP23008>
    1cb2:	83 36       	cpi	r24, 0x63	; 99
    1cb4:	01 f1       	breq	.+64     	; 0x1cf6 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100) == ERROR) {
    1cb6:	4c ef       	ldi	r20, 0xFC	; 252
    1cb8:	62 e0       	ldi	r22, 0x02	; 2
    1cba:	81 e2       	ldi	r24, 0x21	; 33
    1cbc:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <write_MCP23008>
    1cc0:	83 36       	cpi	r24, 0x63	; 99
    1cc2:	c9 f0       	breq	.+50     	; 0x1cf6 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, INTCON, 0x00) == ERROR) {
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	64 e0       	ldi	r22, 0x04	; 4
    1cc8:	81 e2       	ldi	r24, 0x21	; 33
    1cca:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <write_MCP23008>
    1cce:	83 36       	cpi	r24, 0x63	; 99
    1cd0:	91 f0       	breq	.+36     	; 0x1cf6 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IOCON, 0x20) == ERROR) { // Don't increment addr
    1cd2:	40 e2       	ldi	r20, 0x20	; 32
    1cd4:	65 e0       	ldi	r22, 0x05	; 5
    1cd6:	81 e2       	ldi	r24, 0x21	; 33
    1cd8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <write_MCP23008>
    1cdc:	83 36       	cpi	r24, 0x63	; 99
    1cde:	59 f0       	breq	.+22     	; 0x1cf6 <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPPU, 0x7F) == ERROR) { // Pullups (not really needed)
    1ce0:	4f e7       	ldi	r20, 0x7F	; 127
    1ce2:	66 e0       	ldi	r22, 0x06	; 6
    1ce4:	81 e2       	ldi	r24, 0x21	; 33
    1ce6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <write_MCP23008>
    1cea:	83 36       	cpi	r24, 0x63	; 99
    1cec:	21 f0       	breq	.+8      	; 0x1cf6 <init_PNEU+0x78>
		return(ERROR);
	}

	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    1cee:	89 e0       	ldi	r24, 0x09	; 9
    1cf0:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>

	return(NOERROR);
    1cf4:	80 e0       	ldi	r24, 0x00	; 0

}
    1cf6:	08 95       	ret

00001cf8 <read_PNEUSensors>:
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
{
    1cf8:	cf 92       	push	r12
    1cfa:	df 92       	push	r13
    1cfc:	ef 92       	push	r14
    1cfe:	ff 92       	push	r15
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	6c 01       	movw	r12, r24
    1d0a:	8b 01       	movw	r16, r22
    1d0c:	7a 01       	movw	r14, r20
    1d0e:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);	// NEEDS ERRORCHECK
    1d10:	69 e0       	ldi	r22, 0x09	; 9
    1d12:	81 e2       	ldi	r24, 0x21	; 33
    1d14:	0e 94 ac 0a 	call	0x1558	; 0x1558 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1d18:	98 2f       	mov	r25, r24
    1d1a:	92 95       	swap	r25
    1d1c:	96 95       	lsr	r25
    1d1e:	96 95       	lsr	r25
    1d20:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    1d22:	91 30       	cpi	r25, 0x01	; 1
    1d24:	21 f4       	brne	.+8      	; 0x1d2e <read_PNEUSensors+0x36>
		*shutter = 'c';
    1d26:	93 e6       	ldi	r25, 0x63	; 99
    1d28:	f6 01       	movw	r30, r12
    1d2a:	90 83       	st	Z, r25
    1d2c:	0f c0       	rjmp	.+30     	; 0x1d4c <read_PNEUSensors+0x54>
	} else if (state == 2) {
    1d2e:	92 30       	cpi	r25, 0x02	; 2
    1d30:	21 f4       	brne	.+8      	; 0x1d3a <read_PNEUSensors+0x42>
		*shutter = 'o';
    1d32:	9f e6       	ldi	r25, 0x6F	; 111
    1d34:	f6 01       	movw	r30, r12
    1d36:	90 83       	st	Z, r25
    1d38:	09 c0       	rjmp	.+18     	; 0x1d4c <read_PNEUSensors+0x54>
	} else if (state == 3) {
    1d3a:	93 30       	cpi	r25, 0x03	; 3
    1d3c:	21 f4       	brne	.+8      	; 0x1d46 <read_PNEUSensors+0x4e>
		*shutter = 't';
    1d3e:	94 e7       	ldi	r25, 0x74	; 116
    1d40:	f6 01       	movw	r30, r12
    1d42:	90 83       	st	Z, r25
    1d44:	03 c0       	rjmp	.+6      	; 0x1d4c <read_PNEUSensors+0x54>
	} else {
		*shutter = 'x';
    1d46:	98 e7       	ldi	r25, 0x78	; 120
    1d48:	f6 01       	movw	r30, r12
    1d4a:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1d4c:	98 2f       	mov	r25, r24
    1d4e:	96 95       	lsr	r25
    1d50:	96 95       	lsr	r25
	state &= 0b00000011;
    1d52:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1d54:	91 30       	cpi	r25, 0x01	; 1
    1d56:	21 f4       	brne	.+8      	; 0x1d60 <read_PNEUSensors+0x68>
		*right = 'c';
    1d58:	93 e6       	ldi	r25, 0x63	; 99
    1d5a:	f7 01       	movw	r30, r14
    1d5c:	90 83       	st	Z, r25
    1d5e:	0f c0       	rjmp	.+30     	; 0x1d7e <read_PNEUSensors+0x86>
	} else if (state == 2) {
    1d60:	92 30       	cpi	r25, 0x02	; 2
    1d62:	21 f4       	brne	.+8      	; 0x1d6c <read_PNEUSensors+0x74>
		*right = 'o';
    1d64:	9f e6       	ldi	r25, 0x6F	; 111
    1d66:	f7 01       	movw	r30, r14
    1d68:	90 83       	st	Z, r25
    1d6a:	09 c0       	rjmp	.+18     	; 0x1d7e <read_PNEUSensors+0x86>
	} else if (state == 3) {
    1d6c:	93 30       	cpi	r25, 0x03	; 3
    1d6e:	21 f4       	brne	.+8      	; 0x1d78 <read_PNEUSensors+0x80>
		*right = 't';
    1d70:	94 e7       	ldi	r25, 0x74	; 116
    1d72:	f7 01       	movw	r30, r14
    1d74:	90 83       	st	Z, r25
    1d76:	03 c0       	rjmp	.+6      	; 0x1d7e <read_PNEUSensors+0x86>
	} else {
		*right = 'x';
    1d78:	98 e7       	ldi	r25, 0x78	; 120
    1d7a:	f7 01       	movw	r30, r14
    1d7c:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1d7e:	98 2f       	mov	r25, r24
    1d80:	92 95       	swap	r25
    1d82:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    1d84:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1d86:	91 30       	cpi	r25, 0x01	; 1
    1d88:	21 f4       	brne	.+8      	; 0x1d92 <read_PNEUSensors+0x9a>
		*left = 'o';
    1d8a:	9f e6       	ldi	r25, 0x6F	; 111
    1d8c:	f8 01       	movw	r30, r16
    1d8e:	90 83       	st	Z, r25
    1d90:	0f c0       	rjmp	.+30     	; 0x1db0 <read_PNEUSensors+0xb8>
	} else if (state == 2) {
    1d92:	92 30       	cpi	r25, 0x02	; 2
    1d94:	21 f4       	brne	.+8      	; 0x1d9e <read_PNEUSensors+0xa6>
		*left = 'c';
    1d96:	93 e6       	ldi	r25, 0x63	; 99
    1d98:	f8 01       	movw	r30, r16
    1d9a:	90 83       	st	Z, r25
    1d9c:	09 c0       	rjmp	.+18     	; 0x1db0 <read_PNEUSensors+0xb8>
	} else if (state == 3) {
    1d9e:	93 30       	cpi	r25, 0x03	; 3
    1da0:	21 f4       	brne	.+8      	; 0x1daa <read_PNEUSensors+0xb2>
		*left = 't';
    1da2:	94 e7       	ldi	r25, 0x74	; 116
    1da4:	f8 01       	movw	r30, r16
    1da6:	90 83       	st	Z, r25
    1da8:	03 c0       	rjmp	.+6      	; 0x1db0 <read_PNEUSensors+0xb8>
	} else {
		*left = 'x';
    1daa:	98 e7       	ldi	r25, 0x78	; 120
    1dac:	f8 01       	movw	r30, r16
    1dae:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1db0:	81 ff       	sbrs	r24, 1
    1db2:	03 c0       	rjmp	.+6      	; 0x1dba <read_PNEUSensors+0xc2>
		*air = '0';
    1db4:	80 e3       	ldi	r24, 0x30	; 48
    1db6:	88 83       	st	Y, r24
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <read_PNEUSensors+0xc6>
	} else {
		*air = '1';
    1dba:	81 e3       	ldi	r24, 0x31	; 49
    1dbc:	88 83       	st	Y, r24
	}
}
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	1f 91       	pop	r17
    1dc4:	0f 91       	pop	r16
    1dc6:	ff 90       	pop	r15
    1dc8:	ef 90       	pop	r14
    1dca:	df 90       	pop	r13
    1dcc:	cf 90       	pop	r12
    1dce:	08 95       	ret

00001dd0 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1dd0:	cf 93       	push	r28
    1dd2:	df 93       	push	r29
    1dd4:	d8 2f       	mov	r29, r24
    1dd6:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    1dd8:	69 e0       	ldi	r22, 0x09	; 9
    1dda:	84 e2       	ldi	r24, 0x24	; 36
    1ddc:	0e 94 ac 0a 	call	0x1558	; 0x1558 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    1de0:	8d 2b       	or	r24, r29
    1de2:	48 2f       	mov	r20, r24
    1de4:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1de6:	6a e0       	ldi	r22, 0x0A	; 10
    1de8:	84 e2       	ldi	r24, 0x24	; 36
    1dea:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1dee:	df 91       	pop	r29
    1df0:	cf 91       	pop	r28
    1df2:	08 95       	ret

00001df4 <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(uint8_t cstack)
{
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	6a 97       	sbiw	r28, 0x1a	; 26
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    1e02:	99 e0       	ldi	r25, 0x09	; 9
    1e04:	ed ef       	ldi	r30, 0xFD	; 253
    1e06:	f2 eb       	ldi	r31, 0xB2	; 178
    1e08:	de 01       	movw	r26, r28
    1e0a:	11 96       	adiw	r26, 0x01	; 1
    1e0c:	01 90       	ld	r0, Z+
    1e0e:	0d 92       	st	X+, r0
    1e10:	9a 95       	dec	r25
    1e12:	e1 f7       	brne	.-8      	; 0x1e0c <close_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1e14:	24 e3       	ldi	r18, 0x34	; 52
    1e16:	82 9f       	mul	r24, r18
    1e18:	c0 01       	movw	r24, r0
    1e1a:	11 24       	eor	r1, r1
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	e1 5f       	subi	r30, 0xF1	; 241
    1e20:	f7 4d       	sbci	r31, 0xD7	; 215
    1e22:	81 81       	ldd	r24, Z+1	; 0x01
    1e24:	8c 36       	cpi	r24, 0x6C	; 108
    1e26:	31 f1       	breq	.+76     	; 0x1e74 <close_PNEU+0x80>
    1e28:	18 f4       	brcc	.+6      	; 0x1e30 <close_PNEU+0x3c>
    1e2a:	82 36       	cpi	r24, 0x62	; 98
    1e2c:	39 f0       	breq	.+14     	; 0x1e3c <close_PNEU+0x48>
    1e2e:	6a c0       	rjmp	.+212    	; 0x1f04 <close_PNEU+0x110>
    1e30:	82 37       	cpi	r24, 0x72	; 114
    1e32:	c1 f1       	breq	.+112    	; 0x1ea4 <close_PNEU+0xb0>
    1e34:	83 37       	cpi	r24, 0x73	; 115
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <close_PNEU+0x46>
    1e38:	4d c0       	rjmp	.+154    	; 0x1ed4 <close_PNEU+0xe0>
    1e3a:	64 c0       	rjmp	.+200    	; 0x1f04 <close_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1e3c:	6a ee       	ldi	r22, 0xEA	; 234
    1e3e:	84 e4       	ldi	r24, 0x44	; 68
    1e40:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1e44:	66 ee       	ldi	r22, 0xE6	; 230
    1e46:	88 e8       	ldi	r24, 0x88	; 136
    1e48:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1e4c:	83 ec       	ldi	r24, 0xC3	; 195
    1e4e:	92 eb       	ldi	r25, 0xB2	; 178
    1e50:	9f 93       	push	r25
    1e52:	8f 93       	push	r24
    1e54:	ce 01       	movw	r24, r28
    1e56:	01 96       	adiw	r24, 0x01	; 1
    1e58:	9f 93       	push	r25
    1e5a:	8f 93       	push	r24
    1e5c:	09 96       	adiw	r24, 0x09	; 9
    1e5e:	9f 93       	push	r25
    1e60:	8f 93       	push	r24
    1e62:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			break;
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	59 c0       	rjmp	.+178    	; 0x1f26 <close_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1e74:	6a ee       	ldi	r22, 0xEA	; 234
    1e76:	84 e4       	ldi	r24, 0x44	; 68
    1e78:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1e7c:	88 ec       	ldi	r24, 0xC8	; 200
    1e7e:	92 eb       	ldi	r25, 0xB2	; 178
    1e80:	9f 93       	push	r25
    1e82:	8f 93       	push	r24
    1e84:	ce 01       	movw	r24, r28
    1e86:	01 96       	adiw	r24, 0x01	; 1
    1e88:	9f 93       	push	r25
    1e8a:	8f 93       	push	r24
    1e8c:	09 96       	adiw	r24, 0x09	; 9
    1e8e:	9f 93       	push	r25
    1e90:	8f 93       	push	r24
    1e92:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			break;
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	41 c0       	rjmp	.+130    	; 0x1f26 <close_PNEU+0x132>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1ea4:	66 ee       	ldi	r22, 0xE6	; 230
    1ea6:	88 e8       	ldi	r24, 0x88	; 136
    1ea8:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1eac:	8d ec       	ldi	r24, 0xCD	; 205
    1eae:	92 eb       	ldi	r25, 0xB2	; 178
    1eb0:	9f 93       	push	r25
    1eb2:	8f 93       	push	r24
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	01 96       	adiw	r24, 0x01	; 1
    1eb8:	9f 93       	push	r25
    1eba:	8f 93       	push	r24
    1ebc:	09 96       	adiw	r24, 0x09	; 9
    1ebe:	9f 93       	push	r25
    1ec0:	8f 93       	push	r24
    1ec2:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			break;
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	29 c0       	rjmp	.+82     	; 0x1f26 <close_PNEU+0x132>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1ed4:	6c ee       	ldi	r22, 0xEC	; 236
    1ed6:	82 e2       	ldi	r24, 0x22	; 34
    1ed8:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1edc:	83 ed       	ldi	r24, 0xD3	; 211
    1ede:	92 eb       	ldi	r25, 0xB2	; 178
    1ee0:	9f 93       	push	r25
    1ee2:	8f 93       	push	r24
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	01 96       	adiw	r24, 0x01	; 1
    1ee8:	9f 93       	push	r25
    1eea:	8f 93       	push	r24
    1eec:	09 96       	adiw	r24, 0x09	; 9
    1eee:	9f 93       	push	r25
    1ef0:	8f 93       	push	r24
    1ef2:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			break;
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	11 c0       	rjmp	.+34     	; 0x1f26 <close_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "close_PNEU bad object");
    1f04:	6b ed       	ldi	r22, 0xDB	; 219
    1f06:	72 eb       	ldi	r23, 0xB2	; 178
    1f08:	85 ef       	ldi	r24, 0xF5	; 245
    1f0a:	91 e0       	ldi	r25, 0x01	; 1
    1f0c:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
			strcpy(outbuf, "close what?");
    1f10:	8c e0       	ldi	r24, 0x0C	; 12
    1f12:	e1 ef       	ldi	r30, 0xF1	; 241
    1f14:	f2 eb       	ldi	r31, 0xB2	; 178
    1f16:	de 01       	movw	r26, r28
    1f18:	1a 96       	adiw	r26, 0x0a	; 10
    1f1a:	01 90       	ld	r0, Z+
    1f1c:	0d 92       	st	X+, r0
    1f1e:	8a 95       	dec	r24
    1f20:	e1 f7       	brne	.-8      	; 0x1f1a <close_PNEU+0x126>
			return(ERROR);
    1f22:	83 e6       	ldi	r24, 0x63	; 99
    1f24:	0b c0       	rjmp	.+22     	; 0x1f3c <close_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1f2c:	41 e0       	ldi	r20, 0x01	; 1
    1f2e:	be 01       	movw	r22, r28
    1f30:	66 5f       	subi	r22, 0xF6	; 246
    1f32:	7f 4f       	sbci	r23, 0xFF	; 255
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <writestr_OLED>
	return(NOERROR);
    1f3a:	80 e0       	ldi	r24, 0x00	; 0

}
    1f3c:	6a 96       	adiw	r28, 0x1a	; 26
    1f3e:	cd bf       	out	0x3d, r28	; 61
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	08 95       	ret

00001f48 <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(uint8_t cstack)
{
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	69 97       	sbiw	r28, 0x19	; 25
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	de bf       	out	0x3e, r29	; 62

	const char dformat_OPE[] = "Open %s";
    1f56:	98 e0       	ldi	r25, 0x08	; 8
    1f58:	e6 e2       	ldi	r30, 0x26	; 38
    1f5a:	f3 eb       	ldi	r31, 0xB3	; 179
    1f5c:	de 01       	movw	r26, r28
    1f5e:	11 96       	adiw	r26, 0x01	; 1
    1f60:	01 90       	ld	r0, Z+
    1f62:	0d 92       	st	X+, r0
    1f64:	9a 95       	dec	r25
    1f66:	e1 f7       	brne	.-8      	; 0x1f60 <open_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1f68:	24 e3       	ldi	r18, 0x34	; 52
    1f6a:	82 9f       	mul	r24, r18
    1f6c:	c0 01       	movw	r24, r0
    1f6e:	11 24       	eor	r1, r1
    1f70:	fc 01       	movw	r30, r24
    1f72:	e1 5f       	subi	r30, 0xF1	; 241
    1f74:	f7 4d       	sbci	r31, 0xD7	; 215
    1f76:	81 81       	ldd	r24, Z+1	; 0x01
    1f78:	8c 36       	cpi	r24, 0x6C	; 108
    1f7a:	31 f1       	breq	.+76     	; 0x1fc8 <open_PNEU+0x80>
    1f7c:	18 f4       	brcc	.+6      	; 0x1f84 <open_PNEU+0x3c>
    1f7e:	82 36       	cpi	r24, 0x62	; 98
    1f80:	39 f0       	breq	.+14     	; 0x1f90 <open_PNEU+0x48>
    1f82:	6a c0       	rjmp	.+212    	; 0x2058 <open_PNEU+0x110>
    1f84:	82 37       	cpi	r24, 0x72	; 114
    1f86:	c1 f1       	breq	.+112    	; 0x1ff8 <open_PNEU+0xb0>
    1f88:	83 37       	cpi	r24, 0x73	; 115
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <open_PNEU+0x46>
    1f8c:	4d c0       	rjmp	.+154    	; 0x2028 <open_PNEU+0xe0>
    1f8e:	64 c0       	rjmp	.+200    	; 0x2058 <open_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1f90:	6e ea       	ldi	r22, 0xAE	; 174
    1f92:	84 e4       	ldi	r24, 0x44	; 68
    1f94:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1f98:	6e e6       	ldi	r22, 0x6E	; 110
    1f9a:	88 e8       	ldi	r24, 0x88	; 136
    1f9c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1fa0:	83 ec       	ldi	r24, 0xC3	; 195
    1fa2:	92 eb       	ldi	r25, 0xB2	; 178
    1fa4:	9f 93       	push	r25
    1fa6:	8f 93       	push	r24
    1fa8:	ce 01       	movw	r24, r28
    1faa:	01 96       	adiw	r24, 0x01	; 1
    1fac:	9f 93       	push	r25
    1fae:	8f 93       	push	r24
    1fb0:	08 96       	adiw	r24, 0x08	; 8
    1fb2:	9f 93       	push	r25
    1fb4:	8f 93       	push	r24
    1fb6:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			break;
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	59 c0       	rjmp	.+178    	; 0x207a <open_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1fc8:	6e ea       	ldi	r22, 0xAE	; 174
    1fca:	84 e4       	ldi	r24, 0x44	; 68
    1fcc:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1fd0:	88 ec       	ldi	r24, 0xC8	; 200
    1fd2:	92 eb       	ldi	r25, 0xB2	; 178
    1fd4:	9f 93       	push	r25
    1fd6:	8f 93       	push	r24
    1fd8:	ce 01       	movw	r24, r28
    1fda:	01 96       	adiw	r24, 0x01	; 1
    1fdc:	9f 93       	push	r25
    1fde:	8f 93       	push	r24
    1fe0:	08 96       	adiw	r24, 0x08	; 8
    1fe2:	9f 93       	push	r25
    1fe4:	8f 93       	push	r24
    1fe6:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			break;
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	41 c0       	rjmp	.+130    	; 0x207a <open_PNEU+0x132>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1ff8:	6e e6       	ldi	r22, 0x6E	; 110
    1ffa:	88 e8       	ldi	r24, 0x88	; 136
    1ffc:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    2000:	8d ec       	ldi	r24, 0xCD	; 205
    2002:	92 eb       	ldi	r25, 0xB2	; 178
    2004:	9f 93       	push	r25
    2006:	8f 93       	push	r24
    2008:	ce 01       	movw	r24, r28
    200a:	01 96       	adiw	r24, 0x01	; 1
    200c:	9f 93       	push	r25
    200e:	8f 93       	push	r24
    2010:	08 96       	adiw	r24, 0x08	; 8
    2012:	9f 93       	push	r25
    2014:	8f 93       	push	r24
    2016:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			break;
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	29 c0       	rjmp	.+82     	; 0x207a <open_PNEU+0x132>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    2028:	6e ec       	ldi	r22, 0xCE	; 206
    202a:	82 e2       	ldi	r24, 0x22	; 34
    202c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    2030:	83 ed       	ldi	r24, 0xD3	; 211
    2032:	92 eb       	ldi	r25, 0xB2	; 178
    2034:	9f 93       	push	r25
    2036:	8f 93       	push	r24
    2038:	ce 01       	movw	r24, r28
    203a:	01 96       	adiw	r24, 0x01	; 1
    203c:	9f 93       	push	r25
    203e:	8f 93       	push	r24
    2040:	08 96       	adiw	r24, 0x08	; 8
    2042:	9f 93       	push	r25
    2044:	8f 93       	push	r24
    2046:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			break;
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	11 c0       	rjmp	.+34     	; 0x207a <open_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "open_PNEU bad object");
    2058:	66 e0       	ldi	r22, 0x06	; 6
    205a:	73 eb       	ldi	r23, 0xB3	; 179
    205c:	85 ef       	ldi	r24, 0xF5	; 245
    205e:	91 e0       	ldi	r25, 0x01	; 1
    2060:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
			strcpy(outbuf, "open what?");
    2064:	8b e0       	ldi	r24, 0x0B	; 11
    2066:	eb e1       	ldi	r30, 0x1B	; 27
    2068:	f3 eb       	ldi	r31, 0xB3	; 179
    206a:	de 01       	movw	r26, r28
    206c:	19 96       	adiw	r26, 0x09	; 9
    206e:	01 90       	ld	r0, Z+
    2070:	0d 92       	st	X+, r0
    2072:	8a 95       	dec	r24
    2074:	e1 f7       	brne	.-8      	; 0x206e <open_PNEU+0x126>
			return(ERROR);
    2076:	83 e6       	ldi	r24, 0x63	; 99
    2078:	0b c0       	rjmp	.+22     	; 0x2090 <open_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    2080:	41 e0       	ldi	r20, 0x01	; 1
    2082:	be 01       	movw	r22, r28
    2084:	67 5f       	subi	r22, 0xF7	; 247
    2086:	7f 4f       	sbci	r23, 0xFF	; 255
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <writestr_OLED>
	return(NOERROR);
    208e:	80 e0       	ldi	r24, 0x00	; 0

}
    2090:	69 96       	adiw	r28, 0x19	; 25
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	08 95       	ret

0000209c <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    209c:	1f 92       	push	r1
    209e:	0f 92       	push	r0
    20a0:	0f b6       	in	r0, 0x3f	; 63
    20a2:	0f 92       	push	r0
    20a4:	11 24       	eor	r1, r1
    20a6:	2f 93       	push	r18
    20a8:	3f 93       	push	r19
    20aa:	4f 93       	push	r20
    20ac:	5f 93       	push	r21
    20ae:	6f 93       	push	r22
    20b0:	7f 93       	push	r23
    20b2:	8f 93       	push	r24
    20b4:	9f 93       	push	r25
    20b6:	af 93       	push	r26
    20b8:	bf 93       	push	r27
    20ba:	ef 93       	push	r30
    20bc:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// MCP23008 interrupt
    20be:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    20c2:	88 23       	and	r24, r24
    20c4:	4c f4       	brge	.+18     	; 0x20d8 <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    20c6:	80 e8       	ldi	r24, 0x80	; 128
    20c8:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    20cc:	68 e0       	ldi	r22, 0x08	; 8
    20ce:	81 e2       	ldi	r24, 0x21	; 33
    20d0:	0e 94 ac 0a 	call	0x1558	; 0x1558 <read_MCP23008>
    20d4:	80 93 1a 2a 	sts	0x2A1A, r24	; 0x802a1a <pneuState>
	}

}
    20d8:	ff 91       	pop	r31
    20da:	ef 91       	pop	r30
    20dc:	bf 91       	pop	r27
    20de:	af 91       	pop	r26
    20e0:	9f 91       	pop	r25
    20e2:	8f 91       	pop	r24
    20e4:	7f 91       	pop	r23
    20e6:	6f 91       	pop	r22
    20e8:	5f 91       	pop	r21
    20ea:	4f 91       	pop	r20
    20ec:	3f 91       	pop	r19
    20ee:	2f 91       	pop	r18
    20f0:	0f 90       	pop	r0
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	0f 90       	pop	r0
    20f6:	1f 90       	pop	r1
    20f8:	18 95       	reti

000020fa <init_PORTS>:

/*------------------------------------------------------------------------------
void init_PORTS(void)
------------------------------------------------------------------------------*/
void init_PORTS(void)
{
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29

	PORTB.DIRSET = PIN2_bm;		// Beeper
    20fe:	e0 e2       	ldi	r30, 0x20	; 32
    2100:	f4 e0       	ldi	r31, 0x04	; 4
    2102:	84 e0       	ldi	r24, 0x04	; 4
    2104:	81 83       	std	Z+1, r24	; 0x01
	PORTF.DIRCLR = PIN2_bm;		// specID jumper
    2106:	a0 ea       	ldi	r26, 0xA0	; 160
    2108:	b4 e0       	ldi	r27, 0x04	; 4
    210a:	12 96       	adiw	r26, 0x02	; 2
    210c:	8c 93       	st	X, r24
    210e:	12 97       	sbiw	r26, 0x02	; 2
	PORTF.DIRSET = PIN5_bm;		// On-board LED
    2110:	80 e2       	ldi	r24, 0x20	; 32
    2112:	11 96       	adiw	r26, 0x01	; 1
    2114:	8c 93       	st	X, r24
    2116:	11 97       	sbiw	r26, 0x01	; 1
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton
    2118:	9b e0       	ldi	r25, 0x0B	; 11
    211a:	56 96       	adiw	r26, 0x16	; 22
    211c:	9c 93       	st	X, r25
	PORTC.OUTCLR = PIN3_bm;		// Reset the XPort
    211e:	a0 e4       	ldi	r26, 0x40	; 64
    2120:	b4 e0       	ldi	r27, 0x04	; 4
    2122:	98 e0       	ldi	r25, 0x08	; 8
    2124:	16 96       	adiw	r26, 0x06	; 6
    2126:	9c 93       	st	X, r25
    2128:	16 97       	sbiw	r26, 0x06	; 6
	PORTC.DIRSET = PIN3_bm;		// Set XPort reset pin as output
    212a:	11 96       	adiw	r26, 0x01	; 1
    212c:	9c 93       	st	X, r25
    212e:	11 97       	sbiw	r26, 0x01	; 1
    2130:	cd e8       	ldi	r28, 0x8D	; 141
    2132:	d0 e2       	ldi	r29, 0x20	; 32
    2134:	21 97       	sbiw	r28, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <init_PORTS+0x3a>
    2138:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;		// Enable the XPort
    213a:	15 96       	adiw	r26, 0x05	; 5
    213c:	9c 93       	st	X, r25

PORTB.DIRSET = PIN5_bm;	// test pin
    213e:	81 83       	std	Z+1, r24	; 0x01
PORTB.OUTCLR = PIN5_bm;
    2140:	86 83       	std	Z+6, r24	; 0x06

}
    2142:	df 91       	pop	r29
    2144:	cf 91       	pop	r28
    2146:	08 95       	ret

00002148 <report>:

	Returns:
		ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    2148:	2f 92       	push	r2
    214a:	3f 92       	push	r3
    214c:	4f 92       	push	r4
    214e:	5f 92       	push	r5
    2150:	6f 92       	push	r6
    2152:	7f 92       	push	r7
    2154:	8f 92       	push	r8
    2156:	9f 92       	push	r9
    2158:	af 92       	push	r10
    215a:	bf 92       	push	r11
    215c:	cf 92       	push	r12
    215e:	df 92       	push	r13
    2160:	ef 92       	push	r14
    2162:	ff 92       	push	r15
    2164:	0f 93       	push	r16
    2166:	1f 93       	push	r17
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	cf 5a       	subi	r28, 0xAF	; 175
    2172:	d3 40       	sbci	r29, 0x03	; 3
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE], version[11];
	char currenttime[20], lastsettime[20], boottime[20], encsavetime[20];
	char shutter, left, right, air, mlimit, mdir;
	const char format_ENV[] = "ENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
    2178:	95 e4       	ldi	r25, 0x45	; 69
    217a:	e9 eb       	ldi	r30, 0xB9	; 185
    217c:	f4 eb       	ldi	r31, 0xB4	; 180
    217e:	de 01       	movw	r26, r28
    2180:	a2 5a       	subi	r26, 0xA2	; 162
    2182:	be 4f       	sbci	r27, 0xFE	; 254
    2184:	01 90       	ld	r0, Z+
    2186:	0d 92       	st	X+, r0
    2188:	9a 95       	dec	r25
    218a:	e1 f7       	brne	.-8      	; 0x2184 <report+0x3c>
	const char format_MTR[] = "MTR,%s,%c,%ld,um,%ld,um/s,%d,mA,%c,dir,%c,lim,%s";
    218c:	91 e3       	ldi	r25, 0x31	; 49
    218e:	ee ef       	ldi	r30, 0xFE	; 254
    2190:	f4 eb       	ldi	r31, 0xB4	; 180
    2192:	de 01       	movw	r26, r28
    2194:	ad 55       	subi	r26, 0x5D	; 93
    2196:	be 4f       	sbci	r27, 0xFE	; 254
    2198:	01 90       	ld	r0, Z+
    219a:	0d 92       	st	X+, r0
    219c:	9a 95       	dec	r25
    219e:	e1 f7       	brne	.-8      	; 0x2198 <report+0x50>
	const char format_MT0[] = "ETI,%s,Mtr%c,%3.1f,V,%3.1f,C,%s,encSaveTime,%s";
    21a0:	9f e2       	ldi	r25, 0x2F	; 47
    21a2:	ef e2       	ldi	r30, 0x2F	; 47
    21a4:	f5 eb       	ldi	r31, 0xB5	; 181
    21a6:	de 01       	movw	r26, r28
    21a8:	ac 52       	subi	r26, 0x2C	; 44
    21aa:	be 4f       	sbci	r27, 0xFE	; 254
    21ac:	01 90       	ld	r0, Z+
    21ae:	0d 92       	st	X+, r0
    21b0:	9a 95       	dec	r25
    21b2:	e1 f7       	brne	.-8      	; 0x21ac <report+0x64>
	const char format_MT1[] = "PID,%s,Mtr%c,%.2f,P,%.3f,I,%.2f,D,%ld,maxInt,%s";
    21b4:	90 e3       	ldi	r25, 0x30	; 48
    21b6:	ee e5       	ldi	r30, 0x5E	; 94
    21b8:	f5 eb       	ldi	r31, 0xB5	; 181
    21ba:	de 01       	movw	r26, r28
    21bc:	ad 5f       	subi	r26, 0xFD	; 253
    21be:	bd 4f       	sbci	r27, 0xFD	; 253
    21c0:	01 90       	ld	r0, Z+
    21c2:	0d 92       	st	X+, r0
    21c4:	9a 95       	dec	r25
    21c6:	e1 f7       	brne	.-8      	; 0x21c0 <report+0x78>
	const char format_MT2[] = "DMM,%s,Mtr%c,%ld,dead,%ld,minP,%ld,maxP,%ld,qpps,%s";
    21c8:	94 e3       	ldi	r25, 0x34	; 52
    21ca:	ee e8       	ldi	r30, 0x8E	; 142
    21cc:	f5 eb       	ldi	r31, 0xB5	; 181
    21ce:	de 01       	movw	r26, r28
    21d0:	ad 5c       	subi	r26, 0xCD	; 205
    21d2:	bd 4f       	sbci	r27, 0xFD	; 253
    21d4:	01 90       	ld	r0, Z+
    21d6:	0d 92       	st	X+, r0
    21d8:	9a 95       	dec	r25
    21da:	e1 f7       	brne	.-8      	; 0x21d4 <report+0x8c>
	const char format_MT3[] = "MTC,%s,Mtr%c,%ld,mA,0x%02x,S4,%s";
    21dc:	91 e2       	ldi	r25, 0x21	; 33
    21de:	e2 ec       	ldi	r30, 0xC2	; 194
    21e0:	f5 eb       	ldi	r31, 0xB5	; 181
    21e2:	de 01       	movw	r26, r28
    21e4:	a9 59       	subi	r26, 0x99	; 153
    21e6:	bd 4f       	sbci	r27, 0xFD	; 253
    21e8:	01 90       	ld	r0, Z+
    21ea:	0d 92       	st	X+, r0
    21ec:	9a 95       	dec	r25
    21ee:	e1 f7       	brne	.-8      	; 0x21e8 <report+0xa0>
	const char format_ORI[] = "ORI,%s,%3.1f,%3.1f,%3.1f,%s";
    21f0:	9c e1       	ldi	r25, 0x1C	; 28
    21f2:	e3 ee       	ldi	r30, 0xE3	; 227
    21f4:	f5 eb       	ldi	r31, 0xB5	; 181
    21f6:	de 01       	movw	r26, r28
    21f8:	a8 57       	subi	r26, 0x78	; 120
    21fa:	bd 4f       	sbci	r27, 0xFD	; 253
    21fc:	01 90       	ld	r0, Z+
    21fe:	0d 92       	st	X+, r0
    2200:	9a 95       	dec	r25
    2202:	e1 f7       	brne	.-8      	; 0x21fc <report+0xb4>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    2204:	92 e1       	ldi	r25, 0x12	; 18
    2206:	ef ef       	ldi	r30, 0xFF	; 255
    2208:	f5 eb       	ldi	r31, 0xB5	; 181
    220a:	de 01       	movw	r26, r28
    220c:	ac 55       	subi	r26, 0x5C	; 92
    220e:	bd 4f       	sbci	r27, 0xFD	; 253
    2210:	01 90       	ld	r0, Z+
    2212:	0d 92       	st	X+, r0
    2214:	9a 95       	dec	r25
    2216:	e1 f7       	brne	.-8      	; 0x2210 <report+0xc8>
	const char format_PNU[] = "PNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    2218:	9d e2       	ldi	r25, 0x2D	; 45
    221a:	e1 e1       	ldi	r30, 0x11	; 17
    221c:	f6 eb       	ldi	r31, 0xB6	; 182
    221e:	de 01       	movw	r26, r28
    2220:	aa 54       	subi	r26, 0x4A	; 74
    2222:	bd 4f       	sbci	r27, 0xFD	; 253
    2224:	01 90       	ld	r0, Z+
    2226:	0d 92       	st	X+, r0
    2228:	9a 95       	dec	r25
    222a:	e1 f7       	brne	.-8      	; 0x2224 <report+0xdc>
	const char dformat_PN1[] = "Left:%c   Right:%c";
    222c:	93 e1       	ldi	r25, 0x13	; 19
    222e:	ee e3       	ldi	r30, 0x3E	; 62
    2230:	f6 eb       	ldi	r31, 0xB6	; 182
    2232:	de 01       	movw	r26, r28
    2234:	ad 51       	subi	r26, 0x1D	; 29
    2236:	bd 4f       	sbci	r27, 0xFD	; 253
    2238:	01 90       	ld	r0, Z+
    223a:	0d 92       	st	X+, r0
    223c:	9a 95       	dec	r25
    223e:	e1 f7       	brne	.-8      	; 0x2238 <report+0xf0>
	const char dformat_PN2[] = "Shutter:%c  Air:%c";
    2240:	93 e1       	ldi	r25, 0x13	; 19
    2242:	e1 e5       	ldi	r30, 0x51	; 81
    2244:	f6 eb       	ldi	r31, 0xB6	; 182
    2246:	de 01       	movw	r26, r28
    2248:	aa 50       	subi	r26, 0x0A	; 10
    224a:	bd 4f       	sbci	r27, 0xFD	; 253
    224c:	01 90       	ld	r0, Z+
    224e:	0d 92       	st	X+, r0
    2250:	9a 95       	dec	r25
    2252:	e1 f7       	brne	.-8      	; 0x224c <report+0x104>
	const char format_TIM[] = "TIM,%s,%s,set,%s,boot,%s";
    2254:	99 e1       	ldi	r25, 0x19	; 25
    2256:	e4 e6       	ldi	r30, 0x64	; 100
    2258:	f6 eb       	ldi	r31, 0xB6	; 182
    225a:	de 01       	movw	r26, r28
    225c:	a7 5f       	subi	r26, 0xF7	; 247
    225e:	bc 4f       	sbci	r27, 0xFC	; 252
    2260:	01 90       	ld	r0, Z+
    2262:	0d 92       	st	X+, r0
    2264:	9a 95       	dec	r25
    2266:	e1 f7       	brne	.-8      	; 0x2260 <report+0x118>
	const char format_VAC[] = "VAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    2268:	95 e2       	ldi	r25, 0x25	; 37
    226a:	ed e7       	ldi	r30, 0x7D	; 125
    226c:	f6 eb       	ldi	r31, 0xB6	; 182
    226e:	de 01       	movw	r26, r28
    2270:	ae 5d       	subi	r26, 0xDE	; 222
    2272:	bc 4f       	sbci	r27, 0xFC	; 252
    2274:	01 90       	ld	r0, Z+
    2276:	0d 92       	st	X+, r0
    2278:	9a 95       	dec	r25
    227a:	e1 f7       	brne	.-8      	; 0x2274 <report+0x12c>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    227c:	9d e0       	ldi	r25, 0x0D	; 13
    227e:	e2 ea       	ldi	r30, 0xA2	; 162
    2280:	f6 eb       	ldi	r31, 0xB6	; 182
    2282:	de 01       	movw	r26, r28
    2284:	a9 5b       	subi	r26, 0xB9	; 185
    2286:	bc 4f       	sbci	r27, 0xFC	; 252
    2288:	01 90       	ld	r0, Z+
    228a:	0d 92       	st	X+, r0
    228c:	9a 95       	dec	r25
    228e:	e1 f7       	brne	.-8      	; 0x2288 <report+0x140>
	const char format_VER[] = "VER,%s,%s,%s";
    2290:	9d e0       	ldi	r25, 0x0D	; 13
    2292:	ef ea       	ldi	r30, 0xAF	; 175
    2294:	f6 eb       	ldi	r31, 0xB6	; 182
    2296:	de 01       	movw	r26, r28
    2298:	ac 5a       	subi	r26, 0xAC	; 172
    229a:	bc 4f       	sbci	r27, 0xFC	; 252
    229c:	01 90       	ld	r0, Z+
    229e:	0d 92       	st	X+, r0
    22a0:	9a 95       	dec	r25
    22a2:	e1 f7       	brne	.-8      	; 0x229c <report+0x154>
	uint16_t motorCurrent;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	PID pid;

	switch(pcmd[cstack].cobject) {
    22a4:	08 2f       	mov	r16, r24
    22a6:	10 e0       	ldi	r17, 0x00	; 0
    22a8:	84 e3       	ldi	r24, 0x34	; 52
    22aa:	80 9f       	mul	r24, r16
    22ac:	f0 01       	movw	r30, r0
    22ae:	81 9f       	mul	r24, r17
    22b0:	f0 0d       	add	r31, r0
    22b2:	11 24       	eor	r1, r1
    22b4:	e1 5f       	subi	r30, 0xF1	; 241
    22b6:	f7 4d       	sbci	r31, 0xD7	; 215
    22b8:	e1 81       	ldd	r30, Z+1	; 0x01
    22ba:	8e 2f       	mov	r24, r30
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	fc 01       	movw	r30, r24
    22c0:	e1 54       	subi	r30, 0x41	; 65
    22c2:	f1 09       	sbc	r31, r1
    22c4:	e6 33       	cpi	r30, 0x36	; 54
    22c6:	f1 05       	cpc	r31, r1
    22c8:	08 f0       	brcs	.+2      	; 0x22cc <report+0x184>
    22ca:	32 c7       	rjmp	.+3684   	; 0x3130 <report+0xfe8>
    22cc:	e3 58       	subi	r30, 0x83	; 131
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	0c 94 82 35 	jmp	0x6b04	; 0x6b04 <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    22d4:	ce 01       	movw	r24, r28
    22d6:	86 5f       	subi	r24, 0xF6	; 246
    22d8:	9e 4f       	sbci	r25, 0xFE	; 254
    22da:	0e 94 46 07 	call	0xe8c	; 0xe8c <get_time>
			controller = pcmd[cstack].cobject + 63;
    22de:	84 e3       	ldi	r24, 0x34	; 52
    22e0:	80 9f       	mul	r24, r16
    22e2:	f0 01       	movw	r30, r0
    22e4:	81 9f       	mul	r24, r17
    22e6:	f0 0d       	add	r31, r0
    22e8:	11 24       	eor	r1, r1
    22ea:	e1 5f       	subi	r30, 0xF1	; 241
    22ec:	f7 4d       	sbci	r31, 0xD7	; 215
    22ee:	d1 80       	ldd	r13, Z+1	; 0x01
    22f0:	0f 2e       	mov	r0, r31
    22f2:	ff e3       	ldi	r31, 0x3F	; 63
    22f4:	ef 2e       	mov	r14, r31
    22f6:	f0 2d       	mov	r31, r0
    22f8:	ed 0c       	add	r14, r13

			if (get_MOTOR_FLOAT(controller, READMAINVOLTAGE, &voltage) == ERROR) {
    22fa:	ae 01       	movw	r20, r28
    22fc:	4e 58       	subi	r20, 0x8E	; 142
    22fe:	5c 4f       	sbci	r21, 0xFC	; 252
    2300:	68 e1       	ldi	r22, 0x18	; 24
    2302:	8e 2d       	mov	r24, r14
    2304:	0e 94 9b 1b 	call	0x3736	; 0x3736 <get_MOTOR_FLOAT>
    2308:	f8 2e       	mov	r15, r24
    230a:	83 e6       	ldi	r24, 0x63	; 99
    230c:	f8 12       	cpse	r15, r24
    230e:	07 c0       	rjmp	.+14     	; 0x231e <report+0x1d6>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT volts error");
    2310:	6e e2       	ldi	r22, 0x2E	; 46
    2312:	73 eb       	ldi	r23, 0xB3	; 179
    2314:	86 e3       	ldi	r24, 0x36	; 54
    2316:	91 e0       	ldi	r25, 0x01	; 1
    2318:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				return(ERROR);
    231c:	13 c7       	rjmp	.+3622   	; 0x3144 <report+0xffc>
			}

			if (get_FRAM_ENCSAVETIME(encsavetime) == ERROR) {
    231e:	ce 01       	movw	r24, r28
    2320:	8a 5b       	subi	r24, 0xBA	; 186
    2322:	9e 4f       	sbci	r25, 0xFE	; 254
    2324:	0e 94 df 18 	call	0x31be	; 0x31be <get_FRAM_ENCSAVETIME>
    2328:	f8 2e       	mov	r15, r24
    232a:	93 e6       	ldi	r25, 0x63	; 99
    232c:	89 13       	cpse	r24, r25
    232e:	11 c0       	rjmp	.+34     	; 0x2352 <report+0x20a>
				sprintf(outbuf, "report: get_FRAM_ENCSAVEIME error");
    2330:	82 e2       	ldi	r24, 0x22	; 34
    2332:	e2 e5       	ldi	r30, 0x52	; 82
    2334:	f3 eb       	ldi	r31, 0xB3	; 179
    2336:	de 01       	movw	r26, r28
    2338:	11 96       	adiw	r26, 0x01	; 1
    233a:	01 90       	ld	r0, Z+
    233c:	0d 92       	st	X+, r0
    233e:	8a 95       	dec	r24
    2340:	e1 f7       	brne	.-8      	; 0x233a <report+0x1f2>
				printError(ERR_MTR, outbuf);
    2342:	be 01       	movw	r22, r28
    2344:	6f 5f       	subi	r22, 0xFF	; 255
    2346:	7f 4f       	sbci	r23, 0xFF	; 255
    2348:	86 e3       	ldi	r24, 0x36	; 54
    234a:	91 e0       	ldi	r25, 0x01	; 1
    234c:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				return(ERROR);
    2350:	f9 c6       	rjmp	.+3570   	; 0x3144 <report+0xffc>
			}

			if (get_MOTOR_FLOAT(controller, READTEMPERATURE, &t0) == ERROR) {
    2352:	ae 01       	movw	r20, r28
    2354:	42 59       	subi	r20, 0x92	; 146
    2356:	5c 4f       	sbci	r21, 0xFC	; 252
    2358:	62 e5       	ldi	r22, 0x52	; 82
    235a:	8e 2d       	mov	r24, r14
    235c:	0e 94 9b 1b 	call	0x3736	; 0x3736 <get_MOTOR_FLOAT>
    2360:	f8 2e       	mov	r15, r24
    2362:	83 e6       	ldi	r24, 0x63	; 99
    2364:	f8 12       	cpse	r15, r24
    2366:	07 c0       	rjmp	.+14     	; 0x2376 <report+0x22e>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT temperature error");
    2368:	64 e7       	ldi	r22, 0x74	; 116
    236a:	73 eb       	ldi	r23, 0xB3	; 179
    236c:	86 e3       	ldi	r24, 0x36	; 54
    236e:	91 e0       	ldi	r25, 0x01	; 1
    2370:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				return(ERROR);
    2374:	e7 c6       	rjmp	.+3534   	; 0x3144 <report+0xffc>
			}

			if (get_MOTOR_MAXCURRENT(controller, &maxCurrent) == ERROR) {
    2376:	be 01       	movw	r22, r28
    2378:	66 59       	subi	r22, 0x96	; 150
    237a:	7c 4f       	sbci	r23, 0xFC	; 252
    237c:	8e 2d       	mov	r24, r14
    237e:	0e 94 0f 1c 	call	0x381e	; 0x381e <get_MOTOR_MAXCURRENT>
    2382:	f8 2e       	mov	r15, r24
    2384:	93 e6       	ldi	r25, 0x63	; 99
    2386:	89 13       	cpse	r24, r25
    2388:	07 c0       	rjmp	.+14     	; 0x2398 <report+0x250>
				printError(ERR_MTR, "report: get_MOTOR_MAXCURRENT error");
    238a:	6e e9       	ldi	r22, 0x9E	; 158
    238c:	73 eb       	ldi	r23, 0xB3	; 179
    238e:	86 e3       	ldi	r24, 0x36	; 54
    2390:	91 e0       	ldi	r25, 0x01	; 1
    2392:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				return(ERROR);
    2396:	d6 c6       	rjmp	.+3500   	; 0x3144 <report+0xffc>
			}

			if (get_MOTOR_S4MODE(controller, &s4mode) == ERROR) {
    2398:	be 01       	movw	r22, r28
    239a:	6f 59       	subi	r22, 0x9F	; 159
    239c:	7c 4f       	sbci	r23, 0xFC	; 252
    239e:	8e 2d       	mov	r24, r14
    23a0:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <get_MOTOR_S4MODE>
    23a4:	f8 2e       	mov	r15, r24
    23a6:	83 e6       	ldi	r24, 0x63	; 99
    23a8:	f8 12       	cpse	r15, r24
    23aa:	07 c0       	rjmp	.+14     	; 0x23ba <report+0x272>
				printError(ERR_MTR, "report: get_MOTOR_S4MODE error");
    23ac:	61 ec       	ldi	r22, 0xC1	; 193
    23ae:	73 eb       	ldi	r23, 0xB3	; 179
    23b0:	86 e3       	ldi	r24, 0x36	; 54
    23b2:	91 e0       	ldi	r25, 0x01	; 1
    23b4:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				return(ERROR);
    23b8:	c5 c6       	rjmp	.+3466   	; 0x3144 <report+0xffc>
			}

			if (get_MOTOR_PID(controller, &pid) == ERROR) {
    23ba:	be 01       	movw	r22, r28
    23bc:	6c 57       	subi	r22, 0x7C	; 124
    23be:	7c 4f       	sbci	r23, 0xFC	; 252
    23c0:	8e 2d       	mov	r24, r14
    23c2:	0e 94 a2 1c 	call	0x3944	; 0x3944 <get_MOTOR_PID>
    23c6:	f8 2e       	mov	r15, r24
    23c8:	93 e6       	ldi	r25, 0x63	; 99
    23ca:	89 13       	cpse	r24, r25
    23cc:	07 c0       	rjmp	.+14     	; 0x23dc <report+0x294>
				printError(ERR_MTR, "report: get_MOTOR_PID error");
    23ce:	60 ee       	ldi	r22, 0xE0	; 224
    23d0:	73 eb       	ldi	r23, 0xB3	; 179
    23d2:	86 e3       	ldi	r24, 0x36	; 54
    23d4:	91 e0       	ldi	r25, 0x01	; 1
    23d6:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				return(ERROR);
    23da:	b4 c6       	rjmp	.+3432   	; 0x3144 <report+0xffc>
			}

			sprintf(outbuf, format_MT0, currenttime, (char) (controller-63),
			voltage, t0, encsavetime, pcmd[cstack].cid);
    23dc:	24 e3       	ldi	r18, 0x34	; 52
    23de:	20 9f       	mul	r18, r16
    23e0:	c0 01       	movw	r24, r0
    23e2:	21 9f       	mul	r18, r17
    23e4:	90 0d       	add	r25, r0
    23e6:	11 24       	eor	r1, r1
    23e8:	8c 01       	movw	r16, r24
    23ea:	06 5c       	subi	r16, 0xC6	; 198
    23ec:	17 4d       	sbci	r17, 0xD7	; 215
			if (get_MOTOR_PID(controller, &pid) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_PID error");
				return(ERROR);
			}

			sprintf(outbuf, format_MT0, currenttime, (char) (controller-63),
    23ee:	1f 93       	push	r17
    23f0:	0f 93       	push	r16
    23f2:	ce 01       	movw	r24, r28
    23f4:	8a 5b       	subi	r24, 0xBA	; 186
    23f6:	9e 4f       	sbci	r25, 0xFE	; 254
    23f8:	9f 93       	push	r25
    23fa:	8f 93       	push	r24
    23fc:	cf 58       	subi	r28, 0x8F	; 143
    23fe:	dc 4f       	sbci	r29, 0xFC	; 252
    2400:	88 81       	ld	r24, Y
    2402:	c1 57       	subi	r28, 0x71	; 113
    2404:	d3 40       	sbci	r29, 0x03	; 3
    2406:	8f 93       	push	r24
    2408:	c0 59       	subi	r28, 0x90	; 144
    240a:	dc 4f       	sbci	r29, 0xFC	; 252
    240c:	88 81       	ld	r24, Y
    240e:	c0 57       	subi	r28, 0x70	; 112
    2410:	d3 40       	sbci	r29, 0x03	; 3
    2412:	8f 93       	push	r24
    2414:	c1 59       	subi	r28, 0x91	; 145
    2416:	dc 4f       	sbci	r29, 0xFC	; 252
    2418:	88 81       	ld	r24, Y
    241a:	cf 56       	subi	r28, 0x6F	; 111
    241c:	d3 40       	sbci	r29, 0x03	; 3
    241e:	8f 93       	push	r24
    2420:	c2 59       	subi	r28, 0x92	; 146
    2422:	dc 4f       	sbci	r29, 0xFC	; 252
    2424:	88 81       	ld	r24, Y
    2426:	ce 56       	subi	r28, 0x6E	; 110
    2428:	d3 40       	sbci	r29, 0x03	; 3
    242a:	8f 93       	push	r24
    242c:	cb 58       	subi	r28, 0x8B	; 139
    242e:	dc 4f       	sbci	r29, 0xFC	; 252
    2430:	88 81       	ld	r24, Y
    2432:	c5 57       	subi	r28, 0x75	; 117
    2434:	d3 40       	sbci	r29, 0x03	; 3
    2436:	8f 93       	push	r24
    2438:	cc 58       	subi	r28, 0x8C	; 140
    243a:	dc 4f       	sbci	r29, 0xFC	; 252
    243c:	88 81       	ld	r24, Y
    243e:	c4 57       	subi	r28, 0x74	; 116
    2440:	d3 40       	sbci	r29, 0x03	; 3
    2442:	8f 93       	push	r24
    2444:	cd 58       	subi	r28, 0x8D	; 141
    2446:	dc 4f       	sbci	r29, 0xFC	; 252
    2448:	88 81       	ld	r24, Y
    244a:	c3 57       	subi	r28, 0x73	; 115
    244c:	d3 40       	sbci	r29, 0x03	; 3
    244e:	8f 93       	push	r24
    2450:	ce 58       	subi	r28, 0x8E	; 142
    2452:	dc 4f       	sbci	r29, 0xFC	; 252
    2454:	88 81       	ld	r24, Y
    2456:	c2 57       	subi	r28, 0x72	; 114
    2458:	d3 40       	sbci	r29, 0x03	; 3
    245a:	8f 93       	push	r24
    245c:	1f 92       	push	r1
    245e:	df 92       	push	r13
    2460:	5e 01       	movw	r10, r28
    2462:	86 ef       	ldi	r24, 0xF6	; 246
    2464:	a8 1a       	sub	r10, r24
    2466:	8e ef       	ldi	r24, 0xFE	; 254
    2468:	b8 0a       	sbc	r11, r24
    246a:	bf 92       	push	r11
    246c:	af 92       	push	r10
    246e:	ce 01       	movw	r24, r28
    2470:	8c 52       	subi	r24, 0x2C	; 44
    2472:	9e 4f       	sbci	r25, 0xFE	; 254
    2474:	9f 93       	push	r25
    2476:	8f 93       	push	r24
    2478:	83 5d       	subi	r24, 0xD3	; 211
    247a:	91 40       	sbci	r25, 0x01	; 1
    247c:	7c 01       	movw	r14, r24
    247e:	9f 93       	push	r25
    2480:	8f 93       	push	r24
    2482:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			voltage, t0, encsavetime, pcmd[cstack].cid);
			printLine(outbuf);
    2486:	c7 01       	movw	r24, r14
    2488:	0e 94 80 03 	call	0x700	; 0x700 <printLine>

			sprintf(outbuf, format_MT3, currenttime, (char) (controller-63),
    248c:	1f 93       	push	r17
    248e:	0f 93       	push	r16
    2490:	cf 59       	subi	r28, 0x9F	; 159
    2492:	dc 4f       	sbci	r29, 0xFC	; 252
    2494:	88 81       	ld	r24, Y
    2496:	c1 56       	subi	r28, 0x61	; 97
    2498:	d3 40       	sbci	r29, 0x03	; 3
    249a:	1f 92       	push	r1
    249c:	8f 93       	push	r24
    249e:	c3 59       	subi	r28, 0x93	; 147
    24a0:	dc 4f       	sbci	r29, 0xFC	; 252
    24a2:	88 81       	ld	r24, Y
    24a4:	cd 56       	subi	r28, 0x6D	; 109
    24a6:	d3 40       	sbci	r29, 0x03	; 3
    24a8:	8f 93       	push	r24
    24aa:	c4 59       	subi	r28, 0x94	; 148
    24ac:	dc 4f       	sbci	r29, 0xFC	; 252
    24ae:	88 81       	ld	r24, Y
    24b0:	cc 56       	subi	r28, 0x6C	; 108
    24b2:	d3 40       	sbci	r29, 0x03	; 3
    24b4:	8f 93       	push	r24
    24b6:	c5 59       	subi	r28, 0x95	; 149
    24b8:	dc 4f       	sbci	r29, 0xFC	; 252
    24ba:	88 81       	ld	r24, Y
    24bc:	cb 56       	subi	r28, 0x6B	; 107
    24be:	d3 40       	sbci	r29, 0x03	; 3
    24c0:	8f 93       	push	r24
    24c2:	c6 59       	subi	r28, 0x96	; 150
    24c4:	dc 4f       	sbci	r29, 0xFC	; 252
    24c6:	88 81       	ld	r24, Y
    24c8:	ca 56       	subi	r28, 0x6A	; 106
    24ca:	d3 40       	sbci	r29, 0x03	; 3
    24cc:	8f 93       	push	r24
    24ce:	1f 92       	push	r1
    24d0:	df 92       	push	r13
    24d2:	bf 92       	push	r11
    24d4:	af 92       	push	r10
    24d6:	ce 01       	movw	r24, r28
    24d8:	89 59       	subi	r24, 0x99	; 153
    24da:	9d 4f       	sbci	r25, 0xFD	; 253
    24dc:	9f 93       	push	r25
    24de:	8f 93       	push	r24
    24e0:	ff 92       	push	r15
    24e2:	ef 92       	push	r14
    24e4:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			maxCurrent, s4mode, pcmd[cstack].cid);
			printLine(outbuf);
    24e8:	cd bf       	out	0x3d, r28	; 61
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	c7 01       	movw	r24, r14
    24ee:	0e 94 80 03 	call	0x700	; 0x700 <printLine>

			sprintf(outbuf, format_MT1, currenttime, (char) (controller-63),
			pid.p, pid.i, pid.d, pid.maxI, pcmd[cstack].cid);
    24f2:	c4 57       	subi	r28, 0x74	; 116
    24f4:	dc 4f       	sbci	r29, 0xFC	; 252
    24f6:	e8 81       	ld	r30, Y
    24f8:	cc 58       	subi	r28, 0x8C	; 140
    24fa:	d3 40       	sbci	r29, 0x03	; 3
    24fc:	c3 57       	subi	r28, 0x73	; 115
    24fe:	dc 4f       	sbci	r29, 0xFC	; 252
    2500:	f8 81       	ld	r31, Y
    2502:	cd 58       	subi	r28, 0x8D	; 141
    2504:	d3 40       	sbci	r29, 0x03	; 3
    2506:	c2 57       	subi	r28, 0x72	; 114
    2508:	dc 4f       	sbci	r29, 0xFC	; 252
    250a:	a8 81       	ld	r26, Y
    250c:	ce 58       	subi	r28, 0x8E	; 142
    250e:	d3 40       	sbci	r29, 0x03	; 3
    2510:	c1 57       	subi	r28, 0x71	; 113
    2512:	dc 4f       	sbci	r29, 0xFC	; 252
    2514:	b8 81       	ld	r27, Y
    2516:	cf 58       	subi	r28, 0x8F	; 143
    2518:	d3 40       	sbci	r29, 0x03	; 3
    251a:	c8 57       	subi	r28, 0x78	; 120
    251c:	dc 4f       	sbci	r29, 0xFC	; 252
    251e:	48 81       	ld	r20, Y
    2520:	c8 58       	subi	r28, 0x88	; 136
    2522:	d3 40       	sbci	r29, 0x03	; 3
    2524:	c7 57       	subi	r28, 0x77	; 119
    2526:	dc 4f       	sbci	r29, 0xFC	; 252
    2528:	58 81       	ld	r21, Y
    252a:	c9 58       	subi	r28, 0x89	; 137
    252c:	d3 40       	sbci	r29, 0x03	; 3
    252e:	c6 57       	subi	r28, 0x76	; 118
    2530:	dc 4f       	sbci	r29, 0xFC	; 252
    2532:	68 81       	ld	r22, Y
    2534:	ca 58       	subi	r28, 0x8A	; 138
    2536:	d3 40       	sbci	r29, 0x03	; 3
    2538:	c5 57       	subi	r28, 0x75	; 117
    253a:	dc 4f       	sbci	r29, 0xFC	; 252
    253c:	78 81       	ld	r23, Y
    253e:	cb 58       	subi	r28, 0x8B	; 139
    2540:	d3 40       	sbci	r29, 0x03	; 3
    2542:	cc 57       	subi	r28, 0x7C	; 124
    2544:	dc 4f       	sbci	r29, 0xFC	; 252
    2546:	88 81       	ld	r24, Y
    2548:	c4 58       	subi	r28, 0x84	; 132
    254a:	d3 40       	sbci	r29, 0x03	; 3
    254c:	cb 57       	subi	r28, 0x7B	; 123
    254e:	dc 4f       	sbci	r29, 0xFC	; 252
    2550:	98 81       	ld	r25, Y
    2552:	c5 58       	subi	r28, 0x85	; 133
    2554:	d3 40       	sbci	r29, 0x03	; 3
    2556:	ca 57       	subi	r28, 0x7A	; 122
    2558:	dc 4f       	sbci	r29, 0xFC	; 252
    255a:	28 81       	ld	r18, Y
    255c:	c6 58       	subi	r28, 0x86	; 134
    255e:	d3 40       	sbci	r29, 0x03	; 3
    2560:	c9 57       	subi	r28, 0x79	; 121
    2562:	dc 4f       	sbci	r29, 0xFC	; 252
    2564:	38 81       	ld	r19, Y
    2566:	c7 58       	subi	r28, 0x87	; 135
    2568:	d3 40       	sbci	r29, 0x03	; 3

			sprintf(outbuf, format_MT3, currenttime, (char) (controller-63),
			maxCurrent, s4mode, pcmd[cstack].cid);
			printLine(outbuf);

			sprintf(outbuf, format_MT1, currenttime, (char) (controller-63),
    256a:	1f 93       	push	r17
    256c:	0f 93       	push	r16
    256e:	cd 56       	subi	r28, 0x6D	; 109
    2570:	dc 4f       	sbci	r29, 0xFC	; 252
    2572:	c8 80       	ld	r12, Y
    2574:	c3 59       	subi	r28, 0x93	; 147
    2576:	d3 40       	sbci	r29, 0x03	; 3
    2578:	cf 92       	push	r12
    257a:	ce 56       	subi	r28, 0x6E	; 110
    257c:	dc 4f       	sbci	r29, 0xFC	; 252
    257e:	c8 80       	ld	r12, Y
    2580:	c2 59       	subi	r28, 0x92	; 146
    2582:	d3 40       	sbci	r29, 0x03	; 3
    2584:	cf 92       	push	r12
    2586:	cf 56       	subi	r28, 0x6F	; 111
    2588:	dc 4f       	sbci	r29, 0xFC	; 252
    258a:	c8 80       	ld	r12, Y
    258c:	c1 59       	subi	r28, 0x91	; 145
    258e:	d3 40       	sbci	r29, 0x03	; 3
    2590:	cf 92       	push	r12
    2592:	c0 57       	subi	r28, 0x70	; 112
    2594:	dc 4f       	sbci	r29, 0xFC	; 252
    2596:	c8 80       	ld	r12, Y
    2598:	c0 59       	subi	r28, 0x90	; 144
    259a:	d3 40       	sbci	r29, 0x03	; 3
    259c:	cf 92       	push	r12
    259e:	bf 93       	push	r27
    25a0:	af 93       	push	r26
    25a2:	ff 93       	push	r31
    25a4:	ef 93       	push	r30
    25a6:	7f 93       	push	r23
    25a8:	6f 93       	push	r22
    25aa:	5f 93       	push	r21
    25ac:	4f 93       	push	r20
    25ae:	3f 93       	push	r19
    25b0:	2f 93       	push	r18
    25b2:	9f 93       	push	r25
    25b4:	8f 93       	push	r24
    25b6:	1f 92       	push	r1
    25b8:	df 92       	push	r13
    25ba:	bf 92       	push	r11
    25bc:	af 92       	push	r10
    25be:	ce 01       	movw	r24, r28
    25c0:	8d 5f       	subi	r24, 0xFD	; 253
    25c2:	9d 4f       	sbci	r25, 0xFD	; 253
    25c4:	9f 93       	push	r25
    25c6:	8f 93       	push	r24
    25c8:	ff 92       	push	r15
    25ca:	ef 92       	push	r14
    25cc:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			pid.p, pid.i, pid.d, pid.maxI, pcmd[cstack].cid);
			printLine(outbuf);
    25d0:	c7 01       	movw	r24, r14
    25d2:	0e 94 80 03 	call	0x700	; 0x700 <printLine>

			sprintf(outbuf, format_MT2, currenttime, (char) (controller-63),
    25d6:	1f 93       	push	r17
    25d8:	0f 93       	push	r16
    25da:	cd 55       	subi	r28, 0x5D	; 93
    25dc:	dc 4f       	sbci	r29, 0xFC	; 252
    25de:	88 81       	ld	r24, Y
    25e0:	c3 5a       	subi	r28, 0xA3	; 163
    25e2:	d3 40       	sbci	r29, 0x03	; 3
    25e4:	8f 93       	push	r24
    25e6:	ce 55       	subi	r28, 0x5E	; 94
    25e8:	dc 4f       	sbci	r29, 0xFC	; 252
    25ea:	88 81       	ld	r24, Y
    25ec:	c2 5a       	subi	r28, 0xA2	; 162
    25ee:	d3 40       	sbci	r29, 0x03	; 3
    25f0:	8f 93       	push	r24
    25f2:	cf 55       	subi	r28, 0x5F	; 95
    25f4:	dc 4f       	sbci	r29, 0xFC	; 252
    25f6:	88 81       	ld	r24, Y
    25f8:	c1 5a       	subi	r28, 0xA1	; 161
    25fa:	d3 40       	sbci	r29, 0x03	; 3
    25fc:	8f 93       	push	r24
    25fe:	c0 56       	subi	r28, 0x60	; 96
    2600:	dc 4f       	sbci	r29, 0xFC	; 252
    2602:	88 81       	ld	r24, Y
    2604:	c0 5a       	subi	r28, 0xA0	; 160
    2606:	d3 40       	sbci	r29, 0x03	; 3
    2608:	8f 93       	push	r24
    260a:	c1 56       	subi	r28, 0x61	; 97
    260c:	dc 4f       	sbci	r29, 0xFC	; 252
    260e:	88 81       	ld	r24, Y
    2610:	cf 59       	subi	r28, 0x9F	; 159
    2612:	d3 40       	sbci	r29, 0x03	; 3
    2614:	8f 93       	push	r24
    2616:	c2 56       	subi	r28, 0x62	; 98
    2618:	dc 4f       	sbci	r29, 0xFC	; 252
    261a:	88 81       	ld	r24, Y
    261c:	ce 59       	subi	r28, 0x9E	; 158
    261e:	d3 40       	sbci	r29, 0x03	; 3
    2620:	8f 93       	push	r24
    2622:	c3 56       	subi	r28, 0x63	; 99
    2624:	dc 4f       	sbci	r29, 0xFC	; 252
    2626:	88 81       	ld	r24, Y
    2628:	cd 59       	subi	r28, 0x9D	; 157
    262a:	d3 40       	sbci	r29, 0x03	; 3
    262c:	8f 93       	push	r24
    262e:	c4 56       	subi	r28, 0x64	; 100
    2630:	dc 4f       	sbci	r29, 0xFC	; 252
    2632:	88 81       	ld	r24, Y
    2634:	cc 59       	subi	r28, 0x9C	; 156
    2636:	d3 40       	sbci	r29, 0x03	; 3
    2638:	8f 93       	push	r24
    263a:	c5 56       	subi	r28, 0x65	; 101
    263c:	dc 4f       	sbci	r29, 0xFC	; 252
    263e:	88 81       	ld	r24, Y
    2640:	cb 59       	subi	r28, 0x9B	; 155
    2642:	d3 40       	sbci	r29, 0x03	; 3
    2644:	8f 93       	push	r24
    2646:	c6 56       	subi	r28, 0x66	; 102
    2648:	dc 4f       	sbci	r29, 0xFC	; 252
    264a:	88 81       	ld	r24, Y
    264c:	ca 59       	subi	r28, 0x9A	; 154
    264e:	d3 40       	sbci	r29, 0x03	; 3
    2650:	8f 93       	push	r24
    2652:	c7 56       	subi	r28, 0x67	; 103
    2654:	dc 4f       	sbci	r29, 0xFC	; 252
    2656:	88 81       	ld	r24, Y
    2658:	c9 59       	subi	r28, 0x99	; 153
    265a:	d3 40       	sbci	r29, 0x03	; 3
    265c:	8f 93       	push	r24
    265e:	c8 56       	subi	r28, 0x68	; 104
    2660:	dc 4f       	sbci	r29, 0xFC	; 252
    2662:	88 81       	ld	r24, Y
    2664:	c8 59       	subi	r28, 0x98	; 152
    2666:	d3 40       	sbci	r29, 0x03	; 3
    2668:	8f 93       	push	r24
    266a:	c9 56       	subi	r28, 0x69	; 105
    266c:	dc 4f       	sbci	r29, 0xFC	; 252
    266e:	88 81       	ld	r24, Y
    2670:	c7 59       	subi	r28, 0x97	; 151
    2672:	d3 40       	sbci	r29, 0x03	; 3
    2674:	8f 93       	push	r24
    2676:	ca 56       	subi	r28, 0x6A	; 106
    2678:	dc 4f       	sbci	r29, 0xFC	; 252
    267a:	88 81       	ld	r24, Y
    267c:	c6 59       	subi	r28, 0x96	; 150
    267e:	d3 40       	sbci	r29, 0x03	; 3
    2680:	8f 93       	push	r24
    2682:	cb 56       	subi	r28, 0x6B	; 107
    2684:	dc 4f       	sbci	r29, 0xFC	; 252
    2686:	88 81       	ld	r24, Y
    2688:	c5 59       	subi	r28, 0x95	; 149
    268a:	d3 40       	sbci	r29, 0x03	; 3
    268c:	8f 93       	push	r24
    268e:	cc 56       	subi	r28, 0x6C	; 108
    2690:	dc 4f       	sbci	r29, 0xFC	; 252
    2692:	88 81       	ld	r24, Y
    2694:	c4 59       	subi	r28, 0x94	; 148
    2696:	d3 40       	sbci	r29, 0x03	; 3
    2698:	8f 93       	push	r24
    269a:	1f 92       	push	r1
    269c:	df 92       	push	r13
    269e:	bf 92       	push	r11
    26a0:	af 92       	push	r10
    26a2:	ce 01       	movw	r24, r28
    26a4:	8d 5c       	subi	r24, 0xCD	; 205
    26a6:	9d 4f       	sbci	r25, 0xFD	; 253
    26a8:	9f 93       	push	r25
    26aa:	8f 93       	push	r24
    26ac:	ff 92       	push	r15
    26ae:	ef 92       	push	r14
    26b0:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
				pid.deadZone, pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
			printLine(outbuf);
    26b4:	cd bf       	out	0x3d, r28	; 61
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	c7 01       	movw	r24, r14
    26ba:	0e 94 80 03 	call	0x700	; 0x700 <printLine>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    26be:	f1 2c       	mov	r15, r1

			sprintf(outbuf, format_MT2, currenttime, (char) (controller-63),
				pid.deadZone, pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
			printLine(outbuf);

			break;
    26c0:	41 c5       	rjmp	.+2690   	; 0x3144 <report+0xffc>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    26c2:	ce 01       	movw	r24, r28
    26c4:	86 5f       	subi	r24, 0xF6	; 246
    26c6:	9e 4f       	sbci	r25, 0xFE	; 254
    26c8:	0e 94 46 07 	call	0xe8c	; 0xe8c <get_time>
			controller = pcmd[cstack].cobject + 31;
    26cc:	84 e3       	ldi	r24, 0x34	; 52
    26ce:	80 9f       	mul	r24, r16
    26d0:	f0 01       	movw	r30, r0
    26d2:	81 9f       	mul	r24, r17
    26d4:	f0 0d       	add	r31, r0
    26d6:	11 24       	eor	r1, r1
    26d8:	e1 5f       	subi	r30, 0xF1	; 241
    26da:	f7 4d       	sbci	r31, 0xD7	; 215
    26dc:	81 81       	ldd	r24, Z+1	; 0x01
    26de:	0f 2e       	mov	r0, r31
    26e0:	ff e1       	ldi	r31, 0x1F	; 31
    26e2:	ef 2e       	mov	r14, r31
    26e4:	f0 2d       	mov	r31, r0
    26e6:	e8 0e       	add	r14, r24

			if (get_MOTOR_ENCODER(controller, &encoderValue) == ERROR) {
    26e8:	be 01       	movw	r22, r28
    26ea:	6e 59       	subi	r22, 0x9E	; 158
    26ec:	7c 4f       	sbci	r23, 0xFC	; 252
    26ee:	8e 2d       	mov	r24, r14
    26f0:	0e 94 1f 1b 	call	0x363e	; 0x363e <get_MOTOR_ENCODER>
    26f4:	f8 2e       	mov	r15, r24
    26f6:	93 e6       	ldi	r25, 0x63	; 99
    26f8:	89 13       	cpse	r24, r25
    26fa:	07 c0       	rjmp	.+14     	; 0x270a <report+0x5c2>
				printError(ERR_MTR, "report: get_MOTOR_ENCODER error");
    26fc:	6c ef       	ldi	r22, 0xFC	; 252
    26fe:	73 eb       	ldi	r23, 0xB3	; 179
    2700:	86 e3       	ldi	r24, 0x36	; 54
    2702:	91 e0       	ldi	r25, 0x01	; 1
    2704:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				return(ERROR);
    2708:	1d c5       	rjmp	.+2618   	; 0x3144 <report+0xffc>
			}

			micronValue = encoderValue/ENC_COUNTS_PER_MICRON;
    270a:	ce 59       	subi	r28, 0x9E	; 158
    270c:	dc 4f       	sbci	r29, 0xFC	; 252
    270e:	68 81       	ld	r22, Y
    2710:	79 81       	ldd	r23, Y+1	; 0x01
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	9b 81       	ldd	r25, Y+3	; 0x03
    2716:	c2 56       	subi	r28, 0x62	; 98
    2718:	d3 40       	sbci	r29, 0x03	; 3
    271a:	2b e1       	ldi	r18, 0x1B	; 27
    271c:	31 e0       	ldi	r19, 0x01	; 1
    271e:	40 e0       	ldi	r20, 0x00	; 0
    2720:	50 e0       	ldi	r21, 0x00	; 0
    2722:	0e 94 63 35 	call	0x6ac6	; 0x6ac6 <__divmodsi4>
    2726:	d2 2e       	mov	r13, r18
    2728:	c3 2e       	mov	r12, r19
    272a:	b4 2e       	mov	r11, r20
    272c:	a5 2e       	mov	r10, r21

			if (get_MOTOR_SPEED(controller, &encoderSpeed) == ERROR) {
    272e:	be 01       	movw	r22, r28
    2730:	6a 59       	subi	r22, 0x9A	; 154
    2732:	7c 4f       	sbci	r23, 0xFC	; 252
    2734:	8e 2d       	mov	r24, r14
    2736:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <get_MOTOR_SPEED>
    273a:	83 36       	cpi	r24, 0x63	; 99
    273c:	61 f4       	brne	.+24     	; 0x2756 <report+0x60e>
				encoderSpeed = 0x7FFFFFFF;
    273e:	8f ef       	ldi	r24, 0xFF	; 255
    2740:	9f ef       	ldi	r25, 0xFF	; 255
    2742:	af ef       	ldi	r26, 0xFF	; 255
    2744:	bf e7       	ldi	r27, 0x7F	; 127
    2746:	ca 59       	subi	r28, 0x9A	; 154
    2748:	dc 4f       	sbci	r29, 0xFC	; 252
    274a:	88 83       	st	Y, r24
    274c:	99 83       	std	Y+1, r25	; 0x01
    274e:	aa 83       	std	Y+2, r26	; 0x02
    2750:	bb 83       	std	Y+3, r27	; 0x03
    2752:	c6 56       	subi	r28, 0x66	; 102
    2754:	d3 40       	sbci	r29, 0x03	; 3
			}

			micronSpeed = encoderSpeed/ENC_COUNTS_PER_MICRON;
    2756:	ca 59       	subi	r28, 0x9A	; 154
    2758:	dc 4f       	sbci	r29, 0xFC	; 252
    275a:	68 81       	ld	r22, Y
    275c:	79 81       	ldd	r23, Y+1	; 0x01
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	9b 81       	ldd	r25, Y+3	; 0x03
    2762:	c6 56       	subi	r28, 0x66	; 102
    2764:	d3 40       	sbci	r29, 0x03	; 3
    2766:	2b e1       	ldi	r18, 0x1B	; 27
    2768:	31 e0       	ldi	r19, 0x01	; 1
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	50 e0       	ldi	r21, 0x00	; 0
    276e:	0e 94 63 35 	call	0x6ac6	; 0x6ac6 <__divmodsi4>
    2772:	92 2e       	mov	r9, r18
    2774:	83 2e       	mov	r8, r19
    2776:	74 2e       	mov	r7, r20
    2778:	65 2e       	mov	r6, r21

			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
    277a:	be 01       	movw	r22, r28
    277c:	6a 58       	subi	r22, 0x8A	; 138
    277e:	7c 4f       	sbci	r23, 0xFC	; 252
    2780:	8e 2d       	mov	r24, r14
    2782:	0e 94 b2 1a 	call	0x3564	; 0x3564 <get_MOTOR_CURRENT>
    2786:	83 36       	cpi	r24, 0x63	; 99
    2788:	71 f4       	brne	.+28     	; 0x27a6 <report+0x65e>
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
    278a:	6c e1       	ldi	r22, 0x1C	; 28
    278c:	74 eb       	ldi	r23, 0xB4	; 180
    278e:	86 e3       	ldi	r24, 0x36	; 54
    2790:	91 e0       	ldi	r25, 0x01	; 1
    2792:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				motorCurrent = 0xFFFF;
    2796:	8f ef       	ldi	r24, 0xFF	; 255
    2798:	9f ef       	ldi	r25, 0xFF	; 255
    279a:	ca 58       	subi	r28, 0x8A	; 138
    279c:	dc 4f       	sbci	r29, 0xFC	; 252
    279e:	88 83       	st	Y, r24
    27a0:	99 83       	std	Y+1, r25	; 0x01
    27a2:	c6 57       	subi	r28, 0x76	; 118
    27a4:	d3 40       	sbci	r29, 0x03	; 3
			}

			mdir = '?';
			if (motorDir[controller - MOTOR_A] == MTRDIRPOSITIVE) {
    27a6:	f1 2c       	mov	r15, r1
    27a8:	80 e8       	ldi	r24, 0x80	; 128
    27aa:	e8 1a       	sub	r14, r24
    27ac:	f1 08       	sbc	r15, r1
    27ae:	f7 01       	movw	r30, r14
    27b0:	e3 5c       	subi	r30, 0xC3	; 195
    27b2:	f5 4d       	sbci	r31, 0xD5	; 213
    27b4:	80 81       	ld	r24, Z
    27b6:	81 30       	cpi	r24, 0x01	; 1
    27b8:	39 f0       	breq	.+14     	; 0x27c8 <report+0x680>
				mdir = 'F';
			} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
    27ba:	88 23       	and	r24, r24
    27bc:	51 f0       	breq	.+20     	; 0x27d2 <report+0x68a>
			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
				motorCurrent = 0xFFFF;
			}

			mdir = '?';
    27be:	0f 2e       	mov	r0, r31
    27c0:	ff e3       	ldi	r31, 0x3F	; 63
    27c2:	5f 2e       	mov	r5, r31
    27c4:	f0 2d       	mov	r31, r0
    27c6:	09 c0       	rjmp	.+18     	; 0x27da <report+0x692>
			if (motorDir[controller - MOTOR_A] == MTRDIRPOSITIVE) {
				mdir = 'F';
    27c8:	0f 2e       	mov	r0, r31
    27ca:	f6 e4       	ldi	r31, 0x46	; 70
    27cc:	5f 2e       	mov	r5, r31
    27ce:	f0 2d       	mov	r31, r0
    27d0:	04 c0       	rjmp	.+8      	; 0x27da <report+0x692>
			} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
				mdir = 'R';
    27d2:	0f 2e       	mov	r0, r31
    27d4:	f2 e5       	ldi	r31, 0x52	; 82
    27d6:	5f 2e       	mov	r5, r31
    27d8:	f0 2d       	mov	r31, r0
			}

			mlimit = '?';
			if (get_MOTOR_LIMITS() == ERROR) {
    27da:	0e 94 6d 20 	call	0x40da	; 0x40da <get_MOTOR_LIMITS>
    27de:	83 36       	cpi	r24, 0x63	; 99
    27e0:	41 f4       	brne	.+16     	; 0x27f2 <report+0x6aa>
				printError(ERR_MTR, "report: get_MOTOR_LIMITS error");
    27e2:	6c e3       	ldi	r22, 0x3C	; 60
    27e4:	74 eb       	ldi	r23, 0xB4	; 180
    27e6:	86 e3       	ldi	r24, 0x36	; 54
    27e8:	91 e0       	ldi	r25, 0x01	; 1
    27ea:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				mdir = 'F';
			} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
				mdir = 'R';
			}

			mlimit = '?';
    27ee:	4f e3       	ldi	r20, 0x3F	; 63
    27f0:	09 c0       	rjmp	.+18     	; 0x2804 <report+0x6bc>
			if (get_MOTOR_LIMITS() == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_LIMITS error");
			} else {
				if (motorLim[controller - MOTOR_A] == YES) {
    27f2:	f7 01       	movw	r30, r14
    27f4:	e0 5c       	subi	r30, 0xC0	; 192
    27f6:	f5 4d       	sbci	r31, 0xD5	; 213
    27f8:	80 81       	ld	r24, Z
    27fa:	81 30       	cpi	r24, 0x01	; 1
    27fc:	11 f4       	brne	.+4      	; 0x2802 <report+0x6ba>
					mlimit = 'Y';
    27fe:	49 e5       	ldi	r20, 0x59	; 89
    2800:	01 c0       	rjmp	.+2      	; 0x2804 <report+0x6bc>
				mdir = 'F';
			} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
				mdir = 'R';
			}

			mlimit = '?';
    2802:	4f e3       	ldi	r20, 0x3F	; 63
				} else if (motorLim[controller - MOTOR_A] == MTRLIMUNKNOWN) {
					mlimit = '?';
				}
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
    2804:	24 e3       	ldi	r18, 0x34	; 52
    2806:	20 9f       	mul	r18, r16
    2808:	c0 01       	movw	r24, r0
    280a:	21 9f       	mul	r18, r17
    280c:	90 0d       	add	r25, r0
    280e:	11 24       	eor	r1, r1
    2810:	9c 01       	movw	r18, r24
    2812:	26 5c       	subi	r18, 0xC6	; 198
    2814:	37 4d       	sbci	r19, 0xD7	; 215
					mlimit = 'Y';
				} else if (motorLim[controller - MOTOR_A] == MTRLIMUNKNOWN) {
					mlimit = '?';
				}
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
    2816:	fc 01       	movw	r30, r24
    2818:	e1 5f       	subi	r30, 0xF1	; 241
    281a:	f7 4d       	sbci	r31, 0xD7	; 215
    281c:	81 81       	ldd	r24, Z+1	; 0x01
    281e:	3f 93       	push	r19
    2820:	2f 93       	push	r18
    2822:	1f 92       	push	r1
    2824:	4f 93       	push	r20
    2826:	1f 92       	push	r1
    2828:	5f 92       	push	r5
    282a:	c9 58       	subi	r28, 0x89	; 137
    282c:	dc 4f       	sbci	r29, 0xFC	; 252
    282e:	98 81       	ld	r25, Y
    2830:	c7 57       	subi	r28, 0x77	; 119
    2832:	d3 40       	sbci	r29, 0x03	; 3
    2834:	9f 93       	push	r25
    2836:	ca 58       	subi	r28, 0x8A	; 138
    2838:	dc 4f       	sbci	r29, 0xFC	; 252
    283a:	98 81       	ld	r25, Y
    283c:	c6 57       	subi	r28, 0x76	; 118
    283e:	d3 40       	sbci	r29, 0x03	; 3
    2840:	9f 93       	push	r25
    2842:	6f 92       	push	r6
    2844:	7f 92       	push	r7
    2846:	8f 92       	push	r8
    2848:	9f 92       	push	r9
    284a:	af 92       	push	r10
    284c:	bf 92       	push	r11
    284e:	cf 92       	push	r12
    2850:	df 92       	push	r13
    2852:	1f 92       	push	r1
    2854:	8f 93       	push	r24
    2856:	ce 01       	movw	r24, r28
    2858:	86 5f       	subi	r24, 0xF6	; 246
    285a:	9e 4f       	sbci	r25, 0xFE	; 254
    285c:	9f 93       	push	r25
    285e:	8f 93       	push	r24
    2860:	87 56       	subi	r24, 0x67	; 103
    2862:	9f 4f       	sbci	r25, 0xFF	; 255
    2864:	9f 93       	push	r25
    2866:	8f 93       	push	r24
    2868:	8e 01       	movw	r16, r28
    286a:	0f 5f       	subi	r16, 0xFF	; 255
    286c:	1f 4f       	sbci	r17, 0xFF	; 255
    286e:	1f 93       	push	r17
    2870:	0f 93       	push	r16
    2872:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
			printLine(outbuf);
    2876:	c8 01       	movw	r24, r16
    2878:	0e 94 80 03 	call	0x700	; 0x700 <printLine>
			break;
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2880:	f1 2c       	mov	r15, r1
				}
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    2882:	60 c4       	rjmp	.+2240   	; 0x3144 <report+0xffc>

		case 'd':			// copy of the above code
			for (i = 0; i < NMOTORS; i++) {
				get_time(currenttime);
    2884:	ce 01       	movw	r24, r28
    2886:	86 5f       	subi	r24, 0xF6	; 246
    2888:	9e 4f       	sbci	r25, 0xFE	; 254
    288a:	0e 94 46 07 	call	0xe8c	; 0xe8c <get_time>
				controller = i + MOTOR_A;
    288e:	68 94       	set
    2890:	ee 24       	eor	r14, r14
    2892:	e7 f8       	bld	r14, 7
    2894:	eb 0c       	add	r14, r11

				if (get_MOTOR_ENCODER(controller, &encoderValue) == ERROR) {
    2896:	be 01       	movw	r22, r28
    2898:	6e 59       	subi	r22, 0x9E	; 158
    289a:	7c 4f       	sbci	r23, 0xFC	; 252
    289c:	8e 2d       	mov	r24, r14
    289e:	0e 94 1f 1b 	call	0x363e	; 0x363e <get_MOTOR_ENCODER>
    28a2:	f8 2e       	mov	r15, r24
    28a4:	93 e6       	ldi	r25, 0x63	; 99
    28a6:	89 13       	cpse	r24, r25
    28a8:	07 c0       	rjmp	.+14     	; 0x28b8 <report+0x770>
					printError(ERR_MTR, "report: get_MOTOR_ENCODER error");
    28aa:	6c ef       	ldi	r22, 0xFC	; 252
    28ac:	73 eb       	ldi	r23, 0xB3	; 179
    28ae:	86 e3       	ldi	r24, 0x36	; 54
    28b0:	91 e0       	ldi	r25, 0x01	; 1
    28b2:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
					return(ERROR);
    28b6:	46 c4       	rjmp	.+2188   	; 0x3144 <report+0xffc>
				}

				micronValue = encoderValue/ENC_COUNTS_PER_MICRON;
    28b8:	ce 59       	subi	r28, 0x9E	; 158
    28ba:	dc 4f       	sbci	r29, 0xFC	; 252
    28bc:	68 81       	ld	r22, Y
    28be:	79 81       	ldd	r23, Y+1	; 0x01
    28c0:	8a 81       	ldd	r24, Y+2	; 0x02
    28c2:	9b 81       	ldd	r25, Y+3	; 0x03
    28c4:	c2 56       	subi	r28, 0x62	; 98
    28c6:	d3 40       	sbci	r29, 0x03	; 3
    28c8:	2b e1       	ldi	r18, 0x1B	; 27
    28ca:	31 e0       	ldi	r19, 0x01	; 1
    28cc:	40 e0       	ldi	r20, 0x00	; 0
    28ce:	50 e0       	ldi	r21, 0x00	; 0
    28d0:	0e 94 63 35 	call	0x6ac6	; 0x6ac6 <__divmodsi4>
    28d4:	a2 2e       	mov	r10, r18
    28d6:	93 2e       	mov	r9, r19
    28d8:	84 2e       	mov	r8, r20
    28da:	75 2e       	mov	r7, r21

				if (get_MOTOR_SPEED(controller, &encoderSpeed) == ERROR) {
    28dc:	be 01       	movw	r22, r28
    28de:	6a 59       	subi	r22, 0x9A	; 154
    28e0:	7c 4f       	sbci	r23, 0xFC	; 252
    28e2:	8e 2d       	mov	r24, r14
    28e4:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <get_MOTOR_SPEED>
    28e8:	83 36       	cpi	r24, 0x63	; 99
    28ea:	61 f4       	brne	.+24     	; 0x2904 <report+0x7bc>
					encoderSpeed = 0x7FFFFFFF;
    28ec:	8f ef       	ldi	r24, 0xFF	; 255
    28ee:	9f ef       	ldi	r25, 0xFF	; 255
    28f0:	af ef       	ldi	r26, 0xFF	; 255
    28f2:	bf e7       	ldi	r27, 0x7F	; 127
    28f4:	ca 59       	subi	r28, 0x9A	; 154
    28f6:	dc 4f       	sbci	r29, 0xFC	; 252
    28f8:	88 83       	st	Y, r24
    28fa:	99 83       	std	Y+1, r25	; 0x01
    28fc:	aa 83       	std	Y+2, r26	; 0x02
    28fe:	bb 83       	std	Y+3, r27	; 0x03
    2900:	c6 56       	subi	r28, 0x66	; 102
    2902:	d3 40       	sbci	r29, 0x03	; 3
				}

				micronSpeed = encoderSpeed/ENC_COUNTS_PER_MICRON;
    2904:	ca 59       	subi	r28, 0x9A	; 154
    2906:	dc 4f       	sbci	r29, 0xFC	; 252
    2908:	68 81       	ld	r22, Y
    290a:	79 81       	ldd	r23, Y+1	; 0x01
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	9b 81       	ldd	r25, Y+3	; 0x03
    2910:	c6 56       	subi	r28, 0x66	; 102
    2912:	d3 40       	sbci	r29, 0x03	; 3
    2914:	2b e1       	ldi	r18, 0x1B	; 27
    2916:	31 e0       	ldi	r19, 0x01	; 1
    2918:	40 e0       	ldi	r20, 0x00	; 0
    291a:	50 e0       	ldi	r21, 0x00	; 0
    291c:	0e 94 63 35 	call	0x6ac6	; 0x6ac6 <__divmodsi4>
    2920:	62 2e       	mov	r6, r18
    2922:	53 2e       	mov	r5, r19
    2924:	44 2e       	mov	r4, r20
    2926:	35 2e       	mov	r3, r21

				if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
    2928:	be 01       	movw	r22, r28
    292a:	6a 58       	subi	r22, 0x8A	; 138
    292c:	7c 4f       	sbci	r23, 0xFC	; 252
    292e:	8e 2d       	mov	r24, r14
    2930:	0e 94 b2 1a 	call	0x3564	; 0x3564 <get_MOTOR_CURRENT>
    2934:	83 36       	cpi	r24, 0x63	; 99
    2936:	71 f4       	brne	.+28     	; 0x2954 <report+0x80c>
					printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
    2938:	6c e1       	ldi	r22, 0x1C	; 28
    293a:	74 eb       	ldi	r23, 0xB4	; 180
    293c:	86 e3       	ldi	r24, 0x36	; 54
    293e:	91 e0       	ldi	r25, 0x01	; 1
    2940:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
					motorCurrent = 0xFFFF;
    2944:	8f ef       	ldi	r24, 0xFF	; 255
    2946:	9f ef       	ldi	r25, 0xFF	; 255
    2948:	ca 58       	subi	r28, 0x8A	; 138
    294a:	dc 4f       	sbci	r29, 0xFC	; 252
    294c:	88 83       	st	Y, r24
    294e:	99 83       	std	Y+1, r25	; 0x01
    2950:	c6 57       	subi	r28, 0x76	; 118
    2952:	d3 40       	sbci	r29, 0x03	; 3
				}

				mdir = '?';
				if (motorDir[controller - MOTOR_A] == MTRDIRPOSITIVE) {
    2954:	f1 2c       	mov	r15, r1
    2956:	67 01       	movw	r12, r14
    2958:	80 e8       	ldi	r24, 0x80	; 128
    295a:	c8 1a       	sub	r12, r24
    295c:	d1 08       	sbc	r13, r1
    295e:	f6 01       	movw	r30, r12
    2960:	e3 5c       	subi	r30, 0xC3	; 195
    2962:	f5 4d       	sbci	r31, 0xD5	; 213
    2964:	80 81       	ld	r24, Z
    2966:	81 30       	cpi	r24, 0x01	; 1
    2968:	39 f0       	breq	.+14     	; 0x2978 <report+0x830>
						mdir = 'F';
				} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
    296a:	88 23       	and	r24, r24
    296c:	51 f0       	breq	.+20     	; 0x2982 <report+0x83a>
				if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
					printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
					motorCurrent = 0xFFFF;
				}

				mdir = '?';
    296e:	0f 2e       	mov	r0, r31
    2970:	ff e3       	ldi	r31, 0x3F	; 63
    2972:	2f 2e       	mov	r2, r31
    2974:	f0 2d       	mov	r31, r0
    2976:	09 c0       	rjmp	.+18     	; 0x298a <report+0x842>
				if (motorDir[controller - MOTOR_A] == MTRDIRPOSITIVE) {
						mdir = 'F';
    2978:	0f 2e       	mov	r0, r31
    297a:	f6 e4       	ldi	r31, 0x46	; 70
    297c:	2f 2e       	mov	r2, r31
    297e:	f0 2d       	mov	r31, r0
    2980:	04 c0       	rjmp	.+8      	; 0x298a <report+0x842>
				} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
						mdir = 'R';
    2982:	0f 2e       	mov	r0, r31
    2984:	f2 e5       	ldi	r31, 0x52	; 82
    2986:	2f 2e       	mov	r2, r31
    2988:	f0 2d       	mov	r31, r0
				}

				mlimit = '?';
				if (get_MOTOR_LIMITS() == ERROR) {
    298a:	0e 94 6d 20 	call	0x40da	; 0x40da <get_MOTOR_LIMITS>
    298e:	83 36       	cpi	r24, 0x63	; 99
    2990:	31 f4       	brne	.+12     	; 0x299e <report+0x856>
						printError(ERR_MTR, "report: get_MOTOR_LIMITS error");
    2992:	6c e3       	ldi	r22, 0x3C	; 60
    2994:	74 eb       	ldi	r23, 0xB4	; 180
    2996:	86 e3       	ldi	r24, 0x36	; 54
    2998:	91 e0       	ldi	r25, 0x01	; 1
    299a:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				}
				if (motorLim[controller - MOTOR_A] == YES) {
    299e:	f6 01       	movw	r30, r12
    29a0:	e0 5c       	subi	r30, 0xC0	; 192
    29a2:	f5 4d       	sbci	r31, 0xD5	; 213
    29a4:	80 81       	ld	r24, Z
    29a6:	81 30       	cpi	r24, 0x01	; 1
    29a8:	11 f0       	breq	.+4      	; 0x29ae <report+0x866>
						mdir = 'F';
				} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
						mdir = 'R';
				}

				mlimit = '?';
    29aa:	3f e3       	ldi	r19, 0x3F	; 63
    29ac:	01 c0       	rjmp	.+2      	; 0x29b0 <report+0x868>
				if (get_MOTOR_LIMITS() == ERROR) {
						printError(ERR_MTR, "report: get_MOTOR_LIMITS error");
				}
				if (motorLim[controller - MOTOR_A] == YES) {
						mlimit = 'Y';
    29ae:	39 e5       	ldi	r19, 0x59	; 89
				}

				sprintf(outbuf, format_MTR, currenttime, controller-31, micronValue,
					micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
    29b0:	24 e3       	ldi	r18, 0x34	; 52
    29b2:	20 9f       	mul	r18, r16
    29b4:	c0 01       	movw	r24, r0
    29b6:	21 9f       	mul	r18, r17
    29b8:	90 0d       	add	r25, r0
    29ba:	11 24       	eor	r1, r1
    29bc:	86 5c       	subi	r24, 0xC6	; 198
    29be:	97 4d       	sbci	r25, 0xD7	; 215
				}
				if (motorLim[controller - MOTOR_A] == YES) {
						mlimit = 'Y';
				}

				sprintf(outbuf, format_MTR, currenttime, controller-31, micronValue,
    29c0:	9f 93       	push	r25
    29c2:	8f 93       	push	r24
    29c4:	1f 92       	push	r1
    29c6:	3f 93       	push	r19
    29c8:	1f 92       	push	r1
    29ca:	2f 92       	push	r2
    29cc:	c9 58       	subi	r28, 0x89	; 137
    29ce:	dc 4f       	sbci	r29, 0xFC	; 252
    29d0:	88 81       	ld	r24, Y
    29d2:	c7 57       	subi	r28, 0x77	; 119
    29d4:	d3 40       	sbci	r29, 0x03	; 3
    29d6:	8f 93       	push	r24
    29d8:	ca 58       	subi	r28, 0x8A	; 138
    29da:	dc 4f       	sbci	r29, 0xFC	; 252
    29dc:	88 81       	ld	r24, Y
    29de:	c6 57       	subi	r28, 0x76	; 118
    29e0:	d3 40       	sbci	r29, 0x03	; 3
    29e2:	8f 93       	push	r24
    29e4:	3f 92       	push	r3
    29e6:	4f 92       	push	r4
    29e8:	5f 92       	push	r5
    29ea:	6f 92       	push	r6
    29ec:	7f 92       	push	r7
    29ee:	8f 92       	push	r8
    29f0:	9f 92       	push	r9
    29f2:	af 92       	push	r10
    29f4:	9f e1       	ldi	r25, 0x1F	; 31
    29f6:	e9 1a       	sub	r14, r25
    29f8:	f1 08       	sbc	r15, r1
    29fa:	ff 92       	push	r15
    29fc:	ef 92       	push	r14
    29fe:	ce 01       	movw	r24, r28
    2a00:	86 5f       	subi	r24, 0xF6	; 246
    2a02:	9e 4f       	sbci	r25, 0xFE	; 254
    2a04:	9f 93       	push	r25
    2a06:	8f 93       	push	r24
    2a08:	87 56       	subi	r24, 0x67	; 103
    2a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0c:	9f 93       	push	r25
    2a0e:	8f 93       	push	r24
    2a10:	82 5a       	subi	r24, 0xA2	; 162
    2a12:	91 40       	sbci	r25, 0x01	; 1
    2a14:	7c 01       	movw	r14, r24
    2a16:	9f 93       	push	r25
    2a18:	8f 93       	push	r24
    2a1a:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
					micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
				printLine(outbuf);
    2a1e:	c7 01       	movw	r24, r14
    2a20:	0e 94 80 03 	call	0x700	; 0x700 <printLine>
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
			printLine(outbuf);
			break;

		case 'd':			// copy of the above code
			for (i = 0; i < NMOTORS; i++) {
    2a24:	b3 94       	inc	r11
    2a26:	cd bf       	out	0x3d, r28	; 61
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	01 c0       	rjmp	.+2      	; 0x2a2e <report+0x8e6>
	uint16_t motorCurrent;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	PID pid;

	switch(pcmd[cstack].cobject) {
    2a2c:	b1 2c       	mov	r11, r1
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
			printLine(outbuf);
			break;

		case 'd':			// copy of the above code
			for (i = 0; i < NMOTORS; i++) {
    2a2e:	92 e0       	ldi	r25, 0x02	; 2
    2a30:	9b 15       	cp	r25, r11
    2a32:	08 f0       	brcs	.+2      	; 0x2a36 <report+0x8ee>
    2a34:	27 cf       	rjmp	.-434    	; 0x2884 <report+0x73c>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2a36:	f1 2c       	mov	r15, r1
    2a38:	85 c3       	rjmp	.+1802   	; 0x3144 <report+0xffc>
				printLine(outbuf);
			}
			break;

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	0e 94 3f 2b 	call	0x567e	; 0x567e <get_temperature>
    2a40:	c2 59       	subi	r28, 0x92	; 146
    2a42:	dc 4f       	sbci	r29, 0xFC	; 252
    2a44:	68 83       	st	Y, r22
    2a46:	79 83       	std	Y+1, r23	; 0x01
    2a48:	8a 83       	std	Y+2, r24	; 0x02
    2a4a:	9b 83       	std	Y+3, r25	; 0x03
    2a4c:	ce 56       	subi	r28, 0x6E	; 110
    2a4e:	d3 40       	sbci	r29, 0x03	; 3
			h0 = get_humidity(0);
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	0e 94 19 09 	call	0x1232	; 0x1232 <get_humidity>
    2a56:	d6 2e       	mov	r13, r22
    2a58:	c7 2e       	mov	r12, r23
    2a5a:	b8 2e       	mov	r11, r24
    2a5c:	a9 2e       	mov	r10, r25
			t1 = get_temperature(1);
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	0e 94 3f 2b 	call	0x567e	; 0x567e <get_temperature>
    2a64:	cc 55       	subi	r28, 0x5C	; 92
    2a66:	dc 4f       	sbci	r29, 0xFC	; 252
    2a68:	68 83       	st	Y, r22
    2a6a:	c4 5a       	subi	r28, 0xA4	; 164
    2a6c:	d3 40       	sbci	r29, 0x03	; 3
    2a6e:	cb 55       	subi	r28, 0x5B	; 91
    2a70:	dc 4f       	sbci	r29, 0xFC	; 252
    2a72:	78 83       	st	Y, r23
    2a74:	c5 5a       	subi	r28, 0xA5	; 165
    2a76:	d3 40       	sbci	r29, 0x03	; 3
    2a78:	ca 55       	subi	r28, 0x5A	; 90
    2a7a:	dc 4f       	sbci	r29, 0xFC	; 252
    2a7c:	88 83       	st	Y, r24
    2a7e:	c6 5a       	subi	r28, 0xA6	; 166
    2a80:	d3 40       	sbci	r29, 0x03	; 3
    2a82:	c9 55       	subi	r28, 0x59	; 89
    2a84:	dc 4f       	sbci	r29, 0xFC	; 252
    2a86:	98 83       	st	Y, r25
    2a88:	c7 5a       	subi	r28, 0xA7	; 167
    2a8a:	d3 40       	sbci	r29, 0x03	; 3
			h1 = get_humidity(1);
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	0e 94 19 09 	call	0x1232	; 0x1232 <get_humidity>
    2a92:	c8 55       	subi	r28, 0x58	; 88
    2a94:	dc 4f       	sbci	r29, 0xFC	; 252
    2a96:	68 83       	st	Y, r22
    2a98:	c8 5a       	subi	r28, 0xA8	; 168
    2a9a:	d3 40       	sbci	r29, 0x03	; 3
    2a9c:	c7 55       	subi	r28, 0x57	; 87
    2a9e:	dc 4f       	sbci	r29, 0xFC	; 252
    2aa0:	78 83       	st	Y, r23
    2aa2:	c9 5a       	subi	r28, 0xA9	; 169
    2aa4:	d3 40       	sbci	r29, 0x03	; 3
    2aa6:	c6 55       	subi	r28, 0x56	; 86
    2aa8:	dc 4f       	sbci	r29, 0xFC	; 252
    2aaa:	88 83       	st	Y, r24
    2aac:	ca 5a       	subi	r28, 0xAA	; 170
    2aae:	d3 40       	sbci	r29, 0x03	; 3
    2ab0:	c5 55       	subi	r28, 0x55	; 85
    2ab2:	dc 4f       	sbci	r29, 0xFC	; 252
    2ab4:	98 83       	st	Y, r25
    2ab6:	cb 5a       	subi	r28, 0xAB	; 171
    2ab8:	d3 40       	sbci	r29, 0x03	; 3
			t2 = get_temperature(2);
    2aba:	82 e0       	ldi	r24, 0x02	; 2
    2abc:	0e 94 3f 2b 	call	0x567e	; 0x567e <get_temperature>
    2ac0:	c4 55       	subi	r28, 0x54	; 84
    2ac2:	dc 4f       	sbci	r29, 0xFC	; 252
    2ac4:	68 83       	st	Y, r22
    2ac6:	cc 5a       	subi	r28, 0xAC	; 172
    2ac8:	d3 40       	sbci	r29, 0x03	; 3
    2aca:	c3 55       	subi	r28, 0x53	; 83
    2acc:	dc 4f       	sbci	r29, 0xFC	; 252
    2ace:	78 83       	st	Y, r23
    2ad0:	cd 5a       	subi	r28, 0xAD	; 173
    2ad2:	d3 40       	sbci	r29, 0x03	; 3
    2ad4:	98 2e       	mov	r9, r24
    2ad6:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    2ad8:	82 e0       	ldi	r24, 0x02	; 2
    2ada:	0e 94 19 09 	call	0x1232	; 0x1232 <get_humidity>
    2ade:	76 2e       	mov	r7, r22
    2ae0:	67 2e       	mov	r6, r23
    2ae2:	58 2e       	mov	r5, r24
    2ae4:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    2ae6:	83 e0       	ldi	r24, 0x03	; 3
    2ae8:	0e 94 3f 2b 	call	0x567e	; 0x567e <get_temperature>
    2aec:	c2 55       	subi	r28, 0x52	; 82
    2aee:	dc 4f       	sbci	r29, 0xFC	; 252
    2af0:	68 83       	st	Y, r22
    2af2:	ce 5a       	subi	r28, 0xAE	; 174
    2af4:	d3 40       	sbci	r29, 0x03	; 3
    2af6:	c1 55       	subi	r28, 0x51	; 81
    2af8:	dc 4f       	sbci	r29, 0xFC	; 252
    2afa:	78 83       	st	Y, r23
    2afc:	cf 5a       	subi	r28, 0xAF	; 175
    2afe:	d3 40       	sbci	r29, 0x03	; 3
    2b00:	38 2e       	mov	r3, r24
    2b02:	29 2e       	mov	r2, r25
			get_time(currenttime);
    2b04:	7e 01       	movw	r14, r28
    2b06:	86 ef       	ldi	r24, 0xF6	; 246
    2b08:	e8 1a       	sub	r14, r24
    2b0a:	8e ef       	ldi	r24, 0xFE	; 254
    2b0c:	f8 0a       	sbc	r15, r24
    2b0e:	c7 01       	movw	r24, r14
    2b10:	0e 94 46 07 	call	0xe8c	; 0xe8c <get_time>
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    2b14:	24 e3       	ldi	r18, 0x34	; 52
    2b16:	20 9f       	mul	r18, r16
    2b18:	c0 01       	movw	r24, r0
    2b1a:	21 9f       	mul	r18, r17
    2b1c:	90 0d       	add	r25, r0
    2b1e:	11 24       	eor	r1, r1
    2b20:	86 5c       	subi	r24, 0xC6	; 198
    2b22:	97 4d       	sbci	r25, 0xD7	; 215
    2b24:	9f 93       	push	r25
    2b26:	8f 93       	push	r24
    2b28:	2f 92       	push	r2
    2b2a:	3f 92       	push	r3
    2b2c:	c1 55       	subi	r28, 0x51	; 81
    2b2e:	dc 4f       	sbci	r29, 0xFC	; 252
    2b30:	98 81       	ld	r25, Y
    2b32:	cf 5a       	subi	r28, 0xAF	; 175
    2b34:	d3 40       	sbci	r29, 0x03	; 3
    2b36:	9f 93       	push	r25
    2b38:	c2 55       	subi	r28, 0x52	; 82
    2b3a:	dc 4f       	sbci	r29, 0xFC	; 252
    2b3c:	88 81       	ld	r24, Y
    2b3e:	ce 5a       	subi	r28, 0xAE	; 174
    2b40:	d3 40       	sbci	r29, 0x03	; 3
    2b42:	8f 93       	push	r24
    2b44:	4f 92       	push	r4
    2b46:	5f 92       	push	r5
    2b48:	6f 92       	push	r6
    2b4a:	7f 92       	push	r7
    2b4c:	8f 92       	push	r8
    2b4e:	9f 92       	push	r9
    2b50:	c3 55       	subi	r28, 0x53	; 83
    2b52:	dc 4f       	sbci	r29, 0xFC	; 252
    2b54:	98 81       	ld	r25, Y
    2b56:	cd 5a       	subi	r28, 0xAD	; 173
    2b58:	d3 40       	sbci	r29, 0x03	; 3
    2b5a:	9f 93       	push	r25
    2b5c:	c4 55       	subi	r28, 0x54	; 84
    2b5e:	dc 4f       	sbci	r29, 0xFC	; 252
    2b60:	88 81       	ld	r24, Y
    2b62:	cc 5a       	subi	r28, 0xAC	; 172
    2b64:	d3 40       	sbci	r29, 0x03	; 3
    2b66:	8f 93       	push	r24
    2b68:	c5 55       	subi	r28, 0x55	; 85
    2b6a:	dc 4f       	sbci	r29, 0xFC	; 252
    2b6c:	98 81       	ld	r25, Y
    2b6e:	cb 5a       	subi	r28, 0xAB	; 171
    2b70:	d3 40       	sbci	r29, 0x03	; 3
    2b72:	9f 93       	push	r25
    2b74:	c6 55       	subi	r28, 0x56	; 86
    2b76:	dc 4f       	sbci	r29, 0xFC	; 252
    2b78:	88 81       	ld	r24, Y
    2b7a:	ca 5a       	subi	r28, 0xAA	; 170
    2b7c:	d3 40       	sbci	r29, 0x03	; 3
    2b7e:	8f 93       	push	r24
    2b80:	c7 55       	subi	r28, 0x57	; 87
    2b82:	dc 4f       	sbci	r29, 0xFC	; 252
    2b84:	98 81       	ld	r25, Y
    2b86:	c9 5a       	subi	r28, 0xA9	; 169
    2b88:	d3 40       	sbci	r29, 0x03	; 3
    2b8a:	9f 93       	push	r25
    2b8c:	c8 55       	subi	r28, 0x58	; 88
    2b8e:	dc 4f       	sbci	r29, 0xFC	; 252
    2b90:	88 81       	ld	r24, Y
    2b92:	c8 5a       	subi	r28, 0xA8	; 168
    2b94:	d3 40       	sbci	r29, 0x03	; 3
    2b96:	8f 93       	push	r24
    2b98:	c9 55       	subi	r28, 0x59	; 89
    2b9a:	dc 4f       	sbci	r29, 0xFC	; 252
    2b9c:	98 81       	ld	r25, Y
    2b9e:	c7 5a       	subi	r28, 0xA7	; 167
    2ba0:	d3 40       	sbci	r29, 0x03	; 3
    2ba2:	9f 93       	push	r25
    2ba4:	ca 55       	subi	r28, 0x5A	; 90
    2ba6:	dc 4f       	sbci	r29, 0xFC	; 252
    2ba8:	88 81       	ld	r24, Y
    2baa:	c6 5a       	subi	r28, 0xA6	; 166
    2bac:	d3 40       	sbci	r29, 0x03	; 3
    2bae:	8f 93       	push	r24
    2bb0:	cb 55       	subi	r28, 0x5B	; 91
    2bb2:	dc 4f       	sbci	r29, 0xFC	; 252
    2bb4:	98 81       	ld	r25, Y
    2bb6:	c5 5a       	subi	r28, 0xA5	; 165
    2bb8:	d3 40       	sbci	r29, 0x03	; 3
    2bba:	9f 93       	push	r25
    2bbc:	cc 55       	subi	r28, 0x5C	; 92
    2bbe:	dc 4f       	sbci	r29, 0xFC	; 252
    2bc0:	88 81       	ld	r24, Y
    2bc2:	c4 5a       	subi	r28, 0xA4	; 164
    2bc4:	d3 40       	sbci	r29, 0x03	; 3
    2bc6:	8f 93       	push	r24
    2bc8:	af 92       	push	r10
    2bca:	bf 92       	push	r11
    2bcc:	cf 92       	push	r12
    2bce:	df 92       	push	r13
    2bd0:	cf 58       	subi	r28, 0x8F	; 143
    2bd2:	dc 4f       	sbci	r29, 0xFC	; 252
    2bd4:	88 81       	ld	r24, Y
    2bd6:	c1 57       	subi	r28, 0x71	; 113
    2bd8:	d3 40       	sbci	r29, 0x03	; 3
    2bda:	8f 93       	push	r24
    2bdc:	c0 59       	subi	r28, 0x90	; 144
    2bde:	dc 4f       	sbci	r29, 0xFC	; 252
    2be0:	88 81       	ld	r24, Y
    2be2:	c0 57       	subi	r28, 0x70	; 112
    2be4:	d3 40       	sbci	r29, 0x03	; 3
    2be6:	8f 93       	push	r24
    2be8:	c1 59       	subi	r28, 0x91	; 145
    2bea:	dc 4f       	sbci	r29, 0xFC	; 252
    2bec:	88 81       	ld	r24, Y
    2bee:	cf 56       	subi	r28, 0x6F	; 111
    2bf0:	d3 40       	sbci	r29, 0x03	; 3
    2bf2:	8f 93       	push	r24
    2bf4:	c2 59       	subi	r28, 0x92	; 146
    2bf6:	dc 4f       	sbci	r29, 0xFC	; 252
    2bf8:	88 81       	ld	r24, Y
    2bfa:	ce 56       	subi	r28, 0x6E	; 110
    2bfc:	d3 40       	sbci	r29, 0x03	; 3
    2bfe:	8f 93       	push	r24
    2c00:	ff 92       	push	r15
    2c02:	ef 92       	push	r14
    2c04:	ce 01       	movw	r24, r28
    2c06:	82 5a       	subi	r24, 0xA2	; 162
    2c08:	9e 4f       	sbci	r25, 0xFE	; 254
    2c0a:	9f 93       	push	r25
    2c0c:	8f 93       	push	r24
    2c0e:	8e 01       	movw	r16, r28
    2c10:	0f 5f       	subi	r16, 0xFF	; 255
    2c12:	1f 4f       	sbci	r17, 0xFF	; 255
    2c14:	1f 93       	push	r17
    2c16:	0f 93       	push	r16
    2c18:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			printLine(outbuf);
    2c1c:	cd bf       	out	0x3d, r28	; 61
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	c8 01       	movw	r24, r16
    2c22:	0e 94 80 03 	call	0x700	; 0x700 <printLine>
			writestr_OLED(1, "Temp & Humidity", 1);
    2c26:	41 e0       	ldi	r20, 0x01	; 1
    2c28:	6b e5       	ldi	r22, 0x5B	; 91
    2c2a:	74 eb       	ldi	r23, 0xB4	; 180
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    2c32:	c2 59       	subi	r28, 0x92	; 146
    2c34:	dc 4f       	sbci	r29, 0xFC	; 252
    2c36:	f8 80       	ld	r15, Y
    2c38:	ce 56       	subi	r28, 0x6E	; 110
    2c3a:	d3 40       	sbci	r29, 0x03	; 3
    2c3c:	c1 59       	subi	r28, 0x91	; 145
    2c3e:	dc 4f       	sbci	r29, 0xFC	; 252
    2c40:	e8 80       	ld	r14, Y
    2c42:	cf 56       	subi	r28, 0x6F	; 111
    2c44:	d3 40       	sbci	r29, 0x03	; 3
    2c46:	c0 59       	subi	r28, 0x90	; 144
    2c48:	dc 4f       	sbci	r29, 0xFC	; 252
    2c4a:	98 80       	ld	r9, Y
    2c4c:	c0 57       	subi	r28, 0x70	; 112
    2c4e:	d3 40       	sbci	r29, 0x03	; 3
    2c50:	cf 58       	subi	r28, 0x8F	; 143
    2c52:	dc 4f       	sbci	r29, 0xFC	; 252
    2c54:	88 80       	ld	r8, Y
    2c56:	c1 57       	subi	r28, 0x71	; 113
    2c58:	d3 40       	sbci	r29, 0x03	; 3
    2c5a:	26 e6       	ldi	r18, 0x66	; 102
    2c5c:	36 e6       	ldi	r19, 0x66	; 102
    2c5e:	46 ee       	ldi	r20, 0xE6	; 230
    2c60:	5f e3       	ldi	r21, 0x3F	; 63
    2c62:	6f 2d       	mov	r22, r15
    2c64:	7e 2d       	mov	r23, r14
    2c66:	89 2d       	mov	r24, r9
    2c68:	98 2d       	mov	r25, r8
    2c6a:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
    2c6e:	af 92       	push	r10
    2c70:	bf 92       	push	r11
    2c72:	cf 92       	push	r12
    2c74:	df 92       	push	r13
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	40 e0       	ldi	r20, 0x00	; 0
    2c7c:	52 e4       	ldi	r21, 0x42	; 66
    2c7e:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <__addsf3>
    2c82:	9f 93       	push	r25
    2c84:	8f 93       	push	r24
    2c86:	7f 93       	push	r23
    2c88:	6f 93       	push	r22
    2c8a:	8f 92       	push	r8
    2c8c:	9f 92       	push	r9
    2c8e:	ef 92       	push	r14
    2c90:	ff 92       	push	r15
    2c92:	8b e6       	ldi	r24, 0x6B	; 107
    2c94:	94 eb       	ldi	r25, 0xB4	; 180
    2c96:	9f 93       	push	r25
    2c98:	8f 93       	push	r24
    2c9a:	1f 93       	push	r17
    2c9c:	0f 93       	push	r16
    2c9e:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			writestr_OLED(1, outbuf, 2);
    2ca2:	42 e0       	ldi	r20, 0x02	; 2
    2ca4:	b8 01       	movw	r22, r16
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <writestr_OLED>
			break;
    2cac:	cd bf       	out	0x3d, r28	; 61
    2cae:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2cb0:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    2cb2:	48 c2       	rjmp	.+1168   	; 0x3144 <report+0xffc>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    2cb4:	ae 01       	movw	r20, r28
    2cb6:	40 58       	subi	r20, 0x80	; 128
    2cb8:	5c 4f       	sbci	r21, 0xFC	; 252
    2cba:	be 01       	movw	r22, r28
    2cbc:	64 58       	subi	r22, 0x84	; 132
    2cbe:	7c 4f       	sbci	r23, 0xFC	; 252
    2cc0:	ce 01       	movw	r24, r28
    2cc2:	88 58       	subi	r24, 0x88	; 136
    2cc4:	9c 4f       	sbci	r25, 0xFC	; 252
    2cc6:	0e 94 ae 0b 	call	0x175c	; 0x175c <get_orientation>
			get_time(currenttime);
    2cca:	7e 01       	movw	r14, r28
    2ccc:	96 ef       	ldi	r25, 0xF6	; 246
    2cce:	e9 1a       	sub	r14, r25
    2cd0:	9e ef       	ldi	r25, 0xFE	; 254
    2cd2:	f9 0a       	sbc	r15, r25
    2cd4:	c7 01       	movw	r24, r14
    2cd6:	0e 94 46 07 	call	0xe8c	; 0xe8c <get_time>
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
    2cda:	24 e3       	ldi	r18, 0x34	; 52
    2cdc:	20 9f       	mul	r18, r16
    2cde:	c0 01       	movw	r24, r0
    2ce0:	21 9f       	mul	r18, r17
    2ce2:	90 0d       	add	r25, r0
    2ce4:	11 24       	eor	r1, r1
    2ce6:	86 5c       	subi	r24, 0xC6	; 198
    2ce8:	97 4d       	sbci	r25, 0xD7	; 215
    2cea:	9f 93       	push	r25
    2cec:	8f 93       	push	r24
    2cee:	cd 57       	subi	r28, 0x7D	; 125
    2cf0:	dc 4f       	sbci	r29, 0xFC	; 252
    2cf2:	88 81       	ld	r24, Y
    2cf4:	c3 58       	subi	r28, 0x83	; 131
    2cf6:	d3 40       	sbci	r29, 0x03	; 3
    2cf8:	8f 93       	push	r24
    2cfa:	ce 57       	subi	r28, 0x7E	; 126
    2cfc:	dc 4f       	sbci	r29, 0xFC	; 252
    2cfe:	88 81       	ld	r24, Y
    2d00:	c2 58       	subi	r28, 0x82	; 130
    2d02:	d3 40       	sbci	r29, 0x03	; 3
    2d04:	8f 93       	push	r24
    2d06:	cf 57       	subi	r28, 0x7F	; 127
    2d08:	dc 4f       	sbci	r29, 0xFC	; 252
    2d0a:	88 81       	ld	r24, Y
    2d0c:	c1 58       	subi	r28, 0x81	; 129
    2d0e:	d3 40       	sbci	r29, 0x03	; 3
    2d10:	8f 93       	push	r24
    2d12:	c0 58       	subi	r28, 0x80	; 128
    2d14:	dc 4f       	sbci	r29, 0xFC	; 252
    2d16:	88 81       	ld	r24, Y
    2d18:	c0 58       	subi	r28, 0x80	; 128
    2d1a:	d3 40       	sbci	r29, 0x03	; 3
    2d1c:	8f 93       	push	r24
    2d1e:	c1 58       	subi	r28, 0x81	; 129
    2d20:	dc 4f       	sbci	r29, 0xFC	; 252
    2d22:	88 81       	ld	r24, Y
    2d24:	cf 57       	subi	r28, 0x7F	; 127
    2d26:	d3 40       	sbci	r29, 0x03	; 3
    2d28:	8f 93       	push	r24
    2d2a:	c2 58       	subi	r28, 0x82	; 130
    2d2c:	dc 4f       	sbci	r29, 0xFC	; 252
    2d2e:	88 81       	ld	r24, Y
    2d30:	ce 57       	subi	r28, 0x7E	; 126
    2d32:	d3 40       	sbci	r29, 0x03	; 3
    2d34:	8f 93       	push	r24
    2d36:	c3 58       	subi	r28, 0x83	; 131
    2d38:	dc 4f       	sbci	r29, 0xFC	; 252
    2d3a:	88 81       	ld	r24, Y
    2d3c:	cd 57       	subi	r28, 0x7D	; 125
    2d3e:	d3 40       	sbci	r29, 0x03	; 3
    2d40:	8f 93       	push	r24
    2d42:	c4 58       	subi	r28, 0x84	; 132
    2d44:	dc 4f       	sbci	r29, 0xFC	; 252
    2d46:	88 81       	ld	r24, Y
    2d48:	cc 57       	subi	r28, 0x7C	; 124
    2d4a:	d3 40       	sbci	r29, 0x03	; 3
    2d4c:	8f 93       	push	r24
    2d4e:	c5 58       	subi	r28, 0x85	; 133
    2d50:	dc 4f       	sbci	r29, 0xFC	; 252
    2d52:	88 81       	ld	r24, Y
    2d54:	cb 57       	subi	r28, 0x7B	; 123
    2d56:	d3 40       	sbci	r29, 0x03	; 3
    2d58:	8f 93       	push	r24
    2d5a:	c6 58       	subi	r28, 0x86	; 134
    2d5c:	dc 4f       	sbci	r29, 0xFC	; 252
    2d5e:	88 81       	ld	r24, Y
    2d60:	ca 57       	subi	r28, 0x7A	; 122
    2d62:	d3 40       	sbci	r29, 0x03	; 3
    2d64:	8f 93       	push	r24
    2d66:	c7 58       	subi	r28, 0x87	; 135
    2d68:	dc 4f       	sbci	r29, 0xFC	; 252
    2d6a:	88 81       	ld	r24, Y
    2d6c:	c9 57       	subi	r28, 0x79	; 121
    2d6e:	d3 40       	sbci	r29, 0x03	; 3
    2d70:	8f 93       	push	r24
    2d72:	c8 58       	subi	r28, 0x88	; 136
    2d74:	dc 4f       	sbci	r29, 0xFC	; 252
    2d76:	88 81       	ld	r24, Y
    2d78:	c8 57       	subi	r28, 0x78	; 120
    2d7a:	d3 40       	sbci	r29, 0x03	; 3
    2d7c:	8f 93       	push	r24
    2d7e:	ff 92       	push	r15
    2d80:	ef 92       	push	r14
    2d82:	ce 01       	movw	r24, r28
    2d84:	88 57       	subi	r24, 0x78	; 120
    2d86:	9d 4f       	sbci	r25, 0xFD	; 253
    2d88:	9f 93       	push	r25
    2d8a:	8f 93       	push	r24
    2d8c:	8e 01       	movw	r16, r28
    2d8e:	0f 5f       	subi	r16, 0xFF	; 255
    2d90:	1f 4f       	sbci	r17, 0xFF	; 255
    2d92:	1f 93       	push	r17
    2d94:	0f 93       	push	r16
    2d96:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			printLine(outbuf);
    2d9a:	c8 01       	movw	r24, r16
    2d9c:	0e 94 80 03 	call	0x700	; 0x700 <printLine>
			writestr_OLED(1, "Orientation", 1);
    2da0:	41 e0       	ldi	r20, 0x01	; 1
    2da2:	61 e8       	ldi	r22, 0x81	; 129
    2da4:	74 eb       	ldi	r23, 0xB4	; 180
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    2dac:	cd 57       	subi	r28, 0x7D	; 125
    2dae:	dc 4f       	sbci	r29, 0xFC	; 252
    2db0:	88 81       	ld	r24, Y
    2db2:	c3 58       	subi	r28, 0x83	; 131
    2db4:	d3 40       	sbci	r29, 0x03	; 3
    2db6:	8f 93       	push	r24
    2db8:	ce 57       	subi	r28, 0x7E	; 126
    2dba:	dc 4f       	sbci	r29, 0xFC	; 252
    2dbc:	88 81       	ld	r24, Y
    2dbe:	c2 58       	subi	r28, 0x82	; 130
    2dc0:	d3 40       	sbci	r29, 0x03	; 3
    2dc2:	8f 93       	push	r24
    2dc4:	cf 57       	subi	r28, 0x7F	; 127
    2dc6:	dc 4f       	sbci	r29, 0xFC	; 252
    2dc8:	88 81       	ld	r24, Y
    2dca:	c1 58       	subi	r28, 0x81	; 129
    2dcc:	d3 40       	sbci	r29, 0x03	; 3
    2dce:	8f 93       	push	r24
    2dd0:	c0 58       	subi	r28, 0x80	; 128
    2dd2:	dc 4f       	sbci	r29, 0xFC	; 252
    2dd4:	88 81       	ld	r24, Y
    2dd6:	c0 58       	subi	r28, 0x80	; 128
    2dd8:	d3 40       	sbci	r29, 0x03	; 3
    2dda:	8f 93       	push	r24
    2ddc:	c1 58       	subi	r28, 0x81	; 129
    2dde:	dc 4f       	sbci	r29, 0xFC	; 252
    2de0:	88 81       	ld	r24, Y
    2de2:	cf 57       	subi	r28, 0x7F	; 127
    2de4:	d3 40       	sbci	r29, 0x03	; 3
    2de6:	8f 93       	push	r24
    2de8:	c2 58       	subi	r28, 0x82	; 130
    2dea:	dc 4f       	sbci	r29, 0xFC	; 252
    2dec:	88 81       	ld	r24, Y
    2dee:	ce 57       	subi	r28, 0x7E	; 126
    2df0:	d3 40       	sbci	r29, 0x03	; 3
    2df2:	8f 93       	push	r24
    2df4:	c3 58       	subi	r28, 0x83	; 131
    2df6:	dc 4f       	sbci	r29, 0xFC	; 252
    2df8:	88 81       	ld	r24, Y
    2dfa:	cd 57       	subi	r28, 0x7D	; 125
    2dfc:	d3 40       	sbci	r29, 0x03	; 3
    2dfe:	8f 93       	push	r24
    2e00:	c4 58       	subi	r28, 0x84	; 132
    2e02:	dc 4f       	sbci	r29, 0xFC	; 252
    2e04:	88 81       	ld	r24, Y
    2e06:	cc 57       	subi	r28, 0x7C	; 124
    2e08:	d3 40       	sbci	r29, 0x03	; 3
    2e0a:	8f 93       	push	r24
    2e0c:	c5 58       	subi	r28, 0x85	; 133
    2e0e:	dc 4f       	sbci	r29, 0xFC	; 252
    2e10:	88 81       	ld	r24, Y
    2e12:	cb 57       	subi	r28, 0x7B	; 123
    2e14:	d3 40       	sbci	r29, 0x03	; 3
    2e16:	8f 93       	push	r24
    2e18:	c6 58       	subi	r28, 0x86	; 134
    2e1a:	dc 4f       	sbci	r29, 0xFC	; 252
    2e1c:	88 81       	ld	r24, Y
    2e1e:	ca 57       	subi	r28, 0x7A	; 122
    2e20:	d3 40       	sbci	r29, 0x03	; 3
    2e22:	8f 93       	push	r24
    2e24:	c7 58       	subi	r28, 0x87	; 135
    2e26:	dc 4f       	sbci	r29, 0xFC	; 252
    2e28:	88 81       	ld	r24, Y
    2e2a:	c9 57       	subi	r28, 0x79	; 121
    2e2c:	d3 40       	sbci	r29, 0x03	; 3
    2e2e:	8f 93       	push	r24
    2e30:	c8 58       	subi	r28, 0x88	; 136
    2e32:	dc 4f       	sbci	r29, 0xFC	; 252
    2e34:	88 81       	ld	r24, Y
    2e36:	c8 57       	subi	r28, 0x78	; 120
    2e38:	d3 40       	sbci	r29, 0x03	; 3
    2e3a:	8f 93       	push	r24
    2e3c:	ce 01       	movw	r24, r28
    2e3e:	8c 55       	subi	r24, 0x5C	; 92
    2e40:	9d 4f       	sbci	r25, 0xFD	; 253
    2e42:	9f 93       	push	r25
    2e44:	8f 93       	push	r24
    2e46:	1f 93       	push	r17
    2e48:	0f 93       	push	r16
    2e4a:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			writestr_OLED(1, outbuf, 2);
    2e4e:	cd bf       	out	0x3d, r28	; 61
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	42 e0       	ldi	r20, 0x02	; 2
    2e54:	b8 01       	movw	r22, r16
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2e5c:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    2e5e:	72 c1       	rjmp	.+740    	; 0x3144 <report+0xffc>

		case 'p':					// Pneumatics
			get_time(currenttime);
    2e60:	7e 01       	movw	r14, r28
    2e62:	96 ef       	ldi	r25, 0xF6	; 246
    2e64:	e9 1a       	sub	r14, r25
    2e66:	9e ef       	ldi	r25, 0xFE	; 254
    2e68:	f9 0a       	sbc	r15, r25
    2e6a:	c7 01       	movw	r24, r14
    2e6c:	0e 94 46 07 	call	0xe8c	; 0xe8c <get_time>
			read_PNEUSensors(&shutter, &left, &right, &air);
    2e70:	9e 01       	movw	r18, r28
    2e72:	23 5a       	subi	r18, 0xA3	; 163
    2e74:	3e 4f       	sbci	r19, 0xFE	; 254
    2e76:	ae 01       	movw	r20, r28
    2e78:	44 5a       	subi	r20, 0xA4	; 164
    2e7a:	5e 4f       	sbci	r21, 0xFE	; 254
    2e7c:	be 01       	movw	r22, r28
    2e7e:	65 5a       	subi	r22, 0xA5	; 165
    2e80:	7e 4f       	sbci	r23, 0xFE	; 254
    2e82:	ce 01       	movw	r24, r28
    2e84:	86 5a       	subi	r24, 0xA6	; 166
    2e86:	9e 4f       	sbci	r25, 0xFE	; 254
    2e88:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <read_PNEUSensors>
			sprintf(outbuf, format_PNU, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    2e8c:	24 e3       	ldi	r18, 0x34	; 52
    2e8e:	20 9f       	mul	r18, r16
    2e90:	c0 01       	movw	r24, r0
    2e92:	21 9f       	mul	r18, r17
    2e94:	90 0d       	add	r25, r0
    2e96:	11 24       	eor	r1, r1
    2e98:	86 5c       	subi	r24, 0xC6	; 198
    2e9a:	97 4d       	sbci	r25, 0xD7	; 215
    2e9c:	9f 93       	push	r25
    2e9e:	8f 93       	push	r24
    2ea0:	c3 5a       	subi	r28, 0xA3	; 163
    2ea2:	de 4f       	sbci	r29, 0xFE	; 254
    2ea4:	88 81       	ld	r24, Y
    2ea6:	cd 55       	subi	r28, 0x5D	; 93
    2ea8:	d1 40       	sbci	r29, 0x01	; 1
    2eaa:	1f 92       	push	r1
    2eac:	8f 93       	push	r24
    2eae:	c4 5a       	subi	r28, 0xA4	; 164
    2eb0:	de 4f       	sbci	r29, 0xFE	; 254
    2eb2:	88 81       	ld	r24, Y
    2eb4:	cc 55       	subi	r28, 0x5C	; 92
    2eb6:	d1 40       	sbci	r29, 0x01	; 1
    2eb8:	1f 92       	push	r1
    2eba:	8f 93       	push	r24
    2ebc:	c5 5a       	subi	r28, 0xA5	; 165
    2ebe:	de 4f       	sbci	r29, 0xFE	; 254
    2ec0:	88 81       	ld	r24, Y
    2ec2:	cb 55       	subi	r28, 0x5B	; 91
    2ec4:	d1 40       	sbci	r29, 0x01	; 1
    2ec6:	1f 92       	push	r1
    2ec8:	8f 93       	push	r24
    2eca:	c6 5a       	subi	r28, 0xA6	; 166
    2ecc:	de 4f       	sbci	r29, 0xFE	; 254
    2ece:	88 81       	ld	r24, Y
    2ed0:	ca 55       	subi	r28, 0x5A	; 90
    2ed2:	d1 40       	sbci	r29, 0x01	; 1
    2ed4:	1f 92       	push	r1
    2ed6:	8f 93       	push	r24
    2ed8:	ff 92       	push	r15
    2eda:	ef 92       	push	r14
    2edc:	ce 01       	movw	r24, r28
    2ede:	8a 54       	subi	r24, 0x4A	; 74
    2ee0:	9d 4f       	sbci	r25, 0xFD	; 253
    2ee2:	9f 93       	push	r25
    2ee4:	8f 93       	push	r24
    2ee6:	8e 01       	movw	r16, r28
    2ee8:	0f 5f       	subi	r16, 0xFF	; 255
    2eea:	1f 4f       	sbci	r17, 0xFF	; 255
    2eec:	1f 93       	push	r17
    2eee:	0f 93       	push	r16
    2ef0:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			printLine(outbuf);
    2ef4:	c8 01       	movw	r24, r16
    2ef6:	0e 94 80 03 	call	0x700	; 0x700 <printLine>
			sprintf(outbuf, dformat_PN1, left, right);
    2efa:	c4 5a       	subi	r28, 0xA4	; 164
    2efc:	de 4f       	sbci	r29, 0xFE	; 254
    2efe:	88 81       	ld	r24, Y
    2f00:	cc 55       	subi	r28, 0x5C	; 92
    2f02:	d1 40       	sbci	r29, 0x01	; 1
    2f04:	1f 92       	push	r1
    2f06:	8f 93       	push	r24
    2f08:	c5 5a       	subi	r28, 0xA5	; 165
    2f0a:	de 4f       	sbci	r29, 0xFE	; 254
    2f0c:	88 81       	ld	r24, Y
    2f0e:	cb 55       	subi	r28, 0x5B	; 91
    2f10:	d1 40       	sbci	r29, 0x01	; 1
    2f12:	1f 92       	push	r1
    2f14:	8f 93       	push	r24
    2f16:	ce 01       	movw	r24, r28
    2f18:	8d 51       	subi	r24, 0x1D	; 29
    2f1a:	9d 4f       	sbci	r25, 0xFD	; 253
    2f1c:	9f 93       	push	r25
    2f1e:	8f 93       	push	r24
    2f20:	1f 93       	push	r17
    2f22:	0f 93       	push	r16
    2f24:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			writestr_OLED(1, outbuf, 1);
    2f28:	41 e0       	ldi	r20, 0x01	; 1
    2f2a:	b8 01       	movw	r22, r16
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2f32:	c3 5a       	subi	r28, 0xA3	; 163
    2f34:	de 4f       	sbci	r29, 0xFE	; 254
    2f36:	88 81       	ld	r24, Y
    2f38:	cd 55       	subi	r28, 0x5D	; 93
    2f3a:	d1 40       	sbci	r29, 0x01	; 1
    2f3c:	1f 92       	push	r1
    2f3e:	8f 93       	push	r24
    2f40:	c6 5a       	subi	r28, 0xA6	; 166
    2f42:	de 4f       	sbci	r29, 0xFE	; 254
    2f44:	88 81       	ld	r24, Y
    2f46:	ca 55       	subi	r28, 0x5A	; 90
    2f48:	d1 40       	sbci	r29, 0x01	; 1
    2f4a:	1f 92       	push	r1
    2f4c:	8f 93       	push	r24
    2f4e:	ce 01       	movw	r24, r28
    2f50:	8a 50       	subi	r24, 0x0A	; 10
    2f52:	9d 4f       	sbci	r25, 0xFD	; 253
    2f54:	9f 93       	push	r25
    2f56:	8f 93       	push	r24
    2f58:	1f 93       	push	r17
    2f5a:	0f 93       	push	r16
    2f5c:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			writestr_OLED(1, outbuf, 2);
    2f60:	cd bf       	out	0x3d, r28	; 61
    2f62:	de bf       	out	0x3e, r29	; 62
    2f64:	42 e0       	ldi	r20, 0x02	; 2
    2f66:	b8 01       	movw	r22, r16
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2f6e:	f1 2c       	mov	r15, r1
			printLine(outbuf);
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    2f70:	e9 c0       	rjmp	.+466    	; 0x3144 <report+0xffc>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    2f72:	7e 01       	movw	r14, r28
    2f74:	96 ef       	ldi	r25, 0xF6	; 246
    2f76:	e9 1a       	sub	r14, r25
    2f78:	9e ef       	ldi	r25, 0xFE	; 254
    2f7a:	f9 0a       	sbc	r15, r25
    2f7c:	c7 01       	movw	r24, r14
    2f7e:	0e 94 46 07 	call	0xe8c	; 0xe8c <get_time>
			get_SETTIME(lastsettime);
    2f82:	6e 01       	movw	r12, r28
    2f84:	82 ee       	ldi	r24, 0xE2	; 226
    2f86:	c8 1a       	sub	r12, r24
    2f88:	8e ef       	ldi	r24, 0xFE	; 254
    2f8a:	d8 0a       	sbc	r13, r24
    2f8c:	c6 01       	movw	r24, r12
    2f8e:	0e 94 b7 08 	call	0x116e	; 0x116e <get_SETTIME>
			get_BOOTTIME(boottime);
    2f92:	5e 01       	movw	r10, r28
    2f94:	9e ec       	ldi	r25, 0xCE	; 206
    2f96:	a9 1a       	sub	r10, r25
    2f98:	9e ef       	ldi	r25, 0xFE	; 254
    2f9a:	b9 0a       	sbc	r11, r25
    2f9c:	c5 01       	movw	r24, r10
    2f9e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    2fa2:	24 e3       	ldi	r18, 0x34	; 52
    2fa4:	20 9f       	mul	r18, r16
    2fa6:	c0 01       	movw	r24, r0
    2fa8:	21 9f       	mul	r18, r17
    2faa:	90 0d       	add	r25, r0
    2fac:	11 24       	eor	r1, r1
    2fae:	86 5c       	subi	r24, 0xC6	; 198
    2fb0:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			get_SETTIME(lastsettime);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
    2fb2:	9f 93       	push	r25
    2fb4:	8f 93       	push	r24
    2fb6:	bf 92       	push	r11
    2fb8:	af 92       	push	r10
    2fba:	df 92       	push	r13
    2fbc:	cf 92       	push	r12
    2fbe:	ff 92       	push	r15
    2fc0:	ef 92       	push	r14
    2fc2:	ce 01       	movw	r24, r28
    2fc4:	87 5f       	subi	r24, 0xF7	; 247
    2fc6:	9c 4f       	sbci	r25, 0xFC	; 252
    2fc8:	9f 93       	push	r25
    2fca:	8f 93       	push	r24
    2fcc:	8e 01       	movw	r16, r28
    2fce:	0f 5f       	subi	r16, 0xFF	; 255
    2fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd2:	1f 93       	push	r17
    2fd4:	0f 93       	push	r16
    2fd6:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
    2fda:	c8 01       	movw	r24, r16
    2fdc:	0e 94 80 03 	call	0x700	; 0x700 <printLine>
			writestr_OLED(1, "Time", 1);
    2fe0:	41 e0       	ldi	r20, 0x01	; 1
    2fe2:	6d e8       	ldi	r22, 0x8D	; 141
    2fe4:	74 eb       	ldi	r23, 0xB4	; 180
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    2fec:	b7 01       	movw	r22, r14
    2fee:	65 5f       	subi	r22, 0xF5	; 245
    2ff0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ff2:	42 e0       	ldi	r20, 0x02	; 2
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <writestr_OLED>
			break;
    2ffa:	cd bf       	out	0x3d, r28	; 61
    2ffc:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2ffe:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    3000:	a1 c0       	rjmp	.+322    	; 0x3144 <report+0xffc>

		case 'v':					// Vacuum
			redvac = read_ionpump(REDPUMP);
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <read_ionpump>
    3008:	d6 2e       	mov	r13, r22
    300a:	c7 2e       	mov	r12, r23
    300c:	b8 2e       	mov	r11, r24
    300e:	a9 2e       	mov	r10, r25
			bluvac = read_ionpump(BLUEPUMP);
    3010:	82 e0       	ldi	r24, 0x02	; 2
    3012:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <read_ionpump>
    3016:	96 2e       	mov	r9, r22
    3018:	87 2e       	mov	r8, r23
    301a:	78 2e       	mov	r7, r24
    301c:	69 2e       	mov	r6, r25
			get_time(currenttime);
    301e:	7e 01       	movw	r14, r28
    3020:	96 ef       	ldi	r25, 0xF6	; 246
    3022:	e9 1a       	sub	r14, r25
    3024:	9e ef       	ldi	r25, 0xFE	; 254
    3026:	f9 0a       	sbc	r15, r25
    3028:	c7 01       	movw	r24, r14
    302a:	0e 94 46 07 	call	0xe8c	; 0xe8c <get_time>
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
    302e:	24 e3       	ldi	r18, 0x34	; 52
    3030:	20 9f       	mul	r18, r16
    3032:	c0 01       	movw	r24, r0
    3034:	21 9f       	mul	r18, r17
    3036:	90 0d       	add	r25, r0
    3038:	11 24       	eor	r1, r1
    303a:	86 5c       	subi	r24, 0xC6	; 198
    303c:	97 4d       	sbci	r25, 0xD7	; 215
    303e:	9f 93       	push	r25
    3040:	8f 93       	push	r24
    3042:	6f 92       	push	r6
    3044:	7f 92       	push	r7
    3046:	8f 92       	push	r8
    3048:	9f 92       	push	r9
    304a:	af 92       	push	r10
    304c:	bf 92       	push	r11
    304e:	cf 92       	push	r12
    3050:	df 92       	push	r13
    3052:	ff 92       	push	r15
    3054:	ef 92       	push	r14
    3056:	ce 01       	movw	r24, r28
    3058:	8e 5d       	subi	r24, 0xDE	; 222
    305a:	9c 4f       	sbci	r25, 0xFC	; 252
    305c:	9f 93       	push	r25
    305e:	8f 93       	push	r24
    3060:	8e 01       	movw	r16, r28
    3062:	0f 5f       	subi	r16, 0xFF	; 255
    3064:	1f 4f       	sbci	r17, 0xFF	; 255
    3066:	1f 93       	push	r17
    3068:	0f 93       	push	r16
    306a:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			printLine(outbuf);
    306e:	c8 01       	movw	r24, r16
    3070:	0e 94 80 03 	call	0x700	; 0x700 <printLine>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    3074:	41 e0       	ldi	r20, 0x01	; 1
    3076:	62 e9       	ldi	r22, 0x92	; 146
    3078:	74 eb       	ldi	r23, 0xB4	; 180
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    3080:	6f 92       	push	r6
    3082:	7f 92       	push	r7
    3084:	8f 92       	push	r8
    3086:	9f 92       	push	r9
    3088:	af 92       	push	r10
    308a:	bf 92       	push	r11
    308c:	cf 92       	push	r12
    308e:	df 92       	push	r13
    3090:	ce 01       	movw	r24, r28
    3092:	89 5b       	subi	r24, 0xB9	; 185
    3094:	9c 4f       	sbci	r25, 0xFC	; 252
    3096:	9f 93       	push	r25
    3098:	8f 93       	push	r24
    309a:	1f 93       	push	r17
    309c:	0f 93       	push	r16
    309e:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			writestr_OLED(1, outbuf, 2);
    30a2:	42 e0       	ldi	r20, 0x02	; 2
    30a4:	b8 01       	movw	r22, r16
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <writestr_OLED>
			break;
    30ac:	cd bf       	out	0x3d, r28	; 61
    30ae:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    30b0:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    30b2:	48 c0       	rjmp	.+144    	; 0x3144 <report+0xffc>

		case 'V':					// Version
			get_VERSION(version);
    30b4:	6e 01       	movw	r12, r28
    30b6:	9f ef       	ldi	r25, 0xFF	; 255
    30b8:	c9 0e       	add	r12, r25
    30ba:	d1 1c       	adc	r13, r1
    30bc:	c6 01       	movw	r24, r12
    30be:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <get_VERSION>
			get_time(currenttime);
    30c2:	7e 01       	movw	r14, r28
    30c4:	86 ef       	ldi	r24, 0xF6	; 246
    30c6:	e8 1a       	sub	r14, r24
    30c8:	8e ef       	ldi	r24, 0xFE	; 254
    30ca:	f8 0a       	sbc	r15, r24
    30cc:	c7 01       	movw	r24, r14
    30ce:	0e 94 46 07 	call	0xe8c	; 0xe8c <get_time>
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
    30d2:	24 e3       	ldi	r18, 0x34	; 52
    30d4:	20 9f       	mul	r18, r16
    30d6:	c0 01       	movw	r24, r0
    30d8:	21 9f       	mul	r18, r17
    30da:	90 0d       	add	r25, r0
    30dc:	11 24       	eor	r1, r1
    30de:	86 5c       	subi	r24, 0xC6	; 198
    30e0:	97 4d       	sbci	r25, 0xD7	; 215
    30e2:	9f 93       	push	r25
    30e4:	8f 93       	push	r24
    30e6:	df 92       	push	r13
    30e8:	cf 92       	push	r12
    30ea:	ff 92       	push	r15
    30ec:	ef 92       	push	r14
    30ee:	ce 01       	movw	r24, r28
    30f0:	8c 5a       	subi	r24, 0xAC	; 172
    30f2:	9c 4f       	sbci	r25, 0xFC	; 252
    30f4:	9f 93       	push	r25
    30f6:	8f 93       	push	r24
    30f8:	8e 01       	movw	r16, r28
    30fa:	0f 5f       	subi	r16, 0xFF	; 255
    30fc:	1f 4f       	sbci	r17, 0xFF	; 255
    30fe:	1f 93       	push	r17
    3100:	0f 93       	push	r16
    3102:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			printLine(outbuf);
    3106:	c8 01       	movw	r24, r16
    3108:	0e 94 80 03 	call	0x700	; 0x700 <printLine>
			writestr_OLED(1, "specMech Version", 1);
    310c:	41 e0       	ldi	r20, 0x01	; 1
    310e:	60 e7       	ldi	r22, 0x70	; 112
    3110:	72 eb       	ldi	r23, 0xB2	; 178
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <writestr_OLED>
			get_VERSION(outbuf);
    3118:	c8 01       	movw	r24, r16
    311a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    311e:	42 e0       	ldi	r20, 0x02	; 2
    3120:	b8 01       	movw	r22, r16
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <writestr_OLED>
			break;
    3128:	cd bf       	out	0x3d, r28	; 61
    312a:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    312c:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    312e:	0a c0       	rjmp	.+20     	; 0x3144 <report+0xffc>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    3130:	62 ea       	ldi	r22, 0xA2	; 162
    3132:	74 eb       	ldi	r23, 0xB4	; 180
    3134:	8a ec       	ldi	r24, 0xCA	; 202
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
			return(ERROR);
    313c:	0f 2e       	mov	r0, r31
    313e:	f3 e6       	ldi	r31, 0x63	; 99
    3140:	ff 2e       	mov	r15, r31
    3142:	f0 2d       	mov	r31, r0
			break;
	}

	return(NOERROR);

}
    3144:	8f 2d       	mov	r24, r15
    3146:	c1 55       	subi	r28, 0x51	; 81
    3148:	dc 4f       	sbci	r29, 0xFC	; 252
    314a:	cd bf       	out	0x3d, r28	; 61
    314c:	de bf       	out	0x3e, r29	; 62
    314e:	df 91       	pop	r29
    3150:	cf 91       	pop	r28
    3152:	1f 91       	pop	r17
    3154:	0f 91       	pop	r16
    3156:	ff 90       	pop	r15
    3158:	ef 90       	pop	r14
    315a:	df 90       	pop	r13
    315c:	cf 90       	pop	r12
    315e:	bf 90       	pop	r11
    3160:	af 90       	pop	r10
    3162:	9f 90       	pop	r9
    3164:	8f 90       	pop	r8
    3166:	7f 90       	pop	r7
    3168:	6f 90       	pop	r6
    316a:	5f 90       	pop	r5
    316c:	4f 90       	pop	r4
    316e:	3f 90       	pop	r3
    3170:	2f 90       	pop	r2
    3172:	08 95       	ret

00003174 <crc16>:

-------------*/

	return(NOERROR);

}
    3174:	dc 01       	movw	r26, r24
    3176:	40 e0       	ldi	r20, 0x00	; 0
    3178:	50 e0       	ldi	r21, 0x00	; 0
    317a:	80 e0       	ldi	r24, 0x00	; 0
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	1b c0       	rjmp	.+54     	; 0x31b6 <crc16+0x42>
    3180:	fd 01       	movw	r30, r26
    3182:	e4 0f       	add	r30, r20
    3184:	f5 1f       	adc	r31, r21
    3186:	20 81       	ld	r18, Z
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	32 2f       	mov	r19, r18
    318c:	22 27       	eor	r18, r18
    318e:	82 27       	eor	r24, r18
    3190:	93 27       	eor	r25, r19
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	0c c0       	rjmp	.+24     	; 0x31ae <crc16+0x3a>
    3196:	99 23       	and	r25, r25
    3198:	3c f4       	brge	.+14     	; 0x31a8 <crc16+0x34>
    319a:	88 0f       	add	r24, r24
    319c:	99 1f       	adc	r25, r25
    319e:	31 e2       	ldi	r19, 0x21	; 33
    31a0:	83 27       	eor	r24, r19
    31a2:	30 e1       	ldi	r19, 0x10	; 16
    31a4:	93 27       	eor	r25, r19
    31a6:	02 c0       	rjmp	.+4      	; 0x31ac <crc16+0x38>
    31a8:	88 0f       	add	r24, r24
    31aa:	99 1f       	adc	r25, r25
    31ac:	2f 5f       	subi	r18, 0xFF	; 255
    31ae:	28 30       	cpi	r18, 0x08	; 8
    31b0:	90 f3       	brcs	.-28     	; 0x3196 <crc16+0x22>
    31b2:	4f 5f       	subi	r20, 0xFF	; 255
    31b4:	5f 4f       	sbci	r21, 0xFF	; 255
    31b6:	46 17       	cp	r20, r22
    31b8:	57 07       	cpc	r21, r23
    31ba:	10 f3       	brcs	.-60     	; 0x3180 <crc16+0xc>
    31bc:	08 95       	ret

000031be <get_FRAM_ENCSAVETIME>:
    31be:	ef 92       	push	r14
    31c0:	ff 92       	push	r15
    31c2:	1f 93       	push	r17
    31c4:	cf 93       	push	r28
    31c6:	df 93       	push	r29
    31c8:	cd b7       	in	r28, 0x3d	; 61
    31ca:	de b7       	in	r29, 0x3e	; 62
    31cc:	c6 57       	subi	r28, 0x76	; 118
    31ce:	d1 09       	sbc	r29, r1
    31d0:	cd bf       	out	0x3d, r28	; 61
    31d2:	de bf       	out	0x3e, r29	; 62
    31d4:	7c 01       	movw	r14, r24
    31d6:	86 e2       	ldi	r24, 0x26	; 38
    31d8:	ec eb       	ldi	r30, 0xBC	; 188
    31da:	f6 eb       	ldi	r31, 0xB6	; 182
    31dc:	de 01       	movw	r26, r28
    31de:	af 5a       	subi	r26, 0xAF	; 175
    31e0:	bf 4f       	sbci	r27, 0xFF	; 255
    31e2:	01 90       	ld	r0, Z+
    31e4:	0d 92       	st	X+, r0
    31e6:	8a 95       	dec	r24
    31e8:	e1 f7       	brne	.-8      	; 0x31e2 <get_FRAM_ENCSAVETIME+0x24>
    31ea:	24 e1       	ldi	r18, 0x14	; 20
    31ec:	a7 01       	movw	r20, r14
    31ee:	60 e2       	ldi	r22, 0x20	; 32
    31f0:	70 e0       	ldi	r23, 0x00	; 0
    31f2:	80 e5       	ldi	r24, 0x50	; 80
    31f4:	0e 94 69 08 	call	0x10d2	; 0x10d2 <read_FRAM>
    31f8:	18 2f       	mov	r17, r24
    31fa:	83 36       	cpi	r24, 0x63	; 99
    31fc:	b1 f4       	brne	.+44     	; 0x322a <get_FRAM_ENCSAVETIME+0x6c>
    31fe:	ce 01       	movw	r24, r28
    3200:	8f 5a       	subi	r24, 0xAF	; 175
    3202:	9f 4f       	sbci	r25, 0xFF	; 255
    3204:	9f 93       	push	r25
    3206:	8f 93       	push	r24
    3208:	80 55       	subi	r24, 0x50	; 80
    320a:	91 09       	sbc	r25, r1
    320c:	7c 01       	movw	r14, r24
    320e:	9f 93       	push	r25
    3210:	8f 93       	push	r24
    3212:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
    3216:	b7 01       	movw	r22, r14
    3218:	86 e3       	ldi	r24, 0x36	; 54
    321a:	91 e0       	ldi	r25, 0x01	; 1
    321c:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
    3220:	0f 90       	pop	r0
    3222:	0f 90       	pop	r0
    3224:	0f 90       	pop	r0
    3226:	0f 90       	pop	r0
    3228:	03 c0       	rjmp	.+6      	; 0x3230 <get_FRAM_ENCSAVETIME+0x72>
    322a:	f7 01       	movw	r30, r14
    322c:	13 8a       	std	Z+19, r1	; 0x13
    322e:	10 e0       	ldi	r17, 0x00	; 0
    3230:	81 2f       	mov	r24, r17
    3232:	ca 58       	subi	r28, 0x8A	; 138
    3234:	df 4f       	sbci	r29, 0xFF	; 255
    3236:	cd bf       	out	0x3d, r28	; 61
    3238:	de bf       	out	0x3e, r29	; 62
    323a:	df 91       	pop	r29
    323c:	cf 91       	pop	r28
    323e:	1f 91       	pop	r17
    3240:	ff 90       	pop	r15
    3242:	ef 90       	pop	r14
    3244:	08 95       	ret

00003246 <get_FRAM_MOTOR_ENCODER>:
    3246:	cf 92       	push	r12
    3248:	df 92       	push	r13
    324a:	ef 92       	push	r14
    324c:	ff 92       	push	r15
    324e:	0f 93       	push	r16
    3250:	1f 93       	push	r17
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
    325a:	c3 58       	subi	r28, 0x83	; 131
    325c:	d1 09       	sbc	r29, r1
    325e:	cd bf       	out	0x3d, r28	; 61
    3260:	de bf       	out	0x3e, r29	; 62
    3262:	8b 01       	movw	r16, r22
    3264:	9f e2       	ldi	r25, 0x2F	; 47
    3266:	e2 ee       	ldi	r30, 0xE2	; 226
    3268:	f6 eb       	ldi	r31, 0xB6	; 182
    326a:	de 01       	movw	r26, r28
    326c:	ab 5a       	subi	r26, 0xAB	; 171
    326e:	bf 4f       	sbci	r27, 0xFF	; 255
    3270:	01 90       	ld	r0, Z+
    3272:	0d 92       	st	X+, r0
    3274:	9a 95       	dec	r25
    3276:	e1 f7       	brne	.-8      	; 0x3270 <get_FRAM_MOTOR_ENCODER+0x2a>
    3278:	81 38       	cpi	r24, 0x81	; 129
    327a:	59 f0       	breq	.+22     	; 0x3292 <get_FRAM_MOTOR_ENCODER+0x4c>
    327c:	82 38       	cpi	r24, 0x82	; 130
    327e:	31 f0       	breq	.+12     	; 0x328c <get_FRAM_MOTOR_ENCODER+0x46>
    3280:	80 38       	cpi	r24, 0x80	; 128
    3282:	09 f0       	breq	.+2      	; 0x3286 <get_FRAM_MOTOR_ENCODER+0x40>
    3284:	69 c0       	rjmp	.+210    	; 0x3358 <get_FRAM_MOTOR_ENCODER+0x112>
    3286:	64 e1       	ldi	r22, 0x14	; 20
    3288:	70 e0       	ldi	r23, 0x00	; 0
    328a:	05 c0       	rjmp	.+10     	; 0x3296 <get_FRAM_MOTOR_ENCODER+0x50>
    328c:	6c e1       	ldi	r22, 0x1C	; 28
    328e:	70 e0       	ldi	r23, 0x00	; 0
    3290:	02 c0       	rjmp	.+4      	; 0x3296 <get_FRAM_MOTOR_ENCODER+0x50>
    3292:	68 e1       	ldi	r22, 0x18	; 24
    3294:	70 e0       	ldi	r23, 0x00	; 0
    3296:	f8 2e       	mov	r15, r24
    3298:	24 e0       	ldi	r18, 0x04	; 4
    329a:	ae 01       	movw	r20, r28
    329c:	4f 5a       	subi	r20, 0xAF	; 175
    329e:	5f 4f       	sbci	r21, 0xFF	; 255
    32a0:	80 e5       	ldi	r24, 0x50	; 80
    32a2:	0e 94 69 08 	call	0x10d2	; 0x10d2 <read_FRAM>
    32a6:	e8 2e       	mov	r14, r24
    32a8:	83 e6       	ldi	r24, 0x63	; 99
    32aa:	e8 12       	cpse	r14, r24
    32ac:	24 c0       	rjmp	.+72     	; 0x32f6 <get_FRAM_MOTOR_ENCODER+0xb0>
    32ae:	81 ec       	ldi	r24, 0xC1	; 193
    32b0:	8f 0d       	add	r24, r15
    32b2:	1f 92       	push	r1
    32b4:	8f 93       	push	r24
    32b6:	ce 01       	movw	r24, r28
    32b8:	8b 5a       	subi	r24, 0xAB	; 171
    32ba:	9f 4f       	sbci	r25, 0xFF	; 255
    32bc:	9f 93       	push	r25
    32be:	8f 93       	push	r24
    32c0:	fe 01       	movw	r30, r28
    32c2:	31 96       	adiw	r30, 0x01	; 1
    32c4:	6f 01       	movw	r12, r30
    32c6:	ff 93       	push	r31
    32c8:	ef 93       	push	r30
    32ca:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
    32ce:	b6 01       	movw	r22, r12
    32d0:	83 e9       	ldi	r24, 0x93	; 147
    32d2:	91 e0       	ldi	r25, 0x01	; 1
    32d4:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
    32d8:	8f ef       	ldi	r24, 0xFF	; 255
    32da:	9f ef       	ldi	r25, 0xFF	; 255
    32dc:	dc 01       	movw	r26, r24
    32de:	f8 01       	movw	r30, r16
    32e0:	80 83       	st	Z, r24
    32e2:	91 83       	std	Z+1, r25	; 0x01
    32e4:	a2 83       	std	Z+2, r26	; 0x02
    32e6:	b3 83       	std	Z+3, r27	; 0x03
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	35 c0       	rjmp	.+106    	; 0x3360 <get_FRAM_MOTOR_ENCODER+0x11a>
    32f6:	62 96       	adiw	r28, 0x12	; 18
    32f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    32fa:	62 97       	sbiw	r28, 0x12	; 18
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	a0 e0       	ldi	r26, 0x00	; 0
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	78 2f       	mov	r23, r24
    3304:	66 27       	eor	r22, r22
    3306:	55 27       	eor	r21, r21
    3308:	44 27       	eor	r20, r20
    330a:	63 96       	adiw	r28, 0x13	; 19
    330c:	9f ad       	ldd	r25, Y+63	; 0x3f
    330e:	63 97       	sbiw	r28, 0x13	; 19
    3310:	89 2f       	mov	r24, r25
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	a0 e0       	ldi	r26, 0x00	; 0
    3316:	b0 e0       	ldi	r27, 0x00	; 0
    3318:	dc 01       	movw	r26, r24
    331a:	99 27       	eor	r25, r25
    331c:	88 27       	eor	r24, r24
    331e:	84 2b       	or	r24, r20
    3320:	95 2b       	or	r25, r21
    3322:	a6 2b       	or	r26, r22
    3324:	b7 2b       	or	r27, r23
    3326:	64 96       	adiw	r28, 0x14	; 20
    3328:	4f ad       	ldd	r20, Y+63	; 0x3f
    332a:	64 97       	sbiw	r28, 0x14	; 20
    332c:	50 e0       	ldi	r21, 0x00	; 0
    332e:	60 e0       	ldi	r22, 0x00	; 0
    3330:	70 e0       	ldi	r23, 0x00	; 0
    3332:	76 2f       	mov	r23, r22
    3334:	65 2f       	mov	r22, r21
    3336:	54 2f       	mov	r21, r20
    3338:	44 27       	eor	r20, r20
    333a:	84 2b       	or	r24, r20
    333c:	95 2b       	or	r25, r21
    333e:	a6 2b       	or	r26, r22
    3340:	b7 2b       	or	r27, r23
    3342:	65 96       	adiw	r28, 0x15	; 21
    3344:	2f ad       	ldd	r18, Y+63	; 0x3f
    3346:	65 97       	sbiw	r28, 0x15	; 21
    3348:	82 2b       	or	r24, r18
    334a:	f8 01       	movw	r30, r16
    334c:	80 83       	st	Z, r24
    334e:	91 83       	std	Z+1, r25	; 0x01
    3350:	a2 83       	std	Z+2, r26	; 0x02
    3352:	b3 83       	std	Z+3, r27	; 0x03
    3354:	e1 2c       	mov	r14, r1
    3356:	04 c0       	rjmp	.+8      	; 0x3360 <get_FRAM_MOTOR_ENCODER+0x11a>
    3358:	0f 2e       	mov	r0, r31
    335a:	f3 e6       	ldi	r31, 0x63	; 99
    335c:	ef 2e       	mov	r14, r31
    335e:	f0 2d       	mov	r31, r0
    3360:	8e 2d       	mov	r24, r14
    3362:	cd 57       	subi	r28, 0x7D	; 125
    3364:	df 4f       	sbci	r29, 0xFF	; 255
    3366:	cd bf       	out	0x3d, r28	; 61
    3368:	de bf       	out	0x3e, r29	; 62
    336a:	df 91       	pop	r29
    336c:	cf 91       	pop	r28
    336e:	1f 91       	pop	r17
    3370:	0f 91       	pop	r16
    3372:	ff 90       	pop	r15
    3374:	ef 90       	pop	r14
    3376:	df 90       	pop	r13
    3378:	cf 90       	pop	r12
    337a:	08 95       	ret

0000337c <get_MOTOR>:
    337c:	3f 92       	push	r3
    337e:	4f 92       	push	r4
    3380:	5f 92       	push	r5
    3382:	6f 92       	push	r6
    3384:	7f 92       	push	r7
    3386:	8f 92       	push	r8
    3388:	9f 92       	push	r9
    338a:	af 92       	push	r10
    338c:	bf 92       	push	r11
    338e:	cf 92       	push	r12
    3390:	df 92       	push	r13
    3392:	ef 92       	push	r14
    3394:	ff 92       	push	r15
    3396:	0f 93       	push	r16
    3398:	1f 93       	push	r17
    339a:	cf 93       	push	r28
    339c:	df 93       	push	r29
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
    33a2:	ce 58       	subi	r28, 0x8E	; 142
    33a4:	d1 09       	sbc	r29, r1
    33a6:	cd bf       	out	0x3d, r28	; 61
    33a8:	de bf       	out	0x3e, r29	; 62
    33aa:	38 2e       	mov	r3, r24
    33ac:	7a 01       	movw	r14, r20
    33ae:	42 2e       	mov	r4, r18
    33b0:	8d b6       	in	r8, 0x3d	; 61
    33b2:	9e b6       	in	r9, 0x3e	; 62
    33b4:	a2 2e       	mov	r10, r18
    33b6:	b1 2c       	mov	r11, r1
    33b8:	c5 01       	movw	r24, r10
    33ba:	02 96       	adiw	r24, 0x02	; 2
    33bc:	35 01       	movw	r6, r10
    33be:	2f ef       	ldi	r18, 0xFF	; 255
    33c0:	62 1a       	sub	r6, r18
    33c2:	72 0a       	sbc	r7, r18
    33c4:	ed b7       	in	r30, 0x3d	; 61
    33c6:	fe b7       	in	r31, 0x3e	; 62
    33c8:	e8 1b       	sub	r30, r24
    33ca:	f9 0b       	sbc	r31, r25
    33cc:	ed bf       	out	0x3d, r30	; 61
    33ce:	fe bf       	out	0x3e, r31	; 62
    33d0:	2d b7       	in	r18, 0x3d	; 61
    33d2:	3e b7       	in	r19, 0x3e	; 62
    33d4:	2f 5f       	subi	r18, 0xFF	; 255
    33d6:	3f 4f       	sbci	r19, 0xFF	; 255
    33d8:	69 01       	movw	r12, r18
    33da:	89 01       	movw	r16, r18
    33dc:	80 e2       	ldi	r24, 0x20	; 32
    33de:	e1 e1       	ldi	r30, 0x11	; 17
    33e0:	f7 eb       	ldi	r31, 0xB7	; 183
    33e2:	de 01       	movw	r26, r28
    33e4:	af 5a       	subi	r26, 0xAF	; 175
    33e6:	bf 4f       	sbci	r27, 0xFF	; 255
    33e8:	01 90       	ld	r0, Z+
    33ea:	0d 92       	st	X+, r0
    33ec:	8a 95       	dec	r24
    33ee:	e1 f7       	brne	.-8      	; 0x33e8 <get_MOTOR+0x6c>
    33f0:	8e e1       	ldi	r24, 0x1E	; 30
    33f2:	e1 e3       	ldi	r30, 0x31	; 49
    33f4:	f7 eb       	ldi	r31, 0xB7	; 183
    33f6:	de 01       	movw	r26, r28
    33f8:	af 58       	subi	r26, 0x8F	; 143
    33fa:	bf 4f       	sbci	r27, 0xFF	; 255
    33fc:	01 90       	ld	r0, Z+
    33fe:	0d 92       	st	X+, r0
    3400:	8a 95       	dec	r24
    3402:	e1 f7       	brne	.-8      	; 0x33fc <get_MOTOR+0x80>
    3404:	68 94       	set
    3406:	55 24       	eor	r5, r5
    3408:	51 f8       	bld	r5, 1
    340a:	54 0c       	add	r5, r4
    340c:	10 92 42 2b 	sts	0x2B42, r1	; 0x802b42 <ser_recv1+0xff>
    3410:	50 92 41 2b 	sts	0x2B41, r5	; 0x802b41 <ser_recv1+0xfe>
    3414:	ed b7       	in	r30, 0x3d	; 61
    3416:	fe b7       	in	r31, 0x3e	; 62
    3418:	31 82       	std	Z+1, r3	; 0x01
    341a:	f9 01       	movw	r30, r18
    341c:	61 83       	std	Z+1, r22	; 0x01
    341e:	62 e0       	ldi	r22, 0x02	; 2
    3420:	70 e0       	ldi	r23, 0x00	; 0
    3422:	c9 01       	movw	r24, r18
    3424:	0e 94 ba 18 	call	0x3174	; 0x3174 <crc16>
    3428:	f6 01       	movw	r30, r12
    342a:	92 83       	std	Z+2, r25	; 0x02
    342c:	83 83       	std	Z+3, r24	; 0x03
    342e:	62 e0       	ldi	r22, 0x02	; 2
    3430:	c6 01       	movw	r24, r12
    3432:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <send_USART1>
    3436:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    343a:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
    343e:	24 c0       	rjmp	.+72     	; 0x3488 <get_MOTOR+0x10c>
    3440:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    3444:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    3448:	85 36       	cpi	r24, 0x65	; 101
    344a:	91 05       	cpc	r25, r1
    344c:	e8 f0       	brcs	.+58     	; 0x3488 <get_MOTOR+0x10c>
    344e:	81 ec       	ldi	r24, 0xC1	; 193
    3450:	83 0d       	add	r24, r3
    3452:	1f 92       	push	r1
    3454:	8f 93       	push	r24
    3456:	ce 01       	movw	r24, r28
    3458:	8f 5a       	subi	r24, 0xAF	; 175
    345a:	9f 4f       	sbci	r25, 0xFF	; 255
    345c:	9f 93       	push	r25
    345e:	8f 93       	push	r24
    3460:	8e 01       	movw	r16, r28
    3462:	0f 5f       	subi	r16, 0xFF	; 255
    3464:	1f 4f       	sbci	r17, 0xFF	; 255
    3466:	1f 93       	push	r17
    3468:	0f 93       	push	r16
    346a:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
    346e:	b8 01       	movw	r22, r16
    3470:	80 e3       	ldi	r24, 0x30	; 48
    3472:	91 e0       	ldi	r25, 0x01	; 1
    3474:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
    3478:	0f 90       	pop	r0
    347a:	0f 90       	pop	r0
    347c:	0f 90       	pop	r0
    347e:	0f 90       	pop	r0
    3480:	0f 90       	pop	r0
    3482:	0f 90       	pop	r0
    3484:	83 e6       	ldi	r24, 0x63	; 99
    3486:	56 c0       	rjmp	.+172    	; 0x3534 <get_MOTOR+0x1b8>
    3488:	90 91 42 2b 	lds	r25, 0x2B42	; 0x802b42 <ser_recv1+0xff>
    348c:	80 91 41 2b 	lds	r24, 0x2B41	; 0x802b41 <ser_recv1+0xfe>
    3490:	98 17       	cp	r25, r24
    3492:	b0 f2       	brcs	.-84     	; 0x3440 <get_MOTOR+0xc4>
    3494:	f5 01       	movw	r30, r10
    3496:	ed 5b       	subi	r30, 0xBD	; 189
    3498:	f5 4d       	sbci	r31, 0xD5	; 213
    349a:	a0 80       	ld	r10, Z
    349c:	b1 2c       	mov	r11, r1
    349e:	ba 2c       	mov	r11, r10
    34a0:	aa 24       	eor	r10, r10
    34a2:	f3 01       	movw	r30, r6
    34a4:	ed 5b       	subi	r30, 0xBD	; 189
    34a6:	f5 4d       	sbci	r31, 0xD5	; 213
    34a8:	80 81       	ld	r24, Z
    34aa:	a8 2a       	or	r10, r24
    34ac:	22 e0       	ldi	r18, 0x02	; 2
    34ae:	0b c0       	rjmp	.+22     	; 0x34c6 <get_MOTOR+0x14a>
    34b0:	82 2f       	mov	r24, r18
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	fc 01       	movw	r30, r24
    34b6:	ef 5b       	subi	r30, 0xBF	; 191
    34b8:	f5 4d       	sbci	r31, 0xD5	; 213
    34ba:	30 81       	ld	r19, Z
    34bc:	f8 01       	movw	r30, r16
    34be:	e8 0f       	add	r30, r24
    34c0:	f9 1f       	adc	r31, r25
    34c2:	30 83       	st	Z, r19
    34c4:	2f 5f       	subi	r18, 0xFF	; 255
    34c6:	25 15       	cp	r18, r5
    34c8:	98 f3       	brcs	.-26     	; 0x34b0 <get_MOTOR+0x134>
    34ca:	65 2d       	mov	r22, r5
    34cc:	70 e0       	ldi	r23, 0x00	; 0
    34ce:	c6 01       	movw	r24, r12
    34d0:	0e 94 ba 18 	call	0x3174	; 0x3174 <crc16>
    34d4:	a8 16       	cp	r10, r24
    34d6:	b9 06       	cpc	r11, r25
    34d8:	49 f1       	breq	.+82     	; 0x352c <get_MOTOR+0x1b0>
    34da:	81 ec       	ldi	r24, 0xC1	; 193
    34dc:	83 0d       	add	r24, r3
    34de:	1f 92       	push	r1
    34e0:	8f 93       	push	r24
    34e2:	ce 01       	movw	r24, r28
    34e4:	8f 58       	subi	r24, 0x8F	; 143
    34e6:	9f 4f       	sbci	r25, 0xFF	; 255
    34e8:	9f 93       	push	r25
    34ea:	8f 93       	push	r24
    34ec:	8e 01       	movw	r16, r28
    34ee:	0f 5f       	subi	r16, 0xFF	; 255
    34f0:	1f 4f       	sbci	r17, 0xFF	; 255
    34f2:	1f 93       	push	r17
    34f4:	0f 93       	push	r16
    34f6:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
    34fa:	b8 01       	movw	r22, r16
    34fc:	81 e3       	ldi	r24, 0x31	; 49
    34fe:	91 e0       	ldi	r25, 0x01	; 1
    3500:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	0f 90       	pop	r0
    350a:	0f 90       	pop	r0
    350c:	0f 90       	pop	r0
    350e:	0f 90       	pop	r0
    3510:	83 e6       	ldi	r24, 0x63	; 99
    3512:	10 c0       	rjmp	.+32     	; 0x3534 <get_MOTOR+0x1b8>
    3514:	82 2f       	mov	r24, r18
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	f7 01       	movw	r30, r14
    351a:	e8 0f       	add	r30, r24
    351c:	f9 1f       	adc	r31, r25
    351e:	dc 01       	movw	r26, r24
    3520:	ad 5b       	subi	r26, 0xBD	; 189
    3522:	b5 4d       	sbci	r27, 0xD5	; 213
    3524:	8c 91       	ld	r24, X
    3526:	80 83       	st	Z, r24
    3528:	2f 5f       	subi	r18, 0xFF	; 255
    352a:	01 c0       	rjmp	.+2      	; 0x352e <get_MOTOR+0x1b2>
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	24 15       	cp	r18, r4
    3530:	88 f3       	brcs	.-30     	; 0x3514 <get_MOTOR+0x198>
    3532:	80 e0       	ldi	r24, 0x00	; 0
    3534:	8d be       	out	0x3d, r8	; 61
    3536:	9e be       	out	0x3e, r9	; 62
    3538:	c2 57       	subi	r28, 0x72	; 114
    353a:	df 4f       	sbci	r29, 0xFF	; 255
    353c:	cd bf       	out	0x3d, r28	; 61
    353e:	de bf       	out	0x3e, r29	; 62
    3540:	df 91       	pop	r29
    3542:	cf 91       	pop	r28
    3544:	1f 91       	pop	r17
    3546:	0f 91       	pop	r16
    3548:	ff 90       	pop	r15
    354a:	ef 90       	pop	r14
    354c:	df 90       	pop	r13
    354e:	cf 90       	pop	r12
    3550:	bf 90       	pop	r11
    3552:	af 90       	pop	r10
    3554:	9f 90       	pop	r9
    3556:	8f 90       	pop	r8
    3558:	7f 90       	pop	r7
    355a:	6f 90       	pop	r6
    355c:	5f 90       	pop	r5
    355e:	4f 90       	pop	r4
    3560:	3f 90       	pop	r3
    3562:	08 95       	ret

00003564 <get_MOTOR_CURRENT>:
    3564:	cf 92       	push	r12
    3566:	df 92       	push	r13
    3568:	ef 92       	push	r14
    356a:	ff 92       	push	r15
    356c:	0f 93       	push	r16
    356e:	1f 93       	push	r17
    3570:	cf 93       	push	r28
    3572:	df 93       	push	r29
    3574:	cd b7       	in	r28, 0x3d	; 61
    3576:	de b7       	in	r29, 0x3e	; 62
    3578:	cd 57       	subi	r28, 0x7D	; 125
    357a:	d1 09       	sbc	r29, r1
    357c:	cd bf       	out	0x3d, r28	; 61
    357e:	de bf       	out	0x3e, r29	; 62
    3580:	e8 2e       	mov	r14, r24
    3582:	8b 01       	movw	r16, r22
    3584:	89 e2       	ldi	r24, 0x29	; 41
    3586:	ef e4       	ldi	r30, 0x4F	; 79
    3588:	f7 eb       	ldi	r31, 0xB7	; 183
    358a:	de 01       	movw	r26, r28
    358c:	11 96       	adiw	r26, 0x01	; 1
    358e:	01 90       	ld	r0, Z+
    3590:	0d 92       	st	X+, r0
    3592:	8a 95       	dec	r24
    3594:	e1 f7       	brne	.-8      	; 0x358e <get_MOTOR_CURRENT+0x2a>
    3596:	24 e0       	ldi	r18, 0x04	; 4
    3598:	ae 01       	movw	r20, r28
    359a:	46 58       	subi	r20, 0x86	; 134
    359c:	5f 4f       	sbci	r21, 0xFF	; 255
    359e:	61 e3       	ldi	r22, 0x31	; 49
    35a0:	8e 2d       	mov	r24, r14
    35a2:	0e 94 be 19 	call	0x337c	; 0x337c <get_MOTOR>
    35a6:	f8 2e       	mov	r15, r24
    35a8:	83 e6       	ldi	r24, 0x63	; 99
    35aa:	f8 12       	cpse	r15, r24
    35ac:	21 c0       	rjmp	.+66     	; 0x35f0 <get_MOTOR_CURRENT+0x8c>
    35ae:	81 ec       	ldi	r24, 0xC1	; 193
    35b0:	8e 0d       	add	r24, r14
    35b2:	1f 92       	push	r1
    35b4:	8f 93       	push	r24
    35b6:	ce 01       	movw	r24, r28
    35b8:	01 96       	adiw	r24, 0x01	; 1
    35ba:	9f 93       	push	r25
    35bc:	8f 93       	push	r24
    35be:	6e 01       	movw	r12, r28
    35c0:	ea e2       	ldi	r30, 0x2A	; 42
    35c2:	ce 0e       	add	r12, r30
    35c4:	d1 1c       	adc	r13, r1
    35c6:	df 92       	push	r13
    35c8:	cf 92       	push	r12
    35ca:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
    35ce:	b6 01       	movw	r22, r12
    35d0:	86 e3       	ldi	r24, 0x36	; 54
    35d2:	91 e0       	ldi	r25, 0x01	; 1
    35d4:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
    35d8:	8f ef       	ldi	r24, 0xFF	; 255
    35da:	9f ef       	ldi	r25, 0xFF	; 255
    35dc:	f8 01       	movw	r30, r16
    35de:	80 83       	st	Z, r24
    35e0:	91 83       	std	Z+1, r25	; 0x01
    35e2:	0f 90       	pop	r0
    35e4:	0f 90       	pop	r0
    35e6:	0f 90       	pop	r0
    35e8:	0f 90       	pop	r0
    35ea:	0f 90       	pop	r0
    35ec:	0f 90       	pop	r0
    35ee:	19 c0       	rjmp	.+50     	; 0x3622 <get_MOTOR_CURRENT+0xbe>
    35f0:	eb 96       	adiw	r28, 0x3b	; 59
    35f2:	8f ad       	ldd	r24, Y+63	; 0x3f
    35f4:	eb 97       	sbiw	r28, 0x3b	; 59
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	98 2f       	mov	r25, r24
    35fa:	88 27       	eor	r24, r24
    35fc:	ec 96       	adiw	r28, 0x3c	; 60
    35fe:	2f ad       	ldd	r18, Y+63	; 0x3f
    3600:	ec 97       	sbiw	r28, 0x3c	; 60
    3602:	82 2b       	or	r24, r18
    3604:	9c 01       	movw	r18, r24
    3606:	22 0f       	add	r18, r18
    3608:	33 1f       	adc	r19, r19
    360a:	88 0f       	add	r24, r24
    360c:	99 1f       	adc	r25, r25
    360e:	88 0f       	add	r24, r24
    3610:	99 1f       	adc	r25, r25
    3612:	88 0f       	add	r24, r24
    3614:	99 1f       	adc	r25, r25
    3616:	82 0f       	add	r24, r18
    3618:	93 1f       	adc	r25, r19
    361a:	f8 01       	movw	r30, r16
    361c:	80 83       	st	Z, r24
    361e:	91 83       	std	Z+1, r25	; 0x01
    3620:	f1 2c       	mov	r15, r1
    3622:	8f 2d       	mov	r24, r15
    3624:	c3 58       	subi	r28, 0x83	; 131
    3626:	df 4f       	sbci	r29, 0xFF	; 255
    3628:	cd bf       	out	0x3d, r28	; 61
    362a:	de bf       	out	0x3e, r29	; 62
    362c:	df 91       	pop	r29
    362e:	cf 91       	pop	r28
    3630:	1f 91       	pop	r17
    3632:	0f 91       	pop	r16
    3634:	ff 90       	pop	r15
    3636:	ef 90       	pop	r14
    3638:	df 90       	pop	r13
    363a:	cf 90       	pop	r12
    363c:	08 95       	ret

0000363e <get_MOTOR_ENCODER>:
    363e:	ef 92       	push	r14
    3640:	ff 92       	push	r15
    3642:	0f 93       	push	r16
    3644:	1f 93       	push	r17
    3646:	cf 93       	push	r28
    3648:	df 93       	push	r29
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
    364e:	ce 57       	subi	r28, 0x7E	; 126
    3650:	d1 09       	sbc	r29, r1
    3652:	cd bf       	out	0x3d, r28	; 61
    3654:	de bf       	out	0x3e, r29	; 62
    3656:	e8 2e       	mov	r14, r24
    3658:	8b 01       	movw	r16, r22
    365a:	89 e2       	ldi	r24, 0x29	; 41
    365c:	e8 e7       	ldi	r30, 0x78	; 120
    365e:	f7 eb       	ldi	r31, 0xB7	; 183
    3660:	de 01       	movw	r26, r28
    3662:	aa 5a       	subi	r26, 0xAA	; 170
    3664:	bf 4f       	sbci	r27, 0xFF	; 255
    3666:	01 90       	ld	r0, Z+
    3668:	0d 92       	st	X+, r0
    366a:	8a 95       	dec	r24
    366c:	e1 f7       	brne	.-8      	; 0x3666 <get_MOTOR_ENCODER+0x28>
    366e:	25 e0       	ldi	r18, 0x05	; 5
    3670:	ae 01       	movw	r20, r28
    3672:	4f 5a       	subi	r20, 0xAF	; 175
    3674:	5f 4f       	sbci	r21, 0xFF	; 255
    3676:	60 e1       	ldi	r22, 0x10	; 16
    3678:	8e 2d       	mov	r24, r14
    367a:	0e 94 be 19 	call	0x337c	; 0x337c <get_MOTOR>
    367e:	f8 2e       	mov	r15, r24
    3680:	83 e6       	ldi	r24, 0x63	; 99
    3682:	f8 12       	cpse	r15, r24
    3684:	1c c0       	rjmp	.+56     	; 0x36be <get_MOTOR_ENCODER+0x80>
    3686:	81 ec       	ldi	r24, 0xC1	; 193
    3688:	8e 0d       	add	r24, r14
    368a:	1f 92       	push	r1
    368c:	8f 93       	push	r24
    368e:	ce 01       	movw	r24, r28
    3690:	8a 5a       	subi	r24, 0xAA	; 170
    3692:	9f 4f       	sbci	r25, 0xFF	; 255
    3694:	9f 93       	push	r25
    3696:	8f 93       	push	r24
    3698:	8e 01       	movw	r16, r28
    369a:	0f 5f       	subi	r16, 0xFF	; 255
    369c:	1f 4f       	sbci	r17, 0xFF	; 255
    369e:	1f 93       	push	r17
    36a0:	0f 93       	push	r16
    36a2:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
    36a6:	b8 01       	movw	r22, r16
    36a8:	86 e3       	ldi	r24, 0x36	; 54
    36aa:	91 e0       	ldi	r25, 0x01	; 1
    36ac:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
    36b0:	0f 90       	pop	r0
    36b2:	0f 90       	pop	r0
    36b4:	0f 90       	pop	r0
    36b6:	0f 90       	pop	r0
    36b8:	0f 90       	pop	r0
    36ba:	0f 90       	pop	r0
    36bc:	30 c0       	rjmp	.+96     	; 0x371e <get_MOTOR_ENCODER+0xe0>
    36be:	62 96       	adiw	r28, 0x12	; 18
    36c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    36c2:	62 97       	sbiw	r28, 0x12	; 18
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	a0 e0       	ldi	r26, 0x00	; 0
    36c8:	b0 e0       	ldi	r27, 0x00	; 0
    36ca:	78 2f       	mov	r23, r24
    36cc:	66 27       	eor	r22, r22
    36ce:	55 27       	eor	r21, r21
    36d0:	44 27       	eor	r20, r20
    36d2:	63 96       	adiw	r28, 0x13	; 19
    36d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    36d6:	63 97       	sbiw	r28, 0x13	; 19
    36d8:	89 2f       	mov	r24, r25
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	a0 e0       	ldi	r26, 0x00	; 0
    36de:	b0 e0       	ldi	r27, 0x00	; 0
    36e0:	dc 01       	movw	r26, r24
    36e2:	99 27       	eor	r25, r25
    36e4:	88 27       	eor	r24, r24
    36e6:	84 2b       	or	r24, r20
    36e8:	95 2b       	or	r25, r21
    36ea:	a6 2b       	or	r26, r22
    36ec:	b7 2b       	or	r27, r23
    36ee:	64 96       	adiw	r28, 0x14	; 20
    36f0:	4f ad       	ldd	r20, Y+63	; 0x3f
    36f2:	64 97       	sbiw	r28, 0x14	; 20
    36f4:	50 e0       	ldi	r21, 0x00	; 0
    36f6:	60 e0       	ldi	r22, 0x00	; 0
    36f8:	70 e0       	ldi	r23, 0x00	; 0
    36fa:	76 2f       	mov	r23, r22
    36fc:	65 2f       	mov	r22, r21
    36fe:	54 2f       	mov	r21, r20
    3700:	44 27       	eor	r20, r20
    3702:	84 2b       	or	r24, r20
    3704:	95 2b       	or	r25, r21
    3706:	a6 2b       	or	r26, r22
    3708:	b7 2b       	or	r27, r23
    370a:	65 96       	adiw	r28, 0x15	; 21
    370c:	2f ad       	ldd	r18, Y+63	; 0x3f
    370e:	65 97       	sbiw	r28, 0x15	; 21
    3710:	82 2b       	or	r24, r18
    3712:	f8 01       	movw	r30, r16
    3714:	80 83       	st	Z, r24
    3716:	91 83       	std	Z+1, r25	; 0x01
    3718:	a2 83       	std	Z+2, r26	; 0x02
    371a:	b3 83       	std	Z+3, r27	; 0x03
    371c:	f1 2c       	mov	r15, r1
    371e:	8f 2d       	mov	r24, r15
    3720:	c2 58       	subi	r28, 0x82	; 130
    3722:	df 4f       	sbci	r29, 0xFF	; 255
    3724:	cd bf       	out	0x3d, r28	; 61
    3726:	de bf       	out	0x3e, r29	; 62
    3728:	df 91       	pop	r29
    372a:	cf 91       	pop	r28
    372c:	1f 91       	pop	r17
    372e:	0f 91       	pop	r16
    3730:	ff 90       	pop	r15
    3732:	ef 90       	pop	r14
    3734:	08 95       	ret

00003736 <get_MOTOR_FLOAT>:
    3736:	cf 92       	push	r12
    3738:	df 92       	push	r13
    373a:	ef 92       	push	r14
    373c:	ff 92       	push	r15
    373e:	0f 93       	push	r16
    3740:	1f 93       	push	r17
    3742:	cf 93       	push	r28
    3744:	df 93       	push	r29
    3746:	cd b7       	in	r28, 0x3d	; 61
    3748:	de b7       	in	r29, 0x3e	; 62
    374a:	c9 57       	subi	r28, 0x79	; 121
    374c:	d1 09       	sbc	r29, r1
    374e:	cd bf       	out	0x3d, r28	; 61
    3750:	de bf       	out	0x3e, r29	; 62
    3752:	e8 2e       	mov	r14, r24
    3754:	8a 01       	movw	r16, r20
    3756:	87 e2       	ldi	r24, 0x27	; 39
    3758:	e1 ea       	ldi	r30, 0xA1	; 161
    375a:	f7 eb       	ldi	r31, 0xB7	; 183
    375c:	de 01       	movw	r26, r28
    375e:	ad 5a       	subi	r26, 0xAD	; 173
    3760:	bf 4f       	sbci	r27, 0xFF	; 255
    3762:	01 90       	ld	r0, Z+
    3764:	0d 92       	st	X+, r0
    3766:	8a 95       	dec	r24
    3768:	e1 f7       	brne	.-8      	; 0x3762 <get_MOTOR_FLOAT+0x2c>
    376a:	22 e0       	ldi	r18, 0x02	; 2
    376c:	ae 01       	movw	r20, r28
    376e:	4f 5a       	subi	r20, 0xAF	; 175
    3770:	5f 4f       	sbci	r21, 0xFF	; 255
    3772:	8e 2d       	mov	r24, r14
    3774:	0e 94 be 19 	call	0x337c	; 0x337c <get_MOTOR>
    3778:	f8 2e       	mov	r15, r24
    377a:	83 e6       	ldi	r24, 0x63	; 99
    377c:	f8 12       	cpse	r15, r24
    377e:	25 c0       	rjmp	.+74     	; 0x37ca <get_MOTOR_FLOAT+0x94>
    3780:	81 ec       	ldi	r24, 0xC1	; 193
    3782:	8e 0d       	add	r24, r14
    3784:	1f 92       	push	r1
    3786:	8f 93       	push	r24
    3788:	ce 01       	movw	r24, r28
    378a:	8d 5a       	subi	r24, 0xAD	; 173
    378c:	9f 4f       	sbci	r25, 0xFF	; 255
    378e:	9f 93       	push	r25
    3790:	8f 93       	push	r24
    3792:	fe 01       	movw	r30, r28
    3794:	31 96       	adiw	r30, 0x01	; 1
    3796:	6f 01       	movw	r12, r30
    3798:	ff 93       	push	r31
    379a:	ef 93       	push	r30
    379c:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
    37a0:	b6 01       	movw	r22, r12
    37a2:	86 e3       	ldi	r24, 0x36	; 54
    37a4:	91 e0       	ldi	r25, 0x01	; 1
    37a6:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	90 e8       	ldi	r25, 0x80	; 128
    37ae:	a6 e2       	ldi	r26, 0x26	; 38
    37b0:	b4 ec       	ldi	r27, 0xC4	; 196
    37b2:	f8 01       	movw	r30, r16
    37b4:	80 83       	st	Z, r24
    37b6:	91 83       	std	Z+1, r25	; 0x01
    37b8:	a2 83       	std	Z+2, r26	; 0x02
    37ba:	b3 83       	std	Z+3, r27	; 0x03
    37bc:	0f 90       	pop	r0
    37be:	0f 90       	pop	r0
    37c0:	0f 90       	pop	r0
    37c2:	0f 90       	pop	r0
    37c4:	0f 90       	pop	r0
    37c6:	0f 90       	pop	r0
    37c8:	1c c0       	rjmp	.+56     	; 0x3802 <get_MOTOR_FLOAT+0xcc>
    37ca:	62 96       	adiw	r28, 0x12	; 18
    37cc:	6f ad       	ldd	r22, Y+63	; 0x3f
    37ce:	62 97       	sbiw	r28, 0x12	; 18
    37d0:	70 e0       	ldi	r23, 0x00	; 0
    37d2:	76 2f       	mov	r23, r22
    37d4:	66 27       	eor	r22, r22
    37d6:	63 96       	adiw	r28, 0x13	; 19
    37d8:	8f ad       	ldd	r24, Y+63	; 0x3f
    37da:	63 97       	sbiw	r28, 0x13	; 19
    37dc:	68 2b       	or	r22, r24
    37de:	07 2e       	mov	r0, r23
    37e0:	00 0c       	add	r0, r0
    37e2:	88 0b       	sbc	r24, r24
    37e4:	99 0b       	sbc	r25, r25
    37e6:	0e 94 b0 30 	call	0x6160	; 0x6160 <__floatsisf>
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	40 e2       	ldi	r20, 0x20	; 32
    37f0:	51 e4       	ldi	r21, 0x41	; 65
    37f2:	0e 94 06 30 	call	0x600c	; 0x600c <__divsf3>
    37f6:	f8 01       	movw	r30, r16
    37f8:	60 83       	st	Z, r22
    37fa:	71 83       	std	Z+1, r23	; 0x01
    37fc:	82 83       	std	Z+2, r24	; 0x02
    37fe:	93 83       	std	Z+3, r25	; 0x03
    3800:	f1 2c       	mov	r15, r1
    3802:	8f 2d       	mov	r24, r15
    3804:	c7 58       	subi	r28, 0x87	; 135
    3806:	df 4f       	sbci	r29, 0xFF	; 255
    3808:	cd bf       	out	0x3d, r28	; 61
    380a:	de bf       	out	0x3e, r29	; 62
    380c:	df 91       	pop	r29
    380e:	cf 91       	pop	r28
    3810:	1f 91       	pop	r17
    3812:	0f 91       	pop	r16
    3814:	ff 90       	pop	r15
    3816:	ef 90       	pop	r14
    3818:	df 90       	pop	r13
    381a:	cf 90       	pop	r12
    381c:	08 95       	ret

0000381e <get_MOTOR_MAXCURRENT>:
    381e:	cf 92       	push	r12
    3820:	df 92       	push	r13
    3822:	ef 92       	push	r14
    3824:	ff 92       	push	r15
    3826:	0f 93       	push	r16
    3828:	1f 93       	push	r17
    382a:	cf 93       	push	r28
    382c:	df 93       	push	r29
    382e:	cd b7       	in	r28, 0x3d	; 61
    3830:	de b7       	in	r29, 0x3e	; 62
    3832:	c4 58       	subi	r28, 0x84	; 132
    3834:	d1 09       	sbc	r29, r1
    3836:	cd bf       	out	0x3d, r28	; 61
    3838:	de bf       	out	0x3e, r29	; 62
    383a:	e8 2e       	mov	r14, r24
    383c:	8b 01       	movw	r16, r22
    383e:	8c e2       	ldi	r24, 0x2C	; 44
    3840:	e8 ec       	ldi	r30, 0xC8	; 200
    3842:	f7 eb       	ldi	r31, 0xB7	; 183
    3844:	de 01       	movw	r26, r28
    3846:	11 96       	adiw	r26, 0x01	; 1
    3848:	01 90       	ld	r0, Z+
    384a:	0d 92       	st	X+, r0
    384c:	8a 95       	dec	r24
    384e:	e1 f7       	brne	.-8      	; 0x3848 <get_MOTOR_MAXCURRENT+0x2a>
    3850:	28 e0       	ldi	r18, 0x08	; 8
    3852:	ae 01       	movw	r20, r28
    3854:	43 58       	subi	r20, 0x83	; 131
    3856:	5f 4f       	sbci	r21, 0xFF	; 255
    3858:	67 e8       	ldi	r22, 0x87	; 135
    385a:	8e 2d       	mov	r24, r14
    385c:	0e 94 be 19 	call	0x337c	; 0x337c <get_MOTOR>
    3860:	f8 2e       	mov	r15, r24
    3862:	83 e6       	ldi	r24, 0x63	; 99
    3864:	f8 12       	cpse	r15, r24
    3866:	1b c0       	rjmp	.+54     	; 0x389e <get_MOTOR_MAXCURRENT+0x80>
    3868:	81 ec       	ldi	r24, 0xC1	; 193
    386a:	8e 0d       	add	r24, r14
    386c:	1f 92       	push	r1
    386e:	8f 93       	push	r24
    3870:	ce 01       	movw	r24, r28
    3872:	01 96       	adiw	r24, 0x01	; 1
    3874:	9f 93       	push	r25
    3876:	8f 93       	push	r24
    3878:	8e 01       	movw	r16, r28
    387a:	03 5d       	subi	r16, 0xD3	; 211
    387c:	1f 4f       	sbci	r17, 0xFF	; 255
    387e:	1f 93       	push	r17
    3880:	0f 93       	push	r16
    3882:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
    3886:	b8 01       	movw	r22, r16
    3888:	86 e3       	ldi	r24, 0x36	; 54
    388a:	91 e0       	ldi	r25, 0x01	; 1
    388c:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	0f 90       	pop	r0
    389a:	0f 90       	pop	r0
    389c:	45 c0       	rjmp	.+138    	; 0x3928 <get_MOTOR_MAXCURRENT+0x10a>
    389e:	ee 96       	adiw	r28, 0x3e	; 62
    38a0:	8f ad       	ldd	r24, Y+63	; 0x3f
    38a2:	ee 97       	sbiw	r28, 0x3e	; 62
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	a0 e0       	ldi	r26, 0x00	; 0
    38a8:	b0 e0       	ldi	r27, 0x00	; 0
    38aa:	f8 2e       	mov	r15, r24
    38ac:	ee 24       	eor	r14, r14
    38ae:	dd 24       	eor	r13, r13
    38b0:	cc 24       	eor	r12, r12
    38b2:	ef 96       	adiw	r28, 0x3f	; 63
    38b4:	4f ad       	ldd	r20, Y+63	; 0x3f
    38b6:	ef 97       	sbiw	r28, 0x3f	; 63
    38b8:	50 e0       	ldi	r21, 0x00	; 0
    38ba:	60 e0       	ldi	r22, 0x00	; 0
    38bc:	70 e0       	ldi	r23, 0x00	; 0
    38be:	da 01       	movw	r26, r20
    38c0:	99 27       	eor	r25, r25
    38c2:	88 27       	eor	r24, r24
    38c4:	8c 29       	or	r24, r12
    38c6:	9d 29       	or	r25, r13
    38c8:	ae 29       	or	r26, r14
    38ca:	bf 29       	or	r27, r15
    38cc:	c1 58       	subi	r28, 0x81	; 129
    38ce:	df 4f       	sbci	r29, 0xFF	; 255
    38d0:	48 81       	ld	r20, Y
    38d2:	cf 57       	subi	r28, 0x7F	; 127
    38d4:	d0 40       	sbci	r29, 0x00	; 0
    38d6:	50 e0       	ldi	r21, 0x00	; 0
    38d8:	60 e0       	ldi	r22, 0x00	; 0
    38da:	70 e0       	ldi	r23, 0x00	; 0
    38dc:	76 2f       	mov	r23, r22
    38de:	65 2f       	mov	r22, r21
    38e0:	54 2f       	mov	r21, r20
    38e2:	44 27       	eor	r20, r20
    38e4:	84 2b       	or	r24, r20
    38e6:	95 2b       	or	r25, r21
    38e8:	a6 2b       	or	r26, r22
    38ea:	b7 2b       	or	r27, r23
    38ec:	c0 58       	subi	r28, 0x80	; 128
    38ee:	df 4f       	sbci	r29, 0xFF	; 255
    38f0:	28 81       	ld	r18, Y
    38f2:	c0 58       	subi	r28, 0x80	; 128
    38f4:	d0 40       	sbci	r29, 0x00	; 0
    38f6:	82 2b       	or	r24, r18
    38f8:	88 0f       	add	r24, r24
    38fa:	99 1f       	adc	r25, r25
    38fc:	aa 1f       	adc	r26, r26
    38fe:	bb 1f       	adc	r27, r27
    3900:	ac 01       	movw	r20, r24
    3902:	bd 01       	movw	r22, r26
    3904:	44 0f       	add	r20, r20
    3906:	55 1f       	adc	r21, r21
    3908:	66 1f       	adc	r22, r22
    390a:	77 1f       	adc	r23, r23
    390c:	44 0f       	add	r20, r20
    390e:	55 1f       	adc	r21, r21
    3910:	66 1f       	adc	r22, r22
    3912:	77 1f       	adc	r23, r23
    3914:	84 0f       	add	r24, r20
    3916:	95 1f       	adc	r25, r21
    3918:	a6 1f       	adc	r26, r22
    391a:	b7 1f       	adc	r27, r23
    391c:	f8 01       	movw	r30, r16
    391e:	80 83       	st	Z, r24
    3920:	91 83       	std	Z+1, r25	; 0x01
    3922:	a2 83       	std	Z+2, r26	; 0x02
    3924:	b3 83       	std	Z+3, r27	; 0x03
    3926:	f1 2c       	mov	r15, r1
    3928:	8f 2d       	mov	r24, r15
    392a:	cc 57       	subi	r28, 0x7C	; 124
    392c:	df 4f       	sbci	r29, 0xFF	; 255
    392e:	cd bf       	out	0x3d, r28	; 61
    3930:	de bf       	out	0x3e, r29	; 62
    3932:	df 91       	pop	r29
    3934:	cf 91       	pop	r28
    3936:	1f 91       	pop	r17
    3938:	0f 91       	pop	r16
    393a:	ff 90       	pop	r15
    393c:	ef 90       	pop	r14
    393e:	df 90       	pop	r13
    3940:	cf 90       	pop	r12
    3942:	08 95       	ret

00003944 <get_MOTOR_PID>:
    3944:	ef 92       	push	r14
    3946:	ff 92       	push	r15
    3948:	0f 93       	push	r16
    394a:	1f 93       	push	r17
    394c:	cf 93       	push	r28
    394e:	df 93       	push	r29
    3950:	cd b7       	in	r28, 0x3d	; 61
    3952:	de b7       	in	r29, 0x3e	; 62
    3954:	c1 59       	subi	r28, 0x91	; 145
    3956:	d1 09       	sbc	r29, r1
    3958:	cd bf       	out	0x3d, r28	; 61
    395a:	de bf       	out	0x3e, r29	; 62
    395c:	f8 2e       	mov	r15, r24
    395e:	8b 01       	movw	r16, r22
    3960:	85 e2       	ldi	r24, 0x25	; 37
    3962:	e4 ef       	ldi	r30, 0xF4	; 244
    3964:	f7 eb       	ldi	r31, 0xB7	; 183
    3966:	de 01       	movw	r26, r28
    3968:	11 96       	adiw	r26, 0x01	; 1
    396a:	01 90       	ld	r0, Z+
    396c:	0d 92       	st	X+, r0
    396e:	8a 95       	dec	r24
    3970:	e1 f7       	brne	.-8      	; 0x396a <get_MOTOR_PID+0x26>
    3972:	2c e1       	ldi	r18, 0x1C	; 28
    3974:	ae 01       	movw	r20, r28
    3976:	4a 58       	subi	r20, 0x8A	; 138
    3978:	5f 4f       	sbci	r21, 0xFF	; 255
    397a:	6f e3       	ldi	r22, 0x3F	; 63
    397c:	8f 2d       	mov	r24, r15
    397e:	0e 94 be 19 	call	0x337c	; 0x337c <get_MOTOR>
    3982:	e8 2e       	mov	r14, r24
    3984:	83 e6       	ldi	r24, 0x63	; 99
    3986:	e8 12       	cpse	r14, r24
    3988:	1b c0       	rjmp	.+54     	; 0x39c0 <get_MOTOR_PID+0x7c>
    398a:	81 ec       	ldi	r24, 0xC1	; 193
    398c:	8f 0d       	add	r24, r15
    398e:	1f 92       	push	r1
    3990:	8f 93       	push	r24
    3992:	ce 01       	movw	r24, r28
    3994:	01 96       	adiw	r24, 0x01	; 1
    3996:	9f 93       	push	r25
    3998:	8f 93       	push	r24
    399a:	8e 01       	movw	r16, r28
    399c:	0a 5d       	subi	r16, 0xDA	; 218
    399e:	1f 4f       	sbci	r17, 0xFF	; 255
    39a0:	1f 93       	push	r17
    39a2:	0f 93       	push	r16
    39a4:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
    39a8:	b8 01       	movw	r22, r16
    39aa:	86 e3       	ldi	r24, 0x36	; 54
    39ac:	91 e0       	ldi	r25, 0x01	; 1
    39ae:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
    39b2:	0f 90       	pop	r0
    39b4:	0f 90       	pop	r0
    39b6:	0f 90       	pop	r0
    39b8:	0f 90       	pop	r0
    39ba:	0f 90       	pop	r0
    39bc:	0f 90       	pop	r0
    39be:	e5 c1       	rjmp	.+970    	; 0x3d8a <get_MOTOR_PID+0x446>
    39c0:	e7 96       	adiw	r28, 0x37	; 55
    39c2:	4f ad       	ldd	r20, Y+63	; 0x3f
    39c4:	e7 97       	sbiw	r28, 0x37	; 55
    39c6:	50 e0       	ldi	r21, 0x00	; 0
    39c8:	60 e0       	ldi	r22, 0x00	; 0
    39ca:	70 e0       	ldi	r23, 0x00	; 0
    39cc:	74 2f       	mov	r23, r20
    39ce:	66 27       	eor	r22, r22
    39d0:	55 27       	eor	r21, r21
    39d2:	44 27       	eor	r20, r20
    39d4:	e8 96       	adiw	r28, 0x38	; 56
    39d6:	8f ad       	ldd	r24, Y+63	; 0x3f
    39d8:	e8 97       	sbiw	r28, 0x38	; 56
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	a0 e0       	ldi	r26, 0x00	; 0
    39de:	b0 e0       	ldi	r27, 0x00	; 0
    39e0:	dc 01       	movw	r26, r24
    39e2:	99 27       	eor	r25, r25
    39e4:	88 27       	eor	r24, r24
    39e6:	48 2b       	or	r20, r24
    39e8:	59 2b       	or	r21, r25
    39ea:	6a 2b       	or	r22, r26
    39ec:	7b 2b       	or	r23, r27
    39ee:	e9 96       	adiw	r28, 0x39	; 57
    39f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    39f2:	e9 97       	sbiw	r28, 0x39	; 57
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	a0 e0       	ldi	r26, 0x00	; 0
    39f8:	b0 e0       	ldi	r27, 0x00	; 0
    39fa:	ba 2f       	mov	r27, r26
    39fc:	a9 2f       	mov	r26, r25
    39fe:	98 2f       	mov	r25, r24
    3a00:	88 27       	eor	r24, r24
    3a02:	84 2b       	or	r24, r20
    3a04:	95 2b       	or	r25, r21
    3a06:	a6 2b       	or	r26, r22
    3a08:	b7 2b       	or	r27, r23
    3a0a:	ea 96       	adiw	r28, 0x3a	; 58
    3a0c:	2f ad       	ldd	r18, Y+63	; 0x3f
    3a0e:	ea 97       	sbiw	r28, 0x3a	; 58
    3a10:	bc 01       	movw	r22, r24
    3a12:	cd 01       	movw	r24, r26
    3a14:	62 2b       	or	r22, r18
    3a16:	0e 94 b0 30 	call	0x6160	; 0x6160 <__floatsisf>
    3a1a:	20 e0       	ldi	r18, 0x00	; 0
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	40 e8       	ldi	r20, 0x80	; 128
    3a20:	5a e3       	ldi	r21, 0x3A	; 58
    3a22:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
    3a26:	f8 01       	movw	r30, r16
    3a28:	60 83       	st	Z, r22
    3a2a:	71 83       	std	Z+1, r23	; 0x01
    3a2c:	82 83       	std	Z+2, r24	; 0x02
    3a2e:	93 83       	std	Z+3, r25	; 0x03
    3a30:	eb 96       	adiw	r28, 0x3b	; 59
    3a32:	4f ad       	ldd	r20, Y+63	; 0x3f
    3a34:	eb 97       	sbiw	r28, 0x3b	; 59
    3a36:	50 e0       	ldi	r21, 0x00	; 0
    3a38:	60 e0       	ldi	r22, 0x00	; 0
    3a3a:	70 e0       	ldi	r23, 0x00	; 0
    3a3c:	74 2f       	mov	r23, r20
    3a3e:	66 27       	eor	r22, r22
    3a40:	55 27       	eor	r21, r21
    3a42:	44 27       	eor	r20, r20
    3a44:	ec 96       	adiw	r28, 0x3c	; 60
    3a46:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a48:	ec 97       	sbiw	r28, 0x3c	; 60
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	a0 e0       	ldi	r26, 0x00	; 0
    3a4e:	b0 e0       	ldi	r27, 0x00	; 0
    3a50:	dc 01       	movw	r26, r24
    3a52:	99 27       	eor	r25, r25
    3a54:	88 27       	eor	r24, r24
    3a56:	48 2b       	or	r20, r24
    3a58:	59 2b       	or	r21, r25
    3a5a:	6a 2b       	or	r22, r26
    3a5c:	7b 2b       	or	r23, r27
    3a5e:	ed 96       	adiw	r28, 0x3d	; 61
    3a60:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a62:	ed 97       	sbiw	r28, 0x3d	; 61
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	a0 e0       	ldi	r26, 0x00	; 0
    3a68:	b0 e0       	ldi	r27, 0x00	; 0
    3a6a:	ba 2f       	mov	r27, r26
    3a6c:	a9 2f       	mov	r26, r25
    3a6e:	98 2f       	mov	r25, r24
    3a70:	88 27       	eor	r24, r24
    3a72:	84 2b       	or	r24, r20
    3a74:	95 2b       	or	r25, r21
    3a76:	a6 2b       	or	r26, r22
    3a78:	b7 2b       	or	r27, r23
    3a7a:	ee 96       	adiw	r28, 0x3e	; 62
    3a7c:	2f ad       	ldd	r18, Y+63	; 0x3f
    3a7e:	ee 97       	sbiw	r28, 0x3e	; 62
    3a80:	bc 01       	movw	r22, r24
    3a82:	cd 01       	movw	r24, r26
    3a84:	62 2b       	or	r22, r18
    3a86:	0e 94 b0 30 	call	0x6160	; 0x6160 <__floatsisf>
    3a8a:	20 e0       	ldi	r18, 0x00	; 0
    3a8c:	30 e0       	ldi	r19, 0x00	; 0
    3a8e:	40 e8       	ldi	r20, 0x80	; 128
    3a90:	5a e3       	ldi	r21, 0x3A	; 58
    3a92:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
    3a96:	f8 01       	movw	r30, r16
    3a98:	64 83       	std	Z+4, r22	; 0x04
    3a9a:	75 83       	std	Z+5, r23	; 0x05
    3a9c:	86 83       	std	Z+6, r24	; 0x06
    3a9e:	97 83       	std	Z+7, r25	; 0x07
    3aa0:	ef 96       	adiw	r28, 0x3f	; 63
    3aa2:	4f ad       	ldd	r20, Y+63	; 0x3f
    3aa4:	ef 97       	sbiw	r28, 0x3f	; 63
    3aa6:	50 e0       	ldi	r21, 0x00	; 0
    3aa8:	60 e0       	ldi	r22, 0x00	; 0
    3aaa:	70 e0       	ldi	r23, 0x00	; 0
    3aac:	74 2f       	mov	r23, r20
    3aae:	66 27       	eor	r22, r22
    3ab0:	55 27       	eor	r21, r21
    3ab2:	44 27       	eor	r20, r20
    3ab4:	c1 58       	subi	r28, 0x81	; 129
    3ab6:	df 4f       	sbci	r29, 0xFF	; 255
    3ab8:	88 81       	ld	r24, Y
    3aba:	cf 57       	subi	r28, 0x7F	; 127
    3abc:	d0 40       	sbci	r29, 0x00	; 0
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	a0 e0       	ldi	r26, 0x00	; 0
    3ac2:	b0 e0       	ldi	r27, 0x00	; 0
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	99 27       	eor	r25, r25
    3ac8:	88 27       	eor	r24, r24
    3aca:	48 2b       	or	r20, r24
    3acc:	59 2b       	or	r21, r25
    3ace:	6a 2b       	or	r22, r26
    3ad0:	7b 2b       	or	r23, r27
    3ad2:	c0 58       	subi	r28, 0x80	; 128
    3ad4:	df 4f       	sbci	r29, 0xFF	; 255
    3ad6:	88 81       	ld	r24, Y
    3ad8:	c0 58       	subi	r28, 0x80	; 128
    3ada:	d0 40       	sbci	r29, 0x00	; 0
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	a0 e0       	ldi	r26, 0x00	; 0
    3ae0:	b0 e0       	ldi	r27, 0x00	; 0
    3ae2:	ba 2f       	mov	r27, r26
    3ae4:	a9 2f       	mov	r26, r25
    3ae6:	98 2f       	mov	r25, r24
    3ae8:	88 27       	eor	r24, r24
    3aea:	84 2b       	or	r24, r20
    3aec:	95 2b       	or	r25, r21
    3aee:	a6 2b       	or	r26, r22
    3af0:	b7 2b       	or	r27, r23
    3af2:	cf 57       	subi	r28, 0x7F	; 127
    3af4:	df 4f       	sbci	r29, 0xFF	; 255
    3af6:	28 81       	ld	r18, Y
    3af8:	c1 58       	subi	r28, 0x81	; 129
    3afa:	d0 40       	sbci	r29, 0x00	; 0
    3afc:	bc 01       	movw	r22, r24
    3afe:	cd 01       	movw	r24, r26
    3b00:	62 2b       	or	r22, r18
    3b02:	0e 94 b0 30 	call	0x6160	; 0x6160 <__floatsisf>
    3b06:	20 e0       	ldi	r18, 0x00	; 0
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	40 e8       	ldi	r20, 0x80	; 128
    3b0c:	5a e3       	ldi	r21, 0x3A	; 58
    3b0e:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
    3b12:	f8 01       	movw	r30, r16
    3b14:	60 87       	std	Z+8, r22	; 0x08
    3b16:	71 87       	std	Z+9, r23	; 0x09
    3b18:	82 87       	std	Z+10, r24	; 0x0a
    3b1a:	93 87       	std	Z+11, r25	; 0x0b
    3b1c:	ce 57       	subi	r28, 0x7E	; 126
    3b1e:	df 4f       	sbci	r29, 0xFF	; 255
    3b20:	88 81       	ld	r24, Y
    3b22:	c2 58       	subi	r28, 0x82	; 130
    3b24:	d0 40       	sbci	r29, 0x00	; 0
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	a0 e0       	ldi	r26, 0x00	; 0
    3b2a:	b0 e0       	ldi	r27, 0x00	; 0
    3b2c:	78 2f       	mov	r23, r24
    3b2e:	66 27       	eor	r22, r22
    3b30:	55 27       	eor	r21, r21
    3b32:	44 27       	eor	r20, r20
    3b34:	cd 57       	subi	r28, 0x7D	; 125
    3b36:	df 4f       	sbci	r29, 0xFF	; 255
    3b38:	98 81       	ld	r25, Y
    3b3a:	c3 58       	subi	r28, 0x83	; 131
    3b3c:	d0 40       	sbci	r29, 0x00	; 0
    3b3e:	89 2f       	mov	r24, r25
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	a0 e0       	ldi	r26, 0x00	; 0
    3b44:	b0 e0       	ldi	r27, 0x00	; 0
    3b46:	dc 01       	movw	r26, r24
    3b48:	99 27       	eor	r25, r25
    3b4a:	88 27       	eor	r24, r24
    3b4c:	84 2b       	or	r24, r20
    3b4e:	95 2b       	or	r25, r21
    3b50:	a6 2b       	or	r26, r22
    3b52:	b7 2b       	or	r27, r23
    3b54:	cc 57       	subi	r28, 0x7C	; 124
    3b56:	df 4f       	sbci	r29, 0xFF	; 255
    3b58:	48 81       	ld	r20, Y
    3b5a:	c4 58       	subi	r28, 0x84	; 132
    3b5c:	d0 40       	sbci	r29, 0x00	; 0
    3b5e:	50 e0       	ldi	r21, 0x00	; 0
    3b60:	60 e0       	ldi	r22, 0x00	; 0
    3b62:	70 e0       	ldi	r23, 0x00	; 0
    3b64:	76 2f       	mov	r23, r22
    3b66:	65 2f       	mov	r22, r21
    3b68:	54 2f       	mov	r21, r20
    3b6a:	44 27       	eor	r20, r20
    3b6c:	84 2b       	or	r24, r20
    3b6e:	95 2b       	or	r25, r21
    3b70:	a6 2b       	or	r26, r22
    3b72:	b7 2b       	or	r27, r23
    3b74:	cb 57       	subi	r28, 0x7B	; 123
    3b76:	df 4f       	sbci	r29, 0xFF	; 255
    3b78:	28 81       	ld	r18, Y
    3b7a:	c5 58       	subi	r28, 0x85	; 133
    3b7c:	d0 40       	sbci	r29, 0x00	; 0
    3b7e:	82 2b       	or	r24, r18
    3b80:	84 87       	std	Z+12, r24	; 0x0c
    3b82:	95 87       	std	Z+13, r25	; 0x0d
    3b84:	a6 87       	std	Z+14, r26	; 0x0e
    3b86:	b7 87       	std	Z+15, r27	; 0x0f
    3b88:	ca 57       	subi	r28, 0x7A	; 122
    3b8a:	df 4f       	sbci	r29, 0xFF	; 255
    3b8c:	88 81       	ld	r24, Y
    3b8e:	c6 58       	subi	r28, 0x86	; 134
    3b90:	d0 40       	sbci	r29, 0x00	; 0
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	a0 e0       	ldi	r26, 0x00	; 0
    3b96:	b0 e0       	ldi	r27, 0x00	; 0
    3b98:	78 2f       	mov	r23, r24
    3b9a:	66 27       	eor	r22, r22
    3b9c:	55 27       	eor	r21, r21
    3b9e:	44 27       	eor	r20, r20
    3ba0:	c9 57       	subi	r28, 0x79	; 121
    3ba2:	df 4f       	sbci	r29, 0xFF	; 255
    3ba4:	98 81       	ld	r25, Y
    3ba6:	c7 58       	subi	r28, 0x87	; 135
    3ba8:	d0 40       	sbci	r29, 0x00	; 0
    3baa:	89 2f       	mov	r24, r25
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	a0 e0       	ldi	r26, 0x00	; 0
    3bb0:	b0 e0       	ldi	r27, 0x00	; 0
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	99 27       	eor	r25, r25
    3bb6:	88 27       	eor	r24, r24
    3bb8:	84 2b       	or	r24, r20
    3bba:	95 2b       	or	r25, r21
    3bbc:	a6 2b       	or	r26, r22
    3bbe:	b7 2b       	or	r27, r23
    3bc0:	c8 57       	subi	r28, 0x78	; 120
    3bc2:	df 4f       	sbci	r29, 0xFF	; 255
    3bc4:	48 81       	ld	r20, Y
    3bc6:	c8 58       	subi	r28, 0x88	; 136
    3bc8:	d0 40       	sbci	r29, 0x00	; 0
    3bca:	50 e0       	ldi	r21, 0x00	; 0
    3bcc:	60 e0       	ldi	r22, 0x00	; 0
    3bce:	70 e0       	ldi	r23, 0x00	; 0
    3bd0:	76 2f       	mov	r23, r22
    3bd2:	65 2f       	mov	r22, r21
    3bd4:	54 2f       	mov	r21, r20
    3bd6:	44 27       	eor	r20, r20
    3bd8:	84 2b       	or	r24, r20
    3bda:	95 2b       	or	r25, r21
    3bdc:	a6 2b       	or	r26, r22
    3bde:	b7 2b       	or	r27, r23
    3be0:	c7 57       	subi	r28, 0x77	; 119
    3be2:	df 4f       	sbci	r29, 0xFF	; 255
    3be4:	28 81       	ld	r18, Y
    3be6:	c9 58       	subi	r28, 0x89	; 137
    3be8:	d0 40       	sbci	r29, 0x00	; 0
    3bea:	82 2b       	or	r24, r18
    3bec:	80 8b       	std	Z+16, r24	; 0x10
    3bee:	91 8b       	std	Z+17, r25	; 0x11
    3bf0:	a2 8b       	std	Z+18, r26	; 0x12
    3bf2:	b3 8b       	std	Z+19, r27	; 0x13
    3bf4:	c6 57       	subi	r28, 0x76	; 118
    3bf6:	df 4f       	sbci	r29, 0xFF	; 255
    3bf8:	88 81       	ld	r24, Y
    3bfa:	ca 58       	subi	r28, 0x8A	; 138
    3bfc:	d0 40       	sbci	r29, 0x00	; 0
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	a0 e0       	ldi	r26, 0x00	; 0
    3c02:	b0 e0       	ldi	r27, 0x00	; 0
    3c04:	78 2f       	mov	r23, r24
    3c06:	66 27       	eor	r22, r22
    3c08:	55 27       	eor	r21, r21
    3c0a:	44 27       	eor	r20, r20
    3c0c:	c5 57       	subi	r28, 0x75	; 117
    3c0e:	df 4f       	sbci	r29, 0xFF	; 255
    3c10:	98 81       	ld	r25, Y
    3c12:	cb 58       	subi	r28, 0x8B	; 139
    3c14:	d0 40       	sbci	r29, 0x00	; 0
    3c16:	89 2f       	mov	r24, r25
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	a0 e0       	ldi	r26, 0x00	; 0
    3c1c:	b0 e0       	ldi	r27, 0x00	; 0
    3c1e:	dc 01       	movw	r26, r24
    3c20:	99 27       	eor	r25, r25
    3c22:	88 27       	eor	r24, r24
    3c24:	84 2b       	or	r24, r20
    3c26:	95 2b       	or	r25, r21
    3c28:	a6 2b       	or	r26, r22
    3c2a:	b7 2b       	or	r27, r23
    3c2c:	c4 57       	subi	r28, 0x74	; 116
    3c2e:	df 4f       	sbci	r29, 0xFF	; 255
    3c30:	48 81       	ld	r20, Y
    3c32:	cc 58       	subi	r28, 0x8C	; 140
    3c34:	d0 40       	sbci	r29, 0x00	; 0
    3c36:	50 e0       	ldi	r21, 0x00	; 0
    3c38:	60 e0       	ldi	r22, 0x00	; 0
    3c3a:	70 e0       	ldi	r23, 0x00	; 0
    3c3c:	76 2f       	mov	r23, r22
    3c3e:	65 2f       	mov	r22, r21
    3c40:	54 2f       	mov	r21, r20
    3c42:	44 27       	eor	r20, r20
    3c44:	84 2b       	or	r24, r20
    3c46:	95 2b       	or	r25, r21
    3c48:	a6 2b       	or	r26, r22
    3c4a:	b7 2b       	or	r27, r23
    3c4c:	c3 57       	subi	r28, 0x73	; 115
    3c4e:	df 4f       	sbci	r29, 0xFF	; 255
    3c50:	28 81       	ld	r18, Y
    3c52:	cd 58       	subi	r28, 0x8D	; 141
    3c54:	d0 40       	sbci	r29, 0x00	; 0
    3c56:	82 2b       	or	r24, r18
    3c58:	84 8b       	std	Z+20, r24	; 0x14
    3c5a:	95 8b       	std	Z+21, r25	; 0x15
    3c5c:	a6 8b       	std	Z+22, r26	; 0x16
    3c5e:	b7 8b       	std	Z+23, r27	; 0x17
    3c60:	c2 57       	subi	r28, 0x72	; 114
    3c62:	df 4f       	sbci	r29, 0xFF	; 255
    3c64:	88 81       	ld	r24, Y
    3c66:	ce 58       	subi	r28, 0x8E	; 142
    3c68:	d0 40       	sbci	r29, 0x00	; 0
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	a0 e0       	ldi	r26, 0x00	; 0
    3c6e:	b0 e0       	ldi	r27, 0x00	; 0
    3c70:	78 2f       	mov	r23, r24
    3c72:	66 27       	eor	r22, r22
    3c74:	55 27       	eor	r21, r21
    3c76:	44 27       	eor	r20, r20
    3c78:	c1 57       	subi	r28, 0x71	; 113
    3c7a:	df 4f       	sbci	r29, 0xFF	; 255
    3c7c:	98 81       	ld	r25, Y
    3c7e:	cf 58       	subi	r28, 0x8F	; 143
    3c80:	d0 40       	sbci	r29, 0x00	; 0
    3c82:	89 2f       	mov	r24, r25
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	a0 e0       	ldi	r26, 0x00	; 0
    3c88:	b0 e0       	ldi	r27, 0x00	; 0
    3c8a:	dc 01       	movw	r26, r24
    3c8c:	99 27       	eor	r25, r25
    3c8e:	88 27       	eor	r24, r24
    3c90:	84 2b       	or	r24, r20
    3c92:	95 2b       	or	r25, r21
    3c94:	a6 2b       	or	r26, r22
    3c96:	b7 2b       	or	r27, r23
    3c98:	c0 57       	subi	r28, 0x70	; 112
    3c9a:	df 4f       	sbci	r29, 0xFF	; 255
    3c9c:	48 81       	ld	r20, Y
    3c9e:	c0 59       	subi	r28, 0x90	; 144
    3ca0:	d0 40       	sbci	r29, 0x00	; 0
    3ca2:	50 e0       	ldi	r21, 0x00	; 0
    3ca4:	60 e0       	ldi	r22, 0x00	; 0
    3ca6:	70 e0       	ldi	r23, 0x00	; 0
    3ca8:	76 2f       	mov	r23, r22
    3caa:	65 2f       	mov	r22, r21
    3cac:	54 2f       	mov	r21, r20
    3cae:	44 27       	eor	r20, r20
    3cb0:	84 2b       	or	r24, r20
    3cb2:	95 2b       	or	r25, r21
    3cb4:	a6 2b       	or	r26, r22
    3cb6:	b7 2b       	or	r27, r23
    3cb8:	cf 56       	subi	r28, 0x6F	; 111
    3cba:	df 4f       	sbci	r29, 0xFF	; 255
    3cbc:	28 81       	ld	r18, Y
    3cbe:	c1 59       	subi	r28, 0x91	; 145
    3cc0:	d0 40       	sbci	r29, 0x00	; 0
    3cc2:	82 2b       	or	r24, r18
    3cc4:	80 8f       	std	Z+24, r24	; 0x18
    3cc6:	91 8f       	std	Z+25, r25	; 0x19
    3cc8:	a2 8f       	std	Z+26, r26	; 0x1a
    3cca:	b3 8f       	std	Z+27, r27	; 0x1b
    3ccc:	20 e1       	ldi	r18, 0x10	; 16
    3cce:	ae 01       	movw	r20, r28
    3cd0:	4a 58       	subi	r20, 0x8A	; 138
    3cd2:	5f 4f       	sbci	r21, 0xFF	; 255
    3cd4:	67 e3       	ldi	r22, 0x37	; 55
    3cd6:	8f 2d       	mov	r24, r15
    3cd8:	0e 94 be 19 	call	0x337c	; 0x337c <get_MOTOR>
    3cdc:	e8 2e       	mov	r14, r24
    3cde:	f3 e6       	ldi	r31, 0x63	; 99
    3ce0:	8f 13       	cpse	r24, r31
    3ce2:	1b c0       	rjmp	.+54     	; 0x3d1a <get_MOTOR_PID+0x3d6>
    3ce4:	81 ec       	ldi	r24, 0xC1	; 193
    3ce6:	8f 0d       	add	r24, r15
    3ce8:	1f 92       	push	r1
    3cea:	8f 93       	push	r24
    3cec:	ce 01       	movw	r24, r28
    3cee:	01 96       	adiw	r24, 0x01	; 1
    3cf0:	9f 93       	push	r25
    3cf2:	8f 93       	push	r24
    3cf4:	8e 01       	movw	r16, r28
    3cf6:	0a 5d       	subi	r16, 0xDA	; 218
    3cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cfa:	1f 93       	push	r17
    3cfc:	0f 93       	push	r16
    3cfe:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
    3d02:	b8 01       	movw	r22, r16
    3d04:	86 e3       	ldi	r24, 0x36	; 54
    3d06:	91 e0       	ldi	r25, 0x01	; 1
    3d08:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
    3d0c:	0f 90       	pop	r0
    3d0e:	0f 90       	pop	r0
    3d10:	0f 90       	pop	r0
    3d12:	0f 90       	pop	r0
    3d14:	0f 90       	pop	r0
    3d16:	0f 90       	pop	r0
    3d18:	38 c0       	rjmp	.+112    	; 0x3d8a <get_MOTOR_PID+0x446>
    3d1a:	ce 57       	subi	r28, 0x7E	; 126
    3d1c:	df 4f       	sbci	r29, 0xFF	; 255
    3d1e:	88 81       	ld	r24, Y
    3d20:	c2 58       	subi	r28, 0x82	; 130
    3d22:	d0 40       	sbci	r29, 0x00	; 0
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	a0 e0       	ldi	r26, 0x00	; 0
    3d28:	b0 e0       	ldi	r27, 0x00	; 0
    3d2a:	78 2f       	mov	r23, r24
    3d2c:	66 27       	eor	r22, r22
    3d2e:	55 27       	eor	r21, r21
    3d30:	44 27       	eor	r20, r20
    3d32:	cd 57       	subi	r28, 0x7D	; 125
    3d34:	df 4f       	sbci	r29, 0xFF	; 255
    3d36:	98 81       	ld	r25, Y
    3d38:	c3 58       	subi	r28, 0x83	; 131
    3d3a:	d0 40       	sbci	r29, 0x00	; 0
    3d3c:	89 2f       	mov	r24, r25
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	a0 e0       	ldi	r26, 0x00	; 0
    3d42:	b0 e0       	ldi	r27, 0x00	; 0
    3d44:	dc 01       	movw	r26, r24
    3d46:	99 27       	eor	r25, r25
    3d48:	88 27       	eor	r24, r24
    3d4a:	84 2b       	or	r24, r20
    3d4c:	95 2b       	or	r25, r21
    3d4e:	a6 2b       	or	r26, r22
    3d50:	b7 2b       	or	r27, r23
    3d52:	cc 57       	subi	r28, 0x7C	; 124
    3d54:	df 4f       	sbci	r29, 0xFF	; 255
    3d56:	48 81       	ld	r20, Y
    3d58:	c4 58       	subi	r28, 0x84	; 132
    3d5a:	d0 40       	sbci	r29, 0x00	; 0
    3d5c:	50 e0       	ldi	r21, 0x00	; 0
    3d5e:	60 e0       	ldi	r22, 0x00	; 0
    3d60:	70 e0       	ldi	r23, 0x00	; 0
    3d62:	76 2f       	mov	r23, r22
    3d64:	65 2f       	mov	r22, r21
    3d66:	54 2f       	mov	r21, r20
    3d68:	44 27       	eor	r20, r20
    3d6a:	84 2b       	or	r24, r20
    3d6c:	95 2b       	or	r25, r21
    3d6e:	a6 2b       	or	r26, r22
    3d70:	b7 2b       	or	r27, r23
    3d72:	cb 57       	subi	r28, 0x7B	; 123
    3d74:	df 4f       	sbci	r29, 0xFF	; 255
    3d76:	28 81       	ld	r18, Y
    3d78:	c5 58       	subi	r28, 0x85	; 133
    3d7a:	d0 40       	sbci	r29, 0x00	; 0
    3d7c:	82 2b       	or	r24, r18
    3d7e:	f8 01       	movw	r30, r16
    3d80:	84 8f       	std	Z+28, r24	; 0x1c
    3d82:	95 8f       	std	Z+29, r25	; 0x1d
    3d84:	a6 8f       	std	Z+30, r26	; 0x1e
    3d86:	b7 8f       	std	Z+31, r27	; 0x1f
    3d88:	e1 2c       	mov	r14, r1
    3d8a:	8e 2d       	mov	r24, r14
    3d8c:	cf 56       	subi	r28, 0x6F	; 111
    3d8e:	df 4f       	sbci	r29, 0xFF	; 255
    3d90:	cd bf       	out	0x3d, r28	; 61
    3d92:	de bf       	out	0x3e, r29	; 62
    3d94:	df 91       	pop	r29
    3d96:	cf 91       	pop	r28
    3d98:	1f 91       	pop	r17
    3d9a:	0f 91       	pop	r16
    3d9c:	ff 90       	pop	r15
    3d9e:	ef 90       	pop	r14
    3da0:	08 95       	ret

00003da2 <get_MOTOR_S4MODE>:
    3da2:	cf 92       	push	r12
    3da4:	df 92       	push	r13
    3da6:	ef 92       	push	r14
    3da8:	ff 92       	push	r15
    3daa:	0f 93       	push	r16
    3dac:	1f 93       	push	r17
    3dae:	cf 93       	push	r28
    3db0:	df 93       	push	r29
    3db2:	cd b7       	in	r28, 0x3d	; 61
    3db4:	de b7       	in	r29, 0x3e	; 62
    3db6:	c7 57       	subi	r28, 0x77	; 119
    3db8:	d1 09       	sbc	r29, r1
    3dba:	cd bf       	out	0x3d, r28	; 61
    3dbc:	de bf       	out	0x3e, r29	; 62
    3dbe:	08 2f       	mov	r16, r24
    3dc0:	7b 01       	movw	r14, r22
    3dc2:	84 e2       	ldi	r24, 0x24	; 36
    3dc4:	e9 e1       	ldi	r30, 0x19	; 25
    3dc6:	f8 eb       	ldi	r31, 0xB8	; 184
    3dc8:	de 01       	movw	r26, r28
    3dca:	11 96       	adiw	r26, 0x01	; 1
    3dcc:	01 90       	ld	r0, Z+
    3dce:	0d 92       	st	X+, r0
    3dd0:	8a 95       	dec	r24
    3dd2:	e1 f7       	brne	.-8      	; 0x3dcc <get_MOTOR_S4MODE+0x2a>
    3dd4:	23 e0       	ldi	r18, 0x03	; 3
    3dd6:	ae 01       	movw	r20, r28
    3dd8:	4b 58       	subi	r20, 0x8B	; 139
    3dda:	5f 4f       	sbci	r21, 0xFF	; 255
    3ddc:	6b e4       	ldi	r22, 0x4B	; 75
    3dde:	80 2f       	mov	r24, r16
    3de0:	0e 94 be 19 	call	0x337c	; 0x337c <get_MOTOR>
    3de4:	18 2f       	mov	r17, r24
    3de6:	83 36       	cpi	r24, 0x63	; 99
    3de8:	f1 f4       	brne	.+60     	; 0x3e26 <get_MOTOR_S4MODE+0x84>
    3dea:	0f 53       	subi	r16, 0x3F	; 63
    3dec:	1f 92       	push	r1
    3dee:	0f 93       	push	r16
    3df0:	ce 01       	movw	r24, r28
    3df2:	01 96       	adiw	r24, 0x01	; 1
    3df4:	9f 93       	push	r25
    3df6:	8f 93       	push	r24
    3df8:	6e 01       	movw	r12, r28
    3dfa:	85 e2       	ldi	r24, 0x25	; 37
    3dfc:	c8 0e       	add	r12, r24
    3dfe:	d1 1c       	adc	r13, r1
    3e00:	df 92       	push	r13
    3e02:	cf 92       	push	r12
    3e04:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
    3e08:	b6 01       	movw	r22, r12
    3e0a:	86 e3       	ldi	r24, 0x36	; 54
    3e0c:	91 e0       	ldi	r25, 0x01	; 1
    3e0e:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
    3e12:	8f ef       	ldi	r24, 0xFF	; 255
    3e14:	f7 01       	movw	r30, r14
    3e16:	80 83       	st	Z, r24
    3e18:	0f 90       	pop	r0
    3e1a:	0f 90       	pop	r0
    3e1c:	0f 90       	pop	r0
    3e1e:	0f 90       	pop	r0
    3e20:	0f 90       	pop	r0
    3e22:	0f 90       	pop	r0
    3e24:	06 c0       	rjmp	.+12     	; 0x3e32 <get_MOTOR_S4MODE+0x90>
    3e26:	e7 96       	adiw	r28, 0x37	; 55
    3e28:	8f ad       	ldd	r24, Y+63	; 0x3f
    3e2a:	e7 97       	sbiw	r28, 0x37	; 55
    3e2c:	f7 01       	movw	r30, r14
    3e2e:	80 83       	st	Z, r24
    3e30:	10 e0       	ldi	r17, 0x00	; 0
    3e32:	81 2f       	mov	r24, r17
    3e34:	c9 58       	subi	r28, 0x89	; 137
    3e36:	df 4f       	sbci	r29, 0xFF	; 255
    3e38:	cd bf       	out	0x3d, r28	; 61
    3e3a:	de bf       	out	0x3e, r29	; 62
    3e3c:	df 91       	pop	r29
    3e3e:	cf 91       	pop	r28
    3e40:	1f 91       	pop	r17
    3e42:	0f 91       	pop	r16
    3e44:	ff 90       	pop	r15
    3e46:	ef 90       	pop	r14
    3e48:	df 90       	pop	r13
    3e4a:	cf 90       	pop	r12
    3e4c:	08 95       	ret

00003e4e <get_MOTOR_SPEED>:
    3e4e:	ef 92       	push	r14
    3e50:	ff 92       	push	r15
    3e52:	0f 93       	push	r16
    3e54:	1f 93       	push	r17
    3e56:	cf 93       	push	r28
    3e58:	df 93       	push	r29
    3e5a:	cd b7       	in	r28, 0x3d	; 61
    3e5c:	de b7       	in	r29, 0x3e	; 62
    3e5e:	c1 58       	subi	r28, 0x81	; 129
    3e60:	d1 09       	sbc	r29, r1
    3e62:	cd bf       	out	0x3d, r28	; 61
    3e64:	de bf       	out	0x3e, r29	; 62
    3e66:	e8 2e       	mov	r14, r24
    3e68:	8b 01       	movw	r16, r22
    3e6a:	8c e2       	ldi	r24, 0x2C	; 44
    3e6c:	ed e3       	ldi	r30, 0x3D	; 61
    3e6e:	f8 eb       	ldi	r31, 0xB8	; 184
    3e70:	de 01       	movw	r26, r28
    3e72:	aa 5a       	subi	r26, 0xAA	; 170
    3e74:	bf 4f       	sbci	r27, 0xFF	; 255
    3e76:	01 90       	ld	r0, Z+
    3e78:	0d 92       	st	X+, r0
    3e7a:	8a 95       	dec	r24
    3e7c:	e1 f7       	brne	.-8      	; 0x3e76 <get_MOTOR_SPEED+0x28>
    3e7e:	25 e0       	ldi	r18, 0x05	; 5
    3e80:	ae 01       	movw	r20, r28
    3e82:	4f 5a       	subi	r20, 0xAF	; 175
    3e84:	5f 4f       	sbci	r21, 0xFF	; 255
    3e86:	62 e1       	ldi	r22, 0x12	; 18
    3e88:	8e 2d       	mov	r24, r14
    3e8a:	0e 94 be 19 	call	0x337c	; 0x337c <get_MOTOR>
    3e8e:	f8 2e       	mov	r15, r24
    3e90:	83 e6       	ldi	r24, 0x63	; 99
    3e92:	f8 12       	cpse	r15, r24
    3e94:	1c c0       	rjmp	.+56     	; 0x3ece <get_MOTOR_SPEED+0x80>
    3e96:	81 ec       	ldi	r24, 0xC1	; 193
    3e98:	8e 0d       	add	r24, r14
    3e9a:	1f 92       	push	r1
    3e9c:	8f 93       	push	r24
    3e9e:	ce 01       	movw	r24, r28
    3ea0:	8a 5a       	subi	r24, 0xAA	; 170
    3ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea4:	9f 93       	push	r25
    3ea6:	8f 93       	push	r24
    3ea8:	8e 01       	movw	r16, r28
    3eaa:	0f 5f       	subi	r16, 0xFF	; 255
    3eac:	1f 4f       	sbci	r17, 0xFF	; 255
    3eae:	1f 93       	push	r17
    3eb0:	0f 93       	push	r16
    3eb2:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
    3eb6:	b8 01       	movw	r22, r16
    3eb8:	86 e3       	ldi	r24, 0x36	; 54
    3eba:	91 e0       	ldi	r25, 0x01	; 1
    3ebc:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
    3ec0:	0f 90       	pop	r0
    3ec2:	0f 90       	pop	r0
    3ec4:	0f 90       	pop	r0
    3ec6:	0f 90       	pop	r0
    3ec8:	0f 90       	pop	r0
    3eca:	0f 90       	pop	r0
    3ecc:	30 c0       	rjmp	.+96     	; 0x3f2e <get_MOTOR_SPEED+0xe0>
    3ece:	62 96       	adiw	r28, 0x12	; 18
    3ed0:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ed2:	62 97       	sbiw	r28, 0x12	; 18
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	a0 e0       	ldi	r26, 0x00	; 0
    3ed8:	b0 e0       	ldi	r27, 0x00	; 0
    3eda:	78 2f       	mov	r23, r24
    3edc:	66 27       	eor	r22, r22
    3ede:	55 27       	eor	r21, r21
    3ee0:	44 27       	eor	r20, r20
    3ee2:	63 96       	adiw	r28, 0x13	; 19
    3ee4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ee6:	63 97       	sbiw	r28, 0x13	; 19
    3ee8:	89 2f       	mov	r24, r25
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	a0 e0       	ldi	r26, 0x00	; 0
    3eee:	b0 e0       	ldi	r27, 0x00	; 0
    3ef0:	dc 01       	movw	r26, r24
    3ef2:	99 27       	eor	r25, r25
    3ef4:	88 27       	eor	r24, r24
    3ef6:	84 2b       	or	r24, r20
    3ef8:	95 2b       	or	r25, r21
    3efa:	a6 2b       	or	r26, r22
    3efc:	b7 2b       	or	r27, r23
    3efe:	64 96       	adiw	r28, 0x14	; 20
    3f00:	4f ad       	ldd	r20, Y+63	; 0x3f
    3f02:	64 97       	sbiw	r28, 0x14	; 20
    3f04:	50 e0       	ldi	r21, 0x00	; 0
    3f06:	60 e0       	ldi	r22, 0x00	; 0
    3f08:	70 e0       	ldi	r23, 0x00	; 0
    3f0a:	76 2f       	mov	r23, r22
    3f0c:	65 2f       	mov	r22, r21
    3f0e:	54 2f       	mov	r21, r20
    3f10:	44 27       	eor	r20, r20
    3f12:	84 2b       	or	r24, r20
    3f14:	95 2b       	or	r25, r21
    3f16:	a6 2b       	or	r26, r22
    3f18:	b7 2b       	or	r27, r23
    3f1a:	65 96       	adiw	r28, 0x15	; 21
    3f1c:	2f ad       	ldd	r18, Y+63	; 0x3f
    3f1e:	65 97       	sbiw	r28, 0x15	; 21
    3f20:	82 2b       	or	r24, r18
    3f22:	f8 01       	movw	r30, r16
    3f24:	80 83       	st	Z, r24
    3f26:	91 83       	std	Z+1, r25	; 0x01
    3f28:	a2 83       	std	Z+2, r26	; 0x02
    3f2a:	b3 83       	std	Z+3, r27	; 0x03
    3f2c:	f1 2c       	mov	r15, r1
    3f2e:	8f 2d       	mov	r24, r15
    3f30:	cf 57       	subi	r28, 0x7F	; 127
    3f32:	df 4f       	sbci	r29, 0xFF	; 255
    3f34:	cd bf       	out	0x3d, r28	; 61
    3f36:	de bf       	out	0x3e, r29	; 62
    3f38:	df 91       	pop	r29
    3f3a:	cf 91       	pop	r28
    3f3c:	1f 91       	pop	r17
    3f3e:	0f 91       	pop	r16
    3f40:	ff 90       	pop	r15
    3f42:	ef 90       	pop	r14
    3f44:	08 95       	ret

00003f46 <get_MOTOR_STATUS>:
    3f46:	ef 92       	push	r14
    3f48:	ff 92       	push	r15
    3f4a:	0f 93       	push	r16
    3f4c:	1f 93       	push	r17
    3f4e:	cf 93       	push	r28
    3f50:	df 93       	push	r29
    3f52:	cd b7       	in	r28, 0x3d	; 61
    3f54:	de b7       	in	r29, 0x3e	; 62
    3f56:	c9 57       	subi	r28, 0x79	; 121
    3f58:	d1 09       	sbc	r29, r1
    3f5a:	cd bf       	out	0x3d, r28	; 61
    3f5c:	de bf       	out	0x3e, r29	; 62
    3f5e:	e8 2e       	mov	r14, r24
    3f60:	8b 01       	movw	r16, r22
    3f62:	85 e2       	ldi	r24, 0x25	; 37
    3f64:	e9 e6       	ldi	r30, 0x69	; 105
    3f66:	f8 eb       	ldi	r31, 0xB8	; 184
    3f68:	de 01       	movw	r26, r28
    3f6a:	af 5a       	subi	r26, 0xAF	; 175
    3f6c:	bf 4f       	sbci	r27, 0xFF	; 255
    3f6e:	01 90       	ld	r0, Z+
    3f70:	0d 92       	st	X+, r0
    3f72:	8a 95       	dec	r24
    3f74:	e1 f7       	brne	.-8      	; 0x3f6e <get_MOTOR_STATUS+0x28>
    3f76:	24 e0       	ldi	r18, 0x04	; 4
    3f78:	ae 01       	movw	r20, r28
    3f7a:	4a 58       	subi	r20, 0x8A	; 138
    3f7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f7e:	6a e5       	ldi	r22, 0x5A	; 90
    3f80:	8e 2d       	mov	r24, r14
    3f82:	0e 94 be 19 	call	0x337c	; 0x337c <get_MOTOR>
    3f86:	f8 2e       	mov	r15, r24
    3f88:	83 e6       	ldi	r24, 0x63	; 99
    3f8a:	f8 12       	cpse	r15, r24
    3f8c:	1d c0       	rjmp	.+58     	; 0x3fc8 <get_MOTOR_STATUS+0x82>
    3f8e:	8e 2d       	mov	r24, r14
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	cf 97       	sbiw	r24, 0x3f	; 63
    3f94:	9f 93       	push	r25
    3f96:	8f 93       	push	r24
    3f98:	ce 01       	movw	r24, r28
    3f9a:	8f 5a       	subi	r24, 0xAF	; 175
    3f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f9e:	9f 93       	push	r25
    3fa0:	8f 93       	push	r24
    3fa2:	8e 01       	movw	r16, r28
    3fa4:	0f 5f       	subi	r16, 0xFF	; 255
    3fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa8:	1f 93       	push	r17
    3faa:	0f 93       	push	r16
    3fac:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
    3fb0:	b8 01       	movw	r22, r16
    3fb2:	86 e3       	ldi	r24, 0x36	; 54
    3fb4:	91 e0       	ldi	r25, 0x01	; 1
    3fb6:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
    3fba:	0f 90       	pop	r0
    3fbc:	0f 90       	pop	r0
    3fbe:	0f 90       	pop	r0
    3fc0:	0f 90       	pop	r0
    3fc2:	0f 90       	pop	r0
    3fc4:	0f 90       	pop	r0
    3fc6:	30 c0       	rjmp	.+96     	; 0x4028 <__RODATA_PM_OFFSET__+0x28>
    3fc8:	e7 96       	adiw	r28, 0x37	; 55
    3fca:	8f ad       	ldd	r24, Y+63	; 0x3f
    3fcc:	e7 97       	sbiw	r28, 0x37	; 55
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	a0 e0       	ldi	r26, 0x00	; 0
    3fd2:	b0 e0       	ldi	r27, 0x00	; 0
    3fd4:	78 2f       	mov	r23, r24
    3fd6:	66 27       	eor	r22, r22
    3fd8:	55 27       	eor	r21, r21
    3fda:	44 27       	eor	r20, r20
    3fdc:	e8 96       	adiw	r28, 0x38	; 56
    3fde:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fe0:	e8 97       	sbiw	r28, 0x38	; 56
    3fe2:	89 2f       	mov	r24, r25
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	a0 e0       	ldi	r26, 0x00	; 0
    3fe8:	b0 e0       	ldi	r27, 0x00	; 0
    3fea:	dc 01       	movw	r26, r24
    3fec:	99 27       	eor	r25, r25
    3fee:	88 27       	eor	r24, r24
    3ff0:	84 2b       	or	r24, r20
    3ff2:	95 2b       	or	r25, r21
    3ff4:	a6 2b       	or	r26, r22
    3ff6:	b7 2b       	or	r27, r23
    3ff8:	e9 96       	adiw	r28, 0x39	; 57
    3ffa:	4f ad       	ldd	r20, Y+63	; 0x3f
    3ffc:	e9 97       	sbiw	r28, 0x39	; 57
    3ffe:	50 e0       	ldi	r21, 0x00	; 0
    4000:	60 e0       	ldi	r22, 0x00	; 0
    4002:	70 e0       	ldi	r23, 0x00	; 0
    4004:	76 2f       	mov	r23, r22
    4006:	65 2f       	mov	r22, r21
    4008:	54 2f       	mov	r21, r20
    400a:	44 27       	eor	r20, r20
    400c:	84 2b       	or	r24, r20
    400e:	95 2b       	or	r25, r21
    4010:	a6 2b       	or	r26, r22
    4012:	b7 2b       	or	r27, r23
    4014:	ea 96       	adiw	r28, 0x3a	; 58
    4016:	2f ad       	ldd	r18, Y+63	; 0x3f
    4018:	ea 97       	sbiw	r28, 0x3a	; 58
    401a:	82 2b       	or	r24, r18
    401c:	f8 01       	movw	r30, r16
    401e:	80 83       	st	Z, r24
    4020:	91 83       	std	Z+1, r25	; 0x01
    4022:	a2 83       	std	Z+2, r26	; 0x02
    4024:	b3 83       	std	Z+3, r27	; 0x03
    4026:	f1 2c       	mov	r15, r1
    4028:	8f 2d       	mov	r24, r15
    402a:	c7 58       	subi	r28, 0x87	; 135
    402c:	df 4f       	sbci	r29, 0xFF	; 255
    402e:	cd bf       	out	0x3d, r28	; 61
    4030:	de bf       	out	0x3e, r29	; 62
    4032:	df 91       	pop	r29
    4034:	cf 91       	pop	r28
    4036:	1f 91       	pop	r17
    4038:	0f 91       	pop	r16
    403a:	ff 90       	pop	r15
    403c:	ef 90       	pop	r14
    403e:	08 95       	ret

00004040 <get_MOTOR_LIMIT>:
    4040:	0f 93       	push	r16
    4042:	1f 93       	push	r17
    4044:	cf 93       	push	r28
    4046:	df 93       	push	r29
    4048:	cd b7       	in	r28, 0x3d	; 61
    404a:	de b7       	in	r29, 0x3e	; 62
    404c:	c2 58       	subi	r28, 0x82	; 130
    404e:	d1 09       	sbc	r29, r1
    4050:	cd bf       	out	0x3d, r28	; 61
    4052:	de bf       	out	0x3e, r29	; 62
    4054:	18 2f       	mov	r17, r24
    4056:	8e e2       	ldi	r24, 0x2E	; 46
    4058:	ee e8       	ldi	r30, 0x8E	; 142
    405a:	f8 eb       	ldi	r31, 0xB8	; 184
    405c:	de 01       	movw	r26, r28
    405e:	af 5a       	subi	r26, 0xAF	; 175
    4060:	bf 4f       	sbci	r27, 0xFF	; 255
    4062:	01 90       	ld	r0, Z+
    4064:	0d 92       	st	X+, r0
    4066:	8a 95       	dec	r24
    4068:	e1 f7       	brne	.-8      	; 0x4062 <get_MOTOR_LIMIT+0x22>
    406a:	be 01       	movw	r22, r28
    406c:	61 58       	subi	r22, 0x81	; 129
    406e:	7f 4f       	sbci	r23, 0xFF	; 255
    4070:	81 2f       	mov	r24, r17
    4072:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <get_MOTOR_STATUS>
    4076:	83 36       	cpi	r24, 0x63	; 99
    4078:	d1 f4       	brne	.+52     	; 0x40ae <get_MOTOR_LIMIT+0x6e>
    407a:	1f 51       	subi	r17, 0x1F	; 31
    407c:	1f 92       	push	r1
    407e:	1f 93       	push	r17
    4080:	ce 01       	movw	r24, r28
    4082:	8f 5a       	subi	r24, 0xAF	; 175
    4084:	9f 4f       	sbci	r25, 0xFF	; 255
    4086:	9f 93       	push	r25
    4088:	8f 93       	push	r24
    408a:	8e 01       	movw	r16, r28
    408c:	0f 5f       	subi	r16, 0xFF	; 255
    408e:	1f 4f       	sbci	r17, 0xFF	; 255
    4090:	1f 93       	push	r17
    4092:	0f 93       	push	r16
    4094:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
    4098:	b8 01       	movw	r22, r16
    409a:	86 e3       	ldi	r24, 0x36	; 54
    409c:	91 e0       	ldi	r25, 0x01	; 1
    409e:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
    40a2:	0f 90       	pop	r0
    40a4:	0f 90       	pop	r0
    40a6:	0f 90       	pop	r0
    40a8:	0f 90       	pop	r0
    40aa:	0f 90       	pop	r0
    40ac:	0f 90       	pop	r0
    40ae:	c1 58       	subi	r28, 0x81	; 129
    40b0:	df 4f       	sbci	r29, 0xFF	; 255
    40b2:	88 81       	ld	r24, Y
    40b4:	99 81       	ldd	r25, Y+1	; 0x01
    40b6:	aa 81       	ldd	r26, Y+2	; 0x02
    40b8:	bb 81       	ldd	r27, Y+3	; 0x03
    40ba:	cf 57       	subi	r28, 0x7F	; 127
    40bc:	d0 40       	sbci	r29, 0x00	; 0
    40be:	a6 ff       	sbrs	r26, 6
    40c0:	02 c0       	rjmp	.+4      	; 0x40c6 <get_MOTOR_LIMIT+0x86>
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	01 c0       	rjmp	.+2      	; 0x40c8 <get_MOTOR_LIMIT+0x88>
    40c6:	80 e0       	ldi	r24, 0x00	; 0
    40c8:	ce 57       	subi	r28, 0x7E	; 126
    40ca:	df 4f       	sbci	r29, 0xFF	; 255
    40cc:	cd bf       	out	0x3d, r28	; 61
    40ce:	de bf       	out	0x3e, r29	; 62
    40d0:	df 91       	pop	r29
    40d2:	cf 91       	pop	r28
    40d4:	1f 91       	pop	r17
    40d6:	0f 91       	pop	r16
    40d8:	08 95       	ret

000040da <get_MOTOR_LIMITS>:
    40da:	ef 92       	push	r14
    40dc:	ff 92       	push	r15
    40de:	1f 93       	push	r17
    40e0:	cf 93       	push	r28
    40e2:	df 93       	push	r29
    40e4:	00 d0       	rcall	.+0      	; 0x40e6 <get_MOTOR_LIMITS+0xc>
    40e6:	00 d0       	rcall	.+0      	; 0x40e8 <get_MOTOR_LIMITS+0xe>
    40e8:	cd b7       	in	r28, 0x3d	; 61
    40ea:	de b7       	in	r29, 0x3e	; 62
    40ec:	10 e0       	ldi	r17, 0x00	; 0
    40ee:	1b c0       	rjmp	.+54     	; 0x4126 <get_MOTOR_LIMITS+0x4c>
    40f0:	e1 2e       	mov	r14, r17
    40f2:	f1 2c       	mov	r15, r1
    40f4:	f7 01       	movw	r30, r14
    40f6:	e0 5c       	subi	r30, 0xC0	; 192
    40f8:	f5 4d       	sbci	r31, 0xD5	; 213
    40fa:	10 82       	st	Z, r1
    40fc:	be 01       	movw	r22, r28
    40fe:	6f 5f       	subi	r22, 0xFF	; 255
    4100:	7f 4f       	sbci	r23, 0xFF	; 255
    4102:	80 e8       	ldi	r24, 0x80	; 128
    4104:	81 0f       	add	r24, r17
    4106:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <get_MOTOR_STATUS>
    410a:	83 36       	cpi	r24, 0x63	; 99
    410c:	59 f0       	breq	.+22     	; 0x4124 <get_MOTOR_LIMITS+0x4a>
    410e:	89 81       	ldd	r24, Y+1	; 0x01
    4110:	9a 81       	ldd	r25, Y+2	; 0x02
    4112:	ab 81       	ldd	r26, Y+3	; 0x03
    4114:	bc 81       	ldd	r27, Y+4	; 0x04
    4116:	a6 ff       	sbrs	r26, 6
    4118:	05 c0       	rjmp	.+10     	; 0x4124 <get_MOTOR_LIMITS+0x4a>
    411a:	f7 01       	movw	r30, r14
    411c:	e0 5c       	subi	r30, 0xC0	; 192
    411e:	f5 4d       	sbci	r31, 0xD5	; 213
    4120:	81 e0       	ldi	r24, 0x01	; 1
    4122:	80 83       	st	Z, r24
    4124:	1f 5f       	subi	r17, 0xFF	; 255
    4126:	13 30       	cpi	r17, 0x03	; 3
    4128:	18 f3       	brcs	.-58     	; 0x40f0 <get_MOTOR_LIMITS+0x16>
    412a:	80 e0       	ldi	r24, 0x00	; 0
    412c:	24 96       	adiw	r28, 0x04	; 4
    412e:	cd bf       	out	0x3d, r28	; 61
    4130:	de bf       	out	0x3e, r29	; 62
    4132:	df 91       	pop	r29
    4134:	cf 91       	pop	r28
    4136:	1f 91       	pop	r17
    4138:	ff 90       	pop	r15
    413a:	ef 90       	pop	r14
    413c:	08 95       	ret

0000413e <motorsMoving>:
    413e:	ef 92       	push	r14
    4140:	ff 92       	push	r15
    4142:	0f 93       	push	r16
    4144:	1f 93       	push	r17
    4146:	cf 93       	push	r28
    4148:	df 93       	push	r29
    414a:	cd b7       	in	r28, 0x3d	; 61
    414c:	de b7       	in	r29, 0x3e	; 62
    414e:	ce 57       	subi	r28, 0x7E	; 126
    4150:	d1 09       	sbc	r29, r1
    4152:	cd bf       	out	0x3d, r28	; 61
    4154:	de bf       	out	0x3e, r29	; 62
    4156:	8a e2       	ldi	r24, 0x2A	; 42
    4158:	e5 ee       	ldi	r30, 0xE5	; 229
    415a:	f8 eb       	ldi	r31, 0xB8	; 184
    415c:	de 01       	movw	r26, r28
    415e:	11 96       	adiw	r26, 0x01	; 1
    4160:	01 90       	ld	r0, Z+
    4162:	0d 92       	st	X+, r0
    4164:	8a 95       	dec	r24
    4166:	e1 f7       	brne	.-8      	; 0x4160 <motorsMoving+0x22>
    4168:	ef 96       	adiw	r28, 0x3f	; 63
    416a:	1c ae       	std	Y+60, r1	; 0x3c
    416c:	1d ae       	std	Y+61, r1	; 0x3d
    416e:	1e ae       	std	Y+62, r1	; 0x3e
    4170:	1f ae       	std	Y+63, r1	; 0x3f
    4172:	ef 97       	sbiw	r28, 0x3f	; 63
    4174:	00 e0       	ldi	r16, 0x00	; 0
    4176:	10 e0       	ldi	r17, 0x00	; 0
    4178:	31 c0       	rjmp	.+98     	; 0x41dc <motorsMoving+0x9e>
    417a:	be 01       	movw	r22, r28
    417c:	65 58       	subi	r22, 0x85	; 133
    417e:	7f 4f       	sbci	r23, 0xFF	; 255
    4180:	80 e8       	ldi	r24, 0x80	; 128
    4182:	81 0f       	add	r24, r17
    4184:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <get_MOTOR_SPEED>
    4188:	83 36       	cpi	r24, 0x63	; 99
    418a:	e1 f4       	brne	.+56     	; 0x41c4 <motorsMoving+0x86>
    418c:	1f 92       	push	r1
    418e:	81 e4       	ldi	r24, 0x41	; 65
    4190:	81 0f       	add	r24, r17
    4192:	8f 93       	push	r24
    4194:	ce 01       	movw	r24, r28
    4196:	01 96       	adiw	r24, 0x01	; 1
    4198:	9f 93       	push	r25
    419a:	8f 93       	push	r24
    419c:	7e 01       	movw	r14, r28
    419e:	8b e2       	ldi	r24, 0x2B	; 43
    41a0:	e8 0e       	add	r14, r24
    41a2:	f1 1c       	adc	r15, r1
    41a4:	ff 92       	push	r15
    41a6:	ef 92       	push	r14
    41a8:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
    41ac:	b7 01       	movw	r22, r14
    41ae:	86 e3       	ldi	r24, 0x36	; 54
    41b0:	91 e0       	ldi	r25, 0x01	; 1
    41b2:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
    41b6:	0f 90       	pop	r0
    41b8:	0f 90       	pop	r0
    41ba:	0f 90       	pop	r0
    41bc:	0f 90       	pop	r0
    41be:	0f 90       	pop	r0
    41c0:	0f 90       	pop	r0
    41c2:	0b c0       	rjmp	.+22     	; 0x41da <motorsMoving+0x9c>
    41c4:	ef 96       	adiw	r28, 0x3f	; 63
    41c6:	8c ad       	ldd	r24, Y+60	; 0x3c
    41c8:	9d ad       	ldd	r25, Y+61	; 0x3d
    41ca:	ae ad       	ldd	r26, Y+62	; 0x3e
    41cc:	bf ad       	ldd	r27, Y+63	; 0x3f
    41ce:	ef 97       	sbiw	r28, 0x3f	; 63
    41d0:	89 2b       	or	r24, r25
    41d2:	8a 2b       	or	r24, r26
    41d4:	8b 2b       	or	r24, r27
    41d6:	09 f0       	breq	.+2      	; 0x41da <motorsMoving+0x9c>
    41d8:	0f 5f       	subi	r16, 0xFF	; 255
    41da:	1f 5f       	subi	r17, 0xFF	; 255
    41dc:	13 30       	cpi	r17, 0x03	; 3
    41de:	68 f2       	brcs	.-102    	; 0x417a <motorsMoving+0x3c>
    41e0:	00 23       	and	r16, r16
    41e2:	11 f0       	breq	.+4      	; 0x41e8 <motorsMoving+0xaa>
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	01 c0       	rjmp	.+2      	; 0x41ea <motorsMoving+0xac>
    41e8:	80 e0       	ldi	r24, 0x00	; 0
    41ea:	c2 58       	subi	r28, 0x82	; 130
    41ec:	df 4f       	sbci	r29, 0xFF	; 255
    41ee:	cd bf       	out	0x3d, r28	; 61
    41f0:	de bf       	out	0x3e, r29	; 62
    41f2:	df 91       	pop	r29
    41f4:	cf 91       	pop	r28
    41f6:	1f 91       	pop	r17
    41f8:	0f 91       	pop	r16
    41fa:	ff 90       	pop	r15
    41fc:	ef 90       	pop	r14
    41fe:	08 95       	ret

00004200 <put_FRAM_ENCODERS>:
    4200:	1f 93       	push	r17
    4202:	cf 93       	push	r28
    4204:	df 93       	push	r29
    4206:	cd b7       	in	r28, 0x3d	; 61
    4208:	de b7       	in	r29, 0x3e	; 62
    420a:	a2 97       	sbiw	r28, 0x22	; 34
    420c:	cd bf       	out	0x3d, r28	; 61
    420e:	de bf       	out	0x3e, r29	; 62
    4210:	86 e0       	ldi	r24, 0x06	; 6
    4212:	ea ed       	ldi	r30, 0xDA	; 218
    4214:	f0 eb       	ldi	r31, 0xB0	; 176
    4216:	de 01       	movw	r26, r28
    4218:	59 96       	adiw	r26, 0x19	; 25
    421a:	01 90       	ld	r0, Z+
    421c:	0d 92       	st	X+, r0
    421e:	8a 95       	dec	r24
    4220:	e1 f7       	brne	.-8      	; 0x421a <put_FRAM_ENCODERS+0x1a>
    4222:	10 e0       	ldi	r17, 0x00	; 0
    4224:	27 c0       	rjmp	.+78     	; 0x4274 <put_FRAM_ENCODERS+0x74>
    4226:	be 01       	movw	r22, r28
    4228:	61 5e       	subi	r22, 0xE1	; 225
    422a:	7f 4f       	sbci	r23, 0xFF	; 255
    422c:	80 e8       	ldi	r24, 0x80	; 128
    422e:	81 0f       	add	r24, r17
    4230:	0e 94 1f 1b 	call	0x363e	; 0x363e <get_MOTOR_ENCODER>
    4234:	83 36       	cpi	r24, 0x63	; 99
    4236:	71 f1       	breq	.+92     	; 0x4294 <put_FRAM_ENCODERS+0x94>
    4238:	8f 8d       	ldd	r24, Y+31	; 0x1f
    423a:	98 a1       	ldd	r25, Y+32	; 0x20
    423c:	29 a1       	ldd	r18, Y+33	; 0x21
    423e:	3a a1       	ldd	r19, Y+34	; 0x22
    4240:	3d 8b       	std	Y+21, r19	; 0x15
    4242:	2e 8b       	std	Y+22, r18	; 0x16
    4244:	9f 8b       	std	Y+23, r25	; 0x17
    4246:	88 8f       	std	Y+24, r24	; 0x18
    4248:	e1 2f       	mov	r30, r17
    424a:	f0 e0       	ldi	r31, 0x00	; 0
    424c:	ee 0f       	add	r30, r30
    424e:	ff 1f       	adc	r31, r31
    4250:	81 e0       	ldi	r24, 0x01	; 1
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	8c 0f       	add	r24, r28
    4256:	9d 1f       	adc	r25, r29
    4258:	e8 0f       	add	r30, r24
    425a:	f9 1f       	adc	r31, r25
    425c:	60 8d       	ldd	r22, Z+24	; 0x18
    425e:	71 8d       	ldd	r23, Z+25	; 0x19
    4260:	24 e0       	ldi	r18, 0x04	; 4
    4262:	ae 01       	movw	r20, r28
    4264:	4b 5e       	subi	r20, 0xEB	; 235
    4266:	5f 4f       	sbci	r21, 0xFF	; 255
    4268:	80 e5       	ldi	r24, 0x50	; 80
    426a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <write_FRAM>
    426e:	83 36       	cpi	r24, 0x63	; 99
    4270:	89 f0       	breq	.+34     	; 0x4294 <put_FRAM_ENCODERS+0x94>
    4272:	1f 5f       	subi	r17, 0xFF	; 255
    4274:	13 30       	cpi	r17, 0x03	; 3
    4276:	b8 f2       	brcs	.-82     	; 0x4226 <put_FRAM_ENCODERS+0x26>
    4278:	ce 01       	movw	r24, r28
    427a:	01 96       	adiw	r24, 0x01	; 1
    427c:	0e 94 46 07 	call	0xe8c	; 0xe8c <get_time>
    4280:	24 e1       	ldi	r18, 0x14	; 20
    4282:	ae 01       	movw	r20, r28
    4284:	4f 5f       	subi	r20, 0xFF	; 255
    4286:	5f 4f       	sbci	r21, 0xFF	; 255
    4288:	60 e2       	ldi	r22, 0x20	; 32
    428a:	70 e0       	ldi	r23, 0x00	; 0
    428c:	80 e5       	ldi	r24, 0x50	; 80
    428e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <write_FRAM>
    4292:	80 e0       	ldi	r24, 0x00	; 0
    4294:	a2 96       	adiw	r28, 0x22	; 34
    4296:	cd bf       	out	0x3d, r28	; 61
    4298:	de bf       	out	0x3e, r29	; 62
    429a:	df 91       	pop	r29
    429c:	cf 91       	pop	r28
    429e:	1f 91       	pop	r17
    42a0:	08 95       	ret

000042a2 <put_MOTOR>:
    42a2:	8f 92       	push	r8
    42a4:	9f 92       	push	r9
    42a6:	af 92       	push	r10
    42a8:	bf 92       	push	r11
    42aa:	cf 92       	push	r12
    42ac:	df 92       	push	r13
    42ae:	ef 92       	push	r14
    42b0:	ff 92       	push	r15
    42b2:	0f 93       	push	r16
    42b4:	1f 93       	push	r17
    42b6:	cf 93       	push	r28
    42b8:	df 93       	push	r29
    42ba:	cd b7       	in	r28, 0x3d	; 61
    42bc:	de b7       	in	r29, 0x3e	; 62
    42be:	c5 59       	subi	r28, 0x95	; 149
    42c0:	d1 09       	sbc	r29, r1
    42c2:	cd bf       	out	0x3d, r28	; 61
    42c4:	de bf       	out	0x3e, r29	; 62
    42c6:	a8 2e       	mov	r10, r24
    42c8:	b2 2e       	mov	r11, r18
    42ca:	cd b6       	in	r12, 0x3d	; 61
    42cc:	de b6       	in	r13, 0x3e	; 62
    42ce:	80 e2       	ldi	r24, 0x20	; 32
    42d0:	ef e0       	ldi	r30, 0x0F	; 15
    42d2:	f9 eb       	ldi	r31, 0xB9	; 185
    42d4:	de 01       	movw	r26, r28
    42d6:	11 96       	adiw	r26, 0x01	; 1
    42d8:	01 90       	ld	r0, Z+
    42da:	0d 92       	st	X+, r0
    42dc:	8a 95       	dec	r24
    42de:	e1 f7       	brne	.-8      	; 0x42d8 <put_MOTOR+0x36>
    42e0:	85 e2       	ldi	r24, 0x25	; 37
    42e2:	ef e2       	ldi	r30, 0x2F	; 47
    42e4:	f9 eb       	ldi	r31, 0xB9	; 185
    42e6:	de 01       	movw	r26, r28
    42e8:	91 96       	adiw	r26, 0x21	; 33
    42ea:	01 90       	ld	r0, Z+
    42ec:	0d 92       	st	X+, r0
    42ee:	8a 95       	dec	r24
    42f0:	e1 f7       	brne	.-8      	; 0x42ea <put_MOTOR+0x48>
    42f2:	82 2e       	mov	r8, r18
    42f4:	91 2c       	mov	r9, r1
    42f6:	c4 01       	movw	r24, r8
    42f8:	04 96       	adiw	r24, 0x04	; 4
    42fa:	74 01       	movw	r14, r8
    42fc:	23 e0       	ldi	r18, 0x03	; 3
    42fe:	e2 0e       	add	r14, r18
    4300:	f1 1c       	adc	r15, r1
    4302:	ad b7       	in	r26, 0x3d	; 61
    4304:	be b7       	in	r27, 0x3e	; 62
    4306:	a8 1b       	sub	r26, r24
    4308:	b9 0b       	sbc	r27, r25
    430a:	ad bf       	out	0x3d, r26	; 61
    430c:	be bf       	out	0x3e, r27	; 62
    430e:	0d b7       	in	r16, 0x3d	; 61
    4310:	1e b7       	in	r17, 0x3e	; 62
    4312:	0f 5f       	subi	r16, 0xFF	; 255
    4314:	1f 4f       	sbci	r17, 0xFF	; 255
    4316:	f8 01       	movw	r30, r16
    4318:	10 92 42 2b 	sts	0x2B42, r1	; 0x802b42 <ser_recv1+0xff>
    431c:	81 e0       	ldi	r24, 0x01	; 1
    431e:	80 93 41 2b 	sts	0x2B41, r24	; 0x802b41 <ser_recv1+0xfe>
    4322:	11 96       	adiw	r26, 0x01	; 1
    4324:	ac 92       	st	X, r10
    4326:	61 83       	std	Z+1, r22	; 0x01
    4328:	60 e0       	ldi	r22, 0x00	; 0
    432a:	0e c0       	rjmp	.+28     	; 0x4348 <put_MOTOR+0xa6>
    432c:	86 2f       	mov	r24, r22
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	9c 01       	movw	r18, r24
    4332:	2e 5f       	subi	r18, 0xFE	; 254
    4334:	3f 4f       	sbci	r19, 0xFF	; 255
    4336:	da 01       	movw	r26, r20
    4338:	a8 0f       	add	r26, r24
    433a:	b9 1f       	adc	r27, r25
    433c:	8c 91       	ld	r24, X
    433e:	df 01       	movw	r26, r30
    4340:	a2 0f       	add	r26, r18
    4342:	b3 1f       	adc	r27, r19
    4344:	8c 93       	st	X, r24
    4346:	6f 5f       	subi	r22, 0xFF	; 255
    4348:	6b 15       	cp	r22, r11
    434a:	80 f3       	brcs	.-32     	; 0x432c <put_MOTOR+0x8a>
    434c:	b2 e0       	ldi	r27, 0x02	; 2
    434e:	8b 0e       	add	r8, r27
    4350:	91 1c       	adc	r9, r1
    4352:	b4 01       	movw	r22, r8
    4354:	c8 01       	movw	r24, r16
    4356:	0e 94 ba 18 	call	0x3174	; 0x3174 <crc16>
    435a:	d8 01       	movw	r26, r16
    435c:	a8 0d       	add	r26, r8
    435e:	b9 1d       	adc	r27, r9
    4360:	9c 93       	st	X, r25
    4362:	f8 01       	movw	r30, r16
    4364:	ee 0d       	add	r30, r14
    4366:	ff 1d       	adc	r31, r15
    4368:	80 83       	st	Z, r24
    436a:	64 e0       	ldi	r22, 0x04	; 4
    436c:	6b 0d       	add	r22, r11
    436e:	c8 01       	movw	r24, r16
    4370:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <send_USART1>
    4374:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    4378:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
    437c:	24 c0       	rjmp	.+72     	; 0x43c6 <put_MOTOR+0x124>
    437e:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    4382:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    4386:	85 36       	cpi	r24, 0x65	; 101
    4388:	91 05       	cpc	r25, r1
    438a:	e0 f0       	brcs	.+56     	; 0x43c4 <put_MOTOR+0x122>
    438c:	81 ec       	ldi	r24, 0xC1	; 193
    438e:	8a 0d       	add	r24, r10
    4390:	1f 92       	push	r1
    4392:	8f 93       	push	r24
    4394:	ce 01       	movw	r24, r28
    4396:	01 96       	adiw	r24, 0x01	; 1
    4398:	9f 93       	push	r25
    439a:	8f 93       	push	r24
    439c:	8e 01       	movw	r16, r28
    439e:	0a 5b       	subi	r16, 0xBA	; 186
    43a0:	1f 4f       	sbci	r17, 0xFF	; 255
    43a2:	1f 93       	push	r17
    43a4:	0f 93       	push	r16
    43a6:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
    43aa:	b8 01       	movw	r22, r16
    43ac:	86 e3       	ldi	r24, 0x36	; 54
    43ae:	91 e0       	ldi	r25, 0x01	; 1
    43b0:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
    43b4:	0f 90       	pop	r0
    43b6:	0f 90       	pop	r0
    43b8:	0f 90       	pop	r0
    43ba:	0f 90       	pop	r0
    43bc:	0f 90       	pop	r0
    43be:	0f 90       	pop	r0
    43c0:	83 e6       	ldi	r24, 0x63	; 99
    43c2:	2a c0       	rjmp	.+84     	; 0x4418 <put_MOTOR+0x176>
    43c4:	00 00       	nop
    43c6:	90 91 42 2b 	lds	r25, 0x2B42	; 0x802b42 <ser_recv1+0xff>
    43ca:	80 91 41 2b 	lds	r24, 0x2B41	; 0x802b41 <ser_recv1+0xfe>
    43ce:	98 17       	cp	r25, r24
    43d0:	b0 f2       	brcs	.-84     	; 0x437e <put_MOTOR+0xdc>
    43d2:	90 91 43 2a 	lds	r25, 0x2A43	; 0x802a43 <ser_recv1>
    43d6:	9f 3f       	cpi	r25, 0xFF	; 255
    43d8:	f1 f0       	breq	.+60     	; 0x4416 <put_MOTOR+0x174>
    43da:	81 ee       	ldi	r24, 0xE1	; 225
    43dc:	8a 0d       	add	r24, r10
    43de:	1f 92       	push	r1
    43e0:	9f 93       	push	r25
    43e2:	1f 92       	push	r1
    43e4:	8f 93       	push	r24
    43e6:	ce 01       	movw	r24, r28
    43e8:	81 96       	adiw	r24, 0x21	; 33
    43ea:	9f 93       	push	r25
    43ec:	8f 93       	push	r24
    43ee:	8e 01       	movw	r16, r28
    43f0:	0a 5b       	subi	r16, 0xBA	; 186
    43f2:	1f 4f       	sbci	r17, 0xFF	; 255
    43f4:	1f 93       	push	r17
    43f6:	0f 93       	push	r16
    43f8:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
    43fc:	b8 01       	movw	r22, r16
    43fe:	86 e3       	ldi	r24, 0x36	; 54
    4400:	91 e0       	ldi	r25, 0x01	; 1
    4402:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
    4406:	2d b7       	in	r18, 0x3d	; 61
    4408:	3e b7       	in	r19, 0x3e	; 62
    440a:	28 5f       	subi	r18, 0xF8	; 248
    440c:	3f 4f       	sbci	r19, 0xFF	; 255
    440e:	2d bf       	out	0x3d, r18	; 61
    4410:	3e bf       	out	0x3e, r19	; 62
    4412:	83 e6       	ldi	r24, 0x63	; 99
    4414:	01 c0       	rjmp	.+2      	; 0x4418 <put_MOTOR+0x176>
    4416:	80 e0       	ldi	r24, 0x00	; 0
    4418:	cd be       	out	0x3d, r12	; 61
    441a:	de be       	out	0x3e, r13	; 62
    441c:	cb 56       	subi	r28, 0x6B	; 107
    441e:	df 4f       	sbci	r29, 0xFF	; 255
    4420:	cd bf       	out	0x3d, r28	; 61
    4422:	de bf       	out	0x3e, r29	; 62
    4424:	df 91       	pop	r29
    4426:	cf 91       	pop	r28
    4428:	1f 91       	pop	r17
    442a:	0f 91       	pop	r16
    442c:	ff 90       	pop	r15
    442e:	ef 90       	pop	r14
    4430:	df 90       	pop	r13
    4432:	cf 90       	pop	r12
    4434:	bf 90       	pop	r11
    4436:	af 90       	pop	r10
    4438:	9f 90       	pop	r9
    443a:	8f 90       	pop	r8
    443c:	08 95       	ret

0000443e <move_MOTOR>:
    443e:	bf 92       	push	r11
    4440:	cf 92       	push	r12
    4442:	df 92       	push	r13
    4444:	ef 92       	push	r14
    4446:	ff 92       	push	r15
    4448:	0f 93       	push	r16
    444a:	1f 93       	push	r17
    444c:	cf 93       	push	r28
    444e:	df 93       	push	r29
    4450:	cd b7       	in	r28, 0x3d	; 61
    4452:	de b7       	in	r29, 0x3e	; 62
    4454:	c7 58       	subi	r28, 0x87	; 135
    4456:	d1 09       	sbc	r29, r1
    4458:	cd bf       	out	0x3d, r28	; 61
    445a:	de bf       	out	0x3e, r29	; 62
    445c:	18 2f       	mov	r17, r24
    445e:	6a 01       	movw	r12, r20
    4460:	7b 01       	movw	r14, r22
    4462:	82 e2       	ldi	r24, 0x22	; 34
    4464:	e4 e5       	ldi	r30, 0x54	; 84
    4466:	f9 eb       	ldi	r31, 0xB9	; 185
    4468:	de 01       	movw	r26, r28
    446a:	11 96       	adiw	r26, 0x01	; 1
    446c:	01 90       	ld	r0, Z+
    446e:	0d 92       	st	X+, r0
    4470:	8a 95       	dec	r24
    4472:	e1 f7       	brne	.-8      	; 0x446c <move_MOTOR+0x2e>
    4474:	68 94       	set
    4476:	bb 24       	eor	r11, r11
    4478:	b7 f8       	bld	r11, 7
    447a:	b1 0e       	add	r11, r17
    447c:	be 01       	movw	r22, r28
    447e:	6c 57       	subi	r22, 0x7C	; 124
    4480:	7f 4f       	sbci	r23, 0xFF	; 255
    4482:	81 2f       	mov	r24, r17
    4484:	0e 94 1f 1b 	call	0x363e	; 0x363e <get_MOTOR_ENCODER>
    4488:	cc 57       	subi	r28, 0x7C	; 124
    448a:	df 4f       	sbci	r29, 0xFF	; 255
    448c:	88 81       	ld	r24, Y
    448e:	99 81       	ldd	r25, Y+1	; 0x01
    4490:	aa 81       	ldd	r26, Y+2	; 0x02
    4492:	bb 81       	ldd	r27, Y+3	; 0x03
    4494:	c4 58       	subi	r28, 0x84	; 132
    4496:	d0 40       	sbci	r29, 0x00	; 0
    4498:	8c 15       	cp	r24, r12
    449a:	9d 05       	cpc	r25, r13
    449c:	ae 05       	cpc	r26, r14
    449e:	bf 05       	cpc	r27, r15
    44a0:	09 f4       	brne	.+2      	; 0x44a4 <move_MOTOR+0x66>
    44a2:	84 c0       	rjmp	.+264    	; 0x45ac <move_MOTOR+0x16e>
    44a4:	e4 96       	adiw	r28, 0x34	; 52
    44a6:	1f ae       	std	Y+63, r1	; 0x3f
    44a8:	e4 97       	sbiw	r28, 0x34	; 52
    44aa:	e5 96       	adiw	r28, 0x35	; 53
    44ac:	1f ae       	std	Y+63, r1	; 0x3f
    44ae:	e5 97       	sbiw	r28, 0x35	; 53
    44b0:	37 e3       	ldi	r19, 0x37	; 55
    44b2:	e6 96       	adiw	r28, 0x36	; 54
    44b4:	3f af       	std	Y+63, r19	; 0x3f
    44b6:	e6 97       	sbiw	r28, 0x36	; 54
    44b8:	2a e4       	ldi	r18, 0x4A	; 74
    44ba:	e7 96       	adiw	r28, 0x37	; 55
    44bc:	2f af       	std	Y+63, r18	; 0x3f
    44be:	e7 97       	sbiw	r28, 0x37	; 55
    44c0:	e8 96       	adiw	r28, 0x38	; 56
    44c2:	1f ae       	std	Y+63, r1	; 0x3f
    44c4:	e8 97       	sbiw	r28, 0x38	; 56
    44c6:	e9 96       	adiw	r28, 0x39	; 57
    44c8:	1f ae       	std	Y+63, r1	; 0x3f
    44ca:	e9 97       	sbiw	r28, 0x39	; 57
    44cc:	4b e1       	ldi	r20, 0x1B	; 27
    44ce:	ea 96       	adiw	r28, 0x3a	; 58
    44d0:	4f af       	std	Y+63, r20	; 0x3f
    44d2:	ea 97       	sbiw	r28, 0x3a	; 58
    44d4:	45 ea       	ldi	r20, 0xA5	; 165
    44d6:	eb 96       	adiw	r28, 0x3b	; 59
    44d8:	4f af       	std	Y+63, r20	; 0x3f
    44da:	eb 97       	sbiw	r28, 0x3b	; 59
    44dc:	ec 96       	adiw	r28, 0x3c	; 60
    44de:	1f ae       	std	Y+63, r1	; 0x3f
    44e0:	ec 97       	sbiw	r28, 0x3c	; 60
    44e2:	ed 96       	adiw	r28, 0x3d	; 61
    44e4:	1f ae       	std	Y+63, r1	; 0x3f
    44e6:	ed 97       	sbiw	r28, 0x3d	; 61
    44e8:	ee 96       	adiw	r28, 0x3e	; 62
    44ea:	3f af       	std	Y+63, r19	; 0x3f
    44ec:	ee 97       	sbiw	r28, 0x3e	; 62
    44ee:	ef 96       	adiw	r28, 0x3f	; 63
    44f0:	2f af       	std	Y+63, r18	; 0x3f
    44f2:	ef 97       	sbiw	r28, 0x3f	; 63
    44f4:	c1 58       	subi	r28, 0x81	; 129
    44f6:	df 4f       	sbci	r29, 0xFF	; 255
    44f8:	f8 82       	st	Y, r15
    44fa:	cf 57       	subi	r28, 0x7F	; 127
    44fc:	d0 40       	sbci	r29, 0x00	; 0
    44fe:	c0 58       	subi	r28, 0x80	; 128
    4500:	df 4f       	sbci	r29, 0xFF	; 255
    4502:	e8 82       	st	Y, r14
    4504:	c0 58       	subi	r28, 0x80	; 128
    4506:	d0 40       	sbci	r29, 0x00	; 0
    4508:	cf 57       	subi	r28, 0x7F	; 127
    450a:	df 4f       	sbci	r29, 0xFF	; 255
    450c:	d8 82       	st	Y, r13
    450e:	c1 58       	subi	r28, 0x81	; 129
    4510:	d0 40       	sbci	r29, 0x00	; 0
    4512:	ce 57       	subi	r28, 0x7E	; 126
    4514:	df 4f       	sbci	r29, 0xFF	; 255
    4516:	c8 82       	st	Y, r12
    4518:	c2 58       	subi	r28, 0x82	; 130
    451a:	d0 40       	sbci	r29, 0x00	; 0
    451c:	21 e0       	ldi	r18, 0x01	; 1
    451e:	cd 57       	subi	r28, 0x7D	; 125
    4520:	df 4f       	sbci	r29, 0xFF	; 255
    4522:	28 83       	st	Y, r18
    4524:	c3 58       	subi	r28, 0x83	; 131
    4526:	d0 40       	sbci	r29, 0x00	; 0
    4528:	8c 15       	cp	r24, r12
    452a:	9d 05       	cpc	r25, r13
    452c:	ae 05       	cpc	r26, r14
    452e:	bf 05       	cpc	r27, r15
    4530:	3c f4       	brge	.+14     	; 0x4540 <move_MOTOR+0x102>
    4532:	eb 2d       	mov	r30, r11
    4534:	f0 e0       	ldi	r31, 0x00	; 0
    4536:	e3 5c       	subi	r30, 0xC3	; 195
    4538:	f5 4d       	sbci	r31, 0xD5	; 213
    453a:	81 e0       	ldi	r24, 0x01	; 1
    453c:	80 83       	st	Z, r24
    453e:	0a c0       	rjmp	.+20     	; 0x4554 <move_MOTOR+0x116>
    4540:	c8 16       	cp	r12, r24
    4542:	d9 06       	cpc	r13, r25
    4544:	ea 06       	cpc	r14, r26
    4546:	fb 06       	cpc	r15, r27
    4548:	2c f4       	brge	.+10     	; 0x4554 <move_MOTOR+0x116>
    454a:	eb 2d       	mov	r30, r11
    454c:	f0 e0       	ldi	r31, 0x00	; 0
    454e:	e3 5c       	subi	r30, 0xC3	; 195
    4550:	f5 4d       	sbci	r31, 0xD5	; 213
    4552:	10 82       	st	Z, r1
    4554:	21 e1       	ldi	r18, 0x11	; 17
    4556:	ae 01       	movw	r20, r28
    4558:	4d 58       	subi	r20, 0x8D	; 141
    455a:	5f 4f       	sbci	r21, 0xFF	; 255
    455c:	61 e4       	ldi	r22, 0x41	; 65
    455e:	81 2f       	mov	r24, r17
    4560:	0e 94 51 21 	call	0x42a2	; 0x42a2 <put_MOTOR>
    4564:	08 2f       	mov	r16, r24
    4566:	83 36       	cpi	r24, 0x63	; 99
    4568:	19 f5       	brne	.+70     	; 0x45b0 <move_MOTOR+0x172>
    456a:	eb 2d       	mov	r30, r11
    456c:	f0 e0       	ldi	r31, 0x00	; 0
    456e:	e3 5c       	subi	r30, 0xC3	; 195
    4570:	f5 4d       	sbci	r31, 0xD5	; 213
    4572:	82 e0       	ldi	r24, 0x02	; 2
    4574:	80 83       	st	Z, r24
    4576:	1f 53       	subi	r17, 0x3F	; 63
    4578:	1f 92       	push	r1
    457a:	1f 93       	push	r17
    457c:	ce 01       	movw	r24, r28
    457e:	01 96       	adiw	r24, 0x01	; 1
    4580:	9f 93       	push	r25
    4582:	8f 93       	push	r24
    4584:	7e 01       	movw	r14, r28
    4586:	83 e2       	ldi	r24, 0x23	; 35
    4588:	e8 0e       	add	r14, r24
    458a:	f1 1c       	adc	r15, r1
    458c:	ff 92       	push	r15
    458e:	ef 92       	push	r14
    4590:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
    4594:	b7 01       	movw	r22, r14
    4596:	86 e3       	ldi	r24, 0x36	; 54
    4598:	91 e0       	ldi	r25, 0x01	; 1
    459a:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
    459e:	0f 90       	pop	r0
    45a0:	0f 90       	pop	r0
    45a2:	0f 90       	pop	r0
    45a4:	0f 90       	pop	r0
    45a6:	0f 90       	pop	r0
    45a8:	0f 90       	pop	r0
    45aa:	03 c0       	rjmp	.+6      	; 0x45b2 <move_MOTOR+0x174>
    45ac:	00 e0       	ldi	r16, 0x00	; 0
    45ae:	01 c0       	rjmp	.+2      	; 0x45b2 <move_MOTOR+0x174>
    45b0:	00 e0       	ldi	r16, 0x00	; 0
    45b2:	80 2f       	mov	r24, r16
    45b4:	c9 57       	subi	r28, 0x79	; 121
    45b6:	df 4f       	sbci	r29, 0xFF	; 255
    45b8:	cd bf       	out	0x3d, r28	; 61
    45ba:	de bf       	out	0x3e, r29	; 62
    45bc:	df 91       	pop	r29
    45be:	cf 91       	pop	r28
    45c0:	1f 91       	pop	r17
    45c2:	0f 91       	pop	r16
    45c4:	ff 90       	pop	r15
    45c6:	ef 90       	pop	r14
    45c8:	df 90       	pop	r13
    45ca:	cf 90       	pop	r12
    45cc:	bf 90       	pop	r11
    45ce:	08 95       	ret

000045d0 <move_MOTORS_PISTON>:

uint8_t move_MOTORS_PISTON(int32_t deltaValue)
{
    45d0:	8f 92       	push	r8
    45d2:	9f 92       	push	r9
    45d4:	af 92       	push	r10
    45d6:	bf 92       	push	r11
    45d8:	df 92       	push	r13
    45da:	ef 92       	push	r14
    45dc:	ff 92       	push	r15
    45de:	0f 93       	push	r16
    45e0:	1f 93       	push	r17
    45e2:	cf 93       	push	r28
    45e4:	df 93       	push	r29
    45e6:	cd b7       	in	r28, 0x3d	; 61
    45e8:	de b7       	in	r29, 0x3e	; 62
    45ea:	c5 5c       	subi	r28, 0xC5	; 197
    45ec:	d1 09       	sbc	r29, r1
    45ee:	cd bf       	out	0x3d, r28	; 61
    45f0:	de bf       	out	0x3e, r29	; 62
    45f2:	4b 01       	movw	r8, r22
    45f4:	5c 01       	movw	r10, r24

	char strbuf[80];
	uint8_t i, mtraddr;
	int32_t curPos[3], newPos[3];
	const char fmt0[] = "move_MOTORS_PISTON: get_MOTOR_ENCODER error on %c";
    45f6:	82 e3       	ldi	r24, 0x32	; 50
    45f8:	eb e0       	ldi	r30, 0x0B	; 11
    45fa:	fa eb       	ldi	r31, 0xBA	; 186
    45fc:	de 01       	movw	r26, r28
    45fe:	a7 59       	subi	r26, 0x97	; 151
    4600:	bf 4f       	sbci	r27, 0xFF	; 255
    4602:	01 90       	ld	r0, Z+
    4604:	0d 92       	st	X+, r0
    4606:	8a 95       	dec	r24
    4608:	e1 f7       	brne	.-8      	; 0x4602 <move_MOTORS_PISTON+0x32>
	const char fmt1[] = "move_MOTORS_PISTON: move_MOTOR error on %c";
    460a:	8b e2       	ldi	r24, 0x2B	; 43
    460c:	ed e3       	ldi	r30, 0x3D	; 61
    460e:	fa eb       	ldi	r31, 0xBA	; 186
    4610:	de 01       	movw	r26, r28
    4612:	a5 56       	subi	r26, 0x65	; 101
    4614:	bf 4f       	sbci	r27, 0xFF	; 255
    4616:	01 90       	ld	r0, Z+
    4618:	0d 92       	st	X+, r0
    461a:	8a 95       	dec	r24
    461c:	e1 f7       	brne	.-8      	; 0x4616 <move_MOTORS_PISTON+0x46>

	for (i = 0; i < NMOTORS; i++) {
    461e:	f1 2c       	mov	r15, r1
    4620:	52 c0       	rjmp	.+164    	; 0x46c6 <move_MOTORS_PISTON+0xf6>
		mtraddr = i + MOTOR_A;
    4622:	68 94       	set
    4624:	dd 24       	eor	r13, r13
    4626:	d7 f8       	bld	r13, 7
    4628:	df 0c       	add	r13, r15
		if (get_MOTOR_ENCODER(mtraddr, &curPos[i]) == ERROR) {
    462a:	0f 2d       	mov	r16, r15
    462c:	10 e0       	ldi	r17, 0x00	; 0
    462e:	b8 01       	movw	r22, r16
    4630:	66 0f       	add	r22, r22
    4632:	77 1f       	adc	r23, r23
    4634:	66 0f       	add	r22, r22
    4636:	77 1f       	adc	r23, r23
    4638:	81 e5       	ldi	r24, 0x51	; 81
    463a:	90 e0       	ldi	r25, 0x00	; 0
    463c:	8c 0f       	add	r24, r28
    463e:	9d 1f       	adc	r25, r29
    4640:	68 0f       	add	r22, r24
    4642:	79 1f       	adc	r23, r25
    4644:	8d 2d       	mov	r24, r13
    4646:	0e 94 1f 1b 	call	0x363e	; 0x363e <get_MOTOR_ENCODER>
    464a:	e8 2e       	mov	r14, r24
    464c:	93 e6       	ldi	r25, 0x63	; 99
    464e:	89 13       	cpse	r24, r25
    4650:	1d c0       	rjmp	.+58     	; 0x468c <move_MOTORS_PISTON+0xbc>
			sprintf(strbuf, fmt0, mtraddr-63);
    4652:	8d 2d       	mov	r24, r13
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	cf 97       	sbiw	r24, 0x3f	; 63
    4658:	9f 93       	push	r25
    465a:	8f 93       	push	r24
    465c:	ce 01       	movw	r24, r28
    465e:	87 59       	subi	r24, 0x97	; 151
    4660:	9f 4f       	sbci	r25, 0xFF	; 255
    4662:	9f 93       	push	r25
    4664:	8f 93       	push	r24
    4666:	8e 01       	movw	r16, r28
    4668:	0f 5f       	subi	r16, 0xFF	; 255
    466a:	1f 4f       	sbci	r17, 0xFF	; 255
    466c:	1f 93       	push	r17
    466e:	0f 93       	push	r16
    4670:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			printError(ERR_MTR, strbuf);
    4674:	b8 01       	movw	r22, r16
    4676:	86 e3       	ldi	r24, 0x36	; 54
    4678:	91 e0       	ldi	r25, 0x01	; 1
    467a:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
			return(ERROR);
    467e:	0f 90       	pop	r0
    4680:	0f 90       	pop	r0
    4682:	0f 90       	pop	r0
    4684:	0f 90       	pop	r0
    4686:	0f 90       	pop	r0
    4688:	0f 90       	pop	r0
    468a:	8c c0       	rjmp	.+280    	; 0x47a4 <move_MOTORS_PISTON+0x1d4>
		}
		newPos[i] = curPos[i] + deltaValue;
    468c:	00 0f       	add	r16, r16
    468e:	11 1f       	adc	r17, r17
    4690:	00 0f       	add	r16, r16
    4692:	11 1f       	adc	r17, r17
    4694:	e1 e5       	ldi	r30, 0x51	; 81
    4696:	f0 e0       	ldi	r31, 0x00	; 0
    4698:	ec 0f       	add	r30, r28
    469a:	fd 1f       	adc	r31, r29
    469c:	e0 0f       	add	r30, r16
    469e:	f1 1f       	adc	r31, r17
    46a0:	80 81       	ld	r24, Z
    46a2:	91 81       	ldd	r25, Z+1	; 0x01
    46a4:	a2 81       	ldd	r26, Z+2	; 0x02
    46a6:	b3 81       	ldd	r27, Z+3	; 0x03
    46a8:	88 0d       	add	r24, r8
    46aa:	99 1d       	adc	r25, r9
    46ac:	aa 1d       	adc	r26, r10
    46ae:	bb 1d       	adc	r27, r11
    46b0:	ed e5       	ldi	r30, 0x5D	; 93
    46b2:	f0 e0       	ldi	r31, 0x00	; 0
    46b4:	ec 0f       	add	r30, r28
    46b6:	fd 1f       	adc	r31, r29
    46b8:	e0 0f       	add	r30, r16
    46ba:	f1 1f       	adc	r31, r17
    46bc:	80 83       	st	Z, r24
    46be:	91 83       	std	Z+1, r25	; 0x01
    46c0:	a2 83       	std	Z+2, r26	; 0x02
    46c2:	b3 83       	std	Z+3, r27	; 0x03
	uint8_t i, mtraddr;
	int32_t curPos[3], newPos[3];
	const char fmt0[] = "move_MOTORS_PISTON: get_MOTOR_ENCODER error on %c";
	const char fmt1[] = "move_MOTORS_PISTON: move_MOTOR error on %c";

	for (i = 0; i < NMOTORS; i++) {
    46c4:	f3 94       	inc	r15
    46c6:	82 e0       	ldi	r24, 0x02	; 2
    46c8:	8f 15       	cp	r24, r15
    46ca:	08 f0       	brcs	.+2      	; 0x46ce <move_MOTORS_PISTON+0xfe>
    46cc:	aa cf       	rjmp	.-172    	; 0x4622 <move_MOTORS_PISTON+0x52>
    46ce:	f1 2c       	mov	r15, r1
    46d0:	64 c0       	rjmp	.+200    	; 0x479a <move_MOTORS_PISTON+0x1ca>
		}
		newPos[i] = curPos[i] + deltaValue;
	}

	for (i = 0; i < NMOTORS; i++) {
		mtraddr = i + MOTOR_A;
    46d2:	68 94       	set
    46d4:	dd 24       	eor	r13, r13
    46d6:	d7 f8       	bld	r13, 7
    46d8:	df 0c       	add	r13, r15
		if (move_MOTOR(mtraddr, newPos[i]) == ERROR) {
    46da:	0f 2d       	mov	r16, r15
    46dc:	10 e0       	ldi	r17, 0x00	; 0
    46de:	f8 01       	movw	r30, r16
    46e0:	ee 0f       	add	r30, r30
    46e2:	ff 1f       	adc	r31, r31
    46e4:	ee 0f       	add	r30, r30
    46e6:	ff 1f       	adc	r31, r31
    46e8:	8d e5       	ldi	r24, 0x5D	; 93
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	8c 0f       	add	r24, r28
    46ee:	9d 1f       	adc	r25, r29
    46f0:	e8 0f       	add	r30, r24
    46f2:	f9 1f       	adc	r31, r25
    46f4:	80 80       	ld	r8, Z
    46f6:	91 80       	ldd	r9, Z+1	; 0x01
    46f8:	a2 80       	ldd	r10, Z+2	; 0x02
    46fa:	b3 80       	ldd	r11, Z+3	; 0x03
    46fc:	b5 01       	movw	r22, r10
    46fe:	a4 01       	movw	r20, r8
    4700:	8d 2d       	mov	r24, r13
    4702:	0e 94 1f 22 	call	0x443e	; 0x443e <move_MOTOR>
    4706:	e8 2e       	mov	r14, r24
    4708:	93 e6       	ldi	r25, 0x63	; 99
    470a:	89 13       	cpse	r24, r25
    470c:	1d c0       	rjmp	.+58     	; 0x4748 <move_MOTORS_PISTON+0x178>
			sprintf(strbuf, fmt1, mtraddr-63);
    470e:	8d 2d       	mov	r24, r13
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	cf 97       	sbiw	r24, 0x3f	; 63
    4714:	9f 93       	push	r25
    4716:	8f 93       	push	r24
    4718:	ce 01       	movw	r24, r28
    471a:	85 56       	subi	r24, 0x65	; 101
    471c:	9f 4f       	sbci	r25, 0xFF	; 255
    471e:	9f 93       	push	r25
    4720:	8f 93       	push	r24
    4722:	8e 01       	movw	r16, r28
    4724:	0f 5f       	subi	r16, 0xFF	; 255
    4726:	1f 4f       	sbci	r17, 0xFF	; 255
    4728:	1f 93       	push	r17
    472a:	0f 93       	push	r16
    472c:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			printError(ERR_MTR, strbuf);
    4730:	b8 01       	movw	r22, r16
    4732:	86 e3       	ldi	r24, 0x36	; 54
    4734:	91 e0       	ldi	r25, 0x01	; 1
    4736:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
			return(ERROR);
    473a:	0f 90       	pop	r0
    473c:	0f 90       	pop	r0
    473e:	0f 90       	pop	r0
    4740:	0f 90       	pop	r0
    4742:	0f 90       	pop	r0
    4744:	0f 90       	pop	r0
    4746:	2e c0       	rjmp	.+92     	; 0x47a4 <move_MOTORS_PISTON+0x1d4>
		}
		motorDir[i] = MTRDIRUNKNOWN;
    4748:	82 e0       	ldi	r24, 0x02	; 2
    474a:	f8 01       	movw	r30, r16
    474c:	e3 5c       	subi	r30, 0xC3	; 195
    474e:	f5 4d       	sbci	r31, 0xD5	; 213
    4750:	80 83       	st	Z, r24
		if (newPos[i] > curPos[i]) {
    4752:	f8 01       	movw	r30, r16
    4754:	ee 0f       	add	r30, r30
    4756:	ff 1f       	adc	r31, r31
    4758:	ee 0f       	add	r30, r30
    475a:	ff 1f       	adc	r31, r31
    475c:	81 e5       	ldi	r24, 0x51	; 81
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	8c 0f       	add	r24, r28
    4762:	9d 1f       	adc	r25, r29
    4764:	e8 0f       	add	r30, r24
    4766:	f9 1f       	adc	r31, r25
    4768:	80 81       	ld	r24, Z
    476a:	91 81       	ldd	r25, Z+1	; 0x01
    476c:	a2 81       	ldd	r26, Z+2	; 0x02
    476e:	b3 81       	ldd	r27, Z+3	; 0x03
    4770:	88 15       	cp	r24, r8
    4772:	99 05       	cpc	r25, r9
    4774:	aa 05       	cpc	r26, r10
    4776:	bb 05       	cpc	r27, r11
    4778:	34 f4       	brge	.+12     	; 0x4786 <move_MOTORS_PISTON+0x1b6>
			motorDir[i] = MTRDIRPOSITIVE;
    477a:	f8 01       	movw	r30, r16
    477c:	e3 5c       	subi	r30, 0xC3	; 195
    477e:	f5 4d       	sbci	r31, 0xD5	; 213
    4780:	81 e0       	ldi	r24, 0x01	; 1
    4782:	80 83       	st	Z, r24
    4784:	09 c0       	rjmp	.+18     	; 0x4798 <move_MOTORS_PISTON+0x1c8>
		} else if (newPos[i] < curPos[i]) {
    4786:	88 16       	cp	r8, r24
    4788:	99 06       	cpc	r9, r25
    478a:	aa 06       	cpc	r10, r26
    478c:	bb 06       	cpc	r11, r27
    478e:	24 f4       	brge	.+8      	; 0x4798 <move_MOTORS_PISTON+0x1c8>
			motorDir[i] = MTRDIRNEGATIVE;
    4790:	f8 01       	movw	r30, r16
    4792:	e3 5c       	subi	r30, 0xC3	; 195
    4794:	f5 4d       	sbci	r31, 0xD5	; 213
    4796:	10 82       	st	Z, r1
			return(ERROR);
		}
		newPos[i] = curPos[i] + deltaValue;
	}

	for (i = 0; i < NMOTORS; i++) {
    4798:	f3 94       	inc	r15
    479a:	92 e0       	ldi	r25, 0x02	; 2
    479c:	9f 15       	cp	r25, r15
    479e:	08 f0       	brcs	.+2      	; 0x47a2 <move_MOTORS_PISTON+0x1d2>
    47a0:	98 cf       	rjmp	.-208    	; 0x46d2 <move_MOTORS_PISTON+0x102>
		} else if (newPos[i] < curPos[i]) {
			motorDir[i] = MTRDIRNEGATIVE;
		}
	}

	return(NOERROR);
    47a2:	e1 2c       	mov	r14, r1

}
    47a4:	8e 2d       	mov	r24, r14
    47a6:	cb 53       	subi	r28, 0x3B	; 59
    47a8:	df 4f       	sbci	r29, 0xFF	; 255
    47aa:	cd bf       	out	0x3d, r28	; 61
    47ac:	de bf       	out	0x3e, r29	; 62
    47ae:	df 91       	pop	r29
    47b0:	cf 91       	pop	r28
    47b2:	1f 91       	pop	r17
    47b4:	0f 91       	pop	r16
    47b6:	ff 90       	pop	r15
    47b8:	ef 90       	pop	r14
    47ba:	df 90       	pop	r13
    47bc:	bf 90       	pop	r11
    47be:	af 90       	pop	r10
    47c0:	9f 90       	pop	r9
    47c2:	8f 90       	pop	r8
    47c4:	08 95       	ret

000047c6 <move_MOTOR_CMD>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR_CMD(uint8_t cstack)
{
    47c6:	8f 92       	push	r8
    47c8:	9f 92       	push	r9
    47ca:	af 92       	push	r10
    47cc:	bf 92       	push	r11
    47ce:	ef 92       	push	r14
    47d0:	ff 92       	push	r15
    47d2:	0f 93       	push	r16
    47d4:	1f 93       	push	r17
    47d6:	cf 93       	push	r28
    47d8:	df 93       	push	r29
    47da:	cd b7       	in	r28, 0x3d	; 61
    47dc:	de b7       	in	r29, 0x3e	; 62
    47de:	c4 5e       	subi	r28, 0xE4	; 228
    47e0:	d1 09       	sbc	r29, r1
    47e2:	cd bf       	out	0x3d, r28	; 61
    47e4:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	uint8_t motor, controller;
	int32_t newPosition, currentPosition, deltaPos;
	const char fmt0[] = "move_MOTOR_CMD: get_MOTOR_ENCODER error";
    47e6:	98 e2       	ldi	r25, 0x28	; 40
    47e8:	e8 e6       	ldi	r30, 0x68	; 104
    47ea:	fa eb       	ldi	r31, 0xBA	; 186
    47ec:	de 01       	movw	r26, r28
    47ee:	ab 5a       	subi	r26, 0xAB	; 171
    47f0:	bf 4f       	sbci	r27, 0xFF	; 255
    47f2:	01 90       	ld	r0, Z+
    47f4:	0d 92       	st	X+, r0
    47f6:	9a 95       	dec	r25
    47f8:	e1 f7       	brne	.-8      	; 0x47f2 <move_MOTOR_CMD+0x2c>
	const char fmt1[] = "move_MOTOR_CMD: unknown motor";
    47fa:	9e e1       	ldi	r25, 0x1E	; 30
    47fc:	e0 e9       	ldi	r30, 0x90	; 144
    47fe:	fa eb       	ldi	r31, 0xBA	; 186
    4800:	de 01       	movw	r26, r28
    4802:	a3 58       	subi	r26, 0x83	; 131
    4804:	bf 4f       	sbci	r27, 0xFF	; 255
    4806:	01 90       	ld	r0, Z+
    4808:	0d 92       	st	X+, r0
    480a:	9a 95       	dec	r25
    480c:	e1 f7       	brne	.-8      	; 0x4806 <move_MOTOR_CMD+0x40>
	const char fmt2[] = "move_MOTOR_CMD: move_MOTOR error";
    480e:	91 e2       	ldi	r25, 0x21	; 33
    4810:	ee ea       	ldi	r30, 0xAE	; 174
    4812:	fa eb       	ldi	r31, 0xBA	; 186
    4814:	de 01       	movw	r26, r28
    4816:	a5 56       	subi	r26, 0x65	; 101
    4818:	bf 4f       	sbci	r27, 0xFF	; 255
    481a:	01 90       	ld	r0, Z+
    481c:	0d 92       	st	X+, r0
    481e:	9a 95       	dec	r25
    4820:	e1 f7       	brne	.-8      	; 0x481a <move_MOTOR_CMD+0x54>
	const char fmt3[] = "move_MOTOR_CMD: move_MOTORS_PISTON error";
    4822:	99 e2       	ldi	r25, 0x29	; 41
    4824:	ef ec       	ldi	r30, 0xCF	; 207
    4826:	fa eb       	ldi	r31, 0xBA	; 186
    4828:	de 01       	movw	r26, r28
    482a:	a4 54       	subi	r26, 0x44	; 68
    482c:	bf 4f       	sbci	r27, 0xFF	; 255
    482e:	01 90       	ld	r0, Z+
    4830:	0d 92       	st	X+, r0
    4832:	9a 95       	dec	r25
    4834:	e1 f7       	brne	.-8      	; 0x482e <move_MOTOR_CMD+0x68>

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    4836:	08 2f       	mov	r16, r24
    4838:	10 e0       	ldi	r17, 0x00	; 0
    483a:	84 e3       	ldi	r24, 0x34	; 52
    483c:	80 9f       	mul	r24, r16
    483e:	f0 01       	movw	r30, r0
    4840:	81 9f       	mul	r24, r17
    4842:	f0 0d       	add	r31, r0
    4844:	11 24       	eor	r1, r1
    4846:	e1 5f       	subi	r30, 0xF1	; 241
    4848:	f7 4d       	sbci	r31, 0xD7	; 215
    484a:	82 81       	ldd	r24, Z+2	; 0x02
    484c:	88 23       	and	r24, r24
    484e:	09 f4       	brne	.+2      	; 0x4852 <move_MOTOR_CMD+0x8c>
    4850:	1c c1       	rjmp	.+568    	; 0x4a8a <move_MOTOR_CMD+0x2c4>
		return(NOERROR);
	}

	motor = pcmd[cstack].cobject;
    4852:	84 e3       	ldi	r24, 0x34	; 52
    4854:	80 9f       	mul	r24, r16
    4856:	f0 01       	movw	r30, r0
    4858:	81 9f       	mul	r24, r17
    485a:	f0 0d       	add	r31, r0
    485c:	11 24       	eor	r1, r1
    485e:	e1 5f       	subi	r30, 0xF1	; 241
    4860:	f7 4d       	sbci	r31, 0xD7	; 215
    4862:	81 81       	ldd	r24, Z+1	; 0x01

	switch(motor) {
    4864:	84 36       	cpi	r24, 0x64	; 100
    4866:	40 f4       	brcc	.+16     	; 0x4878 <move_MOTOR_CMD+0xb2>
    4868:	81 36       	cpi	r24, 0x61	; 97
    486a:	08 f0       	brcs	.+2      	; 0x486e <move_MOTOR_CMD+0xa8>
    486c:	41 c0       	rjmp	.+130    	; 0x48f0 <move_MOTOR_CMD+0x12a>
    486e:	9f eb       	ldi	r25, 0xBF	; 191
    4870:	98 0f       	add	r25, r24
    4872:	93 30       	cpi	r25, 0x03	; 3
    4874:	28 f0       	brcs	.+10     	; 0x4880 <move_MOTOR_CMD+0xba>
    4876:	aa c0       	rjmp	.+340    	; 0x49cc <move_MOTOR_CMD+0x206>
    4878:	84 36       	cpi	r24, 0x64	; 100
    487a:	09 f4       	brne	.+2      	; 0x487e <move_MOTOR_CMD+0xb8>
    487c:	7b c0       	rjmp	.+246    	; 0x4974 <move_MOTOR_CMD+0x1ae>
    487e:	a6 c0       	rjmp	.+332    	; 0x49cc <move_MOTOR_CMD+0x206>

		case 'A':			// Move absolute
		case 'B':
		case 'C':
			controller = motor + 63;
    4880:	0f 2e       	mov	r0, r31
    4882:	ff e3       	ldi	r31, 0x3F	; 63
    4884:	ef 2e       	mov	r14, r31
    4886:	f0 2d       	mov	r31, r0
    4888:	e8 0e       	add	r14, r24
			if (get_MOTOR_ENCODER(controller, &currentPosition) == ERROR) {
    488a:	be 01       	movw	r22, r28
    488c:	6f 5a       	subi	r22, 0xAF	; 175
    488e:	7f 4f       	sbci	r23, 0xFF	; 255
    4890:	8e 2d       	mov	r24, r14
    4892:	0e 94 1f 1b 	call	0x363e	; 0x363e <get_MOTOR_ENCODER>
    4896:	f8 2e       	mov	r15, r24
    4898:	83 e6       	ldi	r24, 0x63	; 99
    489a:	f8 12       	cpse	r15, r24
    489c:	16 c0       	rjmp	.+44     	; 0x48ca <move_MOTOR_CMD+0x104>
				sprintf(strbuf, fmt0);
    489e:	ce 01       	movw	r24, r28
    48a0:	8b 5a       	subi	r24, 0xAB	; 171
    48a2:	9f 4f       	sbci	r25, 0xFF	; 255
    48a4:	9f 93       	push	r25
    48a6:	8f 93       	push	r24
    48a8:	8e 01       	movw	r16, r28
    48aa:	0f 5f       	subi	r16, 0xFF	; 255
    48ac:	1f 4f       	sbci	r17, 0xFF	; 255
    48ae:	1f 93       	push	r17
    48b0:	0f 93       	push	r16
    48b2:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
				printError(ERR_MTR_ENC_VAL, strbuf);
    48b6:	b8 01       	movw	r22, r16
    48b8:	85 e3       	ldi	r24, 0x35	; 53
    48ba:	91 e0       	ldi	r25, 0x01	; 1
    48bc:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				return(ERROR);
    48c0:	0f 90       	pop	r0
    48c2:	0f 90       	pop	r0
    48c4:	0f 90       	pop	r0
    48c6:	0f 90       	pop	r0
    48c8:	e5 c0       	rjmp	.+458    	; 0x4a94 <move_MOTOR_CMD+0x2ce>
			}
			newPosition = (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    48ca:	24 e3       	ldi	r18, 0x34	; 52
    48cc:	20 9f       	mul	r18, r16
    48ce:	c0 01       	movw	r24, r0
    48d0:	21 9f       	mul	r18, r17
    48d2:	90 0d       	add	r25, r0
    48d4:	11 24       	eor	r1, r1
    48d6:	8f 5e       	subi	r24, 0xEF	; 239
    48d8:	97 4d       	sbci	r25, 0xD7	; 215
    48da:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <atol>
    48de:	9b 01       	movw	r18, r22
    48e0:	ac 01       	movw	r20, r24
    48e2:	ab e1       	ldi	r26, 0x1B	; 27
    48e4:	b1 e0       	ldi	r27, 0x01	; 1
    48e6:	0e 94 88 35 	call	0x6b10	; 0x6b10 <__muluhisi3>
    48ea:	4b 01       	movw	r8, r22
    48ec:	5c 01       	movw	r10, r24
			break;
    48ee:	88 c0       	rjmp	.+272    	; 0x4a00 <move_MOTOR_CMD+0x23a>

		case 'a':			// Move relative
		case 'b':
		case 'c':
			controller = motor + 31;
    48f0:	0f 2e       	mov	r0, r31
    48f2:	ff e1       	ldi	r31, 0x1F	; 31
    48f4:	ef 2e       	mov	r14, r31
    48f6:	f0 2d       	mov	r31, r0
    48f8:	e8 0e       	add	r14, r24
			if (get_MOTOR_ENCODER(controller, &currentPosition) == ERROR) {
    48fa:	be 01       	movw	r22, r28
    48fc:	6f 5a       	subi	r22, 0xAF	; 175
    48fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4900:	8e 2d       	mov	r24, r14
    4902:	0e 94 1f 1b 	call	0x363e	; 0x363e <get_MOTOR_ENCODER>
    4906:	f8 2e       	mov	r15, r24
    4908:	83 e6       	ldi	r24, 0x63	; 99
    490a:	f8 12       	cpse	r15, r24
    490c:	16 c0       	rjmp	.+44     	; 0x493a <move_MOTOR_CMD+0x174>
				sprintf(strbuf, fmt0);
    490e:	ce 01       	movw	r24, r28
    4910:	8b 5a       	subi	r24, 0xAB	; 171
    4912:	9f 4f       	sbci	r25, 0xFF	; 255
    4914:	9f 93       	push	r25
    4916:	8f 93       	push	r24
    4918:	8e 01       	movw	r16, r28
    491a:	0f 5f       	subi	r16, 0xFF	; 255
    491c:	1f 4f       	sbci	r17, 0xFF	; 255
    491e:	1f 93       	push	r17
    4920:	0f 93       	push	r16
    4922:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
				printError(ERR_MTR_ENC_VAL, strbuf);
    4926:	b8 01       	movw	r22, r16
    4928:	85 e3       	ldi	r24, 0x35	; 53
    492a:	91 e0       	ldi	r25, 0x01	; 1
    492c:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				return(ERROR);
    4930:	0f 90       	pop	r0
    4932:	0f 90       	pop	r0
    4934:	0f 90       	pop	r0
    4936:	0f 90       	pop	r0
    4938:	ad c0       	rjmp	.+346    	; 0x4a94 <move_MOTOR_CMD+0x2ce>
			}
			newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    493a:	24 e3       	ldi	r18, 0x34	; 52
    493c:	20 9f       	mul	r18, r16
    493e:	c0 01       	movw	r24, r0
    4940:	21 9f       	mul	r18, r17
    4942:	90 0d       	add	r25, r0
    4944:	11 24       	eor	r1, r1
    4946:	8f 5e       	subi	r24, 0xEF	; 239
    4948:	97 4d       	sbci	r25, 0xD7	; 215
    494a:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <atol>
    494e:	9b 01       	movw	r18, r22
    4950:	ac 01       	movw	r20, r24
    4952:	ab e1       	ldi	r26, 0x1B	; 27
    4954:	b1 e0       	ldi	r27, 0x01	; 1
    4956:	0e 94 88 35 	call	0x6b10	; 0x6b10 <__muluhisi3>
    495a:	65 96       	adiw	r28, 0x15	; 21
    495c:	0c ad       	ldd	r16, Y+60	; 0x3c
    495e:	1d ad       	ldd	r17, Y+61	; 0x3d
    4960:	2e ad       	ldd	r18, Y+62	; 0x3e
    4962:	3f ad       	ldd	r19, Y+63	; 0x3f
    4964:	65 97       	sbiw	r28, 0x15	; 21
    4966:	4b 01       	movw	r8, r22
    4968:	5c 01       	movw	r10, r24
    496a:	80 0e       	add	r8, r16
    496c:	91 1e       	adc	r9, r17
    496e:	a2 1e       	adc	r10, r18
    4970:	b3 1e       	adc	r11, r19
			break;
    4972:	46 c0       	rjmp	.+140    	; 0x4a00 <move_MOTOR_CMD+0x23a>

		case 'd':
			deltaPos = (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    4974:	24 e3       	ldi	r18, 0x34	; 52
    4976:	20 9f       	mul	r18, r16
    4978:	c0 01       	movw	r24, r0
    497a:	21 9f       	mul	r18, r17
    497c:	90 0d       	add	r25, r0
    497e:	11 24       	eor	r1, r1
    4980:	8f 5e       	subi	r24, 0xEF	; 239
    4982:	97 4d       	sbci	r25, 0xD7	; 215
    4984:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <atol>
    4988:	9b 01       	movw	r18, r22
    498a:	ac 01       	movw	r20, r24
    498c:	ab e1       	ldi	r26, 0x1B	; 27
    498e:	b1 e0       	ldi	r27, 0x01	; 1
    4990:	0e 94 88 35 	call	0x6b10	; 0x6b10 <__muluhisi3>
			if (move_MOTORS_PISTON(deltaPos) == ERROR) {
    4994:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <move_MOTORS_PISTON>
    4998:	f8 2e       	mov	r15, r24
    499a:	83 e6       	ldi	r24, 0x63	; 99
    499c:	f8 12       	cpse	r15, r24
    499e:	77 c0       	rjmp	.+238    	; 0x4a8e <move_MOTOR_CMD+0x2c8>
				sprintf(strbuf, fmt3);
    49a0:	ce 01       	movw	r24, r28
    49a2:	84 54       	subi	r24, 0x44	; 68
    49a4:	9f 4f       	sbci	r25, 0xFF	; 255
    49a6:	9f 93       	push	r25
    49a8:	8f 93       	push	r24
    49aa:	8e 01       	movw	r16, r28
    49ac:	0f 5f       	subi	r16, 0xFF	; 255
    49ae:	1f 4f       	sbci	r17, 0xFF	; 255
    49b0:	1f 93       	push	r17
    49b2:	0f 93       	push	r16
    49b4:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
				printError(ERR_MTR, strbuf);
    49b8:	b8 01       	movw	r22, r16
    49ba:	86 e3       	ldi	r24, 0x36	; 54
    49bc:	91 e0       	ldi	r25, 0x01	; 1
    49be:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				return(ERROR);
    49c2:	0f 90       	pop	r0
    49c4:	0f 90       	pop	r0
    49c6:	0f 90       	pop	r0
    49c8:	0f 90       	pop	r0
    49ca:	64 c0       	rjmp	.+200    	; 0x4a94 <move_MOTOR_CMD+0x2ce>
			}
			return(NOERROR);

		default:
			sprintf(strbuf, fmt1);
    49cc:	ce 01       	movw	r24, r28
    49ce:	83 58       	subi	r24, 0x83	; 131
    49d0:	9f 4f       	sbci	r25, 0xFF	; 255
    49d2:	9f 93       	push	r25
    49d4:	8f 93       	push	r24
    49d6:	8e 01       	movw	r16, r28
    49d8:	0f 5f       	subi	r16, 0xFF	; 255
    49da:	1f 4f       	sbci	r17, 0xFF	; 255
    49dc:	1f 93       	push	r17
    49de:	0f 93       	push	r16
    49e0:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			printError(ERR_MTR, strbuf);
    49e4:	b8 01       	movw	r22, r16
    49e6:	86 e3       	ldi	r24, 0x36	; 54
    49e8:	91 e0       	ldi	r25, 0x01	; 1
    49ea:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
			return(ERROR);
    49ee:	0f 90       	pop	r0
    49f0:	0f 90       	pop	r0
    49f2:	0f 90       	pop	r0
    49f4:	0f 90       	pop	r0
    49f6:	0f 2e       	mov	r0, r31
    49f8:	f3 e6       	ldi	r31, 0x63	; 99
    49fa:	ff 2e       	mov	r15, r31
    49fc:	f0 2d       	mov	r31, r0
    49fe:	4a c0       	rjmp	.+148    	; 0x4a94 <move_MOTOR_CMD+0x2ce>
			break;	
	}

	motorDir[controller - MOTOR_A] = MTRDIRUNKNOWN;
    4a00:	0e 2d       	mov	r16, r14
    4a02:	10 e0       	ldi	r17, 0x00	; 0
    4a04:	00 58       	subi	r16, 0x80	; 128
    4a06:	11 09       	sbc	r17, r1
    4a08:	f8 01       	movw	r30, r16
    4a0a:	e3 5c       	subi	r30, 0xC3	; 195
    4a0c:	f5 4d       	sbci	r31, 0xD5	; 213
    4a0e:	82 e0       	ldi	r24, 0x02	; 2
    4a10:	80 83       	st	Z, r24

	if (move_MOTOR(controller, newPosition) == ERROR) {
    4a12:	b5 01       	movw	r22, r10
    4a14:	a4 01       	movw	r20, r8
    4a16:	8e 2d       	mov	r24, r14
    4a18:	0e 94 1f 22 	call	0x443e	; 0x443e <move_MOTOR>
    4a1c:	f8 2e       	mov	r15, r24
    4a1e:	83 e6       	ldi	r24, 0x63	; 99
    4a20:	f8 12       	cpse	r15, r24
    4a22:	16 c0       	rjmp	.+44     	; 0x4a50 <move_MOTOR_CMD+0x28a>
		sprintf(strbuf, fmt2);
    4a24:	ce 01       	movw	r24, r28
    4a26:	85 56       	subi	r24, 0x65	; 101
    4a28:	9f 4f       	sbci	r25, 0xFF	; 255
    4a2a:	9f 93       	push	r25
    4a2c:	8f 93       	push	r24
    4a2e:	8e 01       	movw	r16, r28
    4a30:	0f 5f       	subi	r16, 0xFF	; 255
    4a32:	1f 4f       	sbci	r17, 0xFF	; 255
    4a34:	1f 93       	push	r17
    4a36:	0f 93       	push	r16
    4a38:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
		printError(ERR_MTR, strbuf);
    4a3c:	b8 01       	movw	r22, r16
    4a3e:	86 e3       	ldi	r24, 0x36	; 54
    4a40:	91 e0       	ldi	r25, 0x01	; 1
    4a42:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		return(ERROR);
    4a46:	0f 90       	pop	r0
    4a48:	0f 90       	pop	r0
    4a4a:	0f 90       	pop	r0
    4a4c:	0f 90       	pop	r0
    4a4e:	22 c0       	rjmp	.+68     	; 0x4a94 <move_MOTOR_CMD+0x2ce>
	}

	if (newPosition < currentPosition) {
    4a50:	65 96       	adiw	r28, 0x15	; 21
    4a52:	8c ad       	ldd	r24, Y+60	; 0x3c
    4a54:	9d ad       	ldd	r25, Y+61	; 0x3d
    4a56:	ae ad       	ldd	r26, Y+62	; 0x3e
    4a58:	bf ad       	ldd	r27, Y+63	; 0x3f
    4a5a:	65 97       	sbiw	r28, 0x15	; 21
    4a5c:	88 16       	cp	r8, r24
    4a5e:	99 06       	cpc	r9, r25
    4a60:	aa 06       	cpc	r10, r26
    4a62:	bb 06       	cpc	r11, r27
    4a64:	34 f4       	brge	.+12     	; 0x4a72 <move_MOTOR_CMD+0x2ac>
		motorDir[controller - MOTOR_A] = MTRDIRNEGATIVE;
    4a66:	f8 01       	movw	r30, r16
    4a68:	e3 5c       	subi	r30, 0xC3	; 195
    4a6a:	f5 4d       	sbci	r31, 0xD5	; 213
    4a6c:	10 82       	st	Z, r1
	} else if (newPosition > currentPosition) {
		motorDir[controller - MOTOR_A] = MTRDIRPOSITIVE;
	}

	return(NOERROR);
    4a6e:	f1 2c       	mov	r15, r1
    4a70:	11 c0       	rjmp	.+34     	; 0x4a94 <move_MOTOR_CMD+0x2ce>
		return(ERROR);
	}

	if (newPosition < currentPosition) {
		motorDir[controller - MOTOR_A] = MTRDIRNEGATIVE;
	} else if (newPosition > currentPosition) {
    4a72:	88 15       	cp	r24, r8
    4a74:	99 05       	cpc	r25, r9
    4a76:	aa 05       	cpc	r26, r10
    4a78:	bb 05       	cpc	r27, r11
    4a7a:	5c f4       	brge	.+22     	; 0x4a92 <move_MOTOR_CMD+0x2cc>
		motorDir[controller - MOTOR_A] = MTRDIRPOSITIVE;
    4a7c:	f8 01       	movw	r30, r16
    4a7e:	e3 5c       	subi	r30, 0xC3	; 195
    4a80:	f5 4d       	sbci	r31, 0xD5	; 213
    4a82:	81 e0       	ldi	r24, 0x01	; 1
    4a84:	80 83       	st	Z, r24
	}

	return(NOERROR);
    4a86:	f1 2c       	mov	r15, r1
    4a88:	05 c0       	rjmp	.+10     	; 0x4a94 <move_MOTOR_CMD+0x2ce>
	const char fmt1[] = "move_MOTOR_CMD: unknown motor";
	const char fmt2[] = "move_MOTOR_CMD: move_MOTOR error";
	const char fmt3[] = "move_MOTOR_CMD: move_MOTORS_PISTON error";

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
		return(NOERROR);
    4a8a:	f1 2c       	mov	r15, r1
    4a8c:	03 c0       	rjmp	.+6      	; 0x4a94 <move_MOTOR_CMD+0x2ce>
			if (move_MOTORS_PISTON(deltaPos) == ERROR) {
				sprintf(strbuf, fmt3);
				printError(ERR_MTR, strbuf);
				return(ERROR);
			}
			return(NOERROR);
    4a8e:	f1 2c       	mov	r15, r1
    4a90:	01 c0       	rjmp	.+2      	; 0x4a94 <move_MOTOR_CMD+0x2ce>
		motorDir[controller - MOTOR_A] = MTRDIRNEGATIVE;
	} else if (newPosition > currentPosition) {
		motorDir[controller - MOTOR_A] = MTRDIRPOSITIVE;
	}

	return(NOERROR);
    4a92:	f1 2c       	mov	r15, r1

}
    4a94:	8f 2d       	mov	r24, r15
    4a96:	cc 51       	subi	r28, 0x1C	; 28
    4a98:	df 4f       	sbci	r29, 0xFF	; 255
    4a9a:	cd bf       	out	0x3d, r28	; 61
    4a9c:	de bf       	out	0x3e, r29	; 62
    4a9e:	df 91       	pop	r29
    4aa0:	cf 91       	pop	r28
    4aa2:	1f 91       	pop	r17
    4aa4:	0f 91       	pop	r16
    4aa6:	ff 90       	pop	r15
    4aa8:	ef 90       	pop	r14
    4aaa:	bf 90       	pop	r11
    4aac:	af 90       	pop	r10
    4aae:	9f 90       	pop	r9
    4ab0:	8f 90       	pop	r8
    4ab2:	08 95       	ret

00004ab4 <put_MOTOR_ENCODER>:
	Returns:
		ERROR:		If put_MOTOR returns an error
		NOERROR:	Otherwise
------------------------------------------------------------------------------*/
uint8_t put_MOTOR_ENCODER(uint8_t mtraddr, int32_t encoderValue)
{
    4ab4:	ef 92       	push	r14
    4ab6:	ff 92       	push	r15
    4ab8:	0f 93       	push	r16
    4aba:	1f 93       	push	r17
    4abc:	cf 93       	push	r28
    4abe:	df 93       	push	r29
    4ac0:	cd b7       	in	r28, 0x3d	; 61
    4ac2:	de b7       	in	r29, 0x3e	; 62
    4ac4:	cd 57       	subi	r28, 0x7D	; 125
    4ac6:	d1 09       	sbc	r29, r1
    4ac8:	cd bf       	out	0x3d, r28	; 61
    4aca:	de bf       	out	0x3e, r29	; 62
    4acc:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_ENCODER: put_MOTOR error on %c";
    4ace:	89 e2       	ldi	r24, 0x29	; 41
    4ad0:	e8 ef       	ldi	r30, 0xF8	; 248
    4ad2:	fa eb       	ldi	r31, 0xBA	; 186
    4ad4:	de 01       	movw	r26, r28
    4ad6:	11 96       	adiw	r26, 0x01	; 1
    4ad8:	01 90       	ld	r0, Z+
    4ada:	0d 92       	st	X+, r0
    4adc:	8a 95       	dec	r24
    4ade:	e1 f7       	brne	.-8      	; 0x4ad8 <put_MOTOR_ENCODER+0x24>
	char strbuf[80];
	uint8_t data[4];

	data[0] = (encoderValue >> 24) & 0xFF;
    4ae0:	eb 96       	adiw	r28, 0x3b	; 59
    4ae2:	7f af       	std	Y+63, r23	; 0x3f
    4ae4:	eb 97       	sbiw	r28, 0x3b	; 59
	data[1] = (encoderValue >> 16) & 0xFF;
    4ae6:	ec 96       	adiw	r28, 0x3c	; 60
    4ae8:	6f af       	std	Y+63, r22	; 0x3f
    4aea:	ec 97       	sbiw	r28, 0x3c	; 60
	data[2] = (encoderValue >> 8) & 0xFF;
    4aec:	ed 96       	adiw	r28, 0x3d	; 61
    4aee:	5f af       	std	Y+63, r21	; 0x3f
    4af0:	ed 97       	sbiw	r28, 0x3d	; 61
	data[3] = encoderValue & 0xFF;
    4af2:	ee 96       	adiw	r28, 0x3e	; 62
    4af4:	4f af       	std	Y+63, r20	; 0x3f
    4af6:	ee 97       	sbiw	r28, 0x3e	; 62

	if (put_MOTOR(mtraddr, PUTENCODER, data, 4) == ERROR) {
    4af8:	24 e0       	ldi	r18, 0x04	; 4
    4afa:	ae 01       	movw	r20, r28
    4afc:	46 58       	subi	r20, 0x86	; 134
    4afe:	5f 4f       	sbci	r21, 0xFF	; 255
    4b00:	66 e1       	ldi	r22, 0x16	; 22
    4b02:	80 2f       	mov	r24, r16
    4b04:	0e 94 51 21 	call	0x42a2	; 0x42a2 <put_MOTOR>
    4b08:	18 2f       	mov	r17, r24
    4b0a:	83 36       	cpi	r24, 0x63	; 99
    4b0c:	d9 f4       	brne	.+54     	; 0x4b44 <put_MOTOR_ENCODER+0x90>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    4b0e:	0f 53       	subi	r16, 0x3F	; 63
    4b10:	1f 92       	push	r1
    4b12:	0f 93       	push	r16
    4b14:	ce 01       	movw	r24, r28
    4b16:	01 96       	adiw	r24, 0x01	; 1
    4b18:	9f 93       	push	r25
    4b1a:	8f 93       	push	r24
    4b1c:	7e 01       	movw	r14, r28
    4b1e:	8a e2       	ldi	r24, 0x2A	; 42
    4b20:	e8 0e       	add	r14, r24
    4b22:	f1 1c       	adc	r15, r1
    4b24:	ff 92       	push	r15
    4b26:	ef 92       	push	r14
    4b28:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
		printError(ERR_MTR, strbuf);
    4b2c:	b7 01       	movw	r22, r14
    4b2e:	86 e3       	ldi	r24, 0x36	; 54
    4b30:	91 e0       	ldi	r25, 0x01	; 1
    4b32:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		return(ERROR);
    4b36:	0f 90       	pop	r0
    4b38:	0f 90       	pop	r0
    4b3a:	0f 90       	pop	r0
    4b3c:	0f 90       	pop	r0
    4b3e:	0f 90       	pop	r0
    4b40:	0f 90       	pop	r0
    4b42:	01 c0       	rjmp	.+2      	; 0x4b46 <put_MOTOR_ENCODER+0x92>
	}

	return(NOERROR);
    4b44:	10 e0       	ldi	r17, 0x00	; 0

}
    4b46:	81 2f       	mov	r24, r17
    4b48:	c3 58       	subi	r28, 0x83	; 131
    4b4a:	df 4f       	sbci	r29, 0xFF	; 255
    4b4c:	cd bf       	out	0x3d, r28	; 61
    4b4e:	de bf       	out	0x3e, r29	; 62
    4b50:	df 91       	pop	r29
    4b52:	cf 91       	pop	r28
    4b54:	1f 91       	pop	r17
    4b56:	0f 91       	pop	r16
    4b58:	ff 90       	pop	r15
    4b5a:	ef 90       	pop	r14
    4b5c:	08 95       	ret

00004b5e <init_MOTORS>:
		NOERROR otherwise

ADD ERROR CHECKS?
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    4b5e:	0f 93       	push	r16
    4b60:	1f 93       	push	r17
    4b62:	cf 93       	push	r28
    4b64:	df 93       	push	r29
    4b66:	00 d0       	rcall	.+0      	; 0x4b68 <init_MOTORS+0xa>
    4b68:	00 d0       	rcall	.+0      	; 0x4b6a <init_MOTORS+0xc>
    4b6a:	cd b7       	in	r28, 0x3d	; 61
    4b6c:	de b7       	in	r29, 0x3e	; 62
    4b6e:	2a e6       	ldi	r18, 0x6A	; 106
    4b70:	84 e0       	ldi	r24, 0x04	; 4
    4b72:	91 e0       	ldi	r25, 0x01	; 1
    4b74:	21 50       	subi	r18, 0x01	; 1
    4b76:	80 40       	sbci	r24, 0x00	; 0
    4b78:	90 40       	sbci	r25, 0x00	; 0
    4b7a:	e1 f7       	brne	.-8      	; 0x4b74 <init_MOTORS+0x16>
    4b7c:	00 c0       	rjmp	.+0      	; 0x4b7e <init_MOTORS+0x20>

	uint8_t i, mtraddr;
	int32_t encoderValue;

	_delay_ms(100);		// Wait to boot up
	timerSAVEENCODER = 0;
    4b7e:	10 92 3c 2a 	sts	0x2A3C, r1	; 0x802a3c <timerSAVEENCODER>
	timeoutSAVEENCODER = SAVEENCODERPERIOD;
    4b82:	84 e0       	ldi	r24, 0x04	; 4
    4b84:	80 93 3b 2a 	sts	0x2A3B, r24	; 0x802a3b <timeoutSAVEENCODER>

	for (i = 0; i < NMOTORS; i++) {
    4b88:	10 e0       	ldi	r17, 0x00	; 0
    4b8a:	1b c0       	rjmp	.+54     	; 0x4bc2 <init_MOTORS+0x64>
		motorDir[i] = MTRDIRUNKNOWN;
    4b8c:	81 2f       	mov	r24, r17
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	fc 01       	movw	r30, r24
    4b92:	e3 5c       	subi	r30, 0xC3	; 195
    4b94:	f5 4d       	sbci	r31, 0xD5	; 213
    4b96:	22 e0       	ldi	r18, 0x02	; 2
    4b98:	20 83       	st	Z, r18
		motorLim[i] = MTRLIMUNKNOWN;
    4b9a:	fc 01       	movw	r30, r24
    4b9c:	e0 5c       	subi	r30, 0xC0	; 192
    4b9e:	f5 4d       	sbci	r31, 0xD5	; 213
    4ba0:	10 82       	st	Z, r1
		mtraddr = i + MOTOR_A;
    4ba2:	00 e8       	ldi	r16, 0x80	; 128
    4ba4:	01 0f       	add	r16, r17
		get_FRAM_MOTOR_ENCODER(mtraddr, &encoderValue);
    4ba6:	be 01       	movw	r22, r28
    4ba8:	6f 5f       	subi	r22, 0xFF	; 255
    4baa:	7f 4f       	sbci	r23, 0xFF	; 255
    4bac:	80 2f       	mov	r24, r16
    4bae:	0e 94 23 19 	call	0x3246	; 0x3246 <get_FRAM_MOTOR_ENCODER>
		put_MOTOR_ENCODER(mtraddr, encoderValue);
    4bb2:	49 81       	ldd	r20, Y+1	; 0x01
    4bb4:	5a 81       	ldd	r21, Y+2	; 0x02
    4bb6:	6b 81       	ldd	r22, Y+3	; 0x03
    4bb8:	7c 81       	ldd	r23, Y+4	; 0x04
    4bba:	80 2f       	mov	r24, r16
    4bbc:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <put_MOTOR_ENCODER>

	_delay_ms(100);		// Wait to boot up
	timerSAVEENCODER = 0;
	timeoutSAVEENCODER = SAVEENCODERPERIOD;

	for (i = 0; i < NMOTORS; i++) {
    4bc0:	1f 5f       	subi	r17, 0xFF	; 255
    4bc2:	13 30       	cpi	r17, 0x03	; 3
    4bc4:	18 f3       	brcs	.-58     	; 0x4b8c <init_MOTORS+0x2e>
		put_MOTOR_ENCODER(mtraddr, encoderValue);
	}

	return(NOERROR);

}
    4bc6:	80 e0       	ldi	r24, 0x00	; 0
    4bc8:	24 96       	adiw	r28, 0x04	; 4
    4bca:	cd bf       	out	0x3d, r28	; 61
    4bcc:	de bf       	out	0x3e, r29	; 62
    4bce:	df 91       	pop	r29
    4bd0:	cf 91       	pop	r28
    4bd2:	1f 91       	pop	r17
    4bd4:	0f 91       	pop	r16
    4bd6:	08 95       	ret

00004bd8 <put_MOTOR_PID>:
		ERROR:		If put_MOTOR returns an error
		NOERROR:	Otherwise
------------------------------------------------------------------------------*/

uint8_t put_MOTOR_PID(uint8_t mtraddr, PID pid)
{
    4bd8:	9f 92       	push	r9
    4bda:	af 92       	push	r10
    4bdc:	bf 92       	push	r11
    4bde:	cf 92       	push	r12
    4be0:	df 92       	push	r13
    4be2:	ef 92       	push	r14
    4be4:	ff 92       	push	r15
    4be6:	0f 93       	push	r16
    4be8:	1f 93       	push	r17
    4bea:	cf 93       	push	r28
    4bec:	df 93       	push	r29
    4bee:	cd b7       	in	r28, 0x3d	; 61
    4bf0:	de b7       	in	r29, 0x3e	; 62
    4bf2:	cf 5b       	subi	r28, 0xBF	; 191
    4bf4:	d1 09       	sbc	r29, r1
    4bf6:	cd bf       	out	0x3d, r28	; 61
    4bf8:	de bf       	out	0x3e, r29	; 62
    4bfa:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_PID: put_MOTOR error pid on %c";
    4bfc:	89 e2       	ldi	r24, 0x29	; 41
    4bfe:	e1 e2       	ldi	r30, 0x21	; 33
    4c00:	fb eb       	ldi	r31, 0xBB	; 187
    4c02:	de 01       	movw	r26, r28
    4c04:	11 96       	adiw	r26, 0x01	; 1
    4c06:	01 90       	ld	r0, Z+
    4c08:	0d 92       	st	X+, r0
    4c0a:	8a 95       	dec	r24
    4c0c:	e1 f7       	brne	.-8      	; 0x4c06 <put_MOTOR_PID+0x2e>
	const char fmt2[] = "put_MOTOR_PID: put_MOTOR error qpps on %c";
    4c0e:	8a e2       	ldi	r24, 0x2A	; 42
    4c10:	ea e4       	ldi	r30, 0x4A	; 74
    4c12:	fb eb       	ldi	r31, 0xBB	; 187
    4c14:	de 01       	movw	r26, r28
    4c16:	9a 96       	adiw	r26, 0x2a	; 42
    4c18:	01 90       	ld	r0, Z+
    4c1a:	0d 92       	st	X+, r0
    4c1c:	8a 95       	dec	r24
    4c1e:	e1 f7       	brne	.-8      	; 0x4c18 <put_MOTOR_PID+0x40>
	char strbuf[80];
	uint8_t data[28];
	int32_t p, i, d;

	p = (int32_t) (pid.p * 1024.0);
    4c20:	c3 53       	subi	r28, 0x33	; 51
    4c22:	df 4f       	sbci	r29, 0xFF	; 255
    4c24:	68 81       	ld	r22, Y
    4c26:	79 81       	ldd	r23, Y+1	; 0x01
    4c28:	8a 81       	ldd	r24, Y+2	; 0x02
    4c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    4c2c:	cd 5c       	subi	r28, 0xCD	; 205
    4c2e:	d0 40       	sbci	r29, 0x00	; 0
    4c30:	20 e0       	ldi	r18, 0x00	; 0
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	40 e8       	ldi	r20, 0x80	; 128
    4c36:	54 e4       	ldi	r21, 0x44	; 68
    4c38:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
    4c3c:	0e 94 78 30 	call	0x60f0	; 0x60f0 <__fixsfsi>
    4c40:	c6 2e       	mov	r12, r22
    4c42:	b7 2e       	mov	r11, r23
    4c44:	a8 2e       	mov	r10, r24
    4c46:	99 2e       	mov	r9, r25
	i = (int32_t) (pid.i * 1024.0);
    4c48:	cf 52       	subi	r28, 0x2F	; 47
    4c4a:	df 4f       	sbci	r29, 0xFF	; 255
    4c4c:	68 81       	ld	r22, Y
    4c4e:	79 81       	ldd	r23, Y+1	; 0x01
    4c50:	8a 81       	ldd	r24, Y+2	; 0x02
    4c52:	9b 81       	ldd	r25, Y+3	; 0x03
    4c54:	c1 5d       	subi	r28, 0xD1	; 209
    4c56:	d0 40       	sbci	r29, 0x00	; 0
    4c58:	20 e0       	ldi	r18, 0x00	; 0
    4c5a:	30 e0       	ldi	r19, 0x00	; 0
    4c5c:	40 e8       	ldi	r20, 0x80	; 128
    4c5e:	54 e4       	ldi	r21, 0x44	; 68
    4c60:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
    4c64:	0e 94 78 30 	call	0x60f0	; 0x60f0 <__fixsfsi>
    4c68:	16 2f       	mov	r17, r22
    4c6a:	f7 2e       	mov	r15, r23
    4c6c:	e8 2e       	mov	r14, r24
    4c6e:	d9 2e       	mov	r13, r25
	d = (int32_t) (pid.d * 1024.0);
    4c70:	cb 52       	subi	r28, 0x2B	; 43
    4c72:	df 4f       	sbci	r29, 0xFF	; 255
    4c74:	68 81       	ld	r22, Y
    4c76:	79 81       	ldd	r23, Y+1	; 0x01
    4c78:	8a 81       	ldd	r24, Y+2	; 0x02
    4c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    4c7c:	c5 5d       	subi	r28, 0xD5	; 213
    4c7e:	d0 40       	sbci	r29, 0x00	; 0
    4c80:	20 e0       	ldi	r18, 0x00	; 0
    4c82:	30 e0       	ldi	r19, 0x00	; 0
    4c84:	40 e8       	ldi	r20, 0x80	; 128
    4c86:	54 e4       	ldi	r21, 0x44	; 68
    4c88:	0e 94 65 31 	call	0x62ca	; 0x62ca <__mulsf3>
    4c8c:	0e 94 78 30 	call	0x60f0	; 0x60f0 <__fixsfsi>

	data[0] = (d >> 24) & 0xFF;
    4c90:	cc 55       	subi	r28, 0x5C	; 92
    4c92:	df 4f       	sbci	r29, 0xFF	; 255
    4c94:	98 83       	st	Y, r25
    4c96:	c4 5a       	subi	r28, 0xA4	; 164
    4c98:	d0 40       	sbci	r29, 0x00	; 0
	data[1] = (d >> 16) & 0xFF;
    4c9a:	cb 55       	subi	r28, 0x5B	; 91
    4c9c:	df 4f       	sbci	r29, 0xFF	; 255
    4c9e:	88 83       	st	Y, r24
    4ca0:	c5 5a       	subi	r28, 0xA5	; 165
    4ca2:	d0 40       	sbci	r29, 0x00	; 0
	data[2] = (d >> 8) & 0xFF;
    4ca4:	ca 55       	subi	r28, 0x5A	; 90
    4ca6:	df 4f       	sbci	r29, 0xFF	; 255
    4ca8:	78 83       	st	Y, r23
    4caa:	c6 5a       	subi	r28, 0xA6	; 166
    4cac:	d0 40       	sbci	r29, 0x00	; 0
	data[3] = d & 0xFF;
    4cae:	c9 55       	subi	r28, 0x59	; 89
    4cb0:	df 4f       	sbci	r29, 0xFF	; 255
    4cb2:	68 83       	st	Y, r22
    4cb4:	c7 5a       	subi	r28, 0xA7	; 167
    4cb6:	d0 40       	sbci	r29, 0x00	; 0
	data[4] = (p >> 24) & 0xFF;
    4cb8:	c8 55       	subi	r28, 0x58	; 88
    4cba:	df 4f       	sbci	r29, 0xFF	; 255
    4cbc:	98 82       	st	Y, r9
    4cbe:	c8 5a       	subi	r28, 0xA8	; 168
    4cc0:	d0 40       	sbci	r29, 0x00	; 0
	data[5] = (p >> 16) & 0xFF;
    4cc2:	c7 55       	subi	r28, 0x57	; 87
    4cc4:	df 4f       	sbci	r29, 0xFF	; 255
    4cc6:	a8 82       	st	Y, r10
    4cc8:	c9 5a       	subi	r28, 0xA9	; 169
    4cca:	d0 40       	sbci	r29, 0x00	; 0
	data[6] = (p >> 8) & 0xFF;
    4ccc:	c6 55       	subi	r28, 0x56	; 86
    4cce:	df 4f       	sbci	r29, 0xFF	; 255
    4cd0:	b8 82       	st	Y, r11
    4cd2:	ca 5a       	subi	r28, 0xAA	; 170
    4cd4:	d0 40       	sbci	r29, 0x00	; 0
	data[7] = p & 0xFF;
    4cd6:	c5 55       	subi	r28, 0x55	; 85
    4cd8:	df 4f       	sbci	r29, 0xFF	; 255
    4cda:	c8 82       	st	Y, r12
    4cdc:	cb 5a       	subi	r28, 0xAB	; 171
    4cde:	d0 40       	sbci	r29, 0x00	; 0
	data[8] = (i >> 24) & 0xFF;
    4ce0:	c4 55       	subi	r28, 0x54	; 84
    4ce2:	df 4f       	sbci	r29, 0xFF	; 255
    4ce4:	d8 82       	st	Y, r13
    4ce6:	cc 5a       	subi	r28, 0xAC	; 172
    4ce8:	d0 40       	sbci	r29, 0x00	; 0
	data[9] = (i >> 16) & 0xFF;
    4cea:	c3 55       	subi	r28, 0x53	; 83
    4cec:	df 4f       	sbci	r29, 0xFF	; 255
    4cee:	e8 82       	st	Y, r14
    4cf0:	cd 5a       	subi	r28, 0xAD	; 173
    4cf2:	d0 40       	sbci	r29, 0x00	; 0
	data[10] = (i >> 8) & 0xFF;
    4cf4:	c2 55       	subi	r28, 0x52	; 82
    4cf6:	df 4f       	sbci	r29, 0xFF	; 255
    4cf8:	f8 82       	st	Y, r15
    4cfa:	ce 5a       	subi	r28, 0xAE	; 174
    4cfc:	d0 40       	sbci	r29, 0x00	; 0
	data[11] = i & 0xFF;
    4cfe:	c1 55       	subi	r28, 0x51	; 81
    4d00:	df 4f       	sbci	r29, 0xFF	; 255
    4d02:	18 83       	st	Y, r17
    4d04:	cf 5a       	subi	r28, 0xAF	; 175
    4d06:	d0 40       	sbci	r29, 0x00	; 0
	data[12] = (pid.maxI >> 24) & 0xFF;
    4d08:	c7 52       	subi	r28, 0x27	; 39
    4d0a:	df 4f       	sbci	r29, 0xFF	; 255
    4d0c:	88 81       	ld	r24, Y
    4d0e:	c9 5d       	subi	r28, 0xD9	; 217
    4d10:	d0 40       	sbci	r29, 0x00	; 0
    4d12:	c6 52       	subi	r28, 0x26	; 38
    4d14:	df 4f       	sbci	r29, 0xFF	; 255
    4d16:	98 81       	ld	r25, Y
    4d18:	ca 5d       	subi	r28, 0xDA	; 218
    4d1a:	d0 40       	sbci	r29, 0x00	; 0
    4d1c:	c5 52       	subi	r28, 0x25	; 37
    4d1e:	df 4f       	sbci	r29, 0xFF	; 255
    4d20:	28 81       	ld	r18, Y
    4d22:	cb 5d       	subi	r28, 0xDB	; 219
    4d24:	d0 40       	sbci	r29, 0x00	; 0
    4d26:	c4 52       	subi	r28, 0x24	; 36
    4d28:	df 4f       	sbci	r29, 0xFF	; 255
    4d2a:	38 81       	ld	r19, Y
    4d2c:	cc 5d       	subi	r28, 0xDC	; 220
    4d2e:	d0 40       	sbci	r29, 0x00	; 0
    4d30:	c0 55       	subi	r28, 0x50	; 80
    4d32:	df 4f       	sbci	r29, 0xFF	; 255
    4d34:	38 83       	st	Y, r19
    4d36:	c0 5b       	subi	r28, 0xB0	; 176
    4d38:	d0 40       	sbci	r29, 0x00	; 0
	data[13] = (pid.maxI >> 16) & 0xFF;
    4d3a:	cf 54       	subi	r28, 0x4F	; 79
    4d3c:	df 4f       	sbci	r29, 0xFF	; 255
    4d3e:	28 83       	st	Y, r18
    4d40:	c1 5b       	subi	r28, 0xB1	; 177
    4d42:	d0 40       	sbci	r29, 0x00	; 0
	data[14] = (pid.maxI >> 8) & 0xFF;
    4d44:	ce 54       	subi	r28, 0x4E	; 78
    4d46:	df 4f       	sbci	r29, 0xFF	; 255
    4d48:	98 83       	st	Y, r25
    4d4a:	c2 5b       	subi	r28, 0xB2	; 178
    4d4c:	d0 40       	sbci	r29, 0x00	; 0
	data[15] = pid.maxI & 0xFF;
    4d4e:	cd 54       	subi	r28, 0x4D	; 77
    4d50:	df 4f       	sbci	r29, 0xFF	; 255
    4d52:	88 83       	st	Y, r24
    4d54:	c3 5b       	subi	r28, 0xB3	; 179
    4d56:	d0 40       	sbci	r29, 0x00	; 0
	data[16] = (pid.deadZone >> 24) & 0xFF;
    4d58:	c3 52       	subi	r28, 0x23	; 35
    4d5a:	df 4f       	sbci	r29, 0xFF	; 255
    4d5c:	88 81       	ld	r24, Y
    4d5e:	cd 5d       	subi	r28, 0xDD	; 221
    4d60:	d0 40       	sbci	r29, 0x00	; 0
    4d62:	c2 52       	subi	r28, 0x22	; 34
    4d64:	df 4f       	sbci	r29, 0xFF	; 255
    4d66:	98 81       	ld	r25, Y
    4d68:	ce 5d       	subi	r28, 0xDE	; 222
    4d6a:	d0 40       	sbci	r29, 0x00	; 0
    4d6c:	c1 52       	subi	r28, 0x21	; 33
    4d6e:	df 4f       	sbci	r29, 0xFF	; 255
    4d70:	28 81       	ld	r18, Y
    4d72:	cf 5d       	subi	r28, 0xDF	; 223
    4d74:	d0 40       	sbci	r29, 0x00	; 0
    4d76:	c0 52       	subi	r28, 0x20	; 32
    4d78:	df 4f       	sbci	r29, 0xFF	; 255
    4d7a:	38 81       	ld	r19, Y
    4d7c:	c0 5e       	subi	r28, 0xE0	; 224
    4d7e:	d0 40       	sbci	r29, 0x00	; 0
    4d80:	cc 54       	subi	r28, 0x4C	; 76
    4d82:	df 4f       	sbci	r29, 0xFF	; 255
    4d84:	38 83       	st	Y, r19
    4d86:	c4 5b       	subi	r28, 0xB4	; 180
    4d88:	d0 40       	sbci	r29, 0x00	; 0
	data[17] = (pid.deadZone >> 16) & 0xFF;
    4d8a:	cb 54       	subi	r28, 0x4B	; 75
    4d8c:	df 4f       	sbci	r29, 0xFF	; 255
    4d8e:	28 83       	st	Y, r18
    4d90:	c5 5b       	subi	r28, 0xB5	; 181
    4d92:	d0 40       	sbci	r29, 0x00	; 0
	data[18] = (pid.deadZone >> 8) & 0xFF;
    4d94:	ca 54       	subi	r28, 0x4A	; 74
    4d96:	df 4f       	sbci	r29, 0xFF	; 255
    4d98:	98 83       	st	Y, r25
    4d9a:	c6 5b       	subi	r28, 0xB6	; 182
    4d9c:	d0 40       	sbci	r29, 0x00	; 0
	data[19] = pid.deadZone & 0xFF;
    4d9e:	c9 54       	subi	r28, 0x49	; 73
    4da0:	df 4f       	sbci	r29, 0xFF	; 255
    4da2:	88 83       	st	Y, r24
    4da4:	c7 5b       	subi	r28, 0xB7	; 183
    4da6:	d0 40       	sbci	r29, 0x00	; 0
	data[20] = (pid.minPos >> 24) & 0xFF;
    4da8:	cf 51       	subi	r28, 0x1F	; 31
    4daa:	df 4f       	sbci	r29, 0xFF	; 255
    4dac:	88 81       	ld	r24, Y
    4dae:	c1 5e       	subi	r28, 0xE1	; 225
    4db0:	d0 40       	sbci	r29, 0x00	; 0
    4db2:	ce 51       	subi	r28, 0x1E	; 30
    4db4:	df 4f       	sbci	r29, 0xFF	; 255
    4db6:	98 81       	ld	r25, Y
    4db8:	c2 5e       	subi	r28, 0xE2	; 226
    4dba:	d0 40       	sbci	r29, 0x00	; 0
    4dbc:	cd 51       	subi	r28, 0x1D	; 29
    4dbe:	df 4f       	sbci	r29, 0xFF	; 255
    4dc0:	28 81       	ld	r18, Y
    4dc2:	c3 5e       	subi	r28, 0xE3	; 227
    4dc4:	d0 40       	sbci	r29, 0x00	; 0
    4dc6:	cc 51       	subi	r28, 0x1C	; 28
    4dc8:	df 4f       	sbci	r29, 0xFF	; 255
    4dca:	38 81       	ld	r19, Y
    4dcc:	c4 5e       	subi	r28, 0xE4	; 228
    4dce:	d0 40       	sbci	r29, 0x00	; 0
    4dd0:	c8 54       	subi	r28, 0x48	; 72
    4dd2:	df 4f       	sbci	r29, 0xFF	; 255
    4dd4:	38 83       	st	Y, r19
    4dd6:	c8 5b       	subi	r28, 0xB8	; 184
    4dd8:	d0 40       	sbci	r29, 0x00	; 0
	data[21] = (pid.minPos >> 16) & 0xFF;
    4dda:	c7 54       	subi	r28, 0x47	; 71
    4ddc:	df 4f       	sbci	r29, 0xFF	; 255
    4dde:	28 83       	st	Y, r18
    4de0:	c9 5b       	subi	r28, 0xB9	; 185
    4de2:	d0 40       	sbci	r29, 0x00	; 0
	data[22] = (pid.minPos >> 8) & 0xFF;
    4de4:	c6 54       	subi	r28, 0x46	; 70
    4de6:	df 4f       	sbci	r29, 0xFF	; 255
    4de8:	98 83       	st	Y, r25
    4dea:	ca 5b       	subi	r28, 0xBA	; 186
    4dec:	d0 40       	sbci	r29, 0x00	; 0
	data[23] = pid.minPos & 0xFF;
    4dee:	c5 54       	subi	r28, 0x45	; 69
    4df0:	df 4f       	sbci	r29, 0xFF	; 255
    4df2:	88 83       	st	Y, r24
    4df4:	cb 5b       	subi	r28, 0xBB	; 187
    4df6:	d0 40       	sbci	r29, 0x00	; 0
	data[24] = (pid.maxPos >> 24) & 0xFF;
    4df8:	cb 51       	subi	r28, 0x1B	; 27
    4dfa:	df 4f       	sbci	r29, 0xFF	; 255
    4dfc:	88 81       	ld	r24, Y
    4dfe:	c5 5e       	subi	r28, 0xE5	; 229
    4e00:	d0 40       	sbci	r29, 0x00	; 0
    4e02:	ca 51       	subi	r28, 0x1A	; 26
    4e04:	df 4f       	sbci	r29, 0xFF	; 255
    4e06:	98 81       	ld	r25, Y
    4e08:	c6 5e       	subi	r28, 0xE6	; 230
    4e0a:	d0 40       	sbci	r29, 0x00	; 0
    4e0c:	c9 51       	subi	r28, 0x19	; 25
    4e0e:	df 4f       	sbci	r29, 0xFF	; 255
    4e10:	28 81       	ld	r18, Y
    4e12:	c7 5e       	subi	r28, 0xE7	; 231
    4e14:	d0 40       	sbci	r29, 0x00	; 0
    4e16:	c8 51       	subi	r28, 0x18	; 24
    4e18:	df 4f       	sbci	r29, 0xFF	; 255
    4e1a:	38 81       	ld	r19, Y
    4e1c:	c8 5e       	subi	r28, 0xE8	; 232
    4e1e:	d0 40       	sbci	r29, 0x00	; 0
    4e20:	c4 54       	subi	r28, 0x44	; 68
    4e22:	df 4f       	sbci	r29, 0xFF	; 255
    4e24:	38 83       	st	Y, r19
    4e26:	cc 5b       	subi	r28, 0xBC	; 188
    4e28:	d0 40       	sbci	r29, 0x00	; 0
	data[25] = (pid.maxPos >> 16) & 0xFF;
    4e2a:	c3 54       	subi	r28, 0x43	; 67
    4e2c:	df 4f       	sbci	r29, 0xFF	; 255
    4e2e:	28 83       	st	Y, r18
    4e30:	cd 5b       	subi	r28, 0xBD	; 189
    4e32:	d0 40       	sbci	r29, 0x00	; 0
	data[26] = (pid.maxPos >> 8) & 0xFF;
    4e34:	c2 54       	subi	r28, 0x42	; 66
    4e36:	df 4f       	sbci	r29, 0xFF	; 255
    4e38:	98 83       	st	Y, r25
    4e3a:	ce 5b       	subi	r28, 0xBE	; 190
    4e3c:	d0 40       	sbci	r29, 0x00	; 0
	data[27] = pid.maxPos & 0xFF;
    4e3e:	c1 54       	subi	r28, 0x41	; 65
    4e40:	df 4f       	sbci	r29, 0xFF	; 255
    4e42:	88 83       	st	Y, r24
    4e44:	cf 5b       	subi	r28, 0xBF	; 191
    4e46:	d0 40       	sbci	r29, 0x00	; 0

	if (put_MOTOR(mtraddr, SETPID, data, 28) == ERROR) {
    4e48:	2c e1       	ldi	r18, 0x1C	; 28
    4e4a:	ae 01       	movw	r20, r28
    4e4c:	4c 55       	subi	r20, 0x5C	; 92
    4e4e:	5f 4f       	sbci	r21, 0xFF	; 255
    4e50:	6d e3       	ldi	r22, 0x3D	; 61
    4e52:	80 2f       	mov	r24, r16
    4e54:	0e 94 51 21 	call	0x42a2	; 0x42a2 <put_MOTOR>
    4e58:	18 2f       	mov	r17, r24
    4e5a:	83 36       	cpi	r24, 0x63	; 99
    4e5c:	d9 f4       	brne	.+54     	; 0x4e94 <put_MOTOR_PID+0x2bc>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    4e5e:	0f 53       	subi	r16, 0x3F	; 63
    4e60:	1f 92       	push	r1
    4e62:	0f 93       	push	r16
    4e64:	ce 01       	movw	r24, r28
    4e66:	01 96       	adiw	r24, 0x01	; 1
    4e68:	9f 93       	push	r25
    4e6a:	8f 93       	push	r24
    4e6c:	7e 01       	movw	r14, r28
    4e6e:	84 e5       	ldi	r24, 0x54	; 84
    4e70:	e8 0e       	add	r14, r24
    4e72:	f1 1c       	adc	r15, r1
    4e74:	ff 92       	push	r15
    4e76:	ef 92       	push	r14
    4e78:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
		printError(ERR_MTR, strbuf);
    4e7c:	b7 01       	movw	r22, r14
    4e7e:	86 e3       	ldi	r24, 0x36	; 54
    4e80:	91 e0       	ldi	r25, 0x01	; 1
    4e82:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		return(ERROR);
    4e86:	0f 90       	pop	r0
    4e88:	0f 90       	pop	r0
    4e8a:	0f 90       	pop	r0
    4e8c:	0f 90       	pop	r0
    4e8e:	0f 90       	pop	r0
    4e90:	0f 90       	pop	r0
    4e92:	8b c0       	rjmp	.+278    	; 0x4faa <put_MOTOR_PID+0x3d2>
	}

	data[0] = data[1] = data[2] = data[3] = 0;
    4e94:	c9 55       	subi	r28, 0x59	; 89
    4e96:	df 4f       	sbci	r29, 0xFF	; 255
    4e98:	18 82       	st	Y, r1
    4e9a:	c7 5a       	subi	r28, 0xA7	; 167
    4e9c:	d0 40       	sbci	r29, 0x00	; 0
    4e9e:	ca 55       	subi	r28, 0x5A	; 90
    4ea0:	df 4f       	sbci	r29, 0xFF	; 255
    4ea2:	18 82       	st	Y, r1
    4ea4:	c6 5a       	subi	r28, 0xA6	; 166
    4ea6:	d0 40       	sbci	r29, 0x00	; 0
    4ea8:	cb 55       	subi	r28, 0x5B	; 91
    4eaa:	df 4f       	sbci	r29, 0xFF	; 255
    4eac:	18 82       	st	Y, r1
    4eae:	c5 5a       	subi	r28, 0xA5	; 165
    4eb0:	d0 40       	sbci	r29, 0x00	; 0
    4eb2:	cc 55       	subi	r28, 0x5C	; 92
    4eb4:	df 4f       	sbci	r29, 0xFF	; 255
    4eb6:	18 82       	st	Y, r1
    4eb8:	c4 5a       	subi	r28, 0xA4	; 164
    4eba:	d0 40       	sbci	r29, 0x00	; 0
	data[4] = data[5] = data[6] = data[7] = 0;
    4ebc:	c5 55       	subi	r28, 0x55	; 85
    4ebe:	df 4f       	sbci	r29, 0xFF	; 255
    4ec0:	18 82       	st	Y, r1
    4ec2:	cb 5a       	subi	r28, 0xAB	; 171
    4ec4:	d0 40       	sbci	r29, 0x00	; 0
    4ec6:	c6 55       	subi	r28, 0x56	; 86
    4ec8:	df 4f       	sbci	r29, 0xFF	; 255
    4eca:	18 82       	st	Y, r1
    4ecc:	ca 5a       	subi	r28, 0xAA	; 170
    4ece:	d0 40       	sbci	r29, 0x00	; 0
    4ed0:	c7 55       	subi	r28, 0x57	; 87
    4ed2:	df 4f       	sbci	r29, 0xFF	; 255
    4ed4:	18 82       	st	Y, r1
    4ed6:	c9 5a       	subi	r28, 0xA9	; 169
    4ed8:	d0 40       	sbci	r29, 0x00	; 0
    4eda:	c8 55       	subi	r28, 0x58	; 88
    4edc:	df 4f       	sbci	r29, 0xFF	; 255
    4ede:	18 82       	st	Y, r1
    4ee0:	c8 5a       	subi	r28, 0xA8	; 168
    4ee2:	d0 40       	sbci	r29, 0x00	; 0
	data[8] = data[9] = data[10] = data[11] = 0;
    4ee4:	c1 55       	subi	r28, 0x51	; 81
    4ee6:	df 4f       	sbci	r29, 0xFF	; 255
    4ee8:	18 82       	st	Y, r1
    4eea:	cf 5a       	subi	r28, 0xAF	; 175
    4eec:	d0 40       	sbci	r29, 0x00	; 0
    4eee:	c2 55       	subi	r28, 0x52	; 82
    4ef0:	df 4f       	sbci	r29, 0xFF	; 255
    4ef2:	18 82       	st	Y, r1
    4ef4:	ce 5a       	subi	r28, 0xAE	; 174
    4ef6:	d0 40       	sbci	r29, 0x00	; 0
    4ef8:	c3 55       	subi	r28, 0x53	; 83
    4efa:	df 4f       	sbci	r29, 0xFF	; 255
    4efc:	18 82       	st	Y, r1
    4efe:	cd 5a       	subi	r28, 0xAD	; 173
    4f00:	d0 40       	sbci	r29, 0x00	; 0
    4f02:	c4 55       	subi	r28, 0x54	; 84
    4f04:	df 4f       	sbci	r29, 0xFF	; 255
    4f06:	18 82       	st	Y, r1
    4f08:	cc 5a       	subi	r28, 0xAC	; 172
    4f0a:	d0 40       	sbci	r29, 0x00	; 0
	data[12] = (pid.qpps >> 24) & 0xFF;
    4f0c:	c7 51       	subi	r28, 0x17	; 23
    4f0e:	df 4f       	sbci	r29, 0xFF	; 255
    4f10:	88 81       	ld	r24, Y
    4f12:	c9 5e       	subi	r28, 0xE9	; 233
    4f14:	d0 40       	sbci	r29, 0x00	; 0
    4f16:	c6 51       	subi	r28, 0x16	; 22
    4f18:	df 4f       	sbci	r29, 0xFF	; 255
    4f1a:	98 81       	ld	r25, Y
    4f1c:	ca 5e       	subi	r28, 0xEA	; 234
    4f1e:	d0 40       	sbci	r29, 0x00	; 0
    4f20:	c5 51       	subi	r28, 0x15	; 21
    4f22:	df 4f       	sbci	r29, 0xFF	; 255
    4f24:	28 81       	ld	r18, Y
    4f26:	cb 5e       	subi	r28, 0xEB	; 235
    4f28:	d0 40       	sbci	r29, 0x00	; 0
    4f2a:	c4 51       	subi	r28, 0x14	; 20
    4f2c:	df 4f       	sbci	r29, 0xFF	; 255
    4f2e:	38 81       	ld	r19, Y
    4f30:	cc 5e       	subi	r28, 0xEC	; 236
    4f32:	d0 40       	sbci	r29, 0x00	; 0
    4f34:	c0 55       	subi	r28, 0x50	; 80
    4f36:	df 4f       	sbci	r29, 0xFF	; 255
    4f38:	38 83       	st	Y, r19
    4f3a:	c0 5b       	subi	r28, 0xB0	; 176
    4f3c:	d0 40       	sbci	r29, 0x00	; 0
	data[13] = (pid.qpps >> 16) & 0xFF;
    4f3e:	cf 54       	subi	r28, 0x4F	; 79
    4f40:	df 4f       	sbci	r29, 0xFF	; 255
    4f42:	28 83       	st	Y, r18
    4f44:	c1 5b       	subi	r28, 0xB1	; 177
    4f46:	d0 40       	sbci	r29, 0x00	; 0
	data[14] = (pid.qpps >> 8) & 0xFF;
    4f48:	ce 54       	subi	r28, 0x4E	; 78
    4f4a:	df 4f       	sbci	r29, 0xFF	; 255
    4f4c:	98 83       	st	Y, r25
    4f4e:	c2 5b       	subi	r28, 0xB2	; 178
    4f50:	d0 40       	sbci	r29, 0x00	; 0
	data[15] = pid.qpps & 0xFF;
    4f52:	cd 54       	subi	r28, 0x4D	; 77
    4f54:	df 4f       	sbci	r29, 0xFF	; 255
    4f56:	88 83       	st	Y, r24
    4f58:	c3 5b       	subi	r28, 0xB3	; 179
    4f5a:	d0 40       	sbci	r29, 0x00	; 0

	if (put_MOTOR(mtraddr, SETQPPS, data, 16) == ERROR) {
    4f5c:	20 e1       	ldi	r18, 0x10	; 16
    4f5e:	ae 01       	movw	r20, r28
    4f60:	4c 55       	subi	r20, 0x5C	; 92
    4f62:	5f 4f       	sbci	r21, 0xFF	; 255
    4f64:	6c e1       	ldi	r22, 0x1C	; 28
    4f66:	80 2f       	mov	r24, r16
    4f68:	0e 94 51 21 	call	0x42a2	; 0x42a2 <put_MOTOR>
    4f6c:	18 2f       	mov	r17, r24
    4f6e:	83 36       	cpi	r24, 0x63	; 99
    4f70:	d9 f4       	brne	.+54     	; 0x4fa8 <put_MOTOR_PID+0x3d0>
		sprintf(strbuf, fmt2, (char) (mtraddr-63));
    4f72:	0f 53       	subi	r16, 0x3F	; 63
    4f74:	1f 92       	push	r1
    4f76:	0f 93       	push	r16
    4f78:	ce 01       	movw	r24, r28
    4f7a:	8a 96       	adiw	r24, 0x2a	; 42
    4f7c:	9f 93       	push	r25
    4f7e:	8f 93       	push	r24
    4f80:	7e 01       	movw	r14, r28
    4f82:	84 e5       	ldi	r24, 0x54	; 84
    4f84:	e8 0e       	add	r14, r24
    4f86:	f1 1c       	adc	r15, r1
    4f88:	ff 92       	push	r15
    4f8a:	ef 92       	push	r14
    4f8c:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
		printError(ERR_MTR, strbuf);
    4f90:	b7 01       	movw	r22, r14
    4f92:	86 e3       	ldi	r24, 0x36	; 54
    4f94:	91 e0       	ldi	r25, 0x01	; 1
    4f96:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		return(ERROR);
    4f9a:	0f 90       	pop	r0
    4f9c:	0f 90       	pop	r0
    4f9e:	0f 90       	pop	r0
    4fa0:	0f 90       	pop	r0
    4fa2:	0f 90       	pop	r0
    4fa4:	0f 90       	pop	r0
    4fa6:	01 c0       	rjmp	.+2      	; 0x4faa <put_MOTOR_PID+0x3d2>
	}

	return(NOERROR);
    4fa8:	10 e0       	ldi	r17, 0x00	; 0
}
    4faa:	81 2f       	mov	r24, r17
    4fac:	c1 54       	subi	r28, 0x41	; 65
    4fae:	df 4f       	sbci	r29, 0xFF	; 255
    4fb0:	cd bf       	out	0x3d, r28	; 61
    4fb2:	de bf       	out	0x3e, r29	; 62
    4fb4:	df 91       	pop	r29
    4fb6:	cf 91       	pop	r28
    4fb8:	1f 91       	pop	r17
    4fba:	0f 91       	pop	r16
    4fbc:	ff 90       	pop	r15
    4fbe:	ef 90       	pop	r14
    4fc0:	df 90       	pop	r13
    4fc2:	cf 90       	pop	r12
    4fc4:	bf 90       	pop	r11
    4fc6:	af 90       	pop	r10
    4fc8:	9f 90       	pop	r9
    4fca:	08 95       	ret

00004fcc <unstick_MOTOR_LIMIT>:
	Returns:
		ERROR
		NOERROR
------------------------------------------------------------------------------*/
uint8_t unstick_MOTOR_LIMIT(uint8_t cstack)
{
    4fcc:	bf 92       	push	r11
    4fce:	cf 92       	push	r12
    4fd0:	df 92       	push	r13
    4fd2:	ef 92       	push	r14
    4fd4:	ff 92       	push	r15
    4fd6:	0f 93       	push	r16
    4fd8:	1f 93       	push	r17
    4fda:	cf 93       	push	r28
    4fdc:	df 93       	push	r29
    4fde:	cd b7       	in	r28, 0x3d	; 61
    4fe0:	de b7       	in	r29, 0x3e	; 62
    4fe2:	c8 55       	subi	r28, 0x58	; 88
    4fe4:	d1 09       	sbc	r29, r1
    4fe6:	cd bf       	out	0x3d, r28	; 61
    4fe8:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	uint8_t i, mtraddr, mtrIndex, direction, stuck;
	int32_t encodervalue, encoderspeed, newPosition;

	mtraddr = pcmd[cstack].cobject + 31;	// 128, 129, or 130
    4fea:	24 e3       	ldi	r18, 0x34	; 52
    4fec:	82 9f       	mul	r24, r18
    4fee:	c0 01       	movw	r24, r0
    4ff0:	11 24       	eor	r1, r1
    4ff2:	fc 01       	movw	r30, r24
    4ff4:	e1 5f       	subi	r30, 0xF1	; 241
    4ff6:	f7 4d       	sbci	r31, 0xD7	; 215
    4ff8:	e1 81       	ldd	r30, Z+1	; 0x01
    4ffa:	1f e1       	ldi	r17, 0x1F	; 31
    4ffc:	1e 0f       	add	r17, r30
	mtrIndex = mtraddr - MOTOR_A;
    4ffe:	e1 56       	subi	r30, 0x61	; 97
	direction = motorDir[mtrIndex];		// Save the most recent command direction
    5000:	f0 e0       	ldi	r31, 0x00	; 0
    5002:	e3 5c       	subi	r30, 0xC3	; 195
    5004:	f5 4d       	sbci	r31, 0xD5	; 213
    5006:	b0 80       	ld	r11, Z

//sprintf(strbuf, "mtraddr = %d, mtrIndex = %d, direction = %d", mtraddr, mtrIndex, direction);
//printLine(strbuf);

	if (get_MOTOR_LIMIT(mtraddr) == NO) {
    5008:	81 2f       	mov	r24, r17
    500a:	0e 94 20 20 	call	0x4040	; 0x4040 <get_MOTOR_LIMIT>
    500e:	08 2f       	mov	r16, r24
    5010:	81 11       	cpse	r24, r1
    5012:	1c c0       	rjmp	.+56     	; 0x504c <unstick_MOTOR_LIMIT+0x80>
		sprintf(strbuf, "motor %c not stuck", mtraddr - 31);
    5014:	81 2f       	mov	r24, r17
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	4f 97       	sbiw	r24, 0x1f	; 31
    501a:	9f 93       	push	r25
    501c:	8f 93       	push	r24
    501e:	84 e7       	ldi	r24, 0x74	; 116
    5020:	9b eb       	ldi	r25, 0xBB	; 187
    5022:	9f 93       	push	r25
    5024:	8f 93       	push	r24
    5026:	ce 01       	movw	r24, r28
    5028:	01 96       	adiw	r24, 0x01	; 1
    502a:	7c 01       	movw	r14, r24
    502c:	9f 93       	push	r25
    502e:	8f 93       	push	r24
    5030:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
		printError(ERR_MTR, strbuf);
    5034:	b7 01       	movw	r22, r14
    5036:	86 e3       	ldi	r24, 0x36	; 54
    5038:	91 e0       	ldi	r25, 0x01	; 1
    503a:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		return(NOERROR);
    503e:	0f 90       	pop	r0
    5040:	0f 90       	pop	r0
    5042:	0f 90       	pop	r0
    5044:	0f 90       	pop	r0
    5046:	0f 90       	pop	r0
    5048:	0f 90       	pop	r0
    504a:	b8 c0       	rjmp	.+368    	; 0x51bc <unstick_MOTOR_LIMIT+0x1f0>
	}

	stuck = YES;
	get_MOTOR_ENCODER(mtraddr, &encodervalue);
    504c:	be 01       	movw	r22, r28
    504e:	6f 5a       	subi	r22, 0xAF	; 175
    5050:	7f 4f       	sbci	r23, 0xFF	; 255
    5052:	81 2f       	mov	r24, r17
    5054:	0e 94 1f 1b 	call	0x363e	; 0x363e <get_MOTOR_ENCODER>

//sprintf(strbuf, "current position = %ld", encodervalue);
//printLine(strbuf);

	for (i = 0; i < 3; i++) {
    5058:	00 e0       	ldi	r16, 0x00	; 0
    505a:	7a c0       	rjmp	.+244    	; 0x5150 <unstick_MOTOR_LIMIT+0x184>

		// Try the opposite direction first
		if (direction == MTRDIRNEGATIVE) {
    505c:	b1 10       	cpse	r11, r1
    505e:	0d c0       	rjmp	.+26     	; 0x507a <unstick_MOTOR_LIMIT+0xae>
			newPosition = encodervalue + 2 * ENC_COUNTS_PER_MICRON;
    5060:	65 96       	adiw	r28, 0x15	; 21
    5062:	cc ac       	ldd	r12, Y+60	; 0x3c
    5064:	dd ac       	ldd	r13, Y+61	; 0x3d
    5066:	ee ac       	ldd	r14, Y+62	; 0x3e
    5068:	ff ac       	ldd	r15, Y+63	; 0x3f
    506a:	65 97       	sbiw	r28, 0x15	; 21
    506c:	96 e3       	ldi	r25, 0x36	; 54
    506e:	c9 0e       	add	r12, r25
    5070:	92 e0       	ldi	r25, 0x02	; 2
    5072:	d9 1e       	adc	r13, r25
    5074:	e1 1c       	adc	r14, r1
    5076:	f1 1c       	adc	r15, r1
    5078:	0c c0       	rjmp	.+24     	; 0x5092 <unstick_MOTOR_LIMIT+0xc6>
		} else {
			newPosition = encodervalue - 2 * ENC_COUNTS_PER_MICRON;			
    507a:	65 96       	adiw	r28, 0x15	; 21
    507c:	cc ac       	ldd	r12, Y+60	; 0x3c
    507e:	dd ac       	ldd	r13, Y+61	; 0x3d
    5080:	ee ac       	ldd	r14, Y+62	; 0x3e
    5082:	ff ac       	ldd	r15, Y+63	; 0x3f
    5084:	65 97       	sbiw	r28, 0x15	; 21
    5086:	26 e3       	ldi	r18, 0x36	; 54
    5088:	c2 1a       	sub	r12, r18
    508a:	22 e0       	ldi	r18, 0x02	; 2
    508c:	d2 0a       	sbc	r13, r18
    508e:	e1 08       	sbc	r14, r1
    5090:	f1 08       	sbc	r15, r1
		}

//sprintf(strbuf, "moving to %ld", newPosition);
//printLine(strbuf);

		move_MOTOR(mtraddr, newPosition);
    5092:	b7 01       	movw	r22, r14
    5094:	a6 01       	movw	r20, r12
    5096:	81 2f       	mov	r24, r17
    5098:	0e 94 1f 22 	call	0x443e	; 0x443e <move_MOTOR>
		get_MOTOR_SPEED(mtraddr, &encoderspeed);
    509c:	be 01       	movw	r22, r28
    509e:	6b 5a       	subi	r22, 0xAB	; 171
    50a0:	7f 4f       	sbci	r23, 0xFF	; 255
    50a2:	81 2f       	mov	r24, r17
    50a4:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <get_MOTOR_SPEED>
		while (encoderspeed) {
    50a8:	06 c0       	rjmp	.+12     	; 0x50b6 <unstick_MOTOR_LIMIT+0xea>
			get_MOTOR_SPEED(mtraddr, &encoderspeed);
    50aa:	be 01       	movw	r22, r28
    50ac:	6b 5a       	subi	r22, 0xAB	; 171
    50ae:	7f 4f       	sbci	r23, 0xFF	; 255
    50b0:	81 2f       	mov	r24, r17
    50b2:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <get_MOTOR_SPEED>
//sprintf(strbuf, "moving to %ld", newPosition);
//printLine(strbuf);

		move_MOTOR(mtraddr, newPosition);
		get_MOTOR_SPEED(mtraddr, &encoderspeed);
		while (encoderspeed) {
    50b6:	69 96       	adiw	r28, 0x19	; 25
    50b8:	8c ad       	ldd	r24, Y+60	; 0x3c
    50ba:	9d ad       	ldd	r25, Y+61	; 0x3d
    50bc:	ae ad       	ldd	r26, Y+62	; 0x3e
    50be:	bf ad       	ldd	r27, Y+63	; 0x3f
    50c0:	69 97       	sbiw	r28, 0x19	; 25
    50c2:	89 2b       	or	r24, r25
    50c4:	8a 2b       	or	r24, r26
    50c6:	8b 2b       	or	r24, r27
    50c8:	81 f7       	brne	.-32     	; 0x50aa <unstick_MOTOR_LIMIT+0xde>
//printLine(strbuf);

		}
//		_delay_ms(3000);

		if (get_MOTOR_LIMIT(mtraddr) == NO) {
    50ca:	81 2f       	mov	r24, r17
    50cc:	0e 94 20 20 	call	0x4040	; 0x4040 <get_MOTOR_LIMIT>
    50d0:	88 23       	and	r24, r24
    50d2:	09 f4       	brne	.+2      	; 0x50d6 <unstick_MOTOR_LIMIT+0x10a>
    50d4:	42 c0       	rjmp	.+132    	; 0x515a <unstick_MOTOR_LIMIT+0x18e>
			stuck = NO;
			break;
		}

		// Try the same direction
		if (direction == MTRDIRNEGATIVE) {
    50d6:	b1 10       	cpse	r11, r1
    50d8:	0d c0       	rjmp	.+26     	; 0x50f4 <unstick_MOTOR_LIMIT+0x128>
			newPosition = encodervalue - 2 * ENC_COUNTS_PER_MICRON;
    50da:	65 96       	adiw	r28, 0x15	; 21
    50dc:	cc ac       	ldd	r12, Y+60	; 0x3c
    50de:	dd ac       	ldd	r13, Y+61	; 0x3d
    50e0:	ee ac       	ldd	r14, Y+62	; 0x3e
    50e2:	ff ac       	ldd	r15, Y+63	; 0x3f
    50e4:	65 97       	sbiw	r28, 0x15	; 21
    50e6:	86 e3       	ldi	r24, 0x36	; 54
    50e8:	c8 1a       	sub	r12, r24
    50ea:	82 e0       	ldi	r24, 0x02	; 2
    50ec:	d8 0a       	sbc	r13, r24
    50ee:	e1 08       	sbc	r14, r1
    50f0:	f1 08       	sbc	r15, r1
    50f2:	0c c0       	rjmp	.+24     	; 0x510c <unstick_MOTOR_LIMIT+0x140>
		} else {
			newPosition = encodervalue + 2 * ENC_COUNTS_PER_MICRON;
    50f4:	65 96       	adiw	r28, 0x15	; 21
    50f6:	cc ac       	ldd	r12, Y+60	; 0x3c
    50f8:	dd ac       	ldd	r13, Y+61	; 0x3d
    50fa:	ee ac       	ldd	r14, Y+62	; 0x3e
    50fc:	ff ac       	ldd	r15, Y+63	; 0x3f
    50fe:	65 97       	sbiw	r28, 0x15	; 21
    5100:	96 e3       	ldi	r25, 0x36	; 54
    5102:	c9 0e       	add	r12, r25
    5104:	92 e0       	ldi	r25, 0x02	; 2
    5106:	d9 1e       	adc	r13, r25
    5108:	e1 1c       	adc	r14, r1
    510a:	f1 1c       	adc	r15, r1
		}
		move_MOTOR(mtraddr, newPosition);
    510c:	b7 01       	movw	r22, r14
    510e:	a6 01       	movw	r20, r12
    5110:	81 2f       	mov	r24, r17
    5112:	0e 94 1f 22 	call	0x443e	; 0x443e <move_MOTOR>
		get_MOTOR_SPEED(mtraddr, &encoderspeed);
    5116:	be 01       	movw	r22, r28
    5118:	6b 5a       	subi	r22, 0xAB	; 171
    511a:	7f 4f       	sbci	r23, 0xFF	; 255
    511c:	81 2f       	mov	r24, r17
    511e:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <get_MOTOR_SPEED>
		while (encoderspeed) {
    5122:	06 c0       	rjmp	.+12     	; 0x5130 <unstick_MOTOR_LIMIT+0x164>
			get_MOTOR_SPEED(mtraddr, &encoderspeed);
    5124:	be 01       	movw	r22, r28
    5126:	6b 5a       	subi	r22, 0xAB	; 171
    5128:	7f 4f       	sbci	r23, 0xFF	; 255
    512a:	81 2f       	mov	r24, r17
    512c:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <get_MOTOR_SPEED>
		} else {
			newPosition = encodervalue + 2 * ENC_COUNTS_PER_MICRON;
		}
		move_MOTOR(mtraddr, newPosition);
		get_MOTOR_SPEED(mtraddr, &encoderspeed);
		while (encoderspeed) {
    5130:	69 96       	adiw	r28, 0x19	; 25
    5132:	8c ad       	ldd	r24, Y+60	; 0x3c
    5134:	9d ad       	ldd	r25, Y+61	; 0x3d
    5136:	ae ad       	ldd	r26, Y+62	; 0x3e
    5138:	bf ad       	ldd	r27, Y+63	; 0x3f
    513a:	69 97       	sbiw	r28, 0x19	; 25
    513c:	89 2b       	or	r24, r25
    513e:	8a 2b       	or	r24, r26
    5140:	8b 2b       	or	r24, r27
    5142:	81 f7       	brne	.-32     	; 0x5124 <unstick_MOTOR_LIMIT+0x158>
//sprintf(strbuf, "encoderspeed = %ld", encoderspeed);
//printLine(strbuf);
		}
//		_delay_ms(2000);

		if (get_MOTOR_LIMIT(mtraddr) == NO) {
    5144:	81 2f       	mov	r24, r17
    5146:	0e 94 20 20 	call	0x4040	; 0x4040 <get_MOTOR_LIMIT>
    514a:	88 23       	and	r24, r24
    514c:	41 f0       	breq	.+16     	; 0x515e <unstick_MOTOR_LIMIT+0x192>
	get_MOTOR_ENCODER(mtraddr, &encodervalue);

//sprintf(strbuf, "current position = %ld", encodervalue);
//printLine(strbuf);

	for (i = 0; i < 3; i++) {
    514e:	0f 5f       	subi	r16, 0xFF	; 255
    5150:	03 30       	cpi	r16, 0x03	; 3
    5152:	08 f4       	brcc	.+2      	; 0x5156 <unstick_MOTOR_LIMIT+0x18a>
    5154:	83 cf       	rjmp	.-250    	; 0x505c <unstick_MOTOR_LIMIT+0x90>
		sprintf(strbuf, "motor %c not stuck", mtraddr - 31);
		printError(ERR_MTR, strbuf);
		return(NOERROR);
	}

	stuck = YES;
    5156:	81 e0       	ldi	r24, 0x01	; 1
    5158:	03 c0       	rjmp	.+6      	; 0x5160 <unstick_MOTOR_LIMIT+0x194>
//		_delay_ms(3000);

		if (get_MOTOR_LIMIT(mtraddr) == NO) {
//sprintf(strbuf, "unstuck at i=%d, opposite direction", i);
//printLine(strbuf);
			stuck = NO;
    515a:	80 e0       	ldi	r24, 0x00	; 0
    515c:	01 c0       	rjmp	.+2      	; 0x5160 <unstick_MOTOR_LIMIT+0x194>
//		_delay_ms(2000);

		if (get_MOTOR_LIMIT(mtraddr) == NO) {
//sprintf(strbuf, "unstuck at i=%d, same direction", i);
//printLine(strbuf);
			stuck = NO;
    515e:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
	if (stuck == YES) {		// Tried 3 times and failed
    5160:	81 30       	cpi	r24, 0x01	; 1
    5162:	59 f1       	breq	.+86     	; 0x51ba <unstick_MOTOR_LIMIT+0x1ee>
//printLine(strbuf);
		return(ERROR);
	}

	// Move 200 um away
	get_MOTOR_ENCODER(mtraddr, &encodervalue);
    5164:	be 01       	movw	r22, r28
    5166:	6f 5a       	subi	r22, 0xAF	; 175
    5168:	7f 4f       	sbci	r23, 0xFF	; 255
    516a:	81 2f       	mov	r24, r17
    516c:	0e 94 1f 1b 	call	0x363e	; 0x363e <get_MOTOR_ENCODER>
	if (direction == MTRDIRNEGATIVE) {
    5170:	b1 10       	cpse	r11, r1
    5172:	0d c0       	rjmp	.+26     	; 0x518e <unstick_MOTOR_LIMIT+0x1c2>
		newPosition = encodervalue + 200L * ENC_COUNTS_PER_MICRON;
    5174:	65 96       	adiw	r28, 0x15	; 21
    5176:	cc ac       	ldd	r12, Y+60	; 0x3c
    5178:	dd ac       	ldd	r13, Y+61	; 0x3d
    517a:	ee ac       	ldd	r14, Y+62	; 0x3e
    517c:	ff ac       	ldd	r15, Y+63	; 0x3f
    517e:	65 97       	sbiw	r28, 0x15	; 21
    5180:	28 e1       	ldi	r18, 0x18	; 24
    5182:	c2 0e       	add	r12, r18
    5184:	2d ed       	ldi	r18, 0xDD	; 221
    5186:	d2 1e       	adc	r13, r18
    5188:	e1 1c       	adc	r14, r1
    518a:	f1 1c       	adc	r15, r1
    518c:	0f c0       	rjmp	.+30     	; 0x51ac <unstick_MOTOR_LIMIT+0x1e0>
	} else if (direction == MTRDIRPOSITIVE) {
    518e:	81 e0       	ldi	r24, 0x01	; 1
    5190:	b8 12       	cpse	r11, r24
    5192:	0c c0       	rjmp	.+24     	; 0x51ac <unstick_MOTOR_LIMIT+0x1e0>
		newPosition = encodervalue - 200L * ENC_COUNTS_PER_MICRON;
    5194:	65 96       	adiw	r28, 0x15	; 21
    5196:	cc ac       	ldd	r12, Y+60	; 0x3c
    5198:	dd ac       	ldd	r13, Y+61	; 0x3d
    519a:	ee ac       	ldd	r14, Y+62	; 0x3e
    519c:	ff ac       	ldd	r15, Y+63	; 0x3f
    519e:	65 97       	sbiw	r28, 0x15	; 21
    51a0:	98 e1       	ldi	r25, 0x18	; 24
    51a2:	c9 1a       	sub	r12, r25
    51a4:	9d ed       	ldi	r25, 0xDD	; 221
    51a6:	d9 0a       	sbc	r13, r25
    51a8:	e1 08       	sbc	r14, r1
    51aa:	f1 08       	sbc	r15, r1
	} 
//sprintf(strbuf, "encodervalue = %ld, newPosition = %ld", encodervalue, newPosition);
//printLine(strbuf);
	move_MOTOR(mtraddr, newPosition);
    51ac:	b7 01       	movw	r22, r14
    51ae:	a6 01       	movw	r20, r12
    51b0:	81 2f       	mov	r24, r17
    51b2:	0e 94 1f 22 	call	0x443e	; 0x443e <move_MOTOR>
	return(NOERROR);
    51b6:	00 e0       	ldi	r16, 0x00	; 0
    51b8:	01 c0       	rjmp	.+2      	; 0x51bc <unstick_MOTOR_LIMIT+0x1f0>
		}
	}
	if (stuck == YES) {		// Tried 3 times and failed
//sprintf(strbuf, "tried 3 times and failed");
//printLine(strbuf);
		return(ERROR);
    51ba:	03 e6       	ldi	r16, 0x63	; 99
//sprintf(strbuf, "encodervalue = %ld, newPosition = %ld", encodervalue, newPosition);
//printLine(strbuf);
	move_MOTOR(mtraddr, newPosition);
	return(NOERROR);

}
    51bc:	80 2f       	mov	r24, r16
    51be:	c8 5a       	subi	r28, 0xA8	; 168
    51c0:	df 4f       	sbci	r29, 0xFF	; 255
    51c2:	cd bf       	out	0x3d, r28	; 61
    51c4:	de bf       	out	0x3e, r29	; 62
    51c6:	df 91       	pop	r29
    51c8:	cf 91       	pop	r28
    51ca:	1f 91       	pop	r17
    51cc:	0f 91       	pop	r16
    51ce:	ff 90       	pop	r15
    51d0:	ef 90       	pop	r14
    51d2:	df 90       	pop	r13
    51d4:	cf 90       	pop	r12
    51d6:	bf 90       	pop	r11
    51d8:	08 95       	ret

000051da <zero_MOTOR_CMD>:

	Outputs:
		None
------------------------------------------------------------------------------*/
void zero_MOTOR_CMD(uint8_t cstack)
{
    51da:	0f 93       	push	r16
    51dc:	1f 93       	push	r17
    51de:	cf 93       	push	r28
    51e0:	df 93       	push	r29
    51e2:	cd b7       	in	r28, 0x3d	; 61
    51e4:	de b7       	in	r29, 0x3e	; 62
    51e6:	c5 5a       	subi	r28, 0xA5	; 165
    51e8:	d1 09       	sbc	r29, r1
    51ea:	cd bf       	out	0x3d, r28	; 61
    51ec:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	const char fmt0[] = "zero_MOTOR_CMD: failed put_MOTOR_ENCODER on %c";
    51ee:	9f e2       	ldi	r25, 0x2F	; 47
    51f0:	e7 e8       	ldi	r30, 0x87	; 135
    51f2:	fb eb       	ldi	r31, 0xBB	; 187
    51f4:	de 01       	movw	r26, r28
    51f6:	af 5a       	subi	r26, 0xAF	; 175
    51f8:	bf 4f       	sbci	r27, 0xFF	; 255
    51fa:	01 90       	ld	r0, Z+
    51fc:	0d 92       	st	X+, r0
    51fe:	9a 95       	dec	r25
    5200:	e1 f7       	brne	.-8      	; 0x51fa <zero_MOTOR_CMD+0x20>
	const char fmt1[] = "zero_MOTOR_CMD: not a motor name (%c)";
    5202:	96 e2       	ldi	r25, 0x26	; 38
    5204:	e6 eb       	ldi	r30, 0xB6	; 182
    5206:	fb eb       	ldi	r31, 0xBB	; 187
    5208:	de 01       	movw	r26, r28
    520a:	a0 58       	subi	r26, 0x80	; 128
    520c:	bf 4f       	sbci	r27, 0xFF	; 255
    520e:	01 90       	ld	r0, Z+
    5210:	0d 92       	st	X+, r0
    5212:	9a 95       	dec	r25
    5214:	e1 f7       	brne	.-8      	; 0x520e <zero_MOTOR_CMD+0x34>
	uint8_t motor, mtraddr, retval;

	motor = pcmd[cstack].cobject;	// The char a, b, or c
    5216:	24 e3       	ldi	r18, 0x34	; 52
    5218:	82 9f       	mul	r24, r18
    521a:	c0 01       	movw	r24, r0
    521c:	11 24       	eor	r1, r1
    521e:	fc 01       	movw	r30, r24
    5220:	e1 5f       	subi	r30, 0xF1	; 241
    5222:	f7 4d       	sbci	r31, 0xD7	; 215
    5224:	11 81       	ldd	r17, Z+1	; 0x01

	switch (motor) {
    5226:	8f e9       	ldi	r24, 0x9F	; 159
    5228:	81 0f       	add	r24, r17
    522a:	83 30       	cpi	r24, 0x03	; 3
    522c:	18 f5       	brcc	.+70     	; 0x5274 <zero_MOTOR_CMD+0x9a>
		case 'a':
		case 'b':
		case 'c':
			mtraddr = motor + 31;
			retval = put_MOTOR_ENCODER(mtraddr, 0L);
    522e:	40 e0       	ldi	r20, 0x00	; 0
    5230:	50 e0       	ldi	r21, 0x00	; 0
    5232:	ba 01       	movw	r22, r20
    5234:	8f e1       	ldi	r24, 0x1F	; 31
    5236:	81 0f       	add	r24, r17
    5238:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <put_MOTOR_ENCODER>
			if (retval == ERROR) {
    523c:	83 36       	cpi	r24, 0x63	; 99
    523e:	99 f5       	brne	.+102    	; 0x52a6 <zero_MOTOR_CMD+0xcc>
				sprintf(strbuf, fmt0, motor);
    5240:	1f 92       	push	r1
    5242:	1f 93       	push	r17
    5244:	ce 01       	movw	r24, r28
    5246:	8f 5a       	subi	r24, 0xAF	; 175
    5248:	9f 4f       	sbci	r25, 0xFF	; 255
    524a:	9f 93       	push	r25
    524c:	8f 93       	push	r24
    524e:	8e 01       	movw	r16, r28
    5250:	0f 5f       	subi	r16, 0xFF	; 255
    5252:	1f 4f       	sbci	r17, 0xFF	; 255
    5254:	1f 93       	push	r17
    5256:	0f 93       	push	r16
    5258:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
				printError(ERR_ZERMTR, strbuf);
    525c:	b8 01       	movw	r22, r16
    525e:	87 e3       	ldi	r24, 0x37	; 55
    5260:	91 e0       	ldi	r25, 0x01	; 1
    5262:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				return;
    5266:	0f 90       	pop	r0
    5268:	0f 90       	pop	r0
    526a:	0f 90       	pop	r0
    526c:	0f 90       	pop	r0
    526e:	0f 90       	pop	r0
    5270:	0f 90       	pop	r0
    5272:	19 c0       	rjmp	.+50     	; 0x52a6 <zero_MOTOR_CMD+0xcc>
			}
			break;

		default:
			sprintf(strbuf, fmt1, motor);
    5274:	1f 92       	push	r1
    5276:	1f 93       	push	r17
    5278:	ce 01       	movw	r24, r28
    527a:	80 58       	subi	r24, 0x80	; 128
    527c:	9f 4f       	sbci	r25, 0xFF	; 255
    527e:	9f 93       	push	r25
    5280:	8f 93       	push	r24
    5282:	8e 01       	movw	r16, r28
    5284:	0f 5f       	subi	r16, 0xFF	; 255
    5286:	1f 4f       	sbci	r17, 0xFF	; 255
    5288:	1f 93       	push	r17
    528a:	0f 93       	push	r16
    528c:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			printError(ERR_ZERMTR, strbuf);
    5290:	b8 01       	movw	r22, r16
    5292:	87 e3       	ldi	r24, 0x37	; 55
    5294:	91 e0       	ldi	r25, 0x01	; 1
    5296:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
			break;
    529a:	0f 90       	pop	r0
    529c:	0f 90       	pop	r0
    529e:	0f 90       	pop	r0
    52a0:	0f 90       	pop	r0
    52a2:	0f 90       	pop	r0
    52a4:	0f 90       	pop	r0
		
	}
    52a6:	cb 55       	subi	r28, 0x5B	; 91
    52a8:	df 4f       	sbci	r29, 0xFF	; 255
    52aa:	cd bf       	out	0x3d, r28	; 61
    52ac:	de bf       	out	0x3e, r29	; 62
    52ae:	df 91       	pop	r29
    52b0:	cf 91       	pop	r28
    52b2:	1f 91       	pop	r17
    52b4:	0f 91       	pop	r16
    52b6:	08 95       	ret

000052b8 <set>:
	Returns:
		ERROR if an invalid object was requested.
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    52b8:	ef 92       	push	r14
    52ba:	ff 92       	push	r15
    52bc:	0f 93       	push	r16
    52be:	1f 93       	push	r17
    52c0:	cf 93       	push	r28
    52c2:	df 93       	push	r29
    52c4:	cd b7       	in	r28, 0x3d	; 61
    52c6:	de b7       	in	r29, 0x3e	; 62
    52c8:	c8 5f       	subi	r28, 0xF8	; 248
    52ca:	d1 09       	sbc	r29, r1
    52cc:	cd bf       	out	0x3d, r28	; 61
    52ce:	de bf       	out	0x3e, r29	; 62
	char object;
	uint8_t i, mtraddr;
//	int32_t newEncoderValue;
	PID motorPID;
//	const char fmt0[] = "set: put_MOTOR_ENCODER error on %c";
	const char fmt1[] = "set: bad time format";
    52d0:	95 e1       	ldi	r25, 0x15	; 21
    52d2:	ec ed       	ldi	r30, 0xDC	; 220
    52d4:	fb eb       	ldi	r31, 0xBB	; 187
    52d6:	de 01       	movw	r26, r28
    52d8:	af 58       	subi	r26, 0x8F	; 143
    52da:	bf 4f       	sbci	r27, 0xFF	; 255
    52dc:	01 90       	ld	r0, Z+
    52de:	0d 92       	st	X+, r0
    52e0:	9a 95       	dec	r25
    52e2:	e1 f7       	brne	.-8      	; 0x52dc <set+0x24>
	const char fmt2[] = "set: put_time error";
    52e4:	94 e1       	ldi	r25, 0x14	; 20
    52e6:	e1 ef       	ldi	r30, 0xF1	; 241
    52e8:	fb eb       	ldi	r31, 0xBB	; 187
    52ea:	de 01       	movw	r26, r28
    52ec:	aa 57       	subi	r26, 0x7A	; 122
    52ee:	bf 4f       	sbci	r27, 0xFF	; 255
    52f0:	01 90       	ld	r0, Z+
    52f2:	0d 92       	st	X+, r0
    52f4:	9a 95       	dec	r25
    52f6:	e1 f7       	brne	.-8      	; 0x52f0 <set+0x38>
	const char fmt3[] = "set: write_FRAM error";
    52f8:	96 e1       	ldi	r25, 0x16	; 22
    52fa:	e5 e0       	ldi	r30, 0x05	; 5
    52fc:	fc eb       	ldi	r31, 0xBC	; 188
    52fe:	de 01       	movw	r26, r28
    5300:	a6 56       	subi	r26, 0x66	; 102
    5302:	bf 4f       	sbci	r27, 0xFF	; 255
    5304:	01 90       	ld	r0, Z+
    5306:	0d 92       	st	X+, r0
    5308:	9a 95       	dec	r25
    530a:	e1 f7       	brne	.-8      	; 0x5304 <set+0x4c>
	const char fmt4[] = "set: what?";
    530c:	9b e0       	ldi	r25, 0x0B	; 11
    530e:	eb e1       	ldi	r30, 0x1B	; 27
    5310:	fc eb       	ldi	r31, 0xBC	; 188
    5312:	de 01       	movw	r26, r28
    5314:	a0 55       	subi	r26, 0x50	; 80
    5316:	bf 4f       	sbci	r27, 0xFF	; 255
    5318:	01 90       	ld	r0, Z+
    531a:	0d 92       	st	X+, r0
    531c:	9a 95       	dec	r25
    531e:	e1 f7       	brne	.-8      	; 0x5318 <set+0x60>
//	const char fmt5[] = "set: encoder value out of range %ld";
	const char fmt6[] = "set: get_MOTOR_PID error on %c";
    5320:	9f e1       	ldi	r25, 0x1F	; 31
    5322:	e6 e2       	ldi	r30, 0x26	; 38
    5324:	fc eb       	ldi	r31, 0xBC	; 188
    5326:	de 01       	movw	r26, r28
    5328:	a5 54       	subi	r26, 0x45	; 69
    532a:	bf 4f       	sbci	r27, 0xFF	; 255
    532c:	01 90       	ld	r0, Z+
    532e:	0d 92       	st	X+, r0
    5330:	9a 95       	dec	r25
    5332:	e1 f7       	brne	.-8      	; 0x532c <set+0x74>
	const char fmt7[] = "set: put_MOTOR_PID error on %c";
    5334:	9f e1       	ldi	r25, 0x1F	; 31
    5336:	e5 e4       	ldi	r30, 0x45	; 69
    5338:	fc eb       	ldi	r31, 0xBC	; 188
    533a:	de 01       	movw	r26, r28
    533c:	a6 52       	subi	r26, 0x26	; 38
    533e:	bf 4f       	sbci	r27, 0xFF	; 255
    5340:	01 90       	ld	r0, Z+
    5342:	0d 92       	st	X+, r0
    5344:	9a 95       	dec	r25
    5346:	e1 f7       	brne	.-8      	; 0x5340 <set+0x88>

	object = pcmd[cstack].cobject;
    5348:	90 e0       	ldi	r25, 0x00	; 0
    534a:	24 e3       	ldi	r18, 0x34	; 52
    534c:	28 9f       	mul	r18, r24
    534e:	f0 01       	movw	r30, r0
    5350:	29 9f       	mul	r18, r25
    5352:	f0 0d       	add	r31, r0
    5354:	11 24       	eor	r1, r1
    5356:	e1 5f       	subi	r30, 0xF1	; 241
    5358:	f7 4d       	sbci	r31, 0xD7	; 215
    535a:	21 81       	ldd	r18, Z+1	; 0x01
	switch(object) {
    535c:	23 37       	cpi	r18, 0x73	; 115
    535e:	09 f4       	brne	.+2      	; 0x5362 <set+0xaa>
    5360:	64 c1       	rjmp	.+712    	; 0x562a <set+0x372>
    5362:	38 f4       	brcc	.+14     	; 0x5372 <set+0xba>
    5364:	2c 34       	cpi	r18, 0x4C	; 76
    5366:	09 f4       	brne	.+2      	; 0x536a <set+0xb2>
    5368:	e5 c0       	rjmp	.+458    	; 0x5534 <set+0x27c>
    536a:	2c 36       	cpi	r18, 0x6C	; 108
    536c:	09 f4       	brne	.+2      	; 0x5370 <set+0xb8>
    536e:	5d c1       	rjmp	.+698    	; 0x562a <set+0x372>
    5370:	62 c1       	rjmp	.+708    	; 0x5636 <set+0x37e>
    5372:	24 37       	cpi	r18, 0x74	; 116
    5374:	21 f0       	breq	.+8      	; 0x537e <set+0xc6>
    5376:	25 37       	cpi	r18, 0x75	; 117
    5378:	09 f4       	brne	.+2      	; 0x537c <set+0xc4>
    537a:	dc c0       	rjmp	.+440    	; 0x5534 <set+0x27c>
    537c:	5c c1       	rjmp	.+696    	; 0x5636 <set+0x37e>
			}
			break;
*/

		case 't':		// Time
			if (strlen(pcmd[cstack].cvalue) != 19) {
    537e:	44 e3       	ldi	r20, 0x34	; 52
    5380:	48 9f       	mul	r20, r24
    5382:	90 01       	movw	r18, r0
    5384:	49 9f       	mul	r20, r25
    5386:	30 0d       	add	r19, r0
    5388:	11 24       	eor	r1, r1
    538a:	c9 01       	movw	r24, r18
    538c:	8f 5e       	subi	r24, 0xEF	; 239
    538e:	97 4d       	sbci	r25, 0xD7	; 215
    5390:	7c 01       	movw	r14, r24
    5392:	fc 01       	movw	r30, r24
    5394:	01 90       	ld	r0, Z+
    5396:	00 20       	and	r0, r0
    5398:	e9 f7       	brne	.-6      	; 0x5394 <set+0xdc>
    539a:	31 97       	sbiw	r30, 0x01	; 1
    539c:	e8 1b       	sub	r30, r24
    539e:	f9 0b       	sbc	r31, r25
    53a0:	73 97       	sbiw	r30, 0x13	; 19
    53a2:	b9 f0       	breq	.+46     	; 0x53d2 <set+0x11a>
				sprintf(strbuf, fmt1);
    53a4:	ce 01       	movw	r24, r28
    53a6:	8f 58       	subi	r24, 0x8F	; 143
    53a8:	9f 4f       	sbci	r25, 0xFF	; 255
    53aa:	9f 93       	push	r25
    53ac:	8f 93       	push	r24
    53ae:	8e 01       	movw	r16, r28
    53b0:	0f 5f       	subi	r16, 0xFF	; 255
    53b2:	1f 4f       	sbci	r17, 0xFF	; 255
    53b4:	1f 93       	push	r17
    53b6:	0f 93       	push	r16
    53b8:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
				printError(ERR_SETTIME, strbuf);
    53bc:	b8 01       	movw	r22, r16
    53be:	8a e5       	ldi	r24, 0x5A	; 90
    53c0:	92 e0       	ldi	r25, 0x02	; 2
    53c2:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				return(ERROR);
    53c6:	0f 90       	pop	r0
    53c8:	0f 90       	pop	r0
    53ca:	0f 90       	pop	r0
    53cc:	0f 90       	pop	r0
    53ce:	13 e6       	ldi	r17, 0x63	; 99
    53d0:	4a c1       	rjmp	.+660    	; 0x5666 <set+0x3ae>
			}
			if (put_time(pcmd[cstack].cvalue) == ERROR) {
    53d2:	0e 94 b2 07 	call	0xf64	; 0xf64 <put_time>
    53d6:	18 2f       	mov	r17, r24
    53d8:	83 36       	cpi	r24, 0x63	; 99
    53da:	b1 f4       	brne	.+44     	; 0x5408 <set+0x150>
				sprintf(strbuf, fmt2);
    53dc:	ce 01       	movw	r24, r28
    53de:	8a 57       	subi	r24, 0x7A	; 122
    53e0:	9f 4f       	sbci	r25, 0xFF	; 255
    53e2:	9f 93       	push	r25
    53e4:	8f 93       	push	r24
    53e6:	85 58       	subi	r24, 0x85	; 133
    53e8:	91 09       	sbc	r25, r1
    53ea:	7c 01       	movw	r14, r24
    53ec:	9f 93       	push	r25
    53ee:	8f 93       	push	r24
    53f0:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
				printError(ERR_ISO, strbuf);
    53f4:	b7 01       	movw	r22, r14
    53f6:	8b e5       	ldi	r24, 0x5B	; 91
    53f8:	92 e0       	ldi	r25, 0x02	; 2
    53fa:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				return(ERROR);
    53fe:	0f 90       	pop	r0
    5400:	0f 90       	pop	r0
    5402:	0f 90       	pop	r0
    5404:	0f 90       	pop	r0
    5406:	2f c1       	rjmp	.+606    	; 0x5666 <set+0x3ae>
			}
			if (write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20) == ERROR) {
    5408:	24 e1       	ldi	r18, 0x14	; 20
    540a:	a7 01       	movw	r20, r14
    540c:	60 e0       	ldi	r22, 0x00	; 0
    540e:	70 e0       	ldi	r23, 0x00	; 0
    5410:	80 e5       	ldi	r24, 0x50	; 80
    5412:	0e 94 e7 08 	call	0x11ce	; 0x11ce <write_FRAM>
    5416:	18 2f       	mov	r17, r24
    5418:	83 36       	cpi	r24, 0x63	; 99
    541a:	09 f0       	breq	.+2      	; 0x541e <set+0x166>
    541c:	23 c1       	rjmp	.+582    	; 0x5664 <set+0x3ac>
				sprintf(strbuf, fmt3);
    541e:	ce 01       	movw	r24, r28
    5420:	86 56       	subi	r24, 0x66	; 102
    5422:	9f 4f       	sbci	r25, 0xFF	; 255
    5424:	9f 93       	push	r25
    5426:	8f 93       	push	r24
    5428:	89 59       	subi	r24, 0x99	; 153
    542a:	91 09       	sbc	r25, r1
    542c:	7c 01       	movw	r14, r24
    542e:	9f 93       	push	r25
    5430:	8f 93       	push	r24
    5432:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
				printError(ERR_ISO, strbuf);
    5436:	b7 01       	movw	r22, r14
    5438:	8b e5       	ldi	r24, 0x5B	; 91
    543a:	92 e0       	ldi	r25, 0x02	; 2
    543c:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
				return(ERROR);
    5440:	0f 90       	pop	r0
    5442:	0f 90       	pop	r0
    5444:	0f 90       	pop	r0
    5446:	0f 90       	pop	r0
    5448:	0e c1       	rjmp	.+540    	; 0x5666 <set+0x3ae>
			break;

		case 'u':		// Unsafe motor encoder limits
		case 'L':
			for (i = 0; i < NMOTORS; i++) {
				mtraddr = i + MOTOR_A;
    544a:	68 94       	set
    544c:	ff 24       	eor	r15, r15
    544e:	f7 f8       	bld	r15, 7
    5450:	f0 0e       	add	r15, r16
				if (get_MOTOR_PID(mtraddr, &motorPID) == ERROR) {
    5452:	be 01       	movw	r22, r28
    5454:	6f 5a       	subi	r22, 0xAF	; 175
    5456:	7f 4f       	sbci	r23, 0xFF	; 255
    5458:	8f 2d       	mov	r24, r15
    545a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <get_MOTOR_PID>
    545e:	18 2f       	mov	r17, r24
    5460:	83 36       	cpi	r24, 0x63	; 99
    5462:	e9 f4       	brne	.+58     	; 0x549e <set+0x1e6>
					sprintf(strbuf, fmt6, mtraddr - 31);
    5464:	8f 2d       	mov	r24, r15
    5466:	90 e0       	ldi	r25, 0x00	; 0
    5468:	4f 97       	sbiw	r24, 0x1f	; 31
    546a:	9f 93       	push	r25
    546c:	8f 93       	push	r24
    546e:	ce 01       	movw	r24, r28
    5470:	85 54       	subi	r24, 0x45	; 69
    5472:	9f 4f       	sbci	r25, 0xFF	; 255
    5474:	9f 93       	push	r25
    5476:	8f 93       	push	r24
    5478:	8a 5b       	subi	r24, 0xBA	; 186
    547a:	91 09       	sbc	r25, r1
    547c:	7c 01       	movw	r14, r24
    547e:	9f 93       	push	r25
    5480:	8f 93       	push	r24
    5482:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
					printError(ERR_MTR, strbuf);
    5486:	b7 01       	movw	r22, r14
    5488:	86 e3       	ldi	r24, 0x36	; 54
    548a:	91 e0       	ldi	r25, 0x01	; 1
    548c:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
					return(ERROR);
    5490:	0f 90       	pop	r0
    5492:	0f 90       	pop	r0
    5494:	0f 90       	pop	r0
    5496:	0f 90       	pop	r0
    5498:	0f 90       	pop	r0
    549a:	0f 90       	pop	r0
    549c:	e4 c0       	rjmp	.+456    	; 0x5666 <set+0x3ae>
				}
				motorPID.minPos = PID_MINPOSUNSAFE;
    549e:	80 ee       	ldi	r24, 0xE0	; 224
    54a0:	9e e5       	ldi	r25, 0x5E	; 94
    54a2:	a8 ef       	ldi	r26, 0xF8	; 248
    54a4:	bf ef       	ldi	r27, 0xFF	; 255
    54a6:	a9 96       	adiw	r28, 0x29	; 41
    54a8:	8c af       	std	Y+60, r24	; 0x3c
    54aa:	9d af       	std	Y+61, r25	; 0x3d
    54ac:	ae af       	std	Y+62, r26	; 0x3e
    54ae:	bf af       	std	Y+63, r27	; 0x3f
    54b0:	a9 97       	sbiw	r28, 0x29	; 41
				motorPID.maxPos = PID_MAXPOSUNSAFE;
    54b2:	80 e4       	ldi	r24, 0x40	; 64
    54b4:	92 e4       	ldi	r25, 0x42	; 66
    54b6:	af e0       	ldi	r26, 0x0F	; 15
    54b8:	b0 e0       	ldi	r27, 0x00	; 0
    54ba:	ad 96       	adiw	r28, 0x2d	; 45
    54bc:	8c af       	std	Y+60, r24	; 0x3c
    54be:	9d af       	std	Y+61, r25	; 0x3d
    54c0:	ae af       	std	Y+62, r26	; 0x3e
    54c2:	bf af       	std	Y+63, r27	; 0x3f
    54c4:	ad 97       	sbiw	r28, 0x2d	; 45
				if (put_MOTOR_PID(mtraddr, motorPID) == ERROR) {
    54c6:	8d b7       	in	r24, 0x3d	; 61
    54c8:	9e b7       	in	r25, 0x3e	; 62
    54ca:	80 97       	sbiw	r24, 0x20	; 32
    54cc:	8d bf       	out	0x3d, r24	; 61
    54ce:	9e bf       	out	0x3e, r25	; 62
    54d0:	ad b7       	in	r26, 0x3d	; 61
    54d2:	be b7       	in	r27, 0x3e	; 62
    54d4:	11 96       	adiw	r26, 0x01	; 1
    54d6:	80 e2       	ldi	r24, 0x20	; 32
    54d8:	fe 01       	movw	r30, r28
    54da:	ef 5a       	subi	r30, 0xAF	; 175
    54dc:	ff 4f       	sbci	r31, 0xFF	; 255
    54de:	01 90       	ld	r0, Z+
    54e0:	0d 92       	st	X+, r0
    54e2:	8a 95       	dec	r24
    54e4:	e1 f7       	brne	.-8      	; 0x54de <set+0x226>
    54e6:	8f 2d       	mov	r24, r15
    54e8:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <put_MOTOR_PID>
    54ec:	18 2f       	mov	r17, r24
    54ee:	cd bf       	out	0x3d, r28	; 61
    54f0:	de bf       	out	0x3e, r29	; 62
    54f2:	13 36       	cpi	r17, 0x63	; 99
    54f4:	e9 f4       	brne	.+58     	; 0x5530 <set+0x278>
					sprintf(strbuf, fmt7, mtraddr - 31);
    54f6:	8f 2d       	mov	r24, r15
    54f8:	90 e0       	ldi	r25, 0x00	; 0
    54fa:	4f 97       	sbiw	r24, 0x1f	; 31
    54fc:	9f 93       	push	r25
    54fe:	8f 93       	push	r24
    5500:	ce 01       	movw	r24, r28
    5502:	86 52       	subi	r24, 0x26	; 38
    5504:	9f 4f       	sbci	r25, 0xFF	; 255
    5506:	9f 93       	push	r25
    5508:	8f 93       	push	r24
    550a:	89 5d       	subi	r24, 0xD9	; 217
    550c:	91 09       	sbc	r25, r1
    550e:	7c 01       	movw	r14, r24
    5510:	9f 93       	push	r25
    5512:	8f 93       	push	r24
    5514:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
					printError(ERR_MTR, strbuf);
    5518:	b7 01       	movw	r22, r14
    551a:	86 e3       	ldi	r24, 0x36	; 54
    551c:	91 e0       	ldi	r25, 0x01	; 1
    551e:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
					return(ERROR);
    5522:	0f 90       	pop	r0
    5524:	0f 90       	pop	r0
    5526:	0f 90       	pop	r0
    5528:	0f 90       	pop	r0
    552a:	0f 90       	pop	r0
    552c:	0f 90       	pop	r0
    552e:	9b c0       	rjmp	.+310    	; 0x5666 <set+0x3ae>
			}
			break;

		case 'u':		// Unsafe motor encoder limits
		case 'L':
			for (i = 0; i < NMOTORS; i++) {
    5530:	0f 5f       	subi	r16, 0xFF	; 255
    5532:	01 c0       	rjmp	.+2      	; 0x5536 <set+0x27e>
//	const char fmt5[] = "set: encoder value out of range %ld";
	const char fmt6[] = "set: get_MOTOR_PID error on %c";
	const char fmt7[] = "set: put_MOTOR_PID error on %c";

	object = pcmd[cstack].cobject;
	switch(object) {
    5534:	00 e0       	ldi	r16, 0x00	; 0
			}
			break;

		case 'u':		// Unsafe motor encoder limits
		case 'L':
			for (i = 0; i < NMOTORS; i++) {
    5536:	03 30       	cpi	r16, 0x03	; 3
    5538:	08 f4       	brcc	.+2      	; 0x553c <set+0x284>
    553a:	87 cf       	rjmp	.-242    	; 0x544a <set+0x192>
			sprintf(strbuf, fmt4);
			printError(ERR_SET, strbuf);
			return(ERROR);
	}

	return(NOERROR);
    553c:	10 e0       	ldi	r17, 0x00	; 0
    553e:	93 c0       	rjmp	.+294    	; 0x5666 <set+0x3ae>
			break;

		case 's':		// Safe motor encoder limits
		case 'l':
			for (i = 0; i < NMOTORS; i++) {
				mtraddr = i + MOTOR_A;
    5540:	68 94       	set
    5542:	ff 24       	eor	r15, r15
    5544:	f7 f8       	bld	r15, 7
    5546:	f0 0e       	add	r15, r16
				if (get_MOTOR_PID(mtraddr, &motorPID) == ERROR) {
    5548:	be 01       	movw	r22, r28
    554a:	6f 5a       	subi	r22, 0xAF	; 175
    554c:	7f 4f       	sbci	r23, 0xFF	; 255
    554e:	8f 2d       	mov	r24, r15
    5550:	0e 94 a2 1c 	call	0x3944	; 0x3944 <get_MOTOR_PID>
    5554:	18 2f       	mov	r17, r24
    5556:	83 36       	cpi	r24, 0x63	; 99
    5558:	e9 f4       	brne	.+58     	; 0x5594 <set+0x2dc>
					sprintf(strbuf, fmt6, mtraddr - 31);
    555a:	8f 2d       	mov	r24, r15
    555c:	90 e0       	ldi	r25, 0x00	; 0
    555e:	4f 97       	sbiw	r24, 0x1f	; 31
    5560:	9f 93       	push	r25
    5562:	8f 93       	push	r24
    5564:	ce 01       	movw	r24, r28
    5566:	85 54       	subi	r24, 0x45	; 69
    5568:	9f 4f       	sbci	r25, 0xFF	; 255
    556a:	9f 93       	push	r25
    556c:	8f 93       	push	r24
    556e:	8a 5b       	subi	r24, 0xBA	; 186
    5570:	91 09       	sbc	r25, r1
    5572:	7c 01       	movw	r14, r24
    5574:	9f 93       	push	r25
    5576:	8f 93       	push	r24
    5578:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
					printError(ERR_MTR, strbuf);
    557c:	b7 01       	movw	r22, r14
    557e:	86 e3       	ldi	r24, 0x36	; 54
    5580:	91 e0       	ldi	r25, 0x01	; 1
    5582:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
					return(ERROR);
    5586:	0f 90       	pop	r0
    5588:	0f 90       	pop	r0
    558a:	0f 90       	pop	r0
    558c:	0f 90       	pop	r0
    558e:	0f 90       	pop	r0
    5590:	0f 90       	pop	r0
    5592:	69 c0       	rjmp	.+210    	; 0x5666 <set+0x3ae>
				}
				motorPID.minPos = PID_MINPOS;
    5594:	80 e8       	ldi	r24, 0x80	; 128
    5596:	98 e3       	ldi	r25, 0x38	; 56
    5598:	a1 e0       	ldi	r26, 0x01	; 1
    559a:	b0 e0       	ldi	r27, 0x00	; 0
    559c:	a9 96       	adiw	r28, 0x29	; 41
    559e:	8c af       	std	Y+60, r24	; 0x3c
    55a0:	9d af       	std	Y+61, r25	; 0x3d
    55a2:	ae af       	std	Y+62, r26	; 0x3e
    55a4:	bf af       	std	Y+63, r27	; 0x3f
    55a6:	a9 97       	sbiw	r28, 0x29	; 41
				motorPID.maxPos = PID_MAXPOS;
    55a8:	80 e0       	ldi	r24, 0x00	; 0
    55aa:	95 e3       	ldi	r25, 0x35	; 53
    55ac:	ac e0       	ldi	r26, 0x0C	; 12
    55ae:	b0 e0       	ldi	r27, 0x00	; 0
    55b0:	ad 96       	adiw	r28, 0x2d	; 45
    55b2:	8c af       	std	Y+60, r24	; 0x3c
    55b4:	9d af       	std	Y+61, r25	; 0x3d
    55b6:	ae af       	std	Y+62, r26	; 0x3e
    55b8:	bf af       	std	Y+63, r27	; 0x3f
    55ba:	ad 97       	sbiw	r28, 0x2d	; 45
				if (put_MOTOR_PID(mtraddr, motorPID) == ERROR) {
    55bc:	8d b7       	in	r24, 0x3d	; 61
    55be:	9e b7       	in	r25, 0x3e	; 62
    55c0:	80 97       	sbiw	r24, 0x20	; 32
    55c2:	8d bf       	out	0x3d, r24	; 61
    55c4:	9e bf       	out	0x3e, r25	; 62
    55c6:	ad b7       	in	r26, 0x3d	; 61
    55c8:	be b7       	in	r27, 0x3e	; 62
    55ca:	11 96       	adiw	r26, 0x01	; 1
    55cc:	80 e2       	ldi	r24, 0x20	; 32
    55ce:	fe 01       	movw	r30, r28
    55d0:	ef 5a       	subi	r30, 0xAF	; 175
    55d2:	ff 4f       	sbci	r31, 0xFF	; 255
    55d4:	01 90       	ld	r0, Z+
    55d6:	0d 92       	st	X+, r0
    55d8:	8a 95       	dec	r24
    55da:	e1 f7       	brne	.-8      	; 0x55d4 <set+0x31c>
    55dc:	8f 2d       	mov	r24, r15
    55de:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <put_MOTOR_PID>
    55e2:	18 2f       	mov	r17, r24
    55e4:	cd bf       	out	0x3d, r28	; 61
    55e6:	de bf       	out	0x3e, r29	; 62
    55e8:	13 36       	cpi	r17, 0x63	; 99
    55ea:	e9 f4       	brne	.+58     	; 0x5626 <set+0x36e>
					sprintf(strbuf, fmt7, mtraddr - 31);
    55ec:	8f 2d       	mov	r24, r15
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	4f 97       	sbiw	r24, 0x1f	; 31
    55f2:	9f 93       	push	r25
    55f4:	8f 93       	push	r24
    55f6:	ce 01       	movw	r24, r28
    55f8:	86 52       	subi	r24, 0x26	; 38
    55fa:	9f 4f       	sbci	r25, 0xFF	; 255
    55fc:	9f 93       	push	r25
    55fe:	8f 93       	push	r24
    5600:	89 5d       	subi	r24, 0xD9	; 217
    5602:	91 09       	sbc	r25, r1
    5604:	7c 01       	movw	r14, r24
    5606:	9f 93       	push	r25
    5608:	8f 93       	push	r24
    560a:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
					printError(ERR_MTR, strbuf);
    560e:	b7 01       	movw	r22, r14
    5610:	86 e3       	ldi	r24, 0x36	; 54
    5612:	91 e0       	ldi	r25, 0x01	; 1
    5614:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
					return(ERROR);
    5618:	0f 90       	pop	r0
    561a:	0f 90       	pop	r0
    561c:	0f 90       	pop	r0
    561e:	0f 90       	pop	r0
    5620:	0f 90       	pop	r0
    5622:	0f 90       	pop	r0
    5624:	20 c0       	rjmp	.+64     	; 0x5666 <set+0x3ae>
			}
			break;

		case 's':		// Safe motor encoder limits
		case 'l':
			for (i = 0; i < NMOTORS; i++) {
    5626:	0f 5f       	subi	r16, 0xFF	; 255
    5628:	01 c0       	rjmp	.+2      	; 0x562c <set+0x374>
//	const char fmt5[] = "set: encoder value out of range %ld";
	const char fmt6[] = "set: get_MOTOR_PID error on %c";
	const char fmt7[] = "set: put_MOTOR_PID error on %c";

	object = pcmd[cstack].cobject;
	switch(object) {
    562a:	00 e0       	ldi	r16, 0x00	; 0
			}
			break;

		case 's':		// Safe motor encoder limits
		case 'l':
			for (i = 0; i < NMOTORS; i++) {
    562c:	03 30       	cpi	r16, 0x03	; 3
    562e:	08 f4       	brcc	.+2      	; 0x5632 <set+0x37a>
    5630:	87 cf       	rjmp	.-242    	; 0x5540 <set+0x288>
			sprintf(strbuf, fmt4);
			printError(ERR_SET, strbuf);
			return(ERROR);
	}

	return(NOERROR);
    5632:	10 e0       	ldi	r17, 0x00	; 0
    5634:	18 c0       	rjmp	.+48     	; 0x5666 <set+0x3ae>
				}
			}
			break;

		default:
			sprintf(strbuf, fmt4);
    5636:	ce 01       	movw	r24, r28
    5638:	80 55       	subi	r24, 0x50	; 80
    563a:	9f 4f       	sbci	r25, 0xFF	; 255
    563c:	9f 93       	push	r25
    563e:	8f 93       	push	r24
    5640:	8e 01       	movw	r16, r28
    5642:	0f 5f       	subi	r16, 0xFF	; 255
    5644:	1f 4f       	sbci	r17, 0xFF	; 255
    5646:	1f 93       	push	r17
    5648:	0f 93       	push	r16
    564a:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
			printError(ERR_SET, strbuf);
    564e:	b8 01       	movw	r22, r16
    5650:	89 e5       	ldi	r24, 0x59	; 89
    5652:	92 e0       	ldi	r25, 0x02	; 2
    5654:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
			return(ERROR);
    5658:	0f 90       	pop	r0
    565a:	0f 90       	pop	r0
    565c:	0f 90       	pop	r0
    565e:	0f 90       	pop	r0
    5660:	13 e6       	ldi	r17, 0x63	; 99
    5662:	01 c0       	rjmp	.+2      	; 0x5666 <set+0x3ae>
	}

	return(NOERROR);
    5664:	10 e0       	ldi	r17, 0x00	; 0

}
    5666:	81 2f       	mov	r24, r17
    5668:	c8 50       	subi	r28, 0x08	; 8
    566a:	df 4f       	sbci	r29, 0xFF	; 255
    566c:	cd bf       	out	0x3d, r28	; 61
    566e:	de bf       	out	0x3e, r29	; 62
    5670:	df 91       	pop	r29
    5672:	cf 91       	pop	r28
    5674:	1f 91       	pop	r17
    5676:	0f 91       	pop	r16
    5678:	ff 90       	pop	r15
    567a:	ef 90       	pop	r14
    567c:	08 95       	ret

0000567e <get_temperature>:
	point for the actual devices.

	The signal is 1.5E-3 mV/K with a 1500 kOhm dropping resistor.
------------------------------------------------------------------------------*/
float get_temperature(uint8_t sensor)
{
    567e:	cf 93       	push	r28
    5680:	df 93       	push	r29
    5682:	00 d0       	rcall	.+0      	; 0x5684 <get_temperature+0x6>
    5684:	00 d0       	rcall	.+0      	; 0x5686 <get_temperature+0x8>
    5686:	cd b7       	in	r28, 0x3d	; 61
    5688:	de b7       	in	r29, 0x3e	; 62

	float temperature;

	switch (sensor) {
    568a:	83 30       	cpi	r24, 0x03	; 3
    568c:	18 f0       	brcs	.+6      	; 0x5694 <get_temperature+0x16>
    568e:	83 30       	cpi	r24, 0x03	; 3
    5690:	39 f0       	breq	.+14     	; 0x56a0 <get_temperature+0x22>
    5692:	0b c0       	rjmp	.+22     	; 0x56aa <get_temperature+0x2c>
		case 0:
		case 1:
		case 2:
			read_AD590(sensor, &temperature);
    5694:	be 01       	movw	r22, r28
    5696:	6f 5f       	subi	r22, 0xFF	; 255
    5698:	7f 4f       	sbci	r23, 0xFF	; 255
    569a:	0e 94 48 01 	call	0x290	; 0x290 <read_AD590>
			break;
    569e:	0d c0       	rjmp	.+26     	; 0x56ba <get_temperature+0x3c>

		case 3:
			read_MCP9808(&temperature);
    56a0:	ce 01       	movw	r24, r28
    56a2:	01 96       	adiw	r24, 0x01	; 1
    56a4:	0e 94 09 0b 	call	0x1612	; 0x1612 <read_MCP9808>
			break;
    56a8:	08 c0       	rjmp	.+16     	; 0x56ba <get_temperature+0x3c>

		default:
			temperature = BADFLOAT;
    56aa:	80 e0       	ldi	r24, 0x00	; 0
    56ac:	90 e8       	ldi	r25, 0x80	; 128
    56ae:	a6 e2       	ldi	r26, 0x26	; 38
    56b0:	b4 ec       	ldi	r27, 0xC4	; 196
    56b2:	89 83       	std	Y+1, r24	; 0x01
    56b4:	9a 83       	std	Y+2, r25	; 0x02
    56b6:	ab 83       	std	Y+3, r26	; 0x03
    56b8:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}

	if (temperature < -50.0) {
    56ba:	69 81       	ldd	r22, Y+1	; 0x01
    56bc:	7a 81       	ldd	r23, Y+2	; 0x02
    56be:	8b 81       	ldd	r24, Y+3	; 0x03
    56c0:	9c 81       	ldd	r25, Y+4	; 0x04
    56c2:	20 e0       	ldi	r18, 0x00	; 0
    56c4:	30 e0       	ldi	r19, 0x00	; 0
    56c6:	48 e4       	ldi	r20, 0x48	; 72
    56c8:	52 ec       	ldi	r21, 0xC2	; 194
    56ca:	0e 94 01 30 	call	0x6002	; 0x6002 <__cmpsf2>
    56ce:	88 23       	and	r24, r24
    56d0:	44 f4       	brge	.+16     	; 0x56e2 <get_temperature+0x64>
		temperature = BADFLOAT;
    56d2:	80 e0       	ldi	r24, 0x00	; 0
    56d4:	90 e8       	ldi	r25, 0x80	; 128
    56d6:	a6 e2       	ldi	r26, 0x26	; 38
    56d8:	b4 ec       	ldi	r27, 0xC4	; 196
    56da:	89 83       	std	Y+1, r24	; 0x01
    56dc:	9a 83       	std	Y+2, r25	; 0x02
    56de:	ab 83       	std	Y+3, r26	; 0x03
    56e0:	bc 83       	std	Y+4, r27	; 0x04
	}

	return(temperature);
    56e2:	69 81       	ldd	r22, Y+1	; 0x01
    56e4:	7a 81       	ldd	r23, Y+2	; 0x02
    56e6:	8b 81       	ldd	r24, Y+3	; 0x03
    56e8:	9c 81       	ldd	r25, Y+4	; 0x04

}
    56ea:	24 96       	adiw	r28, 0x04	; 4
    56ec:	cd bf       	out	0x3d, r28	; 61
    56ee:	de bf       	out	0x3e, r29	; 62
    56f0:	df 91       	pop	r29
    56f2:	cf 91       	pop	r28
    56f4:	08 95       	ret

000056f6 <testroutine>:
#include "initialize.h"
#include "commands.h"
#include "errors.h"

void testroutine(void)
{
    56f6:	0f 93       	push	r16
    56f8:	1f 93       	push	r17
    56fa:	cf 93       	push	r28
    56fc:	df 93       	push	r29
    56fe:	cd b7       	in	r28, 0x3d	; 61
    5700:	de b7       	in	r29, 0x3e	; 62
    5702:	c0 55       	subi	r28, 0x50	; 80
    5704:	d1 09       	sbc	r29, r1
    5706:	cd bf       	out	0x3d, r28	; 61
    5708:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	uint8_t i;

	i = unstick_MOTOR_LIMIT('c');
    570a:	83 e6       	ldi	r24, 0x63	; 99
    570c:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <unstick_MOTOR_LIMIT>
	sprintf(strbuf, "unstick_MOTOR_LIMIT returned %d", i);
    5710:	1f 92       	push	r1
    5712:	8f 93       	push	r24
    5714:	84 e6       	ldi	r24, 0x64	; 100
    5716:	9c eb       	ldi	r25, 0xBC	; 188
    5718:	9f 93       	push	r25
    571a:	8f 93       	push	r24
    571c:	8e 01       	movw	r16, r28
    571e:	0f 5f       	subi	r16, 0xFF	; 255
    5720:	1f 4f       	sbci	r17, 0xFF	; 255
    5722:	1f 93       	push	r17
    5724:	0f 93       	push	r16
    5726:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <sprintf>
	printLine(strbuf);
    572a:	c8 01       	movw	r24, r16
    572c:	0e 94 80 03 	call	0x700	; 0x700 <printLine>
	get_MOTOR_MAXCURRENT(130, &value);
---*/

//	stop_MOTOR(128);

    5730:	0f 90       	pop	r0
    5732:	0f 90       	pop	r0
    5734:	0f 90       	pop	r0
    5736:	0f 90       	pop	r0
    5738:	0f 90       	pop	r0
    573a:	0f 90       	pop	r0
    573c:	c0 5b       	subi	r28, 0xB0	; 176
    573e:	df 4f       	sbci	r29, 0xFF	; 255
    5740:	cd bf       	out	0x3d, r28	; 61
    5742:	de bf       	out	0x3e, r29	; 62
    5744:	df 91       	pop	r29
    5746:	cf 91       	pop	r28
    5748:	1f 91       	pop	r17
    574a:	0f 91       	pop	r16
    574c:	08 95       	ret

0000574e <init_RTC>:
	Turn off the TCB0 timer
------------------------------------------------------------------------------*/
void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    574e:	ac 01       	movw	r20, r24
    5750:	e0 e6       	ldi	r30, 0x60	; 96
    5752:	f0 e0       	ldi	r31, 0x00	; 0
    5754:	94 8d       	ldd	r25, Z+28	; 0x1c
    5756:	9e 7f       	andi	r25, 0xFE	; 254
    5758:	88 ed       	ldi	r24, 0xD8	; 216
    575a:	84 bf       	out	0x34, r24	; 52
    575c:	94 8f       	std	Z+28, r25	; 0x1c
    575e:	01 c0       	rjmp	.+2      	; 0x5762 <init_RTC+0x14>
    5760:	00 00       	nop
    5762:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    5766:	96 fd       	sbrc	r25, 6
    5768:	fb cf       	rjmp	.-10     	; 0x5760 <init_RTC+0x12>
    576a:	e0 e6       	ldi	r30, 0x60	; 96
    576c:	f0 e0       	ldi	r31, 0x00	; 0
    576e:	94 8d       	ldd	r25, Z+28	; 0x1c
    5770:	9b 7f       	andi	r25, 0xFB	; 251
    5772:	28 ed       	ldi	r18, 0xD8	; 216
    5774:	24 bf       	out	0x34, r18	; 52
    5776:	94 8f       	std	Z+28, r25	; 0x1c
    5778:	94 8d       	ldd	r25, Z+28	; 0x1c
    577a:	91 60       	ori	r25, 0x01	; 1
    577c:	24 bf       	out	0x34, r18	; 52
    577e:	94 8f       	std	Z+28, r25	; 0x1c
    5780:	01 c0       	rjmp	.+2      	; 0x5784 <init_RTC+0x36>
    5782:	00 00       	nop
    5784:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    5788:	91 11       	cpse	r25, r1
    578a:	fb cf       	rjmp	.-10     	; 0x5782 <init_RTC+0x34>
    578c:	e0 e4       	ldi	r30, 0x40	; 64
    578e:	f1 e0       	ldi	r31, 0x01	; 1
    5790:	42 87       	std	Z+10, r20	; 0x0a
    5792:	53 87       	std	Z+11, r21	; 0x0b
    5794:	82 e0       	ldi	r24, 0x02	; 2
    5796:	87 83       	std	Z+7, r24	; 0x07
    5798:	85 81       	ldd	r24, Z+5	; 0x05
    579a:	81 60       	ori	r24, 0x01	; 1
    579c:	85 83       	std	Z+5, r24	; 0x05
    579e:	81 eb       	ldi	r24, 0xB1	; 177
    57a0:	80 83       	st	Z, r24
    57a2:	82 81       	ldd	r24, Z+2	; 0x02
    57a4:	81 60       	ori	r24, 0x01	; 1
    57a6:	82 83       	std	Z+2, r24	; 0x02
    57a8:	81 e2       	ldi	r24, 0x21	; 33
    57aa:	80 8b       	std	Z+16, r24	; 0x10
    57ac:	81 e0       	ldi	r24, 0x01	; 1
    57ae:	82 8b       	std	Z+18, r24	; 0x12
    57b0:	08 95       	ret

000057b2 <__vector_3>:
    57b2:	1f 92       	push	r1
    57b4:	0f 92       	push	r0
    57b6:	0f b6       	in	r0, 0x3f	; 63
    57b8:	0f 92       	push	r0
    57ba:	11 24       	eor	r1, r1
    57bc:	8f 93       	push	r24
    57be:	9f 93       	push	r25
    57c0:	81 e0       	ldi	r24, 0x01	; 1
    57c2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>
    57c6:	80 91 18 2a 	lds	r24, 0x2A18	; 0x802a18 <timerOLED>
    57ca:	90 91 19 2a 	lds	r25, 0x2A19	; 0x802a19 <timerOLED+0x1>
    57ce:	01 96       	adiw	r24, 0x01	; 1
    57d0:	80 93 18 2a 	sts	0x2A18, r24	; 0x802a18 <timerOLED>
    57d4:	90 93 19 2a 	sts	0x2A19, r25	; 0x802a19 <timerOLED+0x1>
    57d8:	80 e2       	ldi	r24, 0x20	; 32
    57da:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>
    57de:	80 91 3c 2a 	lds	r24, 0x2A3C	; 0x802a3c <timerSAVEENCODER>
    57e2:	8f 5f       	subi	r24, 0xFF	; 255
    57e4:	80 93 3c 2a 	sts	0x2A3C, r24	; 0x802a3c <timerSAVEENCODER>
    57e8:	9f 91       	pop	r25
    57ea:	8f 91       	pop	r24
    57ec:	0f 90       	pop	r0
    57ee:	0f be       	out	0x3f, r0	; 63
    57f0:	0f 90       	pop	r0
    57f2:	1f 90       	pop	r1
    57f4:	18 95       	reti

000057f6 <__vector_4>:
    57f6:	1f 92       	push	r1
    57f8:	0f 92       	push	r0
    57fa:	0f b6       	in	r0, 0x3f	; 63
    57fc:	0f 92       	push	r0
    57fe:	11 24       	eor	r1, r1
    5800:	8f 93       	push	r24
    5802:	9f 93       	push	r25
    5804:	81 e0       	ldi	r24, 0x01	; 1
    5806:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7f4153>
    580a:	80 91 0b 28 	lds	r24, 0x280B	; 0x80280b <testTicks>
    580e:	90 91 0c 28 	lds	r25, 0x280C	; 0x80280c <testTicks+0x1>
    5812:	01 96       	adiw	r24, 0x01	; 1
    5814:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <testTicks>
    5818:	90 93 0c 28 	sts	0x280C, r25	; 0x80280c <testTicks+0x1>
    581c:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    5820:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    5824:	01 96       	adiw	r24, 0x01	; 1
    5826:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <USART0_ticks>
    582a:	90 93 04 28 	sts	0x2804, r25	; 0x802804 <USART0_ticks+0x1>
    582e:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    5832:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    5836:	01 96       	adiw	r24, 0x01	; 1
    5838:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <USART1_ticks>
    583c:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <USART1_ticks+0x1>
    5840:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <USART3_ticks>
    5844:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <USART3_ticks+0x1>
    5848:	01 96       	adiw	r24, 0x01	; 1
    584a:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <USART3_ticks>
    584e:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <USART3_ticks+0x1>
    5852:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    5856:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    585a:	01 96       	adiw	r24, 0x01	; 1
    585c:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <TWI_ticks>
    5860:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <TWI_ticks+0x1>
    5864:	9f 91       	pop	r25
    5866:	8f 91       	pop	r24
    5868:	0f 90       	pop	r0
    586a:	0f be       	out	0x3f, r0	; 63
    586c:	0f 90       	pop	r0
    586e:	1f 90       	pop	r1
    5870:	18 95       	reti

00005872 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    5872:	1f 92       	push	r1
    5874:	0f 92       	push	r0
    5876:	0f b6       	in	r0, 0x3f	; 63
    5878:	0f 92       	push	r0
    587a:	11 24       	eor	r1, r1
    587c:	8f 93       	push	r24

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    587e:	81 e0       	ldi	r24, 0x01	; 1
    5880:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>

    5884:	8f 91       	pop	r24
    5886:	0f 90       	pop	r0
    5888:	0f be       	out	0x3f, r0	; 63
    588a:	0f 90       	pop	r0
    588c:	1f 90       	pop	r1
    588e:	18 95       	reti

00005890 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    5890:	e0 ea       	ldi	r30, 0xA0	; 160
    5892:	f8 e0       	ldi	r31, 0x08	; 8
    5894:	8b e0       	ldi	r24, 0x0B	; 11
    5896:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    5898:	83 81       	ldd	r24, Z+3	; 0x03
    589a:	81 60       	ori	r24, 0x01	; 1
    589c:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    589e:	85 81       	ldd	r24, Z+5	; 0x05
    58a0:	81 60       	ori	r24, 0x01	; 1
    58a2:	85 83       	std	Z+5, r24	; 0x05
    58a4:	08 95       	ret

000058a6 <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    58a6:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    58aa:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    58ae:	0f c0       	rjmp	.+30     	; 0x58ce <read_TWI+0x28>
		asm("nop");
    58b0:	00 00       	nop
		if (TWI_ticks > 50) {					// Typically 0 ticks needed
    58b2:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    58b6:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    58ba:	c3 97       	sbiw	r24, 0x33	; 51
    58bc:	40 f0       	brcs	.+16     	; 0x58ce <read_TWI+0x28>
			printError(ERR_TWI, "read_TWI timeout");
    58be:	64 e8       	ldi	r22, 0x84	; 132
    58c0:	7c eb       	ldi	r23, 0xBC	; 188
    58c2:	81 e9       	ldi	r24, 0x91	; 145
    58c4:	91 e0       	ldi	r25, 0x01	; 1
    58c6:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
//			stop_TCB0();
			return(0xFF);
    58ca:	8f ef       	ldi	r24, 0xFF	; 255
    58cc:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    58ce:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    58d2:	88 23       	and	r24, r24
    58d4:	6c f7       	brge	.-38     	; 0x58b0 <read_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK
    58d6:	e0 ea       	ldi	r30, 0xA0	; 160
    58d8:	f8 e0       	ldi	r31, 0x08	; 8
    58da:	84 81       	ldd	r24, Z+4	; 0x04
    58dc:	8b 7f       	andi	r24, 0xFB	; 251
    58de:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;							// Next read
    58e0:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    58e2:	94 81       	ldd	r25, Z+4	; 0x04
    58e4:	92 60       	ori	r25, 0x02	; 2
    58e6:	94 83       	std	Z+4, r25	; 0x04

	return(data);

}
    58e8:	08 95       	ret

000058ea <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    58ea:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    58ee:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    58f2:	0f c0       	rjmp	.+30     	; 0x5912 <readlast_TWI+0x28>
		asm("nop");
    58f4:	00 00       	nop
		if (TWI_ticks > 50) {						// Typically 0 ticks needed
    58f6:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    58fa:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    58fe:	c3 97       	sbiw	r24, 0x33	; 51
    5900:	40 f0       	brcs	.+16     	; 0x5912 <readlast_TWI+0x28>
			printError(ERR_TWI, "readlast timeout");
    5902:	65 e9       	ldi	r22, 0x95	; 149
    5904:	7c eb       	ldi	r23, 0xBC	; 188
    5906:	81 e9       	ldi	r24, 0x91	; 145
    5908:	91 e0       	ldi	r25, 0x01	; 1
    590a:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
//			stop_TCB0();
			return(0xFF);
    590e:	8f ef       	ldi	r24, 0xFF	; 255
    5910:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    5912:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5916:	88 23       	and	r24, r24
    5918:	6c f7       	brge	.-38     	; 0x58f4 <readlast_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    591a:	e0 ea       	ldi	r30, 0xA0	; 160
    591c:	f8 e0       	ldi	r31, 0x08	; 8
    591e:	84 81       	ldd	r24, Z+4	; 0x04
    5920:	84 60       	ori	r24, 0x04	; 4
    5922:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    5924:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    5926:	08 95       	ret

00005928 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    5928:	61 30       	cpi	r22, 0x01	; 1
    592a:	39 f4       	brne	.+14     	; 0x593a <start_TWI+0x12>
		TWI0.MADDR = ((addr << 1) | 0x01);
    592c:	90 e0       	ldi	r25, 0x00	; 0
    592e:	88 0f       	add	r24, r24
    5930:	99 1f       	adc	r25, r25
    5932:	81 60       	ori	r24, 0x01	; 1
    5934:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    5938:	03 c0       	rjmp	.+6      	; 0x5940 <start_TWI+0x18>
	} else {
		TWI0.MADDR = (addr << 1);
    593a:	88 0f       	add	r24, r24
    593c:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

	TWI_ticks = 0;
    5940:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    5944:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    5948:	0f c0       	rjmp	.+30     	; 0x5968 <start_TWI+0x40>
		asm("nop");								// Wait for addr transmission
    594a:	00 00       	nop
		if (TWI_ticks > 50) {
    594c:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    5950:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    5954:	c3 97       	sbiw	r24, 0x33	; 51
    5956:	40 f0       	brcs	.+16     	; 0x5968 <start_TWI+0x40>
			printError(ERR_TWI, "TWI start timeout");
    5958:	66 ea       	ldi	r22, 0xA6	; 166
    595a:	7c eb       	ldi	r23, 0xBC	; 188
    595c:	81 e9       	ldi	r24, 0x91	; 145
    595e:	91 e0       	ldi	r25, 0x01	; 1
    5960:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
//			stop_TCB0();
			return(ERROR);
    5964:	83 e6       	ldi	r24, 0x63	; 99
    5966:	08 95       	ret
		TWI0.MADDR = (addr << 1);
	}

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    5968:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    596c:	80 7c       	andi	r24, 0xC0	; 192
    596e:	69 f3       	breq	.-38     	; 0x594a <start_TWI+0x22>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    5970:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5974:	82 ff       	sbrs	r24, 2
    5976:	08 c0       	rjmp	.+16     	; 0x5988 <start_TWI+0x60>
		printError(ERR_TWI, "TWI bus");
    5978:	68 eb       	ldi	r22, 0xB8	; 184
    597a:	7c eb       	ldi	r23, 0xBC	; 188
    597c:	81 e9       	ldi	r24, 0x91	; 145
    597e:	91 e0       	ldi	r25, 0x01	; 1
    5980:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		return(ERROR);
    5984:	83 e6       	ldi	r24, 0x63	; 99
    5986:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    5988:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    598c:	83 ff       	sbrs	r24, 3
    598e:	08 c0       	rjmp	.+16     	; 0x59a0 <start_TWI+0x78>
		printError(ERR_TWI, "TWI arbitration");
    5990:	60 ec       	ldi	r22, 0xC0	; 192
    5992:	7c eb       	ldi	r23, 0xBC	; 188
    5994:	81 e9       	ldi	r24, 0x91	; 145
    5996:	91 e0       	ldi	r25, 0x01	; 1
    5998:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		return(ERROR);
    599c:	83 e6       	ldi	r24, 0x63	; 99
    599e:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    59a0:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    59a4:	89 2f       	mov	r24, r25
    59a6:	80 71       	andi	r24, 0x10	; 16
    59a8:	94 ff       	sbrs	r25, 4
    59aa:	07 c0       	rjmp	.+14     	; 0x59ba <start_TWI+0x92>
		printError(ERR_TWI, "TWI no device responded");
    59ac:	60 ed       	ldi	r22, 0xD0	; 208
    59ae:	7c eb       	ldi	r23, 0xBC	; 188
    59b0:	81 e9       	ldi	r24, 0x91	; 145
    59b2:	91 e0       	ldi	r25, 0x01	; 1
    59b4:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		return(ERROR);
    59b8:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    59ba:	08 95       	ret

000059bc <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    59bc:	87 e0       	ldi	r24, 0x07	; 7
    59be:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    59c2:	08 95       	ret

000059c4 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
    59c4:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    59c8:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    59cc:	10 c0       	rjmp	.+32     	; 0x59ee <write_TWI+0x2a>
		asm("nop");
    59ce:	00 00       	nop
		if (TWI_ticks > 50) {
    59d0:	20 91 05 28 	lds	r18, 0x2805	; 0x802805 <TWI_ticks>
    59d4:	30 91 06 28 	lds	r19, 0x2806	; 0x802806 <TWI_ticks+0x1>
    59d8:	23 33       	cpi	r18, 0x33	; 51
    59da:	31 05       	cpc	r19, r1
    59dc:	40 f0       	brcs	.+16     	; 0x59ee <write_TWI+0x2a>
			printError(ERR_TWI, "write_TWI error1");
    59de:	68 ee       	ldi	r22, 0xE8	; 232
    59e0:	7c eb       	ldi	r23, 0xBC	; 188
    59e2:	81 e9       	ldi	r24, 0x91	; 145
    59e4:	91 e0       	ldi	r25, 0x01	; 1
    59e6:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
//			stop_TCB0();
			return(ERROR);
    59ea:	83 e6       	ldi	r24, 0x63	; 99
    59ec:	08 95       	ret
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    59ee:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    59f2:	96 ff       	sbrs	r25, 6
    59f4:	ec cf       	rjmp	.-40     	; 0x59ce <write_TWI+0xa>
			return(ERROR);
		}
	}
//	stop_TCB0();

	TWI0.MDATA = data;
    59f6:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	TWI_ticks = 0;
    59fa:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    59fe:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    5a02:	0f c0       	rjmp	.+30     	; 0x5a22 <write_TWI+0x5e>
		asm("nop");
    5a04:	00 00       	nop
		if (TWI_ticks > 50) {
    5a06:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    5a0a:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    5a0e:	c3 97       	sbiw	r24, 0x33	; 51
    5a10:	40 f0       	brcs	.+16     	; 0x5a22 <write_TWI+0x5e>
			printError(ERR_TWI, "write_TWI error2");
    5a12:	69 ef       	ldi	r22, 0xF9	; 249
    5a14:	7c eb       	ldi	r23, 0xBC	; 188
    5a16:	81 e9       	ldi	r24, 0x91	; 145
    5a18:	91 e0       	ldi	r25, 0x01	; 1
    5a1a:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
//			stop_TCB0();
			return(ERROR);
    5a1e:	83 e6       	ldi	r24, 0x63	; 99
    5a20:	08 95       	ret

	TWI0.MDATA = data;

	TWI_ticks = 0;
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    5a22:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5a26:	86 ff       	sbrs	r24, 6
    5a28:	ed cf       	rjmp	.-38     	; 0x5a04 <write_TWI+0x40>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    5a2a:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5a2e:	89 2f       	mov	r24, r25
    5a30:	80 71       	andi	r24, 0x10	; 16
    5a32:	94 ff       	sbrs	r25, 4
    5a34:	07 c0       	rjmp	.+14     	; 0x5a44 <write_TWI+0x80>
		printError(ERR_TWI, "ACK not received");
    5a36:	6a e0       	ldi	r22, 0x0A	; 10
    5a38:	7d eb       	ldi	r23, 0xBD	; 189
    5a3a:	81 e9       	ldi	r24, 0x91	; 145
    5a3c:	91 e0       	ldi	r25, 0x01	; 1
    5a3e:	0e 94 33 08 	call	0x1066	; 0x1066 <printError>
		return(ERROR);
    5a42:	83 e6       	ldi	r24, 0x63	; 99
	} else {
		return(NOERROR);
	}

}
    5a44:	08 95       	ret

00005a46 <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    5a46:	e0 e0       	ldi	r30, 0x00	; 0
    5a48:	f4 e0       	ldi	r31, 0x04	; 4
    5a4a:	81 e0       	ldi	r24, 0x01	; 1
    5a4c:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    5a4e:	81 83       	std	Z+1, r24	; 0x01
//	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    5a50:	e0 e0       	ldi	r30, 0x00	; 0
    5a52:	f8 e0       	ldi	r31, 0x08	; 8
    5a54:	24 e7       	ldi	r18, 0x74	; 116
    5a56:	30 e0       	ldi	r19, 0x00	; 0
    5a58:	20 87       	std	Z+8, r18	; 0x08
    5a5a:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    5a5c:	95 81       	ldd	r25, Z+5	; 0x05
    5a5e:	90 68       	ori	r25, 0x80	; 128
    5a60:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    5a62:	96 81       	ldd	r25, Z+6	; 0x06
    5a64:	90 64       	ori	r25, 0x40	; 64
    5a66:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    5a68:	96 81       	ldd	r25, Z+6	; 0x06
    5a6a:	90 68       	ori	r25, 0x80	; 128
    5a6c:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;					// Set up send/receive buffers
    5a6e:	10 92 49 2f 	sts	0x2F49, r1	; 0x802f49 <send0_buf+0xfe>
	send0_buf.tail = 0;
    5a72:	10 92 4a 2f 	sts	0x2F4A, r1	; 0x802f4a <send0_buf+0xff>
	send0_buf.done = YES;
    5a76:	80 93 4e 2f 	sts	0x2F4E, r24	; 0x802f4e <send0_buf+0x103>
	recv0_buf.head = 0;
    5a7a:	10 92 45 2e 	sts	0x2E45, r1	; 0x802e45 <recv0_buf+0xfe>
	recv0_buf.tail = 0;
    5a7e:	10 92 46 2e 	sts	0x2E46, r1	; 0x802e46 <recv0_buf+0xff>
	recv0_buf.data[0] = '\0';
    5a82:	10 92 47 2d 	sts	0x2D47, r1	; 0x802d47 <recv0_buf>
	recv0_buf.length = 0;
    5a86:	10 92 48 2e 	sts	0x2E48, r1	; 0x802e48 <recv0_buf+0x101>
	recv0_buf.done = NO;
    5a8a:	10 92 4a 2e 	sts	0x2E4A, r1	; 0x802e4a <recv0_buf+0x103>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    5a8e:	e0 e4       	ldi	r30, 0x40	; 64
    5a90:	f4 e0       	ldi	r31, 0x04	; 4
    5a92:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    5a94:	81 83       	std	Z+1, r24	; 0x01
//	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    5a96:	e0 e2       	ldi	r30, 0x20	; 32
    5a98:	f8 e0       	ldi	r31, 0x08	; 8
    5a9a:	2d e6       	ldi	r18, 0x6D	; 109
    5a9c:	35 e0       	ldi	r19, 0x05	; 5
    5a9e:	20 87       	std	Z+8, r18	; 0x08
    5aa0:	31 87       	std	Z+9, r19	; 0x09
//	USART1.BAUD = (uint16_t) USART_BAUD_RATE(57600);
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    5aa2:	95 81       	ldd	r25, Z+5	; 0x05
    5aa4:	90 68       	ori	r25, 0x80	; 128
    5aa6:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    5aa8:	96 81       	ldd	r25, Z+6	; 0x06
    5aaa:	90 64       	ori	r25, 0x40	; 64
    5aac:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    5aae:	96 81       	ldd	r25, Z+6	; 0x06
    5ab0:	90 68       	ori	r25, 0x80	; 128
    5ab2:	96 83       	std	Z+6, r25	; 0x06

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    5ab4:	e0 e2       	ldi	r30, 0x20	; 32
    5ab6:	f4 e0       	ldi	r31, 0x04	; 4
    5ab8:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    5aba:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    5abc:	e0 e6       	ldi	r30, 0x60	; 96
    5abe:	f8 e0       	ldi	r31, 0x08	; 8
    5ac0:	20 87       	std	Z+8, r18	; 0x08
    5ac2:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    5ac4:	96 81       	ldd	r25, Z+6	; 0x06
    5ac6:	90 64       	ori	r25, 0x40	; 64
    5ac8:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    5aca:	96 81       	ldd	r25, Z+6	; 0x06
    5acc:	90 68       	ori	r25, 0x80	; 128
    5ace:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    5ad0:	80 93 56 31 	sts	0x3156, r24	; 0x803156 <send3_buf+0x103>
	recv3_buf.done = NO;
    5ad4:	10 92 52 30 	sts	0x3052, r1	; 0x803052 <recv3_buf+0x103>
    5ad8:	08 95       	ret

00005ada <send_USART>:
		"transmit data register empty" interrupt (DREIE). The USARTn_DRE_vect
		puts the bytes into the transmit register until the tail catches up
		to the head of the circular buffer.
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    5ada:	0f 93       	push	r16
    5adc:	1f 93       	push	r17
    5ade:	cf 93       	push	r28
    5ae0:	df 93       	push	r29
    5ae2:	eb 01       	movw	r28, r22
    5ae4:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    5ae6:	81 30       	cpi	r24, 0x01	; 1
    5ae8:	b1 f1       	breq	.+108    	; 0x5b56 <send_USART+0x7c>
    5aea:	20 f0       	brcs	.+8      	; 0x5af4 <send_USART+0x1a>
    5aec:	83 30       	cpi	r24, 0x03	; 3
    5aee:	09 f4       	brne	.+2      	; 0x5af2 <send_USART+0x18>
    5af0:	81 c0       	rjmp	.+258    	; 0x5bf4 <send_USART+0x11a>
    5af2:	88 c0       	rjmp	.+272    	; 0x5c04 <send_USART+0x12a>
		case 0:
			send0_buf.done = NO;
    5af4:	10 92 4e 2f 	sts	0x2F4E, r1	; 0x802f4e <send0_buf+0x103>
			for (i = 0; i < nbytes; i++) {
    5af8:	20 e0       	ldi	r18, 0x00	; 0
    5afa:	11 c0       	rjmp	.+34     	; 0x5b1e <send_USART+0x44>
				send0_buf.data[send0_buf.head] = *data++;
    5afc:	e9 e4       	ldi	r30, 0x49	; 73
    5afe:	ff e2       	ldi	r31, 0x2F	; 47
    5b00:	80 81       	ld	r24, Z
    5b02:	90 e0       	ldi	r25, 0x00	; 0
    5b04:	38 81       	ld	r19, Y
    5b06:	dc 01       	movw	r26, r24
    5b08:	a5 5b       	subi	r26, 0xB5	; 181
    5b0a:	b1 4d       	sbci	r27, 0xD1	; 209
    5b0c:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    5b0e:	01 96       	adiw	r24, 0x01	; 1
    5b10:	6e ef       	ldi	r22, 0xFE	; 254
    5b12:	70 e0       	ldi	r23, 0x00	; 0
    5b14:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <__divmodhi4>
    5b18:	80 83       	st	Z, r24
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    5b1a:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    5b1c:	21 96       	adiw	r28, 0x01	; 1
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    5b1e:	21 17       	cp	r18, r17
    5b20:	68 f3       	brcs	.-38     	; 0x5afc <send_USART+0x22>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    5b22:	e0 e0       	ldi	r30, 0x00	; 0
    5b24:	f8 e0       	ldi	r31, 0x08	; 8
    5b26:	85 81       	ldd	r24, Z+5	; 0x05
    5b28:	80 62       	ori	r24, 0x20	; 32
    5b2a:	85 83       	std	Z+5, r24	; 0x05
			USART0_ticks = 0;
    5b2c:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <USART0_ticks>
    5b30:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <USART0_ticks+0x1>
			while (send0_buf.done == NO) {
    5b34:	0b c0       	rjmp	.+22     	; 0x5b4c <send_USART+0x72>
				if (USART0_ticks > 100) {				// 1 second enough?
    5b36:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    5b3a:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    5b3e:	85 36       	cpi	r24, 0x65	; 101
    5b40:	91 05       	cpc	r25, r1
    5b42:	20 f0       	brcs	.+8      	; 0x5b4c <send_USART+0x72>
					send0_buf.done = YES;
    5b44:	81 e0       	ldi	r24, 0x01	; 1
    5b46:	80 93 4e 2f 	sts	0x2F4E, r24	; 0x802f4e <send0_buf+0x103>
					return;
    5b4a:	5c c0       	rjmp	.+184    	; 0x5c04 <send_USART+0x12a>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			USART0_ticks = 0;
			while (send0_buf.done == NO) {
    5b4c:	80 91 4e 2f 	lds	r24, 0x2F4E	; 0x802f4e <send0_buf+0x103>
    5b50:	88 23       	and	r24, r24
    5b52:	89 f3       	breq	.-30     	; 0x5b36 <send_USART+0x5c>
    5b54:	57 c0       	rjmp	.+174    	; 0x5c04 <send_USART+0x12a>
				}
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
    5b56:	64 2f       	mov	r22, r20
    5b58:	70 e0       	ldi	r23, 0x00	; 0
    5b5a:	ce 01       	movw	r24, r28
    5b5c:	0e 94 ba 18 	call	0x3174	; 0x3174 <crc16>
    5b60:	48 2f       	mov	r20, r24
    5b62:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    5b64:	20 e0       	ldi	r18, 0x00	; 0
    5b66:	11 c0       	rjmp	.+34     	; 0x5b8a <send_USART+0xb0>
				send1_buf.data[send1_buf.head] = *data++;
    5b68:	e5 e5       	ldi	r30, 0x55	; 85
    5b6a:	f2 e3       	ldi	r31, 0x32	; 50
    5b6c:	80 81       	ld	r24, Z
    5b6e:	90 e0       	ldi	r25, 0x00	; 0
    5b70:	38 81       	ld	r19, Y
    5b72:	dc 01       	movw	r26, r24
    5b74:	a9 5a       	subi	r26, 0xA9	; 169
    5b76:	be 4c       	sbci	r27, 0xCE	; 206
    5b78:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    5b7a:	01 96       	adiw	r24, 0x01	; 1
    5b7c:	6e ef       	ldi	r22, 0xFE	; 254
    5b7e:	70 e0       	ldi	r23, 0x00	; 0
    5b80:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <__divmodhi4>
    5b84:	80 83       	st	Z, r24
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    5b86:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    5b88:	21 96       	adiw	r28, 0x01	; 1
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    5b8a:	21 17       	cp	r18, r17
    5b8c:	68 f3       	brcs	.-38     	; 0x5b68 <send_USART+0x8e>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    5b8e:	e5 e5       	ldi	r30, 0x55	; 85
    5b90:	f2 e3       	ldi	r31, 0x32	; 50
    5b92:	80 81       	ld	r24, Z
    5b94:	90 e0       	ldi	r25, 0x00	; 0
    5b96:	dc 01       	movw	r26, r24
    5b98:	a9 5a       	subi	r26, 0xA9	; 169
    5b9a:	be 4c       	sbci	r27, 0xCE	; 206
    5b9c:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    5b9e:	01 96       	adiw	r24, 0x01	; 1
    5ba0:	2e ef       	ldi	r18, 0xFE	; 254
    5ba2:	30 e0       	ldi	r19, 0x00	; 0
    5ba4:	b9 01       	movw	r22, r18
    5ba6:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    5baa:	90 e0       	ldi	r25, 0x00	; 0
    5bac:	dc 01       	movw	r26, r24
    5bae:	a9 5a       	subi	r26, 0xA9	; 169
    5bb0:	be 4c       	sbci	r27, 0xCE	; 206
    5bb2:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    5bb4:	01 96       	adiw	r24, 0x01	; 1
    5bb6:	b9 01       	movw	r22, r18
    5bb8:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <__divmodhi4>
    5bbc:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    5bbe:	1e 5f       	subi	r17, 0xFE	; 254
    5bc0:	10 93 57 32 	sts	0x3257, r17	; 0x803257 <send1_buf+0x100>
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    5bc4:	e0 e2       	ldi	r30, 0x20	; 32
    5bc6:	f8 e0       	ldi	r31, 0x08	; 8
    5bc8:	85 81       	ldd	r24, Z+5	; 0x05
    5bca:	80 62       	ori	r24, 0x20	; 32
    5bcc:	85 83       	std	Z+5, r24	; 0x05
			break;
    5bce:	1a c0       	rjmp	.+52     	; 0x5c04 <send_USART+0x12a>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    5bd0:	e1 e5       	ldi	r30, 0x51	; 81
    5bd2:	f1 e3       	ldi	r31, 0x31	; 49
    5bd4:	80 81       	ld	r24, Z
    5bd6:	90 e0       	ldi	r25, 0x00	; 0
    5bd8:	38 81       	ld	r19, Y
    5bda:	dc 01       	movw	r26, r24
    5bdc:	ad 5a       	subi	r26, 0xAD	; 173
    5bde:	bf 4c       	sbci	r27, 0xCF	; 207
    5be0:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    5be2:	01 96       	adiw	r24, 0x01	; 1
    5be4:	6e ef       	ldi	r22, 0xFE	; 254
    5be6:	70 e0       	ldi	r23, 0x00	; 0
    5be8:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <__divmodhi4>
    5bec:	80 83       	st	Z, r24
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    5bee:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    5bf0:	21 96       	adiw	r28, 0x01	; 1
    5bf2:	01 c0       	rjmp	.+2      	; 0x5bf6 <send_USART+0x11c>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    5bf4:	20 e0       	ldi	r18, 0x00	; 0
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    5bf6:	21 17       	cp	r18, r17
    5bf8:	58 f3       	brcs	.-42     	; 0x5bd0 <send_USART+0xf6>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    5bfa:	e0 e6       	ldi	r30, 0x60	; 96
    5bfc:	f8 e0       	ldi	r31, 0x08	; 8
    5bfe:	85 81       	ldd	r24, Z+5	; 0x05
    5c00:	80 62       	ori	r24, 0x20	; 32
    5c02:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    5c04:	df 91       	pop	r29
    5c06:	cf 91       	pop	r28
    5c08:	1f 91       	pop	r17
    5c0a:	0f 91       	pop	r16
    5c0c:	08 95       	ret

00005c0e <send_USART1>:

void send_USART1(uint8_t *data, uint8_t nbytes)
{
    5c0e:	dc 01       	movw	r26, r24
	char strbuf[80];
	sprintf(strbuf, " sending nbytes=%d", nbytes);
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
    5c10:	10 92 42 2c 	sts	0x2C42, r1	; 0x802c42 <ser_send1+0xff>
	ser_send1.n2xfr = nbytes;
    5c14:	60 93 41 2c 	sts	0x2C41, r22	; 0x802c41 <ser_send1+0xfe>
	for (i = 0; i < nbytes; i++) {
    5c18:	90 e0       	ldi	r25, 0x00	; 0
    5c1a:	08 c0       	rjmp	.+16     	; 0x5c2c <send_USART1+0x1e>
		ser_send1.data[i] = *data++;
    5c1c:	e9 2f       	mov	r30, r25
    5c1e:	f0 e0       	ldi	r31, 0x00	; 0
    5c20:	8c 91       	ld	r24, X
    5c22:	ed 5b       	subi	r30, 0xBD	; 189
    5c24:	f4 4d       	sbci	r31, 0xD4	; 212
    5c26:	80 83       	st	Z, r24
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
	ser_send1.n2xfr = nbytes;
	for (i = 0; i < nbytes; i++) {
    5c28:	9f 5f       	subi	r25, 0xFF	; 255
		ser_send1.data[i] = *data++;
    5c2a:	11 96       	adiw	r26, 0x01	; 1
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
	ser_send1.n2xfr = nbytes;
	for (i = 0; i < nbytes; i++) {
    5c2c:	96 17       	cp	r25, r22
    5c2e:	b0 f3       	brcs	.-20     	; 0x5c1c <send_USART1+0xe>
		sprintf(strbuf, " n=%d: %d (0x%02X)", i, ser_send1.data[i], ser_send1.data[i]);
		printLine(strbuf);
#endif
	}

	USART1.CTRLA |= USART_DREIE_bm;		// Enable DRE interrupts
    5c30:	e0 e2       	ldi	r30, 0x20	; 32
    5c32:	f8 e0       	ldi	r31, 0x08	; 8
    5c34:	85 81       	ldd	r24, Z+5	; 0x05
    5c36:	80 62       	ori	r24, 0x20	; 32
    5c38:	85 83       	std	Z+5, r24	; 0x05
    5c3a:	08 95       	ret

00005c3c <__vector_26>:
/*------------------------------------------------------------------------------
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    5c3c:	1f 92       	push	r1
    5c3e:	0f 92       	push	r0
    5c40:	0f b6       	in	r0, 0x3f	; 63
    5c42:	0f 92       	push	r0
    5c44:	11 24       	eor	r1, r1
    5c46:	8f 93       	push	r24
    5c48:	af 93       	push	r26
    5c4a:	bf 93       	push	r27
    5c4c:	ef 93       	push	r30
    5c4e:	ff 93       	push	r31

	ser_recv1.data[ser_recv1.nxfrd++] = USART1.RXDATAL;
    5c50:	a2 e4       	ldi	r26, 0x42	; 66
    5c52:	bb e2       	ldi	r27, 0x2B	; 43
    5c54:	ec 91       	ld	r30, X
    5c56:	81 e0       	ldi	r24, 0x01	; 1
    5c58:	8e 0f       	add	r24, r30
    5c5a:	8c 93       	st	X, r24
    5c5c:	f0 e0       	ldi	r31, 0x00	; 0
    5c5e:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
    5c62:	ed 5b       	subi	r30, 0xBD	; 189
    5c64:	f5 4d       	sbci	r31, 0xD5	; 213
    5c66:	80 83       	st	Z, r24

}
    5c68:	ff 91       	pop	r31
    5c6a:	ef 91       	pop	r30
    5c6c:	bf 91       	pop	r27
    5c6e:	af 91       	pop	r26
    5c70:	8f 91       	pop	r24
    5c72:	0f 90       	pop	r0
    5c74:	0f be       	out	0x3f, r0	; 63
    5c76:	0f 90       	pop	r0
    5c78:	1f 90       	pop	r1
    5c7a:	18 95       	reti

00005c7c <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    5c7c:	1f 92       	push	r1
    5c7e:	0f 92       	push	r0
    5c80:	0f b6       	in	r0, 0x3f	; 63
    5c82:	0f 92       	push	r0
    5c84:	11 24       	eor	r1, r1
    5c86:	8f 93       	push	r24
    5c88:	9f 93       	push	r25
    5c8a:	af 93       	push	r26
    5c8c:	bf 93       	push	r27
    5c8e:	cf 93       	push	r28
    5c90:	df 93       	push	r29
    5c92:	ef 93       	push	r30
    5c94:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    5c96:	a0 e2       	ldi	r26, 0x20	; 32
    5c98:	b8 e0       	ldi	r27, 0x08	; 8
    5c9a:	15 96       	adiw	r26, 0x05	; 5
    5c9c:	8c 91       	ld	r24, X
    5c9e:	15 97       	sbiw	r26, 0x05	; 5
    5ca0:	8f 7d       	andi	r24, 0xDF	; 223
    5ca2:	15 96       	adiw	r26, 0x05	; 5
    5ca4:	8c 93       	st	X, r24
    5ca6:	15 97       	sbiw	r26, 0x05	; 5
	USART1.TXDATAL = ser_send1.data[ser_send1.nxfrd++];
    5ca8:	c2 e4       	ldi	r28, 0x42	; 66
    5caa:	dc e2       	ldi	r29, 0x2C	; 44
    5cac:	e8 81       	ld	r30, Y
    5cae:	81 e0       	ldi	r24, 0x01	; 1
    5cb0:	8e 0f       	add	r24, r30
    5cb2:	88 83       	st	Y, r24
    5cb4:	f0 e0       	ldi	r31, 0x00	; 0
    5cb6:	ed 5b       	subi	r30, 0xBD	; 189
    5cb8:	f4 4d       	sbci	r31, 0xD4	; 212
    5cba:	90 81       	ld	r25, Z
    5cbc:	12 96       	adiw	r26, 0x02	; 2
    5cbe:	9c 93       	st	X, r25
	if (ser_send1.nxfrd < ser_send1.n2xfr) {
    5cc0:	90 91 41 2c 	lds	r25, 0x2C41	; 0x802c41 <ser_send1+0xfe>
    5cc4:	89 17       	cp	r24, r25
    5cc6:	28 f4       	brcc	.+10     	; 0x5cd2 <__vector_27+0x56>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts	
    5cc8:	e0 e2       	ldi	r30, 0x20	; 32
    5cca:	f8 e0       	ldi	r31, 0x08	; 8
    5ccc:	85 81       	ldd	r24, Z+5	; 0x05
    5cce:	80 62       	ori	r24, 0x20	; 32
    5cd0:	85 83       	std	Z+5, r24	; 0x05
	}

}
    5cd2:	ff 91       	pop	r31
    5cd4:	ef 91       	pop	r30
    5cd6:	df 91       	pop	r29
    5cd8:	cf 91       	pop	r28
    5cda:	bf 91       	pop	r27
    5cdc:	af 91       	pop	r26
    5cde:	9f 91       	pop	r25
    5ce0:	8f 91       	pop	r24
    5ce2:	0f 90       	pop	r0
    5ce4:	0f be       	out	0x3f, r0	; 63
    5ce6:	0f 90       	pop	r0
    5ce8:	1f 90       	pop	r1
    5cea:	18 95       	reti

00005cec <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    5cec:	1f 92       	push	r1
    5cee:	0f 92       	push	r0
    5cf0:	0f b6       	in	r0, 0x3f	; 63
    5cf2:	0f 92       	push	r0
    5cf4:	11 24       	eor	r1, r1
    5cf6:	5f 93       	push	r21
    5cf8:	6f 93       	push	r22
    5cfa:	7f 93       	push	r23
    5cfc:	8f 93       	push	r24
    5cfe:	9f 93       	push	r25
    5d00:	af 93       	push	r26
    5d02:	bf 93       	push	r27
    5d04:	ef 93       	push	r30
    5d06:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    5d08:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if (recv0_buf.length < (BUFSIZE-1)) {		// BUFSIZE-1 to make room for the terminating \0
    5d0c:	80 91 48 2e 	lds	r24, 0x2E48	; 0x802e48 <recv0_buf+0x101>
    5d10:	8d 3f       	cpi	r24, 0xFD	; 253
    5d12:	10 f5       	brcc	.+68     	; 0x5d58 <__vector_17+0x6c>
//		c = USART0.RXDATAL;
		if ((char) c == '\r') {
    5d14:	9d 30       	cpi	r25, 0x0D	; 13
    5d16:	51 f4       	brne	.+20     	; 0x5d2c <__vector_17+0x40>
			recv0_buf.done = YES;
    5d18:	81 e0       	ldi	r24, 0x01	; 1
    5d1a:	80 93 4a 2e 	sts	0x2E4A, r24	; 0x802e4a <recv0_buf+0x103>
			recv0_buf.data[recv0_buf.head] = '\0';
    5d1e:	e0 91 45 2e 	lds	r30, 0x2E45	; 0x802e45 <recv0_buf+0xfe>
    5d22:	f0 e0       	ldi	r31, 0x00	; 0
    5d24:	e9 5b       	subi	r30, 0xB9	; 185
    5d26:	f2 4d       	sbci	r31, 0xD2	; 210
    5d28:	10 82       	st	Z, r1
    5d2a:	06 c0       	rjmp	.+12     	; 0x5d38 <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    5d2c:	e0 91 45 2e 	lds	r30, 0x2E45	; 0x802e45 <recv0_buf+0xfe>
    5d30:	f0 e0       	ldi	r31, 0x00	; 0
    5d32:	e9 5b       	subi	r30, 0xB9	; 185
    5d34:	f2 4d       	sbci	r31, 0xD2	; 210
    5d36:	90 83       	st	Z, r25
		}
		recv0_buf.length++;
    5d38:	e8 e4       	ldi	r30, 0x48	; 72
    5d3a:	fe e2       	ldi	r31, 0x2E	; 46
    5d3c:	80 81       	ld	r24, Z
    5d3e:	8f 5f       	subi	r24, 0xFF	; 255
    5d40:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    5d42:	e5 e4       	ldi	r30, 0x45	; 69
    5d44:	fe e2       	ldi	r31, 0x2E	; 46
    5d46:	80 81       	ld	r24, Z
    5d48:	90 e0       	ldi	r25, 0x00	; 0
    5d4a:	01 96       	adiw	r24, 0x01	; 1
    5d4c:	6e ef       	ldi	r22, 0xFE	; 254
    5d4e:	70 e0       	ldi	r23, 0x00	; 0
    5d50:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <__divmodhi4>
    5d54:	80 83       	st	Z, r24
    5d56:	0a c0       	rjmp	.+20     	; 0x5d6c <__vector_17+0x80>
	} else {
		recv0_buf.head = 0;
    5d58:	10 92 45 2e 	sts	0x2E45, r1	; 0x802e45 <recv0_buf+0xfe>
		recv0_buf.tail = 0;
    5d5c:	10 92 46 2e 	sts	0x2E46, r1	; 0x802e46 <recv0_buf+0xff>
		recv0_buf.data[0] = '\0';
    5d60:	10 92 47 2d 	sts	0x2D47, r1	; 0x802d47 <recv0_buf>
		recv0_buf.length = 0;
    5d64:	10 92 48 2e 	sts	0x2E48, r1	; 0x802e48 <recv0_buf+0x101>
		recv0_buf.done = NO;
    5d68:	10 92 4a 2e 	sts	0x2E4A, r1	; 0x802e4a <recv0_buf+0x103>
	}
}
    5d6c:	ff 91       	pop	r31
    5d6e:	ef 91       	pop	r30
    5d70:	bf 91       	pop	r27
    5d72:	af 91       	pop	r26
    5d74:	9f 91       	pop	r25
    5d76:	8f 91       	pop	r24
    5d78:	7f 91       	pop	r23
    5d7a:	6f 91       	pop	r22
    5d7c:	5f 91       	pop	r21
    5d7e:	0f 90       	pop	r0
    5d80:	0f be       	out	0x3f, r0	; 63
    5d82:	0f 90       	pop	r0
    5d84:	1f 90       	pop	r1
    5d86:	18 95       	reti

00005d88 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    5d88:	1f 92       	push	r1
    5d8a:	0f 92       	push	r0
    5d8c:	0f b6       	in	r0, 0x3f	; 63
    5d8e:	0f 92       	push	r0
    5d90:	11 24       	eor	r1, r1
    5d92:	2f 93       	push	r18
    5d94:	8f 93       	push	r24
    5d96:	9f 93       	push	r25
    5d98:	ef 93       	push	r30
    5d9a:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    5d9c:	e0 e0       	ldi	r30, 0x00	; 0
    5d9e:	f8 e0       	ldi	r31, 0x08	; 8
    5da0:	85 81       	ldd	r24, Z+5	; 0x05
    5da2:	8f 7d       	andi	r24, 0xDF	; 223
    5da4:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    5da6:	80 91 49 2f 	lds	r24, 0x2F49	; 0x802f49 <send0_buf+0xfe>
    5daa:	e0 91 4a 2f 	lds	r30, 0x2F4A	; 0x802f4a <send0_buf+0xff>
    5dae:	8e 17       	cp	r24, r30
    5db0:	d1 f0       	breq	.+52     	; 0x5de6 <__vector_18+0x5e>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    5db2:	81 e0       	ldi	r24, 0x01	; 1
    5db4:	8e 0f       	add	r24, r30
    5db6:	80 93 4a 2f 	sts	0x2F4A, r24	; 0x802f4a <send0_buf+0xff>
    5dba:	f0 e0       	ldi	r31, 0x00	; 0
    5dbc:	e5 5b       	subi	r30, 0xB5	; 181
    5dbe:	f1 4d       	sbci	r31, 0xD1	; 209
    5dc0:	90 81       	ld	r25, Z
    5dc2:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    5dc6:	91 e0       	ldi	r25, 0x01	; 1
    5dc8:	8e 3f       	cpi	r24, 0xFE	; 254
    5dca:	08 f4       	brcc	.+2      	; 0x5dce <__vector_18+0x46>
    5dcc:	90 e0       	ldi	r25, 0x00	; 0
    5dce:	91 95       	neg	r25
    5dd0:	29 2f       	mov	r18, r25
    5dd2:	22 0f       	add	r18, r18
    5dd4:	82 1b       	sub	r24, r18
    5dd6:	80 93 4a 2f 	sts	0x2F4A, r24	; 0x802f4a <send0_buf+0xff>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    5dda:	e0 e0       	ldi	r30, 0x00	; 0
    5ddc:	f8 e0       	ldi	r31, 0x08	; 8
    5dde:	85 81       	ldd	r24, Z+5	; 0x05
    5de0:	80 62       	ori	r24, 0x20	; 32
    5de2:	85 83       	std	Z+5, r24	; 0x05
    5de4:	03 c0       	rjmp	.+6      	; 0x5dec <__vector_18+0x64>
	} else {
		send0_buf.done = YES;
    5de6:	81 e0       	ldi	r24, 0x01	; 1
    5de8:	80 93 4e 2f 	sts	0x2F4E, r24	; 0x802f4e <send0_buf+0x103>
	}

}
    5dec:	ff 91       	pop	r31
    5dee:	ef 91       	pop	r30
    5df0:	9f 91       	pop	r25
    5df2:	8f 91       	pop	r24
    5df4:	2f 91       	pop	r18
    5df6:	0f 90       	pop	r0
    5df8:	0f be       	out	0x3f, r0	; 63
    5dfa:	0f 90       	pop	r0
    5dfc:	1f 90       	pop	r1
    5dfe:	18 95       	reti

00005e00 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    5e00:	1f 92       	push	r1
    5e02:	0f 92       	push	r0
    5e04:	0f b6       	in	r0, 0x3f	; 63
    5e06:	0f 92       	push	r0
    5e08:	11 24       	eor	r1, r1
    5e0a:	8f 93       	push	r24
    5e0c:	9f 93       	push	r25
    5e0e:	af 93       	push	r26
    5e10:	bf 93       	push	r27
    5e12:	ef 93       	push	r30
    5e14:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    5e16:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    5e1a:	8d 30       	cpi	r24, 0x0D	; 13
    5e1c:	21 f0       	breq	.+8      	; 0x5e26 <__vector_37+0x26>
    5e1e:	e0 91 51 30 	lds	r30, 0x3051	; 0x803051 <recv3_buf+0x102>
    5e22:	ed 3f       	cpi	r30, 0xFD	; 253
    5e24:	78 f0       	brcs	.+30     	; 0x5e44 <__vector_37+0x44>
		recv3_buf.done = YES;
    5e26:	81 e0       	ldi	r24, 0x01	; 1
    5e28:	80 93 52 30 	sts	0x3052, r24	; 0x803052 <recv3_buf+0x103>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    5e2c:	a1 e5       	ldi	r26, 0x51	; 81
    5e2e:	b0 e3       	ldi	r27, 0x30	; 48
    5e30:	8c 91       	ld	r24, X
    5e32:	e8 2f       	mov	r30, r24
    5e34:	f0 e0       	ldi	r31, 0x00	; 0
    5e36:	e1 5b       	subi	r30, 0xB1	; 177
    5e38:	f0 4d       	sbci	r31, 0xD0	; 208
    5e3a:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    5e3c:	80 93 4f 30 	sts	0x304F, r24	; 0x80304f <recv3_buf+0x100>
		recv3_buf.nxfrd = 0;
    5e40:	1c 92       	st	X, r1
		return;
    5e42:	08 c0       	rjmp	.+16     	; 0x5e54 <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    5e44:	91 e0       	ldi	r25, 0x01	; 1
    5e46:	9e 0f       	add	r25, r30
    5e48:	90 93 51 30 	sts	0x3051, r25	; 0x803051 <recv3_buf+0x102>
    5e4c:	f0 e0       	ldi	r31, 0x00	; 0
    5e4e:	e1 5b       	subi	r30, 0xB1	; 177
    5e50:	f0 4d       	sbci	r31, 0xD0	; 208
    5e52:	80 83       	st	Z, r24
	}

}
    5e54:	ff 91       	pop	r31
    5e56:	ef 91       	pop	r30
    5e58:	bf 91       	pop	r27
    5e5a:	af 91       	pop	r26
    5e5c:	9f 91       	pop	r25
    5e5e:	8f 91       	pop	r24
    5e60:	0f 90       	pop	r0
    5e62:	0f be       	out	0x3f, r0	; 63
    5e64:	0f 90       	pop	r0
    5e66:	1f 90       	pop	r1
    5e68:	18 95       	reti

00005e6a <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    5e6a:	1f 92       	push	r1
    5e6c:	0f 92       	push	r0
    5e6e:	0f b6       	in	r0, 0x3f	; 63
    5e70:	0f 92       	push	r0
    5e72:	11 24       	eor	r1, r1
    5e74:	8f 93       	push	r24
    5e76:	9f 93       	push	r25
    5e78:	af 93       	push	r26
    5e7a:	bf 93       	push	r27
    5e7c:	ef 93       	push	r30
    5e7e:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    5e80:	a5 e5       	ldi	r26, 0x55	; 85
    5e82:	b1 e3       	ldi	r27, 0x31	; 49
    5e84:	ec 91       	ld	r30, X
    5e86:	81 e0       	ldi	r24, 0x01	; 1
    5e88:	8e 0f       	add	r24, r30
    5e8a:	8c 93       	st	X, r24
    5e8c:	f0 e0       	ldi	r31, 0x00	; 0
    5e8e:	ed 5a       	subi	r30, 0xAD	; 173
    5e90:	ff 4c       	sbci	r31, 0xCF	; 207
    5e92:	90 81       	ld	r25, Z
    5e94:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    5e98:	90 91 53 31 	lds	r25, 0x3153	; 0x803153 <send3_buf+0x100>
    5e9c:	89 17       	cp	r24, r25
    5e9e:	40 f0       	brcs	.+16     	; 0x5eb0 <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    5ea0:	e0 e6       	ldi	r30, 0x60	; 96
    5ea2:	f8 e0       	ldi	r31, 0x08	; 8
    5ea4:	85 81       	ldd	r24, Z+5	; 0x05
    5ea6:	8f 7d       	andi	r24, 0xDF	; 223
    5ea8:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    5eaa:	81 e0       	ldi	r24, 0x01	; 1
    5eac:	80 93 56 31 	sts	0x3156, r24	; 0x803156 <send3_buf+0x103>
	}

}
    5eb0:	ff 91       	pop	r31
    5eb2:	ef 91       	pop	r30
    5eb4:	bf 91       	pop	r27
    5eb6:	af 91       	pop	r26
    5eb8:	9f 91       	pop	r25
    5eba:	8f 91       	pop	r24
    5ebc:	0f 90       	pop	r0
    5ebe:	0f be       	out	0x3f, r0	; 63
    5ec0:	0f 90       	pop	r0
    5ec2:	1f 90       	pop	r1
    5ec4:	18 95       	reti

00005ec6 <reboot>:
#include "wdt.h"

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
    5ec6:	88 ed       	ldi	r24, 0xD8	; 216
    5ec8:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    5eca:	81 e0       	ldi	r24, 0x01	; 1
    5ecc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    5ed0:	08 95       	ret

00005ed2 <__vector_29>:

}

ISR(PORTF_PORT_vect)
{
    5ed2:	1f 92       	push	r1
    5ed4:	0f 92       	push	r0
    5ed6:	0f b6       	in	r0, 0x3f	; 63
    5ed8:	0f 92       	push	r0
    5eda:	11 24       	eor	r1, r1
    5edc:	2f 93       	push	r18
    5ede:	3f 93       	push	r19
    5ee0:	4f 93       	push	r20
    5ee2:	5f 93       	push	r21
    5ee4:	6f 93       	push	r22
    5ee6:	7f 93       	push	r23
    5ee8:	8f 93       	push	r24
    5eea:	9f 93       	push	r25
    5eec:	af 93       	push	r26
    5eee:	bf 93       	push	r27
    5ef0:	ef 93       	push	r30
    5ef2:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
    5ef4:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
    5ef8:	86 ff       	sbrs	r24, 6
    5efa:	05 c0       	rjmp	.+10     	; 0x5f06 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
    5efc:	80 e4       	ldi	r24, 0x40	; 64
    5efe:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
    5f02:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <reboot>
	}

}
    5f06:	ff 91       	pop	r31
    5f08:	ef 91       	pop	r30
    5f0a:	bf 91       	pop	r27
    5f0c:	af 91       	pop	r26
    5f0e:	9f 91       	pop	r25
    5f10:	8f 91       	pop	r24
    5f12:	7f 91       	pop	r23
    5f14:	6f 91       	pop	r22
    5f16:	5f 91       	pop	r21
    5f18:	4f 91       	pop	r20
    5f1a:	3f 91       	pop	r19
    5f1c:	2f 91       	pop	r18
    5f1e:	0f 90       	pop	r0
    5f20:	0f be       	out	0x3f, r0	; 63
    5f22:	0f 90       	pop	r0
    5f24:	1f 90       	pop	r1
    5f26:	18 95       	reti

00005f28 <__subsf3>:
    5f28:	50 58       	subi	r21, 0x80	; 128

00005f2a <__addsf3>:
    5f2a:	bb 27       	eor	r27, r27
    5f2c:	aa 27       	eor	r26, r26
    5f2e:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <__addsf3x>
    5f32:	0c 94 26 31 	jmp	0x624c	; 0x624c <__fp_round>
    5f36:	0e 94 18 31 	call	0x6230	; 0x6230 <__fp_pscA>
    5f3a:	38 f0       	brcs	.+14     	; 0x5f4a <__addsf3+0x20>
    5f3c:	0e 94 1f 31 	call	0x623e	; 0x623e <__fp_pscB>
    5f40:	20 f0       	brcs	.+8      	; 0x5f4a <__addsf3+0x20>
    5f42:	39 f4       	brne	.+14     	; 0x5f52 <__addsf3+0x28>
    5f44:	9f 3f       	cpi	r25, 0xFF	; 255
    5f46:	19 f4       	brne	.+6      	; 0x5f4e <__addsf3+0x24>
    5f48:	26 f4       	brtc	.+8      	; 0x5f52 <__addsf3+0x28>
    5f4a:	0c 94 15 31 	jmp	0x622a	; 0x622a <__fp_nan>
    5f4e:	0e f4       	brtc	.+2      	; 0x5f52 <__addsf3+0x28>
    5f50:	e0 95       	com	r30
    5f52:	e7 fb       	bst	r30, 7
    5f54:	0c 94 0f 31 	jmp	0x621e	; 0x621e <__fp_inf>

00005f58 <__addsf3x>:
    5f58:	e9 2f       	mov	r30, r25
    5f5a:	0e 94 37 31 	call	0x626e	; 0x626e <__fp_split3>
    5f5e:	58 f3       	brcs	.-42     	; 0x5f36 <__addsf3+0xc>
    5f60:	ba 17       	cp	r27, r26
    5f62:	62 07       	cpc	r22, r18
    5f64:	73 07       	cpc	r23, r19
    5f66:	84 07       	cpc	r24, r20
    5f68:	95 07       	cpc	r25, r21
    5f6a:	20 f0       	brcs	.+8      	; 0x5f74 <__addsf3x+0x1c>
    5f6c:	79 f4       	brne	.+30     	; 0x5f8c <__addsf3x+0x34>
    5f6e:	a6 f5       	brtc	.+104    	; 0x5fd8 <__addsf3x+0x80>
    5f70:	0c 94 59 31 	jmp	0x62b2	; 0x62b2 <__fp_zero>
    5f74:	0e f4       	brtc	.+2      	; 0x5f78 <__addsf3x+0x20>
    5f76:	e0 95       	com	r30
    5f78:	0b 2e       	mov	r0, r27
    5f7a:	ba 2f       	mov	r27, r26
    5f7c:	a0 2d       	mov	r26, r0
    5f7e:	0b 01       	movw	r0, r22
    5f80:	b9 01       	movw	r22, r18
    5f82:	90 01       	movw	r18, r0
    5f84:	0c 01       	movw	r0, r24
    5f86:	ca 01       	movw	r24, r20
    5f88:	a0 01       	movw	r20, r0
    5f8a:	11 24       	eor	r1, r1
    5f8c:	ff 27       	eor	r31, r31
    5f8e:	59 1b       	sub	r21, r25
    5f90:	99 f0       	breq	.+38     	; 0x5fb8 <__addsf3x+0x60>
    5f92:	59 3f       	cpi	r21, 0xF9	; 249
    5f94:	50 f4       	brcc	.+20     	; 0x5faa <__addsf3x+0x52>
    5f96:	50 3e       	cpi	r21, 0xE0	; 224
    5f98:	68 f1       	brcs	.+90     	; 0x5ff4 <__addsf3x+0x9c>
    5f9a:	1a 16       	cp	r1, r26
    5f9c:	f0 40       	sbci	r31, 0x00	; 0
    5f9e:	a2 2f       	mov	r26, r18
    5fa0:	23 2f       	mov	r18, r19
    5fa2:	34 2f       	mov	r19, r20
    5fa4:	44 27       	eor	r20, r20
    5fa6:	58 5f       	subi	r21, 0xF8	; 248
    5fa8:	f3 cf       	rjmp	.-26     	; 0x5f90 <__addsf3x+0x38>
    5faa:	46 95       	lsr	r20
    5fac:	37 95       	ror	r19
    5fae:	27 95       	ror	r18
    5fb0:	a7 95       	ror	r26
    5fb2:	f0 40       	sbci	r31, 0x00	; 0
    5fb4:	53 95       	inc	r21
    5fb6:	c9 f7       	brne	.-14     	; 0x5faa <__addsf3x+0x52>
    5fb8:	7e f4       	brtc	.+30     	; 0x5fd8 <__addsf3x+0x80>
    5fba:	1f 16       	cp	r1, r31
    5fbc:	ba 0b       	sbc	r27, r26
    5fbe:	62 0b       	sbc	r22, r18
    5fc0:	73 0b       	sbc	r23, r19
    5fc2:	84 0b       	sbc	r24, r20
    5fc4:	ba f0       	brmi	.+46     	; 0x5ff4 <__addsf3x+0x9c>
    5fc6:	91 50       	subi	r25, 0x01	; 1
    5fc8:	a1 f0       	breq	.+40     	; 0x5ff2 <__addsf3x+0x9a>
    5fca:	ff 0f       	add	r31, r31
    5fcc:	bb 1f       	adc	r27, r27
    5fce:	66 1f       	adc	r22, r22
    5fd0:	77 1f       	adc	r23, r23
    5fd2:	88 1f       	adc	r24, r24
    5fd4:	c2 f7       	brpl	.-16     	; 0x5fc6 <__addsf3x+0x6e>
    5fd6:	0e c0       	rjmp	.+28     	; 0x5ff4 <__addsf3x+0x9c>
    5fd8:	ba 0f       	add	r27, r26
    5fda:	62 1f       	adc	r22, r18
    5fdc:	73 1f       	adc	r23, r19
    5fde:	84 1f       	adc	r24, r20
    5fe0:	48 f4       	brcc	.+18     	; 0x5ff4 <__addsf3x+0x9c>
    5fe2:	87 95       	ror	r24
    5fe4:	77 95       	ror	r23
    5fe6:	67 95       	ror	r22
    5fe8:	b7 95       	ror	r27
    5fea:	f7 95       	ror	r31
    5fec:	9e 3f       	cpi	r25, 0xFE	; 254
    5fee:	08 f0       	brcs	.+2      	; 0x5ff2 <__addsf3x+0x9a>
    5ff0:	b0 cf       	rjmp	.-160    	; 0x5f52 <__addsf3+0x28>
    5ff2:	93 95       	inc	r25
    5ff4:	88 0f       	add	r24, r24
    5ff6:	08 f0       	brcs	.+2      	; 0x5ffa <__addsf3x+0xa2>
    5ff8:	99 27       	eor	r25, r25
    5ffa:	ee 0f       	add	r30, r30
    5ffc:	97 95       	ror	r25
    5ffe:	87 95       	ror	r24
    6000:	08 95       	ret

00006002 <__cmpsf2>:
    6002:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <__fp_cmp>
    6006:	08 f4       	brcc	.+2      	; 0x600a <__cmpsf2+0x8>
    6008:	81 e0       	ldi	r24, 0x01	; 1
    600a:	08 95       	ret

0000600c <__divsf3>:
    600c:	0e 94 1a 30 	call	0x6034	; 0x6034 <__divsf3x>
    6010:	0c 94 26 31 	jmp	0x624c	; 0x624c <__fp_round>
    6014:	0e 94 1f 31 	call	0x623e	; 0x623e <__fp_pscB>
    6018:	58 f0       	brcs	.+22     	; 0x6030 <__divsf3+0x24>
    601a:	0e 94 18 31 	call	0x6230	; 0x6230 <__fp_pscA>
    601e:	40 f0       	brcs	.+16     	; 0x6030 <__divsf3+0x24>
    6020:	29 f4       	brne	.+10     	; 0x602c <__divsf3+0x20>
    6022:	5f 3f       	cpi	r21, 0xFF	; 255
    6024:	29 f0       	breq	.+10     	; 0x6030 <__divsf3+0x24>
    6026:	0c 94 0f 31 	jmp	0x621e	; 0x621e <__fp_inf>
    602a:	51 11       	cpse	r21, r1
    602c:	0c 94 5a 31 	jmp	0x62b4	; 0x62b4 <__fp_szero>
    6030:	0c 94 15 31 	jmp	0x622a	; 0x622a <__fp_nan>

00006034 <__divsf3x>:
    6034:	0e 94 37 31 	call	0x626e	; 0x626e <__fp_split3>
    6038:	68 f3       	brcs	.-38     	; 0x6014 <__divsf3+0x8>

0000603a <__divsf3_pse>:
    603a:	99 23       	and	r25, r25
    603c:	b1 f3       	breq	.-20     	; 0x602a <__divsf3+0x1e>
    603e:	55 23       	and	r21, r21
    6040:	91 f3       	breq	.-28     	; 0x6026 <__divsf3+0x1a>
    6042:	95 1b       	sub	r25, r21
    6044:	55 0b       	sbc	r21, r21
    6046:	bb 27       	eor	r27, r27
    6048:	aa 27       	eor	r26, r26
    604a:	62 17       	cp	r22, r18
    604c:	73 07       	cpc	r23, r19
    604e:	84 07       	cpc	r24, r20
    6050:	38 f0       	brcs	.+14     	; 0x6060 <__divsf3_pse+0x26>
    6052:	9f 5f       	subi	r25, 0xFF	; 255
    6054:	5f 4f       	sbci	r21, 0xFF	; 255
    6056:	22 0f       	add	r18, r18
    6058:	33 1f       	adc	r19, r19
    605a:	44 1f       	adc	r20, r20
    605c:	aa 1f       	adc	r26, r26
    605e:	a9 f3       	breq	.-22     	; 0x604a <__divsf3_pse+0x10>
    6060:	35 d0       	rcall	.+106    	; 0x60cc <__divsf3_pse+0x92>
    6062:	0e 2e       	mov	r0, r30
    6064:	3a f0       	brmi	.+14     	; 0x6074 <__divsf3_pse+0x3a>
    6066:	e0 e8       	ldi	r30, 0x80	; 128
    6068:	32 d0       	rcall	.+100    	; 0x60ce <__divsf3_pse+0x94>
    606a:	91 50       	subi	r25, 0x01	; 1
    606c:	50 40       	sbci	r21, 0x00	; 0
    606e:	e6 95       	lsr	r30
    6070:	00 1c       	adc	r0, r0
    6072:	ca f7       	brpl	.-14     	; 0x6066 <__divsf3_pse+0x2c>
    6074:	2b d0       	rcall	.+86     	; 0x60cc <__divsf3_pse+0x92>
    6076:	fe 2f       	mov	r31, r30
    6078:	29 d0       	rcall	.+82     	; 0x60cc <__divsf3_pse+0x92>
    607a:	66 0f       	add	r22, r22
    607c:	77 1f       	adc	r23, r23
    607e:	88 1f       	adc	r24, r24
    6080:	bb 1f       	adc	r27, r27
    6082:	26 17       	cp	r18, r22
    6084:	37 07       	cpc	r19, r23
    6086:	48 07       	cpc	r20, r24
    6088:	ab 07       	cpc	r26, r27
    608a:	b0 e8       	ldi	r27, 0x80	; 128
    608c:	09 f0       	breq	.+2      	; 0x6090 <__divsf3_pse+0x56>
    608e:	bb 0b       	sbc	r27, r27
    6090:	80 2d       	mov	r24, r0
    6092:	bf 01       	movw	r22, r30
    6094:	ff 27       	eor	r31, r31
    6096:	93 58       	subi	r25, 0x83	; 131
    6098:	5f 4f       	sbci	r21, 0xFF	; 255
    609a:	3a f0       	brmi	.+14     	; 0x60aa <__divsf3_pse+0x70>
    609c:	9e 3f       	cpi	r25, 0xFE	; 254
    609e:	51 05       	cpc	r21, r1
    60a0:	78 f0       	brcs	.+30     	; 0x60c0 <__divsf3_pse+0x86>
    60a2:	0c 94 0f 31 	jmp	0x621e	; 0x621e <__fp_inf>
    60a6:	0c 94 5a 31 	jmp	0x62b4	; 0x62b4 <__fp_szero>
    60aa:	5f 3f       	cpi	r21, 0xFF	; 255
    60ac:	e4 f3       	brlt	.-8      	; 0x60a6 <__divsf3_pse+0x6c>
    60ae:	98 3e       	cpi	r25, 0xE8	; 232
    60b0:	d4 f3       	brlt	.-12     	; 0x60a6 <__divsf3_pse+0x6c>
    60b2:	86 95       	lsr	r24
    60b4:	77 95       	ror	r23
    60b6:	67 95       	ror	r22
    60b8:	b7 95       	ror	r27
    60ba:	f7 95       	ror	r31
    60bc:	9f 5f       	subi	r25, 0xFF	; 255
    60be:	c9 f7       	brne	.-14     	; 0x60b2 <__divsf3_pse+0x78>
    60c0:	88 0f       	add	r24, r24
    60c2:	91 1d       	adc	r25, r1
    60c4:	96 95       	lsr	r25
    60c6:	87 95       	ror	r24
    60c8:	97 f9       	bld	r25, 7
    60ca:	08 95       	ret
    60cc:	e1 e0       	ldi	r30, 0x01	; 1
    60ce:	66 0f       	add	r22, r22
    60d0:	77 1f       	adc	r23, r23
    60d2:	88 1f       	adc	r24, r24
    60d4:	bb 1f       	adc	r27, r27
    60d6:	62 17       	cp	r22, r18
    60d8:	73 07       	cpc	r23, r19
    60da:	84 07       	cpc	r24, r20
    60dc:	ba 07       	cpc	r27, r26
    60de:	20 f0       	brcs	.+8      	; 0x60e8 <__divsf3_pse+0xae>
    60e0:	62 1b       	sub	r22, r18
    60e2:	73 0b       	sbc	r23, r19
    60e4:	84 0b       	sbc	r24, r20
    60e6:	ba 0b       	sbc	r27, r26
    60e8:	ee 1f       	adc	r30, r30
    60ea:	88 f7       	brcc	.-30     	; 0x60ce <__divsf3_pse+0x94>
    60ec:	e0 95       	com	r30
    60ee:	08 95       	ret

000060f0 <__fixsfsi>:
    60f0:	0e 94 7f 30 	call	0x60fe	; 0x60fe <__fixunssfsi>
    60f4:	68 94       	set
    60f6:	b1 11       	cpse	r27, r1
    60f8:	0c 94 5a 31 	jmp	0x62b4	; 0x62b4 <__fp_szero>
    60fc:	08 95       	ret

000060fe <__fixunssfsi>:
    60fe:	0e 94 3f 31 	call	0x627e	; 0x627e <__fp_splitA>
    6102:	88 f0       	brcs	.+34     	; 0x6126 <__fixunssfsi+0x28>
    6104:	9f 57       	subi	r25, 0x7F	; 127
    6106:	98 f0       	brcs	.+38     	; 0x612e <__fixunssfsi+0x30>
    6108:	b9 2f       	mov	r27, r25
    610a:	99 27       	eor	r25, r25
    610c:	b7 51       	subi	r27, 0x17	; 23
    610e:	b0 f0       	brcs	.+44     	; 0x613c <__fixunssfsi+0x3e>
    6110:	e1 f0       	breq	.+56     	; 0x614a <__fixunssfsi+0x4c>
    6112:	66 0f       	add	r22, r22
    6114:	77 1f       	adc	r23, r23
    6116:	88 1f       	adc	r24, r24
    6118:	99 1f       	adc	r25, r25
    611a:	1a f0       	brmi	.+6      	; 0x6122 <__fixunssfsi+0x24>
    611c:	ba 95       	dec	r27
    611e:	c9 f7       	brne	.-14     	; 0x6112 <__fixunssfsi+0x14>
    6120:	14 c0       	rjmp	.+40     	; 0x614a <__fixunssfsi+0x4c>
    6122:	b1 30       	cpi	r27, 0x01	; 1
    6124:	91 f0       	breq	.+36     	; 0x614a <__fixunssfsi+0x4c>
    6126:	0e 94 59 31 	call	0x62b2	; 0x62b2 <__fp_zero>
    612a:	b1 e0       	ldi	r27, 0x01	; 1
    612c:	08 95       	ret
    612e:	0c 94 59 31 	jmp	0x62b2	; 0x62b2 <__fp_zero>
    6132:	67 2f       	mov	r22, r23
    6134:	78 2f       	mov	r23, r24
    6136:	88 27       	eor	r24, r24
    6138:	b8 5f       	subi	r27, 0xF8	; 248
    613a:	39 f0       	breq	.+14     	; 0x614a <__fixunssfsi+0x4c>
    613c:	b9 3f       	cpi	r27, 0xF9	; 249
    613e:	cc f3       	brlt	.-14     	; 0x6132 <__fixunssfsi+0x34>
    6140:	86 95       	lsr	r24
    6142:	77 95       	ror	r23
    6144:	67 95       	ror	r22
    6146:	b3 95       	inc	r27
    6148:	d9 f7       	brne	.-10     	; 0x6140 <__fixunssfsi+0x42>
    614a:	3e f4       	brtc	.+14     	; 0x615a <__fixunssfsi+0x5c>
    614c:	90 95       	com	r25
    614e:	80 95       	com	r24
    6150:	70 95       	com	r23
    6152:	61 95       	neg	r22
    6154:	7f 4f       	sbci	r23, 0xFF	; 255
    6156:	8f 4f       	sbci	r24, 0xFF	; 255
    6158:	9f 4f       	sbci	r25, 0xFF	; 255
    615a:	08 95       	ret

0000615c <__floatunsisf>:
    615c:	e8 94       	clt
    615e:	09 c0       	rjmp	.+18     	; 0x6172 <__floatsisf+0x12>

00006160 <__floatsisf>:
    6160:	97 fb       	bst	r25, 7
    6162:	3e f4       	brtc	.+14     	; 0x6172 <__floatsisf+0x12>
    6164:	90 95       	com	r25
    6166:	80 95       	com	r24
    6168:	70 95       	com	r23
    616a:	61 95       	neg	r22
    616c:	7f 4f       	sbci	r23, 0xFF	; 255
    616e:	8f 4f       	sbci	r24, 0xFF	; 255
    6170:	9f 4f       	sbci	r25, 0xFF	; 255
    6172:	99 23       	and	r25, r25
    6174:	a9 f0       	breq	.+42     	; 0x61a0 <__floatsisf+0x40>
    6176:	f9 2f       	mov	r31, r25
    6178:	96 e9       	ldi	r25, 0x96	; 150
    617a:	bb 27       	eor	r27, r27
    617c:	93 95       	inc	r25
    617e:	f6 95       	lsr	r31
    6180:	87 95       	ror	r24
    6182:	77 95       	ror	r23
    6184:	67 95       	ror	r22
    6186:	b7 95       	ror	r27
    6188:	f1 11       	cpse	r31, r1
    618a:	f8 cf       	rjmp	.-16     	; 0x617c <__floatsisf+0x1c>
    618c:	fa f4       	brpl	.+62     	; 0x61cc <__floatsisf+0x6c>
    618e:	bb 0f       	add	r27, r27
    6190:	11 f4       	brne	.+4      	; 0x6196 <__floatsisf+0x36>
    6192:	60 ff       	sbrs	r22, 0
    6194:	1b c0       	rjmp	.+54     	; 0x61cc <__floatsisf+0x6c>
    6196:	6f 5f       	subi	r22, 0xFF	; 255
    6198:	7f 4f       	sbci	r23, 0xFF	; 255
    619a:	8f 4f       	sbci	r24, 0xFF	; 255
    619c:	9f 4f       	sbci	r25, 0xFF	; 255
    619e:	16 c0       	rjmp	.+44     	; 0x61cc <__floatsisf+0x6c>
    61a0:	88 23       	and	r24, r24
    61a2:	11 f0       	breq	.+4      	; 0x61a8 <__floatsisf+0x48>
    61a4:	96 e9       	ldi	r25, 0x96	; 150
    61a6:	11 c0       	rjmp	.+34     	; 0x61ca <__floatsisf+0x6a>
    61a8:	77 23       	and	r23, r23
    61aa:	21 f0       	breq	.+8      	; 0x61b4 <__floatsisf+0x54>
    61ac:	9e e8       	ldi	r25, 0x8E	; 142
    61ae:	87 2f       	mov	r24, r23
    61b0:	76 2f       	mov	r23, r22
    61b2:	05 c0       	rjmp	.+10     	; 0x61be <__floatsisf+0x5e>
    61b4:	66 23       	and	r22, r22
    61b6:	71 f0       	breq	.+28     	; 0x61d4 <__floatsisf+0x74>
    61b8:	96 e8       	ldi	r25, 0x86	; 134
    61ba:	86 2f       	mov	r24, r22
    61bc:	70 e0       	ldi	r23, 0x00	; 0
    61be:	60 e0       	ldi	r22, 0x00	; 0
    61c0:	2a f0       	brmi	.+10     	; 0x61cc <__floatsisf+0x6c>
    61c2:	9a 95       	dec	r25
    61c4:	66 0f       	add	r22, r22
    61c6:	77 1f       	adc	r23, r23
    61c8:	88 1f       	adc	r24, r24
    61ca:	da f7       	brpl	.-10     	; 0x61c2 <__floatsisf+0x62>
    61cc:	88 0f       	add	r24, r24
    61ce:	96 95       	lsr	r25
    61d0:	87 95       	ror	r24
    61d2:	97 f9       	bld	r25, 7
    61d4:	08 95       	ret

000061d6 <__fp_cmp>:
    61d6:	99 0f       	add	r25, r25
    61d8:	00 08       	sbc	r0, r0
    61da:	55 0f       	add	r21, r21
    61dc:	aa 0b       	sbc	r26, r26
    61de:	e0 e8       	ldi	r30, 0x80	; 128
    61e0:	fe ef       	ldi	r31, 0xFE	; 254
    61e2:	16 16       	cp	r1, r22
    61e4:	17 06       	cpc	r1, r23
    61e6:	e8 07       	cpc	r30, r24
    61e8:	f9 07       	cpc	r31, r25
    61ea:	c0 f0       	brcs	.+48     	; 0x621c <__fp_cmp+0x46>
    61ec:	12 16       	cp	r1, r18
    61ee:	13 06       	cpc	r1, r19
    61f0:	e4 07       	cpc	r30, r20
    61f2:	f5 07       	cpc	r31, r21
    61f4:	98 f0       	brcs	.+38     	; 0x621c <__fp_cmp+0x46>
    61f6:	62 1b       	sub	r22, r18
    61f8:	73 0b       	sbc	r23, r19
    61fa:	84 0b       	sbc	r24, r20
    61fc:	95 0b       	sbc	r25, r21
    61fe:	39 f4       	brne	.+14     	; 0x620e <__fp_cmp+0x38>
    6200:	0a 26       	eor	r0, r26
    6202:	61 f0       	breq	.+24     	; 0x621c <__fp_cmp+0x46>
    6204:	23 2b       	or	r18, r19
    6206:	24 2b       	or	r18, r20
    6208:	25 2b       	or	r18, r21
    620a:	21 f4       	brne	.+8      	; 0x6214 <__fp_cmp+0x3e>
    620c:	08 95       	ret
    620e:	0a 26       	eor	r0, r26
    6210:	09 f4       	brne	.+2      	; 0x6214 <__fp_cmp+0x3e>
    6212:	a1 40       	sbci	r26, 0x01	; 1
    6214:	a6 95       	lsr	r26
    6216:	8f ef       	ldi	r24, 0xFF	; 255
    6218:	81 1d       	adc	r24, r1
    621a:	81 1d       	adc	r24, r1
    621c:	08 95       	ret

0000621e <__fp_inf>:
    621e:	97 f9       	bld	r25, 7
    6220:	9f 67       	ori	r25, 0x7F	; 127
    6222:	80 e8       	ldi	r24, 0x80	; 128
    6224:	70 e0       	ldi	r23, 0x00	; 0
    6226:	60 e0       	ldi	r22, 0x00	; 0
    6228:	08 95       	ret

0000622a <__fp_nan>:
    622a:	9f ef       	ldi	r25, 0xFF	; 255
    622c:	80 ec       	ldi	r24, 0xC0	; 192
    622e:	08 95       	ret

00006230 <__fp_pscA>:
    6230:	00 24       	eor	r0, r0
    6232:	0a 94       	dec	r0
    6234:	16 16       	cp	r1, r22
    6236:	17 06       	cpc	r1, r23
    6238:	18 06       	cpc	r1, r24
    623a:	09 06       	cpc	r0, r25
    623c:	08 95       	ret

0000623e <__fp_pscB>:
    623e:	00 24       	eor	r0, r0
    6240:	0a 94       	dec	r0
    6242:	12 16       	cp	r1, r18
    6244:	13 06       	cpc	r1, r19
    6246:	14 06       	cpc	r1, r20
    6248:	05 06       	cpc	r0, r21
    624a:	08 95       	ret

0000624c <__fp_round>:
    624c:	09 2e       	mov	r0, r25
    624e:	03 94       	inc	r0
    6250:	00 0c       	add	r0, r0
    6252:	11 f4       	brne	.+4      	; 0x6258 <__fp_round+0xc>
    6254:	88 23       	and	r24, r24
    6256:	52 f0       	brmi	.+20     	; 0x626c <__fp_round+0x20>
    6258:	bb 0f       	add	r27, r27
    625a:	40 f4       	brcc	.+16     	; 0x626c <__fp_round+0x20>
    625c:	bf 2b       	or	r27, r31
    625e:	11 f4       	brne	.+4      	; 0x6264 <__fp_round+0x18>
    6260:	60 ff       	sbrs	r22, 0
    6262:	04 c0       	rjmp	.+8      	; 0x626c <__fp_round+0x20>
    6264:	6f 5f       	subi	r22, 0xFF	; 255
    6266:	7f 4f       	sbci	r23, 0xFF	; 255
    6268:	8f 4f       	sbci	r24, 0xFF	; 255
    626a:	9f 4f       	sbci	r25, 0xFF	; 255
    626c:	08 95       	ret

0000626e <__fp_split3>:
    626e:	57 fd       	sbrc	r21, 7
    6270:	90 58       	subi	r25, 0x80	; 128
    6272:	44 0f       	add	r20, r20
    6274:	55 1f       	adc	r21, r21
    6276:	59 f0       	breq	.+22     	; 0x628e <__fp_splitA+0x10>
    6278:	5f 3f       	cpi	r21, 0xFF	; 255
    627a:	71 f0       	breq	.+28     	; 0x6298 <__fp_splitA+0x1a>
    627c:	47 95       	ror	r20

0000627e <__fp_splitA>:
    627e:	88 0f       	add	r24, r24
    6280:	97 fb       	bst	r25, 7
    6282:	99 1f       	adc	r25, r25
    6284:	61 f0       	breq	.+24     	; 0x629e <__fp_splitA+0x20>
    6286:	9f 3f       	cpi	r25, 0xFF	; 255
    6288:	79 f0       	breq	.+30     	; 0x62a8 <__fp_splitA+0x2a>
    628a:	87 95       	ror	r24
    628c:	08 95       	ret
    628e:	12 16       	cp	r1, r18
    6290:	13 06       	cpc	r1, r19
    6292:	14 06       	cpc	r1, r20
    6294:	55 1f       	adc	r21, r21
    6296:	f2 cf       	rjmp	.-28     	; 0x627c <__fp_split3+0xe>
    6298:	46 95       	lsr	r20
    629a:	f1 df       	rcall	.-30     	; 0x627e <__fp_splitA>
    629c:	08 c0       	rjmp	.+16     	; 0x62ae <__fp_splitA+0x30>
    629e:	16 16       	cp	r1, r22
    62a0:	17 06       	cpc	r1, r23
    62a2:	18 06       	cpc	r1, r24
    62a4:	99 1f       	adc	r25, r25
    62a6:	f1 cf       	rjmp	.-30     	; 0x628a <__fp_splitA+0xc>
    62a8:	86 95       	lsr	r24
    62aa:	71 05       	cpc	r23, r1
    62ac:	61 05       	cpc	r22, r1
    62ae:	08 94       	sec
    62b0:	08 95       	ret

000062b2 <__fp_zero>:
    62b2:	e8 94       	clt

000062b4 <__fp_szero>:
    62b4:	bb 27       	eor	r27, r27
    62b6:	66 27       	eor	r22, r22
    62b8:	77 27       	eor	r23, r23
    62ba:	cb 01       	movw	r24, r22
    62bc:	97 f9       	bld	r25, 7
    62be:	08 95       	ret

000062c0 <__gesf2>:
    62c0:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <__fp_cmp>
    62c4:	08 f4       	brcc	.+2      	; 0x62c8 <__gesf2+0x8>
    62c6:	8f ef       	ldi	r24, 0xFF	; 255
    62c8:	08 95       	ret

000062ca <__mulsf3>:
    62ca:	0e 94 78 31 	call	0x62f0	; 0x62f0 <__mulsf3x>
    62ce:	0c 94 26 31 	jmp	0x624c	; 0x624c <__fp_round>
    62d2:	0e 94 18 31 	call	0x6230	; 0x6230 <__fp_pscA>
    62d6:	38 f0       	brcs	.+14     	; 0x62e6 <__mulsf3+0x1c>
    62d8:	0e 94 1f 31 	call	0x623e	; 0x623e <__fp_pscB>
    62dc:	20 f0       	brcs	.+8      	; 0x62e6 <__mulsf3+0x1c>
    62de:	95 23       	and	r25, r21
    62e0:	11 f0       	breq	.+4      	; 0x62e6 <__mulsf3+0x1c>
    62e2:	0c 94 0f 31 	jmp	0x621e	; 0x621e <__fp_inf>
    62e6:	0c 94 15 31 	jmp	0x622a	; 0x622a <__fp_nan>
    62ea:	11 24       	eor	r1, r1
    62ec:	0c 94 5a 31 	jmp	0x62b4	; 0x62b4 <__fp_szero>

000062f0 <__mulsf3x>:
    62f0:	0e 94 37 31 	call	0x626e	; 0x626e <__fp_split3>
    62f4:	70 f3       	brcs	.-36     	; 0x62d2 <__mulsf3+0x8>

000062f6 <__mulsf3_pse>:
    62f6:	95 9f       	mul	r25, r21
    62f8:	c1 f3       	breq	.-16     	; 0x62ea <__mulsf3+0x20>
    62fa:	95 0f       	add	r25, r21
    62fc:	50 e0       	ldi	r21, 0x00	; 0
    62fe:	55 1f       	adc	r21, r21
    6300:	62 9f       	mul	r22, r18
    6302:	f0 01       	movw	r30, r0
    6304:	72 9f       	mul	r23, r18
    6306:	bb 27       	eor	r27, r27
    6308:	f0 0d       	add	r31, r0
    630a:	b1 1d       	adc	r27, r1
    630c:	63 9f       	mul	r22, r19
    630e:	aa 27       	eor	r26, r26
    6310:	f0 0d       	add	r31, r0
    6312:	b1 1d       	adc	r27, r1
    6314:	aa 1f       	adc	r26, r26
    6316:	64 9f       	mul	r22, r20
    6318:	66 27       	eor	r22, r22
    631a:	b0 0d       	add	r27, r0
    631c:	a1 1d       	adc	r26, r1
    631e:	66 1f       	adc	r22, r22
    6320:	82 9f       	mul	r24, r18
    6322:	22 27       	eor	r18, r18
    6324:	b0 0d       	add	r27, r0
    6326:	a1 1d       	adc	r26, r1
    6328:	62 1f       	adc	r22, r18
    632a:	73 9f       	mul	r23, r19
    632c:	b0 0d       	add	r27, r0
    632e:	a1 1d       	adc	r26, r1
    6330:	62 1f       	adc	r22, r18
    6332:	83 9f       	mul	r24, r19
    6334:	a0 0d       	add	r26, r0
    6336:	61 1d       	adc	r22, r1
    6338:	22 1f       	adc	r18, r18
    633a:	74 9f       	mul	r23, r20
    633c:	33 27       	eor	r19, r19
    633e:	a0 0d       	add	r26, r0
    6340:	61 1d       	adc	r22, r1
    6342:	23 1f       	adc	r18, r19
    6344:	84 9f       	mul	r24, r20
    6346:	60 0d       	add	r22, r0
    6348:	21 1d       	adc	r18, r1
    634a:	82 2f       	mov	r24, r18
    634c:	76 2f       	mov	r23, r22
    634e:	6a 2f       	mov	r22, r26
    6350:	11 24       	eor	r1, r1
    6352:	9f 57       	subi	r25, 0x7F	; 127
    6354:	50 40       	sbci	r21, 0x00	; 0
    6356:	9a f0       	brmi	.+38     	; 0x637e <__mulsf3_pse+0x88>
    6358:	f1 f0       	breq	.+60     	; 0x6396 <__mulsf3_pse+0xa0>
    635a:	88 23       	and	r24, r24
    635c:	4a f0       	brmi	.+18     	; 0x6370 <__mulsf3_pse+0x7a>
    635e:	ee 0f       	add	r30, r30
    6360:	ff 1f       	adc	r31, r31
    6362:	bb 1f       	adc	r27, r27
    6364:	66 1f       	adc	r22, r22
    6366:	77 1f       	adc	r23, r23
    6368:	88 1f       	adc	r24, r24
    636a:	91 50       	subi	r25, 0x01	; 1
    636c:	50 40       	sbci	r21, 0x00	; 0
    636e:	a9 f7       	brne	.-22     	; 0x635a <__mulsf3_pse+0x64>
    6370:	9e 3f       	cpi	r25, 0xFE	; 254
    6372:	51 05       	cpc	r21, r1
    6374:	80 f0       	brcs	.+32     	; 0x6396 <__mulsf3_pse+0xa0>
    6376:	0c 94 0f 31 	jmp	0x621e	; 0x621e <__fp_inf>
    637a:	0c 94 5a 31 	jmp	0x62b4	; 0x62b4 <__fp_szero>
    637e:	5f 3f       	cpi	r21, 0xFF	; 255
    6380:	e4 f3       	brlt	.-8      	; 0x637a <__mulsf3_pse+0x84>
    6382:	98 3e       	cpi	r25, 0xE8	; 232
    6384:	d4 f3       	brlt	.-12     	; 0x637a <__mulsf3_pse+0x84>
    6386:	86 95       	lsr	r24
    6388:	77 95       	ror	r23
    638a:	67 95       	ror	r22
    638c:	b7 95       	ror	r27
    638e:	f7 95       	ror	r31
    6390:	e7 95       	ror	r30
    6392:	9f 5f       	subi	r25, 0xFF	; 255
    6394:	c1 f7       	brne	.-16     	; 0x6386 <__mulsf3_pse+0x90>
    6396:	fe 2b       	or	r31, r30
    6398:	88 0f       	add	r24, r24
    639a:	91 1d       	adc	r25, r1
    639c:	96 95       	lsr	r25
    639e:	87 95       	ror	r24
    63a0:	97 f9       	bld	r25, 7
    63a2:	08 95       	ret

000063a4 <vfprintf>:
    63a4:	a0 e1       	ldi	r26, 0x10	; 16
    63a6:	b0 e0       	ldi	r27, 0x00	; 0
    63a8:	e8 ed       	ldi	r30, 0xD8	; 216
    63aa:	f1 e3       	ldi	r31, 0x31	; 49
    63ac:	0c 94 93 35 	jmp	0x6b26	; 0x6b26 <__prologue_saves__>
    63b0:	7c 01       	movw	r14, r24
    63b2:	1b 01       	movw	r2, r22
    63b4:	6a 01       	movw	r12, r20
    63b6:	fc 01       	movw	r30, r24
    63b8:	16 82       	std	Z+6, r1	; 0x06
    63ba:	17 82       	std	Z+7, r1	; 0x07
    63bc:	83 81       	ldd	r24, Z+3	; 0x03
    63be:	81 ff       	sbrs	r24, 1
    63c0:	44 c3       	rjmp	.+1672   	; 0x6a4a <vfprintf+0x6a6>
    63c2:	9e 01       	movw	r18, r28
    63c4:	2f 5f       	subi	r18, 0xFF	; 255
    63c6:	3f 4f       	sbci	r19, 0xFF	; 255
    63c8:	39 01       	movw	r6, r18
    63ca:	f7 01       	movw	r30, r14
    63cc:	93 81       	ldd	r25, Z+3	; 0x03
    63ce:	f1 01       	movw	r30, r2
    63d0:	93 fd       	sbrc	r25, 3
    63d2:	85 91       	lpm	r24, Z+
    63d4:	93 ff       	sbrs	r25, 3
    63d6:	81 91       	ld	r24, Z+
    63d8:	1f 01       	movw	r2, r30
    63da:	88 23       	and	r24, r24
    63dc:	09 f4       	brne	.+2      	; 0x63e0 <vfprintf+0x3c>
    63de:	31 c3       	rjmp	.+1634   	; 0x6a42 <vfprintf+0x69e>
    63e0:	85 32       	cpi	r24, 0x25	; 37
    63e2:	39 f4       	brne	.+14     	; 0x63f2 <vfprintf+0x4e>
    63e4:	93 fd       	sbrc	r25, 3
    63e6:	85 91       	lpm	r24, Z+
    63e8:	93 ff       	sbrs	r25, 3
    63ea:	81 91       	ld	r24, Z+
    63ec:	1f 01       	movw	r2, r30
    63ee:	85 32       	cpi	r24, 0x25	; 37
    63f0:	39 f4       	brne	.+14     	; 0x6400 <vfprintf+0x5c>
    63f2:	b7 01       	movw	r22, r14
    63f4:	90 e0       	ldi	r25, 0x00	; 0
    63f6:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    63fa:	56 01       	movw	r10, r12
    63fc:	65 01       	movw	r12, r10
    63fe:	e5 cf       	rjmp	.-54     	; 0x63ca <vfprintf+0x26>
    6400:	10 e0       	ldi	r17, 0x00	; 0
    6402:	51 2c       	mov	r5, r1
    6404:	91 2c       	mov	r9, r1
    6406:	ff e1       	ldi	r31, 0x1F	; 31
    6408:	f9 15       	cp	r31, r9
    640a:	d8 f0       	brcs	.+54     	; 0x6442 <vfprintf+0x9e>
    640c:	8b 32       	cpi	r24, 0x2B	; 43
    640e:	79 f0       	breq	.+30     	; 0x642e <vfprintf+0x8a>
    6410:	38 f4       	brcc	.+14     	; 0x6420 <vfprintf+0x7c>
    6412:	80 32       	cpi	r24, 0x20	; 32
    6414:	79 f0       	breq	.+30     	; 0x6434 <vfprintf+0x90>
    6416:	83 32       	cpi	r24, 0x23	; 35
    6418:	a1 f4       	brne	.+40     	; 0x6442 <vfprintf+0x9e>
    641a:	f9 2d       	mov	r31, r9
    641c:	f0 61       	ori	r31, 0x10	; 16
    641e:	2e c0       	rjmp	.+92     	; 0x647c <vfprintf+0xd8>
    6420:	8d 32       	cpi	r24, 0x2D	; 45
    6422:	61 f0       	breq	.+24     	; 0x643c <vfprintf+0x98>
    6424:	80 33       	cpi	r24, 0x30	; 48
    6426:	69 f4       	brne	.+26     	; 0x6442 <vfprintf+0x9e>
    6428:	29 2d       	mov	r18, r9
    642a:	21 60       	ori	r18, 0x01	; 1
    642c:	2d c0       	rjmp	.+90     	; 0x6488 <vfprintf+0xe4>
    642e:	39 2d       	mov	r19, r9
    6430:	32 60       	ori	r19, 0x02	; 2
    6432:	93 2e       	mov	r9, r19
    6434:	89 2d       	mov	r24, r9
    6436:	84 60       	ori	r24, 0x04	; 4
    6438:	98 2e       	mov	r9, r24
    643a:	2a c0       	rjmp	.+84     	; 0x6490 <vfprintf+0xec>
    643c:	e9 2d       	mov	r30, r9
    643e:	e8 60       	ori	r30, 0x08	; 8
    6440:	15 c0       	rjmp	.+42     	; 0x646c <vfprintf+0xc8>
    6442:	97 fc       	sbrc	r9, 7
    6444:	2d c0       	rjmp	.+90     	; 0x64a0 <vfprintf+0xfc>
    6446:	20 ed       	ldi	r18, 0xD0	; 208
    6448:	28 0f       	add	r18, r24
    644a:	2a 30       	cpi	r18, 0x0A	; 10
    644c:	88 f4       	brcc	.+34     	; 0x6470 <vfprintf+0xcc>
    644e:	96 fe       	sbrs	r9, 6
    6450:	06 c0       	rjmp	.+12     	; 0x645e <vfprintf+0xba>
    6452:	3a e0       	ldi	r19, 0x0A	; 10
    6454:	13 9f       	mul	r17, r19
    6456:	20 0d       	add	r18, r0
    6458:	11 24       	eor	r1, r1
    645a:	12 2f       	mov	r17, r18
    645c:	19 c0       	rjmp	.+50     	; 0x6490 <vfprintf+0xec>
    645e:	8a e0       	ldi	r24, 0x0A	; 10
    6460:	58 9e       	mul	r5, r24
    6462:	20 0d       	add	r18, r0
    6464:	11 24       	eor	r1, r1
    6466:	52 2e       	mov	r5, r18
    6468:	e9 2d       	mov	r30, r9
    646a:	e0 62       	ori	r30, 0x20	; 32
    646c:	9e 2e       	mov	r9, r30
    646e:	10 c0       	rjmp	.+32     	; 0x6490 <vfprintf+0xec>
    6470:	8e 32       	cpi	r24, 0x2E	; 46
    6472:	31 f4       	brne	.+12     	; 0x6480 <vfprintf+0xdc>
    6474:	96 fc       	sbrc	r9, 6
    6476:	e5 c2       	rjmp	.+1482   	; 0x6a42 <vfprintf+0x69e>
    6478:	f9 2d       	mov	r31, r9
    647a:	f0 64       	ori	r31, 0x40	; 64
    647c:	9f 2e       	mov	r9, r31
    647e:	08 c0       	rjmp	.+16     	; 0x6490 <vfprintf+0xec>
    6480:	8c 36       	cpi	r24, 0x6C	; 108
    6482:	21 f4       	brne	.+8      	; 0x648c <vfprintf+0xe8>
    6484:	29 2d       	mov	r18, r9
    6486:	20 68       	ori	r18, 0x80	; 128
    6488:	92 2e       	mov	r9, r18
    648a:	02 c0       	rjmp	.+4      	; 0x6490 <vfprintf+0xec>
    648c:	88 36       	cpi	r24, 0x68	; 104
    648e:	41 f4       	brne	.+16     	; 0x64a0 <vfprintf+0xfc>
    6490:	f1 01       	movw	r30, r2
    6492:	93 fd       	sbrc	r25, 3
    6494:	85 91       	lpm	r24, Z+
    6496:	93 ff       	sbrs	r25, 3
    6498:	81 91       	ld	r24, Z+
    649a:	1f 01       	movw	r2, r30
    649c:	81 11       	cpse	r24, r1
    649e:	b3 cf       	rjmp	.-154    	; 0x6406 <vfprintf+0x62>
    64a0:	9b eb       	ldi	r25, 0xBB	; 187
    64a2:	98 0f       	add	r25, r24
    64a4:	93 30       	cpi	r25, 0x03	; 3
    64a6:	20 f4       	brcc	.+8      	; 0x64b0 <vfprintf+0x10c>
    64a8:	99 2d       	mov	r25, r9
    64aa:	90 61       	ori	r25, 0x10	; 16
    64ac:	80 5e       	subi	r24, 0xE0	; 224
    64ae:	07 c0       	rjmp	.+14     	; 0x64be <vfprintf+0x11a>
    64b0:	9b e9       	ldi	r25, 0x9B	; 155
    64b2:	98 0f       	add	r25, r24
    64b4:	93 30       	cpi	r25, 0x03	; 3
    64b6:	08 f0       	brcs	.+2      	; 0x64ba <vfprintf+0x116>
    64b8:	66 c1       	rjmp	.+716    	; 0x6786 <vfprintf+0x3e2>
    64ba:	99 2d       	mov	r25, r9
    64bc:	9f 7e       	andi	r25, 0xEF	; 239
    64be:	96 ff       	sbrs	r25, 6
    64c0:	16 e0       	ldi	r17, 0x06	; 6
    64c2:	9f 73       	andi	r25, 0x3F	; 63
    64c4:	99 2e       	mov	r9, r25
    64c6:	85 36       	cpi	r24, 0x65	; 101
    64c8:	19 f4       	brne	.+6      	; 0x64d0 <vfprintf+0x12c>
    64ca:	90 64       	ori	r25, 0x40	; 64
    64cc:	99 2e       	mov	r9, r25
    64ce:	08 c0       	rjmp	.+16     	; 0x64e0 <vfprintf+0x13c>
    64d0:	86 36       	cpi	r24, 0x66	; 102
    64d2:	21 f4       	brne	.+8      	; 0x64dc <vfprintf+0x138>
    64d4:	39 2f       	mov	r19, r25
    64d6:	30 68       	ori	r19, 0x80	; 128
    64d8:	93 2e       	mov	r9, r19
    64da:	02 c0       	rjmp	.+4      	; 0x64e0 <vfprintf+0x13c>
    64dc:	11 11       	cpse	r17, r1
    64de:	11 50       	subi	r17, 0x01	; 1
    64e0:	97 fe       	sbrs	r9, 7
    64e2:	07 c0       	rjmp	.+14     	; 0x64f2 <vfprintf+0x14e>
    64e4:	1c 33       	cpi	r17, 0x3C	; 60
    64e6:	50 f4       	brcc	.+20     	; 0x64fc <vfprintf+0x158>
    64e8:	44 24       	eor	r4, r4
    64ea:	43 94       	inc	r4
    64ec:	41 0e       	add	r4, r17
    64ee:	27 e0       	ldi	r18, 0x07	; 7
    64f0:	0b c0       	rjmp	.+22     	; 0x6508 <vfprintf+0x164>
    64f2:	18 30       	cpi	r17, 0x08	; 8
    64f4:	38 f0       	brcs	.+14     	; 0x6504 <vfprintf+0x160>
    64f6:	27 e0       	ldi	r18, 0x07	; 7
    64f8:	17 e0       	ldi	r17, 0x07	; 7
    64fa:	05 c0       	rjmp	.+10     	; 0x6506 <vfprintf+0x162>
    64fc:	27 e0       	ldi	r18, 0x07	; 7
    64fe:	9c e3       	ldi	r25, 0x3C	; 60
    6500:	49 2e       	mov	r4, r25
    6502:	02 c0       	rjmp	.+4      	; 0x6508 <vfprintf+0x164>
    6504:	21 2f       	mov	r18, r17
    6506:	41 2c       	mov	r4, r1
    6508:	56 01       	movw	r10, r12
    650a:	84 e0       	ldi	r24, 0x04	; 4
    650c:	a8 0e       	add	r10, r24
    650e:	b1 1c       	adc	r11, r1
    6510:	f6 01       	movw	r30, r12
    6512:	60 81       	ld	r22, Z
    6514:	71 81       	ldd	r23, Z+1	; 0x01
    6516:	82 81       	ldd	r24, Z+2	; 0x02
    6518:	93 81       	ldd	r25, Z+3	; 0x03
    651a:	04 2d       	mov	r16, r4
    651c:	a3 01       	movw	r20, r6
    651e:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <__ftoa_engine>
    6522:	6c 01       	movw	r12, r24
    6524:	f9 81       	ldd	r31, Y+1	; 0x01
    6526:	fc 87       	std	Y+12, r31	; 0x0c
    6528:	f0 ff       	sbrs	r31, 0
    652a:	02 c0       	rjmp	.+4      	; 0x6530 <vfprintf+0x18c>
    652c:	f3 ff       	sbrs	r31, 3
    652e:	06 c0       	rjmp	.+12     	; 0x653c <vfprintf+0x198>
    6530:	91 fc       	sbrc	r9, 1
    6532:	06 c0       	rjmp	.+12     	; 0x6540 <vfprintf+0x19c>
    6534:	92 fe       	sbrs	r9, 2
    6536:	06 c0       	rjmp	.+12     	; 0x6544 <vfprintf+0x1a0>
    6538:	00 e2       	ldi	r16, 0x20	; 32
    653a:	05 c0       	rjmp	.+10     	; 0x6546 <vfprintf+0x1a2>
    653c:	0d e2       	ldi	r16, 0x2D	; 45
    653e:	03 c0       	rjmp	.+6      	; 0x6546 <vfprintf+0x1a2>
    6540:	0b e2       	ldi	r16, 0x2B	; 43
    6542:	01 c0       	rjmp	.+2      	; 0x6546 <vfprintf+0x1a2>
    6544:	00 e0       	ldi	r16, 0x00	; 0
    6546:	8c 85       	ldd	r24, Y+12	; 0x0c
    6548:	8c 70       	andi	r24, 0x0C	; 12
    654a:	19 f0       	breq	.+6      	; 0x6552 <vfprintf+0x1ae>
    654c:	01 11       	cpse	r16, r1
    654e:	5a c2       	rjmp	.+1204   	; 0x6a04 <vfprintf+0x660>
    6550:	9b c2       	rjmp	.+1334   	; 0x6a88 <vfprintf+0x6e4>
    6552:	97 fe       	sbrs	r9, 7
    6554:	10 c0       	rjmp	.+32     	; 0x6576 <vfprintf+0x1d2>
    6556:	4c 0c       	add	r4, r12
    6558:	fc 85       	ldd	r31, Y+12	; 0x0c
    655a:	f4 ff       	sbrs	r31, 4
    655c:	04 c0       	rjmp	.+8      	; 0x6566 <vfprintf+0x1c2>
    655e:	8a 81       	ldd	r24, Y+2	; 0x02
    6560:	81 33       	cpi	r24, 0x31	; 49
    6562:	09 f4       	brne	.+2      	; 0x6566 <vfprintf+0x1c2>
    6564:	4a 94       	dec	r4
    6566:	14 14       	cp	r1, r4
    6568:	74 f5       	brge	.+92     	; 0x65c6 <vfprintf+0x222>
    656a:	28 e0       	ldi	r18, 0x08	; 8
    656c:	24 15       	cp	r18, r4
    656e:	78 f5       	brcc	.+94     	; 0x65ce <vfprintf+0x22a>
    6570:	88 e0       	ldi	r24, 0x08	; 8
    6572:	48 2e       	mov	r4, r24
    6574:	2c c0       	rjmp	.+88     	; 0x65ce <vfprintf+0x22a>
    6576:	96 fc       	sbrc	r9, 6
    6578:	2a c0       	rjmp	.+84     	; 0x65ce <vfprintf+0x22a>
    657a:	81 2f       	mov	r24, r17
    657c:	90 e0       	ldi	r25, 0x00	; 0
    657e:	8c 15       	cp	r24, r12
    6580:	9d 05       	cpc	r25, r13
    6582:	9c f0       	brlt	.+38     	; 0x65aa <vfprintf+0x206>
    6584:	3c ef       	ldi	r19, 0xFC	; 252
    6586:	c3 16       	cp	r12, r19
    6588:	3f ef       	ldi	r19, 0xFF	; 255
    658a:	d3 06       	cpc	r13, r19
    658c:	74 f0       	brlt	.+28     	; 0x65aa <vfprintf+0x206>
    658e:	89 2d       	mov	r24, r9
    6590:	80 68       	ori	r24, 0x80	; 128
    6592:	98 2e       	mov	r9, r24
    6594:	0a c0       	rjmp	.+20     	; 0x65aa <vfprintf+0x206>
    6596:	e2 e0       	ldi	r30, 0x02	; 2
    6598:	f0 e0       	ldi	r31, 0x00	; 0
    659a:	ec 0f       	add	r30, r28
    659c:	fd 1f       	adc	r31, r29
    659e:	e1 0f       	add	r30, r17
    65a0:	f1 1d       	adc	r31, r1
    65a2:	80 81       	ld	r24, Z
    65a4:	80 33       	cpi	r24, 0x30	; 48
    65a6:	19 f4       	brne	.+6      	; 0x65ae <vfprintf+0x20a>
    65a8:	11 50       	subi	r17, 0x01	; 1
    65aa:	11 11       	cpse	r17, r1
    65ac:	f4 cf       	rjmp	.-24     	; 0x6596 <vfprintf+0x1f2>
    65ae:	97 fe       	sbrs	r9, 7
    65b0:	0e c0       	rjmp	.+28     	; 0x65ce <vfprintf+0x22a>
    65b2:	44 24       	eor	r4, r4
    65b4:	43 94       	inc	r4
    65b6:	41 0e       	add	r4, r17
    65b8:	81 2f       	mov	r24, r17
    65ba:	90 e0       	ldi	r25, 0x00	; 0
    65bc:	c8 16       	cp	r12, r24
    65be:	d9 06       	cpc	r13, r25
    65c0:	2c f4       	brge	.+10     	; 0x65cc <vfprintf+0x228>
    65c2:	1c 19       	sub	r17, r12
    65c4:	04 c0       	rjmp	.+8      	; 0x65ce <vfprintf+0x22a>
    65c6:	44 24       	eor	r4, r4
    65c8:	43 94       	inc	r4
    65ca:	01 c0       	rjmp	.+2      	; 0x65ce <vfprintf+0x22a>
    65cc:	10 e0       	ldi	r17, 0x00	; 0
    65ce:	97 fe       	sbrs	r9, 7
    65d0:	06 c0       	rjmp	.+12     	; 0x65de <vfprintf+0x23a>
    65d2:	1c 14       	cp	r1, r12
    65d4:	1d 04       	cpc	r1, r13
    65d6:	34 f4       	brge	.+12     	; 0x65e4 <vfprintf+0x240>
    65d8:	c6 01       	movw	r24, r12
    65da:	01 96       	adiw	r24, 0x01	; 1
    65dc:	05 c0       	rjmp	.+10     	; 0x65e8 <vfprintf+0x244>
    65de:	85 e0       	ldi	r24, 0x05	; 5
    65e0:	90 e0       	ldi	r25, 0x00	; 0
    65e2:	02 c0       	rjmp	.+4      	; 0x65e8 <vfprintf+0x244>
    65e4:	81 e0       	ldi	r24, 0x01	; 1
    65e6:	90 e0       	ldi	r25, 0x00	; 0
    65e8:	01 11       	cpse	r16, r1
    65ea:	01 96       	adiw	r24, 0x01	; 1
    65ec:	11 23       	and	r17, r17
    65ee:	31 f0       	breq	.+12     	; 0x65fc <vfprintf+0x258>
    65f0:	21 2f       	mov	r18, r17
    65f2:	30 e0       	ldi	r19, 0x00	; 0
    65f4:	2f 5f       	subi	r18, 0xFF	; 255
    65f6:	3f 4f       	sbci	r19, 0xFF	; 255
    65f8:	82 0f       	add	r24, r18
    65fa:	93 1f       	adc	r25, r19
    65fc:	25 2d       	mov	r18, r5
    65fe:	30 e0       	ldi	r19, 0x00	; 0
    6600:	82 17       	cp	r24, r18
    6602:	93 07       	cpc	r25, r19
    6604:	14 f4       	brge	.+4      	; 0x660a <vfprintf+0x266>
    6606:	58 1a       	sub	r5, r24
    6608:	01 c0       	rjmp	.+2      	; 0x660c <vfprintf+0x268>
    660a:	51 2c       	mov	r5, r1
    660c:	89 2d       	mov	r24, r9
    660e:	89 70       	andi	r24, 0x09	; 9
    6610:	49 f4       	brne	.+18     	; 0x6624 <vfprintf+0x280>
    6612:	55 20       	and	r5, r5
    6614:	39 f0       	breq	.+14     	; 0x6624 <vfprintf+0x280>
    6616:	b7 01       	movw	r22, r14
    6618:	80 e2       	ldi	r24, 0x20	; 32
    661a:	90 e0       	ldi	r25, 0x00	; 0
    661c:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    6620:	5a 94       	dec	r5
    6622:	f7 cf       	rjmp	.-18     	; 0x6612 <vfprintf+0x26e>
    6624:	00 23       	and	r16, r16
    6626:	29 f0       	breq	.+10     	; 0x6632 <vfprintf+0x28e>
    6628:	b7 01       	movw	r22, r14
    662a:	80 2f       	mov	r24, r16
    662c:	90 e0       	ldi	r25, 0x00	; 0
    662e:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    6632:	93 fc       	sbrc	r9, 3
    6634:	09 c0       	rjmp	.+18     	; 0x6648 <vfprintf+0x2a4>
    6636:	55 20       	and	r5, r5
    6638:	39 f0       	breq	.+14     	; 0x6648 <vfprintf+0x2a4>
    663a:	b7 01       	movw	r22, r14
    663c:	80 e3       	ldi	r24, 0x30	; 48
    663e:	90 e0       	ldi	r25, 0x00	; 0
    6640:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    6644:	5a 94       	dec	r5
    6646:	f7 cf       	rjmp	.-18     	; 0x6636 <vfprintf+0x292>
    6648:	97 fe       	sbrs	r9, 7
    664a:	4c c0       	rjmp	.+152    	; 0x66e4 <vfprintf+0x340>
    664c:	46 01       	movw	r8, r12
    664e:	d7 fe       	sbrs	r13, 7
    6650:	02 c0       	rjmp	.+4      	; 0x6656 <vfprintf+0x2b2>
    6652:	81 2c       	mov	r8, r1
    6654:	91 2c       	mov	r9, r1
    6656:	c6 01       	movw	r24, r12
    6658:	88 19       	sub	r24, r8
    665a:	99 09       	sbc	r25, r9
    665c:	f3 01       	movw	r30, r6
    665e:	e8 0f       	add	r30, r24
    6660:	f9 1f       	adc	r31, r25
    6662:	ed 87       	std	Y+13, r30	; 0x0d
    6664:	fe 87       	std	Y+14, r31	; 0x0e
    6666:	96 01       	movw	r18, r12
    6668:	24 19       	sub	r18, r4
    666a:	31 09       	sbc	r19, r1
    666c:	2f 87       	std	Y+15, r18	; 0x0f
    666e:	38 8b       	std	Y+16, r19	; 0x10
    6670:	01 2f       	mov	r16, r17
    6672:	10 e0       	ldi	r17, 0x00	; 0
    6674:	11 95       	neg	r17
    6676:	01 95       	neg	r16
    6678:	11 09       	sbc	r17, r1
    667a:	3f ef       	ldi	r19, 0xFF	; 255
    667c:	83 16       	cp	r8, r19
    667e:	93 06       	cpc	r9, r19
    6680:	29 f4       	brne	.+10     	; 0x668c <vfprintf+0x2e8>
    6682:	b7 01       	movw	r22, r14
    6684:	8e e2       	ldi	r24, 0x2E	; 46
    6686:	90 e0       	ldi	r25, 0x00	; 0
    6688:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    668c:	c8 14       	cp	r12, r8
    668e:	d9 04       	cpc	r13, r9
    6690:	4c f0       	brlt	.+18     	; 0x66a4 <vfprintf+0x300>
    6692:	8f 85       	ldd	r24, Y+15	; 0x0f
    6694:	98 89       	ldd	r25, Y+16	; 0x10
    6696:	88 15       	cp	r24, r8
    6698:	99 05       	cpc	r25, r9
    669a:	24 f4       	brge	.+8      	; 0x66a4 <vfprintf+0x300>
    669c:	ed 85       	ldd	r30, Y+13	; 0x0d
    669e:	fe 85       	ldd	r31, Y+14	; 0x0e
    66a0:	81 81       	ldd	r24, Z+1	; 0x01
    66a2:	01 c0       	rjmp	.+2      	; 0x66a6 <vfprintf+0x302>
    66a4:	80 e3       	ldi	r24, 0x30	; 48
    66a6:	f1 e0       	ldi	r31, 0x01	; 1
    66a8:	8f 1a       	sub	r8, r31
    66aa:	91 08       	sbc	r9, r1
    66ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    66ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    66b0:	2f 5f       	subi	r18, 0xFF	; 255
    66b2:	3f 4f       	sbci	r19, 0xFF	; 255
    66b4:	2d 87       	std	Y+13, r18	; 0x0d
    66b6:	3e 87       	std	Y+14, r19	; 0x0e
    66b8:	80 16       	cp	r8, r16
    66ba:	91 06       	cpc	r9, r17
    66bc:	2c f0       	brlt	.+10     	; 0x66c8 <vfprintf+0x324>
    66be:	b7 01       	movw	r22, r14
    66c0:	90 e0       	ldi	r25, 0x00	; 0
    66c2:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    66c6:	d9 cf       	rjmp	.-78     	; 0x667a <vfprintf+0x2d6>
    66c8:	c8 14       	cp	r12, r8
    66ca:	d9 04       	cpc	r13, r9
    66cc:	41 f4       	brne	.+16     	; 0x66de <vfprintf+0x33a>
    66ce:	9a 81       	ldd	r25, Y+2	; 0x02
    66d0:	96 33       	cpi	r25, 0x36	; 54
    66d2:	20 f4       	brcc	.+8      	; 0x66dc <vfprintf+0x338>
    66d4:	95 33       	cpi	r25, 0x35	; 53
    66d6:	19 f4       	brne	.+6      	; 0x66de <vfprintf+0x33a>
    66d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    66da:	34 ff       	sbrs	r19, 4
    66dc:	81 e3       	ldi	r24, 0x31	; 49
    66de:	b7 01       	movw	r22, r14
    66e0:	90 e0       	ldi	r25, 0x00	; 0
    66e2:	4e c0       	rjmp	.+156    	; 0x6780 <vfprintf+0x3dc>
    66e4:	8a 81       	ldd	r24, Y+2	; 0x02
    66e6:	81 33       	cpi	r24, 0x31	; 49
    66e8:	19 f0       	breq	.+6      	; 0x66f0 <vfprintf+0x34c>
    66ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    66ec:	9f 7e       	andi	r25, 0xEF	; 239
    66ee:	9c 87       	std	Y+12, r25	; 0x0c
    66f0:	b7 01       	movw	r22, r14
    66f2:	90 e0       	ldi	r25, 0x00	; 0
    66f4:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    66f8:	11 11       	cpse	r17, r1
    66fa:	05 c0       	rjmp	.+10     	; 0x6706 <vfprintf+0x362>
    66fc:	94 fc       	sbrc	r9, 4
    66fe:	18 c0       	rjmp	.+48     	; 0x6730 <vfprintf+0x38c>
    6700:	85 e6       	ldi	r24, 0x65	; 101
    6702:	90 e0       	ldi	r25, 0x00	; 0
    6704:	17 c0       	rjmp	.+46     	; 0x6734 <vfprintf+0x390>
    6706:	b7 01       	movw	r22, r14
    6708:	8e e2       	ldi	r24, 0x2E	; 46
    670a:	90 e0       	ldi	r25, 0x00	; 0
    670c:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    6710:	1e 5f       	subi	r17, 0xFE	; 254
    6712:	82 e0       	ldi	r24, 0x02	; 2
    6714:	01 e0       	ldi	r16, 0x01	; 1
    6716:	08 0f       	add	r16, r24
    6718:	f3 01       	movw	r30, r6
    671a:	e8 0f       	add	r30, r24
    671c:	f1 1d       	adc	r31, r1
    671e:	80 81       	ld	r24, Z
    6720:	b7 01       	movw	r22, r14
    6722:	90 e0       	ldi	r25, 0x00	; 0
    6724:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    6728:	80 2f       	mov	r24, r16
    672a:	01 13       	cpse	r16, r17
    672c:	f3 cf       	rjmp	.-26     	; 0x6714 <vfprintf+0x370>
    672e:	e6 cf       	rjmp	.-52     	; 0x66fc <vfprintf+0x358>
    6730:	85 e4       	ldi	r24, 0x45	; 69
    6732:	90 e0       	ldi	r25, 0x00	; 0
    6734:	b7 01       	movw	r22, r14
    6736:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    673a:	d7 fc       	sbrc	r13, 7
    673c:	06 c0       	rjmp	.+12     	; 0x674a <vfprintf+0x3a6>
    673e:	c1 14       	cp	r12, r1
    6740:	d1 04       	cpc	r13, r1
    6742:	41 f4       	brne	.+16     	; 0x6754 <vfprintf+0x3b0>
    6744:	ec 85       	ldd	r30, Y+12	; 0x0c
    6746:	e4 ff       	sbrs	r30, 4
    6748:	05 c0       	rjmp	.+10     	; 0x6754 <vfprintf+0x3b0>
    674a:	d1 94       	neg	r13
    674c:	c1 94       	neg	r12
    674e:	d1 08       	sbc	r13, r1
    6750:	8d e2       	ldi	r24, 0x2D	; 45
    6752:	01 c0       	rjmp	.+2      	; 0x6756 <vfprintf+0x3b2>
    6754:	8b e2       	ldi	r24, 0x2B	; 43
    6756:	b7 01       	movw	r22, r14
    6758:	90 e0       	ldi	r25, 0x00	; 0
    675a:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    675e:	80 e3       	ldi	r24, 0x30	; 48
    6760:	2a e0       	ldi	r18, 0x0A	; 10
    6762:	c2 16       	cp	r12, r18
    6764:	d1 04       	cpc	r13, r1
    6766:	2c f0       	brlt	.+10     	; 0x6772 <vfprintf+0x3ce>
    6768:	8f 5f       	subi	r24, 0xFF	; 255
    676a:	fa e0       	ldi	r31, 0x0A	; 10
    676c:	cf 1a       	sub	r12, r31
    676e:	d1 08       	sbc	r13, r1
    6770:	f7 cf       	rjmp	.-18     	; 0x6760 <vfprintf+0x3bc>
    6772:	b7 01       	movw	r22, r14
    6774:	90 e0       	ldi	r25, 0x00	; 0
    6776:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    677a:	b7 01       	movw	r22, r14
    677c:	c6 01       	movw	r24, r12
    677e:	c0 96       	adiw	r24, 0x30	; 48
    6780:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    6784:	54 c1       	rjmp	.+680    	; 0x6a2e <vfprintf+0x68a>
    6786:	83 36       	cpi	r24, 0x63	; 99
    6788:	31 f0       	breq	.+12     	; 0x6796 <vfprintf+0x3f2>
    678a:	83 37       	cpi	r24, 0x73	; 115
    678c:	79 f0       	breq	.+30     	; 0x67ac <vfprintf+0x408>
    678e:	83 35       	cpi	r24, 0x53	; 83
    6790:	09 f0       	breq	.+2      	; 0x6794 <vfprintf+0x3f0>
    6792:	56 c0       	rjmp	.+172    	; 0x6840 <vfprintf+0x49c>
    6794:	20 c0       	rjmp	.+64     	; 0x67d6 <vfprintf+0x432>
    6796:	56 01       	movw	r10, r12
    6798:	32 e0       	ldi	r19, 0x02	; 2
    679a:	a3 0e       	add	r10, r19
    679c:	b1 1c       	adc	r11, r1
    679e:	f6 01       	movw	r30, r12
    67a0:	80 81       	ld	r24, Z
    67a2:	89 83       	std	Y+1, r24	; 0x01
    67a4:	01 e0       	ldi	r16, 0x01	; 1
    67a6:	10 e0       	ldi	r17, 0x00	; 0
    67a8:	63 01       	movw	r12, r6
    67aa:	12 c0       	rjmp	.+36     	; 0x67d0 <vfprintf+0x42c>
    67ac:	56 01       	movw	r10, r12
    67ae:	f2 e0       	ldi	r31, 0x02	; 2
    67b0:	af 0e       	add	r10, r31
    67b2:	b1 1c       	adc	r11, r1
    67b4:	f6 01       	movw	r30, r12
    67b6:	c0 80       	ld	r12, Z
    67b8:	d1 80       	ldd	r13, Z+1	; 0x01
    67ba:	96 fe       	sbrs	r9, 6
    67bc:	03 c0       	rjmp	.+6      	; 0x67c4 <vfprintf+0x420>
    67be:	61 2f       	mov	r22, r17
    67c0:	70 e0       	ldi	r23, 0x00	; 0
    67c2:	02 c0       	rjmp	.+4      	; 0x67c8 <vfprintf+0x424>
    67c4:	6f ef       	ldi	r22, 0xFF	; 255
    67c6:	7f ef       	ldi	r23, 0xFF	; 255
    67c8:	c6 01       	movw	r24, r12
    67ca:	0e 94 43 37 	call	0x6e86	; 0x6e86 <strnlen>
    67ce:	8c 01       	movw	r16, r24
    67d0:	f9 2d       	mov	r31, r9
    67d2:	ff 77       	andi	r31, 0x7F	; 127
    67d4:	14 c0       	rjmp	.+40     	; 0x67fe <vfprintf+0x45a>
    67d6:	56 01       	movw	r10, r12
    67d8:	22 e0       	ldi	r18, 0x02	; 2
    67da:	a2 0e       	add	r10, r18
    67dc:	b1 1c       	adc	r11, r1
    67de:	f6 01       	movw	r30, r12
    67e0:	c0 80       	ld	r12, Z
    67e2:	d1 80       	ldd	r13, Z+1	; 0x01
    67e4:	96 fe       	sbrs	r9, 6
    67e6:	03 c0       	rjmp	.+6      	; 0x67ee <vfprintf+0x44a>
    67e8:	61 2f       	mov	r22, r17
    67ea:	70 e0       	ldi	r23, 0x00	; 0
    67ec:	02 c0       	rjmp	.+4      	; 0x67f2 <vfprintf+0x44e>
    67ee:	6f ef       	ldi	r22, 0xFF	; 255
    67f0:	7f ef       	ldi	r23, 0xFF	; 255
    67f2:	c6 01       	movw	r24, r12
    67f4:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <strnlen_P>
    67f8:	8c 01       	movw	r16, r24
    67fa:	f9 2d       	mov	r31, r9
    67fc:	f0 68       	ori	r31, 0x80	; 128
    67fe:	9f 2e       	mov	r9, r31
    6800:	f3 fd       	sbrc	r31, 3
    6802:	1a c0       	rjmp	.+52     	; 0x6838 <vfprintf+0x494>
    6804:	85 2d       	mov	r24, r5
    6806:	90 e0       	ldi	r25, 0x00	; 0
    6808:	08 17       	cp	r16, r24
    680a:	19 07       	cpc	r17, r25
    680c:	a8 f4       	brcc	.+42     	; 0x6838 <vfprintf+0x494>
    680e:	b7 01       	movw	r22, r14
    6810:	80 e2       	ldi	r24, 0x20	; 32
    6812:	90 e0       	ldi	r25, 0x00	; 0
    6814:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    6818:	5a 94       	dec	r5
    681a:	f4 cf       	rjmp	.-24     	; 0x6804 <vfprintf+0x460>
    681c:	f6 01       	movw	r30, r12
    681e:	97 fc       	sbrc	r9, 7
    6820:	85 91       	lpm	r24, Z+
    6822:	97 fe       	sbrs	r9, 7
    6824:	81 91       	ld	r24, Z+
    6826:	6f 01       	movw	r12, r30
    6828:	b7 01       	movw	r22, r14
    682a:	90 e0       	ldi	r25, 0x00	; 0
    682c:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    6830:	51 10       	cpse	r5, r1
    6832:	5a 94       	dec	r5
    6834:	01 50       	subi	r16, 0x01	; 1
    6836:	11 09       	sbc	r17, r1
    6838:	01 15       	cp	r16, r1
    683a:	11 05       	cpc	r17, r1
    683c:	79 f7       	brne	.-34     	; 0x681c <vfprintf+0x478>
    683e:	f7 c0       	rjmp	.+494    	; 0x6a2e <vfprintf+0x68a>
    6840:	84 36       	cpi	r24, 0x64	; 100
    6842:	11 f0       	breq	.+4      	; 0x6848 <vfprintf+0x4a4>
    6844:	89 36       	cpi	r24, 0x69	; 105
    6846:	61 f5       	brne	.+88     	; 0x68a0 <vfprintf+0x4fc>
    6848:	56 01       	movw	r10, r12
    684a:	97 fe       	sbrs	r9, 7
    684c:	09 c0       	rjmp	.+18     	; 0x6860 <vfprintf+0x4bc>
    684e:	24 e0       	ldi	r18, 0x04	; 4
    6850:	a2 0e       	add	r10, r18
    6852:	b1 1c       	adc	r11, r1
    6854:	f6 01       	movw	r30, r12
    6856:	60 81       	ld	r22, Z
    6858:	71 81       	ldd	r23, Z+1	; 0x01
    685a:	82 81       	ldd	r24, Z+2	; 0x02
    685c:	93 81       	ldd	r25, Z+3	; 0x03
    685e:	0a c0       	rjmp	.+20     	; 0x6874 <vfprintf+0x4d0>
    6860:	f2 e0       	ldi	r31, 0x02	; 2
    6862:	af 0e       	add	r10, r31
    6864:	b1 1c       	adc	r11, r1
    6866:	f6 01       	movw	r30, r12
    6868:	60 81       	ld	r22, Z
    686a:	71 81       	ldd	r23, Z+1	; 0x01
    686c:	07 2e       	mov	r0, r23
    686e:	00 0c       	add	r0, r0
    6870:	88 0b       	sbc	r24, r24
    6872:	99 0b       	sbc	r25, r25
    6874:	f9 2d       	mov	r31, r9
    6876:	ff 76       	andi	r31, 0x6F	; 111
    6878:	9f 2e       	mov	r9, r31
    687a:	97 ff       	sbrs	r25, 7
    687c:	09 c0       	rjmp	.+18     	; 0x6890 <vfprintf+0x4ec>
    687e:	90 95       	com	r25
    6880:	80 95       	com	r24
    6882:	70 95       	com	r23
    6884:	61 95       	neg	r22
    6886:	7f 4f       	sbci	r23, 0xFF	; 255
    6888:	8f 4f       	sbci	r24, 0xFF	; 255
    688a:	9f 4f       	sbci	r25, 0xFF	; 255
    688c:	f0 68       	ori	r31, 0x80	; 128
    688e:	9f 2e       	mov	r9, r31
    6890:	2a e0       	ldi	r18, 0x0A	; 10
    6892:	30 e0       	ldi	r19, 0x00	; 0
    6894:	a3 01       	movw	r20, r6
    6896:	0e 94 c9 37 	call	0x6f92	; 0x6f92 <__ultoa_invert>
    689a:	c8 2e       	mov	r12, r24
    689c:	c6 18       	sub	r12, r6
    689e:	3f c0       	rjmp	.+126    	; 0x691e <vfprintf+0x57a>
    68a0:	09 2d       	mov	r16, r9
    68a2:	85 37       	cpi	r24, 0x75	; 117
    68a4:	21 f4       	brne	.+8      	; 0x68ae <vfprintf+0x50a>
    68a6:	0f 7e       	andi	r16, 0xEF	; 239
    68a8:	2a e0       	ldi	r18, 0x0A	; 10
    68aa:	30 e0       	ldi	r19, 0x00	; 0
    68ac:	1d c0       	rjmp	.+58     	; 0x68e8 <vfprintf+0x544>
    68ae:	09 7f       	andi	r16, 0xF9	; 249
    68b0:	8f 36       	cpi	r24, 0x6F	; 111
    68b2:	91 f0       	breq	.+36     	; 0x68d8 <vfprintf+0x534>
    68b4:	18 f4       	brcc	.+6      	; 0x68bc <vfprintf+0x518>
    68b6:	88 35       	cpi	r24, 0x58	; 88
    68b8:	59 f0       	breq	.+22     	; 0x68d0 <vfprintf+0x52c>
    68ba:	c3 c0       	rjmp	.+390    	; 0x6a42 <vfprintf+0x69e>
    68bc:	80 37       	cpi	r24, 0x70	; 112
    68be:	19 f0       	breq	.+6      	; 0x68c6 <vfprintf+0x522>
    68c0:	88 37       	cpi	r24, 0x78	; 120
    68c2:	11 f0       	breq	.+4      	; 0x68c8 <vfprintf+0x524>
    68c4:	be c0       	rjmp	.+380    	; 0x6a42 <vfprintf+0x69e>
    68c6:	00 61       	ori	r16, 0x10	; 16
    68c8:	04 ff       	sbrs	r16, 4
    68ca:	09 c0       	rjmp	.+18     	; 0x68de <vfprintf+0x53a>
    68cc:	04 60       	ori	r16, 0x04	; 4
    68ce:	07 c0       	rjmp	.+14     	; 0x68de <vfprintf+0x53a>
    68d0:	94 fe       	sbrs	r9, 4
    68d2:	08 c0       	rjmp	.+16     	; 0x68e4 <vfprintf+0x540>
    68d4:	06 60       	ori	r16, 0x06	; 6
    68d6:	06 c0       	rjmp	.+12     	; 0x68e4 <vfprintf+0x540>
    68d8:	28 e0       	ldi	r18, 0x08	; 8
    68da:	30 e0       	ldi	r19, 0x00	; 0
    68dc:	05 c0       	rjmp	.+10     	; 0x68e8 <vfprintf+0x544>
    68de:	20 e1       	ldi	r18, 0x10	; 16
    68e0:	30 e0       	ldi	r19, 0x00	; 0
    68e2:	02 c0       	rjmp	.+4      	; 0x68e8 <vfprintf+0x544>
    68e4:	20 e1       	ldi	r18, 0x10	; 16
    68e6:	32 e0       	ldi	r19, 0x02	; 2
    68e8:	56 01       	movw	r10, r12
    68ea:	07 ff       	sbrs	r16, 7
    68ec:	09 c0       	rjmp	.+18     	; 0x6900 <vfprintf+0x55c>
    68ee:	84 e0       	ldi	r24, 0x04	; 4
    68f0:	a8 0e       	add	r10, r24
    68f2:	b1 1c       	adc	r11, r1
    68f4:	f6 01       	movw	r30, r12
    68f6:	60 81       	ld	r22, Z
    68f8:	71 81       	ldd	r23, Z+1	; 0x01
    68fa:	82 81       	ldd	r24, Z+2	; 0x02
    68fc:	93 81       	ldd	r25, Z+3	; 0x03
    68fe:	08 c0       	rjmp	.+16     	; 0x6910 <vfprintf+0x56c>
    6900:	f2 e0       	ldi	r31, 0x02	; 2
    6902:	af 0e       	add	r10, r31
    6904:	b1 1c       	adc	r11, r1
    6906:	f6 01       	movw	r30, r12
    6908:	60 81       	ld	r22, Z
    690a:	71 81       	ldd	r23, Z+1	; 0x01
    690c:	80 e0       	ldi	r24, 0x00	; 0
    690e:	90 e0       	ldi	r25, 0x00	; 0
    6910:	a3 01       	movw	r20, r6
    6912:	0e 94 c9 37 	call	0x6f92	; 0x6f92 <__ultoa_invert>
    6916:	c8 2e       	mov	r12, r24
    6918:	c6 18       	sub	r12, r6
    691a:	0f 77       	andi	r16, 0x7F	; 127
    691c:	90 2e       	mov	r9, r16
    691e:	96 fe       	sbrs	r9, 6
    6920:	0b c0       	rjmp	.+22     	; 0x6938 <vfprintf+0x594>
    6922:	09 2d       	mov	r16, r9
    6924:	0e 7f       	andi	r16, 0xFE	; 254
    6926:	c1 16       	cp	r12, r17
    6928:	50 f4       	brcc	.+20     	; 0x693e <vfprintf+0x59a>
    692a:	94 fe       	sbrs	r9, 4
    692c:	0a c0       	rjmp	.+20     	; 0x6942 <vfprintf+0x59e>
    692e:	92 fc       	sbrc	r9, 2
    6930:	08 c0       	rjmp	.+16     	; 0x6942 <vfprintf+0x59e>
    6932:	09 2d       	mov	r16, r9
    6934:	0e 7e       	andi	r16, 0xEE	; 238
    6936:	05 c0       	rjmp	.+10     	; 0x6942 <vfprintf+0x59e>
    6938:	dc 2c       	mov	r13, r12
    693a:	09 2d       	mov	r16, r9
    693c:	03 c0       	rjmp	.+6      	; 0x6944 <vfprintf+0x5a0>
    693e:	dc 2c       	mov	r13, r12
    6940:	01 c0       	rjmp	.+2      	; 0x6944 <vfprintf+0x5a0>
    6942:	d1 2e       	mov	r13, r17
    6944:	04 ff       	sbrs	r16, 4
    6946:	0d c0       	rjmp	.+26     	; 0x6962 <vfprintf+0x5be>
    6948:	fe 01       	movw	r30, r28
    694a:	ec 0d       	add	r30, r12
    694c:	f1 1d       	adc	r31, r1
    694e:	80 81       	ld	r24, Z
    6950:	80 33       	cpi	r24, 0x30	; 48
    6952:	11 f4       	brne	.+4      	; 0x6958 <vfprintf+0x5b4>
    6954:	09 7e       	andi	r16, 0xE9	; 233
    6956:	09 c0       	rjmp	.+18     	; 0x696a <vfprintf+0x5c6>
    6958:	02 ff       	sbrs	r16, 2
    695a:	06 c0       	rjmp	.+12     	; 0x6968 <vfprintf+0x5c4>
    695c:	d3 94       	inc	r13
    695e:	d3 94       	inc	r13
    6960:	04 c0       	rjmp	.+8      	; 0x696a <vfprintf+0x5c6>
    6962:	80 2f       	mov	r24, r16
    6964:	86 78       	andi	r24, 0x86	; 134
    6966:	09 f0       	breq	.+2      	; 0x696a <vfprintf+0x5c6>
    6968:	d3 94       	inc	r13
    696a:	03 fd       	sbrc	r16, 3
    696c:	11 c0       	rjmp	.+34     	; 0x6990 <vfprintf+0x5ec>
    696e:	00 ff       	sbrs	r16, 0
    6970:	06 c0       	rjmp	.+12     	; 0x697e <vfprintf+0x5da>
    6972:	1c 2d       	mov	r17, r12
    6974:	d5 14       	cp	r13, r5
    6976:	80 f4       	brcc	.+32     	; 0x6998 <vfprintf+0x5f4>
    6978:	15 0d       	add	r17, r5
    697a:	1d 19       	sub	r17, r13
    697c:	0d c0       	rjmp	.+26     	; 0x6998 <vfprintf+0x5f4>
    697e:	d5 14       	cp	r13, r5
    6980:	58 f4       	brcc	.+22     	; 0x6998 <vfprintf+0x5f4>
    6982:	b7 01       	movw	r22, r14
    6984:	80 e2       	ldi	r24, 0x20	; 32
    6986:	90 e0       	ldi	r25, 0x00	; 0
    6988:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    698c:	d3 94       	inc	r13
    698e:	f7 cf       	rjmp	.-18     	; 0x697e <vfprintf+0x5da>
    6990:	d5 14       	cp	r13, r5
    6992:	10 f4       	brcc	.+4      	; 0x6998 <vfprintf+0x5f4>
    6994:	5d 18       	sub	r5, r13
    6996:	01 c0       	rjmp	.+2      	; 0x699a <vfprintf+0x5f6>
    6998:	51 2c       	mov	r5, r1
    699a:	04 ff       	sbrs	r16, 4
    699c:	10 c0       	rjmp	.+32     	; 0x69be <vfprintf+0x61a>
    699e:	b7 01       	movw	r22, r14
    69a0:	80 e3       	ldi	r24, 0x30	; 48
    69a2:	90 e0       	ldi	r25, 0x00	; 0
    69a4:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    69a8:	02 ff       	sbrs	r16, 2
    69aa:	17 c0       	rjmp	.+46     	; 0x69da <vfprintf+0x636>
    69ac:	01 fd       	sbrc	r16, 1
    69ae:	03 c0       	rjmp	.+6      	; 0x69b6 <vfprintf+0x612>
    69b0:	88 e7       	ldi	r24, 0x78	; 120
    69b2:	90 e0       	ldi	r25, 0x00	; 0
    69b4:	02 c0       	rjmp	.+4      	; 0x69ba <vfprintf+0x616>
    69b6:	88 e5       	ldi	r24, 0x58	; 88
    69b8:	90 e0       	ldi	r25, 0x00	; 0
    69ba:	b7 01       	movw	r22, r14
    69bc:	0c c0       	rjmp	.+24     	; 0x69d6 <vfprintf+0x632>
    69be:	80 2f       	mov	r24, r16
    69c0:	86 78       	andi	r24, 0x86	; 134
    69c2:	59 f0       	breq	.+22     	; 0x69da <vfprintf+0x636>
    69c4:	01 ff       	sbrs	r16, 1
    69c6:	02 c0       	rjmp	.+4      	; 0x69cc <vfprintf+0x628>
    69c8:	8b e2       	ldi	r24, 0x2B	; 43
    69ca:	01 c0       	rjmp	.+2      	; 0x69ce <vfprintf+0x62a>
    69cc:	80 e2       	ldi	r24, 0x20	; 32
    69ce:	07 fd       	sbrc	r16, 7
    69d0:	8d e2       	ldi	r24, 0x2D	; 45
    69d2:	b7 01       	movw	r22, r14
    69d4:	90 e0       	ldi	r25, 0x00	; 0
    69d6:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    69da:	c1 16       	cp	r12, r17
    69dc:	38 f4       	brcc	.+14     	; 0x69ec <vfprintf+0x648>
    69de:	b7 01       	movw	r22, r14
    69e0:	80 e3       	ldi	r24, 0x30	; 48
    69e2:	90 e0       	ldi	r25, 0x00	; 0
    69e4:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    69e8:	11 50       	subi	r17, 0x01	; 1
    69ea:	f7 cf       	rjmp	.-18     	; 0x69da <vfprintf+0x636>
    69ec:	ca 94       	dec	r12
    69ee:	f3 01       	movw	r30, r6
    69f0:	ec 0d       	add	r30, r12
    69f2:	f1 1d       	adc	r31, r1
    69f4:	80 81       	ld	r24, Z
    69f6:	b7 01       	movw	r22, r14
    69f8:	90 e0       	ldi	r25, 0x00	; 0
    69fa:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    69fe:	c1 10       	cpse	r12, r1
    6a00:	f5 cf       	rjmp	.-22     	; 0x69ec <vfprintf+0x648>
    6a02:	15 c0       	rjmp	.+42     	; 0x6a2e <vfprintf+0x68a>
    6a04:	f4 e0       	ldi	r31, 0x04	; 4
    6a06:	f5 15       	cp	r31, r5
    6a08:	60 f5       	brcc	.+88     	; 0x6a62 <vfprintf+0x6be>
    6a0a:	84 e0       	ldi	r24, 0x04	; 4
    6a0c:	58 1a       	sub	r5, r24
    6a0e:	93 fe       	sbrs	r9, 3
    6a10:	1f c0       	rjmp	.+62     	; 0x6a50 <vfprintf+0x6ac>
    6a12:	01 11       	cpse	r16, r1
    6a14:	27 c0       	rjmp	.+78     	; 0x6a64 <vfprintf+0x6c0>
    6a16:	2c 85       	ldd	r18, Y+12	; 0x0c
    6a18:	23 ff       	sbrs	r18, 3
    6a1a:	2a c0       	rjmp	.+84     	; 0x6a70 <vfprintf+0x6cc>
    6a1c:	06 e6       	ldi	r16, 0x66	; 102
    6a1e:	11 e0       	ldi	r17, 0x01	; 1
    6a20:	39 2d       	mov	r19, r9
    6a22:	30 71       	andi	r19, 0x10	; 16
    6a24:	93 2e       	mov	r9, r19
    6a26:	f8 01       	movw	r30, r16
    6a28:	84 91       	lpm	r24, Z
    6a2a:	81 11       	cpse	r24, r1
    6a2c:	24 c0       	rjmp	.+72     	; 0x6a76 <vfprintf+0x6d2>
    6a2e:	55 20       	and	r5, r5
    6a30:	09 f4       	brne	.+2      	; 0x6a34 <vfprintf+0x690>
    6a32:	e4 cc       	rjmp	.-1592   	; 0x63fc <vfprintf+0x58>
    6a34:	b7 01       	movw	r22, r14
    6a36:	80 e2       	ldi	r24, 0x20	; 32
    6a38:	90 e0       	ldi	r25, 0x00	; 0
    6a3a:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    6a3e:	5a 94       	dec	r5
    6a40:	f6 cf       	rjmp	.-20     	; 0x6a2e <vfprintf+0x68a>
    6a42:	f7 01       	movw	r30, r14
    6a44:	86 81       	ldd	r24, Z+6	; 0x06
    6a46:	97 81       	ldd	r25, Z+7	; 0x07
    6a48:	26 c0       	rjmp	.+76     	; 0x6a96 <vfprintf+0x6f2>
    6a4a:	8f ef       	ldi	r24, 0xFF	; 255
    6a4c:	9f ef       	ldi	r25, 0xFF	; 255
    6a4e:	23 c0       	rjmp	.+70     	; 0x6a96 <vfprintf+0x6f2>
    6a50:	b7 01       	movw	r22, r14
    6a52:	80 e2       	ldi	r24, 0x20	; 32
    6a54:	90 e0       	ldi	r25, 0x00	; 0
    6a56:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    6a5a:	5a 94       	dec	r5
    6a5c:	51 10       	cpse	r5, r1
    6a5e:	f8 cf       	rjmp	.-16     	; 0x6a50 <vfprintf+0x6ac>
    6a60:	d8 cf       	rjmp	.-80     	; 0x6a12 <vfprintf+0x66e>
    6a62:	51 2c       	mov	r5, r1
    6a64:	b7 01       	movw	r22, r14
    6a66:	80 2f       	mov	r24, r16
    6a68:	90 e0       	ldi	r25, 0x00	; 0
    6a6a:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    6a6e:	d3 cf       	rjmp	.-90     	; 0x6a16 <vfprintf+0x672>
    6a70:	0a e6       	ldi	r16, 0x6A	; 106
    6a72:	11 e0       	ldi	r17, 0x01	; 1
    6a74:	d5 cf       	rjmp	.-86     	; 0x6a20 <vfprintf+0x67c>
    6a76:	91 10       	cpse	r9, r1
    6a78:	80 52       	subi	r24, 0x20	; 32
    6a7a:	b7 01       	movw	r22, r14
    6a7c:	90 e0       	ldi	r25, 0x00	; 0
    6a7e:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <fputc>
    6a82:	0f 5f       	subi	r16, 0xFF	; 255
    6a84:	1f 4f       	sbci	r17, 0xFF	; 255
    6a86:	cf cf       	rjmp	.-98     	; 0x6a26 <vfprintf+0x682>
    6a88:	23 e0       	ldi	r18, 0x03	; 3
    6a8a:	25 15       	cp	r18, r5
    6a8c:	10 f4       	brcc	.+4      	; 0x6a92 <vfprintf+0x6ee>
    6a8e:	83 e0       	ldi	r24, 0x03	; 3
    6a90:	bd cf       	rjmp	.-134    	; 0x6a0c <vfprintf+0x668>
    6a92:	51 2c       	mov	r5, r1
    6a94:	c0 cf       	rjmp	.-128    	; 0x6a16 <vfprintf+0x672>
    6a96:	60 96       	adiw	r28, 0x10	; 16
    6a98:	e2 e1       	ldi	r30, 0x12	; 18
    6a9a:	0c 94 ac 35 	jmp	0x6b58	; 0x6b58 <__epilogue_restores__>

00006a9e <__divmodhi4>:
    6a9e:	97 fb       	bst	r25, 7
    6aa0:	07 2e       	mov	r0, r23
    6aa2:	16 f4       	brtc	.+4      	; 0x6aa8 <__divmodhi4+0xa>
    6aa4:	00 94       	com	r0
    6aa6:	07 d0       	rcall	.+14     	; 0x6ab6 <__divmodhi4_neg1>
    6aa8:	77 fd       	sbrc	r23, 7
    6aaa:	09 d0       	rcall	.+18     	; 0x6abe <__divmodhi4_neg2>
    6aac:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <__udivmodhi4>
    6ab0:	07 fc       	sbrc	r0, 7
    6ab2:	05 d0       	rcall	.+10     	; 0x6abe <__divmodhi4_neg2>
    6ab4:	3e f4       	brtc	.+14     	; 0x6ac4 <__divmodhi4_exit>

00006ab6 <__divmodhi4_neg1>:
    6ab6:	90 95       	com	r25
    6ab8:	81 95       	neg	r24
    6aba:	9f 4f       	sbci	r25, 0xFF	; 255
    6abc:	08 95       	ret

00006abe <__divmodhi4_neg2>:
    6abe:	70 95       	com	r23
    6ac0:	61 95       	neg	r22
    6ac2:	7f 4f       	sbci	r23, 0xFF	; 255

00006ac4 <__divmodhi4_exit>:
    6ac4:	08 95       	ret

00006ac6 <__divmodsi4>:
    6ac6:	05 2e       	mov	r0, r21
    6ac8:	97 fb       	bst	r25, 7
    6aca:	1e f4       	brtc	.+6      	; 0x6ad2 <__divmodsi4+0xc>
    6acc:	00 94       	com	r0
    6ace:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <__negsi2>
    6ad2:	57 fd       	sbrc	r21, 7
    6ad4:	07 d0       	rcall	.+14     	; 0x6ae4 <__divmodsi4_neg2>
    6ad6:	0e 94 d8 35 	call	0x6bb0	; 0x6bb0 <__udivmodsi4>
    6ada:	07 fc       	sbrc	r0, 7
    6adc:	03 d0       	rcall	.+6      	; 0x6ae4 <__divmodsi4_neg2>
    6ade:	4e f4       	brtc	.+18     	; 0x6af2 <__divmodsi4_exit>
    6ae0:	0c 94 7a 35 	jmp	0x6af4	; 0x6af4 <__negsi2>

00006ae4 <__divmodsi4_neg2>:
    6ae4:	50 95       	com	r21
    6ae6:	40 95       	com	r20
    6ae8:	30 95       	com	r19
    6aea:	21 95       	neg	r18
    6aec:	3f 4f       	sbci	r19, 0xFF	; 255
    6aee:	4f 4f       	sbci	r20, 0xFF	; 255
    6af0:	5f 4f       	sbci	r21, 0xFF	; 255

00006af2 <__divmodsi4_exit>:
    6af2:	08 95       	ret

00006af4 <__negsi2>:
    6af4:	90 95       	com	r25
    6af6:	80 95       	com	r24
    6af8:	70 95       	com	r23
    6afa:	61 95       	neg	r22
    6afc:	7f 4f       	sbci	r23, 0xFF	; 255
    6afe:	8f 4f       	sbci	r24, 0xFF	; 255
    6b00:	9f 4f       	sbci	r25, 0xFF	; 255
    6b02:	08 95       	ret

00006b04 <__tablejump2__>:
    6b04:	ee 0f       	add	r30, r30
    6b06:	ff 1f       	adc	r31, r31
    6b08:	05 90       	lpm	r0, Z+
    6b0a:	f4 91       	lpm	r31, Z
    6b0c:	e0 2d       	mov	r30, r0
    6b0e:	09 94       	ijmp

00006b10 <__muluhisi3>:
    6b10:	0e 94 fa 35 	call	0x6bf4	; 0x6bf4 <__umulhisi3>
    6b14:	a5 9f       	mul	r26, r21
    6b16:	90 0d       	add	r25, r0
    6b18:	b4 9f       	mul	r27, r20
    6b1a:	90 0d       	add	r25, r0
    6b1c:	a4 9f       	mul	r26, r20
    6b1e:	80 0d       	add	r24, r0
    6b20:	91 1d       	adc	r25, r1
    6b22:	11 24       	eor	r1, r1
    6b24:	08 95       	ret

00006b26 <__prologue_saves__>:
    6b26:	2f 92       	push	r2
    6b28:	3f 92       	push	r3
    6b2a:	4f 92       	push	r4
    6b2c:	5f 92       	push	r5
    6b2e:	6f 92       	push	r6
    6b30:	7f 92       	push	r7
    6b32:	8f 92       	push	r8
    6b34:	9f 92       	push	r9
    6b36:	af 92       	push	r10
    6b38:	bf 92       	push	r11
    6b3a:	cf 92       	push	r12
    6b3c:	df 92       	push	r13
    6b3e:	ef 92       	push	r14
    6b40:	ff 92       	push	r15
    6b42:	0f 93       	push	r16
    6b44:	1f 93       	push	r17
    6b46:	cf 93       	push	r28
    6b48:	df 93       	push	r29
    6b4a:	cd b7       	in	r28, 0x3d	; 61
    6b4c:	de b7       	in	r29, 0x3e	; 62
    6b4e:	ca 1b       	sub	r28, r26
    6b50:	db 0b       	sbc	r29, r27
    6b52:	cd bf       	out	0x3d, r28	; 61
    6b54:	de bf       	out	0x3e, r29	; 62
    6b56:	09 94       	ijmp

00006b58 <__epilogue_restores__>:
    6b58:	2a 88       	ldd	r2, Y+18	; 0x12
    6b5a:	39 88       	ldd	r3, Y+17	; 0x11
    6b5c:	48 88       	ldd	r4, Y+16	; 0x10
    6b5e:	5f 84       	ldd	r5, Y+15	; 0x0f
    6b60:	6e 84       	ldd	r6, Y+14	; 0x0e
    6b62:	7d 84       	ldd	r7, Y+13	; 0x0d
    6b64:	8c 84       	ldd	r8, Y+12	; 0x0c
    6b66:	9b 84       	ldd	r9, Y+11	; 0x0b
    6b68:	aa 84       	ldd	r10, Y+10	; 0x0a
    6b6a:	b9 84       	ldd	r11, Y+9	; 0x09
    6b6c:	c8 84       	ldd	r12, Y+8	; 0x08
    6b6e:	df 80       	ldd	r13, Y+7	; 0x07
    6b70:	ee 80       	ldd	r14, Y+6	; 0x06
    6b72:	fd 80       	ldd	r15, Y+5	; 0x05
    6b74:	0c 81       	ldd	r16, Y+4	; 0x04
    6b76:	1b 81       	ldd	r17, Y+3	; 0x03
    6b78:	aa 81       	ldd	r26, Y+2	; 0x02
    6b7a:	b9 81       	ldd	r27, Y+1	; 0x01
    6b7c:	ce 0f       	add	r28, r30
    6b7e:	d1 1d       	adc	r29, r1
    6b80:	cd bf       	out	0x3d, r28	; 61
    6b82:	de bf       	out	0x3e, r29	; 62
    6b84:	ed 01       	movw	r28, r26
    6b86:	08 95       	ret

00006b88 <__udivmodhi4>:
    6b88:	aa 1b       	sub	r26, r26
    6b8a:	bb 1b       	sub	r27, r27
    6b8c:	51 e1       	ldi	r21, 0x11	; 17
    6b8e:	07 c0       	rjmp	.+14     	; 0x6b9e <__udivmodhi4_ep>

00006b90 <__udivmodhi4_loop>:
    6b90:	aa 1f       	adc	r26, r26
    6b92:	bb 1f       	adc	r27, r27
    6b94:	a6 17       	cp	r26, r22
    6b96:	b7 07       	cpc	r27, r23
    6b98:	10 f0       	brcs	.+4      	; 0x6b9e <__udivmodhi4_ep>
    6b9a:	a6 1b       	sub	r26, r22
    6b9c:	b7 0b       	sbc	r27, r23

00006b9e <__udivmodhi4_ep>:
    6b9e:	88 1f       	adc	r24, r24
    6ba0:	99 1f       	adc	r25, r25
    6ba2:	5a 95       	dec	r21
    6ba4:	a9 f7       	brne	.-22     	; 0x6b90 <__udivmodhi4_loop>
    6ba6:	80 95       	com	r24
    6ba8:	90 95       	com	r25
    6baa:	bc 01       	movw	r22, r24
    6bac:	cd 01       	movw	r24, r26
    6bae:	08 95       	ret

00006bb0 <__udivmodsi4>:
    6bb0:	a1 e2       	ldi	r26, 0x21	; 33
    6bb2:	1a 2e       	mov	r1, r26
    6bb4:	aa 1b       	sub	r26, r26
    6bb6:	bb 1b       	sub	r27, r27
    6bb8:	fd 01       	movw	r30, r26
    6bba:	0d c0       	rjmp	.+26     	; 0x6bd6 <__udivmodsi4_ep>

00006bbc <__udivmodsi4_loop>:
    6bbc:	aa 1f       	adc	r26, r26
    6bbe:	bb 1f       	adc	r27, r27
    6bc0:	ee 1f       	adc	r30, r30
    6bc2:	ff 1f       	adc	r31, r31
    6bc4:	a2 17       	cp	r26, r18
    6bc6:	b3 07       	cpc	r27, r19
    6bc8:	e4 07       	cpc	r30, r20
    6bca:	f5 07       	cpc	r31, r21
    6bcc:	20 f0       	brcs	.+8      	; 0x6bd6 <__udivmodsi4_ep>
    6bce:	a2 1b       	sub	r26, r18
    6bd0:	b3 0b       	sbc	r27, r19
    6bd2:	e4 0b       	sbc	r30, r20
    6bd4:	f5 0b       	sbc	r31, r21

00006bd6 <__udivmodsi4_ep>:
    6bd6:	66 1f       	adc	r22, r22
    6bd8:	77 1f       	adc	r23, r23
    6bda:	88 1f       	adc	r24, r24
    6bdc:	99 1f       	adc	r25, r25
    6bde:	1a 94       	dec	r1
    6be0:	69 f7       	brne	.-38     	; 0x6bbc <__udivmodsi4_loop>
    6be2:	60 95       	com	r22
    6be4:	70 95       	com	r23
    6be6:	80 95       	com	r24
    6be8:	90 95       	com	r25
    6bea:	9b 01       	movw	r18, r22
    6bec:	ac 01       	movw	r20, r24
    6bee:	bd 01       	movw	r22, r26
    6bf0:	cf 01       	movw	r24, r30
    6bf2:	08 95       	ret

00006bf4 <__umulhisi3>:
    6bf4:	a2 9f       	mul	r26, r18
    6bf6:	b0 01       	movw	r22, r0
    6bf8:	b3 9f       	mul	r27, r19
    6bfa:	c0 01       	movw	r24, r0
    6bfc:	a3 9f       	mul	r26, r19
    6bfe:	70 0d       	add	r23, r0
    6c00:	81 1d       	adc	r24, r1
    6c02:	11 24       	eor	r1, r1
    6c04:	91 1d       	adc	r25, r1
    6c06:	b2 9f       	mul	r27, r18
    6c08:	70 0d       	add	r23, r0
    6c0a:	81 1d       	adc	r24, r1
    6c0c:	11 24       	eor	r1, r1
    6c0e:	91 1d       	adc	r25, r1
    6c10:	08 95       	ret

00006c12 <atoi>:
    6c12:	fc 01       	movw	r30, r24
    6c14:	88 27       	eor	r24, r24
    6c16:	99 27       	eor	r25, r25
    6c18:	e8 94       	clt
    6c1a:	21 91       	ld	r18, Z+
    6c1c:	20 32       	cpi	r18, 0x20	; 32
    6c1e:	e9 f3       	breq	.-6      	; 0x6c1a <atoi+0x8>
    6c20:	29 30       	cpi	r18, 0x09	; 9
    6c22:	10 f0       	brcs	.+4      	; 0x6c28 <atoi+0x16>
    6c24:	2e 30       	cpi	r18, 0x0E	; 14
    6c26:	c8 f3       	brcs	.-14     	; 0x6c1a <atoi+0x8>
    6c28:	2b 32       	cpi	r18, 0x2B	; 43
    6c2a:	41 f0       	breq	.+16     	; 0x6c3c <atoi+0x2a>
    6c2c:	2d 32       	cpi	r18, 0x2D	; 45
    6c2e:	39 f4       	brne	.+14     	; 0x6c3e <atoi+0x2c>
    6c30:	68 94       	set
    6c32:	04 c0       	rjmp	.+8      	; 0x6c3c <atoi+0x2a>
    6c34:	0e 94 63 37 	call	0x6ec6	; 0x6ec6 <__mulhi_const_10>
    6c38:	82 0f       	add	r24, r18
    6c3a:	91 1d       	adc	r25, r1
    6c3c:	21 91       	ld	r18, Z+
    6c3e:	20 53       	subi	r18, 0x30	; 48
    6c40:	2a 30       	cpi	r18, 0x0A	; 10
    6c42:	c0 f3       	brcs	.-16     	; 0x6c34 <atoi+0x22>
    6c44:	1e f4       	brtc	.+6      	; 0x6c4c <atoi+0x3a>
    6c46:	90 95       	com	r25
    6c48:	81 95       	neg	r24
    6c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    6c4c:	08 95       	ret

00006c4e <atol>:
    6c4e:	1f 93       	push	r17
    6c50:	fc 01       	movw	r30, r24
    6c52:	99 27       	eor	r25, r25
    6c54:	88 27       	eor	r24, r24
    6c56:	bc 01       	movw	r22, r24
    6c58:	e8 94       	clt
    6c5a:	11 91       	ld	r17, Z+
    6c5c:	10 32       	cpi	r17, 0x20	; 32
    6c5e:	e9 f3       	breq	.-6      	; 0x6c5a <atol+0xc>
    6c60:	19 30       	cpi	r17, 0x09	; 9
    6c62:	10 f0       	brcs	.+4      	; 0x6c68 <atol+0x1a>
    6c64:	1e 30       	cpi	r17, 0x0E	; 14
    6c66:	c8 f3       	brcs	.-14     	; 0x6c5a <atol+0xc>
    6c68:	1b 32       	cpi	r17, 0x2B	; 43
    6c6a:	51 f0       	breq	.+20     	; 0x6c80 <atol+0x32>
    6c6c:	1d 32       	cpi	r17, 0x2D	; 45
    6c6e:	49 f4       	brne	.+18     	; 0x6c82 <atol+0x34>
    6c70:	68 94       	set
    6c72:	06 c0       	rjmp	.+12     	; 0x6c80 <atol+0x32>
    6c74:	0e 94 4e 37 	call	0x6e9c	; 0x6e9c <__mulsi_const_10>
    6c78:	61 0f       	add	r22, r17
    6c7a:	71 1d       	adc	r23, r1
    6c7c:	81 1d       	adc	r24, r1
    6c7e:	91 1d       	adc	r25, r1
    6c80:	11 91       	ld	r17, Z+
    6c82:	10 53       	subi	r17, 0x30	; 48
    6c84:	1a 30       	cpi	r17, 0x0A	; 10
    6c86:	b0 f3       	brcs	.-20     	; 0x6c74 <atol+0x26>
    6c88:	3e f4       	brtc	.+14     	; 0x6c98 <atol+0x4a>
    6c8a:	90 95       	com	r25
    6c8c:	80 95       	com	r24
    6c8e:	70 95       	com	r23
    6c90:	61 95       	neg	r22
    6c92:	7f 4f       	sbci	r23, 0xFF	; 255
    6c94:	8f 4f       	sbci	r24, 0xFF	; 255
    6c96:	9f 4f       	sbci	r25, 0xFF	; 255
    6c98:	1f 91       	pop	r17
    6c9a:	08 95       	ret

00006c9c <__ftoa_engine>:
    6c9c:	28 30       	cpi	r18, 0x08	; 8
    6c9e:	08 f0       	brcs	.+2      	; 0x6ca2 <__ftoa_engine+0x6>
    6ca0:	27 e0       	ldi	r18, 0x07	; 7
    6ca2:	33 27       	eor	r19, r19
    6ca4:	da 01       	movw	r26, r20
    6ca6:	99 0f       	add	r25, r25
    6ca8:	31 1d       	adc	r19, r1
    6caa:	87 fd       	sbrc	r24, 7
    6cac:	91 60       	ori	r25, 0x01	; 1
    6cae:	00 96       	adiw	r24, 0x00	; 0
    6cb0:	61 05       	cpc	r22, r1
    6cb2:	71 05       	cpc	r23, r1
    6cb4:	39 f4       	brne	.+14     	; 0x6cc4 <__ftoa_engine+0x28>
    6cb6:	32 60       	ori	r19, 0x02	; 2
    6cb8:	2e 5f       	subi	r18, 0xFE	; 254
    6cba:	3d 93       	st	X+, r19
    6cbc:	30 e3       	ldi	r19, 0x30	; 48
    6cbe:	2a 95       	dec	r18
    6cc0:	e1 f7       	brne	.-8      	; 0x6cba <__ftoa_engine+0x1e>
    6cc2:	08 95       	ret
    6cc4:	9f 3f       	cpi	r25, 0xFF	; 255
    6cc6:	30 f0       	brcs	.+12     	; 0x6cd4 <__ftoa_engine+0x38>
    6cc8:	80 38       	cpi	r24, 0x80	; 128
    6cca:	71 05       	cpc	r23, r1
    6ccc:	61 05       	cpc	r22, r1
    6cce:	09 f0       	breq	.+2      	; 0x6cd2 <__ftoa_engine+0x36>
    6cd0:	3c 5f       	subi	r19, 0xFC	; 252
    6cd2:	3c 5f       	subi	r19, 0xFC	; 252
    6cd4:	3d 93       	st	X+, r19
    6cd6:	91 30       	cpi	r25, 0x01	; 1
    6cd8:	08 f0       	brcs	.+2      	; 0x6cdc <__ftoa_engine+0x40>
    6cda:	80 68       	ori	r24, 0x80	; 128
    6cdc:	91 1d       	adc	r25, r1
    6cde:	df 93       	push	r29
    6ce0:	cf 93       	push	r28
    6ce2:	1f 93       	push	r17
    6ce4:	0f 93       	push	r16
    6ce6:	ff 92       	push	r15
    6ce8:	ef 92       	push	r14
    6cea:	19 2f       	mov	r17, r25
    6cec:	98 7f       	andi	r25, 0xF8	; 248
    6cee:	96 95       	lsr	r25
    6cf0:	e9 2f       	mov	r30, r25
    6cf2:	96 95       	lsr	r25
    6cf4:	96 95       	lsr	r25
    6cf6:	e9 0f       	add	r30, r25
    6cf8:	ff 27       	eor	r31, r31
    6cfa:	e8 53       	subi	r30, 0x38	; 56
    6cfc:	fe 4f       	sbci	r31, 0xFE	; 254
    6cfe:	99 27       	eor	r25, r25
    6d00:	33 27       	eor	r19, r19
    6d02:	ee 24       	eor	r14, r14
    6d04:	ff 24       	eor	r15, r15
    6d06:	a7 01       	movw	r20, r14
    6d08:	e7 01       	movw	r28, r14
    6d0a:	05 90       	lpm	r0, Z+
    6d0c:	08 94       	sec
    6d0e:	07 94       	ror	r0
    6d10:	28 f4       	brcc	.+10     	; 0x6d1c <__ftoa_engine+0x80>
    6d12:	36 0f       	add	r19, r22
    6d14:	e7 1e       	adc	r14, r23
    6d16:	f8 1e       	adc	r15, r24
    6d18:	49 1f       	adc	r20, r25
    6d1a:	51 1d       	adc	r21, r1
    6d1c:	66 0f       	add	r22, r22
    6d1e:	77 1f       	adc	r23, r23
    6d20:	88 1f       	adc	r24, r24
    6d22:	99 1f       	adc	r25, r25
    6d24:	06 94       	lsr	r0
    6d26:	a1 f7       	brne	.-24     	; 0x6d10 <__ftoa_engine+0x74>
    6d28:	05 90       	lpm	r0, Z+
    6d2a:	07 94       	ror	r0
    6d2c:	28 f4       	brcc	.+10     	; 0x6d38 <__ftoa_engine+0x9c>
    6d2e:	e7 0e       	add	r14, r23
    6d30:	f8 1e       	adc	r15, r24
    6d32:	49 1f       	adc	r20, r25
    6d34:	56 1f       	adc	r21, r22
    6d36:	c1 1d       	adc	r28, r1
    6d38:	77 0f       	add	r23, r23
    6d3a:	88 1f       	adc	r24, r24
    6d3c:	99 1f       	adc	r25, r25
    6d3e:	66 1f       	adc	r22, r22
    6d40:	06 94       	lsr	r0
    6d42:	a1 f7       	brne	.-24     	; 0x6d2c <__ftoa_engine+0x90>
    6d44:	05 90       	lpm	r0, Z+
    6d46:	07 94       	ror	r0
    6d48:	28 f4       	brcc	.+10     	; 0x6d54 <__ftoa_engine+0xb8>
    6d4a:	f8 0e       	add	r15, r24
    6d4c:	49 1f       	adc	r20, r25
    6d4e:	56 1f       	adc	r21, r22
    6d50:	c7 1f       	adc	r28, r23
    6d52:	d1 1d       	adc	r29, r1
    6d54:	88 0f       	add	r24, r24
    6d56:	99 1f       	adc	r25, r25
    6d58:	66 1f       	adc	r22, r22
    6d5a:	77 1f       	adc	r23, r23
    6d5c:	06 94       	lsr	r0
    6d5e:	a1 f7       	brne	.-24     	; 0x6d48 <__ftoa_engine+0xac>
    6d60:	05 90       	lpm	r0, Z+
    6d62:	07 94       	ror	r0
    6d64:	20 f4       	brcc	.+8      	; 0x6d6e <__ftoa_engine+0xd2>
    6d66:	49 0f       	add	r20, r25
    6d68:	56 1f       	adc	r21, r22
    6d6a:	c7 1f       	adc	r28, r23
    6d6c:	d8 1f       	adc	r29, r24
    6d6e:	99 0f       	add	r25, r25
    6d70:	66 1f       	adc	r22, r22
    6d72:	77 1f       	adc	r23, r23
    6d74:	88 1f       	adc	r24, r24
    6d76:	06 94       	lsr	r0
    6d78:	a9 f7       	brne	.-22     	; 0x6d64 <__ftoa_engine+0xc8>
    6d7a:	84 91       	lpm	r24, Z
    6d7c:	10 95       	com	r17
    6d7e:	17 70       	andi	r17, 0x07	; 7
    6d80:	41 f0       	breq	.+16     	; 0x6d92 <__ftoa_engine+0xf6>
    6d82:	d6 95       	lsr	r29
    6d84:	c7 95       	ror	r28
    6d86:	57 95       	ror	r21
    6d88:	47 95       	ror	r20
    6d8a:	f7 94       	ror	r15
    6d8c:	e7 94       	ror	r14
    6d8e:	1a 95       	dec	r17
    6d90:	c1 f7       	brne	.-16     	; 0x6d82 <__ftoa_engine+0xe6>
    6d92:	ee e6       	ldi	r30, 0x6E	; 110
    6d94:	f1 e0       	ldi	r31, 0x01	; 1
    6d96:	68 94       	set
    6d98:	15 90       	lpm	r1, Z+
    6d9a:	15 91       	lpm	r17, Z+
    6d9c:	35 91       	lpm	r19, Z+
    6d9e:	65 91       	lpm	r22, Z+
    6da0:	95 91       	lpm	r25, Z+
    6da2:	05 90       	lpm	r0, Z+
    6da4:	7f e2       	ldi	r23, 0x2F	; 47
    6da6:	73 95       	inc	r23
    6da8:	e1 18       	sub	r14, r1
    6daa:	f1 0a       	sbc	r15, r17
    6dac:	43 0b       	sbc	r20, r19
    6dae:	56 0b       	sbc	r21, r22
    6db0:	c9 0b       	sbc	r28, r25
    6db2:	d0 09       	sbc	r29, r0
    6db4:	c0 f7       	brcc	.-16     	; 0x6da6 <__ftoa_engine+0x10a>
    6db6:	e1 0c       	add	r14, r1
    6db8:	f1 1e       	adc	r15, r17
    6dba:	43 1f       	adc	r20, r19
    6dbc:	56 1f       	adc	r21, r22
    6dbe:	c9 1f       	adc	r28, r25
    6dc0:	d0 1d       	adc	r29, r0
    6dc2:	7e f4       	brtc	.+30     	; 0x6de2 <__ftoa_engine+0x146>
    6dc4:	70 33       	cpi	r23, 0x30	; 48
    6dc6:	11 f4       	brne	.+4      	; 0x6dcc <__ftoa_engine+0x130>
    6dc8:	8a 95       	dec	r24
    6dca:	e6 cf       	rjmp	.-52     	; 0x6d98 <__ftoa_engine+0xfc>
    6dcc:	e8 94       	clt
    6dce:	01 50       	subi	r16, 0x01	; 1
    6dd0:	30 f0       	brcs	.+12     	; 0x6dde <__ftoa_engine+0x142>
    6dd2:	08 0f       	add	r16, r24
    6dd4:	0a f4       	brpl	.+2      	; 0x6dd8 <__ftoa_engine+0x13c>
    6dd6:	00 27       	eor	r16, r16
    6dd8:	02 17       	cp	r16, r18
    6dda:	08 f4       	brcc	.+2      	; 0x6dde <__ftoa_engine+0x142>
    6ddc:	20 2f       	mov	r18, r16
    6dde:	23 95       	inc	r18
    6de0:	02 2f       	mov	r16, r18
    6de2:	7a 33       	cpi	r23, 0x3A	; 58
    6de4:	28 f0       	brcs	.+10     	; 0x6df0 <__ftoa_engine+0x154>
    6de6:	79 e3       	ldi	r23, 0x39	; 57
    6de8:	7d 93       	st	X+, r23
    6dea:	2a 95       	dec	r18
    6dec:	e9 f7       	brne	.-6      	; 0x6de8 <__ftoa_engine+0x14c>
    6dee:	10 c0       	rjmp	.+32     	; 0x6e10 <__ftoa_engine+0x174>
    6df0:	7d 93       	st	X+, r23
    6df2:	2a 95       	dec	r18
    6df4:	89 f6       	brne	.-94     	; 0x6d98 <__ftoa_engine+0xfc>
    6df6:	06 94       	lsr	r0
    6df8:	97 95       	ror	r25
    6dfa:	67 95       	ror	r22
    6dfc:	37 95       	ror	r19
    6dfe:	17 95       	ror	r17
    6e00:	17 94       	ror	r1
    6e02:	e1 18       	sub	r14, r1
    6e04:	f1 0a       	sbc	r15, r17
    6e06:	43 0b       	sbc	r20, r19
    6e08:	56 0b       	sbc	r21, r22
    6e0a:	c9 0b       	sbc	r28, r25
    6e0c:	d0 09       	sbc	r29, r0
    6e0e:	98 f0       	brcs	.+38     	; 0x6e36 <__ftoa_engine+0x19a>
    6e10:	23 95       	inc	r18
    6e12:	7e 91       	ld	r23, -X
    6e14:	73 95       	inc	r23
    6e16:	7a 33       	cpi	r23, 0x3A	; 58
    6e18:	08 f0       	brcs	.+2      	; 0x6e1c <__ftoa_engine+0x180>
    6e1a:	70 e3       	ldi	r23, 0x30	; 48
    6e1c:	7c 93       	st	X, r23
    6e1e:	20 13       	cpse	r18, r16
    6e20:	b8 f7       	brcc	.-18     	; 0x6e10 <__ftoa_engine+0x174>
    6e22:	7e 91       	ld	r23, -X
    6e24:	70 61       	ori	r23, 0x10	; 16
    6e26:	7d 93       	st	X+, r23
    6e28:	30 f0       	brcs	.+12     	; 0x6e36 <__ftoa_engine+0x19a>
    6e2a:	83 95       	inc	r24
    6e2c:	71 e3       	ldi	r23, 0x31	; 49
    6e2e:	7d 93       	st	X+, r23
    6e30:	70 e3       	ldi	r23, 0x30	; 48
    6e32:	2a 95       	dec	r18
    6e34:	e1 f7       	brne	.-8      	; 0x6e2e <__ftoa_engine+0x192>
    6e36:	11 24       	eor	r1, r1
    6e38:	ef 90       	pop	r14
    6e3a:	ff 90       	pop	r15
    6e3c:	0f 91       	pop	r16
    6e3e:	1f 91       	pop	r17
    6e40:	cf 91       	pop	r28
    6e42:	df 91       	pop	r29
    6e44:	99 27       	eor	r25, r25
    6e46:	87 fd       	sbrc	r24, 7
    6e48:	90 95       	com	r25
    6e4a:	08 95       	ret

00006e4c <strnlen_P>:
    6e4c:	fc 01       	movw	r30, r24
    6e4e:	05 90       	lpm	r0, Z+
    6e50:	61 50       	subi	r22, 0x01	; 1
    6e52:	70 40       	sbci	r23, 0x00	; 0
    6e54:	01 10       	cpse	r0, r1
    6e56:	d8 f7       	brcc	.-10     	; 0x6e4e <strnlen_P+0x2>
    6e58:	80 95       	com	r24
    6e5a:	90 95       	com	r25
    6e5c:	8e 0f       	add	r24, r30
    6e5e:	9f 1f       	adc	r25, r31
    6e60:	08 95       	ret

00006e62 <strcat>:
    6e62:	fb 01       	movw	r30, r22
    6e64:	dc 01       	movw	r26, r24
    6e66:	0d 90       	ld	r0, X+
    6e68:	00 20       	and	r0, r0
    6e6a:	e9 f7       	brne	.-6      	; 0x6e66 <strcat+0x4>
    6e6c:	11 97       	sbiw	r26, 0x01	; 1
    6e6e:	01 90       	ld	r0, Z+
    6e70:	0d 92       	st	X+, r0
    6e72:	00 20       	and	r0, r0
    6e74:	e1 f7       	brne	.-8      	; 0x6e6e <strcat+0xc>
    6e76:	08 95       	ret

00006e78 <strcpy>:
    6e78:	fb 01       	movw	r30, r22
    6e7a:	dc 01       	movw	r26, r24
    6e7c:	01 90       	ld	r0, Z+
    6e7e:	0d 92       	st	X+, r0
    6e80:	00 20       	and	r0, r0
    6e82:	e1 f7       	brne	.-8      	; 0x6e7c <strcpy+0x4>
    6e84:	08 95       	ret

00006e86 <strnlen>:
    6e86:	fc 01       	movw	r30, r24
    6e88:	61 50       	subi	r22, 0x01	; 1
    6e8a:	70 40       	sbci	r23, 0x00	; 0
    6e8c:	01 90       	ld	r0, Z+
    6e8e:	01 10       	cpse	r0, r1
    6e90:	d8 f7       	brcc	.-10     	; 0x6e88 <strnlen+0x2>
    6e92:	80 95       	com	r24
    6e94:	90 95       	com	r25
    6e96:	8e 0f       	add	r24, r30
    6e98:	9f 1f       	adc	r25, r31
    6e9a:	08 95       	ret

00006e9c <__mulsi_const_10>:
    6e9c:	59 2f       	mov	r21, r25
    6e9e:	48 2f       	mov	r20, r24
    6ea0:	37 2f       	mov	r19, r23
    6ea2:	26 2f       	mov	r18, r22
    6ea4:	66 0f       	add	r22, r22
    6ea6:	77 1f       	adc	r23, r23
    6ea8:	88 1f       	adc	r24, r24
    6eaa:	99 1f       	adc	r25, r25
    6eac:	66 0f       	add	r22, r22
    6eae:	77 1f       	adc	r23, r23
    6eb0:	88 1f       	adc	r24, r24
    6eb2:	99 1f       	adc	r25, r25
    6eb4:	62 0f       	add	r22, r18
    6eb6:	73 1f       	adc	r23, r19
    6eb8:	84 1f       	adc	r24, r20
    6eba:	95 1f       	adc	r25, r21
    6ebc:	66 0f       	add	r22, r22
    6ebe:	77 1f       	adc	r23, r23
    6ec0:	88 1f       	adc	r24, r24
    6ec2:	99 1f       	adc	r25, r25
    6ec4:	08 95       	ret

00006ec6 <__mulhi_const_10>:
    6ec6:	7a e0       	ldi	r23, 0x0A	; 10
    6ec8:	97 9f       	mul	r25, r23
    6eca:	90 2d       	mov	r25, r0
    6ecc:	87 9f       	mul	r24, r23
    6ece:	80 2d       	mov	r24, r0
    6ed0:	91 0d       	add	r25, r1
    6ed2:	11 24       	eor	r1, r1
    6ed4:	08 95       	ret

00006ed6 <fputc>:
    6ed6:	0f 93       	push	r16
    6ed8:	1f 93       	push	r17
    6eda:	cf 93       	push	r28
    6edc:	df 93       	push	r29
    6ede:	fb 01       	movw	r30, r22
    6ee0:	23 81       	ldd	r18, Z+3	; 0x03
    6ee2:	21 fd       	sbrc	r18, 1
    6ee4:	03 c0       	rjmp	.+6      	; 0x6eec <fputc+0x16>
    6ee6:	8f ef       	ldi	r24, 0xFF	; 255
    6ee8:	9f ef       	ldi	r25, 0xFF	; 255
    6eea:	2c c0       	rjmp	.+88     	; 0x6f44 <fputc+0x6e>
    6eec:	22 ff       	sbrs	r18, 2
    6eee:	16 c0       	rjmp	.+44     	; 0x6f1c <fputc+0x46>
    6ef0:	46 81       	ldd	r20, Z+6	; 0x06
    6ef2:	57 81       	ldd	r21, Z+7	; 0x07
    6ef4:	24 81       	ldd	r18, Z+4	; 0x04
    6ef6:	35 81       	ldd	r19, Z+5	; 0x05
    6ef8:	42 17       	cp	r20, r18
    6efa:	53 07       	cpc	r21, r19
    6efc:	44 f4       	brge	.+16     	; 0x6f0e <fputc+0x38>
    6efe:	a0 81       	ld	r26, Z
    6f00:	b1 81       	ldd	r27, Z+1	; 0x01
    6f02:	9d 01       	movw	r18, r26
    6f04:	2f 5f       	subi	r18, 0xFF	; 255
    6f06:	3f 4f       	sbci	r19, 0xFF	; 255
    6f08:	20 83       	st	Z, r18
    6f0a:	31 83       	std	Z+1, r19	; 0x01
    6f0c:	8c 93       	st	X, r24
    6f0e:	26 81       	ldd	r18, Z+6	; 0x06
    6f10:	37 81       	ldd	r19, Z+7	; 0x07
    6f12:	2f 5f       	subi	r18, 0xFF	; 255
    6f14:	3f 4f       	sbci	r19, 0xFF	; 255
    6f16:	26 83       	std	Z+6, r18	; 0x06
    6f18:	37 83       	std	Z+7, r19	; 0x07
    6f1a:	14 c0       	rjmp	.+40     	; 0x6f44 <fputc+0x6e>
    6f1c:	8b 01       	movw	r16, r22
    6f1e:	ec 01       	movw	r28, r24
    6f20:	fb 01       	movw	r30, r22
    6f22:	00 84       	ldd	r0, Z+8	; 0x08
    6f24:	f1 85       	ldd	r31, Z+9	; 0x09
    6f26:	e0 2d       	mov	r30, r0
    6f28:	09 95       	icall
    6f2a:	89 2b       	or	r24, r25
    6f2c:	e1 f6       	brne	.-72     	; 0x6ee6 <fputc+0x10>
    6f2e:	d8 01       	movw	r26, r16
    6f30:	16 96       	adiw	r26, 0x06	; 6
    6f32:	8d 91       	ld	r24, X+
    6f34:	9c 91       	ld	r25, X
    6f36:	17 97       	sbiw	r26, 0x07	; 7
    6f38:	01 96       	adiw	r24, 0x01	; 1
    6f3a:	16 96       	adiw	r26, 0x06	; 6
    6f3c:	8d 93       	st	X+, r24
    6f3e:	9c 93       	st	X, r25
    6f40:	17 97       	sbiw	r26, 0x07	; 7
    6f42:	ce 01       	movw	r24, r28
    6f44:	df 91       	pop	r29
    6f46:	cf 91       	pop	r28
    6f48:	1f 91       	pop	r17
    6f4a:	0f 91       	pop	r16
    6f4c:	08 95       	ret

00006f4e <sprintf>:
    6f4e:	ae e0       	ldi	r26, 0x0E	; 14
    6f50:	b0 e0       	ldi	r27, 0x00	; 0
    6f52:	ed ea       	ldi	r30, 0xAD	; 173
    6f54:	f7 e3       	ldi	r31, 0x37	; 55
    6f56:	0c 94 a1 35 	jmp	0x6b42	; 0x6b42 <__prologue_saves__+0x1c>
    6f5a:	0d 89       	ldd	r16, Y+21	; 0x15
    6f5c:	1e 89       	ldd	r17, Y+22	; 0x16
    6f5e:	86 e0       	ldi	r24, 0x06	; 6
    6f60:	8c 83       	std	Y+4, r24	; 0x04
    6f62:	09 83       	std	Y+1, r16	; 0x01
    6f64:	1a 83       	std	Y+2, r17	; 0x02
    6f66:	8f ef       	ldi	r24, 0xFF	; 255
    6f68:	9f e7       	ldi	r25, 0x7F	; 127
    6f6a:	8d 83       	std	Y+5, r24	; 0x05
    6f6c:	9e 83       	std	Y+6, r25	; 0x06
    6f6e:	ae 01       	movw	r20, r28
    6f70:	47 5e       	subi	r20, 0xE7	; 231
    6f72:	5f 4f       	sbci	r21, 0xFF	; 255
    6f74:	6f 89       	ldd	r22, Y+23	; 0x17
    6f76:	78 8d       	ldd	r23, Y+24	; 0x18
    6f78:	ce 01       	movw	r24, r28
    6f7a:	01 96       	adiw	r24, 0x01	; 1
    6f7c:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <vfprintf>
    6f80:	ef 81       	ldd	r30, Y+7	; 0x07
    6f82:	f8 85       	ldd	r31, Y+8	; 0x08
    6f84:	e0 0f       	add	r30, r16
    6f86:	f1 1f       	adc	r31, r17
    6f88:	10 82       	st	Z, r1
    6f8a:	2e 96       	adiw	r28, 0x0e	; 14
    6f8c:	e4 e0       	ldi	r30, 0x04	; 4
    6f8e:	0c 94 ba 35 	jmp	0x6b74	; 0x6b74 <__epilogue_restores__+0x1c>

00006f92 <__ultoa_invert>:
    6f92:	fa 01       	movw	r30, r20
    6f94:	aa 27       	eor	r26, r26
    6f96:	28 30       	cpi	r18, 0x08	; 8
    6f98:	51 f1       	breq	.+84     	; 0x6fee <__ultoa_invert+0x5c>
    6f9a:	20 31       	cpi	r18, 0x10	; 16
    6f9c:	81 f1       	breq	.+96     	; 0x6ffe <__ultoa_invert+0x6c>
    6f9e:	e8 94       	clt
    6fa0:	6f 93       	push	r22
    6fa2:	6e 7f       	andi	r22, 0xFE	; 254
    6fa4:	6e 5f       	subi	r22, 0xFE	; 254
    6fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    6fa8:	8f 4f       	sbci	r24, 0xFF	; 255
    6faa:	9f 4f       	sbci	r25, 0xFF	; 255
    6fac:	af 4f       	sbci	r26, 0xFF	; 255
    6fae:	b1 e0       	ldi	r27, 0x01	; 1
    6fb0:	3e d0       	rcall	.+124    	; 0x702e <__ultoa_invert+0x9c>
    6fb2:	b4 e0       	ldi	r27, 0x04	; 4
    6fb4:	3c d0       	rcall	.+120    	; 0x702e <__ultoa_invert+0x9c>
    6fb6:	67 0f       	add	r22, r23
    6fb8:	78 1f       	adc	r23, r24
    6fba:	89 1f       	adc	r24, r25
    6fbc:	9a 1f       	adc	r25, r26
    6fbe:	a1 1d       	adc	r26, r1
    6fc0:	68 0f       	add	r22, r24
    6fc2:	79 1f       	adc	r23, r25
    6fc4:	8a 1f       	adc	r24, r26
    6fc6:	91 1d       	adc	r25, r1
    6fc8:	a1 1d       	adc	r26, r1
    6fca:	6a 0f       	add	r22, r26
    6fcc:	71 1d       	adc	r23, r1
    6fce:	81 1d       	adc	r24, r1
    6fd0:	91 1d       	adc	r25, r1
    6fd2:	a1 1d       	adc	r26, r1
    6fd4:	20 d0       	rcall	.+64     	; 0x7016 <__ultoa_invert+0x84>
    6fd6:	09 f4       	brne	.+2      	; 0x6fda <__ultoa_invert+0x48>
    6fd8:	68 94       	set
    6fda:	3f 91       	pop	r19
    6fdc:	2a e0       	ldi	r18, 0x0A	; 10
    6fde:	26 9f       	mul	r18, r22
    6fe0:	11 24       	eor	r1, r1
    6fe2:	30 19       	sub	r19, r0
    6fe4:	30 5d       	subi	r19, 0xD0	; 208
    6fe6:	31 93       	st	Z+, r19
    6fe8:	de f6       	brtc	.-74     	; 0x6fa0 <__ultoa_invert+0xe>
    6fea:	cf 01       	movw	r24, r30
    6fec:	08 95       	ret
    6fee:	46 2f       	mov	r20, r22
    6ff0:	47 70       	andi	r20, 0x07	; 7
    6ff2:	40 5d       	subi	r20, 0xD0	; 208
    6ff4:	41 93       	st	Z+, r20
    6ff6:	b3 e0       	ldi	r27, 0x03	; 3
    6ff8:	0f d0       	rcall	.+30     	; 0x7018 <__ultoa_invert+0x86>
    6ffa:	c9 f7       	brne	.-14     	; 0x6fee <__ultoa_invert+0x5c>
    6ffc:	f6 cf       	rjmp	.-20     	; 0x6fea <__ultoa_invert+0x58>
    6ffe:	46 2f       	mov	r20, r22
    7000:	4f 70       	andi	r20, 0x0F	; 15
    7002:	40 5d       	subi	r20, 0xD0	; 208
    7004:	4a 33       	cpi	r20, 0x3A	; 58
    7006:	18 f0       	brcs	.+6      	; 0x700e <__ultoa_invert+0x7c>
    7008:	49 5d       	subi	r20, 0xD9	; 217
    700a:	31 fd       	sbrc	r19, 1
    700c:	40 52       	subi	r20, 0x20	; 32
    700e:	41 93       	st	Z+, r20
    7010:	02 d0       	rcall	.+4      	; 0x7016 <__ultoa_invert+0x84>
    7012:	a9 f7       	brne	.-22     	; 0x6ffe <__ultoa_invert+0x6c>
    7014:	ea cf       	rjmp	.-44     	; 0x6fea <__ultoa_invert+0x58>
    7016:	b4 e0       	ldi	r27, 0x04	; 4
    7018:	a6 95       	lsr	r26
    701a:	97 95       	ror	r25
    701c:	87 95       	ror	r24
    701e:	77 95       	ror	r23
    7020:	67 95       	ror	r22
    7022:	ba 95       	dec	r27
    7024:	c9 f7       	brne	.-14     	; 0x7018 <__ultoa_invert+0x86>
    7026:	00 97       	sbiw	r24, 0x00	; 0
    7028:	61 05       	cpc	r22, r1
    702a:	71 05       	cpc	r23, r1
    702c:	08 95       	ret
    702e:	9b 01       	movw	r18, r22
    7030:	ac 01       	movw	r20, r24
    7032:	0a 2e       	mov	r0, r26
    7034:	06 94       	lsr	r0
    7036:	57 95       	ror	r21
    7038:	47 95       	ror	r20
    703a:	37 95       	ror	r19
    703c:	27 95       	ror	r18
    703e:	ba 95       	dec	r27
    7040:	c9 f7       	brne	.-14     	; 0x7034 <__ultoa_invert+0xa2>
    7042:	62 0f       	add	r22, r18
    7044:	73 1f       	adc	r23, r19
    7046:	84 1f       	adc	r24, r20
    7048:	95 1f       	adc	r25, r21
    704a:	a0 1d       	adc	r26, r0
    704c:	08 95       	ret

0000704e <eeprom_read_block>:
    704e:	60 50       	subi	r22, 0x00	; 0
    7050:	7c 4e       	sbci	r23, 0xEC	; 236
    7052:	0c 94 62 38 	jmp	0x70c4	; 0x70c4 <memcpy>

00007056 <eeprom_update_block>:
    7056:	dc 01       	movw	r26, r24
    7058:	a4 0f       	add	r26, r20
    705a:	b5 1f       	adc	r27, r21
    705c:	41 50       	subi	r20, 0x01	; 1
    705e:	50 40       	sbci	r21, 0x00	; 0
    7060:	48 f0       	brcs	.+18     	; 0x7074 <eeprom_update_block+0x1e>
    7062:	cb 01       	movw	r24, r22
    7064:	84 0f       	add	r24, r20
    7066:	95 1f       	adc	r25, r21
    7068:	2e 91       	ld	r18, -X
    706a:	0e 94 3c 38 	call	0x7078	; 0x7078 <eeprom_update_r18>
    706e:	41 50       	subi	r20, 0x01	; 1
    7070:	50 40       	sbci	r21, 0x00	; 0
    7072:	d0 f7       	brcc	.-12     	; 0x7068 <eeprom_update_block+0x12>
    7074:	08 95       	ret

00007076 <eeprom_update_byte>:
    7076:	26 2f       	mov	r18, r22

00007078 <eeprom_update_r18>:
    7078:	0e 94 5e 38 	call	0x70bc	; 0x70bc <eeprom_mapen>
    707c:	00 80       	ld	r0, Z
    707e:	02 16       	cp	r0, r18
    7080:	19 f0       	breq	.+6      	; 0x7088 <eeprom_update_r18+0x10>
    7082:	0e 94 47 38 	call	0x708e	; 0x708e <eeprom_write_r18>
    7086:	01 97       	sbiw	r24, 0x01	; 1
    7088:	01 97       	sbiw	r24, 0x01	; 1
    708a:	08 95       	ret

0000708c <eeprom_write_byte>:
    708c:	26 2f       	mov	r18, r22

0000708e <eeprom_write_r18>:
    708e:	af 93       	push	r26
    7090:	bf 93       	push	r27
    7092:	e0 e0       	ldi	r30, 0x00	; 0
    7094:	f0 e1       	ldi	r31, 0x10	; 16
    7096:	32 81       	ldd	r19, Z+2	; 0x02
    7098:	31 fd       	sbrc	r19, 1
    709a:	fd cf       	rjmp	.-6      	; 0x7096 <eeprom_write_r18+0x8>
    709c:	dc 01       	movw	r26, r24
    709e:	a0 50       	subi	r26, 0x00	; 0
    70a0:	bc 4e       	sbci	r27, 0xEC	; 236
    70a2:	2c 93       	st	X, r18
    70a4:	2d e9       	ldi	r18, 0x9D	; 157
    70a6:	24 bf       	out	0x34, r18	; 52
    70a8:	23 e0       	ldi	r18, 0x03	; 3
    70aa:	20 83       	st	Z, r18
    70ac:	01 96       	adiw	r24, 0x01	; 1
    70ae:	bf 91       	pop	r27
    70b0:	af 91       	pop	r26
    70b2:	08 95       	ret

000070b4 <eeprom_read_byte>:
    70b4:	03 d0       	rcall	.+6      	; 0x70bc <eeprom_mapen>
    70b6:	80 81       	ld	r24, Z
    70b8:	99 27       	eor	r25, r25
    70ba:	08 95       	ret

000070bc <eeprom_mapen>:
    70bc:	fc 01       	movw	r30, r24
    70be:	e0 50       	subi	r30, 0x00	; 0
    70c0:	fc 4e       	sbci	r31, 0xEC	; 236
    70c2:	08 95       	ret

000070c4 <memcpy>:
    70c4:	fb 01       	movw	r30, r22
    70c6:	dc 01       	movw	r26, r24
    70c8:	02 c0       	rjmp	.+4      	; 0x70ce <memcpy+0xa>
    70ca:	01 90       	ld	r0, Z+
    70cc:	0d 92       	st	X+, r0
    70ce:	41 50       	subi	r20, 0x01	; 1
    70d0:	50 40       	sbci	r21, 0x00	; 0
    70d2:	d8 f7       	brcc	.-10     	; 0x70ca <memcpy+0x6>
    70d4:	08 95       	ret

000070d6 <_exit>:
    70d6:	f8 94       	cli

000070d8 <__stop_program>:
    70d8:	ff cf       	rjmp	.-2      	; 0x70d8 <__stop_program>
