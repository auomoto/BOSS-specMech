
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00802800  00004b02  00004bb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004752  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  00008752  00004752  00004806  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000082e  00802804  00802804  00004bba  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00004bba  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004c18  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000660  00000000  00000000  00004c58  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a4cf  00000000  00000000  000052b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004781  00000000  00000000  0000f787  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004610  00000000  00000000  00013f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ed0  00000000  00000000  00018518  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000022c6  00000000  00000000  000193e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000407b  00000000  00000000  0001b6ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b0  00000000  00000000  0001f729  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 01 	jmp	0x254	; 0x254 <__ctors_end>
       4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       c:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__vector_3>
      10:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      14:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      18:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      1c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      20:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      24:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      28:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      2c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      30:	0c 94 6a 18 	jmp	0x30d4	; 0x30d4 <__vector_12>
      34:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      38:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      3c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      40:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      44:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__vector_17>
      48:	0c 94 1a 1a 	jmp	0x3434	; 0x3434 <__vector_18>
      4c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      50:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <__vector_20>
      54:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      58:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      5c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      60:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      64:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      68:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__vector_26>
      6c:	0c 94 7c 1a 	jmp	0x34f8	; 0x34f8 <__vector_27>
      70:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      74:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__vector_29>
      78:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      7c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      80:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      84:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      88:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      8c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      90:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      94:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__vector_37>
      98:	0c 94 e8 1a 	jmp	0x35d0	; 0x35d0 <__vector_38>
      9c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      a0:	9f 04       	cpc	r9, r15
      a2:	ad 04       	cpc	r10, r13
      a4:	ad 04       	cpc	r10, r13
      a6:	ad 04       	cpc	r10, r13
      a8:	ad 04       	cpc	r10, r13
      aa:	ad 04       	cpc	r10, r13
      ac:	ad 04       	cpc	r10, r13
      ae:	ad 04       	cpc	r10, r13
      b0:	ad 04       	cpc	r10, r13
      b2:	ad 04       	cpc	r10, r13
      b4:	ad 04       	cpc	r10, r13
      b6:	ad 04       	cpc	r10, r13
      b8:	ad 04       	cpc	r10, r13
      ba:	ad 04       	cpc	r10, r13
      bc:	ad 04       	cpc	r10, r13
      be:	ad 04       	cpc	r10, r13
      c0:	ad 04       	cpc	r10, r13
      c2:	85 04       	cpc	r8, r5
      c4:	ad 04       	cpc	r10, r13
      c6:	ad 04       	cpc	r10, r13
      c8:	ad 04       	cpc	r10, r13
      ca:	ad 04       	cpc	r10, r13
      cc:	ad 04       	cpc	r10, r13
      ce:	ad 04       	cpc	r10, r13
      d0:	ad 04       	cpc	r10, r13
      d2:	ad 04       	cpc	r10, r13
      d4:	ad 04       	cpc	r10, r13
      d6:	8f 04       	cpc	r8, r15
      d8:	ad 04       	cpc	r10, r13
      da:	8a 04       	cpc	r8, r10
      dc:	ad 04       	cpc	r10, r13
      de:	ad 04       	cpc	r10, r13
      e0:	93 04       	cpc	r9, r3
      e2:	97 04       	cpc	r9, r7
      e4:	9b 04       	cpc	r9, r11
      e6:	98 0e       	add	r9, r24
      e8:	98 0e       	add	r9, r24
      ea:	98 0e       	add	r9, r24
      ec:	fd 13       	cpse	r31, r29
      ee:	fd 13       	cpse	r31, r29
      f0:	fd 13       	cpse	r31, r29
      f2:	fd 13       	cpse	r31, r29
      f4:	fd 13       	cpse	r31, r29
      f6:	fd 13       	cpse	r31, r29
      f8:	fd 13       	cpse	r31, r29
      fa:	fd 13       	cpse	r31, r29
      fc:	fd 13       	cpse	r31, r29
      fe:	fd 13       	cpse	r31, r29
     100:	fd 13       	cpse	r31, r29
     102:	fd 13       	cpse	r31, r29
     104:	fd 13       	cpse	r31, r29
     106:	fd 13       	cpse	r31, r29
     108:	fd 13       	cpse	r31, r29
     10a:	fd 13       	cpse	r31, r29
     10c:	fd 13       	cpse	r31, r29
     10e:	fd 13       	cpse	r31, r29
     110:	ab 13       	cpse	r26, r27
     112:	fd 13       	cpse	r31, r29
     114:	fd 13       	cpse	r31, r29
     116:	fd 13       	cpse	r31, r29
     118:	fd 13       	cpse	r31, r29
     11a:	fd 13       	cpse	r31, r29
     11c:	fd 13       	cpse	r31, r29
     11e:	fd 13       	cpse	r31, r29
     120:	fd 13       	cpse	r31, r29
     122:	fd 13       	cpse	r31, r29
     124:	fd 13       	cpse	r31, r29
     126:	3e 0f       	add	r19, r30
     128:	3e 0f       	add	r19, r30
     12a:	3e 0f       	add	r19, r30
     12c:	fd 13       	cpse	r31, r29
     12e:	12 10       	cpse	r1, r2
     130:	fd 13       	cpse	r31, r29
     132:	fd 13       	cpse	r31, r29
     134:	fd 13       	cpse	r31, r29
     136:	fd 13       	cpse	r31, r29
     138:	fd 13       	cpse	r31, r29
     13a:	fd 13       	cpse	r31, r29
     13c:	fd 13       	cpse	r31, r29
     13e:	fd 13       	cpse	r31, r29
     140:	fd 13       	cpse	r31, r29
     142:	52 11       	cpse	r21, r2
     144:	40 12       	cpse	r4, r16
     146:	fd 13       	cpse	r31, r29
     148:	fd 13       	cpse	r31, r29
     14a:	fd 13       	cpse	r31, r29
     14c:	de 12       	cpse	r13, r30
     14e:	fd 13       	cpse	r31, r29
     150:	3d 13       	cpse	r19, r29

00000152 <__trampolines_end>:
     152:	6e 61       	ori	r22, 0x1E	; 30
     154:	6e 00       	.word	0x006e	; ????

00000156 <__c.2332>:
     156:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     166:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     176:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     186:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     196:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1a6:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1b6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1c6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1d6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1e6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1f6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     206:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     216:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     226:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     236:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     246:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000254 <__ctors_end>:
     254:	11 24       	eor	r1, r1
     256:	1f be       	out	0x3f, r1	; 63
     258:	cf ef       	ldi	r28, 0xFF	; 255
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	df e3       	ldi	r29, 0x3F	; 63
     25e:	de bf       	out	0x3e, r29	; 62

00000260 <__do_copy_data>:
     260:	18 e2       	ldi	r17, 0x28	; 40
     262:	a0 e0       	ldi	r26, 0x00	; 0
     264:	b8 e2       	ldi	r27, 0x28	; 40
     266:	e2 e0       	ldi	r30, 0x02	; 2
     268:	fb e4       	ldi	r31, 0x4B	; 75
     26a:	02 c0       	rjmp	.+4      	; 0x270 <__do_copy_data+0x10>
     26c:	05 90       	lpm	r0, Z+
     26e:	0d 92       	st	X+, r0
     270:	a4 30       	cpi	r26, 0x04	; 4
     272:	b1 07       	cpc	r27, r17
     274:	d9 f7       	brne	.-10     	; 0x26c <__do_copy_data+0xc>

00000276 <__do_clear_bss>:
     276:	20 e3       	ldi	r18, 0x30	; 48
     278:	a4 e0       	ldi	r26, 0x04	; 4
     27a:	b8 e2       	ldi	r27, 0x28	; 40
     27c:	01 c0       	rjmp	.+2      	; 0x280 <.do_clear_bss_start>

0000027e <.do_clear_bss_loop>:
     27e:	1d 92       	st	X+, r1

00000280 <.do_clear_bss_start>:
     280:	a2 33       	cpi	r26, 0x32	; 50
     282:	b2 07       	cpc	r27, r18
     284:	e1 f7       	brne	.-8      	; 0x27e <.do_clear_bss_loop>
     286:	0e 94 35 08 	call	0x106a	; 0x106a <main>
     28a:	0c 94 a7 23 	jmp	0x474e	; 0x474e <_exit>

0000028e <__bad_interrupt>:
     28e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000292 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
float read_AD590(uint8_t sensor)
{
     292:	cf 92       	push	r12
     294:	df 92       	push	r13
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	cf 93       	push	r28

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	c9 f0       	breq	.+50     	; 0x2d2 <read_AD590+0x40>
     2a0:	18 f0       	brcs	.+6      	; 0x2a8 <read_AD590+0x16>
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	61 f0       	breq	.+24     	; 0x2be <read_AD590+0x2c>
     2a6:	10 c0       	rjmp	.+32     	; 0x2c8 <read_AD590+0x36>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     2a8:	0f 2e       	mov	r0, r31
     2aa:	f3 e3       	ldi	r31, 0x33	; 51
     2ac:	cf 2e       	mov	r12, r31
     2ae:	dc 2c       	mov	r13, r12
     2b0:	f3 ef       	ldi	r31, 0xF3	; 243
     2b2:	ef 2e       	mov	r14, r31
     2b4:	f0 e4       	ldi	r31, 0x40	; 64
     2b6:	ff 2e       	mov	r15, r31
     2b8:	f0 2d       	mov	r31, r0
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     2ba:	c1 e0       	ldi	r28, 0x01	; 1
     2bc:	0e c0       	rjmp	.+28     	; 0x2da <read_AD590+0x48>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     2be:	c1 2c       	mov	r12, r1
     2c0:	d1 2c       	mov	r13, r1
     2c2:	76 01       	movw	r14, r12
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     2c4:	c0 e1       	ldi	r28, 0x10	; 16
			offset = 0.0;
			break;
     2c6:	09 c0       	rjmp	.+18     	; 0x2da <read_AD590+0x48>
{

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
     2c8:	c1 2c       	mov	r12, r1
     2ca:	d1 2c       	mov	r13, r1
     2cc:	76 01       	movw	r14, r12
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2ce:	c0 e0       	ldi	r28, 0x00	; 0
			break;
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <read_AD590+0x48>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2d2:	c1 2c       	mov	r12, r1
     2d4:	d1 2c       	mov	r13, r1
     2d6:	76 01       	movw	r14, r12
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2d8:	c4 e0       	ldi	r28, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	66 e0       	ldi	r22, 0x06	; 6
     2de:	87 e2       	ldi	r24, 0x27	; 39
     2e0:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2e4:	4c 2f       	mov	r20, r28
     2e6:	40 95       	com	r20
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	87 e2       	ldi	r24, 0x27	; 39
     2ec:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     2f0:	4c 2f       	mov	r20, r28
     2f2:	6a e0       	ldi	r22, 0x0A	; 10
     2f4:	87 e2       	ldi	r24, 0x27	; 39
     2f6:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2fa:	86 e1       	ldi	r24, 0x16	; 22
     2fc:	8a 95       	dec	r24
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <read_AD590+0x6a>
     300:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	voltage = read_ADS1115(ADC_TE, PGA0512, AIN3, DR128);
     302:	20 e8       	ldi	r18, 0x80	; 128
     304:	40 e7       	ldi	r20, 0x70	; 112
     306:	68 e0       	ldi	r22, 0x08	; 8
     308:	88 e4       	ldi	r24, 0x48	; 72
     30a:	0e 94 9f 01 	call	0x33e	; 0x33e <read_ADS1115>
	temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	4a e7       	ldi	r20, 0x7A	; 122
     314:	54 e4       	ldi	r21, 0x44	; 68
     316:	0e 94 c7 1c 	call	0x398e	; 0x398e <__mulsf3>
     31a:	23 e3       	ldi	r18, 0x33	; 51
     31c:	33 e9       	ldi	r19, 0x93	; 147
     31e:	48 e8       	ldi	r20, 0x88	; 136
     320:	53 e4       	ldi	r21, 0x43	; 67
     322:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>
     326:	9b 01       	movw	r18, r22
     328:	ac 01       	movw	r20, r24
     32a:	c7 01       	movw	r24, r14
     32c:	b6 01       	movw	r22, r12
     32e:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
	return(temperature);

}
     332:	cf 91       	pop	r28
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	08 95       	ret

0000033e <read_ADS1115>:
		datarate - one of the eight selectable data rates. We chose the
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
float read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins, uint8_t datarate)
{
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	d8 2f       	mov	r29, r24
     350:	f6 2e       	mov	r15, r22
	float scale, voltage;
	uint8_t confighi, configlo, retval, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     352:	46 2b       	or	r20, r22
     354:	c4 2f       	mov	r28, r20
     356:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     358:	12 2f       	mov	r17, r18
     35a:	13 60       	ori	r17, 0x03	; 3

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start condition
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
     362:	08 2f       	mov	r16, r24
     364:	88 23       	and	r24, r24
     366:	69 f0       	breq	.+26     	; 0x382 <read_ADS1115+0x44>
		stop_TWI();
     368:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
		return(retval);
     36c:	60 2f       	mov	r22, r16
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 10 1c 	call	0x3820	; 0x3820 <__floatunsisf>
     378:	56 2f       	mov	r21, r22
     37a:	47 2f       	mov	r20, r23
     37c:	38 2f       	mov	r19, r24
     37e:	29 2f       	mov	r18, r25
     380:	d0 c0       	rjmp	.+416    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	}
	if ((retval = write_TWI(ADS1115CONFIG))) {		// Write the CONFIG register
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
     388:	08 2f       	mov	r16, r24
     38a:	88 23       	and	r24, r24
     38c:	69 f0       	breq	.+26     	; 0x3a8 <read_ADS1115+0x6a>
		stop_TWI();
     38e:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
		return(retval);
     392:	60 2f       	mov	r22, r16
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 10 1c 	call	0x3820	; 0x3820 <__floatunsisf>
     39e:	56 2f       	mov	r21, r22
     3a0:	47 2f       	mov	r20, r23
     3a2:	38 2f       	mov	r19, r24
     3a4:	29 2f       	mov	r18, r25
     3a6:	bd c0       	rjmp	.+378    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	}
	if ((retval = write_TWI(confighi))) {			// Write high byte
     3a8:	8c 2f       	mov	r24, r28
     3aa:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
     3ae:	c8 2f       	mov	r28, r24
     3b0:	88 23       	and	r24, r24
     3b2:	69 f0       	breq	.+26     	; 0x3ce <read_ADS1115+0x90>
		stop_TWI();
     3b4:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
		return(retval);
     3b8:	6c 2f       	mov	r22, r28
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 10 1c 	call	0x3820	; 0x3820 <__floatunsisf>
     3c4:	56 2f       	mov	r21, r22
     3c6:	47 2f       	mov	r20, r23
     3c8:	38 2f       	mov	r19, r24
     3ca:	29 2f       	mov	r18, r25
     3cc:	aa c0       	rjmp	.+340    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	}
	if ((retval = write_TWI(configlo))) {			// Write low byte
     3ce:	81 2f       	mov	r24, r17
     3d0:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
     3d4:	c8 2f       	mov	r28, r24
     3d6:	88 23       	and	r24, r24
     3d8:	69 f0       	breq	.+26     	; 0x3f4 <read_ADS1115+0xb6>
		stop_TWI();
     3da:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
		return(retval);
     3de:	6c 2f       	mov	r22, r28
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 10 1c 	call	0x3820	; 0x3820 <__floatunsisf>
     3ea:	56 2f       	mov	r21, r22
     3ec:	47 2f       	mov	r20, r23
     3ee:	38 2f       	mov	r19, r24
     3f0:	29 2f       	mov	r18, r25
     3f2:	97 c0       	rjmp	.+302    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
	}
	stop_TWI();
     3f4:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
     3f8:	8c e1       	ldi	r24, 0x1C	; 28
     3fa:	8a 95       	dec	r24
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <read_ADS1115+0xbc>

	_delay_us(25);									// Power-up time

	converting = YES;
     3fe:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     400:	09 c0       	rjmp	.+18     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		start_TWI(addr, TWIREAD);
     402:	61 e0       	ldi	r22, 0x01	; 1
     404:	8d 2f       	mov	r24, r29
     406:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
     40a:	0e 94 9f 18 	call	0x313e	; 0x313e <readlast_TWI>
		if (flag & 0b10000000) {			// or add a timer timeout
     40e:	88 23       	and	r24, r24
     410:	0c f4       	brge	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			converting = NO;
     412:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     414:	c1 11       	cpse	r28, r1
     416:	f5 cf       	rjmp	.-22     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
		if (flag & 0b10000000) {			// or add a timer timeout
			converting = NO;
		}
	}
	stop_TWI();
     418:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>

	start_TWI(addr, TWIWRITE);
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	8d 2f       	mov	r24, r29
     420:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	8d 2f       	mov	r24, r29
     42e:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
	highbyte = read_TWI();
     432:	0e 94 8f 18 	call	0x311e	; 0x311e <read_TWI>
     436:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     438:	0e 94 9f 18 	call	0x313e	; 0x313e <readlast_TWI>
     43c:	d8 2f       	mov	r29, r24
	stop_TWI();
     43e:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>

	value = highbyte;
     442:	6c 2f       	mov	r22, r28
     444:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     446:	76 2f       	mov	r23, r22
     448:	66 27       	eor	r22, r22
	value |= lowbyte;
     44a:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     44c:	84 e0       	ldi	r24, 0x04	; 4
     44e:	f8 16       	cp	r15, r24
     450:	49 f1       	breq	.+82     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     452:	8f 15       	cp	r24, r15
     454:	30 f0       	brcs	.+12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     456:	ff 20       	and	r15, r15
     458:	d9 f1       	breq	.+118    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	f8 16       	cp	r15, r24
     45e:	69 f1       	breq	.+90     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     460:	42 c0       	rjmp	.+132    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     462:	88 e0       	ldi	r24, 0x08	; 8
     464:	f8 16       	cp	r15, r24
     466:	09 f4       	brne	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     468:	42 c0       	rjmp	.+132    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     46a:	8a e0       	ldi	r24, 0x0A	; 10
     46c:	f8 16       	cp	r15, r24
     46e:	21 f0       	breq	.+8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     470:	86 e0       	ldi	r24, 0x06	; 6
     472:	f8 12       	cpse	r15, r24
     474:	38 c0       	rjmp	.+112    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     476:	0b c0       	rjmp	.+22     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		case PGA0256:
			scale = SCA0256;
     478:	0f 2e       	mov	r0, r31
     47a:	f4 e7       	ldi	r31, 0x74	; 116
     47c:	cf 2e       	mov	r12, r31
     47e:	f3 e1       	ldi	r31, 0x13	; 19
     480:	df 2e       	mov	r13, r31
     482:	f3 e0       	ldi	r31, 0x03	; 3
     484:	ef 2e       	mov	r14, r31
     486:	f7 e3       	ldi	r31, 0x37	; 55
     488:	ff 2e       	mov	r15, r31
     48a:	f0 2d       	mov	r31, r0
     48c:	3a c0       	rjmp	.+116    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     48e:	0f 2e       	mov	r0, r31
     490:	f4 e7       	ldi	r31, 0x74	; 116
     492:	cf 2e       	mov	r12, r31
     494:	f3 e1       	ldi	r31, 0x13	; 19
     496:	df 2e       	mov	r13, r31
     498:	f3 e0       	ldi	r31, 0x03	; 3
     49a:	ef 2e       	mov	r14, r31
     49c:	f8 e3       	ldi	r31, 0x38	; 56
     49e:	ff 2e       	mov	r15, r31
     4a0:	f0 2d       	mov	r31, r0
			break;
     4a2:	2f c0       	rjmp	.+94     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		case PGA2048:
			scale = SCA2048;
     4a4:	0f 2e       	mov	r0, r31
     4a6:	f2 e1       	ldi	r31, 0x12	; 18
     4a8:	cf 2e       	mov	r12, r31
     4aa:	f3 e1       	ldi	r31, 0x13	; 19
     4ac:	df 2e       	mov	r13, r31
     4ae:	f3 e8       	ldi	r31, 0x83	; 131
     4b0:	ef 2e       	mov	r14, r31
     4b2:	f8 e3       	ldi	r31, 0x38	; 56
     4b4:	ff 2e       	mov	r15, r31
     4b6:	f0 2d       	mov	r31, r0
			break;
     4b8:	24 c0       	rjmp	.+72     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		case PGA4096:
			scale = SCA4096;
     4ba:	0f 2e       	mov	r0, r31
     4bc:	f4 e7       	ldi	r31, 0x74	; 116
     4be:	cf 2e       	mov	r12, r31
     4c0:	f3 e1       	ldi	r31, 0x13	; 19
     4c2:	df 2e       	mov	r13, r31
     4c4:	f3 e0       	ldi	r31, 0x03	; 3
     4c6:	ef 2e       	mov	r14, r31
     4c8:	f9 e3       	ldi	r31, 0x39	; 57
     4ca:	ff 2e       	mov	r15, r31
     4cc:	f0 2d       	mov	r31, r0
			break;
     4ce:	19 c0       	rjmp	.+50     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		case PGA6144:
			scale = SCA6144;
     4d0:	0f 2e       	mov	r0, r31
     4d2:	fe e2       	ldi	r31, 0x2E	; 46
     4d4:	cf 2e       	mov	r12, r31
     4d6:	fd e9       	ldi	r31, 0x9D	; 157
     4d8:	df 2e       	mov	r13, r31
     4da:	f4 e4       	ldi	r31, 0x44	; 68
     4dc:	ef 2e       	mov	r14, r31
     4de:	f9 e3       	ldi	r31, 0x39	; 57
     4e0:	ff 2e       	mov	r15, r31
     4e2:	f0 2d       	mov	r31, r0
			break;
     4e4:	0e c0       	rjmp	.+28     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
		default:
			scale = 0.0;
     4e6:	c1 2c       	mov	r12, r1
     4e8:	d1 2c       	mov	r13, r1
     4ea:	76 01       	movw	r14, r12
			break;
     4ec:	0a c0       	rjmp	.+20     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     4ee:	0f 2e       	mov	r0, r31
     4f0:	f1 e7       	ldi	r31, 0x71	; 113
     4f2:	cf 2e       	mov	r12, r31
     4f4:	f3 e1       	ldi	r31, 0x13	; 19
     4f6:	df 2e       	mov	r13, r31
     4f8:	f3 e8       	ldi	r31, 0x83	; 131
     4fa:	ef 2e       	mov	r14, r31
     4fc:	f7 e3       	ldi	r31, 0x37	; 55
     4fe:	ff 2e       	mov	r15, r31
     500:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	voltage = scale * (float) value;
     502:	07 2e       	mov	r0, r23
     504:	00 0c       	add	r0, r0
     506:	88 0b       	sbc	r24, r24
     508:	99 0b       	sbc	r25, r25
     50a:	0e 94 12 1c 	call	0x3824	; 0x3824 <__floatsisf>
     50e:	9b 01       	movw	r18, r22
     510:	ac 01       	movw	r20, r24
     512:	c7 01       	movw	r24, r14
     514:	b6 01       	movw	r22, r12
     516:	0e 94 c7 1c 	call	0x398e	; 0x398e <__mulsf3>
	return(voltage);
     51a:	56 2f       	mov	r21, r22
     51c:	47 2f       	mov	r20, r23
     51e:	38 2f       	mov	r19, r24
     520:	29 2f       	mov	r18, r25

}
     522:	65 2f       	mov	r22, r21
     524:	74 2f       	mov	r23, r20
     526:	83 2f       	mov	r24, r19
     528:	92 2f       	mov	r25, r18
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	df 90       	pop	r13
     538:	cf 90       	pop	r12
     53a:	08 95       	ret

0000053c <init_BEEPER>:
#include "beeper.h"

void init_BEEPER(void)
{

	PORTB.OUTSET = PIN2_bm;
     53c:	e0 e2       	ldi	r30, 0x20	; 32
     53e:	f4 e0       	ldi	r31, 0x04	; 4
     540:	84 e0       	ldi	r24, 0x04	; 4
     542:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     544:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = PIN2_bm;
     546:	86 83       	std	Z+6, r24	; 0x06
     548:	08 95       	ret

0000054a <echo_cmd>:
{
	if ((d >= '0') && (d <= '9')) {
		return(1);
	}
	return(0);
}
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	cb 52       	subi	r28, 0x2B	; 43
     558:	d1 40       	sbci	r29, 0x01	; 1
     55a:	cd bf       	out	0x3d, r28	; 61
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	18 2f       	mov	r17, r24
     560:	09 2f       	mov	r16, r25
     562:	8e e0       	ldi	r24, 0x0E	; 14
     564:	e2 e5       	ldi	r30, 0x52	; 82
     566:	f7 e8       	ldi	r31, 0x87	; 135
     568:	de 01       	movw	r26, r28
     56a:	11 96       	adiw	r26, 0x01	; 1
     56c:	01 90       	ld	r0, Z+
     56e:	0d 92       	st	X+, r0
     570:	8a 95       	dec	r24
     572:	e1 f7       	brne	.-8      	; 0x56c <echo_cmd+0x22>
     574:	ce 01       	movw	r24, r28
     576:	0f 96       	adiw	r24, 0x0f	; 15
     578:	0e 94 87 05 	call	0xb0e	; 0xb0e <get_time>
     57c:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     580:	82 ff       	sbrs	r24, 2
     582:	03 c0       	rjmp	.+6      	; 0x58a <echo_cmd+0x40>
     584:	22 e0       	ldi	r18, 0x02	; 2
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	02 c0       	rjmp	.+4      	; 0x58e <echo_cmd+0x44>
     58a:	21 e0       	ldi	r18, 0x01	; 1
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	ce 01       	movw	r24, r28
     594:	0f 96       	adiw	r24, 0x0f	; 15
     596:	9f 93       	push	r25
     598:	8f 93       	push	r24
     59a:	3f 93       	push	r19
     59c:	2f 93       	push	r18
     59e:	0e 97       	sbiw	r24, 0x0e	; 14
     5a0:	9f 93       	push	r25
     5a2:	8f 93       	push	r24
     5a4:	8e 01       	movw	r16, r28
     5a6:	0d 5d       	subi	r16, 0xDD	; 221
     5a8:	1f 4f       	sbci	r17, 0xFF	; 255
     5aa:	1f 93       	push	r17
     5ac:	0f 93       	push	r16
     5ae:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
     5b2:	c8 01       	movw	r24, r16
     5b4:	0e 94 07 0a 	call	0x140e	; 0x140e <checksum_NMEA>
     5b8:	f8 01       	movw	r30, r16
     5ba:	01 90       	ld	r0, Z+
     5bc:	00 20       	and	r0, r0
     5be:	e9 f7       	brne	.-6      	; 0x5ba <echo_cmd+0x70>
     5c0:	31 97       	sbiw	r30, 0x01	; 1
     5c2:	af 01       	movw	r20, r30
     5c4:	40 1b       	sub	r20, r16
     5c6:	51 0b       	sbc	r21, r17
     5c8:	b8 01       	movw	r22, r16
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	c5 5d       	subi	r28, 0xD5	; 213
     5d6:	de 4f       	sbci	r29, 0xFE	; 254
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	08 95       	ret

000005e6 <get_cmdline>:
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	9c 01       	movw	r18, r24
     5ec:	40 e0       	ldi	r20, 0x00	; 0
     5ee:	1c c0       	rjmp	.+56     	; 0x628 <get_cmdline+0x42>
     5f0:	c9 e1       	ldi	r28, 0x19	; 25
     5f2:	dc e2       	ldi	r29, 0x2C	; 44
     5f4:	e8 81       	ld	r30, Y
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	e7 5e       	subi	r30, 0xE7	; 231
     5fa:	f4 4d       	sbci	r31, 0xD4	; 212
     5fc:	80 81       	ld	r24, Z
     5fe:	f9 01       	movw	r30, r18
     600:	e4 0f       	add	r30, r20
     602:	f1 1d       	adc	r31, r1
     604:	80 83       	st	Z, r24
     606:	ab e1       	ldi	r26, 0x1B	; 27
     608:	bc e2       	ldi	r27, 0x2C	; 44
     60a:	8c 91       	ld	r24, X
     60c:	81 50       	subi	r24, 0x01	; 1
     60e:	8c 93       	st	X, r24
     610:	88 81       	ld	r24, Y
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	6f ef       	ldi	r22, 0xFF	; 255
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	0e 94 b1 20 	call	0x4162	; 0x4162 <__divmodhi4>
     61e:	88 83       	st	Y, r24
     620:	80 81       	ld	r24, Z
     622:	88 23       	and	r24, r24
     624:	29 f0       	breq	.+10     	; 0x630 <get_cmdline+0x4a>
     626:	4f 5f       	subi	r20, 0xFF	; 255
     628:	80 91 1b 2c 	lds	r24, 0x2C1B	; 0x802c1b <recv0_buf+0x102>
     62c:	81 11       	cpse	r24, r1
     62e:	e0 cf       	rjmp	.-64     	; 0x5f0 <get_cmdline+0xa>
     630:	f9 01       	movw	r30, r18
     632:	e4 0f       	add	r30, r20
     634:	f1 1d       	adc	r31, r1
     636:	10 82       	st	Z, r1
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     63e:	9f e9       	ldi	r25, 0x9F	; 159
     640:	98 0f       	add	r25, r24
     642:	9a 31       	cpi	r25, 0x1A	; 26
     644:	28 f0       	brcs	.+10     	; 0x650 <isaletter+0x12>
     646:	81 54       	subi	r24, 0x41	; 65
     648:	8a 31       	cpi	r24, 0x1A	; 26
     64a:	20 f4       	brcc	.+8      	; 0x654 <isaletter+0x16>
		return(1);
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	08 95       	ret
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	08 95       	ret
	}
	return(0);
     654:	80 e0       	ldi	r24, 0x00	; 0

}
     656:	08 95       	ret

00000658 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     658:	ef 92       	push	r14
     65a:	ff 92       	push	r15
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     664:	e6 2e       	mov	r14, r22
     666:	f1 2c       	mov	r15, r1
     668:	84 e3       	ldi	r24, 0x34	; 52
     66a:	8e 9d       	mul	r24, r14
     66c:	f0 01       	movw	r30, r0
     66e:	8f 9d       	mul	r24, r15
     670:	f0 0d       	add	r31, r0
     672:	11 24       	eor	r1, r1
     674:	eb 5f       	subi	r30, 0xFB	; 251
     676:	f7 4d       	sbci	r31, 0xD7	; 215
     678:	8f e3       	ldi	r24, 0x3F	; 63
     67a:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     67c:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     67e:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     680:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {
     682:	04 c0       	rjmp	.+8      	; 0x68c <parse_cmd+0x34>
		if (*ptr == '\0') {
     684:	11 23       	and	r17, r17
     686:	09 f4       	brne	.+2      	; 0x68a <parse_cmd+0x32>
     688:	75 c0       	rjmp	.+234    	; 0x774 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     68a:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {
     68c:	18 81       	ld	r17, Y
     68e:	81 2f       	mov	r24, r17
     690:	0e 94 1f 03 	call	0x63e	; 0x63e <isaletter>
     694:	88 23       	and	r24, r24
     696:	b1 f3       	breq	.-20     	; 0x684 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     698:	21 96       	adiw	r28, 0x01	; 1
     69a:	84 e3       	ldi	r24, 0x34	; 52
     69c:	8e 9d       	mul	r24, r14
     69e:	f0 01       	movw	r30, r0
     6a0:	8f 9d       	mul	r24, r15
     6a2:	f0 0d       	add	r31, r0
     6a4:	11 24       	eor	r1, r1
     6a6:	eb 5f       	subi	r30, 0xFB	; 251
     6a8:	f7 4d       	sbci	r31, 0xD7	; 215
     6aa:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {
     6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     6ae:	11 23       	and	r17, r17
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <parse_cmd+0x5c>
     6b2:	60 c0       	rjmp	.+192    	; 0x774 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     6b4:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {
     6b6:	18 81       	ld	r17, Y
     6b8:	81 2f       	mov	r24, r17
     6ba:	0e 94 1f 03 	call	0x63e	; 0x63e <isaletter>
     6be:	88 23       	and	r24, r24
     6c0:	b1 f3       	breq	.-20     	; 0x6ae <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     6c2:	21 96       	adiw	r28, 0x01	; 1
     6c4:	84 e3       	ldi	r24, 0x34	; 52
     6c6:	8e 9d       	mul	r24, r14
     6c8:	f0 01       	movw	r30, r0
     6ca:	8f 9d       	mul	r24, r15
     6cc:	f0 0d       	add	r31, r0
     6ce:	11 24       	eor	r1, r1
     6d0:	eb 5f       	subi	r30, 0xFB	; 251
     6d2:	f7 4d       	sbci	r31, 0xD7	; 215
     6d4:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	2a c0       	rjmp	.+84     	; 0x72e <parse_cmd+0xd6>
		if (*ptr == '\0') {
     6da:	98 81       	ld	r25, Y
     6dc:	91 11       	cpse	r25, r1
     6de:	0c c0       	rjmp	.+24     	; 0x6f8 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     6e0:	94 e3       	ldi	r25, 0x34	; 52
     6e2:	9e 9d       	mul	r25, r14
     6e4:	f0 01       	movw	r30, r0
     6e6:	9f 9d       	mul	r25, r15
     6e8:	f0 0d       	add	r31, r0
     6ea:	11 24       	eor	r1, r1
     6ec:	eb 5f       	subi	r30, 0xFB	; 251
     6ee:	f7 4d       	sbci	r31, 0xD7	; 215
     6f0:	e8 0f       	add	r30, r24
     6f2:	f1 1d       	adc	r31, r1
     6f4:	12 82       	std	Z+2, r1	; 0x02
			return;
     6f6:	3e c0       	rjmp	.+124    	; 0x774 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {
     6f8:	9b 33       	cpi	r25, 0x3B	; 59
     6fa:	61 f4       	brne	.+24     	; 0x714 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     6fc:	94 e3       	ldi	r25, 0x34	; 52
     6fe:	9e 9d       	mul	r25, r14
     700:	f0 01       	movw	r30, r0
     702:	9f 9d       	mul	r25, r15
     704:	f0 0d       	add	r31, r0
     706:	11 24       	eor	r1, r1
     708:	eb 5f       	subi	r30, 0xFB	; 251
     70a:	f7 4d       	sbci	r31, 0xD7	; 215
     70c:	e8 0f       	add	r30, r24
     70e:	f1 1d       	adc	r31, r1
     710:	12 82       	std	Z+2, r1	; 0x02
			break;
     712:	0f c0       	rjmp	.+30     	; 0x732 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     714:	21 96       	adiw	r28, 0x01	; 1
     716:	24 e3       	ldi	r18, 0x34	; 52
     718:	2e 9d       	mul	r18, r14
     71a:	f0 01       	movw	r30, r0
     71c:	2f 9d       	mul	r18, r15
     71e:	f0 0d       	add	r31, r0
     720:	11 24       	eor	r1, r1
     722:	eb 5f       	subi	r30, 0xFB	; 251
     724:	f7 4d       	sbci	r31, 0xD7	; 215
     726:	e8 0f       	add	r30, r24
     728:	f1 1d       	adc	r31, r1
     72a:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     72c:	8f 5f       	subi	r24, 0xFF	; 255
     72e:	89 32       	cpi	r24, 0x29	; 41
     730:	a0 f2       	brcs	.-88     	; 0x6da <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
     732:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	1c c0       	rjmp	.+56     	; 0x770 <parse_cmd+0x118>
		if (*ptr == '\0') {
     738:	98 81       	ld	r25, Y
     73a:	91 11       	cpse	r25, r1
     73c:	0c c0       	rjmp	.+24     	; 0x756 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     73e:	94 e3       	ldi	r25, 0x34	; 52
     740:	9e 9d       	mul	r25, r14
     742:	f0 01       	movw	r30, r0
     744:	9f 9d       	mul	r25, r15
     746:	f0 0d       	add	r31, r0
     748:	11 24       	eor	r1, r1
     74a:	eb 5f       	subi	r30, 0xFB	; 251
     74c:	f7 4d       	sbci	r31, 0xD7	; 215
     74e:	e8 0f       	add	r30, r24
     750:	f1 1d       	adc	r31, r1
     752:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     754:	0f c0       	rjmp	.+30     	; 0x774 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     756:	21 96       	adiw	r28, 0x01	; 1
     758:	24 e3       	ldi	r18, 0x34	; 52
     75a:	2e 9d       	mul	r18, r14
     75c:	f0 01       	movw	r30, r0
     75e:	2f 9d       	mul	r18, r15
     760:	f0 0d       	add	r31, r0
     762:	11 24       	eor	r1, r1
     764:	eb 5f       	subi	r30, 0xFB	; 251
     766:	f7 4d       	sbci	r31, 0xD7	; 215
     768:	e8 0f       	add	r30, r24
     76a:	f1 1d       	adc	r31, r1
     76c:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     76e:	8f 5f       	subi	r24, 0xFF	; 255
     770:	89 30       	cpi	r24, 0x09	; 9
     772:	10 f3       	brcs	.-60     	; 0x738 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	08 95       	ret

00000780 <send_prompt>:

	If specMech is rebooted, it will only prompt with a single exclamation
	point (!) until it receives an acknowledgment in the form of a single !.
------------------------------------------------------------------------------*/
void send_prompt(uint8_t prompt_flag)
{
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
     78c:	6d 97       	sbiw	r28, 0x1d	; 29
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	de bf       	out	0x3e, r29	; 62

	const char str0[] = ">";
     792:	2e e3       	ldi	r18, 0x3E	; 62
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	29 83       	std	Y+1, r18	; 0x01
     798:	3a 83       	std	Y+2, r19	; 0x02
	const char str1[] = "!";
     79a:	21 e2       	ldi	r18, 0x21	; 33
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	2b 83       	std	Y+3, r18	; 0x03
     7a0:	3c 83       	std	Y+4, r19	; 0x04

	char prompt_str[25];

	switch (prompt_flag) {
     7a2:	88 23       	and	r24, r24
     7a4:	19 f0       	breq	.+6      	; 0x7ac <send_prompt+0x2c>
     7a6:	81 30       	cpi	r24, 0x01	; 1
     7a8:	b9 f0       	breq	.+46     	; 0x7d8 <send_prompt+0x58>
     7aa:	2c c0       	rjmp	.+88     	; 0x804 <send_prompt+0x84>
		case GREATERPROMPT:
			strcpy(prompt_str, str0);
     7ac:	8e 01       	movw	r16, r28
     7ae:	0b 5f       	subi	r16, 0xFB	; 251
     7b0:	1f 4f       	sbci	r17, 0xFF	; 255
     7b2:	be 01       	movw	r22, r28
     7b4:	6f 5f       	subi	r22, 0xFF	; 255
     7b6:	7f 4f       	sbci	r23, 0xFF	; 255
     7b8:	c8 01       	movw	r24, r16
     7ba:	0e 94 80 22 	call	0x4500	; 0x4500 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     7be:	f8 01       	movw	r30, r16
     7c0:	01 90       	ld	r0, Z+
     7c2:	00 20       	and	r0, r0
     7c4:	e9 f7       	brne	.-6      	; 0x7c0 <send_prompt+0x40>
     7c6:	31 97       	sbiw	r30, 0x01	; 1
     7c8:	af 01       	movw	r20, r30
     7ca:	40 1b       	sub	r20, r16
     7cc:	51 0b       	sbc	r21, r17
     7ce:	b8 01       	movw	r22, r16
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>
			break;
     7d6:	2b c0       	rjmp	.+86     	; 0x82e <send_prompt+0xae>
			strcpy(prompt_str, str0);
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
			break;
*/
		case EXCLAIMPROMPT:
			strcpy(prompt_str, str1);
     7d8:	8e 01       	movw	r16, r28
     7da:	0b 5f       	subi	r16, 0xFB	; 251
     7dc:	1f 4f       	sbci	r17, 0xFF	; 255
     7de:	be 01       	movw	r22, r28
     7e0:	6d 5f       	subi	r22, 0xFD	; 253
     7e2:	7f 4f       	sbci	r23, 0xFF	; 255
     7e4:	c8 01       	movw	r24, r16
     7e6:	0e 94 80 22 	call	0x4500	; 0x4500 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     7ea:	f8 01       	movw	r30, r16
     7ec:	01 90       	ld	r0, Z+
     7ee:	00 20       	and	r0, r0
     7f0:	e9 f7       	brne	.-6      	; 0x7ec <send_prompt+0x6c>
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	af 01       	movw	r20, r30
     7f6:	40 1b       	sub	r20, r16
     7f8:	51 0b       	sbc	r21, r17
     7fa:	b8 01       	movw	r22, r16
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>
			break;
     802:	15 c0       	rjmp	.+42     	; 0x82e <send_prompt+0xae>

		default:
			strcpy(prompt_str, str1);
     804:	8e 01       	movw	r16, r28
     806:	0b 5f       	subi	r16, 0xFB	; 251
     808:	1f 4f       	sbci	r17, 0xFF	; 255
     80a:	be 01       	movw	r22, r28
     80c:	6d 5f       	subi	r22, 0xFD	; 253
     80e:	7f 4f       	sbci	r23, 0xFF	; 255
     810:	c8 01       	movw	r24, r16
     812:	0e 94 80 22 	call	0x4500	; 0x4500 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     816:	f8 01       	movw	r30, r16
     818:	01 90       	ld	r0, Z+
     81a:	00 20       	and	r0, r0
     81c:	e9 f7       	brne	.-6      	; 0x818 <send_prompt+0x98>
     81e:	31 97       	sbiw	r30, 0x01	; 1
     820:	af 01       	movw	r20, r30
     822:	40 1b       	sub	r20, r16
     824:	51 0b       	sbc	r21, r17
     826:	b8 01       	movw	r22, r16
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>
			break;

	}

}
     82e:	6d 96       	adiw	r28, 0x1d	; 29
     830:	cd bf       	out	0x3d, r28	; 61
     832:	de bf       	out	0x3e, r29	; 62
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	08 95       	ret

0000083e <rebootACKd>:
uint8_t rebootACKd(char *cmdline)
{

	static uint8_t rebootnack = 1;
	
	if (rebootnack) {
     83e:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     842:	22 23       	and	r18, r18
     844:	31 f1       	breq	.+76     	; 0x892 <rebootACKd+0x54>
     846:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     848:	80 81       	ld	r24, Z
     84a:	81 32       	cpi	r24, 0x21	; 33
     84c:	a1 f4       	brne	.+40     	; 0x876 <rebootACKd+0x38>
     84e:	91 81       	ldd	r25, Z+1	; 0x01
     850:	91 11       	cpse	r25, r1
     852:	11 c0       	rjmp	.+34     	; 0x876 <rebootACKd+0x38>
			init_RTC(511);		// 1-sec RTC clock ticks
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 56 17 	call	0x2eac	; 0x2eac <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     85c:	85 e0       	ldi	r24, 0x05	; 5
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <timeoutOLED>
     864:	90 93 10 2a 	sts	0x2A10, r25	; 0x802a10 <timeoutOLED+0x1>
			send_prompt(GREATERPROMPT);
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	0e 94 c0 03 	call	0x780	; 0x780 <send_prompt>
			rebootnack = 0;
     86e:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
			return(YES);
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	08 95       	ret
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     876:	81 32       	cpi	r24, 0x21	; 33
     878:	39 f4       	brne	.+14     	; 0x888 <rebootACKd+0x4a>
     87a:	81 81       	ldd	r24, Z+1	; 0x01
     87c:	88 23       	and	r24, r24
     87e:	21 f0       	breq	.+8      	; 0x888 <rebootACKd+0x4a>
//			send_prompt(EXCLAIMPROMPT);
			reboot();
     880:	0e 94 16 1b 	call	0x362c	; 0x362c <reboot>
			return(NO);
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	08 95       	ret
		} else {
			send_prompt(EXCLAIMPROMPT);
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	0e 94 c0 03 	call	0x780	; 0x780 <send_prompt>
			return(NO);
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	08 95       	ret
		}
	}

	return(YES);
     892:	81 e0       	ldi	r24, 0x01	; 1

}
     894:	08 95       	ret

00000896 <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	cf 5f       	subi	r28, 0xFF	; 255
     8a0:	d1 09       	sbc	r29, r1
     8a2:	cd bf       	out	0x3d, r28	; 61
     8a4:	de bf       	out	0x3e, r29	; 62
			break;
		}
	}
	cmdline[i] = '\0';		// Overflow protection
*/
	get_cmdline(cmdline);
     8a6:	ce 01       	movw	r24, r28
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <get_cmdline>

	if (!rebootACKd(cmdline)) {
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	0e 94 1f 04 	call	0x83e	; 0x83e <rebootACKd>
     8b6:	88 23       	and	r24, r24
     8b8:	09 f4       	brne	.+2      	; 0x8bc <commands+0x26>
     8ba:	63 c0       	rjmp	.+198    	; 0x982 <commands+0xec>
			return;
		}
	}
*/
	// Echo the command back to the user
		echo_cmd(cmdline);
     8bc:	ce 01       	movw	r24, r28
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	0e 94 a5 02 	call	0x54a	; 0x54a <echo_cmd>

	if (strlen(cmdline) == 0) {		// Catch a terminal cr (not an error)
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	81 11       	cpse	r24, r1
     8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <commands+0x3a>
		send_prompt(GREATERPROMPT);
     8ca:	0e 94 c0 03 	call	0x780	; 0x780 <send_prompt>
		return;
     8ce:	59 c0       	rjmp	.+178    	; 0x982 <commands+0xec>
	}

	parse_cmd(cmdline, cstack);
     8d0:	60 91 04 28 	lds	r22, 0x2804	; 0x802804 <__data_end>
     8d4:	ce 01       	movw	r24, r28
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	0e 94 2c 03 	call	0x658	; 0x658 <parse_cmd>
	verb = pcmd[cstack].cverb;
     8dc:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
     8e0:	24 e3       	ldi	r18, 0x34	; 52
     8e2:	82 9f       	mul	r24, r18
     8e4:	d0 01       	movw	r26, r0
     8e6:	11 24       	eor	r1, r1
     8e8:	ab 5f       	subi	r26, 0xFB	; 251
     8ea:	b7 4d       	sbci	r27, 0xD7	; 215
     8ec:	ec 91       	ld	r30, X
	object = pcmd[cstack].cobject;
     8ee:	11 96       	adiw	r26, 0x01	; 1
     8f0:	9c 91       	ld	r25, X

	switch (verb) {
     8f2:	4e 2f       	mov	r20, r30
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	fa 01       	movw	r30, r20
     8f8:	e2 55       	subi	r30, 0x52	; 82
     8fa:	f1 09       	sbc	r31, r1
     8fc:	e3 32       	cpi	r30, 0x23	; 35
     8fe:	f1 05       	cpc	r31, r1
     900:	60 f5       	brcc	.+88     	; 0x95a <commands+0xc4>
     902:	e0 5b       	subi	r30, 0xB0	; 176
     904:	ff 4f       	sbci	r31, 0xFF	; 255
     906:	0c 94 e4 20 	jmp	0x41c8	; 0x41c8 <__tablejump2__>
		case 'c':				// close
			prompt_flag = close_PNEU(object);
     90a:	89 2f       	mov	r24, r25
     90c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <close_PNEU>
     910:	28 2f       	mov	r18, r24
			break;
     912:	2a c0       	rjmp	.+84     	; 0x968 <commands+0xd2>

		case 'o':				// open
			prompt_flag = open_PNEU(object);
     914:	89 2f       	mov	r24, r25
     916:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <open_PNEU>
     91a:	28 2f       	mov	r18, r24
			break;
     91c:	25 c0       	rjmp	.+74     	; 0x968 <commands+0xd2>

		case 'm':				// move
			move_MOTOR(cstack);
     91e:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <move_MOTOR>
void commands(void)
{

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	char verb, object;				// Get rid of these and use cstack instead
	uint8_t prompt_flag = GREATERPROMPT;
     922:	20 e0       	ldi	r18, 0x00	; 0
			prompt_flag = open_PNEU(object);
			break;

		case 'm':				// move
			move_MOTOR(cstack);
			break;
     924:	21 c0       	rjmp	.+66     	; 0x968 <commands+0xd2>

		case 'r':				// Report
			prompt_flag = report(cstack);
     926:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <report>
     92a:	28 2f       	mov	r18, r24
			break;
     92c:	1d c0       	rjmp	.+58     	; 0x968 <commands+0xd2>

		case 's':				// Set
			prompt_flag = set(cstack);
     92e:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <set>
     932:	28 2f       	mov	r18, r24
			break;
     934:	19 c0       	rjmp	.+50     	; 0x968 <commands+0xd2>

		case 't':
			testroutine();
     936:	0e 94 12 18 	call	0x3024	; 0x3024 <testroutine>
void commands(void)
{

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	char verb, object;				// Get rid of these and use cstack instead
	uint8_t prompt_flag = GREATERPROMPT;
     93a:	20 e0       	ldi	r18, 0x00	; 0
			prompt_flag = set(cstack);
			break;

		case 't':
			testroutine();
			break;
     93c:	15 c0       	rjmp	.+42     	; 0x968 <commands+0xd2>

		case 'R':				// Reboot
			send_prompt(GREATERPROMPT);
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	0e 94 c0 03 	call	0x780	; 0x780 <send_prompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     944:	8a e6       	ldi	r24, 0x6A	; 106
     946:	94 e0       	ldi	r25, 0x04	; 4
     948:	21 e0       	ldi	r18, 0x01	; 1
     94a:	81 50       	subi	r24, 0x01	; 1
     94c:	90 40       	sbci	r25, 0x00	; 0
     94e:	20 40       	sbci	r18, 0x00	; 0
     950:	e1 f7       	brne	.-8      	; 0x94a <commands+0xb4>
     952:	00 c0       	rjmp	.+0      	; 0x954 <commands+0xbe>
			_delay_ms(100);		// Avoid finishing the command loop before reboot
			reboot();
     954:	0e 94 16 1b 	call	0x362c	; 0x362c <reboot>
			return;
     958:	14 c0       	rjmp	.+40     	; 0x982 <commands+0xec>

		default:
			printError(ERR_BADCOMMAND, "Not a command");
     95a:	60 e6       	ldi	r22, 0x60	; 96
     95c:	77 e8       	ldi	r23, 0x87	; 135
     95e:	89 ec       	ldi	r24, 0xC9	; 201
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 4d 06 	call	0xc9a	; 0xc9a <printError>
			prompt_flag = GREATERPROMPT;
     966:	20 e0       	ldi	r18, 0x00	; 0
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     968:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	6a e0       	ldi	r22, 0x0A	; 10
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	0e 94 b1 20 	call	0x4162	; 0x4162 <__divmodhi4>
     978:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <__data_end>
	send_prompt(prompt_flag);
     97c:	82 2f       	mov	r24, r18
     97e:	0e 94 c0 03 	call	0x780	; 0x780 <send_prompt>

}
     982:	c1 50       	subi	r28, 0x01	; 1
     984:	df 4f       	sbci	r29, 0xFF	; 255
     986:	cd bf       	out	0x3d, r28	; 61
     988:	de bf       	out	0x3e, r29	; 62
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     990:	fb 01       	movw	r30, r22
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     992:	70 81       	ld	r23, Z
	minutes = (*ds3231time++);
     994:	61 81       	ldd	r22, Z+1	; 0x01
	hours = (*ds3231time++);
     996:	52 81       	ldd	r21, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     998:	44 81       	ldd	r20, Z+4	; 0x04
	month = (*ds3231time++);
     99a:	35 81       	ldd	r19, Z+5	; 0x05
	year = (*ds3231time);
     99c:	26 81       	ldd	r18, Z+6	; 0x06

	sprintf(isotime, "20%02x-%02x-%02xT%02x:%02x:%02x",
     99e:	1f 92       	push	r1
     9a0:	7f 93       	push	r23
     9a2:	1f 92       	push	r1
     9a4:	6f 93       	push	r22
     9a6:	1f 92       	push	r1
     9a8:	5f 93       	push	r21
     9aa:	1f 92       	push	r1
     9ac:	4f 93       	push	r20
     9ae:	1f 92       	push	r1
     9b0:	3f 93       	push	r19
     9b2:	1f 92       	push	r1
     9b4:	2f 93       	push	r18
     9b6:	2e e6       	ldi	r18, 0x6E	; 110
     9b8:	37 e8       	ldi	r19, 0x87	; 135
     9ba:	3f 93       	push	r19
     9bc:	2f 93       	push	r18
     9be:	9f 93       	push	r25
     9c0:	8f 93       	push	r24
     9c2:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
		year, month, date, hours, minutes, seconds);

}
     9c6:	8d b7       	in	r24, 0x3d	; 61
     9c8:	9e b7       	in	r25, 0x3e	; 62
     9ca:	40 96       	adiw	r24, 0x10	; 16
     9cc:	8d bf       	out	0x3d, r24	; 61
     9ce:	9e bf       	out	0x3e, r25	; 62
     9d0:	08 95       	ret

000009d2 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ssZ
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     9d2:	dc 01       	movw	r26, r24
     9d4:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     9d6:	81 89       	ldd	r24, Z+17	; 0x11
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	c0 97       	sbiw	r24, 0x30	; 48
     9dc:	82 95       	swap	r24
     9de:	92 95       	swap	r25
     9e0:	90 7f       	andi	r25, 0xF0	; 240
     9e2:	98 27       	eor	r25, r24
     9e4:	80 7f       	andi	r24, 0xF0	; 240
     9e6:	98 27       	eor	r25, r24
     9e8:	92 89       	ldd	r25, Z+18	; 0x12
     9ea:	90 53       	subi	r25, 0x30	; 48
     9ec:	89 2b       	or	r24, r25
     9ee:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     9f0:	86 85       	ldd	r24, Z+14	; 0x0e
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	c0 97       	sbiw	r24, 0x30	; 48
     9f6:	82 95       	swap	r24
     9f8:	92 95       	swap	r25
     9fa:	90 7f       	andi	r25, 0xF0	; 240
     9fc:	98 27       	eor	r25, r24
     9fe:	80 7f       	andi	r24, 0xF0	; 240
     a00:	98 27       	eor	r25, r24
     a02:	97 85       	ldd	r25, Z+15	; 0x0f
     a04:	90 53       	subi	r25, 0x30	; 48
     a06:	89 2b       	or	r24, r25
     a08:	11 96       	adiw	r26, 0x01	; 1
     a0a:	8c 93       	st	X, r24
     a0c:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     a0e:	83 85       	ldd	r24, Z+11	; 0x0b
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	c0 97       	sbiw	r24, 0x30	; 48
     a14:	82 95       	swap	r24
     a16:	92 95       	swap	r25
     a18:	90 7f       	andi	r25, 0xF0	; 240
     a1a:	98 27       	eor	r25, r24
     a1c:	80 7f       	andi	r24, 0xF0	; 240
     a1e:	98 27       	eor	r25, r24
     a20:	94 85       	ldd	r25, Z+12	; 0x0c
     a22:	90 53       	subi	r25, 0x30	; 48
     a24:	89 2b       	or	r24, r25
     a26:	12 96       	adiw	r26, 0x02	; 2
     a28:	8c 93       	st	X, r24
     a2a:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	13 96       	adiw	r26, 0x03	; 3
     a30:	8c 93       	st	X, r24
     a32:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     a34:	80 85       	ldd	r24, Z+8	; 0x08
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	c0 97       	sbiw	r24, 0x30	; 48
     a3a:	82 95       	swap	r24
     a3c:	92 95       	swap	r25
     a3e:	90 7f       	andi	r25, 0xF0	; 240
     a40:	98 27       	eor	r25, r24
     a42:	80 7f       	andi	r24, 0xF0	; 240
     a44:	98 27       	eor	r25, r24
     a46:	91 85       	ldd	r25, Z+9	; 0x09
     a48:	90 53       	subi	r25, 0x30	; 48
     a4a:	89 2b       	or	r24, r25
     a4c:	14 96       	adiw	r26, 0x04	; 4
     a4e:	8c 93       	st	X, r24
     a50:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     a52:	25 81       	ldd	r18, Z+5	; 0x05
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	20 53       	subi	r18, 0x30	; 48
     a58:	31 09       	sbc	r19, r1
     a5a:	22 95       	swap	r18
     a5c:	32 95       	swap	r19
     a5e:	30 7f       	andi	r19, 0xF0	; 240
     a60:	32 27       	eor	r19, r18
     a62:	20 7f       	andi	r18, 0xF0	; 240
     a64:	32 27       	eor	r19, r18
     a66:	86 81       	ldd	r24, Z+6	; 0x06
     a68:	80 53       	subi	r24, 0x30	; 48
     a6a:	28 2b       	or	r18, r24
     a6c:	15 96       	adiw	r26, 0x05	; 5
     a6e:	2c 93       	st	X, r18
     a70:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     a72:	22 81       	ldd	r18, Z+2	; 0x02
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	20 53       	subi	r18, 0x30	; 48
     a78:	31 09       	sbc	r19, r1
     a7a:	22 95       	swap	r18
     a7c:	32 95       	swap	r19
     a7e:	30 7f       	andi	r19, 0xF0	; 240
     a80:	32 27       	eor	r19, r18
     a82:	20 7f       	andi	r18, 0xF0	; 240
     a84:	32 27       	eor	r19, r18
     a86:	83 81       	ldd	r24, Z+3	; 0x03
     a88:	80 53       	subi	r24, 0x30	; 48
     a8a:	28 2b       	or	r18, r24
     a8c:	16 96       	adiw	r26, 0x06	; 6
     a8e:	2c 93       	st	X, r18
     a90:	08 95       	ret

00000a92 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	7b 01       	movw	r14, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
     aa4:	c8 2f       	mov	r28, r24
     aa6:	88 23       	and	r24, r24
     aa8:	21 f0       	breq	.+8      	; 0xab2 <read_DS3231+0x20>
		stop_TWI();
     aaa:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
		return(retval);
     aae:	8c 2f       	mov	r24, r28
     ab0:	28 c0       	rjmp	.+80     	; 0xb02 <read_DS3231+0x70>
    }  

	if ((retval = write_TWI(0x00))) {	// Register 00h
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
     ab8:	c8 2f       	mov	r28, r24
     aba:	88 23       	and	r24, r24
     abc:	21 f0       	breq	.+8      	; 0xac6 <read_DS3231+0x34>
		stop_TWI();
     abe:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
		return(retval);
     ac2:	8c 2f       	mov	r24, r28
     ac4:	1e c0       	rjmp	.+60     	; 0xb02 <read_DS3231+0x70>
	}
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
     ac6:	61 e0       	ldi	r22, 0x01	; 1
     ac8:	88 e6       	ldi	r24, 0x68	; 104
     aca:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
     ace:	c8 2f       	mov	r28, r24
     ad0:	88 23       	and	r24, r24
     ad2:	69 f0       	breq	.+26     	; 0xaee <read_DS3231+0x5c>
		stop_TWI();
     ad4:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
		return(retval);
     ad8:	8c 2f       	mov	r24, r28
     ada:	13 c0       	rjmp	.+38     	; 0xb02 <read_DS3231+0x70>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     adc:	87 01       	movw	r16, r14
     ade:	0c 0f       	add	r16, r28
     ae0:	11 1d       	adc	r17, r1
     ae2:	0e 94 8f 18 	call	0x311e	; 0x311e <read_TWI>
     ae6:	f8 01       	movw	r30, r16
     ae8:	80 83       	st	Z, r24
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 6; i++) {
     aea:	cf 5f       	subi	r28, 0xFF	; 255
     aec:	01 c0       	rjmp	.+2      	; 0xaf0 <read_DS3231+0x5e>
     aee:	c0 e0       	ldi	r28, 0x00	; 0
     af0:	c6 30       	cpi	r28, 0x06	; 6
     af2:	a0 f3       	brcs	.-24     	; 0xadc <read_DS3231+0x4a>
		ds3231time[i] = read_TWI();
	}
	ds3231time[6] = readlast_TWI();
     af4:	0e 94 9f 18 	call	0x313e	; 0x313e <readlast_TWI>
     af8:	f7 01       	movw	r30, r14
     afa:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     afc:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>

	return(0);
     b00:	80 e0       	ldi	r24, 0x00	; 0

}
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	08 95       	ret

00000b0e <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
     b1a:	27 97       	sbiw	r28, 0x07	; 7
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	8c 01       	movw	r16, r24

	uint8_t retval, ds3231time[7];

	if ((retval = read_DS3231(DS3231ADDR, ds3231time))) {
     b22:	be 01       	movw	r22, r28
     b24:	6f 5f       	subi	r22, 0xFF	; 255
     b26:	7f 4f       	sbci	r23, 0xFF	; 255
     b28:	88 e6       	ldi	r24, 0x68	; 104
     b2a:	0e 94 49 05 	call	0xa92	; 0xa92 <read_DS3231>
     b2e:	88 23       	and	r24, r24
     b30:	49 f0       	breq	.+18     	; 0xb44 <get_time+0x36>
// avoid a bootup announcement at boot-time by not sending this
//		printError(ERR_GETTIME, "DS3231 get_time");
		strcpy(isotime, "CurrentTime?");
     b32:	9d e0       	ldi	r25, 0x0D	; 13
     b34:	ee e8       	ldi	r30, 0x8E	; 142
     b36:	f7 e8       	ldi	r31, 0x87	; 135
     b38:	d8 01       	movw	r26, r16
     b3a:	01 90       	ld	r0, Z+
     b3c:	0d 92       	st	X+, r0
     b3e:	9a 95       	dec	r25
     b40:	e1 f7       	brne	.-8      	; 0xb3a <get_time+0x2c>
		return(retval);
     b42:	07 c0       	rjmp	.+14     	; 0xb52 <get_time+0x44>
	}

	convert_ds2iso(isotime, ds3231time);
     b44:	be 01       	movw	r22, r28
     b46:	6f 5f       	subi	r22, 0xFF	; 255
     b48:	7f 4f       	sbci	r23, 0xFF	; 255
     b4a:	c8 01       	movw	r24, r16
     b4c:	0e 94 c8 04 	call	0x990	; 0x990 <convert_ds2iso>
	return(0);
     b50:	80 e0       	ldi	r24, 0x00	; 0

}
     b52:	27 96       	adiw	r28, 0x07	; 7
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	08 95       	ret

00000b62 <write_DS3231>:

	Returns
		TWI errors
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     b62:	ef 92       	push	r14
     b64:	ff 92       	push	r15
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	8b 01       	movw	r16, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
     b76:	c8 2f       	mov	r28, r24
     b78:	88 23       	and	r24, r24
     b7a:	21 f0       	breq	.+8      	; 0xb84 <write_DS3231+0x22>
		stop_TWI();
     b7c:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
		return(retval);
     b80:	8c 2f       	mov	r24, r28
     b82:	22 c0       	rjmp	.+68     	; 0xbc8 <write_DS3231+0x66>
	}

	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
     b8a:	c8 2f       	mov	r28, r24
     b8c:	88 23       	and	r24, r24
     b8e:	b1 f0       	breq	.+44     	; 0xbbc <write_DS3231+0x5a>
		stop_TWI();
     b90:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
		return(retval);
     b94:	8c 2f       	mov	r24, r28
     b96:	18 c0       	rjmp	.+48     	; 0xbc8 <write_DS3231+0x66>
	}

	for (i = 0; i < 7; i++) {
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b98:	78 01       	movw	r14, r16
     b9a:	8f ef       	ldi	r24, 0xFF	; 255
     b9c:	e8 1a       	sub	r14, r24
     b9e:	f8 0a       	sbc	r15, r24
     ba0:	f8 01       	movw	r30, r16
     ba2:	80 81       	ld	r24, Z
     ba4:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
     ba8:	c8 2f       	mov	r28, r24
     baa:	88 23       	and	r24, r24
     bac:	21 f0       	breq	.+8      	; 0xbb6 <write_DS3231+0x54>
			stop_TWI();
     bae:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
			return(retval);
     bb2:	8c 2f       	mov	r24, r28
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <write_DS3231+0x66>
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     bb6:	df 5f       	subi	r29, 0xFF	; 255
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     bb8:	87 01       	movw	r16, r14
     bba:	01 c0       	rjmp	.+2      	; 0xbbe <write_DS3231+0x5c>
     bbc:	d0 e0       	ldi	r29, 0x00	; 0
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     bbe:	d7 30       	cpi	r29, 0x07	; 7
     bc0:	58 f3       	brcs	.-42     	; 0xb98 <write_DS3231+0x36>
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
			stop_TWI();
			return(retval);
		}
	}
	stop_TWI();
     bc2:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>

	return(0);
     bc6:	80 e0       	ldi	r24, 0x00	; 0

}
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	1f 91       	pop	r17
     bce:	0f 91       	pop	r16
     bd0:	ff 90       	pop	r15
     bd2:	ef 90       	pop	r14
     bd4:	08 95       	ret

00000bd6 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	27 97       	sbiw	r28, 0x07	; 7
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	de bf       	out	0x3e, r29	; 62

	uint8_t retval, ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     be4:	bc 01       	movw	r22, r24
     be6:	ce 01       	movw	r24, r28
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <convert_iso2ds>
	if ((retval = write_DS3231(DS3231ADDR, ds3231time))) {
     bee:	be 01       	movw	r22, r28
     bf0:	6f 5f       	subi	r22, 0xFF	; 255
     bf2:	7f 4f       	sbci	r23, 0xFF	; 255
     bf4:	88 e6       	ldi	r24, 0x68	; 104
     bf6:	0e 94 b1 05 	call	0xb62	; 0xb62 <write_DS3231>
		return(retval);
	}
	return(0);

}
     bfa:	27 96       	adiw	r28, 0x07	; 7
     bfc:	cd bf       	out	0x3d, r28	; 61
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     c06:	45 e1       	ldi	r20, 0x15	; 21
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	6b e0       	ldi	r22, 0x0B	; 11
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	0e 94 63 23 	call	0x46c6	; 0x46c6 <eeprom_read_block>
     c12:	08 95       	ret

00000c14 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     c14:	4b e0       	ldi	r20, 0x0B	; 11
     c16:	50 e0       	ldi	r21, 0x00	; 0
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	0e 94 63 23 	call	0x46c6	; 0x46c6 <eeprom_read_block>
     c20:	08 95       	ret

00000c22 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	65 97       	sbiw	r28, 0x15	; 21
     c2c:	cd bf       	out	0x3d, r28	; 61
     c2e:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     c30:	ce 01       	movw	r24, r28
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	0e 94 87 05 	call	0xb0e	; 0xb0e <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     c38:	45 e1       	ldi	r20, 0x15	; 21
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	6b e0       	ldi	r22, 0x0B	; 11
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	ce 01       	movw	r24, r28
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	0e 94 67 23 	call	0x46ce	; 0x46ce <eeprom_update_block>

}
     c48:	65 96       	adiw	r28, 0x15	; 21
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <update_VERSION>:

void update_VERSION(void)
{
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
     c5c:	2b 97       	sbiw	r28, 0x0b	; 11
     c5e:	cd bf       	out	0x3d, r28	; 61
     c60:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     c62:	8b e0       	ldi	r24, 0x0B	; 11
     c64:	eb e9       	ldi	r30, 0x9B	; 155
     c66:	f7 e8       	ldi	r31, 0x87	; 135
     c68:	de 01       	movw	r26, r28
     c6a:	11 96       	adiw	r26, 0x01	; 1
     c6c:	01 90       	ld	r0, Z+
     c6e:	0d 92       	st	X+, r0
     c70:	8a 95       	dec	r24
     c72:	e1 f7       	brne	.-8      	; 0xc6c <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     c74:	4b e0       	ldi	r20, 0x0B	; 11
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	ce 01       	movw	r24, r28
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	0e 94 67 23 	call	0x46ce	; 0x46ce <eeprom_update_block>

}
     c84:	2b 96       	adiw	r28, 0x0b	; 11
     c86:	cd bf       	out	0x3d, r28	; 61
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	08 95       	ret

00000c90 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     c90:	0e 94 11 06 	call	0xc22	; 0xc22 <update_BOOTTIME>
	update_VERSION();
     c94:	0e 94 2a 06 	call	0xc54	; 0xc54 <update_VERSION>
     c98:	08 95       	ret

00000c9a <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	cf 55       	subi	r28, 0x5F	; 95
     ca8:	d1 09       	sbc	r29, r1
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	de bf       	out	0x3e, r29	; 62

	char strbuf[81];
	const char errorFormat[] = "$S%dERR,%d,%s";
     cae:	2e e0       	ldi	r18, 0x0E	; 14
     cb0:	e6 ea       	ldi	r30, 0xA6	; 166
     cb2:	f7 e8       	ldi	r31, 0x87	; 135
     cb4:	de 01       	movw	r26, r28
     cb6:	ae 5a       	subi	r26, 0xAE	; 174
     cb8:	bf 4f       	sbci	r27, 0xFF	; 255
     cba:	01 90       	ld	r0, Z+
     cbc:	0d 92       	st	X+, r0
     cbe:	2a 95       	dec	r18
     cc0:	e1 f7       	brne	.-8      	; 0xcba <printError+0x20>

	sprintf(strbuf, errorFormat, get_SPECID, errorNumber, errorString);
     cc2:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     cc6:	22 ff       	sbrs	r18, 2
     cc8:	03 c0       	rjmp	.+6      	; 0xcd0 <printError+0x36>
     cca:	22 e0       	ldi	r18, 0x02	; 2
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <printError+0x3a>
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	7f 93       	push	r23
     cd6:	6f 93       	push	r22
     cd8:	9f 93       	push	r25
     cda:	8f 93       	push	r24
     cdc:	3f 93       	push	r19
     cde:	2f 93       	push	r18
     ce0:	ce 01       	movw	r24, r28
     ce2:	8e 5a       	subi	r24, 0xAE	; 174
     ce4:	9f 4f       	sbci	r25, 0xFF	; 255
     ce6:	9f 93       	push	r25
     ce8:	8f 93       	push	r24
     cea:	8e 01       	movw	r16, r28
     cec:	0f 5f       	subi	r16, 0xFF	; 255
     cee:	1f 4f       	sbci	r17, 0xFF	; 255
     cf0:	1f 93       	push	r17
     cf2:	0f 93       	push	r16
     cf4:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
	checksum_NMEA(strbuf);
     cf8:	c8 01       	movw	r24, r16
     cfa:	0e 94 07 0a 	call	0x140e	; 0x140e <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     cfe:	f8 01       	movw	r30, r16
     d00:	01 90       	ld	r0, Z+
     d02:	00 20       	and	r0, r0
     d04:	e9 f7       	brne	.-6      	; 0xd00 <printError+0x66>
     d06:	31 97       	sbiw	r30, 0x01	; 1
     d08:	af 01       	movw	r20, r30
     d0a:	40 1b       	sub	r20, r16
     d0c:	51 0b       	sbc	r21, r17
     d0e:	b8 01       	movw	r22, r16
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>

}
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	c1 5a       	subi	r28, 0xA1	; 161
     d1c:	df 4f       	sbci	r29, 0xFF	; 255
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	08 95       	ret

00000d2c <read_FRAM>:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)

------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	c8 2f       	mov	r28, r24
     d3a:	e6 2e       	mov	r14, r22
     d3c:	f7 2e       	mov	r15, r23
     d3e:	8a 01       	movw	r16, r20
     d40:	d2 2f       	mov	r29, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
     d48:	81 11       	cpse	r24, r1
     d4a:	2b c0       	rjmp	.+86     	; 0xda2 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {			// Send memory address
     d4c:	8f 2d       	mov	r24, r15
     d4e:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
     d52:	81 11       	cpse	r24, r1
     d54:	26 c0       	rjmp	.+76     	; 0xda2 <read_FRAM+0x76>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {
     d56:	8e 2d       	mov	r24, r14
     d58:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
     d5c:	81 11       	cpse	r24, r1
     d5e:	21 c0       	rjmp	.+66     	; 0xda2 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	8c 2f       	mov	r24, r28
     d64:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
     d68:	81 11       	cpse	r24, r1
     d6a:	1b c0       	rjmp	.+54     	; 0xda2 <read_FRAM+0x76>
     d6c:	c0 e0       	ldi	r28, 0x00	; 0
     d6e:	08 c0       	rjmp	.+16     	; 0xd80 <read_FRAM+0x54>
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     d70:	78 01       	movw	r14, r16
     d72:	ec 0e       	add	r14, r28
     d74:	f1 1c       	adc	r15, r1
     d76:	0e 94 8f 18 	call	0x311e	; 0x311e <read_TWI>
     d7a:	f7 01       	movw	r30, r14
     d7c:	80 83       	st	Z, r24

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
     d7e:	cf 5f       	subi	r28, 0xFF	; 255
     d80:	2c 2f       	mov	r18, r28
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	8d 2f       	mov	r24, r29
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	28 17       	cp	r18, r24
     d8c:	39 07       	cpc	r19, r25
     d8e:	84 f3       	brlt	.-32     	; 0xd70 <read_FRAM+0x44>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     d90:	ec 01       	movw	r28, r24
     d92:	c0 0f       	add	r28, r16
     d94:	d1 1f       	adc	r29, r17
     d96:	0e 94 9f 18 	call	0x313e	; 0x313e <readlast_TWI>
     d9a:	88 83       	st	Y, r24

	stop_TWI();
     d9c:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>

	return(0);
     da0:	80 e0       	ldi	r24, 0x00	; 0

}
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	1f 91       	pop	r17
     da8:	0f 91       	pop	r16
     daa:	ff 90       	pop	r15
     dac:	ef 90       	pop	r14
     dae:	08 95       	ret

00000db0 <write_FRAM>:
	Returns:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     db0:	ef 92       	push	r14
     db2:	ff 92       	push	r15
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	f6 2e       	mov	r15, r22
     dbe:	17 2f       	mov	r17, r23
     dc0:	ea 01       	movw	r28, r20
     dc2:	02 2f       	mov	r16, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if ((retval = start_TWI(addr, TWIWRITE))) {	// TWI START
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
     dca:	81 11       	cpse	r24, r1
     dcc:	1c c0       	rjmp	.+56     	; 0xe06 <write_FRAM+0x56>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {		// FRAM address to write
     dce:	81 2f       	mov	r24, r17
     dd0:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
     dd4:	81 11       	cpse	r24, r1
     dd6:	17 c0       	rjmp	.+46     	; 0xe06 <write_FRAM+0x56>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
     dd8:	8f 2d       	mov	r24, r15
     dda:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
     dde:	81 11       	cpse	r24, r1
     de0:	12 c0       	rjmp	.+36     	; 0xe06 <write_FRAM+0x56>
     de2:	10 e0       	ldi	r17, 0x00	; 0
     de4:	0b c0       	rjmp	.+22     	; 0xdfc <write_FRAM+0x4c>
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     de6:	7e 01       	movw	r14, r28
     de8:	8f ef       	ldi	r24, 0xFF	; 255
     dea:	e8 1a       	sub	r14, r24
     dec:	f8 0a       	sbc	r15, r24
     dee:	88 81       	ld	r24, Y
     df0:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
     df4:	81 11       	cpse	r24, r1
     df6:	07 c0       	rjmp	.+14     	; 0xe06 <write_FRAM+0x56>
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     df8:	1f 5f       	subi	r17, 0xFF	; 255
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     dfa:	e7 01       	movw	r28, r14
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     dfc:	10 17       	cp	r17, r16
     dfe:	98 f3       	brcs	.-26     	; 0xde6 <write_FRAM+0x36>
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
			return(retval);
		}
	}

	stop_TWI();
     e00:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>

	return(0);
     e04:	80 e0       	ldi	r24, 0x00	; 0

}
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	ff 90       	pop	r15
     e10:	ef 90       	pop	r14
     e12:	08 95       	ret

00000e14 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     e14:	8f 92       	push	r8
     e16:	9f 92       	push	r9
     e18:	af 92       	push	r10
     e1a:	bf 92       	push	r11
     e1c:	cf 92       	push	r12
     e1e:	df 92       	push	r13
     e20:	ef 92       	push	r14
     e22:	ff 92       	push	r15

	uint8_t adcpin;
	float humidity, temperature;

	switch (sensor) {
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	59 f0       	breq	.+22     	; 0xe3e <get_humidity+0x2a>
     e28:	18 f0       	brcs	.+6      	; 0xe30 <get_humidity+0x1c>
     e2a:	82 30       	cpi	r24, 0x02	; 2
     e2c:	79 f0       	breq	.+30     	; 0xe4c <get_humidity+0x38>
     e2e:	15 c0       	rjmp	.+42     	; 0xe5a <get_humidity+0x46>
		case 0:
			temperature = get_temperature(0);
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	0e 94 02 18 	call	0x3004	; 0x3004 <get_temperature>
     e36:	4b 01       	movw	r8, r22
     e38:	5c 01       	movw	r10, r24
//			adcpin = AIN1;		// test unit
			adcpin = AIN0;		// production
     e3a:	40 e4       	ldi	r20, 0x40	; 64
			break;
     e3c:	17 c0       	rjmp	.+46     	; 0xe6c <get_humidity+0x58>
		case 1:
			temperature = get_temperature(1);
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	0e 94 02 18 	call	0x3004	; 0x3004 <get_temperature>
     e44:	4b 01       	movw	r8, r22
     e46:	5c 01       	movw	r10, r24
			adcpin = AIN1;
     e48:	40 e5       	ldi	r20, 0x50	; 80
			break;
     e4a:	10 c0       	rjmp	.+32     	; 0xe6c <get_humidity+0x58>
		case 2:
			temperature = get_temperature(2);
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	0e 94 02 18 	call	0x3004	; 0x3004 <get_temperature>
     e52:	4b 01       	movw	r8, r22
     e54:	5c 01       	movw	r10, r24
			adcpin = AIN2;
     e56:	40 e6       	ldi	r20, 0x60	; 96
			break;
     e58:	09 c0       	rjmp	.+18     	; 0xe6c <get_humidity+0x58>
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     e5a:	0f 2e       	mov	r0, r31
     e5c:	81 2c       	mov	r8, r1
     e5e:	91 2c       	mov	r9, r1
     e60:	f0 ea       	ldi	r31, 0xA0	; 160
     e62:	af 2e       	mov	r10, r31
     e64:	f1 e4       	ldi	r31, 0x41	; 65
     e66:	bf 2e       	mov	r11, r31
     e68:	f0 2d       	mov	r31, r0
			temperature = get_temperature(2);
			adcpin = AIN2;
			break;
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     e6a:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	humidity = ((read_ADS1115(ADC_RH, PGA6144, adcpin, DR128)/5.0) - 0.16) / 0.0062;
     e6c:	20 e8       	ldi	r18, 0x80	; 128
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	88 e4       	ldi	r24, 0x48	; 72
     e72:	0e 94 9f 01 	call	0x33e	; 0x33e <read_ADS1115>
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 ea       	ldi	r20, 0xA0	; 160
     e7c:	50 e4       	ldi	r21, 0x40	; 64
     e7e:	0e 94 9e 1b 	call	0x373c	; 0x373c <__divsf3>
     e82:	2a e0       	ldi	r18, 0x0A	; 10
     e84:	37 ed       	ldi	r19, 0xD7	; 215
     e86:	43 e2       	ldi	r20, 0x23	; 35
     e88:	5e e3       	ldi	r21, 0x3E	; 62
     e8a:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>
     e8e:	2f e5       	ldi	r18, 0x5F	; 95
     e90:	39 e2       	ldi	r19, 0x29	; 41
     e92:	4b ec       	ldi	r20, 0xCB	; 203
     e94:	5b e3       	ldi	r21, 0x3B	; 59
     e96:	0e 94 9e 1b 	call	0x373c	; 0x373c <__divsf3>
     e9a:	6b 01       	movw	r12, r22
     e9c:	7c 01       	movw	r14, r24
	humidity = (humidity / (1.0546 - 0.00216 * temperature));
     e9e:	29 ec       	ldi	r18, 0xC9	; 201
     ea0:	3e e8       	ldi	r19, 0x8E	; 142
     ea2:	4d e0       	ldi	r20, 0x0D	; 13
     ea4:	5b e3       	ldi	r21, 0x3B	; 59
     ea6:	c5 01       	movw	r24, r10
     ea8:	b4 01       	movw	r22, r8
     eaa:	0e 94 c7 1c 	call	0x398e	; 0x398e <__mulsf3>
     eae:	9b 01       	movw	r18, r22
     eb0:	ac 01       	movw	r20, r24
     eb2:	62 e2       	ldi	r22, 0x22	; 34
     eb4:	7d ef       	ldi	r23, 0xFD	; 253
     eb6:	86 e8       	ldi	r24, 0x86	; 134
     eb8:	9f e3       	ldi	r25, 0x3F	; 63
     eba:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>
     ebe:	9b 01       	movw	r18, r22
     ec0:	ac 01       	movw	r20, r24
     ec2:	c7 01       	movw	r24, r14
     ec4:	b6 01       	movw	r22, r12
     ec6:	0e 94 9e 1b 	call	0x373c	; 0x373c <__divsf3>
	return(humidity);

}
     eca:	ff 90       	pop	r15
     ecc:	ef 90       	pop	r14
     ece:	df 90       	pop	r13
     ed0:	cf 90       	pop	r12
     ed2:	bf 90       	pop	r11
     ed4:	af 90       	pop	r10
     ed6:	9f 90       	pop	r9
     ed8:	8f 90       	pop	r8
     eda:	08 95       	ret

00000edc <initialize0>:
*/

void initialize0(void)
{

	init_PORTS();
     edc:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <init_PORTS>
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton setup
     ee0:	8b e0       	ldi	r24, 0x0B	; 11
     ee2:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f44b6>
	init_XPORT();
     ee6:	0e 94 20 1b 	call	0x3640	; 0x3640 <init_XPORT>
	init_SPECID();
     eea:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <init_SPECID>
	init_LED();
     eee:	0e 94 2f 08 	call	0x105e	; 0x105e <init_LED>
	init_BEEPER();
     ef2:	0e 94 9e 02 	call	0x53c	; 0x53c <init_BEEPER>
	init_TWI();
     ef6:	0e 94 84 18 	call	0x3108	; 0x3108 <init_TWI>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
     efa:	80 e2       	ldi	r24, 0x20	; 32
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 56 17 	call	0x2eac	; 0x2eac <init_RTC>
	init_USART();
     f02:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <init_USART>
     f06:	08 95       	ret

00000f08 <initialize1>:

}

void initialize1(void)
{
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	2b 97       	sbiw	r28, 0x0b	; 11
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	init_MOTORS();
     f16:	0e 94 24 17 	call	0x2e48	; 0x2e48 <init_MOTORS>
	init_MMA8451();
     f1a:	0e 94 d5 09 	call	0x13aa	; 0x13aa <init_MMA8451>
	init_PNEU();
     f1e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <init_PNEU>
	init_OLED(0);
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <init_OLED>
	init_OLED(1);
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <init_OLED>
	init_EEPROM();	// Needs TWI
     f2e:	0e 94 48 06 	call	0xc90	; 0xc90 <init_EEPROM>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
     f32:	80 ee       	ldi	r24, 0xE0	; 224
     f34:	91 e0       	ldi	r25, 0x01	; 1
     f36:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <timeoutOLED>
     f3a:	90 93 10 2a 	sts	0x2A10, r25	; 0x802a10 <timeoutOLED+0x1>
	get_VERSION(versionstr);
     f3e:	ce 01       	movw	r24, r28
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	0e 94 0a 06 	call	0xc14	; 0xc14 <get_VERSION>
	writestr_OLED(1,"specMech Version", 1);
     f46:	41 e0       	ldi	r20, 0x01	; 1
     f48:	64 eb       	ldi	r22, 0xB4	; 180
     f4a:	77 e8       	ldi	r23, 0x87	; 135
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	0e 94 22 0b 	call	0x1644	; 0x1644 <writestr_OLED>
	writestr_OLED(1, versionstr, 2);
     f52:	42 e0       	ldi	r20, 0x02	; 2
     f54:	be 01       	movw	r22, r28
     f56:	6f 5f       	subi	r22, 0xFF	; 255
     f58:	7f 4f       	sbci	r23, 0xFF	; 255
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	0e 94 22 0b 	call	0x1644	; 0x1644 <writestr_OLED>

}
     f60:	2b 96       	adiw	r28, 0x0b	; 11
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	08 95       	ret

00000f6c <__vector_29>:

/*----------------------------------------------------------------------
Curiosity Nano on-board pushbutton reboots the system
----------------------------------------------------------------------*/
ISR(PORTF_PORT_vect)
{
     f6c:	1f 92       	push	r1
     f6e:	0f 92       	push	r0
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	0f 92       	push	r0
     f74:	11 24       	eor	r1, r1
     f76:	2f 93       	push	r18
     f78:	3f 93       	push	r19
     f7a:	4f 93       	push	r20
     f7c:	5f 93       	push	r21
     f7e:	6f 93       	push	r22
     f80:	7f 93       	push	r23
     f82:	8f 93       	push	r24
     f84:	9f 93       	push	r25
     f86:	af 93       	push	r26
     f88:	bf 93       	push	r27
     f8a:	ef 93       	push	r30
     f8c:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
     f8e:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
     f92:	86 ff       	sbrs	r24, 6
     f94:	05 c0       	rjmp	.+10     	; 0xfa0 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
     f96:	80 e4       	ldi	r24, 0x40	; 64
     f98:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
     f9c:	0e 94 16 1b 	call	0x362c	; 0x362c <reboot>
	}

}
     fa0:	ff 91       	pop	r31
     fa2:	ef 91       	pop	r30
     fa4:	bf 91       	pop	r27
     fa6:	af 91       	pop	r26
     fa8:	9f 91       	pop	r25
     faa:	8f 91       	pop	r24
     fac:	7f 91       	pop	r23
     fae:	6f 91       	pop	r22
     fb0:	5f 91       	pop	r21
     fb2:	4f 91       	pop	r20
     fb4:	3f 91       	pop	r19
     fb6:	2f 91       	pop	r18
     fb8:	0f 90       	pop	r0
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	0f 90       	pop	r0
     fbe:	1f 90       	pop	r1
     fc0:	18 95       	reti

00000fc2 <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
     fc2:	cf 92       	push	r12
     fc4:	df 92       	push	r13
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	21 f0       	breq	.+8      	; 0xfd6 <read_ionpump+0x14>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
     fce:	82 30       	cpi	r24, 0x02	; 2
     fd0:	79 f5       	brne	.+94     	; 0x1030 <read_ionpump+0x6e>
		pins = AIN23;
     fd2:	40 e3       	ldi	r20, 0x30	; 48
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <read_ionpump+0x16>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
     fd6:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(-666.0);
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);
     fd8:	20 e8       	ldi	r18, 0x80	; 128
     fda:	62 e0       	ldi	r22, 0x02	; 2
     fdc:	89 e4       	ldi	r24, 0x49	; 73
     fde:	0e 94 9f 01 	call	0x33e	; 0x33e <read_ADS1115>
     fe2:	6b 01       	movw	r12, r22
     fe4:	7c 01       	movw	r14, r24

	if (voltage < 0.4) {						// Useful range for the Modion pump
     fe6:	2d ec       	ldi	r18, 0xCD	; 205
     fe8:	3c ec       	ldi	r19, 0xCC	; 204
     fea:	4c ec       	ldi	r20, 0xCC	; 204
     fec:	5e e3       	ldi	r21, 0x3E	; 62
     fee:	0e 94 99 1b 	call	0x3732	; 0x3732 <__cmpsf2>
     ff2:	88 23       	and	r24, r24
     ff4:	14 f1       	brlt	.+68     	; 0x103a <read_ionpump+0x78>
		return(-666.0);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	50 e4       	ldi	r21, 0x40	; 64
     ffe:	c7 01       	movw	r24, r14
    1000:	b6 01       	movw	r22, r12
    1002:	0e 94 c2 1c 	call	0x3984	; 0x3984 <__gesf2>
    1006:	18 16       	cp	r1, r24
    1008:	ec f0       	brlt	.+58     	; 0x1044 <read_ionpump+0x82>
		return(-666.0);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    100a:	29 e7       	ldi	r18, 0x79	; 121
    100c:	39 ee       	ldi	r19, 0xE9	; 233
    100e:	42 e0       	ldi	r20, 0x02	; 2
    1010:	50 e4       	ldi	r21, 0x40	; 64
    1012:	c7 01       	movw	r24, r14
    1014:	b6 01       	movw	r22, r12
    1016:	0e 94 c7 1c 	call	0x398e	; 0x398e <__mulsf3>
    101a:	2e e6       	ldi	r18, 0x6E	; 110
    101c:	33 ea       	ldi	r19, 0xA3	; 163
    101e:	4b ed       	ldi	r20, 0xDB	; 219
    1020:	50 e4       	ldi	r21, 0x40	; 64
    1022:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>

	return(vacuum);
    1026:	56 2f       	mov	r21, r22
    1028:	47 2f       	mov	r20, r23
    102a:	38 2f       	mov	r19, r24
    102c:	29 2f       	mov	r18, r25
    102e:	0e c0       	rjmp	.+28     	; 0x104c <read_ionpump+0x8a>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(-666.0);
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	40 e8       	ldi	r20, 0x80	; 128
    1034:	36 e2       	ldi	r19, 0x26	; 38
    1036:	24 ec       	ldi	r18, 0xC4	; 196
    1038:	09 c0       	rjmp	.+18     	; 0x104c <read_ionpump+0x8a>
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);

	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(-666.0);							// after ISO224 op-amp is 0.5 to 2.0 V
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	40 e8       	ldi	r20, 0x80	; 128
    103e:	36 e2       	ldi	r19, 0x26	; 38
    1040:	24 ec       	ldi	r18, 0xC4	; 196
    1042:	04 c0       	rjmp	.+8      	; 0x104c <read_ionpump+0x8a>
	} else if (voltage > 2.0) {
		return(-666.0);
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	40 e8       	ldi	r20, 0x80	; 128
    1048:	36 e2       	ldi	r19, 0x26	; 38
    104a:	24 ec       	ldi	r18, 0xC4	; 196
	vacuum = ISO224SLOPE * voltage + ISO224INTER;

	return(vacuum);
//return(voltage);

}
    104c:	65 2f       	mov	r22, r21
    104e:	74 2f       	mov	r23, r20
    1050:	83 2f       	mov	r24, r19
    1052:	92 2f       	mov	r25, r18
    1054:	ff 90       	pop	r15
    1056:	ef 90       	pop	r14
    1058:	df 90       	pop	r13
    105a:	cf 90       	pop	r12
    105c:	08 95       	ret

0000105e <init_LED>:
#include "globals.h"

void init_LED(void)
{
	PORTF.OUTSET = PIN5_bm;
    105e:	e0 ea       	ldi	r30, 0xA0	; 160
    1060:	f4 e0       	ldi	r31, 0x04	; 4
    1062:	80 e2       	ldi	r24, 0x20	; 32
    1064:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN5_bm;
    1066:	81 83       	std	Z+1, r24	; 0x01
    1068:	08 95       	ret

0000106a <main>:
extern void initialize(void);

int main(void)
{

	initialize0();
    106a:	0e 94 6e 07 	call	0xedc	; 0xedc <initialize0>
	sei();
    106e:	78 94       	sei
	initialize1();
    1070:	0e 94 84 07 	call	0xf08	; 0xf08 <initialize1>

	for (;;) {
		if (recv0_buf.done) {
    1074:	80 91 1d 2c 	lds	r24, 0x2C1D	; 0x802c1d <recv0_buf+0x104>
    1078:	88 23       	and	r24, r24
    107a:	e1 f3       	breq	.-8      	; 0x1074 <main+0xa>
			recv0_buf.done = NO;
    107c:	10 92 1d 2c 	sts	0x2C1D, r1	; 0x802c1d <recv0_buf+0x104>
			commands();
    1080:	0e 94 4b 04 	call	0x896	; 0x896 <commands>
    1084:	f7 cf       	rjmp	.-18     	; 0x1074 <main+0xa>

00001086 <read_MCP23008>:
	Returns:
		val - data in that MCP23008 register
		Function return value is 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	c8 2f       	mov	r28, r24
    108c:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
    1094:	83 36       	cpi	r24, 0x63	; 99
    1096:	51 f4       	brne	.+20     	; 0x10ac <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 error");
    1098:	65 ec       	ldi	r22, 0xC5	; 197
    109a:	77 e8       	ldi	r23, 0x87	; 135
    109c:	81 e9       	ldi	r24, 0x91	; 145
    109e:	91 e0       	ldi	r25, 0x01	; 1
    10a0:	0e 94 4d 06 	call	0xc9a	; 0xc9a <printError>
		stop_TWI();
    10a4:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
		return(0x7F);
    10a8:	8f e7       	ldi	r24, 0x7F	; 127
    10aa:	0d c0       	rjmp	.+26     	; 0x10c6 <read_MCP23008+0x40>
	}
	write_TWI(reg);
    10ac:	8d 2f       	mov	r24, r29
    10ae:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
	start_TWI(addr, TWIREAD);
    10b2:	61 e0       	ldi	r22, 0x01	; 1
    10b4:	8c 2f       	mov	r24, r28
    10b6:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
	value = readlast_TWI();
    10ba:	0e 94 9f 18 	call	0x313e	; 0x313e <readlast_TWI>
    10be:	c8 2f       	mov	r28, r24
	stop_TWI();
    10c0:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
	return(value);
    10c4:	8c 2f       	mov	r24, r28

}
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	08 95       	ret

000010cc <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    10cc:	1f 93       	push	r17
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	d6 2f       	mov	r29, r22
    10d4:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
    10dc:	c8 2f       	mov	r28, r24
    10de:	88 23       	and	r24, r24
    10e0:	21 f0       	breq	.+8      	; 0x10ea <write_MCP23008+0x1e>
		stop_TWI();
    10e2:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
		return(retval);
    10e6:	8c 2f       	mov	r24, r28
    10e8:	17 c0       	rjmp	.+46     	; 0x1118 <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    10ea:	8d 2f       	mov	r24, r29
    10ec:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
    10f0:	c8 2f       	mov	r28, r24
    10f2:	88 23       	and	r24, r24
    10f4:	21 f0       	breq	.+8      	; 0x10fe <write_MCP23008+0x32>
		stop_TWI();
    10f6:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
		return(retval);
    10fa:	8c 2f       	mov	r24, r28
    10fc:	0d c0       	rjmp	.+26     	; 0x1118 <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(val))) {
    10fe:	81 2f       	mov	r24, r17
    1100:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
    1104:	c8 2f       	mov	r28, r24
    1106:	88 23       	and	r24, r24
    1108:	21 f0       	breq	.+8      	; 0x1112 <write_MCP23008+0x46>
		stop_TWI();
    110a:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
		return(retval);
    110e:	8c 2f       	mov	r24, r28
    1110:	03 c0       	rjmp	.+6      	; 0x1118 <write_MCP23008+0x4c>
	}
	stop_TWI();
    1112:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
	return(0);
    1116:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	08 95       	ret

00001120 <read_MCP9808>:
#include "globals.h"
#include "mcp9808.h"
#include "twi.h"

float read_MCP9808(void)
{
    1120:	cf 92       	push	r12
    1122:	df 92       	push	r13
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29

	uint8_t highbyte, lowbyte, sign;
	float temperature;

	start_TWI(MCP9808ADDR, TWIWRITE);
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	88 e1       	ldi	r24, 0x18	; 24
    1132:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
	write_TWI(TEMPREGISTER);
    1136:	85 e0       	ldi	r24, 0x05	; 5
    1138:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	88 e1       	ldi	r24, 0x18	; 24
    1140:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
	highbyte = read_TWI();
    1144:	0e 94 8f 18 	call	0x311e	; 0x311e <read_TWI>
    1148:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    114a:	0e 94 9f 18 	call	0x313e	; 0x313e <readlast_TWI>
    114e:	d8 2f       	mov	r29, r24
	stop_TWI();
    1150:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1154:	1c 2f       	mov	r17, r28
    1156:	10 71       	andi	r17, 0x10	; 16
	highbyte &= 0x0F;					// Clear threshold & sign bits
    1158:	6c 2f       	mov	r22, r28
    115a:	6f 70       	andi	r22, 0x0F	; 15
	temperature = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 10 1c 	call	0x3820	; 0x3820 <__floatunsisf>
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	40 e8       	ldi	r20, 0x80	; 128
    116c:	51 e4       	ldi	r21, 0x41	; 65
    116e:	0e 94 c7 1c 	call	0x398e	; 0x398e <__mulsf3>
    1172:	6b 01       	movw	r12, r22
    1174:	7c 01       	movw	r14, r24
    1176:	6d 2f       	mov	r22, r29
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 10 1c 	call	0x3820	; 0x3820 <__floatunsisf>
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e8       	ldi	r20, 0x80	; 128
    1188:	5d e3       	ldi	r21, 0x3D	; 61
    118a:	0e 94 c7 1c 	call	0x398e	; 0x398e <__mulsf3>
    118e:	9b 01       	movw	r18, r22
    1190:	ac 01       	movw	r20, r24
    1192:	c7 01       	movw	r24, r14
    1194:	b6 01       	movw	r22, r12
    1196:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
	if (sign) {
    119a:	11 23       	and	r17, r17
    119c:	41 f0       	breq	.+16     	; 0x11ae <read_MCP9808+0x8e>
		temperature = 256.0 - temperature;
    119e:	9b 01       	movw	r18, r22
    11a0:	ac 01       	movw	r20, r24
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	80 e8       	ldi	r24, 0x80	; 128
    11a8:	93 e4       	ldi	r25, 0x43	; 67
    11aa:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__subsf3>
	}
	return(temperature);
}
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	1f 91       	pop	r17
    11b4:	ff 90       	pop	r15
    11b6:	ef 90       	pop	r14
    11b8:	df 90       	pop	r13
    11ba:	cf 90       	pop	r12
    11bc:	08 95       	ret

000011be <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    11be:	ef 92       	push	r14
    11c0:	ff 92       	push	r15
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	18 2f       	mov	r17, r24
    11cc:	f6 2e       	mov	r15, r22
    11ce:	ea 01       	movw	r28, r20
    11d0:	02 2f       	mov	r16, r18

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
    11d8:	81 11       	cpse	r24, r1
    11da:	1e c0       	rjmp	.+60     	; 0x1218 <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = write_TWI(reg))) {
    11dc:	8f 2d       	mov	r24, r15
    11de:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
    11e2:	81 11       	cpse	r24, r1
    11e4:	19 c0       	rjmp	.+50     	; 0x1218 <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
    11e6:	61 e0       	ldi	r22, 0x01	; 1
    11e8:	81 2f       	mov	r24, r17
    11ea:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
    11ee:	81 11       	cpse	r24, r1
    11f0:	13 c0       	rjmp	.+38     	; 0x1218 <read_MMA8451+0x5a>
    11f2:	11 e0       	ldi	r17, 0x01	; 1
    11f4:	09 c0       	rjmp	.+18     	; 0x1208 <read_MMA8451+0x4a>
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    11f6:	7e 01       	movw	r14, r28
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
    11fa:	e8 1a       	sub	r14, r24
    11fc:	f8 0a       	sbc	r15, r24
    11fe:	0e 94 8f 18 	call	0x311e	; 0x311e <read_TWI>
    1202:	88 83       	st	Y, r24
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    1204:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    1206:	e7 01       	movw	r28, r14
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    1208:	10 17       	cp	r17, r16
    120a:	a8 f3       	brcs	.-22     	; 0x11f6 <read_MMA8451+0x38>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    120c:	0e 94 9f 18 	call	0x313e	; 0x313e <readlast_TWI>
    1210:	88 83       	st	Y, r24
	stop_TWI();
    1212:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
	return(0);
    1216:	80 e0       	ldi	r24, 0x00	; 0

}
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	08 95       	ret

00001226 <get_orientation>:
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
//uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
uint8_t get_orientation(float *x, float *y, float *z)
{
    1226:	cf 92       	push	r12
    1228:	df 92       	push	r13
    122a:	ef 92       	push	r14
    122c:	ff 92       	push	r15
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	26 97       	sbiw	r28, 0x06	; 6
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	6c 01       	movw	r12, r24
    1242:	7b 01       	movw	r14, r22
    1244:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -666.0;
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e8       	ldi	r25, 0x80	; 128
    124a:	a6 e2       	ldi	r26, 0x26	; 38
    124c:	b4 ec       	ldi	r27, 0xC4	; 196
    124e:	fa 01       	movw	r30, r20
    1250:	80 83       	st	Z, r24
    1252:	91 83       	std	Z+1, r25	; 0x01
    1254:	a2 83       	std	Z+2, r26	; 0x02
    1256:	b3 83       	std	Z+3, r27	; 0x03
    1258:	fb 01       	movw	r30, r22
    125a:	80 83       	st	Z, r24
    125c:	91 83       	std	Z+1, r25	; 0x01
    125e:	a2 83       	std	Z+2, r26	; 0x02
    1260:	b3 83       	std	Z+3, r27	; 0x03
    1262:	f6 01       	movw	r30, r12
    1264:	80 83       	st	Z, r24
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	a2 83       	std	Z+2, r26	; 0x02
    126a:	b3 83       	std	Z+3, r27	; 0x03

	read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6);
    126c:	26 e0       	ldi	r18, 0x06	; 6
    126e:	ae 01       	movw	r20, r28
    1270:	4f 5f       	subi	r20, 0xFF	; 255
    1272:	5f 4f       	sbci	r21, 0xFF	; 255
    1274:	61 e0       	ldi	r22, 0x01	; 1
    1276:	8d e1       	ldi	r24, 0x1D	; 29
    1278:	0e 94 df 08 	call	0x11be	; 0x11be <read_MMA8451>

	ix = datain[0];
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    1280:	98 2f       	mov	r25, r24
    1282:	88 27       	eor	r24, r24
	ix |= datain[1];
    1284:	2a 81       	ldd	r18, Y+2	; 0x02
    1286:	82 2b       	or	r24, r18
	ix /= 4;
    1288:	bc 01       	movw	r22, r24
    128a:	77 23       	and	r23, r23
    128c:	14 f4       	brge	.+4      	; 0x1292 <get_orientation+0x6c>
    128e:	6d 5f       	subi	r22, 0xFD	; 253
    1290:	7f 4f       	sbci	r23, 0xFF	; 255
    1292:	75 95       	asr	r23
    1294:	67 95       	ror	r22
    1296:	75 95       	asr	r23
    1298:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    129a:	07 2e       	mov	r0, r23
    129c:	00 0c       	add	r0, r0
    129e:	88 0b       	sbc	r24, r24
    12a0:	99 0b       	sbc	r25, r25
    12a2:	0e 94 12 1c 	call	0x3824	; 0x3824 <__floatsisf>
    12a6:	26 e6       	ldi	r18, 0x66	; 102
    12a8:	36 e2       	ldi	r19, 0x26	; 38
    12aa:	45 e7       	ldi	r20, 0x75	; 117
    12ac:	5e e3       	ldi	r21, 0x3E	; 62
    12ae:	0e 94 c7 1c 	call	0x398e	; 0x398e <__mulsf3>
    12b2:	f6 01       	movw	r30, r12
    12b4:	60 83       	st	Z, r22
    12b6:	71 83       	std	Z+1, r23	; 0x01
    12b8:	82 83       	std	Z+2, r24	; 0x02
    12ba:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    12c0:	98 2f       	mov	r25, r24
    12c2:	88 27       	eor	r24, r24
	iy |= datain[3];
    12c4:	2c 81       	ldd	r18, Y+4	; 0x04
    12c6:	82 2b       	or	r24, r18
	iy /= 4;
    12c8:	bc 01       	movw	r22, r24
    12ca:	77 23       	and	r23, r23
    12cc:	14 f4       	brge	.+4      	; 0x12d2 <get_orientation+0xac>
    12ce:	6d 5f       	subi	r22, 0xFD	; 253
    12d0:	7f 4f       	sbci	r23, 0xFF	; 255
    12d2:	75 95       	asr	r23
    12d4:	67 95       	ror	r22
    12d6:	75 95       	asr	r23
    12d8:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    12da:	07 2e       	mov	r0, r23
    12dc:	00 0c       	add	r0, r0
    12de:	88 0b       	sbc	r24, r24
    12e0:	99 0b       	sbc	r25, r25
    12e2:	0e 94 12 1c 	call	0x3824	; 0x3824 <__floatsisf>
    12e6:	26 e6       	ldi	r18, 0x66	; 102
    12e8:	36 e2       	ldi	r19, 0x26	; 38
    12ea:	45 e7       	ldi	r20, 0x75	; 117
    12ec:	5e e3       	ldi	r21, 0x3E	; 62
    12ee:	0e 94 c7 1c 	call	0x398e	; 0x398e <__mulsf3>
    12f2:	f7 01       	movw	r30, r14
    12f4:	60 83       	st	Z, r22
    12f6:	71 83       	std	Z+1, r23	; 0x01
    12f8:	82 83       	std	Z+2, r24	; 0x02
    12fa:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    12fc:	8d 81       	ldd	r24, Y+5	; 0x05
    12fe:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    1300:	98 2f       	mov	r25, r24
    1302:	88 27       	eor	r24, r24
	iz |= datain[5];
    1304:	2e 81       	ldd	r18, Y+6	; 0x06
    1306:	82 2b       	or	r24, r18
	iz /= 4;
    1308:	bc 01       	movw	r22, r24
    130a:	77 23       	and	r23, r23
    130c:	14 f4       	brge	.+4      	; 0x1312 <get_orientation+0xec>
    130e:	6d 5f       	subi	r22, 0xFD	; 253
    1310:	7f 4f       	sbci	r23, 0xFF	; 255
    1312:	75 95       	asr	r23
    1314:	67 95       	ror	r22
    1316:	75 95       	asr	r23
    1318:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    131a:	07 2e       	mov	r0, r23
    131c:	00 0c       	add	r0, r0
    131e:	88 0b       	sbc	r24, r24
    1320:	99 0b       	sbc	r25, r25
    1322:	0e 94 12 1c 	call	0x3824	; 0x3824 <__floatsisf>
    1326:	26 e6       	ldi	r18, 0x66	; 102
    1328:	36 e2       	ldi	r19, 0x26	; 38
    132a:	45 e7       	ldi	r20, 0x75	; 117
    132c:	5e e3       	ldi	r21, 0x3E	; 62
    132e:	0e 94 c7 1c 	call	0x398e	; 0x398e <__mulsf3>
    1332:	f8 01       	movw	r30, r16
    1334:	60 83       	st	Z, r22
    1336:	71 83       	std	Z+1, r23	; 0x01
    1338:	82 83       	std	Z+2, r24	; 0x02
    133a:	93 83       	std	Z+3, r25	; 0x03

	return(0);

}
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	26 96       	adiw	r28, 0x06	; 6
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	df 90       	pop	r13
    1352:	cf 90       	pop	r12
    1354:	08 95       	ret

00001356 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1356:	1f 93       	push	r17
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	d6 2f       	mov	r29, r22
    135e:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
    1366:	c8 2f       	mov	r28, r24
    1368:	88 23       	and	r24, r24
    136a:	21 f0       	breq	.+8      	; 0x1374 <write_MMA8451+0x1e>
		stop_TWI();
    136c:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
		return(retval);
    1370:	8c 2f       	mov	r24, r28
    1372:	17 c0       	rjmp	.+46     	; 0x13a2 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1374:	8d 2f       	mov	r24, r29
    1376:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
    137a:	c8 2f       	mov	r28, r24
    137c:	88 23       	and	r24, r24
    137e:	21 f0       	breq	.+8      	; 0x1388 <write_MMA8451+0x32>
		stop_TWI();
    1380:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
		return(retval);
    1384:	8c 2f       	mov	r24, r28
    1386:	0d c0       	rjmp	.+26     	; 0x13a2 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1388:	81 2f       	mov	r24, r17
    138a:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
    138e:	c8 2f       	mov	r28, r24
    1390:	88 23       	and	r24, r24
    1392:	21 f0       	breq	.+8      	; 0x139c <write_MMA8451+0x46>
		stop_TWI();
    1394:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
		return(retval);
    1398:	8c 2f       	mov	r24, r28
    139a:	03 c0       	rjmp	.+6      	; 0x13a2 <write_MMA8451+0x4c>
	}
	stop_TWI();
    139c:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>
	return(0);
    13a0:	80 e0       	ldi	r24, 0x00	; 0
	
}
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	08 95       	ret

000013aa <init_MMA8451>:
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/

uint8_t init_MMA8451(void)
{
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	1f 92       	push	r1
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    13b4:	40 e4       	ldi	r20, 0x40	; 64
    13b6:	6b e2       	ldi	r22, 0x2B	; 43
    13b8:	8d e1       	ldi	r24, 0x1D	; 29
    13ba:	0e 94 ab 09 	call	0x1356	; 0x1356 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    13be:	21 e0       	ldi	r18, 0x01	; 1
    13c0:	ae 01       	movw	r20, r28
    13c2:	4f 5f       	subi	r20, 0xFF	; 255
    13c4:	5f 4f       	sbci	r21, 0xFF	; 255
    13c6:	6b e2       	ldi	r22, 0x2B	; 43
    13c8:	8d e1       	ldi	r24, 0x1D	; 29
    13ca:	0e 94 df 08 	call	0x11be	; 0x11be <read_MMA8451>
	while (retval & 0x40) {
    13ce:	08 c0       	rjmp	.+16     	; 0x13e0 <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    13d0:	21 e0       	ldi	r18, 0x01	; 1
    13d2:	ae 01       	movw	r20, r28
    13d4:	4f 5f       	subi	r20, 0xFF	; 255
    13d6:	5f 4f       	sbci	r21, 0xFF	; 255
    13d8:	6b e2       	ldi	r22, 0x2B	; 43
    13da:	8d e1       	ldi	r24, 0x1D	; 29
    13dc:	0e 94 df 08 	call	0x11be	; 0x11be <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	86 fd       	sbrc	r24, 6
    13e4:	f5 cf       	rjmp	.-22     	; 0x13d0 <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    13e6:	40 ec       	ldi	r20, 0xC0	; 192
    13e8:	6f e0       	ldi	r22, 0x0F	; 15
    13ea:	8d e1       	ldi	r24, 0x1D	; 29
    13ec:	0e 94 ab 09 	call	0x1356	; 0x1356 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    13f0:	42 e0       	ldi	r20, 0x02	; 2
    13f2:	6b e2       	ldi	r22, 0x2B	; 43
    13f4:	8d e1       	ldi	r24, 0x1D	; 29
    13f6:	0e 94 ab 09 	call	0x1356	; 0x1356 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    13fa:	4d e3       	ldi	r20, 0x3D	; 61
    13fc:	6a e2       	ldi	r22, 0x2A	; 42
    13fe:	8d e1       	ldi	r24, 0x1D	; 29
    1400:	0e 94 ab 09 	call	0x1356	; 0x1356 <write_MMA8451>

	return(retval);

}
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	0f 90       	pop	r0
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	08 95       	ret

0000140e <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	2e 97       	sbiw	r28, 0x0e	; 14
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    1426:	88 e0       	ldi	r24, 0x08	; 8
    1428:	e4 ed       	ldi	r30, 0xD4	; 212
    142a:	f7 e8       	ldi	r31, 0x87	; 135
    142c:	de 01       	movw	r26, r28
    142e:	11 96       	adiw	r26, 0x01	; 1
    1430:	01 90       	ld	r0, Z+
    1432:	0d 92       	st	X+, r0
    1434:	8a 95       	dec	r24
    1436:	e1 f7       	brne	.-8      	; 0x1430 <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    1438:	f8 01       	movw	r30, r16
    143a:	01 90       	ld	r0, Z+
    143c:	00 20       	and	r0, r0
    143e:	e9 f7       	brne	.-6      	; 0x143a <checksum_NMEA+0x2c>
    1440:	31 97       	sbiw	r30, 0x01	; 1
    1442:	3e 2f       	mov	r19, r30
    1444:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    1446:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	06 c0       	rjmp	.+12     	; 0x1458 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    144c:	f8 01       	movw	r30, r16
    144e:	e8 0f       	add	r30, r24
    1450:	f1 1d       	adc	r31, r1
    1452:	20 81       	ld	r18, Z
    1454:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	83 17       	cp	r24, r19
    145a:	c0 f3       	brcs	.-16     	; 0x144c <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    145c:	1f 92       	push	r1
    145e:	9f 93       	push	r25
    1460:	ce 01       	movw	r24, r28
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	9f 93       	push	r25
    1466:	8f 93       	push	r24
    1468:	7e 01       	movw	r14, r28
    146a:	89 e0       	ldi	r24, 0x09	; 9
    146c:	e8 0e       	add	r14, r24
    146e:	f1 1c       	adc	r15, r1
    1470:	ff 92       	push	r15
    1472:	ef 92       	push	r14
    1474:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
	strcat(str, chksum);
    1478:	b7 01       	movw	r22, r14
    147a:	c8 01       	movw	r24, r16
    147c:	0e 94 75 22 	call	0x44ea	; 0x44ea <strcat>

}
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	2e 96       	adiw	r28, 0x0e	; 14
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	ff 90       	pop	r15
    149c:	ef 90       	pop	r14
    149e:	08 95       	ret

000014a0 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	d6 2f       	mov	r29, r22
    14a6:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	0e 94 ac 18 	call	0x3158	; 0x3158 <start_TWI>
	write_TWI(type);
    14ae:	8d 2f       	mov	r24, r29
    14b0:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
	write_TWI(byteToSend);
    14b4:	8c 2f       	mov	r24, r28
    14b6:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <write_TWI>
	stop_TWI();
    14ba:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <stop_TWI>

}
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	08 95       	ret

000014c4 <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
    14c4:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    14c6:	e0 e6       	ldi	r30, 0x60	; 96
    14c8:	f4 e0       	ldi	r31, 0x04	; 4
    14ca:	90 e4       	ldi	r25, 0x40	; 64
    14cc:	96 83       	std	Z+6, r25	; 0x06
	PORTD.DIRSET = PIN6_bm;
    14ce:	91 83       	std	Z+1, r25	; 0x01
    14d0:	a1 e4       	ldi	r26, 0x41	; 65
    14d2:	b3 e0       	ldi	r27, 0x03	; 3
    14d4:	11 97       	sbiw	r26, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <init_OLED+0x10>
    14d8:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    14da:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
    14dc:	81 11       	cpse	r24, r1
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <init_OLED+0x20>
		twiaddr = OLEDADDR0;
    14e0:	cc e3       	ldi	r28, 0x3C	; 60
    14e2:	01 c0       	rjmp	.+2      	; 0x14e6 <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
    14e4:	cd e3       	ldi	r28, 0x3D	; 61
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    14e6:	4a e2       	ldi	r20, 0x2A	; 42
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	8c 2f       	mov	r24, r28
    14ec:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    14f0:	41 e7       	ldi	r20, 0x71	; 113
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	8c 2f       	mov	r24, r28
    14f6:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    14fa:	4c e5       	ldi	r20, 0x5C	; 92
    14fc:	60 e4       	ldi	r22, 0x40	; 64
    14fe:	8c 2f       	mov	r24, r28
    1500:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1504:	48 e2       	ldi	r20, 0x28	; 40
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	8c 2f       	mov	r24, r28
    150a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    150e:	48 e0       	ldi	r20, 0x08	; 8
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	8c 2f       	mov	r24, r28
    1514:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1518:	4a e2       	ldi	r20, 0x2A	; 42
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	8c 2f       	mov	r24, r28
    151e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1522:	49 e7       	ldi	r20, 0x79	; 121
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	8c 2f       	mov	r24, r28
    1528:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    152c:	45 ed       	ldi	r20, 0xD5	; 213
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	8c 2f       	mov	r24, r28
    1532:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    1536:	40 e7       	ldi	r20, 0x70	; 112
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	8c 2f       	mov	r24, r28
    153c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1540:	48 e7       	ldi	r20, 0x78	; 120
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	8c 2f       	mov	r24, r28
    1546:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    154a:	48 e0       	ldi	r20, 0x08	; 8
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	8c 2f       	mov	r24, r28
    1550:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1554:	46 e0       	ldi	r20, 0x06	; 6
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	8c 2f       	mov	r24, r28
    155a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    155e:	42 e7       	ldi	r20, 0x72	; 114
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	8c 2f       	mov	r24, r28
    1564:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    1568:	40 e0       	ldi	r20, 0x00	; 0
    156a:	60 e4       	ldi	r22, 0x40	; 64
    156c:	8c 2f       	mov	r24, r28
    156e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1572:	4a e2       	ldi	r20, 0x2A	; 42
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	8c 2f       	mov	r24, r28
    1578:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    157c:	49 e7       	ldi	r20, 0x79	; 121
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	8c 2f       	mov	r24, r28
    1582:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    1586:	4a ed       	ldi	r20, 0xDA	; 218
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	8c 2f       	mov	r24, r28
    158c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1590:	40 e0       	ldi	r20, 0x00	; 0
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	8c 2f       	mov	r24, r28
    1596:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    159a:	4c ed       	ldi	r20, 0xDC	; 220
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	8c 2f       	mov	r24, r28
    15a0:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    15a4:	40 e0       	ldi	r20, 0x00	; 0
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	8c 2f       	mov	r24, r28
    15aa:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    15ae:	41 e8       	ldi	r20, 0x81	; 129
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	8c 2f       	mov	r24, r28
    15b4:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    15b8:	4f e7       	ldi	r20, 0x7F	; 127
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	8c 2f       	mov	r24, r28
    15be:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    15c2:	49 ed       	ldi	r20, 0xD9	; 217
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	8c 2f       	mov	r24, r28
    15c8:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    15cc:	41 ef       	ldi	r20, 0xF1	; 241
    15ce:	60 e0       	ldi	r22, 0x00	; 0
    15d0:	8c 2f       	mov	r24, r28
    15d2:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    15d6:	4b ed       	ldi	r20, 0xDB	; 219
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	8c 2f       	mov	r24, r28
    15dc:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    15e0:	40 e4       	ldi	r20, 0x40	; 64
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	8c 2f       	mov	r24, r28
    15e6:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    15ea:	48 e7       	ldi	r20, 0x78	; 120
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	8c 2f       	mov	r24, r28
    15f0:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    15f4:	48 e2       	ldi	r20, 0x28	; 40
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	8c 2f       	mov	r24, r28
    15fa:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    15fe:	41 e0       	ldi	r20, 0x01	; 1
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	8c 2f       	mov	r24, r28
    1604:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    1608:	40 e8       	ldi	r20, 0x80	; 128
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	8c 2f       	mov	r24, r28
    160e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    1612:	4c e0       	ldi	r20, 0x0C	; 12
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	8c 2f       	mov	r24, r28
    1618:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
    161c:	ba e6       	ldi	r27, 0x6A	; 106
    161e:	24 e0       	ldi	r18, 0x04	; 4
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	b1 50       	subi	r27, 0x01	; 1
    1624:	20 40       	sbci	r18, 0x00	; 0
    1626:	80 40       	sbci	r24, 0x00	; 0
    1628:	e1 f7       	brne	.-8      	; 0x1622 <init_OLED+0x15e>
    162a:	00 c0       	rjmp	.+0      	; 0x162c <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
    162c:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED>
    1630:	10 92 0e 2a 	sts	0x2A0E, r1	; 0x802a0e <timerOLED+0x1>
	timeoutOLED = 5;
    1634:	85 e0       	ldi	r24, 0x05	; 5
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <timeoutOLED>
    163c:	90 93 10 2a 	sts	0x2A10, r25	; 0x802a10 <timeoutOLED+0x1>

}
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	e2 97       	sbiw	r28, 0x32	; 50
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    165c:	91 e1       	ldi	r25, 0x11	; 17
    165e:	ec ed       	ldi	r30, 0xDC	; 220
    1660:	f7 e8       	ldi	r31, 0x87	; 135
    1662:	de 01       	movw	r26, r28
    1664:	92 96       	adiw	r26, 0x22	; 34
    1666:	01 90       	ld	r0, Z+
    1668:	0d 92       	st	X+, r0
    166a:	9a 95       	dec	r25
    166c:	e1 f7       	brne	.-8      	; 0x1666 <writestr_OLED+0x22>

	if (displaynumber == 0) {
    166e:	81 11       	cpse	r24, r1
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1672:	0c e3       	ldi	r16, 0x3C	; 60
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1676:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    1678:	ce 01       	movw	r24, r28
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	7c 01       	movw	r14, r24
    167e:	0e 94 80 22 	call	0x4500	; 0x4500 <strcpy>
	if (strlen(strbuf) > 16) {
    1682:	f7 01       	movw	r30, r14
    1684:	01 90       	ld	r0, Z+
    1686:	00 20       	and	r0, r0
    1688:	e9 f7       	brne	.-6      	; 0x1684 <writestr_OLED+0x40>
    168a:	31 97       	sbiw	r30, 0x01	; 1
    168c:	ee 19       	sub	r30, r14
    168e:	ff 09       	sbc	r31, r15
    1690:	71 97       	sbiw	r30, 0x11	; 17
    1692:	08 f0       	brcs	.+2      	; 0x1696 <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1694:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1696:	be 01       	movw	r22, r28
    1698:	6e 5d       	subi	r22, 0xDE	; 222
    169a:	7f 4f       	sbci	r23, 0xFF	; 255
    169c:	ce 01       	movw	r24, r28
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	0e 94 75 22 	call	0x44ea	; 0x44ea <strcat>

	if (lineno == 1) {
    16a4:	11 30       	cpi	r17, 0x01	; 1
    16a6:	39 f4       	brne	.+14     	; 0x16b6 <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    16a8:	40 e8       	ldi	r20, 0x80	; 128
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	80 2f       	mov	r24, r16
    16ae:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    16b2:	10 e0       	ldi	r17, 0x00	; 0
    16b4:	12 c0       	rjmp	.+36     	; 0x16da <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    16b6:	40 ec       	ldi	r20, 0xC0	; 192
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	80 2f       	mov	r24, r16
    16bc:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>
    16c0:	f8 cf       	rjmp	.-16     	; 0x16b2 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    16c2:	e1 e0       	ldi	r30, 0x01	; 1
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	ec 0f       	add	r30, r28
    16c8:	fd 1f       	adc	r31, r29
    16ca:	e1 0f       	add	r30, r17
    16cc:	f1 1d       	adc	r31, r1
    16ce:	40 81       	ld	r20, Z
    16d0:	60 e4       	ldi	r22, 0x40	; 64
    16d2:	80 2f       	mov	r24, r16
    16d4:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    16d8:	1f 5f       	subi	r17, 0xFF	; 255
    16da:	10 31       	cpi	r17, 0x10	; 16
    16dc:	90 f3       	brcs	.-28     	; 0x16c2 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timerOLED>
    16e6:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timerOLED+0x1>

}
    16ea:	e2 96       	adiw	r28, 0x32	; 50
    16ec:	cd bf       	out	0x3d, r28	; 61
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	1f 91       	pop	r17
    16f6:	0f 91       	pop	r16
    16f8:	ff 90       	pop	r15
    16fa:	ef 90       	pop	r14
    16fc:	08 95       	ret

000016fe <clear_OLED>:
/*------------------------------------------------------------------------------
void clear_OLED(uint8_t displaynumber)
	Clears the OLED screen by writing blank spaces to both lines.
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	61 97       	sbiw	r28, 0x11	; 17
    170a:	cd bf       	out	0x3d, r28	; 61
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	18 2f       	mov	r17, r24

	char blanks[] = "                ";	// Does const put this in flash?
    1710:	81 e1       	ldi	r24, 0x11	; 17
    1712:	ec ed       	ldi	r30, 0xDC	; 220
    1714:	f7 e8       	ldi	r31, 0x87	; 135
    1716:	de 01       	movw	r26, r28
    1718:	11 96       	adiw	r26, 0x01	; 1
    171a:	01 90       	ld	r0, Z+
    171c:	0d 92       	st	X+, r0
    171e:	8a 95       	dec	r24
    1720:	e1 f7       	brne	.-8      	; 0x171a <clear_OLED+0x1c>

	writestr_OLED(displaynumber, blanks, 1);
    1722:	41 e0       	ldi	r20, 0x01	; 1
    1724:	be 01       	movw	r22, r28
    1726:	6f 5f       	subi	r22, 0xFF	; 255
    1728:	7f 4f       	sbci	r23, 0xFF	; 255
    172a:	81 2f       	mov	r24, r17
    172c:	0e 94 22 0b 	call	0x1644	; 0x1644 <writestr_OLED>
	writestr_OLED(displaynumber, blanks, 2);
    1730:	42 e0       	ldi	r20, 0x02	; 2
    1732:	be 01       	movw	r22, r28
    1734:	6f 5f       	subi	r22, 0xFF	; 255
    1736:	7f 4f       	sbci	r23, 0xFF	; 255
    1738:	81 2f       	mov	r24, r17
    173a:	0e 94 22 0b 	call	0x1644	; 0x1644 <writestr_OLED>
	timerOLED = 0;
    173e:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED>
    1742:	10 92 0e 2a 	sts	0x2A0E, r1	; 0x802a0e <timerOLED+0x1>

}
    1746:	61 96       	adiw	r28, 0x11	; 17
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	08 95       	ret

00001754 <init_PNEU>:
uint8_t init_PNEU(void)
{

	uint8_t retval;

	if ((retval = write_MCP23008(HIGHCURRENT, IODIR, 0x00))) {
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	84 e2       	ldi	r24, 0x24	; 36
    175a:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_MCP23008>
    175e:	81 11       	cpse	r24, r1
    1760:	35 c0       	rjmp	.+106    	; 0x17cc <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, 0x00))) {
    1762:	40 e0       	ldi	r20, 0x00	; 0
    1764:	6a e0       	ldi	r22, 0x0A	; 10
    1766:	84 e2       	ldi	r24, 0x24	; 36
    1768:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_MCP23008>
    176c:	81 11       	cpse	r24, r1
    176e:	2e c0       	rjmp	.+92     	; 0x17cc <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IODIR, 0xFE))) {	// Inputs
    1770:	4e ef       	ldi	r20, 0xFE	; 254
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	81 e2       	ldi	r24, 0x21	; 33
    1776:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_MCP23008>
    177a:	81 11       	cpse	r24, r1
    177c:	27 c0       	rjmp	.+78     	; 0x17cc <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IPOL, 0x00))) {
    177e:	40 e0       	ldi	r20, 0x00	; 0
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	81 e2       	ldi	r24, 0x21	; 33
    1784:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_MCP23008>
    1788:	81 11       	cpse	r24, r1
    178a:	20 c0       	rjmp	.+64     	; 0x17cc <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100))) {
    178c:	4c ef       	ldi	r20, 0xFC	; 252
    178e:	62 e0       	ldi	r22, 0x02	; 2
    1790:	81 e2       	ldi	r24, 0x21	; 33
    1792:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_MCP23008>
    1796:	81 11       	cpse	r24, r1
    1798:	19 c0       	rjmp	.+50     	; 0x17cc <init_PNEU+0x78>
			return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, INTCON, 0x00))) {
    179a:	40 e0       	ldi	r20, 0x00	; 0
    179c:	64 e0       	ldi	r22, 0x04	; 4
    179e:	81 e2       	ldi	r24, 0x21	; 33
    17a0:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_MCP23008>
    17a4:	81 11       	cpse	r24, r1
    17a6:	12 c0       	rjmp	.+36     	; 0x17cc <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IOCON, 0x20))) { // Don't increment addr
    17a8:	40 e2       	ldi	r20, 0x20	; 32
    17aa:	65 e0       	ldi	r22, 0x05	; 5
    17ac:	81 e2       	ldi	r24, 0x21	; 33
    17ae:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_MCP23008>
    17b2:	81 11       	cpse	r24, r1
    17b4:	0b c0       	rjmp	.+22     	; 0x17cc <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPPU, 0x7F))) { // Pullups (not really needed)
    17b6:	4f e7       	ldi	r20, 0x7F	; 127
    17b8:	66 e0       	ldi	r22, 0x06	; 6
    17ba:	81 e2       	ldi	r24, 0x21	; 33
    17bc:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_MCP23008>
    17c0:	81 11       	cpse	r24, r1
    17c2:	04 c0       	rjmp	.+8      	; 0x17cc <init_PNEU+0x78>
		return(retval);
	}
	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    17c4:	89 e0       	ldi	r24, 0x09	; 9
    17c6:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	return(0);
    17ca:	80 e0       	ldi	r24, 0x00	; 0

}
    17cc:	08 95       	ret

000017ce <read_PNEUSENSORS>:
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
{
    17ce:	cf 92       	push	r12
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	6c 01       	movw	r12, r24
    17e0:	8b 01       	movw	r16, r22
    17e2:	7a 01       	movw	r14, r20
    17e4:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);
    17e6:	69 e0       	ldi	r22, 0x09	; 9
    17e8:	81 e2       	ldi	r24, 0x21	; 33
    17ea:	0e 94 43 08 	call	0x1086	; 0x1086 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    17ee:	98 2f       	mov	r25, r24
    17f0:	92 95       	swap	r25
    17f2:	96 95       	lsr	r25
    17f4:	96 95       	lsr	r25
    17f6:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    17f8:	91 30       	cpi	r25, 0x01	; 1
    17fa:	21 f4       	brne	.+8      	; 0x1804 <__DATA_REGION_LENGTH__+0x4>
		*shutter = 'c';
    17fc:	93 e6       	ldi	r25, 0x63	; 99
    17fe:	f6 01       	movw	r30, r12
    1800:	90 83       	st	Z, r25
    1802:	0f c0       	rjmp	.+30     	; 0x1822 <__DATA_REGION_LENGTH__+0x22>
	} else if (state == 2) {
    1804:	92 30       	cpi	r25, 0x02	; 2
    1806:	21 f4       	brne	.+8      	; 0x1810 <__DATA_REGION_LENGTH__+0x10>
		*shutter = 'o';
    1808:	9f e6       	ldi	r25, 0x6F	; 111
    180a:	f6 01       	movw	r30, r12
    180c:	90 83       	st	Z, r25
    180e:	09 c0       	rjmp	.+18     	; 0x1822 <__DATA_REGION_LENGTH__+0x22>
	} else if (state == 3) {
    1810:	93 30       	cpi	r25, 0x03	; 3
    1812:	21 f4       	brne	.+8      	; 0x181c <__DATA_REGION_LENGTH__+0x1c>
		*shutter = 't';
    1814:	94 e7       	ldi	r25, 0x74	; 116
    1816:	f6 01       	movw	r30, r12
    1818:	90 83       	st	Z, r25
    181a:	03 c0       	rjmp	.+6      	; 0x1822 <__DATA_REGION_LENGTH__+0x22>
	} else {
		*shutter = 'x';
    181c:	98 e7       	ldi	r25, 0x78	; 120
    181e:	f6 01       	movw	r30, r12
    1820:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1822:	98 2f       	mov	r25, r24
    1824:	96 95       	lsr	r25
    1826:	96 95       	lsr	r25
	state &= 0b00000011;
    1828:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    182a:	91 30       	cpi	r25, 0x01	; 1
    182c:	21 f4       	brne	.+8      	; 0x1836 <__DATA_REGION_LENGTH__+0x36>
		*right = 'c';
    182e:	93 e6       	ldi	r25, 0x63	; 99
    1830:	f7 01       	movw	r30, r14
    1832:	90 83       	st	Z, r25
    1834:	0f c0       	rjmp	.+30     	; 0x1854 <__DATA_REGION_LENGTH__+0x54>
	} else if (state == 2) {
    1836:	92 30       	cpi	r25, 0x02	; 2
    1838:	21 f4       	brne	.+8      	; 0x1842 <__DATA_REGION_LENGTH__+0x42>
		*right = 'o';
    183a:	9f e6       	ldi	r25, 0x6F	; 111
    183c:	f7 01       	movw	r30, r14
    183e:	90 83       	st	Z, r25
    1840:	09 c0       	rjmp	.+18     	; 0x1854 <__DATA_REGION_LENGTH__+0x54>
	} else if (state == 3) {
    1842:	93 30       	cpi	r25, 0x03	; 3
    1844:	21 f4       	brne	.+8      	; 0x184e <__DATA_REGION_LENGTH__+0x4e>
		*right = 't';
    1846:	94 e7       	ldi	r25, 0x74	; 116
    1848:	f7 01       	movw	r30, r14
    184a:	90 83       	st	Z, r25
    184c:	03 c0       	rjmp	.+6      	; 0x1854 <__DATA_REGION_LENGTH__+0x54>
	} else {
		*right = 'x';
    184e:	98 e7       	ldi	r25, 0x78	; 120
    1850:	f7 01       	movw	r30, r14
    1852:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1854:	98 2f       	mov	r25, r24
    1856:	92 95       	swap	r25
    1858:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    185a:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    185c:	91 30       	cpi	r25, 0x01	; 1
    185e:	21 f4       	brne	.+8      	; 0x1868 <__DATA_REGION_LENGTH__+0x68>
		*left = 'o';
    1860:	9f e6       	ldi	r25, 0x6F	; 111
    1862:	f8 01       	movw	r30, r16
    1864:	90 83       	st	Z, r25
    1866:	0f c0       	rjmp	.+30     	; 0x1886 <__DATA_REGION_LENGTH__+0x86>
	} else if (state == 2) {
    1868:	92 30       	cpi	r25, 0x02	; 2
    186a:	21 f4       	brne	.+8      	; 0x1874 <__DATA_REGION_LENGTH__+0x74>
		*left = 'c';
    186c:	93 e6       	ldi	r25, 0x63	; 99
    186e:	f8 01       	movw	r30, r16
    1870:	90 83       	st	Z, r25
    1872:	09 c0       	rjmp	.+18     	; 0x1886 <__DATA_REGION_LENGTH__+0x86>
	} else if (state == 3) {
    1874:	93 30       	cpi	r25, 0x03	; 3
    1876:	21 f4       	brne	.+8      	; 0x1880 <__DATA_REGION_LENGTH__+0x80>
		*left = 't';
    1878:	94 e7       	ldi	r25, 0x74	; 116
    187a:	f8 01       	movw	r30, r16
    187c:	90 83       	st	Z, r25
    187e:	03 c0       	rjmp	.+6      	; 0x1886 <__DATA_REGION_LENGTH__+0x86>
	} else {
		*left = 'x';
    1880:	98 e7       	ldi	r25, 0x78	; 120
    1882:	f8 01       	movw	r30, r16
    1884:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1886:	81 ff       	sbrs	r24, 1
    1888:	03 c0       	rjmp	.+6      	; 0x1890 <__DATA_REGION_LENGTH__+0x90>
		*air = '0';
    188a:	80 e3       	ldi	r24, 0x30	; 48
    188c:	88 83       	st	Y, r24
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <__DATA_REGION_LENGTH__+0x94>
	} else {
		*air = '1';
    1890:	81 e3       	ldi	r24, 0x31	; 49
    1892:	88 83       	st	Y, r24
	}
}
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	ff 90       	pop	r15
    189e:	ef 90       	pop	r14
    18a0:	df 90       	pop	r13
    18a2:	cf 90       	pop	r12
    18a4:	08 95       	ret

000018a6 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	d8 2f       	mov	r29, r24
    18ac:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    18ae:	69 e0       	ldi	r22, 0x09	; 9
    18b0:	84 e2       	ldi	r24, 0x24	; 36
    18b2:	0e 94 43 08 	call	0x1086	; 0x1086 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    18b6:	8d 2b       	or	r24, r29
    18b8:	48 2f       	mov	r20, r24
    18ba:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    18bc:	6a e0       	ldi	r22, 0x0A	; 10
    18be:	84 e2       	ldi	r24, 0x24	; 36
    18c0:	0e 94 66 08 	call	0x10cc	; 0x10cc <write_MCP23008>
		return(retval);
	}

	return(0);

}
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	08 95       	ret

000018ca <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(char mech)
{
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	6a 97       	sbiw	r28, 0x1a	; 26
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    18d8:	99 e0       	ldi	r25, 0x09	; 9
    18da:	e5 e0       	ldi	r30, 0x05	; 5
    18dc:	f8 e8       	ldi	r31, 0x88	; 136
    18de:	de 01       	movw	r26, r28
    18e0:	11 96       	adiw	r26, 0x01	; 1
    18e2:	01 90       	ld	r0, Z+
    18e4:	0d 92       	st	X+, r0
    18e6:	9a 95       	dec	r25
    18e8:	e1 f7       	brne	.-8      	; 0x18e2 <close_PNEU+0x18>
	char outbuf[17];

	switch (mech) {
    18ea:	8c 36       	cpi	r24, 0x6C	; 108
    18ec:	31 f1       	breq	.+76     	; 0x193a <close_PNEU+0x70>
    18ee:	18 f4       	brcc	.+6      	; 0x18f6 <close_PNEU+0x2c>
    18f0:	82 36       	cpi	r24, 0x62	; 98
    18f2:	39 f0       	breq	.+14     	; 0x1902 <close_PNEU+0x38>
    18f4:	75 c0       	rjmp	.+234    	; 0x19e0 <close_PNEU+0x116>
    18f6:	82 37       	cpi	r24, 0x72	; 114
    18f8:	c1 f1       	breq	.+112    	; 0x196a <close_PNEU+0xa0>
    18fa:	83 37       	cpi	r24, 0x73	; 115
    18fc:	09 f4       	brne	.+2      	; 0x1900 <close_PNEU+0x36>
    18fe:	4d c0       	rjmp	.+154    	; 0x199a <close_PNEU+0xd0>
    1900:	6f c0       	rjmp	.+222    	; 0x19e0 <close_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1902:	6a ee       	ldi	r22, 0xEA	; 234
    1904:	84 e4       	ldi	r24, 0x44	; 68
    1906:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    190a:	66 ee       	ldi	r22, 0xE6	; 230
    190c:	88 e8       	ldi	r24, 0x88	; 136
    190e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1912:	8d ee       	ldi	r24, 0xED	; 237
    1914:	97 e8       	ldi	r25, 0x87	; 135
    1916:	9f 93       	push	r25
    1918:	8f 93       	push	r24
    191a:	ce 01       	movw	r24, r28
    191c:	01 96       	adiw	r24, 0x01	; 1
    191e:	9f 93       	push	r25
    1920:	8f 93       	push	r24
    1922:	09 96       	adiw	r24, 0x09	; 9
    1924:	9f 93       	push	r25
    1926:	8f 93       	push	r24
    1928:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
			break;
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	47 c0       	rjmp	.+142    	; 0x19c8 <close_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    193a:	6a ee       	ldi	r22, 0xEA	; 234
    193c:	84 e4       	ldi	r24, 0x44	; 68
    193e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1942:	82 ef       	ldi	r24, 0xF2	; 242
    1944:	97 e8       	ldi	r25, 0x87	; 135
    1946:	9f 93       	push	r25
    1948:	8f 93       	push	r24
    194a:	ce 01       	movw	r24, r28
    194c:	01 96       	adiw	r24, 0x01	; 1
    194e:	9f 93       	push	r25
    1950:	8f 93       	push	r24
    1952:	09 96       	adiw	r24, 0x09	; 9
    1954:	9f 93       	push	r25
    1956:	8f 93       	push	r24
    1958:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
			break;
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	2f c0       	rjmp	.+94     	; 0x19c8 <close_PNEU+0xfe>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    196a:	66 ee       	ldi	r22, 0xE6	; 230
    196c:	88 e8       	ldi	r24, 0x88	; 136
    196e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1972:	87 ef       	ldi	r24, 0xF7	; 247
    1974:	97 e8       	ldi	r25, 0x87	; 135
    1976:	9f 93       	push	r25
    1978:	8f 93       	push	r24
    197a:	ce 01       	movw	r24, r28
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	9f 93       	push	r25
    1980:	8f 93       	push	r24
    1982:	09 96       	adiw	r24, 0x09	; 9
    1984:	9f 93       	push	r25
    1986:	8f 93       	push	r24
    1988:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
			break;
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	17 c0       	rjmp	.+46     	; 0x19c8 <close_PNEU+0xfe>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    199a:	6c ee       	ldi	r22, 0xEC	; 236
    199c:	82 e2       	ldi	r24, 0x22	; 34
    199e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    19a2:	8d ef       	ldi	r24, 0xFD	; 253
    19a4:	97 e8       	ldi	r25, 0x87	; 135
    19a6:	9f 93       	push	r25
    19a8:	8f 93       	push	r24
    19aa:	ce 01       	movw	r24, r28
    19ac:	01 96       	adiw	r24, 0x01	; 1
    19ae:	9f 93       	push	r25
    19b0:	8f 93       	push	r24
    19b2:	09 96       	adiw	r24, 0x09	; 9
    19b4:	9f 93       	push	r25
    19b6:	8f 93       	push	r24
    19b8:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
			break;
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
			return(ERRORPROMPT);
			break;

	}

	clear_OLED(1);
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    19ce:	41 e0       	ldi	r20, 0x01	; 1
    19d0:	be 01       	movw	r22, r28
    19d2:	66 5f       	subi	r22, 0xF6	; 246
    19d4:	7f 4f       	sbci	r23, 0xFF	; 255
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	0e 94 22 0b 	call	0x1644	; 0x1644 <writestr_OLED>
	return(GREATERPROMPT);
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	01 c0       	rjmp	.+2      	; 0x19e2 <close_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
			sprintf(outbuf, dformat_CLO, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    19e0:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    19e2:	6a 96       	adiw	r28, 0x1a	; 26
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	df 91       	pop	r29
    19ea:	cf 91       	pop	r28
    19ec:	08 95       	ret

000019ee <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(char mechanism)
{
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	69 97       	sbiw	r28, 0x19	; 25
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	de bf       	out	0x3e, r29	; 62


	const char dformat_OPE[] = "Open %s";
    19fc:	98 e0       	ldi	r25, 0x08	; 8
    19fe:	ee e0       	ldi	r30, 0x0E	; 14
    1a00:	f8 e8       	ldi	r31, 0x88	; 136
    1a02:	de 01       	movw	r26, r28
    1a04:	11 96       	adiw	r26, 0x01	; 1
    1a06:	01 90       	ld	r0, Z+
    1a08:	0d 92       	st	X+, r0
    1a0a:	9a 95       	dec	r25
    1a0c:	e1 f7       	brne	.-8      	; 0x1a06 <open_PNEU+0x18>
	char outbuf[17];

	switch (mechanism) {
    1a0e:	8c 36       	cpi	r24, 0x6C	; 108
    1a10:	31 f1       	breq	.+76     	; 0x1a5e <open_PNEU+0x70>
    1a12:	18 f4       	brcc	.+6      	; 0x1a1a <open_PNEU+0x2c>
    1a14:	82 36       	cpi	r24, 0x62	; 98
    1a16:	39 f0       	breq	.+14     	; 0x1a26 <open_PNEU+0x38>
    1a18:	75 c0       	rjmp	.+234    	; 0x1b04 <open_PNEU+0x116>
    1a1a:	82 37       	cpi	r24, 0x72	; 114
    1a1c:	c1 f1       	breq	.+112    	; 0x1a8e <open_PNEU+0xa0>
    1a1e:	83 37       	cpi	r24, 0x73	; 115
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <open_PNEU+0x36>
    1a22:	4d c0       	rjmp	.+154    	; 0x1abe <open_PNEU+0xd0>
    1a24:	6f c0       	rjmp	.+222    	; 0x1b04 <open_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1a26:	6e ea       	ldi	r22, 0xAE	; 174
    1a28:	84 e4       	ldi	r24, 0x44	; 68
    1a2a:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1a2e:	6e e6       	ldi	r22, 0x6E	; 110
    1a30:	88 e8       	ldi	r24, 0x88	; 136
    1a32:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1a36:	8d ee       	ldi	r24, 0xED	; 237
    1a38:	97 e8       	ldi	r25, 0x87	; 135
    1a3a:	9f 93       	push	r25
    1a3c:	8f 93       	push	r24
    1a3e:	ce 01       	movw	r24, r28
    1a40:	01 96       	adiw	r24, 0x01	; 1
    1a42:	9f 93       	push	r25
    1a44:	8f 93       	push	r24
    1a46:	08 96       	adiw	r24, 0x08	; 8
    1a48:	9f 93       	push	r25
    1a4a:	8f 93       	push	r24
    1a4c:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
			break;
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	47 c0       	rjmp	.+142    	; 0x1aec <open_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1a5e:	6e ea       	ldi	r22, 0xAE	; 174
    1a60:	84 e4       	ldi	r24, 0x44	; 68
    1a62:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1a66:	82 ef       	ldi	r24, 0xF2	; 242
    1a68:	97 e8       	ldi	r25, 0x87	; 135
    1a6a:	9f 93       	push	r25
    1a6c:	8f 93       	push	r24
    1a6e:	ce 01       	movw	r24, r28
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	9f 93       	push	r25
    1a74:	8f 93       	push	r24
    1a76:	08 96       	adiw	r24, 0x08	; 8
    1a78:	9f 93       	push	r25
    1a7a:	8f 93       	push	r24
    1a7c:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
			break;
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	2f c0       	rjmp	.+94     	; 0x1aec <open_PNEU+0xfe>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1a8e:	6e e6       	ldi	r22, 0x6E	; 110
    1a90:	88 e8       	ldi	r24, 0x88	; 136
    1a92:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1a96:	87 ef       	ldi	r24, 0xF7	; 247
    1a98:	97 e8       	ldi	r25, 0x87	; 135
    1a9a:	9f 93       	push	r25
    1a9c:	8f 93       	push	r24
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	9f 93       	push	r25
    1aa4:	8f 93       	push	r24
    1aa6:	08 96       	adiw	r24, 0x08	; 8
    1aa8:	9f 93       	push	r25
    1aaa:	8f 93       	push	r24
    1aac:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
			break;
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	17 c0       	rjmp	.+46     	; 0x1aec <open_PNEU+0xfe>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1abe:	6e ec       	ldi	r22, 0xCE	; 206
    1ac0:	82 e2       	ldi	r24, 0x22	; 34
    1ac2:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1ac6:	8d ef       	ldi	r24, 0xFD	; 253
    1ac8:	97 e8       	ldi	r25, 0x87	; 135
    1aca:	9f 93       	push	r25
    1acc:	8f 93       	push	r24
    1ace:	ce 01       	movw	r24, r28
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	9f 93       	push	r25
    1ad4:	8f 93       	push	r24
    1ad6:	08 96       	adiw	r24, 0x08	; 8
    1ad8:	9f 93       	push	r25
    1ada:	8f 93       	push	r24
    1adc:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
			break;
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
		default:
			return(ERRORPROMPT);

	}

	clear_OLED(1);
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1af2:	41 e0       	ldi	r20, 0x01	; 1
    1af4:	be 01       	movw	r22, r28
    1af6:	67 5f       	subi	r22, 0xF7	; 247
    1af8:	7f 4f       	sbci	r23, 0xFF	; 255
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	0e 94 22 0b 	call	0x1644	; 0x1644 <writestr_OLED>
	return(GREATERPROMPT);
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	01 c0       	rjmp	.+2      	; 0x1b06 <open_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
			sprintf(outbuf, dformat_OPE, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    1b04:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    1b06:	69 96       	adiw	r28, 0x19	; 25
    1b08:	cd bf       	out	0x3d, r28	; 61
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	df 91       	pop	r29
    1b0e:	cf 91       	pop	r28
    1b10:	08 95       	ret

00001b12 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1b12:	1f 92       	push	r1
    1b14:	0f 92       	push	r0
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	0f 92       	push	r0
    1b1a:	11 24       	eor	r1, r1
    1b1c:	2f 93       	push	r18
    1b1e:	3f 93       	push	r19
    1b20:	4f 93       	push	r20
    1b22:	5f 93       	push	r21
    1b24:	6f 93       	push	r22
    1b26:	7f 93       	push	r23
    1b28:	8f 93       	push	r24
    1b2a:	9f 93       	push	r25
    1b2c:	af 93       	push	r26
    1b2e:	bf 93       	push	r27
    1b30:	ef 93       	push	r30
    1b32:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1b34:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1b38:	88 23       	and	r24, r24
    1b3a:	4c f4       	brge	.+18     	; 0x1b4e <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1b3c:	80 e8       	ldi	r24, 0x80	; 128
    1b3e:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1b42:	68 e0       	ldi	r22, 0x08	; 8
    1b44:	81 e2       	ldi	r24, 0x21	; 33
    1b46:	0e 94 43 08 	call	0x1086	; 0x1086 <read_MCP23008>
    1b4a:	80 93 11 2a 	sts	0x2A11, r24	; 0x802a11 <pneuState>
	}

}
    1b4e:	ff 91       	pop	r31
    1b50:	ef 91       	pop	r30
    1b52:	bf 91       	pop	r27
    1b54:	af 91       	pop	r26
    1b56:	9f 91       	pop	r25
    1b58:	8f 91       	pop	r24
    1b5a:	7f 91       	pop	r23
    1b5c:	6f 91       	pop	r22
    1b5e:	5f 91       	pop	r21
    1b60:	4f 91       	pop	r20
    1b62:	3f 91       	pop	r19
    1b64:	2f 91       	pop	r18
    1b66:	0f 90       	pop	r0
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	0f 90       	pop	r0
    1b6c:	1f 90       	pop	r1
    1b6e:	18 95       	reti

00001b70 <init_PORTS>:
	sure nothing lurks in the background by accident.
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
    1b70:	e0 e0       	ldi	r30, 0x00	; 0
    1b72:	f4 e0       	ldi	r31, 0x04	; 4
    1b74:	88 e0       	ldi	r24, 0x08	; 8
    1b76:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
    1b78:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
    1b7a:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
    1b7c:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
    1b7e:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    1b80:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    1b82:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
    1b84:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
    1b86:	e0 e2       	ldi	r30, 0x20	; 32
    1b88:	f4 e0       	ldi	r31, 0x04	; 4
    1b8a:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
    1b8c:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
    1b8e:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
    1b90:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
    1b92:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
    1b94:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
    1b96:	e0 e4       	ldi	r30, 0x40	; 64
    1b98:	f4 e0       	ldi	r31, 0x04	; 4
    1b9a:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
    1b9c:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
    1b9e:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
    1ba0:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
    1ba2:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
    1ba4:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
    1ba6:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
    1ba8:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1baa:	e0 e6       	ldi	r30, 0x60	; 96
    1bac:	f4 e0       	ldi	r31, 0x04	; 4
    1bae:	94 e0       	ldi	r25, 0x04	; 4
    1bb0:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1bb2:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1bb4:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1bb6:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1bb8:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1bba:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1bbc:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1bbe:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
    1bc0:	e0 e8       	ldi	r30, 0x80	; 128
    1bc2:	f4 e0       	ldi	r31, 0x04	; 4
    1bc4:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
    1bc6:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
    1bc8:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
    1bca:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
    1bcc:	e0 ea       	ldi	r30, 0xA0	; 160
    1bce:	f4 e0       	ldi	r31, 0x04	; 4
    1bd0:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
    1bd2:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
    1bd4:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
    1bd6:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
    1bd8:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
    1bda:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
    1bdc:	86 8b       	std	Z+22, r24	; 0x16
    1bde:	08 95       	ret

00001be0 <report>:
	Returns
		0 - GREATERPROMPT on success
		1 - ERRORPROMPT on error (invalid command noun)
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1be0:	2f 92       	push	r2
    1be2:	3f 92       	push	r3
    1be4:	4f 92       	push	r4
    1be6:	5f 92       	push	r5
    1be8:	6f 92       	push	r6
    1bea:	7f 92       	push	r7
    1bec:	8f 92       	push	r8
    1bee:	9f 92       	push	r9
    1bf0:	af 92       	push	r10
    1bf2:	bf 92       	push	r11
    1bf4:	cf 92       	push	r12
    1bf6:	df 92       	push	r13
    1bf8:	ef 92       	push	r14
    1bfa:	ff 92       	push	r15
    1bfc:	0f 93       	push	r16
    1bfe:	1f 93       	push	r17
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	c1 50       	subi	r28, 0x01	; 1
    1c0a:	d3 40       	sbci	r29, 0x03	; 3
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE+10], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "$S%dENV,%s,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%s";
    1c10:	92 e4       	ldi	r25, 0x42	; 66
    1c12:	e4 e7       	ldi	r30, 0x74	; 116
    1c14:	f8 e8       	ldi	r31, 0x88	; 136
    1c16:	de 01       	movw	r26, r28
    1c18:	ab 5a       	subi	r26, 0xAB	; 171
    1c1a:	be 4f       	sbci	r27, 0xFE	; 254
    1c1c:	01 90       	ld	r0, Z+
    1c1e:	0d 92       	st	X+, r0
    1c20:	9a 95       	dec	r25
    1c22:	e1 f7       	brne	.-8      	; 0x1c1c <report+0x3c>
	const char format_MTR[] = "$S%dMTR,%s,%c,%ld,microns,%ld,microns/sec,%d,mA,%s";
    1c24:	93 e3       	ldi	r25, 0x33	; 51
    1c26:	e6 eb       	ldi	r30, 0xB6	; 182
    1c28:	f8 e8       	ldi	r31, 0x88	; 136
    1c2a:	de 01       	movw	r26, r28
    1c2c:	a9 56       	subi	r26, 0x69	; 105
    1c2e:	be 4f       	sbci	r27, 0xFE	; 254
    1c30:	01 90       	ld	r0, Z+
    1c32:	0d 92       	st	X+, r0
    1c34:	9a 95       	dec	r25
    1c36:	e1 f7       	brne	.-8      	; 0x1c30 <report+0x50>
	const char format1_MTR[] = "$S%dMTR,%s,%c,%3.1f,V,%3.1f,C,%s";
    1c38:	91 e2       	ldi	r25, 0x21	; 33
    1c3a:	e9 ee       	ldi	r30, 0xE9	; 233
    1c3c:	f8 e8       	ldi	r31, 0x88	; 136
    1c3e:	de 01       	movw	r26, r28
    1c40:	a6 53       	subi	r26, 0x36	; 54
    1c42:	be 4f       	sbci	r27, 0xFE	; 254
    1c44:	01 90       	ld	r0, Z+
    1c46:	0d 92       	st	X+, r0
    1c48:	9a 95       	dec	r25
    1c4a:	e1 f7       	brne	.-8      	; 0x1c44 <report+0x64>
	const char format_ORI[] = "$S%dORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1c4c:	90 e2       	ldi	r25, 0x20	; 32
    1c4e:	ea e0       	ldi	r30, 0x0A	; 10
    1c50:	f9 e8       	ldi	r31, 0x89	; 137
    1c52:	de 01       	movw	r26, r28
    1c54:	a5 51       	subi	r26, 0x15	; 21
    1c56:	be 4f       	sbci	r27, 0xFE	; 254
    1c58:	01 90       	ld	r0, Z+
    1c5a:	0d 92       	st	X+, r0
    1c5c:	9a 95       	dec	r25
    1c5e:	e1 f7       	brne	.-8      	; 0x1c58 <report+0x78>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1c60:	92 e1       	ldi	r25, 0x12	; 18
    1c62:	ea e2       	ldi	r30, 0x2A	; 42
    1c64:	f9 e8       	ldi	r31, 0x89	; 137
    1c66:	de 01       	movw	r26, r28
    1c68:	a5 5f       	subi	r26, 0xF5	; 245
    1c6a:	bd 4f       	sbci	r27, 0xFD	; 253
    1c6c:	01 90       	ld	r0, Z+
    1c6e:	0d 92       	st	X+, r0
    1c70:	9a 95       	dec	r25
    1c72:	e1 f7       	brne	.-8      	; 0x1c6c <report+0x8c>
	const char format_PNU[] = "$S%dPNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1c74:	91 e3       	ldi	r25, 0x31	; 49
    1c76:	ec e3       	ldi	r30, 0x3C	; 60
    1c78:	f9 e8       	ldi	r31, 0x89	; 137
    1c7a:	de 01       	movw	r26, r28
    1c7c:	a3 5e       	subi	r26, 0xE3	; 227
    1c7e:	bd 4f       	sbci	r27, 0xFD	; 253
    1c80:	01 90       	ld	r0, Z+
    1c82:	0d 92       	st	X+, r0
    1c84:	9a 95       	dec	r25
    1c86:	e1 f7       	brne	.-8      	; 0x1c80 <report+0xa0>
	const char dformat_PN1[] = "left:%c   right:%c";
    1c88:	93 e1       	ldi	r25, 0x13	; 19
    1c8a:	ed e6       	ldi	r30, 0x6D	; 109
    1c8c:	f9 e8       	ldi	r31, 0x89	; 137
    1c8e:	de 01       	movw	r26, r28
    1c90:	a2 5b       	subi	r26, 0xB2	; 178
    1c92:	bd 4f       	sbci	r27, 0xFD	; 253
    1c94:	01 90       	ld	r0, Z+
    1c96:	0d 92       	st	X+, r0
    1c98:	9a 95       	dec	r25
    1c9a:	e1 f7       	brne	.-8      	; 0x1c94 <report+0xb4>
	const char dformat_PN2[] = "shutter:%c  air:%c";
    1c9c:	93 e1       	ldi	r25, 0x13	; 19
    1c9e:	e0 e8       	ldi	r30, 0x80	; 128
    1ca0:	f9 e8       	ldi	r31, 0x89	; 137
    1ca2:	de 01       	movw	r26, r28
    1ca4:	af 59       	subi	r26, 0x9F	; 159
    1ca6:	bd 4f       	sbci	r27, 0xFD	; 253
    1ca8:	01 90       	ld	r0, Z+
    1caa:	0d 92       	st	X+, r0
    1cac:	9a 95       	dec	r25
    1cae:	e1 f7       	brne	.-8      	; 0x1ca8 <report+0xc8>
	const char format_TIM[] = "$S%dTIM,%s,%s,set,%s,boot,%s";
    1cb0:	9d e1       	ldi	r25, 0x1D	; 29
    1cb2:	e3 e9       	ldi	r30, 0x93	; 147
    1cb4:	f9 e8       	ldi	r31, 0x89	; 137
    1cb6:	de 01       	movw	r26, r28
    1cb8:	ac 58       	subi	r26, 0x8C	; 140
    1cba:	bd 4f       	sbci	r27, 0xFD	; 253
    1cbc:	01 90       	ld	r0, Z+
    1cbe:	0d 92       	st	X+, r0
    1cc0:	9a 95       	dec	r25
    1cc2:	e1 f7       	brne	.-8      	; 0x1cbc <report+0xdc>
	const char format_VAC[] = "$S%dVAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1cc4:	99 e2       	ldi	r25, 0x29	; 41
    1cc6:	e0 eb       	ldi	r30, 0xB0	; 176
    1cc8:	f9 e8       	ldi	r31, 0x89	; 137
    1cca:	de 01       	movw	r26, r28
    1ccc:	af 56       	subi	r26, 0x6F	; 111
    1cce:	bd 4f       	sbci	r27, 0xFD	; 253
    1cd0:	01 90       	ld	r0, Z+
    1cd2:	0d 92       	st	X+, r0
    1cd4:	9a 95       	dec	r25
    1cd6:	e1 f7       	brne	.-8      	; 0x1cd0 <report+0xf0>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1cd8:	9d e0       	ldi	r25, 0x0D	; 13
    1cda:	e9 ed       	ldi	r30, 0xD9	; 217
    1cdc:	f9 e8       	ldi	r31, 0x89	; 137
    1cde:	de 01       	movw	r26, r28
    1ce0:	a6 54       	subi	r26, 0x46	; 70
    1ce2:	bd 4f       	sbci	r27, 0xFD	; 253
    1ce4:	01 90       	ld	r0, Z+
    1ce6:	0d 92       	st	X+, r0
    1ce8:	9a 95       	dec	r25
    1cea:	e1 f7       	brne	.-8      	; 0x1ce4 <report+0x104>
	const char format_VER[] = "$S%dVER,%s,%s,%s";
    1cec:	91 e1       	ldi	r25, 0x11	; 17
    1cee:	e6 ee       	ldi	r30, 0xE6	; 230
    1cf0:	f9 e8       	ldi	r31, 0x89	; 137
    1cf2:	de 01       	movw	r26, r28
    1cf4:	a9 53       	subi	r26, 0x39	; 57
    1cf6:	bd 4f       	sbci	r27, 0xFD	; 253
    1cf8:	01 90       	ld	r0, Z+
    1cfa:	0d 92       	st	X+, r0
    1cfc:	9a 95       	dec	r25
    1cfe:	e1 f7       	brne	.-8      	; 0x1cf8 <report+0x118>
	float voltage;							// voltage
	uint16_t current;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum

	switch(pcmd[cstack].cobject) {
    1d00:	08 2f       	mov	r16, r24
    1d02:	10 e0       	ldi	r17, 0x00	; 0
    1d04:	84 e3       	ldi	r24, 0x34	; 52
    1d06:	80 9f       	mul	r24, r16
    1d08:	f0 01       	movw	r30, r0
    1d0a:	81 9f       	mul	r24, r17
    1d0c:	f0 0d       	add	r31, r0
    1d0e:	11 24       	eor	r1, r1
    1d10:	eb 5f       	subi	r30, 0xFB	; 251
    1d12:	f7 4d       	sbci	r31, 0xD7	; 215
    1d14:	e1 81       	ldd	r30, Z+1	; 0x01
    1d16:	8e 2f       	mov	r24, r30
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	e1 54       	subi	r30, 0x41	; 65
    1d1e:	f1 09       	sbc	r31, r1
    1d20:	e6 33       	cpi	r30, 0x36	; 54
    1d22:	f1 05       	cpc	r31, r1
    1d24:	08 f0       	brcs	.+2      	; 0x1d28 <report+0x148>
    1d26:	69 c5       	rjmp	.+2770   	; 0x27fa <report+0xc1a>
    1d28:	ed 58       	subi	r30, 0x8D	; 141
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	0c 94 e4 20 	jmp	0x41c8	; 0x41c8 <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    1d30:	ce 01       	movw	r24, r28
    1d32:	8b 5e       	subi	r24, 0xEB	; 235
    1d34:	9e 4f       	sbci	r25, 0xFE	; 254
    1d36:	0e 94 87 05 	call	0xb0e	; 0xb0e <get_time>
			controller = pcmd[cstack].cobject + 63;
    1d3a:	84 e3       	ldi	r24, 0x34	; 52
    1d3c:	80 9f       	mul	r24, r16
    1d3e:	f0 01       	movw	r30, r0
    1d40:	81 9f       	mul	r24, r17
    1d42:	f0 0d       	add	r31, r0
    1d44:	11 24       	eor	r1, r1
    1d46:	eb 5f       	subi	r30, 0xFB	; 251
    1d48:	f7 4d       	sbci	r31, 0xD7	; 215
    1d4a:	e1 80       	ldd	r14, Z+1	; 0x01
    1d4c:	0f 2e       	mov	r0, r31
    1d4e:	ff e3       	ldi	r31, 0x3F	; 63
    1d50:	ff 2e       	mov	r15, r31
    1d52:	f0 2d       	mov	r31, r0
    1d54:	fe 0c       	add	r15, r14
			retval = get_MOTORFloat(controller, ROBOREADMAINVOLTAGE, &voltage);
    1d56:	ae 01       	movw	r20, r28
    1d58:	48 51       	subi	r20, 0x18	; 24
    1d5a:	5d 4f       	sbci	r21, 0xFD	; 253
    1d5c:	68 e1       	ldi	r22, 0x18	; 24
    1d5e:	8f 2d       	mov	r24, r15
    1d60:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <get_MOTORFloat>
			if (retval == ERROR) {
    1d64:	83 36       	cpi	r24, 0x63	; 99
    1d66:	61 f4       	brne	.+24     	; 0x1d80 <report+0x1a0>
				voltage = -666.0;
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e8       	ldi	r25, 0x80	; 128
    1d6c:	a6 e2       	ldi	r26, 0x26	; 38
    1d6e:	b4 ec       	ldi	r27, 0xC4	; 196
    1d70:	c8 51       	subi	r28, 0x18	; 24
    1d72:	dd 4f       	sbci	r29, 0xFD	; 253
    1d74:	88 83       	st	Y, r24
    1d76:	99 83       	std	Y+1, r25	; 0x01
    1d78:	aa 83       	std	Y+2, r26	; 0x02
    1d7a:	bb 83       	std	Y+3, r27	; 0x03
    1d7c:	c8 5e       	subi	r28, 0xE8	; 232
    1d7e:	d2 40       	sbci	r29, 0x02	; 2
			}
			retval = get_MOTORFloat(controller, ROBOREADTEMPERATURE, &t0);
    1d80:	ae 01       	movw	r20, r28
    1d82:	4c 51       	subi	r20, 0x1C	; 28
    1d84:	5d 4f       	sbci	r21, 0xFD	; 253
    1d86:	62 e5       	ldi	r22, 0x52	; 82
    1d88:	8f 2d       	mov	r24, r15
    1d8a:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <get_MOTORFloat>
			if (retval == ERROR) {
    1d8e:	83 36       	cpi	r24, 0x63	; 99
    1d90:	61 f4       	brne	.+24     	; 0x1daa <report+0x1ca>
				t0 = -666.0;
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	90 e8       	ldi	r25, 0x80	; 128
    1d96:	a6 e2       	ldi	r26, 0x26	; 38
    1d98:	b4 ec       	ldi	r27, 0xC4	; 196
    1d9a:	cc 51       	subi	r28, 0x1C	; 28
    1d9c:	dd 4f       	sbci	r29, 0xFD	; 253
    1d9e:	88 83       	st	Y, r24
    1da0:	99 83       	std	Y+1, r25	; 0x01
    1da2:	aa 83       	std	Y+2, r26	; 0x02
    1da4:	bb 83       	std	Y+3, r27	; 0x03
    1da6:	c4 5e       	subi	r28, 0xE4	; 228
    1da8:	d2 40       	sbci	r29, 0x02	; 2
			}
			sprintf(outbuf, format1_MTR, get_SPECID, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
    1daa:	24 e3       	ldi	r18, 0x34	; 52
    1dac:	20 9f       	mul	r18, r16
    1dae:	c0 01       	movw	r24, r0
    1db0:	21 9f       	mul	r18, r17
    1db2:	90 0d       	add	r25, r0
    1db4:	11 24       	eor	r1, r1
    1db6:	80 5d       	subi	r24, 0xD0	; 208
    1db8:	97 4d       	sbci	r25, 0xD7	; 215
			}
			retval = get_MOTORFloat(controller, ROBOREADTEMPERATURE, &t0);
			if (retval == ERROR) {
				t0 = -666.0;
			}
			sprintf(outbuf, format1_MTR, get_SPECID, currenttime, (char) (controller-63),
    1dba:	cc 51       	subi	r28, 0x1C	; 28
    1dbc:	dd 4f       	sbci	r29, 0xFD	; 253
    1dbe:	68 81       	ld	r22, Y
    1dc0:	c4 5e       	subi	r28, 0xE4	; 228
    1dc2:	d2 40       	sbci	r29, 0x02	; 2
    1dc4:	cb 51       	subi	r28, 0x1B	; 27
    1dc6:	dd 4f       	sbci	r29, 0xFD	; 253
    1dc8:	78 81       	ld	r23, Y
    1dca:	c5 5e       	subi	r28, 0xE5	; 229
    1dcc:	d2 40       	sbci	r29, 0x02	; 2
    1dce:	ca 51       	subi	r28, 0x1A	; 26
    1dd0:	dd 4f       	sbci	r29, 0xFD	; 253
    1dd2:	e8 81       	ld	r30, Y
    1dd4:	c6 5e       	subi	r28, 0xE6	; 230
    1dd6:	d2 40       	sbci	r29, 0x02	; 2
    1dd8:	c9 51       	subi	r28, 0x19	; 25
    1dda:	dd 4f       	sbci	r29, 0xFD	; 253
    1ddc:	f8 81       	ld	r31, Y
    1dde:	c7 5e       	subi	r28, 0xE7	; 231
    1de0:	d2 40       	sbci	r29, 0x02	; 2
    1de2:	c8 51       	subi	r28, 0x18	; 24
    1de4:	dd 4f       	sbci	r29, 0xFD	; 253
    1de6:	28 81       	ld	r18, Y
    1de8:	c8 5e       	subi	r28, 0xE8	; 232
    1dea:	d2 40       	sbci	r29, 0x02	; 2
    1dec:	c7 51       	subi	r28, 0x17	; 23
    1dee:	dd 4f       	sbci	r29, 0xFD	; 253
    1df0:	38 81       	ld	r19, Y
    1df2:	c9 5e       	subi	r28, 0xE9	; 233
    1df4:	d2 40       	sbci	r29, 0x02	; 2
    1df6:	c6 51       	subi	r28, 0x16	; 22
    1df8:	dd 4f       	sbci	r29, 0xFD	; 253
    1dfa:	48 81       	ld	r20, Y
    1dfc:	ca 5e       	subi	r28, 0xEA	; 234
    1dfe:	d2 40       	sbci	r29, 0x02	; 2
    1e00:	c5 51       	subi	r28, 0x15	; 21
    1e02:	dd 4f       	sbci	r29, 0xFD	; 253
    1e04:	58 81       	ld	r21, Y
    1e06:	cb 5e       	subi	r28, 0xEB	; 235
    1e08:	d2 40       	sbci	r29, 0x02	; 2
    1e0a:	a0 91 a8 04 	lds	r26, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1e0e:	a2 ff       	sbrs	r26, 2
    1e10:	03 c0       	rjmp	.+6      	; 0x1e18 <report+0x238>
    1e12:	a2 e0       	ldi	r26, 0x02	; 2
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <report+0x23c>
    1e18:	a1 e0       	ldi	r26, 0x01	; 1
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	9f 93       	push	r25
    1e1e:	8f 93       	push	r24
    1e20:	ff 93       	push	r31
    1e22:	ef 93       	push	r30
    1e24:	7f 93       	push	r23
    1e26:	6f 93       	push	r22
    1e28:	5f 93       	push	r21
    1e2a:	4f 93       	push	r20
    1e2c:	3f 93       	push	r19
    1e2e:	2f 93       	push	r18
    1e30:	1f 92       	push	r1
    1e32:	ef 92       	push	r14
    1e34:	ce 01       	movw	r24, r28
    1e36:	8b 5e       	subi	r24, 0xEB	; 235
    1e38:	9e 4f       	sbci	r25, 0xFE	; 254
    1e3a:	9f 93       	push	r25
    1e3c:	8f 93       	push	r24
    1e3e:	bf 93       	push	r27
    1e40:	af 93       	push	r26
    1e42:	8b 54       	subi	r24, 0x4B	; 75
    1e44:	9f 4f       	sbci	r25, 0xFF	; 255
    1e46:	9f 93       	push	r25
    1e48:	8f 93       	push	r24
    1e4a:	8e 01       	movw	r16, r28
    1e4c:	0f 5f       	subi	r16, 0xFF	; 255
    1e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e50:	1f 93       	push	r17
    1e52:	0f 93       	push	r16
    1e54:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
				voltage, t0, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    1e58:	c8 01       	movw	r24, r16
    1e5a:	0e 94 07 0a 	call	0x140e	; 0x140e <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1e5e:	f8 01       	movw	r30, r16
    1e60:	01 90       	ld	r0, Z+
    1e62:	00 20       	and	r0, r0
    1e64:	e9 f7       	brne	.-6      	; 0x1e60 <report+0x280>
    1e66:	31 97       	sbiw	r30, 0x01	; 1
    1e68:	af 01       	movw	r20, r30
    1e6a:	40 1b       	sub	r20, r16
    1e6c:	51 0b       	sbc	r21, r17
    1e6e:	b8 01       	movw	r22, r16
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>
			break;
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	c5 c4       	rjmp	.+2442   	; 0x2806 <report+0xc26>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	8b 5e       	subi	r24, 0xEB	; 235
    1e80:	9e 4f       	sbci	r25, 0xFE	; 254
    1e82:	0e 94 87 05 	call	0xb0e	; 0xb0e <get_time>
			controller = pcmd[cstack].cobject + 31;
    1e86:	84 e3       	ldi	r24, 0x34	; 52
    1e88:	80 9f       	mul	r24, r16
    1e8a:	f0 01       	movw	r30, r0
    1e8c:	81 9f       	mul	r24, r17
    1e8e:	f0 0d       	add	r31, r0
    1e90:	11 24       	eor	r1, r1
    1e92:	eb 5f       	subi	r30, 0xFB	; 251
    1e94:	f7 4d       	sbci	r31, 0xD7	; 215
    1e96:	81 81       	ldd	r24, Z+1	; 0x01
    1e98:	0f 2e       	mov	r0, r31
    1e9a:	ff e1       	ldi	r31, 0x1F	; 31
    1e9c:	7f 2e       	mov	r7, r31
    1e9e:	f0 2d       	mov	r31, r0
    1ea0:	78 0e       	add	r7, r24
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &encoderValue);
    1ea2:	ae 01       	movw	r20, r28
    1ea4:	48 52       	subi	r20, 0x28	; 40
    1ea6:	5d 4f       	sbci	r21, 0xFD	; 253
    1ea8:	60 e1       	ldi	r22, 0x10	; 16
    1eaa:	87 2d       	mov	r24, r7
    1eac:	0e 94 40 14 	call	0x2880	; 0x2880 <get_MOTOREncoder>
			if (retval == ERROR) {
    1eb0:	83 36       	cpi	r24, 0x63	; 99
    1eb2:	61 f4       	brne	.+24     	; 0x1ecc <report+0x2ec>
				encoderValue = 0x7FFFFFFF;
    1eb4:	8f ef       	ldi	r24, 0xFF	; 255
    1eb6:	9f ef       	ldi	r25, 0xFF	; 255
    1eb8:	af ef       	ldi	r26, 0xFF	; 255
    1eba:	bf e7       	ldi	r27, 0x7F	; 127
    1ebc:	c8 52       	subi	r28, 0x28	; 40
    1ebe:	dd 4f       	sbci	r29, 0xFD	; 253
    1ec0:	88 83       	st	Y, r24
    1ec2:	99 83       	std	Y+1, r25	; 0x01
    1ec4:	aa 83       	std	Y+2, r26	; 0x02
    1ec6:	bb 83       	std	Y+3, r27	; 0x03
    1ec8:	c8 5d       	subi	r28, 0xD8	; 216
    1eca:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronValue = encoderValue/ROBOCOUNTSPERMICRON;
    1ecc:	c8 52       	subi	r28, 0x28	; 40
    1ece:	dd 4f       	sbci	r29, 0xFD	; 253
    1ed0:	68 81       	ld	r22, Y
    1ed2:	79 81       	ldd	r23, Y+1	; 0x01
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed8:	c8 5d       	subi	r28, 0xD8	; 216
    1eda:	d2 40       	sbci	r29, 0x02	; 2
    1edc:	2c e0       	ldi	r18, 0x0C	; 12
    1ede:	31 e0       	ldi	r19, 0x01	; 1
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	50 e0       	ldi	r21, 0x00	; 0
    1ee4:	0e 94 c5 20 	call	0x418a	; 0x418a <__divmodsi4>
    1ee8:	f2 2e       	mov	r15, r18
    1eea:	e3 2e       	mov	r14, r19
    1eec:	d4 2e       	mov	r13, r20
    1eee:	c5 2e       	mov	r12, r21
			retval = get_MOTOREncoder(controller, ROBOREADENCODERSPEED, &encoderSpeed);
    1ef0:	ae 01       	movw	r20, r28
    1ef2:	44 52       	subi	r20, 0x24	; 36
    1ef4:	5d 4f       	sbci	r21, 0xFD	; 253
    1ef6:	62 e1       	ldi	r22, 0x12	; 18
    1ef8:	87 2d       	mov	r24, r7
    1efa:	0e 94 40 14 	call	0x2880	; 0x2880 <get_MOTOREncoder>
			if (retval == ERROR) {
    1efe:	83 36       	cpi	r24, 0x63	; 99
    1f00:	61 f4       	brne	.+24     	; 0x1f1a <report+0x33a>
				encoderSpeed = 0x7FFFFFFF;
    1f02:	8f ef       	ldi	r24, 0xFF	; 255
    1f04:	9f ef       	ldi	r25, 0xFF	; 255
    1f06:	af ef       	ldi	r26, 0xFF	; 255
    1f08:	bf e7       	ldi	r27, 0x7F	; 127
    1f0a:	c4 52       	subi	r28, 0x24	; 36
    1f0c:	dd 4f       	sbci	r29, 0xFD	; 253
    1f0e:	88 83       	st	Y, r24
    1f10:	99 83       	std	Y+1, r25	; 0x01
    1f12:	aa 83       	std	Y+2, r26	; 0x02
    1f14:	bb 83       	std	Y+3, r27	; 0x03
    1f16:	cc 5d       	subi	r28, 0xDC	; 220
    1f18:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronSpeed = encoderSpeed/ROBOCOUNTSPERMICRON;			
    1f1a:	c4 52       	subi	r28, 0x24	; 36
    1f1c:	dd 4f       	sbci	r29, 0xFD	; 253
    1f1e:	68 81       	ld	r22, Y
    1f20:	79 81       	ldd	r23, Y+1	; 0x01
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	9b 81       	ldd	r25, Y+3	; 0x03
    1f26:	cc 5d       	subi	r28, 0xDC	; 220
    1f28:	d2 40       	sbci	r29, 0x02	; 2
    1f2a:	2c e0       	ldi	r18, 0x0C	; 12
    1f2c:	31 e0       	ldi	r19, 0x01	; 1
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	0e 94 c5 20 	call	0x418a	; 0x418a <__divmodsi4>
    1f36:	b2 2e       	mov	r11, r18
    1f38:	a3 2e       	mov	r10, r19
    1f3a:	94 2e       	mov	r9, r20
    1f3c:	85 2e       	mov	r8, r21
			retval = get_MOTORInt32(controller, ROBOREADCURRENT, &icurrents);
    1f3e:	ae 01       	movw	r20, r28
    1f40:	40 52       	subi	r20, 0x20	; 32
    1f42:	5d 4f       	sbci	r21, 0xFD	; 253
    1f44:	61 e3       	ldi	r22, 0x31	; 49
    1f46:	87 2d       	mov	r24, r7
    1f48:	0e 94 6e 15 	call	0x2adc	; 0x2adc <get_MOTORInt32>
			if (retval == ERROR) {
    1f4c:	83 36       	cpi	r24, 0x63	; 99
    1f4e:	61 f4       	brne	.+24     	; 0x1f68 <report+0x388>
				icurrents = 0x7FFFFFFF;
    1f50:	8f ef       	ldi	r24, 0xFF	; 255
    1f52:	9f ef       	ldi	r25, 0xFF	; 255
    1f54:	af ef       	ldi	r26, 0xFF	; 255
    1f56:	bf e7       	ldi	r27, 0x7F	; 127
    1f58:	c0 52       	subi	r28, 0x20	; 32
    1f5a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f5c:	88 83       	st	Y, r24
    1f5e:	99 83       	std	Y+1, r25	; 0x01
    1f60:	aa 83       	std	Y+2, r26	; 0x02
    1f62:	bb 83       	std	Y+3, r27	; 0x03
    1f64:	c0 5e       	subi	r28, 0xE0	; 224
    1f66:	d2 40       	sbci	r29, 0x02	; 2
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
    1f68:	c0 52       	subi	r28, 0x20	; 32
    1f6a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f6c:	88 81       	ld	r24, Y
    1f6e:	99 81       	ldd	r25, Y+1	; 0x01
    1f70:	aa 81       	ldd	r26, Y+2	; 0x02
    1f72:	bb 81       	ldd	r27, Y+3	; 0x03
    1f74:	c0 5e       	subi	r28, 0xE0	; 224
    1f76:	d2 40       	sbci	r29, 0x02	; 2
    1f78:	cd 01       	movw	r24, r26
    1f7a:	aa 27       	eor	r26, r26
    1f7c:	bb 27       	eor	r27, r27
    1f7e:	9c 01       	movw	r18, r24
    1f80:	22 0f       	add	r18, r18
    1f82:	33 1f       	adc	r19, r19
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	82 0f       	add	r24, r18
    1f92:	93 1f       	adc	r25, r19
			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, current, pcmd[cstack].cid);
    1f94:	44 e3       	ldi	r20, 0x34	; 52
    1f96:	40 9f       	mul	r20, r16
    1f98:	90 01       	movw	r18, r0
    1f9a:	41 9f       	mul	r20, r17
    1f9c:	30 0d       	add	r19, r0
    1f9e:	11 24       	eor	r1, r1
    1fa0:	a9 01       	movw	r20, r18
    1fa2:	40 5d       	subi	r20, 0xD0	; 208
    1fa4:	57 4d       	sbci	r21, 0xD7	; 215
			retval = get_MOTORInt32(controller, ROBOREADCURRENT, &icurrents);
			if (retval == ERROR) {
				icurrents = 0x7FFFFFFF;
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
    1fa6:	f9 01       	movw	r30, r18
    1fa8:	eb 5f       	subi	r30, 0xFB	; 251
    1faa:	f7 4d       	sbci	r31, 0xD7	; 215
    1fac:	21 81       	ldd	r18, Z+1	; 0x01
    1fae:	30 91 a8 04 	lds	r19, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1fb2:	32 ff       	sbrs	r19, 2
    1fb4:	03 c0       	rjmp	.+6      	; 0x1fbc <report+0x3dc>
    1fb6:	32 e0       	ldi	r19, 0x02	; 2
    1fb8:	60 e0       	ldi	r22, 0x00	; 0
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <report+0x3e0>
    1fbc:	31 e0       	ldi	r19, 0x01	; 1
    1fbe:	60 e0       	ldi	r22, 0x00	; 0
    1fc0:	5f 93       	push	r21
    1fc2:	4f 93       	push	r20
    1fc4:	9f 93       	push	r25
    1fc6:	8f 93       	push	r24
    1fc8:	8f 92       	push	r8
    1fca:	9f 92       	push	r9
    1fcc:	af 92       	push	r10
    1fce:	bf 92       	push	r11
    1fd0:	cf 92       	push	r12
    1fd2:	df 92       	push	r13
    1fd4:	ef 92       	push	r14
    1fd6:	ff 92       	push	r15
    1fd8:	1f 92       	push	r1
    1fda:	2f 93       	push	r18
    1fdc:	ce 01       	movw	r24, r28
    1fde:	8b 5e       	subi	r24, 0xEB	; 235
    1fe0:	9e 4f       	sbci	r25, 0xFE	; 254
    1fe2:	9f 93       	push	r25
    1fe4:	8f 93       	push	r24
    1fe6:	6f 93       	push	r22
    1fe8:	3f 93       	push	r19
    1fea:	8e 57       	subi	r24, 0x7E	; 126
    1fec:	9f 4f       	sbci	r25, 0xFF	; 255
    1fee:	9f 93       	push	r25
    1ff0:	8f 93       	push	r24
    1ff2:	8e 01       	movw	r16, r28
    1ff4:	0f 5f       	subi	r16, 0xFF	; 255
    1ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff8:	1f 93       	push	r17
    1ffa:	0f 93       	push	r16
    1ffc:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
				micronValue, micronSpeed, current, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    2000:	c8 01       	movw	r24, r16
    2002:	0e 94 07 0a 	call	0x140e	; 0x140e <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2006:	f8 01       	movw	r30, r16
    2008:	01 90       	ld	r0, Z+
    200a:	00 20       	and	r0, r0
    200c:	e9 f7       	brne	.-6      	; 0x2008 <report+0x428>
    200e:	31 97       	sbiw	r30, 0x01	; 1
    2010:	af 01       	movw	r20, r30
    2012:	40 1b       	sub	r20, r16
    2014:	51 0b       	sbc	r21, r17
    2016:	b8 01       	movw	r22, r16
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>
			break;
    201e:	cd bf       	out	0x3d, r28	; 61
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	f1 c3       	rjmp	.+2018   	; 0x2806 <report+0xc26>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	0e 94 02 18 	call	0x3004	; 0x3004 <get_temperature>
    202a:	cc 51       	subi	r28, 0x1C	; 28
    202c:	dd 4f       	sbci	r29, 0xFD	; 253
    202e:	68 83       	st	Y, r22
    2030:	79 83       	std	Y+1, r23	; 0x01
    2032:	8a 83       	std	Y+2, r24	; 0x02
    2034:	9b 83       	std	Y+3, r25	; 0x03
    2036:	c4 5e       	subi	r28, 0xE4	; 228
    2038:	d2 40       	sbci	r29, 0x02	; 2
			h0 = get_humidity(0);
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	0e 94 0a 07 	call	0xe14	; 0xe14 <get_humidity>
    2040:	f6 2e       	mov	r15, r22
    2042:	e7 2e       	mov	r14, r23
    2044:	d8 2e       	mov	r13, r24
    2046:	c9 2e       	mov	r12, r25
			t1 = get_temperature(1);
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	0e 94 02 18 	call	0x3004	; 0x3004 <get_temperature>
    204e:	c8 50       	subi	r28, 0x08	; 8
    2050:	dd 4f       	sbci	r29, 0xFD	; 253
    2052:	68 83       	st	Y, r22
    2054:	c8 5f       	subi	r28, 0xF8	; 248
    2056:	d2 40       	sbci	r29, 0x02	; 2
    2058:	c7 50       	subi	r28, 0x07	; 7
    205a:	dd 4f       	sbci	r29, 0xFD	; 253
    205c:	78 83       	st	Y, r23
    205e:	c9 5f       	subi	r28, 0xF9	; 249
    2060:	d2 40       	sbci	r29, 0x02	; 2
    2062:	c6 50       	subi	r28, 0x06	; 6
    2064:	dd 4f       	sbci	r29, 0xFD	; 253
    2066:	88 83       	st	Y, r24
    2068:	ca 5f       	subi	r28, 0xFA	; 250
    206a:	d2 40       	sbci	r29, 0x02	; 2
    206c:	c5 50       	subi	r28, 0x05	; 5
    206e:	dd 4f       	sbci	r29, 0xFD	; 253
    2070:	98 83       	st	Y, r25
    2072:	cb 5f       	subi	r28, 0xFB	; 251
    2074:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	0e 94 0a 07 	call	0xe14	; 0xe14 <get_humidity>
    207c:	c4 50       	subi	r28, 0x04	; 4
    207e:	dd 4f       	sbci	r29, 0xFD	; 253
    2080:	68 83       	st	Y, r22
    2082:	cc 5f       	subi	r28, 0xFC	; 252
    2084:	d2 40       	sbci	r29, 0x02	; 2
    2086:	c3 50       	subi	r28, 0x03	; 3
    2088:	dd 4f       	sbci	r29, 0xFD	; 253
    208a:	78 83       	st	Y, r23
    208c:	cd 5f       	subi	r28, 0xFD	; 253
    208e:	d2 40       	sbci	r29, 0x02	; 2
    2090:	c2 50       	subi	r28, 0x02	; 2
    2092:	dd 4f       	sbci	r29, 0xFD	; 253
    2094:	88 83       	st	Y, r24
    2096:	ce 5f       	subi	r28, 0xFE	; 254
    2098:	d2 40       	sbci	r29, 0x02	; 2
    209a:	c1 50       	subi	r28, 0x01	; 1
    209c:	dd 4f       	sbci	r29, 0xFD	; 253
    209e:	98 83       	st	Y, r25
    20a0:	cf 5f       	subi	r28, 0xFF	; 255
    20a2:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    20a4:	82 e0       	ldi	r24, 0x02	; 2
    20a6:	0e 94 02 18 	call	0x3004	; 0x3004 <get_temperature>
    20aa:	b6 2e       	mov	r11, r22
    20ac:	a7 2e       	mov	r10, r23
    20ae:	98 2e       	mov	r9, r24
    20b0:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    20b2:	82 e0       	ldi	r24, 0x02	; 2
    20b4:	0e 94 0a 07 	call	0xe14	; 0xe14 <get_humidity>
    20b8:	76 2e       	mov	r7, r22
    20ba:	67 2e       	mov	r6, r23
    20bc:	58 2e       	mov	r5, r24
    20be:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    20c0:	83 e0       	ldi	r24, 0x03	; 3
    20c2:	0e 94 02 18 	call	0x3004	; 0x3004 <get_temperature>
    20c6:	c0 50       	subi	r28, 0x00	; 0
    20c8:	dd 4f       	sbci	r29, 0xFD	; 253
    20ca:	68 83       	st	Y, r22
    20cc:	c0 50       	subi	r28, 0x00	; 0
    20ce:	d3 40       	sbci	r29, 0x03	; 3
    20d0:	cf 5f       	subi	r28, 0xFF	; 255
    20d2:	dc 4f       	sbci	r29, 0xFC	; 252
    20d4:	78 83       	st	Y, r23
    20d6:	c1 50       	subi	r28, 0x01	; 1
    20d8:	d3 40       	sbci	r29, 0x03	; 3
    20da:	38 2e       	mov	r3, r24
    20dc:	29 2e       	mov	r2, r25
			get_time(currenttime);
    20de:	ce 01       	movw	r24, r28
    20e0:	8b 5e       	subi	r24, 0xEB	; 235
    20e2:	9e 4f       	sbci	r25, 0xFE	; 254
    20e4:	0e 94 87 05 	call	0xb0e	; 0xb0e <get_time>
			sprintf(outbuf, format_ENV, get_SPECID, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    20e8:	24 e3       	ldi	r18, 0x34	; 52
    20ea:	20 9f       	mul	r18, r16
    20ec:	c0 01       	movw	r24, r0
    20ee:	21 9f       	mul	r18, r17
    20f0:	90 0d       	add	r25, r0
    20f2:	11 24       	eor	r1, r1
    20f4:	80 5d       	subi	r24, 0xD0	; 208
    20f6:	97 4d       	sbci	r25, 0xD7	; 215
    20f8:	cc 51       	subi	r28, 0x1C	; 28
    20fa:	dd 4f       	sbci	r29, 0xFD	; 253
    20fc:	28 81       	ld	r18, Y
    20fe:	c4 5e       	subi	r28, 0xE4	; 228
    2100:	d2 40       	sbci	r29, 0x02	; 2
    2102:	cb 51       	subi	r28, 0x1B	; 27
    2104:	dd 4f       	sbci	r29, 0xFD	; 253
    2106:	38 81       	ld	r19, Y
    2108:	c5 5e       	subi	r28, 0xE5	; 229
    210a:	d2 40       	sbci	r29, 0x02	; 2
    210c:	ca 51       	subi	r28, 0x1A	; 26
    210e:	dd 4f       	sbci	r29, 0xFD	; 253
    2110:	48 81       	ld	r20, Y
    2112:	c6 5e       	subi	r28, 0xE6	; 230
    2114:	d2 40       	sbci	r29, 0x02	; 2
    2116:	c9 51       	subi	r28, 0x19	; 25
    2118:	dd 4f       	sbci	r29, 0xFD	; 253
    211a:	58 81       	ld	r21, Y
    211c:	c7 5e       	subi	r28, 0xE7	; 231
    211e:	d2 40       	sbci	r29, 0x02	; 2
    2120:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2124:	62 ff       	sbrs	r22, 2
    2126:	03 c0       	rjmp	.+6      	; 0x212e <report+0x54e>
    2128:	62 e0       	ldi	r22, 0x02	; 2
    212a:	70 e0       	ldi	r23, 0x00	; 0
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <report+0x552>
    212e:	61 e0       	ldi	r22, 0x01	; 1
    2130:	70 e0       	ldi	r23, 0x00	; 0
    2132:	9f 93       	push	r25
    2134:	8f 93       	push	r24
    2136:	2f 92       	push	r2
    2138:	3f 92       	push	r3
    213a:	cf 5f       	subi	r28, 0xFF	; 255
    213c:	dc 4f       	sbci	r29, 0xFC	; 252
    213e:	98 81       	ld	r25, Y
    2140:	c1 50       	subi	r28, 0x01	; 1
    2142:	d3 40       	sbci	r29, 0x03	; 3
    2144:	9f 93       	push	r25
    2146:	c0 50       	subi	r28, 0x00	; 0
    2148:	dd 4f       	sbci	r29, 0xFD	; 253
    214a:	88 81       	ld	r24, Y
    214c:	c0 50       	subi	r28, 0x00	; 0
    214e:	d3 40       	sbci	r29, 0x03	; 3
    2150:	8f 93       	push	r24
    2152:	4f 92       	push	r4
    2154:	5f 92       	push	r5
    2156:	6f 92       	push	r6
    2158:	7f 92       	push	r7
    215a:	8f 92       	push	r8
    215c:	9f 92       	push	r9
    215e:	af 92       	push	r10
    2160:	bf 92       	push	r11
    2162:	c1 50       	subi	r28, 0x01	; 1
    2164:	dd 4f       	sbci	r29, 0xFD	; 253
    2166:	98 81       	ld	r25, Y
    2168:	cf 5f       	subi	r28, 0xFF	; 255
    216a:	d2 40       	sbci	r29, 0x02	; 2
    216c:	9f 93       	push	r25
    216e:	c2 50       	subi	r28, 0x02	; 2
    2170:	dd 4f       	sbci	r29, 0xFD	; 253
    2172:	88 81       	ld	r24, Y
    2174:	ce 5f       	subi	r28, 0xFE	; 254
    2176:	d2 40       	sbci	r29, 0x02	; 2
    2178:	8f 93       	push	r24
    217a:	c3 50       	subi	r28, 0x03	; 3
    217c:	dd 4f       	sbci	r29, 0xFD	; 253
    217e:	98 81       	ld	r25, Y
    2180:	cd 5f       	subi	r28, 0xFD	; 253
    2182:	d2 40       	sbci	r29, 0x02	; 2
    2184:	9f 93       	push	r25
    2186:	c4 50       	subi	r28, 0x04	; 4
    2188:	dd 4f       	sbci	r29, 0xFD	; 253
    218a:	88 81       	ld	r24, Y
    218c:	cc 5f       	subi	r28, 0xFC	; 252
    218e:	d2 40       	sbci	r29, 0x02	; 2
    2190:	8f 93       	push	r24
    2192:	c5 50       	subi	r28, 0x05	; 5
    2194:	dd 4f       	sbci	r29, 0xFD	; 253
    2196:	98 81       	ld	r25, Y
    2198:	cb 5f       	subi	r28, 0xFB	; 251
    219a:	d2 40       	sbci	r29, 0x02	; 2
    219c:	9f 93       	push	r25
    219e:	c6 50       	subi	r28, 0x06	; 6
    21a0:	dd 4f       	sbci	r29, 0xFD	; 253
    21a2:	88 81       	ld	r24, Y
    21a4:	ca 5f       	subi	r28, 0xFA	; 250
    21a6:	d2 40       	sbci	r29, 0x02	; 2
    21a8:	8f 93       	push	r24
    21aa:	c7 50       	subi	r28, 0x07	; 7
    21ac:	dd 4f       	sbci	r29, 0xFD	; 253
    21ae:	98 81       	ld	r25, Y
    21b0:	c9 5f       	subi	r28, 0xF9	; 249
    21b2:	d2 40       	sbci	r29, 0x02	; 2
    21b4:	9f 93       	push	r25
    21b6:	c8 50       	subi	r28, 0x08	; 8
    21b8:	dd 4f       	sbci	r29, 0xFD	; 253
    21ba:	88 81       	ld	r24, Y
    21bc:	c8 5f       	subi	r28, 0xF8	; 248
    21be:	d2 40       	sbci	r29, 0x02	; 2
    21c0:	8f 93       	push	r24
    21c2:	cf 92       	push	r12
    21c4:	df 92       	push	r13
    21c6:	ef 92       	push	r14
    21c8:	ff 92       	push	r15
    21ca:	5f 93       	push	r21
    21cc:	4f 93       	push	r20
    21ce:	3f 93       	push	r19
    21d0:	2f 93       	push	r18
    21d2:	ce 01       	movw	r24, r28
    21d4:	8b 5e       	subi	r24, 0xEB	; 235
    21d6:	9e 4f       	sbci	r25, 0xFE	; 254
    21d8:	9f 93       	push	r25
    21da:	8f 93       	push	r24
    21dc:	7f 93       	push	r23
    21de:	6f 93       	push	r22
    21e0:	80 5c       	subi	r24, 0xC0	; 192
    21e2:	9f 4f       	sbci	r25, 0xFF	; 255
    21e4:	9f 93       	push	r25
    21e6:	8f 93       	push	r24
    21e8:	8e 01       	movw	r16, r28
    21ea:	0f 5f       	subi	r16, 0xFF	; 255
    21ec:	1f 4f       	sbci	r17, 0xFF	; 255
    21ee:	1f 93       	push	r17
    21f0:	0f 93       	push	r16
    21f2:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
			checksum_NMEA(outbuf);
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	c8 01       	movw	r24, r16
    21fc:	0e 94 07 0a 	call	0x140e	; 0x140e <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2200:	f8 01       	movw	r30, r16
    2202:	01 90       	ld	r0, Z+
    2204:	00 20       	and	r0, r0
    2206:	e9 f7       	brne	.-6      	; 0x2202 <report+0x622>
    2208:	31 97       	sbiw	r30, 0x01	; 1
    220a:	af 01       	movw	r20, r30
    220c:	40 1b       	sub	r20, r16
    220e:	51 0b       	sbc	r21, r17
    2210:	b8 01       	movw	r22, r16
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>
			writestr_OLED(1, "Temp & Humidity", 1);
    2218:	41 e0       	ldi	r20, 0x01	; 1
    221a:	66 e1       	ldi	r22, 0x16	; 22
    221c:	78 e8       	ldi	r23, 0x88	; 136
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	0e 94 22 0b 	call	0x1644	; 0x1644 <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    2224:	cc 51       	subi	r28, 0x1C	; 28
    2226:	dd 4f       	sbci	r29, 0xFD	; 253
    2228:	b8 80       	ld	r11, Y
    222a:	c4 5e       	subi	r28, 0xE4	; 228
    222c:	d2 40       	sbci	r29, 0x02	; 2
    222e:	cb 51       	subi	r28, 0x1B	; 27
    2230:	dd 4f       	sbci	r29, 0xFD	; 253
    2232:	a8 80       	ld	r10, Y
    2234:	c5 5e       	subi	r28, 0xE5	; 229
    2236:	d2 40       	sbci	r29, 0x02	; 2
    2238:	ca 51       	subi	r28, 0x1A	; 26
    223a:	dd 4f       	sbci	r29, 0xFD	; 253
    223c:	98 80       	ld	r9, Y
    223e:	c6 5e       	subi	r28, 0xE6	; 230
    2240:	d2 40       	sbci	r29, 0x02	; 2
    2242:	c9 51       	subi	r28, 0x19	; 25
    2244:	dd 4f       	sbci	r29, 0xFD	; 253
    2246:	88 80       	ld	r8, Y
    2248:	c7 5e       	subi	r28, 0xE7	; 231
    224a:	d2 40       	sbci	r29, 0x02	; 2
    224c:	26 e6       	ldi	r18, 0x66	; 102
    224e:	36 e6       	ldi	r19, 0x66	; 102
    2250:	46 ee       	ldi	r20, 0xE6	; 230
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	6b 2d       	mov	r22, r11
    2256:	7a 2d       	mov	r23, r10
    2258:	89 2d       	mov	r24, r9
    225a:	98 2d       	mov	r25, r8
    225c:	0e 94 c7 1c 	call	0x398e	; 0x398e <__mulsf3>
    2260:	cf 92       	push	r12
    2262:	df 92       	push	r13
    2264:	ef 92       	push	r14
    2266:	ff 92       	push	r15
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	52 e4       	ldi	r21, 0x42	; 66
    2270:	0e 94 2d 1b 	call	0x365a	; 0x365a <__addsf3>
    2274:	9f 93       	push	r25
    2276:	8f 93       	push	r24
    2278:	7f 93       	push	r23
    227a:	6f 93       	push	r22
    227c:	8f 92       	push	r8
    227e:	9f 92       	push	r9
    2280:	af 92       	push	r10
    2282:	bf 92       	push	r11
    2284:	86 e2       	ldi	r24, 0x26	; 38
    2286:	98 e8       	ldi	r25, 0x88	; 136
    2288:	9f 93       	push	r25
    228a:	8f 93       	push	r24
    228c:	1f 93       	push	r17
    228e:	0f 93       	push	r16
    2290:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2294:	42 e0       	ldi	r20, 0x02	; 2
    2296:	b8 01       	movw	r22, r16
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	0e 94 22 0b 	call	0x1644	; 0x1644 <writestr_OLED>
			break;
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	de bf       	out	0x3e, r29	; 62
    22a2:	b1 c2       	rjmp	.+1378   	; 0x2806 <report+0xc26>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    22a4:	ae 01       	movw	r20, r28
    22a6:	4c 50       	subi	r20, 0x0C	; 12
    22a8:	5d 4f       	sbci	r21, 0xFD	; 253
    22aa:	be 01       	movw	r22, r28
    22ac:	60 51       	subi	r22, 0x10	; 16
    22ae:	7d 4f       	sbci	r23, 0xFD	; 253
    22b0:	ce 01       	movw	r24, r28
    22b2:	84 51       	subi	r24, 0x14	; 20
    22b4:	9d 4f       	sbci	r25, 0xFD	; 253
    22b6:	0e 94 13 09 	call	0x1226	; 0x1226 <get_orientation>
			get_time(currenttime);
    22ba:	ce 01       	movw	r24, r28
    22bc:	8b 5e       	subi	r24, 0xEB	; 235
    22be:	9e 4f       	sbci	r25, 0xFE	; 254
    22c0:	0e 94 87 05 	call	0xb0e	; 0xb0e <get_time>
			sprintf(outbuf, format_ORI, get_SPECID, currenttime, x, y, z, pcmd[cstack].cid);
    22c4:	24 e3       	ldi	r18, 0x34	; 52
    22c6:	20 9f       	mul	r18, r16
    22c8:	c0 01       	movw	r24, r0
    22ca:	21 9f       	mul	r18, r17
    22cc:	90 0d       	add	r25, r0
    22ce:	11 24       	eor	r1, r1
    22d0:	80 5d       	subi	r24, 0xD0	; 208
    22d2:	97 4d       	sbci	r25, 0xD7	; 215
    22d4:	cc 50       	subi	r28, 0x0C	; 12
    22d6:	dd 4f       	sbci	r29, 0xFD	; 253
    22d8:	a8 81       	ld	r26, Y
    22da:	c4 5f       	subi	r28, 0xF4	; 244
    22dc:	d2 40       	sbci	r29, 0x02	; 2
    22de:	cb 50       	subi	r28, 0x0B	; 11
    22e0:	dd 4f       	sbci	r29, 0xFD	; 253
    22e2:	b8 81       	ld	r27, Y
    22e4:	c5 5f       	subi	r28, 0xF5	; 245
    22e6:	d2 40       	sbci	r29, 0x02	; 2
    22e8:	ca 50       	subi	r28, 0x0A	; 10
    22ea:	dd 4f       	sbci	r29, 0xFD	; 253
    22ec:	18 81       	ld	r17, Y
    22ee:	c6 5f       	subi	r28, 0xF6	; 246
    22f0:	d2 40       	sbci	r29, 0x02	; 2
    22f2:	c9 50       	subi	r28, 0x09	; 9
    22f4:	dd 4f       	sbci	r29, 0xFD	; 253
    22f6:	08 81       	ld	r16, Y
    22f8:	c7 5f       	subi	r28, 0xF7	; 247
    22fa:	d2 40       	sbci	r29, 0x02	; 2
    22fc:	c0 51       	subi	r28, 0x10	; 16
    22fe:	dd 4f       	sbci	r29, 0xFD	; 253
    2300:	68 81       	ld	r22, Y
    2302:	c0 5f       	subi	r28, 0xF0	; 240
    2304:	d2 40       	sbci	r29, 0x02	; 2
    2306:	cf 50       	subi	r28, 0x0F	; 15
    2308:	dd 4f       	sbci	r29, 0xFD	; 253
    230a:	78 81       	ld	r23, Y
    230c:	c1 5f       	subi	r28, 0xF1	; 241
    230e:	d2 40       	sbci	r29, 0x02	; 2
    2310:	ce 50       	subi	r28, 0x0E	; 14
    2312:	dd 4f       	sbci	r29, 0xFD	; 253
    2314:	e8 81       	ld	r30, Y
    2316:	c2 5f       	subi	r28, 0xF2	; 242
    2318:	d2 40       	sbci	r29, 0x02	; 2
    231a:	cd 50       	subi	r28, 0x0D	; 13
    231c:	dd 4f       	sbci	r29, 0xFD	; 253
    231e:	f8 81       	ld	r31, Y
    2320:	c3 5f       	subi	r28, 0xF3	; 243
    2322:	d2 40       	sbci	r29, 0x02	; 2
    2324:	c4 51       	subi	r28, 0x14	; 20
    2326:	dd 4f       	sbci	r29, 0xFD	; 253
    2328:	28 81       	ld	r18, Y
    232a:	cc 5e       	subi	r28, 0xEC	; 236
    232c:	d2 40       	sbci	r29, 0x02	; 2
    232e:	c3 51       	subi	r28, 0x13	; 19
    2330:	dd 4f       	sbci	r29, 0xFD	; 253
    2332:	38 81       	ld	r19, Y
    2334:	cd 5e       	subi	r28, 0xED	; 237
    2336:	d2 40       	sbci	r29, 0x02	; 2
    2338:	c2 51       	subi	r28, 0x12	; 18
    233a:	dd 4f       	sbci	r29, 0xFD	; 253
    233c:	48 81       	ld	r20, Y
    233e:	ce 5e       	subi	r28, 0xEE	; 238
    2340:	d2 40       	sbci	r29, 0x02	; 2
    2342:	c1 51       	subi	r28, 0x11	; 17
    2344:	dd 4f       	sbci	r29, 0xFD	; 253
    2346:	58 81       	ld	r21, Y
    2348:	cf 5e       	subi	r28, 0xEF	; 239
    234a:	d2 40       	sbci	r29, 0x02	; 2
    234c:	f0 90 a8 04 	lds	r15, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2350:	f2 fe       	sbrs	r15, 2
    2352:	05 c0       	rjmp	.+10     	; 0x235e <report+0x77e>
    2354:	68 94       	set
    2356:	ff 24       	eor	r15, r15
    2358:	f1 f8       	bld	r15, 1
    235a:	e1 2c       	mov	r14, r1
    235c:	03 c0       	rjmp	.+6      	; 0x2364 <report+0x784>
    235e:	ff 24       	eor	r15, r15
    2360:	f3 94       	inc	r15
    2362:	e1 2c       	mov	r14, r1
    2364:	9f 93       	push	r25
    2366:	8f 93       	push	r24
    2368:	0f 93       	push	r16
    236a:	1f 93       	push	r17
    236c:	bf 93       	push	r27
    236e:	af 93       	push	r26
    2370:	ff 93       	push	r31
    2372:	ef 93       	push	r30
    2374:	7f 93       	push	r23
    2376:	6f 93       	push	r22
    2378:	5f 93       	push	r21
    237a:	4f 93       	push	r20
    237c:	3f 93       	push	r19
    237e:	2f 93       	push	r18
    2380:	ce 01       	movw	r24, r28
    2382:	8b 5e       	subi	r24, 0xEB	; 235
    2384:	9e 4f       	sbci	r25, 0xFE	; 254
    2386:	9f 93       	push	r25
    2388:	8f 93       	push	r24
    238a:	ef 92       	push	r14
    238c:	ff 92       	push	r15
    238e:	8a 52       	subi	r24, 0x2A	; 42
    2390:	9f 4f       	sbci	r25, 0xFF	; 255
    2392:	9f 93       	push	r25
    2394:	8f 93       	push	r24
    2396:	8e 01       	movw	r16, r28
    2398:	0f 5f       	subi	r16, 0xFF	; 255
    239a:	1f 4f       	sbci	r17, 0xFF	; 255
    239c:	1f 93       	push	r17
    239e:	0f 93       	push	r16
    23a0:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
			checksum_NMEA(outbuf);
    23a4:	c8 01       	movw	r24, r16
    23a6:	0e 94 07 0a 	call	0x140e	; 0x140e <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    23aa:	f8 01       	movw	r30, r16
    23ac:	01 90       	ld	r0, Z+
    23ae:	00 20       	and	r0, r0
    23b0:	e9 f7       	brne	.-6      	; 0x23ac <report+0x7cc>
    23b2:	31 97       	sbiw	r30, 0x01	; 1
    23b4:	af 01       	movw	r20, r30
    23b6:	40 1b       	sub	r20, r16
    23b8:	51 0b       	sbc	r21, r17
    23ba:	b8 01       	movw	r22, r16
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>
			writestr_OLED(1, "Orientation", 1);
    23c2:	41 e0       	ldi	r20, 0x01	; 1
    23c4:	6c e3       	ldi	r22, 0x3C	; 60
    23c6:	78 e8       	ldi	r23, 0x88	; 136
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	0e 94 22 0b 	call	0x1644	; 0x1644 <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    23ce:	c9 50       	subi	r28, 0x09	; 9
    23d0:	dd 4f       	sbci	r29, 0xFD	; 253
    23d2:	88 81       	ld	r24, Y
    23d4:	c7 5f       	subi	r28, 0xF7	; 247
    23d6:	d2 40       	sbci	r29, 0x02	; 2
    23d8:	8f 93       	push	r24
    23da:	ca 50       	subi	r28, 0x0A	; 10
    23dc:	dd 4f       	sbci	r29, 0xFD	; 253
    23de:	88 81       	ld	r24, Y
    23e0:	c6 5f       	subi	r28, 0xF6	; 246
    23e2:	d2 40       	sbci	r29, 0x02	; 2
    23e4:	8f 93       	push	r24
    23e6:	cb 50       	subi	r28, 0x0B	; 11
    23e8:	dd 4f       	sbci	r29, 0xFD	; 253
    23ea:	88 81       	ld	r24, Y
    23ec:	c5 5f       	subi	r28, 0xF5	; 245
    23ee:	d2 40       	sbci	r29, 0x02	; 2
    23f0:	8f 93       	push	r24
    23f2:	cc 50       	subi	r28, 0x0C	; 12
    23f4:	dd 4f       	sbci	r29, 0xFD	; 253
    23f6:	88 81       	ld	r24, Y
    23f8:	c4 5f       	subi	r28, 0xF4	; 244
    23fa:	d2 40       	sbci	r29, 0x02	; 2
    23fc:	8f 93       	push	r24
    23fe:	cd 50       	subi	r28, 0x0D	; 13
    2400:	dd 4f       	sbci	r29, 0xFD	; 253
    2402:	88 81       	ld	r24, Y
    2404:	c3 5f       	subi	r28, 0xF3	; 243
    2406:	d2 40       	sbci	r29, 0x02	; 2
    2408:	8f 93       	push	r24
    240a:	ce 50       	subi	r28, 0x0E	; 14
    240c:	dd 4f       	sbci	r29, 0xFD	; 253
    240e:	88 81       	ld	r24, Y
    2410:	c2 5f       	subi	r28, 0xF2	; 242
    2412:	d2 40       	sbci	r29, 0x02	; 2
    2414:	8f 93       	push	r24
    2416:	cf 50       	subi	r28, 0x0F	; 15
    2418:	dd 4f       	sbci	r29, 0xFD	; 253
    241a:	88 81       	ld	r24, Y
    241c:	c1 5f       	subi	r28, 0xF1	; 241
    241e:	d2 40       	sbci	r29, 0x02	; 2
    2420:	8f 93       	push	r24
    2422:	c0 51       	subi	r28, 0x10	; 16
    2424:	dd 4f       	sbci	r29, 0xFD	; 253
    2426:	88 81       	ld	r24, Y
    2428:	c0 5f       	subi	r28, 0xF0	; 240
    242a:	d2 40       	sbci	r29, 0x02	; 2
    242c:	8f 93       	push	r24
    242e:	c1 51       	subi	r28, 0x11	; 17
    2430:	dd 4f       	sbci	r29, 0xFD	; 253
    2432:	88 81       	ld	r24, Y
    2434:	cf 5e       	subi	r28, 0xEF	; 239
    2436:	d2 40       	sbci	r29, 0x02	; 2
    2438:	8f 93       	push	r24
    243a:	c2 51       	subi	r28, 0x12	; 18
    243c:	dd 4f       	sbci	r29, 0xFD	; 253
    243e:	88 81       	ld	r24, Y
    2440:	ce 5e       	subi	r28, 0xEE	; 238
    2442:	d2 40       	sbci	r29, 0x02	; 2
    2444:	8f 93       	push	r24
    2446:	c3 51       	subi	r28, 0x13	; 19
    2448:	dd 4f       	sbci	r29, 0xFD	; 253
    244a:	88 81       	ld	r24, Y
    244c:	cd 5e       	subi	r28, 0xED	; 237
    244e:	d2 40       	sbci	r29, 0x02	; 2
    2450:	8f 93       	push	r24
    2452:	c4 51       	subi	r28, 0x14	; 20
    2454:	dd 4f       	sbci	r29, 0xFD	; 253
    2456:	88 81       	ld	r24, Y
    2458:	cc 5e       	subi	r28, 0xEC	; 236
    245a:	d2 40       	sbci	r29, 0x02	; 2
    245c:	8f 93       	push	r24
    245e:	ce 01       	movw	r24, r28
    2460:	85 5f       	subi	r24, 0xF5	; 245
    2462:	9d 4f       	sbci	r25, 0xFD	; 253
    2464:	9f 93       	push	r25
    2466:	8f 93       	push	r24
    2468:	1f 93       	push	r17
    246a:	0f 93       	push	r16
    246c:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	42 e0       	ldi	r20, 0x02	; 2
    2476:	b8 01       	movw	r22, r16
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	0e 94 22 0b 	call	0x1644	; 0x1644 <writestr_OLED>
			break;
    247e:	c3 c1       	rjmp	.+902    	; 0x2806 <report+0xc26>

		case 'p':
			get_time(currenttime);
    2480:	ce 01       	movw	r24, r28
    2482:	8b 5e       	subi	r24, 0xEB	; 235
    2484:	9e 4f       	sbci	r25, 0xFE	; 254
    2486:	0e 94 87 05 	call	0xb0e	; 0xb0e <get_time>
			read_PNEUSENSORS(&shutter, &left, &right, &air);
    248a:	9e 01       	movw	r18, r28
    248c:	2c 5a       	subi	r18, 0xAC	; 172
    248e:	3e 4f       	sbci	r19, 0xFE	; 254
    2490:	ae 01       	movw	r20, r28
    2492:	4d 5a       	subi	r20, 0xAD	; 173
    2494:	5e 4f       	sbci	r21, 0xFE	; 254
    2496:	be 01       	movw	r22, r28
    2498:	6e 5a       	subi	r22, 0xAE	; 174
    249a:	7e 4f       	sbci	r23, 0xFE	; 254
    249c:	ce 01       	movw	r24, r28
    249e:	8f 5a       	subi	r24, 0xAF	; 175
    24a0:	9e 4f       	sbci	r25, 0xFE	; 254
    24a2:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <read_PNEUSENSORS>
			sprintf(outbuf, format_PNU, get_SPECID, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    24a6:	24 e3       	ldi	r18, 0x34	; 52
    24a8:	20 9f       	mul	r18, r16
    24aa:	c0 01       	movw	r24, r0
    24ac:	21 9f       	mul	r18, r17
    24ae:	90 0d       	add	r25, r0
    24b0:	11 24       	eor	r1, r1
    24b2:	80 5d       	subi	r24, 0xD0	; 208
    24b4:	97 4d       	sbci	r25, 0xD7	; 215
    24b6:	cc 5a       	subi	r28, 0xAC	; 172
    24b8:	de 4f       	sbci	r29, 0xFE	; 254
    24ba:	58 81       	ld	r21, Y
    24bc:	c4 55       	subi	r28, 0x54	; 84
    24be:	d1 40       	sbci	r29, 0x01	; 1
    24c0:	cd 5a       	subi	r28, 0xAD	; 173
    24c2:	de 4f       	sbci	r29, 0xFE	; 254
    24c4:	48 81       	ld	r20, Y
    24c6:	c3 55       	subi	r28, 0x53	; 83
    24c8:	d1 40       	sbci	r29, 0x01	; 1
    24ca:	ce 5a       	subi	r28, 0xAE	; 174
    24cc:	de 4f       	sbci	r29, 0xFE	; 254
    24ce:	38 81       	ld	r19, Y
    24d0:	c2 55       	subi	r28, 0x52	; 82
    24d2:	d1 40       	sbci	r29, 0x01	; 1
    24d4:	cf 5a       	subi	r28, 0xAF	; 175
    24d6:	de 4f       	sbci	r29, 0xFE	; 254
    24d8:	28 81       	ld	r18, Y
    24da:	c1 55       	subi	r28, 0x51	; 81
    24dc:	d1 40       	sbci	r29, 0x01	; 1
    24de:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    24e2:	62 ff       	sbrs	r22, 2
    24e4:	03 c0       	rjmp	.+6      	; 0x24ec <report+0x90c>
    24e6:	62 e0       	ldi	r22, 0x02	; 2
    24e8:	70 e0       	ldi	r23, 0x00	; 0
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <report+0x910>
    24ec:	61 e0       	ldi	r22, 0x01	; 1
    24ee:	70 e0       	ldi	r23, 0x00	; 0
    24f0:	9f 93       	push	r25
    24f2:	8f 93       	push	r24
    24f4:	1f 92       	push	r1
    24f6:	5f 93       	push	r21
    24f8:	1f 92       	push	r1
    24fa:	4f 93       	push	r20
    24fc:	1f 92       	push	r1
    24fe:	3f 93       	push	r19
    2500:	1f 92       	push	r1
    2502:	2f 93       	push	r18
    2504:	ce 01       	movw	r24, r28
    2506:	8b 5e       	subi	r24, 0xEB	; 235
    2508:	9e 4f       	sbci	r25, 0xFE	; 254
    250a:	9f 93       	push	r25
    250c:	8f 93       	push	r24
    250e:	7f 93       	push	r23
    2510:	6f 93       	push	r22
    2512:	88 5f       	subi	r24, 0xF8	; 248
    2514:	9e 4f       	sbci	r25, 0xFE	; 254
    2516:	9f 93       	push	r25
    2518:	8f 93       	push	r24
    251a:	8e 01       	movw	r16, r28
    251c:	0f 5f       	subi	r16, 0xFF	; 255
    251e:	1f 4f       	sbci	r17, 0xFF	; 255
    2520:	1f 93       	push	r17
    2522:	0f 93       	push	r16
    2524:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
			checksum_NMEA(outbuf);
    2528:	c8 01       	movw	r24, r16
    252a:	0e 94 07 0a 	call	0x140e	; 0x140e <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    252e:	f8 01       	movw	r30, r16
    2530:	01 90       	ld	r0, Z+
    2532:	00 20       	and	r0, r0
    2534:	e9 f7       	brne	.-6      	; 0x2530 <report+0x950>
    2536:	31 97       	sbiw	r30, 0x01	; 1
    2538:	af 01       	movw	r20, r30
    253a:	40 1b       	sub	r20, r16
    253c:	51 0b       	sbc	r21, r17
    253e:	b8 01       	movw	r22, r16
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>
			sprintf(outbuf, dformat_PN1, left, right);
    2546:	cd 5a       	subi	r28, 0xAD	; 173
    2548:	de 4f       	sbci	r29, 0xFE	; 254
    254a:	88 81       	ld	r24, Y
    254c:	c3 55       	subi	r28, 0x53	; 83
    254e:	d1 40       	sbci	r29, 0x01	; 1
    2550:	1f 92       	push	r1
    2552:	8f 93       	push	r24
    2554:	ce 5a       	subi	r28, 0xAE	; 174
    2556:	de 4f       	sbci	r29, 0xFE	; 254
    2558:	88 81       	ld	r24, Y
    255a:	c2 55       	subi	r28, 0x52	; 82
    255c:	d1 40       	sbci	r29, 0x01	; 1
    255e:	1f 92       	push	r1
    2560:	8f 93       	push	r24
    2562:	ce 01       	movw	r24, r28
    2564:	82 5b       	subi	r24, 0xB2	; 178
    2566:	9d 4f       	sbci	r25, 0xFD	; 253
    2568:	9f 93       	push	r25
    256a:	8f 93       	push	r24
    256c:	1f 93       	push	r17
    256e:	0f 93       	push	r16
    2570:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
			writestr_OLED(1, outbuf, 1);
    2574:	41 e0       	ldi	r20, 0x01	; 1
    2576:	b8 01       	movw	r22, r16
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	0e 94 22 0b 	call	0x1644	; 0x1644 <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    257e:	cc 5a       	subi	r28, 0xAC	; 172
    2580:	de 4f       	sbci	r29, 0xFE	; 254
    2582:	88 81       	ld	r24, Y
    2584:	c4 55       	subi	r28, 0x54	; 84
    2586:	d1 40       	sbci	r29, 0x01	; 1
    2588:	1f 92       	push	r1
    258a:	8f 93       	push	r24
    258c:	cf 5a       	subi	r28, 0xAF	; 175
    258e:	de 4f       	sbci	r29, 0xFE	; 254
    2590:	88 81       	ld	r24, Y
    2592:	c1 55       	subi	r28, 0x51	; 81
    2594:	d1 40       	sbci	r29, 0x01	; 1
    2596:	1f 92       	push	r1
    2598:	8f 93       	push	r24
    259a:	ce 01       	movw	r24, r28
    259c:	8f 59       	subi	r24, 0x9F	; 159
    259e:	9d 4f       	sbci	r25, 0xFD	; 253
    25a0:	9f 93       	push	r25
    25a2:	8f 93       	push	r24
    25a4:	1f 93       	push	r17
    25a6:	0f 93       	push	r16
    25a8:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
			writestr_OLED(1, outbuf, 2);
    25ac:	cd bf       	out	0x3d, r28	; 61
    25ae:	de bf       	out	0x3e, r29	; 62
    25b0:	42 e0       	ldi	r20, 0x02	; 2
    25b2:	b8 01       	movw	r22, r16
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	0e 94 22 0b 	call	0x1644	; 0x1644 <writestr_OLED>
			break;
    25ba:	25 c1       	rjmp	.+586    	; 0x2806 <report+0xc26>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    25bc:	ce 01       	movw	r24, r28
    25be:	8b 5e       	subi	r24, 0xEB	; 235
    25c0:	9e 4f       	sbci	r25, 0xFE	; 254
    25c2:	0e 94 87 05 	call	0xb0e	; 0xb0e <get_time>
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
    25c6:	24 e1       	ldi	r18, 0x14	; 20
    25c8:	ae 01       	movw	r20, r28
    25ca:	47 5d       	subi	r20, 0xD7	; 215
    25cc:	5e 4f       	sbci	r21, 0xFE	; 254
    25ce:	60 e0       	ldi	r22, 0x00	; 0
    25d0:	70 e0       	ldi	r23, 0x00	; 0
    25d2:	80 e5       	ldi	r24, 0x50	; 80
    25d4:	0e 94 96 06 	call	0xd2c	; 0xd2c <read_FRAM>
			get_BOOTTIME(boottime);
    25d8:	ce 01       	movw	r24, r28
    25da:	83 5c       	subi	r24, 0xC3	; 195
    25dc:	9e 4f       	sbci	r25, 0xFE	; 254
    25de:	0e 94 03 06 	call	0xc06	; 0xc06 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    25e2:	24 e3       	ldi	r18, 0x34	; 52
    25e4:	20 9f       	mul	r18, r16
    25e6:	c0 01       	movw	r24, r0
    25e8:	21 9f       	mul	r18, r17
    25ea:	90 0d       	add	r25, r0
    25ec:	11 24       	eor	r1, r1
    25ee:	80 5d       	subi	r24, 0xD0	; 208
    25f0:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
    25f2:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    25f6:	22 ff       	sbrs	r18, 2
    25f8:	03 c0       	rjmp	.+6      	; 0x2600 <report+0xa20>
    25fa:	22 e0       	ldi	r18, 0x02	; 2
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	02 c0       	rjmp	.+4      	; 0x2604 <report+0xa24>
    2600:	21 e0       	ldi	r18, 0x01	; 1
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	9f 93       	push	r25
    2606:	8f 93       	push	r24
    2608:	ce 01       	movw	r24, r28
    260a:	83 5c       	subi	r24, 0xC3	; 195
    260c:	9e 4f       	sbci	r25, 0xFE	; 254
    260e:	9f 93       	push	r25
    2610:	8f 93       	push	r24
    2612:	44 97       	sbiw	r24, 0x14	; 20
    2614:	9f 93       	push	r25
    2616:	8f 93       	push	r24
    2618:	8e 01       	movw	r16, r28
    261a:	0b 5e       	subi	r16, 0xEB	; 235
    261c:	1e 4f       	sbci	r17, 0xFE	; 254
    261e:	1f 93       	push	r17
    2620:	0f 93       	push	r16
    2622:	3f 93       	push	r19
    2624:	2f 93       	push	r18
    2626:	85 5b       	subi	r24, 0xB5	; 181
    2628:	9e 4f       	sbci	r25, 0xFE	; 254
    262a:	9f 93       	push	r25
    262c:	8f 93       	push	r24
    262e:	83 57       	subi	r24, 0x73	; 115
    2630:	92 40       	sbci	r25, 0x02	; 2
    2632:	7c 01       	movw	r14, r24
    2634:	9f 93       	push	r25
    2636:	8f 93       	push	r24
    2638:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    263c:	c7 01       	movw	r24, r14
    263e:	0e 94 07 0a 	call	0x140e	; 0x140e <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2642:	f7 01       	movw	r30, r14
    2644:	01 90       	ld	r0, Z+
    2646:	00 20       	and	r0, r0
    2648:	e9 f7       	brne	.-6      	; 0x2644 <report+0xa64>
    264a:	31 97       	sbiw	r30, 0x01	; 1
    264c:	af 01       	movw	r20, r30
    264e:	4e 19       	sub	r20, r14
    2650:	5f 09       	sbc	r21, r15
    2652:	b7 01       	movw	r22, r14
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>
			writestr_OLED(1, "Time", 1);
    265a:	41 e0       	ldi	r20, 0x01	; 1
    265c:	68 e4       	ldi	r22, 0x48	; 72
    265e:	78 e8       	ldi	r23, 0x88	; 136
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	0e 94 22 0b 	call	0x1644	; 0x1644 <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    2666:	b8 01       	movw	r22, r16
    2668:	65 5f       	subi	r22, 0xF5	; 245
    266a:	7f 4f       	sbci	r23, 0xFF	; 255
    266c:	42 e0       	ldi	r20, 0x02	; 2
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	0e 94 22 0b 	call	0x1644	; 0x1644 <writestr_OLED>
			break;
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	c6 c0       	rjmp	.+396    	; 0x2806 <report+0xc26>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <read_ionpump>
    2680:	f6 2e       	mov	r15, r22
    2682:	e7 2e       	mov	r14, r23
    2684:	d8 2e       	mov	r13, r24
    2686:	c9 2e       	mov	r12, r25
			bluvac = read_ionpump(BLUEPUMP);
    2688:	82 e0       	ldi	r24, 0x02	; 2
    268a:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <read_ionpump>
    268e:	b6 2e       	mov	r11, r22
    2690:	a7 2e       	mov	r10, r23
    2692:	98 2e       	mov	r9, r24
    2694:	89 2e       	mov	r8, r25
			get_time(currenttime);
    2696:	ce 01       	movw	r24, r28
    2698:	8b 5e       	subi	r24, 0xEB	; 235
    269a:	9e 4f       	sbci	r25, 0xFE	; 254
    269c:	0e 94 87 05 	call	0xb0e	; 0xb0e <get_time>
			sprintf(outbuf, format_VAC, get_SPECID, currenttime, redvac, bluvac, pcmd[cstack].cid);
    26a0:	24 e3       	ldi	r18, 0x34	; 52
    26a2:	20 9f       	mul	r18, r16
    26a4:	c0 01       	movw	r24, r0
    26a6:	21 9f       	mul	r18, r17
    26a8:	90 0d       	add	r25, r0
    26aa:	11 24       	eor	r1, r1
    26ac:	80 5d       	subi	r24, 0xD0	; 208
    26ae:	97 4d       	sbci	r25, 0xD7	; 215
    26b0:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    26b4:	22 ff       	sbrs	r18, 2
    26b6:	03 c0       	rjmp	.+6      	; 0x26be <report+0xade>
    26b8:	22 e0       	ldi	r18, 0x02	; 2
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	02 c0       	rjmp	.+4      	; 0x26c2 <report+0xae2>
    26be:	21 e0       	ldi	r18, 0x01	; 1
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	9f 93       	push	r25
    26c4:	8f 93       	push	r24
    26c6:	8f 92       	push	r8
    26c8:	9f 92       	push	r9
    26ca:	af 92       	push	r10
    26cc:	bf 92       	push	r11
    26ce:	cf 92       	push	r12
    26d0:	df 92       	push	r13
    26d2:	ef 92       	push	r14
    26d4:	ff 92       	push	r15
    26d6:	ce 01       	movw	r24, r28
    26d8:	8b 5e       	subi	r24, 0xEB	; 235
    26da:	9e 4f       	sbci	r25, 0xFE	; 254
    26dc:	9f 93       	push	r25
    26de:	8f 93       	push	r24
    26e0:	3f 93       	push	r19
    26e2:	2f 93       	push	r18
    26e4:	84 58       	subi	r24, 0x84	; 132
    26e6:	9e 4f       	sbci	r25, 0xFE	; 254
    26e8:	9f 93       	push	r25
    26ea:	8f 93       	push	r24
    26ec:	8e 01       	movw	r16, r28
    26ee:	0f 5f       	subi	r16, 0xFF	; 255
    26f0:	1f 4f       	sbci	r17, 0xFF	; 255
    26f2:	1f 93       	push	r17
    26f4:	0f 93       	push	r16
    26f6:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
			checksum_NMEA(outbuf);
    26fa:	c8 01       	movw	r24, r16
    26fc:	0e 94 07 0a 	call	0x140e	; 0x140e <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2700:	f8 01       	movw	r30, r16
    2702:	01 90       	ld	r0, Z+
    2704:	00 20       	and	r0, r0
    2706:	e9 f7       	brne	.-6      	; 0x2702 <report+0xb22>
    2708:	31 97       	sbiw	r30, 0x01	; 1
    270a:	af 01       	movw	r20, r30
    270c:	40 1b       	sub	r20, r16
    270e:	51 0b       	sbc	r21, r17
    2710:	b8 01       	movw	r22, r16
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    2718:	41 e0       	ldi	r20, 0x01	; 1
    271a:	6d e4       	ldi	r22, 0x4D	; 77
    271c:	78 e8       	ldi	r23, 0x88	; 136
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	0e 94 22 0b 	call	0x1644	; 0x1644 <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    2724:	8f 92       	push	r8
    2726:	9f 92       	push	r9
    2728:	af 92       	push	r10
    272a:	bf 92       	push	r11
    272c:	cf 92       	push	r12
    272e:	df 92       	push	r13
    2730:	ef 92       	push	r14
    2732:	ff 92       	push	r15
    2734:	ce 01       	movw	r24, r28
    2736:	86 54       	subi	r24, 0x46	; 70
    2738:	9d 4f       	sbci	r25, 0xFD	; 253
    273a:	9f 93       	push	r25
    273c:	8f 93       	push	r24
    273e:	1f 93       	push	r17
    2740:	0f 93       	push	r16
    2742:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2746:	42 e0       	ldi	r20, 0x02	; 2
    2748:	b8 01       	movw	r22, r16
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	0e 94 22 0b 	call	0x1644	; 0x1644 <writestr_OLED>
			break;
    2750:	cd bf       	out	0x3d, r28	; 61
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	58 c0       	rjmp	.+176    	; 0x2806 <report+0xc26>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    2756:	ce 01       	movw	r24, r28
    2758:	86 5f       	subi	r24, 0xF6	; 246
    275a:	9e 4f       	sbci	r25, 0xFE	; 254
    275c:	0e 94 0a 06 	call	0xc14	; 0xc14 <get_VERSION>
			get_time(currenttime);
    2760:	ce 01       	movw	r24, r28
    2762:	8b 5e       	subi	r24, 0xEB	; 235
    2764:	9e 4f       	sbci	r25, 0xFE	; 254
    2766:	0e 94 87 05 	call	0xb0e	; 0xb0e <get_time>
			sprintf(outbuf, format_VER, get_SPECID, currenttime, version, pcmd[cstack].cid);
    276a:	24 e3       	ldi	r18, 0x34	; 52
    276c:	20 9f       	mul	r18, r16
    276e:	c0 01       	movw	r24, r0
    2770:	21 9f       	mul	r18, r17
    2772:	90 0d       	add	r25, r0
    2774:	11 24       	eor	r1, r1
    2776:	80 5d       	subi	r24, 0xD0	; 208
    2778:	97 4d       	sbci	r25, 0xD7	; 215
    277a:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    277e:	22 ff       	sbrs	r18, 2
    2780:	03 c0       	rjmp	.+6      	; 0x2788 <report+0xba8>
    2782:	22 e0       	ldi	r18, 0x02	; 2
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	02 c0       	rjmp	.+4      	; 0x278c <report+0xbac>
    2788:	21 e0       	ldi	r18, 0x01	; 1
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	9f 93       	push	r25
    278e:	8f 93       	push	r24
    2790:	ce 01       	movw	r24, r28
    2792:	86 5f       	subi	r24, 0xF6	; 246
    2794:	9e 4f       	sbci	r25, 0xFE	; 254
    2796:	9f 93       	push	r25
    2798:	8f 93       	push	r24
    279a:	0b 96       	adiw	r24, 0x0b	; 11
    279c:	9f 93       	push	r25
    279e:	8f 93       	push	r24
    27a0:	3f 93       	push	r19
    27a2:	2f 93       	push	r18
    27a4:	8e 54       	subi	r24, 0x4E	; 78
    27a6:	9e 4f       	sbci	r25, 0xFE	; 254
    27a8:	9f 93       	push	r25
    27aa:	8f 93       	push	r24
    27ac:	8e 01       	movw	r16, r28
    27ae:	0f 5f       	subi	r16, 0xFF	; 255
    27b0:	1f 4f       	sbci	r17, 0xFF	; 255
    27b2:	1f 93       	push	r17
    27b4:	0f 93       	push	r16
    27b6:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
			checksum_NMEA(outbuf);
    27ba:	c8 01       	movw	r24, r16
    27bc:	0e 94 07 0a 	call	0x140e	; 0x140e <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    27c0:	f8 01       	movw	r30, r16
    27c2:	01 90       	ld	r0, Z+
    27c4:	00 20       	and	r0, r0
    27c6:	e9 f7       	brne	.-6      	; 0x27c2 <report+0xbe2>
    27c8:	31 97       	sbiw	r30, 0x01	; 1
    27ca:	af 01       	movw	r20, r30
    27cc:	40 1b       	sub	r20, r16
    27ce:	51 0b       	sbc	r21, r17
    27d0:	b8 01       	movw	r22, r16
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>
			writestr_OLED(1, "specMech Version", 1);
    27d8:	41 e0       	ldi	r20, 0x01	; 1
    27da:	64 eb       	ldi	r22, 0xB4	; 180
    27dc:	77 e8       	ldi	r23, 0x87	; 135
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	0e 94 22 0b 	call	0x1644	; 0x1644 <writestr_OLED>
			get_VERSION(outbuf);
    27e4:	c8 01       	movw	r24, r16
    27e6:	0e 94 0a 06 	call	0xc14	; 0xc14 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    27ea:	42 e0       	ldi	r20, 0x02	; 2
    27ec:	b8 01       	movw	r22, r16
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	0e 94 22 0b 	call	0x1644	; 0x1644 <writestr_OLED>
			break;
    27f4:	cd bf       	out	0x3d, r28	; 61
    27f6:	de bf       	out	0x3e, r29	; 62
    27f8:	06 c0       	rjmp	.+12     	; 0x2806 <report+0xc26>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    27fa:	6d e5       	ldi	r22, 0x5D	; 93
    27fc:	78 e8       	ldi	r23, 0x88	; 136
    27fe:	8a ec       	ldi	r24, 0xCA	; 202
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	0e 94 4d 06 	call	0xc9a	; 0xc9a <printError>
			break;
	}

	return(GREATERPROMPT);

}
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	cf 5f       	subi	r28, 0xFF	; 255
    280a:	dc 4f       	sbci	r29, 0xFC	; 252
    280c:	cd bf       	out	0x3d, r28	; 61
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	df 91       	pop	r29
    2812:	cf 91       	pop	r28
    2814:	1f 91       	pop	r17
    2816:	0f 91       	pop	r16
    2818:	ff 90       	pop	r15
    281a:	ef 90       	pop	r14
    281c:	df 90       	pop	r13
    281e:	cf 90       	pop	r12
    2820:	bf 90       	pop	r11
    2822:	af 90       	pop	r10
    2824:	9f 90       	pop	r9
    2826:	8f 90       	pop	r8
    2828:	7f 90       	pop	r7
    282a:	6f 90       	pop	r6
    282c:	5f 90       	pop	r5
    282e:	4f 90       	pop	r4
    2830:	3f 90       	pop	r3
    2832:	2f 90       	pop	r2
    2834:	08 95       	ret

00002836 <crc16>:

	Returns:
		The CRC16 value as an unsigned 16-bit word
------------------------------------------------------------------------------*/
uint16_t crc16(uint8_t *packet, uint16_t nBytes)
{
    2836:	dc 01       	movw	r26, r24

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	50 e0       	ldi	r21, 0x00	; 0
------------------------------------------------------------------------------*/
uint16_t crc16(uint8_t *packet, uint16_t nBytes)
{

	uint8_t bit;
	uint16_t crc = 0;
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	90 e0       	ldi	r25, 0x00	; 0
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    2840:	1b c0       	rjmp	.+54     	; 0x2878 <crc16+0x42>
		crc = crc ^ ((uint16_t) packet[byte] << 8);
    2842:	fd 01       	movw	r30, r26
    2844:	e4 0f       	add	r30, r20
    2846:	f5 1f       	adc	r31, r21
    2848:	20 81       	ld	r18, Z
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	32 2f       	mov	r19, r18
    284e:	22 27       	eor	r18, r18
    2850:	82 27       	eor	r24, r18
    2852:	93 27       	eor	r25, r19
		for (bit = 0; bit < 8; bit++) {
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	0c c0       	rjmp	.+24     	; 0x2870 <crc16+0x3a>
			if (crc & 0x8000) {
    2858:	99 23       	and	r25, r25
    285a:	3c f4       	brge	.+14     	; 0x286a <crc16+0x34>
				crc = (crc << 1) ^ 0x1021;
    285c:	88 0f       	add	r24, r24
    285e:	99 1f       	adc	r25, r25
    2860:	31 e2       	ldi	r19, 0x21	; 33
    2862:	83 27       	eor	r24, r19
    2864:	30 e1       	ldi	r19, 0x10	; 16
    2866:	93 27       	eor	r25, r19
    2868:	02 c0       	rjmp	.+4      	; 0x286e <crc16+0x38>
			} else {
				crc = crc << 1;
    286a:	88 0f       	add	r24, r24
    286c:	99 1f       	adc	r25, r25
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
		crc = crc ^ ((uint16_t) packet[byte] << 8);
		for (bit = 0; bit < 8; bit++) {
    286e:	2f 5f       	subi	r18, 0xFF	; 255
    2870:	28 30       	cpi	r18, 0x08	; 8
    2872:	90 f3       	brcs	.-28     	; 0x2858 <crc16+0x22>

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    2874:	4f 5f       	subi	r20, 0xFF	; 255
    2876:	5f 4f       	sbci	r21, 0xFF	; 255
    2878:	46 17       	cp	r20, r22
    287a:	57 07       	cpc	r21, r23
    287c:	10 f3       	brcs	.-60     	; 0x2842 <crc16+0xc>
				crc = crc << 1;
			}
		}
	}
	return (crc);
}
    287e:	08 95       	ret

00002880 <get_MOTOREncoder>:
			Bit1: Direction (0=forward, 1-backwards)
			Bit2: Counter overflow (1=overflow occurred, clear after reading)
			Bits 3-7 are "reserved." Bit7 is 1.
------------------------------------------------------------------------------*/
uint8_t get_MOTOREncoder(uint8_t controller, uint8_t command, int32_t *value)
{
    2880:	ef 92       	push	r14
    2882:	ff 92       	push	r15
    2884:	0f 93       	push	r16
    2886:	1f 93       	push	r17
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	27 97       	sbiw	r28, 0x07	; 7
    2892:	cd bf       	out	0x3d, r28	; 61
    2894:	de bf       	out	0x3e, r29	; 62
    2896:	8a 01       	movw	r16, r20
	uint8_t i, tbuf[7];
	uint16_t crcReceived, crcExpected;

	recv1_buf.nbytes = 7;			// Set up reply buffer
    2898:	97 e0       	ldi	r25, 0x07	; 7
    289a:	90 93 15 2b 	sts	0x2B15, r25	; 0x802b15 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    289e:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv1_buf+0x103>
	recv1_buf.done = NO;
    28a2:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0x104>

	tbuf[0] = controller;
    28a6:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    28a8:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);			// Send the command
    28aa:	42 e0       	ldi	r20, 0x02	; 2
    28ac:	be 01       	movw	r22, r28
    28ae:	6f 5f       	subi	r22, 0xFF	; 255
    28b0:	7f 4f       	sbci	r23, 0xFF	; 255
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>

	start_TCB0(1);
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	0e 94 51 18 	call	0x30a2	; 0x30a2 <start_TCB0>
	while (recv1_buf.done == NO) {	// Wait for the reply
    28c0:	11 c0       	rjmp	.+34     	; 0x28e4 <get_MOTOREncoder+0x64>
		asm("nop");
    28c2:	00 00       	nop
		if (ticks > 50) {			// Timeout
    28c4:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <ticks>
    28c8:	90 91 13 2a 	lds	r25, 0x2A13	; 0x802a13 <ticks+0x1>
    28cc:	c3 97       	sbiw	r24, 0x33	; 51
    28ce:	50 f0       	brcs	.+20     	; 0x28e4 <get_MOTOREncoder+0x64>
			stop_TCB0();
    28d0:	0e 94 67 18 	call	0x30ce	; 0x30ce <stop_TCB0>
			printError(ERR_MTRREADENC, "get_MOTOREncoder timeout");
    28d4:	67 ef       	ldi	r22, 0xF7	; 247
    28d6:	79 e8       	ldi	r23, 0x89	; 137
    28d8:	80 e3       	ldi	r24, 0x30	; 48
    28da:	91 e0       	ldi	r25, 0x01	; 1
    28dc:	0e 94 4d 06 	call	0xc9a	; 0xc9a <printError>
			return(ERROR);
    28e0:	83 e6       	ldi	r24, 0x63	; 99
    28e2:	74 c0       	rjmp	.+232    	; 0x29cc <get_MOTOREncoder+0x14c>
	tbuf[0] = controller;
	tbuf[1] = command;
	send_USART(1, tbuf, 2);			// Send the command

	start_TCB0(1);
	while (recv1_buf.done == NO) {	// Wait for the reply
    28e4:	80 91 18 2b 	lds	r24, 0x2B18	; 0x802b18 <recv1_buf+0x104>
    28e8:	88 23       	and	r24, r24
    28ea:	59 f3       	breq	.-42     	; 0x28c2 <get_MOTOREncoder+0x42>
			stop_TCB0();
			printError(ERR_MTRREADENC, "get_MOTOREncoder timeout");
			return(ERROR);
		}
	}
	stop_TCB0();
    28ec:	0e 94 67 18 	call	0x30ce	; 0x30ce <stop_TCB0>

	crcReceived = (recv1_buf.data[5] << 8) | recv1_buf.data[6];
    28f0:	e4 e1       	ldi	r30, 0x14	; 20
    28f2:	fa e2       	ldi	r31, 0x2A	; 42
    28f4:	e5 80       	ldd	r14, Z+5	; 0x05
    28f6:	f1 2c       	mov	r15, r1
    28f8:	fe 2c       	mov	r15, r14
    28fa:	ee 24       	eor	r14, r14
    28fc:	86 81       	ldd	r24, Z+6	; 0x06
    28fe:	e8 2a       	or	r14, r24

	for (i = 2; i < 7; i++) {		// Compute expected crc value
    2900:	22 e0       	ldi	r18, 0x02	; 2
    2902:	0e c0       	rjmp	.+28     	; 0x2920 <get_MOTOREncoder+0xa0>
		tbuf[i] = recv1_buf.data[i-2];
    2904:	82 2f       	mov	r24, r18
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	fc 01       	movw	r30, r24
    290a:	ee 5e       	subi	r30, 0xEE	; 238
    290c:	f5 4d       	sbci	r31, 0xD5	; 213
    290e:	30 81       	ld	r19, Z
    2910:	e1 e0       	ldi	r30, 0x01	; 1
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	ec 0f       	add	r30, r28
    2916:	fd 1f       	adc	r31, r29
    2918:	e8 0f       	add	r30, r24
    291a:	f9 1f       	adc	r31, r25
    291c:	30 83       	st	Z, r19
	}
	stop_TCB0();

	crcReceived = (recv1_buf.data[5] << 8) | recv1_buf.data[6];

	for (i = 2; i < 7; i++) {		// Compute expected crc value
    291e:	2f 5f       	subi	r18, 0xFF	; 255
    2920:	27 30       	cpi	r18, 0x07	; 7
    2922:	80 f3       	brcs	.-32     	; 0x2904 <get_MOTOREncoder+0x84>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 7);
    2924:	67 e0       	ldi	r22, 0x07	; 7
    2926:	70 e0       	ldi	r23, 0x00	; 0
    2928:	ce 01       	movw	r24, r28
    292a:	01 96       	adiw	r24, 0x01	; 1
    292c:	0e 94 1b 14 	call	0x2836	; 0x2836 <crc16>

	if (crcReceived != crcExpected) {
    2930:	e8 16       	cp	r14, r24
    2932:	f9 06       	cpc	r15, r25
    2934:	71 f0       	breq	.+28     	; 0x2952 <get_MOTOREncoder+0xd2>
		*value = 0;
    2936:	d8 01       	movw	r26, r16
    2938:	1d 92       	st	X+, r1
    293a:	1d 92       	st	X+, r1
    293c:	1d 92       	st	X+, r1
    293e:	1c 92       	st	X, r1
    2940:	13 97       	sbiw	r26, 0x03	; 3
		printError(ERR_MTRENCCRC, "get_MOTOREncoder CRC");
    2942:	60 e1       	ldi	r22, 0x10	; 16
    2944:	7a e8       	ldi	r23, 0x8A	; 138
    2946:	81 e3       	ldi	r24, 0x31	; 49
    2948:	91 e0       	ldi	r25, 0x01	; 1
    294a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <printError>
		return(ERROR);
    294e:	83 e6       	ldi	r24, 0x63	; 99
    2950:	3d c0       	rjmp	.+122    	; 0x29cc <get_MOTOREncoder+0x14c>
	}

	*value =  (uint32_t) recv1_buf.data[0] << 24;
    2952:	24 e1       	ldi	r18, 0x14	; 20
    2954:	3a e2       	ldi	r19, 0x2A	; 42
    2956:	f9 01       	movw	r30, r18
    2958:	80 81       	ld	r24, Z
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	a0 e0       	ldi	r26, 0x00	; 0
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	78 2f       	mov	r23, r24
    2962:	66 27       	eor	r22, r22
    2964:	55 27       	eor	r21, r21
    2966:	44 27       	eor	r20, r20
    2968:	d8 01       	movw	r26, r16
    296a:	4d 93       	st	X+, r20
    296c:	5d 93       	st	X+, r21
    296e:	6d 93       	st	X+, r22
    2970:	7c 93       	st	X, r23
    2972:	13 97       	sbiw	r26, 0x03	; 3
	*value |= (uint32_t) recv1_buf.data[1] << 16;
    2974:	91 81       	ldd	r25, Z+1	; 0x01
    2976:	89 2f       	mov	r24, r25
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	a0 e0       	ldi	r26, 0x00	; 0
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	dc 01       	movw	r26, r24
    2980:	99 27       	eor	r25, r25
    2982:	88 27       	eor	r24, r24
    2984:	84 2b       	or	r24, r20
    2986:	95 2b       	or	r25, r21
    2988:	a6 2b       	or	r26, r22
    298a:	b7 2b       	or	r27, r23
    298c:	f8 01       	movw	r30, r16
    298e:	80 83       	st	Z, r24
    2990:	91 83       	std	Z+1, r25	; 0x01
    2992:	a2 83       	std	Z+2, r26	; 0x02
    2994:	b3 83       	std	Z+3, r27	; 0x03
	*value |= (uint32_t) recv1_buf.data[2] << 8;
    2996:	f9 01       	movw	r30, r18
    2998:	42 81       	ldd	r20, Z+2	; 0x02
    299a:	50 e0       	ldi	r21, 0x00	; 0
    299c:	60 e0       	ldi	r22, 0x00	; 0
    299e:	70 e0       	ldi	r23, 0x00	; 0
    29a0:	76 2f       	mov	r23, r22
    29a2:	65 2f       	mov	r22, r21
    29a4:	54 2f       	mov	r21, r20
    29a6:	44 27       	eor	r20, r20
    29a8:	84 2b       	or	r24, r20
    29aa:	95 2b       	or	r25, r21
    29ac:	a6 2b       	or	r26, r22
    29ae:	b7 2b       	or	r27, r23
    29b0:	f8 01       	movw	r30, r16
    29b2:	80 83       	st	Z, r24
    29b4:	91 83       	std	Z+1, r25	; 0x01
    29b6:	a2 83       	std	Z+2, r26	; 0x02
    29b8:	b3 83       	std	Z+3, r27	; 0x03
	*value |= (uint32_t) recv1_buf.data[3];
    29ba:	f9 01       	movw	r30, r18
    29bc:	23 81       	ldd	r18, Z+3	; 0x03
    29be:	82 2b       	or	r24, r18
    29c0:	f8 01       	movw	r30, r16
    29c2:	80 83       	st	Z, r24
    29c4:	91 83       	std	Z+1, r25	; 0x01
    29c6:	a2 83       	std	Z+2, r26	; 0x02
    29c8:	b3 83       	std	Z+3, r27	; 0x03

//	status = recv1_buf.data[4];

	return(NOERROR);
    29ca:	80 e0       	ldi	r24, 0x00	; 0

}
    29cc:	27 96       	adiw	r28, 0x07	; 7
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	de bf       	out	0x3e, r29	; 62
    29d2:	df 91       	pop	r29
    29d4:	cf 91       	pop	r28
    29d6:	1f 91       	pop	r17
    29d8:	0f 91       	pop	r16
    29da:	ff 90       	pop	r15
    29dc:	ef 90       	pop	r14
    29de:	08 95       	ret

000029e0 <get_MOTORFloat>:
	Returns:
		ERROR: USART timeout or CRC check error
		NOERROR
------------------------------------------------------------------------------*/
uint8_t get_MOTORFloat(uint8_t controller, uint8_t command, float *value)
{
    29e0:	af 92       	push	r10
    29e2:	bf 92       	push	r11
    29e4:	cf 92       	push	r12
    29e6:	df 92       	push	r13
    29e8:	ef 92       	push	r14
    29ea:	ff 92       	push	r15
    29ec:	0f 93       	push	r16
    29ee:	1f 93       	push	r17
    29f0:	cf 93       	push	r28
    29f2:	df 93       	push	r29
    29f4:	00 d0       	rcall	.+0      	; 0x29f6 <get_MOTORFloat+0x16>
    29f6:	00 d0       	rcall	.+0      	; 0x29f8 <get_MOTORFloat+0x18>
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
    29fc:	a8 2e       	mov	r10, r24
    29fe:	b6 2e       	mov	r11, r22
    2a00:	7a 01       	movw	r14, r20
	uint8_t tbuf[4];
	uint16_t tempval, crcReceived, crcExpected;

	recv1_buf.nbytes = 4;				// Set up receive buffer
    2a02:	84 e0       	ldi	r24, 0x04	; 4
    2a04:	80 93 15 2b 	sts	0x2B15, r24	; 0x802b15 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2a08:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2a0c:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0x104>

	tbuf[0] = controller;
    2a10:	a9 82       	std	Y+1, r10	; 0x01
	tbuf[1] = command;
    2a12:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);				// Send command
    2a14:	42 e0       	ldi	r20, 0x02	; 2
    2a16:	be 01       	movw	r22, r28
    2a18:	6f 5f       	subi	r22, 0xFF	; 255
    2a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>

	start_TCB0(1);
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	0e 94 51 18 	call	0x30a2	; 0x30a2 <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
    2a2a:	80 91 18 2b 	lds	r24, 0x2B18	; 0x802b18 <recv1_buf+0x104>
    2a2e:	81 30       	cpi	r24, 0x01	; 1
    2a30:	81 f0       	breq	.+32     	; 0x2a52 <get_MOTORFloat+0x72>
			break;
		}
		if (ticks > 50) {				// Timeout
    2a32:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <ticks>
    2a36:	90 91 13 2a 	lds	r25, 0x2A13	; 0x802a13 <ticks+0x1>
    2a3a:	c3 97       	sbiw	r24, 0x33	; 51
    2a3c:	b0 f3       	brcs	.-20     	; 0x2a2a <get_MOTORFloat+0x4a>
			stop_TCB0();
    2a3e:	0e 94 67 18 	call	0x30ce	; 0x30ce <stop_TCB0>
			printError(ERR_MTRREADENC, "ROBOFloat timeout");
    2a42:	65 e2       	ldi	r22, 0x25	; 37
    2a44:	7a e8       	ldi	r23, 0x8A	; 138
    2a46:	80 e3       	ldi	r24, 0x30	; 48
    2a48:	91 e0       	ldi	r25, 0x01	; 1
    2a4a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <printError>
			return(ERROR);
    2a4e:	83 e6       	ldi	r24, 0x63	; 99
    2a50:	37 c0       	rjmp	.+110    	; 0x2ac0 <get_MOTORFloat+0xe0>
		}
	}
	stop_TCB0();
    2a52:	0e 94 67 18 	call	0x30ce	; 0x30ce <stop_TCB0>

	tempval = (recv1_buf.data[0] << 8) | recv1_buf.data[1];
    2a56:	e4 e1       	ldi	r30, 0x14	; 20
    2a58:	fa e2       	ldi	r31, 0x2A	; 42
    2a5a:	90 81       	ld	r25, Z
    2a5c:	c9 2e       	mov	r12, r25
    2a5e:	d1 2c       	mov	r13, r1
    2a60:	dc 2c       	mov	r13, r12
    2a62:	cc 24       	eor	r12, r12
    2a64:	81 81       	ldd	r24, Z+1	; 0x01
    2a66:	c8 2a       	or	r12, r24
	crcReceived = (recv1_buf.data[2] << 8) | recv1_buf.data[3];
    2a68:	02 81       	ldd	r16, Z+2	; 0x02
    2a6a:	10 e0       	ldi	r17, 0x00	; 0
    2a6c:	10 2f       	mov	r17, r16
    2a6e:	00 27       	eor	r16, r16
    2a70:	23 81       	ldd	r18, Z+3	; 0x03
    2a72:	02 2b       	or	r16, r18

	tbuf[0] = controller;
    2a74:	a9 82       	std	Y+1, r10	; 0x01
	tbuf[1] = command;
    2a76:	ba 82       	std	Y+2, r11	; 0x02
	tbuf[2] = recv1_buf.data[0];
    2a78:	9b 83       	std	Y+3, r25	; 0x03
	tbuf[3] = recv1_buf.data[1];
    2a7a:	8c 83       	std	Y+4, r24	; 0x04
	crcExpected = crc16(tbuf, 4);
    2a7c:	64 e0       	ldi	r22, 0x04	; 4
    2a7e:	70 e0       	ldi	r23, 0x00	; 0
    2a80:	ce 01       	movw	r24, r28
    2a82:	01 96       	adiw	r24, 0x01	; 1
    2a84:	0e 94 1b 14 	call	0x2836	; 0x2836 <crc16>

	if (crcExpected != crcReceived) {
    2a88:	08 17       	cp	r16, r24
    2a8a:	19 07       	cpc	r17, r25
    2a8c:	41 f0       	breq	.+16     	; 0x2a9e <get_MOTORFloat+0xbe>
		printError(ERR_MTRENCCRC, "get_MOTORFloat CRC");
    2a8e:	67 e3       	ldi	r22, 0x37	; 55
    2a90:	7a e8       	ldi	r23, 0x8A	; 138
    2a92:	81 e3       	ldi	r24, 0x31	; 49
    2a94:	91 e0       	ldi	r25, 0x01	; 1
    2a96:	0e 94 4d 06 	call	0xc9a	; 0xc9a <printError>
		return(ERROR);
    2a9a:	83 e6       	ldi	r24, 0x63	; 99
    2a9c:	11 c0       	rjmp	.+34     	; 0x2ac0 <get_MOTORFloat+0xe0>
	} else {
		*value = ((float) tempval / 10.0);
    2a9e:	b6 01       	movw	r22, r12
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	0e 94 10 1c 	call	0x3820	; 0x3820 <__floatunsisf>
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e2       	ldi	r20, 0x20	; 32
    2aae:	51 e4       	ldi	r21, 0x41	; 65
    2ab0:	0e 94 9e 1b 	call	0x373c	; 0x373c <__divsf3>
    2ab4:	f7 01       	movw	r30, r14
    2ab6:	60 83       	st	Z, r22
    2ab8:	71 83       	std	Z+1, r23	; 0x01
    2aba:	82 83       	std	Z+2, r24	; 0x02
    2abc:	93 83       	std	Z+3, r25	; 0x03
		return(NOERROR);
    2abe:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2ac0:	24 96       	adiw	r28, 0x04	; 4
    2ac2:	cd bf       	out	0x3d, r28	; 61
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	df 91       	pop	r29
    2ac8:	cf 91       	pop	r28
    2aca:	1f 91       	pop	r17
    2acc:	0f 91       	pop	r16
    2ace:	ff 90       	pop	r15
    2ad0:	ef 90       	pop	r14
    2ad2:	df 90       	pop	r13
    2ad4:	cf 90       	pop	r12
    2ad6:	bf 90       	pop	r11
    2ad8:	af 90       	pop	r10
    2ada:	08 95       	ret

00002adc <get_MOTORInt32>:
	Returns:
		ERROR: USART timeout or CRC error
		NOERROR
------------------------------------------------------------------------------*/
uint8_t get_MOTORInt32(uint8_t controller, uint8_t command, uint32_t *value)
{
    2adc:	ef 92       	push	r14
    2ade:	ff 92       	push	r15
    2ae0:	0f 93       	push	r16
    2ae2:	1f 93       	push	r17
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    2aec:	26 97       	sbiw	r28, 0x06	; 6
    2aee:	cd bf       	out	0x3d, r28	; 61
    2af0:	de bf       	out	0x3e, r29	; 62
    2af2:	8a 01       	movw	r16, r20
	uint8_t i, tbuf[6];
	uint16_t crcReceived, crcExpected;
	uint32_t tempval;

	recv1_buf.nbytes = 6;				// Set up receive buffer
    2af4:	96 e0       	ldi	r25, 0x06	; 6
    2af6:	90 93 15 2b 	sts	0x2B15, r25	; 0x802b15 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2afa:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2afe:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0x104>

	tbuf[0] = controller;
    2b02:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    2b04:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);				// Send command
    2b06:	42 e0       	ldi	r20, 0x02	; 2
    2b08:	be 01       	movw	r22, r28
    2b0a:	6f 5f       	subi	r22, 0xFF	; 255
    2b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>

	start_TCB0(1);
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	0e 94 51 18 	call	0x30a2	; 0x30a2 <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
    2b1c:	80 91 18 2b 	lds	r24, 0x2B18	; 0x802b18 <recv1_buf+0x104>
    2b20:	81 30       	cpi	r24, 0x01	; 1
    2b22:	61 f4       	brne	.+24     	; 0x2b3c <get_MOTORInt32+0x60>
			stop_TCB0();
    2b24:	0e 94 67 18 	call	0x30ce	; 0x30ce <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "get_MOTORInt32 timeout");
			return(ERROR);
		}
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];
    2b28:	e4 e1       	ldi	r30, 0x14	; 20
    2b2a:	fa e2       	ldi	r31, 0x2A	; 42
    2b2c:	e4 80       	ldd	r14, Z+4	; 0x04
    2b2e:	f1 2c       	mov	r15, r1
    2b30:	fe 2c       	mov	r15, r14
    2b32:	ee 24       	eor	r14, r14
    2b34:	85 81       	ldd	r24, Z+5	; 0x05
    2b36:	e8 2a       	or	r14, r24

	for (i = 2; i < 6; i++) {			// Compute expected CRC
    2b38:	22 e0       	ldi	r18, 0x02	; 2
    2b3a:	1e c0       	rjmp	.+60     	; 0x2b78 <get_MOTORInt32+0x9c>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// Timeout
    2b3c:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <ticks>
    2b40:	90 91 13 2a 	lds	r25, 0x2A13	; 0x802a13 <ticks+0x1>
    2b44:	c3 97       	sbiw	r24, 0x33	; 51
    2b46:	50 f3       	brcs	.-44     	; 0x2b1c <get_MOTORInt32+0x40>
			stop_TCB0();
    2b48:	0e 94 67 18 	call	0x30ce	; 0x30ce <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "get_MOTORInt32 timeout");
    2b4c:	6a e4       	ldi	r22, 0x4A	; 74
    2b4e:	7a e8       	ldi	r23, 0x8A	; 138
    2b50:	8f e2       	ldi	r24, 0x2F	; 47
    2b52:	91 e0       	ldi	r25, 0x01	; 1
    2b54:	0e 94 4d 06 	call	0xc9a	; 0xc9a <printError>
			return(ERROR);
    2b58:	83 e6       	ldi	r24, 0x63	; 99
    2b5a:	54 c0       	rjmp	.+168    	; 0x2c04 <get_MOTORInt32+0x128>
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {			// Compute expected CRC
		tbuf[i] = recv1_buf.data[i-2];
    2b5c:	82 2f       	mov	r24, r18
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	fc 01       	movw	r30, r24
    2b62:	ee 5e       	subi	r30, 0xEE	; 238
    2b64:	f5 4d       	sbci	r31, 0xD5	; 213
    2b66:	30 81       	ld	r19, Z
    2b68:	e1 e0       	ldi	r30, 0x01	; 1
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	ec 0f       	add	r30, r28
    2b6e:	fd 1f       	adc	r31, r29
    2b70:	e8 0f       	add	r30, r24
    2b72:	f9 1f       	adc	r31, r25
    2b74:	30 83       	st	Z, r19
		}
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {			// Compute expected CRC
    2b76:	2f 5f       	subi	r18, 0xFF	; 255
    2b78:	26 30       	cpi	r18, 0x06	; 6
    2b7a:	80 f3       	brcs	.-32     	; 0x2b5c <get_MOTORInt32+0x80>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 6);
    2b7c:	66 e0       	ldi	r22, 0x06	; 6
    2b7e:	70 e0       	ldi	r23, 0x00	; 0
    2b80:	ce 01       	movw	r24, r28
    2b82:	01 96       	adiw	r24, 0x01	; 1
    2b84:	0e 94 1b 14 	call	0x2836	; 0x2836 <crc16>

	if (crcReceived != crcExpected) {
    2b88:	e8 16       	cp	r14, r24
    2b8a:	f9 06       	cpc	r15, r25
    2b8c:	89 f0       	breq	.+34     	; 0x2bb0 <get_MOTORInt32+0xd4>
		printError(ERR_MTRENCCRC, "get_MOTORInt32 CRC error");
    2b8e:	61 e6       	ldi	r22, 0x61	; 97
    2b90:	7a e8       	ldi	r23, 0x8A	; 138
    2b92:	81 e3       	ldi	r24, 0x31	; 49
    2b94:	91 e0       	ldi	r25, 0x01	; 1
    2b96:	0e 94 4d 06 	call	0xc9a	; 0xc9a <printError>
		*value = 0x7FFFFFFF;
    2b9a:	8f ef       	ldi	r24, 0xFF	; 255
    2b9c:	9f ef       	ldi	r25, 0xFF	; 255
    2b9e:	af ef       	ldi	r26, 0xFF	; 255
    2ba0:	bf e7       	ldi	r27, 0x7F	; 127
    2ba2:	f8 01       	movw	r30, r16
    2ba4:	80 83       	st	Z, r24
    2ba6:	91 83       	std	Z+1, r25	; 0x01
    2ba8:	a2 83       	std	Z+2, r26	; 0x02
    2baa:	b3 83       	std	Z+3, r27	; 0x03
		return(ERROR);
    2bac:	83 e6       	ldi	r24, 0x63	; 99
    2bae:	2a c0       	rjmp	.+84     	; 0x2c04 <get_MOTORInt32+0x128>
	}

	tempval =  (uint32_t) recv1_buf.data[0] << 24;
    2bb0:	e4 e1       	ldi	r30, 0x14	; 20
    2bb2:	fa e2       	ldi	r31, 0x2A	; 42
    2bb4:	80 81       	ld	r24, Z
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	a0 e0       	ldi	r26, 0x00	; 0
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	78 2f       	mov	r23, r24
    2bbe:	66 27       	eor	r22, r22
    2bc0:	55 27       	eor	r21, r21
    2bc2:	44 27       	eor	r20, r20
	tempval |= (uint32_t) recv1_buf.data[1] << 16;
    2bc4:	91 81       	ldd	r25, Z+1	; 0x01
    2bc6:	89 2f       	mov	r24, r25
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	a0 e0       	ldi	r26, 0x00	; 0
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	dc 01       	movw	r26, r24
    2bd0:	99 27       	eor	r25, r25
    2bd2:	88 27       	eor	r24, r24
    2bd4:	84 2b       	or	r24, r20
    2bd6:	95 2b       	or	r25, r21
    2bd8:	a6 2b       	or	r26, r22
    2bda:	b7 2b       	or	r27, r23
	tempval |= (uint32_t) recv1_buf.data[2] << 8;
    2bdc:	42 81       	ldd	r20, Z+2	; 0x02
    2bde:	50 e0       	ldi	r21, 0x00	; 0
    2be0:	60 e0       	ldi	r22, 0x00	; 0
    2be2:	70 e0       	ldi	r23, 0x00	; 0
    2be4:	76 2f       	mov	r23, r22
    2be6:	65 2f       	mov	r22, r21
    2be8:	54 2f       	mov	r21, r20
    2bea:	44 27       	eor	r20, r20
    2bec:	84 2b       	or	r24, r20
    2bee:	95 2b       	or	r25, r21
    2bf0:	a6 2b       	or	r26, r22
    2bf2:	b7 2b       	or	r27, r23
	tempval |= (uint32_t) recv1_buf.data[3];
    2bf4:	23 81       	ldd	r18, Z+3	; 0x03
    2bf6:	82 2b       	or	r24, r18
	*value = tempval;
    2bf8:	f8 01       	movw	r30, r16
    2bfa:	80 83       	st	Z, r24
    2bfc:	91 83       	std	Z+1, r25	; 0x01
    2bfe:	a2 83       	std	Z+2, r26	; 0x02
    2c00:	b3 83       	std	Z+3, r27	; 0x03

	return(NOERROR);
    2c02:	80 e0       	ldi	r24, 0x00	; 0

}
    2c04:	26 96       	adiw	r28, 0x06	; 6
    2c06:	cd bf       	out	0x3d, r28	; 61
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	df 91       	pop	r29
    2c0c:	cf 91       	pop	r28
    2c0e:	1f 91       	pop	r17
    2c10:	0f 91       	pop	r16
    2c12:	ff 90       	pop	r15
    2c14:	ef 90       	pop	r14
    2c16:	08 95       	ret

00002c18 <move_MOTORAbsolute>:
	Returns:
		ERROR on USART timeout or bad (not 0xFF) ack
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTORAbsolute(uint8_t controller, int32_t newPosition)
{
    2c18:	cf 93       	push	r28
    2c1a:	df 93       	push	r29
    2c1c:	cd b7       	in	r28, 0x3d	; 61
    2c1e:	de b7       	in	r29, 0x3e	; 62
    2c20:	65 97       	sbiw	r28, 0x15	; 21
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	de bf       	out	0x3e, r29	; 62
	acceleration = ACCELERATION;
	deceleration = DECELERATION;
	speed = SPEED;
	buffer = 0;							// 0 -> command is buffered

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    2c26:	10 92 14 2a 	sts	0x2A14, r1	; 0x802a14 <recv1_buf>
	recv1_buf.nbytes = 1;
    2c2a:	91 e0       	ldi	r25, 0x01	; 1
    2c2c:	90 93 15 2b 	sts	0x2B15, r25	; 0x802b15 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2c30:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2c34:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0x104>

	tbuf[0] = controller;
    2c38:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBODRIVETO;				// Command 65
    2c3a:	81 e4       	ldi	r24, 0x41	; 65
    2c3c:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (acceleration >> 24) & 0XFF;
    2c3e:	1b 82       	std	Y+3, r1	; 0x03
	tbuf[3] = (acceleration >> 16) & 0xFF;
    2c40:	1c 82       	std	Y+4, r1	; 0x04
	tbuf[4] = (acceleration >> 8) & 0xFF;
    2c42:	80 e2       	ldi	r24, 0x20	; 32
    2c44:	8d 83       	std	Y+5, r24	; 0x05
	tbuf[5] = (acceleration) & 0xFF;
    2c46:	1e 82       	std	Y+6, r1	; 0x06
	tbuf[6] = (speed >> 24) & 0xFF;
    2c48:	1f 82       	std	Y+7, r1	; 0x07
	tbuf[7] = (speed >> 16) & 0xFF;
    2c4a:	18 86       	std	Y+8, r1	; 0x08
	tbuf[8] = (speed >> 8) & 0xFF;
    2c4c:	90 e4       	ldi	r25, 0x40	; 64
    2c4e:	99 87       	std	Y+9, r25	; 0x09
	tbuf[9] = (speed) & 0xFF;
    2c50:	1a 86       	std	Y+10, r1	; 0x0a
	tbuf[10] = (deceleration >> 24) & 0xFF;
    2c52:	1b 86       	std	Y+11, r1	; 0x0b
	tbuf[11] = (deceleration >> 16) & 0xFF;
    2c54:	1c 86       	std	Y+12, r1	; 0x0c
	tbuf[12] = (deceleration >> 8) & 0xFF;
    2c56:	8d 87       	std	Y+13, r24	; 0x0d
	tbuf[13] = (deceleration) & 0xFF;
    2c58:	1e 86       	std	Y+14, r1	; 0x0e
	tbuf[14] = (newPosition >> 24) & 0xFF;
    2c5a:	7f 87       	std	Y+15, r23	; 0x0f
	tbuf[15] = (newPosition >> 16) & 0xFF;
    2c5c:	68 8b       	std	Y+16, r22	; 0x10
	tbuf[16] = (newPosition >> 8) & 0xFF;
    2c5e:	59 8b       	std	Y+17, r21	; 0x11
	tbuf[17] = (newPosition) & 0xFF;
    2c60:	4a 8b       	std	Y+18, r20	; 0x12
	tbuf[18] = buffer;
    2c62:	1b 8a       	std	Y+19, r1	; 0x13
	crc = crc16(tbuf, 19);
    2c64:	63 e1       	ldi	r22, 0x13	; 19
    2c66:	70 e0       	ldi	r23, 0x00	; 0
    2c68:	ce 01       	movw	r24, r28
    2c6a:	01 96       	adiw	r24, 0x01	; 1
    2c6c:	0e 94 1b 14 	call	0x2836	; 0x2836 <crc16>
	tbuf[19] = (crc >> 8) & 0xFF;
    2c70:	9c 8b       	std	Y+20, r25	; 0x14
	tbuf[20] = crc & 0xFF;
    2c72:	8d 8b       	std	Y+21, r24	; 0x15

	send_USART(1, tbuf, 21);			// Send command
    2c74:	45 e1       	ldi	r20, 0x15	; 21
    2c76:	be 01       	movw	r22, r28
    2c78:	6f 5f       	subi	r22, 0xFF	; 255
    2c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>

	start_TCB0(1);						// Start 1 ms ticks timer
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	0e 94 51 18 	call	0x30a2	; 0x30a2 <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    2c8a:	80 91 18 2b 	lds	r24, 0x2B18	; 0x802b18 <recv1_buf+0x104>
    2c8e:	81 30       	cpi	r24, 0x01	; 1
    2c90:	41 f4       	brne	.+16     	; 0x2ca2 <move_MOTORAbsolute+0x8a>
			stop_TCB0();
    2c92:	0e 94 67 18 	call	0x30ce	; 0x30ce <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute timeout");
			return(ERROR);
		}
	}

	if (recv1_buf.data[0] != 0xFF) {
    2c96:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <recv1_buf>
    2c9a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c9c:	91 f4       	brne	.+36     	; 0x2cc2 <move_MOTORAbsolute+0xaa>
		printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute ack");		
		return(ERROR);
	}

	return(NOERROR);
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	17 c0       	rjmp	.+46     	; 0x2cd0 <move_MOTORAbsolute+0xb8>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// 4 ms just barely works at 38400 baud
    2ca2:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <ticks>
    2ca6:	90 91 13 2a 	lds	r25, 0x2A13	; 0x802a13 <ticks+0x1>
    2caa:	c3 97       	sbiw	r24, 0x33	; 51
    2cac:	70 f3       	brcs	.-36     	; 0x2c8a <move_MOTORAbsolute+0x72>
			stop_TCB0();
    2cae:	0e 94 67 18 	call	0x30ce	; 0x30ce <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute timeout");
    2cb2:	6a e7       	ldi	r22, 0x7A	; 122
    2cb4:	7a e8       	ldi	r23, 0x8A	; 138
    2cb6:	8f e2       	ldi	r24, 0x2F	; 47
    2cb8:	91 e0       	ldi	r25, 0x01	; 1
    2cba:	0e 94 4d 06 	call	0xc9a	; 0xc9a <printError>
			return(ERROR);
    2cbe:	83 e6       	ldi	r24, 0x63	; 99
    2cc0:	07 c0       	rjmp	.+14     	; 0x2cd0 <move_MOTORAbsolute+0xb8>
		}
	}

	if (recv1_buf.data[0] != 0xFF) {
		printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute ack");		
    2cc2:	65 e9       	ldi	r22, 0x95	; 149
    2cc4:	7a e8       	ldi	r23, 0x8A	; 138
    2cc6:	8f e2       	ldi	r24, 0x2F	; 47
    2cc8:	91 e0       	ldi	r25, 0x01	; 1
    2cca:	0e 94 4d 06 	call	0xc9a	; 0xc9a <printError>
		return(ERROR);
    2cce:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);
}
    2cd0:	65 96       	adiw	r28, 0x15	; 21
    2cd2:	cd bf       	out	0x3d, r28	; 61
    2cd4:	de bf       	out	0x3e, r29	; 62
    2cd6:	df 91       	pop	r29
    2cd8:	cf 91       	pop	r28
    2cda:	08 95       	ret

00002cdc <move_MOTOR>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR(uint8_t cstack)
{
    2cdc:	cf 92       	push	r12
    2cde:	df 92       	push	r13
    2ce0:	ef 92       	push	r14
    2ce2:	ff 92       	push	r15
    2ce4:	1f 93       	push	r17
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	00 d0       	rcall	.+0      	; 0x2cec <move_MOTOR+0x10>
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <move_MOTOR+0x12>
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62

	uint8_t motor, controller, retval;
	int32_t newPosition, currentPosition;

	motor = pcmd[cstack].cobject;
    2cf2:	e8 2e       	mov	r14, r24
    2cf4:	f1 2c       	mov	r15, r1
    2cf6:	84 e3       	ldi	r24, 0x34	; 52
    2cf8:	8e 9d       	mul	r24, r14
    2cfa:	f0 01       	movw	r30, r0
    2cfc:	8f 9d       	mul	r24, r15
    2cfe:	f0 0d       	add	r31, r0
    2d00:	11 24       	eor	r1, r1
    2d02:	eb 5f       	subi	r30, 0xFB	; 251
    2d04:	f7 4d       	sbci	r31, 0xD7	; 215
    2d06:	81 81       	ldd	r24, Z+1	; 0x01
	switch(motor) {
    2d08:	81 34       	cpi	r24, 0x41	; 65
    2d0a:	d0 f0       	brcs	.+52     	; 0x2d40 <move_MOTOR+0x64>
    2d0c:	84 34       	cpi	r24, 0x44	; 68
    2d0e:	28 f0       	brcs	.+10     	; 0x2d1a <move_MOTOR+0x3e>
    2d10:	9f e9       	ldi	r25, 0x9F	; 159
    2d12:	98 0f       	add	r25, r24
    2d14:	93 30       	cpi	r25, 0x03	; 3
    2d16:	40 f0       	brcs	.+16     	; 0x2d28 <move_MOTOR+0x4c>
    2d18:	13 c0       	rjmp	.+38     	; 0x2d40 <move_MOTOR+0x64>
		case 'A':
		case 'B':
		case 'C':
			controller = motor + 63;
    2d1a:	1f e3       	ldi	r17, 0x3F	; 63
    2d1c:	18 0f       	add	r17, r24
			currentPosition = 0;
    2d1e:	19 82       	std	Y+1, r1	; 0x01
    2d20:	1a 82       	std	Y+2, r1	; 0x02
    2d22:	1b 82       	std	Y+3, r1	; 0x03
    2d24:	1c 82       	std	Y+4, r1	; 0x04
			break;
    2d26:	14 c0       	rjmp	.+40     	; 0x2d50 <move_MOTOR+0x74>

		case 'a':
		case 'b':
		case 'c':
			controller = motor + 31;
    2d28:	1f e1       	ldi	r17, 0x1F	; 31
    2d2a:	18 0f       	add	r17, r24
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &currentPosition);
    2d2c:	ae 01       	movw	r20, r28
    2d2e:	4f 5f       	subi	r20, 0xFF	; 255
    2d30:	5f 4f       	sbci	r21, 0xFF	; 255
    2d32:	60 e1       	ldi	r22, 0x10	; 16
    2d34:	81 2f       	mov	r24, r17
    2d36:	0e 94 40 14 	call	0x2880	; 0x2880 <get_MOTOREncoder>
			if (retval == ERROR) {
    2d3a:	83 36       	cpi	r24, 0x63	; 99
    2d3c:	49 f4       	brne	.+18     	; 0x2d50 <move_MOTOR+0x74>
    2d3e:	39 c0       	rjmp	.+114    	; 0x2db2 <move_MOTOR+0xd6>
				return(ERROR);
			}
			break;

		default:
			printError(ERR_UNKNOWNMTR, "move_MOTOR unknown motor");
    2d40:	6c ea       	ldi	r22, 0xAC	; 172
    2d42:	7a e8       	ldi	r23, 0x8A	; 138
    2d44:	8d e2       	ldi	r24, 0x2D	; 45
    2d46:	91 e0       	ldi	r25, 0x01	; 1
    2d48:	0e 94 4d 06 	call	0xc9a	; 0xc9a <printError>
			return(ERROR);
    2d4c:	83 e6       	ldi	r24, 0x63	; 99
    2d4e:	32 c0       	rjmp	.+100    	; 0x2db4 <move_MOTOR+0xd8>
			break;	
	}

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    2d50:	84 e3       	ldi	r24, 0x34	; 52
    2d52:	8e 9d       	mul	r24, r14
    2d54:	f0 01       	movw	r30, r0
    2d56:	8f 9d       	mul	r24, r15
    2d58:	f0 0d       	add	r31, r0
    2d5a:	11 24       	eor	r1, r1
    2d5c:	eb 5f       	subi	r30, 0xFB	; 251
    2d5e:	f7 4d       	sbci	r31, 0xD7	; 215
    2d60:	82 81       	ldd	r24, Z+2	; 0x02
    2d62:	81 11       	cpse	r24, r1
    2d64:	08 c0       	rjmp	.+16     	; 0x2d76 <move_MOTOR+0x9a>
		printError(ERR_MTRNULLMOVE, "move_MOTOR no position or increment");
    2d66:	65 ec       	ldi	r22, 0xC5	; 197
    2d68:	7a e8       	ldi	r23, 0x8A	; 138
    2d6a:	83 e3       	ldi	r24, 0x33	; 51
    2d6c:	91 e0       	ldi	r25, 0x01	; 1
    2d6e:	0e 94 4d 06 	call	0xc9a	; 0xc9a <printError>
		return(ERROR);
    2d72:	83 e6       	ldi	r24, 0x63	; 99
    2d74:	1f c0       	rjmp	.+62     	; 0x2db4 <move_MOTOR+0xd8>
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);
    2d76:	24 e3       	ldi	r18, 0x34	; 52
    2d78:	2e 9d       	mul	r18, r14
    2d7a:	c0 01       	movw	r24, r0
    2d7c:	2f 9d       	mul	r18, r15
    2d7e:	90 0d       	add	r25, r0
    2d80:	11 24       	eor	r1, r1
    2d82:	89 5f       	subi	r24, 0xF9	; 249
    2d84:	97 4d       	sbci	r25, 0xD7	; 215
    2d86:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <atol>
    2d8a:	9b 01       	movw	r18, r22
    2d8c:	ac 01       	movw	r20, r24
    2d8e:	ac e0       	ldi	r26, 0x0C	; 12
    2d90:	b1 e0       	ldi	r27, 0x01	; 1
    2d92:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <__muluhisi3>
    2d96:	c9 80       	ldd	r12, Y+1	; 0x01
    2d98:	da 80       	ldd	r13, Y+2	; 0x02
    2d9a:	eb 80       	ldd	r14, Y+3	; 0x03
    2d9c:	fc 80       	ldd	r15, Y+4	; 0x04
    2d9e:	ab 01       	movw	r20, r22
    2da0:	bc 01       	movw	r22, r24
    2da2:	4c 0d       	add	r20, r12
    2da4:	5d 1d       	adc	r21, r13
    2da6:	6e 1d       	adc	r22, r14
    2da8:	7f 1d       	adc	r23, r15
	return(move_MOTORAbsolute(controller, newPosition));
    2daa:	81 2f       	mov	r24, r17
    2dac:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <move_MOTORAbsolute>
    2db0:	01 c0       	rjmp	.+2      	; 0x2db4 <move_MOTOR+0xd8>
		case 'b':
		case 'c':
			controller = motor + 31;
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &currentPosition);
			if (retval == ERROR) {
				return(ERROR);
    2db2:	83 e6       	ldi	r24, 0x63	; 99
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);
	return(move_MOTORAbsolute(controller, newPosition));

}
    2db4:	24 96       	adiw	r28, 0x04	; 4
    2db6:	cd bf       	out	0x3d, r28	; 61
    2db8:	de bf       	out	0x3e, r29	; 62
    2dba:	df 91       	pop	r29
    2dbc:	cf 91       	pop	r28
    2dbe:	1f 91       	pop	r17
    2dc0:	ff 90       	pop	r15
    2dc2:	ef 90       	pop	r14
    2dc4:	df 90       	pop	r13
    2dc6:	cf 90       	pop	r12
    2dc8:	08 95       	ret

00002dca <set_MOTOREncoder>:
		Does not print an error. It's only called at reboot. We should have a
		double-check at startup to make sure the encoder values agree before
		a move.
------------------------------------------------------------------------------*/
uint8_t set_MOTOREncoder(uint8_t controller, uint32_t value)
{
    2dca:	cf 93       	push	r28
    2dcc:	df 93       	push	r29
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	26 97       	sbiw	r28, 0x06	; 6
    2dd4:	cd bf       	out	0x3d, r28	; 61
    2dd6:	de bf       	out	0x3e, r29	; 62

	uint8_t tbuf[6];

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    2dd8:	10 92 14 2a 	sts	0x2A14, r1	; 0x802a14 <recv1_buf>
	recv1_buf.nbytes = 1;
    2ddc:	91 e0       	ldi	r25, 0x01	; 1
    2dde:	90 93 15 2b 	sts	0x2B15, r25	; 0x802b15 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2de2:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2de6:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0x104>

	tbuf[0] = controller;
    2dea:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBOSETENCODER;
    2dec:	86 e1       	ldi	r24, 0x16	; 22
    2dee:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (value >> 24) & 0xFF;
    2df0:	7b 83       	std	Y+3, r23	; 0x03
	tbuf[3] = (value >> 16) & 0xFF;
    2df2:	6c 83       	std	Y+4, r22	; 0x04
	tbuf[4] = (value >> 8) & 0xFF;
    2df4:	5d 83       	std	Y+5, r21	; 0x05
	tbuf[5] = value & 0xFF;
    2df6:	4e 83       	std	Y+6, r20	; 0x06

	send_USART(1, tbuf, 6);				// Send the command
    2df8:	46 e0       	ldi	r20, 0x06	; 6
    2dfa:	be 01       	movw	r22, r28
    2dfc:	6f 5f       	subi	r22, 0xFF	; 255
    2dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>

	start_TCB0(1);						// Start 1 ms ticks timer
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	0e 94 51 18 	call	0x30a2	; 0x30a2 <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    2e0e:	80 91 18 2b 	lds	r24, 0x2B18	; 0x802b18 <recv1_buf+0x104>
    2e12:	81 30       	cpi	r24, 0x01	; 1
    2e14:	41 f4       	brne	.+16     	; 0x2e26 <set_MOTOREncoder+0x5c>
			stop_TCB0();
    2e16:	0e 94 67 18 	call	0x30ce	; 0x30ce <stop_TCB0>
			stop_TCB0();
			return(ERROR);
		}
	}

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
    2e1a:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <recv1_buf>
    2e1e:	8f 3f       	cpi	r24, 0xFF	; 255
    2e20:	61 f0       	breq	.+24     	; 0x2e3a <set_MOTOREncoder+0x70>
		return(ERROR);
    2e22:	83 e6       	ldi	r24, 0x63	; 99
    2e24:	0b c0       	rjmp	.+22     	; 0x2e3c <set_MOTOREncoder+0x72>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// 4 ms barely works at 38400 baud
    2e26:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <ticks>
    2e2a:	90 91 13 2a 	lds	r25, 0x2A13	; 0x802a13 <ticks+0x1>
    2e2e:	c3 97       	sbiw	r24, 0x33	; 51
    2e30:	70 f3       	brcs	.-36     	; 0x2e0e <set_MOTOREncoder+0x44>
			stop_TCB0();
    2e32:	0e 94 67 18 	call	0x30ce	; 0x30ce <stop_TCB0>
			return(ERROR);
    2e36:	83 e6       	ldi	r24, 0x63	; 99
    2e38:	01 c0       	rjmp	.+2      	; 0x2e3c <set_MOTOREncoder+0x72>

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
		return(ERROR);
	}

	return(NOERROR);
    2e3a:	80 e0       	ldi	r24, 0x00	; 0

}
    2e3c:	26 96       	adiw	r28, 0x06	; 6
    2e3e:	cd bf       	out	0x3d, r28	; 61
    2e40:	de bf       	out	0x3e, r29	; 62
    2e42:	df 91       	pop	r29
    2e44:	cf 91       	pop	r28
    2e46:	08 95       	ret

00002e48 <init_MOTORS>:
	Returns
		ERROR if set_MOTOREncoder fails
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    2e48:	0f 93       	push	r16
    2e4a:	1f 93       	push	r17
    2e4c:	cf 93       	push	r28
    2e4e:	df 93       	push	r29

	static uint8_t firstTime[3] = {YES, YES, YES};
	uint8_t controller, error = 0;
    2e50:	d0 e0       	ldi	r29, 0x00	; 0
	uint32_t encoderValue;

	for (controller = 128; controller < 131; controller++) {
    2e52:	c0 e8       	ldi	r28, 0x80	; 128
    2e54:	1f c0       	rjmp	.+62     	; 0x2e94 <init_MOTORS+0x4c>
		// get saved encoder value from FRAM
		encoderValue = 22 * ROBOCOUNTSPERMICRON;	// Proxy for now
		if (set_MOTOREncoder(controller, encoderValue) == ERROR) {
    2e56:	48 e0       	ldi	r20, 0x08	; 8
    2e58:	57 e1       	ldi	r21, 0x17	; 23
    2e5a:	60 e0       	ldi	r22, 0x00	; 0
    2e5c:	70 e0       	ldi	r23, 0x00	; 0
    2e5e:	8c 2f       	mov	r24, r28
    2e60:	0e 94 e5 16 	call	0x2dca	; 0x2dca <set_MOTOREncoder>
    2e64:	83 36       	cpi	r24, 0x63	; 99
    2e66:	a9 f4       	brne	.+42     	; 0x2e92 <init_MOTORS+0x4a>
			if (!firstTime[controller - 128]) {
    2e68:	0c 2f       	mov	r16, r28
    2e6a:	10 e0       	ldi	r17, 0x00	; 0
    2e6c:	00 58       	subi	r16, 0x80	; 128
    2e6e:	11 09       	sbc	r17, r1
    2e70:	f8 01       	movw	r30, r16
    2e72:	ef 5f       	subi	r30, 0xFF	; 255
    2e74:	f7 4d       	sbci	r31, 0xD7	; 215
    2e76:	80 81       	ld	r24, Z
    2e78:	81 11       	cpse	r24, r1
    2e7a:	0a c0       	rjmp	.+20     	; 0x2e90 <init_MOTORS+0x48>
				printError(ERR_MTRSETENC, "init_MOTORS");
    2e7c:	69 ee       	ldi	r22, 0xE9	; 233
    2e7e:	7a e8       	ldi	r23, 0x8A	; 138
    2e80:	82 e3       	ldi	r24, 0x32	; 50
    2e82:	91 e0       	ldi	r25, 0x01	; 1
    2e84:	0e 94 4d 06 	call	0xc9a	; 0xc9a <printError>
				firstTime[controller - 128] = NO;
    2e88:	f8 01       	movw	r30, r16
    2e8a:	ef 5f       	subi	r30, 0xFF	; 255
    2e8c:	f7 4d       	sbci	r31, 0xD7	; 215
    2e8e:	10 82       	st	Z, r1
			}
			error++;
    2e90:	df 5f       	subi	r29, 0xFF	; 255

	static uint8_t firstTime[3] = {YES, YES, YES};
	uint8_t controller, error = 0;
	uint32_t encoderValue;

	for (controller = 128; controller < 131; controller++) {
    2e92:	cf 5f       	subi	r28, 0xFF	; 255
    2e94:	c3 38       	cpi	r28, 0x83	; 131
    2e96:	f8 f2       	brcs	.-66     	; 0x2e56 <init_MOTORS+0xe>
				firstTime[controller - 128] = NO;
			}
			error++;
		}
	}
	if (error) {
    2e98:	dd 23       	and	r29, r29
    2e9a:	11 f0       	breq	.+4      	; 0x2ea0 <init_MOTORS+0x58>
		return(ERROR);
    2e9c:	83 e6       	ldi	r24, 0x63	; 99
    2e9e:	01 c0       	rjmp	.+2      	; 0x2ea2 <init_MOTORS+0x5a>
	} else {
		return(NOERROR);
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2ea2:	df 91       	pop	r29
    2ea4:	cf 91       	pop	r28
    2ea6:	1f 91       	pop	r17
    2ea8:	0f 91       	pop	r16
    2eaa:	08 95       	ret

00002eac <init_RTC>:
			between interrupts. ticksRTC = 30719 generates an interrupt
			every minute. ticksRTC = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticksRTC)
{
    2eac:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2eae:	e0 e6       	ldi	r30, 0x60	; 96
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    2eb4:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    2eb6:	88 ed       	ldi	r24, 0xD8	; 216
    2eb8:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2eba:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2ebc:	01 c0       	rjmp	.+2      	; 0x2ec0 <init_RTC+0x14>
		asm("nop");
    2ebe:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2ec0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    2ec4:	96 fd       	sbrc	r25, 6
    2ec6:	fb cf       	rjmp	.-10     	; 0x2ebe <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2ec8:	e0 e6       	ldi	r30, 0x60	; 96
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    2ece:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    2ed0:	28 ed       	ldi	r18, 0xD8	; 216
    2ed2:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2ed4:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    2ed6:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    2ed8:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    2eda:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2edc:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    2ede:	01 c0       	rjmp	.+2      	; 0x2ee2 <init_RTC+0x36>
		asm("nop");
    2ee0:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    2ee2:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    2ee6:	91 11       	cpse	r25, r1
    2ee8:	fb cf       	rjmp	.-10     	; 0x2ee0 <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticksRTC;
    2eea:	e0 e4       	ldi	r30, 0x40	; 64
    2eec:	f1 e0       	ldi	r31, 0x01	; 1
    2eee:	42 87       	std	Z+10, r20	; 0x0a
    2ef0:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    2ef2:	82 e0       	ldi	r24, 0x02	; 2
    2ef4:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    2ef6:	85 81       	ldd	r24, Z+5	; 0x05
    2ef8:	81 60       	ori	r24, 0x01	; 1
    2efa:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    2efc:	81 eb       	ldi	r24, 0xB1	; 177
    2efe:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    2f00:	82 81       	ldd	r24, Z+2	; 0x02
    2f02:	81 60       	ori	r24, 0x01	; 1
    2f04:	82 83       	std	Z+2, r24	; 0x02
    2f06:	08 95       	ret

00002f08 <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    2f08:	1f 92       	push	r1
    2f0a:	0f 92       	push	r0
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	0f 92       	push	r0
    2f10:	11 24       	eor	r1, r1
    2f12:	2f 93       	push	r18
    2f14:	3f 93       	push	r19
    2f16:	4f 93       	push	r20
    2f18:	5f 93       	push	r21
    2f1a:	6f 93       	push	r22
    2f1c:	7f 93       	push	r23
    2f1e:	8f 93       	push	r24
    2f20:	9f 93       	push	r25
    2f22:	af 93       	push	r26
    2f24:	bf 93       	push	r27
    2f26:	ef 93       	push	r30
    2f28:	ff 93       	push	r31

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	if (timerOLED) {
    2f30:	80 91 0d 2a 	lds	r24, 0x2A0D	; 0x802a0d <timerOLED>
    2f34:	90 91 0e 2a 	lds	r25, 0x2A0E	; 0x802a0e <timerOLED+0x1>
    2f38:	00 97       	sbiw	r24, 0x00	; 0
    2f3a:	b9 f0       	breq	.+46     	; 0x2f6a <__vector_3+0x62>
		if (timerOLED > timeoutOLED) {	// Display timeout
    2f3c:	20 91 0f 2a 	lds	r18, 0x2A0F	; 0x802a0f <timeoutOLED>
    2f40:	30 91 10 2a 	lds	r19, 0x2A10	; 0x802a10 <timeoutOLED+0x1>
    2f44:	28 17       	cp	r18, r24
    2f46:	39 07       	cpc	r19, r25
    2f48:	58 f4       	brcc	.+22     	; 0x2f60 <__vector_3+0x58>
			clear_OLED(0);
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <clear_OLED>
			clear_OLED(1);
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <clear_OLED>
			timerOLED = 0;
    2f56:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED>
    2f5a:	10 92 0e 2a 	sts	0x2A0E, r1	; 0x802a0e <timerOLED+0x1>
    2f5e:	05 c0       	rjmp	.+10     	; 0x2f6a <__vector_3+0x62>
		} else {
			timerOLED++;
    2f60:	01 96       	adiw	r24, 0x01	; 1
    2f62:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timerOLED>
    2f66:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timerOLED+0x1>
		}
	}
	toggle_LED;						// Defined in led.c
    2f6a:	80 e2       	ldi	r24, 0x20	; 32
    2f6c:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>

}
    2f70:	ff 91       	pop	r31
    2f72:	ef 91       	pop	r30
    2f74:	bf 91       	pop	r27
    2f76:	af 91       	pop	r26
    2f78:	9f 91       	pop	r25
    2f7a:	8f 91       	pop	r24
    2f7c:	7f 91       	pop	r23
    2f7e:	6f 91       	pop	r22
    2f80:	5f 91       	pop	r21
    2f82:	4f 91       	pop	r20
    2f84:	3f 91       	pop	r19
    2f86:	2f 91       	pop	r18
    2f88:	0f 90       	pop	r0
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	0f 90       	pop	r0
    2f8e:	1f 90       	pop	r1
    2f90:	18 95       	reti

00002f92 <set>:
	Returns:
		GREATERPROMPT on success
		ERRORPROMPT if an invalid object was requested.
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    2f92:	cf 93       	push	r28
    2f94:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	24 e3       	ldi	r18, 0x34	; 52
    2f9a:	28 9f       	mul	r18, r24
    2f9c:	f0 01       	movw	r30, r0
    2f9e:	29 9f       	mul	r18, r25
    2fa0:	f0 0d       	add	r31, r0
    2fa2:	11 24       	eor	r1, r1
    2fa4:	eb 5f       	subi	r30, 0xFB	; 251
    2fa6:	f7 4d       	sbci	r31, 0xD7	; 215
    2fa8:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    2faa:	24 37       	cpi	r18, 0x74	; 116
    2fac:	e9 f4       	brne	.+58     	; 0x2fe8 <set+0x56>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    2fae:	24 e3       	ldi	r18, 0x34	; 52
    2fb0:	28 9f       	mul	r18, r24
    2fb2:	e0 01       	movw	r28, r0
    2fb4:	29 9f       	mul	r18, r25
    2fb6:	d0 0d       	add	r29, r0
    2fb8:	11 24       	eor	r1, r1
    2fba:	c9 5f       	subi	r28, 0xF9	; 249
    2fbc:	d7 4d       	sbci	r29, 0xD7	; 215
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	01 90       	ld	r0, Z+
    2fc2:	00 20       	and	r0, r0
    2fc4:	e9 f7       	brne	.-6      	; 0x2fc0 <set+0x2e>
    2fc6:	31 97       	sbiw	r30, 0x01	; 1
    2fc8:	ec 1b       	sub	r30, r28
    2fca:	fd 0b       	sbc	r31, r29
    2fcc:	73 97       	sbiw	r30, 0x13	; 19
    2fce:	71 f4       	brne	.+28     	; 0x2fec <set+0x5a>
				return(ERRORPROMPT);
			}
			put_time(pcmd[cstack].cvalue);
    2fd0:	ce 01       	movw	r24, r28
    2fd2:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <put_time>
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    2fd6:	24 e1       	ldi	r18, 0x14	; 20
    2fd8:	ae 01       	movw	r20, r28
    2fda:	60 e0       	ldi	r22, 0x00	; 0
    2fdc:	70 e0       	ldi	r23, 0x00	; 0
    2fde:	80 e5       	ldi	r24, 0x50	; 80
    2fe0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <write_FRAM>
			break;

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	03 c0       	rjmp	.+6      	; 0x2fee <set+0x5c>
			put_time(pcmd[cstack].cvalue);
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			return(ERRORPROMPT);
    2fe8:	82 e0       	ldi	r24, 0x02	; 2
    2fea:	01 c0       	rjmp	.+2      	; 0x2fee <set+0x5c>
	object = pcmd[cstack].cobject;

	switch(object) {
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
				return(ERRORPROMPT);
    2fec:	82 e0       	ldi	r24, 0x02	; 2

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
}
    2fee:	df 91       	pop	r29
    2ff0:	cf 91       	pop	r28
    2ff2:	08 95       	ret

00002ff4 <init_SPECID>:
	pullup. Must be called AFTER init_PORTS().
------------------------------------------------------------------------------*/
void init_SPECID(void)
{

	PORTF.PIN2CTRL &= ~PORT_PULLUPEN_bm;	// Remove pullup
    2ff4:	e0 ea       	ldi	r30, 0xA0	; 160
    2ff6:	f4 e0       	ldi	r31, 0x04	; 4
    2ff8:	82 89       	ldd	r24, Z+18	; 0x12
    2ffa:	87 7f       	andi	r24, 0xF7	; 247
    2ffc:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.DIRCLR = PIN2_bm;					// Set as input
    2ffe:	84 e0       	ldi	r24, 0x04	; 4
    3000:	82 83       	std	Z+2, r24	; 0x02
    3002:	08 95       	ret

00003004 <get_temperature>:
float get_temperature(uint8_t sensor)
{

	float temperature;

	switch (sensor) {
    3004:	83 30       	cpi	r24, 0x03	; 3
    3006:	18 f0       	brcs	.+6      	; 0x300e <get_temperature+0xa>
    3008:	83 30       	cpi	r24, 0x03	; 3
    300a:	21 f0       	breq	.+8      	; 0x3014 <get_temperature+0x10>
    300c:	06 c0       	rjmp	.+12     	; 0x301a <get_temperature+0x16>
		case 0:
		case 1:
		case 2:
			temperature = read_AD590(sensor);
    300e:	0e 94 49 01 	call	0x292	; 0x292 <read_AD590>
			break;
    3012:	08 95       	ret
		case 3:
			temperature = read_MCP9808();
    3014:	0e 94 90 08 	call	0x1120	; 0x1120 <read_MCP9808>
			break;
    3018:	08 95       	ret
		default:
			temperature = -666.0;
    301a:	60 e0       	ldi	r22, 0x00	; 0
    301c:	70 e8       	ldi	r23, 0x80	; 128
    301e:	86 e2       	ldi	r24, 0x26	; 38
    3020:	94 ec       	ldi	r25, 0xC4	; 196
			break;
	}

	return(temperature);

}
    3022:	08 95       	ret

00003024 <testroutine>:
#include "usart.h"
#include "roboclaw.h"
#include "testroutine.h"

void testroutine(void)
{
    3024:	0f 93       	push	r16
    3026:	1f 93       	push	r17
    3028:	cf 93       	push	r28
    302a:	df 93       	push	r29
    302c:	cd b7       	in	r28, 0x3d	; 61
    302e:	de b7       	in	r29, 0x3e	; 62
    3030:	e2 97       	sbiw	r28, 0x32	; 50
    3032:	cd bf       	out	0x3d, r28	; 61
    3034:	de bf       	out	0x3e, r29	; 62


	char buf[50];

	start_TCB0(1);
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	0e 94 51 18 	call	0x30a2	; 0x30a2 <start_TCB0>
    303e:	8d e8       	ldi	r24, 0x8D	; 141
    3040:	90 e2       	ldi	r25, 0x20	; 32
    3042:	01 97       	sbiw	r24, 0x01	; 1
    3044:	f1 f7       	brne	.-4      	; 0x3042 <testroutine+0x1e>
    3046:	00 00       	nop
	_delay_ms(10);
	stop_TCB0();
    3048:	0e 94 67 18 	call	0x30ce	; 0x30ce <stop_TCB0>
	sprintf(buf, "ticks = %d\r\n", ticks);
    304c:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <ticks>
    3050:	90 91 13 2a 	lds	r25, 0x2A13	; 0x802a13 <ticks+0x1>
    3054:	9f 93       	push	r25
    3056:	8f 93       	push	r24
    3058:	85 ef       	ldi	r24, 0xF5	; 245
    305a:	9a e8       	ldi	r25, 0x8A	; 138
    305c:	9f 93       	push	r25
    305e:	8f 93       	push	r24
    3060:	8e 01       	movw	r16, r28
    3062:	0f 5f       	subi	r16, 0xFF	; 255
    3064:	1f 4f       	sbci	r17, 0xFF	; 255
    3066:	1f 93       	push	r17
    3068:	0f 93       	push	r16
    306a:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <sprintf>
	send_USART(0, (uint8_t*) buf, strlen(buf));
    306e:	f8 01       	movw	r30, r16
    3070:	01 90       	ld	r0, Z+
    3072:	00 20       	and	r0, r0
    3074:	e9 f7       	brne	.-6      	; 0x3070 <testroutine+0x4c>
    3076:	31 97       	sbiw	r30, 0x01	; 1
    3078:	af 01       	movw	r20, r30
    307a:	40 1b       	sub	r20, r16
    307c:	51 0b       	sbc	r21, r17
    307e:	b8 01       	movw	r22, r16
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	0e 94 51 19 	call	0x32a2	; 0x32a2 <send_USART>
	write_MCP23008(addr, OLAT, 0x00);
	_delay_ms(1000);
	write_MCP23008(addr, OLAT, 0xFF);
	send_USART(0, (uint8_t*) buf, strlen(buf));
*/
	return;
    3086:	0f 90       	pop	r0
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	0f 90       	pop	r0
    308e:	0f 90       	pop	r0
    3090:	0f 90       	pop	r0
    3092:	e2 96       	adiw	r28, 0x32	; 50
    3094:	cd bf       	out	0x3d, r28	; 61
    3096:	de bf       	out	0x3e, r29	; 62
    3098:	df 91       	pop	r29
    309a:	cf 91       	pop	r28
    309c:	1f 91       	pop	r17
    309e:	0f 91       	pop	r16
    30a0:	08 95       	ret

000030a2 <start_TCB0>:
#include "timers.h"

void start_TCB0(uint16_t msPeriod)
{

	ticks = 0;
    30a2:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <ticks>
    30a6:	10 92 13 2a 	sts	0x2A13, r1	; 0x802a13 <ticks+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    30aa:	25 e0       	ldi	r18, 0x05	; 5
    30ac:	3d e0       	ldi	r19, 0x0D	; 13
    30ae:	ac 01       	movw	r20, r24
    30b0:	42 9f       	mul	r20, r18
    30b2:	c0 01       	movw	r24, r0
    30b4:	43 9f       	mul	r20, r19
    30b6:	90 0d       	add	r25, r0
    30b8:	52 9f       	mul	r21, r18
    30ba:	90 0d       	add	r25, r0
    30bc:	11 24       	eor	r1, r1
    30be:	e0 e8       	ldi	r30, 0x80	; 128
    30c0:	fa e0       	ldi	r31, 0x0A	; 10
    30c2:	84 87       	std	Z+12, r24	; 0x0c
    30c4:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	85 83       	std	Z+5, r24	; 0x05
//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    30ca:	80 83       	st	Z, r24
    30cc:	08 95       	ret

000030ce <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    30ce:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    30d2:	08 95       	ret

000030d4 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    30d4:	1f 92       	push	r1
    30d6:	0f 92       	push	r0
    30d8:	0f b6       	in	r0, 0x3f	; 63
    30da:	0f 92       	push	r0
    30dc:	11 24       	eor	r1, r1
    30de:	8f 93       	push	r24
    30e0:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks++;
    30e8:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <ticks>
    30ec:	90 91 13 2a 	lds	r25, 0x2A13	; 0x802a13 <ticks+0x1>
    30f0:	01 96       	adiw	r24, 0x01	; 1
    30f2:	80 93 12 2a 	sts	0x2A12, r24	; 0x802a12 <ticks>
    30f6:	90 93 13 2a 	sts	0x2A13, r25	; 0x802a13 <ticks+0x1>

    30fa:	9f 91       	pop	r25
    30fc:	8f 91       	pop	r24
    30fe:	0f 90       	pop	r0
    3100:	0f be       	out	0x3f, r0	; 63
    3102:	0f 90       	pop	r0
    3104:	1f 90       	pop	r1
    3106:	18 95       	reti

00003108 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    3108:	e0 ea       	ldi	r30, 0xA0	; 160
    310a:	f8 e0       	ldi	r31, 0x08	; 8
    310c:	8b e0       	ldi	r24, 0x0B	; 11
    310e:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    3110:	83 81       	ldd	r24, Z+3	; 0x03
    3112:	81 60       	ori	r24, 0x01	; 1
    3114:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    3116:	85 81       	ldd	r24, Z+5	; 0x05
    3118:	81 60       	ori	r24, 0x01	; 1
    311a:	85 83       	std	Z+5, r24	; 0x05
    311c:	08 95       	ret

0000311e <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    311e:	01 c0       	rjmp	.+2      	; 0x3122 <read_TWI+0x4>
		asm("nop");								// Should set timer here
    3120:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    3122:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3126:	88 23       	and	r24, r24
    3128:	dc f7       	brge	.-10     	; 0x3120 <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    312a:	e0 ea       	ldi	r30, 0xA0	; 160
    312c:	f8 e0       	ldi	r31, 0x08	; 8
    312e:	84 81       	ldd	r24, Z+4	; 0x04
    3130:	8b 7f       	andi	r24, 0xFB	; 251
    3132:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    3134:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    3136:	94 81       	ldd	r25, Z+4	; 0x04
    3138:	92 60       	ori	r25, 0x02	; 2
    313a:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    313c:	08 95       	ret

0000313e <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    313e:	01 c0       	rjmp	.+2      	; 0x3142 <readlast_TWI+0x4>
		asm("nop");
    3140:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    3142:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3146:	88 23       	and	r24, r24
    3148:	dc f7       	brge	.-10     	; 0x3140 <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    314a:	e0 ea       	ldi	r30, 0xA0	; 160
    314c:	f8 e0       	ldi	r31, 0x08	; 8
    314e:	84 81       	ldd	r24, Z+4	; 0x04
    3150:	84 60       	ori	r24, 0x04	; 4
    3152:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    3154:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    3156:	08 95       	ret

00003158 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    3158:	61 30       	cpi	r22, 0x01	; 1
    315a:	39 f4       	brne	.+14     	; 0x316a <start_TWI+0x12>
//		addr = ((addr << 1) | 0x01);
		TWI0.MADDR = ((addr << 1) | 0x01);
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	88 0f       	add	r24, r24
    3160:	99 1f       	adc	r25, r25
    3162:	81 60       	ori	r24, 0x01	; 1
    3164:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    3168:	03 c0       	rjmp	.+6      	; 0x3170 <start_TWI+0x18>
	} else {
//		addr = ((addr << 1) & ~0x01);
//		addr = (addr << 1);
		TWI0.MADDR = (addr << 1);
    316a:	88 0f       	add	r24, r24
    316c:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	0e 94 51 18 	call	0x30a2	; 0x30a2 <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    3178:	0b c0       	rjmp	.+22     	; 0x3190 <start_TWI+0x38>
		if (ticks > 10) {
    317a:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <ticks>
    317e:	90 91 13 2a 	lds	r25, 0x2A13	; 0x802a13 <ticks+0x1>
    3182:	0b 97       	sbiw	r24, 0x0b	; 11
    3184:	20 f0       	brcs	.+8      	; 0x318e <start_TWI+0x36>
			stop_TCB0();
    3186:	0e 94 67 18 	call	0x30ce	; 0x30ce <stop_TCB0>
			return(ERROR);
    318a:	83 e6       	ldi	r24, 0x63	; 99
    318c:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
    318e:	00 00       	nop
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    3190:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3194:	80 7c       	andi	r24, 0xC0	; 192
    3196:	89 f3       	breq	.-30     	; 0x317a <start_TWI+0x22>
			return(ERROR);
		}
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    3198:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    319c:	82 fd       	sbrc	r24, 2
    319e:	0c c0       	rjmp	.+24     	; 0x31b8 <start_TWI+0x60>
		return(TWIBUSERR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    31a0:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31a4:	83 fd       	sbrc	r24, 3
    31a6:	0a c0       	rjmp	.+20     	; 0x31bc <start_TWI+0x64>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    31a8:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31ac:	89 2f       	mov	r24, r25
    31ae:	80 71       	andi	r24, 0x10	; 16
    31b0:	94 ff       	sbrs	r25, 4
    31b2:	05 c0       	rjmp	.+10     	; 0x31be <start_TWI+0x66>
		return(TWINODEVICE);
    31b4:	84 e0       	ldi	r24, 0x04	; 4
    31b6:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERR);
    31b8:	82 e0       	ldi	r24, 0x02	; 2
    31ba:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    31bc:	83 e0       	ldi	r24, 0x03	; 3
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
	} else {									// OK
		return(NOERROR);
	}
}
    31be:	08 95       	ret

000031c0 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    31c0:	87 e0       	ldi	r24, 0x07	; 7
    31c2:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    31c6:	08 95       	ret

000031c8 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    31c8:	01 c0       	rjmp	.+2      	; 0x31cc <write_TWI+0x4>
		asm("nop");
    31ca:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    31cc:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31d0:	96 ff       	sbrs	r25, 6
    31d2:	fb cf       	rjmp	.-10     	; 0x31ca <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    31d4:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    31d8:	01 c0       	rjmp	.+2      	; 0x31dc <write_TWI+0x14>
		asm("nop");
    31da:	00 00       	nop
		asm("nop");
	}

	TWI0.MDATA = data;

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    31dc:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31e0:	86 ff       	sbrs	r24, 6
    31e2:	fb cf       	rjmp	.-10     	; 0x31da <write_TWI+0x12>
		asm("nop");
	}

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    31e4:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    31e8:	89 2f       	mov	r24, r25
    31ea:	80 71       	andi	r24, 0x10	; 16
    31ec:	94 fd       	sbrc	r25, 4
		return(TWINODEVICE);
    31ee:	84 e0       	ldi	r24, 0x04	; 4
	} else {
		return(0);
	}

}
    31f0:	08 95       	ret

000031f2 <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    31f2:	e0 e0       	ldi	r30, 0x00	; 0
    31f4:	f4 e0       	ldi	r31, 0x04	; 4
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    31fa:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    31fc:	e0 e0       	ldi	r30, 0x00	; 0
    31fe:	f8 e0       	ldi	r31, 0x08	; 8
    3200:	2d e6       	ldi	r18, 0x6D	; 109
    3202:	35 e0       	ldi	r19, 0x05	; 5
    3204:	20 87       	std	Z+8, r18	; 0x08
    3206:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    3208:	95 81       	ldd	r25, Z+5	; 0x05
    320a:	90 68       	ori	r25, 0x80	; 128
    320c:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    320e:	96 81       	ldd	r25, Z+6	; 0x06
    3210:	90 64       	ori	r25, 0x40	; 64
    3212:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART Receiver
    3214:	96 81       	ldd	r25, Z+6	; 0x06
    3216:	90 68       	ori	r25, 0x80	; 128
    3218:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;
    321a:	10 92 1d 2d 	sts	0x2D1D, r1	; 0x802d1d <send0_buf+0xff>
	send0_buf.tail = 0;
    321e:	10 92 1e 2d 	sts	0x2D1E, r1	; 0x802d1e <send0_buf+0x100>
	send0_buf.done = YES;
    3222:	80 93 22 2d 	sts	0x2D22, r24	; 0x802d22 <send0_buf+0x104>
	recv0_buf.head = 0;
    3226:	10 92 18 2c 	sts	0x2C18, r1	; 0x802c18 <recv0_buf+0xff>
	recv0_buf.tail = 0;
    322a:	10 92 19 2c 	sts	0x2C19, r1	; 0x802c19 <recv0_buf+0x100>
	recv0_buf.data[0] = '\0';
    322e:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv0_buf>
	recv0_buf.length = 0;
    3232:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0x102>
	recv0_buf.done = NO;
    3236:	10 92 1d 2c 	sts	0x2C1D, r1	; 0x802c1d <recv0_buf+0x104>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    323a:	e0 e4       	ldi	r30, 0x40	; 64
    323c:	f4 e0       	ldi	r31, 0x04	; 4
    323e:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    3240:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
    3242:	e0 e2       	ldi	r30, 0x20	; 32
    3244:	f8 e0       	ldi	r31, 0x08	; 8
    3246:	4b e5       	ldi	r20, 0x5B	; 91
    3248:	51 e0       	ldi	r21, 0x01	; 1
    324a:	40 87       	std	Z+8, r20	; 0x08
    324c:	51 87       	std	Z+9, r21	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    324e:	95 81       	ldd	r25, Z+5	; 0x05
    3250:	90 68       	ori	r25, 0x80	; 128
    3252:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;
    3254:	96 81       	ldd	r25, Z+6	; 0x06
    3256:	90 64       	ori	r25, 0x40	; 64
    3258:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;
    325a:	96 81       	ldd	r25, Z+6	; 0x06
    325c:	90 68       	ori	r25, 0x80	; 128
    325e:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    3260:	10 92 2c 30 	sts	0x302C, r1	; 0x80302c <send1_buf+0xff>
	send1_buf.tail = 0;
    3264:	10 92 2d 30 	sts	0x302D, r1	; 0x80302d <send1_buf+0x100>
	send1_buf.done = YES;
    3268:	80 93 31 30 	sts	0x3031, r24	; 0x803031 <send1_buf+0x104>
	recv1_buf.head = 0;
    326c:	10 92 13 2b 	sts	0x2B13, r1	; 0x802b13 <recv1_buf+0xff>
	recv1_buf.tail = 0;
    3270:	10 92 14 2b 	sts	0x2B14, r1	; 0x802b14 <recv1_buf+0x100>
	recv1_buf.data[0] = '\0';
    3274:	10 92 14 2a 	sts	0x2A14, r1	; 0x802a14 <recv1_buf>
	recv1_buf.done = NO;
    3278:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0x104>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    327c:	e0 e2       	ldi	r30, 0x20	; 32
    327e:	f4 e0       	ldi	r31, 0x04	; 4
    3280:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    3282:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    3284:	e0 e6       	ldi	r30, 0x60	; 96
    3286:	f8 e0       	ldi	r31, 0x08	; 8
    3288:	20 87       	std	Z+8, r18	; 0x08
    328a:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    328c:	96 81       	ldd	r25, Z+6	; 0x06
    328e:	90 64       	ori	r25, 0x40	; 64
    3290:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    3292:	96 81       	ldd	r25, Z+6	; 0x06
    3294:	90 68       	ori	r25, 0x80	; 128
    3296:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    3298:	80 93 2c 2f 	sts	0x2F2C, r24	; 0x802f2c <send3_buf+0x104>
	recv3_buf.done = NO;
    329c:	10 92 27 2e 	sts	0x2E27, r1	; 0x802e27 <recv3_buf+0x104>
    32a0:	08 95       	ret

000032a2 <send_USART>:
		port - The USARTn port (0, 1, or 3)
		data - Contains the data to send
		nbytes - Number of bytes to send
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    32a2:	0f 93       	push	r16
    32a4:	1f 93       	push	r17
    32a6:	cf 93       	push	r28
    32a8:	df 93       	push	r29
    32aa:	eb 01       	movw	r28, r22
    32ac:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    32ae:	81 30       	cpi	r24, 0x01	; 1
    32b0:	01 f1       	breq	.+64     	; 0x32f2 <send_USART+0x50>
    32b2:	b0 f0       	brcs	.+44     	; 0x32e0 <send_USART+0x3e>
    32b4:	83 30       	cpi	r24, 0x03	; 3
    32b6:	09 f4       	brne	.+2      	; 0x32ba <send_USART+0x18>
    32b8:	6d c0       	rjmp	.+218    	; 0x3394 <send_USART+0xf2>
    32ba:	74 c0       	rjmp	.+232    	; 0x33a4 <send_USART+0x102>
		case 0:
			for (i = 0; i < nbytes; i++) {
				send0_buf.data[send0_buf.head] = *data++;
    32bc:	ed e1       	ldi	r30, 0x1D	; 29
    32be:	fd e2       	ldi	r31, 0x2D	; 45
    32c0:	80 81       	ld	r24, Z
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	38 81       	ld	r19, Y
    32c6:	dc 01       	movw	r26, r24
    32c8:	a2 5e       	subi	r26, 0xE2	; 226
    32ca:	b3 4d       	sbci	r27, 0xD3	; 211
    32cc:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    32ce:	01 96       	adiw	r24, 0x01	; 1
    32d0:	6f ef       	ldi	r22, 0xFF	; 255
    32d2:	70 e0       	ldi	r23, 0x00	; 0
    32d4:	0e 94 b1 20 	call	0x4162	; 0x4162 <__divmodhi4>
    32d8:	80 83       	st	Z, r24
	uint8_t i;
	uint16_t crc;

	switch (port) {
		case 0:
			for (i = 0; i < nbytes; i++) {
    32da:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    32dc:	21 96       	adiw	r28, 0x01	; 1
    32de:	01 c0       	rjmp	.+2      	; 0x32e2 <send_USART+0x40>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    32e0:	20 e0       	ldi	r18, 0x00	; 0
		case 0:
			for (i = 0; i < nbytes; i++) {
    32e2:	21 17       	cp	r18, r17
    32e4:	58 f3       	brcs	.-42     	; 0x32bc <send_USART+0x1a>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    32e6:	e0 e0       	ldi	r30, 0x00	; 0
    32e8:	f8 e0       	ldi	r31, 0x08	; 8
    32ea:	85 81       	ldd	r24, Z+5	; 0x05
    32ec:	80 62       	ori	r24, 0x20	; 32
    32ee:	85 83       	std	Z+5, r24	; 0x05
			break;
    32f0:	59 c0       	rjmp	.+178    	; 0x33a4 <send_USART+0x102>

		case 1:
			crc = crc16(data, nbytes);
    32f2:	64 2f       	mov	r22, r20
    32f4:	70 e0       	ldi	r23, 0x00	; 0
    32f6:	ce 01       	movw	r24, r28
    32f8:	0e 94 1b 14 	call	0x2836	; 0x2836 <crc16>
    32fc:	48 2f       	mov	r20, r24
    32fe:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	11 c0       	rjmp	.+34     	; 0x3326 <send_USART+0x84>
				send1_buf.data[send1_buf.head] = *data++;
    3304:	ec e2       	ldi	r30, 0x2C	; 44
    3306:	f0 e3       	ldi	r31, 0x30	; 48
    3308:	80 81       	ld	r24, Z
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	38 81       	ld	r19, Y
    330e:	dc 01       	movw	r26, r24
    3310:	a3 5d       	subi	r26, 0xD3	; 211
    3312:	b0 4d       	sbci	r27, 0xD0	; 208
    3314:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3316:	01 96       	adiw	r24, 0x01	; 1
    3318:	6f ef       	ldi	r22, 0xFF	; 255
    331a:	70 e0       	ldi	r23, 0x00	; 0
    331c:	0e 94 b1 20 	call	0x4162	; 0x4162 <__divmodhi4>
    3320:	80 83       	st	Z, r24
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    3322:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    3324:	21 96       	adiw	r28, 0x01	; 1
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    3326:	21 17       	cp	r18, r17
    3328:	68 f3       	brcs	.-38     	; 0x3304 <send_USART+0x62>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    332a:	ec e2       	ldi	r30, 0x2C	; 44
    332c:	f0 e3       	ldi	r31, 0x30	; 48
    332e:	80 81       	ld	r24, Z
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	dc 01       	movw	r26, r24
    3334:	a3 5d       	subi	r26, 0xD3	; 211
    3336:	b0 4d       	sbci	r27, 0xD0	; 208
    3338:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    333a:	01 96       	adiw	r24, 0x01	; 1
    333c:	2f ef       	ldi	r18, 0xFF	; 255
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	b9 01       	movw	r22, r18
    3342:	0e 94 b1 20 	call	0x4162	; 0x4162 <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	dc 01       	movw	r26, r24
    334a:	a3 5d       	subi	r26, 0xD3	; 211
    334c:	b0 4d       	sbci	r27, 0xD0	; 208
    334e:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3350:	01 96       	adiw	r24, 0x01	; 1
    3352:	b9 01       	movw	r22, r18
    3354:	0e 94 b1 20 	call	0x4162	; 0x4162 <__divmodhi4>
    3358:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    335a:	1e 5f       	subi	r17, 0xFE	; 254
    335c:	10 93 2e 30 	sts	0x302E, r17	; 0x80302e <send1_buf+0x101>
			send1_buf.nxfrd = 0;
    3360:	10 92 30 30 	sts	0x3030, r1	; 0x803030 <send1_buf+0x103>
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3364:	e0 e2       	ldi	r30, 0x20	; 32
    3366:	f8 e0       	ldi	r31, 0x08	; 8
    3368:	85 81       	ldd	r24, Z+5	; 0x05
    336a:	80 62       	ori	r24, 0x20	; 32
    336c:	85 83       	std	Z+5, r24	; 0x05
			break;
    336e:	1a c0       	rjmp	.+52     	; 0x33a4 <send_USART+0x102>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    3370:	e7 e2       	ldi	r30, 0x27	; 39
    3372:	ff e2       	ldi	r31, 0x2F	; 47
    3374:	80 81       	ld	r24, Z
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	38 81       	ld	r19, Y
    337a:	dc 01       	movw	r26, r24
    337c:	a8 5d       	subi	r26, 0xD8	; 216
    337e:	b1 4d       	sbci	r27, 0xD1	; 209
    3380:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    3382:	01 96       	adiw	r24, 0x01	; 1
    3384:	6f ef       	ldi	r22, 0xFF	; 255
    3386:	70 e0       	ldi	r23, 0x00	; 0
    3388:	0e 94 b1 20 	call	0x4162	; 0x4162 <__divmodhi4>
    338c:	80 83       	st	Z, r24
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    338e:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    3390:	21 96       	adiw	r28, 0x01	; 1
    3392:	01 c0       	rjmp	.+2      	; 0x3396 <send_USART+0xf4>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    3394:	20 e0       	ldi	r18, 0x00	; 0
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    3396:	21 17       	cp	r18, r17
    3398:	58 f3       	brcs	.-42     	; 0x3370 <send_USART+0xce>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    339a:	e0 e6       	ldi	r30, 0x60	; 96
    339c:	f8 e0       	ldi	r31, 0x08	; 8
    339e:	85 81       	ldd	r24, Z+5	; 0x05
    33a0:	80 62       	ori	r24, 0x20	; 32
    33a2:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    33a4:	df 91       	pop	r29
    33a6:	cf 91       	pop	r28
    33a8:	1f 91       	pop	r17
    33aa:	0f 91       	pop	r16
    33ac:	08 95       	ret

000033ae <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    33ae:	1f 92       	push	r1
    33b0:	0f 92       	push	r0
    33b2:	0f b6       	in	r0, 0x3f	; 63
    33b4:	0f 92       	push	r0
    33b6:	11 24       	eor	r1, r1
    33b8:	5f 93       	push	r21
    33ba:	6f 93       	push	r22
    33bc:	7f 93       	push	r23
    33be:	8f 93       	push	r24
    33c0:	9f 93       	push	r25
    33c2:	af 93       	push	r26
    33c4:	bf 93       	push	r27
    33c6:	ef 93       	push	r30
    33c8:	ff 93       	push	r31

	uint8_t c;

	if (recv0_buf.length < BUFSIZE) {
    33ca:	80 91 1b 2c 	lds	r24, 0x2C1B	; 0x802c1b <recv0_buf+0x102>
    33ce:	8f 3f       	cpi	r24, 0xFF	; 255
    33d0:	19 f1       	breq	.+70     	; 0x3418 <__vector_17+0x6a>
		c = USART0.RXDATAL;
    33d2:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
		if ((char) c == '\r') {
    33d6:	8d 30       	cpi	r24, 0x0D	; 13
    33d8:	51 f4       	brne	.+20     	; 0x33ee <__vector_17+0x40>
			recv0_buf.done = YES;
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	80 93 1d 2c 	sts	0x2C1D, r24	; 0x802c1d <recv0_buf+0x104>
			recv0_buf.data[recv0_buf.head] = '\0';
    33e0:	e0 91 18 2c 	lds	r30, 0x2C18	; 0x802c18 <recv0_buf+0xff>
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	e7 5e       	subi	r30, 0xE7	; 231
    33e8:	f4 4d       	sbci	r31, 0xD4	; 212
    33ea:	10 82       	st	Z, r1
    33ec:	06 c0       	rjmp	.+12     	; 0x33fa <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    33ee:	e0 91 18 2c 	lds	r30, 0x2C18	; 0x802c18 <recv0_buf+0xff>
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	e7 5e       	subi	r30, 0xE7	; 231
    33f6:	f4 4d       	sbci	r31, 0xD4	; 212
    33f8:	80 83       	st	Z, r24
		}
		recv0_buf.length++;
    33fa:	eb e1       	ldi	r30, 0x1B	; 27
    33fc:	fc e2       	ldi	r31, 0x2C	; 44
    33fe:	80 81       	ld	r24, Z
    3400:	8f 5f       	subi	r24, 0xFF	; 255
    3402:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    3404:	e8 e1       	ldi	r30, 0x18	; 24
    3406:	fc e2       	ldi	r31, 0x2C	; 44
    3408:	80 81       	ld	r24, Z
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	01 96       	adiw	r24, 0x01	; 1
    340e:	6f ef       	ldi	r22, 0xFF	; 255
    3410:	70 e0       	ldi	r23, 0x00	; 0
    3412:	0e 94 b1 20 	call	0x4162	; 0x4162 <__divmodhi4>
    3416:	80 83       	st	Z, r24
	}
}
    3418:	ff 91       	pop	r31
    341a:	ef 91       	pop	r30
    341c:	bf 91       	pop	r27
    341e:	af 91       	pop	r26
    3420:	9f 91       	pop	r25
    3422:	8f 91       	pop	r24
    3424:	7f 91       	pop	r23
    3426:	6f 91       	pop	r22
    3428:	5f 91       	pop	r21
    342a:	0f 90       	pop	r0
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	0f 90       	pop	r0
    3430:	1f 90       	pop	r1
    3432:	18 95       	reti

00003434 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    3434:	1f 92       	push	r1
    3436:	0f 92       	push	r0
    3438:	0f b6       	in	r0, 0x3f	; 63
    343a:	0f 92       	push	r0
    343c:	11 24       	eor	r1, r1
    343e:	8f 93       	push	r24
    3440:	9f 93       	push	r25
    3442:	ef 93       	push	r30
    3444:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    3446:	e0 e0       	ldi	r30, 0x00	; 0
    3448:	f8 e0       	ldi	r31, 0x08	; 8
    344a:	85 81       	ldd	r24, Z+5	; 0x05
    344c:	8f 7d       	andi	r24, 0xDF	; 223
    344e:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    3450:	80 91 1d 2d 	lds	r24, 0x2D1D	; 0x802d1d <send0_buf+0xff>
    3454:	e0 91 1e 2d 	lds	r30, 0x2D1E	; 0x802d1e <send0_buf+0x100>
    3458:	8e 17       	cp	r24, r30
    345a:	b9 f0       	breq	.+46     	; 0x348a <__vector_18+0x56>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    345c:	91 e0       	ldi	r25, 0x01	; 1
    345e:	9e 0f       	add	r25, r30
    3460:	90 93 1e 2d 	sts	0x2D1E, r25	; 0x802d1e <send0_buf+0x100>
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	e2 5e       	subi	r30, 0xE2	; 226
    3468:	f3 4d       	sbci	r31, 0xD3	; 211
    346a:	80 81       	ld	r24, Z
    346c:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	9f 3f       	cpi	r25, 0xFF	; 255
    3474:	08 f4       	brcc	.+2      	; 0x3478 <__vector_18+0x44>
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	89 0f       	add	r24, r25
    347a:	80 93 1e 2d 	sts	0x2D1E, r24	; 0x802d1e <send0_buf+0x100>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    347e:	e0 e0       	ldi	r30, 0x00	; 0
    3480:	f8 e0       	ldi	r31, 0x08	; 8
    3482:	85 81       	ldd	r24, Z+5	; 0x05
    3484:	80 62       	ori	r24, 0x20	; 32
    3486:	85 83       	std	Z+5, r24	; 0x05
    3488:	03 c0       	rjmp	.+6      	; 0x3490 <__vector_18+0x5c>
	} else {
		send0_buf.done = YES;
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	80 93 22 2d 	sts	0x2D22, r24	; 0x802d22 <send0_buf+0x104>
	}

}
    3490:	ff 91       	pop	r31
    3492:	ef 91       	pop	r30
    3494:	9f 91       	pop	r25
    3496:	8f 91       	pop	r24
    3498:	0f 90       	pop	r0
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	0f 90       	pop	r0
    349e:	1f 90       	pop	r1
    34a0:	18 95       	reti

000034a2 <__vector_26>:
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.

------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    34a2:	1f 92       	push	r1
    34a4:	0f 92       	push	r0
    34a6:	0f b6       	in	r0, 0x3f	; 63
    34a8:	0f 92       	push	r0
    34aa:	11 24       	eor	r1, r1
    34ac:	2f 93       	push	r18
    34ae:	8f 93       	push	r24
    34b0:	9f 93       	push	r25
    34b2:	ef 93       	push	r30
    34b4:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    34b6:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>

	if (recv1_buf.nxfrd < recv1_buf.nbytes) {
    34ba:	e0 91 17 2b 	lds	r30, 0x2B17	; 0x802b17 <recv1_buf+0x103>
    34be:	80 91 15 2b 	lds	r24, 0x2B15	; 0x802b15 <recv1_buf+0x101>
    34c2:	e8 17       	cp	r30, r24
    34c4:	40 f4       	brcc	.+16     	; 0x34d6 <__vector_26+0x34>
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    34c6:	21 e0       	ldi	r18, 0x01	; 1
    34c8:	2e 0f       	add	r18, r30
    34ca:	20 93 17 2b 	sts	0x2B17, r18	; 0x802b17 <recv1_buf+0x103>
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	ec 5e       	subi	r30, 0xEC	; 236
    34d2:	f5 4d       	sbci	r31, 0xD5	; 213
    34d4:	90 83       	st	Z, r25
	}

	if (recv1_buf.nxfrd >= recv1_buf.nbytes) {
    34d6:	90 91 17 2b 	lds	r25, 0x2B17	; 0x802b17 <recv1_buf+0x103>
    34da:	98 17       	cp	r25, r24
    34dc:	18 f0       	brcs	.+6      	; 0x34e4 <__vector_26+0x42>
		recv1_buf.done = YES;
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	80 93 18 2b 	sts	0x2B18, r24	; 0x802b18 <recv1_buf+0x104>
	}

}
    34e4:	ff 91       	pop	r31
    34e6:	ef 91       	pop	r30
    34e8:	9f 91       	pop	r25
    34ea:	8f 91       	pop	r24
    34ec:	2f 91       	pop	r18
    34ee:	0f 90       	pop	r0
    34f0:	0f be       	out	0x3f, r0	; 63
    34f2:	0f 90       	pop	r0
    34f4:	1f 90       	pop	r1
    34f6:	18 95       	reti

000034f8 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    34f8:	1f 92       	push	r1
    34fa:	0f 92       	push	r0
    34fc:	0f b6       	in	r0, 0x3f	; 63
    34fe:	0f 92       	push	r0
    3500:	11 24       	eor	r1, r1
    3502:	8f 93       	push	r24
    3504:	9f 93       	push	r25
    3506:	ef 93       	push	r30
    3508:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    350a:	e0 e2       	ldi	r30, 0x20	; 32
    350c:	f8 e0       	ldi	r31, 0x08	; 8
    350e:	85 81       	ldd	r24, Z+5	; 0x05
    3510:	8f 7d       	andi	r24, 0xDF	; 223
    3512:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    3514:	80 91 2c 30 	lds	r24, 0x302C	; 0x80302c <send1_buf+0xff>
    3518:	e0 91 2d 30 	lds	r30, 0x302D	; 0x80302d <send1_buf+0x100>
    351c:	8e 17       	cp	r24, r30
    351e:	b9 f0       	breq	.+46     	; 0x354e <__vector_27+0x56>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    3520:	91 e0       	ldi	r25, 0x01	; 1
    3522:	9e 0f       	add	r25, r30
    3524:	90 93 2d 30 	sts	0x302D, r25	; 0x80302d <send1_buf+0x100>
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    352a:	e3 5d       	subi	r30, 0xD3	; 211
    352c:	f0 4d       	sbci	r31, 0xD0	; 208
    352e:	80 81       	ld	r24, Z
    3530:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	9f 3f       	cpi	r25, 0xFF	; 255
    3538:	08 f4       	brcc	.+2      	; 0x353c <__vector_27+0x44>
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	89 0f       	add	r24, r25
    353e:	80 93 2d 30 	sts	0x302D, r24	; 0x80302d <send1_buf+0x100>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    3542:	e0 e2       	ldi	r30, 0x20	; 32
    3544:	f8 e0       	ldi	r31, 0x08	; 8
    3546:	85 81       	ldd	r24, Z+5	; 0x05
    3548:	80 62       	ori	r24, 0x20	; 32
    354a:	85 83       	std	Z+5, r24	; 0x05
    354c:	03 c0       	rjmp	.+6      	; 0x3554 <__vector_27+0x5c>
	} else {
		send1_buf.done = YES;
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	80 93 31 30 	sts	0x3031, r24	; 0x803031 <send1_buf+0x104>
	if (send1_buf.nxfrd >= send1_buf.nbytes) {
		USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
		send1_buf.done = YES;
	}
*/
}
    3554:	ff 91       	pop	r31
    3556:	ef 91       	pop	r30
    3558:	9f 91       	pop	r25
    355a:	8f 91       	pop	r24
    355c:	0f 90       	pop	r0
    355e:	0f be       	out	0x3f, r0	; 63
    3560:	0f 90       	pop	r0
    3562:	1f 90       	pop	r1
    3564:	18 95       	reti

00003566 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    3566:	1f 92       	push	r1
    3568:	0f 92       	push	r0
    356a:	0f b6       	in	r0, 0x3f	; 63
    356c:	0f 92       	push	r0
    356e:	11 24       	eor	r1, r1
    3570:	8f 93       	push	r24
    3572:	9f 93       	push	r25
    3574:	af 93       	push	r26
    3576:	bf 93       	push	r27
    3578:	ef 93       	push	r30
    357a:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    357c:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    3580:	8d 30       	cpi	r24, 0x0D	; 13
    3582:	21 f0       	breq	.+8      	; 0x358c <__vector_37+0x26>
    3584:	e0 91 26 2e 	lds	r30, 0x2E26	; 0x802e26 <recv3_buf+0x103>
    3588:	ee 3f       	cpi	r30, 0xFE	; 254
    358a:	78 f0       	brcs	.+30     	; 0x35aa <__vector_37+0x44>
		recv3_buf.done = YES;
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	80 93 27 2e 	sts	0x2E27, r24	; 0x802e27 <recv3_buf+0x104>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    3592:	a6 e2       	ldi	r26, 0x26	; 38
    3594:	be e2       	ldi	r27, 0x2E	; 46
    3596:	8c 91       	ld	r24, X
    3598:	e8 2f       	mov	r30, r24
    359a:	f0 e0       	ldi	r31, 0x00	; 0
    359c:	ed 5d       	subi	r30, 0xDD	; 221
    359e:	f2 4d       	sbci	r31, 0xD2	; 210
    35a0:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    35a2:	80 93 24 2e 	sts	0x2E24, r24	; 0x802e24 <recv3_buf+0x101>
		recv3_buf.nxfrd = 0;
    35a6:	1c 92       	st	X, r1
		return;
    35a8:	08 c0       	rjmp	.+16     	; 0x35ba <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    35aa:	91 e0       	ldi	r25, 0x01	; 1
    35ac:	9e 0f       	add	r25, r30
    35ae:	90 93 26 2e 	sts	0x2E26, r25	; 0x802e26 <recv3_buf+0x103>
    35b2:	f0 e0       	ldi	r31, 0x00	; 0
    35b4:	ed 5d       	subi	r30, 0xDD	; 221
    35b6:	f2 4d       	sbci	r31, 0xD2	; 210
    35b8:	80 83       	st	Z, r24
	}

}
    35ba:	ff 91       	pop	r31
    35bc:	ef 91       	pop	r30
    35be:	bf 91       	pop	r27
    35c0:	af 91       	pop	r26
    35c2:	9f 91       	pop	r25
    35c4:	8f 91       	pop	r24
    35c6:	0f 90       	pop	r0
    35c8:	0f be       	out	0x3f, r0	; 63
    35ca:	0f 90       	pop	r0
    35cc:	1f 90       	pop	r1
    35ce:	18 95       	reti

000035d0 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    35d0:	1f 92       	push	r1
    35d2:	0f 92       	push	r0
    35d4:	0f b6       	in	r0, 0x3f	; 63
    35d6:	0f 92       	push	r0
    35d8:	11 24       	eor	r1, r1
    35da:	8f 93       	push	r24
    35dc:	9f 93       	push	r25
    35de:	af 93       	push	r26
    35e0:	bf 93       	push	r27
    35e2:	ef 93       	push	r30
    35e4:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    35e6:	ab e2       	ldi	r26, 0x2B	; 43
    35e8:	bf e2       	ldi	r27, 0x2F	; 47
    35ea:	ec 91       	ld	r30, X
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	8e 0f       	add	r24, r30
    35f0:	8c 93       	st	X, r24
    35f2:	f0 e0       	ldi	r31, 0x00	; 0
    35f4:	e8 5d       	subi	r30, 0xD8	; 216
    35f6:	f1 4d       	sbci	r31, 0xD1	; 209
    35f8:	90 81       	ld	r25, Z
    35fa:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    35fe:	90 91 29 2f 	lds	r25, 0x2F29	; 0x802f29 <send3_buf+0x101>
    3602:	89 17       	cp	r24, r25
    3604:	40 f0       	brcs	.+16     	; 0x3616 <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    3606:	e0 e6       	ldi	r30, 0x60	; 96
    3608:	f8 e0       	ldi	r31, 0x08	; 8
    360a:	85 81       	ldd	r24, Z+5	; 0x05
    360c:	8f 7d       	andi	r24, 0xDF	; 223
    360e:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	80 93 2c 2f 	sts	0x2F2C, r24	; 0x802f2c <send3_buf+0x104>
	}

}
    3616:	ff 91       	pop	r31
    3618:	ef 91       	pop	r30
    361a:	bf 91       	pop	r27
    361c:	af 91       	pop	r26
    361e:	9f 91       	pop	r25
    3620:	8f 91       	pop	r24
    3622:	0f 90       	pop	r0
    3624:	0f be       	out	0x3f, r0	; 63
    3626:	0f 90       	pop	r0
    3628:	1f 90       	pop	r1
    362a:	18 95       	reti

0000362c <reboot>:
#include "wdt.h"

void reboot(void)
{

	init_USART();
    362c:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <init_USART>
	init_XPORT();
    3630:	0e 94 20 1b 	call	0x3640	; 0x3640 <init_XPORT>
	CPU_CCP = CCP_IOREG_gc;
    3634:	88 ed       	ldi	r24, 0xD8	; 216
    3636:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    3638:	81 e0       	ldi	r24, 0x01	; 1
    363a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    363e:	08 95       	ret

00003640 <init_XPORT>:
#include "initialize.h"

void init_XPORT(void)
{

	PORTC.OUTCLR = PIN3_bm;		// PC3 is the /RESET pin for the XPort
    3640:	e0 e4       	ldi	r30, 0x40	; 64
    3642:	f4 e0       	ldi	r31, 0x04	; 4
    3644:	88 e0       	ldi	r24, 0x08	; 8
    3646:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;
    3648:	81 83       	std	Z+1, r24	; 0x01
    364a:	ad e8       	ldi	r26, 0x8D	; 141
    364c:	b0 e2       	ldi	r27, 0x20	; 32
    364e:	11 97       	sbiw	r26, 0x01	; 1
    3650:	f1 f7       	brne	.-4      	; 0x364e <init_XPORT+0xe>
    3652:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;
    3654:	85 83       	std	Z+5, r24	; 0x05
    3656:	08 95       	ret

00003658 <__subsf3>:
    3658:	50 58       	subi	r21, 0x80	; 128

0000365a <__addsf3>:
    365a:	bb 27       	eor	r27, r27
    365c:	aa 27       	eor	r26, r26
    365e:	0e 94 44 1b 	call	0x3688	; 0x3688 <__addsf3x>
    3662:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <__fp_round>
    3666:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <__fp_pscA>
    366a:	38 f0       	brcs	.+14     	; 0x367a <__addsf3+0x20>
    366c:	0e 94 81 1c 	call	0x3902	; 0x3902 <__fp_pscB>
    3670:	20 f0       	brcs	.+8      	; 0x367a <__addsf3+0x20>
    3672:	39 f4       	brne	.+14     	; 0x3682 <__addsf3+0x28>
    3674:	9f 3f       	cpi	r25, 0xFF	; 255
    3676:	19 f4       	brne	.+6      	; 0x367e <__addsf3+0x24>
    3678:	26 f4       	brtc	.+8      	; 0x3682 <__addsf3+0x28>
    367a:	0c 94 77 1c 	jmp	0x38ee	; 0x38ee <__fp_nan>
    367e:	0e f4       	brtc	.+2      	; 0x3682 <__addsf3+0x28>
    3680:	e0 95       	com	r30
    3682:	e7 fb       	bst	r30, 7
    3684:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <__fp_inf>

00003688 <__addsf3x>:
    3688:	e9 2f       	mov	r30, r25
    368a:	0e 94 99 1c 	call	0x3932	; 0x3932 <__fp_split3>
    368e:	58 f3       	brcs	.-42     	; 0x3666 <__addsf3+0xc>
    3690:	ba 17       	cp	r27, r26
    3692:	62 07       	cpc	r22, r18
    3694:	73 07       	cpc	r23, r19
    3696:	84 07       	cpc	r24, r20
    3698:	95 07       	cpc	r25, r21
    369a:	20 f0       	brcs	.+8      	; 0x36a4 <__addsf3x+0x1c>
    369c:	79 f4       	brne	.+30     	; 0x36bc <__addsf3x+0x34>
    369e:	a6 f5       	brtc	.+104    	; 0x3708 <__addsf3x+0x80>
    36a0:	0c 94 bb 1c 	jmp	0x3976	; 0x3976 <__fp_zero>
    36a4:	0e f4       	brtc	.+2      	; 0x36a8 <__addsf3x+0x20>
    36a6:	e0 95       	com	r30
    36a8:	0b 2e       	mov	r0, r27
    36aa:	ba 2f       	mov	r27, r26
    36ac:	a0 2d       	mov	r26, r0
    36ae:	0b 01       	movw	r0, r22
    36b0:	b9 01       	movw	r22, r18
    36b2:	90 01       	movw	r18, r0
    36b4:	0c 01       	movw	r0, r24
    36b6:	ca 01       	movw	r24, r20
    36b8:	a0 01       	movw	r20, r0
    36ba:	11 24       	eor	r1, r1
    36bc:	ff 27       	eor	r31, r31
    36be:	59 1b       	sub	r21, r25
    36c0:	99 f0       	breq	.+38     	; 0x36e8 <__addsf3x+0x60>
    36c2:	59 3f       	cpi	r21, 0xF9	; 249
    36c4:	50 f4       	brcc	.+20     	; 0x36da <__addsf3x+0x52>
    36c6:	50 3e       	cpi	r21, 0xE0	; 224
    36c8:	68 f1       	brcs	.+90     	; 0x3724 <__addsf3x+0x9c>
    36ca:	1a 16       	cp	r1, r26
    36cc:	f0 40       	sbci	r31, 0x00	; 0
    36ce:	a2 2f       	mov	r26, r18
    36d0:	23 2f       	mov	r18, r19
    36d2:	34 2f       	mov	r19, r20
    36d4:	44 27       	eor	r20, r20
    36d6:	58 5f       	subi	r21, 0xF8	; 248
    36d8:	f3 cf       	rjmp	.-26     	; 0x36c0 <__addsf3x+0x38>
    36da:	46 95       	lsr	r20
    36dc:	37 95       	ror	r19
    36de:	27 95       	ror	r18
    36e0:	a7 95       	ror	r26
    36e2:	f0 40       	sbci	r31, 0x00	; 0
    36e4:	53 95       	inc	r21
    36e6:	c9 f7       	brne	.-14     	; 0x36da <__addsf3x+0x52>
    36e8:	7e f4       	brtc	.+30     	; 0x3708 <__addsf3x+0x80>
    36ea:	1f 16       	cp	r1, r31
    36ec:	ba 0b       	sbc	r27, r26
    36ee:	62 0b       	sbc	r22, r18
    36f0:	73 0b       	sbc	r23, r19
    36f2:	84 0b       	sbc	r24, r20
    36f4:	ba f0       	brmi	.+46     	; 0x3724 <__addsf3x+0x9c>
    36f6:	91 50       	subi	r25, 0x01	; 1
    36f8:	a1 f0       	breq	.+40     	; 0x3722 <__addsf3x+0x9a>
    36fa:	ff 0f       	add	r31, r31
    36fc:	bb 1f       	adc	r27, r27
    36fe:	66 1f       	adc	r22, r22
    3700:	77 1f       	adc	r23, r23
    3702:	88 1f       	adc	r24, r24
    3704:	c2 f7       	brpl	.-16     	; 0x36f6 <__addsf3x+0x6e>
    3706:	0e c0       	rjmp	.+28     	; 0x3724 <__addsf3x+0x9c>
    3708:	ba 0f       	add	r27, r26
    370a:	62 1f       	adc	r22, r18
    370c:	73 1f       	adc	r23, r19
    370e:	84 1f       	adc	r24, r20
    3710:	48 f4       	brcc	.+18     	; 0x3724 <__addsf3x+0x9c>
    3712:	87 95       	ror	r24
    3714:	77 95       	ror	r23
    3716:	67 95       	ror	r22
    3718:	b7 95       	ror	r27
    371a:	f7 95       	ror	r31
    371c:	9e 3f       	cpi	r25, 0xFE	; 254
    371e:	08 f0       	brcs	.+2      	; 0x3722 <__addsf3x+0x9a>
    3720:	b0 cf       	rjmp	.-160    	; 0x3682 <__addsf3+0x28>
    3722:	93 95       	inc	r25
    3724:	88 0f       	add	r24, r24
    3726:	08 f0       	brcs	.+2      	; 0x372a <__addsf3x+0xa2>
    3728:	99 27       	eor	r25, r25
    372a:	ee 0f       	add	r30, r30
    372c:	97 95       	ror	r25
    372e:	87 95       	ror	r24
    3730:	08 95       	ret

00003732 <__cmpsf2>:
    3732:	0e 94 4d 1c 	call	0x389a	; 0x389a <__fp_cmp>
    3736:	08 f4       	brcc	.+2      	; 0x373a <__cmpsf2+0x8>
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	08 95       	ret

0000373c <__divsf3>:
    373c:	0e 94 b2 1b 	call	0x3764	; 0x3764 <__divsf3x>
    3740:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <__fp_round>
    3744:	0e 94 81 1c 	call	0x3902	; 0x3902 <__fp_pscB>
    3748:	58 f0       	brcs	.+22     	; 0x3760 <__divsf3+0x24>
    374a:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <__fp_pscA>
    374e:	40 f0       	brcs	.+16     	; 0x3760 <__divsf3+0x24>
    3750:	29 f4       	brne	.+10     	; 0x375c <__divsf3+0x20>
    3752:	5f 3f       	cpi	r21, 0xFF	; 255
    3754:	29 f0       	breq	.+10     	; 0x3760 <__divsf3+0x24>
    3756:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <__fp_inf>
    375a:	51 11       	cpse	r21, r1
    375c:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <__fp_szero>
    3760:	0c 94 77 1c 	jmp	0x38ee	; 0x38ee <__fp_nan>

00003764 <__divsf3x>:
    3764:	0e 94 99 1c 	call	0x3932	; 0x3932 <__fp_split3>
    3768:	68 f3       	brcs	.-38     	; 0x3744 <__divsf3+0x8>

0000376a <__divsf3_pse>:
    376a:	99 23       	and	r25, r25
    376c:	b1 f3       	breq	.-20     	; 0x375a <__divsf3+0x1e>
    376e:	55 23       	and	r21, r21
    3770:	91 f3       	breq	.-28     	; 0x3756 <__divsf3+0x1a>
    3772:	95 1b       	sub	r25, r21
    3774:	55 0b       	sbc	r21, r21
    3776:	bb 27       	eor	r27, r27
    3778:	aa 27       	eor	r26, r26
    377a:	62 17       	cp	r22, r18
    377c:	73 07       	cpc	r23, r19
    377e:	84 07       	cpc	r24, r20
    3780:	38 f0       	brcs	.+14     	; 0x3790 <__divsf3_pse+0x26>
    3782:	9f 5f       	subi	r25, 0xFF	; 255
    3784:	5f 4f       	sbci	r21, 0xFF	; 255
    3786:	22 0f       	add	r18, r18
    3788:	33 1f       	adc	r19, r19
    378a:	44 1f       	adc	r20, r20
    378c:	aa 1f       	adc	r26, r26
    378e:	a9 f3       	breq	.-22     	; 0x377a <__divsf3_pse+0x10>
    3790:	35 d0       	rcall	.+106    	; 0x37fc <__divsf3_pse+0x92>
    3792:	0e 2e       	mov	r0, r30
    3794:	3a f0       	brmi	.+14     	; 0x37a4 <__divsf3_pse+0x3a>
    3796:	e0 e8       	ldi	r30, 0x80	; 128
    3798:	32 d0       	rcall	.+100    	; 0x37fe <__divsf3_pse+0x94>
    379a:	91 50       	subi	r25, 0x01	; 1
    379c:	50 40       	sbci	r21, 0x00	; 0
    379e:	e6 95       	lsr	r30
    37a0:	00 1c       	adc	r0, r0
    37a2:	ca f7       	brpl	.-14     	; 0x3796 <__divsf3_pse+0x2c>
    37a4:	2b d0       	rcall	.+86     	; 0x37fc <__divsf3_pse+0x92>
    37a6:	fe 2f       	mov	r31, r30
    37a8:	29 d0       	rcall	.+82     	; 0x37fc <__divsf3_pse+0x92>
    37aa:	66 0f       	add	r22, r22
    37ac:	77 1f       	adc	r23, r23
    37ae:	88 1f       	adc	r24, r24
    37b0:	bb 1f       	adc	r27, r27
    37b2:	26 17       	cp	r18, r22
    37b4:	37 07       	cpc	r19, r23
    37b6:	48 07       	cpc	r20, r24
    37b8:	ab 07       	cpc	r26, r27
    37ba:	b0 e8       	ldi	r27, 0x80	; 128
    37bc:	09 f0       	breq	.+2      	; 0x37c0 <__divsf3_pse+0x56>
    37be:	bb 0b       	sbc	r27, r27
    37c0:	80 2d       	mov	r24, r0
    37c2:	bf 01       	movw	r22, r30
    37c4:	ff 27       	eor	r31, r31
    37c6:	93 58       	subi	r25, 0x83	; 131
    37c8:	5f 4f       	sbci	r21, 0xFF	; 255
    37ca:	3a f0       	brmi	.+14     	; 0x37da <__divsf3_pse+0x70>
    37cc:	9e 3f       	cpi	r25, 0xFE	; 254
    37ce:	51 05       	cpc	r21, r1
    37d0:	78 f0       	brcs	.+30     	; 0x37f0 <__divsf3_pse+0x86>
    37d2:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <__fp_inf>
    37d6:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <__fp_szero>
    37da:	5f 3f       	cpi	r21, 0xFF	; 255
    37dc:	e4 f3       	brlt	.-8      	; 0x37d6 <__divsf3_pse+0x6c>
    37de:	98 3e       	cpi	r25, 0xE8	; 232
    37e0:	d4 f3       	brlt	.-12     	; 0x37d6 <__divsf3_pse+0x6c>
    37e2:	86 95       	lsr	r24
    37e4:	77 95       	ror	r23
    37e6:	67 95       	ror	r22
    37e8:	b7 95       	ror	r27
    37ea:	f7 95       	ror	r31
    37ec:	9f 5f       	subi	r25, 0xFF	; 255
    37ee:	c9 f7       	brne	.-14     	; 0x37e2 <__divsf3_pse+0x78>
    37f0:	88 0f       	add	r24, r24
    37f2:	91 1d       	adc	r25, r1
    37f4:	96 95       	lsr	r25
    37f6:	87 95       	ror	r24
    37f8:	97 f9       	bld	r25, 7
    37fa:	08 95       	ret
    37fc:	e1 e0       	ldi	r30, 0x01	; 1
    37fe:	66 0f       	add	r22, r22
    3800:	77 1f       	adc	r23, r23
    3802:	88 1f       	adc	r24, r24
    3804:	bb 1f       	adc	r27, r27
    3806:	62 17       	cp	r22, r18
    3808:	73 07       	cpc	r23, r19
    380a:	84 07       	cpc	r24, r20
    380c:	ba 07       	cpc	r27, r26
    380e:	20 f0       	brcs	.+8      	; 0x3818 <__divsf3_pse+0xae>
    3810:	62 1b       	sub	r22, r18
    3812:	73 0b       	sbc	r23, r19
    3814:	84 0b       	sbc	r24, r20
    3816:	ba 0b       	sbc	r27, r26
    3818:	ee 1f       	adc	r30, r30
    381a:	88 f7       	brcc	.-30     	; 0x37fe <__divsf3_pse+0x94>
    381c:	e0 95       	com	r30
    381e:	08 95       	ret

00003820 <__floatunsisf>:
    3820:	e8 94       	clt
    3822:	09 c0       	rjmp	.+18     	; 0x3836 <__floatsisf+0x12>

00003824 <__floatsisf>:
    3824:	97 fb       	bst	r25, 7
    3826:	3e f4       	brtc	.+14     	; 0x3836 <__floatsisf+0x12>
    3828:	90 95       	com	r25
    382a:	80 95       	com	r24
    382c:	70 95       	com	r23
    382e:	61 95       	neg	r22
    3830:	7f 4f       	sbci	r23, 0xFF	; 255
    3832:	8f 4f       	sbci	r24, 0xFF	; 255
    3834:	9f 4f       	sbci	r25, 0xFF	; 255
    3836:	99 23       	and	r25, r25
    3838:	a9 f0       	breq	.+42     	; 0x3864 <__floatsisf+0x40>
    383a:	f9 2f       	mov	r31, r25
    383c:	96 e9       	ldi	r25, 0x96	; 150
    383e:	bb 27       	eor	r27, r27
    3840:	93 95       	inc	r25
    3842:	f6 95       	lsr	r31
    3844:	87 95       	ror	r24
    3846:	77 95       	ror	r23
    3848:	67 95       	ror	r22
    384a:	b7 95       	ror	r27
    384c:	f1 11       	cpse	r31, r1
    384e:	f8 cf       	rjmp	.-16     	; 0x3840 <__floatsisf+0x1c>
    3850:	fa f4       	brpl	.+62     	; 0x3890 <__floatsisf+0x6c>
    3852:	bb 0f       	add	r27, r27
    3854:	11 f4       	brne	.+4      	; 0x385a <__floatsisf+0x36>
    3856:	60 ff       	sbrs	r22, 0
    3858:	1b c0       	rjmp	.+54     	; 0x3890 <__floatsisf+0x6c>
    385a:	6f 5f       	subi	r22, 0xFF	; 255
    385c:	7f 4f       	sbci	r23, 0xFF	; 255
    385e:	8f 4f       	sbci	r24, 0xFF	; 255
    3860:	9f 4f       	sbci	r25, 0xFF	; 255
    3862:	16 c0       	rjmp	.+44     	; 0x3890 <__floatsisf+0x6c>
    3864:	88 23       	and	r24, r24
    3866:	11 f0       	breq	.+4      	; 0x386c <__floatsisf+0x48>
    3868:	96 e9       	ldi	r25, 0x96	; 150
    386a:	11 c0       	rjmp	.+34     	; 0x388e <__floatsisf+0x6a>
    386c:	77 23       	and	r23, r23
    386e:	21 f0       	breq	.+8      	; 0x3878 <__floatsisf+0x54>
    3870:	9e e8       	ldi	r25, 0x8E	; 142
    3872:	87 2f       	mov	r24, r23
    3874:	76 2f       	mov	r23, r22
    3876:	05 c0       	rjmp	.+10     	; 0x3882 <__floatsisf+0x5e>
    3878:	66 23       	and	r22, r22
    387a:	71 f0       	breq	.+28     	; 0x3898 <__floatsisf+0x74>
    387c:	96 e8       	ldi	r25, 0x86	; 134
    387e:	86 2f       	mov	r24, r22
    3880:	70 e0       	ldi	r23, 0x00	; 0
    3882:	60 e0       	ldi	r22, 0x00	; 0
    3884:	2a f0       	brmi	.+10     	; 0x3890 <__floatsisf+0x6c>
    3886:	9a 95       	dec	r25
    3888:	66 0f       	add	r22, r22
    388a:	77 1f       	adc	r23, r23
    388c:	88 1f       	adc	r24, r24
    388e:	da f7       	brpl	.-10     	; 0x3886 <__floatsisf+0x62>
    3890:	88 0f       	add	r24, r24
    3892:	96 95       	lsr	r25
    3894:	87 95       	ror	r24
    3896:	97 f9       	bld	r25, 7
    3898:	08 95       	ret

0000389a <__fp_cmp>:
    389a:	99 0f       	add	r25, r25
    389c:	00 08       	sbc	r0, r0
    389e:	55 0f       	add	r21, r21
    38a0:	aa 0b       	sbc	r26, r26
    38a2:	e0 e8       	ldi	r30, 0x80	; 128
    38a4:	fe ef       	ldi	r31, 0xFE	; 254
    38a6:	16 16       	cp	r1, r22
    38a8:	17 06       	cpc	r1, r23
    38aa:	e8 07       	cpc	r30, r24
    38ac:	f9 07       	cpc	r31, r25
    38ae:	c0 f0       	brcs	.+48     	; 0x38e0 <__fp_cmp+0x46>
    38b0:	12 16       	cp	r1, r18
    38b2:	13 06       	cpc	r1, r19
    38b4:	e4 07       	cpc	r30, r20
    38b6:	f5 07       	cpc	r31, r21
    38b8:	98 f0       	brcs	.+38     	; 0x38e0 <__fp_cmp+0x46>
    38ba:	62 1b       	sub	r22, r18
    38bc:	73 0b       	sbc	r23, r19
    38be:	84 0b       	sbc	r24, r20
    38c0:	95 0b       	sbc	r25, r21
    38c2:	39 f4       	brne	.+14     	; 0x38d2 <__fp_cmp+0x38>
    38c4:	0a 26       	eor	r0, r26
    38c6:	61 f0       	breq	.+24     	; 0x38e0 <__fp_cmp+0x46>
    38c8:	23 2b       	or	r18, r19
    38ca:	24 2b       	or	r18, r20
    38cc:	25 2b       	or	r18, r21
    38ce:	21 f4       	brne	.+8      	; 0x38d8 <__fp_cmp+0x3e>
    38d0:	08 95       	ret
    38d2:	0a 26       	eor	r0, r26
    38d4:	09 f4       	brne	.+2      	; 0x38d8 <__fp_cmp+0x3e>
    38d6:	a1 40       	sbci	r26, 0x01	; 1
    38d8:	a6 95       	lsr	r26
    38da:	8f ef       	ldi	r24, 0xFF	; 255
    38dc:	81 1d       	adc	r24, r1
    38de:	81 1d       	adc	r24, r1
    38e0:	08 95       	ret

000038e2 <__fp_inf>:
    38e2:	97 f9       	bld	r25, 7
    38e4:	9f 67       	ori	r25, 0x7F	; 127
    38e6:	80 e8       	ldi	r24, 0x80	; 128
    38e8:	70 e0       	ldi	r23, 0x00	; 0
    38ea:	60 e0       	ldi	r22, 0x00	; 0
    38ec:	08 95       	ret

000038ee <__fp_nan>:
    38ee:	9f ef       	ldi	r25, 0xFF	; 255
    38f0:	80 ec       	ldi	r24, 0xC0	; 192
    38f2:	08 95       	ret

000038f4 <__fp_pscA>:
    38f4:	00 24       	eor	r0, r0
    38f6:	0a 94       	dec	r0
    38f8:	16 16       	cp	r1, r22
    38fa:	17 06       	cpc	r1, r23
    38fc:	18 06       	cpc	r1, r24
    38fe:	09 06       	cpc	r0, r25
    3900:	08 95       	ret

00003902 <__fp_pscB>:
    3902:	00 24       	eor	r0, r0
    3904:	0a 94       	dec	r0
    3906:	12 16       	cp	r1, r18
    3908:	13 06       	cpc	r1, r19
    390a:	14 06       	cpc	r1, r20
    390c:	05 06       	cpc	r0, r21
    390e:	08 95       	ret

00003910 <__fp_round>:
    3910:	09 2e       	mov	r0, r25
    3912:	03 94       	inc	r0
    3914:	00 0c       	add	r0, r0
    3916:	11 f4       	brne	.+4      	; 0x391c <__fp_round+0xc>
    3918:	88 23       	and	r24, r24
    391a:	52 f0       	brmi	.+20     	; 0x3930 <__fp_round+0x20>
    391c:	bb 0f       	add	r27, r27
    391e:	40 f4       	brcc	.+16     	; 0x3930 <__fp_round+0x20>
    3920:	bf 2b       	or	r27, r31
    3922:	11 f4       	brne	.+4      	; 0x3928 <__fp_round+0x18>
    3924:	60 ff       	sbrs	r22, 0
    3926:	04 c0       	rjmp	.+8      	; 0x3930 <__fp_round+0x20>
    3928:	6f 5f       	subi	r22, 0xFF	; 255
    392a:	7f 4f       	sbci	r23, 0xFF	; 255
    392c:	8f 4f       	sbci	r24, 0xFF	; 255
    392e:	9f 4f       	sbci	r25, 0xFF	; 255
    3930:	08 95       	ret

00003932 <__fp_split3>:
    3932:	57 fd       	sbrc	r21, 7
    3934:	90 58       	subi	r25, 0x80	; 128
    3936:	44 0f       	add	r20, r20
    3938:	55 1f       	adc	r21, r21
    393a:	59 f0       	breq	.+22     	; 0x3952 <__fp_splitA+0x10>
    393c:	5f 3f       	cpi	r21, 0xFF	; 255
    393e:	71 f0       	breq	.+28     	; 0x395c <__fp_splitA+0x1a>
    3940:	47 95       	ror	r20

00003942 <__fp_splitA>:
    3942:	88 0f       	add	r24, r24
    3944:	97 fb       	bst	r25, 7
    3946:	99 1f       	adc	r25, r25
    3948:	61 f0       	breq	.+24     	; 0x3962 <__fp_splitA+0x20>
    394a:	9f 3f       	cpi	r25, 0xFF	; 255
    394c:	79 f0       	breq	.+30     	; 0x396c <__fp_splitA+0x2a>
    394e:	87 95       	ror	r24
    3950:	08 95       	ret
    3952:	12 16       	cp	r1, r18
    3954:	13 06       	cpc	r1, r19
    3956:	14 06       	cpc	r1, r20
    3958:	55 1f       	adc	r21, r21
    395a:	f2 cf       	rjmp	.-28     	; 0x3940 <__fp_split3+0xe>
    395c:	46 95       	lsr	r20
    395e:	f1 df       	rcall	.-30     	; 0x3942 <__fp_splitA>
    3960:	08 c0       	rjmp	.+16     	; 0x3972 <__fp_splitA+0x30>
    3962:	16 16       	cp	r1, r22
    3964:	17 06       	cpc	r1, r23
    3966:	18 06       	cpc	r1, r24
    3968:	99 1f       	adc	r25, r25
    396a:	f1 cf       	rjmp	.-30     	; 0x394e <__fp_splitA+0xc>
    396c:	86 95       	lsr	r24
    396e:	71 05       	cpc	r23, r1
    3970:	61 05       	cpc	r22, r1
    3972:	08 94       	sec
    3974:	08 95       	ret

00003976 <__fp_zero>:
    3976:	e8 94       	clt

00003978 <__fp_szero>:
    3978:	bb 27       	eor	r27, r27
    397a:	66 27       	eor	r22, r22
    397c:	77 27       	eor	r23, r23
    397e:	cb 01       	movw	r24, r22
    3980:	97 f9       	bld	r25, 7
    3982:	08 95       	ret

00003984 <__gesf2>:
    3984:	0e 94 4d 1c 	call	0x389a	; 0x389a <__fp_cmp>
    3988:	08 f4       	brcc	.+2      	; 0x398c <__gesf2+0x8>
    398a:	8f ef       	ldi	r24, 0xFF	; 255
    398c:	08 95       	ret

0000398e <__mulsf3>:
    398e:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <__mulsf3x>
    3992:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <__fp_round>
    3996:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <__fp_pscA>
    399a:	38 f0       	brcs	.+14     	; 0x39aa <__mulsf3+0x1c>
    399c:	0e 94 81 1c 	call	0x3902	; 0x3902 <__fp_pscB>
    39a0:	20 f0       	brcs	.+8      	; 0x39aa <__mulsf3+0x1c>
    39a2:	95 23       	and	r25, r21
    39a4:	11 f0       	breq	.+4      	; 0x39aa <__mulsf3+0x1c>
    39a6:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <__fp_inf>
    39aa:	0c 94 77 1c 	jmp	0x38ee	; 0x38ee <__fp_nan>
    39ae:	11 24       	eor	r1, r1
    39b0:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <__fp_szero>

000039b4 <__mulsf3x>:
    39b4:	0e 94 99 1c 	call	0x3932	; 0x3932 <__fp_split3>
    39b8:	70 f3       	brcs	.-36     	; 0x3996 <__mulsf3+0x8>

000039ba <__mulsf3_pse>:
    39ba:	95 9f       	mul	r25, r21
    39bc:	c1 f3       	breq	.-16     	; 0x39ae <__mulsf3+0x20>
    39be:	95 0f       	add	r25, r21
    39c0:	50 e0       	ldi	r21, 0x00	; 0
    39c2:	55 1f       	adc	r21, r21
    39c4:	62 9f       	mul	r22, r18
    39c6:	f0 01       	movw	r30, r0
    39c8:	72 9f       	mul	r23, r18
    39ca:	bb 27       	eor	r27, r27
    39cc:	f0 0d       	add	r31, r0
    39ce:	b1 1d       	adc	r27, r1
    39d0:	63 9f       	mul	r22, r19
    39d2:	aa 27       	eor	r26, r26
    39d4:	f0 0d       	add	r31, r0
    39d6:	b1 1d       	adc	r27, r1
    39d8:	aa 1f       	adc	r26, r26
    39da:	64 9f       	mul	r22, r20
    39dc:	66 27       	eor	r22, r22
    39de:	b0 0d       	add	r27, r0
    39e0:	a1 1d       	adc	r26, r1
    39e2:	66 1f       	adc	r22, r22
    39e4:	82 9f       	mul	r24, r18
    39e6:	22 27       	eor	r18, r18
    39e8:	b0 0d       	add	r27, r0
    39ea:	a1 1d       	adc	r26, r1
    39ec:	62 1f       	adc	r22, r18
    39ee:	73 9f       	mul	r23, r19
    39f0:	b0 0d       	add	r27, r0
    39f2:	a1 1d       	adc	r26, r1
    39f4:	62 1f       	adc	r22, r18
    39f6:	83 9f       	mul	r24, r19
    39f8:	a0 0d       	add	r26, r0
    39fa:	61 1d       	adc	r22, r1
    39fc:	22 1f       	adc	r18, r18
    39fe:	74 9f       	mul	r23, r20
    3a00:	33 27       	eor	r19, r19
    3a02:	a0 0d       	add	r26, r0
    3a04:	61 1d       	adc	r22, r1
    3a06:	23 1f       	adc	r18, r19
    3a08:	84 9f       	mul	r24, r20
    3a0a:	60 0d       	add	r22, r0
    3a0c:	21 1d       	adc	r18, r1
    3a0e:	82 2f       	mov	r24, r18
    3a10:	76 2f       	mov	r23, r22
    3a12:	6a 2f       	mov	r22, r26
    3a14:	11 24       	eor	r1, r1
    3a16:	9f 57       	subi	r25, 0x7F	; 127
    3a18:	50 40       	sbci	r21, 0x00	; 0
    3a1a:	9a f0       	brmi	.+38     	; 0x3a42 <__mulsf3_pse+0x88>
    3a1c:	f1 f0       	breq	.+60     	; 0x3a5a <__mulsf3_pse+0xa0>
    3a1e:	88 23       	and	r24, r24
    3a20:	4a f0       	brmi	.+18     	; 0x3a34 <__mulsf3_pse+0x7a>
    3a22:	ee 0f       	add	r30, r30
    3a24:	ff 1f       	adc	r31, r31
    3a26:	bb 1f       	adc	r27, r27
    3a28:	66 1f       	adc	r22, r22
    3a2a:	77 1f       	adc	r23, r23
    3a2c:	88 1f       	adc	r24, r24
    3a2e:	91 50       	subi	r25, 0x01	; 1
    3a30:	50 40       	sbci	r21, 0x00	; 0
    3a32:	a9 f7       	brne	.-22     	; 0x3a1e <__mulsf3_pse+0x64>
    3a34:	9e 3f       	cpi	r25, 0xFE	; 254
    3a36:	51 05       	cpc	r21, r1
    3a38:	80 f0       	brcs	.+32     	; 0x3a5a <__mulsf3_pse+0xa0>
    3a3a:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <__fp_inf>
    3a3e:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <__fp_szero>
    3a42:	5f 3f       	cpi	r21, 0xFF	; 255
    3a44:	e4 f3       	brlt	.-8      	; 0x3a3e <__mulsf3_pse+0x84>
    3a46:	98 3e       	cpi	r25, 0xE8	; 232
    3a48:	d4 f3       	brlt	.-12     	; 0x3a3e <__mulsf3_pse+0x84>
    3a4a:	86 95       	lsr	r24
    3a4c:	77 95       	ror	r23
    3a4e:	67 95       	ror	r22
    3a50:	b7 95       	ror	r27
    3a52:	f7 95       	ror	r31
    3a54:	e7 95       	ror	r30
    3a56:	9f 5f       	subi	r25, 0xFF	; 255
    3a58:	c1 f7       	brne	.-16     	; 0x3a4a <__mulsf3_pse+0x90>
    3a5a:	fe 2b       	or	r31, r30
    3a5c:	88 0f       	add	r24, r24
    3a5e:	91 1d       	adc	r25, r1
    3a60:	96 95       	lsr	r25
    3a62:	87 95       	ror	r24
    3a64:	97 f9       	bld	r25, 7
    3a66:	08 95       	ret

00003a68 <vfprintf>:
    3a68:	a0 e1       	ldi	r26, 0x10	; 16
    3a6a:	b0 e0       	ldi	r27, 0x00	; 0
    3a6c:	ea e3       	ldi	r30, 0x3A	; 58
    3a6e:	fd e1       	ldi	r31, 0x1D	; 29
    3a70:	0c 94 f5 20 	jmp	0x41ea	; 0x41ea <__prologue_saves__>
    3a74:	7c 01       	movw	r14, r24
    3a76:	1b 01       	movw	r2, r22
    3a78:	6a 01       	movw	r12, r20
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	16 82       	std	Z+6, r1	; 0x06
    3a7e:	17 82       	std	Z+7, r1	; 0x07
    3a80:	83 81       	ldd	r24, Z+3	; 0x03
    3a82:	81 ff       	sbrs	r24, 1
    3a84:	44 c3       	rjmp	.+1672   	; 0x410e <__RODATA_PM_OFFSET__+0x10e>
    3a86:	9e 01       	movw	r18, r28
    3a88:	2f 5f       	subi	r18, 0xFF	; 255
    3a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a8c:	39 01       	movw	r6, r18
    3a8e:	f7 01       	movw	r30, r14
    3a90:	93 81       	ldd	r25, Z+3	; 0x03
    3a92:	f1 01       	movw	r30, r2
    3a94:	93 fd       	sbrc	r25, 3
    3a96:	85 91       	lpm	r24, Z+
    3a98:	93 ff       	sbrs	r25, 3
    3a9a:	81 91       	ld	r24, Z+
    3a9c:	1f 01       	movw	r2, r30
    3a9e:	88 23       	and	r24, r24
    3aa0:	09 f4       	brne	.+2      	; 0x3aa4 <vfprintf+0x3c>
    3aa2:	31 c3       	rjmp	.+1634   	; 0x4106 <__RODATA_PM_OFFSET__+0x106>
    3aa4:	85 32       	cpi	r24, 0x25	; 37
    3aa6:	39 f4       	brne	.+14     	; 0x3ab6 <vfprintf+0x4e>
    3aa8:	93 fd       	sbrc	r25, 3
    3aaa:	85 91       	lpm	r24, Z+
    3aac:	93 ff       	sbrs	r25, 3
    3aae:	81 91       	ld	r24, Z+
    3ab0:	1f 01       	movw	r2, r30
    3ab2:	85 32       	cpi	r24, 0x25	; 37
    3ab4:	39 f4       	brne	.+14     	; 0x3ac4 <vfprintf+0x5c>
    3ab6:	b7 01       	movw	r22, r14
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    3abe:	56 01       	movw	r10, r12
    3ac0:	65 01       	movw	r12, r10
    3ac2:	e5 cf       	rjmp	.-54     	; 0x3a8e <vfprintf+0x26>
    3ac4:	10 e0       	ldi	r17, 0x00	; 0
    3ac6:	51 2c       	mov	r5, r1
    3ac8:	91 2c       	mov	r9, r1
    3aca:	ff e1       	ldi	r31, 0x1F	; 31
    3acc:	f9 15       	cp	r31, r9
    3ace:	d8 f0       	brcs	.+54     	; 0x3b06 <vfprintf+0x9e>
    3ad0:	8b 32       	cpi	r24, 0x2B	; 43
    3ad2:	79 f0       	breq	.+30     	; 0x3af2 <vfprintf+0x8a>
    3ad4:	38 f4       	brcc	.+14     	; 0x3ae4 <vfprintf+0x7c>
    3ad6:	80 32       	cpi	r24, 0x20	; 32
    3ad8:	79 f0       	breq	.+30     	; 0x3af8 <vfprintf+0x90>
    3ada:	83 32       	cpi	r24, 0x23	; 35
    3adc:	a1 f4       	brne	.+40     	; 0x3b06 <vfprintf+0x9e>
    3ade:	f9 2d       	mov	r31, r9
    3ae0:	f0 61       	ori	r31, 0x10	; 16
    3ae2:	2e c0       	rjmp	.+92     	; 0x3b40 <vfprintf+0xd8>
    3ae4:	8d 32       	cpi	r24, 0x2D	; 45
    3ae6:	61 f0       	breq	.+24     	; 0x3b00 <vfprintf+0x98>
    3ae8:	80 33       	cpi	r24, 0x30	; 48
    3aea:	69 f4       	brne	.+26     	; 0x3b06 <vfprintf+0x9e>
    3aec:	29 2d       	mov	r18, r9
    3aee:	21 60       	ori	r18, 0x01	; 1
    3af0:	2d c0       	rjmp	.+90     	; 0x3b4c <vfprintf+0xe4>
    3af2:	39 2d       	mov	r19, r9
    3af4:	32 60       	ori	r19, 0x02	; 2
    3af6:	93 2e       	mov	r9, r19
    3af8:	89 2d       	mov	r24, r9
    3afa:	84 60       	ori	r24, 0x04	; 4
    3afc:	98 2e       	mov	r9, r24
    3afe:	2a c0       	rjmp	.+84     	; 0x3b54 <vfprintf+0xec>
    3b00:	e9 2d       	mov	r30, r9
    3b02:	e8 60       	ori	r30, 0x08	; 8
    3b04:	15 c0       	rjmp	.+42     	; 0x3b30 <vfprintf+0xc8>
    3b06:	97 fc       	sbrc	r9, 7
    3b08:	2d c0       	rjmp	.+90     	; 0x3b64 <vfprintf+0xfc>
    3b0a:	20 ed       	ldi	r18, 0xD0	; 208
    3b0c:	28 0f       	add	r18, r24
    3b0e:	2a 30       	cpi	r18, 0x0A	; 10
    3b10:	88 f4       	brcc	.+34     	; 0x3b34 <vfprintf+0xcc>
    3b12:	96 fe       	sbrs	r9, 6
    3b14:	06 c0       	rjmp	.+12     	; 0x3b22 <vfprintf+0xba>
    3b16:	3a e0       	ldi	r19, 0x0A	; 10
    3b18:	13 9f       	mul	r17, r19
    3b1a:	20 0d       	add	r18, r0
    3b1c:	11 24       	eor	r1, r1
    3b1e:	12 2f       	mov	r17, r18
    3b20:	19 c0       	rjmp	.+50     	; 0x3b54 <vfprintf+0xec>
    3b22:	8a e0       	ldi	r24, 0x0A	; 10
    3b24:	58 9e       	mul	r5, r24
    3b26:	20 0d       	add	r18, r0
    3b28:	11 24       	eor	r1, r1
    3b2a:	52 2e       	mov	r5, r18
    3b2c:	e9 2d       	mov	r30, r9
    3b2e:	e0 62       	ori	r30, 0x20	; 32
    3b30:	9e 2e       	mov	r9, r30
    3b32:	10 c0       	rjmp	.+32     	; 0x3b54 <vfprintf+0xec>
    3b34:	8e 32       	cpi	r24, 0x2E	; 46
    3b36:	31 f4       	brne	.+12     	; 0x3b44 <vfprintf+0xdc>
    3b38:	96 fc       	sbrc	r9, 6
    3b3a:	e5 c2       	rjmp	.+1482   	; 0x4106 <__RODATA_PM_OFFSET__+0x106>
    3b3c:	f9 2d       	mov	r31, r9
    3b3e:	f0 64       	ori	r31, 0x40	; 64
    3b40:	9f 2e       	mov	r9, r31
    3b42:	08 c0       	rjmp	.+16     	; 0x3b54 <vfprintf+0xec>
    3b44:	8c 36       	cpi	r24, 0x6C	; 108
    3b46:	21 f4       	brne	.+8      	; 0x3b50 <vfprintf+0xe8>
    3b48:	29 2d       	mov	r18, r9
    3b4a:	20 68       	ori	r18, 0x80	; 128
    3b4c:	92 2e       	mov	r9, r18
    3b4e:	02 c0       	rjmp	.+4      	; 0x3b54 <vfprintf+0xec>
    3b50:	88 36       	cpi	r24, 0x68	; 104
    3b52:	41 f4       	brne	.+16     	; 0x3b64 <vfprintf+0xfc>
    3b54:	f1 01       	movw	r30, r2
    3b56:	93 fd       	sbrc	r25, 3
    3b58:	85 91       	lpm	r24, Z+
    3b5a:	93 ff       	sbrs	r25, 3
    3b5c:	81 91       	ld	r24, Z+
    3b5e:	1f 01       	movw	r2, r30
    3b60:	81 11       	cpse	r24, r1
    3b62:	b3 cf       	rjmp	.-154    	; 0x3aca <vfprintf+0x62>
    3b64:	9b eb       	ldi	r25, 0xBB	; 187
    3b66:	98 0f       	add	r25, r24
    3b68:	93 30       	cpi	r25, 0x03	; 3
    3b6a:	20 f4       	brcc	.+8      	; 0x3b74 <vfprintf+0x10c>
    3b6c:	99 2d       	mov	r25, r9
    3b6e:	90 61       	ori	r25, 0x10	; 16
    3b70:	80 5e       	subi	r24, 0xE0	; 224
    3b72:	07 c0       	rjmp	.+14     	; 0x3b82 <vfprintf+0x11a>
    3b74:	9b e9       	ldi	r25, 0x9B	; 155
    3b76:	98 0f       	add	r25, r24
    3b78:	93 30       	cpi	r25, 0x03	; 3
    3b7a:	08 f0       	brcs	.+2      	; 0x3b7e <vfprintf+0x116>
    3b7c:	66 c1       	rjmp	.+716    	; 0x3e4a <vfprintf+0x3e2>
    3b7e:	99 2d       	mov	r25, r9
    3b80:	9f 7e       	andi	r25, 0xEF	; 239
    3b82:	96 ff       	sbrs	r25, 6
    3b84:	16 e0       	ldi	r17, 0x06	; 6
    3b86:	9f 73       	andi	r25, 0x3F	; 63
    3b88:	99 2e       	mov	r9, r25
    3b8a:	85 36       	cpi	r24, 0x65	; 101
    3b8c:	19 f4       	brne	.+6      	; 0x3b94 <vfprintf+0x12c>
    3b8e:	90 64       	ori	r25, 0x40	; 64
    3b90:	99 2e       	mov	r9, r25
    3b92:	08 c0       	rjmp	.+16     	; 0x3ba4 <vfprintf+0x13c>
    3b94:	86 36       	cpi	r24, 0x66	; 102
    3b96:	21 f4       	brne	.+8      	; 0x3ba0 <vfprintf+0x138>
    3b98:	39 2f       	mov	r19, r25
    3b9a:	30 68       	ori	r19, 0x80	; 128
    3b9c:	93 2e       	mov	r9, r19
    3b9e:	02 c0       	rjmp	.+4      	; 0x3ba4 <vfprintf+0x13c>
    3ba0:	11 11       	cpse	r17, r1
    3ba2:	11 50       	subi	r17, 0x01	; 1
    3ba4:	97 fe       	sbrs	r9, 7
    3ba6:	07 c0       	rjmp	.+14     	; 0x3bb6 <vfprintf+0x14e>
    3ba8:	1c 33       	cpi	r17, 0x3C	; 60
    3baa:	50 f4       	brcc	.+20     	; 0x3bc0 <vfprintf+0x158>
    3bac:	44 24       	eor	r4, r4
    3bae:	43 94       	inc	r4
    3bb0:	41 0e       	add	r4, r17
    3bb2:	27 e0       	ldi	r18, 0x07	; 7
    3bb4:	0b c0       	rjmp	.+22     	; 0x3bcc <vfprintf+0x164>
    3bb6:	18 30       	cpi	r17, 0x08	; 8
    3bb8:	38 f0       	brcs	.+14     	; 0x3bc8 <vfprintf+0x160>
    3bba:	27 e0       	ldi	r18, 0x07	; 7
    3bbc:	17 e0       	ldi	r17, 0x07	; 7
    3bbe:	05 c0       	rjmp	.+10     	; 0x3bca <vfprintf+0x162>
    3bc0:	27 e0       	ldi	r18, 0x07	; 7
    3bc2:	9c e3       	ldi	r25, 0x3C	; 60
    3bc4:	49 2e       	mov	r4, r25
    3bc6:	02 c0       	rjmp	.+4      	; 0x3bcc <vfprintf+0x164>
    3bc8:	21 2f       	mov	r18, r17
    3bca:	41 2c       	mov	r4, r1
    3bcc:	56 01       	movw	r10, r12
    3bce:	84 e0       	ldi	r24, 0x04	; 4
    3bd0:	a8 0e       	add	r10, r24
    3bd2:	b1 1c       	adc	r11, r1
    3bd4:	f6 01       	movw	r30, r12
    3bd6:	60 81       	ld	r22, Z
    3bd8:	71 81       	ldd	r23, Z+1	; 0x01
    3bda:	82 81       	ldd	r24, Z+2	; 0x02
    3bdc:	93 81       	ldd	r25, Z+3	; 0x03
    3bde:	04 2d       	mov	r16, r4
    3be0:	a3 01       	movw	r20, r6
    3be2:	0e 94 92 21 	call	0x4324	; 0x4324 <__ftoa_engine>
    3be6:	6c 01       	movw	r12, r24
    3be8:	f9 81       	ldd	r31, Y+1	; 0x01
    3bea:	fc 87       	std	Y+12, r31	; 0x0c
    3bec:	f0 ff       	sbrs	r31, 0
    3bee:	02 c0       	rjmp	.+4      	; 0x3bf4 <vfprintf+0x18c>
    3bf0:	f3 ff       	sbrs	r31, 3
    3bf2:	06 c0       	rjmp	.+12     	; 0x3c00 <vfprintf+0x198>
    3bf4:	91 fc       	sbrc	r9, 1
    3bf6:	06 c0       	rjmp	.+12     	; 0x3c04 <vfprintf+0x19c>
    3bf8:	92 fe       	sbrs	r9, 2
    3bfa:	06 c0       	rjmp	.+12     	; 0x3c08 <vfprintf+0x1a0>
    3bfc:	00 e2       	ldi	r16, 0x20	; 32
    3bfe:	05 c0       	rjmp	.+10     	; 0x3c0a <vfprintf+0x1a2>
    3c00:	0d e2       	ldi	r16, 0x2D	; 45
    3c02:	03 c0       	rjmp	.+6      	; 0x3c0a <vfprintf+0x1a2>
    3c04:	0b e2       	ldi	r16, 0x2B	; 43
    3c06:	01 c0       	rjmp	.+2      	; 0x3c0a <vfprintf+0x1a2>
    3c08:	00 e0       	ldi	r16, 0x00	; 0
    3c0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c0c:	8c 70       	andi	r24, 0x0C	; 12
    3c0e:	19 f0       	breq	.+6      	; 0x3c16 <vfprintf+0x1ae>
    3c10:	01 11       	cpse	r16, r1
    3c12:	5a c2       	rjmp	.+1204   	; 0x40c8 <__RODATA_PM_OFFSET__+0xc8>
    3c14:	9b c2       	rjmp	.+1334   	; 0x414c <__RODATA_PM_OFFSET__+0x14c>
    3c16:	97 fe       	sbrs	r9, 7
    3c18:	10 c0       	rjmp	.+32     	; 0x3c3a <vfprintf+0x1d2>
    3c1a:	4c 0c       	add	r4, r12
    3c1c:	fc 85       	ldd	r31, Y+12	; 0x0c
    3c1e:	f4 ff       	sbrs	r31, 4
    3c20:	04 c0       	rjmp	.+8      	; 0x3c2a <vfprintf+0x1c2>
    3c22:	8a 81       	ldd	r24, Y+2	; 0x02
    3c24:	81 33       	cpi	r24, 0x31	; 49
    3c26:	09 f4       	brne	.+2      	; 0x3c2a <vfprintf+0x1c2>
    3c28:	4a 94       	dec	r4
    3c2a:	14 14       	cp	r1, r4
    3c2c:	74 f5       	brge	.+92     	; 0x3c8a <vfprintf+0x222>
    3c2e:	28 e0       	ldi	r18, 0x08	; 8
    3c30:	24 15       	cp	r18, r4
    3c32:	78 f5       	brcc	.+94     	; 0x3c92 <vfprintf+0x22a>
    3c34:	88 e0       	ldi	r24, 0x08	; 8
    3c36:	48 2e       	mov	r4, r24
    3c38:	2c c0       	rjmp	.+88     	; 0x3c92 <vfprintf+0x22a>
    3c3a:	96 fc       	sbrc	r9, 6
    3c3c:	2a c0       	rjmp	.+84     	; 0x3c92 <vfprintf+0x22a>
    3c3e:	81 2f       	mov	r24, r17
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	8c 15       	cp	r24, r12
    3c44:	9d 05       	cpc	r25, r13
    3c46:	9c f0       	brlt	.+38     	; 0x3c6e <vfprintf+0x206>
    3c48:	3c ef       	ldi	r19, 0xFC	; 252
    3c4a:	c3 16       	cp	r12, r19
    3c4c:	3f ef       	ldi	r19, 0xFF	; 255
    3c4e:	d3 06       	cpc	r13, r19
    3c50:	74 f0       	brlt	.+28     	; 0x3c6e <vfprintf+0x206>
    3c52:	89 2d       	mov	r24, r9
    3c54:	80 68       	ori	r24, 0x80	; 128
    3c56:	98 2e       	mov	r9, r24
    3c58:	0a c0       	rjmp	.+20     	; 0x3c6e <vfprintf+0x206>
    3c5a:	e2 e0       	ldi	r30, 0x02	; 2
    3c5c:	f0 e0       	ldi	r31, 0x00	; 0
    3c5e:	ec 0f       	add	r30, r28
    3c60:	fd 1f       	adc	r31, r29
    3c62:	e1 0f       	add	r30, r17
    3c64:	f1 1d       	adc	r31, r1
    3c66:	80 81       	ld	r24, Z
    3c68:	80 33       	cpi	r24, 0x30	; 48
    3c6a:	19 f4       	brne	.+6      	; 0x3c72 <vfprintf+0x20a>
    3c6c:	11 50       	subi	r17, 0x01	; 1
    3c6e:	11 11       	cpse	r17, r1
    3c70:	f4 cf       	rjmp	.-24     	; 0x3c5a <vfprintf+0x1f2>
    3c72:	97 fe       	sbrs	r9, 7
    3c74:	0e c0       	rjmp	.+28     	; 0x3c92 <vfprintf+0x22a>
    3c76:	44 24       	eor	r4, r4
    3c78:	43 94       	inc	r4
    3c7a:	41 0e       	add	r4, r17
    3c7c:	81 2f       	mov	r24, r17
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	c8 16       	cp	r12, r24
    3c82:	d9 06       	cpc	r13, r25
    3c84:	2c f4       	brge	.+10     	; 0x3c90 <vfprintf+0x228>
    3c86:	1c 19       	sub	r17, r12
    3c88:	04 c0       	rjmp	.+8      	; 0x3c92 <vfprintf+0x22a>
    3c8a:	44 24       	eor	r4, r4
    3c8c:	43 94       	inc	r4
    3c8e:	01 c0       	rjmp	.+2      	; 0x3c92 <vfprintf+0x22a>
    3c90:	10 e0       	ldi	r17, 0x00	; 0
    3c92:	97 fe       	sbrs	r9, 7
    3c94:	06 c0       	rjmp	.+12     	; 0x3ca2 <vfprintf+0x23a>
    3c96:	1c 14       	cp	r1, r12
    3c98:	1d 04       	cpc	r1, r13
    3c9a:	34 f4       	brge	.+12     	; 0x3ca8 <vfprintf+0x240>
    3c9c:	c6 01       	movw	r24, r12
    3c9e:	01 96       	adiw	r24, 0x01	; 1
    3ca0:	05 c0       	rjmp	.+10     	; 0x3cac <vfprintf+0x244>
    3ca2:	85 e0       	ldi	r24, 0x05	; 5
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	02 c0       	rjmp	.+4      	; 0x3cac <vfprintf+0x244>
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	01 11       	cpse	r16, r1
    3cae:	01 96       	adiw	r24, 0x01	; 1
    3cb0:	11 23       	and	r17, r17
    3cb2:	31 f0       	breq	.+12     	; 0x3cc0 <vfprintf+0x258>
    3cb4:	21 2f       	mov	r18, r17
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	2f 5f       	subi	r18, 0xFF	; 255
    3cba:	3f 4f       	sbci	r19, 0xFF	; 255
    3cbc:	82 0f       	add	r24, r18
    3cbe:	93 1f       	adc	r25, r19
    3cc0:	25 2d       	mov	r18, r5
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	82 17       	cp	r24, r18
    3cc6:	93 07       	cpc	r25, r19
    3cc8:	14 f4       	brge	.+4      	; 0x3cce <vfprintf+0x266>
    3cca:	58 1a       	sub	r5, r24
    3ccc:	01 c0       	rjmp	.+2      	; 0x3cd0 <vfprintf+0x268>
    3cce:	51 2c       	mov	r5, r1
    3cd0:	89 2d       	mov	r24, r9
    3cd2:	89 70       	andi	r24, 0x09	; 9
    3cd4:	49 f4       	brne	.+18     	; 0x3ce8 <vfprintf+0x280>
    3cd6:	55 20       	and	r5, r5
    3cd8:	39 f0       	breq	.+14     	; 0x3ce8 <vfprintf+0x280>
    3cda:	b7 01       	movw	r22, r14
    3cdc:	80 e2       	ldi	r24, 0x20	; 32
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    3ce4:	5a 94       	dec	r5
    3ce6:	f7 cf       	rjmp	.-18     	; 0x3cd6 <vfprintf+0x26e>
    3ce8:	00 23       	and	r16, r16
    3cea:	29 f0       	breq	.+10     	; 0x3cf6 <vfprintf+0x28e>
    3cec:	b7 01       	movw	r22, r14
    3cee:	80 2f       	mov	r24, r16
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    3cf6:	93 fc       	sbrc	r9, 3
    3cf8:	09 c0       	rjmp	.+18     	; 0x3d0c <vfprintf+0x2a4>
    3cfa:	55 20       	and	r5, r5
    3cfc:	39 f0       	breq	.+14     	; 0x3d0c <vfprintf+0x2a4>
    3cfe:	b7 01       	movw	r22, r14
    3d00:	80 e3       	ldi	r24, 0x30	; 48
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    3d08:	5a 94       	dec	r5
    3d0a:	f7 cf       	rjmp	.-18     	; 0x3cfa <vfprintf+0x292>
    3d0c:	97 fe       	sbrs	r9, 7
    3d0e:	4c c0       	rjmp	.+152    	; 0x3da8 <vfprintf+0x340>
    3d10:	46 01       	movw	r8, r12
    3d12:	d7 fe       	sbrs	r13, 7
    3d14:	02 c0       	rjmp	.+4      	; 0x3d1a <vfprintf+0x2b2>
    3d16:	81 2c       	mov	r8, r1
    3d18:	91 2c       	mov	r9, r1
    3d1a:	c6 01       	movw	r24, r12
    3d1c:	88 19       	sub	r24, r8
    3d1e:	99 09       	sbc	r25, r9
    3d20:	f3 01       	movw	r30, r6
    3d22:	e8 0f       	add	r30, r24
    3d24:	f9 1f       	adc	r31, r25
    3d26:	ed 87       	std	Y+13, r30	; 0x0d
    3d28:	fe 87       	std	Y+14, r31	; 0x0e
    3d2a:	96 01       	movw	r18, r12
    3d2c:	24 19       	sub	r18, r4
    3d2e:	31 09       	sbc	r19, r1
    3d30:	2f 87       	std	Y+15, r18	; 0x0f
    3d32:	38 8b       	std	Y+16, r19	; 0x10
    3d34:	01 2f       	mov	r16, r17
    3d36:	10 e0       	ldi	r17, 0x00	; 0
    3d38:	11 95       	neg	r17
    3d3a:	01 95       	neg	r16
    3d3c:	11 09       	sbc	r17, r1
    3d3e:	3f ef       	ldi	r19, 0xFF	; 255
    3d40:	83 16       	cp	r8, r19
    3d42:	93 06       	cpc	r9, r19
    3d44:	29 f4       	brne	.+10     	; 0x3d50 <vfprintf+0x2e8>
    3d46:	b7 01       	movw	r22, r14
    3d48:	8e e2       	ldi	r24, 0x2E	; 46
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    3d50:	c8 14       	cp	r12, r8
    3d52:	d9 04       	cpc	r13, r9
    3d54:	4c f0       	brlt	.+18     	; 0x3d68 <vfprintf+0x300>
    3d56:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d58:	98 89       	ldd	r25, Y+16	; 0x10
    3d5a:	88 15       	cp	r24, r8
    3d5c:	99 05       	cpc	r25, r9
    3d5e:	24 f4       	brge	.+8      	; 0x3d68 <vfprintf+0x300>
    3d60:	ed 85       	ldd	r30, Y+13	; 0x0d
    3d62:	fe 85       	ldd	r31, Y+14	; 0x0e
    3d64:	81 81       	ldd	r24, Z+1	; 0x01
    3d66:	01 c0       	rjmp	.+2      	; 0x3d6a <vfprintf+0x302>
    3d68:	80 e3       	ldi	r24, 0x30	; 48
    3d6a:	f1 e0       	ldi	r31, 0x01	; 1
    3d6c:	8f 1a       	sub	r8, r31
    3d6e:	91 08       	sbc	r9, r1
    3d70:	2d 85       	ldd	r18, Y+13	; 0x0d
    3d72:	3e 85       	ldd	r19, Y+14	; 0x0e
    3d74:	2f 5f       	subi	r18, 0xFF	; 255
    3d76:	3f 4f       	sbci	r19, 0xFF	; 255
    3d78:	2d 87       	std	Y+13, r18	; 0x0d
    3d7a:	3e 87       	std	Y+14, r19	; 0x0e
    3d7c:	80 16       	cp	r8, r16
    3d7e:	91 06       	cpc	r9, r17
    3d80:	2c f0       	brlt	.+10     	; 0x3d8c <vfprintf+0x324>
    3d82:	b7 01       	movw	r22, r14
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    3d8a:	d9 cf       	rjmp	.-78     	; 0x3d3e <vfprintf+0x2d6>
    3d8c:	c8 14       	cp	r12, r8
    3d8e:	d9 04       	cpc	r13, r9
    3d90:	41 f4       	brne	.+16     	; 0x3da2 <vfprintf+0x33a>
    3d92:	9a 81       	ldd	r25, Y+2	; 0x02
    3d94:	96 33       	cpi	r25, 0x36	; 54
    3d96:	20 f4       	brcc	.+8      	; 0x3da0 <vfprintf+0x338>
    3d98:	95 33       	cpi	r25, 0x35	; 53
    3d9a:	19 f4       	brne	.+6      	; 0x3da2 <vfprintf+0x33a>
    3d9c:	3c 85       	ldd	r19, Y+12	; 0x0c
    3d9e:	34 ff       	sbrs	r19, 4
    3da0:	81 e3       	ldi	r24, 0x31	; 49
    3da2:	b7 01       	movw	r22, r14
    3da4:	90 e0       	ldi	r25, 0x00	; 0
    3da6:	4e c0       	rjmp	.+156    	; 0x3e44 <vfprintf+0x3dc>
    3da8:	8a 81       	ldd	r24, Y+2	; 0x02
    3daa:	81 33       	cpi	r24, 0x31	; 49
    3dac:	19 f0       	breq	.+6      	; 0x3db4 <vfprintf+0x34c>
    3dae:	9c 85       	ldd	r25, Y+12	; 0x0c
    3db0:	9f 7e       	andi	r25, 0xEF	; 239
    3db2:	9c 87       	std	Y+12, r25	; 0x0c
    3db4:	b7 01       	movw	r22, r14
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    3dbc:	11 11       	cpse	r17, r1
    3dbe:	05 c0       	rjmp	.+10     	; 0x3dca <vfprintf+0x362>
    3dc0:	94 fc       	sbrc	r9, 4
    3dc2:	18 c0       	rjmp	.+48     	; 0x3df4 <vfprintf+0x38c>
    3dc4:	85 e6       	ldi	r24, 0x65	; 101
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	17 c0       	rjmp	.+46     	; 0x3df8 <vfprintf+0x390>
    3dca:	b7 01       	movw	r22, r14
    3dcc:	8e e2       	ldi	r24, 0x2E	; 46
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    3dd4:	1e 5f       	subi	r17, 0xFE	; 254
    3dd6:	82 e0       	ldi	r24, 0x02	; 2
    3dd8:	01 e0       	ldi	r16, 0x01	; 1
    3dda:	08 0f       	add	r16, r24
    3ddc:	f3 01       	movw	r30, r6
    3dde:	e8 0f       	add	r30, r24
    3de0:	f1 1d       	adc	r31, r1
    3de2:	80 81       	ld	r24, Z
    3de4:	b7 01       	movw	r22, r14
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    3dec:	80 2f       	mov	r24, r16
    3dee:	01 13       	cpse	r16, r17
    3df0:	f3 cf       	rjmp	.-26     	; 0x3dd8 <vfprintf+0x370>
    3df2:	e6 cf       	rjmp	.-52     	; 0x3dc0 <vfprintf+0x358>
    3df4:	85 e4       	ldi	r24, 0x45	; 69
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	b7 01       	movw	r22, r14
    3dfa:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    3dfe:	d7 fc       	sbrc	r13, 7
    3e00:	06 c0       	rjmp	.+12     	; 0x3e0e <vfprintf+0x3a6>
    3e02:	c1 14       	cp	r12, r1
    3e04:	d1 04       	cpc	r13, r1
    3e06:	41 f4       	brne	.+16     	; 0x3e18 <vfprintf+0x3b0>
    3e08:	ec 85       	ldd	r30, Y+12	; 0x0c
    3e0a:	e4 ff       	sbrs	r30, 4
    3e0c:	05 c0       	rjmp	.+10     	; 0x3e18 <vfprintf+0x3b0>
    3e0e:	d1 94       	neg	r13
    3e10:	c1 94       	neg	r12
    3e12:	d1 08       	sbc	r13, r1
    3e14:	8d e2       	ldi	r24, 0x2D	; 45
    3e16:	01 c0       	rjmp	.+2      	; 0x3e1a <vfprintf+0x3b2>
    3e18:	8b e2       	ldi	r24, 0x2B	; 43
    3e1a:	b7 01       	movw	r22, r14
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    3e22:	80 e3       	ldi	r24, 0x30	; 48
    3e24:	2a e0       	ldi	r18, 0x0A	; 10
    3e26:	c2 16       	cp	r12, r18
    3e28:	d1 04       	cpc	r13, r1
    3e2a:	2c f0       	brlt	.+10     	; 0x3e36 <vfprintf+0x3ce>
    3e2c:	8f 5f       	subi	r24, 0xFF	; 255
    3e2e:	fa e0       	ldi	r31, 0x0A	; 10
    3e30:	cf 1a       	sub	r12, r31
    3e32:	d1 08       	sbc	r13, r1
    3e34:	f7 cf       	rjmp	.-18     	; 0x3e24 <vfprintf+0x3bc>
    3e36:	b7 01       	movw	r22, r14
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    3e3e:	b7 01       	movw	r22, r14
    3e40:	c6 01       	movw	r24, r12
    3e42:	c0 96       	adiw	r24, 0x30	; 48
    3e44:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    3e48:	54 c1       	rjmp	.+680    	; 0x40f2 <__RODATA_PM_OFFSET__+0xf2>
    3e4a:	83 36       	cpi	r24, 0x63	; 99
    3e4c:	31 f0       	breq	.+12     	; 0x3e5a <vfprintf+0x3f2>
    3e4e:	83 37       	cpi	r24, 0x73	; 115
    3e50:	79 f0       	breq	.+30     	; 0x3e70 <vfprintf+0x408>
    3e52:	83 35       	cpi	r24, 0x53	; 83
    3e54:	09 f0       	breq	.+2      	; 0x3e58 <vfprintf+0x3f0>
    3e56:	56 c0       	rjmp	.+172    	; 0x3f04 <vfprintf+0x49c>
    3e58:	20 c0       	rjmp	.+64     	; 0x3e9a <vfprintf+0x432>
    3e5a:	56 01       	movw	r10, r12
    3e5c:	32 e0       	ldi	r19, 0x02	; 2
    3e5e:	a3 0e       	add	r10, r19
    3e60:	b1 1c       	adc	r11, r1
    3e62:	f6 01       	movw	r30, r12
    3e64:	80 81       	ld	r24, Z
    3e66:	89 83       	std	Y+1, r24	; 0x01
    3e68:	01 e0       	ldi	r16, 0x01	; 1
    3e6a:	10 e0       	ldi	r17, 0x00	; 0
    3e6c:	63 01       	movw	r12, r6
    3e6e:	12 c0       	rjmp	.+36     	; 0x3e94 <vfprintf+0x42c>
    3e70:	56 01       	movw	r10, r12
    3e72:	f2 e0       	ldi	r31, 0x02	; 2
    3e74:	af 0e       	add	r10, r31
    3e76:	b1 1c       	adc	r11, r1
    3e78:	f6 01       	movw	r30, r12
    3e7a:	c0 80       	ld	r12, Z
    3e7c:	d1 80       	ldd	r13, Z+1	; 0x01
    3e7e:	96 fe       	sbrs	r9, 6
    3e80:	03 c0       	rjmp	.+6      	; 0x3e88 <vfprintf+0x420>
    3e82:	61 2f       	mov	r22, r17
    3e84:	70 e0       	ldi	r23, 0x00	; 0
    3e86:	02 c0       	rjmp	.+4      	; 0x3e8c <vfprintf+0x424>
    3e88:	6f ef       	ldi	r22, 0xFF	; 255
    3e8a:	7f ef       	ldi	r23, 0xFF	; 255
    3e8c:	c6 01       	movw	r24, r12
    3e8e:	0e 94 87 22 	call	0x450e	; 0x450e <strnlen>
    3e92:	8c 01       	movw	r16, r24
    3e94:	f9 2d       	mov	r31, r9
    3e96:	ff 77       	andi	r31, 0x7F	; 127
    3e98:	14 c0       	rjmp	.+40     	; 0x3ec2 <vfprintf+0x45a>
    3e9a:	56 01       	movw	r10, r12
    3e9c:	22 e0       	ldi	r18, 0x02	; 2
    3e9e:	a2 0e       	add	r10, r18
    3ea0:	b1 1c       	adc	r11, r1
    3ea2:	f6 01       	movw	r30, r12
    3ea4:	c0 80       	ld	r12, Z
    3ea6:	d1 80       	ldd	r13, Z+1	; 0x01
    3ea8:	96 fe       	sbrs	r9, 6
    3eaa:	03 c0       	rjmp	.+6      	; 0x3eb2 <vfprintf+0x44a>
    3eac:	61 2f       	mov	r22, r17
    3eae:	70 e0       	ldi	r23, 0x00	; 0
    3eb0:	02 c0       	rjmp	.+4      	; 0x3eb6 <vfprintf+0x44e>
    3eb2:	6f ef       	ldi	r22, 0xFF	; 255
    3eb4:	7f ef       	ldi	r23, 0xFF	; 255
    3eb6:	c6 01       	movw	r24, r12
    3eb8:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <strnlen_P>
    3ebc:	8c 01       	movw	r16, r24
    3ebe:	f9 2d       	mov	r31, r9
    3ec0:	f0 68       	ori	r31, 0x80	; 128
    3ec2:	9f 2e       	mov	r9, r31
    3ec4:	f3 fd       	sbrc	r31, 3
    3ec6:	1a c0       	rjmp	.+52     	; 0x3efc <vfprintf+0x494>
    3ec8:	85 2d       	mov	r24, r5
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	08 17       	cp	r16, r24
    3ece:	19 07       	cpc	r17, r25
    3ed0:	a8 f4       	brcc	.+42     	; 0x3efc <vfprintf+0x494>
    3ed2:	b7 01       	movw	r22, r14
    3ed4:	80 e2       	ldi	r24, 0x20	; 32
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    3edc:	5a 94       	dec	r5
    3ede:	f4 cf       	rjmp	.-24     	; 0x3ec8 <vfprintf+0x460>
    3ee0:	f6 01       	movw	r30, r12
    3ee2:	97 fc       	sbrc	r9, 7
    3ee4:	85 91       	lpm	r24, Z+
    3ee6:	97 fe       	sbrs	r9, 7
    3ee8:	81 91       	ld	r24, Z+
    3eea:	6f 01       	movw	r12, r30
    3eec:	b7 01       	movw	r22, r14
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    3ef4:	51 10       	cpse	r5, r1
    3ef6:	5a 94       	dec	r5
    3ef8:	01 50       	subi	r16, 0x01	; 1
    3efa:	11 09       	sbc	r17, r1
    3efc:	01 15       	cp	r16, r1
    3efe:	11 05       	cpc	r17, r1
    3f00:	79 f7       	brne	.-34     	; 0x3ee0 <vfprintf+0x478>
    3f02:	f7 c0       	rjmp	.+494    	; 0x40f2 <__RODATA_PM_OFFSET__+0xf2>
    3f04:	84 36       	cpi	r24, 0x64	; 100
    3f06:	11 f0       	breq	.+4      	; 0x3f0c <vfprintf+0x4a4>
    3f08:	89 36       	cpi	r24, 0x69	; 105
    3f0a:	61 f5       	brne	.+88     	; 0x3f64 <vfprintf+0x4fc>
    3f0c:	56 01       	movw	r10, r12
    3f0e:	97 fe       	sbrs	r9, 7
    3f10:	09 c0       	rjmp	.+18     	; 0x3f24 <vfprintf+0x4bc>
    3f12:	24 e0       	ldi	r18, 0x04	; 4
    3f14:	a2 0e       	add	r10, r18
    3f16:	b1 1c       	adc	r11, r1
    3f18:	f6 01       	movw	r30, r12
    3f1a:	60 81       	ld	r22, Z
    3f1c:	71 81       	ldd	r23, Z+1	; 0x01
    3f1e:	82 81       	ldd	r24, Z+2	; 0x02
    3f20:	93 81       	ldd	r25, Z+3	; 0x03
    3f22:	0a c0       	rjmp	.+20     	; 0x3f38 <vfprintf+0x4d0>
    3f24:	f2 e0       	ldi	r31, 0x02	; 2
    3f26:	af 0e       	add	r10, r31
    3f28:	b1 1c       	adc	r11, r1
    3f2a:	f6 01       	movw	r30, r12
    3f2c:	60 81       	ld	r22, Z
    3f2e:	71 81       	ldd	r23, Z+1	; 0x01
    3f30:	07 2e       	mov	r0, r23
    3f32:	00 0c       	add	r0, r0
    3f34:	88 0b       	sbc	r24, r24
    3f36:	99 0b       	sbc	r25, r25
    3f38:	f9 2d       	mov	r31, r9
    3f3a:	ff 76       	andi	r31, 0x6F	; 111
    3f3c:	9f 2e       	mov	r9, r31
    3f3e:	97 ff       	sbrs	r25, 7
    3f40:	09 c0       	rjmp	.+18     	; 0x3f54 <vfprintf+0x4ec>
    3f42:	90 95       	com	r25
    3f44:	80 95       	com	r24
    3f46:	70 95       	com	r23
    3f48:	61 95       	neg	r22
    3f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f4c:	8f 4f       	sbci	r24, 0xFF	; 255
    3f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f50:	f0 68       	ori	r31, 0x80	; 128
    3f52:	9f 2e       	mov	r9, r31
    3f54:	2a e0       	ldi	r18, 0x0A	; 10
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	a3 01       	movw	r20, r6
    3f5a:	0e 94 05 23 	call	0x460a	; 0x460a <__ultoa_invert>
    3f5e:	c8 2e       	mov	r12, r24
    3f60:	c6 18       	sub	r12, r6
    3f62:	3f c0       	rjmp	.+126    	; 0x3fe2 <vfprintf+0x57a>
    3f64:	09 2d       	mov	r16, r9
    3f66:	85 37       	cpi	r24, 0x75	; 117
    3f68:	21 f4       	brne	.+8      	; 0x3f72 <vfprintf+0x50a>
    3f6a:	0f 7e       	andi	r16, 0xEF	; 239
    3f6c:	2a e0       	ldi	r18, 0x0A	; 10
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	1d c0       	rjmp	.+58     	; 0x3fac <vfprintf+0x544>
    3f72:	09 7f       	andi	r16, 0xF9	; 249
    3f74:	8f 36       	cpi	r24, 0x6F	; 111
    3f76:	91 f0       	breq	.+36     	; 0x3f9c <vfprintf+0x534>
    3f78:	18 f4       	brcc	.+6      	; 0x3f80 <vfprintf+0x518>
    3f7a:	88 35       	cpi	r24, 0x58	; 88
    3f7c:	59 f0       	breq	.+22     	; 0x3f94 <vfprintf+0x52c>
    3f7e:	c3 c0       	rjmp	.+390    	; 0x4106 <__RODATA_PM_OFFSET__+0x106>
    3f80:	80 37       	cpi	r24, 0x70	; 112
    3f82:	19 f0       	breq	.+6      	; 0x3f8a <vfprintf+0x522>
    3f84:	88 37       	cpi	r24, 0x78	; 120
    3f86:	11 f0       	breq	.+4      	; 0x3f8c <vfprintf+0x524>
    3f88:	be c0       	rjmp	.+380    	; 0x4106 <__RODATA_PM_OFFSET__+0x106>
    3f8a:	00 61       	ori	r16, 0x10	; 16
    3f8c:	04 ff       	sbrs	r16, 4
    3f8e:	09 c0       	rjmp	.+18     	; 0x3fa2 <vfprintf+0x53a>
    3f90:	04 60       	ori	r16, 0x04	; 4
    3f92:	07 c0       	rjmp	.+14     	; 0x3fa2 <vfprintf+0x53a>
    3f94:	94 fe       	sbrs	r9, 4
    3f96:	08 c0       	rjmp	.+16     	; 0x3fa8 <vfprintf+0x540>
    3f98:	06 60       	ori	r16, 0x06	; 6
    3f9a:	06 c0       	rjmp	.+12     	; 0x3fa8 <vfprintf+0x540>
    3f9c:	28 e0       	ldi	r18, 0x08	; 8
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	05 c0       	rjmp	.+10     	; 0x3fac <vfprintf+0x544>
    3fa2:	20 e1       	ldi	r18, 0x10	; 16
    3fa4:	30 e0       	ldi	r19, 0x00	; 0
    3fa6:	02 c0       	rjmp	.+4      	; 0x3fac <vfprintf+0x544>
    3fa8:	20 e1       	ldi	r18, 0x10	; 16
    3faa:	32 e0       	ldi	r19, 0x02	; 2
    3fac:	56 01       	movw	r10, r12
    3fae:	07 ff       	sbrs	r16, 7
    3fb0:	09 c0       	rjmp	.+18     	; 0x3fc4 <vfprintf+0x55c>
    3fb2:	84 e0       	ldi	r24, 0x04	; 4
    3fb4:	a8 0e       	add	r10, r24
    3fb6:	b1 1c       	adc	r11, r1
    3fb8:	f6 01       	movw	r30, r12
    3fba:	60 81       	ld	r22, Z
    3fbc:	71 81       	ldd	r23, Z+1	; 0x01
    3fbe:	82 81       	ldd	r24, Z+2	; 0x02
    3fc0:	93 81       	ldd	r25, Z+3	; 0x03
    3fc2:	08 c0       	rjmp	.+16     	; 0x3fd4 <vfprintf+0x56c>
    3fc4:	f2 e0       	ldi	r31, 0x02	; 2
    3fc6:	af 0e       	add	r10, r31
    3fc8:	b1 1c       	adc	r11, r1
    3fca:	f6 01       	movw	r30, r12
    3fcc:	60 81       	ld	r22, Z
    3fce:	71 81       	ldd	r23, Z+1	; 0x01
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	a3 01       	movw	r20, r6
    3fd6:	0e 94 05 23 	call	0x460a	; 0x460a <__ultoa_invert>
    3fda:	c8 2e       	mov	r12, r24
    3fdc:	c6 18       	sub	r12, r6
    3fde:	0f 77       	andi	r16, 0x7F	; 127
    3fe0:	90 2e       	mov	r9, r16
    3fe2:	96 fe       	sbrs	r9, 6
    3fe4:	0b c0       	rjmp	.+22     	; 0x3ffc <vfprintf+0x594>
    3fe6:	09 2d       	mov	r16, r9
    3fe8:	0e 7f       	andi	r16, 0xFE	; 254
    3fea:	c1 16       	cp	r12, r17
    3fec:	50 f4       	brcc	.+20     	; 0x4002 <__RODATA_PM_OFFSET__+0x2>
    3fee:	94 fe       	sbrs	r9, 4
    3ff0:	0a c0       	rjmp	.+20     	; 0x4006 <__RODATA_PM_OFFSET__+0x6>
    3ff2:	92 fc       	sbrc	r9, 2
    3ff4:	08 c0       	rjmp	.+16     	; 0x4006 <__RODATA_PM_OFFSET__+0x6>
    3ff6:	09 2d       	mov	r16, r9
    3ff8:	0e 7e       	andi	r16, 0xEE	; 238
    3ffa:	05 c0       	rjmp	.+10     	; 0x4006 <__RODATA_PM_OFFSET__+0x6>
    3ffc:	dc 2c       	mov	r13, r12
    3ffe:	09 2d       	mov	r16, r9
    4000:	03 c0       	rjmp	.+6      	; 0x4008 <__RODATA_PM_OFFSET__+0x8>
    4002:	dc 2c       	mov	r13, r12
    4004:	01 c0       	rjmp	.+2      	; 0x4008 <__RODATA_PM_OFFSET__+0x8>
    4006:	d1 2e       	mov	r13, r17
    4008:	04 ff       	sbrs	r16, 4
    400a:	0d c0       	rjmp	.+26     	; 0x4026 <__RODATA_PM_OFFSET__+0x26>
    400c:	fe 01       	movw	r30, r28
    400e:	ec 0d       	add	r30, r12
    4010:	f1 1d       	adc	r31, r1
    4012:	80 81       	ld	r24, Z
    4014:	80 33       	cpi	r24, 0x30	; 48
    4016:	11 f4       	brne	.+4      	; 0x401c <__RODATA_PM_OFFSET__+0x1c>
    4018:	09 7e       	andi	r16, 0xE9	; 233
    401a:	09 c0       	rjmp	.+18     	; 0x402e <__RODATA_PM_OFFSET__+0x2e>
    401c:	02 ff       	sbrs	r16, 2
    401e:	06 c0       	rjmp	.+12     	; 0x402c <__RODATA_PM_OFFSET__+0x2c>
    4020:	d3 94       	inc	r13
    4022:	d3 94       	inc	r13
    4024:	04 c0       	rjmp	.+8      	; 0x402e <__RODATA_PM_OFFSET__+0x2e>
    4026:	80 2f       	mov	r24, r16
    4028:	86 78       	andi	r24, 0x86	; 134
    402a:	09 f0       	breq	.+2      	; 0x402e <__RODATA_PM_OFFSET__+0x2e>
    402c:	d3 94       	inc	r13
    402e:	03 fd       	sbrc	r16, 3
    4030:	11 c0       	rjmp	.+34     	; 0x4054 <__RODATA_PM_OFFSET__+0x54>
    4032:	00 ff       	sbrs	r16, 0
    4034:	06 c0       	rjmp	.+12     	; 0x4042 <__RODATA_PM_OFFSET__+0x42>
    4036:	1c 2d       	mov	r17, r12
    4038:	d5 14       	cp	r13, r5
    403a:	80 f4       	brcc	.+32     	; 0x405c <__RODATA_PM_OFFSET__+0x5c>
    403c:	15 0d       	add	r17, r5
    403e:	1d 19       	sub	r17, r13
    4040:	0d c0       	rjmp	.+26     	; 0x405c <__RODATA_PM_OFFSET__+0x5c>
    4042:	d5 14       	cp	r13, r5
    4044:	58 f4       	brcc	.+22     	; 0x405c <__RODATA_PM_OFFSET__+0x5c>
    4046:	b7 01       	movw	r22, r14
    4048:	80 e2       	ldi	r24, 0x20	; 32
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    4050:	d3 94       	inc	r13
    4052:	f7 cf       	rjmp	.-18     	; 0x4042 <__RODATA_PM_OFFSET__+0x42>
    4054:	d5 14       	cp	r13, r5
    4056:	10 f4       	brcc	.+4      	; 0x405c <__RODATA_PM_OFFSET__+0x5c>
    4058:	5d 18       	sub	r5, r13
    405a:	01 c0       	rjmp	.+2      	; 0x405e <__RODATA_PM_OFFSET__+0x5e>
    405c:	51 2c       	mov	r5, r1
    405e:	04 ff       	sbrs	r16, 4
    4060:	10 c0       	rjmp	.+32     	; 0x4082 <__RODATA_PM_OFFSET__+0x82>
    4062:	b7 01       	movw	r22, r14
    4064:	80 e3       	ldi	r24, 0x30	; 48
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    406c:	02 ff       	sbrs	r16, 2
    406e:	17 c0       	rjmp	.+46     	; 0x409e <__RODATA_PM_OFFSET__+0x9e>
    4070:	01 fd       	sbrc	r16, 1
    4072:	03 c0       	rjmp	.+6      	; 0x407a <__RODATA_PM_OFFSET__+0x7a>
    4074:	88 e7       	ldi	r24, 0x78	; 120
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	02 c0       	rjmp	.+4      	; 0x407e <__RODATA_PM_OFFSET__+0x7e>
    407a:	88 e5       	ldi	r24, 0x58	; 88
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	b7 01       	movw	r22, r14
    4080:	0c c0       	rjmp	.+24     	; 0x409a <__RODATA_PM_OFFSET__+0x9a>
    4082:	80 2f       	mov	r24, r16
    4084:	86 78       	andi	r24, 0x86	; 134
    4086:	59 f0       	breq	.+22     	; 0x409e <__RODATA_PM_OFFSET__+0x9e>
    4088:	01 ff       	sbrs	r16, 1
    408a:	02 c0       	rjmp	.+4      	; 0x4090 <__RODATA_PM_OFFSET__+0x90>
    408c:	8b e2       	ldi	r24, 0x2B	; 43
    408e:	01 c0       	rjmp	.+2      	; 0x4092 <__RODATA_PM_OFFSET__+0x92>
    4090:	80 e2       	ldi	r24, 0x20	; 32
    4092:	07 fd       	sbrc	r16, 7
    4094:	8d e2       	ldi	r24, 0x2D	; 45
    4096:	b7 01       	movw	r22, r14
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    409e:	c1 16       	cp	r12, r17
    40a0:	38 f4       	brcc	.+14     	; 0x40b0 <__RODATA_PM_OFFSET__+0xb0>
    40a2:	b7 01       	movw	r22, r14
    40a4:	80 e3       	ldi	r24, 0x30	; 48
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    40ac:	11 50       	subi	r17, 0x01	; 1
    40ae:	f7 cf       	rjmp	.-18     	; 0x409e <__RODATA_PM_OFFSET__+0x9e>
    40b0:	ca 94       	dec	r12
    40b2:	f3 01       	movw	r30, r6
    40b4:	ec 0d       	add	r30, r12
    40b6:	f1 1d       	adc	r31, r1
    40b8:	80 81       	ld	r24, Z
    40ba:	b7 01       	movw	r22, r14
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    40c2:	c1 10       	cpse	r12, r1
    40c4:	f5 cf       	rjmp	.-22     	; 0x40b0 <__RODATA_PM_OFFSET__+0xb0>
    40c6:	15 c0       	rjmp	.+42     	; 0x40f2 <__RODATA_PM_OFFSET__+0xf2>
    40c8:	f4 e0       	ldi	r31, 0x04	; 4
    40ca:	f5 15       	cp	r31, r5
    40cc:	60 f5       	brcc	.+88     	; 0x4126 <__RODATA_PM_OFFSET__+0x126>
    40ce:	84 e0       	ldi	r24, 0x04	; 4
    40d0:	58 1a       	sub	r5, r24
    40d2:	93 fe       	sbrs	r9, 3
    40d4:	1f c0       	rjmp	.+62     	; 0x4114 <__RODATA_PM_OFFSET__+0x114>
    40d6:	01 11       	cpse	r16, r1
    40d8:	27 c0       	rjmp	.+78     	; 0x4128 <__RODATA_PM_OFFSET__+0x128>
    40da:	2c 85       	ldd	r18, Y+12	; 0x0c
    40dc:	23 ff       	sbrs	r18, 3
    40de:	2a c0       	rjmp	.+84     	; 0x4134 <__RODATA_PM_OFFSET__+0x134>
    40e0:	02 e5       	ldi	r16, 0x52	; 82
    40e2:	11 e0       	ldi	r17, 0x01	; 1
    40e4:	39 2d       	mov	r19, r9
    40e6:	30 71       	andi	r19, 0x10	; 16
    40e8:	93 2e       	mov	r9, r19
    40ea:	f8 01       	movw	r30, r16
    40ec:	84 91       	lpm	r24, Z
    40ee:	81 11       	cpse	r24, r1
    40f0:	24 c0       	rjmp	.+72     	; 0x413a <__RODATA_PM_OFFSET__+0x13a>
    40f2:	55 20       	and	r5, r5
    40f4:	09 f4       	brne	.+2      	; 0x40f8 <__RODATA_PM_OFFSET__+0xf8>
    40f6:	e4 cc       	rjmp	.-1592   	; 0x3ac0 <vfprintf+0x58>
    40f8:	b7 01       	movw	r22, r14
    40fa:	80 e2       	ldi	r24, 0x20	; 32
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    4102:	5a 94       	dec	r5
    4104:	f6 cf       	rjmp	.-20     	; 0x40f2 <__RODATA_PM_OFFSET__+0xf2>
    4106:	f7 01       	movw	r30, r14
    4108:	86 81       	ldd	r24, Z+6	; 0x06
    410a:	97 81       	ldd	r25, Z+7	; 0x07
    410c:	26 c0       	rjmp	.+76     	; 0x415a <__RODATA_PM_OFFSET__+0x15a>
    410e:	8f ef       	ldi	r24, 0xFF	; 255
    4110:	9f ef       	ldi	r25, 0xFF	; 255
    4112:	23 c0       	rjmp	.+70     	; 0x415a <__RODATA_PM_OFFSET__+0x15a>
    4114:	b7 01       	movw	r22, r14
    4116:	80 e2       	ldi	r24, 0x20	; 32
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    411e:	5a 94       	dec	r5
    4120:	51 10       	cpse	r5, r1
    4122:	f8 cf       	rjmp	.-16     	; 0x4114 <__RODATA_PM_OFFSET__+0x114>
    4124:	d8 cf       	rjmp	.-80     	; 0x40d6 <__RODATA_PM_OFFSET__+0xd6>
    4126:	51 2c       	mov	r5, r1
    4128:	b7 01       	movw	r22, r14
    412a:	80 2f       	mov	r24, r16
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    4132:	d3 cf       	rjmp	.-90     	; 0x40da <__RODATA_PM_OFFSET__+0xda>
    4134:	06 e5       	ldi	r16, 0x56	; 86
    4136:	11 e0       	ldi	r17, 0x01	; 1
    4138:	d5 cf       	rjmp	.-86     	; 0x40e4 <__RODATA_PM_OFFSET__+0xe4>
    413a:	91 10       	cpse	r9, r1
    413c:	80 52       	subi	r24, 0x20	; 32
    413e:	b7 01       	movw	r22, r14
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	0e 94 a7 22 	call	0x454e	; 0x454e <fputc>
    4146:	0f 5f       	subi	r16, 0xFF	; 255
    4148:	1f 4f       	sbci	r17, 0xFF	; 255
    414a:	cf cf       	rjmp	.-98     	; 0x40ea <__RODATA_PM_OFFSET__+0xea>
    414c:	23 e0       	ldi	r18, 0x03	; 3
    414e:	25 15       	cp	r18, r5
    4150:	10 f4       	brcc	.+4      	; 0x4156 <__RODATA_PM_OFFSET__+0x156>
    4152:	83 e0       	ldi	r24, 0x03	; 3
    4154:	bd cf       	rjmp	.-134    	; 0x40d0 <__RODATA_PM_OFFSET__+0xd0>
    4156:	51 2c       	mov	r5, r1
    4158:	c0 cf       	rjmp	.-128    	; 0x40da <__RODATA_PM_OFFSET__+0xda>
    415a:	60 96       	adiw	r28, 0x10	; 16
    415c:	e2 e1       	ldi	r30, 0x12	; 18
    415e:	0c 94 0e 21 	jmp	0x421c	; 0x421c <__epilogue_restores__>

00004162 <__divmodhi4>:
    4162:	97 fb       	bst	r25, 7
    4164:	07 2e       	mov	r0, r23
    4166:	16 f4       	brtc	.+4      	; 0x416c <__divmodhi4+0xa>
    4168:	00 94       	com	r0
    416a:	07 d0       	rcall	.+14     	; 0x417a <__divmodhi4_neg1>
    416c:	77 fd       	sbrc	r23, 7
    416e:	09 d0       	rcall	.+18     	; 0x4182 <__divmodhi4_neg2>
    4170:	0e 94 26 21 	call	0x424c	; 0x424c <__udivmodhi4>
    4174:	07 fc       	sbrc	r0, 7
    4176:	05 d0       	rcall	.+10     	; 0x4182 <__divmodhi4_neg2>
    4178:	3e f4       	brtc	.+14     	; 0x4188 <__divmodhi4_exit>

0000417a <__divmodhi4_neg1>:
    417a:	90 95       	com	r25
    417c:	81 95       	neg	r24
    417e:	9f 4f       	sbci	r25, 0xFF	; 255
    4180:	08 95       	ret

00004182 <__divmodhi4_neg2>:
    4182:	70 95       	com	r23
    4184:	61 95       	neg	r22
    4186:	7f 4f       	sbci	r23, 0xFF	; 255

00004188 <__divmodhi4_exit>:
    4188:	08 95       	ret

0000418a <__divmodsi4>:
    418a:	05 2e       	mov	r0, r21
    418c:	97 fb       	bst	r25, 7
    418e:	1e f4       	brtc	.+6      	; 0x4196 <__divmodsi4+0xc>
    4190:	00 94       	com	r0
    4192:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <__negsi2>
    4196:	57 fd       	sbrc	r21, 7
    4198:	07 d0       	rcall	.+14     	; 0x41a8 <__divmodsi4_neg2>
    419a:	0e 94 3a 21 	call	0x4274	; 0x4274 <__udivmodsi4>
    419e:	07 fc       	sbrc	r0, 7
    41a0:	03 d0       	rcall	.+6      	; 0x41a8 <__divmodsi4_neg2>
    41a2:	4e f4       	brtc	.+18     	; 0x41b6 <__divmodsi4_exit>
    41a4:	0c 94 dc 20 	jmp	0x41b8	; 0x41b8 <__negsi2>

000041a8 <__divmodsi4_neg2>:
    41a8:	50 95       	com	r21
    41aa:	40 95       	com	r20
    41ac:	30 95       	com	r19
    41ae:	21 95       	neg	r18
    41b0:	3f 4f       	sbci	r19, 0xFF	; 255
    41b2:	4f 4f       	sbci	r20, 0xFF	; 255
    41b4:	5f 4f       	sbci	r21, 0xFF	; 255

000041b6 <__divmodsi4_exit>:
    41b6:	08 95       	ret

000041b8 <__negsi2>:
    41b8:	90 95       	com	r25
    41ba:	80 95       	com	r24
    41bc:	70 95       	com	r23
    41be:	61 95       	neg	r22
    41c0:	7f 4f       	sbci	r23, 0xFF	; 255
    41c2:	8f 4f       	sbci	r24, 0xFF	; 255
    41c4:	9f 4f       	sbci	r25, 0xFF	; 255
    41c6:	08 95       	ret

000041c8 <__tablejump2__>:
    41c8:	ee 0f       	add	r30, r30
    41ca:	ff 1f       	adc	r31, r31
    41cc:	05 90       	lpm	r0, Z+
    41ce:	f4 91       	lpm	r31, Z
    41d0:	e0 2d       	mov	r30, r0
    41d2:	09 94       	ijmp

000041d4 <__muluhisi3>:
    41d4:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <__umulhisi3>
    41d8:	a5 9f       	mul	r26, r21
    41da:	90 0d       	add	r25, r0
    41dc:	b4 9f       	mul	r27, r20
    41de:	90 0d       	add	r25, r0
    41e0:	a4 9f       	mul	r26, r20
    41e2:	80 0d       	add	r24, r0
    41e4:	91 1d       	adc	r25, r1
    41e6:	11 24       	eor	r1, r1
    41e8:	08 95       	ret

000041ea <__prologue_saves__>:
    41ea:	2f 92       	push	r2
    41ec:	3f 92       	push	r3
    41ee:	4f 92       	push	r4
    41f0:	5f 92       	push	r5
    41f2:	6f 92       	push	r6
    41f4:	7f 92       	push	r7
    41f6:	8f 92       	push	r8
    41f8:	9f 92       	push	r9
    41fa:	af 92       	push	r10
    41fc:	bf 92       	push	r11
    41fe:	cf 92       	push	r12
    4200:	df 92       	push	r13
    4202:	ef 92       	push	r14
    4204:	ff 92       	push	r15
    4206:	0f 93       	push	r16
    4208:	1f 93       	push	r17
    420a:	cf 93       	push	r28
    420c:	df 93       	push	r29
    420e:	cd b7       	in	r28, 0x3d	; 61
    4210:	de b7       	in	r29, 0x3e	; 62
    4212:	ca 1b       	sub	r28, r26
    4214:	db 0b       	sbc	r29, r27
    4216:	cd bf       	out	0x3d, r28	; 61
    4218:	de bf       	out	0x3e, r29	; 62
    421a:	09 94       	ijmp

0000421c <__epilogue_restores__>:
    421c:	2a 88       	ldd	r2, Y+18	; 0x12
    421e:	39 88       	ldd	r3, Y+17	; 0x11
    4220:	48 88       	ldd	r4, Y+16	; 0x10
    4222:	5f 84       	ldd	r5, Y+15	; 0x0f
    4224:	6e 84       	ldd	r6, Y+14	; 0x0e
    4226:	7d 84       	ldd	r7, Y+13	; 0x0d
    4228:	8c 84       	ldd	r8, Y+12	; 0x0c
    422a:	9b 84       	ldd	r9, Y+11	; 0x0b
    422c:	aa 84       	ldd	r10, Y+10	; 0x0a
    422e:	b9 84       	ldd	r11, Y+9	; 0x09
    4230:	c8 84       	ldd	r12, Y+8	; 0x08
    4232:	df 80       	ldd	r13, Y+7	; 0x07
    4234:	ee 80       	ldd	r14, Y+6	; 0x06
    4236:	fd 80       	ldd	r15, Y+5	; 0x05
    4238:	0c 81       	ldd	r16, Y+4	; 0x04
    423a:	1b 81       	ldd	r17, Y+3	; 0x03
    423c:	aa 81       	ldd	r26, Y+2	; 0x02
    423e:	b9 81       	ldd	r27, Y+1	; 0x01
    4240:	ce 0f       	add	r28, r30
    4242:	d1 1d       	adc	r29, r1
    4244:	cd bf       	out	0x3d, r28	; 61
    4246:	de bf       	out	0x3e, r29	; 62
    4248:	ed 01       	movw	r28, r26
    424a:	08 95       	ret

0000424c <__udivmodhi4>:
    424c:	aa 1b       	sub	r26, r26
    424e:	bb 1b       	sub	r27, r27
    4250:	51 e1       	ldi	r21, 0x11	; 17
    4252:	07 c0       	rjmp	.+14     	; 0x4262 <__udivmodhi4_ep>

00004254 <__udivmodhi4_loop>:
    4254:	aa 1f       	adc	r26, r26
    4256:	bb 1f       	adc	r27, r27
    4258:	a6 17       	cp	r26, r22
    425a:	b7 07       	cpc	r27, r23
    425c:	10 f0       	brcs	.+4      	; 0x4262 <__udivmodhi4_ep>
    425e:	a6 1b       	sub	r26, r22
    4260:	b7 0b       	sbc	r27, r23

00004262 <__udivmodhi4_ep>:
    4262:	88 1f       	adc	r24, r24
    4264:	99 1f       	adc	r25, r25
    4266:	5a 95       	dec	r21
    4268:	a9 f7       	brne	.-22     	; 0x4254 <__udivmodhi4_loop>
    426a:	80 95       	com	r24
    426c:	90 95       	com	r25
    426e:	bc 01       	movw	r22, r24
    4270:	cd 01       	movw	r24, r26
    4272:	08 95       	ret

00004274 <__udivmodsi4>:
    4274:	a1 e2       	ldi	r26, 0x21	; 33
    4276:	1a 2e       	mov	r1, r26
    4278:	aa 1b       	sub	r26, r26
    427a:	bb 1b       	sub	r27, r27
    427c:	fd 01       	movw	r30, r26
    427e:	0d c0       	rjmp	.+26     	; 0x429a <__udivmodsi4_ep>

00004280 <__udivmodsi4_loop>:
    4280:	aa 1f       	adc	r26, r26
    4282:	bb 1f       	adc	r27, r27
    4284:	ee 1f       	adc	r30, r30
    4286:	ff 1f       	adc	r31, r31
    4288:	a2 17       	cp	r26, r18
    428a:	b3 07       	cpc	r27, r19
    428c:	e4 07       	cpc	r30, r20
    428e:	f5 07       	cpc	r31, r21
    4290:	20 f0       	brcs	.+8      	; 0x429a <__udivmodsi4_ep>
    4292:	a2 1b       	sub	r26, r18
    4294:	b3 0b       	sbc	r27, r19
    4296:	e4 0b       	sbc	r30, r20
    4298:	f5 0b       	sbc	r31, r21

0000429a <__udivmodsi4_ep>:
    429a:	66 1f       	adc	r22, r22
    429c:	77 1f       	adc	r23, r23
    429e:	88 1f       	adc	r24, r24
    42a0:	99 1f       	adc	r25, r25
    42a2:	1a 94       	dec	r1
    42a4:	69 f7       	brne	.-38     	; 0x4280 <__udivmodsi4_loop>
    42a6:	60 95       	com	r22
    42a8:	70 95       	com	r23
    42aa:	80 95       	com	r24
    42ac:	90 95       	com	r25
    42ae:	9b 01       	movw	r18, r22
    42b0:	ac 01       	movw	r20, r24
    42b2:	bd 01       	movw	r22, r26
    42b4:	cf 01       	movw	r24, r30
    42b6:	08 95       	ret

000042b8 <__umulhisi3>:
    42b8:	a2 9f       	mul	r26, r18
    42ba:	b0 01       	movw	r22, r0
    42bc:	b3 9f       	mul	r27, r19
    42be:	c0 01       	movw	r24, r0
    42c0:	a3 9f       	mul	r26, r19
    42c2:	70 0d       	add	r23, r0
    42c4:	81 1d       	adc	r24, r1
    42c6:	11 24       	eor	r1, r1
    42c8:	91 1d       	adc	r25, r1
    42ca:	b2 9f       	mul	r27, r18
    42cc:	70 0d       	add	r23, r0
    42ce:	81 1d       	adc	r24, r1
    42d0:	11 24       	eor	r1, r1
    42d2:	91 1d       	adc	r25, r1
    42d4:	08 95       	ret

000042d6 <atol>:
    42d6:	1f 93       	push	r17
    42d8:	fc 01       	movw	r30, r24
    42da:	99 27       	eor	r25, r25
    42dc:	88 27       	eor	r24, r24
    42de:	bc 01       	movw	r22, r24
    42e0:	e8 94       	clt
    42e2:	11 91       	ld	r17, Z+
    42e4:	10 32       	cpi	r17, 0x20	; 32
    42e6:	e9 f3       	breq	.-6      	; 0x42e2 <atol+0xc>
    42e8:	19 30       	cpi	r17, 0x09	; 9
    42ea:	10 f0       	brcs	.+4      	; 0x42f0 <atol+0x1a>
    42ec:	1e 30       	cpi	r17, 0x0E	; 14
    42ee:	c8 f3       	brcs	.-14     	; 0x42e2 <atol+0xc>
    42f0:	1b 32       	cpi	r17, 0x2B	; 43
    42f2:	51 f0       	breq	.+20     	; 0x4308 <atol+0x32>
    42f4:	1d 32       	cpi	r17, 0x2D	; 45
    42f6:	49 f4       	brne	.+18     	; 0x430a <atol+0x34>
    42f8:	68 94       	set
    42fa:	06 c0       	rjmp	.+12     	; 0x4308 <atol+0x32>
    42fc:	0e 94 92 22 	call	0x4524	; 0x4524 <__mulsi_const_10>
    4300:	61 0f       	add	r22, r17
    4302:	71 1d       	adc	r23, r1
    4304:	81 1d       	adc	r24, r1
    4306:	91 1d       	adc	r25, r1
    4308:	11 91       	ld	r17, Z+
    430a:	10 53       	subi	r17, 0x30	; 48
    430c:	1a 30       	cpi	r17, 0x0A	; 10
    430e:	b0 f3       	brcs	.-20     	; 0x42fc <atol+0x26>
    4310:	3e f4       	brtc	.+14     	; 0x4320 <atol+0x4a>
    4312:	90 95       	com	r25
    4314:	80 95       	com	r24
    4316:	70 95       	com	r23
    4318:	61 95       	neg	r22
    431a:	7f 4f       	sbci	r23, 0xFF	; 255
    431c:	8f 4f       	sbci	r24, 0xFF	; 255
    431e:	9f 4f       	sbci	r25, 0xFF	; 255
    4320:	1f 91       	pop	r17
    4322:	08 95       	ret

00004324 <__ftoa_engine>:
    4324:	28 30       	cpi	r18, 0x08	; 8
    4326:	08 f0       	brcs	.+2      	; 0x432a <__ftoa_engine+0x6>
    4328:	27 e0       	ldi	r18, 0x07	; 7
    432a:	33 27       	eor	r19, r19
    432c:	da 01       	movw	r26, r20
    432e:	99 0f       	add	r25, r25
    4330:	31 1d       	adc	r19, r1
    4332:	87 fd       	sbrc	r24, 7
    4334:	91 60       	ori	r25, 0x01	; 1
    4336:	00 96       	adiw	r24, 0x00	; 0
    4338:	61 05       	cpc	r22, r1
    433a:	71 05       	cpc	r23, r1
    433c:	39 f4       	brne	.+14     	; 0x434c <__ftoa_engine+0x28>
    433e:	32 60       	ori	r19, 0x02	; 2
    4340:	2e 5f       	subi	r18, 0xFE	; 254
    4342:	3d 93       	st	X+, r19
    4344:	30 e3       	ldi	r19, 0x30	; 48
    4346:	2a 95       	dec	r18
    4348:	e1 f7       	brne	.-8      	; 0x4342 <__ftoa_engine+0x1e>
    434a:	08 95       	ret
    434c:	9f 3f       	cpi	r25, 0xFF	; 255
    434e:	30 f0       	brcs	.+12     	; 0x435c <__ftoa_engine+0x38>
    4350:	80 38       	cpi	r24, 0x80	; 128
    4352:	71 05       	cpc	r23, r1
    4354:	61 05       	cpc	r22, r1
    4356:	09 f0       	breq	.+2      	; 0x435a <__ftoa_engine+0x36>
    4358:	3c 5f       	subi	r19, 0xFC	; 252
    435a:	3c 5f       	subi	r19, 0xFC	; 252
    435c:	3d 93       	st	X+, r19
    435e:	91 30       	cpi	r25, 0x01	; 1
    4360:	08 f0       	brcs	.+2      	; 0x4364 <__ftoa_engine+0x40>
    4362:	80 68       	ori	r24, 0x80	; 128
    4364:	91 1d       	adc	r25, r1
    4366:	df 93       	push	r29
    4368:	cf 93       	push	r28
    436a:	1f 93       	push	r17
    436c:	0f 93       	push	r16
    436e:	ff 92       	push	r15
    4370:	ef 92       	push	r14
    4372:	19 2f       	mov	r17, r25
    4374:	98 7f       	andi	r25, 0xF8	; 248
    4376:	96 95       	lsr	r25
    4378:	e9 2f       	mov	r30, r25
    437a:	96 95       	lsr	r25
    437c:	96 95       	lsr	r25
    437e:	e9 0f       	add	r30, r25
    4380:	ff 27       	eor	r31, r31
    4382:	ec 54       	subi	r30, 0x4C	; 76
    4384:	fe 4f       	sbci	r31, 0xFE	; 254
    4386:	99 27       	eor	r25, r25
    4388:	33 27       	eor	r19, r19
    438a:	ee 24       	eor	r14, r14
    438c:	ff 24       	eor	r15, r15
    438e:	a7 01       	movw	r20, r14
    4390:	e7 01       	movw	r28, r14
    4392:	05 90       	lpm	r0, Z+
    4394:	08 94       	sec
    4396:	07 94       	ror	r0
    4398:	28 f4       	brcc	.+10     	; 0x43a4 <__ftoa_engine+0x80>
    439a:	36 0f       	add	r19, r22
    439c:	e7 1e       	adc	r14, r23
    439e:	f8 1e       	adc	r15, r24
    43a0:	49 1f       	adc	r20, r25
    43a2:	51 1d       	adc	r21, r1
    43a4:	66 0f       	add	r22, r22
    43a6:	77 1f       	adc	r23, r23
    43a8:	88 1f       	adc	r24, r24
    43aa:	99 1f       	adc	r25, r25
    43ac:	06 94       	lsr	r0
    43ae:	a1 f7       	brne	.-24     	; 0x4398 <__ftoa_engine+0x74>
    43b0:	05 90       	lpm	r0, Z+
    43b2:	07 94       	ror	r0
    43b4:	28 f4       	brcc	.+10     	; 0x43c0 <__ftoa_engine+0x9c>
    43b6:	e7 0e       	add	r14, r23
    43b8:	f8 1e       	adc	r15, r24
    43ba:	49 1f       	adc	r20, r25
    43bc:	56 1f       	adc	r21, r22
    43be:	c1 1d       	adc	r28, r1
    43c0:	77 0f       	add	r23, r23
    43c2:	88 1f       	adc	r24, r24
    43c4:	99 1f       	adc	r25, r25
    43c6:	66 1f       	adc	r22, r22
    43c8:	06 94       	lsr	r0
    43ca:	a1 f7       	brne	.-24     	; 0x43b4 <__ftoa_engine+0x90>
    43cc:	05 90       	lpm	r0, Z+
    43ce:	07 94       	ror	r0
    43d0:	28 f4       	brcc	.+10     	; 0x43dc <__ftoa_engine+0xb8>
    43d2:	f8 0e       	add	r15, r24
    43d4:	49 1f       	adc	r20, r25
    43d6:	56 1f       	adc	r21, r22
    43d8:	c7 1f       	adc	r28, r23
    43da:	d1 1d       	adc	r29, r1
    43dc:	88 0f       	add	r24, r24
    43de:	99 1f       	adc	r25, r25
    43e0:	66 1f       	adc	r22, r22
    43e2:	77 1f       	adc	r23, r23
    43e4:	06 94       	lsr	r0
    43e6:	a1 f7       	brne	.-24     	; 0x43d0 <__ftoa_engine+0xac>
    43e8:	05 90       	lpm	r0, Z+
    43ea:	07 94       	ror	r0
    43ec:	20 f4       	brcc	.+8      	; 0x43f6 <__ftoa_engine+0xd2>
    43ee:	49 0f       	add	r20, r25
    43f0:	56 1f       	adc	r21, r22
    43f2:	c7 1f       	adc	r28, r23
    43f4:	d8 1f       	adc	r29, r24
    43f6:	99 0f       	add	r25, r25
    43f8:	66 1f       	adc	r22, r22
    43fa:	77 1f       	adc	r23, r23
    43fc:	88 1f       	adc	r24, r24
    43fe:	06 94       	lsr	r0
    4400:	a9 f7       	brne	.-22     	; 0x43ec <__ftoa_engine+0xc8>
    4402:	84 91       	lpm	r24, Z
    4404:	10 95       	com	r17
    4406:	17 70       	andi	r17, 0x07	; 7
    4408:	41 f0       	breq	.+16     	; 0x441a <__ftoa_engine+0xf6>
    440a:	d6 95       	lsr	r29
    440c:	c7 95       	ror	r28
    440e:	57 95       	ror	r21
    4410:	47 95       	ror	r20
    4412:	f7 94       	ror	r15
    4414:	e7 94       	ror	r14
    4416:	1a 95       	dec	r17
    4418:	c1 f7       	brne	.-16     	; 0x440a <__ftoa_engine+0xe6>
    441a:	ea e5       	ldi	r30, 0x5A	; 90
    441c:	f1 e0       	ldi	r31, 0x01	; 1
    441e:	68 94       	set
    4420:	15 90       	lpm	r1, Z+
    4422:	15 91       	lpm	r17, Z+
    4424:	35 91       	lpm	r19, Z+
    4426:	65 91       	lpm	r22, Z+
    4428:	95 91       	lpm	r25, Z+
    442a:	05 90       	lpm	r0, Z+
    442c:	7f e2       	ldi	r23, 0x2F	; 47
    442e:	73 95       	inc	r23
    4430:	e1 18       	sub	r14, r1
    4432:	f1 0a       	sbc	r15, r17
    4434:	43 0b       	sbc	r20, r19
    4436:	56 0b       	sbc	r21, r22
    4438:	c9 0b       	sbc	r28, r25
    443a:	d0 09       	sbc	r29, r0
    443c:	c0 f7       	brcc	.-16     	; 0x442e <__ftoa_engine+0x10a>
    443e:	e1 0c       	add	r14, r1
    4440:	f1 1e       	adc	r15, r17
    4442:	43 1f       	adc	r20, r19
    4444:	56 1f       	adc	r21, r22
    4446:	c9 1f       	adc	r28, r25
    4448:	d0 1d       	adc	r29, r0
    444a:	7e f4       	brtc	.+30     	; 0x446a <__ftoa_engine+0x146>
    444c:	70 33       	cpi	r23, 0x30	; 48
    444e:	11 f4       	brne	.+4      	; 0x4454 <__ftoa_engine+0x130>
    4450:	8a 95       	dec	r24
    4452:	e6 cf       	rjmp	.-52     	; 0x4420 <__ftoa_engine+0xfc>
    4454:	e8 94       	clt
    4456:	01 50       	subi	r16, 0x01	; 1
    4458:	30 f0       	brcs	.+12     	; 0x4466 <__ftoa_engine+0x142>
    445a:	08 0f       	add	r16, r24
    445c:	0a f4       	brpl	.+2      	; 0x4460 <__ftoa_engine+0x13c>
    445e:	00 27       	eor	r16, r16
    4460:	02 17       	cp	r16, r18
    4462:	08 f4       	brcc	.+2      	; 0x4466 <__ftoa_engine+0x142>
    4464:	20 2f       	mov	r18, r16
    4466:	23 95       	inc	r18
    4468:	02 2f       	mov	r16, r18
    446a:	7a 33       	cpi	r23, 0x3A	; 58
    446c:	28 f0       	brcs	.+10     	; 0x4478 <__ftoa_engine+0x154>
    446e:	79 e3       	ldi	r23, 0x39	; 57
    4470:	7d 93       	st	X+, r23
    4472:	2a 95       	dec	r18
    4474:	e9 f7       	brne	.-6      	; 0x4470 <__ftoa_engine+0x14c>
    4476:	10 c0       	rjmp	.+32     	; 0x4498 <__ftoa_engine+0x174>
    4478:	7d 93       	st	X+, r23
    447a:	2a 95       	dec	r18
    447c:	89 f6       	brne	.-94     	; 0x4420 <__ftoa_engine+0xfc>
    447e:	06 94       	lsr	r0
    4480:	97 95       	ror	r25
    4482:	67 95       	ror	r22
    4484:	37 95       	ror	r19
    4486:	17 95       	ror	r17
    4488:	17 94       	ror	r1
    448a:	e1 18       	sub	r14, r1
    448c:	f1 0a       	sbc	r15, r17
    448e:	43 0b       	sbc	r20, r19
    4490:	56 0b       	sbc	r21, r22
    4492:	c9 0b       	sbc	r28, r25
    4494:	d0 09       	sbc	r29, r0
    4496:	98 f0       	brcs	.+38     	; 0x44be <__ftoa_engine+0x19a>
    4498:	23 95       	inc	r18
    449a:	7e 91       	ld	r23, -X
    449c:	73 95       	inc	r23
    449e:	7a 33       	cpi	r23, 0x3A	; 58
    44a0:	08 f0       	brcs	.+2      	; 0x44a4 <__ftoa_engine+0x180>
    44a2:	70 e3       	ldi	r23, 0x30	; 48
    44a4:	7c 93       	st	X, r23
    44a6:	20 13       	cpse	r18, r16
    44a8:	b8 f7       	brcc	.-18     	; 0x4498 <__ftoa_engine+0x174>
    44aa:	7e 91       	ld	r23, -X
    44ac:	70 61       	ori	r23, 0x10	; 16
    44ae:	7d 93       	st	X+, r23
    44b0:	30 f0       	brcs	.+12     	; 0x44be <__ftoa_engine+0x19a>
    44b2:	83 95       	inc	r24
    44b4:	71 e3       	ldi	r23, 0x31	; 49
    44b6:	7d 93       	st	X+, r23
    44b8:	70 e3       	ldi	r23, 0x30	; 48
    44ba:	2a 95       	dec	r18
    44bc:	e1 f7       	brne	.-8      	; 0x44b6 <__ftoa_engine+0x192>
    44be:	11 24       	eor	r1, r1
    44c0:	ef 90       	pop	r14
    44c2:	ff 90       	pop	r15
    44c4:	0f 91       	pop	r16
    44c6:	1f 91       	pop	r17
    44c8:	cf 91       	pop	r28
    44ca:	df 91       	pop	r29
    44cc:	99 27       	eor	r25, r25
    44ce:	87 fd       	sbrc	r24, 7
    44d0:	90 95       	com	r25
    44d2:	08 95       	ret

000044d4 <strnlen_P>:
    44d4:	fc 01       	movw	r30, r24
    44d6:	05 90       	lpm	r0, Z+
    44d8:	61 50       	subi	r22, 0x01	; 1
    44da:	70 40       	sbci	r23, 0x00	; 0
    44dc:	01 10       	cpse	r0, r1
    44de:	d8 f7       	brcc	.-10     	; 0x44d6 <strnlen_P+0x2>
    44e0:	80 95       	com	r24
    44e2:	90 95       	com	r25
    44e4:	8e 0f       	add	r24, r30
    44e6:	9f 1f       	adc	r25, r31
    44e8:	08 95       	ret

000044ea <strcat>:
    44ea:	fb 01       	movw	r30, r22
    44ec:	dc 01       	movw	r26, r24
    44ee:	0d 90       	ld	r0, X+
    44f0:	00 20       	and	r0, r0
    44f2:	e9 f7       	brne	.-6      	; 0x44ee <strcat+0x4>
    44f4:	11 97       	sbiw	r26, 0x01	; 1
    44f6:	01 90       	ld	r0, Z+
    44f8:	0d 92       	st	X+, r0
    44fa:	00 20       	and	r0, r0
    44fc:	e1 f7       	brne	.-8      	; 0x44f6 <strcat+0xc>
    44fe:	08 95       	ret

00004500 <strcpy>:
    4500:	fb 01       	movw	r30, r22
    4502:	dc 01       	movw	r26, r24
    4504:	01 90       	ld	r0, Z+
    4506:	0d 92       	st	X+, r0
    4508:	00 20       	and	r0, r0
    450a:	e1 f7       	brne	.-8      	; 0x4504 <strcpy+0x4>
    450c:	08 95       	ret

0000450e <strnlen>:
    450e:	fc 01       	movw	r30, r24
    4510:	61 50       	subi	r22, 0x01	; 1
    4512:	70 40       	sbci	r23, 0x00	; 0
    4514:	01 90       	ld	r0, Z+
    4516:	01 10       	cpse	r0, r1
    4518:	d8 f7       	brcc	.-10     	; 0x4510 <strnlen+0x2>
    451a:	80 95       	com	r24
    451c:	90 95       	com	r25
    451e:	8e 0f       	add	r24, r30
    4520:	9f 1f       	adc	r25, r31
    4522:	08 95       	ret

00004524 <__mulsi_const_10>:
    4524:	59 2f       	mov	r21, r25
    4526:	48 2f       	mov	r20, r24
    4528:	37 2f       	mov	r19, r23
    452a:	26 2f       	mov	r18, r22
    452c:	66 0f       	add	r22, r22
    452e:	77 1f       	adc	r23, r23
    4530:	88 1f       	adc	r24, r24
    4532:	99 1f       	adc	r25, r25
    4534:	66 0f       	add	r22, r22
    4536:	77 1f       	adc	r23, r23
    4538:	88 1f       	adc	r24, r24
    453a:	99 1f       	adc	r25, r25
    453c:	62 0f       	add	r22, r18
    453e:	73 1f       	adc	r23, r19
    4540:	84 1f       	adc	r24, r20
    4542:	95 1f       	adc	r25, r21
    4544:	66 0f       	add	r22, r22
    4546:	77 1f       	adc	r23, r23
    4548:	88 1f       	adc	r24, r24
    454a:	99 1f       	adc	r25, r25
    454c:	08 95       	ret

0000454e <fputc>:
    454e:	0f 93       	push	r16
    4550:	1f 93       	push	r17
    4552:	cf 93       	push	r28
    4554:	df 93       	push	r29
    4556:	fb 01       	movw	r30, r22
    4558:	23 81       	ldd	r18, Z+3	; 0x03
    455a:	21 fd       	sbrc	r18, 1
    455c:	03 c0       	rjmp	.+6      	; 0x4564 <fputc+0x16>
    455e:	8f ef       	ldi	r24, 0xFF	; 255
    4560:	9f ef       	ldi	r25, 0xFF	; 255
    4562:	2c c0       	rjmp	.+88     	; 0x45bc <fputc+0x6e>
    4564:	22 ff       	sbrs	r18, 2
    4566:	16 c0       	rjmp	.+44     	; 0x4594 <fputc+0x46>
    4568:	46 81       	ldd	r20, Z+6	; 0x06
    456a:	57 81       	ldd	r21, Z+7	; 0x07
    456c:	24 81       	ldd	r18, Z+4	; 0x04
    456e:	35 81       	ldd	r19, Z+5	; 0x05
    4570:	42 17       	cp	r20, r18
    4572:	53 07       	cpc	r21, r19
    4574:	44 f4       	brge	.+16     	; 0x4586 <fputc+0x38>
    4576:	a0 81       	ld	r26, Z
    4578:	b1 81       	ldd	r27, Z+1	; 0x01
    457a:	9d 01       	movw	r18, r26
    457c:	2f 5f       	subi	r18, 0xFF	; 255
    457e:	3f 4f       	sbci	r19, 0xFF	; 255
    4580:	20 83       	st	Z, r18
    4582:	31 83       	std	Z+1, r19	; 0x01
    4584:	8c 93       	st	X, r24
    4586:	26 81       	ldd	r18, Z+6	; 0x06
    4588:	37 81       	ldd	r19, Z+7	; 0x07
    458a:	2f 5f       	subi	r18, 0xFF	; 255
    458c:	3f 4f       	sbci	r19, 0xFF	; 255
    458e:	26 83       	std	Z+6, r18	; 0x06
    4590:	37 83       	std	Z+7, r19	; 0x07
    4592:	14 c0       	rjmp	.+40     	; 0x45bc <fputc+0x6e>
    4594:	8b 01       	movw	r16, r22
    4596:	ec 01       	movw	r28, r24
    4598:	fb 01       	movw	r30, r22
    459a:	00 84       	ldd	r0, Z+8	; 0x08
    459c:	f1 85       	ldd	r31, Z+9	; 0x09
    459e:	e0 2d       	mov	r30, r0
    45a0:	09 95       	icall
    45a2:	89 2b       	or	r24, r25
    45a4:	e1 f6       	brne	.-72     	; 0x455e <fputc+0x10>
    45a6:	d8 01       	movw	r26, r16
    45a8:	16 96       	adiw	r26, 0x06	; 6
    45aa:	8d 91       	ld	r24, X+
    45ac:	9c 91       	ld	r25, X
    45ae:	17 97       	sbiw	r26, 0x07	; 7
    45b0:	01 96       	adiw	r24, 0x01	; 1
    45b2:	16 96       	adiw	r26, 0x06	; 6
    45b4:	8d 93       	st	X+, r24
    45b6:	9c 93       	st	X, r25
    45b8:	17 97       	sbiw	r26, 0x07	; 7
    45ba:	ce 01       	movw	r24, r28
    45bc:	df 91       	pop	r29
    45be:	cf 91       	pop	r28
    45c0:	1f 91       	pop	r17
    45c2:	0f 91       	pop	r16
    45c4:	08 95       	ret

000045c6 <sprintf>:
    45c6:	ae e0       	ldi	r26, 0x0E	; 14
    45c8:	b0 e0       	ldi	r27, 0x00	; 0
    45ca:	e9 ee       	ldi	r30, 0xE9	; 233
    45cc:	f2 e2       	ldi	r31, 0x22	; 34
    45ce:	0c 94 03 21 	jmp	0x4206	; 0x4206 <__prologue_saves__+0x1c>
    45d2:	0d 89       	ldd	r16, Y+21	; 0x15
    45d4:	1e 89       	ldd	r17, Y+22	; 0x16
    45d6:	86 e0       	ldi	r24, 0x06	; 6
    45d8:	8c 83       	std	Y+4, r24	; 0x04
    45da:	09 83       	std	Y+1, r16	; 0x01
    45dc:	1a 83       	std	Y+2, r17	; 0x02
    45de:	8f ef       	ldi	r24, 0xFF	; 255
    45e0:	9f e7       	ldi	r25, 0x7F	; 127
    45e2:	8d 83       	std	Y+5, r24	; 0x05
    45e4:	9e 83       	std	Y+6, r25	; 0x06
    45e6:	ae 01       	movw	r20, r28
    45e8:	47 5e       	subi	r20, 0xE7	; 231
    45ea:	5f 4f       	sbci	r21, 0xFF	; 255
    45ec:	6f 89       	ldd	r22, Y+23	; 0x17
    45ee:	78 8d       	ldd	r23, Y+24	; 0x18
    45f0:	ce 01       	movw	r24, r28
    45f2:	01 96       	adiw	r24, 0x01	; 1
    45f4:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <vfprintf>
    45f8:	ef 81       	ldd	r30, Y+7	; 0x07
    45fa:	f8 85       	ldd	r31, Y+8	; 0x08
    45fc:	e0 0f       	add	r30, r16
    45fe:	f1 1f       	adc	r31, r17
    4600:	10 82       	st	Z, r1
    4602:	2e 96       	adiw	r28, 0x0e	; 14
    4604:	e4 e0       	ldi	r30, 0x04	; 4
    4606:	0c 94 1c 21 	jmp	0x4238	; 0x4238 <__epilogue_restores__+0x1c>

0000460a <__ultoa_invert>:
    460a:	fa 01       	movw	r30, r20
    460c:	aa 27       	eor	r26, r26
    460e:	28 30       	cpi	r18, 0x08	; 8
    4610:	51 f1       	breq	.+84     	; 0x4666 <__ultoa_invert+0x5c>
    4612:	20 31       	cpi	r18, 0x10	; 16
    4614:	81 f1       	breq	.+96     	; 0x4676 <__ultoa_invert+0x6c>
    4616:	e8 94       	clt
    4618:	6f 93       	push	r22
    461a:	6e 7f       	andi	r22, 0xFE	; 254
    461c:	6e 5f       	subi	r22, 0xFE	; 254
    461e:	7f 4f       	sbci	r23, 0xFF	; 255
    4620:	8f 4f       	sbci	r24, 0xFF	; 255
    4622:	9f 4f       	sbci	r25, 0xFF	; 255
    4624:	af 4f       	sbci	r26, 0xFF	; 255
    4626:	b1 e0       	ldi	r27, 0x01	; 1
    4628:	3e d0       	rcall	.+124    	; 0x46a6 <__ultoa_invert+0x9c>
    462a:	b4 e0       	ldi	r27, 0x04	; 4
    462c:	3c d0       	rcall	.+120    	; 0x46a6 <__ultoa_invert+0x9c>
    462e:	67 0f       	add	r22, r23
    4630:	78 1f       	adc	r23, r24
    4632:	89 1f       	adc	r24, r25
    4634:	9a 1f       	adc	r25, r26
    4636:	a1 1d       	adc	r26, r1
    4638:	68 0f       	add	r22, r24
    463a:	79 1f       	adc	r23, r25
    463c:	8a 1f       	adc	r24, r26
    463e:	91 1d       	adc	r25, r1
    4640:	a1 1d       	adc	r26, r1
    4642:	6a 0f       	add	r22, r26
    4644:	71 1d       	adc	r23, r1
    4646:	81 1d       	adc	r24, r1
    4648:	91 1d       	adc	r25, r1
    464a:	a1 1d       	adc	r26, r1
    464c:	20 d0       	rcall	.+64     	; 0x468e <__ultoa_invert+0x84>
    464e:	09 f4       	brne	.+2      	; 0x4652 <__ultoa_invert+0x48>
    4650:	68 94       	set
    4652:	3f 91       	pop	r19
    4654:	2a e0       	ldi	r18, 0x0A	; 10
    4656:	26 9f       	mul	r18, r22
    4658:	11 24       	eor	r1, r1
    465a:	30 19       	sub	r19, r0
    465c:	30 5d       	subi	r19, 0xD0	; 208
    465e:	31 93       	st	Z+, r19
    4660:	de f6       	brtc	.-74     	; 0x4618 <__ultoa_invert+0xe>
    4662:	cf 01       	movw	r24, r30
    4664:	08 95       	ret
    4666:	46 2f       	mov	r20, r22
    4668:	47 70       	andi	r20, 0x07	; 7
    466a:	40 5d       	subi	r20, 0xD0	; 208
    466c:	41 93       	st	Z+, r20
    466e:	b3 e0       	ldi	r27, 0x03	; 3
    4670:	0f d0       	rcall	.+30     	; 0x4690 <__ultoa_invert+0x86>
    4672:	c9 f7       	brne	.-14     	; 0x4666 <__ultoa_invert+0x5c>
    4674:	f6 cf       	rjmp	.-20     	; 0x4662 <__ultoa_invert+0x58>
    4676:	46 2f       	mov	r20, r22
    4678:	4f 70       	andi	r20, 0x0F	; 15
    467a:	40 5d       	subi	r20, 0xD0	; 208
    467c:	4a 33       	cpi	r20, 0x3A	; 58
    467e:	18 f0       	brcs	.+6      	; 0x4686 <__ultoa_invert+0x7c>
    4680:	49 5d       	subi	r20, 0xD9	; 217
    4682:	31 fd       	sbrc	r19, 1
    4684:	40 52       	subi	r20, 0x20	; 32
    4686:	41 93       	st	Z+, r20
    4688:	02 d0       	rcall	.+4      	; 0x468e <__ultoa_invert+0x84>
    468a:	a9 f7       	brne	.-22     	; 0x4676 <__ultoa_invert+0x6c>
    468c:	ea cf       	rjmp	.-44     	; 0x4662 <__ultoa_invert+0x58>
    468e:	b4 e0       	ldi	r27, 0x04	; 4
    4690:	a6 95       	lsr	r26
    4692:	97 95       	ror	r25
    4694:	87 95       	ror	r24
    4696:	77 95       	ror	r23
    4698:	67 95       	ror	r22
    469a:	ba 95       	dec	r27
    469c:	c9 f7       	brne	.-14     	; 0x4690 <__ultoa_invert+0x86>
    469e:	00 97       	sbiw	r24, 0x00	; 0
    46a0:	61 05       	cpc	r22, r1
    46a2:	71 05       	cpc	r23, r1
    46a4:	08 95       	ret
    46a6:	9b 01       	movw	r18, r22
    46a8:	ac 01       	movw	r20, r24
    46aa:	0a 2e       	mov	r0, r26
    46ac:	06 94       	lsr	r0
    46ae:	57 95       	ror	r21
    46b0:	47 95       	ror	r20
    46b2:	37 95       	ror	r19
    46b4:	27 95       	ror	r18
    46b6:	ba 95       	dec	r27
    46b8:	c9 f7       	brne	.-14     	; 0x46ac <__ultoa_invert+0xa2>
    46ba:	62 0f       	add	r22, r18
    46bc:	73 1f       	adc	r23, r19
    46be:	84 1f       	adc	r24, r20
    46c0:	95 1f       	adc	r25, r21
    46c2:	a0 1d       	adc	r26, r0
    46c4:	08 95       	ret

000046c6 <eeprom_read_block>:
    46c6:	60 50       	subi	r22, 0x00	; 0
    46c8:	7c 4e       	sbci	r23, 0xEC	; 236
    46ca:	0c 94 9e 23 	jmp	0x473c	; 0x473c <memcpy>

000046ce <eeprom_update_block>:
    46ce:	dc 01       	movw	r26, r24
    46d0:	a4 0f       	add	r26, r20
    46d2:	b5 1f       	adc	r27, r21
    46d4:	41 50       	subi	r20, 0x01	; 1
    46d6:	50 40       	sbci	r21, 0x00	; 0
    46d8:	48 f0       	brcs	.+18     	; 0x46ec <eeprom_update_block+0x1e>
    46da:	cb 01       	movw	r24, r22
    46dc:	84 0f       	add	r24, r20
    46de:	95 1f       	adc	r25, r21
    46e0:	2e 91       	ld	r18, -X
    46e2:	0e 94 78 23 	call	0x46f0	; 0x46f0 <eeprom_update_r18>
    46e6:	41 50       	subi	r20, 0x01	; 1
    46e8:	50 40       	sbci	r21, 0x00	; 0
    46ea:	d0 f7       	brcc	.-12     	; 0x46e0 <eeprom_update_block+0x12>
    46ec:	08 95       	ret

000046ee <eeprom_update_byte>:
    46ee:	26 2f       	mov	r18, r22

000046f0 <eeprom_update_r18>:
    46f0:	0e 94 9a 23 	call	0x4734	; 0x4734 <eeprom_mapen>
    46f4:	00 80       	ld	r0, Z
    46f6:	02 16       	cp	r0, r18
    46f8:	19 f0       	breq	.+6      	; 0x4700 <eeprom_update_r18+0x10>
    46fa:	0e 94 83 23 	call	0x4706	; 0x4706 <eeprom_write_r18>
    46fe:	01 97       	sbiw	r24, 0x01	; 1
    4700:	01 97       	sbiw	r24, 0x01	; 1
    4702:	08 95       	ret

00004704 <eeprom_write_byte>:
    4704:	26 2f       	mov	r18, r22

00004706 <eeprom_write_r18>:
    4706:	af 93       	push	r26
    4708:	bf 93       	push	r27
    470a:	e0 e0       	ldi	r30, 0x00	; 0
    470c:	f0 e1       	ldi	r31, 0x10	; 16
    470e:	32 81       	ldd	r19, Z+2	; 0x02
    4710:	31 fd       	sbrc	r19, 1
    4712:	fd cf       	rjmp	.-6      	; 0x470e <eeprom_write_r18+0x8>
    4714:	dc 01       	movw	r26, r24
    4716:	a0 50       	subi	r26, 0x00	; 0
    4718:	bc 4e       	sbci	r27, 0xEC	; 236
    471a:	2c 93       	st	X, r18
    471c:	2d e9       	ldi	r18, 0x9D	; 157
    471e:	24 bf       	out	0x34, r18	; 52
    4720:	23 e0       	ldi	r18, 0x03	; 3
    4722:	20 83       	st	Z, r18
    4724:	01 96       	adiw	r24, 0x01	; 1
    4726:	bf 91       	pop	r27
    4728:	af 91       	pop	r26
    472a:	08 95       	ret

0000472c <eeprom_read_byte>:
    472c:	03 d0       	rcall	.+6      	; 0x4734 <eeprom_mapen>
    472e:	80 81       	ld	r24, Z
    4730:	99 27       	eor	r25, r25
    4732:	08 95       	ret

00004734 <eeprom_mapen>:
    4734:	fc 01       	movw	r30, r24
    4736:	e0 50       	subi	r30, 0x00	; 0
    4738:	fc 4e       	sbci	r31, 0xEC	; 236
    473a:	08 95       	ret

0000473c <memcpy>:
    473c:	fb 01       	movw	r30, r22
    473e:	dc 01       	movw	r26, r24
    4740:	02 c0       	rjmp	.+4      	; 0x4746 <memcpy+0xa>
    4742:	01 90       	ld	r0, Z+
    4744:	0d 92       	st	X+, r0
    4746:	41 50       	subi	r20, 0x01	; 1
    4748:	50 40       	sbci	r21, 0x00	; 0
    474a:	d8 f7       	brcc	.-10     	; 0x4742 <memcpy+0x6>
    474c:	08 95       	ret

0000474e <_exit>:
    474e:	f8 94       	cli

00004750 <__stop_program>:
    4750:	ff cf       	rjmp	.-2      	; 0x4750 <__stop_program>
