
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00802800  00004fe8  0000509c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004b7c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  00008b7c  00004b7c  00004c30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000082d  00802804  00802804  000050a0  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000050fc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000680  00000000  00000000  00005140  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a6fe  00000000  00000000  000057c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004791  00000000  00000000  0000febe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000477e  00000000  00000000  0001464f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000106c  00000000  00000000  00018dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002378  00000000  00000000  00019e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004374  00000000  00000000  0001c1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003e0  00000000  00000000  00020528  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 01 	jmp	0x254	; 0x254 <__ctors_end>
       4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       c:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__vector_3>
      10:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      14:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      18:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      1c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      20:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      24:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      28:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      2c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      30:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <__vector_12>
      34:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      38:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      3c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      40:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      44:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <__vector_17>
      48:	0c 94 fa 1b 	jmp	0x37f4	; 0x37f4 <__vector_18>
      4c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      50:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <__vector_20>
      54:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      58:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      5c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      60:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      64:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      68:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__vector_26>
      6c:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <__vector_27>
      70:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      74:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <__vector_29>
      78:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      7c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      80:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      84:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      88:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      8c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      90:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      94:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__vector_37>
      98:	0c 94 d2 1c 	jmp	0x39a4	; 0x39a4 <__vector_38>
      9c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      a0:	a0 04       	cpc	r10, r0
      a2:	c2 04       	cpc	r12, r2
      a4:	c2 04       	cpc	r12, r2
      a6:	c2 04       	cpc	r12, r2
      a8:	c2 04       	cpc	r12, r2
      aa:	c2 04       	cpc	r12, r2
      ac:	c2 04       	cpc	r12, r2
      ae:	c2 04       	cpc	r12, r2
      b0:	c2 04       	cpc	r12, r2
      b2:	c2 04       	cpc	r12, r2
      b4:	c2 04       	cpc	r12, r2
      b6:	c2 04       	cpc	r12, r2
      b8:	c2 04       	cpc	r12, r2
      ba:	c2 04       	cpc	r12, r2
      bc:	c2 04       	cpc	r12, r2
      be:	c2 04       	cpc	r12, r2
      c0:	c2 04       	cpc	r12, r2
      c2:	8e 04       	cpc	r8, r14
      c4:	c2 04       	cpc	r12, r2
      c6:	c2 04       	cpc	r12, r2
      c8:	c2 04       	cpc	r12, r2
      ca:	c2 04       	cpc	r12, r2
      cc:	c2 04       	cpc	r12, r2
      ce:	c2 04       	cpc	r12, r2
      d0:	c2 04       	cpc	r12, r2
      d2:	c2 04       	cpc	r12, r2
      d4:	c2 04       	cpc	r12, r2
      d6:	94 04       	cpc	r9, r4
      d8:	c2 04       	cpc	r12, r2
      da:	91 04       	cpc	r9, r1
      dc:	c2 04       	cpc	r12, r2
      de:	c2 04       	cpc	r12, r2
      e0:	97 04       	cpc	r9, r7
      e2:	9a 04       	cpc	r9, r10
      e4:	9d 04       	cpc	r9, r13
      e6:	90 0f       	add	r25, r16
      e8:	90 0f       	add	r25, r16
      ea:	90 0f       	add	r25, r16
      ec:	59 14       	cp	r5, r9
      ee:	59 14       	cp	r5, r9
      f0:	59 14       	cp	r5, r9
      f2:	59 14       	cp	r5, r9
      f4:	59 14       	cp	r5, r9
      f6:	59 14       	cp	r5, r9
      f8:	59 14       	cp	r5, r9
      fa:	59 14       	cp	r5, r9
      fc:	59 14       	cp	r5, r9
      fe:	59 14       	cp	r5, r9
     100:	59 14       	cp	r5, r9
     102:	59 14       	cp	r5, r9
     104:	59 14       	cp	r5, r9
     106:	59 14       	cp	r5, r9
     108:	59 14       	cp	r5, r9
     10a:	59 14       	cp	r5, r9
     10c:	59 14       	cp	r5, r9
     10e:	59 14       	cp	r5, r9
     110:	1b 14       	cp	r1, r11
     112:	59 14       	cp	r5, r9
     114:	59 14       	cp	r5, r9
     116:	59 14       	cp	r5, r9
     118:	59 14       	cp	r5, r9
     11a:	59 14       	cp	r5, r9
     11c:	59 14       	cp	r5, r9
     11e:	59 14       	cp	r5, r9
     120:	59 14       	cp	r5, r9
     122:	59 14       	cp	r5, r9
     124:	59 14       	cp	r5, r9
     126:	20 10       	cpse	r2, r0
     128:	20 10       	cpse	r2, r0
     12a:	20 10       	cpse	r2, r0
     12c:	59 14       	cp	r5, r9
     12e:	de 10       	cpse	r13, r14
     130:	59 14       	cp	r5, r9
     132:	59 14       	cp	r5, r9
     134:	59 14       	cp	r5, r9
     136:	59 14       	cp	r5, r9
     138:	59 14       	cp	r5, r9
     13a:	59 14       	cp	r5, r9
     13c:	59 14       	cp	r5, r9
     13e:	59 14       	cp	r5, r9
     140:	59 14       	cp	r5, r9
     142:	1b 12       	cpse	r1, r27
     144:	f1 12       	cpse	r15, r17
     146:	59 14       	cp	r5, r9
     148:	59 14       	cp	r5, r9
     14a:	59 14       	cp	r5, r9
     14c:	7a 13       	cpse	r23, r26
     14e:	59 14       	cp	r5, r9
     150:	c2 13       	cpse	r28, r18

00000152 <__trampolines_end>:
     152:	6e 61       	ori	r22, 0x1E	; 30
     154:	6e 00       	.word	0x006e	; ????

00000156 <__c.2332>:
     156:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     166:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     176:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     186:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     196:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1a6:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1b6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1c6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1d6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1e6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1f6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     206:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     216:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     226:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     236:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     246:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000254 <__ctors_end>:
     254:	11 24       	eor	r1, r1
     256:	1f be       	out	0x3f, r1	; 63
     258:	cf ef       	ldi	r28, 0xFF	; 255
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	df e3       	ldi	r29, 0x3F	; 63
     25e:	de bf       	out	0x3e, r29	; 62

00000260 <__do_copy_data>:
     260:	18 e2       	ldi	r17, 0x28	; 40
     262:	a0 e0       	ldi	r26, 0x00	; 0
     264:	b8 e2       	ldi	r27, 0x28	; 40
     266:	e8 ee       	ldi	r30, 0xE8	; 232
     268:	ff e4       	ldi	r31, 0x4F	; 79
     26a:	02 c0       	rjmp	.+4      	; 0x270 <__do_copy_data+0x10>
     26c:	05 90       	lpm	r0, Z+
     26e:	0d 92       	st	X+, r0
     270:	a4 30       	cpi	r26, 0x04	; 4
     272:	b1 07       	cpc	r27, r17
     274:	d9 f7       	brne	.-10     	; 0x26c <__do_copy_data+0xc>

00000276 <__do_clear_bss>:
     276:	20 e3       	ldi	r18, 0x30	; 48
     278:	a4 e0       	ldi	r26, 0x04	; 4
     27a:	b8 e2       	ldi	r27, 0x28	; 40
     27c:	01 c0       	rjmp	.+2      	; 0x280 <.do_clear_bss_start>

0000027e <.do_clear_bss_loop>:
     27e:	1d 92       	st	X+, r1

00000280 <.do_clear_bss_start>:
     280:	a1 33       	cpi	r26, 0x31	; 49
     282:	b2 07       	cpc	r27, r18
     284:	e1 f7       	brne	.-8      	; 0x27e <.do_clear_bss_loop>
     286:	0e 94 ad 08 	call	0x115a	; 0x115a <main>
     28a:	0c 94 bc 25 	jmp	0x4b78	; 0x4b78 <_exit>

0000028e <__bad_interrupt>:
     28e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000292 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
uint8_t read_AD590(uint8_t sensor, float *temperature)
{
     292:	8f 92       	push	r8
     294:	9f 92       	push	r9
     296:	af 92       	push	r10
     298:	bf 92       	push	r11
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <read_AD590+0x16>
     2a8:	00 d0       	rcall	.+0      	; 0x2aa <read_AD590+0x18>
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	7b 01       	movw	r14, r22

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     2b0:	81 30       	cpi	r24, 0x01	; 1
     2b2:	c9 f0       	breq	.+50     	; 0x2e6 <read_AD590+0x54>
     2b4:	18 f0       	brcs	.+6      	; 0x2bc <read_AD590+0x2a>
     2b6:	82 30       	cpi	r24, 0x02	; 2
     2b8:	61 f0       	breq	.+24     	; 0x2d2 <read_AD590+0x40>
     2ba:	10 c0       	rjmp	.+32     	; 0x2dc <read_AD590+0x4a>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     2bc:	0f 2e       	mov	r0, r31
     2be:	f3 e3       	ldi	r31, 0x33	; 51
     2c0:	8f 2e       	mov	r8, r31
     2c2:	98 2c       	mov	r9, r8
     2c4:	f3 ef       	ldi	r31, 0xF3	; 243
     2c6:	af 2e       	mov	r10, r31
     2c8:	f0 e4       	ldi	r31, 0x40	; 64
     2ca:	bf 2e       	mov	r11, r31
     2cc:	f0 2d       	mov	r31, r0
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     2ce:	11 e0       	ldi	r17, 0x01	; 1
     2d0:	0e c0       	rjmp	.+28     	; 0x2ee <read_AD590+0x5c>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     2d2:	81 2c       	mov	r8, r1
     2d4:	91 2c       	mov	r9, r1
     2d6:	54 01       	movw	r10, r8
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     2d8:	10 e1       	ldi	r17, 0x10	; 16
			offset = 0.0;
			break;
     2da:	09 c0       	rjmp	.+18     	; 0x2ee <read_AD590+0x5c>
{

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
     2dc:	81 2c       	mov	r8, r1
     2de:	91 2c       	mov	r9, r1
     2e0:	54 01       	movw	r10, r8
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2e2:	10 e0       	ldi	r17, 0x00	; 0
			break;
     2e4:	04 c0       	rjmp	.+8      	; 0x2ee <read_AD590+0x5c>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2e6:	81 2c       	mov	r8, r1
     2e8:	91 2c       	mov	r9, r1
     2ea:	54 01       	movw	r10, r8
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2ec:	14 e0       	ldi	r17, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     2ee:	40 e0       	ldi	r20, 0x00	; 0
     2f0:	66 e0       	ldi	r22, 0x06	; 6
     2f2:	87 e2       	ldi	r24, 0x27	; 39
     2f4:	0e 94 12 09 	call	0x1224	; 0x1224 <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2f8:	41 2f       	mov	r20, r17
     2fa:	40 95       	com	r20
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	87 e2       	ldi	r24, 0x27	; 39
     300:	0e 94 12 09 	call	0x1224	; 0x1224 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     304:	41 2f       	mov	r20, r17
     306:	6a e0       	ldi	r22, 0x0A	; 10
     308:	87 e2       	ldi	r24, 0x27	; 39
     30a:	0e 94 12 09 	call	0x1224	; 0x1224 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30e:	86 e1       	ldi	r24, 0x16	; 22
     310:	8a 95       	dec	r24
     312:	f1 f7       	brne	.-4      	; 0x310 <read_AD590+0x7e>
     314:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	if (read_ADS1115(ADC_TE, PGA0512, AIN3, DR128, &voltage) == ERROR) {
     316:	8e 01       	movw	r16, r28
     318:	0f 5f       	subi	r16, 0xFF	; 255
     31a:	1f 4f       	sbci	r17, 0xFF	; 255
     31c:	20 e8       	ldi	r18, 0x80	; 128
     31e:	40 e7       	ldi	r20, 0x70	; 112
     320:	68 e0       	ldi	r22, 0x08	; 8
     322:	88 e4       	ldi	r24, 0x48	; 72
     324:	0e 94 ca 01 	call	0x394	; 0x394 <read_ADS1115>
     328:	83 36       	cpi	r24, 0x63	; 99
     32a:	51 f4       	brne	.+20     	; 0x340 <read_AD590+0xae>
		*temperature = BADFLOAT;
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	50 e8       	ldi	r21, 0x80	; 128
     330:	66 e2       	ldi	r22, 0x26	; 38
     332:	74 ec       	ldi	r23, 0xC4	; 196
     334:	f7 01       	movw	r30, r14
     336:	40 83       	st	Z, r20
     338:	51 83       	std	Z+1, r21	; 0x01
     33a:	62 83       	std	Z+2, r22	; 0x02
     33c:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
     33e:	1c c0       	rjmp	.+56     	; 0x378 <read_AD590+0xe6>
	}
	*temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	4a e7       	ldi	r20, 0x7A	; 122
     346:	54 e4       	ldi	r21, 0x44	; 68
     348:	69 81       	ldd	r22, Y+1	; 0x01
     34a:	7a 81       	ldd	r23, Y+2	; 0x02
     34c:	8b 81       	ldd	r24, Y+3	; 0x03
     34e:	9c 81       	ldd	r25, Y+4	; 0x04
     350:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__mulsf3>
     354:	23 e3       	ldi	r18, 0x33	; 51
     356:	33 e9       	ldi	r19, 0x93	; 147
     358:	48 e8       	ldi	r20, 0x88	; 136
     35a:	53 e4       	ldi	r21, 0x43	; 67
     35c:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__subsf3>
     360:	9b 01       	movw	r18, r22
     362:	ac 01       	movw	r20, r24
     364:	c5 01       	movw	r24, r10
     366:	b4 01       	movw	r22, r8
     368:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <__addsf3>
     36c:	f7 01       	movw	r30, r14
     36e:	60 83       	st	Z, r22
     370:	71 83       	std	Z+1, r23	; 0x01
     372:	82 83       	std	Z+2, r24	; 0x02
     374:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     376:	80 e0       	ldi	r24, 0x00	; 0

}
     378:	24 96       	adiw	r28, 0x04	; 4
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	ff 90       	pop	r15
     388:	ef 90       	pop	r14
     38a:	bf 90       	pop	r11
     38c:	af 90       	pop	r10
     38e:	9f 90       	pop	r9
     390:	8f 90       	pop	r8
     392:	08 95       	ret

00000394 <read_ADS1115>:
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
uint8_t read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins,
	uint8_t datarate, float *voltage)
{
     394:	8f 92       	push	r8
     396:	9f 92       	push	r9
     398:	af 92       	push	r10
     39a:	bf 92       	push	r11
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	f8 2e       	mov	r15, r24
     3ae:	e6 2e       	mov	r14, r22
     3b0:	68 01       	movw	r12, r16
	float scale;
	uint8_t confighi, configlo, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     3b2:	46 2b       	or	r20, r22
     3b4:	c4 2f       	mov	r28, r20
     3b6:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     3b8:	d2 2f       	mov	r29, r18
     3ba:	d3 60       	ori	r29, 0x03	; 3

	*voltage = BADFLOAT;
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e8       	ldi	r25, 0x80	; 128
     3c0:	a6 e2       	ldi	r26, 0x26	; 38
     3c2:	b4 ec       	ldi	r27, 0xC4	; 196
     3c4:	f8 01       	movw	r30, r16
     3c6:	80 83       	st	Z, r24
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	a2 83       	std	Z+2, r26	; 0x02
     3cc:	b3 83       	std	Z+3, r27	; 0x03
	if (start_TWI(addr, TWIWRITE == ERROR)) {		// TWI start condition
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	8f 2d       	mov	r24, r15
     3d2:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
     3d6:	08 2f       	mov	r16, r24
     3d8:	88 23       	and	r24, r24
     3da:	21 f0       	breq	.+8      	; 0x3e4 <read_ADS1115+0x50>
		stop_TWI();
     3dc:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(ERROR);
     3e0:	13 e6       	ldi	r17, 0x63	; 99
     3e2:	b4 c0       	rjmp	.+360    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	if ((write_TWI(ADS1115CONFIG) == ERROR)) {		// Write the CONFIG register
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
     3ea:	18 2f       	mov	r17, r24
     3ec:	83 36       	cpi	r24, 0x63	; 99
     3ee:	19 f4       	brne	.+6      	; 0x3f6 <read_ADS1115+0x62>
		stop_TWI();
     3f0:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(ERROR);
     3f4:	ab c0       	rjmp	.+342    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	if ((write_TWI(confighi) == ERROR)) {			// Write high byte
     3f6:	8c 2f       	mov	r24, r28
     3f8:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
     3fc:	18 2f       	mov	r17, r24
     3fe:	83 36       	cpi	r24, 0x63	; 99
     400:	19 f4       	brne	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		stop_TWI();
     402:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(ERROR);
     406:	a2 c0       	rjmp	.+324    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	if ((write_TWI(configlo) == ERROR)) {			// Write low byte
     408:	8d 2f       	mov	r24, r29
     40a:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
     40e:	18 2f       	mov	r17, r24
     410:	83 36       	cpi	r24, 0x63	; 99
     412:	19 f4       	brne	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		stop_TWI();
     414:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(ERROR);
     418:	99 c0       	rjmp	.+306    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	stop_TWI();
     41a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
     41e:	fc e1       	ldi	r31, 0x1C	; 28
     420:	fa 95       	dec	r31
     422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>

	_delay_us(25);									// Power-up time

	converting = YES;
     424:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     426:	09 c0       	rjmp	.+18     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		start_TWI(addr, TWIREAD);
     428:	61 e0       	ldi	r22, 0x01	; 1
     42a:	8f 2d       	mov	r24, r15
     42c:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
		flag = readlast_TWI();
     430:	0e 94 3d 1a 	call	0x347a	; 0x347a <readlast_TWI>
		if (flag & 0b10000000) {
     434:	88 23       	and	r24, r24
     436:	0c f4       	brge	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			converting = NO;
     438:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     43a:	c1 11       	cpse	r28, r1
     43c:	f5 cf       	rjmp	.-22     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		flag = readlast_TWI();
		if (flag & 0b10000000) {
			converting = NO;
		}
	}
	stop_TWI();
     43e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>

	start_TWI(addr, TWIWRITE);
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	8f 2d       	mov	r24, r15
     446:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	8f 2d       	mov	r24, r15
     454:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
	highbyte = read_TWI();
     458:	0e 94 2d 1a 	call	0x345a	; 0x345a <read_TWI>
     45c:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     45e:	0e 94 3d 1a 	call	0x347a	; 0x347a <readlast_TWI>
     462:	d8 2f       	mov	r29, r24
	stop_TWI();
     464:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>

	value = highbyte;
     468:	6c 2f       	mov	r22, r28
     46a:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     46c:	76 2f       	mov	r23, r22
     46e:	66 27       	eor	r22, r22
	value |= lowbyte;
     470:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	e8 16       	cp	r14, r24
     476:	49 f1       	breq	.+82     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     478:	8e 15       	cp	r24, r14
     47a:	30 f0       	brcs	.+12     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     47c:	ee 20       	and	r14, r14
     47e:	d9 f1       	breq	.+118    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     480:	e2 e0       	ldi	r30, 0x02	; 2
     482:	ee 16       	cp	r14, r30
     484:	69 f1       	breq	.+90     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     486:	42 c0       	rjmp	.+132    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     488:	f8 e0       	ldi	r31, 0x08	; 8
     48a:	ef 16       	cp	r14, r31
     48c:	09 f4       	brne	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48e:	42 c0       	rjmp	.+132    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     490:	8a e0       	ldi	r24, 0x0A	; 10
     492:	e8 16       	cp	r14, r24
     494:	21 f0       	breq	.+8      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     496:	e6 e0       	ldi	r30, 0x06	; 6
     498:	ee 12       	cpse	r14, r30
     49a:	38 c0       	rjmp	.+112    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		case PGA0256:
			scale = SCA0256;
     49e:	0f 2e       	mov	r0, r31
     4a0:	f4 e7       	ldi	r31, 0x74	; 116
     4a2:	8f 2e       	mov	r8, r31
     4a4:	f3 e1       	ldi	r31, 0x13	; 19
     4a6:	9f 2e       	mov	r9, r31
     4a8:	f3 e0       	ldi	r31, 0x03	; 3
     4aa:	af 2e       	mov	r10, r31
     4ac:	f7 e3       	ldi	r31, 0x37	; 55
     4ae:	bf 2e       	mov	r11, r31
     4b0:	f0 2d       	mov	r31, r0
     4b2:	3a c0       	rjmp	.+116    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     4b4:	0f 2e       	mov	r0, r31
     4b6:	f4 e7       	ldi	r31, 0x74	; 116
     4b8:	8f 2e       	mov	r8, r31
     4ba:	f3 e1       	ldi	r31, 0x13	; 19
     4bc:	9f 2e       	mov	r9, r31
     4be:	f3 e0       	ldi	r31, 0x03	; 3
     4c0:	af 2e       	mov	r10, r31
     4c2:	f8 e3       	ldi	r31, 0x38	; 56
     4c4:	bf 2e       	mov	r11, r31
     4c6:	f0 2d       	mov	r31, r0
			break;
     4c8:	2f c0       	rjmp	.+94     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		case PGA2048:
			scale = SCA2048;
     4ca:	0f 2e       	mov	r0, r31
     4cc:	f2 e1       	ldi	r31, 0x12	; 18
     4ce:	8f 2e       	mov	r8, r31
     4d0:	f3 e1       	ldi	r31, 0x13	; 19
     4d2:	9f 2e       	mov	r9, r31
     4d4:	f3 e8       	ldi	r31, 0x83	; 131
     4d6:	af 2e       	mov	r10, r31
     4d8:	f8 e3       	ldi	r31, 0x38	; 56
     4da:	bf 2e       	mov	r11, r31
     4dc:	f0 2d       	mov	r31, r0
			break;
     4de:	24 c0       	rjmp	.+72     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		case PGA4096:
			scale = SCA4096;
     4e0:	0f 2e       	mov	r0, r31
     4e2:	f4 e7       	ldi	r31, 0x74	; 116
     4e4:	8f 2e       	mov	r8, r31
     4e6:	f3 e1       	ldi	r31, 0x13	; 19
     4e8:	9f 2e       	mov	r9, r31
     4ea:	f3 e0       	ldi	r31, 0x03	; 3
     4ec:	af 2e       	mov	r10, r31
     4ee:	f9 e3       	ldi	r31, 0x39	; 57
     4f0:	bf 2e       	mov	r11, r31
     4f2:	f0 2d       	mov	r31, r0
			break;
     4f4:	19 c0       	rjmp	.+50     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		case PGA6144:
			scale = SCA6144;
     4f6:	0f 2e       	mov	r0, r31
     4f8:	fe e2       	ldi	r31, 0x2E	; 46
     4fa:	8f 2e       	mov	r8, r31
     4fc:	fd e9       	ldi	r31, 0x9D	; 157
     4fe:	9f 2e       	mov	r9, r31
     500:	f4 e4       	ldi	r31, 0x44	; 68
     502:	af 2e       	mov	r10, r31
     504:	f9 e3       	ldi	r31, 0x39	; 57
     506:	bf 2e       	mov	r11, r31
     508:	f0 2d       	mov	r31, r0
			break;
     50a:	0e c0       	rjmp	.+28     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		default:
			scale = 0.0;
     50c:	81 2c       	mov	r8, r1
     50e:	91 2c       	mov	r9, r1
     510:	54 01       	movw	r10, r8
			break;
     512:	0a c0       	rjmp	.+20     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     514:	0f 2e       	mov	r0, r31
     516:	f1 e7       	ldi	r31, 0x71	; 113
     518:	8f 2e       	mov	r8, r31
     51a:	f3 e1       	ldi	r31, 0x13	; 19
     51c:	9f 2e       	mov	r9, r31
     51e:	f3 e8       	ldi	r31, 0x83	; 131
     520:	af 2e       	mov	r10, r31
     522:	f7 e3       	ldi	r31, 0x37	; 55
     524:	bf 2e       	mov	r11, r31
     526:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	*voltage = scale * (float) value;
     528:	07 2e       	mov	r0, r23
     52a:	00 0c       	add	r0, r0
     52c:	88 0b       	sbc	r24, r24
     52e:	99 0b       	sbc	r25, r25
     530:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <__floatsisf>
     534:	9b 01       	movw	r18, r22
     536:	ac 01       	movw	r20, r24
     538:	c5 01       	movw	r24, r10
     53a:	b4 01       	movw	r22, r8
     53c:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__mulsf3>
     540:	f6 01       	movw	r30, r12
     542:	60 83       	st	Z, r22
     544:	71 83       	std	Z+1, r23	; 0x01
     546:	82 83       	std	Z+2, r24	; 0x02
     548:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     54a:	10 2f       	mov	r17, r16

}
     54c:	81 2f       	mov	r24, r17
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	df 90       	pop	r13
     55c:	cf 90       	pop	r12
     55e:	bf 90       	pop	r11
     560:	af 90       	pop	r10
     562:	9f 90       	pop	r9
     564:	8f 90       	pop	r8
     566:	08 95       	ret

00000568 <init_BEEPER>:
#include "beeper.h"

void init_BEEPER(void)
{

	PORTB.OUTSET = PIN2_bm;
     568:	e0 e2       	ldi	r30, 0x20	; 32
     56a:	f4 e0       	ldi	r31, 0x04	; 4
     56c:	84 e0       	ldi	r24, 0x04	; 4
     56e:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     570:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = PIN2_bm;
     572:	86 83       	std	Z+6, r24	; 0x06
     574:	08 95       	ret

00000576 <get_cmdline>:
	if ((d >= '0') && (d <= '9')) {
		return(ERROR);
	}
	return(NOERROR);

}
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	9c 01       	movw	r18, r24
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	1c c0       	rjmp	.+56     	; 0x5b8 <get_cmdline+0x42>
     580:	cc e1       	ldi	r28, 0x1C	; 28
     582:	dc e2       	ldi	r29, 0x2C	; 44
     584:	e8 81       	ld	r30, Y
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	e3 5e       	subi	r30, 0xE3	; 227
     58a:	f4 4d       	sbci	r31, 0xD4	; 212
     58c:	80 81       	ld	r24, Z
     58e:	f9 01       	movw	r30, r18
     590:	e4 0f       	add	r30, r20
     592:	f1 1d       	adc	r31, r1
     594:	80 83       	st	Z, r24
     596:	ae e1       	ldi	r26, 0x1E	; 30
     598:	bc e2       	ldi	r27, 0x2C	; 44
     59a:	8c 91       	ld	r24, X
     59c:	81 50       	subi	r24, 0x01	; 1
     59e:	8c 93       	st	X, r24
     5a0:	88 81       	ld	r24, Y
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	01 96       	adiw	r24, 0x01	; 1
     5a6:	6e ef       	ldi	r22, 0xFE	; 254
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	0e 94 c6 22 	call	0x458c	; 0x458c <__divmodhi4>
     5ae:	88 83       	st	Y, r24
     5b0:	80 81       	ld	r24, Z
     5b2:	88 23       	and	r24, r24
     5b4:	29 f0       	breq	.+10     	; 0x5c0 <get_cmdline+0x4a>
     5b6:	4f 5f       	subi	r20, 0xFF	; 255
     5b8:	80 91 1e 2c 	lds	r24, 0x2C1E	; 0x802c1e <recv0_buf+0x101>
     5bc:	81 11       	cpse	r24, r1
     5be:	e0 cf       	rjmp	.-64     	; 0x580 <get_cmdline+0xa>
     5c0:	f9 01       	movw	r30, r18
     5c2:	e4 0f       	add	r30, r20
     5c4:	f1 1d       	adc	r31, r1
     5c6:	10 82       	st	Z, r1
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     5ce:	9f e9       	ldi	r25, 0x9F	; 159
     5d0:	98 0f       	add	r25, r24
     5d2:	9a 31       	cpi	r25, 0x1A	; 26
     5d4:	28 f0       	brcs	.+10     	; 0x5e0 <isaletter+0x12>
     5d6:	81 54       	subi	r24, 0x41	; 65
     5d8:	8a 31       	cpi	r24, 0x1A	; 26
     5da:	20 f4       	brcc	.+8      	; 0x5e4 <isaletter+0x16>
		return(ERROR);
     5dc:	83 e6       	ldi	r24, 0x63	; 99
     5de:	08 95       	ret
     5e0:	83 e6       	ldi	r24, 0x63	; 99
     5e2:	08 95       	ret
	}
	return(NOERROR);
     5e4:	80 e0       	ldi	r24, 0x00	; 0

}
     5e6:	08 95       	ret

000005e8 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     5f4:	e6 2e       	mov	r14, r22
     5f6:	f1 2c       	mov	r15, r1
     5f8:	84 e3       	ldi	r24, 0x34	; 52
     5fa:	8e 9d       	mul	r24, r14
     5fc:	f0 01       	movw	r30, r0
     5fe:	8f 9d       	mul	r24, r15
     600:	f0 0d       	add	r31, r0
     602:	11 24       	eor	r1, r1
     604:	e8 5f       	subi	r30, 0xF8	; 248
     606:	f7 4d       	sbci	r31, 0xD7	; 215
     608:	8f e3       	ldi	r24, 0x3F	; 63
     60a:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     60c:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     60e:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     610:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     612:	04 c0       	rjmp	.+8      	; 0x61c <parse_cmd+0x34>
		if (*ptr == '\0') {
     614:	11 23       	and	r17, r17
     616:	09 f4       	brne	.+2      	; 0x61a <parse_cmd+0x32>
     618:	75 c0       	rjmp	.+234    	; 0x704 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     61a:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     61c:	18 81       	ld	r17, Y
     61e:	81 2f       	mov	r24, r17
     620:	0e 94 e7 02 	call	0x5ce	; 0x5ce <isaletter>
     624:	88 23       	and	r24, r24
     626:	b1 f3       	breq	.-20     	; 0x614 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     628:	21 96       	adiw	r28, 0x01	; 1
     62a:	84 e3       	ldi	r24, 0x34	; 52
     62c:	8e 9d       	mul	r24, r14
     62e:	f0 01       	movw	r30, r0
     630:	8f 9d       	mul	r24, r15
     632:	f0 0d       	add	r31, r0
     634:	11 24       	eor	r1, r1
     636:	e8 5f       	subi	r30, 0xF8	; 248
     638:	f7 4d       	sbci	r31, 0xD7	; 215
     63a:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     63c:	04 c0       	rjmp	.+8      	; 0x646 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     63e:	11 23       	and	r17, r17
     640:	09 f4       	brne	.+2      	; 0x644 <parse_cmd+0x5c>
     642:	60 c0       	rjmp	.+192    	; 0x704 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     644:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     646:	18 81       	ld	r17, Y
     648:	81 2f       	mov	r24, r17
     64a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <isaletter>
     64e:	88 23       	and	r24, r24
     650:	b1 f3       	breq	.-20     	; 0x63e <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     652:	21 96       	adiw	r28, 0x01	; 1
     654:	84 e3       	ldi	r24, 0x34	; 52
     656:	8e 9d       	mul	r24, r14
     658:	f0 01       	movw	r30, r0
     65a:	8f 9d       	mul	r24, r15
     65c:	f0 0d       	add	r31, r0
     65e:	11 24       	eor	r1, r1
     660:	e8 5f       	subi	r30, 0xF8	; 248
     662:	f7 4d       	sbci	r31, 0xD7	; 215
     664:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	2a c0       	rjmp	.+84     	; 0x6be <parse_cmd+0xd6>
		if (*ptr == '\0') {
     66a:	98 81       	ld	r25, Y
     66c:	91 11       	cpse	r25, r1
     66e:	0c c0       	rjmp	.+24     	; 0x688 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     670:	94 e3       	ldi	r25, 0x34	; 52
     672:	9e 9d       	mul	r25, r14
     674:	f0 01       	movw	r30, r0
     676:	9f 9d       	mul	r25, r15
     678:	f0 0d       	add	r31, r0
     67a:	11 24       	eor	r1, r1
     67c:	e8 5f       	subi	r30, 0xF8	; 248
     67e:	f7 4d       	sbci	r31, 0xD7	; 215
     680:	e8 0f       	add	r30, r24
     682:	f1 1d       	adc	r31, r1
     684:	12 82       	std	Z+2, r1	; 0x02
			return;
     686:	3e c0       	rjmp	.+124    	; 0x704 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {			// Command ID separator
     688:	9b 33       	cpi	r25, 0x3B	; 59
     68a:	61 f4       	brne	.+24     	; 0x6a4 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     68c:	94 e3       	ldi	r25, 0x34	; 52
     68e:	9e 9d       	mul	r25, r14
     690:	f0 01       	movw	r30, r0
     692:	9f 9d       	mul	r25, r15
     694:	f0 0d       	add	r31, r0
     696:	11 24       	eor	r1, r1
     698:	e8 5f       	subi	r30, 0xF8	; 248
     69a:	f7 4d       	sbci	r31, 0xD7	; 215
     69c:	e8 0f       	add	r30, r24
     69e:	f1 1d       	adc	r31, r1
     6a0:	12 82       	std	Z+2, r1	; 0x02
			break;
     6a2:	0f c0       	rjmp	.+30     	; 0x6c2 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     6a4:	21 96       	adiw	r28, 0x01	; 1
     6a6:	24 e3       	ldi	r18, 0x34	; 52
     6a8:	2e 9d       	mul	r18, r14
     6aa:	f0 01       	movw	r30, r0
     6ac:	2f 9d       	mul	r18, r15
     6ae:	f0 0d       	add	r31, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	e8 5f       	subi	r30, 0xF8	; 248
     6b4:	f7 4d       	sbci	r31, 0xD7	; 215
     6b6:	e8 0f       	add	r30, r24
     6b8:	f1 1d       	adc	r31, r1
     6ba:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	89 32       	cpi	r24, 0x29	; 41
     6c0:	a0 f2       	brcs	.-88     	; 0x66a <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
     6c2:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	1c c0       	rjmp	.+56     	; 0x700 <parse_cmd+0x118>
		if (*ptr == '\0') {
     6c8:	98 81       	ld	r25, Y
     6ca:	91 11       	cpse	r25, r1
     6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     6ce:	94 e3       	ldi	r25, 0x34	; 52
     6d0:	9e 9d       	mul	r25, r14
     6d2:	f0 01       	movw	r30, r0
     6d4:	9f 9d       	mul	r25, r15
     6d6:	f0 0d       	add	r31, r0
     6d8:	11 24       	eor	r1, r1
     6da:	e8 5f       	subi	r30, 0xF8	; 248
     6dc:	f7 4d       	sbci	r31, 0xD7	; 215
     6de:	e8 0f       	add	r30, r24
     6e0:	f1 1d       	adc	r31, r1
     6e2:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     6e4:	0f c0       	rjmp	.+30     	; 0x704 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     6e6:	21 96       	adiw	r28, 0x01	; 1
     6e8:	24 e3       	ldi	r18, 0x34	; 52
     6ea:	2e 9d       	mul	r18, r14
     6ec:	f0 01       	movw	r30, r0
     6ee:	2f 9d       	mul	r18, r15
     6f0:	f0 0d       	add	r31, r0
     6f2:	11 24       	eor	r1, r1
     6f4:	e8 5f       	subi	r30, 0xF8	; 248
     6f6:	f7 4d       	sbci	r31, 0xD7	; 215
     6f8:	e8 0f       	add	r30, r24
     6fa:	f1 1d       	adc	r31, r1
     6fc:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     6fe:	8f 5f       	subi	r24, 0xFF	; 255
     700:	89 30       	cpi	r24, 0x09	; 9
     702:	10 f3       	brcs	.-60     	; 0x6c8 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
     70e:	08 95       	ret

00000710 <printLine>:
		been run and the system has received a reboot acknowledge (the !). This
		is done to prevent unsolicited text being sent (error messages) at
		initialization or after a reboot.
------------------------------------------------------------------------------*/
void printLine(char *str)
{
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	c5 50       	subi	r28, 0x05	; 5
     71e:	d1 40       	sbci	r29, 0x01	; 1
     720:	cd bf       	out	0x3d, r28	; 61
     722:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char prFormat[] = "$S%d%s";
     724:	27 e0       	ldi	r18, 0x07	; 7
     726:	ec e7       	ldi	r30, 0x7C	; 124
     728:	fb e8       	ldi	r31, 0x8B	; 139
     72a:	de 01       	movw	r26, r28
     72c:	a1 50       	subi	r26, 0x01	; 1
     72e:	bf 4f       	sbci	r27, 0xFF	; 255
     730:	01 90       	ld	r0, Z+
     732:	0d 92       	st	X+, r0
     734:	2a 95       	dec	r18
     736:	e1 f7       	brne	.-8      	; 0x730 <printLine+0x20>

	if (firstpass) {
     738:	20 91 05 28 	lds	r18, 0x2805	; 0x802805 <firstpass>
     73c:	21 11       	cpse	r18, r1
     73e:	2a c0       	rjmp	.+84     	; 0x794 <printLine+0x84>
		return;
	}

	sprintf(strbuf, prFormat, get_SPECID, str);
     740:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     744:	22 ff       	sbrs	r18, 2
     746:	03 c0       	rjmp	.+6      	; 0x74e <printLine+0x3e>
     748:	22 e0       	ldi	r18, 0x02	; 2
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	02 c0       	rjmp	.+4      	; 0x752 <printLine+0x42>
     74e:	21 e0       	ldi	r18, 0x01	; 1
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	9f 93       	push	r25
     754:	8f 93       	push	r24
     756:	3f 93       	push	r19
     758:	2f 93       	push	r18
     75a:	ce 01       	movw	r24, r28
     75c:	81 50       	subi	r24, 0x01	; 1
     75e:	9f 4f       	sbci	r25, 0xFF	; 255
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	8e 01       	movw	r16, r28
     766:	0f 5f       	subi	r16, 0xFF	; 255
     768:	1f 4f       	sbci	r17, 0xFF	; 255
     76a:	1f 93       	push	r17
     76c:	0f 93       	push	r16
     76e:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
	checksum_NMEA(strbuf);
     772:	c8 01       	movw	r24, r16
     774:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     778:	f8 01       	movw	r30, r16
     77a:	01 90       	ld	r0, Z+
     77c:	00 20       	and	r0, r0
     77e:	e9 f7       	brne	.-6      	; 0x77a <printLine+0x6a>
     780:	31 97       	sbiw	r30, 0x01	; 1
     782:	af 01       	movw	r20, r30
     784:	40 1b       	sub	r20, r16
     786:	51 0b       	sbc	r21, r17
     788:	b8 01       	movw	r22, r16
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	0e 94 0e 1b 	call	0x361c	; 0x361c <send_USART>
     790:	cd bf       	out	0x3d, r28	; 61
     792:	de bf       	out	0x3e, r29	; 62

}
     794:	cb 5f       	subi	r28, 0xFB	; 251
     796:	de 4f       	sbci	r29, 0xFE	; 254
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	08 95       	ret

000007a6 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     7a6:	cf 92       	push	r12
     7a8:	df 92       	push	r13
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	cc 51       	subi	r28, 0x1C	; 28
     7bc:	d1 40       	sbci	r29, 0x01	; 1
     7be:	cd bf       	out	0x3d, r28	; 61
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	d8 2e       	mov	r13, r24
     7c4:	c9 2e       	mov	r12, r25

	const char format_CMD[] = "CMD,%s,%s";
     7c6:	8a e0       	ldi	r24, 0x0A	; 10
     7c8:	e3 e8       	ldi	r30, 0x83	; 131
     7ca:	fb e8       	ldi	r31, 0x8B	; 139
     7cc:	9e 01       	movw	r18, r28
     7ce:	2f 5f       	subi	r18, 0xFF	; 255
     7d0:	3f 4f       	sbci	r19, 0xFF	; 255
     7d2:	79 01       	movw	r14, r18
     7d4:	d9 01       	movw	r26, r18
     7d6:	01 90       	ld	r0, Z+
     7d8:	0d 92       	st	X+, r0
     7da:	8a 95       	dec	r24
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <echo_cmd+0x30>
	char currenttime[20], strbuf[BUFSIZE];

	get_time(currenttime);
     7de:	8e 01       	movw	r16, r28
     7e0:	05 5f       	subi	r16, 0xF5	; 245
     7e2:	1f 4f       	sbci	r17, 0xFF	; 255
     7e4:	c8 01       	movw	r24, r16
     7e6:	0e 94 af 05 	call	0xb5e	; 0xb5e <get_time>
	sprintf(strbuf, format_CMD, currenttime, cmdline);
     7ea:	cf 92       	push	r12
     7ec:	df 92       	push	r13
     7ee:	1f 93       	push	r17
     7f0:	0f 93       	push	r16
     7f2:	ff 92       	push	r15
     7f4:	ef 92       	push	r14
     7f6:	0c 5e       	subi	r16, 0xEC	; 236
     7f8:	1f 4f       	sbci	r17, 0xFF	; 255
     7fa:	1f 93       	push	r17
     7fc:	0f 93       	push	r16
     7fe:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
	printLine(strbuf);
     802:	c8 01       	movw	r24, r16
     804:	0e 94 88 03 	call	0x710	; 0x710 <printLine>

}
     808:	cd bf       	out	0x3d, r28	; 61
     80a:	de bf       	out	0x3e, r29	; 62
     80c:	c4 5e       	subi	r28, 0xE4	; 228
     80e:	de 4f       	sbci	r29, 0xFE	; 254
     810:	cd bf       	out	0x3d, r28	; 61
     812:	de bf       	out	0x3e, r29	; 62
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	df 90       	pop	r13
     822:	cf 90       	pop	r12
     824:	08 95       	ret

00000826 <send_prompt>:

	If specMech is rebooted, it will only prompt with a single exclamation
	point (!) until it receives an acknowledgment in the form of a single !.
------------------------------------------------------------------------------*/
void send_prompt(char prompt)
{
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	00 d0       	rcall	.+0      	; 0x82c <send_prompt+0x6>
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62

	char prompt_str[2];

	prompt_str[0] = prompt;
     830:	89 83       	std	Y+1, r24	; 0x01
	prompt_str[1] = '\0';
     832:	1a 82       	std	Y+2, r1	; 0x02
	send_USART(0, (uint8_t*) prompt_str, 1);
     834:	41 e0       	ldi	r20, 0x01	; 1
     836:	be 01       	movw	r22, r28
     838:	6f 5f       	subi	r22, 0xFF	; 255
     83a:	7f 4f       	sbci	r23, 0xFF	; 255
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	0e 94 0e 1b 	call	0x361c	; 0x361c <send_USART>

}
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <rebootACKd>:
	Returns:
		YES if the reboot acknowledge string was received
		NO if it wasn't
------------------------------------------------------------------------------*/
uint8_t rebootACKd(char *cmdline)
{
     84c:	cf 93       	push	r28


	if (!rebootackd) {
     84e:	c0 91 07 28 	lds	r28, 0x2807	; 0x802807 <rebootackd>
     852:	c1 11       	cpse	r28, r1
     854:	22 c0       	rjmp	.+68     	; 0x89a <rebootACKd+0x4e>
     856:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     858:	80 81       	ld	r24, Z
     85a:	81 32       	cpi	r24, 0x21	; 33
     85c:	91 f4       	brne	.+36     	; 0x882 <rebootACKd+0x36>
     85e:	91 81       	ldd	r25, Z+1	; 0x01
     860:	91 11       	cpse	r25, r1
     862:	0f c0       	rjmp	.+30     	; 0x882 <rebootACKd+0x36>
			init_RTC(511);		// 1-sec RTC clock ticks
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     86c:	85 e0       	ldi	r24, 0x05	; 5
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	80 93 12 2a 	sts	0x2A12, r24	; 0x802a12 <timeoutOLED>
     874:	90 93 13 2a 	sts	0x2A13, r25	; 0x802a13 <timeoutOLED+0x1>
			rebootackd = YES;
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <rebootackd>
			return(YES);
     87e:	c1 e0       	ldi	r28, 0x01	; 1
     880:	0d c0       	rjmp	.+26     	; 0x89c <rebootACKd+0x50>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     882:	81 32       	cpi	r24, 0x21	; 33
     884:	31 f4       	brne	.+12     	; 0x892 <rebootACKd+0x46>
     886:	81 81       	ldd	r24, Z+1	; 0x01
     888:	88 23       	and	r24, r24
     88a:	19 f0       	breq	.+6      	; 0x892 <rebootACKd+0x46>
			reboot();
     88c:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <reboot>
			return(NO);
     890:	05 c0       	rjmp	.+10     	; 0x89c <rebootACKd+0x50>
		} else {
			send_prompt('!');
     892:	81 e2       	ldi	r24, 0x21	; 33
     894:	0e 94 13 04 	call	0x826	; 0x826 <send_prompt>
			return(NO);
     898:	01 c0       	rjmp	.+2      	; 0x89c <rebootACKd+0x50>
		}
	}

	return(YES);
     89a:	c1 e0       	ldi	r28, 0x01	; 1

}
     89c:	8c 2f       	mov	r24, r28
     89e:	cf 91       	pop	r28
     8a0:	08 95       	ret

000008a2 <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	cf 5f       	subi	r28, 0xFF	; 255
     8ac:	d1 09       	sbc	r29, r1
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	de bf       	out	0x3e, r29	; 62

	char cmdline[BUFSIZE+1];			// BUFSIZE is the size of the ring buffer
	static uint8_t cstack = 0;		// pcmd index

	get_cmdline(cmdline);
     8b2:	ce 01       	movw	r24, r28
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	0e 94 bb 02 	call	0x576	; 0x576 <get_cmdline>

	if (!rebootACKd(cmdline)) {		// Reboot acknowledge failed
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	0e 94 26 04 	call	0x84c	; 0x84c <rebootACKd>
     8c2:	88 23       	and	r24, r24
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <commands+0x26>
     8c6:	71 c0       	rjmp	.+226    	; 0x9aa <commands+0x108>
		return;
	}

	if ((cmdline[0] == '\0') || (cmdline[0] == '!')) {		// <CR> or ! alone are not errors
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	88 23       	and	r24, r24
     8cc:	11 f0       	breq	.+4      	; 0x8d2 <commands+0x30>
     8ce:	81 32       	cpi	r24, 0x21	; 33
     8d0:	31 f4       	brne	.+12     	; 0x8de <commands+0x3c>
		firstpass = NO;
     8d2:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <firstpass>
		send_prompt('>');
     8d6:	8e e3       	ldi	r24, 0x3E	; 62
     8d8:	0e 94 13 04 	call	0x826	; 0x826 <send_prompt>
		return;
     8dc:	66 c0       	rjmp	.+204    	; 0x9aa <commands+0x108>
	}

	echo_cmd(cmdline);
     8de:	ce 01       	movw	r24, r28
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <echo_cmd>

	parse_cmd(cmdline, cstack);
     8e6:	60 91 04 28 	lds	r22, 0x2804	; 0x802804 <__data_end>
     8ea:	ce 01       	movw	r24, r28
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <parse_cmd>

	switch (pcmd[cstack].cverb) {
     8f2:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
     8f6:	24 e3       	ldi	r18, 0x34	; 52
     8f8:	82 9f       	mul	r24, r18
     8fa:	f0 01       	movw	r30, r0
     8fc:	11 24       	eor	r1, r1
     8fe:	e8 5f       	subi	r30, 0xF8	; 248
     900:	f7 4d       	sbci	r31, 0xD7	; 215
     902:	e0 81       	ld	r30, Z
     904:	4e 2f       	mov	r20, r30
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	fa 01       	movw	r30, r20
     90a:	e2 55       	subi	r30, 0x52	; 82
     90c:	f1 09       	sbc	r31, r1
     90e:	e3 32       	cpi	r30, 0x23	; 35
     910:	f1 05       	cpc	r31, r1
     912:	c0 f5       	brcc	.+112    	; 0x984 <commands+0xe2>
     914:	e0 5b       	subi	r30, 0xB0	; 176
     916:	ff 4f       	sbci	r31, 0xFF	; 255
     918:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__tablejump2__>
		case 'c':				// close
			close_PNEU(cstack);
     91c:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <close_PNEU>
			break;
     920:	37 c0       	rjmp	.+110    	; 0x990 <commands+0xee>

		case 'o':				// open
			open_PNEU(cstack);
     922:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <open_PNEU>
			break;
     926:	34 c0       	rjmp	.+104    	; 0x990 <commands+0xee>

		case 'm':				// move
			move_MOTOR(cstack);
     928:	0e 94 41 17 	call	0x2e82	; 0x2e82 <move_MOTOR>
			break;
     92c:	31 c0       	rjmp	.+98     	; 0x990 <commands+0xee>

		case 'r':				// report
			report(cstack);
     92e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <report>
			break;
     932:	2e c0       	rjmp	.+92     	; 0x990 <commands+0xee>

		case 's':				// set
			set(cstack);
     934:	0e 94 20 19 	call	0x3240	; 0x3240 <set>
			break;
     938:	2b c0       	rjmp	.+86     	; 0x990 <commands+0xee>

		case 't':
			testroutine();
     93a:	0e 94 8d 19 	call	0x331a	; 0x331a <testroutine>
			break;
     93e:	28 c0       	rjmp	.+80     	; 0x990 <commands+0xee>

		case 'R':				// Reboot
			squelchErrors = YES;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <squelchErrors>
			if (motorsMoving()) {
     946:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <motorsMoving>
     94a:	88 23       	and	r24, r24
     94c:	49 f0       	breq	.+18     	; 0x960 <commands+0xbe>
				squelchErrors = NO;
     94e:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <squelchErrors>
				printError(ERR_MOTORMOVING, "Can't reboot, motor moving");
     952:	6d e8       	ldi	r22, 0x8D	; 141
     954:	7b e8       	ldi	r23, 0x8B	; 139
     956:	84 e3       	ldi	r24, 0x34	; 52
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
				break;
     95e:	18 c0       	rjmp	.+48     	; 0x990 <commands+0xee>
			} else {
				saveFRAM_MOTOREncoders();
     960:	0e 94 34 18 	call	0x3068	; 0x3068 <saveFRAM_MOTOREncoders>
				timerSAVEENCODER = 0;
     964:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerSAVEENCODER>
				send_prompt('>');	// Aidan request
     968:	8e e3       	ldi	r24, 0x3E	; 62
     96a:	0e 94 13 04 	call	0x826	; 0x826 <send_prompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     96e:	8a e6       	ldi	r24, 0x6A	; 106
     970:	94 e0       	ldi	r25, 0x04	; 4
     972:	21 e0       	ldi	r18, 0x01	; 1
     974:	81 50       	subi	r24, 0x01	; 1
     976:	90 40       	sbci	r25, 0x00	; 0
     978:	20 40       	sbci	r18, 0x00	; 0
     97a:	e1 f7       	brne	.-8      	; 0x974 <commands+0xd2>
     97c:	00 c0       	rjmp	.+0      	; 0x97e <commands+0xdc>
				_delay_ms(100);		// Avoids finishing the command loop before reboot
				reboot();
     97e:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <reboot>
				return;
     982:	13 c0       	rjmp	.+38     	; 0x9aa <commands+0x108>
			}

		default:
			printError(ERR_BADCOMMAND, "Not a command");
     984:	68 ea       	ldi	r22, 0xA8	; 168
     986:	7b e8       	ldi	r23, 0x8B	; 139
     988:	89 ec       	ldi	r24, 0xC9	; 201
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     990:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	6a e0       	ldi	r22, 0x0A	; 10
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	0e 94 c6 22 	call	0x458c	; 0x458c <__divmodhi4>
     9a0:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <__data_end>
	send_prompt('>');
     9a4:	8e e3       	ldi	r24, 0x3E	; 62
     9a6:	0e 94 13 04 	call	0x826	; 0x826 <send_prompt>

}
     9aa:	c1 50       	subi	r28, 0x01	; 1
     9ac:	df 4f       	sbci	r29, 0xFF	; 255
     9ae:	cd bf       	out	0x3d, r28	; 61
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	08 95       	ret

000009b8 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	cd b7       	in	r28, 0x3d	; 61
     9c2:	de b7       	in	r29, 0x3e	; 62
     9c4:	a0 97       	sbiw	r28, 0x20	; 32
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	de bf       	out	0x3e, r29	; 62

	const char format_ISO[] = "20%02x-%02x-%02xT%02x:%02x:%02x";
     9ca:	40 e2       	ldi	r20, 0x20	; 32
     9cc:	e6 eb       	ldi	r30, 0xB6	; 182
     9ce:	fb e8       	ldi	r31, 0x8B	; 139
     9d0:	9e 01       	movw	r18, r28
     9d2:	2f 5f       	subi	r18, 0xFF	; 255
     9d4:	3f 4f       	sbci	r19, 0xFF	; 255
     9d6:	d9 01       	movw	r26, r18
     9d8:	01 90       	ld	r0, Z+
     9da:	0d 92       	st	X+, r0
     9dc:	4a 95       	dec	r20
     9de:	e1 f7       	brne	.-8      	; 0x9d8 <convert_ds2iso+0x20>
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     9e0:	fb 01       	movw	r30, r22
     9e2:	b0 81       	ld	r27, Z
	minutes = (*ds3231time++);
     9e4:	a1 81       	ldd	r26, Z+1	; 0x01
	hours = (*ds3231time++);
     9e6:	12 81       	ldd	r17, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     9e8:	04 81       	ldd	r16, Z+4	; 0x04
	month = (*ds3231time++);
     9ea:	55 81       	ldd	r21, Z+5	; 0x05
	year = (*ds3231time);
     9ec:	46 81       	ldd	r20, Z+6	; 0x06

	sprintf(isotime, format_ISO, year, month, date, hours, minutes, seconds);
     9ee:	1f 92       	push	r1
     9f0:	bf 93       	push	r27
     9f2:	1f 92       	push	r1
     9f4:	af 93       	push	r26
     9f6:	1f 92       	push	r1
     9f8:	1f 93       	push	r17
     9fa:	1f 92       	push	r1
     9fc:	0f 93       	push	r16
     9fe:	1f 92       	push	r1
     a00:	5f 93       	push	r21
     a02:	1f 92       	push	r1
     a04:	4f 93       	push	r20
     a06:	3f 93       	push	r19
     a08:	2f 93       	push	r18
     a0a:	9f 93       	push	r25
     a0c:	8f 93       	push	r24
     a0e:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>

}
     a12:	cd bf       	out	0x3d, r28	; 61
     a14:	de bf       	out	0x3e, r29	; 62
     a16:	a0 96       	adiw	r28, 0x20	; 32
     a18:	cd bf       	out	0x3d, r28	; 61
     a1a:	de bf       	out	0x3e, r29	; 62
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	08 95       	ret

00000a26 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     a26:	dc 01       	movw	r26, r24
     a28:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     a2a:	81 89       	ldd	r24, Z+17	; 0x11
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	c0 97       	sbiw	r24, 0x30	; 48
     a30:	82 95       	swap	r24
     a32:	92 95       	swap	r25
     a34:	90 7f       	andi	r25, 0xF0	; 240
     a36:	98 27       	eor	r25, r24
     a38:	80 7f       	andi	r24, 0xF0	; 240
     a3a:	98 27       	eor	r25, r24
     a3c:	92 89       	ldd	r25, Z+18	; 0x12
     a3e:	90 53       	subi	r25, 0x30	; 48
     a40:	89 2b       	or	r24, r25
     a42:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     a44:	86 85       	ldd	r24, Z+14	; 0x0e
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	c0 97       	sbiw	r24, 0x30	; 48
     a4a:	82 95       	swap	r24
     a4c:	92 95       	swap	r25
     a4e:	90 7f       	andi	r25, 0xF0	; 240
     a50:	98 27       	eor	r25, r24
     a52:	80 7f       	andi	r24, 0xF0	; 240
     a54:	98 27       	eor	r25, r24
     a56:	97 85       	ldd	r25, Z+15	; 0x0f
     a58:	90 53       	subi	r25, 0x30	; 48
     a5a:	89 2b       	or	r24, r25
     a5c:	11 96       	adiw	r26, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     a62:	83 85       	ldd	r24, Z+11	; 0x0b
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	c0 97       	sbiw	r24, 0x30	; 48
     a68:	82 95       	swap	r24
     a6a:	92 95       	swap	r25
     a6c:	90 7f       	andi	r25, 0xF0	; 240
     a6e:	98 27       	eor	r25, r24
     a70:	80 7f       	andi	r24, 0xF0	; 240
     a72:	98 27       	eor	r25, r24
     a74:	94 85       	ldd	r25, Z+12	; 0x0c
     a76:	90 53       	subi	r25, 0x30	; 48
     a78:	89 2b       	or	r24, r25
     a7a:	12 96       	adiw	r26, 0x02	; 2
     a7c:	8c 93       	st	X, r24
     a7e:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	13 96       	adiw	r26, 0x03	; 3
     a84:	8c 93       	st	X, r24
     a86:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     a88:	80 85       	ldd	r24, Z+8	; 0x08
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	c0 97       	sbiw	r24, 0x30	; 48
     a8e:	82 95       	swap	r24
     a90:	92 95       	swap	r25
     a92:	90 7f       	andi	r25, 0xF0	; 240
     a94:	98 27       	eor	r25, r24
     a96:	80 7f       	andi	r24, 0xF0	; 240
     a98:	98 27       	eor	r25, r24
     a9a:	91 85       	ldd	r25, Z+9	; 0x09
     a9c:	90 53       	subi	r25, 0x30	; 48
     a9e:	89 2b       	or	r24, r25
     aa0:	14 96       	adiw	r26, 0x04	; 4
     aa2:	8c 93       	st	X, r24
     aa4:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     aa6:	25 81       	ldd	r18, Z+5	; 0x05
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	20 53       	subi	r18, 0x30	; 48
     aac:	31 09       	sbc	r19, r1
     aae:	22 95       	swap	r18
     ab0:	32 95       	swap	r19
     ab2:	30 7f       	andi	r19, 0xF0	; 240
     ab4:	32 27       	eor	r19, r18
     ab6:	20 7f       	andi	r18, 0xF0	; 240
     ab8:	32 27       	eor	r19, r18
     aba:	86 81       	ldd	r24, Z+6	; 0x06
     abc:	80 53       	subi	r24, 0x30	; 48
     abe:	28 2b       	or	r18, r24
     ac0:	15 96       	adiw	r26, 0x05	; 5
     ac2:	2c 93       	st	X, r18
     ac4:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     ac6:	22 81       	ldd	r18, Z+2	; 0x02
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	20 53       	subi	r18, 0x30	; 48
     acc:	31 09       	sbc	r19, r1
     ace:	22 95       	swap	r18
     ad0:	32 95       	swap	r19
     ad2:	30 7f       	andi	r19, 0xF0	; 240
     ad4:	32 27       	eor	r19, r18
     ad6:	20 7f       	andi	r18, 0xF0	; 240
     ad8:	32 27       	eor	r19, r18
     ada:	83 81       	ldd	r24, Z+3	; 0x03
     adc:	80 53       	subi	r24, 0x30	; 48
     ade:	28 2b       	or	r18, r24
     ae0:	16 96       	adiw	r26, 0x06	; 6
     ae2:	2c 93       	st	X, r18
     ae4:	08 95       	ret

00000ae6 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     ae6:	ef 92       	push	r14
     ae8:	ff 92       	push	r15
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	7b 01       	movw	r14, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
     af8:	c8 2f       	mov	r28, r24
     afa:	83 36       	cpi	r24, 0x63	; 99
     afc:	19 f4       	brne	.+6      	; 0xb04 <read_DS3231+0x1e>
		stop_TWI();
     afe:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(ERROR);
     b02:	26 c0       	rjmp	.+76     	; 0xb50 <read_DS3231+0x6a>
    }  

	if (write_TWI(0x00) == ERROR) {	// Register 00h
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
     b0a:	c8 2f       	mov	r28, r24
     b0c:	83 36       	cpi	r24, 0x63	; 99
     b0e:	19 f4       	brne	.+6      	; 0xb16 <read_DS3231+0x30>
		stop_TWI();
     b10:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(ERROR);
     b14:	1d c0       	rjmp	.+58     	; 0xb50 <read_DS3231+0x6a>
	}

	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
     b16:	61 e0       	ldi	r22, 0x01	; 1
     b18:	88 e6       	ldi	r24, 0x68	; 104
     b1a:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
     b1e:	c8 2f       	mov	r28, r24
     b20:	83 36       	cpi	r24, 0x63	; 99
     b22:	61 f4       	brne	.+24     	; 0xb3c <read_DS3231+0x56>
		stop_TWI();
     b24:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(ERROR);
     b28:	13 c0       	rjmp	.+38     	; 0xb50 <read_DS3231+0x6a>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     b2a:	87 01       	movw	r16, r14
     b2c:	0c 0f       	add	r16, r28
     b2e:	11 1d       	adc	r17, r1
     b30:	0e 94 2d 1a 	call	0x345a	; 0x345a <read_TWI>
     b34:	f8 01       	movw	r30, r16
     b36:	80 83       	st	Z, r24
	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 6; i++) {
     b38:	cf 5f       	subi	r28, 0xFF	; 255
     b3a:	01 c0       	rjmp	.+2      	; 0xb3e <read_DS3231+0x58>
     b3c:	c0 e0       	ldi	r28, 0x00	; 0
     b3e:	c6 30       	cpi	r28, 0x06	; 6
     b40:	a0 f3       	brcs	.-24     	; 0xb2a <read_DS3231+0x44>
		ds3231time[i] = read_TWI();
	}

	ds3231time[6] = readlast_TWI();
     b42:	0e 94 3d 1a 	call	0x347a	; 0x347a <readlast_TWI>
     b46:	f7 01       	movw	r30, r14
     b48:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     b4a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>

	return(NOERROR);
     b4e:	c0 e0       	ldi	r28, 0x00	; 0

}
     b50:	8c 2f       	mov	r24, r28
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	08 95       	ret

00000b5e <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	27 97       	sbiw	r28, 0x07	; 7
     b6e:	cd bf       	out	0x3d, r28	; 61
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (read_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     b74:	be 01       	movw	r22, r28
     b76:	6f 5f       	subi	r22, 0xFF	; 255
     b78:	7f 4f       	sbci	r23, 0xFF	; 255
     b7a:	88 e6       	ldi	r24, 0x68	; 104
     b7c:	0e 94 73 05 	call	0xae6	; 0xae6 <read_DS3231>
     b80:	18 2f       	mov	r17, r24
     b82:	83 36       	cpi	r24, 0x63	; 99
     b84:	79 f4       	brne	.+30     	; 0xba4 <get_time+0x46>
		printError(ERR_GETTIME, "get_time DS3231");
     b86:	66 ed       	ldi	r22, 0xD6	; 214
     b88:	7b e8       	ldi	r23, 0x8B	; 139
     b8a:	85 e6       	ldi	r24, 0x65	; 101
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
		strcpy(isotime, "DateTime?");
     b92:	8a e0       	ldi	r24, 0x0A	; 10
     b94:	e6 ee       	ldi	r30, 0xE6	; 230
     b96:	fb e8       	ldi	r31, 0x8B	; 139
     b98:	d7 01       	movw	r26, r14
     b9a:	01 90       	ld	r0, Z+
     b9c:	0d 92       	st	X+, r0
     b9e:	8a 95       	dec	r24
     ba0:	e1 f7       	brne	.-8      	; 0xb9a <get_time+0x3c>
		return(ERROR);
     ba2:	07 c0       	rjmp	.+14     	; 0xbb2 <get_time+0x54>
	}

	convert_ds2iso(isotime, ds3231time);
     ba4:	be 01       	movw	r22, r28
     ba6:	6f 5f       	subi	r22, 0xFF	; 255
     ba8:	7f 4f       	sbci	r23, 0xFF	; 255
     baa:	c7 01       	movw	r24, r14
     bac:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <convert_ds2iso>
	return(NOERROR);
     bb0:	10 e0       	ldi	r17, 0x00	; 0

}
     bb2:	81 2f       	mov	r24, r17
     bb4:	27 96       	adiw	r28, 0x07	; 7
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	08 95       	ret

00000bc6 <write_DS3231>:
	Returns:
		ERROR for TWI start error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	8b 01       	movw	r16, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
     bda:	c8 2f       	mov	r28, r24
     bdc:	83 36       	cpi	r24, 0x63	; 99
     bde:	19 f4       	brne	.+6      	; 0xbe6 <write_DS3231+0x20>
		stop_TWI();
     be0:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(ERROR);
     be4:	20 c0       	rjmp	.+64     	; 0xc26 <write_DS3231+0x60>
	}

	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
     bec:	c8 2f       	mov	r28, r24
     bee:	83 36       	cpi	r24, 0x63	; 99
     bf0:	a1 f4       	brne	.+40     	; 0xc1a <write_DS3231+0x54>
		stop_TWI();
     bf2:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(ERROR);
     bf6:	17 c0       	rjmp	.+46     	; 0xc26 <write_DS3231+0x60>
	}

	for (i = 0; i < 7; i++) {
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     bf8:	78 01       	movw	r14, r16
     bfa:	8f ef       	ldi	r24, 0xFF	; 255
     bfc:	e8 1a       	sub	r14, r24
     bfe:	f8 0a       	sbc	r15, r24
     c00:	f8 01       	movw	r30, r16
     c02:	80 81       	ld	r24, Z
     c04:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
     c08:	c8 2f       	mov	r28, r24
     c0a:	83 36       	cpi	r24, 0x63	; 99
     c0c:	19 f4       	brne	.+6      	; 0xc14 <write_DS3231+0x4e>
			stop_TWI();
     c0e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
			return(ERROR);
     c12:	09 c0       	rjmp	.+18     	; 0xc26 <write_DS3231+0x60>
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     c14:	df 5f       	subi	r29, 0xFF	; 255
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     c16:	87 01       	movw	r16, r14
     c18:	01 c0       	rjmp	.+2      	; 0xc1c <write_DS3231+0x56>
     c1a:	d0 e0       	ldi	r29, 0x00	; 0
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     c1c:	d7 30       	cpi	r29, 0x07	; 7
     c1e:	60 f3       	brcs	.-40     	; 0xbf8 <write_DS3231+0x32>
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
			stop_TWI();
			return(ERROR);
		}
	}
	stop_TWI();
     c20:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>

	return(NOERROR);
     c24:	c0 e0       	ldi	r28, 0x00	; 0

}
     c26:	8c 2f       	mov	r24, r28
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	08 95       	ret

00000c36 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     c36:	1f 93       	push	r17
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	27 97       	sbiw	r28, 0x07	; 7
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	de bf       	out	0x3e, r29	; 62

	uint8_t ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     c46:	bc 01       	movw	r22, r24
     c48:	ce 01       	movw	r24, r28
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	0e 94 13 05 	call	0xa26	; 0xa26 <convert_iso2ds>
	if (write_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     c50:	be 01       	movw	r22, r28
     c52:	6f 5f       	subi	r22, 0xFF	; 255
     c54:	7f 4f       	sbci	r23, 0xFF	; 255
     c56:	88 e6       	ldi	r24, 0x68	; 104
     c58:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <write_DS3231>
     c5c:	18 2f       	mov	r17, r24
     c5e:	83 36       	cpi	r24, 0x63	; 99
     c60:	39 f4       	brne	.+14     	; 0xc70 <put_time+0x3a>
		printError(ERR_PUTTIME, "put_time DS3231");
     c62:	60 ef       	ldi	r22, 0xF0	; 240
     c64:	7b e8       	ldi	r23, 0x8B	; 139
     c66:	86 e6       	ldi	r24, 0x66	; 102
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
		return(ERROR);
     c6e:	01 c0       	rjmp	.+2      	; 0xc72 <put_time+0x3c>
	}
	return(NOERROR);
     c70:	10 e0       	ldi	r17, 0x00	; 0

}
     c72:	81 2f       	mov	r24, r17
     c74:	27 96       	adiw	r28, 0x07	; 7
     c76:	cd bf       	out	0x3d, r28	; 61
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	08 95       	ret

00000c82 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     c82:	45 e1       	ldi	r20, 0x15	; 21
     c84:	50 e0       	ldi	r21, 0x00	; 0
     c86:	6b e0       	ldi	r22, 0x0B	; 11
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	0e 94 78 25 	call	0x4af0	; 0x4af0 <eeprom_read_block>
     c8e:	08 95       	ret

00000c90 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     c90:	4b e0       	ldi	r20, 0x0B	; 11
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	0e 94 78 25 	call	0x4af0	; 0x4af0 <eeprom_read_block>
     c9c:	08 95       	ret

00000c9e <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	65 97       	sbiw	r28, 0x15	; 21
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     cac:	ce 01       	movw	r24, r28
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	0e 94 af 05 	call	0xb5e	; 0xb5e <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     cb4:	45 e1       	ldi	r20, 0x15	; 21
     cb6:	50 e0       	ldi	r21, 0x00	; 0
     cb8:	6b e0       	ldi	r22, 0x0B	; 11
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	ce 01       	movw	r24, r28
     cbe:	01 96       	adiw	r24, 0x01	; 1
     cc0:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <eeprom_update_block>

}
     cc4:	65 96       	adiw	r28, 0x15	; 21
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret

00000cd0 <update_VERSION>:

void update_VERSION(void)
{
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	2b 97       	sbiw	r28, 0x0b	; 11
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     cde:	8b e0       	ldi	r24, 0x0B	; 11
     ce0:	e0 e0       	ldi	r30, 0x00	; 0
     ce2:	fc e8       	ldi	r31, 0x8C	; 140
     ce4:	de 01       	movw	r26, r28
     ce6:	11 96       	adiw	r26, 0x01	; 1
     ce8:	01 90       	ld	r0, Z+
     cea:	0d 92       	st	X+, r0
     cec:	8a 95       	dec	r24
     cee:	e1 f7       	brne	.-8      	; 0xce8 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     cf0:	4b e0       	ldi	r20, 0x0B	; 11
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	ce 01       	movw	r24, r28
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <eeprom_update_block>

}
     d00:	2b 96       	adiw	r28, 0x0b	; 11
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     d0c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <update_BOOTTIME>
	update_VERSION();
     d10:	0e 94 68 06 	call	0xcd0	; 0xcd0 <update_VERSION>
     d14:	08 95       	ret

00000d16 <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	c8 50       	subi	r28, 0x08	; 8
     d24:	d1 40       	sbci	r29, 0x01	; 1
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char errorFormat[] = "ERR,%d,%s";
     d2a:	2a e0       	ldi	r18, 0x0A	; 10
     d2c:	eb e0       	ldi	r30, 0x0B	; 11
     d2e:	fc e8       	ldi	r31, 0x8C	; 140
     d30:	de 01       	movw	r26, r28
     d32:	a1 50       	subi	r26, 0x01	; 1
     d34:	bf 4f       	sbci	r27, 0xFF	; 255
     d36:	01 90       	ld	r0, Z+
     d38:	0d 92       	st	X+, r0
     d3a:	2a 95       	dec	r18
     d3c:	e1 f7       	brne	.-8      	; 0xd36 <printError+0x20>

	if (!squelchErrors) {
     d3e:	20 91 06 28 	lds	r18, 0x2806	; 0x802806 <squelchErrors>
     d42:	21 11       	cpse	r18, r1
     d44:	15 c0       	rjmp	.+42     	; 0xd70 <printError+0x5a>
		sprintf(strbuf, errorFormat, errorNumber, errorString);
     d46:	7f 93       	push	r23
     d48:	6f 93       	push	r22
     d4a:	9f 93       	push	r25
     d4c:	8f 93       	push	r24
     d4e:	ce 01       	movw	r24, r28
     d50:	81 50       	subi	r24, 0x01	; 1
     d52:	9f 4f       	sbci	r25, 0xFF	; 255
     d54:	9f 93       	push	r25
     d56:	8f 93       	push	r24
     d58:	8e 01       	movw	r16, r28
     d5a:	0f 5f       	subi	r16, 0xFF	; 255
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	1f 93       	push	r17
     d60:	0f 93       	push	r16
     d62:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
		printLine(strbuf);
     d66:	c8 01       	movw	r24, r16
     d68:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	de bf       	out	0x3e, r29	; 62
	}

}
     d70:	c8 5f       	subi	r28, 0xF8	; 248
     d72:	de 4f       	sbci	r29, 0xFE	; 254
     d74:	cd bf       	out	0x3d, r28	; 61
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	08 95       	ret

00000d82 <read_FRAM>:
	Returns:
		ERROR on start_TWI error (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     d82:	cf 92       	push	r12
     d84:	df 92       	push	r13
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	d8 2f       	mov	r29, r24
     d94:	d6 2e       	mov	r13, r22
     d96:	07 2f       	mov	r16, r23
     d98:	7a 01       	movw	r14, r20
     d9a:	12 2f       	mov	r17, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if (start_TWI(addr, TWIWRITE) == ERROR) {		// TWI start
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
     da2:	c8 2f       	mov	r28, r24
     da4:	83 36       	cpi	r24, 0x63	; 99
     da6:	19 f4       	brne	.+6      	; 0xdae <read_FRAM+0x2c>
		stop_TWI();
     da8:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(ERROR);
     dac:	2e c0       	rjmp	.+92     	; 0xe0a <read_FRAM+0x88>
	}

	if (write_TWI(memhigh) == ERROR) {			// Send memory address
     dae:	80 2f       	mov	r24, r16
     db0:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
     db4:	c8 2f       	mov	r28, r24
     db6:	83 36       	cpi	r24, 0x63	; 99
     db8:	41 f1       	breq	.+80     	; 0xe0a <read_FRAM+0x88>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {
     dba:	8d 2d       	mov	r24, r13
     dbc:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
     dc0:	c8 2f       	mov	r28, r24
     dc2:	83 36       	cpi	r24, 0x63	; 99
     dc4:	11 f1       	breq	.+68     	; 0xe0a <read_FRAM+0x88>
		return(ERROR);
	}

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
     dc6:	61 e0       	ldi	r22, 0x01	; 1
     dc8:	8d 2f       	mov	r24, r29
     dca:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
     dce:	c8 2f       	mov	r28, r24
     dd0:	83 36       	cpi	r24, 0x63	; 99
     dd2:	d9 f0       	breq	.+54     	; 0xe0a <read_FRAM+0x88>
     dd4:	c0 e0       	ldi	r28, 0x00	; 0
     dd6:	08 c0       	rjmp	.+16     	; 0xde8 <read_FRAM+0x66>
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     dd8:	67 01       	movw	r12, r14
     dda:	cc 0e       	add	r12, r28
     ddc:	d1 1c       	adc	r13, r1
     dde:	0e 94 2d 1a 	call	0x345a	; 0x345a <read_TWI>
     de2:	f6 01       	movw	r30, r12
     de4:	80 83       	st	Z, r24

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
     de6:	cf 5f       	subi	r28, 0xFF	; 255
     de8:	2c 2f       	mov	r18, r28
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 2f       	mov	r24, r17
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	28 17       	cp	r18, r24
     df4:	39 07       	cpc	r19, r25
     df6:	84 f3       	brlt	.-32     	; 0xdd8 <read_FRAM+0x56>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     df8:	ec 01       	movw	r28, r24
     dfa:	ce 0d       	add	r28, r14
     dfc:	df 1d       	adc	r29, r15
     dfe:	0e 94 3d 1a 	call	0x347a	; 0x347a <readlast_TWI>
     e02:	88 83       	st	Y, r24

	stop_TWI();
     e04:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>

	return(NOERROR);
     e08:	c0 e0       	ldi	r28, 0x00	; 0

}
     e0a:	8c 2f       	mov	r24, r28
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	df 90       	pop	r13
     e1a:	cf 90       	pop	r12
     e1c:	08 95       	ret

00000e1e <get_SETTIME>:
#include "errors.h"
#include "twi.h"
#include "fram.h"

uint8_t get_SETTIME(char *lastsettime)
{
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	1f 93       	push	r17
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	2a 97       	sbiw	r28, 0x0a	; 10
     e2e:	cd bf       	out	0x3d, r28	; 61
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	7c 01       	movw	r14, r24

	const char timeset[] = "Time Set?";
     e34:	8a e0       	ldi	r24, 0x0A	; 10
     e36:	e5 e1       	ldi	r30, 0x15	; 21
     e38:	fc e8       	ldi	r31, 0x8C	; 140
     e3a:	de 01       	movw	r26, r28
     e3c:	11 96       	adiw	r26, 0x01	; 1
     e3e:	01 90       	ld	r0, Z+
     e40:	0d 92       	st	X+, r0
     e42:	8a 95       	dec	r24
     e44:	e1 f7       	brne	.-8      	; 0xe3e <get_SETTIME+0x20>
	if (read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, ISOTIMELEN) == ERROR) {;
     e46:	24 e1       	ldi	r18, 0x14	; 20
     e48:	a7 01       	movw	r20, r14
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	80 e5       	ldi	r24, 0x50	; 80
     e50:	0e 94 c1 06 	call	0xd82	; 0xd82 <read_FRAM>
     e54:	18 2f       	mov	r17, r24
     e56:	83 36       	cpi	r24, 0x63	; 99
     e58:	39 f4       	brne	.+14     	; 0xe68 <get_SETTIME+0x4a>
		strcpy(lastsettime, timeset);
     e5a:	be 01       	movw	r22, r28
     e5c:	6f 5f       	subi	r22, 0xFF	; 255
     e5e:	7f 4f       	sbci	r23, 0xFF	; 255
     e60:	c7 01       	movw	r24, r14
     e62:	0e 94 95 24 	call	0x492a	; 0x492a <strcpy>
		return(ERROR);
     e66:	01 c0       	rjmp	.+2      	; 0xe6a <get_SETTIME+0x4c>
	}
	return(NOERROR);
     e68:	10 e0       	ldi	r17, 0x00	; 0
}
     e6a:	81 2f       	mov	r24, r17
     e6c:	2a 96       	adiw	r28, 0x0a	; 10
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	ff 90       	pop	r15
     e7a:	ef 90       	pop	r14
     e7c:	08 95       	ret

00000e7e <write_FRAM>:
	Returns:
		ERROR if start_TWI fails (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     e7e:	ef 92       	push	r14
     e80:	ff 92       	push	r15
     e82:	0f 93       	push	r16
     e84:	1f 93       	push	r17
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	f6 2e       	mov	r15, r22
     e8c:	17 2f       	mov	r17, r23
     e8e:	ea 01       	movw	r28, r20
     e90:	02 2f       	mov	r16, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if (start_TWI(addr, TWIWRITE) == ERROR) {	// TWI START
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
     e98:	83 36       	cpi	r24, 0x63	; 99
     e9a:	e1 f0       	breq	.+56     	; 0xed4 <write_FRAM+0x56>
		return(ERROR);
	}

	if (write_TWI(memhigh) == ERROR) {			// FRAM address to write
     e9c:	81 2f       	mov	r24, r17
     e9e:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
     ea2:	83 36       	cpi	r24, 0x63	; 99
     ea4:	b9 f0       	breq	.+46     	; 0xed4 <write_FRAM+0x56>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
     ea6:	8f 2d       	mov	r24, r15
     ea8:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
     eac:	83 36       	cpi	r24, 0x63	; 99
     eae:	91 f0       	breq	.+36     	; 0xed4 <write_FRAM+0x56>
     eb0:	10 e0       	ldi	r17, 0x00	; 0
     eb2:	0b c0       	rjmp	.+22     	; 0xeca <write_FRAM+0x4c>
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
     eb4:	7e 01       	movw	r14, r28
     eb6:	8f ef       	ldi	r24, 0xFF	; 255
     eb8:	e8 1a       	sub	r14, r24
     eba:	f8 0a       	sbc	r15, r24
     ebc:	88 81       	ld	r24, Y
     ebe:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
     ec2:	83 36       	cpi	r24, 0x63	; 99
     ec4:	39 f0       	breq	.+14     	; 0xed4 <write_FRAM+0x56>
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
     ec6:	1f 5f       	subi	r17, 0xFF	; 255
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
     ec8:	e7 01       	movw	r28, r14
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
     eca:	10 17       	cp	r17, r16
     ecc:	98 f3       	brcs	.-26     	; 0xeb4 <write_FRAM+0x36>
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
			return(ERROR);
		}
	}

	stop_TWI();
     ece:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>

	return(NOERROR);
     ed2:	80 e0       	ldi	r24, 0x00	; 0

}
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	ff 90       	pop	r15
     ede:	ef 90       	pop	r14
     ee0:	08 95       	ret

00000ee2 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     ee2:	8f 92       	push	r8
     ee4:	9f 92       	push	r9
     ee6:	af 92       	push	r10
     ee8:	bf 92       	push	r11
     eea:	cf 92       	push	r12
     eec:	df 92       	push	r13
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	00 d0       	rcall	.+0      	; 0xefc <get_humidity+0x1a>
     efc:	00 d0       	rcall	.+0      	; 0xefe <get_humidity+0x1c>
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62

	uint8_t adcpin;
	float voltage, humidity, temperature;

	switch (sensor) {
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	59 f0       	breq	.+22     	; 0xf1c <get_humidity+0x3a>
     f06:	18 f0       	brcs	.+6      	; 0xf0e <get_humidity+0x2c>
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	79 f0       	breq	.+30     	; 0xf2a <get_humidity+0x48>
     f0c:	15 c0       	rjmp	.+42     	; 0xf38 <get_humidity+0x56>
		case 0:
			temperature = get_temperature(0);
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	0e 94 65 19 	call	0x32ca	; 0x32ca <get_temperature>
     f14:	6b 01       	movw	r12, r22
     f16:	7c 01       	movw	r14, r24
			adcpin = AIN0;		// production
     f18:	40 e4       	ldi	r20, 0x40	; 64
			break;
     f1a:	17 c0       	rjmp	.+46     	; 0xf4a <get_humidity+0x68>

		case 1:
			temperature = get_temperature(1);
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	0e 94 65 19 	call	0x32ca	; 0x32ca <get_temperature>
     f22:	6b 01       	movw	r12, r22
     f24:	7c 01       	movw	r14, r24
			adcpin = AIN1;
     f26:	40 e5       	ldi	r20, 0x50	; 80
			break;
     f28:	10 c0       	rjmp	.+32     	; 0xf4a <get_humidity+0x68>

		case 2:
			temperature = get_temperature(2);
     f2a:	82 e0       	ldi	r24, 0x02	; 2
     f2c:	0e 94 65 19 	call	0x32ca	; 0x32ca <get_temperature>
     f30:	6b 01       	movw	r12, r22
     f32:	7c 01       	movw	r14, r24
			adcpin = AIN2;
     f34:	40 e6       	ldi	r20, 0x60	; 96
			break;
     f36:	09 c0       	rjmp	.+18     	; 0xf4a <get_humidity+0x68>

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     f38:	0f 2e       	mov	r0, r31
     f3a:	c1 2c       	mov	r12, r1
     f3c:	d1 2c       	mov	r13, r1
     f3e:	f0 ea       	ldi	r31, 0xA0	; 160
     f40:	ef 2e       	mov	r14, r31
     f42:	f1 e4       	ldi	r31, 0x41	; 65
     f44:	ff 2e       	mov	r15, r31
     f46:	f0 2d       	mov	r31, r0
			adcpin = AIN2;
			break;

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     f48:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
     f4a:	8e 01       	movw	r16, r28
     f4c:	0f 5f       	subi	r16, 0xFF	; 255
     f4e:	1f 4f       	sbci	r17, 0xFF	; 255
     f50:	20 e8       	ldi	r18, 0x80	; 128
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	88 e4       	ldi	r24, 0x48	; 72
     f56:	0e 94 ca 01 	call	0x394	; 0x394 <read_ADS1115>
     f5a:	83 36       	cpi	r24, 0x63	; 99
     f5c:	79 f1       	breq	.+94     	; 0xfbc <get_humidity+0xda>
		humidity = BADFLOAT;
	}
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 ea       	ldi	r20, 0xA0	; 160
     f64:	50 e4       	ldi	r21, 0x40	; 64
     f66:	69 81       	ldd	r22, Y+1	; 0x01
     f68:	7a 81       	ldd	r23, Y+2	; 0x02
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <__divsf3>
     f72:	2a e0       	ldi	r18, 0x0A	; 10
     f74:	37 ed       	ldi	r19, 0xD7	; 215
     f76:	43 e2       	ldi	r20, 0x23	; 35
     f78:	5e e3       	ldi	r21, 0x3E	; 62
     f7a:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__subsf3>
     f7e:	2f e5       	ldi	r18, 0x5F	; 95
     f80:	39 e2       	ldi	r19, 0x29	; 41
     f82:	4b ec       	ldi	r20, 0xCB	; 203
     f84:	5b e3       	ldi	r21, 0x3B	; 59
     f86:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <__divsf3>
     f8a:	4b 01       	movw	r8, r22
     f8c:	5c 01       	movw	r10, r24
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
     f8e:	29 ec       	ldi	r18, 0xC9	; 201
     f90:	3e e8       	ldi	r19, 0x8E	; 142
     f92:	4d e0       	ldi	r20, 0x0D	; 13
     f94:	5b e3       	ldi	r21, 0x3B	; 59
     f96:	c7 01       	movw	r24, r14
     f98:	b6 01       	movw	r22, r12
     f9a:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__mulsf3>
     f9e:	9b 01       	movw	r18, r22
     fa0:	ac 01       	movw	r20, r24
     fa2:	62 e2       	ldi	r22, 0x22	; 34
     fa4:	7d ef       	ldi	r23, 0xFD	; 253
     fa6:	86 e8       	ldi	r24, 0x86	; 134
     fa8:	9f e3       	ldi	r25, 0x3F	; 63
     faa:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__subsf3>
     fae:	9b 01       	movw	r18, r22
     fb0:	ac 01       	movw	r20, r24
     fb2:	c5 01       	movw	r24, r10
     fb4:	b4 01       	movw	r22, r8
     fb6:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <__divsf3>
     fba:	04 c0       	rjmp	.+8      	; 0xfc4 <get_humidity+0xe2>
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
		humidity = BADFLOAT;
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	70 e8       	ldi	r23, 0x80	; 128
     fc0:	86 e2       	ldi	r24, 0x26	; 38
     fc2:	94 ec       	ldi	r25, 0xC4	; 196
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
	}

	return(humidity);

}
     fc4:	24 96       	adiw	r28, 0x04	; 4
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	ff 90       	pop	r15
     fd4:	ef 90       	pop	r14
     fd6:	df 90       	pop	r13
     fd8:	cf 90       	pop	r12
     fda:	bf 90       	pop	r11
     fdc:	af 90       	pop	r10
     fde:	9f 90       	pop	r9
     fe0:	8f 90       	pop	r8
     fe2:	08 95       	ret

00000fe4 <initialize0>:
*/

void initialize0(void)
{

	init_PORTS();
     fe4:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <init_PORTS>
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton setup
     fe8:	8b e0       	ldi	r24, 0x0B	; 11
     fea:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f44b6>
	init_XPORT();
     fee:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <init_XPORT>
	init_SPECID();
     ff2:	0e 94 5d 19 	call	0x32ba	; 0x32ba <init_SPECID>
	init_LED();
     ff6:	0e 94 a7 08 	call	0x114e	; 0x114e <init_LED>
	init_BEEPER();
     ffa:	0e 94 b4 02 	call	0x568	; 0x568 <init_BEEPER>
	init_TWI();
     ffe:	0e 94 22 1a 	call	0x3444	; 0x3444 <init_TWI>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
    1002:	80 e2       	ldi	r24, 0x20	; 32
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <init_RTC>
	init_USART();
    100a:	0e 94 b4 1a 	call	0x3568	; 0x3568 <init_USART>
    100e:	08 95       	ret

00001010 <initialize1>:

}

void initialize1(void)
{
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	2b 97       	sbiw	r28, 0x0b	; 11
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	rebootackd = NO;
    101e:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <rebootackd>
	init_MOTORS();
    1022:	0e 94 87 18 	call	0x310e	; 0x310e <init_MOTORS>
	init_MMA8451();
    1026:	0e 94 aa 0a 	call	0x1554	; 0x1554 <init_MMA8451>
	init_PNEU();
    102a:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <init_PNEU>
	init_OLED(0);
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	0e 94 37 0b 	call	0x166e	; 0x166e <init_OLED>
	init_OLED(1);
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	0e 94 37 0b 	call	0x166e	; 0x166e <init_OLED>
	init_EEPROM();	// Needs TWI
    103a:	0e 94 86 06 	call	0xd0c	; 0xd0c <init_EEPROM>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display before rebootackd
    103e:	80 ee       	ldi	r24, 0xE0	; 224
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	80 93 12 2a 	sts	0x2A12, r24	; 0x802a12 <timeoutOLED>
    1046:	90 93 13 2a 	sts	0x2A13, r25	; 0x802a13 <timeoutOLED+0x1>
	get_VERSION(versionstr);
    104a:	ce 01       	movw	r24, r28
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	0e 94 48 06 	call	0xc90	; 0xc90 <get_VERSION>
	writestr_OLED(1,"specMech Version", 1);
    1052:	41 e0       	ldi	r20, 0x01	; 1
    1054:	6f e1       	ldi	r22, 0x1F	; 31
    1056:	7c e8       	ldi	r23, 0x8C	; 140
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
	writestr_OLED(1, versionstr, 2);
    105e:	42 e0       	ldi	r20, 0x02	; 2
    1060:	be 01       	movw	r22, r28
    1062:	6f 5f       	subi	r22, 0xFF	; 255
    1064:	7f 4f       	sbci	r23, 0xFF	; 255
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>

}
    106c:	2b 96       	adiw	r28, 0x0b	; 11
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	08 95       	ret

00001078 <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
    1078:	cf 92       	push	r12
    107a:	df 92       	push	r13
    107c:	ef 92       	push	r14
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	00 d0       	rcall	.+0      	; 0x108a <read_ionpump+0x12>
    108a:	00 d0       	rcall	.+0      	; 0x108c <read_ionpump+0x14>
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	21 f0       	breq	.+8      	; 0x109c <read_ionpump+0x24>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
    1094:	82 30       	cpi	r24, 0x02	; 2
    1096:	c1 f5       	brne	.+112    	; 0x1108 <read_ionpump+0x90>
		pins = AIN23;
    1098:	40 e3       	ldi	r20, 0x30	; 48
    109a:	01 c0       	rjmp	.+2      	; 0x109e <read_ionpump+0x26>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
    109c:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(BADFLOAT);
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
    109e:	8e 01       	movw	r16, r28
    10a0:	0f 5f       	subi	r16, 0xFF	; 255
    10a2:	1f 4f       	sbci	r17, 0xFF	; 255
    10a4:	20 e8       	ldi	r18, 0x80	; 128
    10a6:	62 e0       	ldi	r22, 0x02	; 2
    10a8:	89 e4       	ldi	r24, 0x49	; 73
    10aa:	0e 94 ca 01 	call	0x394	; 0x394 <read_ADS1115>
    10ae:	83 36       	cpi	r24, 0x63	; 99
    10b0:	81 f1       	breq	.+96     	; 0x1112 <read_ionpump+0x9a>
		return(BADFLOAT);
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
    10b2:	c9 80       	ldd	r12, Y+1	; 0x01
    10b4:	da 80       	ldd	r13, Y+2	; 0x02
    10b6:	eb 80       	ldd	r14, Y+3	; 0x03
    10b8:	fc 80       	ldd	r15, Y+4	; 0x04
    10ba:	2d ec       	ldi	r18, 0xCD	; 205
    10bc:	3c ec       	ldi	r19, 0xCC	; 204
    10be:	4c ec       	ldi	r20, 0xCC	; 204
    10c0:	5e e3       	ldi	r21, 0x3E	; 62
    10c2:	c7 01       	movw	r24, r14
    10c4:	b6 01       	movw	r22, r12
    10c6:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__cmpsf2>
    10ca:	88 23       	and	r24, r24
    10cc:	3c f1       	brlt	.+78     	; 0x111c <read_ionpump+0xa4>
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	50 e4       	ldi	r21, 0x40	; 64
    10d6:	c7 01       	movw	r24, r14
    10d8:	b6 01       	movw	r22, r12
    10da:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__gesf2>
    10de:	18 16       	cp	r1, r24
    10e0:	14 f1       	brlt	.+68     	; 0x1126 <read_ionpump+0xae>
		return(BADFLOAT);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    10e2:	29 e7       	ldi	r18, 0x79	; 121
    10e4:	39 ee       	ldi	r19, 0xE9	; 233
    10e6:	42 e0       	ldi	r20, 0x02	; 2
    10e8:	50 e4       	ldi	r21, 0x40	; 64
    10ea:	c7 01       	movw	r24, r14
    10ec:	b6 01       	movw	r22, r12
    10ee:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__mulsf3>
    10f2:	2e e6       	ldi	r18, 0x6E	; 110
    10f4:	33 ea       	ldi	r19, 0xA3	; 163
    10f6:	4b ed       	ldi	r20, 0xDB	; 219
    10f8:	50 e4       	ldi	r21, 0x40	; 64
    10fa:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__subsf3>
	return(vacuum);
    10fe:	56 2f       	mov	r21, r22
    1100:	47 2f       	mov	r20, r23
    1102:	38 2f       	mov	r19, r24
    1104:	29 2f       	mov	r18, r25
    1106:	13 c0       	rjmp	.+38     	; 0x112e <read_ionpump+0xb6>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(BADFLOAT);
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	40 e8       	ldi	r20, 0x80	; 128
    110c:	36 e2       	ldi	r19, 0x26	; 38
    110e:	24 ec       	ldi	r18, 0xC4	; 196
    1110:	0e c0       	rjmp	.+28     	; 0x112e <read_ionpump+0xb6>
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
		return(BADFLOAT);
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	40 e8       	ldi	r20, 0x80	; 128
    1116:	36 e2       	ldi	r19, 0x26	; 38
    1118:	24 ec       	ldi	r18, 0xC4	; 196
    111a:	09 c0       	rjmp	.+18     	; 0x112e <read_ionpump+0xb6>
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	40 e8       	ldi	r20, 0x80	; 128
    1120:	36 e2       	ldi	r19, 0x26	; 38
    1122:	24 ec       	ldi	r18, 0xC4	; 196
    1124:	04 c0       	rjmp	.+8      	; 0x112e <read_ionpump+0xb6>
	} else if (voltage > 2.0) {
		return(BADFLOAT);
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	40 e8       	ldi	r20, 0x80	; 128
    112a:	36 e2       	ldi	r19, 0x26	; 38
    112c:	24 ec       	ldi	r18, 0xC4	; 196
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
    112e:	65 2f       	mov	r22, r21
    1130:	74 2f       	mov	r23, r20
    1132:	83 2f       	mov	r24, r19
    1134:	92 2f       	mov	r25, r18
    1136:	24 96       	adiw	r28, 0x04	; 4
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	08 95       	ret

0000114e <init_LED>:
#include "globals.h"

void init_LED(void)
{
	PORTF.OUTSET = PIN5_bm;
    114e:	e0 ea       	ldi	r30, 0xA0	; 160
    1150:	f4 e0       	ldi	r31, 0x04	; 4
    1152:	80 e2       	ldi	r24, 0x20	; 32
    1154:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN5_bm;
    1156:	81 83       	std	Z+1, r24	; 0x01
    1158:	08 95       	ret

0000115a <main>:
uint8_t firstpass;

int main(void)
{

	firstpass = YES;		// Set to YES in commands.c
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <firstpass>
	squelchErrors = YES;
    1160:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <squelchErrors>
	initialize0();
    1164:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <initialize0>
	sei();
    1168:	78 94       	sei
	initialize1();
    116a:	0e 94 08 08 	call	0x1010	; 0x1010 <initialize1>
	squelchErrors = NO;
    116e:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <squelchErrors>

	for (;;) {
		if (recv0_buf.done) {
    1172:	80 91 20 2c 	lds	r24, 0x2C20	; 0x802c20 <recv0_buf+0x103>
    1176:	88 23       	and	r24, r24
    1178:	21 f0       	breq	.+8      	; 0x1182 <main+0x28>
			recv0_buf.done = NO;
    117a:	10 92 20 2c 	sts	0x2C20, r1	; 0x802c20 <recv0_buf+0x103>
			commands();
    117e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <commands>
		}
		if (timerOLED > timeoutOLED) {	// Display timeout
    1182:	20 91 10 2a 	lds	r18, 0x2A10	; 0x802a10 <timerOLED>
    1186:	30 91 11 2a 	lds	r19, 0x2A11	; 0x802a11 <timerOLED+0x1>
    118a:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <timeoutOLED>
    118e:	90 91 13 2a 	lds	r25, 0x2A13	; 0x802a13 <timeoutOLED+0x1>
    1192:	82 17       	cp	r24, r18
    1194:	93 07       	cpc	r25, r19
    1196:	78 f4       	brcc	.+30     	; 0x11b6 <main+0x5c>
			squelchErrors = YES;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <squelchErrors>
			clear_OLED(0);
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <clear_OLED>
			clear_OLED(1);
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <clear_OLED>
			timerOLED = 0;
    11aa:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <timerOLED>
    11ae:	10 92 11 2a 	sts	0x2A11, r1	; 0x802a11 <timerOLED+0x1>
			squelchErrors = NO;
    11b2:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <squelchErrors>
		} if ((timerSAVEENCODER > timeoutSAVEENCODER) && rebootackd) {
    11b6:	90 91 16 2a 	lds	r25, 0x2A16	; 0x802a16 <timerSAVEENCODER>
    11ba:	80 91 15 2a 	lds	r24, 0x2A15	; 0x802a15 <timeoutSAVEENCODER>
    11be:	89 17       	cp	r24, r25
    11c0:	c0 f6       	brcc	.-80     	; 0x1172 <main+0x18>
    11c2:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <rebootackd>
    11c6:	88 23       	and	r24, r24
    11c8:	a1 f2       	breq	.-88     	; 0x1172 <main+0x18>
			squelchErrors = YES;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <squelchErrors>
			saveFRAM_MOTOREncoders();
    11d0:	0e 94 34 18 	call	0x3068	; 0x3068 <saveFRAM_MOTOREncoders>
			timerSAVEENCODER = 0;
    11d4:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerSAVEENCODER>
			squelchErrors = NO;
    11d8:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <squelchErrors>
    11dc:	ca cf       	rjmp	.-108    	; 0x1172 <main+0x18>

000011de <read_MCP23008>:
	Returns:
		ERROR if TWI error
		NOERROR Otherwise
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	c8 2f       	mov	r28, r24
    11e4:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
    11ec:	83 36       	cpi	r24, 0x63	; 99
    11ee:	51 f4       	brne	.+20     	; 0x1204 <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 read error");
    11f0:	60 e3       	ldi	r22, 0x30	; 48
    11f2:	7c e8       	ldi	r23, 0x8C	; 140
    11f4:	82 e9       	ldi	r24, 0x92	; 146
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
		stop_TWI();
    11fc:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(0xFF);
    1200:	8f ef       	ldi	r24, 0xFF	; 255
    1202:	0d c0       	rjmp	.+26     	; 0x121e <read_MCP23008+0x40>
	}
	write_TWI(reg);
    1204:	8d 2f       	mov	r24, r29
    1206:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
	start_TWI(addr, TWIREAD);
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	8c 2f       	mov	r24, r28
    120e:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
	value = readlast_TWI();
    1212:	0e 94 3d 1a 	call	0x347a	; 0x347a <readlast_TWI>
    1216:	c8 2f       	mov	r28, r24
	stop_TWI();
    1218:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
	return(value);
    121c:	8c 2f       	mov	r24, r28

}
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	d6 2f       	mov	r29, r22
    122c:	14 2f       	mov	r17, r20

	uint8_t retval;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
    1234:	c8 2f       	mov	r28, r24
    1236:	83 36       	cpi	r24, 0x63	; 99
    1238:	49 f4       	brne	.+18     	; 0x124c <write_MCP23008+0x28>
		printError(ERR_MCP23008, "MCP23008 write error");
    123a:	64 e4       	ldi	r22, 0x44	; 68
    123c:	7c e8       	ldi	r23, 0x8C	; 140
    123e:	82 e9       	ldi	r24, 0x92	; 146
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
		stop_TWI();
    1246:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(ERROR);
    124a:	15 c0       	rjmp	.+42     	; 0x1276 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(reg))) {
    124c:	8d 2f       	mov	r24, r29
    124e:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
    1252:	88 23       	and	r24, r24
    1254:	21 f0       	breq	.+8      	; 0x125e <write_MCP23008+0x3a>
		stop_TWI();
    1256:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(ERROR);
    125a:	c3 e6       	ldi	r28, 0x63	; 99
    125c:	0c c0       	rjmp	.+24     	; 0x1276 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(val))) {
    125e:	81 2f       	mov	r24, r17
    1260:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
    1264:	88 23       	and	r24, r24
    1266:	21 f0       	breq	.+8      	; 0x1270 <write_MCP23008+0x4c>
		stop_TWI();
    1268:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(ERROR);
    126c:	c3 e6       	ldi	r28, 0x63	; 99
    126e:	03 c0       	rjmp	.+6      	; 0x1276 <write_MCP23008+0x52>
	}
	stop_TWI();
    1270:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
	return(NOERROR);
    1274:	c0 e0       	ldi	r28, 0x00	; 0
	
}
    1276:	8c 2f       	mov	r24, r28
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	08 95       	ret

00001280 <read_MCP9808>:
#include "errors.h"
#include "mcp9808.h"
#include "twi.h"

uint8_t read_MCP9808(float *temperature)
{
    1280:	8f 92       	push	r8
    1282:	9f 92       	push	r9
    1284:	af 92       	push	r10
    1286:	bf 92       	push	r11
    1288:	ff 92       	push	r15
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	8c 01       	movw	r16, r24

	uint8_t highbyte, lowbyte, sign;
	float temp;

	if (start_TWI(MCP9808ADDR, TWIWRITE) == ERROR) {
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	88 e1       	ldi	r24, 0x18	; 24
    1298:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
    129c:	83 36       	cpi	r24, 0x63	; 99
    129e:	51 f4       	brne	.+20     	; 0x12b4 <read_MCP9808+0x34>
		*temperature = BADFLOAT;
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	50 e8       	ldi	r21, 0x80	; 128
    12a4:	66 e2       	ldi	r22, 0x26	; 38
    12a6:	74 ec       	ldi	r23, 0xC4	; 196
    12a8:	f8 01       	movw	r30, r16
    12aa:	40 83       	st	Z, r20
    12ac:	51 83       	std	Z+1, r21	; 0x01
    12ae:	62 83       	std	Z+2, r22	; 0x02
    12b0:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    12b2:	43 c0       	rjmp	.+134    	; 0x133a <read_MCP9808+0xba>
	}
	write_TWI(TEMPREGISTER);
    12b4:	85 e0       	ldi	r24, 0x05	; 5
    12b6:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    12ba:	61 e0       	ldi	r22, 0x01	; 1
    12bc:	88 e1       	ldi	r24, 0x18	; 24
    12be:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
	highbyte = read_TWI();
    12c2:	0e 94 2d 1a 	call	0x345a	; 0x345a <read_TWI>
    12c6:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    12c8:	0e 94 3d 1a 	call	0x347a	; 0x347a <readlast_TWI>
    12cc:	d8 2f       	mov	r29, r24
	stop_TWI();
    12ce:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    12d2:	fc 2f       	mov	r31, r28
    12d4:	f0 71       	andi	r31, 0x10	; 16
    12d6:	ff 2e       	mov	r15, r31
	highbyte &= 0x0F;					// Clear threshold & sign bits
    12d8:	6c 2f       	mov	r22, r28
    12da:	6f 70       	andi	r22, 0x0F	; 15
	temp = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <__floatunsisf>
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e8       	ldi	r20, 0x80	; 128
    12ec:	51 e4       	ldi	r21, 0x41	; 65
    12ee:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__mulsf3>
    12f2:	4b 01       	movw	r8, r22
    12f4:	5c 01       	movw	r10, r24
    12f6:	6d 2f       	mov	r22, r29
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <__floatunsisf>
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e8       	ldi	r20, 0x80	; 128
    1308:	5d e3       	ldi	r21, 0x3D	; 61
    130a:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__mulsf3>
    130e:	9b 01       	movw	r18, r22
    1310:	ac 01       	movw	r20, r24
    1312:	c5 01       	movw	r24, r10
    1314:	b4 01       	movw	r22, r8
    1316:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <__addsf3>
	if (sign) {
    131a:	ff 20       	and	r15, r15
    131c:	41 f0       	breq	.+16     	; 0x132e <read_MCP9808+0xae>
		temp = 256.0 - temp;
    131e:	9b 01       	movw	r18, r22
    1320:	ac 01       	movw	r20, r24
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	80 e8       	ldi	r24, 0x80	; 128
    1328:	93 e4       	ldi	r25, 0x43	; 67
    132a:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__subsf3>
	}
	*temperature = temp;
    132e:	f8 01       	movw	r30, r16
    1330:	60 83       	st	Z, r22
    1332:	71 83       	std	Z+1, r23	; 0x01
    1334:	82 83       	std	Z+2, r24	; 0x02
    1336:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    1338:	80 e0       	ldi	r24, 0x00	; 0
}
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	1f 91       	pop	r17
    1340:	0f 91       	pop	r16
    1342:	ff 90       	pop	r15
    1344:	bf 90       	pop	r11
    1346:	af 90       	pop	r10
    1348:	9f 90       	pop	r9
    134a:	8f 90       	pop	r8
    134c:	08 95       	ret

0000134e <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    134e:	ef 92       	push	r14
    1350:	ff 92       	push	r15
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	f8 2e       	mov	r15, r24
    135c:	e6 2e       	mov	r14, r22
    135e:	ea 01       	movw	r28, r20
    1360:	02 2f       	mov	r16, r18

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
    1368:	18 2f       	mov	r17, r24
    136a:	83 36       	cpi	r24, 0x63	; 99
    136c:	19 f4       	brne	.+6      	; 0x1374 <read_MMA8451+0x26>
		stop_TWI();
    136e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(ERROR);
    1372:	23 c0       	rjmp	.+70     	; 0x13ba <read_MMA8451+0x6c>
	}
	if (write_TWI(reg) == ERROR) {
    1374:	8e 2d       	mov	r24, r14
    1376:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
    137a:	18 2f       	mov	r17, r24
    137c:	83 36       	cpi	r24, 0x63	; 99
    137e:	e9 f0       	breq	.+58     	; 0x13ba <read_MMA8451+0x6c>
		return(ERROR);
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
    1380:	61 e0       	ldi	r22, 0x01	; 1
    1382:	8f 2d       	mov	r24, r15
    1384:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
    1388:	18 2f       	mov	r17, r24
    138a:	83 36       	cpi	r24, 0x63	; 99
    138c:	69 f4       	brne	.+26     	; 0x13a8 <read_MMA8451+0x5a>
		stop_TWI();
    138e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(ERROR);
    1392:	13 c0       	rjmp	.+38     	; 0x13ba <read_MMA8451+0x6c>
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    1394:	7e 01       	movw	r14, r28
    1396:	8f ef       	ldi	r24, 0xFF	; 255
    1398:	e8 1a       	sub	r14, r24
    139a:	f8 0a       	sbc	r15, r24
    139c:	0e 94 2d 1a 	call	0x345a	; 0x345a <read_TWI>
    13a0:	88 83       	st	Y, r24
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    13a2:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    13a4:	e7 01       	movw	r28, r14
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <read_MMA8451+0x5c>
    13a8:	11 e0       	ldi	r17, 0x01	; 1
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    13aa:	10 17       	cp	r17, r16
    13ac:	98 f3       	brcs	.-26     	; 0x1394 <read_MMA8451+0x46>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    13ae:	0e 94 3d 1a 	call	0x347a	; 0x347a <readlast_TWI>
    13b2:	88 83       	st	Y, r24
	stop_TWI();
    13b4:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
	return(NOERROR);
    13b8:	10 e0       	ldi	r17, 0x00	; 0

}
    13ba:	81 2f       	mov	r24, r17
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	ff 90       	pop	r15
    13c6:	ef 90       	pop	r14
    13c8:	08 95       	ret

000013ca <get_orientation>:
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
//uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
uint8_t get_orientation(float *x, float *y, float *z)
{
    13ca:	cf 92       	push	r12
    13cc:	df 92       	push	r13
    13ce:	ef 92       	push	r14
    13d0:	ff 92       	push	r15
    13d2:	0f 93       	push	r16
    13d4:	1f 93       	push	r17
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	26 97       	sbiw	r28, 0x06	; 6
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	6c 01       	movw	r12, r24
    13e6:	7b 01       	movw	r14, r22
    13e8:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -666.0;
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	90 e8       	ldi	r25, 0x80	; 128
    13ee:	a6 e2       	ldi	r26, 0x26	; 38
    13f0:	b4 ec       	ldi	r27, 0xC4	; 196
    13f2:	fa 01       	movw	r30, r20
    13f4:	80 83       	st	Z, r24
    13f6:	91 83       	std	Z+1, r25	; 0x01
    13f8:	a2 83       	std	Z+2, r26	; 0x02
    13fa:	b3 83       	std	Z+3, r27	; 0x03
    13fc:	fb 01       	movw	r30, r22
    13fe:	80 83       	st	Z, r24
    1400:	91 83       	std	Z+1, r25	; 0x01
    1402:	a2 83       	std	Z+2, r26	; 0x02
    1404:	b3 83       	std	Z+3, r27	; 0x03
    1406:	f6 01       	movw	r30, r12
    1408:	80 83       	st	Z, r24
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	a2 83       	std	Z+2, r26	; 0x02
    140e:	b3 83       	std	Z+3, r27	; 0x03

	if (read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6) == ERROR) {
    1410:	26 e0       	ldi	r18, 0x06	; 6
    1412:	ae 01       	movw	r20, r28
    1414:	4f 5f       	subi	r20, 0xFF	; 255
    1416:	5f 4f       	sbci	r21, 0xFF	; 255
    1418:	61 e0       	ldi	r22, 0x01	; 1
    141a:	8d e1       	ldi	r24, 0x1D	; 29
    141c:	0e 94 a7 09 	call	0x134e	; 0x134e <read_MMA8451>
    1420:	83 36       	cpi	r24, 0x63	; 99
    1422:	09 f4       	brne	.+2      	; 0x1426 <get_orientation+0x5c>
    1424:	61 c0       	rjmp	.+194    	; 0x14e8 <get_orientation+0x11e>
		return(ERROR);
	}

	ix = datain[0];
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    142a:	98 2f       	mov	r25, r24
    142c:	88 27       	eor	r24, r24
	ix |= datain[1];
    142e:	2a 81       	ldd	r18, Y+2	; 0x02
    1430:	82 2b       	or	r24, r18
	ix /= 4;
    1432:	bc 01       	movw	r22, r24
    1434:	77 23       	and	r23, r23
    1436:	14 f4       	brge	.+4      	; 0x143c <get_orientation+0x72>
    1438:	6d 5f       	subi	r22, 0xFD	; 253
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	75 95       	asr	r23
    143e:	67 95       	ror	r22
    1440:	75 95       	asr	r23
    1442:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    1444:	07 2e       	mov	r0, r23
    1446:	00 0c       	add	r0, r0
    1448:	88 0b       	sbc	r24, r24
    144a:	99 0b       	sbc	r25, r25
    144c:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <__floatsisf>
    1450:	26 e6       	ldi	r18, 0x66	; 102
    1452:	36 e2       	ldi	r19, 0x26	; 38
    1454:	45 e7       	ldi	r20, 0x75	; 117
    1456:	5e e3       	ldi	r21, 0x3E	; 62
    1458:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__mulsf3>
    145c:	f6 01       	movw	r30, r12
    145e:	60 83       	st	Z, r22
    1460:	71 83       	std	Z+1, r23	; 0x01
    1462:	82 83       	std	Z+2, r24	; 0x02
    1464:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    146a:	98 2f       	mov	r25, r24
    146c:	88 27       	eor	r24, r24
	iy |= datain[3];
    146e:	2c 81       	ldd	r18, Y+4	; 0x04
    1470:	82 2b       	or	r24, r18
	iy /= 4;
    1472:	bc 01       	movw	r22, r24
    1474:	77 23       	and	r23, r23
    1476:	14 f4       	brge	.+4      	; 0x147c <get_orientation+0xb2>
    1478:	6d 5f       	subi	r22, 0xFD	; 253
    147a:	7f 4f       	sbci	r23, 0xFF	; 255
    147c:	75 95       	asr	r23
    147e:	67 95       	ror	r22
    1480:	75 95       	asr	r23
    1482:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    1484:	07 2e       	mov	r0, r23
    1486:	00 0c       	add	r0, r0
    1488:	88 0b       	sbc	r24, r24
    148a:	99 0b       	sbc	r25, r25
    148c:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <__floatsisf>
    1490:	26 e6       	ldi	r18, 0x66	; 102
    1492:	36 e2       	ldi	r19, 0x26	; 38
    1494:	45 e7       	ldi	r20, 0x75	; 117
    1496:	5e e3       	ldi	r21, 0x3E	; 62
    1498:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__mulsf3>
    149c:	f7 01       	movw	r30, r14
    149e:	60 83       	st	Z, r22
    14a0:	71 83       	std	Z+1, r23	; 0x01
    14a2:	82 83       	std	Z+2, r24	; 0x02
    14a4:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    14a6:	8d 81       	ldd	r24, Y+5	; 0x05
    14a8:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    14aa:	98 2f       	mov	r25, r24
    14ac:	88 27       	eor	r24, r24
	iz |= datain[5];
    14ae:	2e 81       	ldd	r18, Y+6	; 0x06
    14b0:	82 2b       	or	r24, r18
	iz /= 4;
    14b2:	bc 01       	movw	r22, r24
    14b4:	77 23       	and	r23, r23
    14b6:	14 f4       	brge	.+4      	; 0x14bc <get_orientation+0xf2>
    14b8:	6d 5f       	subi	r22, 0xFD	; 253
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	75 95       	asr	r23
    14be:	67 95       	ror	r22
    14c0:	75 95       	asr	r23
    14c2:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    14c4:	07 2e       	mov	r0, r23
    14c6:	00 0c       	add	r0, r0
    14c8:	88 0b       	sbc	r24, r24
    14ca:	99 0b       	sbc	r25, r25
    14cc:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <__floatsisf>
    14d0:	26 e6       	ldi	r18, 0x66	; 102
    14d2:	36 e2       	ldi	r19, 0x26	; 38
    14d4:	45 e7       	ldi	r20, 0x75	; 117
    14d6:	5e e3       	ldi	r21, 0x3E	; 62
    14d8:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__mulsf3>
    14dc:	f8 01       	movw	r30, r16
    14de:	60 83       	st	Z, r22
    14e0:	71 83       	std	Z+1, r23	; 0x01
    14e2:	82 83       	std	Z+2, r24	; 0x02
    14e4:	93 83       	std	Z+3, r25	; 0x03

	return(0);
    14e6:	80 e0       	ldi	r24, 0x00	; 0

}
    14e8:	26 96       	adiw	r28, 0x06	; 6
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	08 95       	ret

00001500 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1500:	1f 93       	push	r17
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	d6 2f       	mov	r29, r22
    1508:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
    1510:	c8 2f       	mov	r28, r24
    1512:	88 23       	and	r24, r24
    1514:	21 f0       	breq	.+8      	; 0x151e <write_MMA8451+0x1e>
		stop_TWI();
    1516:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(retval);
    151a:	8c 2f       	mov	r24, r28
    151c:	17 c0       	rjmp	.+46     	; 0x154c <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    151e:	8d 2f       	mov	r24, r29
    1520:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
    1524:	c8 2f       	mov	r28, r24
    1526:	88 23       	and	r24, r24
    1528:	21 f0       	breq	.+8      	; 0x1532 <write_MMA8451+0x32>
		stop_TWI();
    152a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(retval);
    152e:	8c 2f       	mov	r24, r28
    1530:	0d c0       	rjmp	.+26     	; 0x154c <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1532:	81 2f       	mov	r24, r17
    1534:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
    1538:	c8 2f       	mov	r28, r24
    153a:	88 23       	and	r24, r24
    153c:	21 f0       	breq	.+8      	; 0x1546 <write_MMA8451+0x46>
		stop_TWI();
    153e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
		return(retval);
    1542:	8c 2f       	mov	r24, r28
    1544:	03 c0       	rjmp	.+6      	; 0x154c <write_MMA8451+0x4c>
	}
	stop_TWI();
    1546:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>
	return(0);
    154a:	80 e0       	ldi	r24, 0x00	; 0
	
}
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	1f 91       	pop	r17
    1552:	08 95       	ret

00001554 <init_MMA8451>:
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/

uint8_t init_MMA8451(void)
{
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	1f 92       	push	r1
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    155e:	40 e4       	ldi	r20, 0x40	; 64
    1560:	6b e2       	ldi	r22, 0x2B	; 43
    1562:	8d e1       	ldi	r24, 0x1D	; 29
    1564:	0e 94 80 0a 	call	0x1500	; 0x1500 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    1568:	21 e0       	ldi	r18, 0x01	; 1
    156a:	ae 01       	movw	r20, r28
    156c:	4f 5f       	subi	r20, 0xFF	; 255
    156e:	5f 4f       	sbci	r21, 0xFF	; 255
    1570:	6b e2       	ldi	r22, 0x2B	; 43
    1572:	8d e1       	ldi	r24, 0x1D	; 29
    1574:	0e 94 a7 09 	call	0x134e	; 0x134e <read_MMA8451>
	while (retval & 0x40) {
    1578:	08 c0       	rjmp	.+16     	; 0x158a <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    157a:	21 e0       	ldi	r18, 0x01	; 1
    157c:	ae 01       	movw	r20, r28
    157e:	4f 5f       	subi	r20, 0xFF	; 255
    1580:	5f 4f       	sbci	r21, 0xFF	; 255
    1582:	6b e2       	ldi	r22, 0x2B	; 43
    1584:	8d e1       	ldi	r24, 0x1D	; 29
    1586:	0e 94 a7 09 	call	0x134e	; 0x134e <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	86 fd       	sbrc	r24, 6
    158e:	f5 cf       	rjmp	.-22     	; 0x157a <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    1590:	40 ec       	ldi	r20, 0xC0	; 192
    1592:	6f e0       	ldi	r22, 0x0F	; 15
    1594:	8d e1       	ldi	r24, 0x1D	; 29
    1596:	0e 94 80 0a 	call	0x1500	; 0x1500 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    159a:	42 e0       	ldi	r20, 0x02	; 2
    159c:	6b e2       	ldi	r22, 0x2B	; 43
    159e:	8d e1       	ldi	r24, 0x1D	; 29
    15a0:	0e 94 80 0a 	call	0x1500	; 0x1500 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    15a4:	4d e3       	ldi	r20, 0x3D	; 61
    15a6:	6a e2       	ldi	r22, 0x2A	; 42
    15a8:	8d e1       	ldi	r24, 0x1D	; 29
    15aa:	0e 94 80 0a 	call	0x1500	; 0x1500 <write_MMA8451>

	return(retval);

}
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	0f 90       	pop	r0
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	08 95       	ret

000015b8 <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	2e 97       	sbiw	r28, 0x0e	; 14
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    15d0:	88 e0       	ldi	r24, 0x08	; 8
    15d2:	e9 e5       	ldi	r30, 0x59	; 89
    15d4:	fc e8       	ldi	r31, 0x8C	; 140
    15d6:	de 01       	movw	r26, r28
    15d8:	11 96       	adiw	r26, 0x01	; 1
    15da:	01 90       	ld	r0, Z+
    15dc:	0d 92       	st	X+, r0
    15de:	8a 95       	dec	r24
    15e0:	e1 f7       	brne	.-8      	; 0x15da <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    15e2:	f8 01       	movw	r30, r16
    15e4:	01 90       	ld	r0, Z+
    15e6:	00 20       	and	r0, r0
    15e8:	e9 f7       	brne	.-6      	; 0x15e4 <checksum_NMEA+0x2c>
    15ea:	31 97       	sbiw	r30, 0x01	; 1
    15ec:	3e 2f       	mov	r19, r30
    15ee:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    15f0:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	06 c0       	rjmp	.+12     	; 0x1602 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    15f6:	f8 01       	movw	r30, r16
    15f8:	e8 0f       	add	r30, r24
    15fa:	f1 1d       	adc	r31, r1
    15fc:	20 81       	ld	r18, Z
    15fe:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1600:	8f 5f       	subi	r24, 0xFF	; 255
    1602:	83 17       	cp	r24, r19
    1604:	c0 f3       	brcs	.-16     	; 0x15f6 <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1606:	1f 92       	push	r1
    1608:	9f 93       	push	r25
    160a:	ce 01       	movw	r24, r28
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	9f 93       	push	r25
    1610:	8f 93       	push	r24
    1612:	7e 01       	movw	r14, r28
    1614:	89 e0       	ldi	r24, 0x09	; 9
    1616:	e8 0e       	add	r14, r24
    1618:	f1 1c       	adc	r15, r1
    161a:	ff 92       	push	r15
    161c:	ef 92       	push	r14
    161e:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
	strcat(str, chksum);
    1622:	b7 01       	movw	r22, r14
    1624:	c8 01       	movw	r24, r16
    1626:	0e 94 8a 24 	call	0x4914	; 0x4914 <strcat>

}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	2e 96       	adiw	r28, 0x0e	; 14
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	ff 90       	pop	r15
    1646:	ef 90       	pop	r14
    1648:	08 95       	ret

0000164a <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	d6 2f       	mov	r29, r22
    1650:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	0e 94 4a 1a 	call	0x3494	; 0x3494 <start_TWI>
	write_TWI(type);
    1658:	8d 2f       	mov	r24, r29
    165a:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
	write_TWI(byteToSend);
    165e:	8c 2f       	mov	r24, r28
    1660:	0e 94 8f 1a 	call	0x351e	; 0x351e <write_TWI>
	stop_TWI();
    1664:	0e 94 8b 1a 	call	0x3516	; 0x3516 <stop_TWI>

}
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	08 95       	ret

0000166e <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
    166e:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    1670:	e0 e6       	ldi	r30, 0x60	; 96
    1672:	f4 e0       	ldi	r31, 0x04	; 4
    1674:	90 e4       	ldi	r25, 0x40	; 64
    1676:	96 83       	std	Z+6, r25	; 0x06
	PORTD.DIRSET = PIN6_bm;
    1678:	91 83       	std	Z+1, r25	; 0x01
    167a:	a1 e4       	ldi	r26, 0x41	; 65
    167c:	b3 e0       	ldi	r27, 0x03	; 3
    167e:	11 97       	sbiw	r26, 0x01	; 1
    1680:	f1 f7       	brne	.-4      	; 0x167e <init_OLED+0x10>
    1682:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    1684:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
    1686:	81 11       	cpse	r24, r1
    1688:	02 c0       	rjmp	.+4      	; 0x168e <init_OLED+0x20>
		twiaddr = OLEDADDR0;
    168a:	cc e3       	ldi	r28, 0x3C	; 60
    168c:	01 c0       	rjmp	.+2      	; 0x1690 <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
    168e:	cd e3       	ldi	r28, 0x3D	; 61
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    1690:	4a e2       	ldi	r20, 0x2A	; 42
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	8c 2f       	mov	r24, r28
    1696:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    169a:	41 e7       	ldi	r20, 0x71	; 113
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	8c 2f       	mov	r24, r28
    16a0:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    16a4:	4c e5       	ldi	r20, 0x5C	; 92
    16a6:	60 e4       	ldi	r22, 0x40	; 64
    16a8:	8c 2f       	mov	r24, r28
    16aa:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    16ae:	48 e2       	ldi	r20, 0x28	; 40
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	8c 2f       	mov	r24, r28
    16b4:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    16b8:	48 e0       	ldi	r20, 0x08	; 8
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	8c 2f       	mov	r24, r28
    16be:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    16c2:	4a e2       	ldi	r20, 0x2A	; 42
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	8c 2f       	mov	r24, r28
    16c8:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    16cc:	49 e7       	ldi	r20, 0x79	; 121
    16ce:	60 e0       	ldi	r22, 0x00	; 0
    16d0:	8c 2f       	mov	r24, r28
    16d2:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    16d6:	45 ed       	ldi	r20, 0xD5	; 213
    16d8:	60 e0       	ldi	r22, 0x00	; 0
    16da:	8c 2f       	mov	r24, r28
    16dc:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    16e0:	40 e7       	ldi	r20, 0x70	; 112
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	8c 2f       	mov	r24, r28
    16e6:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    16ea:	48 e7       	ldi	r20, 0x78	; 120
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	8c 2f       	mov	r24, r28
    16f0:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    16f4:	48 e0       	ldi	r20, 0x08	; 8
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	8c 2f       	mov	r24, r28
    16fa:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    16fe:	46 e0       	ldi	r20, 0x06	; 6
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	8c 2f       	mov	r24, r28
    1704:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1708:	42 e7       	ldi	r20, 0x72	; 114
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	8c 2f       	mov	r24, r28
    170e:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	60 e4       	ldi	r22, 0x40	; 64
    1716:	8c 2f       	mov	r24, r28
    1718:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    171c:	4a e2       	ldi	r20, 0x2A	; 42
    171e:	60 e0       	ldi	r22, 0x00	; 0
    1720:	8c 2f       	mov	r24, r28
    1722:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1726:	49 e7       	ldi	r20, 0x79	; 121
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	8c 2f       	mov	r24, r28
    172c:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    1730:	4a ed       	ldi	r20, 0xDA	; 218
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	8c 2f       	mov	r24, r28
    1736:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    173a:	40 e0       	ldi	r20, 0x00	; 0
    173c:	60 e0       	ldi	r22, 0x00	; 0
    173e:	8c 2f       	mov	r24, r28
    1740:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    1744:	4c ed       	ldi	r20, 0xDC	; 220
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	8c 2f       	mov	r24, r28
    174a:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	8c 2f       	mov	r24, r28
    1754:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    1758:	41 e8       	ldi	r20, 0x81	; 129
    175a:	60 e0       	ldi	r22, 0x00	; 0
    175c:	8c 2f       	mov	r24, r28
    175e:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    1762:	4f e7       	ldi	r20, 0x7F	; 127
    1764:	60 e0       	ldi	r22, 0x00	; 0
    1766:	8c 2f       	mov	r24, r28
    1768:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    176c:	49 ed       	ldi	r20, 0xD9	; 217
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	8c 2f       	mov	r24, r28
    1772:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    1776:	41 ef       	ldi	r20, 0xF1	; 241
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	8c 2f       	mov	r24, r28
    177c:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    1780:	4b ed       	ldi	r20, 0xDB	; 219
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	8c 2f       	mov	r24, r28
    1786:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    178a:	40 e4       	ldi	r20, 0x40	; 64
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	8c 2f       	mov	r24, r28
    1790:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1794:	48 e7       	ldi	r20, 0x78	; 120
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	8c 2f       	mov	r24, r28
    179a:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    179e:	48 e2       	ldi	r20, 0x28	; 40
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	8c 2f       	mov	r24, r28
    17a4:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    17a8:	41 e0       	ldi	r20, 0x01	; 1
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	8c 2f       	mov	r24, r28
    17ae:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    17b2:	40 e8       	ldi	r20, 0x80	; 128
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	8c 2f       	mov	r24, r28
    17b8:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    17bc:	4c e0       	ldi	r20, 0x0C	; 12
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	8c 2f       	mov	r24, r28
    17c2:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
    17c6:	ba e6       	ldi	r27, 0x6A	; 106
    17c8:	24 e0       	ldi	r18, 0x04	; 4
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	b1 50       	subi	r27, 0x01	; 1
    17ce:	20 40       	sbci	r18, 0x00	; 0
    17d0:	80 40       	sbci	r24, 0x00	; 0
    17d2:	e1 f7       	brne	.-8      	; 0x17cc <init_OLED+0x15e>
    17d4:	00 c0       	rjmp	.+0      	; 0x17d6 <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
    17d6:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <timerOLED>
    17da:	10 92 11 2a 	sts	0x2A11, r1	; 0x802a11 <timerOLED+0x1>
	timeoutOLED = 5;
    17de:	85 e0       	ldi	r24, 0x05	; 5
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	80 93 12 2a 	sts	0x2A12, r24	; 0x802a12 <timeoutOLED>
    17e6:	90 93 13 2a 	sts	0x2A13, r25	; 0x802a13 <timeoutOLED+0x1>

}
    17ea:	cf 91       	pop	r28
    17ec:	08 95       	ret

000017ee <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    17ee:	ef 92       	push	r14
    17f0:	ff 92       	push	r15
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	e2 97       	sbiw	r28, 0x32	; 50
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    1806:	91 e1       	ldi	r25, 0x11	; 17
    1808:	e1 e6       	ldi	r30, 0x61	; 97
    180a:	fc e8       	ldi	r31, 0x8C	; 140
    180c:	de 01       	movw	r26, r28
    180e:	92 96       	adiw	r26, 0x22	; 34
    1810:	01 90       	ld	r0, Z+
    1812:	0d 92       	st	X+, r0
    1814:	9a 95       	dec	r25
    1816:	e1 f7       	brne	.-8      	; 0x1810 <__DATA_REGION_LENGTH__+0x10>

	if (displaynumber == 0) {
    1818:	81 11       	cpse	r24, r1
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <__DATA_REGION_LENGTH__+0x20>
		twiaddr = OLEDADDR0;
    181c:	0c e3       	ldi	r16, 0x3C	; 60
    181e:	01 c0       	rjmp	.+2      	; 0x1822 <__DATA_REGION_LENGTH__+0x22>
	} else {
		twiaddr = OLEDADDR1;
    1820:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    1822:	ce 01       	movw	r24, r28
    1824:	01 96       	adiw	r24, 0x01	; 1
    1826:	7c 01       	movw	r14, r24
    1828:	0e 94 95 24 	call	0x492a	; 0x492a <strcpy>
	if (strlen(strbuf) > 16) {
    182c:	f7 01       	movw	r30, r14
    182e:	01 90       	ld	r0, Z+
    1830:	00 20       	and	r0, r0
    1832:	e9 f7       	brne	.-6      	; 0x182e <__DATA_REGION_LENGTH__+0x2e>
    1834:	31 97       	sbiw	r30, 0x01	; 1
    1836:	ee 19       	sub	r30, r14
    1838:	ff 09       	sbc	r31, r15
    183a:	71 97       	sbiw	r30, 0x11	; 17
    183c:	08 f0       	brcs	.+2      	; 0x1840 <__DATA_REGION_LENGTH__+0x40>
		strbuf[16] = '\0';
    183e:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1840:	be 01       	movw	r22, r28
    1842:	6e 5d       	subi	r22, 0xDE	; 222
    1844:	7f 4f       	sbci	r23, 0xFF	; 255
    1846:	ce 01       	movw	r24, r28
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	0e 94 8a 24 	call	0x4914	; 0x4914 <strcat>

	if (lineno == 1) {
    184e:	11 30       	cpi	r17, 0x01	; 1
    1850:	39 f4       	brne	.+14     	; 0x1860 <__DATA_REGION_LENGTH__+0x60>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    1852:	40 e8       	ldi	r20, 0x80	; 128
    1854:	60 e0       	ldi	r22, 0x00	; 0
    1856:	80 2f       	mov	r24, r16
    1858:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    185c:	10 e0       	ldi	r17, 0x00	; 0
    185e:	12 c0       	rjmp	.+36     	; 0x1884 <__DATA_REGION_LENGTH__+0x84>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1860:	40 ec       	ldi	r20, 0xC0	; 192
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	80 2f       	mov	r24, r16
    1866:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>
    186a:	f8 cf       	rjmp	.-16     	; 0x185c <__DATA_REGION_LENGTH__+0x5c>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    186c:	e1 e0       	ldi	r30, 0x01	; 1
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	ec 0f       	add	r30, r28
    1872:	fd 1f       	adc	r31, r29
    1874:	e1 0f       	add	r30, r17
    1876:	f1 1d       	adc	r31, r1
    1878:	40 81       	ld	r20, Z
    187a:	60 e4       	ldi	r22, 0x40	; 64
    187c:	80 2f       	mov	r24, r16
    187e:	0e 94 25 0b 	call	0x164a	; 0x164a <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    1882:	1f 5f       	subi	r17, 0xFF	; 255
    1884:	10 31       	cpi	r17, 0x10	; 16
    1886:	90 f3       	brcs	.-28     	; 0x186c <__DATA_REGION_LENGTH__+0x6c>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <timerOLED>
    1890:	90 93 11 2a 	sts	0x2A11, r25	; 0x802a11 <timerOLED+0x1>

}
    1894:	e2 96       	adiw	r28, 0x32	; 50
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	08 95       	ret

000018a8 <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	1f 92       	push	r1
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	18 2f       	mov	r17, r24

	char nullstr[] = "";
    18b6:	19 82       	std	Y+1, r1	; 0x01
	writestr_OLED(displaynumber, nullstr, 1);
    18b8:	41 e0       	ldi	r20, 0x01	; 1
    18ba:	be 01       	movw	r22, r28
    18bc:	6f 5f       	subi	r22, 0xFF	; 255
    18be:	7f 4f       	sbci	r23, 0xFF	; 255
    18c0:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
    18c4:	42 e0       	ldi	r20, 0x02	; 2
    18c6:	be 01       	movw	r22, r28
    18c8:	6f 5f       	subi	r22, 0xFF	; 255
    18ca:	7f 4f       	sbci	r23, 0xFF	; 255
    18cc:	81 2f       	mov	r24, r17
    18ce:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
	timerOLED = 0;
    18d2:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <timerOLED>
    18d6:	10 92 11 2a 	sts	0x2A11, r1	; 0x802a11 <timerOLED+0x1>

}
    18da:	0f 90       	pop	r0
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	08 95       	ret

000018e4 <init_PNEU>:
*/

uint8_t init_PNEU(void)
{

	if (write_MCP23008(HIGHCURRENT, IODIR, 0x00) == ERROR) {
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	60 e0       	ldi	r22, 0x00	; 0
    18e8:	84 e2       	ldi	r24, 0x24	; 36
    18ea:	0e 94 12 09 	call	0x1224	; 0x1224 <write_MCP23008>
    18ee:	83 36       	cpi	r24, 0x63	; 99
    18f0:	a9 f1       	breq	.+106    	; 0x195c <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(HIGHCURRENT, OLAT, 0x00) == ERROR) {
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	6a e0       	ldi	r22, 0x0A	; 10
    18f6:	84 e2       	ldi	r24, 0x24	; 36
    18f8:	0e 94 12 09 	call	0x1224	; 0x1224 <write_MCP23008>
    18fc:	83 36       	cpi	r24, 0x63	; 99
    18fe:	71 f1       	breq	.+92     	; 0x195c <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IODIR, 0xFE) == ERROR) {	// Inputs
    1900:	4e ef       	ldi	r20, 0xFE	; 254
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	81 e2       	ldi	r24, 0x21	; 33
    1906:	0e 94 12 09 	call	0x1224	; 0x1224 <write_MCP23008>
    190a:	83 36       	cpi	r24, 0x63	; 99
    190c:	39 f1       	breq	.+78     	; 0x195c <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IPOL, 0x00) == ERROR) {
    190e:	40 e0       	ldi	r20, 0x00	; 0
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	81 e2       	ldi	r24, 0x21	; 33
    1914:	0e 94 12 09 	call	0x1224	; 0x1224 <write_MCP23008>
    1918:	83 36       	cpi	r24, 0x63	; 99
    191a:	01 f1       	breq	.+64     	; 0x195c <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100) == ERROR) {
    191c:	4c ef       	ldi	r20, 0xFC	; 252
    191e:	62 e0       	ldi	r22, 0x02	; 2
    1920:	81 e2       	ldi	r24, 0x21	; 33
    1922:	0e 94 12 09 	call	0x1224	; 0x1224 <write_MCP23008>
    1926:	83 36       	cpi	r24, 0x63	; 99
    1928:	c9 f0       	breq	.+50     	; 0x195c <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, INTCON, 0x00) == ERROR) {
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	64 e0       	ldi	r22, 0x04	; 4
    192e:	81 e2       	ldi	r24, 0x21	; 33
    1930:	0e 94 12 09 	call	0x1224	; 0x1224 <write_MCP23008>
    1934:	83 36       	cpi	r24, 0x63	; 99
    1936:	91 f0       	breq	.+36     	; 0x195c <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IOCON, 0x20) == ERROR) { // Don't increment addr
    1938:	40 e2       	ldi	r20, 0x20	; 32
    193a:	65 e0       	ldi	r22, 0x05	; 5
    193c:	81 e2       	ldi	r24, 0x21	; 33
    193e:	0e 94 12 09 	call	0x1224	; 0x1224 <write_MCP23008>
    1942:	83 36       	cpi	r24, 0x63	; 99
    1944:	59 f0       	breq	.+22     	; 0x195c <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPPU, 0x7F) == ERROR) { // Pullups (not really needed)
    1946:	4f e7       	ldi	r20, 0x7F	; 127
    1948:	66 e0       	ldi	r22, 0x06	; 6
    194a:	81 e2       	ldi	r24, 0x21	; 33
    194c:	0e 94 12 09 	call	0x1224	; 0x1224 <write_MCP23008>
    1950:	83 36       	cpi	r24, 0x63	; 99
    1952:	21 f0       	breq	.+8      	; 0x195c <init_PNEU+0x78>
		return(ERROR);
	}
	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    1954:	89 e0       	ldi	r24, 0x09	; 9
    1956:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	return(NOERROR);
    195a:	80 e0       	ldi	r24, 0x00	; 0

}
    195c:	08 95       	ret

0000195e <read_PNEUSensors>:
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
{
    195e:	cf 92       	push	r12
    1960:	df 92       	push	r13
    1962:	ef 92       	push	r14
    1964:	ff 92       	push	r15
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	6c 01       	movw	r12, r24
    1970:	8b 01       	movw	r16, r22
    1972:	7a 01       	movw	r14, r20
    1974:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);	// NEEDS ERRORCHECK
    1976:	69 e0       	ldi	r22, 0x09	; 9
    1978:	81 e2       	ldi	r24, 0x21	; 33
    197a:	0e 94 ef 08 	call	0x11de	; 0x11de <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    197e:	98 2f       	mov	r25, r24
    1980:	92 95       	swap	r25
    1982:	96 95       	lsr	r25
    1984:	96 95       	lsr	r25
    1986:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    1988:	91 30       	cpi	r25, 0x01	; 1
    198a:	21 f4       	brne	.+8      	; 0x1994 <read_PNEUSensors+0x36>
		*shutter = 'c';
    198c:	93 e6       	ldi	r25, 0x63	; 99
    198e:	f6 01       	movw	r30, r12
    1990:	90 83       	st	Z, r25
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <read_PNEUSensors+0x54>
	} else if (state == 2) {
    1994:	92 30       	cpi	r25, 0x02	; 2
    1996:	21 f4       	brne	.+8      	; 0x19a0 <read_PNEUSensors+0x42>
		*shutter = 'o';
    1998:	9f e6       	ldi	r25, 0x6F	; 111
    199a:	f6 01       	movw	r30, r12
    199c:	90 83       	st	Z, r25
    199e:	09 c0       	rjmp	.+18     	; 0x19b2 <read_PNEUSensors+0x54>
	} else if (state == 3) {
    19a0:	93 30       	cpi	r25, 0x03	; 3
    19a2:	21 f4       	brne	.+8      	; 0x19ac <read_PNEUSensors+0x4e>
		*shutter = 't';
    19a4:	94 e7       	ldi	r25, 0x74	; 116
    19a6:	f6 01       	movw	r30, r12
    19a8:	90 83       	st	Z, r25
    19aa:	03 c0       	rjmp	.+6      	; 0x19b2 <read_PNEUSensors+0x54>
	} else {
		*shutter = 'x';
    19ac:	98 e7       	ldi	r25, 0x78	; 120
    19ae:	f6 01       	movw	r30, r12
    19b0:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    19b2:	98 2f       	mov	r25, r24
    19b4:	96 95       	lsr	r25
    19b6:	96 95       	lsr	r25
	state &= 0b00000011;
    19b8:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    19ba:	91 30       	cpi	r25, 0x01	; 1
    19bc:	21 f4       	brne	.+8      	; 0x19c6 <read_PNEUSensors+0x68>
		*right = 'c';
    19be:	93 e6       	ldi	r25, 0x63	; 99
    19c0:	f7 01       	movw	r30, r14
    19c2:	90 83       	st	Z, r25
    19c4:	0f c0       	rjmp	.+30     	; 0x19e4 <read_PNEUSensors+0x86>
	} else if (state == 2) {
    19c6:	92 30       	cpi	r25, 0x02	; 2
    19c8:	21 f4       	brne	.+8      	; 0x19d2 <read_PNEUSensors+0x74>
		*right = 'o';
    19ca:	9f e6       	ldi	r25, 0x6F	; 111
    19cc:	f7 01       	movw	r30, r14
    19ce:	90 83       	st	Z, r25
    19d0:	09 c0       	rjmp	.+18     	; 0x19e4 <read_PNEUSensors+0x86>
	} else if (state == 3) {
    19d2:	93 30       	cpi	r25, 0x03	; 3
    19d4:	21 f4       	brne	.+8      	; 0x19de <read_PNEUSensors+0x80>
		*right = 't';
    19d6:	94 e7       	ldi	r25, 0x74	; 116
    19d8:	f7 01       	movw	r30, r14
    19da:	90 83       	st	Z, r25
    19dc:	03 c0       	rjmp	.+6      	; 0x19e4 <read_PNEUSensors+0x86>
	} else {
		*right = 'x';
    19de:	98 e7       	ldi	r25, 0x78	; 120
    19e0:	f7 01       	movw	r30, r14
    19e2:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    19e4:	98 2f       	mov	r25, r24
    19e6:	92 95       	swap	r25
    19e8:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    19ea:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    19ec:	91 30       	cpi	r25, 0x01	; 1
    19ee:	21 f4       	brne	.+8      	; 0x19f8 <read_PNEUSensors+0x9a>
		*left = 'o';
    19f0:	9f e6       	ldi	r25, 0x6F	; 111
    19f2:	f8 01       	movw	r30, r16
    19f4:	90 83       	st	Z, r25
    19f6:	0f c0       	rjmp	.+30     	; 0x1a16 <read_PNEUSensors+0xb8>
	} else if (state == 2) {
    19f8:	92 30       	cpi	r25, 0x02	; 2
    19fa:	21 f4       	brne	.+8      	; 0x1a04 <read_PNEUSensors+0xa6>
		*left = 'c';
    19fc:	93 e6       	ldi	r25, 0x63	; 99
    19fe:	f8 01       	movw	r30, r16
    1a00:	90 83       	st	Z, r25
    1a02:	09 c0       	rjmp	.+18     	; 0x1a16 <read_PNEUSensors+0xb8>
	} else if (state == 3) {
    1a04:	93 30       	cpi	r25, 0x03	; 3
    1a06:	21 f4       	brne	.+8      	; 0x1a10 <read_PNEUSensors+0xb2>
		*left = 't';
    1a08:	94 e7       	ldi	r25, 0x74	; 116
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	90 83       	st	Z, r25
    1a0e:	03 c0       	rjmp	.+6      	; 0x1a16 <read_PNEUSensors+0xb8>
	} else {
		*left = 'x';
    1a10:	98 e7       	ldi	r25, 0x78	; 120
    1a12:	f8 01       	movw	r30, r16
    1a14:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1a16:	81 ff       	sbrs	r24, 1
    1a18:	03 c0       	rjmp	.+6      	; 0x1a20 <read_PNEUSensors+0xc2>
		*air = '0';
    1a1a:	80 e3       	ldi	r24, 0x30	; 48
    1a1c:	88 83       	st	Y, r24
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <read_PNEUSensors+0xc6>
	} else {
		*air = '1';
    1a20:	81 e3       	ldi	r24, 0x31	; 49
    1a22:	88 83       	st	Y, r24
	}
}
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	ff 90       	pop	r15
    1a2e:	ef 90       	pop	r14
    1a30:	df 90       	pop	r13
    1a32:	cf 90       	pop	r12
    1a34:	08 95       	ret

00001a36 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	d8 2f       	mov	r29, r24
    1a3c:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    1a3e:	69 e0       	ldi	r22, 0x09	; 9
    1a40:	84 e2       	ldi	r24, 0x24	; 36
    1a42:	0e 94 ef 08 	call	0x11de	; 0x11de <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    1a46:	8d 2b       	or	r24, r29
    1a48:	48 2f       	mov	r20, r24
    1a4a:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1a4c:	6a e0       	ldi	r22, 0x0A	; 10
    1a4e:	84 e2       	ldi	r24, 0x24	; 36
    1a50:	0e 94 12 09 	call	0x1224	; 0x1224 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	08 95       	ret

00001a5a <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(uint8_t cstack)
{
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	6a 97       	sbiw	r28, 0x1a	; 26
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    1a68:	99 e0       	ldi	r25, 0x09	; 9
    1a6a:	ec ea       	ldi	r30, 0xAC	; 172
    1a6c:	fc e8       	ldi	r31, 0x8C	; 140
    1a6e:	de 01       	movw	r26, r28
    1a70:	11 96       	adiw	r26, 0x01	; 1
    1a72:	01 90       	ld	r0, Z+
    1a74:	0d 92       	st	X+, r0
    1a76:	9a 95       	dec	r25
    1a78:	e1 f7       	brne	.-8      	; 0x1a72 <close_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1a7a:	24 e3       	ldi	r18, 0x34	; 52
    1a7c:	82 9f       	mul	r24, r18
    1a7e:	c0 01       	movw	r24, r0
    1a80:	11 24       	eor	r1, r1
    1a82:	fc 01       	movw	r30, r24
    1a84:	e8 5f       	subi	r30, 0xF8	; 248
    1a86:	f7 4d       	sbci	r31, 0xD7	; 215
    1a88:	81 81       	ldd	r24, Z+1	; 0x01
    1a8a:	8c 36       	cpi	r24, 0x6C	; 108
    1a8c:	31 f1       	breq	.+76     	; 0x1ada <close_PNEU+0x80>
    1a8e:	18 f4       	brcc	.+6      	; 0x1a96 <close_PNEU+0x3c>
    1a90:	82 36       	cpi	r24, 0x62	; 98
    1a92:	39 f0       	breq	.+14     	; 0x1aa2 <close_PNEU+0x48>
    1a94:	6a c0       	rjmp	.+212    	; 0x1b6a <close_PNEU+0x110>
    1a96:	82 37       	cpi	r24, 0x72	; 114
    1a98:	c1 f1       	breq	.+112    	; 0x1b0a <close_PNEU+0xb0>
    1a9a:	83 37       	cpi	r24, 0x73	; 115
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <close_PNEU+0x46>
    1a9e:	4d c0       	rjmp	.+154    	; 0x1b3a <close_PNEU+0xe0>
    1aa0:	64 c0       	rjmp	.+200    	; 0x1b6a <close_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1aa2:	6a ee       	ldi	r22, 0xEA	; 234
    1aa4:	84 e4       	ldi	r24, 0x44	; 68
    1aa6:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1aaa:	66 ee       	ldi	r22, 0xE6	; 230
    1aac:	88 e8       	ldi	r24, 0x88	; 136
    1aae:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1ab2:	82 e7       	ldi	r24, 0x72	; 114
    1ab4:	9c e8       	ldi	r25, 0x8C	; 140
    1ab6:	9f 93       	push	r25
    1ab8:	8f 93       	push	r24
    1aba:	ce 01       	movw	r24, r28
    1abc:	01 96       	adiw	r24, 0x01	; 1
    1abe:	9f 93       	push	r25
    1ac0:	8f 93       	push	r24
    1ac2:	09 96       	adiw	r24, 0x09	; 9
    1ac4:	9f 93       	push	r25
    1ac6:	8f 93       	push	r24
    1ac8:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
			break;
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	59 c0       	rjmp	.+178    	; 0x1b8c <close_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1ada:	6a ee       	ldi	r22, 0xEA	; 234
    1adc:	84 e4       	ldi	r24, 0x44	; 68
    1ade:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1ae2:	87 e7       	ldi	r24, 0x77	; 119
    1ae4:	9c e8       	ldi	r25, 0x8C	; 140
    1ae6:	9f 93       	push	r25
    1ae8:	8f 93       	push	r24
    1aea:	ce 01       	movw	r24, r28
    1aec:	01 96       	adiw	r24, 0x01	; 1
    1aee:	9f 93       	push	r25
    1af0:	8f 93       	push	r24
    1af2:	09 96       	adiw	r24, 0x09	; 9
    1af4:	9f 93       	push	r25
    1af6:	8f 93       	push	r24
    1af8:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
			break;
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	41 c0       	rjmp	.+130    	; 0x1b8c <close_PNEU+0x132>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1b0a:	66 ee       	ldi	r22, 0xE6	; 230
    1b0c:	88 e8       	ldi	r24, 0x88	; 136
    1b0e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1b12:	8c e7       	ldi	r24, 0x7C	; 124
    1b14:	9c e8       	ldi	r25, 0x8C	; 140
    1b16:	9f 93       	push	r25
    1b18:	8f 93       	push	r24
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	01 96       	adiw	r24, 0x01	; 1
    1b1e:	9f 93       	push	r25
    1b20:	8f 93       	push	r24
    1b22:	09 96       	adiw	r24, 0x09	; 9
    1b24:	9f 93       	push	r25
    1b26:	8f 93       	push	r24
    1b28:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
			break;
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	29 c0       	rjmp	.+82     	; 0x1b8c <close_PNEU+0x132>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1b3a:	6c ee       	ldi	r22, 0xEC	; 236
    1b3c:	82 e2       	ldi	r24, 0x22	; 34
    1b3e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1b42:	82 e8       	ldi	r24, 0x82	; 130
    1b44:	9c e8       	ldi	r25, 0x8C	; 140
    1b46:	9f 93       	push	r25
    1b48:	8f 93       	push	r24
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	9f 93       	push	r25
    1b50:	8f 93       	push	r24
    1b52:	09 96       	adiw	r24, 0x09	; 9
    1b54:	9f 93       	push	r25
    1b56:	8f 93       	push	r24
    1b58:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
			break;
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	11 c0       	rjmp	.+34     	; 0x1b8c <close_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "close_PNEU bad object");
    1b6a:	6a e8       	ldi	r22, 0x8A	; 138
    1b6c:	7c e8       	ldi	r23, 0x8C	; 140
    1b6e:	85 ef       	ldi	r24, 0xF5	; 245
    1b70:	91 e0       	ldi	r25, 0x01	; 1
    1b72:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
			strcpy(outbuf, "close what?");
    1b76:	8c e0       	ldi	r24, 0x0C	; 12
    1b78:	e0 ea       	ldi	r30, 0xA0	; 160
    1b7a:	fc e8       	ldi	r31, 0x8C	; 140
    1b7c:	de 01       	movw	r26, r28
    1b7e:	1a 96       	adiw	r26, 0x0a	; 10
    1b80:	01 90       	ld	r0, Z+
    1b82:	0d 92       	st	X+, r0
    1b84:	8a 95       	dec	r24
    1b86:	e1 f7       	brne	.-8      	; 0x1b80 <close_PNEU+0x126>
			return(ERROR);
    1b88:	83 e6       	ldi	r24, 0x63	; 99
    1b8a:	0b c0       	rjmp	.+22     	; 0x1ba2 <close_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1b92:	41 e0       	ldi	r20, 0x01	; 1
    1b94:	be 01       	movw	r22, r28
    1b96:	66 5f       	subi	r22, 0xF6	; 246
    1b98:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
	return(NOERROR);
    1ba0:	80 e0       	ldi	r24, 0x00	; 0

}
    1ba2:	6a 96       	adiw	r28, 0x1a	; 26
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	08 95       	ret

00001bae <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(uint8_t cstack)
{
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	69 97       	sbiw	r28, 0x19	; 25
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	de bf       	out	0x3e, r29	; 62

	const char dformat_OPE[] = "Open %s";
    1bbc:	98 e0       	ldi	r25, 0x08	; 8
    1bbe:	e5 ed       	ldi	r30, 0xD5	; 213
    1bc0:	fc e8       	ldi	r31, 0x8C	; 140
    1bc2:	de 01       	movw	r26, r28
    1bc4:	11 96       	adiw	r26, 0x01	; 1
    1bc6:	01 90       	ld	r0, Z+
    1bc8:	0d 92       	st	X+, r0
    1bca:	9a 95       	dec	r25
    1bcc:	e1 f7       	brne	.-8      	; 0x1bc6 <open_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1bce:	24 e3       	ldi	r18, 0x34	; 52
    1bd0:	82 9f       	mul	r24, r18
    1bd2:	c0 01       	movw	r24, r0
    1bd4:	11 24       	eor	r1, r1
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	e8 5f       	subi	r30, 0xF8	; 248
    1bda:	f7 4d       	sbci	r31, 0xD7	; 215
    1bdc:	81 81       	ldd	r24, Z+1	; 0x01
    1bde:	8c 36       	cpi	r24, 0x6C	; 108
    1be0:	31 f1       	breq	.+76     	; 0x1c2e <open_PNEU+0x80>
    1be2:	18 f4       	brcc	.+6      	; 0x1bea <open_PNEU+0x3c>
    1be4:	82 36       	cpi	r24, 0x62	; 98
    1be6:	39 f0       	breq	.+14     	; 0x1bf6 <open_PNEU+0x48>
    1be8:	6a c0       	rjmp	.+212    	; 0x1cbe <open_PNEU+0x110>
    1bea:	82 37       	cpi	r24, 0x72	; 114
    1bec:	c1 f1       	breq	.+112    	; 0x1c5e <open_PNEU+0xb0>
    1bee:	83 37       	cpi	r24, 0x73	; 115
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <open_PNEU+0x46>
    1bf2:	4d c0       	rjmp	.+154    	; 0x1c8e <open_PNEU+0xe0>
    1bf4:	64 c0       	rjmp	.+200    	; 0x1cbe <open_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1bf6:	6e ea       	ldi	r22, 0xAE	; 174
    1bf8:	84 e4       	ldi	r24, 0x44	; 68
    1bfa:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1bfe:	6e e6       	ldi	r22, 0x6E	; 110
    1c00:	88 e8       	ldi	r24, 0x88	; 136
    1c02:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1c06:	82 e7       	ldi	r24, 0x72	; 114
    1c08:	9c e8       	ldi	r25, 0x8C	; 140
    1c0a:	9f 93       	push	r25
    1c0c:	8f 93       	push	r24
    1c0e:	ce 01       	movw	r24, r28
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	9f 93       	push	r25
    1c14:	8f 93       	push	r24
    1c16:	08 96       	adiw	r24, 0x08	; 8
    1c18:	9f 93       	push	r25
    1c1a:	8f 93       	push	r24
    1c1c:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
			break;
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	59 c0       	rjmp	.+178    	; 0x1ce0 <open_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1c2e:	6e ea       	ldi	r22, 0xAE	; 174
    1c30:	84 e4       	ldi	r24, 0x44	; 68
    1c32:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1c36:	87 e7       	ldi	r24, 0x77	; 119
    1c38:	9c e8       	ldi	r25, 0x8C	; 140
    1c3a:	9f 93       	push	r25
    1c3c:	8f 93       	push	r24
    1c3e:	ce 01       	movw	r24, r28
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	9f 93       	push	r25
    1c44:	8f 93       	push	r24
    1c46:	08 96       	adiw	r24, 0x08	; 8
    1c48:	9f 93       	push	r25
    1c4a:	8f 93       	push	r24
    1c4c:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
			break;
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	41 c0       	rjmp	.+130    	; 0x1ce0 <open_PNEU+0x132>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1c5e:	6e e6       	ldi	r22, 0x6E	; 110
    1c60:	88 e8       	ldi	r24, 0x88	; 136
    1c62:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1c66:	8c e7       	ldi	r24, 0x7C	; 124
    1c68:	9c e8       	ldi	r25, 0x8C	; 140
    1c6a:	9f 93       	push	r25
    1c6c:	8f 93       	push	r24
    1c6e:	ce 01       	movw	r24, r28
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	9f 93       	push	r25
    1c74:	8f 93       	push	r24
    1c76:	08 96       	adiw	r24, 0x08	; 8
    1c78:	9f 93       	push	r25
    1c7a:	8f 93       	push	r24
    1c7c:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
			break;
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	29 c0       	rjmp	.+82     	; 0x1ce0 <open_PNEU+0x132>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1c8e:	6e ec       	ldi	r22, 0xCE	; 206
    1c90:	82 e2       	ldi	r24, 0x22	; 34
    1c92:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1c96:	82 e8       	ldi	r24, 0x82	; 130
    1c98:	9c e8       	ldi	r25, 0x8C	; 140
    1c9a:	9f 93       	push	r25
    1c9c:	8f 93       	push	r24
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	01 96       	adiw	r24, 0x01	; 1
    1ca2:	9f 93       	push	r25
    1ca4:	8f 93       	push	r24
    1ca6:	08 96       	adiw	r24, 0x08	; 8
    1ca8:	9f 93       	push	r25
    1caa:	8f 93       	push	r24
    1cac:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
			break;
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	11 c0       	rjmp	.+34     	; 0x1ce0 <open_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "open_PNEU bad object");
    1cbe:	65 eb       	ldi	r22, 0xB5	; 181
    1cc0:	7c e8       	ldi	r23, 0x8C	; 140
    1cc2:	85 ef       	ldi	r24, 0xF5	; 245
    1cc4:	91 e0       	ldi	r25, 0x01	; 1
    1cc6:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
			strcpy(outbuf, "open what?");
    1cca:	8b e0       	ldi	r24, 0x0B	; 11
    1ccc:	ea ec       	ldi	r30, 0xCA	; 202
    1cce:	fc e8       	ldi	r31, 0x8C	; 140
    1cd0:	de 01       	movw	r26, r28
    1cd2:	19 96       	adiw	r26, 0x09	; 9
    1cd4:	01 90       	ld	r0, Z+
    1cd6:	0d 92       	st	X+, r0
    1cd8:	8a 95       	dec	r24
    1cda:	e1 f7       	brne	.-8      	; 0x1cd4 <open_PNEU+0x126>
			return(ERROR);
    1cdc:	83 e6       	ldi	r24, 0x63	; 99
    1cde:	0b c0       	rjmp	.+22     	; 0x1cf6 <open_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1ce6:	41 e0       	ldi	r20, 0x01	; 1
    1ce8:	be 01       	movw	r22, r28
    1cea:	67 5f       	subi	r22, 0xF7	; 247
    1cec:	7f 4f       	sbci	r23, 0xFF	; 255
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
	return(NOERROR);
    1cf4:	80 e0       	ldi	r24, 0x00	; 0

}
    1cf6:	69 96       	adiw	r28, 0x19	; 25
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	08 95       	ret

00001d02 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1d02:	1f 92       	push	r1
    1d04:	0f 92       	push	r0
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	0f 92       	push	r0
    1d0a:	11 24       	eor	r1, r1
    1d0c:	2f 93       	push	r18
    1d0e:	3f 93       	push	r19
    1d10:	4f 93       	push	r20
    1d12:	5f 93       	push	r21
    1d14:	6f 93       	push	r22
    1d16:	7f 93       	push	r23
    1d18:	8f 93       	push	r24
    1d1a:	9f 93       	push	r25
    1d1c:	af 93       	push	r26
    1d1e:	bf 93       	push	r27
    1d20:	ef 93       	push	r30
    1d22:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1d24:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1d28:	88 23       	and	r24, r24
    1d2a:	4c f4       	brge	.+18     	; 0x1d3e <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1d2c:	80 e8       	ldi	r24, 0x80	; 128
    1d2e:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1d32:	68 e0       	ldi	r22, 0x08	; 8
    1d34:	81 e2       	ldi	r24, 0x21	; 33
    1d36:	0e 94 ef 08 	call	0x11de	; 0x11de <read_MCP23008>
    1d3a:	80 93 14 2a 	sts	0x2A14, r24	; 0x802a14 <pneuState>
	}

}
    1d3e:	ff 91       	pop	r31
    1d40:	ef 91       	pop	r30
    1d42:	bf 91       	pop	r27
    1d44:	af 91       	pop	r26
    1d46:	9f 91       	pop	r25
    1d48:	8f 91       	pop	r24
    1d4a:	7f 91       	pop	r23
    1d4c:	6f 91       	pop	r22
    1d4e:	5f 91       	pop	r21
    1d50:	4f 91       	pop	r20
    1d52:	3f 91       	pop	r19
    1d54:	2f 91       	pop	r18
    1d56:	0f 90       	pop	r0
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	0f 90       	pop	r0
    1d5c:	1f 90       	pop	r1
    1d5e:	18 95       	reti

00001d60 <init_PORTS>:
	sure nothing lurks in the background by accident.
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
    1d60:	e0 e0       	ldi	r30, 0x00	; 0
    1d62:	f4 e0       	ldi	r31, 0x04	; 4
    1d64:	88 e0       	ldi	r24, 0x08	; 8
    1d66:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
    1d68:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
    1d6a:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
    1d6c:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
    1d6e:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    1d70:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    1d72:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
    1d74:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
    1d76:	e0 e2       	ldi	r30, 0x20	; 32
    1d78:	f4 e0       	ldi	r31, 0x04	; 4
    1d7a:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
    1d7c:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
    1d7e:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
    1d80:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
    1d82:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
    1d84:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
    1d86:	e0 e4       	ldi	r30, 0x40	; 64
    1d88:	f4 e0       	ldi	r31, 0x04	; 4
    1d8a:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
    1d8c:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
    1d8e:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
    1d90:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
    1d92:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
    1d94:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
    1d96:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
    1d98:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d9a:	e0 e6       	ldi	r30, 0x60	; 96
    1d9c:	f4 e0       	ldi	r31, 0x04	; 4
    1d9e:	94 e0       	ldi	r25, 0x04	; 4
    1da0:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1da2:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1da4:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1da6:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1da8:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1daa:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1dac:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1dae:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
    1db0:	e0 e8       	ldi	r30, 0x80	; 128
    1db2:	f4 e0       	ldi	r31, 0x04	; 4
    1db4:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
    1db6:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
    1db8:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
    1dba:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
    1dbc:	e0 ea       	ldi	r30, 0xA0	; 160
    1dbe:	f4 e0       	ldi	r31, 0x04	; 4
    1dc0:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
    1dc2:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
    1dc4:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
    1dc6:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
    1dc8:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
    1dca:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
    1dcc:	86 8b       	std	Z+22, r24	; 0x16
    1dce:	08 95       	ret

00001dd0 <report>:

	Returns:
		ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1dd0:	2f 92       	push	r2
    1dd2:	3f 92       	push	r3
    1dd4:	4f 92       	push	r4
    1dd6:	5f 92       	push	r5
    1dd8:	6f 92       	push	r6
    1dda:	7f 92       	push	r7
    1ddc:	8f 92       	push	r8
    1dde:	9f 92       	push	r9
    1de0:	af 92       	push	r10
    1de2:	bf 92       	push	r11
    1de4:	cf 92       	push	r12
    1de6:	df 92       	push	r13
    1de8:	ef 92       	push	r14
    1dea:	ff 92       	push	r15
    1dec:	0f 93       	push	r16
    1dee:	1f 93       	push	r17
    1df0:	cf 93       	push	r28
    1df2:	df 93       	push	r29
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	cf 5d       	subi	r28, 0xDF	; 223
    1dfa:	d2 40       	sbci	r29, 0x02	; 2
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "ENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
    1e00:	95 e4       	ldi	r25, 0x45	; 69
    1e02:	eb e3       	ldi	r30, 0x3B	; 59
    1e04:	fd e8       	ldi	r31, 0x8D	; 141
    1e06:	de 01       	movw	r26, r28
    1e08:	a6 5b       	subi	r26, 0xB6	; 182
    1e0a:	be 4f       	sbci	r27, 0xFE	; 254
    1e0c:	01 90       	ld	r0, Z+
    1e0e:	0d 92       	st	X+, r0
    1e10:	9a 95       	dec	r25
    1e12:	e1 f7       	brne	.-8      	; 0x1e0c <report+0x3c>
	const char format_MTR[] = "MTR,%s,%c,%ld,microns,%ld,microns/sec,%d,mA,%s";
    1e14:	9f e2       	ldi	r25, 0x2F	; 47
    1e16:	e0 e8       	ldi	r30, 0x80	; 128
    1e18:	fd e8       	ldi	r31, 0x8D	; 141
    1e1a:	de 01       	movw	r26, r28
    1e1c:	a1 57       	subi	r26, 0x71	; 113
    1e1e:	be 4f       	sbci	r27, 0xFE	; 254
    1e20:	01 90       	ld	r0, Z+
    1e22:	0d 92       	st	X+, r0
    1e24:	9a 95       	dec	r25
    1e26:	e1 f7       	brne	.-8      	; 0x1e20 <report+0x50>
	const char format_MTV[] = "MTV,%s,%c,%3.1f,V,%3.1f,C,%s";
    1e28:	9d e1       	ldi	r25, 0x1D	; 29
    1e2a:	ef ea       	ldi	r30, 0xAF	; 175
    1e2c:	fd e8       	ldi	r31, 0x8D	; 141
    1e2e:	de 01       	movw	r26, r28
    1e30:	a2 54       	subi	r26, 0x42	; 66
    1e32:	be 4f       	sbci	r27, 0xFE	; 254
    1e34:	01 90       	ld	r0, Z+
    1e36:	0d 92       	st	X+, r0
    1e38:	9a 95       	dec	r25
    1e3a:	e1 f7       	brne	.-8      	; 0x1e34 <report+0x64>
	const char format_ORI[] = "ORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1e3c:	9c e1       	ldi	r25, 0x1C	; 28
    1e3e:	ec ec       	ldi	r30, 0xCC	; 204
    1e40:	fd e8       	ldi	r31, 0x8D	; 141
    1e42:	de 01       	movw	r26, r28
    1e44:	a5 52       	subi	r26, 0x25	; 37
    1e46:	be 4f       	sbci	r27, 0xFE	; 254
    1e48:	01 90       	ld	r0, Z+
    1e4a:	0d 92       	st	X+, r0
    1e4c:	9a 95       	dec	r25
    1e4e:	e1 f7       	brne	.-8      	; 0x1e48 <report+0x78>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1e50:	92 e1       	ldi	r25, 0x12	; 18
    1e52:	e8 ee       	ldi	r30, 0xE8	; 232
    1e54:	fd e8       	ldi	r31, 0x8D	; 141
    1e56:	de 01       	movw	r26, r28
    1e58:	a9 50       	subi	r26, 0x09	; 9
    1e5a:	be 4f       	sbci	r27, 0xFE	; 254
    1e5c:	01 90       	ld	r0, Z+
    1e5e:	0d 92       	st	X+, r0
    1e60:	9a 95       	dec	r25
    1e62:	e1 f7       	brne	.-8      	; 0x1e5c <report+0x8c>
	const char format_PNU[] = "PNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1e64:	9d e2       	ldi	r25, 0x2D	; 45
    1e66:	ea ef       	ldi	r30, 0xFA	; 250
    1e68:	fd e8       	ldi	r31, 0x8D	; 141
    1e6a:	de 01       	movw	r26, r28
    1e6c:	a7 5f       	subi	r26, 0xF7	; 247
    1e6e:	bd 4f       	sbci	r27, 0xFD	; 253
    1e70:	01 90       	ld	r0, Z+
    1e72:	0d 92       	st	X+, r0
    1e74:	9a 95       	dec	r25
    1e76:	e1 f7       	brne	.-8      	; 0x1e70 <report+0xa0>
	const char dformat_PN1[] = "left:%c   right:%c";
    1e78:	93 e1       	ldi	r25, 0x13	; 19
    1e7a:	e7 e2       	ldi	r30, 0x27	; 39
    1e7c:	fe e8       	ldi	r31, 0x8E	; 142
    1e7e:	de 01       	movw	r26, r28
    1e80:	aa 5c       	subi	r26, 0xCA	; 202
    1e82:	bd 4f       	sbci	r27, 0xFD	; 253
    1e84:	01 90       	ld	r0, Z+
    1e86:	0d 92       	st	X+, r0
    1e88:	9a 95       	dec	r25
    1e8a:	e1 f7       	brne	.-8      	; 0x1e84 <report+0xb4>
	const char dformat_PN2[] = "shutter:%c  air:%c";
    1e8c:	93 e1       	ldi	r25, 0x13	; 19
    1e8e:	ea e3       	ldi	r30, 0x3A	; 58
    1e90:	fe e8       	ldi	r31, 0x8E	; 142
    1e92:	de 01       	movw	r26, r28
    1e94:	a7 5b       	subi	r26, 0xB7	; 183
    1e96:	bd 4f       	sbci	r27, 0xFD	; 253
    1e98:	01 90       	ld	r0, Z+
    1e9a:	0d 92       	st	X+, r0
    1e9c:	9a 95       	dec	r25
    1e9e:	e1 f7       	brne	.-8      	; 0x1e98 <report+0xc8>
	const char format_TIM[] = "TIM,%s,%s,set,%s,boot,%s";
    1ea0:	99 e1       	ldi	r25, 0x19	; 25
    1ea2:	ed e4       	ldi	r30, 0x4D	; 77
    1ea4:	fe e8       	ldi	r31, 0x8E	; 142
    1ea6:	de 01       	movw	r26, r28
    1ea8:	a4 5a       	subi	r26, 0xA4	; 164
    1eaa:	bd 4f       	sbci	r27, 0xFD	; 253
    1eac:	01 90       	ld	r0, Z+
    1eae:	0d 92       	st	X+, r0
    1eb0:	9a 95       	dec	r25
    1eb2:	e1 f7       	brne	.-8      	; 0x1eac <report+0xdc>
	const char format_VAC[] = "VAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1eb4:	95 e2       	ldi	r25, 0x25	; 37
    1eb6:	e6 e6       	ldi	r30, 0x66	; 102
    1eb8:	fe e8       	ldi	r31, 0x8E	; 142
    1eba:	de 01       	movw	r26, r28
    1ebc:	ab 58       	subi	r26, 0x8B	; 139
    1ebe:	bd 4f       	sbci	r27, 0xFD	; 253
    1ec0:	01 90       	ld	r0, Z+
    1ec2:	0d 92       	st	X+, r0
    1ec4:	9a 95       	dec	r25
    1ec6:	e1 f7       	brne	.-8      	; 0x1ec0 <report+0xf0>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1ec8:	9d e0       	ldi	r25, 0x0D	; 13
    1eca:	eb e8       	ldi	r30, 0x8B	; 139
    1ecc:	fe e8       	ldi	r31, 0x8E	; 142
    1ece:	de 01       	movw	r26, r28
    1ed0:	a6 56       	subi	r26, 0x66	; 102
    1ed2:	bd 4f       	sbci	r27, 0xFD	; 253
    1ed4:	01 90       	ld	r0, Z+
    1ed6:	0d 92       	st	X+, r0
    1ed8:	9a 95       	dec	r25
    1eda:	e1 f7       	brne	.-8      	; 0x1ed4 <report+0x104>
	const char format_VER[] = "VER,%s,%s,%s";
    1edc:	9d e0       	ldi	r25, 0x0D	; 13
    1ede:	e8 e9       	ldi	r30, 0x98	; 152
    1ee0:	fe e8       	ldi	r31, 0x8E	; 142
    1ee2:	de 01       	movw	r26, r28
    1ee4:	a9 55       	subi	r26, 0x59	; 89
    1ee6:	bd 4f       	sbci	r27, 0xFD	; 253
    1ee8:	01 90       	ld	r0, Z+
    1eea:	0d 92       	st	X+, r0
    1eec:	9a 95       	dec	r25
    1eee:	e1 f7       	brne	.-8      	; 0x1ee8 <report+0x118>
	float voltage;							// voltage
	uint16_t current;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum

	switch(pcmd[cstack].cobject) {
    1ef0:	08 2f       	mov	r16, r24
    1ef2:	10 e0       	ldi	r17, 0x00	; 0
    1ef4:	84 e3       	ldi	r24, 0x34	; 52
    1ef6:	80 9f       	mul	r24, r16
    1ef8:	f0 01       	movw	r30, r0
    1efa:	81 9f       	mul	r24, r17
    1efc:	f0 0d       	add	r31, r0
    1efe:	11 24       	eor	r1, r1
    1f00:	e8 5f       	subi	r30, 0xF8	; 248
    1f02:	f7 4d       	sbci	r31, 0xD7	; 215
    1f04:	e1 81       	ldd	r30, Z+1	; 0x01
    1f06:	8e 2f       	mov	r24, r30
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	e1 54       	subi	r30, 0x41	; 65
    1f0e:	f1 09       	sbc	r31, r1
    1f10:	e6 33       	cpi	r30, 0x36	; 54
    1f12:	f1 05       	cpc	r31, r1
    1f14:	08 f0       	brcs	.+2      	; 0x1f18 <report+0x148>
    1f16:	cd c4       	rjmp	.+2458   	; 0x28b2 <report+0xae2>
    1f18:	ed 58       	subi	r30, 0x8D	; 141
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	0c 94 f9 22 	jmp	0x45f2	; 0x45f2 <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    1f20:	ce 01       	movw	r24, r28
    1f22:	86 5f       	subi	r24, 0xF6	; 246
    1f24:	9e 4f       	sbci	r25, 0xFE	; 254
    1f26:	0e 94 af 05 	call	0xb5e	; 0xb5e <get_time>
			controller = pcmd[cstack].cobject + 63;
    1f2a:	84 e3       	ldi	r24, 0x34	; 52
    1f2c:	80 9f       	mul	r24, r16
    1f2e:	f0 01       	movw	r30, r0
    1f30:	81 9f       	mul	r24, r17
    1f32:	f0 0d       	add	r31, r0
    1f34:	11 24       	eor	r1, r1
    1f36:	e8 5f       	subi	r30, 0xF8	; 248
    1f38:	f7 4d       	sbci	r31, 0xD7	; 215
    1f3a:	f1 80       	ldd	r15, Z+1	; 0x01
    1f3c:	0f 2e       	mov	r0, r31
    1f3e:	ff e3       	ldi	r31, 0x3F	; 63
    1f40:	ef 2e       	mov	r14, r31
    1f42:	f0 2d       	mov	r31, r0
    1f44:	ef 0c       	add	r14, r15
			retval = get_MOTORFloat(controller, ROBOREADMAINVOLTAGE, &voltage);
    1f46:	ae 01       	movw	r20, r28
    1f48:	4c 53       	subi	r20, 0x3C	; 60
    1f4a:	5d 4f       	sbci	r21, 0xFD	; 253
    1f4c:	68 e1       	ldi	r22, 0x18	; 24
    1f4e:	8e 2d       	mov	r24, r14
    1f50:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <get_MOTORFloat>
			if (retval == ERROR) {
    1f54:	83 36       	cpi	r24, 0x63	; 99
    1f56:	61 f4       	brne	.+24     	; 0x1f70 <report+0x1a0>
				voltage = -666.0;
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	90 e8       	ldi	r25, 0x80	; 128
    1f5c:	a6 e2       	ldi	r26, 0x26	; 38
    1f5e:	b4 ec       	ldi	r27, 0xC4	; 196
    1f60:	cc 53       	subi	r28, 0x3C	; 60
    1f62:	dd 4f       	sbci	r29, 0xFD	; 253
    1f64:	88 83       	st	Y, r24
    1f66:	99 83       	std	Y+1, r25	; 0x01
    1f68:	aa 83       	std	Y+2, r26	; 0x02
    1f6a:	bb 83       	std	Y+3, r27	; 0x03
    1f6c:	c4 5c       	subi	r28, 0xC4	; 196
    1f6e:	d2 40       	sbci	r29, 0x02	; 2
			}
			retval = get_MOTORFloat(controller, ROBOREADTEMPERATURE, &t0);
    1f70:	ae 01       	movw	r20, r28
    1f72:	40 54       	subi	r20, 0x40	; 64
    1f74:	5d 4f       	sbci	r21, 0xFD	; 253
    1f76:	62 e5       	ldi	r22, 0x52	; 82
    1f78:	8e 2d       	mov	r24, r14
    1f7a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <get_MOTORFloat>
			if (retval == ERROR) {
    1f7e:	83 36       	cpi	r24, 0x63	; 99
    1f80:	61 f4       	brne	.+24     	; 0x1f9a <report+0x1ca>
				t0 = -666.0;
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	90 e8       	ldi	r25, 0x80	; 128
    1f86:	a6 e2       	ldi	r26, 0x26	; 38
    1f88:	b4 ec       	ldi	r27, 0xC4	; 196
    1f8a:	c0 54       	subi	r28, 0x40	; 64
    1f8c:	dd 4f       	sbci	r29, 0xFD	; 253
    1f8e:	88 83       	st	Y, r24
    1f90:	99 83       	std	Y+1, r25	; 0x01
    1f92:	aa 83       	std	Y+2, r26	; 0x02
    1f94:	bb 83       	std	Y+3, r27	; 0x03
    1f96:	c0 5c       	subi	r28, 0xC0	; 192
    1f98:	d2 40       	sbci	r29, 0x02	; 2
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
    1f9a:	24 e3       	ldi	r18, 0x34	; 52
    1f9c:	20 9f       	mul	r18, r16
    1f9e:	c0 01       	movw	r24, r0
    1fa0:	21 9f       	mul	r18, r17
    1fa2:	90 0d       	add	r25, r0
    1fa4:	11 24       	eor	r1, r1
    1fa6:	8d 5c       	subi	r24, 0xCD	; 205
    1fa8:	97 4d       	sbci	r25, 0xD7	; 215
			}
			retval = get_MOTORFloat(controller, ROBOREADTEMPERATURE, &t0);
			if (retval == ERROR) {
				t0 = -666.0;
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
    1faa:	9f 93       	push	r25
    1fac:	8f 93       	push	r24
    1fae:	cd 53       	subi	r28, 0x3D	; 61
    1fb0:	dd 4f       	sbci	r29, 0xFD	; 253
    1fb2:	88 81       	ld	r24, Y
    1fb4:	c3 5c       	subi	r28, 0xC3	; 195
    1fb6:	d2 40       	sbci	r29, 0x02	; 2
    1fb8:	8f 93       	push	r24
    1fba:	ce 53       	subi	r28, 0x3E	; 62
    1fbc:	dd 4f       	sbci	r29, 0xFD	; 253
    1fbe:	88 81       	ld	r24, Y
    1fc0:	c2 5c       	subi	r28, 0xC2	; 194
    1fc2:	d2 40       	sbci	r29, 0x02	; 2
    1fc4:	8f 93       	push	r24
    1fc6:	cf 53       	subi	r28, 0x3F	; 63
    1fc8:	dd 4f       	sbci	r29, 0xFD	; 253
    1fca:	88 81       	ld	r24, Y
    1fcc:	c1 5c       	subi	r28, 0xC1	; 193
    1fce:	d2 40       	sbci	r29, 0x02	; 2
    1fd0:	8f 93       	push	r24
    1fd2:	c0 54       	subi	r28, 0x40	; 64
    1fd4:	dd 4f       	sbci	r29, 0xFD	; 253
    1fd6:	88 81       	ld	r24, Y
    1fd8:	c0 5c       	subi	r28, 0xC0	; 192
    1fda:	d2 40       	sbci	r29, 0x02	; 2
    1fdc:	8f 93       	push	r24
    1fde:	c9 53       	subi	r28, 0x39	; 57
    1fe0:	dd 4f       	sbci	r29, 0xFD	; 253
    1fe2:	88 81       	ld	r24, Y
    1fe4:	c7 5c       	subi	r28, 0xC7	; 199
    1fe6:	d2 40       	sbci	r29, 0x02	; 2
    1fe8:	8f 93       	push	r24
    1fea:	ca 53       	subi	r28, 0x3A	; 58
    1fec:	dd 4f       	sbci	r29, 0xFD	; 253
    1fee:	88 81       	ld	r24, Y
    1ff0:	c6 5c       	subi	r28, 0xC6	; 198
    1ff2:	d2 40       	sbci	r29, 0x02	; 2
    1ff4:	8f 93       	push	r24
    1ff6:	cb 53       	subi	r28, 0x3B	; 59
    1ff8:	dd 4f       	sbci	r29, 0xFD	; 253
    1ffa:	88 81       	ld	r24, Y
    1ffc:	c5 5c       	subi	r28, 0xC5	; 197
    1ffe:	d2 40       	sbci	r29, 0x02	; 2
    2000:	8f 93       	push	r24
    2002:	cc 53       	subi	r28, 0x3C	; 60
    2004:	dd 4f       	sbci	r29, 0xFD	; 253
    2006:	88 81       	ld	r24, Y
    2008:	c4 5c       	subi	r28, 0xC4	; 196
    200a:	d2 40       	sbci	r29, 0x02	; 2
    200c:	8f 93       	push	r24
    200e:	1f 92       	push	r1
    2010:	ff 92       	push	r15
    2012:	ce 01       	movw	r24, r28
    2014:	86 5f       	subi	r24, 0xF6	; 246
    2016:	9e 4f       	sbci	r25, 0xFE	; 254
    2018:	9f 93       	push	r25
    201a:	8f 93       	push	r24
    201c:	8c 54       	subi	r24, 0x4C	; 76
    201e:	9f 4f       	sbci	r25, 0xFF	; 255
    2020:	9f 93       	push	r25
    2022:	8f 93       	push	r24
    2024:	8e 01       	movw	r16, r28
    2026:	0f 5f       	subi	r16, 0xFF	; 255
    2028:	1f 4f       	sbci	r17, 0xFF	; 255
    202a:	1f 93       	push	r17
    202c:	0f 93       	push	r16
    202e:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
				voltage, t0, pcmd[cstack].cid);
			printLine(outbuf);
    2032:	c8 01       	movw	r24, r16
    2034:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
			break;
    2038:	cd bf       	out	0x3d, r28	; 61
    203a:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    203c:	80 e0       	ldi	r24, 0x00	; 0
				t0 = -666.0;
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    203e:	40 c4       	rjmp	.+2176   	; 0x28c0 <report+0xaf0>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    2040:	ce 01       	movw	r24, r28
    2042:	86 5f       	subi	r24, 0xF6	; 246
    2044:	9e 4f       	sbci	r25, 0xFE	; 254
    2046:	0e 94 af 05 	call	0xb5e	; 0xb5e <get_time>
			controller = pcmd[cstack].cobject + 31;
    204a:	84 e3       	ldi	r24, 0x34	; 52
    204c:	80 9f       	mul	r24, r16
    204e:	f0 01       	movw	r30, r0
    2050:	81 9f       	mul	r24, r17
    2052:	f0 0d       	add	r31, r0
    2054:	11 24       	eor	r1, r1
    2056:	e8 5f       	subi	r30, 0xF8	; 248
    2058:	f7 4d       	sbci	r31, 0xD7	; 215
    205a:	81 81       	ldd	r24, Z+1	; 0x01
    205c:	0f 2e       	mov	r0, r31
    205e:	ff e1       	ldi	r31, 0x1F	; 31
    2060:	7f 2e       	mov	r7, r31
    2062:	f0 2d       	mov	r31, r0
    2064:	78 0e       	add	r7, r24
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &encoderValue);
    2066:	ae 01       	movw	r20, r28
    2068:	4c 54       	subi	r20, 0x4C	; 76
    206a:	5d 4f       	sbci	r21, 0xFD	; 253
    206c:	60 e1       	ldi	r22, 0x10	; 16
    206e:	87 2d       	mov	r24, r7
    2070:	0e 94 ee 14 	call	0x29dc	; 0x29dc <get_MOTOREncoder>
			if (retval == ERROR) {
    2074:	83 36       	cpi	r24, 0x63	; 99
    2076:	61 f4       	brne	.+24     	; 0x2090 <report+0x2c0>
				encoderValue = 0x7FFFFFFF;
    2078:	8f ef       	ldi	r24, 0xFF	; 255
    207a:	9f ef       	ldi	r25, 0xFF	; 255
    207c:	af ef       	ldi	r26, 0xFF	; 255
    207e:	bf e7       	ldi	r27, 0x7F	; 127
    2080:	cc 54       	subi	r28, 0x4C	; 76
    2082:	dd 4f       	sbci	r29, 0xFD	; 253
    2084:	88 83       	st	Y, r24
    2086:	99 83       	std	Y+1, r25	; 0x01
    2088:	aa 83       	std	Y+2, r26	; 0x02
    208a:	bb 83       	std	Y+3, r27	; 0x03
    208c:	c4 5b       	subi	r28, 0xB4	; 180
    208e:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronValue = encoderValue/ROBOCOUNTSPERMICRON;
    2090:	cc 54       	subi	r28, 0x4C	; 76
    2092:	dd 4f       	sbci	r29, 0xFD	; 253
    2094:	68 81       	ld	r22, Y
    2096:	79 81       	ldd	r23, Y+1	; 0x01
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	9b 81       	ldd	r25, Y+3	; 0x03
    209c:	c4 5b       	subi	r28, 0xB4	; 180
    209e:	d2 40       	sbci	r29, 0x02	; 2
    20a0:	2c e0       	ldi	r18, 0x0C	; 12
    20a2:	31 e0       	ldi	r19, 0x01	; 1
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	50 e0       	ldi	r21, 0x00	; 0
    20a8:	0e 94 da 22 	call	0x45b4	; 0x45b4 <__divmodsi4>
    20ac:	f2 2e       	mov	r15, r18
    20ae:	e3 2e       	mov	r14, r19
    20b0:	d4 2e       	mov	r13, r20
    20b2:	c5 2e       	mov	r12, r21
			retval = get_MOTOREncoder(controller, ROBOREADENCODERSPEED, &encoderSpeed);
    20b4:	ae 01       	movw	r20, r28
    20b6:	48 54       	subi	r20, 0x48	; 72
    20b8:	5d 4f       	sbci	r21, 0xFD	; 253
    20ba:	62 e1       	ldi	r22, 0x12	; 18
    20bc:	87 2d       	mov	r24, r7
    20be:	0e 94 ee 14 	call	0x29dc	; 0x29dc <get_MOTOREncoder>
			if (retval == ERROR) {
    20c2:	83 36       	cpi	r24, 0x63	; 99
    20c4:	61 f4       	brne	.+24     	; 0x20de <report+0x30e>
				encoderSpeed = 0x7FFFFFFF;
    20c6:	8f ef       	ldi	r24, 0xFF	; 255
    20c8:	9f ef       	ldi	r25, 0xFF	; 255
    20ca:	af ef       	ldi	r26, 0xFF	; 255
    20cc:	bf e7       	ldi	r27, 0x7F	; 127
    20ce:	c8 54       	subi	r28, 0x48	; 72
    20d0:	dd 4f       	sbci	r29, 0xFD	; 253
    20d2:	88 83       	st	Y, r24
    20d4:	99 83       	std	Y+1, r25	; 0x01
    20d6:	aa 83       	std	Y+2, r26	; 0x02
    20d8:	bb 83       	std	Y+3, r27	; 0x03
    20da:	c8 5b       	subi	r28, 0xB8	; 184
    20dc:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronSpeed = encoderSpeed/ROBOCOUNTSPERMICRON;
    20de:	c8 54       	subi	r28, 0x48	; 72
    20e0:	dd 4f       	sbci	r29, 0xFD	; 253
    20e2:	68 81       	ld	r22, Y
    20e4:	79 81       	ldd	r23, Y+1	; 0x01
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
    20e8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ea:	c8 5b       	subi	r28, 0xB8	; 184
    20ec:	d2 40       	sbci	r29, 0x02	; 2
    20ee:	2c e0       	ldi	r18, 0x0C	; 12
    20f0:	31 e0       	ldi	r19, 0x01	; 1
    20f2:	40 e0       	ldi	r20, 0x00	; 0
    20f4:	50 e0       	ldi	r21, 0x00	; 0
    20f6:	0e 94 da 22 	call	0x45b4	; 0x45b4 <__divmodsi4>
    20fa:	b2 2e       	mov	r11, r18
    20fc:	a3 2e       	mov	r10, r19
    20fe:	94 2e       	mov	r9, r20
    2100:	85 2e       	mov	r8, r21
			retval = get_MOTORInt32(controller, ROBOREADCURRENT, &icurrents);
    2102:	ae 01       	movw	r20, r28
    2104:	44 54       	subi	r20, 0x44	; 68
    2106:	5d 4f       	sbci	r21, 0xFD	; 253
    2108:	61 e3       	ldi	r22, 0x31	; 49
    210a:	87 2d       	mov	r24, r7
    210c:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <get_MOTORInt32>
			if (retval == ERROR) {
    2110:	83 36       	cpi	r24, 0x63	; 99
    2112:	61 f4       	brne	.+24     	; 0x212c <report+0x35c>
				icurrents = 0x7FFFFFFF;
    2114:	8f ef       	ldi	r24, 0xFF	; 255
    2116:	9f ef       	ldi	r25, 0xFF	; 255
    2118:	af ef       	ldi	r26, 0xFF	; 255
    211a:	bf e7       	ldi	r27, 0x7F	; 127
    211c:	c4 54       	subi	r28, 0x44	; 68
    211e:	dd 4f       	sbci	r29, 0xFD	; 253
    2120:	88 83       	st	Y, r24
    2122:	99 83       	std	Y+1, r25	; 0x01
    2124:	aa 83       	std	Y+2, r26	; 0x02
    2126:	bb 83       	std	Y+3, r27	; 0x03
    2128:	cc 5b       	subi	r28, 0xBC	; 188
    212a:	d2 40       	sbci	r29, 0x02	; 2
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
    212c:	c4 54       	subi	r28, 0x44	; 68
    212e:	dd 4f       	sbci	r29, 0xFD	; 253
    2130:	88 81       	ld	r24, Y
    2132:	99 81       	ldd	r25, Y+1	; 0x01
    2134:	aa 81       	ldd	r26, Y+2	; 0x02
    2136:	bb 81       	ldd	r27, Y+3	; 0x03
    2138:	cc 5b       	subi	r28, 0xBC	; 188
    213a:	d2 40       	sbci	r29, 0x02	; 2
    213c:	cd 01       	movw	r24, r26
    213e:	aa 27       	eor	r26, r26
    2140:	bb 27       	eor	r27, r27
    2142:	9c 01       	movw	r18, r24
    2144:	22 0f       	add	r18, r18
    2146:	33 1f       	adc	r19, r19
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	88 0f       	add	r24, r24
    214e:	99 1f       	adc	r25, r25
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	82 0f       	add	r24, r18
    2156:	93 1f       	adc	r25, r19
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, current, pcmd[cstack].cid);
    2158:	44 e3       	ldi	r20, 0x34	; 52
    215a:	40 9f       	mul	r20, r16
    215c:	90 01       	movw	r18, r0
    215e:	41 9f       	mul	r20, r17
    2160:	30 0d       	add	r19, r0
    2162:	11 24       	eor	r1, r1
    2164:	a9 01       	movw	r20, r18
    2166:	4d 5c       	subi	r20, 0xCD	; 205
    2168:	57 4d       	sbci	r21, 0xD7	; 215
			retval = get_MOTORInt32(controller, ROBOREADCURRENT, &icurrents);
			if (retval == ERROR) {
				icurrents = 0x7FFFFFFF;
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
    216a:	f9 01       	movw	r30, r18
    216c:	e8 5f       	subi	r30, 0xF8	; 248
    216e:	f7 4d       	sbci	r31, 0xD7	; 215
    2170:	21 81       	ldd	r18, Z+1	; 0x01
    2172:	5f 93       	push	r21
    2174:	4f 93       	push	r20
    2176:	9f 93       	push	r25
    2178:	8f 93       	push	r24
    217a:	8f 92       	push	r8
    217c:	9f 92       	push	r9
    217e:	af 92       	push	r10
    2180:	bf 92       	push	r11
    2182:	cf 92       	push	r12
    2184:	df 92       	push	r13
    2186:	ef 92       	push	r14
    2188:	ff 92       	push	r15
    218a:	1f 92       	push	r1
    218c:	2f 93       	push	r18
    218e:	ce 01       	movw	r24, r28
    2190:	86 5f       	subi	r24, 0xF6	; 246
    2192:	9e 4f       	sbci	r25, 0xFE	; 254
    2194:	9f 93       	push	r25
    2196:	8f 93       	push	r24
    2198:	8b 57       	subi	r24, 0x7B	; 123
    219a:	9f 4f       	sbci	r25, 0xFF	; 255
    219c:	9f 93       	push	r25
    219e:	8f 93       	push	r24
    21a0:	8e 01       	movw	r16, r28
    21a2:	0f 5f       	subi	r16, 0xFF	; 255
    21a4:	1f 4f       	sbci	r17, 0xFF	; 255
    21a6:	1f 93       	push	r17
    21a8:	0f 93       	push	r16
    21aa:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
				micronValue, micronSpeed, current, pcmd[cstack].cid);
			printLine(outbuf);
    21ae:	c8 01       	movw	r24, r16
    21b0:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
			break;
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    21b8:	80 e0       	ldi	r24, 0x00	; 0
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, current, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    21ba:	82 c3       	rjmp	.+1796   	; 0x28c0 <report+0xaf0>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	0e 94 65 19 	call	0x32ca	; 0x32ca <get_temperature>
    21c2:	c0 54       	subi	r28, 0x40	; 64
    21c4:	dd 4f       	sbci	r29, 0xFD	; 253
    21c6:	68 83       	st	Y, r22
    21c8:	79 83       	std	Y+1, r23	; 0x01
    21ca:	8a 83       	std	Y+2, r24	; 0x02
    21cc:	9b 83       	std	Y+3, r25	; 0x03
    21ce:	c0 5c       	subi	r28, 0xC0	; 192
    21d0:	d2 40       	sbci	r29, 0x02	; 2
			h0 = get_humidity(0);
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	0e 94 71 07 	call	0xee2	; 0xee2 <get_humidity>
    21d8:	d6 2e       	mov	r13, r22
    21da:	c7 2e       	mov	r12, r23
    21dc:	b8 2e       	mov	r11, r24
    21de:	a9 2e       	mov	r10, r25
			t1 = get_temperature(1);
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	0e 94 65 19 	call	0x32ca	; 0x32ca <get_temperature>
    21e6:	cc 52       	subi	r28, 0x2C	; 44
    21e8:	dd 4f       	sbci	r29, 0xFD	; 253
    21ea:	68 83       	st	Y, r22
    21ec:	c4 5d       	subi	r28, 0xD4	; 212
    21ee:	d2 40       	sbci	r29, 0x02	; 2
    21f0:	cb 52       	subi	r28, 0x2B	; 43
    21f2:	dd 4f       	sbci	r29, 0xFD	; 253
    21f4:	78 83       	st	Y, r23
    21f6:	c5 5d       	subi	r28, 0xD5	; 213
    21f8:	d2 40       	sbci	r29, 0x02	; 2
    21fa:	ca 52       	subi	r28, 0x2A	; 42
    21fc:	dd 4f       	sbci	r29, 0xFD	; 253
    21fe:	88 83       	st	Y, r24
    2200:	c6 5d       	subi	r28, 0xD6	; 214
    2202:	d2 40       	sbci	r29, 0x02	; 2
    2204:	c9 52       	subi	r28, 0x29	; 41
    2206:	dd 4f       	sbci	r29, 0xFD	; 253
    2208:	98 83       	st	Y, r25
    220a:	c7 5d       	subi	r28, 0xD7	; 215
    220c:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	0e 94 71 07 	call	0xee2	; 0xee2 <get_humidity>
    2214:	c8 52       	subi	r28, 0x28	; 40
    2216:	dd 4f       	sbci	r29, 0xFD	; 253
    2218:	68 83       	st	Y, r22
    221a:	c8 5d       	subi	r28, 0xD8	; 216
    221c:	d2 40       	sbci	r29, 0x02	; 2
    221e:	c7 52       	subi	r28, 0x27	; 39
    2220:	dd 4f       	sbci	r29, 0xFD	; 253
    2222:	78 83       	st	Y, r23
    2224:	c9 5d       	subi	r28, 0xD9	; 217
    2226:	d2 40       	sbci	r29, 0x02	; 2
    2228:	c6 52       	subi	r28, 0x26	; 38
    222a:	dd 4f       	sbci	r29, 0xFD	; 253
    222c:	88 83       	st	Y, r24
    222e:	ca 5d       	subi	r28, 0xDA	; 218
    2230:	d2 40       	sbci	r29, 0x02	; 2
    2232:	c5 52       	subi	r28, 0x25	; 37
    2234:	dd 4f       	sbci	r29, 0xFD	; 253
    2236:	98 83       	st	Y, r25
    2238:	cb 5d       	subi	r28, 0xDB	; 219
    223a:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    223c:	82 e0       	ldi	r24, 0x02	; 2
    223e:	0e 94 65 19 	call	0x32ca	; 0x32ca <get_temperature>
    2242:	c4 52       	subi	r28, 0x24	; 36
    2244:	dd 4f       	sbci	r29, 0xFD	; 253
    2246:	68 83       	st	Y, r22
    2248:	cc 5d       	subi	r28, 0xDC	; 220
    224a:	d2 40       	sbci	r29, 0x02	; 2
    224c:	c3 52       	subi	r28, 0x23	; 35
    224e:	dd 4f       	sbci	r29, 0xFD	; 253
    2250:	78 83       	st	Y, r23
    2252:	cd 5d       	subi	r28, 0xDD	; 221
    2254:	d2 40       	sbci	r29, 0x02	; 2
    2256:	98 2e       	mov	r9, r24
    2258:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    225a:	82 e0       	ldi	r24, 0x02	; 2
    225c:	0e 94 71 07 	call	0xee2	; 0xee2 <get_humidity>
    2260:	76 2e       	mov	r7, r22
    2262:	67 2e       	mov	r6, r23
    2264:	58 2e       	mov	r5, r24
    2266:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    2268:	83 e0       	ldi	r24, 0x03	; 3
    226a:	0e 94 65 19 	call	0x32ca	; 0x32ca <get_temperature>
    226e:	c2 52       	subi	r28, 0x22	; 34
    2270:	dd 4f       	sbci	r29, 0xFD	; 253
    2272:	68 83       	st	Y, r22
    2274:	ce 5d       	subi	r28, 0xDE	; 222
    2276:	d2 40       	sbci	r29, 0x02	; 2
    2278:	c1 52       	subi	r28, 0x21	; 33
    227a:	dd 4f       	sbci	r29, 0xFD	; 253
    227c:	78 83       	st	Y, r23
    227e:	cf 5d       	subi	r28, 0xDF	; 223
    2280:	d2 40       	sbci	r29, 0x02	; 2
    2282:	38 2e       	mov	r3, r24
    2284:	29 2e       	mov	r2, r25
			get_time(currenttime);
    2286:	7e 01       	movw	r14, r28
    2288:	96 ef       	ldi	r25, 0xF6	; 246
    228a:	e9 1a       	sub	r14, r25
    228c:	9e ef       	ldi	r25, 0xFE	; 254
    228e:	f9 0a       	sbc	r15, r25
    2290:	c7 01       	movw	r24, r14
    2292:	0e 94 af 05 	call	0xb5e	; 0xb5e <get_time>
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    2296:	24 e3       	ldi	r18, 0x34	; 52
    2298:	20 9f       	mul	r18, r16
    229a:	c0 01       	movw	r24, r0
    229c:	21 9f       	mul	r18, r17
    229e:	90 0d       	add	r25, r0
    22a0:	11 24       	eor	r1, r1
    22a2:	8d 5c       	subi	r24, 0xCD	; 205
    22a4:	97 4d       	sbci	r25, 0xD7	; 215
    22a6:	9f 93       	push	r25
    22a8:	8f 93       	push	r24
    22aa:	2f 92       	push	r2
    22ac:	3f 92       	push	r3
    22ae:	c1 52       	subi	r28, 0x21	; 33
    22b0:	dd 4f       	sbci	r29, 0xFD	; 253
    22b2:	88 81       	ld	r24, Y
    22b4:	cf 5d       	subi	r28, 0xDF	; 223
    22b6:	d2 40       	sbci	r29, 0x02	; 2
    22b8:	8f 93       	push	r24
    22ba:	c2 52       	subi	r28, 0x22	; 34
    22bc:	dd 4f       	sbci	r29, 0xFD	; 253
    22be:	98 81       	ld	r25, Y
    22c0:	ce 5d       	subi	r28, 0xDE	; 222
    22c2:	d2 40       	sbci	r29, 0x02	; 2
    22c4:	9f 93       	push	r25
    22c6:	4f 92       	push	r4
    22c8:	5f 92       	push	r5
    22ca:	6f 92       	push	r6
    22cc:	7f 92       	push	r7
    22ce:	8f 92       	push	r8
    22d0:	9f 92       	push	r9
    22d2:	c3 52       	subi	r28, 0x23	; 35
    22d4:	dd 4f       	sbci	r29, 0xFD	; 253
    22d6:	88 81       	ld	r24, Y
    22d8:	cd 5d       	subi	r28, 0xDD	; 221
    22da:	d2 40       	sbci	r29, 0x02	; 2
    22dc:	8f 93       	push	r24
    22de:	c4 52       	subi	r28, 0x24	; 36
    22e0:	dd 4f       	sbci	r29, 0xFD	; 253
    22e2:	98 81       	ld	r25, Y
    22e4:	cc 5d       	subi	r28, 0xDC	; 220
    22e6:	d2 40       	sbci	r29, 0x02	; 2
    22e8:	9f 93       	push	r25
    22ea:	c5 52       	subi	r28, 0x25	; 37
    22ec:	dd 4f       	sbci	r29, 0xFD	; 253
    22ee:	88 81       	ld	r24, Y
    22f0:	cb 5d       	subi	r28, 0xDB	; 219
    22f2:	d2 40       	sbci	r29, 0x02	; 2
    22f4:	8f 93       	push	r24
    22f6:	c6 52       	subi	r28, 0x26	; 38
    22f8:	dd 4f       	sbci	r29, 0xFD	; 253
    22fa:	98 81       	ld	r25, Y
    22fc:	ca 5d       	subi	r28, 0xDA	; 218
    22fe:	d2 40       	sbci	r29, 0x02	; 2
    2300:	9f 93       	push	r25
    2302:	c7 52       	subi	r28, 0x27	; 39
    2304:	dd 4f       	sbci	r29, 0xFD	; 253
    2306:	88 81       	ld	r24, Y
    2308:	c9 5d       	subi	r28, 0xD9	; 217
    230a:	d2 40       	sbci	r29, 0x02	; 2
    230c:	8f 93       	push	r24
    230e:	c8 52       	subi	r28, 0x28	; 40
    2310:	dd 4f       	sbci	r29, 0xFD	; 253
    2312:	98 81       	ld	r25, Y
    2314:	c8 5d       	subi	r28, 0xD8	; 216
    2316:	d2 40       	sbci	r29, 0x02	; 2
    2318:	9f 93       	push	r25
    231a:	c9 52       	subi	r28, 0x29	; 41
    231c:	dd 4f       	sbci	r29, 0xFD	; 253
    231e:	88 81       	ld	r24, Y
    2320:	c7 5d       	subi	r28, 0xD7	; 215
    2322:	d2 40       	sbci	r29, 0x02	; 2
    2324:	8f 93       	push	r24
    2326:	ca 52       	subi	r28, 0x2A	; 42
    2328:	dd 4f       	sbci	r29, 0xFD	; 253
    232a:	98 81       	ld	r25, Y
    232c:	c6 5d       	subi	r28, 0xD6	; 214
    232e:	d2 40       	sbci	r29, 0x02	; 2
    2330:	9f 93       	push	r25
    2332:	cb 52       	subi	r28, 0x2B	; 43
    2334:	dd 4f       	sbci	r29, 0xFD	; 253
    2336:	88 81       	ld	r24, Y
    2338:	c5 5d       	subi	r28, 0xD5	; 213
    233a:	d2 40       	sbci	r29, 0x02	; 2
    233c:	8f 93       	push	r24
    233e:	cc 52       	subi	r28, 0x2C	; 44
    2340:	dd 4f       	sbci	r29, 0xFD	; 253
    2342:	98 81       	ld	r25, Y
    2344:	c4 5d       	subi	r28, 0xD4	; 212
    2346:	d2 40       	sbci	r29, 0x02	; 2
    2348:	9f 93       	push	r25
    234a:	af 92       	push	r10
    234c:	bf 92       	push	r11
    234e:	cf 92       	push	r12
    2350:	df 92       	push	r13
    2352:	cd 53       	subi	r28, 0x3D	; 61
    2354:	dd 4f       	sbci	r29, 0xFD	; 253
    2356:	88 81       	ld	r24, Y
    2358:	c3 5c       	subi	r28, 0xC3	; 195
    235a:	d2 40       	sbci	r29, 0x02	; 2
    235c:	8f 93       	push	r24
    235e:	ce 53       	subi	r28, 0x3E	; 62
    2360:	dd 4f       	sbci	r29, 0xFD	; 253
    2362:	88 81       	ld	r24, Y
    2364:	c2 5c       	subi	r28, 0xC2	; 194
    2366:	d2 40       	sbci	r29, 0x02	; 2
    2368:	8f 93       	push	r24
    236a:	cf 53       	subi	r28, 0x3F	; 63
    236c:	dd 4f       	sbci	r29, 0xFD	; 253
    236e:	88 81       	ld	r24, Y
    2370:	c1 5c       	subi	r28, 0xC1	; 193
    2372:	d2 40       	sbci	r29, 0x02	; 2
    2374:	8f 93       	push	r24
    2376:	c0 54       	subi	r28, 0x40	; 64
    2378:	dd 4f       	sbci	r29, 0xFD	; 253
    237a:	88 81       	ld	r24, Y
    237c:	c0 5c       	subi	r28, 0xC0	; 192
    237e:	d2 40       	sbci	r29, 0x02	; 2
    2380:	8f 93       	push	r24
    2382:	ff 92       	push	r15
    2384:	ef 92       	push	r14
    2386:	ce 01       	movw	r24, r28
    2388:	86 5b       	subi	r24, 0xB6	; 182
    238a:	9e 4f       	sbci	r25, 0xFE	; 254
    238c:	9f 93       	push	r25
    238e:	8f 93       	push	r24
    2390:	8e 01       	movw	r16, r28
    2392:	0f 5f       	subi	r16, 0xFF	; 255
    2394:	1f 4f       	sbci	r17, 0xFF	; 255
    2396:	1f 93       	push	r17
    2398:	0f 93       	push	r16
    239a:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
			printLine(outbuf);
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	c8 01       	movw	r24, r16
    23a4:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
			writestr_OLED(1, "Temp & Humidity", 1);
    23a8:	41 e0       	ldi	r20, 0x01	; 1
    23aa:	6d ed       	ldi	r22, 0xDD	; 221
    23ac:	7c e8       	ldi	r23, 0x8C	; 140
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    23b4:	c0 54       	subi	r28, 0x40	; 64
    23b6:	dd 4f       	sbci	r29, 0xFD	; 253
    23b8:	f8 80       	ld	r15, Y
    23ba:	c0 5c       	subi	r28, 0xC0	; 192
    23bc:	d2 40       	sbci	r29, 0x02	; 2
    23be:	cf 53       	subi	r28, 0x3F	; 63
    23c0:	dd 4f       	sbci	r29, 0xFD	; 253
    23c2:	e8 80       	ld	r14, Y
    23c4:	c1 5c       	subi	r28, 0xC1	; 193
    23c6:	d2 40       	sbci	r29, 0x02	; 2
    23c8:	ce 53       	subi	r28, 0x3E	; 62
    23ca:	dd 4f       	sbci	r29, 0xFD	; 253
    23cc:	98 80       	ld	r9, Y
    23ce:	c2 5c       	subi	r28, 0xC2	; 194
    23d0:	d2 40       	sbci	r29, 0x02	; 2
    23d2:	cd 53       	subi	r28, 0x3D	; 61
    23d4:	dd 4f       	sbci	r29, 0xFD	; 253
    23d6:	88 80       	ld	r8, Y
    23d8:	c3 5c       	subi	r28, 0xC3	; 195
    23da:	d2 40       	sbci	r29, 0x02	; 2
    23dc:	26 e6       	ldi	r18, 0x66	; 102
    23de:	36 e6       	ldi	r19, 0x66	; 102
    23e0:	46 ee       	ldi	r20, 0xE6	; 230
    23e2:	5f e3       	ldi	r21, 0x3F	; 63
    23e4:	6f 2d       	mov	r22, r15
    23e6:	7e 2d       	mov	r23, r14
    23e8:	89 2d       	mov	r24, r9
    23ea:	98 2d       	mov	r25, r8
    23ec:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__mulsf3>
    23f0:	af 92       	push	r10
    23f2:	bf 92       	push	r11
    23f4:	cf 92       	push	r12
    23f6:	df 92       	push	r13
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	52 e4       	ldi	r21, 0x42	; 66
    2400:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <__addsf3>
    2404:	9f 93       	push	r25
    2406:	8f 93       	push	r24
    2408:	7f 93       	push	r23
    240a:	6f 93       	push	r22
    240c:	8f 92       	push	r8
    240e:	9f 92       	push	r9
    2410:	ef 92       	push	r14
    2412:	ff 92       	push	r15
    2414:	8d ee       	ldi	r24, 0xED	; 237
    2416:	9c e8       	ldi	r25, 0x8C	; 140
    2418:	9f 93       	push	r25
    241a:	8f 93       	push	r24
    241c:	1f 93       	push	r17
    241e:	0f 93       	push	r16
    2420:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2424:	42 e0       	ldi	r20, 0x02	; 2
    2426:	b8 01       	movw	r22, r16
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			break;
    242e:	cd bf       	out	0x3d, r28	; 61
    2430:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2432:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    2434:	45 c2       	rjmp	.+1162   	; 0x28c0 <report+0xaf0>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    2436:	ae 01       	movw	r20, r28
    2438:	40 53       	subi	r20, 0x30	; 48
    243a:	5d 4f       	sbci	r21, 0xFD	; 253
    243c:	be 01       	movw	r22, r28
    243e:	64 53       	subi	r22, 0x34	; 52
    2440:	7d 4f       	sbci	r23, 0xFD	; 253
    2442:	ce 01       	movw	r24, r28
    2444:	88 53       	subi	r24, 0x38	; 56
    2446:	9d 4f       	sbci	r25, 0xFD	; 253
    2448:	0e 94 e5 09 	call	0x13ca	; 0x13ca <get_orientation>
			get_time(currenttime);
    244c:	7e 01       	movw	r14, r28
    244e:	96 ef       	ldi	r25, 0xF6	; 246
    2450:	e9 1a       	sub	r14, r25
    2452:	9e ef       	ldi	r25, 0xFE	; 254
    2454:	f9 0a       	sbc	r15, r25
    2456:	c7 01       	movw	r24, r14
    2458:	0e 94 af 05 	call	0xb5e	; 0xb5e <get_time>
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
    245c:	24 e3       	ldi	r18, 0x34	; 52
    245e:	20 9f       	mul	r18, r16
    2460:	c0 01       	movw	r24, r0
    2462:	21 9f       	mul	r18, r17
    2464:	90 0d       	add	r25, r0
    2466:	11 24       	eor	r1, r1
    2468:	8d 5c       	subi	r24, 0xCD	; 205
    246a:	97 4d       	sbci	r25, 0xD7	; 215
    246c:	9f 93       	push	r25
    246e:	8f 93       	push	r24
    2470:	cd 52       	subi	r28, 0x2D	; 45
    2472:	dd 4f       	sbci	r29, 0xFD	; 253
    2474:	88 81       	ld	r24, Y
    2476:	c3 5d       	subi	r28, 0xD3	; 211
    2478:	d2 40       	sbci	r29, 0x02	; 2
    247a:	8f 93       	push	r24
    247c:	ce 52       	subi	r28, 0x2E	; 46
    247e:	dd 4f       	sbci	r29, 0xFD	; 253
    2480:	88 81       	ld	r24, Y
    2482:	c2 5d       	subi	r28, 0xD2	; 210
    2484:	d2 40       	sbci	r29, 0x02	; 2
    2486:	8f 93       	push	r24
    2488:	cf 52       	subi	r28, 0x2F	; 47
    248a:	dd 4f       	sbci	r29, 0xFD	; 253
    248c:	88 81       	ld	r24, Y
    248e:	c1 5d       	subi	r28, 0xD1	; 209
    2490:	d2 40       	sbci	r29, 0x02	; 2
    2492:	8f 93       	push	r24
    2494:	c0 53       	subi	r28, 0x30	; 48
    2496:	dd 4f       	sbci	r29, 0xFD	; 253
    2498:	88 81       	ld	r24, Y
    249a:	c0 5d       	subi	r28, 0xD0	; 208
    249c:	d2 40       	sbci	r29, 0x02	; 2
    249e:	8f 93       	push	r24
    24a0:	c1 53       	subi	r28, 0x31	; 49
    24a2:	dd 4f       	sbci	r29, 0xFD	; 253
    24a4:	88 81       	ld	r24, Y
    24a6:	cf 5c       	subi	r28, 0xCF	; 207
    24a8:	d2 40       	sbci	r29, 0x02	; 2
    24aa:	8f 93       	push	r24
    24ac:	c2 53       	subi	r28, 0x32	; 50
    24ae:	dd 4f       	sbci	r29, 0xFD	; 253
    24b0:	88 81       	ld	r24, Y
    24b2:	ce 5c       	subi	r28, 0xCE	; 206
    24b4:	d2 40       	sbci	r29, 0x02	; 2
    24b6:	8f 93       	push	r24
    24b8:	c3 53       	subi	r28, 0x33	; 51
    24ba:	dd 4f       	sbci	r29, 0xFD	; 253
    24bc:	88 81       	ld	r24, Y
    24be:	cd 5c       	subi	r28, 0xCD	; 205
    24c0:	d2 40       	sbci	r29, 0x02	; 2
    24c2:	8f 93       	push	r24
    24c4:	c4 53       	subi	r28, 0x34	; 52
    24c6:	dd 4f       	sbci	r29, 0xFD	; 253
    24c8:	88 81       	ld	r24, Y
    24ca:	cc 5c       	subi	r28, 0xCC	; 204
    24cc:	d2 40       	sbci	r29, 0x02	; 2
    24ce:	8f 93       	push	r24
    24d0:	c5 53       	subi	r28, 0x35	; 53
    24d2:	dd 4f       	sbci	r29, 0xFD	; 253
    24d4:	88 81       	ld	r24, Y
    24d6:	cb 5c       	subi	r28, 0xCB	; 203
    24d8:	d2 40       	sbci	r29, 0x02	; 2
    24da:	8f 93       	push	r24
    24dc:	c6 53       	subi	r28, 0x36	; 54
    24de:	dd 4f       	sbci	r29, 0xFD	; 253
    24e0:	88 81       	ld	r24, Y
    24e2:	ca 5c       	subi	r28, 0xCA	; 202
    24e4:	d2 40       	sbci	r29, 0x02	; 2
    24e6:	8f 93       	push	r24
    24e8:	c7 53       	subi	r28, 0x37	; 55
    24ea:	dd 4f       	sbci	r29, 0xFD	; 253
    24ec:	88 81       	ld	r24, Y
    24ee:	c9 5c       	subi	r28, 0xC9	; 201
    24f0:	d2 40       	sbci	r29, 0x02	; 2
    24f2:	8f 93       	push	r24
    24f4:	c8 53       	subi	r28, 0x38	; 56
    24f6:	dd 4f       	sbci	r29, 0xFD	; 253
    24f8:	88 81       	ld	r24, Y
    24fa:	c8 5c       	subi	r28, 0xC8	; 200
    24fc:	d2 40       	sbci	r29, 0x02	; 2
    24fe:	8f 93       	push	r24
    2500:	ff 92       	push	r15
    2502:	ef 92       	push	r14
    2504:	ce 01       	movw	r24, r28
    2506:	85 52       	subi	r24, 0x25	; 37
    2508:	9e 4f       	sbci	r25, 0xFE	; 254
    250a:	9f 93       	push	r25
    250c:	8f 93       	push	r24
    250e:	8e 01       	movw	r16, r28
    2510:	0f 5f       	subi	r16, 0xFF	; 255
    2512:	1f 4f       	sbci	r17, 0xFF	; 255
    2514:	1f 93       	push	r17
    2516:	0f 93       	push	r16
    2518:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
			printLine(outbuf);
    251c:	c8 01       	movw	r24, r16
    251e:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
			writestr_OLED(1, "Orientation", 1);
    2522:	41 e0       	ldi	r20, 0x01	; 1
    2524:	63 e0       	ldi	r22, 0x03	; 3
    2526:	7d e8       	ldi	r23, 0x8D	; 141
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    252e:	cd 52       	subi	r28, 0x2D	; 45
    2530:	dd 4f       	sbci	r29, 0xFD	; 253
    2532:	88 81       	ld	r24, Y
    2534:	c3 5d       	subi	r28, 0xD3	; 211
    2536:	d2 40       	sbci	r29, 0x02	; 2
    2538:	8f 93       	push	r24
    253a:	ce 52       	subi	r28, 0x2E	; 46
    253c:	dd 4f       	sbci	r29, 0xFD	; 253
    253e:	88 81       	ld	r24, Y
    2540:	c2 5d       	subi	r28, 0xD2	; 210
    2542:	d2 40       	sbci	r29, 0x02	; 2
    2544:	8f 93       	push	r24
    2546:	cf 52       	subi	r28, 0x2F	; 47
    2548:	dd 4f       	sbci	r29, 0xFD	; 253
    254a:	88 81       	ld	r24, Y
    254c:	c1 5d       	subi	r28, 0xD1	; 209
    254e:	d2 40       	sbci	r29, 0x02	; 2
    2550:	8f 93       	push	r24
    2552:	c0 53       	subi	r28, 0x30	; 48
    2554:	dd 4f       	sbci	r29, 0xFD	; 253
    2556:	88 81       	ld	r24, Y
    2558:	c0 5d       	subi	r28, 0xD0	; 208
    255a:	d2 40       	sbci	r29, 0x02	; 2
    255c:	8f 93       	push	r24
    255e:	c1 53       	subi	r28, 0x31	; 49
    2560:	dd 4f       	sbci	r29, 0xFD	; 253
    2562:	88 81       	ld	r24, Y
    2564:	cf 5c       	subi	r28, 0xCF	; 207
    2566:	d2 40       	sbci	r29, 0x02	; 2
    2568:	8f 93       	push	r24
    256a:	c2 53       	subi	r28, 0x32	; 50
    256c:	dd 4f       	sbci	r29, 0xFD	; 253
    256e:	88 81       	ld	r24, Y
    2570:	ce 5c       	subi	r28, 0xCE	; 206
    2572:	d2 40       	sbci	r29, 0x02	; 2
    2574:	8f 93       	push	r24
    2576:	c3 53       	subi	r28, 0x33	; 51
    2578:	dd 4f       	sbci	r29, 0xFD	; 253
    257a:	88 81       	ld	r24, Y
    257c:	cd 5c       	subi	r28, 0xCD	; 205
    257e:	d2 40       	sbci	r29, 0x02	; 2
    2580:	8f 93       	push	r24
    2582:	c4 53       	subi	r28, 0x34	; 52
    2584:	dd 4f       	sbci	r29, 0xFD	; 253
    2586:	88 81       	ld	r24, Y
    2588:	cc 5c       	subi	r28, 0xCC	; 204
    258a:	d2 40       	sbci	r29, 0x02	; 2
    258c:	8f 93       	push	r24
    258e:	c5 53       	subi	r28, 0x35	; 53
    2590:	dd 4f       	sbci	r29, 0xFD	; 253
    2592:	88 81       	ld	r24, Y
    2594:	cb 5c       	subi	r28, 0xCB	; 203
    2596:	d2 40       	sbci	r29, 0x02	; 2
    2598:	8f 93       	push	r24
    259a:	c6 53       	subi	r28, 0x36	; 54
    259c:	dd 4f       	sbci	r29, 0xFD	; 253
    259e:	88 81       	ld	r24, Y
    25a0:	ca 5c       	subi	r28, 0xCA	; 202
    25a2:	d2 40       	sbci	r29, 0x02	; 2
    25a4:	8f 93       	push	r24
    25a6:	c7 53       	subi	r28, 0x37	; 55
    25a8:	dd 4f       	sbci	r29, 0xFD	; 253
    25aa:	88 81       	ld	r24, Y
    25ac:	c9 5c       	subi	r28, 0xC9	; 201
    25ae:	d2 40       	sbci	r29, 0x02	; 2
    25b0:	8f 93       	push	r24
    25b2:	c8 53       	subi	r28, 0x38	; 56
    25b4:	dd 4f       	sbci	r29, 0xFD	; 253
    25b6:	88 81       	ld	r24, Y
    25b8:	c8 5c       	subi	r28, 0xC8	; 200
    25ba:	d2 40       	sbci	r29, 0x02	; 2
    25bc:	8f 93       	push	r24
    25be:	ce 01       	movw	r24, r28
    25c0:	89 50       	subi	r24, 0x09	; 9
    25c2:	9e 4f       	sbci	r25, 0xFE	; 254
    25c4:	9f 93       	push	r25
    25c6:	8f 93       	push	r24
    25c8:	1f 93       	push	r17
    25ca:	0f 93       	push	r16
    25cc:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
			writestr_OLED(1, outbuf, 2);
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	42 e0       	ldi	r20, 0x02	; 2
    25d6:	b8 01       	movw	r22, r16
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    25de:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    25e0:	6f c1       	rjmp	.+734    	; 0x28c0 <report+0xaf0>

		case 'p':
			get_time(currenttime);
    25e2:	7e 01       	movw	r14, r28
    25e4:	96 ef       	ldi	r25, 0xF6	; 246
    25e6:	e9 1a       	sub	r14, r25
    25e8:	9e ef       	ldi	r25, 0xFE	; 254
    25ea:	f9 0a       	sbc	r15, r25
    25ec:	c7 01       	movw	r24, r14
    25ee:	0e 94 af 05 	call	0xb5e	; 0xb5e <get_time>
			read_PNEUSensors(&shutter, &left, &right, &air);
    25f2:	9e 01       	movw	r18, r28
    25f4:	27 5b       	subi	r18, 0xB7	; 183
    25f6:	3e 4f       	sbci	r19, 0xFE	; 254
    25f8:	ae 01       	movw	r20, r28
    25fa:	48 5b       	subi	r20, 0xB8	; 184
    25fc:	5e 4f       	sbci	r21, 0xFE	; 254
    25fe:	be 01       	movw	r22, r28
    2600:	69 5b       	subi	r22, 0xB9	; 185
    2602:	7e 4f       	sbci	r23, 0xFE	; 254
    2604:	ce 01       	movw	r24, r28
    2606:	8a 5b       	subi	r24, 0xBA	; 186
    2608:	9e 4f       	sbci	r25, 0xFE	; 254
    260a:	0e 94 af 0c 	call	0x195e	; 0x195e <read_PNEUSensors>
			sprintf(outbuf, format_PNU, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    260e:	24 e3       	ldi	r18, 0x34	; 52
    2610:	20 9f       	mul	r18, r16
    2612:	c0 01       	movw	r24, r0
    2614:	21 9f       	mul	r18, r17
    2616:	90 0d       	add	r25, r0
    2618:	11 24       	eor	r1, r1
    261a:	8d 5c       	subi	r24, 0xCD	; 205
    261c:	97 4d       	sbci	r25, 0xD7	; 215
    261e:	9f 93       	push	r25
    2620:	8f 93       	push	r24
    2622:	c7 5b       	subi	r28, 0xB7	; 183
    2624:	de 4f       	sbci	r29, 0xFE	; 254
    2626:	88 81       	ld	r24, Y
    2628:	c9 54       	subi	r28, 0x49	; 73
    262a:	d1 40       	sbci	r29, 0x01	; 1
    262c:	1f 92       	push	r1
    262e:	8f 93       	push	r24
    2630:	c8 5b       	subi	r28, 0xB8	; 184
    2632:	de 4f       	sbci	r29, 0xFE	; 254
    2634:	88 81       	ld	r24, Y
    2636:	c8 54       	subi	r28, 0x48	; 72
    2638:	d1 40       	sbci	r29, 0x01	; 1
    263a:	1f 92       	push	r1
    263c:	8f 93       	push	r24
    263e:	c9 5b       	subi	r28, 0xB9	; 185
    2640:	de 4f       	sbci	r29, 0xFE	; 254
    2642:	88 81       	ld	r24, Y
    2644:	c7 54       	subi	r28, 0x47	; 71
    2646:	d1 40       	sbci	r29, 0x01	; 1
    2648:	1f 92       	push	r1
    264a:	8f 93       	push	r24
    264c:	ca 5b       	subi	r28, 0xBA	; 186
    264e:	de 4f       	sbci	r29, 0xFE	; 254
    2650:	88 81       	ld	r24, Y
    2652:	c6 54       	subi	r28, 0x46	; 70
    2654:	d1 40       	sbci	r29, 0x01	; 1
    2656:	1f 92       	push	r1
    2658:	8f 93       	push	r24
    265a:	ff 92       	push	r15
    265c:	ef 92       	push	r14
    265e:	ce 01       	movw	r24, r28
    2660:	87 5f       	subi	r24, 0xF7	; 247
    2662:	9d 4f       	sbci	r25, 0xFD	; 253
    2664:	9f 93       	push	r25
    2666:	8f 93       	push	r24
    2668:	8e 01       	movw	r16, r28
    266a:	0f 5f       	subi	r16, 0xFF	; 255
    266c:	1f 4f       	sbci	r17, 0xFF	; 255
    266e:	1f 93       	push	r17
    2670:	0f 93       	push	r16
    2672:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
			printLine(outbuf);
    2676:	c8 01       	movw	r24, r16
    2678:	0e 94 88 03 	call	0x710	; 0x710 <printLine>

			sprintf(outbuf, dformat_PN1, left, right);
    267c:	c8 5b       	subi	r28, 0xB8	; 184
    267e:	de 4f       	sbci	r29, 0xFE	; 254
    2680:	88 81       	ld	r24, Y
    2682:	c8 54       	subi	r28, 0x48	; 72
    2684:	d1 40       	sbci	r29, 0x01	; 1
    2686:	1f 92       	push	r1
    2688:	8f 93       	push	r24
    268a:	c9 5b       	subi	r28, 0xB9	; 185
    268c:	de 4f       	sbci	r29, 0xFE	; 254
    268e:	88 81       	ld	r24, Y
    2690:	c7 54       	subi	r28, 0x47	; 71
    2692:	d1 40       	sbci	r29, 0x01	; 1
    2694:	1f 92       	push	r1
    2696:	8f 93       	push	r24
    2698:	ce 01       	movw	r24, r28
    269a:	8a 5c       	subi	r24, 0xCA	; 202
    269c:	9d 4f       	sbci	r25, 0xFD	; 253
    269e:	9f 93       	push	r25
    26a0:	8f 93       	push	r24
    26a2:	1f 93       	push	r17
    26a4:	0f 93       	push	r16
    26a6:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
			writestr_OLED(1, outbuf, 1);
    26aa:	41 e0       	ldi	r20, 0x01	; 1
    26ac:	b8 01       	movw	r22, r16
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    26b4:	c7 5b       	subi	r28, 0xB7	; 183
    26b6:	de 4f       	sbci	r29, 0xFE	; 254
    26b8:	88 81       	ld	r24, Y
    26ba:	c9 54       	subi	r28, 0x49	; 73
    26bc:	d1 40       	sbci	r29, 0x01	; 1
    26be:	1f 92       	push	r1
    26c0:	8f 93       	push	r24
    26c2:	ca 5b       	subi	r28, 0xBA	; 186
    26c4:	de 4f       	sbci	r29, 0xFE	; 254
    26c6:	88 81       	ld	r24, Y
    26c8:	c6 54       	subi	r28, 0x46	; 70
    26ca:	d1 40       	sbci	r29, 0x01	; 1
    26cc:	1f 92       	push	r1
    26ce:	8f 93       	push	r24
    26d0:	ce 01       	movw	r24, r28
    26d2:	87 5b       	subi	r24, 0xB7	; 183
    26d4:	9d 4f       	sbci	r25, 0xFD	; 253
    26d6:	9f 93       	push	r25
    26d8:	8f 93       	push	r24
    26da:	1f 93       	push	r17
    26dc:	0f 93       	push	r16
    26de:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
			writestr_OLED(1, outbuf, 2);
    26e2:	cd bf       	out	0x3d, r28	; 61
    26e4:	de bf       	out	0x3e, r29	; 62
    26e6:	42 e0       	ldi	r20, 0x02	; 2
    26e8:	b8 01       	movw	r22, r16
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    26f0:	80 e0       	ldi	r24, 0x00	; 0

			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    26f2:	e6 c0       	rjmp	.+460    	; 0x28c0 <report+0xaf0>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    26f4:	7e 01       	movw	r14, r28
    26f6:	96 ef       	ldi	r25, 0xF6	; 246
    26f8:	e9 1a       	sub	r14, r25
    26fa:	9e ef       	ldi	r25, 0xFE	; 254
    26fc:	f9 0a       	sbc	r15, r25
    26fe:	c7 01       	movw	r24, r14
    2700:	0e 94 af 05 	call	0xb5e	; 0xb5e <get_time>
			get_SETTIME(lastsettime);
    2704:	6e 01       	movw	r12, r28
    2706:	82 ee       	ldi	r24, 0xE2	; 226
    2708:	c8 1a       	sub	r12, r24
    270a:	8e ef       	ldi	r24, 0xFE	; 254
    270c:	d8 0a       	sbc	r13, r24
    270e:	c6 01       	movw	r24, r12
    2710:	0e 94 0f 07 	call	0xe1e	; 0xe1e <get_SETTIME>
//			read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
    2714:	5e 01       	movw	r10, r28
    2716:	9e ec       	ldi	r25, 0xCE	; 206
    2718:	a9 1a       	sub	r10, r25
    271a:	9e ef       	ldi	r25, 0xFE	; 254
    271c:	b9 0a       	sbc	r11, r25
    271e:	c5 01       	movw	r24, r10
    2720:	0e 94 41 06 	call	0xc82	; 0xc82 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    2724:	24 e3       	ldi	r18, 0x34	; 52
    2726:	20 9f       	mul	r18, r16
    2728:	c0 01       	movw	r24, r0
    272a:	21 9f       	mul	r18, r17
    272c:	90 0d       	add	r25, r0
    272e:	11 24       	eor	r1, r1
    2730:	8d 5c       	subi	r24, 0xCD	; 205
    2732:	97 4d       	sbci	r25, 0xD7	; 215
		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			get_SETTIME(lastsettime);
//			read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
    2734:	9f 93       	push	r25
    2736:	8f 93       	push	r24
    2738:	bf 92       	push	r11
    273a:	af 92       	push	r10
    273c:	df 92       	push	r13
    273e:	cf 92       	push	r12
    2740:	ff 92       	push	r15
    2742:	ef 92       	push	r14
    2744:	ce 01       	movw	r24, r28
    2746:	84 5a       	subi	r24, 0xA4	; 164
    2748:	9d 4f       	sbci	r25, 0xFD	; 253
    274a:	9f 93       	push	r25
    274c:	8f 93       	push	r24
    274e:	8e 01       	movw	r16, r28
    2750:	0f 5f       	subi	r16, 0xFF	; 255
    2752:	1f 4f       	sbci	r17, 0xFF	; 255
    2754:	1f 93       	push	r17
    2756:	0f 93       	push	r16
    2758:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
    275c:	c8 01       	movw	r24, r16
    275e:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
			writestr_OLED(1, "Time", 1);
    2762:	41 e0       	ldi	r20, 0x01	; 1
    2764:	6f e0       	ldi	r22, 0x0F	; 15
    2766:	7d e8       	ldi	r23, 0x8D	; 141
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    276e:	b7 01       	movw	r22, r14
    2770:	65 5f       	subi	r22, 0xF5	; 245
    2772:	7f 4f       	sbci	r23, 0xFF	; 255
    2774:	42 e0       	ldi	r20, 0x02	; 2
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			break;
    277c:	cd bf       	out	0x3d, r28	; 61
    277e:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2780:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    2782:	9e c0       	rjmp	.+316    	; 0x28c0 <report+0xaf0>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	0e 94 3c 08 	call	0x1078	; 0x1078 <read_ionpump>
    278a:	d6 2e       	mov	r13, r22
    278c:	c7 2e       	mov	r12, r23
    278e:	b8 2e       	mov	r11, r24
    2790:	a9 2e       	mov	r10, r25
			bluvac = read_ionpump(BLUEPUMP);
    2792:	82 e0       	ldi	r24, 0x02	; 2
    2794:	0e 94 3c 08 	call	0x1078	; 0x1078 <read_ionpump>
    2798:	96 2e       	mov	r9, r22
    279a:	87 2e       	mov	r8, r23
    279c:	78 2e       	mov	r7, r24
    279e:	69 2e       	mov	r6, r25
			get_time(currenttime);
    27a0:	7e 01       	movw	r14, r28
    27a2:	96 ef       	ldi	r25, 0xF6	; 246
    27a4:	e9 1a       	sub	r14, r25
    27a6:	9e ef       	ldi	r25, 0xFE	; 254
    27a8:	f9 0a       	sbc	r15, r25
    27aa:	c7 01       	movw	r24, r14
    27ac:	0e 94 af 05 	call	0xb5e	; 0xb5e <get_time>
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
    27b0:	24 e3       	ldi	r18, 0x34	; 52
    27b2:	20 9f       	mul	r18, r16
    27b4:	c0 01       	movw	r24, r0
    27b6:	21 9f       	mul	r18, r17
    27b8:	90 0d       	add	r25, r0
    27ba:	11 24       	eor	r1, r1
    27bc:	8d 5c       	subi	r24, 0xCD	; 205
    27be:	97 4d       	sbci	r25, 0xD7	; 215
    27c0:	9f 93       	push	r25
    27c2:	8f 93       	push	r24
    27c4:	6f 92       	push	r6
    27c6:	7f 92       	push	r7
    27c8:	8f 92       	push	r8
    27ca:	9f 92       	push	r9
    27cc:	af 92       	push	r10
    27ce:	bf 92       	push	r11
    27d0:	cf 92       	push	r12
    27d2:	df 92       	push	r13
    27d4:	ff 92       	push	r15
    27d6:	ef 92       	push	r14
    27d8:	ce 01       	movw	r24, r28
    27da:	8b 58       	subi	r24, 0x8B	; 139
    27dc:	9d 4f       	sbci	r25, 0xFD	; 253
    27de:	9f 93       	push	r25
    27e0:	8f 93       	push	r24
    27e2:	8e 01       	movw	r16, r28
    27e4:	0f 5f       	subi	r16, 0xFF	; 255
    27e6:	1f 4f       	sbci	r17, 0xFF	; 255
    27e8:	1f 93       	push	r17
    27ea:	0f 93       	push	r16
    27ec:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
			printLine(outbuf);
    27f0:	c8 01       	movw	r24, r16
    27f2:	0e 94 88 03 	call	0x710	; 0x710 <printLine>

			writestr_OLED(1, "RedVac  BlueVac", 1);
    27f6:	41 e0       	ldi	r20, 0x01	; 1
    27f8:	64 e1       	ldi	r22, 0x14	; 20
    27fa:	7d e8       	ldi	r23, 0x8D	; 141
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    2802:	6f 92       	push	r6
    2804:	7f 92       	push	r7
    2806:	8f 92       	push	r8
    2808:	9f 92       	push	r9
    280a:	af 92       	push	r10
    280c:	bf 92       	push	r11
    280e:	cf 92       	push	r12
    2810:	df 92       	push	r13
    2812:	ce 01       	movw	r24, r28
    2814:	86 56       	subi	r24, 0x66	; 102
    2816:	9d 4f       	sbci	r25, 0xFD	; 253
    2818:	9f 93       	push	r25
    281a:	8f 93       	push	r24
    281c:	1f 93       	push	r17
    281e:	0f 93       	push	r16
    2820:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2824:	42 e0       	ldi	r20, 0x02	; 2
    2826:	b8 01       	movw	r22, r16
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			break;
    282e:	cd bf       	out	0x3d, r28	; 61
    2830:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2832:	80 e0       	ldi	r24, 0x00	; 0
			printLine(outbuf);

			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    2834:	45 c0       	rjmp	.+138    	; 0x28c0 <report+0xaf0>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    2836:	6e 01       	movw	r12, r28
    2838:	9f ef       	ldi	r25, 0xFF	; 255
    283a:	c9 0e       	add	r12, r25
    283c:	d1 1c       	adc	r13, r1
    283e:	c6 01       	movw	r24, r12
    2840:	0e 94 48 06 	call	0xc90	; 0xc90 <get_VERSION>
			get_time(currenttime);
    2844:	7e 01       	movw	r14, r28
    2846:	86 ef       	ldi	r24, 0xF6	; 246
    2848:	e8 1a       	sub	r14, r24
    284a:	8e ef       	ldi	r24, 0xFE	; 254
    284c:	f8 0a       	sbc	r15, r24
    284e:	c7 01       	movw	r24, r14
    2850:	0e 94 af 05 	call	0xb5e	; 0xb5e <get_time>
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
    2854:	24 e3       	ldi	r18, 0x34	; 52
    2856:	20 9f       	mul	r18, r16
    2858:	c0 01       	movw	r24, r0
    285a:	21 9f       	mul	r18, r17
    285c:	90 0d       	add	r25, r0
    285e:	11 24       	eor	r1, r1
    2860:	8d 5c       	subi	r24, 0xCD	; 205
    2862:	97 4d       	sbci	r25, 0xD7	; 215
    2864:	9f 93       	push	r25
    2866:	8f 93       	push	r24
    2868:	df 92       	push	r13
    286a:	cf 92       	push	r12
    286c:	ff 92       	push	r15
    286e:	ef 92       	push	r14
    2870:	ce 01       	movw	r24, r28
    2872:	89 55       	subi	r24, 0x59	; 89
    2874:	9d 4f       	sbci	r25, 0xFD	; 253
    2876:	9f 93       	push	r25
    2878:	8f 93       	push	r24
    287a:	8e 01       	movw	r16, r28
    287c:	0f 5f       	subi	r16, 0xFF	; 255
    287e:	1f 4f       	sbci	r17, 0xFF	; 255
    2880:	1f 93       	push	r17
    2882:	0f 93       	push	r16
    2884:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
			printLine(outbuf);
    2888:	c8 01       	movw	r24, r16
    288a:	0e 94 88 03 	call	0x710	; 0x710 <printLine>
			writestr_OLED(1, "specMech Version", 1);
    288e:	41 e0       	ldi	r20, 0x01	; 1
    2890:	6f e1       	ldi	r22, 0x1F	; 31
    2892:	7c e8       	ldi	r23, 0x8C	; 140
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			get_VERSION(outbuf);
    289a:	c8 01       	movw	r24, r16
    289c:	0e 94 48 06 	call	0xc90	; 0xc90 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    28a0:	42 e0       	ldi	r20, 0x02	; 2
    28a2:	b8 01       	movw	r22, r16
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <writestr_OLED>
			break;
    28aa:	cd bf       	out	0x3d, r28	; 61
    28ac:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    28ae:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    28b0:	07 c0       	rjmp	.+14     	; 0x28c0 <report+0xaf0>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    28b2:	64 e2       	ldi	r22, 0x24	; 36
    28b4:	7d e8       	ldi	r23, 0x8D	; 141
    28b6:	8a ec       	ldi	r24, 0xCA	; 202
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
			return(ERROR);
    28be:	83 e6       	ldi	r24, 0x63	; 99
			break;
	}

	return(NOERROR);

}
    28c0:	c1 52       	subi	r28, 0x21	; 33
    28c2:	dd 4f       	sbci	r29, 0xFD	; 253
    28c4:	cd bf       	out	0x3d, r28	; 61
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	df 91       	pop	r29
    28ca:	cf 91       	pop	r28
    28cc:	1f 91       	pop	r17
    28ce:	0f 91       	pop	r16
    28d0:	ff 90       	pop	r15
    28d2:	ef 90       	pop	r14
    28d4:	df 90       	pop	r13
    28d6:	cf 90       	pop	r12
    28d8:	bf 90       	pop	r11
    28da:	af 90       	pop	r10
    28dc:	9f 90       	pop	r9
    28de:	8f 90       	pop	r8
    28e0:	7f 90       	pop	r7
    28e2:	6f 90       	pop	r6
    28e4:	5f 90       	pop	r5
    28e6:	4f 90       	pop	r4
    28e8:	3f 90       	pop	r3
    28ea:	2f 90       	pop	r2
    28ec:	08 95       	ret

000028ee <crc16>:

	Returns:
		The CRC16 value as an unsigned 16-bit word
------------------------------------------------------------------------------*/
uint16_t crc16(uint8_t *packet, uint16_t nBytes)
{
    28ee:	dc 01       	movw	r26, r24

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    28f0:	40 e0       	ldi	r20, 0x00	; 0
    28f2:	50 e0       	ldi	r21, 0x00	; 0
------------------------------------------------------------------------------*/
uint16_t crc16(uint8_t *packet, uint16_t nBytes)
{

	uint8_t bit;
	uint16_t crc = 0;
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    28f8:	1b c0       	rjmp	.+54     	; 0x2930 <crc16+0x42>
		crc = crc ^ ((uint16_t) packet[byte] << 8);
    28fa:	fd 01       	movw	r30, r26
    28fc:	e4 0f       	add	r30, r20
    28fe:	f5 1f       	adc	r31, r21
    2900:	20 81       	ld	r18, Z
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	32 2f       	mov	r19, r18
    2906:	22 27       	eor	r18, r18
    2908:	82 27       	eor	r24, r18
    290a:	93 27       	eor	r25, r19
		for (bit = 0; bit < 8; bit++) {
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	0c c0       	rjmp	.+24     	; 0x2928 <crc16+0x3a>
			if (crc & 0x8000) {
    2910:	99 23       	and	r25, r25
    2912:	3c f4       	brge	.+14     	; 0x2922 <crc16+0x34>
				crc = (crc << 1) ^ 0x1021;
    2914:	88 0f       	add	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	31 e2       	ldi	r19, 0x21	; 33
    291a:	83 27       	eor	r24, r19
    291c:	30 e1       	ldi	r19, 0x10	; 16
    291e:	93 27       	eor	r25, r19
    2920:	02 c0       	rjmp	.+4      	; 0x2926 <crc16+0x38>
			} else {
				crc = crc << 1;
    2922:	88 0f       	add	r24, r24
    2924:	99 1f       	adc	r25, r25
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
		crc = crc ^ ((uint16_t) packet[byte] << 8);
		for (bit = 0; bit < 8; bit++) {
    2926:	2f 5f       	subi	r18, 0xFF	; 255
    2928:	28 30       	cpi	r18, 0x08	; 8
    292a:	90 f3       	brcs	.-28     	; 0x2910 <crc16+0x22>

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    292c:	4f 5f       	subi	r20, 0xFF	; 255
    292e:	5f 4f       	sbci	r21, 0xFF	; 255
    2930:	46 17       	cp	r20, r22
    2932:	57 07       	cpc	r21, r23
    2934:	10 f3       	brcs	.-60     	; 0x28fa <crc16+0xc>
				crc = crc << 1;
			}
		}
	}
	return (crc);
}
    2936:	08 95       	ret

00002938 <getFRAM_MOTOREncoder>:
	Returns:
		ERROR on FRAM read error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t getFRAM_MOTOREncoder(uint8_t controller, int32_t *encoderValue)
{
    2938:	0f 93       	push	r16
    293a:	1f 93       	push	r17
    293c:	cf 93       	push	r28
    293e:	df 93       	push	r29
    2940:	00 d0       	rcall	.+0      	; 0x2942 <getFRAM_MOTOREncoder+0xa>
    2942:	00 d0       	rcall	.+0      	; 0x2944 <getFRAM_MOTOREncoder+0xc>
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
    2948:	8b 01       	movw	r16, r22

	uint8_t tbuf[4];
	uint16_t memaddr;
	int32_t tempVal;

	switch (controller) {
    294a:	81 38       	cpi	r24, 0x81	; 129
    294c:	51 f0       	breq	.+20     	; 0x2962 <getFRAM_MOTOREncoder+0x2a>
    294e:	82 38       	cpi	r24, 0x82	; 130
    2950:	29 f0       	breq	.+10     	; 0x295c <getFRAM_MOTOREncoder+0x24>
    2952:	80 38       	cpi	r24, 0x80	; 128
    2954:	d1 f5       	brne	.+116    	; 0x29ca <getFRAM_MOTOREncoder+0x92>
		case MOTORAADDR:
			memaddr = ENCAFRAMADDR;
    2956:	64 e1       	ldi	r22, 0x14	; 20
    2958:	70 e0       	ldi	r23, 0x00	; 0
    295a:	05 c0       	rjmp	.+10     	; 0x2966 <getFRAM_MOTOREncoder+0x2e>
		case MOTORBADDR:
			memaddr = ENCBFRAMADDR;
			break;

		case MOTORCADDR:
			memaddr = ENCCFRAMADDR;
    295c:	6c e1       	ldi	r22, 0x1C	; 28
    295e:	70 e0       	ldi	r23, 0x00	; 0
			break;
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <getFRAM_MOTOREncoder+0x2e>
		case MOTORAADDR:
			memaddr = ENCAFRAMADDR;
			break;

		case MOTORBADDR:
			memaddr = ENCBFRAMADDR;
    2962:	68 e1       	ldi	r22, 0x18	; 24
    2964:	70 e0       	ldi	r23, 0x00	; 0

		default:
			return(ERROR);
	}

	if (read_FRAM(FRAMTWIADDR, memaddr, tbuf, 4) == ERROR) {
    2966:	24 e0       	ldi	r18, 0x04	; 4
    2968:	ae 01       	movw	r20, r28
    296a:	4f 5f       	subi	r20, 0xFF	; 255
    296c:	5f 4f       	sbci	r21, 0xFF	; 255
    296e:	80 e5       	ldi	r24, 0x50	; 80
    2970:	0e 94 c1 06 	call	0xd82	; 0xd82 <read_FRAM>
    2974:	83 36       	cpi	r24, 0x63	; 99
    2976:	51 f1       	breq	.+84     	; 0x29cc <getFRAM_MOTOREncoder+0x94>
		return(ERROR);
	}
	tempVal =  (uint32_t) tbuf[0] << 24;
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	a0 e0       	ldi	r26, 0x00	; 0
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	78 2f       	mov	r23, r24
    2982:	66 27       	eor	r22, r22
    2984:	55 27       	eor	r21, r21
    2986:	44 27       	eor	r20, r20
	tempVal |= (uint32_t) tbuf[1] << 16;
    2988:	9a 81       	ldd	r25, Y+2	; 0x02
    298a:	89 2f       	mov	r24, r25
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	a0 e0       	ldi	r26, 0x00	; 0
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	dc 01       	movw	r26, r24
    2994:	99 27       	eor	r25, r25
    2996:	88 27       	eor	r24, r24
    2998:	84 2b       	or	r24, r20
    299a:	95 2b       	or	r25, r21
    299c:	a6 2b       	or	r26, r22
    299e:	b7 2b       	or	r27, r23
	tempVal |= (uint32_t) tbuf[2] << 8;
    29a0:	4b 81       	ldd	r20, Y+3	; 0x03
    29a2:	50 e0       	ldi	r21, 0x00	; 0
    29a4:	60 e0       	ldi	r22, 0x00	; 0
    29a6:	70 e0       	ldi	r23, 0x00	; 0
    29a8:	76 2f       	mov	r23, r22
    29aa:	65 2f       	mov	r22, r21
    29ac:	54 2f       	mov	r21, r20
    29ae:	44 27       	eor	r20, r20
    29b0:	84 2b       	or	r24, r20
    29b2:	95 2b       	or	r25, r21
    29b4:	a6 2b       	or	r26, r22
    29b6:	b7 2b       	or	r27, r23
	tempVal |= (uint32_t) tbuf[3];
    29b8:	2c 81       	ldd	r18, Y+4	; 0x04
    29ba:	82 2b       	or	r24, r18
	*encoderValue = tempVal;
    29bc:	f8 01       	movw	r30, r16
    29be:	80 83       	st	Z, r24
    29c0:	91 83       	std	Z+1, r25	; 0x01
    29c2:	a2 83       	std	Z+2, r26	; 0x02
    29c4:	b3 83       	std	Z+3, r27	; 0x03

	return(NOERROR);
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	01 c0       	rjmp	.+2      	; 0x29cc <getFRAM_MOTOREncoder+0x94>
		case MOTORCADDR:
			memaddr = ENCCFRAMADDR;
			break;

		default:
			return(ERROR);
    29ca:	83 e6       	ldi	r24, 0x63	; 99
	tempVal |= (uint32_t) tbuf[3];
	*encoderValue = tempVal;

	return(NOERROR);

}
    29cc:	24 96       	adiw	r28, 0x04	; 4
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	de bf       	out	0x3e, r29	; 62
    29d2:	df 91       	pop	r29
    29d4:	cf 91       	pop	r28
    29d6:	1f 91       	pop	r17
    29d8:	0f 91       	pop	r16
    29da:	08 95       	ret

000029dc <get_MOTOREncoder>:
			Bit1: Direction (0=forward, 1-backwards)
			Bit2: Counter overflow (1=overflow occurred, clear after reading)
			Bits 3-7 are "reserved." Bit7 is 1.
------------------------------------------------------------------------------*/
uint8_t get_MOTOREncoder(uint8_t controller, uint8_t command, int32_t *value)
{
    29dc:	ef 92       	push	r14
    29de:	ff 92       	push	r15
    29e0:	0f 93       	push	r16
    29e2:	1f 93       	push	r17
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    29ec:	27 97       	sbiw	r28, 0x07	; 7
    29ee:	cd bf       	out	0x3d, r28	; 61
    29f0:	de bf       	out	0x3e, r29	; 62
    29f2:	8a 01       	movw	r16, r20
	uint8_t i, tbuf[7];
	uint16_t crcReceived, crcExpected;

	recv1_buf.nbytes = 7;			// Set up reply buffer
    29f4:	97 e0       	ldi	r25, 0x07	; 7
    29f6:	90 93 19 2b 	sts	0x2B19, r25	; 0x802b19 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    29fa:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv1_buf+0x102>
	recv1_buf.done = NO;
    29fe:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>

	tbuf[0] = controller;
    2a02:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    2a04:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);			// Send the command
    2a06:	42 e0       	ldi	r20, 0x02	; 2
    2a08:	be 01       	movw	r22, r28
    2a0a:	6f 5f       	subi	r22, 0xFF	; 255
    2a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	0e 94 0e 1b 	call	0x361c	; 0x361c <send_USART>

	start_TCB0(1);
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	0e 94 ef 19 	call	0x33de	; 0x33de <start_TCB0>
	while (recv1_buf.done == NO) {	// Wait for the reply
    2a1c:	11 c0       	rjmp	.+34     	; 0x2a40 <get_MOTOREncoder+0x64>
		asm("nop");
    2a1e:	00 00       	nop
		if (ticks > 50) {			// Timeout
    2a20:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    2a24:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    2a28:	c3 97       	sbiw	r24, 0x33	; 51
    2a2a:	50 f0       	brcs	.+20     	; 0x2a40 <get_MOTOREncoder+0x64>
			stop_TCB0();
    2a2c:	0e 94 05 1a 	call	0x340a	; 0x340a <stop_TCB0>
			printError(ERR_MTRREADENC, "get_MOTOREncoder timeout");
    2a30:	65 ea       	ldi	r22, 0xA5	; 165
    2a32:	7e e8       	ldi	r23, 0x8E	; 142
    2a34:	80 e3       	ldi	r24, 0x30	; 48
    2a36:	91 e0       	ldi	r25, 0x01	; 1
    2a38:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
			return(ERROR);
    2a3c:	83 e6       	ldi	r24, 0x63	; 99
    2a3e:	74 c0       	rjmp	.+232    	; 0x2b28 <get_MOTOREncoder+0x14c>
	tbuf[0] = controller;
	tbuf[1] = command;
	send_USART(1, tbuf, 2);			// Send the command

	start_TCB0(1);
	while (recv1_buf.done == NO) {	// Wait for the reply
    2a40:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <recv1_buf+0x103>
    2a44:	88 23       	and	r24, r24
    2a46:	59 f3       	breq	.-42     	; 0x2a1e <get_MOTOREncoder+0x42>
			stop_TCB0();
			printError(ERR_MTRREADENC, "get_MOTOREncoder timeout");
			return(ERROR);
		}
	}
	stop_TCB0();
    2a48:	0e 94 05 1a 	call	0x340a	; 0x340a <stop_TCB0>

	crcReceived = (recv1_buf.data[5] << 8) | recv1_buf.data[6];
    2a4c:	e9 e1       	ldi	r30, 0x19	; 25
    2a4e:	fa e2       	ldi	r31, 0x2A	; 42
    2a50:	e5 80       	ldd	r14, Z+5	; 0x05
    2a52:	f1 2c       	mov	r15, r1
    2a54:	fe 2c       	mov	r15, r14
    2a56:	ee 24       	eor	r14, r14
    2a58:	86 81       	ldd	r24, Z+6	; 0x06
    2a5a:	e8 2a       	or	r14, r24

	for (i = 2; i < 7; i++) {		// Compute expected crc value
    2a5c:	22 e0       	ldi	r18, 0x02	; 2
    2a5e:	0e c0       	rjmp	.+28     	; 0x2a7c <get_MOTOREncoder+0xa0>
		tbuf[i] = recv1_buf.data[i-2];
    2a60:	82 2f       	mov	r24, r18
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	fc 01       	movw	r30, r24
    2a66:	e9 5e       	subi	r30, 0xE9	; 233
    2a68:	f5 4d       	sbci	r31, 0xD5	; 213
    2a6a:	30 81       	ld	r19, Z
    2a6c:	e1 e0       	ldi	r30, 0x01	; 1
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	ec 0f       	add	r30, r28
    2a72:	fd 1f       	adc	r31, r29
    2a74:	e8 0f       	add	r30, r24
    2a76:	f9 1f       	adc	r31, r25
    2a78:	30 83       	st	Z, r19
	}
	stop_TCB0();

	crcReceived = (recv1_buf.data[5] << 8) | recv1_buf.data[6];

	for (i = 2; i < 7; i++) {		// Compute expected crc value
    2a7a:	2f 5f       	subi	r18, 0xFF	; 255
    2a7c:	27 30       	cpi	r18, 0x07	; 7
    2a7e:	80 f3       	brcs	.-32     	; 0x2a60 <get_MOTOREncoder+0x84>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 7);
    2a80:	67 e0       	ldi	r22, 0x07	; 7
    2a82:	70 e0       	ldi	r23, 0x00	; 0
    2a84:	ce 01       	movw	r24, r28
    2a86:	01 96       	adiw	r24, 0x01	; 1
    2a88:	0e 94 77 14 	call	0x28ee	; 0x28ee <crc16>

	if (crcReceived != crcExpected) {
    2a8c:	e8 16       	cp	r14, r24
    2a8e:	f9 06       	cpc	r15, r25
    2a90:	71 f0       	breq	.+28     	; 0x2aae <get_MOTOREncoder+0xd2>
		*value = 0;
    2a92:	d8 01       	movw	r26, r16
    2a94:	1d 92       	st	X+, r1
    2a96:	1d 92       	st	X+, r1
    2a98:	1d 92       	st	X+, r1
    2a9a:	1c 92       	st	X, r1
    2a9c:	13 97       	sbiw	r26, 0x03	; 3
		printError(ERR_MTRENCCRC, "get_MOTOREncoder CRC");
    2a9e:	6e eb       	ldi	r22, 0xBE	; 190
    2aa0:	7e e8       	ldi	r23, 0x8E	; 142
    2aa2:	81 e3       	ldi	r24, 0x31	; 49
    2aa4:	91 e0       	ldi	r25, 0x01	; 1
    2aa6:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
		return(ERROR);
    2aaa:	83 e6       	ldi	r24, 0x63	; 99
    2aac:	3d c0       	rjmp	.+122    	; 0x2b28 <get_MOTOREncoder+0x14c>
	}

	*value =  (uint32_t) recv1_buf.data[0] << 24;
    2aae:	29 e1       	ldi	r18, 0x19	; 25
    2ab0:	3a e2       	ldi	r19, 0x2A	; 42
    2ab2:	f9 01       	movw	r30, r18
    2ab4:	80 81       	ld	r24, Z
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	a0 e0       	ldi	r26, 0x00	; 0
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	78 2f       	mov	r23, r24
    2abe:	66 27       	eor	r22, r22
    2ac0:	55 27       	eor	r21, r21
    2ac2:	44 27       	eor	r20, r20
    2ac4:	d8 01       	movw	r26, r16
    2ac6:	4d 93       	st	X+, r20
    2ac8:	5d 93       	st	X+, r21
    2aca:	6d 93       	st	X+, r22
    2acc:	7c 93       	st	X, r23
    2ace:	13 97       	sbiw	r26, 0x03	; 3
	*value |= (uint32_t) recv1_buf.data[1] << 16;
    2ad0:	91 81       	ldd	r25, Z+1	; 0x01
    2ad2:	89 2f       	mov	r24, r25
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	a0 e0       	ldi	r26, 0x00	; 0
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	dc 01       	movw	r26, r24
    2adc:	99 27       	eor	r25, r25
    2ade:	88 27       	eor	r24, r24
    2ae0:	84 2b       	or	r24, r20
    2ae2:	95 2b       	or	r25, r21
    2ae4:	a6 2b       	or	r26, r22
    2ae6:	b7 2b       	or	r27, r23
    2ae8:	f8 01       	movw	r30, r16
    2aea:	80 83       	st	Z, r24
    2aec:	91 83       	std	Z+1, r25	; 0x01
    2aee:	a2 83       	std	Z+2, r26	; 0x02
    2af0:	b3 83       	std	Z+3, r27	; 0x03
	*value |= (uint32_t) recv1_buf.data[2] << 8;
    2af2:	f9 01       	movw	r30, r18
    2af4:	42 81       	ldd	r20, Z+2	; 0x02
    2af6:	50 e0       	ldi	r21, 0x00	; 0
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	70 e0       	ldi	r23, 0x00	; 0
    2afc:	76 2f       	mov	r23, r22
    2afe:	65 2f       	mov	r22, r21
    2b00:	54 2f       	mov	r21, r20
    2b02:	44 27       	eor	r20, r20
    2b04:	84 2b       	or	r24, r20
    2b06:	95 2b       	or	r25, r21
    2b08:	a6 2b       	or	r26, r22
    2b0a:	b7 2b       	or	r27, r23
    2b0c:	f8 01       	movw	r30, r16
    2b0e:	80 83       	st	Z, r24
    2b10:	91 83       	std	Z+1, r25	; 0x01
    2b12:	a2 83       	std	Z+2, r26	; 0x02
    2b14:	b3 83       	std	Z+3, r27	; 0x03
	*value |= (uint32_t) recv1_buf.data[3];
    2b16:	f9 01       	movw	r30, r18
    2b18:	23 81       	ldd	r18, Z+3	; 0x03
    2b1a:	82 2b       	or	r24, r18
    2b1c:	f8 01       	movw	r30, r16
    2b1e:	80 83       	st	Z, r24
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	a2 83       	std	Z+2, r26	; 0x02
    2b24:	b3 83       	std	Z+3, r27	; 0x03

//	status = recv1_buf.data[4];

	return(NOERROR);
    2b26:	80 e0       	ldi	r24, 0x00	; 0

}
    2b28:	27 96       	adiw	r28, 0x07	; 7
    2b2a:	cd bf       	out	0x3d, r28	; 61
    2b2c:	de bf       	out	0x3e, r29	; 62
    2b2e:	df 91       	pop	r29
    2b30:	cf 91       	pop	r28
    2b32:	1f 91       	pop	r17
    2b34:	0f 91       	pop	r16
    2b36:	ff 90       	pop	r15
    2b38:	ef 90       	pop	r14
    2b3a:	08 95       	ret

00002b3c <get_MOTORFloat>:
	Returns:
		ERROR: USART timeout or CRC check error
		NOERROR
------------------------------------------------------------------------------*/
uint8_t get_MOTORFloat(uint8_t controller, uint8_t command, float *value)
{
    2b3c:	af 92       	push	r10
    2b3e:	bf 92       	push	r11
    2b40:	cf 92       	push	r12
    2b42:	df 92       	push	r13
    2b44:	ef 92       	push	r14
    2b46:	ff 92       	push	r15
    2b48:	0f 93       	push	r16
    2b4a:	1f 93       	push	r17
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	00 d0       	rcall	.+0      	; 0x2b52 <get_MOTORFloat+0x16>
    2b52:	00 d0       	rcall	.+0      	; 0x2b54 <get_MOTORFloat+0x18>
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	a8 2e       	mov	r10, r24
    2b5a:	b6 2e       	mov	r11, r22
    2b5c:	7a 01       	movw	r14, r20
	uint8_t tbuf[4];
	uint16_t tempval, crcReceived, crcExpected;

	recv1_buf.nbytes = 4;				// Set up receive buffer
    2b5e:	84 e0       	ldi	r24, 0x04	; 4
    2b60:	80 93 19 2b 	sts	0x2B19, r24	; 0x802b19 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    2b64:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv1_buf+0x102>
	recv1_buf.done = NO;
    2b68:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>

	tbuf[0] = controller;
    2b6c:	a9 82       	std	Y+1, r10	; 0x01
	tbuf[1] = command;
    2b6e:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);				// Send command
    2b70:	42 e0       	ldi	r20, 0x02	; 2
    2b72:	be 01       	movw	r22, r28
    2b74:	6f 5f       	subi	r22, 0xFF	; 255
    2b76:	7f 4f       	sbci	r23, 0xFF	; 255
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	0e 94 0e 1b 	call	0x361c	; 0x361c <send_USART>

	start_TCB0(1);
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	0e 94 ef 19 	call	0x33de	; 0x33de <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
    2b86:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <recv1_buf+0x103>
    2b8a:	81 30       	cpi	r24, 0x01	; 1
    2b8c:	81 f0       	breq	.+32     	; 0x2bae <get_MOTORFloat+0x72>
			break;
		}
		if (ticks > 50) {				// Timeout
    2b8e:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    2b92:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    2b96:	c3 97       	sbiw	r24, 0x33	; 51
    2b98:	b0 f3       	brcs	.-20     	; 0x2b86 <get_MOTORFloat+0x4a>
			stop_TCB0();
    2b9a:	0e 94 05 1a 	call	0x340a	; 0x340a <stop_TCB0>
			printError(ERR_MTRREADENC, "ROBOFloat timeout");
    2b9e:	63 ed       	ldi	r22, 0xD3	; 211
    2ba0:	7e e8       	ldi	r23, 0x8E	; 142
    2ba2:	80 e3       	ldi	r24, 0x30	; 48
    2ba4:	91 e0       	ldi	r25, 0x01	; 1
    2ba6:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
			return(ERROR);
    2baa:	83 e6       	ldi	r24, 0x63	; 99
    2bac:	37 c0       	rjmp	.+110    	; 0x2c1c <get_MOTORFloat+0xe0>
		}
	}
	stop_TCB0();
    2bae:	0e 94 05 1a 	call	0x340a	; 0x340a <stop_TCB0>

	tempval = (recv1_buf.data[0] << 8) | recv1_buf.data[1];
    2bb2:	e9 e1       	ldi	r30, 0x19	; 25
    2bb4:	fa e2       	ldi	r31, 0x2A	; 42
    2bb6:	90 81       	ld	r25, Z
    2bb8:	c9 2e       	mov	r12, r25
    2bba:	d1 2c       	mov	r13, r1
    2bbc:	dc 2c       	mov	r13, r12
    2bbe:	cc 24       	eor	r12, r12
    2bc0:	81 81       	ldd	r24, Z+1	; 0x01
    2bc2:	c8 2a       	or	r12, r24
	crcReceived = (recv1_buf.data[2] << 8) | recv1_buf.data[3];
    2bc4:	02 81       	ldd	r16, Z+2	; 0x02
    2bc6:	10 e0       	ldi	r17, 0x00	; 0
    2bc8:	10 2f       	mov	r17, r16
    2bca:	00 27       	eor	r16, r16
    2bcc:	23 81       	ldd	r18, Z+3	; 0x03
    2bce:	02 2b       	or	r16, r18

	tbuf[0] = controller;
    2bd0:	a9 82       	std	Y+1, r10	; 0x01
	tbuf[1] = command;
    2bd2:	ba 82       	std	Y+2, r11	; 0x02
	tbuf[2] = recv1_buf.data[0];
    2bd4:	9b 83       	std	Y+3, r25	; 0x03
	tbuf[3] = recv1_buf.data[1];
    2bd6:	8c 83       	std	Y+4, r24	; 0x04
	crcExpected = crc16(tbuf, 4);
    2bd8:	64 e0       	ldi	r22, 0x04	; 4
    2bda:	70 e0       	ldi	r23, 0x00	; 0
    2bdc:	ce 01       	movw	r24, r28
    2bde:	01 96       	adiw	r24, 0x01	; 1
    2be0:	0e 94 77 14 	call	0x28ee	; 0x28ee <crc16>

	if (crcExpected != crcReceived) {
    2be4:	08 17       	cp	r16, r24
    2be6:	19 07       	cpc	r17, r25
    2be8:	41 f0       	breq	.+16     	; 0x2bfa <get_MOTORFloat+0xbe>
		printError(ERR_MTRENCCRC, "get_MOTORFloat CRC");
    2bea:	65 ee       	ldi	r22, 0xE5	; 229
    2bec:	7e e8       	ldi	r23, 0x8E	; 142
    2bee:	81 e3       	ldi	r24, 0x31	; 49
    2bf0:	91 e0       	ldi	r25, 0x01	; 1
    2bf2:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
		return(ERROR);
    2bf6:	83 e6       	ldi	r24, 0x63	; 99
    2bf8:	11 c0       	rjmp	.+34     	; 0x2c1c <get_MOTORFloat+0xe0>
	} else {
		*value = ((float) tempval / 10.0);
    2bfa:	b6 01       	movw	r22, r12
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <__floatunsisf>
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e2       	ldi	r20, 0x20	; 32
    2c0a:	51 e4       	ldi	r21, 0x41	; 65
    2c0c:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <__divsf3>
    2c10:	f7 01       	movw	r30, r14
    2c12:	60 83       	st	Z, r22
    2c14:	71 83       	std	Z+1, r23	; 0x01
    2c16:	82 83       	std	Z+2, r24	; 0x02
    2c18:	93 83       	std	Z+3, r25	; 0x03
		return(NOERROR);
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2c1c:	24 96       	adiw	r28, 0x04	; 4
    2c1e:	cd bf       	out	0x3d, r28	; 61
    2c20:	de bf       	out	0x3e, r29	; 62
    2c22:	df 91       	pop	r29
    2c24:	cf 91       	pop	r28
    2c26:	1f 91       	pop	r17
    2c28:	0f 91       	pop	r16
    2c2a:	ff 90       	pop	r15
    2c2c:	ef 90       	pop	r14
    2c2e:	df 90       	pop	r13
    2c30:	cf 90       	pop	r12
    2c32:	bf 90       	pop	r11
    2c34:	af 90       	pop	r10
    2c36:	08 95       	ret

00002c38 <get_MOTORInt32>:
	Returns:
		ERROR: USART timeout or CRC error
		NOERROR
------------------------------------------------------------------------------*/
uint8_t get_MOTORInt32(uint8_t controller, uint8_t command, uint32_t *value)
{
    2c38:	ef 92       	push	r14
    2c3a:	ff 92       	push	r15
    2c3c:	0f 93       	push	r16
    2c3e:	1f 93       	push	r17
    2c40:	cf 93       	push	r28
    2c42:	df 93       	push	r29
    2c44:	cd b7       	in	r28, 0x3d	; 61
    2c46:	de b7       	in	r29, 0x3e	; 62
    2c48:	26 97       	sbiw	r28, 0x06	; 6
    2c4a:	cd bf       	out	0x3d, r28	; 61
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	8a 01       	movw	r16, r20
	uint8_t i, tbuf[6];
	uint16_t crcReceived, crcExpected;
	uint32_t tempval;

	recv1_buf.nbytes = 6;				// Set up receive buffer
    2c50:	96 e0       	ldi	r25, 0x06	; 6
    2c52:	90 93 19 2b 	sts	0x2B19, r25	; 0x802b19 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    2c56:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv1_buf+0x102>
	recv1_buf.done = NO;
    2c5a:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>

	tbuf[0] = controller;
    2c5e:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    2c60:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);				// Send command
    2c62:	42 e0       	ldi	r20, 0x02	; 2
    2c64:	be 01       	movw	r22, r28
    2c66:	6f 5f       	subi	r22, 0xFF	; 255
    2c68:	7f 4f       	sbci	r23, 0xFF	; 255
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	0e 94 0e 1b 	call	0x361c	; 0x361c <send_USART>

	start_TCB0(1);
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	0e 94 ef 19 	call	0x33de	; 0x33de <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
    2c78:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <recv1_buf+0x103>
    2c7c:	81 30       	cpi	r24, 0x01	; 1
    2c7e:	61 f4       	brne	.+24     	; 0x2c98 <get_MOTORInt32+0x60>
			stop_TCB0();
    2c80:	0e 94 05 1a 	call	0x340a	; 0x340a <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "get_MOTORInt32 timeout");
			return(ERROR);
		}
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];
    2c84:	e9 e1       	ldi	r30, 0x19	; 25
    2c86:	fa e2       	ldi	r31, 0x2A	; 42
    2c88:	e4 80       	ldd	r14, Z+4	; 0x04
    2c8a:	f1 2c       	mov	r15, r1
    2c8c:	fe 2c       	mov	r15, r14
    2c8e:	ee 24       	eor	r14, r14
    2c90:	85 81       	ldd	r24, Z+5	; 0x05
    2c92:	e8 2a       	or	r14, r24

	for (i = 2; i < 6; i++) {			// Compute expected CRC
    2c94:	22 e0       	ldi	r18, 0x02	; 2
    2c96:	1e c0       	rjmp	.+60     	; 0x2cd4 <get_MOTORInt32+0x9c>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// Timeout
    2c98:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    2c9c:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    2ca0:	c3 97       	sbiw	r24, 0x33	; 51
    2ca2:	50 f3       	brcs	.-44     	; 0x2c78 <get_MOTORInt32+0x40>
			stop_TCB0();
    2ca4:	0e 94 05 1a 	call	0x340a	; 0x340a <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "get_MOTORInt32 timeout");
    2ca8:	68 ef       	ldi	r22, 0xF8	; 248
    2caa:	7e e8       	ldi	r23, 0x8E	; 142
    2cac:	8f e2       	ldi	r24, 0x2F	; 47
    2cae:	91 e0       	ldi	r25, 0x01	; 1
    2cb0:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
			return(ERROR);
    2cb4:	83 e6       	ldi	r24, 0x63	; 99
    2cb6:	54 c0       	rjmp	.+168    	; 0x2d60 <get_MOTORInt32+0x128>
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {			// Compute expected CRC
		tbuf[i] = recv1_buf.data[i-2];
    2cb8:	82 2f       	mov	r24, r18
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	e9 5e       	subi	r30, 0xE9	; 233
    2cc0:	f5 4d       	sbci	r31, 0xD5	; 213
    2cc2:	30 81       	ld	r19, Z
    2cc4:	e1 e0       	ldi	r30, 0x01	; 1
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	ec 0f       	add	r30, r28
    2cca:	fd 1f       	adc	r31, r29
    2ccc:	e8 0f       	add	r30, r24
    2cce:	f9 1f       	adc	r31, r25
    2cd0:	30 83       	st	Z, r19
		}
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {			// Compute expected CRC
    2cd2:	2f 5f       	subi	r18, 0xFF	; 255
    2cd4:	26 30       	cpi	r18, 0x06	; 6
    2cd6:	80 f3       	brcs	.-32     	; 0x2cb8 <get_MOTORInt32+0x80>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 6);
    2cd8:	66 e0       	ldi	r22, 0x06	; 6
    2cda:	70 e0       	ldi	r23, 0x00	; 0
    2cdc:	ce 01       	movw	r24, r28
    2cde:	01 96       	adiw	r24, 0x01	; 1
    2ce0:	0e 94 77 14 	call	0x28ee	; 0x28ee <crc16>

	if (crcReceived != crcExpected) {
    2ce4:	e8 16       	cp	r14, r24
    2ce6:	f9 06       	cpc	r15, r25
    2ce8:	89 f0       	breq	.+34     	; 0x2d0c <get_MOTORInt32+0xd4>
		printError(ERR_MTRENCCRC, "get_MOTORInt32 CRC error");
    2cea:	6f e0       	ldi	r22, 0x0F	; 15
    2cec:	7f e8       	ldi	r23, 0x8F	; 143
    2cee:	81 e3       	ldi	r24, 0x31	; 49
    2cf0:	91 e0       	ldi	r25, 0x01	; 1
    2cf2:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
		*value = 0x7FFFFFFF;
    2cf6:	8f ef       	ldi	r24, 0xFF	; 255
    2cf8:	9f ef       	ldi	r25, 0xFF	; 255
    2cfa:	af ef       	ldi	r26, 0xFF	; 255
    2cfc:	bf e7       	ldi	r27, 0x7F	; 127
    2cfe:	f8 01       	movw	r30, r16
    2d00:	80 83       	st	Z, r24
    2d02:	91 83       	std	Z+1, r25	; 0x01
    2d04:	a2 83       	std	Z+2, r26	; 0x02
    2d06:	b3 83       	std	Z+3, r27	; 0x03
		return(ERROR);
    2d08:	83 e6       	ldi	r24, 0x63	; 99
    2d0a:	2a c0       	rjmp	.+84     	; 0x2d60 <get_MOTORInt32+0x128>
	}

	tempval =  (uint32_t) recv1_buf.data[0] << 24;
    2d0c:	e9 e1       	ldi	r30, 0x19	; 25
    2d0e:	fa e2       	ldi	r31, 0x2A	; 42
    2d10:	80 81       	ld	r24, Z
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	a0 e0       	ldi	r26, 0x00	; 0
    2d16:	b0 e0       	ldi	r27, 0x00	; 0
    2d18:	78 2f       	mov	r23, r24
    2d1a:	66 27       	eor	r22, r22
    2d1c:	55 27       	eor	r21, r21
    2d1e:	44 27       	eor	r20, r20
	tempval |= (uint32_t) recv1_buf.data[1] << 16;
    2d20:	91 81       	ldd	r25, Z+1	; 0x01
    2d22:	89 2f       	mov	r24, r25
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	a0 e0       	ldi	r26, 0x00	; 0
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	99 27       	eor	r25, r25
    2d2e:	88 27       	eor	r24, r24
    2d30:	84 2b       	or	r24, r20
    2d32:	95 2b       	or	r25, r21
    2d34:	a6 2b       	or	r26, r22
    2d36:	b7 2b       	or	r27, r23
	tempval |= (uint32_t) recv1_buf.data[2] << 8;
    2d38:	42 81       	ldd	r20, Z+2	; 0x02
    2d3a:	50 e0       	ldi	r21, 0x00	; 0
    2d3c:	60 e0       	ldi	r22, 0x00	; 0
    2d3e:	70 e0       	ldi	r23, 0x00	; 0
    2d40:	76 2f       	mov	r23, r22
    2d42:	65 2f       	mov	r22, r21
    2d44:	54 2f       	mov	r21, r20
    2d46:	44 27       	eor	r20, r20
    2d48:	84 2b       	or	r24, r20
    2d4a:	95 2b       	or	r25, r21
    2d4c:	a6 2b       	or	r26, r22
    2d4e:	b7 2b       	or	r27, r23
	tempval |= (uint32_t) recv1_buf.data[3];
    2d50:	23 81       	ldd	r18, Z+3	; 0x03
    2d52:	82 2b       	or	r24, r18
	*value = tempval;
    2d54:	f8 01       	movw	r30, r16
    2d56:	80 83       	st	Z, r24
    2d58:	91 83       	std	Z+1, r25	; 0x01
    2d5a:	a2 83       	std	Z+2, r26	; 0x02
    2d5c:	b3 83       	std	Z+3, r27	; 0x03

	return(NOERROR);
    2d5e:	80 e0       	ldi	r24, 0x00	; 0

}
    2d60:	26 96       	adiw	r28, 0x06	; 6
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	de bf       	out	0x3e, r29	; 62
    2d66:	df 91       	pop	r29
    2d68:	cf 91       	pop	r28
    2d6a:	1f 91       	pop	r17
    2d6c:	0f 91       	pop	r16
    2d6e:	ff 90       	pop	r15
    2d70:	ef 90       	pop	r14
    2d72:	08 95       	ret

00002d74 <motorsMoving>:
		return(NOERROR);
	}
}

uint8_t motorsMoving(void)
{
    2d74:	1f 93       	push	r17
    2d76:	cf 93       	push	r28
    2d78:	df 93       	push	r29
    2d7a:	00 d0       	rcall	.+0      	; 0x2d7c <motorsMoving+0x8>
    2d7c:	00 d0       	rcall	.+0      	; 0x2d7e <motorsMoving+0xa>
    2d7e:	cd b7       	in	r28, 0x3d	; 61
    2d80:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int32_t encoderSpeed;

	for (i = MOTORAADDR; i <= MOTORCADDR; i++) {
    2d82:	10 e8       	ldi	r17, 0x80	; 128
    2d84:	10 c0       	rjmp	.+32     	; 0x2da6 <motorsMoving+0x32>
		get_MOTOREncoder(i, ROBOREADENCODERSPEED, &encoderSpeed);
    2d86:	ae 01       	movw	r20, r28
    2d88:	4f 5f       	subi	r20, 0xFF	; 255
    2d8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d8c:	62 e1       	ldi	r22, 0x12	; 18
    2d8e:	81 2f       	mov	r24, r17
    2d90:	0e 94 ee 14 	call	0x29dc	; 0x29dc <get_MOTOREncoder>
		if (encoderSpeed) {
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	9a 81       	ldd	r25, Y+2	; 0x02
    2d98:	ab 81       	ldd	r26, Y+3	; 0x03
    2d9a:	bc 81       	ldd	r27, Y+4	; 0x04
    2d9c:	89 2b       	or	r24, r25
    2d9e:	8a 2b       	or	r24, r26
    2da0:	8b 2b       	or	r24, r27
    2da2:	29 f4       	brne	.+10     	; 0x2dae <motorsMoving+0x3a>
uint8_t motorsMoving(void)
{
	uint8_t i;
	int32_t encoderSpeed;

	for (i = MOTORAADDR; i <= MOTORCADDR; i++) {
    2da4:	1f 5f       	subi	r17, 0xFF	; 255
    2da6:	13 38       	cpi	r17, 0x83	; 131
    2da8:	70 f3       	brcs	.-36     	; 0x2d86 <motorsMoving+0x12>
		if (encoderSpeed) {
			return(YES);
		}
	}

	return(NO);
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	01 c0       	rjmp	.+2      	; 0x2db0 <motorsMoving+0x3c>
	int32_t encoderSpeed;

	for (i = MOTORAADDR; i <= MOTORCADDR; i++) {
		get_MOTOREncoder(i, ROBOREADENCODERSPEED, &encoderSpeed);
		if (encoderSpeed) {
			return(YES);
    2dae:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	return(NO);

}
    2db0:	24 96       	adiw	r28, 0x04	; 4
    2db2:	cd bf       	out	0x3d, r28	; 61
    2db4:	de bf       	out	0x3e, r29	; 62
    2db6:	df 91       	pop	r29
    2db8:	cf 91       	pop	r28
    2dba:	1f 91       	pop	r17
    2dbc:	08 95       	ret

00002dbe <move_MOTORAbsolute>:
	Returns:
		ERROR on USART timeout or bad (not 0xFF) ack
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTORAbsolute(uint8_t controller, int32_t newPosition)
{
    2dbe:	cf 93       	push	r28
    2dc0:	df 93       	push	r29
    2dc2:	cd b7       	in	r28, 0x3d	; 61
    2dc4:	de b7       	in	r29, 0x3e	; 62
    2dc6:	65 97       	sbiw	r28, 0x15	; 21
    2dc8:	cd bf       	out	0x3d, r28	; 61
    2dca:	de bf       	out	0x3e, r29	; 62
	acceleration = ACCELERATION;
	deceleration = DECELERATION;
	speed = SPEED;
	buffer = 0;							// 0 -> command is buffered

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    2dcc:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <recv1_buf>
	recv1_buf.nbytes = 1;
    2dd0:	91 e0       	ldi	r25, 0x01	; 1
    2dd2:	90 93 19 2b 	sts	0x2B19, r25	; 0x802b19 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    2dd6:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv1_buf+0x102>
	recv1_buf.done = NO;
    2dda:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>

	tbuf[0] = controller;
    2dde:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBODRIVETO;				// Command 65
    2de0:	81 e4       	ldi	r24, 0x41	; 65
    2de2:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (acceleration >> 24) & 0XFF;
    2de4:	1b 82       	std	Y+3, r1	; 0x03
	tbuf[3] = (acceleration >> 16) & 0xFF;
    2de6:	1c 82       	std	Y+4, r1	; 0x04
	tbuf[4] = (acceleration >> 8) & 0xFF;
    2de8:	80 e2       	ldi	r24, 0x20	; 32
    2dea:	8d 83       	std	Y+5, r24	; 0x05
	tbuf[5] = (acceleration) & 0xFF;
    2dec:	1e 82       	std	Y+6, r1	; 0x06
	tbuf[6] = (speed >> 24) & 0xFF;
    2dee:	1f 82       	std	Y+7, r1	; 0x07
	tbuf[7] = (speed >> 16) & 0xFF;
    2df0:	18 86       	std	Y+8, r1	; 0x08
	tbuf[8] = (speed >> 8) & 0xFF;
    2df2:	90 e4       	ldi	r25, 0x40	; 64
    2df4:	99 87       	std	Y+9, r25	; 0x09
	tbuf[9] = (speed) & 0xFF;
    2df6:	1a 86       	std	Y+10, r1	; 0x0a
	tbuf[10] = (deceleration >> 24) & 0xFF;
    2df8:	1b 86       	std	Y+11, r1	; 0x0b
	tbuf[11] = (deceleration >> 16) & 0xFF;
    2dfa:	1c 86       	std	Y+12, r1	; 0x0c
	tbuf[12] = (deceleration >> 8) & 0xFF;
    2dfc:	8d 87       	std	Y+13, r24	; 0x0d
	tbuf[13] = (deceleration) & 0xFF;
    2dfe:	1e 86       	std	Y+14, r1	; 0x0e
	tbuf[14] = (newPosition >> 24) & 0xFF;
    2e00:	7f 87       	std	Y+15, r23	; 0x0f
	tbuf[15] = (newPosition >> 16) & 0xFF;
    2e02:	68 8b       	std	Y+16, r22	; 0x10
	tbuf[16] = (newPosition >> 8) & 0xFF;
    2e04:	59 8b       	std	Y+17, r21	; 0x11
	tbuf[17] = (newPosition) & 0xFF;
    2e06:	4a 8b       	std	Y+18, r20	; 0x12
	tbuf[18] = buffer;
    2e08:	1b 8a       	std	Y+19, r1	; 0x13
	crc = crc16(tbuf, 19);
    2e0a:	63 e1       	ldi	r22, 0x13	; 19
    2e0c:	70 e0       	ldi	r23, 0x00	; 0
    2e0e:	ce 01       	movw	r24, r28
    2e10:	01 96       	adiw	r24, 0x01	; 1
    2e12:	0e 94 77 14 	call	0x28ee	; 0x28ee <crc16>
	tbuf[19] = (crc >> 8) & 0xFF;
    2e16:	9c 8b       	std	Y+20, r25	; 0x14
	tbuf[20] = crc & 0xFF;
    2e18:	8d 8b       	std	Y+21, r24	; 0x15

	send_USART(1, tbuf, 21);			// Send command
    2e1a:	45 e1       	ldi	r20, 0x15	; 21
    2e1c:	be 01       	movw	r22, r28
    2e1e:	6f 5f       	subi	r22, 0xFF	; 255
    2e20:	7f 4f       	sbci	r23, 0xFF	; 255
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	0e 94 0e 1b 	call	0x361c	; 0x361c <send_USART>

	start_TCB0(1);						// Start 1 ms ticks timer
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	0e 94 ef 19 	call	0x33de	; 0x33de <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    2e30:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <recv1_buf+0x103>
    2e34:	81 30       	cpi	r24, 0x01	; 1
    2e36:	41 f4       	brne	.+16     	; 0x2e48 <move_MOTORAbsolute+0x8a>
			stop_TCB0();
    2e38:	0e 94 05 1a 	call	0x340a	; 0x340a <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute timeout");
			return(ERROR);
		}
	}

	if (recv1_buf.data[0] != 0xFF) {
    2e3c:	80 91 19 2a 	lds	r24, 0x2A19	; 0x802a19 <recv1_buf>
    2e40:	8f 3f       	cpi	r24, 0xFF	; 255
    2e42:	91 f4       	brne	.+36     	; 0x2e68 <move_MOTORAbsolute+0xaa>
		printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute ack");		
		return(ERROR);
	}

	return(NOERROR);
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	17 c0       	rjmp	.+46     	; 0x2e76 <move_MOTORAbsolute+0xb8>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// 4 ms just barely works at 38400 baud
    2e48:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    2e4c:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    2e50:	c3 97       	sbiw	r24, 0x33	; 51
    2e52:	70 f3       	brcs	.-36     	; 0x2e30 <move_MOTORAbsolute+0x72>
			stop_TCB0();
    2e54:	0e 94 05 1a 	call	0x340a	; 0x340a <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute timeout");
    2e58:	68 e2       	ldi	r22, 0x28	; 40
    2e5a:	7f e8       	ldi	r23, 0x8F	; 143
    2e5c:	8f e2       	ldi	r24, 0x2F	; 47
    2e5e:	91 e0       	ldi	r25, 0x01	; 1
    2e60:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
			return(ERROR);
    2e64:	83 e6       	ldi	r24, 0x63	; 99
    2e66:	07 c0       	rjmp	.+14     	; 0x2e76 <move_MOTORAbsolute+0xb8>
		}
	}

	if (recv1_buf.data[0] != 0xFF) {
		printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute ack");		
    2e68:	63 e4       	ldi	r22, 0x43	; 67
    2e6a:	7f e8       	ldi	r23, 0x8F	; 143
    2e6c:	8f e2       	ldi	r24, 0x2F	; 47
    2e6e:	91 e0       	ldi	r25, 0x01	; 1
    2e70:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
		return(ERROR);
    2e74:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);
}
    2e76:	65 96       	adiw	r28, 0x15	; 21
    2e78:	cd bf       	out	0x3d, r28	; 61
    2e7a:	de bf       	out	0x3e, r29	; 62
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	08 95       	ret

00002e82 <move_MOTOR>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR(uint8_t cstack)
{
    2e82:	cf 92       	push	r12
    2e84:	df 92       	push	r13
    2e86:	ef 92       	push	r14
    2e88:	ff 92       	push	r15
    2e8a:	1f 93       	push	r17
    2e8c:	cf 93       	push	r28
    2e8e:	df 93       	push	r29
    2e90:	00 d0       	rcall	.+0      	; 0x2e92 <move_MOTOR+0x10>
    2e92:	00 d0       	rcall	.+0      	; 0x2e94 <move_MOTOR+0x12>
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62

	uint8_t motor, controller, retval;
	int32_t newPosition, currentPosition;

	motor = pcmd[cstack].cobject;
    2e98:	e8 2e       	mov	r14, r24
    2e9a:	f1 2c       	mov	r15, r1
    2e9c:	84 e3       	ldi	r24, 0x34	; 52
    2e9e:	8e 9d       	mul	r24, r14
    2ea0:	f0 01       	movw	r30, r0
    2ea2:	8f 9d       	mul	r24, r15
    2ea4:	f0 0d       	add	r31, r0
    2ea6:	11 24       	eor	r1, r1
    2ea8:	e8 5f       	subi	r30, 0xF8	; 248
    2eaa:	f7 4d       	sbci	r31, 0xD7	; 215
    2eac:	81 81       	ldd	r24, Z+1	; 0x01
	switch(motor) {
    2eae:	81 34       	cpi	r24, 0x41	; 65
    2eb0:	d0 f0       	brcs	.+52     	; 0x2ee6 <move_MOTOR+0x64>
    2eb2:	84 34       	cpi	r24, 0x44	; 68
    2eb4:	28 f0       	brcs	.+10     	; 0x2ec0 <move_MOTOR+0x3e>
    2eb6:	9f e9       	ldi	r25, 0x9F	; 159
    2eb8:	98 0f       	add	r25, r24
    2eba:	93 30       	cpi	r25, 0x03	; 3
    2ebc:	40 f0       	brcs	.+16     	; 0x2ece <move_MOTOR+0x4c>
    2ebe:	13 c0       	rjmp	.+38     	; 0x2ee6 <move_MOTOR+0x64>
		case 'A':
		case 'B':
		case 'C':
			controller = motor + 63;
    2ec0:	1f e3       	ldi	r17, 0x3F	; 63
    2ec2:	18 0f       	add	r17, r24
			currentPosition = 0;
    2ec4:	19 82       	std	Y+1, r1	; 0x01
    2ec6:	1a 82       	std	Y+2, r1	; 0x02
    2ec8:	1b 82       	std	Y+3, r1	; 0x03
    2eca:	1c 82       	std	Y+4, r1	; 0x04
			break;
    2ecc:	14 c0       	rjmp	.+40     	; 0x2ef6 <move_MOTOR+0x74>

		case 'a':
		case 'b':
		case 'c':
			controller = motor + 31;
    2ece:	1f e1       	ldi	r17, 0x1F	; 31
    2ed0:	18 0f       	add	r17, r24
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &currentPosition);
    2ed2:	ae 01       	movw	r20, r28
    2ed4:	4f 5f       	subi	r20, 0xFF	; 255
    2ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ed8:	60 e1       	ldi	r22, 0x10	; 16
    2eda:	81 2f       	mov	r24, r17
    2edc:	0e 94 ee 14 	call	0x29dc	; 0x29dc <get_MOTOREncoder>
			if (retval == ERROR) {
    2ee0:	83 36       	cpi	r24, 0x63	; 99
    2ee2:	49 f4       	brne	.+18     	; 0x2ef6 <move_MOTOR+0x74>
    2ee4:	39 c0       	rjmp	.+114    	; 0x2f58 <move_MOTOR+0xd6>
				return(ERROR);
			}
			break;

		default:
			printError(ERR_UNKNOWNMTR, "move_MOTOR unknown motor");
    2ee6:	6a e5       	ldi	r22, 0x5A	; 90
    2ee8:	7f e8       	ldi	r23, 0x8F	; 143
    2eea:	8d e2       	ldi	r24, 0x2D	; 45
    2eec:	91 e0       	ldi	r25, 0x01	; 1
    2eee:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
			return(ERROR);
    2ef2:	83 e6       	ldi	r24, 0x63	; 99
    2ef4:	32 c0       	rjmp	.+100    	; 0x2f5a <move_MOTOR+0xd8>
			break;	
	}

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    2ef6:	84 e3       	ldi	r24, 0x34	; 52
    2ef8:	8e 9d       	mul	r24, r14
    2efa:	f0 01       	movw	r30, r0
    2efc:	8f 9d       	mul	r24, r15
    2efe:	f0 0d       	add	r31, r0
    2f00:	11 24       	eor	r1, r1
    2f02:	e8 5f       	subi	r30, 0xF8	; 248
    2f04:	f7 4d       	sbci	r31, 0xD7	; 215
    2f06:	82 81       	ldd	r24, Z+2	; 0x02
    2f08:	81 11       	cpse	r24, r1
    2f0a:	08 c0       	rjmp	.+16     	; 0x2f1c <move_MOTOR+0x9a>
		printError(ERR_MTRNULLMOVE, "move_MOTOR no position or increment");
    2f0c:	63 e7       	ldi	r22, 0x73	; 115
    2f0e:	7f e8       	ldi	r23, 0x8F	; 143
    2f10:	83 e3       	ldi	r24, 0x33	; 51
    2f12:	91 e0       	ldi	r25, 0x01	; 1
    2f14:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
		return(ERROR);
    2f18:	83 e6       	ldi	r24, 0x63	; 99
    2f1a:	1f c0       	rjmp	.+62     	; 0x2f5a <move_MOTOR+0xd8>
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);
    2f1c:	24 e3       	ldi	r18, 0x34	; 52
    2f1e:	2e 9d       	mul	r18, r14
    2f20:	c0 01       	movw	r24, r0
    2f22:	2f 9d       	mul	r18, r15
    2f24:	90 0d       	add	r25, r0
    2f26:	11 24       	eor	r1, r1
    2f28:	86 5f       	subi	r24, 0xF6	; 246
    2f2a:	97 4d       	sbci	r25, 0xD7	; 215
    2f2c:	0e 94 80 23 	call	0x4700	; 0x4700 <atol>
    2f30:	9b 01       	movw	r18, r22
    2f32:	ac 01       	movw	r20, r24
    2f34:	ac e0       	ldi	r26, 0x0C	; 12
    2f36:	b1 e0       	ldi	r27, 0x01	; 1
    2f38:	0e 94 ff 22 	call	0x45fe	; 0x45fe <__muluhisi3>
    2f3c:	c9 80       	ldd	r12, Y+1	; 0x01
    2f3e:	da 80       	ldd	r13, Y+2	; 0x02
    2f40:	eb 80       	ldd	r14, Y+3	; 0x03
    2f42:	fc 80       	ldd	r15, Y+4	; 0x04
    2f44:	ab 01       	movw	r20, r22
    2f46:	bc 01       	movw	r22, r24
    2f48:	4c 0d       	add	r20, r12
    2f4a:	5d 1d       	adc	r21, r13
    2f4c:	6e 1d       	adc	r22, r14
    2f4e:	7f 1d       	adc	r23, r15
	return(move_MOTORAbsolute(controller, newPosition));
    2f50:	81 2f       	mov	r24, r17
    2f52:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <move_MOTORAbsolute>
    2f56:	01 c0       	rjmp	.+2      	; 0x2f5a <move_MOTOR+0xd8>
		case 'b':
		case 'c':
			controller = motor + 31;
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &currentPosition);
			if (retval == ERROR) {
				return(ERROR);
    2f58:	83 e6       	ldi	r24, 0x63	; 99
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);
	return(move_MOTORAbsolute(controller, newPosition));

}
    2f5a:	24 96       	adiw	r28, 0x04	; 4
    2f5c:	cd bf       	out	0x3d, r28	; 61
    2f5e:	de bf       	out	0x3e, r29	; 62
    2f60:	df 91       	pop	r29
    2f62:	cf 91       	pop	r28
    2f64:	1f 91       	pop	r17
    2f66:	ff 90       	pop	r15
    2f68:	ef 90       	pop	r14
    2f6a:	df 90       	pop	r13
    2f6c:	cf 90       	pop	r12
    2f6e:	08 95       	ret

00002f70 <putFRAM_MOTOREncoder>:
	Returns:
		ERROR on get_MOTOREncoder or write_FRAM failure
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t putFRAM_MOTOREncoder(uint8_t controller)
{
    2f70:	8f 92       	push	r8
    2f72:	9f 92       	push	r9
    2f74:	af 92       	push	r10
    2f76:	bf 92       	push	r11
    2f78:	ff 92       	push	r15
    2f7a:	0f 93       	push	r16
    2f7c:	1f 93       	push	r17
    2f7e:	cf 93       	push	r28
    2f80:	df 93       	push	r29
    2f82:	cd b7       	in	r28, 0x3d	; 61
    2f84:	de b7       	in	r29, 0x3e	; 62
    2f86:	28 97       	sbiw	r28, 0x08	; 8
    2f88:	cd bf       	out	0x3d, r28	; 61
    2f8a:	de bf       	out	0x3e, r29	; 62

	uint8_t tbuf[4];
	uint16_t memaddr;
	int32_t oldencoderValue, encoderValue;

	switch (controller) {
    2f8c:	81 38       	cpi	r24, 0x81	; 129
    2f8e:	59 f0       	breq	.+22     	; 0x2fa6 <putFRAM_MOTOREncoder+0x36>
    2f90:	82 38       	cpi	r24, 0x82	; 130
    2f92:	31 f0       	breq	.+12     	; 0x2fa0 <putFRAM_MOTOREncoder+0x30>
    2f94:	80 38       	cpi	r24, 0x80	; 128
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <putFRAM_MOTOREncoder+0x2a>
    2f98:	57 c0       	rjmp	.+174    	; 0x3048 <putFRAM_MOTOREncoder+0xd8>
		case MOTORAADDR:
			memaddr = ENCAFRAMADDR;
    2f9a:	04 e1       	ldi	r16, 0x14	; 20
    2f9c:	10 e0       	ldi	r17, 0x00	; 0
    2f9e:	05 c0       	rjmp	.+10     	; 0x2faa <putFRAM_MOTOREncoder+0x3a>
		case MOTORBADDR:
			memaddr = ENCBFRAMADDR;
			break;

		case MOTORCADDR:
			memaddr = ENCCFRAMADDR;
    2fa0:	0c e1       	ldi	r16, 0x1C	; 28
    2fa2:	10 e0       	ldi	r17, 0x00	; 0
			break;
    2fa4:	02 c0       	rjmp	.+4      	; 0x2faa <putFRAM_MOTOREncoder+0x3a>
		case MOTORAADDR:
			memaddr = ENCAFRAMADDR;
			break;

		case MOTORBADDR:
			memaddr = ENCBFRAMADDR;
    2fa6:	08 e1       	ldi	r16, 0x18	; 24
    2fa8:	10 e0       	ldi	r17, 0x00	; 0
    2faa:	f8 2e       	mov	r15, r24

		default:
			return(ERROR);
	}

	if (read_FRAM(FRAMTWIADDR, memaddr, tbuf, 4) == ERROR) {
    2fac:	24 e0       	ldi	r18, 0x04	; 4
    2fae:	ae 01       	movw	r20, r28
    2fb0:	4f 5f       	subi	r20, 0xFF	; 255
    2fb2:	5f 4f       	sbci	r21, 0xFF	; 255
    2fb4:	b8 01       	movw	r22, r16
    2fb6:	80 e5       	ldi	r24, 0x50	; 80
    2fb8:	0e 94 c1 06 	call	0xd82	; 0xd82 <read_FRAM>
    2fbc:	83 36       	cpi	r24, 0x63	; 99
    2fbe:	09 f4       	brne	.+2      	; 0x2fc2 <putFRAM_MOTOREncoder+0x52>
    2fc0:	46 c0       	rjmp	.+140    	; 0x304e <putFRAM_MOTOREncoder+0xde>
		return(ERROR);
	}

	oldencoderValue =  (uint32_t) tbuf[0] << 24;
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	a0 e0       	ldi	r26, 0x00	; 0
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	78 2f       	mov	r23, r24
    2fcc:	66 27       	eor	r22, r22
    2fce:	55 27       	eor	r21, r21
    2fd0:	44 27       	eor	r20, r20
	oldencoderValue |= (uint32_t) tbuf[1] << 16;
    2fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd4:	89 2f       	mov	r24, r25
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	a0 e0       	ldi	r26, 0x00	; 0
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	dc 01       	movw	r26, r24
    2fde:	99 27       	eor	r25, r25
    2fe0:	88 27       	eor	r24, r24
    2fe2:	84 2b       	or	r24, r20
    2fe4:	95 2b       	or	r25, r21
    2fe6:	a6 2b       	or	r26, r22
    2fe8:	b7 2b       	or	r27, r23
	oldencoderValue |= (uint32_t) tbuf[2] << 8;
    2fea:	4b 81       	ldd	r20, Y+3	; 0x03
    2fec:	50 e0       	ldi	r21, 0x00	; 0
    2fee:	60 e0       	ldi	r22, 0x00	; 0
    2ff0:	70 e0       	ldi	r23, 0x00	; 0
    2ff2:	76 2f       	mov	r23, r22
    2ff4:	65 2f       	mov	r22, r21
    2ff6:	54 2f       	mov	r21, r20
    2ff8:	44 27       	eor	r20, r20
    2ffa:	84 2b       	or	r24, r20
    2ffc:	95 2b       	or	r25, r21
    2ffe:	a6 2b       	or	r26, r22
    3000:	b7 2b       	or	r27, r23
	oldencoderValue |= (uint32_t) tbuf[3];
    3002:	2c 81       	ldd	r18, Y+4	; 0x04
    3004:	4c 01       	movw	r8, r24
    3006:	5d 01       	movw	r10, r26
    3008:	82 2a       	or	r8, r18

	if (get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &encoderValue) == ERROR) {
    300a:	ae 01       	movw	r20, r28
    300c:	4b 5f       	subi	r20, 0xFB	; 251
    300e:	5f 4f       	sbci	r21, 0xFF	; 255
    3010:	60 e1       	ldi	r22, 0x10	; 16
    3012:	8f 2d       	mov	r24, r15
    3014:	0e 94 ee 14 	call	0x29dc	; 0x29dc <get_MOTOREncoder>
    3018:	83 36       	cpi	r24, 0x63	; 99
    301a:	c9 f0       	breq	.+50     	; 0x304e <putFRAM_MOTOREncoder+0xde>
		return(ERROR);
	}

	if (oldencoderValue == encoderValue) {
    301c:	8d 81       	ldd	r24, Y+5	; 0x05
    301e:	9e 81       	ldd	r25, Y+6	; 0x06
    3020:	af 81       	ldd	r26, Y+7	; 0x07
    3022:	b8 85       	ldd	r27, Y+8	; 0x08
    3024:	88 16       	cp	r8, r24
    3026:	99 06       	cpc	r9, r25
    3028:	aa 06       	cpc	r10, r26
    302a:	bb 06       	cpc	r11, r27
    302c:	79 f0       	breq	.+30     	; 0x304c <putFRAM_MOTOREncoder+0xdc>
		return(NOERROR);
	}

	tbuf[0] = (encoderValue >> 24) & 0xFF;
    302e:	b9 83       	std	Y+1, r27	; 0x01
	tbuf[1] = (encoderValue >> 16) & 0xFF;
    3030:	aa 83       	std	Y+2, r26	; 0x02
	tbuf[2] = (encoderValue >> 8) & 0xFF;
    3032:	9b 83       	std	Y+3, r25	; 0x03
	tbuf[3] = encoderValue & 0xFF;
    3034:	8c 83       	std	Y+4, r24	; 0x04

	return(write_FRAM(FRAMTWIADDR, memaddr, tbuf, 4));
    3036:	24 e0       	ldi	r18, 0x04	; 4
    3038:	ae 01       	movw	r20, r28
    303a:	4f 5f       	subi	r20, 0xFF	; 255
    303c:	5f 4f       	sbci	r21, 0xFF	; 255
    303e:	b8 01       	movw	r22, r16
    3040:	80 e5       	ldi	r24, 0x50	; 80
    3042:	0e 94 3f 07 	call	0xe7e	; 0xe7e <write_FRAM>
    3046:	03 c0       	rjmp	.+6      	; 0x304e <putFRAM_MOTOREncoder+0xde>
		case MOTORCADDR:
			memaddr = ENCCFRAMADDR;
			break;

		default:
			return(ERROR);
    3048:	83 e6       	ldi	r24, 0x63	; 99
    304a:	01 c0       	rjmp	.+2      	; 0x304e <putFRAM_MOTOREncoder+0xde>
	if (get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &encoderValue) == ERROR) {
		return(ERROR);
	}

	if (oldencoderValue == encoderValue) {
		return(NOERROR);
    304c:	80 e0       	ldi	r24, 0x00	; 0
	tbuf[2] = (encoderValue >> 8) & 0xFF;
	tbuf[3] = encoderValue & 0xFF;

	return(write_FRAM(FRAMTWIADDR, memaddr, tbuf, 4));

}
    304e:	28 96       	adiw	r28, 0x08	; 8
    3050:	cd bf       	out	0x3d, r28	; 61
    3052:	de bf       	out	0x3e, r29	; 62
    3054:	df 91       	pop	r29
    3056:	cf 91       	pop	r28
    3058:	1f 91       	pop	r17
    305a:	0f 91       	pop	r16
    305c:	ff 90       	pop	r15
    305e:	bf 90       	pop	r11
    3060:	af 90       	pop	r10
    3062:	9f 90       	pop	r9
    3064:	8f 90       	pop	r8
    3066:	08 95       	ret

00003068 <saveFRAM_MOTOREncoders>:

uint8_t saveFRAM_MOTOREncoders(void)
{
    3068:	cf 93       	push	r28
    306a:	df 93       	push	r29
	uint8_t i, error = 0, retval;
    306c:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = MOTORAADDR; i <= MOTORCADDR; i++) {
    306e:	c0 e8       	ldi	r28, 0x80	; 128
    3070:	05 c0       	rjmp	.+10     	; 0x307c <saveFRAM_MOTOREncoders+0x14>
		retval = putFRAM_MOTOREncoder(i);
    3072:	8c 2f       	mov	r24, r28
    3074:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <putFRAM_MOTOREncoder>
		error += retval;
    3078:	d8 0f       	add	r29, r24

uint8_t saveFRAM_MOTOREncoders(void)
{
	uint8_t i, error = 0, retval;

	for (i = MOTORAADDR; i <= MOTORCADDR; i++) {
    307a:	cf 5f       	subi	r28, 0xFF	; 255
    307c:	c3 38       	cpi	r28, 0x83	; 131
    307e:	c8 f3       	brcs	.-14     	; 0x3072 <saveFRAM_MOTOREncoders+0xa>
		retval = putFRAM_MOTOREncoder(i);
		error += retval;
	}
	if (error) {
    3080:	dd 23       	and	r29, r29
    3082:	11 f0       	breq	.+4      	; 0x3088 <saveFRAM_MOTOREncoders+0x20>
		return(ERROR);
    3084:	83 e6       	ldi	r24, 0x63	; 99
    3086:	01 c0       	rjmp	.+2      	; 0x308a <saveFRAM_MOTOREncoders+0x22>
	} else {
		return(NOERROR);
    3088:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    308a:	df 91       	pop	r29
    308c:	cf 91       	pop	r28
    308e:	08 95       	ret

00003090 <set_MOTOREncoder>:
		Does not print an error. It's only called at reboot. We should have a
		double-check at startup to make sure the encoder values agree before
		a move.
------------------------------------------------------------------------------*/
uint8_t set_MOTOREncoder(uint8_t controller, int32_t value)
{
    3090:	cf 93       	push	r28
    3092:	df 93       	push	r29
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
    3098:	26 97       	sbiw	r28, 0x06	; 6
    309a:	cd bf       	out	0x3d, r28	; 61
    309c:	de bf       	out	0x3e, r29	; 62

	uint8_t tbuf[6];

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    309e:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <recv1_buf>
	recv1_buf.nbytes = 1;
    30a2:	91 e0       	ldi	r25, 0x01	; 1
    30a4:	90 93 19 2b 	sts	0x2B19, r25	; 0x802b19 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    30a8:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv1_buf+0x102>
	recv1_buf.done = NO;
    30ac:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>

	tbuf[0] = controller;
    30b0:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBOSETENCODER;
    30b2:	86 e1       	ldi	r24, 0x16	; 22
    30b4:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (value >> 24) & 0xFF;
    30b6:	7b 83       	std	Y+3, r23	; 0x03
	tbuf[3] = (value >> 16) & 0xFF;
    30b8:	6c 83       	std	Y+4, r22	; 0x04
	tbuf[4] = (value >> 8) & 0xFF;
    30ba:	5d 83       	std	Y+5, r21	; 0x05
	tbuf[5] = value & 0xFF;
    30bc:	4e 83       	std	Y+6, r20	; 0x06

	send_USART(1, tbuf, 6);				// Send the command
    30be:	46 e0       	ldi	r20, 0x06	; 6
    30c0:	be 01       	movw	r22, r28
    30c2:	6f 5f       	subi	r22, 0xFF	; 255
    30c4:	7f 4f       	sbci	r23, 0xFF	; 255
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	0e 94 0e 1b 	call	0x361c	; 0x361c <send_USART>

	start_TCB0(1);						// Start 1 ms ticks timer
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	0e 94 ef 19 	call	0x33de	; 0x33de <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    30d4:	80 91 1c 2b 	lds	r24, 0x2B1C	; 0x802b1c <recv1_buf+0x103>
    30d8:	81 30       	cpi	r24, 0x01	; 1
    30da:	41 f4       	brne	.+16     	; 0x30ec <set_MOTOREncoder+0x5c>
			stop_TCB0();
    30dc:	0e 94 05 1a 	call	0x340a	; 0x340a <stop_TCB0>
			stop_TCB0();
			return(ERROR);
		}
	}

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
    30e0:	80 91 19 2a 	lds	r24, 0x2A19	; 0x802a19 <recv1_buf>
    30e4:	8f 3f       	cpi	r24, 0xFF	; 255
    30e6:	61 f0       	breq	.+24     	; 0x3100 <set_MOTOREncoder+0x70>
		return(ERROR);
    30e8:	83 e6       	ldi	r24, 0x63	; 99
    30ea:	0b c0       	rjmp	.+22     	; 0x3102 <set_MOTOREncoder+0x72>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// 4 ms barely works at 38400 baud
    30ec:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    30f0:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    30f4:	c3 97       	sbiw	r24, 0x33	; 51
    30f6:	70 f3       	brcs	.-36     	; 0x30d4 <set_MOTOREncoder+0x44>
			stop_TCB0();
    30f8:	0e 94 05 1a 	call	0x340a	; 0x340a <stop_TCB0>
			return(ERROR);
    30fc:	83 e6       	ldi	r24, 0x63	; 99
    30fe:	01 c0       	rjmp	.+2      	; 0x3102 <set_MOTOREncoder+0x72>

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
		return(ERROR);
	}

	return(NOERROR);
    3100:	80 e0       	ldi	r24, 0x00	; 0

}
    3102:	26 96       	adiw	r28, 0x06	; 6
    3104:	cd bf       	out	0x3d, r28	; 61
    3106:	de bf       	out	0x3e, r29	; 62
    3108:	df 91       	pop	r29
    310a:	cf 91       	pop	r28
    310c:	08 95       	ret

0000310e <init_MOTORS>:
	Returns
		ERROR if set_MOTOREncoder fails
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    310e:	ef 92       	push	r14
    3110:	ff 92       	push	r15
    3112:	0f 93       	push	r16
    3114:	1f 93       	push	r17
    3116:	cf 93       	push	r28
    3118:	df 93       	push	r29
    311a:	00 d0       	rcall	.+0      	; 0x311c <init_MOTORS+0xe>
    311c:	00 d0       	rcall	.+0      	; 0x311e <init_MOTORS+0x10>
    311e:	cd b7       	in	r28, 0x3d	; 61
    3120:	de b7       	in	r29, 0x3e	; 62

	static uint8_t firstTime[3] = {YES, YES, YES};
	uint8_t controller, error = 0;
	int32_t encoderValue;

	timerSAVEENCODER = 0;
    3122:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerSAVEENCODER>
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;
    3126:	8b e0       	ldi	r24, 0x0B	; 11
    3128:	80 93 15 2a 	sts	0x2A15, r24	; 0x802a15 <timeoutSAVEENCODER>
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{

	static uint8_t firstTime[3] = {YES, YES, YES};
	uint8_t controller, error = 0;
    312c:	00 e0       	ldi	r16, 0x00	; 0
	int32_t encoderValue;

	timerSAVEENCODER = 0;
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;

	for (controller = 128; controller < 131; controller++) {
    312e:	10 e8       	ldi	r17, 0x80	; 128
    3130:	26 c0       	rjmp	.+76     	; 0x317e <init_MOTORS+0x70>
//		encoderValue = -22 * ROBOCOUNTSPERMICRON;	// Proxy for now		
		// get saved encoder value from FRAM
		getFRAM_MOTOREncoder(controller, &encoderValue);
    3132:	be 01       	movw	r22, r28
    3134:	6f 5f       	subi	r22, 0xFF	; 255
    3136:	7f 4f       	sbci	r23, 0xFF	; 255
    3138:	81 2f       	mov	r24, r17
    313a:	0e 94 9c 14 	call	0x2938	; 0x2938 <getFRAM_MOTOREncoder>
		if (set_MOTOREncoder(controller, encoderValue) == ERROR) {
    313e:	49 81       	ldd	r20, Y+1	; 0x01
    3140:	5a 81       	ldd	r21, Y+2	; 0x02
    3142:	6b 81       	ldd	r22, Y+3	; 0x03
    3144:	7c 81       	ldd	r23, Y+4	; 0x04
    3146:	81 2f       	mov	r24, r17
    3148:	0e 94 48 18 	call	0x3090	; 0x3090 <set_MOTOREncoder>
    314c:	83 36       	cpi	r24, 0x63	; 99
    314e:	b1 f4       	brne	.+44     	; 0x317c <init_MOTORS+0x6e>
			if (!firstTime[controller - 128]) {
    3150:	e1 2e       	mov	r14, r17
    3152:	f1 2c       	mov	r15, r1
    3154:	80 e8       	ldi	r24, 0x80	; 128
    3156:	e8 1a       	sub	r14, r24
    3158:	f1 08       	sbc	r15, r1
    315a:	f7 01       	movw	r30, r14
    315c:	e0 50       	subi	r30, 0x00	; 0
    315e:	f8 4d       	sbci	r31, 0xD8	; 216
    3160:	80 81       	ld	r24, Z
    3162:	81 11       	cpse	r24, r1
    3164:	0a c0       	rjmp	.+20     	; 0x317a <init_MOTORS+0x6c>
				printError(ERR_MTRSETENC, "init_MOTORS");
    3166:	67 e9       	ldi	r22, 0x97	; 151
    3168:	7f e8       	ldi	r23, 0x8F	; 143
    316a:	82 e3       	ldi	r24, 0x32	; 50
    316c:	91 e0       	ldi	r25, 0x01	; 1
    316e:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
				firstTime[controller - 128] = NO;
    3172:	f7 01       	movw	r30, r14
    3174:	e0 50       	subi	r30, 0x00	; 0
    3176:	f8 4d       	sbci	r31, 0xD8	; 216
    3178:	10 82       	st	Z, r1
			}
			error++;
    317a:	0f 5f       	subi	r16, 0xFF	; 255
	int32_t encoderValue;

	timerSAVEENCODER = 0;
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;

	for (controller = 128; controller < 131; controller++) {
    317c:	1f 5f       	subi	r17, 0xFF	; 255
    317e:	13 38       	cpi	r17, 0x83	; 131
    3180:	c0 f2       	brcs	.-80     	; 0x3132 <init_MOTORS+0x24>
				firstTime[controller - 128] = NO;
			}
			error++;
		}
	}
	if (error) {
    3182:	00 23       	and	r16, r16
    3184:	11 f0       	breq	.+4      	; 0x318a <init_MOTORS+0x7c>
		return(ERROR);
    3186:	83 e6       	ldi	r24, 0x63	; 99
    3188:	01 c0       	rjmp	.+2      	; 0x318c <init_MOTORS+0x7e>
	} else {
		return(NOERROR);
    318a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    318c:	24 96       	adiw	r28, 0x04	; 4
    318e:	cd bf       	out	0x3d, r28	; 61
    3190:	de bf       	out	0x3e, r29	; 62
    3192:	df 91       	pop	r29
    3194:	cf 91       	pop	r28
    3196:	1f 91       	pop	r17
    3198:	0f 91       	pop	r16
    319a:	ff 90       	pop	r15
    319c:	ef 90       	pop	r14
    319e:	08 95       	ret

000031a0 <init_RTC>:
			between interrupts. ticksRTC = 30719 generates an interrupt
			every minute. ticksRTC = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticksRTC)
{
    31a0:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    31a2:	e0 e6       	ldi	r30, 0x60	; 96
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    31a8:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    31aa:	88 ed       	ldi	r24, 0xD8	; 216
    31ac:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    31ae:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    31b0:	01 c0       	rjmp	.+2      	; 0x31b4 <init_RTC+0x14>
		asm("nop");
    31b2:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    31b4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    31b8:	96 fd       	sbrc	r25, 6
    31ba:	fb cf       	rjmp	.-10     	; 0x31b2 <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    31bc:	e0 e6       	ldi	r30, 0x60	; 96
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    31c2:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    31c4:	28 ed       	ldi	r18, 0xD8	; 216
    31c6:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    31c8:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    31ca:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    31cc:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    31ce:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    31d0:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    31d2:	01 c0       	rjmp	.+2      	; 0x31d6 <init_RTC+0x36>
		asm("nop");
    31d4:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    31d6:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    31da:	91 11       	cpse	r25, r1
    31dc:	fb cf       	rjmp	.-10     	; 0x31d4 <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticksRTC;
    31de:	e0 e4       	ldi	r30, 0x40	; 64
    31e0:	f1 e0       	ldi	r31, 0x01	; 1
    31e2:	42 87       	std	Z+10, r20	; 0x0a
    31e4:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    31e6:	82 e0       	ldi	r24, 0x02	; 2
    31e8:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    31ea:	85 81       	ldd	r24, Z+5	; 0x05
    31ec:	81 60       	ori	r24, 0x01	; 1
    31ee:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    31f0:	81 eb       	ldi	r24, 0xB1	; 177
    31f2:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    31f4:	82 81       	ldd	r24, Z+2	; 0x02
    31f6:	81 60       	ori	r24, 0x01	; 1
    31f8:	82 83       	std	Z+2, r24	; 0x02
    31fa:	08 95       	ret

000031fc <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    31fc:	1f 92       	push	r1
    31fe:	0f 92       	push	r0
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	0f 92       	push	r0
    3204:	11 24       	eor	r1, r1
    3206:	8f 93       	push	r24
    3208:	9f 93       	push	r25

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>
			timerOLED++;
		}
	}
*/

	timerOLED++;
    3210:	80 91 10 2a 	lds	r24, 0x2A10	; 0x802a10 <timerOLED>
    3214:	90 91 11 2a 	lds	r25, 0x2A11	; 0x802a11 <timerOLED+0x1>
    3218:	01 96       	adiw	r24, 0x01	; 1
    321a:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <timerOLED>
    321e:	90 93 11 2a 	sts	0x2A11, r25	; 0x802a11 <timerOLED+0x1>

	toggle_LED;						// Defined in led.c
    3222:	80 e2       	ldi	r24, 0x20	; 32
    3224:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>

	timerSAVEENCODER++;
    3228:	80 91 16 2a 	lds	r24, 0x2A16	; 0x802a16 <timerSAVEENCODER>
    322c:	8f 5f       	subi	r24, 0xFF	; 255
    322e:	80 93 16 2a 	sts	0x2A16, r24	; 0x802a16 <timerSAVEENCODER>

}
    3232:	9f 91       	pop	r25
    3234:	8f 91       	pop	r24
    3236:	0f 90       	pop	r0
    3238:	0f be       	out	0x3f, r0	; 63
    323a:	0f 90       	pop	r0
    323c:	1f 90       	pop	r1
    323e:	18 95       	reti

00003240 <set>:
	Returns:
		ERROR if an invalid object was requested.
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    3240:	cf 93       	push	r28
    3242:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	24 e3       	ldi	r18, 0x34	; 52
    3248:	28 9f       	mul	r18, r24
    324a:	f0 01       	movw	r30, r0
    324c:	29 9f       	mul	r18, r25
    324e:	f0 0d       	add	r31, r0
    3250:	11 24       	eor	r1, r1
    3252:	e8 5f       	subi	r30, 0xF8	; 248
    3254:	f7 4d       	sbci	r31, 0xD7	; 215
    3256:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    3258:	24 37       	cpi	r18, 0x74	; 116
    325a:	29 f5       	brne	.+74     	; 0x32a6 <set+0x66>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    325c:	24 e3       	ldi	r18, 0x34	; 52
    325e:	28 9f       	mul	r18, r24
    3260:	e0 01       	movw	r28, r0
    3262:	29 9f       	mul	r18, r25
    3264:	d0 0d       	add	r29, r0
    3266:	11 24       	eor	r1, r1
    3268:	c6 5f       	subi	r28, 0xF6	; 246
    326a:	d7 4d       	sbci	r29, 0xD7	; 215
    326c:	fe 01       	movw	r30, r28
    326e:	01 90       	ld	r0, Z+
    3270:	00 20       	and	r0, r0
    3272:	e9 f7       	brne	.-6      	; 0x326e <set+0x2e>
    3274:	31 97       	sbiw	r30, 0x01	; 1
    3276:	ec 1b       	sub	r30, r28
    3278:	fd 0b       	sbc	r31, r29
    327a:	73 97       	sbiw	r30, 0x13	; 19
    327c:	41 f0       	breq	.+16     	; 0x328e <set+0x4e>
				printError(ERR_SETTIME, "set: bad time format");
    327e:	63 ea       	ldi	r22, 0xA3	; 163
    3280:	7f e8       	ldi	r23, 0x8F	; 143
    3282:	8a e5       	ldi	r24, 0x5A	; 90
    3284:	92 e0       	ldi	r25, 0x02	; 2
    3286:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
				return(ERROR);
    328a:	83 e6       	ldi	r24, 0x63	; 99
    328c:	13 c0       	rjmp	.+38     	; 0x32b4 <set+0x74>
			}
			put_time(pcmd[cstack].cvalue);
    328e:	ce 01       	movw	r24, r28
    3290:	0e 94 1b 06 	call	0xc36	; 0xc36 <put_time>
			write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    3294:	24 e1       	ldi	r18, 0x14	; 20
    3296:	ae 01       	movw	r20, r28
    3298:	60 e0       	ldi	r22, 0x00	; 0
    329a:	70 e0       	ldi	r23, 0x00	; 0
    329c:	80 e5       	ldi	r24, 0x50	; 80
    329e:	0e 94 3f 07 	call	0xe7e	; 0xe7e <write_FRAM>

		default:
			printError(ERR_SET, "set what?");
			return(ERROR);
	}
	return(NOERROR);
    32a2:	80 e0       	ldi	r24, 0x00	; 0
    32a4:	07 c0       	rjmp	.+14     	; 0x32b4 <set+0x74>
			write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
//			write_FRAM(FRAMTWIADDR, SETTIMEFRAM, (uint8_t*) pcmd[cstack].cvalue);
			break;

		default:
			printError(ERR_SET, "set what?");
    32a6:	68 eb       	ldi	r22, 0xB8	; 184
    32a8:	7f e8       	ldi	r23, 0x8F	; 143
    32aa:	89 e5       	ldi	r24, 0x59	; 89
    32ac:	92 e0       	ldi	r25, 0x02	; 2
    32ae:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
			return(ERROR);
    32b2:	83 e6       	ldi	r24, 0x63	; 99
	}
	return(NOERROR);
}
    32b4:	df 91       	pop	r29
    32b6:	cf 91       	pop	r28
    32b8:	08 95       	ret

000032ba <init_SPECID>:
	pullup. Must be called AFTER init_PORTS().
------------------------------------------------------------------------------*/
void init_SPECID(void)
{

	PORTF.PIN2CTRL &= ~PORT_PULLUPEN_bm;	// Remove pullup
    32ba:	e0 ea       	ldi	r30, 0xA0	; 160
    32bc:	f4 e0       	ldi	r31, 0x04	; 4
    32be:	82 89       	ldd	r24, Z+18	; 0x12
    32c0:	87 7f       	andi	r24, 0xF7	; 247
    32c2:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.DIRCLR = PIN2_bm;					// Set as input
    32c4:	84 e0       	ldi	r24, 0x04	; 4
    32c6:	82 83       	std	Z+2, r24	; 0x02
    32c8:	08 95       	ret

000032ca <get_temperature>:
	point for the actual devices.

	The signal is 1.5E-3 mV/K with a 1500 kOhm dropping resistor.
------------------------------------------------------------------------------*/
float get_temperature(uint8_t sensor)
{
    32ca:	cf 93       	push	r28
    32cc:	df 93       	push	r29
    32ce:	00 d0       	rcall	.+0      	; 0x32d0 <get_temperature+0x6>
    32d0:	00 d0       	rcall	.+0      	; 0x32d2 <get_temperature+0x8>
    32d2:	cd b7       	in	r28, 0x3d	; 61
    32d4:	de b7       	in	r29, 0x3e	; 62

	float temperature;

	switch (sensor) {
    32d6:	83 30       	cpi	r24, 0x03	; 3
    32d8:	18 f0       	brcs	.+6      	; 0x32e0 <get_temperature+0x16>
    32da:	83 30       	cpi	r24, 0x03	; 3
    32dc:	39 f0       	breq	.+14     	; 0x32ec <get_temperature+0x22>
    32de:	0b c0       	rjmp	.+22     	; 0x32f6 <get_temperature+0x2c>
		case 0:
		case 1:
		case 2:
			read_AD590(sensor, &temperature);
    32e0:	be 01       	movw	r22, r28
    32e2:	6f 5f       	subi	r22, 0xFF	; 255
    32e4:	7f 4f       	sbci	r23, 0xFF	; 255
    32e6:	0e 94 49 01 	call	0x292	; 0x292 <read_AD590>
			break;
    32ea:	0d c0       	rjmp	.+26     	; 0x3306 <get_temperature+0x3c>
		case 3:
			read_MCP9808(&temperature);
    32ec:	ce 01       	movw	r24, r28
    32ee:	01 96       	adiw	r24, 0x01	; 1
    32f0:	0e 94 40 09 	call	0x1280	; 0x1280 <read_MCP9808>
			break;
    32f4:	08 c0       	rjmp	.+16     	; 0x3306 <get_temperature+0x3c>
		default:
			temperature = -666.0;
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e8       	ldi	r25, 0x80	; 128
    32fa:	a6 e2       	ldi	r26, 0x26	; 38
    32fc:	b4 ec       	ldi	r27, 0xC4	; 196
    32fe:	89 83       	std	Y+1, r24	; 0x01
    3300:	9a 83       	std	Y+2, r25	; 0x02
    3302:	ab 83       	std	Y+3, r26	; 0x03
    3304:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}

	return(temperature);
    3306:	69 81       	ldd	r22, Y+1	; 0x01
    3308:	7a 81       	ldd	r23, Y+2	; 0x02
    330a:	8b 81       	ldd	r24, Y+3	; 0x03
    330c:	9c 81       	ldd	r25, Y+4	; 0x04

}
    330e:	24 96       	adiw	r28, 0x04	; 4
    3310:	cd bf       	out	0x3d, r28	; 61
    3312:	de bf       	out	0x3e, r29	; 62
    3314:	df 91       	pop	r29
    3316:	cf 91       	pop	r28
    3318:	08 95       	ret

0000331a <testroutine>:
#include "roboclaw.h"
#include "fram.h"
#include "testroutine.h"

void testroutine(void)
{
    331a:	0f 93       	push	r16
    331c:	1f 93       	push	r17
    331e:	cf 93       	push	r28
    3320:	df 93       	push	r29
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
    3326:	a1 97       	sbiw	r28, 0x21	; 33
    3328:	cd bf       	out	0x3d, r28	; 61
    332a:	de bf       	out	0x3e, r29	; 62

	char buf[25];
	uint8_t bufb[8];
	int32_t value;
	saveFRAM_MOTOREncoders();
    332c:	0e 94 34 18 	call	0x3068	; 0x3068 <saveFRAM_MOTOREncoders>
//	putFRAM_MOTOREncoder(MOTORAADDR);
	read_FRAM(FRAMTWIADDR, ENCAFRAMADDR, bufb, 4);
    3330:	24 e0       	ldi	r18, 0x04	; 4
    3332:	ae 01       	movw	r20, r28
    3334:	46 5e       	subi	r20, 0xE6	; 230
    3336:	5f 4f       	sbci	r21, 0xFF	; 255
    3338:	64 e1       	ldi	r22, 0x14	; 20
    333a:	70 e0       	ldi	r23, 0x00	; 0
    333c:	80 e5       	ldi	r24, 0x50	; 80
    333e:	0e 94 c1 06 	call	0xd82	; 0xd82 <read_FRAM>
	value = (uint32_t) bufb[0] << 24;
    3342:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3344:	50 e0       	ldi	r21, 0x00	; 0
    3346:	60 e0       	ldi	r22, 0x00	; 0
    3348:	70 e0       	ldi	r23, 0x00	; 0
    334a:	74 2f       	mov	r23, r20
    334c:	66 27       	eor	r22, r22
    334e:	55 27       	eor	r21, r21
    3350:	44 27       	eor	r20, r20
	value |= (uint32_t) bufb[1] << 16;
    3352:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	a0 e0       	ldi	r26, 0x00	; 0
    3358:	b0 e0       	ldi	r27, 0x00	; 0
    335a:	dc 01       	movw	r26, r24
    335c:	99 27       	eor	r25, r25
    335e:	88 27       	eor	r24, r24
    3360:	48 2b       	or	r20, r24
    3362:	59 2b       	or	r21, r25
    3364:	6a 2b       	or	r22, r26
    3366:	7b 2b       	or	r23, r27
	value |= (uint32_t) bufb[2] << 8;
    3368:	8c 8d       	ldd	r24, Y+28	; 0x1c
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	a0 e0       	ldi	r26, 0x00	; 0
    336e:	b0 e0       	ldi	r27, 0x00	; 0
    3370:	ba 2f       	mov	r27, r26
    3372:	a9 2f       	mov	r26, r25
    3374:	98 2f       	mov	r25, r24
    3376:	88 27       	eor	r24, r24
    3378:	84 2b       	or	r24, r20
    337a:	95 2b       	or	r25, r21
    337c:	a6 2b       	or	r26, r22
    337e:	b7 2b       	or	r27, r23
	value |= (uint32_t) bufb[3];
    3380:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3382:	bc 01       	movw	r22, r24
    3384:	cd 01       	movw	r24, r26
    3386:	62 2b       	or	r22, r18
	value /= ROBOCOUNTSPERMICRON;
    3388:	2c e0       	ldi	r18, 0x0C	; 12
    338a:	31 e0       	ldi	r19, 0x01	; 1
    338c:	40 e0       	ldi	r20, 0x00	; 0
    338e:	50 e0       	ldi	r21, 0x00	; 0
    3390:	0e 94 da 22 	call	0x45b4	; 0x45b4 <__divmodsi4>
	sprintf(buf, "value = %ld\r\n", value);
    3394:	5f 93       	push	r21
    3396:	4f 93       	push	r20
    3398:	3f 93       	push	r19
    339a:	2f 93       	push	r18
    339c:	82 ec       	ldi	r24, 0xC2	; 194
    339e:	9f e8       	ldi	r25, 0x8F	; 143
    33a0:	9f 93       	push	r25
    33a2:	8f 93       	push	r24
    33a4:	8e 01       	movw	r16, r28
    33a6:	0f 5f       	subi	r16, 0xFF	; 255
    33a8:	1f 4f       	sbci	r17, 0xFF	; 255
    33aa:	1f 93       	push	r17
    33ac:	0f 93       	push	r16
    33ae:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <sprintf>
	send_USART(0, (uint8_t*) buf, strlen(buf));
    33b2:	f8 01       	movw	r30, r16
    33b4:	01 90       	ld	r0, Z+
    33b6:	00 20       	and	r0, r0
    33b8:	e9 f7       	brne	.-6      	; 0x33b4 <testroutine+0x9a>
    33ba:	31 97       	sbiw	r30, 0x01	; 1
    33bc:	af 01       	movw	r20, r30
    33be:	40 1b       	sub	r20, r16
    33c0:	51 0b       	sbc	r21, r17
    33c2:	b8 01       	movw	r22, r16
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	0e 94 0e 1b 	call	0x361c	; 0x361c <send_USART>
	write_MCP23008(addr, OLAT, 0x00);
	_delay_ms(1000);
	write_MCP23008(addr, OLAT, 0xFF);
	send_USART(0, (uint8_t*) buf, strlen(buf));
*/
	return;
    33ca:	cd bf       	out	0x3d, r28	; 61
    33cc:	de bf       	out	0x3e, r29	; 62
    33ce:	a1 96       	adiw	r28, 0x21	; 33
    33d0:	cd bf       	out	0x3d, r28	; 61
    33d2:	de bf       	out	0x3e, r29	; 62
    33d4:	df 91       	pop	r29
    33d6:	cf 91       	pop	r28
    33d8:	1f 91       	pop	r17
    33da:	0f 91       	pop	r16
    33dc:	08 95       	ret

000033de <start_TCB0>:
#include "timers.h"

void start_TCB0(uint16_t msPeriod)
{

	ticks = 0;
    33de:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <ticks>
    33e2:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <ticks+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    33e6:	25 e0       	ldi	r18, 0x05	; 5
    33e8:	3d e0       	ldi	r19, 0x0D	; 13
    33ea:	ac 01       	movw	r20, r24
    33ec:	42 9f       	mul	r20, r18
    33ee:	c0 01       	movw	r24, r0
    33f0:	43 9f       	mul	r20, r19
    33f2:	90 0d       	add	r25, r0
    33f4:	52 9f       	mul	r21, r18
    33f6:	90 0d       	add	r25, r0
    33f8:	11 24       	eor	r1, r1
    33fa:	e0 e8       	ldi	r30, 0x80	; 128
    33fc:	fa e0       	ldi	r31, 0x0A	; 10
    33fe:	84 87       	std	Z+12, r24	; 0x0c
    3400:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	85 83       	std	Z+5, r24	; 0x05
//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    3406:	80 83       	st	Z, r24
    3408:	08 95       	ret

0000340a <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    340a:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    340e:	08 95       	ret

00003410 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    3410:	1f 92       	push	r1
    3412:	0f 92       	push	r0
    3414:	0f b6       	in	r0, 0x3f	; 63
    3416:	0f 92       	push	r0
    3418:	11 24       	eor	r1, r1
    341a:	8f 93       	push	r24
    341c:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks++;
    3424:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    3428:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    342c:	01 96       	adiw	r24, 0x01	; 1
    342e:	80 93 17 2a 	sts	0x2A17, r24	; 0x802a17 <ticks>
    3432:	90 93 18 2a 	sts	0x2A18, r25	; 0x802a18 <ticks+0x1>

    3436:	9f 91       	pop	r25
    3438:	8f 91       	pop	r24
    343a:	0f 90       	pop	r0
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	0f 90       	pop	r0
    3440:	1f 90       	pop	r1
    3442:	18 95       	reti

00003444 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    3444:	e0 ea       	ldi	r30, 0xA0	; 160
    3446:	f8 e0       	ldi	r31, 0x08	; 8
    3448:	8b e0       	ldi	r24, 0x0B	; 11
    344a:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    344c:	83 81       	ldd	r24, Z+3	; 0x03
    344e:	81 60       	ori	r24, 0x01	; 1
    3450:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    3452:	85 81       	ldd	r24, Z+5	; 0x05
    3454:	81 60       	ori	r24, 0x01	; 1
    3456:	85 83       	std	Z+5, r24	; 0x05
    3458:	08 95       	ret

0000345a <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    345a:	01 c0       	rjmp	.+2      	; 0x345e <read_TWI+0x4>
		asm("nop");								// Should set timer here
    345c:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    345e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3462:	88 23       	and	r24, r24
    3464:	dc f7       	brge	.-10     	; 0x345c <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    3466:	e0 ea       	ldi	r30, 0xA0	; 160
    3468:	f8 e0       	ldi	r31, 0x08	; 8
    346a:	84 81       	ldd	r24, Z+4	; 0x04
    346c:	8b 7f       	andi	r24, 0xFB	; 251
    346e:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    3470:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    3472:	94 81       	ldd	r25, Z+4	; 0x04
    3474:	92 60       	ori	r25, 0x02	; 2
    3476:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    3478:	08 95       	ret

0000347a <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    347a:	01 c0       	rjmp	.+2      	; 0x347e <readlast_TWI+0x4>
		asm("nop");
    347c:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    347e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3482:	88 23       	and	r24, r24
    3484:	dc f7       	brge	.-10     	; 0x347c <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    3486:	e0 ea       	ldi	r30, 0xA0	; 160
    3488:	f8 e0       	ldi	r31, 0x08	; 8
    348a:	84 81       	ldd	r24, Z+4	; 0x04
    348c:	84 60       	ori	r24, 0x04	; 4
    348e:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    3490:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    3492:	08 95       	ret

00003494 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    3494:	61 30       	cpi	r22, 0x01	; 1
    3496:	39 f4       	brne	.+14     	; 0x34a6 <start_TWI+0x12>
//		addr = ((addr << 1) | 0x01);
		TWI0.MADDR = ((addr << 1) | 0x01);
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	88 0f       	add	r24, r24
    349c:	99 1f       	adc	r25, r25
    349e:	81 60       	ori	r24, 0x01	; 1
    34a0:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    34a4:	03 c0       	rjmp	.+6      	; 0x34ac <start_TWI+0x18>
	} else {
//		addr = ((addr << 1) & ~0x01);
//		addr = (addr << 1);
		TWI0.MADDR = (addr << 1);
    34a6:	88 0f       	add	r24, r24
    34a8:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	0e 94 ef 19 	call	0x33de	; 0x33de <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    34b4:	0b c0       	rjmp	.+22     	; 0x34cc <start_TWI+0x38>
		if (ticks > 10) {
    34b6:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    34ba:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    34be:	0b 97       	sbiw	r24, 0x0b	; 11
    34c0:	20 f0       	brcs	.+8      	; 0x34ca <start_TWI+0x36>
			stop_TCB0();
    34c2:	0e 94 05 1a 	call	0x340a	; 0x340a <stop_TCB0>
			return(ERROR);
    34c6:	83 e6       	ldi	r24, 0x63	; 99
    34c8:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
    34ca:	00 00       	nop
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    34cc:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    34d0:	80 7c       	andi	r24, 0xC0	; 192
    34d2:	89 f3       	breq	.-30     	; 0x34b6 <start_TWI+0x22>
			stop_TCB0();
			return(ERROR);
		}
		asm("nop");								// Wait for addr transmission
	}
	stop_TCB0();
    34d4:	0e 94 05 1a 	call	0x340a	; 0x340a <stop_TCB0>
	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    34d8:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    34dc:	82 ff       	sbrs	r24, 2
    34de:	08 c0       	rjmp	.+16     	; 0x34f0 <start_TWI+0x5c>
		printError(ERR_TWI, "TWI bus");
    34e0:	60 ed       	ldi	r22, 0xD0	; 208
    34e2:	7f e8       	ldi	r23, 0x8F	; 143
    34e4:	81 e9       	ldi	r24, 0x91	; 145
    34e6:	91 e0       	ldi	r25, 0x01	; 1
    34e8:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
		return(ERROR);
    34ec:	83 e6       	ldi	r24, 0x63	; 99
    34ee:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    34f0:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    34f4:	83 ff       	sbrs	r24, 3
    34f6:	08 c0       	rjmp	.+16     	; 0x3508 <start_TWI+0x74>
		printError(ERR_TWI, "TWI arbitration");
    34f8:	68 ed       	ldi	r22, 0xD8	; 216
    34fa:	7f e8       	ldi	r23, 0x8F	; 143
    34fc:	81 e9       	ldi	r24, 0x91	; 145
    34fe:	91 e0       	ldi	r25, 0x01	; 1
    3500:	0e 94 8b 06 	call	0xd16	; 0xd16 <printError>
		return(ERROR);
    3504:	83 e6       	ldi	r24, 0x63	; 99
    3506:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    3508:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    350c:	89 2f       	mov	r24, r25
    350e:	80 71       	andi	r24, 0x10	; 16
    3510:	94 fd       	sbrc	r25, 4
		return(ERROR);
    3512:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    3514:	08 95       	ret

00003516 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    3516:	87 e0       	ldi	r24, 0x07	; 7
    3518:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    351c:	08 95       	ret

0000351e <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    351e:	01 c0       	rjmp	.+2      	; 0x3522 <write_TWI+0x4>
		asm("nop");
    3520:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    3522:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3526:	96 ff       	sbrs	r25, 6
    3528:	fb cf       	rjmp	.-10     	; 0x3520 <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    352a:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	start_TCB0(1);			// Maybe only check on start_TWI?
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	0e 94 ef 19 	call	0x33de	; 0x33de <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    3536:	0b c0       	rjmp	.+22     	; 0x354e <write_TWI+0x30>
		asm("nop");
    3538:	00 00       	nop
		if (ticks > 50) {
    353a:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    353e:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    3542:	c3 97       	sbiw	r24, 0x33	; 51
    3544:	20 f0       	brcs	.+8      	; 0x354e <write_TWI+0x30>
			stop_TCB0();
    3546:	0e 94 05 1a 	call	0x340a	; 0x340a <stop_TCB0>
			return(ERROR);
    354a:	83 e6       	ldi	r24, 0x63	; 99
    354c:	08 95       	ret
	}

	TWI0.MDATA = data;

	start_TCB0(1);			// Maybe only check on start_TWI?
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    354e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3552:	86 ff       	sbrs	r24, 6
    3554:	f1 cf       	rjmp	.-30     	; 0x3538 <write_TWI+0x1a>
			stop_TCB0();
			return(ERROR);
			break;
		}
	}
	stop_TCB0();
    3556:	0e 94 05 1a 	call	0x340a	; 0x340a <stop_TCB0>
	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    355a:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    355e:	89 2f       	mov	r24, r25
    3560:	80 71       	andi	r24, 0x10	; 16
    3562:	94 fd       	sbrc	r25, 4
		return(ERROR);
    3564:	83 e6       	ldi	r24, 0x63	; 99
	} else {
		return(NOERROR);
	}

}
    3566:	08 95       	ret

00003568 <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    3568:	e0 e0       	ldi	r30, 0x00	; 0
    356a:	f4 e0       	ldi	r31, 0x04	; 4
    356c:	81 e0       	ldi	r24, 0x01	; 1
    356e:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    3570:	81 83       	std	Z+1, r24	; 0x01
//	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    3572:	e0 e0       	ldi	r30, 0x00	; 0
    3574:	f8 e0       	ldi	r31, 0x08	; 8
    3576:	24 e7       	ldi	r18, 0x74	; 116
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	20 87       	std	Z+8, r18	; 0x08
    357c:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    357e:	95 81       	ldd	r25, Z+5	; 0x05
    3580:	90 68       	ori	r25, 0x80	; 128
    3582:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    3584:	96 81       	ldd	r25, Z+6	; 0x06
    3586:	90 64       	ori	r25, 0x40	; 64
    3588:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    358a:	96 81       	ldd	r25, Z+6	; 0x06
    358c:	90 68       	ori	r25, 0x80	; 128
    358e:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;					// Set up send/receive buffers
    3590:	10 92 1f 2d 	sts	0x2D1F, r1	; 0x802d1f <send0_buf+0xfe>
	send0_buf.tail = 0;
    3594:	10 92 20 2d 	sts	0x2D20, r1	; 0x802d20 <send0_buf+0xff>
	send0_buf.done = YES;
    3598:	80 93 24 2d 	sts	0x2D24, r24	; 0x802d24 <send0_buf+0x103>
	recv0_buf.head = 0;
    359c:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0xfe>
	recv0_buf.tail = 0;
    35a0:	10 92 1c 2c 	sts	0x2C1C, r1	; 0x802c1c <recv0_buf+0xff>
	recv0_buf.data[0] = '\0';
    35a4:	10 92 1d 2b 	sts	0x2B1D, r1	; 0x802b1d <recv0_buf>
	recv0_buf.length = 0;
    35a8:	10 92 1e 2c 	sts	0x2C1E, r1	; 0x802c1e <recv0_buf+0x101>
	recv0_buf.done = NO;
    35ac:	10 92 20 2c 	sts	0x2C20, r1	; 0x802c20 <recv0_buf+0x103>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    35b0:	e0 e4       	ldi	r30, 0x40	; 64
    35b2:	f4 e0       	ldi	r31, 0x04	; 4
    35b4:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    35b6:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
    35b8:	e0 e2       	ldi	r30, 0x20	; 32
    35ba:	f8 e0       	ldi	r31, 0x08	; 8
    35bc:	2b e5       	ldi	r18, 0x5B	; 91
    35be:	31 e0       	ldi	r19, 0x01	; 1
    35c0:	20 87       	std	Z+8, r18	; 0x08
    35c2:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    35c4:	95 81       	ldd	r25, Z+5	; 0x05
    35c6:	90 68       	ori	r25, 0x80	; 128
    35c8:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    35ca:	96 81       	ldd	r25, Z+6	; 0x06
    35cc:	90 64       	ori	r25, 0x40	; 64
    35ce:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    35d0:	96 81       	ldd	r25, Z+6	; 0x06
    35d2:	90 68       	ori	r25, 0x80	; 128
    35d4:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    35d6:	10 92 2b 30 	sts	0x302B, r1	; 0x80302b <send1_buf+0xfe>
	send1_buf.tail = 0;
    35da:	10 92 2c 30 	sts	0x302C, r1	; 0x80302c <send1_buf+0xff>
	send1_buf.done = YES;
    35de:	80 93 30 30 	sts	0x3030, r24	; 0x803030 <send1_buf+0x103>
	recv1_buf.head = 0;
    35e2:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv1_buf+0xfe>
	recv1_buf.tail = 0;
    35e6:	10 92 18 2b 	sts	0x2B18, r1	; 0x802b18 <recv1_buf+0xff>
	recv1_buf.data[0] = '\0';
    35ea:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <recv1_buf>
	recv1_buf.done = NO;
    35ee:	10 92 1c 2b 	sts	0x2B1C, r1	; 0x802b1c <recv1_buf+0x103>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    35f2:	e0 e2       	ldi	r30, 0x20	; 32
    35f4:	f4 e0       	ldi	r31, 0x04	; 4
    35f6:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    35f8:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    35fa:	e0 e6       	ldi	r30, 0x60	; 96
    35fc:	f8 e0       	ldi	r31, 0x08	; 8
    35fe:	2d e6       	ldi	r18, 0x6D	; 109
    3600:	35 e0       	ldi	r19, 0x05	; 5
    3602:	20 87       	std	Z+8, r18	; 0x08
    3604:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    3606:	96 81       	ldd	r25, Z+6	; 0x06
    3608:	90 64       	ori	r25, 0x40	; 64
    360a:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    360c:	96 81       	ldd	r25, Z+6	; 0x06
    360e:	90 68       	ori	r25, 0x80	; 128
    3610:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    3612:	80 93 2c 2f 	sts	0x2F2C, r24	; 0x802f2c <send3_buf+0x103>
	recv3_buf.done = NO;
    3616:	10 92 28 2e 	sts	0x2E28, r1	; 0x802e28 <recv3_buf+0x103>
    361a:	08 95       	ret

0000361c <send_USART>:
		"transmit data register empty" interrupt (DREIE). The USARTn_DRE_vect
		puts the bytes into the transmit register until the tail catches up
		to the head of the circular buffer.
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    361c:	0f 93       	push	r16
    361e:	1f 93       	push	r17
    3620:	cf 93       	push	r28
    3622:	df 93       	push	r29
    3624:	eb 01       	movw	r28, r22
    3626:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    3628:	81 30       	cpi	r24, 0x01	; 1
    362a:	d1 f1       	breq	.+116    	; 0x36a0 <send_USART+0x84>
    362c:	20 f0       	brcs	.+8      	; 0x3636 <send_USART+0x1a>
    362e:	83 30       	cpi	r24, 0x03	; 3
    3630:	09 f4       	brne	.+2      	; 0x3634 <send_USART+0x18>
    3632:	85 c0       	rjmp	.+266    	; 0x373e <send_USART+0x122>
    3634:	8c c0       	rjmp	.+280    	; 0x374e <send_USART+0x132>
		case 0:
			send0_buf.done = NO;
    3636:	10 92 24 2d 	sts	0x2D24, r1	; 0x802d24 <send0_buf+0x103>
			for (i = 0; i < nbytes; i++) {
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	11 c0       	rjmp	.+34     	; 0x3660 <send_USART+0x44>
				send0_buf.data[send0_buf.head] = *data++;
    363e:	ef e1       	ldi	r30, 0x1F	; 31
    3640:	fd e2       	ldi	r31, 0x2D	; 45
    3642:	80 81       	ld	r24, Z
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	38 81       	ld	r19, Y
    3648:	dc 01       	movw	r26, r24
    364a:	af 5d       	subi	r26, 0xDF	; 223
    364c:	b3 4d       	sbci	r27, 0xD3	; 211
    364e:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    3650:	01 96       	adiw	r24, 0x01	; 1
    3652:	6e ef       	ldi	r22, 0xFE	; 254
    3654:	70 e0       	ldi	r23, 0x00	; 0
    3656:	0e 94 c6 22 	call	0x458c	; 0x458c <__divmodhi4>
    365a:	80 83       	st	Z, r24
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    365c:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    365e:	21 96       	adiw	r28, 0x01	; 1
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    3660:	21 17       	cp	r18, r17
    3662:	68 f3       	brcs	.-38     	; 0x363e <send_USART+0x22>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3664:	e0 e0       	ldi	r30, 0x00	; 0
    3666:	f8 e0       	ldi	r31, 0x08	; 8
    3668:	85 81       	ldd	r24, Z+5	; 0x05
    366a:	80 62       	ori	r24, 0x20	; 32
    366c:	85 83       	std	Z+5, r24	; 0x05
			start_TCB0(10);						// 10 ms ticks
    366e:	8a e0       	ldi	r24, 0x0A	; 10
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	0e 94 ef 19 	call	0x33de	; 0x33de <start_TCB0>
			while (send0_buf.done == NO) {
    3676:	0d c0       	rjmp	.+26     	; 0x3692 <send_USART+0x76>
				if (ticks > 100) {				// 1 second enough?
    3678:	80 91 17 2a 	lds	r24, 0x2A17	; 0x802a17 <ticks>
    367c:	90 91 18 2a 	lds	r25, 0x2A18	; 0x802a18 <ticks+0x1>
    3680:	85 36       	cpi	r24, 0x65	; 101
    3682:	91 05       	cpc	r25, r1
    3684:	30 f0       	brcs	.+12     	; 0x3692 <send_USART+0x76>
					stop_TCB0();
    3686:	0e 94 05 1a 	call	0x340a	; 0x340a <stop_TCB0>
					send0_buf.done = YES;
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	80 93 24 2d 	sts	0x2D24, r24	; 0x802d24 <send0_buf+0x103>
					return;
    3690:	5e c0       	rjmp	.+188    	; 0x374e <send_USART+0x132>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			start_TCB0(10);						// 10 ms ticks
			while (send0_buf.done == NO) {
    3692:	80 91 24 2d 	lds	r24, 0x2D24	; 0x802d24 <send0_buf+0x103>
    3696:	88 23       	and	r24, r24
    3698:	79 f3       	breq	.-34     	; 0x3678 <send_USART+0x5c>
					stop_TCB0();
					send0_buf.done = YES;
					return;
				}
			}
			stop_TCB0();
    369a:	0e 94 05 1a 	call	0x340a	; 0x340a <stop_TCB0>
			break;
    369e:	57 c0       	rjmp	.+174    	; 0x374e <send_USART+0x132>

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
    36a0:	64 2f       	mov	r22, r20
    36a2:	70 e0       	ldi	r23, 0x00	; 0
    36a4:	ce 01       	movw	r24, r28
    36a6:	0e 94 77 14 	call	0x28ee	; 0x28ee <crc16>
    36aa:	48 2f       	mov	r20, r24
    36ac:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	11 c0       	rjmp	.+34     	; 0x36d4 <send_USART+0xb8>
				send1_buf.data[send1_buf.head] = *data++;
    36b2:	eb e2       	ldi	r30, 0x2B	; 43
    36b4:	f0 e3       	ldi	r31, 0x30	; 48
    36b6:	80 81       	ld	r24, Z
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	38 81       	ld	r19, Y
    36bc:	dc 01       	movw	r26, r24
    36be:	a3 5d       	subi	r26, 0xD3	; 211
    36c0:	b0 4d       	sbci	r27, 0xD0	; 208
    36c2:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    36c4:	01 96       	adiw	r24, 0x01	; 1
    36c6:	6e ef       	ldi	r22, 0xFE	; 254
    36c8:	70 e0       	ldi	r23, 0x00	; 0
    36ca:	0e 94 c6 22 	call	0x458c	; 0x458c <__divmodhi4>
    36ce:	80 83       	st	Z, r24
			stop_TCB0();
			break;

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    36d0:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    36d2:	21 96       	adiw	r28, 0x01	; 1
			stop_TCB0();
			break;

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    36d4:	21 17       	cp	r18, r17
    36d6:	68 f3       	brcs	.-38     	; 0x36b2 <send_USART+0x96>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    36d8:	eb e2       	ldi	r30, 0x2B	; 43
    36da:	f0 e3       	ldi	r31, 0x30	; 48
    36dc:	80 81       	ld	r24, Z
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	dc 01       	movw	r26, r24
    36e2:	a3 5d       	subi	r26, 0xD3	; 211
    36e4:	b0 4d       	sbci	r27, 0xD0	; 208
    36e6:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    36e8:	01 96       	adiw	r24, 0x01	; 1
    36ea:	2e ef       	ldi	r18, 0xFE	; 254
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	b9 01       	movw	r22, r18
    36f0:	0e 94 c6 22 	call	0x458c	; 0x458c <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	dc 01       	movw	r26, r24
    36f8:	a3 5d       	subi	r26, 0xD3	; 211
    36fa:	b0 4d       	sbci	r27, 0xD0	; 208
    36fc:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    36fe:	01 96       	adiw	r24, 0x01	; 1
    3700:	b9 01       	movw	r22, r18
    3702:	0e 94 c6 22 	call	0x458c	; 0x458c <__divmodhi4>
    3706:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    3708:	1e 5f       	subi	r17, 0xFE	; 254
    370a:	10 93 2d 30 	sts	0x302D, r17	; 0x80302d <send1_buf+0x100>
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    370e:	e0 e2       	ldi	r30, 0x20	; 32
    3710:	f8 e0       	ldi	r31, 0x08	; 8
    3712:	85 81       	ldd	r24, Z+5	; 0x05
    3714:	80 62       	ori	r24, 0x20	; 32
    3716:	85 83       	std	Z+5, r24	; 0x05
			break;
    3718:	1a c0       	rjmp	.+52     	; 0x374e <send_USART+0x132>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    371a:	e7 e2       	ldi	r30, 0x27	; 39
    371c:	ff e2       	ldi	r31, 0x2F	; 47
    371e:	80 81       	ld	r24, Z
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	38 81       	ld	r19, Y
    3724:	dc 01       	movw	r26, r24
    3726:	a7 5d       	subi	r26, 0xD7	; 215
    3728:	b1 4d       	sbci	r27, 0xD1	; 209
    372a:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    372c:	01 96       	adiw	r24, 0x01	; 1
    372e:	6e ef       	ldi	r22, 0xFE	; 254
    3730:	70 e0       	ldi	r23, 0x00	; 0
    3732:	0e 94 c6 22 	call	0x458c	; 0x458c <__divmodhi4>
    3736:	80 83       	st	Z, r24
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    3738:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    373a:	21 96       	adiw	r28, 0x01	; 1
    373c:	01 c0       	rjmp	.+2      	; 0x3740 <send_USART+0x124>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    373e:	20 e0       	ldi	r18, 0x00	; 0
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    3740:	21 17       	cp	r18, r17
    3742:	58 f3       	brcs	.-42     	; 0x371a <send_USART+0xfe>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3744:	e0 e6       	ldi	r30, 0x60	; 96
    3746:	f8 e0       	ldi	r31, 0x08	; 8
    3748:	85 81       	ldd	r24, Z+5	; 0x05
    374a:	80 62       	ori	r24, 0x20	; 32
    374c:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    374e:	df 91       	pop	r29
    3750:	cf 91       	pop	r28
    3752:	1f 91       	pop	r17
    3754:	0f 91       	pop	r16
    3756:	08 95       	ret

00003758 <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    3758:	1f 92       	push	r1
    375a:	0f 92       	push	r0
    375c:	0f b6       	in	r0, 0x3f	; 63
    375e:	0f 92       	push	r0
    3760:	11 24       	eor	r1, r1
    3762:	5f 93       	push	r21
    3764:	6f 93       	push	r22
    3766:	7f 93       	push	r23
    3768:	8f 93       	push	r24
    376a:	9f 93       	push	r25
    376c:	af 93       	push	r26
    376e:	bf 93       	push	r27
    3770:	ef 93       	push	r30
    3772:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    3774:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if (recv0_buf.length < (BUFSIZE-1)) {		// BUFSIZE-1 to make room for the terminating \0
    3778:	80 91 1e 2c 	lds	r24, 0x2C1E	; 0x802c1e <recv0_buf+0x101>
    377c:	8d 3f       	cpi	r24, 0xFD	; 253
    377e:	10 f5       	brcc	.+68     	; 0x37c4 <__vector_17+0x6c>
//		c = USART0.RXDATAL;
		if ((char) c == '\r') {
    3780:	9d 30       	cpi	r25, 0x0D	; 13
    3782:	51 f4       	brne	.+20     	; 0x3798 <__vector_17+0x40>
			recv0_buf.done = YES;
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	80 93 20 2c 	sts	0x2C20, r24	; 0x802c20 <recv0_buf+0x103>
			recv0_buf.data[recv0_buf.head] = '\0';
    378a:	e0 91 1b 2c 	lds	r30, 0x2C1B	; 0x802c1b <recv0_buf+0xfe>
    378e:	f0 e0       	ldi	r31, 0x00	; 0
    3790:	e3 5e       	subi	r30, 0xE3	; 227
    3792:	f4 4d       	sbci	r31, 0xD4	; 212
    3794:	10 82       	st	Z, r1
    3796:	06 c0       	rjmp	.+12     	; 0x37a4 <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    3798:	e0 91 1b 2c 	lds	r30, 0x2C1B	; 0x802c1b <recv0_buf+0xfe>
    379c:	f0 e0       	ldi	r31, 0x00	; 0
    379e:	e3 5e       	subi	r30, 0xE3	; 227
    37a0:	f4 4d       	sbci	r31, 0xD4	; 212
    37a2:	90 83       	st	Z, r25
		}
		recv0_buf.length++;
    37a4:	ee e1       	ldi	r30, 0x1E	; 30
    37a6:	fc e2       	ldi	r31, 0x2C	; 44
    37a8:	80 81       	ld	r24, Z
    37aa:	8f 5f       	subi	r24, 0xFF	; 255
    37ac:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    37ae:	eb e1       	ldi	r30, 0x1B	; 27
    37b0:	fc e2       	ldi	r31, 0x2C	; 44
    37b2:	80 81       	ld	r24, Z
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	01 96       	adiw	r24, 0x01	; 1
    37b8:	6e ef       	ldi	r22, 0xFE	; 254
    37ba:	70 e0       	ldi	r23, 0x00	; 0
    37bc:	0e 94 c6 22 	call	0x458c	; 0x458c <__divmodhi4>
    37c0:	80 83       	st	Z, r24
    37c2:	0a c0       	rjmp	.+20     	; 0x37d8 <__vector_17+0x80>
	} else {
		recv0_buf.head = 0;
    37c4:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0xfe>
		recv0_buf.tail = 0;
    37c8:	10 92 1c 2c 	sts	0x2C1C, r1	; 0x802c1c <recv0_buf+0xff>
		recv0_buf.data[0] = '\0';
    37cc:	10 92 1d 2b 	sts	0x2B1D, r1	; 0x802b1d <recv0_buf>
		recv0_buf.length = 0;
    37d0:	10 92 1e 2c 	sts	0x2C1E, r1	; 0x802c1e <recv0_buf+0x101>
		recv0_buf.done = NO;
    37d4:	10 92 20 2c 	sts	0x2C20, r1	; 0x802c20 <recv0_buf+0x103>
	}
}
    37d8:	ff 91       	pop	r31
    37da:	ef 91       	pop	r30
    37dc:	bf 91       	pop	r27
    37de:	af 91       	pop	r26
    37e0:	9f 91       	pop	r25
    37e2:	8f 91       	pop	r24
    37e4:	7f 91       	pop	r23
    37e6:	6f 91       	pop	r22
    37e8:	5f 91       	pop	r21
    37ea:	0f 90       	pop	r0
    37ec:	0f be       	out	0x3f, r0	; 63
    37ee:	0f 90       	pop	r0
    37f0:	1f 90       	pop	r1
    37f2:	18 95       	reti

000037f4 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    37f4:	1f 92       	push	r1
    37f6:	0f 92       	push	r0
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	0f 92       	push	r0
    37fc:	11 24       	eor	r1, r1
    37fe:	2f 93       	push	r18
    3800:	8f 93       	push	r24
    3802:	9f 93       	push	r25
    3804:	ef 93       	push	r30
    3806:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    3808:	e0 e0       	ldi	r30, 0x00	; 0
    380a:	f8 e0       	ldi	r31, 0x08	; 8
    380c:	85 81       	ldd	r24, Z+5	; 0x05
    380e:	8f 7d       	andi	r24, 0xDF	; 223
    3810:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    3812:	80 91 1f 2d 	lds	r24, 0x2D1F	; 0x802d1f <send0_buf+0xfe>
    3816:	e0 91 20 2d 	lds	r30, 0x2D20	; 0x802d20 <send0_buf+0xff>
    381a:	8e 17       	cp	r24, r30
    381c:	d1 f0       	breq	.+52     	; 0x3852 <__vector_18+0x5e>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    381e:	81 e0       	ldi	r24, 0x01	; 1
    3820:	8e 0f       	add	r24, r30
    3822:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0xff>
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	ef 5d       	subi	r30, 0xDF	; 223
    382a:	f3 4d       	sbci	r31, 0xD3	; 211
    382c:	90 81       	ld	r25, Z
    382e:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    3832:	91 e0       	ldi	r25, 0x01	; 1
    3834:	8e 3f       	cpi	r24, 0xFE	; 254
    3836:	08 f4       	brcc	.+2      	; 0x383a <__vector_18+0x46>
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	91 95       	neg	r25
    383c:	29 2f       	mov	r18, r25
    383e:	22 0f       	add	r18, r18
    3840:	82 1b       	sub	r24, r18
    3842:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0xff>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    3846:	e0 e0       	ldi	r30, 0x00	; 0
    3848:	f8 e0       	ldi	r31, 0x08	; 8
    384a:	85 81       	ldd	r24, Z+5	; 0x05
    384c:	80 62       	ori	r24, 0x20	; 32
    384e:	85 83       	std	Z+5, r24	; 0x05
    3850:	03 c0       	rjmp	.+6      	; 0x3858 <__vector_18+0x64>
	} else {
		send0_buf.done = YES;
    3852:	81 e0       	ldi	r24, 0x01	; 1
    3854:	80 93 24 2d 	sts	0x2D24, r24	; 0x802d24 <send0_buf+0x103>
	}

}
    3858:	ff 91       	pop	r31
    385a:	ef 91       	pop	r30
    385c:	9f 91       	pop	r25
    385e:	8f 91       	pop	r24
    3860:	2f 91       	pop	r18
    3862:	0f 90       	pop	r0
    3864:	0f be       	out	0x3f, r0	; 63
    3866:	0f 90       	pop	r0
    3868:	1f 90       	pop	r1
    386a:	18 95       	reti

0000386c <__vector_26>:
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.

------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    386c:	1f 92       	push	r1
    386e:	0f 92       	push	r0
    3870:	0f b6       	in	r0, 0x3f	; 63
    3872:	0f 92       	push	r0
    3874:	11 24       	eor	r1, r1
    3876:	2f 93       	push	r18
    3878:	8f 93       	push	r24
    387a:	9f 93       	push	r25
    387c:	ef 93       	push	r30
    387e:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    3880:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>

	if (recv1_buf.nxfrd < recv1_buf.nbytes) {
    3884:	e0 91 1b 2b 	lds	r30, 0x2B1B	; 0x802b1b <recv1_buf+0x102>
    3888:	80 91 19 2b 	lds	r24, 0x2B19	; 0x802b19 <recv1_buf+0x100>
    388c:	e8 17       	cp	r30, r24
    388e:	40 f4       	brcc	.+16     	; 0x38a0 <__vector_26+0x34>
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    3890:	21 e0       	ldi	r18, 0x01	; 1
    3892:	2e 0f       	add	r18, r30
    3894:	20 93 1b 2b 	sts	0x2B1B, r18	; 0x802b1b <recv1_buf+0x102>
    3898:	f0 e0       	ldi	r31, 0x00	; 0
    389a:	e7 5e       	subi	r30, 0xE7	; 231
    389c:	f5 4d       	sbci	r31, 0xD5	; 213
    389e:	90 83       	st	Z, r25
	}

	if (recv1_buf.nxfrd >= recv1_buf.nbytes) {
    38a0:	90 91 1b 2b 	lds	r25, 0x2B1B	; 0x802b1b <recv1_buf+0x102>
    38a4:	98 17       	cp	r25, r24
    38a6:	18 f0       	brcs	.+6      	; 0x38ae <__vector_26+0x42>
		recv1_buf.done = YES;
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	80 93 1c 2b 	sts	0x2B1C, r24	; 0x802b1c <recv1_buf+0x103>
	}

}
    38ae:	ff 91       	pop	r31
    38b0:	ef 91       	pop	r30
    38b2:	9f 91       	pop	r25
    38b4:	8f 91       	pop	r24
    38b6:	2f 91       	pop	r18
    38b8:	0f 90       	pop	r0
    38ba:	0f be       	out	0x3f, r0	; 63
    38bc:	0f 90       	pop	r0
    38be:	1f 90       	pop	r1
    38c0:	18 95       	reti

000038c2 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    38c2:	1f 92       	push	r1
    38c4:	0f 92       	push	r0
    38c6:	0f b6       	in	r0, 0x3f	; 63
    38c8:	0f 92       	push	r0
    38ca:	11 24       	eor	r1, r1
    38cc:	2f 93       	push	r18
    38ce:	8f 93       	push	r24
    38d0:	9f 93       	push	r25
    38d2:	ef 93       	push	r30
    38d4:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    38d6:	e0 e2       	ldi	r30, 0x20	; 32
    38d8:	f8 e0       	ldi	r31, 0x08	; 8
    38da:	85 81       	ldd	r24, Z+5	; 0x05
    38dc:	8f 7d       	andi	r24, 0xDF	; 223
    38de:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    38e0:	80 91 2b 30 	lds	r24, 0x302B	; 0x80302b <send1_buf+0xfe>
    38e4:	e0 91 2c 30 	lds	r30, 0x302C	; 0x80302c <send1_buf+0xff>
    38e8:	8e 17       	cp	r24, r30
    38ea:	d1 f0       	breq	.+52     	; 0x3920 <__vector_27+0x5e>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	8e 0f       	add	r24, r30
    38f0:	80 93 2c 30 	sts	0x302C, r24	; 0x80302c <send1_buf+0xff>
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	e3 5d       	subi	r30, 0xD3	; 211
    38f8:	f0 4d       	sbci	r31, 0xD0	; 208
    38fa:	90 81       	ld	r25, Z
    38fc:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    3900:	91 e0       	ldi	r25, 0x01	; 1
    3902:	8e 3f       	cpi	r24, 0xFE	; 254
    3904:	08 f4       	brcc	.+2      	; 0x3908 <__vector_27+0x46>
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	91 95       	neg	r25
    390a:	29 2f       	mov	r18, r25
    390c:	22 0f       	add	r18, r18
    390e:	82 1b       	sub	r24, r18
    3910:	80 93 2c 30 	sts	0x302C, r24	; 0x80302c <send1_buf+0xff>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    3914:	e0 e2       	ldi	r30, 0x20	; 32
    3916:	f8 e0       	ldi	r31, 0x08	; 8
    3918:	85 81       	ldd	r24, Z+5	; 0x05
    391a:	80 62       	ori	r24, 0x20	; 32
    391c:	85 83       	std	Z+5, r24	; 0x05
    391e:	03 c0       	rjmp	.+6      	; 0x3926 <__vector_27+0x64>
	} else {
		send1_buf.done = YES;
    3920:	81 e0       	ldi	r24, 0x01	; 1
    3922:	80 93 30 30 	sts	0x3030, r24	; 0x803030 <send1_buf+0x103>
	}

}
    3926:	ff 91       	pop	r31
    3928:	ef 91       	pop	r30
    392a:	9f 91       	pop	r25
    392c:	8f 91       	pop	r24
    392e:	2f 91       	pop	r18
    3930:	0f 90       	pop	r0
    3932:	0f be       	out	0x3f, r0	; 63
    3934:	0f 90       	pop	r0
    3936:	1f 90       	pop	r1
    3938:	18 95       	reti

0000393a <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    393a:	1f 92       	push	r1
    393c:	0f 92       	push	r0
    393e:	0f b6       	in	r0, 0x3f	; 63
    3940:	0f 92       	push	r0
    3942:	11 24       	eor	r1, r1
    3944:	8f 93       	push	r24
    3946:	9f 93       	push	r25
    3948:	af 93       	push	r26
    394a:	bf 93       	push	r27
    394c:	ef 93       	push	r30
    394e:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    3950:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    3954:	8d 30       	cpi	r24, 0x0D	; 13
    3956:	21 f0       	breq	.+8      	; 0x3960 <__vector_37+0x26>
    3958:	e0 91 27 2e 	lds	r30, 0x2E27	; 0x802e27 <recv3_buf+0x102>
    395c:	ed 3f       	cpi	r30, 0xFD	; 253
    395e:	78 f0       	brcs	.+30     	; 0x397e <__vector_37+0x44>
		recv3_buf.done = YES;
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	80 93 28 2e 	sts	0x2E28, r24	; 0x802e28 <recv3_buf+0x103>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    3966:	a7 e2       	ldi	r26, 0x27	; 39
    3968:	be e2       	ldi	r27, 0x2E	; 46
    396a:	8c 91       	ld	r24, X
    396c:	e8 2f       	mov	r30, r24
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	eb 5d       	subi	r30, 0xDB	; 219
    3972:	f2 4d       	sbci	r31, 0xD2	; 210
    3974:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    3976:	80 93 25 2e 	sts	0x2E25, r24	; 0x802e25 <recv3_buf+0x100>
		recv3_buf.nxfrd = 0;
    397a:	1c 92       	st	X, r1
		return;
    397c:	08 c0       	rjmp	.+16     	; 0x398e <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    397e:	91 e0       	ldi	r25, 0x01	; 1
    3980:	9e 0f       	add	r25, r30
    3982:	90 93 27 2e 	sts	0x2E27, r25	; 0x802e27 <recv3_buf+0x102>
    3986:	f0 e0       	ldi	r31, 0x00	; 0
    3988:	eb 5d       	subi	r30, 0xDB	; 219
    398a:	f2 4d       	sbci	r31, 0xD2	; 210
    398c:	80 83       	st	Z, r24
	}

}
    398e:	ff 91       	pop	r31
    3990:	ef 91       	pop	r30
    3992:	bf 91       	pop	r27
    3994:	af 91       	pop	r26
    3996:	9f 91       	pop	r25
    3998:	8f 91       	pop	r24
    399a:	0f 90       	pop	r0
    399c:	0f be       	out	0x3f, r0	; 63
    399e:	0f 90       	pop	r0
    39a0:	1f 90       	pop	r1
    39a2:	18 95       	reti

000039a4 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    39a4:	1f 92       	push	r1
    39a6:	0f 92       	push	r0
    39a8:	0f b6       	in	r0, 0x3f	; 63
    39aa:	0f 92       	push	r0
    39ac:	11 24       	eor	r1, r1
    39ae:	8f 93       	push	r24
    39b0:	9f 93       	push	r25
    39b2:	af 93       	push	r26
    39b4:	bf 93       	push	r27
    39b6:	ef 93       	push	r30
    39b8:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    39ba:	ab e2       	ldi	r26, 0x2B	; 43
    39bc:	bf e2       	ldi	r27, 0x2F	; 47
    39be:	ec 91       	ld	r30, X
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	8e 0f       	add	r24, r30
    39c4:	8c 93       	st	X, r24
    39c6:	f0 e0       	ldi	r31, 0x00	; 0
    39c8:	e7 5d       	subi	r30, 0xD7	; 215
    39ca:	f1 4d       	sbci	r31, 0xD1	; 209
    39cc:	90 81       	ld	r25, Z
    39ce:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    39d2:	90 91 29 2f 	lds	r25, 0x2F29	; 0x802f29 <send3_buf+0x100>
    39d6:	89 17       	cp	r24, r25
    39d8:	40 f0       	brcs	.+16     	; 0x39ea <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    39da:	e0 e6       	ldi	r30, 0x60	; 96
    39dc:	f8 e0       	ldi	r31, 0x08	; 8
    39de:	85 81       	ldd	r24, Z+5	; 0x05
    39e0:	8f 7d       	andi	r24, 0xDF	; 223
    39e2:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    39e4:	81 e0       	ldi	r24, 0x01	; 1
    39e6:	80 93 2c 2f 	sts	0x2F2C, r24	; 0x802f2c <send3_buf+0x103>
	}

}
    39ea:	ff 91       	pop	r31
    39ec:	ef 91       	pop	r30
    39ee:	bf 91       	pop	r27
    39f0:	af 91       	pop	r26
    39f2:	9f 91       	pop	r25
    39f4:	8f 91       	pop	r24
    39f6:	0f 90       	pop	r0
    39f8:	0f be       	out	0x3f, r0	; 63
    39fa:	0f 90       	pop	r0
    39fc:	1f 90       	pop	r1
    39fe:	18 95       	reti

00003a00 <reboot>:
#include "wdt.h"

void reboot(void)
{

	init_USART();
    3a00:	0e 94 b4 1a 	call	0x3568	; 0x3568 <init_USART>
	init_XPORT();
    3a04:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <init_XPORT>
	CPU_CCP = CCP_IOREG_gc;
    3a08:	88 ed       	ldi	r24, 0xD8	; 216
    3a0a:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    3a12:	08 95       	ret

00003a14 <__vector_29>:

}

ISR(PORTF_PORT_vect)
{
    3a14:	1f 92       	push	r1
    3a16:	0f 92       	push	r0
    3a18:	0f b6       	in	r0, 0x3f	; 63
    3a1a:	0f 92       	push	r0
    3a1c:	11 24       	eor	r1, r1
    3a1e:	2f 93       	push	r18
    3a20:	3f 93       	push	r19
    3a22:	4f 93       	push	r20
    3a24:	5f 93       	push	r21
    3a26:	6f 93       	push	r22
    3a28:	7f 93       	push	r23
    3a2a:	8f 93       	push	r24
    3a2c:	9f 93       	push	r25
    3a2e:	af 93       	push	r26
    3a30:	bf 93       	push	r27
    3a32:	ef 93       	push	r30
    3a34:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
    3a36:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
    3a3a:	86 ff       	sbrs	r24, 6
    3a3c:	05 c0       	rjmp	.+10     	; 0x3a48 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
    3a3e:	80 e4       	ldi	r24, 0x40	; 64
    3a40:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
    3a44:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <reboot>
	}

}
    3a48:	ff 91       	pop	r31
    3a4a:	ef 91       	pop	r30
    3a4c:	bf 91       	pop	r27
    3a4e:	af 91       	pop	r26
    3a50:	9f 91       	pop	r25
    3a52:	8f 91       	pop	r24
    3a54:	7f 91       	pop	r23
    3a56:	6f 91       	pop	r22
    3a58:	5f 91       	pop	r21
    3a5a:	4f 91       	pop	r20
    3a5c:	3f 91       	pop	r19
    3a5e:	2f 91       	pop	r18
    3a60:	0f 90       	pop	r0
    3a62:	0f be       	out	0x3f, r0	; 63
    3a64:	0f 90       	pop	r0
    3a66:	1f 90       	pop	r1
    3a68:	18 95       	reti

00003a6a <init_XPORT>:
#include "initialize.h"

void init_XPORT(void)
{

	PORTC.OUTCLR = PIN3_bm;		// PC3 is the /RESET pin for the XPort
    3a6a:	e0 e4       	ldi	r30, 0x40	; 64
    3a6c:	f4 e0       	ldi	r31, 0x04	; 4
    3a6e:	88 e0       	ldi	r24, 0x08	; 8
    3a70:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;
    3a72:	81 83       	std	Z+1, r24	; 0x01
    3a74:	ad e8       	ldi	r26, 0x8D	; 141
    3a76:	b0 e2       	ldi	r27, 0x20	; 32
    3a78:	11 97       	sbiw	r26, 0x01	; 1
    3a7a:	f1 f7       	brne	.-4      	; 0x3a78 <init_XPORT+0xe>
    3a7c:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;
    3a7e:	85 83       	std	Z+5, r24	; 0x05
    3a80:	08 95       	ret

00003a82 <__subsf3>:
    3a82:	50 58       	subi	r21, 0x80	; 128

00003a84 <__addsf3>:
    3a84:	bb 27       	eor	r27, r27
    3a86:	aa 27       	eor	r26, r26
    3a88:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__addsf3x>
    3a8c:	0c 94 9d 1e 	jmp	0x3d3a	; 0x3d3a <__fp_round>
    3a90:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__fp_pscA>
    3a94:	38 f0       	brcs	.+14     	; 0x3aa4 <__addsf3+0x20>
    3a96:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__fp_pscB>
    3a9a:	20 f0       	brcs	.+8      	; 0x3aa4 <__addsf3+0x20>
    3a9c:	39 f4       	brne	.+14     	; 0x3aac <__addsf3+0x28>
    3a9e:	9f 3f       	cpi	r25, 0xFF	; 255
    3aa0:	19 f4       	brne	.+6      	; 0x3aa8 <__addsf3+0x24>
    3aa2:	26 f4       	brtc	.+8      	; 0x3aac <__addsf3+0x28>
    3aa4:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <__fp_nan>
    3aa8:	0e f4       	brtc	.+2      	; 0x3aac <__addsf3+0x28>
    3aaa:	e0 95       	com	r30
    3aac:	e7 fb       	bst	r30, 7
    3aae:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__fp_inf>

00003ab2 <__addsf3x>:
    3ab2:	e9 2f       	mov	r30, r25
    3ab4:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__fp_split3>
    3ab8:	58 f3       	brcs	.-42     	; 0x3a90 <__addsf3+0xc>
    3aba:	ba 17       	cp	r27, r26
    3abc:	62 07       	cpc	r22, r18
    3abe:	73 07       	cpc	r23, r19
    3ac0:	84 07       	cpc	r24, r20
    3ac2:	95 07       	cpc	r25, r21
    3ac4:	20 f0       	brcs	.+8      	; 0x3ace <__addsf3x+0x1c>
    3ac6:	79 f4       	brne	.+30     	; 0x3ae6 <__addsf3x+0x34>
    3ac8:	a6 f5       	brtc	.+104    	; 0x3b32 <__addsf3x+0x80>
    3aca:	0c 94 d0 1e 	jmp	0x3da0	; 0x3da0 <__fp_zero>
    3ace:	0e f4       	brtc	.+2      	; 0x3ad2 <__addsf3x+0x20>
    3ad0:	e0 95       	com	r30
    3ad2:	0b 2e       	mov	r0, r27
    3ad4:	ba 2f       	mov	r27, r26
    3ad6:	a0 2d       	mov	r26, r0
    3ad8:	0b 01       	movw	r0, r22
    3ada:	b9 01       	movw	r22, r18
    3adc:	90 01       	movw	r18, r0
    3ade:	0c 01       	movw	r0, r24
    3ae0:	ca 01       	movw	r24, r20
    3ae2:	a0 01       	movw	r20, r0
    3ae4:	11 24       	eor	r1, r1
    3ae6:	ff 27       	eor	r31, r31
    3ae8:	59 1b       	sub	r21, r25
    3aea:	99 f0       	breq	.+38     	; 0x3b12 <__addsf3x+0x60>
    3aec:	59 3f       	cpi	r21, 0xF9	; 249
    3aee:	50 f4       	brcc	.+20     	; 0x3b04 <__addsf3x+0x52>
    3af0:	50 3e       	cpi	r21, 0xE0	; 224
    3af2:	68 f1       	brcs	.+90     	; 0x3b4e <__addsf3x+0x9c>
    3af4:	1a 16       	cp	r1, r26
    3af6:	f0 40       	sbci	r31, 0x00	; 0
    3af8:	a2 2f       	mov	r26, r18
    3afa:	23 2f       	mov	r18, r19
    3afc:	34 2f       	mov	r19, r20
    3afe:	44 27       	eor	r20, r20
    3b00:	58 5f       	subi	r21, 0xF8	; 248
    3b02:	f3 cf       	rjmp	.-26     	; 0x3aea <__addsf3x+0x38>
    3b04:	46 95       	lsr	r20
    3b06:	37 95       	ror	r19
    3b08:	27 95       	ror	r18
    3b0a:	a7 95       	ror	r26
    3b0c:	f0 40       	sbci	r31, 0x00	; 0
    3b0e:	53 95       	inc	r21
    3b10:	c9 f7       	brne	.-14     	; 0x3b04 <__addsf3x+0x52>
    3b12:	7e f4       	brtc	.+30     	; 0x3b32 <__addsf3x+0x80>
    3b14:	1f 16       	cp	r1, r31
    3b16:	ba 0b       	sbc	r27, r26
    3b18:	62 0b       	sbc	r22, r18
    3b1a:	73 0b       	sbc	r23, r19
    3b1c:	84 0b       	sbc	r24, r20
    3b1e:	ba f0       	brmi	.+46     	; 0x3b4e <__addsf3x+0x9c>
    3b20:	91 50       	subi	r25, 0x01	; 1
    3b22:	a1 f0       	breq	.+40     	; 0x3b4c <__addsf3x+0x9a>
    3b24:	ff 0f       	add	r31, r31
    3b26:	bb 1f       	adc	r27, r27
    3b28:	66 1f       	adc	r22, r22
    3b2a:	77 1f       	adc	r23, r23
    3b2c:	88 1f       	adc	r24, r24
    3b2e:	c2 f7       	brpl	.-16     	; 0x3b20 <__addsf3x+0x6e>
    3b30:	0e c0       	rjmp	.+28     	; 0x3b4e <__addsf3x+0x9c>
    3b32:	ba 0f       	add	r27, r26
    3b34:	62 1f       	adc	r22, r18
    3b36:	73 1f       	adc	r23, r19
    3b38:	84 1f       	adc	r24, r20
    3b3a:	48 f4       	brcc	.+18     	; 0x3b4e <__addsf3x+0x9c>
    3b3c:	87 95       	ror	r24
    3b3e:	77 95       	ror	r23
    3b40:	67 95       	ror	r22
    3b42:	b7 95       	ror	r27
    3b44:	f7 95       	ror	r31
    3b46:	9e 3f       	cpi	r25, 0xFE	; 254
    3b48:	08 f0       	brcs	.+2      	; 0x3b4c <__addsf3x+0x9a>
    3b4a:	b0 cf       	rjmp	.-160    	; 0x3aac <__addsf3+0x28>
    3b4c:	93 95       	inc	r25
    3b4e:	88 0f       	add	r24, r24
    3b50:	08 f0       	brcs	.+2      	; 0x3b54 <__addsf3x+0xa2>
    3b52:	99 27       	eor	r25, r25
    3b54:	ee 0f       	add	r30, r30
    3b56:	97 95       	ror	r25
    3b58:	87 95       	ror	r24
    3b5a:	08 95       	ret

00003b5c <__cmpsf2>:
    3b5c:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <__fp_cmp>
    3b60:	08 f4       	brcc	.+2      	; 0x3b64 <__cmpsf2+0x8>
    3b62:	81 e0       	ldi	r24, 0x01	; 1
    3b64:	08 95       	ret

00003b66 <__divsf3>:
    3b66:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <__divsf3x>
    3b6a:	0c 94 9d 1e 	jmp	0x3d3a	; 0x3d3a <__fp_round>
    3b6e:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__fp_pscB>
    3b72:	58 f0       	brcs	.+22     	; 0x3b8a <__divsf3+0x24>
    3b74:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__fp_pscA>
    3b78:	40 f0       	brcs	.+16     	; 0x3b8a <__divsf3+0x24>
    3b7a:	29 f4       	brne	.+10     	; 0x3b86 <__divsf3+0x20>
    3b7c:	5f 3f       	cpi	r21, 0xFF	; 255
    3b7e:	29 f0       	breq	.+10     	; 0x3b8a <__divsf3+0x24>
    3b80:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__fp_inf>
    3b84:	51 11       	cpse	r21, r1
    3b86:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <__fp_szero>
    3b8a:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <__fp_nan>

00003b8e <__divsf3x>:
    3b8e:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__fp_split3>
    3b92:	68 f3       	brcs	.-38     	; 0x3b6e <__divsf3+0x8>

00003b94 <__divsf3_pse>:
    3b94:	99 23       	and	r25, r25
    3b96:	b1 f3       	breq	.-20     	; 0x3b84 <__divsf3+0x1e>
    3b98:	55 23       	and	r21, r21
    3b9a:	91 f3       	breq	.-28     	; 0x3b80 <__divsf3+0x1a>
    3b9c:	95 1b       	sub	r25, r21
    3b9e:	55 0b       	sbc	r21, r21
    3ba0:	bb 27       	eor	r27, r27
    3ba2:	aa 27       	eor	r26, r26
    3ba4:	62 17       	cp	r22, r18
    3ba6:	73 07       	cpc	r23, r19
    3ba8:	84 07       	cpc	r24, r20
    3baa:	38 f0       	brcs	.+14     	; 0x3bba <__divsf3_pse+0x26>
    3bac:	9f 5f       	subi	r25, 0xFF	; 255
    3bae:	5f 4f       	sbci	r21, 0xFF	; 255
    3bb0:	22 0f       	add	r18, r18
    3bb2:	33 1f       	adc	r19, r19
    3bb4:	44 1f       	adc	r20, r20
    3bb6:	aa 1f       	adc	r26, r26
    3bb8:	a9 f3       	breq	.-22     	; 0x3ba4 <__divsf3_pse+0x10>
    3bba:	35 d0       	rcall	.+106    	; 0x3c26 <__divsf3_pse+0x92>
    3bbc:	0e 2e       	mov	r0, r30
    3bbe:	3a f0       	brmi	.+14     	; 0x3bce <__divsf3_pse+0x3a>
    3bc0:	e0 e8       	ldi	r30, 0x80	; 128
    3bc2:	32 d0       	rcall	.+100    	; 0x3c28 <__divsf3_pse+0x94>
    3bc4:	91 50       	subi	r25, 0x01	; 1
    3bc6:	50 40       	sbci	r21, 0x00	; 0
    3bc8:	e6 95       	lsr	r30
    3bca:	00 1c       	adc	r0, r0
    3bcc:	ca f7       	brpl	.-14     	; 0x3bc0 <__divsf3_pse+0x2c>
    3bce:	2b d0       	rcall	.+86     	; 0x3c26 <__divsf3_pse+0x92>
    3bd0:	fe 2f       	mov	r31, r30
    3bd2:	29 d0       	rcall	.+82     	; 0x3c26 <__divsf3_pse+0x92>
    3bd4:	66 0f       	add	r22, r22
    3bd6:	77 1f       	adc	r23, r23
    3bd8:	88 1f       	adc	r24, r24
    3bda:	bb 1f       	adc	r27, r27
    3bdc:	26 17       	cp	r18, r22
    3bde:	37 07       	cpc	r19, r23
    3be0:	48 07       	cpc	r20, r24
    3be2:	ab 07       	cpc	r26, r27
    3be4:	b0 e8       	ldi	r27, 0x80	; 128
    3be6:	09 f0       	breq	.+2      	; 0x3bea <__divsf3_pse+0x56>
    3be8:	bb 0b       	sbc	r27, r27
    3bea:	80 2d       	mov	r24, r0
    3bec:	bf 01       	movw	r22, r30
    3bee:	ff 27       	eor	r31, r31
    3bf0:	93 58       	subi	r25, 0x83	; 131
    3bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    3bf4:	3a f0       	brmi	.+14     	; 0x3c04 <__divsf3_pse+0x70>
    3bf6:	9e 3f       	cpi	r25, 0xFE	; 254
    3bf8:	51 05       	cpc	r21, r1
    3bfa:	78 f0       	brcs	.+30     	; 0x3c1a <__divsf3_pse+0x86>
    3bfc:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__fp_inf>
    3c00:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <__fp_szero>
    3c04:	5f 3f       	cpi	r21, 0xFF	; 255
    3c06:	e4 f3       	brlt	.-8      	; 0x3c00 <__divsf3_pse+0x6c>
    3c08:	98 3e       	cpi	r25, 0xE8	; 232
    3c0a:	d4 f3       	brlt	.-12     	; 0x3c00 <__divsf3_pse+0x6c>
    3c0c:	86 95       	lsr	r24
    3c0e:	77 95       	ror	r23
    3c10:	67 95       	ror	r22
    3c12:	b7 95       	ror	r27
    3c14:	f7 95       	ror	r31
    3c16:	9f 5f       	subi	r25, 0xFF	; 255
    3c18:	c9 f7       	brne	.-14     	; 0x3c0c <__divsf3_pse+0x78>
    3c1a:	88 0f       	add	r24, r24
    3c1c:	91 1d       	adc	r25, r1
    3c1e:	96 95       	lsr	r25
    3c20:	87 95       	ror	r24
    3c22:	97 f9       	bld	r25, 7
    3c24:	08 95       	ret
    3c26:	e1 e0       	ldi	r30, 0x01	; 1
    3c28:	66 0f       	add	r22, r22
    3c2a:	77 1f       	adc	r23, r23
    3c2c:	88 1f       	adc	r24, r24
    3c2e:	bb 1f       	adc	r27, r27
    3c30:	62 17       	cp	r22, r18
    3c32:	73 07       	cpc	r23, r19
    3c34:	84 07       	cpc	r24, r20
    3c36:	ba 07       	cpc	r27, r26
    3c38:	20 f0       	brcs	.+8      	; 0x3c42 <__divsf3_pse+0xae>
    3c3a:	62 1b       	sub	r22, r18
    3c3c:	73 0b       	sbc	r23, r19
    3c3e:	84 0b       	sbc	r24, r20
    3c40:	ba 0b       	sbc	r27, r26
    3c42:	ee 1f       	adc	r30, r30
    3c44:	88 f7       	brcc	.-30     	; 0x3c28 <__divsf3_pse+0x94>
    3c46:	e0 95       	com	r30
    3c48:	08 95       	ret

00003c4a <__floatunsisf>:
    3c4a:	e8 94       	clt
    3c4c:	09 c0       	rjmp	.+18     	; 0x3c60 <__floatsisf+0x12>

00003c4e <__floatsisf>:
    3c4e:	97 fb       	bst	r25, 7
    3c50:	3e f4       	brtc	.+14     	; 0x3c60 <__floatsisf+0x12>
    3c52:	90 95       	com	r25
    3c54:	80 95       	com	r24
    3c56:	70 95       	com	r23
    3c58:	61 95       	neg	r22
    3c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    3c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c60:	99 23       	and	r25, r25
    3c62:	a9 f0       	breq	.+42     	; 0x3c8e <__floatsisf+0x40>
    3c64:	f9 2f       	mov	r31, r25
    3c66:	96 e9       	ldi	r25, 0x96	; 150
    3c68:	bb 27       	eor	r27, r27
    3c6a:	93 95       	inc	r25
    3c6c:	f6 95       	lsr	r31
    3c6e:	87 95       	ror	r24
    3c70:	77 95       	ror	r23
    3c72:	67 95       	ror	r22
    3c74:	b7 95       	ror	r27
    3c76:	f1 11       	cpse	r31, r1
    3c78:	f8 cf       	rjmp	.-16     	; 0x3c6a <__floatsisf+0x1c>
    3c7a:	fa f4       	brpl	.+62     	; 0x3cba <__floatsisf+0x6c>
    3c7c:	bb 0f       	add	r27, r27
    3c7e:	11 f4       	brne	.+4      	; 0x3c84 <__floatsisf+0x36>
    3c80:	60 ff       	sbrs	r22, 0
    3c82:	1b c0       	rjmp	.+54     	; 0x3cba <__floatsisf+0x6c>
    3c84:	6f 5f       	subi	r22, 0xFF	; 255
    3c86:	7f 4f       	sbci	r23, 0xFF	; 255
    3c88:	8f 4f       	sbci	r24, 0xFF	; 255
    3c8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c8c:	16 c0       	rjmp	.+44     	; 0x3cba <__floatsisf+0x6c>
    3c8e:	88 23       	and	r24, r24
    3c90:	11 f0       	breq	.+4      	; 0x3c96 <__floatsisf+0x48>
    3c92:	96 e9       	ldi	r25, 0x96	; 150
    3c94:	11 c0       	rjmp	.+34     	; 0x3cb8 <__floatsisf+0x6a>
    3c96:	77 23       	and	r23, r23
    3c98:	21 f0       	breq	.+8      	; 0x3ca2 <__floatsisf+0x54>
    3c9a:	9e e8       	ldi	r25, 0x8E	; 142
    3c9c:	87 2f       	mov	r24, r23
    3c9e:	76 2f       	mov	r23, r22
    3ca0:	05 c0       	rjmp	.+10     	; 0x3cac <__floatsisf+0x5e>
    3ca2:	66 23       	and	r22, r22
    3ca4:	71 f0       	breq	.+28     	; 0x3cc2 <__floatsisf+0x74>
    3ca6:	96 e8       	ldi	r25, 0x86	; 134
    3ca8:	86 2f       	mov	r24, r22
    3caa:	70 e0       	ldi	r23, 0x00	; 0
    3cac:	60 e0       	ldi	r22, 0x00	; 0
    3cae:	2a f0       	brmi	.+10     	; 0x3cba <__floatsisf+0x6c>
    3cb0:	9a 95       	dec	r25
    3cb2:	66 0f       	add	r22, r22
    3cb4:	77 1f       	adc	r23, r23
    3cb6:	88 1f       	adc	r24, r24
    3cb8:	da f7       	brpl	.-10     	; 0x3cb0 <__floatsisf+0x62>
    3cba:	88 0f       	add	r24, r24
    3cbc:	96 95       	lsr	r25
    3cbe:	87 95       	ror	r24
    3cc0:	97 f9       	bld	r25, 7
    3cc2:	08 95       	ret

00003cc4 <__fp_cmp>:
    3cc4:	99 0f       	add	r25, r25
    3cc6:	00 08       	sbc	r0, r0
    3cc8:	55 0f       	add	r21, r21
    3cca:	aa 0b       	sbc	r26, r26
    3ccc:	e0 e8       	ldi	r30, 0x80	; 128
    3cce:	fe ef       	ldi	r31, 0xFE	; 254
    3cd0:	16 16       	cp	r1, r22
    3cd2:	17 06       	cpc	r1, r23
    3cd4:	e8 07       	cpc	r30, r24
    3cd6:	f9 07       	cpc	r31, r25
    3cd8:	c0 f0       	brcs	.+48     	; 0x3d0a <__fp_cmp+0x46>
    3cda:	12 16       	cp	r1, r18
    3cdc:	13 06       	cpc	r1, r19
    3cde:	e4 07       	cpc	r30, r20
    3ce0:	f5 07       	cpc	r31, r21
    3ce2:	98 f0       	brcs	.+38     	; 0x3d0a <__fp_cmp+0x46>
    3ce4:	62 1b       	sub	r22, r18
    3ce6:	73 0b       	sbc	r23, r19
    3ce8:	84 0b       	sbc	r24, r20
    3cea:	95 0b       	sbc	r25, r21
    3cec:	39 f4       	brne	.+14     	; 0x3cfc <__fp_cmp+0x38>
    3cee:	0a 26       	eor	r0, r26
    3cf0:	61 f0       	breq	.+24     	; 0x3d0a <__fp_cmp+0x46>
    3cf2:	23 2b       	or	r18, r19
    3cf4:	24 2b       	or	r18, r20
    3cf6:	25 2b       	or	r18, r21
    3cf8:	21 f4       	brne	.+8      	; 0x3d02 <__fp_cmp+0x3e>
    3cfa:	08 95       	ret
    3cfc:	0a 26       	eor	r0, r26
    3cfe:	09 f4       	brne	.+2      	; 0x3d02 <__fp_cmp+0x3e>
    3d00:	a1 40       	sbci	r26, 0x01	; 1
    3d02:	a6 95       	lsr	r26
    3d04:	8f ef       	ldi	r24, 0xFF	; 255
    3d06:	81 1d       	adc	r24, r1
    3d08:	81 1d       	adc	r24, r1
    3d0a:	08 95       	ret

00003d0c <__fp_inf>:
    3d0c:	97 f9       	bld	r25, 7
    3d0e:	9f 67       	ori	r25, 0x7F	; 127
    3d10:	80 e8       	ldi	r24, 0x80	; 128
    3d12:	70 e0       	ldi	r23, 0x00	; 0
    3d14:	60 e0       	ldi	r22, 0x00	; 0
    3d16:	08 95       	ret

00003d18 <__fp_nan>:
    3d18:	9f ef       	ldi	r25, 0xFF	; 255
    3d1a:	80 ec       	ldi	r24, 0xC0	; 192
    3d1c:	08 95       	ret

00003d1e <__fp_pscA>:
    3d1e:	00 24       	eor	r0, r0
    3d20:	0a 94       	dec	r0
    3d22:	16 16       	cp	r1, r22
    3d24:	17 06       	cpc	r1, r23
    3d26:	18 06       	cpc	r1, r24
    3d28:	09 06       	cpc	r0, r25
    3d2a:	08 95       	ret

00003d2c <__fp_pscB>:
    3d2c:	00 24       	eor	r0, r0
    3d2e:	0a 94       	dec	r0
    3d30:	12 16       	cp	r1, r18
    3d32:	13 06       	cpc	r1, r19
    3d34:	14 06       	cpc	r1, r20
    3d36:	05 06       	cpc	r0, r21
    3d38:	08 95       	ret

00003d3a <__fp_round>:
    3d3a:	09 2e       	mov	r0, r25
    3d3c:	03 94       	inc	r0
    3d3e:	00 0c       	add	r0, r0
    3d40:	11 f4       	brne	.+4      	; 0x3d46 <__fp_round+0xc>
    3d42:	88 23       	and	r24, r24
    3d44:	52 f0       	brmi	.+20     	; 0x3d5a <__fp_round+0x20>
    3d46:	bb 0f       	add	r27, r27
    3d48:	40 f4       	brcc	.+16     	; 0x3d5a <__fp_round+0x20>
    3d4a:	bf 2b       	or	r27, r31
    3d4c:	11 f4       	brne	.+4      	; 0x3d52 <__fp_round+0x18>
    3d4e:	60 ff       	sbrs	r22, 0
    3d50:	04 c0       	rjmp	.+8      	; 0x3d5a <__fp_round+0x20>
    3d52:	6f 5f       	subi	r22, 0xFF	; 255
    3d54:	7f 4f       	sbci	r23, 0xFF	; 255
    3d56:	8f 4f       	sbci	r24, 0xFF	; 255
    3d58:	9f 4f       	sbci	r25, 0xFF	; 255
    3d5a:	08 95       	ret

00003d5c <__fp_split3>:
    3d5c:	57 fd       	sbrc	r21, 7
    3d5e:	90 58       	subi	r25, 0x80	; 128
    3d60:	44 0f       	add	r20, r20
    3d62:	55 1f       	adc	r21, r21
    3d64:	59 f0       	breq	.+22     	; 0x3d7c <__fp_splitA+0x10>
    3d66:	5f 3f       	cpi	r21, 0xFF	; 255
    3d68:	71 f0       	breq	.+28     	; 0x3d86 <__fp_splitA+0x1a>
    3d6a:	47 95       	ror	r20

00003d6c <__fp_splitA>:
    3d6c:	88 0f       	add	r24, r24
    3d6e:	97 fb       	bst	r25, 7
    3d70:	99 1f       	adc	r25, r25
    3d72:	61 f0       	breq	.+24     	; 0x3d8c <__fp_splitA+0x20>
    3d74:	9f 3f       	cpi	r25, 0xFF	; 255
    3d76:	79 f0       	breq	.+30     	; 0x3d96 <__fp_splitA+0x2a>
    3d78:	87 95       	ror	r24
    3d7a:	08 95       	ret
    3d7c:	12 16       	cp	r1, r18
    3d7e:	13 06       	cpc	r1, r19
    3d80:	14 06       	cpc	r1, r20
    3d82:	55 1f       	adc	r21, r21
    3d84:	f2 cf       	rjmp	.-28     	; 0x3d6a <__fp_split3+0xe>
    3d86:	46 95       	lsr	r20
    3d88:	f1 df       	rcall	.-30     	; 0x3d6c <__fp_splitA>
    3d8a:	08 c0       	rjmp	.+16     	; 0x3d9c <__fp_splitA+0x30>
    3d8c:	16 16       	cp	r1, r22
    3d8e:	17 06       	cpc	r1, r23
    3d90:	18 06       	cpc	r1, r24
    3d92:	99 1f       	adc	r25, r25
    3d94:	f1 cf       	rjmp	.-30     	; 0x3d78 <__fp_splitA+0xc>
    3d96:	86 95       	lsr	r24
    3d98:	71 05       	cpc	r23, r1
    3d9a:	61 05       	cpc	r22, r1
    3d9c:	08 94       	sec
    3d9e:	08 95       	ret

00003da0 <__fp_zero>:
    3da0:	e8 94       	clt

00003da2 <__fp_szero>:
    3da2:	bb 27       	eor	r27, r27
    3da4:	66 27       	eor	r22, r22
    3da6:	77 27       	eor	r23, r23
    3da8:	cb 01       	movw	r24, r22
    3daa:	97 f9       	bld	r25, 7
    3dac:	08 95       	ret

00003dae <__gesf2>:
    3dae:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <__fp_cmp>
    3db2:	08 f4       	brcc	.+2      	; 0x3db6 <__gesf2+0x8>
    3db4:	8f ef       	ldi	r24, 0xFF	; 255
    3db6:	08 95       	ret

00003db8 <__mulsf3>:
    3db8:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <__mulsf3x>
    3dbc:	0c 94 9d 1e 	jmp	0x3d3a	; 0x3d3a <__fp_round>
    3dc0:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <__fp_pscA>
    3dc4:	38 f0       	brcs	.+14     	; 0x3dd4 <__mulsf3+0x1c>
    3dc6:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <__fp_pscB>
    3dca:	20 f0       	brcs	.+8      	; 0x3dd4 <__mulsf3+0x1c>
    3dcc:	95 23       	and	r25, r21
    3dce:	11 f0       	breq	.+4      	; 0x3dd4 <__mulsf3+0x1c>
    3dd0:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__fp_inf>
    3dd4:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <__fp_nan>
    3dd8:	11 24       	eor	r1, r1
    3dda:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <__fp_szero>

00003dde <__mulsf3x>:
    3dde:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__fp_split3>
    3de2:	70 f3       	brcs	.-36     	; 0x3dc0 <__mulsf3+0x8>

00003de4 <__mulsf3_pse>:
    3de4:	95 9f       	mul	r25, r21
    3de6:	c1 f3       	breq	.-16     	; 0x3dd8 <__mulsf3+0x20>
    3de8:	95 0f       	add	r25, r21
    3dea:	50 e0       	ldi	r21, 0x00	; 0
    3dec:	55 1f       	adc	r21, r21
    3dee:	62 9f       	mul	r22, r18
    3df0:	f0 01       	movw	r30, r0
    3df2:	72 9f       	mul	r23, r18
    3df4:	bb 27       	eor	r27, r27
    3df6:	f0 0d       	add	r31, r0
    3df8:	b1 1d       	adc	r27, r1
    3dfa:	63 9f       	mul	r22, r19
    3dfc:	aa 27       	eor	r26, r26
    3dfe:	f0 0d       	add	r31, r0
    3e00:	b1 1d       	adc	r27, r1
    3e02:	aa 1f       	adc	r26, r26
    3e04:	64 9f       	mul	r22, r20
    3e06:	66 27       	eor	r22, r22
    3e08:	b0 0d       	add	r27, r0
    3e0a:	a1 1d       	adc	r26, r1
    3e0c:	66 1f       	adc	r22, r22
    3e0e:	82 9f       	mul	r24, r18
    3e10:	22 27       	eor	r18, r18
    3e12:	b0 0d       	add	r27, r0
    3e14:	a1 1d       	adc	r26, r1
    3e16:	62 1f       	adc	r22, r18
    3e18:	73 9f       	mul	r23, r19
    3e1a:	b0 0d       	add	r27, r0
    3e1c:	a1 1d       	adc	r26, r1
    3e1e:	62 1f       	adc	r22, r18
    3e20:	83 9f       	mul	r24, r19
    3e22:	a0 0d       	add	r26, r0
    3e24:	61 1d       	adc	r22, r1
    3e26:	22 1f       	adc	r18, r18
    3e28:	74 9f       	mul	r23, r20
    3e2a:	33 27       	eor	r19, r19
    3e2c:	a0 0d       	add	r26, r0
    3e2e:	61 1d       	adc	r22, r1
    3e30:	23 1f       	adc	r18, r19
    3e32:	84 9f       	mul	r24, r20
    3e34:	60 0d       	add	r22, r0
    3e36:	21 1d       	adc	r18, r1
    3e38:	82 2f       	mov	r24, r18
    3e3a:	76 2f       	mov	r23, r22
    3e3c:	6a 2f       	mov	r22, r26
    3e3e:	11 24       	eor	r1, r1
    3e40:	9f 57       	subi	r25, 0x7F	; 127
    3e42:	50 40       	sbci	r21, 0x00	; 0
    3e44:	9a f0       	brmi	.+38     	; 0x3e6c <__mulsf3_pse+0x88>
    3e46:	f1 f0       	breq	.+60     	; 0x3e84 <__mulsf3_pse+0xa0>
    3e48:	88 23       	and	r24, r24
    3e4a:	4a f0       	brmi	.+18     	; 0x3e5e <__mulsf3_pse+0x7a>
    3e4c:	ee 0f       	add	r30, r30
    3e4e:	ff 1f       	adc	r31, r31
    3e50:	bb 1f       	adc	r27, r27
    3e52:	66 1f       	adc	r22, r22
    3e54:	77 1f       	adc	r23, r23
    3e56:	88 1f       	adc	r24, r24
    3e58:	91 50       	subi	r25, 0x01	; 1
    3e5a:	50 40       	sbci	r21, 0x00	; 0
    3e5c:	a9 f7       	brne	.-22     	; 0x3e48 <__mulsf3_pse+0x64>
    3e5e:	9e 3f       	cpi	r25, 0xFE	; 254
    3e60:	51 05       	cpc	r21, r1
    3e62:	80 f0       	brcs	.+32     	; 0x3e84 <__mulsf3_pse+0xa0>
    3e64:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__fp_inf>
    3e68:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <__fp_szero>
    3e6c:	5f 3f       	cpi	r21, 0xFF	; 255
    3e6e:	e4 f3       	brlt	.-8      	; 0x3e68 <__mulsf3_pse+0x84>
    3e70:	98 3e       	cpi	r25, 0xE8	; 232
    3e72:	d4 f3       	brlt	.-12     	; 0x3e68 <__mulsf3_pse+0x84>
    3e74:	86 95       	lsr	r24
    3e76:	77 95       	ror	r23
    3e78:	67 95       	ror	r22
    3e7a:	b7 95       	ror	r27
    3e7c:	f7 95       	ror	r31
    3e7e:	e7 95       	ror	r30
    3e80:	9f 5f       	subi	r25, 0xFF	; 255
    3e82:	c1 f7       	brne	.-16     	; 0x3e74 <__mulsf3_pse+0x90>
    3e84:	fe 2b       	or	r31, r30
    3e86:	88 0f       	add	r24, r24
    3e88:	91 1d       	adc	r25, r1
    3e8a:	96 95       	lsr	r25
    3e8c:	87 95       	ror	r24
    3e8e:	97 f9       	bld	r25, 7
    3e90:	08 95       	ret

00003e92 <vfprintf>:
    3e92:	a0 e1       	ldi	r26, 0x10	; 16
    3e94:	b0 e0       	ldi	r27, 0x00	; 0
    3e96:	ef e4       	ldi	r30, 0x4F	; 79
    3e98:	ff e1       	ldi	r31, 0x1F	; 31
    3e9a:	0c 94 0a 23 	jmp	0x4614	; 0x4614 <__prologue_saves__>
    3e9e:	7c 01       	movw	r14, r24
    3ea0:	1b 01       	movw	r2, r22
    3ea2:	6a 01       	movw	r12, r20
    3ea4:	fc 01       	movw	r30, r24
    3ea6:	16 82       	std	Z+6, r1	; 0x06
    3ea8:	17 82       	std	Z+7, r1	; 0x07
    3eaa:	83 81       	ldd	r24, Z+3	; 0x03
    3eac:	81 ff       	sbrs	r24, 1
    3eae:	44 c3       	rjmp	.+1672   	; 0x4538 <__RODATA_PM_OFFSET__+0x538>
    3eb0:	9e 01       	movw	r18, r28
    3eb2:	2f 5f       	subi	r18, 0xFF	; 255
    3eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    3eb6:	39 01       	movw	r6, r18
    3eb8:	f7 01       	movw	r30, r14
    3eba:	93 81       	ldd	r25, Z+3	; 0x03
    3ebc:	f1 01       	movw	r30, r2
    3ebe:	93 fd       	sbrc	r25, 3
    3ec0:	85 91       	lpm	r24, Z+
    3ec2:	93 ff       	sbrs	r25, 3
    3ec4:	81 91       	ld	r24, Z+
    3ec6:	1f 01       	movw	r2, r30
    3ec8:	88 23       	and	r24, r24
    3eca:	09 f4       	brne	.+2      	; 0x3ece <vfprintf+0x3c>
    3ecc:	31 c3       	rjmp	.+1634   	; 0x4530 <__RODATA_PM_OFFSET__+0x530>
    3ece:	85 32       	cpi	r24, 0x25	; 37
    3ed0:	39 f4       	brne	.+14     	; 0x3ee0 <vfprintf+0x4e>
    3ed2:	93 fd       	sbrc	r25, 3
    3ed4:	85 91       	lpm	r24, Z+
    3ed6:	93 ff       	sbrs	r25, 3
    3ed8:	81 91       	ld	r24, Z+
    3eda:	1f 01       	movw	r2, r30
    3edc:	85 32       	cpi	r24, 0x25	; 37
    3ede:	39 f4       	brne	.+14     	; 0x3eee <vfprintf+0x5c>
    3ee0:	b7 01       	movw	r22, r14
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    3ee8:	56 01       	movw	r10, r12
    3eea:	65 01       	movw	r12, r10
    3eec:	e5 cf       	rjmp	.-54     	; 0x3eb8 <vfprintf+0x26>
    3eee:	10 e0       	ldi	r17, 0x00	; 0
    3ef0:	51 2c       	mov	r5, r1
    3ef2:	91 2c       	mov	r9, r1
    3ef4:	ff e1       	ldi	r31, 0x1F	; 31
    3ef6:	f9 15       	cp	r31, r9
    3ef8:	d8 f0       	brcs	.+54     	; 0x3f30 <vfprintf+0x9e>
    3efa:	8b 32       	cpi	r24, 0x2B	; 43
    3efc:	79 f0       	breq	.+30     	; 0x3f1c <vfprintf+0x8a>
    3efe:	38 f4       	brcc	.+14     	; 0x3f0e <vfprintf+0x7c>
    3f00:	80 32       	cpi	r24, 0x20	; 32
    3f02:	79 f0       	breq	.+30     	; 0x3f22 <vfprintf+0x90>
    3f04:	83 32       	cpi	r24, 0x23	; 35
    3f06:	a1 f4       	brne	.+40     	; 0x3f30 <vfprintf+0x9e>
    3f08:	f9 2d       	mov	r31, r9
    3f0a:	f0 61       	ori	r31, 0x10	; 16
    3f0c:	2e c0       	rjmp	.+92     	; 0x3f6a <vfprintf+0xd8>
    3f0e:	8d 32       	cpi	r24, 0x2D	; 45
    3f10:	61 f0       	breq	.+24     	; 0x3f2a <vfprintf+0x98>
    3f12:	80 33       	cpi	r24, 0x30	; 48
    3f14:	69 f4       	brne	.+26     	; 0x3f30 <vfprintf+0x9e>
    3f16:	29 2d       	mov	r18, r9
    3f18:	21 60       	ori	r18, 0x01	; 1
    3f1a:	2d c0       	rjmp	.+90     	; 0x3f76 <vfprintf+0xe4>
    3f1c:	39 2d       	mov	r19, r9
    3f1e:	32 60       	ori	r19, 0x02	; 2
    3f20:	93 2e       	mov	r9, r19
    3f22:	89 2d       	mov	r24, r9
    3f24:	84 60       	ori	r24, 0x04	; 4
    3f26:	98 2e       	mov	r9, r24
    3f28:	2a c0       	rjmp	.+84     	; 0x3f7e <vfprintf+0xec>
    3f2a:	e9 2d       	mov	r30, r9
    3f2c:	e8 60       	ori	r30, 0x08	; 8
    3f2e:	15 c0       	rjmp	.+42     	; 0x3f5a <vfprintf+0xc8>
    3f30:	97 fc       	sbrc	r9, 7
    3f32:	2d c0       	rjmp	.+90     	; 0x3f8e <vfprintf+0xfc>
    3f34:	20 ed       	ldi	r18, 0xD0	; 208
    3f36:	28 0f       	add	r18, r24
    3f38:	2a 30       	cpi	r18, 0x0A	; 10
    3f3a:	88 f4       	brcc	.+34     	; 0x3f5e <vfprintf+0xcc>
    3f3c:	96 fe       	sbrs	r9, 6
    3f3e:	06 c0       	rjmp	.+12     	; 0x3f4c <vfprintf+0xba>
    3f40:	3a e0       	ldi	r19, 0x0A	; 10
    3f42:	13 9f       	mul	r17, r19
    3f44:	20 0d       	add	r18, r0
    3f46:	11 24       	eor	r1, r1
    3f48:	12 2f       	mov	r17, r18
    3f4a:	19 c0       	rjmp	.+50     	; 0x3f7e <vfprintf+0xec>
    3f4c:	8a e0       	ldi	r24, 0x0A	; 10
    3f4e:	58 9e       	mul	r5, r24
    3f50:	20 0d       	add	r18, r0
    3f52:	11 24       	eor	r1, r1
    3f54:	52 2e       	mov	r5, r18
    3f56:	e9 2d       	mov	r30, r9
    3f58:	e0 62       	ori	r30, 0x20	; 32
    3f5a:	9e 2e       	mov	r9, r30
    3f5c:	10 c0       	rjmp	.+32     	; 0x3f7e <vfprintf+0xec>
    3f5e:	8e 32       	cpi	r24, 0x2E	; 46
    3f60:	31 f4       	brne	.+12     	; 0x3f6e <vfprintf+0xdc>
    3f62:	96 fc       	sbrc	r9, 6
    3f64:	e5 c2       	rjmp	.+1482   	; 0x4530 <__RODATA_PM_OFFSET__+0x530>
    3f66:	f9 2d       	mov	r31, r9
    3f68:	f0 64       	ori	r31, 0x40	; 64
    3f6a:	9f 2e       	mov	r9, r31
    3f6c:	08 c0       	rjmp	.+16     	; 0x3f7e <vfprintf+0xec>
    3f6e:	8c 36       	cpi	r24, 0x6C	; 108
    3f70:	21 f4       	brne	.+8      	; 0x3f7a <vfprintf+0xe8>
    3f72:	29 2d       	mov	r18, r9
    3f74:	20 68       	ori	r18, 0x80	; 128
    3f76:	92 2e       	mov	r9, r18
    3f78:	02 c0       	rjmp	.+4      	; 0x3f7e <vfprintf+0xec>
    3f7a:	88 36       	cpi	r24, 0x68	; 104
    3f7c:	41 f4       	brne	.+16     	; 0x3f8e <vfprintf+0xfc>
    3f7e:	f1 01       	movw	r30, r2
    3f80:	93 fd       	sbrc	r25, 3
    3f82:	85 91       	lpm	r24, Z+
    3f84:	93 ff       	sbrs	r25, 3
    3f86:	81 91       	ld	r24, Z+
    3f88:	1f 01       	movw	r2, r30
    3f8a:	81 11       	cpse	r24, r1
    3f8c:	b3 cf       	rjmp	.-154    	; 0x3ef4 <vfprintf+0x62>
    3f8e:	9b eb       	ldi	r25, 0xBB	; 187
    3f90:	98 0f       	add	r25, r24
    3f92:	93 30       	cpi	r25, 0x03	; 3
    3f94:	20 f4       	brcc	.+8      	; 0x3f9e <vfprintf+0x10c>
    3f96:	99 2d       	mov	r25, r9
    3f98:	90 61       	ori	r25, 0x10	; 16
    3f9a:	80 5e       	subi	r24, 0xE0	; 224
    3f9c:	07 c0       	rjmp	.+14     	; 0x3fac <vfprintf+0x11a>
    3f9e:	9b e9       	ldi	r25, 0x9B	; 155
    3fa0:	98 0f       	add	r25, r24
    3fa2:	93 30       	cpi	r25, 0x03	; 3
    3fa4:	08 f0       	brcs	.+2      	; 0x3fa8 <vfprintf+0x116>
    3fa6:	66 c1       	rjmp	.+716    	; 0x4274 <__RODATA_PM_OFFSET__+0x274>
    3fa8:	99 2d       	mov	r25, r9
    3faa:	9f 7e       	andi	r25, 0xEF	; 239
    3fac:	96 ff       	sbrs	r25, 6
    3fae:	16 e0       	ldi	r17, 0x06	; 6
    3fb0:	9f 73       	andi	r25, 0x3F	; 63
    3fb2:	99 2e       	mov	r9, r25
    3fb4:	85 36       	cpi	r24, 0x65	; 101
    3fb6:	19 f4       	brne	.+6      	; 0x3fbe <vfprintf+0x12c>
    3fb8:	90 64       	ori	r25, 0x40	; 64
    3fba:	99 2e       	mov	r9, r25
    3fbc:	08 c0       	rjmp	.+16     	; 0x3fce <vfprintf+0x13c>
    3fbe:	86 36       	cpi	r24, 0x66	; 102
    3fc0:	21 f4       	brne	.+8      	; 0x3fca <vfprintf+0x138>
    3fc2:	39 2f       	mov	r19, r25
    3fc4:	30 68       	ori	r19, 0x80	; 128
    3fc6:	93 2e       	mov	r9, r19
    3fc8:	02 c0       	rjmp	.+4      	; 0x3fce <vfprintf+0x13c>
    3fca:	11 11       	cpse	r17, r1
    3fcc:	11 50       	subi	r17, 0x01	; 1
    3fce:	97 fe       	sbrs	r9, 7
    3fd0:	07 c0       	rjmp	.+14     	; 0x3fe0 <vfprintf+0x14e>
    3fd2:	1c 33       	cpi	r17, 0x3C	; 60
    3fd4:	50 f4       	brcc	.+20     	; 0x3fea <vfprintf+0x158>
    3fd6:	44 24       	eor	r4, r4
    3fd8:	43 94       	inc	r4
    3fda:	41 0e       	add	r4, r17
    3fdc:	27 e0       	ldi	r18, 0x07	; 7
    3fde:	0b c0       	rjmp	.+22     	; 0x3ff6 <vfprintf+0x164>
    3fe0:	18 30       	cpi	r17, 0x08	; 8
    3fe2:	38 f0       	brcs	.+14     	; 0x3ff2 <vfprintf+0x160>
    3fe4:	27 e0       	ldi	r18, 0x07	; 7
    3fe6:	17 e0       	ldi	r17, 0x07	; 7
    3fe8:	05 c0       	rjmp	.+10     	; 0x3ff4 <vfprintf+0x162>
    3fea:	27 e0       	ldi	r18, 0x07	; 7
    3fec:	9c e3       	ldi	r25, 0x3C	; 60
    3fee:	49 2e       	mov	r4, r25
    3ff0:	02 c0       	rjmp	.+4      	; 0x3ff6 <vfprintf+0x164>
    3ff2:	21 2f       	mov	r18, r17
    3ff4:	41 2c       	mov	r4, r1
    3ff6:	56 01       	movw	r10, r12
    3ff8:	84 e0       	ldi	r24, 0x04	; 4
    3ffa:	a8 0e       	add	r10, r24
    3ffc:	b1 1c       	adc	r11, r1
    3ffe:	f6 01       	movw	r30, r12
    4000:	60 81       	ld	r22, Z
    4002:	71 81       	ldd	r23, Z+1	; 0x01
    4004:	82 81       	ldd	r24, Z+2	; 0x02
    4006:	93 81       	ldd	r25, Z+3	; 0x03
    4008:	04 2d       	mov	r16, r4
    400a:	a3 01       	movw	r20, r6
    400c:	0e 94 a7 23 	call	0x474e	; 0x474e <__ftoa_engine>
    4010:	6c 01       	movw	r12, r24
    4012:	f9 81       	ldd	r31, Y+1	; 0x01
    4014:	fc 87       	std	Y+12, r31	; 0x0c
    4016:	f0 ff       	sbrs	r31, 0
    4018:	02 c0       	rjmp	.+4      	; 0x401e <__RODATA_PM_OFFSET__+0x1e>
    401a:	f3 ff       	sbrs	r31, 3
    401c:	06 c0       	rjmp	.+12     	; 0x402a <__RODATA_PM_OFFSET__+0x2a>
    401e:	91 fc       	sbrc	r9, 1
    4020:	06 c0       	rjmp	.+12     	; 0x402e <__RODATA_PM_OFFSET__+0x2e>
    4022:	92 fe       	sbrs	r9, 2
    4024:	06 c0       	rjmp	.+12     	; 0x4032 <__RODATA_PM_OFFSET__+0x32>
    4026:	00 e2       	ldi	r16, 0x20	; 32
    4028:	05 c0       	rjmp	.+10     	; 0x4034 <__RODATA_PM_OFFSET__+0x34>
    402a:	0d e2       	ldi	r16, 0x2D	; 45
    402c:	03 c0       	rjmp	.+6      	; 0x4034 <__RODATA_PM_OFFSET__+0x34>
    402e:	0b e2       	ldi	r16, 0x2B	; 43
    4030:	01 c0       	rjmp	.+2      	; 0x4034 <__RODATA_PM_OFFSET__+0x34>
    4032:	00 e0       	ldi	r16, 0x00	; 0
    4034:	8c 85       	ldd	r24, Y+12	; 0x0c
    4036:	8c 70       	andi	r24, 0x0C	; 12
    4038:	19 f0       	breq	.+6      	; 0x4040 <__RODATA_PM_OFFSET__+0x40>
    403a:	01 11       	cpse	r16, r1
    403c:	5a c2       	rjmp	.+1204   	; 0x44f2 <__RODATA_PM_OFFSET__+0x4f2>
    403e:	9b c2       	rjmp	.+1334   	; 0x4576 <__RODATA_PM_OFFSET__+0x576>
    4040:	97 fe       	sbrs	r9, 7
    4042:	10 c0       	rjmp	.+32     	; 0x4064 <__RODATA_PM_OFFSET__+0x64>
    4044:	4c 0c       	add	r4, r12
    4046:	fc 85       	ldd	r31, Y+12	; 0x0c
    4048:	f4 ff       	sbrs	r31, 4
    404a:	04 c0       	rjmp	.+8      	; 0x4054 <__RODATA_PM_OFFSET__+0x54>
    404c:	8a 81       	ldd	r24, Y+2	; 0x02
    404e:	81 33       	cpi	r24, 0x31	; 49
    4050:	09 f4       	brne	.+2      	; 0x4054 <__RODATA_PM_OFFSET__+0x54>
    4052:	4a 94       	dec	r4
    4054:	14 14       	cp	r1, r4
    4056:	74 f5       	brge	.+92     	; 0x40b4 <__RODATA_PM_OFFSET__+0xb4>
    4058:	28 e0       	ldi	r18, 0x08	; 8
    405a:	24 15       	cp	r18, r4
    405c:	78 f5       	brcc	.+94     	; 0x40bc <__RODATA_PM_OFFSET__+0xbc>
    405e:	88 e0       	ldi	r24, 0x08	; 8
    4060:	48 2e       	mov	r4, r24
    4062:	2c c0       	rjmp	.+88     	; 0x40bc <__RODATA_PM_OFFSET__+0xbc>
    4064:	96 fc       	sbrc	r9, 6
    4066:	2a c0       	rjmp	.+84     	; 0x40bc <__RODATA_PM_OFFSET__+0xbc>
    4068:	81 2f       	mov	r24, r17
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	8c 15       	cp	r24, r12
    406e:	9d 05       	cpc	r25, r13
    4070:	9c f0       	brlt	.+38     	; 0x4098 <__RODATA_PM_OFFSET__+0x98>
    4072:	3c ef       	ldi	r19, 0xFC	; 252
    4074:	c3 16       	cp	r12, r19
    4076:	3f ef       	ldi	r19, 0xFF	; 255
    4078:	d3 06       	cpc	r13, r19
    407a:	74 f0       	brlt	.+28     	; 0x4098 <__RODATA_PM_OFFSET__+0x98>
    407c:	89 2d       	mov	r24, r9
    407e:	80 68       	ori	r24, 0x80	; 128
    4080:	98 2e       	mov	r9, r24
    4082:	0a c0       	rjmp	.+20     	; 0x4098 <__RODATA_PM_OFFSET__+0x98>
    4084:	e2 e0       	ldi	r30, 0x02	; 2
    4086:	f0 e0       	ldi	r31, 0x00	; 0
    4088:	ec 0f       	add	r30, r28
    408a:	fd 1f       	adc	r31, r29
    408c:	e1 0f       	add	r30, r17
    408e:	f1 1d       	adc	r31, r1
    4090:	80 81       	ld	r24, Z
    4092:	80 33       	cpi	r24, 0x30	; 48
    4094:	19 f4       	brne	.+6      	; 0x409c <__RODATA_PM_OFFSET__+0x9c>
    4096:	11 50       	subi	r17, 0x01	; 1
    4098:	11 11       	cpse	r17, r1
    409a:	f4 cf       	rjmp	.-24     	; 0x4084 <__RODATA_PM_OFFSET__+0x84>
    409c:	97 fe       	sbrs	r9, 7
    409e:	0e c0       	rjmp	.+28     	; 0x40bc <__RODATA_PM_OFFSET__+0xbc>
    40a0:	44 24       	eor	r4, r4
    40a2:	43 94       	inc	r4
    40a4:	41 0e       	add	r4, r17
    40a6:	81 2f       	mov	r24, r17
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	c8 16       	cp	r12, r24
    40ac:	d9 06       	cpc	r13, r25
    40ae:	2c f4       	brge	.+10     	; 0x40ba <__RODATA_PM_OFFSET__+0xba>
    40b0:	1c 19       	sub	r17, r12
    40b2:	04 c0       	rjmp	.+8      	; 0x40bc <__RODATA_PM_OFFSET__+0xbc>
    40b4:	44 24       	eor	r4, r4
    40b6:	43 94       	inc	r4
    40b8:	01 c0       	rjmp	.+2      	; 0x40bc <__RODATA_PM_OFFSET__+0xbc>
    40ba:	10 e0       	ldi	r17, 0x00	; 0
    40bc:	97 fe       	sbrs	r9, 7
    40be:	06 c0       	rjmp	.+12     	; 0x40cc <__RODATA_PM_OFFSET__+0xcc>
    40c0:	1c 14       	cp	r1, r12
    40c2:	1d 04       	cpc	r1, r13
    40c4:	34 f4       	brge	.+12     	; 0x40d2 <__RODATA_PM_OFFSET__+0xd2>
    40c6:	c6 01       	movw	r24, r12
    40c8:	01 96       	adiw	r24, 0x01	; 1
    40ca:	05 c0       	rjmp	.+10     	; 0x40d6 <__RODATA_PM_OFFSET__+0xd6>
    40cc:	85 e0       	ldi	r24, 0x05	; 5
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	02 c0       	rjmp	.+4      	; 0x40d6 <__RODATA_PM_OFFSET__+0xd6>
    40d2:	81 e0       	ldi	r24, 0x01	; 1
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	01 11       	cpse	r16, r1
    40d8:	01 96       	adiw	r24, 0x01	; 1
    40da:	11 23       	and	r17, r17
    40dc:	31 f0       	breq	.+12     	; 0x40ea <__RODATA_PM_OFFSET__+0xea>
    40de:	21 2f       	mov	r18, r17
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	2f 5f       	subi	r18, 0xFF	; 255
    40e4:	3f 4f       	sbci	r19, 0xFF	; 255
    40e6:	82 0f       	add	r24, r18
    40e8:	93 1f       	adc	r25, r19
    40ea:	25 2d       	mov	r18, r5
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	82 17       	cp	r24, r18
    40f0:	93 07       	cpc	r25, r19
    40f2:	14 f4       	brge	.+4      	; 0x40f8 <__RODATA_PM_OFFSET__+0xf8>
    40f4:	58 1a       	sub	r5, r24
    40f6:	01 c0       	rjmp	.+2      	; 0x40fa <__RODATA_PM_OFFSET__+0xfa>
    40f8:	51 2c       	mov	r5, r1
    40fa:	89 2d       	mov	r24, r9
    40fc:	89 70       	andi	r24, 0x09	; 9
    40fe:	49 f4       	brne	.+18     	; 0x4112 <__RODATA_PM_OFFSET__+0x112>
    4100:	55 20       	and	r5, r5
    4102:	39 f0       	breq	.+14     	; 0x4112 <__RODATA_PM_OFFSET__+0x112>
    4104:	b7 01       	movw	r22, r14
    4106:	80 e2       	ldi	r24, 0x20	; 32
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    410e:	5a 94       	dec	r5
    4110:	f7 cf       	rjmp	.-18     	; 0x4100 <__RODATA_PM_OFFSET__+0x100>
    4112:	00 23       	and	r16, r16
    4114:	29 f0       	breq	.+10     	; 0x4120 <__RODATA_PM_OFFSET__+0x120>
    4116:	b7 01       	movw	r22, r14
    4118:	80 2f       	mov	r24, r16
    411a:	90 e0       	ldi	r25, 0x00	; 0
    411c:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    4120:	93 fc       	sbrc	r9, 3
    4122:	09 c0       	rjmp	.+18     	; 0x4136 <__RODATA_PM_OFFSET__+0x136>
    4124:	55 20       	and	r5, r5
    4126:	39 f0       	breq	.+14     	; 0x4136 <__RODATA_PM_OFFSET__+0x136>
    4128:	b7 01       	movw	r22, r14
    412a:	80 e3       	ldi	r24, 0x30	; 48
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    4132:	5a 94       	dec	r5
    4134:	f7 cf       	rjmp	.-18     	; 0x4124 <__RODATA_PM_OFFSET__+0x124>
    4136:	97 fe       	sbrs	r9, 7
    4138:	4c c0       	rjmp	.+152    	; 0x41d2 <__RODATA_PM_OFFSET__+0x1d2>
    413a:	46 01       	movw	r8, r12
    413c:	d7 fe       	sbrs	r13, 7
    413e:	02 c0       	rjmp	.+4      	; 0x4144 <__RODATA_PM_OFFSET__+0x144>
    4140:	81 2c       	mov	r8, r1
    4142:	91 2c       	mov	r9, r1
    4144:	c6 01       	movw	r24, r12
    4146:	88 19       	sub	r24, r8
    4148:	99 09       	sbc	r25, r9
    414a:	f3 01       	movw	r30, r6
    414c:	e8 0f       	add	r30, r24
    414e:	f9 1f       	adc	r31, r25
    4150:	ed 87       	std	Y+13, r30	; 0x0d
    4152:	fe 87       	std	Y+14, r31	; 0x0e
    4154:	96 01       	movw	r18, r12
    4156:	24 19       	sub	r18, r4
    4158:	31 09       	sbc	r19, r1
    415a:	2f 87       	std	Y+15, r18	; 0x0f
    415c:	38 8b       	std	Y+16, r19	; 0x10
    415e:	01 2f       	mov	r16, r17
    4160:	10 e0       	ldi	r17, 0x00	; 0
    4162:	11 95       	neg	r17
    4164:	01 95       	neg	r16
    4166:	11 09       	sbc	r17, r1
    4168:	3f ef       	ldi	r19, 0xFF	; 255
    416a:	83 16       	cp	r8, r19
    416c:	93 06       	cpc	r9, r19
    416e:	29 f4       	brne	.+10     	; 0x417a <__RODATA_PM_OFFSET__+0x17a>
    4170:	b7 01       	movw	r22, r14
    4172:	8e e2       	ldi	r24, 0x2E	; 46
    4174:	90 e0       	ldi	r25, 0x00	; 0
    4176:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    417a:	c8 14       	cp	r12, r8
    417c:	d9 04       	cpc	r13, r9
    417e:	4c f0       	brlt	.+18     	; 0x4192 <__RODATA_PM_OFFSET__+0x192>
    4180:	8f 85       	ldd	r24, Y+15	; 0x0f
    4182:	98 89       	ldd	r25, Y+16	; 0x10
    4184:	88 15       	cp	r24, r8
    4186:	99 05       	cpc	r25, r9
    4188:	24 f4       	brge	.+8      	; 0x4192 <__RODATA_PM_OFFSET__+0x192>
    418a:	ed 85       	ldd	r30, Y+13	; 0x0d
    418c:	fe 85       	ldd	r31, Y+14	; 0x0e
    418e:	81 81       	ldd	r24, Z+1	; 0x01
    4190:	01 c0       	rjmp	.+2      	; 0x4194 <__RODATA_PM_OFFSET__+0x194>
    4192:	80 e3       	ldi	r24, 0x30	; 48
    4194:	f1 e0       	ldi	r31, 0x01	; 1
    4196:	8f 1a       	sub	r8, r31
    4198:	91 08       	sbc	r9, r1
    419a:	2d 85       	ldd	r18, Y+13	; 0x0d
    419c:	3e 85       	ldd	r19, Y+14	; 0x0e
    419e:	2f 5f       	subi	r18, 0xFF	; 255
    41a0:	3f 4f       	sbci	r19, 0xFF	; 255
    41a2:	2d 87       	std	Y+13, r18	; 0x0d
    41a4:	3e 87       	std	Y+14, r19	; 0x0e
    41a6:	80 16       	cp	r8, r16
    41a8:	91 06       	cpc	r9, r17
    41aa:	2c f0       	brlt	.+10     	; 0x41b6 <__RODATA_PM_OFFSET__+0x1b6>
    41ac:	b7 01       	movw	r22, r14
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    41b4:	d9 cf       	rjmp	.-78     	; 0x4168 <__RODATA_PM_OFFSET__+0x168>
    41b6:	c8 14       	cp	r12, r8
    41b8:	d9 04       	cpc	r13, r9
    41ba:	41 f4       	brne	.+16     	; 0x41cc <__RODATA_PM_OFFSET__+0x1cc>
    41bc:	9a 81       	ldd	r25, Y+2	; 0x02
    41be:	96 33       	cpi	r25, 0x36	; 54
    41c0:	20 f4       	brcc	.+8      	; 0x41ca <__RODATA_PM_OFFSET__+0x1ca>
    41c2:	95 33       	cpi	r25, 0x35	; 53
    41c4:	19 f4       	brne	.+6      	; 0x41cc <__RODATA_PM_OFFSET__+0x1cc>
    41c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    41c8:	34 ff       	sbrs	r19, 4
    41ca:	81 e3       	ldi	r24, 0x31	; 49
    41cc:	b7 01       	movw	r22, r14
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	4e c0       	rjmp	.+156    	; 0x426e <__RODATA_PM_OFFSET__+0x26e>
    41d2:	8a 81       	ldd	r24, Y+2	; 0x02
    41d4:	81 33       	cpi	r24, 0x31	; 49
    41d6:	19 f0       	breq	.+6      	; 0x41de <__RODATA_PM_OFFSET__+0x1de>
    41d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    41da:	9f 7e       	andi	r25, 0xEF	; 239
    41dc:	9c 87       	std	Y+12, r25	; 0x0c
    41de:	b7 01       	movw	r22, r14
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    41e6:	11 11       	cpse	r17, r1
    41e8:	05 c0       	rjmp	.+10     	; 0x41f4 <__RODATA_PM_OFFSET__+0x1f4>
    41ea:	94 fc       	sbrc	r9, 4
    41ec:	18 c0       	rjmp	.+48     	; 0x421e <__RODATA_PM_OFFSET__+0x21e>
    41ee:	85 e6       	ldi	r24, 0x65	; 101
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	17 c0       	rjmp	.+46     	; 0x4222 <__RODATA_PM_OFFSET__+0x222>
    41f4:	b7 01       	movw	r22, r14
    41f6:	8e e2       	ldi	r24, 0x2E	; 46
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    41fe:	1e 5f       	subi	r17, 0xFE	; 254
    4200:	82 e0       	ldi	r24, 0x02	; 2
    4202:	01 e0       	ldi	r16, 0x01	; 1
    4204:	08 0f       	add	r16, r24
    4206:	f3 01       	movw	r30, r6
    4208:	e8 0f       	add	r30, r24
    420a:	f1 1d       	adc	r31, r1
    420c:	80 81       	ld	r24, Z
    420e:	b7 01       	movw	r22, r14
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    4216:	80 2f       	mov	r24, r16
    4218:	01 13       	cpse	r16, r17
    421a:	f3 cf       	rjmp	.-26     	; 0x4202 <__RODATA_PM_OFFSET__+0x202>
    421c:	e6 cf       	rjmp	.-52     	; 0x41ea <__RODATA_PM_OFFSET__+0x1ea>
    421e:	85 e4       	ldi	r24, 0x45	; 69
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	b7 01       	movw	r22, r14
    4224:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    4228:	d7 fc       	sbrc	r13, 7
    422a:	06 c0       	rjmp	.+12     	; 0x4238 <__RODATA_PM_OFFSET__+0x238>
    422c:	c1 14       	cp	r12, r1
    422e:	d1 04       	cpc	r13, r1
    4230:	41 f4       	brne	.+16     	; 0x4242 <__RODATA_PM_OFFSET__+0x242>
    4232:	ec 85       	ldd	r30, Y+12	; 0x0c
    4234:	e4 ff       	sbrs	r30, 4
    4236:	05 c0       	rjmp	.+10     	; 0x4242 <__RODATA_PM_OFFSET__+0x242>
    4238:	d1 94       	neg	r13
    423a:	c1 94       	neg	r12
    423c:	d1 08       	sbc	r13, r1
    423e:	8d e2       	ldi	r24, 0x2D	; 45
    4240:	01 c0       	rjmp	.+2      	; 0x4244 <__RODATA_PM_OFFSET__+0x244>
    4242:	8b e2       	ldi	r24, 0x2B	; 43
    4244:	b7 01       	movw	r22, r14
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    424c:	80 e3       	ldi	r24, 0x30	; 48
    424e:	2a e0       	ldi	r18, 0x0A	; 10
    4250:	c2 16       	cp	r12, r18
    4252:	d1 04       	cpc	r13, r1
    4254:	2c f0       	brlt	.+10     	; 0x4260 <__RODATA_PM_OFFSET__+0x260>
    4256:	8f 5f       	subi	r24, 0xFF	; 255
    4258:	fa e0       	ldi	r31, 0x0A	; 10
    425a:	cf 1a       	sub	r12, r31
    425c:	d1 08       	sbc	r13, r1
    425e:	f7 cf       	rjmp	.-18     	; 0x424e <__RODATA_PM_OFFSET__+0x24e>
    4260:	b7 01       	movw	r22, r14
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    4268:	b7 01       	movw	r22, r14
    426a:	c6 01       	movw	r24, r12
    426c:	c0 96       	adiw	r24, 0x30	; 48
    426e:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    4272:	54 c1       	rjmp	.+680    	; 0x451c <__RODATA_PM_OFFSET__+0x51c>
    4274:	83 36       	cpi	r24, 0x63	; 99
    4276:	31 f0       	breq	.+12     	; 0x4284 <__RODATA_PM_OFFSET__+0x284>
    4278:	83 37       	cpi	r24, 0x73	; 115
    427a:	79 f0       	breq	.+30     	; 0x429a <__RODATA_PM_OFFSET__+0x29a>
    427c:	83 35       	cpi	r24, 0x53	; 83
    427e:	09 f0       	breq	.+2      	; 0x4282 <__RODATA_PM_OFFSET__+0x282>
    4280:	56 c0       	rjmp	.+172    	; 0x432e <__RODATA_PM_OFFSET__+0x32e>
    4282:	20 c0       	rjmp	.+64     	; 0x42c4 <__RODATA_PM_OFFSET__+0x2c4>
    4284:	56 01       	movw	r10, r12
    4286:	32 e0       	ldi	r19, 0x02	; 2
    4288:	a3 0e       	add	r10, r19
    428a:	b1 1c       	adc	r11, r1
    428c:	f6 01       	movw	r30, r12
    428e:	80 81       	ld	r24, Z
    4290:	89 83       	std	Y+1, r24	; 0x01
    4292:	01 e0       	ldi	r16, 0x01	; 1
    4294:	10 e0       	ldi	r17, 0x00	; 0
    4296:	63 01       	movw	r12, r6
    4298:	12 c0       	rjmp	.+36     	; 0x42be <__RODATA_PM_OFFSET__+0x2be>
    429a:	56 01       	movw	r10, r12
    429c:	f2 e0       	ldi	r31, 0x02	; 2
    429e:	af 0e       	add	r10, r31
    42a0:	b1 1c       	adc	r11, r1
    42a2:	f6 01       	movw	r30, r12
    42a4:	c0 80       	ld	r12, Z
    42a6:	d1 80       	ldd	r13, Z+1	; 0x01
    42a8:	96 fe       	sbrs	r9, 6
    42aa:	03 c0       	rjmp	.+6      	; 0x42b2 <__RODATA_PM_OFFSET__+0x2b2>
    42ac:	61 2f       	mov	r22, r17
    42ae:	70 e0       	ldi	r23, 0x00	; 0
    42b0:	02 c0       	rjmp	.+4      	; 0x42b6 <__RODATA_PM_OFFSET__+0x2b6>
    42b2:	6f ef       	ldi	r22, 0xFF	; 255
    42b4:	7f ef       	ldi	r23, 0xFF	; 255
    42b6:	c6 01       	movw	r24, r12
    42b8:	0e 94 9c 24 	call	0x4938	; 0x4938 <strnlen>
    42bc:	8c 01       	movw	r16, r24
    42be:	f9 2d       	mov	r31, r9
    42c0:	ff 77       	andi	r31, 0x7F	; 127
    42c2:	14 c0       	rjmp	.+40     	; 0x42ec <__RODATA_PM_OFFSET__+0x2ec>
    42c4:	56 01       	movw	r10, r12
    42c6:	22 e0       	ldi	r18, 0x02	; 2
    42c8:	a2 0e       	add	r10, r18
    42ca:	b1 1c       	adc	r11, r1
    42cc:	f6 01       	movw	r30, r12
    42ce:	c0 80       	ld	r12, Z
    42d0:	d1 80       	ldd	r13, Z+1	; 0x01
    42d2:	96 fe       	sbrs	r9, 6
    42d4:	03 c0       	rjmp	.+6      	; 0x42dc <__RODATA_PM_OFFSET__+0x2dc>
    42d6:	61 2f       	mov	r22, r17
    42d8:	70 e0       	ldi	r23, 0x00	; 0
    42da:	02 c0       	rjmp	.+4      	; 0x42e0 <__RODATA_PM_OFFSET__+0x2e0>
    42dc:	6f ef       	ldi	r22, 0xFF	; 255
    42de:	7f ef       	ldi	r23, 0xFF	; 255
    42e0:	c6 01       	movw	r24, r12
    42e2:	0e 94 7f 24 	call	0x48fe	; 0x48fe <strnlen_P>
    42e6:	8c 01       	movw	r16, r24
    42e8:	f9 2d       	mov	r31, r9
    42ea:	f0 68       	ori	r31, 0x80	; 128
    42ec:	9f 2e       	mov	r9, r31
    42ee:	f3 fd       	sbrc	r31, 3
    42f0:	1a c0       	rjmp	.+52     	; 0x4326 <__RODATA_PM_OFFSET__+0x326>
    42f2:	85 2d       	mov	r24, r5
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	08 17       	cp	r16, r24
    42f8:	19 07       	cpc	r17, r25
    42fa:	a8 f4       	brcc	.+42     	; 0x4326 <__RODATA_PM_OFFSET__+0x326>
    42fc:	b7 01       	movw	r22, r14
    42fe:	80 e2       	ldi	r24, 0x20	; 32
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    4306:	5a 94       	dec	r5
    4308:	f4 cf       	rjmp	.-24     	; 0x42f2 <__RODATA_PM_OFFSET__+0x2f2>
    430a:	f6 01       	movw	r30, r12
    430c:	97 fc       	sbrc	r9, 7
    430e:	85 91       	lpm	r24, Z+
    4310:	97 fe       	sbrs	r9, 7
    4312:	81 91       	ld	r24, Z+
    4314:	6f 01       	movw	r12, r30
    4316:	b7 01       	movw	r22, r14
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    431e:	51 10       	cpse	r5, r1
    4320:	5a 94       	dec	r5
    4322:	01 50       	subi	r16, 0x01	; 1
    4324:	11 09       	sbc	r17, r1
    4326:	01 15       	cp	r16, r1
    4328:	11 05       	cpc	r17, r1
    432a:	79 f7       	brne	.-34     	; 0x430a <__RODATA_PM_OFFSET__+0x30a>
    432c:	f7 c0       	rjmp	.+494    	; 0x451c <__RODATA_PM_OFFSET__+0x51c>
    432e:	84 36       	cpi	r24, 0x64	; 100
    4330:	11 f0       	breq	.+4      	; 0x4336 <__RODATA_PM_OFFSET__+0x336>
    4332:	89 36       	cpi	r24, 0x69	; 105
    4334:	61 f5       	brne	.+88     	; 0x438e <__RODATA_PM_OFFSET__+0x38e>
    4336:	56 01       	movw	r10, r12
    4338:	97 fe       	sbrs	r9, 7
    433a:	09 c0       	rjmp	.+18     	; 0x434e <__RODATA_PM_OFFSET__+0x34e>
    433c:	24 e0       	ldi	r18, 0x04	; 4
    433e:	a2 0e       	add	r10, r18
    4340:	b1 1c       	adc	r11, r1
    4342:	f6 01       	movw	r30, r12
    4344:	60 81       	ld	r22, Z
    4346:	71 81       	ldd	r23, Z+1	; 0x01
    4348:	82 81       	ldd	r24, Z+2	; 0x02
    434a:	93 81       	ldd	r25, Z+3	; 0x03
    434c:	0a c0       	rjmp	.+20     	; 0x4362 <__RODATA_PM_OFFSET__+0x362>
    434e:	f2 e0       	ldi	r31, 0x02	; 2
    4350:	af 0e       	add	r10, r31
    4352:	b1 1c       	adc	r11, r1
    4354:	f6 01       	movw	r30, r12
    4356:	60 81       	ld	r22, Z
    4358:	71 81       	ldd	r23, Z+1	; 0x01
    435a:	07 2e       	mov	r0, r23
    435c:	00 0c       	add	r0, r0
    435e:	88 0b       	sbc	r24, r24
    4360:	99 0b       	sbc	r25, r25
    4362:	f9 2d       	mov	r31, r9
    4364:	ff 76       	andi	r31, 0x6F	; 111
    4366:	9f 2e       	mov	r9, r31
    4368:	97 ff       	sbrs	r25, 7
    436a:	09 c0       	rjmp	.+18     	; 0x437e <__RODATA_PM_OFFSET__+0x37e>
    436c:	90 95       	com	r25
    436e:	80 95       	com	r24
    4370:	70 95       	com	r23
    4372:	61 95       	neg	r22
    4374:	7f 4f       	sbci	r23, 0xFF	; 255
    4376:	8f 4f       	sbci	r24, 0xFF	; 255
    4378:	9f 4f       	sbci	r25, 0xFF	; 255
    437a:	f0 68       	ori	r31, 0x80	; 128
    437c:	9f 2e       	mov	r9, r31
    437e:	2a e0       	ldi	r18, 0x0A	; 10
    4380:	30 e0       	ldi	r19, 0x00	; 0
    4382:	a3 01       	movw	r20, r6
    4384:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <__ultoa_invert>
    4388:	c8 2e       	mov	r12, r24
    438a:	c6 18       	sub	r12, r6
    438c:	3f c0       	rjmp	.+126    	; 0x440c <__RODATA_PM_OFFSET__+0x40c>
    438e:	09 2d       	mov	r16, r9
    4390:	85 37       	cpi	r24, 0x75	; 117
    4392:	21 f4       	brne	.+8      	; 0x439c <__RODATA_PM_OFFSET__+0x39c>
    4394:	0f 7e       	andi	r16, 0xEF	; 239
    4396:	2a e0       	ldi	r18, 0x0A	; 10
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	1d c0       	rjmp	.+58     	; 0x43d6 <__RODATA_PM_OFFSET__+0x3d6>
    439c:	09 7f       	andi	r16, 0xF9	; 249
    439e:	8f 36       	cpi	r24, 0x6F	; 111
    43a0:	91 f0       	breq	.+36     	; 0x43c6 <__RODATA_PM_OFFSET__+0x3c6>
    43a2:	18 f4       	brcc	.+6      	; 0x43aa <__RODATA_PM_OFFSET__+0x3aa>
    43a4:	88 35       	cpi	r24, 0x58	; 88
    43a6:	59 f0       	breq	.+22     	; 0x43be <__RODATA_PM_OFFSET__+0x3be>
    43a8:	c3 c0       	rjmp	.+390    	; 0x4530 <__RODATA_PM_OFFSET__+0x530>
    43aa:	80 37       	cpi	r24, 0x70	; 112
    43ac:	19 f0       	breq	.+6      	; 0x43b4 <__RODATA_PM_OFFSET__+0x3b4>
    43ae:	88 37       	cpi	r24, 0x78	; 120
    43b0:	11 f0       	breq	.+4      	; 0x43b6 <__RODATA_PM_OFFSET__+0x3b6>
    43b2:	be c0       	rjmp	.+380    	; 0x4530 <__RODATA_PM_OFFSET__+0x530>
    43b4:	00 61       	ori	r16, 0x10	; 16
    43b6:	04 ff       	sbrs	r16, 4
    43b8:	09 c0       	rjmp	.+18     	; 0x43cc <__RODATA_PM_OFFSET__+0x3cc>
    43ba:	04 60       	ori	r16, 0x04	; 4
    43bc:	07 c0       	rjmp	.+14     	; 0x43cc <__RODATA_PM_OFFSET__+0x3cc>
    43be:	94 fe       	sbrs	r9, 4
    43c0:	08 c0       	rjmp	.+16     	; 0x43d2 <__RODATA_PM_OFFSET__+0x3d2>
    43c2:	06 60       	ori	r16, 0x06	; 6
    43c4:	06 c0       	rjmp	.+12     	; 0x43d2 <__RODATA_PM_OFFSET__+0x3d2>
    43c6:	28 e0       	ldi	r18, 0x08	; 8
    43c8:	30 e0       	ldi	r19, 0x00	; 0
    43ca:	05 c0       	rjmp	.+10     	; 0x43d6 <__RODATA_PM_OFFSET__+0x3d6>
    43cc:	20 e1       	ldi	r18, 0x10	; 16
    43ce:	30 e0       	ldi	r19, 0x00	; 0
    43d0:	02 c0       	rjmp	.+4      	; 0x43d6 <__RODATA_PM_OFFSET__+0x3d6>
    43d2:	20 e1       	ldi	r18, 0x10	; 16
    43d4:	32 e0       	ldi	r19, 0x02	; 2
    43d6:	56 01       	movw	r10, r12
    43d8:	07 ff       	sbrs	r16, 7
    43da:	09 c0       	rjmp	.+18     	; 0x43ee <__RODATA_PM_OFFSET__+0x3ee>
    43dc:	84 e0       	ldi	r24, 0x04	; 4
    43de:	a8 0e       	add	r10, r24
    43e0:	b1 1c       	adc	r11, r1
    43e2:	f6 01       	movw	r30, r12
    43e4:	60 81       	ld	r22, Z
    43e6:	71 81       	ldd	r23, Z+1	; 0x01
    43e8:	82 81       	ldd	r24, Z+2	; 0x02
    43ea:	93 81       	ldd	r25, Z+3	; 0x03
    43ec:	08 c0       	rjmp	.+16     	; 0x43fe <__RODATA_PM_OFFSET__+0x3fe>
    43ee:	f2 e0       	ldi	r31, 0x02	; 2
    43f0:	af 0e       	add	r10, r31
    43f2:	b1 1c       	adc	r11, r1
    43f4:	f6 01       	movw	r30, r12
    43f6:	60 81       	ld	r22, Z
    43f8:	71 81       	ldd	r23, Z+1	; 0x01
    43fa:	80 e0       	ldi	r24, 0x00	; 0
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	a3 01       	movw	r20, r6
    4400:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <__ultoa_invert>
    4404:	c8 2e       	mov	r12, r24
    4406:	c6 18       	sub	r12, r6
    4408:	0f 77       	andi	r16, 0x7F	; 127
    440a:	90 2e       	mov	r9, r16
    440c:	96 fe       	sbrs	r9, 6
    440e:	0b c0       	rjmp	.+22     	; 0x4426 <__RODATA_PM_OFFSET__+0x426>
    4410:	09 2d       	mov	r16, r9
    4412:	0e 7f       	andi	r16, 0xFE	; 254
    4414:	c1 16       	cp	r12, r17
    4416:	50 f4       	brcc	.+20     	; 0x442c <__RODATA_PM_OFFSET__+0x42c>
    4418:	94 fe       	sbrs	r9, 4
    441a:	0a c0       	rjmp	.+20     	; 0x4430 <__RODATA_PM_OFFSET__+0x430>
    441c:	92 fc       	sbrc	r9, 2
    441e:	08 c0       	rjmp	.+16     	; 0x4430 <__RODATA_PM_OFFSET__+0x430>
    4420:	09 2d       	mov	r16, r9
    4422:	0e 7e       	andi	r16, 0xEE	; 238
    4424:	05 c0       	rjmp	.+10     	; 0x4430 <__RODATA_PM_OFFSET__+0x430>
    4426:	dc 2c       	mov	r13, r12
    4428:	09 2d       	mov	r16, r9
    442a:	03 c0       	rjmp	.+6      	; 0x4432 <__RODATA_PM_OFFSET__+0x432>
    442c:	dc 2c       	mov	r13, r12
    442e:	01 c0       	rjmp	.+2      	; 0x4432 <__RODATA_PM_OFFSET__+0x432>
    4430:	d1 2e       	mov	r13, r17
    4432:	04 ff       	sbrs	r16, 4
    4434:	0d c0       	rjmp	.+26     	; 0x4450 <__RODATA_PM_OFFSET__+0x450>
    4436:	fe 01       	movw	r30, r28
    4438:	ec 0d       	add	r30, r12
    443a:	f1 1d       	adc	r31, r1
    443c:	80 81       	ld	r24, Z
    443e:	80 33       	cpi	r24, 0x30	; 48
    4440:	11 f4       	brne	.+4      	; 0x4446 <__RODATA_PM_OFFSET__+0x446>
    4442:	09 7e       	andi	r16, 0xE9	; 233
    4444:	09 c0       	rjmp	.+18     	; 0x4458 <__RODATA_PM_OFFSET__+0x458>
    4446:	02 ff       	sbrs	r16, 2
    4448:	06 c0       	rjmp	.+12     	; 0x4456 <__RODATA_PM_OFFSET__+0x456>
    444a:	d3 94       	inc	r13
    444c:	d3 94       	inc	r13
    444e:	04 c0       	rjmp	.+8      	; 0x4458 <__RODATA_PM_OFFSET__+0x458>
    4450:	80 2f       	mov	r24, r16
    4452:	86 78       	andi	r24, 0x86	; 134
    4454:	09 f0       	breq	.+2      	; 0x4458 <__RODATA_PM_OFFSET__+0x458>
    4456:	d3 94       	inc	r13
    4458:	03 fd       	sbrc	r16, 3
    445a:	11 c0       	rjmp	.+34     	; 0x447e <__RODATA_PM_OFFSET__+0x47e>
    445c:	00 ff       	sbrs	r16, 0
    445e:	06 c0       	rjmp	.+12     	; 0x446c <__RODATA_PM_OFFSET__+0x46c>
    4460:	1c 2d       	mov	r17, r12
    4462:	d5 14       	cp	r13, r5
    4464:	80 f4       	brcc	.+32     	; 0x4486 <__RODATA_PM_OFFSET__+0x486>
    4466:	15 0d       	add	r17, r5
    4468:	1d 19       	sub	r17, r13
    446a:	0d c0       	rjmp	.+26     	; 0x4486 <__RODATA_PM_OFFSET__+0x486>
    446c:	d5 14       	cp	r13, r5
    446e:	58 f4       	brcc	.+22     	; 0x4486 <__RODATA_PM_OFFSET__+0x486>
    4470:	b7 01       	movw	r22, r14
    4472:	80 e2       	ldi	r24, 0x20	; 32
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    447a:	d3 94       	inc	r13
    447c:	f7 cf       	rjmp	.-18     	; 0x446c <__RODATA_PM_OFFSET__+0x46c>
    447e:	d5 14       	cp	r13, r5
    4480:	10 f4       	brcc	.+4      	; 0x4486 <__RODATA_PM_OFFSET__+0x486>
    4482:	5d 18       	sub	r5, r13
    4484:	01 c0       	rjmp	.+2      	; 0x4488 <__RODATA_PM_OFFSET__+0x488>
    4486:	51 2c       	mov	r5, r1
    4488:	04 ff       	sbrs	r16, 4
    448a:	10 c0       	rjmp	.+32     	; 0x44ac <__RODATA_PM_OFFSET__+0x4ac>
    448c:	b7 01       	movw	r22, r14
    448e:	80 e3       	ldi	r24, 0x30	; 48
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    4496:	02 ff       	sbrs	r16, 2
    4498:	17 c0       	rjmp	.+46     	; 0x44c8 <__RODATA_PM_OFFSET__+0x4c8>
    449a:	01 fd       	sbrc	r16, 1
    449c:	03 c0       	rjmp	.+6      	; 0x44a4 <__RODATA_PM_OFFSET__+0x4a4>
    449e:	88 e7       	ldi	r24, 0x78	; 120
    44a0:	90 e0       	ldi	r25, 0x00	; 0
    44a2:	02 c0       	rjmp	.+4      	; 0x44a8 <__RODATA_PM_OFFSET__+0x4a8>
    44a4:	88 e5       	ldi	r24, 0x58	; 88
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	b7 01       	movw	r22, r14
    44aa:	0c c0       	rjmp	.+24     	; 0x44c4 <__RODATA_PM_OFFSET__+0x4c4>
    44ac:	80 2f       	mov	r24, r16
    44ae:	86 78       	andi	r24, 0x86	; 134
    44b0:	59 f0       	breq	.+22     	; 0x44c8 <__RODATA_PM_OFFSET__+0x4c8>
    44b2:	01 ff       	sbrs	r16, 1
    44b4:	02 c0       	rjmp	.+4      	; 0x44ba <__RODATA_PM_OFFSET__+0x4ba>
    44b6:	8b e2       	ldi	r24, 0x2B	; 43
    44b8:	01 c0       	rjmp	.+2      	; 0x44bc <__RODATA_PM_OFFSET__+0x4bc>
    44ba:	80 e2       	ldi	r24, 0x20	; 32
    44bc:	07 fd       	sbrc	r16, 7
    44be:	8d e2       	ldi	r24, 0x2D	; 45
    44c0:	b7 01       	movw	r22, r14
    44c2:	90 e0       	ldi	r25, 0x00	; 0
    44c4:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    44c8:	c1 16       	cp	r12, r17
    44ca:	38 f4       	brcc	.+14     	; 0x44da <__RODATA_PM_OFFSET__+0x4da>
    44cc:	b7 01       	movw	r22, r14
    44ce:	80 e3       	ldi	r24, 0x30	; 48
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    44d6:	11 50       	subi	r17, 0x01	; 1
    44d8:	f7 cf       	rjmp	.-18     	; 0x44c8 <__RODATA_PM_OFFSET__+0x4c8>
    44da:	ca 94       	dec	r12
    44dc:	f3 01       	movw	r30, r6
    44de:	ec 0d       	add	r30, r12
    44e0:	f1 1d       	adc	r31, r1
    44e2:	80 81       	ld	r24, Z
    44e4:	b7 01       	movw	r22, r14
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    44ec:	c1 10       	cpse	r12, r1
    44ee:	f5 cf       	rjmp	.-22     	; 0x44da <__RODATA_PM_OFFSET__+0x4da>
    44f0:	15 c0       	rjmp	.+42     	; 0x451c <__RODATA_PM_OFFSET__+0x51c>
    44f2:	f4 e0       	ldi	r31, 0x04	; 4
    44f4:	f5 15       	cp	r31, r5
    44f6:	60 f5       	brcc	.+88     	; 0x4550 <__RODATA_PM_OFFSET__+0x550>
    44f8:	84 e0       	ldi	r24, 0x04	; 4
    44fa:	58 1a       	sub	r5, r24
    44fc:	93 fe       	sbrs	r9, 3
    44fe:	1f c0       	rjmp	.+62     	; 0x453e <__RODATA_PM_OFFSET__+0x53e>
    4500:	01 11       	cpse	r16, r1
    4502:	27 c0       	rjmp	.+78     	; 0x4552 <__RODATA_PM_OFFSET__+0x552>
    4504:	2c 85       	ldd	r18, Y+12	; 0x0c
    4506:	23 ff       	sbrs	r18, 3
    4508:	2a c0       	rjmp	.+84     	; 0x455e <__RODATA_PM_OFFSET__+0x55e>
    450a:	02 e5       	ldi	r16, 0x52	; 82
    450c:	11 e0       	ldi	r17, 0x01	; 1
    450e:	39 2d       	mov	r19, r9
    4510:	30 71       	andi	r19, 0x10	; 16
    4512:	93 2e       	mov	r9, r19
    4514:	f8 01       	movw	r30, r16
    4516:	84 91       	lpm	r24, Z
    4518:	81 11       	cpse	r24, r1
    451a:	24 c0       	rjmp	.+72     	; 0x4564 <__RODATA_PM_OFFSET__+0x564>
    451c:	55 20       	and	r5, r5
    451e:	09 f4       	brne	.+2      	; 0x4522 <__RODATA_PM_OFFSET__+0x522>
    4520:	e4 cc       	rjmp	.-1592   	; 0x3eea <vfprintf+0x58>
    4522:	b7 01       	movw	r22, r14
    4524:	80 e2       	ldi	r24, 0x20	; 32
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    452c:	5a 94       	dec	r5
    452e:	f6 cf       	rjmp	.-20     	; 0x451c <__RODATA_PM_OFFSET__+0x51c>
    4530:	f7 01       	movw	r30, r14
    4532:	86 81       	ldd	r24, Z+6	; 0x06
    4534:	97 81       	ldd	r25, Z+7	; 0x07
    4536:	26 c0       	rjmp	.+76     	; 0x4584 <__RODATA_PM_OFFSET__+0x584>
    4538:	8f ef       	ldi	r24, 0xFF	; 255
    453a:	9f ef       	ldi	r25, 0xFF	; 255
    453c:	23 c0       	rjmp	.+70     	; 0x4584 <__RODATA_PM_OFFSET__+0x584>
    453e:	b7 01       	movw	r22, r14
    4540:	80 e2       	ldi	r24, 0x20	; 32
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    4548:	5a 94       	dec	r5
    454a:	51 10       	cpse	r5, r1
    454c:	f8 cf       	rjmp	.-16     	; 0x453e <__RODATA_PM_OFFSET__+0x53e>
    454e:	d8 cf       	rjmp	.-80     	; 0x4500 <__RODATA_PM_OFFSET__+0x500>
    4550:	51 2c       	mov	r5, r1
    4552:	b7 01       	movw	r22, r14
    4554:	80 2f       	mov	r24, r16
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    455c:	d3 cf       	rjmp	.-90     	; 0x4504 <__RODATA_PM_OFFSET__+0x504>
    455e:	06 e5       	ldi	r16, 0x56	; 86
    4560:	11 e0       	ldi	r17, 0x01	; 1
    4562:	d5 cf       	rjmp	.-86     	; 0x450e <__RODATA_PM_OFFSET__+0x50e>
    4564:	91 10       	cpse	r9, r1
    4566:	80 52       	subi	r24, 0x20	; 32
    4568:	b7 01       	movw	r22, r14
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	0e 94 bc 24 	call	0x4978	; 0x4978 <fputc>
    4570:	0f 5f       	subi	r16, 0xFF	; 255
    4572:	1f 4f       	sbci	r17, 0xFF	; 255
    4574:	cf cf       	rjmp	.-98     	; 0x4514 <__RODATA_PM_OFFSET__+0x514>
    4576:	23 e0       	ldi	r18, 0x03	; 3
    4578:	25 15       	cp	r18, r5
    457a:	10 f4       	brcc	.+4      	; 0x4580 <__RODATA_PM_OFFSET__+0x580>
    457c:	83 e0       	ldi	r24, 0x03	; 3
    457e:	bd cf       	rjmp	.-134    	; 0x44fa <__RODATA_PM_OFFSET__+0x4fa>
    4580:	51 2c       	mov	r5, r1
    4582:	c0 cf       	rjmp	.-128    	; 0x4504 <__RODATA_PM_OFFSET__+0x504>
    4584:	60 96       	adiw	r28, 0x10	; 16
    4586:	e2 e1       	ldi	r30, 0x12	; 18
    4588:	0c 94 23 23 	jmp	0x4646	; 0x4646 <__epilogue_restores__>

0000458c <__divmodhi4>:
    458c:	97 fb       	bst	r25, 7
    458e:	07 2e       	mov	r0, r23
    4590:	16 f4       	brtc	.+4      	; 0x4596 <__divmodhi4+0xa>
    4592:	00 94       	com	r0
    4594:	07 d0       	rcall	.+14     	; 0x45a4 <__divmodhi4_neg1>
    4596:	77 fd       	sbrc	r23, 7
    4598:	09 d0       	rcall	.+18     	; 0x45ac <__divmodhi4_neg2>
    459a:	0e 94 3b 23 	call	0x4676	; 0x4676 <__udivmodhi4>
    459e:	07 fc       	sbrc	r0, 7
    45a0:	05 d0       	rcall	.+10     	; 0x45ac <__divmodhi4_neg2>
    45a2:	3e f4       	brtc	.+14     	; 0x45b2 <__divmodhi4_exit>

000045a4 <__divmodhi4_neg1>:
    45a4:	90 95       	com	r25
    45a6:	81 95       	neg	r24
    45a8:	9f 4f       	sbci	r25, 0xFF	; 255
    45aa:	08 95       	ret

000045ac <__divmodhi4_neg2>:
    45ac:	70 95       	com	r23
    45ae:	61 95       	neg	r22
    45b0:	7f 4f       	sbci	r23, 0xFF	; 255

000045b2 <__divmodhi4_exit>:
    45b2:	08 95       	ret

000045b4 <__divmodsi4>:
    45b4:	05 2e       	mov	r0, r21
    45b6:	97 fb       	bst	r25, 7
    45b8:	1e f4       	brtc	.+6      	; 0x45c0 <__divmodsi4+0xc>
    45ba:	00 94       	com	r0
    45bc:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__negsi2>
    45c0:	57 fd       	sbrc	r21, 7
    45c2:	07 d0       	rcall	.+14     	; 0x45d2 <__divmodsi4_neg2>
    45c4:	0e 94 4f 23 	call	0x469e	; 0x469e <__udivmodsi4>
    45c8:	07 fc       	sbrc	r0, 7
    45ca:	03 d0       	rcall	.+6      	; 0x45d2 <__divmodsi4_neg2>
    45cc:	4e f4       	brtc	.+18     	; 0x45e0 <__divmodsi4_exit>
    45ce:	0c 94 f1 22 	jmp	0x45e2	; 0x45e2 <__negsi2>

000045d2 <__divmodsi4_neg2>:
    45d2:	50 95       	com	r21
    45d4:	40 95       	com	r20
    45d6:	30 95       	com	r19
    45d8:	21 95       	neg	r18
    45da:	3f 4f       	sbci	r19, 0xFF	; 255
    45dc:	4f 4f       	sbci	r20, 0xFF	; 255
    45de:	5f 4f       	sbci	r21, 0xFF	; 255

000045e0 <__divmodsi4_exit>:
    45e0:	08 95       	ret

000045e2 <__negsi2>:
    45e2:	90 95       	com	r25
    45e4:	80 95       	com	r24
    45e6:	70 95       	com	r23
    45e8:	61 95       	neg	r22
    45ea:	7f 4f       	sbci	r23, 0xFF	; 255
    45ec:	8f 4f       	sbci	r24, 0xFF	; 255
    45ee:	9f 4f       	sbci	r25, 0xFF	; 255
    45f0:	08 95       	ret

000045f2 <__tablejump2__>:
    45f2:	ee 0f       	add	r30, r30
    45f4:	ff 1f       	adc	r31, r31
    45f6:	05 90       	lpm	r0, Z+
    45f8:	f4 91       	lpm	r31, Z
    45fa:	e0 2d       	mov	r30, r0
    45fc:	09 94       	ijmp

000045fe <__muluhisi3>:
    45fe:	0e 94 71 23 	call	0x46e2	; 0x46e2 <__umulhisi3>
    4602:	a5 9f       	mul	r26, r21
    4604:	90 0d       	add	r25, r0
    4606:	b4 9f       	mul	r27, r20
    4608:	90 0d       	add	r25, r0
    460a:	a4 9f       	mul	r26, r20
    460c:	80 0d       	add	r24, r0
    460e:	91 1d       	adc	r25, r1
    4610:	11 24       	eor	r1, r1
    4612:	08 95       	ret

00004614 <__prologue_saves__>:
    4614:	2f 92       	push	r2
    4616:	3f 92       	push	r3
    4618:	4f 92       	push	r4
    461a:	5f 92       	push	r5
    461c:	6f 92       	push	r6
    461e:	7f 92       	push	r7
    4620:	8f 92       	push	r8
    4622:	9f 92       	push	r9
    4624:	af 92       	push	r10
    4626:	bf 92       	push	r11
    4628:	cf 92       	push	r12
    462a:	df 92       	push	r13
    462c:	ef 92       	push	r14
    462e:	ff 92       	push	r15
    4630:	0f 93       	push	r16
    4632:	1f 93       	push	r17
    4634:	cf 93       	push	r28
    4636:	df 93       	push	r29
    4638:	cd b7       	in	r28, 0x3d	; 61
    463a:	de b7       	in	r29, 0x3e	; 62
    463c:	ca 1b       	sub	r28, r26
    463e:	db 0b       	sbc	r29, r27
    4640:	cd bf       	out	0x3d, r28	; 61
    4642:	de bf       	out	0x3e, r29	; 62
    4644:	09 94       	ijmp

00004646 <__epilogue_restores__>:
    4646:	2a 88       	ldd	r2, Y+18	; 0x12
    4648:	39 88       	ldd	r3, Y+17	; 0x11
    464a:	48 88       	ldd	r4, Y+16	; 0x10
    464c:	5f 84       	ldd	r5, Y+15	; 0x0f
    464e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4650:	7d 84       	ldd	r7, Y+13	; 0x0d
    4652:	8c 84       	ldd	r8, Y+12	; 0x0c
    4654:	9b 84       	ldd	r9, Y+11	; 0x0b
    4656:	aa 84       	ldd	r10, Y+10	; 0x0a
    4658:	b9 84       	ldd	r11, Y+9	; 0x09
    465a:	c8 84       	ldd	r12, Y+8	; 0x08
    465c:	df 80       	ldd	r13, Y+7	; 0x07
    465e:	ee 80       	ldd	r14, Y+6	; 0x06
    4660:	fd 80       	ldd	r15, Y+5	; 0x05
    4662:	0c 81       	ldd	r16, Y+4	; 0x04
    4664:	1b 81       	ldd	r17, Y+3	; 0x03
    4666:	aa 81       	ldd	r26, Y+2	; 0x02
    4668:	b9 81       	ldd	r27, Y+1	; 0x01
    466a:	ce 0f       	add	r28, r30
    466c:	d1 1d       	adc	r29, r1
    466e:	cd bf       	out	0x3d, r28	; 61
    4670:	de bf       	out	0x3e, r29	; 62
    4672:	ed 01       	movw	r28, r26
    4674:	08 95       	ret

00004676 <__udivmodhi4>:
    4676:	aa 1b       	sub	r26, r26
    4678:	bb 1b       	sub	r27, r27
    467a:	51 e1       	ldi	r21, 0x11	; 17
    467c:	07 c0       	rjmp	.+14     	; 0x468c <__udivmodhi4_ep>

0000467e <__udivmodhi4_loop>:
    467e:	aa 1f       	adc	r26, r26
    4680:	bb 1f       	adc	r27, r27
    4682:	a6 17       	cp	r26, r22
    4684:	b7 07       	cpc	r27, r23
    4686:	10 f0       	brcs	.+4      	; 0x468c <__udivmodhi4_ep>
    4688:	a6 1b       	sub	r26, r22
    468a:	b7 0b       	sbc	r27, r23

0000468c <__udivmodhi4_ep>:
    468c:	88 1f       	adc	r24, r24
    468e:	99 1f       	adc	r25, r25
    4690:	5a 95       	dec	r21
    4692:	a9 f7       	brne	.-22     	; 0x467e <__udivmodhi4_loop>
    4694:	80 95       	com	r24
    4696:	90 95       	com	r25
    4698:	bc 01       	movw	r22, r24
    469a:	cd 01       	movw	r24, r26
    469c:	08 95       	ret

0000469e <__udivmodsi4>:
    469e:	a1 e2       	ldi	r26, 0x21	; 33
    46a0:	1a 2e       	mov	r1, r26
    46a2:	aa 1b       	sub	r26, r26
    46a4:	bb 1b       	sub	r27, r27
    46a6:	fd 01       	movw	r30, r26
    46a8:	0d c0       	rjmp	.+26     	; 0x46c4 <__udivmodsi4_ep>

000046aa <__udivmodsi4_loop>:
    46aa:	aa 1f       	adc	r26, r26
    46ac:	bb 1f       	adc	r27, r27
    46ae:	ee 1f       	adc	r30, r30
    46b0:	ff 1f       	adc	r31, r31
    46b2:	a2 17       	cp	r26, r18
    46b4:	b3 07       	cpc	r27, r19
    46b6:	e4 07       	cpc	r30, r20
    46b8:	f5 07       	cpc	r31, r21
    46ba:	20 f0       	brcs	.+8      	; 0x46c4 <__udivmodsi4_ep>
    46bc:	a2 1b       	sub	r26, r18
    46be:	b3 0b       	sbc	r27, r19
    46c0:	e4 0b       	sbc	r30, r20
    46c2:	f5 0b       	sbc	r31, r21

000046c4 <__udivmodsi4_ep>:
    46c4:	66 1f       	adc	r22, r22
    46c6:	77 1f       	adc	r23, r23
    46c8:	88 1f       	adc	r24, r24
    46ca:	99 1f       	adc	r25, r25
    46cc:	1a 94       	dec	r1
    46ce:	69 f7       	brne	.-38     	; 0x46aa <__udivmodsi4_loop>
    46d0:	60 95       	com	r22
    46d2:	70 95       	com	r23
    46d4:	80 95       	com	r24
    46d6:	90 95       	com	r25
    46d8:	9b 01       	movw	r18, r22
    46da:	ac 01       	movw	r20, r24
    46dc:	bd 01       	movw	r22, r26
    46de:	cf 01       	movw	r24, r30
    46e0:	08 95       	ret

000046e2 <__umulhisi3>:
    46e2:	a2 9f       	mul	r26, r18
    46e4:	b0 01       	movw	r22, r0
    46e6:	b3 9f       	mul	r27, r19
    46e8:	c0 01       	movw	r24, r0
    46ea:	a3 9f       	mul	r26, r19
    46ec:	70 0d       	add	r23, r0
    46ee:	81 1d       	adc	r24, r1
    46f0:	11 24       	eor	r1, r1
    46f2:	91 1d       	adc	r25, r1
    46f4:	b2 9f       	mul	r27, r18
    46f6:	70 0d       	add	r23, r0
    46f8:	81 1d       	adc	r24, r1
    46fa:	11 24       	eor	r1, r1
    46fc:	91 1d       	adc	r25, r1
    46fe:	08 95       	ret

00004700 <atol>:
    4700:	1f 93       	push	r17
    4702:	fc 01       	movw	r30, r24
    4704:	99 27       	eor	r25, r25
    4706:	88 27       	eor	r24, r24
    4708:	bc 01       	movw	r22, r24
    470a:	e8 94       	clt
    470c:	11 91       	ld	r17, Z+
    470e:	10 32       	cpi	r17, 0x20	; 32
    4710:	e9 f3       	breq	.-6      	; 0x470c <atol+0xc>
    4712:	19 30       	cpi	r17, 0x09	; 9
    4714:	10 f0       	brcs	.+4      	; 0x471a <atol+0x1a>
    4716:	1e 30       	cpi	r17, 0x0E	; 14
    4718:	c8 f3       	brcs	.-14     	; 0x470c <atol+0xc>
    471a:	1b 32       	cpi	r17, 0x2B	; 43
    471c:	51 f0       	breq	.+20     	; 0x4732 <atol+0x32>
    471e:	1d 32       	cpi	r17, 0x2D	; 45
    4720:	49 f4       	brne	.+18     	; 0x4734 <atol+0x34>
    4722:	68 94       	set
    4724:	06 c0       	rjmp	.+12     	; 0x4732 <atol+0x32>
    4726:	0e 94 a7 24 	call	0x494e	; 0x494e <__mulsi_const_10>
    472a:	61 0f       	add	r22, r17
    472c:	71 1d       	adc	r23, r1
    472e:	81 1d       	adc	r24, r1
    4730:	91 1d       	adc	r25, r1
    4732:	11 91       	ld	r17, Z+
    4734:	10 53       	subi	r17, 0x30	; 48
    4736:	1a 30       	cpi	r17, 0x0A	; 10
    4738:	b0 f3       	brcs	.-20     	; 0x4726 <atol+0x26>
    473a:	3e f4       	brtc	.+14     	; 0x474a <atol+0x4a>
    473c:	90 95       	com	r25
    473e:	80 95       	com	r24
    4740:	70 95       	com	r23
    4742:	61 95       	neg	r22
    4744:	7f 4f       	sbci	r23, 0xFF	; 255
    4746:	8f 4f       	sbci	r24, 0xFF	; 255
    4748:	9f 4f       	sbci	r25, 0xFF	; 255
    474a:	1f 91       	pop	r17
    474c:	08 95       	ret

0000474e <__ftoa_engine>:
    474e:	28 30       	cpi	r18, 0x08	; 8
    4750:	08 f0       	brcs	.+2      	; 0x4754 <__ftoa_engine+0x6>
    4752:	27 e0       	ldi	r18, 0x07	; 7
    4754:	33 27       	eor	r19, r19
    4756:	da 01       	movw	r26, r20
    4758:	99 0f       	add	r25, r25
    475a:	31 1d       	adc	r19, r1
    475c:	87 fd       	sbrc	r24, 7
    475e:	91 60       	ori	r25, 0x01	; 1
    4760:	00 96       	adiw	r24, 0x00	; 0
    4762:	61 05       	cpc	r22, r1
    4764:	71 05       	cpc	r23, r1
    4766:	39 f4       	brne	.+14     	; 0x4776 <__ftoa_engine+0x28>
    4768:	32 60       	ori	r19, 0x02	; 2
    476a:	2e 5f       	subi	r18, 0xFE	; 254
    476c:	3d 93       	st	X+, r19
    476e:	30 e3       	ldi	r19, 0x30	; 48
    4770:	2a 95       	dec	r18
    4772:	e1 f7       	brne	.-8      	; 0x476c <__ftoa_engine+0x1e>
    4774:	08 95       	ret
    4776:	9f 3f       	cpi	r25, 0xFF	; 255
    4778:	30 f0       	brcs	.+12     	; 0x4786 <__ftoa_engine+0x38>
    477a:	80 38       	cpi	r24, 0x80	; 128
    477c:	71 05       	cpc	r23, r1
    477e:	61 05       	cpc	r22, r1
    4780:	09 f0       	breq	.+2      	; 0x4784 <__ftoa_engine+0x36>
    4782:	3c 5f       	subi	r19, 0xFC	; 252
    4784:	3c 5f       	subi	r19, 0xFC	; 252
    4786:	3d 93       	st	X+, r19
    4788:	91 30       	cpi	r25, 0x01	; 1
    478a:	08 f0       	brcs	.+2      	; 0x478e <__ftoa_engine+0x40>
    478c:	80 68       	ori	r24, 0x80	; 128
    478e:	91 1d       	adc	r25, r1
    4790:	df 93       	push	r29
    4792:	cf 93       	push	r28
    4794:	1f 93       	push	r17
    4796:	0f 93       	push	r16
    4798:	ff 92       	push	r15
    479a:	ef 92       	push	r14
    479c:	19 2f       	mov	r17, r25
    479e:	98 7f       	andi	r25, 0xF8	; 248
    47a0:	96 95       	lsr	r25
    47a2:	e9 2f       	mov	r30, r25
    47a4:	96 95       	lsr	r25
    47a6:	96 95       	lsr	r25
    47a8:	e9 0f       	add	r30, r25
    47aa:	ff 27       	eor	r31, r31
    47ac:	ec 54       	subi	r30, 0x4C	; 76
    47ae:	fe 4f       	sbci	r31, 0xFE	; 254
    47b0:	99 27       	eor	r25, r25
    47b2:	33 27       	eor	r19, r19
    47b4:	ee 24       	eor	r14, r14
    47b6:	ff 24       	eor	r15, r15
    47b8:	a7 01       	movw	r20, r14
    47ba:	e7 01       	movw	r28, r14
    47bc:	05 90       	lpm	r0, Z+
    47be:	08 94       	sec
    47c0:	07 94       	ror	r0
    47c2:	28 f4       	brcc	.+10     	; 0x47ce <__ftoa_engine+0x80>
    47c4:	36 0f       	add	r19, r22
    47c6:	e7 1e       	adc	r14, r23
    47c8:	f8 1e       	adc	r15, r24
    47ca:	49 1f       	adc	r20, r25
    47cc:	51 1d       	adc	r21, r1
    47ce:	66 0f       	add	r22, r22
    47d0:	77 1f       	adc	r23, r23
    47d2:	88 1f       	adc	r24, r24
    47d4:	99 1f       	adc	r25, r25
    47d6:	06 94       	lsr	r0
    47d8:	a1 f7       	brne	.-24     	; 0x47c2 <__ftoa_engine+0x74>
    47da:	05 90       	lpm	r0, Z+
    47dc:	07 94       	ror	r0
    47de:	28 f4       	brcc	.+10     	; 0x47ea <__ftoa_engine+0x9c>
    47e0:	e7 0e       	add	r14, r23
    47e2:	f8 1e       	adc	r15, r24
    47e4:	49 1f       	adc	r20, r25
    47e6:	56 1f       	adc	r21, r22
    47e8:	c1 1d       	adc	r28, r1
    47ea:	77 0f       	add	r23, r23
    47ec:	88 1f       	adc	r24, r24
    47ee:	99 1f       	adc	r25, r25
    47f0:	66 1f       	adc	r22, r22
    47f2:	06 94       	lsr	r0
    47f4:	a1 f7       	brne	.-24     	; 0x47de <__ftoa_engine+0x90>
    47f6:	05 90       	lpm	r0, Z+
    47f8:	07 94       	ror	r0
    47fa:	28 f4       	brcc	.+10     	; 0x4806 <__ftoa_engine+0xb8>
    47fc:	f8 0e       	add	r15, r24
    47fe:	49 1f       	adc	r20, r25
    4800:	56 1f       	adc	r21, r22
    4802:	c7 1f       	adc	r28, r23
    4804:	d1 1d       	adc	r29, r1
    4806:	88 0f       	add	r24, r24
    4808:	99 1f       	adc	r25, r25
    480a:	66 1f       	adc	r22, r22
    480c:	77 1f       	adc	r23, r23
    480e:	06 94       	lsr	r0
    4810:	a1 f7       	brne	.-24     	; 0x47fa <__ftoa_engine+0xac>
    4812:	05 90       	lpm	r0, Z+
    4814:	07 94       	ror	r0
    4816:	20 f4       	brcc	.+8      	; 0x4820 <__ftoa_engine+0xd2>
    4818:	49 0f       	add	r20, r25
    481a:	56 1f       	adc	r21, r22
    481c:	c7 1f       	adc	r28, r23
    481e:	d8 1f       	adc	r29, r24
    4820:	99 0f       	add	r25, r25
    4822:	66 1f       	adc	r22, r22
    4824:	77 1f       	adc	r23, r23
    4826:	88 1f       	adc	r24, r24
    4828:	06 94       	lsr	r0
    482a:	a9 f7       	brne	.-22     	; 0x4816 <__ftoa_engine+0xc8>
    482c:	84 91       	lpm	r24, Z
    482e:	10 95       	com	r17
    4830:	17 70       	andi	r17, 0x07	; 7
    4832:	41 f0       	breq	.+16     	; 0x4844 <__ftoa_engine+0xf6>
    4834:	d6 95       	lsr	r29
    4836:	c7 95       	ror	r28
    4838:	57 95       	ror	r21
    483a:	47 95       	ror	r20
    483c:	f7 94       	ror	r15
    483e:	e7 94       	ror	r14
    4840:	1a 95       	dec	r17
    4842:	c1 f7       	brne	.-16     	; 0x4834 <__ftoa_engine+0xe6>
    4844:	ea e5       	ldi	r30, 0x5A	; 90
    4846:	f1 e0       	ldi	r31, 0x01	; 1
    4848:	68 94       	set
    484a:	15 90       	lpm	r1, Z+
    484c:	15 91       	lpm	r17, Z+
    484e:	35 91       	lpm	r19, Z+
    4850:	65 91       	lpm	r22, Z+
    4852:	95 91       	lpm	r25, Z+
    4854:	05 90       	lpm	r0, Z+
    4856:	7f e2       	ldi	r23, 0x2F	; 47
    4858:	73 95       	inc	r23
    485a:	e1 18       	sub	r14, r1
    485c:	f1 0a       	sbc	r15, r17
    485e:	43 0b       	sbc	r20, r19
    4860:	56 0b       	sbc	r21, r22
    4862:	c9 0b       	sbc	r28, r25
    4864:	d0 09       	sbc	r29, r0
    4866:	c0 f7       	brcc	.-16     	; 0x4858 <__ftoa_engine+0x10a>
    4868:	e1 0c       	add	r14, r1
    486a:	f1 1e       	adc	r15, r17
    486c:	43 1f       	adc	r20, r19
    486e:	56 1f       	adc	r21, r22
    4870:	c9 1f       	adc	r28, r25
    4872:	d0 1d       	adc	r29, r0
    4874:	7e f4       	brtc	.+30     	; 0x4894 <__ftoa_engine+0x146>
    4876:	70 33       	cpi	r23, 0x30	; 48
    4878:	11 f4       	brne	.+4      	; 0x487e <__ftoa_engine+0x130>
    487a:	8a 95       	dec	r24
    487c:	e6 cf       	rjmp	.-52     	; 0x484a <__ftoa_engine+0xfc>
    487e:	e8 94       	clt
    4880:	01 50       	subi	r16, 0x01	; 1
    4882:	30 f0       	brcs	.+12     	; 0x4890 <__ftoa_engine+0x142>
    4884:	08 0f       	add	r16, r24
    4886:	0a f4       	brpl	.+2      	; 0x488a <__ftoa_engine+0x13c>
    4888:	00 27       	eor	r16, r16
    488a:	02 17       	cp	r16, r18
    488c:	08 f4       	brcc	.+2      	; 0x4890 <__ftoa_engine+0x142>
    488e:	20 2f       	mov	r18, r16
    4890:	23 95       	inc	r18
    4892:	02 2f       	mov	r16, r18
    4894:	7a 33       	cpi	r23, 0x3A	; 58
    4896:	28 f0       	brcs	.+10     	; 0x48a2 <__ftoa_engine+0x154>
    4898:	79 e3       	ldi	r23, 0x39	; 57
    489a:	7d 93       	st	X+, r23
    489c:	2a 95       	dec	r18
    489e:	e9 f7       	brne	.-6      	; 0x489a <__ftoa_engine+0x14c>
    48a0:	10 c0       	rjmp	.+32     	; 0x48c2 <__ftoa_engine+0x174>
    48a2:	7d 93       	st	X+, r23
    48a4:	2a 95       	dec	r18
    48a6:	89 f6       	brne	.-94     	; 0x484a <__ftoa_engine+0xfc>
    48a8:	06 94       	lsr	r0
    48aa:	97 95       	ror	r25
    48ac:	67 95       	ror	r22
    48ae:	37 95       	ror	r19
    48b0:	17 95       	ror	r17
    48b2:	17 94       	ror	r1
    48b4:	e1 18       	sub	r14, r1
    48b6:	f1 0a       	sbc	r15, r17
    48b8:	43 0b       	sbc	r20, r19
    48ba:	56 0b       	sbc	r21, r22
    48bc:	c9 0b       	sbc	r28, r25
    48be:	d0 09       	sbc	r29, r0
    48c0:	98 f0       	brcs	.+38     	; 0x48e8 <__ftoa_engine+0x19a>
    48c2:	23 95       	inc	r18
    48c4:	7e 91       	ld	r23, -X
    48c6:	73 95       	inc	r23
    48c8:	7a 33       	cpi	r23, 0x3A	; 58
    48ca:	08 f0       	brcs	.+2      	; 0x48ce <__ftoa_engine+0x180>
    48cc:	70 e3       	ldi	r23, 0x30	; 48
    48ce:	7c 93       	st	X, r23
    48d0:	20 13       	cpse	r18, r16
    48d2:	b8 f7       	brcc	.-18     	; 0x48c2 <__ftoa_engine+0x174>
    48d4:	7e 91       	ld	r23, -X
    48d6:	70 61       	ori	r23, 0x10	; 16
    48d8:	7d 93       	st	X+, r23
    48da:	30 f0       	brcs	.+12     	; 0x48e8 <__ftoa_engine+0x19a>
    48dc:	83 95       	inc	r24
    48de:	71 e3       	ldi	r23, 0x31	; 49
    48e0:	7d 93       	st	X+, r23
    48e2:	70 e3       	ldi	r23, 0x30	; 48
    48e4:	2a 95       	dec	r18
    48e6:	e1 f7       	brne	.-8      	; 0x48e0 <__ftoa_engine+0x192>
    48e8:	11 24       	eor	r1, r1
    48ea:	ef 90       	pop	r14
    48ec:	ff 90       	pop	r15
    48ee:	0f 91       	pop	r16
    48f0:	1f 91       	pop	r17
    48f2:	cf 91       	pop	r28
    48f4:	df 91       	pop	r29
    48f6:	99 27       	eor	r25, r25
    48f8:	87 fd       	sbrc	r24, 7
    48fa:	90 95       	com	r25
    48fc:	08 95       	ret

000048fe <strnlen_P>:
    48fe:	fc 01       	movw	r30, r24
    4900:	05 90       	lpm	r0, Z+
    4902:	61 50       	subi	r22, 0x01	; 1
    4904:	70 40       	sbci	r23, 0x00	; 0
    4906:	01 10       	cpse	r0, r1
    4908:	d8 f7       	brcc	.-10     	; 0x4900 <strnlen_P+0x2>
    490a:	80 95       	com	r24
    490c:	90 95       	com	r25
    490e:	8e 0f       	add	r24, r30
    4910:	9f 1f       	adc	r25, r31
    4912:	08 95       	ret

00004914 <strcat>:
    4914:	fb 01       	movw	r30, r22
    4916:	dc 01       	movw	r26, r24
    4918:	0d 90       	ld	r0, X+
    491a:	00 20       	and	r0, r0
    491c:	e9 f7       	brne	.-6      	; 0x4918 <strcat+0x4>
    491e:	11 97       	sbiw	r26, 0x01	; 1
    4920:	01 90       	ld	r0, Z+
    4922:	0d 92       	st	X+, r0
    4924:	00 20       	and	r0, r0
    4926:	e1 f7       	brne	.-8      	; 0x4920 <strcat+0xc>
    4928:	08 95       	ret

0000492a <strcpy>:
    492a:	fb 01       	movw	r30, r22
    492c:	dc 01       	movw	r26, r24
    492e:	01 90       	ld	r0, Z+
    4930:	0d 92       	st	X+, r0
    4932:	00 20       	and	r0, r0
    4934:	e1 f7       	brne	.-8      	; 0x492e <strcpy+0x4>
    4936:	08 95       	ret

00004938 <strnlen>:
    4938:	fc 01       	movw	r30, r24
    493a:	61 50       	subi	r22, 0x01	; 1
    493c:	70 40       	sbci	r23, 0x00	; 0
    493e:	01 90       	ld	r0, Z+
    4940:	01 10       	cpse	r0, r1
    4942:	d8 f7       	brcc	.-10     	; 0x493a <strnlen+0x2>
    4944:	80 95       	com	r24
    4946:	90 95       	com	r25
    4948:	8e 0f       	add	r24, r30
    494a:	9f 1f       	adc	r25, r31
    494c:	08 95       	ret

0000494e <__mulsi_const_10>:
    494e:	59 2f       	mov	r21, r25
    4950:	48 2f       	mov	r20, r24
    4952:	37 2f       	mov	r19, r23
    4954:	26 2f       	mov	r18, r22
    4956:	66 0f       	add	r22, r22
    4958:	77 1f       	adc	r23, r23
    495a:	88 1f       	adc	r24, r24
    495c:	99 1f       	adc	r25, r25
    495e:	66 0f       	add	r22, r22
    4960:	77 1f       	adc	r23, r23
    4962:	88 1f       	adc	r24, r24
    4964:	99 1f       	adc	r25, r25
    4966:	62 0f       	add	r22, r18
    4968:	73 1f       	adc	r23, r19
    496a:	84 1f       	adc	r24, r20
    496c:	95 1f       	adc	r25, r21
    496e:	66 0f       	add	r22, r22
    4970:	77 1f       	adc	r23, r23
    4972:	88 1f       	adc	r24, r24
    4974:	99 1f       	adc	r25, r25
    4976:	08 95       	ret

00004978 <fputc>:
    4978:	0f 93       	push	r16
    497a:	1f 93       	push	r17
    497c:	cf 93       	push	r28
    497e:	df 93       	push	r29
    4980:	fb 01       	movw	r30, r22
    4982:	23 81       	ldd	r18, Z+3	; 0x03
    4984:	21 fd       	sbrc	r18, 1
    4986:	03 c0       	rjmp	.+6      	; 0x498e <fputc+0x16>
    4988:	8f ef       	ldi	r24, 0xFF	; 255
    498a:	9f ef       	ldi	r25, 0xFF	; 255
    498c:	2c c0       	rjmp	.+88     	; 0x49e6 <fputc+0x6e>
    498e:	22 ff       	sbrs	r18, 2
    4990:	16 c0       	rjmp	.+44     	; 0x49be <fputc+0x46>
    4992:	46 81       	ldd	r20, Z+6	; 0x06
    4994:	57 81       	ldd	r21, Z+7	; 0x07
    4996:	24 81       	ldd	r18, Z+4	; 0x04
    4998:	35 81       	ldd	r19, Z+5	; 0x05
    499a:	42 17       	cp	r20, r18
    499c:	53 07       	cpc	r21, r19
    499e:	44 f4       	brge	.+16     	; 0x49b0 <fputc+0x38>
    49a0:	a0 81       	ld	r26, Z
    49a2:	b1 81       	ldd	r27, Z+1	; 0x01
    49a4:	9d 01       	movw	r18, r26
    49a6:	2f 5f       	subi	r18, 0xFF	; 255
    49a8:	3f 4f       	sbci	r19, 0xFF	; 255
    49aa:	20 83       	st	Z, r18
    49ac:	31 83       	std	Z+1, r19	; 0x01
    49ae:	8c 93       	st	X, r24
    49b0:	26 81       	ldd	r18, Z+6	; 0x06
    49b2:	37 81       	ldd	r19, Z+7	; 0x07
    49b4:	2f 5f       	subi	r18, 0xFF	; 255
    49b6:	3f 4f       	sbci	r19, 0xFF	; 255
    49b8:	26 83       	std	Z+6, r18	; 0x06
    49ba:	37 83       	std	Z+7, r19	; 0x07
    49bc:	14 c0       	rjmp	.+40     	; 0x49e6 <fputc+0x6e>
    49be:	8b 01       	movw	r16, r22
    49c0:	ec 01       	movw	r28, r24
    49c2:	fb 01       	movw	r30, r22
    49c4:	00 84       	ldd	r0, Z+8	; 0x08
    49c6:	f1 85       	ldd	r31, Z+9	; 0x09
    49c8:	e0 2d       	mov	r30, r0
    49ca:	09 95       	icall
    49cc:	89 2b       	or	r24, r25
    49ce:	e1 f6       	brne	.-72     	; 0x4988 <fputc+0x10>
    49d0:	d8 01       	movw	r26, r16
    49d2:	16 96       	adiw	r26, 0x06	; 6
    49d4:	8d 91       	ld	r24, X+
    49d6:	9c 91       	ld	r25, X
    49d8:	17 97       	sbiw	r26, 0x07	; 7
    49da:	01 96       	adiw	r24, 0x01	; 1
    49dc:	16 96       	adiw	r26, 0x06	; 6
    49de:	8d 93       	st	X+, r24
    49e0:	9c 93       	st	X, r25
    49e2:	17 97       	sbiw	r26, 0x07	; 7
    49e4:	ce 01       	movw	r24, r28
    49e6:	df 91       	pop	r29
    49e8:	cf 91       	pop	r28
    49ea:	1f 91       	pop	r17
    49ec:	0f 91       	pop	r16
    49ee:	08 95       	ret

000049f0 <sprintf>:
    49f0:	ae e0       	ldi	r26, 0x0E	; 14
    49f2:	b0 e0       	ldi	r27, 0x00	; 0
    49f4:	ee ef       	ldi	r30, 0xFE	; 254
    49f6:	f4 e2       	ldi	r31, 0x24	; 36
    49f8:	0c 94 18 23 	jmp	0x4630	; 0x4630 <__prologue_saves__+0x1c>
    49fc:	0d 89       	ldd	r16, Y+21	; 0x15
    49fe:	1e 89       	ldd	r17, Y+22	; 0x16
    4a00:	86 e0       	ldi	r24, 0x06	; 6
    4a02:	8c 83       	std	Y+4, r24	; 0x04
    4a04:	09 83       	std	Y+1, r16	; 0x01
    4a06:	1a 83       	std	Y+2, r17	; 0x02
    4a08:	8f ef       	ldi	r24, 0xFF	; 255
    4a0a:	9f e7       	ldi	r25, 0x7F	; 127
    4a0c:	8d 83       	std	Y+5, r24	; 0x05
    4a0e:	9e 83       	std	Y+6, r25	; 0x06
    4a10:	ae 01       	movw	r20, r28
    4a12:	47 5e       	subi	r20, 0xE7	; 231
    4a14:	5f 4f       	sbci	r21, 0xFF	; 255
    4a16:	6f 89       	ldd	r22, Y+23	; 0x17
    4a18:	78 8d       	ldd	r23, Y+24	; 0x18
    4a1a:	ce 01       	movw	r24, r28
    4a1c:	01 96       	adiw	r24, 0x01	; 1
    4a1e:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <vfprintf>
    4a22:	ef 81       	ldd	r30, Y+7	; 0x07
    4a24:	f8 85       	ldd	r31, Y+8	; 0x08
    4a26:	e0 0f       	add	r30, r16
    4a28:	f1 1f       	adc	r31, r17
    4a2a:	10 82       	st	Z, r1
    4a2c:	2e 96       	adiw	r28, 0x0e	; 14
    4a2e:	e4 e0       	ldi	r30, 0x04	; 4
    4a30:	0c 94 31 23 	jmp	0x4662	; 0x4662 <__epilogue_restores__+0x1c>

00004a34 <__ultoa_invert>:
    4a34:	fa 01       	movw	r30, r20
    4a36:	aa 27       	eor	r26, r26
    4a38:	28 30       	cpi	r18, 0x08	; 8
    4a3a:	51 f1       	breq	.+84     	; 0x4a90 <__ultoa_invert+0x5c>
    4a3c:	20 31       	cpi	r18, 0x10	; 16
    4a3e:	81 f1       	breq	.+96     	; 0x4aa0 <__ultoa_invert+0x6c>
    4a40:	e8 94       	clt
    4a42:	6f 93       	push	r22
    4a44:	6e 7f       	andi	r22, 0xFE	; 254
    4a46:	6e 5f       	subi	r22, 0xFE	; 254
    4a48:	7f 4f       	sbci	r23, 0xFF	; 255
    4a4a:	8f 4f       	sbci	r24, 0xFF	; 255
    4a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a4e:	af 4f       	sbci	r26, 0xFF	; 255
    4a50:	b1 e0       	ldi	r27, 0x01	; 1
    4a52:	3e d0       	rcall	.+124    	; 0x4ad0 <__ultoa_invert+0x9c>
    4a54:	b4 e0       	ldi	r27, 0x04	; 4
    4a56:	3c d0       	rcall	.+120    	; 0x4ad0 <__ultoa_invert+0x9c>
    4a58:	67 0f       	add	r22, r23
    4a5a:	78 1f       	adc	r23, r24
    4a5c:	89 1f       	adc	r24, r25
    4a5e:	9a 1f       	adc	r25, r26
    4a60:	a1 1d       	adc	r26, r1
    4a62:	68 0f       	add	r22, r24
    4a64:	79 1f       	adc	r23, r25
    4a66:	8a 1f       	adc	r24, r26
    4a68:	91 1d       	adc	r25, r1
    4a6a:	a1 1d       	adc	r26, r1
    4a6c:	6a 0f       	add	r22, r26
    4a6e:	71 1d       	adc	r23, r1
    4a70:	81 1d       	adc	r24, r1
    4a72:	91 1d       	adc	r25, r1
    4a74:	a1 1d       	adc	r26, r1
    4a76:	20 d0       	rcall	.+64     	; 0x4ab8 <__ultoa_invert+0x84>
    4a78:	09 f4       	brne	.+2      	; 0x4a7c <__ultoa_invert+0x48>
    4a7a:	68 94       	set
    4a7c:	3f 91       	pop	r19
    4a7e:	2a e0       	ldi	r18, 0x0A	; 10
    4a80:	26 9f       	mul	r18, r22
    4a82:	11 24       	eor	r1, r1
    4a84:	30 19       	sub	r19, r0
    4a86:	30 5d       	subi	r19, 0xD0	; 208
    4a88:	31 93       	st	Z+, r19
    4a8a:	de f6       	brtc	.-74     	; 0x4a42 <__ultoa_invert+0xe>
    4a8c:	cf 01       	movw	r24, r30
    4a8e:	08 95       	ret
    4a90:	46 2f       	mov	r20, r22
    4a92:	47 70       	andi	r20, 0x07	; 7
    4a94:	40 5d       	subi	r20, 0xD0	; 208
    4a96:	41 93       	st	Z+, r20
    4a98:	b3 e0       	ldi	r27, 0x03	; 3
    4a9a:	0f d0       	rcall	.+30     	; 0x4aba <__ultoa_invert+0x86>
    4a9c:	c9 f7       	brne	.-14     	; 0x4a90 <__ultoa_invert+0x5c>
    4a9e:	f6 cf       	rjmp	.-20     	; 0x4a8c <__ultoa_invert+0x58>
    4aa0:	46 2f       	mov	r20, r22
    4aa2:	4f 70       	andi	r20, 0x0F	; 15
    4aa4:	40 5d       	subi	r20, 0xD0	; 208
    4aa6:	4a 33       	cpi	r20, 0x3A	; 58
    4aa8:	18 f0       	brcs	.+6      	; 0x4ab0 <__ultoa_invert+0x7c>
    4aaa:	49 5d       	subi	r20, 0xD9	; 217
    4aac:	31 fd       	sbrc	r19, 1
    4aae:	40 52       	subi	r20, 0x20	; 32
    4ab0:	41 93       	st	Z+, r20
    4ab2:	02 d0       	rcall	.+4      	; 0x4ab8 <__ultoa_invert+0x84>
    4ab4:	a9 f7       	brne	.-22     	; 0x4aa0 <__ultoa_invert+0x6c>
    4ab6:	ea cf       	rjmp	.-44     	; 0x4a8c <__ultoa_invert+0x58>
    4ab8:	b4 e0       	ldi	r27, 0x04	; 4
    4aba:	a6 95       	lsr	r26
    4abc:	97 95       	ror	r25
    4abe:	87 95       	ror	r24
    4ac0:	77 95       	ror	r23
    4ac2:	67 95       	ror	r22
    4ac4:	ba 95       	dec	r27
    4ac6:	c9 f7       	brne	.-14     	; 0x4aba <__ultoa_invert+0x86>
    4ac8:	00 97       	sbiw	r24, 0x00	; 0
    4aca:	61 05       	cpc	r22, r1
    4acc:	71 05       	cpc	r23, r1
    4ace:	08 95       	ret
    4ad0:	9b 01       	movw	r18, r22
    4ad2:	ac 01       	movw	r20, r24
    4ad4:	0a 2e       	mov	r0, r26
    4ad6:	06 94       	lsr	r0
    4ad8:	57 95       	ror	r21
    4ada:	47 95       	ror	r20
    4adc:	37 95       	ror	r19
    4ade:	27 95       	ror	r18
    4ae0:	ba 95       	dec	r27
    4ae2:	c9 f7       	brne	.-14     	; 0x4ad6 <__ultoa_invert+0xa2>
    4ae4:	62 0f       	add	r22, r18
    4ae6:	73 1f       	adc	r23, r19
    4ae8:	84 1f       	adc	r24, r20
    4aea:	95 1f       	adc	r25, r21
    4aec:	a0 1d       	adc	r26, r0
    4aee:	08 95       	ret

00004af0 <eeprom_read_block>:
    4af0:	60 50       	subi	r22, 0x00	; 0
    4af2:	7c 4e       	sbci	r23, 0xEC	; 236
    4af4:	0c 94 b3 25 	jmp	0x4b66	; 0x4b66 <memcpy>

00004af8 <eeprom_update_block>:
    4af8:	dc 01       	movw	r26, r24
    4afa:	a4 0f       	add	r26, r20
    4afc:	b5 1f       	adc	r27, r21
    4afe:	41 50       	subi	r20, 0x01	; 1
    4b00:	50 40       	sbci	r21, 0x00	; 0
    4b02:	48 f0       	brcs	.+18     	; 0x4b16 <eeprom_update_block+0x1e>
    4b04:	cb 01       	movw	r24, r22
    4b06:	84 0f       	add	r24, r20
    4b08:	95 1f       	adc	r25, r21
    4b0a:	2e 91       	ld	r18, -X
    4b0c:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <eeprom_update_r18>
    4b10:	41 50       	subi	r20, 0x01	; 1
    4b12:	50 40       	sbci	r21, 0x00	; 0
    4b14:	d0 f7       	brcc	.-12     	; 0x4b0a <eeprom_update_block+0x12>
    4b16:	08 95       	ret

00004b18 <eeprom_update_byte>:
    4b18:	26 2f       	mov	r18, r22

00004b1a <eeprom_update_r18>:
    4b1a:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <eeprom_mapen>
    4b1e:	00 80       	ld	r0, Z
    4b20:	02 16       	cp	r0, r18
    4b22:	19 f0       	breq	.+6      	; 0x4b2a <eeprom_update_r18+0x10>
    4b24:	0e 94 98 25 	call	0x4b30	; 0x4b30 <eeprom_write_r18>
    4b28:	01 97       	sbiw	r24, 0x01	; 1
    4b2a:	01 97       	sbiw	r24, 0x01	; 1
    4b2c:	08 95       	ret

00004b2e <eeprom_write_byte>:
    4b2e:	26 2f       	mov	r18, r22

00004b30 <eeprom_write_r18>:
    4b30:	af 93       	push	r26
    4b32:	bf 93       	push	r27
    4b34:	e0 e0       	ldi	r30, 0x00	; 0
    4b36:	f0 e1       	ldi	r31, 0x10	; 16
    4b38:	32 81       	ldd	r19, Z+2	; 0x02
    4b3a:	31 fd       	sbrc	r19, 1
    4b3c:	fd cf       	rjmp	.-6      	; 0x4b38 <eeprom_write_r18+0x8>
    4b3e:	dc 01       	movw	r26, r24
    4b40:	a0 50       	subi	r26, 0x00	; 0
    4b42:	bc 4e       	sbci	r27, 0xEC	; 236
    4b44:	2c 93       	st	X, r18
    4b46:	2d e9       	ldi	r18, 0x9D	; 157
    4b48:	24 bf       	out	0x34, r18	; 52
    4b4a:	23 e0       	ldi	r18, 0x03	; 3
    4b4c:	20 83       	st	Z, r18
    4b4e:	01 96       	adiw	r24, 0x01	; 1
    4b50:	bf 91       	pop	r27
    4b52:	af 91       	pop	r26
    4b54:	08 95       	ret

00004b56 <eeprom_read_byte>:
    4b56:	03 d0       	rcall	.+6      	; 0x4b5e <eeprom_mapen>
    4b58:	80 81       	ld	r24, Z
    4b5a:	99 27       	eor	r25, r25
    4b5c:	08 95       	ret

00004b5e <eeprom_mapen>:
    4b5e:	fc 01       	movw	r30, r24
    4b60:	e0 50       	subi	r30, 0x00	; 0
    4b62:	fc 4e       	sbci	r31, 0xEC	; 236
    4b64:	08 95       	ret

00004b66 <memcpy>:
    4b66:	fb 01       	movw	r30, r22
    4b68:	dc 01       	movw	r26, r24
    4b6a:	02 c0       	rjmp	.+4      	; 0x4b70 <memcpy+0xa>
    4b6c:	01 90       	ld	r0, Z+
    4b6e:	0d 92       	st	X+, r0
    4b70:	41 50       	subi	r20, 0x01	; 1
    4b72:	50 40       	sbci	r21, 0x00	; 0
    4b74:	d8 f7       	brcc	.-10     	; 0x4b6c <memcpy+0x6>
    4b76:	08 95       	ret

00004b78 <_exit>:
    4b78:	f8 94       	cli

00004b7a <__stop_program>:
    4b7a:	ff cf       	rjmp	.-2      	; 0x4b7a <__stop_program>
