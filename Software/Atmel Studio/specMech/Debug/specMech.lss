
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  000044df  00004593  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000427e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000261  0000827e  0000427e  00004332  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000008a6  00802802  00802802  00004595  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00004595  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000045f4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000628  00000000  00000000  00004638  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a62d  00000000  00000000  00004c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000048d9  00000000  00000000  0000f28d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000042e6  00000000  00000000  00013b66  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000e5c  00000000  00000000  00017e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002265  00000000  00000000  00018ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003f29  00000000  00000000  0001af0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000388  00000000  00000000  0001ee36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 29 01 	jmp	0x252	; 0x252 <__ctors_end>
       4:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
       8:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
       c:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__vector_3>
      10:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      14:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      18:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      1c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      20:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      24:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      28:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      2c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      30:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__vector_12>
      34:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      38:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      3c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      40:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      44:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__vector_17>
      48:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__vector_18>
      4c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      50:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <__vector_20>
      54:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      58:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      5c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      60:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      64:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      68:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__vector_26>
      6c:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__vector_27>
      70:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      74:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__vector_29>
      78:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      7c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      80:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      84:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      88:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      8c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      90:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      94:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__vector_37>
      98:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__vector_38>
      9c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      a0:	87 04       	cpc	r8, r7
      a2:	95 04       	cpc	r9, r5
      a4:	95 04       	cpc	r9, r5
      a6:	95 04       	cpc	r9, r5
      a8:	95 04       	cpc	r9, r5
      aa:	95 04       	cpc	r9, r5
      ac:	95 04       	cpc	r9, r5
      ae:	95 04       	cpc	r9, r5
      b0:	95 04       	cpc	r9, r5
      b2:	95 04       	cpc	r9, r5
      b4:	95 04       	cpc	r9, r5
      b6:	95 04       	cpc	r9, r5
      b8:	95 04       	cpc	r9, r5
      ba:	95 04       	cpc	r9, r5
      bc:	95 04       	cpc	r9, r5
      be:	95 04       	cpc	r9, r5
      c0:	95 04       	cpc	r9, r5
      c2:	6d 04       	cpc	r6, r13
      c4:	95 04       	cpc	r9, r5
      c6:	95 04       	cpc	r9, r5
      c8:	95 04       	cpc	r9, r5
      ca:	95 04       	cpc	r9, r5
      cc:	95 04       	cpc	r9, r5
      ce:	95 04       	cpc	r9, r5
      d0:	95 04       	cpc	r9, r5
      d2:	95 04       	cpc	r9, r5
      d4:	95 04       	cpc	r9, r5
      d6:	77 04       	cpc	r7, r7
      d8:	95 04       	cpc	r9, r5
      da:	72 04       	cpc	r7, r2
      dc:	95 04       	cpc	r9, r5
      de:	95 04       	cpc	r9, r5
      e0:	7b 04       	cpc	r7, r11
      e2:	7f 04       	cpc	r7, r15
      e4:	83 04       	cpc	r8, r3
      e6:	f3 12       	cpse	r15, r19
      e8:	f3 12       	cpse	r15, r19
      ea:	63 0e       	add	r6, r19
      ec:	63 0e       	add	r6, r19
      ee:	63 0e       	add	r6, r19
      f0:	63 0e       	add	r6, r19
      f2:	63 0e       	add	r6, r19
      f4:	63 0e       	add	r6, r19
      f6:	63 0e       	add	r6, r19
      f8:	63 0e       	add	r6, r19
      fa:	63 0e       	add	r6, r19
      fc:	63 0e       	add	r6, r19
      fe:	63 0e       	add	r6, r19
     100:	63 0e       	add	r6, r19
     102:	63 0e       	add	r6, r19
     104:	63 0e       	add	r6, r19
     106:	63 0e       	add	r6, r19
     108:	63 0e       	add	r6, r19
     10a:	63 0e       	add	r6, r19
     10c:	63 0e       	add	r6, r19
     10e:	a0 12       	cpse	r10, r16
     110:	63 0e       	add	r6, r19
     112:	63 0e       	add	r6, r19
     114:	63 0e       	add	r6, r19
     116:	63 0e       	add	r6, r19
     118:	63 0e       	add	r6, r19
     11a:	63 0e       	add	r6, r19
     11c:	63 0e       	add	r6, r19
     11e:	63 0e       	add	r6, r19
     120:	63 0e       	add	r6, r19
     122:	63 0e       	add	r6, r19
     124:	65 0e       	add	r6, r21
     126:	65 0e       	add	r6, r21
     128:	65 0e       	add	r6, r21
     12a:	63 0e       	add	r6, r19
     12c:	03 0f       	add	r16, r19
     12e:	63 0e       	add	r6, r19
     130:	63 0e       	add	r6, r19
     132:	63 0e       	add	r6, r19
     134:	63 0e       	add	r6, r19
     136:	63 0e       	add	r6, r19
     138:	63 0e       	add	r6, r19
     13a:	63 0e       	add	r6, r19
     13c:	63 0e       	add	r6, r19
     13e:	63 0e       	add	r6, r19
     140:	3c 10       	cpse	r3, r12
     142:	2b 11       	cpse	r18, r11
     144:	63 0e       	add	r6, r19
     146:	63 0e       	add	r6, r19
     148:	63 0e       	add	r6, r19
     14a:	ca 11       	cpse	r28, r10
     14c:	63 0e       	add	r6, r19
     14e:	2a 12       	cpse	r2, r26

00000150 <__trampolines_end>:
     150:	6e 61       	ori	r22, 0x1E	; 30
     152:	6e 00       	.word	0x006e	; ????

00000154 <__c.2332>:
     154:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     164:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     174:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     184:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     194:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1a4:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1b4:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1c4:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1d4:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1e4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1f4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     204:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     214:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     224:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     234:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     244:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000252 <__ctors_end>:
     252:	11 24       	eor	r1, r1
     254:	1f be       	out	0x3f, r1	; 63
     256:	cf ef       	ldi	r28, 0xFF	; 255
     258:	cd bf       	out	0x3d, r28	; 61
     25a:	df e3       	ldi	r29, 0x3F	; 63
     25c:	de bf       	out	0x3e, r29	; 62

0000025e <__do_copy_data>:
     25e:	18 e2       	ldi	r17, 0x28	; 40
     260:	a0 e0       	ldi	r26, 0x00	; 0
     262:	b8 e2       	ldi	r27, 0x28	; 40
     264:	ef ed       	ldi	r30, 0xDF	; 223
     266:	f4 e4       	ldi	r31, 0x44	; 68
     268:	02 c0       	rjmp	.+4      	; 0x26e <__do_copy_data+0x10>
     26a:	05 90       	lpm	r0, Z+
     26c:	0d 92       	st	X+, r0
     26e:	a2 30       	cpi	r26, 0x02	; 2
     270:	b1 07       	cpc	r27, r17
     272:	d9 f7       	brne	.-10     	; 0x26a <__do_copy_data+0xc>

00000274 <__do_clear_bss>:
     274:	20 e3       	ldi	r18, 0x30	; 48
     276:	a2 e0       	ldi	r26, 0x02	; 2
     278:	b8 e2       	ldi	r27, 0x28	; 40
     27a:	01 c0       	rjmp	.+2      	; 0x27e <.do_clear_bss_start>

0000027c <.do_clear_bss_loop>:
     27c:	1d 92       	st	X+, r1

0000027e <.do_clear_bss_start>:
     27e:	a8 3a       	cpi	r26, 0xA8	; 168
     280:	b2 07       	cpc	r27, r18
     282:	e1 f7       	brne	.-8      	; 0x27c <.do_clear_bss_loop>
     284:	0e 94 cd 07 	call	0xf9a	; 0xf9a <main>
     288:	0c 94 3d 21 	jmp	0x427a	; 0x427a <_exit>

0000028c <__bad_interrupt>:
     28c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000290 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
float read_AD590(uint8_t sensor)
{
     290:	cf 92       	push	r12
     292:	df 92       	push	r13
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
     298:	cf 93       	push	r28

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     29a:	81 30       	cpi	r24, 0x01	; 1
     29c:	c9 f0       	breq	.+50     	; 0x2d0 <read_AD590+0x40>
     29e:	18 f0       	brcs	.+6      	; 0x2a6 <read_AD590+0x16>
     2a0:	82 30       	cpi	r24, 0x02	; 2
     2a2:	61 f0       	breq	.+24     	; 0x2bc <read_AD590+0x2c>
     2a4:	10 c0       	rjmp	.+32     	; 0x2c6 <read_AD590+0x36>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     2a6:	0f 2e       	mov	r0, r31
     2a8:	f3 e3       	ldi	r31, 0x33	; 51
     2aa:	cf 2e       	mov	r12, r31
     2ac:	dc 2c       	mov	r13, r12
     2ae:	f3 ef       	ldi	r31, 0xF3	; 243
     2b0:	ef 2e       	mov	r14, r31
     2b2:	f0 e4       	ldi	r31, 0x40	; 64
     2b4:	ff 2e       	mov	r15, r31
     2b6:	f0 2d       	mov	r31, r0
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     2b8:	c1 e0       	ldi	r28, 0x01	; 1
     2ba:	0e c0       	rjmp	.+28     	; 0x2d8 <read_AD590+0x48>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     2bc:	c1 2c       	mov	r12, r1
     2be:	d1 2c       	mov	r13, r1
     2c0:	76 01       	movw	r14, r12
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     2c2:	c0 e1       	ldi	r28, 0x10	; 16
			offset = 0.0;
			break;
     2c4:	09 c0       	rjmp	.+18     	; 0x2d8 <read_AD590+0x48>
{

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
     2c6:	c1 2c       	mov	r12, r1
     2c8:	d1 2c       	mov	r13, r1
     2ca:	76 01       	movw	r14, r12
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2cc:	c0 e0       	ldi	r28, 0x00	; 0
			break;
     2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <read_AD590+0x48>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2d0:	c1 2c       	mov	r12, r1
     2d2:	d1 2c       	mov	r13, r1
     2d4:	76 01       	movw	r14, r12
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2d6:	c4 e0       	ldi	r28, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     2d8:	40 e0       	ldi	r20, 0x00	; 0
     2da:	66 e0       	ldi	r22, 0x06	; 6
     2dc:	87 e2       	ldi	r24, 0x27	; 39
     2de:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2e2:	4c 2f       	mov	r20, r28
     2e4:	40 95       	com	r20
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	87 e2       	ldi	r24, 0x27	; 39
     2ea:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     2ee:	4c 2f       	mov	r20, r28
     2f0:	6a e0       	ldi	r22, 0x0A	; 10
     2f2:	87 e2       	ldi	r24, 0x27	; 39
     2f4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f8:	86 e1       	ldi	r24, 0x16	; 22
     2fa:	8a 95       	dec	r24
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <read_AD590+0x6a>
     2fe:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	voltage = read_ADS1115(ADC_TE, PGA0512, AIN3, DR128);
     300:	20 e8       	ldi	r18, 0x80	; 128
     302:	40 e7       	ldi	r20, 0x70	; 112
     304:	68 e0       	ldi	r22, 0x08	; 8
     306:	88 e4       	ldi	r24, 0x48	; 72
     308:	0e 94 9e 01 	call	0x33c	; 0x33c <read_ADS1115>
	temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	4a e7       	ldi	r20, 0x7A	; 122
     312:	54 e4       	ldi	r21, 0x44	; 68
     314:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__mulsf3>
     318:	23 e3       	ldi	r18, 0x33	; 51
     31a:	33 e9       	ldi	r19, 0x93	; 147
     31c:	48 e8       	ldi	r20, 0x88	; 136
     31e:	53 e4       	ldi	r21, 0x43	; 67
     320:	0e 94 c2 18 	call	0x3184	; 0x3184 <__subsf3>
     324:	9b 01       	movw	r18, r22
     326:	ac 01       	movw	r20, r24
     328:	c7 01       	movw	r24, r14
     32a:	b6 01       	movw	r22, r12
     32c:	0e 94 c3 18 	call	0x3186	; 0x3186 <__addsf3>
	return(temperature);

}
     330:	cf 91       	pop	r28
     332:	ff 90       	pop	r15
     334:	ef 90       	pop	r14
     336:	df 90       	pop	r13
     338:	cf 90       	pop	r12
     33a:	08 95       	ret

0000033c <read_ADS1115>:
		datarate - one of the eight selectable data rates. We chose the
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
float read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins, uint8_t datarate)
{
     33c:	cf 92       	push	r12
     33e:	df 92       	push	r13
     340:	ef 92       	push	r14
     342:	ff 92       	push	r15
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	d8 2f       	mov	r29, r24
     34e:	f6 2e       	mov	r15, r22
	float scale, voltage;
	uint8_t confighi, configlo, retval, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     350:	46 2b       	or	r20, r22
     352:	c4 2f       	mov	r28, r20
     354:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     356:	12 2f       	mov	r17, r18
     358:	13 60       	ori	r17, 0x03	; 3

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start condition
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
     360:	08 2f       	mov	r16, r24
     362:	88 23       	and	r24, r24
     364:	69 f0       	breq	.+26     	; 0x380 <read_ADS1115+0x44>
		stop_TWI();
     366:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
		return(retval);
     36a:	60 2f       	mov	r22, r16
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 a6 19 	call	0x334c	; 0x334c <__floatunsisf>
     376:	56 2f       	mov	r21, r22
     378:	47 2f       	mov	r20, r23
     37a:	38 2f       	mov	r19, r24
     37c:	29 2f       	mov	r18, r25
     37e:	d0 c0       	rjmp	.+416    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
	}
	if ((retval = write_TWI(ADS1115CONFIG))) {		// Write the CONFIG register
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
     386:	08 2f       	mov	r16, r24
     388:	88 23       	and	r24, r24
     38a:	69 f0       	breq	.+26     	; 0x3a6 <read_ADS1115+0x6a>
		stop_TWI();
     38c:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
		return(retval);
     390:	60 2f       	mov	r22, r16
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 a6 19 	call	0x334c	; 0x334c <__floatunsisf>
     39c:	56 2f       	mov	r21, r22
     39e:	47 2f       	mov	r20, r23
     3a0:	38 2f       	mov	r19, r24
     3a2:	29 2f       	mov	r18, r25
     3a4:	bd c0       	rjmp	.+378    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
	}
	if ((retval = write_TWI(confighi))) {			// Write high byte
     3a6:	8c 2f       	mov	r24, r28
     3a8:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
     3ac:	c8 2f       	mov	r28, r24
     3ae:	88 23       	and	r24, r24
     3b0:	69 f0       	breq	.+26     	; 0x3cc <read_ADS1115+0x90>
		stop_TWI();
     3b2:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
		return(retval);
     3b6:	6c 2f       	mov	r22, r28
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 a6 19 	call	0x334c	; 0x334c <__floatunsisf>
     3c2:	56 2f       	mov	r21, r22
     3c4:	47 2f       	mov	r20, r23
     3c6:	38 2f       	mov	r19, r24
     3c8:	29 2f       	mov	r18, r25
     3ca:	aa c0       	rjmp	.+340    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
	}
	if ((retval = write_TWI(configlo))) {			// Write low byte
     3cc:	81 2f       	mov	r24, r17
     3ce:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
     3d2:	c8 2f       	mov	r28, r24
     3d4:	88 23       	and	r24, r24
     3d6:	69 f0       	breq	.+26     	; 0x3f2 <read_ADS1115+0xb6>
		stop_TWI();
     3d8:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
		return(retval);
     3dc:	6c 2f       	mov	r22, r28
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 a6 19 	call	0x334c	; 0x334c <__floatunsisf>
     3e8:	56 2f       	mov	r21, r22
     3ea:	47 2f       	mov	r20, r23
     3ec:	38 2f       	mov	r19, r24
     3ee:	29 2f       	mov	r18, r25
     3f0:	97 c0       	rjmp	.+302    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
	}
	stop_TWI();
     3f2:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
     3f6:	8c e1       	ldi	r24, 0x1C	; 28
     3f8:	8a 95       	dec	r24
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <read_ADS1115+0xbc>

	_delay_us(25);									// Power-up time

	converting = YES;
     3fc:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     3fe:	09 c0       	rjmp	.+18     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		start_TWI(addr, TWIREAD);
     400:	61 e0       	ldi	r22, 0x01	; 1
     402:	8d 2f       	mov	r24, r29
     404:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
     408:	0e 94 43 16 	call	0x2c86	; 0x2c86 <readlast_TWI>
		if (flag & 0b10000000) {			// or add a timer timeout
     40c:	88 23       	and	r24, r24
     40e:	0c f4       	brge	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			converting = NO;
     410:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     412:	c1 11       	cpse	r28, r1
     414:	f5 cf       	rjmp	.-22     	; 0x400 <__LOCK_REGION_LENGTH__>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
		if (flag & 0b10000000) {			// or add a timer timeout
			converting = NO;
		}
	}
	stop_TWI();
     416:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>

	start_TWI(addr, TWIWRITE);
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	8d 2f       	mov	r24, r29
     41e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     428:	61 e0       	ldi	r22, 0x01	; 1
     42a:	8d 2f       	mov	r24, r29
     42c:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
	highbyte = read_TWI();
     430:	0e 94 33 16 	call	0x2c66	; 0x2c66 <read_TWI>
     434:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     436:	0e 94 43 16 	call	0x2c86	; 0x2c86 <readlast_TWI>
     43a:	d8 2f       	mov	r29, r24
	stop_TWI();
     43c:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>

	value = highbyte;
     440:	6c 2f       	mov	r22, r28
     442:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     444:	76 2f       	mov	r23, r22
     446:	66 27       	eor	r22, r22
	value |= lowbyte;
     448:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     44a:	84 e0       	ldi	r24, 0x04	; 4
     44c:	f8 16       	cp	r15, r24
     44e:	49 f1       	breq	.+82     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     450:	8f 15       	cp	r24, r15
     452:	30 f0       	brcs	.+12     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     454:	ff 20       	and	r15, r15
     456:	d9 f1       	breq	.+118    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     458:	82 e0       	ldi	r24, 0x02	; 2
     45a:	f8 16       	cp	r15, r24
     45c:	69 f1       	breq	.+90     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     45e:	42 c0       	rjmp	.+132    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     460:	88 e0       	ldi	r24, 0x08	; 8
     462:	f8 16       	cp	r15, r24
     464:	09 f4       	brne	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     466:	42 c0       	rjmp	.+132    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     468:	8a e0       	ldi	r24, 0x0A	; 10
     46a:	f8 16       	cp	r15, r24
     46c:	21 f0       	breq	.+8      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     46e:	86 e0       	ldi	r24, 0x06	; 6
     470:	f8 12       	cpse	r15, r24
     472:	38 c0       	rjmp	.+112    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     474:	0b c0       	rjmp	.+22     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		case PGA0256:
			scale = SCA0256;
     476:	0f 2e       	mov	r0, r31
     478:	f4 e7       	ldi	r31, 0x74	; 116
     47a:	cf 2e       	mov	r12, r31
     47c:	f3 e1       	ldi	r31, 0x13	; 19
     47e:	df 2e       	mov	r13, r31
     480:	f3 e0       	ldi	r31, 0x03	; 3
     482:	ef 2e       	mov	r14, r31
     484:	f7 e3       	ldi	r31, 0x37	; 55
     486:	ff 2e       	mov	r15, r31
     488:	f0 2d       	mov	r31, r0
     48a:	3a c0       	rjmp	.+116    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     48c:	0f 2e       	mov	r0, r31
     48e:	f4 e7       	ldi	r31, 0x74	; 116
     490:	cf 2e       	mov	r12, r31
     492:	f3 e1       	ldi	r31, 0x13	; 19
     494:	df 2e       	mov	r13, r31
     496:	f3 e0       	ldi	r31, 0x03	; 3
     498:	ef 2e       	mov	r14, r31
     49a:	f8 e3       	ldi	r31, 0x38	; 56
     49c:	ff 2e       	mov	r15, r31
     49e:	f0 2d       	mov	r31, r0
			break;
     4a0:	2f c0       	rjmp	.+94     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		case PGA2048:
			scale = SCA2048;
     4a2:	0f 2e       	mov	r0, r31
     4a4:	f2 e1       	ldi	r31, 0x12	; 18
     4a6:	cf 2e       	mov	r12, r31
     4a8:	f3 e1       	ldi	r31, 0x13	; 19
     4aa:	df 2e       	mov	r13, r31
     4ac:	f3 e8       	ldi	r31, 0x83	; 131
     4ae:	ef 2e       	mov	r14, r31
     4b0:	f8 e3       	ldi	r31, 0x38	; 56
     4b2:	ff 2e       	mov	r15, r31
     4b4:	f0 2d       	mov	r31, r0
			break;
     4b6:	24 c0       	rjmp	.+72     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		case PGA4096:
			scale = SCA4096;
     4b8:	0f 2e       	mov	r0, r31
     4ba:	f4 e7       	ldi	r31, 0x74	; 116
     4bc:	cf 2e       	mov	r12, r31
     4be:	f3 e1       	ldi	r31, 0x13	; 19
     4c0:	df 2e       	mov	r13, r31
     4c2:	f3 e0       	ldi	r31, 0x03	; 3
     4c4:	ef 2e       	mov	r14, r31
     4c6:	f9 e3       	ldi	r31, 0x39	; 57
     4c8:	ff 2e       	mov	r15, r31
     4ca:	f0 2d       	mov	r31, r0
			break;
     4cc:	19 c0       	rjmp	.+50     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		case PGA6144:
			scale = SCA6144;
     4ce:	0f 2e       	mov	r0, r31
     4d0:	fe e2       	ldi	r31, 0x2E	; 46
     4d2:	cf 2e       	mov	r12, r31
     4d4:	fd e9       	ldi	r31, 0x9D	; 157
     4d6:	df 2e       	mov	r13, r31
     4d8:	f4 e4       	ldi	r31, 0x44	; 68
     4da:	ef 2e       	mov	r14, r31
     4dc:	f9 e3       	ldi	r31, 0x39	; 57
     4de:	ff 2e       	mov	r15, r31
     4e0:	f0 2d       	mov	r31, r0
			break;
     4e2:	0e c0       	rjmp	.+28     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		default:
			scale = 0.0;
     4e4:	c1 2c       	mov	r12, r1
     4e6:	d1 2c       	mov	r13, r1
     4e8:	76 01       	movw	r14, r12
			break;
     4ea:	0a c0       	rjmp	.+20     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     4ec:	0f 2e       	mov	r0, r31
     4ee:	f1 e7       	ldi	r31, 0x71	; 113
     4f0:	cf 2e       	mov	r12, r31
     4f2:	f3 e1       	ldi	r31, 0x13	; 19
     4f4:	df 2e       	mov	r13, r31
     4f6:	f3 e8       	ldi	r31, 0x83	; 131
     4f8:	ef 2e       	mov	r14, r31
     4fa:	f7 e3       	ldi	r31, 0x37	; 55
     4fc:	ff 2e       	mov	r15, r31
     4fe:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	voltage = scale * (float) value;
     500:	07 2e       	mov	r0, r23
     502:	00 0c       	add	r0, r0
     504:	88 0b       	sbc	r24, r24
     506:	99 0b       	sbc	r25, r25
     508:	0e 94 a8 19 	call	0x3350	; 0x3350 <__floatsisf>
     50c:	9b 01       	movw	r18, r22
     50e:	ac 01       	movw	r20, r24
     510:	c7 01       	movw	r24, r14
     512:	b6 01       	movw	r22, r12
     514:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__mulsf3>
	return(voltage);
     518:	56 2f       	mov	r21, r22
     51a:	47 2f       	mov	r20, r23
     51c:	38 2f       	mov	r19, r24
     51e:	29 2f       	mov	r18, r25

}
     520:	65 2f       	mov	r22, r21
     522:	74 2f       	mov	r23, r20
     524:	83 2f       	mov	r24, r19
     526:	92 2f       	mov	r25, r18
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	ff 90       	pop	r15
     532:	ef 90       	pop	r14
     534:	df 90       	pop	r13
     536:	cf 90       	pop	r12
     538:	08 95       	ret

0000053a <init_BEEPER>:
#include "globals.h"

void init_BEEPER(void)
{

	PORTB.OUTSET = PIN2_bm;
     53a:	e0 e2       	ldi	r30, 0x20	; 32
     53c:	f4 e0       	ldi	r31, 0x04	; 4
     53e:	84 e0       	ldi	r24, 0x04	; 4
     540:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     542:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = PIN2_bm;
     544:	86 83       	std	Z+6, r24	; 0x06
     546:	08 95       	ret

00000548 <echo_cmd>:
{
	if ((d >= '0') && (d <= '9')) {
		return(1);
	}
	return(0);
}
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	c4 51       	subi	r28, 0x14	; 20
     556:	d1 40       	sbci	r29, 0x01	; 1
     558:	cd bf       	out	0x3d, r28	; 61
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	2b e0       	ldi	r18, 0x0B	; 11
     55e:	ee e7       	ldi	r30, 0x7E	; 126
     560:	f2 e8       	ldi	r31, 0x82	; 130
     562:	de 01       	movw	r26, r28
     564:	11 96       	adiw	r26, 0x01	; 1
     566:	01 90       	ld	r0, Z+
     568:	0d 92       	st	X+, r0
     56a:	2a 95       	dec	r18
     56c:	e1 f7       	brne	.-8      	; 0x566 <echo_cmd+0x1e>
     56e:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     572:	22 ff       	sbrs	r18, 2
     574:	03 c0       	rjmp	.+6      	; 0x57c <echo_cmd+0x34>
     576:	22 e0       	ldi	r18, 0x02	; 2
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	02 c0       	rjmp	.+4      	; 0x580 <echo_cmd+0x38>
     57c:	21 e0       	ldi	r18, 0x01	; 1
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	9f 93       	push	r25
     582:	8f 93       	push	r24
     584:	3f 93       	push	r19
     586:	2f 93       	push	r18
     588:	ce 01       	movw	r24, r28
     58a:	01 96       	adiw	r24, 0x01	; 1
     58c:	9f 93       	push	r25
     58e:	8f 93       	push	r24
     590:	8e 01       	movw	r16, r28
     592:	04 5f       	subi	r16, 0xF4	; 244
     594:	1f 4f       	sbci	r17, 0xFF	; 255
     596:	1f 93       	push	r17
     598:	0f 93       	push	r16
     59a:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
     59e:	c8 01       	movw	r24, r16
     5a0:	0e 94 91 09 	call	0x1322	; 0x1322 <checksum_NMEA>
     5a4:	f8 01       	movw	r30, r16
     5a6:	01 90       	ld	r0, Z+
     5a8:	00 20       	and	r0, r0
     5aa:	e9 f7       	brne	.-6      	; 0x5a6 <echo_cmd+0x5e>
     5ac:	31 97       	sbiw	r30, 0x01	; 1
     5ae:	af 01       	movw	r20, r30
     5b0:	40 1b       	sub	r20, r16
     5b2:	51 0b       	sbc	r21, r17
     5b4:	b8 01       	movw	r22, r16
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	0e 94 e7 16 	call	0x2dce	; 0x2dce <send_USART>
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	cc 5e       	subi	r28, 0xEC	; 236
     5c2:	de 4f       	sbci	r29, 0xFE	; 254
     5c4:	cd bf       	out	0x3d, r28	; 61
     5c6:	de bf       	out	0x3e, r29	; 62
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	08 95       	ret

000005d2 <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     5d2:	9f e9       	ldi	r25, 0x9F	; 159
     5d4:	98 0f       	add	r25, r24
     5d6:	9a 31       	cpi	r25, 0x1A	; 26
     5d8:	28 f0       	brcs	.+10     	; 0x5e4 <isaletter+0x12>
     5da:	81 54       	subi	r24, 0x41	; 65
     5dc:	8a 31       	cpi	r24, 0x1A	; 26
     5de:	20 f4       	brcc	.+8      	; 0x5e8 <isaletter+0x16>
		return(1);
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	08 95       	ret
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	08 95       	ret
	}
	return(0);
     5e8:	80 e0       	ldi	r24, 0x00	; 0

}
     5ea:	08 95       	ret

000005ec <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     5f8:	e6 2e       	mov	r14, r22
     5fa:	f1 2c       	mov	r15, r1
     5fc:	84 e3       	ldi	r24, 0x34	; 52
     5fe:	8e 9d       	mul	r24, r14
     600:	f0 01       	movw	r30, r0
     602:	8f 9d       	mul	r24, r15
     604:	f0 0d       	add	r31, r0
     606:	11 24       	eor	r1, r1
     608:	e3 58       	subi	r30, 0x83	; 131
     60a:	f7 4d       	sbci	r31, 0xD7	; 215
     60c:	8f e3       	ldi	r24, 0x3F	; 63
     60e:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     610:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     612:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     614:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {
     616:	04 c0       	rjmp	.+8      	; 0x620 <parse_cmd+0x34>
		if (*ptr == '\0') {
     618:	11 23       	and	r17, r17
     61a:	09 f4       	brne	.+2      	; 0x61e <parse_cmd+0x32>
     61c:	75 c0       	rjmp	.+234    	; 0x708 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     61e:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {
     620:	18 81       	ld	r17, Y
     622:	81 2f       	mov	r24, r17
     624:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <isaletter>
     628:	88 23       	and	r24, r24
     62a:	b1 f3       	breq	.-20     	; 0x618 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     62c:	21 96       	adiw	r28, 0x01	; 1
     62e:	84 e3       	ldi	r24, 0x34	; 52
     630:	8e 9d       	mul	r24, r14
     632:	f0 01       	movw	r30, r0
     634:	8f 9d       	mul	r24, r15
     636:	f0 0d       	add	r31, r0
     638:	11 24       	eor	r1, r1
     63a:	e3 58       	subi	r30, 0x83	; 131
     63c:	f7 4d       	sbci	r31, 0xD7	; 215
     63e:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {
     640:	04 c0       	rjmp	.+8      	; 0x64a <parse_cmd+0x5e>
		if (*ptr == '\0') {
     642:	11 23       	and	r17, r17
     644:	09 f4       	brne	.+2      	; 0x648 <parse_cmd+0x5c>
     646:	60 c0       	rjmp	.+192    	; 0x708 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     648:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {
     64a:	18 81       	ld	r17, Y
     64c:	81 2f       	mov	r24, r17
     64e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <isaletter>
     652:	88 23       	and	r24, r24
     654:	b1 f3       	breq	.-20     	; 0x642 <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     656:	21 96       	adiw	r28, 0x01	; 1
     658:	84 e3       	ldi	r24, 0x34	; 52
     65a:	8e 9d       	mul	r24, r14
     65c:	f0 01       	movw	r30, r0
     65e:	8f 9d       	mul	r24, r15
     660:	f0 0d       	add	r31, r0
     662:	11 24       	eor	r1, r1
     664:	e3 58       	subi	r30, 0x83	; 131
     666:	f7 4d       	sbci	r31, 0xD7	; 215
     668:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	2a c0       	rjmp	.+84     	; 0x6c2 <parse_cmd+0xd6>
		if (*ptr == '\0') {
     66e:	98 81       	ld	r25, Y
     670:	91 11       	cpse	r25, r1
     672:	0c c0       	rjmp	.+24     	; 0x68c <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     674:	94 e3       	ldi	r25, 0x34	; 52
     676:	9e 9d       	mul	r25, r14
     678:	f0 01       	movw	r30, r0
     67a:	9f 9d       	mul	r25, r15
     67c:	f0 0d       	add	r31, r0
     67e:	11 24       	eor	r1, r1
     680:	e3 58       	subi	r30, 0x83	; 131
     682:	f7 4d       	sbci	r31, 0xD7	; 215
     684:	e8 0f       	add	r30, r24
     686:	f1 1d       	adc	r31, r1
     688:	12 82       	std	Z+2, r1	; 0x02
			return;
     68a:	3e c0       	rjmp	.+124    	; 0x708 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {
     68c:	9b 33       	cpi	r25, 0x3B	; 59
     68e:	61 f4       	brne	.+24     	; 0x6a8 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     690:	94 e3       	ldi	r25, 0x34	; 52
     692:	9e 9d       	mul	r25, r14
     694:	f0 01       	movw	r30, r0
     696:	9f 9d       	mul	r25, r15
     698:	f0 0d       	add	r31, r0
     69a:	11 24       	eor	r1, r1
     69c:	e3 58       	subi	r30, 0x83	; 131
     69e:	f7 4d       	sbci	r31, 0xD7	; 215
     6a0:	e8 0f       	add	r30, r24
     6a2:	f1 1d       	adc	r31, r1
     6a4:	12 82       	std	Z+2, r1	; 0x02
			break;
     6a6:	0f c0       	rjmp	.+30     	; 0x6c6 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     6a8:	21 96       	adiw	r28, 0x01	; 1
     6aa:	24 e3       	ldi	r18, 0x34	; 52
     6ac:	2e 9d       	mul	r18, r14
     6ae:	f0 01       	movw	r30, r0
     6b0:	2f 9d       	mul	r18, r15
     6b2:	f0 0d       	add	r31, r0
     6b4:	11 24       	eor	r1, r1
     6b6:	e3 58       	subi	r30, 0x83	; 131
     6b8:	f7 4d       	sbci	r31, 0xD7	; 215
     6ba:	e8 0f       	add	r30, r24
     6bc:	f1 1d       	adc	r31, r1
     6be:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6c0:	8f 5f       	subi	r24, 0xFF	; 255
     6c2:	89 32       	cpi	r24, 0x29	; 41
     6c4:	a0 f2       	brcs	.-88     	; 0x66e <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
     6c6:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	1c c0       	rjmp	.+56     	; 0x704 <parse_cmd+0x118>
		if (*ptr == '\0') {
     6cc:	98 81       	ld	r25, Y
     6ce:	91 11       	cpse	r25, r1
     6d0:	0c c0       	rjmp	.+24     	; 0x6ea <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     6d2:	94 e3       	ldi	r25, 0x34	; 52
     6d4:	9e 9d       	mul	r25, r14
     6d6:	f0 01       	movw	r30, r0
     6d8:	9f 9d       	mul	r25, r15
     6da:	f0 0d       	add	r31, r0
     6dc:	11 24       	eor	r1, r1
     6de:	e3 58       	subi	r30, 0x83	; 131
     6e0:	f7 4d       	sbci	r31, 0xD7	; 215
     6e2:	e8 0f       	add	r30, r24
     6e4:	f1 1d       	adc	r31, r1
     6e6:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     6e8:	0f c0       	rjmp	.+30     	; 0x708 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     6ea:	21 96       	adiw	r28, 0x01	; 1
     6ec:	24 e3       	ldi	r18, 0x34	; 52
     6ee:	2e 9d       	mul	r18, r14
     6f0:	f0 01       	movw	r30, r0
     6f2:	2f 9d       	mul	r18, r15
     6f4:	f0 0d       	add	r31, r0
     6f6:	11 24       	eor	r1, r1
     6f8:	e3 58       	subi	r30, 0x83	; 131
     6fa:	f7 4d       	sbci	r31, 0xD7	; 215
     6fc:	e8 0f       	add	r30, r24
     6fe:	f1 1d       	adc	r31, r1
     700:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     702:	8f 5f       	subi	r24, 0xFF	; 255
     704:	89 30       	cpi	r24, 0x09	; 9
     706:	10 f3       	brcs	.-60     	; 0x6cc <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	08 95       	ret

00000714 <send_prompt>:

	If specMech is rebooted, it will only prompt with a single exclamation
	point (!) until it receives an acknowledgment in the form of a single !.
------------------------------------------------------------------------------*/
void send_prompt(uint8_t prompt_flag)
{
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	6d 97       	sbiw	r28, 0x1d	; 29
     722:	cd bf       	out	0x3d, r28	; 61
     724:	de bf       	out	0x3e, r29	; 62

	const char str0[] = ">";
     726:	2e e3       	ldi	r18, 0x3E	; 62
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	29 83       	std	Y+1, r18	; 0x01
     72c:	3a 83       	std	Y+2, r19	; 0x02
	const char str1[] = "!";
     72e:	21 e2       	ldi	r18, 0x21	; 33
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	2b 83       	std	Y+3, r18	; 0x03
     734:	3c 83       	std	Y+4, r19	; 0x04

	char prompt_str[25];

	switch (prompt_flag) {
     736:	88 23       	and	r24, r24
     738:	19 f0       	breq	.+6      	; 0x740 <send_prompt+0x2c>
     73a:	81 30       	cpi	r24, 0x01	; 1
     73c:	b9 f0       	breq	.+46     	; 0x76c <send_prompt+0x58>
     73e:	2c c0       	rjmp	.+88     	; 0x798 <send_prompt+0x84>
		case GREATERPROMPT:
			strcpy(prompt_str, str0);
     740:	8e 01       	movw	r16, r28
     742:	0b 5f       	subi	r16, 0xFB	; 251
     744:	1f 4f       	sbci	r17, 0xFF	; 255
     746:	be 01       	movw	r22, r28
     748:	6f 5f       	subi	r22, 0xFF	; 255
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
     74c:	c8 01       	movw	r24, r16
     74e:	0e 94 16 20 	call	0x402c	; 0x402c <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     752:	f8 01       	movw	r30, r16
     754:	01 90       	ld	r0, Z+
     756:	00 20       	and	r0, r0
     758:	e9 f7       	brne	.-6      	; 0x754 <send_prompt+0x40>
     75a:	31 97       	sbiw	r30, 0x01	; 1
     75c:	af 01       	movw	r20, r30
     75e:	40 1b       	sub	r20, r16
     760:	51 0b       	sbc	r21, r17
     762:	b8 01       	movw	r22, r16
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	0e 94 e7 16 	call	0x2dce	; 0x2dce <send_USART>
			break;
     76a:	2b c0       	rjmp	.+86     	; 0x7c2 <send_prompt+0xae>
			strcpy(prompt_str, str0);
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
			break;
*/
		case EXCLAIMPROMPT:
			strcpy(prompt_str, str1);
     76c:	8e 01       	movw	r16, r28
     76e:	0b 5f       	subi	r16, 0xFB	; 251
     770:	1f 4f       	sbci	r17, 0xFF	; 255
     772:	be 01       	movw	r22, r28
     774:	6d 5f       	subi	r22, 0xFD	; 253
     776:	7f 4f       	sbci	r23, 0xFF	; 255
     778:	c8 01       	movw	r24, r16
     77a:	0e 94 16 20 	call	0x402c	; 0x402c <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     77e:	f8 01       	movw	r30, r16
     780:	01 90       	ld	r0, Z+
     782:	00 20       	and	r0, r0
     784:	e9 f7       	brne	.-6      	; 0x780 <send_prompt+0x6c>
     786:	31 97       	sbiw	r30, 0x01	; 1
     788:	af 01       	movw	r20, r30
     78a:	40 1b       	sub	r20, r16
     78c:	51 0b       	sbc	r21, r17
     78e:	b8 01       	movw	r22, r16
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	0e 94 e7 16 	call	0x2dce	; 0x2dce <send_USART>
			break;
     796:	15 c0       	rjmp	.+42     	; 0x7c2 <send_prompt+0xae>

		default:
			strcpy(prompt_str, str1);
     798:	8e 01       	movw	r16, r28
     79a:	0b 5f       	subi	r16, 0xFB	; 251
     79c:	1f 4f       	sbci	r17, 0xFF	; 255
     79e:	be 01       	movw	r22, r28
     7a0:	6d 5f       	subi	r22, 0xFD	; 253
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
     7a4:	c8 01       	movw	r24, r16
     7a6:	0e 94 16 20 	call	0x402c	; 0x402c <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     7aa:	f8 01       	movw	r30, r16
     7ac:	01 90       	ld	r0, Z+
     7ae:	00 20       	and	r0, r0
     7b0:	e9 f7       	brne	.-6      	; 0x7ac <send_prompt+0x98>
     7b2:	31 97       	sbiw	r30, 0x01	; 1
     7b4:	af 01       	movw	r20, r30
     7b6:	40 1b       	sub	r20, r16
     7b8:	51 0b       	sbc	r21, r17
     7ba:	b8 01       	movw	r22, r16
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	0e 94 e7 16 	call	0x2dce	; 0x2dce <send_USART>
			break;

	}

}
     7c2:	6d 96       	adiw	r28, 0x1d	; 29
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	08 95       	ret

000007d2 <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	cf 5f       	subi	r28, 0xFF	; 255
     7e0:	d1 09       	sbc	r29, r1
     7e2:	cd bf       	out	0x3d, r28	; 61
     7e4:	de bf       	out	0x3e, r29	; 62
	uint8_t i, prompt_flag = GREATERPROMPT;
	static uint8_t rebootnack = 1;
	static uint8_t cstack = 0;		// Index for pcmd

	// Copy the command string to cmdline
	for (i = 0; recv0_buf.length; i++) {
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	1d c0       	rjmp	.+58     	; 0x824 <commands+0x52>
		cmdline[i] = recv0_buf.data[recv0_buf.tail];
     7ea:	0f e8       	ldi	r16, 0x8F	; 143
     7ec:	1c e2       	ldi	r17, 0x2C	; 44
     7ee:	f8 01       	movw	r30, r16
     7f0:	80 81       	ld	r24, Z
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	fc 01       	movw	r30, r24
     7f6:	e1 57       	subi	r30, 0x71	; 113
     7f8:	f4 4d       	sbci	r31, 0xD4	; 212
     7fa:	40 81       	ld	r20, Z
     7fc:	e1 e0       	ldi	r30, 0x01	; 1
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	ec 0f       	add	r30, r28
     802:	fd 1f       	adc	r31, r29
     804:	e3 0f       	add	r30, r19
     806:	f1 1d       	adc	r31, r1
     808:	40 83       	st	Z, r20
		recv0_buf.length--;
     80a:	21 50       	subi	r18, 0x01	; 1
     80c:	20 93 91 2c 	sts	0x2C91, r18	; 0x802c91 <recv0_buf+0x102>
		recv0_buf.tail = (recv0_buf.tail + 1) % BUFSIZE;
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	6f ef       	ldi	r22, 0xFF	; 255
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__divmodhi4>
     81a:	f8 01       	movw	r30, r16
     81c:	80 83       	st	Z, r24
		if (cmdline[i] == '\0') {
     81e:	44 23       	and	r20, r20
     820:	29 f0       	breq	.+10     	; 0x82c <commands+0x5a>
	uint8_t i, prompt_flag = GREATERPROMPT;
	static uint8_t rebootnack = 1;
	static uint8_t cstack = 0;		// Index for pcmd

	// Copy the command string to cmdline
	for (i = 0; recv0_buf.length; i++) {
     822:	3f 5f       	subi	r19, 0xFF	; 255
     824:	20 91 91 2c 	lds	r18, 0x2C91	; 0x802c91 <recv0_buf+0x102>
     828:	21 11       	cpse	r18, r1
     82a:	df cf       	rjmp	.-66     	; 0x7ea <commands+0x18>
		recv0_buf.tail = (recv0_buf.tail + 1) % BUFSIZE;
		if (cmdline[i] == '\0') {
			break;
		}
	}
	cmdline[i] = '\0';		// Overflow protection
     82c:	e1 e0       	ldi	r30, 0x01	; 1
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	ec 0f       	add	r30, r28
     832:	fd 1f       	adc	r31, r29
     834:	e3 0f       	add	r30, r19
     836:	f1 1d       	adc	r31, r1
     838:	10 82       	st	Z, r1
	if (rebootnack) {
     83a:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     83e:	88 23       	and	r24, r24
     840:	29 f1       	breq	.+74     	; 0x88c <commands+0xba>
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	81 32       	cpi	r24, 0x21	; 33
     846:	99 f4       	brne	.+38     	; 0x86e <commands+0x9c>
     848:	9a 81       	ldd	r25, Y+2	; 0x02
     84a:	91 11       	cpse	r25, r1
     84c:	10 c0       	rjmp	.+32     	; 0x86e <commands+0x9c>
			init_RTC(511);		// 1-sec RTC clock ticks
     84e:	8f ef       	ldi	r24, 0xFF	; 255
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (min)
     856:	85 e0       	ldi	r24, 0x05	; 5
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	80 93 87 2a 	sts	0x2A87, r24	; 0x802a87 <timeoutOLED>
     85e:	90 93 88 2a 	sts	0x2A88, r25	; 0x802a88 <timeoutOLED+0x1>
			send_prompt(GREATERPROMPT);
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	0e 94 8a 03 	call	0x714	; 0x714 <send_prompt>
			rebootnack = 0;
     868:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
			return;
     86c:	6c c0       	rjmp	.+216    	; 0x946 <commands+0x174>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     86e:	81 32       	cpi	r24, 0x21	; 33
     870:	49 f4       	brne	.+18     	; 0x884 <commands+0xb2>
     872:	8a 81       	ldd	r24, Y+2	; 0x02
     874:	88 23       	and	r24, r24
     876:	31 f0       	breq	.+12     	; 0x884 <commands+0xb2>
			send_prompt(EXCLAIMPROMPT);
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	0e 94 8a 03 	call	0x714	; 0x714 <send_prompt>
			reboot();
     87e:	0e 94 ac 18 	call	0x3158	; 0x3158 <reboot>
			return;
     882:	61 c0       	rjmp	.+194    	; 0x946 <commands+0x174>
		} else {
			send_prompt(EXCLAIMPROMPT);
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	0e 94 8a 03 	call	0x714	; 0x714 <send_prompt>
			return;
     88a:	5d c0       	rjmp	.+186    	; 0x946 <commands+0x174>
		}
	}

	// Echo the command back to the user
	echo_cmd(cmdline);
     88c:	ce 01       	movw	r24, r28
     88e:	01 96       	adiw	r24, 0x01	; 1
     890:	0e 94 a4 02 	call	0x548	; 0x548 <echo_cmd>

	if (strlen(cmdline) == 0) {		// Catch a terminal cr (not an error)
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	81 11       	cpse	r24, r1
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <commands+0xce>
		send_prompt(GREATERPROMPT);
     89a:	0e 94 8a 03 	call	0x714	; 0x714 <send_prompt>
		return;
     89e:	53 c0       	rjmp	.+166    	; 0x946 <commands+0x174>
	}

	parse_cmd(cmdline, cstack);
     8a0:	60 91 02 28 	lds	r22, 0x2802	; 0x802802 <__data_end>
     8a4:	ce 01       	movw	r24, r28
     8a6:	01 96       	adiw	r24, 0x01	; 1
     8a8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <parse_cmd>
	verb = pcmd[cstack].cverb;
     8ac:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     8b0:	f4 e3       	ldi	r31, 0x34	; 52
     8b2:	8f 9f       	mul	r24, r31
     8b4:	d0 01       	movw	r26, r0
     8b6:	11 24       	eor	r1, r1
     8b8:	a3 58       	subi	r26, 0x83	; 131
     8ba:	b7 4d       	sbci	r27, 0xD7	; 215
     8bc:	ec 91       	ld	r30, X
	object = pcmd[cstack].cobject;
     8be:	11 96       	adiw	r26, 0x01	; 1
     8c0:	9c 91       	ld	r25, X

	switch (verb) {
     8c2:	4e 2f       	mov	r20, r30
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	fa 01       	movw	r30, r20
     8c8:	e2 55       	subi	r30, 0x52	; 82
     8ca:	f1 09       	sbc	r31, r1
     8cc:	e3 32       	cpi	r30, 0x23	; 35
     8ce:	f1 05       	cpc	r31, r1
     8d0:	60 f5       	brcc	.+88     	; 0x92a <commands+0x158>
     8d2:	e0 5b       	subi	r30, 0xB0	; 176
     8d4:	ff 4f       	sbci	r31, 0xFF	; 255
     8d6:	0c 94 7a 1e 	jmp	0x3cf4	; 0x3cf4 <__tablejump2__>
		case 'c':				// close
			prompt_flag = close_PNEU(object);
     8da:	89 2f       	mov	r24, r25
     8dc:	0e 94 38 0c 	call	0x1870	; 0x1870 <close_PNEU>
     8e0:	28 2f       	mov	r18, r24
			break;
     8e2:	24 c0       	rjmp	.+72     	; 0x92c <commands+0x15a>

		case 'o':				// open
			prompt_flag = open_PNEU(object);
     8e4:	89 2f       	mov	r24, r25
     8e6:	0e 94 ca 0c 	call	0x1994	; 0x1994 <open_PNEU>
     8ea:	28 2f       	mov	r18, r24
			break;
     8ec:	1f c0       	rjmp	.+62     	; 0x92c <commands+0x15a>

		case 'm':				// move
		prompt_flag = ROBOMove(cstack);
     8ee:	0e 94 1b 14 	call	0x2836	; 0x2836 <ROBOMove>
     8f2:	28 2f       	mov	r18, r24
/*			prompt_flag = ROBOMove(cstack, 64);
			_delay_ms(1000);
			prompt_flag = ROBOMove(cstack, 0); */
			break;
     8f4:	1b c0       	rjmp	.+54     	; 0x92c <commands+0x15a>

		case 'r':				// Report
			prompt_flag = report(cstack);
     8f6:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <report>
     8fa:	28 2f       	mov	r18, r24
			break;
     8fc:	17 c0       	rjmp	.+46     	; 0x92c <commands+0x15a>

		case 's':				// Set
			prompt_flag = set(cstack);
     8fe:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <set>
     902:	28 2f       	mov	r18, r24
			break;
     904:	13 c0       	rjmp	.+38     	; 0x92c <commands+0x15a>

		case 't':
			testroutine();
     906:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <testroutine>
void commands(void)
{

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	char verb, object;
	uint8_t i, prompt_flag = GREATERPROMPT;
     90a:	20 e0       	ldi	r18, 0x00	; 0
			prompt_flag = set(cstack);
			break;

		case 't':
			testroutine();
			break;
     90c:	0f c0       	rjmp	.+30     	; 0x92c <commands+0x15a>

		case 'R':				// Reboot
			send_prompt(GREATERPROMPT);
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	0e 94 8a 03 	call	0x714	; 0x714 <send_prompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     914:	2a e6       	ldi	r18, 0x6A	; 106
     916:	84 e0       	ldi	r24, 0x04	; 4
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	21 50       	subi	r18, 0x01	; 1
     91c:	80 40       	sbci	r24, 0x00	; 0
     91e:	90 40       	sbci	r25, 0x00	; 0
     920:	e1 f7       	brne	.-8      	; 0x91a <commands+0x148>
     922:	00 c0       	rjmp	.+0      	; 0x924 <commands+0x152>
			_delay_ms(100);		// Avoid finishing the command loop before reboot
			reboot();
     924:	0e 94 ac 18 	call	0x3158	; 0x3158 <reboot>
			return;
     928:	0e c0       	rjmp	.+28     	; 0x946 <commands+0x174>

		default:
			prompt_flag = ERRORPROMPT;
     92a:	22 e0       	ldi	r18, 0x02	; 2
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     92c:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	6a e0       	ldi	r22, 0x0A	; 10
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__divmodhi4>
     93c:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <__data_end>
	send_prompt(prompt_flag);
     940:	82 2f       	mov	r24, r18
     942:	0e 94 8a 03 	call	0x714	; 0x714 <send_prompt>

}
     946:	c1 50       	subi	r28, 0x01	; 1
     948:	df 4f       	sbci	r29, 0xFF	; 255
     94a:	cd bf       	out	0x3d, r28	; 61
     94c:	de bf       	out	0x3e, r29	; 62
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	08 95       	ret

00000958 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     958:	fb 01       	movw	r30, r22
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     95a:	70 81       	ld	r23, Z
	minutes = (*ds3231time++);
     95c:	61 81       	ldd	r22, Z+1	; 0x01
	hours = (*ds3231time++);
     95e:	52 81       	ldd	r21, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     960:	44 81       	ldd	r20, Z+4	; 0x04
	month = (*ds3231time++);
     962:	35 81       	ldd	r19, Z+5	; 0x05
	year = (*ds3231time);
     964:	26 81       	ldd	r18, Z+6	; 0x06

	sprintf(isotime, "20%02x-%02x-%02xT%02x:%02x:%02x",
     966:	1f 92       	push	r1
     968:	7f 93       	push	r23
     96a:	1f 92       	push	r1
     96c:	6f 93       	push	r22
     96e:	1f 92       	push	r1
     970:	5f 93       	push	r21
     972:	1f 92       	push	r1
     974:	4f 93       	push	r20
     976:	1f 92       	push	r1
     978:	3f 93       	push	r19
     97a:	1f 92       	push	r1
     97c:	2f 93       	push	r18
     97e:	29 e8       	ldi	r18, 0x89	; 137
     980:	32 e8       	ldi	r19, 0x82	; 130
     982:	3f 93       	push	r19
     984:	2f 93       	push	r18
     986:	9f 93       	push	r25
     988:	8f 93       	push	r24
     98a:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
		year, month, date, hours, minutes, seconds);

}
     98e:	8d b7       	in	r24, 0x3d	; 61
     990:	9e b7       	in	r25, 0x3e	; 62
     992:	40 96       	adiw	r24, 0x10	; 16
     994:	8d bf       	out	0x3d, r24	; 61
     996:	9e bf       	out	0x3e, r25	; 62
     998:	08 95       	ret

0000099a <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ssZ
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     99a:	dc 01       	movw	r26, r24
     99c:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     99e:	81 89       	ldd	r24, Z+17	; 0x11
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	c0 97       	sbiw	r24, 0x30	; 48
     9a4:	82 95       	swap	r24
     9a6:	92 95       	swap	r25
     9a8:	90 7f       	andi	r25, 0xF0	; 240
     9aa:	98 27       	eor	r25, r24
     9ac:	80 7f       	andi	r24, 0xF0	; 240
     9ae:	98 27       	eor	r25, r24
     9b0:	92 89       	ldd	r25, Z+18	; 0x12
     9b2:	90 53       	subi	r25, 0x30	; 48
     9b4:	89 2b       	or	r24, r25
     9b6:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     9b8:	86 85       	ldd	r24, Z+14	; 0x0e
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	c0 97       	sbiw	r24, 0x30	; 48
     9be:	82 95       	swap	r24
     9c0:	92 95       	swap	r25
     9c2:	90 7f       	andi	r25, 0xF0	; 240
     9c4:	98 27       	eor	r25, r24
     9c6:	80 7f       	andi	r24, 0xF0	; 240
     9c8:	98 27       	eor	r25, r24
     9ca:	97 85       	ldd	r25, Z+15	; 0x0f
     9cc:	90 53       	subi	r25, 0x30	; 48
     9ce:	89 2b       	or	r24, r25
     9d0:	11 96       	adiw	r26, 0x01	; 1
     9d2:	8c 93       	st	X, r24
     9d4:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     9d6:	83 85       	ldd	r24, Z+11	; 0x0b
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	c0 97       	sbiw	r24, 0x30	; 48
     9dc:	82 95       	swap	r24
     9de:	92 95       	swap	r25
     9e0:	90 7f       	andi	r25, 0xF0	; 240
     9e2:	98 27       	eor	r25, r24
     9e4:	80 7f       	andi	r24, 0xF0	; 240
     9e6:	98 27       	eor	r25, r24
     9e8:	94 85       	ldd	r25, Z+12	; 0x0c
     9ea:	90 53       	subi	r25, 0x30	; 48
     9ec:	89 2b       	or	r24, r25
     9ee:	12 96       	adiw	r26, 0x02	; 2
     9f0:	8c 93       	st	X, r24
     9f2:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	13 96       	adiw	r26, 0x03	; 3
     9f8:	8c 93       	st	X, r24
     9fa:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     9fc:	80 85       	ldd	r24, Z+8	; 0x08
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	c0 97       	sbiw	r24, 0x30	; 48
     a02:	82 95       	swap	r24
     a04:	92 95       	swap	r25
     a06:	90 7f       	andi	r25, 0xF0	; 240
     a08:	98 27       	eor	r25, r24
     a0a:	80 7f       	andi	r24, 0xF0	; 240
     a0c:	98 27       	eor	r25, r24
     a0e:	91 85       	ldd	r25, Z+9	; 0x09
     a10:	90 53       	subi	r25, 0x30	; 48
     a12:	89 2b       	or	r24, r25
     a14:	14 96       	adiw	r26, 0x04	; 4
     a16:	8c 93       	st	X, r24
     a18:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     a1a:	25 81       	ldd	r18, Z+5	; 0x05
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	20 53       	subi	r18, 0x30	; 48
     a20:	31 09       	sbc	r19, r1
     a22:	22 95       	swap	r18
     a24:	32 95       	swap	r19
     a26:	30 7f       	andi	r19, 0xF0	; 240
     a28:	32 27       	eor	r19, r18
     a2a:	20 7f       	andi	r18, 0xF0	; 240
     a2c:	32 27       	eor	r19, r18
     a2e:	86 81       	ldd	r24, Z+6	; 0x06
     a30:	80 53       	subi	r24, 0x30	; 48
     a32:	28 2b       	or	r18, r24
     a34:	15 96       	adiw	r26, 0x05	; 5
     a36:	2c 93       	st	X, r18
     a38:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     a3a:	22 81       	ldd	r18, Z+2	; 0x02
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	20 53       	subi	r18, 0x30	; 48
     a40:	31 09       	sbc	r19, r1
     a42:	22 95       	swap	r18
     a44:	32 95       	swap	r19
     a46:	30 7f       	andi	r19, 0xF0	; 240
     a48:	32 27       	eor	r19, r18
     a4a:	20 7f       	andi	r18, 0xF0	; 240
     a4c:	32 27       	eor	r19, r18
     a4e:	83 81       	ldd	r24, Z+3	; 0x03
     a50:	80 53       	subi	r24, 0x30	; 48
     a52:	28 2b       	or	r18, r24
     a54:	16 96       	adiw	r26, 0x06	; 6
     a56:	2c 93       	st	X, r18
     a58:	08 95       	ret

00000a5a <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	7b 01       	movw	r14, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
     a6c:	c8 2f       	mov	r28, r24
     a6e:	88 23       	and	r24, r24
     a70:	21 f0       	breq	.+8      	; 0xa7a <read_DS3231+0x20>
		stop_TWI();
     a72:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
		return(retval);
     a76:	8c 2f       	mov	r24, r28
     a78:	28 c0       	rjmp	.+80     	; 0xaca <read_DS3231+0x70>
    }  

	if ((retval = write_TWI(0x00))) {	// Register 00h
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
     a80:	c8 2f       	mov	r28, r24
     a82:	88 23       	and	r24, r24
     a84:	21 f0       	breq	.+8      	; 0xa8e <read_DS3231+0x34>
		stop_TWI();
     a86:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
		return(retval);
     a8a:	8c 2f       	mov	r24, r28
     a8c:	1e c0       	rjmp	.+60     	; 0xaca <read_DS3231+0x70>
	}
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
     a8e:	61 e0       	ldi	r22, 0x01	; 1
     a90:	88 e6       	ldi	r24, 0x68	; 104
     a92:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
     a96:	c8 2f       	mov	r28, r24
     a98:	88 23       	and	r24, r24
     a9a:	69 f0       	breq	.+26     	; 0xab6 <read_DS3231+0x5c>
		stop_TWI();
     a9c:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
		return(retval);
     aa0:	8c 2f       	mov	r24, r28
     aa2:	13 c0       	rjmp	.+38     	; 0xaca <read_DS3231+0x70>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     aa4:	87 01       	movw	r16, r14
     aa6:	0c 0f       	add	r16, r28
     aa8:	11 1d       	adc	r17, r1
     aaa:	0e 94 33 16 	call	0x2c66	; 0x2c66 <read_TWI>
     aae:	f8 01       	movw	r30, r16
     ab0:	80 83       	st	Z, r24
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 6; i++) {
     ab2:	cf 5f       	subi	r28, 0xFF	; 255
     ab4:	01 c0       	rjmp	.+2      	; 0xab8 <read_DS3231+0x5e>
     ab6:	c0 e0       	ldi	r28, 0x00	; 0
     ab8:	c6 30       	cpi	r28, 0x06	; 6
     aba:	a0 f3       	brcs	.-24     	; 0xaa4 <read_DS3231+0x4a>
		ds3231time[i] = read_TWI();
	}
	ds3231time[6] = readlast_TWI();
     abc:	0e 94 43 16 	call	0x2c86	; 0x2c86 <readlast_TWI>
     ac0:	f7 01       	movw	r30, r14
     ac2:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     ac4:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>

	return(0);
     ac8:	80 e0       	ldi	r24, 0x00	; 0

}
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	08 95       	ret

00000ad6 <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
     ae2:	27 97       	sbiw	r28, 0x07	; 7
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	de bf       	out	0x3e, r29	; 62
     ae8:	8c 01       	movw	r16, r24

	uint8_t retval, ds3231time[7];

	if ((retval = read_DS3231(DS3231ADDR, ds3231time))) {
     aea:	be 01       	movw	r22, r28
     aec:	6f 5f       	subi	r22, 0xFF	; 255
     aee:	7f 4f       	sbci	r23, 0xFF	; 255
     af0:	88 e6       	ldi	r24, 0x68	; 104
     af2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <read_DS3231>
     af6:	88 23       	and	r24, r24
     af8:	49 f0       	breq	.+18     	; 0xb0c <get_time+0x36>
		strcpy(isotime, "CurrentTime?");
     afa:	9d e0       	ldi	r25, 0x0D	; 13
     afc:	e9 ea       	ldi	r30, 0xA9	; 169
     afe:	f2 e8       	ldi	r31, 0x82	; 130
     b00:	d8 01       	movw	r26, r16
     b02:	01 90       	ld	r0, Z+
     b04:	0d 92       	st	X+, r0
     b06:	9a 95       	dec	r25
     b08:	e1 f7       	brne	.-8      	; 0xb02 <get_time+0x2c>
		return(retval);
     b0a:	07 c0       	rjmp	.+14     	; 0xb1a <get_time+0x44>
	}

	convert_ds2iso(isotime, ds3231time);
     b0c:	be 01       	movw	r22, r28
     b0e:	6f 5f       	subi	r22, 0xFF	; 255
     b10:	7f 4f       	sbci	r23, 0xFF	; 255
     b12:	c8 01       	movw	r24, r16
     b14:	0e 94 ac 04 	call	0x958	; 0x958 <convert_ds2iso>
	return(0);
     b18:	80 e0       	ldi	r24, 0x00	; 0

}
     b1a:	27 96       	adiw	r28, 0x07	; 7
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	08 95       	ret

00000b2a <write_DS3231>:

	Returns
		TWI errors
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     b2a:	ef 92       	push	r14
     b2c:	ff 92       	push	r15
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	8b 01       	movw	r16, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
     b3e:	c8 2f       	mov	r28, r24
     b40:	88 23       	and	r24, r24
     b42:	21 f0       	breq	.+8      	; 0xb4c <write_DS3231+0x22>
		stop_TWI();
     b44:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
		return(retval);
     b48:	8c 2f       	mov	r24, r28
     b4a:	22 c0       	rjmp	.+68     	; 0xb90 <write_DS3231+0x66>
	}

	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
     b52:	c8 2f       	mov	r28, r24
     b54:	88 23       	and	r24, r24
     b56:	b1 f0       	breq	.+44     	; 0xb84 <write_DS3231+0x5a>
		stop_TWI();
     b58:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
		return(retval);
     b5c:	8c 2f       	mov	r24, r28
     b5e:	18 c0       	rjmp	.+48     	; 0xb90 <write_DS3231+0x66>
	}

	for (i = 0; i < 7; i++) {
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b60:	78 01       	movw	r14, r16
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	e8 1a       	sub	r14, r24
     b66:	f8 0a       	sbc	r15, r24
     b68:	f8 01       	movw	r30, r16
     b6a:	80 81       	ld	r24, Z
     b6c:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
     b70:	c8 2f       	mov	r28, r24
     b72:	88 23       	and	r24, r24
     b74:	21 f0       	breq	.+8      	; 0xb7e <write_DS3231+0x54>
			stop_TWI();
     b76:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
			return(retval);
     b7a:	8c 2f       	mov	r24, r28
     b7c:	09 c0       	rjmp	.+18     	; 0xb90 <write_DS3231+0x66>
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b7e:	df 5f       	subi	r29, 0xFF	; 255
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b80:	87 01       	movw	r16, r14
     b82:	01 c0       	rjmp	.+2      	; 0xb86 <write_DS3231+0x5c>
     b84:	d0 e0       	ldi	r29, 0x00	; 0
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b86:	d7 30       	cpi	r29, 0x07	; 7
     b88:	58 f3       	brcs	.-42     	; 0xb60 <write_DS3231+0x36>
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
			stop_TWI();
			return(retval);
		}
	}
	stop_TWI();
     b8a:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>

	return(0);
     b8e:	80 e0       	ldi	r24, 0x00	; 0

}
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	27 97       	sbiw	r28, 0x07	; 7
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	de bf       	out	0x3e, r29	; 62

	uint8_t retval, ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     bac:	bc 01       	movw	r22, r24
     bae:	ce 01       	movw	r24, r28
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	0e 94 cd 04 	call	0x99a	; 0x99a <convert_iso2ds>
	if ((retval = write_DS3231(DS3231ADDR, ds3231time))) {
     bb6:	be 01       	movw	r22, r28
     bb8:	6f 5f       	subi	r22, 0xFF	; 255
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	88 e6       	ldi	r24, 0x68	; 104
     bbe:	0e 94 95 05 	call	0xb2a	; 0xb2a <write_DS3231>
		return(retval);
	}
	return(0);

}
     bc2:	27 96       	adiw	r28, 0x07	; 7
     bc4:	cd bf       	out	0x3d, r28	; 61
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     bce:	45 e1       	ldi	r20, 0x15	; 21
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	6b e0       	ldi	r22, 0x0B	; 11
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <eeprom_read_block>
     bda:	08 95       	ret

00000bdc <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     bdc:	4b e0       	ldi	r20, 0x0B	; 11
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <eeprom_read_block>
     be8:	08 95       	ret

00000bea <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
     bf2:	65 97       	sbiw	r28, 0x15	; 21
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     bf8:	ce 01       	movw	r24, r28
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	0e 94 6b 05 	call	0xad6	; 0xad6 <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     c00:	45 e1       	ldi	r20, 0x15	; 21
     c02:	50 e0       	ldi	r21, 0x00	; 0
     c04:	6b e0       	ldi	r22, 0x0B	; 11
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	ce 01       	movw	r24, r28
     c0a:	01 96       	adiw	r24, 0x01	; 1
     c0c:	0e 94 fd 20 	call	0x41fa	; 0x41fa <eeprom_update_block>

}
     c10:	65 96       	adiw	r28, 0x15	; 21
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	08 95       	ret

00000c1c <update_VERSION>:

void update_VERSION(void)
{
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	2b 97       	sbiw	r28, 0x0b	; 11
     c26:	cd bf       	out	0x3d, r28	; 61
     c28:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     c2a:	8b e0       	ldi	r24, 0x0B	; 11
     c2c:	e6 eb       	ldi	r30, 0xB6	; 182
     c2e:	f2 e8       	ldi	r31, 0x82	; 130
     c30:	de 01       	movw	r26, r28
     c32:	11 96       	adiw	r26, 0x01	; 1
     c34:	01 90       	ld	r0, Z+
     c36:	0d 92       	st	X+, r0
     c38:	8a 95       	dec	r24
     c3a:	e1 f7       	brne	.-8      	; 0xc34 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     c3c:	4b e0       	ldi	r20, 0x0B	; 11
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	ce 01       	movw	r24, r28
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	0e 94 fd 20 	call	0x41fa	; 0x41fa <eeprom_update_block>

}
     c4c:	2b 96       	adiw	r28, 0x0b	; 11
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret

00000c58 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     c58:	0e 94 f5 05 	call	0xbea	; 0xbea <update_BOOTTIME>
	update_VERSION();
     c5c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <update_VERSION>
     c60:	08 95       	ret

00000c62 <read_FRAM>:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)

------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     c62:	ef 92       	push	r14
     c64:	ff 92       	push	r15
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	c8 2f       	mov	r28, r24
     c70:	e6 2e       	mov	r14, r22
     c72:	f7 2e       	mov	r15, r23
     c74:	8a 01       	movw	r16, r20
     c76:	d2 2f       	mov	r29, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
     c7e:	81 11       	cpse	r24, r1
     c80:	2b c0       	rjmp	.+86     	; 0xcd8 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {			// Send memory address
     c82:	8f 2d       	mov	r24, r15
     c84:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
     c88:	81 11       	cpse	r24, r1
     c8a:	26 c0       	rjmp	.+76     	; 0xcd8 <read_FRAM+0x76>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {
     c8c:	8e 2d       	mov	r24, r14
     c8e:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
     c92:	81 11       	cpse	r24, r1
     c94:	21 c0       	rjmp	.+66     	; 0xcd8 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
     c96:	61 e0       	ldi	r22, 0x01	; 1
     c98:	8c 2f       	mov	r24, r28
     c9a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
     c9e:	81 11       	cpse	r24, r1
     ca0:	1b c0       	rjmp	.+54     	; 0xcd8 <read_FRAM+0x76>
     ca2:	c0 e0       	ldi	r28, 0x00	; 0
     ca4:	08 c0       	rjmp	.+16     	; 0xcb6 <read_FRAM+0x54>
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     ca6:	78 01       	movw	r14, r16
     ca8:	ec 0e       	add	r14, r28
     caa:	f1 1c       	adc	r15, r1
     cac:	0e 94 33 16 	call	0x2c66	; 0x2c66 <read_TWI>
     cb0:	f7 01       	movw	r30, r14
     cb2:	80 83       	st	Z, r24

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
     cb4:	cf 5f       	subi	r28, 0xFF	; 255
     cb6:	2c 2f       	mov	r18, r28
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	8d 2f       	mov	r24, r29
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	28 17       	cp	r18, r24
     cc2:	39 07       	cpc	r19, r25
     cc4:	84 f3       	brlt	.-32     	; 0xca6 <read_FRAM+0x44>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     cc6:	ec 01       	movw	r28, r24
     cc8:	c0 0f       	add	r28, r16
     cca:	d1 1f       	adc	r29, r17
     ccc:	0e 94 43 16 	call	0x2c86	; 0x2c86 <readlast_TWI>
     cd0:	88 83       	st	Y, r24

	stop_TWI();
     cd2:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>

	return(0);
     cd6:	80 e0       	ldi	r24, 0x00	; 0

}
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	08 95       	ret

00000ce6 <write_FRAM>:
	Returns:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     ce6:	ef 92       	push	r14
     ce8:	ff 92       	push	r15
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	f6 2e       	mov	r15, r22
     cf4:	17 2f       	mov	r17, r23
     cf6:	ea 01       	movw	r28, r20
     cf8:	02 2f       	mov	r16, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if ((retval = start_TWI(addr, TWIWRITE))) {	// TWI START
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
     d00:	81 11       	cpse	r24, r1
     d02:	1c c0       	rjmp	.+56     	; 0xd3c <write_FRAM+0x56>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {		// FRAM address to write
     d04:	81 2f       	mov	r24, r17
     d06:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
     d0a:	81 11       	cpse	r24, r1
     d0c:	17 c0       	rjmp	.+46     	; 0xd3c <write_FRAM+0x56>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
     d0e:	8f 2d       	mov	r24, r15
     d10:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
     d14:	81 11       	cpse	r24, r1
     d16:	12 c0       	rjmp	.+36     	; 0xd3c <write_FRAM+0x56>
     d18:	10 e0       	ldi	r17, 0x00	; 0
     d1a:	0b c0       	rjmp	.+22     	; 0xd32 <write_FRAM+0x4c>
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     d1c:	7e 01       	movw	r14, r28
     d1e:	8f ef       	ldi	r24, 0xFF	; 255
     d20:	e8 1a       	sub	r14, r24
     d22:	f8 0a       	sbc	r15, r24
     d24:	88 81       	ld	r24, Y
     d26:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
     d2a:	81 11       	cpse	r24, r1
     d2c:	07 c0       	rjmp	.+14     	; 0xd3c <write_FRAM+0x56>
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     d2e:	1f 5f       	subi	r17, 0xFF	; 255
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     d30:	e7 01       	movw	r28, r14
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     d32:	10 17       	cp	r17, r16
     d34:	98 f3       	brcs	.-26     	; 0xd1c <write_FRAM+0x36>
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
			return(retval);
		}
	}

	stop_TWI();
     d36:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>

	return(0);
     d3a:	80 e0       	ldi	r24, 0x00	; 0

}
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	08 95       	ret

00000d4a <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     d4a:	8f 92       	push	r8
     d4c:	9f 92       	push	r9
     d4e:	af 92       	push	r10
     d50:	bf 92       	push	r11
     d52:	cf 92       	push	r12
     d54:	df 92       	push	r13
     d56:	ef 92       	push	r14
     d58:	ff 92       	push	r15

	uint8_t adcpin;
	float humidity, temperature;

	switch (sensor) {
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	59 f0       	breq	.+22     	; 0xd74 <get_humidity+0x2a>
     d5e:	18 f0       	brcs	.+6      	; 0xd66 <get_humidity+0x1c>
     d60:	82 30       	cpi	r24, 0x02	; 2
     d62:	79 f0       	breq	.+30     	; 0xd82 <get_humidity+0x38>
     d64:	15 c0       	rjmp	.+42     	; 0xd90 <get_humidity+0x46>
		case 0:
			temperature = get_temperature(0);
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <get_temperature>
     d6c:	4b 01       	movw	r8, r22
     d6e:	5c 01       	movw	r10, r24
//			adcpin = AIN1;		// test unit
			adcpin = AIN0;		// production
     d70:	40 e4       	ldi	r20, 0x40	; 64
			break;
     d72:	17 c0       	rjmp	.+46     	; 0xda2 <get_humidity+0x58>
		case 1:
			temperature = get_temperature(1);
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <get_temperature>
     d7a:	4b 01       	movw	r8, r22
     d7c:	5c 01       	movw	r10, r24
			adcpin = AIN1;
     d7e:	40 e5       	ldi	r20, 0x50	; 80
			break;
     d80:	10 c0       	rjmp	.+32     	; 0xda2 <get_humidity+0x58>
		case 2:
			temperature = get_temperature(2);
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <get_temperature>
     d88:	4b 01       	movw	r8, r22
     d8a:	5c 01       	movw	r10, r24
			adcpin = AIN2;
     d8c:	40 e6       	ldi	r20, 0x60	; 96
			break;
     d8e:	09 c0       	rjmp	.+18     	; 0xda2 <get_humidity+0x58>
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     d90:	0f 2e       	mov	r0, r31
     d92:	81 2c       	mov	r8, r1
     d94:	91 2c       	mov	r9, r1
     d96:	f0 ea       	ldi	r31, 0xA0	; 160
     d98:	af 2e       	mov	r10, r31
     d9a:	f1 e4       	ldi	r31, 0x41	; 65
     d9c:	bf 2e       	mov	r11, r31
     d9e:	f0 2d       	mov	r31, r0
			temperature = get_temperature(2);
			adcpin = AIN2;
			break;
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     da0:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	humidity = ((read_ADS1115(ADC_RH, PGA6144, adcpin, DR128)/5.0) - 0.16) / 0.0062;
     da2:	20 e8       	ldi	r18, 0x80	; 128
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	88 e4       	ldi	r24, 0x48	; 72
     da8:	0e 94 9e 01 	call	0x33c	; 0x33c <read_ADS1115>
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	40 ea       	ldi	r20, 0xA0	; 160
     db2:	50 e4       	ldi	r21, 0x40	; 64
     db4:	0e 94 34 19 	call	0x3268	; 0x3268 <__divsf3>
     db8:	2a e0       	ldi	r18, 0x0A	; 10
     dba:	37 ed       	ldi	r19, 0xD7	; 215
     dbc:	43 e2       	ldi	r20, 0x23	; 35
     dbe:	5e e3       	ldi	r21, 0x3E	; 62
     dc0:	0e 94 c2 18 	call	0x3184	; 0x3184 <__subsf3>
     dc4:	2f e5       	ldi	r18, 0x5F	; 95
     dc6:	39 e2       	ldi	r19, 0x29	; 41
     dc8:	4b ec       	ldi	r20, 0xCB	; 203
     dca:	5b e3       	ldi	r21, 0x3B	; 59
     dcc:	0e 94 34 19 	call	0x3268	; 0x3268 <__divsf3>
     dd0:	6b 01       	movw	r12, r22
     dd2:	7c 01       	movw	r14, r24
	humidity = (humidity / (1.0546 - 0.00216 * temperature));
     dd4:	29 ec       	ldi	r18, 0xC9	; 201
     dd6:	3e e8       	ldi	r19, 0x8E	; 142
     dd8:	4d e0       	ldi	r20, 0x0D	; 13
     dda:	5b e3       	ldi	r21, 0x3B	; 59
     ddc:	c5 01       	movw	r24, r10
     dde:	b4 01       	movw	r22, r8
     de0:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__mulsf3>
     de4:	9b 01       	movw	r18, r22
     de6:	ac 01       	movw	r20, r24
     de8:	62 e2       	ldi	r22, 0x22	; 34
     dea:	7d ef       	ldi	r23, 0xFD	; 253
     dec:	86 e8       	ldi	r24, 0x86	; 134
     dee:	9f e3       	ldi	r25, 0x3F	; 63
     df0:	0e 94 c2 18 	call	0x3184	; 0x3184 <__subsf3>
     df4:	9b 01       	movw	r18, r22
     df6:	ac 01       	movw	r20, r24
     df8:	c7 01       	movw	r24, r14
     dfa:	b6 01       	movw	r22, r12
     dfc:	0e 94 34 19 	call	0x3268	; 0x3268 <__divsf3>
	return(humidity);

}
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	cf 90       	pop	r12
     e08:	bf 90       	pop	r11
     e0a:	af 90       	pop	r10
     e0c:	9f 90       	pop	r9
     e0e:	8f 90       	pop	r8
     e10:	08 95       	ret

00000e12 <initialize>:
#include "globals.h"
#include "initialize.h"

void initialize(void)
{
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	2b 97       	sbiw	r28, 0x0b	; 11
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	init_PORTS();
     e20:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <init_PORTS>
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton setup
     e24:	8b e0       	ldi	r24, 0x0B	; 11
     e26:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f44b6>
	init_XPORT();
     e2a:	0e 94 b6 18 	call	0x316c	; 0x316c <init_XPORT>
	init_SPECID();
     e2e:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <init_SPECID>
	init_LED();
     e32:	0e 94 c7 07 	call	0xf8e	; 0xf8e <init_LED>
	init_BEEPER();
     e36:	0e 94 9d 02 	call	0x53a	; 0x53a <init_BEEPER>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
     e3a:	80 e2       	ldi	r24, 0x20	; 32
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <init_RTC>
	init_USART();
     e42:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <init_USART>
	init_TWI();
     e46:	0e 94 28 16 	call	0x2c50	; 0x2c50 <init_TWI>
	init_MMA8451();
     e4a:	0e 94 5f 09 	call	0x12be	; 0x12be <init_MMA8451>
	init_PNEU();
     e4e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <init_PNEU>
	init_OLED(0);
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	0e 94 35 0a 	call	0x146a	; 0x146a <init_OLED>
	init_OLED(1);
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	0e 94 35 0a 	call	0x146a	; 0x146a <init_OLED>
	init_EEPROM();	// Needs TWI for get_time()
     e5e:	0e 94 2c 06 	call	0xc58	; 0xc58 <init_EEPROM>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
     e62:	80 ee       	ldi	r24, 0xE0	; 224
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	80 93 87 2a 	sts	0x2A87, r24	; 0x802a87 <timeoutOLED>
     e6a:	90 93 88 2a 	sts	0x2A88, r25	; 0x802a88 <timeoutOLED+0x1>
	get_VERSION(versionstr);
     e6e:	ce 01       	movw	r24, r28
     e70:	01 96       	adiw	r24, 0x01	; 1
     e72:	0e 94 ee 05 	call	0xbdc	; 0xbdc <get_VERSION>
	writestr_OLED(1,"specMech Version", 1);
     e76:	41 e0       	ldi	r20, 0x01	; 1
     e78:	61 ec       	ldi	r22, 0xC1	; 193
     e7a:	72 e8       	ldi	r23, 0x82	; 130
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <writestr_OLED>
	writestr_OLED(1, versionstr, 2);
     e82:	42 e0       	ldi	r20, 0x02	; 2
     e84:	be 01       	movw	r22, r28
     e86:	6f 5f       	subi	r22, 0xFF	; 255
     e88:	7f 4f       	sbci	r23, 0xFF	; 255
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <writestr_OLED>

}
     e90:	2b 96       	adiw	r28, 0x0b	; 11
     e92:	cd bf       	out	0x3d, r28	; 61
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	08 95       	ret

00000e9c <__vector_29>:

/*----------------------------------------------------------------------
Curiosity Nano on-board pushbutton reboots the system
----------------------------------------------------------------------*/
ISR(PORTF_PORT_vect)
{
     e9c:	1f 92       	push	r1
     e9e:	0f 92       	push	r0
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	0f 92       	push	r0
     ea4:	11 24       	eor	r1, r1
     ea6:	2f 93       	push	r18
     ea8:	3f 93       	push	r19
     eaa:	4f 93       	push	r20
     eac:	5f 93       	push	r21
     eae:	6f 93       	push	r22
     eb0:	7f 93       	push	r23
     eb2:	8f 93       	push	r24
     eb4:	9f 93       	push	r25
     eb6:	af 93       	push	r26
     eb8:	bf 93       	push	r27
     eba:	ef 93       	push	r30
     ebc:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
     ebe:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
     ec2:	86 ff       	sbrs	r24, 6
     ec4:	05 c0       	rjmp	.+10     	; 0xed0 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
     ec6:	80 e4       	ldi	r24, 0x40	; 64
     ec8:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
     ecc:	0e 94 ac 18 	call	0x3158	; 0x3158 <reboot>
	}

}
     ed0:	ff 91       	pop	r31
     ed2:	ef 91       	pop	r30
     ed4:	bf 91       	pop	r27
     ed6:	af 91       	pop	r26
     ed8:	9f 91       	pop	r25
     eda:	8f 91       	pop	r24
     edc:	7f 91       	pop	r23
     ede:	6f 91       	pop	r22
     ee0:	5f 91       	pop	r21
     ee2:	4f 91       	pop	r20
     ee4:	3f 91       	pop	r19
     ee6:	2f 91       	pop	r18
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	0f 90       	pop	r0
     eee:	1f 90       	pop	r1
     ef0:	18 95       	reti

00000ef2 <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
     ef2:	cf 92       	push	r12
     ef4:	df 92       	push	r13
     ef6:	ef 92       	push	r14
     ef8:	ff 92       	push	r15

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	21 f0       	breq	.+8      	; 0xf06 <read_ionpump+0x14>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
     efe:	82 30       	cpi	r24, 0x02	; 2
     f00:	79 f5       	brne	.+94     	; 0xf60 <read_ionpump+0x6e>
		pins = AIN23;
     f02:	40 e3       	ldi	r20, 0x30	; 48
     f04:	01 c0       	rjmp	.+2      	; 0xf08 <read_ionpump+0x16>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
     f06:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(-666.0);
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);
     f08:	20 e8       	ldi	r18, 0x80	; 128
     f0a:	62 e0       	ldi	r22, 0x02	; 2
     f0c:	89 e4       	ldi	r24, 0x49	; 73
     f0e:	0e 94 9e 01 	call	0x33c	; 0x33c <read_ADS1115>
     f12:	6b 01       	movw	r12, r22
     f14:	7c 01       	movw	r14, r24

	if (voltage < 0.4) {						// Useful range for the Modion pump
     f16:	2d ec       	ldi	r18, 0xCD	; 205
     f18:	3c ec       	ldi	r19, 0xCC	; 204
     f1a:	4c ec       	ldi	r20, 0xCC	; 204
     f1c:	5e e3       	ldi	r21, 0x3E	; 62
     f1e:	0e 94 2f 19 	call	0x325e	; 0x325e <__cmpsf2>
     f22:	88 23       	and	r24, r24
     f24:	14 f1       	brlt	.+68     	; 0xf6a <read_ionpump+0x78>
		return(-666.0);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	50 e4       	ldi	r21, 0x40	; 64
     f2e:	c7 01       	movw	r24, r14
     f30:	b6 01       	movw	r22, r12
     f32:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <__gesf2>
     f36:	18 16       	cp	r1, r24
     f38:	ec f0       	brlt	.+58     	; 0xf74 <read_ionpump+0x82>
		return(-666.0);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
     f3a:	29 e7       	ldi	r18, 0x79	; 121
     f3c:	39 ee       	ldi	r19, 0xE9	; 233
     f3e:	42 e0       	ldi	r20, 0x02	; 2
     f40:	50 e4       	ldi	r21, 0x40	; 64
     f42:	c7 01       	movw	r24, r14
     f44:	b6 01       	movw	r22, r12
     f46:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__mulsf3>
     f4a:	2e e6       	ldi	r18, 0x6E	; 110
     f4c:	33 ea       	ldi	r19, 0xA3	; 163
     f4e:	4b ed       	ldi	r20, 0xDB	; 219
     f50:	50 e4       	ldi	r21, 0x40	; 64
     f52:	0e 94 c2 18 	call	0x3184	; 0x3184 <__subsf3>

	return(vacuum);
     f56:	56 2f       	mov	r21, r22
     f58:	47 2f       	mov	r20, r23
     f5a:	38 2f       	mov	r19, r24
     f5c:	29 2f       	mov	r18, r25
     f5e:	0e c0       	rjmp	.+28     	; 0xf7c <read_ionpump+0x8a>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(-666.0);
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	40 e8       	ldi	r20, 0x80	; 128
     f64:	36 e2       	ldi	r19, 0x26	; 38
     f66:	24 ec       	ldi	r18, 0xC4	; 196
     f68:	09 c0       	rjmp	.+18     	; 0xf7c <read_ionpump+0x8a>
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);

	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(-666.0);							// after ISO224 op-amp is 0.5 to 2.0 V
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	40 e8       	ldi	r20, 0x80	; 128
     f6e:	36 e2       	ldi	r19, 0x26	; 38
     f70:	24 ec       	ldi	r18, 0xC4	; 196
     f72:	04 c0       	rjmp	.+8      	; 0xf7c <read_ionpump+0x8a>
	} else if (voltage > 2.0) {
		return(-666.0);
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	40 e8       	ldi	r20, 0x80	; 128
     f78:	36 e2       	ldi	r19, 0x26	; 38
     f7a:	24 ec       	ldi	r18, 0xC4	; 196
	vacuum = ISO224SLOPE * voltage + ISO224INTER;

	return(vacuum);
//return(voltage);

}
     f7c:	65 2f       	mov	r22, r21
     f7e:	74 2f       	mov	r23, r20
     f80:	83 2f       	mov	r24, r19
     f82:	92 2f       	mov	r25, r18
     f84:	ff 90       	pop	r15
     f86:	ef 90       	pop	r14
     f88:	df 90       	pop	r13
     f8a:	cf 90       	pop	r12
     f8c:	08 95       	ret

00000f8e <init_LED>:
#include "globals.h"

void init_LED(void)
{
	PORTF.OUTSET = PIN5_bm;
     f8e:	e0 ea       	ldi	r30, 0xA0	; 160
     f90:	f4 e0       	ldi	r31, 0x04	; 4
     f92:	80 e2       	ldi	r24, 0x20	; 32
     f94:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN5_bm;
     f96:	81 83       	std	Z+1, r24	; 0x01
     f98:	08 95       	ret

00000f9a <main>:
extern void initialize(void);

int main(void)
{

	initialize();
     f9a:	0e 94 09 07 	call	0xe12	; 0xe12 <initialize>
	sei();
     f9e:	78 94       	sei

	for (;;) {
		if (recv0_buf.done) {
     fa0:	80 91 93 2c 	lds	r24, 0x2C93	; 0x802c93 <recv0_buf+0x104>
     fa4:	88 23       	and	r24, r24
     fa6:	e1 f3       	breq	.-8      	; 0xfa0 <main+0x6>
			recv0_buf.done = NO;
     fa8:	10 92 93 2c 	sts	0x2C93, r1	; 0x802c93 <recv0_buf+0x104>
//			on_BEEPER;
//			_delay_ms(50);
//			off_BEEPER;
			commands();
     fac:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <commands>
     fb0:	f7 cf       	rjmp	.-18     	; 0xfa0 <main+0x6>

00000fb2 <read_MCP23008>:
	Returns:
		val - data in that MCP23008 register
		Function return value is 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	c8 2f       	mov	r28, r24
     fb8:	d6 2f       	mov	r29, r22

	uint8_t val;

	start_TWI(addr, TWIWRITE);
     fba:	60 e0       	ldi	r22, 0x00	; 0
     fbc:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
	write_TWI(reg);
     fc0:	8d 2f       	mov	r24, r29
     fc2:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
	start_TWI(addr, TWIREAD);
     fc6:	61 e0       	ldi	r22, 0x01	; 1
     fc8:	8c 2f       	mov	r24, r28
     fca:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
	val = readlast_TWI();
     fce:	0e 94 43 16 	call	0x2c86	; 0x2c86 <readlast_TWI>
     fd2:	c8 2f       	mov	r28, r24
	stop_TWI();
     fd4:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
	return(val);

}
     fd8:	8c 2f       	mov	r24, r28
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret

00000fe0 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
     fe0:	1f 93       	push	r17
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	d6 2f       	mov	r29, r22
     fe8:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
     ff0:	c8 2f       	mov	r28, r24
     ff2:	88 23       	and	r24, r24
     ff4:	21 f0       	breq	.+8      	; 0xffe <write_MCP23008+0x1e>
		stop_TWI();
     ff6:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
		return(retval);
     ffa:	8c 2f       	mov	r24, r28
     ffc:	17 c0       	rjmp	.+46     	; 0x102c <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(reg))) {
     ffe:	8d 2f       	mov	r24, r29
    1000:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
    1004:	c8 2f       	mov	r28, r24
    1006:	88 23       	and	r24, r24
    1008:	21 f0       	breq	.+8      	; 0x1012 <write_MCP23008+0x32>
		stop_TWI();
    100a:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
		return(retval);
    100e:	8c 2f       	mov	r24, r28
    1010:	0d c0       	rjmp	.+26     	; 0x102c <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1012:	81 2f       	mov	r24, r17
    1014:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
    1018:	c8 2f       	mov	r28, r24
    101a:	88 23       	and	r24, r24
    101c:	21 f0       	breq	.+8      	; 0x1026 <write_MCP23008+0x46>
		stop_TWI();
    101e:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
		return(retval);
    1022:	8c 2f       	mov	r24, r28
    1024:	03 c0       	rjmp	.+6      	; 0x102c <write_MCP23008+0x4c>
	}
	stop_TWI();
    1026:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
	return(0);
    102a:	80 e0       	ldi	r24, 0x00	; 0
	
}
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	08 95       	ret

00001034 <read_MCP9808>:
//#define MCP9808ADDR		(0x30)	// TWI address
#define MCP9808ADDR		(0x18)	// TWI address
#define TEMPREGISTER	(0x05)	// Ambient temperature register

float read_MCP9808(void)
{
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29

	uint8_t highbyte, lowbyte, sign;
	float temperature;

	start_TWI(MCP9808ADDR, TWIWRITE);
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	88 e1       	ldi	r24, 0x18	; 24
    1046:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
	write_TWI(TEMPREGISTER);
    104a:	85 e0       	ldi	r24, 0x05	; 5
    104c:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    1050:	61 e0       	ldi	r22, 0x01	; 1
    1052:	88 e1       	ldi	r24, 0x18	; 24
    1054:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
	highbyte = read_TWI();
    1058:	0e 94 33 16 	call	0x2c66	; 0x2c66 <read_TWI>
    105c:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    105e:	0e 94 43 16 	call	0x2c86	; 0x2c86 <readlast_TWI>
    1062:	d8 2f       	mov	r29, r24
	stop_TWI();
    1064:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1068:	1c 2f       	mov	r17, r28
    106a:	10 71       	andi	r17, 0x10	; 16
	highbyte &= 0x0F;					// Clear threshold & sign bits
    106c:	6c 2f       	mov	r22, r28
    106e:	6f 70       	andi	r22, 0x0F	; 15
	temperature = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 a6 19 	call	0x334c	; 0x334c <__floatunsisf>
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e8       	ldi	r20, 0x80	; 128
    1080:	51 e4       	ldi	r21, 0x41	; 65
    1082:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__mulsf3>
    1086:	6b 01       	movw	r12, r22
    1088:	7c 01       	movw	r14, r24
    108a:	6d 2f       	mov	r22, r29
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	0e 94 a6 19 	call	0x334c	; 0x334c <__floatunsisf>
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e8       	ldi	r20, 0x80	; 128
    109c:	5d e3       	ldi	r21, 0x3D	; 61
    109e:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__mulsf3>
    10a2:	9b 01       	movw	r18, r22
    10a4:	ac 01       	movw	r20, r24
    10a6:	c7 01       	movw	r24, r14
    10a8:	b6 01       	movw	r22, r12
    10aa:	0e 94 c3 18 	call	0x3186	; 0x3186 <__addsf3>
	if (sign) {
    10ae:	11 23       	and	r17, r17
    10b0:	41 f0       	breq	.+16     	; 0x10c2 <read_MCP9808+0x8e>
		temperature = 256.0 - temperature;
    10b2:	9b 01       	movw	r18, r22
    10b4:	ac 01       	movw	r20, r24
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	80 e8       	ldi	r24, 0x80	; 128
    10bc:	93 e4       	ldi	r25, 0x43	; 67
    10be:	0e 94 c2 18 	call	0x3184	; 0x3184 <__subsf3>
	}
	return(temperature);
}
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	df 90       	pop	r13
    10ce:	cf 90       	pop	r12
    10d0:	08 95       	ret

000010d2 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    10d2:	ef 92       	push	r14
    10d4:	ff 92       	push	r15
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	18 2f       	mov	r17, r24
    10e0:	f6 2e       	mov	r15, r22
    10e2:	ea 01       	movw	r28, r20
    10e4:	02 2f       	mov	r16, r18

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
    10ec:	81 11       	cpse	r24, r1
    10ee:	1e c0       	rjmp	.+60     	; 0x112c <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = write_TWI(reg))) {
    10f0:	8f 2d       	mov	r24, r15
    10f2:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
    10f6:	81 11       	cpse	r24, r1
    10f8:	19 c0       	rjmp	.+50     	; 0x112c <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
    10fa:	61 e0       	ldi	r22, 0x01	; 1
    10fc:	81 2f       	mov	r24, r17
    10fe:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
    1102:	81 11       	cpse	r24, r1
    1104:	13 c0       	rjmp	.+38     	; 0x112c <read_MMA8451+0x5a>
    1106:	11 e0       	ldi	r17, 0x01	; 1
    1108:	09 c0       	rjmp	.+18     	; 0x111c <read_MMA8451+0x4a>
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    110a:	7e 01       	movw	r14, r28
    110c:	8f ef       	ldi	r24, 0xFF	; 255
    110e:	e8 1a       	sub	r14, r24
    1110:	f8 0a       	sbc	r15, r24
    1112:	0e 94 33 16 	call	0x2c66	; 0x2c66 <read_TWI>
    1116:	88 83       	st	Y, r24
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    1118:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    111a:	e7 01       	movw	r28, r14
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    111c:	10 17       	cp	r17, r16
    111e:	a8 f3       	brcs	.-22     	; 0x110a <read_MMA8451+0x38>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    1120:	0e 94 43 16 	call	0x2c86	; 0x2c86 <readlast_TWI>
    1124:	88 83       	st	Y, r24
	stop_TWI();
    1126:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
	return(0);
    112a:	80 e0       	ldi	r24, 0x00	; 0

}
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	08 95       	ret

0000113a <get_orientation>:
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
//uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
uint8_t get_orientation(float *x, float *y, float *z)
{
    113a:	cf 92       	push	r12
    113c:	df 92       	push	r13
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	26 97       	sbiw	r28, 0x06	; 6
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	6c 01       	movw	r12, r24
    1156:	7b 01       	movw	r14, r22
    1158:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -9999.9;
    115a:	8a e9       	ldi	r24, 0x9A	; 154
    115c:	9f e3       	ldi	r25, 0x3F	; 63
    115e:	ac e1       	ldi	r26, 0x1C	; 28
    1160:	b6 ec       	ldi	r27, 0xC6	; 198
    1162:	fa 01       	movw	r30, r20
    1164:	80 83       	st	Z, r24
    1166:	91 83       	std	Z+1, r25	; 0x01
    1168:	a2 83       	std	Z+2, r26	; 0x02
    116a:	b3 83       	std	Z+3, r27	; 0x03
    116c:	fb 01       	movw	r30, r22
    116e:	80 83       	st	Z, r24
    1170:	91 83       	std	Z+1, r25	; 0x01
    1172:	a2 83       	std	Z+2, r26	; 0x02
    1174:	b3 83       	std	Z+3, r27	; 0x03
    1176:	f6 01       	movw	r30, r12
    1178:	80 83       	st	Z, r24
    117a:	91 83       	std	Z+1, r25	; 0x01
    117c:	a2 83       	std	Z+2, r26	; 0x02
    117e:	b3 83       	std	Z+3, r27	; 0x03

	read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6);
    1180:	26 e0       	ldi	r18, 0x06	; 6
    1182:	ae 01       	movw	r20, r28
    1184:	4f 5f       	subi	r20, 0xFF	; 255
    1186:	5f 4f       	sbci	r21, 0xFF	; 255
    1188:	61 e0       	ldi	r22, 0x01	; 1
    118a:	8d e1       	ldi	r24, 0x1D	; 29
    118c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <read_MMA8451>

	ix = datain[0];
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    1194:	98 2f       	mov	r25, r24
    1196:	88 27       	eor	r24, r24
	ix |= datain[1];
    1198:	2a 81       	ldd	r18, Y+2	; 0x02
    119a:	82 2b       	or	r24, r18
	ix /= 4;
    119c:	bc 01       	movw	r22, r24
    119e:	77 23       	and	r23, r23
    11a0:	14 f4       	brge	.+4      	; 0x11a6 <get_orientation+0x6c>
    11a2:	6d 5f       	subi	r22, 0xFD	; 253
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	75 95       	asr	r23
    11a8:	67 95       	ror	r22
    11aa:	75 95       	asr	r23
    11ac:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    11ae:	07 2e       	mov	r0, r23
    11b0:	00 0c       	add	r0, r0
    11b2:	88 0b       	sbc	r24, r24
    11b4:	99 0b       	sbc	r25, r25
    11b6:	0e 94 a8 19 	call	0x3350	; 0x3350 <__floatsisf>
    11ba:	26 e6       	ldi	r18, 0x66	; 102
    11bc:	36 e2       	ldi	r19, 0x26	; 38
    11be:	45 e7       	ldi	r20, 0x75	; 117
    11c0:	5e e3       	ldi	r21, 0x3E	; 62
    11c2:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__mulsf3>
    11c6:	f6 01       	movw	r30, r12
    11c8:	60 83       	st	Z, r22
    11ca:	71 83       	std	Z+1, r23	; 0x01
    11cc:	82 83       	std	Z+2, r24	; 0x02
    11ce:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    11d4:	98 2f       	mov	r25, r24
    11d6:	88 27       	eor	r24, r24
	iy |= datain[3];
    11d8:	2c 81       	ldd	r18, Y+4	; 0x04
    11da:	82 2b       	or	r24, r18
	iy /= 4;
    11dc:	bc 01       	movw	r22, r24
    11de:	77 23       	and	r23, r23
    11e0:	14 f4       	brge	.+4      	; 0x11e6 <get_orientation+0xac>
    11e2:	6d 5f       	subi	r22, 0xFD	; 253
    11e4:	7f 4f       	sbci	r23, 0xFF	; 255
    11e6:	75 95       	asr	r23
    11e8:	67 95       	ror	r22
    11ea:	75 95       	asr	r23
    11ec:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    11ee:	07 2e       	mov	r0, r23
    11f0:	00 0c       	add	r0, r0
    11f2:	88 0b       	sbc	r24, r24
    11f4:	99 0b       	sbc	r25, r25
    11f6:	0e 94 a8 19 	call	0x3350	; 0x3350 <__floatsisf>
    11fa:	26 e6       	ldi	r18, 0x66	; 102
    11fc:	36 e2       	ldi	r19, 0x26	; 38
    11fe:	45 e7       	ldi	r20, 0x75	; 117
    1200:	5e e3       	ldi	r21, 0x3E	; 62
    1202:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__mulsf3>
    1206:	f7 01       	movw	r30, r14
    1208:	60 83       	st	Z, r22
    120a:	71 83       	std	Z+1, r23	; 0x01
    120c:	82 83       	std	Z+2, r24	; 0x02
    120e:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    1214:	98 2f       	mov	r25, r24
    1216:	88 27       	eor	r24, r24
	iz |= datain[5];
    1218:	2e 81       	ldd	r18, Y+6	; 0x06
    121a:	82 2b       	or	r24, r18
	iz /= 4;
    121c:	bc 01       	movw	r22, r24
    121e:	77 23       	and	r23, r23
    1220:	14 f4       	brge	.+4      	; 0x1226 <get_orientation+0xec>
    1222:	6d 5f       	subi	r22, 0xFD	; 253
    1224:	7f 4f       	sbci	r23, 0xFF	; 255
    1226:	75 95       	asr	r23
    1228:	67 95       	ror	r22
    122a:	75 95       	asr	r23
    122c:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    122e:	07 2e       	mov	r0, r23
    1230:	00 0c       	add	r0, r0
    1232:	88 0b       	sbc	r24, r24
    1234:	99 0b       	sbc	r25, r25
    1236:	0e 94 a8 19 	call	0x3350	; 0x3350 <__floatsisf>
    123a:	26 e6       	ldi	r18, 0x66	; 102
    123c:	36 e2       	ldi	r19, 0x26	; 38
    123e:	45 e7       	ldi	r20, 0x75	; 117
    1240:	5e e3       	ldi	r21, 0x3E	; 62
    1242:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__mulsf3>
    1246:	f8 01       	movw	r30, r16
    1248:	60 83       	st	Z, r22
    124a:	71 83       	std	Z+1, r23	; 0x01
    124c:	82 83       	std	Z+2, r24	; 0x02
    124e:	93 83       	std	Z+3, r25	; 0x03

	return(0);

}
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	26 96       	adiw	r28, 0x06	; 6
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	ff 90       	pop	r15
    1262:	ef 90       	pop	r14
    1264:	df 90       	pop	r13
    1266:	cf 90       	pop	r12
    1268:	08 95       	ret

0000126a <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	d6 2f       	mov	r29, r22
    1272:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
    127a:	c8 2f       	mov	r28, r24
    127c:	88 23       	and	r24, r24
    127e:	21 f0       	breq	.+8      	; 0x1288 <write_MMA8451+0x1e>
		stop_TWI();
    1280:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
		return(retval);
    1284:	8c 2f       	mov	r24, r28
    1286:	17 c0       	rjmp	.+46     	; 0x12b6 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1288:	8d 2f       	mov	r24, r29
    128a:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
    128e:	c8 2f       	mov	r28, r24
    1290:	88 23       	and	r24, r24
    1292:	21 f0       	breq	.+8      	; 0x129c <write_MMA8451+0x32>
		stop_TWI();
    1294:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
		return(retval);
    1298:	8c 2f       	mov	r24, r28
    129a:	0d c0       	rjmp	.+26     	; 0x12b6 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    129c:	81 2f       	mov	r24, r17
    129e:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
    12a2:	c8 2f       	mov	r28, r24
    12a4:	88 23       	and	r24, r24
    12a6:	21 f0       	breq	.+8      	; 0x12b0 <write_MMA8451+0x46>
		stop_TWI();
    12a8:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
		return(retval);
    12ac:	8c 2f       	mov	r24, r28
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <write_MMA8451+0x4c>
	}
	stop_TWI();
    12b0:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>
	return(0);
    12b4:	80 e0       	ldi	r24, 0x00	; 0
	
}
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	08 95       	ret

000012be <init_MMA8451>:
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/

uint8_t init_MMA8451(void)
{
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	1f 92       	push	r1
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    12c8:	40 e4       	ldi	r20, 0x40	; 64
    12ca:	6b e2       	ldi	r22, 0x2B	; 43
    12cc:	8d e1       	ldi	r24, 0x1D	; 29
    12ce:	0e 94 35 09 	call	0x126a	; 0x126a <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    12d2:	21 e0       	ldi	r18, 0x01	; 1
    12d4:	ae 01       	movw	r20, r28
    12d6:	4f 5f       	subi	r20, 0xFF	; 255
    12d8:	5f 4f       	sbci	r21, 0xFF	; 255
    12da:	6b e2       	ldi	r22, 0x2B	; 43
    12dc:	8d e1       	ldi	r24, 0x1D	; 29
    12de:	0e 94 69 08 	call	0x10d2	; 0x10d2 <read_MMA8451>
	while (retval & 0x40) {
    12e2:	08 c0       	rjmp	.+16     	; 0x12f4 <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    12e4:	21 e0       	ldi	r18, 0x01	; 1
    12e6:	ae 01       	movw	r20, r28
    12e8:	4f 5f       	subi	r20, 0xFF	; 255
    12ea:	5f 4f       	sbci	r21, 0xFF	; 255
    12ec:	6b e2       	ldi	r22, 0x2B	; 43
    12ee:	8d e1       	ldi	r24, 0x1D	; 29
    12f0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	86 fd       	sbrc	r24, 6
    12f8:	f5 cf       	rjmp	.-22     	; 0x12e4 <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    12fa:	40 ec       	ldi	r20, 0xC0	; 192
    12fc:	6f e0       	ldi	r22, 0x0F	; 15
    12fe:	8d e1       	ldi	r24, 0x1D	; 29
    1300:	0e 94 35 09 	call	0x126a	; 0x126a <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    1304:	42 e0       	ldi	r20, 0x02	; 2
    1306:	6b e2       	ldi	r22, 0x2B	; 43
    1308:	8d e1       	ldi	r24, 0x1D	; 29
    130a:	0e 94 35 09 	call	0x126a	; 0x126a <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    130e:	4d e3       	ldi	r20, 0x3D	; 61
    1310:	6a e2       	ldi	r22, 0x2A	; 42
    1312:	8d e1       	ldi	r24, 0x1D	; 29
    1314:	0e 94 35 09 	call	0x126a	; 0x126a <write_MMA8451>

	return(retval);

}
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	0f 90       	pop	r0
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	08 95       	ret

00001322 <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    1322:	ef 92       	push	r14
    1324:	ff 92       	push	r15
    1326:	0f 93       	push	r16
    1328:	1f 93       	push	r17
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	2e 97       	sbiw	r28, 0x0e	; 14
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    133a:	88 e0       	ldi	r24, 0x08	; 8
    133c:	e2 ed       	ldi	r30, 0xD2	; 210
    133e:	f2 e8       	ldi	r31, 0x82	; 130
    1340:	de 01       	movw	r26, r28
    1342:	11 96       	adiw	r26, 0x01	; 1
    1344:	01 90       	ld	r0, Z+
    1346:	0d 92       	st	X+, r0
    1348:	8a 95       	dec	r24
    134a:	e1 f7       	brne	.-8      	; 0x1344 <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    134c:	f8 01       	movw	r30, r16
    134e:	01 90       	ld	r0, Z+
    1350:	00 20       	and	r0, r0
    1352:	e9 f7       	brne	.-6      	; 0x134e <checksum_NMEA+0x2c>
    1354:	31 97       	sbiw	r30, 0x01	; 1
    1356:	3e 2f       	mov	r19, r30
    1358:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    135a:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	06 c0       	rjmp	.+12     	; 0x136c <checksum_NMEA+0x4a>
		checksum ^= str[i];
    1360:	f8 01       	movw	r30, r16
    1362:	e8 0f       	add	r30, r24
    1364:	f1 1d       	adc	r31, r1
    1366:	20 81       	ld	r18, Z
    1368:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    136a:	8f 5f       	subi	r24, 0xFF	; 255
    136c:	83 17       	cp	r24, r19
    136e:	c0 f3       	brcs	.-16     	; 0x1360 <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1370:	1f 92       	push	r1
    1372:	9f 93       	push	r25
    1374:	ce 01       	movw	r24, r28
    1376:	01 96       	adiw	r24, 0x01	; 1
    1378:	9f 93       	push	r25
    137a:	8f 93       	push	r24
    137c:	7e 01       	movw	r14, r28
    137e:	89 e0       	ldi	r24, 0x09	; 9
    1380:	e8 0e       	add	r14, r24
    1382:	f1 1c       	adc	r15, r1
    1384:	ff 92       	push	r15
    1386:	ef 92       	push	r14
    1388:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
	strcat(str, chksum);
    138c:	b7 01       	movw	r22, r14
    138e:	c8 01       	movw	r24, r16
    1390:	0e 94 0b 20 	call	0x4016	; 0x4016 <strcat>

}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	2e 96       	adiw	r28, 0x0e	; 14
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	ff 90       	pop	r15
    13b0:	ef 90       	pop	r14
    13b2:	08 95       	ret

000013b4 <printError>:
/*------------------------------------------------------------------------------
void format_ERR(char *str)
	Returns an error line
------------------------------------------------------------------------------*/
void printError(uint8_t errorVal, char *string)
{
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	cf 55       	subi	r28, 0x5F	; 95
    13c2:	d1 09       	sbc	r29, r1
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	de bf       	out	0x3e, r29	; 62

	char strbuf[81];
	const char errformat[] = "$S%dERR,%d,%s";
    13c8:	9e e0       	ldi	r25, 0x0E	; 14
    13ca:	ea ed       	ldi	r30, 0xDA	; 218
    13cc:	f2 e8       	ldi	r31, 0x82	; 130
    13ce:	de 01       	movw	r26, r28
    13d0:	ae 5a       	subi	r26, 0xAE	; 174
    13d2:	bf 4f       	sbci	r27, 0xFF	; 255
    13d4:	01 90       	ld	r0, Z+
    13d6:	0d 92       	st	X+, r0
    13d8:	9a 95       	dec	r25
    13da:	e1 f7       	brne	.-8      	; 0x13d4 <printError+0x20>

	sprintf(strbuf, errformat, get_SPECID, errorVal, string);
    13dc:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    13e0:	92 ff       	sbrs	r25, 2
    13e2:	03 c0       	rjmp	.+6      	; 0x13ea <printError+0x36>
    13e4:	92 e0       	ldi	r25, 0x02	; 2
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <printError+0x3a>
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	7f 93       	push	r23
    13f0:	6f 93       	push	r22
    13f2:	1f 92       	push	r1
    13f4:	8f 93       	push	r24
    13f6:	2f 93       	push	r18
    13f8:	9f 93       	push	r25
    13fa:	ce 01       	movw	r24, r28
    13fc:	8e 5a       	subi	r24, 0xAE	; 174
    13fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1400:	9f 93       	push	r25
    1402:	8f 93       	push	r24
    1404:	8e 01       	movw	r16, r28
    1406:	0f 5f       	subi	r16, 0xFF	; 255
    1408:	1f 4f       	sbci	r17, 0xFF	; 255
    140a:	1f 93       	push	r17
    140c:	0f 93       	push	r16
    140e:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
	checksum_NMEA(strbuf);
    1412:	c8 01       	movw	r24, r16
    1414:	0e 94 91 09 	call	0x1322	; 0x1322 <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
    1418:	f8 01       	movw	r30, r16
    141a:	01 90       	ld	r0, Z+
    141c:	00 20       	and	r0, r0
    141e:	e9 f7       	brne	.-6      	; 0x141a <printError+0x66>
    1420:	31 97       	sbiw	r30, 0x01	; 1
    1422:	af 01       	movw	r20, r30
    1424:	40 1b       	sub	r20, r16
    1426:	51 0b       	sbc	r21, r17
    1428:	b8 01       	movw	r22, r16
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	0e 94 e7 16 	call	0x2dce	; 0x2dce <send_USART>

}
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	c1 5a       	subi	r28, 0xA1	; 161
    1436:	df 4f       	sbci	r29, 0xFF	; 255
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	08 95       	ret

00001446 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	d6 2f       	mov	r29, r22
    144c:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <start_TWI>
	write_TWI(type);
    1454:	8d 2f       	mov	r24, r29
    1456:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
	write_TWI(byteToSend);
    145a:	8c 2f       	mov	r24, r28
    145c:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <write_TWI>
	stop_TWI();
    1460:	0e 94 76 16 	call	0x2cec	; 0x2cec <stop_TWI>

}
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	08 95       	ret

0000146a <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
    146a:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    146c:	e0 e6       	ldi	r30, 0x60	; 96
    146e:	f4 e0       	ldi	r31, 0x04	; 4
    1470:	90 e4       	ldi	r25, 0x40	; 64
    1472:	96 83       	std	Z+6, r25	; 0x06
	PORTD.DIRSET = PIN6_bm;
    1474:	91 83       	std	Z+1, r25	; 0x01
    1476:	a1 e4       	ldi	r26, 0x41	; 65
    1478:	b3 e0       	ldi	r27, 0x03	; 3
    147a:	11 97       	sbiw	r26, 0x01	; 1
    147c:	f1 f7       	brne	.-4      	; 0x147a <init_OLED+0x10>
    147e:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    1480:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
    1482:	81 11       	cpse	r24, r1
    1484:	02 c0       	rjmp	.+4      	; 0x148a <init_OLED+0x20>
		twiaddr = OLEDADDR0;
    1486:	cc e3       	ldi	r28, 0x3C	; 60
    1488:	01 c0       	rjmp	.+2      	; 0x148c <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
    148a:	cd e3       	ldi	r28, 0x3D	; 61
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    148c:	4a e2       	ldi	r20, 0x2A	; 42
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	8c 2f       	mov	r24, r28
    1492:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    1496:	41 e7       	ldi	r20, 0x71	; 113
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	8c 2f       	mov	r24, r28
    149c:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    14a0:	4c e5       	ldi	r20, 0x5C	; 92
    14a2:	60 e4       	ldi	r22, 0x40	; 64
    14a4:	8c 2f       	mov	r24, r28
    14a6:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    14aa:	48 e2       	ldi	r20, 0x28	; 40
    14ac:	60 e0       	ldi	r22, 0x00	; 0
    14ae:	8c 2f       	mov	r24, r28
    14b0:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    14b4:	48 e0       	ldi	r20, 0x08	; 8
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	8c 2f       	mov	r24, r28
    14ba:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    14be:	4a e2       	ldi	r20, 0x2A	; 42
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	8c 2f       	mov	r24, r28
    14c4:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    14c8:	49 e7       	ldi	r20, 0x79	; 121
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	8c 2f       	mov	r24, r28
    14ce:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    14d2:	45 ed       	ldi	r20, 0xD5	; 213
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	8c 2f       	mov	r24, r28
    14d8:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    14dc:	40 e7       	ldi	r20, 0x70	; 112
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	8c 2f       	mov	r24, r28
    14e2:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    14e6:	48 e7       	ldi	r20, 0x78	; 120
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	8c 2f       	mov	r24, r28
    14ec:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    14f0:	48 e0       	ldi	r20, 0x08	; 8
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	8c 2f       	mov	r24, r28
    14f6:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    14fa:	46 e0       	ldi	r20, 0x06	; 6
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	8c 2f       	mov	r24, r28
    1500:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1504:	42 e7       	ldi	r20, 0x72	; 114
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	8c 2f       	mov	r24, r28
    150a:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    150e:	40 e0       	ldi	r20, 0x00	; 0
    1510:	60 e4       	ldi	r22, 0x40	; 64
    1512:	8c 2f       	mov	r24, r28
    1514:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1518:	4a e2       	ldi	r20, 0x2A	; 42
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	8c 2f       	mov	r24, r28
    151e:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1522:	49 e7       	ldi	r20, 0x79	; 121
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	8c 2f       	mov	r24, r28
    1528:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    152c:	4a ed       	ldi	r20, 0xDA	; 218
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	8c 2f       	mov	r24, r28
    1532:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1536:	40 e0       	ldi	r20, 0x00	; 0
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	8c 2f       	mov	r24, r28
    153c:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    1540:	4c ed       	ldi	r20, 0xDC	; 220
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	8c 2f       	mov	r24, r28
    1546:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    154a:	40 e0       	ldi	r20, 0x00	; 0
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	8c 2f       	mov	r24, r28
    1550:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    1554:	41 e8       	ldi	r20, 0x81	; 129
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	8c 2f       	mov	r24, r28
    155a:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    155e:	4f e7       	ldi	r20, 0x7F	; 127
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	8c 2f       	mov	r24, r28
    1564:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1568:	49 ed       	ldi	r20, 0xD9	; 217
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	8c 2f       	mov	r24, r28
    156e:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    1572:	41 ef       	ldi	r20, 0xF1	; 241
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	8c 2f       	mov	r24, r28
    1578:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    157c:	4b ed       	ldi	r20, 0xDB	; 219
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	8c 2f       	mov	r24, r28
    1582:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    1586:	40 e4       	ldi	r20, 0x40	; 64
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	8c 2f       	mov	r24, r28
    158c:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1590:	48 e7       	ldi	r20, 0x78	; 120
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	8c 2f       	mov	r24, r28
    1596:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    159a:	48 e2       	ldi	r20, 0x28	; 40
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	8c 2f       	mov	r24, r28
    15a0:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    15a4:	41 e0       	ldi	r20, 0x01	; 1
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	8c 2f       	mov	r24, r28
    15aa:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    15ae:	40 e8       	ldi	r20, 0x80	; 128
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	8c 2f       	mov	r24, r28
    15b4:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    15b8:	4c e0       	ldi	r20, 0x0C	; 12
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	8c 2f       	mov	r24, r28
    15be:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
    15c2:	ba e6       	ldi	r27, 0x6A	; 106
    15c4:	24 e0       	ldi	r18, 0x04	; 4
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	b1 50       	subi	r27, 0x01	; 1
    15ca:	20 40       	sbci	r18, 0x00	; 0
    15cc:	80 40       	sbci	r24, 0x00	; 0
    15ce:	e1 f7       	brne	.-8      	; 0x15c8 <init_OLED+0x15e>
    15d0:	00 c0       	rjmp	.+0      	; 0x15d2 <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
    15d2:	10 92 85 2a 	sts	0x2A85, r1	; 0x802a85 <timerOLED>
    15d6:	10 92 86 2a 	sts	0x2A86, r1	; 0x802a86 <timerOLED+0x1>
	timeoutOLED = 5;
    15da:	85 e0       	ldi	r24, 0x05	; 5
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	80 93 87 2a 	sts	0x2A87, r24	; 0x802a87 <timeoutOLED>
    15e2:	90 93 88 2a 	sts	0x2A88, r25	; 0x802a88 <timeoutOLED+0x1>

}
    15e6:	cf 91       	pop	r28
    15e8:	08 95       	ret

000015ea <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    15ea:	ef 92       	push	r14
    15ec:	ff 92       	push	r15
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	e2 97       	sbiw	r28, 0x32	; 50
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    1602:	91 e1       	ldi	r25, 0x11	; 17
    1604:	e8 ee       	ldi	r30, 0xE8	; 232
    1606:	f2 e8       	ldi	r31, 0x82	; 130
    1608:	de 01       	movw	r26, r28
    160a:	92 96       	adiw	r26, 0x22	; 34
    160c:	01 90       	ld	r0, Z+
    160e:	0d 92       	st	X+, r0
    1610:	9a 95       	dec	r25
    1612:	e1 f7       	brne	.-8      	; 0x160c <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1614:	81 11       	cpse	r24, r1
    1616:	02 c0       	rjmp	.+4      	; 0x161c <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1618:	0c e3       	ldi	r16, 0x3C	; 60
    161a:	01 c0       	rjmp	.+2      	; 0x161e <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    161c:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    161e:	ce 01       	movw	r24, r28
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	7c 01       	movw	r14, r24
    1624:	0e 94 16 20 	call	0x402c	; 0x402c <strcpy>
	if (strlen(strbuf) > 16) {
    1628:	f7 01       	movw	r30, r14
    162a:	01 90       	ld	r0, Z+
    162c:	00 20       	and	r0, r0
    162e:	e9 f7       	brne	.-6      	; 0x162a <writestr_OLED+0x40>
    1630:	31 97       	sbiw	r30, 0x01	; 1
    1632:	ee 19       	sub	r30, r14
    1634:	ff 09       	sbc	r31, r15
    1636:	71 97       	sbiw	r30, 0x11	; 17
    1638:	08 f0       	brcs	.+2      	; 0x163c <writestr_OLED+0x52>
		strbuf[16] = '\0';
    163a:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    163c:	be 01       	movw	r22, r28
    163e:	6e 5d       	subi	r22, 0xDE	; 222
    1640:	7f 4f       	sbci	r23, 0xFF	; 255
    1642:	ce 01       	movw	r24, r28
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	0e 94 0b 20 	call	0x4016	; 0x4016 <strcat>

	if (lineno == 1) {
    164a:	11 30       	cpi	r17, 0x01	; 1
    164c:	39 f4       	brne	.+14     	; 0x165c <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    164e:	40 e8       	ldi	r20, 0x80	; 128
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	80 2f       	mov	r24, r16
    1654:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1658:	10 e0       	ldi	r17, 0x00	; 0
    165a:	12 c0       	rjmp	.+36     	; 0x1680 <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    165c:	40 ec       	ldi	r20, 0xC0	; 192
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	80 2f       	mov	r24, r16
    1662:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>
    1666:	f8 cf       	rjmp	.-16     	; 0x1658 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1668:	e1 e0       	ldi	r30, 0x01	; 1
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	ec 0f       	add	r30, r28
    166e:	fd 1f       	adc	r31, r29
    1670:	e1 0f       	add	r30, r17
    1672:	f1 1d       	adc	r31, r1
    1674:	40 81       	ld	r20, Z
    1676:	60 e4       	ldi	r22, 0x40	; 64
    1678:	80 2f       	mov	r24, r16
    167a:	0e 94 23 0a 	call	0x1446	; 0x1446 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    167e:	1f 5f       	subi	r17, 0xFF	; 255
    1680:	10 31       	cpi	r17, 0x10	; 16
    1682:	90 f3       	brcs	.-28     	; 0x1668 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	80 93 85 2a 	sts	0x2A85, r24	; 0x802a85 <timerOLED>
    168c:	90 93 86 2a 	sts	0x2A86, r25	; 0x802a86 <timerOLED+0x1>

}
    1690:	e2 96       	adiw	r28, 0x32	; 50
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ff 90       	pop	r15
    16a0:	ef 90       	pop	r14
    16a2:	08 95       	ret

000016a4 <clear_OLED>:
/*------------------------------------------------------------------------------
void clear_OLED(uint8_t displaynumber)
	Clears the OLED screen by writing blank spaces to both lines.
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    16a4:	1f 93       	push	r17
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	61 97       	sbiw	r28, 0x11	; 17
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	18 2f       	mov	r17, r24

	char blanks[] = "                ";	// Does const put this in flash?
    16b6:	81 e1       	ldi	r24, 0x11	; 17
    16b8:	e8 ee       	ldi	r30, 0xE8	; 232
    16ba:	f2 e8       	ldi	r31, 0x82	; 130
    16bc:	de 01       	movw	r26, r28
    16be:	11 96       	adiw	r26, 0x01	; 1
    16c0:	01 90       	ld	r0, Z+
    16c2:	0d 92       	st	X+, r0
    16c4:	8a 95       	dec	r24
    16c6:	e1 f7       	brne	.-8      	; 0x16c0 <clear_OLED+0x1c>

	writestr_OLED(displaynumber, blanks, 1);
    16c8:	41 e0       	ldi	r20, 0x01	; 1
    16ca:	be 01       	movw	r22, r28
    16cc:	6f 5f       	subi	r22, 0xFF	; 255
    16ce:	7f 4f       	sbci	r23, 0xFF	; 255
    16d0:	81 2f       	mov	r24, r17
    16d2:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <writestr_OLED>
	writestr_OLED(displaynumber, blanks, 2);
    16d6:	42 e0       	ldi	r20, 0x02	; 2
    16d8:	be 01       	movw	r22, r28
    16da:	6f 5f       	subi	r22, 0xFF	; 255
    16dc:	7f 4f       	sbci	r23, 0xFF	; 255
    16de:	81 2f       	mov	r24, r17
    16e0:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <writestr_OLED>
	timerOLED = 0;
    16e4:	10 92 85 2a 	sts	0x2A85, r1	; 0x802a85 <timerOLED>
    16e8:	10 92 86 2a 	sts	0x2A86, r1	; 0x802a86 <timerOLED+0x1>

}
    16ec:	61 96       	adiw	r28, 0x11	; 17
    16ee:	cd bf       	out	0x3d, r28	; 61
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	1f 91       	pop	r17
    16f8:	08 95       	ret

000016fa <init_PNEU>:
uint8_t init_PNEU(void)
{

	uint8_t retval;

	if ((retval = write_MCP23008(HIGHCURRENT, IODIR, 0x00))) {
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	84 e2       	ldi	r24, 0x24	; 36
    1700:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <write_MCP23008>
    1704:	81 11       	cpse	r24, r1
    1706:	35 c0       	rjmp	.+106    	; 0x1772 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, 0x00))) {
    1708:	40 e0       	ldi	r20, 0x00	; 0
    170a:	6a e0       	ldi	r22, 0x0A	; 10
    170c:	84 e2       	ldi	r24, 0x24	; 36
    170e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <write_MCP23008>
    1712:	81 11       	cpse	r24, r1
    1714:	2e c0       	rjmp	.+92     	; 0x1772 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IODIR, 0xFE))) {	// Inputs
    1716:	4e ef       	ldi	r20, 0xFE	; 254
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	81 e2       	ldi	r24, 0x21	; 33
    171c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <write_MCP23008>
    1720:	81 11       	cpse	r24, r1
    1722:	27 c0       	rjmp	.+78     	; 0x1772 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IPOL, 0x00))) {
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	61 e0       	ldi	r22, 0x01	; 1
    1728:	81 e2       	ldi	r24, 0x21	; 33
    172a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <write_MCP23008>
    172e:	81 11       	cpse	r24, r1
    1730:	20 c0       	rjmp	.+64     	; 0x1772 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100))) {
    1732:	4c ef       	ldi	r20, 0xFC	; 252
    1734:	62 e0       	ldi	r22, 0x02	; 2
    1736:	81 e2       	ldi	r24, 0x21	; 33
    1738:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <write_MCP23008>
    173c:	81 11       	cpse	r24, r1
    173e:	19 c0       	rjmp	.+50     	; 0x1772 <init_PNEU+0x78>
			return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, INTCON, 0x00))) {
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	64 e0       	ldi	r22, 0x04	; 4
    1744:	81 e2       	ldi	r24, 0x21	; 33
    1746:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <write_MCP23008>
    174a:	81 11       	cpse	r24, r1
    174c:	12 c0       	rjmp	.+36     	; 0x1772 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IOCON, 0x20))) { // Don't increment addr
    174e:	40 e2       	ldi	r20, 0x20	; 32
    1750:	65 e0       	ldi	r22, 0x05	; 5
    1752:	81 e2       	ldi	r24, 0x21	; 33
    1754:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <write_MCP23008>
    1758:	81 11       	cpse	r24, r1
    175a:	0b c0       	rjmp	.+22     	; 0x1772 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPPU, 0x7F))) { // Pullups (not really needed)
    175c:	4f e7       	ldi	r20, 0x7F	; 127
    175e:	66 e0       	ldi	r22, 0x06	; 6
    1760:	81 e2       	ldi	r24, 0x21	; 33
    1762:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <write_MCP23008>
    1766:	81 11       	cpse	r24, r1
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <init_PNEU+0x78>
		return(retval);
	}
	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    176a:	89 e0       	ldi	r24, 0x09	; 9
    176c:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	return(0);
    1770:	80 e0       	ldi	r24, 0x00	; 0

}
    1772:	08 95       	ret

00001774 <read_PNEUSENSORS>:
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
{
    1774:	cf 92       	push	r12
    1776:	df 92       	push	r13
    1778:	ef 92       	push	r14
    177a:	ff 92       	push	r15
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	6c 01       	movw	r12, r24
    1786:	8b 01       	movw	r16, r22
    1788:	7a 01       	movw	r14, r20
    178a:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);
    178c:	69 e0       	ldi	r22, 0x09	; 9
    178e:	81 e2       	ldi	r24, 0x21	; 33
    1790:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1794:	98 2f       	mov	r25, r24
    1796:	92 95       	swap	r25
    1798:	96 95       	lsr	r25
    179a:	96 95       	lsr	r25
    179c:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    179e:	91 30       	cpi	r25, 0x01	; 1
    17a0:	21 f4       	brne	.+8      	; 0x17aa <read_PNEUSENSORS+0x36>
		*shutter = 'c';
    17a2:	93 e6       	ldi	r25, 0x63	; 99
    17a4:	f6 01       	movw	r30, r12
    17a6:	90 83       	st	Z, r25
    17a8:	0f c0       	rjmp	.+30     	; 0x17c8 <read_PNEUSENSORS+0x54>
	} else if (state == 2) {
    17aa:	92 30       	cpi	r25, 0x02	; 2
    17ac:	21 f4       	brne	.+8      	; 0x17b6 <read_PNEUSENSORS+0x42>
		*shutter = 'o';
    17ae:	9f e6       	ldi	r25, 0x6F	; 111
    17b0:	f6 01       	movw	r30, r12
    17b2:	90 83       	st	Z, r25
    17b4:	09 c0       	rjmp	.+18     	; 0x17c8 <read_PNEUSENSORS+0x54>
	} else if (state == 3) {
    17b6:	93 30       	cpi	r25, 0x03	; 3
    17b8:	21 f4       	brne	.+8      	; 0x17c2 <read_PNEUSENSORS+0x4e>
		*shutter = 't';
    17ba:	94 e7       	ldi	r25, 0x74	; 116
    17bc:	f6 01       	movw	r30, r12
    17be:	90 83       	st	Z, r25
    17c0:	03 c0       	rjmp	.+6      	; 0x17c8 <read_PNEUSENSORS+0x54>
	} else {
		*shutter = 'x';
    17c2:	98 e7       	ldi	r25, 0x78	; 120
    17c4:	f6 01       	movw	r30, r12
    17c6:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    17c8:	98 2f       	mov	r25, r24
    17ca:	96 95       	lsr	r25
    17cc:	96 95       	lsr	r25
	state &= 0b00000011;
    17ce:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    17d0:	91 30       	cpi	r25, 0x01	; 1
    17d2:	21 f4       	brne	.+8      	; 0x17dc <read_PNEUSENSORS+0x68>
		*right = 'c';
    17d4:	93 e6       	ldi	r25, 0x63	; 99
    17d6:	f7 01       	movw	r30, r14
    17d8:	90 83       	st	Z, r25
    17da:	0f c0       	rjmp	.+30     	; 0x17fa <read_PNEUSENSORS+0x86>
	} else if (state == 2) {
    17dc:	92 30       	cpi	r25, 0x02	; 2
    17de:	21 f4       	brne	.+8      	; 0x17e8 <read_PNEUSENSORS+0x74>
		*right = 'o';
    17e0:	9f e6       	ldi	r25, 0x6F	; 111
    17e2:	f7 01       	movw	r30, r14
    17e4:	90 83       	st	Z, r25
    17e6:	09 c0       	rjmp	.+18     	; 0x17fa <read_PNEUSENSORS+0x86>
	} else if (state == 3) {
    17e8:	93 30       	cpi	r25, 0x03	; 3
    17ea:	21 f4       	brne	.+8      	; 0x17f4 <read_PNEUSENSORS+0x80>
		*right = 't';
    17ec:	94 e7       	ldi	r25, 0x74	; 116
    17ee:	f7 01       	movw	r30, r14
    17f0:	90 83       	st	Z, r25
    17f2:	03 c0       	rjmp	.+6      	; 0x17fa <read_PNEUSENSORS+0x86>
	} else {
		*right = 'x';
    17f4:	98 e7       	ldi	r25, 0x78	; 120
    17f6:	f7 01       	movw	r30, r14
    17f8:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    17fa:	98 2f       	mov	r25, r24
    17fc:	92 95       	swap	r25
    17fe:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    1800:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1802:	91 30       	cpi	r25, 0x01	; 1
    1804:	21 f4       	brne	.+8      	; 0x180e <__DATA_REGION_LENGTH__+0xe>
		*left = 'o';
    1806:	9f e6       	ldi	r25, 0x6F	; 111
    1808:	f8 01       	movw	r30, r16
    180a:	90 83       	st	Z, r25
    180c:	0f c0       	rjmp	.+30     	; 0x182c <__DATA_REGION_LENGTH__+0x2c>
	} else if (state == 2) {
    180e:	92 30       	cpi	r25, 0x02	; 2
    1810:	21 f4       	brne	.+8      	; 0x181a <__DATA_REGION_LENGTH__+0x1a>
		*left = 'c';
    1812:	93 e6       	ldi	r25, 0x63	; 99
    1814:	f8 01       	movw	r30, r16
    1816:	90 83       	st	Z, r25
    1818:	09 c0       	rjmp	.+18     	; 0x182c <__DATA_REGION_LENGTH__+0x2c>
	} else if (state == 3) {
    181a:	93 30       	cpi	r25, 0x03	; 3
    181c:	21 f4       	brne	.+8      	; 0x1826 <__DATA_REGION_LENGTH__+0x26>
		*left = 't';
    181e:	94 e7       	ldi	r25, 0x74	; 116
    1820:	f8 01       	movw	r30, r16
    1822:	90 83       	st	Z, r25
    1824:	03 c0       	rjmp	.+6      	; 0x182c <__DATA_REGION_LENGTH__+0x2c>
	} else {
		*left = 'x';
    1826:	98 e7       	ldi	r25, 0x78	; 120
    1828:	f8 01       	movw	r30, r16
    182a:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    182c:	81 ff       	sbrs	r24, 1
    182e:	03 c0       	rjmp	.+6      	; 0x1836 <__DATA_REGION_LENGTH__+0x36>
		*air = '0';
    1830:	80 e3       	ldi	r24, 0x30	; 48
    1832:	88 83       	st	Y, r24
    1834:	02 c0       	rjmp	.+4      	; 0x183a <__DATA_REGION_LENGTH__+0x3a>
	} else {
		*air = '1';
    1836:	81 e3       	ldi	r24, 0x31	; 49
    1838:	88 83       	st	Y, r24
	}
}
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	df 90       	pop	r13
    1848:	cf 90       	pop	r12
    184a:	08 95       	ret

0000184c <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	d8 2f       	mov	r29, r24
    1852:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    1854:	69 e0       	ldi	r22, 0x09	; 9
    1856:	84 e2       	ldi	r24, 0x24	; 36
    1858:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    185c:	8d 2b       	or	r24, r29
    185e:	48 2f       	mov	r20, r24
    1860:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1862:	6a e0       	ldi	r22, 0x0A	; 10
    1864:	84 e2       	ldi	r24, 0x24	; 36
    1866:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	08 95       	ret

00001870 <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(char mech)
{
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	6a 97       	sbiw	r28, 0x1a	; 26
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    187e:	99 e0       	ldi	r25, 0x09	; 9
    1880:	e1 e1       	ldi	r30, 0x11	; 17
    1882:	f3 e8       	ldi	r31, 0x83	; 131
    1884:	de 01       	movw	r26, r28
    1886:	11 96       	adiw	r26, 0x01	; 1
    1888:	01 90       	ld	r0, Z+
    188a:	0d 92       	st	X+, r0
    188c:	9a 95       	dec	r25
    188e:	e1 f7       	brne	.-8      	; 0x1888 <close_PNEU+0x18>
	char outbuf[17];

	switch (mech) {
    1890:	8c 36       	cpi	r24, 0x6C	; 108
    1892:	31 f1       	breq	.+76     	; 0x18e0 <close_PNEU+0x70>
    1894:	18 f4       	brcc	.+6      	; 0x189c <close_PNEU+0x2c>
    1896:	82 36       	cpi	r24, 0x62	; 98
    1898:	39 f0       	breq	.+14     	; 0x18a8 <close_PNEU+0x38>
    189a:	75 c0       	rjmp	.+234    	; 0x1986 <close_PNEU+0x116>
    189c:	82 37       	cpi	r24, 0x72	; 114
    189e:	c1 f1       	breq	.+112    	; 0x1910 <close_PNEU+0xa0>
    18a0:	83 37       	cpi	r24, 0x73	; 115
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <close_PNEU+0x36>
    18a4:	4d c0       	rjmp	.+154    	; 0x1940 <close_PNEU+0xd0>
    18a6:	6f c0       	rjmp	.+222    	; 0x1986 <close_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    18a8:	6a ee       	ldi	r22, 0xEA	; 234
    18aa:	84 e4       	ldi	r24, 0x44	; 68
    18ac:	0e 94 26 0c 	call	0x184c	; 0x184c <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    18b0:	66 ee       	ldi	r22, 0xE6	; 230
    18b2:	88 e8       	ldi	r24, 0x88	; 136
    18b4:	0e 94 26 0c 	call	0x184c	; 0x184c <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    18b8:	89 ef       	ldi	r24, 0xF9	; 249
    18ba:	92 e8       	ldi	r25, 0x82	; 130
    18bc:	9f 93       	push	r25
    18be:	8f 93       	push	r24
    18c0:	ce 01       	movw	r24, r28
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	9f 93       	push	r25
    18c6:	8f 93       	push	r24
    18c8:	09 96       	adiw	r24, 0x09	; 9
    18ca:	9f 93       	push	r25
    18cc:	8f 93       	push	r24
    18ce:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
			break;
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	47 c0       	rjmp	.+142    	; 0x196e <close_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    18e0:	6a ee       	ldi	r22, 0xEA	; 234
    18e2:	84 e4       	ldi	r24, 0x44	; 68
    18e4:	0e 94 26 0c 	call	0x184c	; 0x184c <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    18e8:	8e ef       	ldi	r24, 0xFE	; 254
    18ea:	92 e8       	ldi	r25, 0x82	; 130
    18ec:	9f 93       	push	r25
    18ee:	8f 93       	push	r24
    18f0:	ce 01       	movw	r24, r28
    18f2:	01 96       	adiw	r24, 0x01	; 1
    18f4:	9f 93       	push	r25
    18f6:	8f 93       	push	r24
    18f8:	09 96       	adiw	r24, 0x09	; 9
    18fa:	9f 93       	push	r25
    18fc:	8f 93       	push	r24
    18fe:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
			break;
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	2f c0       	rjmp	.+94     	; 0x196e <close_PNEU+0xfe>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1910:	66 ee       	ldi	r22, 0xE6	; 230
    1912:	88 e8       	ldi	r24, 0x88	; 136
    1914:	0e 94 26 0c 	call	0x184c	; 0x184c <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1918:	83 e0       	ldi	r24, 0x03	; 3
    191a:	93 e8       	ldi	r25, 0x83	; 131
    191c:	9f 93       	push	r25
    191e:	8f 93       	push	r24
    1920:	ce 01       	movw	r24, r28
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	9f 93       	push	r25
    1926:	8f 93       	push	r24
    1928:	09 96       	adiw	r24, 0x09	; 9
    192a:	9f 93       	push	r25
    192c:	8f 93       	push	r24
    192e:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
			break;
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	17 c0       	rjmp	.+46     	; 0x196e <close_PNEU+0xfe>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1940:	6c ee       	ldi	r22, 0xEC	; 236
    1942:	82 e2       	ldi	r24, 0x22	; 34
    1944:	0e 94 26 0c 	call	0x184c	; 0x184c <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1948:	89 e0       	ldi	r24, 0x09	; 9
    194a:	93 e8       	ldi	r25, 0x83	; 131
    194c:	9f 93       	push	r25
    194e:	8f 93       	push	r24
    1950:	ce 01       	movw	r24, r28
    1952:	01 96       	adiw	r24, 0x01	; 1
    1954:	9f 93       	push	r25
    1956:	8f 93       	push	r24
    1958:	09 96       	adiw	r24, 0x09	; 9
    195a:	9f 93       	push	r25
    195c:	8f 93       	push	r24
    195e:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
			break;
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
			return(ERRORPROMPT);
			break;

	}

	clear_OLED(1);
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1974:	41 e0       	ldi	r20, 0x01	; 1
    1976:	be 01       	movw	r22, r28
    1978:	66 5f       	subi	r22, 0xF6	; 246
    197a:	7f 4f       	sbci	r23, 0xFF	; 255
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <writestr_OLED>
	return(GREATERPROMPT);
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	01 c0       	rjmp	.+2      	; 0x1988 <close_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
			sprintf(outbuf, dformat_CLO, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    1986:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    1988:	6a 96       	adiw	r28, 0x1a	; 26
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	08 95       	ret

00001994 <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(char mechanism)
{
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	69 97       	sbiw	r28, 0x19	; 25
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	de bf       	out	0x3e, r29	; 62


	const char dformat_OPE[] = "Open %s";
    19a2:	98 e0       	ldi	r25, 0x08	; 8
    19a4:	ea e1       	ldi	r30, 0x1A	; 26
    19a6:	f3 e8       	ldi	r31, 0x83	; 131
    19a8:	de 01       	movw	r26, r28
    19aa:	11 96       	adiw	r26, 0x01	; 1
    19ac:	01 90       	ld	r0, Z+
    19ae:	0d 92       	st	X+, r0
    19b0:	9a 95       	dec	r25
    19b2:	e1 f7       	brne	.-8      	; 0x19ac <open_PNEU+0x18>
	char outbuf[17];

	switch (mechanism) {
    19b4:	8c 36       	cpi	r24, 0x6C	; 108
    19b6:	31 f1       	breq	.+76     	; 0x1a04 <open_PNEU+0x70>
    19b8:	18 f4       	brcc	.+6      	; 0x19c0 <open_PNEU+0x2c>
    19ba:	82 36       	cpi	r24, 0x62	; 98
    19bc:	39 f0       	breq	.+14     	; 0x19cc <open_PNEU+0x38>
    19be:	75 c0       	rjmp	.+234    	; 0x1aaa <open_PNEU+0x116>
    19c0:	82 37       	cpi	r24, 0x72	; 114
    19c2:	c1 f1       	breq	.+112    	; 0x1a34 <open_PNEU+0xa0>
    19c4:	83 37       	cpi	r24, 0x73	; 115
    19c6:	09 f4       	brne	.+2      	; 0x19ca <open_PNEU+0x36>
    19c8:	4d c0       	rjmp	.+154    	; 0x1a64 <open_PNEU+0xd0>
    19ca:	6f c0       	rjmp	.+222    	; 0x1aaa <open_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    19cc:	6e ea       	ldi	r22, 0xAE	; 174
    19ce:	84 e4       	ldi	r24, 0x44	; 68
    19d0:	0e 94 26 0c 	call	0x184c	; 0x184c <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    19d4:	6e e6       	ldi	r22, 0x6E	; 110
    19d6:	88 e8       	ldi	r24, 0x88	; 136
    19d8:	0e 94 26 0c 	call	0x184c	; 0x184c <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    19dc:	89 ef       	ldi	r24, 0xF9	; 249
    19de:	92 e8       	ldi	r25, 0x82	; 130
    19e0:	9f 93       	push	r25
    19e2:	8f 93       	push	r24
    19e4:	ce 01       	movw	r24, r28
    19e6:	01 96       	adiw	r24, 0x01	; 1
    19e8:	9f 93       	push	r25
    19ea:	8f 93       	push	r24
    19ec:	08 96       	adiw	r24, 0x08	; 8
    19ee:	9f 93       	push	r25
    19f0:	8f 93       	push	r24
    19f2:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
			break;
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	47 c0       	rjmp	.+142    	; 0x1a92 <open_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1a04:	6e ea       	ldi	r22, 0xAE	; 174
    1a06:	84 e4       	ldi	r24, 0x44	; 68
    1a08:	0e 94 26 0c 	call	0x184c	; 0x184c <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1a0c:	8e ef       	ldi	r24, 0xFE	; 254
    1a0e:	92 e8       	ldi	r25, 0x82	; 130
    1a10:	9f 93       	push	r25
    1a12:	8f 93       	push	r24
    1a14:	ce 01       	movw	r24, r28
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	9f 93       	push	r25
    1a1a:	8f 93       	push	r24
    1a1c:	08 96       	adiw	r24, 0x08	; 8
    1a1e:	9f 93       	push	r25
    1a20:	8f 93       	push	r24
    1a22:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
			break;
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	2f c0       	rjmp	.+94     	; 0x1a92 <open_PNEU+0xfe>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1a34:	6e e6       	ldi	r22, 0x6E	; 110
    1a36:	88 e8       	ldi	r24, 0x88	; 136
    1a38:	0e 94 26 0c 	call	0x184c	; 0x184c <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1a3c:	83 e0       	ldi	r24, 0x03	; 3
    1a3e:	93 e8       	ldi	r25, 0x83	; 131
    1a40:	9f 93       	push	r25
    1a42:	8f 93       	push	r24
    1a44:	ce 01       	movw	r24, r28
    1a46:	01 96       	adiw	r24, 0x01	; 1
    1a48:	9f 93       	push	r25
    1a4a:	8f 93       	push	r24
    1a4c:	08 96       	adiw	r24, 0x08	; 8
    1a4e:	9f 93       	push	r25
    1a50:	8f 93       	push	r24
    1a52:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
			break;
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	17 c0       	rjmp	.+46     	; 0x1a92 <open_PNEU+0xfe>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1a64:	6e ec       	ldi	r22, 0xCE	; 206
    1a66:	82 e2       	ldi	r24, 0x22	; 34
    1a68:	0e 94 26 0c 	call	0x184c	; 0x184c <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1a6c:	89 e0       	ldi	r24, 0x09	; 9
    1a6e:	93 e8       	ldi	r25, 0x83	; 131
    1a70:	9f 93       	push	r25
    1a72:	8f 93       	push	r24
    1a74:	ce 01       	movw	r24, r28
    1a76:	01 96       	adiw	r24, 0x01	; 1
    1a78:	9f 93       	push	r25
    1a7a:	8f 93       	push	r24
    1a7c:	08 96       	adiw	r24, 0x08	; 8
    1a7e:	9f 93       	push	r25
    1a80:	8f 93       	push	r24
    1a82:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
			break;
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
		default:
			return(ERRORPROMPT);

	}

	clear_OLED(1);
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1a98:	41 e0       	ldi	r20, 0x01	; 1
    1a9a:	be 01       	movw	r22, r28
    1a9c:	67 5f       	subi	r22, 0xF7	; 247
    1a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <writestr_OLED>
	return(GREATERPROMPT);
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	01 c0       	rjmp	.+2      	; 0x1aac <open_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
			sprintf(outbuf, dformat_OPE, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    1aaa:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    1aac:	69 96       	adiw	r28, 0x19	; 25
    1aae:	cd bf       	out	0x3d, r28	; 61
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	08 95       	ret

00001ab8 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1ab8:	1f 92       	push	r1
    1aba:	0f 92       	push	r0
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	0f 92       	push	r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	2f 93       	push	r18
    1ac4:	3f 93       	push	r19
    1ac6:	4f 93       	push	r20
    1ac8:	5f 93       	push	r21
    1aca:	6f 93       	push	r22
    1acc:	7f 93       	push	r23
    1ace:	8f 93       	push	r24
    1ad0:	9f 93       	push	r25
    1ad2:	af 93       	push	r26
    1ad4:	bf 93       	push	r27
    1ad6:	ef 93       	push	r30
    1ad8:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1ada:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1ade:	88 23       	and	r24, r24
    1ae0:	64 f4       	brge	.+24     	; 0x1afa <__vector_20+0x42>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1ae2:	80 e8       	ldi	r24, 0x80	; 128
    1ae4:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1ae8:	68 e0       	ldi	r22, 0x08	; 8
    1aea:	81 e2       	ldi	r24, 0x21	; 33
    1aec:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <read_MCP23008>
    1af0:	80 93 89 2a 	sts	0x2A89, r24	; 0x802a89 <pneuState>
		toggle_BEEPER;
    1af4:	84 e0       	ldi	r24, 0x04	; 4
    1af6:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x7f4427>
	}

}
    1afa:	ff 91       	pop	r31
    1afc:	ef 91       	pop	r30
    1afe:	bf 91       	pop	r27
    1b00:	af 91       	pop	r26
    1b02:	9f 91       	pop	r25
    1b04:	8f 91       	pop	r24
    1b06:	7f 91       	pop	r23
    1b08:	6f 91       	pop	r22
    1b0a:	5f 91       	pop	r21
    1b0c:	4f 91       	pop	r20
    1b0e:	3f 91       	pop	r19
    1b10:	2f 91       	pop	r18
    1b12:	0f 90       	pop	r0
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	0f 90       	pop	r0
    1b18:	1f 90       	pop	r1
    1b1a:	18 95       	reti

00001b1c <init_PORTS>:
	sure nothing lurks in the background by accident.
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
    1b1c:	e0 e0       	ldi	r30, 0x00	; 0
    1b1e:	f4 e0       	ldi	r31, 0x04	; 4
    1b20:	88 e0       	ldi	r24, 0x08	; 8
    1b22:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
    1b24:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
    1b26:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
    1b28:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
    1b2a:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    1b2c:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    1b2e:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
    1b30:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
    1b32:	e0 e2       	ldi	r30, 0x20	; 32
    1b34:	f4 e0       	ldi	r31, 0x04	; 4
    1b36:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
    1b38:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
    1b3a:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
    1b3c:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
    1b3e:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
    1b40:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
    1b42:	e0 e4       	ldi	r30, 0x40	; 64
    1b44:	f4 e0       	ldi	r31, 0x04	; 4
    1b46:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
    1b48:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
    1b4a:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
    1b4c:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
    1b4e:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
    1b50:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
    1b52:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
    1b54:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b56:	e0 e6       	ldi	r30, 0x60	; 96
    1b58:	f4 e0       	ldi	r31, 0x04	; 4
    1b5a:	94 e0       	ldi	r25, 0x04	; 4
    1b5c:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b5e:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b60:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b62:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b64:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b66:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b68:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b6a:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
    1b6c:	e0 e8       	ldi	r30, 0x80	; 128
    1b6e:	f4 e0       	ldi	r31, 0x04	; 4
    1b70:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
    1b72:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
    1b74:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
    1b76:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
    1b78:	e0 ea       	ldi	r30, 0xA0	; 160
    1b7a:	f4 e0       	ldi	r31, 0x04	; 4
    1b7c:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
    1b7e:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
    1b80:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
    1b82:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
    1b84:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
    1b86:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
    1b88:	86 8b       	std	Z+22, r24	; 0x16
    1b8a:	08 95       	ret

00001b8c <report>:
	Returns
		0 - GREATERPROMPT on success
		1 - ERRORPROMPT on error (invalid command noun)
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1b8c:	2f 92       	push	r2
    1b8e:	3f 92       	push	r3
    1b90:	4f 92       	push	r4
    1b92:	5f 92       	push	r5
    1b94:	6f 92       	push	r6
    1b96:	7f 92       	push	r7
    1b98:	8f 92       	push	r8
    1b9a:	9f 92       	push	r9
    1b9c:	af 92       	push	r10
    1b9e:	bf 92       	push	r11
    1ba0:	cf 92       	push	r12
    1ba2:	df 92       	push	r13
    1ba4:	ef 92       	push	r14
    1ba6:	ff 92       	push	r15
    1ba8:	0f 93       	push	r16
    1baa:	1f 93       	push	r17
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	c8 5d       	subi	r28, 0xD8	; 216
    1bb6:	d2 40       	sbci	r29, 0x02	; 2
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE+10], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "$S%dENV,%s,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%s";
    1bbc:	92 e4       	ldi	r25, 0x42	; 66
    1bbe:	e0 e7       	ldi	r30, 0x70	; 112
    1bc0:	f3 e8       	ldi	r31, 0x83	; 131
    1bc2:	de 01       	movw	r26, r28
    1bc4:	ab 5a       	subi	r26, 0xAB	; 171
    1bc6:	be 4f       	sbci	r27, 0xFE	; 254
    1bc8:	01 90       	ld	r0, Z+
    1bca:	0d 92       	st	X+, r0
    1bcc:	9a 95       	dec	r25
    1bce:	e1 f7       	brne	.-8      	; 0x1bc8 <report+0x3c>
	const char format_MTR[] = "$S%dMTR,%s,%c,%ld,microns,%ld,microns/sec,%d,mA,%s";
    1bd0:	93 e3       	ldi	r25, 0x33	; 51
    1bd2:	e2 eb       	ldi	r30, 0xB2	; 178
    1bd4:	f3 e8       	ldi	r31, 0x83	; 131
    1bd6:	de 01       	movw	r26, r28
    1bd8:	a9 56       	subi	r26, 0x69	; 105
    1bda:	be 4f       	sbci	r27, 0xFE	; 254
    1bdc:	01 90       	ld	r0, Z+
    1bde:	0d 92       	st	X+, r0
    1be0:	9a 95       	dec	r25
    1be2:	e1 f7       	brne	.-8      	; 0x1bdc <report+0x50>
	const char format_ORI[] = "$S%dORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1be4:	90 e2       	ldi	r25, 0x20	; 32
    1be6:	e5 ee       	ldi	r30, 0xE5	; 229
    1be8:	f3 e8       	ldi	r31, 0x83	; 131
    1bea:	de 01       	movw	r26, r28
    1bec:	a6 53       	subi	r26, 0x36	; 54
    1bee:	be 4f       	sbci	r27, 0xFE	; 254
    1bf0:	01 90       	ld	r0, Z+
    1bf2:	0d 92       	st	X+, r0
    1bf4:	9a 95       	dec	r25
    1bf6:	e1 f7       	brne	.-8      	; 0x1bf0 <report+0x64>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1bf8:	92 e1       	ldi	r25, 0x12	; 18
    1bfa:	e5 e0       	ldi	r30, 0x05	; 5
    1bfc:	f4 e8       	ldi	r31, 0x84	; 132
    1bfe:	de 01       	movw	r26, r28
    1c00:	a6 51       	subi	r26, 0x16	; 22
    1c02:	be 4f       	sbci	r27, 0xFE	; 254
    1c04:	01 90       	ld	r0, Z+
    1c06:	0d 92       	st	X+, r0
    1c08:	9a 95       	dec	r25
    1c0a:	e1 f7       	brne	.-8      	; 0x1c04 <report+0x78>
	const char format_PNU[] = "$S%dPNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1c0c:	91 e3       	ldi	r25, 0x31	; 49
    1c0e:	e7 e1       	ldi	r30, 0x17	; 23
    1c10:	f4 e8       	ldi	r31, 0x84	; 132
    1c12:	de 01       	movw	r26, r28
    1c14:	a4 50       	subi	r26, 0x04	; 4
    1c16:	be 4f       	sbci	r27, 0xFE	; 254
    1c18:	01 90       	ld	r0, Z+
    1c1a:	0d 92       	st	X+, r0
    1c1c:	9a 95       	dec	r25
    1c1e:	e1 f7       	brne	.-8      	; 0x1c18 <report+0x8c>
	const char dformat_PN1[] = "left:%c   right:%c";
    1c20:	93 e1       	ldi	r25, 0x13	; 19
    1c22:	e8 e4       	ldi	r30, 0x48	; 72
    1c24:	f4 e8       	ldi	r31, 0x84	; 132
    1c26:	de 01       	movw	r26, r28
    1c28:	a3 5d       	subi	r26, 0xD3	; 211
    1c2a:	bd 4f       	sbci	r27, 0xFD	; 253
    1c2c:	01 90       	ld	r0, Z+
    1c2e:	0d 92       	st	X+, r0
    1c30:	9a 95       	dec	r25
    1c32:	e1 f7       	brne	.-8      	; 0x1c2c <report+0xa0>
	const char dformat_PN2[] = "shutter:%c  air:%c";
    1c34:	93 e1       	ldi	r25, 0x13	; 19
    1c36:	eb e5       	ldi	r30, 0x5B	; 91
    1c38:	f4 e8       	ldi	r31, 0x84	; 132
    1c3a:	de 01       	movw	r26, r28
    1c3c:	a0 5c       	subi	r26, 0xC0	; 192
    1c3e:	bd 4f       	sbci	r27, 0xFD	; 253
    1c40:	01 90       	ld	r0, Z+
    1c42:	0d 92       	st	X+, r0
    1c44:	9a 95       	dec	r25
    1c46:	e1 f7       	brne	.-8      	; 0x1c40 <report+0xb4>
	const char format_TIM[] = "$S%dTIM,%s,%s,set,%s,boot,%s";
    1c48:	9d e1       	ldi	r25, 0x1D	; 29
    1c4a:	ee e6       	ldi	r30, 0x6E	; 110
    1c4c:	f4 e8       	ldi	r31, 0x84	; 132
    1c4e:	de 01       	movw	r26, r28
    1c50:	ad 5a       	subi	r26, 0xAD	; 173
    1c52:	bd 4f       	sbci	r27, 0xFD	; 253
    1c54:	01 90       	ld	r0, Z+
    1c56:	0d 92       	st	X+, r0
    1c58:	9a 95       	dec	r25
    1c5a:	e1 f7       	brne	.-8      	; 0x1c54 <report+0xc8>
	const char format_VAC[] = "$S%dVAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1c5c:	99 e2       	ldi	r25, 0x29	; 41
    1c5e:	eb e8       	ldi	r30, 0x8B	; 139
    1c60:	f4 e8       	ldi	r31, 0x84	; 132
    1c62:	de 01       	movw	r26, r28
    1c64:	a0 59       	subi	r26, 0x90	; 144
    1c66:	bd 4f       	sbci	r27, 0xFD	; 253
    1c68:	01 90       	ld	r0, Z+
    1c6a:	0d 92       	st	X+, r0
    1c6c:	9a 95       	dec	r25
    1c6e:	e1 f7       	brne	.-8      	; 0x1c68 <report+0xdc>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1c70:	9d e0       	ldi	r25, 0x0D	; 13
    1c72:	e4 eb       	ldi	r30, 0xB4	; 180
    1c74:	f4 e8       	ldi	r31, 0x84	; 132
    1c76:	de 01       	movw	r26, r28
    1c78:	a7 56       	subi	r26, 0x67	; 103
    1c7a:	bd 4f       	sbci	r27, 0xFD	; 253
    1c7c:	01 90       	ld	r0, Z+
    1c7e:	0d 92       	st	X+, r0
    1c80:	9a 95       	dec	r25
    1c82:	e1 f7       	brne	.-8      	; 0x1c7c <report+0xf0>
	const char format_VER[] = "$S%dVER,%s,%s,%s";
    1c84:	91 e1       	ldi	r25, 0x11	; 17
    1c86:	e1 ec       	ldi	r30, 0xC1	; 193
    1c88:	f4 e8       	ldi	r31, 0x84	; 132
    1c8a:	de 01       	movw	r26, r28
    1c8c:	aa 55       	subi	r26, 0x5A	; 90
    1c8e:	bd 4f       	sbci	r27, 0xFD	; 253
    1c90:	01 90       	ld	r0, Z+
    1c92:	0d 92       	st	X+, r0
    1c94:	9a 95       	dec	r25
    1c96:	e1 f7       	brne	.-8      	; 0x1c90 <report+0x104>
//	float voltage;							// voltage
	uint16_t current;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum

	switch(pcmd[cstack].cobject) {
    1c98:	08 2f       	mov	r16, r24
    1c9a:	10 e0       	ldi	r17, 0x00	; 0
    1c9c:	84 e3       	ldi	r24, 0x34	; 52
    1c9e:	80 9f       	mul	r24, r16
    1ca0:	f0 01       	movw	r30, r0
    1ca2:	81 9f       	mul	r24, r17
    1ca4:	f0 0d       	add	r31, r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	e3 58       	subi	r30, 0x83	; 131
    1caa:	f7 4d       	sbci	r31, 0xD7	; 215
    1cac:	e1 81       	ldd	r30, Z+1	; 0x01
    1cae:	8e 2f       	mov	r24, r30
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	e2 54       	subi	r30, 0x42	; 66
    1cb6:	f1 09       	sbc	r31, r1
    1cb8:	e5 33       	cpi	r30, 0x35	; 53
    1cba:	f1 05       	cpc	r31, r1
    1cbc:	20 f4       	brcc	.+8      	; 0x1cc6 <report+0x13a>
    1cbe:	ed 58       	subi	r30, 0x8D	; 141
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	0c 94 7a 1e 	jmp	0x3cf4	; 0x3cf4 <__tablejump2__>
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;

		default:
			return(ERRORPROMPT);
    1cc6:	82 e0       	ldi	r24, 0x02	; 2
    1cc8:	8f c4       	rjmp	.+2334   	; 0x25e8 <report+0xa5c>
			break;
*/
		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    1cca:	ce 01       	movw	r24, r28
    1ccc:	8b 5e       	subi	r24, 0xEB	; 235
    1cce:	9e 4f       	sbci	r25, 0xFE	; 254
    1cd0:	0e 94 6b 05 	call	0xad6	; 0xad6 <get_time>
			controller = pcmd[cstack].cobject + 31;
    1cd4:	84 e3       	ldi	r24, 0x34	; 52
    1cd6:	80 9f       	mul	r24, r16
    1cd8:	70 01       	movw	r14, r0
    1cda:	81 9f       	mul	r24, r17
    1cdc:	f0 0c       	add	r15, r0
    1cde:	11 24       	eor	r1, r1
    1ce0:	87 01       	movw	r16, r14
    1ce2:	03 58       	subi	r16, 0x83	; 131
    1ce4:	17 4d       	sbci	r17, 0xD7	; 215
    1ce6:	f8 01       	movw	r30, r16
    1ce8:	81 81       	ldd	r24, Z+1	; 0x01
    1cea:	0f 2e       	mov	r0, r31
    1cec:	ff e1       	ldi	r31, 0x1F	; 31
    1cee:	5f 2e       	mov	r5, r31
    1cf0:	f0 2d       	mov	r31, r0
    1cf2:	58 0e       	add	r5, r24
			status = get_ROBOEncoder(controller, ROBOREADENCODERCOUNT, &encoderValue);
    1cf4:	ae 01       	movw	r20, r28
    1cf6:	49 54       	subi	r20, 0x49	; 73
    1cf8:	5d 4f       	sbci	r21, 0xFD	; 253
    1cfa:	60 e1       	ldi	r22, 0x10	; 16
    1cfc:	85 2d       	mov	r24, r5
    1cfe:	0e 94 82 13 	call	0x2704	; 0x2704 <get_ROBOEncoder>
			micronValue = encoderValue/ROBOCOUNTSPERMICRON;
    1d02:	c9 54       	subi	r28, 0x49	; 73
    1d04:	dd 4f       	sbci	r29, 0xFD	; 253
    1d06:	68 81       	ld	r22, Y
    1d08:	79 81       	ldd	r23, Y+1	; 0x01
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0e:	c7 5b       	subi	r28, 0xB7	; 183
    1d10:	d2 40       	sbci	r29, 0x02	; 2
    1d12:	0f 2e       	mov	r0, r31
    1d14:	fc e0       	ldi	r31, 0x0C	; 12
    1d16:	6f 2e       	mov	r6, r31
    1d18:	77 24       	eor	r7, r7
    1d1a:	73 94       	inc	r7
    1d1c:	81 2c       	mov	r8, r1
    1d1e:	91 2c       	mov	r9, r1
    1d20:	f0 2d       	mov	r31, r0
    1d22:	a4 01       	movw	r20, r8
    1d24:	93 01       	movw	r18, r6
    1d26:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__divmodsi4>
    1d2a:	d2 2e       	mov	r13, r18
    1d2c:	c3 2e       	mov	r12, r19
    1d2e:	b4 2e       	mov	r11, r20
    1d30:	a5 2e       	mov	r10, r21
			status = get_ROBOEncoder(controller, ROBOREADENCODERSPEED, &encoderSpeed);
    1d32:	ae 01       	movw	r20, r28
    1d34:	45 54       	subi	r20, 0x45	; 69
    1d36:	5d 4f       	sbci	r21, 0xFD	; 253
    1d38:	62 e1       	ldi	r22, 0x12	; 18
    1d3a:	85 2d       	mov	r24, r5
    1d3c:	0e 94 82 13 	call	0x2704	; 0x2704 <get_ROBOEncoder>
			micronSpeed = encoderSpeed/ROBOCOUNTSPERMICRON;
    1d40:	c5 54       	subi	r28, 0x45	; 69
    1d42:	dd 4f       	sbci	r29, 0xFD	; 253
    1d44:	68 81       	ld	r22, Y
    1d46:	79 81       	ldd	r23, Y+1	; 0x01
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4c:	cb 5b       	subi	r28, 0xBB	; 187
    1d4e:	d2 40       	sbci	r29, 0x02	; 2
    1d50:	a4 01       	movw	r20, r8
    1d52:	93 01       	movw	r18, r6
    1d54:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__divmodsi4>
    1d58:	92 2e       	mov	r9, r18
    1d5a:	83 2e       	mov	r8, r19
    1d5c:	74 2e       	mov	r7, r20
    1d5e:	65 2e       	mov	r6, r21
			icurrents = get_ROBOInt32(controller, ROBOREADCURRENT);
    1d60:	61 e3       	ldi	r22, 0x31	; 49
    1d62:	85 2d       	mov	r24, r5
    1d64:	0e 94 85 14 	call	0x290a	; 0x290a <get_ROBOInt32>
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
    1d68:	aa 27       	eor	r26, r26
    1d6a:	bb 27       	eor	r27, r27
    1d6c:	9c 01       	movw	r18, r24
    1d6e:	22 0f       	add	r18, r18
    1d70:	33 1f       	adc	r19, r19
    1d72:	bc 01       	movw	r22, r24
    1d74:	66 0f       	add	r22, r22
    1d76:	77 1f       	adc	r23, r23
    1d78:	66 0f       	add	r22, r22
    1d7a:	77 1f       	adc	r23, r23
    1d7c:	66 0f       	add	r22, r22
    1d7e:	77 1f       	adc	r23, r23
    1d80:	62 0f       	add	r22, r18
    1d82:	73 1f       	adc	r23, r19
			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, current, pcmd[cstack].cid);
    1d84:	c7 01       	movw	r24, r14
    1d86:	88 55       	subi	r24, 0x58	; 88
    1d88:	97 4d       	sbci	r25, 0xD7	; 215
			micronValue = encoderValue/ROBOCOUNTSPERMICRON;
			status = get_ROBOEncoder(controller, ROBOREADENCODERSPEED, &encoderSpeed);
			micronSpeed = encoderSpeed/ROBOCOUNTSPERMICRON;
			icurrents = get_ROBOInt32(controller, ROBOREADCURRENT);
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
    1d8a:	f8 01       	movw	r30, r16
    1d8c:	21 81       	ldd	r18, Z+1	; 0x01
    1d8e:	30 91 a8 04 	lds	r19, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1d92:	32 ff       	sbrs	r19, 2
    1d94:	03 c0       	rjmp	.+6      	; 0x1d9c <report+0x210>
    1d96:	32 e0       	ldi	r19, 0x02	; 2
    1d98:	40 e0       	ldi	r20, 0x00	; 0
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <report+0x214>
    1d9c:	31 e0       	ldi	r19, 0x01	; 1
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	9f 93       	push	r25
    1da2:	8f 93       	push	r24
    1da4:	7f 93       	push	r23
    1da6:	6f 93       	push	r22
    1da8:	6f 92       	push	r6
    1daa:	7f 92       	push	r7
    1dac:	8f 92       	push	r8
    1dae:	9f 92       	push	r9
    1db0:	af 92       	push	r10
    1db2:	bf 92       	push	r11
    1db4:	cf 92       	push	r12
    1db6:	df 92       	push	r13
    1db8:	1f 92       	push	r1
    1dba:	2f 93       	push	r18
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	8b 5e       	subi	r24, 0xEB	; 235
    1dc0:	9e 4f       	sbci	r25, 0xFE	; 254
    1dc2:	9f 93       	push	r25
    1dc4:	8f 93       	push	r24
    1dc6:	4f 93       	push	r20
    1dc8:	3f 93       	push	r19
    1dca:	8e 57       	subi	r24, 0x7E	; 126
    1dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dce:	9f 93       	push	r25
    1dd0:	8f 93       	push	r24
    1dd2:	8e 01       	movw	r16, r28
    1dd4:	0f 5f       	subi	r16, 0xFF	; 255
    1dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd8:	1f 93       	push	r17
    1dda:	0f 93       	push	r16
    1ddc:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
				micronValue, micronSpeed, current, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    1de0:	c8 01       	movw	r24, r16
    1de2:	0e 94 91 09 	call	0x1322	; 0x1322 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1de6:	f8 01       	movw	r30, r16
    1de8:	01 90       	ld	r0, Z+
    1dea:	00 20       	and	r0, r0
    1dec:	e9 f7       	brne	.-6      	; 0x1de8 <report+0x25c>
    1dee:	31 97       	sbiw	r30, 0x01	; 1
    1df0:	af 01       	movw	r20, r30
    1df2:	40 1b       	sub	r20, r16
    1df4:	51 0b       	sbc	r21, r17
    1df6:	b8 01       	movw	r22, r16
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	0e 94 e7 16 	call	0x2dce	; 0x2dce <send_USART>
			break;
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1e02:	80 e0       	ldi	r24, 0x00	; 0
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, current, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
    1e04:	f1 c3       	rjmp	.+2018   	; 0x25e8 <report+0xa5c>
			writestr_OLED(1, "Boot time", 1);
			writestr_OLED(1, &boottime[5], 2);
			break;
*/
		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <get_temperature>
    1e0c:	f6 2e       	mov	r15, r22
    1e0e:	e7 2e       	mov	r14, r23
    1e10:	d8 2e       	mov	r13, r24
    1e12:	c9 2e       	mov	r12, r25
			h0 = get_humidity(0);
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	0e 94 a5 06 	call	0xd4a	; 0xd4a <get_humidity>
    1e1a:	b6 2e       	mov	r11, r22
    1e1c:	a7 2e       	mov	r10, r23
    1e1e:	98 2e       	mov	r9, r24
    1e20:	89 2e       	mov	r8, r25
			t1 = get_temperature(1);
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <get_temperature>
    1e28:	c5 53       	subi	r28, 0x35	; 53
    1e2a:	dd 4f       	sbci	r29, 0xFD	; 253
    1e2c:	68 83       	st	Y, r22
    1e2e:	cb 5c       	subi	r28, 0xCB	; 203
    1e30:	d2 40       	sbci	r29, 0x02	; 2
    1e32:	c4 53       	subi	r28, 0x34	; 52
    1e34:	dd 4f       	sbci	r29, 0xFD	; 253
    1e36:	78 83       	st	Y, r23
    1e38:	cc 5c       	subi	r28, 0xCC	; 204
    1e3a:	d2 40       	sbci	r29, 0x02	; 2
    1e3c:	c3 53       	subi	r28, 0x33	; 51
    1e3e:	dd 4f       	sbci	r29, 0xFD	; 253
    1e40:	88 83       	st	Y, r24
    1e42:	cd 5c       	subi	r28, 0xCD	; 205
    1e44:	d2 40       	sbci	r29, 0x02	; 2
    1e46:	c2 53       	subi	r28, 0x32	; 50
    1e48:	dd 4f       	sbci	r29, 0xFD	; 253
    1e4a:	98 83       	st	Y, r25
    1e4c:	ce 5c       	subi	r28, 0xCE	; 206
    1e4e:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	0e 94 a5 06 	call	0xd4a	; 0xd4a <get_humidity>
    1e56:	c1 53       	subi	r28, 0x31	; 49
    1e58:	dd 4f       	sbci	r29, 0xFD	; 253
    1e5a:	68 83       	st	Y, r22
    1e5c:	cf 5c       	subi	r28, 0xCF	; 207
    1e5e:	d2 40       	sbci	r29, 0x02	; 2
    1e60:	c0 53       	subi	r28, 0x30	; 48
    1e62:	dd 4f       	sbci	r29, 0xFD	; 253
    1e64:	78 83       	st	Y, r23
    1e66:	c0 5d       	subi	r28, 0xD0	; 208
    1e68:	d2 40       	sbci	r29, 0x02	; 2
    1e6a:	cf 52       	subi	r28, 0x2F	; 47
    1e6c:	dd 4f       	sbci	r29, 0xFD	; 253
    1e6e:	88 83       	st	Y, r24
    1e70:	c1 5d       	subi	r28, 0xD1	; 209
    1e72:	d2 40       	sbci	r29, 0x02	; 2
    1e74:	ce 52       	subi	r28, 0x2E	; 46
    1e76:	dd 4f       	sbci	r29, 0xFD	; 253
    1e78:	98 83       	st	Y, r25
    1e7a:	c2 5d       	subi	r28, 0xD2	; 210
    1e7c:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    1e7e:	82 e0       	ldi	r24, 0x02	; 2
    1e80:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <get_temperature>
    1e84:	cd 52       	subi	r28, 0x2D	; 45
    1e86:	dd 4f       	sbci	r29, 0xFD	; 253
    1e88:	68 83       	st	Y, r22
    1e8a:	c3 5d       	subi	r28, 0xD3	; 211
    1e8c:	d2 40       	sbci	r29, 0x02	; 2
    1e8e:	cc 52       	subi	r28, 0x2C	; 44
    1e90:	dd 4f       	sbci	r29, 0xFD	; 253
    1e92:	78 83       	st	Y, r23
    1e94:	c4 5d       	subi	r28, 0xD4	; 212
    1e96:	d2 40       	sbci	r29, 0x02	; 2
    1e98:	cb 52       	subi	r28, 0x2B	; 43
    1e9a:	dd 4f       	sbci	r29, 0xFD	; 253
    1e9c:	88 83       	st	Y, r24
    1e9e:	c5 5d       	subi	r28, 0xD5	; 213
    1ea0:	d2 40       	sbci	r29, 0x02	; 2
    1ea2:	ca 52       	subi	r28, 0x2A	; 42
    1ea4:	dd 4f       	sbci	r29, 0xFD	; 253
    1ea6:	98 83       	st	Y, r25
    1ea8:	c6 5d       	subi	r28, 0xD6	; 214
    1eaa:	d2 40       	sbci	r29, 0x02	; 2
			h2 = get_humidity(2);
    1eac:	82 e0       	ldi	r24, 0x02	; 2
    1eae:	0e 94 a5 06 	call	0xd4a	; 0xd4a <get_humidity>
    1eb2:	76 2e       	mov	r7, r22
    1eb4:	67 2e       	mov	r6, r23
    1eb6:	58 2e       	mov	r5, r24
    1eb8:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    1eba:	83 e0       	ldi	r24, 0x03	; 3
    1ebc:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <get_temperature>
    1ec0:	c9 52       	subi	r28, 0x29	; 41
    1ec2:	dd 4f       	sbci	r29, 0xFD	; 253
    1ec4:	68 83       	st	Y, r22
    1ec6:	c7 5d       	subi	r28, 0xD7	; 215
    1ec8:	d2 40       	sbci	r29, 0x02	; 2
    1eca:	c8 52       	subi	r28, 0x28	; 40
    1ecc:	dd 4f       	sbci	r29, 0xFD	; 253
    1ece:	78 83       	st	Y, r23
    1ed0:	c8 5d       	subi	r28, 0xD8	; 216
    1ed2:	d2 40       	sbci	r29, 0x02	; 2
    1ed4:	38 2e       	mov	r3, r24
    1ed6:	29 2e       	mov	r2, r25
			get_time(currenttime);
    1ed8:	ce 01       	movw	r24, r28
    1eda:	8b 5e       	subi	r24, 0xEB	; 235
    1edc:	9e 4f       	sbci	r25, 0xFE	; 254
    1ede:	0e 94 6b 05 	call	0xad6	; 0xad6 <get_time>
			sprintf(outbuf, format_ENV, get_SPECID, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    1ee2:	24 e3       	ldi	r18, 0x34	; 52
    1ee4:	20 9f       	mul	r18, r16
    1ee6:	c0 01       	movw	r24, r0
    1ee8:	21 9f       	mul	r18, r17
    1eea:	90 0d       	add	r25, r0
    1eec:	11 24       	eor	r1, r1
    1eee:	88 55       	subi	r24, 0x58	; 88
    1ef0:	97 4d       	sbci	r25, 0xD7	; 215
    1ef2:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1ef6:	22 ff       	sbrs	r18, 2
    1ef8:	03 c0       	rjmp	.+6      	; 0x1f00 <report+0x374>
    1efa:	22 e0       	ldi	r18, 0x02	; 2
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <report+0x378>
    1f00:	21 e0       	ldi	r18, 0x01	; 1
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	9f 93       	push	r25
    1f06:	8f 93       	push	r24
    1f08:	2f 92       	push	r2
    1f0a:	3f 92       	push	r3
    1f0c:	c8 52       	subi	r28, 0x28	; 40
    1f0e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f10:	98 81       	ld	r25, Y
    1f12:	c8 5d       	subi	r28, 0xD8	; 216
    1f14:	d2 40       	sbci	r29, 0x02	; 2
    1f16:	9f 93       	push	r25
    1f18:	c9 52       	subi	r28, 0x29	; 41
    1f1a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f1c:	e8 81       	ld	r30, Y
    1f1e:	c7 5d       	subi	r28, 0xD7	; 215
    1f20:	d2 40       	sbci	r29, 0x02	; 2
    1f22:	ef 93       	push	r30
    1f24:	4f 92       	push	r4
    1f26:	5f 92       	push	r5
    1f28:	6f 92       	push	r6
    1f2a:	7f 92       	push	r7
    1f2c:	ca 52       	subi	r28, 0x2A	; 42
    1f2e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f30:	f8 81       	ld	r31, Y
    1f32:	c6 5d       	subi	r28, 0xD6	; 214
    1f34:	d2 40       	sbci	r29, 0x02	; 2
    1f36:	ff 93       	push	r31
    1f38:	cb 52       	subi	r28, 0x2B	; 43
    1f3a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f3c:	88 81       	ld	r24, Y
    1f3e:	c5 5d       	subi	r28, 0xD5	; 213
    1f40:	d2 40       	sbci	r29, 0x02	; 2
    1f42:	8f 93       	push	r24
    1f44:	cc 52       	subi	r28, 0x2C	; 44
    1f46:	dd 4f       	sbci	r29, 0xFD	; 253
    1f48:	98 81       	ld	r25, Y
    1f4a:	c4 5d       	subi	r28, 0xD4	; 212
    1f4c:	d2 40       	sbci	r29, 0x02	; 2
    1f4e:	9f 93       	push	r25
    1f50:	cd 52       	subi	r28, 0x2D	; 45
    1f52:	dd 4f       	sbci	r29, 0xFD	; 253
    1f54:	e8 81       	ld	r30, Y
    1f56:	c3 5d       	subi	r28, 0xD3	; 211
    1f58:	d2 40       	sbci	r29, 0x02	; 2
    1f5a:	ef 93       	push	r30
    1f5c:	ce 52       	subi	r28, 0x2E	; 46
    1f5e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f60:	f8 81       	ld	r31, Y
    1f62:	c2 5d       	subi	r28, 0xD2	; 210
    1f64:	d2 40       	sbci	r29, 0x02	; 2
    1f66:	ff 93       	push	r31
    1f68:	cf 52       	subi	r28, 0x2F	; 47
    1f6a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f6c:	88 81       	ld	r24, Y
    1f6e:	c1 5d       	subi	r28, 0xD1	; 209
    1f70:	d2 40       	sbci	r29, 0x02	; 2
    1f72:	8f 93       	push	r24
    1f74:	c0 53       	subi	r28, 0x30	; 48
    1f76:	dd 4f       	sbci	r29, 0xFD	; 253
    1f78:	98 81       	ld	r25, Y
    1f7a:	c0 5d       	subi	r28, 0xD0	; 208
    1f7c:	d2 40       	sbci	r29, 0x02	; 2
    1f7e:	9f 93       	push	r25
    1f80:	c1 53       	subi	r28, 0x31	; 49
    1f82:	dd 4f       	sbci	r29, 0xFD	; 253
    1f84:	e8 81       	ld	r30, Y
    1f86:	cf 5c       	subi	r28, 0xCF	; 207
    1f88:	d2 40       	sbci	r29, 0x02	; 2
    1f8a:	ef 93       	push	r30
    1f8c:	c2 53       	subi	r28, 0x32	; 50
    1f8e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f90:	f8 81       	ld	r31, Y
    1f92:	ce 5c       	subi	r28, 0xCE	; 206
    1f94:	d2 40       	sbci	r29, 0x02	; 2
    1f96:	ff 93       	push	r31
    1f98:	c3 53       	subi	r28, 0x33	; 51
    1f9a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f9c:	88 81       	ld	r24, Y
    1f9e:	cd 5c       	subi	r28, 0xCD	; 205
    1fa0:	d2 40       	sbci	r29, 0x02	; 2
    1fa2:	8f 93       	push	r24
    1fa4:	c4 53       	subi	r28, 0x34	; 52
    1fa6:	dd 4f       	sbci	r29, 0xFD	; 253
    1fa8:	98 81       	ld	r25, Y
    1faa:	cc 5c       	subi	r28, 0xCC	; 204
    1fac:	d2 40       	sbci	r29, 0x02	; 2
    1fae:	9f 93       	push	r25
    1fb0:	c5 53       	subi	r28, 0x35	; 53
    1fb2:	dd 4f       	sbci	r29, 0xFD	; 253
    1fb4:	e8 81       	ld	r30, Y
    1fb6:	cb 5c       	subi	r28, 0xCB	; 203
    1fb8:	d2 40       	sbci	r29, 0x02	; 2
    1fba:	ef 93       	push	r30
    1fbc:	8f 92       	push	r8
    1fbe:	9f 92       	push	r9
    1fc0:	af 92       	push	r10
    1fc2:	bf 92       	push	r11
    1fc4:	cf 92       	push	r12
    1fc6:	df 92       	push	r13
    1fc8:	ef 92       	push	r14
    1fca:	ff 92       	push	r15
    1fcc:	ce 01       	movw	r24, r28
    1fce:	8b 5e       	subi	r24, 0xEB	; 235
    1fd0:	9e 4f       	sbci	r25, 0xFE	; 254
    1fd2:	9f 93       	push	r25
    1fd4:	8f 93       	push	r24
    1fd6:	3f 93       	push	r19
    1fd8:	2f 93       	push	r18
    1fda:	80 5c       	subi	r24, 0xC0	; 192
    1fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fde:	9f 93       	push	r25
    1fe0:	8f 93       	push	r24
    1fe2:	8e 01       	movw	r16, r28
    1fe4:	0f 5f       	subi	r16, 0xFF	; 255
    1fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe8:	1f 93       	push	r17
    1fea:	0f 93       	push	r16
    1fec:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
			checksum_NMEA(outbuf);
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	c8 01       	movw	r24, r16
    1ff6:	0e 94 91 09 	call	0x1322	; 0x1322 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1ffa:	f8 01       	movw	r30, r16
    1ffc:	01 90       	ld	r0, Z+
    1ffe:	00 20       	and	r0, r0
    2000:	e9 f7       	brne	.-6      	; 0x1ffc <report+0x470>
    2002:	31 97       	sbiw	r30, 0x01	; 1
    2004:	af 01       	movw	r20, r30
    2006:	40 1b       	sub	r20, r16
    2008:	51 0b       	sbc	r21, r17
    200a:	b8 01       	movw	r22, r16
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	0e 94 e7 16 	call	0x2dce	; 0x2dce <send_USART>
			writestr_OLED(1, "Temp & Humidity", 1);
    2012:	41 e0       	ldi	r20, 0x01	; 1
    2014:	62 e2       	ldi	r22, 0x22	; 34
    2016:	73 e8       	ldi	r23, 0x83	; 131
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    201e:	26 e6       	ldi	r18, 0x66	; 102
    2020:	36 e6       	ldi	r19, 0x66	; 102
    2022:	46 ee       	ldi	r20, 0xE6	; 230
    2024:	5f e3       	ldi	r21, 0x3F	; 63
    2026:	6f 2d       	mov	r22, r15
    2028:	7e 2d       	mov	r23, r14
    202a:	8d 2d       	mov	r24, r13
    202c:	9c 2d       	mov	r25, r12
    202e:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__mulsf3>
    2032:	8f 92       	push	r8
    2034:	9f 92       	push	r9
    2036:	af 92       	push	r10
    2038:	bf 92       	push	r11
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	52 e4       	ldi	r21, 0x42	; 66
    2042:	0e 94 c3 18 	call	0x3186	; 0x3186 <__addsf3>
    2046:	9f 93       	push	r25
    2048:	8f 93       	push	r24
    204a:	7f 93       	push	r23
    204c:	6f 93       	push	r22
    204e:	cf 92       	push	r12
    2050:	df 92       	push	r13
    2052:	ef 92       	push	r14
    2054:	ff 92       	push	r15
    2056:	82 e3       	ldi	r24, 0x32	; 50
    2058:	93 e8       	ldi	r25, 0x83	; 131
    205a:	9f 93       	push	r25
    205c:	8f 93       	push	r24
    205e:	1f 93       	push	r17
    2060:	0f 93       	push	r16
    2062:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2066:	42 e0       	ldi	r20, 0x02	; 2
    2068:	b8 01       	movw	r22, r16
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <writestr_OLED>
			break;
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2074:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    2076:	b8 c2       	rjmp	.+1392   	; 0x25e8 <report+0xa5c>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    2078:	ae 01       	movw	r20, r28
    207a:	49 53       	subi	r20, 0x39	; 57
    207c:	5d 4f       	sbci	r21, 0xFD	; 253
    207e:	be 01       	movw	r22, r28
    2080:	6d 53       	subi	r22, 0x3D	; 61
    2082:	7d 4f       	sbci	r23, 0xFD	; 253
    2084:	ce 01       	movw	r24, r28
    2086:	81 54       	subi	r24, 0x41	; 65
    2088:	9d 4f       	sbci	r25, 0xFD	; 253
    208a:	0e 94 9d 08 	call	0x113a	; 0x113a <get_orientation>
			get_time(currenttime);
    208e:	ce 01       	movw	r24, r28
    2090:	8b 5e       	subi	r24, 0xEB	; 235
    2092:	9e 4f       	sbci	r25, 0xFE	; 254
    2094:	0e 94 6b 05 	call	0xad6	; 0xad6 <get_time>
			sprintf(outbuf, format_ORI, get_SPECID, currenttime, x, y, z, pcmd[cstack].cid);
    2098:	24 e3       	ldi	r18, 0x34	; 52
    209a:	20 9f       	mul	r18, r16
    209c:	c0 01       	movw	r24, r0
    209e:	21 9f       	mul	r18, r17
    20a0:	90 0d       	add	r25, r0
    20a2:	11 24       	eor	r1, r1
    20a4:	88 55       	subi	r24, 0x58	; 88
    20a6:	97 4d       	sbci	r25, 0xD7	; 215
    20a8:	c9 53       	subi	r28, 0x39	; 57
    20aa:	dd 4f       	sbci	r29, 0xFD	; 253
    20ac:	a8 81       	ld	r26, Y
    20ae:	c7 5c       	subi	r28, 0xC7	; 199
    20b0:	d2 40       	sbci	r29, 0x02	; 2
    20b2:	c8 53       	subi	r28, 0x38	; 56
    20b4:	dd 4f       	sbci	r29, 0xFD	; 253
    20b6:	b8 81       	ld	r27, Y
    20b8:	c8 5c       	subi	r28, 0xC8	; 200
    20ba:	d2 40       	sbci	r29, 0x02	; 2
    20bc:	c7 53       	subi	r28, 0x37	; 55
    20be:	dd 4f       	sbci	r29, 0xFD	; 253
    20c0:	18 81       	ld	r17, Y
    20c2:	c9 5c       	subi	r28, 0xC9	; 201
    20c4:	d2 40       	sbci	r29, 0x02	; 2
    20c6:	c6 53       	subi	r28, 0x36	; 54
    20c8:	dd 4f       	sbci	r29, 0xFD	; 253
    20ca:	08 81       	ld	r16, Y
    20cc:	ca 5c       	subi	r28, 0xCA	; 202
    20ce:	d2 40       	sbci	r29, 0x02	; 2
    20d0:	cd 53       	subi	r28, 0x3D	; 61
    20d2:	dd 4f       	sbci	r29, 0xFD	; 253
    20d4:	68 81       	ld	r22, Y
    20d6:	c3 5c       	subi	r28, 0xC3	; 195
    20d8:	d2 40       	sbci	r29, 0x02	; 2
    20da:	cc 53       	subi	r28, 0x3C	; 60
    20dc:	dd 4f       	sbci	r29, 0xFD	; 253
    20de:	78 81       	ld	r23, Y
    20e0:	c4 5c       	subi	r28, 0xC4	; 196
    20e2:	d2 40       	sbci	r29, 0x02	; 2
    20e4:	cb 53       	subi	r28, 0x3B	; 59
    20e6:	dd 4f       	sbci	r29, 0xFD	; 253
    20e8:	e8 81       	ld	r30, Y
    20ea:	c5 5c       	subi	r28, 0xC5	; 197
    20ec:	d2 40       	sbci	r29, 0x02	; 2
    20ee:	ca 53       	subi	r28, 0x3A	; 58
    20f0:	dd 4f       	sbci	r29, 0xFD	; 253
    20f2:	f8 81       	ld	r31, Y
    20f4:	c6 5c       	subi	r28, 0xC6	; 198
    20f6:	d2 40       	sbci	r29, 0x02	; 2
    20f8:	c1 54       	subi	r28, 0x41	; 65
    20fa:	dd 4f       	sbci	r29, 0xFD	; 253
    20fc:	28 81       	ld	r18, Y
    20fe:	cf 5b       	subi	r28, 0xBF	; 191
    2100:	d2 40       	sbci	r29, 0x02	; 2
    2102:	c0 54       	subi	r28, 0x40	; 64
    2104:	dd 4f       	sbci	r29, 0xFD	; 253
    2106:	38 81       	ld	r19, Y
    2108:	c0 5c       	subi	r28, 0xC0	; 192
    210a:	d2 40       	sbci	r29, 0x02	; 2
    210c:	cf 53       	subi	r28, 0x3F	; 63
    210e:	dd 4f       	sbci	r29, 0xFD	; 253
    2110:	48 81       	ld	r20, Y
    2112:	c1 5c       	subi	r28, 0xC1	; 193
    2114:	d2 40       	sbci	r29, 0x02	; 2
    2116:	ce 53       	subi	r28, 0x3E	; 62
    2118:	dd 4f       	sbci	r29, 0xFD	; 253
    211a:	58 81       	ld	r21, Y
    211c:	c2 5c       	subi	r28, 0xC2	; 194
    211e:	d2 40       	sbci	r29, 0x02	; 2
    2120:	f0 90 a8 04 	lds	r15, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2124:	f2 fe       	sbrs	r15, 2
    2126:	05 c0       	rjmp	.+10     	; 0x2132 <report+0x5a6>
    2128:	68 94       	set
    212a:	ff 24       	eor	r15, r15
    212c:	f1 f8       	bld	r15, 1
    212e:	e1 2c       	mov	r14, r1
    2130:	03 c0       	rjmp	.+6      	; 0x2138 <report+0x5ac>
    2132:	ff 24       	eor	r15, r15
    2134:	f3 94       	inc	r15
    2136:	e1 2c       	mov	r14, r1
    2138:	9f 93       	push	r25
    213a:	8f 93       	push	r24
    213c:	0f 93       	push	r16
    213e:	1f 93       	push	r17
    2140:	bf 93       	push	r27
    2142:	af 93       	push	r26
    2144:	ff 93       	push	r31
    2146:	ef 93       	push	r30
    2148:	7f 93       	push	r23
    214a:	6f 93       	push	r22
    214c:	5f 93       	push	r21
    214e:	4f 93       	push	r20
    2150:	3f 93       	push	r19
    2152:	2f 93       	push	r18
    2154:	ce 01       	movw	r24, r28
    2156:	8b 5e       	subi	r24, 0xEB	; 235
    2158:	9e 4f       	sbci	r25, 0xFE	; 254
    215a:	9f 93       	push	r25
    215c:	8f 93       	push	r24
    215e:	ef 92       	push	r14
    2160:	ff 92       	push	r15
    2162:	8b 54       	subi	r24, 0x4B	; 75
    2164:	9f 4f       	sbci	r25, 0xFF	; 255
    2166:	9f 93       	push	r25
    2168:	8f 93       	push	r24
    216a:	8e 01       	movw	r16, r28
    216c:	0f 5f       	subi	r16, 0xFF	; 255
    216e:	1f 4f       	sbci	r17, 0xFF	; 255
    2170:	1f 93       	push	r17
    2172:	0f 93       	push	r16
    2174:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
			checksum_NMEA(outbuf);
    2178:	c8 01       	movw	r24, r16
    217a:	0e 94 91 09 	call	0x1322	; 0x1322 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    217e:	f8 01       	movw	r30, r16
    2180:	01 90       	ld	r0, Z+
    2182:	00 20       	and	r0, r0
    2184:	e9 f7       	brne	.-6      	; 0x2180 <report+0x5f4>
    2186:	31 97       	sbiw	r30, 0x01	; 1
    2188:	af 01       	movw	r20, r30
    218a:	40 1b       	sub	r20, r16
    218c:	51 0b       	sbc	r21, r17
    218e:	b8 01       	movw	r22, r16
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	0e 94 e7 16 	call	0x2dce	; 0x2dce <send_USART>
			writestr_OLED(1, "Orientation", 1);
    2196:	41 e0       	ldi	r20, 0x01	; 1
    2198:	68 e4       	ldi	r22, 0x48	; 72
    219a:	73 e8       	ldi	r23, 0x83	; 131
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    21a2:	c6 53       	subi	r28, 0x36	; 54
    21a4:	dd 4f       	sbci	r29, 0xFD	; 253
    21a6:	88 81       	ld	r24, Y
    21a8:	ca 5c       	subi	r28, 0xCA	; 202
    21aa:	d2 40       	sbci	r29, 0x02	; 2
    21ac:	8f 93       	push	r24
    21ae:	c7 53       	subi	r28, 0x37	; 55
    21b0:	dd 4f       	sbci	r29, 0xFD	; 253
    21b2:	88 81       	ld	r24, Y
    21b4:	c9 5c       	subi	r28, 0xC9	; 201
    21b6:	d2 40       	sbci	r29, 0x02	; 2
    21b8:	8f 93       	push	r24
    21ba:	c8 53       	subi	r28, 0x38	; 56
    21bc:	dd 4f       	sbci	r29, 0xFD	; 253
    21be:	88 81       	ld	r24, Y
    21c0:	c8 5c       	subi	r28, 0xC8	; 200
    21c2:	d2 40       	sbci	r29, 0x02	; 2
    21c4:	8f 93       	push	r24
    21c6:	c9 53       	subi	r28, 0x39	; 57
    21c8:	dd 4f       	sbci	r29, 0xFD	; 253
    21ca:	88 81       	ld	r24, Y
    21cc:	c7 5c       	subi	r28, 0xC7	; 199
    21ce:	d2 40       	sbci	r29, 0x02	; 2
    21d0:	8f 93       	push	r24
    21d2:	ca 53       	subi	r28, 0x3A	; 58
    21d4:	dd 4f       	sbci	r29, 0xFD	; 253
    21d6:	88 81       	ld	r24, Y
    21d8:	c6 5c       	subi	r28, 0xC6	; 198
    21da:	d2 40       	sbci	r29, 0x02	; 2
    21dc:	8f 93       	push	r24
    21de:	cb 53       	subi	r28, 0x3B	; 59
    21e0:	dd 4f       	sbci	r29, 0xFD	; 253
    21e2:	88 81       	ld	r24, Y
    21e4:	c5 5c       	subi	r28, 0xC5	; 197
    21e6:	d2 40       	sbci	r29, 0x02	; 2
    21e8:	8f 93       	push	r24
    21ea:	cc 53       	subi	r28, 0x3C	; 60
    21ec:	dd 4f       	sbci	r29, 0xFD	; 253
    21ee:	88 81       	ld	r24, Y
    21f0:	c4 5c       	subi	r28, 0xC4	; 196
    21f2:	d2 40       	sbci	r29, 0x02	; 2
    21f4:	8f 93       	push	r24
    21f6:	cd 53       	subi	r28, 0x3D	; 61
    21f8:	dd 4f       	sbci	r29, 0xFD	; 253
    21fa:	88 81       	ld	r24, Y
    21fc:	c3 5c       	subi	r28, 0xC3	; 195
    21fe:	d2 40       	sbci	r29, 0x02	; 2
    2200:	8f 93       	push	r24
    2202:	ce 53       	subi	r28, 0x3E	; 62
    2204:	dd 4f       	sbci	r29, 0xFD	; 253
    2206:	88 81       	ld	r24, Y
    2208:	c2 5c       	subi	r28, 0xC2	; 194
    220a:	d2 40       	sbci	r29, 0x02	; 2
    220c:	8f 93       	push	r24
    220e:	cf 53       	subi	r28, 0x3F	; 63
    2210:	dd 4f       	sbci	r29, 0xFD	; 253
    2212:	88 81       	ld	r24, Y
    2214:	c1 5c       	subi	r28, 0xC1	; 193
    2216:	d2 40       	sbci	r29, 0x02	; 2
    2218:	8f 93       	push	r24
    221a:	c0 54       	subi	r28, 0x40	; 64
    221c:	dd 4f       	sbci	r29, 0xFD	; 253
    221e:	88 81       	ld	r24, Y
    2220:	c0 5c       	subi	r28, 0xC0	; 192
    2222:	d2 40       	sbci	r29, 0x02	; 2
    2224:	8f 93       	push	r24
    2226:	c1 54       	subi	r28, 0x41	; 65
    2228:	dd 4f       	sbci	r29, 0xFD	; 253
    222a:	88 81       	ld	r24, Y
    222c:	cf 5b       	subi	r28, 0xBF	; 191
    222e:	d2 40       	sbci	r29, 0x02	; 2
    2230:	8f 93       	push	r24
    2232:	ce 01       	movw	r24, r28
    2234:	86 51       	subi	r24, 0x16	; 22
    2236:	9e 4f       	sbci	r25, 0xFE	; 254
    2238:	9f 93       	push	r25
    223a:	8f 93       	push	r24
    223c:	1f 93       	push	r17
    223e:	0f 93       	push	r16
    2240:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2244:	cd bf       	out	0x3d, r28	; 61
    2246:	de bf       	out	0x3e, r29	; 62
    2248:	42 e0       	ldi	r20, 0x02	; 2
    224a:	b8 01       	movw	r22, r16
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <writestr_OLED>
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2252:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    2254:	c9 c1       	rjmp	.+914    	; 0x25e8 <report+0xa5c>

		case 'p':
			get_time(currenttime);
    2256:	ce 01       	movw	r24, r28
    2258:	8b 5e       	subi	r24, 0xEB	; 235
    225a:	9e 4f       	sbci	r25, 0xFE	; 254
    225c:	0e 94 6b 05 	call	0xad6	; 0xad6 <get_time>
			read_PNEUSENSORS(&shutter, &left, &right, &air);
    2260:	9e 01       	movw	r18, r28
    2262:	2c 5a       	subi	r18, 0xAC	; 172
    2264:	3e 4f       	sbci	r19, 0xFE	; 254
    2266:	ae 01       	movw	r20, r28
    2268:	4d 5a       	subi	r20, 0xAD	; 173
    226a:	5e 4f       	sbci	r21, 0xFE	; 254
    226c:	be 01       	movw	r22, r28
    226e:	6e 5a       	subi	r22, 0xAE	; 174
    2270:	7e 4f       	sbci	r23, 0xFE	; 254
    2272:	ce 01       	movw	r24, r28
    2274:	8f 5a       	subi	r24, 0xAF	; 175
    2276:	9e 4f       	sbci	r25, 0xFE	; 254
    2278:	0e 94 ba 0b 	call	0x1774	; 0x1774 <read_PNEUSENSORS>
			sprintf(outbuf, format_PNU, get_SPECID, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    227c:	24 e3       	ldi	r18, 0x34	; 52
    227e:	20 9f       	mul	r18, r16
    2280:	c0 01       	movw	r24, r0
    2282:	21 9f       	mul	r18, r17
    2284:	90 0d       	add	r25, r0
    2286:	11 24       	eor	r1, r1
    2288:	88 55       	subi	r24, 0x58	; 88
    228a:	97 4d       	sbci	r25, 0xD7	; 215
    228c:	cc 5a       	subi	r28, 0xAC	; 172
    228e:	de 4f       	sbci	r29, 0xFE	; 254
    2290:	58 81       	ld	r21, Y
    2292:	c4 55       	subi	r28, 0x54	; 84
    2294:	d1 40       	sbci	r29, 0x01	; 1
    2296:	cd 5a       	subi	r28, 0xAD	; 173
    2298:	de 4f       	sbci	r29, 0xFE	; 254
    229a:	48 81       	ld	r20, Y
    229c:	c3 55       	subi	r28, 0x53	; 83
    229e:	d1 40       	sbci	r29, 0x01	; 1
    22a0:	ce 5a       	subi	r28, 0xAE	; 174
    22a2:	de 4f       	sbci	r29, 0xFE	; 254
    22a4:	38 81       	ld	r19, Y
    22a6:	c2 55       	subi	r28, 0x52	; 82
    22a8:	d1 40       	sbci	r29, 0x01	; 1
    22aa:	cf 5a       	subi	r28, 0xAF	; 175
    22ac:	de 4f       	sbci	r29, 0xFE	; 254
    22ae:	28 81       	ld	r18, Y
    22b0:	c1 55       	subi	r28, 0x51	; 81
    22b2:	d1 40       	sbci	r29, 0x01	; 1
    22b4:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    22b8:	62 ff       	sbrs	r22, 2
    22ba:	03 c0       	rjmp	.+6      	; 0x22c2 <report+0x736>
    22bc:	62 e0       	ldi	r22, 0x02	; 2
    22be:	70 e0       	ldi	r23, 0x00	; 0
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <report+0x73a>
    22c2:	61 e0       	ldi	r22, 0x01	; 1
    22c4:	70 e0       	ldi	r23, 0x00	; 0
    22c6:	9f 93       	push	r25
    22c8:	8f 93       	push	r24
    22ca:	1f 92       	push	r1
    22cc:	5f 93       	push	r21
    22ce:	1f 92       	push	r1
    22d0:	4f 93       	push	r20
    22d2:	1f 92       	push	r1
    22d4:	3f 93       	push	r19
    22d6:	1f 92       	push	r1
    22d8:	2f 93       	push	r18
    22da:	ce 01       	movw	r24, r28
    22dc:	8b 5e       	subi	r24, 0xEB	; 235
    22de:	9e 4f       	sbci	r25, 0xFE	; 254
    22e0:	9f 93       	push	r25
    22e2:	8f 93       	push	r24
    22e4:	7f 93       	push	r23
    22e6:	6f 93       	push	r22
    22e8:	89 51       	subi	r24, 0x19	; 25
    22ea:	9f 4f       	sbci	r25, 0xFF	; 255
    22ec:	9f 93       	push	r25
    22ee:	8f 93       	push	r24
    22f0:	8e 01       	movw	r16, r28
    22f2:	0f 5f       	subi	r16, 0xFF	; 255
    22f4:	1f 4f       	sbci	r17, 0xFF	; 255
    22f6:	1f 93       	push	r17
    22f8:	0f 93       	push	r16
    22fa:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
			checksum_NMEA(outbuf);
    22fe:	c8 01       	movw	r24, r16
    2300:	0e 94 91 09 	call	0x1322	; 0x1322 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2304:	f8 01       	movw	r30, r16
    2306:	01 90       	ld	r0, Z+
    2308:	00 20       	and	r0, r0
    230a:	e9 f7       	brne	.-6      	; 0x2306 <report+0x77a>
    230c:	31 97       	sbiw	r30, 0x01	; 1
    230e:	af 01       	movw	r20, r30
    2310:	40 1b       	sub	r20, r16
    2312:	51 0b       	sbc	r21, r17
    2314:	b8 01       	movw	r22, r16
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	0e 94 e7 16 	call	0x2dce	; 0x2dce <send_USART>
			sprintf(outbuf, dformat_PN1, left, right);
    231c:	cd 5a       	subi	r28, 0xAD	; 173
    231e:	de 4f       	sbci	r29, 0xFE	; 254
    2320:	88 81       	ld	r24, Y
    2322:	c3 55       	subi	r28, 0x53	; 83
    2324:	d1 40       	sbci	r29, 0x01	; 1
    2326:	1f 92       	push	r1
    2328:	8f 93       	push	r24
    232a:	ce 5a       	subi	r28, 0xAE	; 174
    232c:	de 4f       	sbci	r29, 0xFE	; 254
    232e:	88 81       	ld	r24, Y
    2330:	c2 55       	subi	r28, 0x52	; 82
    2332:	d1 40       	sbci	r29, 0x01	; 1
    2334:	1f 92       	push	r1
    2336:	8f 93       	push	r24
    2338:	ce 01       	movw	r24, r28
    233a:	83 5d       	subi	r24, 0xD3	; 211
    233c:	9d 4f       	sbci	r25, 0xFD	; 253
    233e:	9f 93       	push	r25
    2340:	8f 93       	push	r24
    2342:	1f 93       	push	r17
    2344:	0f 93       	push	r16
    2346:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
			writestr_OLED(1, outbuf, 1);
    234a:	41 e0       	ldi	r20, 0x01	; 1
    234c:	b8 01       	movw	r22, r16
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2354:	cc 5a       	subi	r28, 0xAC	; 172
    2356:	de 4f       	sbci	r29, 0xFE	; 254
    2358:	88 81       	ld	r24, Y
    235a:	c4 55       	subi	r28, 0x54	; 84
    235c:	d1 40       	sbci	r29, 0x01	; 1
    235e:	1f 92       	push	r1
    2360:	8f 93       	push	r24
    2362:	cf 5a       	subi	r28, 0xAF	; 175
    2364:	de 4f       	sbci	r29, 0xFE	; 254
    2366:	88 81       	ld	r24, Y
    2368:	c1 55       	subi	r28, 0x51	; 81
    236a:	d1 40       	sbci	r29, 0x01	; 1
    236c:	1f 92       	push	r1
    236e:	8f 93       	push	r24
    2370:	ce 01       	movw	r24, r28
    2372:	80 5c       	subi	r24, 0xC0	; 192
    2374:	9d 4f       	sbci	r25, 0xFD	; 253
    2376:	9f 93       	push	r25
    2378:	8f 93       	push	r24
    237a:	1f 93       	push	r17
    237c:	0f 93       	push	r16
    237e:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	42 e0       	ldi	r20, 0x02	; 2
    2388:	b8 01       	movw	r22, r16
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <writestr_OLED>
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2390:	80 e0       	ldi	r24, 0x00	; 0
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    2392:	2a c1       	rjmp	.+596    	; 0x25e8 <report+0xa5c>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    2394:	ce 01       	movw	r24, r28
    2396:	8b 5e       	subi	r24, 0xEB	; 235
    2398:	9e 4f       	sbci	r25, 0xFE	; 254
    239a:	0e 94 6b 05 	call	0xad6	; 0xad6 <get_time>
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
    239e:	24 e1       	ldi	r18, 0x14	; 20
    23a0:	ae 01       	movw	r20, r28
    23a2:	47 5d       	subi	r20, 0xD7	; 215
    23a4:	5e 4f       	sbci	r21, 0xFE	; 254
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	70 e0       	ldi	r23, 0x00	; 0
    23aa:	80 e5       	ldi	r24, 0x50	; 80
    23ac:	0e 94 31 06 	call	0xc62	; 0xc62 <read_FRAM>
			get_BOOTTIME(boottime);
    23b0:	ce 01       	movw	r24, r28
    23b2:	83 5c       	subi	r24, 0xC3	; 195
    23b4:	9e 4f       	sbci	r25, 0xFE	; 254
    23b6:	0e 94 e7 05 	call	0xbce	; 0xbce <get_BOOTTIME>
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    23ba:	24 e3       	ldi	r18, 0x34	; 52
    23bc:	20 9f       	mul	r18, r16
    23be:	c0 01       	movw	r24, r0
    23c0:	21 9f       	mul	r18, r17
    23c2:	90 0d       	add	r25, r0
    23c4:	11 24       	eor	r1, r1
    23c6:	88 55       	subi	r24, 0x58	; 88
    23c8:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
    23ca:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    23ce:	22 ff       	sbrs	r18, 2
    23d0:	03 c0       	rjmp	.+6      	; 0x23d8 <report+0x84c>
    23d2:	22 e0       	ldi	r18, 0x02	; 2
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	02 c0       	rjmp	.+4      	; 0x23dc <report+0x850>
    23d8:	21 e0       	ldi	r18, 0x01	; 1
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	9f 93       	push	r25
    23de:	8f 93       	push	r24
    23e0:	ce 01       	movw	r24, r28
    23e2:	83 5c       	subi	r24, 0xC3	; 195
    23e4:	9e 4f       	sbci	r25, 0xFE	; 254
    23e6:	9f 93       	push	r25
    23e8:	8f 93       	push	r24
    23ea:	44 97       	sbiw	r24, 0x14	; 20
    23ec:	9f 93       	push	r25
    23ee:	8f 93       	push	r24
    23f0:	8e 01       	movw	r16, r28
    23f2:	0b 5e       	subi	r16, 0xEB	; 235
    23f4:	1e 4f       	sbci	r17, 0xFE	; 254
    23f6:	1f 93       	push	r17
    23f8:	0f 93       	push	r16
    23fa:	3f 93       	push	r19
    23fc:	2f 93       	push	r18
    23fe:	86 5d       	subi	r24, 0xD6	; 214
    2400:	9e 4f       	sbci	r25, 0xFE	; 254
    2402:	9f 93       	push	r25
    2404:	8f 93       	push	r24
    2406:	82 55       	subi	r24, 0x52	; 82
    2408:	92 40       	sbci	r25, 0x02	; 2
    240a:	7c 01       	movw	r14, r24
    240c:	9f 93       	push	r25
    240e:	8f 93       	push	r24
    2410:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    2414:	c7 01       	movw	r24, r14
    2416:	0e 94 91 09 	call	0x1322	; 0x1322 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    241a:	f7 01       	movw	r30, r14
    241c:	01 90       	ld	r0, Z+
    241e:	00 20       	and	r0, r0
    2420:	e9 f7       	brne	.-6      	; 0x241c <report+0x890>
    2422:	31 97       	sbiw	r30, 0x01	; 1
    2424:	af 01       	movw	r20, r30
    2426:	4e 19       	sub	r20, r14
    2428:	5f 09       	sbc	r21, r15
    242a:	b7 01       	movw	r22, r14
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	0e 94 e7 16 	call	0x2dce	; 0x2dce <send_USART>
			writestr_OLED(1, "Time", 1);
    2432:	41 e0       	ldi	r20, 0x01	; 1
    2434:	64 e5       	ldi	r22, 0x54	; 84
    2436:	73 e8       	ldi	r23, 0x83	; 131
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    243e:	b8 01       	movw	r22, r16
    2440:	65 5f       	subi	r22, 0xF5	; 245
    2442:	7f 4f       	sbci	r23, 0xFF	; 255
    2444:	42 e0       	ldi	r20, 0x02	; 2
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <writestr_OLED>
			break;
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2450:	80 e0       	ldi	r24, 0x00	; 0
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    2452:	ca c0       	rjmp	.+404    	; 0x25e8 <report+0xa5c>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	0e 94 79 07 	call	0xef2	; 0xef2 <read_ionpump>
    245a:	f6 2e       	mov	r15, r22
    245c:	e7 2e       	mov	r14, r23
    245e:	d8 2e       	mov	r13, r24
    2460:	c9 2e       	mov	r12, r25
			bluvac = read_ionpump(BLUEPUMP);
    2462:	82 e0       	ldi	r24, 0x02	; 2
    2464:	0e 94 79 07 	call	0xef2	; 0xef2 <read_ionpump>
    2468:	b6 2e       	mov	r11, r22
    246a:	a7 2e       	mov	r10, r23
    246c:	98 2e       	mov	r9, r24
    246e:	89 2e       	mov	r8, r25
			if (get_time(currenttime)) {
    2470:	ce 01       	movw	r24, r28
    2472:	8b 5e       	subi	r24, 0xEB	; 235
    2474:	9e 4f       	sbci	r25, 0xFE	; 254
    2476:	0e 94 6b 05 	call	0xad6	; 0xad6 <get_time>
    247a:	88 23       	and	r24, r24
    247c:	29 f0       	breq	.+10     	; 0x2488 <report+0x8fc>
				printError(ERR_GETTIME, "DS3231");
    247e:	69 e5       	ldi	r22, 0x59	; 89
    2480:	73 e8       	ldi	r23, 0x83	; 131
    2482:	85 e6       	ldi	r24, 0x65	; 101
    2484:	0e 94 da 09 	call	0x13b4	; 0x13b4 <printError>
			}
			sprintf(outbuf, format_VAC, get_SPECID, currenttime, redvac, bluvac, pcmd[cstack].cid);
    2488:	24 e3       	ldi	r18, 0x34	; 52
    248a:	20 9f       	mul	r18, r16
    248c:	c0 01       	movw	r24, r0
    248e:	21 9f       	mul	r18, r17
    2490:	90 0d       	add	r25, r0
    2492:	11 24       	eor	r1, r1
    2494:	88 55       	subi	r24, 0x58	; 88
    2496:	97 4d       	sbci	r25, 0xD7	; 215
    2498:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    249c:	22 ff       	sbrs	r18, 2
    249e:	03 c0       	rjmp	.+6      	; 0x24a6 <report+0x91a>
    24a0:	22 e0       	ldi	r18, 0x02	; 2
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <report+0x91e>
    24a6:	21 e0       	ldi	r18, 0x01	; 1
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	9f 93       	push	r25
    24ac:	8f 93       	push	r24
    24ae:	8f 92       	push	r8
    24b0:	9f 92       	push	r9
    24b2:	af 92       	push	r10
    24b4:	bf 92       	push	r11
    24b6:	cf 92       	push	r12
    24b8:	df 92       	push	r13
    24ba:	ef 92       	push	r14
    24bc:	ff 92       	push	r15
    24be:	ce 01       	movw	r24, r28
    24c0:	8b 5e       	subi	r24, 0xEB	; 235
    24c2:	9e 4f       	sbci	r25, 0xFE	; 254
    24c4:	9f 93       	push	r25
    24c6:	8f 93       	push	r24
    24c8:	3f 93       	push	r19
    24ca:	2f 93       	push	r18
    24cc:	85 5a       	subi	r24, 0xA5	; 165
    24ce:	9e 4f       	sbci	r25, 0xFE	; 254
    24d0:	9f 93       	push	r25
    24d2:	8f 93       	push	r24
    24d4:	8e 01       	movw	r16, r28
    24d6:	0f 5f       	subi	r16, 0xFF	; 255
    24d8:	1f 4f       	sbci	r17, 0xFF	; 255
    24da:	1f 93       	push	r17
    24dc:	0f 93       	push	r16
    24de:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
			checksum_NMEA(outbuf);
    24e2:	c8 01       	movw	r24, r16
    24e4:	0e 94 91 09 	call	0x1322	; 0x1322 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    24e8:	f8 01       	movw	r30, r16
    24ea:	01 90       	ld	r0, Z+
    24ec:	00 20       	and	r0, r0
    24ee:	e9 f7       	brne	.-6      	; 0x24ea <report+0x95e>
    24f0:	31 97       	sbiw	r30, 0x01	; 1
    24f2:	af 01       	movw	r20, r30
    24f4:	40 1b       	sub	r20, r16
    24f6:	51 0b       	sbc	r21, r17
    24f8:	b8 01       	movw	r22, r16
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	0e 94 e7 16 	call	0x2dce	; 0x2dce <send_USART>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    2500:	41 e0       	ldi	r20, 0x01	; 1
    2502:	60 e6       	ldi	r22, 0x60	; 96
    2504:	73 e8       	ldi	r23, 0x83	; 131
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    250c:	8f 92       	push	r8
    250e:	9f 92       	push	r9
    2510:	af 92       	push	r10
    2512:	bf 92       	push	r11
    2514:	cf 92       	push	r12
    2516:	df 92       	push	r13
    2518:	ef 92       	push	r14
    251a:	ff 92       	push	r15
    251c:	ce 01       	movw	r24, r28
    251e:	87 56       	subi	r24, 0x67	; 103
    2520:	9d 4f       	sbci	r25, 0xFD	; 253
    2522:	9f 93       	push	r25
    2524:	8f 93       	push	r24
    2526:	1f 93       	push	r17
    2528:	0f 93       	push	r16
    252a:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
			writestr_OLED(1, outbuf, 2);
    252e:	42 e0       	ldi	r20, 0x02	; 2
    2530:	b8 01       	movw	r22, r16
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <writestr_OLED>
			break;
    2538:	cd bf       	out	0x3d, r28	; 61
    253a:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    253c:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    253e:	54 c0       	rjmp	.+168    	; 0x25e8 <report+0xa5c>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    2540:	ce 01       	movw	r24, r28
    2542:	86 5f       	subi	r24, 0xF6	; 246
    2544:	9e 4f       	sbci	r25, 0xFE	; 254
    2546:	0e 94 ee 05 	call	0xbdc	; 0xbdc <get_VERSION>
			get_time(currenttime);
    254a:	ce 01       	movw	r24, r28
    254c:	8b 5e       	subi	r24, 0xEB	; 235
    254e:	9e 4f       	sbci	r25, 0xFE	; 254
    2550:	0e 94 6b 05 	call	0xad6	; 0xad6 <get_time>
			sprintf(outbuf, format_VER, get_SPECID, currenttime, version, pcmd[cstack].cid);
    2554:	24 e3       	ldi	r18, 0x34	; 52
    2556:	20 9f       	mul	r18, r16
    2558:	c0 01       	movw	r24, r0
    255a:	21 9f       	mul	r18, r17
    255c:	90 0d       	add	r25, r0
    255e:	11 24       	eor	r1, r1
    2560:	88 55       	subi	r24, 0x58	; 88
    2562:	97 4d       	sbci	r25, 0xD7	; 215
    2564:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2568:	22 ff       	sbrs	r18, 2
    256a:	03 c0       	rjmp	.+6      	; 0x2572 <report+0x9e6>
    256c:	22 e0       	ldi	r18, 0x02	; 2
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	02 c0       	rjmp	.+4      	; 0x2576 <report+0x9ea>
    2572:	21 e0       	ldi	r18, 0x01	; 1
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	9f 93       	push	r25
    2578:	8f 93       	push	r24
    257a:	ce 01       	movw	r24, r28
    257c:	86 5f       	subi	r24, 0xF6	; 246
    257e:	9e 4f       	sbci	r25, 0xFE	; 254
    2580:	9f 93       	push	r25
    2582:	8f 93       	push	r24
    2584:	0b 96       	adiw	r24, 0x0b	; 11
    2586:	9f 93       	push	r25
    2588:	8f 93       	push	r24
    258a:	3f 93       	push	r19
    258c:	2f 93       	push	r18
    258e:	8f 56       	subi	r24, 0x6F	; 111
    2590:	9e 4f       	sbci	r25, 0xFE	; 254
    2592:	9f 93       	push	r25
    2594:	8f 93       	push	r24
    2596:	8e 01       	movw	r16, r28
    2598:	0f 5f       	subi	r16, 0xFF	; 255
    259a:	1f 4f       	sbci	r17, 0xFF	; 255
    259c:	1f 93       	push	r17
    259e:	0f 93       	push	r16
    25a0:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
			checksum_NMEA(outbuf);
    25a4:	c8 01       	movw	r24, r16
    25a6:	0e 94 91 09 	call	0x1322	; 0x1322 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    25aa:	f8 01       	movw	r30, r16
    25ac:	01 90       	ld	r0, Z+
    25ae:	00 20       	and	r0, r0
    25b0:	e9 f7       	brne	.-6      	; 0x25ac <report+0xa20>
    25b2:	31 97       	sbiw	r30, 0x01	; 1
    25b4:	af 01       	movw	r20, r30
    25b6:	40 1b       	sub	r20, r16
    25b8:	51 0b       	sbc	r21, r17
    25ba:	b8 01       	movw	r22, r16
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	0e 94 e7 16 	call	0x2dce	; 0x2dce <send_USART>
			writestr_OLED(1, "specMech Version", 1);
    25c2:	41 e0       	ldi	r20, 0x01	; 1
    25c4:	61 ec       	ldi	r22, 0xC1	; 193
    25c6:	72 e8       	ldi	r23, 0x82	; 130
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <writestr_OLED>
			get_VERSION(outbuf);
    25ce:	c8 01       	movw	r24, r16
    25d0:	0e 94 ee 05 	call	0xbdc	; 0xbdc <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    25d4:	42 e0       	ldi	r20, 0x02	; 2
    25d6:	b8 01       	movw	r22, r16
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <writestr_OLED>
			break;
    25de:	cd bf       	out	0x3d, r28	; 61
    25e0:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    25e2:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    25e4:	01 c0       	rjmp	.+2      	; 0x25e8 <report+0xa5c>
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    25e6:	80 e0       	ldi	r24, 0x00	; 0

}
    25e8:	c8 52       	subi	r28, 0x28	; 40
    25ea:	dd 4f       	sbci	r29, 0xFD	; 253
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	df 91       	pop	r29
    25f2:	cf 91       	pop	r28
    25f4:	1f 91       	pop	r17
    25f6:	0f 91       	pop	r16
    25f8:	ff 90       	pop	r15
    25fa:	ef 90       	pop	r14
    25fc:	df 90       	pop	r13
    25fe:	cf 90       	pop	r12
    2600:	bf 90       	pop	r11
    2602:	af 90       	pop	r10
    2604:	9f 90       	pop	r9
    2606:	8f 90       	pop	r8
    2608:	7f 90       	pop	r7
    260a:	6f 90       	pop	r6
    260c:	5f 90       	pop	r5
    260e:	4f 90       	pop	r4
    2610:	3f 90       	pop	r3
    2612:	2f 90       	pop	r2
    2614:	08 95       	ret

00002616 <crc16>:
	if (crcExpected != crcReceived) {
		return(-666.0);
	} else {
		return((float) value / 10.0);
	}
}
    2616:	dc 01       	movw	r26, r24
    2618:	40 e0       	ldi	r20, 0x00	; 0
    261a:	50 e0       	ldi	r21, 0x00	; 0
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	1b c0       	rjmp	.+54     	; 0x2658 <crc16+0x42>
    2622:	fd 01       	movw	r30, r26
    2624:	e4 0f       	add	r30, r20
    2626:	f5 1f       	adc	r31, r21
    2628:	20 81       	ld	r18, Z
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	32 2f       	mov	r19, r18
    262e:	22 27       	eor	r18, r18
    2630:	82 27       	eor	r24, r18
    2632:	93 27       	eor	r25, r19
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	0c c0       	rjmp	.+24     	; 0x2650 <crc16+0x3a>
    2638:	99 23       	and	r25, r25
    263a:	3c f4       	brge	.+14     	; 0x264a <crc16+0x34>
    263c:	88 0f       	add	r24, r24
    263e:	99 1f       	adc	r25, r25
    2640:	31 e2       	ldi	r19, 0x21	; 33
    2642:	83 27       	eor	r24, r19
    2644:	30 e1       	ldi	r19, 0x10	; 16
    2646:	93 27       	eor	r25, r19
    2648:	02 c0       	rjmp	.+4      	; 0x264e <crc16+0x38>
    264a:	88 0f       	add	r24, r24
    264c:	99 1f       	adc	r25, r25
    264e:	2f 5f       	subi	r18, 0xFF	; 255
    2650:	28 30       	cpi	r18, 0x08	; 8
    2652:	90 f3       	brcs	.-28     	; 0x2638 <crc16+0x22>
    2654:	4f 5f       	subi	r20, 0xFF	; 255
    2656:	5f 4f       	sbci	r21, 0xFF	; 255
    2658:	46 17       	cp	r20, r22
    265a:	57 07       	cpc	r21, r23
    265c:	10 f3       	brcs	.-60     	; 0x2622 <crc16+0xc>
    265e:	08 95       	ret

00002660 <ROBOGoTo>:
    2660:	cf 93       	push	r28
    2662:	df 93       	push	r29
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	65 97       	sbiw	r28, 0x15	; 21
    266a:	cd bf       	out	0x3d, r28	; 61
    266c:	de bf       	out	0x3e, r29	; 62
    266e:	89 83       	std	Y+1, r24	; 0x01
    2670:	81 e4       	ldi	r24, 0x41	; 65
    2672:	8a 83       	std	Y+2, r24	; 0x02
    2674:	1b 82       	std	Y+3, r1	; 0x03
    2676:	1c 82       	std	Y+4, r1	; 0x04
    2678:	80 e1       	ldi	r24, 0x10	; 16
    267a:	8d 83       	std	Y+5, r24	; 0x05
    267c:	1e 82       	std	Y+6, r1	; 0x06
    267e:	1f 82       	std	Y+7, r1	; 0x07
    2680:	18 86       	std	Y+8, r1	; 0x08
    2682:	90 e2       	ldi	r25, 0x20	; 32
    2684:	99 87       	std	Y+9, r25	; 0x09
    2686:	1a 86       	std	Y+10, r1	; 0x0a
    2688:	1b 86       	std	Y+11, r1	; 0x0b
    268a:	1c 86       	std	Y+12, r1	; 0x0c
    268c:	8d 87       	std	Y+13, r24	; 0x0d
    268e:	1e 86       	std	Y+14, r1	; 0x0e
    2690:	7f 87       	std	Y+15, r23	; 0x0f
    2692:	68 8b       	std	Y+16, r22	; 0x10
    2694:	59 8b       	std	Y+17, r21	; 0x11
    2696:	4a 8b       	std	Y+18, r20	; 0x12
    2698:	1b 8a       	std	Y+19, r1	; 0x13
    269a:	63 e1       	ldi	r22, 0x13	; 19
    269c:	70 e0       	ldi	r23, 0x00	; 0
    269e:	ce 01       	movw	r24, r28
    26a0:	01 96       	adiw	r24, 0x01	; 1
    26a2:	0e 94 0b 13 	call	0x2616	; 0x2616 <crc16>
    26a6:	9c 8b       	std	Y+20, r25	; 0x14
    26a8:	8d 8b       	std	Y+21, r24	; 0x15
    26aa:	45 e1       	ldi	r20, 0x15	; 21
    26ac:	be 01       	movw	r22, r28
    26ae:	6f 5f       	subi	r22, 0xFF	; 255
    26b0:	7f 4f       	sbci	r23, 0xFF	; 255
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	0e 94 e7 16 	call	0x2dce	; 0x2dce <send_USART>
    26b8:	10 92 8a 2a 	sts	0x2A8A, r1	; 0x802a8a <recv1_buf>
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <recv1_buf+0x101>
    26c2:	10 92 8d 2b 	sts	0x2B8D, r1	; 0x802b8d <recv1_buf+0x103>
    26c6:	10 92 8e 2b 	sts	0x2B8E, r1	; 0x802b8e <recv1_buf+0x104>
    26ca:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <stop_TCB0>
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	0e 94 f5 15 	call	0x2bea	; 0x2bea <start_TCB0>
    26d6:	80 91 7b 28 	lds	r24, 0x287B	; 0x80287b <ticks>
    26da:	90 91 7c 28 	lds	r25, 0x287C	; 0x80287c <ticks+0x1>
    26de:	c3 97       	sbiw	r24, 0x33	; 51
    26e0:	20 f4       	brcc	.+8      	; 0x26ea <ROBOGoTo+0x8a>
    26e2:	80 91 8e 2b 	lds	r24, 0x2B8E	; 0x802b8e <recv1_buf+0x104>
    26e6:	81 30       	cpi	r24, 0x01	; 1
    26e8:	b1 f7       	brne	.-20     	; 0x26d6 <ROBOGoTo+0x76>
    26ea:	80 91 8a 2a 	lds	r24, 0x2A8A	; 0x802a8a <recv1_buf>
    26ee:	8f 3f       	cpi	r24, 0xFF	; 255
    26f0:	11 f0       	breq	.+4      	; 0x26f6 <ROBOGoTo+0x96>
    26f2:	82 e0       	ldi	r24, 0x02	; 2
    26f4:	01 c0       	rjmp	.+2      	; 0x26f8 <ROBOGoTo+0x98>
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	65 96       	adiw	r28, 0x15	; 21
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	08 95       	ret

00002704 <get_ROBOEncoder>:
    2704:	cf 92       	push	r12
    2706:	df 92       	push	r13
    2708:	ef 92       	push	r14
    270a:	ff 92       	push	r15
    270c:	0f 93       	push	r16
    270e:	1f 93       	push	r17
    2710:	cf 93       	push	r28
    2712:	df 93       	push	r29
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	27 97       	sbiw	r28, 0x07	; 7
    271a:	cd bf       	out	0x3d, r28	; 61
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	8a 01       	movw	r16, r20
    2720:	97 e0       	ldi	r25, 0x07	; 7
    2722:	90 93 8b 2b 	sts	0x2B8B, r25	; 0x802b8b <recv1_buf+0x101>
    2726:	10 92 8d 2b 	sts	0x2B8D, r1	; 0x802b8d <recv1_buf+0x103>
    272a:	10 92 8e 2b 	sts	0x2B8E, r1	; 0x802b8e <recv1_buf+0x104>
    272e:	89 83       	std	Y+1, r24	; 0x01
    2730:	6a 83       	std	Y+2, r22	; 0x02
    2732:	42 e0       	ldi	r20, 0x02	; 2
    2734:	be 01       	movw	r22, r28
    2736:	6f 5f       	subi	r22, 0xFF	; 255
    2738:	7f 4f       	sbci	r23, 0xFF	; 255
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	0e 94 e7 16 	call	0x2dce	; 0x2dce <send_USART>
    2740:	01 c0       	rjmp	.+2      	; 0x2744 <get_ROBOEncoder+0x40>
    2742:	00 00       	nop
    2744:	80 91 8e 2b 	lds	r24, 0x2B8E	; 0x802b8e <recv1_buf+0x104>
    2748:	88 23       	and	r24, r24
    274a:	d9 f3       	breq	.-10     	; 0x2742 <get_ROBOEncoder+0x3e>
    274c:	ea e8       	ldi	r30, 0x8A	; 138
    274e:	fa e2       	ldi	r31, 0x2A	; 42
    2750:	e5 80       	ldd	r14, Z+5	; 0x05
    2752:	f1 2c       	mov	r15, r1
    2754:	fe 2c       	mov	r15, r14
    2756:	ee 24       	eor	r14, r14
    2758:	86 81       	ldd	r24, Z+6	; 0x06
    275a:	e8 2a       	or	r14, r24
    275c:	22 e0       	ldi	r18, 0x02	; 2
    275e:	0e c0       	rjmp	.+28     	; 0x277c <get_ROBOEncoder+0x78>
    2760:	82 2f       	mov	r24, r18
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	fc 01       	movw	r30, r24
    2766:	e8 57       	subi	r30, 0x78	; 120
    2768:	f5 4d       	sbci	r31, 0xD5	; 213
    276a:	30 81       	ld	r19, Z
    276c:	e1 e0       	ldi	r30, 0x01	; 1
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	ec 0f       	add	r30, r28
    2772:	fd 1f       	adc	r31, r29
    2774:	e8 0f       	add	r30, r24
    2776:	f9 1f       	adc	r31, r25
    2778:	30 83       	st	Z, r19
    277a:	2f 5f       	subi	r18, 0xFF	; 255
    277c:	27 30       	cpi	r18, 0x07	; 7
    277e:	80 f3       	brcs	.-32     	; 0x2760 <get_ROBOEncoder+0x5c>
    2780:	67 e0       	ldi	r22, 0x07	; 7
    2782:	70 e0       	ldi	r23, 0x00	; 0
    2784:	ce 01       	movw	r24, r28
    2786:	01 96       	adiw	r24, 0x01	; 1
    2788:	0e 94 0b 13 	call	0x2616	; 0x2616 <crc16>
    278c:	e8 16       	cp	r14, r24
    278e:	f9 06       	cpc	r15, r25
    2790:	41 f0       	breq	.+16     	; 0x27a2 <get_ROBOEncoder+0x9e>
    2792:	d8 01       	movw	r26, r16
    2794:	1d 92       	st	X+, r1
    2796:	1d 92       	st	X+, r1
    2798:	1d 92       	st	X+, r1
    279a:	1c 92       	st	X, r1
    279c:	13 97       	sbiw	r26, 0x03	; 3
    279e:	80 ef       	ldi	r24, 0xF0	; 240
    27a0:	3e c0       	rjmp	.+124    	; 0x281e <get_ROBOEncoder+0x11a>
    27a2:	ea e8       	ldi	r30, 0x8A	; 138
    27a4:	fa e2       	ldi	r31, 0x2A	; 42
    27a6:	80 81       	ld	r24, Z
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	a0 e0       	ldi	r26, 0x00	; 0
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	78 2f       	mov	r23, r24
    27b0:	66 27       	eor	r22, r22
    27b2:	55 27       	eor	r21, r21
    27b4:	44 27       	eor	r20, r20
    27b6:	d8 01       	movw	r26, r16
    27b8:	4d 93       	st	X+, r20
    27ba:	5d 93       	st	X+, r21
    27bc:	6d 93       	st	X+, r22
    27be:	7c 93       	st	X, r23
    27c0:	13 97       	sbiw	r26, 0x03	; 3
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	89 2f       	mov	r24, r25
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	a0 e0       	ldi	r26, 0x00	; 0
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	dc 01       	movw	r26, r24
    27ce:	99 27       	eor	r25, r25
    27d0:	88 27       	eor	r24, r24
    27d2:	6c 01       	movw	r12, r24
    27d4:	7d 01       	movw	r14, r26
    27d6:	c4 2a       	or	r12, r20
    27d8:	d5 2a       	or	r13, r21
    27da:	e6 2a       	or	r14, r22
    27dc:	f7 2a       	or	r15, r23
    27de:	d8 01       	movw	r26, r16
    27e0:	cd 92       	st	X+, r12
    27e2:	dd 92       	st	X+, r13
    27e4:	ed 92       	st	X+, r14
    27e6:	fc 92       	st	X, r15
    27e8:	13 97       	sbiw	r26, 0x03	; 3
    27ea:	42 81       	ldd	r20, Z+2	; 0x02
    27ec:	50 e0       	ldi	r21, 0x00	; 0
    27ee:	60 e0       	ldi	r22, 0x00	; 0
    27f0:	70 e0       	ldi	r23, 0x00	; 0
    27f2:	76 2f       	mov	r23, r22
    27f4:	65 2f       	mov	r22, r21
    27f6:	54 2f       	mov	r21, r20
    27f8:	44 27       	eor	r20, r20
    27fa:	4c 29       	or	r20, r12
    27fc:	5d 29       	or	r21, r13
    27fe:	6e 29       	or	r22, r14
    2800:	7f 29       	or	r23, r15
    2802:	4d 93       	st	X+, r20
    2804:	5d 93       	st	X+, r21
    2806:	6d 93       	st	X+, r22
    2808:	7c 93       	st	X, r23
    280a:	13 97       	sbiw	r26, 0x03	; 3
    280c:	23 81       	ldd	r18, Z+3	; 0x03
    280e:	42 2b       	or	r20, r18
    2810:	4d 93       	st	X+, r20
    2812:	5d 93       	st	X+, r21
    2814:	6d 93       	st	X+, r22
    2816:	7c 93       	st	X, r23
    2818:	13 97       	sbiw	r26, 0x03	; 3
    281a:	84 81       	ldd	r24, Z+4	; 0x04
    281c:	87 70       	andi	r24, 0x07	; 7
    281e:	27 96       	adiw	r28, 0x07	; 7
    2820:	cd bf       	out	0x3d, r28	; 61
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	ff 90       	pop	r15
    282e:	ef 90       	pop	r14
    2830:	df 90       	pop	r13
    2832:	cf 90       	pop	r12
    2834:	08 95       	ret

00002836 <ROBOMove>:
    2836:	ff 92       	push	r15
    2838:	0f 93       	push	r16
    283a:	1f 93       	push	r17
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	00 d0       	rcall	.+0      	; 0x2842 <ROBOMove+0xc>
    2842:	00 d0       	rcall	.+0      	; 0x2844 <ROBOMove+0xe>
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	08 2f       	mov	r16, r24
    284a:	10 e0       	ldi	r17, 0x00	; 0
    284c:	84 e3       	ldi	r24, 0x34	; 52
    284e:	80 9f       	mul	r24, r16
    2850:	f0 01       	movw	r30, r0
    2852:	81 9f       	mul	r24, r17
    2854:	f0 0d       	add	r31, r0
    2856:	11 24       	eor	r1, r1
    2858:	e3 58       	subi	r30, 0x83	; 131
    285a:	f7 4d       	sbci	r31, 0xD7	; 215
    285c:	81 81       	ldd	r24, Z+1	; 0x01
    285e:	81 34       	cpi	r24, 0x41	; 65
    2860:	08 f4       	brcc	.+2      	; 0x2864 <ROBOMove+0x2e>
    2862:	49 c0       	rjmp	.+146    	; 0x28f6 <ROBOMove+0xc0>
    2864:	84 34       	cpi	r24, 0x44	; 68
    2866:	28 f0       	brcs	.+10     	; 0x2872 <ROBOMove+0x3c>
    2868:	9f e9       	ldi	r25, 0x9F	; 159
    286a:	98 0f       	add	r25, r24
    286c:	93 30       	cpi	r25, 0x03	; 3
    286e:	c8 f0       	brcs	.+50     	; 0x28a2 <ROBOMove+0x6c>
    2870:	42 c0       	rjmp	.+132    	; 0x28f6 <ROBOMove+0xc0>
    2872:	0f 2e       	mov	r0, r31
    2874:	ff e3       	ldi	r31, 0x3F	; 63
    2876:	ff 2e       	mov	r15, r31
    2878:	f0 2d       	mov	r31, r0
    287a:	f8 0e       	add	r15, r24
    287c:	24 e3       	ldi	r18, 0x34	; 52
    287e:	20 9f       	mul	r18, r16
    2880:	c0 01       	movw	r24, r0
    2882:	21 9f       	mul	r18, r17
    2884:	90 0d       	add	r25, r0
    2886:	11 24       	eor	r1, r1
    2888:	81 58       	subi	r24, 0x81	; 129
    288a:	97 4d       	sbci	r25, 0xD7	; 215
    288c:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <atol>
    2890:	9b 01       	movw	r18, r22
    2892:	ac 01       	movw	r20, r24
    2894:	ac e0       	ldi	r26, 0x0C	; 12
    2896:	b1 e0       	ldi	r27, 0x01	; 1
    2898:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <__muluhisi3>
    289c:	ab 01       	movw	r20, r22
    289e:	bc 01       	movw	r22, r24
    28a0:	26 c0       	rjmp	.+76     	; 0x28ee <ROBOMove+0xb8>
    28a2:	0f 2e       	mov	r0, r31
    28a4:	ff e1       	ldi	r31, 0x1F	; 31
    28a6:	ff 2e       	mov	r15, r31
    28a8:	f0 2d       	mov	r31, r0
    28aa:	f8 0e       	add	r15, r24
    28ac:	ae 01       	movw	r20, r28
    28ae:	4f 5f       	subi	r20, 0xFF	; 255
    28b0:	5f 4f       	sbci	r21, 0xFF	; 255
    28b2:	60 e1       	ldi	r22, 0x10	; 16
    28b4:	8f 2d       	mov	r24, r15
    28b6:	0e 94 82 13 	call	0x2704	; 0x2704 <get_ROBOEncoder>
    28ba:	24 e3       	ldi	r18, 0x34	; 52
    28bc:	20 9f       	mul	r18, r16
    28be:	c0 01       	movw	r24, r0
    28c0:	21 9f       	mul	r18, r17
    28c2:	90 0d       	add	r25, r0
    28c4:	11 24       	eor	r1, r1
    28c6:	81 58       	subi	r24, 0x81	; 129
    28c8:	97 4d       	sbci	r25, 0xD7	; 215
    28ca:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <atol>
    28ce:	9b 01       	movw	r18, r22
    28d0:	ac 01       	movw	r20, r24
    28d2:	ac e0       	ldi	r26, 0x0C	; 12
    28d4:	b1 e0       	ldi	r27, 0x01	; 1
    28d6:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <__muluhisi3>
    28da:	09 81       	ldd	r16, Y+1	; 0x01
    28dc:	1a 81       	ldd	r17, Y+2	; 0x02
    28de:	2b 81       	ldd	r18, Y+3	; 0x03
    28e0:	3c 81       	ldd	r19, Y+4	; 0x04
    28e2:	ab 01       	movw	r20, r22
    28e4:	bc 01       	movw	r22, r24
    28e6:	40 0f       	add	r20, r16
    28e8:	51 1f       	adc	r21, r17
    28ea:	62 1f       	adc	r22, r18
    28ec:	73 1f       	adc	r23, r19
    28ee:	8f 2d       	mov	r24, r15
    28f0:	0e 94 30 13 	call	0x2660	; 0x2660 <ROBOGoTo>
    28f4:	01 c0       	rjmp	.+2      	; 0x28f8 <ROBOMove+0xc2>
    28f6:	82 e0       	ldi	r24, 0x02	; 2
    28f8:	24 96       	adiw	r28, 0x04	; 4
    28fa:	cd bf       	out	0x3d, r28	; 61
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	1f 91       	pop	r17
    2904:	0f 91       	pop	r16
    2906:	ff 90       	pop	r15
    2908:	08 95       	ret

0000290a <get_ROBOInt32>:

uint32_t get_ROBOInt32(uint8_t controller, uint8_t command)
{
    290a:	0f 93       	push	r16
    290c:	1f 93       	push	r17
    290e:	cf 93       	push	r28
    2910:	df 93       	push	r29
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
    2916:	26 97       	sbiw	r28, 0x06	; 6
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	de bf       	out	0x3e, r29	; 62
	uint8_t i, tbuf[6];
	uint16_t crcReceived, crcExpected;
	uint32_t value;

	recv1_buf.nbytes = 6;
    291c:	96 e0       	ldi	r25, 0x06	; 6
    291e:	90 93 8b 2b 	sts	0x2B8B, r25	; 0x802b8b <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2922:	10 92 8d 2b 	sts	0x2B8D, r1	; 0x802b8d <recv1_buf+0x103>
	recv1_buf.done = NO;
    2926:	10 92 8e 2b 	sts	0x2B8E, r1	; 0x802b8e <recv1_buf+0x104>

	tbuf[0] = controller;
    292a:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    292c:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);
    292e:	42 e0       	ldi	r20, 0x02	; 2
    2930:	be 01       	movw	r22, r28
    2932:	6f 5f       	subi	r22, 0xFF	; 255
    2934:	7f 4f       	sbci	r23, 0xFF	; 255
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	0e 94 e7 16 	call	0x2dce	; 0x2dce <send_USART>
	while (recv1_buf.done == NO) {
    293c:	01 c0       	rjmp	.+2      	; 0x2940 <get_ROBOInt32+0x36>
		asm("nop");
    293e:	00 00       	nop
	recv1_buf.done = NO;

	tbuf[0] = controller;
	tbuf[1] = command;
	send_USART(1, tbuf, 2);
	while (recv1_buf.done == NO) {
    2940:	80 91 8e 2b 	lds	r24, 0x2B8E	; 0x802b8e <recv1_buf+0x104>
    2944:	88 23       	and	r24, r24
    2946:	d9 f3       	breq	.-10     	; 0x293e <get_ROBOInt32+0x34>
		asm("nop");
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];
    2948:	ea e8       	ldi	r30, 0x8A	; 138
    294a:	fa e2       	ldi	r31, 0x2A	; 42
    294c:	04 81       	ldd	r16, Z+4	; 0x04
    294e:	10 e0       	ldi	r17, 0x00	; 0
    2950:	10 2f       	mov	r17, r16
    2952:	00 27       	eor	r16, r16
    2954:	85 81       	ldd	r24, Z+5	; 0x05
    2956:	08 2b       	or	r16, r24

	for (i = 2; i < 6; i++) {
    2958:	22 e0       	ldi	r18, 0x02	; 2
    295a:	0e c0       	rjmp	.+28     	; 0x2978 <get_ROBOInt32+0x6e>
		tbuf[i] = recv1_buf.data[i-2];
    295c:	82 2f       	mov	r24, r18
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	fc 01       	movw	r30, r24
    2962:	e8 57       	subi	r30, 0x78	; 120
    2964:	f5 4d       	sbci	r31, 0xD5	; 213
    2966:	30 81       	ld	r19, Z
    2968:	e1 e0       	ldi	r30, 0x01	; 1
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	ec 0f       	add	r30, r28
    296e:	fd 1f       	adc	r31, r29
    2970:	e8 0f       	add	r30, r24
    2972:	f9 1f       	adc	r31, r25
    2974:	30 83       	st	Z, r19
		asm("nop");
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {
    2976:	2f 5f       	subi	r18, 0xFF	; 255
    2978:	26 30       	cpi	r18, 0x06	; 6
    297a:	80 f3       	brcs	.-32     	; 0x295c <get_ROBOInt32+0x52>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 6);
    297c:	66 e0       	ldi	r22, 0x06	; 6
    297e:	70 e0       	ldi	r23, 0x00	; 0
    2980:	ce 01       	movw	r24, r28
    2982:	01 96       	adiw	r24, 0x01	; 1
    2984:	0e 94 0b 13 	call	0x2616	; 0x2616 <crc16>

	if (crcReceived != crcExpected) {
    2988:	08 17       	cp	r16, r24
    298a:	19 07       	cpc	r17, r25
    298c:	31 f5       	brne	.+76     	; 0x29da <get_ROBOInt32+0xd0>
		value = 0;
		return(0xF0);
	}

	value =  (uint32_t) recv1_buf.data[0] << 24;
    298e:	ea e8       	ldi	r30, 0x8A	; 138
    2990:	fa e2       	ldi	r31, 0x2A	; 42
    2992:	40 81       	ld	r20, Z
    2994:	50 e0       	ldi	r21, 0x00	; 0
    2996:	60 e0       	ldi	r22, 0x00	; 0
    2998:	70 e0       	ldi	r23, 0x00	; 0
    299a:	74 2f       	mov	r23, r20
    299c:	66 27       	eor	r22, r22
    299e:	55 27       	eor	r21, r21
    29a0:	44 27       	eor	r20, r20
	value |= (uint32_t) recv1_buf.data[1] << 16;
    29a2:	81 81       	ldd	r24, Z+1	; 0x01
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	a0 e0       	ldi	r26, 0x00	; 0
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	dc 01       	movw	r26, r24
    29ac:	99 27       	eor	r25, r25
    29ae:	88 27       	eor	r24, r24
    29b0:	48 2b       	or	r20, r24
    29b2:	59 2b       	or	r21, r25
    29b4:	6a 2b       	or	r22, r26
    29b6:	7b 2b       	or	r23, r27
	value |= (uint32_t) recv1_buf.data[2] << 8;
    29b8:	82 81       	ldd	r24, Z+2	; 0x02
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	a0 e0       	ldi	r26, 0x00	; 0
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	ba 2f       	mov	r27, r26
    29c2:	a9 2f       	mov	r26, r25
    29c4:	98 2f       	mov	r25, r24
    29c6:	88 27       	eor	r24, r24
    29c8:	84 2b       	or	r24, r20
    29ca:	95 2b       	or	r25, r21
    29cc:	a6 2b       	or	r26, r22
    29ce:	b7 2b       	or	r27, r23
	value |= (uint32_t) recv1_buf.data[3];
    29d0:	23 81       	ldd	r18, Z+3	; 0x03
	return(value);
    29d2:	bc 01       	movw	r22, r24
    29d4:	cd 01       	movw	r24, r26
    29d6:	62 2b       	or	r22, r18
    29d8:	04 c0       	rjmp	.+8      	; 0x29e2 <get_ROBOInt32+0xd8>
	}
	crcExpected = crc16(tbuf, 6);

	if (crcReceived != crcExpected) {
		value = 0;
		return(0xF0);
    29da:	60 ef       	ldi	r22, 0xF0	; 240
    29dc:	70 e0       	ldi	r23, 0x00	; 0
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	90 e0       	ldi	r25, 0x00	; 0
	value |= (uint32_t) recv1_buf.data[1] << 16;
	value |= (uint32_t) recv1_buf.data[2] << 8;
	value |= (uint32_t) recv1_buf.data[3];
	return(value);

}
    29e2:	26 96       	adiw	r28, 0x06	; 6
    29e4:	cd bf       	out	0x3d, r28	; 61
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	1f 91       	pop	r17
    29ee:	0f 91       	pop	r16
    29f0:	08 95       	ret

000029f2 <init_RTC>:
			between interrupts. ticks = 30719 generates an interrupt
			every minute. ticks = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticks)
{
    29f2:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    29f4:	e0 e6       	ldi	r30, 0x60	; 96
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    29fa:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    29fc:	88 ed       	ldi	r24, 0xD8	; 216
    29fe:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2a00:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2a02:	01 c0       	rjmp	.+2      	; 0x2a06 <init_RTC+0x14>
		asm("nop");
    2a04:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2a06:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    2a0a:	96 fd       	sbrc	r25, 6
    2a0c:	fb cf       	rjmp	.-10     	; 0x2a04 <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2a0e:	e0 e6       	ldi	r30, 0x60	; 96
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    2a14:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    2a16:	28 ed       	ldi	r18, 0xD8	; 216
    2a18:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2a1a:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    2a1c:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    2a1e:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    2a20:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2a22:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    2a24:	01 c0       	rjmp	.+2      	; 0x2a28 <init_RTC+0x36>
		asm("nop");
    2a26:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    2a28:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    2a2c:	91 11       	cpse	r25, r1
    2a2e:	fb cf       	rjmp	.-10     	; 0x2a26 <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticks;
    2a30:	e0 e4       	ldi	r30, 0x40	; 64
    2a32:	f1 e0       	ldi	r31, 0x01	; 1
    2a34:	42 87       	std	Z+10, r20	; 0x0a
    2a36:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    2a3c:	85 81       	ldd	r24, Z+5	; 0x05
    2a3e:	81 60       	ori	r24, 0x01	; 1
    2a40:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    2a42:	81 eb       	ldi	r24, 0xB1	; 177
    2a44:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    2a46:	82 81       	ldd	r24, Z+2	; 0x02
    2a48:	81 60       	ori	r24, 0x01	; 1
    2a4a:	82 83       	std	Z+2, r24	; 0x02
    2a4c:	08 95       	ret

00002a4e <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    2a4e:	1f 92       	push	r1
    2a50:	0f 92       	push	r0
    2a52:	0f b6       	in	r0, 0x3f	; 63
    2a54:	0f 92       	push	r0
    2a56:	11 24       	eor	r1, r1
    2a58:	2f 93       	push	r18
    2a5a:	3f 93       	push	r19
    2a5c:	4f 93       	push	r20
    2a5e:	5f 93       	push	r21
    2a60:	6f 93       	push	r22
    2a62:	7f 93       	push	r23
    2a64:	8f 93       	push	r24
    2a66:	9f 93       	push	r25
    2a68:	af 93       	push	r26
    2a6a:	bf 93       	push	r27
    2a6c:	ef 93       	push	r30
    2a6e:	ff 93       	push	r31

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	if (timerOLED) {
    2a76:	80 91 85 2a 	lds	r24, 0x2A85	; 0x802a85 <timerOLED>
    2a7a:	90 91 86 2a 	lds	r25, 0x2A86	; 0x802a86 <timerOLED+0x1>
    2a7e:	00 97       	sbiw	r24, 0x00	; 0
    2a80:	b9 f0       	breq	.+46     	; 0x2ab0 <__vector_3+0x62>
		if (timerOLED > timeoutOLED) {	// Display timeout
    2a82:	20 91 87 2a 	lds	r18, 0x2A87	; 0x802a87 <timeoutOLED>
    2a86:	30 91 88 2a 	lds	r19, 0x2A88	; 0x802a88 <timeoutOLED+0x1>
    2a8a:	28 17       	cp	r18, r24
    2a8c:	39 07       	cpc	r19, r25
    2a8e:	58 f4       	brcc	.+22     	; 0x2aa6 <__vector_3+0x58>
			clear_OLED(0);
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <clear_OLED>
			clear_OLED(1);
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <clear_OLED>
			timerOLED = 0;
    2a9c:	10 92 85 2a 	sts	0x2A85, r1	; 0x802a85 <timerOLED>
    2aa0:	10 92 86 2a 	sts	0x2A86, r1	; 0x802a86 <timerOLED+0x1>
    2aa4:	05 c0       	rjmp	.+10     	; 0x2ab0 <__vector_3+0x62>
		} else {
			timerOLED++;
    2aa6:	01 96       	adiw	r24, 0x01	; 1
    2aa8:	80 93 85 2a 	sts	0x2A85, r24	; 0x802a85 <timerOLED>
    2aac:	90 93 86 2a 	sts	0x2A86, r25	; 0x802a86 <timerOLED+0x1>
		}
	}
	toggle_LED;						// Defined in led.c
    2ab0:	80 e2       	ldi	r24, 0x20	; 32
    2ab2:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>

}
    2ab6:	ff 91       	pop	r31
    2ab8:	ef 91       	pop	r30
    2aba:	bf 91       	pop	r27
    2abc:	af 91       	pop	r26
    2abe:	9f 91       	pop	r25
    2ac0:	8f 91       	pop	r24
    2ac2:	7f 91       	pop	r23
    2ac4:	6f 91       	pop	r22
    2ac6:	5f 91       	pop	r21
    2ac8:	4f 91       	pop	r20
    2aca:	3f 91       	pop	r19
    2acc:	2f 91       	pop	r18
    2ace:	0f 90       	pop	r0
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	0f 90       	pop	r0
    2ad4:	1f 90       	pop	r1
    2ad6:	18 95       	reti

00002ad8 <set>:
	Returns:
		GREATERPROMPT on success
		ERRORPROMPT if an invalid object was requested.
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	24 e3       	ldi	r18, 0x34	; 52
    2ae0:	28 9f       	mul	r18, r24
    2ae2:	f0 01       	movw	r30, r0
    2ae4:	29 9f       	mul	r18, r25
    2ae6:	f0 0d       	add	r31, r0
    2ae8:	11 24       	eor	r1, r1
    2aea:	e3 58       	subi	r30, 0x83	; 131
    2aec:	f7 4d       	sbci	r31, 0xD7	; 215
    2aee:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    2af0:	24 37       	cpi	r18, 0x74	; 116
    2af2:	e9 f4       	brne	.+58     	; 0x2b2e <set+0x56>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    2af4:	24 e3       	ldi	r18, 0x34	; 52
    2af6:	28 9f       	mul	r18, r24
    2af8:	e0 01       	movw	r28, r0
    2afa:	29 9f       	mul	r18, r25
    2afc:	d0 0d       	add	r29, r0
    2afe:	11 24       	eor	r1, r1
    2b00:	c1 58       	subi	r28, 0x81	; 129
    2b02:	d7 4d       	sbci	r29, 0xD7	; 215
    2b04:	fe 01       	movw	r30, r28
    2b06:	01 90       	ld	r0, Z+
    2b08:	00 20       	and	r0, r0
    2b0a:	e9 f7       	brne	.-6      	; 0x2b06 <set+0x2e>
    2b0c:	31 97       	sbiw	r30, 0x01	; 1
    2b0e:	ec 1b       	sub	r30, r28
    2b10:	fd 0b       	sbc	r31, r29
    2b12:	73 97       	sbiw	r30, 0x13	; 19
    2b14:	71 f4       	brne	.+28     	; 0x2b32 <set+0x5a>
				return(ERRORPROMPT);
			}
			put_time(pcmd[cstack].cvalue);
    2b16:	ce 01       	movw	r24, r28
    2b18:	0e 94 cf 05 	call	0xb9e	; 0xb9e <put_time>
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    2b1c:	24 e1       	ldi	r18, 0x14	; 20
    2b1e:	ae 01       	movw	r20, r28
    2b20:	60 e0       	ldi	r22, 0x00	; 0
    2b22:	70 e0       	ldi	r23, 0x00	; 0
    2b24:	80 e5       	ldi	r24, 0x50	; 80
    2b26:	0e 94 73 06 	call	0xce6	; 0xce6 <write_FRAM>
			break;

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	03 c0       	rjmp	.+6      	; 0x2b34 <set+0x5c>
			put_time(pcmd[cstack].cvalue);
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			return(ERRORPROMPT);
    2b2e:	82 e0       	ldi	r24, 0x02	; 2
    2b30:	01 c0       	rjmp	.+2      	; 0x2b34 <set+0x5c>
	object = pcmd[cstack].cobject;

	switch(object) {
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
				return(ERRORPROMPT);
    2b32:	82 e0       	ldi	r24, 0x02	; 2

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
}
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	08 95       	ret

00002b3a <init_SPECID>:
	pullup. Must be called AFTER init_PORTS().
------------------------------------------------------------------------------*/
void init_SPECID(void)
{

	PORTF.PIN2CTRL &= ~PORT_PULLUPEN_bm;	// Remove pullup
    2b3a:	e0 ea       	ldi	r30, 0xA0	; 160
    2b3c:	f4 e0       	ldi	r31, 0x04	; 4
    2b3e:	82 89       	ldd	r24, Z+18	; 0x12
    2b40:	87 7f       	andi	r24, 0xF7	; 247
    2b42:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.DIRCLR = PIN2_bm;					// Set as input
    2b44:	84 e0       	ldi	r24, 0x04	; 4
    2b46:	82 83       	std	Z+2, r24	; 0x02
    2b48:	08 95       	ret

00002b4a <get_temperature>:
float get_temperature(uint8_t sensor)
{

	float temperature;

	switch (sensor) {
    2b4a:	83 30       	cpi	r24, 0x03	; 3
    2b4c:	18 f0       	brcs	.+6      	; 0x2b54 <get_temperature+0xa>
    2b4e:	83 30       	cpi	r24, 0x03	; 3
    2b50:	21 f0       	breq	.+8      	; 0x2b5a <get_temperature+0x10>
    2b52:	06 c0       	rjmp	.+12     	; 0x2b60 <get_temperature+0x16>
		case 0:
		case 1:
		case 2:
			temperature = read_AD590(sensor);
    2b54:	0e 94 48 01 	call	0x290	; 0x290 <read_AD590>
			break;
    2b58:	08 95       	ret
		case 3:
			temperature = read_MCP9808();
    2b5a:	0e 94 1a 08 	call	0x1034	; 0x1034 <read_MCP9808>
			break;
    2b5e:	08 95       	ret
		default:
			temperature = -999.9;
    2b60:	6a e9       	ldi	r22, 0x9A	; 154
    2b62:	79 ef       	ldi	r23, 0xF9	; 249
    2b64:	89 e7       	ldi	r24, 0x79	; 121
    2b66:	94 ec       	ldi	r25, 0xC4	; 196
			break;
	}

	return(temperature);

}
    2b68:	08 95       	ret

00002b6a <testroutine>:
#include "globals.h"
#include "roboclaw.h"

void testroutine(void)
{
    2b6a:	0f 93       	push	r16
    2b6c:	1f 93       	push	r17
    2b6e:	cf 93       	push	r28
    2b70:	df 93       	push	r29
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	e2 97       	sbiw	r28, 0x32	; 50
    2b78:	cd bf       	out	0x3d, r28	; 61
    2b7a:	de bf       	out	0x3e, r29	; 62


	char buf[50];

	start_TCB0(1);
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	0e 94 f5 15 	call	0x2bea	; 0x2bea <start_TCB0>
    2b84:	2a e6       	ldi	r18, 0x6A	; 106
    2b86:	84 e0       	ldi	r24, 0x04	; 4
    2b88:	91 e0       	ldi	r25, 0x01	; 1
    2b8a:	21 50       	subi	r18, 0x01	; 1
    2b8c:	80 40       	sbci	r24, 0x00	; 0
    2b8e:	90 40       	sbci	r25, 0x00	; 0
    2b90:	e1 f7       	brne	.-8      	; 0x2b8a <testroutine+0x20>
    2b92:	00 c0       	rjmp	.+0      	; 0x2b94 <testroutine+0x2a>
	_delay_ms(100);
	sprintf(buf, "ticks = %d\r\n", ticks);
    2b94:	80 91 7b 28 	lds	r24, 0x287B	; 0x80287b <ticks>
    2b98:	90 91 7c 28 	lds	r25, 0x287C	; 0x80287c <ticks+0x1>
    2b9c:	9f 93       	push	r25
    2b9e:	8f 93       	push	r24
    2ba0:	82 ed       	ldi	r24, 0xD2	; 210
    2ba2:	94 e8       	ldi	r25, 0x84	; 132
    2ba4:	9f 93       	push	r25
    2ba6:	8f 93       	push	r24
    2ba8:	8e 01       	movw	r16, r28
    2baa:	0f 5f       	subi	r16, 0xFF	; 255
    2bac:	1f 4f       	sbci	r17, 0xFF	; 255
    2bae:	1f 93       	push	r17
    2bb0:	0f 93       	push	r16
    2bb2:	0e 94 79 20 	call	0x40f2	; 0x40f2 <sprintf>
	send_USART(0, (uint8_t*) buf, strlen(buf));
    2bb6:	f8 01       	movw	r30, r16
    2bb8:	01 90       	ld	r0, Z+
    2bba:	00 20       	and	r0, r0
    2bbc:	e9 f7       	brne	.-6      	; 0x2bb8 <testroutine+0x4e>
    2bbe:	31 97       	sbiw	r30, 0x01	; 1
    2bc0:	af 01       	movw	r20, r30
    2bc2:	40 1b       	sub	r20, r16
    2bc4:	51 0b       	sbc	r21, r17
    2bc6:	b8 01       	movw	r22, r16
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	0e 94 e7 16 	call	0x2dce	; 0x2dce <send_USART>
	write_MCP23008(addr, OLAT, 0x00);
	_delay_ms(1000);
	write_MCP23008(addr, OLAT, 0xFF);
	send_USART(0, (uint8_t*) buf, strlen(buf));
*/
	return;
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	e2 96       	adiw	r28, 0x32	; 50
    2bdc:	cd bf       	out	0x3d, r28	; 61
    2bde:	de bf       	out	0x3e, r29	; 62
    2be0:	df 91       	pop	r29
    2be2:	cf 91       	pop	r28
    2be4:	1f 91       	pop	r17
    2be6:	0f 91       	pop	r16
    2be8:	08 95       	ret

00002bea <start_TCB0>:
#include "globals.h"

void start_TCB0(uint16_t msPeriod)
{

	ticks = 0;
    2bea:	10 92 7b 28 	sts	0x287B, r1	; 0x80287b <ticks>
    2bee:	10 92 7c 28 	sts	0x287C, r1	; 0x80287c <ticks+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    2bf2:	25 e0       	ldi	r18, 0x05	; 5
    2bf4:	3d e0       	ldi	r19, 0x0D	; 13
    2bf6:	ac 01       	movw	r20, r24
    2bf8:	42 9f       	mul	r20, r18
    2bfa:	c0 01       	movw	r24, r0
    2bfc:	43 9f       	mul	r20, r19
    2bfe:	90 0d       	add	r25, r0
    2c00:	52 9f       	mul	r21, r18
    2c02:	90 0d       	add	r25, r0
    2c04:	11 24       	eor	r1, r1
    2c06:	e0 e8       	ldi	r30, 0x80	; 128
    2c08:	fa e0       	ldi	r31, 0x0A	; 10
    2c0a:	84 87       	std	Z+12, r24	; 0x0c
    2c0c:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	85 83       	std	Z+5, r24	; 0x05
//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    2c12:	80 83       	st	Z, r24
    2c14:	08 95       	ret

00002c16 <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    2c16:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    2c1a:	08 95       	ret

00002c1c <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    2c1c:	1f 92       	push	r1
    2c1e:	0f 92       	push	r0
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	0f 92       	push	r0
    2c24:	11 24       	eor	r1, r1
    2c26:	8f 93       	push	r24
    2c28:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks++;
    2c30:	80 91 7b 28 	lds	r24, 0x287B	; 0x80287b <ticks>
    2c34:	90 91 7c 28 	lds	r25, 0x287C	; 0x80287c <ticks+0x1>
    2c38:	01 96       	adiw	r24, 0x01	; 1
    2c3a:	80 93 7b 28 	sts	0x287B, r24	; 0x80287b <ticks>
    2c3e:	90 93 7c 28 	sts	0x287C, r25	; 0x80287c <ticks+0x1>
//	toggle_BEEPER;

    2c42:	9f 91       	pop	r25
    2c44:	8f 91       	pop	r24
    2c46:	0f 90       	pop	r0
    2c48:	0f be       	out	0x3f, r0	; 63
    2c4a:	0f 90       	pop	r0
    2c4c:	1f 90       	pop	r1
    2c4e:	18 95       	reti

00002c50 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    2c50:	e0 ea       	ldi	r30, 0xA0	; 160
    2c52:	f8 e0       	ldi	r31, 0x08	; 8
    2c54:	8b e0       	ldi	r24, 0x0B	; 11
    2c56:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    2c58:	83 81       	ldd	r24, Z+3	; 0x03
    2c5a:	81 60       	ori	r24, 0x01	; 1
    2c5c:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    2c5e:	85 81       	ldd	r24, Z+5	; 0x05
    2c60:	81 60       	ori	r24, 0x01	; 1
    2c62:	85 83       	std	Z+5, r24	; 0x05
    2c64:	08 95       	ret

00002c66 <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    2c66:	01 c0       	rjmp	.+2      	; 0x2c6a <read_TWI+0x4>
		asm("nop");								// Should set timer here
    2c68:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    2c6a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2c6e:	88 23       	and	r24, r24
    2c70:	dc f7       	brge	.-10     	; 0x2c68 <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    2c72:	e0 ea       	ldi	r30, 0xA0	; 160
    2c74:	f8 e0       	ldi	r31, 0x08	; 8
    2c76:	84 81       	ldd	r24, Z+4	; 0x04
    2c78:	8b 7f       	andi	r24, 0xFB	; 251
    2c7a:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    2c7c:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    2c7e:	94 81       	ldd	r25, Z+4	; 0x04
    2c80:	92 60       	ori	r25, 0x02	; 2
    2c82:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    2c84:	08 95       	ret

00002c86 <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    2c86:	01 c0       	rjmp	.+2      	; 0x2c8a <readlast_TWI+0x4>
		asm("nop");
    2c88:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    2c8a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2c8e:	88 23       	and	r24, r24
    2c90:	dc f7       	brge	.-10     	; 0x2c88 <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    2c92:	e0 ea       	ldi	r30, 0xA0	; 160
    2c94:	f8 e0       	ldi	r31, 0x08	; 8
    2c96:	84 81       	ldd	r24, Z+4	; 0x04
    2c98:	84 60       	ori	r24, 0x04	; 4
    2c9a:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    2c9c:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    2c9e:	08 95       	ret

00002ca0 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    2ca0:	61 30       	cpi	r22, 0x01	; 1
    2ca2:	39 f4       	brne	.+14     	; 0x2cb2 <start_TWI+0x12>
//		addr = ((addr << 1) | 0x01);
		TWI0.MADDR = ((addr << 1) | 0x01);
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	88 0f       	add	r24, r24
    2ca8:	99 1f       	adc	r25, r25
    2caa:	81 60       	ori	r24, 0x01	; 1
    2cac:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    2cb0:	05 c0       	rjmp	.+10     	; 0x2cbc <start_TWI+0x1c>
	} else {
//		addr = ((addr << 1) & ~0x01);
//		addr = (addr << 1);
		TWI0.MADDR = (addr << 1);
    2cb2:	88 0f       	add	r24, r24
    2cb4:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    2cb8:	01 c0       	rjmp	.+2      	; 0x2cbc <start_TWI+0x1c>
	}

//	TWI0.MADDR = addr;							// Start condition

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
		asm("nop");								// Wait for addr transmission
    2cba:	00 00       	nop
		TWI0.MADDR = (addr << 1);
	}

//	TWI0.MADDR = addr;							// Start condition

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    2cbc:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2cc0:	80 7c       	andi	r24, 0xC0	; 192
    2cc2:	d9 f3       	breq	.-10     	; 0x2cba <start_TWI+0x1a>
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    2cc4:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2cc8:	82 fd       	sbrc	r24, 2
    2cca:	0c c0       	rjmp	.+24     	; 0x2ce4 <start_TWI+0x44>
		return(TWIBUSERR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    2ccc:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2cd0:	83 fd       	sbrc	r24, 3
    2cd2:	0a c0       	rjmp	.+20     	; 0x2ce8 <start_TWI+0x48>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    2cd4:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2cd8:	89 2f       	mov	r24, r25
    2cda:	80 71       	andi	r24, 0x10	; 16
    2cdc:	94 ff       	sbrs	r25, 4
    2cde:	05 c0       	rjmp	.+10     	; 0x2cea <start_TWI+0x4a>
		return(TWINODEVICE);
    2ce0:	84 e0       	ldi	r24, 0x04	; 4
    2ce2:	08 95       	ret
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERR);
    2ce4:	82 e0       	ldi	r24, 0x02	; 2
    2ce6:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    2ce8:	83 e0       	ldi	r24, 0x03	; 3
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
	} else {									// OK
		return(0);
	}
}
    2cea:	08 95       	ret

00002cec <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    2cec:	87 e0       	ldi	r24, 0x07	; 7
    2cee:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    2cf2:	08 95       	ret

00002cf4 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    2cf4:	01 c0       	rjmp	.+2      	; 0x2cf8 <write_TWI+0x4>
		asm("nop");
    2cf6:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    2cf8:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2cfc:	96 ff       	sbrs	r25, 6
    2cfe:	fb cf       	rjmp	.-10     	; 0x2cf6 <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    2d00:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    2d04:	01 c0       	rjmp	.+2      	; 0x2d08 <write_TWI+0x14>
		asm("nop");
    2d06:	00 00       	nop
		asm("nop");
	}

	TWI0.MDATA = data;

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    2d08:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2d0c:	86 ff       	sbrs	r24, 6
    2d0e:	fb cf       	rjmp	.-10     	; 0x2d06 <write_TWI+0x12>
		asm("nop");
	}

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    2d10:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2d14:	89 2f       	mov	r24, r25
    2d16:	80 71       	andi	r24, 0x10	; 16
    2d18:	94 fd       	sbrc	r25, 4
		return(TWINODEVICE);
    2d1a:	84 e0       	ldi	r24, 0x04	; 4
	} else {
		return(0);
	}

}
    2d1c:	08 95       	ret

00002d1e <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    2d1e:	e0 e0       	ldi	r30, 0x00	; 0
    2d20:	f4 e0       	ldi	r31, 0x04	; 4
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    2d26:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    2d28:	e0 e0       	ldi	r30, 0x00	; 0
    2d2a:	f8 e0       	ldi	r31, 0x08	; 8
    2d2c:	2d e6       	ldi	r18, 0x6D	; 109
    2d2e:	35 e0       	ldi	r19, 0x05	; 5
    2d30:	20 87       	std	Z+8, r18	; 0x08
    2d32:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    2d34:	95 81       	ldd	r25, Z+5	; 0x05
    2d36:	90 68       	ori	r25, 0x80	; 128
    2d38:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    2d3a:	96 81       	ldd	r25, Z+6	; 0x06
    2d3c:	90 64       	ori	r25, 0x40	; 64
    2d3e:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART Receiver
    2d40:	96 81       	ldd	r25, Z+6	; 0x06
    2d42:	90 68       	ori	r25, 0x80	; 128
    2d44:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;
    2d46:	10 92 93 2d 	sts	0x2D93, r1	; 0x802d93 <send0_buf+0xff>
	send0_buf.tail = 0;
    2d4a:	10 92 94 2d 	sts	0x2D94, r1	; 0x802d94 <send0_buf+0x100>
	send0_buf.done = YES;
    2d4e:	80 93 98 2d 	sts	0x2D98, r24	; 0x802d98 <send0_buf+0x104>
	recv0_buf.head = 0;
    2d52:	10 92 8e 2c 	sts	0x2C8E, r1	; 0x802c8e <recv0_buf+0xff>
	recv0_buf.tail = 0;
    2d56:	10 92 8f 2c 	sts	0x2C8F, r1	; 0x802c8f <recv0_buf+0x100>
	recv0_buf.data[0] = '\0';
    2d5a:	10 92 8f 2b 	sts	0x2B8F, r1	; 0x802b8f <recv0_buf>
	recv0_buf.length = 0;
    2d5e:	10 92 91 2c 	sts	0x2C91, r1	; 0x802c91 <recv0_buf+0x102>
	recv0_buf.done = NO;
    2d62:	10 92 93 2c 	sts	0x2C93, r1	; 0x802c93 <recv0_buf+0x104>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    2d66:	e0 e4       	ldi	r30, 0x40	; 64
    2d68:	f4 e0       	ldi	r31, 0x04	; 4
    2d6a:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    2d6c:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
    2d6e:	e0 e2       	ldi	r30, 0x20	; 32
    2d70:	f8 e0       	ldi	r31, 0x08	; 8
    2d72:	4b e5       	ldi	r20, 0x5B	; 91
    2d74:	51 e0       	ldi	r21, 0x01	; 1
    2d76:	40 87       	std	Z+8, r20	; 0x08
    2d78:	51 87       	std	Z+9, r21	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    2d7a:	95 81       	ldd	r25, Z+5	; 0x05
    2d7c:	90 68       	ori	r25, 0x80	; 128
    2d7e:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;
    2d80:	96 81       	ldd	r25, Z+6	; 0x06
    2d82:	90 64       	ori	r25, 0x40	; 64
    2d84:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;
    2d86:	96 81       	ldd	r25, Z+6	; 0x06
    2d88:	90 68       	ori	r25, 0x80	; 128
    2d8a:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    2d8c:	10 92 a2 30 	sts	0x30A2, r1	; 0x8030a2 <send1_buf+0xff>
	send1_buf.tail = 0;
    2d90:	10 92 a3 30 	sts	0x30A3, r1	; 0x8030a3 <send1_buf+0x100>
	send1_buf.done = YES;
    2d94:	80 93 a7 30 	sts	0x30A7, r24	; 0x8030a7 <send1_buf+0x104>
	recv1_buf.head = 0;
    2d98:	10 92 89 2b 	sts	0x2B89, r1	; 0x802b89 <recv1_buf+0xff>
	recv1_buf.tail = 0;
    2d9c:	10 92 8a 2b 	sts	0x2B8A, r1	; 0x802b8a <recv1_buf+0x100>
	recv1_buf.data[0] = '\0';
    2da0:	10 92 8a 2a 	sts	0x2A8A, r1	; 0x802a8a <recv1_buf>
	recv1_buf.done = NO;
    2da4:	10 92 8e 2b 	sts	0x2B8E, r1	; 0x802b8e <recv1_buf+0x104>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    2da8:	e0 e2       	ldi	r30, 0x20	; 32
    2daa:	f4 e0       	ldi	r31, 0x04	; 4
    2dac:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    2dae:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    2db0:	e0 e6       	ldi	r30, 0x60	; 96
    2db2:	f8 e0       	ldi	r31, 0x08	; 8
    2db4:	20 87       	std	Z+8, r18	; 0x08
    2db6:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    2db8:	96 81       	ldd	r25, Z+6	; 0x06
    2dba:	90 64       	ori	r25, 0x40	; 64
    2dbc:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    2dbe:	96 81       	ldd	r25, Z+6	; 0x06
    2dc0:	90 68       	ori	r25, 0x80	; 128
    2dc2:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    2dc4:	80 93 a2 2f 	sts	0x2FA2, r24	; 0x802fa2 <send3_buf+0x104>
	recv3_buf.done = NO;
    2dc8:	10 92 9d 2e 	sts	0x2E9D, r1	; 0x802e9d <recv3_buf+0x104>
    2dcc:	08 95       	ret

00002dce <send_USART>:
		port - The USARTn port (0, 1, or 3)
		data - Contains the data to send
		nbytes - Number of bytes to send
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    2dce:	0f 93       	push	r16
    2dd0:	1f 93       	push	r17
    2dd2:	cf 93       	push	r28
    2dd4:	df 93       	push	r29
    2dd6:	eb 01       	movw	r28, r22
    2dd8:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    2dda:	81 30       	cpi	r24, 0x01	; 1
    2ddc:	01 f1       	breq	.+64     	; 0x2e1e <send_USART+0x50>
    2dde:	b0 f0       	brcs	.+44     	; 0x2e0c <send_USART+0x3e>
    2de0:	83 30       	cpi	r24, 0x03	; 3
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <send_USART+0x18>
    2de4:	6d c0       	rjmp	.+218    	; 0x2ec0 <send_USART+0xf2>
    2de6:	74 c0       	rjmp	.+232    	; 0x2ed0 <send_USART+0x102>
		case 0:
			for (i = 0; i < nbytes; i++) {
				send0_buf.data[send0_buf.head] = *data++;
    2de8:	e3 e9       	ldi	r30, 0x93	; 147
    2dea:	fd e2       	ldi	r31, 0x2D	; 45
    2dec:	80 81       	ld	r24, Z
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	38 81       	ld	r19, Y
    2df2:	dc 01       	movw	r26, r24
    2df4:	ac 56       	subi	r26, 0x6C	; 108
    2df6:	b3 4d       	sbci	r27, 0xD3	; 211
    2df8:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    2dfa:	01 96       	adiw	r24, 0x01	; 1
    2dfc:	6f ef       	ldi	r22, 0xFF	; 255
    2dfe:	70 e0       	ldi	r23, 0x00	; 0
    2e00:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__divmodhi4>
    2e04:	80 83       	st	Z, r24
	uint8_t i;
	uint16_t crc;

	switch (port) {
		case 0:
			for (i = 0; i < nbytes; i++) {
    2e06:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    2e08:	21 96       	adiw	r28, 0x01	; 1
    2e0a:	01 c0       	rjmp	.+2      	; 0x2e0e <send_USART+0x40>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
		case 0:
			for (i = 0; i < nbytes; i++) {
    2e0e:	21 17       	cp	r18, r17
    2e10:	58 f3       	brcs	.-42     	; 0x2de8 <send_USART+0x1a>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    2e12:	e0 e0       	ldi	r30, 0x00	; 0
    2e14:	f8 e0       	ldi	r31, 0x08	; 8
    2e16:	85 81       	ldd	r24, Z+5	; 0x05
    2e18:	80 62       	ori	r24, 0x20	; 32
    2e1a:	85 83       	std	Z+5, r24	; 0x05
			break;
    2e1c:	59 c0       	rjmp	.+178    	; 0x2ed0 <send_USART+0x102>

		case 1:
			crc = crc16(data, nbytes);
    2e1e:	64 2f       	mov	r22, r20
    2e20:	70 e0       	ldi	r23, 0x00	; 0
    2e22:	ce 01       	movw	r24, r28
    2e24:	0e 94 0b 13 	call	0x2616	; 0x2616 <crc16>
    2e28:	48 2f       	mov	r20, r24
    2e2a:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	11 c0       	rjmp	.+34     	; 0x2e52 <send_USART+0x84>
				send1_buf.data[send1_buf.head] = *data++;
    2e30:	e2 ea       	ldi	r30, 0xA2	; 162
    2e32:	f0 e3       	ldi	r31, 0x30	; 48
    2e34:	80 81       	ld	r24, Z
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	38 81       	ld	r19, Y
    2e3a:	dc 01       	movw	r26, r24
    2e3c:	ad 55       	subi	r26, 0x5D	; 93
    2e3e:	b0 4d       	sbci	r27, 0xD0	; 208
    2e40:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    2e42:	01 96       	adiw	r24, 0x01	; 1
    2e44:	6f ef       	ldi	r22, 0xFF	; 255
    2e46:	70 e0       	ldi	r23, 0x00	; 0
    2e48:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__divmodhi4>
    2e4c:	80 83       	st	Z, r24
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    2e4e:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    2e50:	21 96       	adiw	r28, 0x01	; 1
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    2e52:	21 17       	cp	r18, r17
    2e54:	68 f3       	brcs	.-38     	; 0x2e30 <send_USART+0x62>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    2e56:	e2 ea       	ldi	r30, 0xA2	; 162
    2e58:	f0 e3       	ldi	r31, 0x30	; 48
    2e5a:	80 81       	ld	r24, Z
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	dc 01       	movw	r26, r24
    2e60:	ad 55       	subi	r26, 0x5D	; 93
    2e62:	b0 4d       	sbci	r27, 0xD0	; 208
    2e64:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    2e66:	01 96       	adiw	r24, 0x01	; 1
    2e68:	2f ef       	ldi	r18, 0xFF	; 255
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	b9 01       	movw	r22, r18
    2e6e:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	dc 01       	movw	r26, r24
    2e76:	ad 55       	subi	r26, 0x5D	; 93
    2e78:	b0 4d       	sbci	r27, 0xD0	; 208
    2e7a:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    2e7c:	01 96       	adiw	r24, 0x01	; 1
    2e7e:	b9 01       	movw	r22, r18
    2e80:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__divmodhi4>
    2e84:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    2e86:	1e 5f       	subi	r17, 0xFE	; 254
    2e88:	10 93 a4 30 	sts	0x30A4, r17	; 0x8030a4 <send1_buf+0x101>
			send1_buf.nxfrd = 0;
    2e8c:	10 92 a6 30 	sts	0x30A6, r1	; 0x8030a6 <send1_buf+0x103>
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    2e90:	e0 e2       	ldi	r30, 0x20	; 32
    2e92:	f8 e0       	ldi	r31, 0x08	; 8
    2e94:	85 81       	ldd	r24, Z+5	; 0x05
    2e96:	80 62       	ori	r24, 0x20	; 32
    2e98:	85 83       	std	Z+5, r24	; 0x05
			break;
    2e9a:	1a c0       	rjmp	.+52     	; 0x2ed0 <send_USART+0x102>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    2e9c:	ed e9       	ldi	r30, 0x9D	; 157
    2e9e:	ff e2       	ldi	r31, 0x2F	; 47
    2ea0:	80 81       	ld	r24, Z
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	38 81       	ld	r19, Y
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	a2 56       	subi	r26, 0x62	; 98
    2eaa:	b1 4d       	sbci	r27, 0xD1	; 209
    2eac:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    2eae:	01 96       	adiw	r24, 0x01	; 1
    2eb0:	6f ef       	ldi	r22, 0xFF	; 255
    2eb2:	70 e0       	ldi	r23, 0x00	; 0
    2eb4:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__divmodhi4>
    2eb8:	80 83       	st	Z, r24
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    2eba:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    2ebc:	21 96       	adiw	r28, 0x01	; 1
    2ebe:	01 c0       	rjmp	.+2      	; 0x2ec2 <send_USART+0xf4>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    2ec2:	21 17       	cp	r18, r17
    2ec4:	58 f3       	brcs	.-42     	; 0x2e9c <send_USART+0xce>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    2ec6:	e0 e6       	ldi	r30, 0x60	; 96
    2ec8:	f8 e0       	ldi	r31, 0x08	; 8
    2eca:	85 81       	ldd	r24, Z+5	; 0x05
    2ecc:	80 62       	ori	r24, 0x20	; 32
    2ece:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    2ed0:	df 91       	pop	r29
    2ed2:	cf 91       	pop	r28
    2ed4:	1f 91       	pop	r17
    2ed6:	0f 91       	pop	r16
    2ed8:	08 95       	ret

00002eda <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    2eda:	1f 92       	push	r1
    2edc:	0f 92       	push	r0
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	0f 92       	push	r0
    2ee2:	11 24       	eor	r1, r1
    2ee4:	5f 93       	push	r21
    2ee6:	6f 93       	push	r22
    2ee8:	7f 93       	push	r23
    2eea:	8f 93       	push	r24
    2eec:	9f 93       	push	r25
    2eee:	af 93       	push	r26
    2ef0:	bf 93       	push	r27
    2ef2:	ef 93       	push	r30
    2ef4:	ff 93       	push	r31

	uint8_t c;

	if (recv0_buf.length < BUFSIZE) {
    2ef6:	80 91 91 2c 	lds	r24, 0x2C91	; 0x802c91 <recv0_buf+0x102>
    2efa:	8f 3f       	cpi	r24, 0xFF	; 255
    2efc:	19 f1       	breq	.+70     	; 0x2f44 <__vector_17+0x6a>
		c = USART0.RXDATAL;
    2efe:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
		if ((char) c == '\r') {
    2f02:	8d 30       	cpi	r24, 0x0D	; 13
    2f04:	51 f4       	brne	.+20     	; 0x2f1a <__vector_17+0x40>
			recv0_buf.done = YES;
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	80 93 93 2c 	sts	0x2C93, r24	; 0x802c93 <recv0_buf+0x104>
			recv0_buf.data[recv0_buf.head] = '\0';
    2f0c:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <recv0_buf+0xff>
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	e1 57       	subi	r30, 0x71	; 113
    2f14:	f4 4d       	sbci	r31, 0xD4	; 212
    2f16:	10 82       	st	Z, r1
    2f18:	06 c0       	rjmp	.+12     	; 0x2f26 <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    2f1a:	e0 91 8e 2c 	lds	r30, 0x2C8E	; 0x802c8e <recv0_buf+0xff>
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	e1 57       	subi	r30, 0x71	; 113
    2f22:	f4 4d       	sbci	r31, 0xD4	; 212
    2f24:	80 83       	st	Z, r24
		}
		recv0_buf.length++;
    2f26:	e1 e9       	ldi	r30, 0x91	; 145
    2f28:	fc e2       	ldi	r31, 0x2C	; 44
    2f2a:	80 81       	ld	r24, Z
    2f2c:	8f 5f       	subi	r24, 0xFF	; 255
    2f2e:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    2f30:	ee e8       	ldi	r30, 0x8E	; 142
    2f32:	fc e2       	ldi	r31, 0x2C	; 44
    2f34:	80 81       	ld	r24, Z
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	01 96       	adiw	r24, 0x01	; 1
    2f3a:	6f ef       	ldi	r22, 0xFF	; 255
    2f3c:	70 e0       	ldi	r23, 0x00	; 0
    2f3e:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__divmodhi4>
    2f42:	80 83       	st	Z, r24
	}
}
    2f44:	ff 91       	pop	r31
    2f46:	ef 91       	pop	r30
    2f48:	bf 91       	pop	r27
    2f4a:	af 91       	pop	r26
    2f4c:	9f 91       	pop	r25
    2f4e:	8f 91       	pop	r24
    2f50:	7f 91       	pop	r23
    2f52:	6f 91       	pop	r22
    2f54:	5f 91       	pop	r21
    2f56:	0f 90       	pop	r0
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	0f 90       	pop	r0
    2f5c:	1f 90       	pop	r1
    2f5e:	18 95       	reti

00002f60 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    2f60:	1f 92       	push	r1
    2f62:	0f 92       	push	r0
    2f64:	0f b6       	in	r0, 0x3f	; 63
    2f66:	0f 92       	push	r0
    2f68:	11 24       	eor	r1, r1
    2f6a:	8f 93       	push	r24
    2f6c:	9f 93       	push	r25
    2f6e:	ef 93       	push	r30
    2f70:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2f72:	e0 e0       	ldi	r30, 0x00	; 0
    2f74:	f8 e0       	ldi	r31, 0x08	; 8
    2f76:	85 81       	ldd	r24, Z+5	; 0x05
    2f78:	8f 7d       	andi	r24, 0xDF	; 223
    2f7a:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    2f7c:	80 91 93 2d 	lds	r24, 0x2D93	; 0x802d93 <send0_buf+0xff>
    2f80:	e0 91 94 2d 	lds	r30, 0x2D94	; 0x802d94 <send0_buf+0x100>
    2f84:	8e 17       	cp	r24, r30
    2f86:	b9 f0       	breq	.+46     	; 0x2fb6 <__vector_18+0x56>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    2f88:	91 e0       	ldi	r25, 0x01	; 1
    2f8a:	9e 0f       	add	r25, r30
    2f8c:	90 93 94 2d 	sts	0x2D94, r25	; 0x802d94 <send0_buf+0x100>
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	ec 56       	subi	r30, 0x6C	; 108
    2f94:	f3 4d       	sbci	r31, 0xD3	; 211
    2f96:	80 81       	ld	r24, Z
    2f98:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	9f 3f       	cpi	r25, 0xFF	; 255
    2fa0:	08 f4       	brcc	.+2      	; 0x2fa4 <__vector_18+0x44>
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	89 0f       	add	r24, r25
    2fa6:	80 93 94 2d 	sts	0x2D94, r24	; 0x802d94 <send0_buf+0x100>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    2faa:	e0 e0       	ldi	r30, 0x00	; 0
    2fac:	f8 e0       	ldi	r31, 0x08	; 8
    2fae:	85 81       	ldd	r24, Z+5	; 0x05
    2fb0:	80 62       	ori	r24, 0x20	; 32
    2fb2:	85 83       	std	Z+5, r24	; 0x05
    2fb4:	03 c0       	rjmp	.+6      	; 0x2fbc <__vector_18+0x5c>
	} else {
		send0_buf.done = YES;
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	80 93 98 2d 	sts	0x2D98, r24	; 0x802d98 <send0_buf+0x104>
	}

}
    2fbc:	ff 91       	pop	r31
    2fbe:	ef 91       	pop	r30
    2fc0:	9f 91       	pop	r25
    2fc2:	8f 91       	pop	r24
    2fc4:	0f 90       	pop	r0
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	0f 90       	pop	r0
    2fca:	1f 90       	pop	r1
    2fcc:	18 95       	reti

00002fce <__vector_26>:
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.

------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    2fce:	1f 92       	push	r1
    2fd0:	0f 92       	push	r0
    2fd2:	0f b6       	in	r0, 0x3f	; 63
    2fd4:	0f 92       	push	r0
    2fd6:	11 24       	eor	r1, r1
    2fd8:	2f 93       	push	r18
    2fda:	8f 93       	push	r24
    2fdc:	9f 93       	push	r25
    2fde:	ef 93       	push	r30
    2fe0:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    2fe2:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>

	if (recv1_buf.nxfrd < recv1_buf.nbytes) {
    2fe6:	e0 91 8d 2b 	lds	r30, 0x2B8D	; 0x802b8d <recv1_buf+0x103>
    2fea:	80 91 8b 2b 	lds	r24, 0x2B8B	; 0x802b8b <recv1_buf+0x101>
    2fee:	e8 17       	cp	r30, r24
    2ff0:	40 f4       	brcc	.+16     	; 0x3002 <__vector_26+0x34>
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    2ff2:	21 e0       	ldi	r18, 0x01	; 1
    2ff4:	2e 0f       	add	r18, r30
    2ff6:	20 93 8d 2b 	sts	0x2B8D, r18	; 0x802b8d <recv1_buf+0x103>
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	e6 57       	subi	r30, 0x76	; 118
    2ffe:	f5 4d       	sbci	r31, 0xD5	; 213
    3000:	90 83       	st	Z, r25
	}

	if (recv1_buf.nxfrd >= recv1_buf.nbytes) {
    3002:	90 91 8d 2b 	lds	r25, 0x2B8D	; 0x802b8d <recv1_buf+0x103>
    3006:	98 17       	cp	r25, r24
    3008:	18 f0       	brcs	.+6      	; 0x3010 <__vector_26+0x42>
		recv1_buf.done = YES;
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	80 93 8e 2b 	sts	0x2B8E, r24	; 0x802b8e <recv1_buf+0x104>
	}

}
    3010:	ff 91       	pop	r31
    3012:	ef 91       	pop	r30
    3014:	9f 91       	pop	r25
    3016:	8f 91       	pop	r24
    3018:	2f 91       	pop	r18
    301a:	0f 90       	pop	r0
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	0f 90       	pop	r0
    3020:	1f 90       	pop	r1
    3022:	18 95       	reti

00003024 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    3024:	1f 92       	push	r1
    3026:	0f 92       	push	r0
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	0f 92       	push	r0
    302c:	11 24       	eor	r1, r1
    302e:	8f 93       	push	r24
    3030:	9f 93       	push	r25
    3032:	ef 93       	push	r30
    3034:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    3036:	e0 e2       	ldi	r30, 0x20	; 32
    3038:	f8 e0       	ldi	r31, 0x08	; 8
    303a:	85 81       	ldd	r24, Z+5	; 0x05
    303c:	8f 7d       	andi	r24, 0xDF	; 223
    303e:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    3040:	80 91 a2 30 	lds	r24, 0x30A2	; 0x8030a2 <send1_buf+0xff>
    3044:	e0 91 a3 30 	lds	r30, 0x30A3	; 0x8030a3 <send1_buf+0x100>
    3048:	8e 17       	cp	r24, r30
    304a:	b9 f0       	breq	.+46     	; 0x307a <__vector_27+0x56>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    304c:	91 e0       	ldi	r25, 0x01	; 1
    304e:	9e 0f       	add	r25, r30
    3050:	90 93 a3 30 	sts	0x30A3, r25	; 0x8030a3 <send1_buf+0x100>
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	ed 55       	subi	r30, 0x5D	; 93
    3058:	f0 4d       	sbci	r31, 0xD0	; 208
    305a:	80 81       	ld	r24, Z
    305c:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	9f 3f       	cpi	r25, 0xFF	; 255
    3064:	08 f4       	brcc	.+2      	; 0x3068 <__vector_27+0x44>
    3066:	80 e0       	ldi	r24, 0x00	; 0
    3068:	89 0f       	add	r24, r25
    306a:	80 93 a3 30 	sts	0x30A3, r24	; 0x8030a3 <send1_buf+0x100>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    306e:	e0 e2       	ldi	r30, 0x20	; 32
    3070:	f8 e0       	ldi	r31, 0x08	; 8
    3072:	85 81       	ldd	r24, Z+5	; 0x05
    3074:	80 62       	ori	r24, 0x20	; 32
    3076:	85 83       	std	Z+5, r24	; 0x05
    3078:	03 c0       	rjmp	.+6      	; 0x3080 <__vector_27+0x5c>
	} else {
		send1_buf.done = YES;
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	80 93 a7 30 	sts	0x30A7, r24	; 0x8030a7 <send1_buf+0x104>
	if (send1_buf.nxfrd >= send1_buf.nbytes) {
		USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
		send1_buf.done = YES;
	}
*/
}
    3080:	ff 91       	pop	r31
    3082:	ef 91       	pop	r30
    3084:	9f 91       	pop	r25
    3086:	8f 91       	pop	r24
    3088:	0f 90       	pop	r0
    308a:	0f be       	out	0x3f, r0	; 63
    308c:	0f 90       	pop	r0
    308e:	1f 90       	pop	r1
    3090:	18 95       	reti

00003092 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    3092:	1f 92       	push	r1
    3094:	0f 92       	push	r0
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	0f 92       	push	r0
    309a:	11 24       	eor	r1, r1
    309c:	8f 93       	push	r24
    309e:	9f 93       	push	r25
    30a0:	af 93       	push	r26
    30a2:	bf 93       	push	r27
    30a4:	ef 93       	push	r30
    30a6:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    30a8:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    30ac:	8d 30       	cpi	r24, 0x0D	; 13
    30ae:	21 f0       	breq	.+8      	; 0x30b8 <__vector_37+0x26>
    30b0:	e0 91 9c 2e 	lds	r30, 0x2E9C	; 0x802e9c <recv3_buf+0x103>
    30b4:	ee 3f       	cpi	r30, 0xFE	; 254
    30b6:	78 f0       	brcs	.+30     	; 0x30d6 <__vector_37+0x44>
		recv3_buf.done = YES;
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	80 93 9d 2e 	sts	0x2E9D, r24	; 0x802e9d <recv3_buf+0x104>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    30be:	ac e9       	ldi	r26, 0x9C	; 156
    30c0:	be e2       	ldi	r27, 0x2E	; 46
    30c2:	8c 91       	ld	r24, X
    30c4:	e8 2f       	mov	r30, r24
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	e7 56       	subi	r30, 0x67	; 103
    30ca:	f2 4d       	sbci	r31, 0xD2	; 210
    30cc:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    30ce:	80 93 9a 2e 	sts	0x2E9A, r24	; 0x802e9a <recv3_buf+0x101>
		recv3_buf.nxfrd = 0;
    30d2:	1c 92       	st	X, r1
		return;
    30d4:	08 c0       	rjmp	.+16     	; 0x30e6 <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    30d6:	91 e0       	ldi	r25, 0x01	; 1
    30d8:	9e 0f       	add	r25, r30
    30da:	90 93 9c 2e 	sts	0x2E9C, r25	; 0x802e9c <recv3_buf+0x103>
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	e7 56       	subi	r30, 0x67	; 103
    30e2:	f2 4d       	sbci	r31, 0xD2	; 210
    30e4:	80 83       	st	Z, r24
	}

}
    30e6:	ff 91       	pop	r31
    30e8:	ef 91       	pop	r30
    30ea:	bf 91       	pop	r27
    30ec:	af 91       	pop	r26
    30ee:	9f 91       	pop	r25
    30f0:	8f 91       	pop	r24
    30f2:	0f 90       	pop	r0
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	0f 90       	pop	r0
    30f8:	1f 90       	pop	r1
    30fa:	18 95       	reti

000030fc <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    30fc:	1f 92       	push	r1
    30fe:	0f 92       	push	r0
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	0f 92       	push	r0
    3104:	11 24       	eor	r1, r1
    3106:	8f 93       	push	r24
    3108:	9f 93       	push	r25
    310a:	af 93       	push	r26
    310c:	bf 93       	push	r27
    310e:	ef 93       	push	r30
    3110:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    3112:	a1 ea       	ldi	r26, 0xA1	; 161
    3114:	bf e2       	ldi	r27, 0x2F	; 47
    3116:	ec 91       	ld	r30, X
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	8e 0f       	add	r24, r30
    311c:	8c 93       	st	X, r24
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	e2 56       	subi	r30, 0x62	; 98
    3122:	f1 4d       	sbci	r31, 0xD1	; 209
    3124:	90 81       	ld	r25, Z
    3126:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    312a:	90 91 9f 2f 	lds	r25, 0x2F9F	; 0x802f9f <send3_buf+0x101>
    312e:	89 17       	cp	r24, r25
    3130:	40 f0       	brcs	.+16     	; 0x3142 <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    3132:	e0 e6       	ldi	r30, 0x60	; 96
    3134:	f8 e0       	ldi	r31, 0x08	; 8
    3136:	85 81       	ldd	r24, Z+5	; 0x05
    3138:	8f 7d       	andi	r24, 0xDF	; 223
    313a:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	80 93 a2 2f 	sts	0x2FA2, r24	; 0x802fa2 <send3_buf+0x104>
	}

}
    3142:	ff 91       	pop	r31
    3144:	ef 91       	pop	r30
    3146:	bf 91       	pop	r27
    3148:	af 91       	pop	r26
    314a:	9f 91       	pop	r25
    314c:	8f 91       	pop	r24
    314e:	0f 90       	pop	r0
    3150:	0f be       	out	0x3f, r0	; 63
    3152:	0f 90       	pop	r0
    3154:	1f 90       	pop	r1
    3156:	18 95       	reti

00003158 <reboot>:
#include "initialize.h"

void reboot(void)
{

	init_USART();
    3158:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <init_USART>
	init_XPORT();
    315c:	0e 94 b6 18 	call	0x316c	; 0x316c <init_XPORT>
	CPU_CCP = CCP_IOREG_gc;
    3160:	88 ed       	ldi	r24, 0xD8	; 216
    3162:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    316a:	08 95       	ret

0000316c <init_XPORT>:
#include "initialize.h"

void init_XPORT(void)
{

	PORTC.OUTCLR = PIN3_bm;		// PC3 is the /RESET pin for the XPort
    316c:	e0 e4       	ldi	r30, 0x40	; 64
    316e:	f4 e0       	ldi	r31, 0x04	; 4
    3170:	88 e0       	ldi	r24, 0x08	; 8
    3172:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;
    3174:	81 83       	std	Z+1, r24	; 0x01
    3176:	ad e8       	ldi	r26, 0x8D	; 141
    3178:	b0 e2       	ldi	r27, 0x20	; 32
    317a:	11 97       	sbiw	r26, 0x01	; 1
    317c:	f1 f7       	brne	.-4      	; 0x317a <init_XPORT+0xe>
    317e:	00 00       	nop
	_delay_ms(10);				// Reset signal
	PORTC.OUTSET = PIN3_bm;
    3180:	85 83       	std	Z+5, r24	; 0x05
    3182:	08 95       	ret

00003184 <__subsf3>:
    3184:	50 58       	subi	r21, 0x80	; 128

00003186 <__addsf3>:
    3186:	bb 27       	eor	r27, r27
    3188:	aa 27       	eor	r26, r26
    318a:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__addsf3x>
    318e:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__fp_round>
    3192:	0e 94 10 1a 	call	0x3420	; 0x3420 <__fp_pscA>
    3196:	38 f0       	brcs	.+14     	; 0x31a6 <__addsf3+0x20>
    3198:	0e 94 17 1a 	call	0x342e	; 0x342e <__fp_pscB>
    319c:	20 f0       	brcs	.+8      	; 0x31a6 <__addsf3+0x20>
    319e:	39 f4       	brne	.+14     	; 0x31ae <__addsf3+0x28>
    31a0:	9f 3f       	cpi	r25, 0xFF	; 255
    31a2:	19 f4       	brne	.+6      	; 0x31aa <__addsf3+0x24>
    31a4:	26 f4       	brtc	.+8      	; 0x31ae <__addsf3+0x28>
    31a6:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__fp_nan>
    31aa:	0e f4       	brtc	.+2      	; 0x31ae <__addsf3+0x28>
    31ac:	e0 95       	com	r30
    31ae:	e7 fb       	bst	r30, 7
    31b0:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__fp_inf>

000031b4 <__addsf3x>:
    31b4:	e9 2f       	mov	r30, r25
    31b6:	0e 94 2f 1a 	call	0x345e	; 0x345e <__fp_split3>
    31ba:	58 f3       	brcs	.-42     	; 0x3192 <__addsf3+0xc>
    31bc:	ba 17       	cp	r27, r26
    31be:	62 07       	cpc	r22, r18
    31c0:	73 07       	cpc	r23, r19
    31c2:	84 07       	cpc	r24, r20
    31c4:	95 07       	cpc	r25, r21
    31c6:	20 f0       	brcs	.+8      	; 0x31d0 <__addsf3x+0x1c>
    31c8:	79 f4       	brne	.+30     	; 0x31e8 <__addsf3x+0x34>
    31ca:	a6 f5       	brtc	.+104    	; 0x3234 <__addsf3x+0x80>
    31cc:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__fp_zero>
    31d0:	0e f4       	brtc	.+2      	; 0x31d4 <__addsf3x+0x20>
    31d2:	e0 95       	com	r30
    31d4:	0b 2e       	mov	r0, r27
    31d6:	ba 2f       	mov	r27, r26
    31d8:	a0 2d       	mov	r26, r0
    31da:	0b 01       	movw	r0, r22
    31dc:	b9 01       	movw	r22, r18
    31de:	90 01       	movw	r18, r0
    31e0:	0c 01       	movw	r0, r24
    31e2:	ca 01       	movw	r24, r20
    31e4:	a0 01       	movw	r20, r0
    31e6:	11 24       	eor	r1, r1
    31e8:	ff 27       	eor	r31, r31
    31ea:	59 1b       	sub	r21, r25
    31ec:	99 f0       	breq	.+38     	; 0x3214 <__addsf3x+0x60>
    31ee:	59 3f       	cpi	r21, 0xF9	; 249
    31f0:	50 f4       	brcc	.+20     	; 0x3206 <__addsf3x+0x52>
    31f2:	50 3e       	cpi	r21, 0xE0	; 224
    31f4:	68 f1       	brcs	.+90     	; 0x3250 <__addsf3x+0x9c>
    31f6:	1a 16       	cp	r1, r26
    31f8:	f0 40       	sbci	r31, 0x00	; 0
    31fa:	a2 2f       	mov	r26, r18
    31fc:	23 2f       	mov	r18, r19
    31fe:	34 2f       	mov	r19, r20
    3200:	44 27       	eor	r20, r20
    3202:	58 5f       	subi	r21, 0xF8	; 248
    3204:	f3 cf       	rjmp	.-26     	; 0x31ec <__addsf3x+0x38>
    3206:	46 95       	lsr	r20
    3208:	37 95       	ror	r19
    320a:	27 95       	ror	r18
    320c:	a7 95       	ror	r26
    320e:	f0 40       	sbci	r31, 0x00	; 0
    3210:	53 95       	inc	r21
    3212:	c9 f7       	brne	.-14     	; 0x3206 <__addsf3x+0x52>
    3214:	7e f4       	brtc	.+30     	; 0x3234 <__addsf3x+0x80>
    3216:	1f 16       	cp	r1, r31
    3218:	ba 0b       	sbc	r27, r26
    321a:	62 0b       	sbc	r22, r18
    321c:	73 0b       	sbc	r23, r19
    321e:	84 0b       	sbc	r24, r20
    3220:	ba f0       	brmi	.+46     	; 0x3250 <__addsf3x+0x9c>
    3222:	91 50       	subi	r25, 0x01	; 1
    3224:	a1 f0       	breq	.+40     	; 0x324e <__addsf3x+0x9a>
    3226:	ff 0f       	add	r31, r31
    3228:	bb 1f       	adc	r27, r27
    322a:	66 1f       	adc	r22, r22
    322c:	77 1f       	adc	r23, r23
    322e:	88 1f       	adc	r24, r24
    3230:	c2 f7       	brpl	.-16     	; 0x3222 <__addsf3x+0x6e>
    3232:	0e c0       	rjmp	.+28     	; 0x3250 <__addsf3x+0x9c>
    3234:	ba 0f       	add	r27, r26
    3236:	62 1f       	adc	r22, r18
    3238:	73 1f       	adc	r23, r19
    323a:	84 1f       	adc	r24, r20
    323c:	48 f4       	brcc	.+18     	; 0x3250 <__addsf3x+0x9c>
    323e:	87 95       	ror	r24
    3240:	77 95       	ror	r23
    3242:	67 95       	ror	r22
    3244:	b7 95       	ror	r27
    3246:	f7 95       	ror	r31
    3248:	9e 3f       	cpi	r25, 0xFE	; 254
    324a:	08 f0       	brcs	.+2      	; 0x324e <__addsf3x+0x9a>
    324c:	b0 cf       	rjmp	.-160    	; 0x31ae <__addsf3+0x28>
    324e:	93 95       	inc	r25
    3250:	88 0f       	add	r24, r24
    3252:	08 f0       	brcs	.+2      	; 0x3256 <__addsf3x+0xa2>
    3254:	99 27       	eor	r25, r25
    3256:	ee 0f       	add	r30, r30
    3258:	97 95       	ror	r25
    325a:	87 95       	ror	r24
    325c:	08 95       	ret

0000325e <__cmpsf2>:
    325e:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <__fp_cmp>
    3262:	08 f4       	brcc	.+2      	; 0x3266 <__cmpsf2+0x8>
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	08 95       	ret

00003268 <__divsf3>:
    3268:	0e 94 48 19 	call	0x3290	; 0x3290 <__divsf3x>
    326c:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__fp_round>
    3270:	0e 94 17 1a 	call	0x342e	; 0x342e <__fp_pscB>
    3274:	58 f0       	brcs	.+22     	; 0x328c <__divsf3+0x24>
    3276:	0e 94 10 1a 	call	0x3420	; 0x3420 <__fp_pscA>
    327a:	40 f0       	brcs	.+16     	; 0x328c <__divsf3+0x24>
    327c:	29 f4       	brne	.+10     	; 0x3288 <__divsf3+0x20>
    327e:	5f 3f       	cpi	r21, 0xFF	; 255
    3280:	29 f0       	breq	.+10     	; 0x328c <__divsf3+0x24>
    3282:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__fp_inf>
    3286:	51 11       	cpse	r21, r1
    3288:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__fp_szero>
    328c:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__fp_nan>

00003290 <__divsf3x>:
    3290:	0e 94 2f 1a 	call	0x345e	; 0x345e <__fp_split3>
    3294:	68 f3       	brcs	.-38     	; 0x3270 <__divsf3+0x8>

00003296 <__divsf3_pse>:
    3296:	99 23       	and	r25, r25
    3298:	b1 f3       	breq	.-20     	; 0x3286 <__divsf3+0x1e>
    329a:	55 23       	and	r21, r21
    329c:	91 f3       	breq	.-28     	; 0x3282 <__divsf3+0x1a>
    329e:	95 1b       	sub	r25, r21
    32a0:	55 0b       	sbc	r21, r21
    32a2:	bb 27       	eor	r27, r27
    32a4:	aa 27       	eor	r26, r26
    32a6:	62 17       	cp	r22, r18
    32a8:	73 07       	cpc	r23, r19
    32aa:	84 07       	cpc	r24, r20
    32ac:	38 f0       	brcs	.+14     	; 0x32bc <__divsf3_pse+0x26>
    32ae:	9f 5f       	subi	r25, 0xFF	; 255
    32b0:	5f 4f       	sbci	r21, 0xFF	; 255
    32b2:	22 0f       	add	r18, r18
    32b4:	33 1f       	adc	r19, r19
    32b6:	44 1f       	adc	r20, r20
    32b8:	aa 1f       	adc	r26, r26
    32ba:	a9 f3       	breq	.-22     	; 0x32a6 <__divsf3_pse+0x10>
    32bc:	35 d0       	rcall	.+106    	; 0x3328 <__divsf3_pse+0x92>
    32be:	0e 2e       	mov	r0, r30
    32c0:	3a f0       	brmi	.+14     	; 0x32d0 <__divsf3_pse+0x3a>
    32c2:	e0 e8       	ldi	r30, 0x80	; 128
    32c4:	32 d0       	rcall	.+100    	; 0x332a <__divsf3_pse+0x94>
    32c6:	91 50       	subi	r25, 0x01	; 1
    32c8:	50 40       	sbci	r21, 0x00	; 0
    32ca:	e6 95       	lsr	r30
    32cc:	00 1c       	adc	r0, r0
    32ce:	ca f7       	brpl	.-14     	; 0x32c2 <__divsf3_pse+0x2c>
    32d0:	2b d0       	rcall	.+86     	; 0x3328 <__divsf3_pse+0x92>
    32d2:	fe 2f       	mov	r31, r30
    32d4:	29 d0       	rcall	.+82     	; 0x3328 <__divsf3_pse+0x92>
    32d6:	66 0f       	add	r22, r22
    32d8:	77 1f       	adc	r23, r23
    32da:	88 1f       	adc	r24, r24
    32dc:	bb 1f       	adc	r27, r27
    32de:	26 17       	cp	r18, r22
    32e0:	37 07       	cpc	r19, r23
    32e2:	48 07       	cpc	r20, r24
    32e4:	ab 07       	cpc	r26, r27
    32e6:	b0 e8       	ldi	r27, 0x80	; 128
    32e8:	09 f0       	breq	.+2      	; 0x32ec <__divsf3_pse+0x56>
    32ea:	bb 0b       	sbc	r27, r27
    32ec:	80 2d       	mov	r24, r0
    32ee:	bf 01       	movw	r22, r30
    32f0:	ff 27       	eor	r31, r31
    32f2:	93 58       	subi	r25, 0x83	; 131
    32f4:	5f 4f       	sbci	r21, 0xFF	; 255
    32f6:	3a f0       	brmi	.+14     	; 0x3306 <__divsf3_pse+0x70>
    32f8:	9e 3f       	cpi	r25, 0xFE	; 254
    32fa:	51 05       	cpc	r21, r1
    32fc:	78 f0       	brcs	.+30     	; 0x331c <__divsf3_pse+0x86>
    32fe:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__fp_inf>
    3302:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__fp_szero>
    3306:	5f 3f       	cpi	r21, 0xFF	; 255
    3308:	e4 f3       	brlt	.-8      	; 0x3302 <__divsf3_pse+0x6c>
    330a:	98 3e       	cpi	r25, 0xE8	; 232
    330c:	d4 f3       	brlt	.-12     	; 0x3302 <__divsf3_pse+0x6c>
    330e:	86 95       	lsr	r24
    3310:	77 95       	ror	r23
    3312:	67 95       	ror	r22
    3314:	b7 95       	ror	r27
    3316:	f7 95       	ror	r31
    3318:	9f 5f       	subi	r25, 0xFF	; 255
    331a:	c9 f7       	brne	.-14     	; 0x330e <__divsf3_pse+0x78>
    331c:	88 0f       	add	r24, r24
    331e:	91 1d       	adc	r25, r1
    3320:	96 95       	lsr	r25
    3322:	87 95       	ror	r24
    3324:	97 f9       	bld	r25, 7
    3326:	08 95       	ret
    3328:	e1 e0       	ldi	r30, 0x01	; 1
    332a:	66 0f       	add	r22, r22
    332c:	77 1f       	adc	r23, r23
    332e:	88 1f       	adc	r24, r24
    3330:	bb 1f       	adc	r27, r27
    3332:	62 17       	cp	r22, r18
    3334:	73 07       	cpc	r23, r19
    3336:	84 07       	cpc	r24, r20
    3338:	ba 07       	cpc	r27, r26
    333a:	20 f0       	brcs	.+8      	; 0x3344 <__divsf3_pse+0xae>
    333c:	62 1b       	sub	r22, r18
    333e:	73 0b       	sbc	r23, r19
    3340:	84 0b       	sbc	r24, r20
    3342:	ba 0b       	sbc	r27, r26
    3344:	ee 1f       	adc	r30, r30
    3346:	88 f7       	brcc	.-30     	; 0x332a <__divsf3_pse+0x94>
    3348:	e0 95       	com	r30
    334a:	08 95       	ret

0000334c <__floatunsisf>:
    334c:	e8 94       	clt
    334e:	09 c0       	rjmp	.+18     	; 0x3362 <__floatsisf+0x12>

00003350 <__floatsisf>:
    3350:	97 fb       	bst	r25, 7
    3352:	3e f4       	brtc	.+14     	; 0x3362 <__floatsisf+0x12>
    3354:	90 95       	com	r25
    3356:	80 95       	com	r24
    3358:	70 95       	com	r23
    335a:	61 95       	neg	r22
    335c:	7f 4f       	sbci	r23, 0xFF	; 255
    335e:	8f 4f       	sbci	r24, 0xFF	; 255
    3360:	9f 4f       	sbci	r25, 0xFF	; 255
    3362:	99 23       	and	r25, r25
    3364:	a9 f0       	breq	.+42     	; 0x3390 <__floatsisf+0x40>
    3366:	f9 2f       	mov	r31, r25
    3368:	96 e9       	ldi	r25, 0x96	; 150
    336a:	bb 27       	eor	r27, r27
    336c:	93 95       	inc	r25
    336e:	f6 95       	lsr	r31
    3370:	87 95       	ror	r24
    3372:	77 95       	ror	r23
    3374:	67 95       	ror	r22
    3376:	b7 95       	ror	r27
    3378:	f1 11       	cpse	r31, r1
    337a:	f8 cf       	rjmp	.-16     	; 0x336c <__floatsisf+0x1c>
    337c:	fa f4       	brpl	.+62     	; 0x33bc <__floatsisf+0x6c>
    337e:	bb 0f       	add	r27, r27
    3380:	11 f4       	brne	.+4      	; 0x3386 <__floatsisf+0x36>
    3382:	60 ff       	sbrs	r22, 0
    3384:	1b c0       	rjmp	.+54     	; 0x33bc <__floatsisf+0x6c>
    3386:	6f 5f       	subi	r22, 0xFF	; 255
    3388:	7f 4f       	sbci	r23, 0xFF	; 255
    338a:	8f 4f       	sbci	r24, 0xFF	; 255
    338c:	9f 4f       	sbci	r25, 0xFF	; 255
    338e:	16 c0       	rjmp	.+44     	; 0x33bc <__floatsisf+0x6c>
    3390:	88 23       	and	r24, r24
    3392:	11 f0       	breq	.+4      	; 0x3398 <__floatsisf+0x48>
    3394:	96 e9       	ldi	r25, 0x96	; 150
    3396:	11 c0       	rjmp	.+34     	; 0x33ba <__floatsisf+0x6a>
    3398:	77 23       	and	r23, r23
    339a:	21 f0       	breq	.+8      	; 0x33a4 <__floatsisf+0x54>
    339c:	9e e8       	ldi	r25, 0x8E	; 142
    339e:	87 2f       	mov	r24, r23
    33a0:	76 2f       	mov	r23, r22
    33a2:	05 c0       	rjmp	.+10     	; 0x33ae <__floatsisf+0x5e>
    33a4:	66 23       	and	r22, r22
    33a6:	71 f0       	breq	.+28     	; 0x33c4 <__floatsisf+0x74>
    33a8:	96 e8       	ldi	r25, 0x86	; 134
    33aa:	86 2f       	mov	r24, r22
    33ac:	70 e0       	ldi	r23, 0x00	; 0
    33ae:	60 e0       	ldi	r22, 0x00	; 0
    33b0:	2a f0       	brmi	.+10     	; 0x33bc <__floatsisf+0x6c>
    33b2:	9a 95       	dec	r25
    33b4:	66 0f       	add	r22, r22
    33b6:	77 1f       	adc	r23, r23
    33b8:	88 1f       	adc	r24, r24
    33ba:	da f7       	brpl	.-10     	; 0x33b2 <__floatsisf+0x62>
    33bc:	88 0f       	add	r24, r24
    33be:	96 95       	lsr	r25
    33c0:	87 95       	ror	r24
    33c2:	97 f9       	bld	r25, 7
    33c4:	08 95       	ret

000033c6 <__fp_cmp>:
    33c6:	99 0f       	add	r25, r25
    33c8:	00 08       	sbc	r0, r0
    33ca:	55 0f       	add	r21, r21
    33cc:	aa 0b       	sbc	r26, r26
    33ce:	e0 e8       	ldi	r30, 0x80	; 128
    33d0:	fe ef       	ldi	r31, 0xFE	; 254
    33d2:	16 16       	cp	r1, r22
    33d4:	17 06       	cpc	r1, r23
    33d6:	e8 07       	cpc	r30, r24
    33d8:	f9 07       	cpc	r31, r25
    33da:	c0 f0       	brcs	.+48     	; 0x340c <__fp_cmp+0x46>
    33dc:	12 16       	cp	r1, r18
    33de:	13 06       	cpc	r1, r19
    33e0:	e4 07       	cpc	r30, r20
    33e2:	f5 07       	cpc	r31, r21
    33e4:	98 f0       	brcs	.+38     	; 0x340c <__fp_cmp+0x46>
    33e6:	62 1b       	sub	r22, r18
    33e8:	73 0b       	sbc	r23, r19
    33ea:	84 0b       	sbc	r24, r20
    33ec:	95 0b       	sbc	r25, r21
    33ee:	39 f4       	brne	.+14     	; 0x33fe <__fp_cmp+0x38>
    33f0:	0a 26       	eor	r0, r26
    33f2:	61 f0       	breq	.+24     	; 0x340c <__fp_cmp+0x46>
    33f4:	23 2b       	or	r18, r19
    33f6:	24 2b       	or	r18, r20
    33f8:	25 2b       	or	r18, r21
    33fa:	21 f4       	brne	.+8      	; 0x3404 <__fp_cmp+0x3e>
    33fc:	08 95       	ret
    33fe:	0a 26       	eor	r0, r26
    3400:	09 f4       	brne	.+2      	; 0x3404 <__fp_cmp+0x3e>
    3402:	a1 40       	sbci	r26, 0x01	; 1
    3404:	a6 95       	lsr	r26
    3406:	8f ef       	ldi	r24, 0xFF	; 255
    3408:	81 1d       	adc	r24, r1
    340a:	81 1d       	adc	r24, r1
    340c:	08 95       	ret

0000340e <__fp_inf>:
    340e:	97 f9       	bld	r25, 7
    3410:	9f 67       	ori	r25, 0x7F	; 127
    3412:	80 e8       	ldi	r24, 0x80	; 128
    3414:	70 e0       	ldi	r23, 0x00	; 0
    3416:	60 e0       	ldi	r22, 0x00	; 0
    3418:	08 95       	ret

0000341a <__fp_nan>:
    341a:	9f ef       	ldi	r25, 0xFF	; 255
    341c:	80 ec       	ldi	r24, 0xC0	; 192
    341e:	08 95       	ret

00003420 <__fp_pscA>:
    3420:	00 24       	eor	r0, r0
    3422:	0a 94       	dec	r0
    3424:	16 16       	cp	r1, r22
    3426:	17 06       	cpc	r1, r23
    3428:	18 06       	cpc	r1, r24
    342a:	09 06       	cpc	r0, r25
    342c:	08 95       	ret

0000342e <__fp_pscB>:
    342e:	00 24       	eor	r0, r0
    3430:	0a 94       	dec	r0
    3432:	12 16       	cp	r1, r18
    3434:	13 06       	cpc	r1, r19
    3436:	14 06       	cpc	r1, r20
    3438:	05 06       	cpc	r0, r21
    343a:	08 95       	ret

0000343c <__fp_round>:
    343c:	09 2e       	mov	r0, r25
    343e:	03 94       	inc	r0
    3440:	00 0c       	add	r0, r0
    3442:	11 f4       	brne	.+4      	; 0x3448 <__fp_round+0xc>
    3444:	88 23       	and	r24, r24
    3446:	52 f0       	brmi	.+20     	; 0x345c <__fp_round+0x20>
    3448:	bb 0f       	add	r27, r27
    344a:	40 f4       	brcc	.+16     	; 0x345c <__fp_round+0x20>
    344c:	bf 2b       	or	r27, r31
    344e:	11 f4       	brne	.+4      	; 0x3454 <__fp_round+0x18>
    3450:	60 ff       	sbrs	r22, 0
    3452:	04 c0       	rjmp	.+8      	; 0x345c <__fp_round+0x20>
    3454:	6f 5f       	subi	r22, 0xFF	; 255
    3456:	7f 4f       	sbci	r23, 0xFF	; 255
    3458:	8f 4f       	sbci	r24, 0xFF	; 255
    345a:	9f 4f       	sbci	r25, 0xFF	; 255
    345c:	08 95       	ret

0000345e <__fp_split3>:
    345e:	57 fd       	sbrc	r21, 7
    3460:	90 58       	subi	r25, 0x80	; 128
    3462:	44 0f       	add	r20, r20
    3464:	55 1f       	adc	r21, r21
    3466:	59 f0       	breq	.+22     	; 0x347e <__fp_splitA+0x10>
    3468:	5f 3f       	cpi	r21, 0xFF	; 255
    346a:	71 f0       	breq	.+28     	; 0x3488 <__fp_splitA+0x1a>
    346c:	47 95       	ror	r20

0000346e <__fp_splitA>:
    346e:	88 0f       	add	r24, r24
    3470:	97 fb       	bst	r25, 7
    3472:	99 1f       	adc	r25, r25
    3474:	61 f0       	breq	.+24     	; 0x348e <__fp_splitA+0x20>
    3476:	9f 3f       	cpi	r25, 0xFF	; 255
    3478:	79 f0       	breq	.+30     	; 0x3498 <__fp_splitA+0x2a>
    347a:	87 95       	ror	r24
    347c:	08 95       	ret
    347e:	12 16       	cp	r1, r18
    3480:	13 06       	cpc	r1, r19
    3482:	14 06       	cpc	r1, r20
    3484:	55 1f       	adc	r21, r21
    3486:	f2 cf       	rjmp	.-28     	; 0x346c <__fp_split3+0xe>
    3488:	46 95       	lsr	r20
    348a:	f1 df       	rcall	.-30     	; 0x346e <__fp_splitA>
    348c:	08 c0       	rjmp	.+16     	; 0x349e <__fp_splitA+0x30>
    348e:	16 16       	cp	r1, r22
    3490:	17 06       	cpc	r1, r23
    3492:	18 06       	cpc	r1, r24
    3494:	99 1f       	adc	r25, r25
    3496:	f1 cf       	rjmp	.-30     	; 0x347a <__fp_splitA+0xc>
    3498:	86 95       	lsr	r24
    349a:	71 05       	cpc	r23, r1
    349c:	61 05       	cpc	r22, r1
    349e:	08 94       	sec
    34a0:	08 95       	ret

000034a2 <__fp_zero>:
    34a2:	e8 94       	clt

000034a4 <__fp_szero>:
    34a4:	bb 27       	eor	r27, r27
    34a6:	66 27       	eor	r22, r22
    34a8:	77 27       	eor	r23, r23
    34aa:	cb 01       	movw	r24, r22
    34ac:	97 f9       	bld	r25, 7
    34ae:	08 95       	ret

000034b0 <__gesf2>:
    34b0:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <__fp_cmp>
    34b4:	08 f4       	brcc	.+2      	; 0x34b8 <__gesf2+0x8>
    34b6:	8f ef       	ldi	r24, 0xFF	; 255
    34b8:	08 95       	ret

000034ba <__mulsf3>:
    34ba:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <__mulsf3x>
    34be:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__fp_round>
    34c2:	0e 94 10 1a 	call	0x3420	; 0x3420 <__fp_pscA>
    34c6:	38 f0       	brcs	.+14     	; 0x34d6 <__mulsf3+0x1c>
    34c8:	0e 94 17 1a 	call	0x342e	; 0x342e <__fp_pscB>
    34cc:	20 f0       	brcs	.+8      	; 0x34d6 <__mulsf3+0x1c>
    34ce:	95 23       	and	r25, r21
    34d0:	11 f0       	breq	.+4      	; 0x34d6 <__mulsf3+0x1c>
    34d2:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__fp_inf>
    34d6:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <__fp_nan>
    34da:	11 24       	eor	r1, r1
    34dc:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__fp_szero>

000034e0 <__mulsf3x>:
    34e0:	0e 94 2f 1a 	call	0x345e	; 0x345e <__fp_split3>
    34e4:	70 f3       	brcs	.-36     	; 0x34c2 <__mulsf3+0x8>

000034e6 <__mulsf3_pse>:
    34e6:	95 9f       	mul	r25, r21
    34e8:	c1 f3       	breq	.-16     	; 0x34da <__mulsf3+0x20>
    34ea:	95 0f       	add	r25, r21
    34ec:	50 e0       	ldi	r21, 0x00	; 0
    34ee:	55 1f       	adc	r21, r21
    34f0:	62 9f       	mul	r22, r18
    34f2:	f0 01       	movw	r30, r0
    34f4:	72 9f       	mul	r23, r18
    34f6:	bb 27       	eor	r27, r27
    34f8:	f0 0d       	add	r31, r0
    34fa:	b1 1d       	adc	r27, r1
    34fc:	63 9f       	mul	r22, r19
    34fe:	aa 27       	eor	r26, r26
    3500:	f0 0d       	add	r31, r0
    3502:	b1 1d       	adc	r27, r1
    3504:	aa 1f       	adc	r26, r26
    3506:	64 9f       	mul	r22, r20
    3508:	66 27       	eor	r22, r22
    350a:	b0 0d       	add	r27, r0
    350c:	a1 1d       	adc	r26, r1
    350e:	66 1f       	adc	r22, r22
    3510:	82 9f       	mul	r24, r18
    3512:	22 27       	eor	r18, r18
    3514:	b0 0d       	add	r27, r0
    3516:	a1 1d       	adc	r26, r1
    3518:	62 1f       	adc	r22, r18
    351a:	73 9f       	mul	r23, r19
    351c:	b0 0d       	add	r27, r0
    351e:	a1 1d       	adc	r26, r1
    3520:	62 1f       	adc	r22, r18
    3522:	83 9f       	mul	r24, r19
    3524:	a0 0d       	add	r26, r0
    3526:	61 1d       	adc	r22, r1
    3528:	22 1f       	adc	r18, r18
    352a:	74 9f       	mul	r23, r20
    352c:	33 27       	eor	r19, r19
    352e:	a0 0d       	add	r26, r0
    3530:	61 1d       	adc	r22, r1
    3532:	23 1f       	adc	r18, r19
    3534:	84 9f       	mul	r24, r20
    3536:	60 0d       	add	r22, r0
    3538:	21 1d       	adc	r18, r1
    353a:	82 2f       	mov	r24, r18
    353c:	76 2f       	mov	r23, r22
    353e:	6a 2f       	mov	r22, r26
    3540:	11 24       	eor	r1, r1
    3542:	9f 57       	subi	r25, 0x7F	; 127
    3544:	50 40       	sbci	r21, 0x00	; 0
    3546:	9a f0       	brmi	.+38     	; 0x356e <__mulsf3_pse+0x88>
    3548:	f1 f0       	breq	.+60     	; 0x3586 <__mulsf3_pse+0xa0>
    354a:	88 23       	and	r24, r24
    354c:	4a f0       	brmi	.+18     	; 0x3560 <__mulsf3_pse+0x7a>
    354e:	ee 0f       	add	r30, r30
    3550:	ff 1f       	adc	r31, r31
    3552:	bb 1f       	adc	r27, r27
    3554:	66 1f       	adc	r22, r22
    3556:	77 1f       	adc	r23, r23
    3558:	88 1f       	adc	r24, r24
    355a:	91 50       	subi	r25, 0x01	; 1
    355c:	50 40       	sbci	r21, 0x00	; 0
    355e:	a9 f7       	brne	.-22     	; 0x354a <__mulsf3_pse+0x64>
    3560:	9e 3f       	cpi	r25, 0xFE	; 254
    3562:	51 05       	cpc	r21, r1
    3564:	80 f0       	brcs	.+32     	; 0x3586 <__mulsf3_pse+0xa0>
    3566:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__fp_inf>
    356a:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__fp_szero>
    356e:	5f 3f       	cpi	r21, 0xFF	; 255
    3570:	e4 f3       	brlt	.-8      	; 0x356a <__mulsf3_pse+0x84>
    3572:	98 3e       	cpi	r25, 0xE8	; 232
    3574:	d4 f3       	brlt	.-12     	; 0x356a <__mulsf3_pse+0x84>
    3576:	86 95       	lsr	r24
    3578:	77 95       	ror	r23
    357a:	67 95       	ror	r22
    357c:	b7 95       	ror	r27
    357e:	f7 95       	ror	r31
    3580:	e7 95       	ror	r30
    3582:	9f 5f       	subi	r25, 0xFF	; 255
    3584:	c1 f7       	brne	.-16     	; 0x3576 <__mulsf3_pse+0x90>
    3586:	fe 2b       	or	r31, r30
    3588:	88 0f       	add	r24, r24
    358a:	91 1d       	adc	r25, r1
    358c:	96 95       	lsr	r25
    358e:	87 95       	ror	r24
    3590:	97 f9       	bld	r25, 7
    3592:	08 95       	ret

00003594 <vfprintf>:
    3594:	a0 e1       	ldi	r26, 0x10	; 16
    3596:	b0 e0       	ldi	r27, 0x00	; 0
    3598:	e0 ed       	ldi	r30, 0xD0	; 208
    359a:	fa e1       	ldi	r31, 0x1A	; 26
    359c:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__prologue_saves__>
    35a0:	7c 01       	movw	r14, r24
    35a2:	1b 01       	movw	r2, r22
    35a4:	6a 01       	movw	r12, r20
    35a6:	fc 01       	movw	r30, r24
    35a8:	16 82       	std	Z+6, r1	; 0x06
    35aa:	17 82       	std	Z+7, r1	; 0x07
    35ac:	83 81       	ldd	r24, Z+3	; 0x03
    35ae:	81 ff       	sbrs	r24, 1
    35b0:	44 c3       	rjmp	.+1672   	; 0x3c3a <vfprintf+0x6a6>
    35b2:	9e 01       	movw	r18, r28
    35b4:	2f 5f       	subi	r18, 0xFF	; 255
    35b6:	3f 4f       	sbci	r19, 0xFF	; 255
    35b8:	39 01       	movw	r6, r18
    35ba:	f7 01       	movw	r30, r14
    35bc:	93 81       	ldd	r25, Z+3	; 0x03
    35be:	f1 01       	movw	r30, r2
    35c0:	93 fd       	sbrc	r25, 3
    35c2:	85 91       	lpm	r24, Z+
    35c4:	93 ff       	sbrs	r25, 3
    35c6:	81 91       	ld	r24, Z+
    35c8:	1f 01       	movw	r2, r30
    35ca:	88 23       	and	r24, r24
    35cc:	09 f4       	brne	.+2      	; 0x35d0 <vfprintf+0x3c>
    35ce:	31 c3       	rjmp	.+1634   	; 0x3c32 <vfprintf+0x69e>
    35d0:	85 32       	cpi	r24, 0x25	; 37
    35d2:	39 f4       	brne	.+14     	; 0x35e2 <vfprintf+0x4e>
    35d4:	93 fd       	sbrc	r25, 3
    35d6:	85 91       	lpm	r24, Z+
    35d8:	93 ff       	sbrs	r25, 3
    35da:	81 91       	ld	r24, Z+
    35dc:	1f 01       	movw	r2, r30
    35de:	85 32       	cpi	r24, 0x25	; 37
    35e0:	39 f4       	brne	.+14     	; 0x35f0 <vfprintf+0x5c>
    35e2:	b7 01       	movw	r22, r14
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    35ea:	56 01       	movw	r10, r12
    35ec:	65 01       	movw	r12, r10
    35ee:	e5 cf       	rjmp	.-54     	; 0x35ba <vfprintf+0x26>
    35f0:	10 e0       	ldi	r17, 0x00	; 0
    35f2:	51 2c       	mov	r5, r1
    35f4:	91 2c       	mov	r9, r1
    35f6:	ff e1       	ldi	r31, 0x1F	; 31
    35f8:	f9 15       	cp	r31, r9
    35fa:	d8 f0       	brcs	.+54     	; 0x3632 <vfprintf+0x9e>
    35fc:	8b 32       	cpi	r24, 0x2B	; 43
    35fe:	79 f0       	breq	.+30     	; 0x361e <vfprintf+0x8a>
    3600:	38 f4       	brcc	.+14     	; 0x3610 <vfprintf+0x7c>
    3602:	80 32       	cpi	r24, 0x20	; 32
    3604:	79 f0       	breq	.+30     	; 0x3624 <vfprintf+0x90>
    3606:	83 32       	cpi	r24, 0x23	; 35
    3608:	a1 f4       	brne	.+40     	; 0x3632 <vfprintf+0x9e>
    360a:	f9 2d       	mov	r31, r9
    360c:	f0 61       	ori	r31, 0x10	; 16
    360e:	2e c0       	rjmp	.+92     	; 0x366c <vfprintf+0xd8>
    3610:	8d 32       	cpi	r24, 0x2D	; 45
    3612:	61 f0       	breq	.+24     	; 0x362c <vfprintf+0x98>
    3614:	80 33       	cpi	r24, 0x30	; 48
    3616:	69 f4       	brne	.+26     	; 0x3632 <vfprintf+0x9e>
    3618:	29 2d       	mov	r18, r9
    361a:	21 60       	ori	r18, 0x01	; 1
    361c:	2d c0       	rjmp	.+90     	; 0x3678 <vfprintf+0xe4>
    361e:	39 2d       	mov	r19, r9
    3620:	32 60       	ori	r19, 0x02	; 2
    3622:	93 2e       	mov	r9, r19
    3624:	89 2d       	mov	r24, r9
    3626:	84 60       	ori	r24, 0x04	; 4
    3628:	98 2e       	mov	r9, r24
    362a:	2a c0       	rjmp	.+84     	; 0x3680 <vfprintf+0xec>
    362c:	e9 2d       	mov	r30, r9
    362e:	e8 60       	ori	r30, 0x08	; 8
    3630:	15 c0       	rjmp	.+42     	; 0x365c <vfprintf+0xc8>
    3632:	97 fc       	sbrc	r9, 7
    3634:	2d c0       	rjmp	.+90     	; 0x3690 <vfprintf+0xfc>
    3636:	20 ed       	ldi	r18, 0xD0	; 208
    3638:	28 0f       	add	r18, r24
    363a:	2a 30       	cpi	r18, 0x0A	; 10
    363c:	88 f4       	brcc	.+34     	; 0x3660 <vfprintf+0xcc>
    363e:	96 fe       	sbrs	r9, 6
    3640:	06 c0       	rjmp	.+12     	; 0x364e <vfprintf+0xba>
    3642:	3a e0       	ldi	r19, 0x0A	; 10
    3644:	13 9f       	mul	r17, r19
    3646:	20 0d       	add	r18, r0
    3648:	11 24       	eor	r1, r1
    364a:	12 2f       	mov	r17, r18
    364c:	19 c0       	rjmp	.+50     	; 0x3680 <vfprintf+0xec>
    364e:	8a e0       	ldi	r24, 0x0A	; 10
    3650:	58 9e       	mul	r5, r24
    3652:	20 0d       	add	r18, r0
    3654:	11 24       	eor	r1, r1
    3656:	52 2e       	mov	r5, r18
    3658:	e9 2d       	mov	r30, r9
    365a:	e0 62       	ori	r30, 0x20	; 32
    365c:	9e 2e       	mov	r9, r30
    365e:	10 c0       	rjmp	.+32     	; 0x3680 <vfprintf+0xec>
    3660:	8e 32       	cpi	r24, 0x2E	; 46
    3662:	31 f4       	brne	.+12     	; 0x3670 <vfprintf+0xdc>
    3664:	96 fc       	sbrc	r9, 6
    3666:	e5 c2       	rjmp	.+1482   	; 0x3c32 <vfprintf+0x69e>
    3668:	f9 2d       	mov	r31, r9
    366a:	f0 64       	ori	r31, 0x40	; 64
    366c:	9f 2e       	mov	r9, r31
    366e:	08 c0       	rjmp	.+16     	; 0x3680 <vfprintf+0xec>
    3670:	8c 36       	cpi	r24, 0x6C	; 108
    3672:	21 f4       	brne	.+8      	; 0x367c <vfprintf+0xe8>
    3674:	29 2d       	mov	r18, r9
    3676:	20 68       	ori	r18, 0x80	; 128
    3678:	92 2e       	mov	r9, r18
    367a:	02 c0       	rjmp	.+4      	; 0x3680 <vfprintf+0xec>
    367c:	88 36       	cpi	r24, 0x68	; 104
    367e:	41 f4       	brne	.+16     	; 0x3690 <vfprintf+0xfc>
    3680:	f1 01       	movw	r30, r2
    3682:	93 fd       	sbrc	r25, 3
    3684:	85 91       	lpm	r24, Z+
    3686:	93 ff       	sbrs	r25, 3
    3688:	81 91       	ld	r24, Z+
    368a:	1f 01       	movw	r2, r30
    368c:	81 11       	cpse	r24, r1
    368e:	b3 cf       	rjmp	.-154    	; 0x35f6 <vfprintf+0x62>
    3690:	9b eb       	ldi	r25, 0xBB	; 187
    3692:	98 0f       	add	r25, r24
    3694:	93 30       	cpi	r25, 0x03	; 3
    3696:	20 f4       	brcc	.+8      	; 0x36a0 <vfprintf+0x10c>
    3698:	99 2d       	mov	r25, r9
    369a:	90 61       	ori	r25, 0x10	; 16
    369c:	80 5e       	subi	r24, 0xE0	; 224
    369e:	07 c0       	rjmp	.+14     	; 0x36ae <vfprintf+0x11a>
    36a0:	9b e9       	ldi	r25, 0x9B	; 155
    36a2:	98 0f       	add	r25, r24
    36a4:	93 30       	cpi	r25, 0x03	; 3
    36a6:	08 f0       	brcs	.+2      	; 0x36aa <vfprintf+0x116>
    36a8:	66 c1       	rjmp	.+716    	; 0x3976 <vfprintf+0x3e2>
    36aa:	99 2d       	mov	r25, r9
    36ac:	9f 7e       	andi	r25, 0xEF	; 239
    36ae:	96 ff       	sbrs	r25, 6
    36b0:	16 e0       	ldi	r17, 0x06	; 6
    36b2:	9f 73       	andi	r25, 0x3F	; 63
    36b4:	99 2e       	mov	r9, r25
    36b6:	85 36       	cpi	r24, 0x65	; 101
    36b8:	19 f4       	brne	.+6      	; 0x36c0 <vfprintf+0x12c>
    36ba:	90 64       	ori	r25, 0x40	; 64
    36bc:	99 2e       	mov	r9, r25
    36be:	08 c0       	rjmp	.+16     	; 0x36d0 <vfprintf+0x13c>
    36c0:	86 36       	cpi	r24, 0x66	; 102
    36c2:	21 f4       	brne	.+8      	; 0x36cc <vfprintf+0x138>
    36c4:	39 2f       	mov	r19, r25
    36c6:	30 68       	ori	r19, 0x80	; 128
    36c8:	93 2e       	mov	r9, r19
    36ca:	02 c0       	rjmp	.+4      	; 0x36d0 <vfprintf+0x13c>
    36cc:	11 11       	cpse	r17, r1
    36ce:	11 50       	subi	r17, 0x01	; 1
    36d0:	97 fe       	sbrs	r9, 7
    36d2:	07 c0       	rjmp	.+14     	; 0x36e2 <vfprintf+0x14e>
    36d4:	1c 33       	cpi	r17, 0x3C	; 60
    36d6:	50 f4       	brcc	.+20     	; 0x36ec <vfprintf+0x158>
    36d8:	44 24       	eor	r4, r4
    36da:	43 94       	inc	r4
    36dc:	41 0e       	add	r4, r17
    36de:	27 e0       	ldi	r18, 0x07	; 7
    36e0:	0b c0       	rjmp	.+22     	; 0x36f8 <vfprintf+0x164>
    36e2:	18 30       	cpi	r17, 0x08	; 8
    36e4:	38 f0       	brcs	.+14     	; 0x36f4 <vfprintf+0x160>
    36e6:	27 e0       	ldi	r18, 0x07	; 7
    36e8:	17 e0       	ldi	r17, 0x07	; 7
    36ea:	05 c0       	rjmp	.+10     	; 0x36f6 <vfprintf+0x162>
    36ec:	27 e0       	ldi	r18, 0x07	; 7
    36ee:	9c e3       	ldi	r25, 0x3C	; 60
    36f0:	49 2e       	mov	r4, r25
    36f2:	02 c0       	rjmp	.+4      	; 0x36f8 <vfprintf+0x164>
    36f4:	21 2f       	mov	r18, r17
    36f6:	41 2c       	mov	r4, r1
    36f8:	56 01       	movw	r10, r12
    36fa:	84 e0       	ldi	r24, 0x04	; 4
    36fc:	a8 0e       	add	r10, r24
    36fe:	b1 1c       	adc	r11, r1
    3700:	f6 01       	movw	r30, r12
    3702:	60 81       	ld	r22, Z
    3704:	71 81       	ldd	r23, Z+1	; 0x01
    3706:	82 81       	ldd	r24, Z+2	; 0x02
    3708:	93 81       	ldd	r25, Z+3	; 0x03
    370a:	04 2d       	mov	r16, r4
    370c:	a3 01       	movw	r20, r6
    370e:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <__ftoa_engine>
    3712:	6c 01       	movw	r12, r24
    3714:	f9 81       	ldd	r31, Y+1	; 0x01
    3716:	fc 87       	std	Y+12, r31	; 0x0c
    3718:	f0 ff       	sbrs	r31, 0
    371a:	02 c0       	rjmp	.+4      	; 0x3720 <vfprintf+0x18c>
    371c:	f3 ff       	sbrs	r31, 3
    371e:	06 c0       	rjmp	.+12     	; 0x372c <vfprintf+0x198>
    3720:	91 fc       	sbrc	r9, 1
    3722:	06 c0       	rjmp	.+12     	; 0x3730 <vfprintf+0x19c>
    3724:	92 fe       	sbrs	r9, 2
    3726:	06 c0       	rjmp	.+12     	; 0x3734 <vfprintf+0x1a0>
    3728:	00 e2       	ldi	r16, 0x20	; 32
    372a:	05 c0       	rjmp	.+10     	; 0x3736 <vfprintf+0x1a2>
    372c:	0d e2       	ldi	r16, 0x2D	; 45
    372e:	03 c0       	rjmp	.+6      	; 0x3736 <vfprintf+0x1a2>
    3730:	0b e2       	ldi	r16, 0x2B	; 43
    3732:	01 c0       	rjmp	.+2      	; 0x3736 <vfprintf+0x1a2>
    3734:	00 e0       	ldi	r16, 0x00	; 0
    3736:	8c 85       	ldd	r24, Y+12	; 0x0c
    3738:	8c 70       	andi	r24, 0x0C	; 12
    373a:	19 f0       	breq	.+6      	; 0x3742 <vfprintf+0x1ae>
    373c:	01 11       	cpse	r16, r1
    373e:	5a c2       	rjmp	.+1204   	; 0x3bf4 <vfprintf+0x660>
    3740:	9b c2       	rjmp	.+1334   	; 0x3c78 <vfprintf+0x6e4>
    3742:	97 fe       	sbrs	r9, 7
    3744:	10 c0       	rjmp	.+32     	; 0x3766 <vfprintf+0x1d2>
    3746:	4c 0c       	add	r4, r12
    3748:	fc 85       	ldd	r31, Y+12	; 0x0c
    374a:	f4 ff       	sbrs	r31, 4
    374c:	04 c0       	rjmp	.+8      	; 0x3756 <vfprintf+0x1c2>
    374e:	8a 81       	ldd	r24, Y+2	; 0x02
    3750:	81 33       	cpi	r24, 0x31	; 49
    3752:	09 f4       	brne	.+2      	; 0x3756 <vfprintf+0x1c2>
    3754:	4a 94       	dec	r4
    3756:	14 14       	cp	r1, r4
    3758:	74 f5       	brge	.+92     	; 0x37b6 <vfprintf+0x222>
    375a:	28 e0       	ldi	r18, 0x08	; 8
    375c:	24 15       	cp	r18, r4
    375e:	78 f5       	brcc	.+94     	; 0x37be <vfprintf+0x22a>
    3760:	88 e0       	ldi	r24, 0x08	; 8
    3762:	48 2e       	mov	r4, r24
    3764:	2c c0       	rjmp	.+88     	; 0x37be <vfprintf+0x22a>
    3766:	96 fc       	sbrc	r9, 6
    3768:	2a c0       	rjmp	.+84     	; 0x37be <vfprintf+0x22a>
    376a:	81 2f       	mov	r24, r17
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	8c 15       	cp	r24, r12
    3770:	9d 05       	cpc	r25, r13
    3772:	9c f0       	brlt	.+38     	; 0x379a <vfprintf+0x206>
    3774:	3c ef       	ldi	r19, 0xFC	; 252
    3776:	c3 16       	cp	r12, r19
    3778:	3f ef       	ldi	r19, 0xFF	; 255
    377a:	d3 06       	cpc	r13, r19
    377c:	74 f0       	brlt	.+28     	; 0x379a <vfprintf+0x206>
    377e:	89 2d       	mov	r24, r9
    3780:	80 68       	ori	r24, 0x80	; 128
    3782:	98 2e       	mov	r9, r24
    3784:	0a c0       	rjmp	.+20     	; 0x379a <vfprintf+0x206>
    3786:	e2 e0       	ldi	r30, 0x02	; 2
    3788:	f0 e0       	ldi	r31, 0x00	; 0
    378a:	ec 0f       	add	r30, r28
    378c:	fd 1f       	adc	r31, r29
    378e:	e1 0f       	add	r30, r17
    3790:	f1 1d       	adc	r31, r1
    3792:	80 81       	ld	r24, Z
    3794:	80 33       	cpi	r24, 0x30	; 48
    3796:	19 f4       	brne	.+6      	; 0x379e <vfprintf+0x20a>
    3798:	11 50       	subi	r17, 0x01	; 1
    379a:	11 11       	cpse	r17, r1
    379c:	f4 cf       	rjmp	.-24     	; 0x3786 <vfprintf+0x1f2>
    379e:	97 fe       	sbrs	r9, 7
    37a0:	0e c0       	rjmp	.+28     	; 0x37be <vfprintf+0x22a>
    37a2:	44 24       	eor	r4, r4
    37a4:	43 94       	inc	r4
    37a6:	41 0e       	add	r4, r17
    37a8:	81 2f       	mov	r24, r17
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	c8 16       	cp	r12, r24
    37ae:	d9 06       	cpc	r13, r25
    37b0:	2c f4       	brge	.+10     	; 0x37bc <vfprintf+0x228>
    37b2:	1c 19       	sub	r17, r12
    37b4:	04 c0       	rjmp	.+8      	; 0x37be <vfprintf+0x22a>
    37b6:	44 24       	eor	r4, r4
    37b8:	43 94       	inc	r4
    37ba:	01 c0       	rjmp	.+2      	; 0x37be <vfprintf+0x22a>
    37bc:	10 e0       	ldi	r17, 0x00	; 0
    37be:	97 fe       	sbrs	r9, 7
    37c0:	06 c0       	rjmp	.+12     	; 0x37ce <vfprintf+0x23a>
    37c2:	1c 14       	cp	r1, r12
    37c4:	1d 04       	cpc	r1, r13
    37c6:	34 f4       	brge	.+12     	; 0x37d4 <vfprintf+0x240>
    37c8:	c6 01       	movw	r24, r12
    37ca:	01 96       	adiw	r24, 0x01	; 1
    37cc:	05 c0       	rjmp	.+10     	; 0x37d8 <vfprintf+0x244>
    37ce:	85 e0       	ldi	r24, 0x05	; 5
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	02 c0       	rjmp	.+4      	; 0x37d8 <vfprintf+0x244>
    37d4:	81 e0       	ldi	r24, 0x01	; 1
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	01 11       	cpse	r16, r1
    37da:	01 96       	adiw	r24, 0x01	; 1
    37dc:	11 23       	and	r17, r17
    37de:	31 f0       	breq	.+12     	; 0x37ec <vfprintf+0x258>
    37e0:	21 2f       	mov	r18, r17
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	2f 5f       	subi	r18, 0xFF	; 255
    37e6:	3f 4f       	sbci	r19, 0xFF	; 255
    37e8:	82 0f       	add	r24, r18
    37ea:	93 1f       	adc	r25, r19
    37ec:	25 2d       	mov	r18, r5
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	82 17       	cp	r24, r18
    37f2:	93 07       	cpc	r25, r19
    37f4:	14 f4       	brge	.+4      	; 0x37fa <vfprintf+0x266>
    37f6:	58 1a       	sub	r5, r24
    37f8:	01 c0       	rjmp	.+2      	; 0x37fc <vfprintf+0x268>
    37fa:	51 2c       	mov	r5, r1
    37fc:	89 2d       	mov	r24, r9
    37fe:	89 70       	andi	r24, 0x09	; 9
    3800:	49 f4       	brne	.+18     	; 0x3814 <vfprintf+0x280>
    3802:	55 20       	and	r5, r5
    3804:	39 f0       	breq	.+14     	; 0x3814 <vfprintf+0x280>
    3806:	b7 01       	movw	r22, r14
    3808:	80 e2       	ldi	r24, 0x20	; 32
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    3810:	5a 94       	dec	r5
    3812:	f7 cf       	rjmp	.-18     	; 0x3802 <vfprintf+0x26e>
    3814:	00 23       	and	r16, r16
    3816:	29 f0       	breq	.+10     	; 0x3822 <vfprintf+0x28e>
    3818:	b7 01       	movw	r22, r14
    381a:	80 2f       	mov	r24, r16
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    3822:	93 fc       	sbrc	r9, 3
    3824:	09 c0       	rjmp	.+18     	; 0x3838 <vfprintf+0x2a4>
    3826:	55 20       	and	r5, r5
    3828:	39 f0       	breq	.+14     	; 0x3838 <vfprintf+0x2a4>
    382a:	b7 01       	movw	r22, r14
    382c:	80 e3       	ldi	r24, 0x30	; 48
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    3834:	5a 94       	dec	r5
    3836:	f7 cf       	rjmp	.-18     	; 0x3826 <vfprintf+0x292>
    3838:	97 fe       	sbrs	r9, 7
    383a:	4c c0       	rjmp	.+152    	; 0x38d4 <vfprintf+0x340>
    383c:	46 01       	movw	r8, r12
    383e:	d7 fe       	sbrs	r13, 7
    3840:	02 c0       	rjmp	.+4      	; 0x3846 <vfprintf+0x2b2>
    3842:	81 2c       	mov	r8, r1
    3844:	91 2c       	mov	r9, r1
    3846:	c6 01       	movw	r24, r12
    3848:	88 19       	sub	r24, r8
    384a:	99 09       	sbc	r25, r9
    384c:	f3 01       	movw	r30, r6
    384e:	e8 0f       	add	r30, r24
    3850:	f9 1f       	adc	r31, r25
    3852:	ed 87       	std	Y+13, r30	; 0x0d
    3854:	fe 87       	std	Y+14, r31	; 0x0e
    3856:	96 01       	movw	r18, r12
    3858:	24 19       	sub	r18, r4
    385a:	31 09       	sbc	r19, r1
    385c:	2f 87       	std	Y+15, r18	; 0x0f
    385e:	38 8b       	std	Y+16, r19	; 0x10
    3860:	01 2f       	mov	r16, r17
    3862:	10 e0       	ldi	r17, 0x00	; 0
    3864:	11 95       	neg	r17
    3866:	01 95       	neg	r16
    3868:	11 09       	sbc	r17, r1
    386a:	3f ef       	ldi	r19, 0xFF	; 255
    386c:	83 16       	cp	r8, r19
    386e:	93 06       	cpc	r9, r19
    3870:	29 f4       	brne	.+10     	; 0x387c <vfprintf+0x2e8>
    3872:	b7 01       	movw	r22, r14
    3874:	8e e2       	ldi	r24, 0x2E	; 46
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    387c:	c8 14       	cp	r12, r8
    387e:	d9 04       	cpc	r13, r9
    3880:	4c f0       	brlt	.+18     	; 0x3894 <vfprintf+0x300>
    3882:	8f 85       	ldd	r24, Y+15	; 0x0f
    3884:	98 89       	ldd	r25, Y+16	; 0x10
    3886:	88 15       	cp	r24, r8
    3888:	99 05       	cpc	r25, r9
    388a:	24 f4       	brge	.+8      	; 0x3894 <vfprintf+0x300>
    388c:	ed 85       	ldd	r30, Y+13	; 0x0d
    388e:	fe 85       	ldd	r31, Y+14	; 0x0e
    3890:	81 81       	ldd	r24, Z+1	; 0x01
    3892:	01 c0       	rjmp	.+2      	; 0x3896 <vfprintf+0x302>
    3894:	80 e3       	ldi	r24, 0x30	; 48
    3896:	f1 e0       	ldi	r31, 0x01	; 1
    3898:	8f 1a       	sub	r8, r31
    389a:	91 08       	sbc	r9, r1
    389c:	2d 85       	ldd	r18, Y+13	; 0x0d
    389e:	3e 85       	ldd	r19, Y+14	; 0x0e
    38a0:	2f 5f       	subi	r18, 0xFF	; 255
    38a2:	3f 4f       	sbci	r19, 0xFF	; 255
    38a4:	2d 87       	std	Y+13, r18	; 0x0d
    38a6:	3e 87       	std	Y+14, r19	; 0x0e
    38a8:	80 16       	cp	r8, r16
    38aa:	91 06       	cpc	r9, r17
    38ac:	2c f0       	brlt	.+10     	; 0x38b8 <vfprintf+0x324>
    38ae:	b7 01       	movw	r22, r14
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    38b6:	d9 cf       	rjmp	.-78     	; 0x386a <vfprintf+0x2d6>
    38b8:	c8 14       	cp	r12, r8
    38ba:	d9 04       	cpc	r13, r9
    38bc:	41 f4       	brne	.+16     	; 0x38ce <vfprintf+0x33a>
    38be:	9a 81       	ldd	r25, Y+2	; 0x02
    38c0:	96 33       	cpi	r25, 0x36	; 54
    38c2:	20 f4       	brcc	.+8      	; 0x38cc <vfprintf+0x338>
    38c4:	95 33       	cpi	r25, 0x35	; 53
    38c6:	19 f4       	brne	.+6      	; 0x38ce <vfprintf+0x33a>
    38c8:	3c 85       	ldd	r19, Y+12	; 0x0c
    38ca:	34 ff       	sbrs	r19, 4
    38cc:	81 e3       	ldi	r24, 0x31	; 49
    38ce:	b7 01       	movw	r22, r14
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	4e c0       	rjmp	.+156    	; 0x3970 <vfprintf+0x3dc>
    38d4:	8a 81       	ldd	r24, Y+2	; 0x02
    38d6:	81 33       	cpi	r24, 0x31	; 49
    38d8:	19 f0       	breq	.+6      	; 0x38e0 <vfprintf+0x34c>
    38da:	9c 85       	ldd	r25, Y+12	; 0x0c
    38dc:	9f 7e       	andi	r25, 0xEF	; 239
    38de:	9c 87       	std	Y+12, r25	; 0x0c
    38e0:	b7 01       	movw	r22, r14
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    38e8:	11 11       	cpse	r17, r1
    38ea:	05 c0       	rjmp	.+10     	; 0x38f6 <vfprintf+0x362>
    38ec:	94 fc       	sbrc	r9, 4
    38ee:	18 c0       	rjmp	.+48     	; 0x3920 <vfprintf+0x38c>
    38f0:	85 e6       	ldi	r24, 0x65	; 101
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	17 c0       	rjmp	.+46     	; 0x3924 <vfprintf+0x390>
    38f6:	b7 01       	movw	r22, r14
    38f8:	8e e2       	ldi	r24, 0x2E	; 46
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    3900:	1e 5f       	subi	r17, 0xFE	; 254
    3902:	82 e0       	ldi	r24, 0x02	; 2
    3904:	01 e0       	ldi	r16, 0x01	; 1
    3906:	08 0f       	add	r16, r24
    3908:	f3 01       	movw	r30, r6
    390a:	e8 0f       	add	r30, r24
    390c:	f1 1d       	adc	r31, r1
    390e:	80 81       	ld	r24, Z
    3910:	b7 01       	movw	r22, r14
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    3918:	80 2f       	mov	r24, r16
    391a:	01 13       	cpse	r16, r17
    391c:	f3 cf       	rjmp	.-26     	; 0x3904 <vfprintf+0x370>
    391e:	e6 cf       	rjmp	.-52     	; 0x38ec <vfprintf+0x358>
    3920:	85 e4       	ldi	r24, 0x45	; 69
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	b7 01       	movw	r22, r14
    3926:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    392a:	d7 fc       	sbrc	r13, 7
    392c:	06 c0       	rjmp	.+12     	; 0x393a <vfprintf+0x3a6>
    392e:	c1 14       	cp	r12, r1
    3930:	d1 04       	cpc	r13, r1
    3932:	41 f4       	brne	.+16     	; 0x3944 <vfprintf+0x3b0>
    3934:	ec 85       	ldd	r30, Y+12	; 0x0c
    3936:	e4 ff       	sbrs	r30, 4
    3938:	05 c0       	rjmp	.+10     	; 0x3944 <vfprintf+0x3b0>
    393a:	d1 94       	neg	r13
    393c:	c1 94       	neg	r12
    393e:	d1 08       	sbc	r13, r1
    3940:	8d e2       	ldi	r24, 0x2D	; 45
    3942:	01 c0       	rjmp	.+2      	; 0x3946 <vfprintf+0x3b2>
    3944:	8b e2       	ldi	r24, 0x2B	; 43
    3946:	b7 01       	movw	r22, r14
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    394e:	80 e3       	ldi	r24, 0x30	; 48
    3950:	2a e0       	ldi	r18, 0x0A	; 10
    3952:	c2 16       	cp	r12, r18
    3954:	d1 04       	cpc	r13, r1
    3956:	2c f0       	brlt	.+10     	; 0x3962 <vfprintf+0x3ce>
    3958:	8f 5f       	subi	r24, 0xFF	; 255
    395a:	fa e0       	ldi	r31, 0x0A	; 10
    395c:	cf 1a       	sub	r12, r31
    395e:	d1 08       	sbc	r13, r1
    3960:	f7 cf       	rjmp	.-18     	; 0x3950 <vfprintf+0x3bc>
    3962:	b7 01       	movw	r22, r14
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    396a:	b7 01       	movw	r22, r14
    396c:	c6 01       	movw	r24, r12
    396e:	c0 96       	adiw	r24, 0x30	; 48
    3970:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    3974:	54 c1       	rjmp	.+680    	; 0x3c1e <vfprintf+0x68a>
    3976:	83 36       	cpi	r24, 0x63	; 99
    3978:	31 f0       	breq	.+12     	; 0x3986 <vfprintf+0x3f2>
    397a:	83 37       	cpi	r24, 0x73	; 115
    397c:	79 f0       	breq	.+30     	; 0x399c <vfprintf+0x408>
    397e:	83 35       	cpi	r24, 0x53	; 83
    3980:	09 f0       	breq	.+2      	; 0x3984 <vfprintf+0x3f0>
    3982:	56 c0       	rjmp	.+172    	; 0x3a30 <vfprintf+0x49c>
    3984:	20 c0       	rjmp	.+64     	; 0x39c6 <vfprintf+0x432>
    3986:	56 01       	movw	r10, r12
    3988:	32 e0       	ldi	r19, 0x02	; 2
    398a:	a3 0e       	add	r10, r19
    398c:	b1 1c       	adc	r11, r1
    398e:	f6 01       	movw	r30, r12
    3990:	80 81       	ld	r24, Z
    3992:	89 83       	std	Y+1, r24	; 0x01
    3994:	01 e0       	ldi	r16, 0x01	; 1
    3996:	10 e0       	ldi	r17, 0x00	; 0
    3998:	63 01       	movw	r12, r6
    399a:	12 c0       	rjmp	.+36     	; 0x39c0 <vfprintf+0x42c>
    399c:	56 01       	movw	r10, r12
    399e:	f2 e0       	ldi	r31, 0x02	; 2
    39a0:	af 0e       	add	r10, r31
    39a2:	b1 1c       	adc	r11, r1
    39a4:	f6 01       	movw	r30, r12
    39a6:	c0 80       	ld	r12, Z
    39a8:	d1 80       	ldd	r13, Z+1	; 0x01
    39aa:	96 fe       	sbrs	r9, 6
    39ac:	03 c0       	rjmp	.+6      	; 0x39b4 <vfprintf+0x420>
    39ae:	61 2f       	mov	r22, r17
    39b0:	70 e0       	ldi	r23, 0x00	; 0
    39b2:	02 c0       	rjmp	.+4      	; 0x39b8 <vfprintf+0x424>
    39b4:	6f ef       	ldi	r22, 0xFF	; 255
    39b6:	7f ef       	ldi	r23, 0xFF	; 255
    39b8:	c6 01       	movw	r24, r12
    39ba:	0e 94 1d 20 	call	0x403a	; 0x403a <strnlen>
    39be:	8c 01       	movw	r16, r24
    39c0:	f9 2d       	mov	r31, r9
    39c2:	ff 77       	andi	r31, 0x7F	; 127
    39c4:	14 c0       	rjmp	.+40     	; 0x39ee <vfprintf+0x45a>
    39c6:	56 01       	movw	r10, r12
    39c8:	22 e0       	ldi	r18, 0x02	; 2
    39ca:	a2 0e       	add	r10, r18
    39cc:	b1 1c       	adc	r11, r1
    39ce:	f6 01       	movw	r30, r12
    39d0:	c0 80       	ld	r12, Z
    39d2:	d1 80       	ldd	r13, Z+1	; 0x01
    39d4:	96 fe       	sbrs	r9, 6
    39d6:	03 c0       	rjmp	.+6      	; 0x39de <vfprintf+0x44a>
    39d8:	61 2f       	mov	r22, r17
    39da:	70 e0       	ldi	r23, 0x00	; 0
    39dc:	02 c0       	rjmp	.+4      	; 0x39e2 <vfprintf+0x44e>
    39de:	6f ef       	ldi	r22, 0xFF	; 255
    39e0:	7f ef       	ldi	r23, 0xFF	; 255
    39e2:	c6 01       	movw	r24, r12
    39e4:	0e 94 00 20 	call	0x4000	; 0x4000 <strnlen_P>
    39e8:	8c 01       	movw	r16, r24
    39ea:	f9 2d       	mov	r31, r9
    39ec:	f0 68       	ori	r31, 0x80	; 128
    39ee:	9f 2e       	mov	r9, r31
    39f0:	f3 fd       	sbrc	r31, 3
    39f2:	1a c0       	rjmp	.+52     	; 0x3a28 <vfprintf+0x494>
    39f4:	85 2d       	mov	r24, r5
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	08 17       	cp	r16, r24
    39fa:	19 07       	cpc	r17, r25
    39fc:	a8 f4       	brcc	.+42     	; 0x3a28 <vfprintf+0x494>
    39fe:	b7 01       	movw	r22, r14
    3a00:	80 e2       	ldi	r24, 0x20	; 32
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    3a08:	5a 94       	dec	r5
    3a0a:	f4 cf       	rjmp	.-24     	; 0x39f4 <vfprintf+0x460>
    3a0c:	f6 01       	movw	r30, r12
    3a0e:	97 fc       	sbrc	r9, 7
    3a10:	85 91       	lpm	r24, Z+
    3a12:	97 fe       	sbrs	r9, 7
    3a14:	81 91       	ld	r24, Z+
    3a16:	6f 01       	movw	r12, r30
    3a18:	b7 01       	movw	r22, r14
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    3a20:	51 10       	cpse	r5, r1
    3a22:	5a 94       	dec	r5
    3a24:	01 50       	subi	r16, 0x01	; 1
    3a26:	11 09       	sbc	r17, r1
    3a28:	01 15       	cp	r16, r1
    3a2a:	11 05       	cpc	r17, r1
    3a2c:	79 f7       	brne	.-34     	; 0x3a0c <vfprintf+0x478>
    3a2e:	f7 c0       	rjmp	.+494    	; 0x3c1e <vfprintf+0x68a>
    3a30:	84 36       	cpi	r24, 0x64	; 100
    3a32:	11 f0       	breq	.+4      	; 0x3a38 <vfprintf+0x4a4>
    3a34:	89 36       	cpi	r24, 0x69	; 105
    3a36:	61 f5       	brne	.+88     	; 0x3a90 <vfprintf+0x4fc>
    3a38:	56 01       	movw	r10, r12
    3a3a:	97 fe       	sbrs	r9, 7
    3a3c:	09 c0       	rjmp	.+18     	; 0x3a50 <vfprintf+0x4bc>
    3a3e:	24 e0       	ldi	r18, 0x04	; 4
    3a40:	a2 0e       	add	r10, r18
    3a42:	b1 1c       	adc	r11, r1
    3a44:	f6 01       	movw	r30, r12
    3a46:	60 81       	ld	r22, Z
    3a48:	71 81       	ldd	r23, Z+1	; 0x01
    3a4a:	82 81       	ldd	r24, Z+2	; 0x02
    3a4c:	93 81       	ldd	r25, Z+3	; 0x03
    3a4e:	0a c0       	rjmp	.+20     	; 0x3a64 <vfprintf+0x4d0>
    3a50:	f2 e0       	ldi	r31, 0x02	; 2
    3a52:	af 0e       	add	r10, r31
    3a54:	b1 1c       	adc	r11, r1
    3a56:	f6 01       	movw	r30, r12
    3a58:	60 81       	ld	r22, Z
    3a5a:	71 81       	ldd	r23, Z+1	; 0x01
    3a5c:	07 2e       	mov	r0, r23
    3a5e:	00 0c       	add	r0, r0
    3a60:	88 0b       	sbc	r24, r24
    3a62:	99 0b       	sbc	r25, r25
    3a64:	f9 2d       	mov	r31, r9
    3a66:	ff 76       	andi	r31, 0x6F	; 111
    3a68:	9f 2e       	mov	r9, r31
    3a6a:	97 ff       	sbrs	r25, 7
    3a6c:	09 c0       	rjmp	.+18     	; 0x3a80 <vfprintf+0x4ec>
    3a6e:	90 95       	com	r25
    3a70:	80 95       	com	r24
    3a72:	70 95       	com	r23
    3a74:	61 95       	neg	r22
    3a76:	7f 4f       	sbci	r23, 0xFF	; 255
    3a78:	8f 4f       	sbci	r24, 0xFF	; 255
    3a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a7c:	f0 68       	ori	r31, 0x80	; 128
    3a7e:	9f 2e       	mov	r9, r31
    3a80:	2a e0       	ldi	r18, 0x0A	; 10
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	a3 01       	movw	r20, r6
    3a86:	0e 94 9b 20 	call	0x4136	; 0x4136 <__ultoa_invert>
    3a8a:	c8 2e       	mov	r12, r24
    3a8c:	c6 18       	sub	r12, r6
    3a8e:	3f c0       	rjmp	.+126    	; 0x3b0e <vfprintf+0x57a>
    3a90:	09 2d       	mov	r16, r9
    3a92:	85 37       	cpi	r24, 0x75	; 117
    3a94:	21 f4       	brne	.+8      	; 0x3a9e <vfprintf+0x50a>
    3a96:	0f 7e       	andi	r16, 0xEF	; 239
    3a98:	2a e0       	ldi	r18, 0x0A	; 10
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	1d c0       	rjmp	.+58     	; 0x3ad8 <vfprintf+0x544>
    3a9e:	09 7f       	andi	r16, 0xF9	; 249
    3aa0:	8f 36       	cpi	r24, 0x6F	; 111
    3aa2:	91 f0       	breq	.+36     	; 0x3ac8 <vfprintf+0x534>
    3aa4:	18 f4       	brcc	.+6      	; 0x3aac <vfprintf+0x518>
    3aa6:	88 35       	cpi	r24, 0x58	; 88
    3aa8:	59 f0       	breq	.+22     	; 0x3ac0 <vfprintf+0x52c>
    3aaa:	c3 c0       	rjmp	.+390    	; 0x3c32 <vfprintf+0x69e>
    3aac:	80 37       	cpi	r24, 0x70	; 112
    3aae:	19 f0       	breq	.+6      	; 0x3ab6 <vfprintf+0x522>
    3ab0:	88 37       	cpi	r24, 0x78	; 120
    3ab2:	11 f0       	breq	.+4      	; 0x3ab8 <vfprintf+0x524>
    3ab4:	be c0       	rjmp	.+380    	; 0x3c32 <vfprintf+0x69e>
    3ab6:	00 61       	ori	r16, 0x10	; 16
    3ab8:	04 ff       	sbrs	r16, 4
    3aba:	09 c0       	rjmp	.+18     	; 0x3ace <vfprintf+0x53a>
    3abc:	04 60       	ori	r16, 0x04	; 4
    3abe:	07 c0       	rjmp	.+14     	; 0x3ace <vfprintf+0x53a>
    3ac0:	94 fe       	sbrs	r9, 4
    3ac2:	08 c0       	rjmp	.+16     	; 0x3ad4 <vfprintf+0x540>
    3ac4:	06 60       	ori	r16, 0x06	; 6
    3ac6:	06 c0       	rjmp	.+12     	; 0x3ad4 <vfprintf+0x540>
    3ac8:	28 e0       	ldi	r18, 0x08	; 8
    3aca:	30 e0       	ldi	r19, 0x00	; 0
    3acc:	05 c0       	rjmp	.+10     	; 0x3ad8 <vfprintf+0x544>
    3ace:	20 e1       	ldi	r18, 0x10	; 16
    3ad0:	30 e0       	ldi	r19, 0x00	; 0
    3ad2:	02 c0       	rjmp	.+4      	; 0x3ad8 <vfprintf+0x544>
    3ad4:	20 e1       	ldi	r18, 0x10	; 16
    3ad6:	32 e0       	ldi	r19, 0x02	; 2
    3ad8:	56 01       	movw	r10, r12
    3ada:	07 ff       	sbrs	r16, 7
    3adc:	09 c0       	rjmp	.+18     	; 0x3af0 <vfprintf+0x55c>
    3ade:	84 e0       	ldi	r24, 0x04	; 4
    3ae0:	a8 0e       	add	r10, r24
    3ae2:	b1 1c       	adc	r11, r1
    3ae4:	f6 01       	movw	r30, r12
    3ae6:	60 81       	ld	r22, Z
    3ae8:	71 81       	ldd	r23, Z+1	; 0x01
    3aea:	82 81       	ldd	r24, Z+2	; 0x02
    3aec:	93 81       	ldd	r25, Z+3	; 0x03
    3aee:	08 c0       	rjmp	.+16     	; 0x3b00 <vfprintf+0x56c>
    3af0:	f2 e0       	ldi	r31, 0x02	; 2
    3af2:	af 0e       	add	r10, r31
    3af4:	b1 1c       	adc	r11, r1
    3af6:	f6 01       	movw	r30, r12
    3af8:	60 81       	ld	r22, Z
    3afa:	71 81       	ldd	r23, Z+1	; 0x01
    3afc:	80 e0       	ldi	r24, 0x00	; 0
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	a3 01       	movw	r20, r6
    3b02:	0e 94 9b 20 	call	0x4136	; 0x4136 <__ultoa_invert>
    3b06:	c8 2e       	mov	r12, r24
    3b08:	c6 18       	sub	r12, r6
    3b0a:	0f 77       	andi	r16, 0x7F	; 127
    3b0c:	90 2e       	mov	r9, r16
    3b0e:	96 fe       	sbrs	r9, 6
    3b10:	0b c0       	rjmp	.+22     	; 0x3b28 <vfprintf+0x594>
    3b12:	09 2d       	mov	r16, r9
    3b14:	0e 7f       	andi	r16, 0xFE	; 254
    3b16:	c1 16       	cp	r12, r17
    3b18:	50 f4       	brcc	.+20     	; 0x3b2e <vfprintf+0x59a>
    3b1a:	94 fe       	sbrs	r9, 4
    3b1c:	0a c0       	rjmp	.+20     	; 0x3b32 <vfprintf+0x59e>
    3b1e:	92 fc       	sbrc	r9, 2
    3b20:	08 c0       	rjmp	.+16     	; 0x3b32 <vfprintf+0x59e>
    3b22:	09 2d       	mov	r16, r9
    3b24:	0e 7e       	andi	r16, 0xEE	; 238
    3b26:	05 c0       	rjmp	.+10     	; 0x3b32 <vfprintf+0x59e>
    3b28:	dc 2c       	mov	r13, r12
    3b2a:	09 2d       	mov	r16, r9
    3b2c:	03 c0       	rjmp	.+6      	; 0x3b34 <vfprintf+0x5a0>
    3b2e:	dc 2c       	mov	r13, r12
    3b30:	01 c0       	rjmp	.+2      	; 0x3b34 <vfprintf+0x5a0>
    3b32:	d1 2e       	mov	r13, r17
    3b34:	04 ff       	sbrs	r16, 4
    3b36:	0d c0       	rjmp	.+26     	; 0x3b52 <vfprintf+0x5be>
    3b38:	fe 01       	movw	r30, r28
    3b3a:	ec 0d       	add	r30, r12
    3b3c:	f1 1d       	adc	r31, r1
    3b3e:	80 81       	ld	r24, Z
    3b40:	80 33       	cpi	r24, 0x30	; 48
    3b42:	11 f4       	brne	.+4      	; 0x3b48 <vfprintf+0x5b4>
    3b44:	09 7e       	andi	r16, 0xE9	; 233
    3b46:	09 c0       	rjmp	.+18     	; 0x3b5a <vfprintf+0x5c6>
    3b48:	02 ff       	sbrs	r16, 2
    3b4a:	06 c0       	rjmp	.+12     	; 0x3b58 <vfprintf+0x5c4>
    3b4c:	d3 94       	inc	r13
    3b4e:	d3 94       	inc	r13
    3b50:	04 c0       	rjmp	.+8      	; 0x3b5a <vfprintf+0x5c6>
    3b52:	80 2f       	mov	r24, r16
    3b54:	86 78       	andi	r24, 0x86	; 134
    3b56:	09 f0       	breq	.+2      	; 0x3b5a <vfprintf+0x5c6>
    3b58:	d3 94       	inc	r13
    3b5a:	03 fd       	sbrc	r16, 3
    3b5c:	11 c0       	rjmp	.+34     	; 0x3b80 <vfprintf+0x5ec>
    3b5e:	00 ff       	sbrs	r16, 0
    3b60:	06 c0       	rjmp	.+12     	; 0x3b6e <vfprintf+0x5da>
    3b62:	1c 2d       	mov	r17, r12
    3b64:	d5 14       	cp	r13, r5
    3b66:	80 f4       	brcc	.+32     	; 0x3b88 <vfprintf+0x5f4>
    3b68:	15 0d       	add	r17, r5
    3b6a:	1d 19       	sub	r17, r13
    3b6c:	0d c0       	rjmp	.+26     	; 0x3b88 <vfprintf+0x5f4>
    3b6e:	d5 14       	cp	r13, r5
    3b70:	58 f4       	brcc	.+22     	; 0x3b88 <vfprintf+0x5f4>
    3b72:	b7 01       	movw	r22, r14
    3b74:	80 e2       	ldi	r24, 0x20	; 32
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    3b7c:	d3 94       	inc	r13
    3b7e:	f7 cf       	rjmp	.-18     	; 0x3b6e <vfprintf+0x5da>
    3b80:	d5 14       	cp	r13, r5
    3b82:	10 f4       	brcc	.+4      	; 0x3b88 <vfprintf+0x5f4>
    3b84:	5d 18       	sub	r5, r13
    3b86:	01 c0       	rjmp	.+2      	; 0x3b8a <vfprintf+0x5f6>
    3b88:	51 2c       	mov	r5, r1
    3b8a:	04 ff       	sbrs	r16, 4
    3b8c:	10 c0       	rjmp	.+32     	; 0x3bae <vfprintf+0x61a>
    3b8e:	b7 01       	movw	r22, r14
    3b90:	80 e3       	ldi	r24, 0x30	; 48
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    3b98:	02 ff       	sbrs	r16, 2
    3b9a:	17 c0       	rjmp	.+46     	; 0x3bca <vfprintf+0x636>
    3b9c:	01 fd       	sbrc	r16, 1
    3b9e:	03 c0       	rjmp	.+6      	; 0x3ba6 <vfprintf+0x612>
    3ba0:	88 e7       	ldi	r24, 0x78	; 120
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	02 c0       	rjmp	.+4      	; 0x3baa <vfprintf+0x616>
    3ba6:	88 e5       	ldi	r24, 0x58	; 88
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	b7 01       	movw	r22, r14
    3bac:	0c c0       	rjmp	.+24     	; 0x3bc6 <vfprintf+0x632>
    3bae:	80 2f       	mov	r24, r16
    3bb0:	86 78       	andi	r24, 0x86	; 134
    3bb2:	59 f0       	breq	.+22     	; 0x3bca <vfprintf+0x636>
    3bb4:	01 ff       	sbrs	r16, 1
    3bb6:	02 c0       	rjmp	.+4      	; 0x3bbc <vfprintf+0x628>
    3bb8:	8b e2       	ldi	r24, 0x2B	; 43
    3bba:	01 c0       	rjmp	.+2      	; 0x3bbe <vfprintf+0x62a>
    3bbc:	80 e2       	ldi	r24, 0x20	; 32
    3bbe:	07 fd       	sbrc	r16, 7
    3bc0:	8d e2       	ldi	r24, 0x2D	; 45
    3bc2:	b7 01       	movw	r22, r14
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    3bca:	c1 16       	cp	r12, r17
    3bcc:	38 f4       	brcc	.+14     	; 0x3bdc <vfprintf+0x648>
    3bce:	b7 01       	movw	r22, r14
    3bd0:	80 e3       	ldi	r24, 0x30	; 48
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    3bd8:	11 50       	subi	r17, 0x01	; 1
    3bda:	f7 cf       	rjmp	.-18     	; 0x3bca <vfprintf+0x636>
    3bdc:	ca 94       	dec	r12
    3bde:	f3 01       	movw	r30, r6
    3be0:	ec 0d       	add	r30, r12
    3be2:	f1 1d       	adc	r31, r1
    3be4:	80 81       	ld	r24, Z
    3be6:	b7 01       	movw	r22, r14
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    3bee:	c1 10       	cpse	r12, r1
    3bf0:	f5 cf       	rjmp	.-22     	; 0x3bdc <vfprintf+0x648>
    3bf2:	15 c0       	rjmp	.+42     	; 0x3c1e <vfprintf+0x68a>
    3bf4:	f4 e0       	ldi	r31, 0x04	; 4
    3bf6:	f5 15       	cp	r31, r5
    3bf8:	60 f5       	brcc	.+88     	; 0x3c52 <vfprintf+0x6be>
    3bfa:	84 e0       	ldi	r24, 0x04	; 4
    3bfc:	58 1a       	sub	r5, r24
    3bfe:	93 fe       	sbrs	r9, 3
    3c00:	1f c0       	rjmp	.+62     	; 0x3c40 <vfprintf+0x6ac>
    3c02:	01 11       	cpse	r16, r1
    3c04:	27 c0       	rjmp	.+78     	; 0x3c54 <vfprintf+0x6c0>
    3c06:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c08:	23 ff       	sbrs	r18, 3
    3c0a:	2a c0       	rjmp	.+84     	; 0x3c60 <vfprintf+0x6cc>
    3c0c:	00 e5       	ldi	r16, 0x50	; 80
    3c0e:	11 e0       	ldi	r17, 0x01	; 1
    3c10:	39 2d       	mov	r19, r9
    3c12:	30 71       	andi	r19, 0x10	; 16
    3c14:	93 2e       	mov	r9, r19
    3c16:	f8 01       	movw	r30, r16
    3c18:	84 91       	lpm	r24, Z
    3c1a:	81 11       	cpse	r24, r1
    3c1c:	24 c0       	rjmp	.+72     	; 0x3c66 <vfprintf+0x6d2>
    3c1e:	55 20       	and	r5, r5
    3c20:	09 f4       	brne	.+2      	; 0x3c24 <vfprintf+0x690>
    3c22:	e4 cc       	rjmp	.-1592   	; 0x35ec <vfprintf+0x58>
    3c24:	b7 01       	movw	r22, r14
    3c26:	80 e2       	ldi	r24, 0x20	; 32
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    3c2e:	5a 94       	dec	r5
    3c30:	f6 cf       	rjmp	.-20     	; 0x3c1e <vfprintf+0x68a>
    3c32:	f7 01       	movw	r30, r14
    3c34:	86 81       	ldd	r24, Z+6	; 0x06
    3c36:	97 81       	ldd	r25, Z+7	; 0x07
    3c38:	26 c0       	rjmp	.+76     	; 0x3c86 <vfprintf+0x6f2>
    3c3a:	8f ef       	ldi	r24, 0xFF	; 255
    3c3c:	9f ef       	ldi	r25, 0xFF	; 255
    3c3e:	23 c0       	rjmp	.+70     	; 0x3c86 <vfprintf+0x6f2>
    3c40:	b7 01       	movw	r22, r14
    3c42:	80 e2       	ldi	r24, 0x20	; 32
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    3c4a:	5a 94       	dec	r5
    3c4c:	51 10       	cpse	r5, r1
    3c4e:	f8 cf       	rjmp	.-16     	; 0x3c40 <vfprintf+0x6ac>
    3c50:	d8 cf       	rjmp	.-80     	; 0x3c02 <vfprintf+0x66e>
    3c52:	51 2c       	mov	r5, r1
    3c54:	b7 01       	movw	r22, r14
    3c56:	80 2f       	mov	r24, r16
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    3c5e:	d3 cf       	rjmp	.-90     	; 0x3c06 <vfprintf+0x672>
    3c60:	04 e5       	ldi	r16, 0x54	; 84
    3c62:	11 e0       	ldi	r17, 0x01	; 1
    3c64:	d5 cf       	rjmp	.-86     	; 0x3c10 <vfprintf+0x67c>
    3c66:	91 10       	cpse	r9, r1
    3c68:	80 52       	subi	r24, 0x20	; 32
    3c6a:	b7 01       	movw	r22, r14
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	0e 94 3d 20 	call	0x407a	; 0x407a <fputc>
    3c72:	0f 5f       	subi	r16, 0xFF	; 255
    3c74:	1f 4f       	sbci	r17, 0xFF	; 255
    3c76:	cf cf       	rjmp	.-98     	; 0x3c16 <vfprintf+0x682>
    3c78:	23 e0       	ldi	r18, 0x03	; 3
    3c7a:	25 15       	cp	r18, r5
    3c7c:	10 f4       	brcc	.+4      	; 0x3c82 <vfprintf+0x6ee>
    3c7e:	83 e0       	ldi	r24, 0x03	; 3
    3c80:	bd cf       	rjmp	.-134    	; 0x3bfc <vfprintf+0x668>
    3c82:	51 2c       	mov	r5, r1
    3c84:	c0 cf       	rjmp	.-128    	; 0x3c06 <vfprintf+0x672>
    3c86:	60 96       	adiw	r28, 0x10	; 16
    3c88:	e2 e1       	ldi	r30, 0x12	; 18
    3c8a:	0c 94 a4 1e 	jmp	0x3d48	; 0x3d48 <__epilogue_restores__>

00003c8e <__divmodhi4>:
    3c8e:	97 fb       	bst	r25, 7
    3c90:	07 2e       	mov	r0, r23
    3c92:	16 f4       	brtc	.+4      	; 0x3c98 <__divmodhi4+0xa>
    3c94:	00 94       	com	r0
    3c96:	07 d0       	rcall	.+14     	; 0x3ca6 <__divmodhi4_neg1>
    3c98:	77 fd       	sbrc	r23, 7
    3c9a:	09 d0       	rcall	.+18     	; 0x3cae <__divmodhi4_neg2>
    3c9c:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__udivmodhi4>
    3ca0:	07 fc       	sbrc	r0, 7
    3ca2:	05 d0       	rcall	.+10     	; 0x3cae <__divmodhi4_neg2>
    3ca4:	3e f4       	brtc	.+14     	; 0x3cb4 <__divmodhi4_exit>

00003ca6 <__divmodhi4_neg1>:
    3ca6:	90 95       	com	r25
    3ca8:	81 95       	neg	r24
    3caa:	9f 4f       	sbci	r25, 0xFF	; 255
    3cac:	08 95       	ret

00003cae <__divmodhi4_neg2>:
    3cae:	70 95       	com	r23
    3cb0:	61 95       	neg	r22
    3cb2:	7f 4f       	sbci	r23, 0xFF	; 255

00003cb4 <__divmodhi4_exit>:
    3cb4:	08 95       	ret

00003cb6 <__divmodsi4>:
    3cb6:	05 2e       	mov	r0, r21
    3cb8:	97 fb       	bst	r25, 7
    3cba:	1e f4       	brtc	.+6      	; 0x3cc2 <__divmodsi4+0xc>
    3cbc:	00 94       	com	r0
    3cbe:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <__negsi2>
    3cc2:	57 fd       	sbrc	r21, 7
    3cc4:	07 d0       	rcall	.+14     	; 0x3cd4 <__divmodsi4_neg2>
    3cc6:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <__udivmodsi4>
    3cca:	07 fc       	sbrc	r0, 7
    3ccc:	03 d0       	rcall	.+6      	; 0x3cd4 <__divmodsi4_neg2>
    3cce:	4e f4       	brtc	.+18     	; 0x3ce2 <__divmodsi4_exit>
    3cd0:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <__negsi2>

00003cd4 <__divmodsi4_neg2>:
    3cd4:	50 95       	com	r21
    3cd6:	40 95       	com	r20
    3cd8:	30 95       	com	r19
    3cda:	21 95       	neg	r18
    3cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    3cde:	4f 4f       	sbci	r20, 0xFF	; 255
    3ce0:	5f 4f       	sbci	r21, 0xFF	; 255

00003ce2 <__divmodsi4_exit>:
    3ce2:	08 95       	ret

00003ce4 <__negsi2>:
    3ce4:	90 95       	com	r25
    3ce6:	80 95       	com	r24
    3ce8:	70 95       	com	r23
    3cea:	61 95       	neg	r22
    3cec:	7f 4f       	sbci	r23, 0xFF	; 255
    3cee:	8f 4f       	sbci	r24, 0xFF	; 255
    3cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    3cf2:	08 95       	ret

00003cf4 <__tablejump2__>:
    3cf4:	ee 0f       	add	r30, r30
    3cf6:	ff 1f       	adc	r31, r31
    3cf8:	05 90       	lpm	r0, Z+
    3cfa:	f4 91       	lpm	r31, Z
    3cfc:	e0 2d       	mov	r30, r0
    3cfe:	09 94       	ijmp

00003d00 <__muluhisi3>:
    3d00:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <__umulhisi3>
    3d04:	a5 9f       	mul	r26, r21
    3d06:	90 0d       	add	r25, r0
    3d08:	b4 9f       	mul	r27, r20
    3d0a:	90 0d       	add	r25, r0
    3d0c:	a4 9f       	mul	r26, r20
    3d0e:	80 0d       	add	r24, r0
    3d10:	91 1d       	adc	r25, r1
    3d12:	11 24       	eor	r1, r1
    3d14:	08 95       	ret

00003d16 <__prologue_saves__>:
    3d16:	2f 92       	push	r2
    3d18:	3f 92       	push	r3
    3d1a:	4f 92       	push	r4
    3d1c:	5f 92       	push	r5
    3d1e:	6f 92       	push	r6
    3d20:	7f 92       	push	r7
    3d22:	8f 92       	push	r8
    3d24:	9f 92       	push	r9
    3d26:	af 92       	push	r10
    3d28:	bf 92       	push	r11
    3d2a:	cf 92       	push	r12
    3d2c:	df 92       	push	r13
    3d2e:	ef 92       	push	r14
    3d30:	ff 92       	push	r15
    3d32:	0f 93       	push	r16
    3d34:	1f 93       	push	r17
    3d36:	cf 93       	push	r28
    3d38:	df 93       	push	r29
    3d3a:	cd b7       	in	r28, 0x3d	; 61
    3d3c:	de b7       	in	r29, 0x3e	; 62
    3d3e:	ca 1b       	sub	r28, r26
    3d40:	db 0b       	sbc	r29, r27
    3d42:	cd bf       	out	0x3d, r28	; 61
    3d44:	de bf       	out	0x3e, r29	; 62
    3d46:	09 94       	ijmp

00003d48 <__epilogue_restores__>:
    3d48:	2a 88       	ldd	r2, Y+18	; 0x12
    3d4a:	39 88       	ldd	r3, Y+17	; 0x11
    3d4c:	48 88       	ldd	r4, Y+16	; 0x10
    3d4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d50:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d52:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d54:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d56:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d58:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d5a:	b9 84       	ldd	r11, Y+9	; 0x09
    3d5c:	c8 84       	ldd	r12, Y+8	; 0x08
    3d5e:	df 80       	ldd	r13, Y+7	; 0x07
    3d60:	ee 80       	ldd	r14, Y+6	; 0x06
    3d62:	fd 80       	ldd	r15, Y+5	; 0x05
    3d64:	0c 81       	ldd	r16, Y+4	; 0x04
    3d66:	1b 81       	ldd	r17, Y+3	; 0x03
    3d68:	aa 81       	ldd	r26, Y+2	; 0x02
    3d6a:	b9 81       	ldd	r27, Y+1	; 0x01
    3d6c:	ce 0f       	add	r28, r30
    3d6e:	d1 1d       	adc	r29, r1
    3d70:	cd bf       	out	0x3d, r28	; 61
    3d72:	de bf       	out	0x3e, r29	; 62
    3d74:	ed 01       	movw	r28, r26
    3d76:	08 95       	ret

00003d78 <__udivmodhi4>:
    3d78:	aa 1b       	sub	r26, r26
    3d7a:	bb 1b       	sub	r27, r27
    3d7c:	51 e1       	ldi	r21, 0x11	; 17
    3d7e:	07 c0       	rjmp	.+14     	; 0x3d8e <__udivmodhi4_ep>

00003d80 <__udivmodhi4_loop>:
    3d80:	aa 1f       	adc	r26, r26
    3d82:	bb 1f       	adc	r27, r27
    3d84:	a6 17       	cp	r26, r22
    3d86:	b7 07       	cpc	r27, r23
    3d88:	10 f0       	brcs	.+4      	; 0x3d8e <__udivmodhi4_ep>
    3d8a:	a6 1b       	sub	r26, r22
    3d8c:	b7 0b       	sbc	r27, r23

00003d8e <__udivmodhi4_ep>:
    3d8e:	88 1f       	adc	r24, r24
    3d90:	99 1f       	adc	r25, r25
    3d92:	5a 95       	dec	r21
    3d94:	a9 f7       	brne	.-22     	; 0x3d80 <__udivmodhi4_loop>
    3d96:	80 95       	com	r24
    3d98:	90 95       	com	r25
    3d9a:	bc 01       	movw	r22, r24
    3d9c:	cd 01       	movw	r24, r26
    3d9e:	08 95       	ret

00003da0 <__udivmodsi4>:
    3da0:	a1 e2       	ldi	r26, 0x21	; 33
    3da2:	1a 2e       	mov	r1, r26
    3da4:	aa 1b       	sub	r26, r26
    3da6:	bb 1b       	sub	r27, r27
    3da8:	fd 01       	movw	r30, r26
    3daa:	0d c0       	rjmp	.+26     	; 0x3dc6 <__udivmodsi4_ep>

00003dac <__udivmodsi4_loop>:
    3dac:	aa 1f       	adc	r26, r26
    3dae:	bb 1f       	adc	r27, r27
    3db0:	ee 1f       	adc	r30, r30
    3db2:	ff 1f       	adc	r31, r31
    3db4:	a2 17       	cp	r26, r18
    3db6:	b3 07       	cpc	r27, r19
    3db8:	e4 07       	cpc	r30, r20
    3dba:	f5 07       	cpc	r31, r21
    3dbc:	20 f0       	brcs	.+8      	; 0x3dc6 <__udivmodsi4_ep>
    3dbe:	a2 1b       	sub	r26, r18
    3dc0:	b3 0b       	sbc	r27, r19
    3dc2:	e4 0b       	sbc	r30, r20
    3dc4:	f5 0b       	sbc	r31, r21

00003dc6 <__udivmodsi4_ep>:
    3dc6:	66 1f       	adc	r22, r22
    3dc8:	77 1f       	adc	r23, r23
    3dca:	88 1f       	adc	r24, r24
    3dcc:	99 1f       	adc	r25, r25
    3dce:	1a 94       	dec	r1
    3dd0:	69 f7       	brne	.-38     	; 0x3dac <__udivmodsi4_loop>
    3dd2:	60 95       	com	r22
    3dd4:	70 95       	com	r23
    3dd6:	80 95       	com	r24
    3dd8:	90 95       	com	r25
    3dda:	9b 01       	movw	r18, r22
    3ddc:	ac 01       	movw	r20, r24
    3dde:	bd 01       	movw	r22, r26
    3de0:	cf 01       	movw	r24, r30
    3de2:	08 95       	ret

00003de4 <__umulhisi3>:
    3de4:	a2 9f       	mul	r26, r18
    3de6:	b0 01       	movw	r22, r0
    3de8:	b3 9f       	mul	r27, r19
    3dea:	c0 01       	movw	r24, r0
    3dec:	a3 9f       	mul	r26, r19
    3dee:	70 0d       	add	r23, r0
    3df0:	81 1d       	adc	r24, r1
    3df2:	11 24       	eor	r1, r1
    3df4:	91 1d       	adc	r25, r1
    3df6:	b2 9f       	mul	r27, r18
    3df8:	70 0d       	add	r23, r0
    3dfa:	81 1d       	adc	r24, r1
    3dfc:	11 24       	eor	r1, r1
    3dfe:	91 1d       	adc	r25, r1
    3e00:	08 95       	ret

00003e02 <atol>:
    3e02:	1f 93       	push	r17
    3e04:	fc 01       	movw	r30, r24
    3e06:	99 27       	eor	r25, r25
    3e08:	88 27       	eor	r24, r24
    3e0a:	bc 01       	movw	r22, r24
    3e0c:	e8 94       	clt
    3e0e:	11 91       	ld	r17, Z+
    3e10:	10 32       	cpi	r17, 0x20	; 32
    3e12:	e9 f3       	breq	.-6      	; 0x3e0e <atol+0xc>
    3e14:	19 30       	cpi	r17, 0x09	; 9
    3e16:	10 f0       	brcs	.+4      	; 0x3e1c <atol+0x1a>
    3e18:	1e 30       	cpi	r17, 0x0E	; 14
    3e1a:	c8 f3       	brcs	.-14     	; 0x3e0e <atol+0xc>
    3e1c:	1b 32       	cpi	r17, 0x2B	; 43
    3e1e:	51 f0       	breq	.+20     	; 0x3e34 <atol+0x32>
    3e20:	1d 32       	cpi	r17, 0x2D	; 45
    3e22:	49 f4       	brne	.+18     	; 0x3e36 <atol+0x34>
    3e24:	68 94       	set
    3e26:	06 c0       	rjmp	.+12     	; 0x3e34 <atol+0x32>
    3e28:	0e 94 28 20 	call	0x4050	; 0x4050 <__mulsi_const_10>
    3e2c:	61 0f       	add	r22, r17
    3e2e:	71 1d       	adc	r23, r1
    3e30:	81 1d       	adc	r24, r1
    3e32:	91 1d       	adc	r25, r1
    3e34:	11 91       	ld	r17, Z+
    3e36:	10 53       	subi	r17, 0x30	; 48
    3e38:	1a 30       	cpi	r17, 0x0A	; 10
    3e3a:	b0 f3       	brcs	.-20     	; 0x3e28 <atol+0x26>
    3e3c:	3e f4       	brtc	.+14     	; 0x3e4c <atol+0x4a>
    3e3e:	90 95       	com	r25
    3e40:	80 95       	com	r24
    3e42:	70 95       	com	r23
    3e44:	61 95       	neg	r22
    3e46:	7f 4f       	sbci	r23, 0xFF	; 255
    3e48:	8f 4f       	sbci	r24, 0xFF	; 255
    3e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e4c:	1f 91       	pop	r17
    3e4e:	08 95       	ret

00003e50 <__ftoa_engine>:
    3e50:	28 30       	cpi	r18, 0x08	; 8
    3e52:	08 f0       	brcs	.+2      	; 0x3e56 <__ftoa_engine+0x6>
    3e54:	27 e0       	ldi	r18, 0x07	; 7
    3e56:	33 27       	eor	r19, r19
    3e58:	da 01       	movw	r26, r20
    3e5a:	99 0f       	add	r25, r25
    3e5c:	31 1d       	adc	r19, r1
    3e5e:	87 fd       	sbrc	r24, 7
    3e60:	91 60       	ori	r25, 0x01	; 1
    3e62:	00 96       	adiw	r24, 0x00	; 0
    3e64:	61 05       	cpc	r22, r1
    3e66:	71 05       	cpc	r23, r1
    3e68:	39 f4       	brne	.+14     	; 0x3e78 <__ftoa_engine+0x28>
    3e6a:	32 60       	ori	r19, 0x02	; 2
    3e6c:	2e 5f       	subi	r18, 0xFE	; 254
    3e6e:	3d 93       	st	X+, r19
    3e70:	30 e3       	ldi	r19, 0x30	; 48
    3e72:	2a 95       	dec	r18
    3e74:	e1 f7       	brne	.-8      	; 0x3e6e <__ftoa_engine+0x1e>
    3e76:	08 95       	ret
    3e78:	9f 3f       	cpi	r25, 0xFF	; 255
    3e7a:	30 f0       	brcs	.+12     	; 0x3e88 <__ftoa_engine+0x38>
    3e7c:	80 38       	cpi	r24, 0x80	; 128
    3e7e:	71 05       	cpc	r23, r1
    3e80:	61 05       	cpc	r22, r1
    3e82:	09 f0       	breq	.+2      	; 0x3e86 <__ftoa_engine+0x36>
    3e84:	3c 5f       	subi	r19, 0xFC	; 252
    3e86:	3c 5f       	subi	r19, 0xFC	; 252
    3e88:	3d 93       	st	X+, r19
    3e8a:	91 30       	cpi	r25, 0x01	; 1
    3e8c:	08 f0       	brcs	.+2      	; 0x3e90 <__ftoa_engine+0x40>
    3e8e:	80 68       	ori	r24, 0x80	; 128
    3e90:	91 1d       	adc	r25, r1
    3e92:	df 93       	push	r29
    3e94:	cf 93       	push	r28
    3e96:	1f 93       	push	r17
    3e98:	0f 93       	push	r16
    3e9a:	ff 92       	push	r15
    3e9c:	ef 92       	push	r14
    3e9e:	19 2f       	mov	r17, r25
    3ea0:	98 7f       	andi	r25, 0xF8	; 248
    3ea2:	96 95       	lsr	r25
    3ea4:	e9 2f       	mov	r30, r25
    3ea6:	96 95       	lsr	r25
    3ea8:	96 95       	lsr	r25
    3eaa:	e9 0f       	add	r30, r25
    3eac:	ff 27       	eor	r31, r31
    3eae:	ee 54       	subi	r30, 0x4E	; 78
    3eb0:	fe 4f       	sbci	r31, 0xFE	; 254
    3eb2:	99 27       	eor	r25, r25
    3eb4:	33 27       	eor	r19, r19
    3eb6:	ee 24       	eor	r14, r14
    3eb8:	ff 24       	eor	r15, r15
    3eba:	a7 01       	movw	r20, r14
    3ebc:	e7 01       	movw	r28, r14
    3ebe:	05 90       	lpm	r0, Z+
    3ec0:	08 94       	sec
    3ec2:	07 94       	ror	r0
    3ec4:	28 f4       	brcc	.+10     	; 0x3ed0 <__ftoa_engine+0x80>
    3ec6:	36 0f       	add	r19, r22
    3ec8:	e7 1e       	adc	r14, r23
    3eca:	f8 1e       	adc	r15, r24
    3ecc:	49 1f       	adc	r20, r25
    3ece:	51 1d       	adc	r21, r1
    3ed0:	66 0f       	add	r22, r22
    3ed2:	77 1f       	adc	r23, r23
    3ed4:	88 1f       	adc	r24, r24
    3ed6:	99 1f       	adc	r25, r25
    3ed8:	06 94       	lsr	r0
    3eda:	a1 f7       	brne	.-24     	; 0x3ec4 <__ftoa_engine+0x74>
    3edc:	05 90       	lpm	r0, Z+
    3ede:	07 94       	ror	r0
    3ee0:	28 f4       	brcc	.+10     	; 0x3eec <__ftoa_engine+0x9c>
    3ee2:	e7 0e       	add	r14, r23
    3ee4:	f8 1e       	adc	r15, r24
    3ee6:	49 1f       	adc	r20, r25
    3ee8:	56 1f       	adc	r21, r22
    3eea:	c1 1d       	adc	r28, r1
    3eec:	77 0f       	add	r23, r23
    3eee:	88 1f       	adc	r24, r24
    3ef0:	99 1f       	adc	r25, r25
    3ef2:	66 1f       	adc	r22, r22
    3ef4:	06 94       	lsr	r0
    3ef6:	a1 f7       	brne	.-24     	; 0x3ee0 <__ftoa_engine+0x90>
    3ef8:	05 90       	lpm	r0, Z+
    3efa:	07 94       	ror	r0
    3efc:	28 f4       	brcc	.+10     	; 0x3f08 <__ftoa_engine+0xb8>
    3efe:	f8 0e       	add	r15, r24
    3f00:	49 1f       	adc	r20, r25
    3f02:	56 1f       	adc	r21, r22
    3f04:	c7 1f       	adc	r28, r23
    3f06:	d1 1d       	adc	r29, r1
    3f08:	88 0f       	add	r24, r24
    3f0a:	99 1f       	adc	r25, r25
    3f0c:	66 1f       	adc	r22, r22
    3f0e:	77 1f       	adc	r23, r23
    3f10:	06 94       	lsr	r0
    3f12:	a1 f7       	brne	.-24     	; 0x3efc <__ftoa_engine+0xac>
    3f14:	05 90       	lpm	r0, Z+
    3f16:	07 94       	ror	r0
    3f18:	20 f4       	brcc	.+8      	; 0x3f22 <__ftoa_engine+0xd2>
    3f1a:	49 0f       	add	r20, r25
    3f1c:	56 1f       	adc	r21, r22
    3f1e:	c7 1f       	adc	r28, r23
    3f20:	d8 1f       	adc	r29, r24
    3f22:	99 0f       	add	r25, r25
    3f24:	66 1f       	adc	r22, r22
    3f26:	77 1f       	adc	r23, r23
    3f28:	88 1f       	adc	r24, r24
    3f2a:	06 94       	lsr	r0
    3f2c:	a9 f7       	brne	.-22     	; 0x3f18 <__ftoa_engine+0xc8>
    3f2e:	84 91       	lpm	r24, Z
    3f30:	10 95       	com	r17
    3f32:	17 70       	andi	r17, 0x07	; 7
    3f34:	41 f0       	breq	.+16     	; 0x3f46 <__ftoa_engine+0xf6>
    3f36:	d6 95       	lsr	r29
    3f38:	c7 95       	ror	r28
    3f3a:	57 95       	ror	r21
    3f3c:	47 95       	ror	r20
    3f3e:	f7 94       	ror	r15
    3f40:	e7 94       	ror	r14
    3f42:	1a 95       	dec	r17
    3f44:	c1 f7       	brne	.-16     	; 0x3f36 <__ftoa_engine+0xe6>
    3f46:	e8 e5       	ldi	r30, 0x58	; 88
    3f48:	f1 e0       	ldi	r31, 0x01	; 1
    3f4a:	68 94       	set
    3f4c:	15 90       	lpm	r1, Z+
    3f4e:	15 91       	lpm	r17, Z+
    3f50:	35 91       	lpm	r19, Z+
    3f52:	65 91       	lpm	r22, Z+
    3f54:	95 91       	lpm	r25, Z+
    3f56:	05 90       	lpm	r0, Z+
    3f58:	7f e2       	ldi	r23, 0x2F	; 47
    3f5a:	73 95       	inc	r23
    3f5c:	e1 18       	sub	r14, r1
    3f5e:	f1 0a       	sbc	r15, r17
    3f60:	43 0b       	sbc	r20, r19
    3f62:	56 0b       	sbc	r21, r22
    3f64:	c9 0b       	sbc	r28, r25
    3f66:	d0 09       	sbc	r29, r0
    3f68:	c0 f7       	brcc	.-16     	; 0x3f5a <__ftoa_engine+0x10a>
    3f6a:	e1 0c       	add	r14, r1
    3f6c:	f1 1e       	adc	r15, r17
    3f6e:	43 1f       	adc	r20, r19
    3f70:	56 1f       	adc	r21, r22
    3f72:	c9 1f       	adc	r28, r25
    3f74:	d0 1d       	adc	r29, r0
    3f76:	7e f4       	brtc	.+30     	; 0x3f96 <__ftoa_engine+0x146>
    3f78:	70 33       	cpi	r23, 0x30	; 48
    3f7a:	11 f4       	brne	.+4      	; 0x3f80 <__ftoa_engine+0x130>
    3f7c:	8a 95       	dec	r24
    3f7e:	e6 cf       	rjmp	.-52     	; 0x3f4c <__ftoa_engine+0xfc>
    3f80:	e8 94       	clt
    3f82:	01 50       	subi	r16, 0x01	; 1
    3f84:	30 f0       	brcs	.+12     	; 0x3f92 <__ftoa_engine+0x142>
    3f86:	08 0f       	add	r16, r24
    3f88:	0a f4       	brpl	.+2      	; 0x3f8c <__ftoa_engine+0x13c>
    3f8a:	00 27       	eor	r16, r16
    3f8c:	02 17       	cp	r16, r18
    3f8e:	08 f4       	brcc	.+2      	; 0x3f92 <__ftoa_engine+0x142>
    3f90:	20 2f       	mov	r18, r16
    3f92:	23 95       	inc	r18
    3f94:	02 2f       	mov	r16, r18
    3f96:	7a 33       	cpi	r23, 0x3A	; 58
    3f98:	28 f0       	brcs	.+10     	; 0x3fa4 <__ftoa_engine+0x154>
    3f9a:	79 e3       	ldi	r23, 0x39	; 57
    3f9c:	7d 93       	st	X+, r23
    3f9e:	2a 95       	dec	r18
    3fa0:	e9 f7       	brne	.-6      	; 0x3f9c <__ftoa_engine+0x14c>
    3fa2:	10 c0       	rjmp	.+32     	; 0x3fc4 <__ftoa_engine+0x174>
    3fa4:	7d 93       	st	X+, r23
    3fa6:	2a 95       	dec	r18
    3fa8:	89 f6       	brne	.-94     	; 0x3f4c <__ftoa_engine+0xfc>
    3faa:	06 94       	lsr	r0
    3fac:	97 95       	ror	r25
    3fae:	67 95       	ror	r22
    3fb0:	37 95       	ror	r19
    3fb2:	17 95       	ror	r17
    3fb4:	17 94       	ror	r1
    3fb6:	e1 18       	sub	r14, r1
    3fb8:	f1 0a       	sbc	r15, r17
    3fba:	43 0b       	sbc	r20, r19
    3fbc:	56 0b       	sbc	r21, r22
    3fbe:	c9 0b       	sbc	r28, r25
    3fc0:	d0 09       	sbc	r29, r0
    3fc2:	98 f0       	brcs	.+38     	; 0x3fea <__ftoa_engine+0x19a>
    3fc4:	23 95       	inc	r18
    3fc6:	7e 91       	ld	r23, -X
    3fc8:	73 95       	inc	r23
    3fca:	7a 33       	cpi	r23, 0x3A	; 58
    3fcc:	08 f0       	brcs	.+2      	; 0x3fd0 <__ftoa_engine+0x180>
    3fce:	70 e3       	ldi	r23, 0x30	; 48
    3fd0:	7c 93       	st	X, r23
    3fd2:	20 13       	cpse	r18, r16
    3fd4:	b8 f7       	brcc	.-18     	; 0x3fc4 <__ftoa_engine+0x174>
    3fd6:	7e 91       	ld	r23, -X
    3fd8:	70 61       	ori	r23, 0x10	; 16
    3fda:	7d 93       	st	X+, r23
    3fdc:	30 f0       	brcs	.+12     	; 0x3fea <__ftoa_engine+0x19a>
    3fde:	83 95       	inc	r24
    3fe0:	71 e3       	ldi	r23, 0x31	; 49
    3fe2:	7d 93       	st	X+, r23
    3fe4:	70 e3       	ldi	r23, 0x30	; 48
    3fe6:	2a 95       	dec	r18
    3fe8:	e1 f7       	brne	.-8      	; 0x3fe2 <__ftoa_engine+0x192>
    3fea:	11 24       	eor	r1, r1
    3fec:	ef 90       	pop	r14
    3fee:	ff 90       	pop	r15
    3ff0:	0f 91       	pop	r16
    3ff2:	1f 91       	pop	r17
    3ff4:	cf 91       	pop	r28
    3ff6:	df 91       	pop	r29
    3ff8:	99 27       	eor	r25, r25
    3ffa:	87 fd       	sbrc	r24, 7
    3ffc:	90 95       	com	r25
    3ffe:	08 95       	ret

00004000 <strnlen_P>:
    4000:	fc 01       	movw	r30, r24
    4002:	05 90       	lpm	r0, Z+
    4004:	61 50       	subi	r22, 0x01	; 1
    4006:	70 40       	sbci	r23, 0x00	; 0
    4008:	01 10       	cpse	r0, r1
    400a:	d8 f7       	brcc	.-10     	; 0x4002 <strnlen_P+0x2>
    400c:	80 95       	com	r24
    400e:	90 95       	com	r25
    4010:	8e 0f       	add	r24, r30
    4012:	9f 1f       	adc	r25, r31
    4014:	08 95       	ret

00004016 <strcat>:
    4016:	fb 01       	movw	r30, r22
    4018:	dc 01       	movw	r26, r24
    401a:	0d 90       	ld	r0, X+
    401c:	00 20       	and	r0, r0
    401e:	e9 f7       	brne	.-6      	; 0x401a <strcat+0x4>
    4020:	11 97       	sbiw	r26, 0x01	; 1
    4022:	01 90       	ld	r0, Z+
    4024:	0d 92       	st	X+, r0
    4026:	00 20       	and	r0, r0
    4028:	e1 f7       	brne	.-8      	; 0x4022 <strcat+0xc>
    402a:	08 95       	ret

0000402c <strcpy>:
    402c:	fb 01       	movw	r30, r22
    402e:	dc 01       	movw	r26, r24
    4030:	01 90       	ld	r0, Z+
    4032:	0d 92       	st	X+, r0
    4034:	00 20       	and	r0, r0
    4036:	e1 f7       	brne	.-8      	; 0x4030 <strcpy+0x4>
    4038:	08 95       	ret

0000403a <strnlen>:
    403a:	fc 01       	movw	r30, r24
    403c:	61 50       	subi	r22, 0x01	; 1
    403e:	70 40       	sbci	r23, 0x00	; 0
    4040:	01 90       	ld	r0, Z+
    4042:	01 10       	cpse	r0, r1
    4044:	d8 f7       	brcc	.-10     	; 0x403c <strnlen+0x2>
    4046:	80 95       	com	r24
    4048:	90 95       	com	r25
    404a:	8e 0f       	add	r24, r30
    404c:	9f 1f       	adc	r25, r31
    404e:	08 95       	ret

00004050 <__mulsi_const_10>:
    4050:	59 2f       	mov	r21, r25
    4052:	48 2f       	mov	r20, r24
    4054:	37 2f       	mov	r19, r23
    4056:	26 2f       	mov	r18, r22
    4058:	66 0f       	add	r22, r22
    405a:	77 1f       	adc	r23, r23
    405c:	88 1f       	adc	r24, r24
    405e:	99 1f       	adc	r25, r25
    4060:	66 0f       	add	r22, r22
    4062:	77 1f       	adc	r23, r23
    4064:	88 1f       	adc	r24, r24
    4066:	99 1f       	adc	r25, r25
    4068:	62 0f       	add	r22, r18
    406a:	73 1f       	adc	r23, r19
    406c:	84 1f       	adc	r24, r20
    406e:	95 1f       	adc	r25, r21
    4070:	66 0f       	add	r22, r22
    4072:	77 1f       	adc	r23, r23
    4074:	88 1f       	adc	r24, r24
    4076:	99 1f       	adc	r25, r25
    4078:	08 95       	ret

0000407a <fputc>:
    407a:	0f 93       	push	r16
    407c:	1f 93       	push	r17
    407e:	cf 93       	push	r28
    4080:	df 93       	push	r29
    4082:	fb 01       	movw	r30, r22
    4084:	23 81       	ldd	r18, Z+3	; 0x03
    4086:	21 fd       	sbrc	r18, 1
    4088:	03 c0       	rjmp	.+6      	; 0x4090 <fputc+0x16>
    408a:	8f ef       	ldi	r24, 0xFF	; 255
    408c:	9f ef       	ldi	r25, 0xFF	; 255
    408e:	2c c0       	rjmp	.+88     	; 0x40e8 <fputc+0x6e>
    4090:	22 ff       	sbrs	r18, 2
    4092:	16 c0       	rjmp	.+44     	; 0x40c0 <fputc+0x46>
    4094:	46 81       	ldd	r20, Z+6	; 0x06
    4096:	57 81       	ldd	r21, Z+7	; 0x07
    4098:	24 81       	ldd	r18, Z+4	; 0x04
    409a:	35 81       	ldd	r19, Z+5	; 0x05
    409c:	42 17       	cp	r20, r18
    409e:	53 07       	cpc	r21, r19
    40a0:	44 f4       	brge	.+16     	; 0x40b2 <fputc+0x38>
    40a2:	a0 81       	ld	r26, Z
    40a4:	b1 81       	ldd	r27, Z+1	; 0x01
    40a6:	9d 01       	movw	r18, r26
    40a8:	2f 5f       	subi	r18, 0xFF	; 255
    40aa:	3f 4f       	sbci	r19, 0xFF	; 255
    40ac:	20 83       	st	Z, r18
    40ae:	31 83       	std	Z+1, r19	; 0x01
    40b0:	8c 93       	st	X, r24
    40b2:	26 81       	ldd	r18, Z+6	; 0x06
    40b4:	37 81       	ldd	r19, Z+7	; 0x07
    40b6:	2f 5f       	subi	r18, 0xFF	; 255
    40b8:	3f 4f       	sbci	r19, 0xFF	; 255
    40ba:	26 83       	std	Z+6, r18	; 0x06
    40bc:	37 83       	std	Z+7, r19	; 0x07
    40be:	14 c0       	rjmp	.+40     	; 0x40e8 <fputc+0x6e>
    40c0:	8b 01       	movw	r16, r22
    40c2:	ec 01       	movw	r28, r24
    40c4:	fb 01       	movw	r30, r22
    40c6:	00 84       	ldd	r0, Z+8	; 0x08
    40c8:	f1 85       	ldd	r31, Z+9	; 0x09
    40ca:	e0 2d       	mov	r30, r0
    40cc:	09 95       	icall
    40ce:	89 2b       	or	r24, r25
    40d0:	e1 f6       	brne	.-72     	; 0x408a <fputc+0x10>
    40d2:	d8 01       	movw	r26, r16
    40d4:	16 96       	adiw	r26, 0x06	; 6
    40d6:	8d 91       	ld	r24, X+
    40d8:	9c 91       	ld	r25, X
    40da:	17 97       	sbiw	r26, 0x07	; 7
    40dc:	01 96       	adiw	r24, 0x01	; 1
    40de:	16 96       	adiw	r26, 0x06	; 6
    40e0:	8d 93       	st	X+, r24
    40e2:	9c 93       	st	X, r25
    40e4:	17 97       	sbiw	r26, 0x07	; 7
    40e6:	ce 01       	movw	r24, r28
    40e8:	df 91       	pop	r29
    40ea:	cf 91       	pop	r28
    40ec:	1f 91       	pop	r17
    40ee:	0f 91       	pop	r16
    40f0:	08 95       	ret

000040f2 <sprintf>:
    40f2:	ae e0       	ldi	r26, 0x0E	; 14
    40f4:	b0 e0       	ldi	r27, 0x00	; 0
    40f6:	ef e7       	ldi	r30, 0x7F	; 127
    40f8:	f0 e2       	ldi	r31, 0x20	; 32
    40fa:	0c 94 99 1e 	jmp	0x3d32	; 0x3d32 <__prologue_saves__+0x1c>
    40fe:	0d 89       	ldd	r16, Y+21	; 0x15
    4100:	1e 89       	ldd	r17, Y+22	; 0x16
    4102:	86 e0       	ldi	r24, 0x06	; 6
    4104:	8c 83       	std	Y+4, r24	; 0x04
    4106:	09 83       	std	Y+1, r16	; 0x01
    4108:	1a 83       	std	Y+2, r17	; 0x02
    410a:	8f ef       	ldi	r24, 0xFF	; 255
    410c:	9f e7       	ldi	r25, 0x7F	; 127
    410e:	8d 83       	std	Y+5, r24	; 0x05
    4110:	9e 83       	std	Y+6, r25	; 0x06
    4112:	ae 01       	movw	r20, r28
    4114:	47 5e       	subi	r20, 0xE7	; 231
    4116:	5f 4f       	sbci	r21, 0xFF	; 255
    4118:	6f 89       	ldd	r22, Y+23	; 0x17
    411a:	78 8d       	ldd	r23, Y+24	; 0x18
    411c:	ce 01       	movw	r24, r28
    411e:	01 96       	adiw	r24, 0x01	; 1
    4120:	0e 94 ca 1a 	call	0x3594	; 0x3594 <vfprintf>
    4124:	ef 81       	ldd	r30, Y+7	; 0x07
    4126:	f8 85       	ldd	r31, Y+8	; 0x08
    4128:	e0 0f       	add	r30, r16
    412a:	f1 1f       	adc	r31, r17
    412c:	10 82       	st	Z, r1
    412e:	2e 96       	adiw	r28, 0x0e	; 14
    4130:	e4 e0       	ldi	r30, 0x04	; 4
    4132:	0c 94 b2 1e 	jmp	0x3d64	; 0x3d64 <__epilogue_restores__+0x1c>

00004136 <__ultoa_invert>:
    4136:	fa 01       	movw	r30, r20
    4138:	aa 27       	eor	r26, r26
    413a:	28 30       	cpi	r18, 0x08	; 8
    413c:	51 f1       	breq	.+84     	; 0x4192 <__ultoa_invert+0x5c>
    413e:	20 31       	cpi	r18, 0x10	; 16
    4140:	81 f1       	breq	.+96     	; 0x41a2 <__ultoa_invert+0x6c>
    4142:	e8 94       	clt
    4144:	6f 93       	push	r22
    4146:	6e 7f       	andi	r22, 0xFE	; 254
    4148:	6e 5f       	subi	r22, 0xFE	; 254
    414a:	7f 4f       	sbci	r23, 0xFF	; 255
    414c:	8f 4f       	sbci	r24, 0xFF	; 255
    414e:	9f 4f       	sbci	r25, 0xFF	; 255
    4150:	af 4f       	sbci	r26, 0xFF	; 255
    4152:	b1 e0       	ldi	r27, 0x01	; 1
    4154:	3e d0       	rcall	.+124    	; 0x41d2 <__ultoa_invert+0x9c>
    4156:	b4 e0       	ldi	r27, 0x04	; 4
    4158:	3c d0       	rcall	.+120    	; 0x41d2 <__ultoa_invert+0x9c>
    415a:	67 0f       	add	r22, r23
    415c:	78 1f       	adc	r23, r24
    415e:	89 1f       	adc	r24, r25
    4160:	9a 1f       	adc	r25, r26
    4162:	a1 1d       	adc	r26, r1
    4164:	68 0f       	add	r22, r24
    4166:	79 1f       	adc	r23, r25
    4168:	8a 1f       	adc	r24, r26
    416a:	91 1d       	adc	r25, r1
    416c:	a1 1d       	adc	r26, r1
    416e:	6a 0f       	add	r22, r26
    4170:	71 1d       	adc	r23, r1
    4172:	81 1d       	adc	r24, r1
    4174:	91 1d       	adc	r25, r1
    4176:	a1 1d       	adc	r26, r1
    4178:	20 d0       	rcall	.+64     	; 0x41ba <__ultoa_invert+0x84>
    417a:	09 f4       	brne	.+2      	; 0x417e <__ultoa_invert+0x48>
    417c:	68 94       	set
    417e:	3f 91       	pop	r19
    4180:	2a e0       	ldi	r18, 0x0A	; 10
    4182:	26 9f       	mul	r18, r22
    4184:	11 24       	eor	r1, r1
    4186:	30 19       	sub	r19, r0
    4188:	30 5d       	subi	r19, 0xD0	; 208
    418a:	31 93       	st	Z+, r19
    418c:	de f6       	brtc	.-74     	; 0x4144 <__ultoa_invert+0xe>
    418e:	cf 01       	movw	r24, r30
    4190:	08 95       	ret
    4192:	46 2f       	mov	r20, r22
    4194:	47 70       	andi	r20, 0x07	; 7
    4196:	40 5d       	subi	r20, 0xD0	; 208
    4198:	41 93       	st	Z+, r20
    419a:	b3 e0       	ldi	r27, 0x03	; 3
    419c:	0f d0       	rcall	.+30     	; 0x41bc <__ultoa_invert+0x86>
    419e:	c9 f7       	brne	.-14     	; 0x4192 <__ultoa_invert+0x5c>
    41a0:	f6 cf       	rjmp	.-20     	; 0x418e <__ultoa_invert+0x58>
    41a2:	46 2f       	mov	r20, r22
    41a4:	4f 70       	andi	r20, 0x0F	; 15
    41a6:	40 5d       	subi	r20, 0xD0	; 208
    41a8:	4a 33       	cpi	r20, 0x3A	; 58
    41aa:	18 f0       	brcs	.+6      	; 0x41b2 <__ultoa_invert+0x7c>
    41ac:	49 5d       	subi	r20, 0xD9	; 217
    41ae:	31 fd       	sbrc	r19, 1
    41b0:	40 52       	subi	r20, 0x20	; 32
    41b2:	41 93       	st	Z+, r20
    41b4:	02 d0       	rcall	.+4      	; 0x41ba <__ultoa_invert+0x84>
    41b6:	a9 f7       	brne	.-22     	; 0x41a2 <__ultoa_invert+0x6c>
    41b8:	ea cf       	rjmp	.-44     	; 0x418e <__ultoa_invert+0x58>
    41ba:	b4 e0       	ldi	r27, 0x04	; 4
    41bc:	a6 95       	lsr	r26
    41be:	97 95       	ror	r25
    41c0:	87 95       	ror	r24
    41c2:	77 95       	ror	r23
    41c4:	67 95       	ror	r22
    41c6:	ba 95       	dec	r27
    41c8:	c9 f7       	brne	.-14     	; 0x41bc <__ultoa_invert+0x86>
    41ca:	00 97       	sbiw	r24, 0x00	; 0
    41cc:	61 05       	cpc	r22, r1
    41ce:	71 05       	cpc	r23, r1
    41d0:	08 95       	ret
    41d2:	9b 01       	movw	r18, r22
    41d4:	ac 01       	movw	r20, r24
    41d6:	0a 2e       	mov	r0, r26
    41d8:	06 94       	lsr	r0
    41da:	57 95       	ror	r21
    41dc:	47 95       	ror	r20
    41de:	37 95       	ror	r19
    41e0:	27 95       	ror	r18
    41e2:	ba 95       	dec	r27
    41e4:	c9 f7       	brne	.-14     	; 0x41d8 <__ultoa_invert+0xa2>
    41e6:	62 0f       	add	r22, r18
    41e8:	73 1f       	adc	r23, r19
    41ea:	84 1f       	adc	r24, r20
    41ec:	95 1f       	adc	r25, r21
    41ee:	a0 1d       	adc	r26, r0
    41f0:	08 95       	ret

000041f2 <eeprom_read_block>:
    41f2:	60 50       	subi	r22, 0x00	; 0
    41f4:	7c 4e       	sbci	r23, 0xEC	; 236
    41f6:	0c 94 34 21 	jmp	0x4268	; 0x4268 <memcpy>

000041fa <eeprom_update_block>:
    41fa:	dc 01       	movw	r26, r24
    41fc:	a4 0f       	add	r26, r20
    41fe:	b5 1f       	adc	r27, r21
    4200:	41 50       	subi	r20, 0x01	; 1
    4202:	50 40       	sbci	r21, 0x00	; 0
    4204:	48 f0       	brcs	.+18     	; 0x4218 <eeprom_update_block+0x1e>
    4206:	cb 01       	movw	r24, r22
    4208:	84 0f       	add	r24, r20
    420a:	95 1f       	adc	r25, r21
    420c:	2e 91       	ld	r18, -X
    420e:	0e 94 0e 21 	call	0x421c	; 0x421c <eeprom_update_r18>
    4212:	41 50       	subi	r20, 0x01	; 1
    4214:	50 40       	sbci	r21, 0x00	; 0
    4216:	d0 f7       	brcc	.-12     	; 0x420c <eeprom_update_block+0x12>
    4218:	08 95       	ret

0000421a <eeprom_update_byte>:
    421a:	26 2f       	mov	r18, r22

0000421c <eeprom_update_r18>:
    421c:	0e 94 30 21 	call	0x4260	; 0x4260 <eeprom_mapen>
    4220:	00 80       	ld	r0, Z
    4222:	02 16       	cp	r0, r18
    4224:	19 f0       	breq	.+6      	; 0x422c <eeprom_update_r18+0x10>
    4226:	0e 94 19 21 	call	0x4232	; 0x4232 <eeprom_write_r18>
    422a:	01 97       	sbiw	r24, 0x01	; 1
    422c:	01 97       	sbiw	r24, 0x01	; 1
    422e:	08 95       	ret

00004230 <eeprom_write_byte>:
    4230:	26 2f       	mov	r18, r22

00004232 <eeprom_write_r18>:
    4232:	af 93       	push	r26
    4234:	bf 93       	push	r27
    4236:	e0 e0       	ldi	r30, 0x00	; 0
    4238:	f0 e1       	ldi	r31, 0x10	; 16
    423a:	32 81       	ldd	r19, Z+2	; 0x02
    423c:	31 fd       	sbrc	r19, 1
    423e:	fd cf       	rjmp	.-6      	; 0x423a <eeprom_write_r18+0x8>
    4240:	dc 01       	movw	r26, r24
    4242:	a0 50       	subi	r26, 0x00	; 0
    4244:	bc 4e       	sbci	r27, 0xEC	; 236
    4246:	2c 93       	st	X, r18
    4248:	2d e9       	ldi	r18, 0x9D	; 157
    424a:	24 bf       	out	0x34, r18	; 52
    424c:	23 e0       	ldi	r18, 0x03	; 3
    424e:	20 83       	st	Z, r18
    4250:	01 96       	adiw	r24, 0x01	; 1
    4252:	bf 91       	pop	r27
    4254:	af 91       	pop	r26
    4256:	08 95       	ret

00004258 <eeprom_read_byte>:
    4258:	03 d0       	rcall	.+6      	; 0x4260 <eeprom_mapen>
    425a:	80 81       	ld	r24, Z
    425c:	99 27       	eor	r25, r25
    425e:	08 95       	ret

00004260 <eeprom_mapen>:
    4260:	fc 01       	movw	r30, r24
    4262:	e0 50       	subi	r30, 0x00	; 0
    4264:	fc 4e       	sbci	r31, 0xEC	; 236
    4266:	08 95       	ret

00004268 <memcpy>:
    4268:	fb 01       	movw	r30, r22
    426a:	dc 01       	movw	r26, r24
    426c:	02 c0       	rjmp	.+4      	; 0x4272 <memcpy+0xa>
    426e:	01 90       	ld	r0, Z+
    4270:	0d 92       	st	X+, r0
    4272:	41 50       	subi	r20, 0x01	; 1
    4274:	50 40       	sbci	r21, 0x00	; 0
    4276:	d8 f7       	brcc	.-10     	; 0x426e <memcpy+0x6>
    4278:	08 95       	ret

0000427a <_exit>:
    427a:	f8 94       	cli

0000427c <__stop_program>:
    427c:	ff cf       	rjmp	.-2      	; 0x427c <__stop_program>
