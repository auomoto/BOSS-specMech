
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  00003d1b  00003dcf  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003aea  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000231  00007aea  00003aea  00003b9e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000052c  00802802  00802802  00003dd1  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00003dd1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e30  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000560  00000000  00000000  00003e70  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008e24  00000000  00000000  000043d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004006  00000000  00000000  0000d1f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003815  00000000  00000000  000111fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c20  00000000  00000000  00014a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002073  00000000  00000000  00015630  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000033f9  00000000  00000000  000176a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000300  00000000  00000000  0001aa9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 06 01 	jmp	0x20c	; 0x20c <__ctors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       c:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__vector_3>
      10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      28:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      2c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      38:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      40:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      44:	0c 94 5f 14 	jmp	0x28be	; 0x28be <__vector_17>
      48:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__vector_18>
      4c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      50:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__vector_20>
      54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      60:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      68:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__vector_26>
      6c:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <__vector_27>
      70:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      74:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__vector_29>
      78:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      7c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      80:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      84:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      88:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      8c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      90:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      94:	0c 94 26 15 	jmp	0x2a4c	; 0x2a4c <__vector_37>
      98:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__vector_38>
      9c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a0:	3c 0e       	add	r3, r28
      a2:	70 12       	cpse	r7, r16
      a4:	70 12       	cpse	r7, r16
      a6:	70 12       	cpse	r7, r16
      a8:	70 12       	cpse	r7, r16
      aa:	70 12       	cpse	r7, r16
      ac:	70 12       	cpse	r7, r16
      ae:	70 12       	cpse	r7, r16
      b0:	70 12       	cpse	r7, r16
      b2:	70 12       	cpse	r7, r16
      b4:	70 12       	cpse	r7, r16
      b6:	70 12       	cpse	r7, r16
      b8:	70 12       	cpse	r7, r16
      ba:	70 12       	cpse	r7, r16
      bc:	70 12       	cpse	r7, r16
      be:	70 12       	cpse	r7, r16
      c0:	70 12       	cpse	r7, r16
      c2:	70 12       	cpse	r7, r16
      c4:	70 12       	cpse	r7, r16
      c6:	70 12       	cpse	r7, r16
      c8:	1d 12       	cpse	r1, r29
      ca:	70 12       	cpse	r7, r16
      cc:	70 12       	cpse	r7, r16
      ce:	70 12       	cpse	r7, r16
      d0:	70 12       	cpse	r7, r16
      d2:	70 12       	cpse	r7, r16
      d4:	70 12       	cpse	r7, r16
      d6:	70 12       	cpse	r7, r16
      d8:	70 12       	cpse	r7, r16
      da:	70 12       	cpse	r7, r16
      dc:	70 12       	cpse	r7, r16
      de:	70 12       	cpse	r7, r16
      e0:	70 12       	cpse	r7, r16
      e2:	70 12       	cpse	r7, r16
      e4:	70 12       	cpse	r7, r16
      e6:	87 0e       	add	r8, r23
      e8:	70 12       	cpse	r7, r16
      ea:	70 12       	cpse	r7, r16
      ec:	70 12       	cpse	r7, r16
      ee:	70 12       	cpse	r7, r16
      f0:	70 12       	cpse	r7, r16
      f2:	70 12       	cpse	r7, r16
      f4:	70 12       	cpse	r7, r16
      f6:	70 12       	cpse	r7, r16
      f8:	70 12       	cpse	r7, r16
      fa:	c0 0f       	add	r28, r16
      fc:	af 10       	cpse	r10, r15
      fe:	70 12       	cpse	r7, r16
     100:	70 12       	cpse	r7, r16
     102:	70 12       	cpse	r7, r16
     104:	4e 11       	cpse	r20, r14
     106:	70 12       	cpse	r7, r16
     108:	ae 11       	cpse	r26, r14

0000010a <__trampolines_end>:
     10a:	6e 61       	ori	r22, 0x1E	; 30
     10c:	6e 00       	.word	0x006e	; ????

0000010e <__c.2332>:
     10e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     11e:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     12e:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     13e:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     14e:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     15e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     16e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     17e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     18e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     19e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1ae:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1be:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1ce:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1de:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1ee:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1fe:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000020c <__ctors_end>:
     20c:	11 24       	eor	r1, r1
     20e:	1f be       	out	0x3f, r1	; 63
     210:	cf ef       	ldi	r28, 0xFF	; 255
     212:	cd bf       	out	0x3d, r28	; 61
     214:	df e3       	ldi	r29, 0x3F	; 63
     216:	de bf       	out	0x3e, r29	; 62

00000218 <__do_copy_data>:
     218:	18 e2       	ldi	r17, 0x28	; 40
     21a:	a0 e0       	ldi	r26, 0x00	; 0
     21c:	b8 e2       	ldi	r27, 0x28	; 40
     21e:	eb e1       	ldi	r30, 0x1B	; 27
     220:	fd e3       	ldi	r31, 0x3D	; 61
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x10>
     224:	05 90       	lpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a2 30       	cpi	r26, 0x02	; 2
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0xc>

0000022e <__do_clear_bss>:
     22e:	2d e2       	ldi	r18, 0x2D	; 45
     230:	a2 e0       	ldi	r26, 0x02	; 2
     232:	b8 e2       	ldi	r27, 0x28	; 40
     234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
     236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
     238:	ae 32       	cpi	r26, 0x2E	; 46
     23a:	b2 07       	cpc	r27, r18
     23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>
     23e:	0e 94 b5 07 	call	0xf6a	; 0xf6a <main>
     242:	0c 94 73 1d 	jmp	0x3ae6	; 0x3ae6 <_exit>

00000246 <__bad_interrupt>:
     246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
float read_AD590(uint8_t sensor)
{
     24a:	cf 92       	push	r12
     24c:	df 92       	push	r13
     24e:	ef 92       	push	r14
     250:	ff 92       	push	r15
     252:	cf 93       	push	r28

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     254:	81 30       	cpi	r24, 0x01	; 1
     256:	c9 f0       	breq	.+50     	; 0x28a <read_AD590+0x40>
     258:	18 f0       	brcs	.+6      	; 0x260 <read_AD590+0x16>
     25a:	82 30       	cpi	r24, 0x02	; 2
     25c:	61 f0       	breq	.+24     	; 0x276 <read_AD590+0x2c>
     25e:	10 c0       	rjmp	.+32     	; 0x280 <read_AD590+0x36>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     260:	0f 2e       	mov	r0, r31
     262:	f3 e3       	ldi	r31, 0x33	; 51
     264:	cf 2e       	mov	r12, r31
     266:	dc 2c       	mov	r13, r12
     268:	f3 ef       	ldi	r31, 0xF3	; 243
     26a:	ef 2e       	mov	r14, r31
     26c:	f0 e4       	ldi	r31, 0x40	; 64
     26e:	ff 2e       	mov	r15, r31
     270:	f0 2d       	mov	r31, r0
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     272:	c1 e0       	ldi	r28, 0x01	; 1
     274:	0e c0       	rjmp	.+28     	; 0x292 <read_AD590+0x48>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     276:	c1 2c       	mov	r12, r1
     278:	d1 2c       	mov	r13, r1
     27a:	76 01       	movw	r14, r12
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     27c:	c0 e1       	ldi	r28, 0x10	; 16
			offset = 0.0;
			break;
     27e:	09 c0       	rjmp	.+18     	; 0x292 <read_AD590+0x48>
{

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
     280:	c1 2c       	mov	r12, r1
     282:	d1 2c       	mov	r13, r1
     284:	76 01       	movw	r14, r12
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     286:	c0 e0       	ldi	r28, 0x00	; 0
			break;
     288:	04 c0       	rjmp	.+8      	; 0x292 <read_AD590+0x48>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     28a:	c1 2c       	mov	r12, r1
     28c:	d1 2c       	mov	r13, r1
     28e:	76 01       	movw	r14, r12
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     290:	c4 e0       	ldi	r28, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	66 e0       	ldi	r22, 0x06	; 6
     296:	87 e2       	ldi	r24, 0x27	; 39
     298:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     29c:	4c 2f       	mov	r20, r28
     29e:	40 95       	com	r20
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	87 e2       	ldi	r24, 0x27	; 39
     2a4:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     2a8:	4c 2f       	mov	r20, r28
     2aa:	6a e0       	ldi	r22, 0x0A	; 10
     2ac:	87 e2       	ldi	r24, 0x27	; 39
     2ae:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2b2:	86 e1       	ldi	r24, 0x16	; 22
     2b4:	8a 95       	dec	r24
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <read_AD590+0x6a>
     2b8:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	voltage = read_ADS1115(ADC_TE, PGA0512, AIN3, DR128);
     2ba:	20 e8       	ldi	r18, 0x80	; 128
     2bc:	40 e7       	ldi	r20, 0x70	; 112
     2be:	68 e0       	ldi	r22, 0x08	; 8
     2c0:	88 e4       	ldi	r24, 0x48	; 72
     2c2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_ADS1115>
	temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	4a e7       	ldi	r20, 0x7A	; 122
     2cc:	54 e4       	ldi	r21, 0x44	; 68
     2ce:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__mulsf3>
     2d2:	23 e3       	ldi	r18, 0x33	; 51
     2d4:	33 e9       	ldi	r19, 0x93	; 147
     2d6:	48 e8       	ldi	r20, 0x88	; 136
     2d8:	53 e4       	ldi	r21, 0x43	; 67
     2da:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__subsf3>
     2de:	9b 01       	movw	r18, r22
     2e0:	ac 01       	movw	r20, r24
     2e2:	c7 01       	movw	r24, r14
     2e4:	b6 01       	movw	r22, r12
     2e6:	0e 94 90 15 	call	0x2b20	; 0x2b20 <__addsf3>
	return(temperature);

}
     2ea:	cf 91       	pop	r28
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	08 95       	ret

000002f6 <read_ADS1115>:
		datarate - one of the eight selectable data rates. We chose the
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
float read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins, uint8_t datarate)
{
     2f6:	cf 92       	push	r12
     2f8:	df 92       	push	r13
     2fa:	ef 92       	push	r14
     2fc:	ff 92       	push	r15
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	d8 2f       	mov	r29, r24
     308:	f6 2e       	mov	r15, r22
	float scale, voltage;
	uint8_t confighi, configlo, retval, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     30a:	46 2b       	or	r20, r22
     30c:	c4 2f       	mov	r28, r20
     30e:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     310:	12 2f       	mov	r17, r18
     312:	13 60       	ori	r17, 0x03	; 3

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start condition
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
     31a:	08 2f       	mov	r16, r24
     31c:	88 23       	and	r24, r24
     31e:	69 f0       	breq	.+26     	; 0x33a <read_ADS1115+0x44>
		stop_TWI();
     320:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
		return(retval);
     324:	60 2f       	mov	r22, r16
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__floatunsisf>
     330:	56 2f       	mov	r21, r22
     332:	47 2f       	mov	r20, r23
     334:	38 2f       	mov	r19, r24
     336:	29 2f       	mov	r18, r25
     338:	d0 c0       	rjmp	.+416    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	if ((retval = write_TWI(ADS1115CONFIG))) {		// Write the CONFIG register
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
     340:	08 2f       	mov	r16, r24
     342:	88 23       	and	r24, r24
     344:	69 f0       	breq	.+26     	; 0x360 <read_ADS1115+0x6a>
		stop_TWI();
     346:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
		return(retval);
     34a:	60 2f       	mov	r22, r16
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__floatunsisf>
     356:	56 2f       	mov	r21, r22
     358:	47 2f       	mov	r20, r23
     35a:	38 2f       	mov	r19, r24
     35c:	29 2f       	mov	r18, r25
     35e:	bd c0       	rjmp	.+378    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	if ((retval = write_TWI(confighi))) {			// Write high byte
     360:	8c 2f       	mov	r24, r28
     362:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
     366:	c8 2f       	mov	r28, r24
     368:	88 23       	and	r24, r24
     36a:	69 f0       	breq	.+26     	; 0x386 <read_ADS1115+0x90>
		stop_TWI();
     36c:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
		return(retval);
     370:	6c 2f       	mov	r22, r28
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__floatunsisf>
     37c:	56 2f       	mov	r21, r22
     37e:	47 2f       	mov	r20, r23
     380:	38 2f       	mov	r19, r24
     382:	29 2f       	mov	r18, r25
     384:	aa c0       	rjmp	.+340    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	if ((retval = write_TWI(configlo))) {			// Write low byte
     386:	81 2f       	mov	r24, r17
     388:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
     38c:	c8 2f       	mov	r28, r24
     38e:	88 23       	and	r24, r24
     390:	69 f0       	breq	.+26     	; 0x3ac <read_ADS1115+0xb6>
		stop_TWI();
     392:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
		return(retval);
     396:	6c 2f       	mov	r22, r28
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__floatunsisf>
     3a2:	56 2f       	mov	r21, r22
     3a4:	47 2f       	mov	r20, r23
     3a6:	38 2f       	mov	r19, r24
     3a8:	29 2f       	mov	r18, r25
     3aa:	97 c0       	rjmp	.+302    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	stop_TWI();
     3ac:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
     3b0:	8c e1       	ldi	r24, 0x1C	; 28
     3b2:	8a 95       	dec	r24
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <read_ADS1115+0xbc>

	_delay_us(25);									// Power-up time

	converting = YES;
     3b6:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     3b8:	09 c0       	rjmp	.+18     	; 0x3cc <read_ADS1115+0xd6>
		start_TWI(addr, TWIREAD);
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	8d 2f       	mov	r24, r29
     3be:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
     3c2:	0e 94 5f 13 	call	0x26be	; 0x26be <readlast_TWI>
		if (flag & 0b10000000) {			// or add a timer timeout
     3c6:	88 23       	and	r24, r24
     3c8:	0c f4       	brge	.+2      	; 0x3cc <read_ADS1115+0xd6>
			converting = NO;
     3ca:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     3cc:	c1 11       	cpse	r28, r1
     3ce:	f5 cf       	rjmp	.-22     	; 0x3ba <read_ADS1115+0xc4>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
		if (flag & 0b10000000) {			// or add a timer timeout
			converting = NO;
		}
	}
	stop_TWI();
     3d0:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>

	start_TWI(addr, TWIWRITE);
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	8d 2f       	mov	r24, r29
     3d8:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     3e2:	61 e0       	ldi	r22, 0x01	; 1
     3e4:	8d 2f       	mov	r24, r29
     3e6:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
	highbyte = read_TWI();
     3ea:	0e 94 4f 13 	call	0x269e	; 0x269e <read_TWI>
     3ee:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     3f0:	0e 94 5f 13 	call	0x26be	; 0x26be <readlast_TWI>
     3f4:	d8 2f       	mov	r29, r24
	stop_TWI();
     3f6:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>

	value = highbyte;
     3fa:	6c 2f       	mov	r22, r28
     3fc:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     3fe:	76 2f       	mov	r23, r22
     400:	66 27       	eor	r22, r22
	value |= lowbyte;
     402:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     404:	84 e0       	ldi	r24, 0x04	; 4
     406:	f8 16       	cp	r15, r24
     408:	49 f1       	breq	.+82     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     40a:	8f 15       	cp	r24, r15
     40c:	30 f0       	brcs	.+12     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     40e:	ff 20       	and	r15, r15
     410:	d9 f1       	breq	.+118    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	f8 16       	cp	r15, r24
     416:	69 f1       	breq	.+90     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     418:	42 c0       	rjmp	.+132    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     41a:	88 e0       	ldi	r24, 0x08	; 8
     41c:	f8 16       	cp	r15, r24
     41e:	09 f4       	brne	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     420:	42 c0       	rjmp	.+132    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     422:	8a e0       	ldi	r24, 0x0A	; 10
     424:	f8 16       	cp	r15, r24
     426:	21 f0       	breq	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     428:	86 e0       	ldi	r24, 0x06	; 6
     42a:	f8 12       	cpse	r15, r24
     42c:	38 c0       	rjmp	.+112    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     42e:	0b c0       	rjmp	.+22     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		case PGA0256:
			scale = SCA0256;
     430:	0f 2e       	mov	r0, r31
     432:	f4 e7       	ldi	r31, 0x74	; 116
     434:	cf 2e       	mov	r12, r31
     436:	f3 e1       	ldi	r31, 0x13	; 19
     438:	df 2e       	mov	r13, r31
     43a:	f3 e0       	ldi	r31, 0x03	; 3
     43c:	ef 2e       	mov	r14, r31
     43e:	f7 e3       	ldi	r31, 0x37	; 55
     440:	ff 2e       	mov	r15, r31
     442:	f0 2d       	mov	r31, r0
     444:	3a c0       	rjmp	.+116    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     446:	0f 2e       	mov	r0, r31
     448:	f4 e7       	ldi	r31, 0x74	; 116
     44a:	cf 2e       	mov	r12, r31
     44c:	f3 e1       	ldi	r31, 0x13	; 19
     44e:	df 2e       	mov	r13, r31
     450:	f3 e0       	ldi	r31, 0x03	; 3
     452:	ef 2e       	mov	r14, r31
     454:	f8 e3       	ldi	r31, 0x38	; 56
     456:	ff 2e       	mov	r15, r31
     458:	f0 2d       	mov	r31, r0
			break;
     45a:	2f c0       	rjmp	.+94     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		case PGA2048:
			scale = SCA2048;
     45c:	0f 2e       	mov	r0, r31
     45e:	f2 e1       	ldi	r31, 0x12	; 18
     460:	cf 2e       	mov	r12, r31
     462:	f3 e1       	ldi	r31, 0x13	; 19
     464:	df 2e       	mov	r13, r31
     466:	f3 e8       	ldi	r31, 0x83	; 131
     468:	ef 2e       	mov	r14, r31
     46a:	f8 e3       	ldi	r31, 0x38	; 56
     46c:	ff 2e       	mov	r15, r31
     46e:	f0 2d       	mov	r31, r0
			break;
     470:	24 c0       	rjmp	.+72     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		case PGA4096:
			scale = SCA4096;
     472:	0f 2e       	mov	r0, r31
     474:	f4 e7       	ldi	r31, 0x74	; 116
     476:	cf 2e       	mov	r12, r31
     478:	f3 e1       	ldi	r31, 0x13	; 19
     47a:	df 2e       	mov	r13, r31
     47c:	f3 e0       	ldi	r31, 0x03	; 3
     47e:	ef 2e       	mov	r14, r31
     480:	f9 e3       	ldi	r31, 0x39	; 57
     482:	ff 2e       	mov	r15, r31
     484:	f0 2d       	mov	r31, r0
			break;
     486:	19 c0       	rjmp	.+50     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		case PGA6144:
			scale = SCA6144;
     488:	0f 2e       	mov	r0, r31
     48a:	fe e2       	ldi	r31, 0x2E	; 46
     48c:	cf 2e       	mov	r12, r31
     48e:	fd e9       	ldi	r31, 0x9D	; 157
     490:	df 2e       	mov	r13, r31
     492:	f4 e4       	ldi	r31, 0x44	; 68
     494:	ef 2e       	mov	r14, r31
     496:	f9 e3       	ldi	r31, 0x39	; 57
     498:	ff 2e       	mov	r15, r31
     49a:	f0 2d       	mov	r31, r0
			break;
     49c:	0e c0       	rjmp	.+28     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		default:
			scale = 0.0;
     49e:	c1 2c       	mov	r12, r1
     4a0:	d1 2c       	mov	r13, r1
     4a2:	76 01       	movw	r14, r12
			break;
     4a4:	0a c0       	rjmp	.+20     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     4a6:	0f 2e       	mov	r0, r31
     4a8:	f1 e7       	ldi	r31, 0x71	; 113
     4aa:	cf 2e       	mov	r12, r31
     4ac:	f3 e1       	ldi	r31, 0x13	; 19
     4ae:	df 2e       	mov	r13, r31
     4b0:	f3 e8       	ldi	r31, 0x83	; 131
     4b2:	ef 2e       	mov	r14, r31
     4b4:	f7 e3       	ldi	r31, 0x37	; 55
     4b6:	ff 2e       	mov	r15, r31
     4b8:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	voltage = scale * (float) value;
     4ba:	07 2e       	mov	r0, r23
     4bc:	00 0c       	add	r0, r0
     4be:	88 0b       	sbc	r24, r24
     4c0:	99 0b       	sbc	r25, r25
     4c2:	0e 94 75 16 	call	0x2cea	; 0x2cea <__floatsisf>
     4c6:	9b 01       	movw	r18, r22
     4c8:	ac 01       	movw	r20, r24
     4ca:	c7 01       	movw	r24, r14
     4cc:	b6 01       	movw	r22, r12
     4ce:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__mulsf3>
	return(voltage);
     4d2:	56 2f       	mov	r21, r22
     4d4:	47 2f       	mov	r20, r23
     4d6:	38 2f       	mov	r19, r24
     4d8:	29 2f       	mov	r18, r25

}
     4da:	65 2f       	mov	r22, r21
     4dc:	74 2f       	mov	r23, r20
     4de:	83 2f       	mov	r24, r19
     4e0:	92 2f       	mov	r25, r18
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	df 90       	pop	r13
     4f0:	cf 90       	pop	r12
     4f2:	08 95       	ret

000004f4 <init_BEEPER>:
#include "globals.h"

void init_BEEPER(void)
{

	PORTB.OUTSET = PIN2_bm;
     4f4:	e0 e2       	ldi	r30, 0x20	; 32
     4f6:	f4 e0       	ldi	r31, 0x04	; 4
     4f8:	84 e0       	ldi	r24, 0x04	; 4
     4fa:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     4fc:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = PIN2_bm;
     4fe:	86 83       	std	Z+6, r24	; 0x06
     500:	08 95       	ret

00000502 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding the NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	c5 59       	subi	r28, 0x95	; 149
     510:	d1 09       	sbc	r29, r1
     512:	cd bf       	out	0x3d, r28	; 61
     514:	de bf       	out	0x3e, r29	; 62

	char format_CMD[] = "$S%dCMD,%s";
     516:	2b e0       	ldi	r18, 0x0B	; 11
     518:	ea ee       	ldi	r30, 0xEA	; 234
     51a:	fa e7       	ldi	r31, 0x7A	; 122
     51c:	de 01       	movw	r26, r28
     51e:	11 96       	adiw	r26, 0x01	; 1
     520:	01 90       	ld	r0, Z+
     522:	0d 92       	st	X+, r0
     524:	2a 95       	dec	r18
     526:	e1 f7       	brne	.-8      	; 0x520 <echo_cmd+0x1e>
	char strbuf[BUFSIZE+10];		// Add $SXCMD, and *HH checksum

		// Format and echo the command line
	sprintf(strbuf, format_CMD, get_SPECID, cmdline);
     528:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     52c:	22 ff       	sbrs	r18, 2
     52e:	03 c0       	rjmp	.+6      	; 0x536 <echo_cmd+0x34>
     530:	22 e0       	ldi	r18, 0x02	; 2
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	02 c0       	rjmp	.+4      	; 0x53a <echo_cmd+0x38>
     536:	21 e0       	ldi	r18, 0x01	; 1
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	9f 93       	push	r25
     53c:	8f 93       	push	r24
     53e:	3f 93       	push	r19
     540:	2f 93       	push	r18
     542:	ce 01       	movw	r24, r28
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	9f 93       	push	r25
     548:	8f 93       	push	r24
     54a:	8e 01       	movw	r16, r28
     54c:	04 5f       	subi	r16, 0xF4	; 244
     54e:	1f 4f       	sbci	r17, 0xFF	; 255
     550:	1f 93       	push	r17
     552:	0f 93       	push	r16
     554:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
	checksum_NMEA(strbuf);
     558:	c8 01       	movw	r24, r16
     55a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     55e:	f8 01       	movw	r30, r16
     560:	01 90       	ld	r0, Z+
     562:	00 20       	and	r0, r0
     564:	e9 f7       	brne	.-6      	; 0x560 <echo_cmd+0x5e>
     566:	31 97       	sbiw	r30, 0x01	; 1
     568:	af 01       	movw	r20, r30
     56a:	40 1b       	sub	r20, r16
     56c:	51 0b       	sbc	r21, r17
     56e:	b8 01       	movw	r22, r16
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <send_USART>

}
     576:	cd bf       	out	0x3d, r28	; 61
     578:	de bf       	out	0x3e, r29	; 62
     57a:	cb 56       	subi	r28, 0x6B	; 107
     57c:	df 4f       	sbci	r29, 0xFF	; 255
     57e:	cd bf       	out	0x3d, r28	; 61
     580:	de bf       	out	0x3e, r29	; 62
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	08 95       	ret

0000058c <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if (c >= 'a' && c <= 'z') {
     58c:	9f e9       	ldi	r25, 0x9F	; 159
     58e:	98 0f       	add	r25, r24
     590:	9a 31       	cpi	r25, 0x1A	; 26
     592:	28 f0       	brcs	.+10     	; 0x59e <isaletter+0x12>
		return(1);
	}

	if (c >= 'A' && c <= 'Z') {
     594:	81 54       	subi	r24, 0x41	; 65
     596:	8a 31       	cpi	r24, 0x1A	; 26
     598:	20 f4       	brcc	.+8      	; 0x5a2 <isaletter+0x16>
		return(1);
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	08 95       	ret
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if (c >= 'a' && c <= 'z') {
		return(1);
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	08 95       	ret

	if (c >= 'A' && c <= 'Z') {
		return(1);
	}

	return(0);
     5a2:	80 e0       	ldi	r24, 0x00	; 0

}
     5a4:	08 95       	ret

000005a6 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     5b2:	e6 2e       	mov	r14, r22
     5b4:	f1 2c       	mov	r15, r1
     5b6:	84 e3       	ldi	r24, 0x34	; 52
     5b8:	8e 9d       	mul	r24, r14
     5ba:	f0 01       	movw	r30, r0
     5bc:	8f 9d       	mul	r24, r15
     5be:	f0 0d       	add	r31, r0
     5c0:	11 24       	eor	r1, r1
     5c2:	ed 5f       	subi	r30, 0xFD	; 253
     5c4:	f7 4d       	sbci	r31, 0xD7	; 215
     5c6:	8f e3       	ldi	r24, 0x3F	; 63
     5c8:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     5ca:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     5cc:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     5ce:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {
     5d0:	04 c0       	rjmp	.+8      	; 0x5da <parse_cmd+0x34>
		if (*ptr == '\0') {
     5d2:	11 23       	and	r17, r17
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <parse_cmd+0x32>
     5d6:	75 c0       	rjmp	.+234    	; 0x6c2 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     5d8:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {
     5da:	18 81       	ld	r17, Y
     5dc:	81 2f       	mov	r24, r17
     5de:	0e 94 c6 02 	call	0x58c	; 0x58c <isaletter>
     5e2:	88 23       	and	r24, r24
     5e4:	b1 f3       	breq	.-20     	; 0x5d2 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     5e6:	21 96       	adiw	r28, 0x01	; 1
     5e8:	84 e3       	ldi	r24, 0x34	; 52
     5ea:	8e 9d       	mul	r24, r14
     5ec:	f0 01       	movw	r30, r0
     5ee:	8f 9d       	mul	r24, r15
     5f0:	f0 0d       	add	r31, r0
     5f2:	11 24       	eor	r1, r1
     5f4:	ed 5f       	subi	r30, 0xFD	; 253
     5f6:	f7 4d       	sbci	r31, 0xD7	; 215
     5f8:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {
     5fa:	04 c0       	rjmp	.+8      	; 0x604 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     5fc:	11 23       	and	r17, r17
     5fe:	09 f4       	brne	.+2      	; 0x602 <parse_cmd+0x5c>
     600:	60 c0       	rjmp	.+192    	; 0x6c2 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     602:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {
     604:	18 81       	ld	r17, Y
     606:	81 2f       	mov	r24, r17
     608:	0e 94 c6 02 	call	0x58c	; 0x58c <isaletter>
     60c:	88 23       	and	r24, r24
     60e:	b1 f3       	breq	.-20     	; 0x5fc <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     610:	21 96       	adiw	r28, 0x01	; 1
     612:	84 e3       	ldi	r24, 0x34	; 52
     614:	8e 9d       	mul	r24, r14
     616:	f0 01       	movw	r30, r0
     618:	8f 9d       	mul	r24, r15
     61a:	f0 0d       	add	r31, r0
     61c:	11 24       	eor	r1, r1
     61e:	ed 5f       	subi	r30, 0xFD	; 253
     620:	f7 4d       	sbci	r31, 0xD7	; 215
     622:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	2a c0       	rjmp	.+84     	; 0x67c <parse_cmd+0xd6>
		if (*ptr == '\0') {
     628:	98 81       	ld	r25, Y
     62a:	91 11       	cpse	r25, r1
     62c:	0c c0       	rjmp	.+24     	; 0x646 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     62e:	94 e3       	ldi	r25, 0x34	; 52
     630:	9e 9d       	mul	r25, r14
     632:	f0 01       	movw	r30, r0
     634:	9f 9d       	mul	r25, r15
     636:	f0 0d       	add	r31, r0
     638:	11 24       	eor	r1, r1
     63a:	ed 5f       	subi	r30, 0xFD	; 253
     63c:	f7 4d       	sbci	r31, 0xD7	; 215
     63e:	e8 0f       	add	r30, r24
     640:	f1 1d       	adc	r31, r1
     642:	12 82       	std	Z+2, r1	; 0x02
			return;
     644:	3e c0       	rjmp	.+124    	; 0x6c2 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {
     646:	9b 33       	cpi	r25, 0x3B	; 59
     648:	61 f4       	brne	.+24     	; 0x662 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     64a:	94 e3       	ldi	r25, 0x34	; 52
     64c:	9e 9d       	mul	r25, r14
     64e:	f0 01       	movw	r30, r0
     650:	9f 9d       	mul	r25, r15
     652:	f0 0d       	add	r31, r0
     654:	11 24       	eor	r1, r1
     656:	ed 5f       	subi	r30, 0xFD	; 253
     658:	f7 4d       	sbci	r31, 0xD7	; 215
     65a:	e8 0f       	add	r30, r24
     65c:	f1 1d       	adc	r31, r1
     65e:	12 82       	std	Z+2, r1	; 0x02
			break;
     660:	0f c0       	rjmp	.+30     	; 0x680 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     662:	21 96       	adiw	r28, 0x01	; 1
     664:	24 e3       	ldi	r18, 0x34	; 52
     666:	2e 9d       	mul	r18, r14
     668:	f0 01       	movw	r30, r0
     66a:	2f 9d       	mul	r18, r15
     66c:	f0 0d       	add	r31, r0
     66e:	11 24       	eor	r1, r1
     670:	ed 5f       	subi	r30, 0xFD	; 253
     672:	f7 4d       	sbci	r31, 0xD7	; 215
     674:	e8 0f       	add	r30, r24
     676:	f1 1d       	adc	r31, r1
     678:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     67a:	8f 5f       	subi	r24, 0xFF	; 255
     67c:	89 32       	cpi	r24, 0x29	; 41
     67e:	a0 f2       	brcs	.-88     	; 0x628 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
     680:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	1c c0       	rjmp	.+56     	; 0x6be <parse_cmd+0x118>
		if (*ptr == '\0') {
     686:	98 81       	ld	r25, Y
     688:	91 11       	cpse	r25, r1
     68a:	0c c0       	rjmp	.+24     	; 0x6a4 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     68c:	94 e3       	ldi	r25, 0x34	; 52
     68e:	9e 9d       	mul	r25, r14
     690:	f0 01       	movw	r30, r0
     692:	9f 9d       	mul	r25, r15
     694:	f0 0d       	add	r31, r0
     696:	11 24       	eor	r1, r1
     698:	ed 5f       	subi	r30, 0xFD	; 253
     69a:	f7 4d       	sbci	r31, 0xD7	; 215
     69c:	e8 0f       	add	r30, r24
     69e:	f1 1d       	adc	r31, r1
     6a0:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     6a2:	0f c0       	rjmp	.+30     	; 0x6c2 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     6a4:	21 96       	adiw	r28, 0x01	; 1
     6a6:	24 e3       	ldi	r18, 0x34	; 52
     6a8:	2e 9d       	mul	r18, r14
     6aa:	f0 01       	movw	r30, r0
     6ac:	2f 9d       	mul	r18, r15
     6ae:	f0 0d       	add	r31, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	ed 5f       	subi	r30, 0xFD	; 253
     6b4:	f7 4d       	sbci	r31, 0xD7	; 215
     6b6:	e8 0f       	add	r30, r24
     6b8:	f1 1d       	adc	r31, r1
     6ba:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	89 30       	cpi	r24, 0x09	; 9
     6c0:	10 f3       	brcs	.-60     	; 0x686 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	08 95       	ret

000006ce <send_prompt>:

	If specMech is rebooted, it will only prompt with a single exclamation
	point (!) until it receives an acknowledgment in the form of a single !.
------------------------------------------------------------------------------*/
void send_prompt(uint8_t prompt_flag)
{
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	6d 97       	sbiw	r28, 0x1d	; 29
     6dc:	cd bf       	out	0x3d, r28	; 61
     6de:	de bf       	out	0x3e, r29	; 62

	const char str0[] = ">";
     6e0:	2e e3       	ldi	r18, 0x3E	; 62
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	29 83       	std	Y+1, r18	; 0x01
     6e6:	3a 83       	std	Y+2, r19	; 0x02
	const char str1[] = "!";
     6e8:	21 e2       	ldi	r18, 0x21	; 33
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	2b 83       	std	Y+3, r18	; 0x03
     6ee:	3c 83       	std	Y+4, r19	; 0x04

	char prompt_str[25];

	switch (prompt_flag) {
     6f0:	81 30       	cpi	r24, 0x01	; 1
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <send_prompt+0x28>
     6f4:	3f c0       	rjmp	.+126    	; 0x774 <send_prompt+0xa6>
     6f6:	18 f0       	brcs	.+6      	; 0x6fe <send_prompt+0x30>
     6f8:	82 30       	cpi	r24, 0x02	; 2
     6fa:	b9 f0       	breq	.+46     	; 0x72a <send_prompt+0x5c>
     6fc:	51 c0       	rjmp	.+162    	; 0x7a0 <send_prompt+0xd2>
		case GREATERPROMPT:
			strcpy(prompt_str, str0);
     6fe:	8e 01       	movw	r16, r28
     700:	0b 5f       	subi	r16, 0xFB	; 251
     702:	1f 4f       	sbci	r17, 0xFF	; 255
     704:	be 01       	movw	r22, r28
     706:	6f 5f       	subi	r22, 0xFF	; 255
     708:	7f 4f       	sbci	r23, 0xFF	; 255
     70a:	c8 01       	movw	r24, r16
     70c:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     710:	f8 01       	movw	r30, r16
     712:	01 90       	ld	r0, Z+
     714:	00 20       	and	r0, r0
     716:	e9 f7       	brne	.-6      	; 0x712 <send_prompt+0x44>
     718:	31 97       	sbiw	r30, 0x01	; 1
     71a:	af 01       	movw	r20, r30
     71c:	40 1b       	sub	r20, r16
     71e:	51 0b       	sbc	r21, r17
     720:	b8 01       	movw	r22, r16
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <send_USART>
			break;
     728:	50 c0       	rjmp	.+160    	; 0x7ca <send_prompt+0xfc>

		case ERRORPROMPT:
			format_ERR(prompt_str);
     72a:	8e 01       	movw	r16, r28
     72c:	0b 5f       	subi	r16, 0xFB	; 251
     72e:	1f 4f       	sbci	r17, 0xFF	; 255
     730:	c8 01       	movw	r24, r16
     732:	0e 94 c2 09 	call	0x1384	; 0x1384 <format_ERR>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     736:	f8 01       	movw	r30, r16
     738:	01 90       	ld	r0, Z+
     73a:	00 20       	and	r0, r0
     73c:	e9 f7       	brne	.-6      	; 0x738 <send_prompt+0x6a>
     73e:	31 97       	sbiw	r30, 0x01	; 1
     740:	af 01       	movw	r20, r30
     742:	40 1b       	sub	r20, r16
     744:	51 0b       	sbc	r21, r17
     746:	b8 01       	movw	r22, r16
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <send_USART>
			strcpy(prompt_str, str0);
     74e:	be 01       	movw	r22, r28
     750:	6f 5f       	subi	r22, 0xFF	; 255
     752:	7f 4f       	sbci	r23, 0xFF	; 255
     754:	c8 01       	movw	r24, r16
     756:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     75a:	f8 01       	movw	r30, r16
     75c:	01 90       	ld	r0, Z+
     75e:	00 20       	and	r0, r0
     760:	e9 f7       	brne	.-6      	; 0x75c <send_prompt+0x8e>
     762:	31 97       	sbiw	r30, 0x01	; 1
     764:	af 01       	movw	r20, r30
     766:	40 1b       	sub	r20, r16
     768:	51 0b       	sbc	r21, r17
     76a:	b8 01       	movw	r22, r16
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <send_USART>
			break;
     772:	2b c0       	rjmp	.+86     	; 0x7ca <send_prompt+0xfc>

		case EXCLAIMPROMPT:
			strcpy(prompt_str, str1);
     774:	8e 01       	movw	r16, r28
     776:	0b 5f       	subi	r16, 0xFB	; 251
     778:	1f 4f       	sbci	r17, 0xFF	; 255
     77a:	be 01       	movw	r22, r28
     77c:	6d 5f       	subi	r22, 0xFD	; 253
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	c8 01       	movw	r24, r16
     782:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     786:	f8 01       	movw	r30, r16
     788:	01 90       	ld	r0, Z+
     78a:	00 20       	and	r0, r0
     78c:	e9 f7       	brne	.-6      	; 0x788 <send_prompt+0xba>
     78e:	31 97       	sbiw	r30, 0x01	; 1
     790:	af 01       	movw	r20, r30
     792:	40 1b       	sub	r20, r16
     794:	51 0b       	sbc	r21, r17
     796:	b8 01       	movw	r22, r16
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <send_USART>
			break;
     79e:	15 c0       	rjmp	.+42     	; 0x7ca <send_prompt+0xfc>

		default:
			strcpy(prompt_str, str1);
     7a0:	8e 01       	movw	r16, r28
     7a2:	0b 5f       	subi	r16, 0xFB	; 251
     7a4:	1f 4f       	sbci	r17, 0xFF	; 255
     7a6:	be 01       	movw	r22, r28
     7a8:	6d 5f       	subi	r22, 0xFD	; 253
     7aa:	7f 4f       	sbci	r23, 0xFF	; 255
     7ac:	c8 01       	movw	r24, r16
     7ae:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     7b2:	f8 01       	movw	r30, r16
     7b4:	01 90       	ld	r0, Z+
     7b6:	00 20       	and	r0, r0
     7b8:	e9 f7       	brne	.-6      	; 0x7b4 <send_prompt+0xe6>
     7ba:	31 97       	sbiw	r30, 0x01	; 1
     7bc:	af 01       	movw	r20, r30
     7be:	40 1b       	sub	r20, r16
     7c0:	51 0b       	sbc	r21, r17
     7c2:	b8 01       	movw	r22, r16
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <send_USART>
			break;

	}

}
     7ca:	6d 96       	adiw	r28, 0x1d	; 29
     7cc:	cd bf       	out	0x3d, r28	; 61
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62
     7e2:	c0 58       	subi	r28, 0x80	; 128
     7e4:	d1 09       	sbc	r29, r1
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	de bf       	out	0x3e, r29	; 62
	char verb, object;
	uint8_t i, prompt_flag = GREATERPROMPT;
	static uint8_t rebootnack = 1;
	static uint8_t cstack = 0;		// Index for pcmd

on_BEEPER;
     7ea:	e0 e2       	ldi	r30, 0x20	; 32
     7ec:	f4 e0       	ldi	r31, 0x04	; 4
     7ee:	84 e0       	ldi	r24, 0x04	; 4
     7f0:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7f2:	a2 ec       	ldi	r26, 0xC2	; 194
     7f4:	b2 ea       	ldi	r27, 0xA2	; 162
     7f6:	11 97       	sbiw	r26, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <commands+0x1c>
     7fa:	00 c0       	rjmp	.+0      	; 0x7fc <commands+0x22>
_delay_ms(50);
off_BEEPER;
     7fc:	86 83       	std	Z+6, r24	; 0x06

	// Copy the command string to cmdline
	for (i = 0; i < BUFSIZE; i++) {
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	1c c0       	rjmp	.+56     	; 0x83a <commands+0x60>
		cmdline[i] = recv0_buf.data[recv0_buf.tail];
     802:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv0_buf+0x81>
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	fc 01       	movw	r30, r24
     80a:	eb 56       	subi	r30, 0x6B	; 107
     80c:	f5 4d       	sbci	r31, 0xD5	; 213
     80e:	30 81       	ld	r19, Z
     810:	e1 e0       	ldi	r30, 0x01	; 1
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	ec 0f       	add	r30, r28
     816:	fd 1f       	adc	r31, r29
     818:	e2 0f       	add	r30, r18
     81a:	f1 1d       	adc	r31, r1
     81c:	30 83       	st	Z, r19
		recv0_buf.tail = (recv0_buf.tail + 1) % BUFSIZE;
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	8f 77       	andi	r24, 0x7F	; 127
     822:	90 78       	andi	r25, 0x80	; 128
     824:	99 23       	and	r25, r25
     826:	24 f4       	brge	.+8      	; 0x830 <commands+0x56>
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	80 68       	ori	r24, 0x80	; 128
     82c:	9f 6f       	ori	r25, 0xFF	; 255
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	80 93 16 2b 	sts	0x2B16, r24	; 0x802b16 <recv0_buf+0x81>
		if (cmdline[i] == '\0') {
     834:	33 23       	and	r19, r19
     836:	19 f0       	breq	.+6      	; 0x83e <commands+0x64>
on_BEEPER;
_delay_ms(50);
off_BEEPER;

	// Copy the command string to cmdline
	for (i = 0; i < BUFSIZE; i++) {
     838:	2f 5f       	subi	r18, 0xFF	; 255
     83a:	22 23       	and	r18, r18
     83c:	14 f7       	brge	.-60     	; 0x802 <commands+0x28>
			break;
		}
	}

	// Check if rebooted
	if (rebootnack) {
     83e:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     842:	88 23       	and	r24, r24
     844:	b9 f0       	breq	.+46     	; 0x874 <commands+0x9a>
		if (cmdline[0] != '!') {
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	81 32       	cpi	r24, 0x21	; 33
     84a:	21 f0       	breq	.+8      	; 0x854 <commands+0x7a>
			send_prompt(EXCLAIMPROMPT);		
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	0e 94 67 03 	call	0x6ce	; 0x6ce <send_prompt>
			return;
     852:	65 c0       	rjmp	.+202    	; 0x91e <commands+0x144>
		} else {
			init_RTC(511);		// 1-sec RTC clock
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 88 12 	call	0x2510	; 0x2510 <init_RTC>
			timeoutOLED = 5;	// 5 second timeout
     85c:	85 e0       	ldi	r24, 0x05	; 5
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timeoutOLED>
     864:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timeoutOLED+0x1>
			send_prompt(GREATERPROMPT);
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	0e 94 67 03 	call	0x6ce	; 0x6ce <send_prompt>
			rebootnack = 0;
     86e:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
			return;
     872:	55 c0       	rjmp	.+170    	; 0x91e <commands+0x144>
		}
	}

	// Echo the command back to the user
	echo_cmd(cmdline);
     874:	ce 01       	movw	r24, r28
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	0e 94 81 02 	call	0x502	; 0x502 <echo_cmd>

	if (strlen(cmdline) == 0) {		// Catch a terminal cr
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	81 11       	cpse	r24, r1
     880:	03 c0       	rjmp	.+6      	; 0x888 <commands+0xae>
		send_prompt(GREATERPROMPT);
     882:	0e 94 67 03 	call	0x6ce	; 0x6ce <send_prompt>
		return;
     886:	4b c0       	rjmp	.+150    	; 0x91e <commands+0x144>
	}

	parse_cmd(cmdline, cstack);
     888:	60 91 02 28 	lds	r22, 0x2802	; 0x802802 <__data_end>
     88c:	ce 01       	movw	r24, r28
     88e:	01 96       	adiw	r24, 0x01	; 1
     890:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <parse_cmd>
	verb = pcmd[cstack].cverb;
     894:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     898:	b4 e3       	ldi	r27, 0x34	; 52
     89a:	8b 9f       	mul	r24, r27
     89c:	f0 01       	movw	r30, r0
     89e:	11 24       	eor	r1, r1
     8a0:	ed 5f       	subi	r30, 0xFD	; 253
     8a2:	f7 4d       	sbci	r31, 0xD7	; 215
     8a4:	90 81       	ld	r25, Z
	object = pcmd[cstack].cobject;
     8a6:	21 81       	ldd	r18, Z+1	; 0x01

	switch (verb) {
     8a8:	9f 36       	cpi	r25, 0x6F	; 111
     8aa:	81 f0       	breq	.+32     	; 0x8cc <commands+0xf2>
     8ac:	28 f4       	brcc	.+10     	; 0x8b8 <commands+0xde>
     8ae:	92 35       	cpi	r25, 0x52	; 82
     8b0:	d1 f0       	breq	.+52     	; 0x8e6 <commands+0x10c>
     8b2:	93 36       	cpi	r25, 0x63	; 99
     8b4:	31 f0       	breq	.+12     	; 0x8c2 <commands+0xe8>
     8b6:	25 c0       	rjmp	.+74     	; 0x902 <commands+0x128>
     8b8:	92 37       	cpi	r25, 0x72	; 114
     8ba:	69 f0       	breq	.+26     	; 0x8d6 <commands+0xfc>
     8bc:	93 37       	cpi	r25, 0x73	; 115
     8be:	79 f0       	breq	.+30     	; 0x8de <commands+0x104>
     8c0:	20 c0       	rjmp	.+64     	; 0x902 <commands+0x128>
		case 'c':				// close
			prompt_flag = close_PNEU(object);
     8c2:	82 2f       	mov	r24, r18
     8c4:	0e 94 10 0c 	call	0x1820	; 0x1820 <close_PNEU>
     8c8:	28 2f       	mov	r18, r24
			break;
     8ca:	1c c0       	rjmp	.+56     	; 0x904 <commands+0x12a>

		case 'o':				// open
			prompt_flag = open_PNEU(object);
     8cc:	82 2f       	mov	r24, r18
     8ce:	0e 94 a2 0c 	call	0x1944	; 0x1944 <open_PNEU>
     8d2:	28 2f       	mov	r18, r24
			break;
     8d4:	17 c0       	rjmp	.+46     	; 0x904 <commands+0x12a>

		case 'r':				// Report
			prompt_flag = report(cstack);
     8d6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <report>
     8da:	28 2f       	mov	r18, r24
			break;
     8dc:	13 c0       	rjmp	.+38     	; 0x904 <commands+0x12a>

		case 's':				// Set
			prompt_flag = set(cstack);
     8de:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <set>
     8e2:	28 2f       	mov	r18, r24
			break;
     8e4:	0f c0       	rjmp	.+30     	; 0x904 <commands+0x12a>

		case 'R':				// Reboot
			send_prompt(GREATERPROMPT);
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	0e 94 67 03 	call	0x6ce	; 0x6ce <send_prompt>
     8ec:	2a e6       	ldi	r18, 0x6A	; 106
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	21 50       	subi	r18, 0x01	; 1
     8f4:	80 40       	sbci	r24, 0x00	; 0
     8f6:	90 40       	sbci	r25, 0x00	; 0
     8f8:	e1 f7       	brne	.-8      	; 0x8f2 <commands+0x118>
     8fa:	00 c0       	rjmp	.+0      	; 0x8fc <commands+0x122>
			_delay_ms(100);		// Avoid finishing the command loop before reboot
			reboot();
     8fc:	0e 94 89 15 	call	0x2b12	; 0x2b12 <reboot>
			return;
     900:	0e c0       	rjmp	.+28     	; 0x91e <commands+0x144>

		default:
			prompt_flag = ERRORPROMPT;
     902:	22 e0       	ldi	r18, 0x02	; 2
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     904:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	6a e0       	ldi	r22, 0x0A	; 10
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	0e 94 14 1b 	call	0x3628	; 0x3628 <__divmodhi4>
     914:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <__data_end>
	send_prompt(prompt_flag);
     918:	82 2f       	mov	r24, r18
     91a:	0e 94 67 03 	call	0x6ce	; 0x6ce <send_prompt>

}
     91e:	c0 58       	subi	r28, 0x80	; 128
     920:	df 4f       	sbci	r29, 0xFF	; 255
     922:	cd bf       	out	0x3d, r28	; 61
     924:	de bf       	out	0x3e, r29	; 62
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     92c:	fb 01       	movw	r30, r22
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     92e:	70 81       	ld	r23, Z
	minutes = (*ds3231time++);
     930:	61 81       	ldd	r22, Z+1	; 0x01
	hours = (*ds3231time++);
     932:	52 81       	ldd	r21, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     934:	44 81       	ldd	r20, Z+4	; 0x04
	month = (*ds3231time++);
     936:	35 81       	ldd	r19, Z+5	; 0x05
	year = (*ds3231time);
     938:	26 81       	ldd	r18, Z+6	; 0x06

	sprintf(isotime, "20%02x-%02x-%02xT%02x:%02x:%02x",
     93a:	1f 92       	push	r1
     93c:	7f 93       	push	r23
     93e:	1f 92       	push	r1
     940:	6f 93       	push	r22
     942:	1f 92       	push	r1
     944:	5f 93       	push	r21
     946:	1f 92       	push	r1
     948:	4f 93       	push	r20
     94a:	1f 92       	push	r1
     94c:	3f 93       	push	r19
     94e:	1f 92       	push	r1
     950:	2f 93       	push	r18
     952:	25 ef       	ldi	r18, 0xF5	; 245
     954:	3a e7       	ldi	r19, 0x7A	; 122
     956:	3f 93       	push	r19
     958:	2f 93       	push	r18
     95a:	9f 93       	push	r25
     95c:	8f 93       	push	r24
     95e:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
		year, month, date, hours, minutes, seconds);

}
     962:	8d b7       	in	r24, 0x3d	; 61
     964:	9e b7       	in	r25, 0x3e	; 62
     966:	40 96       	adiw	r24, 0x10	; 16
     968:	8d bf       	out	0x3d, r24	; 61
     96a:	9e bf       	out	0x3e, r25	; 62
     96c:	08 95       	ret

0000096e <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ssZ
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     96e:	dc 01       	movw	r26, r24
     970:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     972:	81 89       	ldd	r24, Z+17	; 0x11
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	c0 97       	sbiw	r24, 0x30	; 48
     978:	82 95       	swap	r24
     97a:	92 95       	swap	r25
     97c:	90 7f       	andi	r25, 0xF0	; 240
     97e:	98 27       	eor	r25, r24
     980:	80 7f       	andi	r24, 0xF0	; 240
     982:	98 27       	eor	r25, r24
     984:	92 89       	ldd	r25, Z+18	; 0x12
     986:	90 53       	subi	r25, 0x30	; 48
     988:	89 2b       	or	r24, r25
     98a:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     98c:	86 85       	ldd	r24, Z+14	; 0x0e
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	c0 97       	sbiw	r24, 0x30	; 48
     992:	82 95       	swap	r24
     994:	92 95       	swap	r25
     996:	90 7f       	andi	r25, 0xF0	; 240
     998:	98 27       	eor	r25, r24
     99a:	80 7f       	andi	r24, 0xF0	; 240
     99c:	98 27       	eor	r25, r24
     99e:	97 85       	ldd	r25, Z+15	; 0x0f
     9a0:	90 53       	subi	r25, 0x30	; 48
     9a2:	89 2b       	or	r24, r25
     9a4:	11 96       	adiw	r26, 0x01	; 1
     9a6:	8c 93       	st	X, r24
     9a8:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     9aa:	83 85       	ldd	r24, Z+11	; 0x0b
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	c0 97       	sbiw	r24, 0x30	; 48
     9b0:	82 95       	swap	r24
     9b2:	92 95       	swap	r25
     9b4:	90 7f       	andi	r25, 0xF0	; 240
     9b6:	98 27       	eor	r25, r24
     9b8:	80 7f       	andi	r24, 0xF0	; 240
     9ba:	98 27       	eor	r25, r24
     9bc:	94 85       	ldd	r25, Z+12	; 0x0c
     9be:	90 53       	subi	r25, 0x30	; 48
     9c0:	89 2b       	or	r24, r25
     9c2:	12 96       	adiw	r26, 0x02	; 2
     9c4:	8c 93       	st	X, r24
     9c6:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	13 96       	adiw	r26, 0x03	; 3
     9cc:	8c 93       	st	X, r24
     9ce:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     9d0:	80 85       	ldd	r24, Z+8	; 0x08
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	c0 97       	sbiw	r24, 0x30	; 48
     9d6:	82 95       	swap	r24
     9d8:	92 95       	swap	r25
     9da:	90 7f       	andi	r25, 0xF0	; 240
     9dc:	98 27       	eor	r25, r24
     9de:	80 7f       	andi	r24, 0xF0	; 240
     9e0:	98 27       	eor	r25, r24
     9e2:	91 85       	ldd	r25, Z+9	; 0x09
     9e4:	90 53       	subi	r25, 0x30	; 48
     9e6:	89 2b       	or	r24, r25
     9e8:	14 96       	adiw	r26, 0x04	; 4
     9ea:	8c 93       	st	X, r24
     9ec:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     9ee:	25 81       	ldd	r18, Z+5	; 0x05
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	20 53       	subi	r18, 0x30	; 48
     9f4:	31 09       	sbc	r19, r1
     9f6:	22 95       	swap	r18
     9f8:	32 95       	swap	r19
     9fa:	30 7f       	andi	r19, 0xF0	; 240
     9fc:	32 27       	eor	r19, r18
     9fe:	20 7f       	andi	r18, 0xF0	; 240
     a00:	32 27       	eor	r19, r18
     a02:	86 81       	ldd	r24, Z+6	; 0x06
     a04:	80 53       	subi	r24, 0x30	; 48
     a06:	28 2b       	or	r18, r24
     a08:	15 96       	adiw	r26, 0x05	; 5
     a0a:	2c 93       	st	X, r18
     a0c:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     a0e:	22 81       	ldd	r18, Z+2	; 0x02
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	20 53       	subi	r18, 0x30	; 48
     a14:	31 09       	sbc	r19, r1
     a16:	22 95       	swap	r18
     a18:	32 95       	swap	r19
     a1a:	30 7f       	andi	r19, 0xF0	; 240
     a1c:	32 27       	eor	r19, r18
     a1e:	20 7f       	andi	r18, 0xF0	; 240
     a20:	32 27       	eor	r19, r18
     a22:	83 81       	ldd	r24, Z+3	; 0x03
     a24:	80 53       	subi	r24, 0x30	; 48
     a26:	28 2b       	or	r18, r24
     a28:	16 96       	adiw	r26, 0x06	; 6
     a2a:	2c 93       	st	X, r18
     a2c:	08 95       	ret

00000a2e <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	7b 01       	movw	r14, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
     a40:	c8 2f       	mov	r28, r24
     a42:	88 23       	and	r24, r24
     a44:	21 f0       	breq	.+8      	; 0xa4e <read_DS3231+0x20>
		stop_TWI();
     a46:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
		return(retval);
     a4a:	8c 2f       	mov	r24, r28
     a4c:	28 c0       	rjmp	.+80     	; 0xa9e <read_DS3231+0x70>
    }  

	if ((retval = write_TWI(0x00))) {	// Register 00h
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
     a54:	c8 2f       	mov	r28, r24
     a56:	88 23       	and	r24, r24
     a58:	21 f0       	breq	.+8      	; 0xa62 <read_DS3231+0x34>
		stop_TWI();
     a5a:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
		return(retval);
     a5e:	8c 2f       	mov	r24, r28
     a60:	1e c0       	rjmp	.+60     	; 0xa9e <read_DS3231+0x70>
	}
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	88 e6       	ldi	r24, 0x68	; 104
     a66:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
     a6a:	c8 2f       	mov	r28, r24
     a6c:	88 23       	and	r24, r24
     a6e:	69 f0       	breq	.+26     	; 0xa8a <read_DS3231+0x5c>
		stop_TWI();
     a70:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
		return(retval);
     a74:	8c 2f       	mov	r24, r28
     a76:	13 c0       	rjmp	.+38     	; 0xa9e <read_DS3231+0x70>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     a78:	87 01       	movw	r16, r14
     a7a:	0c 0f       	add	r16, r28
     a7c:	11 1d       	adc	r17, r1
     a7e:	0e 94 4f 13 	call	0x269e	; 0x269e <read_TWI>
     a82:	f8 01       	movw	r30, r16
     a84:	80 83       	st	Z, r24
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 6; i++) {
     a86:	cf 5f       	subi	r28, 0xFF	; 255
     a88:	01 c0       	rjmp	.+2      	; 0xa8c <read_DS3231+0x5e>
     a8a:	c0 e0       	ldi	r28, 0x00	; 0
     a8c:	c6 30       	cpi	r28, 0x06	; 6
     a8e:	a0 f3       	brcs	.-24     	; 0xa78 <read_DS3231+0x4a>
		ds3231time[i] = read_TWI();
	}
	ds3231time[6] = readlast_TWI();
     a90:	0e 94 5f 13 	call	0x26be	; 0x26be <readlast_TWI>
     a94:	f7 01       	movw	r30, r14
     a96:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     a98:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>

	return(0);
     a9c:	80 e0       	ldi	r24, 0x00	; 0

}
     a9e:	cf 91       	pop	r28
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	ff 90       	pop	r15
     aa6:	ef 90       	pop	r14
     aa8:	08 95       	ret

00000aaa <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
     ab6:	27 97       	sbiw	r28, 0x07	; 7
     ab8:	cd bf       	out	0x3d, r28	; 61
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	8c 01       	movw	r16, r24

	uint8_t retval, ds3231time[7];

	if ((retval = read_DS3231(DS3231ADDR, ds3231time))) {
     abe:	be 01       	movw	r22, r28
     ac0:	6f 5f       	subi	r22, 0xFF	; 255
     ac2:	7f 4f       	sbci	r23, 0xFF	; 255
     ac4:	88 e6       	ldi	r24, 0x68	; 104
     ac6:	0e 94 17 05 	call	0xa2e	; 0xa2e <read_DS3231>
     aca:	88 23       	and	r24, r24
     acc:	49 f0       	breq	.+18     	; 0xae0 <get_time+0x36>
		strcpy(isotime, "DS3231 read error");
     ace:	92 e1       	ldi	r25, 0x12	; 18
     ad0:	e5 e1       	ldi	r30, 0x15	; 21
     ad2:	fb e7       	ldi	r31, 0x7B	; 123
     ad4:	d8 01       	movw	r26, r16
     ad6:	01 90       	ld	r0, Z+
     ad8:	0d 92       	st	X+, r0
     ada:	9a 95       	dec	r25
     adc:	e1 f7       	brne	.-8      	; 0xad6 <get_time+0x2c>
		return(retval);
     ade:	07 c0       	rjmp	.+14     	; 0xaee <get_time+0x44>
	}

	convert_ds2iso(isotime, ds3231time);
     ae0:	be 01       	movw	r22, r28
     ae2:	6f 5f       	subi	r22, 0xFF	; 255
     ae4:	7f 4f       	sbci	r23, 0xFF	; 255
     ae6:	c8 01       	movw	r24, r16
     ae8:	0e 94 96 04 	call	0x92c	; 0x92c <convert_ds2iso>
	return(0);
     aec:	80 e0       	ldi	r24, 0x00	; 0

}
     aee:	27 96       	adiw	r28, 0x07	; 7
     af0:	cd bf       	out	0x3d, r28	; 61
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	08 95       	ret

00000afe <write_DS3231>:

	Returns
		TWI errors
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	8b 01       	movw	r16, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
     b12:	c8 2f       	mov	r28, r24
     b14:	88 23       	and	r24, r24
     b16:	21 f0       	breq	.+8      	; 0xb20 <write_DS3231+0x22>
		stop_TWI();
     b18:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
		return(retval);
     b1c:	8c 2f       	mov	r24, r28
     b1e:	22 c0       	rjmp	.+68     	; 0xb64 <write_DS3231+0x66>
	}

	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
     b26:	c8 2f       	mov	r28, r24
     b28:	88 23       	and	r24, r24
     b2a:	b1 f0       	breq	.+44     	; 0xb58 <write_DS3231+0x5a>
		stop_TWI();
     b2c:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
		return(retval);
     b30:	8c 2f       	mov	r24, r28
     b32:	18 c0       	rjmp	.+48     	; 0xb64 <write_DS3231+0x66>
	}

	for (i = 0; i < 7; i++) {
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b34:	78 01       	movw	r14, r16
     b36:	8f ef       	ldi	r24, 0xFF	; 255
     b38:	e8 1a       	sub	r14, r24
     b3a:	f8 0a       	sbc	r15, r24
     b3c:	f8 01       	movw	r30, r16
     b3e:	80 81       	ld	r24, Z
     b40:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
     b44:	c8 2f       	mov	r28, r24
     b46:	88 23       	and	r24, r24
     b48:	21 f0       	breq	.+8      	; 0xb52 <write_DS3231+0x54>
			stop_TWI();
     b4a:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
			return(retval);
     b4e:	8c 2f       	mov	r24, r28
     b50:	09 c0       	rjmp	.+18     	; 0xb64 <write_DS3231+0x66>
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b52:	df 5f       	subi	r29, 0xFF	; 255
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b54:	87 01       	movw	r16, r14
     b56:	01 c0       	rjmp	.+2      	; 0xb5a <write_DS3231+0x5c>
     b58:	d0 e0       	ldi	r29, 0x00	; 0
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b5a:	d7 30       	cpi	r29, 0x07	; 7
     b5c:	58 f3       	brcs	.-42     	; 0xb34 <write_DS3231+0x36>
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
			stop_TWI();
			return(retval);
		}
	}
	stop_TWI();
     b5e:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>

	return(0);
     b62:	80 e0       	ldi	r24, 0x00	; 0

}
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	ff 90       	pop	r15
     b6e:	ef 90       	pop	r14
     b70:	08 95       	ret

00000b72 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	27 97       	sbiw	r28, 0x07	; 7
     b7c:	cd bf       	out	0x3d, r28	; 61
     b7e:	de bf       	out	0x3e, r29	; 62

	uint8_t retval, ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     b80:	bc 01       	movw	r22, r24
     b82:	ce 01       	movw	r24, r28
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	0e 94 b7 04 	call	0x96e	; 0x96e <convert_iso2ds>
	if ((retval = write_DS3231(DS3231ADDR, ds3231time))) {
     b8a:	be 01       	movw	r22, r28
     b8c:	6f 5f       	subi	r22, 0xFF	; 255
     b8e:	7f 4f       	sbci	r23, 0xFF	; 255
     b90:	88 e6       	ldi	r24, 0x68	; 104
     b92:	0e 94 7f 05 	call	0xafe	; 0xafe <write_DS3231>
		return(retval);
	}
	return(0);

}
     b96:	27 96       	adiw	r28, 0x07	; 7
     b98:	cd bf       	out	0x3d, r28	; 61
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	08 95       	ret

00000ba2 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     ba2:	45 e1       	ldi	r20, 0x15	; 21
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	6b e0       	ldi	r22, 0x0B	; 11
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <eeprom_read_block>
     bae:	08 95       	ret

00000bb0 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     bb0:	4b e0       	ldi	r20, 0x0B	; 11
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <eeprom_read_block>
     bbc:	08 95       	ret

00000bbe <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
     bc6:	65 97       	sbiw	r28, 0x15	; 21
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     bcc:	ce 01       	movw	r24, r28
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	0e 94 55 05 	call	0xaaa	; 0xaaa <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     bd4:	45 e1       	ldi	r20, 0x15	; 21
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	6b e0       	ldi	r22, 0x0B	; 11
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	ce 01       	movw	r24, r28
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <eeprom_update_block>

}
     be4:	65 96       	adiw	r28, 0x15	; 21
     be6:	cd bf       	out	0x3d, r28	; 61
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	08 95       	ret

00000bf0 <update_VERSION>:

void update_VERSION(void)
{
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	2b 97       	sbiw	r28, 0x0b	; 11
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     bfe:	8b e0       	ldi	r24, 0x0B	; 11
     c00:	e7 e2       	ldi	r30, 0x27	; 39
     c02:	fb e7       	ldi	r31, 0x7B	; 123
     c04:	de 01       	movw	r26, r28
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	01 90       	ld	r0, Z+
     c0a:	0d 92       	st	X+, r0
     c0c:	8a 95       	dec	r24
     c0e:	e1 f7       	brne	.-8      	; 0xc08 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     c10:	4b e0       	ldi	r20, 0x0B	; 11
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	ce 01       	movw	r24, r28
     c1a:	01 96       	adiw	r24, 0x01	; 1
     c1c:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <eeprom_update_block>

}
     c20:	2b 96       	adiw	r28, 0x0b	; 11
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	08 95       	ret

00000c2c <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     c2c:	0e 94 df 05 	call	0xbbe	; 0xbbe <update_BOOTTIME>
	update_VERSION();
     c30:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <update_VERSION>
     c34:	08 95       	ret

00000c36 <read_FRAM>:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)

------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	c8 2f       	mov	r28, r24
     c44:	e6 2e       	mov	r14, r22
     c46:	f7 2e       	mov	r15, r23
     c48:	8a 01       	movw	r16, r20
     c4a:	d2 2f       	mov	r29, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
     c52:	81 11       	cpse	r24, r1
     c54:	2b c0       	rjmp	.+86     	; 0xcac <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {			// Send memory address
     c56:	8f 2d       	mov	r24, r15
     c58:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
     c5c:	81 11       	cpse	r24, r1
     c5e:	26 c0       	rjmp	.+76     	; 0xcac <read_FRAM+0x76>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {
     c60:	8e 2d       	mov	r24, r14
     c62:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
     c66:	81 11       	cpse	r24, r1
     c68:	21 c0       	rjmp	.+66     	; 0xcac <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	8c 2f       	mov	r24, r28
     c6e:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
     c72:	81 11       	cpse	r24, r1
     c74:	1b c0       	rjmp	.+54     	; 0xcac <read_FRAM+0x76>
     c76:	c0 e0       	ldi	r28, 0x00	; 0
     c78:	08 c0       	rjmp	.+16     	; 0xc8a <read_FRAM+0x54>
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     c7a:	78 01       	movw	r14, r16
     c7c:	ec 0e       	add	r14, r28
     c7e:	f1 1c       	adc	r15, r1
     c80:	0e 94 4f 13 	call	0x269e	; 0x269e <read_TWI>
     c84:	f7 01       	movw	r30, r14
     c86:	80 83       	st	Z, r24

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
     c88:	cf 5f       	subi	r28, 0xFF	; 255
     c8a:	2c 2f       	mov	r18, r28
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	8d 2f       	mov	r24, r29
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	01 97       	sbiw	r24, 0x01	; 1
     c94:	28 17       	cp	r18, r24
     c96:	39 07       	cpc	r19, r25
     c98:	84 f3       	brlt	.-32     	; 0xc7a <read_FRAM+0x44>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     c9a:	ec 01       	movw	r28, r24
     c9c:	c0 0f       	add	r28, r16
     c9e:	d1 1f       	adc	r29, r17
     ca0:	0e 94 5f 13 	call	0x26be	; 0x26be <readlast_TWI>
     ca4:	88 83       	st	Y, r24

	stop_TWI();
     ca6:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>

	return(0);
     caa:	80 e0       	ldi	r24, 0x00	; 0

}
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	08 95       	ret

00000cba <write_FRAM>:
	Returns:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     cba:	ef 92       	push	r14
     cbc:	ff 92       	push	r15
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	f6 2e       	mov	r15, r22
     cc8:	17 2f       	mov	r17, r23
     cca:	ea 01       	movw	r28, r20
     ccc:	02 2f       	mov	r16, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if ((retval = start_TWI(addr, TWIWRITE))) {	// TWI START
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
     cd4:	81 11       	cpse	r24, r1
     cd6:	1c c0       	rjmp	.+56     	; 0xd10 <write_FRAM+0x56>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {		// FRAM address to write
     cd8:	81 2f       	mov	r24, r17
     cda:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
     cde:	81 11       	cpse	r24, r1
     ce0:	17 c0       	rjmp	.+46     	; 0xd10 <write_FRAM+0x56>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
     ce2:	8f 2d       	mov	r24, r15
     ce4:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
     ce8:	81 11       	cpse	r24, r1
     cea:	12 c0       	rjmp	.+36     	; 0xd10 <write_FRAM+0x56>
     cec:	10 e0       	ldi	r17, 0x00	; 0
     cee:	0b c0       	rjmp	.+22     	; 0xd06 <write_FRAM+0x4c>
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     cf0:	7e 01       	movw	r14, r28
     cf2:	8f ef       	ldi	r24, 0xFF	; 255
     cf4:	e8 1a       	sub	r14, r24
     cf6:	f8 0a       	sbc	r15, r24
     cf8:	88 81       	ld	r24, Y
     cfa:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
     cfe:	81 11       	cpse	r24, r1
     d00:	07 c0       	rjmp	.+14     	; 0xd10 <write_FRAM+0x56>
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     d02:	1f 5f       	subi	r17, 0xFF	; 255
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     d04:	e7 01       	movw	r28, r14
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     d06:	10 17       	cp	r17, r16
     d08:	98 f3       	brcs	.-26     	; 0xcf0 <write_FRAM+0x36>
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
			return(retval);
		}
	}

	stop_TWI();
     d0a:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>

	return(0);
     d0e:	80 e0       	ldi	r24, 0x00	; 0

}
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	ff 90       	pop	r15
     d1a:	ef 90       	pop	r14
     d1c:	08 95       	ret

00000d1e <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     d1e:	8f 92       	push	r8
     d20:	9f 92       	push	r9
     d22:	af 92       	push	r10
     d24:	bf 92       	push	r11
     d26:	cf 92       	push	r12
     d28:	df 92       	push	r13
     d2a:	ef 92       	push	r14
     d2c:	ff 92       	push	r15

	uint8_t adcpin;
	float humidity, temperature;

	switch (sensor) {
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	59 f0       	breq	.+22     	; 0xd48 <get_humidity+0x2a>
     d32:	18 f0       	brcs	.+6      	; 0xd3a <get_humidity+0x1c>
     d34:	82 30       	cpi	r24, 0x02	; 2
     d36:	79 f0       	breq	.+30     	; 0xd56 <get_humidity+0x38>
     d38:	15 c0       	rjmp	.+42     	; 0xd64 <get_humidity+0x46>
		case 0:
			temperature = get_temperature(0);
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	0e 94 34 13 	call	0x2668	; 0x2668 <get_temperature>
     d40:	4b 01       	movw	r8, r22
     d42:	5c 01       	movw	r10, r24
//			adcpin = AIN1;		// test unit
			adcpin = AIN0;		// production
     d44:	40 e4       	ldi	r20, 0x40	; 64
			break;
     d46:	17 c0       	rjmp	.+46     	; 0xd76 <get_humidity+0x58>
		case 1:
			temperature = get_temperature(1);
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	0e 94 34 13 	call	0x2668	; 0x2668 <get_temperature>
     d4e:	4b 01       	movw	r8, r22
     d50:	5c 01       	movw	r10, r24
			adcpin = AIN1;
     d52:	40 e5       	ldi	r20, 0x50	; 80
			break;
     d54:	10 c0       	rjmp	.+32     	; 0xd76 <get_humidity+0x58>
		case 2:
			temperature = get_temperature(2);
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	0e 94 34 13 	call	0x2668	; 0x2668 <get_temperature>
     d5c:	4b 01       	movw	r8, r22
     d5e:	5c 01       	movw	r10, r24
			adcpin = AIN2;
     d60:	40 e6       	ldi	r20, 0x60	; 96
			break;
     d62:	09 c0       	rjmp	.+18     	; 0xd76 <get_humidity+0x58>
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     d64:	0f 2e       	mov	r0, r31
     d66:	81 2c       	mov	r8, r1
     d68:	91 2c       	mov	r9, r1
     d6a:	f0 ea       	ldi	r31, 0xA0	; 160
     d6c:	af 2e       	mov	r10, r31
     d6e:	f1 e4       	ldi	r31, 0x41	; 65
     d70:	bf 2e       	mov	r11, r31
     d72:	f0 2d       	mov	r31, r0
			temperature = get_temperature(2);
			adcpin = AIN2;
			break;
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     d74:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	humidity = ((read_ADS1115(ADC_RH, PGA6144, adcpin, DR128)/5.0) - 0.16) / 0.0062;
     d76:	20 e8       	ldi	r18, 0x80	; 128
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	88 e4       	ldi	r24, 0x48	; 72
     d7c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_ADS1115>
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 ea       	ldi	r20, 0xA0	; 160
     d86:	50 e4       	ldi	r21, 0x40	; 64
     d88:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__divsf3>
     d8c:	2a e0       	ldi	r18, 0x0A	; 10
     d8e:	37 ed       	ldi	r19, 0xD7	; 215
     d90:	43 e2       	ldi	r20, 0x23	; 35
     d92:	5e e3       	ldi	r21, 0x3E	; 62
     d94:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__subsf3>
     d98:	2f e5       	ldi	r18, 0x5F	; 95
     d9a:	39 e2       	ldi	r19, 0x29	; 41
     d9c:	4b ec       	ldi	r20, 0xCB	; 203
     d9e:	5b e3       	ldi	r21, 0x3B	; 59
     da0:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__divsf3>
     da4:	6b 01       	movw	r12, r22
     da6:	7c 01       	movw	r14, r24
	humidity = (humidity / (1.0546 - 0.00216 * temperature));
     da8:	29 ec       	ldi	r18, 0xC9	; 201
     daa:	3e e8       	ldi	r19, 0x8E	; 142
     dac:	4d e0       	ldi	r20, 0x0D	; 13
     dae:	5b e3       	ldi	r21, 0x3B	; 59
     db0:	c5 01       	movw	r24, r10
     db2:	b4 01       	movw	r22, r8
     db4:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__mulsf3>
     db8:	9b 01       	movw	r18, r22
     dba:	ac 01       	movw	r20, r24
     dbc:	62 e2       	ldi	r22, 0x22	; 34
     dbe:	7d ef       	ldi	r23, 0xFD	; 253
     dc0:	86 e8       	ldi	r24, 0x86	; 134
     dc2:	9f e3       	ldi	r25, 0x3F	; 63
     dc4:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__subsf3>
     dc8:	9b 01       	movw	r18, r22
     dca:	ac 01       	movw	r20, r24
     dcc:	c7 01       	movw	r24, r14
     dce:	b6 01       	movw	r22, r12
     dd0:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__divsf3>
	return(humidity);

}
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	bf 90       	pop	r11
     dde:	af 90       	pop	r10
     de0:	9f 90       	pop	r9
     de2:	8f 90       	pop	r8
     de4:	08 95       	ret

00000de6 <initialize>:
#include "globals.h"
#include "initialize.h"

void initialize(void)
{
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	2b 97       	sbiw	r28, 0x0b	; 11
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	init_PORTS();
     df4:	0e 94 66 0d 	call	0x1acc	; 0x1acc <init_PORTS>
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton
     df8:	8b e0       	ldi	r24, 0x0B	; 11
     dfa:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f44b6>
	init_SPECID();
     dfe:	0e 94 2c 13 	call	0x2658	; 0x2658 <init_SPECID>
	init_LED();
     e02:	0e 94 af 07 	call	0xf5e	; 0xf5e <init_LED>
	init_BEEPER();
     e06:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <init_BEEPER>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
     e0a:	80 e2       	ldi	r24, 0x20	; 32
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 88 12 	call	0x2510	; 0x2510 <init_RTC>
	init_USART();
     e12:	0e 94 a9 13 	call	0x2752	; 0x2752 <init_USART>
	init_TWI();
     e16:	0e 94 44 13 	call	0x2688	; 0x2688 <init_TWI>
	init_MMA8451();
     e1a:	0e 94 47 09 	call	0x128e	; 0x128e <init_MMA8451>
	init_PNEU();
     e1e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <init_PNEU>
	init_OLED(0);
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	0e 94 0d 0a 	call	0x141a	; 0x141a <init_OLED>
	init_OLED(1);
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	0e 94 0d 0a 	call	0x141a	; 0x141a <init_OLED>
	init_EEPROM();	// Needs TWI for get_time()
     e2e:	0e 94 16 06 	call	0xc2c	; 0xc2c <init_EEPROM>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
     e32:	80 ee       	ldi	r24, 0xE0	; 224
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timeoutOLED>
     e3a:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timeoutOLED+0x1>
	get_VERSION(versionstr);
     e3e:	ce 01       	movw	r24, r28
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <get_VERSION>
	writestr_OLED(1,"specMech Version", 1);
     e46:	41 e0       	ldi	r20, 0x01	; 1
     e48:	62 e3       	ldi	r22, 0x32	; 50
     e4a:	7b e7       	ldi	r23, 0x7B	; 123
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
	writestr_OLED(1, versionstr, 2);
     e52:	42 e0       	ldi	r20, 0x02	; 2
     e54:	be 01       	movw	r22, r28
     e56:	6f 5f       	subi	r22, 0xFF	; 255
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>

}
     e60:	2b 96       	adiw	r28, 0x0b	; 11
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	08 95       	ret

00000e6c <__vector_29>:

/*----------------------------------------------------------------------
Curiosity Nano on-board pushbutton reboots the system
----------------------------------------------------------------------*/
ISR(PORTF_PORT_vect)
{
     e6c:	1f 92       	push	r1
     e6e:	0f 92       	push	r0
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	0f 92       	push	r0
     e74:	11 24       	eor	r1, r1
     e76:	2f 93       	push	r18
     e78:	3f 93       	push	r19
     e7a:	4f 93       	push	r20
     e7c:	5f 93       	push	r21
     e7e:	6f 93       	push	r22
     e80:	7f 93       	push	r23
     e82:	8f 93       	push	r24
     e84:	9f 93       	push	r25
     e86:	af 93       	push	r26
     e88:	bf 93       	push	r27
     e8a:	ef 93       	push	r30
     e8c:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
     e8e:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
     e92:	86 ff       	sbrs	r24, 6
     e94:	05 c0       	rjmp	.+10     	; 0xea0 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
     e96:	80 e4       	ldi	r24, 0x40	; 64
     e98:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
     e9c:	0e 94 89 15 	call	0x2b12	; 0x2b12 <reboot>
	}

}
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	bf 91       	pop	r27
     ea6:	af 91       	pop	r26
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	7f 91       	pop	r23
     eae:	6f 91       	pop	r22
     eb0:	5f 91       	pop	r21
     eb2:	4f 91       	pop	r20
     eb4:	3f 91       	pop	r19
     eb6:	2f 91       	pop	r18
     eb8:	0f 90       	pop	r0
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	0f 90       	pop	r0
     ebe:	1f 90       	pop	r1
     ec0:	18 95       	reti

00000ec2 <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
     ec2:	cf 92       	push	r12
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	21 f0       	breq	.+8      	; 0xed6 <read_ionpump+0x14>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	79 f5       	brne	.+94     	; 0xf30 <read_ionpump+0x6e>
		pins = AIN23;
     ed2:	40 e3       	ldi	r20, 0x30	; 48
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <read_ionpump+0x16>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
     ed6:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(-999.9);
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);
     ed8:	20 e8       	ldi	r18, 0x80	; 128
     eda:	62 e0       	ldi	r22, 0x02	; 2
     edc:	89 e4       	ldi	r24, 0x49	; 73
     ede:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_ADS1115>
     ee2:	6b 01       	movw	r12, r22
     ee4:	7c 01       	movw	r14, r24

	if (voltage < 0.4) {						// Useful range for the Modion pump
     ee6:	2d ec       	ldi	r18, 0xCD	; 205
     ee8:	3c ec       	ldi	r19, 0xCC	; 204
     eea:	4c ec       	ldi	r20, 0xCC	; 204
     eec:	5e e3       	ldi	r21, 0x3E	; 62
     eee:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__cmpsf2>
     ef2:	88 23       	and	r24, r24
     ef4:	14 f1       	brlt	.+68     	; 0xf3a <read_ionpump+0x78>
		return(-999.9);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e0       	ldi	r20, 0x00	; 0
     efc:	50 e4       	ldi	r21, 0x40	; 64
     efe:	c7 01       	movw	r24, r14
     f00:	b6 01       	movw	r22, r12
     f02:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <__gesf2>
     f06:	18 16       	cp	r1, r24
     f08:	ec f0       	brlt	.+58     	; 0xf44 <read_ionpump+0x82>
		return(-999.9);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
     f0a:	29 e7       	ldi	r18, 0x79	; 121
     f0c:	39 ee       	ldi	r19, 0xE9	; 233
     f0e:	42 e0       	ldi	r20, 0x02	; 2
     f10:	50 e4       	ldi	r21, 0x40	; 64
     f12:	c7 01       	movw	r24, r14
     f14:	b6 01       	movw	r22, r12
     f16:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__mulsf3>
     f1a:	2e e6       	ldi	r18, 0x6E	; 110
     f1c:	33 ea       	ldi	r19, 0xA3	; 163
     f1e:	4b ed       	ldi	r20, 0xDB	; 219
     f20:	50 e4       	ldi	r21, 0x40	; 64
     f22:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__subsf3>

	return(vacuum);
     f26:	56 2f       	mov	r21, r22
     f28:	47 2f       	mov	r20, r23
     f2a:	38 2f       	mov	r19, r24
     f2c:	29 2f       	mov	r18, r25
     f2e:	0e c0       	rjmp	.+28     	; 0xf4c <read_ionpump+0x8a>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(-999.9);
     f30:	5a e9       	ldi	r21, 0x9A	; 154
     f32:	49 ef       	ldi	r20, 0xF9	; 249
     f34:	39 e7       	ldi	r19, 0x79	; 121
     f36:	24 ec       	ldi	r18, 0xC4	; 196
     f38:	09 c0       	rjmp	.+18     	; 0xf4c <read_ionpump+0x8a>
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);

	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(-999.9);							// after ISO224 op-amp is 0.5 to 2.0 V
     f3a:	5a e9       	ldi	r21, 0x9A	; 154
     f3c:	49 ef       	ldi	r20, 0xF9	; 249
     f3e:	39 e7       	ldi	r19, 0x79	; 121
     f40:	24 ec       	ldi	r18, 0xC4	; 196
     f42:	04 c0       	rjmp	.+8      	; 0xf4c <read_ionpump+0x8a>
	} else if (voltage > 2.0) {
		return(-999.9);
     f44:	5a e9       	ldi	r21, 0x9A	; 154
     f46:	49 ef       	ldi	r20, 0xF9	; 249
     f48:	39 e7       	ldi	r19, 0x79	; 121
     f4a:	24 ec       	ldi	r18, 0xC4	; 196
	vacuum = ISO224SLOPE * voltage + ISO224INTER;

	return(vacuum);
//return(voltage);

}
     f4c:	65 2f       	mov	r22, r21
     f4e:	74 2f       	mov	r23, r20
     f50:	83 2f       	mov	r24, r19
     f52:	92 2f       	mov	r25, r18
     f54:	ff 90       	pop	r15
     f56:	ef 90       	pop	r14
     f58:	df 90       	pop	r13
     f5a:	cf 90       	pop	r12
     f5c:	08 95       	ret

00000f5e <init_LED>:
#include "globals.h"

void init_LED(void)
{
	PORTF.OUTSET = PIN5_bm;
     f5e:	e0 ea       	ldi	r30, 0xA0	; 160
     f60:	f4 e0       	ldi	r31, 0x04	; 4
     f62:	80 e2       	ldi	r24, 0x20	; 32
     f64:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN5_bm;
     f66:	81 83       	std	Z+1, r24	; 0x01
     f68:	08 95       	ret

00000f6a <main>:
extern void initialize(void);

int main(void)
{

	initialize();
     f6a:	0e 94 f3 06 	call	0xde6	; 0xde6 <initialize>
	sei();
     f6e:	78 94       	sei

	for (;;) {
		if (recv0_buf.done) {
     f70:	80 91 19 2b 	lds	r24, 0x2B19	; 0x802b19 <recv0_buf+0x84>
     f74:	88 23       	and	r24, r24
     f76:	e1 f3       	breq	.-8      	; 0xf70 <main+0x6>
			recv0_buf.done = NO;
     f78:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv0_buf+0x84>
			commands();
     f7c:	0e 94 ed 03 	call	0x7da	; 0x7da <commands>
     f80:	f7 cf       	rjmp	.-18     	; 0xf70 <main+0x6>

00000f82 <read_MCP23008>:
	Returns:
		val - data in that MCP23008 register
		Function return value is 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	c8 2f       	mov	r28, r24
     f88:	d6 2f       	mov	r29, r22

	uint8_t val;

	start_TWI(addr, TWIWRITE);
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
	write_TWI(reg);
     f90:	8d 2f       	mov	r24, r29
     f92:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
	start_TWI(addr, TWIREAD);
     f96:	61 e0       	ldi	r22, 0x01	; 1
     f98:	8c 2f       	mov	r24, r28
     f9a:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
	val = readlast_TWI();
     f9e:	0e 94 5f 13 	call	0x26be	; 0x26be <readlast_TWI>
     fa2:	c8 2f       	mov	r28, r24
	stop_TWI();
     fa4:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
	return(val);

}
     fa8:	8c 2f       	mov	r24, r28
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	08 95       	ret

00000fb0 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
     fb0:	1f 93       	push	r17
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	d6 2f       	mov	r29, r22
     fb8:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     fba:	60 e0       	ldi	r22, 0x00	; 0
     fbc:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
     fc0:	c8 2f       	mov	r28, r24
     fc2:	88 23       	and	r24, r24
     fc4:	21 f0       	breq	.+8      	; 0xfce <write_MCP23008+0x1e>
		stop_TWI();
     fc6:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
		return(retval);
     fca:	8c 2f       	mov	r24, r28
     fcc:	17 c0       	rjmp	.+46     	; 0xffc <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(reg))) {
     fce:	8d 2f       	mov	r24, r29
     fd0:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
     fd4:	c8 2f       	mov	r28, r24
     fd6:	88 23       	and	r24, r24
     fd8:	21 f0       	breq	.+8      	; 0xfe2 <write_MCP23008+0x32>
		stop_TWI();
     fda:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
		return(retval);
     fde:	8c 2f       	mov	r24, r28
     fe0:	0d c0       	rjmp	.+26     	; 0xffc <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(val))) {
     fe2:	81 2f       	mov	r24, r17
     fe4:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
     fe8:	c8 2f       	mov	r28, r24
     fea:	88 23       	and	r24, r24
     fec:	21 f0       	breq	.+8      	; 0xff6 <write_MCP23008+0x46>
		stop_TWI();
     fee:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
		return(retval);
     ff2:	8c 2f       	mov	r24, r28
     ff4:	03 c0       	rjmp	.+6      	; 0xffc <write_MCP23008+0x4c>
	}
	stop_TWI();
     ff6:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
	return(0);
     ffa:	80 e0       	ldi	r24, 0x00	; 0
	
}
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	08 95       	ret

00001004 <read_MCP9808>:
//#define MCP9808ADDR		(0x30)	// TWI address
#define MCP9808ADDR		(0x18)	// TWI address
#define TEMPREGISTER	(0x05)	// Ambient temperature register

float read_MCP9808(void)
{
    1004:	cf 92       	push	r12
    1006:	df 92       	push	r13
    1008:	ef 92       	push	r14
    100a:	ff 92       	push	r15
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29

	uint8_t highbyte, lowbyte, sign;
	float temperature;

	start_TWI(MCP9808ADDR, TWIWRITE);
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	88 e1       	ldi	r24, 0x18	; 24
    1016:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
	write_TWI(TEMPREGISTER);
    101a:	85 e0       	ldi	r24, 0x05	; 5
    101c:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    1020:	61 e0       	ldi	r22, 0x01	; 1
    1022:	88 e1       	ldi	r24, 0x18	; 24
    1024:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
	highbyte = read_TWI();
    1028:	0e 94 4f 13 	call	0x269e	; 0x269e <read_TWI>
    102c:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    102e:	0e 94 5f 13 	call	0x26be	; 0x26be <readlast_TWI>
    1032:	d8 2f       	mov	r29, r24
	stop_TWI();
    1034:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1038:	1c 2f       	mov	r17, r28
    103a:	10 71       	andi	r17, 0x10	; 16
	highbyte &= 0x0F;					// Clear threshold & sign bits
    103c:	6c 2f       	mov	r22, r28
    103e:	6f 70       	andi	r22, 0x0F	; 15
	temperature = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__floatunsisf>
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	40 e8       	ldi	r20, 0x80	; 128
    1050:	51 e4       	ldi	r21, 0x41	; 65
    1052:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__mulsf3>
    1056:	6b 01       	movw	r12, r22
    1058:	7c 01       	movw	r14, r24
    105a:	6d 2f       	mov	r22, r29
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__floatunsisf>
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e8       	ldi	r20, 0x80	; 128
    106c:	5d e3       	ldi	r21, 0x3D	; 61
    106e:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__mulsf3>
    1072:	9b 01       	movw	r18, r22
    1074:	ac 01       	movw	r20, r24
    1076:	c7 01       	movw	r24, r14
    1078:	b6 01       	movw	r22, r12
    107a:	0e 94 90 15 	call	0x2b20	; 0x2b20 <__addsf3>
	if (sign) {
    107e:	11 23       	and	r17, r17
    1080:	41 f0       	breq	.+16     	; 0x1092 <read_MCP9808+0x8e>
		temperature = 256.0 - temperature;
    1082:	9b 01       	movw	r18, r22
    1084:	ac 01       	movw	r20, r24
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	80 e8       	ldi	r24, 0x80	; 128
    108c:	93 e4       	ldi	r25, 0x43	; 67
    108e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__subsf3>
	}
	return(temperature);
}
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	ff 90       	pop	r15
    109a:	ef 90       	pop	r14
    109c:	df 90       	pop	r13
    109e:	cf 90       	pop	r12
    10a0:	08 95       	ret

000010a2 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	18 2f       	mov	r17, r24
    10b0:	f6 2e       	mov	r15, r22
    10b2:	ea 01       	movw	r28, r20
    10b4:	02 2f       	mov	r16, r18

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
    10bc:	81 11       	cpse	r24, r1
    10be:	1e c0       	rjmp	.+60     	; 0x10fc <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = write_TWI(reg))) {
    10c0:	8f 2d       	mov	r24, r15
    10c2:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
    10c6:	81 11       	cpse	r24, r1
    10c8:	19 c0       	rjmp	.+50     	; 0x10fc <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	81 2f       	mov	r24, r17
    10ce:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
    10d2:	81 11       	cpse	r24, r1
    10d4:	13 c0       	rjmp	.+38     	; 0x10fc <read_MMA8451+0x5a>
    10d6:	11 e0       	ldi	r17, 0x01	; 1
    10d8:	09 c0       	rjmp	.+18     	; 0x10ec <read_MMA8451+0x4a>
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    10da:	7e 01       	movw	r14, r28
    10dc:	8f ef       	ldi	r24, 0xFF	; 255
    10de:	e8 1a       	sub	r14, r24
    10e0:	f8 0a       	sbc	r15, r24
    10e2:	0e 94 4f 13 	call	0x269e	; 0x269e <read_TWI>
    10e6:	88 83       	st	Y, r24
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    10e8:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    10ea:	e7 01       	movw	r28, r14
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    10ec:	10 17       	cp	r17, r16
    10ee:	a8 f3       	brcs	.-22     	; 0x10da <read_MMA8451+0x38>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    10f0:	0e 94 5f 13 	call	0x26be	; 0x26be <readlast_TWI>
    10f4:	88 83       	st	Y, r24
	stop_TWI();
    10f6:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
	return(0);
    10fa:	80 e0       	ldi	r24, 0x00	; 0

}
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	1f 91       	pop	r17
    1102:	0f 91       	pop	r16
    1104:	ff 90       	pop	r15
    1106:	ef 90       	pop	r14
    1108:	08 95       	ret

0000110a <get_orientation>:
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
//uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
uint8_t get_orientation(float *x, float *y, float *z)
{
    110a:	cf 92       	push	r12
    110c:	df 92       	push	r13
    110e:	ef 92       	push	r14
    1110:	ff 92       	push	r15
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	26 97       	sbiw	r28, 0x06	; 6
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	6c 01       	movw	r12, r24
    1126:	7b 01       	movw	r14, r22
    1128:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -9999.9;
    112a:	8a e9       	ldi	r24, 0x9A	; 154
    112c:	9f e3       	ldi	r25, 0x3F	; 63
    112e:	ac e1       	ldi	r26, 0x1C	; 28
    1130:	b6 ec       	ldi	r27, 0xC6	; 198
    1132:	fa 01       	movw	r30, r20
    1134:	80 83       	st	Z, r24
    1136:	91 83       	std	Z+1, r25	; 0x01
    1138:	a2 83       	std	Z+2, r26	; 0x02
    113a:	b3 83       	std	Z+3, r27	; 0x03
    113c:	fb 01       	movw	r30, r22
    113e:	80 83       	st	Z, r24
    1140:	91 83       	std	Z+1, r25	; 0x01
    1142:	a2 83       	std	Z+2, r26	; 0x02
    1144:	b3 83       	std	Z+3, r27	; 0x03
    1146:	f6 01       	movw	r30, r12
    1148:	80 83       	st	Z, r24
    114a:	91 83       	std	Z+1, r25	; 0x01
    114c:	a2 83       	std	Z+2, r26	; 0x02
    114e:	b3 83       	std	Z+3, r27	; 0x03

	read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6);
    1150:	26 e0       	ldi	r18, 0x06	; 6
    1152:	ae 01       	movw	r20, r28
    1154:	4f 5f       	subi	r20, 0xFF	; 255
    1156:	5f 4f       	sbci	r21, 0xFF	; 255
    1158:	61 e0       	ldi	r22, 0x01	; 1
    115a:	8d e1       	ldi	r24, 0x1D	; 29
    115c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <read_MMA8451>

	ix = datain[0];
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    1164:	98 2f       	mov	r25, r24
    1166:	88 27       	eor	r24, r24
	ix |= datain[1];
    1168:	2a 81       	ldd	r18, Y+2	; 0x02
    116a:	82 2b       	or	r24, r18
	ix /= 4;
    116c:	bc 01       	movw	r22, r24
    116e:	77 23       	and	r23, r23
    1170:	14 f4       	brge	.+4      	; 0x1176 <get_orientation+0x6c>
    1172:	6d 5f       	subi	r22, 0xFD	; 253
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	75 95       	asr	r23
    1178:	67 95       	ror	r22
    117a:	75 95       	asr	r23
    117c:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    117e:	07 2e       	mov	r0, r23
    1180:	00 0c       	add	r0, r0
    1182:	88 0b       	sbc	r24, r24
    1184:	99 0b       	sbc	r25, r25
    1186:	0e 94 75 16 	call	0x2cea	; 0x2cea <__floatsisf>
    118a:	26 e6       	ldi	r18, 0x66	; 102
    118c:	36 e2       	ldi	r19, 0x26	; 38
    118e:	45 e7       	ldi	r20, 0x75	; 117
    1190:	5e e3       	ldi	r21, 0x3E	; 62
    1192:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__mulsf3>
    1196:	f6 01       	movw	r30, r12
    1198:	60 83       	st	Z, r22
    119a:	71 83       	std	Z+1, r23	; 0x01
    119c:	82 83       	std	Z+2, r24	; 0x02
    119e:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    11a4:	98 2f       	mov	r25, r24
    11a6:	88 27       	eor	r24, r24
	iy |= datain[3];
    11a8:	2c 81       	ldd	r18, Y+4	; 0x04
    11aa:	82 2b       	or	r24, r18
	iy /= 4;
    11ac:	bc 01       	movw	r22, r24
    11ae:	77 23       	and	r23, r23
    11b0:	14 f4       	brge	.+4      	; 0x11b6 <get_orientation+0xac>
    11b2:	6d 5f       	subi	r22, 0xFD	; 253
    11b4:	7f 4f       	sbci	r23, 0xFF	; 255
    11b6:	75 95       	asr	r23
    11b8:	67 95       	ror	r22
    11ba:	75 95       	asr	r23
    11bc:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    11be:	07 2e       	mov	r0, r23
    11c0:	00 0c       	add	r0, r0
    11c2:	88 0b       	sbc	r24, r24
    11c4:	99 0b       	sbc	r25, r25
    11c6:	0e 94 75 16 	call	0x2cea	; 0x2cea <__floatsisf>
    11ca:	26 e6       	ldi	r18, 0x66	; 102
    11cc:	36 e2       	ldi	r19, 0x26	; 38
    11ce:	45 e7       	ldi	r20, 0x75	; 117
    11d0:	5e e3       	ldi	r21, 0x3E	; 62
    11d2:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__mulsf3>
    11d6:	f7 01       	movw	r30, r14
    11d8:	60 83       	st	Z, r22
    11da:	71 83       	std	Z+1, r23	; 0x01
    11dc:	82 83       	std	Z+2, r24	; 0x02
    11de:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    11e0:	8d 81       	ldd	r24, Y+5	; 0x05
    11e2:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    11e4:	98 2f       	mov	r25, r24
    11e6:	88 27       	eor	r24, r24
	iz |= datain[5];
    11e8:	2e 81       	ldd	r18, Y+6	; 0x06
    11ea:	82 2b       	or	r24, r18
	iz /= 4;
    11ec:	bc 01       	movw	r22, r24
    11ee:	77 23       	and	r23, r23
    11f0:	14 f4       	brge	.+4      	; 0x11f6 <get_orientation+0xec>
    11f2:	6d 5f       	subi	r22, 0xFD	; 253
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	75 95       	asr	r23
    11f8:	67 95       	ror	r22
    11fa:	75 95       	asr	r23
    11fc:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    11fe:	07 2e       	mov	r0, r23
    1200:	00 0c       	add	r0, r0
    1202:	88 0b       	sbc	r24, r24
    1204:	99 0b       	sbc	r25, r25
    1206:	0e 94 75 16 	call	0x2cea	; 0x2cea <__floatsisf>
    120a:	26 e6       	ldi	r18, 0x66	; 102
    120c:	36 e2       	ldi	r19, 0x26	; 38
    120e:	45 e7       	ldi	r20, 0x75	; 117
    1210:	5e e3       	ldi	r21, 0x3E	; 62
    1212:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__mulsf3>
    1216:	f8 01       	movw	r30, r16
    1218:	60 83       	st	Z, r22
    121a:	71 83       	std	Z+1, r23	; 0x01
    121c:	82 83       	std	Z+2, r24	; 0x02
    121e:	93 83       	std	Z+3, r25	; 0x03

	return(0);

}
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	26 96       	adiw	r28, 0x06	; 6
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	cf 90       	pop	r12
    1238:	08 95       	ret

0000123a <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	d6 2f       	mov	r29, r22
    1242:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
    124a:	c8 2f       	mov	r28, r24
    124c:	88 23       	and	r24, r24
    124e:	21 f0       	breq	.+8      	; 0x1258 <write_MMA8451+0x1e>
		stop_TWI();
    1250:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
		return(retval);
    1254:	8c 2f       	mov	r24, r28
    1256:	17 c0       	rjmp	.+46     	; 0x1286 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1258:	8d 2f       	mov	r24, r29
    125a:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
    125e:	c8 2f       	mov	r28, r24
    1260:	88 23       	and	r24, r24
    1262:	21 f0       	breq	.+8      	; 0x126c <write_MMA8451+0x32>
		stop_TWI();
    1264:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
		return(retval);
    1268:	8c 2f       	mov	r24, r28
    126a:	0d c0       	rjmp	.+26     	; 0x1286 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    126c:	81 2f       	mov	r24, r17
    126e:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
    1272:	c8 2f       	mov	r28, r24
    1274:	88 23       	and	r24, r24
    1276:	21 f0       	breq	.+8      	; 0x1280 <write_MMA8451+0x46>
		stop_TWI();
    1278:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
		return(retval);
    127c:	8c 2f       	mov	r24, r28
    127e:	03 c0       	rjmp	.+6      	; 0x1286 <write_MMA8451+0x4c>
	}
	stop_TWI();
    1280:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>
	return(0);
    1284:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	08 95       	ret

0000128e <init_MMA8451>:
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/

uint8_t init_MMA8451(void)
{
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	1f 92       	push	r1
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    1298:	40 e4       	ldi	r20, 0x40	; 64
    129a:	6b e2       	ldi	r22, 0x2B	; 43
    129c:	8d e1       	ldi	r24, 0x1D	; 29
    129e:	0e 94 1d 09 	call	0x123a	; 0x123a <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    12a2:	21 e0       	ldi	r18, 0x01	; 1
    12a4:	ae 01       	movw	r20, r28
    12a6:	4f 5f       	subi	r20, 0xFF	; 255
    12a8:	5f 4f       	sbci	r21, 0xFF	; 255
    12aa:	6b e2       	ldi	r22, 0x2B	; 43
    12ac:	8d e1       	ldi	r24, 0x1D	; 29
    12ae:	0e 94 51 08 	call	0x10a2	; 0x10a2 <read_MMA8451>
	while (retval & 0x40) {
    12b2:	08 c0       	rjmp	.+16     	; 0x12c4 <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    12b4:	21 e0       	ldi	r18, 0x01	; 1
    12b6:	ae 01       	movw	r20, r28
    12b8:	4f 5f       	subi	r20, 0xFF	; 255
    12ba:	5f 4f       	sbci	r21, 0xFF	; 255
    12bc:	6b e2       	ldi	r22, 0x2B	; 43
    12be:	8d e1       	ldi	r24, 0x1D	; 29
    12c0:	0e 94 51 08 	call	0x10a2	; 0x10a2 <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	86 fd       	sbrc	r24, 6
    12c8:	f5 cf       	rjmp	.-22     	; 0x12b4 <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    12ca:	40 ec       	ldi	r20, 0xC0	; 192
    12cc:	6f e0       	ldi	r22, 0x0F	; 15
    12ce:	8d e1       	ldi	r24, 0x1D	; 29
    12d0:	0e 94 1d 09 	call	0x123a	; 0x123a <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    12d4:	42 e0       	ldi	r20, 0x02	; 2
    12d6:	6b e2       	ldi	r22, 0x2B	; 43
    12d8:	8d e1       	ldi	r24, 0x1D	; 29
    12da:	0e 94 1d 09 	call	0x123a	; 0x123a <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    12de:	4d e3       	ldi	r20, 0x3D	; 61
    12e0:	6a e2       	ldi	r22, 0x2A	; 42
    12e2:	8d e1       	ldi	r24, 0x1D	; 29
    12e4:	0e 94 1d 09 	call	0x123a	; 0x123a <write_MMA8451>

	return(retval);

}
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	0f 90       	pop	r0
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	08 95       	ret

000012f2 <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    12f2:	ef 92       	push	r14
    12f4:	ff 92       	push	r15
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	2e 97       	sbiw	r28, 0x0e	; 14
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    130a:	88 e0       	ldi	r24, 0x08	; 8
    130c:	e3 e4       	ldi	r30, 0x43	; 67
    130e:	fb e7       	ldi	r31, 0x7B	; 123
    1310:	de 01       	movw	r26, r28
    1312:	11 96       	adiw	r26, 0x01	; 1
    1314:	01 90       	ld	r0, Z+
    1316:	0d 92       	st	X+, r0
    1318:	8a 95       	dec	r24
    131a:	e1 f7       	brne	.-8      	; 0x1314 <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    131c:	f8 01       	movw	r30, r16
    131e:	01 90       	ld	r0, Z+
    1320:	00 20       	and	r0, r0
    1322:	e9 f7       	brne	.-6      	; 0x131e <checksum_NMEA+0x2c>
    1324:	31 97       	sbiw	r30, 0x01	; 1
    1326:	3e 2f       	mov	r19, r30
    1328:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    132a:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	06 c0       	rjmp	.+12     	; 0x133c <checksum_NMEA+0x4a>
		checksum ^= str[i];
    1330:	f8 01       	movw	r30, r16
    1332:	e8 0f       	add	r30, r24
    1334:	f1 1d       	adc	r31, r1
    1336:	20 81       	ld	r18, Z
    1338:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    133a:	8f 5f       	subi	r24, 0xFF	; 255
    133c:	83 17       	cp	r24, r19
    133e:	c0 f3       	brcs	.-16     	; 0x1330 <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1340:	1f 92       	push	r1
    1342:	9f 93       	push	r25
    1344:	ce 01       	movw	r24, r28
    1346:	01 96       	adiw	r24, 0x01	; 1
    1348:	9f 93       	push	r25
    134a:	8f 93       	push	r24
    134c:	7e 01       	movw	r14, r28
    134e:	89 e0       	ldi	r24, 0x09	; 9
    1350:	e8 0e       	add	r14, r24
    1352:	f1 1c       	adc	r15, r1
    1354:	ff 92       	push	r15
    1356:	ef 92       	push	r14
    1358:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
	strcat(str, chksum);
    135c:	b7 01       	movw	r22, r14
    135e:	c8 01       	movw	r24, r16
    1360:	0e 94 56 1c 	call	0x38ac	; 0x38ac <strcat>

}
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	2e 96       	adiw	r28, 0x0e	; 14
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	ff 90       	pop	r15
    1380:	ef 90       	pop	r14
    1382:	08 95       	ret

00001384 <format_ERR>:
/*------------------------------------------------------------------------------
void format_ERR(char *str)
	Returns an error line
------------------------------------------------------------------------------*/
void format_ERR(char *str)
{
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	28 97       	sbiw	r28, 0x08	; 8
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	08 2f       	mov	r16, r24
    1398:	19 2f       	mov	r17, r25

	const char errformat[] = "$S%dERR";
    139a:	88 e0       	ldi	r24, 0x08	; 8
    139c:	eb e4       	ldi	r30, 0x4B	; 75
    139e:	fb e7       	ldi	r31, 0x7B	; 123
    13a0:	de 01       	movw	r26, r28
    13a2:	11 96       	adiw	r26, 0x01	; 1
    13a4:	01 90       	ld	r0, Z+
    13a6:	0d 92       	st	X+, r0
    13a8:	8a 95       	dec	r24
    13aa:	e1 f7       	brne	.-8      	; 0x13a4 <format_ERR+0x20>

	sprintf(str, errformat, get_SPECID);
    13ac:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    13b0:	82 ff       	sbrs	r24, 2
    13b2:	03 c0       	rjmp	.+6      	; 0x13ba <format_ERR+0x36>
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <format_ERR+0x3a>
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	9f 93       	push	r25
    13c0:	8f 93       	push	r24
    13c2:	ce 01       	movw	r24, r28
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	9f 93       	push	r25
    13c8:	8f 93       	push	r24
    13ca:	1f 93       	push	r17
    13cc:	0f 93       	push	r16
    13ce:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
	checksum_NMEA(str);
    13d2:	80 2f       	mov	r24, r16
    13d4:	91 2f       	mov	r25, r17
    13d6:	0e 94 79 09 	call	0x12f2	; 0x12f2 <checksum_NMEA>

}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	28 96       	adiw	r28, 0x08	; 8
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	08 95       	ret

000013f6 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	d6 2f       	mov	r29, r22
    13fc:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <start_TWI>
	write_TWI(type);
    1404:	8d 2f       	mov	r24, r29
    1406:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
	write_TWI(byteToSend);
    140a:	8c 2f       	mov	r24, r28
    140c:	0e 94 94 13 	call	0x2728	; 0x2728 <write_TWI>
	stop_TWI();
    1410:	0e 94 90 13 	call	0x2720	; 0x2720 <stop_TWI>

}
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	08 95       	ret

0000141a <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
    141a:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    141c:	e0 e6       	ldi	r30, 0x60	; 96
    141e:	f4 e0       	ldi	r31, 0x04	; 4
    1420:	90 e4       	ldi	r25, 0x40	; 64
    1422:	96 83       	std	Z+6, r25	; 0x06
	PORTD.DIRSET = PIN6_bm;
    1424:	91 83       	std	Z+1, r25	; 0x01
    1426:	a1 e4       	ldi	r26, 0x41	; 65
    1428:	b3 e0       	ldi	r27, 0x03	; 3
    142a:	11 97       	sbiw	r26, 0x01	; 1
    142c:	f1 f7       	brne	.-4      	; 0x142a <init_OLED+0x10>
    142e:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    1430:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
    1432:	81 11       	cpse	r24, r1
    1434:	02 c0       	rjmp	.+4      	; 0x143a <init_OLED+0x20>
		twiaddr = OLEDADDR0;
    1436:	cc e3       	ldi	r28, 0x3C	; 60
    1438:	01 c0       	rjmp	.+2      	; 0x143c <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
    143a:	cd e3       	ldi	r28, 0x3D	; 61
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    143c:	4a e2       	ldi	r20, 0x2A	; 42
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	8c 2f       	mov	r24, r28
    1442:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    1446:	41 e7       	ldi	r20, 0x71	; 113
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	8c 2f       	mov	r24, r28
    144c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    1450:	4c e5       	ldi	r20, 0x5C	; 92
    1452:	60 e4       	ldi	r22, 0x40	; 64
    1454:	8c 2f       	mov	r24, r28
    1456:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    145a:	48 e2       	ldi	r20, 0x28	; 40
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	8c 2f       	mov	r24, r28
    1460:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    1464:	48 e0       	ldi	r20, 0x08	; 8
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	8c 2f       	mov	r24, r28
    146a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    146e:	4a e2       	ldi	r20, 0x2A	; 42
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	8c 2f       	mov	r24, r28
    1474:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1478:	49 e7       	ldi	r20, 0x79	; 121
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	8c 2f       	mov	r24, r28
    147e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    1482:	45 ed       	ldi	r20, 0xD5	; 213
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	8c 2f       	mov	r24, r28
    1488:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    148c:	40 e7       	ldi	r20, 0x70	; 112
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	8c 2f       	mov	r24, r28
    1492:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1496:	48 e7       	ldi	r20, 0x78	; 120
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	8c 2f       	mov	r24, r28
    149c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    14a0:	48 e0       	ldi	r20, 0x08	; 8
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	8c 2f       	mov	r24, r28
    14a6:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    14aa:	46 e0       	ldi	r20, 0x06	; 6
    14ac:	60 e0       	ldi	r22, 0x00	; 0
    14ae:	8c 2f       	mov	r24, r28
    14b0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    14b4:	42 e7       	ldi	r20, 0x72	; 114
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	8c 2f       	mov	r24, r28
    14ba:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    14be:	40 e0       	ldi	r20, 0x00	; 0
    14c0:	60 e4       	ldi	r22, 0x40	; 64
    14c2:	8c 2f       	mov	r24, r28
    14c4:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    14c8:	4a e2       	ldi	r20, 0x2A	; 42
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	8c 2f       	mov	r24, r28
    14ce:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    14d2:	49 e7       	ldi	r20, 0x79	; 121
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	8c 2f       	mov	r24, r28
    14d8:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    14dc:	4a ed       	ldi	r20, 0xDA	; 218
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	8c 2f       	mov	r24, r28
    14e2:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	8c 2f       	mov	r24, r28
    14ec:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    14f0:	4c ed       	ldi	r20, 0xDC	; 220
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	8c 2f       	mov	r24, r28
    14f6:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	8c 2f       	mov	r24, r28
    1500:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    1504:	41 e8       	ldi	r20, 0x81	; 129
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	8c 2f       	mov	r24, r28
    150a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    150e:	4f e7       	ldi	r20, 0x7F	; 127
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	8c 2f       	mov	r24, r28
    1514:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1518:	49 ed       	ldi	r20, 0xD9	; 217
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	8c 2f       	mov	r24, r28
    151e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    1522:	41 ef       	ldi	r20, 0xF1	; 241
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	8c 2f       	mov	r24, r28
    1528:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    152c:	4b ed       	ldi	r20, 0xDB	; 219
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	8c 2f       	mov	r24, r28
    1532:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    1536:	40 e4       	ldi	r20, 0x40	; 64
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	8c 2f       	mov	r24, r28
    153c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1540:	48 e7       	ldi	r20, 0x78	; 120
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	8c 2f       	mov	r24, r28
    1546:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    154a:	48 e2       	ldi	r20, 0x28	; 40
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	8c 2f       	mov	r24, r28
    1550:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    1554:	41 e0       	ldi	r20, 0x01	; 1
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	8c 2f       	mov	r24, r28
    155a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    155e:	40 e8       	ldi	r20, 0x80	; 128
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	8c 2f       	mov	r24, r28
    1564:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    1568:	4c e0       	ldi	r20, 0x0C	; 12
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	8c 2f       	mov	r24, r28
    156e:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
    1572:	ba e6       	ldi	r27, 0x6A	; 106
    1574:	24 e0       	ldi	r18, 0x04	; 4
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	b1 50       	subi	r27, 0x01	; 1
    157a:	20 40       	sbci	r18, 0x00	; 0
    157c:	80 40       	sbci	r24, 0x00	; 0
    157e:	e1 f7       	brne	.-8      	; 0x1578 <init_OLED+0x15e>
    1580:	00 c0       	rjmp	.+0      	; 0x1582 <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
    1582:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <timerOLED>
    1586:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED+0x1>
	timeoutOLED = 5;
    158a:	85 e0       	ldi	r24, 0x05	; 5
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timeoutOLED>
    1592:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timeoutOLED+0x1>

}
    1596:	cf 91       	pop	r28
    1598:	08 95       	ret

0000159a <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    159a:	ef 92       	push	r14
    159c:	ff 92       	push	r15
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	e2 97       	sbiw	r28, 0x32	; 50
    15ac:	cd bf       	out	0x3d, r28	; 61
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    15b2:	91 e1       	ldi	r25, 0x11	; 17
    15b4:	e3 e5       	ldi	r30, 0x53	; 83
    15b6:	fb e7       	ldi	r31, 0x7B	; 123
    15b8:	de 01       	movw	r26, r28
    15ba:	92 96       	adiw	r26, 0x22	; 34
    15bc:	01 90       	ld	r0, Z+
    15be:	0d 92       	st	X+, r0
    15c0:	9a 95       	dec	r25
    15c2:	e1 f7       	brne	.-8      	; 0x15bc <writestr_OLED+0x22>

	if (displaynumber == 0) {
    15c4:	81 11       	cpse	r24, r1
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    15c8:	0c e3       	ldi	r16, 0x3C	; 60
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    15cc:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    15ce:	ce 01       	movw	r24, r28
    15d0:	01 96       	adiw	r24, 0x01	; 1
    15d2:	7c 01       	movw	r14, r24
    15d4:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <strcpy>
	if (strlen(strbuf) > 16) {
    15d8:	f7 01       	movw	r30, r14
    15da:	01 90       	ld	r0, Z+
    15dc:	00 20       	and	r0, r0
    15de:	e9 f7       	brne	.-6      	; 0x15da <writestr_OLED+0x40>
    15e0:	31 97       	sbiw	r30, 0x01	; 1
    15e2:	ee 19       	sub	r30, r14
    15e4:	ff 09       	sbc	r31, r15
    15e6:	71 97       	sbiw	r30, 0x11	; 17
    15e8:	08 f0       	brcs	.+2      	; 0x15ec <writestr_OLED+0x52>
		strbuf[16] = '\0';
    15ea:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    15ec:	be 01       	movw	r22, r28
    15ee:	6e 5d       	subi	r22, 0xDE	; 222
    15f0:	7f 4f       	sbci	r23, 0xFF	; 255
    15f2:	ce 01       	movw	r24, r28
    15f4:	01 96       	adiw	r24, 0x01	; 1
    15f6:	0e 94 56 1c 	call	0x38ac	; 0x38ac <strcat>

	if (lineno == 1) {
    15fa:	11 30       	cpi	r17, 0x01	; 1
    15fc:	39 f4       	brne	.+14     	; 0x160c <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    15fe:	40 e8       	ldi	r20, 0x80	; 128
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	80 2f       	mov	r24, r16
    1604:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1608:	10 e0       	ldi	r17, 0x00	; 0
    160a:	12 c0       	rjmp	.+36     	; 0x1630 <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    160c:	40 ec       	ldi	r20, 0xC0	; 192
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	80 2f       	mov	r24, r16
    1612:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>
    1616:	f8 cf       	rjmp	.-16     	; 0x1608 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1618:	e1 e0       	ldi	r30, 0x01	; 1
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	ec 0f       	add	r30, r28
    161e:	fd 1f       	adc	r31, r29
    1620:	e1 0f       	add	r30, r17
    1622:	f1 1d       	adc	r31, r1
    1624:	40 81       	ld	r20, Z
    1626:	60 e4       	ldi	r22, 0x40	; 64
    1628:	80 2f       	mov	r24, r16
    162a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    162e:	1f 5f       	subi	r17, 0xFF	; 255
    1630:	10 31       	cpi	r17, 0x10	; 16
    1632:	90 f3       	brcs	.-28     	; 0x1618 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	80 93 0b 2a 	sts	0x2A0B, r24	; 0x802a0b <timerOLED>
    163c:	90 93 0c 2a 	sts	0x2A0C, r25	; 0x802a0c <timerOLED+0x1>

}
    1640:	e2 96       	adiw	r28, 0x32	; 50
    1642:	cd bf       	out	0x3d, r28	; 61
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	1f 91       	pop	r17
    164c:	0f 91       	pop	r16
    164e:	ff 90       	pop	r15
    1650:	ef 90       	pop	r14
    1652:	08 95       	ret

00001654 <clear_OLED>:
/*------------------------------------------------------------------------------
void clear_OLED(uint8_t displaynumber)
	Clears the OLED screen by writing blank spaces to both lines.
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	61 97       	sbiw	r28, 0x11	; 17
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	18 2f       	mov	r17, r24

	char blanks[] = "                ";	// Does const put this in flash?
    1666:	81 e1       	ldi	r24, 0x11	; 17
    1668:	e3 e5       	ldi	r30, 0x53	; 83
    166a:	fb e7       	ldi	r31, 0x7B	; 123
    166c:	de 01       	movw	r26, r28
    166e:	11 96       	adiw	r26, 0x01	; 1
    1670:	01 90       	ld	r0, Z+
    1672:	0d 92       	st	X+, r0
    1674:	8a 95       	dec	r24
    1676:	e1 f7       	brne	.-8      	; 0x1670 <clear_OLED+0x1c>

	writestr_OLED(displaynumber, blanks, 1);
    1678:	41 e0       	ldi	r20, 0x01	; 1
    167a:	be 01       	movw	r22, r28
    167c:	6f 5f       	subi	r22, 0xFF	; 255
    167e:	7f 4f       	sbci	r23, 0xFF	; 255
    1680:	81 2f       	mov	r24, r17
    1682:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
	writestr_OLED(displaynumber, blanks, 2);
    1686:	42 e0       	ldi	r20, 0x02	; 2
    1688:	be 01       	movw	r22, r28
    168a:	6f 5f       	subi	r22, 0xFF	; 255
    168c:	7f 4f       	sbci	r23, 0xFF	; 255
    168e:	81 2f       	mov	r24, r17
    1690:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
	timerOLED = 0;
    1694:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <timerOLED>
    1698:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED+0x1>

}
    169c:	61 96       	adiw	r28, 0x11	; 17
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	08 95       	ret

000016aa <init_PNEU>:
uint8_t init_PNEU(void)
{

	uint8_t retval;

	if ((retval = write_MCP23008(HIGHCURRENT, IODIR, 0x00))) {
    16aa:	40 e0       	ldi	r20, 0x00	; 0
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	84 e2       	ldi	r24, 0x24	; 36
    16b0:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <write_MCP23008>
    16b4:	81 11       	cpse	r24, r1
    16b6:	35 c0       	rjmp	.+106    	; 0x1722 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, 0x00))) {
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	6a e0       	ldi	r22, 0x0A	; 10
    16bc:	84 e2       	ldi	r24, 0x24	; 36
    16be:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <write_MCP23008>
    16c2:	81 11       	cpse	r24, r1
    16c4:	2e c0       	rjmp	.+92     	; 0x1722 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IODIR, 0xFE))) {	// Inputs
    16c6:	4e ef       	ldi	r20, 0xFE	; 254
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	81 e2       	ldi	r24, 0x21	; 33
    16cc:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <write_MCP23008>
    16d0:	81 11       	cpse	r24, r1
    16d2:	27 c0       	rjmp	.+78     	; 0x1722 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IPOL, 0x00))) {
    16d4:	40 e0       	ldi	r20, 0x00	; 0
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	81 e2       	ldi	r24, 0x21	; 33
    16da:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <write_MCP23008>
    16de:	81 11       	cpse	r24, r1
    16e0:	20 c0       	rjmp	.+64     	; 0x1722 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100))) {
    16e2:	4c ef       	ldi	r20, 0xFC	; 252
    16e4:	62 e0       	ldi	r22, 0x02	; 2
    16e6:	81 e2       	ldi	r24, 0x21	; 33
    16e8:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <write_MCP23008>
    16ec:	81 11       	cpse	r24, r1
    16ee:	19 c0       	rjmp	.+50     	; 0x1722 <init_PNEU+0x78>
			return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, INTCON, 0x00))) {
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	64 e0       	ldi	r22, 0x04	; 4
    16f4:	81 e2       	ldi	r24, 0x21	; 33
    16f6:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <write_MCP23008>
    16fa:	81 11       	cpse	r24, r1
    16fc:	12 c0       	rjmp	.+36     	; 0x1722 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IOCON, 0x20))) { // Don't increment addr
    16fe:	40 e2       	ldi	r20, 0x20	; 32
    1700:	65 e0       	ldi	r22, 0x05	; 5
    1702:	81 e2       	ldi	r24, 0x21	; 33
    1704:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <write_MCP23008>
    1708:	81 11       	cpse	r24, r1
    170a:	0b c0       	rjmp	.+22     	; 0x1722 <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPPU, 0x7F))) { // Pullups (not really needed)
    170c:	4f e7       	ldi	r20, 0x7F	; 127
    170e:	66 e0       	ldi	r22, 0x06	; 6
    1710:	81 e2       	ldi	r24, 0x21	; 33
    1712:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <write_MCP23008>
    1716:	81 11       	cpse	r24, r1
    1718:	04 c0       	rjmp	.+8      	; 0x1722 <init_PNEU+0x78>
		return(retval);
	}
	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    171a:	89 e0       	ldi	r24, 0x09	; 9
    171c:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	return(0);
    1720:	80 e0       	ldi	r24, 0x00	; 0

}
    1722:	08 95       	ret

00001724 <read_PNEUSENSORS>:
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
{
    1724:	cf 92       	push	r12
    1726:	df 92       	push	r13
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	6c 01       	movw	r12, r24
    1736:	8b 01       	movw	r16, r22
    1738:	7a 01       	movw	r14, r20
    173a:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);
    173c:	69 e0       	ldi	r22, 0x09	; 9
    173e:	81 e2       	ldi	r24, 0x21	; 33
    1740:	0e 94 c1 07 	call	0xf82	; 0xf82 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1744:	98 2f       	mov	r25, r24
    1746:	92 95       	swap	r25
    1748:	96 95       	lsr	r25
    174a:	96 95       	lsr	r25
    174c:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    174e:	91 30       	cpi	r25, 0x01	; 1
    1750:	21 f4       	brne	.+8      	; 0x175a <read_PNEUSENSORS+0x36>
		*shutter = 'c';
    1752:	93 e6       	ldi	r25, 0x63	; 99
    1754:	f6 01       	movw	r30, r12
    1756:	90 83       	st	Z, r25
    1758:	0f c0       	rjmp	.+30     	; 0x1778 <read_PNEUSENSORS+0x54>
	} else if (state == 2) {
    175a:	92 30       	cpi	r25, 0x02	; 2
    175c:	21 f4       	brne	.+8      	; 0x1766 <read_PNEUSENSORS+0x42>
		*shutter = 'o';
    175e:	9f e6       	ldi	r25, 0x6F	; 111
    1760:	f6 01       	movw	r30, r12
    1762:	90 83       	st	Z, r25
    1764:	09 c0       	rjmp	.+18     	; 0x1778 <read_PNEUSENSORS+0x54>
	} else if (state == 3) {
    1766:	93 30       	cpi	r25, 0x03	; 3
    1768:	21 f4       	brne	.+8      	; 0x1772 <read_PNEUSENSORS+0x4e>
		*shutter = 't';
    176a:	94 e7       	ldi	r25, 0x74	; 116
    176c:	f6 01       	movw	r30, r12
    176e:	90 83       	st	Z, r25
    1770:	03 c0       	rjmp	.+6      	; 0x1778 <read_PNEUSENSORS+0x54>
	} else {
		*shutter = 'x';
    1772:	98 e7       	ldi	r25, 0x78	; 120
    1774:	f6 01       	movw	r30, r12
    1776:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1778:	98 2f       	mov	r25, r24
    177a:	96 95       	lsr	r25
    177c:	96 95       	lsr	r25
	state &= 0b00000011;
    177e:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1780:	91 30       	cpi	r25, 0x01	; 1
    1782:	21 f4       	brne	.+8      	; 0x178c <read_PNEUSENSORS+0x68>
		*right = 'c';
    1784:	93 e6       	ldi	r25, 0x63	; 99
    1786:	f7 01       	movw	r30, r14
    1788:	90 83       	st	Z, r25
    178a:	0f c0       	rjmp	.+30     	; 0x17aa <read_PNEUSENSORS+0x86>
	} else if (state == 2) {
    178c:	92 30       	cpi	r25, 0x02	; 2
    178e:	21 f4       	brne	.+8      	; 0x1798 <read_PNEUSENSORS+0x74>
		*right = 'o';
    1790:	9f e6       	ldi	r25, 0x6F	; 111
    1792:	f7 01       	movw	r30, r14
    1794:	90 83       	st	Z, r25
    1796:	09 c0       	rjmp	.+18     	; 0x17aa <read_PNEUSENSORS+0x86>
	} else if (state == 3) {
    1798:	93 30       	cpi	r25, 0x03	; 3
    179a:	21 f4       	brne	.+8      	; 0x17a4 <read_PNEUSENSORS+0x80>
		*right = 't';
    179c:	94 e7       	ldi	r25, 0x74	; 116
    179e:	f7 01       	movw	r30, r14
    17a0:	90 83       	st	Z, r25
    17a2:	03 c0       	rjmp	.+6      	; 0x17aa <read_PNEUSENSORS+0x86>
	} else {
		*right = 'x';
    17a4:	98 e7       	ldi	r25, 0x78	; 120
    17a6:	f7 01       	movw	r30, r14
    17a8:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    17aa:	98 2f       	mov	r25, r24
    17ac:	92 95       	swap	r25
    17ae:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    17b0:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    17b2:	91 30       	cpi	r25, 0x01	; 1
    17b4:	21 f4       	brne	.+8      	; 0x17be <read_PNEUSENSORS+0x9a>
		*left = 'o';
    17b6:	9f e6       	ldi	r25, 0x6F	; 111
    17b8:	f8 01       	movw	r30, r16
    17ba:	90 83       	st	Z, r25
    17bc:	0f c0       	rjmp	.+30     	; 0x17dc <read_PNEUSENSORS+0xb8>
	} else if (state == 2) {
    17be:	92 30       	cpi	r25, 0x02	; 2
    17c0:	21 f4       	brne	.+8      	; 0x17ca <read_PNEUSENSORS+0xa6>
		*left = 'c';
    17c2:	93 e6       	ldi	r25, 0x63	; 99
    17c4:	f8 01       	movw	r30, r16
    17c6:	90 83       	st	Z, r25
    17c8:	09 c0       	rjmp	.+18     	; 0x17dc <read_PNEUSENSORS+0xb8>
	} else if (state == 3) {
    17ca:	93 30       	cpi	r25, 0x03	; 3
    17cc:	21 f4       	brne	.+8      	; 0x17d6 <read_PNEUSENSORS+0xb2>
		*left = 't';
    17ce:	94 e7       	ldi	r25, 0x74	; 116
    17d0:	f8 01       	movw	r30, r16
    17d2:	90 83       	st	Z, r25
    17d4:	03 c0       	rjmp	.+6      	; 0x17dc <read_PNEUSENSORS+0xb8>
	} else {
		*left = 'x';
    17d6:	98 e7       	ldi	r25, 0x78	; 120
    17d8:	f8 01       	movw	r30, r16
    17da:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    17dc:	81 ff       	sbrs	r24, 1
    17de:	03 c0       	rjmp	.+6      	; 0x17e6 <read_PNEUSENSORS+0xc2>
		*air = '0';
    17e0:	80 e3       	ldi	r24, 0x30	; 48
    17e2:	88 83       	st	Y, r24
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <read_PNEUSENSORS+0xc6>
	} else {
		*air = '1';
    17e6:	81 e3       	ldi	r24, 0x31	; 49
    17e8:	88 83       	st	Y, r24
	}
}
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	1f 91       	pop	r17
    17f0:	0f 91       	pop	r16
    17f2:	ff 90       	pop	r15
    17f4:	ef 90       	pop	r14
    17f6:	df 90       	pop	r13
    17f8:	cf 90       	pop	r12
    17fa:	08 95       	ret

000017fc <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	d8 2f       	mov	r29, r24
    1802:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    1804:	69 e0       	ldi	r22, 0x09	; 9
    1806:	84 e2       	ldi	r24, 0x24	; 36
    1808:	0e 94 c1 07 	call	0xf82	; 0xf82 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    180c:	8d 2b       	or	r24, r29
    180e:	48 2f       	mov	r20, r24
    1810:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1812:	6a e0       	ldi	r22, 0x0A	; 10
    1814:	84 e2       	ldi	r24, 0x24	; 36
    1816:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	08 95       	ret

00001820 <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(char mech)
{
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	6a 97       	sbiw	r28, 0x1a	; 26
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    182e:	99 e0       	ldi	r25, 0x09	; 9
    1830:	ec e7       	ldi	r30, 0x7C	; 124
    1832:	fb e7       	ldi	r31, 0x7B	; 123
    1834:	de 01       	movw	r26, r28
    1836:	11 96       	adiw	r26, 0x01	; 1
    1838:	01 90       	ld	r0, Z+
    183a:	0d 92       	st	X+, r0
    183c:	9a 95       	dec	r25
    183e:	e1 f7       	brne	.-8      	; 0x1838 <close_PNEU+0x18>
	char outbuf[17];

	switch (mech) {
    1840:	8c 36       	cpi	r24, 0x6C	; 108
    1842:	31 f1       	breq	.+76     	; 0x1890 <close_PNEU+0x70>
    1844:	18 f4       	brcc	.+6      	; 0x184c <close_PNEU+0x2c>
    1846:	82 36       	cpi	r24, 0x62	; 98
    1848:	39 f0       	breq	.+14     	; 0x1858 <close_PNEU+0x38>
    184a:	75 c0       	rjmp	.+234    	; 0x1936 <close_PNEU+0x116>
    184c:	82 37       	cpi	r24, 0x72	; 114
    184e:	c1 f1       	breq	.+112    	; 0x18c0 <close_PNEU+0xa0>
    1850:	83 37       	cpi	r24, 0x73	; 115
    1852:	09 f4       	brne	.+2      	; 0x1856 <close_PNEU+0x36>
    1854:	4d c0       	rjmp	.+154    	; 0x18f0 <close_PNEU+0xd0>
    1856:	6f c0       	rjmp	.+222    	; 0x1936 <close_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1858:	6a ee       	ldi	r22, 0xEA	; 234
    185a:	84 e4       	ldi	r24, 0x44	; 68
    185c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1860:	66 ee       	ldi	r22, 0xE6	; 230
    1862:	88 e8       	ldi	r24, 0x88	; 136
    1864:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1868:	84 e6       	ldi	r24, 0x64	; 100
    186a:	9b e7       	ldi	r25, 0x7B	; 123
    186c:	9f 93       	push	r25
    186e:	8f 93       	push	r24
    1870:	ce 01       	movw	r24, r28
    1872:	01 96       	adiw	r24, 0x01	; 1
    1874:	9f 93       	push	r25
    1876:	8f 93       	push	r24
    1878:	09 96       	adiw	r24, 0x09	; 9
    187a:	9f 93       	push	r25
    187c:	8f 93       	push	r24
    187e:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			break;
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	47 c0       	rjmp	.+142    	; 0x191e <close_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1890:	6a ee       	ldi	r22, 0xEA	; 234
    1892:	84 e4       	ldi	r24, 0x44	; 68
    1894:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1898:	89 e6       	ldi	r24, 0x69	; 105
    189a:	9b e7       	ldi	r25, 0x7B	; 123
    189c:	9f 93       	push	r25
    189e:	8f 93       	push	r24
    18a0:	ce 01       	movw	r24, r28
    18a2:	01 96       	adiw	r24, 0x01	; 1
    18a4:	9f 93       	push	r25
    18a6:	8f 93       	push	r24
    18a8:	09 96       	adiw	r24, 0x09	; 9
    18aa:	9f 93       	push	r25
    18ac:	8f 93       	push	r24
    18ae:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			break;
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	2f c0       	rjmp	.+94     	; 0x191e <close_PNEU+0xfe>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    18c0:	66 ee       	ldi	r22, 0xE6	; 230
    18c2:	88 e8       	ldi	r24, 0x88	; 136
    18c4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    18c8:	8e e6       	ldi	r24, 0x6E	; 110
    18ca:	9b e7       	ldi	r25, 0x7B	; 123
    18cc:	9f 93       	push	r25
    18ce:	8f 93       	push	r24
    18d0:	ce 01       	movw	r24, r28
    18d2:	01 96       	adiw	r24, 0x01	; 1
    18d4:	9f 93       	push	r25
    18d6:	8f 93       	push	r24
    18d8:	09 96       	adiw	r24, 0x09	; 9
    18da:	9f 93       	push	r25
    18dc:	8f 93       	push	r24
    18de:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			break;
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	17 c0       	rjmp	.+46     	; 0x191e <close_PNEU+0xfe>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    18f0:	6c ee       	ldi	r22, 0xEC	; 236
    18f2:	82 e2       	ldi	r24, 0x22	; 34
    18f4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    18f8:	84 e7       	ldi	r24, 0x74	; 116
    18fa:	9b e7       	ldi	r25, 0x7B	; 123
    18fc:	9f 93       	push	r25
    18fe:	8f 93       	push	r24
    1900:	ce 01       	movw	r24, r28
    1902:	01 96       	adiw	r24, 0x01	; 1
    1904:	9f 93       	push	r25
    1906:	8f 93       	push	r24
    1908:	09 96       	adiw	r24, 0x09	; 9
    190a:	9f 93       	push	r25
    190c:	8f 93       	push	r24
    190e:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			break;
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
			return(ERRORPROMPT);
			break;

	}

	clear_OLED(1);
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	0e 94 2a 0b 	call	0x1654	; 0x1654 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1924:	41 e0       	ldi	r20, 0x01	; 1
    1926:	be 01       	movw	r22, r28
    1928:	66 5f       	subi	r22, 0xF6	; 246
    192a:	7f 4f       	sbci	r23, 0xFF	; 255
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
	return(GREATERPROMPT);
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	01 c0       	rjmp	.+2      	; 0x1938 <close_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
			sprintf(outbuf, dformat_CLO, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    1936:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    1938:	6a 96       	adiw	r28, 0x1a	; 26
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	08 95       	ret

00001944 <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(char mechanism)
{
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	69 97       	sbiw	r28, 0x19	; 25
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	de bf       	out	0x3e, r29	; 62


	const char dformat_OPE[] = "Open %s";
    1952:	98 e0       	ldi	r25, 0x08	; 8
    1954:	e5 e8       	ldi	r30, 0x85	; 133
    1956:	fb e7       	ldi	r31, 0x7B	; 123
    1958:	de 01       	movw	r26, r28
    195a:	11 96       	adiw	r26, 0x01	; 1
    195c:	01 90       	ld	r0, Z+
    195e:	0d 92       	st	X+, r0
    1960:	9a 95       	dec	r25
    1962:	e1 f7       	brne	.-8      	; 0x195c <open_PNEU+0x18>
	char outbuf[17];

	switch (mechanism) {
    1964:	8c 36       	cpi	r24, 0x6C	; 108
    1966:	31 f1       	breq	.+76     	; 0x19b4 <open_PNEU+0x70>
    1968:	18 f4       	brcc	.+6      	; 0x1970 <open_PNEU+0x2c>
    196a:	82 36       	cpi	r24, 0x62	; 98
    196c:	39 f0       	breq	.+14     	; 0x197c <open_PNEU+0x38>
    196e:	75 c0       	rjmp	.+234    	; 0x1a5a <open_PNEU+0x116>
    1970:	82 37       	cpi	r24, 0x72	; 114
    1972:	c1 f1       	breq	.+112    	; 0x19e4 <open_PNEU+0xa0>
    1974:	83 37       	cpi	r24, 0x73	; 115
    1976:	09 f4       	brne	.+2      	; 0x197a <open_PNEU+0x36>
    1978:	4d c0       	rjmp	.+154    	; 0x1a14 <open_PNEU+0xd0>
    197a:	6f c0       	rjmp	.+222    	; 0x1a5a <open_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    197c:	6e ea       	ldi	r22, 0xAE	; 174
    197e:	84 e4       	ldi	r24, 0x44	; 68
    1980:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1984:	6e e6       	ldi	r22, 0x6E	; 110
    1986:	88 e8       	ldi	r24, 0x88	; 136
    1988:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    198c:	84 e6       	ldi	r24, 0x64	; 100
    198e:	9b e7       	ldi	r25, 0x7B	; 123
    1990:	9f 93       	push	r25
    1992:	8f 93       	push	r24
    1994:	ce 01       	movw	r24, r28
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	9f 93       	push	r25
    199a:	8f 93       	push	r24
    199c:	08 96       	adiw	r24, 0x08	; 8
    199e:	9f 93       	push	r25
    19a0:	8f 93       	push	r24
    19a2:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			break;
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	47 c0       	rjmp	.+142    	; 0x1a42 <open_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    19b4:	6e ea       	ldi	r22, 0xAE	; 174
    19b6:	84 e4       	ldi	r24, 0x44	; 68
    19b8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    19bc:	89 e6       	ldi	r24, 0x69	; 105
    19be:	9b e7       	ldi	r25, 0x7B	; 123
    19c0:	9f 93       	push	r25
    19c2:	8f 93       	push	r24
    19c4:	ce 01       	movw	r24, r28
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	9f 93       	push	r25
    19ca:	8f 93       	push	r24
    19cc:	08 96       	adiw	r24, 0x08	; 8
    19ce:	9f 93       	push	r25
    19d0:	8f 93       	push	r24
    19d2:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			break;
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	2f c0       	rjmp	.+94     	; 0x1a42 <open_PNEU+0xfe>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    19e4:	6e e6       	ldi	r22, 0x6E	; 110
    19e6:	88 e8       	ldi	r24, 0x88	; 136
    19e8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    19ec:	8e e6       	ldi	r24, 0x6E	; 110
    19ee:	9b e7       	ldi	r25, 0x7B	; 123
    19f0:	9f 93       	push	r25
    19f2:	8f 93       	push	r24
    19f4:	ce 01       	movw	r24, r28
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	9f 93       	push	r25
    19fa:	8f 93       	push	r24
    19fc:	08 96       	adiw	r24, 0x08	; 8
    19fe:	9f 93       	push	r25
    1a00:	8f 93       	push	r24
    1a02:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			break;
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	17 c0       	rjmp	.+46     	; 0x1a42 <open_PNEU+0xfe>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1a14:	6e ec       	ldi	r22, 0xCE	; 206
    1a16:	82 e2       	ldi	r24, 0x22	; 34
    1a18:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1a1c:	84 e7       	ldi	r24, 0x74	; 116
    1a1e:	9b e7       	ldi	r25, 0x7B	; 123
    1a20:	9f 93       	push	r25
    1a22:	8f 93       	push	r24
    1a24:	ce 01       	movw	r24, r28
    1a26:	01 96       	adiw	r24, 0x01	; 1
    1a28:	9f 93       	push	r25
    1a2a:	8f 93       	push	r24
    1a2c:	08 96       	adiw	r24, 0x08	; 8
    1a2e:	9f 93       	push	r25
    1a30:	8f 93       	push	r24
    1a32:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			break;
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
		default:
			return(ERRORPROMPT);

	}

	clear_OLED(1);
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	0e 94 2a 0b 	call	0x1654	; 0x1654 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1a48:	41 e0       	ldi	r20, 0x01	; 1
    1a4a:	be 01       	movw	r22, r28
    1a4c:	67 5f       	subi	r22, 0xF7	; 247
    1a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
	return(GREATERPROMPT);
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	01 c0       	rjmp	.+2      	; 0x1a5c <open_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
			sprintf(outbuf, dformat_OPE, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    1a5a:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    1a5c:	69 96       	adiw	r28, 0x19	; 25
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	08 95       	ret

00001a68 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1a68:	1f 92       	push	r1
    1a6a:	0f 92       	push	r0
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	0f 92       	push	r0
    1a70:	11 24       	eor	r1, r1
    1a72:	2f 93       	push	r18
    1a74:	3f 93       	push	r19
    1a76:	4f 93       	push	r20
    1a78:	5f 93       	push	r21
    1a7a:	6f 93       	push	r22
    1a7c:	7f 93       	push	r23
    1a7e:	8f 93       	push	r24
    1a80:	9f 93       	push	r25
    1a82:	af 93       	push	r26
    1a84:	bf 93       	push	r27
    1a86:	ef 93       	push	r30
    1a88:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1a8a:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1a8e:	88 23       	and	r24, r24
    1a90:	64 f4       	brge	.+24     	; 0x1aaa <__vector_20+0x42>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1a92:	80 e8       	ldi	r24, 0x80	; 128
    1a94:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1a98:	68 e0       	ldi	r22, 0x08	; 8
    1a9a:	81 e2       	ldi	r24, 0x21	; 33
    1a9c:	0e 94 c1 07 	call	0xf82	; 0xf82 <read_MCP23008>
    1aa0:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <pneuState>
		toggle_BEEPER;
    1aa4:	84 e0       	ldi	r24, 0x04	; 4
    1aa6:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x7f4427>
	}

}
    1aaa:	ff 91       	pop	r31
    1aac:	ef 91       	pop	r30
    1aae:	bf 91       	pop	r27
    1ab0:	af 91       	pop	r26
    1ab2:	9f 91       	pop	r25
    1ab4:	8f 91       	pop	r24
    1ab6:	7f 91       	pop	r23
    1ab8:	6f 91       	pop	r22
    1aba:	5f 91       	pop	r21
    1abc:	4f 91       	pop	r20
    1abe:	3f 91       	pop	r19
    1ac0:	2f 91       	pop	r18
    1ac2:	0f 90       	pop	r0
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	0f 90       	pop	r0
    1ac8:	1f 90       	pop	r1
    1aca:	18 95       	reti

00001acc <init_PORTS>:
	sure nothing lurks in the background by accident.
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
    1acc:	e0 e0       	ldi	r30, 0x00	; 0
    1ace:	f4 e0       	ldi	r31, 0x04	; 4
    1ad0:	88 e0       	ldi	r24, 0x08	; 8
    1ad2:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
    1ad4:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
    1ad6:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
    1ad8:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
    1ada:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    1adc:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    1ade:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
    1ae0:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
    1ae2:	e0 e2       	ldi	r30, 0x20	; 32
    1ae4:	f4 e0       	ldi	r31, 0x04	; 4
    1ae6:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
    1ae8:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
    1aea:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
    1aec:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
    1aee:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
    1af0:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
    1af2:	e0 e4       	ldi	r30, 0x40	; 64
    1af4:	f4 e0       	ldi	r31, 0x04	; 4
    1af6:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
    1af8:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
    1afa:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
    1afc:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
    1afe:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
    1b00:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
    1b02:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
    1b04:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b06:	e0 e6       	ldi	r30, 0x60	; 96
    1b08:	f4 e0       	ldi	r31, 0x04	; 4
    1b0a:	94 e0       	ldi	r25, 0x04	; 4
    1b0c:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b0e:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b10:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b12:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b14:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b16:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b18:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b1a:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
    1b1c:	e0 e8       	ldi	r30, 0x80	; 128
    1b1e:	f4 e0       	ldi	r31, 0x04	; 4
    1b20:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
    1b22:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
    1b24:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
    1b26:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
    1b28:	e0 ea       	ldi	r30, 0xA0	; 160
    1b2a:	f4 e0       	ldi	r31, 0x04	; 4
    1b2c:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
    1b2e:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
    1b30:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
    1b32:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
    1b34:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
    1b36:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
    1b38:	86 8b       	std	Z+22, r24	; 0x16
    1b3a:	08 95       	ret

00001b3c <report>:
	Returns
		0 - GREATERPROMPT on success
		1 - ERRORPROMPT on error (invalid command noun)
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1b3c:	2f 92       	push	r2
    1b3e:	3f 92       	push	r3
    1b40:	4f 92       	push	r4
    1b42:	5f 92       	push	r5
    1b44:	6f 92       	push	r6
    1b46:	7f 92       	push	r7
    1b48:	8f 92       	push	r8
    1b4a:	9f 92       	push	r9
    1b4c:	af 92       	push	r10
    1b4e:	bf 92       	push	r11
    1b50:	cf 92       	push	r12
    1b52:	df 92       	push	r13
    1b54:	ef 92       	push	r14
    1b56:	ff 92       	push	r15
    1b58:	0f 93       	push	r16
    1b5a:	1f 93       	push	r17
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	cc 52       	subi	r28, 0x2C	; 44
    1b66:	d2 40       	sbci	r29, 0x02	; 2
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE+10], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	const char format_BTM[] = "$S%dBTM,%s,%s";
    1b6c:	9e e0       	ldi	r25, 0x0E	; 14
    1b6e:	ee ed       	ldi	r30, 0xDE	; 222
    1b70:	fb e7       	ldi	r31, 0x7B	; 123
    1b72:	de 01       	movw	r26, r28
    1b74:	ae 52       	subi	r26, 0x2E	; 46
    1b76:	bf 4f       	sbci	r27, 0xFF	; 255
    1b78:	01 90       	ld	r0, Z+
    1b7a:	0d 92       	st	X+, r0
    1b7c:	9a 95       	dec	r25
    1b7e:	e1 f7       	brne	.-8      	; 0x1b78 <report+0x3c>
	const char format_ENV[] = "$S%dENV,%s,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%s";
    1b80:	92 e4       	ldi	r25, 0x42	; 66
    1b82:	ec ee       	ldi	r30, 0xEC	; 236
    1b84:	fb e7       	ldi	r31, 0x7B	; 123
    1b86:	de 01       	movw	r26, r28
    1b88:	a0 52       	subi	r26, 0x20	; 32
    1b8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b8c:	01 90       	ld	r0, Z+
    1b8e:	0d 92       	st	X+, r0
    1b90:	9a 95       	dec	r25
    1b92:	e1 f7       	brne	.-8      	; 0x1b8c <report+0x50>
	const char format_ORI[] = "$S%dORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1b94:	90 e2       	ldi	r25, 0x20	; 32
    1b96:	ee e2       	ldi	r30, 0x2E	; 46
    1b98:	fc e7       	ldi	r31, 0x7C	; 124
    1b9a:	de 01       	movw	r26, r28
    1b9c:	ae 5d       	subi	r26, 0xDE	; 222
    1b9e:	be 4f       	sbci	r27, 0xFE	; 254
    1ba0:	01 90       	ld	r0, Z+
    1ba2:	0d 92       	st	X+, r0
    1ba4:	9a 95       	dec	r25
    1ba6:	e1 f7       	brne	.-8      	; 0x1ba0 <report+0x64>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1ba8:	92 e1       	ldi	r25, 0x12	; 18
    1baa:	ee e4       	ldi	r30, 0x4E	; 78
    1bac:	fc e7       	ldi	r31, 0x7C	; 124
    1bae:	de 01       	movw	r26, r28
    1bb0:	ae 5b       	subi	r26, 0xBE	; 190
    1bb2:	be 4f       	sbci	r27, 0xFE	; 254
    1bb4:	01 90       	ld	r0, Z+
    1bb6:	0d 92       	st	X+, r0
    1bb8:	9a 95       	dec	r25
    1bba:	e1 f7       	brne	.-8      	; 0x1bb4 <report+0x78>
	const char format_PNU[] = "$S%dPNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1bbc:	91 e3       	ldi	r25, 0x31	; 49
    1bbe:	e0 e6       	ldi	r30, 0x60	; 96
    1bc0:	fc e7       	ldi	r31, 0x7C	; 124
    1bc2:	de 01       	movw	r26, r28
    1bc4:	ac 5a       	subi	r26, 0xAC	; 172
    1bc6:	be 4f       	sbci	r27, 0xFE	; 254
    1bc8:	01 90       	ld	r0, Z+
    1bca:	0d 92       	st	X+, r0
    1bcc:	9a 95       	dec	r25
    1bce:	e1 f7       	brne	.-8      	; 0x1bc8 <report+0x8c>
//	const char dformat_PNU[] = "%c %c %c %c";
	const char dformat_PN1[] = "left:%c   right:%c";
    1bd0:	93 e1       	ldi	r25, 0x13	; 19
    1bd2:	e1 e9       	ldi	r30, 0x91	; 145
    1bd4:	fc e7       	ldi	r31, 0x7C	; 124
    1bd6:	de 01       	movw	r26, r28
    1bd8:	ab 57       	subi	r26, 0x7B	; 123
    1bda:	be 4f       	sbci	r27, 0xFE	; 254
    1bdc:	01 90       	ld	r0, Z+
    1bde:	0d 92       	st	X+, r0
    1be0:	9a 95       	dec	r25
    1be2:	e1 f7       	brne	.-8      	; 0x1bdc <report+0xa0>
	const char dformat_PN2[] = "shutter:%c  air:%c";
    1be4:	93 e1       	ldi	r25, 0x13	; 19
    1be6:	e4 ea       	ldi	r30, 0xA4	; 164
    1be8:	fc e7       	ldi	r31, 0x7C	; 124
    1bea:	de 01       	movw	r26, r28
    1bec:	a8 56       	subi	r26, 0x68	; 104
    1bee:	be 4f       	sbci	r27, 0xFE	; 254
    1bf0:	01 90       	ld	r0, Z+
    1bf2:	0d 92       	st	X+, r0
    1bf4:	9a 95       	dec	r25
    1bf6:	e1 f7       	brne	.-8      	; 0x1bf0 <report+0xb4>
	const char format_TIM[] = "$S%dTIM,%s,%s,set,%s,boot,%s";
    1bf8:	9d e1       	ldi	r25, 0x1D	; 29
    1bfa:	e7 eb       	ldi	r30, 0xB7	; 183
    1bfc:	fc e7       	ldi	r31, 0x7C	; 124
    1bfe:	de 01       	movw	r26, r28
    1c00:	a5 55       	subi	r26, 0x55	; 85
    1c02:	be 4f       	sbci	r27, 0xFE	; 254
    1c04:	01 90       	ld	r0, Z+
    1c06:	0d 92       	st	X+, r0
    1c08:	9a 95       	dec	r25
    1c0a:	e1 f7       	brne	.-8      	; 0x1c04 <report+0xc8>
	const char format_VAC[] = "$S%dVAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1c0c:	99 e2       	ldi	r25, 0x29	; 41
    1c0e:	e4 ed       	ldi	r30, 0xD4	; 212
    1c10:	fc e7       	ldi	r31, 0x7C	; 124
    1c12:	de 01       	movw	r26, r28
    1c14:	a8 53       	subi	r26, 0x38	; 56
    1c16:	be 4f       	sbci	r27, 0xFE	; 254
    1c18:	01 90       	ld	r0, Z+
    1c1a:	0d 92       	st	X+, r0
    1c1c:	9a 95       	dec	r25
    1c1e:	e1 f7       	brne	.-8      	; 0x1c18 <report+0xdc>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1c20:	9d e0       	ldi	r25, 0x0D	; 13
    1c22:	ed ef       	ldi	r30, 0xFD	; 253
    1c24:	fc e7       	ldi	r31, 0x7C	; 124
    1c26:	de 01       	movw	r26, r28
    1c28:	af 50       	subi	r26, 0x0F	; 15
    1c2a:	be 4f       	sbci	r27, 0xFE	; 254
    1c2c:	01 90       	ld	r0, Z+
    1c2e:	0d 92       	st	X+, r0
    1c30:	9a 95       	dec	r25
    1c32:	e1 f7       	brne	.-8      	; 0x1c2c <report+0xf0>
	const char format_VER[] = "$S%dVER,%s,%s,%s";
    1c34:	91 e1       	ldi	r25, 0x11	; 17
    1c36:	ea e0       	ldi	r30, 0x0A	; 10
    1c38:	fd e7       	ldi	r31, 0x7D	; 125
    1c3a:	de 01       	movw	r26, r28
    1c3c:	a2 50       	subi	r26, 0x02	; 2
    1c3e:	be 4f       	sbci	r27, 0xFE	; 254
    1c40:	01 90       	ld	r0, Z+
    1c42:	0d 92       	st	X+, r0
    1c44:	9a 95       	dec	r25
    1c46:	e1 f7       	brne	.-8      	; 0x1c40 <report+0x104>
	float t0, t1, t2, t3, h0, h1, h2;		// temperature and humidity
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	char shutter, left, right, air;

	switch(pcmd[cstack].cobject) {
    1c48:	08 2f       	mov	r16, r24
    1c4a:	10 e0       	ldi	r17, 0x00	; 0
    1c4c:	84 e3       	ldi	r24, 0x34	; 52
    1c4e:	80 9f       	mul	r24, r16
    1c50:	f0 01       	movw	r30, r0
    1c52:	81 9f       	mul	r24, r17
    1c54:	f0 0d       	add	r31, r0
    1c56:	11 24       	eor	r1, r1
    1c58:	ed 5f       	subi	r30, 0xFD	; 253
    1c5a:	f7 4d       	sbci	r31, 0xD7	; 215
    1c5c:	e1 81       	ldd	r30, Z+1	; 0x01
    1c5e:	8e 2f       	mov	r24, r30
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	fc 01       	movw	r30, r24
    1c64:	e2 54       	subi	r30, 0x42	; 66
    1c66:	f1 09       	sbc	r31, r1
    1c68:	e5 33       	cpi	r30, 0x35	; 53
    1c6a:	f1 05       	cpc	r31, r1
    1c6c:	08 f0       	brcs	.+2      	; 0x1c70 <report+0x134>
    1c6e:	38 c4       	rjmp	.+2160   	; 0x24e0 <report+0x9a4>
    1c70:	e0 5b       	subi	r30, 0xB0	; 176
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <__tablejump2__>

		case 'B':					// Boot time
			get_BOOTTIME(boottime);
    1c78:	ce 01       	movw	r24, r28
    1c7a:	82 54       	subi	r24, 0x42	; 66
    1c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7e:	0e 94 d1 05 	call	0xba2	; 0xba2 <get_BOOTTIME>
			sprintf(outbuf, format_BTM, get_SPECID, boottime, pcmd[cstack].cid);
    1c82:	24 e3       	ldi	r18, 0x34	; 52
    1c84:	20 9f       	mul	r18, r16
    1c86:	c0 01       	movw	r24, r0
    1c88:	21 9f       	mul	r18, r17
    1c8a:	90 0d       	add	r25, r0
    1c8c:	11 24       	eor	r1, r1
    1c8e:	82 5d       	subi	r24, 0xD2	; 210
    1c90:	97 4d       	sbci	r25, 0xD7	; 215
    1c92:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1c96:	22 ff       	sbrs	r18, 2
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <report+0x164>
    1c9a:	22 e0       	ldi	r18, 0x02	; 2
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <report+0x168>
    1ca0:	21 e0       	ldi	r18, 0x01	; 1
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	9f 93       	push	r25
    1ca6:	8f 93       	push	r24
    1ca8:	8e 01       	movw	r16, r28
    1caa:	02 54       	subi	r16, 0x42	; 66
    1cac:	1f 4f       	sbci	r17, 0xFF	; 255
    1cae:	1f 93       	push	r17
    1cb0:	0f 93       	push	r16
    1cb2:	3f 93       	push	r19
    1cb4:	2f 93       	push	r18
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	8e 52       	subi	r24, 0x2E	; 46
    1cba:	9f 4f       	sbci	r25, 0xFF	; 255
    1cbc:	9f 93       	push	r25
    1cbe:	8f 93       	push	r24
    1cc0:	81 5d       	subi	r24, 0xD1	; 209
    1cc2:	91 09       	sbc	r25, r1
    1cc4:	7c 01       	movw	r14, r24
    1cc6:	9f 93       	push	r25
    1cc8:	8f 93       	push	r24
    1cca:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			checksum_NMEA(outbuf);
    1cce:	c7 01       	movw	r24, r14
    1cd0:	0e 94 79 09 	call	0x12f2	; 0x12f2 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1cd4:	f7 01       	movw	r30, r14
    1cd6:	01 90       	ld	r0, Z+
    1cd8:	00 20       	and	r0, r0
    1cda:	e9 f7       	brne	.-6      	; 0x1cd6 <report+0x19a>
    1cdc:	31 97       	sbiw	r30, 0x01	; 1
    1cde:	af 01       	movw	r20, r30
    1ce0:	4e 19       	sub	r20, r14
    1ce2:	5f 09       	sbc	r21, r15
    1ce4:	b7 01       	movw	r22, r14
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <send_USART>
			writestr_OLED(1, "Boot time", 1);
    1cec:	41 e0       	ldi	r20, 0x01	; 1
    1cee:	6d e8       	ldi	r22, 0x8D	; 141
    1cf0:	7b e7       	ldi	r23, 0x7B	; 123
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
			writestr_OLED(1, &boottime[5], 2);
    1cf8:	b8 01       	movw	r22, r16
    1cfa:	6b 5f       	subi	r22, 0xFB	; 251
    1cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfe:	42 e0       	ldi	r20, 0x02	; 2
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
			break;
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_BTM, get_SPECID, boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Boot time", 1);
			writestr_OLED(1, &boottime[5], 2);
			break;
    1d0c:	ea c3       	rjmp	.+2004   	; 0x24e2 <report+0x9a6>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	0e 94 34 13 	call	0x2668	; 0x2668 <get_temperature>
    1d14:	f6 2e       	mov	r15, r22
    1d16:	e7 2e       	mov	r14, r23
    1d18:	d8 2e       	mov	r13, r24
    1d1a:	c9 2e       	mov	r12, r25
			h0 = get_humidity(0);
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <get_humidity>
    1d22:	b6 2e       	mov	r11, r22
    1d24:	a7 2e       	mov	r10, r23
    1d26:	98 2e       	mov	r9, r24
    1d28:	89 2e       	mov	r8, r25
			t1 = get_temperature(1);
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	0e 94 34 13 	call	0x2668	; 0x2668 <get_temperature>
    1d30:	c1 5e       	subi	r28, 0xE1	; 225
    1d32:	dd 4f       	sbci	r29, 0xFD	; 253
    1d34:	68 83       	st	Y, r22
    1d36:	cf 51       	subi	r28, 0x1F	; 31
    1d38:	d2 40       	sbci	r29, 0x02	; 2
    1d3a:	c0 5e       	subi	r28, 0xE0	; 224
    1d3c:	dd 4f       	sbci	r29, 0xFD	; 253
    1d3e:	78 83       	st	Y, r23
    1d40:	c0 52       	subi	r28, 0x20	; 32
    1d42:	d2 40       	sbci	r29, 0x02	; 2
    1d44:	cf 5d       	subi	r28, 0xDF	; 223
    1d46:	dd 4f       	sbci	r29, 0xFD	; 253
    1d48:	88 83       	st	Y, r24
    1d4a:	c1 52       	subi	r28, 0x21	; 33
    1d4c:	d2 40       	sbci	r29, 0x02	; 2
    1d4e:	ce 5d       	subi	r28, 0xDE	; 222
    1d50:	dd 4f       	sbci	r29, 0xFD	; 253
    1d52:	98 83       	st	Y, r25
    1d54:	c2 52       	subi	r28, 0x22	; 34
    1d56:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <get_humidity>
    1d5e:	cd 5d       	subi	r28, 0xDD	; 221
    1d60:	dd 4f       	sbci	r29, 0xFD	; 253
    1d62:	68 83       	st	Y, r22
    1d64:	c3 52       	subi	r28, 0x23	; 35
    1d66:	d2 40       	sbci	r29, 0x02	; 2
    1d68:	cc 5d       	subi	r28, 0xDC	; 220
    1d6a:	dd 4f       	sbci	r29, 0xFD	; 253
    1d6c:	78 83       	st	Y, r23
    1d6e:	c4 52       	subi	r28, 0x24	; 36
    1d70:	d2 40       	sbci	r29, 0x02	; 2
    1d72:	cb 5d       	subi	r28, 0xDB	; 219
    1d74:	dd 4f       	sbci	r29, 0xFD	; 253
    1d76:	88 83       	st	Y, r24
    1d78:	c5 52       	subi	r28, 0x25	; 37
    1d7a:	d2 40       	sbci	r29, 0x02	; 2
    1d7c:	ca 5d       	subi	r28, 0xDA	; 218
    1d7e:	dd 4f       	sbci	r29, 0xFD	; 253
    1d80:	98 83       	st	Y, r25
    1d82:	c6 52       	subi	r28, 0x26	; 38
    1d84:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    1d86:	82 e0       	ldi	r24, 0x02	; 2
    1d88:	0e 94 34 13 	call	0x2668	; 0x2668 <get_temperature>
    1d8c:	c9 5d       	subi	r28, 0xD9	; 217
    1d8e:	dd 4f       	sbci	r29, 0xFD	; 253
    1d90:	68 83       	st	Y, r22
    1d92:	c7 52       	subi	r28, 0x27	; 39
    1d94:	d2 40       	sbci	r29, 0x02	; 2
    1d96:	c8 5d       	subi	r28, 0xD8	; 216
    1d98:	dd 4f       	sbci	r29, 0xFD	; 253
    1d9a:	78 83       	st	Y, r23
    1d9c:	c8 52       	subi	r28, 0x28	; 40
    1d9e:	d2 40       	sbci	r29, 0x02	; 2
    1da0:	c7 5d       	subi	r28, 0xD7	; 215
    1da2:	dd 4f       	sbci	r29, 0xFD	; 253
    1da4:	88 83       	st	Y, r24
    1da6:	c9 52       	subi	r28, 0x29	; 41
    1da8:	d2 40       	sbci	r29, 0x02	; 2
    1daa:	c6 5d       	subi	r28, 0xD6	; 214
    1dac:	dd 4f       	sbci	r29, 0xFD	; 253
    1dae:	98 83       	st	Y, r25
    1db0:	ca 52       	subi	r28, 0x2A	; 42
    1db2:	d2 40       	sbci	r29, 0x02	; 2
			h2 = get_humidity(2);
    1db4:	82 e0       	ldi	r24, 0x02	; 2
    1db6:	0e 94 8f 06 	call	0xd1e	; 0xd1e <get_humidity>
    1dba:	76 2e       	mov	r7, r22
    1dbc:	67 2e       	mov	r6, r23
    1dbe:	58 2e       	mov	r5, r24
    1dc0:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    1dc2:	83 e0       	ldi	r24, 0x03	; 3
    1dc4:	0e 94 34 13 	call	0x2668	; 0x2668 <get_temperature>
    1dc8:	c5 5d       	subi	r28, 0xD5	; 213
    1dca:	dd 4f       	sbci	r29, 0xFD	; 253
    1dcc:	68 83       	st	Y, r22
    1dce:	cb 52       	subi	r28, 0x2B	; 43
    1dd0:	d2 40       	sbci	r29, 0x02	; 2
    1dd2:	c4 5d       	subi	r28, 0xD4	; 212
    1dd4:	dd 4f       	sbci	r29, 0xFD	; 253
    1dd6:	78 83       	st	Y, r23
    1dd8:	cc 52       	subi	r28, 0x2C	; 44
    1dda:	d2 40       	sbci	r29, 0x02	; 2
    1ddc:	38 2e       	mov	r3, r24
    1dde:	29 2e       	mov	r2, r25
			get_time(currenttime);
    1de0:	ce 01       	movw	r24, r28
    1de2:	8a 56       	subi	r24, 0x6A	; 106
    1de4:	9f 4f       	sbci	r25, 0xFF	; 255
    1de6:	0e 94 55 05 	call	0xaaa	; 0xaaa <get_time>
			sprintf(outbuf, format_ENV, get_SPECID, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    1dea:	24 e3       	ldi	r18, 0x34	; 52
    1dec:	20 9f       	mul	r18, r16
    1dee:	c0 01       	movw	r24, r0
    1df0:	21 9f       	mul	r18, r17
    1df2:	90 0d       	add	r25, r0
    1df4:	11 24       	eor	r1, r1
    1df6:	82 5d       	subi	r24, 0xD2	; 210
    1df8:	97 4d       	sbci	r25, 0xD7	; 215
    1dfa:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1dfe:	22 ff       	sbrs	r18, 2
    1e00:	03 c0       	rjmp	.+6      	; 0x1e08 <report+0x2cc>
    1e02:	22 e0       	ldi	r18, 0x02	; 2
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <report+0x2d0>
    1e08:	21 e0       	ldi	r18, 0x01	; 1
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	9f 93       	push	r25
    1e0e:	8f 93       	push	r24
    1e10:	2f 92       	push	r2
    1e12:	3f 92       	push	r3
    1e14:	c4 5d       	subi	r28, 0xD4	; 212
    1e16:	dd 4f       	sbci	r29, 0xFD	; 253
    1e18:	98 81       	ld	r25, Y
    1e1a:	cc 52       	subi	r28, 0x2C	; 44
    1e1c:	d2 40       	sbci	r29, 0x02	; 2
    1e1e:	9f 93       	push	r25
    1e20:	c5 5d       	subi	r28, 0xD5	; 213
    1e22:	dd 4f       	sbci	r29, 0xFD	; 253
    1e24:	88 81       	ld	r24, Y
    1e26:	cb 52       	subi	r28, 0x2B	; 43
    1e28:	d2 40       	sbci	r29, 0x02	; 2
    1e2a:	8f 93       	push	r24
    1e2c:	4f 92       	push	r4
    1e2e:	5f 92       	push	r5
    1e30:	6f 92       	push	r6
    1e32:	7f 92       	push	r7
    1e34:	c6 5d       	subi	r28, 0xD6	; 214
    1e36:	dd 4f       	sbci	r29, 0xFD	; 253
    1e38:	98 81       	ld	r25, Y
    1e3a:	ca 52       	subi	r28, 0x2A	; 42
    1e3c:	d2 40       	sbci	r29, 0x02	; 2
    1e3e:	9f 93       	push	r25
    1e40:	c7 5d       	subi	r28, 0xD7	; 215
    1e42:	dd 4f       	sbci	r29, 0xFD	; 253
    1e44:	88 81       	ld	r24, Y
    1e46:	c9 52       	subi	r28, 0x29	; 41
    1e48:	d2 40       	sbci	r29, 0x02	; 2
    1e4a:	8f 93       	push	r24
    1e4c:	c8 5d       	subi	r28, 0xD8	; 216
    1e4e:	dd 4f       	sbci	r29, 0xFD	; 253
    1e50:	98 81       	ld	r25, Y
    1e52:	c8 52       	subi	r28, 0x28	; 40
    1e54:	d2 40       	sbci	r29, 0x02	; 2
    1e56:	9f 93       	push	r25
    1e58:	c9 5d       	subi	r28, 0xD9	; 217
    1e5a:	dd 4f       	sbci	r29, 0xFD	; 253
    1e5c:	88 81       	ld	r24, Y
    1e5e:	c7 52       	subi	r28, 0x27	; 39
    1e60:	d2 40       	sbci	r29, 0x02	; 2
    1e62:	8f 93       	push	r24
    1e64:	ca 5d       	subi	r28, 0xDA	; 218
    1e66:	dd 4f       	sbci	r29, 0xFD	; 253
    1e68:	98 81       	ld	r25, Y
    1e6a:	c6 52       	subi	r28, 0x26	; 38
    1e6c:	d2 40       	sbci	r29, 0x02	; 2
    1e6e:	9f 93       	push	r25
    1e70:	cb 5d       	subi	r28, 0xDB	; 219
    1e72:	dd 4f       	sbci	r29, 0xFD	; 253
    1e74:	88 81       	ld	r24, Y
    1e76:	c5 52       	subi	r28, 0x25	; 37
    1e78:	d2 40       	sbci	r29, 0x02	; 2
    1e7a:	8f 93       	push	r24
    1e7c:	cc 5d       	subi	r28, 0xDC	; 220
    1e7e:	dd 4f       	sbci	r29, 0xFD	; 253
    1e80:	98 81       	ld	r25, Y
    1e82:	c4 52       	subi	r28, 0x24	; 36
    1e84:	d2 40       	sbci	r29, 0x02	; 2
    1e86:	9f 93       	push	r25
    1e88:	cd 5d       	subi	r28, 0xDD	; 221
    1e8a:	dd 4f       	sbci	r29, 0xFD	; 253
    1e8c:	88 81       	ld	r24, Y
    1e8e:	c3 52       	subi	r28, 0x23	; 35
    1e90:	d2 40       	sbci	r29, 0x02	; 2
    1e92:	8f 93       	push	r24
    1e94:	ce 5d       	subi	r28, 0xDE	; 222
    1e96:	dd 4f       	sbci	r29, 0xFD	; 253
    1e98:	98 81       	ld	r25, Y
    1e9a:	c2 52       	subi	r28, 0x22	; 34
    1e9c:	d2 40       	sbci	r29, 0x02	; 2
    1e9e:	9f 93       	push	r25
    1ea0:	cf 5d       	subi	r28, 0xDF	; 223
    1ea2:	dd 4f       	sbci	r29, 0xFD	; 253
    1ea4:	88 81       	ld	r24, Y
    1ea6:	c1 52       	subi	r28, 0x21	; 33
    1ea8:	d2 40       	sbci	r29, 0x02	; 2
    1eaa:	8f 93       	push	r24
    1eac:	c0 5e       	subi	r28, 0xE0	; 224
    1eae:	dd 4f       	sbci	r29, 0xFD	; 253
    1eb0:	98 81       	ld	r25, Y
    1eb2:	c0 52       	subi	r28, 0x20	; 32
    1eb4:	d2 40       	sbci	r29, 0x02	; 2
    1eb6:	9f 93       	push	r25
    1eb8:	c1 5e       	subi	r28, 0xE1	; 225
    1eba:	dd 4f       	sbci	r29, 0xFD	; 253
    1ebc:	88 81       	ld	r24, Y
    1ebe:	cf 51       	subi	r28, 0x1F	; 31
    1ec0:	d2 40       	sbci	r29, 0x02	; 2
    1ec2:	8f 93       	push	r24
    1ec4:	8f 92       	push	r8
    1ec6:	9f 92       	push	r9
    1ec8:	af 92       	push	r10
    1eca:	bf 92       	push	r11
    1ecc:	cf 92       	push	r12
    1ece:	df 92       	push	r13
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	ce 01       	movw	r24, r28
    1ed6:	8a 56       	subi	r24, 0x6A	; 106
    1ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eda:	9f 93       	push	r25
    1edc:	8f 93       	push	r24
    1ede:	3f 93       	push	r19
    1ee0:	2f 93       	push	r18
    1ee2:	86 5b       	subi	r24, 0xB6	; 182
    1ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee6:	9f 93       	push	r25
    1ee8:	8f 93       	push	r24
    1eea:	8e 01       	movw	r16, r28
    1eec:	0f 5f       	subi	r16, 0xFF	; 255
    1eee:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef0:	1f 93       	push	r17
    1ef2:	0f 93       	push	r16
    1ef4:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			checksum_NMEA(outbuf);
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	c8 01       	movw	r24, r16
    1efe:	0e 94 79 09 	call	0x12f2	; 0x12f2 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1f02:	f8 01       	movw	r30, r16
    1f04:	01 90       	ld	r0, Z+
    1f06:	00 20       	and	r0, r0
    1f08:	e9 f7       	brne	.-6      	; 0x1f04 <report+0x3c8>
    1f0a:	31 97       	sbiw	r30, 0x01	; 1
    1f0c:	af 01       	movw	r20, r30
    1f0e:	40 1b       	sub	r20, r16
    1f10:	51 0b       	sbc	r21, r17
    1f12:	b8 01       	movw	r22, r16
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <send_USART>
			writestr_OLED(1, "Temp & Humidity", 1);
    1f1a:	41 e0       	ldi	r20, 0x01	; 1
    1f1c:	67 e9       	ldi	r22, 0x97	; 151
    1f1e:	7b e7       	ldi	r23, 0x7B	; 123
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    1f26:	26 e6       	ldi	r18, 0x66	; 102
    1f28:	36 e6       	ldi	r19, 0x66	; 102
    1f2a:	46 ee       	ldi	r20, 0xE6	; 230
    1f2c:	5f e3       	ldi	r21, 0x3F	; 63
    1f2e:	6f 2d       	mov	r22, r15
    1f30:	7e 2d       	mov	r23, r14
    1f32:	8d 2d       	mov	r24, r13
    1f34:	9c 2d       	mov	r25, r12
    1f36:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__mulsf3>
    1f3a:	8f 92       	push	r8
    1f3c:	9f 92       	push	r9
    1f3e:	af 92       	push	r10
    1f40:	bf 92       	push	r11
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	52 e4       	ldi	r21, 0x42	; 66
    1f4a:	0e 94 90 15 	call	0x2b20	; 0x2b20 <__addsf3>
    1f4e:	9f 93       	push	r25
    1f50:	8f 93       	push	r24
    1f52:	7f 93       	push	r23
    1f54:	6f 93       	push	r22
    1f56:	cf 92       	push	r12
    1f58:	df 92       	push	r13
    1f5a:	ef 92       	push	r14
    1f5c:	ff 92       	push	r15
    1f5e:	87 ea       	ldi	r24, 0xA7	; 167
    1f60:	9b e7       	ldi	r25, 0x7B	; 123
    1f62:	9f 93       	push	r25
    1f64:	8f 93       	push	r24
    1f66:	1f 93       	push	r17
    1f68:	0f 93       	push	r16
    1f6a:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			writestr_OLED(1, outbuf, 2);
    1f6e:	42 e0       	ldi	r20, 0x02	; 2
    1f70:	b8 01       	movw	r22, r16
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
			break;
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    1f7e:	b1 c2       	rjmp	.+1378   	; 0x24e2 <report+0x9a6>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    1f80:	ae 01       	movw	r20, r28
    1f82:	49 5e       	subi	r20, 0xE9	; 233
    1f84:	5d 4f       	sbci	r21, 0xFD	; 253
    1f86:	be 01       	movw	r22, r28
    1f88:	6d 5e       	subi	r22, 0xED	; 237
    1f8a:	7d 4f       	sbci	r23, 0xFD	; 253
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	81 5f       	subi	r24, 0xF1	; 241
    1f90:	9d 4f       	sbci	r25, 0xFD	; 253
    1f92:	0e 94 85 08 	call	0x110a	; 0x110a <get_orientation>
			get_time(currenttime);
    1f96:	ce 01       	movw	r24, r28
    1f98:	8a 56       	subi	r24, 0x6A	; 106
    1f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9c:	0e 94 55 05 	call	0xaaa	; 0xaaa <get_time>
			sprintf(outbuf, format_ORI, get_SPECID, currenttime, x, y, z, pcmd[cstack].cid);
    1fa0:	24 e3       	ldi	r18, 0x34	; 52
    1fa2:	20 9f       	mul	r18, r16
    1fa4:	c0 01       	movw	r24, r0
    1fa6:	21 9f       	mul	r18, r17
    1fa8:	90 0d       	add	r25, r0
    1faa:	11 24       	eor	r1, r1
    1fac:	82 5d       	subi	r24, 0xD2	; 210
    1fae:	97 4d       	sbci	r25, 0xD7	; 215
    1fb0:	c9 5e       	subi	r28, 0xE9	; 233
    1fb2:	dd 4f       	sbci	r29, 0xFD	; 253
    1fb4:	a8 81       	ld	r26, Y
    1fb6:	c7 51       	subi	r28, 0x17	; 23
    1fb8:	d2 40       	sbci	r29, 0x02	; 2
    1fba:	c8 5e       	subi	r28, 0xE8	; 232
    1fbc:	dd 4f       	sbci	r29, 0xFD	; 253
    1fbe:	b8 81       	ld	r27, Y
    1fc0:	c8 51       	subi	r28, 0x18	; 24
    1fc2:	d2 40       	sbci	r29, 0x02	; 2
    1fc4:	c7 5e       	subi	r28, 0xE7	; 231
    1fc6:	dd 4f       	sbci	r29, 0xFD	; 253
    1fc8:	18 81       	ld	r17, Y
    1fca:	c9 51       	subi	r28, 0x19	; 25
    1fcc:	d2 40       	sbci	r29, 0x02	; 2
    1fce:	c6 5e       	subi	r28, 0xE6	; 230
    1fd0:	dd 4f       	sbci	r29, 0xFD	; 253
    1fd2:	08 81       	ld	r16, Y
    1fd4:	ca 51       	subi	r28, 0x1A	; 26
    1fd6:	d2 40       	sbci	r29, 0x02	; 2
    1fd8:	cd 5e       	subi	r28, 0xED	; 237
    1fda:	dd 4f       	sbci	r29, 0xFD	; 253
    1fdc:	68 81       	ld	r22, Y
    1fde:	c3 51       	subi	r28, 0x13	; 19
    1fe0:	d2 40       	sbci	r29, 0x02	; 2
    1fe2:	cc 5e       	subi	r28, 0xEC	; 236
    1fe4:	dd 4f       	sbci	r29, 0xFD	; 253
    1fe6:	78 81       	ld	r23, Y
    1fe8:	c4 51       	subi	r28, 0x14	; 20
    1fea:	d2 40       	sbci	r29, 0x02	; 2
    1fec:	cb 5e       	subi	r28, 0xEB	; 235
    1fee:	dd 4f       	sbci	r29, 0xFD	; 253
    1ff0:	e8 81       	ld	r30, Y
    1ff2:	c5 51       	subi	r28, 0x15	; 21
    1ff4:	d2 40       	sbci	r29, 0x02	; 2
    1ff6:	ca 5e       	subi	r28, 0xEA	; 234
    1ff8:	dd 4f       	sbci	r29, 0xFD	; 253
    1ffa:	f8 81       	ld	r31, Y
    1ffc:	c6 51       	subi	r28, 0x16	; 22
    1ffe:	d2 40       	sbci	r29, 0x02	; 2
    2000:	c1 5f       	subi	r28, 0xF1	; 241
    2002:	dd 4f       	sbci	r29, 0xFD	; 253
    2004:	28 81       	ld	r18, Y
    2006:	cf 50       	subi	r28, 0x0F	; 15
    2008:	d2 40       	sbci	r29, 0x02	; 2
    200a:	c0 5f       	subi	r28, 0xF0	; 240
    200c:	dd 4f       	sbci	r29, 0xFD	; 253
    200e:	38 81       	ld	r19, Y
    2010:	c0 51       	subi	r28, 0x10	; 16
    2012:	d2 40       	sbci	r29, 0x02	; 2
    2014:	cf 5e       	subi	r28, 0xEF	; 239
    2016:	dd 4f       	sbci	r29, 0xFD	; 253
    2018:	48 81       	ld	r20, Y
    201a:	c1 51       	subi	r28, 0x11	; 17
    201c:	d2 40       	sbci	r29, 0x02	; 2
    201e:	ce 5e       	subi	r28, 0xEE	; 238
    2020:	dd 4f       	sbci	r29, 0xFD	; 253
    2022:	58 81       	ld	r21, Y
    2024:	c2 51       	subi	r28, 0x12	; 18
    2026:	d2 40       	sbci	r29, 0x02	; 2
    2028:	f0 90 a8 04 	lds	r15, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    202c:	f2 fe       	sbrs	r15, 2
    202e:	05 c0       	rjmp	.+10     	; 0x203a <report+0x4fe>
    2030:	68 94       	set
    2032:	ff 24       	eor	r15, r15
    2034:	f1 f8       	bld	r15, 1
    2036:	e1 2c       	mov	r14, r1
    2038:	03 c0       	rjmp	.+6      	; 0x2040 <report+0x504>
    203a:	ff 24       	eor	r15, r15
    203c:	f3 94       	inc	r15
    203e:	e1 2c       	mov	r14, r1
    2040:	9f 93       	push	r25
    2042:	8f 93       	push	r24
    2044:	0f 93       	push	r16
    2046:	1f 93       	push	r17
    2048:	bf 93       	push	r27
    204a:	af 93       	push	r26
    204c:	ff 93       	push	r31
    204e:	ef 93       	push	r30
    2050:	7f 93       	push	r23
    2052:	6f 93       	push	r22
    2054:	5f 93       	push	r21
    2056:	4f 93       	push	r20
    2058:	3f 93       	push	r19
    205a:	2f 93       	push	r18
    205c:	ce 01       	movw	r24, r28
    205e:	8a 56       	subi	r24, 0x6A	; 106
    2060:	9f 4f       	sbci	r25, 0xFF	; 255
    2062:	9f 93       	push	r25
    2064:	8f 93       	push	r24
    2066:	ef 92       	push	r14
    2068:	ff 92       	push	r15
    206a:	84 57       	subi	r24, 0x74	; 116
    206c:	9f 4f       	sbci	r25, 0xFF	; 255
    206e:	9f 93       	push	r25
    2070:	8f 93       	push	r24
    2072:	8e 01       	movw	r16, r28
    2074:	0f 5f       	subi	r16, 0xFF	; 255
    2076:	1f 4f       	sbci	r17, 0xFF	; 255
    2078:	1f 93       	push	r17
    207a:	0f 93       	push	r16
    207c:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			checksum_NMEA(outbuf);
    2080:	c8 01       	movw	r24, r16
    2082:	0e 94 79 09 	call	0x12f2	; 0x12f2 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2086:	f8 01       	movw	r30, r16
    2088:	01 90       	ld	r0, Z+
    208a:	00 20       	and	r0, r0
    208c:	e9 f7       	brne	.-6      	; 0x2088 <report+0x54c>
    208e:	31 97       	sbiw	r30, 0x01	; 1
    2090:	af 01       	movw	r20, r30
    2092:	40 1b       	sub	r20, r16
    2094:	51 0b       	sbc	r21, r17
    2096:	b8 01       	movw	r22, r16
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <send_USART>
			writestr_OLED(1, "Orientation", 1);
    209e:	41 e0       	ldi	r20, 0x01	; 1
    20a0:	6d eb       	ldi	r22, 0xBD	; 189
    20a2:	7b e7       	ldi	r23, 0x7B	; 123
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    20aa:	c6 5e       	subi	r28, 0xE6	; 230
    20ac:	dd 4f       	sbci	r29, 0xFD	; 253
    20ae:	88 81       	ld	r24, Y
    20b0:	ca 51       	subi	r28, 0x1A	; 26
    20b2:	d2 40       	sbci	r29, 0x02	; 2
    20b4:	8f 93       	push	r24
    20b6:	c7 5e       	subi	r28, 0xE7	; 231
    20b8:	dd 4f       	sbci	r29, 0xFD	; 253
    20ba:	88 81       	ld	r24, Y
    20bc:	c9 51       	subi	r28, 0x19	; 25
    20be:	d2 40       	sbci	r29, 0x02	; 2
    20c0:	8f 93       	push	r24
    20c2:	c8 5e       	subi	r28, 0xE8	; 232
    20c4:	dd 4f       	sbci	r29, 0xFD	; 253
    20c6:	88 81       	ld	r24, Y
    20c8:	c8 51       	subi	r28, 0x18	; 24
    20ca:	d2 40       	sbci	r29, 0x02	; 2
    20cc:	8f 93       	push	r24
    20ce:	c9 5e       	subi	r28, 0xE9	; 233
    20d0:	dd 4f       	sbci	r29, 0xFD	; 253
    20d2:	88 81       	ld	r24, Y
    20d4:	c7 51       	subi	r28, 0x17	; 23
    20d6:	d2 40       	sbci	r29, 0x02	; 2
    20d8:	8f 93       	push	r24
    20da:	ca 5e       	subi	r28, 0xEA	; 234
    20dc:	dd 4f       	sbci	r29, 0xFD	; 253
    20de:	88 81       	ld	r24, Y
    20e0:	c6 51       	subi	r28, 0x16	; 22
    20e2:	d2 40       	sbci	r29, 0x02	; 2
    20e4:	8f 93       	push	r24
    20e6:	cb 5e       	subi	r28, 0xEB	; 235
    20e8:	dd 4f       	sbci	r29, 0xFD	; 253
    20ea:	88 81       	ld	r24, Y
    20ec:	c5 51       	subi	r28, 0x15	; 21
    20ee:	d2 40       	sbci	r29, 0x02	; 2
    20f0:	8f 93       	push	r24
    20f2:	cc 5e       	subi	r28, 0xEC	; 236
    20f4:	dd 4f       	sbci	r29, 0xFD	; 253
    20f6:	88 81       	ld	r24, Y
    20f8:	c4 51       	subi	r28, 0x14	; 20
    20fa:	d2 40       	sbci	r29, 0x02	; 2
    20fc:	8f 93       	push	r24
    20fe:	cd 5e       	subi	r28, 0xED	; 237
    2100:	dd 4f       	sbci	r29, 0xFD	; 253
    2102:	88 81       	ld	r24, Y
    2104:	c3 51       	subi	r28, 0x13	; 19
    2106:	d2 40       	sbci	r29, 0x02	; 2
    2108:	8f 93       	push	r24
    210a:	ce 5e       	subi	r28, 0xEE	; 238
    210c:	dd 4f       	sbci	r29, 0xFD	; 253
    210e:	88 81       	ld	r24, Y
    2110:	c2 51       	subi	r28, 0x12	; 18
    2112:	d2 40       	sbci	r29, 0x02	; 2
    2114:	8f 93       	push	r24
    2116:	cf 5e       	subi	r28, 0xEF	; 239
    2118:	dd 4f       	sbci	r29, 0xFD	; 253
    211a:	88 81       	ld	r24, Y
    211c:	c1 51       	subi	r28, 0x11	; 17
    211e:	d2 40       	sbci	r29, 0x02	; 2
    2120:	8f 93       	push	r24
    2122:	c0 5f       	subi	r28, 0xF0	; 240
    2124:	dd 4f       	sbci	r29, 0xFD	; 253
    2126:	88 81       	ld	r24, Y
    2128:	c0 51       	subi	r28, 0x10	; 16
    212a:	d2 40       	sbci	r29, 0x02	; 2
    212c:	8f 93       	push	r24
    212e:	c1 5f       	subi	r28, 0xF1	; 241
    2130:	dd 4f       	sbci	r29, 0xFD	; 253
    2132:	88 81       	ld	r24, Y
    2134:	cf 50       	subi	r28, 0x0F	; 15
    2136:	d2 40       	sbci	r29, 0x02	; 2
    2138:	8f 93       	push	r24
    213a:	ce 01       	movw	r24, r28
    213c:	8e 5b       	subi	r24, 0xBE	; 190
    213e:	9e 4f       	sbci	r25, 0xFE	; 254
    2140:	9f 93       	push	r25
    2142:	8f 93       	push	r24
    2144:	1f 93       	push	r17
    2146:	0f 93       	push	r16
    2148:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			writestr_OLED(1, outbuf, 2);
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	de bf       	out	0x3e, r29	; 62
    2150:	42 e0       	ldi	r20, 0x02	; 2
    2152:	b8 01       	movw	r22, r16
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    215a:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    215c:	c2 c1       	rjmp	.+900    	; 0x24e2 <report+0x9a6>

		case 'p':
			get_time(currenttime);
    215e:	ce 01       	movw	r24, r28
    2160:	8a 56       	subi	r24, 0x6A	; 106
    2162:	9f 4f       	sbci	r25, 0xFF	; 255
    2164:	0e 94 55 05 	call	0xaaa	; 0xaaa <get_time>
			read_PNEUSENSORS(&shutter, &left, &right, &air);
    2168:	9e 01       	movw	r18, r28
    216a:	22 5e       	subi	r18, 0xE2	; 226
    216c:	3d 4f       	sbci	r19, 0xFD	; 253
    216e:	ae 01       	movw	r20, r28
    2170:	43 5e       	subi	r20, 0xE3	; 227
    2172:	5d 4f       	sbci	r21, 0xFD	; 253
    2174:	be 01       	movw	r22, r28
    2176:	64 5e       	subi	r22, 0xE4	; 228
    2178:	7d 4f       	sbci	r23, 0xFD	; 253
    217a:	ce 01       	movw	r24, r28
    217c:	85 5e       	subi	r24, 0xE5	; 229
    217e:	9d 4f       	sbci	r25, 0xFD	; 253
    2180:	0e 94 92 0b 	call	0x1724	; 0x1724 <read_PNEUSENSORS>
			sprintf(outbuf, format_PNU, get_SPECID, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    2184:	24 e3       	ldi	r18, 0x34	; 52
    2186:	20 9f       	mul	r18, r16
    2188:	c0 01       	movw	r24, r0
    218a:	21 9f       	mul	r18, r17
    218c:	90 0d       	add	r25, r0
    218e:	11 24       	eor	r1, r1
    2190:	82 5d       	subi	r24, 0xD2	; 210
    2192:	97 4d       	sbci	r25, 0xD7	; 215
    2194:	c2 5e       	subi	r28, 0xE2	; 226
    2196:	dd 4f       	sbci	r29, 0xFD	; 253
    2198:	58 81       	ld	r21, Y
    219a:	ce 51       	subi	r28, 0x1E	; 30
    219c:	d2 40       	sbci	r29, 0x02	; 2
    219e:	c3 5e       	subi	r28, 0xE3	; 227
    21a0:	dd 4f       	sbci	r29, 0xFD	; 253
    21a2:	48 81       	ld	r20, Y
    21a4:	cd 51       	subi	r28, 0x1D	; 29
    21a6:	d2 40       	sbci	r29, 0x02	; 2
    21a8:	c4 5e       	subi	r28, 0xE4	; 228
    21aa:	dd 4f       	sbci	r29, 0xFD	; 253
    21ac:	38 81       	ld	r19, Y
    21ae:	cc 51       	subi	r28, 0x1C	; 28
    21b0:	d2 40       	sbci	r29, 0x02	; 2
    21b2:	c5 5e       	subi	r28, 0xE5	; 229
    21b4:	dd 4f       	sbci	r29, 0xFD	; 253
    21b6:	28 81       	ld	r18, Y
    21b8:	cb 51       	subi	r28, 0x1B	; 27
    21ba:	d2 40       	sbci	r29, 0x02	; 2
    21bc:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    21c0:	62 ff       	sbrs	r22, 2
    21c2:	03 c0       	rjmp	.+6      	; 0x21ca <report+0x68e>
    21c4:	62 e0       	ldi	r22, 0x02	; 2
    21c6:	70 e0       	ldi	r23, 0x00	; 0
    21c8:	02 c0       	rjmp	.+4      	; 0x21ce <report+0x692>
    21ca:	61 e0       	ldi	r22, 0x01	; 1
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	9f 93       	push	r25
    21d0:	8f 93       	push	r24
    21d2:	1f 92       	push	r1
    21d4:	5f 93       	push	r21
    21d6:	1f 92       	push	r1
    21d8:	4f 93       	push	r20
    21da:	1f 92       	push	r1
    21dc:	3f 93       	push	r19
    21de:	1f 92       	push	r1
    21e0:	2f 93       	push	r18
    21e2:	ce 01       	movw	r24, r28
    21e4:	8a 56       	subi	r24, 0x6A	; 106
    21e6:	9f 4f       	sbci	r25, 0xFF	; 255
    21e8:	9f 93       	push	r25
    21ea:	8f 93       	push	r24
    21ec:	7f 93       	push	r23
    21ee:	6f 93       	push	r22
    21f0:	82 54       	subi	r24, 0x42	; 66
    21f2:	9f 4f       	sbci	r25, 0xFF	; 255
    21f4:	9f 93       	push	r25
    21f6:	8f 93       	push	r24
    21f8:	8e 01       	movw	r16, r28
    21fa:	0f 5f       	subi	r16, 0xFF	; 255
    21fc:	1f 4f       	sbci	r17, 0xFF	; 255
    21fe:	1f 93       	push	r17
    2200:	0f 93       	push	r16
    2202:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			checksum_NMEA(outbuf);
    2206:	c8 01       	movw	r24, r16
    2208:	0e 94 79 09 	call	0x12f2	; 0x12f2 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    220c:	f8 01       	movw	r30, r16
    220e:	01 90       	ld	r0, Z+
    2210:	00 20       	and	r0, r0
    2212:	e9 f7       	brne	.-6      	; 0x220e <report+0x6d2>
    2214:	31 97       	sbiw	r30, 0x01	; 1
    2216:	af 01       	movw	r20, r30
    2218:	40 1b       	sub	r20, r16
    221a:	51 0b       	sbc	r21, r17
    221c:	b8 01       	movw	r22, r16
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <send_USART>
			sprintf(outbuf, dformat_PN1, left, right);
    2224:	c3 5e       	subi	r28, 0xE3	; 227
    2226:	dd 4f       	sbci	r29, 0xFD	; 253
    2228:	88 81       	ld	r24, Y
    222a:	cd 51       	subi	r28, 0x1D	; 29
    222c:	d2 40       	sbci	r29, 0x02	; 2
    222e:	1f 92       	push	r1
    2230:	8f 93       	push	r24
    2232:	c4 5e       	subi	r28, 0xE4	; 228
    2234:	dd 4f       	sbci	r29, 0xFD	; 253
    2236:	88 81       	ld	r24, Y
    2238:	cc 51       	subi	r28, 0x1C	; 28
    223a:	d2 40       	sbci	r29, 0x02	; 2
    223c:	1f 92       	push	r1
    223e:	8f 93       	push	r24
    2240:	ce 01       	movw	r24, r28
    2242:	8b 57       	subi	r24, 0x7B	; 123
    2244:	9e 4f       	sbci	r25, 0xFE	; 254
    2246:	9f 93       	push	r25
    2248:	8f 93       	push	r24
    224a:	1f 93       	push	r17
    224c:	0f 93       	push	r16
    224e:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			writestr_OLED(1, outbuf, 1);
    2252:	41 e0       	ldi	r20, 0x01	; 1
    2254:	b8 01       	movw	r22, r16
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    225c:	c2 5e       	subi	r28, 0xE2	; 226
    225e:	dd 4f       	sbci	r29, 0xFD	; 253
    2260:	88 81       	ld	r24, Y
    2262:	ce 51       	subi	r28, 0x1E	; 30
    2264:	d2 40       	sbci	r29, 0x02	; 2
    2266:	1f 92       	push	r1
    2268:	8f 93       	push	r24
    226a:	c5 5e       	subi	r28, 0xE5	; 229
    226c:	dd 4f       	sbci	r29, 0xFD	; 253
    226e:	88 81       	ld	r24, Y
    2270:	cb 51       	subi	r28, 0x1B	; 27
    2272:	d2 40       	sbci	r29, 0x02	; 2
    2274:	1f 92       	push	r1
    2276:	8f 93       	push	r24
    2278:	ce 01       	movw	r24, r28
    227a:	88 56       	subi	r24, 0x68	; 104
    227c:	9e 4f       	sbci	r25, 0xFE	; 254
    227e:	9f 93       	push	r25
    2280:	8f 93       	push	r24
    2282:	1f 93       	push	r17
    2284:	0f 93       	push	r16
    2286:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			writestr_OLED(1, outbuf, 2);
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	42 e0       	ldi	r20, 0x02	; 2
    2290:	b8 01       	movw	r22, r16
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2298:	80 e0       	ldi	r24, 0x00	; 0
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    229a:	23 c1       	rjmp	.+582    	; 0x24e2 <report+0x9a6>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    229c:	ce 01       	movw	r24, r28
    229e:	8a 56       	subi	r24, 0x6A	; 106
    22a0:	9f 4f       	sbci	r25, 0xFF	; 255
    22a2:	0e 94 55 05 	call	0xaaa	; 0xaaa <get_time>
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
    22a6:	24 e1       	ldi	r18, 0x14	; 20
    22a8:	ae 01       	movw	r20, r28
    22aa:	46 55       	subi	r20, 0x56	; 86
    22ac:	5f 4f       	sbci	r21, 0xFF	; 255
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	70 e0       	ldi	r23, 0x00	; 0
    22b2:	80 e5       	ldi	r24, 0x50	; 80
    22b4:	0e 94 1b 06 	call	0xc36	; 0xc36 <read_FRAM>
			get_BOOTTIME(boottime);
    22b8:	ce 01       	movw	r24, r28
    22ba:	82 54       	subi	r24, 0x42	; 66
    22bc:	9f 4f       	sbci	r25, 0xFF	; 255
    22be:	0e 94 d1 05 	call	0xba2	; 0xba2 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    22c2:	24 e3       	ldi	r18, 0x34	; 52
    22c4:	20 9f       	mul	r18, r16
    22c6:	c0 01       	movw	r24, r0
    22c8:	21 9f       	mul	r18, r17
    22ca:	90 0d       	add	r25, r0
    22cc:	11 24       	eor	r1, r1
    22ce:	82 5d       	subi	r24, 0xD2	; 210
    22d0:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
    22d2:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    22d6:	22 ff       	sbrs	r18, 2
    22d8:	03 c0       	rjmp	.+6      	; 0x22e0 <report+0x7a4>
    22da:	22 e0       	ldi	r18, 0x02	; 2
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <report+0x7a8>
    22e0:	21 e0       	ldi	r18, 0x01	; 1
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	9f 93       	push	r25
    22e6:	8f 93       	push	r24
    22e8:	ce 01       	movw	r24, r28
    22ea:	82 54       	subi	r24, 0x42	; 66
    22ec:	9f 4f       	sbci	r25, 0xFF	; 255
    22ee:	9f 93       	push	r25
    22f0:	8f 93       	push	r24
    22f2:	44 97       	sbiw	r24, 0x14	; 20
    22f4:	9f 93       	push	r25
    22f6:	8f 93       	push	r24
    22f8:	8e 01       	movw	r16, r28
    22fa:	0a 56       	subi	r16, 0x6A	; 106
    22fc:	1f 4f       	sbci	r17, 0xFF	; 255
    22fe:	1f 93       	push	r17
    2300:	0f 93       	push	r16
    2302:	3f 93       	push	r19
    2304:	2f 93       	push	r18
    2306:	8f 5f       	subi	r24, 0xFF	; 255
    2308:	9e 4f       	sbci	r25, 0xFE	; 254
    230a:	9f 93       	push	r25
    230c:	8f 93       	push	r24
    230e:	8a 5a       	subi	r24, 0xAA	; 170
    2310:	91 40       	sbci	r25, 0x01	; 1
    2312:	7c 01       	movw	r14, r24
    2314:	9f 93       	push	r25
    2316:	8f 93       	push	r24
    2318:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    231c:	c7 01       	movw	r24, r14
    231e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2322:	f7 01       	movw	r30, r14
    2324:	01 90       	ld	r0, Z+
    2326:	00 20       	and	r0, r0
    2328:	e9 f7       	brne	.-6      	; 0x2324 <report+0x7e8>
    232a:	31 97       	sbiw	r30, 0x01	; 1
    232c:	af 01       	movw	r20, r30
    232e:	4e 19       	sub	r20, r14
    2330:	5f 09       	sbc	r21, r15
    2332:	b7 01       	movw	r22, r14
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <send_USART>
			writestr_OLED(1, "Time", 1);
    233a:	41 e0       	ldi	r20, 0x01	; 1
    233c:	69 ec       	ldi	r22, 0xC9	; 201
    233e:	7b e7       	ldi	r23, 0x7B	; 123
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    2346:	b8 01       	movw	r22, r16
    2348:	65 5f       	subi	r22, 0xF5	; 245
    234a:	7f 4f       	sbci	r23, 0xFF	; 255
    234c:	42 e0       	ldi	r20, 0x02	; 2
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
			break;
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2358:	80 e0       	ldi	r24, 0x00	; 0
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    235a:	c3 c0       	rjmp	.+390    	; 0x24e2 <report+0x9a6>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	0e 94 61 07 	call	0xec2	; 0xec2 <read_ionpump>
    2362:	f6 2e       	mov	r15, r22
    2364:	e7 2e       	mov	r14, r23
    2366:	d8 2e       	mov	r13, r24
    2368:	c9 2e       	mov	r12, r25
			bluvac = read_ionpump(BLUEPUMP);
    236a:	82 e0       	ldi	r24, 0x02	; 2
    236c:	0e 94 61 07 	call	0xec2	; 0xec2 <read_ionpump>
    2370:	b6 2e       	mov	r11, r22
    2372:	a7 2e       	mov	r10, r23
    2374:	98 2e       	mov	r9, r24
    2376:	89 2e       	mov	r8, r25
			get_time(currenttime);
    2378:	ce 01       	movw	r24, r28
    237a:	8a 56       	subi	r24, 0x6A	; 106
    237c:	9f 4f       	sbci	r25, 0xFF	; 255
    237e:	0e 94 55 05 	call	0xaaa	; 0xaaa <get_time>
			sprintf(outbuf, format_VAC, get_SPECID, currenttime, redvac, bluvac, pcmd[cstack].cid);
    2382:	24 e3       	ldi	r18, 0x34	; 52
    2384:	20 9f       	mul	r18, r16
    2386:	c0 01       	movw	r24, r0
    2388:	21 9f       	mul	r18, r17
    238a:	90 0d       	add	r25, r0
    238c:	11 24       	eor	r1, r1
    238e:	82 5d       	subi	r24, 0xD2	; 210
    2390:	97 4d       	sbci	r25, 0xD7	; 215
    2392:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2396:	22 ff       	sbrs	r18, 2
    2398:	03 c0       	rjmp	.+6      	; 0x23a0 <report+0x864>
    239a:	22 e0       	ldi	r18, 0x02	; 2
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <report+0x868>
    23a0:	21 e0       	ldi	r18, 0x01	; 1
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	9f 93       	push	r25
    23a6:	8f 93       	push	r24
    23a8:	8f 92       	push	r8
    23aa:	9f 92       	push	r9
    23ac:	af 92       	push	r10
    23ae:	bf 92       	push	r11
    23b0:	cf 92       	push	r12
    23b2:	df 92       	push	r13
    23b4:	ef 92       	push	r14
    23b6:	ff 92       	push	r15
    23b8:	ce 01       	movw	r24, r28
    23ba:	8a 56       	subi	r24, 0x6A	; 106
    23bc:	9f 4f       	sbci	r25, 0xFF	; 255
    23be:	9f 93       	push	r25
    23c0:	8f 93       	push	r24
    23c2:	3f 93       	push	r19
    23c4:	2f 93       	push	r18
    23c6:	8e 5c       	subi	r24, 0xCE	; 206
    23c8:	9e 4f       	sbci	r25, 0xFE	; 254
    23ca:	9f 93       	push	r25
    23cc:	8f 93       	push	r24
    23ce:	8e 01       	movw	r16, r28
    23d0:	0f 5f       	subi	r16, 0xFF	; 255
    23d2:	1f 4f       	sbci	r17, 0xFF	; 255
    23d4:	1f 93       	push	r17
    23d6:	0f 93       	push	r16
    23d8:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			checksum_NMEA(outbuf);
    23dc:	c8 01       	movw	r24, r16
    23de:	0e 94 79 09 	call	0x12f2	; 0x12f2 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    23e2:	f8 01       	movw	r30, r16
    23e4:	01 90       	ld	r0, Z+
    23e6:	00 20       	and	r0, r0
    23e8:	e9 f7       	brne	.-6      	; 0x23e4 <report+0x8a8>
    23ea:	31 97       	sbiw	r30, 0x01	; 1
    23ec:	af 01       	movw	r20, r30
    23ee:	40 1b       	sub	r20, r16
    23f0:	51 0b       	sbc	r21, r17
    23f2:	b8 01       	movw	r22, r16
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <send_USART>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    23fa:	41 e0       	ldi	r20, 0x01	; 1
    23fc:	6e ec       	ldi	r22, 0xCE	; 206
    23fe:	7b e7       	ldi	r23, 0x7B	; 123
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    2406:	8f 92       	push	r8
    2408:	9f 92       	push	r9
    240a:	af 92       	push	r10
    240c:	bf 92       	push	r11
    240e:	cf 92       	push	r12
    2410:	df 92       	push	r13
    2412:	ef 92       	push	r14
    2414:	ff 92       	push	r15
    2416:	ce 01       	movw	r24, r28
    2418:	8f 50       	subi	r24, 0x0F	; 15
    241a:	9e 4f       	sbci	r25, 0xFE	; 254
    241c:	9f 93       	push	r25
    241e:	8f 93       	push	r24
    2420:	1f 93       	push	r17
    2422:	0f 93       	push	r16
    2424:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			writestr_OLED(1, outbuf, 2);
    2428:	42 e0       	ldi	r20, 0x02	; 2
    242a:	b8 01       	movw	r22, r16
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
			break;
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2436:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    2438:	54 c0       	rjmp	.+168    	; 0x24e2 <report+0x9a6>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    243a:	ce 01       	movw	r24, r28
    243c:	85 57       	subi	r24, 0x75	; 117
    243e:	9f 4f       	sbci	r25, 0xFF	; 255
    2440:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <get_VERSION>
			get_time(currenttime);
    2444:	ce 01       	movw	r24, r28
    2446:	8a 56       	subi	r24, 0x6A	; 106
    2448:	9f 4f       	sbci	r25, 0xFF	; 255
    244a:	0e 94 55 05 	call	0xaaa	; 0xaaa <get_time>
			sprintf(outbuf, format_VER, get_SPECID, currenttime, version, pcmd[cstack].cid);
    244e:	24 e3       	ldi	r18, 0x34	; 52
    2450:	20 9f       	mul	r18, r16
    2452:	c0 01       	movw	r24, r0
    2454:	21 9f       	mul	r18, r17
    2456:	90 0d       	add	r25, r0
    2458:	11 24       	eor	r1, r1
    245a:	82 5d       	subi	r24, 0xD2	; 210
    245c:	97 4d       	sbci	r25, 0xD7	; 215
    245e:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2462:	22 ff       	sbrs	r18, 2
    2464:	03 c0       	rjmp	.+6      	; 0x246c <report+0x930>
    2466:	22 e0       	ldi	r18, 0x02	; 2
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	02 c0       	rjmp	.+4      	; 0x2470 <report+0x934>
    246c:	21 e0       	ldi	r18, 0x01	; 1
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	9f 93       	push	r25
    2472:	8f 93       	push	r24
    2474:	ce 01       	movw	r24, r28
    2476:	85 57       	subi	r24, 0x75	; 117
    2478:	9f 4f       	sbci	r25, 0xFF	; 255
    247a:	9f 93       	push	r25
    247c:	8f 93       	push	r24
    247e:	0b 96       	adiw	r24, 0x0b	; 11
    2480:	9f 93       	push	r25
    2482:	8f 93       	push	r24
    2484:	3f 93       	push	r19
    2486:	2f 93       	push	r18
    2488:	88 59       	subi	r24, 0x98	; 152
    248a:	9e 4f       	sbci	r25, 0xFE	; 254
    248c:	9f 93       	push	r25
    248e:	8f 93       	push	r24
    2490:	8e 01       	movw	r16, r28
    2492:	0f 5f       	subi	r16, 0xFF	; 255
    2494:	1f 4f       	sbci	r17, 0xFF	; 255
    2496:	1f 93       	push	r17
    2498:	0f 93       	push	r16
    249a:	0e 94 af 1c 	call	0x395e	; 0x395e <sprintf>
			checksum_NMEA(outbuf);
    249e:	c8 01       	movw	r24, r16
    24a0:	0e 94 79 09 	call	0x12f2	; 0x12f2 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    24a4:	f8 01       	movw	r30, r16
    24a6:	01 90       	ld	r0, Z+
    24a8:	00 20       	and	r0, r0
    24aa:	e9 f7       	brne	.-6      	; 0x24a6 <report+0x96a>
    24ac:	31 97       	sbiw	r30, 0x01	; 1
    24ae:	af 01       	movw	r20, r30
    24b0:	40 1b       	sub	r20, r16
    24b2:	51 0b       	sbc	r21, r17
    24b4:	b8 01       	movw	r22, r16
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <send_USART>
			writestr_OLED(1, "specMech Version", 1);
    24bc:	41 e0       	ldi	r20, 0x01	; 1
    24be:	62 e3       	ldi	r22, 0x32	; 50
    24c0:	7b e7       	ldi	r23, 0x7B	; 123
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
			get_VERSION(outbuf);
    24c8:	c8 01       	movw	r24, r16
    24ca:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    24ce:	42 e0       	ldi	r20, 0x02	; 2
    24d0:	b8 01       	movw	r22, r16
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	0e 94 cd 0a 	call	0x159a	; 0x159a <writestr_OLED>
			break;
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    24dc:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    24de:	01 c0       	rjmp	.+2      	; 0x24e2 <report+0x9a6>

		default:
			return(ERRORPROMPT);
    24e0:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}

	return(GREATERPROMPT);

}
    24e2:	c4 5d       	subi	r28, 0xD4	; 212
    24e4:	dd 4f       	sbci	r29, 0xFD	; 253
    24e6:	cd bf       	out	0x3d, r28	; 61
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	df 91       	pop	r29
    24ec:	cf 91       	pop	r28
    24ee:	1f 91       	pop	r17
    24f0:	0f 91       	pop	r16
    24f2:	ff 90       	pop	r15
    24f4:	ef 90       	pop	r14
    24f6:	df 90       	pop	r13
    24f8:	cf 90       	pop	r12
    24fa:	bf 90       	pop	r11
    24fc:	af 90       	pop	r10
    24fe:	9f 90       	pop	r9
    2500:	8f 90       	pop	r8
    2502:	7f 90       	pop	r7
    2504:	6f 90       	pop	r6
    2506:	5f 90       	pop	r5
    2508:	4f 90       	pop	r4
    250a:	3f 90       	pop	r3
    250c:	2f 90       	pop	r2
    250e:	08 95       	ret

00002510 <init_RTC>:
			between interrupts. ticks = 30719 generates an interrupt
			every minute. ticks = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticks)
{
    2510:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2512:	e0 e6       	ldi	r30, 0x60	; 96
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    2518:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    251a:	88 ed       	ldi	r24, 0xD8	; 216
    251c:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    251e:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2520:	01 c0       	rjmp	.+2      	; 0x2524 <init_RTC+0x14>
		asm("nop");
    2522:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2524:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    2528:	96 fd       	sbrc	r25, 6
    252a:	fb cf       	rjmp	.-10     	; 0x2522 <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    252c:	e0 e6       	ldi	r30, 0x60	; 96
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    2532:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    2534:	28 ed       	ldi	r18, 0xD8	; 216
    2536:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2538:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    253a:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    253c:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    253e:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2540:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    2542:	01 c0       	rjmp	.+2      	; 0x2546 <init_RTC+0x36>
		asm("nop");
    2544:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    2546:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    254a:	91 11       	cpse	r25, r1
    254c:	fb cf       	rjmp	.-10     	; 0x2544 <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticks;
    254e:	e0 e4       	ldi	r30, 0x40	; 64
    2550:	f1 e0       	ldi	r31, 0x01	; 1
    2552:	42 87       	std	Z+10, r20	; 0x0a
    2554:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    2556:	82 e0       	ldi	r24, 0x02	; 2
    2558:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    255a:	85 81       	ldd	r24, Z+5	; 0x05
    255c:	81 60       	ori	r24, 0x01	; 1
    255e:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    2560:	81 eb       	ldi	r24, 0xB1	; 177
    2562:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    2564:	82 81       	ldd	r24, Z+2	; 0x02
    2566:	81 60       	ori	r24, 0x01	; 1
    2568:	82 83       	std	Z+2, r24	; 0x02
    256a:	08 95       	ret

0000256c <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    256c:	1f 92       	push	r1
    256e:	0f 92       	push	r0
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	0f 92       	push	r0
    2574:	11 24       	eor	r1, r1
    2576:	2f 93       	push	r18
    2578:	3f 93       	push	r19
    257a:	4f 93       	push	r20
    257c:	5f 93       	push	r21
    257e:	6f 93       	push	r22
    2580:	7f 93       	push	r23
    2582:	8f 93       	push	r24
    2584:	9f 93       	push	r25
    2586:	af 93       	push	r26
    2588:	bf 93       	push	r27
    258a:	ef 93       	push	r30
    258c:	ff 93       	push	r31

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	if (timerOLED) {
    2594:	80 91 0b 2a 	lds	r24, 0x2A0B	; 0x802a0b <timerOLED>
    2598:	90 91 0c 2a 	lds	r25, 0x2A0C	; 0x802a0c <timerOLED+0x1>
    259c:	00 97       	sbiw	r24, 0x00	; 0
    259e:	b9 f0       	breq	.+46     	; 0x25ce <__vector_3+0x62>
		if (timerOLED > timeoutOLED) {	// Display timeout
    25a0:	20 91 0d 2a 	lds	r18, 0x2A0D	; 0x802a0d <timeoutOLED>
    25a4:	30 91 0e 2a 	lds	r19, 0x2A0E	; 0x802a0e <timeoutOLED+0x1>
    25a8:	28 17       	cp	r18, r24
    25aa:	39 07       	cpc	r19, r25
    25ac:	58 f4       	brcc	.+22     	; 0x25c4 <__vector_3+0x58>
			clear_OLED(0);
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	0e 94 2a 0b 	call	0x1654	; 0x1654 <clear_OLED>
			clear_OLED(1);
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	0e 94 2a 0b 	call	0x1654	; 0x1654 <clear_OLED>
			timerOLED = 0;
    25ba:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <timerOLED>
    25be:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED+0x1>
    25c2:	05 c0       	rjmp	.+10     	; 0x25ce <__vector_3+0x62>
		} else {
			timerOLED++;
    25c4:	01 96       	adiw	r24, 0x01	; 1
    25c6:	80 93 0b 2a 	sts	0x2A0B, r24	; 0x802a0b <timerOLED>
    25ca:	90 93 0c 2a 	sts	0x2A0C, r25	; 0x802a0c <timerOLED+0x1>
		}
	}
	toggle_LED;						// Defined in led.c
    25ce:	80 e2       	ldi	r24, 0x20	; 32
    25d0:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>

}
    25d4:	ff 91       	pop	r31
    25d6:	ef 91       	pop	r30
    25d8:	bf 91       	pop	r27
    25da:	af 91       	pop	r26
    25dc:	9f 91       	pop	r25
    25de:	8f 91       	pop	r24
    25e0:	7f 91       	pop	r23
    25e2:	6f 91       	pop	r22
    25e4:	5f 91       	pop	r21
    25e6:	4f 91       	pop	r20
    25e8:	3f 91       	pop	r19
    25ea:	2f 91       	pop	r18
    25ec:	0f 90       	pop	r0
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	0f 90       	pop	r0
    25f2:	1f 90       	pop	r1
    25f4:	18 95       	reti

000025f6 <set>:
	Returns:
		GREATERPROMPT on success
		ERRORPROMPT if an invalid object was requested.
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    25f6:	cf 93       	push	r28
    25f8:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	24 e3       	ldi	r18, 0x34	; 52
    25fe:	28 9f       	mul	r18, r24
    2600:	f0 01       	movw	r30, r0
    2602:	29 9f       	mul	r18, r25
    2604:	f0 0d       	add	r31, r0
    2606:	11 24       	eor	r1, r1
    2608:	ed 5f       	subi	r30, 0xFD	; 253
    260a:	f7 4d       	sbci	r31, 0xD7	; 215
    260c:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    260e:	24 37       	cpi	r18, 0x74	; 116
    2610:	e9 f4       	brne	.+58     	; 0x264c <set+0x56>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    2612:	24 e3       	ldi	r18, 0x34	; 52
    2614:	28 9f       	mul	r18, r24
    2616:	e0 01       	movw	r28, r0
    2618:	29 9f       	mul	r18, r25
    261a:	d0 0d       	add	r29, r0
    261c:	11 24       	eor	r1, r1
    261e:	cb 5f       	subi	r28, 0xFB	; 251
    2620:	d7 4d       	sbci	r29, 0xD7	; 215
    2622:	fe 01       	movw	r30, r28
    2624:	01 90       	ld	r0, Z+
    2626:	00 20       	and	r0, r0
    2628:	e9 f7       	brne	.-6      	; 0x2624 <set+0x2e>
    262a:	31 97       	sbiw	r30, 0x01	; 1
    262c:	ec 1b       	sub	r30, r28
    262e:	fd 0b       	sbc	r31, r29
    2630:	73 97       	sbiw	r30, 0x13	; 19
    2632:	71 f4       	brne	.+28     	; 0x2650 <set+0x5a>
				return(ERRORPROMPT);
			}
			put_time(pcmd[cstack].cvalue);
    2634:	ce 01       	movw	r24, r28
    2636:	0e 94 b9 05 	call	0xb72	; 0xb72 <put_time>
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    263a:	24 e1       	ldi	r18, 0x14	; 20
    263c:	ae 01       	movw	r20, r28
    263e:	60 e0       	ldi	r22, 0x00	; 0
    2640:	70 e0       	ldi	r23, 0x00	; 0
    2642:	80 e5       	ldi	r24, 0x50	; 80
    2644:	0e 94 5d 06 	call	0xcba	; 0xcba <write_FRAM>
			break;

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	03 c0       	rjmp	.+6      	; 0x2652 <set+0x5c>
			put_time(pcmd[cstack].cvalue);
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			return(ERRORPROMPT);
    264c:	82 e0       	ldi	r24, 0x02	; 2
    264e:	01 c0       	rjmp	.+2      	; 0x2652 <set+0x5c>
	object = pcmd[cstack].cobject;

	switch(object) {
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
				return(ERRORPROMPT);
    2650:	82 e0       	ldi	r24, 0x02	; 2

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
}
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	08 95       	ret

00002658 <init_SPECID>:
	pullup. Must be called AFTER init_PORTS().
------------------------------------------------------------------------------*/
void init_SPECID(void)
{

	PORTF.PIN2CTRL &= ~PORT_PULLUPEN_bm;	// Remove pullup
    2658:	e0 ea       	ldi	r30, 0xA0	; 160
    265a:	f4 e0       	ldi	r31, 0x04	; 4
    265c:	82 89       	ldd	r24, Z+18	; 0x12
    265e:	87 7f       	andi	r24, 0xF7	; 247
    2660:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.DIRCLR = PIN2_bm;					// Set as input
    2662:	84 e0       	ldi	r24, 0x04	; 4
    2664:	82 83       	std	Z+2, r24	; 0x02
    2666:	08 95       	ret

00002668 <get_temperature>:
float get_temperature(uint8_t sensor)
{

	float temperature;

	switch (sensor) {
    2668:	83 30       	cpi	r24, 0x03	; 3
    266a:	18 f0       	brcs	.+6      	; 0x2672 <get_temperature+0xa>
    266c:	83 30       	cpi	r24, 0x03	; 3
    266e:	21 f0       	breq	.+8      	; 0x2678 <get_temperature+0x10>
    2670:	06 c0       	rjmp	.+12     	; 0x267e <get_temperature+0x16>
		case 0:
		case 1:
		case 2:
			temperature = read_AD590(sensor);
    2672:	0e 94 25 01 	call	0x24a	; 0x24a <read_AD590>
			break;
    2676:	08 95       	ret
		case 3:
			temperature = read_MCP9808();
    2678:	0e 94 02 08 	call	0x1004	; 0x1004 <read_MCP9808>
			break;
    267c:	08 95       	ret
		default:
			temperature = -999.9;
    267e:	6a e9       	ldi	r22, 0x9A	; 154
    2680:	79 ef       	ldi	r23, 0xF9	; 249
    2682:	89 e7       	ldi	r24, 0x79	; 121
    2684:	94 ec       	ldi	r25, 0xC4	; 196
			break;
	}

	return(temperature);

}
    2686:	08 95       	ret

00002688 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    2688:	e0 ea       	ldi	r30, 0xA0	; 160
    268a:	f8 e0       	ldi	r31, 0x08	; 8
    268c:	8b e0       	ldi	r24, 0x0B	; 11
    268e:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    2690:	83 81       	ldd	r24, Z+3	; 0x03
    2692:	81 60       	ori	r24, 0x01	; 1
    2694:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    2696:	85 81       	ldd	r24, Z+5	; 0x05
    2698:	81 60       	ori	r24, 0x01	; 1
    269a:	85 83       	std	Z+5, r24	; 0x05
    269c:	08 95       	ret

0000269e <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    269e:	01 c0       	rjmp	.+2      	; 0x26a2 <read_TWI+0x4>
		asm("nop");								// Should set timer here
    26a0:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    26a2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    26a6:	88 23       	and	r24, r24
    26a8:	dc f7       	brge	.-10     	; 0x26a0 <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    26aa:	e0 ea       	ldi	r30, 0xA0	; 160
    26ac:	f8 e0       	ldi	r31, 0x08	; 8
    26ae:	84 81       	ldd	r24, Z+4	; 0x04
    26b0:	8b 7f       	andi	r24, 0xFB	; 251
    26b2:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    26b4:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    26b6:	94 81       	ldd	r25, Z+4	; 0x04
    26b8:	92 60       	ori	r25, 0x02	; 2
    26ba:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    26bc:	08 95       	ret

000026be <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    26be:	01 c0       	rjmp	.+2      	; 0x26c2 <readlast_TWI+0x4>
		asm("nop");
    26c0:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    26c2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    26c6:	88 23       	and	r24, r24
    26c8:	dc f7       	brge	.-10     	; 0x26c0 <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    26ca:	e0 ea       	ldi	r30, 0xA0	; 160
    26cc:	f8 e0       	ldi	r31, 0x08	; 8
    26ce:	84 81       	ldd	r24, Z+4	; 0x04
    26d0:	84 60       	ori	r24, 0x04	; 4
    26d2:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    26d4:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    26d6:	08 95       	ret

000026d8 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    26d8:	61 30       	cpi	r22, 0x01	; 1
    26da:	29 f4       	brne	.+10     	; 0x26e6 <start_TWI+0xe>
//		addr |= 0x01;
		addr = ((addr << 1) | 0x01);
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	88 0f       	add	r24, r24
    26e0:	99 1f       	adc	r25, r25
    26e2:	81 60       	ori	r24, 0x01	; 1
    26e4:	01 c0       	rjmp	.+2      	; 0x26e8 <start_TWI+0x10>

	} else {
		addr = ((addr << 1) & ~0x01);
    26e6:	88 0f       	add	r24, r24
//		addr &= ~0x01;
	}

	TWI0.MADDR = addr;							// Start condition
    26e8:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    26ec:	01 c0       	rjmp	.+2      	; 0x26f0 <start_TWI+0x18>
		asm("nop");								// Wait for addr transmission
    26ee:	00 00       	nop
//		addr &= ~0x01;
	}

	TWI0.MADDR = addr;							// Start condition

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    26f0:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    26f4:	80 7c       	andi	r24, 0xC0	; 192
    26f6:	d9 f3       	breq	.-10     	; 0x26ee <start_TWI+0x16>
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    26f8:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    26fc:	82 fd       	sbrc	r24, 2
    26fe:	0c c0       	rjmp	.+24     	; 0x2718 <start_TWI+0x40>
		return(TWIBUSERR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    2700:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2704:	83 fd       	sbrc	r24, 3
    2706:	0a c0       	rjmp	.+20     	; 0x271c <start_TWI+0x44>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    2708:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    270c:	89 2f       	mov	r24, r25
    270e:	80 71       	andi	r24, 0x10	; 16
    2710:	94 ff       	sbrs	r25, 4
    2712:	05 c0       	rjmp	.+10     	; 0x271e <start_TWI+0x46>
		return(TWINODEVICE);
    2714:	84 e0       	ldi	r24, 0x04	; 4
    2716:	08 95       	ret
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERR);
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    271c:	82 e0       	ldi	r24, 0x02	; 2
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
	} else {									// OK
		return(0);
	}
}
    271e:	08 95       	ret

00002720 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    2720:	87 e0       	ldi	r24, 0x07	; 7
    2722:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    2726:	08 95       	ret

00002728 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    2728:	01 c0       	rjmp	.+2      	; 0x272c <write_TWI+0x4>
		asm("nop");
    272a:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    272c:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2730:	96 ff       	sbrs	r25, 6
    2732:	fb cf       	rjmp	.-10     	; 0x272a <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    2734:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    2738:	01 c0       	rjmp	.+2      	; 0x273c <write_TWI+0x14>
		asm("nop");
    273a:	00 00       	nop
		asm("nop");
	}

	TWI0.MDATA = data;

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    273c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2740:	86 ff       	sbrs	r24, 6
    2742:	fb cf       	rjmp	.-10     	; 0x273a <write_TWI+0x12>
		asm("nop");
	}

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    2744:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2748:	89 2f       	mov	r24, r25
    274a:	80 71       	andi	r24, 0x10	; 16
    274c:	94 fd       	sbrc	r25, 4
		return(TWIACKERR);
    274e:	83 e0       	ldi	r24, 0x03	; 3
	} else {
		return(0);
	}

}
    2750:	08 95       	ret

00002752 <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    2752:	e0 e0       	ldi	r30, 0x00	; 0
    2754:	f4 e0       	ldi	r31, 0x04	; 4
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    275a:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    275c:	e0 e0       	ldi	r30, 0x00	; 0
    275e:	f8 e0       	ldi	r31, 0x08	; 8
    2760:	2d e6       	ldi	r18, 0x6D	; 109
    2762:	35 e0       	ldi	r19, 0x05	; 5
    2764:	20 87       	std	Z+8, r18	; 0x08
    2766:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    2768:	95 81       	ldd	r25, Z+5	; 0x05
    276a:	90 68       	ori	r25, 0x80	; 128
    276c:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    276e:	96 81       	ldd	r25, Z+6	; 0x06
    2770:	90 64       	ori	r25, 0x40	; 64
    2772:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART Receiver
    2774:	96 81       	ldd	r25, Z+6	; 0x06
    2776:	90 68       	ori	r25, 0x80	; 128
    2778:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;
    277a:	10 92 9a 2b 	sts	0x2B9A, r1	; 0x802b9a <send0_buf+0x80>
	send0_buf.tail = 0;
    277e:	10 92 9b 2b 	sts	0x2B9B, r1	; 0x802b9b <send0_buf+0x81>
	send0_buf.done = YES;
    2782:	80 93 9e 2b 	sts	0x2B9E, r24	; 0x802b9e <send0_buf+0x84>
	recv0_buf.head = 0;
    2786:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv0_buf+0x80>
	recv0_buf.tail = 0;
    278a:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv0_buf+0x81>
	recv0_buf.data[0] = '\0';
    278e:	10 92 95 2a 	sts	0x2A95, r1	; 0x802a95 <recv0_buf>
	recv0_buf.done = NO;
    2792:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv0_buf+0x84>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    2796:	e0 e4       	ldi	r30, 0x40	; 64
    2798:	f4 e0       	ldi	r31, 0x04	; 4
    279a:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    279c:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    279e:	e0 e2       	ldi	r30, 0x20	; 32
    27a0:	f8 e0       	ldi	r31, 0x08	; 8
    27a2:	20 87       	std	Z+8, r18	; 0x08
    27a4:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLB |= USART_TXEN_bm;
    27a6:	96 81       	ldd	r25, Z+6	; 0x06
    27a8:	90 64       	ori	r25, 0x40	; 64
    27aa:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;
    27ac:	96 81       	ldd	r25, Z+6	; 0x06
    27ae:	90 68       	ori	r25, 0x80	; 128
    27b0:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.done = YES;
    27b2:	80 93 2d 2d 	sts	0x2D2D, r24	; 0x802d2d <send1_buf+0x84>
	recv1_buf.done = NO;
    27b6:	10 92 94 2a 	sts	0x2A94, r1	; 0x802a94 <recv1_buf+0x84>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    27ba:	e0 e2       	ldi	r30, 0x20	; 32
    27bc:	f4 e0       	ldi	r31, 0x04	; 4
    27be:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    27c0:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    27c2:	e0 e6       	ldi	r30, 0x60	; 96
    27c4:	f8 e0       	ldi	r31, 0x08	; 8
    27c6:	20 87       	std	Z+8, r18	; 0x08
    27c8:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    27ca:	96 81       	ldd	r25, Z+6	; 0x06
    27cc:	90 64       	ori	r25, 0x40	; 64
    27ce:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    27d0:	96 81       	ldd	r25, Z+6	; 0x06
    27d2:	90 68       	ori	r25, 0x80	; 128
    27d4:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    27d6:	80 93 a8 2c 	sts	0x2CA8, r24	; 0x802ca8 <send3_buf+0x84>
	recv3_buf.done = NO;
    27da:	10 92 23 2c 	sts	0x2C23, r1	; 0x802c23 <recv3_buf+0x84>
    27de:	08 95       	ret

000027e0 <send_USART>:
		port - The USARTn port (0, 1, or 3)
		data - Contains the data to send
		nbytes - Number of bytes to send
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    27e0:	fb 01       	movw	r30, r22

	uint8_t i;

	switch (port) {
    27e2:	81 30       	cpi	r24, 0x01	; 1
    27e4:	09 f4       	brne	.+2      	; 0x27e8 <send_USART+0x8>
    27e6:	40 c0       	rjmp	.+128    	; 0x2868 <send_USART+0x88>
    27e8:	e8 f0       	brcs	.+58     	; 0x2824 <send_USART+0x44>
    27ea:	83 30       	cpi	r24, 0x03	; 3
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <send_USART+0x10>
    27ee:	5e c0       	rjmp	.+188    	; 0x28ac <send_USART+0xcc>
    27f0:	08 95       	ret
		case 0:
			for (i = 0; i < nbytes; i++) {
				send0_buf.data[send0_buf.head] = *data++;
    27f2:	80 91 9a 2b 	lds	r24, 0x2B9A	; 0x802b9a <send0_buf+0x80>
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	bf 01       	movw	r22, r30
    27fa:	6f 5f       	subi	r22, 0xFF	; 255
    27fc:	7f 4f       	sbci	r23, 0xFF	; 255
    27fe:	30 81       	ld	r19, Z
    2800:	fc 01       	movw	r30, r24
    2802:	e6 5e       	subi	r30, 0xE6	; 230
    2804:	f4 4d       	sbci	r31, 0xD4	; 212
    2806:	30 83       	st	Z, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    2808:	01 96       	adiw	r24, 0x01	; 1
    280a:	8f 77       	andi	r24, 0x7F	; 127
    280c:	90 78       	andi	r25, 0x80	; 128
    280e:	99 23       	and	r25, r25
    2810:	24 f4       	brge	.+8      	; 0x281a <send_USART+0x3a>
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	80 68       	ori	r24, 0x80	; 128
    2816:	9f 6f       	ori	r25, 0xFF	; 255
    2818:	01 96       	adiw	r24, 0x01	; 1
    281a:	80 93 9a 2b 	sts	0x2B9A, r24	; 0x802b9a <send0_buf+0x80>

	uint8_t i;

	switch (port) {
		case 0:
			for (i = 0; i < nbytes; i++) {
    281e:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    2820:	fb 01       	movw	r30, r22
    2822:	01 c0       	rjmp	.+2      	; 0x2826 <send_USART+0x46>
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{

	uint8_t i;

	switch (port) {
    2824:	20 e0       	ldi	r18, 0x00	; 0
		case 0:
			for (i = 0; i < nbytes; i++) {
    2826:	24 17       	cp	r18, r20
    2828:	20 f3       	brcs	.-56     	; 0x27f2 <send_USART+0x12>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    282a:	e0 e0       	ldi	r30, 0x00	; 0
    282c:	f8 e0       	ldi	r31, 0x08	; 8
    282e:	85 81       	ldd	r24, Z+5	; 0x05
    2830:	80 62       	ori	r24, 0x20	; 32
    2832:	85 83       	std	Z+5, r24	; 0x05
			break;
    2834:	08 95       	ret

		case 1:
			for (i = 0; i < nbytes; i++) {
				send1_buf.data[send1_buf.head] = *data++;
    2836:	80 91 29 2d 	lds	r24, 0x2D29	; 0x802d29 <send1_buf+0x80>
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	bf 01       	movw	r22, r30
    283e:	6f 5f       	subi	r22, 0xFF	; 255
    2840:	7f 4f       	sbci	r23, 0xFF	; 255
    2842:	30 81       	ld	r19, Z
    2844:	fc 01       	movw	r30, r24
    2846:	e7 55       	subi	r30, 0x57	; 87
    2848:	f3 4d       	sbci	r31, 0xD3	; 211
    284a:	30 83       	st	Z, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    284c:	01 96       	adiw	r24, 0x01	; 1
    284e:	8f 77       	andi	r24, 0x7F	; 127
    2850:	90 78       	andi	r25, 0x80	; 128
    2852:	99 23       	and	r25, r25
    2854:	24 f4       	brge	.+8      	; 0x285e <send_USART+0x7e>
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	80 68       	ori	r24, 0x80	; 128
    285a:	9f 6f       	ori	r25, 0xFF	; 255
    285c:	01 96       	adiw	r24, 0x01	; 1
    285e:	80 93 29 2d 	sts	0x2D29, r24	; 0x802d29 <send1_buf+0x80>
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			for (i = 0; i < nbytes; i++) {
    2862:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    2864:	fb 01       	movw	r30, r22
    2866:	01 c0       	rjmp	.+2      	; 0x286a <send_USART+0x8a>
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{

	uint8_t i;

	switch (port) {
    2868:	20 e0       	ldi	r18, 0x00	; 0
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			for (i = 0; i < nbytes; i++) {
    286a:	24 17       	cp	r18, r20
    286c:	20 f3       	brcs	.-56     	; 0x2836 <send_USART+0x56>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    286e:	e0 e2       	ldi	r30, 0x20	; 32
    2870:	f8 e0       	ldi	r31, 0x08	; 8
    2872:	85 81       	ldd	r24, Z+5	; 0x05
    2874:	80 62       	ori	r24, 0x20	; 32
    2876:	85 83       	std	Z+5, r24	; 0x05
			break;
    2878:	08 95       	ret

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    287a:	80 91 a4 2c 	lds	r24, 0x2CA4	; 0x802ca4 <send3_buf+0x80>
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	bf 01       	movw	r22, r30
    2882:	6f 5f       	subi	r22, 0xFF	; 255
    2884:	7f 4f       	sbci	r23, 0xFF	; 255
    2886:	30 81       	ld	r19, Z
    2888:	fc 01       	movw	r30, r24
    288a:	ec 5d       	subi	r30, 0xDC	; 220
    288c:	f3 4d       	sbci	r31, 0xD3	; 211
    288e:	30 83       	st	Z, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    2890:	01 96       	adiw	r24, 0x01	; 1
    2892:	8f 77       	andi	r24, 0x7F	; 127
    2894:	90 78       	andi	r25, 0x80	; 128
    2896:	99 23       	and	r25, r25
    2898:	24 f4       	brge	.+8      	; 0x28a2 <send_USART+0xc2>
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	80 68       	ori	r24, 0x80	; 128
    289e:	9f 6f       	ori	r25, 0xFF	; 255
    28a0:	01 96       	adiw	r24, 0x01	; 1
    28a2:	80 93 a4 2c 	sts	0x2CA4, r24	; 0x802ca4 <send3_buf+0x80>
			}
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    28a6:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    28a8:	fb 01       	movw	r30, r22
    28aa:	01 c0       	rjmp	.+2      	; 0x28ae <send_USART+0xce>
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{

	uint8_t i;

	switch (port) {
    28ac:	20 e0       	ldi	r18, 0x00	; 0
			}
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    28ae:	24 17       	cp	r18, r20
    28b0:	20 f3       	brcs	.-56     	; 0x287a <send_USART+0x9a>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    28b2:	e0 e6       	ldi	r30, 0x60	; 96
    28b4:	f8 e0       	ldi	r31, 0x08	; 8
    28b6:	85 81       	ldd	r24, Z+5	; 0x05
    28b8:	80 62       	ori	r24, 0x20	; 32
    28ba:	85 83       	std	Z+5, r24	; 0x05
    28bc:	08 95       	ret

000028be <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    28be:	1f 92       	push	r1
    28c0:	0f 92       	push	r0
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	0f 92       	push	r0
    28c6:	11 24       	eor	r1, r1
    28c8:	8f 93       	push	r24
    28ca:	9f 93       	push	r25
    28cc:	ef 93       	push	r30
    28ce:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    28d0:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if ((char) c == '\r') {
    28d4:	8d 30       	cpi	r24, 0x0D	; 13
    28d6:	51 f4       	brne	.+20     	; 0x28ec <__vector_17+0x2e>
		recv0_buf.done = YES;
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	80 93 19 2b 	sts	0x2B19, r24	; 0x802b19 <recv0_buf+0x84>
		recv0_buf.data[recv0_buf.head] = '\0';
    28de:	e0 91 15 2b 	lds	r30, 0x2B15	; 0x802b15 <recv0_buf+0x80>
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	eb 56       	subi	r30, 0x6B	; 107
    28e6:	f5 4d       	sbci	r31, 0xD5	; 213
    28e8:	10 82       	st	Z, r1
    28ea:	06 c0       	rjmp	.+12     	; 0x28f8 <__vector_17+0x3a>
	} else {
		recv0_buf.data[recv0_buf.head] = c;
    28ec:	e0 91 15 2b 	lds	r30, 0x2B15	; 0x802b15 <recv0_buf+0x80>
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	eb 56       	subi	r30, 0x6B	; 107
    28f4:	f5 4d       	sbci	r31, 0xD5	; 213
    28f6:	80 83       	st	Z, r24
	}
	recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    28f8:	80 91 15 2b 	lds	r24, 0x2B15	; 0x802b15 <recv0_buf+0x80>
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	01 96       	adiw	r24, 0x01	; 1
    2900:	8f 77       	andi	r24, 0x7F	; 127
    2902:	90 78       	andi	r25, 0x80	; 128
    2904:	99 23       	and	r25, r25
    2906:	24 f4       	brge	.+8      	; 0x2910 <__vector_17+0x52>
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	80 68       	ori	r24, 0x80	; 128
    290c:	9f 6f       	ori	r25, 0xFF	; 255
    290e:	01 96       	adiw	r24, 0x01	; 1
    2910:	80 93 15 2b 	sts	0x2B15, r24	; 0x802b15 <recv0_buf+0x80>

}
    2914:	ff 91       	pop	r31
    2916:	ef 91       	pop	r30
    2918:	9f 91       	pop	r25
    291a:	8f 91       	pop	r24
    291c:	0f 90       	pop	r0
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	0f 90       	pop	r0
    2922:	1f 90       	pop	r1
    2924:	18 95       	reti

00002926 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    2926:	1f 92       	push	r1
    2928:	0f 92       	push	r0
    292a:	0f b6       	in	r0, 0x3f	; 63
    292c:	0f 92       	push	r0
    292e:	11 24       	eor	r1, r1
    2930:	8f 93       	push	r24
    2932:	9f 93       	push	r25
    2934:	ef 93       	push	r30
    2936:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2938:	e0 e0       	ldi	r30, 0x00	; 0
    293a:	f8 e0       	ldi	r31, 0x08	; 8
    293c:	85 81       	ldd	r24, Z+5	; 0x05
    293e:	8f 7d       	andi	r24, 0xDF	; 223
    2940:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    2942:	80 91 9a 2b 	lds	r24, 0x2B9A	; 0x802b9a <send0_buf+0x80>
    2946:	e0 91 9b 2b 	lds	r30, 0x2B9B	; 0x802b9b <send0_buf+0x81>
    294a:	8e 17       	cp	r24, r30
    294c:	81 f0       	breq	.+32     	; 0x296e <__vector_18+0x48>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	8e 0f       	add	r24, r30
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	e6 5e       	subi	r30, 0xE6	; 230
    2956:	f4 4d       	sbci	r31, 0xD4	; 212
    2958:	90 81       	ld	r25, Z
    295a:	e0 e0       	ldi	r30, 0x00	; 0
    295c:	f8 e0       	ldi	r31, 0x08	; 8
    295e:	92 83       	std	Z+2, r25	; 0x02
		send0_buf.tail %= BUFSIZE;
    2960:	8f 77       	andi	r24, 0x7F	; 127
    2962:	80 93 9b 2b 	sts	0x2B9B, r24	; 0x802b9b <send0_buf+0x81>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    2966:	85 81       	ldd	r24, Z+5	; 0x05
    2968:	80 62       	ori	r24, 0x20	; 32
    296a:	85 83       	std	Z+5, r24	; 0x05
    296c:	03 c0       	rjmp	.+6      	; 0x2974 <__vector_18+0x4e>
	} else {
		send0_buf.done = YES;
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	80 93 9e 2b 	sts	0x2B9E, r24	; 0x802b9e <send0_buf+0x84>
	}

}
    2974:	ff 91       	pop	r31
    2976:	ef 91       	pop	r30
    2978:	9f 91       	pop	r25
    297a:	8f 91       	pop	r24
    297c:	0f 90       	pop	r0
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	0f 90       	pop	r0
    2982:	1f 90       	pop	r1
    2984:	18 95       	reti

00002986 <__vector_26>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    2986:	1f 92       	push	r1
    2988:	0f 92       	push	r0
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	0f 92       	push	r0
    298e:	11 24       	eor	r1, r1
    2990:	8f 93       	push	r24
    2992:	9f 93       	push	r25
    2994:	af 93       	push	r26
    2996:	bf 93       	push	r27
    2998:	ef 93       	push	r30
    299a:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    299c:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
	if (((char) c == '\r') || (recv1_buf.nxfrd >= (BUFSIZE-1))) {
    29a0:	8d 30       	cpi	r24, 0x0D	; 13
    29a2:	21 f0       	breq	.+8      	; 0x29ac <__vector_26+0x26>
    29a4:	e0 91 93 2a 	lds	r30, 0x2A93	; 0x802a93 <recv1_buf+0x83>
    29a8:	ef 37       	cpi	r30, 0x7F	; 127
    29aa:	78 f0       	brcs	.+30     	; 0x29ca <__vector_26+0x44>
		recv1_buf.done = YES;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	80 93 94 2a 	sts	0x2A94, r24	; 0x802a94 <recv1_buf+0x84>
		recv1_buf.data[recv1_buf.nxfrd] = 0;	// String terminator
    29b2:	a3 e9       	ldi	r26, 0x93	; 147
    29b4:	ba e2       	ldi	r27, 0x2A	; 42
    29b6:	8c 91       	ld	r24, X
    29b8:	e8 2f       	mov	r30, r24
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	e0 5f       	subi	r30, 0xF0	; 240
    29be:	f5 4d       	sbci	r31, 0xD5	; 213
    29c0:	10 82       	st	Z, r1
		recv1_buf.nbytes = recv1_buf.nxfrd;
    29c2:	80 93 92 2a 	sts	0x2A92, r24	; 0x802a92 <recv1_buf+0x82>
		recv1_buf.nxfrd = 0;
    29c6:	1c 92       	st	X, r1
		return;
    29c8:	08 c0       	rjmp	.+16     	; 0x29da <__vector_26+0x54>
	} else {
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    29ca:	91 e0       	ldi	r25, 0x01	; 1
    29cc:	9e 0f       	add	r25, r30
    29ce:	90 93 93 2a 	sts	0x2A93, r25	; 0x802a93 <recv1_buf+0x83>
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	e0 5f       	subi	r30, 0xF0	; 240
    29d6:	f5 4d       	sbci	r31, 0xD5	; 213
    29d8:	80 83       	st	Z, r24
	}

}
    29da:	ff 91       	pop	r31
    29dc:	ef 91       	pop	r30
    29de:	bf 91       	pop	r27
    29e0:	af 91       	pop	r26
    29e2:	9f 91       	pop	r25
    29e4:	8f 91       	pop	r24
    29e6:	0f 90       	pop	r0
    29e8:	0f be       	out	0x3f, r0	; 63
    29ea:	0f 90       	pop	r0
    29ec:	1f 90       	pop	r1
    29ee:	18 95       	reti

000029f0 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    29f0:	1f 92       	push	r1
    29f2:	0f 92       	push	r0
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	0f 92       	push	r0
    29f8:	11 24       	eor	r1, r1
    29fa:	8f 93       	push	r24
    29fc:	9f 93       	push	r25
    29fe:	af 93       	push	r26
    2a00:	bf 93       	push	r27
    2a02:	ef 93       	push	r30
    2a04:	ff 93       	push	r31

	USART1.TXDATAL = send1_buf.data[send1_buf.nxfrd++];
    2a06:	ac e2       	ldi	r26, 0x2C	; 44
    2a08:	bd e2       	ldi	r27, 0x2D	; 45
    2a0a:	ec 91       	ld	r30, X
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	8e 0f       	add	r24, r30
    2a10:	8c 93       	st	X, r24
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	e7 55       	subi	r30, 0x57	; 87
    2a16:	f3 4d       	sbci	r31, 0xD3	; 211
    2a18:	90 81       	ld	r25, Z
    2a1a:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
	if (send1_buf.nxfrd >= send1_buf.nbytes) {
    2a1e:	90 91 2b 2d 	lds	r25, 0x2D2B	; 0x802d2b <send1_buf+0x82>
    2a22:	89 17       	cp	r24, r25
    2a24:	40 f0       	brcs	.+16     	; 0x2a36 <__vector_27+0x46>
		USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2a26:	e0 e2       	ldi	r30, 0x20	; 32
    2a28:	f8 e0       	ldi	r31, 0x08	; 8
    2a2a:	85 81       	ldd	r24, Z+5	; 0x05
    2a2c:	8f 7d       	andi	r24, 0xDF	; 223
    2a2e:	85 83       	std	Z+5, r24	; 0x05
		send1_buf.done = YES;
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	80 93 2d 2d 	sts	0x2D2D, r24	; 0x802d2d <send1_buf+0x84>
	}

}
    2a36:	ff 91       	pop	r31
    2a38:	ef 91       	pop	r30
    2a3a:	bf 91       	pop	r27
    2a3c:	af 91       	pop	r26
    2a3e:	9f 91       	pop	r25
    2a40:	8f 91       	pop	r24
    2a42:	0f 90       	pop	r0
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	0f 90       	pop	r0
    2a48:	1f 90       	pop	r1
    2a4a:	18 95       	reti

00002a4c <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    2a4c:	1f 92       	push	r1
    2a4e:	0f 92       	push	r0
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	0f 92       	push	r0
    2a54:	11 24       	eor	r1, r1
    2a56:	8f 93       	push	r24
    2a58:	9f 93       	push	r25
    2a5a:	af 93       	push	r26
    2a5c:	bf 93       	push	r27
    2a5e:	ef 93       	push	r30
    2a60:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    2a62:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    2a66:	8d 30       	cpi	r24, 0x0D	; 13
    2a68:	21 f0       	breq	.+8      	; 0x2a72 <__vector_37+0x26>
    2a6a:	e0 91 22 2c 	lds	r30, 0x2C22	; 0x802c22 <recv3_buf+0x83>
    2a6e:	ef 37       	cpi	r30, 0x7F	; 127
    2a70:	78 f0       	brcs	.+30     	; 0x2a90 <__vector_37+0x44>
		recv3_buf.done = YES;
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	80 93 23 2c 	sts	0x2C23, r24	; 0x802c23 <recv3_buf+0x84>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    2a78:	a2 e2       	ldi	r26, 0x22	; 34
    2a7a:	bc e2       	ldi	r27, 0x2C	; 44
    2a7c:	8c 91       	ld	r24, X
    2a7e:	e8 2f       	mov	r30, r24
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	e1 56       	subi	r30, 0x61	; 97
    2a84:	f4 4d       	sbci	r31, 0xD4	; 212
    2a86:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    2a88:	80 93 21 2c 	sts	0x2C21, r24	; 0x802c21 <recv3_buf+0x82>
		recv3_buf.nxfrd = 0;
    2a8c:	1c 92       	st	X, r1
		return;
    2a8e:	08 c0       	rjmp	.+16     	; 0x2aa0 <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    2a90:	91 e0       	ldi	r25, 0x01	; 1
    2a92:	9e 0f       	add	r25, r30
    2a94:	90 93 22 2c 	sts	0x2C22, r25	; 0x802c22 <recv3_buf+0x83>
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	e1 56       	subi	r30, 0x61	; 97
    2a9c:	f4 4d       	sbci	r31, 0xD4	; 212
    2a9e:	80 83       	st	Z, r24
	}

}
    2aa0:	ff 91       	pop	r31
    2aa2:	ef 91       	pop	r30
    2aa4:	bf 91       	pop	r27
    2aa6:	af 91       	pop	r26
    2aa8:	9f 91       	pop	r25
    2aaa:	8f 91       	pop	r24
    2aac:	0f 90       	pop	r0
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	0f 90       	pop	r0
    2ab2:	1f 90       	pop	r1
    2ab4:	18 95       	reti

00002ab6 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    2ab6:	1f 92       	push	r1
    2ab8:	0f 92       	push	r0
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	0f 92       	push	r0
    2abe:	11 24       	eor	r1, r1
    2ac0:	8f 93       	push	r24
    2ac2:	9f 93       	push	r25
    2ac4:	af 93       	push	r26
    2ac6:	bf 93       	push	r27
    2ac8:	ef 93       	push	r30
    2aca:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    2acc:	a7 ea       	ldi	r26, 0xA7	; 167
    2ace:	bc e2       	ldi	r27, 0x2C	; 44
    2ad0:	ec 91       	ld	r30, X
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	8e 0f       	add	r24, r30
    2ad6:	8c 93       	st	X, r24
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	ec 5d       	subi	r30, 0xDC	; 220
    2adc:	f3 4d       	sbci	r31, 0xD3	; 211
    2ade:	90 81       	ld	r25, Z
    2ae0:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    2ae4:	90 91 a6 2c 	lds	r25, 0x2CA6	; 0x802ca6 <send3_buf+0x82>
    2ae8:	89 17       	cp	r24, r25
    2aea:	40 f0       	brcs	.+16     	; 0x2afc <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2aec:	e0 e6       	ldi	r30, 0x60	; 96
    2aee:	f8 e0       	ldi	r31, 0x08	; 8
    2af0:	85 81       	ldd	r24, Z+5	; 0x05
    2af2:	8f 7d       	andi	r24, 0xDF	; 223
    2af4:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	80 93 a8 2c 	sts	0x2CA8, r24	; 0x802ca8 <send3_buf+0x84>
	}

}
    2afc:	ff 91       	pop	r31
    2afe:	ef 91       	pop	r30
    2b00:	bf 91       	pop	r27
    2b02:	af 91       	pop	r26
    2b04:	9f 91       	pop	r25
    2b06:	8f 91       	pop	r24
    2b08:	0f 90       	pop	r0
    2b0a:	0f be       	out	0x3f, r0	; 63
    2b0c:	0f 90       	pop	r0
    2b0e:	1f 90       	pop	r1
    2b10:	18 95       	reti

00002b12 <reboot>:
#include "globals.h"

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
    2b12:	88 ed       	ldi	r24, 0xD8	; 216
    2b14:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    2b1c:	08 95       	ret

00002b1e <__subsf3>:
    2b1e:	50 58       	subi	r21, 0x80	; 128

00002b20 <__addsf3>:
    2b20:	bb 27       	eor	r27, r27
    2b22:	aa 27       	eor	r26, r26
    2b24:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <__addsf3x>
    2b28:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__fp_round>
    2b2c:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__fp_pscA>
    2b30:	38 f0       	brcs	.+14     	; 0x2b40 <__addsf3+0x20>
    2b32:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <__fp_pscB>
    2b36:	20 f0       	brcs	.+8      	; 0x2b40 <__addsf3+0x20>
    2b38:	39 f4       	brne	.+14     	; 0x2b48 <__addsf3+0x28>
    2b3a:	9f 3f       	cpi	r25, 0xFF	; 255
    2b3c:	19 f4       	brne	.+6      	; 0x2b44 <__addsf3+0x24>
    2b3e:	26 f4       	brtc	.+8      	; 0x2b48 <__addsf3+0x28>
    2b40:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__fp_nan>
    2b44:	0e f4       	brtc	.+2      	; 0x2b48 <__addsf3+0x28>
    2b46:	e0 95       	com	r30
    2b48:	e7 fb       	bst	r30, 7
    2b4a:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__fp_inf>

00002b4e <__addsf3x>:
    2b4e:	e9 2f       	mov	r30, r25
    2b50:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__fp_split3>
    2b54:	58 f3       	brcs	.-42     	; 0x2b2c <__addsf3+0xc>
    2b56:	ba 17       	cp	r27, r26
    2b58:	62 07       	cpc	r22, r18
    2b5a:	73 07       	cpc	r23, r19
    2b5c:	84 07       	cpc	r24, r20
    2b5e:	95 07       	cpc	r25, r21
    2b60:	20 f0       	brcs	.+8      	; 0x2b6a <__addsf3x+0x1c>
    2b62:	79 f4       	brne	.+30     	; 0x2b82 <__addsf3x+0x34>
    2b64:	a6 f5       	brtc	.+104    	; 0x2bce <__addsf3x+0x80>
    2b66:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <__fp_zero>
    2b6a:	0e f4       	brtc	.+2      	; 0x2b6e <__addsf3x+0x20>
    2b6c:	e0 95       	com	r30
    2b6e:	0b 2e       	mov	r0, r27
    2b70:	ba 2f       	mov	r27, r26
    2b72:	a0 2d       	mov	r26, r0
    2b74:	0b 01       	movw	r0, r22
    2b76:	b9 01       	movw	r22, r18
    2b78:	90 01       	movw	r18, r0
    2b7a:	0c 01       	movw	r0, r24
    2b7c:	ca 01       	movw	r24, r20
    2b7e:	a0 01       	movw	r20, r0
    2b80:	11 24       	eor	r1, r1
    2b82:	ff 27       	eor	r31, r31
    2b84:	59 1b       	sub	r21, r25
    2b86:	99 f0       	breq	.+38     	; 0x2bae <__addsf3x+0x60>
    2b88:	59 3f       	cpi	r21, 0xF9	; 249
    2b8a:	50 f4       	brcc	.+20     	; 0x2ba0 <__addsf3x+0x52>
    2b8c:	50 3e       	cpi	r21, 0xE0	; 224
    2b8e:	68 f1       	brcs	.+90     	; 0x2bea <__addsf3x+0x9c>
    2b90:	1a 16       	cp	r1, r26
    2b92:	f0 40       	sbci	r31, 0x00	; 0
    2b94:	a2 2f       	mov	r26, r18
    2b96:	23 2f       	mov	r18, r19
    2b98:	34 2f       	mov	r19, r20
    2b9a:	44 27       	eor	r20, r20
    2b9c:	58 5f       	subi	r21, 0xF8	; 248
    2b9e:	f3 cf       	rjmp	.-26     	; 0x2b86 <__addsf3x+0x38>
    2ba0:	46 95       	lsr	r20
    2ba2:	37 95       	ror	r19
    2ba4:	27 95       	ror	r18
    2ba6:	a7 95       	ror	r26
    2ba8:	f0 40       	sbci	r31, 0x00	; 0
    2baa:	53 95       	inc	r21
    2bac:	c9 f7       	brne	.-14     	; 0x2ba0 <__addsf3x+0x52>
    2bae:	7e f4       	brtc	.+30     	; 0x2bce <__addsf3x+0x80>
    2bb0:	1f 16       	cp	r1, r31
    2bb2:	ba 0b       	sbc	r27, r26
    2bb4:	62 0b       	sbc	r22, r18
    2bb6:	73 0b       	sbc	r23, r19
    2bb8:	84 0b       	sbc	r24, r20
    2bba:	ba f0       	brmi	.+46     	; 0x2bea <__addsf3x+0x9c>
    2bbc:	91 50       	subi	r25, 0x01	; 1
    2bbe:	a1 f0       	breq	.+40     	; 0x2be8 <__addsf3x+0x9a>
    2bc0:	ff 0f       	add	r31, r31
    2bc2:	bb 1f       	adc	r27, r27
    2bc4:	66 1f       	adc	r22, r22
    2bc6:	77 1f       	adc	r23, r23
    2bc8:	88 1f       	adc	r24, r24
    2bca:	c2 f7       	brpl	.-16     	; 0x2bbc <__addsf3x+0x6e>
    2bcc:	0e c0       	rjmp	.+28     	; 0x2bea <__addsf3x+0x9c>
    2bce:	ba 0f       	add	r27, r26
    2bd0:	62 1f       	adc	r22, r18
    2bd2:	73 1f       	adc	r23, r19
    2bd4:	84 1f       	adc	r24, r20
    2bd6:	48 f4       	brcc	.+18     	; 0x2bea <__addsf3x+0x9c>
    2bd8:	87 95       	ror	r24
    2bda:	77 95       	ror	r23
    2bdc:	67 95       	ror	r22
    2bde:	b7 95       	ror	r27
    2be0:	f7 95       	ror	r31
    2be2:	9e 3f       	cpi	r25, 0xFE	; 254
    2be4:	08 f0       	brcs	.+2      	; 0x2be8 <__addsf3x+0x9a>
    2be6:	b0 cf       	rjmp	.-160    	; 0x2b48 <__addsf3+0x28>
    2be8:	93 95       	inc	r25
    2bea:	88 0f       	add	r24, r24
    2bec:	08 f0       	brcs	.+2      	; 0x2bf0 <__addsf3x+0xa2>
    2bee:	99 27       	eor	r25, r25
    2bf0:	ee 0f       	add	r30, r30
    2bf2:	97 95       	ror	r25
    2bf4:	87 95       	ror	r24
    2bf6:	08 95       	ret

00002bf8 <__cmpsf2>:
    2bf8:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <__fp_cmp>
    2bfc:	08 f4       	brcc	.+2      	; 0x2c00 <__cmpsf2+0x8>
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	08 95       	ret

00002c02 <__divsf3>:
    2c02:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <__divsf3x>
    2c06:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__fp_round>
    2c0a:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <__fp_pscB>
    2c0e:	58 f0       	brcs	.+22     	; 0x2c26 <__divsf3+0x24>
    2c10:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__fp_pscA>
    2c14:	40 f0       	brcs	.+16     	; 0x2c26 <__divsf3+0x24>
    2c16:	29 f4       	brne	.+10     	; 0x2c22 <__divsf3+0x20>
    2c18:	5f 3f       	cpi	r21, 0xFF	; 255
    2c1a:	29 f0       	breq	.+10     	; 0x2c26 <__divsf3+0x24>
    2c1c:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__fp_inf>
    2c20:	51 11       	cpse	r21, r1
    2c22:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__fp_szero>
    2c26:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__fp_nan>

00002c2a <__divsf3x>:
    2c2a:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__fp_split3>
    2c2e:	68 f3       	brcs	.-38     	; 0x2c0a <__divsf3+0x8>

00002c30 <__divsf3_pse>:
    2c30:	99 23       	and	r25, r25
    2c32:	b1 f3       	breq	.-20     	; 0x2c20 <__divsf3+0x1e>
    2c34:	55 23       	and	r21, r21
    2c36:	91 f3       	breq	.-28     	; 0x2c1c <__divsf3+0x1a>
    2c38:	95 1b       	sub	r25, r21
    2c3a:	55 0b       	sbc	r21, r21
    2c3c:	bb 27       	eor	r27, r27
    2c3e:	aa 27       	eor	r26, r26
    2c40:	62 17       	cp	r22, r18
    2c42:	73 07       	cpc	r23, r19
    2c44:	84 07       	cpc	r24, r20
    2c46:	38 f0       	brcs	.+14     	; 0x2c56 <__divsf3_pse+0x26>
    2c48:	9f 5f       	subi	r25, 0xFF	; 255
    2c4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c4c:	22 0f       	add	r18, r18
    2c4e:	33 1f       	adc	r19, r19
    2c50:	44 1f       	adc	r20, r20
    2c52:	aa 1f       	adc	r26, r26
    2c54:	a9 f3       	breq	.-22     	; 0x2c40 <__divsf3_pse+0x10>
    2c56:	35 d0       	rcall	.+106    	; 0x2cc2 <__divsf3_pse+0x92>
    2c58:	0e 2e       	mov	r0, r30
    2c5a:	3a f0       	brmi	.+14     	; 0x2c6a <__divsf3_pse+0x3a>
    2c5c:	e0 e8       	ldi	r30, 0x80	; 128
    2c5e:	32 d0       	rcall	.+100    	; 0x2cc4 <__divsf3_pse+0x94>
    2c60:	91 50       	subi	r25, 0x01	; 1
    2c62:	50 40       	sbci	r21, 0x00	; 0
    2c64:	e6 95       	lsr	r30
    2c66:	00 1c       	adc	r0, r0
    2c68:	ca f7       	brpl	.-14     	; 0x2c5c <__divsf3_pse+0x2c>
    2c6a:	2b d0       	rcall	.+86     	; 0x2cc2 <__divsf3_pse+0x92>
    2c6c:	fe 2f       	mov	r31, r30
    2c6e:	29 d0       	rcall	.+82     	; 0x2cc2 <__divsf3_pse+0x92>
    2c70:	66 0f       	add	r22, r22
    2c72:	77 1f       	adc	r23, r23
    2c74:	88 1f       	adc	r24, r24
    2c76:	bb 1f       	adc	r27, r27
    2c78:	26 17       	cp	r18, r22
    2c7a:	37 07       	cpc	r19, r23
    2c7c:	48 07       	cpc	r20, r24
    2c7e:	ab 07       	cpc	r26, r27
    2c80:	b0 e8       	ldi	r27, 0x80	; 128
    2c82:	09 f0       	breq	.+2      	; 0x2c86 <__divsf3_pse+0x56>
    2c84:	bb 0b       	sbc	r27, r27
    2c86:	80 2d       	mov	r24, r0
    2c88:	bf 01       	movw	r22, r30
    2c8a:	ff 27       	eor	r31, r31
    2c8c:	93 58       	subi	r25, 0x83	; 131
    2c8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c90:	3a f0       	brmi	.+14     	; 0x2ca0 <__divsf3_pse+0x70>
    2c92:	9e 3f       	cpi	r25, 0xFE	; 254
    2c94:	51 05       	cpc	r21, r1
    2c96:	78 f0       	brcs	.+30     	; 0x2cb6 <__divsf3_pse+0x86>
    2c98:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__fp_inf>
    2c9c:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__fp_szero>
    2ca0:	5f 3f       	cpi	r21, 0xFF	; 255
    2ca2:	e4 f3       	brlt	.-8      	; 0x2c9c <__divsf3_pse+0x6c>
    2ca4:	98 3e       	cpi	r25, 0xE8	; 232
    2ca6:	d4 f3       	brlt	.-12     	; 0x2c9c <__divsf3_pse+0x6c>
    2ca8:	86 95       	lsr	r24
    2caa:	77 95       	ror	r23
    2cac:	67 95       	ror	r22
    2cae:	b7 95       	ror	r27
    2cb0:	f7 95       	ror	r31
    2cb2:	9f 5f       	subi	r25, 0xFF	; 255
    2cb4:	c9 f7       	brne	.-14     	; 0x2ca8 <__divsf3_pse+0x78>
    2cb6:	88 0f       	add	r24, r24
    2cb8:	91 1d       	adc	r25, r1
    2cba:	96 95       	lsr	r25
    2cbc:	87 95       	ror	r24
    2cbe:	97 f9       	bld	r25, 7
    2cc0:	08 95       	ret
    2cc2:	e1 e0       	ldi	r30, 0x01	; 1
    2cc4:	66 0f       	add	r22, r22
    2cc6:	77 1f       	adc	r23, r23
    2cc8:	88 1f       	adc	r24, r24
    2cca:	bb 1f       	adc	r27, r27
    2ccc:	62 17       	cp	r22, r18
    2cce:	73 07       	cpc	r23, r19
    2cd0:	84 07       	cpc	r24, r20
    2cd2:	ba 07       	cpc	r27, r26
    2cd4:	20 f0       	brcs	.+8      	; 0x2cde <__divsf3_pse+0xae>
    2cd6:	62 1b       	sub	r22, r18
    2cd8:	73 0b       	sbc	r23, r19
    2cda:	84 0b       	sbc	r24, r20
    2cdc:	ba 0b       	sbc	r27, r26
    2cde:	ee 1f       	adc	r30, r30
    2ce0:	88 f7       	brcc	.-30     	; 0x2cc4 <__divsf3_pse+0x94>
    2ce2:	e0 95       	com	r30
    2ce4:	08 95       	ret

00002ce6 <__floatunsisf>:
    2ce6:	e8 94       	clt
    2ce8:	09 c0       	rjmp	.+18     	; 0x2cfc <__floatsisf+0x12>

00002cea <__floatsisf>:
    2cea:	97 fb       	bst	r25, 7
    2cec:	3e f4       	brtc	.+14     	; 0x2cfc <__floatsisf+0x12>
    2cee:	90 95       	com	r25
    2cf0:	80 95       	com	r24
    2cf2:	70 95       	com	r23
    2cf4:	61 95       	neg	r22
    2cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf8:	8f 4f       	sbci	r24, 0xFF	; 255
    2cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2cfc:	99 23       	and	r25, r25
    2cfe:	a9 f0       	breq	.+42     	; 0x2d2a <__floatsisf+0x40>
    2d00:	f9 2f       	mov	r31, r25
    2d02:	96 e9       	ldi	r25, 0x96	; 150
    2d04:	bb 27       	eor	r27, r27
    2d06:	93 95       	inc	r25
    2d08:	f6 95       	lsr	r31
    2d0a:	87 95       	ror	r24
    2d0c:	77 95       	ror	r23
    2d0e:	67 95       	ror	r22
    2d10:	b7 95       	ror	r27
    2d12:	f1 11       	cpse	r31, r1
    2d14:	f8 cf       	rjmp	.-16     	; 0x2d06 <__floatsisf+0x1c>
    2d16:	fa f4       	brpl	.+62     	; 0x2d56 <__floatsisf+0x6c>
    2d18:	bb 0f       	add	r27, r27
    2d1a:	11 f4       	brne	.+4      	; 0x2d20 <__floatsisf+0x36>
    2d1c:	60 ff       	sbrs	r22, 0
    2d1e:	1b c0       	rjmp	.+54     	; 0x2d56 <__floatsisf+0x6c>
    2d20:	6f 5f       	subi	r22, 0xFF	; 255
    2d22:	7f 4f       	sbci	r23, 0xFF	; 255
    2d24:	8f 4f       	sbci	r24, 0xFF	; 255
    2d26:	9f 4f       	sbci	r25, 0xFF	; 255
    2d28:	16 c0       	rjmp	.+44     	; 0x2d56 <__floatsisf+0x6c>
    2d2a:	88 23       	and	r24, r24
    2d2c:	11 f0       	breq	.+4      	; 0x2d32 <__floatsisf+0x48>
    2d2e:	96 e9       	ldi	r25, 0x96	; 150
    2d30:	11 c0       	rjmp	.+34     	; 0x2d54 <__floatsisf+0x6a>
    2d32:	77 23       	and	r23, r23
    2d34:	21 f0       	breq	.+8      	; 0x2d3e <__floatsisf+0x54>
    2d36:	9e e8       	ldi	r25, 0x8E	; 142
    2d38:	87 2f       	mov	r24, r23
    2d3a:	76 2f       	mov	r23, r22
    2d3c:	05 c0       	rjmp	.+10     	; 0x2d48 <__floatsisf+0x5e>
    2d3e:	66 23       	and	r22, r22
    2d40:	71 f0       	breq	.+28     	; 0x2d5e <__floatsisf+0x74>
    2d42:	96 e8       	ldi	r25, 0x86	; 134
    2d44:	86 2f       	mov	r24, r22
    2d46:	70 e0       	ldi	r23, 0x00	; 0
    2d48:	60 e0       	ldi	r22, 0x00	; 0
    2d4a:	2a f0       	brmi	.+10     	; 0x2d56 <__floatsisf+0x6c>
    2d4c:	9a 95       	dec	r25
    2d4e:	66 0f       	add	r22, r22
    2d50:	77 1f       	adc	r23, r23
    2d52:	88 1f       	adc	r24, r24
    2d54:	da f7       	brpl	.-10     	; 0x2d4c <__floatsisf+0x62>
    2d56:	88 0f       	add	r24, r24
    2d58:	96 95       	lsr	r25
    2d5a:	87 95       	ror	r24
    2d5c:	97 f9       	bld	r25, 7
    2d5e:	08 95       	ret

00002d60 <__fp_cmp>:
    2d60:	99 0f       	add	r25, r25
    2d62:	00 08       	sbc	r0, r0
    2d64:	55 0f       	add	r21, r21
    2d66:	aa 0b       	sbc	r26, r26
    2d68:	e0 e8       	ldi	r30, 0x80	; 128
    2d6a:	fe ef       	ldi	r31, 0xFE	; 254
    2d6c:	16 16       	cp	r1, r22
    2d6e:	17 06       	cpc	r1, r23
    2d70:	e8 07       	cpc	r30, r24
    2d72:	f9 07       	cpc	r31, r25
    2d74:	c0 f0       	brcs	.+48     	; 0x2da6 <__fp_cmp+0x46>
    2d76:	12 16       	cp	r1, r18
    2d78:	13 06       	cpc	r1, r19
    2d7a:	e4 07       	cpc	r30, r20
    2d7c:	f5 07       	cpc	r31, r21
    2d7e:	98 f0       	brcs	.+38     	; 0x2da6 <__fp_cmp+0x46>
    2d80:	62 1b       	sub	r22, r18
    2d82:	73 0b       	sbc	r23, r19
    2d84:	84 0b       	sbc	r24, r20
    2d86:	95 0b       	sbc	r25, r21
    2d88:	39 f4       	brne	.+14     	; 0x2d98 <__fp_cmp+0x38>
    2d8a:	0a 26       	eor	r0, r26
    2d8c:	61 f0       	breq	.+24     	; 0x2da6 <__fp_cmp+0x46>
    2d8e:	23 2b       	or	r18, r19
    2d90:	24 2b       	or	r18, r20
    2d92:	25 2b       	or	r18, r21
    2d94:	21 f4       	brne	.+8      	; 0x2d9e <__fp_cmp+0x3e>
    2d96:	08 95       	ret
    2d98:	0a 26       	eor	r0, r26
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <__fp_cmp+0x3e>
    2d9c:	a1 40       	sbci	r26, 0x01	; 1
    2d9e:	a6 95       	lsr	r26
    2da0:	8f ef       	ldi	r24, 0xFF	; 255
    2da2:	81 1d       	adc	r24, r1
    2da4:	81 1d       	adc	r24, r1
    2da6:	08 95       	ret

00002da8 <__fp_inf>:
    2da8:	97 f9       	bld	r25, 7
    2daa:	9f 67       	ori	r25, 0x7F	; 127
    2dac:	80 e8       	ldi	r24, 0x80	; 128
    2dae:	70 e0       	ldi	r23, 0x00	; 0
    2db0:	60 e0       	ldi	r22, 0x00	; 0
    2db2:	08 95       	ret

00002db4 <__fp_nan>:
    2db4:	9f ef       	ldi	r25, 0xFF	; 255
    2db6:	80 ec       	ldi	r24, 0xC0	; 192
    2db8:	08 95       	ret

00002dba <__fp_pscA>:
    2dba:	00 24       	eor	r0, r0
    2dbc:	0a 94       	dec	r0
    2dbe:	16 16       	cp	r1, r22
    2dc0:	17 06       	cpc	r1, r23
    2dc2:	18 06       	cpc	r1, r24
    2dc4:	09 06       	cpc	r0, r25
    2dc6:	08 95       	ret

00002dc8 <__fp_pscB>:
    2dc8:	00 24       	eor	r0, r0
    2dca:	0a 94       	dec	r0
    2dcc:	12 16       	cp	r1, r18
    2dce:	13 06       	cpc	r1, r19
    2dd0:	14 06       	cpc	r1, r20
    2dd2:	05 06       	cpc	r0, r21
    2dd4:	08 95       	ret

00002dd6 <__fp_round>:
    2dd6:	09 2e       	mov	r0, r25
    2dd8:	03 94       	inc	r0
    2dda:	00 0c       	add	r0, r0
    2ddc:	11 f4       	brne	.+4      	; 0x2de2 <__fp_round+0xc>
    2dde:	88 23       	and	r24, r24
    2de0:	52 f0       	brmi	.+20     	; 0x2df6 <__fp_round+0x20>
    2de2:	bb 0f       	add	r27, r27
    2de4:	40 f4       	brcc	.+16     	; 0x2df6 <__fp_round+0x20>
    2de6:	bf 2b       	or	r27, r31
    2de8:	11 f4       	brne	.+4      	; 0x2dee <__fp_round+0x18>
    2dea:	60 ff       	sbrs	r22, 0
    2dec:	04 c0       	rjmp	.+8      	; 0x2df6 <__fp_round+0x20>
    2dee:	6f 5f       	subi	r22, 0xFF	; 255
    2df0:	7f 4f       	sbci	r23, 0xFF	; 255
    2df2:	8f 4f       	sbci	r24, 0xFF	; 255
    2df4:	9f 4f       	sbci	r25, 0xFF	; 255
    2df6:	08 95       	ret

00002df8 <__fp_split3>:
    2df8:	57 fd       	sbrc	r21, 7
    2dfa:	90 58       	subi	r25, 0x80	; 128
    2dfc:	44 0f       	add	r20, r20
    2dfe:	55 1f       	adc	r21, r21
    2e00:	59 f0       	breq	.+22     	; 0x2e18 <__fp_splitA+0x10>
    2e02:	5f 3f       	cpi	r21, 0xFF	; 255
    2e04:	71 f0       	breq	.+28     	; 0x2e22 <__fp_splitA+0x1a>
    2e06:	47 95       	ror	r20

00002e08 <__fp_splitA>:
    2e08:	88 0f       	add	r24, r24
    2e0a:	97 fb       	bst	r25, 7
    2e0c:	99 1f       	adc	r25, r25
    2e0e:	61 f0       	breq	.+24     	; 0x2e28 <__fp_splitA+0x20>
    2e10:	9f 3f       	cpi	r25, 0xFF	; 255
    2e12:	79 f0       	breq	.+30     	; 0x2e32 <__fp_splitA+0x2a>
    2e14:	87 95       	ror	r24
    2e16:	08 95       	ret
    2e18:	12 16       	cp	r1, r18
    2e1a:	13 06       	cpc	r1, r19
    2e1c:	14 06       	cpc	r1, r20
    2e1e:	55 1f       	adc	r21, r21
    2e20:	f2 cf       	rjmp	.-28     	; 0x2e06 <__fp_split3+0xe>
    2e22:	46 95       	lsr	r20
    2e24:	f1 df       	rcall	.-30     	; 0x2e08 <__fp_splitA>
    2e26:	08 c0       	rjmp	.+16     	; 0x2e38 <__fp_splitA+0x30>
    2e28:	16 16       	cp	r1, r22
    2e2a:	17 06       	cpc	r1, r23
    2e2c:	18 06       	cpc	r1, r24
    2e2e:	99 1f       	adc	r25, r25
    2e30:	f1 cf       	rjmp	.-30     	; 0x2e14 <__fp_splitA+0xc>
    2e32:	86 95       	lsr	r24
    2e34:	71 05       	cpc	r23, r1
    2e36:	61 05       	cpc	r22, r1
    2e38:	08 94       	sec
    2e3a:	08 95       	ret

00002e3c <__fp_zero>:
    2e3c:	e8 94       	clt

00002e3e <__fp_szero>:
    2e3e:	bb 27       	eor	r27, r27
    2e40:	66 27       	eor	r22, r22
    2e42:	77 27       	eor	r23, r23
    2e44:	cb 01       	movw	r24, r22
    2e46:	97 f9       	bld	r25, 7
    2e48:	08 95       	ret

00002e4a <__gesf2>:
    2e4a:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <__fp_cmp>
    2e4e:	08 f4       	brcc	.+2      	; 0x2e52 <__gesf2+0x8>
    2e50:	8f ef       	ldi	r24, 0xFF	; 255
    2e52:	08 95       	ret

00002e54 <__mulsf3>:
    2e54:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <__mulsf3x>
    2e58:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__fp_round>
    2e5c:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__fp_pscA>
    2e60:	38 f0       	brcs	.+14     	; 0x2e70 <__mulsf3+0x1c>
    2e62:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <__fp_pscB>
    2e66:	20 f0       	brcs	.+8      	; 0x2e70 <__mulsf3+0x1c>
    2e68:	95 23       	and	r25, r21
    2e6a:	11 f0       	breq	.+4      	; 0x2e70 <__mulsf3+0x1c>
    2e6c:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__fp_inf>
    2e70:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__fp_nan>
    2e74:	11 24       	eor	r1, r1
    2e76:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__fp_szero>

00002e7a <__mulsf3x>:
    2e7a:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <__fp_split3>
    2e7e:	70 f3       	brcs	.-36     	; 0x2e5c <__mulsf3+0x8>

00002e80 <__mulsf3_pse>:
    2e80:	95 9f       	mul	r25, r21
    2e82:	c1 f3       	breq	.-16     	; 0x2e74 <__mulsf3+0x20>
    2e84:	95 0f       	add	r25, r21
    2e86:	50 e0       	ldi	r21, 0x00	; 0
    2e88:	55 1f       	adc	r21, r21
    2e8a:	62 9f       	mul	r22, r18
    2e8c:	f0 01       	movw	r30, r0
    2e8e:	72 9f       	mul	r23, r18
    2e90:	bb 27       	eor	r27, r27
    2e92:	f0 0d       	add	r31, r0
    2e94:	b1 1d       	adc	r27, r1
    2e96:	63 9f       	mul	r22, r19
    2e98:	aa 27       	eor	r26, r26
    2e9a:	f0 0d       	add	r31, r0
    2e9c:	b1 1d       	adc	r27, r1
    2e9e:	aa 1f       	adc	r26, r26
    2ea0:	64 9f       	mul	r22, r20
    2ea2:	66 27       	eor	r22, r22
    2ea4:	b0 0d       	add	r27, r0
    2ea6:	a1 1d       	adc	r26, r1
    2ea8:	66 1f       	adc	r22, r22
    2eaa:	82 9f       	mul	r24, r18
    2eac:	22 27       	eor	r18, r18
    2eae:	b0 0d       	add	r27, r0
    2eb0:	a1 1d       	adc	r26, r1
    2eb2:	62 1f       	adc	r22, r18
    2eb4:	73 9f       	mul	r23, r19
    2eb6:	b0 0d       	add	r27, r0
    2eb8:	a1 1d       	adc	r26, r1
    2eba:	62 1f       	adc	r22, r18
    2ebc:	83 9f       	mul	r24, r19
    2ebe:	a0 0d       	add	r26, r0
    2ec0:	61 1d       	adc	r22, r1
    2ec2:	22 1f       	adc	r18, r18
    2ec4:	74 9f       	mul	r23, r20
    2ec6:	33 27       	eor	r19, r19
    2ec8:	a0 0d       	add	r26, r0
    2eca:	61 1d       	adc	r22, r1
    2ecc:	23 1f       	adc	r18, r19
    2ece:	84 9f       	mul	r24, r20
    2ed0:	60 0d       	add	r22, r0
    2ed2:	21 1d       	adc	r18, r1
    2ed4:	82 2f       	mov	r24, r18
    2ed6:	76 2f       	mov	r23, r22
    2ed8:	6a 2f       	mov	r22, r26
    2eda:	11 24       	eor	r1, r1
    2edc:	9f 57       	subi	r25, 0x7F	; 127
    2ede:	50 40       	sbci	r21, 0x00	; 0
    2ee0:	9a f0       	brmi	.+38     	; 0x2f08 <__mulsf3_pse+0x88>
    2ee2:	f1 f0       	breq	.+60     	; 0x2f20 <__mulsf3_pse+0xa0>
    2ee4:	88 23       	and	r24, r24
    2ee6:	4a f0       	brmi	.+18     	; 0x2efa <__mulsf3_pse+0x7a>
    2ee8:	ee 0f       	add	r30, r30
    2eea:	ff 1f       	adc	r31, r31
    2eec:	bb 1f       	adc	r27, r27
    2eee:	66 1f       	adc	r22, r22
    2ef0:	77 1f       	adc	r23, r23
    2ef2:	88 1f       	adc	r24, r24
    2ef4:	91 50       	subi	r25, 0x01	; 1
    2ef6:	50 40       	sbci	r21, 0x00	; 0
    2ef8:	a9 f7       	brne	.-22     	; 0x2ee4 <__mulsf3_pse+0x64>
    2efa:	9e 3f       	cpi	r25, 0xFE	; 254
    2efc:	51 05       	cpc	r21, r1
    2efe:	80 f0       	brcs	.+32     	; 0x2f20 <__mulsf3_pse+0xa0>
    2f00:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__fp_inf>
    2f04:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__fp_szero>
    2f08:	5f 3f       	cpi	r21, 0xFF	; 255
    2f0a:	e4 f3       	brlt	.-8      	; 0x2f04 <__mulsf3_pse+0x84>
    2f0c:	98 3e       	cpi	r25, 0xE8	; 232
    2f0e:	d4 f3       	brlt	.-12     	; 0x2f04 <__mulsf3_pse+0x84>
    2f10:	86 95       	lsr	r24
    2f12:	77 95       	ror	r23
    2f14:	67 95       	ror	r22
    2f16:	b7 95       	ror	r27
    2f18:	f7 95       	ror	r31
    2f1a:	e7 95       	ror	r30
    2f1c:	9f 5f       	subi	r25, 0xFF	; 255
    2f1e:	c1 f7       	brne	.-16     	; 0x2f10 <__mulsf3_pse+0x90>
    2f20:	fe 2b       	or	r31, r30
    2f22:	88 0f       	add	r24, r24
    2f24:	91 1d       	adc	r25, r1
    2f26:	96 95       	lsr	r25
    2f28:	87 95       	ror	r24
    2f2a:	97 f9       	bld	r25, 7
    2f2c:	08 95       	ret

00002f2e <vfprintf>:
    2f2e:	a0 e1       	ldi	r26, 0x10	; 16
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	ed e9       	ldi	r30, 0x9D	; 157
    2f34:	f7 e1       	ldi	r31, 0x17	; 23
    2f36:	0c 94 2e 1b 	jmp	0x365c	; 0x365c <__prologue_saves__>
    2f3a:	7c 01       	movw	r14, r24
    2f3c:	1b 01       	movw	r2, r22
    2f3e:	6a 01       	movw	r12, r20
    2f40:	fc 01       	movw	r30, r24
    2f42:	16 82       	std	Z+6, r1	; 0x06
    2f44:	17 82       	std	Z+7, r1	; 0x07
    2f46:	83 81       	ldd	r24, Z+3	; 0x03
    2f48:	81 ff       	sbrs	r24, 1
    2f4a:	44 c3       	rjmp	.+1672   	; 0x35d4 <vfprintf+0x6a6>
    2f4c:	9e 01       	movw	r18, r28
    2f4e:	2f 5f       	subi	r18, 0xFF	; 255
    2f50:	3f 4f       	sbci	r19, 0xFF	; 255
    2f52:	39 01       	movw	r6, r18
    2f54:	f7 01       	movw	r30, r14
    2f56:	93 81       	ldd	r25, Z+3	; 0x03
    2f58:	f1 01       	movw	r30, r2
    2f5a:	93 fd       	sbrc	r25, 3
    2f5c:	85 91       	lpm	r24, Z+
    2f5e:	93 ff       	sbrs	r25, 3
    2f60:	81 91       	ld	r24, Z+
    2f62:	1f 01       	movw	r2, r30
    2f64:	88 23       	and	r24, r24
    2f66:	09 f4       	brne	.+2      	; 0x2f6a <vfprintf+0x3c>
    2f68:	31 c3       	rjmp	.+1634   	; 0x35cc <vfprintf+0x69e>
    2f6a:	85 32       	cpi	r24, 0x25	; 37
    2f6c:	39 f4       	brne	.+14     	; 0x2f7c <vfprintf+0x4e>
    2f6e:	93 fd       	sbrc	r25, 3
    2f70:	85 91       	lpm	r24, Z+
    2f72:	93 ff       	sbrs	r25, 3
    2f74:	81 91       	ld	r24, Z+
    2f76:	1f 01       	movw	r2, r30
    2f78:	85 32       	cpi	r24, 0x25	; 37
    2f7a:	39 f4       	brne	.+14     	; 0x2f8a <vfprintf+0x5c>
    2f7c:	b7 01       	movw	r22, r14
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    2f84:	56 01       	movw	r10, r12
    2f86:	65 01       	movw	r12, r10
    2f88:	e5 cf       	rjmp	.-54     	; 0x2f54 <vfprintf+0x26>
    2f8a:	10 e0       	ldi	r17, 0x00	; 0
    2f8c:	51 2c       	mov	r5, r1
    2f8e:	91 2c       	mov	r9, r1
    2f90:	ff e1       	ldi	r31, 0x1F	; 31
    2f92:	f9 15       	cp	r31, r9
    2f94:	d8 f0       	brcs	.+54     	; 0x2fcc <vfprintf+0x9e>
    2f96:	8b 32       	cpi	r24, 0x2B	; 43
    2f98:	79 f0       	breq	.+30     	; 0x2fb8 <vfprintf+0x8a>
    2f9a:	38 f4       	brcc	.+14     	; 0x2faa <vfprintf+0x7c>
    2f9c:	80 32       	cpi	r24, 0x20	; 32
    2f9e:	79 f0       	breq	.+30     	; 0x2fbe <vfprintf+0x90>
    2fa0:	83 32       	cpi	r24, 0x23	; 35
    2fa2:	a1 f4       	brne	.+40     	; 0x2fcc <vfprintf+0x9e>
    2fa4:	f9 2d       	mov	r31, r9
    2fa6:	f0 61       	ori	r31, 0x10	; 16
    2fa8:	2e c0       	rjmp	.+92     	; 0x3006 <vfprintf+0xd8>
    2faa:	8d 32       	cpi	r24, 0x2D	; 45
    2fac:	61 f0       	breq	.+24     	; 0x2fc6 <vfprintf+0x98>
    2fae:	80 33       	cpi	r24, 0x30	; 48
    2fb0:	69 f4       	brne	.+26     	; 0x2fcc <vfprintf+0x9e>
    2fb2:	29 2d       	mov	r18, r9
    2fb4:	21 60       	ori	r18, 0x01	; 1
    2fb6:	2d c0       	rjmp	.+90     	; 0x3012 <vfprintf+0xe4>
    2fb8:	39 2d       	mov	r19, r9
    2fba:	32 60       	ori	r19, 0x02	; 2
    2fbc:	93 2e       	mov	r9, r19
    2fbe:	89 2d       	mov	r24, r9
    2fc0:	84 60       	ori	r24, 0x04	; 4
    2fc2:	98 2e       	mov	r9, r24
    2fc4:	2a c0       	rjmp	.+84     	; 0x301a <vfprintf+0xec>
    2fc6:	e9 2d       	mov	r30, r9
    2fc8:	e8 60       	ori	r30, 0x08	; 8
    2fca:	15 c0       	rjmp	.+42     	; 0x2ff6 <vfprintf+0xc8>
    2fcc:	97 fc       	sbrc	r9, 7
    2fce:	2d c0       	rjmp	.+90     	; 0x302a <vfprintf+0xfc>
    2fd0:	20 ed       	ldi	r18, 0xD0	; 208
    2fd2:	28 0f       	add	r18, r24
    2fd4:	2a 30       	cpi	r18, 0x0A	; 10
    2fd6:	88 f4       	brcc	.+34     	; 0x2ffa <vfprintf+0xcc>
    2fd8:	96 fe       	sbrs	r9, 6
    2fda:	06 c0       	rjmp	.+12     	; 0x2fe8 <vfprintf+0xba>
    2fdc:	3a e0       	ldi	r19, 0x0A	; 10
    2fde:	13 9f       	mul	r17, r19
    2fe0:	20 0d       	add	r18, r0
    2fe2:	11 24       	eor	r1, r1
    2fe4:	12 2f       	mov	r17, r18
    2fe6:	19 c0       	rjmp	.+50     	; 0x301a <vfprintf+0xec>
    2fe8:	8a e0       	ldi	r24, 0x0A	; 10
    2fea:	58 9e       	mul	r5, r24
    2fec:	20 0d       	add	r18, r0
    2fee:	11 24       	eor	r1, r1
    2ff0:	52 2e       	mov	r5, r18
    2ff2:	e9 2d       	mov	r30, r9
    2ff4:	e0 62       	ori	r30, 0x20	; 32
    2ff6:	9e 2e       	mov	r9, r30
    2ff8:	10 c0       	rjmp	.+32     	; 0x301a <vfprintf+0xec>
    2ffa:	8e 32       	cpi	r24, 0x2E	; 46
    2ffc:	31 f4       	brne	.+12     	; 0x300a <vfprintf+0xdc>
    2ffe:	96 fc       	sbrc	r9, 6
    3000:	e5 c2       	rjmp	.+1482   	; 0x35cc <vfprintf+0x69e>
    3002:	f9 2d       	mov	r31, r9
    3004:	f0 64       	ori	r31, 0x40	; 64
    3006:	9f 2e       	mov	r9, r31
    3008:	08 c0       	rjmp	.+16     	; 0x301a <vfprintf+0xec>
    300a:	8c 36       	cpi	r24, 0x6C	; 108
    300c:	21 f4       	brne	.+8      	; 0x3016 <vfprintf+0xe8>
    300e:	29 2d       	mov	r18, r9
    3010:	20 68       	ori	r18, 0x80	; 128
    3012:	92 2e       	mov	r9, r18
    3014:	02 c0       	rjmp	.+4      	; 0x301a <vfprintf+0xec>
    3016:	88 36       	cpi	r24, 0x68	; 104
    3018:	41 f4       	brne	.+16     	; 0x302a <vfprintf+0xfc>
    301a:	f1 01       	movw	r30, r2
    301c:	93 fd       	sbrc	r25, 3
    301e:	85 91       	lpm	r24, Z+
    3020:	93 ff       	sbrs	r25, 3
    3022:	81 91       	ld	r24, Z+
    3024:	1f 01       	movw	r2, r30
    3026:	81 11       	cpse	r24, r1
    3028:	b3 cf       	rjmp	.-154    	; 0x2f90 <vfprintf+0x62>
    302a:	9b eb       	ldi	r25, 0xBB	; 187
    302c:	98 0f       	add	r25, r24
    302e:	93 30       	cpi	r25, 0x03	; 3
    3030:	20 f4       	brcc	.+8      	; 0x303a <vfprintf+0x10c>
    3032:	99 2d       	mov	r25, r9
    3034:	90 61       	ori	r25, 0x10	; 16
    3036:	80 5e       	subi	r24, 0xE0	; 224
    3038:	07 c0       	rjmp	.+14     	; 0x3048 <vfprintf+0x11a>
    303a:	9b e9       	ldi	r25, 0x9B	; 155
    303c:	98 0f       	add	r25, r24
    303e:	93 30       	cpi	r25, 0x03	; 3
    3040:	08 f0       	brcs	.+2      	; 0x3044 <vfprintf+0x116>
    3042:	66 c1       	rjmp	.+716    	; 0x3310 <vfprintf+0x3e2>
    3044:	99 2d       	mov	r25, r9
    3046:	9f 7e       	andi	r25, 0xEF	; 239
    3048:	96 ff       	sbrs	r25, 6
    304a:	16 e0       	ldi	r17, 0x06	; 6
    304c:	9f 73       	andi	r25, 0x3F	; 63
    304e:	99 2e       	mov	r9, r25
    3050:	85 36       	cpi	r24, 0x65	; 101
    3052:	19 f4       	brne	.+6      	; 0x305a <vfprintf+0x12c>
    3054:	90 64       	ori	r25, 0x40	; 64
    3056:	99 2e       	mov	r9, r25
    3058:	08 c0       	rjmp	.+16     	; 0x306a <vfprintf+0x13c>
    305a:	86 36       	cpi	r24, 0x66	; 102
    305c:	21 f4       	brne	.+8      	; 0x3066 <vfprintf+0x138>
    305e:	39 2f       	mov	r19, r25
    3060:	30 68       	ori	r19, 0x80	; 128
    3062:	93 2e       	mov	r9, r19
    3064:	02 c0       	rjmp	.+4      	; 0x306a <vfprintf+0x13c>
    3066:	11 11       	cpse	r17, r1
    3068:	11 50       	subi	r17, 0x01	; 1
    306a:	97 fe       	sbrs	r9, 7
    306c:	07 c0       	rjmp	.+14     	; 0x307c <vfprintf+0x14e>
    306e:	1c 33       	cpi	r17, 0x3C	; 60
    3070:	50 f4       	brcc	.+20     	; 0x3086 <vfprintf+0x158>
    3072:	44 24       	eor	r4, r4
    3074:	43 94       	inc	r4
    3076:	41 0e       	add	r4, r17
    3078:	27 e0       	ldi	r18, 0x07	; 7
    307a:	0b c0       	rjmp	.+22     	; 0x3092 <vfprintf+0x164>
    307c:	18 30       	cpi	r17, 0x08	; 8
    307e:	38 f0       	brcs	.+14     	; 0x308e <vfprintf+0x160>
    3080:	27 e0       	ldi	r18, 0x07	; 7
    3082:	17 e0       	ldi	r17, 0x07	; 7
    3084:	05 c0       	rjmp	.+10     	; 0x3090 <vfprintf+0x162>
    3086:	27 e0       	ldi	r18, 0x07	; 7
    3088:	9c e3       	ldi	r25, 0x3C	; 60
    308a:	49 2e       	mov	r4, r25
    308c:	02 c0       	rjmp	.+4      	; 0x3092 <vfprintf+0x164>
    308e:	21 2f       	mov	r18, r17
    3090:	41 2c       	mov	r4, r1
    3092:	56 01       	movw	r10, r12
    3094:	84 e0       	ldi	r24, 0x04	; 4
    3096:	a8 0e       	add	r10, r24
    3098:	b1 1c       	adc	r11, r1
    309a:	f6 01       	movw	r30, r12
    309c:	60 81       	ld	r22, Z
    309e:	71 81       	ldd	r23, Z+1	; 0x01
    30a0:	82 81       	ldd	r24, Z+2	; 0x02
    30a2:	93 81       	ldd	r25, Z+3	; 0x03
    30a4:	04 2d       	mov	r16, r4
    30a6:	a3 01       	movw	r20, r6
    30a8:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__ftoa_engine>
    30ac:	6c 01       	movw	r12, r24
    30ae:	f9 81       	ldd	r31, Y+1	; 0x01
    30b0:	fc 87       	std	Y+12, r31	; 0x0c
    30b2:	f0 ff       	sbrs	r31, 0
    30b4:	02 c0       	rjmp	.+4      	; 0x30ba <vfprintf+0x18c>
    30b6:	f3 ff       	sbrs	r31, 3
    30b8:	06 c0       	rjmp	.+12     	; 0x30c6 <vfprintf+0x198>
    30ba:	91 fc       	sbrc	r9, 1
    30bc:	06 c0       	rjmp	.+12     	; 0x30ca <vfprintf+0x19c>
    30be:	92 fe       	sbrs	r9, 2
    30c0:	06 c0       	rjmp	.+12     	; 0x30ce <vfprintf+0x1a0>
    30c2:	00 e2       	ldi	r16, 0x20	; 32
    30c4:	05 c0       	rjmp	.+10     	; 0x30d0 <vfprintf+0x1a2>
    30c6:	0d e2       	ldi	r16, 0x2D	; 45
    30c8:	03 c0       	rjmp	.+6      	; 0x30d0 <vfprintf+0x1a2>
    30ca:	0b e2       	ldi	r16, 0x2B	; 43
    30cc:	01 c0       	rjmp	.+2      	; 0x30d0 <vfprintf+0x1a2>
    30ce:	00 e0       	ldi	r16, 0x00	; 0
    30d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    30d2:	8c 70       	andi	r24, 0x0C	; 12
    30d4:	19 f0       	breq	.+6      	; 0x30dc <vfprintf+0x1ae>
    30d6:	01 11       	cpse	r16, r1
    30d8:	5a c2       	rjmp	.+1204   	; 0x358e <vfprintf+0x660>
    30da:	9b c2       	rjmp	.+1334   	; 0x3612 <vfprintf+0x6e4>
    30dc:	97 fe       	sbrs	r9, 7
    30de:	10 c0       	rjmp	.+32     	; 0x3100 <vfprintf+0x1d2>
    30e0:	4c 0c       	add	r4, r12
    30e2:	fc 85       	ldd	r31, Y+12	; 0x0c
    30e4:	f4 ff       	sbrs	r31, 4
    30e6:	04 c0       	rjmp	.+8      	; 0x30f0 <vfprintf+0x1c2>
    30e8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ea:	81 33       	cpi	r24, 0x31	; 49
    30ec:	09 f4       	brne	.+2      	; 0x30f0 <vfprintf+0x1c2>
    30ee:	4a 94       	dec	r4
    30f0:	14 14       	cp	r1, r4
    30f2:	74 f5       	brge	.+92     	; 0x3150 <vfprintf+0x222>
    30f4:	28 e0       	ldi	r18, 0x08	; 8
    30f6:	24 15       	cp	r18, r4
    30f8:	78 f5       	brcc	.+94     	; 0x3158 <vfprintf+0x22a>
    30fa:	88 e0       	ldi	r24, 0x08	; 8
    30fc:	48 2e       	mov	r4, r24
    30fe:	2c c0       	rjmp	.+88     	; 0x3158 <vfprintf+0x22a>
    3100:	96 fc       	sbrc	r9, 6
    3102:	2a c0       	rjmp	.+84     	; 0x3158 <vfprintf+0x22a>
    3104:	81 2f       	mov	r24, r17
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	8c 15       	cp	r24, r12
    310a:	9d 05       	cpc	r25, r13
    310c:	9c f0       	brlt	.+38     	; 0x3134 <vfprintf+0x206>
    310e:	3c ef       	ldi	r19, 0xFC	; 252
    3110:	c3 16       	cp	r12, r19
    3112:	3f ef       	ldi	r19, 0xFF	; 255
    3114:	d3 06       	cpc	r13, r19
    3116:	74 f0       	brlt	.+28     	; 0x3134 <vfprintf+0x206>
    3118:	89 2d       	mov	r24, r9
    311a:	80 68       	ori	r24, 0x80	; 128
    311c:	98 2e       	mov	r9, r24
    311e:	0a c0       	rjmp	.+20     	; 0x3134 <vfprintf+0x206>
    3120:	e2 e0       	ldi	r30, 0x02	; 2
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	ec 0f       	add	r30, r28
    3126:	fd 1f       	adc	r31, r29
    3128:	e1 0f       	add	r30, r17
    312a:	f1 1d       	adc	r31, r1
    312c:	80 81       	ld	r24, Z
    312e:	80 33       	cpi	r24, 0x30	; 48
    3130:	19 f4       	brne	.+6      	; 0x3138 <vfprintf+0x20a>
    3132:	11 50       	subi	r17, 0x01	; 1
    3134:	11 11       	cpse	r17, r1
    3136:	f4 cf       	rjmp	.-24     	; 0x3120 <vfprintf+0x1f2>
    3138:	97 fe       	sbrs	r9, 7
    313a:	0e c0       	rjmp	.+28     	; 0x3158 <vfprintf+0x22a>
    313c:	44 24       	eor	r4, r4
    313e:	43 94       	inc	r4
    3140:	41 0e       	add	r4, r17
    3142:	81 2f       	mov	r24, r17
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	c8 16       	cp	r12, r24
    3148:	d9 06       	cpc	r13, r25
    314a:	2c f4       	brge	.+10     	; 0x3156 <vfprintf+0x228>
    314c:	1c 19       	sub	r17, r12
    314e:	04 c0       	rjmp	.+8      	; 0x3158 <vfprintf+0x22a>
    3150:	44 24       	eor	r4, r4
    3152:	43 94       	inc	r4
    3154:	01 c0       	rjmp	.+2      	; 0x3158 <vfprintf+0x22a>
    3156:	10 e0       	ldi	r17, 0x00	; 0
    3158:	97 fe       	sbrs	r9, 7
    315a:	06 c0       	rjmp	.+12     	; 0x3168 <vfprintf+0x23a>
    315c:	1c 14       	cp	r1, r12
    315e:	1d 04       	cpc	r1, r13
    3160:	34 f4       	brge	.+12     	; 0x316e <vfprintf+0x240>
    3162:	c6 01       	movw	r24, r12
    3164:	01 96       	adiw	r24, 0x01	; 1
    3166:	05 c0       	rjmp	.+10     	; 0x3172 <vfprintf+0x244>
    3168:	85 e0       	ldi	r24, 0x05	; 5
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	02 c0       	rjmp	.+4      	; 0x3172 <vfprintf+0x244>
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	01 11       	cpse	r16, r1
    3174:	01 96       	adiw	r24, 0x01	; 1
    3176:	11 23       	and	r17, r17
    3178:	31 f0       	breq	.+12     	; 0x3186 <vfprintf+0x258>
    317a:	21 2f       	mov	r18, r17
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	2f 5f       	subi	r18, 0xFF	; 255
    3180:	3f 4f       	sbci	r19, 0xFF	; 255
    3182:	82 0f       	add	r24, r18
    3184:	93 1f       	adc	r25, r19
    3186:	25 2d       	mov	r18, r5
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	82 17       	cp	r24, r18
    318c:	93 07       	cpc	r25, r19
    318e:	14 f4       	brge	.+4      	; 0x3194 <vfprintf+0x266>
    3190:	58 1a       	sub	r5, r24
    3192:	01 c0       	rjmp	.+2      	; 0x3196 <vfprintf+0x268>
    3194:	51 2c       	mov	r5, r1
    3196:	89 2d       	mov	r24, r9
    3198:	89 70       	andi	r24, 0x09	; 9
    319a:	49 f4       	brne	.+18     	; 0x31ae <vfprintf+0x280>
    319c:	55 20       	and	r5, r5
    319e:	39 f0       	breq	.+14     	; 0x31ae <vfprintf+0x280>
    31a0:	b7 01       	movw	r22, r14
    31a2:	80 e2       	ldi	r24, 0x20	; 32
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    31aa:	5a 94       	dec	r5
    31ac:	f7 cf       	rjmp	.-18     	; 0x319c <vfprintf+0x26e>
    31ae:	00 23       	and	r16, r16
    31b0:	29 f0       	breq	.+10     	; 0x31bc <vfprintf+0x28e>
    31b2:	b7 01       	movw	r22, r14
    31b4:	80 2f       	mov	r24, r16
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    31bc:	93 fc       	sbrc	r9, 3
    31be:	09 c0       	rjmp	.+18     	; 0x31d2 <vfprintf+0x2a4>
    31c0:	55 20       	and	r5, r5
    31c2:	39 f0       	breq	.+14     	; 0x31d2 <vfprintf+0x2a4>
    31c4:	b7 01       	movw	r22, r14
    31c6:	80 e3       	ldi	r24, 0x30	; 48
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    31ce:	5a 94       	dec	r5
    31d0:	f7 cf       	rjmp	.-18     	; 0x31c0 <vfprintf+0x292>
    31d2:	97 fe       	sbrs	r9, 7
    31d4:	4c c0       	rjmp	.+152    	; 0x326e <vfprintf+0x340>
    31d6:	46 01       	movw	r8, r12
    31d8:	d7 fe       	sbrs	r13, 7
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <vfprintf+0x2b2>
    31dc:	81 2c       	mov	r8, r1
    31de:	91 2c       	mov	r9, r1
    31e0:	c6 01       	movw	r24, r12
    31e2:	88 19       	sub	r24, r8
    31e4:	99 09       	sbc	r25, r9
    31e6:	f3 01       	movw	r30, r6
    31e8:	e8 0f       	add	r30, r24
    31ea:	f9 1f       	adc	r31, r25
    31ec:	ed 87       	std	Y+13, r30	; 0x0d
    31ee:	fe 87       	std	Y+14, r31	; 0x0e
    31f0:	96 01       	movw	r18, r12
    31f2:	24 19       	sub	r18, r4
    31f4:	31 09       	sbc	r19, r1
    31f6:	2f 87       	std	Y+15, r18	; 0x0f
    31f8:	38 8b       	std	Y+16, r19	; 0x10
    31fa:	01 2f       	mov	r16, r17
    31fc:	10 e0       	ldi	r17, 0x00	; 0
    31fe:	11 95       	neg	r17
    3200:	01 95       	neg	r16
    3202:	11 09       	sbc	r17, r1
    3204:	3f ef       	ldi	r19, 0xFF	; 255
    3206:	83 16       	cp	r8, r19
    3208:	93 06       	cpc	r9, r19
    320a:	29 f4       	brne	.+10     	; 0x3216 <vfprintf+0x2e8>
    320c:	b7 01       	movw	r22, r14
    320e:	8e e2       	ldi	r24, 0x2E	; 46
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    3216:	c8 14       	cp	r12, r8
    3218:	d9 04       	cpc	r13, r9
    321a:	4c f0       	brlt	.+18     	; 0x322e <vfprintf+0x300>
    321c:	8f 85       	ldd	r24, Y+15	; 0x0f
    321e:	98 89       	ldd	r25, Y+16	; 0x10
    3220:	88 15       	cp	r24, r8
    3222:	99 05       	cpc	r25, r9
    3224:	24 f4       	brge	.+8      	; 0x322e <vfprintf+0x300>
    3226:	ed 85       	ldd	r30, Y+13	; 0x0d
    3228:	fe 85       	ldd	r31, Y+14	; 0x0e
    322a:	81 81       	ldd	r24, Z+1	; 0x01
    322c:	01 c0       	rjmp	.+2      	; 0x3230 <vfprintf+0x302>
    322e:	80 e3       	ldi	r24, 0x30	; 48
    3230:	f1 e0       	ldi	r31, 0x01	; 1
    3232:	8f 1a       	sub	r8, r31
    3234:	91 08       	sbc	r9, r1
    3236:	2d 85       	ldd	r18, Y+13	; 0x0d
    3238:	3e 85       	ldd	r19, Y+14	; 0x0e
    323a:	2f 5f       	subi	r18, 0xFF	; 255
    323c:	3f 4f       	sbci	r19, 0xFF	; 255
    323e:	2d 87       	std	Y+13, r18	; 0x0d
    3240:	3e 87       	std	Y+14, r19	; 0x0e
    3242:	80 16       	cp	r8, r16
    3244:	91 06       	cpc	r9, r17
    3246:	2c f0       	brlt	.+10     	; 0x3252 <vfprintf+0x324>
    3248:	b7 01       	movw	r22, r14
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    3250:	d9 cf       	rjmp	.-78     	; 0x3204 <vfprintf+0x2d6>
    3252:	c8 14       	cp	r12, r8
    3254:	d9 04       	cpc	r13, r9
    3256:	41 f4       	brne	.+16     	; 0x3268 <vfprintf+0x33a>
    3258:	9a 81       	ldd	r25, Y+2	; 0x02
    325a:	96 33       	cpi	r25, 0x36	; 54
    325c:	20 f4       	brcc	.+8      	; 0x3266 <vfprintf+0x338>
    325e:	95 33       	cpi	r25, 0x35	; 53
    3260:	19 f4       	brne	.+6      	; 0x3268 <vfprintf+0x33a>
    3262:	3c 85       	ldd	r19, Y+12	; 0x0c
    3264:	34 ff       	sbrs	r19, 4
    3266:	81 e3       	ldi	r24, 0x31	; 49
    3268:	b7 01       	movw	r22, r14
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	4e c0       	rjmp	.+156    	; 0x330a <vfprintf+0x3dc>
    326e:	8a 81       	ldd	r24, Y+2	; 0x02
    3270:	81 33       	cpi	r24, 0x31	; 49
    3272:	19 f0       	breq	.+6      	; 0x327a <vfprintf+0x34c>
    3274:	9c 85       	ldd	r25, Y+12	; 0x0c
    3276:	9f 7e       	andi	r25, 0xEF	; 239
    3278:	9c 87       	std	Y+12, r25	; 0x0c
    327a:	b7 01       	movw	r22, r14
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    3282:	11 11       	cpse	r17, r1
    3284:	05 c0       	rjmp	.+10     	; 0x3290 <vfprintf+0x362>
    3286:	94 fc       	sbrc	r9, 4
    3288:	18 c0       	rjmp	.+48     	; 0x32ba <vfprintf+0x38c>
    328a:	85 e6       	ldi	r24, 0x65	; 101
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	17 c0       	rjmp	.+46     	; 0x32be <vfprintf+0x390>
    3290:	b7 01       	movw	r22, r14
    3292:	8e e2       	ldi	r24, 0x2E	; 46
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    329a:	1e 5f       	subi	r17, 0xFE	; 254
    329c:	82 e0       	ldi	r24, 0x02	; 2
    329e:	01 e0       	ldi	r16, 0x01	; 1
    32a0:	08 0f       	add	r16, r24
    32a2:	f3 01       	movw	r30, r6
    32a4:	e8 0f       	add	r30, r24
    32a6:	f1 1d       	adc	r31, r1
    32a8:	80 81       	ld	r24, Z
    32aa:	b7 01       	movw	r22, r14
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    32b2:	80 2f       	mov	r24, r16
    32b4:	01 13       	cpse	r16, r17
    32b6:	f3 cf       	rjmp	.-26     	; 0x329e <vfprintf+0x370>
    32b8:	e6 cf       	rjmp	.-52     	; 0x3286 <vfprintf+0x358>
    32ba:	85 e4       	ldi	r24, 0x45	; 69
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	b7 01       	movw	r22, r14
    32c0:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    32c4:	d7 fc       	sbrc	r13, 7
    32c6:	06 c0       	rjmp	.+12     	; 0x32d4 <vfprintf+0x3a6>
    32c8:	c1 14       	cp	r12, r1
    32ca:	d1 04       	cpc	r13, r1
    32cc:	41 f4       	brne	.+16     	; 0x32de <vfprintf+0x3b0>
    32ce:	ec 85       	ldd	r30, Y+12	; 0x0c
    32d0:	e4 ff       	sbrs	r30, 4
    32d2:	05 c0       	rjmp	.+10     	; 0x32de <vfprintf+0x3b0>
    32d4:	d1 94       	neg	r13
    32d6:	c1 94       	neg	r12
    32d8:	d1 08       	sbc	r13, r1
    32da:	8d e2       	ldi	r24, 0x2D	; 45
    32dc:	01 c0       	rjmp	.+2      	; 0x32e0 <vfprintf+0x3b2>
    32de:	8b e2       	ldi	r24, 0x2B	; 43
    32e0:	b7 01       	movw	r22, r14
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    32e8:	80 e3       	ldi	r24, 0x30	; 48
    32ea:	2a e0       	ldi	r18, 0x0A	; 10
    32ec:	c2 16       	cp	r12, r18
    32ee:	d1 04       	cpc	r13, r1
    32f0:	2c f0       	brlt	.+10     	; 0x32fc <vfprintf+0x3ce>
    32f2:	8f 5f       	subi	r24, 0xFF	; 255
    32f4:	fa e0       	ldi	r31, 0x0A	; 10
    32f6:	cf 1a       	sub	r12, r31
    32f8:	d1 08       	sbc	r13, r1
    32fa:	f7 cf       	rjmp	.-18     	; 0x32ea <vfprintf+0x3bc>
    32fc:	b7 01       	movw	r22, r14
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    3304:	b7 01       	movw	r22, r14
    3306:	c6 01       	movw	r24, r12
    3308:	c0 96       	adiw	r24, 0x30	; 48
    330a:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    330e:	54 c1       	rjmp	.+680    	; 0x35b8 <vfprintf+0x68a>
    3310:	83 36       	cpi	r24, 0x63	; 99
    3312:	31 f0       	breq	.+12     	; 0x3320 <vfprintf+0x3f2>
    3314:	83 37       	cpi	r24, 0x73	; 115
    3316:	79 f0       	breq	.+30     	; 0x3336 <vfprintf+0x408>
    3318:	83 35       	cpi	r24, 0x53	; 83
    331a:	09 f0       	breq	.+2      	; 0x331e <vfprintf+0x3f0>
    331c:	56 c0       	rjmp	.+172    	; 0x33ca <vfprintf+0x49c>
    331e:	20 c0       	rjmp	.+64     	; 0x3360 <vfprintf+0x432>
    3320:	56 01       	movw	r10, r12
    3322:	32 e0       	ldi	r19, 0x02	; 2
    3324:	a3 0e       	add	r10, r19
    3326:	b1 1c       	adc	r11, r1
    3328:	f6 01       	movw	r30, r12
    332a:	80 81       	ld	r24, Z
    332c:	89 83       	std	Y+1, r24	; 0x01
    332e:	01 e0       	ldi	r16, 0x01	; 1
    3330:	10 e0       	ldi	r17, 0x00	; 0
    3332:	63 01       	movw	r12, r6
    3334:	12 c0       	rjmp	.+36     	; 0x335a <vfprintf+0x42c>
    3336:	56 01       	movw	r10, r12
    3338:	f2 e0       	ldi	r31, 0x02	; 2
    333a:	af 0e       	add	r10, r31
    333c:	b1 1c       	adc	r11, r1
    333e:	f6 01       	movw	r30, r12
    3340:	c0 80       	ld	r12, Z
    3342:	d1 80       	ldd	r13, Z+1	; 0x01
    3344:	96 fe       	sbrs	r9, 6
    3346:	03 c0       	rjmp	.+6      	; 0x334e <vfprintf+0x420>
    3348:	61 2f       	mov	r22, r17
    334a:	70 e0       	ldi	r23, 0x00	; 0
    334c:	02 c0       	rjmp	.+4      	; 0x3352 <vfprintf+0x424>
    334e:	6f ef       	ldi	r22, 0xFF	; 255
    3350:	7f ef       	ldi	r23, 0xFF	; 255
    3352:	c6 01       	movw	r24, r12
    3354:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <strnlen>
    3358:	8c 01       	movw	r16, r24
    335a:	f9 2d       	mov	r31, r9
    335c:	ff 77       	andi	r31, 0x7F	; 127
    335e:	14 c0       	rjmp	.+40     	; 0x3388 <vfprintf+0x45a>
    3360:	56 01       	movw	r10, r12
    3362:	22 e0       	ldi	r18, 0x02	; 2
    3364:	a2 0e       	add	r10, r18
    3366:	b1 1c       	adc	r11, r1
    3368:	f6 01       	movw	r30, r12
    336a:	c0 80       	ld	r12, Z
    336c:	d1 80       	ldd	r13, Z+1	; 0x01
    336e:	96 fe       	sbrs	r9, 6
    3370:	03 c0       	rjmp	.+6      	; 0x3378 <vfprintf+0x44a>
    3372:	61 2f       	mov	r22, r17
    3374:	70 e0       	ldi	r23, 0x00	; 0
    3376:	02 c0       	rjmp	.+4      	; 0x337c <vfprintf+0x44e>
    3378:	6f ef       	ldi	r22, 0xFF	; 255
    337a:	7f ef       	ldi	r23, 0xFF	; 255
    337c:	c6 01       	movw	r24, r12
    337e:	0e 94 4b 1c 	call	0x3896	; 0x3896 <strnlen_P>
    3382:	8c 01       	movw	r16, r24
    3384:	f9 2d       	mov	r31, r9
    3386:	f0 68       	ori	r31, 0x80	; 128
    3388:	9f 2e       	mov	r9, r31
    338a:	f3 fd       	sbrc	r31, 3
    338c:	1a c0       	rjmp	.+52     	; 0x33c2 <vfprintf+0x494>
    338e:	85 2d       	mov	r24, r5
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	08 17       	cp	r16, r24
    3394:	19 07       	cpc	r17, r25
    3396:	a8 f4       	brcc	.+42     	; 0x33c2 <vfprintf+0x494>
    3398:	b7 01       	movw	r22, r14
    339a:	80 e2       	ldi	r24, 0x20	; 32
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    33a2:	5a 94       	dec	r5
    33a4:	f4 cf       	rjmp	.-24     	; 0x338e <vfprintf+0x460>
    33a6:	f6 01       	movw	r30, r12
    33a8:	97 fc       	sbrc	r9, 7
    33aa:	85 91       	lpm	r24, Z+
    33ac:	97 fe       	sbrs	r9, 7
    33ae:	81 91       	ld	r24, Z+
    33b0:	6f 01       	movw	r12, r30
    33b2:	b7 01       	movw	r22, r14
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    33ba:	51 10       	cpse	r5, r1
    33bc:	5a 94       	dec	r5
    33be:	01 50       	subi	r16, 0x01	; 1
    33c0:	11 09       	sbc	r17, r1
    33c2:	01 15       	cp	r16, r1
    33c4:	11 05       	cpc	r17, r1
    33c6:	79 f7       	brne	.-34     	; 0x33a6 <vfprintf+0x478>
    33c8:	f7 c0       	rjmp	.+494    	; 0x35b8 <vfprintf+0x68a>
    33ca:	84 36       	cpi	r24, 0x64	; 100
    33cc:	11 f0       	breq	.+4      	; 0x33d2 <vfprintf+0x4a4>
    33ce:	89 36       	cpi	r24, 0x69	; 105
    33d0:	61 f5       	brne	.+88     	; 0x342a <vfprintf+0x4fc>
    33d2:	56 01       	movw	r10, r12
    33d4:	97 fe       	sbrs	r9, 7
    33d6:	09 c0       	rjmp	.+18     	; 0x33ea <vfprintf+0x4bc>
    33d8:	24 e0       	ldi	r18, 0x04	; 4
    33da:	a2 0e       	add	r10, r18
    33dc:	b1 1c       	adc	r11, r1
    33de:	f6 01       	movw	r30, r12
    33e0:	60 81       	ld	r22, Z
    33e2:	71 81       	ldd	r23, Z+1	; 0x01
    33e4:	82 81       	ldd	r24, Z+2	; 0x02
    33e6:	93 81       	ldd	r25, Z+3	; 0x03
    33e8:	0a c0       	rjmp	.+20     	; 0x33fe <vfprintf+0x4d0>
    33ea:	f2 e0       	ldi	r31, 0x02	; 2
    33ec:	af 0e       	add	r10, r31
    33ee:	b1 1c       	adc	r11, r1
    33f0:	f6 01       	movw	r30, r12
    33f2:	60 81       	ld	r22, Z
    33f4:	71 81       	ldd	r23, Z+1	; 0x01
    33f6:	07 2e       	mov	r0, r23
    33f8:	00 0c       	add	r0, r0
    33fa:	88 0b       	sbc	r24, r24
    33fc:	99 0b       	sbc	r25, r25
    33fe:	f9 2d       	mov	r31, r9
    3400:	ff 76       	andi	r31, 0x6F	; 111
    3402:	9f 2e       	mov	r9, r31
    3404:	97 ff       	sbrs	r25, 7
    3406:	09 c0       	rjmp	.+18     	; 0x341a <vfprintf+0x4ec>
    3408:	90 95       	com	r25
    340a:	80 95       	com	r24
    340c:	70 95       	com	r23
    340e:	61 95       	neg	r22
    3410:	7f 4f       	sbci	r23, 0xFF	; 255
    3412:	8f 4f       	sbci	r24, 0xFF	; 255
    3414:	9f 4f       	sbci	r25, 0xFF	; 255
    3416:	f0 68       	ori	r31, 0x80	; 128
    3418:	9f 2e       	mov	r9, r31
    341a:	2a e0       	ldi	r18, 0x0A	; 10
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	a3 01       	movw	r20, r6
    3420:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__ultoa_invert>
    3424:	c8 2e       	mov	r12, r24
    3426:	c6 18       	sub	r12, r6
    3428:	3f c0       	rjmp	.+126    	; 0x34a8 <vfprintf+0x57a>
    342a:	09 2d       	mov	r16, r9
    342c:	85 37       	cpi	r24, 0x75	; 117
    342e:	21 f4       	brne	.+8      	; 0x3438 <vfprintf+0x50a>
    3430:	0f 7e       	andi	r16, 0xEF	; 239
    3432:	2a e0       	ldi	r18, 0x0A	; 10
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	1d c0       	rjmp	.+58     	; 0x3472 <vfprintf+0x544>
    3438:	09 7f       	andi	r16, 0xF9	; 249
    343a:	8f 36       	cpi	r24, 0x6F	; 111
    343c:	91 f0       	breq	.+36     	; 0x3462 <vfprintf+0x534>
    343e:	18 f4       	brcc	.+6      	; 0x3446 <vfprintf+0x518>
    3440:	88 35       	cpi	r24, 0x58	; 88
    3442:	59 f0       	breq	.+22     	; 0x345a <vfprintf+0x52c>
    3444:	c3 c0       	rjmp	.+390    	; 0x35cc <vfprintf+0x69e>
    3446:	80 37       	cpi	r24, 0x70	; 112
    3448:	19 f0       	breq	.+6      	; 0x3450 <vfprintf+0x522>
    344a:	88 37       	cpi	r24, 0x78	; 120
    344c:	11 f0       	breq	.+4      	; 0x3452 <vfprintf+0x524>
    344e:	be c0       	rjmp	.+380    	; 0x35cc <vfprintf+0x69e>
    3450:	00 61       	ori	r16, 0x10	; 16
    3452:	04 ff       	sbrs	r16, 4
    3454:	09 c0       	rjmp	.+18     	; 0x3468 <vfprintf+0x53a>
    3456:	04 60       	ori	r16, 0x04	; 4
    3458:	07 c0       	rjmp	.+14     	; 0x3468 <vfprintf+0x53a>
    345a:	94 fe       	sbrs	r9, 4
    345c:	08 c0       	rjmp	.+16     	; 0x346e <vfprintf+0x540>
    345e:	06 60       	ori	r16, 0x06	; 6
    3460:	06 c0       	rjmp	.+12     	; 0x346e <vfprintf+0x540>
    3462:	28 e0       	ldi	r18, 0x08	; 8
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	05 c0       	rjmp	.+10     	; 0x3472 <vfprintf+0x544>
    3468:	20 e1       	ldi	r18, 0x10	; 16
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	02 c0       	rjmp	.+4      	; 0x3472 <vfprintf+0x544>
    346e:	20 e1       	ldi	r18, 0x10	; 16
    3470:	32 e0       	ldi	r19, 0x02	; 2
    3472:	56 01       	movw	r10, r12
    3474:	07 ff       	sbrs	r16, 7
    3476:	09 c0       	rjmp	.+18     	; 0x348a <vfprintf+0x55c>
    3478:	84 e0       	ldi	r24, 0x04	; 4
    347a:	a8 0e       	add	r10, r24
    347c:	b1 1c       	adc	r11, r1
    347e:	f6 01       	movw	r30, r12
    3480:	60 81       	ld	r22, Z
    3482:	71 81       	ldd	r23, Z+1	; 0x01
    3484:	82 81       	ldd	r24, Z+2	; 0x02
    3486:	93 81       	ldd	r25, Z+3	; 0x03
    3488:	08 c0       	rjmp	.+16     	; 0x349a <vfprintf+0x56c>
    348a:	f2 e0       	ldi	r31, 0x02	; 2
    348c:	af 0e       	add	r10, r31
    348e:	b1 1c       	adc	r11, r1
    3490:	f6 01       	movw	r30, r12
    3492:	60 81       	ld	r22, Z
    3494:	71 81       	ldd	r23, Z+1	; 0x01
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	a3 01       	movw	r20, r6
    349c:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <__ultoa_invert>
    34a0:	c8 2e       	mov	r12, r24
    34a2:	c6 18       	sub	r12, r6
    34a4:	0f 77       	andi	r16, 0x7F	; 127
    34a6:	90 2e       	mov	r9, r16
    34a8:	96 fe       	sbrs	r9, 6
    34aa:	0b c0       	rjmp	.+22     	; 0x34c2 <vfprintf+0x594>
    34ac:	09 2d       	mov	r16, r9
    34ae:	0e 7f       	andi	r16, 0xFE	; 254
    34b0:	c1 16       	cp	r12, r17
    34b2:	50 f4       	brcc	.+20     	; 0x34c8 <vfprintf+0x59a>
    34b4:	94 fe       	sbrs	r9, 4
    34b6:	0a c0       	rjmp	.+20     	; 0x34cc <vfprintf+0x59e>
    34b8:	92 fc       	sbrc	r9, 2
    34ba:	08 c0       	rjmp	.+16     	; 0x34cc <vfprintf+0x59e>
    34bc:	09 2d       	mov	r16, r9
    34be:	0e 7e       	andi	r16, 0xEE	; 238
    34c0:	05 c0       	rjmp	.+10     	; 0x34cc <vfprintf+0x59e>
    34c2:	dc 2c       	mov	r13, r12
    34c4:	09 2d       	mov	r16, r9
    34c6:	03 c0       	rjmp	.+6      	; 0x34ce <vfprintf+0x5a0>
    34c8:	dc 2c       	mov	r13, r12
    34ca:	01 c0       	rjmp	.+2      	; 0x34ce <vfprintf+0x5a0>
    34cc:	d1 2e       	mov	r13, r17
    34ce:	04 ff       	sbrs	r16, 4
    34d0:	0d c0       	rjmp	.+26     	; 0x34ec <vfprintf+0x5be>
    34d2:	fe 01       	movw	r30, r28
    34d4:	ec 0d       	add	r30, r12
    34d6:	f1 1d       	adc	r31, r1
    34d8:	80 81       	ld	r24, Z
    34da:	80 33       	cpi	r24, 0x30	; 48
    34dc:	11 f4       	brne	.+4      	; 0x34e2 <vfprintf+0x5b4>
    34de:	09 7e       	andi	r16, 0xE9	; 233
    34e0:	09 c0       	rjmp	.+18     	; 0x34f4 <vfprintf+0x5c6>
    34e2:	02 ff       	sbrs	r16, 2
    34e4:	06 c0       	rjmp	.+12     	; 0x34f2 <vfprintf+0x5c4>
    34e6:	d3 94       	inc	r13
    34e8:	d3 94       	inc	r13
    34ea:	04 c0       	rjmp	.+8      	; 0x34f4 <vfprintf+0x5c6>
    34ec:	80 2f       	mov	r24, r16
    34ee:	86 78       	andi	r24, 0x86	; 134
    34f0:	09 f0       	breq	.+2      	; 0x34f4 <vfprintf+0x5c6>
    34f2:	d3 94       	inc	r13
    34f4:	03 fd       	sbrc	r16, 3
    34f6:	11 c0       	rjmp	.+34     	; 0x351a <vfprintf+0x5ec>
    34f8:	00 ff       	sbrs	r16, 0
    34fa:	06 c0       	rjmp	.+12     	; 0x3508 <vfprintf+0x5da>
    34fc:	1c 2d       	mov	r17, r12
    34fe:	d5 14       	cp	r13, r5
    3500:	80 f4       	brcc	.+32     	; 0x3522 <vfprintf+0x5f4>
    3502:	15 0d       	add	r17, r5
    3504:	1d 19       	sub	r17, r13
    3506:	0d c0       	rjmp	.+26     	; 0x3522 <vfprintf+0x5f4>
    3508:	d5 14       	cp	r13, r5
    350a:	58 f4       	brcc	.+22     	; 0x3522 <vfprintf+0x5f4>
    350c:	b7 01       	movw	r22, r14
    350e:	80 e2       	ldi	r24, 0x20	; 32
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    3516:	d3 94       	inc	r13
    3518:	f7 cf       	rjmp	.-18     	; 0x3508 <vfprintf+0x5da>
    351a:	d5 14       	cp	r13, r5
    351c:	10 f4       	brcc	.+4      	; 0x3522 <vfprintf+0x5f4>
    351e:	5d 18       	sub	r5, r13
    3520:	01 c0       	rjmp	.+2      	; 0x3524 <vfprintf+0x5f6>
    3522:	51 2c       	mov	r5, r1
    3524:	04 ff       	sbrs	r16, 4
    3526:	10 c0       	rjmp	.+32     	; 0x3548 <vfprintf+0x61a>
    3528:	b7 01       	movw	r22, r14
    352a:	80 e3       	ldi	r24, 0x30	; 48
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    3532:	02 ff       	sbrs	r16, 2
    3534:	17 c0       	rjmp	.+46     	; 0x3564 <vfprintf+0x636>
    3536:	01 fd       	sbrc	r16, 1
    3538:	03 c0       	rjmp	.+6      	; 0x3540 <vfprintf+0x612>
    353a:	88 e7       	ldi	r24, 0x78	; 120
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	02 c0       	rjmp	.+4      	; 0x3544 <vfprintf+0x616>
    3540:	88 e5       	ldi	r24, 0x58	; 88
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	b7 01       	movw	r22, r14
    3546:	0c c0       	rjmp	.+24     	; 0x3560 <vfprintf+0x632>
    3548:	80 2f       	mov	r24, r16
    354a:	86 78       	andi	r24, 0x86	; 134
    354c:	59 f0       	breq	.+22     	; 0x3564 <vfprintf+0x636>
    354e:	01 ff       	sbrs	r16, 1
    3550:	02 c0       	rjmp	.+4      	; 0x3556 <vfprintf+0x628>
    3552:	8b e2       	ldi	r24, 0x2B	; 43
    3554:	01 c0       	rjmp	.+2      	; 0x3558 <vfprintf+0x62a>
    3556:	80 e2       	ldi	r24, 0x20	; 32
    3558:	07 fd       	sbrc	r16, 7
    355a:	8d e2       	ldi	r24, 0x2D	; 45
    355c:	b7 01       	movw	r22, r14
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    3564:	c1 16       	cp	r12, r17
    3566:	38 f4       	brcc	.+14     	; 0x3576 <vfprintf+0x648>
    3568:	b7 01       	movw	r22, r14
    356a:	80 e3       	ldi	r24, 0x30	; 48
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    3572:	11 50       	subi	r17, 0x01	; 1
    3574:	f7 cf       	rjmp	.-18     	; 0x3564 <vfprintf+0x636>
    3576:	ca 94       	dec	r12
    3578:	f3 01       	movw	r30, r6
    357a:	ec 0d       	add	r30, r12
    357c:	f1 1d       	adc	r31, r1
    357e:	80 81       	ld	r24, Z
    3580:	b7 01       	movw	r22, r14
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    3588:	c1 10       	cpse	r12, r1
    358a:	f5 cf       	rjmp	.-22     	; 0x3576 <vfprintf+0x648>
    358c:	15 c0       	rjmp	.+42     	; 0x35b8 <vfprintf+0x68a>
    358e:	f4 e0       	ldi	r31, 0x04	; 4
    3590:	f5 15       	cp	r31, r5
    3592:	60 f5       	brcc	.+88     	; 0x35ec <vfprintf+0x6be>
    3594:	84 e0       	ldi	r24, 0x04	; 4
    3596:	58 1a       	sub	r5, r24
    3598:	93 fe       	sbrs	r9, 3
    359a:	1f c0       	rjmp	.+62     	; 0x35da <vfprintf+0x6ac>
    359c:	01 11       	cpse	r16, r1
    359e:	27 c0       	rjmp	.+78     	; 0x35ee <vfprintf+0x6c0>
    35a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    35a2:	23 ff       	sbrs	r18, 3
    35a4:	2a c0       	rjmp	.+84     	; 0x35fa <vfprintf+0x6cc>
    35a6:	0a e0       	ldi	r16, 0x0A	; 10
    35a8:	11 e0       	ldi	r17, 0x01	; 1
    35aa:	39 2d       	mov	r19, r9
    35ac:	30 71       	andi	r19, 0x10	; 16
    35ae:	93 2e       	mov	r9, r19
    35b0:	f8 01       	movw	r30, r16
    35b2:	84 91       	lpm	r24, Z
    35b4:	81 11       	cpse	r24, r1
    35b6:	24 c0       	rjmp	.+72     	; 0x3600 <vfprintf+0x6d2>
    35b8:	55 20       	and	r5, r5
    35ba:	09 f4       	brne	.+2      	; 0x35be <vfprintf+0x690>
    35bc:	e4 cc       	rjmp	.-1592   	; 0x2f86 <vfprintf+0x58>
    35be:	b7 01       	movw	r22, r14
    35c0:	80 e2       	ldi	r24, 0x20	; 32
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    35c8:	5a 94       	dec	r5
    35ca:	f6 cf       	rjmp	.-20     	; 0x35b8 <vfprintf+0x68a>
    35cc:	f7 01       	movw	r30, r14
    35ce:	86 81       	ldd	r24, Z+6	; 0x06
    35d0:	97 81       	ldd	r25, Z+7	; 0x07
    35d2:	26 c0       	rjmp	.+76     	; 0x3620 <vfprintf+0x6f2>
    35d4:	8f ef       	ldi	r24, 0xFF	; 255
    35d6:	9f ef       	ldi	r25, 0xFF	; 255
    35d8:	23 c0       	rjmp	.+70     	; 0x3620 <vfprintf+0x6f2>
    35da:	b7 01       	movw	r22, r14
    35dc:	80 e2       	ldi	r24, 0x20	; 32
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    35e4:	5a 94       	dec	r5
    35e6:	51 10       	cpse	r5, r1
    35e8:	f8 cf       	rjmp	.-16     	; 0x35da <vfprintf+0x6ac>
    35ea:	d8 cf       	rjmp	.-80     	; 0x359c <vfprintf+0x66e>
    35ec:	51 2c       	mov	r5, r1
    35ee:	b7 01       	movw	r22, r14
    35f0:	80 2f       	mov	r24, r16
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    35f8:	d3 cf       	rjmp	.-90     	; 0x35a0 <vfprintf+0x672>
    35fa:	0e e0       	ldi	r16, 0x0E	; 14
    35fc:	11 e0       	ldi	r17, 0x01	; 1
    35fe:	d5 cf       	rjmp	.-86     	; 0x35aa <vfprintf+0x67c>
    3600:	91 10       	cpse	r9, r1
    3602:	80 52       	subi	r24, 0x20	; 32
    3604:	b7 01       	movw	r22, r14
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <fputc>
    360c:	0f 5f       	subi	r16, 0xFF	; 255
    360e:	1f 4f       	sbci	r17, 0xFF	; 255
    3610:	cf cf       	rjmp	.-98     	; 0x35b0 <vfprintf+0x682>
    3612:	23 e0       	ldi	r18, 0x03	; 3
    3614:	25 15       	cp	r18, r5
    3616:	10 f4       	brcc	.+4      	; 0x361c <vfprintf+0x6ee>
    3618:	83 e0       	ldi	r24, 0x03	; 3
    361a:	bd cf       	rjmp	.-134    	; 0x3596 <vfprintf+0x668>
    361c:	51 2c       	mov	r5, r1
    361e:	c0 cf       	rjmp	.-128    	; 0x35a0 <vfprintf+0x672>
    3620:	60 96       	adiw	r28, 0x10	; 16
    3622:	e2 e1       	ldi	r30, 0x12	; 18
    3624:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__epilogue_restores__>

00003628 <__divmodhi4>:
    3628:	97 fb       	bst	r25, 7
    362a:	07 2e       	mov	r0, r23
    362c:	16 f4       	brtc	.+4      	; 0x3632 <__divmodhi4+0xa>
    362e:	00 94       	com	r0
    3630:	07 d0       	rcall	.+14     	; 0x3640 <__divmodhi4_neg1>
    3632:	77 fd       	sbrc	r23, 7
    3634:	09 d0       	rcall	.+18     	; 0x3648 <__divmodhi4_neg2>
    3636:	0e 94 5f 1b 	call	0x36be	; 0x36be <__udivmodhi4>
    363a:	07 fc       	sbrc	r0, 7
    363c:	05 d0       	rcall	.+10     	; 0x3648 <__divmodhi4_neg2>
    363e:	3e f4       	brtc	.+14     	; 0x364e <__divmodhi4_exit>

00003640 <__divmodhi4_neg1>:
    3640:	90 95       	com	r25
    3642:	81 95       	neg	r24
    3644:	9f 4f       	sbci	r25, 0xFF	; 255
    3646:	08 95       	ret

00003648 <__divmodhi4_neg2>:
    3648:	70 95       	com	r23
    364a:	61 95       	neg	r22
    364c:	7f 4f       	sbci	r23, 0xFF	; 255

0000364e <__divmodhi4_exit>:
    364e:	08 95       	ret

00003650 <__tablejump2__>:
    3650:	ee 0f       	add	r30, r30
    3652:	ff 1f       	adc	r31, r31
    3654:	05 90       	lpm	r0, Z+
    3656:	f4 91       	lpm	r31, Z
    3658:	e0 2d       	mov	r30, r0
    365a:	09 94       	ijmp

0000365c <__prologue_saves__>:
    365c:	2f 92       	push	r2
    365e:	3f 92       	push	r3
    3660:	4f 92       	push	r4
    3662:	5f 92       	push	r5
    3664:	6f 92       	push	r6
    3666:	7f 92       	push	r7
    3668:	8f 92       	push	r8
    366a:	9f 92       	push	r9
    366c:	af 92       	push	r10
    366e:	bf 92       	push	r11
    3670:	cf 92       	push	r12
    3672:	df 92       	push	r13
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	0f 93       	push	r16
    367a:	1f 93       	push	r17
    367c:	cf 93       	push	r28
    367e:	df 93       	push	r29
    3680:	cd b7       	in	r28, 0x3d	; 61
    3682:	de b7       	in	r29, 0x3e	; 62
    3684:	ca 1b       	sub	r28, r26
    3686:	db 0b       	sbc	r29, r27
    3688:	cd bf       	out	0x3d, r28	; 61
    368a:	de bf       	out	0x3e, r29	; 62
    368c:	09 94       	ijmp

0000368e <__epilogue_restores__>:
    368e:	2a 88       	ldd	r2, Y+18	; 0x12
    3690:	39 88       	ldd	r3, Y+17	; 0x11
    3692:	48 88       	ldd	r4, Y+16	; 0x10
    3694:	5f 84       	ldd	r5, Y+15	; 0x0f
    3696:	6e 84       	ldd	r6, Y+14	; 0x0e
    3698:	7d 84       	ldd	r7, Y+13	; 0x0d
    369a:	8c 84       	ldd	r8, Y+12	; 0x0c
    369c:	9b 84       	ldd	r9, Y+11	; 0x0b
    369e:	aa 84       	ldd	r10, Y+10	; 0x0a
    36a0:	b9 84       	ldd	r11, Y+9	; 0x09
    36a2:	c8 84       	ldd	r12, Y+8	; 0x08
    36a4:	df 80       	ldd	r13, Y+7	; 0x07
    36a6:	ee 80       	ldd	r14, Y+6	; 0x06
    36a8:	fd 80       	ldd	r15, Y+5	; 0x05
    36aa:	0c 81       	ldd	r16, Y+4	; 0x04
    36ac:	1b 81       	ldd	r17, Y+3	; 0x03
    36ae:	aa 81       	ldd	r26, Y+2	; 0x02
    36b0:	b9 81       	ldd	r27, Y+1	; 0x01
    36b2:	ce 0f       	add	r28, r30
    36b4:	d1 1d       	adc	r29, r1
    36b6:	cd bf       	out	0x3d, r28	; 61
    36b8:	de bf       	out	0x3e, r29	; 62
    36ba:	ed 01       	movw	r28, r26
    36bc:	08 95       	ret

000036be <__udivmodhi4>:
    36be:	aa 1b       	sub	r26, r26
    36c0:	bb 1b       	sub	r27, r27
    36c2:	51 e1       	ldi	r21, 0x11	; 17
    36c4:	07 c0       	rjmp	.+14     	; 0x36d4 <__udivmodhi4_ep>

000036c6 <__udivmodhi4_loop>:
    36c6:	aa 1f       	adc	r26, r26
    36c8:	bb 1f       	adc	r27, r27
    36ca:	a6 17       	cp	r26, r22
    36cc:	b7 07       	cpc	r27, r23
    36ce:	10 f0       	brcs	.+4      	; 0x36d4 <__udivmodhi4_ep>
    36d0:	a6 1b       	sub	r26, r22
    36d2:	b7 0b       	sbc	r27, r23

000036d4 <__udivmodhi4_ep>:
    36d4:	88 1f       	adc	r24, r24
    36d6:	99 1f       	adc	r25, r25
    36d8:	5a 95       	dec	r21
    36da:	a9 f7       	brne	.-22     	; 0x36c6 <__udivmodhi4_loop>
    36dc:	80 95       	com	r24
    36de:	90 95       	com	r25
    36e0:	bc 01       	movw	r22, r24
    36e2:	cd 01       	movw	r24, r26
    36e4:	08 95       	ret

000036e6 <__ftoa_engine>:
    36e6:	28 30       	cpi	r18, 0x08	; 8
    36e8:	08 f0       	brcs	.+2      	; 0x36ec <__ftoa_engine+0x6>
    36ea:	27 e0       	ldi	r18, 0x07	; 7
    36ec:	33 27       	eor	r19, r19
    36ee:	da 01       	movw	r26, r20
    36f0:	99 0f       	add	r25, r25
    36f2:	31 1d       	adc	r19, r1
    36f4:	87 fd       	sbrc	r24, 7
    36f6:	91 60       	ori	r25, 0x01	; 1
    36f8:	00 96       	adiw	r24, 0x00	; 0
    36fa:	61 05       	cpc	r22, r1
    36fc:	71 05       	cpc	r23, r1
    36fe:	39 f4       	brne	.+14     	; 0x370e <__ftoa_engine+0x28>
    3700:	32 60       	ori	r19, 0x02	; 2
    3702:	2e 5f       	subi	r18, 0xFE	; 254
    3704:	3d 93       	st	X+, r19
    3706:	30 e3       	ldi	r19, 0x30	; 48
    3708:	2a 95       	dec	r18
    370a:	e1 f7       	brne	.-8      	; 0x3704 <__ftoa_engine+0x1e>
    370c:	08 95       	ret
    370e:	9f 3f       	cpi	r25, 0xFF	; 255
    3710:	30 f0       	brcs	.+12     	; 0x371e <__ftoa_engine+0x38>
    3712:	80 38       	cpi	r24, 0x80	; 128
    3714:	71 05       	cpc	r23, r1
    3716:	61 05       	cpc	r22, r1
    3718:	09 f0       	breq	.+2      	; 0x371c <__ftoa_engine+0x36>
    371a:	3c 5f       	subi	r19, 0xFC	; 252
    371c:	3c 5f       	subi	r19, 0xFC	; 252
    371e:	3d 93       	st	X+, r19
    3720:	91 30       	cpi	r25, 0x01	; 1
    3722:	08 f0       	brcs	.+2      	; 0x3726 <__ftoa_engine+0x40>
    3724:	80 68       	ori	r24, 0x80	; 128
    3726:	91 1d       	adc	r25, r1
    3728:	df 93       	push	r29
    372a:	cf 93       	push	r28
    372c:	1f 93       	push	r17
    372e:	0f 93       	push	r16
    3730:	ff 92       	push	r15
    3732:	ef 92       	push	r14
    3734:	19 2f       	mov	r17, r25
    3736:	98 7f       	andi	r25, 0xF8	; 248
    3738:	96 95       	lsr	r25
    373a:	e9 2f       	mov	r30, r25
    373c:	96 95       	lsr	r25
    373e:	96 95       	lsr	r25
    3740:	e9 0f       	add	r30, r25
    3742:	ff 27       	eor	r31, r31
    3744:	e4 59       	subi	r30, 0x94	; 148
    3746:	fe 4f       	sbci	r31, 0xFE	; 254
    3748:	99 27       	eor	r25, r25
    374a:	33 27       	eor	r19, r19
    374c:	ee 24       	eor	r14, r14
    374e:	ff 24       	eor	r15, r15
    3750:	a7 01       	movw	r20, r14
    3752:	e7 01       	movw	r28, r14
    3754:	05 90       	lpm	r0, Z+
    3756:	08 94       	sec
    3758:	07 94       	ror	r0
    375a:	28 f4       	brcc	.+10     	; 0x3766 <__ftoa_engine+0x80>
    375c:	36 0f       	add	r19, r22
    375e:	e7 1e       	adc	r14, r23
    3760:	f8 1e       	adc	r15, r24
    3762:	49 1f       	adc	r20, r25
    3764:	51 1d       	adc	r21, r1
    3766:	66 0f       	add	r22, r22
    3768:	77 1f       	adc	r23, r23
    376a:	88 1f       	adc	r24, r24
    376c:	99 1f       	adc	r25, r25
    376e:	06 94       	lsr	r0
    3770:	a1 f7       	brne	.-24     	; 0x375a <__ftoa_engine+0x74>
    3772:	05 90       	lpm	r0, Z+
    3774:	07 94       	ror	r0
    3776:	28 f4       	brcc	.+10     	; 0x3782 <__ftoa_engine+0x9c>
    3778:	e7 0e       	add	r14, r23
    377a:	f8 1e       	adc	r15, r24
    377c:	49 1f       	adc	r20, r25
    377e:	56 1f       	adc	r21, r22
    3780:	c1 1d       	adc	r28, r1
    3782:	77 0f       	add	r23, r23
    3784:	88 1f       	adc	r24, r24
    3786:	99 1f       	adc	r25, r25
    3788:	66 1f       	adc	r22, r22
    378a:	06 94       	lsr	r0
    378c:	a1 f7       	brne	.-24     	; 0x3776 <__ftoa_engine+0x90>
    378e:	05 90       	lpm	r0, Z+
    3790:	07 94       	ror	r0
    3792:	28 f4       	brcc	.+10     	; 0x379e <__ftoa_engine+0xb8>
    3794:	f8 0e       	add	r15, r24
    3796:	49 1f       	adc	r20, r25
    3798:	56 1f       	adc	r21, r22
    379a:	c7 1f       	adc	r28, r23
    379c:	d1 1d       	adc	r29, r1
    379e:	88 0f       	add	r24, r24
    37a0:	99 1f       	adc	r25, r25
    37a2:	66 1f       	adc	r22, r22
    37a4:	77 1f       	adc	r23, r23
    37a6:	06 94       	lsr	r0
    37a8:	a1 f7       	brne	.-24     	; 0x3792 <__ftoa_engine+0xac>
    37aa:	05 90       	lpm	r0, Z+
    37ac:	07 94       	ror	r0
    37ae:	20 f4       	brcc	.+8      	; 0x37b8 <__ftoa_engine+0xd2>
    37b0:	49 0f       	add	r20, r25
    37b2:	56 1f       	adc	r21, r22
    37b4:	c7 1f       	adc	r28, r23
    37b6:	d8 1f       	adc	r29, r24
    37b8:	99 0f       	add	r25, r25
    37ba:	66 1f       	adc	r22, r22
    37bc:	77 1f       	adc	r23, r23
    37be:	88 1f       	adc	r24, r24
    37c0:	06 94       	lsr	r0
    37c2:	a9 f7       	brne	.-22     	; 0x37ae <__ftoa_engine+0xc8>
    37c4:	84 91       	lpm	r24, Z
    37c6:	10 95       	com	r17
    37c8:	17 70       	andi	r17, 0x07	; 7
    37ca:	41 f0       	breq	.+16     	; 0x37dc <__ftoa_engine+0xf6>
    37cc:	d6 95       	lsr	r29
    37ce:	c7 95       	ror	r28
    37d0:	57 95       	ror	r21
    37d2:	47 95       	ror	r20
    37d4:	f7 94       	ror	r15
    37d6:	e7 94       	ror	r14
    37d8:	1a 95       	dec	r17
    37da:	c1 f7       	brne	.-16     	; 0x37cc <__ftoa_engine+0xe6>
    37dc:	e2 e1       	ldi	r30, 0x12	; 18
    37de:	f1 e0       	ldi	r31, 0x01	; 1
    37e0:	68 94       	set
    37e2:	15 90       	lpm	r1, Z+
    37e4:	15 91       	lpm	r17, Z+
    37e6:	35 91       	lpm	r19, Z+
    37e8:	65 91       	lpm	r22, Z+
    37ea:	95 91       	lpm	r25, Z+
    37ec:	05 90       	lpm	r0, Z+
    37ee:	7f e2       	ldi	r23, 0x2F	; 47
    37f0:	73 95       	inc	r23
    37f2:	e1 18       	sub	r14, r1
    37f4:	f1 0a       	sbc	r15, r17
    37f6:	43 0b       	sbc	r20, r19
    37f8:	56 0b       	sbc	r21, r22
    37fa:	c9 0b       	sbc	r28, r25
    37fc:	d0 09       	sbc	r29, r0
    37fe:	c0 f7       	brcc	.-16     	; 0x37f0 <__ftoa_engine+0x10a>
    3800:	e1 0c       	add	r14, r1
    3802:	f1 1e       	adc	r15, r17
    3804:	43 1f       	adc	r20, r19
    3806:	56 1f       	adc	r21, r22
    3808:	c9 1f       	adc	r28, r25
    380a:	d0 1d       	adc	r29, r0
    380c:	7e f4       	brtc	.+30     	; 0x382c <__ftoa_engine+0x146>
    380e:	70 33       	cpi	r23, 0x30	; 48
    3810:	11 f4       	brne	.+4      	; 0x3816 <__ftoa_engine+0x130>
    3812:	8a 95       	dec	r24
    3814:	e6 cf       	rjmp	.-52     	; 0x37e2 <__ftoa_engine+0xfc>
    3816:	e8 94       	clt
    3818:	01 50       	subi	r16, 0x01	; 1
    381a:	30 f0       	brcs	.+12     	; 0x3828 <__ftoa_engine+0x142>
    381c:	08 0f       	add	r16, r24
    381e:	0a f4       	brpl	.+2      	; 0x3822 <__ftoa_engine+0x13c>
    3820:	00 27       	eor	r16, r16
    3822:	02 17       	cp	r16, r18
    3824:	08 f4       	brcc	.+2      	; 0x3828 <__ftoa_engine+0x142>
    3826:	20 2f       	mov	r18, r16
    3828:	23 95       	inc	r18
    382a:	02 2f       	mov	r16, r18
    382c:	7a 33       	cpi	r23, 0x3A	; 58
    382e:	28 f0       	brcs	.+10     	; 0x383a <__ftoa_engine+0x154>
    3830:	79 e3       	ldi	r23, 0x39	; 57
    3832:	7d 93       	st	X+, r23
    3834:	2a 95       	dec	r18
    3836:	e9 f7       	brne	.-6      	; 0x3832 <__ftoa_engine+0x14c>
    3838:	10 c0       	rjmp	.+32     	; 0x385a <__ftoa_engine+0x174>
    383a:	7d 93       	st	X+, r23
    383c:	2a 95       	dec	r18
    383e:	89 f6       	brne	.-94     	; 0x37e2 <__ftoa_engine+0xfc>
    3840:	06 94       	lsr	r0
    3842:	97 95       	ror	r25
    3844:	67 95       	ror	r22
    3846:	37 95       	ror	r19
    3848:	17 95       	ror	r17
    384a:	17 94       	ror	r1
    384c:	e1 18       	sub	r14, r1
    384e:	f1 0a       	sbc	r15, r17
    3850:	43 0b       	sbc	r20, r19
    3852:	56 0b       	sbc	r21, r22
    3854:	c9 0b       	sbc	r28, r25
    3856:	d0 09       	sbc	r29, r0
    3858:	98 f0       	brcs	.+38     	; 0x3880 <__ftoa_engine+0x19a>
    385a:	23 95       	inc	r18
    385c:	7e 91       	ld	r23, -X
    385e:	73 95       	inc	r23
    3860:	7a 33       	cpi	r23, 0x3A	; 58
    3862:	08 f0       	brcs	.+2      	; 0x3866 <__ftoa_engine+0x180>
    3864:	70 e3       	ldi	r23, 0x30	; 48
    3866:	7c 93       	st	X, r23
    3868:	20 13       	cpse	r18, r16
    386a:	b8 f7       	brcc	.-18     	; 0x385a <__ftoa_engine+0x174>
    386c:	7e 91       	ld	r23, -X
    386e:	70 61       	ori	r23, 0x10	; 16
    3870:	7d 93       	st	X+, r23
    3872:	30 f0       	brcs	.+12     	; 0x3880 <__ftoa_engine+0x19a>
    3874:	83 95       	inc	r24
    3876:	71 e3       	ldi	r23, 0x31	; 49
    3878:	7d 93       	st	X+, r23
    387a:	70 e3       	ldi	r23, 0x30	; 48
    387c:	2a 95       	dec	r18
    387e:	e1 f7       	brne	.-8      	; 0x3878 <__ftoa_engine+0x192>
    3880:	11 24       	eor	r1, r1
    3882:	ef 90       	pop	r14
    3884:	ff 90       	pop	r15
    3886:	0f 91       	pop	r16
    3888:	1f 91       	pop	r17
    388a:	cf 91       	pop	r28
    388c:	df 91       	pop	r29
    388e:	99 27       	eor	r25, r25
    3890:	87 fd       	sbrc	r24, 7
    3892:	90 95       	com	r25
    3894:	08 95       	ret

00003896 <strnlen_P>:
    3896:	fc 01       	movw	r30, r24
    3898:	05 90       	lpm	r0, Z+
    389a:	61 50       	subi	r22, 0x01	; 1
    389c:	70 40       	sbci	r23, 0x00	; 0
    389e:	01 10       	cpse	r0, r1
    38a0:	d8 f7       	brcc	.-10     	; 0x3898 <strnlen_P+0x2>
    38a2:	80 95       	com	r24
    38a4:	90 95       	com	r25
    38a6:	8e 0f       	add	r24, r30
    38a8:	9f 1f       	adc	r25, r31
    38aa:	08 95       	ret

000038ac <strcat>:
    38ac:	fb 01       	movw	r30, r22
    38ae:	dc 01       	movw	r26, r24
    38b0:	0d 90       	ld	r0, X+
    38b2:	00 20       	and	r0, r0
    38b4:	e9 f7       	brne	.-6      	; 0x38b0 <strcat+0x4>
    38b6:	11 97       	sbiw	r26, 0x01	; 1
    38b8:	01 90       	ld	r0, Z+
    38ba:	0d 92       	st	X+, r0
    38bc:	00 20       	and	r0, r0
    38be:	e1 f7       	brne	.-8      	; 0x38b8 <strcat+0xc>
    38c0:	08 95       	ret

000038c2 <strcpy>:
    38c2:	fb 01       	movw	r30, r22
    38c4:	dc 01       	movw	r26, r24
    38c6:	01 90       	ld	r0, Z+
    38c8:	0d 92       	st	X+, r0
    38ca:	00 20       	and	r0, r0
    38cc:	e1 f7       	brne	.-8      	; 0x38c6 <strcpy+0x4>
    38ce:	08 95       	ret

000038d0 <strnlen>:
    38d0:	fc 01       	movw	r30, r24
    38d2:	61 50       	subi	r22, 0x01	; 1
    38d4:	70 40       	sbci	r23, 0x00	; 0
    38d6:	01 90       	ld	r0, Z+
    38d8:	01 10       	cpse	r0, r1
    38da:	d8 f7       	brcc	.-10     	; 0x38d2 <strnlen+0x2>
    38dc:	80 95       	com	r24
    38de:	90 95       	com	r25
    38e0:	8e 0f       	add	r24, r30
    38e2:	9f 1f       	adc	r25, r31
    38e4:	08 95       	ret

000038e6 <fputc>:
    38e6:	0f 93       	push	r16
    38e8:	1f 93       	push	r17
    38ea:	cf 93       	push	r28
    38ec:	df 93       	push	r29
    38ee:	fb 01       	movw	r30, r22
    38f0:	23 81       	ldd	r18, Z+3	; 0x03
    38f2:	21 fd       	sbrc	r18, 1
    38f4:	03 c0       	rjmp	.+6      	; 0x38fc <fputc+0x16>
    38f6:	8f ef       	ldi	r24, 0xFF	; 255
    38f8:	9f ef       	ldi	r25, 0xFF	; 255
    38fa:	2c c0       	rjmp	.+88     	; 0x3954 <fputc+0x6e>
    38fc:	22 ff       	sbrs	r18, 2
    38fe:	16 c0       	rjmp	.+44     	; 0x392c <fputc+0x46>
    3900:	46 81       	ldd	r20, Z+6	; 0x06
    3902:	57 81       	ldd	r21, Z+7	; 0x07
    3904:	24 81       	ldd	r18, Z+4	; 0x04
    3906:	35 81       	ldd	r19, Z+5	; 0x05
    3908:	42 17       	cp	r20, r18
    390a:	53 07       	cpc	r21, r19
    390c:	44 f4       	brge	.+16     	; 0x391e <fputc+0x38>
    390e:	a0 81       	ld	r26, Z
    3910:	b1 81       	ldd	r27, Z+1	; 0x01
    3912:	9d 01       	movw	r18, r26
    3914:	2f 5f       	subi	r18, 0xFF	; 255
    3916:	3f 4f       	sbci	r19, 0xFF	; 255
    3918:	20 83       	st	Z, r18
    391a:	31 83       	std	Z+1, r19	; 0x01
    391c:	8c 93       	st	X, r24
    391e:	26 81       	ldd	r18, Z+6	; 0x06
    3920:	37 81       	ldd	r19, Z+7	; 0x07
    3922:	2f 5f       	subi	r18, 0xFF	; 255
    3924:	3f 4f       	sbci	r19, 0xFF	; 255
    3926:	26 83       	std	Z+6, r18	; 0x06
    3928:	37 83       	std	Z+7, r19	; 0x07
    392a:	14 c0       	rjmp	.+40     	; 0x3954 <fputc+0x6e>
    392c:	8b 01       	movw	r16, r22
    392e:	ec 01       	movw	r28, r24
    3930:	fb 01       	movw	r30, r22
    3932:	00 84       	ldd	r0, Z+8	; 0x08
    3934:	f1 85       	ldd	r31, Z+9	; 0x09
    3936:	e0 2d       	mov	r30, r0
    3938:	09 95       	icall
    393a:	89 2b       	or	r24, r25
    393c:	e1 f6       	brne	.-72     	; 0x38f6 <fputc+0x10>
    393e:	d8 01       	movw	r26, r16
    3940:	16 96       	adiw	r26, 0x06	; 6
    3942:	8d 91       	ld	r24, X+
    3944:	9c 91       	ld	r25, X
    3946:	17 97       	sbiw	r26, 0x07	; 7
    3948:	01 96       	adiw	r24, 0x01	; 1
    394a:	16 96       	adiw	r26, 0x06	; 6
    394c:	8d 93       	st	X+, r24
    394e:	9c 93       	st	X, r25
    3950:	17 97       	sbiw	r26, 0x07	; 7
    3952:	ce 01       	movw	r24, r28
    3954:	df 91       	pop	r29
    3956:	cf 91       	pop	r28
    3958:	1f 91       	pop	r17
    395a:	0f 91       	pop	r16
    395c:	08 95       	ret

0000395e <sprintf>:
    395e:	ae e0       	ldi	r26, 0x0E	; 14
    3960:	b0 e0       	ldi	r27, 0x00	; 0
    3962:	e5 eb       	ldi	r30, 0xB5	; 181
    3964:	fc e1       	ldi	r31, 0x1C	; 28
    3966:	0c 94 3c 1b 	jmp	0x3678	; 0x3678 <__prologue_saves__+0x1c>
    396a:	0d 89       	ldd	r16, Y+21	; 0x15
    396c:	1e 89       	ldd	r17, Y+22	; 0x16
    396e:	86 e0       	ldi	r24, 0x06	; 6
    3970:	8c 83       	std	Y+4, r24	; 0x04
    3972:	09 83       	std	Y+1, r16	; 0x01
    3974:	1a 83       	std	Y+2, r17	; 0x02
    3976:	8f ef       	ldi	r24, 0xFF	; 255
    3978:	9f e7       	ldi	r25, 0x7F	; 127
    397a:	8d 83       	std	Y+5, r24	; 0x05
    397c:	9e 83       	std	Y+6, r25	; 0x06
    397e:	ae 01       	movw	r20, r28
    3980:	47 5e       	subi	r20, 0xE7	; 231
    3982:	5f 4f       	sbci	r21, 0xFF	; 255
    3984:	6f 89       	ldd	r22, Y+23	; 0x17
    3986:	78 8d       	ldd	r23, Y+24	; 0x18
    3988:	ce 01       	movw	r24, r28
    398a:	01 96       	adiw	r24, 0x01	; 1
    398c:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <vfprintf>
    3990:	ef 81       	ldd	r30, Y+7	; 0x07
    3992:	f8 85       	ldd	r31, Y+8	; 0x08
    3994:	e0 0f       	add	r30, r16
    3996:	f1 1f       	adc	r31, r17
    3998:	10 82       	st	Z, r1
    399a:	2e 96       	adiw	r28, 0x0e	; 14
    399c:	e4 e0       	ldi	r30, 0x04	; 4
    399e:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <__epilogue_restores__+0x1c>

000039a2 <__ultoa_invert>:
    39a2:	fa 01       	movw	r30, r20
    39a4:	aa 27       	eor	r26, r26
    39a6:	28 30       	cpi	r18, 0x08	; 8
    39a8:	51 f1       	breq	.+84     	; 0x39fe <__ultoa_invert+0x5c>
    39aa:	20 31       	cpi	r18, 0x10	; 16
    39ac:	81 f1       	breq	.+96     	; 0x3a0e <__ultoa_invert+0x6c>
    39ae:	e8 94       	clt
    39b0:	6f 93       	push	r22
    39b2:	6e 7f       	andi	r22, 0xFE	; 254
    39b4:	6e 5f       	subi	r22, 0xFE	; 254
    39b6:	7f 4f       	sbci	r23, 0xFF	; 255
    39b8:	8f 4f       	sbci	r24, 0xFF	; 255
    39ba:	9f 4f       	sbci	r25, 0xFF	; 255
    39bc:	af 4f       	sbci	r26, 0xFF	; 255
    39be:	b1 e0       	ldi	r27, 0x01	; 1
    39c0:	3e d0       	rcall	.+124    	; 0x3a3e <__ultoa_invert+0x9c>
    39c2:	b4 e0       	ldi	r27, 0x04	; 4
    39c4:	3c d0       	rcall	.+120    	; 0x3a3e <__ultoa_invert+0x9c>
    39c6:	67 0f       	add	r22, r23
    39c8:	78 1f       	adc	r23, r24
    39ca:	89 1f       	adc	r24, r25
    39cc:	9a 1f       	adc	r25, r26
    39ce:	a1 1d       	adc	r26, r1
    39d0:	68 0f       	add	r22, r24
    39d2:	79 1f       	adc	r23, r25
    39d4:	8a 1f       	adc	r24, r26
    39d6:	91 1d       	adc	r25, r1
    39d8:	a1 1d       	adc	r26, r1
    39da:	6a 0f       	add	r22, r26
    39dc:	71 1d       	adc	r23, r1
    39de:	81 1d       	adc	r24, r1
    39e0:	91 1d       	adc	r25, r1
    39e2:	a1 1d       	adc	r26, r1
    39e4:	20 d0       	rcall	.+64     	; 0x3a26 <__ultoa_invert+0x84>
    39e6:	09 f4       	brne	.+2      	; 0x39ea <__ultoa_invert+0x48>
    39e8:	68 94       	set
    39ea:	3f 91       	pop	r19
    39ec:	2a e0       	ldi	r18, 0x0A	; 10
    39ee:	26 9f       	mul	r18, r22
    39f0:	11 24       	eor	r1, r1
    39f2:	30 19       	sub	r19, r0
    39f4:	30 5d       	subi	r19, 0xD0	; 208
    39f6:	31 93       	st	Z+, r19
    39f8:	de f6       	brtc	.-74     	; 0x39b0 <__ultoa_invert+0xe>
    39fa:	cf 01       	movw	r24, r30
    39fc:	08 95       	ret
    39fe:	46 2f       	mov	r20, r22
    3a00:	47 70       	andi	r20, 0x07	; 7
    3a02:	40 5d       	subi	r20, 0xD0	; 208
    3a04:	41 93       	st	Z+, r20
    3a06:	b3 e0       	ldi	r27, 0x03	; 3
    3a08:	0f d0       	rcall	.+30     	; 0x3a28 <__ultoa_invert+0x86>
    3a0a:	c9 f7       	brne	.-14     	; 0x39fe <__ultoa_invert+0x5c>
    3a0c:	f6 cf       	rjmp	.-20     	; 0x39fa <__ultoa_invert+0x58>
    3a0e:	46 2f       	mov	r20, r22
    3a10:	4f 70       	andi	r20, 0x0F	; 15
    3a12:	40 5d       	subi	r20, 0xD0	; 208
    3a14:	4a 33       	cpi	r20, 0x3A	; 58
    3a16:	18 f0       	brcs	.+6      	; 0x3a1e <__ultoa_invert+0x7c>
    3a18:	49 5d       	subi	r20, 0xD9	; 217
    3a1a:	31 fd       	sbrc	r19, 1
    3a1c:	40 52       	subi	r20, 0x20	; 32
    3a1e:	41 93       	st	Z+, r20
    3a20:	02 d0       	rcall	.+4      	; 0x3a26 <__ultoa_invert+0x84>
    3a22:	a9 f7       	brne	.-22     	; 0x3a0e <__ultoa_invert+0x6c>
    3a24:	ea cf       	rjmp	.-44     	; 0x39fa <__ultoa_invert+0x58>
    3a26:	b4 e0       	ldi	r27, 0x04	; 4
    3a28:	a6 95       	lsr	r26
    3a2a:	97 95       	ror	r25
    3a2c:	87 95       	ror	r24
    3a2e:	77 95       	ror	r23
    3a30:	67 95       	ror	r22
    3a32:	ba 95       	dec	r27
    3a34:	c9 f7       	brne	.-14     	; 0x3a28 <__ultoa_invert+0x86>
    3a36:	00 97       	sbiw	r24, 0x00	; 0
    3a38:	61 05       	cpc	r22, r1
    3a3a:	71 05       	cpc	r23, r1
    3a3c:	08 95       	ret
    3a3e:	9b 01       	movw	r18, r22
    3a40:	ac 01       	movw	r20, r24
    3a42:	0a 2e       	mov	r0, r26
    3a44:	06 94       	lsr	r0
    3a46:	57 95       	ror	r21
    3a48:	47 95       	ror	r20
    3a4a:	37 95       	ror	r19
    3a4c:	27 95       	ror	r18
    3a4e:	ba 95       	dec	r27
    3a50:	c9 f7       	brne	.-14     	; 0x3a44 <__ultoa_invert+0xa2>
    3a52:	62 0f       	add	r22, r18
    3a54:	73 1f       	adc	r23, r19
    3a56:	84 1f       	adc	r24, r20
    3a58:	95 1f       	adc	r25, r21
    3a5a:	a0 1d       	adc	r26, r0
    3a5c:	08 95       	ret

00003a5e <eeprom_read_block>:
    3a5e:	60 50       	subi	r22, 0x00	; 0
    3a60:	7c 4e       	sbci	r23, 0xEC	; 236
    3a62:	0c 94 6a 1d 	jmp	0x3ad4	; 0x3ad4 <memcpy>

00003a66 <eeprom_update_block>:
    3a66:	dc 01       	movw	r26, r24
    3a68:	a4 0f       	add	r26, r20
    3a6a:	b5 1f       	adc	r27, r21
    3a6c:	41 50       	subi	r20, 0x01	; 1
    3a6e:	50 40       	sbci	r21, 0x00	; 0
    3a70:	48 f0       	brcs	.+18     	; 0x3a84 <eeprom_update_block+0x1e>
    3a72:	cb 01       	movw	r24, r22
    3a74:	84 0f       	add	r24, r20
    3a76:	95 1f       	adc	r25, r21
    3a78:	2e 91       	ld	r18, -X
    3a7a:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <eeprom_update_r18>
    3a7e:	41 50       	subi	r20, 0x01	; 1
    3a80:	50 40       	sbci	r21, 0x00	; 0
    3a82:	d0 f7       	brcc	.-12     	; 0x3a78 <eeprom_update_block+0x12>
    3a84:	08 95       	ret

00003a86 <eeprom_update_byte>:
    3a86:	26 2f       	mov	r18, r22

00003a88 <eeprom_update_r18>:
    3a88:	0e 94 66 1d 	call	0x3acc	; 0x3acc <eeprom_mapen>
    3a8c:	00 80       	ld	r0, Z
    3a8e:	02 16       	cp	r0, r18
    3a90:	19 f0       	breq	.+6      	; 0x3a98 <eeprom_update_r18+0x10>
    3a92:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <eeprom_write_r18>
    3a96:	01 97       	sbiw	r24, 0x01	; 1
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	08 95       	ret

00003a9c <eeprom_write_byte>:
    3a9c:	26 2f       	mov	r18, r22

00003a9e <eeprom_write_r18>:
    3a9e:	af 93       	push	r26
    3aa0:	bf 93       	push	r27
    3aa2:	e0 e0       	ldi	r30, 0x00	; 0
    3aa4:	f0 e1       	ldi	r31, 0x10	; 16
    3aa6:	32 81       	ldd	r19, Z+2	; 0x02
    3aa8:	31 fd       	sbrc	r19, 1
    3aaa:	fd cf       	rjmp	.-6      	; 0x3aa6 <eeprom_write_r18+0x8>
    3aac:	dc 01       	movw	r26, r24
    3aae:	a0 50       	subi	r26, 0x00	; 0
    3ab0:	bc 4e       	sbci	r27, 0xEC	; 236
    3ab2:	2c 93       	st	X, r18
    3ab4:	2d e9       	ldi	r18, 0x9D	; 157
    3ab6:	24 bf       	out	0x34, r18	; 52
    3ab8:	23 e0       	ldi	r18, 0x03	; 3
    3aba:	20 83       	st	Z, r18
    3abc:	01 96       	adiw	r24, 0x01	; 1
    3abe:	bf 91       	pop	r27
    3ac0:	af 91       	pop	r26
    3ac2:	08 95       	ret

00003ac4 <eeprom_read_byte>:
    3ac4:	03 d0       	rcall	.+6      	; 0x3acc <eeprom_mapen>
    3ac6:	80 81       	ld	r24, Z
    3ac8:	99 27       	eor	r25, r25
    3aca:	08 95       	ret

00003acc <eeprom_mapen>:
    3acc:	fc 01       	movw	r30, r24
    3ace:	e0 50       	subi	r30, 0x00	; 0
    3ad0:	fc 4e       	sbci	r31, 0xEC	; 236
    3ad2:	08 95       	ret

00003ad4 <memcpy>:
    3ad4:	fb 01       	movw	r30, r22
    3ad6:	dc 01       	movw	r26, r24
    3ad8:	02 c0       	rjmp	.+4      	; 0x3ade <memcpy+0xa>
    3ada:	01 90       	ld	r0, Z+
    3adc:	0d 92       	st	X+, r0
    3ade:	41 50       	subi	r20, 0x01	; 1
    3ae0:	50 40       	sbci	r21, 0x00	; 0
    3ae2:	d8 f7       	brcc	.-10     	; 0x3ada <memcpy+0x6>
    3ae4:	08 95       	ret

00003ae6 <_exit>:
    3ae6:	f8 94       	cli

00003ae8 <__stop_program>:
    3ae8:	ff cf       	rjmp	.-2      	; 0x3ae8 <__stop_program>
