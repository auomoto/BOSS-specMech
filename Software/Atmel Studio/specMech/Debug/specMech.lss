
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00007d79  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000070b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c35  0000b0b0  000070b0  00007144  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000a5b  00802800  00802800  00007d79  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00007d79  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007dd8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000680  00000000  00000000  00007e18  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000c542  00000000  00000000  00008498  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000456c  00000000  00000000  000149da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000050b9  00000000  00000000  00018f46  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000014a4  00000000  00000000  0001e000  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000027d6  00000000  00000000  0001f4a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005f1c  00000000  00000000  00021c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000430  00000000  00000000  00027b96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 01 	jmp	0x268	; 0x268 <__ctors_end>
       4:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
       8:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
       c:	0c 94 c4 2b 	jmp	0x5788	; 0x5788 <__vector_3>
      10:	0c 94 e6 2b 	jmp	0x57cc	; 0x57cc <__vector_4>
      14:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      18:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      1c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      20:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      24:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      28:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      2c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      30:	0c 94 24 2c 	jmp	0x5848	; 0x5848 <__vector_12>
      34:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      38:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      3c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      40:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      44:	0c 94 61 2e 	jmp	0x5cc2	; 0x5cc2 <__vector_17>
      48:	0c 94 af 2e 	jmp	0x5d5e	; 0x5d5e <__vector_18>
      4c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      50:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__vector_20>
      54:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      58:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      5c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      60:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      64:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      68:	0c 94 09 2e 	jmp	0x5c12	; 0x5c12 <__vector_26>
      6c:	0c 94 29 2e 	jmp	0x5c52	; 0x5c52 <__vector_27>
      70:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      74:	0c 94 54 2f 	jmp	0x5ea8	; 0x5ea8 <__vector_29>
      78:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      7c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      80:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      84:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      88:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      8c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      90:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      94:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <__vector_37>
      98:	0c 94 20 2f 	jmp	0x5e40	; 0x5e40 <__vector_38>
      9c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      a0:	b2 04       	cpc	r11, r2
      a2:	dd 04       	cpc	r13, r13
      a4:	dd 04       	cpc	r13, r13
      a6:	dd 04       	cpc	r13, r13
      a8:	dd 04       	cpc	r13, r13
      aa:	dd 04       	cpc	r13, r13
      ac:	dd 04       	cpc	r13, r13
      ae:	dd 04       	cpc	r13, r13
      b0:	dd 04       	cpc	r13, r13
      b2:	b5 04       	cpc	r11, r5
      b4:	dd 04       	cpc	r13, r13
      b6:	dd 04       	cpc	r13, r13
      b8:	dd 04       	cpc	r13, r13
      ba:	dd 04       	cpc	r13, r13
      bc:	dd 04       	cpc	r13, r13
      be:	dd 04       	cpc	r13, r13
      c0:	dd 04       	cpc	r13, r13
      c2:	da 04       	cpc	r13, r10
      c4:	dd 04       	cpc	r13, r13
      c6:	dd 04       	cpc	r13, r13
      c8:	dd 04       	cpc	r13, r13
      ca:	dd 04       	cpc	r13, r13
      cc:	dd 04       	cpc	r13, r13
      ce:	dd 04       	cpc	r13, r13
      d0:	dd 04       	cpc	r13, r13
      d2:	dd 04       	cpc	r13, r13
      d4:	9d 04       	cpc	r9, r13
      d6:	dd 04       	cpc	r13, r13
      d8:	dd 04       	cpc	r13, r13
      da:	dd 04       	cpc	r13, r13
      dc:	dd 04       	cpc	r13, r13
      de:	dd 04       	cpc	r13, r13
      e0:	dd 04       	cpc	r13, r13
      e2:	dd 04       	cpc	r13, r13
      e4:	dd 04       	cpc	r13, r13
      e6:	dd 04       	cpc	r13, r13
      e8:	a3 04       	cpc	r10, r3
      ea:	dd 04       	cpc	r13, r13
      ec:	a0 04       	cpc	r10, r0
      ee:	dd 04       	cpc	r13, r13
      f0:	dd 04       	cpc	r13, r13
      f2:	a6 04       	cpc	r10, r6
      f4:	a9 04       	cpc	r10, r9
      f6:	ac 04       	cpc	r10, r12
      f8:	af 04       	cpc	r10, r15
      fa:	55 11       	cpse	r21, r5
      fc:	55 11       	cpse	r21, r5
      fe:	55 11       	cpse	r21, r5
     100:	82 18       	sub	r8, r2
     102:	82 18       	sub	r8, r2
     104:	82 18       	sub	r8, r2
     106:	82 18       	sub	r8, r2
     108:	82 18       	sub	r8, r2
     10a:	82 18       	sub	r8, r2
     10c:	82 18       	sub	r8, r2
     10e:	82 18       	sub	r8, r2
     110:	82 18       	sub	r8, r2
     112:	82 18       	sub	r8, r2
     114:	82 18       	sub	r8, r2
     116:	82 18       	sub	r8, r2
     118:	82 18       	sub	r8, r2
     11a:	82 18       	sub	r8, r2
     11c:	82 18       	sub	r8, r2
     11e:	82 18       	sub	r8, r2
     120:	82 18       	sub	r8, r2
     122:	82 18       	sub	r8, r2
     124:	44 18       	sub	r4, r4
     126:	82 18       	sub	r8, r2
     128:	82 18       	sub	r8, r2
     12a:	82 18       	sub	r8, r2
     12c:	82 18       	sub	r8, r2
     12e:	82 18       	sub	r8, r2
     130:	82 18       	sub	r8, r2
     132:	82 18       	sub	r8, r2
     134:	82 18       	sub	r8, r2
     136:	82 18       	sub	r8, r2
     138:	82 18       	sub	r8, r2
     13a:	4b 13       	cpse	r20, r27
     13c:	4b 13       	cpse	r20, r27
     13e:	4b 13       	cpse	r20, r27
     140:	00 15       	cp	r16, r0
     142:	07 15       	cp	r16, r7
     144:	82 18       	sub	r8, r2
     146:	82 18       	sub	r8, r2
     148:	82 18       	sub	r8, r2
     14a:	82 18       	sub	r8, r2
     14c:	82 18       	sub	r8, r2
     14e:	82 18       	sub	r8, r2
     150:	82 18       	sub	r8, r2
     152:	82 18       	sub	r8, r2
     154:	82 18       	sub	r8, r2
     156:	44 16       	cp	r4, r20
     158:	1a 17       	cp	r17, r26
     15a:	82 18       	sub	r8, r2
     15c:	82 18       	sub	r8, r2
     15e:	82 18       	sub	r8, r2
     160:	a3 17       	cp	r26, r19
     162:	82 18       	sub	r8, r2
     164:	eb 17       	cp	r30, r27

00000166 <__trampolines_end>:
     166:	6e 61       	ori	r22, 0x1E	; 30
     168:	6e 00       	.word	0x006e	; ????

0000016a <__c.2332>:
     16a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     17a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     18a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     19a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1aa:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ba:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1ca:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1da:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1ea:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1fa:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     20a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     21a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     22a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     23a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     24a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     25a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000268 <__ctors_end>:
     268:	11 24       	eor	r1, r1
     26a:	1f be       	out	0x3f, r1	; 63
     26c:	cf ef       	ldi	r28, 0xFF	; 255
     26e:	cd bf       	out	0x3d, r28	; 61
     270:	df e3       	ldi	r29, 0x3F	; 63
     272:	de bf       	out	0x3e, r29	; 62

00000274 <__do_clear_bss>:
     274:	22 e3       	ldi	r18, 0x32	; 50
     276:	a0 e0       	ldi	r26, 0x00	; 0
     278:	b8 e2       	ldi	r27, 0x28	; 40
     27a:	01 c0       	rjmp	.+2      	; 0x27e <.do_clear_bss_start>

0000027c <.do_clear_bss_loop>:
     27c:	1d 92       	st	X+, r1

0000027e <.do_clear_bss_start>:
     27e:	ab 35       	cpi	r26, 0x5B	; 91
     280:	b2 07       	cpc	r27, r18
     282:	e1 f7       	brne	.-8      	; 0x27c <.do_clear_bss_loop>
     284:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <main>
     288:	0c 94 56 38 	jmp	0x70ac	; 0x70ac <_exit>

0000028c <__bad_interrupt>:
     28c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000290 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
uint8_t read_AD590(uint8_t sensor, float *temperature)
{
     290:	8f 92       	push	r8
     292:	9f 92       	push	r9
     294:	af 92       	push	r10
     296:	bf 92       	push	r11
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <read_AD590+0x16>
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <read_AD590+0x18>
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	7b 01       	movw	r14, r22

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     2ae:	81 30       	cpi	r24, 0x01	; 1
     2b0:	c9 f0       	breq	.+50     	; 0x2e4 <read_AD590+0x54>
     2b2:	18 f0       	brcs	.+6      	; 0x2ba <read_AD590+0x2a>
     2b4:	82 30       	cpi	r24, 0x02	; 2
     2b6:	61 f0       	breq	.+24     	; 0x2d0 <read_AD590+0x40>
     2b8:	10 c0       	rjmp	.+32     	; 0x2da <read_AD590+0x4a>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     2ba:	0f 2e       	mov	r0, r31
     2bc:	f3 e3       	ldi	r31, 0x33	; 51
     2be:	8f 2e       	mov	r8, r31
     2c0:	98 2c       	mov	r9, r8
     2c2:	f3 ef       	ldi	r31, 0xF3	; 243
     2c4:	af 2e       	mov	r10, r31
     2c6:	f0 e4       	ldi	r31, 0x40	; 64
     2c8:	bf 2e       	mov	r11, r31
     2ca:	f0 2d       	mov	r31, r0
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     2cc:	11 e0       	ldi	r17, 0x01	; 1
     2ce:	0e c0       	rjmp	.+28     	; 0x2ec <read_AD590+0x5c>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     2d0:	81 2c       	mov	r8, r1
     2d2:	91 2c       	mov	r9, r1
     2d4:	54 01       	movw	r10, r8
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     2d6:	10 e1       	ldi	r17, 0x10	; 16
			offset = 0.0;
			break;
     2d8:	09 c0       	rjmp	.+18     	; 0x2ec <read_AD590+0x5c>
{

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
     2da:	81 2c       	mov	r8, r1
     2dc:	91 2c       	mov	r9, r1
     2de:	54 01       	movw	r10, r8
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2e0:	10 e0       	ldi	r17, 0x00	; 0
			break;
     2e2:	04 c0       	rjmp	.+8      	; 0x2ec <read_AD590+0x5c>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2e4:	81 2c       	mov	r8, r1
     2e6:	91 2c       	mov	r9, r1
     2e8:	54 01       	movw	r10, r8
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2ea:	14 e0       	ldi	r17, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	66 e0       	ldi	r22, 0x06	; 6
     2f0:	87 e2       	ldi	r24, 0x27	; 39
     2f2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2f6:	41 2f       	mov	r20, r17
     2f8:	40 95       	com	r20
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	87 e2       	ldi	r24, 0x27	; 39
     2fe:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     302:	41 2f       	mov	r20, r17
     304:	6a e0       	ldi	r22, 0x0A	; 10
     306:	87 e2       	ldi	r24, 0x27	; 39
     308:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30c:	82 e4       	ldi	r24, 0x42	; 66
     30e:	8a 95       	dec	r24
     310:	f1 f7       	brne	.-4      	; 0x30e <read_AD590+0x7e>
     312:	00 c0       	rjmp	.+0      	; 0x314 <read_AD590+0x84>
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	if (read_ADS1115(ADC_TE, PGA0512, AIN3, DR128, &voltage) == ERROR) {
     314:	8e 01       	movw	r16, r28
     316:	0f 5f       	subi	r16, 0xFF	; 255
     318:	1f 4f       	sbci	r17, 0xFF	; 255
     31a:	20 e8       	ldi	r18, 0x80	; 128
     31c:	40 e7       	ldi	r20, 0x70	; 112
     31e:	68 e0       	ldi	r22, 0x08	; 8
     320:	88 e4       	ldi	r24, 0x48	; 72
     322:	0e 94 c9 01 	call	0x392	; 0x392 <read_ADS1115>
     326:	83 36       	cpi	r24, 0x63	; 99
     328:	51 f4       	brne	.+20     	; 0x33e <read_AD590+0xae>
		*temperature = BADFLOAT;
     32a:	40 e0       	ldi	r20, 0x00	; 0
     32c:	50 e8       	ldi	r21, 0x80	; 128
     32e:	66 e2       	ldi	r22, 0x26	; 38
     330:	74 ec       	ldi	r23, 0xC4	; 196
     332:	f7 01       	movw	r30, r14
     334:	40 83       	st	Z, r20
     336:	51 83       	std	Z+1, r21	; 0x01
     338:	62 83       	std	Z+2, r22	; 0x02
     33a:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
     33c:	1c c0       	rjmp	.+56     	; 0x376 <read_AD590+0xe6>
	}
	*temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	4a e7       	ldi	r20, 0x7A	; 122
     344:	54 e4       	ldi	r21, 0x44	; 68
     346:	69 81       	ldd	r22, Y+1	; 0x01
     348:	7a 81       	ldd	r23, Y+2	; 0x02
     34a:	8b 81       	ldd	r24, Y+3	; 0x03
     34c:	9c 81       	ldd	r25, Y+4	; 0x04
     34e:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
     352:	23 e3       	ldi	r18, 0x33	; 51
     354:	33 e9       	ldi	r19, 0x93	; 147
     356:	48 e8       	ldi	r20, 0x88	; 136
     358:	53 e4       	ldi	r21, 0x43	; 67
     35a:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <__subsf3>
     35e:	9b 01       	movw	r18, r22
     360:	ac 01       	movw	r20, r24
     362:	c5 01       	movw	r24, r10
     364:	b4 01       	movw	r22, r8
     366:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__addsf3>
     36a:	f7 01       	movw	r30, r14
     36c:	60 83       	st	Z, r22
     36e:	71 83       	std	Z+1, r23	; 0x01
     370:	82 83       	std	Z+2, r24	; 0x02
     372:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     374:	80 e0       	ldi	r24, 0x00	; 0

}
     376:	24 96       	adiw	r28, 0x04	; 4
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	de bf       	out	0x3e, r29	; 62
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	ff 90       	pop	r15
     386:	ef 90       	pop	r14
     388:	bf 90       	pop	r11
     38a:	af 90       	pop	r10
     38c:	9f 90       	pop	r9
     38e:	8f 90       	pop	r8
     390:	08 95       	ret

00000392 <read_ADS1115>:
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
uint8_t read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins,
	uint8_t datarate, float *voltage)
{
     392:	8f 92       	push	r8
     394:	9f 92       	push	r9
     396:	af 92       	push	r10
     398:	bf 92       	push	r11
     39a:	cf 92       	push	r12
     39c:	df 92       	push	r13
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	f8 2e       	mov	r15, r24
     3ac:	e6 2e       	mov	r14, r22
     3ae:	68 01       	movw	r12, r16
	float scale;
	uint8_t confighi, configlo, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     3b0:	46 2b       	or	r20, r22
     3b2:	c4 2f       	mov	r28, r20
     3b4:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     3b6:	d2 2f       	mov	r29, r18
     3b8:	d3 60       	ori	r29, 0x03	; 3

	*voltage = BADFLOAT;
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e8       	ldi	r25, 0x80	; 128
     3be:	a6 e2       	ldi	r26, 0x26	; 38
     3c0:	b4 ec       	ldi	r27, 0xC4	; 196
     3c2:	f8 01       	movw	r30, r16
     3c4:	80 83       	st	Z, r24
     3c6:	91 83       	std	Z+1, r25	; 0x01
     3c8:	a2 83       	std	Z+2, r26	; 0x02
     3ca:	b3 83       	std	Z+3, r27	; 0x03
	if (start_TWI(addr, TWIWRITE == ERROR)) {		// TWI start condition
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	8f 2d       	mov	r24, r15
     3d0:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
     3d4:	08 2f       	mov	r16, r24
     3d6:	88 23       	and	r24, r24
     3d8:	21 f0       	breq	.+8      	; 0x3e2 <read_ADS1115+0x50>
		stop_TWI();
     3da:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(ERROR);
     3de:	13 e6       	ldi	r17, 0x63	; 99
     3e0:	b5 c0       	rjmp	.+362    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	if ((write_TWI(ADS1115CONFIG) == ERROR)) {		// Write the CONFIG register
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
     3e8:	18 2f       	mov	r17, r24
     3ea:	83 36       	cpi	r24, 0x63	; 99
     3ec:	19 f4       	brne	.+6      	; 0x3f4 <read_ADS1115+0x62>
		stop_TWI();
     3ee:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(ERROR);
     3f2:	ac c0       	rjmp	.+344    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	if ((write_TWI(confighi) == ERROR)) {			// Write high byte
     3f4:	8c 2f       	mov	r24, r28
     3f6:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
     3fa:	18 2f       	mov	r17, r24
     3fc:	83 36       	cpi	r24, 0x63	; 99
     3fe:	19 f4       	brne	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		stop_TWI();
     400:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(ERROR);
     404:	a3 c0       	rjmp	.+326    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	if ((write_TWI(configlo) == ERROR)) {			// Write low byte
     406:	8d 2f       	mov	r24, r29
     408:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
     40c:	18 2f       	mov	r17, r24
     40e:	83 36       	cpi	r24, 0x63	; 99
     410:	19 f4       	brne	.+6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		stop_TWI();
     412:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(ERROR);
     416:	9a c0       	rjmp	.+308    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	stop_TWI();
     418:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
     41c:	f3 e5       	ldi	r31, 0x53	; 83
     41e:	fa 95       	dec	r31
     420:	f1 f7       	brne	.-4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     422:	00 00       	nop

	_delay_us(25);									// Power-up time

	converting = YES;
     424:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     426:	09 c0       	rjmp	.+18     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		start_TWI(addr, TWIREAD);
     428:	61 e0       	ldi	r22, 0x01	; 1
     42a:	8f 2d       	mov	r24, r15
     42c:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
		flag = readlast_TWI();
     430:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <readlast_TWI>
		if (flag & 0b10000000) {
     434:	88 23       	and	r24, r24
     436:	0c f4       	brge	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			converting = NO;
     438:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     43a:	c1 11       	cpse	r28, r1
     43c:	f5 cf       	rjmp	.-22     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		flag = readlast_TWI();
		if (flag & 0b10000000) {
			converting = NO;
		}
	}
	stop_TWI();
     43e:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>

	start_TWI(addr, TWIWRITE);
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	8f 2d       	mov	r24, r15
     446:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	8f 2d       	mov	r24, r15
     454:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
	highbyte = read_TWI();
     458:	0e 94 3e 2c 	call	0x587c	; 0x587c <read_TWI>
     45c:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     45e:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <readlast_TWI>
     462:	d8 2f       	mov	r29, r24
	stop_TWI();
     464:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>

	value = highbyte;
     468:	6c 2f       	mov	r22, r28
     46a:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     46c:	76 2f       	mov	r23, r22
     46e:	66 27       	eor	r22, r22
	value |= lowbyte;
     470:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	e8 16       	cp	r14, r24
     476:	49 f1       	breq	.+82     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     478:	8e 15       	cp	r24, r14
     47a:	30 f0       	brcs	.+12     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     47c:	ee 20       	and	r14, r14
     47e:	d9 f1       	breq	.+118    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     480:	e2 e0       	ldi	r30, 0x02	; 2
     482:	ee 16       	cp	r14, r30
     484:	69 f1       	breq	.+90     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     486:	42 c0       	rjmp	.+132    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     488:	f8 e0       	ldi	r31, 0x08	; 8
     48a:	ef 16       	cp	r14, r31
     48c:	09 f4       	brne	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48e:	42 c0       	rjmp	.+132    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     490:	8a e0       	ldi	r24, 0x0A	; 10
     492:	e8 16       	cp	r14, r24
     494:	21 f0       	breq	.+8      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     496:	e6 e0       	ldi	r30, 0x06	; 6
     498:	ee 12       	cpse	r14, r30
     49a:	38 c0       	rjmp	.+112    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		case PGA0256:
			scale = SCA0256;
     49e:	0f 2e       	mov	r0, r31
     4a0:	f4 e7       	ldi	r31, 0x74	; 116
     4a2:	8f 2e       	mov	r8, r31
     4a4:	f3 e1       	ldi	r31, 0x13	; 19
     4a6:	9f 2e       	mov	r9, r31
     4a8:	f3 e0       	ldi	r31, 0x03	; 3
     4aa:	af 2e       	mov	r10, r31
     4ac:	f7 e3       	ldi	r31, 0x37	; 55
     4ae:	bf 2e       	mov	r11, r31
     4b0:	f0 2d       	mov	r31, r0
     4b2:	3a c0       	rjmp	.+116    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     4b4:	0f 2e       	mov	r0, r31
     4b6:	f4 e7       	ldi	r31, 0x74	; 116
     4b8:	8f 2e       	mov	r8, r31
     4ba:	f3 e1       	ldi	r31, 0x13	; 19
     4bc:	9f 2e       	mov	r9, r31
     4be:	f3 e0       	ldi	r31, 0x03	; 3
     4c0:	af 2e       	mov	r10, r31
     4c2:	f8 e3       	ldi	r31, 0x38	; 56
     4c4:	bf 2e       	mov	r11, r31
     4c6:	f0 2d       	mov	r31, r0
			break;
     4c8:	2f c0       	rjmp	.+94     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		case PGA2048:
			scale = SCA2048;
     4ca:	0f 2e       	mov	r0, r31
     4cc:	f2 e1       	ldi	r31, 0x12	; 18
     4ce:	8f 2e       	mov	r8, r31
     4d0:	f3 e1       	ldi	r31, 0x13	; 19
     4d2:	9f 2e       	mov	r9, r31
     4d4:	f3 e8       	ldi	r31, 0x83	; 131
     4d6:	af 2e       	mov	r10, r31
     4d8:	f8 e3       	ldi	r31, 0x38	; 56
     4da:	bf 2e       	mov	r11, r31
     4dc:	f0 2d       	mov	r31, r0
			break;
     4de:	24 c0       	rjmp	.+72     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		case PGA4096:
			scale = SCA4096;
     4e0:	0f 2e       	mov	r0, r31
     4e2:	f4 e7       	ldi	r31, 0x74	; 116
     4e4:	8f 2e       	mov	r8, r31
     4e6:	f3 e1       	ldi	r31, 0x13	; 19
     4e8:	9f 2e       	mov	r9, r31
     4ea:	f3 e0       	ldi	r31, 0x03	; 3
     4ec:	af 2e       	mov	r10, r31
     4ee:	f9 e3       	ldi	r31, 0x39	; 57
     4f0:	bf 2e       	mov	r11, r31
     4f2:	f0 2d       	mov	r31, r0
			break;
     4f4:	19 c0       	rjmp	.+50     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		case PGA6144:
			scale = SCA6144;
     4f6:	0f 2e       	mov	r0, r31
     4f8:	fe e2       	ldi	r31, 0x2E	; 46
     4fa:	8f 2e       	mov	r8, r31
     4fc:	fd e9       	ldi	r31, 0x9D	; 157
     4fe:	9f 2e       	mov	r9, r31
     500:	f4 e4       	ldi	r31, 0x44	; 68
     502:	af 2e       	mov	r10, r31
     504:	f9 e3       	ldi	r31, 0x39	; 57
     506:	bf 2e       	mov	r11, r31
     508:	f0 2d       	mov	r31, r0
			break;
     50a:	0e c0       	rjmp	.+28     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		default:
			scale = 0.0;
     50c:	81 2c       	mov	r8, r1
     50e:	91 2c       	mov	r9, r1
     510:	54 01       	movw	r10, r8
			break;
     512:	0a c0       	rjmp	.+20     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     514:	0f 2e       	mov	r0, r31
     516:	f1 e7       	ldi	r31, 0x71	; 113
     518:	8f 2e       	mov	r8, r31
     51a:	f3 e1       	ldi	r31, 0x13	; 19
     51c:	9f 2e       	mov	r9, r31
     51e:	f3 e8       	ldi	r31, 0x83	; 131
     520:	af 2e       	mov	r10, r31
     522:	f7 e3       	ldi	r31, 0x37	; 55
     524:	bf 2e       	mov	r11, r31
     526:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	*voltage = scale * (float) value;
     528:	07 2e       	mov	r0, r23
     52a:	00 0c       	add	r0, r0
     52c:	88 0b       	sbc	r24, r24
     52e:	99 0b       	sbc	r25, r25
     530:	0e 94 9b 30 	call	0x6136	; 0x6136 <__floatsisf>
     534:	9b 01       	movw	r18, r22
     536:	ac 01       	movw	r20, r24
     538:	c5 01       	movw	r24, r10
     53a:	b4 01       	movw	r22, r8
     53c:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
     540:	f6 01       	movw	r30, r12
     542:	60 83       	st	Z, r22
     544:	71 83       	std	Z+1, r23	; 0x01
     546:	82 83       	std	Z+2, r24	; 0x02
     548:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     54a:	10 2f       	mov	r17, r16

}
     54c:	81 2f       	mov	r24, r17
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	df 90       	pop	r13
     55c:	cf 90       	pop	r12
     55e:	bf 90       	pop	r11
     560:	af 90       	pop	r10
     562:	9f 90       	pop	r9
     564:	8f 90       	pop	r8
     566:	08 95       	ret

00000568 <get_cmdline>:
	if ((d >= '0') && (d <= '9')) {
		return(ERROR);
	}
	return(NOERROR);

}
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	9c 01       	movw	r18, r24
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	1c c0       	rjmp	.+56     	; 0x5aa <get_cmdline+0x42>
     572:	c6 e4       	ldi	r28, 0x46	; 70
     574:	de e2       	ldi	r29, 0x2E	; 46
     576:	e8 81       	ld	r30, Y
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	e9 5b       	subi	r30, 0xB9	; 185
     57c:	f2 4d       	sbci	r31, 0xD2	; 210
     57e:	80 81       	ld	r24, Z
     580:	f9 01       	movw	r30, r18
     582:	e4 0f       	add	r30, r20
     584:	f1 1d       	adc	r31, r1
     586:	80 83       	st	Z, r24
     588:	a8 e4       	ldi	r26, 0x48	; 72
     58a:	be e2       	ldi	r27, 0x2E	; 46
     58c:	8c 91       	ld	r24, X
     58e:	81 50       	subi	r24, 0x01	; 1
     590:	8c 93       	st	X, r24
     592:	88 81       	ld	r24, Y
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	6e ef       	ldi	r22, 0xFE	; 254
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <__divmodhi4>
     5a0:	88 83       	st	Y, r24
     5a2:	80 81       	ld	r24, Z
     5a4:	88 23       	and	r24, r24
     5a6:	29 f0       	breq	.+10     	; 0x5b2 <get_cmdline+0x4a>
     5a8:	4f 5f       	subi	r20, 0xFF	; 255
     5aa:	80 91 48 2e 	lds	r24, 0x2E48	; 0x802e48 <recv0_buf+0x101>
     5ae:	81 11       	cpse	r24, r1
     5b0:	e0 cf       	rjmp	.-64     	; 0x572 <get_cmdline+0xa>
     5b2:	f9 01       	movw	r30, r18
     5b4:	e4 0f       	add	r30, r20
     5b6:	f1 1d       	adc	r31, r1
     5b8:	10 82       	st	Z, r1
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     5c0:	9f e9       	ldi	r25, 0x9F	; 159
     5c2:	98 0f       	add	r25, r24
     5c4:	9a 31       	cpi	r25, 0x1A	; 26
     5c6:	28 f0       	brcs	.+10     	; 0x5d2 <isaletter+0x12>
     5c8:	81 54       	subi	r24, 0x41	; 65
     5ca:	8a 31       	cpi	r24, 0x1A	; 26
     5cc:	20 f4       	brcc	.+8      	; 0x5d6 <isaletter+0x16>
		return(ERROR);
     5ce:	83 e6       	ldi	r24, 0x63	; 99
     5d0:	08 95       	ret
     5d2:	83 e6       	ldi	r24, 0x63	; 99
     5d4:	08 95       	ret
	}
	return(NOERROR);
     5d6:	80 e0       	ldi	r24, 0x00	; 0

}
     5d8:	08 95       	ret

000005da <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     5da:	ef 92       	push	r14
     5dc:	ff 92       	push	r15
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     5e6:	e6 2e       	mov	r14, r22
     5e8:	f1 2c       	mov	r15, r1
     5ea:	84 e3       	ldi	r24, 0x34	; 52
     5ec:	8e 9d       	mul	r24, r14
     5ee:	f0 01       	movw	r30, r0
     5f0:	8f 9d       	mul	r24, r15
     5f2:	f0 0d       	add	r31, r0
     5f4:	11 24       	eor	r1, r1
     5f6:	e1 5f       	subi	r30, 0xF1	; 241
     5f8:	f7 4d       	sbci	r31, 0xD7	; 215
     5fa:	8f e3       	ldi	r24, 0x3F	; 63
     5fc:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     5fe:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     600:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     602:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     604:	04 c0       	rjmp	.+8      	; 0x60e <parse_cmd+0x34>
		if (*ptr == '\0') {
     606:	11 23       	and	r17, r17
     608:	09 f4       	brne	.+2      	; 0x60c <parse_cmd+0x32>
     60a:	75 c0       	rjmp	.+234    	; 0x6f6 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     60c:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     60e:	18 81       	ld	r17, Y
     610:	81 2f       	mov	r24, r17
     612:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <isaletter>
     616:	88 23       	and	r24, r24
     618:	b1 f3       	breq	.-20     	; 0x606 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     61a:	21 96       	adiw	r28, 0x01	; 1
     61c:	84 e3       	ldi	r24, 0x34	; 52
     61e:	8e 9d       	mul	r24, r14
     620:	f0 01       	movw	r30, r0
     622:	8f 9d       	mul	r24, r15
     624:	f0 0d       	add	r31, r0
     626:	11 24       	eor	r1, r1
     628:	e1 5f       	subi	r30, 0xF1	; 241
     62a:	f7 4d       	sbci	r31, 0xD7	; 215
     62c:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     62e:	04 c0       	rjmp	.+8      	; 0x638 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     630:	11 23       	and	r17, r17
     632:	09 f4       	brne	.+2      	; 0x636 <parse_cmd+0x5c>
     634:	60 c0       	rjmp	.+192    	; 0x6f6 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     636:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     638:	18 81       	ld	r17, Y
     63a:	81 2f       	mov	r24, r17
     63c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <isaletter>
     640:	88 23       	and	r24, r24
     642:	b1 f3       	breq	.-20     	; 0x630 <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     644:	21 96       	adiw	r28, 0x01	; 1
     646:	84 e3       	ldi	r24, 0x34	; 52
     648:	8e 9d       	mul	r24, r14
     64a:	f0 01       	movw	r30, r0
     64c:	8f 9d       	mul	r24, r15
     64e:	f0 0d       	add	r31, r0
     650:	11 24       	eor	r1, r1
     652:	e1 5f       	subi	r30, 0xF1	; 241
     654:	f7 4d       	sbci	r31, 0xD7	; 215
     656:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	2a c0       	rjmp	.+84     	; 0x6b0 <parse_cmd+0xd6>
		if (*ptr == '\0') {
     65c:	98 81       	ld	r25, Y
     65e:	91 11       	cpse	r25, r1
     660:	0c c0       	rjmp	.+24     	; 0x67a <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     662:	94 e3       	ldi	r25, 0x34	; 52
     664:	9e 9d       	mul	r25, r14
     666:	f0 01       	movw	r30, r0
     668:	9f 9d       	mul	r25, r15
     66a:	f0 0d       	add	r31, r0
     66c:	11 24       	eor	r1, r1
     66e:	e1 5f       	subi	r30, 0xF1	; 241
     670:	f7 4d       	sbci	r31, 0xD7	; 215
     672:	e8 0f       	add	r30, r24
     674:	f1 1d       	adc	r31, r1
     676:	12 82       	std	Z+2, r1	; 0x02
			return;
     678:	3e c0       	rjmp	.+124    	; 0x6f6 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {			// Command ID separator
     67a:	9b 33       	cpi	r25, 0x3B	; 59
     67c:	61 f4       	brne	.+24     	; 0x696 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     67e:	94 e3       	ldi	r25, 0x34	; 52
     680:	9e 9d       	mul	r25, r14
     682:	f0 01       	movw	r30, r0
     684:	9f 9d       	mul	r25, r15
     686:	f0 0d       	add	r31, r0
     688:	11 24       	eor	r1, r1
     68a:	e1 5f       	subi	r30, 0xF1	; 241
     68c:	f7 4d       	sbci	r31, 0xD7	; 215
     68e:	e8 0f       	add	r30, r24
     690:	f1 1d       	adc	r31, r1
     692:	12 82       	std	Z+2, r1	; 0x02
			break;
     694:	0f c0       	rjmp	.+30     	; 0x6b4 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     696:	21 96       	adiw	r28, 0x01	; 1
     698:	24 e3       	ldi	r18, 0x34	; 52
     69a:	2e 9d       	mul	r18, r14
     69c:	f0 01       	movw	r30, r0
     69e:	2f 9d       	mul	r18, r15
     6a0:	f0 0d       	add	r31, r0
     6a2:	11 24       	eor	r1, r1
     6a4:	e1 5f       	subi	r30, 0xF1	; 241
     6a6:	f7 4d       	sbci	r31, 0xD7	; 215
     6a8:	e8 0f       	add	r30, r24
     6aa:	f1 1d       	adc	r31, r1
     6ac:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6ae:	8f 5f       	subi	r24, 0xFF	; 255
     6b0:	89 32       	cpi	r24, 0x29	; 41
     6b2:	a0 f2       	brcs	.-88     	; 0x65c <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
     6b4:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	1c c0       	rjmp	.+56     	; 0x6f2 <parse_cmd+0x118>
		if (*ptr == '\0') {
     6ba:	98 81       	ld	r25, Y
     6bc:	91 11       	cpse	r25, r1
     6be:	0c c0       	rjmp	.+24     	; 0x6d8 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     6c0:	94 e3       	ldi	r25, 0x34	; 52
     6c2:	9e 9d       	mul	r25, r14
     6c4:	f0 01       	movw	r30, r0
     6c6:	9f 9d       	mul	r25, r15
     6c8:	f0 0d       	add	r31, r0
     6ca:	11 24       	eor	r1, r1
     6cc:	e1 5f       	subi	r30, 0xF1	; 241
     6ce:	f7 4d       	sbci	r31, 0xD7	; 215
     6d0:	e8 0f       	add	r30, r24
     6d2:	f1 1d       	adc	r31, r1
     6d4:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     6d6:	0f c0       	rjmp	.+30     	; 0x6f6 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     6d8:	21 96       	adiw	r28, 0x01	; 1
     6da:	24 e3       	ldi	r18, 0x34	; 52
     6dc:	2e 9d       	mul	r18, r14
     6de:	f0 01       	movw	r30, r0
     6e0:	2f 9d       	mul	r18, r15
     6e2:	f0 0d       	add	r31, r0
     6e4:	11 24       	eor	r1, r1
     6e6:	e1 5f       	subi	r30, 0xF1	; 241
     6e8:	f7 4d       	sbci	r31, 0xD7	; 215
     6ea:	e8 0f       	add	r30, r24
     6ec:	f1 1d       	adc	r31, r1
     6ee:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     6f0:	8f 5f       	subi	r24, 0xFF	; 255
     6f2:	89 30       	cpi	r24, 0x09	; 9
     6f4:	10 f3       	brcs	.-60     	; 0x6ba <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	1f 91       	pop	r17
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	08 95       	ret

00000702 <printLine>:
		been run and the system has received a reboot acknowledge (the !). This
		is done to prevent unsolicited text being sent (error messages) at
		initialization or after a reboot.
------------------------------------------------------------------------------*/
void printLine(char *str)
{
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	c5 50       	subi	r28, 0x05	; 5
     710:	d1 40       	sbci	r29, 0x01	; 1
     712:	cd bf       	out	0x3d, r28	; 61
     714:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char prFormat[] = "$S%d%s";
     716:	27 e0       	ldi	r18, 0x07	; 7
     718:	e6 eb       	ldi	r30, 0xB6	; 182
     71a:	f0 eb       	ldi	r31, 0xB0	; 176
     71c:	de 01       	movw	r26, r28
     71e:	a1 50       	subi	r26, 0x01	; 1
     720:	bf 4f       	sbci	r27, 0xFF	; 255
     722:	01 90       	ld	r0, Z+
     724:	0d 92       	st	X+, r0
     726:	2a 95       	dec	r18
     728:	e1 f7       	brne	.-8      	; 0x722 <printLine+0x20>

	if (firstpass) {
     72a:	20 91 17 2a 	lds	r18, 0x2A17	; 0x802a17 <firstpass>
     72e:	21 11       	cpse	r18, r1
     730:	2a c0       	rjmp	.+84     	; 0x786 <printLine+0x84>
		return;
	}

	sprintf(strbuf, prFormat, get_SPECID, str);
     732:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     736:	22 ff       	sbrs	r18, 2
     738:	03 c0       	rjmp	.+6      	; 0x740 <printLine+0x3e>
     73a:	22 e0       	ldi	r18, 0x02	; 2
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	02 c0       	rjmp	.+4      	; 0x744 <printLine+0x42>
     740:	21 e0       	ldi	r18, 0x01	; 1
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	9f 93       	push	r25
     746:	8f 93       	push	r24
     748:	3f 93       	push	r19
     74a:	2f 93       	push	r18
     74c:	ce 01       	movw	r24, r28
     74e:	81 50       	subi	r24, 0x01	; 1
     750:	9f 4f       	sbci	r25, 0xFF	; 255
     752:	9f 93       	push	r25
     754:	8f 93       	push	r24
     756:	8e 01       	movw	r16, r28
     758:	0f 5f       	subi	r16, 0xFF	; 255
     75a:	1f 4f       	sbci	r17, 0xFF	; 255
     75c:	1f 93       	push	r17
     75e:	0f 93       	push	r16
     760:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
	checksum_NMEA(strbuf);
     764:	c8 01       	movw	r24, r16
     766:	0e 94 a2 0c 	call	0x1944	; 0x1944 <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     76a:	f8 01       	movw	r30, r16
     76c:	01 90       	ld	r0, Z+
     76e:	00 20       	and	r0, r0
     770:	e9 f7       	brne	.-6      	; 0x76c <printLine+0x6a>
     772:	31 97       	sbiw	r30, 0x01	; 1
     774:	af 01       	movw	r20, r30
     776:	40 1b       	sub	r20, r16
     778:	51 0b       	sbc	r21, r17
     77a:	b8 01       	movw	r22, r16
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <send_USART>
     782:	cd bf       	out	0x3d, r28	; 61
     784:	de bf       	out	0x3e, r29	; 62

}
     786:	cb 5f       	subi	r28, 0xFB	; 251
     788:	de 4f       	sbci	r29, 0xFE	; 254
     78a:	cd bf       	out	0x3d, r28	; 61
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	08 95       	ret

00000798 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
     7ac:	cc 51       	subi	r28, 0x1C	; 28
     7ae:	d1 40       	sbci	r29, 0x01	; 1
     7b0:	cd bf       	out	0x3d, r28	; 61
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	d8 2e       	mov	r13, r24
     7b6:	c9 2e       	mov	r12, r25

	const char format_CMD[] = "CMD,%s,%s";
     7b8:	8a e0       	ldi	r24, 0x0A	; 10
     7ba:	ed eb       	ldi	r30, 0xBD	; 189
     7bc:	f0 eb       	ldi	r31, 0xB0	; 176
     7be:	9e 01       	movw	r18, r28
     7c0:	2f 5f       	subi	r18, 0xFF	; 255
     7c2:	3f 4f       	sbci	r19, 0xFF	; 255
     7c4:	79 01       	movw	r14, r18
     7c6:	d9 01       	movw	r26, r18
     7c8:	01 90       	ld	r0, Z+
     7ca:	0d 92       	st	X+, r0
     7cc:	8a 95       	dec	r24
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <echo_cmd+0x30>
	char currenttime[20], strbuf[BUFSIZE];

	get_time(currenttime);
     7d0:	8e 01       	movw	r16, r28
     7d2:	05 5f       	subi	r16, 0xF5	; 245
     7d4:	1f 4f       	sbci	r17, 0xFF	; 255
     7d6:	c8 01       	movw	r24, r16
     7d8:	0e 94 48 07 	call	0xe90	; 0xe90 <get_time>
	sprintf(strbuf, format_CMD, currenttime, cmdline);
     7dc:	cf 92       	push	r12
     7de:	df 92       	push	r13
     7e0:	1f 93       	push	r17
     7e2:	0f 93       	push	r16
     7e4:	ff 92       	push	r15
     7e6:	ef 92       	push	r14
     7e8:	0c 5e       	subi	r16, 0xEC	; 236
     7ea:	1f 4f       	sbci	r17, 0xFF	; 255
     7ec:	1f 93       	push	r17
     7ee:	0f 93       	push	r16
     7f0:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
	printLine(strbuf);
     7f4:	c8 01       	movw	r24, r16
     7f6:	0e 94 81 03 	call	0x702	; 0x702 <printLine>

}
     7fa:	cd bf       	out	0x3d, r28	; 61
     7fc:	de bf       	out	0x3e, r29	; 62
     7fe:	c4 5e       	subi	r28, 0xE4	; 228
     800:	de 4f       	sbci	r29, 0xFE	; 254
     802:	cd bf       	out	0x3d, r28	; 61
     804:	de bf       	out	0x3e, r29	; 62
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	ff 90       	pop	r15
     810:	ef 90       	pop	r14
     812:	df 90       	pop	r13
     814:	cf 90       	pop	r12
     816:	08 95       	ret

00000818 <send_EXprompt>:
/*------------------------------------------------------------------------------
void send_EXprompt(void)
	Sends an exclamation mark on USART port 0
------------------------------------------------------------------------------*/
void send_EXprompt(void)
{
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	00 d0       	rcall	.+0      	; 0x81e <send_EXprompt+0x6>
     81e:	cd b7       	in	r28, 0x3d	; 61
     820:	de b7       	in	r29, 0x3e	; 62

	const char str[] = "!";
     822:	81 e2       	ldi	r24, 0x21	; 33
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	89 83       	std	Y+1, r24	; 0x01
     828:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     82a:	41 e0       	ldi	r20, 0x01	; 1
     82c:	be 01       	movw	r22, r28
     82e:	6f 5f       	subi	r22, 0xFF	; 255
     830:	7f 4f       	sbci	r23, 0xFF	; 255
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <send_USART>

}
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	08 95       	ret

00000842 <rebootACKd>:
	Returns:
		YES if the reboot acknowledge string was received
		NO if it wasn't
------------------------------------------------------------------------------*/
uint8_t rebootACKd(char *cmdline)
{
     842:	cf 93       	push	r28

	if (!rebootackd) {
     844:	c0 91 0e 28 	lds	r28, 0x280E	; 0x80280e <rebootackd>
     848:	c1 11       	cpse	r28, r1
     84a:	21 c0       	rjmp	.+66     	; 0x88e <rebootACKd+0x4c>
     84c:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     84e:	80 81       	ld	r24, Z
     850:	81 32       	cpi	r24, 0x21	; 33
     852:	91 f4       	brne	.+36     	; 0x878 <rebootACKd+0x36>
     854:	91 81       	ldd	r25, Z+1	; 0x01
     856:	91 11       	cpse	r25, r1
     858:	0f c0       	rjmp	.+30     	; 0x878 <rebootACKd+0x36>
			init_RTC(511);		// 1-sec RTC clock ticks
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	0e 94 92 2b 	call	0x5724	; 0x5724 <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     862:	85 e0       	ldi	r24, 0x05	; 5
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
     86a:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>
			rebootackd = YES;
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <rebootackd>
			return(YES);
     874:	c1 e0       	ldi	r28, 0x01	; 1
     876:	0c c0       	rjmp	.+24     	; 0x890 <rebootACKd+0x4e>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     878:	81 32       	cpi	r24, 0x21	; 33
     87a:	31 f4       	brne	.+12     	; 0x888 <rebootACKd+0x46>
     87c:	81 81       	ldd	r24, Z+1	; 0x01
     87e:	88 23       	and	r24, r24
     880:	19 f0       	breq	.+6      	; 0x888 <rebootACKd+0x46>
			reboot();
     882:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <reboot>
			return(NO);
     886:	04 c0       	rjmp	.+8      	; 0x890 <rebootACKd+0x4e>
		} else {
			send_EXprompt();
     888:	0e 94 0c 04 	call	0x818	; 0x818 <send_EXprompt>
//			send_prompt('!');
			return(NO);
     88c:	01 c0       	rjmp	.+2      	; 0x890 <rebootACKd+0x4e>
		}
	}

	return(YES);
     88e:	c1 e0       	ldi	r28, 0x01	; 1

}
     890:	8c 2f       	mov	r24, r28
     892:	cf 91       	pop	r28
     894:	08 95       	ret

00000896 <send_GTprompt>:
/*------------------------------------------------------------------------------
void send_GTprompt(void)
	Sends a greater than (>) on USART port 0
------------------------------------------------------------------------------*/
void send_GTprompt(void)
{
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	00 d0       	rcall	.+0      	; 0x89c <send_GTprompt+0x6>
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62

	const char str[] = ">";
     8a0:	8e e3       	ldi	r24, 0x3E	; 62
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	89 83       	std	Y+1, r24	; 0x01
     8a6:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     8a8:	41 e0       	ldi	r20, 0x01	; 1
     8aa:	be 01       	movw	r22, r28
     8ac:	6f 5f       	subi	r22, 0xFF	; 255
     8ae:	7f 4f       	sbci	r23, 0xFF	; 255
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <send_USART>

}
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	cf 5f       	subi	r28, 0xFF	; 255
     8ca:	d1 09       	sbc	r29, r1
     8cc:	cd bf       	out	0x3d, r28	; 61
     8ce:	de bf       	out	0x3e, r29	; 62

	char cmdline[BUFSIZE+1];		// BUFSIZE is the size of the ring buffer
	static uint8_t cstack = 0;		// pcmd index

	get_cmdline(cmdline);
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	0e 94 b4 02 	call	0x568	; 0x568 <get_cmdline>

	if (!rebootACKd(cmdline)) {		// Reboot not yet acknowledged
     8d8:	ce 01       	movw	r24, r28
     8da:	01 96       	adiw	r24, 0x01	; 1
     8dc:	0e 94 21 04 	call	0x842	; 0x842 <rebootACKd>
     8e0:	88 23       	and	r24, r24
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <commands+0x26>
     8e4:	7c c0       	rjmp	.+248    	; 0x9de <commands+0x11e>
		return;
	}

		// <CR> or ! alone are not errors
	if ((cmdline[0] == '\0') || (cmdline[0] == '!')) {
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	88 23       	and	r24, r24
     8ea:	11 f0       	breq	.+4      	; 0x8f0 <commands+0x30>
     8ec:	81 32       	cpi	r24, 0x21	; 33
     8ee:	29 f4       	brne	.+10     	; 0x8fa <commands+0x3a>
		firstpass = NO;
     8f0:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <firstpass>
		send_GTprompt();
     8f4:	0e 94 4b 04 	call	0x896	; 0x896 <send_GTprompt>
		return;
     8f8:	72 c0       	rjmp	.+228    	; 0x9de <commands+0x11e>
	}

	echo_cmd(cmdline);
     8fa:	ce 01       	movw	r24, r28
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	0e 94 cc 03 	call	0x798	; 0x798 <echo_cmd>
	parse_cmd(cmdline, cstack);
     902:	60 91 00 28 	lds	r22, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     906:	ce 01       	movw	r24, r28
     908:	01 96       	adiw	r24, 0x01	; 1
     90a:	0e 94 ed 02 	call	0x5da	; 0x5da <parse_cmd>

	switch (pcmd[cstack].cverb) {
     90e:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     912:	24 e3       	ldi	r18, 0x34	; 52
     914:	82 9f       	mul	r24, r18
     916:	f0 01       	movw	r30, r0
     918:	11 24       	eor	r1, r1
     91a:	e1 5f       	subi	r30, 0xF1	; 241
     91c:	f7 4d       	sbci	r31, 0xD7	; 215
     91e:	e0 81       	ld	r30, Z
     920:	4e 2f       	mov	r20, r30
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	fa 01       	movw	r30, r20
     926:	e9 54       	subi	r30, 0x49	; 73
     928:	f1 09       	sbc	r31, r1
     92a:	ed 32       	cpi	r30, 0x2D	; 45
     92c:	f1 05       	cpc	r31, r1
     92e:	08 f0       	brcs	.+2      	; 0x932 <commands+0x72>
     930:	44 c0       	rjmp	.+136    	; 0x9ba <commands+0xfa>
     932:	e0 5b       	subi	r30, 0xB0	; 176
     934:	ff 4f       	sbci	r31, 0xFF	; 255
     936:	0c 94 6d 35 	jmp	0x6ada	; 0x6ada <__tablejump2__>
		case 'c':				// close
			close_PNEU(cstack);
     93a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <close_PNEU>
			break;
     93e:	43 c0       	rjmp	.+134    	; 0x9c6 <commands+0x106>

		case 'o':				// open
			open_PNEU(cstack);
     940:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <open_PNEU>
			break;
     944:	40 c0       	rjmp	.+128    	; 0x9c6 <commands+0x106>

		case 'm':				// move
			move_MOTOR_CMD(cstack);
     946:	0e 94 cd 23 	call	0x479a	; 0x479a <move_MOTOR_CMD>
			break;
     94a:	3d c0       	rjmp	.+122    	; 0x9c6 <commands+0x106>

		case 'r':				// report
			report(cstack);
     94c:	0e 94 90 10 	call	0x2120	; 0x2120 <report>
			break;
     950:	3a c0       	rjmp	.+116    	; 0x9c6 <commands+0x106>

		case 's':				// set
			set(cstack);
     952:	0e 94 47 29 	call	0x528e	; 0x528e <set>
			break;
     956:	37 c0       	rjmp	.+110    	; 0x9c6 <commands+0x106>

		case 't':
			testroutine();
     958:	0e 94 66 2b 	call	0x56cc	; 0x56cc <testroutine>
			break;
     95c:	34 c0       	rjmp	.+104    	; 0x9c6 <commands+0x106>

		case 'u':
			unstick_MOTOR_LIMIT(cstack);
     95e:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <unstick_MOTOR_LIMIT>
			break;
     962:	31 c0       	rjmp	.+98     	; 0x9c6 <commands+0x106>

		case 'I':	// test init_MOTORS
			init_MOTORS();
     964:	0e 94 99 25 	call	0x4b32	; 0x4b32 <init_MOTORS>
			break;
     968:	2e c0       	rjmp	.+92     	; 0x9c6 <commands+0x106>

		case 'R':				// Reboot
			if (motorsMoving()) {
     96a:	0e 94 89 20 	call	0x4112	; 0x4112 <motorsMoving>
     96e:	88 23       	and	r24, r24
     970:	39 f0       	breq	.+14     	; 0x980 <commands+0xc0>
				printError(ERR_MTR, "commands: Can't reboot, motor moving");
     972:	67 ec       	ldi	r22, 0xC7	; 199
     974:	70 eb       	ldi	r23, 0xB0	; 176
     976:	86 e3       	ldi	r24, 0x36	; 54
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				break;
     97e:	23 c0       	rjmp	.+70     	; 0x9c6 <commands+0x106>
			} else {
				if (put_FRAM_ENCODERS() == ERROR) {
     980:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <put_FRAM_ENCODERS>
     984:	83 36       	cpi	r24, 0x63	; 99
     986:	31 f4       	brne	.+12     	; 0x994 <commands+0xd4>
					printError(ERR_FRAM, "commands: put_FRAM_ENCODERS error");
     988:	6c ee       	ldi	r22, 0xEC	; 236
     98a:	70 eb       	ldi	r23, 0xB0	; 176
     98c:	83 e9       	ldi	r24, 0x93	; 147
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				}
				timerSAVEENCODER = 0;
     994:	10 92 3c 2a 	sts	0x2A3C, r1	; 0x802a3c <timerSAVEENCODER>
				send_GTprompt();	// Aidan request
     998:	0e 94 4b 04 	call	0x896	; 0x896 <send_GTprompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     99c:	8f e3       	ldi	r24, 0x3F	; 63
     99e:	9d e0       	ldi	r25, 0x0D	; 13
     9a0:	23 e0       	ldi	r18, 0x03	; 3
     9a2:	81 50       	subi	r24, 0x01	; 1
     9a4:	90 40       	sbci	r25, 0x00	; 0
     9a6:	20 40       	sbci	r18, 0x00	; 0
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <commands+0xe2>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <commands+0xec>
     9ac:	00 00       	nop
				_delay_ms(100);
				reboot();			// in wdt.c
     9ae:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <reboot>
				return;
     9b2:	15 c0       	rjmp	.+42     	; 0x9de <commands+0x11e>
			}

		case 'Z':				// Write zero to encoder
			zero_MOTOR_CMD(cstack);
     9b4:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <zero_MOTOR_CMD>
			break;
     9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <commands+0x106>

		default:
			printError(ERR_BADCOMMAND, "Not a command");
     9ba:	6e e0       	ldi	r22, 0x0E	; 14
     9bc:	71 eb       	ldi	r23, 0xB1	; 177
     9be:	89 ec       	ldi	r24, 0xC9	; 201
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     9c6:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	6a e0       	ldi	r22, 0x0A	; 10
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <__divmodhi4>
     9d6:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	send_GTprompt();
     9da:	0e 94 4b 04 	call	0x896	; 0x896 <send_GTprompt>

}
     9de:	c1 50       	subi	r28, 0x01	; 1
     9e0:	df 4f       	sbci	r29, 0xFF	; 255
     9e2:	cd bf       	out	0x3d, r28	; 61
     9e4:	de bf       	out	0x3e, r29	; 62
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <check_isotime>:
#include "twi.h"
#include "errors.h"
#include "ds3231.h"

uint8_t check_isotime(char *isotime)
{
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	c0 5f       	subi	r28, 0xF0	; 240
     9fa:	d1 09       	sbc	r29, r1
     9fc:	cd bf       	out	0x3d, r28	; 61
     9fe:	de bf       	out	0x3e, r29	; 62
     a00:	8c 01       	movw	r16, r24

	char sbuf[10], strbuf[80];
	uint8_t i;
	int year, month, day, hours, minutes, seconds;
	const char msg0[] = "check_isotime: bad year";
     a02:	88 e1       	ldi	r24, 0x18	; 24
     a04:	ec e1       	ldi	r30, 0x1C	; 28
     a06:	f1 eb       	ldi	r31, 0xB1	; 177
     a08:	de 01       	movw	r26, r28
     a0a:	a5 5a       	subi	r26, 0xA5	; 165
     a0c:	bf 4f       	sbci	r27, 0xFF	; 255
     a0e:	01 90       	ld	r0, Z+
     a10:	0d 92       	st	X+, r0
     a12:	8a 95       	dec	r24
     a14:	e1 f7       	brne	.-8      	; 0xa0e <check_isotime+0x22>
	const char msg1[] = "check_isotime: bad month";
     a16:	89 e1       	ldi	r24, 0x19	; 25
     a18:	e4 e3       	ldi	r30, 0x34	; 52
     a1a:	f1 eb       	ldi	r31, 0xB1	; 177
     a1c:	de 01       	movw	r26, r28
     a1e:	ad 58       	subi	r26, 0x8D	; 141
     a20:	bf 4f       	sbci	r27, 0xFF	; 255
     a22:	01 90       	ld	r0, Z+
     a24:	0d 92       	st	X+, r0
     a26:	8a 95       	dec	r24
     a28:	e1 f7       	brne	.-8      	; 0xa22 <check_isotime+0x36>
	const char msg2[] = "check_isotime: bad day";
     a2a:	87 e1       	ldi	r24, 0x17	; 23
     a2c:	ed e4       	ldi	r30, 0x4D	; 77
     a2e:	f1 eb       	ldi	r31, 0xB1	; 177
     a30:	de 01       	movw	r26, r28
     a32:	a4 57       	subi	r26, 0x74	; 116
     a34:	bf 4f       	sbci	r27, 0xFF	; 255
     a36:	01 90       	ld	r0, Z+
     a38:	0d 92       	st	X+, r0
     a3a:	8a 95       	dec	r24
     a3c:	e1 f7       	brne	.-8      	; 0xa36 <check_isotime+0x4a>
	const char msg3[] = "check_isotime: bad hour";
     a3e:	88 e1       	ldi	r24, 0x18	; 24
     a40:	e4 e6       	ldi	r30, 0x64	; 100
     a42:	f1 eb       	ldi	r31, 0xB1	; 177
     a44:	de 01       	movw	r26, r28
     a46:	ad 55       	subi	r26, 0x5D	; 93
     a48:	bf 4f       	sbci	r27, 0xFF	; 255
     a4a:	01 90       	ld	r0, Z+
     a4c:	0d 92       	st	X+, r0
     a4e:	8a 95       	dec	r24
     a50:	e1 f7       	brne	.-8      	; 0xa4a <check_isotime+0x5e>
	const char msg4[] = "check_isotime: bad minutes";
     a52:	8b e1       	ldi	r24, 0x1B	; 27
     a54:	ec e7       	ldi	r30, 0x7C	; 124
     a56:	f1 eb       	ldi	r31, 0xB1	; 177
     a58:	de 01       	movw	r26, r28
     a5a:	a5 54       	subi	r26, 0x45	; 69
     a5c:	bf 4f       	sbci	r27, 0xFF	; 255
     a5e:	01 90       	ld	r0, Z+
     a60:	0d 92       	st	X+, r0
     a62:	8a 95       	dec	r24
     a64:	e1 f7       	brne	.-8      	; 0xa5e <check_isotime+0x72>
	const char msg5[] = "check_isotime: bad seconds";
     a66:	8b e1       	ldi	r24, 0x1B	; 27
     a68:	e7 e9       	ldi	r30, 0x97	; 151
     a6a:	f1 eb       	ldi	r31, 0xB1	; 177
     a6c:	de 01       	movw	r26, r28
     a6e:	aa 52       	subi	r26, 0x2A	; 42
     a70:	bf 4f       	sbci	r27, 0xFF	; 255
     a72:	01 90       	ld	r0, Z+
     a74:	0d 92       	st	X+, r0
     a76:	8a 95       	dec	r24
     a78:	e1 f7       	brne	.-8      	; 0xa72 <check_isotime+0x86>

	for (i = 0; i < 4; i++) {
     a7a:	20 e0       	ldi	r18, 0x00	; 0
     a7c:	0e c0       	rjmp	.+28     	; 0xa9a <check_isotime+0xae>
		sbuf[i] = isotime[i];
     a7e:	82 2f       	mov	r24, r18
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	f8 01       	movw	r30, r16
     a84:	e8 0f       	add	r30, r24
     a86:	f9 1f       	adc	r31, r25
     a88:	30 81       	ld	r19, Z
     a8a:	e1 e0       	ldi	r30, 0x01	; 1
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	ec 0f       	add	r30, r28
     a90:	fd 1f       	adc	r31, r29
     a92:	e8 0f       	add	r30, r24
     a94:	f9 1f       	adc	r31, r25
     a96:	30 83       	st	Z, r19
	const char msg2[] = "check_isotime: bad day";
	const char msg3[] = "check_isotime: bad hour";
	const char msg4[] = "check_isotime: bad minutes";
	const char msg5[] = "check_isotime: bad seconds";

	for (i = 0; i < 4; i++) {
     a98:	2f 5f       	subi	r18, 0xFF	; 255
     a9a:	24 30       	cpi	r18, 0x04	; 4
     a9c:	80 f3       	brcs	.-32     	; 0xa7e <check_isotime+0x92>
		sbuf[i] = isotime[i];
	}
	sbuf[4] = '\0';
     a9e:	1d 82       	std	Y+5, r1	; 0x05
	year = atoi(sbuf);
     aa0:	ce 01       	movw	r24, r28
     aa2:	01 96       	adiw	r24, 0x01	; 1
     aa4:	0e 94 f4 35 	call	0x6be8	; 0x6be8 <atoi>
	if ((year < 2021) || year > 2030) {
     aa8:	85 5e       	subi	r24, 0xE5	; 229
     aaa:	97 40       	sbci	r25, 0x07	; 7
     aac:	0a 97       	sbiw	r24, 0x0a	; 10
     aae:	40 f1       	brcs	.+80     	; 0xb00 <check_isotime+0x114>
		sprintf(strbuf, msg0);
     ab0:	ce 01       	movw	r24, r28
     ab2:	85 5a       	subi	r24, 0xA5	; 165
     ab4:	9f 4f       	sbci	r25, 0xFF	; 255
     ab6:	9f 93       	push	r25
     ab8:	8f 93       	push	r24
     aba:	8e 01       	movw	r16, r28
     abc:	05 5f       	subi	r16, 0xF5	; 245
     abe:	1f 4f       	sbci	r17, 0xFF	; 255
     ac0:	1f 93       	push	r17
     ac2:	0f 93       	push	r16
     ac4:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
		printError(ERR_ISO, strbuf);
     ac8:	b8 01       	movw	r22, r16
     aca:	8b e5       	ldi	r24, 0x5B	; 91
     acc:	92 e0       	ldi	r25, 0x02	; 2
     ace:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		return(ERROR);
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	83 e6       	ldi	r24, 0x63	; 99
     adc:	fd c0       	rjmp	.+506    	; 0xcd8 <check_isotime+0x2ec>
	}
	for (i = 5; i < 7; i++) {
		sbuf[i-5] = isotime[i];
     ade:	28 2f       	mov	r18, r24
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	f9 01       	movw	r30, r18
     ae4:	35 97       	sbiw	r30, 0x05	; 5
     ae6:	d8 01       	movw	r26, r16
     ae8:	a2 0f       	add	r26, r18
     aea:	b3 1f       	adc	r27, r19
     aec:	9c 91       	ld	r25, X
     aee:	21 e0       	ldi	r18, 0x01	; 1
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	2c 0f       	add	r18, r28
     af4:	3d 1f       	adc	r19, r29
     af6:	e2 0f       	add	r30, r18
     af8:	f3 1f       	adc	r31, r19
     afa:	90 83       	st	Z, r25
	if ((year < 2021) || year > 2030) {
		sprintf(strbuf, msg0);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 5; i < 7; i++) {
     afc:	8f 5f       	subi	r24, 0xFF	; 255
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <check_isotime+0x116>
     b00:	85 e0       	ldi	r24, 0x05	; 5
     b02:	87 30       	cpi	r24, 0x07	; 7
     b04:	60 f3       	brcs	.-40     	; 0xade <check_isotime+0xf2>
		sbuf[i-5] = isotime[i];
	}
	sbuf[2] = '\0';
     b06:	1b 82       	std	Y+3, r1	; 0x03
	month = atoi(sbuf);
     b08:	ce 01       	movw	r24, r28
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	0e 94 f4 35 	call	0x6be8	; 0x6be8 <atoi>
	if ((month < 1) || (month > 12)) {
     b10:	01 97       	sbiw	r24, 0x01	; 1
     b12:	0c 97       	sbiw	r24, 0x0c	; 12
     b14:	40 f1       	brcs	.+80     	; 0xb66 <check_isotime+0x17a>
		sprintf(strbuf, msg1);
     b16:	ce 01       	movw	r24, r28
     b18:	8d 58       	subi	r24, 0x8D	; 141
     b1a:	9f 4f       	sbci	r25, 0xFF	; 255
     b1c:	9f 93       	push	r25
     b1e:	8f 93       	push	r24
     b20:	8e 01       	movw	r16, r28
     b22:	05 5f       	subi	r16, 0xF5	; 245
     b24:	1f 4f       	sbci	r17, 0xFF	; 255
     b26:	1f 93       	push	r17
     b28:	0f 93       	push	r16
     b2a:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
		printError(ERR_ISO, strbuf);
     b2e:	b8 01       	movw	r22, r16
     b30:	8b e5       	ldi	r24, 0x5B	; 91
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		return(ERROR);
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	83 e6       	ldi	r24, 0x63	; 99
     b42:	ca c0       	rjmp	.+404    	; 0xcd8 <check_isotime+0x2ec>
	}
	for (i = 8; i < 10; i++) {
		sbuf[i-8] = isotime[i];
     b44:	28 2f       	mov	r18, r24
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	f9 01       	movw	r30, r18
     b4a:	38 97       	sbiw	r30, 0x08	; 8
     b4c:	d8 01       	movw	r26, r16
     b4e:	a2 0f       	add	r26, r18
     b50:	b3 1f       	adc	r27, r19
     b52:	9c 91       	ld	r25, X
     b54:	21 e0       	ldi	r18, 0x01	; 1
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	2c 0f       	add	r18, r28
     b5a:	3d 1f       	adc	r19, r29
     b5c:	e2 0f       	add	r30, r18
     b5e:	f3 1f       	adc	r31, r19
     b60:	90 83       	st	Z, r25
	if ((month < 1) || (month > 12)) {
		sprintf(strbuf, msg1);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 8; i < 10; i++) {
     b62:	8f 5f       	subi	r24, 0xFF	; 255
     b64:	01 c0       	rjmp	.+2      	; 0xb68 <check_isotime+0x17c>
     b66:	88 e0       	ldi	r24, 0x08	; 8
     b68:	8a 30       	cpi	r24, 0x0A	; 10
     b6a:	60 f3       	brcs	.-40     	; 0xb44 <check_isotime+0x158>
		sbuf[i-8] = isotime[i];
	}
	sbuf[2] = '\0';
     b6c:	1b 82       	std	Y+3, r1	; 0x03
	day = atoi(sbuf);
     b6e:	ce 01       	movw	r24, r28
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	0e 94 f4 35 	call	0x6be8	; 0x6be8 <atoi>
	if ((day < 1) || (day > 31)) {
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	4f 97       	sbiw	r24, 0x1f	; 31
     b7a:	40 f1       	brcs	.+80     	; 0xbcc <check_isotime+0x1e0>
		sprintf(strbuf, msg2);
     b7c:	ce 01       	movw	r24, r28
     b7e:	84 57       	subi	r24, 0x74	; 116
     b80:	9f 4f       	sbci	r25, 0xFF	; 255
     b82:	9f 93       	push	r25
     b84:	8f 93       	push	r24
     b86:	8e 01       	movw	r16, r28
     b88:	05 5f       	subi	r16, 0xF5	; 245
     b8a:	1f 4f       	sbci	r17, 0xFF	; 255
     b8c:	1f 93       	push	r17
     b8e:	0f 93       	push	r16
     b90:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
		printError(ERR_ISO, strbuf);
     b94:	b8 01       	movw	r22, r16
     b96:	8b e5       	ldi	r24, 0x5B	; 91
     b98:	92 e0       	ldi	r25, 0x02	; 2
     b9a:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		return(ERROR);
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	83 e6       	ldi	r24, 0x63	; 99
     ba8:	97 c0       	rjmp	.+302    	; 0xcd8 <check_isotime+0x2ec>
	}
	for (i = 11; i < 13; i++) {
		sbuf[i-11] = isotime[i];
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	f9 01       	movw	r30, r18
     bb0:	3b 97       	sbiw	r30, 0x0b	; 11
     bb2:	d8 01       	movw	r26, r16
     bb4:	a2 0f       	add	r26, r18
     bb6:	b3 1f       	adc	r27, r19
     bb8:	9c 91       	ld	r25, X
     bba:	21 e0       	ldi	r18, 0x01	; 1
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	2c 0f       	add	r18, r28
     bc0:	3d 1f       	adc	r19, r29
     bc2:	e2 0f       	add	r30, r18
     bc4:	f3 1f       	adc	r31, r19
     bc6:	90 83       	st	Z, r25
	if ((day < 1) || (day > 31)) {
		sprintf(strbuf, msg2);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 11; i < 13; i++) {
     bc8:	8f 5f       	subi	r24, 0xFF	; 255
     bca:	01 c0       	rjmp	.+2      	; 0xbce <check_isotime+0x1e2>
     bcc:	8b e0       	ldi	r24, 0x0B	; 11
     bce:	8d 30       	cpi	r24, 0x0D	; 13
     bd0:	60 f3       	brcs	.-40     	; 0xbaa <check_isotime+0x1be>
		sbuf[i-11] = isotime[i];
	}
	sbuf[2] = '\0';
     bd2:	1b 82       	std	Y+3, r1	; 0x03
	hours = atoi(sbuf);
     bd4:	ce 01       	movw	r24, r28
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	0e 94 f4 35 	call	0x6be8	; 0x6be8 <atoi>
	if ((hours < 0) || (hours > 23)) {
     bdc:	48 97       	sbiw	r24, 0x18	; 24
     bde:	40 f1       	brcs	.+80     	; 0xc30 <check_isotime+0x244>
		sprintf(strbuf, msg3);
     be0:	ce 01       	movw	r24, r28
     be2:	8d 55       	subi	r24, 0x5D	; 93
     be4:	9f 4f       	sbci	r25, 0xFF	; 255
     be6:	9f 93       	push	r25
     be8:	8f 93       	push	r24
     bea:	8e 01       	movw	r16, r28
     bec:	05 5f       	subi	r16, 0xF5	; 245
     bee:	1f 4f       	sbci	r17, 0xFF	; 255
     bf0:	1f 93       	push	r17
     bf2:	0f 93       	push	r16
     bf4:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
		printError(ERR_ISO, strbuf);
     bf8:	b8 01       	movw	r22, r16
     bfa:	8b e5       	ldi	r24, 0x5B	; 91
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		return(ERROR);
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	83 e6       	ldi	r24, 0x63	; 99
     c0c:	65 c0       	rjmp	.+202    	; 0xcd8 <check_isotime+0x2ec>
	}
	for (i = 14; i < 16; i++) {
		sbuf[i-14] = isotime[i];
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	f9 01       	movw	r30, r18
     c14:	3e 97       	sbiw	r30, 0x0e	; 14
     c16:	d8 01       	movw	r26, r16
     c18:	a2 0f       	add	r26, r18
     c1a:	b3 1f       	adc	r27, r19
     c1c:	9c 91       	ld	r25, X
     c1e:	21 e0       	ldi	r18, 0x01	; 1
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	2c 0f       	add	r18, r28
     c24:	3d 1f       	adc	r19, r29
     c26:	e2 0f       	add	r30, r18
     c28:	f3 1f       	adc	r31, r19
     c2a:	90 83       	st	Z, r25
	if ((hours < 0) || (hours > 23)) {
		sprintf(strbuf, msg3);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 14; i < 16; i++) {
     c2c:	8f 5f       	subi	r24, 0xFF	; 255
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <check_isotime+0x246>
     c30:	8e e0       	ldi	r24, 0x0E	; 14
     c32:	80 31       	cpi	r24, 0x10	; 16
     c34:	60 f3       	brcs	.-40     	; 0xc0e <check_isotime+0x222>
		sbuf[i-14] = isotime[i];
	}
	sbuf[2] = '\0';
     c36:	1b 82       	std	Y+3, r1	; 0x03
	minutes = atoi(sbuf);
     c38:	ce 01       	movw	r24, r28
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	0e 94 f4 35 	call	0x6be8	; 0x6be8 <atoi>
	if ((minutes < 0) || (minutes > 59)) {
     c40:	cc 97       	sbiw	r24, 0x3c	; 60
     c42:	40 f1       	brcs	.+80     	; 0xc94 <check_isotime+0x2a8>
		sprintf(strbuf, msg4);
     c44:	ce 01       	movw	r24, r28
     c46:	85 54       	subi	r24, 0x45	; 69
     c48:	9f 4f       	sbci	r25, 0xFF	; 255
     c4a:	9f 93       	push	r25
     c4c:	8f 93       	push	r24
     c4e:	8e 01       	movw	r16, r28
     c50:	05 5f       	subi	r16, 0xF5	; 245
     c52:	1f 4f       	sbci	r17, 0xFF	; 255
     c54:	1f 93       	push	r17
     c56:	0f 93       	push	r16
     c58:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
		printError(ERR_ISO, strbuf);
     c5c:	b8 01       	movw	r22, r16
     c5e:	8b e5       	ldi	r24, 0x5B	; 91
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		return(ERROR);
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
     c6e:	83 e6       	ldi	r24, 0x63	; 99
     c70:	33 c0       	rjmp	.+102    	; 0xcd8 <check_isotime+0x2ec>
	}
	for (i = 17; i < 19; i++) {
		sbuf[i-17] = isotime[i];
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	f9 01       	movw	r30, r18
     c78:	71 97       	sbiw	r30, 0x11	; 17
     c7a:	d8 01       	movw	r26, r16
     c7c:	a2 0f       	add	r26, r18
     c7e:	b3 1f       	adc	r27, r19
     c80:	9c 91       	ld	r25, X
     c82:	21 e0       	ldi	r18, 0x01	; 1
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	2c 0f       	add	r18, r28
     c88:	3d 1f       	adc	r19, r29
     c8a:	e2 0f       	add	r30, r18
     c8c:	f3 1f       	adc	r31, r19
     c8e:	90 83       	st	Z, r25
	if ((minutes < 0) || (minutes > 59)) {
		sprintf(strbuf, msg4);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 17; i < 19; i++) {
     c90:	8f 5f       	subi	r24, 0xFF	; 255
     c92:	01 c0       	rjmp	.+2      	; 0xc96 <check_isotime+0x2aa>
     c94:	81 e1       	ldi	r24, 0x11	; 17
     c96:	83 31       	cpi	r24, 0x13	; 19
     c98:	60 f3       	brcs	.-40     	; 0xc72 <check_isotime+0x286>
		sbuf[i-17] = isotime[i];
	}
	sbuf[2] = '\0';
     c9a:	1b 82       	std	Y+3, r1	; 0x03
	seconds = atoi(sbuf);
     c9c:	ce 01       	movw	r24, r28
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	0e 94 f4 35 	call	0x6be8	; 0x6be8 <atoi>
	if ((seconds < 0) || (seconds > 59)) {
     ca4:	cc 97       	sbiw	r24, 0x3c	; 60
     ca6:	b8 f0       	brcs	.+46     	; 0xcd6 <check_isotime+0x2ea>
		sprintf(strbuf, msg5);
     ca8:	ce 01       	movw	r24, r28
     caa:	8a 52       	subi	r24, 0x2A	; 42
     cac:	9f 4f       	sbci	r25, 0xFF	; 255
     cae:	9f 93       	push	r25
     cb0:	8f 93       	push	r24
     cb2:	8e 01       	movw	r16, r28
     cb4:	05 5f       	subi	r16, 0xF5	; 245
     cb6:	1f 4f       	sbci	r17, 0xFF	; 255
     cb8:	1f 93       	push	r17
     cba:	0f 93       	push	r16
     cbc:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
		printError(ERR_ISO, strbuf);
     cc0:	b8 01       	movw	r22, r16
     cc2:	8b e5       	ldi	r24, 0x5B	; 91
     cc4:	92 e0       	ldi	r25, 0x02	; 2
     cc6:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		return(ERROR);
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	83 e6       	ldi	r24, 0x63	; 99
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <check_isotime+0x2ec>
	}
	return(NOERROR);
     cd6:	80 e0       	ldi	r24, 0x00	; 0
}
     cd8:	c0 51       	subi	r28, 0x10	; 16
     cda:	df 4f       	sbci	r29, 0xFF	; 255
     cdc:	cd bf       	out	0x3d, r28	; 61
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	08 95       	ret

00000cea <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	a0 97       	sbiw	r28, 0x20	; 32
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	de bf       	out	0x3e, r29	; 62

	const char format_ISO[] = "20%02x-%02x-%02xT%02x:%02x:%02x";
     cfc:	40 e2       	ldi	r20, 0x20	; 32
     cfe:	e2 eb       	ldi	r30, 0xB2	; 178
     d00:	f1 eb       	ldi	r31, 0xB1	; 177
     d02:	9e 01       	movw	r18, r28
     d04:	2f 5f       	subi	r18, 0xFF	; 255
     d06:	3f 4f       	sbci	r19, 0xFF	; 255
     d08:	d9 01       	movw	r26, r18
     d0a:	01 90       	ld	r0, Z+
     d0c:	0d 92       	st	X+, r0
     d0e:	4a 95       	dec	r20
     d10:	e1 f7       	brne	.-8      	; 0xd0a <convert_ds2iso+0x20>
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     d12:	fb 01       	movw	r30, r22
     d14:	b0 81       	ld	r27, Z
	minutes = (*ds3231time++);
     d16:	a1 81       	ldd	r26, Z+1	; 0x01
	hours = (*ds3231time++);
     d18:	12 81       	ldd	r17, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     d1a:	04 81       	ldd	r16, Z+4	; 0x04
	month = (*ds3231time++);
     d1c:	55 81       	ldd	r21, Z+5	; 0x05
	year = (*ds3231time);
     d1e:	46 81       	ldd	r20, Z+6	; 0x06

	sprintf(isotime, format_ISO, year, month, date, hours, minutes, seconds);
     d20:	1f 92       	push	r1
     d22:	bf 93       	push	r27
     d24:	1f 92       	push	r1
     d26:	af 93       	push	r26
     d28:	1f 92       	push	r1
     d2a:	1f 93       	push	r17
     d2c:	1f 92       	push	r1
     d2e:	0f 93       	push	r16
     d30:	1f 92       	push	r1
     d32:	5f 93       	push	r21
     d34:	1f 92       	push	r1
     d36:	4f 93       	push	r20
     d38:	3f 93       	push	r19
     d3a:	2f 93       	push	r18
     d3c:	9f 93       	push	r25
     d3e:	8f 93       	push	r24
     d40:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>

}
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	a0 96       	adiw	r28, 0x20	; 32
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	08 95       	ret

00000d58 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     d58:	dc 01       	movw	r26, r24
     d5a:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     d5c:	81 89       	ldd	r24, Z+17	; 0x11
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	c0 97       	sbiw	r24, 0x30	; 48
     d62:	82 95       	swap	r24
     d64:	92 95       	swap	r25
     d66:	90 7f       	andi	r25, 0xF0	; 240
     d68:	98 27       	eor	r25, r24
     d6a:	80 7f       	andi	r24, 0xF0	; 240
     d6c:	98 27       	eor	r25, r24
     d6e:	92 89       	ldd	r25, Z+18	; 0x12
     d70:	90 53       	subi	r25, 0x30	; 48
     d72:	89 2b       	or	r24, r25
     d74:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     d76:	86 85       	ldd	r24, Z+14	; 0x0e
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	c0 97       	sbiw	r24, 0x30	; 48
     d7c:	82 95       	swap	r24
     d7e:	92 95       	swap	r25
     d80:	90 7f       	andi	r25, 0xF0	; 240
     d82:	98 27       	eor	r25, r24
     d84:	80 7f       	andi	r24, 0xF0	; 240
     d86:	98 27       	eor	r25, r24
     d88:	97 85       	ldd	r25, Z+15	; 0x0f
     d8a:	90 53       	subi	r25, 0x30	; 48
     d8c:	89 2b       	or	r24, r25
     d8e:	11 96       	adiw	r26, 0x01	; 1
     d90:	8c 93       	st	X, r24
     d92:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     d94:	83 85       	ldd	r24, Z+11	; 0x0b
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	c0 97       	sbiw	r24, 0x30	; 48
     d9a:	82 95       	swap	r24
     d9c:	92 95       	swap	r25
     d9e:	90 7f       	andi	r25, 0xF0	; 240
     da0:	98 27       	eor	r25, r24
     da2:	80 7f       	andi	r24, 0xF0	; 240
     da4:	98 27       	eor	r25, r24
     da6:	94 85       	ldd	r25, Z+12	; 0x0c
     da8:	90 53       	subi	r25, 0x30	; 48
     daa:	89 2b       	or	r24, r25
     dac:	12 96       	adiw	r26, 0x02	; 2
     dae:	8c 93       	st	X, r24
     db0:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	13 96       	adiw	r26, 0x03	; 3
     db6:	8c 93       	st	X, r24
     db8:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     dba:	80 85       	ldd	r24, Z+8	; 0x08
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	c0 97       	sbiw	r24, 0x30	; 48
     dc0:	82 95       	swap	r24
     dc2:	92 95       	swap	r25
     dc4:	90 7f       	andi	r25, 0xF0	; 240
     dc6:	98 27       	eor	r25, r24
     dc8:	80 7f       	andi	r24, 0xF0	; 240
     dca:	98 27       	eor	r25, r24
     dcc:	91 85       	ldd	r25, Z+9	; 0x09
     dce:	90 53       	subi	r25, 0x30	; 48
     dd0:	89 2b       	or	r24, r25
     dd2:	14 96       	adiw	r26, 0x04	; 4
     dd4:	8c 93       	st	X, r24
     dd6:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     dd8:	25 81       	ldd	r18, Z+5	; 0x05
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	20 53       	subi	r18, 0x30	; 48
     dde:	31 09       	sbc	r19, r1
     de0:	22 95       	swap	r18
     de2:	32 95       	swap	r19
     de4:	30 7f       	andi	r19, 0xF0	; 240
     de6:	32 27       	eor	r19, r18
     de8:	20 7f       	andi	r18, 0xF0	; 240
     dea:	32 27       	eor	r19, r18
     dec:	86 81       	ldd	r24, Z+6	; 0x06
     dee:	80 53       	subi	r24, 0x30	; 48
     df0:	28 2b       	or	r18, r24
     df2:	15 96       	adiw	r26, 0x05	; 5
     df4:	2c 93       	st	X, r18
     df6:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     df8:	22 81       	ldd	r18, Z+2	; 0x02
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	20 53       	subi	r18, 0x30	; 48
     dfe:	31 09       	sbc	r19, r1
     e00:	22 95       	swap	r18
     e02:	32 95       	swap	r19
     e04:	30 7f       	andi	r19, 0xF0	; 240
     e06:	32 27       	eor	r19, r18
     e08:	20 7f       	andi	r18, 0xF0	; 240
     e0a:	32 27       	eor	r19, r18
     e0c:	83 81       	ldd	r24, Z+3	; 0x03
     e0e:	80 53       	subi	r24, 0x30	; 48
     e10:	28 2b       	or	r18, r24
     e12:	16 96       	adiw	r26, 0x06	; 6
     e14:	2c 93       	st	X, r18
     e16:	08 95       	ret

00000e18 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	7b 01       	movw	r14, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
     e2a:	c8 2f       	mov	r28, r24
     e2c:	83 36       	cpi	r24, 0x63	; 99
     e2e:	19 f4       	brne	.+6      	; 0xe36 <read_DS3231+0x1e>
		stop_TWI();
     e30:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(ERROR);
     e34:	26 c0       	rjmp	.+76     	; 0xe82 <read_DS3231+0x6a>
    }  

	if (write_TWI(0x00) == ERROR) {	// Register 00h
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
     e3c:	c8 2f       	mov	r28, r24
     e3e:	83 36       	cpi	r24, 0x63	; 99
     e40:	19 f4       	brne	.+6      	; 0xe48 <read_DS3231+0x30>
		stop_TWI();
     e42:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(ERROR);
     e46:	1d c0       	rjmp	.+58     	; 0xe82 <read_DS3231+0x6a>
	}

	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	88 e6       	ldi	r24, 0x68	; 104
     e4c:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
     e50:	c8 2f       	mov	r28, r24
     e52:	83 36       	cpi	r24, 0x63	; 99
     e54:	61 f4       	brne	.+24     	; 0xe6e <read_DS3231+0x56>
		stop_TWI();
     e56:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(ERROR);
     e5a:	13 c0       	rjmp	.+38     	; 0xe82 <read_DS3231+0x6a>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     e5c:	87 01       	movw	r16, r14
     e5e:	0c 0f       	add	r16, r28
     e60:	11 1d       	adc	r17, r1
     e62:	0e 94 3e 2c 	call	0x587c	; 0x587c <read_TWI>
     e66:	f8 01       	movw	r30, r16
     e68:	80 83       	st	Z, r24
	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 6; i++) {
     e6a:	cf 5f       	subi	r28, 0xFF	; 255
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <read_DS3231+0x58>
     e6e:	c0 e0       	ldi	r28, 0x00	; 0
     e70:	c6 30       	cpi	r28, 0x06	; 6
     e72:	a0 f3       	brcs	.-24     	; 0xe5c <read_DS3231+0x44>
		ds3231time[i] = read_TWI();
	}

	ds3231time[6] = readlast_TWI();
     e74:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <readlast_TWI>
     e78:	f7 01       	movw	r30, r14
     e7a:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     e7c:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>

	return(NOERROR);
     e80:	c0 e0       	ldi	r28, 0x00	; 0

}
     e82:	8c 2f       	mov	r24, r28
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	08 95       	ret

00000e90 <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     e90:	ef 92       	push	r14
     e92:	ff 92       	push	r15
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	27 97       	sbiw	r28, 0x07	; 7
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (read_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     ea6:	be 01       	movw	r22, r28
     ea8:	6f 5f       	subi	r22, 0xFF	; 255
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	88 e6       	ldi	r24, 0x68	; 104
     eae:	0e 94 0c 07 	call	0xe18	; 0xe18 <read_DS3231>
     eb2:	18 2f       	mov	r17, r24
     eb4:	83 36       	cpi	r24, 0x63	; 99
     eb6:	79 f4       	brne	.+30     	; 0xed6 <get_time+0x46>
		printError(ERR_GETTIME, "get_time DS3231");
     eb8:	62 ed       	ldi	r22, 0xD2	; 210
     eba:	71 eb       	ldi	r23, 0xB1	; 177
     ebc:	85 e6       	ldi	r24, 0x65	; 101
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		strcpy(isotime, "DateTime?");
     ec4:	8a e0       	ldi	r24, 0x0A	; 10
     ec6:	e2 ee       	ldi	r30, 0xE2	; 226
     ec8:	f1 eb       	ldi	r31, 0xB1	; 177
     eca:	d7 01       	movw	r26, r14
     ecc:	01 90       	ld	r0, Z+
     ece:	0d 92       	st	X+, r0
     ed0:	8a 95       	dec	r24
     ed2:	e1 f7       	brne	.-8      	; 0xecc <get_time+0x3c>
		return(ERROR);
     ed4:	07 c0       	rjmp	.+14     	; 0xee4 <get_time+0x54>
	}

	convert_ds2iso(isotime, ds3231time);
     ed6:	be 01       	movw	r22, r28
     ed8:	6f 5f       	subi	r22, 0xFF	; 255
     eda:	7f 4f       	sbci	r23, 0xFF	; 255
     edc:	c7 01       	movw	r24, r14
     ede:	0e 94 75 06 	call	0xcea	; 0xcea <convert_ds2iso>
	return(NOERROR);
     ee2:	10 e0       	ldi	r17, 0x00	; 0

}
     ee4:	81 2f       	mov	r24, r17
     ee6:	27 96       	adiw	r28, 0x07	; 7
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	ff 90       	pop	r15
     ef4:	ef 90       	pop	r14
     ef6:	08 95       	ret

00000ef8 <write_DS3231>:
	Returns:
		ERROR for TWI start error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     ef8:	ef 92       	push	r14
     efa:	ff 92       	push	r15
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	8b 01       	movw	r16, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
     f0c:	c8 2f       	mov	r28, r24
     f0e:	83 36       	cpi	r24, 0x63	; 99
     f10:	19 f4       	brne	.+6      	; 0xf18 <write_DS3231+0x20>
		stop_TWI();
     f12:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(ERROR);
     f16:	20 c0       	rjmp	.+64     	; 0xf58 <write_DS3231+0x60>
	}

	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
     f1e:	c8 2f       	mov	r28, r24
     f20:	83 36       	cpi	r24, 0x63	; 99
     f22:	a1 f4       	brne	.+40     	; 0xf4c <write_DS3231+0x54>
		stop_TWI();
     f24:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(ERROR);
     f28:	17 c0       	rjmp	.+46     	; 0xf58 <write_DS3231+0x60>
	}

	for (i = 0; i < 7; i++) {
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     f2a:	78 01       	movw	r14, r16
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	e8 1a       	sub	r14, r24
     f30:	f8 0a       	sbc	r15, r24
     f32:	f8 01       	movw	r30, r16
     f34:	80 81       	ld	r24, Z
     f36:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
     f3a:	c8 2f       	mov	r28, r24
     f3c:	83 36       	cpi	r24, 0x63	; 99
     f3e:	19 f4       	brne	.+6      	; 0xf46 <write_DS3231+0x4e>
			stop_TWI();
     f40:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
			return(ERROR);
     f44:	09 c0       	rjmp	.+18     	; 0xf58 <write_DS3231+0x60>
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     f46:	df 5f       	subi	r29, 0xFF	; 255
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     f48:	87 01       	movw	r16, r14
     f4a:	01 c0       	rjmp	.+2      	; 0xf4e <write_DS3231+0x56>
     f4c:	d0 e0       	ldi	r29, 0x00	; 0
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     f4e:	d7 30       	cpi	r29, 0x07	; 7
     f50:	60 f3       	brcs	.-40     	; 0xf2a <write_DS3231+0x32>
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
			stop_TWI();
			return(ERROR);
		}
	}
	stop_TWI();
     f52:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>

	return(NOERROR);
     f56:	c0 e0       	ldi	r28, 0x00	; 0

}
     f58:	8c 2f       	mov	r24, r28
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	ff 90       	pop	r15
     f64:	ef 90       	pop	r14
     f66:	08 95       	ret

00000f68 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     f68:	ef 92       	push	r14
     f6a:	ff 92       	push	r15
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	27 97       	sbiw	r28, 0x07	; 7
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (check_isotime(isotime) == ERROR) {
     f7e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <check_isotime>
     f82:	18 2f       	mov	r17, r24
     f84:	83 36       	cpi	r24, 0x63	; 99
     f86:	39 f4       	brne	.+14     	; 0xf96 <put_time+0x2e>
		printError(ERR_ISO, "put_time: check_isotime error");
     f88:	6c ee       	ldi	r22, 0xEC	; 236
     f8a:	71 eb       	ldi	r23, 0xB1	; 177
     f8c:	8b e5       	ldi	r24, 0x5B	; 91
     f8e:	92 e0       	ldi	r25, 0x02	; 2
     f90:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		return(ERROR);
     f94:	16 c0       	rjmp	.+44     	; 0xfc2 <put_time+0x5a>
	}
	convert_iso2ds(ds3231time, isotime);
     f96:	b7 01       	movw	r22, r14
     f98:	ce 01       	movw	r24, r28
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	0e 94 ac 06 	call	0xd58	; 0xd58 <convert_iso2ds>
	if (write_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     fa0:	be 01       	movw	r22, r28
     fa2:	6f 5f       	subi	r22, 0xFF	; 255
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	88 e6       	ldi	r24, 0x68	; 104
     fa8:	0e 94 7c 07 	call	0xef8	; 0xef8 <write_DS3231>
     fac:	18 2f       	mov	r17, r24
     fae:	83 36       	cpi	r24, 0x63	; 99
     fb0:	39 f4       	brne	.+14     	; 0xfc0 <put_time+0x58>
		printError(ERR_PUTTIME, "put_time: write_DS3231 error");
     fb2:	6a e0       	ldi	r22, 0x0A	; 10
     fb4:	72 eb       	ldi	r23, 0xB2	; 178
     fb6:	86 e6       	ldi	r24, 0x66	; 102
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		return(ERROR);
     fbe:	01 c0       	rjmp	.+2      	; 0xfc2 <put_time+0x5a>
	}
	return(NOERROR);
     fc0:	10 e0       	ldi	r17, 0x00	; 0

}
     fc2:	81 2f       	mov	r24, r17
     fc4:	27 96       	adiw	r28, 0x07	; 7
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	ff 90       	pop	r15
     fd2:	ef 90       	pop	r14
     fd4:	08 95       	ret

00000fd6 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     fd6:	45 e1       	ldi	r20, 0x15	; 21
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	6b e0       	ldi	r22, 0x0B	; 11
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	0e 94 12 38 	call	0x7024	; 0x7024 <eeprom_read_block>
     fe2:	08 95       	ret

00000fe4 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     fe4:	4b e0       	ldi	r20, 0x0B	; 11
     fe6:	50 e0       	ldi	r21, 0x00	; 0
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	0e 94 12 38 	call	0x7024	; 0x7024 <eeprom_read_block>
     ff0:	08 95       	ret

00000ff2 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	65 97       	sbiw	r28, 0x15	; 21
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
    1000:	ce 01       	movw	r24, r28
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	0e 94 48 07 	call	0xe90	; 0xe90 <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
    1008:	45 e1       	ldi	r20, 0x15	; 21
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	6b e0       	ldi	r22, 0x0B	; 11
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	ce 01       	movw	r24, r28
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	0e 94 16 38 	call	0x702c	; 0x702c <eeprom_update_block>

}
    1018:	65 96       	adiw	r28, 0x15	; 21
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <update_VERSION>:

void update_VERSION(void)
{
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	2b 97       	sbiw	r28, 0x0b	; 11
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
    1032:	8b e0       	ldi	r24, 0x0B	; 11
    1034:	e7 e2       	ldi	r30, 0x27	; 39
    1036:	f2 eb       	ldi	r31, 0xB2	; 178
    1038:	de 01       	movw	r26, r28
    103a:	11 96       	adiw	r26, 0x01	; 1
    103c:	01 90       	ld	r0, Z+
    103e:	0d 92       	st	X+, r0
    1040:	8a 95       	dec	r24
    1042:	e1 f7       	brne	.-8      	; 0x103c <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
    1044:	4b e0       	ldi	r20, 0x0B	; 11
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	ce 01       	movw	r24, r28
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	0e 94 16 38 	call	0x702c	; 0x702c <eeprom_update_block>

}
    1054:	2b 96       	adiw	r28, 0x0b	; 11
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	08 95       	ret

00001060 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
    1060:	0e 94 f9 07 	call	0xff2	; 0xff2 <update_BOOTTIME>
	update_VERSION();
    1064:	0e 94 12 08 	call	0x1024	; 0x1024 <update_VERSION>
    1068:	08 95       	ret

0000106a <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	c8 50       	subi	r28, 0x08	; 8
    1078:	d1 40       	sbci	r29, 0x01	; 1
    107a:	cd bf       	out	0x3d, r28	; 61
    107c:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char errorFormat[] = "ERR,%d,%s";
    107e:	2a e0       	ldi	r18, 0x0A	; 10
    1080:	e2 e3       	ldi	r30, 0x32	; 50
    1082:	f2 eb       	ldi	r31, 0xB2	; 178
    1084:	de 01       	movw	r26, r28
    1086:	a1 50       	subi	r26, 0x01	; 1
    1088:	bf 4f       	sbci	r27, 0xFF	; 255
    108a:	01 90       	ld	r0, Z+
    108c:	0d 92       	st	X+, r0
    108e:	2a 95       	dec	r18
    1090:	e1 f7       	brne	.-8      	; 0x108a <printError+0x20>

	if (!squelchErrors) {
    1092:	20 91 0d 28 	lds	r18, 0x280D	; 0x80280d <squelchErrors>
    1096:	21 11       	cpse	r18, r1
    1098:	15 c0       	rjmp	.+42     	; 0x10c4 <printError+0x5a>
		sprintf(strbuf, errorFormat, errorNumber, errorString);
    109a:	7f 93       	push	r23
    109c:	6f 93       	push	r22
    109e:	9f 93       	push	r25
    10a0:	8f 93       	push	r24
    10a2:	ce 01       	movw	r24, r28
    10a4:	81 50       	subi	r24, 0x01	; 1
    10a6:	9f 4f       	sbci	r25, 0xFF	; 255
    10a8:	9f 93       	push	r25
    10aa:	8f 93       	push	r24
    10ac:	8e 01       	movw	r16, r28
    10ae:	0f 5f       	subi	r16, 0xFF	; 255
    10b0:	1f 4f       	sbci	r17, 0xFF	; 255
    10b2:	1f 93       	push	r17
    10b4:	0f 93       	push	r16
    10b6:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
		printLine(strbuf);
    10ba:	c8 01       	movw	r24, r16
    10bc:	0e 94 81 03 	call	0x702	; 0x702 <printLine>
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	de bf       	out	0x3e, r29	; 62
	}

}
    10c4:	c8 5f       	subi	r28, 0xF8	; 248
    10c6:	de 4f       	sbci	r29, 0xFE	; 254
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	08 95       	ret

000010d6 <read_FRAM>:
	Returns:
		ERROR on start_TWI error (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
    10d6:	cf 92       	push	r12
    10d8:	df 92       	push	r13
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	d8 2f       	mov	r29, r24
    10e8:	d6 2e       	mov	r13, r22
    10ea:	07 2f       	mov	r16, r23
    10ec:	7a 01       	movw	r14, r20
    10ee:	12 2f       	mov	r17, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if (start_TWI(addr, TWIWRITE) == ERROR) {		// TWI start
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
    10f6:	c8 2f       	mov	r28, r24
    10f8:	83 36       	cpi	r24, 0x63	; 99
    10fa:	19 f4       	brne	.+6      	; 0x1102 <read_FRAM+0x2c>
		stop_TWI();
    10fc:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(ERROR);
    1100:	2e c0       	rjmp	.+92     	; 0x115e <read_FRAM+0x88>
	}

	if (write_TWI(memhigh) == ERROR) {			// Send memory address
    1102:	80 2f       	mov	r24, r16
    1104:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
    1108:	c8 2f       	mov	r28, r24
    110a:	83 36       	cpi	r24, 0x63	; 99
    110c:	41 f1       	breq	.+80     	; 0x115e <read_FRAM+0x88>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {
    110e:	8d 2d       	mov	r24, r13
    1110:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
    1114:	c8 2f       	mov	r28, r24
    1116:	83 36       	cpi	r24, 0x63	; 99
    1118:	11 f1       	breq	.+68     	; 0x115e <read_FRAM+0x88>
		return(ERROR);
	}

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
    111a:	61 e0       	ldi	r22, 0x01	; 1
    111c:	8d 2f       	mov	r24, r29
    111e:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
    1122:	c8 2f       	mov	r28, r24
    1124:	83 36       	cpi	r24, 0x63	; 99
    1126:	d9 f0       	breq	.+54     	; 0x115e <read_FRAM+0x88>
    1128:	c0 e0       	ldi	r28, 0x00	; 0
    112a:	08 c0       	rjmp	.+16     	; 0x113c <read_FRAM+0x66>
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
    112c:	67 01       	movw	r12, r14
    112e:	cc 0e       	add	r12, r28
    1130:	d1 1c       	adc	r13, r1
    1132:	0e 94 3e 2c 	call	0x587c	; 0x587c <read_TWI>
    1136:	f6 01       	movw	r30, r12
    1138:	80 83       	st	Z, r24

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
    113a:	cf 5f       	subi	r28, 0xFF	; 255
    113c:	2c 2f       	mov	r18, r28
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 2f       	mov	r24, r17
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	28 17       	cp	r18, r24
    1148:	39 07       	cpc	r19, r25
    114a:	84 f3       	brlt	.-32     	; 0x112c <read_FRAM+0x56>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
    114c:	ec 01       	movw	r28, r24
    114e:	ce 0d       	add	r28, r14
    1150:	df 1d       	adc	r29, r15
    1152:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <readlast_TWI>
    1156:	88 83       	st	Y, r24

	stop_TWI();
    1158:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>

	return(NOERROR);
    115c:	c0 e0       	ldi	r28, 0x00	; 0

}
    115e:	8c 2f       	mov	r24, r28
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	ff 90       	pop	r15
    116a:	ef 90       	pop	r14
    116c:	df 90       	pop	r13
    116e:	cf 90       	pop	r12
    1170:	08 95       	ret

00001172 <get_SETTIME>:
	Input: None
	Output: The data from FRAM, presumably containing the time
	Returns: ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t get_SETTIME(char *lastsettime)
{
    1172:	ef 92       	push	r14
    1174:	ff 92       	push	r15
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	2a 97       	sbiw	r28, 0x0a	; 10
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	7c 01       	movw	r14, r24

	const char timeset[] = "Time Set?";
    1188:	8a e0       	ldi	r24, 0x0A	; 10
    118a:	ec e3       	ldi	r30, 0x3C	; 60
    118c:	f2 eb       	ldi	r31, 0xB2	; 178
    118e:	de 01       	movw	r26, r28
    1190:	11 96       	adiw	r26, 0x01	; 1
    1192:	01 90       	ld	r0, Z+
    1194:	0d 92       	st	X+, r0
    1196:	8a 95       	dec	r24
    1198:	e1 f7       	brne	.-8      	; 0x1192 <get_SETTIME+0x20>
	if (read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, ISOTIMELEN) == ERROR) {;
    119a:	24 e1       	ldi	r18, 0x14	; 20
    119c:	a7 01       	movw	r20, r14
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	80 e5       	ldi	r24, 0x50	; 80
    11a4:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <read_FRAM>
    11a8:	18 2f       	mov	r17, r24
    11aa:	83 36       	cpi	r24, 0x63	; 99
    11ac:	39 f4       	brne	.+14     	; 0x11bc <get_SETTIME+0x4a>
		strcpy(lastsettime, timeset);
    11ae:	be 01       	movw	r22, r28
    11b0:	6f 5f       	subi	r22, 0xFF	; 255
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255
    11b4:	c7 01       	movw	r24, r14
    11b6:	0e 94 27 37 	call	0x6e4e	; 0x6e4e <strcpy>
		return(ERROR);
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <get_SETTIME+0x4c>
	}
	return(NOERROR);
    11bc:	10 e0       	ldi	r17, 0x00	; 0
}
    11be:	81 2f       	mov	r24, r17
    11c0:	2a 96       	adiw	r28, 0x0a	; 10
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	1f 91       	pop	r17
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	08 95       	ret

000011d2 <write_FRAM>:
	Returns:
		ERROR if start_TWI fails (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	f6 2e       	mov	r15, r22
    11e0:	17 2f       	mov	r17, r23
    11e2:	ea 01       	movw	r28, r20
    11e4:	02 2f       	mov	r16, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if (start_TWI(addr, TWIWRITE) == ERROR) {	// TWI START
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
    11ec:	83 36       	cpi	r24, 0x63	; 99
    11ee:	e1 f0       	breq	.+56     	; 0x1228 <write_FRAM+0x56>
		return(ERROR);
	}

	if (write_TWI(memhigh) == ERROR) {			// FRAM address to write
    11f0:	81 2f       	mov	r24, r17
    11f2:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
    11f6:	83 36       	cpi	r24, 0x63	; 99
    11f8:	b9 f0       	breq	.+46     	; 0x1228 <write_FRAM+0x56>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
    11fa:	8f 2d       	mov	r24, r15
    11fc:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
    1200:	83 36       	cpi	r24, 0x63	; 99
    1202:	91 f0       	breq	.+36     	; 0x1228 <write_FRAM+0x56>
    1204:	10 e0       	ldi	r17, 0x00	; 0
    1206:	0b c0       	rjmp	.+22     	; 0x121e <write_FRAM+0x4c>
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    1208:	7e 01       	movw	r14, r28
    120a:	8f ef       	ldi	r24, 0xFF	; 255
    120c:	e8 1a       	sub	r14, r24
    120e:	f8 0a       	sbc	r15, r24
    1210:	88 81       	ld	r24, Y
    1212:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
    1216:	83 36       	cpi	r24, 0x63	; 99
    1218:	39 f0       	breq	.+14     	; 0x1228 <write_FRAM+0x56>
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    121a:	1f 5f       	subi	r17, 0xFF	; 255
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    121c:	e7 01       	movw	r28, r14
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    121e:	10 17       	cp	r17, r16
    1220:	98 f3       	brcs	.-26     	; 0x1208 <write_FRAM+0x36>
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
			return(ERROR);
		}
	}

	stop_TWI();
    1222:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>

	return(NOERROR);
    1226:	80 e0       	ldi	r24, 0x00	; 0

}
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	08 95       	ret

00001236 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
    1236:	8f 92       	push	r8
    1238:	9f 92       	push	r9
    123a:	af 92       	push	r10
    123c:	bf 92       	push	r11
    123e:	cf 92       	push	r12
    1240:	df 92       	push	r13
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	00 d0       	rcall	.+0      	; 0x1250 <get_humidity+0x1a>
    1250:	00 d0       	rcall	.+0      	; 0x1252 <get_humidity+0x1c>
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62

	uint8_t adcpin;
	float voltage, humidity, temperature;

	switch (sensor) {
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	59 f0       	breq	.+22     	; 0x1270 <get_humidity+0x3a>
    125a:	18 f0       	brcs	.+6      	; 0x1262 <get_humidity+0x2c>
    125c:	82 30       	cpi	r24, 0x02	; 2
    125e:	79 f0       	breq	.+30     	; 0x127e <get_humidity+0x48>
    1260:	15 c0       	rjmp	.+42     	; 0x128c <get_humidity+0x56>
		case 0:
			temperature = get_temperature(0);
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	0e 94 2a 2b 	call	0x5654	; 0x5654 <get_temperature>
    1268:	6b 01       	movw	r12, r22
    126a:	7c 01       	movw	r14, r24
			adcpin = AIN0;		// production
    126c:	40 e4       	ldi	r20, 0x40	; 64
			break;
    126e:	17 c0       	rjmp	.+46     	; 0x129e <get_humidity+0x68>

		case 1:
			temperature = get_temperature(1);
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	0e 94 2a 2b 	call	0x5654	; 0x5654 <get_temperature>
    1276:	6b 01       	movw	r12, r22
    1278:	7c 01       	movw	r14, r24
			adcpin = AIN1;
    127a:	40 e5       	ldi	r20, 0x50	; 80
			break;
    127c:	10 c0       	rjmp	.+32     	; 0x129e <get_humidity+0x68>

		case 2:
			temperature = get_temperature(2);
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	0e 94 2a 2b 	call	0x5654	; 0x5654 <get_temperature>
    1284:	6b 01       	movw	r12, r22
    1286:	7c 01       	movw	r14, r24
			adcpin = AIN2;
    1288:	40 e6       	ldi	r20, 0x60	; 96
			break;
    128a:	09 c0       	rjmp	.+18     	; 0x129e <get_humidity+0x68>

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
    128c:	0f 2e       	mov	r0, r31
    128e:	c1 2c       	mov	r12, r1
    1290:	d1 2c       	mov	r13, r1
    1292:	f0 ea       	ldi	r31, 0xA0	; 160
    1294:	ef 2e       	mov	r14, r31
    1296:	f1 e4       	ldi	r31, 0x41	; 65
    1298:	ff 2e       	mov	r15, r31
    129a:	f0 2d       	mov	r31, r0
			adcpin = AIN2;
			break;

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
    129c:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
    129e:	8e 01       	movw	r16, r28
    12a0:	0f 5f       	subi	r16, 0xFF	; 255
    12a2:	1f 4f       	sbci	r17, 0xFF	; 255
    12a4:	20 e8       	ldi	r18, 0x80	; 128
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	88 e4       	ldi	r24, 0x48	; 72
    12aa:	0e 94 c9 01 	call	0x392	; 0x392 <read_ADS1115>
    12ae:	83 36       	cpi	r24, 0x63	; 99
    12b0:	89 f1       	breq	.+98     	; 0x1314 <get_humidity+0xde>
		humidity = BADFLOAT;
	}
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 ea       	ldi	r20, 0xA0	; 160
    12b8:	50 e4       	ldi	r21, 0x40	; 64
    12ba:	69 81       	ldd	r22, Y+1	; 0x01
    12bc:	7a 81       	ldd	r23, Y+2	; 0x02
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <__divsf3>
    12c6:	2a e0       	ldi	r18, 0x0A	; 10
    12c8:	37 ed       	ldi	r19, 0xD7	; 215
    12ca:	43 e2       	ldi	r20, 0x23	; 35
    12cc:	5e e3       	ldi	r21, 0x3E	; 62
    12ce:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <__subsf3>
    12d2:	2f e5       	ldi	r18, 0x5F	; 95
    12d4:	39 e2       	ldi	r19, 0x29	; 41
    12d6:	4b ec       	ldi	r20, 0xCB	; 203
    12d8:	5b e3       	ldi	r21, 0x3B	; 59
    12da:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <__divsf3>
    12de:	4b 01       	movw	r8, r22
    12e0:	5c 01       	movw	r10, r24
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
    12e2:	29 ec       	ldi	r18, 0xC9	; 201
    12e4:	3e e8       	ldi	r19, 0x8E	; 142
    12e6:	4d e0       	ldi	r20, 0x0D	; 13
    12e8:	5b e3       	ldi	r21, 0x3B	; 59
    12ea:	c7 01       	movw	r24, r14
    12ec:	b6 01       	movw	r22, r12
    12ee:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
    12f2:	9b 01       	movw	r18, r22
    12f4:	ac 01       	movw	r20, r24
    12f6:	62 e2       	ldi	r22, 0x22	; 34
    12f8:	7d ef       	ldi	r23, 0xFD	; 253
    12fa:	86 e8       	ldi	r24, 0x86	; 134
    12fc:	9f e3       	ldi	r25, 0x3F	; 63
    12fe:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <__subsf3>
    1302:	9b 01       	movw	r18, r22
    1304:	ac 01       	movw	r20, r24
    1306:	c5 01       	movw	r24, r10
    1308:	b4 01       	movw	r22, r8
    130a:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <__divsf3>
    130e:	6b 01       	movw	r12, r22
    1310:	7c 01       	movw	r14, r24
    1312:	09 c0       	rjmp	.+18     	; 0x1326 <get_humidity+0xf0>
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
		humidity = BADFLOAT;
    1314:	0f 2e       	mov	r0, r31
    1316:	c1 2c       	mov	r12, r1
    1318:	f0 e8       	ldi	r31, 0x80	; 128
    131a:	df 2e       	mov	r13, r31
    131c:	f6 e2       	ldi	r31, 0x26	; 38
    131e:	ef 2e       	mov	r14, r31
    1320:	f4 ec       	ldi	r31, 0xC4	; 196
    1322:	ff 2e       	mov	r15, r31
    1324:	f0 2d       	mov	r31, r0
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
	}

	if (humidity < 0.0) {
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	a9 01       	movw	r20, r18
    132c:	c7 01       	movw	r24, r14
    132e:	b6 01       	movw	r22, r12
    1330:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <__cmpsf2>
    1334:	88 23       	and	r24, r24
    1336:	4c f4       	brge	.+18     	; 0x134a <get_humidity+0x114>
		humidity = BADFLOAT;
    1338:	0f 2e       	mov	r0, r31
    133a:	c1 2c       	mov	r12, r1
    133c:	f0 e8       	ldi	r31, 0x80	; 128
    133e:	df 2e       	mov	r13, r31
    1340:	f6 e2       	ldi	r31, 0x26	; 38
    1342:	ef 2e       	mov	r14, r31
    1344:	f4 ec       	ldi	r31, 0xC4	; 196
    1346:	ff 2e       	mov	r15, r31
    1348:	f0 2d       	mov	r31, r0
	}

	return(humidity);

}
    134a:	c7 01       	movw	r24, r14
    134c:	b6 01       	movw	r22, r12
    134e:	24 96       	adiw	r28, 0x04	; 4
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	1f 91       	pop	r17
    135a:	0f 91       	pop	r16
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	df 90       	pop	r13
    1362:	cf 90       	pop	r12
    1364:	bf 90       	pop	r11
    1366:	af 90       	pop	r10
    1368:	9f 90       	pop	r9
    136a:	8f 90       	pop	r8
    136c:	08 95       	ret

0000136e <initialize>:
#include "initialize.h"

uint8_t rebootackd;

void initialize(void)
{
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	2b 97       	sbiw	r28, 0x0b	; 11
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	rebootackd = NO;
    137c:	10 92 0e 28 	sts	0x280E, r1	; 0x80280e <rebootackd>
	timerOLED = 0;					// See oled.h
    1380:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    1384:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display; fast until !
    1388:	80 ee       	ldi	r24, 0xE0	; 224
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
    1390:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>

	init_PORTS();
    1394:	0e 94 79 10 	call	0x20f2	; 0x20f2 <init_PORTS>
	init_TWI();
    1398:	0e 94 33 2c 	call	0x5866	; 0x5866 <init_TWI>
	init_PNEU();
    139c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <init_PNEU>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
    13a0:	80 e2       	ldi	r24, 0x20	; 32
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 92 2b 	call	0x5724	; 0x5724 <init_RTC>
	init_MMA8451();	// Accelerometer; needs TWI
    13a8:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <init_MMA8451>
	init_OLED();	// Needs TWI
    13ac:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <init_OLED>
	init_EEPROM();	// Needs TWI to get boot time from clock
    13b0:	0e 94 30 08 	call	0x1060	; 0x1060 <init_EEPROM>
	init_USART();
    13b4:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <init_USART>
//	start_TCB0(1);	// 1 ms ticks for TWI & USART timeouts
	sei();
    13b8:	78 94       	sei
	init_MOTORS();	// Needs USART & interrupts on
    13ba:	0e 94 99 25 	call	0x4b32	; 0x4b32 <init_MOTORS>
	get_VERSION(versionstr);
    13be:	ce 01       	movw	r24, r28
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <get_VERSION>
	writestr_OLED(0,"specMech Version", 1);
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	66 e4       	ldi	r22, 0x46	; 70
    13ca:	72 eb       	ldi	r23, 0xB2	; 178
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <writestr_OLED>
	writestr_OLED(0, versionstr, 2);
    13d2:	42 e0       	ldi	r20, 0x02	; 2
    13d4:	be 01       	movw	r22, r28
    13d6:	6f 5f       	subi	r22, 0xFF	; 255
    13d8:	7f 4f       	sbci	r23, 0xFF	; 255
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <writestr_OLED>

}
    13e0:	2b 96       	adiw	r28, 0x0b	; 11
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	08 95       	ret

000013ec <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
    13ec:	cf 92       	push	r12
    13ee:	df 92       	push	r13
    13f0:	ef 92       	push	r14
    13f2:	ff 92       	push	r15
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <read_ionpump+0x12>
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <read_ionpump+0x14>
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	21 f0       	breq	.+8      	; 0x1410 <read_ionpump+0x24>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
    1408:	82 30       	cpi	r24, 0x02	; 2
    140a:	c1 f5       	brne	.+112    	; 0x147c <read_ionpump+0x90>
		pins = AIN23;
    140c:	40 e3       	ldi	r20, 0x30	; 48
    140e:	01 c0       	rjmp	.+2      	; 0x1412 <read_ionpump+0x26>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
    1410:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(BADFLOAT);
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
    1412:	8e 01       	movw	r16, r28
    1414:	0f 5f       	subi	r16, 0xFF	; 255
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
    1418:	20 e8       	ldi	r18, 0x80	; 128
    141a:	62 e0       	ldi	r22, 0x02	; 2
    141c:	89 e4       	ldi	r24, 0x49	; 73
    141e:	0e 94 c9 01 	call	0x392	; 0x392 <read_ADS1115>
    1422:	83 36       	cpi	r24, 0x63	; 99
    1424:	81 f1       	breq	.+96     	; 0x1486 <read_ionpump+0x9a>
		return(BADFLOAT);
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
    1426:	c9 80       	ldd	r12, Y+1	; 0x01
    1428:	da 80       	ldd	r13, Y+2	; 0x02
    142a:	eb 80       	ldd	r14, Y+3	; 0x03
    142c:	fc 80       	ldd	r15, Y+4	; 0x04
    142e:	2d ec       	ldi	r18, 0xCD	; 205
    1430:	3c ec       	ldi	r19, 0xCC	; 204
    1432:	4c ec       	ldi	r20, 0xCC	; 204
    1434:	5e e3       	ldi	r21, 0x3E	; 62
    1436:	c7 01       	movw	r24, r14
    1438:	b6 01       	movw	r22, r12
    143a:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <__cmpsf2>
    143e:	88 23       	and	r24, r24
    1440:	3c f1       	brlt	.+78     	; 0x1490 <read_ionpump+0xa4>
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e0       	ldi	r20, 0x00	; 0
    1448:	50 e4       	ldi	r21, 0x40	; 64
    144a:	c7 01       	movw	r24, r14
    144c:	b6 01       	movw	r22, r12
    144e:	0e 94 4b 31 	call	0x6296	; 0x6296 <__gesf2>
    1452:	18 16       	cp	r1, r24
    1454:	14 f1       	brlt	.+68     	; 0x149a <read_ionpump+0xae>
		return(BADFLOAT);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    1456:	29 e7       	ldi	r18, 0x79	; 121
    1458:	39 ee       	ldi	r19, 0xE9	; 233
    145a:	42 e0       	ldi	r20, 0x02	; 2
    145c:	50 e4       	ldi	r21, 0x40	; 64
    145e:	c7 01       	movw	r24, r14
    1460:	b6 01       	movw	r22, r12
    1462:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
    1466:	2e e6       	ldi	r18, 0x6E	; 110
    1468:	33 ea       	ldi	r19, 0xA3	; 163
    146a:	4b ed       	ldi	r20, 0xDB	; 219
    146c:	50 e4       	ldi	r21, 0x40	; 64
    146e:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <__subsf3>
	return(vacuum);
    1472:	56 2f       	mov	r21, r22
    1474:	47 2f       	mov	r20, r23
    1476:	38 2f       	mov	r19, r24
    1478:	29 2f       	mov	r18, r25
    147a:	13 c0       	rjmp	.+38     	; 0x14a2 <read_ionpump+0xb6>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(BADFLOAT);
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	40 e8       	ldi	r20, 0x80	; 128
    1480:	36 e2       	ldi	r19, 0x26	; 38
    1482:	24 ec       	ldi	r18, 0xC4	; 196
    1484:	0e c0       	rjmp	.+28     	; 0x14a2 <read_ionpump+0xb6>
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
		return(BADFLOAT);
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	40 e8       	ldi	r20, 0x80	; 128
    148a:	36 e2       	ldi	r19, 0x26	; 38
    148c:	24 ec       	ldi	r18, 0xC4	; 196
    148e:	09 c0       	rjmp	.+18     	; 0x14a2 <read_ionpump+0xb6>
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	40 e8       	ldi	r20, 0x80	; 128
    1494:	36 e2       	ldi	r19, 0x26	; 38
    1496:	24 ec       	ldi	r18, 0xC4	; 196
    1498:	04 c0       	rjmp	.+8      	; 0x14a2 <read_ionpump+0xb6>
	} else if (voltage > 2.0) {
		return(BADFLOAT);
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	36 e2       	ldi	r19, 0x26	; 38
    14a0:	24 ec       	ldi	r18, 0xC4	; 196
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
    14a2:	65 2f       	mov	r22, r21
    14a4:	74 2f       	mov	r23, r20
    14a6:	83 2f       	mov	r24, r19
    14a8:	92 2f       	mov	r25, r18
    14aa:	24 96       	adiw	r28, 0x04	; 4
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	ff 90       	pop	r15
    14ba:	ef 90       	pop	r14
    14bc:	df 90       	pop	r13
    14be:	cf 90       	pop	r12
    14c0:	08 95       	ret

000014c2 <main>:
uint8_t firstpass;

int main(void)
{

	firstpass = YES;		// Set to NO in commands.c
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	80 93 17 2a 	sts	0x2A17, r24	; 0x802a17 <firstpass>
	squelchErrors = YES;
    14c8:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <squelchErrors>

	CPU_CCP = CCP_IOREG_gc;
    14cc:	98 ed       	ldi	r25, 0xD8	; 216
    14ce:	94 bf       	out	0x34, r25	; 52
	CLKCTRL.MCLKCTRLB = CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm;
    14d0:	e0 e6       	ldi	r30, 0x60	; 96
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	81 83       	std	Z+1, r24	; 0x01
	CLKCTRL.MCLKCTRLB = CLKCTRL_LOCKEN_bm;
    14d6:	81 83       	std	Z+1, r24	; 0x01

	initialize();
    14d8:	0e 94 b7 09 	call	0x136e	; 0x136e <initialize>
	squelchErrors = NO;
    14dc:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <squelchErrors>

	for (;;) {
		if (recv0_buf.done) {
    14e0:	80 91 4a 2e 	lds	r24, 0x2E4A	; 0x802e4a <recv0_buf+0x103>
    14e4:	88 23       	and	r24, r24
    14e6:	21 f0       	breq	.+8      	; 0x14f0 <main+0x2e>
			recv0_buf.done = NO;
    14e8:	10 92 4a 2e 	sts	0x2E4A, r1	; 0x802e4a <recv0_buf+0x103>
			commands();
    14ec:	0e 94 60 04 	call	0x8c0	; 0x8c0 <commands>
		}

		if (timerOLED > timeoutOLED) {	// Display timeout
    14f0:	20 91 18 2a 	lds	r18, 0x2A18	; 0x802a18 <timerOLED>
    14f4:	30 91 19 2a 	lds	r19, 0x2A19	; 0x802a19 <timerOLED+0x1>
    14f8:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <timeoutOLED>
    14fc:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <timeoutOLED+0x1>
    1500:	82 17       	cp	r24, r18
    1502:	93 07       	cpc	r25, r19
    1504:	78 f4       	brcc	.+30     	; 0x1524 <main+0x62>
			squelchErrors = YES;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <squelchErrors>
			clear_OLED(0);
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <clear_OLED>
			clear_OLED(1);
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <clear_OLED>
			timerOLED = 0;
    1518:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    151c:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>
			squelchErrors = NO;
    1520:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <squelchErrors>
		} if ((timerSAVEENCODER > timeoutSAVEENCODER) && rebootackd) {
    1524:	90 91 3c 2a 	lds	r25, 0x2A3C	; 0x802a3c <timerSAVEENCODER>
    1528:	80 91 3b 2a 	lds	r24, 0x2A3B	; 0x802a3b <timeoutSAVEENCODER>
    152c:	89 17       	cp	r24, r25
    152e:	c0 f6       	brcc	.-80     	; 0x14e0 <main+0x1e>
    1530:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <rebootackd>
    1534:	88 23       	and	r24, r24
    1536:	a1 f2       	breq	.-88     	; 0x14e0 <main+0x1e>
			squelchErrors = YES;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <squelchErrors>
			put_FRAM_ENCODERS();	// Maybe set a global error variable?
    153e:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <put_FRAM_ENCODERS>
			timerSAVEENCODER = 0;
    1542:	10 92 3c 2a 	sts	0x2A3C, r1	; 0x802a3c <timerSAVEENCODER>
			squelchErrors = NO;
    1546:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <squelchErrors>
    154a:	ca cf       	rjmp	.-108    	; 0x14e0 <main+0x1e>

0000154c <read_MCP23008>:
	Returns:
		ERROR if TWI error
		NOERROR Otherwise
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	c8 2f       	mov	r28, r24
    1552:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
    155a:	83 36       	cpi	r24, 0x63	; 99
    155c:	51 f4       	brne	.+20     	; 0x1572 <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 read error");
    155e:	67 e5       	ldi	r22, 0x57	; 87
    1560:	72 eb       	ldi	r23, 0xB2	; 178
    1562:	82 e9       	ldi	r24, 0x92	; 146
    1564:	91 e0       	ldi	r25, 0x01	; 1
    1566:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		stop_TWI();
    156a:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(0xFF);
    156e:	8f ef       	ldi	r24, 0xFF	; 255
    1570:	19 c0       	rjmp	.+50     	; 0x15a4 <read_MCP23008+0x58>
	}
	write_TWI(reg);
    1572:	8d 2f       	mov	r24, r29
    1574:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
	if (start_TWI(addr, TWIREAD) == ERROR) {
    1578:	61 e0       	ldi	r22, 0x01	; 1
    157a:	8c 2f       	mov	r24, r28
    157c:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
    1580:	83 36       	cpi	r24, 0x63	; 99
    1582:	51 f4       	brne	.+20     	; 0x1598 <read_MCP23008+0x4c>
		printError(ERR_MCP23008, "MCP23008 read error");
    1584:	67 e5       	ldi	r22, 0x57	; 87
    1586:	72 eb       	ldi	r23, 0xB2	; 178
    1588:	82 e9       	ldi	r24, 0x92	; 146
    158a:	91 e0       	ldi	r25, 0x01	; 1
    158c:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		stop_TWI();
    1590:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(0xFF);
    1594:	8f ef       	ldi	r24, 0xFF	; 255
    1596:	06 c0       	rjmp	.+12     	; 0x15a4 <read_MCP23008+0x58>
	}
	value = readlast_TWI();
    1598:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <readlast_TWI>
    159c:	c8 2f       	mov	r28, r24
	stop_TWI();
    159e:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
	return(value);
    15a2:	8c 2f       	mov	r24, r28

}
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	08 95       	ret

000015aa <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	d6 2f       	mov	r29, r22
    15b2:	14 2f       	mov	r17, r20

	uint8_t retval;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
    15ba:	c8 2f       	mov	r28, r24
    15bc:	83 36       	cpi	r24, 0x63	; 99
    15be:	49 f4       	brne	.+18     	; 0x15d2 <write_MCP23008+0x28>
		printError(ERR_MCP23008, "MCP23008 write error");
    15c0:	6b e6       	ldi	r22, 0x6B	; 107
    15c2:	72 eb       	ldi	r23, 0xB2	; 178
    15c4:	82 e9       	ldi	r24, 0x92	; 146
    15c6:	91 e0       	ldi	r25, 0x01	; 1
    15c8:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		stop_TWI();
    15cc:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(ERROR);
    15d0:	15 c0       	rjmp	.+42     	; 0x15fc <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(reg))) {
    15d2:	8d 2f       	mov	r24, r29
    15d4:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
    15d8:	88 23       	and	r24, r24
    15da:	21 f0       	breq	.+8      	; 0x15e4 <write_MCP23008+0x3a>
		stop_TWI();
    15dc:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(ERROR);
    15e0:	c3 e6       	ldi	r28, 0x63	; 99
    15e2:	0c c0       	rjmp	.+24     	; 0x15fc <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(val))) {
    15e4:	81 2f       	mov	r24, r17
    15e6:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
    15ea:	88 23       	and	r24, r24
    15ec:	21 f0       	breq	.+8      	; 0x15f6 <write_MCP23008+0x4c>
		stop_TWI();
    15ee:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(ERROR);
    15f2:	c3 e6       	ldi	r28, 0x63	; 99
    15f4:	03 c0       	rjmp	.+6      	; 0x15fc <write_MCP23008+0x52>
	}
	stop_TWI();
    15f6:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
	return(NOERROR);
    15fa:	c0 e0       	ldi	r28, 0x00	; 0
	
}
    15fc:	8c 2f       	mov	r24, r28
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	08 95       	ret

00001606 <read_MCP9808>:
#include "errors.h"
#include "mcp9808.h"
#include "twi.h"

uint8_t read_MCP9808(float *temperature)
{
    1606:	8f 92       	push	r8
    1608:	9f 92       	push	r9
    160a:	af 92       	push	r10
    160c:	bf 92       	push	r11
    160e:	ff 92       	push	r15
    1610:	0f 93       	push	r16
    1612:	1f 93       	push	r17
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	8c 01       	movw	r16, r24

	uint8_t highbyte, lowbyte, sign;
	float temp;

	if (start_TWI(MCP9808ADDR, TWIWRITE) == ERROR) {
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	88 e1       	ldi	r24, 0x18	; 24
    161e:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
    1622:	83 36       	cpi	r24, 0x63	; 99
    1624:	51 f4       	brne	.+20     	; 0x163a <read_MCP9808+0x34>
		*temperature = BADFLOAT;
    1626:	40 e0       	ldi	r20, 0x00	; 0
    1628:	50 e8       	ldi	r21, 0x80	; 128
    162a:	66 e2       	ldi	r22, 0x26	; 38
    162c:	74 ec       	ldi	r23, 0xC4	; 196
    162e:	f8 01       	movw	r30, r16
    1630:	40 83       	st	Z, r20
    1632:	51 83       	std	Z+1, r21	; 0x01
    1634:	62 83       	std	Z+2, r22	; 0x02
    1636:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    1638:	43 c0       	rjmp	.+134    	; 0x16c0 <read_MCP9808+0xba>
	}
	write_TWI(TEMPREGISTER);
    163a:	85 e0       	ldi	r24, 0x05	; 5
    163c:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    1640:	61 e0       	ldi	r22, 0x01	; 1
    1642:	88 e1       	ldi	r24, 0x18	; 24
    1644:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
	highbyte = read_TWI();
    1648:	0e 94 3e 2c 	call	0x587c	; 0x587c <read_TWI>
    164c:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    164e:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <readlast_TWI>
    1652:	d8 2f       	mov	r29, r24
	stop_TWI();
    1654:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1658:	fc 2f       	mov	r31, r28
    165a:	f0 71       	andi	r31, 0x10	; 16
    165c:	ff 2e       	mov	r15, r31
	highbyte &= 0x0F;					// Clear threshold & sign bits
    165e:	6c 2f       	mov	r22, r28
    1660:	6f 70       	andi	r22, 0x0F	; 15
	temp = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 99 30 	call	0x6132	; 0x6132 <__floatunsisf>
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	40 e8       	ldi	r20, 0x80	; 128
    1672:	51 e4       	ldi	r21, 0x41	; 65
    1674:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
    1678:	4b 01       	movw	r8, r22
    167a:	5c 01       	movw	r10, r24
    167c:	6d 2f       	mov	r22, r29
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0e 94 99 30 	call	0x6132	; 0x6132 <__floatunsisf>
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e8       	ldi	r20, 0x80	; 128
    168e:	5d e3       	ldi	r21, 0x3D	; 61
    1690:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
    1694:	9b 01       	movw	r18, r22
    1696:	ac 01       	movw	r20, r24
    1698:	c5 01       	movw	r24, r10
    169a:	b4 01       	movw	r22, r8
    169c:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__addsf3>
	if (sign) {
    16a0:	ff 20       	and	r15, r15
    16a2:	41 f0       	breq	.+16     	; 0x16b4 <read_MCP9808+0xae>
		temp = 256.0 - temp;
    16a4:	9b 01       	movw	r18, r22
    16a6:	ac 01       	movw	r20, r24
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	80 e8       	ldi	r24, 0x80	; 128
    16ae:	93 e4       	ldi	r25, 0x43	; 67
    16b0:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <__subsf3>
	}
	*temperature = temp;
    16b4:	f8 01       	movw	r30, r16
    16b6:	60 83       	st	Z, r22
    16b8:	71 83       	std	Z+1, r23	; 0x01
    16ba:	82 83       	std	Z+2, r24	; 0x02
    16bc:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    16be:	80 e0       	ldi	r24, 0x00	; 0
}
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	ff 90       	pop	r15
    16ca:	bf 90       	pop	r11
    16cc:	af 90       	pop	r10
    16ce:	9f 90       	pop	r9
    16d0:	8f 90       	pop	r8
    16d2:	08 95       	ret

000016d4 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	f8 2e       	mov	r15, r24
    16e2:	e6 2e       	mov	r14, r22
    16e4:	ea 01       	movw	r28, r20
    16e6:	02 2f       	mov	r16, r18

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
    16ee:	18 2f       	mov	r17, r24
    16f0:	83 36       	cpi	r24, 0x63	; 99
    16f2:	19 f4       	brne	.+6      	; 0x16fa <read_MMA8451+0x26>
		stop_TWI();
    16f4:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(ERROR);
    16f8:	23 c0       	rjmp	.+70     	; 0x1740 <read_MMA8451+0x6c>
	}
	if (write_TWI(reg) == ERROR) {
    16fa:	8e 2d       	mov	r24, r14
    16fc:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
    1700:	18 2f       	mov	r17, r24
    1702:	83 36       	cpi	r24, 0x63	; 99
    1704:	e9 f0       	breq	.+58     	; 0x1740 <read_MMA8451+0x6c>
		return(ERROR);
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
    1706:	61 e0       	ldi	r22, 0x01	; 1
    1708:	8f 2d       	mov	r24, r15
    170a:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
    170e:	18 2f       	mov	r17, r24
    1710:	83 36       	cpi	r24, 0x63	; 99
    1712:	69 f4       	brne	.+26     	; 0x172e <read_MMA8451+0x5a>
		stop_TWI();
    1714:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(ERROR);
    1718:	13 c0       	rjmp	.+38     	; 0x1740 <read_MMA8451+0x6c>
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    171a:	7e 01       	movw	r14, r28
    171c:	8f ef       	ldi	r24, 0xFF	; 255
    171e:	e8 1a       	sub	r14, r24
    1720:	f8 0a       	sbc	r15, r24
    1722:	0e 94 3e 2c 	call	0x587c	; 0x587c <read_TWI>
    1726:	88 83       	st	Y, r24
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    1728:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    172a:	e7 01       	movw	r28, r14
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <read_MMA8451+0x5c>
    172e:	11 e0       	ldi	r17, 0x01	; 1
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    1730:	10 17       	cp	r17, r16
    1732:	98 f3       	brcs	.-26     	; 0x171a <read_MMA8451+0x46>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    1734:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <readlast_TWI>
    1738:	88 83       	st	Y, r24
	stop_TWI();
    173a:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
	return(NOERROR);
    173e:	10 e0       	ldi	r17, 0x00	; 0

}
    1740:	81 2f       	mov	r24, r17
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
    174e:	08 95       	ret

00001750 <get_orientation>:
uint8_t get_orientation(float *x, float *y, float *z)
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
uint8_t get_orientation(float *x, float *y, float *z)
{
    1750:	cf 92       	push	r12
    1752:	df 92       	push	r13
    1754:	ef 92       	push	r14
    1756:	ff 92       	push	r15
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	26 97       	sbiw	r28, 0x06	; 6
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	6c 01       	movw	r12, r24
    176c:	7b 01       	movw	r14, r22
    176e:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = BADFLOAT;
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e8       	ldi	r25, 0x80	; 128
    1774:	a6 e2       	ldi	r26, 0x26	; 38
    1776:	b4 ec       	ldi	r27, 0xC4	; 196
    1778:	fa 01       	movw	r30, r20
    177a:	80 83       	st	Z, r24
    177c:	91 83       	std	Z+1, r25	; 0x01
    177e:	a2 83       	std	Z+2, r26	; 0x02
    1780:	b3 83       	std	Z+3, r27	; 0x03
    1782:	fb 01       	movw	r30, r22
    1784:	80 83       	st	Z, r24
    1786:	91 83       	std	Z+1, r25	; 0x01
    1788:	a2 83       	std	Z+2, r26	; 0x02
    178a:	b3 83       	std	Z+3, r27	; 0x03
    178c:	f6 01       	movw	r30, r12
    178e:	80 83       	st	Z, r24
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	a2 83       	std	Z+2, r26	; 0x02
    1794:	b3 83       	std	Z+3, r27	; 0x03

	if (read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6) == ERROR) {
    1796:	26 e0       	ldi	r18, 0x06	; 6
    1798:	ae 01       	movw	r20, r28
    179a:	4f 5f       	subi	r20, 0xFF	; 255
    179c:	5f 4f       	sbci	r21, 0xFF	; 255
    179e:	61 e0       	ldi	r22, 0x01	; 1
    17a0:	8d e1       	ldi	r24, 0x1D	; 29
    17a2:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <read_MMA8451>
    17a6:	83 36       	cpi	r24, 0x63	; 99
    17a8:	09 f4       	brne	.+2      	; 0x17ac <get_orientation+0x5c>
    17aa:	64 c0       	rjmp	.+200    	; 0x1874 <__DATA_REGION_LENGTH__+0x74>
		return(ERROR);
	}

	ix = datain[0];
    17ac:	69 81       	ldd	r22, Y+1	; 0x01
    17ae:	70 e0       	ldi	r23, 0x00	; 0
	ix <<= 8;
    17b0:	76 2f       	mov	r23, r22
    17b2:	66 27       	eor	r22, r22
	ix |= datain[1];
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	68 2b       	or	r22, r24
	ix >>= 2;
    17b8:	75 95       	asr	r23
    17ba:	67 95       	ror	r22
    17bc:	75 95       	asr	r23
    17be:	67 95       	ror	r22
	*x = 980.6 * ((float) ix/4096.0);
    17c0:	07 2e       	mov	r0, r23
    17c2:	00 0c       	add	r0, r0
    17c4:	88 0b       	sbc	r24, r24
    17c6:	99 0b       	sbc	r25, r25
    17c8:	0e 94 9b 30 	call	0x6136	; 0x6136 <__floatsisf>
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	59 e3       	ldi	r21, 0x39	; 57
    17d4:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
    17d8:	26 e6       	ldi	r18, 0x66	; 102
    17da:	36 e2       	ldi	r19, 0x26	; 38
    17dc:	45 e7       	ldi	r20, 0x75	; 117
    17de:	54 e4       	ldi	r21, 0x44	; 68
    17e0:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
    17e4:	f6 01       	movw	r30, r12
    17e6:	60 83       	st	Z, r22
    17e8:	71 83       	std	Z+1, r23	; 0x01
    17ea:	82 83       	std	Z+2, r24	; 0x02
    17ec:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    17ee:	6b 81       	ldd	r22, Y+3	; 0x03
    17f0:	70 e0       	ldi	r23, 0x00	; 0
	iy <<= 8;
    17f2:	76 2f       	mov	r23, r22
    17f4:	66 27       	eor	r22, r22
	iy |= datain[3];
    17f6:	8c 81       	ldd	r24, Y+4	; 0x04
    17f8:	68 2b       	or	r22, r24
	iy >>= 2;
    17fa:	75 95       	asr	r23
    17fc:	67 95       	ror	r22
    17fe:	75 95       	asr	r23
    1800:	67 95       	ror	r22
	*y = 980.6 * ((float) iy/4096.0);
    1802:	07 2e       	mov	r0, r23
    1804:	00 0c       	add	r0, r0
    1806:	88 0b       	sbc	r24, r24
    1808:	99 0b       	sbc	r25, r25
    180a:	0e 94 9b 30 	call	0x6136	; 0x6136 <__floatsisf>
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e8       	ldi	r20, 0x80	; 128
    1814:	59 e3       	ldi	r21, 0x39	; 57
    1816:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
    181a:	26 e6       	ldi	r18, 0x66	; 102
    181c:	36 e2       	ldi	r19, 0x26	; 38
    181e:	45 e7       	ldi	r20, 0x75	; 117
    1820:	54 e4       	ldi	r21, 0x44	; 68
    1822:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
    1826:	f7 01       	movw	r30, r14
    1828:	60 83       	st	Z, r22
    182a:	71 83       	std	Z+1, r23	; 0x01
    182c:	82 83       	std	Z+2, r24	; 0x02
    182e:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    1830:	6d 81       	ldd	r22, Y+5	; 0x05
    1832:	70 e0       	ldi	r23, 0x00	; 0
	iz <<= 8;
    1834:	76 2f       	mov	r23, r22
    1836:	66 27       	eor	r22, r22
	iz |= datain[5];
    1838:	8e 81       	ldd	r24, Y+6	; 0x06
    183a:	68 2b       	or	r22, r24
	iz >>= 2;
    183c:	75 95       	asr	r23
    183e:	67 95       	ror	r22
    1840:	75 95       	asr	r23
    1842:	67 95       	ror	r22
	*z = 980.6 * ((float) iz/4096.0);
    1844:	07 2e       	mov	r0, r23
    1846:	00 0c       	add	r0, r0
    1848:	88 0b       	sbc	r24, r24
    184a:	99 0b       	sbc	r25, r25
    184c:	0e 94 9b 30 	call	0x6136	; 0x6136 <__floatsisf>
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e8       	ldi	r20, 0x80	; 128
    1856:	59 e3       	ldi	r21, 0x39	; 57
    1858:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
    185c:	26 e6       	ldi	r18, 0x66	; 102
    185e:	36 e2       	ldi	r19, 0x26	; 38
    1860:	45 e7       	ldi	r20, 0x75	; 117
    1862:	54 e4       	ldi	r21, 0x44	; 68
    1864:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
    1868:	f8 01       	movw	r30, r16
    186a:	60 83       	st	Z, r22
    186c:	71 83       	std	Z+1, r23	; 0x01
    186e:	82 83       	std	Z+2, r24	; 0x02
    1870:	93 83       	std	Z+3, r25	; 0x03

	return(0);
    1872:	80 e0       	ldi	r24, 0x00	; 0

}
    1874:	26 96       	adiw	r28, 0x06	; 6
    1876:	cd bf       	out	0x3d, r28	; 61
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	ff 90       	pop	r15
    1884:	ef 90       	pop	r14
    1886:	df 90       	pop	r13
    1888:	cf 90       	pop	r12
    188a:	08 95       	ret

0000188c <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	d6 2f       	mov	r29, r22
    1894:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
    189c:	c8 2f       	mov	r28, r24
    189e:	88 23       	and	r24, r24
    18a0:	21 f0       	breq	.+8      	; 0x18aa <write_MMA8451+0x1e>
		stop_TWI();
    18a2:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(retval);
    18a6:	8c 2f       	mov	r24, r28
    18a8:	17 c0       	rjmp	.+46     	; 0x18d8 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    18aa:	8d 2f       	mov	r24, r29
    18ac:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
    18b0:	c8 2f       	mov	r28, r24
    18b2:	88 23       	and	r24, r24
    18b4:	21 f0       	breq	.+8      	; 0x18be <write_MMA8451+0x32>
		stop_TWI();
    18b6:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(retval);
    18ba:	8c 2f       	mov	r24, r28
    18bc:	0d c0       	rjmp	.+26     	; 0x18d8 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    18be:	81 2f       	mov	r24, r17
    18c0:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
    18c4:	c8 2f       	mov	r28, r24
    18c6:	88 23       	and	r24, r24
    18c8:	21 f0       	breq	.+8      	; 0x18d2 <write_MMA8451+0x46>
		stop_TWI();
    18ca:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
		return(retval);
    18ce:	8c 2f       	mov	r24, r28
    18d0:	03 c0       	rjmp	.+6      	; 0x18d8 <write_MMA8451+0x4c>
	}
	stop_TWI();
    18d2:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>
	return(0);
    18d6:	80 e0       	ldi	r24, 0x00	; 0
	
}
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	1f 91       	pop	r17
    18de:	08 95       	ret

000018e0 <init_MMA8451>:
	sampling frequency (1.56 Hz), a low cutoff frequency on the high pass
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/
uint8_t init_MMA8451(void)
{
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	1f 92       	push	r1
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    18ea:	40 e4       	ldi	r20, 0x40	; 64
    18ec:	6b e2       	ldi	r22, 0x2B	; 43
    18ee:	8d e1       	ldi	r24, 0x1D	; 29
    18f0:	0e 94 46 0c 	call	0x188c	; 0x188c <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    18f4:	21 e0       	ldi	r18, 0x01	; 1
    18f6:	ae 01       	movw	r20, r28
    18f8:	4f 5f       	subi	r20, 0xFF	; 255
    18fa:	5f 4f       	sbci	r21, 0xFF	; 255
    18fc:	6b e2       	ldi	r22, 0x2B	; 43
    18fe:	8d e1       	ldi	r24, 0x1D	; 29
    1900:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <read_MMA8451>
	while (retval & 0x40) {
    1904:	08 c0       	rjmp	.+16     	; 0x1916 <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    1906:	21 e0       	ldi	r18, 0x01	; 1
    1908:	ae 01       	movw	r20, r28
    190a:	4f 5f       	subi	r20, 0xFF	; 255
    190c:	5f 4f       	sbci	r21, 0xFF	; 255
    190e:	6b e2       	ldi	r22, 0x2B	; 43
    1910:	8d e1       	ldi	r24, 0x1D	; 29
    1912:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	86 fd       	sbrc	r24, 6
    191a:	f5 cf       	rjmp	.-22     	; 0x1906 <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    191c:	40 ec       	ldi	r20, 0xC0	; 192
    191e:	6f e0       	ldi	r22, 0x0F	; 15
    1920:	8d e1       	ldi	r24, 0x1D	; 29
    1922:	0e 94 46 0c 	call	0x188c	; 0x188c <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    1926:	42 e0       	ldi	r20, 0x02	; 2
    1928:	6b e2       	ldi	r22, 0x2B	; 43
    192a:	8d e1       	ldi	r24, 0x1D	; 29
    192c:	0e 94 46 0c 	call	0x188c	; 0x188c <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    1930:	4d e3       	ldi	r20, 0x3D	; 61
    1932:	6a e2       	ldi	r22, 0x2A	; 42
    1934:	8d e1       	ldi	r24, 0x1D	; 29
    1936:	0e 94 46 0c 	call	0x188c	; 0x188c <write_MMA8451>

	return(retval);

}
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	0f 90       	pop	r0
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	08 95       	ret

00001944 <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum and \r\n to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	2e 97       	sbiw	r28, 0x0e	; 14
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    195c:	88 e0       	ldi	r24, 0x08	; 8
    195e:	e0 e8       	ldi	r30, 0x80	; 128
    1960:	f2 eb       	ldi	r31, 0xB2	; 178
    1962:	de 01       	movw	r26, r28
    1964:	11 96       	adiw	r26, 0x01	; 1
    1966:	01 90       	ld	r0, Z+
    1968:	0d 92       	st	X+, r0
    196a:	8a 95       	dec	r24
    196c:	e1 f7       	brne	.-8      	; 0x1966 <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    196e:	f8 01       	movw	r30, r16
    1970:	01 90       	ld	r0, Z+
    1972:	00 20       	and	r0, r0
    1974:	e9 f7       	brne	.-6      	; 0x1970 <checksum_NMEA+0x2c>
    1976:	31 97       	sbiw	r30, 0x01	; 1
    1978:	3e 2f       	mov	r19, r30
    197a:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    197c:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	06 c0       	rjmp	.+12     	; 0x198e <checksum_NMEA+0x4a>
		checksum ^= str[i];
    1982:	f8 01       	movw	r30, r16
    1984:	e8 0f       	add	r30, r24
    1986:	f1 1d       	adc	r31, r1
    1988:	20 81       	ld	r18, Z
    198a:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    198c:	8f 5f       	subi	r24, 0xFF	; 255
    198e:	83 17       	cp	r24, r19
    1990:	c0 f3       	brcs	.-16     	; 0x1982 <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1992:	1f 92       	push	r1
    1994:	9f 93       	push	r25
    1996:	ce 01       	movw	r24, r28
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	9f 93       	push	r25
    199c:	8f 93       	push	r24
    199e:	7e 01       	movw	r14, r28
    19a0:	89 e0       	ldi	r24, 0x09	; 9
    19a2:	e8 0e       	add	r14, r24
    19a4:	f1 1c       	adc	r15, r1
    19a6:	ff 92       	push	r15
    19a8:	ef 92       	push	r14
    19aa:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
	strcat(str, chksum);
    19ae:	b7 01       	movw	r22, r14
    19b0:	c8 01       	movw	r24, r16
    19b2:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <strcat>

}
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	2e 96       	adiw	r28, 0x0e	; 14
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	ff 90       	pop	r15
    19d2:	ef 90       	pop	r14
    19d4:	08 95       	ret

000019d6 <reset_OLED>:
void reset_OLED(void)
	Pulls the OLED display reset line low for 1 ms. This seems to be needed.
------------------------------------------------------------------------------*/
void reset_OLED(void)
{
	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    19d6:	e0 e6       	ldi	r30, 0x60	; 96
    19d8:	f4 e0       	ldi	r31, 0x04	; 4
    19da:	80 e4       	ldi	r24, 0x40	; 64
    19dc:	86 83       	std	Z+6, r24	; 0x06
	PORTD.DIRSET = PIN6_bm;
    19de:	81 83       	std	Z+1, r24	; 0x01
    19e0:	a3 ec       	ldi	r26, 0xC3	; 195
    19e2:	b9 e0       	ldi	r27, 0x09	; 9
    19e4:	11 97       	sbiw	r26, 0x01	; 1
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <reset_OLED+0xe>
    19e8:	00 c0       	rjmp	.+0      	; 0x19ea <reset_OLED+0x14>
    19ea:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    19ec:	85 83       	std	Z+5, r24	; 0x05
    19ee:	08 95       	ret

000019f0 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	d6 2f       	mov	r29, r22
    19f6:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    19f8:	60 e0       	ldi	r22, 0x00	; 0
    19fa:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <start_TWI>
	write_TWI(type);
    19fe:	8d 2f       	mov	r24, r29
    1a00:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
	write_TWI(byteToSend);
    1a04:	8c 2f       	mov	r24, r28
    1a06:	0e 94 cd 2c 	call	0x599a	; 0x599a <write_TWI>
	stop_TWI();
    1a0a:	0e 94 c9 2c 	call	0x5992	; 0x5992 <stop_TWI>

}
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	08 95       	ret

00001a14 <init_OLEDDISPLAY>:
	Initialize a Newhaven NHD-0216AW-1B3 OLED display. This is taken straight
	from https://github.com/NewhavenDisplay/NHD_US2066. The manual is not easy
	to understand but this seems to work.
------------------------------------------------------------------------------*/
void init_OLEDDISPLAY(uint8_t displaynumber)
{
    1a14:	cf 93       	push	r28

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
    1a16:	88 23       	and	r24, r24
    1a18:	29 f0       	breq	.+10     	; 0x1a24 <init_OLEDDISPLAY+0x10>
		twiaddr = OLEDADDR0;		
	} else if (displaynumber == 1) {	// Left-side display
    1a1a:	81 30       	cpi	r24, 0x01	; 1
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <init_OLEDDISPLAY+0xc>
    1a1e:	9e c0       	rjmp	.+316    	; 0x1b5c <init_OLEDDISPLAY+0x148>
		twiaddr = OLEDADDR1;
    1a20:	cd e3       	ldi	r28, 0x3D	; 61
    1a22:	01 c0       	rjmp	.+2      	; 0x1a26 <init_OLEDDISPLAY+0x12>
{

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
		twiaddr = OLEDADDR0;		
    1a24:	cc e3       	ldi	r28, 0x3C	; 60
		twiaddr = OLEDADDR1;
	} else {
		return;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    1a26:	4a e2       	ldi	r20, 0x2A	; 42
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	8c 2f       	mov	r24, r28
    1a2c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    1a30:	41 e7       	ldi	r20, 0x71	; 113
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	8c 2f       	mov	r24, r28
    1a36:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    1a3a:	4c e5       	ldi	r20, 0x5C	; 92
    1a3c:	60 e4       	ldi	r22, 0x40	; 64
    1a3e:	8c 2f       	mov	r24, r28
    1a40:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1a44:	48 e2       	ldi	r20, 0x28	; 40
    1a46:	60 e0       	ldi	r22, 0x00	; 0
    1a48:	8c 2f       	mov	r24, r28
    1a4a:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    1a4e:	48 e0       	ldi	r20, 0x08	; 8
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	8c 2f       	mov	r24, r28
    1a54:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1a58:	4a e2       	ldi	r20, 0x2A	; 42
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	8c 2f       	mov	r24, r28
    1a5e:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1a62:	49 e7       	ldi	r20, 0x79	; 121
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	8c 2f       	mov	r24, r28
    1a68:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    1a6c:	45 ed       	ldi	r20, 0xD5	; 213
    1a6e:	60 e0       	ldi	r22, 0x00	; 0
    1a70:	8c 2f       	mov	r24, r28
    1a72:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    1a76:	40 e7       	ldi	r20, 0x70	; 112
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	8c 2f       	mov	r24, r28
    1a7c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1a80:	48 e7       	ldi	r20, 0x78	; 120
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	8c 2f       	mov	r24, r28
    1a86:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    1a8a:	48 e0       	ldi	r20, 0x08	; 8
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
    1a8e:	8c 2f       	mov	r24, r28
    1a90:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1a94:	46 e0       	ldi	r20, 0x06	; 6
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	8c 2f       	mov	r24, r28
    1a9a:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1a9e:	42 e7       	ldi	r20, 0x72	; 114
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	8c 2f       	mov	r24, r28
    1aa4:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	60 e4       	ldi	r22, 0x40	; 64
    1aac:	8c 2f       	mov	r24, r28
    1aae:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1ab2:	4a e2       	ldi	r20, 0x2A	; 42
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	8c 2f       	mov	r24, r28
    1ab8:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1abc:	49 e7       	ldi	r20, 0x79	; 121
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	8c 2f       	mov	r24, r28
    1ac2:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    1ac6:	4a ed       	ldi	r20, 0xDA	; 218
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	8c 2f       	mov	r24, r28
    1acc:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	60 e0       	ldi	r22, 0x00	; 0
    1ad4:	8c 2f       	mov	r24, r28
    1ad6:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    1ada:	4c ed       	ldi	r20, 0xDC	; 220
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	8c 2f       	mov	r24, r28
    1ae0:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	8c 2f       	mov	r24, r28
    1aea:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    1aee:	41 e8       	ldi	r20, 0x81	; 129
    1af0:	60 e0       	ldi	r22, 0x00	; 0
    1af2:	8c 2f       	mov	r24, r28
    1af4:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    1af8:	4f e7       	ldi	r20, 0x7F	; 127
    1afa:	60 e0       	ldi	r22, 0x00	; 0
    1afc:	8c 2f       	mov	r24, r28
    1afe:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1b02:	49 ed       	ldi	r20, 0xD9	; 217
    1b04:	60 e0       	ldi	r22, 0x00	; 0
    1b06:	8c 2f       	mov	r24, r28
    1b08:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    1b0c:	41 ef       	ldi	r20, 0xF1	; 241
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	8c 2f       	mov	r24, r28
    1b12:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    1b16:	4b ed       	ldi	r20, 0xDB	; 219
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	8c 2f       	mov	r24, r28
    1b1c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    1b20:	40 e4       	ldi	r20, 0x40	; 64
    1b22:	60 e0       	ldi	r22, 0x00	; 0
    1b24:	8c 2f       	mov	r24, r28
    1b26:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1b2a:	48 e7       	ldi	r20, 0x78	; 120
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	8c 2f       	mov	r24, r28
    1b30:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1b34:	48 e2       	ldi	r20, 0x28	; 40
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	8c 2f       	mov	r24, r28
    1b3a:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	8c 2f       	mov	r24, r28
    1b44:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    1b48:	40 e8       	ldi	r20, 0x80	; 128
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	8c 2f       	mov	r24, r28
    1b4e:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    1b52:	4c e0       	ldi	r20, 0x0C	; 12
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	8c 2f       	mov	r24, r28
    1b58:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>

}
    1b5c:	cf 91       	pop	r28
    1b5e:	08 95       	ret

00001b60 <init_OLED>:
	Set up the two OLED displays
------------------------------------------------------------------------------*/
void init_OLED(void)
{

	reset_OLED();				// Need to start with a reset
    1b60:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <reset_OLED>
	init_OLEDDISPLAY(0);
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <init_OLEDDISPLAY>
	init_OLEDDISPLAY(1);
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <init_OLEDDISPLAY>
    1b70:	2f e3       	ldi	r18, 0x3F	; 63
    1b72:	8d e0       	ldi	r24, 0x0D	; 13
    1b74:	93 e0       	ldi	r25, 0x03	; 3
    1b76:	21 50       	subi	r18, 0x01	; 1
    1b78:	80 40       	sbci	r24, 0x00	; 0
    1b7a:	90 40       	sbci	r25, 0x00	; 0
    1b7c:	e1 f7       	brne	.-8      	; 0x1b76 <init_OLED+0x16>
    1b7e:	00 c0       	rjmp	.+0      	; 0x1b80 <init_OLED+0x20>
    1b80:	00 00       	nop
    1b82:	08 95       	ret

00001b84 <writestr_OLED>:
	
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.
------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1b84:	ef 92       	push	r14
    1b86:	ff 92       	push	r15
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	e2 97       	sbiw	r28, 0x32	; 50
    1b96:	cd bf       	out	0x3d, r28	; 61
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    1b9c:	91 e1       	ldi	r25, 0x11	; 17
    1b9e:	e8 e8       	ldi	r30, 0x88	; 136
    1ba0:	f2 eb       	ldi	r31, 0xB2	; 178
    1ba2:	de 01       	movw	r26, r28
    1ba4:	92 96       	adiw	r26, 0x22	; 34
    1ba6:	01 90       	ld	r0, Z+
    1ba8:	0d 92       	st	X+, r0
    1baa:	9a 95       	dec	r25
    1bac:	e1 f7       	brne	.-8      	; 0x1ba6 <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1bae:	81 11       	cpse	r24, r1
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1bb2:	0c e3       	ldi	r16, 0x3C	; 60
    1bb4:	01 c0       	rjmp	.+2      	; 0x1bb8 <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1bb6:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    1bb8:	ce 01       	movw	r24, r28
    1bba:	01 96       	adiw	r24, 0x01	; 1
    1bbc:	7c 01       	movw	r14, r24
    1bbe:	0e 94 27 37 	call	0x6e4e	; 0x6e4e <strcpy>
	if (strlen(strbuf) > 16) {
    1bc2:	f7 01       	movw	r30, r14
    1bc4:	01 90       	ld	r0, Z+
    1bc6:	00 20       	and	r0, r0
    1bc8:	e9 f7       	brne	.-6      	; 0x1bc4 <writestr_OLED+0x40>
    1bca:	31 97       	sbiw	r30, 0x01	; 1
    1bcc:	ee 19       	sub	r30, r14
    1bce:	ff 09       	sbc	r31, r15
    1bd0:	71 97       	sbiw	r30, 0x11	; 17
    1bd2:	08 f0       	brcs	.+2      	; 0x1bd6 <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1bd4:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1bd6:	be 01       	movw	r22, r28
    1bd8:	6e 5d       	subi	r22, 0xDE	; 222
    1bda:	7f 4f       	sbci	r23, 0xFF	; 255
    1bdc:	ce 01       	movw	r24, r28
    1bde:	01 96       	adiw	r24, 0x01	; 1
    1be0:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <strcat>

	if (lineno == 1) {
    1be4:	11 30       	cpi	r17, 0x01	; 1
    1be6:	39 f4       	brne	.+14     	; 0x1bf6 <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    1be8:	40 e8       	ldi	r20, 0x80	; 128
    1bea:	60 e0       	ldi	r22, 0x00	; 0
    1bec:	80 2f       	mov	r24, r16
    1bee:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1bf2:	10 e0       	ldi	r17, 0x00	; 0
    1bf4:	12 c0       	rjmp	.+36     	; 0x1c1a <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1bf6:	40 ec       	ldi	r20, 0xC0	; 192
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	80 2f       	mov	r24, r16
    1bfc:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>
    1c00:	f8 cf       	rjmp	.-16     	; 0x1bf2 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1c02:	e1 e0       	ldi	r30, 0x01	; 1
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	ec 0f       	add	r30, r28
    1c08:	fd 1f       	adc	r31, r29
    1c0a:	e1 0f       	add	r30, r17
    1c0c:	f1 1d       	adc	r31, r1
    1c0e:	40 81       	ld	r20, Z
    1c10:	60 e4       	ldi	r22, 0x40	; 64
    1c12:	80 2f       	mov	r24, r16
    1c14:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    1c18:	1f 5f       	subi	r17, 0xFF	; 255
    1c1a:	10 31       	cpi	r17, 0x10	; 16
    1c1c:	90 f3       	brcs	.-28     	; 0x1c02 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 0;
    1c1e:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    1c22:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>

}
    1c26:	e2 96       	adiw	r28, 0x32	; 50
    1c28:	cd bf       	out	0x3d, r28	; 61
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	1f 91       	pop	r17
    1c32:	0f 91       	pop	r16
    1c34:	ff 90       	pop	r15
    1c36:	ef 90       	pop	r14
    1c38:	08 95       	ret

00001c3a <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    1c3a:	1f 93       	push	r17
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	1f 92       	push	r1
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	18 2f       	mov	r17, r24

	char nullstr[] = "";
    1c48:	19 82       	std	Y+1, r1	; 0x01
	writestr_OLED(displaynumber, nullstr, 1);
    1c4a:	41 e0       	ldi	r20, 0x01	; 1
    1c4c:	be 01       	movw	r22, r28
    1c4e:	6f 5f       	subi	r22, 0xFF	; 255
    1c50:	7f 4f       	sbci	r23, 0xFF	; 255
    1c52:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
    1c56:	42 e0       	ldi	r20, 0x02	; 2
    1c58:	be 01       	movw	r22, r28
    1c5a:	6f 5f       	subi	r22, 0xFF	; 255
    1c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5e:	81 2f       	mov	r24, r17
    1c60:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <writestr_OLED>
	timerOLED = 0;
    1c64:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    1c68:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>

}
    1c6c:	0f 90       	pop	r0
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	1f 91       	pop	r17
    1c74:	08 95       	ret

00001c76 <init_PNEU>:
	is assumed to be in input mode.
------------------------------------------------------------------------------*/
uint8_t init_PNEU(void)
{

	if (write_MCP23008(HIGHCURRENT, IODIR, 0x00) == ERROR) {
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	84 e2       	ldi	r24, 0x24	; 36
    1c7c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <write_MCP23008>
    1c80:	83 36       	cpi	r24, 0x63	; 99
    1c82:	a9 f1       	breq	.+106    	; 0x1cee <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(HIGHCURRENT, OLAT, 0x00) == ERROR) {
    1c84:	40 e0       	ldi	r20, 0x00	; 0
    1c86:	6a e0       	ldi	r22, 0x0A	; 10
    1c88:	84 e2       	ldi	r24, 0x24	; 36
    1c8a:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <write_MCP23008>
    1c8e:	83 36       	cpi	r24, 0x63	; 99
    1c90:	71 f1       	breq	.+92     	; 0x1cee <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IODIR, 0xFE) == ERROR) {	// Inputs
    1c92:	4e ef       	ldi	r20, 0xFE	; 254
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	81 e2       	ldi	r24, 0x21	; 33
    1c98:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <write_MCP23008>
    1c9c:	83 36       	cpi	r24, 0x63	; 99
    1c9e:	39 f1       	breq	.+78     	; 0x1cee <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IPOL, 0x00) == ERROR) {
    1ca0:	40 e0       	ldi	r20, 0x00	; 0
    1ca2:	61 e0       	ldi	r22, 0x01	; 1
    1ca4:	81 e2       	ldi	r24, 0x21	; 33
    1ca6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <write_MCP23008>
    1caa:	83 36       	cpi	r24, 0x63	; 99
    1cac:	01 f1       	breq	.+64     	; 0x1cee <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100) == ERROR) {
    1cae:	4c ef       	ldi	r20, 0xFC	; 252
    1cb0:	62 e0       	ldi	r22, 0x02	; 2
    1cb2:	81 e2       	ldi	r24, 0x21	; 33
    1cb4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <write_MCP23008>
    1cb8:	83 36       	cpi	r24, 0x63	; 99
    1cba:	c9 f0       	breq	.+50     	; 0x1cee <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, INTCON, 0x00) == ERROR) {
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	64 e0       	ldi	r22, 0x04	; 4
    1cc0:	81 e2       	ldi	r24, 0x21	; 33
    1cc2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <write_MCP23008>
    1cc6:	83 36       	cpi	r24, 0x63	; 99
    1cc8:	91 f0       	breq	.+36     	; 0x1cee <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IOCON, 0x20) == ERROR) { // Don't increment addr
    1cca:	40 e2       	ldi	r20, 0x20	; 32
    1ccc:	65 e0       	ldi	r22, 0x05	; 5
    1cce:	81 e2       	ldi	r24, 0x21	; 33
    1cd0:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <write_MCP23008>
    1cd4:	83 36       	cpi	r24, 0x63	; 99
    1cd6:	59 f0       	breq	.+22     	; 0x1cee <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPPU, 0x7F) == ERROR) { // Pullups (not really needed)
    1cd8:	4f e7       	ldi	r20, 0x7F	; 127
    1cda:	66 e0       	ldi	r22, 0x06	; 6
    1cdc:	81 e2       	ldi	r24, 0x21	; 33
    1cde:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <write_MCP23008>
    1ce2:	83 36       	cpi	r24, 0x63	; 99
    1ce4:	21 f0       	breq	.+8      	; 0x1cee <init_PNEU+0x78>
		return(ERROR);
	}

	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    1ce6:	89 e0       	ldi	r24, 0x09	; 9
    1ce8:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>

	return(NOERROR);
    1cec:	80 e0       	ldi	r24, 0x00	; 0

}
    1cee:	08 95       	ret

00001cf0 <read_PNEUSensors>:
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
{
    1cf0:	cf 92       	push	r12
    1cf2:	df 92       	push	r13
    1cf4:	ef 92       	push	r14
    1cf6:	ff 92       	push	r15
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	6c 01       	movw	r12, r24
    1d02:	8b 01       	movw	r16, r22
    1d04:	7a 01       	movw	r14, r20
    1d06:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);	// NEEDS ERRORCHECK
    1d08:	69 e0       	ldi	r22, 0x09	; 9
    1d0a:	81 e2       	ldi	r24, 0x21	; 33
    1d0c:	0e 94 a6 0a 	call	0x154c	; 0x154c <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1d10:	98 2f       	mov	r25, r24
    1d12:	92 95       	swap	r25
    1d14:	96 95       	lsr	r25
    1d16:	96 95       	lsr	r25
    1d18:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    1d1a:	91 30       	cpi	r25, 0x01	; 1
    1d1c:	21 f4       	brne	.+8      	; 0x1d26 <read_PNEUSensors+0x36>
		*shutter = 'c';
    1d1e:	93 e6       	ldi	r25, 0x63	; 99
    1d20:	f6 01       	movw	r30, r12
    1d22:	90 83       	st	Z, r25
    1d24:	0f c0       	rjmp	.+30     	; 0x1d44 <read_PNEUSensors+0x54>
	} else if (state == 2) {
    1d26:	92 30       	cpi	r25, 0x02	; 2
    1d28:	21 f4       	brne	.+8      	; 0x1d32 <read_PNEUSensors+0x42>
		*shutter = 'o';
    1d2a:	9f e6       	ldi	r25, 0x6F	; 111
    1d2c:	f6 01       	movw	r30, r12
    1d2e:	90 83       	st	Z, r25
    1d30:	09 c0       	rjmp	.+18     	; 0x1d44 <read_PNEUSensors+0x54>
	} else if (state == 3) {
    1d32:	93 30       	cpi	r25, 0x03	; 3
    1d34:	21 f4       	brne	.+8      	; 0x1d3e <read_PNEUSensors+0x4e>
		*shutter = 't';
    1d36:	94 e7       	ldi	r25, 0x74	; 116
    1d38:	f6 01       	movw	r30, r12
    1d3a:	90 83       	st	Z, r25
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <read_PNEUSensors+0x54>
	} else {
		*shutter = 'x';
    1d3e:	98 e7       	ldi	r25, 0x78	; 120
    1d40:	f6 01       	movw	r30, r12
    1d42:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1d44:	98 2f       	mov	r25, r24
    1d46:	96 95       	lsr	r25
    1d48:	96 95       	lsr	r25
	state &= 0b00000011;
    1d4a:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1d4c:	91 30       	cpi	r25, 0x01	; 1
    1d4e:	21 f4       	brne	.+8      	; 0x1d58 <read_PNEUSensors+0x68>
		*right = 'c';
    1d50:	93 e6       	ldi	r25, 0x63	; 99
    1d52:	f7 01       	movw	r30, r14
    1d54:	90 83       	st	Z, r25
    1d56:	0f c0       	rjmp	.+30     	; 0x1d76 <read_PNEUSensors+0x86>
	} else if (state == 2) {
    1d58:	92 30       	cpi	r25, 0x02	; 2
    1d5a:	21 f4       	brne	.+8      	; 0x1d64 <read_PNEUSensors+0x74>
		*right = 'o';
    1d5c:	9f e6       	ldi	r25, 0x6F	; 111
    1d5e:	f7 01       	movw	r30, r14
    1d60:	90 83       	st	Z, r25
    1d62:	09 c0       	rjmp	.+18     	; 0x1d76 <read_PNEUSensors+0x86>
	} else if (state == 3) {
    1d64:	93 30       	cpi	r25, 0x03	; 3
    1d66:	21 f4       	brne	.+8      	; 0x1d70 <read_PNEUSensors+0x80>
		*right = 't';
    1d68:	94 e7       	ldi	r25, 0x74	; 116
    1d6a:	f7 01       	movw	r30, r14
    1d6c:	90 83       	st	Z, r25
    1d6e:	03 c0       	rjmp	.+6      	; 0x1d76 <read_PNEUSensors+0x86>
	} else {
		*right = 'x';
    1d70:	98 e7       	ldi	r25, 0x78	; 120
    1d72:	f7 01       	movw	r30, r14
    1d74:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1d76:	98 2f       	mov	r25, r24
    1d78:	92 95       	swap	r25
    1d7a:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    1d7c:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1d7e:	91 30       	cpi	r25, 0x01	; 1
    1d80:	21 f4       	brne	.+8      	; 0x1d8a <read_PNEUSensors+0x9a>
		*left = 'o';
    1d82:	9f e6       	ldi	r25, 0x6F	; 111
    1d84:	f8 01       	movw	r30, r16
    1d86:	90 83       	st	Z, r25
    1d88:	0f c0       	rjmp	.+30     	; 0x1da8 <read_PNEUSensors+0xb8>
	} else if (state == 2) {
    1d8a:	92 30       	cpi	r25, 0x02	; 2
    1d8c:	21 f4       	brne	.+8      	; 0x1d96 <read_PNEUSensors+0xa6>
		*left = 'c';
    1d8e:	93 e6       	ldi	r25, 0x63	; 99
    1d90:	f8 01       	movw	r30, r16
    1d92:	90 83       	st	Z, r25
    1d94:	09 c0       	rjmp	.+18     	; 0x1da8 <read_PNEUSensors+0xb8>
	} else if (state == 3) {
    1d96:	93 30       	cpi	r25, 0x03	; 3
    1d98:	21 f4       	brne	.+8      	; 0x1da2 <read_PNEUSensors+0xb2>
		*left = 't';
    1d9a:	94 e7       	ldi	r25, 0x74	; 116
    1d9c:	f8 01       	movw	r30, r16
    1d9e:	90 83       	st	Z, r25
    1da0:	03 c0       	rjmp	.+6      	; 0x1da8 <read_PNEUSensors+0xb8>
	} else {
		*left = 'x';
    1da2:	98 e7       	ldi	r25, 0x78	; 120
    1da4:	f8 01       	movw	r30, r16
    1da6:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1da8:	81 ff       	sbrs	r24, 1
    1daa:	03 c0       	rjmp	.+6      	; 0x1db2 <read_PNEUSensors+0xc2>
		*air = '0';
    1dac:	80 e3       	ldi	r24, 0x30	; 48
    1dae:	88 83       	st	Y, r24
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <read_PNEUSensors+0xc6>
	} else {
		*air = '1';
    1db2:	81 e3       	ldi	r24, 0x31	; 49
    1db4:	88 83       	st	Y, r24
	}
}
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	1f 91       	pop	r17
    1dbc:	0f 91       	pop	r16
    1dbe:	ff 90       	pop	r15
    1dc0:	ef 90       	pop	r14
    1dc2:	df 90       	pop	r13
    1dc4:	cf 90       	pop	r12
    1dc6:	08 95       	ret

00001dc8 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	d8 2f       	mov	r29, r24
    1dce:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    1dd0:	69 e0       	ldi	r22, 0x09	; 9
    1dd2:	84 e2       	ldi	r24, 0x24	; 36
    1dd4:	0e 94 a6 0a 	call	0x154c	; 0x154c <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    1dd8:	8d 2b       	or	r24, r29
    1dda:	48 2f       	mov	r20, r24
    1ddc:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1dde:	6a e0       	ldi	r22, 0x0A	; 10
    1de0:	84 e2       	ldi	r24, 0x24	; 36
    1de2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	08 95       	ret

00001dec <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(uint8_t cstack)
{
    1dec:	cf 93       	push	r28
    1dee:	df 93       	push	r29
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	6a 97       	sbiw	r28, 0x1a	; 26
    1df6:	cd bf       	out	0x3d, r28	; 61
    1df8:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    1dfa:	99 e0       	ldi	r25, 0x09	; 9
    1dfc:	e3 ed       	ldi	r30, 0xD3	; 211
    1dfe:	f2 eb       	ldi	r31, 0xB2	; 178
    1e00:	de 01       	movw	r26, r28
    1e02:	11 96       	adiw	r26, 0x01	; 1
    1e04:	01 90       	ld	r0, Z+
    1e06:	0d 92       	st	X+, r0
    1e08:	9a 95       	dec	r25
    1e0a:	e1 f7       	brne	.-8      	; 0x1e04 <close_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1e0c:	24 e3       	ldi	r18, 0x34	; 52
    1e0e:	82 9f       	mul	r24, r18
    1e10:	c0 01       	movw	r24, r0
    1e12:	11 24       	eor	r1, r1
    1e14:	fc 01       	movw	r30, r24
    1e16:	e1 5f       	subi	r30, 0xF1	; 241
    1e18:	f7 4d       	sbci	r31, 0xD7	; 215
    1e1a:	81 81       	ldd	r24, Z+1	; 0x01
    1e1c:	8c 36       	cpi	r24, 0x6C	; 108
    1e1e:	31 f1       	breq	.+76     	; 0x1e6c <close_PNEU+0x80>
    1e20:	18 f4       	brcc	.+6      	; 0x1e28 <close_PNEU+0x3c>
    1e22:	82 36       	cpi	r24, 0x62	; 98
    1e24:	39 f0       	breq	.+14     	; 0x1e34 <close_PNEU+0x48>
    1e26:	6a c0       	rjmp	.+212    	; 0x1efc <close_PNEU+0x110>
    1e28:	82 37       	cpi	r24, 0x72	; 114
    1e2a:	c1 f1       	breq	.+112    	; 0x1e9c <close_PNEU+0xb0>
    1e2c:	83 37       	cpi	r24, 0x73	; 115
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <close_PNEU+0x46>
    1e30:	4d c0       	rjmp	.+154    	; 0x1ecc <close_PNEU+0xe0>
    1e32:	64 c0       	rjmp	.+200    	; 0x1efc <close_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1e34:	6a ee       	ldi	r22, 0xEA	; 234
    1e36:	84 e4       	ldi	r24, 0x44	; 68
    1e38:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1e3c:	66 ee       	ldi	r22, 0xE6	; 230
    1e3e:	88 e8       	ldi	r24, 0x88	; 136
    1e40:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1e44:	89 e9       	ldi	r24, 0x99	; 153
    1e46:	92 eb       	ldi	r25, 0xB2	; 178
    1e48:	9f 93       	push	r25
    1e4a:	8f 93       	push	r24
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	01 96       	adiw	r24, 0x01	; 1
    1e50:	9f 93       	push	r25
    1e52:	8f 93       	push	r24
    1e54:	09 96       	adiw	r24, 0x09	; 9
    1e56:	9f 93       	push	r25
    1e58:	8f 93       	push	r24
    1e5a:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			break;
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	59 c0       	rjmp	.+178    	; 0x1f1e <close_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1e6c:	6a ee       	ldi	r22, 0xEA	; 234
    1e6e:	84 e4       	ldi	r24, 0x44	; 68
    1e70:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1e74:	8e e9       	ldi	r24, 0x9E	; 158
    1e76:	92 eb       	ldi	r25, 0xB2	; 178
    1e78:	9f 93       	push	r25
    1e7a:	8f 93       	push	r24
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	01 96       	adiw	r24, 0x01	; 1
    1e80:	9f 93       	push	r25
    1e82:	8f 93       	push	r24
    1e84:	09 96       	adiw	r24, 0x09	; 9
    1e86:	9f 93       	push	r25
    1e88:	8f 93       	push	r24
    1e8a:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			break;
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	41 c0       	rjmp	.+130    	; 0x1f1e <close_PNEU+0x132>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1e9c:	66 ee       	ldi	r22, 0xE6	; 230
    1e9e:	88 e8       	ldi	r24, 0x88	; 136
    1ea0:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1ea4:	83 ea       	ldi	r24, 0xA3	; 163
    1ea6:	92 eb       	ldi	r25, 0xB2	; 178
    1ea8:	9f 93       	push	r25
    1eaa:	8f 93       	push	r24
    1eac:	ce 01       	movw	r24, r28
    1eae:	01 96       	adiw	r24, 0x01	; 1
    1eb0:	9f 93       	push	r25
    1eb2:	8f 93       	push	r24
    1eb4:	09 96       	adiw	r24, 0x09	; 9
    1eb6:	9f 93       	push	r25
    1eb8:	8f 93       	push	r24
    1eba:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			break;
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	29 c0       	rjmp	.+82     	; 0x1f1e <close_PNEU+0x132>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1ecc:	6c ee       	ldi	r22, 0xEC	; 236
    1ece:	82 e2       	ldi	r24, 0x22	; 34
    1ed0:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1ed4:	89 ea       	ldi	r24, 0xA9	; 169
    1ed6:	92 eb       	ldi	r25, 0xB2	; 178
    1ed8:	9f 93       	push	r25
    1eda:	8f 93       	push	r24
    1edc:	ce 01       	movw	r24, r28
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	9f 93       	push	r25
    1ee2:	8f 93       	push	r24
    1ee4:	09 96       	adiw	r24, 0x09	; 9
    1ee6:	9f 93       	push	r25
    1ee8:	8f 93       	push	r24
    1eea:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			break;
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	11 c0       	rjmp	.+34     	; 0x1f1e <close_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "close_PNEU bad object");
    1efc:	61 eb       	ldi	r22, 0xB1	; 177
    1efe:	72 eb       	ldi	r23, 0xB2	; 178
    1f00:	85 ef       	ldi	r24, 0xF5	; 245
    1f02:	91 e0       	ldi	r25, 0x01	; 1
    1f04:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
			strcpy(outbuf, "close what?");
    1f08:	8c e0       	ldi	r24, 0x0C	; 12
    1f0a:	e7 ec       	ldi	r30, 0xC7	; 199
    1f0c:	f2 eb       	ldi	r31, 0xB2	; 178
    1f0e:	de 01       	movw	r26, r28
    1f10:	1a 96       	adiw	r26, 0x0a	; 10
    1f12:	01 90       	ld	r0, Z+
    1f14:	0d 92       	st	X+, r0
    1f16:	8a 95       	dec	r24
    1f18:	e1 f7       	brne	.-8      	; 0x1f12 <close_PNEU+0x126>
			return(ERROR);
    1f1a:	83 e6       	ldi	r24, 0x63	; 99
    1f1c:	0b c0       	rjmp	.+22     	; 0x1f34 <close_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1f24:	41 e0       	ldi	r20, 0x01	; 1
    1f26:	be 01       	movw	r22, r28
    1f28:	66 5f       	subi	r22, 0xF6	; 246
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <writestr_OLED>
	return(NOERROR);
    1f32:	80 e0       	ldi	r24, 0x00	; 0

}
    1f34:	6a 96       	adiw	r28, 0x1a	; 26
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	de bf       	out	0x3e, r29	; 62
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	08 95       	ret

00001f40 <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(uint8_t cstack)
{
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	69 97       	sbiw	r28, 0x19	; 25
    1f4a:	cd bf       	out	0x3d, r28	; 61
    1f4c:	de bf       	out	0x3e, r29	; 62

	const char dformat_OPE[] = "Open %s";
    1f4e:	98 e0       	ldi	r25, 0x08	; 8
    1f50:	ec ef       	ldi	r30, 0xFC	; 252
    1f52:	f2 eb       	ldi	r31, 0xB2	; 178
    1f54:	de 01       	movw	r26, r28
    1f56:	11 96       	adiw	r26, 0x01	; 1
    1f58:	01 90       	ld	r0, Z+
    1f5a:	0d 92       	st	X+, r0
    1f5c:	9a 95       	dec	r25
    1f5e:	e1 f7       	brne	.-8      	; 0x1f58 <open_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1f60:	24 e3       	ldi	r18, 0x34	; 52
    1f62:	82 9f       	mul	r24, r18
    1f64:	c0 01       	movw	r24, r0
    1f66:	11 24       	eor	r1, r1
    1f68:	fc 01       	movw	r30, r24
    1f6a:	e1 5f       	subi	r30, 0xF1	; 241
    1f6c:	f7 4d       	sbci	r31, 0xD7	; 215
    1f6e:	81 81       	ldd	r24, Z+1	; 0x01
    1f70:	8c 36       	cpi	r24, 0x6C	; 108
    1f72:	31 f1       	breq	.+76     	; 0x1fc0 <open_PNEU+0x80>
    1f74:	18 f4       	brcc	.+6      	; 0x1f7c <open_PNEU+0x3c>
    1f76:	82 36       	cpi	r24, 0x62	; 98
    1f78:	39 f0       	breq	.+14     	; 0x1f88 <open_PNEU+0x48>
    1f7a:	6a c0       	rjmp	.+212    	; 0x2050 <open_PNEU+0x110>
    1f7c:	82 37       	cpi	r24, 0x72	; 114
    1f7e:	c1 f1       	breq	.+112    	; 0x1ff0 <open_PNEU+0xb0>
    1f80:	83 37       	cpi	r24, 0x73	; 115
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <open_PNEU+0x46>
    1f84:	4d c0       	rjmp	.+154    	; 0x2020 <open_PNEU+0xe0>
    1f86:	64 c0       	rjmp	.+200    	; 0x2050 <open_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1f88:	6e ea       	ldi	r22, 0xAE	; 174
    1f8a:	84 e4       	ldi	r24, 0x44	; 68
    1f8c:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1f90:	6e e6       	ldi	r22, 0x6E	; 110
    1f92:	88 e8       	ldi	r24, 0x88	; 136
    1f94:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1f98:	89 e9       	ldi	r24, 0x99	; 153
    1f9a:	92 eb       	ldi	r25, 0xB2	; 178
    1f9c:	9f 93       	push	r25
    1f9e:	8f 93       	push	r24
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	9f 93       	push	r25
    1fa6:	8f 93       	push	r24
    1fa8:	08 96       	adiw	r24, 0x08	; 8
    1faa:	9f 93       	push	r25
    1fac:	8f 93       	push	r24
    1fae:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			break;
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	59 c0       	rjmp	.+178    	; 0x2072 <open_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1fc0:	6e ea       	ldi	r22, 0xAE	; 174
    1fc2:	84 e4       	ldi	r24, 0x44	; 68
    1fc4:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1fc8:	8e e9       	ldi	r24, 0x9E	; 158
    1fca:	92 eb       	ldi	r25, 0xB2	; 178
    1fcc:	9f 93       	push	r25
    1fce:	8f 93       	push	r24
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	01 96       	adiw	r24, 0x01	; 1
    1fd4:	9f 93       	push	r25
    1fd6:	8f 93       	push	r24
    1fd8:	08 96       	adiw	r24, 0x08	; 8
    1fda:	9f 93       	push	r25
    1fdc:	8f 93       	push	r24
    1fde:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			break;
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	41 c0       	rjmp	.+130    	; 0x2072 <open_PNEU+0x132>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1ff0:	6e e6       	ldi	r22, 0x6E	; 110
    1ff2:	88 e8       	ldi	r24, 0x88	; 136
    1ff4:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1ff8:	83 ea       	ldi	r24, 0xA3	; 163
    1ffa:	92 eb       	ldi	r25, 0xB2	; 178
    1ffc:	9f 93       	push	r25
    1ffe:	8f 93       	push	r24
    2000:	ce 01       	movw	r24, r28
    2002:	01 96       	adiw	r24, 0x01	; 1
    2004:	9f 93       	push	r25
    2006:	8f 93       	push	r24
    2008:	08 96       	adiw	r24, 0x08	; 8
    200a:	9f 93       	push	r25
    200c:	8f 93       	push	r24
    200e:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			break;
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	29 c0       	rjmp	.+82     	; 0x2072 <open_PNEU+0x132>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    2020:	6e ec       	ldi	r22, 0xCE	; 206
    2022:	82 e2       	ldi	r24, 0x22	; 34
    2024:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    2028:	89 ea       	ldi	r24, 0xA9	; 169
    202a:	92 eb       	ldi	r25, 0xB2	; 178
    202c:	9f 93       	push	r25
    202e:	8f 93       	push	r24
    2030:	ce 01       	movw	r24, r28
    2032:	01 96       	adiw	r24, 0x01	; 1
    2034:	9f 93       	push	r25
    2036:	8f 93       	push	r24
    2038:	08 96       	adiw	r24, 0x08	; 8
    203a:	9f 93       	push	r25
    203c:	8f 93       	push	r24
    203e:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			break;
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	11 c0       	rjmp	.+34     	; 0x2072 <open_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "open_PNEU bad object");
    2050:	6c ed       	ldi	r22, 0xDC	; 220
    2052:	72 eb       	ldi	r23, 0xB2	; 178
    2054:	85 ef       	ldi	r24, 0xF5	; 245
    2056:	91 e0       	ldi	r25, 0x01	; 1
    2058:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
			strcpy(outbuf, "open what?");
    205c:	8b e0       	ldi	r24, 0x0B	; 11
    205e:	e1 ef       	ldi	r30, 0xF1	; 241
    2060:	f2 eb       	ldi	r31, 0xB2	; 178
    2062:	de 01       	movw	r26, r28
    2064:	19 96       	adiw	r26, 0x09	; 9
    2066:	01 90       	ld	r0, Z+
    2068:	0d 92       	st	X+, r0
    206a:	8a 95       	dec	r24
    206c:	e1 f7       	brne	.-8      	; 0x2066 <open_PNEU+0x126>
			return(ERROR);
    206e:	83 e6       	ldi	r24, 0x63	; 99
    2070:	0b c0       	rjmp	.+22     	; 0x2088 <open_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    2078:	41 e0       	ldi	r20, 0x01	; 1
    207a:	be 01       	movw	r22, r28
    207c:	67 5f       	subi	r22, 0xF7	; 247
    207e:	7f 4f       	sbci	r23, 0xFF	; 255
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <writestr_OLED>
	return(NOERROR);
    2086:	80 e0       	ldi	r24, 0x00	; 0

}
    2088:	69 96       	adiw	r28, 0x19	; 25
    208a:	cd bf       	out	0x3d, r28	; 61
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	08 95       	ret

00002094 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    2094:	1f 92       	push	r1
    2096:	0f 92       	push	r0
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	0f 92       	push	r0
    209c:	11 24       	eor	r1, r1
    209e:	2f 93       	push	r18
    20a0:	3f 93       	push	r19
    20a2:	4f 93       	push	r20
    20a4:	5f 93       	push	r21
    20a6:	6f 93       	push	r22
    20a8:	7f 93       	push	r23
    20aa:	8f 93       	push	r24
    20ac:	9f 93       	push	r25
    20ae:	af 93       	push	r26
    20b0:	bf 93       	push	r27
    20b2:	ef 93       	push	r30
    20b4:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// MCP23008 interrupt
    20b6:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    20ba:	88 23       	and	r24, r24
    20bc:	4c f4       	brge	.+18     	; 0x20d0 <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    20be:	80 e8       	ldi	r24, 0x80	; 128
    20c0:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    20c4:	68 e0       	ldi	r22, 0x08	; 8
    20c6:	81 e2       	ldi	r24, 0x21	; 33
    20c8:	0e 94 a6 0a 	call	0x154c	; 0x154c <read_MCP23008>
    20cc:	80 93 1a 2a 	sts	0x2A1A, r24	; 0x802a1a <pneuState>
	}

}
    20d0:	ff 91       	pop	r31
    20d2:	ef 91       	pop	r30
    20d4:	bf 91       	pop	r27
    20d6:	af 91       	pop	r26
    20d8:	9f 91       	pop	r25
    20da:	8f 91       	pop	r24
    20dc:	7f 91       	pop	r23
    20de:	6f 91       	pop	r22
    20e0:	5f 91       	pop	r21
    20e2:	4f 91       	pop	r20
    20e4:	3f 91       	pop	r19
    20e6:	2f 91       	pop	r18
    20e8:	0f 90       	pop	r0
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	0f 90       	pop	r0
    20ee:	1f 90       	pop	r1
    20f0:	18 95       	reti

000020f2 <init_PORTS>:
void init_PORTS(void)
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTB.DIRSET = PIN2_bm;		// Beeper
    20f2:	84 e0       	ldi	r24, 0x04	; 4
    20f4:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7f4421>
	PORTF.DIRCLR = PIN2_bm;		// specID jumper
    20f8:	e0 ea       	ldi	r30, 0xA0	; 160
    20fa:	f4 e0       	ldi	r31, 0x04	; 4
    20fc:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRSET = PIN5_bm;		// On-board LED
    20fe:	80 e2       	ldi	r24, 0x20	; 32
    2100:	81 83       	std	Z+1, r24	; 0x01
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton
    2102:	8b e0       	ldi	r24, 0x0B	; 11
    2104:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.OUTCLR = PIN3_bm;		// Reset the XPort
    2106:	e0 e4       	ldi	r30, 0x40	; 64
    2108:	f4 e0       	ldi	r31, 0x04	; 4
    210a:	88 e0       	ldi	r24, 0x08	; 8
    210c:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;		// Set XPort reset pin as output
    210e:	81 83       	std	Z+1, r24	; 0x01
    2110:	a7 ea       	ldi	r26, 0xA7	; 167
    2112:	b1 e6       	ldi	r27, 0x61	; 97
    2114:	11 97       	sbiw	r26, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <init_PORTS+0x22>
    2118:	00 c0       	rjmp	.+0      	; 0x211a <init_PORTS+0x28>
    211a:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;		// Enable the XPort
    211c:	85 83       	std	Z+5, r24	; 0x05
    211e:	08 95       	ret

00002120 <report>:

	Returns:
		ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    2120:	2f 92       	push	r2
    2122:	3f 92       	push	r3
    2124:	4f 92       	push	r4
    2126:	5f 92       	push	r5
    2128:	6f 92       	push	r6
    212a:	7f 92       	push	r7
    212c:	8f 92       	push	r8
    212e:	9f 92       	push	r9
    2130:	af 92       	push	r10
    2132:	bf 92       	push	r11
    2134:	cf 92       	push	r12
    2136:	df 92       	push	r13
    2138:	ef 92       	push	r14
    213a:	ff 92       	push	r15
    213c:	0f 93       	push	r16
    213e:	1f 93       	push	r17
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	c3 5a       	subi	r28, 0xA3	; 163
    214a:	d3 40       	sbci	r29, 0x03	; 3
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE], version[11];
	char currenttime[20], lastsettime[20], boottime[20], encsavetime[20];
	char shutter, left, right, air, mlimit, mdir;
	const char format_ENV[] = "ENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
    2150:	95 e4       	ldi	r25, 0x45	; 69
    2152:	ef e8       	ldi	r30, 0x8F	; 143
    2154:	f4 eb       	ldi	r31, 0xB4	; 180
    2156:	de 01       	movw	r26, r28
    2158:	a2 5a       	subi	r26, 0xA2	; 162
    215a:	be 4f       	sbci	r27, 0xFE	; 254
    215c:	01 90       	ld	r0, Z+
    215e:	0d 92       	st	X+, r0
    2160:	9a 95       	dec	r25
    2162:	e1 f7       	brne	.-8      	; 0x215c <report+0x3c>
	const char format_MTR[] = "MTR,%s,%c,%ld,um,%ld,um/s,%d,mA,%c,dir,%c,lim,%s";
    2164:	91 e3       	ldi	r25, 0x31	; 49
    2166:	e4 ed       	ldi	r30, 0xD4	; 212
    2168:	f4 eb       	ldi	r31, 0xB4	; 180
    216a:	de 01       	movw	r26, r28
    216c:	ad 55       	subi	r26, 0x5D	; 93
    216e:	be 4f       	sbci	r27, 0xFE	; 254
    2170:	01 90       	ld	r0, Z+
    2172:	0d 92       	st	X+, r0
    2174:	9a 95       	dec	r25
    2176:	e1 f7       	brne	.-8      	; 0x2170 <report+0x50>
	const char format_MT0[] = "MET,%s,%c,%3.1f,V,%3.1f,C,%s,encSaveTime,%s";	// Motor, Voltage, Save-time
    2178:	9c e2       	ldi	r25, 0x2C	; 44
    217a:	e5 e0       	ldi	r30, 0x05	; 5
    217c:	f5 eb       	ldi	r31, 0xB5	; 181
    217e:	de 01       	movw	r26, r28
    2180:	ac 52       	subi	r26, 0x2C	; 44
    2182:	be 4f       	sbci	r27, 0xFE	; 254
    2184:	01 90       	ld	r0, Z+
    2186:	0d 92       	st	X+, r0
    2188:	9a 95       	dec	r25
    218a:	e1 f7       	brne	.-8      	; 0x2184 <report+0x64>
	const char format_MT1[] = "PID,%s,%c,%.2f,P,%.3f,I,%.2f,D,%ld,maxInt,%s";
    218c:	9d e2       	ldi	r25, 0x2D	; 45
    218e:	e1 e3       	ldi	r30, 0x31	; 49
    2190:	f5 eb       	ldi	r31, 0xB5	; 181
    2192:	de 01       	movw	r26, r28
    2194:	be 5f       	subi	r27, 0xFE	; 254
    2196:	01 90       	ld	r0, Z+
    2198:	0d 92       	st	X+, r0
    219a:	9a 95       	dec	r25
    219c:	e1 f7       	brne	.-8      	; 0x2196 <report+0x76>
	const char format_MT2[] = "DMM,%s,%c,%ld,dead,%ld,minP,%ld,maxP,%ld,qpps,%s";	// Dead, min, max, qpps
    219e:	91 e3       	ldi	r25, 0x31	; 49
    21a0:	ee e5       	ldi	r30, 0x5E	; 94
    21a2:	f5 eb       	ldi	r31, 0xB5	; 181
    21a4:	de 01       	movw	r26, r28
    21a6:	a3 5d       	subi	r26, 0xD3	; 211
    21a8:	bd 4f       	sbci	r27, 0xFD	; 253
    21aa:	01 90       	ld	r0, Z+
    21ac:	0d 92       	st	X+, r0
    21ae:	9a 95       	dec	r25
    21b0:	e1 f7       	brne	.-8      	; 0x21aa <report+0x8a>
	const char format_MT3[] = "MIL,%s,%c,%ld,mA,0x%02x,S4,%s";	// Motor, current, limit function
    21b2:	9e e1       	ldi	r25, 0x1E	; 30
    21b4:	ef e8       	ldi	r30, 0x8F	; 143
    21b6:	f5 eb       	ldi	r31, 0xB5	; 181
    21b8:	de 01       	movw	r26, r28
    21ba:	a2 5a       	subi	r26, 0xA2	; 162
    21bc:	bd 4f       	sbci	r27, 0xFD	; 253
    21be:	01 90       	ld	r0, Z+
    21c0:	0d 92       	st	X+, r0
    21c2:	9a 95       	dec	r25
    21c4:	e1 f7       	brne	.-8      	; 0x21be <report+0x9e>
	const char format_ORI[] = "ORI,%s,%3.1f,%3.1f,%3.1f,%s";	// Orientation
    21c6:	9c e1       	ldi	r25, 0x1C	; 28
    21c8:	ed ea       	ldi	r30, 0xAD	; 173
    21ca:	f5 eb       	ldi	r31, 0xB5	; 181
    21cc:	de 01       	movw	r26, r28
    21ce:	a4 58       	subi	r26, 0x84	; 132
    21d0:	bd 4f       	sbci	r27, 0xFD	; 253
    21d2:	01 90       	ld	r0, Z+
    21d4:	0d 92       	st	X+, r0
    21d6:	9a 95       	dec	r25
    21d8:	e1 f7       	brne	.-8      	; 0x21d2 <report+0xb2>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";				// For display
    21da:	92 e1       	ldi	r25, 0x12	; 18
    21dc:	e9 ec       	ldi	r30, 0xC9	; 201
    21de:	f5 eb       	ldi	r31, 0xB5	; 181
    21e0:	de 01       	movw	r26, r28
    21e2:	a8 56       	subi	r26, 0x68	; 104
    21e4:	bd 4f       	sbci	r27, 0xFD	; 253
    21e6:	01 90       	ld	r0, Z+
    21e8:	0d 92       	st	X+, r0
    21ea:	9a 95       	dec	r25
    21ec:	e1 f7       	brne	.-8      	; 0x21e6 <report+0xc6>
	const char format_PNU[] = "PNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";	// Pneumatics
    21ee:	9d e2       	ldi	r25, 0x2D	; 45
    21f0:	eb ed       	ldi	r30, 0xDB	; 219
    21f2:	f5 eb       	ldi	r31, 0xB5	; 181
    21f4:	de 01       	movw	r26, r28
    21f6:	a6 55       	subi	r26, 0x56	; 86
    21f8:	bd 4f       	sbci	r27, 0xFD	; 253
    21fa:	01 90       	ld	r0, Z+
    21fc:	0d 92       	st	X+, r0
    21fe:	9a 95       	dec	r25
    2200:	e1 f7       	brne	.-8      	; 0x21fa <report+0xda>
	const char dformat_PN1[] = "Left:%c   Right:%c";
    2202:	93 e1       	ldi	r25, 0x13	; 19
    2204:	e8 e0       	ldi	r30, 0x08	; 8
    2206:	f6 eb       	ldi	r31, 0xB6	; 182
    2208:	de 01       	movw	r26, r28
    220a:	a9 52       	subi	r26, 0x29	; 41
    220c:	bd 4f       	sbci	r27, 0xFD	; 253
    220e:	01 90       	ld	r0, Z+
    2210:	0d 92       	st	X+, r0
    2212:	9a 95       	dec	r25
    2214:	e1 f7       	brne	.-8      	; 0x220e <report+0xee>
	const char dformat_PN2[] = "Shutter:%c  Air:%c";
    2216:	93 e1       	ldi	r25, 0x13	; 19
    2218:	eb e1       	ldi	r30, 0x1B	; 27
    221a:	f6 eb       	ldi	r31, 0xB6	; 182
    221c:	de 01       	movw	r26, r28
    221e:	a6 51       	subi	r26, 0x16	; 22
    2220:	bd 4f       	sbci	r27, 0xFD	; 253
    2222:	01 90       	ld	r0, Z+
    2224:	0d 92       	st	X+, r0
    2226:	9a 95       	dec	r25
    2228:	e1 f7       	brne	.-8      	; 0x2222 <report+0x102>
	const char format_TIM[] = "TIM,%s,%s,set,%s,boot,%s";	// Time
    222a:	99 e1       	ldi	r25, 0x19	; 25
    222c:	ee e2       	ldi	r30, 0x2E	; 46
    222e:	f6 eb       	ldi	r31, 0xB6	; 182
    2230:	de 01       	movw	r26, r28
    2232:	a3 50       	subi	r26, 0x03	; 3
    2234:	bd 4f       	sbci	r27, 0xFD	; 253
    2236:	01 90       	ld	r0, Z+
    2238:	0d 92       	st	X+, r0
    223a:	9a 95       	dec	r25
    223c:	e1 f7       	brne	.-8      	; 0x2236 <report+0x116>
	const char format_VAC[] = "VAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";	// Vacuum
    223e:	95 e2       	ldi	r25, 0x25	; 37
    2240:	e7 e4       	ldi	r30, 0x47	; 71
    2242:	f6 eb       	ldi	r31, 0xB6	; 182
    2244:	de 01       	movw	r26, r28
    2246:	aa 5e       	subi	r26, 0xEA	; 234
    2248:	bc 4f       	sbci	r27, 0xFC	; 252
    224a:	01 90       	ld	r0, Z+
    224c:	0d 92       	st	X+, r0
    224e:	9a 95       	dec	r25
    2250:	e1 f7       	brne	.-8      	; 0x224a <report+0x12a>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    2252:	9d e0       	ldi	r25, 0x0D	; 13
    2254:	ec e6       	ldi	r30, 0x6C	; 108
    2256:	f6 eb       	ldi	r31, 0xB6	; 182
    2258:	de 01       	movw	r26, r28
    225a:	a5 5c       	subi	r26, 0xC5	; 197
    225c:	bc 4f       	sbci	r27, 0xFC	; 252
    225e:	01 90       	ld	r0, Z+
    2260:	0d 92       	st	X+, r0
    2262:	9a 95       	dec	r25
    2264:	e1 f7       	brne	.-8      	; 0x225e <report+0x13e>
	const char format_VER[] = "VER,%s,%s,%s";	// Version
    2266:	9d e0       	ldi	r25, 0x0D	; 13
    2268:	e9 e7       	ldi	r30, 0x79	; 121
    226a:	f6 eb       	ldi	r31, 0xB6	; 182
    226c:	de 01       	movw	r26, r28
    226e:	a8 5b       	subi	r26, 0xB8	; 184
    2270:	bc 4f       	sbci	r27, 0xFC	; 252
    2272:	01 90       	ld	r0, Z+
    2274:	0d 92       	st	X+, r0
    2276:	9a 95       	dec	r25
    2278:	e1 f7       	brne	.-8      	; 0x2272 <report+0x152>
	uint16_t motorCurrent;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	PID pid;

	switch(pcmd[cstack].cobject) {
    227a:	08 2f       	mov	r16, r24
    227c:	10 e0       	ldi	r17, 0x00	; 0
    227e:	84 e3       	ldi	r24, 0x34	; 52
    2280:	80 9f       	mul	r24, r16
    2282:	f0 01       	movw	r30, r0
    2284:	81 9f       	mul	r24, r17
    2286:	f0 0d       	add	r31, r0
    2288:	11 24       	eor	r1, r1
    228a:	e1 5f       	subi	r30, 0xF1	; 241
    228c:	f7 4d       	sbci	r31, 0xD7	; 215
    228e:	e1 81       	ldd	r30, Z+1	; 0x01
    2290:	8e 2f       	mov	r24, r30
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	fc 01       	movw	r30, r24
    2296:	e1 54       	subi	r30, 0x41	; 65
    2298:	f1 09       	sbc	r31, r1
    229a:	e6 33       	cpi	r30, 0x36	; 54
    229c:	f1 05       	cpc	r31, r1
    229e:	08 f0       	brcs	.+2      	; 0x22a2 <report+0x182>
    22a0:	31 c7       	rjmp	.+3682   	; 0x3104 <report+0xfe4>
    22a2:	e3 58       	subi	r30, 0x83	; 131
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	0c 94 6d 35 	jmp	0x6ada	; 0x6ada <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    22aa:	ce 01       	movw	r24, r28
    22ac:	86 5f       	subi	r24, 0xF6	; 246
    22ae:	9e 4f       	sbci	r25, 0xFE	; 254
    22b0:	0e 94 48 07 	call	0xe90	; 0xe90 <get_time>
			controller = pcmd[cstack].cobject + 63;
    22b4:	84 e3       	ldi	r24, 0x34	; 52
    22b6:	80 9f       	mul	r24, r16
    22b8:	f0 01       	movw	r30, r0
    22ba:	81 9f       	mul	r24, r17
    22bc:	f0 0d       	add	r31, r0
    22be:	11 24       	eor	r1, r1
    22c0:	e1 5f       	subi	r30, 0xF1	; 241
    22c2:	f7 4d       	sbci	r31, 0xD7	; 215
    22c4:	d1 80       	ldd	r13, Z+1	; 0x01
    22c6:	0f 2e       	mov	r0, r31
    22c8:	ff e3       	ldi	r31, 0x3F	; 63
    22ca:	ef 2e       	mov	r14, r31
    22cc:	f0 2d       	mov	r31, r0
    22ce:	ed 0c       	add	r14, r13

			if (get_MOTOR_FLOAT(controller, READMAINVOLTAGE, &voltage) == ERROR) {
    22d0:	ae 01       	movw	r20, r28
    22d2:	4a 59       	subi	r20, 0x9A	; 154
    22d4:	5c 4f       	sbci	r21, 0xFC	; 252
    22d6:	68 e1       	ldi	r22, 0x18	; 24
    22d8:	8e 2d       	mov	r24, r14
    22da:	0e 94 85 1b 	call	0x370a	; 0x370a <get_MOTOR_FLOAT>
    22de:	f8 2e       	mov	r15, r24
    22e0:	83 e6       	ldi	r24, 0x63	; 99
    22e2:	f8 12       	cpse	r15, r24
    22e4:	07 c0       	rjmp	.+14     	; 0x22f4 <report+0x1d4>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT volts error");
    22e6:	64 e0       	ldi	r22, 0x04	; 4
    22e8:	73 eb       	ldi	r23, 0xB3	; 179
    22ea:	86 e3       	ldi	r24, 0x36	; 54
    22ec:	91 e0       	ldi	r25, 0x01	; 1
    22ee:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				return(ERROR);
    22f2:	12 c7       	rjmp	.+3620   	; 0x3118 <report+0xff8>
			}

			if (get_FRAM_ENCSAVETIME(encsavetime) == ERROR) {
    22f4:	ce 01       	movw	r24, r28
    22f6:	8a 5b       	subi	r24, 0xBA	; 186
    22f8:	9e 4f       	sbci	r25, 0xFE	; 254
    22fa:	0e 94 c9 18 	call	0x3192	; 0x3192 <get_FRAM_ENCSAVETIME>
    22fe:	f8 2e       	mov	r15, r24
    2300:	93 e6       	ldi	r25, 0x63	; 99
    2302:	89 13       	cpse	r24, r25
    2304:	11 c0       	rjmp	.+34     	; 0x2328 <report+0x208>
				sprintf(outbuf, "report: get_FRAM_ENCSAVEIME error");
    2306:	82 e2       	ldi	r24, 0x22	; 34
    2308:	e8 e2       	ldi	r30, 0x28	; 40
    230a:	f3 eb       	ldi	r31, 0xB3	; 179
    230c:	de 01       	movw	r26, r28
    230e:	11 96       	adiw	r26, 0x01	; 1
    2310:	01 90       	ld	r0, Z+
    2312:	0d 92       	st	X+, r0
    2314:	8a 95       	dec	r24
    2316:	e1 f7       	brne	.-8      	; 0x2310 <report+0x1f0>
				printError(ERR_MTR, outbuf);
    2318:	be 01       	movw	r22, r28
    231a:	6f 5f       	subi	r22, 0xFF	; 255
    231c:	7f 4f       	sbci	r23, 0xFF	; 255
    231e:	86 e3       	ldi	r24, 0x36	; 54
    2320:	91 e0       	ldi	r25, 0x01	; 1
    2322:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				return(ERROR);
    2326:	f8 c6       	rjmp	.+3568   	; 0x3118 <report+0xff8>
			}

			if (get_MOTOR_FLOAT(controller, READTEMPERATURE, &t0) == ERROR) {
    2328:	ae 01       	movw	r20, r28
    232a:	4e 59       	subi	r20, 0x9E	; 158
    232c:	5c 4f       	sbci	r21, 0xFC	; 252
    232e:	62 e5       	ldi	r22, 0x52	; 82
    2330:	8e 2d       	mov	r24, r14
    2332:	0e 94 85 1b 	call	0x370a	; 0x370a <get_MOTOR_FLOAT>
    2336:	f8 2e       	mov	r15, r24
    2338:	83 e6       	ldi	r24, 0x63	; 99
    233a:	f8 12       	cpse	r15, r24
    233c:	07 c0       	rjmp	.+14     	; 0x234c <report+0x22c>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT temperature error");
    233e:	6a e4       	ldi	r22, 0x4A	; 74
    2340:	73 eb       	ldi	r23, 0xB3	; 179
    2342:	86 e3       	ldi	r24, 0x36	; 54
    2344:	91 e0       	ldi	r25, 0x01	; 1
    2346:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				return(ERROR);
    234a:	e6 c6       	rjmp	.+3532   	; 0x3118 <report+0xff8>
			}

			if (get_MOTOR_MAXCURRENT(controller, &maxCurrent) == ERROR) {
    234c:	be 01       	movw	r22, r28
    234e:	62 5a       	subi	r22, 0xA2	; 162
    2350:	7c 4f       	sbci	r23, 0xFC	; 252
    2352:	8e 2d       	mov	r24, r14
    2354:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <get_MOTOR_MAXCURRENT>
    2358:	f8 2e       	mov	r15, r24
    235a:	93 e6       	ldi	r25, 0x63	; 99
    235c:	89 13       	cpse	r24, r25
    235e:	07 c0       	rjmp	.+14     	; 0x236e <report+0x24e>
				printError(ERR_MTR, "report: get_MOTOR_MAXCURRENT error");
    2360:	64 e7       	ldi	r22, 0x74	; 116
    2362:	73 eb       	ldi	r23, 0xB3	; 179
    2364:	86 e3       	ldi	r24, 0x36	; 54
    2366:	91 e0       	ldi	r25, 0x01	; 1
    2368:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				return(ERROR);
    236c:	d5 c6       	rjmp	.+3498   	; 0x3118 <report+0xff8>
			}

			if (get_MOTOR_S4MODE(controller, &s4mode) == ERROR) {
    236e:	be 01       	movw	r22, r28
    2370:	6b 5a       	subi	r22, 0xAB	; 171
    2372:	7c 4f       	sbci	r23, 0xFC	; 252
    2374:	8e 2d       	mov	r24, r14
    2376:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <get_MOTOR_S4MODE>
    237a:	f8 2e       	mov	r15, r24
    237c:	83 e6       	ldi	r24, 0x63	; 99
    237e:	f8 12       	cpse	r15, r24
    2380:	07 c0       	rjmp	.+14     	; 0x2390 <report+0x270>
				printError(ERR_MTR, "report: get_MOTOR_S4MODE error");
    2382:	67 e9       	ldi	r22, 0x97	; 151
    2384:	73 eb       	ldi	r23, 0xB3	; 179
    2386:	86 e3       	ldi	r24, 0x36	; 54
    2388:	91 e0       	ldi	r25, 0x01	; 1
    238a:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				return(ERROR);
    238e:	c4 c6       	rjmp	.+3464   	; 0x3118 <report+0xff8>
			}

			if (get_MOTOR_PID(controller, &pid) == ERROR) {
    2390:	be 01       	movw	r22, r28
    2392:	68 58       	subi	r22, 0x88	; 136
    2394:	7c 4f       	sbci	r23, 0xFC	; 252
    2396:	8e 2d       	mov	r24, r14
    2398:	0e 94 8c 1c 	call	0x3918	; 0x3918 <get_MOTOR_PID>
    239c:	f8 2e       	mov	r15, r24
    239e:	93 e6       	ldi	r25, 0x63	; 99
    23a0:	89 13       	cpse	r24, r25
    23a2:	07 c0       	rjmp	.+14     	; 0x23b2 <report+0x292>
				printError(ERR_MTR, "report: get_MOTOR_PID error");
    23a4:	66 eb       	ldi	r22, 0xB6	; 182
    23a6:	73 eb       	ldi	r23, 0xB3	; 179
    23a8:	86 e3       	ldi	r24, 0x36	; 54
    23aa:	91 e0       	ldi	r25, 0x01	; 1
    23ac:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				return(ERROR);
    23b0:	b3 c6       	rjmp	.+3430   	; 0x3118 <report+0xff8>
			}

			sprintf(outbuf, format_MT0, currenttime, (char) (controller-63),
			voltage, t0, encsavetime, pcmd[cstack].cid);
    23b2:	24 e3       	ldi	r18, 0x34	; 52
    23b4:	20 9f       	mul	r18, r16
    23b6:	c0 01       	movw	r24, r0
    23b8:	21 9f       	mul	r18, r17
    23ba:	90 0d       	add	r25, r0
    23bc:	11 24       	eor	r1, r1
    23be:	8c 01       	movw	r16, r24
    23c0:	06 5c       	subi	r16, 0xC6	; 198
    23c2:	17 4d       	sbci	r17, 0xD7	; 215
			if (get_MOTOR_PID(controller, &pid) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_PID error");
				return(ERROR);
			}

			sprintf(outbuf, format_MT0, currenttime, (char) (controller-63),
    23c4:	1f 93       	push	r17
    23c6:	0f 93       	push	r16
    23c8:	ce 01       	movw	r24, r28
    23ca:	8a 5b       	subi	r24, 0xBA	; 186
    23cc:	9e 4f       	sbci	r25, 0xFE	; 254
    23ce:	9f 93       	push	r25
    23d0:	8f 93       	push	r24
    23d2:	cb 59       	subi	r28, 0x9B	; 155
    23d4:	dc 4f       	sbci	r29, 0xFC	; 252
    23d6:	88 81       	ld	r24, Y
    23d8:	c5 56       	subi	r28, 0x65	; 101
    23da:	d3 40       	sbci	r29, 0x03	; 3
    23dc:	8f 93       	push	r24
    23de:	cc 59       	subi	r28, 0x9C	; 156
    23e0:	dc 4f       	sbci	r29, 0xFC	; 252
    23e2:	88 81       	ld	r24, Y
    23e4:	c4 56       	subi	r28, 0x64	; 100
    23e6:	d3 40       	sbci	r29, 0x03	; 3
    23e8:	8f 93       	push	r24
    23ea:	cd 59       	subi	r28, 0x9D	; 157
    23ec:	dc 4f       	sbci	r29, 0xFC	; 252
    23ee:	88 81       	ld	r24, Y
    23f0:	c3 56       	subi	r28, 0x63	; 99
    23f2:	d3 40       	sbci	r29, 0x03	; 3
    23f4:	8f 93       	push	r24
    23f6:	ce 59       	subi	r28, 0x9E	; 158
    23f8:	dc 4f       	sbci	r29, 0xFC	; 252
    23fa:	88 81       	ld	r24, Y
    23fc:	c2 56       	subi	r28, 0x62	; 98
    23fe:	d3 40       	sbci	r29, 0x03	; 3
    2400:	8f 93       	push	r24
    2402:	c7 59       	subi	r28, 0x97	; 151
    2404:	dc 4f       	sbci	r29, 0xFC	; 252
    2406:	88 81       	ld	r24, Y
    2408:	c9 56       	subi	r28, 0x69	; 105
    240a:	d3 40       	sbci	r29, 0x03	; 3
    240c:	8f 93       	push	r24
    240e:	c8 59       	subi	r28, 0x98	; 152
    2410:	dc 4f       	sbci	r29, 0xFC	; 252
    2412:	88 81       	ld	r24, Y
    2414:	c8 56       	subi	r28, 0x68	; 104
    2416:	d3 40       	sbci	r29, 0x03	; 3
    2418:	8f 93       	push	r24
    241a:	c9 59       	subi	r28, 0x99	; 153
    241c:	dc 4f       	sbci	r29, 0xFC	; 252
    241e:	88 81       	ld	r24, Y
    2420:	c7 56       	subi	r28, 0x67	; 103
    2422:	d3 40       	sbci	r29, 0x03	; 3
    2424:	8f 93       	push	r24
    2426:	ca 59       	subi	r28, 0x9A	; 154
    2428:	dc 4f       	sbci	r29, 0xFC	; 252
    242a:	88 81       	ld	r24, Y
    242c:	c6 56       	subi	r28, 0x66	; 102
    242e:	d3 40       	sbci	r29, 0x03	; 3
    2430:	8f 93       	push	r24
    2432:	1f 92       	push	r1
    2434:	df 92       	push	r13
    2436:	5e 01       	movw	r10, r28
    2438:	86 ef       	ldi	r24, 0xF6	; 246
    243a:	a8 1a       	sub	r10, r24
    243c:	8e ef       	ldi	r24, 0xFE	; 254
    243e:	b8 0a       	sbc	r11, r24
    2440:	bf 92       	push	r11
    2442:	af 92       	push	r10
    2444:	ce 01       	movw	r24, r28
    2446:	8c 52       	subi	r24, 0x2C	; 44
    2448:	9e 4f       	sbci	r25, 0xFE	; 254
    244a:	9f 93       	push	r25
    244c:	8f 93       	push	r24
    244e:	83 5d       	subi	r24, 0xD3	; 211
    2450:	91 40       	sbci	r25, 0x01	; 1
    2452:	7c 01       	movw	r14, r24
    2454:	9f 93       	push	r25
    2456:	8f 93       	push	r24
    2458:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			voltage, t0, encsavetime, pcmd[cstack].cid);
			printLine(outbuf);
    245c:	c7 01       	movw	r24, r14
    245e:	0e 94 81 03 	call	0x702	; 0x702 <printLine>

			sprintf(outbuf, format_MT3, currenttime, (char) (controller-63),
    2462:	1f 93       	push	r17
    2464:	0f 93       	push	r16
    2466:	cb 5a       	subi	r28, 0xAB	; 171
    2468:	dc 4f       	sbci	r29, 0xFC	; 252
    246a:	88 81       	ld	r24, Y
    246c:	c5 55       	subi	r28, 0x55	; 85
    246e:	d3 40       	sbci	r29, 0x03	; 3
    2470:	1f 92       	push	r1
    2472:	8f 93       	push	r24
    2474:	cf 59       	subi	r28, 0x9F	; 159
    2476:	dc 4f       	sbci	r29, 0xFC	; 252
    2478:	88 81       	ld	r24, Y
    247a:	c1 56       	subi	r28, 0x61	; 97
    247c:	d3 40       	sbci	r29, 0x03	; 3
    247e:	8f 93       	push	r24
    2480:	c0 5a       	subi	r28, 0xA0	; 160
    2482:	dc 4f       	sbci	r29, 0xFC	; 252
    2484:	88 81       	ld	r24, Y
    2486:	c0 56       	subi	r28, 0x60	; 96
    2488:	d3 40       	sbci	r29, 0x03	; 3
    248a:	8f 93       	push	r24
    248c:	c1 5a       	subi	r28, 0xA1	; 161
    248e:	dc 4f       	sbci	r29, 0xFC	; 252
    2490:	88 81       	ld	r24, Y
    2492:	cf 55       	subi	r28, 0x5F	; 95
    2494:	d3 40       	sbci	r29, 0x03	; 3
    2496:	8f 93       	push	r24
    2498:	c2 5a       	subi	r28, 0xA2	; 162
    249a:	dc 4f       	sbci	r29, 0xFC	; 252
    249c:	88 81       	ld	r24, Y
    249e:	ce 55       	subi	r28, 0x5E	; 94
    24a0:	d3 40       	sbci	r29, 0x03	; 3
    24a2:	8f 93       	push	r24
    24a4:	1f 92       	push	r1
    24a6:	df 92       	push	r13
    24a8:	bf 92       	push	r11
    24aa:	af 92       	push	r10
    24ac:	ce 01       	movw	r24, r28
    24ae:	82 5a       	subi	r24, 0xA2	; 162
    24b0:	9d 4f       	sbci	r25, 0xFD	; 253
    24b2:	9f 93       	push	r25
    24b4:	8f 93       	push	r24
    24b6:	ff 92       	push	r15
    24b8:	ef 92       	push	r14
    24ba:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			maxCurrent, s4mode, pcmd[cstack].cid);
			printLine(outbuf);
    24be:	cd bf       	out	0x3d, r28	; 61
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	c7 01       	movw	r24, r14
    24c4:	0e 94 81 03 	call	0x702	; 0x702 <printLine>

			sprintf(outbuf, format_MT1, currenttime, (char) (controller-63),
			pid.p, pid.i, pid.d, pid.maxI, pcmd[cstack].cid);
    24c8:	c0 58       	subi	r28, 0x80	; 128
    24ca:	dc 4f       	sbci	r29, 0xFC	; 252
    24cc:	e8 81       	ld	r30, Y
    24ce:	c0 58       	subi	r28, 0x80	; 128
    24d0:	d3 40       	sbci	r29, 0x03	; 3
    24d2:	cf 57       	subi	r28, 0x7F	; 127
    24d4:	dc 4f       	sbci	r29, 0xFC	; 252
    24d6:	f8 81       	ld	r31, Y
    24d8:	c1 58       	subi	r28, 0x81	; 129
    24da:	d3 40       	sbci	r29, 0x03	; 3
    24dc:	ce 57       	subi	r28, 0x7E	; 126
    24de:	dc 4f       	sbci	r29, 0xFC	; 252
    24e0:	a8 81       	ld	r26, Y
    24e2:	c2 58       	subi	r28, 0x82	; 130
    24e4:	d3 40       	sbci	r29, 0x03	; 3
    24e6:	cd 57       	subi	r28, 0x7D	; 125
    24e8:	dc 4f       	sbci	r29, 0xFC	; 252
    24ea:	b8 81       	ld	r27, Y
    24ec:	c3 58       	subi	r28, 0x83	; 131
    24ee:	d3 40       	sbci	r29, 0x03	; 3
    24f0:	c4 58       	subi	r28, 0x84	; 132
    24f2:	dc 4f       	sbci	r29, 0xFC	; 252
    24f4:	48 81       	ld	r20, Y
    24f6:	cc 57       	subi	r28, 0x7C	; 124
    24f8:	d3 40       	sbci	r29, 0x03	; 3
    24fa:	c3 58       	subi	r28, 0x83	; 131
    24fc:	dc 4f       	sbci	r29, 0xFC	; 252
    24fe:	58 81       	ld	r21, Y
    2500:	cd 57       	subi	r28, 0x7D	; 125
    2502:	d3 40       	sbci	r29, 0x03	; 3
    2504:	c2 58       	subi	r28, 0x82	; 130
    2506:	dc 4f       	sbci	r29, 0xFC	; 252
    2508:	68 81       	ld	r22, Y
    250a:	ce 57       	subi	r28, 0x7E	; 126
    250c:	d3 40       	sbci	r29, 0x03	; 3
    250e:	c1 58       	subi	r28, 0x81	; 129
    2510:	dc 4f       	sbci	r29, 0xFC	; 252
    2512:	78 81       	ld	r23, Y
    2514:	cf 57       	subi	r28, 0x7F	; 127
    2516:	d3 40       	sbci	r29, 0x03	; 3
    2518:	c8 58       	subi	r28, 0x88	; 136
    251a:	dc 4f       	sbci	r29, 0xFC	; 252
    251c:	88 81       	ld	r24, Y
    251e:	c8 57       	subi	r28, 0x78	; 120
    2520:	d3 40       	sbci	r29, 0x03	; 3
    2522:	c7 58       	subi	r28, 0x87	; 135
    2524:	dc 4f       	sbci	r29, 0xFC	; 252
    2526:	98 81       	ld	r25, Y
    2528:	c9 57       	subi	r28, 0x79	; 121
    252a:	d3 40       	sbci	r29, 0x03	; 3
    252c:	c6 58       	subi	r28, 0x86	; 134
    252e:	dc 4f       	sbci	r29, 0xFC	; 252
    2530:	28 81       	ld	r18, Y
    2532:	ca 57       	subi	r28, 0x7A	; 122
    2534:	d3 40       	sbci	r29, 0x03	; 3
    2536:	c5 58       	subi	r28, 0x85	; 133
    2538:	dc 4f       	sbci	r29, 0xFC	; 252
    253a:	38 81       	ld	r19, Y
    253c:	cb 57       	subi	r28, 0x7B	; 123
    253e:	d3 40       	sbci	r29, 0x03	; 3

			sprintf(outbuf, format_MT3, currenttime, (char) (controller-63),
			maxCurrent, s4mode, pcmd[cstack].cid);
			printLine(outbuf);

			sprintf(outbuf, format_MT1, currenttime, (char) (controller-63),
    2540:	1f 93       	push	r17
    2542:	0f 93       	push	r16
    2544:	c9 57       	subi	r28, 0x79	; 121
    2546:	dc 4f       	sbci	r29, 0xFC	; 252
    2548:	c8 80       	ld	r12, Y
    254a:	c7 58       	subi	r28, 0x87	; 135
    254c:	d3 40       	sbci	r29, 0x03	; 3
    254e:	cf 92       	push	r12
    2550:	ca 57       	subi	r28, 0x7A	; 122
    2552:	dc 4f       	sbci	r29, 0xFC	; 252
    2554:	c8 80       	ld	r12, Y
    2556:	c6 58       	subi	r28, 0x86	; 134
    2558:	d3 40       	sbci	r29, 0x03	; 3
    255a:	cf 92       	push	r12
    255c:	cb 57       	subi	r28, 0x7B	; 123
    255e:	dc 4f       	sbci	r29, 0xFC	; 252
    2560:	c8 80       	ld	r12, Y
    2562:	c5 58       	subi	r28, 0x85	; 133
    2564:	d3 40       	sbci	r29, 0x03	; 3
    2566:	cf 92       	push	r12
    2568:	cc 57       	subi	r28, 0x7C	; 124
    256a:	dc 4f       	sbci	r29, 0xFC	; 252
    256c:	c8 80       	ld	r12, Y
    256e:	c4 58       	subi	r28, 0x84	; 132
    2570:	d3 40       	sbci	r29, 0x03	; 3
    2572:	cf 92       	push	r12
    2574:	bf 93       	push	r27
    2576:	af 93       	push	r26
    2578:	ff 93       	push	r31
    257a:	ef 93       	push	r30
    257c:	7f 93       	push	r23
    257e:	6f 93       	push	r22
    2580:	5f 93       	push	r21
    2582:	4f 93       	push	r20
    2584:	3f 93       	push	r19
    2586:	2f 93       	push	r18
    2588:	9f 93       	push	r25
    258a:	8f 93       	push	r24
    258c:	1f 92       	push	r1
    258e:	df 92       	push	r13
    2590:	bf 92       	push	r11
    2592:	af 92       	push	r10
    2594:	ce 01       	movw	r24, r28
    2596:	9e 5f       	subi	r25, 0xFE	; 254
    2598:	9f 93       	push	r25
    259a:	8f 93       	push	r24
    259c:	ff 92       	push	r15
    259e:	ef 92       	push	r14
    25a0:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			pid.p, pid.i, pid.d, pid.maxI, pcmd[cstack].cid);
			printLine(outbuf);
    25a4:	c7 01       	movw	r24, r14
    25a6:	0e 94 81 03 	call	0x702	; 0x702 <printLine>

			sprintf(outbuf, format_MT2, currenttime, (char) (controller-63),
    25aa:	1f 93       	push	r17
    25ac:	0f 93       	push	r16
    25ae:	c9 56       	subi	r28, 0x69	; 105
    25b0:	dc 4f       	sbci	r29, 0xFC	; 252
    25b2:	88 81       	ld	r24, Y
    25b4:	c7 59       	subi	r28, 0x97	; 151
    25b6:	d3 40       	sbci	r29, 0x03	; 3
    25b8:	8f 93       	push	r24
    25ba:	ca 56       	subi	r28, 0x6A	; 106
    25bc:	dc 4f       	sbci	r29, 0xFC	; 252
    25be:	88 81       	ld	r24, Y
    25c0:	c6 59       	subi	r28, 0x96	; 150
    25c2:	d3 40       	sbci	r29, 0x03	; 3
    25c4:	8f 93       	push	r24
    25c6:	cb 56       	subi	r28, 0x6B	; 107
    25c8:	dc 4f       	sbci	r29, 0xFC	; 252
    25ca:	88 81       	ld	r24, Y
    25cc:	c5 59       	subi	r28, 0x95	; 149
    25ce:	d3 40       	sbci	r29, 0x03	; 3
    25d0:	8f 93       	push	r24
    25d2:	cc 56       	subi	r28, 0x6C	; 108
    25d4:	dc 4f       	sbci	r29, 0xFC	; 252
    25d6:	88 81       	ld	r24, Y
    25d8:	c4 59       	subi	r28, 0x94	; 148
    25da:	d3 40       	sbci	r29, 0x03	; 3
    25dc:	8f 93       	push	r24
    25de:	cd 56       	subi	r28, 0x6D	; 109
    25e0:	dc 4f       	sbci	r29, 0xFC	; 252
    25e2:	88 81       	ld	r24, Y
    25e4:	c3 59       	subi	r28, 0x93	; 147
    25e6:	d3 40       	sbci	r29, 0x03	; 3
    25e8:	8f 93       	push	r24
    25ea:	ce 56       	subi	r28, 0x6E	; 110
    25ec:	dc 4f       	sbci	r29, 0xFC	; 252
    25ee:	88 81       	ld	r24, Y
    25f0:	c2 59       	subi	r28, 0x92	; 146
    25f2:	d3 40       	sbci	r29, 0x03	; 3
    25f4:	8f 93       	push	r24
    25f6:	cf 56       	subi	r28, 0x6F	; 111
    25f8:	dc 4f       	sbci	r29, 0xFC	; 252
    25fa:	88 81       	ld	r24, Y
    25fc:	c1 59       	subi	r28, 0x91	; 145
    25fe:	d3 40       	sbci	r29, 0x03	; 3
    2600:	8f 93       	push	r24
    2602:	c0 57       	subi	r28, 0x70	; 112
    2604:	dc 4f       	sbci	r29, 0xFC	; 252
    2606:	88 81       	ld	r24, Y
    2608:	c0 59       	subi	r28, 0x90	; 144
    260a:	d3 40       	sbci	r29, 0x03	; 3
    260c:	8f 93       	push	r24
    260e:	c1 57       	subi	r28, 0x71	; 113
    2610:	dc 4f       	sbci	r29, 0xFC	; 252
    2612:	88 81       	ld	r24, Y
    2614:	cf 58       	subi	r28, 0x8F	; 143
    2616:	d3 40       	sbci	r29, 0x03	; 3
    2618:	8f 93       	push	r24
    261a:	c2 57       	subi	r28, 0x72	; 114
    261c:	dc 4f       	sbci	r29, 0xFC	; 252
    261e:	88 81       	ld	r24, Y
    2620:	ce 58       	subi	r28, 0x8E	; 142
    2622:	d3 40       	sbci	r29, 0x03	; 3
    2624:	8f 93       	push	r24
    2626:	c3 57       	subi	r28, 0x73	; 115
    2628:	dc 4f       	sbci	r29, 0xFC	; 252
    262a:	88 81       	ld	r24, Y
    262c:	cd 58       	subi	r28, 0x8D	; 141
    262e:	d3 40       	sbci	r29, 0x03	; 3
    2630:	8f 93       	push	r24
    2632:	c4 57       	subi	r28, 0x74	; 116
    2634:	dc 4f       	sbci	r29, 0xFC	; 252
    2636:	88 81       	ld	r24, Y
    2638:	cc 58       	subi	r28, 0x8C	; 140
    263a:	d3 40       	sbci	r29, 0x03	; 3
    263c:	8f 93       	push	r24
    263e:	c5 57       	subi	r28, 0x75	; 117
    2640:	dc 4f       	sbci	r29, 0xFC	; 252
    2642:	88 81       	ld	r24, Y
    2644:	cb 58       	subi	r28, 0x8B	; 139
    2646:	d3 40       	sbci	r29, 0x03	; 3
    2648:	8f 93       	push	r24
    264a:	c6 57       	subi	r28, 0x76	; 118
    264c:	dc 4f       	sbci	r29, 0xFC	; 252
    264e:	88 81       	ld	r24, Y
    2650:	ca 58       	subi	r28, 0x8A	; 138
    2652:	d3 40       	sbci	r29, 0x03	; 3
    2654:	8f 93       	push	r24
    2656:	c7 57       	subi	r28, 0x77	; 119
    2658:	dc 4f       	sbci	r29, 0xFC	; 252
    265a:	88 81       	ld	r24, Y
    265c:	c9 58       	subi	r28, 0x89	; 137
    265e:	d3 40       	sbci	r29, 0x03	; 3
    2660:	8f 93       	push	r24
    2662:	c8 57       	subi	r28, 0x78	; 120
    2664:	dc 4f       	sbci	r29, 0xFC	; 252
    2666:	88 81       	ld	r24, Y
    2668:	c8 58       	subi	r28, 0x88	; 136
    266a:	d3 40       	sbci	r29, 0x03	; 3
    266c:	8f 93       	push	r24
    266e:	1f 92       	push	r1
    2670:	df 92       	push	r13
    2672:	bf 92       	push	r11
    2674:	af 92       	push	r10
    2676:	ce 01       	movw	r24, r28
    2678:	83 5d       	subi	r24, 0xD3	; 211
    267a:	9d 4f       	sbci	r25, 0xFD	; 253
    267c:	9f 93       	push	r25
    267e:	8f 93       	push	r24
    2680:	ff 92       	push	r15
    2682:	ef 92       	push	r14
    2684:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
				pid.deadZone, pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
			printLine(outbuf);
    2688:	cd bf       	out	0x3d, r28	; 61
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	c7 01       	movw	r24, r14
    268e:	0e 94 81 03 	call	0x702	; 0x702 <printLine>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2692:	f1 2c       	mov	r15, r1

			sprintf(outbuf, format_MT2, currenttime, (char) (controller-63),
				pid.deadZone, pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
			printLine(outbuf);

			break;
    2694:	41 c5       	rjmp	.+2690   	; 0x3118 <report+0xff8>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    2696:	ce 01       	movw	r24, r28
    2698:	86 5f       	subi	r24, 0xF6	; 246
    269a:	9e 4f       	sbci	r25, 0xFE	; 254
    269c:	0e 94 48 07 	call	0xe90	; 0xe90 <get_time>
			controller = pcmd[cstack].cobject + 31;
    26a0:	84 e3       	ldi	r24, 0x34	; 52
    26a2:	80 9f       	mul	r24, r16
    26a4:	f0 01       	movw	r30, r0
    26a6:	81 9f       	mul	r24, r17
    26a8:	f0 0d       	add	r31, r0
    26aa:	11 24       	eor	r1, r1
    26ac:	e1 5f       	subi	r30, 0xF1	; 241
    26ae:	f7 4d       	sbci	r31, 0xD7	; 215
    26b0:	81 81       	ldd	r24, Z+1	; 0x01
    26b2:	0f 2e       	mov	r0, r31
    26b4:	ff e1       	ldi	r31, 0x1F	; 31
    26b6:	ef 2e       	mov	r14, r31
    26b8:	f0 2d       	mov	r31, r0
    26ba:	e8 0e       	add	r14, r24

			if (get_MOTOR_ENCODER(controller, &encoderValue) == ERROR) {
    26bc:	be 01       	movw	r22, r28
    26be:	6a 5a       	subi	r22, 0xAA	; 170
    26c0:	7c 4f       	sbci	r23, 0xFC	; 252
    26c2:	8e 2d       	mov	r24, r14
    26c4:	0e 94 09 1b 	call	0x3612	; 0x3612 <get_MOTOR_ENCODER>
    26c8:	f8 2e       	mov	r15, r24
    26ca:	93 e6       	ldi	r25, 0x63	; 99
    26cc:	89 13       	cpse	r24, r25
    26ce:	07 c0       	rjmp	.+14     	; 0x26de <report+0x5be>
				printError(ERR_MTR, "report: get_MOTOR_ENCODER error");
    26d0:	62 ed       	ldi	r22, 0xD2	; 210
    26d2:	73 eb       	ldi	r23, 0xB3	; 179
    26d4:	86 e3       	ldi	r24, 0x36	; 54
    26d6:	91 e0       	ldi	r25, 0x01	; 1
    26d8:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				return(ERROR);
    26dc:	1d c5       	rjmp	.+2618   	; 0x3118 <report+0xff8>
			}

			micronValue = encoderValue/ENC_COUNTS_PER_MICRON;
    26de:	ca 5a       	subi	r28, 0xAA	; 170
    26e0:	dc 4f       	sbci	r29, 0xFC	; 252
    26e2:	68 81       	ld	r22, Y
    26e4:	79 81       	ldd	r23, Y+1	; 0x01
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	9b 81       	ldd	r25, Y+3	; 0x03
    26ea:	c6 55       	subi	r28, 0x56	; 86
    26ec:	d3 40       	sbci	r29, 0x03	; 3
    26ee:	2b e1       	ldi	r18, 0x1B	; 27
    26f0:	31 e0       	ldi	r19, 0x01	; 1
    26f2:	40 e0       	ldi	r20, 0x00	; 0
    26f4:	50 e0       	ldi	r21, 0x00	; 0
    26f6:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <__divmodsi4>
    26fa:	d2 2e       	mov	r13, r18
    26fc:	c3 2e       	mov	r12, r19
    26fe:	b4 2e       	mov	r11, r20
    2700:	a5 2e       	mov	r10, r21

			if (get_MOTOR_SPEED(controller, &encoderSpeed) == ERROR) {
    2702:	be 01       	movw	r22, r28
    2704:	66 5a       	subi	r22, 0xA6	; 166
    2706:	7c 4f       	sbci	r23, 0xFC	; 252
    2708:	8e 2d       	mov	r24, r14
    270a:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_MOTOR_SPEED>
    270e:	83 36       	cpi	r24, 0x63	; 99
    2710:	61 f4       	brne	.+24     	; 0x272a <report+0x60a>
				encoderSpeed = 0x7FFFFFFF;
    2712:	8f ef       	ldi	r24, 0xFF	; 255
    2714:	9f ef       	ldi	r25, 0xFF	; 255
    2716:	af ef       	ldi	r26, 0xFF	; 255
    2718:	bf e7       	ldi	r27, 0x7F	; 127
    271a:	c6 5a       	subi	r28, 0xA6	; 166
    271c:	dc 4f       	sbci	r29, 0xFC	; 252
    271e:	88 83       	st	Y, r24
    2720:	99 83       	std	Y+1, r25	; 0x01
    2722:	aa 83       	std	Y+2, r26	; 0x02
    2724:	bb 83       	std	Y+3, r27	; 0x03
    2726:	ca 55       	subi	r28, 0x5A	; 90
    2728:	d3 40       	sbci	r29, 0x03	; 3
			}

			micronSpeed = encoderSpeed/ENC_COUNTS_PER_MICRON;
    272a:	c6 5a       	subi	r28, 0xA6	; 166
    272c:	dc 4f       	sbci	r29, 0xFC	; 252
    272e:	68 81       	ld	r22, Y
    2730:	79 81       	ldd	r23, Y+1	; 0x01
    2732:	8a 81       	ldd	r24, Y+2	; 0x02
    2734:	9b 81       	ldd	r25, Y+3	; 0x03
    2736:	ca 55       	subi	r28, 0x5A	; 90
    2738:	d3 40       	sbci	r29, 0x03	; 3
    273a:	2b e1       	ldi	r18, 0x1B	; 27
    273c:	31 e0       	ldi	r19, 0x01	; 1
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	50 e0       	ldi	r21, 0x00	; 0
    2742:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <__divmodsi4>
    2746:	92 2e       	mov	r9, r18
    2748:	83 2e       	mov	r8, r19
    274a:	74 2e       	mov	r7, r20
    274c:	65 2e       	mov	r6, r21

			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
    274e:	be 01       	movw	r22, r28
    2750:	66 59       	subi	r22, 0x96	; 150
    2752:	7c 4f       	sbci	r23, 0xFC	; 252
    2754:	8e 2d       	mov	r24, r14
    2756:	0e 94 9c 1a 	call	0x3538	; 0x3538 <get_MOTOR_CURRENT>
    275a:	83 36       	cpi	r24, 0x63	; 99
    275c:	71 f4       	brne	.+28     	; 0x277a <report+0x65a>
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
    275e:	62 ef       	ldi	r22, 0xF2	; 242
    2760:	73 eb       	ldi	r23, 0xB3	; 179
    2762:	86 e3       	ldi	r24, 0x36	; 54
    2764:	91 e0       	ldi	r25, 0x01	; 1
    2766:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				motorCurrent = 0xFFFF;
    276a:	8f ef       	ldi	r24, 0xFF	; 255
    276c:	9f ef       	ldi	r25, 0xFF	; 255
    276e:	c6 59       	subi	r28, 0x96	; 150
    2770:	dc 4f       	sbci	r29, 0xFC	; 252
    2772:	88 83       	st	Y, r24
    2774:	99 83       	std	Y+1, r25	; 0x01
    2776:	ca 56       	subi	r28, 0x6A	; 106
    2778:	d3 40       	sbci	r29, 0x03	; 3
			}

			mdir = '?';
			if (motorDir[controller - MOTOR_A] == MTRDIRPOSITIVE) {
    277a:	f1 2c       	mov	r15, r1
    277c:	80 e8       	ldi	r24, 0x80	; 128
    277e:	e8 1a       	sub	r14, r24
    2780:	f1 08       	sbc	r15, r1
    2782:	f7 01       	movw	r30, r14
    2784:	e3 5c       	subi	r30, 0xC3	; 195
    2786:	f5 4d       	sbci	r31, 0xD5	; 213
    2788:	80 81       	ld	r24, Z
    278a:	81 30       	cpi	r24, 0x01	; 1
    278c:	39 f0       	breq	.+14     	; 0x279c <report+0x67c>
				mdir = 'F';
			} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
    278e:	88 23       	and	r24, r24
    2790:	51 f0       	breq	.+20     	; 0x27a6 <report+0x686>
			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
				motorCurrent = 0xFFFF;
			}

			mdir = '?';
    2792:	0f 2e       	mov	r0, r31
    2794:	ff e3       	ldi	r31, 0x3F	; 63
    2796:	5f 2e       	mov	r5, r31
    2798:	f0 2d       	mov	r31, r0
    279a:	09 c0       	rjmp	.+18     	; 0x27ae <report+0x68e>
			if (motorDir[controller - MOTOR_A] == MTRDIRPOSITIVE) {
				mdir = 'F';
    279c:	0f 2e       	mov	r0, r31
    279e:	f6 e4       	ldi	r31, 0x46	; 70
    27a0:	5f 2e       	mov	r5, r31
    27a2:	f0 2d       	mov	r31, r0
    27a4:	04 c0       	rjmp	.+8      	; 0x27ae <report+0x68e>
			} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
				mdir = 'R';
    27a6:	0f 2e       	mov	r0, r31
    27a8:	f2 e5       	ldi	r31, 0x52	; 82
    27aa:	5f 2e       	mov	r5, r31
    27ac:	f0 2d       	mov	r31, r0
			}

			mlimit = '?';
			if (get_MOTOR_LIMITS() == ERROR) {
    27ae:	0e 94 57 20 	call	0x40ae	; 0x40ae <get_MOTOR_LIMITS>
    27b2:	83 36       	cpi	r24, 0x63	; 99
    27b4:	41 f4       	brne	.+16     	; 0x27c6 <report+0x6a6>
				printError(ERR_MTR, "report: get_MOTOR_LIMITS error");
    27b6:	62 e1       	ldi	r22, 0x12	; 18
    27b8:	74 eb       	ldi	r23, 0xB4	; 180
    27ba:	86 e3       	ldi	r24, 0x36	; 54
    27bc:	91 e0       	ldi	r25, 0x01	; 1
    27be:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				mdir = 'F';
			} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
				mdir = 'R';
			}

			mlimit = '?';
    27c2:	4f e3       	ldi	r20, 0x3F	; 63
    27c4:	09 c0       	rjmp	.+18     	; 0x27d8 <report+0x6b8>
			if (get_MOTOR_LIMITS() == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_LIMITS error");
			} else {
				if (motorLim[controller - MOTOR_A] == YES) {
    27c6:	f7 01       	movw	r30, r14
    27c8:	e0 5c       	subi	r30, 0xC0	; 192
    27ca:	f5 4d       	sbci	r31, 0xD5	; 213
    27cc:	80 81       	ld	r24, Z
    27ce:	81 30       	cpi	r24, 0x01	; 1
    27d0:	11 f4       	brne	.+4      	; 0x27d6 <report+0x6b6>
					mlimit = 'Y';
    27d2:	49 e5       	ldi	r20, 0x59	; 89
    27d4:	01 c0       	rjmp	.+2      	; 0x27d8 <report+0x6b8>
				mdir = 'F';
			} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
				mdir = 'R';
			}

			mlimit = '?';
    27d6:	4f e3       	ldi	r20, 0x3F	; 63
				} else if (motorLim[controller - MOTOR_A] == MTRLIMUNKNOWN) {
					mlimit = '?';
				}
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
    27d8:	24 e3       	ldi	r18, 0x34	; 52
    27da:	20 9f       	mul	r18, r16
    27dc:	c0 01       	movw	r24, r0
    27de:	21 9f       	mul	r18, r17
    27e0:	90 0d       	add	r25, r0
    27e2:	11 24       	eor	r1, r1
    27e4:	9c 01       	movw	r18, r24
    27e6:	26 5c       	subi	r18, 0xC6	; 198
    27e8:	37 4d       	sbci	r19, 0xD7	; 215
					mlimit = 'Y';
				} else if (motorLim[controller - MOTOR_A] == MTRLIMUNKNOWN) {
					mlimit = '?';
				}
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
    27ea:	fc 01       	movw	r30, r24
    27ec:	e1 5f       	subi	r30, 0xF1	; 241
    27ee:	f7 4d       	sbci	r31, 0xD7	; 215
    27f0:	81 81       	ldd	r24, Z+1	; 0x01
    27f2:	3f 93       	push	r19
    27f4:	2f 93       	push	r18
    27f6:	1f 92       	push	r1
    27f8:	4f 93       	push	r20
    27fa:	1f 92       	push	r1
    27fc:	5f 92       	push	r5
    27fe:	c5 59       	subi	r28, 0x95	; 149
    2800:	dc 4f       	sbci	r29, 0xFC	; 252
    2802:	98 81       	ld	r25, Y
    2804:	cb 56       	subi	r28, 0x6B	; 107
    2806:	d3 40       	sbci	r29, 0x03	; 3
    2808:	9f 93       	push	r25
    280a:	c6 59       	subi	r28, 0x96	; 150
    280c:	dc 4f       	sbci	r29, 0xFC	; 252
    280e:	98 81       	ld	r25, Y
    2810:	ca 56       	subi	r28, 0x6A	; 106
    2812:	d3 40       	sbci	r29, 0x03	; 3
    2814:	9f 93       	push	r25
    2816:	6f 92       	push	r6
    2818:	7f 92       	push	r7
    281a:	8f 92       	push	r8
    281c:	9f 92       	push	r9
    281e:	af 92       	push	r10
    2820:	bf 92       	push	r11
    2822:	cf 92       	push	r12
    2824:	df 92       	push	r13
    2826:	1f 92       	push	r1
    2828:	8f 93       	push	r24
    282a:	ce 01       	movw	r24, r28
    282c:	86 5f       	subi	r24, 0xF6	; 246
    282e:	9e 4f       	sbci	r25, 0xFE	; 254
    2830:	9f 93       	push	r25
    2832:	8f 93       	push	r24
    2834:	87 56       	subi	r24, 0x67	; 103
    2836:	9f 4f       	sbci	r25, 0xFF	; 255
    2838:	9f 93       	push	r25
    283a:	8f 93       	push	r24
    283c:	8e 01       	movw	r16, r28
    283e:	0f 5f       	subi	r16, 0xFF	; 255
    2840:	1f 4f       	sbci	r17, 0xFF	; 255
    2842:	1f 93       	push	r17
    2844:	0f 93       	push	r16
    2846:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
			printLine(outbuf);
    284a:	c8 01       	movw	r24, r16
    284c:	0e 94 81 03 	call	0x702	; 0x702 <printLine>
			break;
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2854:	f1 2c       	mov	r15, r1
				}
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    2856:	60 c4       	rjmp	.+2240   	; 0x3118 <report+0xff8>

		case 'd':			// copy of the above code
			for (i = 0; i < NMOTORS; i++) {
				get_time(currenttime);
    2858:	ce 01       	movw	r24, r28
    285a:	86 5f       	subi	r24, 0xF6	; 246
    285c:	9e 4f       	sbci	r25, 0xFE	; 254
    285e:	0e 94 48 07 	call	0xe90	; 0xe90 <get_time>
				controller = i + MOTOR_A;
    2862:	68 94       	set
    2864:	ee 24       	eor	r14, r14
    2866:	e7 f8       	bld	r14, 7
    2868:	eb 0c       	add	r14, r11

				if (get_MOTOR_ENCODER(controller, &encoderValue) == ERROR) {
    286a:	be 01       	movw	r22, r28
    286c:	6a 5a       	subi	r22, 0xAA	; 170
    286e:	7c 4f       	sbci	r23, 0xFC	; 252
    2870:	8e 2d       	mov	r24, r14
    2872:	0e 94 09 1b 	call	0x3612	; 0x3612 <get_MOTOR_ENCODER>
    2876:	f8 2e       	mov	r15, r24
    2878:	93 e6       	ldi	r25, 0x63	; 99
    287a:	89 13       	cpse	r24, r25
    287c:	07 c0       	rjmp	.+14     	; 0x288c <report+0x76c>
					printError(ERR_MTR, "report: get_MOTOR_ENCODER error");
    287e:	62 ed       	ldi	r22, 0xD2	; 210
    2880:	73 eb       	ldi	r23, 0xB3	; 179
    2882:	86 e3       	ldi	r24, 0x36	; 54
    2884:	91 e0       	ldi	r25, 0x01	; 1
    2886:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
					return(ERROR);
    288a:	46 c4       	rjmp	.+2188   	; 0x3118 <report+0xff8>
				}

				micronValue = encoderValue/ENC_COUNTS_PER_MICRON;
    288c:	ca 5a       	subi	r28, 0xAA	; 170
    288e:	dc 4f       	sbci	r29, 0xFC	; 252
    2890:	68 81       	ld	r22, Y
    2892:	79 81       	ldd	r23, Y+1	; 0x01
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	9b 81       	ldd	r25, Y+3	; 0x03
    2898:	c6 55       	subi	r28, 0x56	; 86
    289a:	d3 40       	sbci	r29, 0x03	; 3
    289c:	2b e1       	ldi	r18, 0x1B	; 27
    289e:	31 e0       	ldi	r19, 0x01	; 1
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <__divmodsi4>
    28a8:	a2 2e       	mov	r10, r18
    28aa:	93 2e       	mov	r9, r19
    28ac:	84 2e       	mov	r8, r20
    28ae:	75 2e       	mov	r7, r21

				if (get_MOTOR_SPEED(controller, &encoderSpeed) == ERROR) {
    28b0:	be 01       	movw	r22, r28
    28b2:	66 5a       	subi	r22, 0xA6	; 166
    28b4:	7c 4f       	sbci	r23, 0xFC	; 252
    28b6:	8e 2d       	mov	r24, r14
    28b8:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_MOTOR_SPEED>
    28bc:	83 36       	cpi	r24, 0x63	; 99
    28be:	61 f4       	brne	.+24     	; 0x28d8 <report+0x7b8>
					encoderSpeed = 0x7FFFFFFF;
    28c0:	8f ef       	ldi	r24, 0xFF	; 255
    28c2:	9f ef       	ldi	r25, 0xFF	; 255
    28c4:	af ef       	ldi	r26, 0xFF	; 255
    28c6:	bf e7       	ldi	r27, 0x7F	; 127
    28c8:	c6 5a       	subi	r28, 0xA6	; 166
    28ca:	dc 4f       	sbci	r29, 0xFC	; 252
    28cc:	88 83       	st	Y, r24
    28ce:	99 83       	std	Y+1, r25	; 0x01
    28d0:	aa 83       	std	Y+2, r26	; 0x02
    28d2:	bb 83       	std	Y+3, r27	; 0x03
    28d4:	ca 55       	subi	r28, 0x5A	; 90
    28d6:	d3 40       	sbci	r29, 0x03	; 3
				}

				micronSpeed = encoderSpeed/ENC_COUNTS_PER_MICRON;
    28d8:	c6 5a       	subi	r28, 0xA6	; 166
    28da:	dc 4f       	sbci	r29, 0xFC	; 252
    28dc:	68 81       	ld	r22, Y
    28de:	79 81       	ldd	r23, Y+1	; 0x01
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	9b 81       	ldd	r25, Y+3	; 0x03
    28e4:	ca 55       	subi	r28, 0x5A	; 90
    28e6:	d3 40       	sbci	r29, 0x03	; 3
    28e8:	2b e1       	ldi	r18, 0x1B	; 27
    28ea:	31 e0       	ldi	r19, 0x01	; 1
    28ec:	40 e0       	ldi	r20, 0x00	; 0
    28ee:	50 e0       	ldi	r21, 0x00	; 0
    28f0:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <__divmodsi4>
    28f4:	62 2e       	mov	r6, r18
    28f6:	53 2e       	mov	r5, r19
    28f8:	44 2e       	mov	r4, r20
    28fa:	35 2e       	mov	r3, r21

				if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
    28fc:	be 01       	movw	r22, r28
    28fe:	66 59       	subi	r22, 0x96	; 150
    2900:	7c 4f       	sbci	r23, 0xFC	; 252
    2902:	8e 2d       	mov	r24, r14
    2904:	0e 94 9c 1a 	call	0x3538	; 0x3538 <get_MOTOR_CURRENT>
    2908:	83 36       	cpi	r24, 0x63	; 99
    290a:	71 f4       	brne	.+28     	; 0x2928 <report+0x808>
					printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
    290c:	62 ef       	ldi	r22, 0xF2	; 242
    290e:	73 eb       	ldi	r23, 0xB3	; 179
    2910:	86 e3       	ldi	r24, 0x36	; 54
    2912:	91 e0       	ldi	r25, 0x01	; 1
    2914:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
					motorCurrent = 0xFFFF;
    2918:	8f ef       	ldi	r24, 0xFF	; 255
    291a:	9f ef       	ldi	r25, 0xFF	; 255
    291c:	c6 59       	subi	r28, 0x96	; 150
    291e:	dc 4f       	sbci	r29, 0xFC	; 252
    2920:	88 83       	st	Y, r24
    2922:	99 83       	std	Y+1, r25	; 0x01
    2924:	ca 56       	subi	r28, 0x6A	; 106
    2926:	d3 40       	sbci	r29, 0x03	; 3
				}

				mdir = '?';
				if (motorDir[controller - MOTOR_A] == MTRDIRPOSITIVE) {
    2928:	f1 2c       	mov	r15, r1
    292a:	67 01       	movw	r12, r14
    292c:	80 e8       	ldi	r24, 0x80	; 128
    292e:	c8 1a       	sub	r12, r24
    2930:	d1 08       	sbc	r13, r1
    2932:	f6 01       	movw	r30, r12
    2934:	e3 5c       	subi	r30, 0xC3	; 195
    2936:	f5 4d       	sbci	r31, 0xD5	; 213
    2938:	80 81       	ld	r24, Z
    293a:	81 30       	cpi	r24, 0x01	; 1
    293c:	39 f0       	breq	.+14     	; 0x294c <report+0x82c>
						mdir = 'F';
				} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
    293e:	88 23       	and	r24, r24
    2940:	51 f0       	breq	.+20     	; 0x2956 <report+0x836>
				if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
					printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
					motorCurrent = 0xFFFF;
				}

				mdir = '?';
    2942:	0f 2e       	mov	r0, r31
    2944:	ff e3       	ldi	r31, 0x3F	; 63
    2946:	2f 2e       	mov	r2, r31
    2948:	f0 2d       	mov	r31, r0
    294a:	09 c0       	rjmp	.+18     	; 0x295e <report+0x83e>
				if (motorDir[controller - MOTOR_A] == MTRDIRPOSITIVE) {
						mdir = 'F';
    294c:	0f 2e       	mov	r0, r31
    294e:	f6 e4       	ldi	r31, 0x46	; 70
    2950:	2f 2e       	mov	r2, r31
    2952:	f0 2d       	mov	r31, r0
    2954:	04 c0       	rjmp	.+8      	; 0x295e <report+0x83e>
				} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
						mdir = 'R';
    2956:	0f 2e       	mov	r0, r31
    2958:	f2 e5       	ldi	r31, 0x52	; 82
    295a:	2f 2e       	mov	r2, r31
    295c:	f0 2d       	mov	r31, r0
				}

				mlimit = '?';
				if (get_MOTOR_LIMITS() == ERROR) {
    295e:	0e 94 57 20 	call	0x40ae	; 0x40ae <get_MOTOR_LIMITS>
    2962:	83 36       	cpi	r24, 0x63	; 99
    2964:	31 f4       	brne	.+12     	; 0x2972 <report+0x852>
						printError(ERR_MTR, "report: get_MOTOR_LIMITS error");
    2966:	62 e1       	ldi	r22, 0x12	; 18
    2968:	74 eb       	ldi	r23, 0xB4	; 180
    296a:	86 e3       	ldi	r24, 0x36	; 54
    296c:	91 e0       	ldi	r25, 0x01	; 1
    296e:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				}
				if (motorLim[controller - MOTOR_A] == YES) {
    2972:	f6 01       	movw	r30, r12
    2974:	e0 5c       	subi	r30, 0xC0	; 192
    2976:	f5 4d       	sbci	r31, 0xD5	; 213
    2978:	80 81       	ld	r24, Z
    297a:	81 30       	cpi	r24, 0x01	; 1
    297c:	11 f0       	breq	.+4      	; 0x2982 <report+0x862>
						mdir = 'F';
				} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
						mdir = 'R';
				}

				mlimit = '?';
    297e:	3f e3       	ldi	r19, 0x3F	; 63
    2980:	01 c0       	rjmp	.+2      	; 0x2984 <report+0x864>
				if (get_MOTOR_LIMITS() == ERROR) {
						printError(ERR_MTR, "report: get_MOTOR_LIMITS error");
				}
				if (motorLim[controller - MOTOR_A] == YES) {
						mlimit = 'Y';
    2982:	39 e5       	ldi	r19, 0x59	; 89
				}

				sprintf(outbuf, format_MTR, currenttime, controller-31, micronValue,
					micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
    2984:	24 e3       	ldi	r18, 0x34	; 52
    2986:	20 9f       	mul	r18, r16
    2988:	c0 01       	movw	r24, r0
    298a:	21 9f       	mul	r18, r17
    298c:	90 0d       	add	r25, r0
    298e:	11 24       	eor	r1, r1
    2990:	86 5c       	subi	r24, 0xC6	; 198
    2992:	97 4d       	sbci	r25, 0xD7	; 215
				}
				if (motorLim[controller - MOTOR_A] == YES) {
						mlimit = 'Y';
				}

				sprintf(outbuf, format_MTR, currenttime, controller-31, micronValue,
    2994:	9f 93       	push	r25
    2996:	8f 93       	push	r24
    2998:	1f 92       	push	r1
    299a:	3f 93       	push	r19
    299c:	1f 92       	push	r1
    299e:	2f 92       	push	r2
    29a0:	c5 59       	subi	r28, 0x95	; 149
    29a2:	dc 4f       	sbci	r29, 0xFC	; 252
    29a4:	88 81       	ld	r24, Y
    29a6:	cb 56       	subi	r28, 0x6B	; 107
    29a8:	d3 40       	sbci	r29, 0x03	; 3
    29aa:	8f 93       	push	r24
    29ac:	c6 59       	subi	r28, 0x96	; 150
    29ae:	dc 4f       	sbci	r29, 0xFC	; 252
    29b0:	88 81       	ld	r24, Y
    29b2:	ca 56       	subi	r28, 0x6A	; 106
    29b4:	d3 40       	sbci	r29, 0x03	; 3
    29b6:	8f 93       	push	r24
    29b8:	3f 92       	push	r3
    29ba:	4f 92       	push	r4
    29bc:	5f 92       	push	r5
    29be:	6f 92       	push	r6
    29c0:	7f 92       	push	r7
    29c2:	8f 92       	push	r8
    29c4:	9f 92       	push	r9
    29c6:	af 92       	push	r10
    29c8:	9f e1       	ldi	r25, 0x1F	; 31
    29ca:	e9 1a       	sub	r14, r25
    29cc:	f1 08       	sbc	r15, r1
    29ce:	ff 92       	push	r15
    29d0:	ef 92       	push	r14
    29d2:	ce 01       	movw	r24, r28
    29d4:	86 5f       	subi	r24, 0xF6	; 246
    29d6:	9e 4f       	sbci	r25, 0xFE	; 254
    29d8:	9f 93       	push	r25
    29da:	8f 93       	push	r24
    29dc:	87 56       	subi	r24, 0x67	; 103
    29de:	9f 4f       	sbci	r25, 0xFF	; 255
    29e0:	9f 93       	push	r25
    29e2:	8f 93       	push	r24
    29e4:	82 5a       	subi	r24, 0xA2	; 162
    29e6:	91 40       	sbci	r25, 0x01	; 1
    29e8:	7c 01       	movw	r14, r24
    29ea:	9f 93       	push	r25
    29ec:	8f 93       	push	r24
    29ee:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
					micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
				printLine(outbuf);
    29f2:	c7 01       	movw	r24, r14
    29f4:	0e 94 81 03 	call	0x702	; 0x702 <printLine>
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
			printLine(outbuf);
			break;

		case 'd':			// copy of the above code
			for (i = 0; i < NMOTORS; i++) {
    29f8:	b3 94       	inc	r11
    29fa:	cd bf       	out	0x3d, r28	; 61
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	01 c0       	rjmp	.+2      	; 0x2a02 <report+0x8e2>
	uint16_t motorCurrent;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	PID pid;

	switch(pcmd[cstack].cobject) {
    2a00:	b1 2c       	mov	r11, r1
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
			printLine(outbuf);
			break;

		case 'd':			// copy of the above code
			for (i = 0; i < NMOTORS; i++) {
    2a02:	92 e0       	ldi	r25, 0x02	; 2
    2a04:	9b 15       	cp	r25, r11
    2a06:	08 f0       	brcs	.+2      	; 0x2a0a <report+0x8ea>
    2a08:	27 cf       	rjmp	.-434    	; 0x2858 <report+0x738>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2a0a:	f1 2c       	mov	r15, r1
    2a0c:	85 c3       	rjmp	.+1802   	; 0x3118 <report+0xff8>
				printLine(outbuf);
			}
			break;

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	0e 94 2a 2b 	call	0x5654	; 0x5654 <get_temperature>
    2a14:	ce 59       	subi	r28, 0x9E	; 158
    2a16:	dc 4f       	sbci	r29, 0xFC	; 252
    2a18:	68 83       	st	Y, r22
    2a1a:	79 83       	std	Y+1, r23	; 0x01
    2a1c:	8a 83       	std	Y+2, r24	; 0x02
    2a1e:	9b 83       	std	Y+3, r25	; 0x03
    2a20:	c2 56       	subi	r28, 0x62	; 98
    2a22:	d3 40       	sbci	r29, 0x03	; 3
			h0 = get_humidity(0);
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	0e 94 1b 09 	call	0x1236	; 0x1236 <get_humidity>
    2a2a:	d6 2e       	mov	r13, r22
    2a2c:	c7 2e       	mov	r12, r23
    2a2e:	b8 2e       	mov	r11, r24
    2a30:	a9 2e       	mov	r10, r25
			t1 = get_temperature(1);
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	0e 94 2a 2b 	call	0x5654	; 0x5654 <get_temperature>
    2a38:	c8 56       	subi	r28, 0x68	; 104
    2a3a:	dc 4f       	sbci	r29, 0xFC	; 252
    2a3c:	68 83       	st	Y, r22
    2a3e:	c8 59       	subi	r28, 0x98	; 152
    2a40:	d3 40       	sbci	r29, 0x03	; 3
    2a42:	c7 56       	subi	r28, 0x67	; 103
    2a44:	dc 4f       	sbci	r29, 0xFC	; 252
    2a46:	78 83       	st	Y, r23
    2a48:	c9 59       	subi	r28, 0x99	; 153
    2a4a:	d3 40       	sbci	r29, 0x03	; 3
    2a4c:	c6 56       	subi	r28, 0x66	; 102
    2a4e:	dc 4f       	sbci	r29, 0xFC	; 252
    2a50:	88 83       	st	Y, r24
    2a52:	ca 59       	subi	r28, 0x9A	; 154
    2a54:	d3 40       	sbci	r29, 0x03	; 3
    2a56:	c5 56       	subi	r28, 0x65	; 101
    2a58:	dc 4f       	sbci	r29, 0xFC	; 252
    2a5a:	98 83       	st	Y, r25
    2a5c:	cb 59       	subi	r28, 0x9B	; 155
    2a5e:	d3 40       	sbci	r29, 0x03	; 3
			h1 = get_humidity(1);
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	0e 94 1b 09 	call	0x1236	; 0x1236 <get_humidity>
    2a66:	c4 56       	subi	r28, 0x64	; 100
    2a68:	dc 4f       	sbci	r29, 0xFC	; 252
    2a6a:	68 83       	st	Y, r22
    2a6c:	cc 59       	subi	r28, 0x9C	; 156
    2a6e:	d3 40       	sbci	r29, 0x03	; 3
    2a70:	c3 56       	subi	r28, 0x63	; 99
    2a72:	dc 4f       	sbci	r29, 0xFC	; 252
    2a74:	78 83       	st	Y, r23
    2a76:	cd 59       	subi	r28, 0x9D	; 157
    2a78:	d3 40       	sbci	r29, 0x03	; 3
    2a7a:	c2 56       	subi	r28, 0x62	; 98
    2a7c:	dc 4f       	sbci	r29, 0xFC	; 252
    2a7e:	88 83       	st	Y, r24
    2a80:	ce 59       	subi	r28, 0x9E	; 158
    2a82:	d3 40       	sbci	r29, 0x03	; 3
    2a84:	c1 56       	subi	r28, 0x61	; 97
    2a86:	dc 4f       	sbci	r29, 0xFC	; 252
    2a88:	98 83       	st	Y, r25
    2a8a:	cf 59       	subi	r28, 0x9F	; 159
    2a8c:	d3 40       	sbci	r29, 0x03	; 3
			t2 = get_temperature(2);
    2a8e:	82 e0       	ldi	r24, 0x02	; 2
    2a90:	0e 94 2a 2b 	call	0x5654	; 0x5654 <get_temperature>
    2a94:	c0 56       	subi	r28, 0x60	; 96
    2a96:	dc 4f       	sbci	r29, 0xFC	; 252
    2a98:	68 83       	st	Y, r22
    2a9a:	c0 5a       	subi	r28, 0xA0	; 160
    2a9c:	d3 40       	sbci	r29, 0x03	; 3
    2a9e:	cf 55       	subi	r28, 0x5F	; 95
    2aa0:	dc 4f       	sbci	r29, 0xFC	; 252
    2aa2:	78 83       	st	Y, r23
    2aa4:	c1 5a       	subi	r28, 0xA1	; 161
    2aa6:	d3 40       	sbci	r29, 0x03	; 3
    2aa8:	98 2e       	mov	r9, r24
    2aaa:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    2aac:	82 e0       	ldi	r24, 0x02	; 2
    2aae:	0e 94 1b 09 	call	0x1236	; 0x1236 <get_humidity>
    2ab2:	76 2e       	mov	r7, r22
    2ab4:	67 2e       	mov	r6, r23
    2ab6:	58 2e       	mov	r5, r24
    2ab8:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    2aba:	83 e0       	ldi	r24, 0x03	; 3
    2abc:	0e 94 2a 2b 	call	0x5654	; 0x5654 <get_temperature>
    2ac0:	ce 55       	subi	r28, 0x5E	; 94
    2ac2:	dc 4f       	sbci	r29, 0xFC	; 252
    2ac4:	68 83       	st	Y, r22
    2ac6:	c2 5a       	subi	r28, 0xA2	; 162
    2ac8:	d3 40       	sbci	r29, 0x03	; 3
    2aca:	cd 55       	subi	r28, 0x5D	; 93
    2acc:	dc 4f       	sbci	r29, 0xFC	; 252
    2ace:	78 83       	st	Y, r23
    2ad0:	c3 5a       	subi	r28, 0xA3	; 163
    2ad2:	d3 40       	sbci	r29, 0x03	; 3
    2ad4:	38 2e       	mov	r3, r24
    2ad6:	29 2e       	mov	r2, r25
			get_time(currenttime);
    2ad8:	7e 01       	movw	r14, r28
    2ada:	86 ef       	ldi	r24, 0xF6	; 246
    2adc:	e8 1a       	sub	r14, r24
    2ade:	8e ef       	ldi	r24, 0xFE	; 254
    2ae0:	f8 0a       	sbc	r15, r24
    2ae2:	c7 01       	movw	r24, r14
    2ae4:	0e 94 48 07 	call	0xe90	; 0xe90 <get_time>
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    2ae8:	24 e3       	ldi	r18, 0x34	; 52
    2aea:	20 9f       	mul	r18, r16
    2aec:	c0 01       	movw	r24, r0
    2aee:	21 9f       	mul	r18, r17
    2af0:	90 0d       	add	r25, r0
    2af2:	11 24       	eor	r1, r1
    2af4:	86 5c       	subi	r24, 0xC6	; 198
    2af6:	97 4d       	sbci	r25, 0xD7	; 215
    2af8:	9f 93       	push	r25
    2afa:	8f 93       	push	r24
    2afc:	2f 92       	push	r2
    2afe:	3f 92       	push	r3
    2b00:	cd 55       	subi	r28, 0x5D	; 93
    2b02:	dc 4f       	sbci	r29, 0xFC	; 252
    2b04:	98 81       	ld	r25, Y
    2b06:	c3 5a       	subi	r28, 0xA3	; 163
    2b08:	d3 40       	sbci	r29, 0x03	; 3
    2b0a:	9f 93       	push	r25
    2b0c:	ce 55       	subi	r28, 0x5E	; 94
    2b0e:	dc 4f       	sbci	r29, 0xFC	; 252
    2b10:	88 81       	ld	r24, Y
    2b12:	c2 5a       	subi	r28, 0xA2	; 162
    2b14:	d3 40       	sbci	r29, 0x03	; 3
    2b16:	8f 93       	push	r24
    2b18:	4f 92       	push	r4
    2b1a:	5f 92       	push	r5
    2b1c:	6f 92       	push	r6
    2b1e:	7f 92       	push	r7
    2b20:	8f 92       	push	r8
    2b22:	9f 92       	push	r9
    2b24:	cf 55       	subi	r28, 0x5F	; 95
    2b26:	dc 4f       	sbci	r29, 0xFC	; 252
    2b28:	98 81       	ld	r25, Y
    2b2a:	c1 5a       	subi	r28, 0xA1	; 161
    2b2c:	d3 40       	sbci	r29, 0x03	; 3
    2b2e:	9f 93       	push	r25
    2b30:	c0 56       	subi	r28, 0x60	; 96
    2b32:	dc 4f       	sbci	r29, 0xFC	; 252
    2b34:	88 81       	ld	r24, Y
    2b36:	c0 5a       	subi	r28, 0xA0	; 160
    2b38:	d3 40       	sbci	r29, 0x03	; 3
    2b3a:	8f 93       	push	r24
    2b3c:	c1 56       	subi	r28, 0x61	; 97
    2b3e:	dc 4f       	sbci	r29, 0xFC	; 252
    2b40:	98 81       	ld	r25, Y
    2b42:	cf 59       	subi	r28, 0x9F	; 159
    2b44:	d3 40       	sbci	r29, 0x03	; 3
    2b46:	9f 93       	push	r25
    2b48:	c2 56       	subi	r28, 0x62	; 98
    2b4a:	dc 4f       	sbci	r29, 0xFC	; 252
    2b4c:	88 81       	ld	r24, Y
    2b4e:	ce 59       	subi	r28, 0x9E	; 158
    2b50:	d3 40       	sbci	r29, 0x03	; 3
    2b52:	8f 93       	push	r24
    2b54:	c3 56       	subi	r28, 0x63	; 99
    2b56:	dc 4f       	sbci	r29, 0xFC	; 252
    2b58:	98 81       	ld	r25, Y
    2b5a:	cd 59       	subi	r28, 0x9D	; 157
    2b5c:	d3 40       	sbci	r29, 0x03	; 3
    2b5e:	9f 93       	push	r25
    2b60:	c4 56       	subi	r28, 0x64	; 100
    2b62:	dc 4f       	sbci	r29, 0xFC	; 252
    2b64:	88 81       	ld	r24, Y
    2b66:	cc 59       	subi	r28, 0x9C	; 156
    2b68:	d3 40       	sbci	r29, 0x03	; 3
    2b6a:	8f 93       	push	r24
    2b6c:	c5 56       	subi	r28, 0x65	; 101
    2b6e:	dc 4f       	sbci	r29, 0xFC	; 252
    2b70:	98 81       	ld	r25, Y
    2b72:	cb 59       	subi	r28, 0x9B	; 155
    2b74:	d3 40       	sbci	r29, 0x03	; 3
    2b76:	9f 93       	push	r25
    2b78:	c6 56       	subi	r28, 0x66	; 102
    2b7a:	dc 4f       	sbci	r29, 0xFC	; 252
    2b7c:	88 81       	ld	r24, Y
    2b7e:	ca 59       	subi	r28, 0x9A	; 154
    2b80:	d3 40       	sbci	r29, 0x03	; 3
    2b82:	8f 93       	push	r24
    2b84:	c7 56       	subi	r28, 0x67	; 103
    2b86:	dc 4f       	sbci	r29, 0xFC	; 252
    2b88:	98 81       	ld	r25, Y
    2b8a:	c9 59       	subi	r28, 0x99	; 153
    2b8c:	d3 40       	sbci	r29, 0x03	; 3
    2b8e:	9f 93       	push	r25
    2b90:	c8 56       	subi	r28, 0x68	; 104
    2b92:	dc 4f       	sbci	r29, 0xFC	; 252
    2b94:	88 81       	ld	r24, Y
    2b96:	c8 59       	subi	r28, 0x98	; 152
    2b98:	d3 40       	sbci	r29, 0x03	; 3
    2b9a:	8f 93       	push	r24
    2b9c:	af 92       	push	r10
    2b9e:	bf 92       	push	r11
    2ba0:	cf 92       	push	r12
    2ba2:	df 92       	push	r13
    2ba4:	cb 59       	subi	r28, 0x9B	; 155
    2ba6:	dc 4f       	sbci	r29, 0xFC	; 252
    2ba8:	88 81       	ld	r24, Y
    2baa:	c5 56       	subi	r28, 0x65	; 101
    2bac:	d3 40       	sbci	r29, 0x03	; 3
    2bae:	8f 93       	push	r24
    2bb0:	cc 59       	subi	r28, 0x9C	; 156
    2bb2:	dc 4f       	sbci	r29, 0xFC	; 252
    2bb4:	88 81       	ld	r24, Y
    2bb6:	c4 56       	subi	r28, 0x64	; 100
    2bb8:	d3 40       	sbci	r29, 0x03	; 3
    2bba:	8f 93       	push	r24
    2bbc:	cd 59       	subi	r28, 0x9D	; 157
    2bbe:	dc 4f       	sbci	r29, 0xFC	; 252
    2bc0:	88 81       	ld	r24, Y
    2bc2:	c3 56       	subi	r28, 0x63	; 99
    2bc4:	d3 40       	sbci	r29, 0x03	; 3
    2bc6:	8f 93       	push	r24
    2bc8:	ce 59       	subi	r28, 0x9E	; 158
    2bca:	dc 4f       	sbci	r29, 0xFC	; 252
    2bcc:	88 81       	ld	r24, Y
    2bce:	c2 56       	subi	r28, 0x62	; 98
    2bd0:	d3 40       	sbci	r29, 0x03	; 3
    2bd2:	8f 93       	push	r24
    2bd4:	ff 92       	push	r15
    2bd6:	ef 92       	push	r14
    2bd8:	ce 01       	movw	r24, r28
    2bda:	82 5a       	subi	r24, 0xA2	; 162
    2bdc:	9e 4f       	sbci	r25, 0xFE	; 254
    2bde:	9f 93       	push	r25
    2be0:	8f 93       	push	r24
    2be2:	8e 01       	movw	r16, r28
    2be4:	0f 5f       	subi	r16, 0xFF	; 255
    2be6:	1f 4f       	sbci	r17, 0xFF	; 255
    2be8:	1f 93       	push	r17
    2bea:	0f 93       	push	r16
    2bec:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			printLine(outbuf);
    2bf0:	cd bf       	out	0x3d, r28	; 61
    2bf2:	de bf       	out	0x3e, r29	; 62
    2bf4:	c8 01       	movw	r24, r16
    2bf6:	0e 94 81 03 	call	0x702	; 0x702 <printLine>
			writestr_OLED(1, "Temp & Humidity", 1);
    2bfa:	41 e0       	ldi	r20, 0x01	; 1
    2bfc:	61 e3       	ldi	r22, 0x31	; 49
    2bfe:	74 eb       	ldi	r23, 0xB4	; 180
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    2c06:	ce 59       	subi	r28, 0x9E	; 158
    2c08:	dc 4f       	sbci	r29, 0xFC	; 252
    2c0a:	f8 80       	ld	r15, Y
    2c0c:	c2 56       	subi	r28, 0x62	; 98
    2c0e:	d3 40       	sbci	r29, 0x03	; 3
    2c10:	cd 59       	subi	r28, 0x9D	; 157
    2c12:	dc 4f       	sbci	r29, 0xFC	; 252
    2c14:	e8 80       	ld	r14, Y
    2c16:	c3 56       	subi	r28, 0x63	; 99
    2c18:	d3 40       	sbci	r29, 0x03	; 3
    2c1a:	cc 59       	subi	r28, 0x9C	; 156
    2c1c:	dc 4f       	sbci	r29, 0xFC	; 252
    2c1e:	98 80       	ld	r9, Y
    2c20:	c4 56       	subi	r28, 0x64	; 100
    2c22:	d3 40       	sbci	r29, 0x03	; 3
    2c24:	cb 59       	subi	r28, 0x9B	; 155
    2c26:	dc 4f       	sbci	r29, 0xFC	; 252
    2c28:	88 80       	ld	r8, Y
    2c2a:	c5 56       	subi	r28, 0x65	; 101
    2c2c:	d3 40       	sbci	r29, 0x03	; 3
    2c2e:	26 e6       	ldi	r18, 0x66	; 102
    2c30:	36 e6       	ldi	r19, 0x66	; 102
    2c32:	46 ee       	ldi	r20, 0xE6	; 230
    2c34:	5f e3       	ldi	r21, 0x3F	; 63
    2c36:	6f 2d       	mov	r22, r15
    2c38:	7e 2d       	mov	r23, r14
    2c3a:	89 2d       	mov	r24, r9
    2c3c:	98 2d       	mov	r25, r8
    2c3e:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
    2c42:	af 92       	push	r10
    2c44:	bf 92       	push	r11
    2c46:	cf 92       	push	r12
    2c48:	df 92       	push	r13
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e0       	ldi	r20, 0x00	; 0
    2c50:	52 e4       	ldi	r21, 0x42	; 66
    2c52:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__addsf3>
    2c56:	9f 93       	push	r25
    2c58:	8f 93       	push	r24
    2c5a:	7f 93       	push	r23
    2c5c:	6f 93       	push	r22
    2c5e:	8f 92       	push	r8
    2c60:	9f 92       	push	r9
    2c62:	ef 92       	push	r14
    2c64:	ff 92       	push	r15
    2c66:	81 e4       	ldi	r24, 0x41	; 65
    2c68:	94 eb       	ldi	r25, 0xB4	; 180
    2c6a:	9f 93       	push	r25
    2c6c:	8f 93       	push	r24
    2c6e:	1f 93       	push	r17
    2c70:	0f 93       	push	r16
    2c72:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2c76:	42 e0       	ldi	r20, 0x02	; 2
    2c78:	b8 01       	movw	r22, r16
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <writestr_OLED>
			break;
    2c80:	cd bf       	out	0x3d, r28	; 61
    2c82:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2c84:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    2c86:	48 c2       	rjmp	.+1168   	; 0x3118 <report+0xff8>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    2c88:	ae 01       	movw	r20, r28
    2c8a:	4c 58       	subi	r20, 0x8C	; 140
    2c8c:	5c 4f       	sbci	r21, 0xFC	; 252
    2c8e:	be 01       	movw	r22, r28
    2c90:	60 59       	subi	r22, 0x90	; 144
    2c92:	7c 4f       	sbci	r23, 0xFC	; 252
    2c94:	ce 01       	movw	r24, r28
    2c96:	84 59       	subi	r24, 0x94	; 148
    2c98:	9c 4f       	sbci	r25, 0xFC	; 252
    2c9a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <get_orientation>
			get_time(currenttime);
    2c9e:	7e 01       	movw	r14, r28
    2ca0:	96 ef       	ldi	r25, 0xF6	; 246
    2ca2:	e9 1a       	sub	r14, r25
    2ca4:	9e ef       	ldi	r25, 0xFE	; 254
    2ca6:	f9 0a       	sbc	r15, r25
    2ca8:	c7 01       	movw	r24, r14
    2caa:	0e 94 48 07 	call	0xe90	; 0xe90 <get_time>
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
    2cae:	24 e3       	ldi	r18, 0x34	; 52
    2cb0:	20 9f       	mul	r18, r16
    2cb2:	c0 01       	movw	r24, r0
    2cb4:	21 9f       	mul	r18, r17
    2cb6:	90 0d       	add	r25, r0
    2cb8:	11 24       	eor	r1, r1
    2cba:	86 5c       	subi	r24, 0xC6	; 198
    2cbc:	97 4d       	sbci	r25, 0xD7	; 215
    2cbe:	9f 93       	push	r25
    2cc0:	8f 93       	push	r24
    2cc2:	c9 58       	subi	r28, 0x89	; 137
    2cc4:	dc 4f       	sbci	r29, 0xFC	; 252
    2cc6:	88 81       	ld	r24, Y
    2cc8:	c7 57       	subi	r28, 0x77	; 119
    2cca:	d3 40       	sbci	r29, 0x03	; 3
    2ccc:	8f 93       	push	r24
    2cce:	ca 58       	subi	r28, 0x8A	; 138
    2cd0:	dc 4f       	sbci	r29, 0xFC	; 252
    2cd2:	88 81       	ld	r24, Y
    2cd4:	c6 57       	subi	r28, 0x76	; 118
    2cd6:	d3 40       	sbci	r29, 0x03	; 3
    2cd8:	8f 93       	push	r24
    2cda:	cb 58       	subi	r28, 0x8B	; 139
    2cdc:	dc 4f       	sbci	r29, 0xFC	; 252
    2cde:	88 81       	ld	r24, Y
    2ce0:	c5 57       	subi	r28, 0x75	; 117
    2ce2:	d3 40       	sbci	r29, 0x03	; 3
    2ce4:	8f 93       	push	r24
    2ce6:	cc 58       	subi	r28, 0x8C	; 140
    2ce8:	dc 4f       	sbci	r29, 0xFC	; 252
    2cea:	88 81       	ld	r24, Y
    2cec:	c4 57       	subi	r28, 0x74	; 116
    2cee:	d3 40       	sbci	r29, 0x03	; 3
    2cf0:	8f 93       	push	r24
    2cf2:	cd 58       	subi	r28, 0x8D	; 141
    2cf4:	dc 4f       	sbci	r29, 0xFC	; 252
    2cf6:	88 81       	ld	r24, Y
    2cf8:	c3 57       	subi	r28, 0x73	; 115
    2cfa:	d3 40       	sbci	r29, 0x03	; 3
    2cfc:	8f 93       	push	r24
    2cfe:	ce 58       	subi	r28, 0x8E	; 142
    2d00:	dc 4f       	sbci	r29, 0xFC	; 252
    2d02:	88 81       	ld	r24, Y
    2d04:	c2 57       	subi	r28, 0x72	; 114
    2d06:	d3 40       	sbci	r29, 0x03	; 3
    2d08:	8f 93       	push	r24
    2d0a:	cf 58       	subi	r28, 0x8F	; 143
    2d0c:	dc 4f       	sbci	r29, 0xFC	; 252
    2d0e:	88 81       	ld	r24, Y
    2d10:	c1 57       	subi	r28, 0x71	; 113
    2d12:	d3 40       	sbci	r29, 0x03	; 3
    2d14:	8f 93       	push	r24
    2d16:	c0 59       	subi	r28, 0x90	; 144
    2d18:	dc 4f       	sbci	r29, 0xFC	; 252
    2d1a:	88 81       	ld	r24, Y
    2d1c:	c0 57       	subi	r28, 0x70	; 112
    2d1e:	d3 40       	sbci	r29, 0x03	; 3
    2d20:	8f 93       	push	r24
    2d22:	c1 59       	subi	r28, 0x91	; 145
    2d24:	dc 4f       	sbci	r29, 0xFC	; 252
    2d26:	88 81       	ld	r24, Y
    2d28:	cf 56       	subi	r28, 0x6F	; 111
    2d2a:	d3 40       	sbci	r29, 0x03	; 3
    2d2c:	8f 93       	push	r24
    2d2e:	c2 59       	subi	r28, 0x92	; 146
    2d30:	dc 4f       	sbci	r29, 0xFC	; 252
    2d32:	88 81       	ld	r24, Y
    2d34:	ce 56       	subi	r28, 0x6E	; 110
    2d36:	d3 40       	sbci	r29, 0x03	; 3
    2d38:	8f 93       	push	r24
    2d3a:	c3 59       	subi	r28, 0x93	; 147
    2d3c:	dc 4f       	sbci	r29, 0xFC	; 252
    2d3e:	88 81       	ld	r24, Y
    2d40:	cd 56       	subi	r28, 0x6D	; 109
    2d42:	d3 40       	sbci	r29, 0x03	; 3
    2d44:	8f 93       	push	r24
    2d46:	c4 59       	subi	r28, 0x94	; 148
    2d48:	dc 4f       	sbci	r29, 0xFC	; 252
    2d4a:	88 81       	ld	r24, Y
    2d4c:	cc 56       	subi	r28, 0x6C	; 108
    2d4e:	d3 40       	sbci	r29, 0x03	; 3
    2d50:	8f 93       	push	r24
    2d52:	ff 92       	push	r15
    2d54:	ef 92       	push	r14
    2d56:	ce 01       	movw	r24, r28
    2d58:	84 58       	subi	r24, 0x84	; 132
    2d5a:	9d 4f       	sbci	r25, 0xFD	; 253
    2d5c:	9f 93       	push	r25
    2d5e:	8f 93       	push	r24
    2d60:	8e 01       	movw	r16, r28
    2d62:	0f 5f       	subi	r16, 0xFF	; 255
    2d64:	1f 4f       	sbci	r17, 0xFF	; 255
    2d66:	1f 93       	push	r17
    2d68:	0f 93       	push	r16
    2d6a:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			printLine(outbuf);
    2d6e:	c8 01       	movw	r24, r16
    2d70:	0e 94 81 03 	call	0x702	; 0x702 <printLine>
			writestr_OLED(1, "Orientation", 1);
    2d74:	41 e0       	ldi	r20, 0x01	; 1
    2d76:	67 e5       	ldi	r22, 0x57	; 87
    2d78:	74 eb       	ldi	r23, 0xB4	; 180
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    2d80:	c9 58       	subi	r28, 0x89	; 137
    2d82:	dc 4f       	sbci	r29, 0xFC	; 252
    2d84:	88 81       	ld	r24, Y
    2d86:	c7 57       	subi	r28, 0x77	; 119
    2d88:	d3 40       	sbci	r29, 0x03	; 3
    2d8a:	8f 93       	push	r24
    2d8c:	ca 58       	subi	r28, 0x8A	; 138
    2d8e:	dc 4f       	sbci	r29, 0xFC	; 252
    2d90:	88 81       	ld	r24, Y
    2d92:	c6 57       	subi	r28, 0x76	; 118
    2d94:	d3 40       	sbci	r29, 0x03	; 3
    2d96:	8f 93       	push	r24
    2d98:	cb 58       	subi	r28, 0x8B	; 139
    2d9a:	dc 4f       	sbci	r29, 0xFC	; 252
    2d9c:	88 81       	ld	r24, Y
    2d9e:	c5 57       	subi	r28, 0x75	; 117
    2da0:	d3 40       	sbci	r29, 0x03	; 3
    2da2:	8f 93       	push	r24
    2da4:	cc 58       	subi	r28, 0x8C	; 140
    2da6:	dc 4f       	sbci	r29, 0xFC	; 252
    2da8:	88 81       	ld	r24, Y
    2daa:	c4 57       	subi	r28, 0x74	; 116
    2dac:	d3 40       	sbci	r29, 0x03	; 3
    2dae:	8f 93       	push	r24
    2db0:	cd 58       	subi	r28, 0x8D	; 141
    2db2:	dc 4f       	sbci	r29, 0xFC	; 252
    2db4:	88 81       	ld	r24, Y
    2db6:	c3 57       	subi	r28, 0x73	; 115
    2db8:	d3 40       	sbci	r29, 0x03	; 3
    2dba:	8f 93       	push	r24
    2dbc:	ce 58       	subi	r28, 0x8E	; 142
    2dbe:	dc 4f       	sbci	r29, 0xFC	; 252
    2dc0:	88 81       	ld	r24, Y
    2dc2:	c2 57       	subi	r28, 0x72	; 114
    2dc4:	d3 40       	sbci	r29, 0x03	; 3
    2dc6:	8f 93       	push	r24
    2dc8:	cf 58       	subi	r28, 0x8F	; 143
    2dca:	dc 4f       	sbci	r29, 0xFC	; 252
    2dcc:	88 81       	ld	r24, Y
    2dce:	c1 57       	subi	r28, 0x71	; 113
    2dd0:	d3 40       	sbci	r29, 0x03	; 3
    2dd2:	8f 93       	push	r24
    2dd4:	c0 59       	subi	r28, 0x90	; 144
    2dd6:	dc 4f       	sbci	r29, 0xFC	; 252
    2dd8:	88 81       	ld	r24, Y
    2dda:	c0 57       	subi	r28, 0x70	; 112
    2ddc:	d3 40       	sbci	r29, 0x03	; 3
    2dde:	8f 93       	push	r24
    2de0:	c1 59       	subi	r28, 0x91	; 145
    2de2:	dc 4f       	sbci	r29, 0xFC	; 252
    2de4:	88 81       	ld	r24, Y
    2de6:	cf 56       	subi	r28, 0x6F	; 111
    2de8:	d3 40       	sbci	r29, 0x03	; 3
    2dea:	8f 93       	push	r24
    2dec:	c2 59       	subi	r28, 0x92	; 146
    2dee:	dc 4f       	sbci	r29, 0xFC	; 252
    2df0:	88 81       	ld	r24, Y
    2df2:	ce 56       	subi	r28, 0x6E	; 110
    2df4:	d3 40       	sbci	r29, 0x03	; 3
    2df6:	8f 93       	push	r24
    2df8:	c3 59       	subi	r28, 0x93	; 147
    2dfa:	dc 4f       	sbci	r29, 0xFC	; 252
    2dfc:	88 81       	ld	r24, Y
    2dfe:	cd 56       	subi	r28, 0x6D	; 109
    2e00:	d3 40       	sbci	r29, 0x03	; 3
    2e02:	8f 93       	push	r24
    2e04:	c4 59       	subi	r28, 0x94	; 148
    2e06:	dc 4f       	sbci	r29, 0xFC	; 252
    2e08:	88 81       	ld	r24, Y
    2e0a:	cc 56       	subi	r28, 0x6C	; 108
    2e0c:	d3 40       	sbci	r29, 0x03	; 3
    2e0e:	8f 93       	push	r24
    2e10:	ce 01       	movw	r24, r28
    2e12:	88 56       	subi	r24, 0x68	; 104
    2e14:	9d 4f       	sbci	r25, 0xFD	; 253
    2e16:	9f 93       	push	r25
    2e18:	8f 93       	push	r24
    2e1a:	1f 93       	push	r17
    2e1c:	0f 93       	push	r16
    2e1e:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2e22:	cd bf       	out	0x3d, r28	; 61
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	42 e0       	ldi	r20, 0x02	; 2
    2e28:	b8 01       	movw	r22, r16
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2e30:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    2e32:	72 c1       	rjmp	.+740    	; 0x3118 <report+0xff8>

		case 'p':					// Pneumatics
			get_time(currenttime);
    2e34:	7e 01       	movw	r14, r28
    2e36:	96 ef       	ldi	r25, 0xF6	; 246
    2e38:	e9 1a       	sub	r14, r25
    2e3a:	9e ef       	ldi	r25, 0xFE	; 254
    2e3c:	f9 0a       	sbc	r15, r25
    2e3e:	c7 01       	movw	r24, r14
    2e40:	0e 94 48 07 	call	0xe90	; 0xe90 <get_time>
			read_PNEUSensors(&shutter, &left, &right, &air);
    2e44:	9e 01       	movw	r18, r28
    2e46:	23 5a       	subi	r18, 0xA3	; 163
    2e48:	3e 4f       	sbci	r19, 0xFE	; 254
    2e4a:	ae 01       	movw	r20, r28
    2e4c:	44 5a       	subi	r20, 0xA4	; 164
    2e4e:	5e 4f       	sbci	r21, 0xFE	; 254
    2e50:	be 01       	movw	r22, r28
    2e52:	65 5a       	subi	r22, 0xA5	; 165
    2e54:	7e 4f       	sbci	r23, 0xFE	; 254
    2e56:	ce 01       	movw	r24, r28
    2e58:	86 5a       	subi	r24, 0xA6	; 166
    2e5a:	9e 4f       	sbci	r25, 0xFE	; 254
    2e5c:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <read_PNEUSensors>
			sprintf(outbuf, format_PNU, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    2e60:	24 e3       	ldi	r18, 0x34	; 52
    2e62:	20 9f       	mul	r18, r16
    2e64:	c0 01       	movw	r24, r0
    2e66:	21 9f       	mul	r18, r17
    2e68:	90 0d       	add	r25, r0
    2e6a:	11 24       	eor	r1, r1
    2e6c:	86 5c       	subi	r24, 0xC6	; 198
    2e6e:	97 4d       	sbci	r25, 0xD7	; 215
    2e70:	9f 93       	push	r25
    2e72:	8f 93       	push	r24
    2e74:	c3 5a       	subi	r28, 0xA3	; 163
    2e76:	de 4f       	sbci	r29, 0xFE	; 254
    2e78:	88 81       	ld	r24, Y
    2e7a:	cd 55       	subi	r28, 0x5D	; 93
    2e7c:	d1 40       	sbci	r29, 0x01	; 1
    2e7e:	1f 92       	push	r1
    2e80:	8f 93       	push	r24
    2e82:	c4 5a       	subi	r28, 0xA4	; 164
    2e84:	de 4f       	sbci	r29, 0xFE	; 254
    2e86:	88 81       	ld	r24, Y
    2e88:	cc 55       	subi	r28, 0x5C	; 92
    2e8a:	d1 40       	sbci	r29, 0x01	; 1
    2e8c:	1f 92       	push	r1
    2e8e:	8f 93       	push	r24
    2e90:	c5 5a       	subi	r28, 0xA5	; 165
    2e92:	de 4f       	sbci	r29, 0xFE	; 254
    2e94:	88 81       	ld	r24, Y
    2e96:	cb 55       	subi	r28, 0x5B	; 91
    2e98:	d1 40       	sbci	r29, 0x01	; 1
    2e9a:	1f 92       	push	r1
    2e9c:	8f 93       	push	r24
    2e9e:	c6 5a       	subi	r28, 0xA6	; 166
    2ea0:	de 4f       	sbci	r29, 0xFE	; 254
    2ea2:	88 81       	ld	r24, Y
    2ea4:	ca 55       	subi	r28, 0x5A	; 90
    2ea6:	d1 40       	sbci	r29, 0x01	; 1
    2ea8:	1f 92       	push	r1
    2eaa:	8f 93       	push	r24
    2eac:	ff 92       	push	r15
    2eae:	ef 92       	push	r14
    2eb0:	ce 01       	movw	r24, r28
    2eb2:	86 55       	subi	r24, 0x56	; 86
    2eb4:	9d 4f       	sbci	r25, 0xFD	; 253
    2eb6:	9f 93       	push	r25
    2eb8:	8f 93       	push	r24
    2eba:	8e 01       	movw	r16, r28
    2ebc:	0f 5f       	subi	r16, 0xFF	; 255
    2ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec0:	1f 93       	push	r17
    2ec2:	0f 93       	push	r16
    2ec4:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			printLine(outbuf);
    2ec8:	c8 01       	movw	r24, r16
    2eca:	0e 94 81 03 	call	0x702	; 0x702 <printLine>
			sprintf(outbuf, dformat_PN1, left, right);
    2ece:	c4 5a       	subi	r28, 0xA4	; 164
    2ed0:	de 4f       	sbci	r29, 0xFE	; 254
    2ed2:	88 81       	ld	r24, Y
    2ed4:	cc 55       	subi	r28, 0x5C	; 92
    2ed6:	d1 40       	sbci	r29, 0x01	; 1
    2ed8:	1f 92       	push	r1
    2eda:	8f 93       	push	r24
    2edc:	c5 5a       	subi	r28, 0xA5	; 165
    2ede:	de 4f       	sbci	r29, 0xFE	; 254
    2ee0:	88 81       	ld	r24, Y
    2ee2:	cb 55       	subi	r28, 0x5B	; 91
    2ee4:	d1 40       	sbci	r29, 0x01	; 1
    2ee6:	1f 92       	push	r1
    2ee8:	8f 93       	push	r24
    2eea:	ce 01       	movw	r24, r28
    2eec:	89 52       	subi	r24, 0x29	; 41
    2eee:	9d 4f       	sbci	r25, 0xFD	; 253
    2ef0:	9f 93       	push	r25
    2ef2:	8f 93       	push	r24
    2ef4:	1f 93       	push	r17
    2ef6:	0f 93       	push	r16
    2ef8:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			writestr_OLED(1, outbuf, 1);
    2efc:	41 e0       	ldi	r20, 0x01	; 1
    2efe:	b8 01       	movw	r22, r16
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2f06:	c3 5a       	subi	r28, 0xA3	; 163
    2f08:	de 4f       	sbci	r29, 0xFE	; 254
    2f0a:	88 81       	ld	r24, Y
    2f0c:	cd 55       	subi	r28, 0x5D	; 93
    2f0e:	d1 40       	sbci	r29, 0x01	; 1
    2f10:	1f 92       	push	r1
    2f12:	8f 93       	push	r24
    2f14:	c6 5a       	subi	r28, 0xA6	; 166
    2f16:	de 4f       	sbci	r29, 0xFE	; 254
    2f18:	88 81       	ld	r24, Y
    2f1a:	ca 55       	subi	r28, 0x5A	; 90
    2f1c:	d1 40       	sbci	r29, 0x01	; 1
    2f1e:	1f 92       	push	r1
    2f20:	8f 93       	push	r24
    2f22:	ce 01       	movw	r24, r28
    2f24:	86 51       	subi	r24, 0x16	; 22
    2f26:	9d 4f       	sbci	r25, 0xFD	; 253
    2f28:	9f 93       	push	r25
    2f2a:	8f 93       	push	r24
    2f2c:	1f 93       	push	r17
    2f2e:	0f 93       	push	r16
    2f30:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2f34:	cd bf       	out	0x3d, r28	; 61
    2f36:	de bf       	out	0x3e, r29	; 62
    2f38:	42 e0       	ldi	r20, 0x02	; 2
    2f3a:	b8 01       	movw	r22, r16
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2f42:	f1 2c       	mov	r15, r1
			printLine(outbuf);
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    2f44:	e9 c0       	rjmp	.+466    	; 0x3118 <report+0xff8>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    2f46:	7e 01       	movw	r14, r28
    2f48:	96 ef       	ldi	r25, 0xF6	; 246
    2f4a:	e9 1a       	sub	r14, r25
    2f4c:	9e ef       	ldi	r25, 0xFE	; 254
    2f4e:	f9 0a       	sbc	r15, r25
    2f50:	c7 01       	movw	r24, r14
    2f52:	0e 94 48 07 	call	0xe90	; 0xe90 <get_time>
			get_SETTIME(lastsettime);
    2f56:	6e 01       	movw	r12, r28
    2f58:	82 ee       	ldi	r24, 0xE2	; 226
    2f5a:	c8 1a       	sub	r12, r24
    2f5c:	8e ef       	ldi	r24, 0xFE	; 254
    2f5e:	d8 0a       	sbc	r13, r24
    2f60:	c6 01       	movw	r24, r12
    2f62:	0e 94 b9 08 	call	0x1172	; 0x1172 <get_SETTIME>
			get_BOOTTIME(boottime);
    2f66:	5e 01       	movw	r10, r28
    2f68:	9e ec       	ldi	r25, 0xCE	; 206
    2f6a:	a9 1a       	sub	r10, r25
    2f6c:	9e ef       	ldi	r25, 0xFE	; 254
    2f6e:	b9 0a       	sbc	r11, r25
    2f70:	c5 01       	movw	r24, r10
    2f72:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    2f76:	24 e3       	ldi	r18, 0x34	; 52
    2f78:	20 9f       	mul	r18, r16
    2f7a:	c0 01       	movw	r24, r0
    2f7c:	21 9f       	mul	r18, r17
    2f7e:	90 0d       	add	r25, r0
    2f80:	11 24       	eor	r1, r1
    2f82:	86 5c       	subi	r24, 0xC6	; 198
    2f84:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			get_SETTIME(lastsettime);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
    2f86:	9f 93       	push	r25
    2f88:	8f 93       	push	r24
    2f8a:	bf 92       	push	r11
    2f8c:	af 92       	push	r10
    2f8e:	df 92       	push	r13
    2f90:	cf 92       	push	r12
    2f92:	ff 92       	push	r15
    2f94:	ef 92       	push	r14
    2f96:	ce 01       	movw	r24, r28
    2f98:	83 50       	subi	r24, 0x03	; 3
    2f9a:	9d 4f       	sbci	r25, 0xFD	; 253
    2f9c:	9f 93       	push	r25
    2f9e:	8f 93       	push	r24
    2fa0:	8e 01       	movw	r16, r28
    2fa2:	0f 5f       	subi	r16, 0xFF	; 255
    2fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa6:	1f 93       	push	r17
    2fa8:	0f 93       	push	r16
    2faa:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
    2fae:	c8 01       	movw	r24, r16
    2fb0:	0e 94 81 03 	call	0x702	; 0x702 <printLine>
			writestr_OLED(1, "Time", 1);
    2fb4:	41 e0       	ldi	r20, 0x01	; 1
    2fb6:	63 e6       	ldi	r22, 0x63	; 99
    2fb8:	74 eb       	ldi	r23, 0xB4	; 180
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    2fc0:	b7 01       	movw	r22, r14
    2fc2:	65 5f       	subi	r22, 0xF5	; 245
    2fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fc6:	42 e0       	ldi	r20, 0x02	; 2
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <writestr_OLED>
			break;
    2fce:	cd bf       	out	0x3d, r28	; 61
    2fd0:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2fd2:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    2fd4:	a1 c0       	rjmp	.+322    	; 0x3118 <report+0xff8>

		case 'v':					// Vacuum
			redvac = read_ionpump(REDPUMP);
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	0e 94 f6 09 	call	0x13ec	; 0x13ec <read_ionpump>
    2fdc:	d6 2e       	mov	r13, r22
    2fde:	c7 2e       	mov	r12, r23
    2fe0:	b8 2e       	mov	r11, r24
    2fe2:	a9 2e       	mov	r10, r25
			bluvac = read_ionpump(BLUEPUMP);
    2fe4:	82 e0       	ldi	r24, 0x02	; 2
    2fe6:	0e 94 f6 09 	call	0x13ec	; 0x13ec <read_ionpump>
    2fea:	96 2e       	mov	r9, r22
    2fec:	87 2e       	mov	r8, r23
    2fee:	78 2e       	mov	r7, r24
    2ff0:	69 2e       	mov	r6, r25
			get_time(currenttime);
    2ff2:	7e 01       	movw	r14, r28
    2ff4:	96 ef       	ldi	r25, 0xF6	; 246
    2ff6:	e9 1a       	sub	r14, r25
    2ff8:	9e ef       	ldi	r25, 0xFE	; 254
    2ffa:	f9 0a       	sbc	r15, r25
    2ffc:	c7 01       	movw	r24, r14
    2ffe:	0e 94 48 07 	call	0xe90	; 0xe90 <get_time>
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
    3002:	24 e3       	ldi	r18, 0x34	; 52
    3004:	20 9f       	mul	r18, r16
    3006:	c0 01       	movw	r24, r0
    3008:	21 9f       	mul	r18, r17
    300a:	90 0d       	add	r25, r0
    300c:	11 24       	eor	r1, r1
    300e:	86 5c       	subi	r24, 0xC6	; 198
    3010:	97 4d       	sbci	r25, 0xD7	; 215
    3012:	9f 93       	push	r25
    3014:	8f 93       	push	r24
    3016:	6f 92       	push	r6
    3018:	7f 92       	push	r7
    301a:	8f 92       	push	r8
    301c:	9f 92       	push	r9
    301e:	af 92       	push	r10
    3020:	bf 92       	push	r11
    3022:	cf 92       	push	r12
    3024:	df 92       	push	r13
    3026:	ff 92       	push	r15
    3028:	ef 92       	push	r14
    302a:	ce 01       	movw	r24, r28
    302c:	8a 5e       	subi	r24, 0xEA	; 234
    302e:	9c 4f       	sbci	r25, 0xFC	; 252
    3030:	9f 93       	push	r25
    3032:	8f 93       	push	r24
    3034:	8e 01       	movw	r16, r28
    3036:	0f 5f       	subi	r16, 0xFF	; 255
    3038:	1f 4f       	sbci	r17, 0xFF	; 255
    303a:	1f 93       	push	r17
    303c:	0f 93       	push	r16
    303e:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			printLine(outbuf);
    3042:	c8 01       	movw	r24, r16
    3044:	0e 94 81 03 	call	0x702	; 0x702 <printLine>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    3048:	41 e0       	ldi	r20, 0x01	; 1
    304a:	68 e6       	ldi	r22, 0x68	; 104
    304c:	74 eb       	ldi	r23, 0xB4	; 180
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    3054:	6f 92       	push	r6
    3056:	7f 92       	push	r7
    3058:	8f 92       	push	r8
    305a:	9f 92       	push	r9
    305c:	af 92       	push	r10
    305e:	bf 92       	push	r11
    3060:	cf 92       	push	r12
    3062:	df 92       	push	r13
    3064:	ce 01       	movw	r24, r28
    3066:	85 5c       	subi	r24, 0xC5	; 197
    3068:	9c 4f       	sbci	r25, 0xFC	; 252
    306a:	9f 93       	push	r25
    306c:	8f 93       	push	r24
    306e:	1f 93       	push	r17
    3070:	0f 93       	push	r16
    3072:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			writestr_OLED(1, outbuf, 2);
    3076:	42 e0       	ldi	r20, 0x02	; 2
    3078:	b8 01       	movw	r22, r16
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <writestr_OLED>
			break;
    3080:	cd bf       	out	0x3d, r28	; 61
    3082:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    3084:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    3086:	48 c0       	rjmp	.+144    	; 0x3118 <report+0xff8>

		case 'V':					// Version
			get_VERSION(version);
    3088:	6e 01       	movw	r12, r28
    308a:	9f ef       	ldi	r25, 0xFF	; 255
    308c:	c9 0e       	add	r12, r25
    308e:	d1 1c       	adc	r13, r1
    3090:	c6 01       	movw	r24, r12
    3092:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <get_VERSION>
			get_time(currenttime);
    3096:	7e 01       	movw	r14, r28
    3098:	86 ef       	ldi	r24, 0xF6	; 246
    309a:	e8 1a       	sub	r14, r24
    309c:	8e ef       	ldi	r24, 0xFE	; 254
    309e:	f8 0a       	sbc	r15, r24
    30a0:	c7 01       	movw	r24, r14
    30a2:	0e 94 48 07 	call	0xe90	; 0xe90 <get_time>
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
    30a6:	24 e3       	ldi	r18, 0x34	; 52
    30a8:	20 9f       	mul	r18, r16
    30aa:	c0 01       	movw	r24, r0
    30ac:	21 9f       	mul	r18, r17
    30ae:	90 0d       	add	r25, r0
    30b0:	11 24       	eor	r1, r1
    30b2:	86 5c       	subi	r24, 0xC6	; 198
    30b4:	97 4d       	sbci	r25, 0xD7	; 215
    30b6:	9f 93       	push	r25
    30b8:	8f 93       	push	r24
    30ba:	df 92       	push	r13
    30bc:	cf 92       	push	r12
    30be:	ff 92       	push	r15
    30c0:	ef 92       	push	r14
    30c2:	ce 01       	movw	r24, r28
    30c4:	88 5b       	subi	r24, 0xB8	; 184
    30c6:	9c 4f       	sbci	r25, 0xFC	; 252
    30c8:	9f 93       	push	r25
    30ca:	8f 93       	push	r24
    30cc:	8e 01       	movw	r16, r28
    30ce:	0f 5f       	subi	r16, 0xFF	; 255
    30d0:	1f 4f       	sbci	r17, 0xFF	; 255
    30d2:	1f 93       	push	r17
    30d4:	0f 93       	push	r16
    30d6:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			printLine(outbuf);
    30da:	c8 01       	movw	r24, r16
    30dc:	0e 94 81 03 	call	0x702	; 0x702 <printLine>
			writestr_OLED(1, "specMech Version", 1);
    30e0:	41 e0       	ldi	r20, 0x01	; 1
    30e2:	66 e4       	ldi	r22, 0x46	; 70
    30e4:	72 eb       	ldi	r23, 0xB2	; 178
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <writestr_OLED>
			get_VERSION(outbuf);
    30ec:	c8 01       	movw	r24, r16
    30ee:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    30f2:	42 e0       	ldi	r20, 0x02	; 2
    30f4:	b8 01       	movw	r22, r16
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <writestr_OLED>
			break;
    30fc:	cd bf       	out	0x3d, r28	; 61
    30fe:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    3100:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    3102:	0a c0       	rjmp	.+20     	; 0x3118 <report+0xff8>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    3104:	68 e7       	ldi	r22, 0x78	; 120
    3106:	74 eb       	ldi	r23, 0xB4	; 180
    3108:	8a ec       	ldi	r24, 0xCA	; 202
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
			return(ERROR);
    3110:	0f 2e       	mov	r0, r31
    3112:	f3 e6       	ldi	r31, 0x63	; 99
    3114:	ff 2e       	mov	r15, r31
    3116:	f0 2d       	mov	r31, r0
			break;
	}

	return(NOERROR);

}
    3118:	8f 2d       	mov	r24, r15
    311a:	cd 55       	subi	r28, 0x5D	; 93
    311c:	dc 4f       	sbci	r29, 0xFC	; 252
    311e:	cd bf       	out	0x3d, r28	; 61
    3120:	de bf       	out	0x3e, r29	; 62
    3122:	df 91       	pop	r29
    3124:	cf 91       	pop	r28
    3126:	1f 91       	pop	r17
    3128:	0f 91       	pop	r16
    312a:	ff 90       	pop	r15
    312c:	ef 90       	pop	r14
    312e:	df 90       	pop	r13
    3130:	cf 90       	pop	r12
    3132:	bf 90       	pop	r11
    3134:	af 90       	pop	r10
    3136:	9f 90       	pop	r9
    3138:	8f 90       	pop	r8
    313a:	7f 90       	pop	r7
    313c:	6f 90       	pop	r6
    313e:	5f 90       	pop	r5
    3140:	4f 90       	pop	r4
    3142:	3f 90       	pop	r3
    3144:	2f 90       	pop	r2
    3146:	08 95       	ret

00003148 <crc16>:

-------------*/

	return(NOERROR);

}
    3148:	dc 01       	movw	r26, r24
    314a:	40 e0       	ldi	r20, 0x00	; 0
    314c:	50 e0       	ldi	r21, 0x00	; 0
    314e:	80 e0       	ldi	r24, 0x00	; 0
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	1b c0       	rjmp	.+54     	; 0x318a <crc16+0x42>
    3154:	fd 01       	movw	r30, r26
    3156:	e4 0f       	add	r30, r20
    3158:	f5 1f       	adc	r31, r21
    315a:	20 81       	ld	r18, Z
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	32 2f       	mov	r19, r18
    3160:	22 27       	eor	r18, r18
    3162:	82 27       	eor	r24, r18
    3164:	93 27       	eor	r25, r19
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	0c c0       	rjmp	.+24     	; 0x3182 <crc16+0x3a>
    316a:	99 23       	and	r25, r25
    316c:	3c f4       	brge	.+14     	; 0x317c <crc16+0x34>
    316e:	88 0f       	add	r24, r24
    3170:	99 1f       	adc	r25, r25
    3172:	31 e2       	ldi	r19, 0x21	; 33
    3174:	83 27       	eor	r24, r19
    3176:	30 e1       	ldi	r19, 0x10	; 16
    3178:	93 27       	eor	r25, r19
    317a:	02 c0       	rjmp	.+4      	; 0x3180 <crc16+0x38>
    317c:	88 0f       	add	r24, r24
    317e:	99 1f       	adc	r25, r25
    3180:	2f 5f       	subi	r18, 0xFF	; 255
    3182:	28 30       	cpi	r18, 0x08	; 8
    3184:	90 f3       	brcs	.-28     	; 0x316a <crc16+0x22>
    3186:	4f 5f       	subi	r20, 0xFF	; 255
    3188:	5f 4f       	sbci	r21, 0xFF	; 255
    318a:	46 17       	cp	r20, r22
    318c:	57 07       	cpc	r21, r23
    318e:	10 f3       	brcs	.-60     	; 0x3154 <crc16+0xc>
    3190:	08 95       	ret

00003192 <get_FRAM_ENCSAVETIME>:
    3192:	ef 92       	push	r14
    3194:	ff 92       	push	r15
    3196:	1f 93       	push	r17
    3198:	cf 93       	push	r28
    319a:	df 93       	push	r29
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
    31a0:	c6 57       	subi	r28, 0x76	; 118
    31a2:	d1 09       	sbc	r29, r1
    31a4:	cd bf       	out	0x3d, r28	; 61
    31a6:	de bf       	out	0x3e, r29	; 62
    31a8:	7c 01       	movw	r14, r24
    31aa:	86 e2       	ldi	r24, 0x26	; 38
    31ac:	e6 e8       	ldi	r30, 0x86	; 134
    31ae:	f6 eb       	ldi	r31, 0xB6	; 182
    31b0:	de 01       	movw	r26, r28
    31b2:	af 5a       	subi	r26, 0xAF	; 175
    31b4:	bf 4f       	sbci	r27, 0xFF	; 255
    31b6:	01 90       	ld	r0, Z+
    31b8:	0d 92       	st	X+, r0
    31ba:	8a 95       	dec	r24
    31bc:	e1 f7       	brne	.-8      	; 0x31b6 <get_FRAM_ENCSAVETIME+0x24>
    31be:	24 e1       	ldi	r18, 0x14	; 20
    31c0:	a7 01       	movw	r20, r14
    31c2:	60 e2       	ldi	r22, 0x20	; 32
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	80 e5       	ldi	r24, 0x50	; 80
    31c8:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <read_FRAM>
    31cc:	18 2f       	mov	r17, r24
    31ce:	83 36       	cpi	r24, 0x63	; 99
    31d0:	b1 f4       	brne	.+44     	; 0x31fe <get_FRAM_ENCSAVETIME+0x6c>
    31d2:	ce 01       	movw	r24, r28
    31d4:	8f 5a       	subi	r24, 0xAF	; 175
    31d6:	9f 4f       	sbci	r25, 0xFF	; 255
    31d8:	9f 93       	push	r25
    31da:	8f 93       	push	r24
    31dc:	80 55       	subi	r24, 0x50	; 80
    31de:	91 09       	sbc	r25, r1
    31e0:	7c 01       	movw	r14, r24
    31e2:	9f 93       	push	r25
    31e4:	8f 93       	push	r24
    31e6:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
    31ea:	b7 01       	movw	r22, r14
    31ec:	86 e3       	ldi	r24, 0x36	; 54
    31ee:	91 e0       	ldi	r25, 0x01	; 1
    31f0:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
    31f4:	0f 90       	pop	r0
    31f6:	0f 90       	pop	r0
    31f8:	0f 90       	pop	r0
    31fa:	0f 90       	pop	r0
    31fc:	03 c0       	rjmp	.+6      	; 0x3204 <get_FRAM_ENCSAVETIME+0x72>
    31fe:	f7 01       	movw	r30, r14
    3200:	13 8a       	std	Z+19, r1	; 0x13
    3202:	10 e0       	ldi	r17, 0x00	; 0
    3204:	81 2f       	mov	r24, r17
    3206:	ca 58       	subi	r28, 0x8A	; 138
    3208:	df 4f       	sbci	r29, 0xFF	; 255
    320a:	cd bf       	out	0x3d, r28	; 61
    320c:	de bf       	out	0x3e, r29	; 62
    320e:	df 91       	pop	r29
    3210:	cf 91       	pop	r28
    3212:	1f 91       	pop	r17
    3214:	ff 90       	pop	r15
    3216:	ef 90       	pop	r14
    3218:	08 95       	ret

0000321a <get_FRAM_MOTOR_ENCODER>:
    321a:	cf 92       	push	r12
    321c:	df 92       	push	r13
    321e:	ef 92       	push	r14
    3220:	ff 92       	push	r15
    3222:	0f 93       	push	r16
    3224:	1f 93       	push	r17
    3226:	cf 93       	push	r28
    3228:	df 93       	push	r29
    322a:	cd b7       	in	r28, 0x3d	; 61
    322c:	de b7       	in	r29, 0x3e	; 62
    322e:	c3 58       	subi	r28, 0x83	; 131
    3230:	d1 09       	sbc	r29, r1
    3232:	cd bf       	out	0x3d, r28	; 61
    3234:	de bf       	out	0x3e, r29	; 62
    3236:	8b 01       	movw	r16, r22
    3238:	9f e2       	ldi	r25, 0x2F	; 47
    323a:	ec ea       	ldi	r30, 0xAC	; 172
    323c:	f6 eb       	ldi	r31, 0xB6	; 182
    323e:	de 01       	movw	r26, r28
    3240:	ab 5a       	subi	r26, 0xAB	; 171
    3242:	bf 4f       	sbci	r27, 0xFF	; 255
    3244:	01 90       	ld	r0, Z+
    3246:	0d 92       	st	X+, r0
    3248:	9a 95       	dec	r25
    324a:	e1 f7       	brne	.-8      	; 0x3244 <get_FRAM_MOTOR_ENCODER+0x2a>
    324c:	81 38       	cpi	r24, 0x81	; 129
    324e:	59 f0       	breq	.+22     	; 0x3266 <get_FRAM_MOTOR_ENCODER+0x4c>
    3250:	82 38       	cpi	r24, 0x82	; 130
    3252:	31 f0       	breq	.+12     	; 0x3260 <get_FRAM_MOTOR_ENCODER+0x46>
    3254:	80 38       	cpi	r24, 0x80	; 128
    3256:	09 f0       	breq	.+2      	; 0x325a <get_FRAM_MOTOR_ENCODER+0x40>
    3258:	69 c0       	rjmp	.+210    	; 0x332c <get_FRAM_MOTOR_ENCODER+0x112>
    325a:	64 e1       	ldi	r22, 0x14	; 20
    325c:	70 e0       	ldi	r23, 0x00	; 0
    325e:	05 c0       	rjmp	.+10     	; 0x326a <get_FRAM_MOTOR_ENCODER+0x50>
    3260:	6c e1       	ldi	r22, 0x1C	; 28
    3262:	70 e0       	ldi	r23, 0x00	; 0
    3264:	02 c0       	rjmp	.+4      	; 0x326a <get_FRAM_MOTOR_ENCODER+0x50>
    3266:	68 e1       	ldi	r22, 0x18	; 24
    3268:	70 e0       	ldi	r23, 0x00	; 0
    326a:	f8 2e       	mov	r15, r24
    326c:	24 e0       	ldi	r18, 0x04	; 4
    326e:	ae 01       	movw	r20, r28
    3270:	4f 5a       	subi	r20, 0xAF	; 175
    3272:	5f 4f       	sbci	r21, 0xFF	; 255
    3274:	80 e5       	ldi	r24, 0x50	; 80
    3276:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <read_FRAM>
    327a:	e8 2e       	mov	r14, r24
    327c:	83 e6       	ldi	r24, 0x63	; 99
    327e:	e8 12       	cpse	r14, r24
    3280:	24 c0       	rjmp	.+72     	; 0x32ca <get_FRAM_MOTOR_ENCODER+0xb0>
    3282:	81 ec       	ldi	r24, 0xC1	; 193
    3284:	8f 0d       	add	r24, r15
    3286:	1f 92       	push	r1
    3288:	8f 93       	push	r24
    328a:	ce 01       	movw	r24, r28
    328c:	8b 5a       	subi	r24, 0xAB	; 171
    328e:	9f 4f       	sbci	r25, 0xFF	; 255
    3290:	9f 93       	push	r25
    3292:	8f 93       	push	r24
    3294:	fe 01       	movw	r30, r28
    3296:	31 96       	adiw	r30, 0x01	; 1
    3298:	6f 01       	movw	r12, r30
    329a:	ff 93       	push	r31
    329c:	ef 93       	push	r30
    329e:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
    32a2:	b6 01       	movw	r22, r12
    32a4:	83 e9       	ldi	r24, 0x93	; 147
    32a6:	91 e0       	ldi	r25, 0x01	; 1
    32a8:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
    32ac:	8f ef       	ldi	r24, 0xFF	; 255
    32ae:	9f ef       	ldi	r25, 0xFF	; 255
    32b0:	dc 01       	movw	r26, r24
    32b2:	f8 01       	movw	r30, r16
    32b4:	80 83       	st	Z, r24
    32b6:	91 83       	std	Z+1, r25	; 0x01
    32b8:	a2 83       	std	Z+2, r26	; 0x02
    32ba:	b3 83       	std	Z+3, r27	; 0x03
    32bc:	0f 90       	pop	r0
    32be:	0f 90       	pop	r0
    32c0:	0f 90       	pop	r0
    32c2:	0f 90       	pop	r0
    32c4:	0f 90       	pop	r0
    32c6:	0f 90       	pop	r0
    32c8:	35 c0       	rjmp	.+106    	; 0x3334 <get_FRAM_MOTOR_ENCODER+0x11a>
    32ca:	62 96       	adiw	r28, 0x12	; 18
    32cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    32ce:	62 97       	sbiw	r28, 0x12	; 18
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	a0 e0       	ldi	r26, 0x00	; 0
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	78 2f       	mov	r23, r24
    32d8:	66 27       	eor	r22, r22
    32da:	55 27       	eor	r21, r21
    32dc:	44 27       	eor	r20, r20
    32de:	63 96       	adiw	r28, 0x13	; 19
    32e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    32e2:	63 97       	sbiw	r28, 0x13	; 19
    32e4:	89 2f       	mov	r24, r25
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	a0 e0       	ldi	r26, 0x00	; 0
    32ea:	b0 e0       	ldi	r27, 0x00	; 0
    32ec:	dc 01       	movw	r26, r24
    32ee:	99 27       	eor	r25, r25
    32f0:	88 27       	eor	r24, r24
    32f2:	84 2b       	or	r24, r20
    32f4:	95 2b       	or	r25, r21
    32f6:	a6 2b       	or	r26, r22
    32f8:	b7 2b       	or	r27, r23
    32fa:	64 96       	adiw	r28, 0x14	; 20
    32fc:	4f ad       	ldd	r20, Y+63	; 0x3f
    32fe:	64 97       	sbiw	r28, 0x14	; 20
    3300:	50 e0       	ldi	r21, 0x00	; 0
    3302:	60 e0       	ldi	r22, 0x00	; 0
    3304:	70 e0       	ldi	r23, 0x00	; 0
    3306:	76 2f       	mov	r23, r22
    3308:	65 2f       	mov	r22, r21
    330a:	54 2f       	mov	r21, r20
    330c:	44 27       	eor	r20, r20
    330e:	84 2b       	or	r24, r20
    3310:	95 2b       	or	r25, r21
    3312:	a6 2b       	or	r26, r22
    3314:	b7 2b       	or	r27, r23
    3316:	65 96       	adiw	r28, 0x15	; 21
    3318:	2f ad       	ldd	r18, Y+63	; 0x3f
    331a:	65 97       	sbiw	r28, 0x15	; 21
    331c:	82 2b       	or	r24, r18
    331e:	f8 01       	movw	r30, r16
    3320:	80 83       	st	Z, r24
    3322:	91 83       	std	Z+1, r25	; 0x01
    3324:	a2 83       	std	Z+2, r26	; 0x02
    3326:	b3 83       	std	Z+3, r27	; 0x03
    3328:	e1 2c       	mov	r14, r1
    332a:	04 c0       	rjmp	.+8      	; 0x3334 <get_FRAM_MOTOR_ENCODER+0x11a>
    332c:	0f 2e       	mov	r0, r31
    332e:	f3 e6       	ldi	r31, 0x63	; 99
    3330:	ef 2e       	mov	r14, r31
    3332:	f0 2d       	mov	r31, r0
    3334:	8e 2d       	mov	r24, r14
    3336:	cd 57       	subi	r28, 0x7D	; 125
    3338:	df 4f       	sbci	r29, 0xFF	; 255
    333a:	cd bf       	out	0x3d, r28	; 61
    333c:	de bf       	out	0x3e, r29	; 62
    333e:	df 91       	pop	r29
    3340:	cf 91       	pop	r28
    3342:	1f 91       	pop	r17
    3344:	0f 91       	pop	r16
    3346:	ff 90       	pop	r15
    3348:	ef 90       	pop	r14
    334a:	df 90       	pop	r13
    334c:	cf 90       	pop	r12
    334e:	08 95       	ret

00003350 <get_MOTOR>:
    3350:	3f 92       	push	r3
    3352:	4f 92       	push	r4
    3354:	5f 92       	push	r5
    3356:	6f 92       	push	r6
    3358:	7f 92       	push	r7
    335a:	8f 92       	push	r8
    335c:	9f 92       	push	r9
    335e:	af 92       	push	r10
    3360:	bf 92       	push	r11
    3362:	cf 92       	push	r12
    3364:	df 92       	push	r13
    3366:	ef 92       	push	r14
    3368:	ff 92       	push	r15
    336a:	0f 93       	push	r16
    336c:	1f 93       	push	r17
    336e:	cf 93       	push	r28
    3370:	df 93       	push	r29
    3372:	cd b7       	in	r28, 0x3d	; 61
    3374:	de b7       	in	r29, 0x3e	; 62
    3376:	ce 58       	subi	r28, 0x8E	; 142
    3378:	d1 09       	sbc	r29, r1
    337a:	cd bf       	out	0x3d, r28	; 61
    337c:	de bf       	out	0x3e, r29	; 62
    337e:	38 2e       	mov	r3, r24
    3380:	7a 01       	movw	r14, r20
    3382:	42 2e       	mov	r4, r18
    3384:	8d b6       	in	r8, 0x3d	; 61
    3386:	9e b6       	in	r9, 0x3e	; 62
    3388:	a2 2e       	mov	r10, r18
    338a:	b1 2c       	mov	r11, r1
    338c:	c5 01       	movw	r24, r10
    338e:	02 96       	adiw	r24, 0x02	; 2
    3390:	35 01       	movw	r6, r10
    3392:	2f ef       	ldi	r18, 0xFF	; 255
    3394:	62 1a       	sub	r6, r18
    3396:	72 0a       	sbc	r7, r18
    3398:	ed b7       	in	r30, 0x3d	; 61
    339a:	fe b7       	in	r31, 0x3e	; 62
    339c:	e8 1b       	sub	r30, r24
    339e:	f9 0b       	sbc	r31, r25
    33a0:	ed bf       	out	0x3d, r30	; 61
    33a2:	fe bf       	out	0x3e, r31	; 62
    33a4:	2d b7       	in	r18, 0x3d	; 61
    33a6:	3e b7       	in	r19, 0x3e	; 62
    33a8:	2f 5f       	subi	r18, 0xFF	; 255
    33aa:	3f 4f       	sbci	r19, 0xFF	; 255
    33ac:	69 01       	movw	r12, r18
    33ae:	89 01       	movw	r16, r18
    33b0:	80 e2       	ldi	r24, 0x20	; 32
    33b2:	eb ed       	ldi	r30, 0xDB	; 219
    33b4:	f6 eb       	ldi	r31, 0xB6	; 182
    33b6:	de 01       	movw	r26, r28
    33b8:	af 5a       	subi	r26, 0xAF	; 175
    33ba:	bf 4f       	sbci	r27, 0xFF	; 255
    33bc:	01 90       	ld	r0, Z+
    33be:	0d 92       	st	X+, r0
    33c0:	8a 95       	dec	r24
    33c2:	e1 f7       	brne	.-8      	; 0x33bc <get_MOTOR+0x6c>
    33c4:	8e e1       	ldi	r24, 0x1E	; 30
    33c6:	eb ef       	ldi	r30, 0xFB	; 251
    33c8:	f6 eb       	ldi	r31, 0xB6	; 182
    33ca:	de 01       	movw	r26, r28
    33cc:	af 58       	subi	r26, 0x8F	; 143
    33ce:	bf 4f       	sbci	r27, 0xFF	; 255
    33d0:	01 90       	ld	r0, Z+
    33d2:	0d 92       	st	X+, r0
    33d4:	8a 95       	dec	r24
    33d6:	e1 f7       	brne	.-8      	; 0x33d0 <get_MOTOR+0x80>
    33d8:	68 94       	set
    33da:	55 24       	eor	r5, r5
    33dc:	51 f8       	bld	r5, 1
    33de:	54 0c       	add	r5, r4
    33e0:	10 92 42 2b 	sts	0x2B42, r1	; 0x802b42 <ser_recv1+0xff>
    33e4:	50 92 41 2b 	sts	0x2B41, r5	; 0x802b41 <ser_recv1+0xfe>
    33e8:	ed b7       	in	r30, 0x3d	; 61
    33ea:	fe b7       	in	r31, 0x3e	; 62
    33ec:	31 82       	std	Z+1, r3	; 0x01
    33ee:	f9 01       	movw	r30, r18
    33f0:	61 83       	std	Z+1, r22	; 0x01
    33f2:	62 e0       	ldi	r22, 0x02	; 2
    33f4:	70 e0       	ldi	r23, 0x00	; 0
    33f6:	c9 01       	movw	r24, r18
    33f8:	0e 94 a4 18 	call	0x3148	; 0x3148 <crc16>
    33fc:	f6 01       	movw	r30, r12
    33fe:	92 83       	std	Z+2, r25	; 0x02
    3400:	83 83       	std	Z+3, r24	; 0x03
    3402:	62 e0       	ldi	r22, 0x02	; 2
    3404:	c6 01       	movw	r24, r12
    3406:	0e 94 f2 2d 	call	0x5be4	; 0x5be4 <send_USART1>
    340a:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    340e:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
    3412:	24 c0       	rjmp	.+72     	; 0x345c <get_MOTOR+0x10c>
    3414:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    3418:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    341c:	85 36       	cpi	r24, 0x65	; 101
    341e:	91 05       	cpc	r25, r1
    3420:	e8 f0       	brcs	.+58     	; 0x345c <get_MOTOR+0x10c>
    3422:	81 ec       	ldi	r24, 0xC1	; 193
    3424:	83 0d       	add	r24, r3
    3426:	1f 92       	push	r1
    3428:	8f 93       	push	r24
    342a:	ce 01       	movw	r24, r28
    342c:	8f 5a       	subi	r24, 0xAF	; 175
    342e:	9f 4f       	sbci	r25, 0xFF	; 255
    3430:	9f 93       	push	r25
    3432:	8f 93       	push	r24
    3434:	8e 01       	movw	r16, r28
    3436:	0f 5f       	subi	r16, 0xFF	; 255
    3438:	1f 4f       	sbci	r17, 0xFF	; 255
    343a:	1f 93       	push	r17
    343c:	0f 93       	push	r16
    343e:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
    3442:	b8 01       	movw	r22, r16
    3444:	80 e3       	ldi	r24, 0x30	; 48
    3446:	91 e0       	ldi	r25, 0x01	; 1
    3448:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	0f 90       	pop	r0
    3458:	83 e6       	ldi	r24, 0x63	; 99
    345a:	56 c0       	rjmp	.+172    	; 0x3508 <get_MOTOR+0x1b8>
    345c:	90 91 42 2b 	lds	r25, 0x2B42	; 0x802b42 <ser_recv1+0xff>
    3460:	80 91 41 2b 	lds	r24, 0x2B41	; 0x802b41 <ser_recv1+0xfe>
    3464:	98 17       	cp	r25, r24
    3466:	b0 f2       	brcs	.-84     	; 0x3414 <get_MOTOR+0xc4>
    3468:	f5 01       	movw	r30, r10
    346a:	ed 5b       	subi	r30, 0xBD	; 189
    346c:	f5 4d       	sbci	r31, 0xD5	; 213
    346e:	a0 80       	ld	r10, Z
    3470:	b1 2c       	mov	r11, r1
    3472:	ba 2c       	mov	r11, r10
    3474:	aa 24       	eor	r10, r10
    3476:	f3 01       	movw	r30, r6
    3478:	ed 5b       	subi	r30, 0xBD	; 189
    347a:	f5 4d       	sbci	r31, 0xD5	; 213
    347c:	80 81       	ld	r24, Z
    347e:	a8 2a       	or	r10, r24
    3480:	22 e0       	ldi	r18, 0x02	; 2
    3482:	0b c0       	rjmp	.+22     	; 0x349a <get_MOTOR+0x14a>
    3484:	82 2f       	mov	r24, r18
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	fc 01       	movw	r30, r24
    348a:	ef 5b       	subi	r30, 0xBF	; 191
    348c:	f5 4d       	sbci	r31, 0xD5	; 213
    348e:	30 81       	ld	r19, Z
    3490:	f8 01       	movw	r30, r16
    3492:	e8 0f       	add	r30, r24
    3494:	f9 1f       	adc	r31, r25
    3496:	30 83       	st	Z, r19
    3498:	2f 5f       	subi	r18, 0xFF	; 255
    349a:	25 15       	cp	r18, r5
    349c:	98 f3       	brcs	.-26     	; 0x3484 <get_MOTOR+0x134>
    349e:	65 2d       	mov	r22, r5
    34a0:	70 e0       	ldi	r23, 0x00	; 0
    34a2:	c6 01       	movw	r24, r12
    34a4:	0e 94 a4 18 	call	0x3148	; 0x3148 <crc16>
    34a8:	a8 16       	cp	r10, r24
    34aa:	b9 06       	cpc	r11, r25
    34ac:	49 f1       	breq	.+82     	; 0x3500 <get_MOTOR+0x1b0>
    34ae:	81 ec       	ldi	r24, 0xC1	; 193
    34b0:	83 0d       	add	r24, r3
    34b2:	1f 92       	push	r1
    34b4:	8f 93       	push	r24
    34b6:	ce 01       	movw	r24, r28
    34b8:	8f 58       	subi	r24, 0x8F	; 143
    34ba:	9f 4f       	sbci	r25, 0xFF	; 255
    34bc:	9f 93       	push	r25
    34be:	8f 93       	push	r24
    34c0:	8e 01       	movw	r16, r28
    34c2:	0f 5f       	subi	r16, 0xFF	; 255
    34c4:	1f 4f       	sbci	r17, 0xFF	; 255
    34c6:	1f 93       	push	r17
    34c8:	0f 93       	push	r16
    34ca:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
    34ce:	b8 01       	movw	r22, r16
    34d0:	81 e3       	ldi	r24, 0x31	; 49
    34d2:	91 e0       	ldi	r25, 0x01	; 1
    34d4:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
    34d8:	0f 90       	pop	r0
    34da:	0f 90       	pop	r0
    34dc:	0f 90       	pop	r0
    34de:	0f 90       	pop	r0
    34e0:	0f 90       	pop	r0
    34e2:	0f 90       	pop	r0
    34e4:	83 e6       	ldi	r24, 0x63	; 99
    34e6:	10 c0       	rjmp	.+32     	; 0x3508 <get_MOTOR+0x1b8>
    34e8:	82 2f       	mov	r24, r18
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	f7 01       	movw	r30, r14
    34ee:	e8 0f       	add	r30, r24
    34f0:	f9 1f       	adc	r31, r25
    34f2:	dc 01       	movw	r26, r24
    34f4:	ad 5b       	subi	r26, 0xBD	; 189
    34f6:	b5 4d       	sbci	r27, 0xD5	; 213
    34f8:	8c 91       	ld	r24, X
    34fa:	80 83       	st	Z, r24
    34fc:	2f 5f       	subi	r18, 0xFF	; 255
    34fe:	01 c0       	rjmp	.+2      	; 0x3502 <get_MOTOR+0x1b2>
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	24 15       	cp	r18, r4
    3504:	88 f3       	brcs	.-30     	; 0x34e8 <get_MOTOR+0x198>
    3506:	80 e0       	ldi	r24, 0x00	; 0
    3508:	8d be       	out	0x3d, r8	; 61
    350a:	9e be       	out	0x3e, r9	; 62
    350c:	c2 57       	subi	r28, 0x72	; 114
    350e:	df 4f       	sbci	r29, 0xFF	; 255
    3510:	cd bf       	out	0x3d, r28	; 61
    3512:	de bf       	out	0x3e, r29	; 62
    3514:	df 91       	pop	r29
    3516:	cf 91       	pop	r28
    3518:	1f 91       	pop	r17
    351a:	0f 91       	pop	r16
    351c:	ff 90       	pop	r15
    351e:	ef 90       	pop	r14
    3520:	df 90       	pop	r13
    3522:	cf 90       	pop	r12
    3524:	bf 90       	pop	r11
    3526:	af 90       	pop	r10
    3528:	9f 90       	pop	r9
    352a:	8f 90       	pop	r8
    352c:	7f 90       	pop	r7
    352e:	6f 90       	pop	r6
    3530:	5f 90       	pop	r5
    3532:	4f 90       	pop	r4
    3534:	3f 90       	pop	r3
    3536:	08 95       	ret

00003538 <get_MOTOR_CURRENT>:
    3538:	cf 92       	push	r12
    353a:	df 92       	push	r13
    353c:	ef 92       	push	r14
    353e:	ff 92       	push	r15
    3540:	0f 93       	push	r16
    3542:	1f 93       	push	r17
    3544:	cf 93       	push	r28
    3546:	df 93       	push	r29
    3548:	cd b7       	in	r28, 0x3d	; 61
    354a:	de b7       	in	r29, 0x3e	; 62
    354c:	cd 57       	subi	r28, 0x7D	; 125
    354e:	d1 09       	sbc	r29, r1
    3550:	cd bf       	out	0x3d, r28	; 61
    3552:	de bf       	out	0x3e, r29	; 62
    3554:	e8 2e       	mov	r14, r24
    3556:	8b 01       	movw	r16, r22
    3558:	89 e2       	ldi	r24, 0x29	; 41
    355a:	e9 e1       	ldi	r30, 0x19	; 25
    355c:	f7 eb       	ldi	r31, 0xB7	; 183
    355e:	de 01       	movw	r26, r28
    3560:	11 96       	adiw	r26, 0x01	; 1
    3562:	01 90       	ld	r0, Z+
    3564:	0d 92       	st	X+, r0
    3566:	8a 95       	dec	r24
    3568:	e1 f7       	brne	.-8      	; 0x3562 <get_MOTOR_CURRENT+0x2a>
    356a:	24 e0       	ldi	r18, 0x04	; 4
    356c:	ae 01       	movw	r20, r28
    356e:	46 58       	subi	r20, 0x86	; 134
    3570:	5f 4f       	sbci	r21, 0xFF	; 255
    3572:	61 e3       	ldi	r22, 0x31	; 49
    3574:	8e 2d       	mov	r24, r14
    3576:	0e 94 a8 19 	call	0x3350	; 0x3350 <get_MOTOR>
    357a:	f8 2e       	mov	r15, r24
    357c:	83 e6       	ldi	r24, 0x63	; 99
    357e:	f8 12       	cpse	r15, r24
    3580:	21 c0       	rjmp	.+66     	; 0x35c4 <get_MOTOR_CURRENT+0x8c>
    3582:	81 ec       	ldi	r24, 0xC1	; 193
    3584:	8e 0d       	add	r24, r14
    3586:	1f 92       	push	r1
    3588:	8f 93       	push	r24
    358a:	ce 01       	movw	r24, r28
    358c:	01 96       	adiw	r24, 0x01	; 1
    358e:	9f 93       	push	r25
    3590:	8f 93       	push	r24
    3592:	6e 01       	movw	r12, r28
    3594:	ea e2       	ldi	r30, 0x2A	; 42
    3596:	ce 0e       	add	r12, r30
    3598:	d1 1c       	adc	r13, r1
    359a:	df 92       	push	r13
    359c:	cf 92       	push	r12
    359e:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
    35a2:	b6 01       	movw	r22, r12
    35a4:	86 e3       	ldi	r24, 0x36	; 54
    35a6:	91 e0       	ldi	r25, 0x01	; 1
    35a8:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
    35ac:	8f ef       	ldi	r24, 0xFF	; 255
    35ae:	9f ef       	ldi	r25, 0xFF	; 255
    35b0:	f8 01       	movw	r30, r16
    35b2:	80 83       	st	Z, r24
    35b4:	91 83       	std	Z+1, r25	; 0x01
    35b6:	0f 90       	pop	r0
    35b8:	0f 90       	pop	r0
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0
    35be:	0f 90       	pop	r0
    35c0:	0f 90       	pop	r0
    35c2:	19 c0       	rjmp	.+50     	; 0x35f6 <get_MOTOR_CURRENT+0xbe>
    35c4:	eb 96       	adiw	r28, 0x3b	; 59
    35c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    35c8:	eb 97       	sbiw	r28, 0x3b	; 59
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	98 2f       	mov	r25, r24
    35ce:	88 27       	eor	r24, r24
    35d0:	ec 96       	adiw	r28, 0x3c	; 60
    35d2:	2f ad       	ldd	r18, Y+63	; 0x3f
    35d4:	ec 97       	sbiw	r28, 0x3c	; 60
    35d6:	82 2b       	or	r24, r18
    35d8:	9c 01       	movw	r18, r24
    35da:	22 0f       	add	r18, r18
    35dc:	33 1f       	adc	r19, r19
    35de:	88 0f       	add	r24, r24
    35e0:	99 1f       	adc	r25, r25
    35e2:	88 0f       	add	r24, r24
    35e4:	99 1f       	adc	r25, r25
    35e6:	88 0f       	add	r24, r24
    35e8:	99 1f       	adc	r25, r25
    35ea:	82 0f       	add	r24, r18
    35ec:	93 1f       	adc	r25, r19
    35ee:	f8 01       	movw	r30, r16
    35f0:	80 83       	st	Z, r24
    35f2:	91 83       	std	Z+1, r25	; 0x01
    35f4:	f1 2c       	mov	r15, r1
    35f6:	8f 2d       	mov	r24, r15
    35f8:	c3 58       	subi	r28, 0x83	; 131
    35fa:	df 4f       	sbci	r29, 0xFF	; 255
    35fc:	cd bf       	out	0x3d, r28	; 61
    35fe:	de bf       	out	0x3e, r29	; 62
    3600:	df 91       	pop	r29
    3602:	cf 91       	pop	r28
    3604:	1f 91       	pop	r17
    3606:	0f 91       	pop	r16
    3608:	ff 90       	pop	r15
    360a:	ef 90       	pop	r14
    360c:	df 90       	pop	r13
    360e:	cf 90       	pop	r12
    3610:	08 95       	ret

00003612 <get_MOTOR_ENCODER>:
    3612:	ef 92       	push	r14
    3614:	ff 92       	push	r15
    3616:	0f 93       	push	r16
    3618:	1f 93       	push	r17
    361a:	cf 93       	push	r28
    361c:	df 93       	push	r29
    361e:	cd b7       	in	r28, 0x3d	; 61
    3620:	de b7       	in	r29, 0x3e	; 62
    3622:	ce 57       	subi	r28, 0x7E	; 126
    3624:	d1 09       	sbc	r29, r1
    3626:	cd bf       	out	0x3d, r28	; 61
    3628:	de bf       	out	0x3e, r29	; 62
    362a:	e8 2e       	mov	r14, r24
    362c:	8b 01       	movw	r16, r22
    362e:	89 e2       	ldi	r24, 0x29	; 41
    3630:	e2 e4       	ldi	r30, 0x42	; 66
    3632:	f7 eb       	ldi	r31, 0xB7	; 183
    3634:	de 01       	movw	r26, r28
    3636:	aa 5a       	subi	r26, 0xAA	; 170
    3638:	bf 4f       	sbci	r27, 0xFF	; 255
    363a:	01 90       	ld	r0, Z+
    363c:	0d 92       	st	X+, r0
    363e:	8a 95       	dec	r24
    3640:	e1 f7       	brne	.-8      	; 0x363a <get_MOTOR_ENCODER+0x28>
    3642:	25 e0       	ldi	r18, 0x05	; 5
    3644:	ae 01       	movw	r20, r28
    3646:	4f 5a       	subi	r20, 0xAF	; 175
    3648:	5f 4f       	sbci	r21, 0xFF	; 255
    364a:	60 e1       	ldi	r22, 0x10	; 16
    364c:	8e 2d       	mov	r24, r14
    364e:	0e 94 a8 19 	call	0x3350	; 0x3350 <get_MOTOR>
    3652:	f8 2e       	mov	r15, r24
    3654:	83 e6       	ldi	r24, 0x63	; 99
    3656:	f8 12       	cpse	r15, r24
    3658:	1c c0       	rjmp	.+56     	; 0x3692 <get_MOTOR_ENCODER+0x80>
    365a:	81 ec       	ldi	r24, 0xC1	; 193
    365c:	8e 0d       	add	r24, r14
    365e:	1f 92       	push	r1
    3660:	8f 93       	push	r24
    3662:	ce 01       	movw	r24, r28
    3664:	8a 5a       	subi	r24, 0xAA	; 170
    3666:	9f 4f       	sbci	r25, 0xFF	; 255
    3668:	9f 93       	push	r25
    366a:	8f 93       	push	r24
    366c:	8e 01       	movw	r16, r28
    366e:	0f 5f       	subi	r16, 0xFF	; 255
    3670:	1f 4f       	sbci	r17, 0xFF	; 255
    3672:	1f 93       	push	r17
    3674:	0f 93       	push	r16
    3676:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
    367a:	b8 01       	movw	r22, r16
    367c:	86 e3       	ldi	r24, 0x36	; 54
    367e:	91 e0       	ldi	r25, 0x01	; 1
    3680:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
    3684:	0f 90       	pop	r0
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	0f 90       	pop	r0
    368c:	0f 90       	pop	r0
    368e:	0f 90       	pop	r0
    3690:	30 c0       	rjmp	.+96     	; 0x36f2 <get_MOTOR_ENCODER+0xe0>
    3692:	62 96       	adiw	r28, 0x12	; 18
    3694:	8f ad       	ldd	r24, Y+63	; 0x3f
    3696:	62 97       	sbiw	r28, 0x12	; 18
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	a0 e0       	ldi	r26, 0x00	; 0
    369c:	b0 e0       	ldi	r27, 0x00	; 0
    369e:	78 2f       	mov	r23, r24
    36a0:	66 27       	eor	r22, r22
    36a2:	55 27       	eor	r21, r21
    36a4:	44 27       	eor	r20, r20
    36a6:	63 96       	adiw	r28, 0x13	; 19
    36a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    36aa:	63 97       	sbiw	r28, 0x13	; 19
    36ac:	89 2f       	mov	r24, r25
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	a0 e0       	ldi	r26, 0x00	; 0
    36b2:	b0 e0       	ldi	r27, 0x00	; 0
    36b4:	dc 01       	movw	r26, r24
    36b6:	99 27       	eor	r25, r25
    36b8:	88 27       	eor	r24, r24
    36ba:	84 2b       	or	r24, r20
    36bc:	95 2b       	or	r25, r21
    36be:	a6 2b       	or	r26, r22
    36c0:	b7 2b       	or	r27, r23
    36c2:	64 96       	adiw	r28, 0x14	; 20
    36c4:	4f ad       	ldd	r20, Y+63	; 0x3f
    36c6:	64 97       	sbiw	r28, 0x14	; 20
    36c8:	50 e0       	ldi	r21, 0x00	; 0
    36ca:	60 e0       	ldi	r22, 0x00	; 0
    36cc:	70 e0       	ldi	r23, 0x00	; 0
    36ce:	76 2f       	mov	r23, r22
    36d0:	65 2f       	mov	r22, r21
    36d2:	54 2f       	mov	r21, r20
    36d4:	44 27       	eor	r20, r20
    36d6:	84 2b       	or	r24, r20
    36d8:	95 2b       	or	r25, r21
    36da:	a6 2b       	or	r26, r22
    36dc:	b7 2b       	or	r27, r23
    36de:	65 96       	adiw	r28, 0x15	; 21
    36e0:	2f ad       	ldd	r18, Y+63	; 0x3f
    36e2:	65 97       	sbiw	r28, 0x15	; 21
    36e4:	82 2b       	or	r24, r18
    36e6:	f8 01       	movw	r30, r16
    36e8:	80 83       	st	Z, r24
    36ea:	91 83       	std	Z+1, r25	; 0x01
    36ec:	a2 83       	std	Z+2, r26	; 0x02
    36ee:	b3 83       	std	Z+3, r27	; 0x03
    36f0:	f1 2c       	mov	r15, r1
    36f2:	8f 2d       	mov	r24, r15
    36f4:	c2 58       	subi	r28, 0x82	; 130
    36f6:	df 4f       	sbci	r29, 0xFF	; 255
    36f8:	cd bf       	out	0x3d, r28	; 61
    36fa:	de bf       	out	0x3e, r29	; 62
    36fc:	df 91       	pop	r29
    36fe:	cf 91       	pop	r28
    3700:	1f 91       	pop	r17
    3702:	0f 91       	pop	r16
    3704:	ff 90       	pop	r15
    3706:	ef 90       	pop	r14
    3708:	08 95       	ret

0000370a <get_MOTOR_FLOAT>:
    370a:	cf 92       	push	r12
    370c:	df 92       	push	r13
    370e:	ef 92       	push	r14
    3710:	ff 92       	push	r15
    3712:	0f 93       	push	r16
    3714:	1f 93       	push	r17
    3716:	cf 93       	push	r28
    3718:	df 93       	push	r29
    371a:	cd b7       	in	r28, 0x3d	; 61
    371c:	de b7       	in	r29, 0x3e	; 62
    371e:	c9 57       	subi	r28, 0x79	; 121
    3720:	d1 09       	sbc	r29, r1
    3722:	cd bf       	out	0x3d, r28	; 61
    3724:	de bf       	out	0x3e, r29	; 62
    3726:	e8 2e       	mov	r14, r24
    3728:	8a 01       	movw	r16, r20
    372a:	87 e2       	ldi	r24, 0x27	; 39
    372c:	eb e6       	ldi	r30, 0x6B	; 107
    372e:	f7 eb       	ldi	r31, 0xB7	; 183
    3730:	de 01       	movw	r26, r28
    3732:	ad 5a       	subi	r26, 0xAD	; 173
    3734:	bf 4f       	sbci	r27, 0xFF	; 255
    3736:	01 90       	ld	r0, Z+
    3738:	0d 92       	st	X+, r0
    373a:	8a 95       	dec	r24
    373c:	e1 f7       	brne	.-8      	; 0x3736 <get_MOTOR_FLOAT+0x2c>
    373e:	22 e0       	ldi	r18, 0x02	; 2
    3740:	ae 01       	movw	r20, r28
    3742:	4f 5a       	subi	r20, 0xAF	; 175
    3744:	5f 4f       	sbci	r21, 0xFF	; 255
    3746:	8e 2d       	mov	r24, r14
    3748:	0e 94 a8 19 	call	0x3350	; 0x3350 <get_MOTOR>
    374c:	f8 2e       	mov	r15, r24
    374e:	83 e6       	ldi	r24, 0x63	; 99
    3750:	f8 12       	cpse	r15, r24
    3752:	25 c0       	rjmp	.+74     	; 0x379e <get_MOTOR_FLOAT+0x94>
    3754:	81 ec       	ldi	r24, 0xC1	; 193
    3756:	8e 0d       	add	r24, r14
    3758:	1f 92       	push	r1
    375a:	8f 93       	push	r24
    375c:	ce 01       	movw	r24, r28
    375e:	8d 5a       	subi	r24, 0xAD	; 173
    3760:	9f 4f       	sbci	r25, 0xFF	; 255
    3762:	9f 93       	push	r25
    3764:	8f 93       	push	r24
    3766:	fe 01       	movw	r30, r28
    3768:	31 96       	adiw	r30, 0x01	; 1
    376a:	6f 01       	movw	r12, r30
    376c:	ff 93       	push	r31
    376e:	ef 93       	push	r30
    3770:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
    3774:	b6 01       	movw	r22, r12
    3776:	86 e3       	ldi	r24, 0x36	; 54
    3778:	91 e0       	ldi	r25, 0x01	; 1
    377a:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
    377e:	80 e0       	ldi	r24, 0x00	; 0
    3780:	90 e8       	ldi	r25, 0x80	; 128
    3782:	a6 e2       	ldi	r26, 0x26	; 38
    3784:	b4 ec       	ldi	r27, 0xC4	; 196
    3786:	f8 01       	movw	r30, r16
    3788:	80 83       	st	Z, r24
    378a:	91 83       	std	Z+1, r25	; 0x01
    378c:	a2 83       	std	Z+2, r26	; 0x02
    378e:	b3 83       	std	Z+3, r27	; 0x03
    3790:	0f 90       	pop	r0
    3792:	0f 90       	pop	r0
    3794:	0f 90       	pop	r0
    3796:	0f 90       	pop	r0
    3798:	0f 90       	pop	r0
    379a:	0f 90       	pop	r0
    379c:	1c c0       	rjmp	.+56     	; 0x37d6 <get_MOTOR_FLOAT+0xcc>
    379e:	62 96       	adiw	r28, 0x12	; 18
    37a0:	6f ad       	ldd	r22, Y+63	; 0x3f
    37a2:	62 97       	sbiw	r28, 0x12	; 18
    37a4:	70 e0       	ldi	r23, 0x00	; 0
    37a6:	76 2f       	mov	r23, r22
    37a8:	66 27       	eor	r22, r22
    37aa:	63 96       	adiw	r28, 0x13	; 19
    37ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    37ae:	63 97       	sbiw	r28, 0x13	; 19
    37b0:	68 2b       	or	r22, r24
    37b2:	07 2e       	mov	r0, r23
    37b4:	00 0c       	add	r0, r0
    37b6:	88 0b       	sbc	r24, r24
    37b8:	99 0b       	sbc	r25, r25
    37ba:	0e 94 9b 30 	call	0x6136	; 0x6136 <__floatsisf>
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	40 e2       	ldi	r20, 0x20	; 32
    37c4:	51 e4       	ldi	r21, 0x41	; 65
    37c6:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <__divsf3>
    37ca:	f8 01       	movw	r30, r16
    37cc:	60 83       	st	Z, r22
    37ce:	71 83       	std	Z+1, r23	; 0x01
    37d0:	82 83       	std	Z+2, r24	; 0x02
    37d2:	93 83       	std	Z+3, r25	; 0x03
    37d4:	f1 2c       	mov	r15, r1
    37d6:	8f 2d       	mov	r24, r15
    37d8:	c7 58       	subi	r28, 0x87	; 135
    37da:	df 4f       	sbci	r29, 0xFF	; 255
    37dc:	cd bf       	out	0x3d, r28	; 61
    37de:	de bf       	out	0x3e, r29	; 62
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	1f 91       	pop	r17
    37e6:	0f 91       	pop	r16
    37e8:	ff 90       	pop	r15
    37ea:	ef 90       	pop	r14
    37ec:	df 90       	pop	r13
    37ee:	cf 90       	pop	r12
    37f0:	08 95       	ret

000037f2 <get_MOTOR_MAXCURRENT>:
    37f2:	cf 92       	push	r12
    37f4:	df 92       	push	r13
    37f6:	ef 92       	push	r14
    37f8:	ff 92       	push	r15
    37fa:	0f 93       	push	r16
    37fc:	1f 93       	push	r17
    37fe:	cf 93       	push	r28
    3800:	df 93       	push	r29
    3802:	cd b7       	in	r28, 0x3d	; 61
    3804:	de b7       	in	r29, 0x3e	; 62
    3806:	c4 58       	subi	r28, 0x84	; 132
    3808:	d1 09       	sbc	r29, r1
    380a:	cd bf       	out	0x3d, r28	; 61
    380c:	de bf       	out	0x3e, r29	; 62
    380e:	e8 2e       	mov	r14, r24
    3810:	8b 01       	movw	r16, r22
    3812:	8c e2       	ldi	r24, 0x2C	; 44
    3814:	e2 e9       	ldi	r30, 0x92	; 146
    3816:	f7 eb       	ldi	r31, 0xB7	; 183
    3818:	de 01       	movw	r26, r28
    381a:	11 96       	adiw	r26, 0x01	; 1
    381c:	01 90       	ld	r0, Z+
    381e:	0d 92       	st	X+, r0
    3820:	8a 95       	dec	r24
    3822:	e1 f7       	brne	.-8      	; 0x381c <get_MOTOR_MAXCURRENT+0x2a>
    3824:	28 e0       	ldi	r18, 0x08	; 8
    3826:	ae 01       	movw	r20, r28
    3828:	43 58       	subi	r20, 0x83	; 131
    382a:	5f 4f       	sbci	r21, 0xFF	; 255
    382c:	67 e8       	ldi	r22, 0x87	; 135
    382e:	8e 2d       	mov	r24, r14
    3830:	0e 94 a8 19 	call	0x3350	; 0x3350 <get_MOTOR>
    3834:	f8 2e       	mov	r15, r24
    3836:	83 e6       	ldi	r24, 0x63	; 99
    3838:	f8 12       	cpse	r15, r24
    383a:	1b c0       	rjmp	.+54     	; 0x3872 <get_MOTOR_MAXCURRENT+0x80>
    383c:	81 ec       	ldi	r24, 0xC1	; 193
    383e:	8e 0d       	add	r24, r14
    3840:	1f 92       	push	r1
    3842:	8f 93       	push	r24
    3844:	ce 01       	movw	r24, r28
    3846:	01 96       	adiw	r24, 0x01	; 1
    3848:	9f 93       	push	r25
    384a:	8f 93       	push	r24
    384c:	8e 01       	movw	r16, r28
    384e:	03 5d       	subi	r16, 0xD3	; 211
    3850:	1f 4f       	sbci	r17, 0xFF	; 255
    3852:	1f 93       	push	r17
    3854:	0f 93       	push	r16
    3856:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
    385a:	b8 01       	movw	r22, r16
    385c:	86 e3       	ldi	r24, 0x36	; 54
    385e:	91 e0       	ldi	r25, 0x01	; 1
    3860:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
    3864:	0f 90       	pop	r0
    3866:	0f 90       	pop	r0
    3868:	0f 90       	pop	r0
    386a:	0f 90       	pop	r0
    386c:	0f 90       	pop	r0
    386e:	0f 90       	pop	r0
    3870:	45 c0       	rjmp	.+138    	; 0x38fc <get_MOTOR_MAXCURRENT+0x10a>
    3872:	ee 96       	adiw	r28, 0x3e	; 62
    3874:	8f ad       	ldd	r24, Y+63	; 0x3f
    3876:	ee 97       	sbiw	r28, 0x3e	; 62
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	a0 e0       	ldi	r26, 0x00	; 0
    387c:	b0 e0       	ldi	r27, 0x00	; 0
    387e:	f8 2e       	mov	r15, r24
    3880:	ee 24       	eor	r14, r14
    3882:	dd 24       	eor	r13, r13
    3884:	cc 24       	eor	r12, r12
    3886:	ef 96       	adiw	r28, 0x3f	; 63
    3888:	4f ad       	ldd	r20, Y+63	; 0x3f
    388a:	ef 97       	sbiw	r28, 0x3f	; 63
    388c:	50 e0       	ldi	r21, 0x00	; 0
    388e:	60 e0       	ldi	r22, 0x00	; 0
    3890:	70 e0       	ldi	r23, 0x00	; 0
    3892:	da 01       	movw	r26, r20
    3894:	99 27       	eor	r25, r25
    3896:	88 27       	eor	r24, r24
    3898:	8c 29       	or	r24, r12
    389a:	9d 29       	or	r25, r13
    389c:	ae 29       	or	r26, r14
    389e:	bf 29       	or	r27, r15
    38a0:	c1 58       	subi	r28, 0x81	; 129
    38a2:	df 4f       	sbci	r29, 0xFF	; 255
    38a4:	48 81       	ld	r20, Y
    38a6:	cf 57       	subi	r28, 0x7F	; 127
    38a8:	d0 40       	sbci	r29, 0x00	; 0
    38aa:	50 e0       	ldi	r21, 0x00	; 0
    38ac:	60 e0       	ldi	r22, 0x00	; 0
    38ae:	70 e0       	ldi	r23, 0x00	; 0
    38b0:	76 2f       	mov	r23, r22
    38b2:	65 2f       	mov	r22, r21
    38b4:	54 2f       	mov	r21, r20
    38b6:	44 27       	eor	r20, r20
    38b8:	84 2b       	or	r24, r20
    38ba:	95 2b       	or	r25, r21
    38bc:	a6 2b       	or	r26, r22
    38be:	b7 2b       	or	r27, r23
    38c0:	c0 58       	subi	r28, 0x80	; 128
    38c2:	df 4f       	sbci	r29, 0xFF	; 255
    38c4:	28 81       	ld	r18, Y
    38c6:	c0 58       	subi	r28, 0x80	; 128
    38c8:	d0 40       	sbci	r29, 0x00	; 0
    38ca:	82 2b       	or	r24, r18
    38cc:	88 0f       	add	r24, r24
    38ce:	99 1f       	adc	r25, r25
    38d0:	aa 1f       	adc	r26, r26
    38d2:	bb 1f       	adc	r27, r27
    38d4:	ac 01       	movw	r20, r24
    38d6:	bd 01       	movw	r22, r26
    38d8:	44 0f       	add	r20, r20
    38da:	55 1f       	adc	r21, r21
    38dc:	66 1f       	adc	r22, r22
    38de:	77 1f       	adc	r23, r23
    38e0:	44 0f       	add	r20, r20
    38e2:	55 1f       	adc	r21, r21
    38e4:	66 1f       	adc	r22, r22
    38e6:	77 1f       	adc	r23, r23
    38e8:	84 0f       	add	r24, r20
    38ea:	95 1f       	adc	r25, r21
    38ec:	a6 1f       	adc	r26, r22
    38ee:	b7 1f       	adc	r27, r23
    38f0:	f8 01       	movw	r30, r16
    38f2:	80 83       	st	Z, r24
    38f4:	91 83       	std	Z+1, r25	; 0x01
    38f6:	a2 83       	std	Z+2, r26	; 0x02
    38f8:	b3 83       	std	Z+3, r27	; 0x03
    38fa:	f1 2c       	mov	r15, r1
    38fc:	8f 2d       	mov	r24, r15
    38fe:	cc 57       	subi	r28, 0x7C	; 124
    3900:	df 4f       	sbci	r29, 0xFF	; 255
    3902:	cd bf       	out	0x3d, r28	; 61
    3904:	de bf       	out	0x3e, r29	; 62
    3906:	df 91       	pop	r29
    3908:	cf 91       	pop	r28
    390a:	1f 91       	pop	r17
    390c:	0f 91       	pop	r16
    390e:	ff 90       	pop	r15
    3910:	ef 90       	pop	r14
    3912:	df 90       	pop	r13
    3914:	cf 90       	pop	r12
    3916:	08 95       	ret

00003918 <get_MOTOR_PID>:
    3918:	ef 92       	push	r14
    391a:	ff 92       	push	r15
    391c:	0f 93       	push	r16
    391e:	1f 93       	push	r17
    3920:	cf 93       	push	r28
    3922:	df 93       	push	r29
    3924:	cd b7       	in	r28, 0x3d	; 61
    3926:	de b7       	in	r29, 0x3e	; 62
    3928:	c1 59       	subi	r28, 0x91	; 145
    392a:	d1 09       	sbc	r29, r1
    392c:	cd bf       	out	0x3d, r28	; 61
    392e:	de bf       	out	0x3e, r29	; 62
    3930:	f8 2e       	mov	r15, r24
    3932:	8b 01       	movw	r16, r22
    3934:	85 e2       	ldi	r24, 0x25	; 37
    3936:	ee eb       	ldi	r30, 0xBE	; 190
    3938:	f7 eb       	ldi	r31, 0xB7	; 183
    393a:	de 01       	movw	r26, r28
    393c:	11 96       	adiw	r26, 0x01	; 1
    393e:	01 90       	ld	r0, Z+
    3940:	0d 92       	st	X+, r0
    3942:	8a 95       	dec	r24
    3944:	e1 f7       	brne	.-8      	; 0x393e <get_MOTOR_PID+0x26>
    3946:	2c e1       	ldi	r18, 0x1C	; 28
    3948:	ae 01       	movw	r20, r28
    394a:	4a 58       	subi	r20, 0x8A	; 138
    394c:	5f 4f       	sbci	r21, 0xFF	; 255
    394e:	6f e3       	ldi	r22, 0x3F	; 63
    3950:	8f 2d       	mov	r24, r15
    3952:	0e 94 a8 19 	call	0x3350	; 0x3350 <get_MOTOR>
    3956:	e8 2e       	mov	r14, r24
    3958:	83 e6       	ldi	r24, 0x63	; 99
    395a:	e8 12       	cpse	r14, r24
    395c:	1b c0       	rjmp	.+54     	; 0x3994 <get_MOTOR_PID+0x7c>
    395e:	81 ec       	ldi	r24, 0xC1	; 193
    3960:	8f 0d       	add	r24, r15
    3962:	1f 92       	push	r1
    3964:	8f 93       	push	r24
    3966:	ce 01       	movw	r24, r28
    3968:	01 96       	adiw	r24, 0x01	; 1
    396a:	9f 93       	push	r25
    396c:	8f 93       	push	r24
    396e:	8e 01       	movw	r16, r28
    3970:	0a 5d       	subi	r16, 0xDA	; 218
    3972:	1f 4f       	sbci	r17, 0xFF	; 255
    3974:	1f 93       	push	r17
    3976:	0f 93       	push	r16
    3978:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
    397c:	b8 01       	movw	r22, r16
    397e:	86 e3       	ldi	r24, 0x36	; 54
    3980:	91 e0       	ldi	r25, 0x01	; 1
    3982:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
    3986:	0f 90       	pop	r0
    3988:	0f 90       	pop	r0
    398a:	0f 90       	pop	r0
    398c:	0f 90       	pop	r0
    398e:	0f 90       	pop	r0
    3990:	0f 90       	pop	r0
    3992:	e5 c1       	rjmp	.+970    	; 0x3d5e <get_MOTOR_PID+0x446>
    3994:	e7 96       	adiw	r28, 0x37	; 55
    3996:	4f ad       	ldd	r20, Y+63	; 0x3f
    3998:	e7 97       	sbiw	r28, 0x37	; 55
    399a:	50 e0       	ldi	r21, 0x00	; 0
    399c:	60 e0       	ldi	r22, 0x00	; 0
    399e:	70 e0       	ldi	r23, 0x00	; 0
    39a0:	74 2f       	mov	r23, r20
    39a2:	66 27       	eor	r22, r22
    39a4:	55 27       	eor	r21, r21
    39a6:	44 27       	eor	r20, r20
    39a8:	e8 96       	adiw	r28, 0x38	; 56
    39aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    39ac:	e8 97       	sbiw	r28, 0x38	; 56
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	a0 e0       	ldi	r26, 0x00	; 0
    39b2:	b0 e0       	ldi	r27, 0x00	; 0
    39b4:	dc 01       	movw	r26, r24
    39b6:	99 27       	eor	r25, r25
    39b8:	88 27       	eor	r24, r24
    39ba:	48 2b       	or	r20, r24
    39bc:	59 2b       	or	r21, r25
    39be:	6a 2b       	or	r22, r26
    39c0:	7b 2b       	or	r23, r27
    39c2:	e9 96       	adiw	r28, 0x39	; 57
    39c4:	8f ad       	ldd	r24, Y+63	; 0x3f
    39c6:	e9 97       	sbiw	r28, 0x39	; 57
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	a0 e0       	ldi	r26, 0x00	; 0
    39cc:	b0 e0       	ldi	r27, 0x00	; 0
    39ce:	ba 2f       	mov	r27, r26
    39d0:	a9 2f       	mov	r26, r25
    39d2:	98 2f       	mov	r25, r24
    39d4:	88 27       	eor	r24, r24
    39d6:	84 2b       	or	r24, r20
    39d8:	95 2b       	or	r25, r21
    39da:	a6 2b       	or	r26, r22
    39dc:	b7 2b       	or	r27, r23
    39de:	ea 96       	adiw	r28, 0x3a	; 58
    39e0:	2f ad       	ldd	r18, Y+63	; 0x3f
    39e2:	ea 97       	sbiw	r28, 0x3a	; 58
    39e4:	bc 01       	movw	r22, r24
    39e6:	cd 01       	movw	r24, r26
    39e8:	62 2b       	or	r22, r18
    39ea:	0e 94 9b 30 	call	0x6136	; 0x6136 <__floatsisf>
    39ee:	20 e0       	ldi	r18, 0x00	; 0
    39f0:	30 e0       	ldi	r19, 0x00	; 0
    39f2:	40 e8       	ldi	r20, 0x80	; 128
    39f4:	5a e3       	ldi	r21, 0x3A	; 58
    39f6:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
    39fa:	f8 01       	movw	r30, r16
    39fc:	60 83       	st	Z, r22
    39fe:	71 83       	std	Z+1, r23	; 0x01
    3a00:	82 83       	std	Z+2, r24	; 0x02
    3a02:	93 83       	std	Z+3, r25	; 0x03
    3a04:	eb 96       	adiw	r28, 0x3b	; 59
    3a06:	4f ad       	ldd	r20, Y+63	; 0x3f
    3a08:	eb 97       	sbiw	r28, 0x3b	; 59
    3a0a:	50 e0       	ldi	r21, 0x00	; 0
    3a0c:	60 e0       	ldi	r22, 0x00	; 0
    3a0e:	70 e0       	ldi	r23, 0x00	; 0
    3a10:	74 2f       	mov	r23, r20
    3a12:	66 27       	eor	r22, r22
    3a14:	55 27       	eor	r21, r21
    3a16:	44 27       	eor	r20, r20
    3a18:	ec 96       	adiw	r28, 0x3c	; 60
    3a1a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a1c:	ec 97       	sbiw	r28, 0x3c	; 60
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	a0 e0       	ldi	r26, 0x00	; 0
    3a22:	b0 e0       	ldi	r27, 0x00	; 0
    3a24:	dc 01       	movw	r26, r24
    3a26:	99 27       	eor	r25, r25
    3a28:	88 27       	eor	r24, r24
    3a2a:	48 2b       	or	r20, r24
    3a2c:	59 2b       	or	r21, r25
    3a2e:	6a 2b       	or	r22, r26
    3a30:	7b 2b       	or	r23, r27
    3a32:	ed 96       	adiw	r28, 0x3d	; 61
    3a34:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a36:	ed 97       	sbiw	r28, 0x3d	; 61
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	a0 e0       	ldi	r26, 0x00	; 0
    3a3c:	b0 e0       	ldi	r27, 0x00	; 0
    3a3e:	ba 2f       	mov	r27, r26
    3a40:	a9 2f       	mov	r26, r25
    3a42:	98 2f       	mov	r25, r24
    3a44:	88 27       	eor	r24, r24
    3a46:	84 2b       	or	r24, r20
    3a48:	95 2b       	or	r25, r21
    3a4a:	a6 2b       	or	r26, r22
    3a4c:	b7 2b       	or	r27, r23
    3a4e:	ee 96       	adiw	r28, 0x3e	; 62
    3a50:	2f ad       	ldd	r18, Y+63	; 0x3f
    3a52:	ee 97       	sbiw	r28, 0x3e	; 62
    3a54:	bc 01       	movw	r22, r24
    3a56:	cd 01       	movw	r24, r26
    3a58:	62 2b       	or	r22, r18
    3a5a:	0e 94 9b 30 	call	0x6136	; 0x6136 <__floatsisf>
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	40 e8       	ldi	r20, 0x80	; 128
    3a64:	5a e3       	ldi	r21, 0x3A	; 58
    3a66:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
    3a6a:	f8 01       	movw	r30, r16
    3a6c:	64 83       	std	Z+4, r22	; 0x04
    3a6e:	75 83       	std	Z+5, r23	; 0x05
    3a70:	86 83       	std	Z+6, r24	; 0x06
    3a72:	97 83       	std	Z+7, r25	; 0x07
    3a74:	ef 96       	adiw	r28, 0x3f	; 63
    3a76:	4f ad       	ldd	r20, Y+63	; 0x3f
    3a78:	ef 97       	sbiw	r28, 0x3f	; 63
    3a7a:	50 e0       	ldi	r21, 0x00	; 0
    3a7c:	60 e0       	ldi	r22, 0x00	; 0
    3a7e:	70 e0       	ldi	r23, 0x00	; 0
    3a80:	74 2f       	mov	r23, r20
    3a82:	66 27       	eor	r22, r22
    3a84:	55 27       	eor	r21, r21
    3a86:	44 27       	eor	r20, r20
    3a88:	c1 58       	subi	r28, 0x81	; 129
    3a8a:	df 4f       	sbci	r29, 0xFF	; 255
    3a8c:	88 81       	ld	r24, Y
    3a8e:	cf 57       	subi	r28, 0x7F	; 127
    3a90:	d0 40       	sbci	r29, 0x00	; 0
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	a0 e0       	ldi	r26, 0x00	; 0
    3a96:	b0 e0       	ldi	r27, 0x00	; 0
    3a98:	dc 01       	movw	r26, r24
    3a9a:	99 27       	eor	r25, r25
    3a9c:	88 27       	eor	r24, r24
    3a9e:	48 2b       	or	r20, r24
    3aa0:	59 2b       	or	r21, r25
    3aa2:	6a 2b       	or	r22, r26
    3aa4:	7b 2b       	or	r23, r27
    3aa6:	c0 58       	subi	r28, 0x80	; 128
    3aa8:	df 4f       	sbci	r29, 0xFF	; 255
    3aaa:	88 81       	ld	r24, Y
    3aac:	c0 58       	subi	r28, 0x80	; 128
    3aae:	d0 40       	sbci	r29, 0x00	; 0
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	a0 e0       	ldi	r26, 0x00	; 0
    3ab4:	b0 e0       	ldi	r27, 0x00	; 0
    3ab6:	ba 2f       	mov	r27, r26
    3ab8:	a9 2f       	mov	r26, r25
    3aba:	98 2f       	mov	r25, r24
    3abc:	88 27       	eor	r24, r24
    3abe:	84 2b       	or	r24, r20
    3ac0:	95 2b       	or	r25, r21
    3ac2:	a6 2b       	or	r26, r22
    3ac4:	b7 2b       	or	r27, r23
    3ac6:	cf 57       	subi	r28, 0x7F	; 127
    3ac8:	df 4f       	sbci	r29, 0xFF	; 255
    3aca:	28 81       	ld	r18, Y
    3acc:	c1 58       	subi	r28, 0x81	; 129
    3ace:	d0 40       	sbci	r29, 0x00	; 0
    3ad0:	bc 01       	movw	r22, r24
    3ad2:	cd 01       	movw	r24, r26
    3ad4:	62 2b       	or	r22, r18
    3ad6:	0e 94 9b 30 	call	0x6136	; 0x6136 <__floatsisf>
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	40 e8       	ldi	r20, 0x80	; 128
    3ae0:	5a e3       	ldi	r21, 0x3A	; 58
    3ae2:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
    3ae6:	f8 01       	movw	r30, r16
    3ae8:	60 87       	std	Z+8, r22	; 0x08
    3aea:	71 87       	std	Z+9, r23	; 0x09
    3aec:	82 87       	std	Z+10, r24	; 0x0a
    3aee:	93 87       	std	Z+11, r25	; 0x0b
    3af0:	ce 57       	subi	r28, 0x7E	; 126
    3af2:	df 4f       	sbci	r29, 0xFF	; 255
    3af4:	88 81       	ld	r24, Y
    3af6:	c2 58       	subi	r28, 0x82	; 130
    3af8:	d0 40       	sbci	r29, 0x00	; 0
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	a0 e0       	ldi	r26, 0x00	; 0
    3afe:	b0 e0       	ldi	r27, 0x00	; 0
    3b00:	78 2f       	mov	r23, r24
    3b02:	66 27       	eor	r22, r22
    3b04:	55 27       	eor	r21, r21
    3b06:	44 27       	eor	r20, r20
    3b08:	cd 57       	subi	r28, 0x7D	; 125
    3b0a:	df 4f       	sbci	r29, 0xFF	; 255
    3b0c:	98 81       	ld	r25, Y
    3b0e:	c3 58       	subi	r28, 0x83	; 131
    3b10:	d0 40       	sbci	r29, 0x00	; 0
    3b12:	89 2f       	mov	r24, r25
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	a0 e0       	ldi	r26, 0x00	; 0
    3b18:	b0 e0       	ldi	r27, 0x00	; 0
    3b1a:	dc 01       	movw	r26, r24
    3b1c:	99 27       	eor	r25, r25
    3b1e:	88 27       	eor	r24, r24
    3b20:	84 2b       	or	r24, r20
    3b22:	95 2b       	or	r25, r21
    3b24:	a6 2b       	or	r26, r22
    3b26:	b7 2b       	or	r27, r23
    3b28:	cc 57       	subi	r28, 0x7C	; 124
    3b2a:	df 4f       	sbci	r29, 0xFF	; 255
    3b2c:	48 81       	ld	r20, Y
    3b2e:	c4 58       	subi	r28, 0x84	; 132
    3b30:	d0 40       	sbci	r29, 0x00	; 0
    3b32:	50 e0       	ldi	r21, 0x00	; 0
    3b34:	60 e0       	ldi	r22, 0x00	; 0
    3b36:	70 e0       	ldi	r23, 0x00	; 0
    3b38:	76 2f       	mov	r23, r22
    3b3a:	65 2f       	mov	r22, r21
    3b3c:	54 2f       	mov	r21, r20
    3b3e:	44 27       	eor	r20, r20
    3b40:	84 2b       	or	r24, r20
    3b42:	95 2b       	or	r25, r21
    3b44:	a6 2b       	or	r26, r22
    3b46:	b7 2b       	or	r27, r23
    3b48:	cb 57       	subi	r28, 0x7B	; 123
    3b4a:	df 4f       	sbci	r29, 0xFF	; 255
    3b4c:	28 81       	ld	r18, Y
    3b4e:	c5 58       	subi	r28, 0x85	; 133
    3b50:	d0 40       	sbci	r29, 0x00	; 0
    3b52:	82 2b       	or	r24, r18
    3b54:	84 87       	std	Z+12, r24	; 0x0c
    3b56:	95 87       	std	Z+13, r25	; 0x0d
    3b58:	a6 87       	std	Z+14, r26	; 0x0e
    3b5a:	b7 87       	std	Z+15, r27	; 0x0f
    3b5c:	ca 57       	subi	r28, 0x7A	; 122
    3b5e:	df 4f       	sbci	r29, 0xFF	; 255
    3b60:	88 81       	ld	r24, Y
    3b62:	c6 58       	subi	r28, 0x86	; 134
    3b64:	d0 40       	sbci	r29, 0x00	; 0
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	a0 e0       	ldi	r26, 0x00	; 0
    3b6a:	b0 e0       	ldi	r27, 0x00	; 0
    3b6c:	78 2f       	mov	r23, r24
    3b6e:	66 27       	eor	r22, r22
    3b70:	55 27       	eor	r21, r21
    3b72:	44 27       	eor	r20, r20
    3b74:	c9 57       	subi	r28, 0x79	; 121
    3b76:	df 4f       	sbci	r29, 0xFF	; 255
    3b78:	98 81       	ld	r25, Y
    3b7a:	c7 58       	subi	r28, 0x87	; 135
    3b7c:	d0 40       	sbci	r29, 0x00	; 0
    3b7e:	89 2f       	mov	r24, r25
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	a0 e0       	ldi	r26, 0x00	; 0
    3b84:	b0 e0       	ldi	r27, 0x00	; 0
    3b86:	dc 01       	movw	r26, r24
    3b88:	99 27       	eor	r25, r25
    3b8a:	88 27       	eor	r24, r24
    3b8c:	84 2b       	or	r24, r20
    3b8e:	95 2b       	or	r25, r21
    3b90:	a6 2b       	or	r26, r22
    3b92:	b7 2b       	or	r27, r23
    3b94:	c8 57       	subi	r28, 0x78	; 120
    3b96:	df 4f       	sbci	r29, 0xFF	; 255
    3b98:	48 81       	ld	r20, Y
    3b9a:	c8 58       	subi	r28, 0x88	; 136
    3b9c:	d0 40       	sbci	r29, 0x00	; 0
    3b9e:	50 e0       	ldi	r21, 0x00	; 0
    3ba0:	60 e0       	ldi	r22, 0x00	; 0
    3ba2:	70 e0       	ldi	r23, 0x00	; 0
    3ba4:	76 2f       	mov	r23, r22
    3ba6:	65 2f       	mov	r22, r21
    3ba8:	54 2f       	mov	r21, r20
    3baa:	44 27       	eor	r20, r20
    3bac:	84 2b       	or	r24, r20
    3bae:	95 2b       	or	r25, r21
    3bb0:	a6 2b       	or	r26, r22
    3bb2:	b7 2b       	or	r27, r23
    3bb4:	c7 57       	subi	r28, 0x77	; 119
    3bb6:	df 4f       	sbci	r29, 0xFF	; 255
    3bb8:	28 81       	ld	r18, Y
    3bba:	c9 58       	subi	r28, 0x89	; 137
    3bbc:	d0 40       	sbci	r29, 0x00	; 0
    3bbe:	82 2b       	or	r24, r18
    3bc0:	80 8b       	std	Z+16, r24	; 0x10
    3bc2:	91 8b       	std	Z+17, r25	; 0x11
    3bc4:	a2 8b       	std	Z+18, r26	; 0x12
    3bc6:	b3 8b       	std	Z+19, r27	; 0x13
    3bc8:	c6 57       	subi	r28, 0x76	; 118
    3bca:	df 4f       	sbci	r29, 0xFF	; 255
    3bcc:	88 81       	ld	r24, Y
    3bce:	ca 58       	subi	r28, 0x8A	; 138
    3bd0:	d0 40       	sbci	r29, 0x00	; 0
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	a0 e0       	ldi	r26, 0x00	; 0
    3bd6:	b0 e0       	ldi	r27, 0x00	; 0
    3bd8:	78 2f       	mov	r23, r24
    3bda:	66 27       	eor	r22, r22
    3bdc:	55 27       	eor	r21, r21
    3bde:	44 27       	eor	r20, r20
    3be0:	c5 57       	subi	r28, 0x75	; 117
    3be2:	df 4f       	sbci	r29, 0xFF	; 255
    3be4:	98 81       	ld	r25, Y
    3be6:	cb 58       	subi	r28, 0x8B	; 139
    3be8:	d0 40       	sbci	r29, 0x00	; 0
    3bea:	89 2f       	mov	r24, r25
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	a0 e0       	ldi	r26, 0x00	; 0
    3bf0:	b0 e0       	ldi	r27, 0x00	; 0
    3bf2:	dc 01       	movw	r26, r24
    3bf4:	99 27       	eor	r25, r25
    3bf6:	88 27       	eor	r24, r24
    3bf8:	84 2b       	or	r24, r20
    3bfa:	95 2b       	or	r25, r21
    3bfc:	a6 2b       	or	r26, r22
    3bfe:	b7 2b       	or	r27, r23
    3c00:	c4 57       	subi	r28, 0x74	; 116
    3c02:	df 4f       	sbci	r29, 0xFF	; 255
    3c04:	48 81       	ld	r20, Y
    3c06:	cc 58       	subi	r28, 0x8C	; 140
    3c08:	d0 40       	sbci	r29, 0x00	; 0
    3c0a:	50 e0       	ldi	r21, 0x00	; 0
    3c0c:	60 e0       	ldi	r22, 0x00	; 0
    3c0e:	70 e0       	ldi	r23, 0x00	; 0
    3c10:	76 2f       	mov	r23, r22
    3c12:	65 2f       	mov	r22, r21
    3c14:	54 2f       	mov	r21, r20
    3c16:	44 27       	eor	r20, r20
    3c18:	84 2b       	or	r24, r20
    3c1a:	95 2b       	or	r25, r21
    3c1c:	a6 2b       	or	r26, r22
    3c1e:	b7 2b       	or	r27, r23
    3c20:	c3 57       	subi	r28, 0x73	; 115
    3c22:	df 4f       	sbci	r29, 0xFF	; 255
    3c24:	28 81       	ld	r18, Y
    3c26:	cd 58       	subi	r28, 0x8D	; 141
    3c28:	d0 40       	sbci	r29, 0x00	; 0
    3c2a:	82 2b       	or	r24, r18
    3c2c:	84 8b       	std	Z+20, r24	; 0x14
    3c2e:	95 8b       	std	Z+21, r25	; 0x15
    3c30:	a6 8b       	std	Z+22, r26	; 0x16
    3c32:	b7 8b       	std	Z+23, r27	; 0x17
    3c34:	c2 57       	subi	r28, 0x72	; 114
    3c36:	df 4f       	sbci	r29, 0xFF	; 255
    3c38:	88 81       	ld	r24, Y
    3c3a:	ce 58       	subi	r28, 0x8E	; 142
    3c3c:	d0 40       	sbci	r29, 0x00	; 0
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	a0 e0       	ldi	r26, 0x00	; 0
    3c42:	b0 e0       	ldi	r27, 0x00	; 0
    3c44:	78 2f       	mov	r23, r24
    3c46:	66 27       	eor	r22, r22
    3c48:	55 27       	eor	r21, r21
    3c4a:	44 27       	eor	r20, r20
    3c4c:	c1 57       	subi	r28, 0x71	; 113
    3c4e:	df 4f       	sbci	r29, 0xFF	; 255
    3c50:	98 81       	ld	r25, Y
    3c52:	cf 58       	subi	r28, 0x8F	; 143
    3c54:	d0 40       	sbci	r29, 0x00	; 0
    3c56:	89 2f       	mov	r24, r25
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	a0 e0       	ldi	r26, 0x00	; 0
    3c5c:	b0 e0       	ldi	r27, 0x00	; 0
    3c5e:	dc 01       	movw	r26, r24
    3c60:	99 27       	eor	r25, r25
    3c62:	88 27       	eor	r24, r24
    3c64:	84 2b       	or	r24, r20
    3c66:	95 2b       	or	r25, r21
    3c68:	a6 2b       	or	r26, r22
    3c6a:	b7 2b       	or	r27, r23
    3c6c:	c0 57       	subi	r28, 0x70	; 112
    3c6e:	df 4f       	sbci	r29, 0xFF	; 255
    3c70:	48 81       	ld	r20, Y
    3c72:	c0 59       	subi	r28, 0x90	; 144
    3c74:	d0 40       	sbci	r29, 0x00	; 0
    3c76:	50 e0       	ldi	r21, 0x00	; 0
    3c78:	60 e0       	ldi	r22, 0x00	; 0
    3c7a:	70 e0       	ldi	r23, 0x00	; 0
    3c7c:	76 2f       	mov	r23, r22
    3c7e:	65 2f       	mov	r22, r21
    3c80:	54 2f       	mov	r21, r20
    3c82:	44 27       	eor	r20, r20
    3c84:	84 2b       	or	r24, r20
    3c86:	95 2b       	or	r25, r21
    3c88:	a6 2b       	or	r26, r22
    3c8a:	b7 2b       	or	r27, r23
    3c8c:	cf 56       	subi	r28, 0x6F	; 111
    3c8e:	df 4f       	sbci	r29, 0xFF	; 255
    3c90:	28 81       	ld	r18, Y
    3c92:	c1 59       	subi	r28, 0x91	; 145
    3c94:	d0 40       	sbci	r29, 0x00	; 0
    3c96:	82 2b       	or	r24, r18
    3c98:	80 8f       	std	Z+24, r24	; 0x18
    3c9a:	91 8f       	std	Z+25, r25	; 0x19
    3c9c:	a2 8f       	std	Z+26, r26	; 0x1a
    3c9e:	b3 8f       	std	Z+27, r27	; 0x1b
    3ca0:	20 e1       	ldi	r18, 0x10	; 16
    3ca2:	ae 01       	movw	r20, r28
    3ca4:	4a 58       	subi	r20, 0x8A	; 138
    3ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ca8:	67 e3       	ldi	r22, 0x37	; 55
    3caa:	8f 2d       	mov	r24, r15
    3cac:	0e 94 a8 19 	call	0x3350	; 0x3350 <get_MOTOR>
    3cb0:	e8 2e       	mov	r14, r24
    3cb2:	f3 e6       	ldi	r31, 0x63	; 99
    3cb4:	8f 13       	cpse	r24, r31
    3cb6:	1b c0       	rjmp	.+54     	; 0x3cee <get_MOTOR_PID+0x3d6>
    3cb8:	81 ec       	ldi	r24, 0xC1	; 193
    3cba:	8f 0d       	add	r24, r15
    3cbc:	1f 92       	push	r1
    3cbe:	8f 93       	push	r24
    3cc0:	ce 01       	movw	r24, r28
    3cc2:	01 96       	adiw	r24, 0x01	; 1
    3cc4:	9f 93       	push	r25
    3cc6:	8f 93       	push	r24
    3cc8:	8e 01       	movw	r16, r28
    3cca:	0a 5d       	subi	r16, 0xDA	; 218
    3ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    3cce:	1f 93       	push	r17
    3cd0:	0f 93       	push	r16
    3cd2:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
    3cd6:	b8 01       	movw	r22, r16
    3cd8:	86 e3       	ldi	r24, 0x36	; 54
    3cda:	91 e0       	ldi	r25, 0x01	; 1
    3cdc:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
    3ce0:	0f 90       	pop	r0
    3ce2:	0f 90       	pop	r0
    3ce4:	0f 90       	pop	r0
    3ce6:	0f 90       	pop	r0
    3ce8:	0f 90       	pop	r0
    3cea:	0f 90       	pop	r0
    3cec:	38 c0       	rjmp	.+112    	; 0x3d5e <get_MOTOR_PID+0x446>
    3cee:	ce 57       	subi	r28, 0x7E	; 126
    3cf0:	df 4f       	sbci	r29, 0xFF	; 255
    3cf2:	88 81       	ld	r24, Y
    3cf4:	c2 58       	subi	r28, 0x82	; 130
    3cf6:	d0 40       	sbci	r29, 0x00	; 0
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	a0 e0       	ldi	r26, 0x00	; 0
    3cfc:	b0 e0       	ldi	r27, 0x00	; 0
    3cfe:	78 2f       	mov	r23, r24
    3d00:	66 27       	eor	r22, r22
    3d02:	55 27       	eor	r21, r21
    3d04:	44 27       	eor	r20, r20
    3d06:	cd 57       	subi	r28, 0x7D	; 125
    3d08:	df 4f       	sbci	r29, 0xFF	; 255
    3d0a:	98 81       	ld	r25, Y
    3d0c:	c3 58       	subi	r28, 0x83	; 131
    3d0e:	d0 40       	sbci	r29, 0x00	; 0
    3d10:	89 2f       	mov	r24, r25
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	a0 e0       	ldi	r26, 0x00	; 0
    3d16:	b0 e0       	ldi	r27, 0x00	; 0
    3d18:	dc 01       	movw	r26, r24
    3d1a:	99 27       	eor	r25, r25
    3d1c:	88 27       	eor	r24, r24
    3d1e:	84 2b       	or	r24, r20
    3d20:	95 2b       	or	r25, r21
    3d22:	a6 2b       	or	r26, r22
    3d24:	b7 2b       	or	r27, r23
    3d26:	cc 57       	subi	r28, 0x7C	; 124
    3d28:	df 4f       	sbci	r29, 0xFF	; 255
    3d2a:	48 81       	ld	r20, Y
    3d2c:	c4 58       	subi	r28, 0x84	; 132
    3d2e:	d0 40       	sbci	r29, 0x00	; 0
    3d30:	50 e0       	ldi	r21, 0x00	; 0
    3d32:	60 e0       	ldi	r22, 0x00	; 0
    3d34:	70 e0       	ldi	r23, 0x00	; 0
    3d36:	76 2f       	mov	r23, r22
    3d38:	65 2f       	mov	r22, r21
    3d3a:	54 2f       	mov	r21, r20
    3d3c:	44 27       	eor	r20, r20
    3d3e:	84 2b       	or	r24, r20
    3d40:	95 2b       	or	r25, r21
    3d42:	a6 2b       	or	r26, r22
    3d44:	b7 2b       	or	r27, r23
    3d46:	cb 57       	subi	r28, 0x7B	; 123
    3d48:	df 4f       	sbci	r29, 0xFF	; 255
    3d4a:	28 81       	ld	r18, Y
    3d4c:	c5 58       	subi	r28, 0x85	; 133
    3d4e:	d0 40       	sbci	r29, 0x00	; 0
    3d50:	82 2b       	or	r24, r18
    3d52:	f8 01       	movw	r30, r16
    3d54:	84 8f       	std	Z+28, r24	; 0x1c
    3d56:	95 8f       	std	Z+29, r25	; 0x1d
    3d58:	a6 8f       	std	Z+30, r26	; 0x1e
    3d5a:	b7 8f       	std	Z+31, r27	; 0x1f
    3d5c:	e1 2c       	mov	r14, r1
    3d5e:	8e 2d       	mov	r24, r14
    3d60:	cf 56       	subi	r28, 0x6F	; 111
    3d62:	df 4f       	sbci	r29, 0xFF	; 255
    3d64:	cd bf       	out	0x3d, r28	; 61
    3d66:	de bf       	out	0x3e, r29	; 62
    3d68:	df 91       	pop	r29
    3d6a:	cf 91       	pop	r28
    3d6c:	1f 91       	pop	r17
    3d6e:	0f 91       	pop	r16
    3d70:	ff 90       	pop	r15
    3d72:	ef 90       	pop	r14
    3d74:	08 95       	ret

00003d76 <get_MOTOR_S4MODE>:
    3d76:	cf 92       	push	r12
    3d78:	df 92       	push	r13
    3d7a:	ef 92       	push	r14
    3d7c:	ff 92       	push	r15
    3d7e:	0f 93       	push	r16
    3d80:	1f 93       	push	r17
    3d82:	cf 93       	push	r28
    3d84:	df 93       	push	r29
    3d86:	cd b7       	in	r28, 0x3d	; 61
    3d88:	de b7       	in	r29, 0x3e	; 62
    3d8a:	c7 57       	subi	r28, 0x77	; 119
    3d8c:	d1 09       	sbc	r29, r1
    3d8e:	cd bf       	out	0x3d, r28	; 61
    3d90:	de bf       	out	0x3e, r29	; 62
    3d92:	08 2f       	mov	r16, r24
    3d94:	7b 01       	movw	r14, r22
    3d96:	84 e2       	ldi	r24, 0x24	; 36
    3d98:	e3 ee       	ldi	r30, 0xE3	; 227
    3d9a:	f7 eb       	ldi	r31, 0xB7	; 183
    3d9c:	de 01       	movw	r26, r28
    3d9e:	11 96       	adiw	r26, 0x01	; 1
    3da0:	01 90       	ld	r0, Z+
    3da2:	0d 92       	st	X+, r0
    3da4:	8a 95       	dec	r24
    3da6:	e1 f7       	brne	.-8      	; 0x3da0 <get_MOTOR_S4MODE+0x2a>
    3da8:	23 e0       	ldi	r18, 0x03	; 3
    3daa:	ae 01       	movw	r20, r28
    3dac:	4b 58       	subi	r20, 0x8B	; 139
    3dae:	5f 4f       	sbci	r21, 0xFF	; 255
    3db0:	6b e4       	ldi	r22, 0x4B	; 75
    3db2:	80 2f       	mov	r24, r16
    3db4:	0e 94 a8 19 	call	0x3350	; 0x3350 <get_MOTOR>
    3db8:	18 2f       	mov	r17, r24
    3dba:	83 36       	cpi	r24, 0x63	; 99
    3dbc:	f1 f4       	brne	.+60     	; 0x3dfa <get_MOTOR_S4MODE+0x84>
    3dbe:	0f 53       	subi	r16, 0x3F	; 63
    3dc0:	1f 92       	push	r1
    3dc2:	0f 93       	push	r16
    3dc4:	ce 01       	movw	r24, r28
    3dc6:	01 96       	adiw	r24, 0x01	; 1
    3dc8:	9f 93       	push	r25
    3dca:	8f 93       	push	r24
    3dcc:	6e 01       	movw	r12, r28
    3dce:	85 e2       	ldi	r24, 0x25	; 37
    3dd0:	c8 0e       	add	r12, r24
    3dd2:	d1 1c       	adc	r13, r1
    3dd4:	df 92       	push	r13
    3dd6:	cf 92       	push	r12
    3dd8:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
    3ddc:	b6 01       	movw	r22, r12
    3dde:	86 e3       	ldi	r24, 0x36	; 54
    3de0:	91 e0       	ldi	r25, 0x01	; 1
    3de2:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
    3de6:	8f ef       	ldi	r24, 0xFF	; 255
    3de8:	f7 01       	movw	r30, r14
    3dea:	80 83       	st	Z, r24
    3dec:	0f 90       	pop	r0
    3dee:	0f 90       	pop	r0
    3df0:	0f 90       	pop	r0
    3df2:	0f 90       	pop	r0
    3df4:	0f 90       	pop	r0
    3df6:	0f 90       	pop	r0
    3df8:	06 c0       	rjmp	.+12     	; 0x3e06 <get_MOTOR_S4MODE+0x90>
    3dfa:	e7 96       	adiw	r28, 0x37	; 55
    3dfc:	8f ad       	ldd	r24, Y+63	; 0x3f
    3dfe:	e7 97       	sbiw	r28, 0x37	; 55
    3e00:	f7 01       	movw	r30, r14
    3e02:	80 83       	st	Z, r24
    3e04:	10 e0       	ldi	r17, 0x00	; 0
    3e06:	81 2f       	mov	r24, r17
    3e08:	c9 58       	subi	r28, 0x89	; 137
    3e0a:	df 4f       	sbci	r29, 0xFF	; 255
    3e0c:	cd bf       	out	0x3d, r28	; 61
    3e0e:	de bf       	out	0x3e, r29	; 62
    3e10:	df 91       	pop	r29
    3e12:	cf 91       	pop	r28
    3e14:	1f 91       	pop	r17
    3e16:	0f 91       	pop	r16
    3e18:	ff 90       	pop	r15
    3e1a:	ef 90       	pop	r14
    3e1c:	df 90       	pop	r13
    3e1e:	cf 90       	pop	r12
    3e20:	08 95       	ret

00003e22 <get_MOTOR_SPEED>:
    3e22:	ef 92       	push	r14
    3e24:	ff 92       	push	r15
    3e26:	0f 93       	push	r16
    3e28:	1f 93       	push	r17
    3e2a:	cf 93       	push	r28
    3e2c:	df 93       	push	r29
    3e2e:	cd b7       	in	r28, 0x3d	; 61
    3e30:	de b7       	in	r29, 0x3e	; 62
    3e32:	c1 58       	subi	r28, 0x81	; 129
    3e34:	d1 09       	sbc	r29, r1
    3e36:	cd bf       	out	0x3d, r28	; 61
    3e38:	de bf       	out	0x3e, r29	; 62
    3e3a:	e8 2e       	mov	r14, r24
    3e3c:	8b 01       	movw	r16, r22
    3e3e:	8c e2       	ldi	r24, 0x2C	; 44
    3e40:	e7 e0       	ldi	r30, 0x07	; 7
    3e42:	f8 eb       	ldi	r31, 0xB8	; 184
    3e44:	de 01       	movw	r26, r28
    3e46:	aa 5a       	subi	r26, 0xAA	; 170
    3e48:	bf 4f       	sbci	r27, 0xFF	; 255
    3e4a:	01 90       	ld	r0, Z+
    3e4c:	0d 92       	st	X+, r0
    3e4e:	8a 95       	dec	r24
    3e50:	e1 f7       	brne	.-8      	; 0x3e4a <get_MOTOR_SPEED+0x28>
    3e52:	25 e0       	ldi	r18, 0x05	; 5
    3e54:	ae 01       	movw	r20, r28
    3e56:	4f 5a       	subi	r20, 0xAF	; 175
    3e58:	5f 4f       	sbci	r21, 0xFF	; 255
    3e5a:	62 e1       	ldi	r22, 0x12	; 18
    3e5c:	8e 2d       	mov	r24, r14
    3e5e:	0e 94 a8 19 	call	0x3350	; 0x3350 <get_MOTOR>
    3e62:	f8 2e       	mov	r15, r24
    3e64:	83 e6       	ldi	r24, 0x63	; 99
    3e66:	f8 12       	cpse	r15, r24
    3e68:	1c c0       	rjmp	.+56     	; 0x3ea2 <get_MOTOR_SPEED+0x80>
    3e6a:	81 ec       	ldi	r24, 0xC1	; 193
    3e6c:	8e 0d       	add	r24, r14
    3e6e:	1f 92       	push	r1
    3e70:	8f 93       	push	r24
    3e72:	ce 01       	movw	r24, r28
    3e74:	8a 5a       	subi	r24, 0xAA	; 170
    3e76:	9f 4f       	sbci	r25, 0xFF	; 255
    3e78:	9f 93       	push	r25
    3e7a:	8f 93       	push	r24
    3e7c:	8e 01       	movw	r16, r28
    3e7e:	0f 5f       	subi	r16, 0xFF	; 255
    3e80:	1f 4f       	sbci	r17, 0xFF	; 255
    3e82:	1f 93       	push	r17
    3e84:	0f 93       	push	r16
    3e86:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
    3e8a:	b8 01       	movw	r22, r16
    3e8c:	86 e3       	ldi	r24, 0x36	; 54
    3e8e:	91 e0       	ldi	r25, 0x01	; 1
    3e90:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	0f 90       	pop	r0
    3e9a:	0f 90       	pop	r0
    3e9c:	0f 90       	pop	r0
    3e9e:	0f 90       	pop	r0
    3ea0:	30 c0       	rjmp	.+96     	; 0x3f02 <get_MOTOR_SPEED+0xe0>
    3ea2:	62 96       	adiw	r28, 0x12	; 18
    3ea4:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ea6:	62 97       	sbiw	r28, 0x12	; 18
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	a0 e0       	ldi	r26, 0x00	; 0
    3eac:	b0 e0       	ldi	r27, 0x00	; 0
    3eae:	78 2f       	mov	r23, r24
    3eb0:	66 27       	eor	r22, r22
    3eb2:	55 27       	eor	r21, r21
    3eb4:	44 27       	eor	r20, r20
    3eb6:	63 96       	adiw	r28, 0x13	; 19
    3eb8:	9f ad       	ldd	r25, Y+63	; 0x3f
    3eba:	63 97       	sbiw	r28, 0x13	; 19
    3ebc:	89 2f       	mov	r24, r25
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	a0 e0       	ldi	r26, 0x00	; 0
    3ec2:	b0 e0       	ldi	r27, 0x00	; 0
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	99 27       	eor	r25, r25
    3ec8:	88 27       	eor	r24, r24
    3eca:	84 2b       	or	r24, r20
    3ecc:	95 2b       	or	r25, r21
    3ece:	a6 2b       	or	r26, r22
    3ed0:	b7 2b       	or	r27, r23
    3ed2:	64 96       	adiw	r28, 0x14	; 20
    3ed4:	4f ad       	ldd	r20, Y+63	; 0x3f
    3ed6:	64 97       	sbiw	r28, 0x14	; 20
    3ed8:	50 e0       	ldi	r21, 0x00	; 0
    3eda:	60 e0       	ldi	r22, 0x00	; 0
    3edc:	70 e0       	ldi	r23, 0x00	; 0
    3ede:	76 2f       	mov	r23, r22
    3ee0:	65 2f       	mov	r22, r21
    3ee2:	54 2f       	mov	r21, r20
    3ee4:	44 27       	eor	r20, r20
    3ee6:	84 2b       	or	r24, r20
    3ee8:	95 2b       	or	r25, r21
    3eea:	a6 2b       	or	r26, r22
    3eec:	b7 2b       	or	r27, r23
    3eee:	65 96       	adiw	r28, 0x15	; 21
    3ef0:	2f ad       	ldd	r18, Y+63	; 0x3f
    3ef2:	65 97       	sbiw	r28, 0x15	; 21
    3ef4:	82 2b       	or	r24, r18
    3ef6:	f8 01       	movw	r30, r16
    3ef8:	80 83       	st	Z, r24
    3efa:	91 83       	std	Z+1, r25	; 0x01
    3efc:	a2 83       	std	Z+2, r26	; 0x02
    3efe:	b3 83       	std	Z+3, r27	; 0x03
    3f00:	f1 2c       	mov	r15, r1
    3f02:	8f 2d       	mov	r24, r15
    3f04:	cf 57       	subi	r28, 0x7F	; 127
    3f06:	df 4f       	sbci	r29, 0xFF	; 255
    3f08:	cd bf       	out	0x3d, r28	; 61
    3f0a:	de bf       	out	0x3e, r29	; 62
    3f0c:	df 91       	pop	r29
    3f0e:	cf 91       	pop	r28
    3f10:	1f 91       	pop	r17
    3f12:	0f 91       	pop	r16
    3f14:	ff 90       	pop	r15
    3f16:	ef 90       	pop	r14
    3f18:	08 95       	ret

00003f1a <get_MOTOR_STATUS>:
    3f1a:	ef 92       	push	r14
    3f1c:	ff 92       	push	r15
    3f1e:	0f 93       	push	r16
    3f20:	1f 93       	push	r17
    3f22:	cf 93       	push	r28
    3f24:	df 93       	push	r29
    3f26:	cd b7       	in	r28, 0x3d	; 61
    3f28:	de b7       	in	r29, 0x3e	; 62
    3f2a:	c9 57       	subi	r28, 0x79	; 121
    3f2c:	d1 09       	sbc	r29, r1
    3f2e:	cd bf       	out	0x3d, r28	; 61
    3f30:	de bf       	out	0x3e, r29	; 62
    3f32:	e8 2e       	mov	r14, r24
    3f34:	8b 01       	movw	r16, r22
    3f36:	85 e2       	ldi	r24, 0x25	; 37
    3f38:	e3 e3       	ldi	r30, 0x33	; 51
    3f3a:	f8 eb       	ldi	r31, 0xB8	; 184
    3f3c:	de 01       	movw	r26, r28
    3f3e:	af 5a       	subi	r26, 0xAF	; 175
    3f40:	bf 4f       	sbci	r27, 0xFF	; 255
    3f42:	01 90       	ld	r0, Z+
    3f44:	0d 92       	st	X+, r0
    3f46:	8a 95       	dec	r24
    3f48:	e1 f7       	brne	.-8      	; 0x3f42 <get_MOTOR_STATUS+0x28>
    3f4a:	24 e0       	ldi	r18, 0x04	; 4
    3f4c:	ae 01       	movw	r20, r28
    3f4e:	4a 58       	subi	r20, 0x8A	; 138
    3f50:	5f 4f       	sbci	r21, 0xFF	; 255
    3f52:	6a e5       	ldi	r22, 0x5A	; 90
    3f54:	8e 2d       	mov	r24, r14
    3f56:	0e 94 a8 19 	call	0x3350	; 0x3350 <get_MOTOR>
    3f5a:	f8 2e       	mov	r15, r24
    3f5c:	83 e6       	ldi	r24, 0x63	; 99
    3f5e:	f8 12       	cpse	r15, r24
    3f60:	1d c0       	rjmp	.+58     	; 0x3f9c <get_MOTOR_STATUS+0x82>
    3f62:	8e 2d       	mov	r24, r14
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	cf 97       	sbiw	r24, 0x3f	; 63
    3f68:	9f 93       	push	r25
    3f6a:	8f 93       	push	r24
    3f6c:	ce 01       	movw	r24, r28
    3f6e:	8f 5a       	subi	r24, 0xAF	; 175
    3f70:	9f 4f       	sbci	r25, 0xFF	; 255
    3f72:	9f 93       	push	r25
    3f74:	8f 93       	push	r24
    3f76:	8e 01       	movw	r16, r28
    3f78:	0f 5f       	subi	r16, 0xFF	; 255
    3f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f7c:	1f 93       	push	r17
    3f7e:	0f 93       	push	r16
    3f80:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
    3f84:	b8 01       	movw	r22, r16
    3f86:	86 e3       	ldi	r24, 0x36	; 54
    3f88:	91 e0       	ldi	r25, 0x01	; 1
    3f8a:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
    3f8e:	0f 90       	pop	r0
    3f90:	0f 90       	pop	r0
    3f92:	0f 90       	pop	r0
    3f94:	0f 90       	pop	r0
    3f96:	0f 90       	pop	r0
    3f98:	0f 90       	pop	r0
    3f9a:	30 c0       	rjmp	.+96     	; 0x3ffc <get_MOTOR_STATUS+0xe2>
    3f9c:	e7 96       	adiw	r28, 0x37	; 55
    3f9e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3fa0:	e7 97       	sbiw	r28, 0x37	; 55
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	a0 e0       	ldi	r26, 0x00	; 0
    3fa6:	b0 e0       	ldi	r27, 0x00	; 0
    3fa8:	78 2f       	mov	r23, r24
    3faa:	66 27       	eor	r22, r22
    3fac:	55 27       	eor	r21, r21
    3fae:	44 27       	eor	r20, r20
    3fb0:	e8 96       	adiw	r28, 0x38	; 56
    3fb2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fb4:	e8 97       	sbiw	r28, 0x38	; 56
    3fb6:	89 2f       	mov	r24, r25
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	a0 e0       	ldi	r26, 0x00	; 0
    3fbc:	b0 e0       	ldi	r27, 0x00	; 0
    3fbe:	dc 01       	movw	r26, r24
    3fc0:	99 27       	eor	r25, r25
    3fc2:	88 27       	eor	r24, r24
    3fc4:	84 2b       	or	r24, r20
    3fc6:	95 2b       	or	r25, r21
    3fc8:	a6 2b       	or	r26, r22
    3fca:	b7 2b       	or	r27, r23
    3fcc:	e9 96       	adiw	r28, 0x39	; 57
    3fce:	4f ad       	ldd	r20, Y+63	; 0x3f
    3fd0:	e9 97       	sbiw	r28, 0x39	; 57
    3fd2:	50 e0       	ldi	r21, 0x00	; 0
    3fd4:	60 e0       	ldi	r22, 0x00	; 0
    3fd6:	70 e0       	ldi	r23, 0x00	; 0
    3fd8:	76 2f       	mov	r23, r22
    3fda:	65 2f       	mov	r22, r21
    3fdc:	54 2f       	mov	r21, r20
    3fde:	44 27       	eor	r20, r20
    3fe0:	84 2b       	or	r24, r20
    3fe2:	95 2b       	or	r25, r21
    3fe4:	a6 2b       	or	r26, r22
    3fe6:	b7 2b       	or	r27, r23
    3fe8:	ea 96       	adiw	r28, 0x3a	; 58
    3fea:	2f ad       	ldd	r18, Y+63	; 0x3f
    3fec:	ea 97       	sbiw	r28, 0x3a	; 58
    3fee:	82 2b       	or	r24, r18
    3ff0:	f8 01       	movw	r30, r16
    3ff2:	80 83       	st	Z, r24
    3ff4:	91 83       	std	Z+1, r25	; 0x01
    3ff6:	a2 83       	std	Z+2, r26	; 0x02
    3ff8:	b3 83       	std	Z+3, r27	; 0x03
    3ffa:	f1 2c       	mov	r15, r1
    3ffc:	8f 2d       	mov	r24, r15
    3ffe:	c7 58       	subi	r28, 0x87	; 135
    4000:	df 4f       	sbci	r29, 0xFF	; 255
    4002:	cd bf       	out	0x3d, r28	; 61
    4004:	de bf       	out	0x3e, r29	; 62
    4006:	df 91       	pop	r29
    4008:	cf 91       	pop	r28
    400a:	1f 91       	pop	r17
    400c:	0f 91       	pop	r16
    400e:	ff 90       	pop	r15
    4010:	ef 90       	pop	r14
    4012:	08 95       	ret

00004014 <get_MOTOR_LIMIT>:
    4014:	0f 93       	push	r16
    4016:	1f 93       	push	r17
    4018:	cf 93       	push	r28
    401a:	df 93       	push	r29
    401c:	cd b7       	in	r28, 0x3d	; 61
    401e:	de b7       	in	r29, 0x3e	; 62
    4020:	c2 58       	subi	r28, 0x82	; 130
    4022:	d1 09       	sbc	r29, r1
    4024:	cd bf       	out	0x3d, r28	; 61
    4026:	de bf       	out	0x3e, r29	; 62
    4028:	18 2f       	mov	r17, r24
    402a:	8e e2       	ldi	r24, 0x2E	; 46
    402c:	e8 e5       	ldi	r30, 0x58	; 88
    402e:	f8 eb       	ldi	r31, 0xB8	; 184
    4030:	de 01       	movw	r26, r28
    4032:	af 5a       	subi	r26, 0xAF	; 175
    4034:	bf 4f       	sbci	r27, 0xFF	; 255
    4036:	01 90       	ld	r0, Z+
    4038:	0d 92       	st	X+, r0
    403a:	8a 95       	dec	r24
    403c:	e1 f7       	brne	.-8      	; 0x4036 <get_MOTOR_LIMIT+0x22>
    403e:	be 01       	movw	r22, r28
    4040:	61 58       	subi	r22, 0x81	; 129
    4042:	7f 4f       	sbci	r23, 0xFF	; 255
    4044:	81 2f       	mov	r24, r17
    4046:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <get_MOTOR_STATUS>
    404a:	83 36       	cpi	r24, 0x63	; 99
    404c:	d1 f4       	brne	.+52     	; 0x4082 <get_MOTOR_LIMIT+0x6e>
    404e:	1f 51       	subi	r17, 0x1F	; 31
    4050:	1f 92       	push	r1
    4052:	1f 93       	push	r17
    4054:	ce 01       	movw	r24, r28
    4056:	8f 5a       	subi	r24, 0xAF	; 175
    4058:	9f 4f       	sbci	r25, 0xFF	; 255
    405a:	9f 93       	push	r25
    405c:	8f 93       	push	r24
    405e:	8e 01       	movw	r16, r28
    4060:	0f 5f       	subi	r16, 0xFF	; 255
    4062:	1f 4f       	sbci	r17, 0xFF	; 255
    4064:	1f 93       	push	r17
    4066:	0f 93       	push	r16
    4068:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
    406c:	b8 01       	movw	r22, r16
    406e:	86 e3       	ldi	r24, 0x36	; 54
    4070:	91 e0       	ldi	r25, 0x01	; 1
    4072:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
    4076:	0f 90       	pop	r0
    4078:	0f 90       	pop	r0
    407a:	0f 90       	pop	r0
    407c:	0f 90       	pop	r0
    407e:	0f 90       	pop	r0
    4080:	0f 90       	pop	r0
    4082:	c1 58       	subi	r28, 0x81	; 129
    4084:	df 4f       	sbci	r29, 0xFF	; 255
    4086:	88 81       	ld	r24, Y
    4088:	99 81       	ldd	r25, Y+1	; 0x01
    408a:	aa 81       	ldd	r26, Y+2	; 0x02
    408c:	bb 81       	ldd	r27, Y+3	; 0x03
    408e:	cf 57       	subi	r28, 0x7F	; 127
    4090:	d0 40       	sbci	r29, 0x00	; 0
    4092:	a6 ff       	sbrs	r26, 6
    4094:	02 c0       	rjmp	.+4      	; 0x409a <get_MOTOR_LIMIT+0x86>
    4096:	81 e0       	ldi	r24, 0x01	; 1
    4098:	01 c0       	rjmp	.+2      	; 0x409c <get_MOTOR_LIMIT+0x88>
    409a:	80 e0       	ldi	r24, 0x00	; 0
    409c:	ce 57       	subi	r28, 0x7E	; 126
    409e:	df 4f       	sbci	r29, 0xFF	; 255
    40a0:	cd bf       	out	0x3d, r28	; 61
    40a2:	de bf       	out	0x3e, r29	; 62
    40a4:	df 91       	pop	r29
    40a6:	cf 91       	pop	r28
    40a8:	1f 91       	pop	r17
    40aa:	0f 91       	pop	r16
    40ac:	08 95       	ret

000040ae <get_MOTOR_LIMITS>:
    40ae:	ef 92       	push	r14
    40b0:	ff 92       	push	r15
    40b2:	1f 93       	push	r17
    40b4:	cf 93       	push	r28
    40b6:	df 93       	push	r29
    40b8:	00 d0       	rcall	.+0      	; 0x40ba <get_MOTOR_LIMITS+0xc>
    40ba:	00 d0       	rcall	.+0      	; 0x40bc <get_MOTOR_LIMITS+0xe>
    40bc:	cd b7       	in	r28, 0x3d	; 61
    40be:	de b7       	in	r29, 0x3e	; 62
    40c0:	10 e0       	ldi	r17, 0x00	; 0
    40c2:	1b c0       	rjmp	.+54     	; 0x40fa <get_MOTOR_LIMITS+0x4c>
    40c4:	e1 2e       	mov	r14, r17
    40c6:	f1 2c       	mov	r15, r1
    40c8:	f7 01       	movw	r30, r14
    40ca:	e0 5c       	subi	r30, 0xC0	; 192
    40cc:	f5 4d       	sbci	r31, 0xD5	; 213
    40ce:	10 82       	st	Z, r1
    40d0:	be 01       	movw	r22, r28
    40d2:	6f 5f       	subi	r22, 0xFF	; 255
    40d4:	7f 4f       	sbci	r23, 0xFF	; 255
    40d6:	80 e8       	ldi	r24, 0x80	; 128
    40d8:	81 0f       	add	r24, r17
    40da:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <get_MOTOR_STATUS>
    40de:	83 36       	cpi	r24, 0x63	; 99
    40e0:	59 f0       	breq	.+22     	; 0x40f8 <get_MOTOR_LIMITS+0x4a>
    40e2:	89 81       	ldd	r24, Y+1	; 0x01
    40e4:	9a 81       	ldd	r25, Y+2	; 0x02
    40e6:	ab 81       	ldd	r26, Y+3	; 0x03
    40e8:	bc 81       	ldd	r27, Y+4	; 0x04
    40ea:	a6 ff       	sbrs	r26, 6
    40ec:	05 c0       	rjmp	.+10     	; 0x40f8 <get_MOTOR_LIMITS+0x4a>
    40ee:	f7 01       	movw	r30, r14
    40f0:	e0 5c       	subi	r30, 0xC0	; 192
    40f2:	f5 4d       	sbci	r31, 0xD5	; 213
    40f4:	81 e0       	ldi	r24, 0x01	; 1
    40f6:	80 83       	st	Z, r24
    40f8:	1f 5f       	subi	r17, 0xFF	; 255
    40fa:	13 30       	cpi	r17, 0x03	; 3
    40fc:	18 f3       	brcs	.-58     	; 0x40c4 <get_MOTOR_LIMITS+0x16>
    40fe:	80 e0       	ldi	r24, 0x00	; 0
    4100:	24 96       	adiw	r28, 0x04	; 4
    4102:	cd bf       	out	0x3d, r28	; 61
    4104:	de bf       	out	0x3e, r29	; 62
    4106:	df 91       	pop	r29
    4108:	cf 91       	pop	r28
    410a:	1f 91       	pop	r17
    410c:	ff 90       	pop	r15
    410e:	ef 90       	pop	r14
    4110:	08 95       	ret

00004112 <motorsMoving>:
    4112:	ef 92       	push	r14
    4114:	ff 92       	push	r15
    4116:	0f 93       	push	r16
    4118:	1f 93       	push	r17
    411a:	cf 93       	push	r28
    411c:	df 93       	push	r29
    411e:	cd b7       	in	r28, 0x3d	; 61
    4120:	de b7       	in	r29, 0x3e	; 62
    4122:	ce 57       	subi	r28, 0x7E	; 126
    4124:	d1 09       	sbc	r29, r1
    4126:	cd bf       	out	0x3d, r28	; 61
    4128:	de bf       	out	0x3e, r29	; 62
    412a:	8a e2       	ldi	r24, 0x2A	; 42
    412c:	ef ea       	ldi	r30, 0xAF	; 175
    412e:	f8 eb       	ldi	r31, 0xB8	; 184
    4130:	de 01       	movw	r26, r28
    4132:	11 96       	adiw	r26, 0x01	; 1
    4134:	01 90       	ld	r0, Z+
    4136:	0d 92       	st	X+, r0
    4138:	8a 95       	dec	r24
    413a:	e1 f7       	brne	.-8      	; 0x4134 <motorsMoving+0x22>
    413c:	ef 96       	adiw	r28, 0x3f	; 63
    413e:	1c ae       	std	Y+60, r1	; 0x3c
    4140:	1d ae       	std	Y+61, r1	; 0x3d
    4142:	1e ae       	std	Y+62, r1	; 0x3e
    4144:	1f ae       	std	Y+63, r1	; 0x3f
    4146:	ef 97       	sbiw	r28, 0x3f	; 63
    4148:	00 e0       	ldi	r16, 0x00	; 0
    414a:	10 e0       	ldi	r17, 0x00	; 0
    414c:	31 c0       	rjmp	.+98     	; 0x41b0 <motorsMoving+0x9e>
    414e:	be 01       	movw	r22, r28
    4150:	65 58       	subi	r22, 0x85	; 133
    4152:	7f 4f       	sbci	r23, 0xFF	; 255
    4154:	80 e8       	ldi	r24, 0x80	; 128
    4156:	81 0f       	add	r24, r17
    4158:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_MOTOR_SPEED>
    415c:	83 36       	cpi	r24, 0x63	; 99
    415e:	e1 f4       	brne	.+56     	; 0x4198 <motorsMoving+0x86>
    4160:	1f 92       	push	r1
    4162:	81 e4       	ldi	r24, 0x41	; 65
    4164:	81 0f       	add	r24, r17
    4166:	8f 93       	push	r24
    4168:	ce 01       	movw	r24, r28
    416a:	01 96       	adiw	r24, 0x01	; 1
    416c:	9f 93       	push	r25
    416e:	8f 93       	push	r24
    4170:	7e 01       	movw	r14, r28
    4172:	8b e2       	ldi	r24, 0x2B	; 43
    4174:	e8 0e       	add	r14, r24
    4176:	f1 1c       	adc	r15, r1
    4178:	ff 92       	push	r15
    417a:	ef 92       	push	r14
    417c:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
    4180:	b7 01       	movw	r22, r14
    4182:	86 e3       	ldi	r24, 0x36	; 54
    4184:	91 e0       	ldi	r25, 0x01	; 1
    4186:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
    418a:	0f 90       	pop	r0
    418c:	0f 90       	pop	r0
    418e:	0f 90       	pop	r0
    4190:	0f 90       	pop	r0
    4192:	0f 90       	pop	r0
    4194:	0f 90       	pop	r0
    4196:	0b c0       	rjmp	.+22     	; 0x41ae <motorsMoving+0x9c>
    4198:	ef 96       	adiw	r28, 0x3f	; 63
    419a:	8c ad       	ldd	r24, Y+60	; 0x3c
    419c:	9d ad       	ldd	r25, Y+61	; 0x3d
    419e:	ae ad       	ldd	r26, Y+62	; 0x3e
    41a0:	bf ad       	ldd	r27, Y+63	; 0x3f
    41a2:	ef 97       	sbiw	r28, 0x3f	; 63
    41a4:	89 2b       	or	r24, r25
    41a6:	8a 2b       	or	r24, r26
    41a8:	8b 2b       	or	r24, r27
    41aa:	09 f0       	breq	.+2      	; 0x41ae <motorsMoving+0x9c>
    41ac:	0f 5f       	subi	r16, 0xFF	; 255
    41ae:	1f 5f       	subi	r17, 0xFF	; 255
    41b0:	13 30       	cpi	r17, 0x03	; 3
    41b2:	68 f2       	brcs	.-102    	; 0x414e <motorsMoving+0x3c>
    41b4:	00 23       	and	r16, r16
    41b6:	11 f0       	breq	.+4      	; 0x41bc <motorsMoving+0xaa>
    41b8:	81 e0       	ldi	r24, 0x01	; 1
    41ba:	01 c0       	rjmp	.+2      	; 0x41be <motorsMoving+0xac>
    41bc:	80 e0       	ldi	r24, 0x00	; 0
    41be:	c2 58       	subi	r28, 0x82	; 130
    41c0:	df 4f       	sbci	r29, 0xFF	; 255
    41c2:	cd bf       	out	0x3d, r28	; 61
    41c4:	de bf       	out	0x3e, r29	; 62
    41c6:	df 91       	pop	r29
    41c8:	cf 91       	pop	r28
    41ca:	1f 91       	pop	r17
    41cc:	0f 91       	pop	r16
    41ce:	ff 90       	pop	r15
    41d0:	ef 90       	pop	r14
    41d2:	08 95       	ret

000041d4 <put_FRAM_ENCODERS>:
    41d4:	1f 93       	push	r17
    41d6:	cf 93       	push	r28
    41d8:	df 93       	push	r29
    41da:	cd b7       	in	r28, 0x3d	; 61
    41dc:	de b7       	in	r29, 0x3e	; 62
    41de:	a2 97       	sbiw	r28, 0x22	; 34
    41e0:	cd bf       	out	0x3d, r28	; 61
    41e2:	de bf       	out	0x3e, r29	; 62
    41e4:	86 e0       	ldi	r24, 0x06	; 6
    41e6:	e0 eb       	ldi	r30, 0xB0	; 176
    41e8:	f0 eb       	ldi	r31, 0xB0	; 176
    41ea:	de 01       	movw	r26, r28
    41ec:	59 96       	adiw	r26, 0x19	; 25
    41ee:	01 90       	ld	r0, Z+
    41f0:	0d 92       	st	X+, r0
    41f2:	8a 95       	dec	r24
    41f4:	e1 f7       	brne	.-8      	; 0x41ee <put_FRAM_ENCODERS+0x1a>
    41f6:	10 e0       	ldi	r17, 0x00	; 0
    41f8:	27 c0       	rjmp	.+78     	; 0x4248 <put_FRAM_ENCODERS+0x74>
    41fa:	be 01       	movw	r22, r28
    41fc:	61 5e       	subi	r22, 0xE1	; 225
    41fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4200:	80 e8       	ldi	r24, 0x80	; 128
    4202:	81 0f       	add	r24, r17
    4204:	0e 94 09 1b 	call	0x3612	; 0x3612 <get_MOTOR_ENCODER>
    4208:	83 36       	cpi	r24, 0x63	; 99
    420a:	71 f1       	breq	.+92     	; 0x4268 <put_FRAM_ENCODERS+0x94>
    420c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    420e:	98 a1       	ldd	r25, Y+32	; 0x20
    4210:	29 a1       	ldd	r18, Y+33	; 0x21
    4212:	3a a1       	ldd	r19, Y+34	; 0x22
    4214:	3d 8b       	std	Y+21, r19	; 0x15
    4216:	2e 8b       	std	Y+22, r18	; 0x16
    4218:	9f 8b       	std	Y+23, r25	; 0x17
    421a:	88 8f       	std	Y+24, r24	; 0x18
    421c:	e1 2f       	mov	r30, r17
    421e:	f0 e0       	ldi	r31, 0x00	; 0
    4220:	ee 0f       	add	r30, r30
    4222:	ff 1f       	adc	r31, r31
    4224:	81 e0       	ldi	r24, 0x01	; 1
    4226:	90 e0       	ldi	r25, 0x00	; 0
    4228:	8c 0f       	add	r24, r28
    422a:	9d 1f       	adc	r25, r29
    422c:	e8 0f       	add	r30, r24
    422e:	f9 1f       	adc	r31, r25
    4230:	60 8d       	ldd	r22, Z+24	; 0x18
    4232:	71 8d       	ldd	r23, Z+25	; 0x19
    4234:	24 e0       	ldi	r18, 0x04	; 4
    4236:	ae 01       	movw	r20, r28
    4238:	4b 5e       	subi	r20, 0xEB	; 235
    423a:	5f 4f       	sbci	r21, 0xFF	; 255
    423c:	80 e5       	ldi	r24, 0x50	; 80
    423e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write_FRAM>
    4242:	83 36       	cpi	r24, 0x63	; 99
    4244:	89 f0       	breq	.+34     	; 0x4268 <put_FRAM_ENCODERS+0x94>
    4246:	1f 5f       	subi	r17, 0xFF	; 255
    4248:	13 30       	cpi	r17, 0x03	; 3
    424a:	b8 f2       	brcs	.-82     	; 0x41fa <put_FRAM_ENCODERS+0x26>
    424c:	ce 01       	movw	r24, r28
    424e:	01 96       	adiw	r24, 0x01	; 1
    4250:	0e 94 48 07 	call	0xe90	; 0xe90 <get_time>
    4254:	24 e1       	ldi	r18, 0x14	; 20
    4256:	ae 01       	movw	r20, r28
    4258:	4f 5f       	subi	r20, 0xFF	; 255
    425a:	5f 4f       	sbci	r21, 0xFF	; 255
    425c:	60 e2       	ldi	r22, 0x20	; 32
    425e:	70 e0       	ldi	r23, 0x00	; 0
    4260:	80 e5       	ldi	r24, 0x50	; 80
    4262:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write_FRAM>
    4266:	80 e0       	ldi	r24, 0x00	; 0
    4268:	a2 96       	adiw	r28, 0x22	; 34
    426a:	cd bf       	out	0x3d, r28	; 61
    426c:	de bf       	out	0x3e, r29	; 62
    426e:	df 91       	pop	r29
    4270:	cf 91       	pop	r28
    4272:	1f 91       	pop	r17
    4274:	08 95       	ret

00004276 <put_MOTOR>:
    4276:	8f 92       	push	r8
    4278:	9f 92       	push	r9
    427a:	af 92       	push	r10
    427c:	bf 92       	push	r11
    427e:	cf 92       	push	r12
    4280:	df 92       	push	r13
    4282:	ef 92       	push	r14
    4284:	ff 92       	push	r15
    4286:	0f 93       	push	r16
    4288:	1f 93       	push	r17
    428a:	cf 93       	push	r28
    428c:	df 93       	push	r29
    428e:	cd b7       	in	r28, 0x3d	; 61
    4290:	de b7       	in	r29, 0x3e	; 62
    4292:	c5 59       	subi	r28, 0x95	; 149
    4294:	d1 09       	sbc	r29, r1
    4296:	cd bf       	out	0x3d, r28	; 61
    4298:	de bf       	out	0x3e, r29	; 62
    429a:	a8 2e       	mov	r10, r24
    429c:	b2 2e       	mov	r11, r18
    429e:	cd b6       	in	r12, 0x3d	; 61
    42a0:	de b6       	in	r13, 0x3e	; 62
    42a2:	80 e2       	ldi	r24, 0x20	; 32
    42a4:	e9 ed       	ldi	r30, 0xD9	; 217
    42a6:	f8 eb       	ldi	r31, 0xB8	; 184
    42a8:	de 01       	movw	r26, r28
    42aa:	11 96       	adiw	r26, 0x01	; 1
    42ac:	01 90       	ld	r0, Z+
    42ae:	0d 92       	st	X+, r0
    42b0:	8a 95       	dec	r24
    42b2:	e1 f7       	brne	.-8      	; 0x42ac <put_MOTOR+0x36>
    42b4:	85 e2       	ldi	r24, 0x25	; 37
    42b6:	e9 ef       	ldi	r30, 0xF9	; 249
    42b8:	f8 eb       	ldi	r31, 0xB8	; 184
    42ba:	de 01       	movw	r26, r28
    42bc:	91 96       	adiw	r26, 0x21	; 33
    42be:	01 90       	ld	r0, Z+
    42c0:	0d 92       	st	X+, r0
    42c2:	8a 95       	dec	r24
    42c4:	e1 f7       	brne	.-8      	; 0x42be <put_MOTOR+0x48>
    42c6:	82 2e       	mov	r8, r18
    42c8:	91 2c       	mov	r9, r1
    42ca:	c4 01       	movw	r24, r8
    42cc:	04 96       	adiw	r24, 0x04	; 4
    42ce:	74 01       	movw	r14, r8
    42d0:	23 e0       	ldi	r18, 0x03	; 3
    42d2:	e2 0e       	add	r14, r18
    42d4:	f1 1c       	adc	r15, r1
    42d6:	ad b7       	in	r26, 0x3d	; 61
    42d8:	be b7       	in	r27, 0x3e	; 62
    42da:	a8 1b       	sub	r26, r24
    42dc:	b9 0b       	sbc	r27, r25
    42de:	ad bf       	out	0x3d, r26	; 61
    42e0:	be bf       	out	0x3e, r27	; 62
    42e2:	0d b7       	in	r16, 0x3d	; 61
    42e4:	1e b7       	in	r17, 0x3e	; 62
    42e6:	0f 5f       	subi	r16, 0xFF	; 255
    42e8:	1f 4f       	sbci	r17, 0xFF	; 255
    42ea:	f8 01       	movw	r30, r16
    42ec:	10 92 42 2b 	sts	0x2B42, r1	; 0x802b42 <ser_recv1+0xff>
    42f0:	81 e0       	ldi	r24, 0x01	; 1
    42f2:	80 93 41 2b 	sts	0x2B41, r24	; 0x802b41 <ser_recv1+0xfe>
    42f6:	11 96       	adiw	r26, 0x01	; 1
    42f8:	ac 92       	st	X, r10
    42fa:	61 83       	std	Z+1, r22	; 0x01
    42fc:	60 e0       	ldi	r22, 0x00	; 0
    42fe:	0e c0       	rjmp	.+28     	; 0x431c <put_MOTOR+0xa6>
    4300:	86 2f       	mov	r24, r22
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	9c 01       	movw	r18, r24
    4306:	2e 5f       	subi	r18, 0xFE	; 254
    4308:	3f 4f       	sbci	r19, 0xFF	; 255
    430a:	da 01       	movw	r26, r20
    430c:	a8 0f       	add	r26, r24
    430e:	b9 1f       	adc	r27, r25
    4310:	8c 91       	ld	r24, X
    4312:	df 01       	movw	r26, r30
    4314:	a2 0f       	add	r26, r18
    4316:	b3 1f       	adc	r27, r19
    4318:	8c 93       	st	X, r24
    431a:	6f 5f       	subi	r22, 0xFF	; 255
    431c:	6b 15       	cp	r22, r11
    431e:	80 f3       	brcs	.-32     	; 0x4300 <put_MOTOR+0x8a>
    4320:	b2 e0       	ldi	r27, 0x02	; 2
    4322:	8b 0e       	add	r8, r27
    4324:	91 1c       	adc	r9, r1
    4326:	b4 01       	movw	r22, r8
    4328:	c8 01       	movw	r24, r16
    432a:	0e 94 a4 18 	call	0x3148	; 0x3148 <crc16>
    432e:	d8 01       	movw	r26, r16
    4330:	a8 0d       	add	r26, r8
    4332:	b9 1d       	adc	r27, r9
    4334:	9c 93       	st	X, r25
    4336:	f8 01       	movw	r30, r16
    4338:	ee 0d       	add	r30, r14
    433a:	ff 1d       	adc	r31, r15
    433c:	80 83       	st	Z, r24
    433e:	64 e0       	ldi	r22, 0x04	; 4
    4340:	6b 0d       	add	r22, r11
    4342:	c8 01       	movw	r24, r16
    4344:	0e 94 f2 2d 	call	0x5be4	; 0x5be4 <send_USART1>
    4348:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    434c:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
    4350:	24 c0       	rjmp	.+72     	; 0x439a <put_MOTOR+0x124>
    4352:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    4356:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    435a:	85 36       	cpi	r24, 0x65	; 101
    435c:	91 05       	cpc	r25, r1
    435e:	e0 f0       	brcs	.+56     	; 0x4398 <put_MOTOR+0x122>
    4360:	81 ec       	ldi	r24, 0xC1	; 193
    4362:	8a 0d       	add	r24, r10
    4364:	1f 92       	push	r1
    4366:	8f 93       	push	r24
    4368:	ce 01       	movw	r24, r28
    436a:	01 96       	adiw	r24, 0x01	; 1
    436c:	9f 93       	push	r25
    436e:	8f 93       	push	r24
    4370:	8e 01       	movw	r16, r28
    4372:	0a 5b       	subi	r16, 0xBA	; 186
    4374:	1f 4f       	sbci	r17, 0xFF	; 255
    4376:	1f 93       	push	r17
    4378:	0f 93       	push	r16
    437a:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
    437e:	b8 01       	movw	r22, r16
    4380:	86 e3       	ldi	r24, 0x36	; 54
    4382:	91 e0       	ldi	r25, 0x01	; 1
    4384:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
    4388:	0f 90       	pop	r0
    438a:	0f 90       	pop	r0
    438c:	0f 90       	pop	r0
    438e:	0f 90       	pop	r0
    4390:	0f 90       	pop	r0
    4392:	0f 90       	pop	r0
    4394:	83 e6       	ldi	r24, 0x63	; 99
    4396:	2a c0       	rjmp	.+84     	; 0x43ec <put_MOTOR+0x176>
    4398:	00 00       	nop
    439a:	90 91 42 2b 	lds	r25, 0x2B42	; 0x802b42 <ser_recv1+0xff>
    439e:	80 91 41 2b 	lds	r24, 0x2B41	; 0x802b41 <ser_recv1+0xfe>
    43a2:	98 17       	cp	r25, r24
    43a4:	b0 f2       	brcs	.-84     	; 0x4352 <put_MOTOR+0xdc>
    43a6:	90 91 43 2a 	lds	r25, 0x2A43	; 0x802a43 <ser_recv1>
    43aa:	9f 3f       	cpi	r25, 0xFF	; 255
    43ac:	f1 f0       	breq	.+60     	; 0x43ea <put_MOTOR+0x174>
    43ae:	81 ee       	ldi	r24, 0xE1	; 225
    43b0:	8a 0d       	add	r24, r10
    43b2:	1f 92       	push	r1
    43b4:	9f 93       	push	r25
    43b6:	1f 92       	push	r1
    43b8:	8f 93       	push	r24
    43ba:	ce 01       	movw	r24, r28
    43bc:	81 96       	adiw	r24, 0x21	; 33
    43be:	9f 93       	push	r25
    43c0:	8f 93       	push	r24
    43c2:	8e 01       	movw	r16, r28
    43c4:	0a 5b       	subi	r16, 0xBA	; 186
    43c6:	1f 4f       	sbci	r17, 0xFF	; 255
    43c8:	1f 93       	push	r17
    43ca:	0f 93       	push	r16
    43cc:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
    43d0:	b8 01       	movw	r22, r16
    43d2:	86 e3       	ldi	r24, 0x36	; 54
    43d4:	91 e0       	ldi	r25, 0x01	; 1
    43d6:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
    43da:	2d b7       	in	r18, 0x3d	; 61
    43dc:	3e b7       	in	r19, 0x3e	; 62
    43de:	28 5f       	subi	r18, 0xF8	; 248
    43e0:	3f 4f       	sbci	r19, 0xFF	; 255
    43e2:	2d bf       	out	0x3d, r18	; 61
    43e4:	3e bf       	out	0x3e, r19	; 62
    43e6:	83 e6       	ldi	r24, 0x63	; 99
    43e8:	01 c0       	rjmp	.+2      	; 0x43ec <put_MOTOR+0x176>
    43ea:	80 e0       	ldi	r24, 0x00	; 0
    43ec:	cd be       	out	0x3d, r12	; 61
    43ee:	de be       	out	0x3e, r13	; 62
    43f0:	cb 56       	subi	r28, 0x6B	; 107
    43f2:	df 4f       	sbci	r29, 0xFF	; 255
    43f4:	cd bf       	out	0x3d, r28	; 61
    43f6:	de bf       	out	0x3e, r29	; 62
    43f8:	df 91       	pop	r29
    43fa:	cf 91       	pop	r28
    43fc:	1f 91       	pop	r17
    43fe:	0f 91       	pop	r16
    4400:	ff 90       	pop	r15
    4402:	ef 90       	pop	r14
    4404:	df 90       	pop	r13
    4406:	cf 90       	pop	r12
    4408:	bf 90       	pop	r11
    440a:	af 90       	pop	r10
    440c:	9f 90       	pop	r9
    440e:	8f 90       	pop	r8
    4410:	08 95       	ret

00004412 <move_MOTOR>:
    4412:	bf 92       	push	r11
    4414:	cf 92       	push	r12
    4416:	df 92       	push	r13
    4418:	ef 92       	push	r14
    441a:	ff 92       	push	r15
    441c:	0f 93       	push	r16
    441e:	1f 93       	push	r17
    4420:	cf 93       	push	r28
    4422:	df 93       	push	r29
    4424:	cd b7       	in	r28, 0x3d	; 61
    4426:	de b7       	in	r29, 0x3e	; 62
    4428:	c7 58       	subi	r28, 0x87	; 135
    442a:	d1 09       	sbc	r29, r1
    442c:	cd bf       	out	0x3d, r28	; 61
    442e:	de bf       	out	0x3e, r29	; 62
    4430:	18 2f       	mov	r17, r24
    4432:	6a 01       	movw	r12, r20
    4434:	7b 01       	movw	r14, r22
    4436:	82 e2       	ldi	r24, 0x22	; 34
    4438:	ee e1       	ldi	r30, 0x1E	; 30
    443a:	f9 eb       	ldi	r31, 0xB9	; 185
    443c:	de 01       	movw	r26, r28
    443e:	11 96       	adiw	r26, 0x01	; 1
    4440:	01 90       	ld	r0, Z+
    4442:	0d 92       	st	X+, r0
    4444:	8a 95       	dec	r24
    4446:	e1 f7       	brne	.-8      	; 0x4440 <move_MOTOR+0x2e>
    4448:	68 94       	set
    444a:	bb 24       	eor	r11, r11
    444c:	b7 f8       	bld	r11, 7
    444e:	b1 0e       	add	r11, r17
    4450:	be 01       	movw	r22, r28
    4452:	6c 57       	subi	r22, 0x7C	; 124
    4454:	7f 4f       	sbci	r23, 0xFF	; 255
    4456:	81 2f       	mov	r24, r17
    4458:	0e 94 09 1b 	call	0x3612	; 0x3612 <get_MOTOR_ENCODER>
    445c:	cc 57       	subi	r28, 0x7C	; 124
    445e:	df 4f       	sbci	r29, 0xFF	; 255
    4460:	88 81       	ld	r24, Y
    4462:	99 81       	ldd	r25, Y+1	; 0x01
    4464:	aa 81       	ldd	r26, Y+2	; 0x02
    4466:	bb 81       	ldd	r27, Y+3	; 0x03
    4468:	c4 58       	subi	r28, 0x84	; 132
    446a:	d0 40       	sbci	r29, 0x00	; 0
    446c:	8c 15       	cp	r24, r12
    446e:	9d 05       	cpc	r25, r13
    4470:	ae 05       	cpc	r26, r14
    4472:	bf 05       	cpc	r27, r15
    4474:	09 f4       	brne	.+2      	; 0x4478 <move_MOTOR+0x66>
    4476:	84 c0       	rjmp	.+264    	; 0x4580 <move_MOTOR+0x16e>
    4478:	e4 96       	adiw	r28, 0x34	; 52
    447a:	1f ae       	std	Y+63, r1	; 0x3f
    447c:	e4 97       	sbiw	r28, 0x34	; 52
    447e:	e5 96       	adiw	r28, 0x35	; 53
    4480:	1f ae       	std	Y+63, r1	; 0x3f
    4482:	e5 97       	sbiw	r28, 0x35	; 53
    4484:	37 e3       	ldi	r19, 0x37	; 55
    4486:	e6 96       	adiw	r28, 0x36	; 54
    4488:	3f af       	std	Y+63, r19	; 0x3f
    448a:	e6 97       	sbiw	r28, 0x36	; 54
    448c:	2a e4       	ldi	r18, 0x4A	; 74
    448e:	e7 96       	adiw	r28, 0x37	; 55
    4490:	2f af       	std	Y+63, r18	; 0x3f
    4492:	e7 97       	sbiw	r28, 0x37	; 55
    4494:	e8 96       	adiw	r28, 0x38	; 56
    4496:	1f ae       	std	Y+63, r1	; 0x3f
    4498:	e8 97       	sbiw	r28, 0x38	; 56
    449a:	e9 96       	adiw	r28, 0x39	; 57
    449c:	1f ae       	std	Y+63, r1	; 0x3f
    449e:	e9 97       	sbiw	r28, 0x39	; 57
    44a0:	4b e1       	ldi	r20, 0x1B	; 27
    44a2:	ea 96       	adiw	r28, 0x3a	; 58
    44a4:	4f af       	std	Y+63, r20	; 0x3f
    44a6:	ea 97       	sbiw	r28, 0x3a	; 58
    44a8:	45 ea       	ldi	r20, 0xA5	; 165
    44aa:	eb 96       	adiw	r28, 0x3b	; 59
    44ac:	4f af       	std	Y+63, r20	; 0x3f
    44ae:	eb 97       	sbiw	r28, 0x3b	; 59
    44b0:	ec 96       	adiw	r28, 0x3c	; 60
    44b2:	1f ae       	std	Y+63, r1	; 0x3f
    44b4:	ec 97       	sbiw	r28, 0x3c	; 60
    44b6:	ed 96       	adiw	r28, 0x3d	; 61
    44b8:	1f ae       	std	Y+63, r1	; 0x3f
    44ba:	ed 97       	sbiw	r28, 0x3d	; 61
    44bc:	ee 96       	adiw	r28, 0x3e	; 62
    44be:	3f af       	std	Y+63, r19	; 0x3f
    44c0:	ee 97       	sbiw	r28, 0x3e	; 62
    44c2:	ef 96       	adiw	r28, 0x3f	; 63
    44c4:	2f af       	std	Y+63, r18	; 0x3f
    44c6:	ef 97       	sbiw	r28, 0x3f	; 63
    44c8:	c1 58       	subi	r28, 0x81	; 129
    44ca:	df 4f       	sbci	r29, 0xFF	; 255
    44cc:	f8 82       	st	Y, r15
    44ce:	cf 57       	subi	r28, 0x7F	; 127
    44d0:	d0 40       	sbci	r29, 0x00	; 0
    44d2:	c0 58       	subi	r28, 0x80	; 128
    44d4:	df 4f       	sbci	r29, 0xFF	; 255
    44d6:	e8 82       	st	Y, r14
    44d8:	c0 58       	subi	r28, 0x80	; 128
    44da:	d0 40       	sbci	r29, 0x00	; 0
    44dc:	cf 57       	subi	r28, 0x7F	; 127
    44de:	df 4f       	sbci	r29, 0xFF	; 255
    44e0:	d8 82       	st	Y, r13
    44e2:	c1 58       	subi	r28, 0x81	; 129
    44e4:	d0 40       	sbci	r29, 0x00	; 0
    44e6:	ce 57       	subi	r28, 0x7E	; 126
    44e8:	df 4f       	sbci	r29, 0xFF	; 255
    44ea:	c8 82       	st	Y, r12
    44ec:	c2 58       	subi	r28, 0x82	; 130
    44ee:	d0 40       	sbci	r29, 0x00	; 0
    44f0:	21 e0       	ldi	r18, 0x01	; 1
    44f2:	cd 57       	subi	r28, 0x7D	; 125
    44f4:	df 4f       	sbci	r29, 0xFF	; 255
    44f6:	28 83       	st	Y, r18
    44f8:	c3 58       	subi	r28, 0x83	; 131
    44fa:	d0 40       	sbci	r29, 0x00	; 0
    44fc:	8c 15       	cp	r24, r12
    44fe:	9d 05       	cpc	r25, r13
    4500:	ae 05       	cpc	r26, r14
    4502:	bf 05       	cpc	r27, r15
    4504:	3c f4       	brge	.+14     	; 0x4514 <move_MOTOR+0x102>
    4506:	eb 2d       	mov	r30, r11
    4508:	f0 e0       	ldi	r31, 0x00	; 0
    450a:	e3 5c       	subi	r30, 0xC3	; 195
    450c:	f5 4d       	sbci	r31, 0xD5	; 213
    450e:	81 e0       	ldi	r24, 0x01	; 1
    4510:	80 83       	st	Z, r24
    4512:	0a c0       	rjmp	.+20     	; 0x4528 <move_MOTOR+0x116>
    4514:	c8 16       	cp	r12, r24
    4516:	d9 06       	cpc	r13, r25
    4518:	ea 06       	cpc	r14, r26
    451a:	fb 06       	cpc	r15, r27
    451c:	2c f4       	brge	.+10     	; 0x4528 <move_MOTOR+0x116>
    451e:	eb 2d       	mov	r30, r11
    4520:	f0 e0       	ldi	r31, 0x00	; 0
    4522:	e3 5c       	subi	r30, 0xC3	; 195
    4524:	f5 4d       	sbci	r31, 0xD5	; 213
    4526:	10 82       	st	Z, r1
    4528:	21 e1       	ldi	r18, 0x11	; 17
    452a:	ae 01       	movw	r20, r28
    452c:	4d 58       	subi	r20, 0x8D	; 141
    452e:	5f 4f       	sbci	r21, 0xFF	; 255
    4530:	61 e4       	ldi	r22, 0x41	; 65
    4532:	81 2f       	mov	r24, r17
    4534:	0e 94 3b 21 	call	0x4276	; 0x4276 <put_MOTOR>
    4538:	08 2f       	mov	r16, r24
    453a:	83 36       	cpi	r24, 0x63	; 99
    453c:	19 f5       	brne	.+70     	; 0x4584 <move_MOTOR+0x172>
    453e:	eb 2d       	mov	r30, r11
    4540:	f0 e0       	ldi	r31, 0x00	; 0
    4542:	e3 5c       	subi	r30, 0xC3	; 195
    4544:	f5 4d       	sbci	r31, 0xD5	; 213
    4546:	82 e0       	ldi	r24, 0x02	; 2
    4548:	80 83       	st	Z, r24
    454a:	1f 53       	subi	r17, 0x3F	; 63
    454c:	1f 92       	push	r1
    454e:	1f 93       	push	r17
    4550:	ce 01       	movw	r24, r28
    4552:	01 96       	adiw	r24, 0x01	; 1
    4554:	9f 93       	push	r25
    4556:	8f 93       	push	r24
    4558:	7e 01       	movw	r14, r28
    455a:	83 e2       	ldi	r24, 0x23	; 35
    455c:	e8 0e       	add	r14, r24
    455e:	f1 1c       	adc	r15, r1
    4560:	ff 92       	push	r15
    4562:	ef 92       	push	r14
    4564:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
    4568:	b7 01       	movw	r22, r14
    456a:	86 e3       	ldi	r24, 0x36	; 54
    456c:	91 e0       	ldi	r25, 0x01	; 1
    456e:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
    4572:	0f 90       	pop	r0
    4574:	0f 90       	pop	r0
    4576:	0f 90       	pop	r0
    4578:	0f 90       	pop	r0
    457a:	0f 90       	pop	r0
    457c:	0f 90       	pop	r0
    457e:	03 c0       	rjmp	.+6      	; 0x4586 <move_MOTOR+0x174>
    4580:	00 e0       	ldi	r16, 0x00	; 0
    4582:	01 c0       	rjmp	.+2      	; 0x4586 <move_MOTOR+0x174>
    4584:	00 e0       	ldi	r16, 0x00	; 0
    4586:	80 2f       	mov	r24, r16
    4588:	c9 57       	subi	r28, 0x79	; 121
    458a:	df 4f       	sbci	r29, 0xFF	; 255
    458c:	cd bf       	out	0x3d, r28	; 61
    458e:	de bf       	out	0x3e, r29	; 62
    4590:	df 91       	pop	r29
    4592:	cf 91       	pop	r28
    4594:	1f 91       	pop	r17
    4596:	0f 91       	pop	r16
    4598:	ff 90       	pop	r15
    459a:	ef 90       	pop	r14
    459c:	df 90       	pop	r13
    459e:	cf 90       	pop	r12
    45a0:	bf 90       	pop	r11
    45a2:	08 95       	ret

000045a4 <move_MOTORS_PISTON>:

uint8_t move_MOTORS_PISTON(int32_t deltaValue)
{
    45a4:	8f 92       	push	r8
    45a6:	9f 92       	push	r9
    45a8:	af 92       	push	r10
    45aa:	bf 92       	push	r11
    45ac:	df 92       	push	r13
    45ae:	ef 92       	push	r14
    45b0:	ff 92       	push	r15
    45b2:	0f 93       	push	r16
    45b4:	1f 93       	push	r17
    45b6:	cf 93       	push	r28
    45b8:	df 93       	push	r29
    45ba:	cd b7       	in	r28, 0x3d	; 61
    45bc:	de b7       	in	r29, 0x3e	; 62
    45be:	c5 5c       	subi	r28, 0xC5	; 197
    45c0:	d1 09       	sbc	r29, r1
    45c2:	cd bf       	out	0x3d, r28	; 61
    45c4:	de bf       	out	0x3e, r29	; 62
    45c6:	4b 01       	movw	r8, r22
    45c8:	5c 01       	movw	r10, r24

	char strbuf[80];
	uint8_t i, mtraddr;
	int32_t curPos[3], newPos[3];
	const char fmt0[] = "move_MOTORS_PISTON: get_MOTOR_ENCODER error on %c";
    45ca:	82 e3       	ldi	r24, 0x32	; 50
    45cc:	e5 ed       	ldi	r30, 0xD5	; 213
    45ce:	f9 eb       	ldi	r31, 0xB9	; 185
    45d0:	de 01       	movw	r26, r28
    45d2:	a7 59       	subi	r26, 0x97	; 151
    45d4:	bf 4f       	sbci	r27, 0xFF	; 255
    45d6:	01 90       	ld	r0, Z+
    45d8:	0d 92       	st	X+, r0
    45da:	8a 95       	dec	r24
    45dc:	e1 f7       	brne	.-8      	; 0x45d6 <move_MOTORS_PISTON+0x32>
	const char fmt1[] = "move_MOTORS_PISTON: move_MOTOR error on %c";
    45de:	8b e2       	ldi	r24, 0x2B	; 43
    45e0:	e7 e0       	ldi	r30, 0x07	; 7
    45e2:	fa eb       	ldi	r31, 0xBA	; 186
    45e4:	de 01       	movw	r26, r28
    45e6:	a5 56       	subi	r26, 0x65	; 101
    45e8:	bf 4f       	sbci	r27, 0xFF	; 255
    45ea:	01 90       	ld	r0, Z+
    45ec:	0d 92       	st	X+, r0
    45ee:	8a 95       	dec	r24
    45f0:	e1 f7       	brne	.-8      	; 0x45ea <move_MOTORS_PISTON+0x46>

	for (i = 0; i < NMOTORS; i++) {
    45f2:	f1 2c       	mov	r15, r1
    45f4:	52 c0       	rjmp	.+164    	; 0x469a <move_MOTORS_PISTON+0xf6>
		mtraddr = i + MOTOR_A;
    45f6:	68 94       	set
    45f8:	dd 24       	eor	r13, r13
    45fa:	d7 f8       	bld	r13, 7
    45fc:	df 0c       	add	r13, r15
		if (get_MOTOR_ENCODER(mtraddr, &curPos[i]) == ERROR) {
    45fe:	0f 2d       	mov	r16, r15
    4600:	10 e0       	ldi	r17, 0x00	; 0
    4602:	b8 01       	movw	r22, r16
    4604:	66 0f       	add	r22, r22
    4606:	77 1f       	adc	r23, r23
    4608:	66 0f       	add	r22, r22
    460a:	77 1f       	adc	r23, r23
    460c:	81 e5       	ldi	r24, 0x51	; 81
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	8c 0f       	add	r24, r28
    4612:	9d 1f       	adc	r25, r29
    4614:	68 0f       	add	r22, r24
    4616:	79 1f       	adc	r23, r25
    4618:	8d 2d       	mov	r24, r13
    461a:	0e 94 09 1b 	call	0x3612	; 0x3612 <get_MOTOR_ENCODER>
    461e:	e8 2e       	mov	r14, r24
    4620:	93 e6       	ldi	r25, 0x63	; 99
    4622:	89 13       	cpse	r24, r25
    4624:	1d c0       	rjmp	.+58     	; 0x4660 <move_MOTORS_PISTON+0xbc>
			sprintf(strbuf, fmt0, mtraddr-63);
    4626:	8d 2d       	mov	r24, r13
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	cf 97       	sbiw	r24, 0x3f	; 63
    462c:	9f 93       	push	r25
    462e:	8f 93       	push	r24
    4630:	ce 01       	movw	r24, r28
    4632:	87 59       	subi	r24, 0x97	; 151
    4634:	9f 4f       	sbci	r25, 0xFF	; 255
    4636:	9f 93       	push	r25
    4638:	8f 93       	push	r24
    463a:	8e 01       	movw	r16, r28
    463c:	0f 5f       	subi	r16, 0xFF	; 255
    463e:	1f 4f       	sbci	r17, 0xFF	; 255
    4640:	1f 93       	push	r17
    4642:	0f 93       	push	r16
    4644:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			printError(ERR_MTR, strbuf);
    4648:	b8 01       	movw	r22, r16
    464a:	86 e3       	ldi	r24, 0x36	; 54
    464c:	91 e0       	ldi	r25, 0x01	; 1
    464e:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
			return(ERROR);
    4652:	0f 90       	pop	r0
    4654:	0f 90       	pop	r0
    4656:	0f 90       	pop	r0
    4658:	0f 90       	pop	r0
    465a:	0f 90       	pop	r0
    465c:	0f 90       	pop	r0
    465e:	8c c0       	rjmp	.+280    	; 0x4778 <move_MOTORS_PISTON+0x1d4>
		}
		newPos[i] = curPos[i] + deltaValue;
    4660:	00 0f       	add	r16, r16
    4662:	11 1f       	adc	r17, r17
    4664:	00 0f       	add	r16, r16
    4666:	11 1f       	adc	r17, r17
    4668:	e1 e5       	ldi	r30, 0x51	; 81
    466a:	f0 e0       	ldi	r31, 0x00	; 0
    466c:	ec 0f       	add	r30, r28
    466e:	fd 1f       	adc	r31, r29
    4670:	e0 0f       	add	r30, r16
    4672:	f1 1f       	adc	r31, r17
    4674:	80 81       	ld	r24, Z
    4676:	91 81       	ldd	r25, Z+1	; 0x01
    4678:	a2 81       	ldd	r26, Z+2	; 0x02
    467a:	b3 81       	ldd	r27, Z+3	; 0x03
    467c:	88 0d       	add	r24, r8
    467e:	99 1d       	adc	r25, r9
    4680:	aa 1d       	adc	r26, r10
    4682:	bb 1d       	adc	r27, r11
    4684:	ed e5       	ldi	r30, 0x5D	; 93
    4686:	f0 e0       	ldi	r31, 0x00	; 0
    4688:	ec 0f       	add	r30, r28
    468a:	fd 1f       	adc	r31, r29
    468c:	e0 0f       	add	r30, r16
    468e:	f1 1f       	adc	r31, r17
    4690:	80 83       	st	Z, r24
    4692:	91 83       	std	Z+1, r25	; 0x01
    4694:	a2 83       	std	Z+2, r26	; 0x02
    4696:	b3 83       	std	Z+3, r27	; 0x03
	uint8_t i, mtraddr;
	int32_t curPos[3], newPos[3];
	const char fmt0[] = "move_MOTORS_PISTON: get_MOTOR_ENCODER error on %c";
	const char fmt1[] = "move_MOTORS_PISTON: move_MOTOR error on %c";

	for (i = 0; i < NMOTORS; i++) {
    4698:	f3 94       	inc	r15
    469a:	82 e0       	ldi	r24, 0x02	; 2
    469c:	8f 15       	cp	r24, r15
    469e:	08 f0       	brcs	.+2      	; 0x46a2 <move_MOTORS_PISTON+0xfe>
    46a0:	aa cf       	rjmp	.-172    	; 0x45f6 <move_MOTORS_PISTON+0x52>
    46a2:	f1 2c       	mov	r15, r1
    46a4:	64 c0       	rjmp	.+200    	; 0x476e <move_MOTORS_PISTON+0x1ca>
		}
		newPos[i] = curPos[i] + deltaValue;
	}

	for (i = 0; i < NMOTORS; i++) {
		mtraddr = i + MOTOR_A;
    46a6:	68 94       	set
    46a8:	dd 24       	eor	r13, r13
    46aa:	d7 f8       	bld	r13, 7
    46ac:	df 0c       	add	r13, r15
		if (move_MOTOR(mtraddr, newPos[i]) == ERROR) {
    46ae:	0f 2d       	mov	r16, r15
    46b0:	10 e0       	ldi	r17, 0x00	; 0
    46b2:	f8 01       	movw	r30, r16
    46b4:	ee 0f       	add	r30, r30
    46b6:	ff 1f       	adc	r31, r31
    46b8:	ee 0f       	add	r30, r30
    46ba:	ff 1f       	adc	r31, r31
    46bc:	8d e5       	ldi	r24, 0x5D	; 93
    46be:	90 e0       	ldi	r25, 0x00	; 0
    46c0:	8c 0f       	add	r24, r28
    46c2:	9d 1f       	adc	r25, r29
    46c4:	e8 0f       	add	r30, r24
    46c6:	f9 1f       	adc	r31, r25
    46c8:	80 80       	ld	r8, Z
    46ca:	91 80       	ldd	r9, Z+1	; 0x01
    46cc:	a2 80       	ldd	r10, Z+2	; 0x02
    46ce:	b3 80       	ldd	r11, Z+3	; 0x03
    46d0:	b5 01       	movw	r22, r10
    46d2:	a4 01       	movw	r20, r8
    46d4:	8d 2d       	mov	r24, r13
    46d6:	0e 94 09 22 	call	0x4412	; 0x4412 <move_MOTOR>
    46da:	e8 2e       	mov	r14, r24
    46dc:	93 e6       	ldi	r25, 0x63	; 99
    46de:	89 13       	cpse	r24, r25
    46e0:	1d c0       	rjmp	.+58     	; 0x471c <move_MOTORS_PISTON+0x178>
			sprintf(strbuf, fmt1, mtraddr-63);
    46e2:	8d 2d       	mov	r24, r13
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	cf 97       	sbiw	r24, 0x3f	; 63
    46e8:	9f 93       	push	r25
    46ea:	8f 93       	push	r24
    46ec:	ce 01       	movw	r24, r28
    46ee:	85 56       	subi	r24, 0x65	; 101
    46f0:	9f 4f       	sbci	r25, 0xFF	; 255
    46f2:	9f 93       	push	r25
    46f4:	8f 93       	push	r24
    46f6:	8e 01       	movw	r16, r28
    46f8:	0f 5f       	subi	r16, 0xFF	; 255
    46fa:	1f 4f       	sbci	r17, 0xFF	; 255
    46fc:	1f 93       	push	r17
    46fe:	0f 93       	push	r16
    4700:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			printError(ERR_MTR, strbuf);
    4704:	b8 01       	movw	r22, r16
    4706:	86 e3       	ldi	r24, 0x36	; 54
    4708:	91 e0       	ldi	r25, 0x01	; 1
    470a:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
			return(ERROR);
    470e:	0f 90       	pop	r0
    4710:	0f 90       	pop	r0
    4712:	0f 90       	pop	r0
    4714:	0f 90       	pop	r0
    4716:	0f 90       	pop	r0
    4718:	0f 90       	pop	r0
    471a:	2e c0       	rjmp	.+92     	; 0x4778 <move_MOTORS_PISTON+0x1d4>
		}
		motorDir[i] = MTRDIRUNKNOWN;
    471c:	82 e0       	ldi	r24, 0x02	; 2
    471e:	f8 01       	movw	r30, r16
    4720:	e3 5c       	subi	r30, 0xC3	; 195
    4722:	f5 4d       	sbci	r31, 0xD5	; 213
    4724:	80 83       	st	Z, r24
		if (newPos[i] > curPos[i]) {
    4726:	f8 01       	movw	r30, r16
    4728:	ee 0f       	add	r30, r30
    472a:	ff 1f       	adc	r31, r31
    472c:	ee 0f       	add	r30, r30
    472e:	ff 1f       	adc	r31, r31
    4730:	81 e5       	ldi	r24, 0x51	; 81
    4732:	90 e0       	ldi	r25, 0x00	; 0
    4734:	8c 0f       	add	r24, r28
    4736:	9d 1f       	adc	r25, r29
    4738:	e8 0f       	add	r30, r24
    473a:	f9 1f       	adc	r31, r25
    473c:	80 81       	ld	r24, Z
    473e:	91 81       	ldd	r25, Z+1	; 0x01
    4740:	a2 81       	ldd	r26, Z+2	; 0x02
    4742:	b3 81       	ldd	r27, Z+3	; 0x03
    4744:	88 15       	cp	r24, r8
    4746:	99 05       	cpc	r25, r9
    4748:	aa 05       	cpc	r26, r10
    474a:	bb 05       	cpc	r27, r11
    474c:	34 f4       	brge	.+12     	; 0x475a <move_MOTORS_PISTON+0x1b6>
			motorDir[i] = MTRDIRPOSITIVE;
    474e:	f8 01       	movw	r30, r16
    4750:	e3 5c       	subi	r30, 0xC3	; 195
    4752:	f5 4d       	sbci	r31, 0xD5	; 213
    4754:	81 e0       	ldi	r24, 0x01	; 1
    4756:	80 83       	st	Z, r24
    4758:	09 c0       	rjmp	.+18     	; 0x476c <move_MOTORS_PISTON+0x1c8>
		} else if (newPos[i] < curPos[i]) {
    475a:	88 16       	cp	r8, r24
    475c:	99 06       	cpc	r9, r25
    475e:	aa 06       	cpc	r10, r26
    4760:	bb 06       	cpc	r11, r27
    4762:	24 f4       	brge	.+8      	; 0x476c <move_MOTORS_PISTON+0x1c8>
			motorDir[i] = MTRDIRNEGATIVE;
    4764:	f8 01       	movw	r30, r16
    4766:	e3 5c       	subi	r30, 0xC3	; 195
    4768:	f5 4d       	sbci	r31, 0xD5	; 213
    476a:	10 82       	st	Z, r1
			return(ERROR);
		}
		newPos[i] = curPos[i] + deltaValue;
	}

	for (i = 0; i < NMOTORS; i++) {
    476c:	f3 94       	inc	r15
    476e:	92 e0       	ldi	r25, 0x02	; 2
    4770:	9f 15       	cp	r25, r15
    4772:	08 f0       	brcs	.+2      	; 0x4776 <move_MOTORS_PISTON+0x1d2>
    4774:	98 cf       	rjmp	.-208    	; 0x46a6 <move_MOTORS_PISTON+0x102>
		} else if (newPos[i] < curPos[i]) {
			motorDir[i] = MTRDIRNEGATIVE;
		}
	}

	return(NOERROR);
    4776:	e1 2c       	mov	r14, r1

}
    4778:	8e 2d       	mov	r24, r14
    477a:	cb 53       	subi	r28, 0x3B	; 59
    477c:	df 4f       	sbci	r29, 0xFF	; 255
    477e:	cd bf       	out	0x3d, r28	; 61
    4780:	de bf       	out	0x3e, r29	; 62
    4782:	df 91       	pop	r29
    4784:	cf 91       	pop	r28
    4786:	1f 91       	pop	r17
    4788:	0f 91       	pop	r16
    478a:	ff 90       	pop	r15
    478c:	ef 90       	pop	r14
    478e:	df 90       	pop	r13
    4790:	bf 90       	pop	r11
    4792:	af 90       	pop	r10
    4794:	9f 90       	pop	r9
    4796:	8f 90       	pop	r8
    4798:	08 95       	ret

0000479a <move_MOTOR_CMD>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR_CMD(uint8_t cstack)
{
    479a:	8f 92       	push	r8
    479c:	9f 92       	push	r9
    479e:	af 92       	push	r10
    47a0:	bf 92       	push	r11
    47a2:	ef 92       	push	r14
    47a4:	ff 92       	push	r15
    47a6:	0f 93       	push	r16
    47a8:	1f 93       	push	r17
    47aa:	cf 93       	push	r28
    47ac:	df 93       	push	r29
    47ae:	cd b7       	in	r28, 0x3d	; 61
    47b0:	de b7       	in	r29, 0x3e	; 62
    47b2:	c4 5e       	subi	r28, 0xE4	; 228
    47b4:	d1 09       	sbc	r29, r1
    47b6:	cd bf       	out	0x3d, r28	; 61
    47b8:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	uint8_t motor, controller;
	int32_t newPosition, currentPosition, deltaPos;
	const char fmt0[] = "move_MOTOR_CMD: get_MOTOR_ENCODER error";
    47ba:	98 e2       	ldi	r25, 0x28	; 40
    47bc:	e2 e3       	ldi	r30, 0x32	; 50
    47be:	fa eb       	ldi	r31, 0xBA	; 186
    47c0:	de 01       	movw	r26, r28
    47c2:	ab 5a       	subi	r26, 0xAB	; 171
    47c4:	bf 4f       	sbci	r27, 0xFF	; 255
    47c6:	01 90       	ld	r0, Z+
    47c8:	0d 92       	st	X+, r0
    47ca:	9a 95       	dec	r25
    47cc:	e1 f7       	brne	.-8      	; 0x47c6 <move_MOTOR_CMD+0x2c>
	const char fmt1[] = "move_MOTOR_CMD: unknown motor";
    47ce:	9e e1       	ldi	r25, 0x1E	; 30
    47d0:	ea e5       	ldi	r30, 0x5A	; 90
    47d2:	fa eb       	ldi	r31, 0xBA	; 186
    47d4:	de 01       	movw	r26, r28
    47d6:	a3 58       	subi	r26, 0x83	; 131
    47d8:	bf 4f       	sbci	r27, 0xFF	; 255
    47da:	01 90       	ld	r0, Z+
    47dc:	0d 92       	st	X+, r0
    47de:	9a 95       	dec	r25
    47e0:	e1 f7       	brne	.-8      	; 0x47da <move_MOTOR_CMD+0x40>
	const char fmt2[] = "move_MOTOR_CMD: move_MOTOR error";
    47e2:	91 e2       	ldi	r25, 0x21	; 33
    47e4:	e8 e7       	ldi	r30, 0x78	; 120
    47e6:	fa eb       	ldi	r31, 0xBA	; 186
    47e8:	de 01       	movw	r26, r28
    47ea:	a5 56       	subi	r26, 0x65	; 101
    47ec:	bf 4f       	sbci	r27, 0xFF	; 255
    47ee:	01 90       	ld	r0, Z+
    47f0:	0d 92       	st	X+, r0
    47f2:	9a 95       	dec	r25
    47f4:	e1 f7       	brne	.-8      	; 0x47ee <move_MOTOR_CMD+0x54>
	const char fmt3[] = "move_MOTOR_CMD: move_MOTORS_PISTON error";
    47f6:	99 e2       	ldi	r25, 0x29	; 41
    47f8:	e9 e9       	ldi	r30, 0x99	; 153
    47fa:	fa eb       	ldi	r31, 0xBA	; 186
    47fc:	de 01       	movw	r26, r28
    47fe:	a4 54       	subi	r26, 0x44	; 68
    4800:	bf 4f       	sbci	r27, 0xFF	; 255
    4802:	01 90       	ld	r0, Z+
    4804:	0d 92       	st	X+, r0
    4806:	9a 95       	dec	r25
    4808:	e1 f7       	brne	.-8      	; 0x4802 <move_MOTOR_CMD+0x68>

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    480a:	08 2f       	mov	r16, r24
    480c:	10 e0       	ldi	r17, 0x00	; 0
    480e:	84 e3       	ldi	r24, 0x34	; 52
    4810:	80 9f       	mul	r24, r16
    4812:	f0 01       	movw	r30, r0
    4814:	81 9f       	mul	r24, r17
    4816:	f0 0d       	add	r31, r0
    4818:	11 24       	eor	r1, r1
    481a:	e1 5f       	subi	r30, 0xF1	; 241
    481c:	f7 4d       	sbci	r31, 0xD7	; 215
    481e:	82 81       	ldd	r24, Z+2	; 0x02
    4820:	88 23       	and	r24, r24
    4822:	09 f4       	brne	.+2      	; 0x4826 <move_MOTOR_CMD+0x8c>
    4824:	1c c1       	rjmp	.+568    	; 0x4a5e <move_MOTOR_CMD+0x2c4>
		return(NOERROR);
	}

	motor = pcmd[cstack].cobject;
    4826:	84 e3       	ldi	r24, 0x34	; 52
    4828:	80 9f       	mul	r24, r16
    482a:	f0 01       	movw	r30, r0
    482c:	81 9f       	mul	r24, r17
    482e:	f0 0d       	add	r31, r0
    4830:	11 24       	eor	r1, r1
    4832:	e1 5f       	subi	r30, 0xF1	; 241
    4834:	f7 4d       	sbci	r31, 0xD7	; 215
    4836:	81 81       	ldd	r24, Z+1	; 0x01

	switch(motor) {
    4838:	84 36       	cpi	r24, 0x64	; 100
    483a:	40 f4       	brcc	.+16     	; 0x484c <move_MOTOR_CMD+0xb2>
    483c:	81 36       	cpi	r24, 0x61	; 97
    483e:	08 f0       	brcs	.+2      	; 0x4842 <move_MOTOR_CMD+0xa8>
    4840:	41 c0       	rjmp	.+130    	; 0x48c4 <move_MOTOR_CMD+0x12a>
    4842:	9f eb       	ldi	r25, 0xBF	; 191
    4844:	98 0f       	add	r25, r24
    4846:	93 30       	cpi	r25, 0x03	; 3
    4848:	28 f0       	brcs	.+10     	; 0x4854 <move_MOTOR_CMD+0xba>
    484a:	aa c0       	rjmp	.+340    	; 0x49a0 <move_MOTOR_CMD+0x206>
    484c:	84 36       	cpi	r24, 0x64	; 100
    484e:	09 f4       	brne	.+2      	; 0x4852 <move_MOTOR_CMD+0xb8>
    4850:	7b c0       	rjmp	.+246    	; 0x4948 <move_MOTOR_CMD+0x1ae>
    4852:	a6 c0       	rjmp	.+332    	; 0x49a0 <move_MOTOR_CMD+0x206>

		case 'A':			// Move absolute
		case 'B':
		case 'C':
			controller = motor + 63;
    4854:	0f 2e       	mov	r0, r31
    4856:	ff e3       	ldi	r31, 0x3F	; 63
    4858:	ef 2e       	mov	r14, r31
    485a:	f0 2d       	mov	r31, r0
    485c:	e8 0e       	add	r14, r24
			if (get_MOTOR_ENCODER(controller, &currentPosition) == ERROR) {
    485e:	be 01       	movw	r22, r28
    4860:	6f 5a       	subi	r22, 0xAF	; 175
    4862:	7f 4f       	sbci	r23, 0xFF	; 255
    4864:	8e 2d       	mov	r24, r14
    4866:	0e 94 09 1b 	call	0x3612	; 0x3612 <get_MOTOR_ENCODER>
    486a:	f8 2e       	mov	r15, r24
    486c:	83 e6       	ldi	r24, 0x63	; 99
    486e:	f8 12       	cpse	r15, r24
    4870:	16 c0       	rjmp	.+44     	; 0x489e <move_MOTOR_CMD+0x104>
				sprintf(strbuf, fmt0);
    4872:	ce 01       	movw	r24, r28
    4874:	8b 5a       	subi	r24, 0xAB	; 171
    4876:	9f 4f       	sbci	r25, 0xFF	; 255
    4878:	9f 93       	push	r25
    487a:	8f 93       	push	r24
    487c:	8e 01       	movw	r16, r28
    487e:	0f 5f       	subi	r16, 0xFF	; 255
    4880:	1f 4f       	sbci	r17, 0xFF	; 255
    4882:	1f 93       	push	r17
    4884:	0f 93       	push	r16
    4886:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
				printError(ERR_MTR_ENC_VAL, strbuf);
    488a:	b8 01       	movw	r22, r16
    488c:	85 e3       	ldi	r24, 0x35	; 53
    488e:	91 e0       	ldi	r25, 0x01	; 1
    4890:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				return(ERROR);
    4894:	0f 90       	pop	r0
    4896:	0f 90       	pop	r0
    4898:	0f 90       	pop	r0
    489a:	0f 90       	pop	r0
    489c:	e5 c0       	rjmp	.+458    	; 0x4a68 <move_MOTOR_CMD+0x2ce>
			}
			newPosition = (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    489e:	24 e3       	ldi	r18, 0x34	; 52
    48a0:	20 9f       	mul	r18, r16
    48a2:	c0 01       	movw	r24, r0
    48a4:	21 9f       	mul	r18, r17
    48a6:	90 0d       	add	r25, r0
    48a8:	11 24       	eor	r1, r1
    48aa:	8f 5e       	subi	r24, 0xEF	; 239
    48ac:	97 4d       	sbci	r25, 0xD7	; 215
    48ae:	0e 94 12 36 	call	0x6c24	; 0x6c24 <atol>
    48b2:	9b 01       	movw	r18, r22
    48b4:	ac 01       	movw	r20, r24
    48b6:	ab e1       	ldi	r26, 0x1B	; 27
    48b8:	b1 e0       	ldi	r27, 0x01	; 1
    48ba:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <__muluhisi3>
    48be:	4b 01       	movw	r8, r22
    48c0:	5c 01       	movw	r10, r24
			break;
    48c2:	88 c0       	rjmp	.+272    	; 0x49d4 <move_MOTOR_CMD+0x23a>

		case 'a':			// Move relative
		case 'b':
		case 'c':
			controller = motor + 31;
    48c4:	0f 2e       	mov	r0, r31
    48c6:	ff e1       	ldi	r31, 0x1F	; 31
    48c8:	ef 2e       	mov	r14, r31
    48ca:	f0 2d       	mov	r31, r0
    48cc:	e8 0e       	add	r14, r24
			if (get_MOTOR_ENCODER(controller, &currentPosition) == ERROR) {
    48ce:	be 01       	movw	r22, r28
    48d0:	6f 5a       	subi	r22, 0xAF	; 175
    48d2:	7f 4f       	sbci	r23, 0xFF	; 255
    48d4:	8e 2d       	mov	r24, r14
    48d6:	0e 94 09 1b 	call	0x3612	; 0x3612 <get_MOTOR_ENCODER>
    48da:	f8 2e       	mov	r15, r24
    48dc:	83 e6       	ldi	r24, 0x63	; 99
    48de:	f8 12       	cpse	r15, r24
    48e0:	16 c0       	rjmp	.+44     	; 0x490e <move_MOTOR_CMD+0x174>
				sprintf(strbuf, fmt0);
    48e2:	ce 01       	movw	r24, r28
    48e4:	8b 5a       	subi	r24, 0xAB	; 171
    48e6:	9f 4f       	sbci	r25, 0xFF	; 255
    48e8:	9f 93       	push	r25
    48ea:	8f 93       	push	r24
    48ec:	8e 01       	movw	r16, r28
    48ee:	0f 5f       	subi	r16, 0xFF	; 255
    48f0:	1f 4f       	sbci	r17, 0xFF	; 255
    48f2:	1f 93       	push	r17
    48f4:	0f 93       	push	r16
    48f6:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
				printError(ERR_MTR_ENC_VAL, strbuf);
    48fa:	b8 01       	movw	r22, r16
    48fc:	85 e3       	ldi	r24, 0x35	; 53
    48fe:	91 e0       	ldi	r25, 0x01	; 1
    4900:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				return(ERROR);
    4904:	0f 90       	pop	r0
    4906:	0f 90       	pop	r0
    4908:	0f 90       	pop	r0
    490a:	0f 90       	pop	r0
    490c:	ad c0       	rjmp	.+346    	; 0x4a68 <move_MOTOR_CMD+0x2ce>
			}
			newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    490e:	24 e3       	ldi	r18, 0x34	; 52
    4910:	20 9f       	mul	r18, r16
    4912:	c0 01       	movw	r24, r0
    4914:	21 9f       	mul	r18, r17
    4916:	90 0d       	add	r25, r0
    4918:	11 24       	eor	r1, r1
    491a:	8f 5e       	subi	r24, 0xEF	; 239
    491c:	97 4d       	sbci	r25, 0xD7	; 215
    491e:	0e 94 12 36 	call	0x6c24	; 0x6c24 <atol>
    4922:	9b 01       	movw	r18, r22
    4924:	ac 01       	movw	r20, r24
    4926:	ab e1       	ldi	r26, 0x1B	; 27
    4928:	b1 e0       	ldi	r27, 0x01	; 1
    492a:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <__muluhisi3>
    492e:	65 96       	adiw	r28, 0x15	; 21
    4930:	0c ad       	ldd	r16, Y+60	; 0x3c
    4932:	1d ad       	ldd	r17, Y+61	; 0x3d
    4934:	2e ad       	ldd	r18, Y+62	; 0x3e
    4936:	3f ad       	ldd	r19, Y+63	; 0x3f
    4938:	65 97       	sbiw	r28, 0x15	; 21
    493a:	4b 01       	movw	r8, r22
    493c:	5c 01       	movw	r10, r24
    493e:	80 0e       	add	r8, r16
    4940:	91 1e       	adc	r9, r17
    4942:	a2 1e       	adc	r10, r18
    4944:	b3 1e       	adc	r11, r19
			break;
    4946:	46 c0       	rjmp	.+140    	; 0x49d4 <move_MOTOR_CMD+0x23a>

		case 'd':
			deltaPos = (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    4948:	24 e3       	ldi	r18, 0x34	; 52
    494a:	20 9f       	mul	r18, r16
    494c:	c0 01       	movw	r24, r0
    494e:	21 9f       	mul	r18, r17
    4950:	90 0d       	add	r25, r0
    4952:	11 24       	eor	r1, r1
    4954:	8f 5e       	subi	r24, 0xEF	; 239
    4956:	97 4d       	sbci	r25, 0xD7	; 215
    4958:	0e 94 12 36 	call	0x6c24	; 0x6c24 <atol>
    495c:	9b 01       	movw	r18, r22
    495e:	ac 01       	movw	r20, r24
    4960:	ab e1       	ldi	r26, 0x1B	; 27
    4962:	b1 e0       	ldi	r27, 0x01	; 1
    4964:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <__muluhisi3>
			if (move_MOTORS_PISTON(deltaPos) == ERROR) {
    4968:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <move_MOTORS_PISTON>
    496c:	f8 2e       	mov	r15, r24
    496e:	83 e6       	ldi	r24, 0x63	; 99
    4970:	f8 12       	cpse	r15, r24
    4972:	77 c0       	rjmp	.+238    	; 0x4a62 <move_MOTOR_CMD+0x2c8>
				sprintf(strbuf, fmt3);
    4974:	ce 01       	movw	r24, r28
    4976:	84 54       	subi	r24, 0x44	; 68
    4978:	9f 4f       	sbci	r25, 0xFF	; 255
    497a:	9f 93       	push	r25
    497c:	8f 93       	push	r24
    497e:	8e 01       	movw	r16, r28
    4980:	0f 5f       	subi	r16, 0xFF	; 255
    4982:	1f 4f       	sbci	r17, 0xFF	; 255
    4984:	1f 93       	push	r17
    4986:	0f 93       	push	r16
    4988:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
				printError(ERR_MTR, strbuf);
    498c:	b8 01       	movw	r22, r16
    498e:	86 e3       	ldi	r24, 0x36	; 54
    4990:	91 e0       	ldi	r25, 0x01	; 1
    4992:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				return(ERROR);
    4996:	0f 90       	pop	r0
    4998:	0f 90       	pop	r0
    499a:	0f 90       	pop	r0
    499c:	0f 90       	pop	r0
    499e:	64 c0       	rjmp	.+200    	; 0x4a68 <move_MOTOR_CMD+0x2ce>
			}
			return(NOERROR);

		default:
			sprintf(strbuf, fmt1);
    49a0:	ce 01       	movw	r24, r28
    49a2:	83 58       	subi	r24, 0x83	; 131
    49a4:	9f 4f       	sbci	r25, 0xFF	; 255
    49a6:	9f 93       	push	r25
    49a8:	8f 93       	push	r24
    49aa:	8e 01       	movw	r16, r28
    49ac:	0f 5f       	subi	r16, 0xFF	; 255
    49ae:	1f 4f       	sbci	r17, 0xFF	; 255
    49b0:	1f 93       	push	r17
    49b2:	0f 93       	push	r16
    49b4:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			printError(ERR_MTR, strbuf);
    49b8:	b8 01       	movw	r22, r16
    49ba:	86 e3       	ldi	r24, 0x36	; 54
    49bc:	91 e0       	ldi	r25, 0x01	; 1
    49be:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
			return(ERROR);
    49c2:	0f 90       	pop	r0
    49c4:	0f 90       	pop	r0
    49c6:	0f 90       	pop	r0
    49c8:	0f 90       	pop	r0
    49ca:	0f 2e       	mov	r0, r31
    49cc:	f3 e6       	ldi	r31, 0x63	; 99
    49ce:	ff 2e       	mov	r15, r31
    49d0:	f0 2d       	mov	r31, r0
    49d2:	4a c0       	rjmp	.+148    	; 0x4a68 <move_MOTOR_CMD+0x2ce>
			break;	
	}

	motorDir[controller - MOTOR_A] = MTRDIRUNKNOWN;
    49d4:	0e 2d       	mov	r16, r14
    49d6:	10 e0       	ldi	r17, 0x00	; 0
    49d8:	00 58       	subi	r16, 0x80	; 128
    49da:	11 09       	sbc	r17, r1
    49dc:	f8 01       	movw	r30, r16
    49de:	e3 5c       	subi	r30, 0xC3	; 195
    49e0:	f5 4d       	sbci	r31, 0xD5	; 213
    49e2:	82 e0       	ldi	r24, 0x02	; 2
    49e4:	80 83       	st	Z, r24

	if (move_MOTOR(controller, newPosition) == ERROR) {
    49e6:	b5 01       	movw	r22, r10
    49e8:	a4 01       	movw	r20, r8
    49ea:	8e 2d       	mov	r24, r14
    49ec:	0e 94 09 22 	call	0x4412	; 0x4412 <move_MOTOR>
    49f0:	f8 2e       	mov	r15, r24
    49f2:	83 e6       	ldi	r24, 0x63	; 99
    49f4:	f8 12       	cpse	r15, r24
    49f6:	16 c0       	rjmp	.+44     	; 0x4a24 <move_MOTOR_CMD+0x28a>
		sprintf(strbuf, fmt2);
    49f8:	ce 01       	movw	r24, r28
    49fa:	85 56       	subi	r24, 0x65	; 101
    49fc:	9f 4f       	sbci	r25, 0xFF	; 255
    49fe:	9f 93       	push	r25
    4a00:	8f 93       	push	r24
    4a02:	8e 01       	movw	r16, r28
    4a04:	0f 5f       	subi	r16, 0xFF	; 255
    4a06:	1f 4f       	sbci	r17, 0xFF	; 255
    4a08:	1f 93       	push	r17
    4a0a:	0f 93       	push	r16
    4a0c:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
		printError(ERR_MTR, strbuf);
    4a10:	b8 01       	movw	r22, r16
    4a12:	86 e3       	ldi	r24, 0x36	; 54
    4a14:	91 e0       	ldi	r25, 0x01	; 1
    4a16:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		return(ERROR);
    4a1a:	0f 90       	pop	r0
    4a1c:	0f 90       	pop	r0
    4a1e:	0f 90       	pop	r0
    4a20:	0f 90       	pop	r0
    4a22:	22 c0       	rjmp	.+68     	; 0x4a68 <move_MOTOR_CMD+0x2ce>
	}

	if (newPosition < currentPosition) {
    4a24:	65 96       	adiw	r28, 0x15	; 21
    4a26:	8c ad       	ldd	r24, Y+60	; 0x3c
    4a28:	9d ad       	ldd	r25, Y+61	; 0x3d
    4a2a:	ae ad       	ldd	r26, Y+62	; 0x3e
    4a2c:	bf ad       	ldd	r27, Y+63	; 0x3f
    4a2e:	65 97       	sbiw	r28, 0x15	; 21
    4a30:	88 16       	cp	r8, r24
    4a32:	99 06       	cpc	r9, r25
    4a34:	aa 06       	cpc	r10, r26
    4a36:	bb 06       	cpc	r11, r27
    4a38:	34 f4       	brge	.+12     	; 0x4a46 <move_MOTOR_CMD+0x2ac>
		motorDir[controller - MOTOR_A] = MTRDIRNEGATIVE;
    4a3a:	f8 01       	movw	r30, r16
    4a3c:	e3 5c       	subi	r30, 0xC3	; 195
    4a3e:	f5 4d       	sbci	r31, 0xD5	; 213
    4a40:	10 82       	st	Z, r1
	} else if (newPosition > currentPosition) {
		motorDir[controller - MOTOR_A] = MTRDIRPOSITIVE;
	}

	return(NOERROR);
    4a42:	f1 2c       	mov	r15, r1
    4a44:	11 c0       	rjmp	.+34     	; 0x4a68 <move_MOTOR_CMD+0x2ce>
		return(ERROR);
	}

	if (newPosition < currentPosition) {
		motorDir[controller - MOTOR_A] = MTRDIRNEGATIVE;
	} else if (newPosition > currentPosition) {
    4a46:	88 15       	cp	r24, r8
    4a48:	99 05       	cpc	r25, r9
    4a4a:	aa 05       	cpc	r26, r10
    4a4c:	bb 05       	cpc	r27, r11
    4a4e:	5c f4       	brge	.+22     	; 0x4a66 <move_MOTOR_CMD+0x2cc>
		motorDir[controller - MOTOR_A] = MTRDIRPOSITIVE;
    4a50:	f8 01       	movw	r30, r16
    4a52:	e3 5c       	subi	r30, 0xC3	; 195
    4a54:	f5 4d       	sbci	r31, 0xD5	; 213
    4a56:	81 e0       	ldi	r24, 0x01	; 1
    4a58:	80 83       	st	Z, r24
	}

	return(NOERROR);
    4a5a:	f1 2c       	mov	r15, r1
    4a5c:	05 c0       	rjmp	.+10     	; 0x4a68 <move_MOTOR_CMD+0x2ce>
	const char fmt1[] = "move_MOTOR_CMD: unknown motor";
	const char fmt2[] = "move_MOTOR_CMD: move_MOTOR error";
	const char fmt3[] = "move_MOTOR_CMD: move_MOTORS_PISTON error";

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
		return(NOERROR);
    4a5e:	f1 2c       	mov	r15, r1
    4a60:	03 c0       	rjmp	.+6      	; 0x4a68 <move_MOTOR_CMD+0x2ce>
			if (move_MOTORS_PISTON(deltaPos) == ERROR) {
				sprintf(strbuf, fmt3);
				printError(ERR_MTR, strbuf);
				return(ERROR);
			}
			return(NOERROR);
    4a62:	f1 2c       	mov	r15, r1
    4a64:	01 c0       	rjmp	.+2      	; 0x4a68 <move_MOTOR_CMD+0x2ce>
		motorDir[controller - MOTOR_A] = MTRDIRNEGATIVE;
	} else if (newPosition > currentPosition) {
		motorDir[controller - MOTOR_A] = MTRDIRPOSITIVE;
	}

	return(NOERROR);
    4a66:	f1 2c       	mov	r15, r1

}
    4a68:	8f 2d       	mov	r24, r15
    4a6a:	cc 51       	subi	r28, 0x1C	; 28
    4a6c:	df 4f       	sbci	r29, 0xFF	; 255
    4a6e:	cd bf       	out	0x3d, r28	; 61
    4a70:	de bf       	out	0x3e, r29	; 62
    4a72:	df 91       	pop	r29
    4a74:	cf 91       	pop	r28
    4a76:	1f 91       	pop	r17
    4a78:	0f 91       	pop	r16
    4a7a:	ff 90       	pop	r15
    4a7c:	ef 90       	pop	r14
    4a7e:	bf 90       	pop	r11
    4a80:	af 90       	pop	r10
    4a82:	9f 90       	pop	r9
    4a84:	8f 90       	pop	r8
    4a86:	08 95       	ret

00004a88 <put_MOTOR_ENCODER>:
	Returns:
		ERROR:		If put_MOTOR returns an error
		NOERROR:	Otherwise
------------------------------------------------------------------------------*/
uint8_t put_MOTOR_ENCODER(uint8_t mtraddr, int32_t encoderValue)
{
    4a88:	ef 92       	push	r14
    4a8a:	ff 92       	push	r15
    4a8c:	0f 93       	push	r16
    4a8e:	1f 93       	push	r17
    4a90:	cf 93       	push	r28
    4a92:	df 93       	push	r29
    4a94:	cd b7       	in	r28, 0x3d	; 61
    4a96:	de b7       	in	r29, 0x3e	; 62
    4a98:	cd 57       	subi	r28, 0x7D	; 125
    4a9a:	d1 09       	sbc	r29, r1
    4a9c:	cd bf       	out	0x3d, r28	; 61
    4a9e:	de bf       	out	0x3e, r29	; 62
    4aa0:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_ENCODER: put_MOTOR error on %c";
    4aa2:	89 e2       	ldi	r24, 0x29	; 41
    4aa4:	e2 ec       	ldi	r30, 0xC2	; 194
    4aa6:	fa eb       	ldi	r31, 0xBA	; 186
    4aa8:	de 01       	movw	r26, r28
    4aaa:	11 96       	adiw	r26, 0x01	; 1
    4aac:	01 90       	ld	r0, Z+
    4aae:	0d 92       	st	X+, r0
    4ab0:	8a 95       	dec	r24
    4ab2:	e1 f7       	brne	.-8      	; 0x4aac <put_MOTOR_ENCODER+0x24>
	char strbuf[80];
	uint8_t data[4];

	data[0] = (encoderValue >> 24) & 0xFF;
    4ab4:	eb 96       	adiw	r28, 0x3b	; 59
    4ab6:	7f af       	std	Y+63, r23	; 0x3f
    4ab8:	eb 97       	sbiw	r28, 0x3b	; 59
	data[1] = (encoderValue >> 16) & 0xFF;
    4aba:	ec 96       	adiw	r28, 0x3c	; 60
    4abc:	6f af       	std	Y+63, r22	; 0x3f
    4abe:	ec 97       	sbiw	r28, 0x3c	; 60
	data[2] = (encoderValue >> 8) & 0xFF;
    4ac0:	ed 96       	adiw	r28, 0x3d	; 61
    4ac2:	5f af       	std	Y+63, r21	; 0x3f
    4ac4:	ed 97       	sbiw	r28, 0x3d	; 61
	data[3] = encoderValue & 0xFF;
    4ac6:	ee 96       	adiw	r28, 0x3e	; 62
    4ac8:	4f af       	std	Y+63, r20	; 0x3f
    4aca:	ee 97       	sbiw	r28, 0x3e	; 62

	if (put_MOTOR(mtraddr, PUTENCODER, data, 4) == ERROR) {
    4acc:	24 e0       	ldi	r18, 0x04	; 4
    4ace:	ae 01       	movw	r20, r28
    4ad0:	46 58       	subi	r20, 0x86	; 134
    4ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    4ad4:	66 e1       	ldi	r22, 0x16	; 22
    4ad6:	80 2f       	mov	r24, r16
    4ad8:	0e 94 3b 21 	call	0x4276	; 0x4276 <put_MOTOR>
    4adc:	18 2f       	mov	r17, r24
    4ade:	83 36       	cpi	r24, 0x63	; 99
    4ae0:	d9 f4       	brne	.+54     	; 0x4b18 <put_MOTOR_ENCODER+0x90>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    4ae2:	0f 53       	subi	r16, 0x3F	; 63
    4ae4:	1f 92       	push	r1
    4ae6:	0f 93       	push	r16
    4ae8:	ce 01       	movw	r24, r28
    4aea:	01 96       	adiw	r24, 0x01	; 1
    4aec:	9f 93       	push	r25
    4aee:	8f 93       	push	r24
    4af0:	7e 01       	movw	r14, r28
    4af2:	8a e2       	ldi	r24, 0x2A	; 42
    4af4:	e8 0e       	add	r14, r24
    4af6:	f1 1c       	adc	r15, r1
    4af8:	ff 92       	push	r15
    4afa:	ef 92       	push	r14
    4afc:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
		printError(ERR_MTR, strbuf);
    4b00:	b7 01       	movw	r22, r14
    4b02:	86 e3       	ldi	r24, 0x36	; 54
    4b04:	91 e0       	ldi	r25, 0x01	; 1
    4b06:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		return(ERROR);
    4b0a:	0f 90       	pop	r0
    4b0c:	0f 90       	pop	r0
    4b0e:	0f 90       	pop	r0
    4b10:	0f 90       	pop	r0
    4b12:	0f 90       	pop	r0
    4b14:	0f 90       	pop	r0
    4b16:	01 c0       	rjmp	.+2      	; 0x4b1a <put_MOTOR_ENCODER+0x92>
	}

	return(NOERROR);
    4b18:	10 e0       	ldi	r17, 0x00	; 0

}
    4b1a:	81 2f       	mov	r24, r17
    4b1c:	c3 58       	subi	r28, 0x83	; 131
    4b1e:	df 4f       	sbci	r29, 0xFF	; 255
    4b20:	cd bf       	out	0x3d, r28	; 61
    4b22:	de bf       	out	0x3e, r29	; 62
    4b24:	df 91       	pop	r29
    4b26:	cf 91       	pop	r28
    4b28:	1f 91       	pop	r17
    4b2a:	0f 91       	pop	r16
    4b2c:	ff 90       	pop	r15
    4b2e:	ef 90       	pop	r14
    4b30:	08 95       	ret

00004b32 <init_MOTORS>:
		NOERROR otherwise

ADD ERROR CHECKS?
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    4b32:	0f 93       	push	r16
    4b34:	1f 93       	push	r17
    4b36:	cf 93       	push	r28
    4b38:	df 93       	push	r29
    4b3a:	00 d0       	rcall	.+0      	; 0x4b3c <init_MOTORS+0xa>
    4b3c:	00 d0       	rcall	.+0      	; 0x4b3e <init_MOTORS+0xc>
    4b3e:	cd b7       	in	r28, 0x3d	; 61
    4b40:	de b7       	in	r29, 0x3e	; 62
    4b42:	2f e3       	ldi	r18, 0x3F	; 63
    4b44:	8d e0       	ldi	r24, 0x0D	; 13
    4b46:	93 e0       	ldi	r25, 0x03	; 3
    4b48:	21 50       	subi	r18, 0x01	; 1
    4b4a:	80 40       	sbci	r24, 0x00	; 0
    4b4c:	90 40       	sbci	r25, 0x00	; 0
    4b4e:	e1 f7       	brne	.-8      	; 0x4b48 <init_MOTORS+0x16>
    4b50:	00 c0       	rjmp	.+0      	; 0x4b52 <init_MOTORS+0x20>
    4b52:	00 00       	nop

	uint8_t i, mtraddr;
	int32_t encoderValue;

	_delay_ms(100);		// Wait to boot up
	timerSAVEENCODER = 0;
    4b54:	10 92 3c 2a 	sts	0x2A3C, r1	; 0x802a3c <timerSAVEENCODER>
	timeoutSAVEENCODER = SAVEENCODERPERIOD;
    4b58:	84 e0       	ldi	r24, 0x04	; 4
    4b5a:	80 93 3b 2a 	sts	0x2A3B, r24	; 0x802a3b <timeoutSAVEENCODER>

	for (i = 0; i < NMOTORS; i++) {
    4b5e:	10 e0       	ldi	r17, 0x00	; 0
    4b60:	1b c0       	rjmp	.+54     	; 0x4b98 <init_MOTORS+0x66>
		motorDir[i] = MTRDIRUNKNOWN;
    4b62:	81 2f       	mov	r24, r17
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	fc 01       	movw	r30, r24
    4b68:	e3 5c       	subi	r30, 0xC3	; 195
    4b6a:	f5 4d       	sbci	r31, 0xD5	; 213
    4b6c:	22 e0       	ldi	r18, 0x02	; 2
    4b6e:	20 83       	st	Z, r18
		motorLim[i] = MTRLIMUNKNOWN;
    4b70:	fc 01       	movw	r30, r24
    4b72:	e0 5c       	subi	r30, 0xC0	; 192
    4b74:	f5 4d       	sbci	r31, 0xD5	; 213
    4b76:	10 82       	st	Z, r1
		mtraddr = i + MOTOR_A;
    4b78:	00 e8       	ldi	r16, 0x80	; 128
    4b7a:	01 0f       	add	r16, r17
		get_FRAM_MOTOR_ENCODER(mtraddr, &encoderValue);
    4b7c:	be 01       	movw	r22, r28
    4b7e:	6f 5f       	subi	r22, 0xFF	; 255
    4b80:	7f 4f       	sbci	r23, 0xFF	; 255
    4b82:	80 2f       	mov	r24, r16
    4b84:	0e 94 0d 19 	call	0x321a	; 0x321a <get_FRAM_MOTOR_ENCODER>
		put_MOTOR_ENCODER(mtraddr, encoderValue);
    4b88:	49 81       	ldd	r20, Y+1	; 0x01
    4b8a:	5a 81       	ldd	r21, Y+2	; 0x02
    4b8c:	6b 81       	ldd	r22, Y+3	; 0x03
    4b8e:	7c 81       	ldd	r23, Y+4	; 0x04
    4b90:	80 2f       	mov	r24, r16
    4b92:	0e 94 44 25 	call	0x4a88	; 0x4a88 <put_MOTOR_ENCODER>

	_delay_ms(100);		// Wait to boot up
	timerSAVEENCODER = 0;
	timeoutSAVEENCODER = SAVEENCODERPERIOD;

	for (i = 0; i < NMOTORS; i++) {
    4b96:	1f 5f       	subi	r17, 0xFF	; 255
    4b98:	13 30       	cpi	r17, 0x03	; 3
    4b9a:	18 f3       	brcs	.-58     	; 0x4b62 <init_MOTORS+0x30>
		put_MOTOR_ENCODER(mtraddr, encoderValue);
	}

	return(NOERROR);

}
    4b9c:	80 e0       	ldi	r24, 0x00	; 0
    4b9e:	24 96       	adiw	r28, 0x04	; 4
    4ba0:	cd bf       	out	0x3d, r28	; 61
    4ba2:	de bf       	out	0x3e, r29	; 62
    4ba4:	df 91       	pop	r29
    4ba6:	cf 91       	pop	r28
    4ba8:	1f 91       	pop	r17
    4baa:	0f 91       	pop	r16
    4bac:	08 95       	ret

00004bae <put_MOTOR_PID>:
		ERROR:		If put_MOTOR returns an error
		NOERROR:	Otherwise
------------------------------------------------------------------------------*/

uint8_t put_MOTOR_PID(uint8_t mtraddr, PID pid)
{
    4bae:	9f 92       	push	r9
    4bb0:	af 92       	push	r10
    4bb2:	bf 92       	push	r11
    4bb4:	cf 92       	push	r12
    4bb6:	df 92       	push	r13
    4bb8:	ef 92       	push	r14
    4bba:	ff 92       	push	r15
    4bbc:	0f 93       	push	r16
    4bbe:	1f 93       	push	r17
    4bc0:	cf 93       	push	r28
    4bc2:	df 93       	push	r29
    4bc4:	cd b7       	in	r28, 0x3d	; 61
    4bc6:	de b7       	in	r29, 0x3e	; 62
    4bc8:	cf 5b       	subi	r28, 0xBF	; 191
    4bca:	d1 09       	sbc	r29, r1
    4bcc:	cd bf       	out	0x3d, r28	; 61
    4bce:	de bf       	out	0x3e, r29	; 62
    4bd0:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_PID: put_MOTOR error pid on %c";
    4bd2:	89 e2       	ldi	r24, 0x29	; 41
    4bd4:	eb ee       	ldi	r30, 0xEB	; 235
    4bd6:	fa eb       	ldi	r31, 0xBA	; 186
    4bd8:	de 01       	movw	r26, r28
    4bda:	11 96       	adiw	r26, 0x01	; 1
    4bdc:	01 90       	ld	r0, Z+
    4bde:	0d 92       	st	X+, r0
    4be0:	8a 95       	dec	r24
    4be2:	e1 f7       	brne	.-8      	; 0x4bdc <put_MOTOR_PID+0x2e>
	const char fmt2[] = "put_MOTOR_PID: put_MOTOR error qpps on %c";
    4be4:	8a e2       	ldi	r24, 0x2A	; 42
    4be6:	e4 e1       	ldi	r30, 0x14	; 20
    4be8:	fb eb       	ldi	r31, 0xBB	; 187
    4bea:	de 01       	movw	r26, r28
    4bec:	9a 96       	adiw	r26, 0x2a	; 42
    4bee:	01 90       	ld	r0, Z+
    4bf0:	0d 92       	st	X+, r0
    4bf2:	8a 95       	dec	r24
    4bf4:	e1 f7       	brne	.-8      	; 0x4bee <put_MOTOR_PID+0x40>
	char strbuf[80];
	uint8_t data[28];
	int32_t p, i, d;

	p = (int32_t) (pid.p * 1024.0);
    4bf6:	c3 53       	subi	r28, 0x33	; 51
    4bf8:	df 4f       	sbci	r29, 0xFF	; 255
    4bfa:	68 81       	ld	r22, Y
    4bfc:	79 81       	ldd	r23, Y+1	; 0x01
    4bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    4c00:	9b 81       	ldd	r25, Y+3	; 0x03
    4c02:	cd 5c       	subi	r28, 0xCD	; 205
    4c04:	d0 40       	sbci	r29, 0x00	; 0
    4c06:	20 e0       	ldi	r18, 0x00	; 0
    4c08:	30 e0       	ldi	r19, 0x00	; 0
    4c0a:	40 e8       	ldi	r20, 0x80	; 128
    4c0c:	54 e4       	ldi	r21, 0x44	; 68
    4c0e:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
    4c12:	0e 94 63 30 	call	0x60c6	; 0x60c6 <__fixsfsi>
    4c16:	c6 2e       	mov	r12, r22
    4c18:	b7 2e       	mov	r11, r23
    4c1a:	a8 2e       	mov	r10, r24
    4c1c:	99 2e       	mov	r9, r25
	i = (int32_t) (pid.i * 1024.0);
    4c1e:	cf 52       	subi	r28, 0x2F	; 47
    4c20:	df 4f       	sbci	r29, 0xFF	; 255
    4c22:	68 81       	ld	r22, Y
    4c24:	79 81       	ldd	r23, Y+1	; 0x01
    4c26:	8a 81       	ldd	r24, Y+2	; 0x02
    4c28:	9b 81       	ldd	r25, Y+3	; 0x03
    4c2a:	c1 5d       	subi	r28, 0xD1	; 209
    4c2c:	d0 40       	sbci	r29, 0x00	; 0
    4c2e:	20 e0       	ldi	r18, 0x00	; 0
    4c30:	30 e0       	ldi	r19, 0x00	; 0
    4c32:	40 e8       	ldi	r20, 0x80	; 128
    4c34:	54 e4       	ldi	r21, 0x44	; 68
    4c36:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
    4c3a:	0e 94 63 30 	call	0x60c6	; 0x60c6 <__fixsfsi>
    4c3e:	16 2f       	mov	r17, r22
    4c40:	f7 2e       	mov	r15, r23
    4c42:	e8 2e       	mov	r14, r24
    4c44:	d9 2e       	mov	r13, r25
	d = (int32_t) (pid.d * 1024.0);
    4c46:	cb 52       	subi	r28, 0x2B	; 43
    4c48:	df 4f       	sbci	r29, 0xFF	; 255
    4c4a:	68 81       	ld	r22, Y
    4c4c:	79 81       	ldd	r23, Y+1	; 0x01
    4c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c50:	9b 81       	ldd	r25, Y+3	; 0x03
    4c52:	c5 5d       	subi	r28, 0xD5	; 213
    4c54:	d0 40       	sbci	r29, 0x00	; 0
    4c56:	20 e0       	ldi	r18, 0x00	; 0
    4c58:	30 e0       	ldi	r19, 0x00	; 0
    4c5a:	40 e8       	ldi	r20, 0x80	; 128
    4c5c:	54 e4       	ldi	r21, 0x44	; 68
    4c5e:	0e 94 50 31 	call	0x62a0	; 0x62a0 <__mulsf3>
    4c62:	0e 94 63 30 	call	0x60c6	; 0x60c6 <__fixsfsi>

	data[0] = (d >> 24) & 0xFF;
    4c66:	cc 55       	subi	r28, 0x5C	; 92
    4c68:	df 4f       	sbci	r29, 0xFF	; 255
    4c6a:	98 83       	st	Y, r25
    4c6c:	c4 5a       	subi	r28, 0xA4	; 164
    4c6e:	d0 40       	sbci	r29, 0x00	; 0
	data[1] = (d >> 16) & 0xFF;
    4c70:	cb 55       	subi	r28, 0x5B	; 91
    4c72:	df 4f       	sbci	r29, 0xFF	; 255
    4c74:	88 83       	st	Y, r24
    4c76:	c5 5a       	subi	r28, 0xA5	; 165
    4c78:	d0 40       	sbci	r29, 0x00	; 0
	data[2] = (d >> 8) & 0xFF;
    4c7a:	ca 55       	subi	r28, 0x5A	; 90
    4c7c:	df 4f       	sbci	r29, 0xFF	; 255
    4c7e:	78 83       	st	Y, r23
    4c80:	c6 5a       	subi	r28, 0xA6	; 166
    4c82:	d0 40       	sbci	r29, 0x00	; 0
	data[3] = d & 0xFF;
    4c84:	c9 55       	subi	r28, 0x59	; 89
    4c86:	df 4f       	sbci	r29, 0xFF	; 255
    4c88:	68 83       	st	Y, r22
    4c8a:	c7 5a       	subi	r28, 0xA7	; 167
    4c8c:	d0 40       	sbci	r29, 0x00	; 0
	data[4] = (p >> 24) & 0xFF;
    4c8e:	c8 55       	subi	r28, 0x58	; 88
    4c90:	df 4f       	sbci	r29, 0xFF	; 255
    4c92:	98 82       	st	Y, r9
    4c94:	c8 5a       	subi	r28, 0xA8	; 168
    4c96:	d0 40       	sbci	r29, 0x00	; 0
	data[5] = (p >> 16) & 0xFF;
    4c98:	c7 55       	subi	r28, 0x57	; 87
    4c9a:	df 4f       	sbci	r29, 0xFF	; 255
    4c9c:	a8 82       	st	Y, r10
    4c9e:	c9 5a       	subi	r28, 0xA9	; 169
    4ca0:	d0 40       	sbci	r29, 0x00	; 0
	data[6] = (p >> 8) & 0xFF;
    4ca2:	c6 55       	subi	r28, 0x56	; 86
    4ca4:	df 4f       	sbci	r29, 0xFF	; 255
    4ca6:	b8 82       	st	Y, r11
    4ca8:	ca 5a       	subi	r28, 0xAA	; 170
    4caa:	d0 40       	sbci	r29, 0x00	; 0
	data[7] = p & 0xFF;
    4cac:	c5 55       	subi	r28, 0x55	; 85
    4cae:	df 4f       	sbci	r29, 0xFF	; 255
    4cb0:	c8 82       	st	Y, r12
    4cb2:	cb 5a       	subi	r28, 0xAB	; 171
    4cb4:	d0 40       	sbci	r29, 0x00	; 0
	data[8] = (i >> 24) & 0xFF;
    4cb6:	c4 55       	subi	r28, 0x54	; 84
    4cb8:	df 4f       	sbci	r29, 0xFF	; 255
    4cba:	d8 82       	st	Y, r13
    4cbc:	cc 5a       	subi	r28, 0xAC	; 172
    4cbe:	d0 40       	sbci	r29, 0x00	; 0
	data[9] = (i >> 16) & 0xFF;
    4cc0:	c3 55       	subi	r28, 0x53	; 83
    4cc2:	df 4f       	sbci	r29, 0xFF	; 255
    4cc4:	e8 82       	st	Y, r14
    4cc6:	cd 5a       	subi	r28, 0xAD	; 173
    4cc8:	d0 40       	sbci	r29, 0x00	; 0
	data[10] = (i >> 8) & 0xFF;
    4cca:	c2 55       	subi	r28, 0x52	; 82
    4ccc:	df 4f       	sbci	r29, 0xFF	; 255
    4cce:	f8 82       	st	Y, r15
    4cd0:	ce 5a       	subi	r28, 0xAE	; 174
    4cd2:	d0 40       	sbci	r29, 0x00	; 0
	data[11] = i & 0xFF;
    4cd4:	c1 55       	subi	r28, 0x51	; 81
    4cd6:	df 4f       	sbci	r29, 0xFF	; 255
    4cd8:	18 83       	st	Y, r17
    4cda:	cf 5a       	subi	r28, 0xAF	; 175
    4cdc:	d0 40       	sbci	r29, 0x00	; 0
	data[12] = (pid.maxI >> 24) & 0xFF;
    4cde:	c7 52       	subi	r28, 0x27	; 39
    4ce0:	df 4f       	sbci	r29, 0xFF	; 255
    4ce2:	88 81       	ld	r24, Y
    4ce4:	c9 5d       	subi	r28, 0xD9	; 217
    4ce6:	d0 40       	sbci	r29, 0x00	; 0
    4ce8:	c6 52       	subi	r28, 0x26	; 38
    4cea:	df 4f       	sbci	r29, 0xFF	; 255
    4cec:	98 81       	ld	r25, Y
    4cee:	ca 5d       	subi	r28, 0xDA	; 218
    4cf0:	d0 40       	sbci	r29, 0x00	; 0
    4cf2:	c5 52       	subi	r28, 0x25	; 37
    4cf4:	df 4f       	sbci	r29, 0xFF	; 255
    4cf6:	28 81       	ld	r18, Y
    4cf8:	cb 5d       	subi	r28, 0xDB	; 219
    4cfa:	d0 40       	sbci	r29, 0x00	; 0
    4cfc:	c4 52       	subi	r28, 0x24	; 36
    4cfe:	df 4f       	sbci	r29, 0xFF	; 255
    4d00:	38 81       	ld	r19, Y
    4d02:	cc 5d       	subi	r28, 0xDC	; 220
    4d04:	d0 40       	sbci	r29, 0x00	; 0
    4d06:	c0 55       	subi	r28, 0x50	; 80
    4d08:	df 4f       	sbci	r29, 0xFF	; 255
    4d0a:	38 83       	st	Y, r19
    4d0c:	c0 5b       	subi	r28, 0xB0	; 176
    4d0e:	d0 40       	sbci	r29, 0x00	; 0
	data[13] = (pid.maxI >> 16) & 0xFF;
    4d10:	cf 54       	subi	r28, 0x4F	; 79
    4d12:	df 4f       	sbci	r29, 0xFF	; 255
    4d14:	28 83       	st	Y, r18
    4d16:	c1 5b       	subi	r28, 0xB1	; 177
    4d18:	d0 40       	sbci	r29, 0x00	; 0
	data[14] = (pid.maxI >> 8) & 0xFF;
    4d1a:	ce 54       	subi	r28, 0x4E	; 78
    4d1c:	df 4f       	sbci	r29, 0xFF	; 255
    4d1e:	98 83       	st	Y, r25
    4d20:	c2 5b       	subi	r28, 0xB2	; 178
    4d22:	d0 40       	sbci	r29, 0x00	; 0
	data[15] = pid.maxI & 0xFF;
    4d24:	cd 54       	subi	r28, 0x4D	; 77
    4d26:	df 4f       	sbci	r29, 0xFF	; 255
    4d28:	88 83       	st	Y, r24
    4d2a:	c3 5b       	subi	r28, 0xB3	; 179
    4d2c:	d0 40       	sbci	r29, 0x00	; 0
	data[16] = (pid.deadZone >> 24) & 0xFF;
    4d2e:	c3 52       	subi	r28, 0x23	; 35
    4d30:	df 4f       	sbci	r29, 0xFF	; 255
    4d32:	88 81       	ld	r24, Y
    4d34:	cd 5d       	subi	r28, 0xDD	; 221
    4d36:	d0 40       	sbci	r29, 0x00	; 0
    4d38:	c2 52       	subi	r28, 0x22	; 34
    4d3a:	df 4f       	sbci	r29, 0xFF	; 255
    4d3c:	98 81       	ld	r25, Y
    4d3e:	ce 5d       	subi	r28, 0xDE	; 222
    4d40:	d0 40       	sbci	r29, 0x00	; 0
    4d42:	c1 52       	subi	r28, 0x21	; 33
    4d44:	df 4f       	sbci	r29, 0xFF	; 255
    4d46:	28 81       	ld	r18, Y
    4d48:	cf 5d       	subi	r28, 0xDF	; 223
    4d4a:	d0 40       	sbci	r29, 0x00	; 0
    4d4c:	c0 52       	subi	r28, 0x20	; 32
    4d4e:	df 4f       	sbci	r29, 0xFF	; 255
    4d50:	38 81       	ld	r19, Y
    4d52:	c0 5e       	subi	r28, 0xE0	; 224
    4d54:	d0 40       	sbci	r29, 0x00	; 0
    4d56:	cc 54       	subi	r28, 0x4C	; 76
    4d58:	df 4f       	sbci	r29, 0xFF	; 255
    4d5a:	38 83       	st	Y, r19
    4d5c:	c4 5b       	subi	r28, 0xB4	; 180
    4d5e:	d0 40       	sbci	r29, 0x00	; 0
	data[17] = (pid.deadZone >> 16) & 0xFF;
    4d60:	cb 54       	subi	r28, 0x4B	; 75
    4d62:	df 4f       	sbci	r29, 0xFF	; 255
    4d64:	28 83       	st	Y, r18
    4d66:	c5 5b       	subi	r28, 0xB5	; 181
    4d68:	d0 40       	sbci	r29, 0x00	; 0
	data[18] = (pid.deadZone >> 8) & 0xFF;
    4d6a:	ca 54       	subi	r28, 0x4A	; 74
    4d6c:	df 4f       	sbci	r29, 0xFF	; 255
    4d6e:	98 83       	st	Y, r25
    4d70:	c6 5b       	subi	r28, 0xB6	; 182
    4d72:	d0 40       	sbci	r29, 0x00	; 0
	data[19] = pid.deadZone & 0xFF;
    4d74:	c9 54       	subi	r28, 0x49	; 73
    4d76:	df 4f       	sbci	r29, 0xFF	; 255
    4d78:	88 83       	st	Y, r24
    4d7a:	c7 5b       	subi	r28, 0xB7	; 183
    4d7c:	d0 40       	sbci	r29, 0x00	; 0
	data[20] = (pid.minPos >> 24) & 0xFF;
    4d7e:	cf 51       	subi	r28, 0x1F	; 31
    4d80:	df 4f       	sbci	r29, 0xFF	; 255
    4d82:	88 81       	ld	r24, Y
    4d84:	c1 5e       	subi	r28, 0xE1	; 225
    4d86:	d0 40       	sbci	r29, 0x00	; 0
    4d88:	ce 51       	subi	r28, 0x1E	; 30
    4d8a:	df 4f       	sbci	r29, 0xFF	; 255
    4d8c:	98 81       	ld	r25, Y
    4d8e:	c2 5e       	subi	r28, 0xE2	; 226
    4d90:	d0 40       	sbci	r29, 0x00	; 0
    4d92:	cd 51       	subi	r28, 0x1D	; 29
    4d94:	df 4f       	sbci	r29, 0xFF	; 255
    4d96:	28 81       	ld	r18, Y
    4d98:	c3 5e       	subi	r28, 0xE3	; 227
    4d9a:	d0 40       	sbci	r29, 0x00	; 0
    4d9c:	cc 51       	subi	r28, 0x1C	; 28
    4d9e:	df 4f       	sbci	r29, 0xFF	; 255
    4da0:	38 81       	ld	r19, Y
    4da2:	c4 5e       	subi	r28, 0xE4	; 228
    4da4:	d0 40       	sbci	r29, 0x00	; 0
    4da6:	c8 54       	subi	r28, 0x48	; 72
    4da8:	df 4f       	sbci	r29, 0xFF	; 255
    4daa:	38 83       	st	Y, r19
    4dac:	c8 5b       	subi	r28, 0xB8	; 184
    4dae:	d0 40       	sbci	r29, 0x00	; 0
	data[21] = (pid.minPos >> 16) & 0xFF;
    4db0:	c7 54       	subi	r28, 0x47	; 71
    4db2:	df 4f       	sbci	r29, 0xFF	; 255
    4db4:	28 83       	st	Y, r18
    4db6:	c9 5b       	subi	r28, 0xB9	; 185
    4db8:	d0 40       	sbci	r29, 0x00	; 0
	data[22] = (pid.minPos >> 8) & 0xFF;
    4dba:	c6 54       	subi	r28, 0x46	; 70
    4dbc:	df 4f       	sbci	r29, 0xFF	; 255
    4dbe:	98 83       	st	Y, r25
    4dc0:	ca 5b       	subi	r28, 0xBA	; 186
    4dc2:	d0 40       	sbci	r29, 0x00	; 0
	data[23] = pid.minPos & 0xFF;
    4dc4:	c5 54       	subi	r28, 0x45	; 69
    4dc6:	df 4f       	sbci	r29, 0xFF	; 255
    4dc8:	88 83       	st	Y, r24
    4dca:	cb 5b       	subi	r28, 0xBB	; 187
    4dcc:	d0 40       	sbci	r29, 0x00	; 0
	data[24] = (pid.maxPos >> 24) & 0xFF;
    4dce:	cb 51       	subi	r28, 0x1B	; 27
    4dd0:	df 4f       	sbci	r29, 0xFF	; 255
    4dd2:	88 81       	ld	r24, Y
    4dd4:	c5 5e       	subi	r28, 0xE5	; 229
    4dd6:	d0 40       	sbci	r29, 0x00	; 0
    4dd8:	ca 51       	subi	r28, 0x1A	; 26
    4dda:	df 4f       	sbci	r29, 0xFF	; 255
    4ddc:	98 81       	ld	r25, Y
    4dde:	c6 5e       	subi	r28, 0xE6	; 230
    4de0:	d0 40       	sbci	r29, 0x00	; 0
    4de2:	c9 51       	subi	r28, 0x19	; 25
    4de4:	df 4f       	sbci	r29, 0xFF	; 255
    4de6:	28 81       	ld	r18, Y
    4de8:	c7 5e       	subi	r28, 0xE7	; 231
    4dea:	d0 40       	sbci	r29, 0x00	; 0
    4dec:	c8 51       	subi	r28, 0x18	; 24
    4dee:	df 4f       	sbci	r29, 0xFF	; 255
    4df0:	38 81       	ld	r19, Y
    4df2:	c8 5e       	subi	r28, 0xE8	; 232
    4df4:	d0 40       	sbci	r29, 0x00	; 0
    4df6:	c4 54       	subi	r28, 0x44	; 68
    4df8:	df 4f       	sbci	r29, 0xFF	; 255
    4dfa:	38 83       	st	Y, r19
    4dfc:	cc 5b       	subi	r28, 0xBC	; 188
    4dfe:	d0 40       	sbci	r29, 0x00	; 0
	data[25] = (pid.maxPos >> 16) & 0xFF;
    4e00:	c3 54       	subi	r28, 0x43	; 67
    4e02:	df 4f       	sbci	r29, 0xFF	; 255
    4e04:	28 83       	st	Y, r18
    4e06:	cd 5b       	subi	r28, 0xBD	; 189
    4e08:	d0 40       	sbci	r29, 0x00	; 0
	data[26] = (pid.maxPos >> 8) & 0xFF;
    4e0a:	c2 54       	subi	r28, 0x42	; 66
    4e0c:	df 4f       	sbci	r29, 0xFF	; 255
    4e0e:	98 83       	st	Y, r25
    4e10:	ce 5b       	subi	r28, 0xBE	; 190
    4e12:	d0 40       	sbci	r29, 0x00	; 0
	data[27] = pid.maxPos & 0xFF;
    4e14:	c1 54       	subi	r28, 0x41	; 65
    4e16:	df 4f       	sbci	r29, 0xFF	; 255
    4e18:	88 83       	st	Y, r24
    4e1a:	cf 5b       	subi	r28, 0xBF	; 191
    4e1c:	d0 40       	sbci	r29, 0x00	; 0

	if (put_MOTOR(mtraddr, SETPID, data, 28) == ERROR) {
    4e1e:	2c e1       	ldi	r18, 0x1C	; 28
    4e20:	ae 01       	movw	r20, r28
    4e22:	4c 55       	subi	r20, 0x5C	; 92
    4e24:	5f 4f       	sbci	r21, 0xFF	; 255
    4e26:	6d e3       	ldi	r22, 0x3D	; 61
    4e28:	80 2f       	mov	r24, r16
    4e2a:	0e 94 3b 21 	call	0x4276	; 0x4276 <put_MOTOR>
    4e2e:	18 2f       	mov	r17, r24
    4e30:	83 36       	cpi	r24, 0x63	; 99
    4e32:	d9 f4       	brne	.+54     	; 0x4e6a <put_MOTOR_PID+0x2bc>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    4e34:	0f 53       	subi	r16, 0x3F	; 63
    4e36:	1f 92       	push	r1
    4e38:	0f 93       	push	r16
    4e3a:	ce 01       	movw	r24, r28
    4e3c:	01 96       	adiw	r24, 0x01	; 1
    4e3e:	9f 93       	push	r25
    4e40:	8f 93       	push	r24
    4e42:	7e 01       	movw	r14, r28
    4e44:	84 e5       	ldi	r24, 0x54	; 84
    4e46:	e8 0e       	add	r14, r24
    4e48:	f1 1c       	adc	r15, r1
    4e4a:	ff 92       	push	r15
    4e4c:	ef 92       	push	r14
    4e4e:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
		printError(ERR_MTR, strbuf);
    4e52:	b7 01       	movw	r22, r14
    4e54:	86 e3       	ldi	r24, 0x36	; 54
    4e56:	91 e0       	ldi	r25, 0x01	; 1
    4e58:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		return(ERROR);
    4e5c:	0f 90       	pop	r0
    4e5e:	0f 90       	pop	r0
    4e60:	0f 90       	pop	r0
    4e62:	0f 90       	pop	r0
    4e64:	0f 90       	pop	r0
    4e66:	0f 90       	pop	r0
    4e68:	8b c0       	rjmp	.+278    	; 0x4f80 <put_MOTOR_PID+0x3d2>
	}

	data[0] = data[1] = data[2] = data[3] = 0;
    4e6a:	c9 55       	subi	r28, 0x59	; 89
    4e6c:	df 4f       	sbci	r29, 0xFF	; 255
    4e6e:	18 82       	st	Y, r1
    4e70:	c7 5a       	subi	r28, 0xA7	; 167
    4e72:	d0 40       	sbci	r29, 0x00	; 0
    4e74:	ca 55       	subi	r28, 0x5A	; 90
    4e76:	df 4f       	sbci	r29, 0xFF	; 255
    4e78:	18 82       	st	Y, r1
    4e7a:	c6 5a       	subi	r28, 0xA6	; 166
    4e7c:	d0 40       	sbci	r29, 0x00	; 0
    4e7e:	cb 55       	subi	r28, 0x5B	; 91
    4e80:	df 4f       	sbci	r29, 0xFF	; 255
    4e82:	18 82       	st	Y, r1
    4e84:	c5 5a       	subi	r28, 0xA5	; 165
    4e86:	d0 40       	sbci	r29, 0x00	; 0
    4e88:	cc 55       	subi	r28, 0x5C	; 92
    4e8a:	df 4f       	sbci	r29, 0xFF	; 255
    4e8c:	18 82       	st	Y, r1
    4e8e:	c4 5a       	subi	r28, 0xA4	; 164
    4e90:	d0 40       	sbci	r29, 0x00	; 0
	data[4] = data[5] = data[6] = data[7] = 0;
    4e92:	c5 55       	subi	r28, 0x55	; 85
    4e94:	df 4f       	sbci	r29, 0xFF	; 255
    4e96:	18 82       	st	Y, r1
    4e98:	cb 5a       	subi	r28, 0xAB	; 171
    4e9a:	d0 40       	sbci	r29, 0x00	; 0
    4e9c:	c6 55       	subi	r28, 0x56	; 86
    4e9e:	df 4f       	sbci	r29, 0xFF	; 255
    4ea0:	18 82       	st	Y, r1
    4ea2:	ca 5a       	subi	r28, 0xAA	; 170
    4ea4:	d0 40       	sbci	r29, 0x00	; 0
    4ea6:	c7 55       	subi	r28, 0x57	; 87
    4ea8:	df 4f       	sbci	r29, 0xFF	; 255
    4eaa:	18 82       	st	Y, r1
    4eac:	c9 5a       	subi	r28, 0xA9	; 169
    4eae:	d0 40       	sbci	r29, 0x00	; 0
    4eb0:	c8 55       	subi	r28, 0x58	; 88
    4eb2:	df 4f       	sbci	r29, 0xFF	; 255
    4eb4:	18 82       	st	Y, r1
    4eb6:	c8 5a       	subi	r28, 0xA8	; 168
    4eb8:	d0 40       	sbci	r29, 0x00	; 0
	data[8] = data[9] = data[10] = data[11] = 0;
    4eba:	c1 55       	subi	r28, 0x51	; 81
    4ebc:	df 4f       	sbci	r29, 0xFF	; 255
    4ebe:	18 82       	st	Y, r1
    4ec0:	cf 5a       	subi	r28, 0xAF	; 175
    4ec2:	d0 40       	sbci	r29, 0x00	; 0
    4ec4:	c2 55       	subi	r28, 0x52	; 82
    4ec6:	df 4f       	sbci	r29, 0xFF	; 255
    4ec8:	18 82       	st	Y, r1
    4eca:	ce 5a       	subi	r28, 0xAE	; 174
    4ecc:	d0 40       	sbci	r29, 0x00	; 0
    4ece:	c3 55       	subi	r28, 0x53	; 83
    4ed0:	df 4f       	sbci	r29, 0xFF	; 255
    4ed2:	18 82       	st	Y, r1
    4ed4:	cd 5a       	subi	r28, 0xAD	; 173
    4ed6:	d0 40       	sbci	r29, 0x00	; 0
    4ed8:	c4 55       	subi	r28, 0x54	; 84
    4eda:	df 4f       	sbci	r29, 0xFF	; 255
    4edc:	18 82       	st	Y, r1
    4ede:	cc 5a       	subi	r28, 0xAC	; 172
    4ee0:	d0 40       	sbci	r29, 0x00	; 0
	data[12] = (pid.qpps >> 24) & 0xFF;
    4ee2:	c7 51       	subi	r28, 0x17	; 23
    4ee4:	df 4f       	sbci	r29, 0xFF	; 255
    4ee6:	88 81       	ld	r24, Y
    4ee8:	c9 5e       	subi	r28, 0xE9	; 233
    4eea:	d0 40       	sbci	r29, 0x00	; 0
    4eec:	c6 51       	subi	r28, 0x16	; 22
    4eee:	df 4f       	sbci	r29, 0xFF	; 255
    4ef0:	98 81       	ld	r25, Y
    4ef2:	ca 5e       	subi	r28, 0xEA	; 234
    4ef4:	d0 40       	sbci	r29, 0x00	; 0
    4ef6:	c5 51       	subi	r28, 0x15	; 21
    4ef8:	df 4f       	sbci	r29, 0xFF	; 255
    4efa:	28 81       	ld	r18, Y
    4efc:	cb 5e       	subi	r28, 0xEB	; 235
    4efe:	d0 40       	sbci	r29, 0x00	; 0
    4f00:	c4 51       	subi	r28, 0x14	; 20
    4f02:	df 4f       	sbci	r29, 0xFF	; 255
    4f04:	38 81       	ld	r19, Y
    4f06:	cc 5e       	subi	r28, 0xEC	; 236
    4f08:	d0 40       	sbci	r29, 0x00	; 0
    4f0a:	c0 55       	subi	r28, 0x50	; 80
    4f0c:	df 4f       	sbci	r29, 0xFF	; 255
    4f0e:	38 83       	st	Y, r19
    4f10:	c0 5b       	subi	r28, 0xB0	; 176
    4f12:	d0 40       	sbci	r29, 0x00	; 0
	data[13] = (pid.qpps >> 16) & 0xFF;
    4f14:	cf 54       	subi	r28, 0x4F	; 79
    4f16:	df 4f       	sbci	r29, 0xFF	; 255
    4f18:	28 83       	st	Y, r18
    4f1a:	c1 5b       	subi	r28, 0xB1	; 177
    4f1c:	d0 40       	sbci	r29, 0x00	; 0
	data[14] = (pid.qpps >> 8) & 0xFF;
    4f1e:	ce 54       	subi	r28, 0x4E	; 78
    4f20:	df 4f       	sbci	r29, 0xFF	; 255
    4f22:	98 83       	st	Y, r25
    4f24:	c2 5b       	subi	r28, 0xB2	; 178
    4f26:	d0 40       	sbci	r29, 0x00	; 0
	data[15] = pid.qpps & 0xFF;
    4f28:	cd 54       	subi	r28, 0x4D	; 77
    4f2a:	df 4f       	sbci	r29, 0xFF	; 255
    4f2c:	88 83       	st	Y, r24
    4f2e:	c3 5b       	subi	r28, 0xB3	; 179
    4f30:	d0 40       	sbci	r29, 0x00	; 0

	if (put_MOTOR(mtraddr, SETQPPS, data, 16) == ERROR) {
    4f32:	20 e1       	ldi	r18, 0x10	; 16
    4f34:	ae 01       	movw	r20, r28
    4f36:	4c 55       	subi	r20, 0x5C	; 92
    4f38:	5f 4f       	sbci	r21, 0xFF	; 255
    4f3a:	6c e1       	ldi	r22, 0x1C	; 28
    4f3c:	80 2f       	mov	r24, r16
    4f3e:	0e 94 3b 21 	call	0x4276	; 0x4276 <put_MOTOR>
    4f42:	18 2f       	mov	r17, r24
    4f44:	83 36       	cpi	r24, 0x63	; 99
    4f46:	d9 f4       	brne	.+54     	; 0x4f7e <put_MOTOR_PID+0x3d0>
		sprintf(strbuf, fmt2, (char) (mtraddr-63));
    4f48:	0f 53       	subi	r16, 0x3F	; 63
    4f4a:	1f 92       	push	r1
    4f4c:	0f 93       	push	r16
    4f4e:	ce 01       	movw	r24, r28
    4f50:	8a 96       	adiw	r24, 0x2a	; 42
    4f52:	9f 93       	push	r25
    4f54:	8f 93       	push	r24
    4f56:	7e 01       	movw	r14, r28
    4f58:	84 e5       	ldi	r24, 0x54	; 84
    4f5a:	e8 0e       	add	r14, r24
    4f5c:	f1 1c       	adc	r15, r1
    4f5e:	ff 92       	push	r15
    4f60:	ef 92       	push	r14
    4f62:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
		printError(ERR_MTR, strbuf);
    4f66:	b7 01       	movw	r22, r14
    4f68:	86 e3       	ldi	r24, 0x36	; 54
    4f6a:	91 e0       	ldi	r25, 0x01	; 1
    4f6c:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		return(ERROR);
    4f70:	0f 90       	pop	r0
    4f72:	0f 90       	pop	r0
    4f74:	0f 90       	pop	r0
    4f76:	0f 90       	pop	r0
    4f78:	0f 90       	pop	r0
    4f7a:	0f 90       	pop	r0
    4f7c:	01 c0       	rjmp	.+2      	; 0x4f80 <put_MOTOR_PID+0x3d2>
	}

	return(NOERROR);
    4f7e:	10 e0       	ldi	r17, 0x00	; 0
}
    4f80:	81 2f       	mov	r24, r17
    4f82:	c1 54       	subi	r28, 0x41	; 65
    4f84:	df 4f       	sbci	r29, 0xFF	; 255
    4f86:	cd bf       	out	0x3d, r28	; 61
    4f88:	de bf       	out	0x3e, r29	; 62
    4f8a:	df 91       	pop	r29
    4f8c:	cf 91       	pop	r28
    4f8e:	1f 91       	pop	r17
    4f90:	0f 91       	pop	r16
    4f92:	ff 90       	pop	r15
    4f94:	ef 90       	pop	r14
    4f96:	df 90       	pop	r13
    4f98:	cf 90       	pop	r12
    4f9a:	bf 90       	pop	r11
    4f9c:	af 90       	pop	r10
    4f9e:	9f 90       	pop	r9
    4fa0:	08 95       	ret

00004fa2 <unstick_MOTOR_LIMIT>:
	Returns:
		ERROR
		NOERROR
------------------------------------------------------------------------------*/
uint8_t unstick_MOTOR_LIMIT(uint8_t cstack)
{
    4fa2:	bf 92       	push	r11
    4fa4:	cf 92       	push	r12
    4fa6:	df 92       	push	r13
    4fa8:	ef 92       	push	r14
    4faa:	ff 92       	push	r15
    4fac:	0f 93       	push	r16
    4fae:	1f 93       	push	r17
    4fb0:	cf 93       	push	r28
    4fb2:	df 93       	push	r29
    4fb4:	cd b7       	in	r28, 0x3d	; 61
    4fb6:	de b7       	in	r29, 0x3e	; 62
    4fb8:	c8 55       	subi	r28, 0x58	; 88
    4fba:	d1 09       	sbc	r29, r1
    4fbc:	cd bf       	out	0x3d, r28	; 61
    4fbe:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	uint8_t i, mtraddr, mtrIndex, direction, stuck;
	int32_t encodervalue, encoderspeed, newPosition;

	mtraddr = pcmd[cstack].cobject + 31;	// 128, 129, or 130
    4fc0:	24 e3       	ldi	r18, 0x34	; 52
    4fc2:	82 9f       	mul	r24, r18
    4fc4:	c0 01       	movw	r24, r0
    4fc6:	11 24       	eor	r1, r1
    4fc8:	fc 01       	movw	r30, r24
    4fca:	e1 5f       	subi	r30, 0xF1	; 241
    4fcc:	f7 4d       	sbci	r31, 0xD7	; 215
    4fce:	e1 81       	ldd	r30, Z+1	; 0x01
    4fd0:	1f e1       	ldi	r17, 0x1F	; 31
    4fd2:	1e 0f       	add	r17, r30
	mtrIndex = mtraddr - MOTOR_A;
    4fd4:	e1 56       	subi	r30, 0x61	; 97
	direction = motorDir[mtrIndex];		// Save the most recent command direction
    4fd6:	f0 e0       	ldi	r31, 0x00	; 0
    4fd8:	e3 5c       	subi	r30, 0xC3	; 195
    4fda:	f5 4d       	sbci	r31, 0xD5	; 213
    4fdc:	b0 80       	ld	r11, Z

//sprintf(strbuf, "mtraddr = %d, mtrIndex = %d, direction = %d", mtraddr, mtrIndex, direction);
//printLine(strbuf);

	if (get_MOTOR_LIMIT(mtraddr) == NO) {
    4fde:	81 2f       	mov	r24, r17
    4fe0:	0e 94 0a 20 	call	0x4014	; 0x4014 <get_MOTOR_LIMIT>
    4fe4:	08 2f       	mov	r16, r24
    4fe6:	81 11       	cpse	r24, r1
    4fe8:	1c c0       	rjmp	.+56     	; 0x5022 <unstick_MOTOR_LIMIT+0x80>
		sprintf(strbuf, "motor %c not stuck", mtraddr - 31);
    4fea:	81 2f       	mov	r24, r17
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	4f 97       	sbiw	r24, 0x1f	; 31
    4ff0:	9f 93       	push	r25
    4ff2:	8f 93       	push	r24
    4ff4:	8e e3       	ldi	r24, 0x3E	; 62
    4ff6:	9b eb       	ldi	r25, 0xBB	; 187
    4ff8:	9f 93       	push	r25
    4ffa:	8f 93       	push	r24
    4ffc:	ce 01       	movw	r24, r28
    4ffe:	01 96       	adiw	r24, 0x01	; 1
    5000:	7c 01       	movw	r14, r24
    5002:	9f 93       	push	r25
    5004:	8f 93       	push	r24
    5006:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
		printError(ERR_MTR, strbuf);
    500a:	b7 01       	movw	r22, r14
    500c:	86 e3       	ldi	r24, 0x36	; 54
    500e:	91 e0       	ldi	r25, 0x01	; 1
    5010:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		return(NOERROR);
    5014:	0f 90       	pop	r0
    5016:	0f 90       	pop	r0
    5018:	0f 90       	pop	r0
    501a:	0f 90       	pop	r0
    501c:	0f 90       	pop	r0
    501e:	0f 90       	pop	r0
    5020:	b8 c0       	rjmp	.+368    	; 0x5192 <unstick_MOTOR_LIMIT+0x1f0>
	}

	stuck = YES;
	get_MOTOR_ENCODER(mtraddr, &encodervalue);
    5022:	be 01       	movw	r22, r28
    5024:	6f 5a       	subi	r22, 0xAF	; 175
    5026:	7f 4f       	sbci	r23, 0xFF	; 255
    5028:	81 2f       	mov	r24, r17
    502a:	0e 94 09 1b 	call	0x3612	; 0x3612 <get_MOTOR_ENCODER>

//sprintf(strbuf, "current position = %ld", encodervalue);
//printLine(strbuf);

	for (i = 0; i < 3; i++) {
    502e:	00 e0       	ldi	r16, 0x00	; 0
    5030:	7a c0       	rjmp	.+244    	; 0x5126 <unstick_MOTOR_LIMIT+0x184>

		// Try the opposite direction first
		if (direction == MTRDIRNEGATIVE) {
    5032:	b1 10       	cpse	r11, r1
    5034:	0d c0       	rjmp	.+26     	; 0x5050 <unstick_MOTOR_LIMIT+0xae>
			newPosition = encodervalue + 2 * ENC_COUNTS_PER_MICRON;
    5036:	65 96       	adiw	r28, 0x15	; 21
    5038:	cc ac       	ldd	r12, Y+60	; 0x3c
    503a:	dd ac       	ldd	r13, Y+61	; 0x3d
    503c:	ee ac       	ldd	r14, Y+62	; 0x3e
    503e:	ff ac       	ldd	r15, Y+63	; 0x3f
    5040:	65 97       	sbiw	r28, 0x15	; 21
    5042:	96 e3       	ldi	r25, 0x36	; 54
    5044:	c9 0e       	add	r12, r25
    5046:	92 e0       	ldi	r25, 0x02	; 2
    5048:	d9 1e       	adc	r13, r25
    504a:	e1 1c       	adc	r14, r1
    504c:	f1 1c       	adc	r15, r1
    504e:	0c c0       	rjmp	.+24     	; 0x5068 <unstick_MOTOR_LIMIT+0xc6>
		} else {
			newPosition = encodervalue - 2 * ENC_COUNTS_PER_MICRON;			
    5050:	65 96       	adiw	r28, 0x15	; 21
    5052:	cc ac       	ldd	r12, Y+60	; 0x3c
    5054:	dd ac       	ldd	r13, Y+61	; 0x3d
    5056:	ee ac       	ldd	r14, Y+62	; 0x3e
    5058:	ff ac       	ldd	r15, Y+63	; 0x3f
    505a:	65 97       	sbiw	r28, 0x15	; 21
    505c:	26 e3       	ldi	r18, 0x36	; 54
    505e:	c2 1a       	sub	r12, r18
    5060:	22 e0       	ldi	r18, 0x02	; 2
    5062:	d2 0a       	sbc	r13, r18
    5064:	e1 08       	sbc	r14, r1
    5066:	f1 08       	sbc	r15, r1
		}

//sprintf(strbuf, "moving to %ld", newPosition);
//printLine(strbuf);

		move_MOTOR(mtraddr, newPosition);
    5068:	b7 01       	movw	r22, r14
    506a:	a6 01       	movw	r20, r12
    506c:	81 2f       	mov	r24, r17
    506e:	0e 94 09 22 	call	0x4412	; 0x4412 <move_MOTOR>
		get_MOTOR_SPEED(mtraddr, &encoderspeed);
    5072:	be 01       	movw	r22, r28
    5074:	6b 5a       	subi	r22, 0xAB	; 171
    5076:	7f 4f       	sbci	r23, 0xFF	; 255
    5078:	81 2f       	mov	r24, r17
    507a:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_MOTOR_SPEED>
		while (encoderspeed) {
    507e:	06 c0       	rjmp	.+12     	; 0x508c <unstick_MOTOR_LIMIT+0xea>
			get_MOTOR_SPEED(mtraddr, &encoderspeed);
    5080:	be 01       	movw	r22, r28
    5082:	6b 5a       	subi	r22, 0xAB	; 171
    5084:	7f 4f       	sbci	r23, 0xFF	; 255
    5086:	81 2f       	mov	r24, r17
    5088:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_MOTOR_SPEED>
//sprintf(strbuf, "moving to %ld", newPosition);
//printLine(strbuf);

		move_MOTOR(mtraddr, newPosition);
		get_MOTOR_SPEED(mtraddr, &encoderspeed);
		while (encoderspeed) {
    508c:	69 96       	adiw	r28, 0x19	; 25
    508e:	8c ad       	ldd	r24, Y+60	; 0x3c
    5090:	9d ad       	ldd	r25, Y+61	; 0x3d
    5092:	ae ad       	ldd	r26, Y+62	; 0x3e
    5094:	bf ad       	ldd	r27, Y+63	; 0x3f
    5096:	69 97       	sbiw	r28, 0x19	; 25
    5098:	89 2b       	or	r24, r25
    509a:	8a 2b       	or	r24, r26
    509c:	8b 2b       	or	r24, r27
    509e:	81 f7       	brne	.-32     	; 0x5080 <unstick_MOTOR_LIMIT+0xde>
//printLine(strbuf);

		}
//		_delay_ms(3000);

		if (get_MOTOR_LIMIT(mtraddr) == NO) {
    50a0:	81 2f       	mov	r24, r17
    50a2:	0e 94 0a 20 	call	0x4014	; 0x4014 <get_MOTOR_LIMIT>
    50a6:	88 23       	and	r24, r24
    50a8:	09 f4       	brne	.+2      	; 0x50ac <unstick_MOTOR_LIMIT+0x10a>
    50aa:	42 c0       	rjmp	.+132    	; 0x5130 <unstick_MOTOR_LIMIT+0x18e>
			stuck = NO;
			break;
		}

		// Try the same direction
		if (direction == MTRDIRNEGATIVE) {
    50ac:	b1 10       	cpse	r11, r1
    50ae:	0d c0       	rjmp	.+26     	; 0x50ca <unstick_MOTOR_LIMIT+0x128>
			newPosition = encodervalue - 2 * ENC_COUNTS_PER_MICRON;
    50b0:	65 96       	adiw	r28, 0x15	; 21
    50b2:	cc ac       	ldd	r12, Y+60	; 0x3c
    50b4:	dd ac       	ldd	r13, Y+61	; 0x3d
    50b6:	ee ac       	ldd	r14, Y+62	; 0x3e
    50b8:	ff ac       	ldd	r15, Y+63	; 0x3f
    50ba:	65 97       	sbiw	r28, 0x15	; 21
    50bc:	86 e3       	ldi	r24, 0x36	; 54
    50be:	c8 1a       	sub	r12, r24
    50c0:	82 e0       	ldi	r24, 0x02	; 2
    50c2:	d8 0a       	sbc	r13, r24
    50c4:	e1 08       	sbc	r14, r1
    50c6:	f1 08       	sbc	r15, r1
    50c8:	0c c0       	rjmp	.+24     	; 0x50e2 <unstick_MOTOR_LIMIT+0x140>
		} else {
			newPosition = encodervalue + 2 * ENC_COUNTS_PER_MICRON;
    50ca:	65 96       	adiw	r28, 0x15	; 21
    50cc:	cc ac       	ldd	r12, Y+60	; 0x3c
    50ce:	dd ac       	ldd	r13, Y+61	; 0x3d
    50d0:	ee ac       	ldd	r14, Y+62	; 0x3e
    50d2:	ff ac       	ldd	r15, Y+63	; 0x3f
    50d4:	65 97       	sbiw	r28, 0x15	; 21
    50d6:	96 e3       	ldi	r25, 0x36	; 54
    50d8:	c9 0e       	add	r12, r25
    50da:	92 e0       	ldi	r25, 0x02	; 2
    50dc:	d9 1e       	adc	r13, r25
    50de:	e1 1c       	adc	r14, r1
    50e0:	f1 1c       	adc	r15, r1
		}
		move_MOTOR(mtraddr, newPosition);
    50e2:	b7 01       	movw	r22, r14
    50e4:	a6 01       	movw	r20, r12
    50e6:	81 2f       	mov	r24, r17
    50e8:	0e 94 09 22 	call	0x4412	; 0x4412 <move_MOTOR>
		get_MOTOR_SPEED(mtraddr, &encoderspeed);
    50ec:	be 01       	movw	r22, r28
    50ee:	6b 5a       	subi	r22, 0xAB	; 171
    50f0:	7f 4f       	sbci	r23, 0xFF	; 255
    50f2:	81 2f       	mov	r24, r17
    50f4:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_MOTOR_SPEED>
		while (encoderspeed) {
    50f8:	06 c0       	rjmp	.+12     	; 0x5106 <unstick_MOTOR_LIMIT+0x164>
			get_MOTOR_SPEED(mtraddr, &encoderspeed);
    50fa:	be 01       	movw	r22, r28
    50fc:	6b 5a       	subi	r22, 0xAB	; 171
    50fe:	7f 4f       	sbci	r23, 0xFF	; 255
    5100:	81 2f       	mov	r24, r17
    5102:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <get_MOTOR_SPEED>
		} else {
			newPosition = encodervalue + 2 * ENC_COUNTS_PER_MICRON;
		}
		move_MOTOR(mtraddr, newPosition);
		get_MOTOR_SPEED(mtraddr, &encoderspeed);
		while (encoderspeed) {
    5106:	69 96       	adiw	r28, 0x19	; 25
    5108:	8c ad       	ldd	r24, Y+60	; 0x3c
    510a:	9d ad       	ldd	r25, Y+61	; 0x3d
    510c:	ae ad       	ldd	r26, Y+62	; 0x3e
    510e:	bf ad       	ldd	r27, Y+63	; 0x3f
    5110:	69 97       	sbiw	r28, 0x19	; 25
    5112:	89 2b       	or	r24, r25
    5114:	8a 2b       	or	r24, r26
    5116:	8b 2b       	or	r24, r27
    5118:	81 f7       	brne	.-32     	; 0x50fa <unstick_MOTOR_LIMIT+0x158>
//sprintf(strbuf, "encoderspeed = %ld", encoderspeed);
//printLine(strbuf);
		}
//		_delay_ms(2000);

		if (get_MOTOR_LIMIT(mtraddr) == NO) {
    511a:	81 2f       	mov	r24, r17
    511c:	0e 94 0a 20 	call	0x4014	; 0x4014 <get_MOTOR_LIMIT>
    5120:	88 23       	and	r24, r24
    5122:	41 f0       	breq	.+16     	; 0x5134 <unstick_MOTOR_LIMIT+0x192>
	get_MOTOR_ENCODER(mtraddr, &encodervalue);

//sprintf(strbuf, "current position = %ld", encodervalue);
//printLine(strbuf);

	for (i = 0; i < 3; i++) {
    5124:	0f 5f       	subi	r16, 0xFF	; 255
    5126:	03 30       	cpi	r16, 0x03	; 3
    5128:	08 f4       	brcc	.+2      	; 0x512c <unstick_MOTOR_LIMIT+0x18a>
    512a:	83 cf       	rjmp	.-250    	; 0x5032 <unstick_MOTOR_LIMIT+0x90>
		sprintf(strbuf, "motor %c not stuck", mtraddr - 31);
		printError(ERR_MTR, strbuf);
		return(NOERROR);
	}

	stuck = YES;
    512c:	81 e0       	ldi	r24, 0x01	; 1
    512e:	03 c0       	rjmp	.+6      	; 0x5136 <unstick_MOTOR_LIMIT+0x194>
//		_delay_ms(3000);

		if (get_MOTOR_LIMIT(mtraddr) == NO) {
//sprintf(strbuf, "unstuck at i=%d, opposite direction", i);
//printLine(strbuf);
			stuck = NO;
    5130:	80 e0       	ldi	r24, 0x00	; 0
    5132:	01 c0       	rjmp	.+2      	; 0x5136 <unstick_MOTOR_LIMIT+0x194>
//		_delay_ms(2000);

		if (get_MOTOR_LIMIT(mtraddr) == NO) {
//sprintf(strbuf, "unstuck at i=%d, same direction", i);
//printLine(strbuf);
			stuck = NO;
    5134:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
	if (stuck == YES) {		// Tried 3 times and failed
    5136:	81 30       	cpi	r24, 0x01	; 1
    5138:	59 f1       	breq	.+86     	; 0x5190 <unstick_MOTOR_LIMIT+0x1ee>
//printLine(strbuf);
		return(ERROR);
	}

	// Move 200 um away
	get_MOTOR_ENCODER(mtraddr, &encodervalue);
    513a:	be 01       	movw	r22, r28
    513c:	6f 5a       	subi	r22, 0xAF	; 175
    513e:	7f 4f       	sbci	r23, 0xFF	; 255
    5140:	81 2f       	mov	r24, r17
    5142:	0e 94 09 1b 	call	0x3612	; 0x3612 <get_MOTOR_ENCODER>
	if (direction == MTRDIRNEGATIVE) {
    5146:	b1 10       	cpse	r11, r1
    5148:	0d c0       	rjmp	.+26     	; 0x5164 <unstick_MOTOR_LIMIT+0x1c2>
		newPosition = encodervalue + 200L * ENC_COUNTS_PER_MICRON;
    514a:	65 96       	adiw	r28, 0x15	; 21
    514c:	cc ac       	ldd	r12, Y+60	; 0x3c
    514e:	dd ac       	ldd	r13, Y+61	; 0x3d
    5150:	ee ac       	ldd	r14, Y+62	; 0x3e
    5152:	ff ac       	ldd	r15, Y+63	; 0x3f
    5154:	65 97       	sbiw	r28, 0x15	; 21
    5156:	28 e1       	ldi	r18, 0x18	; 24
    5158:	c2 0e       	add	r12, r18
    515a:	2d ed       	ldi	r18, 0xDD	; 221
    515c:	d2 1e       	adc	r13, r18
    515e:	e1 1c       	adc	r14, r1
    5160:	f1 1c       	adc	r15, r1
    5162:	0f c0       	rjmp	.+30     	; 0x5182 <unstick_MOTOR_LIMIT+0x1e0>
	} else if (direction == MTRDIRPOSITIVE) {
    5164:	81 e0       	ldi	r24, 0x01	; 1
    5166:	b8 12       	cpse	r11, r24
    5168:	0c c0       	rjmp	.+24     	; 0x5182 <unstick_MOTOR_LIMIT+0x1e0>
		newPosition = encodervalue - 200L * ENC_COUNTS_PER_MICRON;
    516a:	65 96       	adiw	r28, 0x15	; 21
    516c:	cc ac       	ldd	r12, Y+60	; 0x3c
    516e:	dd ac       	ldd	r13, Y+61	; 0x3d
    5170:	ee ac       	ldd	r14, Y+62	; 0x3e
    5172:	ff ac       	ldd	r15, Y+63	; 0x3f
    5174:	65 97       	sbiw	r28, 0x15	; 21
    5176:	98 e1       	ldi	r25, 0x18	; 24
    5178:	c9 1a       	sub	r12, r25
    517a:	9d ed       	ldi	r25, 0xDD	; 221
    517c:	d9 0a       	sbc	r13, r25
    517e:	e1 08       	sbc	r14, r1
    5180:	f1 08       	sbc	r15, r1
	} 
//sprintf(strbuf, "encodervalue = %ld, newPosition = %ld", encodervalue, newPosition);
//printLine(strbuf);
	move_MOTOR(mtraddr, newPosition);
    5182:	b7 01       	movw	r22, r14
    5184:	a6 01       	movw	r20, r12
    5186:	81 2f       	mov	r24, r17
    5188:	0e 94 09 22 	call	0x4412	; 0x4412 <move_MOTOR>
	return(NOERROR);
    518c:	00 e0       	ldi	r16, 0x00	; 0
    518e:	01 c0       	rjmp	.+2      	; 0x5192 <unstick_MOTOR_LIMIT+0x1f0>
		}
	}
	if (stuck == YES) {		// Tried 3 times and failed
//sprintf(strbuf, "tried 3 times and failed");
//printLine(strbuf);
		return(ERROR);
    5190:	03 e6       	ldi	r16, 0x63	; 99
//sprintf(strbuf, "encodervalue = %ld, newPosition = %ld", encodervalue, newPosition);
//printLine(strbuf);
	move_MOTOR(mtraddr, newPosition);
	return(NOERROR);

}
    5192:	80 2f       	mov	r24, r16
    5194:	c8 5a       	subi	r28, 0xA8	; 168
    5196:	df 4f       	sbci	r29, 0xFF	; 255
    5198:	cd bf       	out	0x3d, r28	; 61
    519a:	de bf       	out	0x3e, r29	; 62
    519c:	df 91       	pop	r29
    519e:	cf 91       	pop	r28
    51a0:	1f 91       	pop	r17
    51a2:	0f 91       	pop	r16
    51a4:	ff 90       	pop	r15
    51a6:	ef 90       	pop	r14
    51a8:	df 90       	pop	r13
    51aa:	cf 90       	pop	r12
    51ac:	bf 90       	pop	r11
    51ae:	08 95       	ret

000051b0 <zero_MOTOR_CMD>:

	Outputs:
		None
------------------------------------------------------------------------------*/
void zero_MOTOR_CMD(uint8_t cstack)
{
    51b0:	0f 93       	push	r16
    51b2:	1f 93       	push	r17
    51b4:	cf 93       	push	r28
    51b6:	df 93       	push	r29
    51b8:	cd b7       	in	r28, 0x3d	; 61
    51ba:	de b7       	in	r29, 0x3e	; 62
    51bc:	c5 5a       	subi	r28, 0xA5	; 165
    51be:	d1 09       	sbc	r29, r1
    51c0:	cd bf       	out	0x3d, r28	; 61
    51c2:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	const char fmt0[] = "zero_MOTOR_CMD: failed put_MOTOR_ENCODER on %c";
    51c4:	9f e2       	ldi	r25, 0x2F	; 47
    51c6:	e1 e5       	ldi	r30, 0x51	; 81
    51c8:	fb eb       	ldi	r31, 0xBB	; 187
    51ca:	de 01       	movw	r26, r28
    51cc:	af 5a       	subi	r26, 0xAF	; 175
    51ce:	bf 4f       	sbci	r27, 0xFF	; 255
    51d0:	01 90       	ld	r0, Z+
    51d2:	0d 92       	st	X+, r0
    51d4:	9a 95       	dec	r25
    51d6:	e1 f7       	brne	.-8      	; 0x51d0 <zero_MOTOR_CMD+0x20>
	const char fmt1[] = "zero_MOTOR_CMD: not a motor name (%c)";
    51d8:	96 e2       	ldi	r25, 0x26	; 38
    51da:	e0 e8       	ldi	r30, 0x80	; 128
    51dc:	fb eb       	ldi	r31, 0xBB	; 187
    51de:	de 01       	movw	r26, r28
    51e0:	a0 58       	subi	r26, 0x80	; 128
    51e2:	bf 4f       	sbci	r27, 0xFF	; 255
    51e4:	01 90       	ld	r0, Z+
    51e6:	0d 92       	st	X+, r0
    51e8:	9a 95       	dec	r25
    51ea:	e1 f7       	brne	.-8      	; 0x51e4 <zero_MOTOR_CMD+0x34>
	uint8_t motor, mtraddr, retval;

	motor = pcmd[cstack].cobject;	// The char a, b, or c
    51ec:	24 e3       	ldi	r18, 0x34	; 52
    51ee:	82 9f       	mul	r24, r18
    51f0:	c0 01       	movw	r24, r0
    51f2:	11 24       	eor	r1, r1
    51f4:	fc 01       	movw	r30, r24
    51f6:	e1 5f       	subi	r30, 0xF1	; 241
    51f8:	f7 4d       	sbci	r31, 0xD7	; 215
    51fa:	11 81       	ldd	r17, Z+1	; 0x01

	switch (motor) {
    51fc:	8f e9       	ldi	r24, 0x9F	; 159
    51fe:	81 0f       	add	r24, r17
    5200:	83 30       	cpi	r24, 0x03	; 3
    5202:	18 f5       	brcc	.+70     	; 0x524a <zero_MOTOR_CMD+0x9a>
		case 'a':
		case 'b':
		case 'c':
			mtraddr = motor + 31;
			retval = put_MOTOR_ENCODER(mtraddr, 0L);
    5204:	40 e0       	ldi	r20, 0x00	; 0
    5206:	50 e0       	ldi	r21, 0x00	; 0
    5208:	ba 01       	movw	r22, r20
    520a:	8f e1       	ldi	r24, 0x1F	; 31
    520c:	81 0f       	add	r24, r17
    520e:	0e 94 44 25 	call	0x4a88	; 0x4a88 <put_MOTOR_ENCODER>
			if (retval == ERROR) {
    5212:	83 36       	cpi	r24, 0x63	; 99
    5214:	99 f5       	brne	.+102    	; 0x527c <zero_MOTOR_CMD+0xcc>
				sprintf(strbuf, fmt0, motor);
    5216:	1f 92       	push	r1
    5218:	1f 93       	push	r17
    521a:	ce 01       	movw	r24, r28
    521c:	8f 5a       	subi	r24, 0xAF	; 175
    521e:	9f 4f       	sbci	r25, 0xFF	; 255
    5220:	9f 93       	push	r25
    5222:	8f 93       	push	r24
    5224:	8e 01       	movw	r16, r28
    5226:	0f 5f       	subi	r16, 0xFF	; 255
    5228:	1f 4f       	sbci	r17, 0xFF	; 255
    522a:	1f 93       	push	r17
    522c:	0f 93       	push	r16
    522e:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
				printError(ERR_ZERMTR, strbuf);
    5232:	b8 01       	movw	r22, r16
    5234:	87 e3       	ldi	r24, 0x37	; 55
    5236:	91 e0       	ldi	r25, 0x01	; 1
    5238:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				return;
    523c:	0f 90       	pop	r0
    523e:	0f 90       	pop	r0
    5240:	0f 90       	pop	r0
    5242:	0f 90       	pop	r0
    5244:	0f 90       	pop	r0
    5246:	0f 90       	pop	r0
    5248:	19 c0       	rjmp	.+50     	; 0x527c <zero_MOTOR_CMD+0xcc>
			}
			break;

		default:
			sprintf(strbuf, fmt1, motor);
    524a:	1f 92       	push	r1
    524c:	1f 93       	push	r17
    524e:	ce 01       	movw	r24, r28
    5250:	80 58       	subi	r24, 0x80	; 128
    5252:	9f 4f       	sbci	r25, 0xFF	; 255
    5254:	9f 93       	push	r25
    5256:	8f 93       	push	r24
    5258:	8e 01       	movw	r16, r28
    525a:	0f 5f       	subi	r16, 0xFF	; 255
    525c:	1f 4f       	sbci	r17, 0xFF	; 255
    525e:	1f 93       	push	r17
    5260:	0f 93       	push	r16
    5262:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			printError(ERR_ZERMTR, strbuf);
    5266:	b8 01       	movw	r22, r16
    5268:	87 e3       	ldi	r24, 0x37	; 55
    526a:	91 e0       	ldi	r25, 0x01	; 1
    526c:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
			break;
    5270:	0f 90       	pop	r0
    5272:	0f 90       	pop	r0
    5274:	0f 90       	pop	r0
    5276:	0f 90       	pop	r0
    5278:	0f 90       	pop	r0
    527a:	0f 90       	pop	r0
		
	}
    527c:	cb 55       	subi	r28, 0x5B	; 91
    527e:	df 4f       	sbci	r29, 0xFF	; 255
    5280:	cd bf       	out	0x3d, r28	; 61
    5282:	de bf       	out	0x3e, r29	; 62
    5284:	df 91       	pop	r29
    5286:	cf 91       	pop	r28
    5288:	1f 91       	pop	r17
    528a:	0f 91       	pop	r16
    528c:	08 95       	ret

0000528e <set>:
	Returns:
		ERROR if an invalid object was requested.
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    528e:	ef 92       	push	r14
    5290:	ff 92       	push	r15
    5292:	0f 93       	push	r16
    5294:	1f 93       	push	r17
    5296:	cf 93       	push	r28
    5298:	df 93       	push	r29
    529a:	cd b7       	in	r28, 0x3d	; 61
    529c:	de b7       	in	r29, 0x3e	; 62
    529e:	c8 5f       	subi	r28, 0xF8	; 248
    52a0:	d1 09       	sbc	r29, r1
    52a2:	cd bf       	out	0x3d, r28	; 61
    52a4:	de bf       	out	0x3e, r29	; 62
	char object;
	uint8_t i, mtraddr;
//	int32_t newEncoderValue;
	PID motorPID;
//	const char fmt0[] = "set: put_MOTOR_ENCODER error on %c";
	const char fmt1[] = "set: bad time format";
    52a6:	95 e1       	ldi	r25, 0x15	; 21
    52a8:	e6 ea       	ldi	r30, 0xA6	; 166
    52aa:	fb eb       	ldi	r31, 0xBB	; 187
    52ac:	de 01       	movw	r26, r28
    52ae:	af 58       	subi	r26, 0x8F	; 143
    52b0:	bf 4f       	sbci	r27, 0xFF	; 255
    52b2:	01 90       	ld	r0, Z+
    52b4:	0d 92       	st	X+, r0
    52b6:	9a 95       	dec	r25
    52b8:	e1 f7       	brne	.-8      	; 0x52b2 <set+0x24>
	const char fmt2[] = "set: put_time error";
    52ba:	94 e1       	ldi	r25, 0x14	; 20
    52bc:	eb eb       	ldi	r30, 0xBB	; 187
    52be:	fb eb       	ldi	r31, 0xBB	; 187
    52c0:	de 01       	movw	r26, r28
    52c2:	aa 57       	subi	r26, 0x7A	; 122
    52c4:	bf 4f       	sbci	r27, 0xFF	; 255
    52c6:	01 90       	ld	r0, Z+
    52c8:	0d 92       	st	X+, r0
    52ca:	9a 95       	dec	r25
    52cc:	e1 f7       	brne	.-8      	; 0x52c6 <set+0x38>
	const char fmt3[] = "set: write_FRAM error";
    52ce:	96 e1       	ldi	r25, 0x16	; 22
    52d0:	ef ec       	ldi	r30, 0xCF	; 207
    52d2:	fb eb       	ldi	r31, 0xBB	; 187
    52d4:	de 01       	movw	r26, r28
    52d6:	a6 56       	subi	r26, 0x66	; 102
    52d8:	bf 4f       	sbci	r27, 0xFF	; 255
    52da:	01 90       	ld	r0, Z+
    52dc:	0d 92       	st	X+, r0
    52de:	9a 95       	dec	r25
    52e0:	e1 f7       	brne	.-8      	; 0x52da <set+0x4c>
	const char fmt4[] = "set: what?";
    52e2:	9b e0       	ldi	r25, 0x0B	; 11
    52e4:	e5 ee       	ldi	r30, 0xE5	; 229
    52e6:	fb eb       	ldi	r31, 0xBB	; 187
    52e8:	de 01       	movw	r26, r28
    52ea:	a0 55       	subi	r26, 0x50	; 80
    52ec:	bf 4f       	sbci	r27, 0xFF	; 255
    52ee:	01 90       	ld	r0, Z+
    52f0:	0d 92       	st	X+, r0
    52f2:	9a 95       	dec	r25
    52f4:	e1 f7       	brne	.-8      	; 0x52ee <set+0x60>
//	const char fmt5[] = "set: encoder value out of range %ld";
	const char fmt6[] = "set: get_MOTOR_PID error on %c";
    52f6:	9f e1       	ldi	r25, 0x1F	; 31
    52f8:	e0 ef       	ldi	r30, 0xF0	; 240
    52fa:	fb eb       	ldi	r31, 0xBB	; 187
    52fc:	de 01       	movw	r26, r28
    52fe:	a5 54       	subi	r26, 0x45	; 69
    5300:	bf 4f       	sbci	r27, 0xFF	; 255
    5302:	01 90       	ld	r0, Z+
    5304:	0d 92       	st	X+, r0
    5306:	9a 95       	dec	r25
    5308:	e1 f7       	brne	.-8      	; 0x5302 <set+0x74>
	const char fmt7[] = "set: put_MOTOR_PID error on %c";
    530a:	9f e1       	ldi	r25, 0x1F	; 31
    530c:	ef e0       	ldi	r30, 0x0F	; 15
    530e:	fc eb       	ldi	r31, 0xBC	; 188
    5310:	de 01       	movw	r26, r28
    5312:	a6 52       	subi	r26, 0x26	; 38
    5314:	bf 4f       	sbci	r27, 0xFF	; 255
    5316:	01 90       	ld	r0, Z+
    5318:	0d 92       	st	X+, r0
    531a:	9a 95       	dec	r25
    531c:	e1 f7       	brne	.-8      	; 0x5316 <set+0x88>

	object = pcmd[cstack].cobject;
    531e:	90 e0       	ldi	r25, 0x00	; 0
    5320:	24 e3       	ldi	r18, 0x34	; 52
    5322:	28 9f       	mul	r18, r24
    5324:	f0 01       	movw	r30, r0
    5326:	29 9f       	mul	r18, r25
    5328:	f0 0d       	add	r31, r0
    532a:	11 24       	eor	r1, r1
    532c:	e1 5f       	subi	r30, 0xF1	; 241
    532e:	f7 4d       	sbci	r31, 0xD7	; 215
    5330:	21 81       	ldd	r18, Z+1	; 0x01
	switch(object) {
    5332:	23 37       	cpi	r18, 0x73	; 115
    5334:	09 f4       	brne	.+2      	; 0x5338 <set+0xaa>
    5336:	64 c1       	rjmp	.+712    	; 0x5600 <set+0x372>
    5338:	38 f4       	brcc	.+14     	; 0x5348 <set+0xba>
    533a:	2c 34       	cpi	r18, 0x4C	; 76
    533c:	09 f4       	brne	.+2      	; 0x5340 <set+0xb2>
    533e:	e5 c0       	rjmp	.+458    	; 0x550a <set+0x27c>
    5340:	2c 36       	cpi	r18, 0x6C	; 108
    5342:	09 f4       	brne	.+2      	; 0x5346 <set+0xb8>
    5344:	5d c1       	rjmp	.+698    	; 0x5600 <set+0x372>
    5346:	62 c1       	rjmp	.+708    	; 0x560c <set+0x37e>
    5348:	24 37       	cpi	r18, 0x74	; 116
    534a:	21 f0       	breq	.+8      	; 0x5354 <set+0xc6>
    534c:	25 37       	cpi	r18, 0x75	; 117
    534e:	09 f4       	brne	.+2      	; 0x5352 <set+0xc4>
    5350:	dc c0       	rjmp	.+440    	; 0x550a <set+0x27c>
    5352:	5c c1       	rjmp	.+696    	; 0x560c <set+0x37e>
			}
			break;
*/

		case 't':		// Time
			if (strlen(pcmd[cstack].cvalue) != 19) {
    5354:	44 e3       	ldi	r20, 0x34	; 52
    5356:	48 9f       	mul	r20, r24
    5358:	90 01       	movw	r18, r0
    535a:	49 9f       	mul	r20, r25
    535c:	30 0d       	add	r19, r0
    535e:	11 24       	eor	r1, r1
    5360:	c9 01       	movw	r24, r18
    5362:	8f 5e       	subi	r24, 0xEF	; 239
    5364:	97 4d       	sbci	r25, 0xD7	; 215
    5366:	7c 01       	movw	r14, r24
    5368:	fc 01       	movw	r30, r24
    536a:	01 90       	ld	r0, Z+
    536c:	00 20       	and	r0, r0
    536e:	e9 f7       	brne	.-6      	; 0x536a <set+0xdc>
    5370:	31 97       	sbiw	r30, 0x01	; 1
    5372:	e8 1b       	sub	r30, r24
    5374:	f9 0b       	sbc	r31, r25
    5376:	73 97       	sbiw	r30, 0x13	; 19
    5378:	b9 f0       	breq	.+46     	; 0x53a8 <set+0x11a>
				sprintf(strbuf, fmt1);
    537a:	ce 01       	movw	r24, r28
    537c:	8f 58       	subi	r24, 0x8F	; 143
    537e:	9f 4f       	sbci	r25, 0xFF	; 255
    5380:	9f 93       	push	r25
    5382:	8f 93       	push	r24
    5384:	8e 01       	movw	r16, r28
    5386:	0f 5f       	subi	r16, 0xFF	; 255
    5388:	1f 4f       	sbci	r17, 0xFF	; 255
    538a:	1f 93       	push	r17
    538c:	0f 93       	push	r16
    538e:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
				printError(ERR_SETTIME, strbuf);
    5392:	b8 01       	movw	r22, r16
    5394:	8a e5       	ldi	r24, 0x5A	; 90
    5396:	92 e0       	ldi	r25, 0x02	; 2
    5398:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				return(ERROR);
    539c:	0f 90       	pop	r0
    539e:	0f 90       	pop	r0
    53a0:	0f 90       	pop	r0
    53a2:	0f 90       	pop	r0
    53a4:	13 e6       	ldi	r17, 0x63	; 99
    53a6:	4a c1       	rjmp	.+660    	; 0x563c <set+0x3ae>
			}
			if (put_time(pcmd[cstack].cvalue) == ERROR) {
    53a8:	0e 94 b4 07 	call	0xf68	; 0xf68 <put_time>
    53ac:	18 2f       	mov	r17, r24
    53ae:	83 36       	cpi	r24, 0x63	; 99
    53b0:	b1 f4       	brne	.+44     	; 0x53de <set+0x150>
				sprintf(strbuf, fmt2);
    53b2:	ce 01       	movw	r24, r28
    53b4:	8a 57       	subi	r24, 0x7A	; 122
    53b6:	9f 4f       	sbci	r25, 0xFF	; 255
    53b8:	9f 93       	push	r25
    53ba:	8f 93       	push	r24
    53bc:	85 58       	subi	r24, 0x85	; 133
    53be:	91 09       	sbc	r25, r1
    53c0:	7c 01       	movw	r14, r24
    53c2:	9f 93       	push	r25
    53c4:	8f 93       	push	r24
    53c6:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
				printError(ERR_ISO, strbuf);
    53ca:	b7 01       	movw	r22, r14
    53cc:	8b e5       	ldi	r24, 0x5B	; 91
    53ce:	92 e0       	ldi	r25, 0x02	; 2
    53d0:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				return(ERROR);
    53d4:	0f 90       	pop	r0
    53d6:	0f 90       	pop	r0
    53d8:	0f 90       	pop	r0
    53da:	0f 90       	pop	r0
    53dc:	2f c1       	rjmp	.+606    	; 0x563c <set+0x3ae>
			}
			if (write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20) == ERROR) {
    53de:	24 e1       	ldi	r18, 0x14	; 20
    53e0:	a7 01       	movw	r20, r14
    53e2:	60 e0       	ldi	r22, 0x00	; 0
    53e4:	70 e0       	ldi	r23, 0x00	; 0
    53e6:	80 e5       	ldi	r24, 0x50	; 80
    53e8:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write_FRAM>
    53ec:	18 2f       	mov	r17, r24
    53ee:	83 36       	cpi	r24, 0x63	; 99
    53f0:	09 f0       	breq	.+2      	; 0x53f4 <set+0x166>
    53f2:	23 c1       	rjmp	.+582    	; 0x563a <set+0x3ac>
				sprintf(strbuf, fmt3);
    53f4:	ce 01       	movw	r24, r28
    53f6:	86 56       	subi	r24, 0x66	; 102
    53f8:	9f 4f       	sbci	r25, 0xFF	; 255
    53fa:	9f 93       	push	r25
    53fc:	8f 93       	push	r24
    53fe:	89 59       	subi	r24, 0x99	; 153
    5400:	91 09       	sbc	r25, r1
    5402:	7c 01       	movw	r14, r24
    5404:	9f 93       	push	r25
    5406:	8f 93       	push	r24
    5408:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
				printError(ERR_ISO, strbuf);
    540c:	b7 01       	movw	r22, r14
    540e:	8b e5       	ldi	r24, 0x5B	; 91
    5410:	92 e0       	ldi	r25, 0x02	; 2
    5412:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
				return(ERROR);
    5416:	0f 90       	pop	r0
    5418:	0f 90       	pop	r0
    541a:	0f 90       	pop	r0
    541c:	0f 90       	pop	r0
    541e:	0e c1       	rjmp	.+540    	; 0x563c <set+0x3ae>
			break;

		case 'u':		// Unsafe motor encoder limits
		case 'L':
			for (i = 0; i < NMOTORS; i++) {
				mtraddr = i + MOTOR_A;
    5420:	68 94       	set
    5422:	ff 24       	eor	r15, r15
    5424:	f7 f8       	bld	r15, 7
    5426:	f0 0e       	add	r15, r16
				if (get_MOTOR_PID(mtraddr, &motorPID) == ERROR) {
    5428:	be 01       	movw	r22, r28
    542a:	6f 5a       	subi	r22, 0xAF	; 175
    542c:	7f 4f       	sbci	r23, 0xFF	; 255
    542e:	8f 2d       	mov	r24, r15
    5430:	0e 94 8c 1c 	call	0x3918	; 0x3918 <get_MOTOR_PID>
    5434:	18 2f       	mov	r17, r24
    5436:	83 36       	cpi	r24, 0x63	; 99
    5438:	e9 f4       	brne	.+58     	; 0x5474 <set+0x1e6>
					sprintf(strbuf, fmt6, mtraddr - 31);
    543a:	8f 2d       	mov	r24, r15
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	4f 97       	sbiw	r24, 0x1f	; 31
    5440:	9f 93       	push	r25
    5442:	8f 93       	push	r24
    5444:	ce 01       	movw	r24, r28
    5446:	85 54       	subi	r24, 0x45	; 69
    5448:	9f 4f       	sbci	r25, 0xFF	; 255
    544a:	9f 93       	push	r25
    544c:	8f 93       	push	r24
    544e:	8a 5b       	subi	r24, 0xBA	; 186
    5450:	91 09       	sbc	r25, r1
    5452:	7c 01       	movw	r14, r24
    5454:	9f 93       	push	r25
    5456:	8f 93       	push	r24
    5458:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
					printError(ERR_MTR, strbuf);
    545c:	b7 01       	movw	r22, r14
    545e:	86 e3       	ldi	r24, 0x36	; 54
    5460:	91 e0       	ldi	r25, 0x01	; 1
    5462:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
					return(ERROR);
    5466:	0f 90       	pop	r0
    5468:	0f 90       	pop	r0
    546a:	0f 90       	pop	r0
    546c:	0f 90       	pop	r0
    546e:	0f 90       	pop	r0
    5470:	0f 90       	pop	r0
    5472:	e4 c0       	rjmp	.+456    	; 0x563c <set+0x3ae>
				}
				motorPID.minPos = PID_MINPOSUNSAFE;
    5474:	80 ee       	ldi	r24, 0xE0	; 224
    5476:	9e e5       	ldi	r25, 0x5E	; 94
    5478:	a8 ef       	ldi	r26, 0xF8	; 248
    547a:	bf ef       	ldi	r27, 0xFF	; 255
    547c:	a9 96       	adiw	r28, 0x29	; 41
    547e:	8c af       	std	Y+60, r24	; 0x3c
    5480:	9d af       	std	Y+61, r25	; 0x3d
    5482:	ae af       	std	Y+62, r26	; 0x3e
    5484:	bf af       	std	Y+63, r27	; 0x3f
    5486:	a9 97       	sbiw	r28, 0x29	; 41
				motorPID.maxPos = PID_MAXPOSUNSAFE;
    5488:	80 e4       	ldi	r24, 0x40	; 64
    548a:	92 e4       	ldi	r25, 0x42	; 66
    548c:	af e0       	ldi	r26, 0x0F	; 15
    548e:	b0 e0       	ldi	r27, 0x00	; 0
    5490:	ad 96       	adiw	r28, 0x2d	; 45
    5492:	8c af       	std	Y+60, r24	; 0x3c
    5494:	9d af       	std	Y+61, r25	; 0x3d
    5496:	ae af       	std	Y+62, r26	; 0x3e
    5498:	bf af       	std	Y+63, r27	; 0x3f
    549a:	ad 97       	sbiw	r28, 0x2d	; 45
				if (put_MOTOR_PID(mtraddr, motorPID) == ERROR) {
    549c:	8d b7       	in	r24, 0x3d	; 61
    549e:	9e b7       	in	r25, 0x3e	; 62
    54a0:	80 97       	sbiw	r24, 0x20	; 32
    54a2:	8d bf       	out	0x3d, r24	; 61
    54a4:	9e bf       	out	0x3e, r25	; 62
    54a6:	ad b7       	in	r26, 0x3d	; 61
    54a8:	be b7       	in	r27, 0x3e	; 62
    54aa:	11 96       	adiw	r26, 0x01	; 1
    54ac:	80 e2       	ldi	r24, 0x20	; 32
    54ae:	fe 01       	movw	r30, r28
    54b0:	ef 5a       	subi	r30, 0xAF	; 175
    54b2:	ff 4f       	sbci	r31, 0xFF	; 255
    54b4:	01 90       	ld	r0, Z+
    54b6:	0d 92       	st	X+, r0
    54b8:	8a 95       	dec	r24
    54ba:	e1 f7       	brne	.-8      	; 0x54b4 <set+0x226>
    54bc:	8f 2d       	mov	r24, r15
    54be:	0e 94 d7 25 	call	0x4bae	; 0x4bae <put_MOTOR_PID>
    54c2:	18 2f       	mov	r17, r24
    54c4:	cd bf       	out	0x3d, r28	; 61
    54c6:	de bf       	out	0x3e, r29	; 62
    54c8:	13 36       	cpi	r17, 0x63	; 99
    54ca:	e9 f4       	brne	.+58     	; 0x5506 <set+0x278>
					sprintf(strbuf, fmt7, mtraddr - 31);
    54cc:	8f 2d       	mov	r24, r15
    54ce:	90 e0       	ldi	r25, 0x00	; 0
    54d0:	4f 97       	sbiw	r24, 0x1f	; 31
    54d2:	9f 93       	push	r25
    54d4:	8f 93       	push	r24
    54d6:	ce 01       	movw	r24, r28
    54d8:	86 52       	subi	r24, 0x26	; 38
    54da:	9f 4f       	sbci	r25, 0xFF	; 255
    54dc:	9f 93       	push	r25
    54de:	8f 93       	push	r24
    54e0:	89 5d       	subi	r24, 0xD9	; 217
    54e2:	91 09       	sbc	r25, r1
    54e4:	7c 01       	movw	r14, r24
    54e6:	9f 93       	push	r25
    54e8:	8f 93       	push	r24
    54ea:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
					printError(ERR_MTR, strbuf);
    54ee:	b7 01       	movw	r22, r14
    54f0:	86 e3       	ldi	r24, 0x36	; 54
    54f2:	91 e0       	ldi	r25, 0x01	; 1
    54f4:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
					return(ERROR);
    54f8:	0f 90       	pop	r0
    54fa:	0f 90       	pop	r0
    54fc:	0f 90       	pop	r0
    54fe:	0f 90       	pop	r0
    5500:	0f 90       	pop	r0
    5502:	0f 90       	pop	r0
    5504:	9b c0       	rjmp	.+310    	; 0x563c <set+0x3ae>
			}
			break;

		case 'u':		// Unsafe motor encoder limits
		case 'L':
			for (i = 0; i < NMOTORS; i++) {
    5506:	0f 5f       	subi	r16, 0xFF	; 255
    5508:	01 c0       	rjmp	.+2      	; 0x550c <set+0x27e>
//	const char fmt5[] = "set: encoder value out of range %ld";
	const char fmt6[] = "set: get_MOTOR_PID error on %c";
	const char fmt7[] = "set: put_MOTOR_PID error on %c";

	object = pcmd[cstack].cobject;
	switch(object) {
    550a:	00 e0       	ldi	r16, 0x00	; 0
			}
			break;

		case 'u':		// Unsafe motor encoder limits
		case 'L':
			for (i = 0; i < NMOTORS; i++) {
    550c:	03 30       	cpi	r16, 0x03	; 3
    550e:	08 f4       	brcc	.+2      	; 0x5512 <set+0x284>
    5510:	87 cf       	rjmp	.-242    	; 0x5420 <set+0x192>
			sprintf(strbuf, fmt4);
			printError(ERR_SET, strbuf);
			return(ERROR);
	}

	return(NOERROR);
    5512:	10 e0       	ldi	r17, 0x00	; 0
    5514:	93 c0       	rjmp	.+294    	; 0x563c <set+0x3ae>
			break;

		case 's':		// Safe motor encoder limits
		case 'l':
			for (i = 0; i < NMOTORS; i++) {
				mtraddr = i + MOTOR_A;
    5516:	68 94       	set
    5518:	ff 24       	eor	r15, r15
    551a:	f7 f8       	bld	r15, 7
    551c:	f0 0e       	add	r15, r16
				if (get_MOTOR_PID(mtraddr, &motorPID) == ERROR) {
    551e:	be 01       	movw	r22, r28
    5520:	6f 5a       	subi	r22, 0xAF	; 175
    5522:	7f 4f       	sbci	r23, 0xFF	; 255
    5524:	8f 2d       	mov	r24, r15
    5526:	0e 94 8c 1c 	call	0x3918	; 0x3918 <get_MOTOR_PID>
    552a:	18 2f       	mov	r17, r24
    552c:	83 36       	cpi	r24, 0x63	; 99
    552e:	e9 f4       	brne	.+58     	; 0x556a <set+0x2dc>
					sprintf(strbuf, fmt6, mtraddr - 31);
    5530:	8f 2d       	mov	r24, r15
    5532:	90 e0       	ldi	r25, 0x00	; 0
    5534:	4f 97       	sbiw	r24, 0x1f	; 31
    5536:	9f 93       	push	r25
    5538:	8f 93       	push	r24
    553a:	ce 01       	movw	r24, r28
    553c:	85 54       	subi	r24, 0x45	; 69
    553e:	9f 4f       	sbci	r25, 0xFF	; 255
    5540:	9f 93       	push	r25
    5542:	8f 93       	push	r24
    5544:	8a 5b       	subi	r24, 0xBA	; 186
    5546:	91 09       	sbc	r25, r1
    5548:	7c 01       	movw	r14, r24
    554a:	9f 93       	push	r25
    554c:	8f 93       	push	r24
    554e:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
					printError(ERR_MTR, strbuf);
    5552:	b7 01       	movw	r22, r14
    5554:	86 e3       	ldi	r24, 0x36	; 54
    5556:	91 e0       	ldi	r25, 0x01	; 1
    5558:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
					return(ERROR);
    555c:	0f 90       	pop	r0
    555e:	0f 90       	pop	r0
    5560:	0f 90       	pop	r0
    5562:	0f 90       	pop	r0
    5564:	0f 90       	pop	r0
    5566:	0f 90       	pop	r0
    5568:	69 c0       	rjmp	.+210    	; 0x563c <set+0x3ae>
				}
				motorPID.minPos = PID_MINPOS;
    556a:	80 e8       	ldi	r24, 0x80	; 128
    556c:	98 e3       	ldi	r25, 0x38	; 56
    556e:	a1 e0       	ldi	r26, 0x01	; 1
    5570:	b0 e0       	ldi	r27, 0x00	; 0
    5572:	a9 96       	adiw	r28, 0x29	; 41
    5574:	8c af       	std	Y+60, r24	; 0x3c
    5576:	9d af       	std	Y+61, r25	; 0x3d
    5578:	ae af       	std	Y+62, r26	; 0x3e
    557a:	bf af       	std	Y+63, r27	; 0x3f
    557c:	a9 97       	sbiw	r28, 0x29	; 41
				motorPID.maxPos = PID_MAXPOS;
    557e:	80 e0       	ldi	r24, 0x00	; 0
    5580:	95 e3       	ldi	r25, 0x35	; 53
    5582:	ac e0       	ldi	r26, 0x0C	; 12
    5584:	b0 e0       	ldi	r27, 0x00	; 0
    5586:	ad 96       	adiw	r28, 0x2d	; 45
    5588:	8c af       	std	Y+60, r24	; 0x3c
    558a:	9d af       	std	Y+61, r25	; 0x3d
    558c:	ae af       	std	Y+62, r26	; 0x3e
    558e:	bf af       	std	Y+63, r27	; 0x3f
    5590:	ad 97       	sbiw	r28, 0x2d	; 45
				if (put_MOTOR_PID(mtraddr, motorPID) == ERROR) {
    5592:	8d b7       	in	r24, 0x3d	; 61
    5594:	9e b7       	in	r25, 0x3e	; 62
    5596:	80 97       	sbiw	r24, 0x20	; 32
    5598:	8d bf       	out	0x3d, r24	; 61
    559a:	9e bf       	out	0x3e, r25	; 62
    559c:	ad b7       	in	r26, 0x3d	; 61
    559e:	be b7       	in	r27, 0x3e	; 62
    55a0:	11 96       	adiw	r26, 0x01	; 1
    55a2:	80 e2       	ldi	r24, 0x20	; 32
    55a4:	fe 01       	movw	r30, r28
    55a6:	ef 5a       	subi	r30, 0xAF	; 175
    55a8:	ff 4f       	sbci	r31, 0xFF	; 255
    55aa:	01 90       	ld	r0, Z+
    55ac:	0d 92       	st	X+, r0
    55ae:	8a 95       	dec	r24
    55b0:	e1 f7       	brne	.-8      	; 0x55aa <set+0x31c>
    55b2:	8f 2d       	mov	r24, r15
    55b4:	0e 94 d7 25 	call	0x4bae	; 0x4bae <put_MOTOR_PID>
    55b8:	18 2f       	mov	r17, r24
    55ba:	cd bf       	out	0x3d, r28	; 61
    55bc:	de bf       	out	0x3e, r29	; 62
    55be:	13 36       	cpi	r17, 0x63	; 99
    55c0:	e9 f4       	brne	.+58     	; 0x55fc <set+0x36e>
					sprintf(strbuf, fmt7, mtraddr - 31);
    55c2:	8f 2d       	mov	r24, r15
    55c4:	90 e0       	ldi	r25, 0x00	; 0
    55c6:	4f 97       	sbiw	r24, 0x1f	; 31
    55c8:	9f 93       	push	r25
    55ca:	8f 93       	push	r24
    55cc:	ce 01       	movw	r24, r28
    55ce:	86 52       	subi	r24, 0x26	; 38
    55d0:	9f 4f       	sbci	r25, 0xFF	; 255
    55d2:	9f 93       	push	r25
    55d4:	8f 93       	push	r24
    55d6:	89 5d       	subi	r24, 0xD9	; 217
    55d8:	91 09       	sbc	r25, r1
    55da:	7c 01       	movw	r14, r24
    55dc:	9f 93       	push	r25
    55de:	8f 93       	push	r24
    55e0:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
					printError(ERR_MTR, strbuf);
    55e4:	b7 01       	movw	r22, r14
    55e6:	86 e3       	ldi	r24, 0x36	; 54
    55e8:	91 e0       	ldi	r25, 0x01	; 1
    55ea:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
					return(ERROR);
    55ee:	0f 90       	pop	r0
    55f0:	0f 90       	pop	r0
    55f2:	0f 90       	pop	r0
    55f4:	0f 90       	pop	r0
    55f6:	0f 90       	pop	r0
    55f8:	0f 90       	pop	r0
    55fa:	20 c0       	rjmp	.+64     	; 0x563c <set+0x3ae>
			}
			break;

		case 's':		// Safe motor encoder limits
		case 'l':
			for (i = 0; i < NMOTORS; i++) {
    55fc:	0f 5f       	subi	r16, 0xFF	; 255
    55fe:	01 c0       	rjmp	.+2      	; 0x5602 <set+0x374>
//	const char fmt5[] = "set: encoder value out of range %ld";
	const char fmt6[] = "set: get_MOTOR_PID error on %c";
	const char fmt7[] = "set: put_MOTOR_PID error on %c";

	object = pcmd[cstack].cobject;
	switch(object) {
    5600:	00 e0       	ldi	r16, 0x00	; 0
			}
			break;

		case 's':		// Safe motor encoder limits
		case 'l':
			for (i = 0; i < NMOTORS; i++) {
    5602:	03 30       	cpi	r16, 0x03	; 3
    5604:	08 f4       	brcc	.+2      	; 0x5608 <set+0x37a>
    5606:	87 cf       	rjmp	.-242    	; 0x5516 <set+0x288>
			sprintf(strbuf, fmt4);
			printError(ERR_SET, strbuf);
			return(ERROR);
	}

	return(NOERROR);
    5608:	10 e0       	ldi	r17, 0x00	; 0
    560a:	18 c0       	rjmp	.+48     	; 0x563c <set+0x3ae>
				}
			}
			break;

		default:
			sprintf(strbuf, fmt4);
    560c:	ce 01       	movw	r24, r28
    560e:	80 55       	subi	r24, 0x50	; 80
    5610:	9f 4f       	sbci	r25, 0xFF	; 255
    5612:	9f 93       	push	r25
    5614:	8f 93       	push	r24
    5616:	8e 01       	movw	r16, r28
    5618:	0f 5f       	subi	r16, 0xFF	; 255
    561a:	1f 4f       	sbci	r17, 0xFF	; 255
    561c:	1f 93       	push	r17
    561e:	0f 93       	push	r16
    5620:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
			printError(ERR_SET, strbuf);
    5624:	b8 01       	movw	r22, r16
    5626:	89 e5       	ldi	r24, 0x59	; 89
    5628:	92 e0       	ldi	r25, 0x02	; 2
    562a:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
			return(ERROR);
    562e:	0f 90       	pop	r0
    5630:	0f 90       	pop	r0
    5632:	0f 90       	pop	r0
    5634:	0f 90       	pop	r0
    5636:	13 e6       	ldi	r17, 0x63	; 99
    5638:	01 c0       	rjmp	.+2      	; 0x563c <set+0x3ae>
	}

	return(NOERROR);
    563a:	10 e0       	ldi	r17, 0x00	; 0

}
    563c:	81 2f       	mov	r24, r17
    563e:	c8 50       	subi	r28, 0x08	; 8
    5640:	df 4f       	sbci	r29, 0xFF	; 255
    5642:	cd bf       	out	0x3d, r28	; 61
    5644:	de bf       	out	0x3e, r29	; 62
    5646:	df 91       	pop	r29
    5648:	cf 91       	pop	r28
    564a:	1f 91       	pop	r17
    564c:	0f 91       	pop	r16
    564e:	ff 90       	pop	r15
    5650:	ef 90       	pop	r14
    5652:	08 95       	ret

00005654 <get_temperature>:
	point for the actual devices.

	The signal is 1.5E-3 mV/K with a 1500 kOhm dropping resistor.
------------------------------------------------------------------------------*/
float get_temperature(uint8_t sensor)
{
    5654:	cf 93       	push	r28
    5656:	df 93       	push	r29
    5658:	00 d0       	rcall	.+0      	; 0x565a <get_temperature+0x6>
    565a:	00 d0       	rcall	.+0      	; 0x565c <get_temperature+0x8>
    565c:	cd b7       	in	r28, 0x3d	; 61
    565e:	de b7       	in	r29, 0x3e	; 62

	float temperature;

	switch (sensor) {
    5660:	83 30       	cpi	r24, 0x03	; 3
    5662:	18 f0       	brcs	.+6      	; 0x566a <get_temperature+0x16>
    5664:	83 30       	cpi	r24, 0x03	; 3
    5666:	39 f0       	breq	.+14     	; 0x5676 <get_temperature+0x22>
    5668:	0b c0       	rjmp	.+22     	; 0x5680 <get_temperature+0x2c>
		case 0:
		case 1:
		case 2:
			read_AD590(sensor, &temperature);
    566a:	be 01       	movw	r22, r28
    566c:	6f 5f       	subi	r22, 0xFF	; 255
    566e:	7f 4f       	sbci	r23, 0xFF	; 255
    5670:	0e 94 48 01 	call	0x290	; 0x290 <read_AD590>
			break;
    5674:	0d c0       	rjmp	.+26     	; 0x5690 <get_temperature+0x3c>

		case 3:
			read_MCP9808(&temperature);
    5676:	ce 01       	movw	r24, r28
    5678:	01 96       	adiw	r24, 0x01	; 1
    567a:	0e 94 03 0b 	call	0x1606	; 0x1606 <read_MCP9808>
			break;
    567e:	08 c0       	rjmp	.+16     	; 0x5690 <get_temperature+0x3c>

		default:
			temperature = BADFLOAT;
    5680:	80 e0       	ldi	r24, 0x00	; 0
    5682:	90 e8       	ldi	r25, 0x80	; 128
    5684:	a6 e2       	ldi	r26, 0x26	; 38
    5686:	b4 ec       	ldi	r27, 0xC4	; 196
    5688:	89 83       	std	Y+1, r24	; 0x01
    568a:	9a 83       	std	Y+2, r25	; 0x02
    568c:	ab 83       	std	Y+3, r26	; 0x03
    568e:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}

	if (temperature < -50.0) {
    5690:	69 81       	ldd	r22, Y+1	; 0x01
    5692:	7a 81       	ldd	r23, Y+2	; 0x02
    5694:	8b 81       	ldd	r24, Y+3	; 0x03
    5696:	9c 81       	ldd	r25, Y+4	; 0x04
    5698:	20 e0       	ldi	r18, 0x00	; 0
    569a:	30 e0       	ldi	r19, 0x00	; 0
    569c:	48 e4       	ldi	r20, 0x48	; 72
    569e:	52 ec       	ldi	r21, 0xC2	; 194
    56a0:	0e 94 ec 2f 	call	0x5fd8	; 0x5fd8 <__cmpsf2>
    56a4:	88 23       	and	r24, r24
    56a6:	44 f4       	brge	.+16     	; 0x56b8 <get_temperature+0x64>
		temperature = BADFLOAT;
    56a8:	80 e0       	ldi	r24, 0x00	; 0
    56aa:	90 e8       	ldi	r25, 0x80	; 128
    56ac:	a6 e2       	ldi	r26, 0x26	; 38
    56ae:	b4 ec       	ldi	r27, 0xC4	; 196
    56b0:	89 83       	std	Y+1, r24	; 0x01
    56b2:	9a 83       	std	Y+2, r25	; 0x02
    56b4:	ab 83       	std	Y+3, r26	; 0x03
    56b6:	bc 83       	std	Y+4, r27	; 0x04
	}

	return(temperature);
    56b8:	69 81       	ldd	r22, Y+1	; 0x01
    56ba:	7a 81       	ldd	r23, Y+2	; 0x02
    56bc:	8b 81       	ldd	r24, Y+3	; 0x03
    56be:	9c 81       	ldd	r25, Y+4	; 0x04

}
    56c0:	24 96       	adiw	r28, 0x04	; 4
    56c2:	cd bf       	out	0x3d, r28	; 61
    56c4:	de bf       	out	0x3e, r29	; 62
    56c6:	df 91       	pop	r29
    56c8:	cf 91       	pop	r28
    56ca:	08 95       	ret

000056cc <testroutine>:
#include "initialize.h"
#include "commands.h"
#include "errors.h"

void testroutine(void)
{
    56cc:	0f 93       	push	r16
    56ce:	1f 93       	push	r17
    56d0:	cf 93       	push	r28
    56d2:	df 93       	push	r29
    56d4:	cd b7       	in	r28, 0x3d	; 61
    56d6:	de b7       	in	r29, 0x3e	; 62
    56d8:	c0 55       	subi	r28, 0x50	; 80
    56da:	d1 09       	sbc	r29, r1
    56dc:	cd bf       	out	0x3d, r28	; 61
    56de:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	uint8_t i;

	i = unstick_MOTOR_LIMIT('c');
    56e0:	83 e6       	ldi	r24, 0x63	; 99
    56e2:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <unstick_MOTOR_LIMIT>
	sprintf(strbuf, "unstick_MOTOR_LIMIT returned %d", i);
    56e6:	1f 92       	push	r1
    56e8:	8f 93       	push	r24
    56ea:	8e e2       	ldi	r24, 0x2E	; 46
    56ec:	9c eb       	ldi	r25, 0xBC	; 188
    56ee:	9f 93       	push	r25
    56f0:	8f 93       	push	r24
    56f2:	8e 01       	movw	r16, r28
    56f4:	0f 5f       	subi	r16, 0xFF	; 255
    56f6:	1f 4f       	sbci	r17, 0xFF	; 255
    56f8:	1f 93       	push	r17
    56fa:	0f 93       	push	r16
    56fc:	0e 94 92 37 	call	0x6f24	; 0x6f24 <sprintf>
	printLine(strbuf);
    5700:	c8 01       	movw	r24, r16
    5702:	0e 94 81 03 	call	0x702	; 0x702 <printLine>
	get_MOTOR_MAXCURRENT(130, &value);
---*/

//	stop_MOTOR(128);

    5706:	0f 90       	pop	r0
    5708:	0f 90       	pop	r0
    570a:	0f 90       	pop	r0
    570c:	0f 90       	pop	r0
    570e:	0f 90       	pop	r0
    5710:	0f 90       	pop	r0
    5712:	c0 5b       	subi	r28, 0xB0	; 176
    5714:	df 4f       	sbci	r29, 0xFF	; 255
    5716:	cd bf       	out	0x3d, r28	; 61
    5718:	de bf       	out	0x3e, r29	; 62
    571a:	df 91       	pop	r29
    571c:	cf 91       	pop	r28
    571e:	1f 91       	pop	r17
    5720:	0f 91       	pop	r16
    5722:	08 95       	ret

00005724 <init_RTC>:
	Turn off the TCB0 timer
------------------------------------------------------------------------------*/
void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    5724:	ac 01       	movw	r20, r24
    5726:	e0 e6       	ldi	r30, 0x60	; 96
    5728:	f0 e0       	ldi	r31, 0x00	; 0
    572a:	94 8d       	ldd	r25, Z+28	; 0x1c
    572c:	9e 7f       	andi	r25, 0xFE	; 254
    572e:	88 ed       	ldi	r24, 0xD8	; 216
    5730:	84 bf       	out	0x34, r24	; 52
    5732:	94 8f       	std	Z+28, r25	; 0x1c
    5734:	01 c0       	rjmp	.+2      	; 0x5738 <init_RTC+0x14>
    5736:	00 00       	nop
    5738:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    573c:	96 fd       	sbrc	r25, 6
    573e:	fb cf       	rjmp	.-10     	; 0x5736 <init_RTC+0x12>
    5740:	e0 e6       	ldi	r30, 0x60	; 96
    5742:	f0 e0       	ldi	r31, 0x00	; 0
    5744:	94 8d       	ldd	r25, Z+28	; 0x1c
    5746:	9b 7f       	andi	r25, 0xFB	; 251
    5748:	28 ed       	ldi	r18, 0xD8	; 216
    574a:	24 bf       	out	0x34, r18	; 52
    574c:	94 8f       	std	Z+28, r25	; 0x1c
    574e:	94 8d       	ldd	r25, Z+28	; 0x1c
    5750:	91 60       	ori	r25, 0x01	; 1
    5752:	24 bf       	out	0x34, r18	; 52
    5754:	94 8f       	std	Z+28, r25	; 0x1c
    5756:	01 c0       	rjmp	.+2      	; 0x575a <init_RTC+0x36>
    5758:	00 00       	nop
    575a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    575e:	91 11       	cpse	r25, r1
    5760:	fb cf       	rjmp	.-10     	; 0x5758 <init_RTC+0x34>
    5762:	e0 e4       	ldi	r30, 0x40	; 64
    5764:	f1 e0       	ldi	r31, 0x01	; 1
    5766:	42 87       	std	Z+10, r20	; 0x0a
    5768:	53 87       	std	Z+11, r21	; 0x0b
    576a:	82 e0       	ldi	r24, 0x02	; 2
    576c:	87 83       	std	Z+7, r24	; 0x07
    576e:	85 81       	ldd	r24, Z+5	; 0x05
    5770:	81 60       	ori	r24, 0x01	; 1
    5772:	85 83       	std	Z+5, r24	; 0x05
    5774:	81 eb       	ldi	r24, 0xB1	; 177
    5776:	80 83       	st	Z, r24
    5778:	82 81       	ldd	r24, Z+2	; 0x02
    577a:	81 60       	ori	r24, 0x01	; 1
    577c:	82 83       	std	Z+2, r24	; 0x02
    577e:	81 e2       	ldi	r24, 0x21	; 33
    5780:	80 8b       	std	Z+16, r24	; 0x10
    5782:	81 e0       	ldi	r24, 0x01	; 1
    5784:	82 8b       	std	Z+18, r24	; 0x12
    5786:	08 95       	ret

00005788 <__vector_3>:
    5788:	1f 92       	push	r1
    578a:	0f 92       	push	r0
    578c:	0f b6       	in	r0, 0x3f	; 63
    578e:	0f 92       	push	r0
    5790:	11 24       	eor	r1, r1
    5792:	8f 93       	push	r24
    5794:	9f 93       	push	r25
    5796:	81 e0       	ldi	r24, 0x01	; 1
    5798:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>
    579c:	80 91 18 2a 	lds	r24, 0x2A18	; 0x802a18 <timerOLED>
    57a0:	90 91 19 2a 	lds	r25, 0x2A19	; 0x802a19 <timerOLED+0x1>
    57a4:	01 96       	adiw	r24, 0x01	; 1
    57a6:	80 93 18 2a 	sts	0x2A18, r24	; 0x802a18 <timerOLED>
    57aa:	90 93 19 2a 	sts	0x2A19, r25	; 0x802a19 <timerOLED+0x1>
    57ae:	80 e2       	ldi	r24, 0x20	; 32
    57b0:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>
    57b4:	80 91 3c 2a 	lds	r24, 0x2A3C	; 0x802a3c <timerSAVEENCODER>
    57b8:	8f 5f       	subi	r24, 0xFF	; 255
    57ba:	80 93 3c 2a 	sts	0x2A3C, r24	; 0x802a3c <timerSAVEENCODER>
    57be:	9f 91       	pop	r25
    57c0:	8f 91       	pop	r24
    57c2:	0f 90       	pop	r0
    57c4:	0f be       	out	0x3f, r0	; 63
    57c6:	0f 90       	pop	r0
    57c8:	1f 90       	pop	r1
    57ca:	18 95       	reti

000057cc <__vector_4>:
    57cc:	1f 92       	push	r1
    57ce:	0f 92       	push	r0
    57d0:	0f b6       	in	r0, 0x3f	; 63
    57d2:	0f 92       	push	r0
    57d4:	11 24       	eor	r1, r1
    57d6:	8f 93       	push	r24
    57d8:	9f 93       	push	r25
    57da:	81 e0       	ldi	r24, 0x01	; 1
    57dc:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7f4153>
    57e0:	80 91 0b 28 	lds	r24, 0x280B	; 0x80280b <testTicks>
    57e4:	90 91 0c 28 	lds	r25, 0x280C	; 0x80280c <testTicks+0x1>
    57e8:	01 96       	adiw	r24, 0x01	; 1
    57ea:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <testTicks>
    57ee:	90 93 0c 28 	sts	0x280C, r25	; 0x80280c <testTicks+0x1>
    57f2:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    57f6:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    57fa:	01 96       	adiw	r24, 0x01	; 1
    57fc:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <USART0_ticks>
    5800:	90 93 04 28 	sts	0x2804, r25	; 0x802804 <USART0_ticks+0x1>
    5804:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    5808:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    580c:	01 96       	adiw	r24, 0x01	; 1
    580e:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <USART1_ticks>
    5812:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <USART1_ticks+0x1>
    5816:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <USART3_ticks>
    581a:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <USART3_ticks+0x1>
    581e:	01 96       	adiw	r24, 0x01	; 1
    5820:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <USART3_ticks>
    5824:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <USART3_ticks+0x1>
    5828:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    582c:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    5830:	01 96       	adiw	r24, 0x01	; 1
    5832:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <TWI_ticks>
    5836:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <TWI_ticks+0x1>
    583a:	9f 91       	pop	r25
    583c:	8f 91       	pop	r24
    583e:	0f 90       	pop	r0
    5840:	0f be       	out	0x3f, r0	; 63
    5842:	0f 90       	pop	r0
    5844:	1f 90       	pop	r1
    5846:	18 95       	reti

00005848 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    5848:	1f 92       	push	r1
    584a:	0f 92       	push	r0
    584c:	0f b6       	in	r0, 0x3f	; 63
    584e:	0f 92       	push	r0
    5850:	11 24       	eor	r1, r1
    5852:	8f 93       	push	r24

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    5854:	81 e0       	ldi	r24, 0x01	; 1
    5856:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>

    585a:	8f 91       	pop	r24
    585c:	0f 90       	pop	r0
    585e:	0f be       	out	0x3f, r0	; 63
    5860:	0f 90       	pop	r0
    5862:	1f 90       	pop	r1
    5864:	18 95       	reti

00005866 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    5866:	e0 ea       	ldi	r30, 0xA0	; 160
    5868:	f8 e0       	ldi	r31, 0x08	; 8
    586a:	87 e0       	ldi	r24, 0x07	; 7
    586c:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    586e:	83 81       	ldd	r24, Z+3	; 0x03
    5870:	81 60       	ori	r24, 0x01	; 1
    5872:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    5874:	85 81       	ldd	r24, Z+5	; 0x05
    5876:	81 60       	ori	r24, 0x01	; 1
    5878:	85 83       	std	Z+5, r24	; 0x05
    587a:	08 95       	ret

0000587c <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    587c:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    5880:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    5884:	0f c0       	rjmp	.+30     	; 0x58a4 <read_TWI+0x28>
		asm("nop");
    5886:	00 00       	nop
		if (TWI_ticks > 50) {					// Typically 0 ticks needed
    5888:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    588c:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    5890:	c3 97       	sbiw	r24, 0x33	; 51
    5892:	40 f0       	brcs	.+16     	; 0x58a4 <read_TWI+0x28>
			printError(ERR_TWI, "read_TWI timeout");
    5894:	6e e4       	ldi	r22, 0x4E	; 78
    5896:	7c eb       	ldi	r23, 0xBC	; 188
    5898:	81 e9       	ldi	r24, 0x91	; 145
    589a:	91 e0       	ldi	r25, 0x01	; 1
    589c:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
//			stop_TCB0();
			return(0xFF);
    58a0:	8f ef       	ldi	r24, 0xFF	; 255
    58a2:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    58a4:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    58a8:	88 23       	and	r24, r24
    58aa:	6c f7       	brge	.-38     	; 0x5886 <read_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK
    58ac:	e0 ea       	ldi	r30, 0xA0	; 160
    58ae:	f8 e0       	ldi	r31, 0x08	; 8
    58b0:	84 81       	ldd	r24, Z+4	; 0x04
    58b2:	8b 7f       	andi	r24, 0xFB	; 251
    58b4:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;							// Next read
    58b6:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    58b8:	94 81       	ldd	r25, Z+4	; 0x04
    58ba:	92 60       	ori	r25, 0x02	; 2
    58bc:	94 83       	std	Z+4, r25	; 0x04

	return(data);

}
    58be:	08 95       	ret

000058c0 <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    58c0:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    58c4:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    58c8:	0f c0       	rjmp	.+30     	; 0x58e8 <readlast_TWI+0x28>
		asm("nop");
    58ca:	00 00       	nop
		if (TWI_ticks > 50) {						// Typically 0 ticks needed
    58cc:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    58d0:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    58d4:	c3 97       	sbiw	r24, 0x33	; 51
    58d6:	40 f0       	brcs	.+16     	; 0x58e8 <readlast_TWI+0x28>
			printError(ERR_TWI, "readlast timeout");
    58d8:	6f e5       	ldi	r22, 0x5F	; 95
    58da:	7c eb       	ldi	r23, 0xBC	; 188
    58dc:	81 e9       	ldi	r24, 0x91	; 145
    58de:	91 e0       	ldi	r25, 0x01	; 1
    58e0:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
//			stop_TCB0();
			return(0xFF);
    58e4:	8f ef       	ldi	r24, 0xFF	; 255
    58e6:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    58e8:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    58ec:	88 23       	and	r24, r24
    58ee:	6c f7       	brge	.-38     	; 0x58ca <readlast_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    58f0:	e0 ea       	ldi	r30, 0xA0	; 160
    58f2:	f8 e0       	ldi	r31, 0x08	; 8
    58f4:	84 81       	ldd	r24, Z+4	; 0x04
    58f6:	84 60       	ori	r24, 0x04	; 4
    58f8:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    58fa:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    58fc:	08 95       	ret

000058fe <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    58fe:	61 30       	cpi	r22, 0x01	; 1
    5900:	39 f4       	brne	.+14     	; 0x5910 <start_TWI+0x12>
		TWI0.MADDR = ((addr << 1) | 0x01);
    5902:	90 e0       	ldi	r25, 0x00	; 0
    5904:	88 0f       	add	r24, r24
    5906:	99 1f       	adc	r25, r25
    5908:	81 60       	ori	r24, 0x01	; 1
    590a:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    590e:	03 c0       	rjmp	.+6      	; 0x5916 <start_TWI+0x18>
	} else {
		TWI0.MADDR = (addr << 1);
    5910:	88 0f       	add	r24, r24
    5912:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

	TWI_ticks = 0;
    5916:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    591a:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    591e:	0f c0       	rjmp	.+30     	; 0x593e <start_TWI+0x40>
		asm("nop");								// Wait for addr transmission
    5920:	00 00       	nop
		if (TWI_ticks > 50) {
    5922:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    5926:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    592a:	c3 97       	sbiw	r24, 0x33	; 51
    592c:	40 f0       	brcs	.+16     	; 0x593e <start_TWI+0x40>
			printError(ERR_TWI, "TWI start timeout");
    592e:	60 e7       	ldi	r22, 0x70	; 112
    5930:	7c eb       	ldi	r23, 0xBC	; 188
    5932:	81 e9       	ldi	r24, 0x91	; 145
    5934:	91 e0       	ldi	r25, 0x01	; 1
    5936:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
//			stop_TCB0();
			return(ERROR);
    593a:	83 e6       	ldi	r24, 0x63	; 99
    593c:	08 95       	ret
		TWI0.MADDR = (addr << 1);
	}

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    593e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5942:	80 7c       	andi	r24, 0xC0	; 192
    5944:	69 f3       	breq	.-38     	; 0x5920 <start_TWI+0x22>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    5946:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    594a:	82 ff       	sbrs	r24, 2
    594c:	08 c0       	rjmp	.+16     	; 0x595e <start_TWI+0x60>
		printError(ERR_TWI, "TWI bus");
    594e:	62 e8       	ldi	r22, 0x82	; 130
    5950:	7c eb       	ldi	r23, 0xBC	; 188
    5952:	81 e9       	ldi	r24, 0x91	; 145
    5954:	91 e0       	ldi	r25, 0x01	; 1
    5956:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		return(ERROR);
    595a:	83 e6       	ldi	r24, 0x63	; 99
    595c:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    595e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5962:	83 ff       	sbrs	r24, 3
    5964:	08 c0       	rjmp	.+16     	; 0x5976 <start_TWI+0x78>
		printError(ERR_TWI, "TWI arbitration");
    5966:	6a e8       	ldi	r22, 0x8A	; 138
    5968:	7c eb       	ldi	r23, 0xBC	; 188
    596a:	81 e9       	ldi	r24, 0x91	; 145
    596c:	91 e0       	ldi	r25, 0x01	; 1
    596e:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		return(ERROR);
    5972:	83 e6       	ldi	r24, 0x63	; 99
    5974:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    5976:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    597a:	89 2f       	mov	r24, r25
    597c:	80 71       	andi	r24, 0x10	; 16
    597e:	94 ff       	sbrs	r25, 4
    5980:	07 c0       	rjmp	.+14     	; 0x5990 <start_TWI+0x92>
		printError(ERR_TWI, "TWI no device responded");
    5982:	6a e9       	ldi	r22, 0x9A	; 154
    5984:	7c eb       	ldi	r23, 0xBC	; 188
    5986:	81 e9       	ldi	r24, 0x91	; 145
    5988:	91 e0       	ldi	r25, 0x01	; 1
    598a:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		return(ERROR);
    598e:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    5990:	08 95       	ret

00005992 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    5992:	87 e0       	ldi	r24, 0x07	; 7
    5994:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    5998:	08 95       	ret

0000599a <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
    599a:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    599e:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    59a2:	10 c0       	rjmp	.+32     	; 0x59c4 <write_TWI+0x2a>
		asm("nop");
    59a4:	00 00       	nop
		if (TWI_ticks > 50) {
    59a6:	20 91 05 28 	lds	r18, 0x2805	; 0x802805 <TWI_ticks>
    59aa:	30 91 06 28 	lds	r19, 0x2806	; 0x802806 <TWI_ticks+0x1>
    59ae:	23 33       	cpi	r18, 0x33	; 51
    59b0:	31 05       	cpc	r19, r1
    59b2:	40 f0       	brcs	.+16     	; 0x59c4 <write_TWI+0x2a>
			printError(ERR_TWI, "write_TWI error1");
    59b4:	62 eb       	ldi	r22, 0xB2	; 178
    59b6:	7c eb       	ldi	r23, 0xBC	; 188
    59b8:	81 e9       	ldi	r24, 0x91	; 145
    59ba:	91 e0       	ldi	r25, 0x01	; 1
    59bc:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
//			stop_TCB0();
			return(ERROR);
    59c0:	83 e6       	ldi	r24, 0x63	; 99
    59c2:	08 95       	ret
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    59c4:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    59c8:	96 ff       	sbrs	r25, 6
    59ca:	ec cf       	rjmp	.-40     	; 0x59a4 <write_TWI+0xa>
			return(ERROR);
		}
	}
//	stop_TCB0();

	TWI0.MDATA = data;
    59cc:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	TWI_ticks = 0;
    59d0:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    59d4:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    59d8:	0f c0       	rjmp	.+30     	; 0x59f8 <write_TWI+0x5e>
		asm("nop");
    59da:	00 00       	nop
		if (TWI_ticks > 50) {
    59dc:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    59e0:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    59e4:	c3 97       	sbiw	r24, 0x33	; 51
    59e6:	40 f0       	brcs	.+16     	; 0x59f8 <write_TWI+0x5e>
			printError(ERR_TWI, "write_TWI error2");
    59e8:	63 ec       	ldi	r22, 0xC3	; 195
    59ea:	7c eb       	ldi	r23, 0xBC	; 188
    59ec:	81 e9       	ldi	r24, 0x91	; 145
    59ee:	91 e0       	ldi	r25, 0x01	; 1
    59f0:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
//			stop_TCB0();
			return(ERROR);
    59f4:	83 e6       	ldi	r24, 0x63	; 99
    59f6:	08 95       	ret

	TWI0.MDATA = data;

	TWI_ticks = 0;
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    59f8:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    59fc:	86 ff       	sbrs	r24, 6
    59fe:	ed cf       	rjmp	.-38     	; 0x59da <write_TWI+0x40>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    5a00:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5a04:	89 2f       	mov	r24, r25
    5a06:	80 71       	andi	r24, 0x10	; 16
    5a08:	94 ff       	sbrs	r25, 4
    5a0a:	07 c0       	rjmp	.+14     	; 0x5a1a <write_TWI+0x80>
		printError(ERR_TWI, "ACK not received");
    5a0c:	64 ed       	ldi	r22, 0xD4	; 212
    5a0e:	7c eb       	ldi	r23, 0xBC	; 188
    5a10:	81 e9       	ldi	r24, 0x91	; 145
    5a12:	91 e0       	ldi	r25, 0x01	; 1
    5a14:	0e 94 35 08 	call	0x106a	; 0x106a <printError>
		return(ERROR);
    5a18:	83 e6       	ldi	r24, 0x63	; 99
	} else {
		return(NOERROR);
	}

}
    5a1a:	08 95       	ret

00005a1c <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    5a1c:	e0 e0       	ldi	r30, 0x00	; 0
    5a1e:	f4 e0       	ldi	r31, 0x04	; 4
    5a20:	81 e0       	ldi	r24, 0x01	; 1
    5a22:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    5a24:	81 83       	std	Z+1, r24	; 0x01
//	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    5a26:	e0 e0       	ldi	r30, 0x00	; 0
    5a28:	f8 e0       	ldi	r31, 0x08	; 8
    5a2a:	2b e5       	ldi	r18, 0x5B	; 91
    5a2c:	31 e0       	ldi	r19, 0x01	; 1
    5a2e:	20 87       	std	Z+8, r18	; 0x08
    5a30:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    5a32:	95 81       	ldd	r25, Z+5	; 0x05
    5a34:	90 68       	ori	r25, 0x80	; 128
    5a36:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    5a38:	96 81       	ldd	r25, Z+6	; 0x06
    5a3a:	90 64       	ori	r25, 0x40	; 64
    5a3c:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    5a3e:	96 81       	ldd	r25, Z+6	; 0x06
    5a40:	90 68       	ori	r25, 0x80	; 128
    5a42:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;					// Set up send/receive buffers
    5a44:	10 92 49 2f 	sts	0x2F49, r1	; 0x802f49 <send0_buf+0xfe>
	send0_buf.tail = 0;
    5a48:	10 92 4a 2f 	sts	0x2F4A, r1	; 0x802f4a <send0_buf+0xff>
	send0_buf.done = YES;
    5a4c:	80 93 4e 2f 	sts	0x2F4E, r24	; 0x802f4e <send0_buf+0x103>
	recv0_buf.head = 0;
    5a50:	10 92 45 2e 	sts	0x2E45, r1	; 0x802e45 <recv0_buf+0xfe>
	recv0_buf.tail = 0;
    5a54:	10 92 46 2e 	sts	0x2E46, r1	; 0x802e46 <recv0_buf+0xff>
	recv0_buf.data[0] = '\0';
    5a58:	10 92 47 2d 	sts	0x2D47, r1	; 0x802d47 <recv0_buf>
	recv0_buf.length = 0;
    5a5c:	10 92 48 2e 	sts	0x2E48, r1	; 0x802e48 <recv0_buf+0x101>
	recv0_buf.done = NO;
    5a60:	10 92 4a 2e 	sts	0x2E4A, r1	; 0x802e4a <recv0_buf+0x103>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    5a64:	e0 e4       	ldi	r30, 0x40	; 64
    5a66:	f4 e0       	ldi	r31, 0x04	; 4
    5a68:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    5a6a:	81 83       	std	Z+1, r24	; 0x01
//	USART1.BAUD = (uint16_t) USART_BAUD_RATE(9600);
//	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
//	USART1.BAUD = (uint16_t) USART_BAUD_RATE(57600);
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    5a6c:	e0 e2       	ldi	r30, 0x20	; 32
    5a6e:	f8 e0       	ldi	r31, 0x08	; 8
    5a70:	20 87       	std	Z+8, r18	; 0x08
    5a72:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    5a74:	95 81       	ldd	r25, Z+5	; 0x05
    5a76:	90 68       	ori	r25, 0x80	; 128
    5a78:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    5a7a:	96 81       	ldd	r25, Z+6	; 0x06
    5a7c:	90 64       	ori	r25, 0x40	; 64
    5a7e:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    5a80:	96 81       	ldd	r25, Z+6	; 0x06
    5a82:	90 68       	ori	r25, 0x80	; 128
    5a84:	96 83       	std	Z+6, r25	; 0x06

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    5a86:	e0 e2       	ldi	r30, 0x20	; 32
    5a88:	f4 e0       	ldi	r31, 0x04	; 4
    5a8a:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    5a8c:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    5a8e:	e0 e6       	ldi	r30, 0x60	; 96
    5a90:	f8 e0       	ldi	r31, 0x08	; 8
    5a92:	27 e4       	ldi	r18, 0x47	; 71
    5a94:	30 e1       	ldi	r19, 0x10	; 16
    5a96:	20 87       	std	Z+8, r18	; 0x08
    5a98:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    5a9a:	96 81       	ldd	r25, Z+6	; 0x06
    5a9c:	90 64       	ori	r25, 0x40	; 64
    5a9e:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    5aa0:	96 81       	ldd	r25, Z+6	; 0x06
    5aa2:	90 68       	ori	r25, 0x80	; 128
    5aa4:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    5aa6:	80 93 56 31 	sts	0x3156, r24	; 0x803156 <send3_buf+0x103>
	recv3_buf.done = NO;
    5aaa:	10 92 52 30 	sts	0x3052, r1	; 0x803052 <recv3_buf+0x103>
    5aae:	08 95       	ret

00005ab0 <send_USART>:
		"transmit data register empty" interrupt (DREIE). The USARTn_DRE_vect
		puts the bytes into the transmit register until the tail catches up
		to the head of the circular buffer.
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    5ab0:	0f 93       	push	r16
    5ab2:	1f 93       	push	r17
    5ab4:	cf 93       	push	r28
    5ab6:	df 93       	push	r29
    5ab8:	eb 01       	movw	r28, r22
    5aba:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    5abc:	81 30       	cpi	r24, 0x01	; 1
    5abe:	b1 f1       	breq	.+108    	; 0x5b2c <send_USART+0x7c>
    5ac0:	20 f0       	brcs	.+8      	; 0x5aca <send_USART+0x1a>
    5ac2:	83 30       	cpi	r24, 0x03	; 3
    5ac4:	09 f4       	brne	.+2      	; 0x5ac8 <send_USART+0x18>
    5ac6:	81 c0       	rjmp	.+258    	; 0x5bca <send_USART+0x11a>
    5ac8:	88 c0       	rjmp	.+272    	; 0x5bda <send_USART+0x12a>
		case 0:
			send0_buf.done = NO;
    5aca:	10 92 4e 2f 	sts	0x2F4E, r1	; 0x802f4e <send0_buf+0x103>
			for (i = 0; i < nbytes; i++) {
    5ace:	20 e0       	ldi	r18, 0x00	; 0
    5ad0:	11 c0       	rjmp	.+34     	; 0x5af4 <send_USART+0x44>
				send0_buf.data[send0_buf.head] = *data++;
    5ad2:	e9 e4       	ldi	r30, 0x49	; 73
    5ad4:	ff e2       	ldi	r31, 0x2F	; 47
    5ad6:	80 81       	ld	r24, Z
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	38 81       	ld	r19, Y
    5adc:	dc 01       	movw	r26, r24
    5ade:	a5 5b       	subi	r26, 0xB5	; 181
    5ae0:	b1 4d       	sbci	r27, 0xD1	; 209
    5ae2:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    5ae4:	01 96       	adiw	r24, 0x01	; 1
    5ae6:	6e ef       	ldi	r22, 0xFE	; 254
    5ae8:	70 e0       	ldi	r23, 0x00	; 0
    5aea:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <__divmodhi4>
    5aee:	80 83       	st	Z, r24
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    5af0:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    5af2:	21 96       	adiw	r28, 0x01	; 1
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    5af4:	21 17       	cp	r18, r17
    5af6:	68 f3       	brcs	.-38     	; 0x5ad2 <send_USART+0x22>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    5af8:	e0 e0       	ldi	r30, 0x00	; 0
    5afa:	f8 e0       	ldi	r31, 0x08	; 8
    5afc:	85 81       	ldd	r24, Z+5	; 0x05
    5afe:	80 62       	ori	r24, 0x20	; 32
    5b00:	85 83       	std	Z+5, r24	; 0x05
			USART0_ticks = 0;
    5b02:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <USART0_ticks>
    5b06:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <USART0_ticks+0x1>
			while (send0_buf.done == NO) {
    5b0a:	0b c0       	rjmp	.+22     	; 0x5b22 <send_USART+0x72>
				if (USART0_ticks > 100) {				// 1 second enough?
    5b0c:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    5b10:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    5b14:	85 36       	cpi	r24, 0x65	; 101
    5b16:	91 05       	cpc	r25, r1
    5b18:	20 f0       	brcs	.+8      	; 0x5b22 <send_USART+0x72>
					send0_buf.done = YES;
    5b1a:	81 e0       	ldi	r24, 0x01	; 1
    5b1c:	80 93 4e 2f 	sts	0x2F4E, r24	; 0x802f4e <send0_buf+0x103>
					return;
    5b20:	5c c0       	rjmp	.+184    	; 0x5bda <send_USART+0x12a>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			USART0_ticks = 0;
			while (send0_buf.done == NO) {
    5b22:	80 91 4e 2f 	lds	r24, 0x2F4E	; 0x802f4e <send0_buf+0x103>
    5b26:	88 23       	and	r24, r24
    5b28:	89 f3       	breq	.-30     	; 0x5b0c <send_USART+0x5c>
    5b2a:	57 c0       	rjmp	.+174    	; 0x5bda <send_USART+0x12a>
				}
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
    5b2c:	64 2f       	mov	r22, r20
    5b2e:	70 e0       	ldi	r23, 0x00	; 0
    5b30:	ce 01       	movw	r24, r28
    5b32:	0e 94 a4 18 	call	0x3148	; 0x3148 <crc16>
    5b36:	48 2f       	mov	r20, r24
    5b38:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    5b3a:	20 e0       	ldi	r18, 0x00	; 0
    5b3c:	11 c0       	rjmp	.+34     	; 0x5b60 <send_USART+0xb0>
				send1_buf.data[send1_buf.head] = *data++;
    5b3e:	e5 e5       	ldi	r30, 0x55	; 85
    5b40:	f2 e3       	ldi	r31, 0x32	; 50
    5b42:	80 81       	ld	r24, Z
    5b44:	90 e0       	ldi	r25, 0x00	; 0
    5b46:	38 81       	ld	r19, Y
    5b48:	dc 01       	movw	r26, r24
    5b4a:	a9 5a       	subi	r26, 0xA9	; 169
    5b4c:	be 4c       	sbci	r27, 0xCE	; 206
    5b4e:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    5b50:	01 96       	adiw	r24, 0x01	; 1
    5b52:	6e ef       	ldi	r22, 0xFE	; 254
    5b54:	70 e0       	ldi	r23, 0x00	; 0
    5b56:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <__divmodhi4>
    5b5a:	80 83       	st	Z, r24
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    5b5c:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    5b5e:	21 96       	adiw	r28, 0x01	; 1
			}
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    5b60:	21 17       	cp	r18, r17
    5b62:	68 f3       	brcs	.-38     	; 0x5b3e <send_USART+0x8e>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    5b64:	e5 e5       	ldi	r30, 0x55	; 85
    5b66:	f2 e3       	ldi	r31, 0x32	; 50
    5b68:	80 81       	ld	r24, Z
    5b6a:	90 e0       	ldi	r25, 0x00	; 0
    5b6c:	dc 01       	movw	r26, r24
    5b6e:	a9 5a       	subi	r26, 0xA9	; 169
    5b70:	be 4c       	sbci	r27, 0xCE	; 206
    5b72:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    5b74:	01 96       	adiw	r24, 0x01	; 1
    5b76:	2e ef       	ldi	r18, 0xFE	; 254
    5b78:	30 e0       	ldi	r19, 0x00	; 0
    5b7a:	b9 01       	movw	r22, r18
    5b7c:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    5b80:	90 e0       	ldi	r25, 0x00	; 0
    5b82:	dc 01       	movw	r26, r24
    5b84:	a9 5a       	subi	r26, 0xA9	; 169
    5b86:	be 4c       	sbci	r27, 0xCE	; 206
    5b88:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    5b8a:	01 96       	adiw	r24, 0x01	; 1
    5b8c:	b9 01       	movw	r22, r18
    5b8e:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <__divmodhi4>
    5b92:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    5b94:	1e 5f       	subi	r17, 0xFE	; 254
    5b96:	10 93 57 32 	sts	0x3257, r17	; 0x803257 <send1_buf+0x100>
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    5b9a:	e0 e2       	ldi	r30, 0x20	; 32
    5b9c:	f8 e0       	ldi	r31, 0x08	; 8
    5b9e:	85 81       	ldd	r24, Z+5	; 0x05
    5ba0:	80 62       	ori	r24, 0x20	; 32
    5ba2:	85 83       	std	Z+5, r24	; 0x05
			break;
    5ba4:	1a c0       	rjmp	.+52     	; 0x5bda <send_USART+0x12a>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    5ba6:	e1 e5       	ldi	r30, 0x51	; 81
    5ba8:	f1 e3       	ldi	r31, 0x31	; 49
    5baa:	80 81       	ld	r24, Z
    5bac:	90 e0       	ldi	r25, 0x00	; 0
    5bae:	38 81       	ld	r19, Y
    5bb0:	dc 01       	movw	r26, r24
    5bb2:	ad 5a       	subi	r26, 0xAD	; 173
    5bb4:	bf 4c       	sbci	r27, 0xCF	; 207
    5bb6:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    5bb8:	01 96       	adiw	r24, 0x01	; 1
    5bba:	6e ef       	ldi	r22, 0xFE	; 254
    5bbc:	70 e0       	ldi	r23, 0x00	; 0
    5bbe:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <__divmodhi4>
    5bc2:	80 83       	st	Z, r24
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    5bc4:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    5bc6:	21 96       	adiw	r28, 0x01	; 1
    5bc8:	01 c0       	rjmp	.+2      	; 0x5bcc <send_USART+0x11c>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    5bca:	20 e0       	ldi	r18, 0x00	; 0
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    5bcc:	21 17       	cp	r18, r17
    5bce:	58 f3       	brcs	.-42     	; 0x5ba6 <send_USART+0xf6>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    5bd0:	e0 e6       	ldi	r30, 0x60	; 96
    5bd2:	f8 e0       	ldi	r31, 0x08	; 8
    5bd4:	85 81       	ldd	r24, Z+5	; 0x05
    5bd6:	80 62       	ori	r24, 0x20	; 32
    5bd8:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    5bda:	df 91       	pop	r29
    5bdc:	cf 91       	pop	r28
    5bde:	1f 91       	pop	r17
    5be0:	0f 91       	pop	r16
    5be2:	08 95       	ret

00005be4 <send_USART1>:

void send_USART1(uint8_t *data, uint8_t nbytes)
{
    5be4:	dc 01       	movw	r26, r24
	char strbuf[80];
	sprintf(strbuf, " sending nbytes=%d", nbytes);
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
    5be6:	10 92 42 2c 	sts	0x2C42, r1	; 0x802c42 <ser_send1+0xff>
	ser_send1.n2xfr = nbytes;
    5bea:	60 93 41 2c 	sts	0x2C41, r22	; 0x802c41 <ser_send1+0xfe>
	for (i = 0; i < nbytes; i++) {
    5bee:	90 e0       	ldi	r25, 0x00	; 0
    5bf0:	08 c0       	rjmp	.+16     	; 0x5c02 <send_USART1+0x1e>
		ser_send1.data[i] = *data++;
    5bf2:	e9 2f       	mov	r30, r25
    5bf4:	f0 e0       	ldi	r31, 0x00	; 0
    5bf6:	8c 91       	ld	r24, X
    5bf8:	ed 5b       	subi	r30, 0xBD	; 189
    5bfa:	f4 4d       	sbci	r31, 0xD4	; 212
    5bfc:	80 83       	st	Z, r24
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
	ser_send1.n2xfr = nbytes;
	for (i = 0; i < nbytes; i++) {
    5bfe:	9f 5f       	subi	r25, 0xFF	; 255
		ser_send1.data[i] = *data++;
    5c00:	11 96       	adiw	r26, 0x01	; 1
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
	ser_send1.n2xfr = nbytes;
	for (i = 0; i < nbytes; i++) {
    5c02:	96 17       	cp	r25, r22
    5c04:	b0 f3       	brcs	.-20     	; 0x5bf2 <send_USART1+0xe>
		sprintf(strbuf, " n=%d: %d (0x%02X)", i, ser_send1.data[i], ser_send1.data[i]);
		printLine(strbuf);
#endif
	}

	USART1.CTRLA |= USART_DREIE_bm;		// Enable DRE interrupts
    5c06:	e0 e2       	ldi	r30, 0x20	; 32
    5c08:	f8 e0       	ldi	r31, 0x08	; 8
    5c0a:	85 81       	ldd	r24, Z+5	; 0x05
    5c0c:	80 62       	ori	r24, 0x20	; 32
    5c0e:	85 83       	std	Z+5, r24	; 0x05
    5c10:	08 95       	ret

00005c12 <__vector_26>:
/*------------------------------------------------------------------------------
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    5c12:	1f 92       	push	r1
    5c14:	0f 92       	push	r0
    5c16:	0f b6       	in	r0, 0x3f	; 63
    5c18:	0f 92       	push	r0
    5c1a:	11 24       	eor	r1, r1
    5c1c:	8f 93       	push	r24
    5c1e:	af 93       	push	r26
    5c20:	bf 93       	push	r27
    5c22:	ef 93       	push	r30
    5c24:	ff 93       	push	r31

	ser_recv1.data[ser_recv1.nxfrd++] = USART1.RXDATAL;
    5c26:	a2 e4       	ldi	r26, 0x42	; 66
    5c28:	bb e2       	ldi	r27, 0x2B	; 43
    5c2a:	ec 91       	ld	r30, X
    5c2c:	81 e0       	ldi	r24, 0x01	; 1
    5c2e:	8e 0f       	add	r24, r30
    5c30:	8c 93       	st	X, r24
    5c32:	f0 e0       	ldi	r31, 0x00	; 0
    5c34:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
    5c38:	ed 5b       	subi	r30, 0xBD	; 189
    5c3a:	f5 4d       	sbci	r31, 0xD5	; 213
    5c3c:	80 83       	st	Z, r24

}
    5c3e:	ff 91       	pop	r31
    5c40:	ef 91       	pop	r30
    5c42:	bf 91       	pop	r27
    5c44:	af 91       	pop	r26
    5c46:	8f 91       	pop	r24
    5c48:	0f 90       	pop	r0
    5c4a:	0f be       	out	0x3f, r0	; 63
    5c4c:	0f 90       	pop	r0
    5c4e:	1f 90       	pop	r1
    5c50:	18 95       	reti

00005c52 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    5c52:	1f 92       	push	r1
    5c54:	0f 92       	push	r0
    5c56:	0f b6       	in	r0, 0x3f	; 63
    5c58:	0f 92       	push	r0
    5c5a:	11 24       	eor	r1, r1
    5c5c:	8f 93       	push	r24
    5c5e:	9f 93       	push	r25
    5c60:	af 93       	push	r26
    5c62:	bf 93       	push	r27
    5c64:	cf 93       	push	r28
    5c66:	df 93       	push	r29
    5c68:	ef 93       	push	r30
    5c6a:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    5c6c:	a0 e2       	ldi	r26, 0x20	; 32
    5c6e:	b8 e0       	ldi	r27, 0x08	; 8
    5c70:	15 96       	adiw	r26, 0x05	; 5
    5c72:	8c 91       	ld	r24, X
    5c74:	15 97       	sbiw	r26, 0x05	; 5
    5c76:	8f 7d       	andi	r24, 0xDF	; 223
    5c78:	15 96       	adiw	r26, 0x05	; 5
    5c7a:	8c 93       	st	X, r24
    5c7c:	15 97       	sbiw	r26, 0x05	; 5
	USART1.TXDATAL = ser_send1.data[ser_send1.nxfrd++];
    5c7e:	c2 e4       	ldi	r28, 0x42	; 66
    5c80:	dc e2       	ldi	r29, 0x2C	; 44
    5c82:	e8 81       	ld	r30, Y
    5c84:	81 e0       	ldi	r24, 0x01	; 1
    5c86:	8e 0f       	add	r24, r30
    5c88:	88 83       	st	Y, r24
    5c8a:	f0 e0       	ldi	r31, 0x00	; 0
    5c8c:	ed 5b       	subi	r30, 0xBD	; 189
    5c8e:	f4 4d       	sbci	r31, 0xD4	; 212
    5c90:	90 81       	ld	r25, Z
    5c92:	12 96       	adiw	r26, 0x02	; 2
    5c94:	9c 93       	st	X, r25
	if (ser_send1.nxfrd < ser_send1.n2xfr) {
    5c96:	90 91 41 2c 	lds	r25, 0x2C41	; 0x802c41 <ser_send1+0xfe>
    5c9a:	89 17       	cp	r24, r25
    5c9c:	28 f4       	brcc	.+10     	; 0x5ca8 <__vector_27+0x56>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts	
    5c9e:	e0 e2       	ldi	r30, 0x20	; 32
    5ca0:	f8 e0       	ldi	r31, 0x08	; 8
    5ca2:	85 81       	ldd	r24, Z+5	; 0x05
    5ca4:	80 62       	ori	r24, 0x20	; 32
    5ca6:	85 83       	std	Z+5, r24	; 0x05
	}

}
    5ca8:	ff 91       	pop	r31
    5caa:	ef 91       	pop	r30
    5cac:	df 91       	pop	r29
    5cae:	cf 91       	pop	r28
    5cb0:	bf 91       	pop	r27
    5cb2:	af 91       	pop	r26
    5cb4:	9f 91       	pop	r25
    5cb6:	8f 91       	pop	r24
    5cb8:	0f 90       	pop	r0
    5cba:	0f be       	out	0x3f, r0	; 63
    5cbc:	0f 90       	pop	r0
    5cbe:	1f 90       	pop	r1
    5cc0:	18 95       	reti

00005cc2 <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    5cc2:	1f 92       	push	r1
    5cc4:	0f 92       	push	r0
    5cc6:	0f b6       	in	r0, 0x3f	; 63
    5cc8:	0f 92       	push	r0
    5cca:	11 24       	eor	r1, r1
    5ccc:	5f 93       	push	r21
    5cce:	6f 93       	push	r22
    5cd0:	7f 93       	push	r23
    5cd2:	8f 93       	push	r24
    5cd4:	9f 93       	push	r25
    5cd6:	af 93       	push	r26
    5cd8:	bf 93       	push	r27
    5cda:	ef 93       	push	r30
    5cdc:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    5cde:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if (recv0_buf.length < (BUFSIZE-1)) {		// BUFSIZE-1 to make room for the terminating \0
    5ce2:	80 91 48 2e 	lds	r24, 0x2E48	; 0x802e48 <recv0_buf+0x101>
    5ce6:	8d 3f       	cpi	r24, 0xFD	; 253
    5ce8:	10 f5       	brcc	.+68     	; 0x5d2e <__vector_17+0x6c>
//		c = USART0.RXDATAL;
		if ((char) c == '\r') {
    5cea:	9d 30       	cpi	r25, 0x0D	; 13
    5cec:	51 f4       	brne	.+20     	; 0x5d02 <__vector_17+0x40>
			recv0_buf.done = YES;
    5cee:	81 e0       	ldi	r24, 0x01	; 1
    5cf0:	80 93 4a 2e 	sts	0x2E4A, r24	; 0x802e4a <recv0_buf+0x103>
			recv0_buf.data[recv0_buf.head] = '\0';
    5cf4:	e0 91 45 2e 	lds	r30, 0x2E45	; 0x802e45 <recv0_buf+0xfe>
    5cf8:	f0 e0       	ldi	r31, 0x00	; 0
    5cfa:	e9 5b       	subi	r30, 0xB9	; 185
    5cfc:	f2 4d       	sbci	r31, 0xD2	; 210
    5cfe:	10 82       	st	Z, r1
    5d00:	06 c0       	rjmp	.+12     	; 0x5d0e <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    5d02:	e0 91 45 2e 	lds	r30, 0x2E45	; 0x802e45 <recv0_buf+0xfe>
    5d06:	f0 e0       	ldi	r31, 0x00	; 0
    5d08:	e9 5b       	subi	r30, 0xB9	; 185
    5d0a:	f2 4d       	sbci	r31, 0xD2	; 210
    5d0c:	90 83       	st	Z, r25
		}
		recv0_buf.length++;
    5d0e:	e8 e4       	ldi	r30, 0x48	; 72
    5d10:	fe e2       	ldi	r31, 0x2E	; 46
    5d12:	80 81       	ld	r24, Z
    5d14:	8f 5f       	subi	r24, 0xFF	; 255
    5d16:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    5d18:	e5 e4       	ldi	r30, 0x45	; 69
    5d1a:	fe e2       	ldi	r31, 0x2E	; 46
    5d1c:	80 81       	ld	r24, Z
    5d1e:	90 e0       	ldi	r25, 0x00	; 0
    5d20:	01 96       	adiw	r24, 0x01	; 1
    5d22:	6e ef       	ldi	r22, 0xFE	; 254
    5d24:	70 e0       	ldi	r23, 0x00	; 0
    5d26:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <__divmodhi4>
    5d2a:	80 83       	st	Z, r24
    5d2c:	0a c0       	rjmp	.+20     	; 0x5d42 <__vector_17+0x80>
	} else {
		recv0_buf.head = 0;
    5d2e:	10 92 45 2e 	sts	0x2E45, r1	; 0x802e45 <recv0_buf+0xfe>
		recv0_buf.tail = 0;
    5d32:	10 92 46 2e 	sts	0x2E46, r1	; 0x802e46 <recv0_buf+0xff>
		recv0_buf.data[0] = '\0';
    5d36:	10 92 47 2d 	sts	0x2D47, r1	; 0x802d47 <recv0_buf>
		recv0_buf.length = 0;
    5d3a:	10 92 48 2e 	sts	0x2E48, r1	; 0x802e48 <recv0_buf+0x101>
		recv0_buf.done = NO;
    5d3e:	10 92 4a 2e 	sts	0x2E4A, r1	; 0x802e4a <recv0_buf+0x103>
	}
}
    5d42:	ff 91       	pop	r31
    5d44:	ef 91       	pop	r30
    5d46:	bf 91       	pop	r27
    5d48:	af 91       	pop	r26
    5d4a:	9f 91       	pop	r25
    5d4c:	8f 91       	pop	r24
    5d4e:	7f 91       	pop	r23
    5d50:	6f 91       	pop	r22
    5d52:	5f 91       	pop	r21
    5d54:	0f 90       	pop	r0
    5d56:	0f be       	out	0x3f, r0	; 63
    5d58:	0f 90       	pop	r0
    5d5a:	1f 90       	pop	r1
    5d5c:	18 95       	reti

00005d5e <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    5d5e:	1f 92       	push	r1
    5d60:	0f 92       	push	r0
    5d62:	0f b6       	in	r0, 0x3f	; 63
    5d64:	0f 92       	push	r0
    5d66:	11 24       	eor	r1, r1
    5d68:	2f 93       	push	r18
    5d6a:	8f 93       	push	r24
    5d6c:	9f 93       	push	r25
    5d6e:	ef 93       	push	r30
    5d70:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    5d72:	e0 e0       	ldi	r30, 0x00	; 0
    5d74:	f8 e0       	ldi	r31, 0x08	; 8
    5d76:	85 81       	ldd	r24, Z+5	; 0x05
    5d78:	8f 7d       	andi	r24, 0xDF	; 223
    5d7a:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    5d7c:	80 91 49 2f 	lds	r24, 0x2F49	; 0x802f49 <send0_buf+0xfe>
    5d80:	e0 91 4a 2f 	lds	r30, 0x2F4A	; 0x802f4a <send0_buf+0xff>
    5d84:	8e 17       	cp	r24, r30
    5d86:	d1 f0       	breq	.+52     	; 0x5dbc <__vector_18+0x5e>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    5d88:	81 e0       	ldi	r24, 0x01	; 1
    5d8a:	8e 0f       	add	r24, r30
    5d8c:	80 93 4a 2f 	sts	0x2F4A, r24	; 0x802f4a <send0_buf+0xff>
    5d90:	f0 e0       	ldi	r31, 0x00	; 0
    5d92:	e5 5b       	subi	r30, 0xB5	; 181
    5d94:	f1 4d       	sbci	r31, 0xD1	; 209
    5d96:	90 81       	ld	r25, Z
    5d98:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    5d9c:	91 e0       	ldi	r25, 0x01	; 1
    5d9e:	8e 3f       	cpi	r24, 0xFE	; 254
    5da0:	08 f4       	brcc	.+2      	; 0x5da4 <__vector_18+0x46>
    5da2:	90 e0       	ldi	r25, 0x00	; 0
    5da4:	91 95       	neg	r25
    5da6:	29 2f       	mov	r18, r25
    5da8:	22 0f       	add	r18, r18
    5daa:	82 1b       	sub	r24, r18
    5dac:	80 93 4a 2f 	sts	0x2F4A, r24	; 0x802f4a <send0_buf+0xff>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    5db0:	e0 e0       	ldi	r30, 0x00	; 0
    5db2:	f8 e0       	ldi	r31, 0x08	; 8
    5db4:	85 81       	ldd	r24, Z+5	; 0x05
    5db6:	80 62       	ori	r24, 0x20	; 32
    5db8:	85 83       	std	Z+5, r24	; 0x05
    5dba:	03 c0       	rjmp	.+6      	; 0x5dc2 <__vector_18+0x64>
	} else {
		send0_buf.done = YES;
    5dbc:	81 e0       	ldi	r24, 0x01	; 1
    5dbe:	80 93 4e 2f 	sts	0x2F4E, r24	; 0x802f4e <send0_buf+0x103>
	}

}
    5dc2:	ff 91       	pop	r31
    5dc4:	ef 91       	pop	r30
    5dc6:	9f 91       	pop	r25
    5dc8:	8f 91       	pop	r24
    5dca:	2f 91       	pop	r18
    5dcc:	0f 90       	pop	r0
    5dce:	0f be       	out	0x3f, r0	; 63
    5dd0:	0f 90       	pop	r0
    5dd2:	1f 90       	pop	r1
    5dd4:	18 95       	reti

00005dd6 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    5dd6:	1f 92       	push	r1
    5dd8:	0f 92       	push	r0
    5dda:	0f b6       	in	r0, 0x3f	; 63
    5ddc:	0f 92       	push	r0
    5dde:	11 24       	eor	r1, r1
    5de0:	8f 93       	push	r24
    5de2:	9f 93       	push	r25
    5de4:	af 93       	push	r26
    5de6:	bf 93       	push	r27
    5de8:	ef 93       	push	r30
    5dea:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    5dec:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    5df0:	8d 30       	cpi	r24, 0x0D	; 13
    5df2:	21 f0       	breq	.+8      	; 0x5dfc <__vector_37+0x26>
    5df4:	e0 91 51 30 	lds	r30, 0x3051	; 0x803051 <recv3_buf+0x102>
    5df8:	ed 3f       	cpi	r30, 0xFD	; 253
    5dfa:	78 f0       	brcs	.+30     	; 0x5e1a <__vector_37+0x44>
		recv3_buf.done = YES;
    5dfc:	81 e0       	ldi	r24, 0x01	; 1
    5dfe:	80 93 52 30 	sts	0x3052, r24	; 0x803052 <recv3_buf+0x103>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    5e02:	a1 e5       	ldi	r26, 0x51	; 81
    5e04:	b0 e3       	ldi	r27, 0x30	; 48
    5e06:	8c 91       	ld	r24, X
    5e08:	e8 2f       	mov	r30, r24
    5e0a:	f0 e0       	ldi	r31, 0x00	; 0
    5e0c:	e1 5b       	subi	r30, 0xB1	; 177
    5e0e:	f0 4d       	sbci	r31, 0xD0	; 208
    5e10:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    5e12:	80 93 4f 30 	sts	0x304F, r24	; 0x80304f <recv3_buf+0x100>
		recv3_buf.nxfrd = 0;
    5e16:	1c 92       	st	X, r1
		return;
    5e18:	08 c0       	rjmp	.+16     	; 0x5e2a <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    5e1a:	91 e0       	ldi	r25, 0x01	; 1
    5e1c:	9e 0f       	add	r25, r30
    5e1e:	90 93 51 30 	sts	0x3051, r25	; 0x803051 <recv3_buf+0x102>
    5e22:	f0 e0       	ldi	r31, 0x00	; 0
    5e24:	e1 5b       	subi	r30, 0xB1	; 177
    5e26:	f0 4d       	sbci	r31, 0xD0	; 208
    5e28:	80 83       	st	Z, r24
	}

}
    5e2a:	ff 91       	pop	r31
    5e2c:	ef 91       	pop	r30
    5e2e:	bf 91       	pop	r27
    5e30:	af 91       	pop	r26
    5e32:	9f 91       	pop	r25
    5e34:	8f 91       	pop	r24
    5e36:	0f 90       	pop	r0
    5e38:	0f be       	out	0x3f, r0	; 63
    5e3a:	0f 90       	pop	r0
    5e3c:	1f 90       	pop	r1
    5e3e:	18 95       	reti

00005e40 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    5e40:	1f 92       	push	r1
    5e42:	0f 92       	push	r0
    5e44:	0f b6       	in	r0, 0x3f	; 63
    5e46:	0f 92       	push	r0
    5e48:	11 24       	eor	r1, r1
    5e4a:	8f 93       	push	r24
    5e4c:	9f 93       	push	r25
    5e4e:	af 93       	push	r26
    5e50:	bf 93       	push	r27
    5e52:	ef 93       	push	r30
    5e54:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    5e56:	a5 e5       	ldi	r26, 0x55	; 85
    5e58:	b1 e3       	ldi	r27, 0x31	; 49
    5e5a:	ec 91       	ld	r30, X
    5e5c:	81 e0       	ldi	r24, 0x01	; 1
    5e5e:	8e 0f       	add	r24, r30
    5e60:	8c 93       	st	X, r24
    5e62:	f0 e0       	ldi	r31, 0x00	; 0
    5e64:	ed 5a       	subi	r30, 0xAD	; 173
    5e66:	ff 4c       	sbci	r31, 0xCF	; 207
    5e68:	90 81       	ld	r25, Z
    5e6a:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    5e6e:	90 91 53 31 	lds	r25, 0x3153	; 0x803153 <send3_buf+0x100>
    5e72:	89 17       	cp	r24, r25
    5e74:	40 f0       	brcs	.+16     	; 0x5e86 <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    5e76:	e0 e6       	ldi	r30, 0x60	; 96
    5e78:	f8 e0       	ldi	r31, 0x08	; 8
    5e7a:	85 81       	ldd	r24, Z+5	; 0x05
    5e7c:	8f 7d       	andi	r24, 0xDF	; 223
    5e7e:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    5e80:	81 e0       	ldi	r24, 0x01	; 1
    5e82:	80 93 56 31 	sts	0x3156, r24	; 0x803156 <send3_buf+0x103>
	}

}
    5e86:	ff 91       	pop	r31
    5e88:	ef 91       	pop	r30
    5e8a:	bf 91       	pop	r27
    5e8c:	af 91       	pop	r26
    5e8e:	9f 91       	pop	r25
    5e90:	8f 91       	pop	r24
    5e92:	0f 90       	pop	r0
    5e94:	0f be       	out	0x3f, r0	; 63
    5e96:	0f 90       	pop	r0
    5e98:	1f 90       	pop	r1
    5e9a:	18 95       	reti

00005e9c <reboot>:
#include "wdt.h"

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
    5e9c:	88 ed       	ldi	r24, 0xD8	; 216
    5e9e:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    5ea0:	81 e0       	ldi	r24, 0x01	; 1
    5ea2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    5ea6:	08 95       	ret

00005ea8 <__vector_29>:

}

ISR(PORTF_PORT_vect)
{
    5ea8:	1f 92       	push	r1
    5eaa:	0f 92       	push	r0
    5eac:	0f b6       	in	r0, 0x3f	; 63
    5eae:	0f 92       	push	r0
    5eb0:	11 24       	eor	r1, r1
    5eb2:	2f 93       	push	r18
    5eb4:	3f 93       	push	r19
    5eb6:	4f 93       	push	r20
    5eb8:	5f 93       	push	r21
    5eba:	6f 93       	push	r22
    5ebc:	7f 93       	push	r23
    5ebe:	8f 93       	push	r24
    5ec0:	9f 93       	push	r25
    5ec2:	af 93       	push	r26
    5ec4:	bf 93       	push	r27
    5ec6:	ef 93       	push	r30
    5ec8:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
    5eca:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
    5ece:	86 ff       	sbrs	r24, 6
    5ed0:	05 c0       	rjmp	.+10     	; 0x5edc <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
    5ed2:	80 e4       	ldi	r24, 0x40	; 64
    5ed4:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
    5ed8:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <reboot>
	}

}
    5edc:	ff 91       	pop	r31
    5ede:	ef 91       	pop	r30
    5ee0:	bf 91       	pop	r27
    5ee2:	af 91       	pop	r26
    5ee4:	9f 91       	pop	r25
    5ee6:	8f 91       	pop	r24
    5ee8:	7f 91       	pop	r23
    5eea:	6f 91       	pop	r22
    5eec:	5f 91       	pop	r21
    5eee:	4f 91       	pop	r20
    5ef0:	3f 91       	pop	r19
    5ef2:	2f 91       	pop	r18
    5ef4:	0f 90       	pop	r0
    5ef6:	0f be       	out	0x3f, r0	; 63
    5ef8:	0f 90       	pop	r0
    5efa:	1f 90       	pop	r1
    5efc:	18 95       	reti

00005efe <__subsf3>:
    5efe:	50 58       	subi	r21, 0x80	; 128

00005f00 <__addsf3>:
    5f00:	bb 27       	eor	r27, r27
    5f02:	aa 27       	eor	r26, r26
    5f04:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <__addsf3x>
    5f08:	0c 94 11 31 	jmp	0x6222	; 0x6222 <__fp_round>
    5f0c:	0e 94 03 31 	call	0x6206	; 0x6206 <__fp_pscA>
    5f10:	38 f0       	brcs	.+14     	; 0x5f20 <__addsf3+0x20>
    5f12:	0e 94 0a 31 	call	0x6214	; 0x6214 <__fp_pscB>
    5f16:	20 f0       	brcs	.+8      	; 0x5f20 <__addsf3+0x20>
    5f18:	39 f4       	brne	.+14     	; 0x5f28 <__addsf3+0x28>
    5f1a:	9f 3f       	cpi	r25, 0xFF	; 255
    5f1c:	19 f4       	brne	.+6      	; 0x5f24 <__addsf3+0x24>
    5f1e:	26 f4       	brtc	.+8      	; 0x5f28 <__addsf3+0x28>
    5f20:	0c 94 00 31 	jmp	0x6200	; 0x6200 <__fp_nan>
    5f24:	0e f4       	brtc	.+2      	; 0x5f28 <__addsf3+0x28>
    5f26:	e0 95       	com	r30
    5f28:	e7 fb       	bst	r30, 7
    5f2a:	0c 94 fa 30 	jmp	0x61f4	; 0x61f4 <__fp_inf>

00005f2e <__addsf3x>:
    5f2e:	e9 2f       	mov	r30, r25
    5f30:	0e 94 22 31 	call	0x6244	; 0x6244 <__fp_split3>
    5f34:	58 f3       	brcs	.-42     	; 0x5f0c <__addsf3+0xc>
    5f36:	ba 17       	cp	r27, r26
    5f38:	62 07       	cpc	r22, r18
    5f3a:	73 07       	cpc	r23, r19
    5f3c:	84 07       	cpc	r24, r20
    5f3e:	95 07       	cpc	r25, r21
    5f40:	20 f0       	brcs	.+8      	; 0x5f4a <__addsf3x+0x1c>
    5f42:	79 f4       	brne	.+30     	; 0x5f62 <__addsf3x+0x34>
    5f44:	a6 f5       	brtc	.+104    	; 0x5fae <__addsf3x+0x80>
    5f46:	0c 94 44 31 	jmp	0x6288	; 0x6288 <__fp_zero>
    5f4a:	0e f4       	brtc	.+2      	; 0x5f4e <__addsf3x+0x20>
    5f4c:	e0 95       	com	r30
    5f4e:	0b 2e       	mov	r0, r27
    5f50:	ba 2f       	mov	r27, r26
    5f52:	a0 2d       	mov	r26, r0
    5f54:	0b 01       	movw	r0, r22
    5f56:	b9 01       	movw	r22, r18
    5f58:	90 01       	movw	r18, r0
    5f5a:	0c 01       	movw	r0, r24
    5f5c:	ca 01       	movw	r24, r20
    5f5e:	a0 01       	movw	r20, r0
    5f60:	11 24       	eor	r1, r1
    5f62:	ff 27       	eor	r31, r31
    5f64:	59 1b       	sub	r21, r25
    5f66:	99 f0       	breq	.+38     	; 0x5f8e <__addsf3x+0x60>
    5f68:	59 3f       	cpi	r21, 0xF9	; 249
    5f6a:	50 f4       	brcc	.+20     	; 0x5f80 <__addsf3x+0x52>
    5f6c:	50 3e       	cpi	r21, 0xE0	; 224
    5f6e:	68 f1       	brcs	.+90     	; 0x5fca <__addsf3x+0x9c>
    5f70:	1a 16       	cp	r1, r26
    5f72:	f0 40       	sbci	r31, 0x00	; 0
    5f74:	a2 2f       	mov	r26, r18
    5f76:	23 2f       	mov	r18, r19
    5f78:	34 2f       	mov	r19, r20
    5f7a:	44 27       	eor	r20, r20
    5f7c:	58 5f       	subi	r21, 0xF8	; 248
    5f7e:	f3 cf       	rjmp	.-26     	; 0x5f66 <__addsf3x+0x38>
    5f80:	46 95       	lsr	r20
    5f82:	37 95       	ror	r19
    5f84:	27 95       	ror	r18
    5f86:	a7 95       	ror	r26
    5f88:	f0 40       	sbci	r31, 0x00	; 0
    5f8a:	53 95       	inc	r21
    5f8c:	c9 f7       	brne	.-14     	; 0x5f80 <__addsf3x+0x52>
    5f8e:	7e f4       	brtc	.+30     	; 0x5fae <__addsf3x+0x80>
    5f90:	1f 16       	cp	r1, r31
    5f92:	ba 0b       	sbc	r27, r26
    5f94:	62 0b       	sbc	r22, r18
    5f96:	73 0b       	sbc	r23, r19
    5f98:	84 0b       	sbc	r24, r20
    5f9a:	ba f0       	brmi	.+46     	; 0x5fca <__addsf3x+0x9c>
    5f9c:	91 50       	subi	r25, 0x01	; 1
    5f9e:	a1 f0       	breq	.+40     	; 0x5fc8 <__addsf3x+0x9a>
    5fa0:	ff 0f       	add	r31, r31
    5fa2:	bb 1f       	adc	r27, r27
    5fa4:	66 1f       	adc	r22, r22
    5fa6:	77 1f       	adc	r23, r23
    5fa8:	88 1f       	adc	r24, r24
    5faa:	c2 f7       	brpl	.-16     	; 0x5f9c <__addsf3x+0x6e>
    5fac:	0e c0       	rjmp	.+28     	; 0x5fca <__addsf3x+0x9c>
    5fae:	ba 0f       	add	r27, r26
    5fb0:	62 1f       	adc	r22, r18
    5fb2:	73 1f       	adc	r23, r19
    5fb4:	84 1f       	adc	r24, r20
    5fb6:	48 f4       	brcc	.+18     	; 0x5fca <__addsf3x+0x9c>
    5fb8:	87 95       	ror	r24
    5fba:	77 95       	ror	r23
    5fbc:	67 95       	ror	r22
    5fbe:	b7 95       	ror	r27
    5fc0:	f7 95       	ror	r31
    5fc2:	9e 3f       	cpi	r25, 0xFE	; 254
    5fc4:	08 f0       	brcs	.+2      	; 0x5fc8 <__addsf3x+0x9a>
    5fc6:	b0 cf       	rjmp	.-160    	; 0x5f28 <__addsf3+0x28>
    5fc8:	93 95       	inc	r25
    5fca:	88 0f       	add	r24, r24
    5fcc:	08 f0       	brcs	.+2      	; 0x5fd0 <__addsf3x+0xa2>
    5fce:	99 27       	eor	r25, r25
    5fd0:	ee 0f       	add	r30, r30
    5fd2:	97 95       	ror	r25
    5fd4:	87 95       	ror	r24
    5fd6:	08 95       	ret

00005fd8 <__cmpsf2>:
    5fd8:	0e 94 d6 30 	call	0x61ac	; 0x61ac <__fp_cmp>
    5fdc:	08 f4       	brcc	.+2      	; 0x5fe0 <__cmpsf2+0x8>
    5fde:	81 e0       	ldi	r24, 0x01	; 1
    5fe0:	08 95       	ret

00005fe2 <__divsf3>:
    5fe2:	0e 94 05 30 	call	0x600a	; 0x600a <__divsf3x>
    5fe6:	0c 94 11 31 	jmp	0x6222	; 0x6222 <__fp_round>
    5fea:	0e 94 0a 31 	call	0x6214	; 0x6214 <__fp_pscB>
    5fee:	58 f0       	brcs	.+22     	; 0x6006 <__divsf3+0x24>
    5ff0:	0e 94 03 31 	call	0x6206	; 0x6206 <__fp_pscA>
    5ff4:	40 f0       	brcs	.+16     	; 0x6006 <__divsf3+0x24>
    5ff6:	29 f4       	brne	.+10     	; 0x6002 <__divsf3+0x20>
    5ff8:	5f 3f       	cpi	r21, 0xFF	; 255
    5ffa:	29 f0       	breq	.+10     	; 0x6006 <__divsf3+0x24>
    5ffc:	0c 94 fa 30 	jmp	0x61f4	; 0x61f4 <__fp_inf>
    6000:	51 11       	cpse	r21, r1
    6002:	0c 94 45 31 	jmp	0x628a	; 0x628a <__fp_szero>
    6006:	0c 94 00 31 	jmp	0x6200	; 0x6200 <__fp_nan>

0000600a <__divsf3x>:
    600a:	0e 94 22 31 	call	0x6244	; 0x6244 <__fp_split3>
    600e:	68 f3       	brcs	.-38     	; 0x5fea <__divsf3+0x8>

00006010 <__divsf3_pse>:
    6010:	99 23       	and	r25, r25
    6012:	b1 f3       	breq	.-20     	; 0x6000 <__divsf3+0x1e>
    6014:	55 23       	and	r21, r21
    6016:	91 f3       	breq	.-28     	; 0x5ffc <__divsf3+0x1a>
    6018:	95 1b       	sub	r25, r21
    601a:	55 0b       	sbc	r21, r21
    601c:	bb 27       	eor	r27, r27
    601e:	aa 27       	eor	r26, r26
    6020:	62 17       	cp	r22, r18
    6022:	73 07       	cpc	r23, r19
    6024:	84 07       	cpc	r24, r20
    6026:	38 f0       	brcs	.+14     	; 0x6036 <__divsf3_pse+0x26>
    6028:	9f 5f       	subi	r25, 0xFF	; 255
    602a:	5f 4f       	sbci	r21, 0xFF	; 255
    602c:	22 0f       	add	r18, r18
    602e:	33 1f       	adc	r19, r19
    6030:	44 1f       	adc	r20, r20
    6032:	aa 1f       	adc	r26, r26
    6034:	a9 f3       	breq	.-22     	; 0x6020 <__divsf3_pse+0x10>
    6036:	35 d0       	rcall	.+106    	; 0x60a2 <__divsf3_pse+0x92>
    6038:	0e 2e       	mov	r0, r30
    603a:	3a f0       	brmi	.+14     	; 0x604a <__divsf3_pse+0x3a>
    603c:	e0 e8       	ldi	r30, 0x80	; 128
    603e:	32 d0       	rcall	.+100    	; 0x60a4 <__divsf3_pse+0x94>
    6040:	91 50       	subi	r25, 0x01	; 1
    6042:	50 40       	sbci	r21, 0x00	; 0
    6044:	e6 95       	lsr	r30
    6046:	00 1c       	adc	r0, r0
    6048:	ca f7       	brpl	.-14     	; 0x603c <__divsf3_pse+0x2c>
    604a:	2b d0       	rcall	.+86     	; 0x60a2 <__divsf3_pse+0x92>
    604c:	fe 2f       	mov	r31, r30
    604e:	29 d0       	rcall	.+82     	; 0x60a2 <__divsf3_pse+0x92>
    6050:	66 0f       	add	r22, r22
    6052:	77 1f       	adc	r23, r23
    6054:	88 1f       	adc	r24, r24
    6056:	bb 1f       	adc	r27, r27
    6058:	26 17       	cp	r18, r22
    605a:	37 07       	cpc	r19, r23
    605c:	48 07       	cpc	r20, r24
    605e:	ab 07       	cpc	r26, r27
    6060:	b0 e8       	ldi	r27, 0x80	; 128
    6062:	09 f0       	breq	.+2      	; 0x6066 <__divsf3_pse+0x56>
    6064:	bb 0b       	sbc	r27, r27
    6066:	80 2d       	mov	r24, r0
    6068:	bf 01       	movw	r22, r30
    606a:	ff 27       	eor	r31, r31
    606c:	93 58       	subi	r25, 0x83	; 131
    606e:	5f 4f       	sbci	r21, 0xFF	; 255
    6070:	3a f0       	brmi	.+14     	; 0x6080 <__divsf3_pse+0x70>
    6072:	9e 3f       	cpi	r25, 0xFE	; 254
    6074:	51 05       	cpc	r21, r1
    6076:	78 f0       	brcs	.+30     	; 0x6096 <__divsf3_pse+0x86>
    6078:	0c 94 fa 30 	jmp	0x61f4	; 0x61f4 <__fp_inf>
    607c:	0c 94 45 31 	jmp	0x628a	; 0x628a <__fp_szero>
    6080:	5f 3f       	cpi	r21, 0xFF	; 255
    6082:	e4 f3       	brlt	.-8      	; 0x607c <__divsf3_pse+0x6c>
    6084:	98 3e       	cpi	r25, 0xE8	; 232
    6086:	d4 f3       	brlt	.-12     	; 0x607c <__divsf3_pse+0x6c>
    6088:	86 95       	lsr	r24
    608a:	77 95       	ror	r23
    608c:	67 95       	ror	r22
    608e:	b7 95       	ror	r27
    6090:	f7 95       	ror	r31
    6092:	9f 5f       	subi	r25, 0xFF	; 255
    6094:	c9 f7       	brne	.-14     	; 0x6088 <__divsf3_pse+0x78>
    6096:	88 0f       	add	r24, r24
    6098:	91 1d       	adc	r25, r1
    609a:	96 95       	lsr	r25
    609c:	87 95       	ror	r24
    609e:	97 f9       	bld	r25, 7
    60a0:	08 95       	ret
    60a2:	e1 e0       	ldi	r30, 0x01	; 1
    60a4:	66 0f       	add	r22, r22
    60a6:	77 1f       	adc	r23, r23
    60a8:	88 1f       	adc	r24, r24
    60aa:	bb 1f       	adc	r27, r27
    60ac:	62 17       	cp	r22, r18
    60ae:	73 07       	cpc	r23, r19
    60b0:	84 07       	cpc	r24, r20
    60b2:	ba 07       	cpc	r27, r26
    60b4:	20 f0       	brcs	.+8      	; 0x60be <__divsf3_pse+0xae>
    60b6:	62 1b       	sub	r22, r18
    60b8:	73 0b       	sbc	r23, r19
    60ba:	84 0b       	sbc	r24, r20
    60bc:	ba 0b       	sbc	r27, r26
    60be:	ee 1f       	adc	r30, r30
    60c0:	88 f7       	brcc	.-30     	; 0x60a4 <__divsf3_pse+0x94>
    60c2:	e0 95       	com	r30
    60c4:	08 95       	ret

000060c6 <__fixsfsi>:
    60c6:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <__fixunssfsi>
    60ca:	68 94       	set
    60cc:	b1 11       	cpse	r27, r1
    60ce:	0c 94 45 31 	jmp	0x628a	; 0x628a <__fp_szero>
    60d2:	08 95       	ret

000060d4 <__fixunssfsi>:
    60d4:	0e 94 2a 31 	call	0x6254	; 0x6254 <__fp_splitA>
    60d8:	88 f0       	brcs	.+34     	; 0x60fc <__fixunssfsi+0x28>
    60da:	9f 57       	subi	r25, 0x7F	; 127
    60dc:	98 f0       	brcs	.+38     	; 0x6104 <__fixunssfsi+0x30>
    60de:	b9 2f       	mov	r27, r25
    60e0:	99 27       	eor	r25, r25
    60e2:	b7 51       	subi	r27, 0x17	; 23
    60e4:	b0 f0       	brcs	.+44     	; 0x6112 <__fixunssfsi+0x3e>
    60e6:	e1 f0       	breq	.+56     	; 0x6120 <__fixunssfsi+0x4c>
    60e8:	66 0f       	add	r22, r22
    60ea:	77 1f       	adc	r23, r23
    60ec:	88 1f       	adc	r24, r24
    60ee:	99 1f       	adc	r25, r25
    60f0:	1a f0       	brmi	.+6      	; 0x60f8 <__fixunssfsi+0x24>
    60f2:	ba 95       	dec	r27
    60f4:	c9 f7       	brne	.-14     	; 0x60e8 <__fixunssfsi+0x14>
    60f6:	14 c0       	rjmp	.+40     	; 0x6120 <__fixunssfsi+0x4c>
    60f8:	b1 30       	cpi	r27, 0x01	; 1
    60fa:	91 f0       	breq	.+36     	; 0x6120 <__fixunssfsi+0x4c>
    60fc:	0e 94 44 31 	call	0x6288	; 0x6288 <__fp_zero>
    6100:	b1 e0       	ldi	r27, 0x01	; 1
    6102:	08 95       	ret
    6104:	0c 94 44 31 	jmp	0x6288	; 0x6288 <__fp_zero>
    6108:	67 2f       	mov	r22, r23
    610a:	78 2f       	mov	r23, r24
    610c:	88 27       	eor	r24, r24
    610e:	b8 5f       	subi	r27, 0xF8	; 248
    6110:	39 f0       	breq	.+14     	; 0x6120 <__fixunssfsi+0x4c>
    6112:	b9 3f       	cpi	r27, 0xF9	; 249
    6114:	cc f3       	brlt	.-14     	; 0x6108 <__fixunssfsi+0x34>
    6116:	86 95       	lsr	r24
    6118:	77 95       	ror	r23
    611a:	67 95       	ror	r22
    611c:	b3 95       	inc	r27
    611e:	d9 f7       	brne	.-10     	; 0x6116 <__fixunssfsi+0x42>
    6120:	3e f4       	brtc	.+14     	; 0x6130 <__fixunssfsi+0x5c>
    6122:	90 95       	com	r25
    6124:	80 95       	com	r24
    6126:	70 95       	com	r23
    6128:	61 95       	neg	r22
    612a:	7f 4f       	sbci	r23, 0xFF	; 255
    612c:	8f 4f       	sbci	r24, 0xFF	; 255
    612e:	9f 4f       	sbci	r25, 0xFF	; 255
    6130:	08 95       	ret

00006132 <__floatunsisf>:
    6132:	e8 94       	clt
    6134:	09 c0       	rjmp	.+18     	; 0x6148 <__floatsisf+0x12>

00006136 <__floatsisf>:
    6136:	97 fb       	bst	r25, 7
    6138:	3e f4       	brtc	.+14     	; 0x6148 <__floatsisf+0x12>
    613a:	90 95       	com	r25
    613c:	80 95       	com	r24
    613e:	70 95       	com	r23
    6140:	61 95       	neg	r22
    6142:	7f 4f       	sbci	r23, 0xFF	; 255
    6144:	8f 4f       	sbci	r24, 0xFF	; 255
    6146:	9f 4f       	sbci	r25, 0xFF	; 255
    6148:	99 23       	and	r25, r25
    614a:	a9 f0       	breq	.+42     	; 0x6176 <__floatsisf+0x40>
    614c:	f9 2f       	mov	r31, r25
    614e:	96 e9       	ldi	r25, 0x96	; 150
    6150:	bb 27       	eor	r27, r27
    6152:	93 95       	inc	r25
    6154:	f6 95       	lsr	r31
    6156:	87 95       	ror	r24
    6158:	77 95       	ror	r23
    615a:	67 95       	ror	r22
    615c:	b7 95       	ror	r27
    615e:	f1 11       	cpse	r31, r1
    6160:	f8 cf       	rjmp	.-16     	; 0x6152 <__floatsisf+0x1c>
    6162:	fa f4       	brpl	.+62     	; 0x61a2 <__floatsisf+0x6c>
    6164:	bb 0f       	add	r27, r27
    6166:	11 f4       	brne	.+4      	; 0x616c <__floatsisf+0x36>
    6168:	60 ff       	sbrs	r22, 0
    616a:	1b c0       	rjmp	.+54     	; 0x61a2 <__floatsisf+0x6c>
    616c:	6f 5f       	subi	r22, 0xFF	; 255
    616e:	7f 4f       	sbci	r23, 0xFF	; 255
    6170:	8f 4f       	sbci	r24, 0xFF	; 255
    6172:	9f 4f       	sbci	r25, 0xFF	; 255
    6174:	16 c0       	rjmp	.+44     	; 0x61a2 <__floatsisf+0x6c>
    6176:	88 23       	and	r24, r24
    6178:	11 f0       	breq	.+4      	; 0x617e <__floatsisf+0x48>
    617a:	96 e9       	ldi	r25, 0x96	; 150
    617c:	11 c0       	rjmp	.+34     	; 0x61a0 <__floatsisf+0x6a>
    617e:	77 23       	and	r23, r23
    6180:	21 f0       	breq	.+8      	; 0x618a <__floatsisf+0x54>
    6182:	9e e8       	ldi	r25, 0x8E	; 142
    6184:	87 2f       	mov	r24, r23
    6186:	76 2f       	mov	r23, r22
    6188:	05 c0       	rjmp	.+10     	; 0x6194 <__floatsisf+0x5e>
    618a:	66 23       	and	r22, r22
    618c:	71 f0       	breq	.+28     	; 0x61aa <__floatsisf+0x74>
    618e:	96 e8       	ldi	r25, 0x86	; 134
    6190:	86 2f       	mov	r24, r22
    6192:	70 e0       	ldi	r23, 0x00	; 0
    6194:	60 e0       	ldi	r22, 0x00	; 0
    6196:	2a f0       	brmi	.+10     	; 0x61a2 <__floatsisf+0x6c>
    6198:	9a 95       	dec	r25
    619a:	66 0f       	add	r22, r22
    619c:	77 1f       	adc	r23, r23
    619e:	88 1f       	adc	r24, r24
    61a0:	da f7       	brpl	.-10     	; 0x6198 <__floatsisf+0x62>
    61a2:	88 0f       	add	r24, r24
    61a4:	96 95       	lsr	r25
    61a6:	87 95       	ror	r24
    61a8:	97 f9       	bld	r25, 7
    61aa:	08 95       	ret

000061ac <__fp_cmp>:
    61ac:	99 0f       	add	r25, r25
    61ae:	00 08       	sbc	r0, r0
    61b0:	55 0f       	add	r21, r21
    61b2:	aa 0b       	sbc	r26, r26
    61b4:	e0 e8       	ldi	r30, 0x80	; 128
    61b6:	fe ef       	ldi	r31, 0xFE	; 254
    61b8:	16 16       	cp	r1, r22
    61ba:	17 06       	cpc	r1, r23
    61bc:	e8 07       	cpc	r30, r24
    61be:	f9 07       	cpc	r31, r25
    61c0:	c0 f0       	brcs	.+48     	; 0x61f2 <__fp_cmp+0x46>
    61c2:	12 16       	cp	r1, r18
    61c4:	13 06       	cpc	r1, r19
    61c6:	e4 07       	cpc	r30, r20
    61c8:	f5 07       	cpc	r31, r21
    61ca:	98 f0       	brcs	.+38     	; 0x61f2 <__fp_cmp+0x46>
    61cc:	62 1b       	sub	r22, r18
    61ce:	73 0b       	sbc	r23, r19
    61d0:	84 0b       	sbc	r24, r20
    61d2:	95 0b       	sbc	r25, r21
    61d4:	39 f4       	brne	.+14     	; 0x61e4 <__fp_cmp+0x38>
    61d6:	0a 26       	eor	r0, r26
    61d8:	61 f0       	breq	.+24     	; 0x61f2 <__fp_cmp+0x46>
    61da:	23 2b       	or	r18, r19
    61dc:	24 2b       	or	r18, r20
    61de:	25 2b       	or	r18, r21
    61e0:	21 f4       	brne	.+8      	; 0x61ea <__fp_cmp+0x3e>
    61e2:	08 95       	ret
    61e4:	0a 26       	eor	r0, r26
    61e6:	09 f4       	brne	.+2      	; 0x61ea <__fp_cmp+0x3e>
    61e8:	a1 40       	sbci	r26, 0x01	; 1
    61ea:	a6 95       	lsr	r26
    61ec:	8f ef       	ldi	r24, 0xFF	; 255
    61ee:	81 1d       	adc	r24, r1
    61f0:	81 1d       	adc	r24, r1
    61f2:	08 95       	ret

000061f4 <__fp_inf>:
    61f4:	97 f9       	bld	r25, 7
    61f6:	9f 67       	ori	r25, 0x7F	; 127
    61f8:	80 e8       	ldi	r24, 0x80	; 128
    61fa:	70 e0       	ldi	r23, 0x00	; 0
    61fc:	60 e0       	ldi	r22, 0x00	; 0
    61fe:	08 95       	ret

00006200 <__fp_nan>:
    6200:	9f ef       	ldi	r25, 0xFF	; 255
    6202:	80 ec       	ldi	r24, 0xC0	; 192
    6204:	08 95       	ret

00006206 <__fp_pscA>:
    6206:	00 24       	eor	r0, r0
    6208:	0a 94       	dec	r0
    620a:	16 16       	cp	r1, r22
    620c:	17 06       	cpc	r1, r23
    620e:	18 06       	cpc	r1, r24
    6210:	09 06       	cpc	r0, r25
    6212:	08 95       	ret

00006214 <__fp_pscB>:
    6214:	00 24       	eor	r0, r0
    6216:	0a 94       	dec	r0
    6218:	12 16       	cp	r1, r18
    621a:	13 06       	cpc	r1, r19
    621c:	14 06       	cpc	r1, r20
    621e:	05 06       	cpc	r0, r21
    6220:	08 95       	ret

00006222 <__fp_round>:
    6222:	09 2e       	mov	r0, r25
    6224:	03 94       	inc	r0
    6226:	00 0c       	add	r0, r0
    6228:	11 f4       	brne	.+4      	; 0x622e <__fp_round+0xc>
    622a:	88 23       	and	r24, r24
    622c:	52 f0       	brmi	.+20     	; 0x6242 <__fp_round+0x20>
    622e:	bb 0f       	add	r27, r27
    6230:	40 f4       	brcc	.+16     	; 0x6242 <__fp_round+0x20>
    6232:	bf 2b       	or	r27, r31
    6234:	11 f4       	brne	.+4      	; 0x623a <__fp_round+0x18>
    6236:	60 ff       	sbrs	r22, 0
    6238:	04 c0       	rjmp	.+8      	; 0x6242 <__fp_round+0x20>
    623a:	6f 5f       	subi	r22, 0xFF	; 255
    623c:	7f 4f       	sbci	r23, 0xFF	; 255
    623e:	8f 4f       	sbci	r24, 0xFF	; 255
    6240:	9f 4f       	sbci	r25, 0xFF	; 255
    6242:	08 95       	ret

00006244 <__fp_split3>:
    6244:	57 fd       	sbrc	r21, 7
    6246:	90 58       	subi	r25, 0x80	; 128
    6248:	44 0f       	add	r20, r20
    624a:	55 1f       	adc	r21, r21
    624c:	59 f0       	breq	.+22     	; 0x6264 <__fp_splitA+0x10>
    624e:	5f 3f       	cpi	r21, 0xFF	; 255
    6250:	71 f0       	breq	.+28     	; 0x626e <__fp_splitA+0x1a>
    6252:	47 95       	ror	r20

00006254 <__fp_splitA>:
    6254:	88 0f       	add	r24, r24
    6256:	97 fb       	bst	r25, 7
    6258:	99 1f       	adc	r25, r25
    625a:	61 f0       	breq	.+24     	; 0x6274 <__fp_splitA+0x20>
    625c:	9f 3f       	cpi	r25, 0xFF	; 255
    625e:	79 f0       	breq	.+30     	; 0x627e <__fp_splitA+0x2a>
    6260:	87 95       	ror	r24
    6262:	08 95       	ret
    6264:	12 16       	cp	r1, r18
    6266:	13 06       	cpc	r1, r19
    6268:	14 06       	cpc	r1, r20
    626a:	55 1f       	adc	r21, r21
    626c:	f2 cf       	rjmp	.-28     	; 0x6252 <__fp_split3+0xe>
    626e:	46 95       	lsr	r20
    6270:	f1 df       	rcall	.-30     	; 0x6254 <__fp_splitA>
    6272:	08 c0       	rjmp	.+16     	; 0x6284 <__fp_splitA+0x30>
    6274:	16 16       	cp	r1, r22
    6276:	17 06       	cpc	r1, r23
    6278:	18 06       	cpc	r1, r24
    627a:	99 1f       	adc	r25, r25
    627c:	f1 cf       	rjmp	.-30     	; 0x6260 <__fp_splitA+0xc>
    627e:	86 95       	lsr	r24
    6280:	71 05       	cpc	r23, r1
    6282:	61 05       	cpc	r22, r1
    6284:	08 94       	sec
    6286:	08 95       	ret

00006288 <__fp_zero>:
    6288:	e8 94       	clt

0000628a <__fp_szero>:
    628a:	bb 27       	eor	r27, r27
    628c:	66 27       	eor	r22, r22
    628e:	77 27       	eor	r23, r23
    6290:	cb 01       	movw	r24, r22
    6292:	97 f9       	bld	r25, 7
    6294:	08 95       	ret

00006296 <__gesf2>:
    6296:	0e 94 d6 30 	call	0x61ac	; 0x61ac <__fp_cmp>
    629a:	08 f4       	brcc	.+2      	; 0x629e <__gesf2+0x8>
    629c:	8f ef       	ldi	r24, 0xFF	; 255
    629e:	08 95       	ret

000062a0 <__mulsf3>:
    62a0:	0e 94 63 31 	call	0x62c6	; 0x62c6 <__mulsf3x>
    62a4:	0c 94 11 31 	jmp	0x6222	; 0x6222 <__fp_round>
    62a8:	0e 94 03 31 	call	0x6206	; 0x6206 <__fp_pscA>
    62ac:	38 f0       	brcs	.+14     	; 0x62bc <__mulsf3+0x1c>
    62ae:	0e 94 0a 31 	call	0x6214	; 0x6214 <__fp_pscB>
    62b2:	20 f0       	brcs	.+8      	; 0x62bc <__mulsf3+0x1c>
    62b4:	95 23       	and	r25, r21
    62b6:	11 f0       	breq	.+4      	; 0x62bc <__mulsf3+0x1c>
    62b8:	0c 94 fa 30 	jmp	0x61f4	; 0x61f4 <__fp_inf>
    62bc:	0c 94 00 31 	jmp	0x6200	; 0x6200 <__fp_nan>
    62c0:	11 24       	eor	r1, r1
    62c2:	0c 94 45 31 	jmp	0x628a	; 0x628a <__fp_szero>

000062c6 <__mulsf3x>:
    62c6:	0e 94 22 31 	call	0x6244	; 0x6244 <__fp_split3>
    62ca:	70 f3       	brcs	.-36     	; 0x62a8 <__mulsf3+0x8>

000062cc <__mulsf3_pse>:
    62cc:	95 9f       	mul	r25, r21
    62ce:	c1 f3       	breq	.-16     	; 0x62c0 <__mulsf3+0x20>
    62d0:	95 0f       	add	r25, r21
    62d2:	50 e0       	ldi	r21, 0x00	; 0
    62d4:	55 1f       	adc	r21, r21
    62d6:	62 9f       	mul	r22, r18
    62d8:	f0 01       	movw	r30, r0
    62da:	72 9f       	mul	r23, r18
    62dc:	bb 27       	eor	r27, r27
    62de:	f0 0d       	add	r31, r0
    62e0:	b1 1d       	adc	r27, r1
    62e2:	63 9f       	mul	r22, r19
    62e4:	aa 27       	eor	r26, r26
    62e6:	f0 0d       	add	r31, r0
    62e8:	b1 1d       	adc	r27, r1
    62ea:	aa 1f       	adc	r26, r26
    62ec:	64 9f       	mul	r22, r20
    62ee:	66 27       	eor	r22, r22
    62f0:	b0 0d       	add	r27, r0
    62f2:	a1 1d       	adc	r26, r1
    62f4:	66 1f       	adc	r22, r22
    62f6:	82 9f       	mul	r24, r18
    62f8:	22 27       	eor	r18, r18
    62fa:	b0 0d       	add	r27, r0
    62fc:	a1 1d       	adc	r26, r1
    62fe:	62 1f       	adc	r22, r18
    6300:	73 9f       	mul	r23, r19
    6302:	b0 0d       	add	r27, r0
    6304:	a1 1d       	adc	r26, r1
    6306:	62 1f       	adc	r22, r18
    6308:	83 9f       	mul	r24, r19
    630a:	a0 0d       	add	r26, r0
    630c:	61 1d       	adc	r22, r1
    630e:	22 1f       	adc	r18, r18
    6310:	74 9f       	mul	r23, r20
    6312:	33 27       	eor	r19, r19
    6314:	a0 0d       	add	r26, r0
    6316:	61 1d       	adc	r22, r1
    6318:	23 1f       	adc	r18, r19
    631a:	84 9f       	mul	r24, r20
    631c:	60 0d       	add	r22, r0
    631e:	21 1d       	adc	r18, r1
    6320:	82 2f       	mov	r24, r18
    6322:	76 2f       	mov	r23, r22
    6324:	6a 2f       	mov	r22, r26
    6326:	11 24       	eor	r1, r1
    6328:	9f 57       	subi	r25, 0x7F	; 127
    632a:	50 40       	sbci	r21, 0x00	; 0
    632c:	9a f0       	brmi	.+38     	; 0x6354 <__mulsf3_pse+0x88>
    632e:	f1 f0       	breq	.+60     	; 0x636c <__mulsf3_pse+0xa0>
    6330:	88 23       	and	r24, r24
    6332:	4a f0       	brmi	.+18     	; 0x6346 <__mulsf3_pse+0x7a>
    6334:	ee 0f       	add	r30, r30
    6336:	ff 1f       	adc	r31, r31
    6338:	bb 1f       	adc	r27, r27
    633a:	66 1f       	adc	r22, r22
    633c:	77 1f       	adc	r23, r23
    633e:	88 1f       	adc	r24, r24
    6340:	91 50       	subi	r25, 0x01	; 1
    6342:	50 40       	sbci	r21, 0x00	; 0
    6344:	a9 f7       	brne	.-22     	; 0x6330 <__mulsf3_pse+0x64>
    6346:	9e 3f       	cpi	r25, 0xFE	; 254
    6348:	51 05       	cpc	r21, r1
    634a:	80 f0       	brcs	.+32     	; 0x636c <__mulsf3_pse+0xa0>
    634c:	0c 94 fa 30 	jmp	0x61f4	; 0x61f4 <__fp_inf>
    6350:	0c 94 45 31 	jmp	0x628a	; 0x628a <__fp_szero>
    6354:	5f 3f       	cpi	r21, 0xFF	; 255
    6356:	e4 f3       	brlt	.-8      	; 0x6350 <__mulsf3_pse+0x84>
    6358:	98 3e       	cpi	r25, 0xE8	; 232
    635a:	d4 f3       	brlt	.-12     	; 0x6350 <__mulsf3_pse+0x84>
    635c:	86 95       	lsr	r24
    635e:	77 95       	ror	r23
    6360:	67 95       	ror	r22
    6362:	b7 95       	ror	r27
    6364:	f7 95       	ror	r31
    6366:	e7 95       	ror	r30
    6368:	9f 5f       	subi	r25, 0xFF	; 255
    636a:	c1 f7       	brne	.-16     	; 0x635c <__mulsf3_pse+0x90>
    636c:	fe 2b       	or	r31, r30
    636e:	88 0f       	add	r24, r24
    6370:	91 1d       	adc	r25, r1
    6372:	96 95       	lsr	r25
    6374:	87 95       	ror	r24
    6376:	97 f9       	bld	r25, 7
    6378:	08 95       	ret

0000637a <vfprintf>:
    637a:	a0 e1       	ldi	r26, 0x10	; 16
    637c:	b0 e0       	ldi	r27, 0x00	; 0
    637e:	e3 ec       	ldi	r30, 0xC3	; 195
    6380:	f1 e3       	ldi	r31, 0x31	; 49
    6382:	0c 94 7e 35 	jmp	0x6afc	; 0x6afc <__prologue_saves__>
    6386:	7c 01       	movw	r14, r24
    6388:	1b 01       	movw	r2, r22
    638a:	6a 01       	movw	r12, r20
    638c:	fc 01       	movw	r30, r24
    638e:	16 82       	std	Z+6, r1	; 0x06
    6390:	17 82       	std	Z+7, r1	; 0x07
    6392:	83 81       	ldd	r24, Z+3	; 0x03
    6394:	81 ff       	sbrs	r24, 1
    6396:	44 c3       	rjmp	.+1672   	; 0x6a20 <vfprintf+0x6a6>
    6398:	9e 01       	movw	r18, r28
    639a:	2f 5f       	subi	r18, 0xFF	; 255
    639c:	3f 4f       	sbci	r19, 0xFF	; 255
    639e:	39 01       	movw	r6, r18
    63a0:	f7 01       	movw	r30, r14
    63a2:	93 81       	ldd	r25, Z+3	; 0x03
    63a4:	f1 01       	movw	r30, r2
    63a6:	93 fd       	sbrc	r25, 3
    63a8:	85 91       	lpm	r24, Z+
    63aa:	93 ff       	sbrs	r25, 3
    63ac:	81 91       	ld	r24, Z+
    63ae:	1f 01       	movw	r2, r30
    63b0:	88 23       	and	r24, r24
    63b2:	09 f4       	brne	.+2      	; 0x63b6 <vfprintf+0x3c>
    63b4:	31 c3       	rjmp	.+1634   	; 0x6a18 <vfprintf+0x69e>
    63b6:	85 32       	cpi	r24, 0x25	; 37
    63b8:	39 f4       	brne	.+14     	; 0x63c8 <vfprintf+0x4e>
    63ba:	93 fd       	sbrc	r25, 3
    63bc:	85 91       	lpm	r24, Z+
    63be:	93 ff       	sbrs	r25, 3
    63c0:	81 91       	ld	r24, Z+
    63c2:	1f 01       	movw	r2, r30
    63c4:	85 32       	cpi	r24, 0x25	; 37
    63c6:	39 f4       	brne	.+14     	; 0x63d6 <vfprintf+0x5c>
    63c8:	b7 01       	movw	r22, r14
    63ca:	90 e0       	ldi	r25, 0x00	; 0
    63cc:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    63d0:	56 01       	movw	r10, r12
    63d2:	65 01       	movw	r12, r10
    63d4:	e5 cf       	rjmp	.-54     	; 0x63a0 <vfprintf+0x26>
    63d6:	10 e0       	ldi	r17, 0x00	; 0
    63d8:	51 2c       	mov	r5, r1
    63da:	91 2c       	mov	r9, r1
    63dc:	ff e1       	ldi	r31, 0x1F	; 31
    63de:	f9 15       	cp	r31, r9
    63e0:	d8 f0       	brcs	.+54     	; 0x6418 <vfprintf+0x9e>
    63e2:	8b 32       	cpi	r24, 0x2B	; 43
    63e4:	79 f0       	breq	.+30     	; 0x6404 <vfprintf+0x8a>
    63e6:	38 f4       	brcc	.+14     	; 0x63f6 <vfprintf+0x7c>
    63e8:	80 32       	cpi	r24, 0x20	; 32
    63ea:	79 f0       	breq	.+30     	; 0x640a <vfprintf+0x90>
    63ec:	83 32       	cpi	r24, 0x23	; 35
    63ee:	a1 f4       	brne	.+40     	; 0x6418 <vfprintf+0x9e>
    63f0:	f9 2d       	mov	r31, r9
    63f2:	f0 61       	ori	r31, 0x10	; 16
    63f4:	2e c0       	rjmp	.+92     	; 0x6452 <vfprintf+0xd8>
    63f6:	8d 32       	cpi	r24, 0x2D	; 45
    63f8:	61 f0       	breq	.+24     	; 0x6412 <vfprintf+0x98>
    63fa:	80 33       	cpi	r24, 0x30	; 48
    63fc:	69 f4       	brne	.+26     	; 0x6418 <vfprintf+0x9e>
    63fe:	29 2d       	mov	r18, r9
    6400:	21 60       	ori	r18, 0x01	; 1
    6402:	2d c0       	rjmp	.+90     	; 0x645e <vfprintf+0xe4>
    6404:	39 2d       	mov	r19, r9
    6406:	32 60       	ori	r19, 0x02	; 2
    6408:	93 2e       	mov	r9, r19
    640a:	89 2d       	mov	r24, r9
    640c:	84 60       	ori	r24, 0x04	; 4
    640e:	98 2e       	mov	r9, r24
    6410:	2a c0       	rjmp	.+84     	; 0x6466 <vfprintf+0xec>
    6412:	e9 2d       	mov	r30, r9
    6414:	e8 60       	ori	r30, 0x08	; 8
    6416:	15 c0       	rjmp	.+42     	; 0x6442 <vfprintf+0xc8>
    6418:	97 fc       	sbrc	r9, 7
    641a:	2d c0       	rjmp	.+90     	; 0x6476 <vfprintf+0xfc>
    641c:	20 ed       	ldi	r18, 0xD0	; 208
    641e:	28 0f       	add	r18, r24
    6420:	2a 30       	cpi	r18, 0x0A	; 10
    6422:	88 f4       	brcc	.+34     	; 0x6446 <vfprintf+0xcc>
    6424:	96 fe       	sbrs	r9, 6
    6426:	06 c0       	rjmp	.+12     	; 0x6434 <vfprintf+0xba>
    6428:	3a e0       	ldi	r19, 0x0A	; 10
    642a:	13 9f       	mul	r17, r19
    642c:	20 0d       	add	r18, r0
    642e:	11 24       	eor	r1, r1
    6430:	12 2f       	mov	r17, r18
    6432:	19 c0       	rjmp	.+50     	; 0x6466 <vfprintf+0xec>
    6434:	8a e0       	ldi	r24, 0x0A	; 10
    6436:	58 9e       	mul	r5, r24
    6438:	20 0d       	add	r18, r0
    643a:	11 24       	eor	r1, r1
    643c:	52 2e       	mov	r5, r18
    643e:	e9 2d       	mov	r30, r9
    6440:	e0 62       	ori	r30, 0x20	; 32
    6442:	9e 2e       	mov	r9, r30
    6444:	10 c0       	rjmp	.+32     	; 0x6466 <vfprintf+0xec>
    6446:	8e 32       	cpi	r24, 0x2E	; 46
    6448:	31 f4       	brne	.+12     	; 0x6456 <vfprintf+0xdc>
    644a:	96 fc       	sbrc	r9, 6
    644c:	e5 c2       	rjmp	.+1482   	; 0x6a18 <vfprintf+0x69e>
    644e:	f9 2d       	mov	r31, r9
    6450:	f0 64       	ori	r31, 0x40	; 64
    6452:	9f 2e       	mov	r9, r31
    6454:	08 c0       	rjmp	.+16     	; 0x6466 <vfprintf+0xec>
    6456:	8c 36       	cpi	r24, 0x6C	; 108
    6458:	21 f4       	brne	.+8      	; 0x6462 <vfprintf+0xe8>
    645a:	29 2d       	mov	r18, r9
    645c:	20 68       	ori	r18, 0x80	; 128
    645e:	92 2e       	mov	r9, r18
    6460:	02 c0       	rjmp	.+4      	; 0x6466 <vfprintf+0xec>
    6462:	88 36       	cpi	r24, 0x68	; 104
    6464:	41 f4       	brne	.+16     	; 0x6476 <vfprintf+0xfc>
    6466:	f1 01       	movw	r30, r2
    6468:	93 fd       	sbrc	r25, 3
    646a:	85 91       	lpm	r24, Z+
    646c:	93 ff       	sbrs	r25, 3
    646e:	81 91       	ld	r24, Z+
    6470:	1f 01       	movw	r2, r30
    6472:	81 11       	cpse	r24, r1
    6474:	b3 cf       	rjmp	.-154    	; 0x63dc <vfprintf+0x62>
    6476:	9b eb       	ldi	r25, 0xBB	; 187
    6478:	98 0f       	add	r25, r24
    647a:	93 30       	cpi	r25, 0x03	; 3
    647c:	20 f4       	brcc	.+8      	; 0x6486 <vfprintf+0x10c>
    647e:	99 2d       	mov	r25, r9
    6480:	90 61       	ori	r25, 0x10	; 16
    6482:	80 5e       	subi	r24, 0xE0	; 224
    6484:	07 c0       	rjmp	.+14     	; 0x6494 <vfprintf+0x11a>
    6486:	9b e9       	ldi	r25, 0x9B	; 155
    6488:	98 0f       	add	r25, r24
    648a:	93 30       	cpi	r25, 0x03	; 3
    648c:	08 f0       	brcs	.+2      	; 0x6490 <vfprintf+0x116>
    648e:	66 c1       	rjmp	.+716    	; 0x675c <vfprintf+0x3e2>
    6490:	99 2d       	mov	r25, r9
    6492:	9f 7e       	andi	r25, 0xEF	; 239
    6494:	96 ff       	sbrs	r25, 6
    6496:	16 e0       	ldi	r17, 0x06	; 6
    6498:	9f 73       	andi	r25, 0x3F	; 63
    649a:	99 2e       	mov	r9, r25
    649c:	85 36       	cpi	r24, 0x65	; 101
    649e:	19 f4       	brne	.+6      	; 0x64a6 <vfprintf+0x12c>
    64a0:	90 64       	ori	r25, 0x40	; 64
    64a2:	99 2e       	mov	r9, r25
    64a4:	08 c0       	rjmp	.+16     	; 0x64b6 <vfprintf+0x13c>
    64a6:	86 36       	cpi	r24, 0x66	; 102
    64a8:	21 f4       	brne	.+8      	; 0x64b2 <vfprintf+0x138>
    64aa:	39 2f       	mov	r19, r25
    64ac:	30 68       	ori	r19, 0x80	; 128
    64ae:	93 2e       	mov	r9, r19
    64b0:	02 c0       	rjmp	.+4      	; 0x64b6 <vfprintf+0x13c>
    64b2:	11 11       	cpse	r17, r1
    64b4:	11 50       	subi	r17, 0x01	; 1
    64b6:	97 fe       	sbrs	r9, 7
    64b8:	07 c0       	rjmp	.+14     	; 0x64c8 <vfprintf+0x14e>
    64ba:	1c 33       	cpi	r17, 0x3C	; 60
    64bc:	50 f4       	brcc	.+20     	; 0x64d2 <vfprintf+0x158>
    64be:	44 24       	eor	r4, r4
    64c0:	43 94       	inc	r4
    64c2:	41 0e       	add	r4, r17
    64c4:	27 e0       	ldi	r18, 0x07	; 7
    64c6:	0b c0       	rjmp	.+22     	; 0x64de <vfprintf+0x164>
    64c8:	18 30       	cpi	r17, 0x08	; 8
    64ca:	38 f0       	brcs	.+14     	; 0x64da <vfprintf+0x160>
    64cc:	27 e0       	ldi	r18, 0x07	; 7
    64ce:	17 e0       	ldi	r17, 0x07	; 7
    64d0:	05 c0       	rjmp	.+10     	; 0x64dc <vfprintf+0x162>
    64d2:	27 e0       	ldi	r18, 0x07	; 7
    64d4:	9c e3       	ldi	r25, 0x3C	; 60
    64d6:	49 2e       	mov	r4, r25
    64d8:	02 c0       	rjmp	.+4      	; 0x64de <vfprintf+0x164>
    64da:	21 2f       	mov	r18, r17
    64dc:	41 2c       	mov	r4, r1
    64de:	56 01       	movw	r10, r12
    64e0:	84 e0       	ldi	r24, 0x04	; 4
    64e2:	a8 0e       	add	r10, r24
    64e4:	b1 1c       	adc	r11, r1
    64e6:	f6 01       	movw	r30, r12
    64e8:	60 81       	ld	r22, Z
    64ea:	71 81       	ldd	r23, Z+1	; 0x01
    64ec:	82 81       	ldd	r24, Z+2	; 0x02
    64ee:	93 81       	ldd	r25, Z+3	; 0x03
    64f0:	04 2d       	mov	r16, r4
    64f2:	a3 01       	movw	r20, r6
    64f4:	0e 94 39 36 	call	0x6c72	; 0x6c72 <__ftoa_engine>
    64f8:	6c 01       	movw	r12, r24
    64fa:	f9 81       	ldd	r31, Y+1	; 0x01
    64fc:	fc 87       	std	Y+12, r31	; 0x0c
    64fe:	f0 ff       	sbrs	r31, 0
    6500:	02 c0       	rjmp	.+4      	; 0x6506 <vfprintf+0x18c>
    6502:	f3 ff       	sbrs	r31, 3
    6504:	06 c0       	rjmp	.+12     	; 0x6512 <vfprintf+0x198>
    6506:	91 fc       	sbrc	r9, 1
    6508:	06 c0       	rjmp	.+12     	; 0x6516 <vfprintf+0x19c>
    650a:	92 fe       	sbrs	r9, 2
    650c:	06 c0       	rjmp	.+12     	; 0x651a <vfprintf+0x1a0>
    650e:	00 e2       	ldi	r16, 0x20	; 32
    6510:	05 c0       	rjmp	.+10     	; 0x651c <vfprintf+0x1a2>
    6512:	0d e2       	ldi	r16, 0x2D	; 45
    6514:	03 c0       	rjmp	.+6      	; 0x651c <vfprintf+0x1a2>
    6516:	0b e2       	ldi	r16, 0x2B	; 43
    6518:	01 c0       	rjmp	.+2      	; 0x651c <vfprintf+0x1a2>
    651a:	00 e0       	ldi	r16, 0x00	; 0
    651c:	8c 85       	ldd	r24, Y+12	; 0x0c
    651e:	8c 70       	andi	r24, 0x0C	; 12
    6520:	19 f0       	breq	.+6      	; 0x6528 <vfprintf+0x1ae>
    6522:	01 11       	cpse	r16, r1
    6524:	5a c2       	rjmp	.+1204   	; 0x69da <vfprintf+0x660>
    6526:	9b c2       	rjmp	.+1334   	; 0x6a5e <vfprintf+0x6e4>
    6528:	97 fe       	sbrs	r9, 7
    652a:	10 c0       	rjmp	.+32     	; 0x654c <vfprintf+0x1d2>
    652c:	4c 0c       	add	r4, r12
    652e:	fc 85       	ldd	r31, Y+12	; 0x0c
    6530:	f4 ff       	sbrs	r31, 4
    6532:	04 c0       	rjmp	.+8      	; 0x653c <vfprintf+0x1c2>
    6534:	8a 81       	ldd	r24, Y+2	; 0x02
    6536:	81 33       	cpi	r24, 0x31	; 49
    6538:	09 f4       	brne	.+2      	; 0x653c <vfprintf+0x1c2>
    653a:	4a 94       	dec	r4
    653c:	14 14       	cp	r1, r4
    653e:	74 f5       	brge	.+92     	; 0x659c <vfprintf+0x222>
    6540:	28 e0       	ldi	r18, 0x08	; 8
    6542:	24 15       	cp	r18, r4
    6544:	78 f5       	brcc	.+94     	; 0x65a4 <vfprintf+0x22a>
    6546:	88 e0       	ldi	r24, 0x08	; 8
    6548:	48 2e       	mov	r4, r24
    654a:	2c c0       	rjmp	.+88     	; 0x65a4 <vfprintf+0x22a>
    654c:	96 fc       	sbrc	r9, 6
    654e:	2a c0       	rjmp	.+84     	; 0x65a4 <vfprintf+0x22a>
    6550:	81 2f       	mov	r24, r17
    6552:	90 e0       	ldi	r25, 0x00	; 0
    6554:	8c 15       	cp	r24, r12
    6556:	9d 05       	cpc	r25, r13
    6558:	9c f0       	brlt	.+38     	; 0x6580 <vfprintf+0x206>
    655a:	3c ef       	ldi	r19, 0xFC	; 252
    655c:	c3 16       	cp	r12, r19
    655e:	3f ef       	ldi	r19, 0xFF	; 255
    6560:	d3 06       	cpc	r13, r19
    6562:	74 f0       	brlt	.+28     	; 0x6580 <vfprintf+0x206>
    6564:	89 2d       	mov	r24, r9
    6566:	80 68       	ori	r24, 0x80	; 128
    6568:	98 2e       	mov	r9, r24
    656a:	0a c0       	rjmp	.+20     	; 0x6580 <vfprintf+0x206>
    656c:	e2 e0       	ldi	r30, 0x02	; 2
    656e:	f0 e0       	ldi	r31, 0x00	; 0
    6570:	ec 0f       	add	r30, r28
    6572:	fd 1f       	adc	r31, r29
    6574:	e1 0f       	add	r30, r17
    6576:	f1 1d       	adc	r31, r1
    6578:	80 81       	ld	r24, Z
    657a:	80 33       	cpi	r24, 0x30	; 48
    657c:	19 f4       	brne	.+6      	; 0x6584 <vfprintf+0x20a>
    657e:	11 50       	subi	r17, 0x01	; 1
    6580:	11 11       	cpse	r17, r1
    6582:	f4 cf       	rjmp	.-24     	; 0x656c <vfprintf+0x1f2>
    6584:	97 fe       	sbrs	r9, 7
    6586:	0e c0       	rjmp	.+28     	; 0x65a4 <vfprintf+0x22a>
    6588:	44 24       	eor	r4, r4
    658a:	43 94       	inc	r4
    658c:	41 0e       	add	r4, r17
    658e:	81 2f       	mov	r24, r17
    6590:	90 e0       	ldi	r25, 0x00	; 0
    6592:	c8 16       	cp	r12, r24
    6594:	d9 06       	cpc	r13, r25
    6596:	2c f4       	brge	.+10     	; 0x65a2 <vfprintf+0x228>
    6598:	1c 19       	sub	r17, r12
    659a:	04 c0       	rjmp	.+8      	; 0x65a4 <vfprintf+0x22a>
    659c:	44 24       	eor	r4, r4
    659e:	43 94       	inc	r4
    65a0:	01 c0       	rjmp	.+2      	; 0x65a4 <vfprintf+0x22a>
    65a2:	10 e0       	ldi	r17, 0x00	; 0
    65a4:	97 fe       	sbrs	r9, 7
    65a6:	06 c0       	rjmp	.+12     	; 0x65b4 <vfprintf+0x23a>
    65a8:	1c 14       	cp	r1, r12
    65aa:	1d 04       	cpc	r1, r13
    65ac:	34 f4       	brge	.+12     	; 0x65ba <vfprintf+0x240>
    65ae:	c6 01       	movw	r24, r12
    65b0:	01 96       	adiw	r24, 0x01	; 1
    65b2:	05 c0       	rjmp	.+10     	; 0x65be <vfprintf+0x244>
    65b4:	85 e0       	ldi	r24, 0x05	; 5
    65b6:	90 e0       	ldi	r25, 0x00	; 0
    65b8:	02 c0       	rjmp	.+4      	; 0x65be <vfprintf+0x244>
    65ba:	81 e0       	ldi	r24, 0x01	; 1
    65bc:	90 e0       	ldi	r25, 0x00	; 0
    65be:	01 11       	cpse	r16, r1
    65c0:	01 96       	adiw	r24, 0x01	; 1
    65c2:	11 23       	and	r17, r17
    65c4:	31 f0       	breq	.+12     	; 0x65d2 <vfprintf+0x258>
    65c6:	21 2f       	mov	r18, r17
    65c8:	30 e0       	ldi	r19, 0x00	; 0
    65ca:	2f 5f       	subi	r18, 0xFF	; 255
    65cc:	3f 4f       	sbci	r19, 0xFF	; 255
    65ce:	82 0f       	add	r24, r18
    65d0:	93 1f       	adc	r25, r19
    65d2:	25 2d       	mov	r18, r5
    65d4:	30 e0       	ldi	r19, 0x00	; 0
    65d6:	82 17       	cp	r24, r18
    65d8:	93 07       	cpc	r25, r19
    65da:	14 f4       	brge	.+4      	; 0x65e0 <vfprintf+0x266>
    65dc:	58 1a       	sub	r5, r24
    65de:	01 c0       	rjmp	.+2      	; 0x65e2 <vfprintf+0x268>
    65e0:	51 2c       	mov	r5, r1
    65e2:	89 2d       	mov	r24, r9
    65e4:	89 70       	andi	r24, 0x09	; 9
    65e6:	49 f4       	brne	.+18     	; 0x65fa <vfprintf+0x280>
    65e8:	55 20       	and	r5, r5
    65ea:	39 f0       	breq	.+14     	; 0x65fa <vfprintf+0x280>
    65ec:	b7 01       	movw	r22, r14
    65ee:	80 e2       	ldi	r24, 0x20	; 32
    65f0:	90 e0       	ldi	r25, 0x00	; 0
    65f2:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    65f6:	5a 94       	dec	r5
    65f8:	f7 cf       	rjmp	.-18     	; 0x65e8 <vfprintf+0x26e>
    65fa:	00 23       	and	r16, r16
    65fc:	29 f0       	breq	.+10     	; 0x6608 <vfprintf+0x28e>
    65fe:	b7 01       	movw	r22, r14
    6600:	80 2f       	mov	r24, r16
    6602:	90 e0       	ldi	r25, 0x00	; 0
    6604:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    6608:	93 fc       	sbrc	r9, 3
    660a:	09 c0       	rjmp	.+18     	; 0x661e <vfprintf+0x2a4>
    660c:	55 20       	and	r5, r5
    660e:	39 f0       	breq	.+14     	; 0x661e <vfprintf+0x2a4>
    6610:	b7 01       	movw	r22, r14
    6612:	80 e3       	ldi	r24, 0x30	; 48
    6614:	90 e0       	ldi	r25, 0x00	; 0
    6616:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    661a:	5a 94       	dec	r5
    661c:	f7 cf       	rjmp	.-18     	; 0x660c <vfprintf+0x292>
    661e:	97 fe       	sbrs	r9, 7
    6620:	4c c0       	rjmp	.+152    	; 0x66ba <vfprintf+0x340>
    6622:	46 01       	movw	r8, r12
    6624:	d7 fe       	sbrs	r13, 7
    6626:	02 c0       	rjmp	.+4      	; 0x662c <vfprintf+0x2b2>
    6628:	81 2c       	mov	r8, r1
    662a:	91 2c       	mov	r9, r1
    662c:	c6 01       	movw	r24, r12
    662e:	88 19       	sub	r24, r8
    6630:	99 09       	sbc	r25, r9
    6632:	f3 01       	movw	r30, r6
    6634:	e8 0f       	add	r30, r24
    6636:	f9 1f       	adc	r31, r25
    6638:	ed 87       	std	Y+13, r30	; 0x0d
    663a:	fe 87       	std	Y+14, r31	; 0x0e
    663c:	96 01       	movw	r18, r12
    663e:	24 19       	sub	r18, r4
    6640:	31 09       	sbc	r19, r1
    6642:	2f 87       	std	Y+15, r18	; 0x0f
    6644:	38 8b       	std	Y+16, r19	; 0x10
    6646:	01 2f       	mov	r16, r17
    6648:	10 e0       	ldi	r17, 0x00	; 0
    664a:	11 95       	neg	r17
    664c:	01 95       	neg	r16
    664e:	11 09       	sbc	r17, r1
    6650:	3f ef       	ldi	r19, 0xFF	; 255
    6652:	83 16       	cp	r8, r19
    6654:	93 06       	cpc	r9, r19
    6656:	29 f4       	brne	.+10     	; 0x6662 <vfprintf+0x2e8>
    6658:	b7 01       	movw	r22, r14
    665a:	8e e2       	ldi	r24, 0x2E	; 46
    665c:	90 e0       	ldi	r25, 0x00	; 0
    665e:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    6662:	c8 14       	cp	r12, r8
    6664:	d9 04       	cpc	r13, r9
    6666:	4c f0       	brlt	.+18     	; 0x667a <vfprintf+0x300>
    6668:	8f 85       	ldd	r24, Y+15	; 0x0f
    666a:	98 89       	ldd	r25, Y+16	; 0x10
    666c:	88 15       	cp	r24, r8
    666e:	99 05       	cpc	r25, r9
    6670:	24 f4       	brge	.+8      	; 0x667a <vfprintf+0x300>
    6672:	ed 85       	ldd	r30, Y+13	; 0x0d
    6674:	fe 85       	ldd	r31, Y+14	; 0x0e
    6676:	81 81       	ldd	r24, Z+1	; 0x01
    6678:	01 c0       	rjmp	.+2      	; 0x667c <vfprintf+0x302>
    667a:	80 e3       	ldi	r24, 0x30	; 48
    667c:	f1 e0       	ldi	r31, 0x01	; 1
    667e:	8f 1a       	sub	r8, r31
    6680:	91 08       	sbc	r9, r1
    6682:	2d 85       	ldd	r18, Y+13	; 0x0d
    6684:	3e 85       	ldd	r19, Y+14	; 0x0e
    6686:	2f 5f       	subi	r18, 0xFF	; 255
    6688:	3f 4f       	sbci	r19, 0xFF	; 255
    668a:	2d 87       	std	Y+13, r18	; 0x0d
    668c:	3e 87       	std	Y+14, r19	; 0x0e
    668e:	80 16       	cp	r8, r16
    6690:	91 06       	cpc	r9, r17
    6692:	2c f0       	brlt	.+10     	; 0x669e <vfprintf+0x324>
    6694:	b7 01       	movw	r22, r14
    6696:	90 e0       	ldi	r25, 0x00	; 0
    6698:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    669c:	d9 cf       	rjmp	.-78     	; 0x6650 <vfprintf+0x2d6>
    669e:	c8 14       	cp	r12, r8
    66a0:	d9 04       	cpc	r13, r9
    66a2:	41 f4       	brne	.+16     	; 0x66b4 <vfprintf+0x33a>
    66a4:	9a 81       	ldd	r25, Y+2	; 0x02
    66a6:	96 33       	cpi	r25, 0x36	; 54
    66a8:	20 f4       	brcc	.+8      	; 0x66b2 <vfprintf+0x338>
    66aa:	95 33       	cpi	r25, 0x35	; 53
    66ac:	19 f4       	brne	.+6      	; 0x66b4 <vfprintf+0x33a>
    66ae:	3c 85       	ldd	r19, Y+12	; 0x0c
    66b0:	34 ff       	sbrs	r19, 4
    66b2:	81 e3       	ldi	r24, 0x31	; 49
    66b4:	b7 01       	movw	r22, r14
    66b6:	90 e0       	ldi	r25, 0x00	; 0
    66b8:	4e c0       	rjmp	.+156    	; 0x6756 <vfprintf+0x3dc>
    66ba:	8a 81       	ldd	r24, Y+2	; 0x02
    66bc:	81 33       	cpi	r24, 0x31	; 49
    66be:	19 f0       	breq	.+6      	; 0x66c6 <vfprintf+0x34c>
    66c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    66c2:	9f 7e       	andi	r25, 0xEF	; 239
    66c4:	9c 87       	std	Y+12, r25	; 0x0c
    66c6:	b7 01       	movw	r22, r14
    66c8:	90 e0       	ldi	r25, 0x00	; 0
    66ca:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    66ce:	11 11       	cpse	r17, r1
    66d0:	05 c0       	rjmp	.+10     	; 0x66dc <vfprintf+0x362>
    66d2:	94 fc       	sbrc	r9, 4
    66d4:	18 c0       	rjmp	.+48     	; 0x6706 <vfprintf+0x38c>
    66d6:	85 e6       	ldi	r24, 0x65	; 101
    66d8:	90 e0       	ldi	r25, 0x00	; 0
    66da:	17 c0       	rjmp	.+46     	; 0x670a <vfprintf+0x390>
    66dc:	b7 01       	movw	r22, r14
    66de:	8e e2       	ldi	r24, 0x2E	; 46
    66e0:	90 e0       	ldi	r25, 0x00	; 0
    66e2:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    66e6:	1e 5f       	subi	r17, 0xFE	; 254
    66e8:	82 e0       	ldi	r24, 0x02	; 2
    66ea:	01 e0       	ldi	r16, 0x01	; 1
    66ec:	08 0f       	add	r16, r24
    66ee:	f3 01       	movw	r30, r6
    66f0:	e8 0f       	add	r30, r24
    66f2:	f1 1d       	adc	r31, r1
    66f4:	80 81       	ld	r24, Z
    66f6:	b7 01       	movw	r22, r14
    66f8:	90 e0       	ldi	r25, 0x00	; 0
    66fa:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    66fe:	80 2f       	mov	r24, r16
    6700:	01 13       	cpse	r16, r17
    6702:	f3 cf       	rjmp	.-26     	; 0x66ea <vfprintf+0x370>
    6704:	e6 cf       	rjmp	.-52     	; 0x66d2 <vfprintf+0x358>
    6706:	85 e4       	ldi	r24, 0x45	; 69
    6708:	90 e0       	ldi	r25, 0x00	; 0
    670a:	b7 01       	movw	r22, r14
    670c:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    6710:	d7 fc       	sbrc	r13, 7
    6712:	06 c0       	rjmp	.+12     	; 0x6720 <vfprintf+0x3a6>
    6714:	c1 14       	cp	r12, r1
    6716:	d1 04       	cpc	r13, r1
    6718:	41 f4       	brne	.+16     	; 0x672a <vfprintf+0x3b0>
    671a:	ec 85       	ldd	r30, Y+12	; 0x0c
    671c:	e4 ff       	sbrs	r30, 4
    671e:	05 c0       	rjmp	.+10     	; 0x672a <vfprintf+0x3b0>
    6720:	d1 94       	neg	r13
    6722:	c1 94       	neg	r12
    6724:	d1 08       	sbc	r13, r1
    6726:	8d e2       	ldi	r24, 0x2D	; 45
    6728:	01 c0       	rjmp	.+2      	; 0x672c <vfprintf+0x3b2>
    672a:	8b e2       	ldi	r24, 0x2B	; 43
    672c:	b7 01       	movw	r22, r14
    672e:	90 e0       	ldi	r25, 0x00	; 0
    6730:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    6734:	80 e3       	ldi	r24, 0x30	; 48
    6736:	2a e0       	ldi	r18, 0x0A	; 10
    6738:	c2 16       	cp	r12, r18
    673a:	d1 04       	cpc	r13, r1
    673c:	2c f0       	brlt	.+10     	; 0x6748 <vfprintf+0x3ce>
    673e:	8f 5f       	subi	r24, 0xFF	; 255
    6740:	fa e0       	ldi	r31, 0x0A	; 10
    6742:	cf 1a       	sub	r12, r31
    6744:	d1 08       	sbc	r13, r1
    6746:	f7 cf       	rjmp	.-18     	; 0x6736 <vfprintf+0x3bc>
    6748:	b7 01       	movw	r22, r14
    674a:	90 e0       	ldi	r25, 0x00	; 0
    674c:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    6750:	b7 01       	movw	r22, r14
    6752:	c6 01       	movw	r24, r12
    6754:	c0 96       	adiw	r24, 0x30	; 48
    6756:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    675a:	54 c1       	rjmp	.+680    	; 0x6a04 <vfprintf+0x68a>
    675c:	83 36       	cpi	r24, 0x63	; 99
    675e:	31 f0       	breq	.+12     	; 0x676c <vfprintf+0x3f2>
    6760:	83 37       	cpi	r24, 0x73	; 115
    6762:	79 f0       	breq	.+30     	; 0x6782 <vfprintf+0x408>
    6764:	83 35       	cpi	r24, 0x53	; 83
    6766:	09 f0       	breq	.+2      	; 0x676a <vfprintf+0x3f0>
    6768:	56 c0       	rjmp	.+172    	; 0x6816 <vfprintf+0x49c>
    676a:	20 c0       	rjmp	.+64     	; 0x67ac <vfprintf+0x432>
    676c:	56 01       	movw	r10, r12
    676e:	32 e0       	ldi	r19, 0x02	; 2
    6770:	a3 0e       	add	r10, r19
    6772:	b1 1c       	adc	r11, r1
    6774:	f6 01       	movw	r30, r12
    6776:	80 81       	ld	r24, Z
    6778:	89 83       	std	Y+1, r24	; 0x01
    677a:	01 e0       	ldi	r16, 0x01	; 1
    677c:	10 e0       	ldi	r17, 0x00	; 0
    677e:	63 01       	movw	r12, r6
    6780:	12 c0       	rjmp	.+36     	; 0x67a6 <vfprintf+0x42c>
    6782:	56 01       	movw	r10, r12
    6784:	f2 e0       	ldi	r31, 0x02	; 2
    6786:	af 0e       	add	r10, r31
    6788:	b1 1c       	adc	r11, r1
    678a:	f6 01       	movw	r30, r12
    678c:	c0 80       	ld	r12, Z
    678e:	d1 80       	ldd	r13, Z+1	; 0x01
    6790:	96 fe       	sbrs	r9, 6
    6792:	03 c0       	rjmp	.+6      	; 0x679a <vfprintf+0x420>
    6794:	61 2f       	mov	r22, r17
    6796:	70 e0       	ldi	r23, 0x00	; 0
    6798:	02 c0       	rjmp	.+4      	; 0x679e <vfprintf+0x424>
    679a:	6f ef       	ldi	r22, 0xFF	; 255
    679c:	7f ef       	ldi	r23, 0xFF	; 255
    679e:	c6 01       	movw	r24, r12
    67a0:	0e 94 2e 37 	call	0x6e5c	; 0x6e5c <strnlen>
    67a4:	8c 01       	movw	r16, r24
    67a6:	f9 2d       	mov	r31, r9
    67a8:	ff 77       	andi	r31, 0x7F	; 127
    67aa:	14 c0       	rjmp	.+40     	; 0x67d4 <vfprintf+0x45a>
    67ac:	56 01       	movw	r10, r12
    67ae:	22 e0       	ldi	r18, 0x02	; 2
    67b0:	a2 0e       	add	r10, r18
    67b2:	b1 1c       	adc	r11, r1
    67b4:	f6 01       	movw	r30, r12
    67b6:	c0 80       	ld	r12, Z
    67b8:	d1 80       	ldd	r13, Z+1	; 0x01
    67ba:	96 fe       	sbrs	r9, 6
    67bc:	03 c0       	rjmp	.+6      	; 0x67c4 <vfprintf+0x44a>
    67be:	61 2f       	mov	r22, r17
    67c0:	70 e0       	ldi	r23, 0x00	; 0
    67c2:	02 c0       	rjmp	.+4      	; 0x67c8 <vfprintf+0x44e>
    67c4:	6f ef       	ldi	r22, 0xFF	; 255
    67c6:	7f ef       	ldi	r23, 0xFF	; 255
    67c8:	c6 01       	movw	r24, r12
    67ca:	0e 94 11 37 	call	0x6e22	; 0x6e22 <strnlen_P>
    67ce:	8c 01       	movw	r16, r24
    67d0:	f9 2d       	mov	r31, r9
    67d2:	f0 68       	ori	r31, 0x80	; 128
    67d4:	9f 2e       	mov	r9, r31
    67d6:	f3 fd       	sbrc	r31, 3
    67d8:	1a c0       	rjmp	.+52     	; 0x680e <vfprintf+0x494>
    67da:	85 2d       	mov	r24, r5
    67dc:	90 e0       	ldi	r25, 0x00	; 0
    67de:	08 17       	cp	r16, r24
    67e0:	19 07       	cpc	r17, r25
    67e2:	a8 f4       	brcc	.+42     	; 0x680e <vfprintf+0x494>
    67e4:	b7 01       	movw	r22, r14
    67e6:	80 e2       	ldi	r24, 0x20	; 32
    67e8:	90 e0       	ldi	r25, 0x00	; 0
    67ea:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    67ee:	5a 94       	dec	r5
    67f0:	f4 cf       	rjmp	.-24     	; 0x67da <vfprintf+0x460>
    67f2:	f6 01       	movw	r30, r12
    67f4:	97 fc       	sbrc	r9, 7
    67f6:	85 91       	lpm	r24, Z+
    67f8:	97 fe       	sbrs	r9, 7
    67fa:	81 91       	ld	r24, Z+
    67fc:	6f 01       	movw	r12, r30
    67fe:	b7 01       	movw	r22, r14
    6800:	90 e0       	ldi	r25, 0x00	; 0
    6802:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    6806:	51 10       	cpse	r5, r1
    6808:	5a 94       	dec	r5
    680a:	01 50       	subi	r16, 0x01	; 1
    680c:	11 09       	sbc	r17, r1
    680e:	01 15       	cp	r16, r1
    6810:	11 05       	cpc	r17, r1
    6812:	79 f7       	brne	.-34     	; 0x67f2 <vfprintf+0x478>
    6814:	f7 c0       	rjmp	.+494    	; 0x6a04 <vfprintf+0x68a>
    6816:	84 36       	cpi	r24, 0x64	; 100
    6818:	11 f0       	breq	.+4      	; 0x681e <vfprintf+0x4a4>
    681a:	89 36       	cpi	r24, 0x69	; 105
    681c:	61 f5       	brne	.+88     	; 0x6876 <vfprintf+0x4fc>
    681e:	56 01       	movw	r10, r12
    6820:	97 fe       	sbrs	r9, 7
    6822:	09 c0       	rjmp	.+18     	; 0x6836 <vfprintf+0x4bc>
    6824:	24 e0       	ldi	r18, 0x04	; 4
    6826:	a2 0e       	add	r10, r18
    6828:	b1 1c       	adc	r11, r1
    682a:	f6 01       	movw	r30, r12
    682c:	60 81       	ld	r22, Z
    682e:	71 81       	ldd	r23, Z+1	; 0x01
    6830:	82 81       	ldd	r24, Z+2	; 0x02
    6832:	93 81       	ldd	r25, Z+3	; 0x03
    6834:	0a c0       	rjmp	.+20     	; 0x684a <vfprintf+0x4d0>
    6836:	f2 e0       	ldi	r31, 0x02	; 2
    6838:	af 0e       	add	r10, r31
    683a:	b1 1c       	adc	r11, r1
    683c:	f6 01       	movw	r30, r12
    683e:	60 81       	ld	r22, Z
    6840:	71 81       	ldd	r23, Z+1	; 0x01
    6842:	07 2e       	mov	r0, r23
    6844:	00 0c       	add	r0, r0
    6846:	88 0b       	sbc	r24, r24
    6848:	99 0b       	sbc	r25, r25
    684a:	f9 2d       	mov	r31, r9
    684c:	ff 76       	andi	r31, 0x6F	; 111
    684e:	9f 2e       	mov	r9, r31
    6850:	97 ff       	sbrs	r25, 7
    6852:	09 c0       	rjmp	.+18     	; 0x6866 <vfprintf+0x4ec>
    6854:	90 95       	com	r25
    6856:	80 95       	com	r24
    6858:	70 95       	com	r23
    685a:	61 95       	neg	r22
    685c:	7f 4f       	sbci	r23, 0xFF	; 255
    685e:	8f 4f       	sbci	r24, 0xFF	; 255
    6860:	9f 4f       	sbci	r25, 0xFF	; 255
    6862:	f0 68       	ori	r31, 0x80	; 128
    6864:	9f 2e       	mov	r9, r31
    6866:	2a e0       	ldi	r18, 0x0A	; 10
    6868:	30 e0       	ldi	r19, 0x00	; 0
    686a:	a3 01       	movw	r20, r6
    686c:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <__ultoa_invert>
    6870:	c8 2e       	mov	r12, r24
    6872:	c6 18       	sub	r12, r6
    6874:	3f c0       	rjmp	.+126    	; 0x68f4 <vfprintf+0x57a>
    6876:	09 2d       	mov	r16, r9
    6878:	85 37       	cpi	r24, 0x75	; 117
    687a:	21 f4       	brne	.+8      	; 0x6884 <vfprintf+0x50a>
    687c:	0f 7e       	andi	r16, 0xEF	; 239
    687e:	2a e0       	ldi	r18, 0x0A	; 10
    6880:	30 e0       	ldi	r19, 0x00	; 0
    6882:	1d c0       	rjmp	.+58     	; 0x68be <vfprintf+0x544>
    6884:	09 7f       	andi	r16, 0xF9	; 249
    6886:	8f 36       	cpi	r24, 0x6F	; 111
    6888:	91 f0       	breq	.+36     	; 0x68ae <vfprintf+0x534>
    688a:	18 f4       	brcc	.+6      	; 0x6892 <vfprintf+0x518>
    688c:	88 35       	cpi	r24, 0x58	; 88
    688e:	59 f0       	breq	.+22     	; 0x68a6 <vfprintf+0x52c>
    6890:	c3 c0       	rjmp	.+390    	; 0x6a18 <vfprintf+0x69e>
    6892:	80 37       	cpi	r24, 0x70	; 112
    6894:	19 f0       	breq	.+6      	; 0x689c <vfprintf+0x522>
    6896:	88 37       	cpi	r24, 0x78	; 120
    6898:	11 f0       	breq	.+4      	; 0x689e <vfprintf+0x524>
    689a:	be c0       	rjmp	.+380    	; 0x6a18 <vfprintf+0x69e>
    689c:	00 61       	ori	r16, 0x10	; 16
    689e:	04 ff       	sbrs	r16, 4
    68a0:	09 c0       	rjmp	.+18     	; 0x68b4 <vfprintf+0x53a>
    68a2:	04 60       	ori	r16, 0x04	; 4
    68a4:	07 c0       	rjmp	.+14     	; 0x68b4 <vfprintf+0x53a>
    68a6:	94 fe       	sbrs	r9, 4
    68a8:	08 c0       	rjmp	.+16     	; 0x68ba <vfprintf+0x540>
    68aa:	06 60       	ori	r16, 0x06	; 6
    68ac:	06 c0       	rjmp	.+12     	; 0x68ba <vfprintf+0x540>
    68ae:	28 e0       	ldi	r18, 0x08	; 8
    68b0:	30 e0       	ldi	r19, 0x00	; 0
    68b2:	05 c0       	rjmp	.+10     	; 0x68be <vfprintf+0x544>
    68b4:	20 e1       	ldi	r18, 0x10	; 16
    68b6:	30 e0       	ldi	r19, 0x00	; 0
    68b8:	02 c0       	rjmp	.+4      	; 0x68be <vfprintf+0x544>
    68ba:	20 e1       	ldi	r18, 0x10	; 16
    68bc:	32 e0       	ldi	r19, 0x02	; 2
    68be:	56 01       	movw	r10, r12
    68c0:	07 ff       	sbrs	r16, 7
    68c2:	09 c0       	rjmp	.+18     	; 0x68d6 <vfprintf+0x55c>
    68c4:	84 e0       	ldi	r24, 0x04	; 4
    68c6:	a8 0e       	add	r10, r24
    68c8:	b1 1c       	adc	r11, r1
    68ca:	f6 01       	movw	r30, r12
    68cc:	60 81       	ld	r22, Z
    68ce:	71 81       	ldd	r23, Z+1	; 0x01
    68d0:	82 81       	ldd	r24, Z+2	; 0x02
    68d2:	93 81       	ldd	r25, Z+3	; 0x03
    68d4:	08 c0       	rjmp	.+16     	; 0x68e6 <vfprintf+0x56c>
    68d6:	f2 e0       	ldi	r31, 0x02	; 2
    68d8:	af 0e       	add	r10, r31
    68da:	b1 1c       	adc	r11, r1
    68dc:	f6 01       	movw	r30, r12
    68de:	60 81       	ld	r22, Z
    68e0:	71 81       	ldd	r23, Z+1	; 0x01
    68e2:	80 e0       	ldi	r24, 0x00	; 0
    68e4:	90 e0       	ldi	r25, 0x00	; 0
    68e6:	a3 01       	movw	r20, r6
    68e8:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <__ultoa_invert>
    68ec:	c8 2e       	mov	r12, r24
    68ee:	c6 18       	sub	r12, r6
    68f0:	0f 77       	andi	r16, 0x7F	; 127
    68f2:	90 2e       	mov	r9, r16
    68f4:	96 fe       	sbrs	r9, 6
    68f6:	0b c0       	rjmp	.+22     	; 0x690e <vfprintf+0x594>
    68f8:	09 2d       	mov	r16, r9
    68fa:	0e 7f       	andi	r16, 0xFE	; 254
    68fc:	c1 16       	cp	r12, r17
    68fe:	50 f4       	brcc	.+20     	; 0x6914 <vfprintf+0x59a>
    6900:	94 fe       	sbrs	r9, 4
    6902:	0a c0       	rjmp	.+20     	; 0x6918 <vfprintf+0x59e>
    6904:	92 fc       	sbrc	r9, 2
    6906:	08 c0       	rjmp	.+16     	; 0x6918 <vfprintf+0x59e>
    6908:	09 2d       	mov	r16, r9
    690a:	0e 7e       	andi	r16, 0xEE	; 238
    690c:	05 c0       	rjmp	.+10     	; 0x6918 <vfprintf+0x59e>
    690e:	dc 2c       	mov	r13, r12
    6910:	09 2d       	mov	r16, r9
    6912:	03 c0       	rjmp	.+6      	; 0x691a <vfprintf+0x5a0>
    6914:	dc 2c       	mov	r13, r12
    6916:	01 c0       	rjmp	.+2      	; 0x691a <vfprintf+0x5a0>
    6918:	d1 2e       	mov	r13, r17
    691a:	04 ff       	sbrs	r16, 4
    691c:	0d c0       	rjmp	.+26     	; 0x6938 <vfprintf+0x5be>
    691e:	fe 01       	movw	r30, r28
    6920:	ec 0d       	add	r30, r12
    6922:	f1 1d       	adc	r31, r1
    6924:	80 81       	ld	r24, Z
    6926:	80 33       	cpi	r24, 0x30	; 48
    6928:	11 f4       	brne	.+4      	; 0x692e <vfprintf+0x5b4>
    692a:	09 7e       	andi	r16, 0xE9	; 233
    692c:	09 c0       	rjmp	.+18     	; 0x6940 <vfprintf+0x5c6>
    692e:	02 ff       	sbrs	r16, 2
    6930:	06 c0       	rjmp	.+12     	; 0x693e <vfprintf+0x5c4>
    6932:	d3 94       	inc	r13
    6934:	d3 94       	inc	r13
    6936:	04 c0       	rjmp	.+8      	; 0x6940 <vfprintf+0x5c6>
    6938:	80 2f       	mov	r24, r16
    693a:	86 78       	andi	r24, 0x86	; 134
    693c:	09 f0       	breq	.+2      	; 0x6940 <vfprintf+0x5c6>
    693e:	d3 94       	inc	r13
    6940:	03 fd       	sbrc	r16, 3
    6942:	11 c0       	rjmp	.+34     	; 0x6966 <vfprintf+0x5ec>
    6944:	00 ff       	sbrs	r16, 0
    6946:	06 c0       	rjmp	.+12     	; 0x6954 <vfprintf+0x5da>
    6948:	1c 2d       	mov	r17, r12
    694a:	d5 14       	cp	r13, r5
    694c:	80 f4       	brcc	.+32     	; 0x696e <vfprintf+0x5f4>
    694e:	15 0d       	add	r17, r5
    6950:	1d 19       	sub	r17, r13
    6952:	0d c0       	rjmp	.+26     	; 0x696e <vfprintf+0x5f4>
    6954:	d5 14       	cp	r13, r5
    6956:	58 f4       	brcc	.+22     	; 0x696e <vfprintf+0x5f4>
    6958:	b7 01       	movw	r22, r14
    695a:	80 e2       	ldi	r24, 0x20	; 32
    695c:	90 e0       	ldi	r25, 0x00	; 0
    695e:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    6962:	d3 94       	inc	r13
    6964:	f7 cf       	rjmp	.-18     	; 0x6954 <vfprintf+0x5da>
    6966:	d5 14       	cp	r13, r5
    6968:	10 f4       	brcc	.+4      	; 0x696e <vfprintf+0x5f4>
    696a:	5d 18       	sub	r5, r13
    696c:	01 c0       	rjmp	.+2      	; 0x6970 <vfprintf+0x5f6>
    696e:	51 2c       	mov	r5, r1
    6970:	04 ff       	sbrs	r16, 4
    6972:	10 c0       	rjmp	.+32     	; 0x6994 <vfprintf+0x61a>
    6974:	b7 01       	movw	r22, r14
    6976:	80 e3       	ldi	r24, 0x30	; 48
    6978:	90 e0       	ldi	r25, 0x00	; 0
    697a:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    697e:	02 ff       	sbrs	r16, 2
    6980:	17 c0       	rjmp	.+46     	; 0x69b0 <vfprintf+0x636>
    6982:	01 fd       	sbrc	r16, 1
    6984:	03 c0       	rjmp	.+6      	; 0x698c <vfprintf+0x612>
    6986:	88 e7       	ldi	r24, 0x78	; 120
    6988:	90 e0       	ldi	r25, 0x00	; 0
    698a:	02 c0       	rjmp	.+4      	; 0x6990 <vfprintf+0x616>
    698c:	88 e5       	ldi	r24, 0x58	; 88
    698e:	90 e0       	ldi	r25, 0x00	; 0
    6990:	b7 01       	movw	r22, r14
    6992:	0c c0       	rjmp	.+24     	; 0x69ac <vfprintf+0x632>
    6994:	80 2f       	mov	r24, r16
    6996:	86 78       	andi	r24, 0x86	; 134
    6998:	59 f0       	breq	.+22     	; 0x69b0 <vfprintf+0x636>
    699a:	01 ff       	sbrs	r16, 1
    699c:	02 c0       	rjmp	.+4      	; 0x69a2 <vfprintf+0x628>
    699e:	8b e2       	ldi	r24, 0x2B	; 43
    69a0:	01 c0       	rjmp	.+2      	; 0x69a4 <vfprintf+0x62a>
    69a2:	80 e2       	ldi	r24, 0x20	; 32
    69a4:	07 fd       	sbrc	r16, 7
    69a6:	8d e2       	ldi	r24, 0x2D	; 45
    69a8:	b7 01       	movw	r22, r14
    69aa:	90 e0       	ldi	r25, 0x00	; 0
    69ac:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    69b0:	c1 16       	cp	r12, r17
    69b2:	38 f4       	brcc	.+14     	; 0x69c2 <vfprintf+0x648>
    69b4:	b7 01       	movw	r22, r14
    69b6:	80 e3       	ldi	r24, 0x30	; 48
    69b8:	90 e0       	ldi	r25, 0x00	; 0
    69ba:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    69be:	11 50       	subi	r17, 0x01	; 1
    69c0:	f7 cf       	rjmp	.-18     	; 0x69b0 <vfprintf+0x636>
    69c2:	ca 94       	dec	r12
    69c4:	f3 01       	movw	r30, r6
    69c6:	ec 0d       	add	r30, r12
    69c8:	f1 1d       	adc	r31, r1
    69ca:	80 81       	ld	r24, Z
    69cc:	b7 01       	movw	r22, r14
    69ce:	90 e0       	ldi	r25, 0x00	; 0
    69d0:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    69d4:	c1 10       	cpse	r12, r1
    69d6:	f5 cf       	rjmp	.-22     	; 0x69c2 <vfprintf+0x648>
    69d8:	15 c0       	rjmp	.+42     	; 0x6a04 <vfprintf+0x68a>
    69da:	f4 e0       	ldi	r31, 0x04	; 4
    69dc:	f5 15       	cp	r31, r5
    69de:	60 f5       	brcc	.+88     	; 0x6a38 <vfprintf+0x6be>
    69e0:	84 e0       	ldi	r24, 0x04	; 4
    69e2:	58 1a       	sub	r5, r24
    69e4:	93 fe       	sbrs	r9, 3
    69e6:	1f c0       	rjmp	.+62     	; 0x6a26 <vfprintf+0x6ac>
    69e8:	01 11       	cpse	r16, r1
    69ea:	27 c0       	rjmp	.+78     	; 0x6a3a <vfprintf+0x6c0>
    69ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    69ee:	23 ff       	sbrs	r18, 3
    69f0:	2a c0       	rjmp	.+84     	; 0x6a46 <vfprintf+0x6cc>
    69f2:	06 e6       	ldi	r16, 0x66	; 102
    69f4:	11 e0       	ldi	r17, 0x01	; 1
    69f6:	39 2d       	mov	r19, r9
    69f8:	30 71       	andi	r19, 0x10	; 16
    69fa:	93 2e       	mov	r9, r19
    69fc:	f8 01       	movw	r30, r16
    69fe:	84 91       	lpm	r24, Z
    6a00:	81 11       	cpse	r24, r1
    6a02:	24 c0       	rjmp	.+72     	; 0x6a4c <vfprintf+0x6d2>
    6a04:	55 20       	and	r5, r5
    6a06:	09 f4       	brne	.+2      	; 0x6a0a <vfprintf+0x690>
    6a08:	e4 cc       	rjmp	.-1592   	; 0x63d2 <vfprintf+0x58>
    6a0a:	b7 01       	movw	r22, r14
    6a0c:	80 e2       	ldi	r24, 0x20	; 32
    6a0e:	90 e0       	ldi	r25, 0x00	; 0
    6a10:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    6a14:	5a 94       	dec	r5
    6a16:	f6 cf       	rjmp	.-20     	; 0x6a04 <vfprintf+0x68a>
    6a18:	f7 01       	movw	r30, r14
    6a1a:	86 81       	ldd	r24, Z+6	; 0x06
    6a1c:	97 81       	ldd	r25, Z+7	; 0x07
    6a1e:	26 c0       	rjmp	.+76     	; 0x6a6c <vfprintf+0x6f2>
    6a20:	8f ef       	ldi	r24, 0xFF	; 255
    6a22:	9f ef       	ldi	r25, 0xFF	; 255
    6a24:	23 c0       	rjmp	.+70     	; 0x6a6c <vfprintf+0x6f2>
    6a26:	b7 01       	movw	r22, r14
    6a28:	80 e2       	ldi	r24, 0x20	; 32
    6a2a:	90 e0       	ldi	r25, 0x00	; 0
    6a2c:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    6a30:	5a 94       	dec	r5
    6a32:	51 10       	cpse	r5, r1
    6a34:	f8 cf       	rjmp	.-16     	; 0x6a26 <vfprintf+0x6ac>
    6a36:	d8 cf       	rjmp	.-80     	; 0x69e8 <vfprintf+0x66e>
    6a38:	51 2c       	mov	r5, r1
    6a3a:	b7 01       	movw	r22, r14
    6a3c:	80 2f       	mov	r24, r16
    6a3e:	90 e0       	ldi	r25, 0x00	; 0
    6a40:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    6a44:	d3 cf       	rjmp	.-90     	; 0x69ec <vfprintf+0x672>
    6a46:	0a e6       	ldi	r16, 0x6A	; 106
    6a48:	11 e0       	ldi	r17, 0x01	; 1
    6a4a:	d5 cf       	rjmp	.-86     	; 0x69f6 <vfprintf+0x67c>
    6a4c:	91 10       	cpse	r9, r1
    6a4e:	80 52       	subi	r24, 0x20	; 32
    6a50:	b7 01       	movw	r22, r14
    6a52:	90 e0       	ldi	r25, 0x00	; 0
    6a54:	0e 94 56 37 	call	0x6eac	; 0x6eac <fputc>
    6a58:	0f 5f       	subi	r16, 0xFF	; 255
    6a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    6a5c:	cf cf       	rjmp	.-98     	; 0x69fc <vfprintf+0x682>
    6a5e:	23 e0       	ldi	r18, 0x03	; 3
    6a60:	25 15       	cp	r18, r5
    6a62:	10 f4       	brcc	.+4      	; 0x6a68 <vfprintf+0x6ee>
    6a64:	83 e0       	ldi	r24, 0x03	; 3
    6a66:	bd cf       	rjmp	.-134    	; 0x69e2 <vfprintf+0x668>
    6a68:	51 2c       	mov	r5, r1
    6a6a:	c0 cf       	rjmp	.-128    	; 0x69ec <vfprintf+0x672>
    6a6c:	60 96       	adiw	r28, 0x10	; 16
    6a6e:	e2 e1       	ldi	r30, 0x12	; 18
    6a70:	0c 94 97 35 	jmp	0x6b2e	; 0x6b2e <__epilogue_restores__>

00006a74 <__divmodhi4>:
    6a74:	97 fb       	bst	r25, 7
    6a76:	07 2e       	mov	r0, r23
    6a78:	16 f4       	brtc	.+4      	; 0x6a7e <__divmodhi4+0xa>
    6a7a:	00 94       	com	r0
    6a7c:	07 d0       	rcall	.+14     	; 0x6a8c <__divmodhi4_neg1>
    6a7e:	77 fd       	sbrc	r23, 7
    6a80:	09 d0       	rcall	.+18     	; 0x6a94 <__divmodhi4_neg2>
    6a82:	0e 94 af 35 	call	0x6b5e	; 0x6b5e <__udivmodhi4>
    6a86:	07 fc       	sbrc	r0, 7
    6a88:	05 d0       	rcall	.+10     	; 0x6a94 <__divmodhi4_neg2>
    6a8a:	3e f4       	brtc	.+14     	; 0x6a9a <__divmodhi4_exit>

00006a8c <__divmodhi4_neg1>:
    6a8c:	90 95       	com	r25
    6a8e:	81 95       	neg	r24
    6a90:	9f 4f       	sbci	r25, 0xFF	; 255
    6a92:	08 95       	ret

00006a94 <__divmodhi4_neg2>:
    6a94:	70 95       	com	r23
    6a96:	61 95       	neg	r22
    6a98:	7f 4f       	sbci	r23, 0xFF	; 255

00006a9a <__divmodhi4_exit>:
    6a9a:	08 95       	ret

00006a9c <__divmodsi4>:
    6a9c:	05 2e       	mov	r0, r21
    6a9e:	97 fb       	bst	r25, 7
    6aa0:	1e f4       	brtc	.+6      	; 0x6aa8 <__divmodsi4+0xc>
    6aa2:	00 94       	com	r0
    6aa4:	0e 94 65 35 	call	0x6aca	; 0x6aca <__negsi2>
    6aa8:	57 fd       	sbrc	r21, 7
    6aaa:	07 d0       	rcall	.+14     	; 0x6aba <__divmodsi4_neg2>
    6aac:	0e 94 c3 35 	call	0x6b86	; 0x6b86 <__udivmodsi4>
    6ab0:	07 fc       	sbrc	r0, 7
    6ab2:	03 d0       	rcall	.+6      	; 0x6aba <__divmodsi4_neg2>
    6ab4:	4e f4       	brtc	.+18     	; 0x6ac8 <__divmodsi4_exit>
    6ab6:	0c 94 65 35 	jmp	0x6aca	; 0x6aca <__negsi2>

00006aba <__divmodsi4_neg2>:
    6aba:	50 95       	com	r21
    6abc:	40 95       	com	r20
    6abe:	30 95       	com	r19
    6ac0:	21 95       	neg	r18
    6ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    6ac4:	4f 4f       	sbci	r20, 0xFF	; 255
    6ac6:	5f 4f       	sbci	r21, 0xFF	; 255

00006ac8 <__divmodsi4_exit>:
    6ac8:	08 95       	ret

00006aca <__negsi2>:
    6aca:	90 95       	com	r25
    6acc:	80 95       	com	r24
    6ace:	70 95       	com	r23
    6ad0:	61 95       	neg	r22
    6ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    6ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    6ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ad8:	08 95       	ret

00006ada <__tablejump2__>:
    6ada:	ee 0f       	add	r30, r30
    6adc:	ff 1f       	adc	r31, r31
    6ade:	05 90       	lpm	r0, Z+
    6ae0:	f4 91       	lpm	r31, Z
    6ae2:	e0 2d       	mov	r30, r0
    6ae4:	09 94       	ijmp

00006ae6 <__muluhisi3>:
    6ae6:	0e 94 e5 35 	call	0x6bca	; 0x6bca <__umulhisi3>
    6aea:	a5 9f       	mul	r26, r21
    6aec:	90 0d       	add	r25, r0
    6aee:	b4 9f       	mul	r27, r20
    6af0:	90 0d       	add	r25, r0
    6af2:	a4 9f       	mul	r26, r20
    6af4:	80 0d       	add	r24, r0
    6af6:	91 1d       	adc	r25, r1
    6af8:	11 24       	eor	r1, r1
    6afa:	08 95       	ret

00006afc <__prologue_saves__>:
    6afc:	2f 92       	push	r2
    6afe:	3f 92       	push	r3
    6b00:	4f 92       	push	r4
    6b02:	5f 92       	push	r5
    6b04:	6f 92       	push	r6
    6b06:	7f 92       	push	r7
    6b08:	8f 92       	push	r8
    6b0a:	9f 92       	push	r9
    6b0c:	af 92       	push	r10
    6b0e:	bf 92       	push	r11
    6b10:	cf 92       	push	r12
    6b12:	df 92       	push	r13
    6b14:	ef 92       	push	r14
    6b16:	ff 92       	push	r15
    6b18:	0f 93       	push	r16
    6b1a:	1f 93       	push	r17
    6b1c:	cf 93       	push	r28
    6b1e:	df 93       	push	r29
    6b20:	cd b7       	in	r28, 0x3d	; 61
    6b22:	de b7       	in	r29, 0x3e	; 62
    6b24:	ca 1b       	sub	r28, r26
    6b26:	db 0b       	sbc	r29, r27
    6b28:	cd bf       	out	0x3d, r28	; 61
    6b2a:	de bf       	out	0x3e, r29	; 62
    6b2c:	09 94       	ijmp

00006b2e <__epilogue_restores__>:
    6b2e:	2a 88       	ldd	r2, Y+18	; 0x12
    6b30:	39 88       	ldd	r3, Y+17	; 0x11
    6b32:	48 88       	ldd	r4, Y+16	; 0x10
    6b34:	5f 84       	ldd	r5, Y+15	; 0x0f
    6b36:	6e 84       	ldd	r6, Y+14	; 0x0e
    6b38:	7d 84       	ldd	r7, Y+13	; 0x0d
    6b3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    6b3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    6b3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    6b40:	b9 84       	ldd	r11, Y+9	; 0x09
    6b42:	c8 84       	ldd	r12, Y+8	; 0x08
    6b44:	df 80       	ldd	r13, Y+7	; 0x07
    6b46:	ee 80       	ldd	r14, Y+6	; 0x06
    6b48:	fd 80       	ldd	r15, Y+5	; 0x05
    6b4a:	0c 81       	ldd	r16, Y+4	; 0x04
    6b4c:	1b 81       	ldd	r17, Y+3	; 0x03
    6b4e:	aa 81       	ldd	r26, Y+2	; 0x02
    6b50:	b9 81       	ldd	r27, Y+1	; 0x01
    6b52:	ce 0f       	add	r28, r30
    6b54:	d1 1d       	adc	r29, r1
    6b56:	cd bf       	out	0x3d, r28	; 61
    6b58:	de bf       	out	0x3e, r29	; 62
    6b5a:	ed 01       	movw	r28, r26
    6b5c:	08 95       	ret

00006b5e <__udivmodhi4>:
    6b5e:	aa 1b       	sub	r26, r26
    6b60:	bb 1b       	sub	r27, r27
    6b62:	51 e1       	ldi	r21, 0x11	; 17
    6b64:	07 c0       	rjmp	.+14     	; 0x6b74 <__udivmodhi4_ep>

00006b66 <__udivmodhi4_loop>:
    6b66:	aa 1f       	adc	r26, r26
    6b68:	bb 1f       	adc	r27, r27
    6b6a:	a6 17       	cp	r26, r22
    6b6c:	b7 07       	cpc	r27, r23
    6b6e:	10 f0       	brcs	.+4      	; 0x6b74 <__udivmodhi4_ep>
    6b70:	a6 1b       	sub	r26, r22
    6b72:	b7 0b       	sbc	r27, r23

00006b74 <__udivmodhi4_ep>:
    6b74:	88 1f       	adc	r24, r24
    6b76:	99 1f       	adc	r25, r25
    6b78:	5a 95       	dec	r21
    6b7a:	a9 f7       	brne	.-22     	; 0x6b66 <__udivmodhi4_loop>
    6b7c:	80 95       	com	r24
    6b7e:	90 95       	com	r25
    6b80:	bc 01       	movw	r22, r24
    6b82:	cd 01       	movw	r24, r26
    6b84:	08 95       	ret

00006b86 <__udivmodsi4>:
    6b86:	a1 e2       	ldi	r26, 0x21	; 33
    6b88:	1a 2e       	mov	r1, r26
    6b8a:	aa 1b       	sub	r26, r26
    6b8c:	bb 1b       	sub	r27, r27
    6b8e:	fd 01       	movw	r30, r26
    6b90:	0d c0       	rjmp	.+26     	; 0x6bac <__udivmodsi4_ep>

00006b92 <__udivmodsi4_loop>:
    6b92:	aa 1f       	adc	r26, r26
    6b94:	bb 1f       	adc	r27, r27
    6b96:	ee 1f       	adc	r30, r30
    6b98:	ff 1f       	adc	r31, r31
    6b9a:	a2 17       	cp	r26, r18
    6b9c:	b3 07       	cpc	r27, r19
    6b9e:	e4 07       	cpc	r30, r20
    6ba0:	f5 07       	cpc	r31, r21
    6ba2:	20 f0       	brcs	.+8      	; 0x6bac <__udivmodsi4_ep>
    6ba4:	a2 1b       	sub	r26, r18
    6ba6:	b3 0b       	sbc	r27, r19
    6ba8:	e4 0b       	sbc	r30, r20
    6baa:	f5 0b       	sbc	r31, r21

00006bac <__udivmodsi4_ep>:
    6bac:	66 1f       	adc	r22, r22
    6bae:	77 1f       	adc	r23, r23
    6bb0:	88 1f       	adc	r24, r24
    6bb2:	99 1f       	adc	r25, r25
    6bb4:	1a 94       	dec	r1
    6bb6:	69 f7       	brne	.-38     	; 0x6b92 <__udivmodsi4_loop>
    6bb8:	60 95       	com	r22
    6bba:	70 95       	com	r23
    6bbc:	80 95       	com	r24
    6bbe:	90 95       	com	r25
    6bc0:	9b 01       	movw	r18, r22
    6bc2:	ac 01       	movw	r20, r24
    6bc4:	bd 01       	movw	r22, r26
    6bc6:	cf 01       	movw	r24, r30
    6bc8:	08 95       	ret

00006bca <__umulhisi3>:
    6bca:	a2 9f       	mul	r26, r18
    6bcc:	b0 01       	movw	r22, r0
    6bce:	b3 9f       	mul	r27, r19
    6bd0:	c0 01       	movw	r24, r0
    6bd2:	a3 9f       	mul	r26, r19
    6bd4:	70 0d       	add	r23, r0
    6bd6:	81 1d       	adc	r24, r1
    6bd8:	11 24       	eor	r1, r1
    6bda:	91 1d       	adc	r25, r1
    6bdc:	b2 9f       	mul	r27, r18
    6bde:	70 0d       	add	r23, r0
    6be0:	81 1d       	adc	r24, r1
    6be2:	11 24       	eor	r1, r1
    6be4:	91 1d       	adc	r25, r1
    6be6:	08 95       	ret

00006be8 <atoi>:
    6be8:	fc 01       	movw	r30, r24
    6bea:	88 27       	eor	r24, r24
    6bec:	99 27       	eor	r25, r25
    6bee:	e8 94       	clt
    6bf0:	21 91       	ld	r18, Z+
    6bf2:	20 32       	cpi	r18, 0x20	; 32
    6bf4:	e9 f3       	breq	.-6      	; 0x6bf0 <atoi+0x8>
    6bf6:	29 30       	cpi	r18, 0x09	; 9
    6bf8:	10 f0       	brcs	.+4      	; 0x6bfe <atoi+0x16>
    6bfa:	2e 30       	cpi	r18, 0x0E	; 14
    6bfc:	c8 f3       	brcs	.-14     	; 0x6bf0 <atoi+0x8>
    6bfe:	2b 32       	cpi	r18, 0x2B	; 43
    6c00:	41 f0       	breq	.+16     	; 0x6c12 <atoi+0x2a>
    6c02:	2d 32       	cpi	r18, 0x2D	; 45
    6c04:	39 f4       	brne	.+14     	; 0x6c14 <atoi+0x2c>
    6c06:	68 94       	set
    6c08:	04 c0       	rjmp	.+8      	; 0x6c12 <atoi+0x2a>
    6c0a:	0e 94 4e 37 	call	0x6e9c	; 0x6e9c <__mulhi_const_10>
    6c0e:	82 0f       	add	r24, r18
    6c10:	91 1d       	adc	r25, r1
    6c12:	21 91       	ld	r18, Z+
    6c14:	20 53       	subi	r18, 0x30	; 48
    6c16:	2a 30       	cpi	r18, 0x0A	; 10
    6c18:	c0 f3       	brcs	.-16     	; 0x6c0a <atoi+0x22>
    6c1a:	1e f4       	brtc	.+6      	; 0x6c22 <atoi+0x3a>
    6c1c:	90 95       	com	r25
    6c1e:	81 95       	neg	r24
    6c20:	9f 4f       	sbci	r25, 0xFF	; 255
    6c22:	08 95       	ret

00006c24 <atol>:
    6c24:	1f 93       	push	r17
    6c26:	fc 01       	movw	r30, r24
    6c28:	99 27       	eor	r25, r25
    6c2a:	88 27       	eor	r24, r24
    6c2c:	bc 01       	movw	r22, r24
    6c2e:	e8 94       	clt
    6c30:	11 91       	ld	r17, Z+
    6c32:	10 32       	cpi	r17, 0x20	; 32
    6c34:	e9 f3       	breq	.-6      	; 0x6c30 <atol+0xc>
    6c36:	19 30       	cpi	r17, 0x09	; 9
    6c38:	10 f0       	brcs	.+4      	; 0x6c3e <atol+0x1a>
    6c3a:	1e 30       	cpi	r17, 0x0E	; 14
    6c3c:	c8 f3       	brcs	.-14     	; 0x6c30 <atol+0xc>
    6c3e:	1b 32       	cpi	r17, 0x2B	; 43
    6c40:	51 f0       	breq	.+20     	; 0x6c56 <atol+0x32>
    6c42:	1d 32       	cpi	r17, 0x2D	; 45
    6c44:	49 f4       	brne	.+18     	; 0x6c58 <atol+0x34>
    6c46:	68 94       	set
    6c48:	06 c0       	rjmp	.+12     	; 0x6c56 <atol+0x32>
    6c4a:	0e 94 39 37 	call	0x6e72	; 0x6e72 <__mulsi_const_10>
    6c4e:	61 0f       	add	r22, r17
    6c50:	71 1d       	adc	r23, r1
    6c52:	81 1d       	adc	r24, r1
    6c54:	91 1d       	adc	r25, r1
    6c56:	11 91       	ld	r17, Z+
    6c58:	10 53       	subi	r17, 0x30	; 48
    6c5a:	1a 30       	cpi	r17, 0x0A	; 10
    6c5c:	b0 f3       	brcs	.-20     	; 0x6c4a <atol+0x26>
    6c5e:	3e f4       	brtc	.+14     	; 0x6c6e <atol+0x4a>
    6c60:	90 95       	com	r25
    6c62:	80 95       	com	r24
    6c64:	70 95       	com	r23
    6c66:	61 95       	neg	r22
    6c68:	7f 4f       	sbci	r23, 0xFF	; 255
    6c6a:	8f 4f       	sbci	r24, 0xFF	; 255
    6c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    6c6e:	1f 91       	pop	r17
    6c70:	08 95       	ret

00006c72 <__ftoa_engine>:
    6c72:	28 30       	cpi	r18, 0x08	; 8
    6c74:	08 f0       	brcs	.+2      	; 0x6c78 <__ftoa_engine+0x6>
    6c76:	27 e0       	ldi	r18, 0x07	; 7
    6c78:	33 27       	eor	r19, r19
    6c7a:	da 01       	movw	r26, r20
    6c7c:	99 0f       	add	r25, r25
    6c7e:	31 1d       	adc	r19, r1
    6c80:	87 fd       	sbrc	r24, 7
    6c82:	91 60       	ori	r25, 0x01	; 1
    6c84:	00 96       	adiw	r24, 0x00	; 0
    6c86:	61 05       	cpc	r22, r1
    6c88:	71 05       	cpc	r23, r1
    6c8a:	39 f4       	brne	.+14     	; 0x6c9a <__ftoa_engine+0x28>
    6c8c:	32 60       	ori	r19, 0x02	; 2
    6c8e:	2e 5f       	subi	r18, 0xFE	; 254
    6c90:	3d 93       	st	X+, r19
    6c92:	30 e3       	ldi	r19, 0x30	; 48
    6c94:	2a 95       	dec	r18
    6c96:	e1 f7       	brne	.-8      	; 0x6c90 <__ftoa_engine+0x1e>
    6c98:	08 95       	ret
    6c9a:	9f 3f       	cpi	r25, 0xFF	; 255
    6c9c:	30 f0       	brcs	.+12     	; 0x6caa <__ftoa_engine+0x38>
    6c9e:	80 38       	cpi	r24, 0x80	; 128
    6ca0:	71 05       	cpc	r23, r1
    6ca2:	61 05       	cpc	r22, r1
    6ca4:	09 f0       	breq	.+2      	; 0x6ca8 <__ftoa_engine+0x36>
    6ca6:	3c 5f       	subi	r19, 0xFC	; 252
    6ca8:	3c 5f       	subi	r19, 0xFC	; 252
    6caa:	3d 93       	st	X+, r19
    6cac:	91 30       	cpi	r25, 0x01	; 1
    6cae:	08 f0       	brcs	.+2      	; 0x6cb2 <__ftoa_engine+0x40>
    6cb0:	80 68       	ori	r24, 0x80	; 128
    6cb2:	91 1d       	adc	r25, r1
    6cb4:	df 93       	push	r29
    6cb6:	cf 93       	push	r28
    6cb8:	1f 93       	push	r17
    6cba:	0f 93       	push	r16
    6cbc:	ff 92       	push	r15
    6cbe:	ef 92       	push	r14
    6cc0:	19 2f       	mov	r17, r25
    6cc2:	98 7f       	andi	r25, 0xF8	; 248
    6cc4:	96 95       	lsr	r25
    6cc6:	e9 2f       	mov	r30, r25
    6cc8:	96 95       	lsr	r25
    6cca:	96 95       	lsr	r25
    6ccc:	e9 0f       	add	r30, r25
    6cce:	ff 27       	eor	r31, r31
    6cd0:	e8 53       	subi	r30, 0x38	; 56
    6cd2:	fe 4f       	sbci	r31, 0xFE	; 254
    6cd4:	99 27       	eor	r25, r25
    6cd6:	33 27       	eor	r19, r19
    6cd8:	ee 24       	eor	r14, r14
    6cda:	ff 24       	eor	r15, r15
    6cdc:	a7 01       	movw	r20, r14
    6cde:	e7 01       	movw	r28, r14
    6ce0:	05 90       	lpm	r0, Z+
    6ce2:	08 94       	sec
    6ce4:	07 94       	ror	r0
    6ce6:	28 f4       	brcc	.+10     	; 0x6cf2 <__ftoa_engine+0x80>
    6ce8:	36 0f       	add	r19, r22
    6cea:	e7 1e       	adc	r14, r23
    6cec:	f8 1e       	adc	r15, r24
    6cee:	49 1f       	adc	r20, r25
    6cf0:	51 1d       	adc	r21, r1
    6cf2:	66 0f       	add	r22, r22
    6cf4:	77 1f       	adc	r23, r23
    6cf6:	88 1f       	adc	r24, r24
    6cf8:	99 1f       	adc	r25, r25
    6cfa:	06 94       	lsr	r0
    6cfc:	a1 f7       	brne	.-24     	; 0x6ce6 <__ftoa_engine+0x74>
    6cfe:	05 90       	lpm	r0, Z+
    6d00:	07 94       	ror	r0
    6d02:	28 f4       	brcc	.+10     	; 0x6d0e <__ftoa_engine+0x9c>
    6d04:	e7 0e       	add	r14, r23
    6d06:	f8 1e       	adc	r15, r24
    6d08:	49 1f       	adc	r20, r25
    6d0a:	56 1f       	adc	r21, r22
    6d0c:	c1 1d       	adc	r28, r1
    6d0e:	77 0f       	add	r23, r23
    6d10:	88 1f       	adc	r24, r24
    6d12:	99 1f       	adc	r25, r25
    6d14:	66 1f       	adc	r22, r22
    6d16:	06 94       	lsr	r0
    6d18:	a1 f7       	brne	.-24     	; 0x6d02 <__ftoa_engine+0x90>
    6d1a:	05 90       	lpm	r0, Z+
    6d1c:	07 94       	ror	r0
    6d1e:	28 f4       	brcc	.+10     	; 0x6d2a <__ftoa_engine+0xb8>
    6d20:	f8 0e       	add	r15, r24
    6d22:	49 1f       	adc	r20, r25
    6d24:	56 1f       	adc	r21, r22
    6d26:	c7 1f       	adc	r28, r23
    6d28:	d1 1d       	adc	r29, r1
    6d2a:	88 0f       	add	r24, r24
    6d2c:	99 1f       	adc	r25, r25
    6d2e:	66 1f       	adc	r22, r22
    6d30:	77 1f       	adc	r23, r23
    6d32:	06 94       	lsr	r0
    6d34:	a1 f7       	brne	.-24     	; 0x6d1e <__ftoa_engine+0xac>
    6d36:	05 90       	lpm	r0, Z+
    6d38:	07 94       	ror	r0
    6d3a:	20 f4       	brcc	.+8      	; 0x6d44 <__ftoa_engine+0xd2>
    6d3c:	49 0f       	add	r20, r25
    6d3e:	56 1f       	adc	r21, r22
    6d40:	c7 1f       	adc	r28, r23
    6d42:	d8 1f       	adc	r29, r24
    6d44:	99 0f       	add	r25, r25
    6d46:	66 1f       	adc	r22, r22
    6d48:	77 1f       	adc	r23, r23
    6d4a:	88 1f       	adc	r24, r24
    6d4c:	06 94       	lsr	r0
    6d4e:	a9 f7       	brne	.-22     	; 0x6d3a <__ftoa_engine+0xc8>
    6d50:	84 91       	lpm	r24, Z
    6d52:	10 95       	com	r17
    6d54:	17 70       	andi	r17, 0x07	; 7
    6d56:	41 f0       	breq	.+16     	; 0x6d68 <__ftoa_engine+0xf6>
    6d58:	d6 95       	lsr	r29
    6d5a:	c7 95       	ror	r28
    6d5c:	57 95       	ror	r21
    6d5e:	47 95       	ror	r20
    6d60:	f7 94       	ror	r15
    6d62:	e7 94       	ror	r14
    6d64:	1a 95       	dec	r17
    6d66:	c1 f7       	brne	.-16     	; 0x6d58 <__ftoa_engine+0xe6>
    6d68:	ee e6       	ldi	r30, 0x6E	; 110
    6d6a:	f1 e0       	ldi	r31, 0x01	; 1
    6d6c:	68 94       	set
    6d6e:	15 90       	lpm	r1, Z+
    6d70:	15 91       	lpm	r17, Z+
    6d72:	35 91       	lpm	r19, Z+
    6d74:	65 91       	lpm	r22, Z+
    6d76:	95 91       	lpm	r25, Z+
    6d78:	05 90       	lpm	r0, Z+
    6d7a:	7f e2       	ldi	r23, 0x2F	; 47
    6d7c:	73 95       	inc	r23
    6d7e:	e1 18       	sub	r14, r1
    6d80:	f1 0a       	sbc	r15, r17
    6d82:	43 0b       	sbc	r20, r19
    6d84:	56 0b       	sbc	r21, r22
    6d86:	c9 0b       	sbc	r28, r25
    6d88:	d0 09       	sbc	r29, r0
    6d8a:	c0 f7       	brcc	.-16     	; 0x6d7c <__ftoa_engine+0x10a>
    6d8c:	e1 0c       	add	r14, r1
    6d8e:	f1 1e       	adc	r15, r17
    6d90:	43 1f       	adc	r20, r19
    6d92:	56 1f       	adc	r21, r22
    6d94:	c9 1f       	adc	r28, r25
    6d96:	d0 1d       	adc	r29, r0
    6d98:	7e f4       	brtc	.+30     	; 0x6db8 <__ftoa_engine+0x146>
    6d9a:	70 33       	cpi	r23, 0x30	; 48
    6d9c:	11 f4       	brne	.+4      	; 0x6da2 <__ftoa_engine+0x130>
    6d9e:	8a 95       	dec	r24
    6da0:	e6 cf       	rjmp	.-52     	; 0x6d6e <__ftoa_engine+0xfc>
    6da2:	e8 94       	clt
    6da4:	01 50       	subi	r16, 0x01	; 1
    6da6:	30 f0       	brcs	.+12     	; 0x6db4 <__ftoa_engine+0x142>
    6da8:	08 0f       	add	r16, r24
    6daa:	0a f4       	brpl	.+2      	; 0x6dae <__ftoa_engine+0x13c>
    6dac:	00 27       	eor	r16, r16
    6dae:	02 17       	cp	r16, r18
    6db0:	08 f4       	brcc	.+2      	; 0x6db4 <__ftoa_engine+0x142>
    6db2:	20 2f       	mov	r18, r16
    6db4:	23 95       	inc	r18
    6db6:	02 2f       	mov	r16, r18
    6db8:	7a 33       	cpi	r23, 0x3A	; 58
    6dba:	28 f0       	brcs	.+10     	; 0x6dc6 <__ftoa_engine+0x154>
    6dbc:	79 e3       	ldi	r23, 0x39	; 57
    6dbe:	7d 93       	st	X+, r23
    6dc0:	2a 95       	dec	r18
    6dc2:	e9 f7       	brne	.-6      	; 0x6dbe <__ftoa_engine+0x14c>
    6dc4:	10 c0       	rjmp	.+32     	; 0x6de6 <__ftoa_engine+0x174>
    6dc6:	7d 93       	st	X+, r23
    6dc8:	2a 95       	dec	r18
    6dca:	89 f6       	brne	.-94     	; 0x6d6e <__ftoa_engine+0xfc>
    6dcc:	06 94       	lsr	r0
    6dce:	97 95       	ror	r25
    6dd0:	67 95       	ror	r22
    6dd2:	37 95       	ror	r19
    6dd4:	17 95       	ror	r17
    6dd6:	17 94       	ror	r1
    6dd8:	e1 18       	sub	r14, r1
    6dda:	f1 0a       	sbc	r15, r17
    6ddc:	43 0b       	sbc	r20, r19
    6dde:	56 0b       	sbc	r21, r22
    6de0:	c9 0b       	sbc	r28, r25
    6de2:	d0 09       	sbc	r29, r0
    6de4:	98 f0       	brcs	.+38     	; 0x6e0c <__ftoa_engine+0x19a>
    6de6:	23 95       	inc	r18
    6de8:	7e 91       	ld	r23, -X
    6dea:	73 95       	inc	r23
    6dec:	7a 33       	cpi	r23, 0x3A	; 58
    6dee:	08 f0       	brcs	.+2      	; 0x6df2 <__ftoa_engine+0x180>
    6df0:	70 e3       	ldi	r23, 0x30	; 48
    6df2:	7c 93       	st	X, r23
    6df4:	20 13       	cpse	r18, r16
    6df6:	b8 f7       	brcc	.-18     	; 0x6de6 <__ftoa_engine+0x174>
    6df8:	7e 91       	ld	r23, -X
    6dfa:	70 61       	ori	r23, 0x10	; 16
    6dfc:	7d 93       	st	X+, r23
    6dfe:	30 f0       	brcs	.+12     	; 0x6e0c <__ftoa_engine+0x19a>
    6e00:	83 95       	inc	r24
    6e02:	71 e3       	ldi	r23, 0x31	; 49
    6e04:	7d 93       	st	X+, r23
    6e06:	70 e3       	ldi	r23, 0x30	; 48
    6e08:	2a 95       	dec	r18
    6e0a:	e1 f7       	brne	.-8      	; 0x6e04 <__ftoa_engine+0x192>
    6e0c:	11 24       	eor	r1, r1
    6e0e:	ef 90       	pop	r14
    6e10:	ff 90       	pop	r15
    6e12:	0f 91       	pop	r16
    6e14:	1f 91       	pop	r17
    6e16:	cf 91       	pop	r28
    6e18:	df 91       	pop	r29
    6e1a:	99 27       	eor	r25, r25
    6e1c:	87 fd       	sbrc	r24, 7
    6e1e:	90 95       	com	r25
    6e20:	08 95       	ret

00006e22 <strnlen_P>:
    6e22:	fc 01       	movw	r30, r24
    6e24:	05 90       	lpm	r0, Z+
    6e26:	61 50       	subi	r22, 0x01	; 1
    6e28:	70 40       	sbci	r23, 0x00	; 0
    6e2a:	01 10       	cpse	r0, r1
    6e2c:	d8 f7       	brcc	.-10     	; 0x6e24 <strnlen_P+0x2>
    6e2e:	80 95       	com	r24
    6e30:	90 95       	com	r25
    6e32:	8e 0f       	add	r24, r30
    6e34:	9f 1f       	adc	r25, r31
    6e36:	08 95       	ret

00006e38 <strcat>:
    6e38:	fb 01       	movw	r30, r22
    6e3a:	dc 01       	movw	r26, r24
    6e3c:	0d 90       	ld	r0, X+
    6e3e:	00 20       	and	r0, r0
    6e40:	e9 f7       	brne	.-6      	; 0x6e3c <strcat+0x4>
    6e42:	11 97       	sbiw	r26, 0x01	; 1
    6e44:	01 90       	ld	r0, Z+
    6e46:	0d 92       	st	X+, r0
    6e48:	00 20       	and	r0, r0
    6e4a:	e1 f7       	brne	.-8      	; 0x6e44 <strcat+0xc>
    6e4c:	08 95       	ret

00006e4e <strcpy>:
    6e4e:	fb 01       	movw	r30, r22
    6e50:	dc 01       	movw	r26, r24
    6e52:	01 90       	ld	r0, Z+
    6e54:	0d 92       	st	X+, r0
    6e56:	00 20       	and	r0, r0
    6e58:	e1 f7       	brne	.-8      	; 0x6e52 <strcpy+0x4>
    6e5a:	08 95       	ret

00006e5c <strnlen>:
    6e5c:	fc 01       	movw	r30, r24
    6e5e:	61 50       	subi	r22, 0x01	; 1
    6e60:	70 40       	sbci	r23, 0x00	; 0
    6e62:	01 90       	ld	r0, Z+
    6e64:	01 10       	cpse	r0, r1
    6e66:	d8 f7       	brcc	.-10     	; 0x6e5e <strnlen+0x2>
    6e68:	80 95       	com	r24
    6e6a:	90 95       	com	r25
    6e6c:	8e 0f       	add	r24, r30
    6e6e:	9f 1f       	adc	r25, r31
    6e70:	08 95       	ret

00006e72 <__mulsi_const_10>:
    6e72:	59 2f       	mov	r21, r25
    6e74:	48 2f       	mov	r20, r24
    6e76:	37 2f       	mov	r19, r23
    6e78:	26 2f       	mov	r18, r22
    6e7a:	66 0f       	add	r22, r22
    6e7c:	77 1f       	adc	r23, r23
    6e7e:	88 1f       	adc	r24, r24
    6e80:	99 1f       	adc	r25, r25
    6e82:	66 0f       	add	r22, r22
    6e84:	77 1f       	adc	r23, r23
    6e86:	88 1f       	adc	r24, r24
    6e88:	99 1f       	adc	r25, r25
    6e8a:	62 0f       	add	r22, r18
    6e8c:	73 1f       	adc	r23, r19
    6e8e:	84 1f       	adc	r24, r20
    6e90:	95 1f       	adc	r25, r21
    6e92:	66 0f       	add	r22, r22
    6e94:	77 1f       	adc	r23, r23
    6e96:	88 1f       	adc	r24, r24
    6e98:	99 1f       	adc	r25, r25
    6e9a:	08 95       	ret

00006e9c <__mulhi_const_10>:
    6e9c:	7a e0       	ldi	r23, 0x0A	; 10
    6e9e:	97 9f       	mul	r25, r23
    6ea0:	90 2d       	mov	r25, r0
    6ea2:	87 9f       	mul	r24, r23
    6ea4:	80 2d       	mov	r24, r0
    6ea6:	91 0d       	add	r25, r1
    6ea8:	11 24       	eor	r1, r1
    6eaa:	08 95       	ret

00006eac <fputc>:
    6eac:	0f 93       	push	r16
    6eae:	1f 93       	push	r17
    6eb0:	cf 93       	push	r28
    6eb2:	df 93       	push	r29
    6eb4:	fb 01       	movw	r30, r22
    6eb6:	23 81       	ldd	r18, Z+3	; 0x03
    6eb8:	21 fd       	sbrc	r18, 1
    6eba:	03 c0       	rjmp	.+6      	; 0x6ec2 <fputc+0x16>
    6ebc:	8f ef       	ldi	r24, 0xFF	; 255
    6ebe:	9f ef       	ldi	r25, 0xFF	; 255
    6ec0:	2c c0       	rjmp	.+88     	; 0x6f1a <fputc+0x6e>
    6ec2:	22 ff       	sbrs	r18, 2
    6ec4:	16 c0       	rjmp	.+44     	; 0x6ef2 <fputc+0x46>
    6ec6:	46 81       	ldd	r20, Z+6	; 0x06
    6ec8:	57 81       	ldd	r21, Z+7	; 0x07
    6eca:	24 81       	ldd	r18, Z+4	; 0x04
    6ecc:	35 81       	ldd	r19, Z+5	; 0x05
    6ece:	42 17       	cp	r20, r18
    6ed0:	53 07       	cpc	r21, r19
    6ed2:	44 f4       	brge	.+16     	; 0x6ee4 <fputc+0x38>
    6ed4:	a0 81       	ld	r26, Z
    6ed6:	b1 81       	ldd	r27, Z+1	; 0x01
    6ed8:	9d 01       	movw	r18, r26
    6eda:	2f 5f       	subi	r18, 0xFF	; 255
    6edc:	3f 4f       	sbci	r19, 0xFF	; 255
    6ede:	20 83       	st	Z, r18
    6ee0:	31 83       	std	Z+1, r19	; 0x01
    6ee2:	8c 93       	st	X, r24
    6ee4:	26 81       	ldd	r18, Z+6	; 0x06
    6ee6:	37 81       	ldd	r19, Z+7	; 0x07
    6ee8:	2f 5f       	subi	r18, 0xFF	; 255
    6eea:	3f 4f       	sbci	r19, 0xFF	; 255
    6eec:	26 83       	std	Z+6, r18	; 0x06
    6eee:	37 83       	std	Z+7, r19	; 0x07
    6ef0:	14 c0       	rjmp	.+40     	; 0x6f1a <fputc+0x6e>
    6ef2:	8b 01       	movw	r16, r22
    6ef4:	ec 01       	movw	r28, r24
    6ef6:	fb 01       	movw	r30, r22
    6ef8:	00 84       	ldd	r0, Z+8	; 0x08
    6efa:	f1 85       	ldd	r31, Z+9	; 0x09
    6efc:	e0 2d       	mov	r30, r0
    6efe:	09 95       	icall
    6f00:	89 2b       	or	r24, r25
    6f02:	e1 f6       	brne	.-72     	; 0x6ebc <fputc+0x10>
    6f04:	d8 01       	movw	r26, r16
    6f06:	16 96       	adiw	r26, 0x06	; 6
    6f08:	8d 91       	ld	r24, X+
    6f0a:	9c 91       	ld	r25, X
    6f0c:	17 97       	sbiw	r26, 0x07	; 7
    6f0e:	01 96       	adiw	r24, 0x01	; 1
    6f10:	16 96       	adiw	r26, 0x06	; 6
    6f12:	8d 93       	st	X+, r24
    6f14:	9c 93       	st	X, r25
    6f16:	17 97       	sbiw	r26, 0x07	; 7
    6f18:	ce 01       	movw	r24, r28
    6f1a:	df 91       	pop	r29
    6f1c:	cf 91       	pop	r28
    6f1e:	1f 91       	pop	r17
    6f20:	0f 91       	pop	r16
    6f22:	08 95       	ret

00006f24 <sprintf>:
    6f24:	ae e0       	ldi	r26, 0x0E	; 14
    6f26:	b0 e0       	ldi	r27, 0x00	; 0
    6f28:	e8 e9       	ldi	r30, 0x98	; 152
    6f2a:	f7 e3       	ldi	r31, 0x37	; 55
    6f2c:	0c 94 8c 35 	jmp	0x6b18	; 0x6b18 <__prologue_saves__+0x1c>
    6f30:	0d 89       	ldd	r16, Y+21	; 0x15
    6f32:	1e 89       	ldd	r17, Y+22	; 0x16
    6f34:	86 e0       	ldi	r24, 0x06	; 6
    6f36:	8c 83       	std	Y+4, r24	; 0x04
    6f38:	09 83       	std	Y+1, r16	; 0x01
    6f3a:	1a 83       	std	Y+2, r17	; 0x02
    6f3c:	8f ef       	ldi	r24, 0xFF	; 255
    6f3e:	9f e7       	ldi	r25, 0x7F	; 127
    6f40:	8d 83       	std	Y+5, r24	; 0x05
    6f42:	9e 83       	std	Y+6, r25	; 0x06
    6f44:	ae 01       	movw	r20, r28
    6f46:	47 5e       	subi	r20, 0xE7	; 231
    6f48:	5f 4f       	sbci	r21, 0xFF	; 255
    6f4a:	6f 89       	ldd	r22, Y+23	; 0x17
    6f4c:	78 8d       	ldd	r23, Y+24	; 0x18
    6f4e:	ce 01       	movw	r24, r28
    6f50:	01 96       	adiw	r24, 0x01	; 1
    6f52:	0e 94 bd 31 	call	0x637a	; 0x637a <vfprintf>
    6f56:	ef 81       	ldd	r30, Y+7	; 0x07
    6f58:	f8 85       	ldd	r31, Y+8	; 0x08
    6f5a:	e0 0f       	add	r30, r16
    6f5c:	f1 1f       	adc	r31, r17
    6f5e:	10 82       	st	Z, r1
    6f60:	2e 96       	adiw	r28, 0x0e	; 14
    6f62:	e4 e0       	ldi	r30, 0x04	; 4
    6f64:	0c 94 a5 35 	jmp	0x6b4a	; 0x6b4a <__epilogue_restores__+0x1c>

00006f68 <__ultoa_invert>:
    6f68:	fa 01       	movw	r30, r20
    6f6a:	aa 27       	eor	r26, r26
    6f6c:	28 30       	cpi	r18, 0x08	; 8
    6f6e:	51 f1       	breq	.+84     	; 0x6fc4 <__ultoa_invert+0x5c>
    6f70:	20 31       	cpi	r18, 0x10	; 16
    6f72:	81 f1       	breq	.+96     	; 0x6fd4 <__ultoa_invert+0x6c>
    6f74:	e8 94       	clt
    6f76:	6f 93       	push	r22
    6f78:	6e 7f       	andi	r22, 0xFE	; 254
    6f7a:	6e 5f       	subi	r22, 0xFE	; 254
    6f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    6f7e:	8f 4f       	sbci	r24, 0xFF	; 255
    6f80:	9f 4f       	sbci	r25, 0xFF	; 255
    6f82:	af 4f       	sbci	r26, 0xFF	; 255
    6f84:	b1 e0       	ldi	r27, 0x01	; 1
    6f86:	3e d0       	rcall	.+124    	; 0x7004 <__ultoa_invert+0x9c>
    6f88:	b4 e0       	ldi	r27, 0x04	; 4
    6f8a:	3c d0       	rcall	.+120    	; 0x7004 <__ultoa_invert+0x9c>
    6f8c:	67 0f       	add	r22, r23
    6f8e:	78 1f       	adc	r23, r24
    6f90:	89 1f       	adc	r24, r25
    6f92:	9a 1f       	adc	r25, r26
    6f94:	a1 1d       	adc	r26, r1
    6f96:	68 0f       	add	r22, r24
    6f98:	79 1f       	adc	r23, r25
    6f9a:	8a 1f       	adc	r24, r26
    6f9c:	91 1d       	adc	r25, r1
    6f9e:	a1 1d       	adc	r26, r1
    6fa0:	6a 0f       	add	r22, r26
    6fa2:	71 1d       	adc	r23, r1
    6fa4:	81 1d       	adc	r24, r1
    6fa6:	91 1d       	adc	r25, r1
    6fa8:	a1 1d       	adc	r26, r1
    6faa:	20 d0       	rcall	.+64     	; 0x6fec <__ultoa_invert+0x84>
    6fac:	09 f4       	brne	.+2      	; 0x6fb0 <__ultoa_invert+0x48>
    6fae:	68 94       	set
    6fb0:	3f 91       	pop	r19
    6fb2:	2a e0       	ldi	r18, 0x0A	; 10
    6fb4:	26 9f       	mul	r18, r22
    6fb6:	11 24       	eor	r1, r1
    6fb8:	30 19       	sub	r19, r0
    6fba:	30 5d       	subi	r19, 0xD0	; 208
    6fbc:	31 93       	st	Z+, r19
    6fbe:	de f6       	brtc	.-74     	; 0x6f76 <__ultoa_invert+0xe>
    6fc0:	cf 01       	movw	r24, r30
    6fc2:	08 95       	ret
    6fc4:	46 2f       	mov	r20, r22
    6fc6:	47 70       	andi	r20, 0x07	; 7
    6fc8:	40 5d       	subi	r20, 0xD0	; 208
    6fca:	41 93       	st	Z+, r20
    6fcc:	b3 e0       	ldi	r27, 0x03	; 3
    6fce:	0f d0       	rcall	.+30     	; 0x6fee <__ultoa_invert+0x86>
    6fd0:	c9 f7       	brne	.-14     	; 0x6fc4 <__ultoa_invert+0x5c>
    6fd2:	f6 cf       	rjmp	.-20     	; 0x6fc0 <__ultoa_invert+0x58>
    6fd4:	46 2f       	mov	r20, r22
    6fd6:	4f 70       	andi	r20, 0x0F	; 15
    6fd8:	40 5d       	subi	r20, 0xD0	; 208
    6fda:	4a 33       	cpi	r20, 0x3A	; 58
    6fdc:	18 f0       	brcs	.+6      	; 0x6fe4 <__ultoa_invert+0x7c>
    6fde:	49 5d       	subi	r20, 0xD9	; 217
    6fe0:	31 fd       	sbrc	r19, 1
    6fe2:	40 52       	subi	r20, 0x20	; 32
    6fe4:	41 93       	st	Z+, r20
    6fe6:	02 d0       	rcall	.+4      	; 0x6fec <__ultoa_invert+0x84>
    6fe8:	a9 f7       	brne	.-22     	; 0x6fd4 <__ultoa_invert+0x6c>
    6fea:	ea cf       	rjmp	.-44     	; 0x6fc0 <__ultoa_invert+0x58>
    6fec:	b4 e0       	ldi	r27, 0x04	; 4
    6fee:	a6 95       	lsr	r26
    6ff0:	97 95       	ror	r25
    6ff2:	87 95       	ror	r24
    6ff4:	77 95       	ror	r23
    6ff6:	67 95       	ror	r22
    6ff8:	ba 95       	dec	r27
    6ffa:	c9 f7       	brne	.-14     	; 0x6fee <__ultoa_invert+0x86>
    6ffc:	00 97       	sbiw	r24, 0x00	; 0
    6ffe:	61 05       	cpc	r22, r1
    7000:	71 05       	cpc	r23, r1
    7002:	08 95       	ret
    7004:	9b 01       	movw	r18, r22
    7006:	ac 01       	movw	r20, r24
    7008:	0a 2e       	mov	r0, r26
    700a:	06 94       	lsr	r0
    700c:	57 95       	ror	r21
    700e:	47 95       	ror	r20
    7010:	37 95       	ror	r19
    7012:	27 95       	ror	r18
    7014:	ba 95       	dec	r27
    7016:	c9 f7       	brne	.-14     	; 0x700a <__ultoa_invert+0xa2>
    7018:	62 0f       	add	r22, r18
    701a:	73 1f       	adc	r23, r19
    701c:	84 1f       	adc	r24, r20
    701e:	95 1f       	adc	r25, r21
    7020:	a0 1d       	adc	r26, r0
    7022:	08 95       	ret

00007024 <eeprom_read_block>:
    7024:	60 50       	subi	r22, 0x00	; 0
    7026:	7c 4e       	sbci	r23, 0xEC	; 236
    7028:	0c 94 4d 38 	jmp	0x709a	; 0x709a <memcpy>

0000702c <eeprom_update_block>:
    702c:	dc 01       	movw	r26, r24
    702e:	a4 0f       	add	r26, r20
    7030:	b5 1f       	adc	r27, r21
    7032:	41 50       	subi	r20, 0x01	; 1
    7034:	50 40       	sbci	r21, 0x00	; 0
    7036:	48 f0       	brcs	.+18     	; 0x704a <eeprom_update_block+0x1e>
    7038:	cb 01       	movw	r24, r22
    703a:	84 0f       	add	r24, r20
    703c:	95 1f       	adc	r25, r21
    703e:	2e 91       	ld	r18, -X
    7040:	0e 94 27 38 	call	0x704e	; 0x704e <eeprom_update_r18>
    7044:	41 50       	subi	r20, 0x01	; 1
    7046:	50 40       	sbci	r21, 0x00	; 0
    7048:	d0 f7       	brcc	.-12     	; 0x703e <eeprom_update_block+0x12>
    704a:	08 95       	ret

0000704c <eeprom_update_byte>:
    704c:	26 2f       	mov	r18, r22

0000704e <eeprom_update_r18>:
    704e:	0e 94 49 38 	call	0x7092	; 0x7092 <eeprom_mapen>
    7052:	00 80       	ld	r0, Z
    7054:	02 16       	cp	r0, r18
    7056:	19 f0       	breq	.+6      	; 0x705e <eeprom_update_r18+0x10>
    7058:	0e 94 32 38 	call	0x7064	; 0x7064 <eeprom_write_r18>
    705c:	01 97       	sbiw	r24, 0x01	; 1
    705e:	01 97       	sbiw	r24, 0x01	; 1
    7060:	08 95       	ret

00007062 <eeprom_write_byte>:
    7062:	26 2f       	mov	r18, r22

00007064 <eeprom_write_r18>:
    7064:	af 93       	push	r26
    7066:	bf 93       	push	r27
    7068:	e0 e0       	ldi	r30, 0x00	; 0
    706a:	f0 e1       	ldi	r31, 0x10	; 16
    706c:	32 81       	ldd	r19, Z+2	; 0x02
    706e:	31 fd       	sbrc	r19, 1
    7070:	fd cf       	rjmp	.-6      	; 0x706c <eeprom_write_r18+0x8>
    7072:	dc 01       	movw	r26, r24
    7074:	a0 50       	subi	r26, 0x00	; 0
    7076:	bc 4e       	sbci	r27, 0xEC	; 236
    7078:	2c 93       	st	X, r18
    707a:	2d e9       	ldi	r18, 0x9D	; 157
    707c:	24 bf       	out	0x34, r18	; 52
    707e:	23 e0       	ldi	r18, 0x03	; 3
    7080:	20 83       	st	Z, r18
    7082:	01 96       	adiw	r24, 0x01	; 1
    7084:	bf 91       	pop	r27
    7086:	af 91       	pop	r26
    7088:	08 95       	ret

0000708a <eeprom_read_byte>:
    708a:	03 d0       	rcall	.+6      	; 0x7092 <eeprom_mapen>
    708c:	80 81       	ld	r24, Z
    708e:	99 27       	eor	r25, r25
    7090:	08 95       	ret

00007092 <eeprom_mapen>:
    7092:	fc 01       	movw	r30, r24
    7094:	e0 50       	subi	r30, 0x00	; 0
    7096:	fc 4e       	sbci	r31, 0xEC	; 236
    7098:	08 95       	ret

0000709a <memcpy>:
    709a:	fb 01       	movw	r30, r22
    709c:	dc 01       	movw	r26, r24
    709e:	02 c0       	rjmp	.+4      	; 0x70a4 <memcpy+0xa>
    70a0:	01 90       	ld	r0, Z+
    70a2:	0d 92       	st	X+, r0
    70a4:	41 50       	subi	r20, 0x01	; 1
    70a6:	50 40       	sbci	r21, 0x00	; 0
    70a8:	d8 f7       	brcc	.-10     	; 0x70a0 <memcpy+0x6>
    70aa:	08 95       	ret

000070ac <_exit>:
    70ac:	f8 94       	cli

000070ae <__stop_program>:
    70ae:	ff cf       	rjmp	.-2      	; 0x70ae <__stop_program>
