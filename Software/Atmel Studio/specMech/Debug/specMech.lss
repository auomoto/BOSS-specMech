
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00007f1b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000723a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c4d  0000b23a  0000723a  000072ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000a55  00802800  00802800  00007f1b  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00007f1b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007f78  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000006c0  00000000  00000000  00007fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ccc2  00000000  00000000  00008678  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004817  00000000  00000000  0001533a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005466  00000000  00000000  00019b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000014f4  00000000  00000000  0001efb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000281a  00000000  00000000  000204ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000060c3  00000000  00000000  00022cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000450  00000000  00000000  00028d89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 01 	jmp	0x268	; 0x268 <__ctors_end>
       4:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
       8:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
       c:	0c 94 71 2c 	jmp	0x58e2	; 0x58e2 <__vector_3>
      10:	0c 94 93 2c 	jmp	0x5926	; 0x5926 <__vector_4>
      14:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      18:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      1c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      20:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      24:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      28:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      2c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      30:	0c 94 d1 2c 	jmp	0x59a2	; 0x59a2 <__vector_12>
      34:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      38:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      3c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      40:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      44:	0c 94 26 2f 	jmp	0x5e4c	; 0x5e4c <__vector_17>
      48:	0c 94 74 2f 	jmp	0x5ee8	; 0x5ee8 <__vector_18>
      4c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      50:	0c 94 df 10 	jmp	0x21be	; 0x21be <__vector_20>
      54:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      58:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      5c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      60:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      64:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      68:	0c 94 ce 2e 	jmp	0x5d9c	; 0x5d9c <__vector_26>
      6c:	0c 94 ee 2e 	jmp	0x5ddc	; 0x5ddc <__vector_27>
      70:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      74:	0c 94 1e 30 	jmp	0x603c	; 0x603c <__vector_29>
      78:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      7c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      80:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      84:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      88:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      8c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      90:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      94:	0c 94 b0 2f 	jmp	0x5f60	; 0x5f60 <__vector_37>
      98:	0c 94 dc 2f 	jmp	0x5fb8	; 0x5fb8 <__vector_38>
      9c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      a0:	fc 04       	cpc	r15, r12
      a2:	27 05       	cpc	r18, r7
      a4:	27 05       	cpc	r18, r7
      a6:	27 05       	cpc	r18, r7
      a8:	27 05       	cpc	r18, r7
      aa:	27 05       	cpc	r18, r7
      ac:	27 05       	cpc	r18, r7
      ae:	27 05       	cpc	r18, r7
      b0:	27 05       	cpc	r18, r7
      b2:	ff 04       	cpc	r15, r15
      b4:	27 05       	cpc	r18, r7
      b6:	27 05       	cpc	r18, r7
      b8:	27 05       	cpc	r18, r7
      ba:	27 05       	cpc	r18, r7
      bc:	27 05       	cpc	r18, r7
      be:	27 05       	cpc	r18, r7
      c0:	27 05       	cpc	r18, r7
      c2:	24 05       	cpc	r18, r4
      c4:	27 05       	cpc	r18, r7
      c6:	27 05       	cpc	r18, r7
      c8:	27 05       	cpc	r18, r7
      ca:	27 05       	cpc	r18, r7
      cc:	27 05       	cpc	r18, r7
      ce:	27 05       	cpc	r18, r7
      d0:	27 05       	cpc	r18, r7
      d2:	27 05       	cpc	r18, r7
      d4:	e7 04       	cpc	r14, r7
      d6:	27 05       	cpc	r18, r7
      d8:	27 05       	cpc	r18, r7
      da:	27 05       	cpc	r18, r7
      dc:	27 05       	cpc	r18, r7
      de:	27 05       	cpc	r18, r7
      e0:	27 05       	cpc	r18, r7
      e2:	27 05       	cpc	r18, r7
      e4:	27 05       	cpc	r18, r7
      e6:	27 05       	cpc	r18, r7
      e8:	ed 04       	cpc	r14, r13
      ea:	27 05       	cpc	r18, r7
      ec:	ea 04       	cpc	r14, r10
      ee:	27 05       	cpc	r18, r7
      f0:	27 05       	cpc	r18, r7
      f2:	f0 04       	cpc	r15, r0
      f4:	f3 04       	cpc	r15, r3
      f6:	f6 04       	cpc	r15, r6
      f8:	f9 04       	cpc	r15, r9
      fa:	ec 11       	cpse	r30, r12
      fc:	ec 11       	cpse	r30, r12
      fe:	ec 11       	cpse	r30, r12
     100:	34 19       	sub	r19, r4
     102:	34 19       	sub	r19, r4
     104:	34 19       	sub	r19, r4
     106:	34 19       	sub	r19, r4
     108:	34 19       	sub	r19, r4
     10a:	34 19       	sub	r19, r4
     10c:	34 19       	sub	r19, r4
     10e:	34 19       	sub	r19, r4
     110:	34 19       	sub	r19, r4
     112:	34 19       	sub	r19, r4
     114:	34 19       	sub	r19, r4
     116:	34 19       	sub	r19, r4
     118:	34 19       	sub	r19, r4
     11a:	34 19       	sub	r19, r4
     11c:	34 19       	sub	r19, r4
     11e:	34 19       	sub	r19, r4
     120:	34 19       	sub	r19, r4
     122:	34 19       	sub	r19, r4
     124:	f6 18       	sub	r15, r6
     126:	34 19       	sub	r19, r4
     128:	34 19       	sub	r19, r4
     12a:	34 19       	sub	r19, r4
     12c:	34 19       	sub	r19, r4
     12e:	34 19       	sub	r19, r4
     130:	34 19       	sub	r19, r4
     132:	34 19       	sub	r19, r4
     134:	34 19       	sub	r19, r4
     136:	34 19       	sub	r19, r4
     138:	34 19       	sub	r19, r4
     13a:	e2 13       	cpse	r30, r18
     13c:	e2 13       	cpse	r30, r18
     13e:	e2 13       	cpse	r30, r18
     140:	97 15       	cp	r25, r7
     142:	9e 15       	cp	r25, r14
     144:	34 19       	sub	r19, r4
     146:	34 19       	sub	r19, r4
     148:	34 19       	sub	r19, r4
     14a:	34 19       	sub	r19, r4
     14c:	34 19       	sub	r19, r4
     14e:	34 19       	sub	r19, r4
     150:	34 19       	sub	r19, r4
     152:	34 19       	sub	r19, r4
     154:	e7 16       	cp	r14, r23
     156:	f6 16       	cp	r15, r22
     158:	cc 17       	cp	r28, r28
     15a:	34 19       	sub	r19, r4
     15c:	34 19       	sub	r19, r4
     15e:	34 19       	sub	r19, r4
     160:	55 18       	sub	r5, r5
     162:	34 19       	sub	r19, r4
     164:	9d 18       	sub	r9, r13

00000166 <__trampolines_end>:
     166:	6e 61       	ori	r22, 0x1E	; 30
     168:	6e 00       	.word	0x006e	; ????

0000016a <__c.2332>:
     16a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     17a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     18a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     19a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1aa:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ba:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1ca:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1da:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1ea:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1fa:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     20a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     21a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     22a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     23a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     24a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     25a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000268 <__ctors_end>:
     268:	11 24       	eor	r1, r1
     26a:	1f be       	out	0x3f, r1	; 63
     26c:	cf ef       	ldi	r28, 0xFF	; 255
     26e:	cd bf       	out	0x3d, r28	; 61
     270:	df e3       	ldi	r29, 0x3F	; 63
     272:	de bf       	out	0x3e, r29	; 62

00000274 <__do_clear_bss>:
     274:	22 e3       	ldi	r18, 0x32	; 50
     276:	a0 e0       	ldi	r26, 0x00	; 0
     278:	b8 e2       	ldi	r27, 0x28	; 40
     27a:	01 c0       	rjmp	.+2      	; 0x27e <.do_clear_bss_start>

0000027c <.do_clear_bss_loop>:
     27c:	1d 92       	st	X+, r1

0000027e <.do_clear_bss_start>:
     27e:	a5 35       	cpi	r26, 0x55	; 85
     280:	b2 07       	cpc	r27, r18
     282:	e1 f7       	brne	.-8      	; 0x27c <.do_clear_bss_loop>
     284:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <main>
     288:	0c 94 1b 39 	jmp	0x7236	; 0x7236 <_exit>

0000028c <__bad_interrupt>:
     28c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000290 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
uint8_t read_AD590(uint8_t sensor, float *temperature)
{
     290:	8f 92       	push	r8
     292:	9f 92       	push	r9
     294:	af 92       	push	r10
     296:	bf 92       	push	r11
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <read_AD590+0x16>
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <read_AD590+0x18>
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	7b 01       	movw	r14, r22

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     2ae:	81 30       	cpi	r24, 0x01	; 1
     2b0:	99 f0       	breq	.+38     	; 0x2d8 <read_AD590+0x48>
     2b2:	18 f0       	brcs	.+6      	; 0x2ba <read_AD590+0x2a>
     2b4:	82 30       	cpi	r24, 0x02	; 2
     2b6:	31 f0       	breq	.+12     	; 0x2c4 <read_AD590+0x34>
     2b8:	0a c0       	rjmp	.+20     	; 0x2ce <read_AD590+0x3e>
		case 0:
			pins = 0x04;	// t0 - Blue Camera
			offset = 0.0;
     2ba:	81 2c       	mov	r8, r1
     2bc:	91 2c       	mov	r9, r1
     2be:	54 01       	movw	r10, r8
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x04;	// t0 - Blue Camera
     2c0:	14 e0       	ldi	r17, 0x04	; 4
     2c2:	14 c0       	rjmp	.+40     	; 0x2ec <read_AD590+0x5c>
			offset = 4.2;	// Using old board, to be replaced
			break;

		case 2:
			pins = 0x40;	// t2 - Collimator
			offset = 0.0;
     2c4:	81 2c       	mov	r8, r1
     2c6:	91 2c       	mov	r9, r1
     2c8:	54 01       	movw	r10, r8
			pins = 0x10;	// t1 - Red Camera
			offset = 4.2;	// Using old board, to be replaced
			break;

		case 2:
			pins = 0x40;	// t2 - Collimator
     2ca:	10 e4       	ldi	r17, 0x40	; 64
			offset = 0.0;
			break;
     2cc:	0f c0       	rjmp	.+30     	; 0x2ec <read_AD590+0x5c>
{

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
     2ce:	81 2c       	mov	r8, r1
     2d0:	91 2c       	mov	r9, r1
     2d2:	54 01       	movw	r10, r8
			pins = 0x40;	// t2 - Collimator
			offset = 0.0;
			break;

		default:
			pins = 0x00;
     2d4:	10 e0       	ldi	r17, 0x00	; 0
			break;
     2d6:	0a c0       	rjmp	.+20     	; 0x2ec <read_AD590+0x5c>
			offset = 0.0;
			break;

		case 1:
			pins = 0x10;	// t1 - Red Camera
			offset = 4.2;	// Using old board, to be replaced
     2d8:	0f 2e       	mov	r0, r31
     2da:	f6 e6       	ldi	r31, 0x66	; 102
     2dc:	8f 2e       	mov	r8, r31
     2de:	98 2c       	mov	r9, r8
     2e0:	f6 e8       	ldi	r31, 0x86	; 134
     2e2:	af 2e       	mov	r10, r31
     2e4:	f0 e4       	ldi	r31, 0x40	; 64
     2e6:	bf 2e       	mov	r11, r31
     2e8:	f0 2d       	mov	r31, r0
			pins = 0x04;	// t0 - Blue Camera
			offset = 0.0;
			break;

		case 1:
			pins = 0x10;	// t1 - Red Camera
     2ea:	10 e1       	ldi	r17, 0x10	; 16
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2ec:	41 2f       	mov	r20, r17
     2ee:	40 95       	com	r20
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	87 e2       	ldi	r24, 0x27	; 39
     2f4:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pin
     2f8:	41 2f       	mov	r20, r17
     2fa:	6a e0       	ldi	r22, 0x0A	; 10
     2fc:	87 e2       	ldi	r24, 0x27	; 39
     2fe:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     302:	8f e4       	ldi	r24, 0x4F	; 79
     304:	93 ec       	ldi	r25, 0xC3	; 195
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <read_AD590+0x76>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <read_AD590+0x7c>
     30c:	00 00       	nop
	_delay_ms(20);								// Found by trial and error

	// Use 0.512 volts range and 128 samples per second
	if (read_ADS1115(ADC_TE, PGA0512, AIN3, DR128, &voltage) == ERROR) {
     30e:	8e 01       	movw	r16, r28
     310:	0f 5f       	subi	r16, 0xFF	; 255
     312:	1f 4f       	sbci	r17, 0xFF	; 255
     314:	20 e8       	ldi	r18, 0x80	; 128
     316:	40 e7       	ldi	r20, 0x70	; 112
     318:	68 e0       	ldi	r22, 0x08	; 8
     31a:	88 e4       	ldi	r24, 0x48	; 72
     31c:	0e 94 cb 01 	call	0x396	; 0x396 <read_ADS1115>
     320:	83 36       	cpi	r24, 0x63	; 99
     322:	51 f4       	brne	.+20     	; 0x338 <read_AD590+0xa8>
		*temperature = BADFLOAT;
     324:	40 e0       	ldi	r20, 0x00	; 0
     326:	50 e8       	ldi	r21, 0x80	; 128
     328:	66 e2       	ldi	r22, 0x26	; 38
     32a:	74 ec       	ldi	r23, 0xC4	; 196
     32c:	f7 01       	movw	r30, r14
     32e:	40 83       	st	Z, r20
     330:	51 83       	std	Z+1, r21	; 0x01
     332:	62 83       	std	Z+2, r22	; 0x02
     334:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
     336:	21 c0       	rjmp	.+66     	; 0x37a <read_AD590+0xea>
	}

	// Turn off all AD590 sensors
	write_MCP23008(AD590DRIVER, OLAT, 0x00);	// Set all pins low
     338:	40 e0       	ldi	r20, 0x00	; 0
     33a:	6a e0       	ldi	r22, 0x0A	; 10
     33c:	87 e2       	ldi	r24, 0x27	; 39
     33e:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
	*temperature = (AD590RESISTOR * voltage) - 273.15 + offset;
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	4a e7       	ldi	r20, 0x7A	; 122
     348:	54 e4       	ldi	r21, 0x44	; 68
     34a:	69 81       	ldd	r22, Y+1	; 0x01
     34c:	7a 81       	ldd	r23, Y+2	; 0x02
     34e:	8b 81       	ldd	r24, Y+3	; 0x03
     350:	9c 81       	ldd	r25, Y+4	; 0x04
     352:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
     356:	23 e3       	ldi	r18, 0x33	; 51
     358:	33 e9       	ldi	r19, 0x93	; 147
     35a:	48 e8       	ldi	r20, 0x88	; 136
     35c:	53 e4       	ldi	r21, 0x43	; 67
     35e:	0e 94 49 30 	call	0x6092	; 0x6092 <__subsf3>
     362:	9b 01       	movw	r18, r22
     364:	ac 01       	movw	r20, r24
     366:	c5 01       	movw	r24, r10
     368:	b4 01       	movw	r22, r8
     36a:	0e 94 4a 30 	call	0x6094	; 0x6094 <__addsf3>
     36e:	f7 01       	movw	r30, r14
     370:	60 83       	st	Z, r22
     372:	71 83       	std	Z+1, r23	; 0x01
     374:	82 83       	std	Z+2, r24	; 0x02
     376:	93 83       	std	Z+3, r25	; 0x03

	return(NOERROR);
     378:	80 e0       	ldi	r24, 0x00	; 0

}
     37a:	24 96       	adiw	r28, 0x04	; 4
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	de bf       	out	0x3e, r29	; 62
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	bf 90       	pop	r11
     38e:	af 90       	pop	r10
     390:	9f 90       	pop	r9
     392:	8f 90       	pop	r8
     394:	08 95       	ret

00000396 <read_ADS1115>:
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
uint8_t read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins,
	uint8_t datarate, float *voltage)
{
     396:	8f 92       	push	r8
     398:	9f 92       	push	r9
     39a:	af 92       	push	r10
     39c:	bf 92       	push	r11
     39e:	cf 92       	push	r12
     3a0:	df 92       	push	r13
     3a2:	ef 92       	push	r14
     3a4:	ff 92       	push	r15
     3a6:	0f 93       	push	r16
     3a8:	1f 93       	push	r17
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	f8 2e       	mov	r15, r24
     3b0:	e6 2e       	mov	r14, r22
     3b2:	68 01       	movw	r12, r16
	float scale;
	uint8_t confighi, configlo, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     3b4:	46 2b       	or	r20, r22
     3b6:	c4 2f       	mov	r28, r20
     3b8:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     3ba:	d2 2f       	mov	r29, r18
     3bc:	d3 60       	ori	r29, 0x03	; 3

	*voltage = BADFLOAT;
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e8       	ldi	r25, 0x80	; 128
     3c2:	a6 e2       	ldi	r26, 0x26	; 38
     3c4:	b4 ec       	ldi	r27, 0xC4	; 196
     3c6:	f8 01       	movw	r30, r16
     3c8:	80 83       	st	Z, r24
     3ca:	91 83       	std	Z+1, r25	; 0x01
     3cc:	a2 83       	std	Z+2, r26	; 0x02
     3ce:	b3 83       	std	Z+3, r27	; 0x03
	if (start_TWI(addr, TWIWRITE == ERROR)) {		// TWI start condition
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	8f 2d       	mov	r24, r15
     3d4:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
     3d8:	08 2f       	mov	r16, r24
     3da:	88 23       	and	r24, r24
     3dc:	21 f0       	breq	.+8      	; 0x3e6 <read_ADS1115+0x50>
		stop_TWI();
     3de:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(ERROR);
     3e2:	13 e6       	ldi	r17, 0x63	; 99
     3e4:	b5 c0       	rjmp	.+362    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
	}
	if ((write_TWI(ADS1115CONFIG) == ERROR)) {		// Write the CONFIG register
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
     3ec:	18 2f       	mov	r17, r24
     3ee:	83 36       	cpi	r24, 0x63	; 99
     3f0:	19 f4       	brne	.+6      	; 0x3f8 <read_ADS1115+0x62>
		stop_TWI();
     3f2:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(ERROR);
     3f6:	ac c0       	rjmp	.+344    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
	}
	if ((write_TWI(confighi) == ERROR)) {			// Write high byte
     3f8:	8c 2f       	mov	r24, r28
     3fa:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
     3fe:	18 2f       	mov	r17, r24
     400:	83 36       	cpi	r24, 0x63	; 99
     402:	19 f4       	brne	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		stop_TWI();
     404:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(ERROR);
     408:	a3 c0       	rjmp	.+326    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
	}
	if ((write_TWI(configlo) == ERROR)) {			// Write low byte
     40a:	8d 2f       	mov	r24, r29
     40c:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
     410:	18 2f       	mov	r17, r24
     412:	83 36       	cpi	r24, 0x63	; 99
     414:	19 f4       	brne	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		stop_TWI();
     416:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(ERROR);
     41a:	9a c0       	rjmp	.+308    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
	}
	stop_TWI();
     41c:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     420:	f3 e5       	ldi	r31, 0x53	; 83
     422:	fa 95       	dec	r31
     424:	f1 f7       	brne	.-4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     426:	00 00       	nop

	_delay_us(25);									// Power-up time

	converting = YES;
     428:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     42a:	09 c0       	rjmp	.+18     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		start_TWI(addr, TWIREAD);
     42c:	61 e0       	ldi	r22, 0x01	; 1
     42e:	8f 2d       	mov	r24, r15
     430:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
		flag = readlast_TWI();
     434:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <readlast_TWI>
		if (flag & 0b10000000) {
     438:	88 23       	and	r24, r24
     43a:	0c f4       	brge	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
			converting = NO;
     43c:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     43e:	c1 11       	cpse	r28, r1
     440:	f5 cf       	rjmp	.-22     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		flag = readlast_TWI();
		if (flag & 0b10000000) {
			converting = NO;
		}
	}
	stop_TWI();
     442:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>

	start_TWI(addr, TWIWRITE);
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	8f 2d       	mov	r24, r15
     44a:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     454:	61 e0       	ldi	r22, 0x01	; 1
     456:	8f 2d       	mov	r24, r15
     458:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
	highbyte = read_TWI();
     45c:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <read_TWI>
     460:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     462:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <readlast_TWI>
     466:	d8 2f       	mov	r29, r24
	stop_TWI();
     468:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>

	value = highbyte;
     46c:	6c 2f       	mov	r22, r28
     46e:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     470:	76 2f       	mov	r23, r22
     472:	66 27       	eor	r22, r22
	value |= lowbyte;
     474:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     476:	84 e0       	ldi	r24, 0x04	; 4
     478:	e8 16       	cp	r14, r24
     47a:	49 f1       	breq	.+82     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     47c:	8e 15       	cp	r24, r14
     47e:	30 f0       	brcs	.+12     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     480:	ee 20       	and	r14, r14
     482:	d9 f1       	breq	.+118    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     484:	e2 e0       	ldi	r30, 0x02	; 2
     486:	ee 16       	cp	r14, r30
     488:	69 f1       	breq	.+90     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     48a:	42 c0       	rjmp	.+132    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     48c:	f8 e0       	ldi	r31, 0x08	; 8
     48e:	ef 16       	cp	r14, r31
     490:	09 f4       	brne	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     492:	42 c0       	rjmp	.+132    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     494:	8a e0       	ldi	r24, 0x0A	; 10
     496:	e8 16       	cp	r14, r24
     498:	21 f0       	breq	.+8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     49a:	e6 e0       	ldi	r30, 0x06	; 6
     49c:	ee 12       	cpse	r14, r30
     49e:	38 c0       	rjmp	.+112    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     4a0:	0b c0       	rjmp	.+22     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
		case PGA0256:
			scale = SCA0256;
     4a2:	0f 2e       	mov	r0, r31
     4a4:	f4 e7       	ldi	r31, 0x74	; 116
     4a6:	8f 2e       	mov	r8, r31
     4a8:	f3 e1       	ldi	r31, 0x13	; 19
     4aa:	9f 2e       	mov	r9, r31
     4ac:	f3 e0       	ldi	r31, 0x03	; 3
     4ae:	af 2e       	mov	r10, r31
     4b0:	f7 e3       	ldi	r31, 0x37	; 55
     4b2:	bf 2e       	mov	r11, r31
     4b4:	f0 2d       	mov	r31, r0
     4b6:	3a c0       	rjmp	.+116    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     4b8:	0f 2e       	mov	r0, r31
     4ba:	f4 e7       	ldi	r31, 0x74	; 116
     4bc:	8f 2e       	mov	r8, r31
     4be:	f3 e1       	ldi	r31, 0x13	; 19
     4c0:	9f 2e       	mov	r9, r31
     4c2:	f3 e0       	ldi	r31, 0x03	; 3
     4c4:	af 2e       	mov	r10, r31
     4c6:	f8 e3       	ldi	r31, 0x38	; 56
     4c8:	bf 2e       	mov	r11, r31
     4ca:	f0 2d       	mov	r31, r0
			break;
     4cc:	2f c0       	rjmp	.+94     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		case PGA2048:
			scale = SCA2048;
     4ce:	0f 2e       	mov	r0, r31
     4d0:	f2 e1       	ldi	r31, 0x12	; 18
     4d2:	8f 2e       	mov	r8, r31
     4d4:	f3 e1       	ldi	r31, 0x13	; 19
     4d6:	9f 2e       	mov	r9, r31
     4d8:	f3 e8       	ldi	r31, 0x83	; 131
     4da:	af 2e       	mov	r10, r31
     4dc:	f8 e3       	ldi	r31, 0x38	; 56
     4de:	bf 2e       	mov	r11, r31
     4e0:	f0 2d       	mov	r31, r0
			break;
     4e2:	24 c0       	rjmp	.+72     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		case PGA4096:
			scale = SCA4096;
     4e4:	0f 2e       	mov	r0, r31
     4e6:	f4 e7       	ldi	r31, 0x74	; 116
     4e8:	8f 2e       	mov	r8, r31
     4ea:	f3 e1       	ldi	r31, 0x13	; 19
     4ec:	9f 2e       	mov	r9, r31
     4ee:	f3 e0       	ldi	r31, 0x03	; 3
     4f0:	af 2e       	mov	r10, r31
     4f2:	f9 e3       	ldi	r31, 0x39	; 57
     4f4:	bf 2e       	mov	r11, r31
     4f6:	f0 2d       	mov	r31, r0
			break;
     4f8:	19 c0       	rjmp	.+50     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		case PGA6144:
			scale = SCA6144;
     4fa:	0f 2e       	mov	r0, r31
     4fc:	fe e2       	ldi	r31, 0x2E	; 46
     4fe:	8f 2e       	mov	r8, r31
     500:	fd e9       	ldi	r31, 0x9D	; 157
     502:	9f 2e       	mov	r9, r31
     504:	f4 e4       	ldi	r31, 0x44	; 68
     506:	af 2e       	mov	r10, r31
     508:	f9 e3       	ldi	r31, 0x39	; 57
     50a:	bf 2e       	mov	r11, r31
     50c:	f0 2d       	mov	r31, r0
			break;
     50e:	0e c0       	rjmp	.+28     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		default:
			scale = 0.0;
     510:	81 2c       	mov	r8, r1
     512:	91 2c       	mov	r9, r1
     514:	54 01       	movw	r10, r8
			break;
     516:	0a c0       	rjmp	.+20     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     518:	0f 2e       	mov	r0, r31
     51a:	f1 e7       	ldi	r31, 0x71	; 113
     51c:	8f 2e       	mov	r8, r31
     51e:	f3 e1       	ldi	r31, 0x13	; 19
     520:	9f 2e       	mov	r9, r31
     522:	f3 e8       	ldi	r31, 0x83	; 131
     524:	af 2e       	mov	r10, r31
     526:	f7 e3       	ldi	r31, 0x37	; 55
     528:	bf 2e       	mov	r11, r31
     52a:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	*voltage = scale * (float) value;
     52c:	07 2e       	mov	r0, r23
     52e:	00 0c       	add	r0, r0
     530:	88 0b       	sbc	r24, r24
     532:	99 0b       	sbc	r25, r25
     534:	0e 94 65 31 	call	0x62ca	; 0x62ca <__floatsisf>
     538:	9b 01       	movw	r18, r22
     53a:	ac 01       	movw	r20, r24
     53c:	c5 01       	movw	r24, r10
     53e:	b4 01       	movw	r22, r8
     540:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
     544:	f6 01       	movw	r30, r12
     546:	60 83       	st	Z, r22
     548:	71 83       	std	Z+1, r23	; 0x01
     54a:	82 83       	std	Z+2, r24	; 0x02
     54c:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     54e:	10 2f       	mov	r17, r16

}
     550:	81 2f       	mov	r24, r17
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	bf 90       	pop	r11
     564:	af 90       	pop	r10
     566:	9f 90       	pop	r9
     568:	8f 90       	pop	r8
     56a:	08 95       	ret

0000056c <beeper>:
#include "globals.h"
#include "beeper.h"

void beeper(char *message)
{
     56c:	fc 01       	movw	r30, r24

	uint8_t i, len;

	len = strlen(message);
     56e:	dc 01       	movw	r26, r24
     570:	0d 90       	ld	r0, X+
     572:	00 20       	and	r0, r0
     574:	e9 f7       	brne	.-6      	; 0x570 <beeper+0x4>
     576:	11 97       	sbiw	r26, 0x01	; 1
     578:	a8 1b       	sub	r26, r24
	for (i = 0; i < len; i++) {
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	3c c0       	rjmp	.+120    	; 0x5f6 <beeper+0x8a>
		switch (*message++) {
     57e:	9f 01       	movw	r18, r30
     580:	2f 5f       	subi	r18, 0xFF	; 255
     582:	3f 4f       	sbci	r19, 0xFF	; 255
     584:	80 81       	ld	r24, Z
     586:	8d 32       	cpi	r24, 0x2D	; 45
     588:	91 f0       	breq	.+36     	; 0x5ae <beeper+0x42>
     58a:	8e 32       	cpi	r24, 0x2E	; 46
     58c:	19 f0       	breq	.+6      	; 0x594 <beeper+0x28>
     58e:	80 32       	cpi	r24, 0x20	; 32
     590:	21 f5       	brne	.+72     	; 0x5da <beeper+0x6e>
     592:	1a c0       	rjmp	.+52     	; 0x5c8 <beeper+0x5c>

			case '.':
				on_BEEPER;
     594:	84 e0       	ldi	r24, 0x04	; 4
     596:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x7f4425>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     59a:	4f ee       	ldi	r20, 0xEF	; 239
     59c:	59 e4       	ldi	r21, 0x49	; 73
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	41 50       	subi	r20, 0x01	; 1
     5a2:	50 40       	sbci	r21, 0x00	; 0
     5a4:	80 40       	sbci	r24, 0x00	; 0
     5a6:	e1 f7       	brne	.-8      	; 0x5a0 <beeper+0x34>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <beeper+0x3e>
     5aa:	00 00       	nop
     5ac:	16 c0       	rjmp	.+44     	; 0x5da <beeper+0x6e>
//				PORTB.OUTSET = PIN2_bm;
				_delay_ms(75);
				break;

			case '-':
				on_BEEPER;
     5ae:	84 e0       	ldi	r24, 0x04	; 4
     5b0:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x7f4425>
     5b4:	4f ec       	ldi	r20, 0xCF	; 207
     5b6:	5d ed       	ldi	r21, 0xDD	; 221
     5b8:	86 e0       	ldi	r24, 0x06	; 6
     5ba:	41 50       	subi	r20, 0x01	; 1
     5bc:	50 40       	sbci	r21, 0x00	; 0
     5be:	80 40       	sbci	r24, 0x00	; 0
     5c0:	e1 f7       	brne	.-8      	; 0x5ba <beeper+0x4e>
     5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <beeper+0x58>
     5c4:	00 00       	nop
     5c6:	09 c0       	rjmp	.+18     	; 0x5da <beeper+0x6e>
     5c8:	4f ec       	ldi	r20, 0xCF	; 207
     5ca:	5d ed       	ldi	r21, 0xDD	; 221
     5cc:	86 e0       	ldi	r24, 0x06	; 6
     5ce:	41 50       	subi	r20, 0x01	; 1
     5d0:	50 40       	sbci	r21, 0x00	; 0
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <beeper+0x62>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <beeper+0x6c>
     5d8:	00 00       	nop

			default:
				break;
		}

		off_BEEPER;
     5da:	84 e0       	ldi	r24, 0x04	; 4
     5dc:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x7f4426>
     5e0:	4f ee       	ldi	r20, 0xEF	; 239
     5e2:	59 e4       	ldi	r21, 0x49	; 73
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	41 50       	subi	r20, 0x01	; 1
     5e8:	50 40       	sbci	r21, 0x00	; 0
     5ea:	80 40       	sbci	r24, 0x00	; 0
     5ec:	e1 f7       	brne	.-8      	; 0x5e6 <beeper+0x7a>
     5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <beeper+0x84>
     5f0:	00 00       	nop
{

	uint8_t i, len;

	len = strlen(message);
	for (i = 0; i < len; i++) {
     5f2:	9f 5f       	subi	r25, 0xFF	; 255
		switch (*message++) {
     5f4:	f9 01       	movw	r30, r18
{

	uint8_t i, len;

	len = strlen(message);
	for (i = 0; i < len; i++) {
     5f6:	9a 17       	cp	r25, r26
     5f8:	10 f2       	brcs	.-124    	; 0x57e <beeper+0x12>
		off_BEEPER;
//		PORTB.OUTCLR = PIN2_bm;
		_delay_ms(75);

	}
     5fa:	08 95       	ret

000005fc <get_cmdline>:
	if ((d >= '0') && (d <= '9')) {
		return(ERROR);
	}
	return(NOERROR);

}
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	9c 01       	movw	r18, r24
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	1c c0       	rjmp	.+56     	; 0x63e <get_cmdline+0x42>
     606:	c6 e4       	ldi	r28, 0x46	; 70
     608:	de e2       	ldi	r29, 0x2E	; 46
     60a:	e8 81       	ld	r30, Y
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	e9 5b       	subi	r30, 0xB9	; 185
     610:	f2 4d       	sbci	r31, 0xD2	; 210
     612:	80 81       	ld	r24, Z
     614:	f9 01       	movw	r30, r18
     616:	e4 0f       	add	r30, r20
     618:	f1 1d       	adc	r31, r1
     61a:	80 83       	st	Z, r24
     61c:	a8 e4       	ldi	r26, 0x48	; 72
     61e:	be e2       	ldi	r27, 0x2E	; 46
     620:	8c 91       	ld	r24, X
     622:	81 50       	subi	r24, 0x01	; 1
     624:	8c 93       	st	X, r24
     626:	88 81       	ld	r24, Y
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	6e ef       	ldi	r22, 0xFE	; 254
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__divmodhi4>
     634:	88 83       	st	Y, r24
     636:	80 81       	ld	r24, Z
     638:	88 23       	and	r24, r24
     63a:	29 f0       	breq	.+10     	; 0x646 <get_cmdline+0x4a>
     63c:	4f 5f       	subi	r20, 0xFF	; 255
     63e:	80 91 48 2e 	lds	r24, 0x2E48	; 0x802e48 <recv0_buf+0x101>
     642:	81 11       	cpse	r24, r1
     644:	e0 cf       	rjmp	.-64     	; 0x606 <get_cmdline+0xa>
     646:	f9 01       	movw	r30, r18
     648:	e4 0f       	add	r30, r20
     64a:	f1 1d       	adc	r31, r1
     64c:	10 82       	st	Z, r1
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     654:	9f e9       	ldi	r25, 0x9F	; 159
     656:	98 0f       	add	r25, r24
     658:	9a 31       	cpi	r25, 0x1A	; 26
     65a:	28 f0       	brcs	.+10     	; 0x666 <isaletter+0x12>
     65c:	81 54       	subi	r24, 0x41	; 65
     65e:	8a 31       	cpi	r24, 0x1A	; 26
     660:	20 f4       	brcc	.+8      	; 0x66a <isaletter+0x16>
		return(ERROR);
     662:	83 e6       	ldi	r24, 0x63	; 99
     664:	08 95       	ret
     666:	83 e6       	ldi	r24, 0x63	; 99
     668:	08 95       	ret
	}
	return(NOERROR);
     66a:	80 e0       	ldi	r24, 0x00	; 0

}
     66c:	08 95       	ret

0000066e <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     67a:	e6 2e       	mov	r14, r22
     67c:	f1 2c       	mov	r15, r1
     67e:	84 e3       	ldi	r24, 0x34	; 52
     680:	8e 9d       	mul	r24, r14
     682:	f0 01       	movw	r30, r0
     684:	8f 9d       	mul	r24, r15
     686:	f0 0d       	add	r31, r0
     688:	11 24       	eor	r1, r1
     68a:	e1 5f       	subi	r30, 0xF1	; 241
     68c:	f7 4d       	sbci	r31, 0xD7	; 215
     68e:	8f e3       	ldi	r24, 0x3F	; 63
     690:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     692:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     694:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     696:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     698:	04 c0       	rjmp	.+8      	; 0x6a2 <parse_cmd+0x34>
		if (*ptr == '\0') {
     69a:	11 23       	and	r17, r17
     69c:	09 f4       	brne	.+2      	; 0x6a0 <parse_cmd+0x32>
     69e:	75 c0       	rjmp	.+234    	; 0x78a <parse_cmd+0x11c>
			return;
		}
		ptr++;
     6a0:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     6a2:	18 81       	ld	r17, Y
     6a4:	81 2f       	mov	r24, r17
     6a6:	0e 94 2a 03 	call	0x654	; 0x654 <isaletter>
     6aa:	88 23       	and	r24, r24
     6ac:	b1 f3       	breq	.-20     	; 0x69a <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     6ae:	21 96       	adiw	r28, 0x01	; 1
     6b0:	84 e3       	ldi	r24, 0x34	; 52
     6b2:	8e 9d       	mul	r24, r14
     6b4:	f0 01       	movw	r30, r0
     6b6:	8f 9d       	mul	r24, r15
     6b8:	f0 0d       	add	r31, r0
     6ba:	11 24       	eor	r1, r1
     6bc:	e1 5f       	subi	r30, 0xF1	; 241
     6be:	f7 4d       	sbci	r31, 0xD7	; 215
     6c0:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <parse_cmd+0x5e>
		if (*ptr == '\0') {
     6c4:	11 23       	and	r17, r17
     6c6:	09 f4       	brne	.+2      	; 0x6ca <parse_cmd+0x5c>
     6c8:	60 c0       	rjmp	.+192    	; 0x78a <parse_cmd+0x11c>
			return;
		}
		ptr++;
     6ca:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     6cc:	18 81       	ld	r17, Y
     6ce:	81 2f       	mov	r24, r17
     6d0:	0e 94 2a 03 	call	0x654	; 0x654 <isaletter>
     6d4:	88 23       	and	r24, r24
     6d6:	b1 f3       	breq	.-20     	; 0x6c4 <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     6d8:	21 96       	adiw	r28, 0x01	; 1
     6da:	84 e3       	ldi	r24, 0x34	; 52
     6dc:	8e 9d       	mul	r24, r14
     6de:	f0 01       	movw	r30, r0
     6e0:	8f 9d       	mul	r24, r15
     6e2:	f0 0d       	add	r31, r0
     6e4:	11 24       	eor	r1, r1
     6e6:	e1 5f       	subi	r30, 0xF1	; 241
     6e8:	f7 4d       	sbci	r31, 0xD7	; 215
     6ea:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	2a c0       	rjmp	.+84     	; 0x744 <parse_cmd+0xd6>
		if (*ptr == '\0') {
     6f0:	98 81       	ld	r25, Y
     6f2:	91 11       	cpse	r25, r1
     6f4:	0c c0       	rjmp	.+24     	; 0x70e <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     6f6:	94 e3       	ldi	r25, 0x34	; 52
     6f8:	9e 9d       	mul	r25, r14
     6fa:	f0 01       	movw	r30, r0
     6fc:	9f 9d       	mul	r25, r15
     6fe:	f0 0d       	add	r31, r0
     700:	11 24       	eor	r1, r1
     702:	e1 5f       	subi	r30, 0xF1	; 241
     704:	f7 4d       	sbci	r31, 0xD7	; 215
     706:	e8 0f       	add	r30, r24
     708:	f1 1d       	adc	r31, r1
     70a:	12 82       	std	Z+2, r1	; 0x02
			return;
     70c:	3e c0       	rjmp	.+124    	; 0x78a <parse_cmd+0x11c>
		}
		if (*ptr == ';') {			// Command ID separator
     70e:	9b 33       	cpi	r25, 0x3B	; 59
     710:	61 f4       	brne	.+24     	; 0x72a <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     712:	94 e3       	ldi	r25, 0x34	; 52
     714:	9e 9d       	mul	r25, r14
     716:	f0 01       	movw	r30, r0
     718:	9f 9d       	mul	r25, r15
     71a:	f0 0d       	add	r31, r0
     71c:	11 24       	eor	r1, r1
     71e:	e1 5f       	subi	r30, 0xF1	; 241
     720:	f7 4d       	sbci	r31, 0xD7	; 215
     722:	e8 0f       	add	r30, r24
     724:	f1 1d       	adc	r31, r1
     726:	12 82       	std	Z+2, r1	; 0x02
			break;
     728:	0f c0       	rjmp	.+30     	; 0x748 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     72a:	21 96       	adiw	r28, 0x01	; 1
     72c:	24 e3       	ldi	r18, 0x34	; 52
     72e:	2e 9d       	mul	r18, r14
     730:	f0 01       	movw	r30, r0
     732:	2f 9d       	mul	r18, r15
     734:	f0 0d       	add	r31, r0
     736:	11 24       	eor	r1, r1
     738:	e1 5f       	subi	r30, 0xF1	; 241
     73a:	f7 4d       	sbci	r31, 0xD7	; 215
     73c:	e8 0f       	add	r30, r24
     73e:	f1 1d       	adc	r31, r1
     740:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     742:	8f 5f       	subi	r24, 0xFF	; 255
     744:	89 32       	cpi	r24, 0x29	; 41
     746:	a0 f2       	brcs	.-88     	; 0x6f0 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
     748:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	1c c0       	rjmp	.+56     	; 0x786 <parse_cmd+0x118>
		if (*ptr == '\0') {
     74e:	98 81       	ld	r25, Y
     750:	91 11       	cpse	r25, r1
     752:	0c c0       	rjmp	.+24     	; 0x76c <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     754:	94 e3       	ldi	r25, 0x34	; 52
     756:	9e 9d       	mul	r25, r14
     758:	f0 01       	movw	r30, r0
     75a:	9f 9d       	mul	r25, r15
     75c:	f0 0d       	add	r31, r0
     75e:	11 24       	eor	r1, r1
     760:	e1 5f       	subi	r30, 0xF1	; 241
     762:	f7 4d       	sbci	r31, 0xD7	; 215
     764:	e8 0f       	add	r30, r24
     766:	f1 1d       	adc	r31, r1
     768:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     76a:	0f c0       	rjmp	.+30     	; 0x78a <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     76c:	21 96       	adiw	r28, 0x01	; 1
     76e:	24 e3       	ldi	r18, 0x34	; 52
     770:	2e 9d       	mul	r18, r14
     772:	f0 01       	movw	r30, r0
     774:	2f 9d       	mul	r18, r15
     776:	f0 0d       	add	r31, r0
     778:	11 24       	eor	r1, r1
     77a:	e1 5f       	subi	r30, 0xF1	; 241
     77c:	f7 4d       	sbci	r31, 0xD7	; 215
     77e:	e8 0f       	add	r30, r24
     780:	f1 1d       	adc	r31, r1
     782:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     784:	8f 5f       	subi	r24, 0xFF	; 255
     786:	89 30       	cpi	r24, 0x09	; 9
     788:	10 f3       	brcs	.-60     	; 0x74e <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	08 95       	ret

00000796 <printLine>:
		been run and the system has received a reboot acknowledge (the !). This
		is done to prevent unsolicited text being sent (error messages) at
		initialization or after a reboot.
------------------------------------------------------------------------------*/
void printLine(char *str)
{
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
     7a2:	c5 50       	subi	r28, 0x05	; 5
     7a4:	d1 40       	sbci	r29, 0x01	; 1
     7a6:	cd bf       	out	0x3d, r28	; 61
     7a8:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char prFormat[] = "$S%d%s";
     7aa:	27 e0       	ldi	r18, 0x07	; 7
     7ac:	e0 e4       	ldi	r30, 0x40	; 64
     7ae:	f2 eb       	ldi	r31, 0xB2	; 178
     7b0:	de 01       	movw	r26, r28
     7b2:	a1 50       	subi	r26, 0x01	; 1
     7b4:	bf 4f       	sbci	r27, 0xFF	; 255
     7b6:	01 90       	ld	r0, Z+
     7b8:	0d 92       	st	X+, r0
     7ba:	2a 95       	dec	r18
     7bc:	e1 f7       	brne	.-8      	; 0x7b6 <printLine+0x20>

	if (firstpass) {
     7be:	20 91 17 2a 	lds	r18, 0x2A17	; 0x802a17 <firstpass>
     7c2:	21 11       	cpse	r18, r1
     7c4:	2a c0       	rjmp	.+84     	; 0x81a <printLine+0x84>
		return;
	}

	sprintf(strbuf, prFormat, get_SPECID, str);
     7c6:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     7ca:	22 ff       	sbrs	r18, 2
     7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <printLine+0x3e>
     7ce:	22 e0       	ldi	r18, 0x02	; 2
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <printLine+0x42>
     7d4:	21 e0       	ldi	r18, 0x01	; 1
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	9f 93       	push	r25
     7da:	8f 93       	push	r24
     7dc:	3f 93       	push	r19
     7de:	2f 93       	push	r18
     7e0:	ce 01       	movw	r24, r28
     7e2:	81 50       	subi	r24, 0x01	; 1
     7e4:	9f 4f       	sbci	r25, 0xFF	; 255
     7e6:	9f 93       	push	r25
     7e8:	8f 93       	push	r24
     7ea:	8e 01       	movw	r16, r28
     7ec:	0f 5f       	subi	r16, 0xFF	; 255
     7ee:	1f 4f       	sbci	r17, 0xFF	; 255
     7f0:	1f 93       	push	r17
     7f2:	0f 93       	push	r16
     7f4:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
	checksum_NMEA(strbuf);
     7f8:	c8 01       	movw	r24, r16
     7fa:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     7fe:	f8 01       	movw	r30, r16
     800:	01 90       	ld	r0, Z+
     802:	00 20       	and	r0, r0
     804:	e9 f7       	brne	.-6      	; 0x800 <printLine+0x6a>
     806:	31 97       	sbiw	r30, 0x01	; 1
     808:	af 01       	movw	r20, r30
     80a:	40 1b       	sub	r20, r16
     80c:	51 0b       	sbc	r21, r17
     80e:	b8 01       	movw	r22, r16
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <send_USART>
     816:	cd bf       	out	0x3d, r28	; 61
     818:	de bf       	out	0x3e, r29	; 62

}
     81a:	cb 5f       	subi	r28, 0xFB	; 251
     81c:	de 4f       	sbci	r29, 0xFE	; 254
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	de bf       	out	0x3e, r29	; 62
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	08 95       	ret

0000082c <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     82c:	cf 92       	push	r12
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	cc 51       	subi	r28, 0x1C	; 28
     842:	d1 40       	sbci	r29, 0x01	; 1
     844:	cd bf       	out	0x3d, r28	; 61
     846:	de bf       	out	0x3e, r29	; 62
     848:	d8 2e       	mov	r13, r24
     84a:	c9 2e       	mov	r12, r25

	const char format_CMD[] = "CMD,%s,%s";
     84c:	8a e0       	ldi	r24, 0x0A	; 10
     84e:	e7 e4       	ldi	r30, 0x47	; 71
     850:	f2 eb       	ldi	r31, 0xB2	; 178
     852:	9e 01       	movw	r18, r28
     854:	2f 5f       	subi	r18, 0xFF	; 255
     856:	3f 4f       	sbci	r19, 0xFF	; 255
     858:	79 01       	movw	r14, r18
     85a:	d9 01       	movw	r26, r18
     85c:	01 90       	ld	r0, Z+
     85e:	0d 92       	st	X+, r0
     860:	8a 95       	dec	r24
     862:	e1 f7       	brne	.-8      	; 0x85c <echo_cmd+0x30>
	char currenttime[20], strbuf[BUFSIZE];

	get_time(currenttime);
     864:	8e 01       	movw	r16, r28
     866:	05 5f       	subi	r16, 0xF5	; 245
     868:	1f 4f       	sbci	r17, 0xFF	; 255
     86a:	c8 01       	movw	r24, r16
     86c:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
	sprintf(strbuf, format_CMD, currenttime, cmdline);
     870:	cf 92       	push	r12
     872:	df 92       	push	r13
     874:	1f 93       	push	r17
     876:	0f 93       	push	r16
     878:	ff 92       	push	r15
     87a:	ef 92       	push	r14
     87c:	0c 5e       	subi	r16, 0xEC	; 236
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	1f 93       	push	r17
     882:	0f 93       	push	r16
     884:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
	printLine(strbuf);
     888:	c8 01       	movw	r24, r16
     88a:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>

}
     88e:	cd bf       	out	0x3d, r28	; 61
     890:	de bf       	out	0x3e, r29	; 62
     892:	c4 5e       	subi	r28, 0xE4	; 228
     894:	de 4f       	sbci	r29, 0xFE	; 254
     896:	cd bf       	out	0x3d, r28	; 61
     898:	de bf       	out	0x3e, r29	; 62
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	ff 90       	pop	r15
     8a4:	ef 90       	pop	r14
     8a6:	df 90       	pop	r13
     8a8:	cf 90       	pop	r12
     8aa:	08 95       	ret

000008ac <send_EXprompt>:
/*------------------------------------------------------------------------------
void send_EXprompt(void)
	Sends an exclamation mark on USART port 0
------------------------------------------------------------------------------*/
void send_EXprompt(void)
{
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	00 d0       	rcall	.+0      	; 0x8b2 <send_EXprompt+0x6>
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62

	const char str[] = "!";
     8b6:	81 e2       	ldi	r24, 0x21	; 33
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	89 83       	std	Y+1, r24	; 0x01
     8bc:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     8be:	41 e0       	ldi	r20, 0x01	; 1
     8c0:	be 01       	movw	r22, r28
     8c2:	6f 5f       	subi	r22, 0xFF	; 255
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <send_USART>

}
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	08 95       	ret

000008d6 <rebootACKd>:
	Returns:
		YES if the reboot acknowledge string was received
		NO if it wasn't
------------------------------------------------------------------------------*/
uint8_t rebootACKd(char *cmdline)
{
     8d6:	cf 93       	push	r28

	if (!rebootackd) {
     8d8:	c0 91 0e 28 	lds	r28, 0x280E	; 0x80280e <rebootackd>
     8dc:	c1 11       	cpse	r28, r1
     8de:	21 c0       	rjmp	.+66     	; 0x922 <rebootACKd+0x4c>
     8e0:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     8e2:	80 81       	ld	r24, Z
     8e4:	81 32       	cpi	r24, 0x21	; 33
     8e6:	91 f4       	brne	.+36     	; 0x90c <rebootACKd+0x36>
     8e8:	91 81       	ldd	r25, Z+1	; 0x01
     8ea:	91 11       	cpse	r25, r1
     8ec:	0f c0       	rjmp	.+30     	; 0x90c <rebootACKd+0x36>
			init_RTC(511);		// 1-sec RTC clock ticks
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 3f 2c 	call	0x587e	; 0x587e <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     8f6:	85 e0       	ldi	r24, 0x05	; 5
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
     8fe:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>
			rebootackd = YES;
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	80 93 0e 28 	sts	0x280E, r24	; 0x80280e <rebootackd>
			return(YES);
     908:	c1 e0       	ldi	r28, 0x01	; 1
     90a:	0c c0       	rjmp	.+24     	; 0x924 <rebootACKd+0x4e>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     90c:	81 32       	cpi	r24, 0x21	; 33
     90e:	31 f4       	brne	.+12     	; 0x91c <rebootACKd+0x46>
     910:	81 81       	ldd	r24, Z+1	; 0x01
     912:	88 23       	and	r24, r24
     914:	19 f0       	breq	.+6      	; 0x91c <rebootACKd+0x46>
			reboot();
     916:	0e 94 18 30 	call	0x6030	; 0x6030 <reboot>
			return(NO);
     91a:	04 c0       	rjmp	.+8      	; 0x924 <rebootACKd+0x4e>
		} else {
			send_EXprompt();
     91c:	0e 94 56 04 	call	0x8ac	; 0x8ac <send_EXprompt>
//			send_prompt('!');
			return(NO);
     920:	01 c0       	rjmp	.+2      	; 0x924 <rebootACKd+0x4e>
		}
	}

	return(YES);
     922:	c1 e0       	ldi	r28, 0x01	; 1

}
     924:	8c 2f       	mov	r24, r28
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <send_GTprompt>:
/*------------------------------------------------------------------------------
void send_GTprompt(void)
	Sends a greater than (>) on USART port 0
------------------------------------------------------------------------------*/
void send_GTprompt(void)
{
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	00 d0       	rcall	.+0      	; 0x930 <send_GTprompt+0x6>
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62

	const char str[] = ">";
     934:	8e e3       	ldi	r24, 0x3E	; 62
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     93c:	41 e0       	ldi	r20, 0x01	; 1
     93e:	be 01       	movw	r22, r28
     940:	6f 5f       	subi	r22, 0xFF	; 255
     942:	7f 4f       	sbci	r23, 0xFF	; 255
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <send_USART>

}
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
     95c:	cf 5f       	subi	r28, 0xFF	; 255
     95e:	d1 09       	sbc	r29, r1
     960:	cd bf       	out	0x3d, r28	; 61
     962:	de bf       	out	0x3e, r29	; 62

	char cmdline[BUFSIZE+1];		// BUFSIZE is the size of the ring buffer
	static uint8_t cstack = 0;		// pcmd index

	get_cmdline(cmdline);
     964:	ce 01       	movw	r24, r28
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	0e 94 fe 02 	call	0x5fc	; 0x5fc <get_cmdline>

	if (!rebootACKd(cmdline)) {		// Reboot not yet acknowledged
     96c:	ce 01       	movw	r24, r28
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <rebootACKd>
     974:	88 23       	and	r24, r24
     976:	09 f4       	brne	.+2      	; 0x97a <commands+0x26>
     978:	7c c0       	rjmp	.+248    	; 0xa72 <commands+0x11e>
		return;
	}

		// <CR> or ! alone are not errors
	if ((cmdline[0] == '\0') || (cmdline[0] == '!')) {
     97a:	89 81       	ldd	r24, Y+1	; 0x01
     97c:	88 23       	and	r24, r24
     97e:	11 f0       	breq	.+4      	; 0x984 <commands+0x30>
     980:	81 32       	cpi	r24, 0x21	; 33
     982:	29 f4       	brne	.+10     	; 0x98e <commands+0x3a>
		firstpass = NO;
     984:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <firstpass>
		send_GTprompt();
     988:	0e 94 95 04 	call	0x92a	; 0x92a <send_GTprompt>
		return;
     98c:	72 c0       	rjmp	.+228    	; 0xa72 <commands+0x11e>
	}

	echo_cmd(cmdline);
     98e:	ce 01       	movw	r24, r28
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	0e 94 16 04 	call	0x82c	; 0x82c <echo_cmd>
	parse_cmd(cmdline, cstack);
     996:	60 91 00 28 	lds	r22, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     99a:	ce 01       	movw	r24, r28
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	0e 94 37 03 	call	0x66e	; 0x66e <parse_cmd>

	switch (pcmd[cstack].cverb) {
     9a2:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     9a6:	24 e3       	ldi	r18, 0x34	; 52
     9a8:	82 9f       	mul	r24, r18
     9aa:	f0 01       	movw	r30, r0
     9ac:	11 24       	eor	r1, r1
     9ae:	e1 5f       	subi	r30, 0xF1	; 241
     9b0:	f7 4d       	sbci	r31, 0xD7	; 215
     9b2:	e0 81       	ld	r30, Z
     9b4:	4e 2f       	mov	r20, r30
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	fa 01       	movw	r30, r20
     9ba:	e9 54       	subi	r30, 0x49	; 73
     9bc:	f1 09       	sbc	r31, r1
     9be:	ed 32       	cpi	r30, 0x2D	; 45
     9c0:	f1 05       	cpc	r31, r1
     9c2:	08 f0       	brcs	.+2      	; 0x9c6 <commands+0x72>
     9c4:	44 c0       	rjmp	.+136    	; 0xa4e <commands+0xfa>
     9c6:	e0 5b       	subi	r30, 0xB0	; 176
     9c8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ca:	0c 94 32 36 	jmp	0x6c64	; 0x6c64 <__tablejump2__>
		case 'c':				// close
			close_PNEU(cstack);
     9ce:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <close_PNEU>
			break;
     9d2:	43 c0       	rjmp	.+134    	; 0xa5a <commands+0x106>

		case 'o':				// open
			open_PNEU(cstack);
     9d4:	0e 94 35 10 	call	0x206a	; 0x206a <open_PNEU>
			break;
     9d8:	40 c0       	rjmp	.+128    	; 0xa5a <commands+0x106>

		case 'm':				// move
			move_MOTOR_CMD(cstack);
     9da:	0e 94 81 24 	call	0x4902	; 0x4902 <move_MOTOR_CMD>
			break;
     9de:	3d c0       	rjmp	.+122    	; 0xa5a <commands+0x106>

		case 'r':				// report
			report(cstack);
     9e0:	0e 94 27 11 	call	0x224e	; 0x224e <report>
			break;
     9e4:	3a c0       	rjmp	.+116    	; 0xa5a <commands+0x106>

		case 's':				// set
			set(cstack);
     9e6:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <set>
			break;
     9ea:	37 c0       	rjmp	.+110    	; 0xa5a <commands+0x106>

		case 't':
			testroutine();
     9ec:	0e 94 1a 2c 	call	0x5834	; 0x5834 <testroutine>
			break;
     9f0:	34 c0       	rjmp	.+104    	; 0xa5a <commands+0x106>

		case 'u':
			unstick_MOTOR_LIMIT(cstack);
     9f2:	0e 94 85 28 	call	0x510a	; 0x510a <unstick_MOTOR_LIMIT>
			break;
     9f6:	31 c0       	rjmp	.+98     	; 0xa5a <commands+0x106>

		case 'I':	// test init_MOTORS
			init_MOTORS();
     9f8:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <init_MOTORS>
			break;
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <commands+0x106>

		case 'R':				// Reboot
			if (motorsMoving()) {
     9fe:	0e 94 3d 21 	call	0x427a	; 0x427a <motorsMoving>
     a02:	88 23       	and	r24, r24
     a04:	39 f0       	breq	.+14     	; 0xa14 <commands+0xc0>
				printError(ERR_MTR, "commands: Can't reboot, motor moving");
     a06:	61 e5       	ldi	r22, 0x51	; 81
     a08:	72 eb       	ldi	r23, 0xB2	; 178
     a0a:	86 e3       	ldi	r24, 0x36	; 54
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				break;
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <commands+0x106>
			} else {
				if (put_FRAM_ENCODERS() == ERROR) {
     a14:	0e 94 9e 21 	call	0x433c	; 0x433c <put_FRAM_ENCODERS>
     a18:	83 36       	cpi	r24, 0x63	; 99
     a1a:	31 f4       	brne	.+12     	; 0xa28 <commands+0xd4>
					printError(ERR_FRAM, "commands: put_FRAM_ENCODERS error");
     a1c:	66 e7       	ldi	r22, 0x76	; 118
     a1e:	72 eb       	ldi	r23, 0xB2	; 178
     a20:	83 e9       	ldi	r24, 0x93	; 147
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				}
				timerSAVEENCODER = 0;
     a28:	10 92 3c 2a 	sts	0x2A3C, r1	; 0x802a3c <timerSAVEENCODER>
				send_GTprompt();	// Aidan request
     a2c:	0e 94 95 04 	call	0x92a	; 0x92a <send_GTprompt>
     a30:	8f e3       	ldi	r24, 0x3F	; 63
     a32:	9d e0       	ldi	r25, 0x0D	; 13
     a34:	23 e0       	ldi	r18, 0x03	; 3
     a36:	81 50       	subi	r24, 0x01	; 1
     a38:	90 40       	sbci	r25, 0x00	; 0
     a3a:	20 40       	sbci	r18, 0x00	; 0
     a3c:	e1 f7       	brne	.-8      	; 0xa36 <commands+0xe2>
     a3e:	00 c0       	rjmp	.+0      	; 0xa40 <commands+0xec>
     a40:	00 00       	nop
				_delay_ms(100);
				reboot();			// in wdt.c
     a42:	0e 94 18 30 	call	0x6030	; 0x6030 <reboot>
				return;
     a46:	15 c0       	rjmp	.+42     	; 0xa72 <commands+0x11e>
			}

		case 'Z':				// Write zero to encoder
			zero_MOTOR_CMD(cstack);
     a48:	0e 94 8c 29 	call	0x5318	; 0x5318 <zero_MOTOR_CMD>
			break;
     a4c:	06 c0       	rjmp	.+12     	; 0xa5a <commands+0x106>

		default:
			printError(ERR_BADCOMMAND, "Not a command");
     a4e:	68 e9       	ldi	r22, 0x98	; 152
     a50:	72 eb       	ldi	r23, 0xB2	; 178
     a52:	89 ec       	ldi	r24, 0xC9	; 201
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     a5a:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	6a e0       	ldi	r22, 0x0A	; 10
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__divmodhi4>
     a6a:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	send_GTprompt();
     a6e:	0e 94 95 04 	call	0x92a	; 0x92a <send_GTprompt>

}
     a72:	c1 50       	subi	r28, 0x01	; 1
     a74:	df 4f       	sbci	r29, 0xFF	; 255
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	de bf       	out	0x3e, r29	; 62
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <check_isotime>:
#include "twi.h"
#include "errors.h"
#include "ds3231.h"

uint8_t check_isotime(char *isotime)
{
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
     a8c:	c0 5f       	subi	r28, 0xF0	; 240
     a8e:	d1 09       	sbc	r29, r1
     a90:	cd bf       	out	0x3d, r28	; 61
     a92:	de bf       	out	0x3e, r29	; 62
     a94:	8c 01       	movw	r16, r24

	char sbuf[10], strbuf[80];
	uint8_t i;
	int year, month, day, hours, minutes, seconds;
	const char msg0[] = "check_isotime: bad year";
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	e6 ea       	ldi	r30, 0xA6	; 166
     a9a:	f2 eb       	ldi	r31, 0xB2	; 178
     a9c:	de 01       	movw	r26, r28
     a9e:	a5 5a       	subi	r26, 0xA5	; 165
     aa0:	bf 4f       	sbci	r27, 0xFF	; 255
     aa2:	01 90       	ld	r0, Z+
     aa4:	0d 92       	st	X+, r0
     aa6:	8a 95       	dec	r24
     aa8:	e1 f7       	brne	.-8      	; 0xaa2 <check_isotime+0x22>
	const char msg1[] = "check_isotime: bad month";
     aaa:	89 e1       	ldi	r24, 0x19	; 25
     aac:	ee eb       	ldi	r30, 0xBE	; 190
     aae:	f2 eb       	ldi	r31, 0xB2	; 178
     ab0:	de 01       	movw	r26, r28
     ab2:	ad 58       	subi	r26, 0x8D	; 141
     ab4:	bf 4f       	sbci	r27, 0xFF	; 255
     ab6:	01 90       	ld	r0, Z+
     ab8:	0d 92       	st	X+, r0
     aba:	8a 95       	dec	r24
     abc:	e1 f7       	brne	.-8      	; 0xab6 <check_isotime+0x36>
	const char msg2[] = "check_isotime: bad day";
     abe:	87 e1       	ldi	r24, 0x17	; 23
     ac0:	e7 ed       	ldi	r30, 0xD7	; 215
     ac2:	f2 eb       	ldi	r31, 0xB2	; 178
     ac4:	de 01       	movw	r26, r28
     ac6:	a4 57       	subi	r26, 0x74	; 116
     ac8:	bf 4f       	sbci	r27, 0xFF	; 255
     aca:	01 90       	ld	r0, Z+
     acc:	0d 92       	st	X+, r0
     ace:	8a 95       	dec	r24
     ad0:	e1 f7       	brne	.-8      	; 0xaca <check_isotime+0x4a>
	const char msg3[] = "check_isotime: bad hour";
     ad2:	88 e1       	ldi	r24, 0x18	; 24
     ad4:	ee ee       	ldi	r30, 0xEE	; 238
     ad6:	f2 eb       	ldi	r31, 0xB2	; 178
     ad8:	de 01       	movw	r26, r28
     ada:	ad 55       	subi	r26, 0x5D	; 93
     adc:	bf 4f       	sbci	r27, 0xFF	; 255
     ade:	01 90       	ld	r0, Z+
     ae0:	0d 92       	st	X+, r0
     ae2:	8a 95       	dec	r24
     ae4:	e1 f7       	brne	.-8      	; 0xade <check_isotime+0x5e>
	const char msg4[] = "check_isotime: bad minutes";
     ae6:	8b e1       	ldi	r24, 0x1B	; 27
     ae8:	e6 e0       	ldi	r30, 0x06	; 6
     aea:	f3 eb       	ldi	r31, 0xB3	; 179
     aec:	de 01       	movw	r26, r28
     aee:	a5 54       	subi	r26, 0x45	; 69
     af0:	bf 4f       	sbci	r27, 0xFF	; 255
     af2:	01 90       	ld	r0, Z+
     af4:	0d 92       	st	X+, r0
     af6:	8a 95       	dec	r24
     af8:	e1 f7       	brne	.-8      	; 0xaf2 <check_isotime+0x72>
	const char msg5[] = "check_isotime: bad seconds";
     afa:	8b e1       	ldi	r24, 0x1B	; 27
     afc:	e1 e2       	ldi	r30, 0x21	; 33
     afe:	f3 eb       	ldi	r31, 0xB3	; 179
     b00:	de 01       	movw	r26, r28
     b02:	aa 52       	subi	r26, 0x2A	; 42
     b04:	bf 4f       	sbci	r27, 0xFF	; 255
     b06:	01 90       	ld	r0, Z+
     b08:	0d 92       	st	X+, r0
     b0a:	8a 95       	dec	r24
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <check_isotime+0x86>

	for (i = 0; i < 4; i++) {
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	0e c0       	rjmp	.+28     	; 0xb2e <check_isotime+0xae>
		sbuf[i] = isotime[i];
     b12:	82 2f       	mov	r24, r18
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	f8 01       	movw	r30, r16
     b18:	e8 0f       	add	r30, r24
     b1a:	f9 1f       	adc	r31, r25
     b1c:	30 81       	ld	r19, Z
     b1e:	e1 e0       	ldi	r30, 0x01	; 1
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	ec 0f       	add	r30, r28
     b24:	fd 1f       	adc	r31, r29
     b26:	e8 0f       	add	r30, r24
     b28:	f9 1f       	adc	r31, r25
     b2a:	30 83       	st	Z, r19
	const char msg2[] = "check_isotime: bad day";
	const char msg3[] = "check_isotime: bad hour";
	const char msg4[] = "check_isotime: bad minutes";
	const char msg5[] = "check_isotime: bad seconds";

	for (i = 0; i < 4; i++) {
     b2c:	2f 5f       	subi	r18, 0xFF	; 255
     b2e:	24 30       	cpi	r18, 0x04	; 4
     b30:	80 f3       	brcs	.-32     	; 0xb12 <check_isotime+0x92>
		sbuf[i] = isotime[i];
	}
	sbuf[4] = '\0';
     b32:	1d 82       	std	Y+5, r1	; 0x05
	year = atoi(sbuf);
     b34:	ce 01       	movw	r24, r28
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	0e 94 b9 36 	call	0x6d72	; 0x6d72 <atoi>
	if ((year < 2021) || year > 2030) {
     b3c:	85 5e       	subi	r24, 0xE5	; 229
     b3e:	97 40       	sbci	r25, 0x07	; 7
     b40:	0a 97       	sbiw	r24, 0x0a	; 10
     b42:	40 f1       	brcs	.+80     	; 0xb94 <check_isotime+0x114>
		sprintf(strbuf, msg0);
     b44:	ce 01       	movw	r24, r28
     b46:	85 5a       	subi	r24, 0xA5	; 165
     b48:	9f 4f       	sbci	r25, 0xFF	; 255
     b4a:	9f 93       	push	r25
     b4c:	8f 93       	push	r24
     b4e:	8e 01       	movw	r16, r28
     b50:	05 5f       	subi	r16, 0xF5	; 245
     b52:	1f 4f       	sbci	r17, 0xFF	; 255
     b54:	1f 93       	push	r17
     b56:	0f 93       	push	r16
     b58:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
		printError(ERR_ISO, strbuf);
     b5c:	b8 01       	movw	r22, r16
     b5e:	8b e5       	ldi	r24, 0x5B	; 91
     b60:	92 e0       	ldi	r25, 0x02	; 2
     b62:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	83 e6       	ldi	r24, 0x63	; 99
     b70:	fd c0       	rjmp	.+506    	; 0xd6c <check_isotime+0x2ec>
	}
	for (i = 5; i < 7; i++) {
		sbuf[i-5] = isotime[i];
     b72:	28 2f       	mov	r18, r24
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	f9 01       	movw	r30, r18
     b78:	35 97       	sbiw	r30, 0x05	; 5
     b7a:	d8 01       	movw	r26, r16
     b7c:	a2 0f       	add	r26, r18
     b7e:	b3 1f       	adc	r27, r19
     b80:	9c 91       	ld	r25, X
     b82:	21 e0       	ldi	r18, 0x01	; 1
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	2c 0f       	add	r18, r28
     b88:	3d 1f       	adc	r19, r29
     b8a:	e2 0f       	add	r30, r18
     b8c:	f3 1f       	adc	r31, r19
     b8e:	90 83       	st	Z, r25
	if ((year < 2021) || year > 2030) {
		sprintf(strbuf, msg0);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 5; i < 7; i++) {
     b90:	8f 5f       	subi	r24, 0xFF	; 255
     b92:	01 c0       	rjmp	.+2      	; 0xb96 <check_isotime+0x116>
     b94:	85 e0       	ldi	r24, 0x05	; 5
     b96:	87 30       	cpi	r24, 0x07	; 7
     b98:	60 f3       	brcs	.-40     	; 0xb72 <check_isotime+0xf2>
		sbuf[i-5] = isotime[i];
	}
	sbuf[2] = '\0';
     b9a:	1b 82       	std	Y+3, r1	; 0x03
	month = atoi(sbuf);
     b9c:	ce 01       	movw	r24, r28
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	0e 94 b9 36 	call	0x6d72	; 0x6d72 <atoi>
	if ((month < 1) || (month > 12)) {
     ba4:	01 97       	sbiw	r24, 0x01	; 1
     ba6:	0c 97       	sbiw	r24, 0x0c	; 12
     ba8:	40 f1       	brcs	.+80     	; 0xbfa <check_isotime+0x17a>
		sprintf(strbuf, msg1);
     baa:	ce 01       	movw	r24, r28
     bac:	8d 58       	subi	r24, 0x8D	; 141
     bae:	9f 4f       	sbci	r25, 0xFF	; 255
     bb0:	9f 93       	push	r25
     bb2:	8f 93       	push	r24
     bb4:	8e 01       	movw	r16, r28
     bb6:	05 5f       	subi	r16, 0xF5	; 245
     bb8:	1f 4f       	sbci	r17, 0xFF	; 255
     bba:	1f 93       	push	r17
     bbc:	0f 93       	push	r16
     bbe:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
		printError(ERR_ISO, strbuf);
     bc2:	b8 01       	movw	r22, r16
     bc4:	8b e5       	ldi	r24, 0x5B	; 91
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	83 e6       	ldi	r24, 0x63	; 99
     bd6:	ca c0       	rjmp	.+404    	; 0xd6c <check_isotime+0x2ec>
	}
	for (i = 8; i < 10; i++) {
		sbuf[i-8] = isotime[i];
     bd8:	28 2f       	mov	r18, r24
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	f9 01       	movw	r30, r18
     bde:	38 97       	sbiw	r30, 0x08	; 8
     be0:	d8 01       	movw	r26, r16
     be2:	a2 0f       	add	r26, r18
     be4:	b3 1f       	adc	r27, r19
     be6:	9c 91       	ld	r25, X
     be8:	21 e0       	ldi	r18, 0x01	; 1
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	2c 0f       	add	r18, r28
     bee:	3d 1f       	adc	r19, r29
     bf0:	e2 0f       	add	r30, r18
     bf2:	f3 1f       	adc	r31, r19
     bf4:	90 83       	st	Z, r25
	if ((month < 1) || (month > 12)) {
		sprintf(strbuf, msg1);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 8; i < 10; i++) {
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	01 c0       	rjmp	.+2      	; 0xbfc <check_isotime+0x17c>
     bfa:	88 e0       	ldi	r24, 0x08	; 8
     bfc:	8a 30       	cpi	r24, 0x0A	; 10
     bfe:	60 f3       	brcs	.-40     	; 0xbd8 <check_isotime+0x158>
		sbuf[i-8] = isotime[i];
	}
	sbuf[2] = '\0';
     c00:	1b 82       	std	Y+3, r1	; 0x03
	day = atoi(sbuf);
     c02:	ce 01       	movw	r24, r28
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	0e 94 b9 36 	call	0x6d72	; 0x6d72 <atoi>
	if ((day < 1) || (day > 31)) {
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	4f 97       	sbiw	r24, 0x1f	; 31
     c0e:	40 f1       	brcs	.+80     	; 0xc60 <check_isotime+0x1e0>
		sprintf(strbuf, msg2);
     c10:	ce 01       	movw	r24, r28
     c12:	84 57       	subi	r24, 0x74	; 116
     c14:	9f 4f       	sbci	r25, 0xFF	; 255
     c16:	9f 93       	push	r25
     c18:	8f 93       	push	r24
     c1a:	8e 01       	movw	r16, r28
     c1c:	05 5f       	subi	r16, 0xF5	; 245
     c1e:	1f 4f       	sbci	r17, 0xFF	; 255
     c20:	1f 93       	push	r17
     c22:	0f 93       	push	r16
     c24:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
		printError(ERR_ISO, strbuf);
     c28:	b8 01       	movw	r22, r16
     c2a:	8b e5       	ldi	r24, 0x5B	; 91
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	83 e6       	ldi	r24, 0x63	; 99
     c3c:	97 c0       	rjmp	.+302    	; 0xd6c <check_isotime+0x2ec>
	}
	for (i = 11; i < 13; i++) {
		sbuf[i-11] = isotime[i];
     c3e:	28 2f       	mov	r18, r24
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	f9 01       	movw	r30, r18
     c44:	3b 97       	sbiw	r30, 0x0b	; 11
     c46:	d8 01       	movw	r26, r16
     c48:	a2 0f       	add	r26, r18
     c4a:	b3 1f       	adc	r27, r19
     c4c:	9c 91       	ld	r25, X
     c4e:	21 e0       	ldi	r18, 0x01	; 1
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	2c 0f       	add	r18, r28
     c54:	3d 1f       	adc	r19, r29
     c56:	e2 0f       	add	r30, r18
     c58:	f3 1f       	adc	r31, r19
     c5a:	90 83       	st	Z, r25
	if ((day < 1) || (day > 31)) {
		sprintf(strbuf, msg2);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 11; i < 13; i++) {
     c5c:	8f 5f       	subi	r24, 0xFF	; 255
     c5e:	01 c0       	rjmp	.+2      	; 0xc62 <check_isotime+0x1e2>
     c60:	8b e0       	ldi	r24, 0x0B	; 11
     c62:	8d 30       	cpi	r24, 0x0D	; 13
     c64:	60 f3       	brcs	.-40     	; 0xc3e <check_isotime+0x1be>
		sbuf[i-11] = isotime[i];
	}
	sbuf[2] = '\0';
     c66:	1b 82       	std	Y+3, r1	; 0x03
	hours = atoi(sbuf);
     c68:	ce 01       	movw	r24, r28
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	0e 94 b9 36 	call	0x6d72	; 0x6d72 <atoi>
	if ((hours < 0) || (hours > 23)) {
     c70:	48 97       	sbiw	r24, 0x18	; 24
     c72:	40 f1       	brcs	.+80     	; 0xcc4 <check_isotime+0x244>
		sprintf(strbuf, msg3);
     c74:	ce 01       	movw	r24, r28
     c76:	8d 55       	subi	r24, 0x5D	; 93
     c78:	9f 4f       	sbci	r25, 0xFF	; 255
     c7a:	9f 93       	push	r25
     c7c:	8f 93       	push	r24
     c7e:	8e 01       	movw	r16, r28
     c80:	05 5f       	subi	r16, 0xF5	; 245
     c82:	1f 4f       	sbci	r17, 0xFF	; 255
     c84:	1f 93       	push	r17
     c86:	0f 93       	push	r16
     c88:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
		printError(ERR_ISO, strbuf);
     c8c:	b8 01       	movw	r22, r16
     c8e:	8b e5       	ldi	r24, 0x5B	; 91
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	83 e6       	ldi	r24, 0x63	; 99
     ca0:	65 c0       	rjmp	.+202    	; 0xd6c <check_isotime+0x2ec>
	}
	for (i = 14; i < 16; i++) {
		sbuf[i-14] = isotime[i];
     ca2:	28 2f       	mov	r18, r24
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	f9 01       	movw	r30, r18
     ca8:	3e 97       	sbiw	r30, 0x0e	; 14
     caa:	d8 01       	movw	r26, r16
     cac:	a2 0f       	add	r26, r18
     cae:	b3 1f       	adc	r27, r19
     cb0:	9c 91       	ld	r25, X
     cb2:	21 e0       	ldi	r18, 0x01	; 1
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	2c 0f       	add	r18, r28
     cb8:	3d 1f       	adc	r19, r29
     cba:	e2 0f       	add	r30, r18
     cbc:	f3 1f       	adc	r31, r19
     cbe:	90 83       	st	Z, r25
	if ((hours < 0) || (hours > 23)) {
		sprintf(strbuf, msg3);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 14; i < 16; i++) {
     cc0:	8f 5f       	subi	r24, 0xFF	; 255
     cc2:	01 c0       	rjmp	.+2      	; 0xcc6 <check_isotime+0x246>
     cc4:	8e e0       	ldi	r24, 0x0E	; 14
     cc6:	80 31       	cpi	r24, 0x10	; 16
     cc8:	60 f3       	brcs	.-40     	; 0xca2 <check_isotime+0x222>
		sbuf[i-14] = isotime[i];
	}
	sbuf[2] = '\0';
     cca:	1b 82       	std	Y+3, r1	; 0x03
	minutes = atoi(sbuf);
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	0e 94 b9 36 	call	0x6d72	; 0x6d72 <atoi>
	if ((minutes < 0) || (minutes > 59)) {
     cd4:	cc 97       	sbiw	r24, 0x3c	; 60
     cd6:	40 f1       	brcs	.+80     	; 0xd28 <check_isotime+0x2a8>
		sprintf(strbuf, msg4);
     cd8:	ce 01       	movw	r24, r28
     cda:	85 54       	subi	r24, 0x45	; 69
     cdc:	9f 4f       	sbci	r25, 0xFF	; 255
     cde:	9f 93       	push	r25
     ce0:	8f 93       	push	r24
     ce2:	8e 01       	movw	r16, r28
     ce4:	05 5f       	subi	r16, 0xF5	; 245
     ce6:	1f 4f       	sbci	r17, 0xFF	; 255
     ce8:	1f 93       	push	r17
     cea:	0f 93       	push	r16
     cec:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
		printError(ERR_ISO, strbuf);
     cf0:	b8 01       	movw	r22, r16
     cf2:	8b e5       	ldi	r24, 0x5B	; 91
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	83 e6       	ldi	r24, 0x63	; 99
     d04:	33 c0       	rjmp	.+102    	; 0xd6c <check_isotime+0x2ec>
	}
	for (i = 17; i < 19; i++) {
		sbuf[i-17] = isotime[i];
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	f9 01       	movw	r30, r18
     d0c:	71 97       	sbiw	r30, 0x11	; 17
     d0e:	d8 01       	movw	r26, r16
     d10:	a2 0f       	add	r26, r18
     d12:	b3 1f       	adc	r27, r19
     d14:	9c 91       	ld	r25, X
     d16:	21 e0       	ldi	r18, 0x01	; 1
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	2c 0f       	add	r18, r28
     d1c:	3d 1f       	adc	r19, r29
     d1e:	e2 0f       	add	r30, r18
     d20:	f3 1f       	adc	r31, r19
     d22:	90 83       	st	Z, r25
	if ((minutes < 0) || (minutes > 59)) {
		sprintf(strbuf, msg4);
		printError(ERR_ISO, strbuf);
		return(ERROR);
	}
	for (i = 17; i < 19; i++) {
     d24:	8f 5f       	subi	r24, 0xFF	; 255
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <check_isotime+0x2aa>
     d28:	81 e1       	ldi	r24, 0x11	; 17
     d2a:	83 31       	cpi	r24, 0x13	; 19
     d2c:	60 f3       	brcs	.-40     	; 0xd06 <check_isotime+0x286>
		sbuf[i-17] = isotime[i];
	}
	sbuf[2] = '\0';
     d2e:	1b 82       	std	Y+3, r1	; 0x03
	seconds = atoi(sbuf);
     d30:	ce 01       	movw	r24, r28
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	0e 94 b9 36 	call	0x6d72	; 0x6d72 <atoi>
	if ((seconds < 0) || (seconds > 59)) {
     d38:	cc 97       	sbiw	r24, 0x3c	; 60
     d3a:	b8 f0       	brcs	.+46     	; 0xd6a <check_isotime+0x2ea>
		sprintf(strbuf, msg5);
     d3c:	ce 01       	movw	r24, r28
     d3e:	8a 52       	subi	r24, 0x2A	; 42
     d40:	9f 4f       	sbci	r25, 0xFF	; 255
     d42:	9f 93       	push	r25
     d44:	8f 93       	push	r24
     d46:	8e 01       	movw	r16, r28
     d48:	05 5f       	subi	r16, 0xF5	; 245
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
     d4c:	1f 93       	push	r17
     d4e:	0f 93       	push	r16
     d50:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
		printError(ERR_ISO, strbuf);
     d54:	b8 01       	movw	r22, r16
     d56:	8b e5       	ldi	r24, 0x5B	; 91
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	83 e6       	ldi	r24, 0x63	; 99
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <check_isotime+0x2ec>
	}
	return(NOERROR);
     d6a:	80 e0       	ldi	r24, 0x00	; 0
}
     d6c:	c0 51       	subi	r28, 0x10	; 16
     d6e:	df 4f       	sbci	r29, 0xFF	; 255
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	08 95       	ret

00000d7e <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	a0 97       	sbiw	r28, 0x20	; 32
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	de bf       	out	0x3e, r29	; 62

	const char format_ISO[] = "20%02x-%02x-%02xT%02x:%02x:%02x";
     d90:	40 e2       	ldi	r20, 0x20	; 32
     d92:	ec e3       	ldi	r30, 0x3C	; 60
     d94:	f3 eb       	ldi	r31, 0xB3	; 179
     d96:	9e 01       	movw	r18, r28
     d98:	2f 5f       	subi	r18, 0xFF	; 255
     d9a:	3f 4f       	sbci	r19, 0xFF	; 255
     d9c:	d9 01       	movw	r26, r18
     d9e:	01 90       	ld	r0, Z+
     da0:	0d 92       	st	X+, r0
     da2:	4a 95       	dec	r20
     da4:	e1 f7       	brne	.-8      	; 0xd9e <convert_ds2iso+0x20>
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     da6:	fb 01       	movw	r30, r22
     da8:	b0 81       	ld	r27, Z
	minutes = (*ds3231time++);
     daa:	a1 81       	ldd	r26, Z+1	; 0x01
	hours = (*ds3231time++);
     dac:	12 81       	ldd	r17, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     dae:	04 81       	ldd	r16, Z+4	; 0x04
	month = (*ds3231time++);
     db0:	55 81       	ldd	r21, Z+5	; 0x05
	year = (*ds3231time);
     db2:	46 81       	ldd	r20, Z+6	; 0x06

	sprintf(isotime, format_ISO, year, month, date, hours, minutes, seconds);
     db4:	1f 92       	push	r1
     db6:	bf 93       	push	r27
     db8:	1f 92       	push	r1
     dba:	af 93       	push	r26
     dbc:	1f 92       	push	r1
     dbe:	1f 93       	push	r17
     dc0:	1f 92       	push	r1
     dc2:	0f 93       	push	r16
     dc4:	1f 92       	push	r1
     dc6:	5f 93       	push	r21
     dc8:	1f 92       	push	r1
     dca:	4f 93       	push	r20
     dcc:	3f 93       	push	r19
     dce:	2f 93       	push	r18
     dd0:	9f 93       	push	r25
     dd2:	8f 93       	push	r24
     dd4:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>

}
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	a0 96       	adiw	r28, 0x20	; 32
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	08 95       	ret

00000dec <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     dec:	dc 01       	movw	r26, r24
     dee:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     df0:	81 89       	ldd	r24, Z+17	; 0x11
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	c0 97       	sbiw	r24, 0x30	; 48
     df6:	82 95       	swap	r24
     df8:	92 95       	swap	r25
     dfa:	90 7f       	andi	r25, 0xF0	; 240
     dfc:	98 27       	eor	r25, r24
     dfe:	80 7f       	andi	r24, 0xF0	; 240
     e00:	98 27       	eor	r25, r24
     e02:	92 89       	ldd	r25, Z+18	; 0x12
     e04:	90 53       	subi	r25, 0x30	; 48
     e06:	89 2b       	or	r24, r25
     e08:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     e0a:	86 85       	ldd	r24, Z+14	; 0x0e
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	c0 97       	sbiw	r24, 0x30	; 48
     e10:	82 95       	swap	r24
     e12:	92 95       	swap	r25
     e14:	90 7f       	andi	r25, 0xF0	; 240
     e16:	98 27       	eor	r25, r24
     e18:	80 7f       	andi	r24, 0xF0	; 240
     e1a:	98 27       	eor	r25, r24
     e1c:	97 85       	ldd	r25, Z+15	; 0x0f
     e1e:	90 53       	subi	r25, 0x30	; 48
     e20:	89 2b       	or	r24, r25
     e22:	11 96       	adiw	r26, 0x01	; 1
     e24:	8c 93       	st	X, r24
     e26:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     e28:	83 85       	ldd	r24, Z+11	; 0x0b
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	c0 97       	sbiw	r24, 0x30	; 48
     e2e:	82 95       	swap	r24
     e30:	92 95       	swap	r25
     e32:	90 7f       	andi	r25, 0xF0	; 240
     e34:	98 27       	eor	r25, r24
     e36:	80 7f       	andi	r24, 0xF0	; 240
     e38:	98 27       	eor	r25, r24
     e3a:	94 85       	ldd	r25, Z+12	; 0x0c
     e3c:	90 53       	subi	r25, 0x30	; 48
     e3e:	89 2b       	or	r24, r25
     e40:	12 96       	adiw	r26, 0x02	; 2
     e42:	8c 93       	st	X, r24
     e44:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	13 96       	adiw	r26, 0x03	; 3
     e4a:	8c 93       	st	X, r24
     e4c:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     e4e:	80 85       	ldd	r24, Z+8	; 0x08
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	c0 97       	sbiw	r24, 0x30	; 48
     e54:	82 95       	swap	r24
     e56:	92 95       	swap	r25
     e58:	90 7f       	andi	r25, 0xF0	; 240
     e5a:	98 27       	eor	r25, r24
     e5c:	80 7f       	andi	r24, 0xF0	; 240
     e5e:	98 27       	eor	r25, r24
     e60:	91 85       	ldd	r25, Z+9	; 0x09
     e62:	90 53       	subi	r25, 0x30	; 48
     e64:	89 2b       	or	r24, r25
     e66:	14 96       	adiw	r26, 0x04	; 4
     e68:	8c 93       	st	X, r24
     e6a:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     e6c:	25 81       	ldd	r18, Z+5	; 0x05
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	20 53       	subi	r18, 0x30	; 48
     e72:	31 09       	sbc	r19, r1
     e74:	22 95       	swap	r18
     e76:	32 95       	swap	r19
     e78:	30 7f       	andi	r19, 0xF0	; 240
     e7a:	32 27       	eor	r19, r18
     e7c:	20 7f       	andi	r18, 0xF0	; 240
     e7e:	32 27       	eor	r19, r18
     e80:	86 81       	ldd	r24, Z+6	; 0x06
     e82:	80 53       	subi	r24, 0x30	; 48
     e84:	28 2b       	or	r18, r24
     e86:	15 96       	adiw	r26, 0x05	; 5
     e88:	2c 93       	st	X, r18
     e8a:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     e8c:	22 81       	ldd	r18, Z+2	; 0x02
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	20 53       	subi	r18, 0x30	; 48
     e92:	31 09       	sbc	r19, r1
     e94:	22 95       	swap	r18
     e96:	32 95       	swap	r19
     e98:	30 7f       	andi	r19, 0xF0	; 240
     e9a:	32 27       	eor	r19, r18
     e9c:	20 7f       	andi	r18, 0xF0	; 240
     e9e:	32 27       	eor	r19, r18
     ea0:	83 81       	ldd	r24, Z+3	; 0x03
     ea2:	80 53       	subi	r24, 0x30	; 48
     ea4:	28 2b       	or	r18, r24
     ea6:	16 96       	adiw	r26, 0x06	; 6
     ea8:	2c 93       	st	X, r18
     eaa:	08 95       	ret

00000eac <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     eac:	ef 92       	push	r14
     eae:	ff 92       	push	r15
     eb0:	0f 93       	push	r16
     eb2:	1f 93       	push	r17
     eb4:	cf 93       	push	r28
     eb6:	7b 01       	movw	r14, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
     ebe:	c8 2f       	mov	r28, r24
     ec0:	83 36       	cpi	r24, 0x63	; 99
     ec2:	19 f4       	brne	.+6      	; 0xeca <read_DS3231+0x1e>
		stop_TWI();
     ec4:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(ERROR);
     ec8:	26 c0       	rjmp	.+76     	; 0xf16 <read_DS3231+0x6a>
    }  

	if (write_TWI(0x00) == ERROR) {	// Register 00h
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
     ed0:	c8 2f       	mov	r28, r24
     ed2:	83 36       	cpi	r24, 0x63	; 99
     ed4:	19 f4       	brne	.+6      	; 0xedc <read_DS3231+0x30>
		stop_TWI();
     ed6:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(ERROR);
     eda:	1d c0       	rjmp	.+58     	; 0xf16 <read_DS3231+0x6a>
	}

	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	88 e6       	ldi	r24, 0x68	; 104
     ee0:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
     ee4:	c8 2f       	mov	r28, r24
     ee6:	83 36       	cpi	r24, 0x63	; 99
     ee8:	61 f4       	brne	.+24     	; 0xf02 <read_DS3231+0x56>
		stop_TWI();
     eea:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(ERROR);
     eee:	13 c0       	rjmp	.+38     	; 0xf16 <read_DS3231+0x6a>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     ef0:	87 01       	movw	r16, r14
     ef2:	0c 0f       	add	r16, r28
     ef4:	11 1d       	adc	r17, r1
     ef6:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <read_TWI>
     efa:	f8 01       	movw	r30, r16
     efc:	80 83       	st	Z, r24
	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 6; i++) {
     efe:	cf 5f       	subi	r28, 0xFF	; 255
     f00:	01 c0       	rjmp	.+2      	; 0xf04 <read_DS3231+0x58>
     f02:	c0 e0       	ldi	r28, 0x00	; 0
     f04:	c6 30       	cpi	r28, 0x06	; 6
     f06:	a0 f3       	brcs	.-24     	; 0xef0 <read_DS3231+0x44>
		ds3231time[i] = read_TWI();
	}

	ds3231time[6] = readlast_TWI();
     f08:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <readlast_TWI>
     f0c:	f7 01       	movw	r30, r14
     f0e:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     f10:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>

	return(NOERROR);
     f14:	c0 e0       	ldi	r28, 0x00	; 0

}
     f16:	8c 2f       	mov	r24, r28
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	ff 90       	pop	r15
     f20:	ef 90       	pop	r14
     f22:	08 95       	ret

00000f24 <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     f24:	ef 92       	push	r14
     f26:	ff 92       	push	r15
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	27 97       	sbiw	r28, 0x07	; 7
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (read_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     f3a:	be 01       	movw	r22, r28
     f3c:	6f 5f       	subi	r22, 0xFF	; 255
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	88 e6       	ldi	r24, 0x68	; 104
     f42:	0e 94 56 07 	call	0xeac	; 0xeac <read_DS3231>
     f46:	18 2f       	mov	r17, r24
     f48:	83 36       	cpi	r24, 0x63	; 99
     f4a:	79 f4       	brne	.+30     	; 0xf6a <get_time+0x46>
		printError(ERR_GETTIME, "get_time DS3231");
     f4c:	6c e5       	ldi	r22, 0x5C	; 92
     f4e:	73 eb       	ldi	r23, 0xB3	; 179
     f50:	85 e6       	ldi	r24, 0x65	; 101
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		strcpy(isotime, "DateTime?");
     f58:	8a e0       	ldi	r24, 0x0A	; 10
     f5a:	ec e6       	ldi	r30, 0x6C	; 108
     f5c:	f3 eb       	ldi	r31, 0xB3	; 179
     f5e:	d7 01       	movw	r26, r14
     f60:	01 90       	ld	r0, Z+
     f62:	0d 92       	st	X+, r0
     f64:	8a 95       	dec	r24
     f66:	e1 f7       	brne	.-8      	; 0xf60 <get_time+0x3c>
		return(ERROR);
     f68:	07 c0       	rjmp	.+14     	; 0xf78 <get_time+0x54>
	}

	convert_ds2iso(isotime, ds3231time);
     f6a:	be 01       	movw	r22, r28
     f6c:	6f 5f       	subi	r22, 0xFF	; 255
     f6e:	7f 4f       	sbci	r23, 0xFF	; 255
     f70:	c7 01       	movw	r24, r14
     f72:	0e 94 bf 06 	call	0xd7e	; 0xd7e <convert_ds2iso>
	return(NOERROR);
     f76:	10 e0       	ldi	r17, 0x00	; 0

}
     f78:	81 2f       	mov	r24, r17
     f7a:	27 96       	adiw	r28, 0x07	; 7
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	de bf       	out	0x3e, r29	; 62
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	08 95       	ret

00000f8c <write_DS3231>:
	Returns:
		ERROR for TWI start error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	8b 01       	movw	r16, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
     fa0:	c8 2f       	mov	r28, r24
     fa2:	83 36       	cpi	r24, 0x63	; 99
     fa4:	19 f4       	brne	.+6      	; 0xfac <write_DS3231+0x20>
		stop_TWI();
     fa6:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(ERROR);
     faa:	20 c0       	rjmp	.+64     	; 0xfec <write_DS3231+0x60>
	}

	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
     fb2:	c8 2f       	mov	r28, r24
     fb4:	83 36       	cpi	r24, 0x63	; 99
     fb6:	a1 f4       	brne	.+40     	; 0xfe0 <write_DS3231+0x54>
		stop_TWI();
     fb8:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(ERROR);
     fbc:	17 c0       	rjmp	.+46     	; 0xfec <write_DS3231+0x60>
	}

	for (i = 0; i < 7; i++) {
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     fbe:	78 01       	movw	r14, r16
     fc0:	8f ef       	ldi	r24, 0xFF	; 255
     fc2:	e8 1a       	sub	r14, r24
     fc4:	f8 0a       	sbc	r15, r24
     fc6:	f8 01       	movw	r30, r16
     fc8:	80 81       	ld	r24, Z
     fca:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
     fce:	c8 2f       	mov	r28, r24
     fd0:	83 36       	cpi	r24, 0x63	; 99
     fd2:	19 f4       	brne	.+6      	; 0xfda <write_DS3231+0x4e>
			stop_TWI();
     fd4:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
			return(ERROR);
     fd8:	09 c0       	rjmp	.+18     	; 0xfec <write_DS3231+0x60>
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     fda:	df 5f       	subi	r29, 0xFF	; 255
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     fdc:	87 01       	movw	r16, r14
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <write_DS3231+0x56>
     fe0:	d0 e0       	ldi	r29, 0x00	; 0
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     fe2:	d7 30       	cpi	r29, 0x07	; 7
     fe4:	60 f3       	brcs	.-40     	; 0xfbe <write_DS3231+0x32>
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
			stop_TWI();
			return(ERROR);
		}
	}
	stop_TWI();
     fe6:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>

	return(NOERROR);
     fea:	c0 e0       	ldi	r28, 0x00	; 0

}
     fec:	8c 2f       	mov	r24, r28
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	08 95       	ret

00000ffc <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	27 97       	sbiw	r28, 0x07	; 7
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (check_isotime(isotime) == ERROR) {
    1012:	0e 94 40 05 	call	0xa80	; 0xa80 <check_isotime>
    1016:	18 2f       	mov	r17, r24
    1018:	83 36       	cpi	r24, 0x63	; 99
    101a:	39 f4       	brne	.+14     	; 0x102a <put_time+0x2e>
		printError(ERR_ISO, "put_time: check_isotime error");
    101c:	66 e7       	ldi	r22, 0x76	; 118
    101e:	73 eb       	ldi	r23, 0xB3	; 179
    1020:	8b e5       	ldi	r24, 0x5B	; 91
    1022:	92 e0       	ldi	r25, 0x02	; 2
    1024:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    1028:	16 c0       	rjmp	.+44     	; 0x1056 <put_time+0x5a>
	}
	convert_iso2ds(ds3231time, isotime);
    102a:	b7 01       	movw	r22, r14
    102c:	ce 01       	movw	r24, r28
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	0e 94 f6 06 	call	0xdec	; 0xdec <convert_iso2ds>
	if (write_DS3231(DS3231ADDR, ds3231time) == ERROR) {
    1034:	be 01       	movw	r22, r28
    1036:	6f 5f       	subi	r22, 0xFF	; 255
    1038:	7f 4f       	sbci	r23, 0xFF	; 255
    103a:	88 e6       	ldi	r24, 0x68	; 104
    103c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <write_DS3231>
    1040:	18 2f       	mov	r17, r24
    1042:	83 36       	cpi	r24, 0x63	; 99
    1044:	39 f4       	brne	.+14     	; 0x1054 <put_time+0x58>
		printError(ERR_PUTTIME, "put_time: write_DS3231 error");
    1046:	64 e9       	ldi	r22, 0x94	; 148
    1048:	73 eb       	ldi	r23, 0xB3	; 179
    104a:	86 e6       	ldi	r24, 0x66	; 102
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <put_time+0x5a>
	}
	return(NOERROR);
    1054:	10 e0       	ldi	r17, 0x00	; 0

}
    1056:	81 2f       	mov	r24, r17
    1058:	27 96       	adiw	r28, 0x07	; 7
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	08 95       	ret

0000106a <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
    106a:	45 e1       	ldi	r20, 0x15	; 21
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	6b e0       	ldi	r22, 0x0B	; 11
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	0e 94 d7 38 	call	0x71ae	; 0x71ae <eeprom_read_block>
    1076:	08 95       	ret

00001078 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
    1078:	4b e0       	ldi	r20, 0x0B	; 11
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	0e 94 d7 38 	call	0x71ae	; 0x71ae <eeprom_read_block>
    1084:	08 95       	ret

00001086 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	65 97       	sbiw	r28, 0x15	; 21
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
    1094:	ce 01       	movw	r24, r28
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
    109c:	45 e1       	ldi	r20, 0x15	; 21
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	6b e0       	ldi	r22, 0x0B	; 11
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	ce 01       	movw	r24, r28
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	0e 94 db 38 	call	0x71b6	; 0x71b6 <eeprom_update_block>

}
    10ac:	65 96       	adiw	r28, 0x15	; 21
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	de bf       	out	0x3e, r29	; 62
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	08 95       	ret

000010b8 <update_VERSION>:

void update_VERSION(void)
{
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	2b 97       	sbiw	r28, 0x0b	; 11
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
    10c6:	8b e0       	ldi	r24, 0x0B	; 11
    10c8:	e1 eb       	ldi	r30, 0xB1	; 177
    10ca:	f3 eb       	ldi	r31, 0xB3	; 179
    10cc:	de 01       	movw	r26, r28
    10ce:	11 96       	adiw	r26, 0x01	; 1
    10d0:	01 90       	ld	r0, Z+
    10d2:	0d 92       	st	X+, r0
    10d4:	8a 95       	dec	r24
    10d6:	e1 f7       	brne	.-8      	; 0x10d0 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
    10d8:	4b e0       	ldi	r20, 0x0B	; 11
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	ce 01       	movw	r24, r28
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	0e 94 db 38 	call	0x71b6	; 0x71b6 <eeprom_update_block>

}
    10e8:	2b 96       	adiw	r28, 0x0b	; 11
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

000010f4 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
    10f4:	0e 94 43 08 	call	0x1086	; 0x1086 <update_BOOTTIME>
	update_VERSION();
    10f8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <update_VERSION>
    10fc:	08 95       	ret

000010fe <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	c8 50       	subi	r28, 0x08	; 8
    110c:	d1 40       	sbci	r29, 0x01	; 1
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char errorFormat[] = "ERR,%d,%s";
    1112:	2a e0       	ldi	r18, 0x0A	; 10
    1114:	ec eb       	ldi	r30, 0xBC	; 188
    1116:	f3 eb       	ldi	r31, 0xB3	; 179
    1118:	de 01       	movw	r26, r28
    111a:	a1 50       	subi	r26, 0x01	; 1
    111c:	bf 4f       	sbci	r27, 0xFF	; 255
    111e:	01 90       	ld	r0, Z+
    1120:	0d 92       	st	X+, r0
    1122:	2a 95       	dec	r18
    1124:	e1 f7       	brne	.-8      	; 0x111e <printError+0x20>

	if (!squelchErrors) {
    1126:	20 91 0d 28 	lds	r18, 0x280D	; 0x80280d <squelchErrors>
    112a:	21 11       	cpse	r18, r1
    112c:	15 c0       	rjmp	.+42     	; 0x1158 <printError+0x5a>
		sprintf(strbuf, errorFormat, errorNumber, errorString);
    112e:	7f 93       	push	r23
    1130:	6f 93       	push	r22
    1132:	9f 93       	push	r25
    1134:	8f 93       	push	r24
    1136:	ce 01       	movw	r24, r28
    1138:	81 50       	subi	r24, 0x01	; 1
    113a:	9f 4f       	sbci	r25, 0xFF	; 255
    113c:	9f 93       	push	r25
    113e:	8f 93       	push	r24
    1140:	8e 01       	movw	r16, r28
    1142:	0f 5f       	subi	r16, 0xFF	; 255
    1144:	1f 4f       	sbci	r17, 0xFF	; 255
    1146:	1f 93       	push	r17
    1148:	0f 93       	push	r16
    114a:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
		printLine(strbuf);
    114e:	c8 01       	movw	r24, r16
    1150:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	de bf       	out	0x3e, r29	; 62
	}

}
    1158:	c8 5f       	subi	r28, 0xF8	; 248
    115a:	de 4f       	sbci	r29, 0xFE	; 254
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	08 95       	ret

0000116a <read_FRAM>:
	Returns:
		ERROR on start_TWI error (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
    116a:	cf 92       	push	r12
    116c:	df 92       	push	r13
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	d8 2f       	mov	r29, r24
    117c:	d6 2e       	mov	r13, r22
    117e:	07 2f       	mov	r16, r23
    1180:	7a 01       	movw	r14, r20
    1182:	12 2f       	mov	r17, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if (start_TWI(addr, TWIWRITE) == ERROR) {		// TWI start
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
    118a:	c8 2f       	mov	r28, r24
    118c:	83 36       	cpi	r24, 0x63	; 99
    118e:	19 f4       	brne	.+6      	; 0x1196 <read_FRAM+0x2c>
		stop_TWI();
    1190:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(ERROR);
    1194:	2e c0       	rjmp	.+92     	; 0x11f2 <read_FRAM+0x88>
	}

	if (write_TWI(memhigh) == ERROR) {			// Send memory address
    1196:	80 2f       	mov	r24, r16
    1198:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
    119c:	c8 2f       	mov	r28, r24
    119e:	83 36       	cpi	r24, 0x63	; 99
    11a0:	41 f1       	breq	.+80     	; 0x11f2 <read_FRAM+0x88>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {
    11a2:	8d 2d       	mov	r24, r13
    11a4:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
    11a8:	c8 2f       	mov	r28, r24
    11aa:	83 36       	cpi	r24, 0x63	; 99
    11ac:	11 f1       	breq	.+68     	; 0x11f2 <read_FRAM+0x88>
		return(ERROR);
	}

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
    11ae:	61 e0       	ldi	r22, 0x01	; 1
    11b0:	8d 2f       	mov	r24, r29
    11b2:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
    11b6:	c8 2f       	mov	r28, r24
    11b8:	83 36       	cpi	r24, 0x63	; 99
    11ba:	d9 f0       	breq	.+54     	; 0x11f2 <read_FRAM+0x88>
    11bc:	c0 e0       	ldi	r28, 0x00	; 0
    11be:	08 c0       	rjmp	.+16     	; 0x11d0 <read_FRAM+0x66>
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
    11c0:	67 01       	movw	r12, r14
    11c2:	cc 0e       	add	r12, r28
    11c4:	d1 1c       	adc	r13, r1
    11c6:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <read_TWI>
    11ca:	f6 01       	movw	r30, r12
    11cc:	80 83       	st	Z, r24

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
    11ce:	cf 5f       	subi	r28, 0xFF	; 255
    11d0:	2c 2f       	mov	r18, r28
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 2f       	mov	r24, r17
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	28 17       	cp	r18, r24
    11dc:	39 07       	cpc	r19, r25
    11de:	84 f3       	brlt	.-32     	; 0x11c0 <read_FRAM+0x56>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
    11e0:	ec 01       	movw	r28, r24
    11e2:	ce 0d       	add	r28, r14
    11e4:	df 1d       	adc	r29, r15
    11e6:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <readlast_TWI>
    11ea:	88 83       	st	Y, r24

	stop_TWI();
    11ec:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>

	return(NOERROR);
    11f0:	c0 e0       	ldi	r28, 0x00	; 0

}
    11f2:	8c 2f       	mov	r24, r28
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	ff 90       	pop	r15
    11fe:	ef 90       	pop	r14
    1200:	df 90       	pop	r13
    1202:	cf 90       	pop	r12
    1204:	08 95       	ret

00001206 <get_SETTIME>:
	Input: None
	Output: The data from FRAM, presumably containing the time
	Returns: ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t get_SETTIME(char *lastsettime)
{
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	2a 97       	sbiw	r28, 0x0a	; 10
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	7c 01       	movw	r14, r24

	const char timeset[] = "Time Set?";
    121c:	8a e0       	ldi	r24, 0x0A	; 10
    121e:	e6 ec       	ldi	r30, 0xC6	; 198
    1220:	f3 eb       	ldi	r31, 0xB3	; 179
    1222:	de 01       	movw	r26, r28
    1224:	11 96       	adiw	r26, 0x01	; 1
    1226:	01 90       	ld	r0, Z+
    1228:	0d 92       	st	X+, r0
    122a:	8a 95       	dec	r24
    122c:	e1 f7       	brne	.-8      	; 0x1226 <get_SETTIME+0x20>
	if (read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, ISOTIMELEN) == ERROR) {;
    122e:	24 e1       	ldi	r18, 0x14	; 20
    1230:	a7 01       	movw	r20, r14
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	80 e5       	ldi	r24, 0x50	; 80
    1238:	0e 94 b5 08 	call	0x116a	; 0x116a <read_FRAM>
    123c:	18 2f       	mov	r17, r24
    123e:	83 36       	cpi	r24, 0x63	; 99
    1240:	39 f4       	brne	.+14     	; 0x1250 <get_SETTIME+0x4a>
		strcpy(lastsettime, timeset);
    1242:	be 01       	movw	r22, r28
    1244:	6f 5f       	subi	r22, 0xFF	; 255
    1246:	7f 4f       	sbci	r23, 0xFF	; 255
    1248:	c7 01       	movw	r24, r14
    124a:	0e 94 ec 37 	call	0x6fd8	; 0x6fd8 <strcpy>
		return(ERROR);
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <get_SETTIME+0x4c>
	}
	return(NOERROR);
    1250:	10 e0       	ldi	r17, 0x00	; 0
}
    1252:	81 2f       	mov	r24, r17
    1254:	2a 96       	adiw	r28, 0x0a	; 10
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	1f 91       	pop	r17
    1260:	ff 90       	pop	r15
    1262:	ef 90       	pop	r14
    1264:	08 95       	ret

00001266 <write_FRAM>:
	Returns:
		ERROR if start_TWI fails (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	f6 2e       	mov	r15, r22
    1274:	17 2f       	mov	r17, r23
    1276:	ea 01       	movw	r28, r20
    1278:	02 2f       	mov	r16, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if (start_TWI(addr, TWIWRITE) == ERROR) {	// TWI START
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
    1280:	83 36       	cpi	r24, 0x63	; 99
    1282:	e1 f0       	breq	.+56     	; 0x12bc <write_FRAM+0x56>
		return(ERROR);
	}

	if (write_TWI(memhigh) == ERROR) {			// FRAM address to write
    1284:	81 2f       	mov	r24, r17
    1286:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
    128a:	83 36       	cpi	r24, 0x63	; 99
    128c:	b9 f0       	breq	.+46     	; 0x12bc <write_FRAM+0x56>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
    128e:	8f 2d       	mov	r24, r15
    1290:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
    1294:	83 36       	cpi	r24, 0x63	; 99
    1296:	91 f0       	breq	.+36     	; 0x12bc <write_FRAM+0x56>
    1298:	10 e0       	ldi	r17, 0x00	; 0
    129a:	0b c0       	rjmp	.+22     	; 0x12b2 <write_FRAM+0x4c>
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    129c:	7e 01       	movw	r14, r28
    129e:	8f ef       	ldi	r24, 0xFF	; 255
    12a0:	e8 1a       	sub	r14, r24
    12a2:	f8 0a       	sbc	r15, r24
    12a4:	88 81       	ld	r24, Y
    12a6:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
    12aa:	83 36       	cpi	r24, 0x63	; 99
    12ac:	39 f0       	breq	.+14     	; 0x12bc <write_FRAM+0x56>
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    12ae:	1f 5f       	subi	r17, 0xFF	; 255
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    12b0:	e7 01       	movw	r28, r14
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    12b2:	10 17       	cp	r17, r16
    12b4:	98 f3       	brcs	.-26     	; 0x129c <write_FRAM+0x36>
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
			return(ERROR);
		}
	}

	stop_TWI();
    12b6:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>

	return(NOERROR);
    12ba:	80 e0       	ldi	r24, 0x00	; 0

}
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	ef 90       	pop	r14
    12c8:	08 95       	ret

000012ca <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor, float temperature)
{
    12ca:	8f 92       	push	r8
    12cc:	9f 92       	push	r9
    12ce:	af 92       	push	r10
    12d0:	bf 92       	push	r11
    12d2:	cf 92       	push	r12
    12d4:	df 92       	push	r13
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <get_humidity+0x1a>
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <get_humidity+0x1c>
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	6a 01       	movw	r12, r20
    12ec:	7b 01       	movw	r14, r22

	uint8_t adcpin;
	float voltage, humidity;

	switch (sensor) {
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	91 f0       	breq	.+36     	; 0x1316 <get_humidity+0x4c>
    12f2:	18 f0       	brcs	.+6      	; 0x12fa <get_humidity+0x30>
    12f4:	82 30       	cpi	r24, 0x02	; 2
    12f6:	19 f0       	breq	.+6      	; 0x12fe <get_humidity+0x34>
    12f8:	04 c0       	rjmp	.+8      	; 0x1302 <get_humidity+0x38>
		case 0:
			adcpin = AIN0;		// production
    12fa:	40 e4       	ldi	r20, 0x40	; 64
    12fc:	0d c0       	rjmp	.+26     	; 0x1318 <get_humidity+0x4e>
		case 1:
			adcpin = AIN1;
			break;

		case 2:
			adcpin = AIN2;
    12fe:	40 e6       	ldi	r20, 0x60	; 96
			break;
    1300:	0b c0       	rjmp	.+22     	; 0x1318 <get_humidity+0x4e>

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
    1302:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
    1304:	0f 2e       	mov	r0, r31
    1306:	c1 2c       	mov	r12, r1
    1308:	d1 2c       	mov	r13, r1
    130a:	f0 ea       	ldi	r31, 0xA0	; 160
    130c:	ef 2e       	mov	r14, r31
    130e:	f1 e4       	ldi	r31, 0x41	; 65
    1310:	ff 2e       	mov	r15, r31
    1312:	f0 2d       	mov	r31, r0
			break;
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <get_humidity+0x4e>
		case 0:
			adcpin = AIN0;		// production
			break;

		case 1:
			adcpin = AIN1;
    1316:	40 e5       	ldi	r20, 0x50	; 80
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
    1318:	8e 01       	movw	r16, r28
    131a:	0f 5f       	subi	r16, 0xFF	; 255
    131c:	1f 4f       	sbci	r17, 0xFF	; 255
    131e:	20 e8       	ldi	r18, 0x80	; 128
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	88 e4       	ldi	r24, 0x48	; 72
    1324:	0e 94 cb 01 	call	0x396	; 0x396 <read_ADS1115>
    1328:	83 36       	cpi	r24, 0x63	; 99
    132a:	89 f1       	breq	.+98     	; 0x138e <get_humidity+0xc4>
		humidity = BADFLOAT;
	}
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	40 ea       	ldi	r20, 0xA0	; 160
    1332:	50 e4       	ldi	r21, 0x40	; 64
    1334:	69 81       	ldd	r22, Y+1	; 0x01
    1336:	7a 81       	ldd	r23, Y+2	; 0x02
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	9c 81       	ldd	r25, Y+4	; 0x04
    133c:	0e 94 bb 30 	call	0x6176	; 0x6176 <__divsf3>
    1340:	2a e0       	ldi	r18, 0x0A	; 10
    1342:	37 ed       	ldi	r19, 0xD7	; 215
    1344:	43 e2       	ldi	r20, 0x23	; 35
    1346:	5e e3       	ldi	r21, 0x3E	; 62
    1348:	0e 94 49 30 	call	0x6092	; 0x6092 <__subsf3>
    134c:	2f e5       	ldi	r18, 0x5F	; 95
    134e:	39 e2       	ldi	r19, 0x29	; 41
    1350:	4b ec       	ldi	r20, 0xCB	; 203
    1352:	5b e3       	ldi	r21, 0x3B	; 59
    1354:	0e 94 bb 30 	call	0x6176	; 0x6176 <__divsf3>
    1358:	4b 01       	movw	r8, r22
    135a:	5c 01       	movw	r10, r24
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
    135c:	29 ec       	ldi	r18, 0xC9	; 201
    135e:	3e e8       	ldi	r19, 0x8E	; 142
    1360:	4d e0       	ldi	r20, 0x0D	; 13
    1362:	5b e3       	ldi	r21, 0x3B	; 59
    1364:	c7 01       	movw	r24, r14
    1366:	b6 01       	movw	r22, r12
    1368:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
    136c:	9b 01       	movw	r18, r22
    136e:	ac 01       	movw	r20, r24
    1370:	62 e2       	ldi	r22, 0x22	; 34
    1372:	7d ef       	ldi	r23, 0xFD	; 253
    1374:	86 e8       	ldi	r24, 0x86	; 134
    1376:	9f e3       	ldi	r25, 0x3F	; 63
    1378:	0e 94 49 30 	call	0x6092	; 0x6092 <__subsf3>
    137c:	9b 01       	movw	r18, r22
    137e:	ac 01       	movw	r20, r24
    1380:	c5 01       	movw	r24, r10
    1382:	b4 01       	movw	r22, r8
    1384:	0e 94 bb 30 	call	0x6176	; 0x6176 <__divsf3>
    1388:	6b 01       	movw	r12, r22
    138a:	7c 01       	movw	r14, r24
    138c:	09 c0       	rjmp	.+18     	; 0x13a0 <get_humidity+0xd6>
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
		humidity = BADFLOAT;
    138e:	0f 2e       	mov	r0, r31
    1390:	c1 2c       	mov	r12, r1
    1392:	f0 e8       	ldi	r31, 0x80	; 128
    1394:	df 2e       	mov	r13, r31
    1396:	f6 e2       	ldi	r31, 0x26	; 38
    1398:	ef 2e       	mov	r14, r31
    139a:	f4 ec       	ldi	r31, 0xC4	; 196
    139c:	ff 2e       	mov	r15, r31
    139e:	f0 2d       	mov	r31, r0
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
	}

	if (humidity < 0.0) {
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	a9 01       	movw	r20, r18
    13a6:	c7 01       	movw	r24, r14
    13a8:	b6 01       	movw	r22, r12
    13aa:	0e 94 b6 30 	call	0x616c	; 0x616c <__cmpsf2>
    13ae:	88 23       	and	r24, r24
    13b0:	4c f4       	brge	.+18     	; 0x13c4 <get_humidity+0xfa>
		humidity = BADFLOAT;
    13b2:	0f 2e       	mov	r0, r31
    13b4:	c1 2c       	mov	r12, r1
    13b6:	f0 e8       	ldi	r31, 0x80	; 128
    13b8:	df 2e       	mov	r13, r31
    13ba:	f6 e2       	ldi	r31, 0x26	; 38
    13bc:	ef 2e       	mov	r14, r31
    13be:	f4 ec       	ldi	r31, 0xC4	; 196
    13c0:	ff 2e       	mov	r15, r31
    13c2:	f0 2d       	mov	r31, r0
	}

	return(humidity);

}
    13c4:	c7 01       	movw	r24, r14
    13c6:	b6 01       	movw	r22, r12
    13c8:	24 96       	adiw	r28, 0x04	; 4
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	de bf       	out	0x3e, r29	; 62
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	df 90       	pop	r13
    13dc:	cf 90       	pop	r12
    13de:	bf 90       	pop	r11
    13e0:	af 90       	pop	r10
    13e2:	9f 90       	pop	r9
    13e4:	8f 90       	pop	r8
    13e6:	08 95       	ret

000013e8 <initialize>:
#include "initialize.h"

uint8_t rebootackd;

void initialize(void)
{
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	2b 97       	sbiw	r28, 0x0b	; 11
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	rebootackd = NO;
    13f6:	10 92 0e 28 	sts	0x280E, r1	; 0x80280e <rebootackd>
	timerOLED = 0;					// See oled.h
    13fa:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    13fe:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display; fast until !
    1402:	80 ee       	ldi	r24, 0xE0	; 224
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
    140a:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>

	init_PORTS();
    140e:	0e 94 0e 11 	call	0x221c	; 0x221c <init_PORTS>
	init_TWI();
    1412:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <init_TWI>
	init_PNEU();
    1416:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <init_PNEU>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
    141a:	80 e2       	ldi	r24, 0x20	; 32
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 3f 2c 	call	0x587e	; 0x587e <init_RTC>
	init_MMA8451();	// Accelerometer; needs TWI
    1422:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <init_MMA8451>
	init_OLED();	// Needs TWI
    1426:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <init_OLED>
	init_EEPROM();	// Needs TWI to get boot time from clock
    142a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <init_EEPROM>
	init_USART();
    142e:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <init_USART>
//	start_TCB0(1);	// 1 ms ticks for TWI & USART timeouts
	sei();
    1432:	78 94       	sei
	init_MOTORS();	// Needs USART & interrupts on
    1434:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <init_MOTORS>
	get_VERSION(versionstr);
    1438:	ce 01       	movw	r24, r28
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_VERSION>
	writestr_OLED(0,"specMech Version", 1);
    1440:	41 e0       	ldi	r20, 0x01	; 1
    1442:	60 ed       	ldi	r22, 0xD0	; 208
    1444:	73 eb       	ldi	r23, 0xB3	; 179
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
	writestr_OLED(0, versionstr, 2);
    144c:	42 e0       	ldi	r20, 0x02	; 2
    144e:	be 01       	movw	r22, r28
    1450:	6f 5f       	subi	r22, 0xFF	; 255
    1452:	7f 4f       	sbci	r23, 0xFF	; 255
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
	beeper(".... ..");
    145a:	81 ee       	ldi	r24, 0xE1	; 225
    145c:	93 eb       	ldi	r25, 0xB3	; 179
    145e:	0e 94 b6 02 	call	0x56c	; 0x56c <beeper>

}
    1462:	2b 96       	adiw	r28, 0x0b	; 11
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	08 95       	ret

0000146e <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
    146e:	0f 93       	push	r16
    1470:	1f 93       	push	r17
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	00 d0       	rcall	.+0      	; 0x1478 <read_ionpump+0xa>
    1478:	00 d0       	rcall	.+0      	; 0x147a <read_ionpump+0xc>
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	21 f0       	breq	.+8      	; 0x148a <read_ionpump+0x1c>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
    1482:	82 30       	cpi	r24, 0x02	; 2
    1484:	11 f5       	brne	.+68     	; 0x14ca <read_ionpump+0x5c>
		pins = AIN23;
    1486:	40 e3       	ldi	r20, 0x30	; 48
    1488:	01 c0       	rjmp	.+2      	; 0x148c <read_ionpump+0x1e>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
    148a:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(BADFLOAT);
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
    148c:	8e 01       	movw	r16, r28
    148e:	0f 5f       	subi	r16, 0xFF	; 255
    1490:	1f 4f       	sbci	r17, 0xFF	; 255
    1492:	20 e8       	ldi	r18, 0x80	; 128
    1494:	62 e0       	ldi	r22, 0x02	; 2
    1496:	89 e4       	ldi	r24, 0x49	; 73
    1498:	0e 94 cb 01 	call	0x396	; 0x396 <read_ADS1115>
    149c:	83 36       	cpi	r24, 0x63	; 99
    149e:	d1 f0       	breq	.+52     	; 0x14d4 <read_ionpump+0x66>
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
		return(BADFLOAT);
	}
*/
	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    14a0:	27 ea       	ldi	r18, 0xA7	; 167
    14a2:	38 ee       	ldi	r19, 0xE8	; 232
    14a4:	42 e0       	ldi	r20, 0x02	; 2
    14a6:	50 e4       	ldi	r21, 0x40	; 64
    14a8:	69 81       	ldd	r22, Y+1	; 0x01
    14aa:	7a 81       	ldd	r23, Y+2	; 0x02
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
    14b4:	2d ea       	ldi	r18, 0xAD	; 173
    14b6:	33 ea       	ldi	r19, 0xA3	; 163
    14b8:	4b ed       	ldi	r20, 0xDB	; 219
    14ba:	50 e4       	ldi	r21, 0x40	; 64
    14bc:	0e 94 49 30 	call	0x6092	; 0x6092 <__subsf3>
	return(vacuum);
    14c0:	56 2f       	mov	r21, r22
    14c2:	47 2f       	mov	r20, r23
    14c4:	38 2f       	mov	r19, r24
    14c6:	29 2f       	mov	r18, r25
    14c8:	09 c0       	rjmp	.+18     	; 0x14dc <read_ionpump+0x6e>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(BADFLOAT);
    14ca:	50 e0       	ldi	r21, 0x00	; 0
    14cc:	40 e8       	ldi	r20, 0x80	; 128
    14ce:	36 e2       	ldi	r19, 0x26	; 38
    14d0:	24 ec       	ldi	r18, 0xC4	; 196
    14d2:	04 c0       	rjmp	.+8      	; 0x14dc <read_ionpump+0x6e>
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
		return(BADFLOAT);
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	40 e8       	ldi	r20, 0x80	; 128
    14d8:	36 e2       	ldi	r19, 0x26	; 38
    14da:	24 ec       	ldi	r18, 0xC4	; 196
	}
*/
	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
    14dc:	65 2f       	mov	r22, r21
    14de:	74 2f       	mov	r23, r20
    14e0:	83 2f       	mov	r24, r19
    14e2:	92 2f       	mov	r25, r18
    14e4:	24 96       	adiw	r28, 0x04	; 4
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	08 95       	ret

000014f4 <get_ln2>:
#include "globals.h"
#include "ln2.h"

uint8_t get_ln2(uint8_t *ln2status)
{
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	c5 56       	subi	r28, 0x65	; 101
    1502:	d1 09       	sbc	r29, r1
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	8c 01       	movw	r16, r24

	char strbuf[80];
	const char fmt0[] = "LN2 response timeout";
    150a:	85 e1       	ldi	r24, 0x15	; 21
    150c:	e9 ee       	ldi	r30, 0xE9	; 233
    150e:	f3 eb       	ldi	r31, 0xB3	; 179
    1510:	de 01       	movw	r26, r28
    1512:	af 5a       	subi	r26, 0xAF	; 175
    1514:	bf 4f       	sbci	r27, 0xFF	; 255
    1516:	01 90       	ld	r0, Z+
    1518:	0d 92       	st	X+, r0
    151a:	8a 95       	dec	r24
    151c:	e1 f7       	brne	.-8      	; 0x1516 <get_ln2+0x22>

	recv3_buf.nxfrd = 0;
    151e:	10 92 4f 30 	sts	0x304F, r1	; 0x80304f <recv3_buf+0x100>
	recv3_buf.done = NO;
    1522:	10 92 4e 30 	sts	0x304E, r1	; 0x80304e <recv3_buf+0xff>

	send3_buf.nbytes = 1;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	80 93 4e 31 	sts	0x314E, r24	; 0x80314e <send3_buf+0xfe>
	send3_buf.data[0] = '\r';
    152c:	8d e0       	ldi	r24, 0x0D	; 13
    152e:	80 93 50 30 	sts	0x3050, r24	; 0x803050 <send3_buf>
	send_USART(3, send3_buf.data, 1);
    1532:	41 e0       	ldi	r20, 0x01	; 1
    1534:	60 e5       	ldi	r22, 0x50	; 80
    1536:	70 e3       	ldi	r23, 0x30	; 48
    1538:	83 e0       	ldi	r24, 0x03	; 3
    153a:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <send_USART>

	USART3_ticks = 0;
    153e:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <USART3_ticks>
    1542:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <USART3_ticks+0x1>
	while (recv3_buf.done == NO) {
    1546:	1e c0       	rjmp	.+60     	; 0x1584 <get_ln2+0x90>
		if (USART3_ticks > 4000) {
    1548:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <USART3_ticks>
    154c:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <USART3_ticks+0x1>
    1550:	81 3a       	cpi	r24, 0xA1	; 161
    1552:	9f 40       	sbci	r25, 0x0F	; 15
    1554:	b8 f0       	brcs	.+46     	; 0x1584 <get_ln2+0x90>
			sprintf(strbuf, fmt0);
    1556:	ce 01       	movw	r24, r28
    1558:	8f 5a       	subi	r24, 0xAF	; 175
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	9f 93       	push	r25
    155e:	8f 93       	push	r24
    1560:	8e 01       	movw	r16, r28
    1562:	0f 5f       	subi	r16, 0xFF	; 255
    1564:	1f 4f       	sbci	r17, 0xFF	; 255
    1566:	1f 93       	push	r17
    1568:	0f 93       	push	r16
    156a:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			printError(ERR_LN2, strbuf);
    156e:	b8 01       	movw	r22, r16
    1570:	8d eb       	ldi	r24, 0xBD	; 189
    1572:	92 e0       	ldi	r25, 0x02	; 2
    1574:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			return(ERROR);
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	83 e6       	ldi	r24, 0x63	; 99
    1582:	0a c0       	rjmp	.+20     	; 0x1598 <get_ln2+0xa4>
	send3_buf.nbytes = 1;
	send3_buf.data[0] = '\r';
	send_USART(3, send3_buf.data, 1);

	USART3_ticks = 0;
	while (recv3_buf.done == NO) {
    1584:	80 91 4e 30 	lds	r24, 0x304E	; 0x80304e <recv3_buf+0xff>
    1588:	88 23       	and	r24, r24
    158a:	f1 f2       	breq	.-68     	; 0x1548 <get_ln2+0x54>
			printError(ERR_LN2, strbuf);
			return(ERROR);
		}
	}

	strcpy((char*) ln2status, (char*) recv3_buf.data);
    158c:	6f e4       	ldi	r22, 0x4F	; 79
    158e:	7f e2       	ldi	r23, 0x2F	; 47
    1590:	c8 01       	movw	r24, r16
    1592:	0e 94 ec 37 	call	0x6fd8	; 0x6fd8 <strcpy>
	return(NOERROR);
    1596:	80 e0       	ldi	r24, 0x00	; 0

    1598:	cb 59       	subi	r28, 0x9B	; 155
    159a:	df 4f       	sbci	r29, 0xFF	; 255
    159c:	cd bf       	out	0x3d, r28	; 61
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	1f 91       	pop	r17
    15a6:	0f 91       	pop	r16
    15a8:	08 95       	ret

000015aa <main>:
uint8_t firstpass;

int main(void)
{

	firstpass = YES;		// Set to NO in commands.c
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	80 93 17 2a 	sts	0x2A17, r24	; 0x802a17 <firstpass>
	squelchErrors = YES;
    15b0:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <squelchErrors>

	CPU_CCP = CCP_IOREG_gc;
    15b4:	98 ed       	ldi	r25, 0xD8	; 216
    15b6:	94 bf       	out	0x34, r25	; 52
	CLKCTRL.MCLKCTRLB = CLKCTRL_PDIV_2X_gc | CLKCTRL_PEN_bm;
    15b8:	e0 e6       	ldi	r30, 0x60	; 96
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	81 83       	std	Z+1, r24	; 0x01
	CLKCTRL.MCLKCTRLB = CLKCTRL_LOCKEN_bm;
    15be:	81 83       	std	Z+1, r24	; 0x01

	initialize();
    15c0:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <initialize>
	squelchErrors = NO;
    15c4:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <squelchErrors>

	for (;;) {
		if (recv0_buf.done) {
    15c8:	80 91 4a 2e 	lds	r24, 0x2E4A	; 0x802e4a <recv0_buf+0x103>
    15cc:	88 23       	and	r24, r24
    15ce:	21 f0       	breq	.+8      	; 0x15d8 <main+0x2e>
			recv0_buf.done = NO;
    15d0:	10 92 4a 2e 	sts	0x2E4A, r1	; 0x802e4a <recv0_buf+0x103>
			commands();
    15d4:	0e 94 aa 04 	call	0x954	; 0x954 <commands>
		}

		if (timerOLED > timeoutOLED) {	// Display timeout
    15d8:	20 91 18 2a 	lds	r18, 0x2A18	; 0x802a18 <timerOLED>
    15dc:	30 91 19 2a 	lds	r19, 0x2A19	; 0x802a19 <timerOLED+0x1>
    15e0:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <timeoutOLED>
    15e4:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <timeoutOLED+0x1>
    15e8:	82 17       	cp	r24, r18
    15ea:	93 07       	cpc	r25, r19
    15ec:	78 f4       	brcc	.+30     	; 0x160c <main+0x62>
			squelchErrors = YES;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <squelchErrors>
			clear_OLED(0);
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <clear_OLED>
			clear_OLED(1);
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <clear_OLED>
			timerOLED = 0;
    1600:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    1604:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>
			squelchErrors = NO;
    1608:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <squelchErrors>
		}

		if ((timerSAVEENCODER > timeoutSAVEENCODER) && rebootackd) {
    160c:	90 91 3c 2a 	lds	r25, 0x2A3C	; 0x802a3c <timerSAVEENCODER>
    1610:	80 91 3b 2a 	lds	r24, 0x2A3B	; 0x802a3b <timeoutSAVEENCODER>
    1614:	89 17       	cp	r24, r25
    1616:	c0 f6       	brcc	.-80     	; 0x15c8 <main+0x1e>
    1618:	80 91 0e 28 	lds	r24, 0x280E	; 0x80280e <rebootackd>
    161c:	88 23       	and	r24, r24
    161e:	a1 f2       	breq	.-88     	; 0x15c8 <main+0x1e>
			squelchErrors = YES;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	80 93 0d 28 	sts	0x280D, r24	; 0x80280d <squelchErrors>
			put_FRAM_ENCODERS();	// Maybe set a global error variable?
    1626:	0e 94 9e 21 	call	0x433c	; 0x433c <put_FRAM_ENCODERS>
			timerSAVEENCODER = 0;
    162a:	10 92 3c 2a 	sts	0x2A3C, r1	; 0x802a3c <timerSAVEENCODER>
			squelchErrors = NO;
    162e:	10 92 0d 28 	sts	0x280D, r1	; 0x80280d <squelchErrors>
    1632:	ca cf       	rjmp	.-108    	; 0x15c8 <main+0x1e>

00001634 <read_MCP23008>:
	Returns:
		ERROR if TWI error
		NOERROR Otherwise
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	c8 2f       	mov	r28, r24
    163a:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
    1642:	83 36       	cpi	r24, 0x63	; 99
    1644:	51 f4       	brne	.+20     	; 0x165a <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 read error");
    1646:	6e ef       	ldi	r22, 0xFE	; 254
    1648:	73 eb       	ldi	r23, 0xB3	; 179
    164a:	82 e9       	ldi	r24, 0x92	; 146
    164c:	91 e0       	ldi	r25, 0x01	; 1
    164e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		stop_TWI();
    1652:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(0xFF);
    1656:	8f ef       	ldi	r24, 0xFF	; 255
    1658:	19 c0       	rjmp	.+50     	; 0x168c <read_MCP23008+0x58>
	}
	write_TWI(reg);
    165a:	8d 2f       	mov	r24, r29
    165c:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
	if (start_TWI(addr, TWIREAD) == ERROR) {
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	8c 2f       	mov	r24, r28
    1664:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
    1668:	83 36       	cpi	r24, 0x63	; 99
    166a:	51 f4       	brne	.+20     	; 0x1680 <read_MCP23008+0x4c>
		printError(ERR_MCP23008, "MCP23008 read error");
    166c:	6e ef       	ldi	r22, 0xFE	; 254
    166e:	73 eb       	ldi	r23, 0xB3	; 179
    1670:	82 e9       	ldi	r24, 0x92	; 146
    1672:	91 e0       	ldi	r25, 0x01	; 1
    1674:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		stop_TWI();
    1678:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(0xFF);
    167c:	8f ef       	ldi	r24, 0xFF	; 255
    167e:	06 c0       	rjmp	.+12     	; 0x168c <read_MCP23008+0x58>
	}
	value = readlast_TWI();
    1680:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <readlast_TWI>
    1684:	c8 2f       	mov	r28, r24
	stop_TWI();
    1686:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
	return(value);
    168a:	8c 2f       	mov	r24, r28

}
    168c:	df 91       	pop	r29
    168e:	cf 91       	pop	r28
    1690:	08 95       	ret

00001692 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	d6 2f       	mov	r29, r22
    169a:	14 2f       	mov	r17, r20

	uint8_t retval;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
    16a2:	c8 2f       	mov	r28, r24
    16a4:	83 36       	cpi	r24, 0x63	; 99
    16a6:	49 f4       	brne	.+18     	; 0x16ba <write_MCP23008+0x28>
		printError(ERR_MCP23008, "MCP23008 write error");
    16a8:	62 e1       	ldi	r22, 0x12	; 18
    16aa:	74 eb       	ldi	r23, 0xB4	; 180
    16ac:	82 e9       	ldi	r24, 0x92	; 146
    16ae:	91 e0       	ldi	r25, 0x01	; 1
    16b0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		stop_TWI();
    16b4:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(ERROR);
    16b8:	15 c0       	rjmp	.+42     	; 0x16e4 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(reg))) {
    16ba:	8d 2f       	mov	r24, r29
    16bc:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
    16c0:	88 23       	and	r24, r24
    16c2:	21 f0       	breq	.+8      	; 0x16cc <write_MCP23008+0x3a>
		stop_TWI();
    16c4:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(ERROR);
    16c8:	c3 e6       	ldi	r28, 0x63	; 99
    16ca:	0c c0       	rjmp	.+24     	; 0x16e4 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(val))) {
    16cc:	81 2f       	mov	r24, r17
    16ce:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
    16d2:	88 23       	and	r24, r24
    16d4:	21 f0       	breq	.+8      	; 0x16de <write_MCP23008+0x4c>
		stop_TWI();
    16d6:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(ERROR);
    16da:	c3 e6       	ldi	r28, 0x63	; 99
    16dc:	03 c0       	rjmp	.+6      	; 0x16e4 <write_MCP23008+0x52>
	}
	stop_TWI();
    16de:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
	return(NOERROR);
    16e2:	c0 e0       	ldi	r28, 0x00	; 0
	
}
    16e4:	8c 2f       	mov	r24, r28
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	08 95       	ret

000016ee <read_MCP9808>:
#include "errors.h"
#include "mcp9808.h"
#include "twi.h"

uint8_t read_MCP9808(float *temperature)
{
    16ee:	8f 92       	push	r8
    16f0:	9f 92       	push	r9
    16f2:	af 92       	push	r10
    16f4:	bf 92       	push	r11
    16f6:	ff 92       	push	r15
    16f8:	0f 93       	push	r16
    16fa:	1f 93       	push	r17
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	8c 01       	movw	r16, r24

	uint8_t highbyte, lowbyte, sign;
	float temp;

	if (start_TWI(MCP9808ADDR, TWIWRITE) == ERROR) {
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	88 e1       	ldi	r24, 0x18	; 24
    1706:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
    170a:	83 36       	cpi	r24, 0x63	; 99
    170c:	51 f4       	brne	.+20     	; 0x1722 <read_MCP9808+0x34>
		*temperature = BADFLOAT;
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	50 e8       	ldi	r21, 0x80	; 128
    1712:	66 e2       	ldi	r22, 0x26	; 38
    1714:	74 ec       	ldi	r23, 0xC4	; 196
    1716:	f8 01       	movw	r30, r16
    1718:	40 83       	st	Z, r20
    171a:	51 83       	std	Z+1, r21	; 0x01
    171c:	62 83       	std	Z+2, r22	; 0x02
    171e:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    1720:	43 c0       	rjmp	.+134    	; 0x17a8 <read_MCP9808+0xba>
	}
	write_TWI(TEMPREGISTER);
    1722:	85 e0       	ldi	r24, 0x05	; 5
    1724:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    1728:	61 e0       	ldi	r22, 0x01	; 1
    172a:	88 e1       	ldi	r24, 0x18	; 24
    172c:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
	highbyte = read_TWI();
    1730:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <read_TWI>
    1734:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    1736:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <readlast_TWI>
    173a:	d8 2f       	mov	r29, r24
	stop_TWI();
    173c:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1740:	fc 2f       	mov	r31, r28
    1742:	f0 71       	andi	r31, 0x10	; 16
    1744:	ff 2e       	mov	r15, r31
	highbyte &= 0x0F;					// Clear threshold & sign bits
    1746:	6c 2f       	mov	r22, r28
    1748:	6f 70       	andi	r22, 0x0F	; 15
	temp = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e 94 63 31 	call	0x62c6	; 0x62c6 <__floatunsisf>
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e8       	ldi	r20, 0x80	; 128
    175a:	51 e4       	ldi	r21, 0x41	; 65
    175c:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
    1760:	4b 01       	movw	r8, r22
    1762:	5c 01       	movw	r10, r24
    1764:	6d 2f       	mov	r22, r29
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 63 31 	call	0x62c6	; 0x62c6 <__floatunsisf>
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e8       	ldi	r20, 0x80	; 128
    1776:	5d e3       	ldi	r21, 0x3D	; 61
    1778:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
    177c:	9b 01       	movw	r18, r22
    177e:	ac 01       	movw	r20, r24
    1780:	c5 01       	movw	r24, r10
    1782:	b4 01       	movw	r22, r8
    1784:	0e 94 4a 30 	call	0x6094	; 0x6094 <__addsf3>
	if (sign) {
    1788:	ff 20       	and	r15, r15
    178a:	41 f0       	breq	.+16     	; 0x179c <read_MCP9808+0xae>
		temp = 256.0 - temp;
    178c:	9b 01       	movw	r18, r22
    178e:	ac 01       	movw	r20, r24
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	80 e8       	ldi	r24, 0x80	; 128
    1796:	93 e4       	ldi	r25, 0x43	; 67
    1798:	0e 94 49 30 	call	0x6092	; 0x6092 <__subsf3>
	}
	*temperature = temp;
    179c:	f8 01       	movw	r30, r16
    179e:	60 83       	st	Z, r22
    17a0:	71 83       	std	Z+1, r23	; 0x01
    17a2:	82 83       	std	Z+2, r24	; 0x02
    17a4:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    17a6:	80 e0       	ldi	r24, 0x00	; 0
}
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	ff 90       	pop	r15
    17b2:	bf 90       	pop	r11
    17b4:	af 90       	pop	r10
    17b6:	9f 90       	pop	r9
    17b8:	8f 90       	pop	r8
    17ba:	08 95       	ret

000017bc <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    17bc:	ef 92       	push	r14
    17be:	ff 92       	push	r15
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	f8 2e       	mov	r15, r24
    17ca:	e6 2e       	mov	r14, r22
    17cc:	ea 01       	movw	r28, r20
    17ce:	02 2f       	mov	r16, r18

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
    17d6:	18 2f       	mov	r17, r24
    17d8:	83 36       	cpi	r24, 0x63	; 99
    17da:	19 f4       	brne	.+6      	; 0x17e2 <read_MMA8451+0x26>
		stop_TWI();
    17dc:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(ERROR);
    17e0:	23 c0       	rjmp	.+70     	; 0x1828 <__DATA_REGION_LENGTH__+0x28>
	}
	if (write_TWI(reg) == ERROR) {
    17e2:	8e 2d       	mov	r24, r14
    17e4:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
    17e8:	18 2f       	mov	r17, r24
    17ea:	83 36       	cpi	r24, 0x63	; 99
    17ec:	e9 f0       	breq	.+58     	; 0x1828 <__DATA_REGION_LENGTH__+0x28>
		return(ERROR);
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	8f 2d       	mov	r24, r15
    17f2:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
    17f6:	18 2f       	mov	r17, r24
    17f8:	83 36       	cpi	r24, 0x63	; 99
    17fa:	69 f4       	brne	.+26     	; 0x1816 <__DATA_REGION_LENGTH__+0x16>
		stop_TWI();
    17fc:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(ERROR);
    1800:	13 c0       	rjmp	.+38     	; 0x1828 <__DATA_REGION_LENGTH__+0x28>
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    1802:	7e 01       	movw	r14, r28
    1804:	8f ef       	ldi	r24, 0xFF	; 255
    1806:	e8 1a       	sub	r14, r24
    1808:	f8 0a       	sbc	r15, r24
    180a:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <read_TWI>
    180e:	88 83       	st	Y, r24
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    1810:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    1812:	e7 01       	movw	r28, r14
    1814:	01 c0       	rjmp	.+2      	; 0x1818 <__DATA_REGION_LENGTH__+0x18>
    1816:	11 e0       	ldi	r17, 0x01	; 1
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    1818:	10 17       	cp	r17, r16
    181a:	98 f3       	brcs	.-26     	; 0x1802 <__DATA_REGION_LENGTH__+0x2>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    181c:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <readlast_TWI>
    1820:	88 83       	st	Y, r24
	stop_TWI();
    1822:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
	return(NOERROR);
    1826:	10 e0       	ldi	r17, 0x00	; 0

}
    1828:	81 2f       	mov	r24, r17
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	1f 91       	pop	r17
    1830:	0f 91       	pop	r16
    1832:	ff 90       	pop	r15
    1834:	ef 90       	pop	r14
    1836:	08 95       	ret

00001838 <get_orientation>:
uint8_t get_orientation(float *x, float *y, float *z)
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
uint8_t get_orientation(float *x, float *y, float *z)
{
    1838:	cf 92       	push	r12
    183a:	df 92       	push	r13
    183c:	ef 92       	push	r14
    183e:	ff 92       	push	r15
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	26 97       	sbiw	r28, 0x06	; 6
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	6c 01       	movw	r12, r24
    1854:	7b 01       	movw	r14, r22
    1856:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = BADFLOAT;
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e8       	ldi	r25, 0x80	; 128
    185c:	a6 e2       	ldi	r26, 0x26	; 38
    185e:	b4 ec       	ldi	r27, 0xC4	; 196
    1860:	fa 01       	movw	r30, r20
    1862:	80 83       	st	Z, r24
    1864:	91 83       	std	Z+1, r25	; 0x01
    1866:	a2 83       	std	Z+2, r26	; 0x02
    1868:	b3 83       	std	Z+3, r27	; 0x03
    186a:	fb 01       	movw	r30, r22
    186c:	80 83       	st	Z, r24
    186e:	91 83       	std	Z+1, r25	; 0x01
    1870:	a2 83       	std	Z+2, r26	; 0x02
    1872:	b3 83       	std	Z+3, r27	; 0x03
    1874:	f6 01       	movw	r30, r12
    1876:	80 83       	st	Z, r24
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	a2 83       	std	Z+2, r26	; 0x02
    187c:	b3 83       	std	Z+3, r27	; 0x03

	if (read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6) == ERROR) {
    187e:	26 e0       	ldi	r18, 0x06	; 6
    1880:	ae 01       	movw	r20, r28
    1882:	4f 5f       	subi	r20, 0xFF	; 255
    1884:	5f 4f       	sbci	r21, 0xFF	; 255
    1886:	61 e0       	ldi	r22, 0x01	; 1
    1888:	8d e1       	ldi	r24, 0x1D	; 29
    188a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <read_MMA8451>
    188e:	83 36       	cpi	r24, 0x63	; 99
    1890:	09 f4       	brne	.+2      	; 0x1894 <get_orientation+0x5c>
    1892:	64 c0       	rjmp	.+200    	; 0x195c <get_orientation+0x124>
		return(ERROR);
	}

	ix = datain[0];
    1894:	69 81       	ldd	r22, Y+1	; 0x01
    1896:	70 e0       	ldi	r23, 0x00	; 0
	ix <<= 8;
    1898:	76 2f       	mov	r23, r22
    189a:	66 27       	eor	r22, r22
	ix |= datain[1];
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	68 2b       	or	r22, r24
	ix >>= 2;
    18a0:	75 95       	asr	r23
    18a2:	67 95       	ror	r22
    18a4:	75 95       	asr	r23
    18a6:	67 95       	ror	r22
	*x = 980.6 * ((float) ix/4096.0);
    18a8:	07 2e       	mov	r0, r23
    18aa:	00 0c       	add	r0, r0
    18ac:	88 0b       	sbc	r24, r24
    18ae:	99 0b       	sbc	r25, r25
    18b0:	0e 94 65 31 	call	0x62ca	; 0x62ca <__floatsisf>
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	40 e8       	ldi	r20, 0x80	; 128
    18ba:	59 e3       	ldi	r21, 0x39	; 57
    18bc:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
    18c0:	26 e6       	ldi	r18, 0x66	; 102
    18c2:	36 e2       	ldi	r19, 0x26	; 38
    18c4:	45 e7       	ldi	r20, 0x75	; 117
    18c6:	54 e4       	ldi	r21, 0x44	; 68
    18c8:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
    18cc:	f6 01       	movw	r30, r12
    18ce:	60 83       	st	Z, r22
    18d0:	71 83       	std	Z+1, r23	; 0x01
    18d2:	82 83       	std	Z+2, r24	; 0x02
    18d4:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    18d6:	6b 81       	ldd	r22, Y+3	; 0x03
    18d8:	70 e0       	ldi	r23, 0x00	; 0
	iy <<= 8;
    18da:	76 2f       	mov	r23, r22
    18dc:	66 27       	eor	r22, r22
	iy |= datain[3];
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	68 2b       	or	r22, r24
	iy >>= 2;
    18e2:	75 95       	asr	r23
    18e4:	67 95       	ror	r22
    18e6:	75 95       	asr	r23
    18e8:	67 95       	ror	r22
	*y = 980.6 * ((float) iy/4096.0);
    18ea:	07 2e       	mov	r0, r23
    18ec:	00 0c       	add	r0, r0
    18ee:	88 0b       	sbc	r24, r24
    18f0:	99 0b       	sbc	r25, r25
    18f2:	0e 94 65 31 	call	0x62ca	; 0x62ca <__floatsisf>
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e8       	ldi	r20, 0x80	; 128
    18fc:	59 e3       	ldi	r21, 0x39	; 57
    18fe:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
    1902:	26 e6       	ldi	r18, 0x66	; 102
    1904:	36 e2       	ldi	r19, 0x26	; 38
    1906:	45 e7       	ldi	r20, 0x75	; 117
    1908:	54 e4       	ldi	r21, 0x44	; 68
    190a:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
    190e:	f7 01       	movw	r30, r14
    1910:	60 83       	st	Z, r22
    1912:	71 83       	std	Z+1, r23	; 0x01
    1914:	82 83       	std	Z+2, r24	; 0x02
    1916:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    1918:	6d 81       	ldd	r22, Y+5	; 0x05
    191a:	70 e0       	ldi	r23, 0x00	; 0
	iz <<= 8;
    191c:	76 2f       	mov	r23, r22
    191e:	66 27       	eor	r22, r22
	iz |= datain[5];
    1920:	8e 81       	ldd	r24, Y+6	; 0x06
    1922:	68 2b       	or	r22, r24
	iz >>= 2;
    1924:	75 95       	asr	r23
    1926:	67 95       	ror	r22
    1928:	75 95       	asr	r23
    192a:	67 95       	ror	r22
	*z = 980.6 * ((float) iz/4096.0);
    192c:	07 2e       	mov	r0, r23
    192e:	00 0c       	add	r0, r0
    1930:	88 0b       	sbc	r24, r24
    1932:	99 0b       	sbc	r25, r25
    1934:	0e 94 65 31 	call	0x62ca	; 0x62ca <__floatsisf>
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e8       	ldi	r20, 0x80	; 128
    193e:	59 e3       	ldi	r21, 0x39	; 57
    1940:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
    1944:	26 e6       	ldi	r18, 0x66	; 102
    1946:	36 e2       	ldi	r19, 0x26	; 38
    1948:	45 e7       	ldi	r20, 0x75	; 117
    194a:	54 e4       	ldi	r21, 0x44	; 68
    194c:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
    1950:	f8 01       	movw	r30, r16
    1952:	60 83       	st	Z, r22
    1954:	71 83       	std	Z+1, r23	; 0x01
    1956:	82 83       	std	Z+2, r24	; 0x02
    1958:	93 83       	std	Z+3, r25	; 0x03

	return(0);
    195a:	80 e0       	ldi	r24, 0x00	; 0

}
    195c:	26 96       	adiw	r28, 0x06	; 6
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	ff 90       	pop	r15
    196c:	ef 90       	pop	r14
    196e:	df 90       	pop	r13
    1970:	cf 90       	pop	r12
    1972:	08 95       	ret

00001974 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1974:	1f 93       	push	r17
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	d6 2f       	mov	r29, r22
    197c:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    197e:	60 e0       	ldi	r22, 0x00	; 0
    1980:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
    1984:	c8 2f       	mov	r28, r24
    1986:	88 23       	and	r24, r24
    1988:	21 f0       	breq	.+8      	; 0x1992 <write_MMA8451+0x1e>
		stop_TWI();
    198a:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(retval);
    198e:	8c 2f       	mov	r24, r28
    1990:	17 c0       	rjmp	.+46     	; 0x19c0 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1992:	8d 2f       	mov	r24, r29
    1994:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
    1998:	c8 2f       	mov	r28, r24
    199a:	88 23       	and	r24, r24
    199c:	21 f0       	breq	.+8      	; 0x19a6 <write_MMA8451+0x32>
		stop_TWI();
    199e:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(retval);
    19a2:	8c 2f       	mov	r24, r28
    19a4:	0d c0       	rjmp	.+26     	; 0x19c0 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    19a6:	81 2f       	mov	r24, r17
    19a8:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
    19ac:	c8 2f       	mov	r28, r24
    19ae:	88 23       	and	r24, r24
    19b0:	21 f0       	breq	.+8      	; 0x19ba <write_MMA8451+0x46>
		stop_TWI();
    19b2:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
		return(retval);
    19b6:	8c 2f       	mov	r24, r28
    19b8:	03 c0       	rjmp	.+6      	; 0x19c0 <write_MMA8451+0x4c>
	}
	stop_TWI();
    19ba:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>
	return(0);
    19be:	80 e0       	ldi	r24, 0x00	; 0
	
}
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	1f 91       	pop	r17
    19c6:	08 95       	ret

000019c8 <init_MMA8451>:
	sampling frequency (1.56 Hz), a low cutoff frequency on the high pass
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/
uint8_t init_MMA8451(void)
{
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	1f 92       	push	r1
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    19d2:	40 e4       	ldi	r20, 0x40	; 64
    19d4:	6b e2       	ldi	r22, 0x2B	; 43
    19d6:	8d e1       	ldi	r24, 0x1D	; 29
    19d8:	0e 94 ba 0c 	call	0x1974	; 0x1974 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    19dc:	21 e0       	ldi	r18, 0x01	; 1
    19de:	ae 01       	movw	r20, r28
    19e0:	4f 5f       	subi	r20, 0xFF	; 255
    19e2:	5f 4f       	sbci	r21, 0xFF	; 255
    19e4:	6b e2       	ldi	r22, 0x2B	; 43
    19e6:	8d e1       	ldi	r24, 0x1D	; 29
    19e8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <read_MMA8451>
	while (retval & 0x40) {
    19ec:	08 c0       	rjmp	.+16     	; 0x19fe <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    19ee:	21 e0       	ldi	r18, 0x01	; 1
    19f0:	ae 01       	movw	r20, r28
    19f2:	4f 5f       	subi	r20, 0xFF	; 255
    19f4:	5f 4f       	sbci	r21, 0xFF	; 255
    19f6:	6b e2       	ldi	r22, 0x2B	; 43
    19f8:	8d e1       	ldi	r24, 0x1D	; 29
    19fa:	0e 94 de 0b 	call	0x17bc	; 0x17bc <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	86 fd       	sbrc	r24, 6
    1a02:	f5 cf       	rjmp	.-22     	; 0x19ee <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    1a04:	40 ec       	ldi	r20, 0xC0	; 192
    1a06:	6f e0       	ldi	r22, 0x0F	; 15
    1a08:	8d e1       	ldi	r24, 0x1D	; 29
    1a0a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    1a0e:	42 e0       	ldi	r20, 0x02	; 2
    1a10:	6b e2       	ldi	r22, 0x2B	; 43
    1a12:	8d e1       	ldi	r24, 0x1D	; 29
    1a14:	0e 94 ba 0c 	call	0x1974	; 0x1974 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    1a18:	4d e3       	ldi	r20, 0x3D	; 61
    1a1a:	6a e2       	ldi	r22, 0x2A	; 42
    1a1c:	8d e1       	ldi	r24, 0x1D	; 29
    1a1e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <write_MMA8451>

	return(retval);

}
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	0f 90       	pop	r0
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	08 95       	ret

00001a2c <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum and \r\n to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    1a2c:	ef 92       	push	r14
    1a2e:	ff 92       	push	r15
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	2e 97       	sbiw	r28, 0x0e	; 14
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    1a44:	88 e0       	ldi	r24, 0x08	; 8
    1a46:	e7 e2       	ldi	r30, 0x27	; 39
    1a48:	f4 eb       	ldi	r31, 0xB4	; 180
    1a4a:	de 01       	movw	r26, r28
    1a4c:	11 96       	adiw	r26, 0x01	; 1
    1a4e:	01 90       	ld	r0, Z+
    1a50:	0d 92       	st	X+, r0
    1a52:	8a 95       	dec	r24
    1a54:	e1 f7       	brne	.-8      	; 0x1a4e <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    1a56:	f8 01       	movw	r30, r16
    1a58:	01 90       	ld	r0, Z+
    1a5a:	00 20       	and	r0, r0
    1a5c:	e9 f7       	brne	.-6      	; 0x1a58 <checksum_NMEA+0x2c>
    1a5e:	31 97       	sbiw	r30, 0x01	; 1
    1a60:	3e 2f       	mov	r19, r30
    1a62:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    1a64:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	06 c0       	rjmp	.+12     	; 0x1a76 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    1a6a:	f8 01       	movw	r30, r16
    1a6c:	e8 0f       	add	r30, r24
    1a6e:	f1 1d       	adc	r31, r1
    1a70:	20 81       	ld	r18, Z
    1a72:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1a74:	8f 5f       	subi	r24, 0xFF	; 255
    1a76:	83 17       	cp	r24, r19
    1a78:	c0 f3       	brcs	.-16     	; 0x1a6a <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1a7a:	1f 92       	push	r1
    1a7c:	9f 93       	push	r25
    1a7e:	ce 01       	movw	r24, r28
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	9f 93       	push	r25
    1a84:	8f 93       	push	r24
    1a86:	7e 01       	movw	r14, r28
    1a88:	89 e0       	ldi	r24, 0x09	; 9
    1a8a:	e8 0e       	add	r14, r24
    1a8c:	f1 1c       	adc	r15, r1
    1a8e:	ff 92       	push	r15
    1a90:	ef 92       	push	r14
    1a92:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
	strcat(str, chksum);
    1a96:	b7 01       	movw	r22, r14
    1a98:	c8 01       	movw	r24, r16
    1a9a:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <strcat>

}
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	2e 96       	adiw	r28, 0x0e	; 14
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	ff 90       	pop	r15
    1aba:	ef 90       	pop	r14
    1abc:	08 95       	ret

00001abe <reset_OLED>:
void reset_OLED(void)
	Pulls the OLED display reset line low for 1 ms. This seems to be needed.
------------------------------------------------------------------------------*/
void reset_OLED(void)
{
	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    1abe:	e0 e6       	ldi	r30, 0x60	; 96
    1ac0:	f4 e0       	ldi	r31, 0x04	; 4
    1ac2:	80 e4       	ldi	r24, 0x40	; 64
    1ac4:	86 83       	std	Z+6, r24	; 0x06
	PORTD.DIRSET = PIN6_bm;
    1ac6:	81 83       	std	Z+1, r24	; 0x01
    1ac8:	a3 ec       	ldi	r26, 0xC3	; 195
    1aca:	b9 e0       	ldi	r27, 0x09	; 9
    1acc:	11 97       	sbiw	r26, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <reset_OLED+0xe>
    1ad0:	00 c0       	rjmp	.+0      	; 0x1ad2 <reset_OLED+0x14>
    1ad2:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    1ad4:	85 83       	std	Z+5, r24	; 0x05
    1ad6:	08 95       	ret

00001ad8 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    1ad8:	cf 93       	push	r28
    1ada:	df 93       	push	r29
    1adc:	d6 2f       	mov	r29, r22
    1ade:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	0e 94 2c 2d 	call	0x5a58	; 0x5a58 <start_TWI>
	write_TWI(type);
    1ae6:	8d 2f       	mov	r24, r29
    1ae8:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
	write_TWI(byteToSend);
    1aec:	8c 2f       	mov	r24, r28
    1aee:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <write_TWI>
	stop_TWI();
    1af2:	0e 94 76 2d 	call	0x5aec	; 0x5aec <stop_TWI>

}
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	08 95       	ret

00001afc <init_OLEDDISPLAY>:
	Initialize a Newhaven NHD-0216AW-1B3 OLED display. This is taken straight
	from https://github.com/NewhavenDisplay/NHD_US2066. The manual is not easy
	to understand but this seems to work.
------------------------------------------------------------------------------*/
void init_OLEDDISPLAY(uint8_t displaynumber)
{
    1afc:	cf 93       	push	r28

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
    1afe:	88 23       	and	r24, r24
    1b00:	29 f0       	breq	.+10     	; 0x1b0c <init_OLEDDISPLAY+0x10>
		twiaddr = OLEDADDR0;		
	} else if (displaynumber == 1) {	// Left-side display
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <init_OLEDDISPLAY+0xc>
    1b06:	9e c0       	rjmp	.+316    	; 0x1c44 <init_OLEDDISPLAY+0x148>
		twiaddr = OLEDADDR1;
    1b08:	cd e3       	ldi	r28, 0x3D	; 61
    1b0a:	01 c0       	rjmp	.+2      	; 0x1b0e <init_OLEDDISPLAY+0x12>
{

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
		twiaddr = OLEDADDR0;		
    1b0c:	cc e3       	ldi	r28, 0x3C	; 60
		twiaddr = OLEDADDR1;
	} else {
		return;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    1b0e:	4a e2       	ldi	r20, 0x2A	; 42
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	8c 2f       	mov	r24, r28
    1b14:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    1b18:	41 e7       	ldi	r20, 0x71	; 113
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	8c 2f       	mov	r24, r28
    1b1e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    1b22:	4c e5       	ldi	r20, 0x5C	; 92
    1b24:	60 e4       	ldi	r22, 0x40	; 64
    1b26:	8c 2f       	mov	r24, r28
    1b28:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1b2c:	48 e2       	ldi	r20, 0x28	; 40
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	8c 2f       	mov	r24, r28
    1b32:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    1b36:	48 e0       	ldi	r20, 0x08	; 8
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	8c 2f       	mov	r24, r28
    1b3c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1b40:	4a e2       	ldi	r20, 0x2A	; 42
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	8c 2f       	mov	r24, r28
    1b46:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1b4a:	49 e7       	ldi	r20, 0x79	; 121
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	8c 2f       	mov	r24, r28
    1b50:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    1b54:	45 ed       	ldi	r20, 0xD5	; 213
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	8c 2f       	mov	r24, r28
    1b5a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    1b5e:	40 e7       	ldi	r20, 0x70	; 112
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	8c 2f       	mov	r24, r28
    1b64:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1b68:	48 e7       	ldi	r20, 0x78	; 120
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	8c 2f       	mov	r24, r28
    1b6e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    1b72:	48 e0       	ldi	r20, 0x08	; 8
    1b74:	60 e0       	ldi	r22, 0x00	; 0
    1b76:	8c 2f       	mov	r24, r28
    1b78:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1b7c:	46 e0       	ldi	r20, 0x06	; 6
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	8c 2f       	mov	r24, r28
    1b82:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1b86:	42 e7       	ldi	r20, 0x72	; 114
    1b88:	60 e0       	ldi	r22, 0x00	; 0
    1b8a:	8c 2f       	mov	r24, r28
    1b8c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    1b90:	40 e0       	ldi	r20, 0x00	; 0
    1b92:	60 e4       	ldi	r22, 0x40	; 64
    1b94:	8c 2f       	mov	r24, r28
    1b96:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1b9a:	4a e2       	ldi	r20, 0x2A	; 42
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	8c 2f       	mov	r24, r28
    1ba0:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1ba4:	49 e7       	ldi	r20, 0x79	; 121
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	8c 2f       	mov	r24, r28
    1baa:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    1bae:	4a ed       	ldi	r20, 0xDA	; 218
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	8c 2f       	mov	r24, r28
    1bb4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	8c 2f       	mov	r24, r28
    1bbe:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    1bc2:	4c ed       	ldi	r20, 0xDC	; 220
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	8c 2f       	mov	r24, r28
    1bc8:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	8c 2f       	mov	r24, r28
    1bd2:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    1bd6:	41 e8       	ldi	r20, 0x81	; 129
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	8c 2f       	mov	r24, r28
    1bdc:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    1be0:	4f e7       	ldi	r20, 0x7F	; 127
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	8c 2f       	mov	r24, r28
    1be6:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1bea:	49 ed       	ldi	r20, 0xD9	; 217
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	8c 2f       	mov	r24, r28
    1bf0:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    1bf4:	41 ef       	ldi	r20, 0xF1	; 241
    1bf6:	60 e0       	ldi	r22, 0x00	; 0
    1bf8:	8c 2f       	mov	r24, r28
    1bfa:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    1bfe:	4b ed       	ldi	r20, 0xDB	; 219
    1c00:	60 e0       	ldi	r22, 0x00	; 0
    1c02:	8c 2f       	mov	r24, r28
    1c04:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    1c08:	40 e4       	ldi	r20, 0x40	; 64
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	8c 2f       	mov	r24, r28
    1c0e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1c12:	48 e7       	ldi	r20, 0x78	; 120
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	8c 2f       	mov	r24, r28
    1c18:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1c1c:	48 e2       	ldi	r20, 0x28	; 40
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	8c 2f       	mov	r24, r28
    1c22:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    1c26:	41 e0       	ldi	r20, 0x01	; 1
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	8c 2f       	mov	r24, r28
    1c2c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    1c30:	40 e8       	ldi	r20, 0x80	; 128
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	8c 2f       	mov	r24, r28
    1c36:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    1c3a:	4c e0       	ldi	r20, 0x0C	; 12
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	8c 2f       	mov	r24, r28
    1c40:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>

}
    1c44:	cf 91       	pop	r28
    1c46:	08 95       	ret

00001c48 <init_OLED>:
	Set up the two OLED displays
------------------------------------------------------------------------------*/
void init_OLED(void)
{

	reset_OLED();				// Need to start with a reset
    1c48:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <reset_OLED>
	init_OLEDDISPLAY(0);
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <init_OLEDDISPLAY>
	init_OLEDDISPLAY(1);
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <init_OLEDDISPLAY>
    1c58:	2f e3       	ldi	r18, 0x3F	; 63
    1c5a:	8d e0       	ldi	r24, 0x0D	; 13
    1c5c:	93 e0       	ldi	r25, 0x03	; 3
    1c5e:	21 50       	subi	r18, 0x01	; 1
    1c60:	80 40       	sbci	r24, 0x00	; 0
    1c62:	90 40       	sbci	r25, 0x00	; 0
    1c64:	e1 f7       	brne	.-8      	; 0x1c5e <init_OLED+0x16>
    1c66:	00 c0       	rjmp	.+0      	; 0x1c68 <init_OLED+0x20>
    1c68:	00 00       	nop
    1c6a:	08 95       	ret

00001c6c <writestr_OLED>:
	
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.
------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1c6c:	ef 92       	push	r14
    1c6e:	ff 92       	push	r15
    1c70:	0f 93       	push	r16
    1c72:	1f 93       	push	r17
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	e2 97       	sbiw	r28, 0x32	; 50
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    1c84:	91 e1       	ldi	r25, 0x11	; 17
    1c86:	ef e2       	ldi	r30, 0x2F	; 47
    1c88:	f4 eb       	ldi	r31, 0xB4	; 180
    1c8a:	de 01       	movw	r26, r28
    1c8c:	92 96       	adiw	r26, 0x22	; 34
    1c8e:	01 90       	ld	r0, Z+
    1c90:	0d 92       	st	X+, r0
    1c92:	9a 95       	dec	r25
    1c94:	e1 f7       	brne	.-8      	; 0x1c8e <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1c96:	81 11       	cpse	r24, r1
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1c9a:	0c e3       	ldi	r16, 0x3C	; 60
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1c9e:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	01 96       	adiw	r24, 0x01	; 1
    1ca4:	7c 01       	movw	r14, r24
    1ca6:	0e 94 ec 37 	call	0x6fd8	; 0x6fd8 <strcpy>
	if (strlen(strbuf) > 16) {
    1caa:	f7 01       	movw	r30, r14
    1cac:	01 90       	ld	r0, Z+
    1cae:	00 20       	and	r0, r0
    1cb0:	e9 f7       	brne	.-6      	; 0x1cac <writestr_OLED+0x40>
    1cb2:	31 97       	sbiw	r30, 0x01	; 1
    1cb4:	ee 19       	sub	r30, r14
    1cb6:	ff 09       	sbc	r31, r15
    1cb8:	71 97       	sbiw	r30, 0x11	; 17
    1cba:	08 f0       	brcs	.+2      	; 0x1cbe <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1cbc:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1cbe:	be 01       	movw	r22, r28
    1cc0:	6e 5d       	subi	r22, 0xDE	; 222
    1cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	01 96       	adiw	r24, 0x01	; 1
    1cc8:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <strcat>

	if (lineno == 1) {
    1ccc:	11 30       	cpi	r17, 0x01	; 1
    1cce:	39 f4       	brne	.+14     	; 0x1cde <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	80 2f       	mov	r24, r16
    1cd6:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1cda:	10 e0       	ldi	r17, 0x00	; 0
    1cdc:	12 c0       	rjmp	.+36     	; 0x1d02 <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1cde:	40 ec       	ldi	r20, 0xC0	; 192
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	80 2f       	mov	r24, r16
    1ce4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>
    1ce8:	f8 cf       	rjmp	.-16     	; 0x1cda <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1cea:	e1 e0       	ldi	r30, 0x01	; 1
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	ec 0f       	add	r30, r28
    1cf0:	fd 1f       	adc	r31, r29
    1cf2:	e1 0f       	add	r30, r17
    1cf4:	f1 1d       	adc	r31, r1
    1cf6:	40 81       	ld	r20, Z
    1cf8:	60 e4       	ldi	r22, 0x40	; 64
    1cfa:	80 2f       	mov	r24, r16
    1cfc:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    1d00:	1f 5f       	subi	r17, 0xFF	; 255
    1d02:	10 31       	cpi	r17, 0x10	; 16
    1d04:	90 f3       	brcs	.-28     	; 0x1cea <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 0;
    1d06:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    1d0a:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>

}
    1d0e:	e2 96       	adiw	r28, 0x32	; 50
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	ff 90       	pop	r15
    1d1e:	ef 90       	pop	r14
    1d20:	08 95       	ret

00001d22 <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    1d22:	1f 93       	push	r17
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	1f 92       	push	r1
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	18 2f       	mov	r17, r24

	char nullstr[] = "";
    1d30:	19 82       	std	Y+1, r1	; 0x01
	writestr_OLED(displaynumber, nullstr, 1);
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	be 01       	movw	r22, r28
    1d36:	6f 5f       	subi	r22, 0xFF	; 255
    1d38:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3a:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
    1d3e:	42 e0       	ldi	r20, 0x02	; 2
    1d40:	be 01       	movw	r22, r28
    1d42:	6f 5f       	subi	r22, 0xFF	; 255
    1d44:	7f 4f       	sbci	r23, 0xFF	; 255
    1d46:	81 2f       	mov	r24, r17
    1d48:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
	timerOLED = 0;
    1d4c:	10 92 18 2a 	sts	0x2A18, r1	; 0x802a18 <timerOLED>
    1d50:	10 92 19 2a 	sts	0x2A19, r1	; 0x802a19 <timerOLED+0x1>

}
    1d54:	0f 90       	pop	r0
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	1f 91       	pop	r17
    1d5c:	08 95       	ret

00001d5e <read_PNEUSensors>:
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
{
    1d5e:	cf 92       	push	r12
    1d60:	df 92       	push	r13
    1d62:	ef 92       	push	r14
    1d64:	ff 92       	push	r15
    1d66:	0f 93       	push	r16
    1d68:	1f 93       	push	r17
    1d6a:	cf 93       	push	r28
    1d6c:	df 93       	push	r29
    1d6e:	6c 01       	movw	r12, r24
    1d70:	8b 01       	movw	r16, r22
    1d72:	7a 01       	movw	r14, r20
    1d74:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);	// NEEDS ERRORCHECK
    1d76:	69 e0       	ldi	r22, 0x09	; 9
    1d78:	81 e2       	ldi	r24, 0x21	; 33
    1d7a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1d7e:	98 2f       	mov	r25, r24
    1d80:	92 95       	swap	r25
    1d82:	96 95       	lsr	r25
    1d84:	96 95       	lsr	r25
    1d86:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    1d88:	91 30       	cpi	r25, 0x01	; 1
    1d8a:	21 f4       	brne	.+8      	; 0x1d94 <read_PNEUSensors+0x36>
		*shutter = 'c';
    1d8c:	93 e6       	ldi	r25, 0x63	; 99
    1d8e:	f6 01       	movw	r30, r12
    1d90:	90 83       	st	Z, r25
    1d92:	0f c0       	rjmp	.+30     	; 0x1db2 <read_PNEUSensors+0x54>
	} else if (state == 2) {
    1d94:	92 30       	cpi	r25, 0x02	; 2
    1d96:	21 f4       	brne	.+8      	; 0x1da0 <read_PNEUSensors+0x42>
		*shutter = 'o';
    1d98:	9f e6       	ldi	r25, 0x6F	; 111
    1d9a:	f6 01       	movw	r30, r12
    1d9c:	90 83       	st	Z, r25
    1d9e:	09 c0       	rjmp	.+18     	; 0x1db2 <read_PNEUSensors+0x54>
	} else if (state == 3) {
    1da0:	93 30       	cpi	r25, 0x03	; 3
    1da2:	21 f4       	brne	.+8      	; 0x1dac <read_PNEUSensors+0x4e>
		*shutter = 't';
    1da4:	94 e7       	ldi	r25, 0x74	; 116
    1da6:	f6 01       	movw	r30, r12
    1da8:	90 83       	st	Z, r25
    1daa:	03 c0       	rjmp	.+6      	; 0x1db2 <read_PNEUSensors+0x54>
	} else {
		*shutter = 'x';
    1dac:	98 e7       	ldi	r25, 0x78	; 120
    1dae:	f6 01       	movw	r30, r12
    1db0:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1db2:	98 2f       	mov	r25, r24
    1db4:	96 95       	lsr	r25
    1db6:	96 95       	lsr	r25
	state &= 0b00000011;
    1db8:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1dba:	91 30       	cpi	r25, 0x01	; 1
    1dbc:	21 f4       	brne	.+8      	; 0x1dc6 <read_PNEUSensors+0x68>
		*right = 'c';
    1dbe:	93 e6       	ldi	r25, 0x63	; 99
    1dc0:	f7 01       	movw	r30, r14
    1dc2:	90 83       	st	Z, r25
    1dc4:	0f c0       	rjmp	.+30     	; 0x1de4 <read_PNEUSensors+0x86>
	} else if (state == 2) {
    1dc6:	92 30       	cpi	r25, 0x02	; 2
    1dc8:	21 f4       	brne	.+8      	; 0x1dd2 <read_PNEUSensors+0x74>
		*right = 'o';
    1dca:	9f e6       	ldi	r25, 0x6F	; 111
    1dcc:	f7 01       	movw	r30, r14
    1dce:	90 83       	st	Z, r25
    1dd0:	09 c0       	rjmp	.+18     	; 0x1de4 <read_PNEUSensors+0x86>
	} else if (state == 3) {
    1dd2:	93 30       	cpi	r25, 0x03	; 3
    1dd4:	21 f4       	brne	.+8      	; 0x1dde <read_PNEUSensors+0x80>
		*right = 't';
    1dd6:	94 e7       	ldi	r25, 0x74	; 116
    1dd8:	f7 01       	movw	r30, r14
    1dda:	90 83       	st	Z, r25
    1ddc:	03 c0       	rjmp	.+6      	; 0x1de4 <read_PNEUSensors+0x86>
	} else {
		*right = 'x';
    1dde:	98 e7       	ldi	r25, 0x78	; 120
    1de0:	f7 01       	movw	r30, r14
    1de2:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1de4:	98 2f       	mov	r25, r24
    1de6:	92 95       	swap	r25
    1de8:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    1dea:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1dec:	91 30       	cpi	r25, 0x01	; 1
    1dee:	21 f4       	brne	.+8      	; 0x1df8 <read_PNEUSensors+0x9a>
		*left = 'o';
    1df0:	9f e6       	ldi	r25, 0x6F	; 111
    1df2:	f8 01       	movw	r30, r16
    1df4:	90 83       	st	Z, r25
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <read_PNEUSensors+0xb8>
	} else if (state == 2) {
    1df8:	92 30       	cpi	r25, 0x02	; 2
    1dfa:	21 f4       	brne	.+8      	; 0x1e04 <read_PNEUSensors+0xa6>
		*left = 'c';
    1dfc:	93 e6       	ldi	r25, 0x63	; 99
    1dfe:	f8 01       	movw	r30, r16
    1e00:	90 83       	st	Z, r25
    1e02:	09 c0       	rjmp	.+18     	; 0x1e16 <read_PNEUSensors+0xb8>
	} else if (state == 3) {
    1e04:	93 30       	cpi	r25, 0x03	; 3
    1e06:	21 f4       	brne	.+8      	; 0x1e10 <read_PNEUSensors+0xb2>
		*left = 't';
    1e08:	94 e7       	ldi	r25, 0x74	; 116
    1e0a:	f8 01       	movw	r30, r16
    1e0c:	90 83       	st	Z, r25
    1e0e:	03 c0       	rjmp	.+6      	; 0x1e16 <read_PNEUSensors+0xb8>
	} else {
		*left = 'x';
    1e10:	98 e7       	ldi	r25, 0x78	; 120
    1e12:	f8 01       	movw	r30, r16
    1e14:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1e16:	81 ff       	sbrs	r24, 1
    1e18:	03 c0       	rjmp	.+6      	; 0x1e20 <read_PNEUSensors+0xc2>
		*air = '0';
    1e1a:	80 e3       	ldi	r24, 0x30	; 48
    1e1c:	88 83       	st	Y, r24
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <read_PNEUSensors+0xc6>
	} else {
		*air = '1';
    1e20:	81 e3       	ldi	r24, 0x31	; 49
    1e22:	88 83       	st	Y, r24
	}
}
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	1f 91       	pop	r17
    1e2a:	0f 91       	pop	r16
    1e2c:	ff 90       	pop	r15
    1e2e:	ef 90       	pop	r14
    1e30:	df 90       	pop	r13
    1e32:	cf 90       	pop	r12
    1e34:	08 95       	ret

00001e36 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	d8 2f       	mov	r29, r24
    1e3c:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    1e3e:	69 e0       	ldi	r22, 0x09	; 9
    1e40:	84 e2       	ldi	r24, 0x24	; 36
    1e42:	0e 94 1a 0b 	call	0x1634	; 0x1634 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    1e46:	8d 2b       	or	r24, r29
    1e48:	48 2f       	mov	r20, r24
    1e4a:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1e4c:	6a e0       	ldi	r22, 0x0A	; 10
    1e4e:	84 e2       	ldi	r24, 0x24	; 36
    1e50:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	08 95       	ret

00001e5a <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(uint8_t cstack)
{
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	6a 97       	sbiw	r28, 0x1a	; 26
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    1e68:	99 e0       	ldi	r25, 0x09	; 9
    1e6a:	ea e7       	ldi	r30, 0x7A	; 122
    1e6c:	f4 eb       	ldi	r31, 0xB4	; 180
    1e6e:	de 01       	movw	r26, r28
    1e70:	11 96       	adiw	r26, 0x01	; 1
    1e72:	01 90       	ld	r0, Z+
    1e74:	0d 92       	st	X+, r0
    1e76:	9a 95       	dec	r25
    1e78:	e1 f7       	brne	.-8      	; 0x1e72 <close_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1e7a:	24 e3       	ldi	r18, 0x34	; 52
    1e7c:	82 9f       	mul	r24, r18
    1e7e:	c0 01       	movw	r24, r0
    1e80:	11 24       	eor	r1, r1
    1e82:	fc 01       	movw	r30, r24
    1e84:	e1 5f       	subi	r30, 0xF1	; 241
    1e86:	f7 4d       	sbci	r31, 0xD7	; 215
    1e88:	81 81       	ldd	r24, Z+1	; 0x01
    1e8a:	8c 36       	cpi	r24, 0x6C	; 108
    1e8c:	31 f1       	breq	.+76     	; 0x1eda <close_PNEU+0x80>
    1e8e:	18 f4       	brcc	.+6      	; 0x1e96 <close_PNEU+0x3c>
    1e90:	82 36       	cpi	r24, 0x62	; 98
    1e92:	39 f0       	breq	.+14     	; 0x1ea2 <close_PNEU+0x48>
    1e94:	6a c0       	rjmp	.+212    	; 0x1f6a <close_PNEU+0x110>
    1e96:	82 37       	cpi	r24, 0x72	; 114
    1e98:	c1 f1       	breq	.+112    	; 0x1f0a <close_PNEU+0xb0>
    1e9a:	83 37       	cpi	r24, 0x73	; 115
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <close_PNEU+0x46>
    1e9e:	4d c0       	rjmp	.+154    	; 0x1f3a <close_PNEU+0xe0>
    1ea0:	64 c0       	rjmp	.+200    	; 0x1f6a <close_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1ea2:	6a ee       	ldi	r22, 0xEA	; 234
    1ea4:	84 e4       	ldi	r24, 0x44	; 68
    1ea6:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1eaa:	66 ee       	ldi	r22, 0xE6	; 230
    1eac:	88 e8       	ldi	r24, 0x88	; 136
    1eae:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1eb2:	80 e4       	ldi	r24, 0x40	; 64
    1eb4:	94 eb       	ldi	r25, 0xB4	; 180
    1eb6:	9f 93       	push	r25
    1eb8:	8f 93       	push	r24
    1eba:	ce 01       	movw	r24, r28
    1ebc:	01 96       	adiw	r24, 0x01	; 1
    1ebe:	9f 93       	push	r25
    1ec0:	8f 93       	push	r24
    1ec2:	09 96       	adiw	r24, 0x09	; 9
    1ec4:	9f 93       	push	r25
    1ec6:	8f 93       	push	r24
    1ec8:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			break;
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	59 c0       	rjmp	.+178    	; 0x1f8c <close_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1eda:	6a ee       	ldi	r22, 0xEA	; 234
    1edc:	84 e4       	ldi	r24, 0x44	; 68
    1ede:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1ee2:	85 e4       	ldi	r24, 0x45	; 69
    1ee4:	94 eb       	ldi	r25, 0xB4	; 180
    1ee6:	9f 93       	push	r25
    1ee8:	8f 93       	push	r24
    1eea:	ce 01       	movw	r24, r28
    1eec:	01 96       	adiw	r24, 0x01	; 1
    1eee:	9f 93       	push	r25
    1ef0:	8f 93       	push	r24
    1ef2:	09 96       	adiw	r24, 0x09	; 9
    1ef4:	9f 93       	push	r25
    1ef6:	8f 93       	push	r24
    1ef8:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			break;
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	41 c0       	rjmp	.+130    	; 0x1f8c <close_PNEU+0x132>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1f0a:	66 ee       	ldi	r22, 0xE6	; 230
    1f0c:	88 e8       	ldi	r24, 0x88	; 136
    1f0e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1f12:	8a e4       	ldi	r24, 0x4A	; 74
    1f14:	94 eb       	ldi	r25, 0xB4	; 180
    1f16:	9f 93       	push	r25
    1f18:	8f 93       	push	r24
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	01 96       	adiw	r24, 0x01	; 1
    1f1e:	9f 93       	push	r25
    1f20:	8f 93       	push	r24
    1f22:	09 96       	adiw	r24, 0x09	; 9
    1f24:	9f 93       	push	r25
    1f26:	8f 93       	push	r24
    1f28:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			break;
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	29 c0       	rjmp	.+82     	; 0x1f8c <close_PNEU+0x132>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1f3a:	6c ee       	ldi	r22, 0xEC	; 236
    1f3c:	82 e2       	ldi	r24, 0x22	; 34
    1f3e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1f42:	80 e5       	ldi	r24, 0x50	; 80
    1f44:	94 eb       	ldi	r25, 0xB4	; 180
    1f46:	9f 93       	push	r25
    1f48:	8f 93       	push	r24
    1f4a:	ce 01       	movw	r24, r28
    1f4c:	01 96       	adiw	r24, 0x01	; 1
    1f4e:	9f 93       	push	r25
    1f50:	8f 93       	push	r24
    1f52:	09 96       	adiw	r24, 0x09	; 9
    1f54:	9f 93       	push	r25
    1f56:	8f 93       	push	r24
    1f58:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			break;
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	11 c0       	rjmp	.+34     	; 0x1f8c <close_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "close_PNEU bad object");
    1f6a:	68 e5       	ldi	r22, 0x58	; 88
    1f6c:	74 eb       	ldi	r23, 0xB4	; 180
    1f6e:	85 ef       	ldi	r24, 0xF5	; 245
    1f70:	91 e0       	ldi	r25, 0x01	; 1
    1f72:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			strcpy(outbuf, "close what?");
    1f76:	8c e0       	ldi	r24, 0x0C	; 12
    1f78:	ee e6       	ldi	r30, 0x6E	; 110
    1f7a:	f4 eb       	ldi	r31, 0xB4	; 180
    1f7c:	de 01       	movw	r26, r28
    1f7e:	1a 96       	adiw	r26, 0x0a	; 10
    1f80:	01 90       	ld	r0, Z+
    1f82:	0d 92       	st	X+, r0
    1f84:	8a 95       	dec	r24
    1f86:	e1 f7       	brne	.-8      	; 0x1f80 <close_PNEU+0x126>
			return(ERROR);
    1f88:	83 e6       	ldi	r24, 0x63	; 99
    1f8a:	0b c0       	rjmp	.+22     	; 0x1fa2 <close_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1f92:	41 e0       	ldi	r20, 0x01	; 1
    1f94:	be 01       	movw	r22, r28
    1f96:	66 5f       	subi	r22, 0xF6	; 246
    1f98:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
	return(NOERROR);
    1fa0:	80 e0       	ldi	r24, 0x00	; 0

}
    1fa2:	6a 96       	adiw	r28, 0x1a	; 26
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	df 91       	pop	r29
    1faa:	cf 91       	pop	r28
    1fac:	08 95       	ret

00001fae <init_PNEU>:
	is assumed to be in input mode.
------------------------------------------------------------------------------*/
uint8_t init_PNEU(void)
{

	if (write_MCP23008(HIGHCURRENT, IODIR, 0x00) == ERROR) {
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	60 e0       	ldi	r22, 0x00	; 0
    1fb2:	84 e2       	ldi	r24, 0x24	; 36
    1fb4:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
    1fb8:	83 36       	cpi	r24, 0x63	; 99
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <init_PNEU+0x10>
    1fbc:	55 c0       	rjmp	.+170    	; 0x2068 <init_PNEU+0xba>
		return(ERROR);
	}
	if (write_MCP23008(HIGHCURRENT, OLAT, 0x00) == ERROR) {
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	6a e0       	ldi	r22, 0x0A	; 10
    1fc2:	84 e2       	ldi	r24, 0x24	; 36
    1fc4:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
    1fc8:	83 36       	cpi	r24, 0x63	; 99
    1fca:	09 f4       	brne	.+2      	; 0x1fce <init_PNEU+0x20>
    1fcc:	4d c0       	rjmp	.+154    	; 0x2068 <init_PNEU+0xba>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IODIR, 0xFE) == ERROR) {	// Inputs
    1fce:	4e ef       	ldi	r20, 0xFE	; 254
    1fd0:	60 e0       	ldi	r22, 0x00	; 0
    1fd2:	81 e2       	ldi	r24, 0x21	; 33
    1fd4:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
    1fd8:	83 36       	cpi	r24, 0x63	; 99
    1fda:	09 f4       	brne	.+2      	; 0x1fde <init_PNEU+0x30>
    1fdc:	45 c0       	rjmp	.+138    	; 0x2068 <init_PNEU+0xba>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IPOL, 0x00) == ERROR) {
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	61 e0       	ldi	r22, 0x01	; 1
    1fe2:	81 e2       	ldi	r24, 0x21	; 33
    1fe4:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
    1fe8:	83 36       	cpi	r24, 0x63	; 99
    1fea:	f1 f1       	breq	.+124    	; 0x2068 <init_PNEU+0xba>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100) == ERROR) {
    1fec:	4c ef       	ldi	r20, 0xFC	; 252
    1fee:	62 e0       	ldi	r22, 0x02	; 2
    1ff0:	81 e2       	ldi	r24, 0x21	; 33
    1ff2:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
    1ff6:	83 36       	cpi	r24, 0x63	; 99
    1ff8:	b9 f1       	breq	.+110    	; 0x2068 <init_PNEU+0xba>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, INTCON, 0x00) == ERROR) {
    1ffa:	40 e0       	ldi	r20, 0x00	; 0
    1ffc:	64 e0       	ldi	r22, 0x04	; 4
    1ffe:	81 e2       	ldi	r24, 0x21	; 33
    2000:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
    2004:	83 36       	cpi	r24, 0x63	; 99
    2006:	81 f1       	breq	.+96     	; 0x2068 <init_PNEU+0xba>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IOCON, 0x20) == ERROR) { // Don't increment addr
    2008:	40 e2       	ldi	r20, 0x20	; 32
    200a:	65 e0       	ldi	r22, 0x05	; 5
    200c:	81 e2       	ldi	r24, 0x21	; 33
    200e:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
    2012:	83 36       	cpi	r24, 0x63	; 99
    2014:	49 f1       	breq	.+82     	; 0x2068 <init_PNEU+0xba>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPPU, 0x7F) == ERROR) { // Pullups (not really needed)
    2016:	4f e7       	ldi	r20, 0x7F	; 127
    2018:	66 e0       	ldi	r22, 0x06	; 6
    201a:	81 e2       	ldi	r24, 0x21	; 33
    201c:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
    2020:	83 36       	cpi	r24, 0x63	; 99
    2022:	11 f1       	breq	.+68     	; 0x2068 <init_PNEU+0xba>
		return(ERROR);
	}

	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    2024:	89 e0       	ldi	r24, 0x09	; 9
    2026:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>

	// Avoid clanking at startup
	write_MCP23008(HIGHCURRENT, OLAT, 0xEE);	// Open all pneumatic valves
    202a:	4e ee       	ldi	r20, 0xEE	; 238
    202c:	6a e0       	ldi	r22, 0x0A	; 10
    202e:	84 e2       	ldi	r24, 0x24	; 36
    2030:	0e 94 49 0b 	call	0x1692	; 0x1692 <write_MCP23008>
    2034:	2f e7       	ldi	r18, 0x7F	; 127
    2036:	84 e8       	ldi	r24, 0x84	; 132
    2038:	9e e1       	ldi	r25, 0x1E	; 30
    203a:	21 50       	subi	r18, 0x01	; 1
    203c:	80 40       	sbci	r24, 0x00	; 0
    203e:	90 40       	sbci	r25, 0x00	; 0
    2040:	e1 f7       	brne	.-8      	; 0x203a <init_PNEU+0x8c>
    2042:	00 c0       	rjmp	.+0      	; 0x2044 <init_PNEU+0x96>
    2044:	00 00       	nop
	_delay_ms(1000);								// Wait to fill
	set_PNEUVALVES(LEFTBM, LEFTCLOSE);			// Close everything
    2046:	6a ee       	ldi	r22, 0xEA	; 234
    2048:	84 e4       	ldi	r24, 0x44	; 68
    204a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
	set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    204e:	66 ee       	ldi	r22, 0xE6	; 230
    2050:	88 e8       	ldi	r24, 0x88	; 136
    2052:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
	set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    2056:	6c ee       	ldi	r22, 0xEC	; 236
    2058:	82 e2       	ldi	r24, 0x22	; 34
    205a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
	read_MCP23008(PNEUSENSORS, GPIO);
    205e:	69 e0       	ldi	r22, 0x09	; 9
    2060:	81 e2       	ldi	r24, 0x21	; 33
    2062:	0e 94 1a 0b 	call	0x1634	; 0x1634 <read_MCP23008>

	return(NOERROR);
    2066:	80 e0       	ldi	r24, 0x00	; 0

}
    2068:	08 95       	ret

0000206a <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(uint8_t cstack)
{
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	69 97       	sbiw	r28, 0x19	; 25
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	de bf       	out	0x3e, r29	; 62

	const char dformat_OPE[] = "Open %s";
    2078:	98 e0       	ldi	r25, 0x08	; 8
    207a:	e3 ea       	ldi	r30, 0xA3	; 163
    207c:	f4 eb       	ldi	r31, 0xB4	; 180
    207e:	de 01       	movw	r26, r28
    2080:	11 96       	adiw	r26, 0x01	; 1
    2082:	01 90       	ld	r0, Z+
    2084:	0d 92       	st	X+, r0
    2086:	9a 95       	dec	r25
    2088:	e1 f7       	brne	.-8      	; 0x2082 <open_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    208a:	24 e3       	ldi	r18, 0x34	; 52
    208c:	82 9f       	mul	r24, r18
    208e:	c0 01       	movw	r24, r0
    2090:	11 24       	eor	r1, r1
    2092:	fc 01       	movw	r30, r24
    2094:	e1 5f       	subi	r30, 0xF1	; 241
    2096:	f7 4d       	sbci	r31, 0xD7	; 215
    2098:	81 81       	ldd	r24, Z+1	; 0x01
    209a:	8c 36       	cpi	r24, 0x6C	; 108
    209c:	31 f1       	breq	.+76     	; 0x20ea <open_PNEU+0x80>
    209e:	18 f4       	brcc	.+6      	; 0x20a6 <open_PNEU+0x3c>
    20a0:	82 36       	cpi	r24, 0x62	; 98
    20a2:	39 f0       	breq	.+14     	; 0x20b2 <open_PNEU+0x48>
    20a4:	6a c0       	rjmp	.+212    	; 0x217a <open_PNEU+0x110>
    20a6:	82 37       	cpi	r24, 0x72	; 114
    20a8:	c1 f1       	breq	.+112    	; 0x211a <open_PNEU+0xb0>
    20aa:	83 37       	cpi	r24, 0x73	; 115
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <open_PNEU+0x46>
    20ae:	4d c0       	rjmp	.+154    	; 0x214a <open_PNEU+0xe0>
    20b0:	64 c0       	rjmp	.+200    	; 0x217a <open_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    20b2:	6e ea       	ldi	r22, 0xAE	; 174
    20b4:	84 e4       	ldi	r24, 0x44	; 68
    20b6:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    20ba:	6e e6       	ldi	r22, 0x6E	; 110
    20bc:	88 e8       	ldi	r24, 0x88	; 136
    20be:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    20c2:	80 e4       	ldi	r24, 0x40	; 64
    20c4:	94 eb       	ldi	r25, 0xB4	; 180
    20c6:	9f 93       	push	r25
    20c8:	8f 93       	push	r24
    20ca:	ce 01       	movw	r24, r28
    20cc:	01 96       	adiw	r24, 0x01	; 1
    20ce:	9f 93       	push	r25
    20d0:	8f 93       	push	r24
    20d2:	08 96       	adiw	r24, 0x08	; 8
    20d4:	9f 93       	push	r25
    20d6:	8f 93       	push	r24
    20d8:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			break;
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	59 c0       	rjmp	.+178    	; 0x219c <open_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    20ea:	6e ea       	ldi	r22, 0xAE	; 174
    20ec:	84 e4       	ldi	r24, 0x44	; 68
    20ee:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    20f2:	85 e4       	ldi	r24, 0x45	; 69
    20f4:	94 eb       	ldi	r25, 0xB4	; 180
    20f6:	9f 93       	push	r25
    20f8:	8f 93       	push	r24
    20fa:	ce 01       	movw	r24, r28
    20fc:	01 96       	adiw	r24, 0x01	; 1
    20fe:	9f 93       	push	r25
    2100:	8f 93       	push	r24
    2102:	08 96       	adiw	r24, 0x08	; 8
    2104:	9f 93       	push	r25
    2106:	8f 93       	push	r24
    2108:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			break;
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	41 c0       	rjmp	.+130    	; 0x219c <open_PNEU+0x132>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    211a:	6e e6       	ldi	r22, 0x6E	; 110
    211c:	88 e8       	ldi	r24, 0x88	; 136
    211e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    2122:	8a e4       	ldi	r24, 0x4A	; 74
    2124:	94 eb       	ldi	r25, 0xB4	; 180
    2126:	9f 93       	push	r25
    2128:	8f 93       	push	r24
    212a:	ce 01       	movw	r24, r28
    212c:	01 96       	adiw	r24, 0x01	; 1
    212e:	9f 93       	push	r25
    2130:	8f 93       	push	r24
    2132:	08 96       	adiw	r24, 0x08	; 8
    2134:	9f 93       	push	r25
    2136:	8f 93       	push	r24
    2138:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			break;
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	29 c0       	rjmp	.+82     	; 0x219c <open_PNEU+0x132>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    214a:	6e ec       	ldi	r22, 0xCE	; 206
    214c:	82 e2       	ldi	r24, 0x22	; 34
    214e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    2152:	80 e5       	ldi	r24, 0x50	; 80
    2154:	94 eb       	ldi	r25, 0xB4	; 180
    2156:	9f 93       	push	r25
    2158:	8f 93       	push	r24
    215a:	ce 01       	movw	r24, r28
    215c:	01 96       	adiw	r24, 0x01	; 1
    215e:	9f 93       	push	r25
    2160:	8f 93       	push	r24
    2162:	08 96       	adiw	r24, 0x08	; 8
    2164:	9f 93       	push	r25
    2166:	8f 93       	push	r24
    2168:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			break;
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	11 c0       	rjmp	.+34     	; 0x219c <open_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "open_PNEU bad object");
    217a:	63 e8       	ldi	r22, 0x83	; 131
    217c:	74 eb       	ldi	r23, 0xB4	; 180
    217e:	85 ef       	ldi	r24, 0xF5	; 245
    2180:	91 e0       	ldi	r25, 0x01	; 1
    2182:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			strcpy(outbuf, "open what?");
    2186:	8b e0       	ldi	r24, 0x0B	; 11
    2188:	e8 e9       	ldi	r30, 0x98	; 152
    218a:	f4 eb       	ldi	r31, 0xB4	; 180
    218c:	de 01       	movw	r26, r28
    218e:	19 96       	adiw	r26, 0x09	; 9
    2190:	01 90       	ld	r0, Z+
    2192:	0d 92       	st	X+, r0
    2194:	8a 95       	dec	r24
    2196:	e1 f7       	brne	.-8      	; 0x2190 <open_PNEU+0x126>
			return(ERROR);
    2198:	83 e6       	ldi	r24, 0x63	; 99
    219a:	0b c0       	rjmp	.+22     	; 0x21b2 <open_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    21a2:	41 e0       	ldi	r20, 0x01	; 1
    21a4:	be 01       	movw	r22, r28
    21a6:	67 5f       	subi	r22, 0xF7	; 247
    21a8:	7f 4f       	sbci	r23, 0xFF	; 255
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
	return(NOERROR);
    21b0:	80 e0       	ldi	r24, 0x00	; 0

}
    21b2:	69 96       	adiw	r28, 0x19	; 25
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	08 95       	ret

000021be <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    21be:	1f 92       	push	r1
    21c0:	0f 92       	push	r0
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	0f 92       	push	r0
    21c6:	11 24       	eor	r1, r1
    21c8:	2f 93       	push	r18
    21ca:	3f 93       	push	r19
    21cc:	4f 93       	push	r20
    21ce:	5f 93       	push	r21
    21d0:	6f 93       	push	r22
    21d2:	7f 93       	push	r23
    21d4:	8f 93       	push	r24
    21d6:	9f 93       	push	r25
    21d8:	af 93       	push	r26
    21da:	bf 93       	push	r27
    21dc:	ef 93       	push	r30
    21de:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// MCP23008 interrupt
    21e0:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    21e4:	88 23       	and	r24, r24
    21e6:	4c f4       	brge	.+18     	; 0x21fa <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    21e8:	80 e8       	ldi	r24, 0x80	; 128
    21ea:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    21ee:	68 e0       	ldi	r22, 0x08	; 8
    21f0:	81 e2       	ldi	r24, 0x21	; 33
    21f2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <read_MCP23008>
    21f6:	80 93 1a 2a 	sts	0x2A1A, r24	; 0x802a1a <pneuState>
	}

}
    21fa:	ff 91       	pop	r31
    21fc:	ef 91       	pop	r30
    21fe:	bf 91       	pop	r27
    2200:	af 91       	pop	r26
    2202:	9f 91       	pop	r25
    2204:	8f 91       	pop	r24
    2206:	7f 91       	pop	r23
    2208:	6f 91       	pop	r22
    220a:	5f 91       	pop	r21
    220c:	4f 91       	pop	r20
    220e:	3f 91       	pop	r19
    2210:	2f 91       	pop	r18
    2212:	0f 90       	pop	r0
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	0f 90       	pop	r0
    2218:	1f 90       	pop	r1
    221a:	18 95       	reti

0000221c <init_PORTS>:
void init_PORTS(void)
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTB.DIRSET = PIN2_bm;		// Beeper
    221c:	e0 e2       	ldi	r30, 0x20	; 32
    221e:	f4 e0       	ldi	r31, 0x04	; 4
    2220:	94 e0       	ldi	r25, 0x04	; 4
    2222:	91 83       	std	Z+1, r25	; 0x01
	PORTB.DIRSET = PIN3_bm;		// Fan
    2224:	88 e0       	ldi	r24, 0x08	; 8
    2226:	81 83       	std	Z+1, r24	; 0x01
	PORTF.DIRCLR = PIN2_bm;		// specID jumper
    2228:	e0 ea       	ldi	r30, 0xA0	; 160
    222a:	f4 e0       	ldi	r31, 0x04	; 4
    222c:	92 83       	std	Z+2, r25	; 0x02
	PORTF.DIRSET = PIN5_bm;		// On-board LED
    222e:	90 e2       	ldi	r25, 0x20	; 32
    2230:	91 83       	std	Z+1, r25	; 0x01
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton
    2232:	9b e0       	ldi	r25, 0x0B	; 11
    2234:	96 8b       	std	Z+22, r25	; 0x16
	PORTC.OUTCLR = PIN3_bm;		// Reset the XPort
    2236:	e0 e4       	ldi	r30, 0x40	; 64
    2238:	f4 e0       	ldi	r31, 0x04	; 4
    223a:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;		// Set XPort reset pin as output
    223c:	81 83       	std	Z+1, r24	; 0x01
    223e:	a7 ea       	ldi	r26, 0xA7	; 167
    2240:	b1 e6       	ldi	r27, 0x61	; 97
    2242:	11 97       	sbiw	r26, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <init_PORTS+0x26>
    2246:	00 c0       	rjmp	.+0      	; 0x2248 <init_PORTS+0x2c>
    2248:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;		// Enable the XPort
    224a:	85 83       	std	Z+5, r24	; 0x05
    224c:	08 95       	ret

0000224e <report>:

	Returns:
		ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    224e:	2f 92       	push	r2
    2250:	3f 92       	push	r3
    2252:	4f 92       	push	r4
    2254:	5f 92       	push	r5
    2256:	6f 92       	push	r6
    2258:	7f 92       	push	r7
    225a:	8f 92       	push	r8
    225c:	9f 92       	push	r9
    225e:	af 92       	push	r10
    2260:	bf 92       	push	r11
    2262:	cf 92       	push	r12
    2264:	df 92       	push	r13
    2266:	ef 92       	push	r14
    2268:	ff 92       	push	r15
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	c7 50       	subi	r28, 0x07	; 7
    2278:	d4 40       	sbci	r29, 0x04	; 4
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE], version[11];
	char currenttime[20], lastsettime[20], boottime[20], encsavetime[20];
	char shutter, left, right, air, mlimit, mdir;
	const char format_ENV[] = "ENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
    227e:	95 e4       	ldi	r25, 0x45	; 69
    2280:	e6 e3       	ldi	r30, 0x36	; 54
    2282:	f6 eb       	ldi	r31, 0xB6	; 182
    2284:	de 01       	movw	r26, r28
    2286:	a2 5a       	subi	r26, 0xA2	; 162
    2288:	be 4f       	sbci	r27, 0xFE	; 254
    228a:	01 90       	ld	r0, Z+
    228c:	0d 92       	st	X+, r0
    228e:	9a 95       	dec	r25
    2290:	e1 f7       	brne	.-8      	; 0x228a <report+0x3c>
	const char format_MTR[] = "MTR,%s,%c,%ld,um,%ld,um/s,%d,mA,%c,dir,%c,lim,%s";
    2292:	91 e3       	ldi	r25, 0x31	; 49
    2294:	eb e7       	ldi	r30, 0x7B	; 123
    2296:	f6 eb       	ldi	r31, 0xB6	; 182
    2298:	de 01       	movw	r26, r28
    229a:	ad 55       	subi	r26, 0x5D	; 93
    229c:	be 4f       	sbci	r27, 0xFE	; 254
    229e:	01 90       	ld	r0, Z+
    22a0:	0d 92       	st	X+, r0
    22a2:	9a 95       	dec	r25
    22a4:	e1 f7       	brne	.-8      	; 0x229e <report+0x50>
	const char format_MT0[] = "MET,%s,%c,%3.1f,V,%3.1f,C,%s,encSaveTime,%s";	// Motor, Voltage, Save-time
    22a6:	9c e2       	ldi	r25, 0x2C	; 44
    22a8:	ec ea       	ldi	r30, 0xAC	; 172
    22aa:	f6 eb       	ldi	r31, 0xB6	; 182
    22ac:	de 01       	movw	r26, r28
    22ae:	ac 52       	subi	r26, 0x2C	; 44
    22b0:	be 4f       	sbci	r27, 0xFE	; 254
    22b2:	01 90       	ld	r0, Z+
    22b4:	0d 92       	st	X+, r0
    22b6:	9a 95       	dec	r25
    22b8:	e1 f7       	brne	.-8      	; 0x22b2 <report+0x64>
	const char format_MT1[] = "PID,%s,%c,%.2f,P,%.3f,I,%.2f,D,%ld,maxInt,%s";
    22ba:	9d e2       	ldi	r25, 0x2D	; 45
    22bc:	e8 ed       	ldi	r30, 0xD8	; 216
    22be:	f6 eb       	ldi	r31, 0xB6	; 182
    22c0:	de 01       	movw	r26, r28
    22c2:	be 5f       	subi	r27, 0xFE	; 254
    22c4:	01 90       	ld	r0, Z+
    22c6:	0d 92       	st	X+, r0
    22c8:	9a 95       	dec	r25
    22ca:	e1 f7       	brne	.-8      	; 0x22c4 <report+0x76>
	const char format_MT2[] = "DMM,%s,%c,%ld,dead,%ld,minP,%ld,maxP,%ld,qpps,%s";	// Dead, min, max, qpps
    22cc:	91 e3       	ldi	r25, 0x31	; 49
    22ce:	e5 e0       	ldi	r30, 0x05	; 5
    22d0:	f7 eb       	ldi	r31, 0xB7	; 183
    22d2:	de 01       	movw	r26, r28
    22d4:	a3 5d       	subi	r26, 0xD3	; 211
    22d6:	bd 4f       	sbci	r27, 0xFD	; 253
    22d8:	01 90       	ld	r0, Z+
    22da:	0d 92       	st	X+, r0
    22dc:	9a 95       	dec	r25
    22de:	e1 f7       	brne	.-8      	; 0x22d8 <report+0x8a>
	const char format_MT3[] = "MIL,%s,%c,%ld,mA,0x%02x,S4,%s";	// Motor, current, limit function
    22e0:	9e e1       	ldi	r25, 0x1E	; 30
    22e2:	e6 e3       	ldi	r30, 0x36	; 54
    22e4:	f7 eb       	ldi	r31, 0xB7	; 183
    22e6:	de 01       	movw	r26, r28
    22e8:	a2 5a       	subi	r26, 0xA2	; 162
    22ea:	bd 4f       	sbci	r27, 0xFD	; 253
    22ec:	01 90       	ld	r0, Z+
    22ee:	0d 92       	st	X+, r0
    22f0:	9a 95       	dec	r25
    22f2:	e1 f7       	brne	.-8      	; 0x22ec <report+0x9e>
	const char format_ORI[] = "ORI,%s,%3.1f,%3.1f,%3.1f,%s";	// Orientation
    22f4:	9c e1       	ldi	r25, 0x1C	; 28
    22f6:	e4 e5       	ldi	r30, 0x54	; 84
    22f8:	f7 eb       	ldi	r31, 0xB7	; 183
    22fa:	de 01       	movw	r26, r28
    22fc:	a4 58       	subi	r26, 0x84	; 132
    22fe:	bd 4f       	sbci	r27, 0xFD	; 253
    2300:	01 90       	ld	r0, Z+
    2302:	0d 92       	st	X+, r0
    2304:	9a 95       	dec	r25
    2306:	e1 f7       	brne	.-8      	; 0x2300 <report+0xb2>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";				// For display
    2308:	92 e1       	ldi	r25, 0x12	; 18
    230a:	e0 e7       	ldi	r30, 0x70	; 112
    230c:	f7 eb       	ldi	r31, 0xB7	; 183
    230e:	de 01       	movw	r26, r28
    2310:	a8 56       	subi	r26, 0x68	; 104
    2312:	bd 4f       	sbci	r27, 0xFD	; 253
    2314:	01 90       	ld	r0, Z+
    2316:	0d 92       	st	X+, r0
    2318:	9a 95       	dec	r25
    231a:	e1 f7       	brne	.-8      	; 0x2314 <report+0xc6>
	const char format_PNU[] = "PNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";	// Pneumatics
    231c:	9d e2       	ldi	r25, 0x2D	; 45
    231e:	e2 e8       	ldi	r30, 0x82	; 130
    2320:	f7 eb       	ldi	r31, 0xB7	; 183
    2322:	de 01       	movw	r26, r28
    2324:	a6 55       	subi	r26, 0x56	; 86
    2326:	bd 4f       	sbci	r27, 0xFD	; 253
    2328:	01 90       	ld	r0, Z+
    232a:	0d 92       	st	X+, r0
    232c:	9a 95       	dec	r25
    232e:	e1 f7       	brne	.-8      	; 0x2328 <report+0xda>
	const char dformat_PN1[] = "Left:%c   Right:%c";
    2330:	93 e1       	ldi	r25, 0x13	; 19
    2332:	ef ea       	ldi	r30, 0xAF	; 175
    2334:	f7 eb       	ldi	r31, 0xB7	; 183
    2336:	de 01       	movw	r26, r28
    2338:	a9 52       	subi	r26, 0x29	; 41
    233a:	bd 4f       	sbci	r27, 0xFD	; 253
    233c:	01 90       	ld	r0, Z+
    233e:	0d 92       	st	X+, r0
    2340:	9a 95       	dec	r25
    2342:	e1 f7       	brne	.-8      	; 0x233c <report+0xee>
	const char dformat_PN2[] = "Shutter:%c  Air:%c";
    2344:	93 e1       	ldi	r25, 0x13	; 19
    2346:	e2 ec       	ldi	r30, 0xC2	; 194
    2348:	f7 eb       	ldi	r31, 0xB7	; 183
    234a:	de 01       	movw	r26, r28
    234c:	a6 51       	subi	r26, 0x16	; 22
    234e:	bd 4f       	sbci	r27, 0xFD	; 253
    2350:	01 90       	ld	r0, Z+
    2352:	0d 92       	st	X+, r0
    2354:	9a 95       	dec	r25
    2356:	e1 f7       	brne	.-8      	; 0x2350 <report+0x102>
	const char format_TIM[] = "TIM,%s,%s,set,%s,boot,%s";	// Time
    2358:	99 e1       	ldi	r25, 0x19	; 25
    235a:	e5 ed       	ldi	r30, 0xD5	; 213
    235c:	f7 eb       	ldi	r31, 0xB7	; 183
    235e:	de 01       	movw	r26, r28
    2360:	a3 50       	subi	r26, 0x03	; 3
    2362:	bd 4f       	sbci	r27, 0xFD	; 253
    2364:	01 90       	ld	r0, Z+
    2366:	0d 92       	st	X+, r0
    2368:	9a 95       	dec	r25
    236a:	e1 f7       	brne	.-8      	; 0x2364 <report+0x116>
	const char format_VAC[] = "VAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";	// Vacuum
    236c:	95 e2       	ldi	r25, 0x25	; 37
    236e:	ee ee       	ldi	r30, 0xEE	; 238
    2370:	f7 eb       	ldi	r31, 0xB7	; 183
    2372:	de 01       	movw	r26, r28
    2374:	aa 5e       	subi	r26, 0xEA	; 234
    2376:	bc 4f       	sbci	r27, 0xFC	; 252
    2378:	01 90       	ld	r0, Z+
    237a:	0d 92       	st	X+, r0
    237c:	9a 95       	dec	r25
    237e:	e1 f7       	brne	.-8      	; 0x2378 <report+0x12a>
	const char dformat_VAC[] = "%5.2f  %5.2f";
    2380:	9d e0       	ldi	r25, 0x0D	; 13
    2382:	e3 e1       	ldi	r30, 0x13	; 19
    2384:	f8 eb       	ldi	r31, 0xB8	; 184
    2386:	de 01       	movw	r26, r28
    2388:	a5 5c       	subi	r26, 0xC5	; 197
    238a:	bc 4f       	sbci	r27, 0xFC	; 252
    238c:	01 90       	ld	r0, Z+
    238e:	0d 92       	st	X+, r0
    2390:	9a 95       	dec	r25
    2392:	e1 f7       	brne	.-8      	; 0x238c <report+0x13e>
	const char format_VER[] = "VER,%s,%s,%s";	// Version
    2394:	9d e0       	ldi	r25, 0x0D	; 13
    2396:	e0 e2       	ldi	r30, 0x20	; 32
    2398:	f8 eb       	ldi	r31, 0xB8	; 184
    239a:	de 01       	movw	r26, r28
    239c:	a8 5b       	subi	r26, 0xB8	; 184
    239e:	bc 4f       	sbci	r27, 0xFC	; 252
    23a0:	01 90       	ld	r0, Z+
    23a2:	0d 92       	st	X+, r0
    23a4:	9a 95       	dec	r25
    23a6:	e1 f7       	brne	.-8      	; 0x23a0 <report+0x152>
	uint16_t motorCurrent;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	PID pid;

	switch(pcmd[cstack].cobject) {
    23a8:	08 2f       	mov	r16, r24
    23aa:	10 e0       	ldi	r17, 0x00	; 0
    23ac:	84 e3       	ldi	r24, 0x34	; 52
    23ae:	80 9f       	mul	r24, r16
    23b0:	f0 01       	movw	r30, r0
    23b2:	81 9f       	mul	r24, r17
    23b4:	f0 0d       	add	r31, r0
    23b6:	11 24       	eor	r1, r1
    23b8:	e1 5f       	subi	r30, 0xF1	; 241
    23ba:	f7 4d       	sbci	r31, 0xD7	; 215
    23bc:	e1 81       	ldd	r30, Z+1	; 0x01
    23be:	8e 2f       	mov	r24, r30
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	fc 01       	movw	r30, r24
    23c4:	e1 54       	subi	r30, 0x41	; 65
    23c6:	f1 09       	sbc	r31, r1
    23c8:	e6 33       	cpi	r30, 0x36	; 54
    23ca:	f1 05       	cpc	r31, r1
    23cc:	08 f0       	brcs	.+2      	; 0x23d0 <report+0x182>
    23ce:	4c c7       	rjmp	.+3736   	; 0x3268 <report+0x101a>
    23d0:	e3 58       	subi	r30, 0x83	; 131
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	0c 94 32 36 	jmp	0x6c64	; 0x6c64 <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    23d8:	ce 01       	movw	r24, r28
    23da:	86 5f       	subi	r24, 0xF6	; 246
    23dc:	9e 4f       	sbci	r25, 0xFE	; 254
    23de:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
			controller = pcmd[cstack].cobject + 63;
    23e2:	84 e3       	ldi	r24, 0x34	; 52
    23e4:	80 9f       	mul	r24, r16
    23e6:	f0 01       	movw	r30, r0
    23e8:	81 9f       	mul	r24, r17
    23ea:	f0 0d       	add	r31, r0
    23ec:	11 24       	eor	r1, r1
    23ee:	e1 5f       	subi	r30, 0xF1	; 241
    23f0:	f7 4d       	sbci	r31, 0xD7	; 215
    23f2:	d1 80       	ldd	r13, Z+1	; 0x01
    23f4:	0f 2e       	mov	r0, r31
    23f6:	ff e3       	ldi	r31, 0x3F	; 63
    23f8:	ef 2e       	mov	r14, r31
    23fa:	f0 2d       	mov	r31, r0
    23fc:	ed 0c       	add	r14, r13

			if (get_MOTOR_FLOAT(controller, READMAINVOLTAGE, &voltage) == ERROR) {
    23fe:	ae 01       	movw	r20, r28
    2400:	46 53       	subi	r20, 0x36	; 54
    2402:	5c 4f       	sbci	r21, 0xFC	; 252
    2404:	68 e1       	ldi	r22, 0x18	; 24
    2406:	8e 2d       	mov	r24, r14
    2408:	0e 94 39 1c 	call	0x3872	; 0x3872 <get_MOTOR_FLOAT>
    240c:	f8 2e       	mov	r15, r24
    240e:	83 e6       	ldi	r24, 0x63	; 99
    2410:	f8 12       	cpse	r15, r24
    2412:	07 c0       	rjmp	.+14     	; 0x2422 <report+0x1d4>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT volts error");
    2414:	6b ea       	ldi	r22, 0xAB	; 171
    2416:	74 eb       	ldi	r23, 0xB4	; 180
    2418:	86 e3       	ldi	r24, 0x36	; 54
    241a:	91 e0       	ldi	r25, 0x01	; 1
    241c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    2420:	2f c7       	rjmp	.+3678   	; 0x3280 <report+0x1032>
			}

			if (get_FRAM_ENCSAVETIME(encsavetime) == ERROR) {
    2422:	ce 01       	movw	r24, r28
    2424:	8a 5b       	subi	r24, 0xBA	; 186
    2426:	9e 4f       	sbci	r25, 0xFE	; 254
    2428:	0e 94 7d 19 	call	0x32fa	; 0x32fa <get_FRAM_ENCSAVETIME>
    242c:	f8 2e       	mov	r15, r24
    242e:	93 e6       	ldi	r25, 0x63	; 99
    2430:	89 13       	cpse	r24, r25
    2432:	11 c0       	rjmp	.+34     	; 0x2456 <report+0x208>
				sprintf(outbuf, "report: get_FRAM_ENCSAVEIME error");
    2434:	82 e2       	ldi	r24, 0x22	; 34
    2436:	ef ec       	ldi	r30, 0xCF	; 207
    2438:	f4 eb       	ldi	r31, 0xB4	; 180
    243a:	de 01       	movw	r26, r28
    243c:	11 96       	adiw	r26, 0x01	; 1
    243e:	01 90       	ld	r0, Z+
    2440:	0d 92       	st	X+, r0
    2442:	8a 95       	dec	r24
    2444:	e1 f7       	brne	.-8      	; 0x243e <report+0x1f0>
				printError(ERR_MTR, outbuf);
    2446:	be 01       	movw	r22, r28
    2448:	6f 5f       	subi	r22, 0xFF	; 255
    244a:	7f 4f       	sbci	r23, 0xFF	; 255
    244c:	86 e3       	ldi	r24, 0x36	; 54
    244e:	91 e0       	ldi	r25, 0x01	; 1
    2450:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    2454:	15 c7       	rjmp	.+3626   	; 0x3280 <report+0x1032>
			}

			if (get_MOTOR_FLOAT(controller, READTEMPERATURE, &t0) == ERROR) {
    2456:	ae 01       	movw	r20, r28
    2458:	4a 53       	subi	r20, 0x3A	; 58
    245a:	5c 4f       	sbci	r21, 0xFC	; 252
    245c:	62 e5       	ldi	r22, 0x52	; 82
    245e:	8e 2d       	mov	r24, r14
    2460:	0e 94 39 1c 	call	0x3872	; 0x3872 <get_MOTOR_FLOAT>
    2464:	f8 2e       	mov	r15, r24
    2466:	83 e6       	ldi	r24, 0x63	; 99
    2468:	f8 12       	cpse	r15, r24
    246a:	07 c0       	rjmp	.+14     	; 0x247a <report+0x22c>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT temperature error");
    246c:	61 ef       	ldi	r22, 0xF1	; 241
    246e:	74 eb       	ldi	r23, 0xB4	; 180
    2470:	86 e3       	ldi	r24, 0x36	; 54
    2472:	91 e0       	ldi	r25, 0x01	; 1
    2474:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    2478:	03 c7       	rjmp	.+3590   	; 0x3280 <report+0x1032>
			}

			if (get_MOTOR_MAXCURRENT(controller, &maxCurrent) == ERROR) {
    247a:	be 01       	movw	r22, r28
    247c:	6e 53       	subi	r22, 0x3E	; 62
    247e:	7c 4f       	sbci	r23, 0xFC	; 252
    2480:	8e 2d       	mov	r24, r14
    2482:	0e 94 ad 1c 	call	0x395a	; 0x395a <get_MOTOR_MAXCURRENT>
    2486:	f8 2e       	mov	r15, r24
    2488:	93 e6       	ldi	r25, 0x63	; 99
    248a:	89 13       	cpse	r24, r25
    248c:	07 c0       	rjmp	.+14     	; 0x249c <report+0x24e>
				printError(ERR_MTR, "report: get_MOTOR_MAXCURRENT error");
    248e:	6b e1       	ldi	r22, 0x1B	; 27
    2490:	75 eb       	ldi	r23, 0xB5	; 181
    2492:	86 e3       	ldi	r24, 0x36	; 54
    2494:	91 e0       	ldi	r25, 0x01	; 1
    2496:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    249a:	f2 c6       	rjmp	.+3556   	; 0x3280 <report+0x1032>
			}

			if (get_MOTOR_S4MODE(controller, &s4mode) == ERROR) {
    249c:	be 01       	movw	r22, r28
    249e:	67 54       	subi	r22, 0x47	; 71
    24a0:	7c 4f       	sbci	r23, 0xFC	; 252
    24a2:	8e 2d       	mov	r24, r14
    24a4:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <get_MOTOR_S4MODE>
    24a8:	f8 2e       	mov	r15, r24
    24aa:	83 e6       	ldi	r24, 0x63	; 99
    24ac:	f8 12       	cpse	r15, r24
    24ae:	07 c0       	rjmp	.+14     	; 0x24be <report+0x270>
				printError(ERR_MTR, "report: get_MOTOR_S4MODE error");
    24b0:	6e e3       	ldi	r22, 0x3E	; 62
    24b2:	75 eb       	ldi	r23, 0xB5	; 181
    24b4:	86 e3       	ldi	r24, 0x36	; 54
    24b6:	91 e0       	ldi	r25, 0x01	; 1
    24b8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    24bc:	e1 c6       	rjmp	.+3522   	; 0x3280 <report+0x1032>
			}

			if (get_MOTOR_PID(controller, &pid) == ERROR) {
    24be:	be 01       	movw	r22, r28
    24c0:	64 52       	subi	r22, 0x24	; 36
    24c2:	7c 4f       	sbci	r23, 0xFC	; 252
    24c4:	8e 2d       	mov	r24, r14
    24c6:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <get_MOTOR_PID>
    24ca:	f8 2e       	mov	r15, r24
    24cc:	93 e6       	ldi	r25, 0x63	; 99
    24ce:	89 13       	cpse	r24, r25
    24d0:	07 c0       	rjmp	.+14     	; 0x24e0 <report+0x292>
				printError(ERR_MTR, "report: get_MOTOR_PID error");
    24d2:	6d e5       	ldi	r22, 0x5D	; 93
    24d4:	75 eb       	ldi	r23, 0xB5	; 181
    24d6:	86 e3       	ldi	r24, 0x36	; 54
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    24de:	d0 c6       	rjmp	.+3488   	; 0x3280 <report+0x1032>
			}

			sprintf(outbuf, format_MT0, currenttime, (char) (controller-63),
			voltage, t0, encsavetime, pcmd[cstack].cid);
    24e0:	24 e3       	ldi	r18, 0x34	; 52
    24e2:	20 9f       	mul	r18, r16
    24e4:	c0 01       	movw	r24, r0
    24e6:	21 9f       	mul	r18, r17
    24e8:	90 0d       	add	r25, r0
    24ea:	11 24       	eor	r1, r1
    24ec:	8c 01       	movw	r16, r24
    24ee:	06 5c       	subi	r16, 0xC6	; 198
    24f0:	17 4d       	sbci	r17, 0xD7	; 215
			if (get_MOTOR_PID(controller, &pid) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_PID error");
				return(ERROR);
			}

			sprintf(outbuf, format_MT0, currenttime, (char) (controller-63),
    24f2:	1f 93       	push	r17
    24f4:	0f 93       	push	r16
    24f6:	ce 01       	movw	r24, r28
    24f8:	8a 5b       	subi	r24, 0xBA	; 186
    24fa:	9e 4f       	sbci	r25, 0xFE	; 254
    24fc:	9f 93       	push	r25
    24fe:	8f 93       	push	r24
    2500:	c7 53       	subi	r28, 0x37	; 55
    2502:	dc 4f       	sbci	r29, 0xFC	; 252
    2504:	88 81       	ld	r24, Y
    2506:	c9 5c       	subi	r28, 0xC9	; 201
    2508:	d3 40       	sbci	r29, 0x03	; 3
    250a:	8f 93       	push	r24
    250c:	c8 53       	subi	r28, 0x38	; 56
    250e:	dc 4f       	sbci	r29, 0xFC	; 252
    2510:	88 81       	ld	r24, Y
    2512:	c8 5c       	subi	r28, 0xC8	; 200
    2514:	d3 40       	sbci	r29, 0x03	; 3
    2516:	8f 93       	push	r24
    2518:	c9 53       	subi	r28, 0x39	; 57
    251a:	dc 4f       	sbci	r29, 0xFC	; 252
    251c:	88 81       	ld	r24, Y
    251e:	c7 5c       	subi	r28, 0xC7	; 199
    2520:	d3 40       	sbci	r29, 0x03	; 3
    2522:	8f 93       	push	r24
    2524:	ca 53       	subi	r28, 0x3A	; 58
    2526:	dc 4f       	sbci	r29, 0xFC	; 252
    2528:	88 81       	ld	r24, Y
    252a:	c6 5c       	subi	r28, 0xC6	; 198
    252c:	d3 40       	sbci	r29, 0x03	; 3
    252e:	8f 93       	push	r24
    2530:	c3 53       	subi	r28, 0x33	; 51
    2532:	dc 4f       	sbci	r29, 0xFC	; 252
    2534:	88 81       	ld	r24, Y
    2536:	cd 5c       	subi	r28, 0xCD	; 205
    2538:	d3 40       	sbci	r29, 0x03	; 3
    253a:	8f 93       	push	r24
    253c:	c4 53       	subi	r28, 0x34	; 52
    253e:	dc 4f       	sbci	r29, 0xFC	; 252
    2540:	88 81       	ld	r24, Y
    2542:	cc 5c       	subi	r28, 0xCC	; 204
    2544:	d3 40       	sbci	r29, 0x03	; 3
    2546:	8f 93       	push	r24
    2548:	c5 53       	subi	r28, 0x35	; 53
    254a:	dc 4f       	sbci	r29, 0xFC	; 252
    254c:	88 81       	ld	r24, Y
    254e:	cb 5c       	subi	r28, 0xCB	; 203
    2550:	d3 40       	sbci	r29, 0x03	; 3
    2552:	8f 93       	push	r24
    2554:	c6 53       	subi	r28, 0x36	; 54
    2556:	dc 4f       	sbci	r29, 0xFC	; 252
    2558:	88 81       	ld	r24, Y
    255a:	ca 5c       	subi	r28, 0xCA	; 202
    255c:	d3 40       	sbci	r29, 0x03	; 3
    255e:	8f 93       	push	r24
    2560:	1f 92       	push	r1
    2562:	df 92       	push	r13
    2564:	5e 01       	movw	r10, r28
    2566:	86 ef       	ldi	r24, 0xF6	; 246
    2568:	a8 1a       	sub	r10, r24
    256a:	8e ef       	ldi	r24, 0xFE	; 254
    256c:	b8 0a       	sbc	r11, r24
    256e:	bf 92       	push	r11
    2570:	af 92       	push	r10
    2572:	ce 01       	movw	r24, r28
    2574:	8c 52       	subi	r24, 0x2C	; 44
    2576:	9e 4f       	sbci	r25, 0xFE	; 254
    2578:	9f 93       	push	r25
    257a:	8f 93       	push	r24
    257c:	83 5d       	subi	r24, 0xD3	; 211
    257e:	91 40       	sbci	r25, 0x01	; 1
    2580:	7c 01       	movw	r14, r24
    2582:	9f 93       	push	r25
    2584:	8f 93       	push	r24
    2586:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			voltage, t0, encsavetime, pcmd[cstack].cid);
			printLine(outbuf);
    258a:	c7 01       	movw	r24, r14
    258c:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>

			sprintf(outbuf, format_MT3, currenttime, (char) (controller-63),
    2590:	1f 93       	push	r17
    2592:	0f 93       	push	r16
    2594:	c7 54       	subi	r28, 0x47	; 71
    2596:	dc 4f       	sbci	r29, 0xFC	; 252
    2598:	88 81       	ld	r24, Y
    259a:	c9 5b       	subi	r28, 0xB9	; 185
    259c:	d3 40       	sbci	r29, 0x03	; 3
    259e:	1f 92       	push	r1
    25a0:	8f 93       	push	r24
    25a2:	cb 53       	subi	r28, 0x3B	; 59
    25a4:	dc 4f       	sbci	r29, 0xFC	; 252
    25a6:	88 81       	ld	r24, Y
    25a8:	c5 5c       	subi	r28, 0xC5	; 197
    25aa:	d3 40       	sbci	r29, 0x03	; 3
    25ac:	8f 93       	push	r24
    25ae:	cc 53       	subi	r28, 0x3C	; 60
    25b0:	dc 4f       	sbci	r29, 0xFC	; 252
    25b2:	88 81       	ld	r24, Y
    25b4:	c4 5c       	subi	r28, 0xC4	; 196
    25b6:	d3 40       	sbci	r29, 0x03	; 3
    25b8:	8f 93       	push	r24
    25ba:	cd 53       	subi	r28, 0x3D	; 61
    25bc:	dc 4f       	sbci	r29, 0xFC	; 252
    25be:	88 81       	ld	r24, Y
    25c0:	c3 5c       	subi	r28, 0xC3	; 195
    25c2:	d3 40       	sbci	r29, 0x03	; 3
    25c4:	8f 93       	push	r24
    25c6:	ce 53       	subi	r28, 0x3E	; 62
    25c8:	dc 4f       	sbci	r29, 0xFC	; 252
    25ca:	88 81       	ld	r24, Y
    25cc:	c2 5c       	subi	r28, 0xC2	; 194
    25ce:	d3 40       	sbci	r29, 0x03	; 3
    25d0:	8f 93       	push	r24
    25d2:	1f 92       	push	r1
    25d4:	df 92       	push	r13
    25d6:	bf 92       	push	r11
    25d8:	af 92       	push	r10
    25da:	ce 01       	movw	r24, r28
    25dc:	82 5a       	subi	r24, 0xA2	; 162
    25de:	9d 4f       	sbci	r25, 0xFD	; 253
    25e0:	9f 93       	push	r25
    25e2:	8f 93       	push	r24
    25e4:	ff 92       	push	r15
    25e6:	ef 92       	push	r14
    25e8:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			maxCurrent, s4mode, pcmd[cstack].cid);
			printLine(outbuf);
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	c7 01       	movw	r24, r14
    25f2:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>

			sprintf(outbuf, format_MT1, currenttime, (char) (controller-63),
			pid.p, pid.i, pid.d, pid.maxI, pcmd[cstack].cid);
    25f6:	cc 51       	subi	r28, 0x1C	; 28
    25f8:	dc 4f       	sbci	r29, 0xFC	; 252
    25fa:	e8 81       	ld	r30, Y
    25fc:	c4 5e       	subi	r28, 0xE4	; 228
    25fe:	d3 40       	sbci	r29, 0x03	; 3
    2600:	cb 51       	subi	r28, 0x1B	; 27
    2602:	dc 4f       	sbci	r29, 0xFC	; 252
    2604:	f8 81       	ld	r31, Y
    2606:	c5 5e       	subi	r28, 0xE5	; 229
    2608:	d3 40       	sbci	r29, 0x03	; 3
    260a:	ca 51       	subi	r28, 0x1A	; 26
    260c:	dc 4f       	sbci	r29, 0xFC	; 252
    260e:	a8 81       	ld	r26, Y
    2610:	c6 5e       	subi	r28, 0xE6	; 230
    2612:	d3 40       	sbci	r29, 0x03	; 3
    2614:	c9 51       	subi	r28, 0x19	; 25
    2616:	dc 4f       	sbci	r29, 0xFC	; 252
    2618:	b8 81       	ld	r27, Y
    261a:	c7 5e       	subi	r28, 0xE7	; 231
    261c:	d3 40       	sbci	r29, 0x03	; 3
    261e:	c0 52       	subi	r28, 0x20	; 32
    2620:	dc 4f       	sbci	r29, 0xFC	; 252
    2622:	48 81       	ld	r20, Y
    2624:	c0 5e       	subi	r28, 0xE0	; 224
    2626:	d3 40       	sbci	r29, 0x03	; 3
    2628:	cf 51       	subi	r28, 0x1F	; 31
    262a:	dc 4f       	sbci	r29, 0xFC	; 252
    262c:	58 81       	ld	r21, Y
    262e:	c1 5e       	subi	r28, 0xE1	; 225
    2630:	d3 40       	sbci	r29, 0x03	; 3
    2632:	ce 51       	subi	r28, 0x1E	; 30
    2634:	dc 4f       	sbci	r29, 0xFC	; 252
    2636:	68 81       	ld	r22, Y
    2638:	c2 5e       	subi	r28, 0xE2	; 226
    263a:	d3 40       	sbci	r29, 0x03	; 3
    263c:	cd 51       	subi	r28, 0x1D	; 29
    263e:	dc 4f       	sbci	r29, 0xFC	; 252
    2640:	78 81       	ld	r23, Y
    2642:	c3 5e       	subi	r28, 0xE3	; 227
    2644:	d3 40       	sbci	r29, 0x03	; 3
    2646:	c4 52       	subi	r28, 0x24	; 36
    2648:	dc 4f       	sbci	r29, 0xFC	; 252
    264a:	88 81       	ld	r24, Y
    264c:	cc 5d       	subi	r28, 0xDC	; 220
    264e:	d3 40       	sbci	r29, 0x03	; 3
    2650:	c3 52       	subi	r28, 0x23	; 35
    2652:	dc 4f       	sbci	r29, 0xFC	; 252
    2654:	98 81       	ld	r25, Y
    2656:	cd 5d       	subi	r28, 0xDD	; 221
    2658:	d3 40       	sbci	r29, 0x03	; 3
    265a:	c2 52       	subi	r28, 0x22	; 34
    265c:	dc 4f       	sbci	r29, 0xFC	; 252
    265e:	28 81       	ld	r18, Y
    2660:	ce 5d       	subi	r28, 0xDE	; 222
    2662:	d3 40       	sbci	r29, 0x03	; 3
    2664:	c1 52       	subi	r28, 0x21	; 33
    2666:	dc 4f       	sbci	r29, 0xFC	; 252
    2668:	38 81       	ld	r19, Y
    266a:	cf 5d       	subi	r28, 0xDF	; 223
    266c:	d3 40       	sbci	r29, 0x03	; 3

			sprintf(outbuf, format_MT3, currenttime, (char) (controller-63),
			maxCurrent, s4mode, pcmd[cstack].cid);
			printLine(outbuf);

			sprintf(outbuf, format_MT1, currenttime, (char) (controller-63),
    266e:	1f 93       	push	r17
    2670:	0f 93       	push	r16
    2672:	c5 51       	subi	r28, 0x15	; 21
    2674:	dc 4f       	sbci	r29, 0xFC	; 252
    2676:	c8 80       	ld	r12, Y
    2678:	cb 5e       	subi	r28, 0xEB	; 235
    267a:	d3 40       	sbci	r29, 0x03	; 3
    267c:	cf 92       	push	r12
    267e:	c6 51       	subi	r28, 0x16	; 22
    2680:	dc 4f       	sbci	r29, 0xFC	; 252
    2682:	c8 80       	ld	r12, Y
    2684:	ca 5e       	subi	r28, 0xEA	; 234
    2686:	d3 40       	sbci	r29, 0x03	; 3
    2688:	cf 92       	push	r12
    268a:	c7 51       	subi	r28, 0x17	; 23
    268c:	dc 4f       	sbci	r29, 0xFC	; 252
    268e:	c8 80       	ld	r12, Y
    2690:	c9 5e       	subi	r28, 0xE9	; 233
    2692:	d3 40       	sbci	r29, 0x03	; 3
    2694:	cf 92       	push	r12
    2696:	c8 51       	subi	r28, 0x18	; 24
    2698:	dc 4f       	sbci	r29, 0xFC	; 252
    269a:	c8 80       	ld	r12, Y
    269c:	c8 5e       	subi	r28, 0xE8	; 232
    269e:	d3 40       	sbci	r29, 0x03	; 3
    26a0:	cf 92       	push	r12
    26a2:	bf 93       	push	r27
    26a4:	af 93       	push	r26
    26a6:	ff 93       	push	r31
    26a8:	ef 93       	push	r30
    26aa:	7f 93       	push	r23
    26ac:	6f 93       	push	r22
    26ae:	5f 93       	push	r21
    26b0:	4f 93       	push	r20
    26b2:	3f 93       	push	r19
    26b4:	2f 93       	push	r18
    26b6:	9f 93       	push	r25
    26b8:	8f 93       	push	r24
    26ba:	1f 92       	push	r1
    26bc:	df 92       	push	r13
    26be:	bf 92       	push	r11
    26c0:	af 92       	push	r10
    26c2:	ce 01       	movw	r24, r28
    26c4:	9e 5f       	subi	r25, 0xFE	; 254
    26c6:	9f 93       	push	r25
    26c8:	8f 93       	push	r24
    26ca:	ff 92       	push	r15
    26cc:	ef 92       	push	r14
    26ce:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			pid.p, pid.i, pid.d, pid.maxI, pcmd[cstack].cid);
			printLine(outbuf);
    26d2:	c7 01       	movw	r24, r14
    26d4:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>

			sprintf(outbuf, format_MT2, currenttime, (char) (controller-63),
    26d8:	1f 93       	push	r17
    26da:	0f 93       	push	r16
    26dc:	c5 50       	subi	r28, 0x05	; 5
    26de:	dc 4f       	sbci	r29, 0xFC	; 252
    26e0:	88 81       	ld	r24, Y
    26e2:	cb 5f       	subi	r28, 0xFB	; 251
    26e4:	d3 40       	sbci	r29, 0x03	; 3
    26e6:	8f 93       	push	r24
    26e8:	c6 50       	subi	r28, 0x06	; 6
    26ea:	dc 4f       	sbci	r29, 0xFC	; 252
    26ec:	88 81       	ld	r24, Y
    26ee:	ca 5f       	subi	r28, 0xFA	; 250
    26f0:	d3 40       	sbci	r29, 0x03	; 3
    26f2:	8f 93       	push	r24
    26f4:	c7 50       	subi	r28, 0x07	; 7
    26f6:	dc 4f       	sbci	r29, 0xFC	; 252
    26f8:	88 81       	ld	r24, Y
    26fa:	c9 5f       	subi	r28, 0xF9	; 249
    26fc:	d3 40       	sbci	r29, 0x03	; 3
    26fe:	8f 93       	push	r24
    2700:	c8 50       	subi	r28, 0x08	; 8
    2702:	dc 4f       	sbci	r29, 0xFC	; 252
    2704:	88 81       	ld	r24, Y
    2706:	c8 5f       	subi	r28, 0xF8	; 248
    2708:	d3 40       	sbci	r29, 0x03	; 3
    270a:	8f 93       	push	r24
    270c:	c9 50       	subi	r28, 0x09	; 9
    270e:	dc 4f       	sbci	r29, 0xFC	; 252
    2710:	88 81       	ld	r24, Y
    2712:	c7 5f       	subi	r28, 0xF7	; 247
    2714:	d3 40       	sbci	r29, 0x03	; 3
    2716:	8f 93       	push	r24
    2718:	ca 50       	subi	r28, 0x0A	; 10
    271a:	dc 4f       	sbci	r29, 0xFC	; 252
    271c:	88 81       	ld	r24, Y
    271e:	c6 5f       	subi	r28, 0xF6	; 246
    2720:	d3 40       	sbci	r29, 0x03	; 3
    2722:	8f 93       	push	r24
    2724:	cb 50       	subi	r28, 0x0B	; 11
    2726:	dc 4f       	sbci	r29, 0xFC	; 252
    2728:	88 81       	ld	r24, Y
    272a:	c5 5f       	subi	r28, 0xF5	; 245
    272c:	d3 40       	sbci	r29, 0x03	; 3
    272e:	8f 93       	push	r24
    2730:	cc 50       	subi	r28, 0x0C	; 12
    2732:	dc 4f       	sbci	r29, 0xFC	; 252
    2734:	88 81       	ld	r24, Y
    2736:	c4 5f       	subi	r28, 0xF4	; 244
    2738:	d3 40       	sbci	r29, 0x03	; 3
    273a:	8f 93       	push	r24
    273c:	cd 50       	subi	r28, 0x0D	; 13
    273e:	dc 4f       	sbci	r29, 0xFC	; 252
    2740:	88 81       	ld	r24, Y
    2742:	c3 5f       	subi	r28, 0xF3	; 243
    2744:	d3 40       	sbci	r29, 0x03	; 3
    2746:	8f 93       	push	r24
    2748:	ce 50       	subi	r28, 0x0E	; 14
    274a:	dc 4f       	sbci	r29, 0xFC	; 252
    274c:	88 81       	ld	r24, Y
    274e:	c2 5f       	subi	r28, 0xF2	; 242
    2750:	d3 40       	sbci	r29, 0x03	; 3
    2752:	8f 93       	push	r24
    2754:	cf 50       	subi	r28, 0x0F	; 15
    2756:	dc 4f       	sbci	r29, 0xFC	; 252
    2758:	88 81       	ld	r24, Y
    275a:	c1 5f       	subi	r28, 0xF1	; 241
    275c:	d3 40       	sbci	r29, 0x03	; 3
    275e:	8f 93       	push	r24
    2760:	c0 51       	subi	r28, 0x10	; 16
    2762:	dc 4f       	sbci	r29, 0xFC	; 252
    2764:	88 81       	ld	r24, Y
    2766:	c0 5f       	subi	r28, 0xF0	; 240
    2768:	d3 40       	sbci	r29, 0x03	; 3
    276a:	8f 93       	push	r24
    276c:	c1 51       	subi	r28, 0x11	; 17
    276e:	dc 4f       	sbci	r29, 0xFC	; 252
    2770:	88 81       	ld	r24, Y
    2772:	cf 5e       	subi	r28, 0xEF	; 239
    2774:	d3 40       	sbci	r29, 0x03	; 3
    2776:	8f 93       	push	r24
    2778:	c2 51       	subi	r28, 0x12	; 18
    277a:	dc 4f       	sbci	r29, 0xFC	; 252
    277c:	88 81       	ld	r24, Y
    277e:	ce 5e       	subi	r28, 0xEE	; 238
    2780:	d3 40       	sbci	r29, 0x03	; 3
    2782:	8f 93       	push	r24
    2784:	c3 51       	subi	r28, 0x13	; 19
    2786:	dc 4f       	sbci	r29, 0xFC	; 252
    2788:	88 81       	ld	r24, Y
    278a:	cd 5e       	subi	r28, 0xED	; 237
    278c:	d3 40       	sbci	r29, 0x03	; 3
    278e:	8f 93       	push	r24
    2790:	c4 51       	subi	r28, 0x14	; 20
    2792:	dc 4f       	sbci	r29, 0xFC	; 252
    2794:	88 81       	ld	r24, Y
    2796:	cc 5e       	subi	r28, 0xEC	; 236
    2798:	d3 40       	sbci	r29, 0x03	; 3
    279a:	8f 93       	push	r24
    279c:	1f 92       	push	r1
    279e:	df 92       	push	r13
    27a0:	bf 92       	push	r11
    27a2:	af 92       	push	r10
    27a4:	ce 01       	movw	r24, r28
    27a6:	83 5d       	subi	r24, 0xD3	; 211
    27a8:	9d 4f       	sbci	r25, 0xFD	; 253
    27aa:	9f 93       	push	r25
    27ac:	8f 93       	push	r24
    27ae:	ff 92       	push	r15
    27b0:	ef 92       	push	r14
    27b2:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
				pid.deadZone, pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
			printLine(outbuf);
    27b6:	cd bf       	out	0x3d, r28	; 61
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	c7 01       	movw	r24, r14
    27bc:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    27c0:	f1 2c       	mov	r15, r1

			sprintf(outbuf, format_MT2, currenttime, (char) (controller-63),
				pid.deadZone, pid.minPos, pid.maxPos, pid.qpps, pcmd[cstack].cid);
			printLine(outbuf);

			break;
    27c2:	5e c5       	rjmp	.+2748   	; 0x3280 <report+0x1032>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    27c4:	ce 01       	movw	r24, r28
    27c6:	86 5f       	subi	r24, 0xF6	; 246
    27c8:	9e 4f       	sbci	r25, 0xFE	; 254
    27ca:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
			controller = pcmd[cstack].cobject + 31;
    27ce:	84 e3       	ldi	r24, 0x34	; 52
    27d0:	80 9f       	mul	r24, r16
    27d2:	f0 01       	movw	r30, r0
    27d4:	81 9f       	mul	r24, r17
    27d6:	f0 0d       	add	r31, r0
    27d8:	11 24       	eor	r1, r1
    27da:	e1 5f       	subi	r30, 0xF1	; 241
    27dc:	f7 4d       	sbci	r31, 0xD7	; 215
    27de:	81 81       	ldd	r24, Z+1	; 0x01
    27e0:	0f 2e       	mov	r0, r31
    27e2:	ff e1       	ldi	r31, 0x1F	; 31
    27e4:	ef 2e       	mov	r14, r31
    27e6:	f0 2d       	mov	r31, r0
    27e8:	e8 0e       	add	r14, r24

			if (get_MOTOR_ENCODER(controller, &encoderValue) == ERROR) {
    27ea:	be 01       	movw	r22, r28
    27ec:	66 54       	subi	r22, 0x46	; 70
    27ee:	7c 4f       	sbci	r23, 0xFC	; 252
    27f0:	8e 2d       	mov	r24, r14
    27f2:	0e 94 bd 1b 	call	0x377a	; 0x377a <get_MOTOR_ENCODER>
    27f6:	f8 2e       	mov	r15, r24
    27f8:	93 e6       	ldi	r25, 0x63	; 99
    27fa:	89 13       	cpse	r24, r25
    27fc:	07 c0       	rjmp	.+14     	; 0x280c <report+0x5be>
				printError(ERR_MTR, "report: get_MOTOR_ENCODER error");
    27fe:	69 e7       	ldi	r22, 0x79	; 121
    2800:	75 eb       	ldi	r23, 0xB5	; 181
    2802:	86 e3       	ldi	r24, 0x36	; 54
    2804:	91 e0       	ldi	r25, 0x01	; 1
    2806:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    280a:	3a c5       	rjmp	.+2676   	; 0x3280 <report+0x1032>
			}

			micronValue = encoderValue/ENC_COUNTS_PER_MICRON;
    280c:	c6 54       	subi	r28, 0x46	; 70
    280e:	dc 4f       	sbci	r29, 0xFC	; 252
    2810:	68 81       	ld	r22, Y
    2812:	79 81       	ldd	r23, Y+1	; 0x01
    2814:	8a 81       	ldd	r24, Y+2	; 0x02
    2816:	9b 81       	ldd	r25, Y+3	; 0x03
    2818:	ca 5b       	subi	r28, 0xBA	; 186
    281a:	d3 40       	sbci	r29, 0x03	; 3
    281c:	2b e1       	ldi	r18, 0x1B	; 27
    281e:	31 e0       	ldi	r19, 0x01	; 1
    2820:	40 e0       	ldi	r20, 0x00	; 0
    2822:	50 e0       	ldi	r21, 0x00	; 0
    2824:	0e 94 13 36 	call	0x6c26	; 0x6c26 <__divmodsi4>
    2828:	d2 2e       	mov	r13, r18
    282a:	c3 2e       	mov	r12, r19
    282c:	b4 2e       	mov	r11, r20
    282e:	a5 2e       	mov	r10, r21

			if (get_MOTOR_SPEED(controller, &encoderSpeed) == ERROR) {
    2830:	be 01       	movw	r22, r28
    2832:	62 54       	subi	r22, 0x42	; 66
    2834:	7c 4f       	sbci	r23, 0xFC	; 252
    2836:	8e 2d       	mov	r24, r14
    2838:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <get_MOTOR_SPEED>
    283c:	83 36       	cpi	r24, 0x63	; 99
    283e:	61 f4       	brne	.+24     	; 0x2858 <report+0x60a>
				encoderSpeed = 0x7FFFFFFF;
    2840:	8f ef       	ldi	r24, 0xFF	; 255
    2842:	9f ef       	ldi	r25, 0xFF	; 255
    2844:	af ef       	ldi	r26, 0xFF	; 255
    2846:	bf e7       	ldi	r27, 0x7F	; 127
    2848:	c2 54       	subi	r28, 0x42	; 66
    284a:	dc 4f       	sbci	r29, 0xFC	; 252
    284c:	88 83       	st	Y, r24
    284e:	99 83       	std	Y+1, r25	; 0x01
    2850:	aa 83       	std	Y+2, r26	; 0x02
    2852:	bb 83       	std	Y+3, r27	; 0x03
    2854:	ce 5b       	subi	r28, 0xBE	; 190
    2856:	d3 40       	sbci	r29, 0x03	; 3
			}

			micronSpeed = encoderSpeed/ENC_COUNTS_PER_MICRON;
    2858:	c2 54       	subi	r28, 0x42	; 66
    285a:	dc 4f       	sbci	r29, 0xFC	; 252
    285c:	68 81       	ld	r22, Y
    285e:	79 81       	ldd	r23, Y+1	; 0x01
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	9b 81       	ldd	r25, Y+3	; 0x03
    2864:	ce 5b       	subi	r28, 0xBE	; 190
    2866:	d3 40       	sbci	r29, 0x03	; 3
    2868:	2b e1       	ldi	r18, 0x1B	; 27
    286a:	31 e0       	ldi	r19, 0x01	; 1
    286c:	40 e0       	ldi	r20, 0x00	; 0
    286e:	50 e0       	ldi	r21, 0x00	; 0
    2870:	0e 94 13 36 	call	0x6c26	; 0x6c26 <__divmodsi4>
    2874:	92 2e       	mov	r9, r18
    2876:	83 2e       	mov	r8, r19
    2878:	74 2e       	mov	r7, r20
    287a:	65 2e       	mov	r6, r21

			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
    287c:	be 01       	movw	r22, r28
    287e:	62 53       	subi	r22, 0x32	; 50
    2880:	7c 4f       	sbci	r23, 0xFC	; 252
    2882:	8e 2d       	mov	r24, r14
    2884:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <get_MOTOR_CURRENT>
    2888:	83 36       	cpi	r24, 0x63	; 99
    288a:	71 f4       	brne	.+28     	; 0x28a8 <report+0x65a>
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
    288c:	69 e9       	ldi	r22, 0x99	; 153
    288e:	75 eb       	ldi	r23, 0xB5	; 181
    2890:	86 e3       	ldi	r24, 0x36	; 54
    2892:	91 e0       	ldi	r25, 0x01	; 1
    2894:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				motorCurrent = 0xFFFF;
    2898:	8f ef       	ldi	r24, 0xFF	; 255
    289a:	9f ef       	ldi	r25, 0xFF	; 255
    289c:	c2 53       	subi	r28, 0x32	; 50
    289e:	dc 4f       	sbci	r29, 0xFC	; 252
    28a0:	88 83       	st	Y, r24
    28a2:	99 83       	std	Y+1, r25	; 0x01
    28a4:	ce 5c       	subi	r28, 0xCE	; 206
    28a6:	d3 40       	sbci	r29, 0x03	; 3
			}

			mdir = '?';
			if (motorDir[controller - MOTOR_A] == MTRDIRPOSITIVE) {
    28a8:	f1 2c       	mov	r15, r1
    28aa:	80 e8       	ldi	r24, 0x80	; 128
    28ac:	e8 1a       	sub	r14, r24
    28ae:	f1 08       	sbc	r15, r1
    28b0:	f7 01       	movw	r30, r14
    28b2:	e3 5c       	subi	r30, 0xC3	; 195
    28b4:	f5 4d       	sbci	r31, 0xD5	; 213
    28b6:	80 81       	ld	r24, Z
    28b8:	81 30       	cpi	r24, 0x01	; 1
    28ba:	39 f0       	breq	.+14     	; 0x28ca <report+0x67c>
				mdir = 'F';
			} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
    28bc:	88 23       	and	r24, r24
    28be:	51 f0       	breq	.+20     	; 0x28d4 <report+0x686>
			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
				motorCurrent = 0xFFFF;
			}

			mdir = '?';
    28c0:	0f 2e       	mov	r0, r31
    28c2:	ff e3       	ldi	r31, 0x3F	; 63
    28c4:	5f 2e       	mov	r5, r31
    28c6:	f0 2d       	mov	r31, r0
    28c8:	09 c0       	rjmp	.+18     	; 0x28dc <report+0x68e>
			if (motorDir[controller - MOTOR_A] == MTRDIRPOSITIVE) {
				mdir = 'F';
    28ca:	0f 2e       	mov	r0, r31
    28cc:	f6 e4       	ldi	r31, 0x46	; 70
    28ce:	5f 2e       	mov	r5, r31
    28d0:	f0 2d       	mov	r31, r0
    28d2:	04 c0       	rjmp	.+8      	; 0x28dc <report+0x68e>
			} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
				mdir = 'R';
    28d4:	0f 2e       	mov	r0, r31
    28d6:	f2 e5       	ldi	r31, 0x52	; 82
    28d8:	5f 2e       	mov	r5, r31
    28da:	f0 2d       	mov	r31, r0
			}

			mlimit = '?';
			if (get_MOTOR_LIMITS() == ERROR) {
    28dc:	0e 94 0b 21 	call	0x4216	; 0x4216 <get_MOTOR_LIMITS>
    28e0:	83 36       	cpi	r24, 0x63	; 99
    28e2:	41 f4       	brne	.+16     	; 0x28f4 <report+0x6a6>
				printError(ERR_MTR, "report: get_MOTOR_LIMITS error");
    28e4:	69 eb       	ldi	r22, 0xB9	; 185
    28e6:	75 eb       	ldi	r23, 0xB5	; 181
    28e8:	86 e3       	ldi	r24, 0x36	; 54
    28ea:	91 e0       	ldi	r25, 0x01	; 1
    28ec:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				mdir = 'F';
			} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
				mdir = 'R';
			}

			mlimit = '?';
    28f0:	4f e3       	ldi	r20, 0x3F	; 63
    28f2:	09 c0       	rjmp	.+18     	; 0x2906 <report+0x6b8>
			if (get_MOTOR_LIMITS() == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_LIMITS error");
			} else {
				if (motorLim[controller - MOTOR_A] == YES) {
    28f4:	f7 01       	movw	r30, r14
    28f6:	e0 5c       	subi	r30, 0xC0	; 192
    28f8:	f5 4d       	sbci	r31, 0xD5	; 213
    28fa:	80 81       	ld	r24, Z
    28fc:	81 30       	cpi	r24, 0x01	; 1
    28fe:	11 f4       	brne	.+4      	; 0x2904 <report+0x6b6>
					mlimit = 'Y';
    2900:	49 e5       	ldi	r20, 0x59	; 89
    2902:	01 c0       	rjmp	.+2      	; 0x2906 <report+0x6b8>
				mdir = 'F';
			} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
				mdir = 'R';
			}

			mlimit = '?';
    2904:	4f e3       	ldi	r20, 0x3F	; 63
				} else if (motorLim[controller - MOTOR_A] == MTRLIMUNKNOWN) {
					mlimit = '?';
				}
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
    2906:	24 e3       	ldi	r18, 0x34	; 52
    2908:	20 9f       	mul	r18, r16
    290a:	c0 01       	movw	r24, r0
    290c:	21 9f       	mul	r18, r17
    290e:	90 0d       	add	r25, r0
    2910:	11 24       	eor	r1, r1
    2912:	9c 01       	movw	r18, r24
    2914:	26 5c       	subi	r18, 0xC6	; 198
    2916:	37 4d       	sbci	r19, 0xD7	; 215
					mlimit = 'Y';
				} else if (motorLim[controller - MOTOR_A] == MTRLIMUNKNOWN) {
					mlimit = '?';
				}
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
    2918:	fc 01       	movw	r30, r24
    291a:	e1 5f       	subi	r30, 0xF1	; 241
    291c:	f7 4d       	sbci	r31, 0xD7	; 215
    291e:	81 81       	ldd	r24, Z+1	; 0x01
    2920:	3f 93       	push	r19
    2922:	2f 93       	push	r18
    2924:	1f 92       	push	r1
    2926:	4f 93       	push	r20
    2928:	1f 92       	push	r1
    292a:	5f 92       	push	r5
    292c:	c1 53       	subi	r28, 0x31	; 49
    292e:	dc 4f       	sbci	r29, 0xFC	; 252
    2930:	98 81       	ld	r25, Y
    2932:	cf 5c       	subi	r28, 0xCF	; 207
    2934:	d3 40       	sbci	r29, 0x03	; 3
    2936:	9f 93       	push	r25
    2938:	c2 53       	subi	r28, 0x32	; 50
    293a:	dc 4f       	sbci	r29, 0xFC	; 252
    293c:	98 81       	ld	r25, Y
    293e:	ce 5c       	subi	r28, 0xCE	; 206
    2940:	d3 40       	sbci	r29, 0x03	; 3
    2942:	9f 93       	push	r25
    2944:	6f 92       	push	r6
    2946:	7f 92       	push	r7
    2948:	8f 92       	push	r8
    294a:	9f 92       	push	r9
    294c:	af 92       	push	r10
    294e:	bf 92       	push	r11
    2950:	cf 92       	push	r12
    2952:	df 92       	push	r13
    2954:	1f 92       	push	r1
    2956:	8f 93       	push	r24
    2958:	ce 01       	movw	r24, r28
    295a:	86 5f       	subi	r24, 0xF6	; 246
    295c:	9e 4f       	sbci	r25, 0xFE	; 254
    295e:	9f 93       	push	r25
    2960:	8f 93       	push	r24
    2962:	87 56       	subi	r24, 0x67	; 103
    2964:	9f 4f       	sbci	r25, 0xFF	; 255
    2966:	9f 93       	push	r25
    2968:	8f 93       	push	r24
    296a:	8e 01       	movw	r16, r28
    296c:	0f 5f       	subi	r16, 0xFF	; 255
    296e:	1f 4f       	sbci	r17, 0xFF	; 255
    2970:	1f 93       	push	r17
    2972:	0f 93       	push	r16
    2974:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
			printLine(outbuf);
    2978:	c8 01       	movw	r24, r16
    297a:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
			break;
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2982:	f1 2c       	mov	r15, r1
				}
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    2984:	7d c4       	rjmp	.+2298   	; 0x3280 <report+0x1032>

		case 'd':			// copy of the above code
			for (i = 0; i < NMOTORS; i++) {
				get_time(currenttime);
    2986:	ce 01       	movw	r24, r28
    2988:	86 5f       	subi	r24, 0xF6	; 246
    298a:	9e 4f       	sbci	r25, 0xFE	; 254
    298c:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
				controller = i + MOTOR_A;
    2990:	68 94       	set
    2992:	ee 24       	eor	r14, r14
    2994:	e7 f8       	bld	r14, 7
    2996:	eb 0c       	add	r14, r11

				if (get_MOTOR_ENCODER(controller, &encoderValue) == ERROR) {
    2998:	be 01       	movw	r22, r28
    299a:	66 54       	subi	r22, 0x46	; 70
    299c:	7c 4f       	sbci	r23, 0xFC	; 252
    299e:	8e 2d       	mov	r24, r14
    29a0:	0e 94 bd 1b 	call	0x377a	; 0x377a <get_MOTOR_ENCODER>
    29a4:	f8 2e       	mov	r15, r24
    29a6:	93 e6       	ldi	r25, 0x63	; 99
    29a8:	89 13       	cpse	r24, r25
    29aa:	07 c0       	rjmp	.+14     	; 0x29ba <report+0x76c>
					printError(ERR_MTR, "report: get_MOTOR_ENCODER error");
    29ac:	69 e7       	ldi	r22, 0x79	; 121
    29ae:	75 eb       	ldi	r23, 0xB5	; 181
    29b0:	86 e3       	ldi	r24, 0x36	; 54
    29b2:	91 e0       	ldi	r25, 0x01	; 1
    29b4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
					return(ERROR);
    29b8:	63 c4       	rjmp	.+2246   	; 0x3280 <report+0x1032>
				}

				micronValue = encoderValue/ENC_COUNTS_PER_MICRON;
    29ba:	c6 54       	subi	r28, 0x46	; 70
    29bc:	dc 4f       	sbci	r29, 0xFC	; 252
    29be:	68 81       	ld	r22, Y
    29c0:	79 81       	ldd	r23, Y+1	; 0x01
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	9b 81       	ldd	r25, Y+3	; 0x03
    29c6:	ca 5b       	subi	r28, 0xBA	; 186
    29c8:	d3 40       	sbci	r29, 0x03	; 3
    29ca:	2b e1       	ldi	r18, 0x1B	; 27
    29cc:	31 e0       	ldi	r19, 0x01	; 1
    29ce:	40 e0       	ldi	r20, 0x00	; 0
    29d0:	50 e0       	ldi	r21, 0x00	; 0
    29d2:	0e 94 13 36 	call	0x6c26	; 0x6c26 <__divmodsi4>
    29d6:	a2 2e       	mov	r10, r18
    29d8:	93 2e       	mov	r9, r19
    29da:	84 2e       	mov	r8, r20
    29dc:	75 2e       	mov	r7, r21

				if (get_MOTOR_SPEED(controller, &encoderSpeed) == ERROR) {
    29de:	be 01       	movw	r22, r28
    29e0:	62 54       	subi	r22, 0x42	; 66
    29e2:	7c 4f       	sbci	r23, 0xFC	; 252
    29e4:	8e 2d       	mov	r24, r14
    29e6:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <get_MOTOR_SPEED>
    29ea:	83 36       	cpi	r24, 0x63	; 99
    29ec:	61 f4       	brne	.+24     	; 0x2a06 <report+0x7b8>
					encoderSpeed = 0x7FFFFFFF;
    29ee:	8f ef       	ldi	r24, 0xFF	; 255
    29f0:	9f ef       	ldi	r25, 0xFF	; 255
    29f2:	af ef       	ldi	r26, 0xFF	; 255
    29f4:	bf e7       	ldi	r27, 0x7F	; 127
    29f6:	c2 54       	subi	r28, 0x42	; 66
    29f8:	dc 4f       	sbci	r29, 0xFC	; 252
    29fa:	88 83       	st	Y, r24
    29fc:	99 83       	std	Y+1, r25	; 0x01
    29fe:	aa 83       	std	Y+2, r26	; 0x02
    2a00:	bb 83       	std	Y+3, r27	; 0x03
    2a02:	ce 5b       	subi	r28, 0xBE	; 190
    2a04:	d3 40       	sbci	r29, 0x03	; 3
				}

				micronSpeed = encoderSpeed/ENC_COUNTS_PER_MICRON;
    2a06:	c2 54       	subi	r28, 0x42	; 66
    2a08:	dc 4f       	sbci	r29, 0xFC	; 252
    2a0a:	68 81       	ld	r22, Y
    2a0c:	79 81       	ldd	r23, Y+1	; 0x01
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	9b 81       	ldd	r25, Y+3	; 0x03
    2a12:	ce 5b       	subi	r28, 0xBE	; 190
    2a14:	d3 40       	sbci	r29, 0x03	; 3
    2a16:	2b e1       	ldi	r18, 0x1B	; 27
    2a18:	31 e0       	ldi	r19, 0x01	; 1
    2a1a:	40 e0       	ldi	r20, 0x00	; 0
    2a1c:	50 e0       	ldi	r21, 0x00	; 0
    2a1e:	0e 94 13 36 	call	0x6c26	; 0x6c26 <__divmodsi4>
    2a22:	62 2e       	mov	r6, r18
    2a24:	53 2e       	mov	r5, r19
    2a26:	44 2e       	mov	r4, r20
    2a28:	35 2e       	mov	r3, r21

				if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
    2a2a:	be 01       	movw	r22, r28
    2a2c:	62 53       	subi	r22, 0x32	; 50
    2a2e:	7c 4f       	sbci	r23, 0xFC	; 252
    2a30:	8e 2d       	mov	r24, r14
    2a32:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <get_MOTOR_CURRENT>
    2a36:	83 36       	cpi	r24, 0x63	; 99
    2a38:	71 f4       	brne	.+28     	; 0x2a56 <report+0x808>
					printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
    2a3a:	69 e9       	ldi	r22, 0x99	; 153
    2a3c:	75 eb       	ldi	r23, 0xB5	; 181
    2a3e:	86 e3       	ldi	r24, 0x36	; 54
    2a40:	91 e0       	ldi	r25, 0x01	; 1
    2a42:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
					motorCurrent = 0xFFFF;
    2a46:	8f ef       	ldi	r24, 0xFF	; 255
    2a48:	9f ef       	ldi	r25, 0xFF	; 255
    2a4a:	c2 53       	subi	r28, 0x32	; 50
    2a4c:	dc 4f       	sbci	r29, 0xFC	; 252
    2a4e:	88 83       	st	Y, r24
    2a50:	99 83       	std	Y+1, r25	; 0x01
    2a52:	ce 5c       	subi	r28, 0xCE	; 206
    2a54:	d3 40       	sbci	r29, 0x03	; 3
				}

				mdir = '?';
				if (motorDir[controller - MOTOR_A] == MTRDIRPOSITIVE) {
    2a56:	f1 2c       	mov	r15, r1
    2a58:	67 01       	movw	r12, r14
    2a5a:	80 e8       	ldi	r24, 0x80	; 128
    2a5c:	c8 1a       	sub	r12, r24
    2a5e:	d1 08       	sbc	r13, r1
    2a60:	f6 01       	movw	r30, r12
    2a62:	e3 5c       	subi	r30, 0xC3	; 195
    2a64:	f5 4d       	sbci	r31, 0xD5	; 213
    2a66:	80 81       	ld	r24, Z
    2a68:	81 30       	cpi	r24, 0x01	; 1
    2a6a:	39 f0       	breq	.+14     	; 0x2a7a <report+0x82c>
						mdir = 'F';
				} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
    2a6c:	88 23       	and	r24, r24
    2a6e:	51 f0       	breq	.+20     	; 0x2a84 <report+0x836>
				if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
					printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
					motorCurrent = 0xFFFF;
				}

				mdir = '?';
    2a70:	0f 2e       	mov	r0, r31
    2a72:	ff e3       	ldi	r31, 0x3F	; 63
    2a74:	2f 2e       	mov	r2, r31
    2a76:	f0 2d       	mov	r31, r0
    2a78:	09 c0       	rjmp	.+18     	; 0x2a8c <report+0x83e>
				if (motorDir[controller - MOTOR_A] == MTRDIRPOSITIVE) {
						mdir = 'F';
    2a7a:	0f 2e       	mov	r0, r31
    2a7c:	f6 e4       	ldi	r31, 0x46	; 70
    2a7e:	2f 2e       	mov	r2, r31
    2a80:	f0 2d       	mov	r31, r0
    2a82:	04 c0       	rjmp	.+8      	; 0x2a8c <report+0x83e>
				} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
						mdir = 'R';
    2a84:	0f 2e       	mov	r0, r31
    2a86:	f2 e5       	ldi	r31, 0x52	; 82
    2a88:	2f 2e       	mov	r2, r31
    2a8a:	f0 2d       	mov	r31, r0
				}

				mlimit = '?';
				if (get_MOTOR_LIMITS() == ERROR) {
    2a8c:	0e 94 0b 21 	call	0x4216	; 0x4216 <get_MOTOR_LIMITS>
    2a90:	83 36       	cpi	r24, 0x63	; 99
    2a92:	31 f4       	brne	.+12     	; 0x2aa0 <report+0x852>
						printError(ERR_MTR, "report: get_MOTOR_LIMITS error");
    2a94:	69 eb       	ldi	r22, 0xB9	; 185
    2a96:	75 eb       	ldi	r23, 0xB5	; 181
    2a98:	86 e3       	ldi	r24, 0x36	; 54
    2a9a:	91 e0       	ldi	r25, 0x01	; 1
    2a9c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				}
				if (motorLim[controller - MOTOR_A] == YES) {
    2aa0:	f6 01       	movw	r30, r12
    2aa2:	e0 5c       	subi	r30, 0xC0	; 192
    2aa4:	f5 4d       	sbci	r31, 0xD5	; 213
    2aa6:	80 81       	ld	r24, Z
    2aa8:	81 30       	cpi	r24, 0x01	; 1
    2aaa:	11 f0       	breq	.+4      	; 0x2ab0 <report+0x862>
						mdir = 'F';
				} else if (motorDir[controller - MOTOR_A] == MTRDIRNEGATIVE) {
						mdir = 'R';
				}

				mlimit = '?';
    2aac:	2f e3       	ldi	r18, 0x3F	; 63
    2aae:	01 c0       	rjmp	.+2      	; 0x2ab2 <report+0x864>
				if (get_MOTOR_LIMITS() == ERROR) {
						printError(ERR_MTR, "report: get_MOTOR_LIMITS error");
				}
				if (motorLim[controller - MOTOR_A] == YES) {
						mlimit = 'Y';
    2ab0:	29 e5       	ldi	r18, 0x59	; 89
				}

				sprintf(outbuf, format_MTR, currenttime, controller-31, micronValue,
					micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
    2ab2:	34 e3       	ldi	r19, 0x34	; 52
    2ab4:	30 9f       	mul	r19, r16
    2ab6:	c0 01       	movw	r24, r0
    2ab8:	31 9f       	mul	r19, r17
    2aba:	90 0d       	add	r25, r0
    2abc:	11 24       	eor	r1, r1
    2abe:	86 5c       	subi	r24, 0xC6	; 198
    2ac0:	97 4d       	sbci	r25, 0xD7	; 215
				}
				if (motorLim[controller - MOTOR_A] == YES) {
						mlimit = 'Y';
				}

				sprintf(outbuf, format_MTR, currenttime, controller-31, micronValue,
    2ac2:	9f 93       	push	r25
    2ac4:	8f 93       	push	r24
    2ac6:	1f 92       	push	r1
    2ac8:	2f 93       	push	r18
    2aca:	1f 92       	push	r1
    2acc:	2f 92       	push	r2
    2ace:	c1 53       	subi	r28, 0x31	; 49
    2ad0:	dc 4f       	sbci	r29, 0xFC	; 252
    2ad2:	88 81       	ld	r24, Y
    2ad4:	cf 5c       	subi	r28, 0xCF	; 207
    2ad6:	d3 40       	sbci	r29, 0x03	; 3
    2ad8:	8f 93       	push	r24
    2ada:	c2 53       	subi	r28, 0x32	; 50
    2adc:	dc 4f       	sbci	r29, 0xFC	; 252
    2ade:	88 81       	ld	r24, Y
    2ae0:	ce 5c       	subi	r28, 0xCE	; 206
    2ae2:	d3 40       	sbci	r29, 0x03	; 3
    2ae4:	8f 93       	push	r24
    2ae6:	3f 92       	push	r3
    2ae8:	4f 92       	push	r4
    2aea:	5f 92       	push	r5
    2aec:	6f 92       	push	r6
    2aee:	7f 92       	push	r7
    2af0:	8f 92       	push	r8
    2af2:	9f 92       	push	r9
    2af4:	af 92       	push	r10
    2af6:	9f e1       	ldi	r25, 0x1F	; 31
    2af8:	e9 1a       	sub	r14, r25
    2afa:	f1 08       	sbc	r15, r1
    2afc:	ff 92       	push	r15
    2afe:	ef 92       	push	r14
    2b00:	ce 01       	movw	r24, r28
    2b02:	86 5f       	subi	r24, 0xF6	; 246
    2b04:	9e 4f       	sbci	r25, 0xFE	; 254
    2b06:	9f 93       	push	r25
    2b08:	8f 93       	push	r24
    2b0a:	87 56       	subi	r24, 0x67	; 103
    2b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b0e:	9f 93       	push	r25
    2b10:	8f 93       	push	r24
    2b12:	82 5a       	subi	r24, 0xA2	; 162
    2b14:	91 40       	sbci	r25, 0x01	; 1
    2b16:	7c 01       	movw	r14, r24
    2b18:	9f 93       	push	r25
    2b1a:	8f 93       	push	r24
    2b1c:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
					micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
				printLine(outbuf);
    2b20:	c7 01       	movw	r24, r14
    2b22:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
			printLine(outbuf);
			break;

		case 'd':			// copy of the above code
			for (i = 0; i < NMOTORS; i++) {
    2b26:	b3 94       	inc	r11
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	de bf       	out	0x3e, r29	; 62
    2b2c:	01 c0       	rjmp	.+2      	; 0x2b30 <report+0x8e2>
	uint16_t motorCurrent;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	PID pid;

	switch(pcmd[cstack].cobject) {
    2b2e:	b1 2c       	mov	r11, r1
				micronValue, micronSpeed, motorCurrent, mdir, mlimit, pcmd[cstack].cid);
			printLine(outbuf);
			break;

		case 'd':			// copy of the above code
			for (i = 0; i < NMOTORS; i++) {
    2b30:	92 e0       	ldi	r25, 0x02	; 2
    2b32:	9b 15       	cp	r25, r11
    2b34:	08 f0       	brcs	.+2      	; 0x2b38 <report+0x8ea>
    2b36:	27 cf       	rjmp	.-434    	; 0x2986 <report+0x738>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2b38:	f1 2c       	mov	r15, r1
    2b3a:	a2 c3       	rjmp	.+1860   	; 0x3280 <report+0x1032>
				printLine(outbuf);
			}
			break;

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	0e 94 de 2b 	call	0x57bc	; 0x57bc <get_temperature>
    2b42:	ab 01       	movw	r20, r22
    2b44:	bc 01       	movw	r22, r24
    2b46:	ca 53       	subi	r28, 0x3A	; 58
    2b48:	dc 4f       	sbci	r29, 0xFC	; 252
    2b4a:	48 83       	st	Y, r20
    2b4c:	59 83       	std	Y+1, r21	; 0x01
    2b4e:	6a 83       	std	Y+2, r22	; 0x02
    2b50:	7b 83       	std	Y+3, r23	; 0x03
    2b52:	c6 5c       	subi	r28, 0xC6	; 198
    2b54:	d3 40       	sbci	r29, 0x03	; 3
			h0 = get_humidity(0, t0);
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_humidity>
    2b5c:	c6 2e       	mov	r12, r22
    2b5e:	d7 2e       	mov	r13, r23
    2b60:	f8 2e       	mov	r15, r24
    2b62:	e9 2e       	mov	r14, r25
			t1 = get_temperature(1);
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	0e 94 de 2b 	call	0x57bc	; 0x57bc <get_temperature>
    2b6a:	26 2e       	mov	r2, r22
    2b6c:	37 2e       	mov	r3, r23
    2b6e:	48 2e       	mov	r4, r24
    2b70:	59 2e       	mov	r5, r25
			h1 = get_humidity(1, t1);
    2b72:	98 2f       	mov	r25, r24
    2b74:	42 2d       	mov	r20, r2
    2b76:	53 2d       	mov	r21, r3
    2b78:	69 2f       	mov	r22, r25
    2b7a:	75 2d       	mov	r23, r5
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_humidity>
    2b82:	c4 50       	subi	r28, 0x04	; 4
    2b84:	dc 4f       	sbci	r29, 0xFC	; 252
    2b86:	68 83       	st	Y, r22
    2b88:	cc 5f       	subi	r28, 0xFC	; 252
    2b8a:	d3 40       	sbci	r29, 0x03	; 3
    2b8c:	c3 50       	subi	r28, 0x03	; 3
    2b8e:	dc 4f       	sbci	r29, 0xFC	; 252
    2b90:	78 83       	st	Y, r23
    2b92:	cd 5f       	subi	r28, 0xFD	; 253
    2b94:	d3 40       	sbci	r29, 0x03	; 3
    2b96:	c2 50       	subi	r28, 0x02	; 2
    2b98:	dc 4f       	sbci	r29, 0xFC	; 252
    2b9a:	88 83       	st	Y, r24
    2b9c:	ce 5f       	subi	r28, 0xFE	; 254
    2b9e:	d3 40       	sbci	r29, 0x03	; 3
    2ba0:	c1 50       	subi	r28, 0x01	; 1
    2ba2:	dc 4f       	sbci	r29, 0xFC	; 252
    2ba4:	98 83       	st	Y, r25
    2ba6:	cf 5f       	subi	r28, 0xFF	; 255
    2ba8:	d3 40       	sbci	r29, 0x03	; 3
			t2 = get_temperature(2);
    2baa:	82 e0       	ldi	r24, 0x02	; 2
    2bac:	0e 94 de 2b 	call	0x57bc	; 0x57bc <get_temperature>
    2bb0:	96 2e       	mov	r9, r22
    2bb2:	87 2e       	mov	r8, r23
    2bb4:	78 2e       	mov	r7, r24
    2bb6:	69 2e       	mov	r6, r25
			h2 = get_humidity(2, t2);
    2bb8:	98 2f       	mov	r25, r24
    2bba:	49 2d       	mov	r20, r9
    2bbc:	58 2d       	mov	r21, r8
    2bbe:	69 2f       	mov	r22, r25
    2bc0:	76 2d       	mov	r23, r6
    2bc2:	82 e0       	ldi	r24, 0x02	; 2
    2bc4:	0e 94 65 09 	call	0x12ca	; 0x12ca <get_humidity>
    2bc8:	c0 50       	subi	r28, 0x00	; 0
    2bca:	dc 4f       	sbci	r29, 0xFC	; 252
    2bcc:	68 83       	st	Y, r22
    2bce:	c0 50       	subi	r28, 0x00	; 0
    2bd0:	d4 40       	sbci	r29, 0x04	; 4
    2bd2:	cf 5f       	subi	r28, 0xFF	; 255
    2bd4:	db 4f       	sbci	r29, 0xFB	; 251
    2bd6:	78 83       	st	Y, r23
    2bd8:	c1 50       	subi	r28, 0x01	; 1
    2bda:	d4 40       	sbci	r29, 0x04	; 4
    2bdc:	ce 5f       	subi	r28, 0xFE	; 254
    2bde:	db 4f       	sbci	r29, 0xFB	; 251
    2be0:	88 83       	st	Y, r24
    2be2:	c2 50       	subi	r28, 0x02	; 2
    2be4:	d4 40       	sbci	r29, 0x04	; 4
    2be6:	cd 5f       	subi	r28, 0xFD	; 253
    2be8:	db 4f       	sbci	r29, 0xFB	; 251
    2bea:	98 83       	st	Y, r25
    2bec:	c3 50       	subi	r28, 0x03	; 3
    2bee:	d4 40       	sbci	r29, 0x04	; 4
			t3 = get_temperature(3);
    2bf0:	83 e0       	ldi	r24, 0x03	; 3
    2bf2:	0e 94 de 2b 	call	0x57bc	; 0x57bc <get_temperature>
    2bf6:	cc 5f       	subi	r28, 0xFC	; 252
    2bf8:	db 4f       	sbci	r29, 0xFB	; 251
    2bfa:	68 83       	st	Y, r22
    2bfc:	c4 50       	subi	r28, 0x04	; 4
    2bfe:	d4 40       	sbci	r29, 0x04	; 4
    2c00:	cb 5f       	subi	r28, 0xFB	; 251
    2c02:	db 4f       	sbci	r29, 0xFB	; 251
    2c04:	78 83       	st	Y, r23
    2c06:	c5 50       	subi	r28, 0x05	; 5
    2c08:	d4 40       	sbci	r29, 0x04	; 4
    2c0a:	ca 5f       	subi	r28, 0xFA	; 250
    2c0c:	db 4f       	sbci	r29, 0xFB	; 251
    2c0e:	88 83       	st	Y, r24
    2c10:	c6 50       	subi	r28, 0x06	; 6
    2c12:	d4 40       	sbci	r29, 0x04	; 4
    2c14:	c9 5f       	subi	r28, 0xF9	; 249
    2c16:	db 4f       	sbci	r29, 0xFB	; 251
    2c18:	98 83       	st	Y, r25
    2c1a:	c7 50       	subi	r28, 0x07	; 7
    2c1c:	d4 40       	sbci	r29, 0x04	; 4
			get_time(currenttime);
    2c1e:	5e 01       	movw	r10, r28
    2c20:	86 ef       	ldi	r24, 0xF6	; 246
    2c22:	a8 1a       	sub	r10, r24
    2c24:	8e ef       	ldi	r24, 0xFE	; 254
    2c26:	b8 0a       	sbc	r11, r24
    2c28:	c5 01       	movw	r24, r10
    2c2a:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    2c2e:	24 e3       	ldi	r18, 0x34	; 52
    2c30:	20 9f       	mul	r18, r16
    2c32:	c0 01       	movw	r24, r0
    2c34:	21 9f       	mul	r18, r17
    2c36:	90 0d       	add	r25, r0
    2c38:	11 24       	eor	r1, r1
    2c3a:	86 5c       	subi	r24, 0xC6	; 198
    2c3c:	97 4d       	sbci	r25, 0xD7	; 215
    2c3e:	9f 93       	push	r25
    2c40:	8f 93       	push	r24
    2c42:	c9 5f       	subi	r28, 0xF9	; 249
    2c44:	db 4f       	sbci	r29, 0xFB	; 251
    2c46:	98 81       	ld	r25, Y
    2c48:	c7 50       	subi	r28, 0x07	; 7
    2c4a:	d4 40       	sbci	r29, 0x04	; 4
    2c4c:	9f 93       	push	r25
    2c4e:	ca 5f       	subi	r28, 0xFA	; 250
    2c50:	db 4f       	sbci	r29, 0xFB	; 251
    2c52:	88 81       	ld	r24, Y
    2c54:	c6 50       	subi	r28, 0x06	; 6
    2c56:	d4 40       	sbci	r29, 0x04	; 4
    2c58:	8f 93       	push	r24
    2c5a:	cb 5f       	subi	r28, 0xFB	; 251
    2c5c:	db 4f       	sbci	r29, 0xFB	; 251
    2c5e:	98 81       	ld	r25, Y
    2c60:	c5 50       	subi	r28, 0x05	; 5
    2c62:	d4 40       	sbci	r29, 0x04	; 4
    2c64:	9f 93       	push	r25
    2c66:	cc 5f       	subi	r28, 0xFC	; 252
    2c68:	db 4f       	sbci	r29, 0xFB	; 251
    2c6a:	88 81       	ld	r24, Y
    2c6c:	c4 50       	subi	r28, 0x04	; 4
    2c6e:	d4 40       	sbci	r29, 0x04	; 4
    2c70:	8f 93       	push	r24
    2c72:	cd 5f       	subi	r28, 0xFD	; 253
    2c74:	db 4f       	sbci	r29, 0xFB	; 251
    2c76:	98 81       	ld	r25, Y
    2c78:	c3 50       	subi	r28, 0x03	; 3
    2c7a:	d4 40       	sbci	r29, 0x04	; 4
    2c7c:	9f 93       	push	r25
    2c7e:	ce 5f       	subi	r28, 0xFE	; 254
    2c80:	db 4f       	sbci	r29, 0xFB	; 251
    2c82:	88 81       	ld	r24, Y
    2c84:	c2 50       	subi	r28, 0x02	; 2
    2c86:	d4 40       	sbci	r29, 0x04	; 4
    2c88:	8f 93       	push	r24
    2c8a:	cf 5f       	subi	r28, 0xFF	; 255
    2c8c:	db 4f       	sbci	r29, 0xFB	; 251
    2c8e:	98 81       	ld	r25, Y
    2c90:	c1 50       	subi	r28, 0x01	; 1
    2c92:	d4 40       	sbci	r29, 0x04	; 4
    2c94:	9f 93       	push	r25
    2c96:	c0 50       	subi	r28, 0x00	; 0
    2c98:	dc 4f       	sbci	r29, 0xFC	; 252
    2c9a:	88 81       	ld	r24, Y
    2c9c:	c0 50       	subi	r28, 0x00	; 0
    2c9e:	d4 40       	sbci	r29, 0x04	; 4
    2ca0:	8f 93       	push	r24
    2ca2:	6f 92       	push	r6
    2ca4:	7f 92       	push	r7
    2ca6:	8f 92       	push	r8
    2ca8:	9f 92       	push	r9
    2caa:	c1 50       	subi	r28, 0x01	; 1
    2cac:	dc 4f       	sbci	r29, 0xFC	; 252
    2cae:	98 81       	ld	r25, Y
    2cb0:	cf 5f       	subi	r28, 0xFF	; 255
    2cb2:	d3 40       	sbci	r29, 0x03	; 3
    2cb4:	9f 93       	push	r25
    2cb6:	c2 50       	subi	r28, 0x02	; 2
    2cb8:	dc 4f       	sbci	r29, 0xFC	; 252
    2cba:	88 81       	ld	r24, Y
    2cbc:	ce 5f       	subi	r28, 0xFE	; 254
    2cbe:	d3 40       	sbci	r29, 0x03	; 3
    2cc0:	8f 93       	push	r24
    2cc2:	c3 50       	subi	r28, 0x03	; 3
    2cc4:	dc 4f       	sbci	r29, 0xFC	; 252
    2cc6:	98 81       	ld	r25, Y
    2cc8:	cd 5f       	subi	r28, 0xFD	; 253
    2cca:	d3 40       	sbci	r29, 0x03	; 3
    2ccc:	9f 93       	push	r25
    2cce:	c4 50       	subi	r28, 0x04	; 4
    2cd0:	dc 4f       	sbci	r29, 0xFC	; 252
    2cd2:	88 81       	ld	r24, Y
    2cd4:	cc 5f       	subi	r28, 0xFC	; 252
    2cd6:	d3 40       	sbci	r29, 0x03	; 3
    2cd8:	8f 93       	push	r24
    2cda:	5f 92       	push	r5
    2cdc:	4f 92       	push	r4
    2cde:	3f 92       	push	r3
    2ce0:	2f 92       	push	r2
    2ce2:	ef 92       	push	r14
    2ce4:	ff 92       	push	r15
    2ce6:	df 92       	push	r13
    2ce8:	cf 92       	push	r12
    2cea:	c7 53       	subi	r28, 0x37	; 55
    2cec:	dc 4f       	sbci	r29, 0xFC	; 252
    2cee:	88 81       	ld	r24, Y
    2cf0:	c9 5c       	subi	r28, 0xC9	; 201
    2cf2:	d3 40       	sbci	r29, 0x03	; 3
    2cf4:	8f 93       	push	r24
    2cf6:	c8 53       	subi	r28, 0x38	; 56
    2cf8:	dc 4f       	sbci	r29, 0xFC	; 252
    2cfa:	88 81       	ld	r24, Y
    2cfc:	c8 5c       	subi	r28, 0xC8	; 200
    2cfe:	d3 40       	sbci	r29, 0x03	; 3
    2d00:	8f 93       	push	r24
    2d02:	c9 53       	subi	r28, 0x39	; 57
    2d04:	dc 4f       	sbci	r29, 0xFC	; 252
    2d06:	88 81       	ld	r24, Y
    2d08:	c7 5c       	subi	r28, 0xC7	; 199
    2d0a:	d3 40       	sbci	r29, 0x03	; 3
    2d0c:	8f 93       	push	r24
    2d0e:	ca 53       	subi	r28, 0x3A	; 58
    2d10:	dc 4f       	sbci	r29, 0xFC	; 252
    2d12:	88 81       	ld	r24, Y
    2d14:	c6 5c       	subi	r28, 0xC6	; 198
    2d16:	d3 40       	sbci	r29, 0x03	; 3
    2d18:	8f 93       	push	r24
    2d1a:	bf 92       	push	r11
    2d1c:	af 92       	push	r10
    2d1e:	ce 01       	movw	r24, r28
    2d20:	82 5a       	subi	r24, 0xA2	; 162
    2d22:	9e 4f       	sbci	r25, 0xFE	; 254
    2d24:	9f 93       	push	r25
    2d26:	8f 93       	push	r24
    2d28:	8e 01       	movw	r16, r28
    2d2a:	0f 5f       	subi	r16, 0xFF	; 255
    2d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d2e:	1f 93       	push	r17
    2d30:	0f 93       	push	r16
    2d32:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			printLine(outbuf);
    2d36:	cd bf       	out	0x3d, r28	; 61
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	c8 01       	movw	r24, r16
    2d3c:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
			writestr_OLED(1, "Temp & Humidity", 1);
    2d40:	41 e0       	ldi	r20, 0x01	; 1
    2d42:	68 ed       	ldi	r22, 0xD8	; 216
    2d44:	75 eb       	ldi	r23, 0xB5	; 181
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    2d4c:	ca 53       	subi	r28, 0x3A	; 58
    2d4e:	dc 4f       	sbci	r29, 0xFC	; 252
    2d50:	b8 80       	ld	r11, Y
    2d52:	c6 5c       	subi	r28, 0xC6	; 198
    2d54:	d3 40       	sbci	r29, 0x03	; 3
    2d56:	c9 53       	subi	r28, 0x39	; 57
    2d58:	dc 4f       	sbci	r29, 0xFC	; 252
    2d5a:	a8 80       	ld	r10, Y
    2d5c:	c7 5c       	subi	r28, 0xC7	; 199
    2d5e:	d3 40       	sbci	r29, 0x03	; 3
    2d60:	c8 53       	subi	r28, 0x38	; 56
    2d62:	dc 4f       	sbci	r29, 0xFC	; 252
    2d64:	98 80       	ld	r9, Y
    2d66:	c8 5c       	subi	r28, 0xC8	; 200
    2d68:	d3 40       	sbci	r29, 0x03	; 3
    2d6a:	c7 53       	subi	r28, 0x37	; 55
    2d6c:	dc 4f       	sbci	r29, 0xFC	; 252
    2d6e:	88 80       	ld	r8, Y
    2d70:	c9 5c       	subi	r28, 0xC9	; 201
    2d72:	d3 40       	sbci	r29, 0x03	; 3
    2d74:	26 e6       	ldi	r18, 0x66	; 102
    2d76:	36 e6       	ldi	r19, 0x66	; 102
    2d78:	46 ee       	ldi	r20, 0xE6	; 230
    2d7a:	5f e3       	ldi	r21, 0x3F	; 63
    2d7c:	6b 2d       	mov	r22, r11
    2d7e:	7a 2d       	mov	r23, r10
    2d80:	89 2d       	mov	r24, r9
    2d82:	98 2d       	mov	r25, r8
    2d84:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
    2d88:	ef 92       	push	r14
    2d8a:	ff 92       	push	r15
    2d8c:	df 92       	push	r13
    2d8e:	cf 92       	push	r12
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	40 e0       	ldi	r20, 0x00	; 0
    2d96:	52 e4       	ldi	r21, 0x42	; 66
    2d98:	0e 94 4a 30 	call	0x6094	; 0x6094 <__addsf3>
    2d9c:	9f 93       	push	r25
    2d9e:	8f 93       	push	r24
    2da0:	7f 93       	push	r23
    2da2:	6f 93       	push	r22
    2da4:	8f 92       	push	r8
    2da6:	9f 92       	push	r9
    2da8:	af 92       	push	r10
    2daa:	bf 92       	push	r11
    2dac:	88 ee       	ldi	r24, 0xE8	; 232
    2dae:	95 eb       	ldi	r25, 0xB5	; 181
    2db0:	9f 93       	push	r25
    2db2:	8f 93       	push	r24
    2db4:	1f 93       	push	r17
    2db6:	0f 93       	push	r16
    2db8:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			writestr_OLED(1, outbuf, 2);
    2dbc:	42 e0       	ldi	r20, 0x02	; 2
    2dbe:	b8 01       	movw	r22, r16
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			break;
    2dc6:	cd bf       	out	0x3d, r28	; 61
    2dc8:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2dca:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    2dcc:	59 c2       	rjmp	.+1202   	; 0x3280 <report+0x1032>

		case 'n':					// LN2 controller status
			if (get_ln2(ln2status) != ERROR) {
    2dce:	ce 01       	movw	r24, r28
    2dd0:	8b 5a       	subi	r24, 0xAB	; 171
    2dd2:	9c 4f       	sbci	r25, 0xFC	; 252
    2dd4:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <get_ln2>
    2dd8:	83 36       	cpi	r24, 0x63	; 99
    2dda:	09 f4       	brne	.+2      	; 0x2dde <report+0xb90>
    2ddc:	50 c2       	rjmp	.+1184   	; 0x327e <report+0x1030>
				printLine((char*) ln2status);
    2dde:	ce 01       	movw	r24, r28
    2de0:	8b 5a       	subi	r24, 0xAB	; 171
    2de2:	9c 4f       	sbci	r25, 0xFC	; 252
    2de4:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2de8:	f1 2c       	mov	r15, r1
    2dea:	4a c2       	rjmp	.+1172   	; 0x3280 <report+0x1032>
				printLine((char*) ln2status);
			}
			break;

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    2dec:	ae 01       	movw	r20, r28
    2dee:	48 52       	subi	r20, 0x28	; 40
    2df0:	5c 4f       	sbci	r21, 0xFC	; 252
    2df2:	be 01       	movw	r22, r28
    2df4:	6c 52       	subi	r22, 0x2C	; 44
    2df6:	7c 4f       	sbci	r23, 0xFC	; 252
    2df8:	ce 01       	movw	r24, r28
    2dfa:	80 53       	subi	r24, 0x30	; 48
    2dfc:	9c 4f       	sbci	r25, 0xFC	; 252
    2dfe:	0e 94 1c 0c 	call	0x1838	; 0x1838 <get_orientation>
			get_time(currenttime);
    2e02:	7e 01       	movw	r14, r28
    2e04:	96 ef       	ldi	r25, 0xF6	; 246
    2e06:	e9 1a       	sub	r14, r25
    2e08:	9e ef       	ldi	r25, 0xFE	; 254
    2e0a:	f9 0a       	sbc	r15, r25
    2e0c:	c7 01       	movw	r24, r14
    2e0e:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
    2e12:	24 e3       	ldi	r18, 0x34	; 52
    2e14:	20 9f       	mul	r18, r16
    2e16:	c0 01       	movw	r24, r0
    2e18:	21 9f       	mul	r18, r17
    2e1a:	90 0d       	add	r25, r0
    2e1c:	11 24       	eor	r1, r1
    2e1e:	86 5c       	subi	r24, 0xC6	; 198
    2e20:	97 4d       	sbci	r25, 0xD7	; 215
    2e22:	9f 93       	push	r25
    2e24:	8f 93       	push	r24
    2e26:	c5 52       	subi	r28, 0x25	; 37
    2e28:	dc 4f       	sbci	r29, 0xFC	; 252
    2e2a:	88 81       	ld	r24, Y
    2e2c:	cb 5d       	subi	r28, 0xDB	; 219
    2e2e:	d3 40       	sbci	r29, 0x03	; 3
    2e30:	8f 93       	push	r24
    2e32:	c6 52       	subi	r28, 0x26	; 38
    2e34:	dc 4f       	sbci	r29, 0xFC	; 252
    2e36:	88 81       	ld	r24, Y
    2e38:	ca 5d       	subi	r28, 0xDA	; 218
    2e3a:	d3 40       	sbci	r29, 0x03	; 3
    2e3c:	8f 93       	push	r24
    2e3e:	c7 52       	subi	r28, 0x27	; 39
    2e40:	dc 4f       	sbci	r29, 0xFC	; 252
    2e42:	88 81       	ld	r24, Y
    2e44:	c9 5d       	subi	r28, 0xD9	; 217
    2e46:	d3 40       	sbci	r29, 0x03	; 3
    2e48:	8f 93       	push	r24
    2e4a:	c8 52       	subi	r28, 0x28	; 40
    2e4c:	dc 4f       	sbci	r29, 0xFC	; 252
    2e4e:	88 81       	ld	r24, Y
    2e50:	c8 5d       	subi	r28, 0xD8	; 216
    2e52:	d3 40       	sbci	r29, 0x03	; 3
    2e54:	8f 93       	push	r24
    2e56:	c9 52       	subi	r28, 0x29	; 41
    2e58:	dc 4f       	sbci	r29, 0xFC	; 252
    2e5a:	88 81       	ld	r24, Y
    2e5c:	c7 5d       	subi	r28, 0xD7	; 215
    2e5e:	d3 40       	sbci	r29, 0x03	; 3
    2e60:	8f 93       	push	r24
    2e62:	ca 52       	subi	r28, 0x2A	; 42
    2e64:	dc 4f       	sbci	r29, 0xFC	; 252
    2e66:	88 81       	ld	r24, Y
    2e68:	c6 5d       	subi	r28, 0xD6	; 214
    2e6a:	d3 40       	sbci	r29, 0x03	; 3
    2e6c:	8f 93       	push	r24
    2e6e:	cb 52       	subi	r28, 0x2B	; 43
    2e70:	dc 4f       	sbci	r29, 0xFC	; 252
    2e72:	88 81       	ld	r24, Y
    2e74:	c5 5d       	subi	r28, 0xD5	; 213
    2e76:	d3 40       	sbci	r29, 0x03	; 3
    2e78:	8f 93       	push	r24
    2e7a:	cc 52       	subi	r28, 0x2C	; 44
    2e7c:	dc 4f       	sbci	r29, 0xFC	; 252
    2e7e:	88 81       	ld	r24, Y
    2e80:	c4 5d       	subi	r28, 0xD4	; 212
    2e82:	d3 40       	sbci	r29, 0x03	; 3
    2e84:	8f 93       	push	r24
    2e86:	cd 52       	subi	r28, 0x2D	; 45
    2e88:	dc 4f       	sbci	r29, 0xFC	; 252
    2e8a:	88 81       	ld	r24, Y
    2e8c:	c3 5d       	subi	r28, 0xD3	; 211
    2e8e:	d3 40       	sbci	r29, 0x03	; 3
    2e90:	8f 93       	push	r24
    2e92:	ce 52       	subi	r28, 0x2E	; 46
    2e94:	dc 4f       	sbci	r29, 0xFC	; 252
    2e96:	88 81       	ld	r24, Y
    2e98:	c2 5d       	subi	r28, 0xD2	; 210
    2e9a:	d3 40       	sbci	r29, 0x03	; 3
    2e9c:	8f 93       	push	r24
    2e9e:	cf 52       	subi	r28, 0x2F	; 47
    2ea0:	dc 4f       	sbci	r29, 0xFC	; 252
    2ea2:	88 81       	ld	r24, Y
    2ea4:	c1 5d       	subi	r28, 0xD1	; 209
    2ea6:	d3 40       	sbci	r29, 0x03	; 3
    2ea8:	8f 93       	push	r24
    2eaa:	c0 53       	subi	r28, 0x30	; 48
    2eac:	dc 4f       	sbci	r29, 0xFC	; 252
    2eae:	88 81       	ld	r24, Y
    2eb0:	c0 5d       	subi	r28, 0xD0	; 208
    2eb2:	d3 40       	sbci	r29, 0x03	; 3
    2eb4:	8f 93       	push	r24
    2eb6:	ff 92       	push	r15
    2eb8:	ef 92       	push	r14
    2eba:	ce 01       	movw	r24, r28
    2ebc:	84 58       	subi	r24, 0x84	; 132
    2ebe:	9d 4f       	sbci	r25, 0xFD	; 253
    2ec0:	9f 93       	push	r25
    2ec2:	8f 93       	push	r24
    2ec4:	8e 01       	movw	r16, r28
    2ec6:	0f 5f       	subi	r16, 0xFF	; 255
    2ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eca:	1f 93       	push	r17
    2ecc:	0f 93       	push	r16
    2ece:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			printLine(outbuf);
    2ed2:	c8 01       	movw	r24, r16
    2ed4:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
			writestr_OLED(1, "Orientation", 1);
    2ed8:	41 e0       	ldi	r20, 0x01	; 1
    2eda:	6e ef       	ldi	r22, 0xFE	; 254
    2edc:	75 eb       	ldi	r23, 0xB5	; 181
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    2ee4:	c5 52       	subi	r28, 0x25	; 37
    2ee6:	dc 4f       	sbci	r29, 0xFC	; 252
    2ee8:	88 81       	ld	r24, Y
    2eea:	cb 5d       	subi	r28, 0xDB	; 219
    2eec:	d3 40       	sbci	r29, 0x03	; 3
    2eee:	8f 93       	push	r24
    2ef0:	c6 52       	subi	r28, 0x26	; 38
    2ef2:	dc 4f       	sbci	r29, 0xFC	; 252
    2ef4:	88 81       	ld	r24, Y
    2ef6:	ca 5d       	subi	r28, 0xDA	; 218
    2ef8:	d3 40       	sbci	r29, 0x03	; 3
    2efa:	8f 93       	push	r24
    2efc:	c7 52       	subi	r28, 0x27	; 39
    2efe:	dc 4f       	sbci	r29, 0xFC	; 252
    2f00:	88 81       	ld	r24, Y
    2f02:	c9 5d       	subi	r28, 0xD9	; 217
    2f04:	d3 40       	sbci	r29, 0x03	; 3
    2f06:	8f 93       	push	r24
    2f08:	c8 52       	subi	r28, 0x28	; 40
    2f0a:	dc 4f       	sbci	r29, 0xFC	; 252
    2f0c:	88 81       	ld	r24, Y
    2f0e:	c8 5d       	subi	r28, 0xD8	; 216
    2f10:	d3 40       	sbci	r29, 0x03	; 3
    2f12:	8f 93       	push	r24
    2f14:	c9 52       	subi	r28, 0x29	; 41
    2f16:	dc 4f       	sbci	r29, 0xFC	; 252
    2f18:	88 81       	ld	r24, Y
    2f1a:	c7 5d       	subi	r28, 0xD7	; 215
    2f1c:	d3 40       	sbci	r29, 0x03	; 3
    2f1e:	8f 93       	push	r24
    2f20:	ca 52       	subi	r28, 0x2A	; 42
    2f22:	dc 4f       	sbci	r29, 0xFC	; 252
    2f24:	88 81       	ld	r24, Y
    2f26:	c6 5d       	subi	r28, 0xD6	; 214
    2f28:	d3 40       	sbci	r29, 0x03	; 3
    2f2a:	8f 93       	push	r24
    2f2c:	cb 52       	subi	r28, 0x2B	; 43
    2f2e:	dc 4f       	sbci	r29, 0xFC	; 252
    2f30:	88 81       	ld	r24, Y
    2f32:	c5 5d       	subi	r28, 0xD5	; 213
    2f34:	d3 40       	sbci	r29, 0x03	; 3
    2f36:	8f 93       	push	r24
    2f38:	cc 52       	subi	r28, 0x2C	; 44
    2f3a:	dc 4f       	sbci	r29, 0xFC	; 252
    2f3c:	88 81       	ld	r24, Y
    2f3e:	c4 5d       	subi	r28, 0xD4	; 212
    2f40:	d3 40       	sbci	r29, 0x03	; 3
    2f42:	8f 93       	push	r24
    2f44:	cd 52       	subi	r28, 0x2D	; 45
    2f46:	dc 4f       	sbci	r29, 0xFC	; 252
    2f48:	88 81       	ld	r24, Y
    2f4a:	c3 5d       	subi	r28, 0xD3	; 211
    2f4c:	d3 40       	sbci	r29, 0x03	; 3
    2f4e:	8f 93       	push	r24
    2f50:	ce 52       	subi	r28, 0x2E	; 46
    2f52:	dc 4f       	sbci	r29, 0xFC	; 252
    2f54:	88 81       	ld	r24, Y
    2f56:	c2 5d       	subi	r28, 0xD2	; 210
    2f58:	d3 40       	sbci	r29, 0x03	; 3
    2f5a:	8f 93       	push	r24
    2f5c:	cf 52       	subi	r28, 0x2F	; 47
    2f5e:	dc 4f       	sbci	r29, 0xFC	; 252
    2f60:	88 81       	ld	r24, Y
    2f62:	c1 5d       	subi	r28, 0xD1	; 209
    2f64:	d3 40       	sbci	r29, 0x03	; 3
    2f66:	8f 93       	push	r24
    2f68:	c0 53       	subi	r28, 0x30	; 48
    2f6a:	dc 4f       	sbci	r29, 0xFC	; 252
    2f6c:	88 81       	ld	r24, Y
    2f6e:	c0 5d       	subi	r28, 0xD0	; 208
    2f70:	d3 40       	sbci	r29, 0x03	; 3
    2f72:	8f 93       	push	r24
    2f74:	ce 01       	movw	r24, r28
    2f76:	88 56       	subi	r24, 0x68	; 104
    2f78:	9d 4f       	sbci	r25, 0xFD	; 253
    2f7a:	9f 93       	push	r25
    2f7c:	8f 93       	push	r24
    2f7e:	1f 93       	push	r17
    2f80:	0f 93       	push	r16
    2f82:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			writestr_OLED(1, outbuf, 2);
    2f86:	cd bf       	out	0x3d, r28	; 61
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	42 e0       	ldi	r20, 0x02	; 2
    2f8c:	b8 01       	movw	r22, r16
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2f94:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    2f96:	74 c1       	rjmp	.+744    	; 0x3280 <report+0x1032>

		case 'p':					// Pneumatics
			get_time(currenttime);
    2f98:	7e 01       	movw	r14, r28
    2f9a:	96 ef       	ldi	r25, 0xF6	; 246
    2f9c:	e9 1a       	sub	r14, r25
    2f9e:	9e ef       	ldi	r25, 0xFE	; 254
    2fa0:	f9 0a       	sbc	r15, r25
    2fa2:	c7 01       	movw	r24, r14
    2fa4:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
			read_PNEUSensors(&shutter, &left, &right, &air);
    2fa8:	9e 01       	movw	r18, r28
    2faa:	23 5a       	subi	r18, 0xA3	; 163
    2fac:	3e 4f       	sbci	r19, 0xFE	; 254
    2fae:	ae 01       	movw	r20, r28
    2fb0:	44 5a       	subi	r20, 0xA4	; 164
    2fb2:	5e 4f       	sbci	r21, 0xFE	; 254
    2fb4:	be 01       	movw	r22, r28
    2fb6:	65 5a       	subi	r22, 0xA5	; 165
    2fb8:	7e 4f       	sbci	r23, 0xFE	; 254
    2fba:	ce 01       	movw	r24, r28
    2fbc:	86 5a       	subi	r24, 0xA6	; 166
    2fbe:	9e 4f       	sbci	r25, 0xFE	; 254
    2fc0:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <read_PNEUSensors>
			sprintf(outbuf, format_PNU, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    2fc4:	24 e3       	ldi	r18, 0x34	; 52
    2fc6:	20 9f       	mul	r18, r16
    2fc8:	c0 01       	movw	r24, r0
    2fca:	21 9f       	mul	r18, r17
    2fcc:	90 0d       	add	r25, r0
    2fce:	11 24       	eor	r1, r1
    2fd0:	86 5c       	subi	r24, 0xC6	; 198
    2fd2:	97 4d       	sbci	r25, 0xD7	; 215
    2fd4:	9f 93       	push	r25
    2fd6:	8f 93       	push	r24
    2fd8:	c3 5a       	subi	r28, 0xA3	; 163
    2fda:	de 4f       	sbci	r29, 0xFE	; 254
    2fdc:	88 81       	ld	r24, Y
    2fde:	cd 55       	subi	r28, 0x5D	; 93
    2fe0:	d1 40       	sbci	r29, 0x01	; 1
    2fe2:	1f 92       	push	r1
    2fe4:	8f 93       	push	r24
    2fe6:	c4 5a       	subi	r28, 0xA4	; 164
    2fe8:	de 4f       	sbci	r29, 0xFE	; 254
    2fea:	88 81       	ld	r24, Y
    2fec:	cc 55       	subi	r28, 0x5C	; 92
    2fee:	d1 40       	sbci	r29, 0x01	; 1
    2ff0:	1f 92       	push	r1
    2ff2:	8f 93       	push	r24
    2ff4:	c5 5a       	subi	r28, 0xA5	; 165
    2ff6:	de 4f       	sbci	r29, 0xFE	; 254
    2ff8:	88 81       	ld	r24, Y
    2ffa:	cb 55       	subi	r28, 0x5B	; 91
    2ffc:	d1 40       	sbci	r29, 0x01	; 1
    2ffe:	1f 92       	push	r1
    3000:	8f 93       	push	r24
    3002:	c6 5a       	subi	r28, 0xA6	; 166
    3004:	de 4f       	sbci	r29, 0xFE	; 254
    3006:	88 81       	ld	r24, Y
    3008:	ca 55       	subi	r28, 0x5A	; 90
    300a:	d1 40       	sbci	r29, 0x01	; 1
    300c:	1f 92       	push	r1
    300e:	8f 93       	push	r24
    3010:	ff 92       	push	r15
    3012:	ef 92       	push	r14
    3014:	ce 01       	movw	r24, r28
    3016:	86 55       	subi	r24, 0x56	; 86
    3018:	9d 4f       	sbci	r25, 0xFD	; 253
    301a:	9f 93       	push	r25
    301c:	8f 93       	push	r24
    301e:	8e 01       	movw	r16, r28
    3020:	0f 5f       	subi	r16, 0xFF	; 255
    3022:	1f 4f       	sbci	r17, 0xFF	; 255
    3024:	1f 93       	push	r17
    3026:	0f 93       	push	r16
    3028:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			printLine(outbuf);
    302c:	c8 01       	movw	r24, r16
    302e:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
			sprintf(outbuf, dformat_PN1, left, right);
    3032:	c4 5a       	subi	r28, 0xA4	; 164
    3034:	de 4f       	sbci	r29, 0xFE	; 254
    3036:	88 81       	ld	r24, Y
    3038:	cc 55       	subi	r28, 0x5C	; 92
    303a:	d1 40       	sbci	r29, 0x01	; 1
    303c:	1f 92       	push	r1
    303e:	8f 93       	push	r24
    3040:	c5 5a       	subi	r28, 0xA5	; 165
    3042:	de 4f       	sbci	r29, 0xFE	; 254
    3044:	88 81       	ld	r24, Y
    3046:	cb 55       	subi	r28, 0x5B	; 91
    3048:	d1 40       	sbci	r29, 0x01	; 1
    304a:	1f 92       	push	r1
    304c:	8f 93       	push	r24
    304e:	ce 01       	movw	r24, r28
    3050:	89 52       	subi	r24, 0x29	; 41
    3052:	9d 4f       	sbci	r25, 0xFD	; 253
    3054:	9f 93       	push	r25
    3056:	8f 93       	push	r24
    3058:	1f 93       	push	r17
    305a:	0f 93       	push	r16
    305c:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			writestr_OLED(1, outbuf, 1);
    3060:	41 e0       	ldi	r20, 0x01	; 1
    3062:	b8 01       	movw	r22, r16
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    306a:	c3 5a       	subi	r28, 0xA3	; 163
    306c:	de 4f       	sbci	r29, 0xFE	; 254
    306e:	88 81       	ld	r24, Y
    3070:	cd 55       	subi	r28, 0x5D	; 93
    3072:	d1 40       	sbci	r29, 0x01	; 1
    3074:	1f 92       	push	r1
    3076:	8f 93       	push	r24
    3078:	c6 5a       	subi	r28, 0xA6	; 166
    307a:	de 4f       	sbci	r29, 0xFE	; 254
    307c:	88 81       	ld	r24, Y
    307e:	ca 55       	subi	r28, 0x5A	; 90
    3080:	d1 40       	sbci	r29, 0x01	; 1
    3082:	1f 92       	push	r1
    3084:	8f 93       	push	r24
    3086:	ce 01       	movw	r24, r28
    3088:	86 51       	subi	r24, 0x16	; 22
    308a:	9d 4f       	sbci	r25, 0xFD	; 253
    308c:	9f 93       	push	r25
    308e:	8f 93       	push	r24
    3090:	1f 93       	push	r17
    3092:	0f 93       	push	r16
    3094:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			writestr_OLED(1, outbuf, 2);
    3098:	cd bf       	out	0x3d, r28	; 61
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	42 e0       	ldi	r20, 0x02	; 2
    309e:	b8 01       	movw	r22, r16
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    30a6:	f1 2c       	mov	r15, r1
			printLine(outbuf);
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    30a8:	eb c0       	rjmp	.+470    	; 0x3280 <report+0x1032>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    30aa:	7e 01       	movw	r14, r28
    30ac:	96 ef       	ldi	r25, 0xF6	; 246
    30ae:	e9 1a       	sub	r14, r25
    30b0:	9e ef       	ldi	r25, 0xFE	; 254
    30b2:	f9 0a       	sbc	r15, r25
    30b4:	c7 01       	movw	r24, r14
    30b6:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
			get_SETTIME(lastsettime);
    30ba:	6e 01       	movw	r12, r28
    30bc:	82 ee       	ldi	r24, 0xE2	; 226
    30be:	c8 1a       	sub	r12, r24
    30c0:	8e ef       	ldi	r24, 0xFE	; 254
    30c2:	d8 0a       	sbc	r13, r24
    30c4:	c6 01       	movw	r24, r12
    30c6:	0e 94 03 09 	call	0x1206	; 0x1206 <get_SETTIME>
			get_BOOTTIME(boottime);
    30ca:	5e 01       	movw	r10, r28
    30cc:	9e ec       	ldi	r25, 0xCE	; 206
    30ce:	a9 1a       	sub	r10, r25
    30d0:	9e ef       	ldi	r25, 0xFE	; 254
    30d2:	b9 0a       	sbc	r11, r25
    30d4:	c5 01       	movw	r24, r10
    30d6:	0e 94 35 08 	call	0x106a	; 0x106a <get_BOOTTIME>
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    30da:	24 e3       	ldi	r18, 0x34	; 52
    30dc:	20 9f       	mul	r18, r16
    30de:	c0 01       	movw	r24, r0
    30e0:	21 9f       	mul	r18, r17
    30e2:	90 0d       	add	r25, r0
    30e4:	11 24       	eor	r1, r1
    30e6:	86 5c       	subi	r24, 0xC6	; 198
    30e8:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			get_SETTIME(lastsettime);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
    30ea:	9f 93       	push	r25
    30ec:	8f 93       	push	r24
    30ee:	bf 92       	push	r11
    30f0:	af 92       	push	r10
    30f2:	df 92       	push	r13
    30f4:	cf 92       	push	r12
    30f6:	ff 92       	push	r15
    30f8:	ef 92       	push	r14
    30fa:	ce 01       	movw	r24, r28
    30fc:	83 50       	subi	r24, 0x03	; 3
    30fe:	9d 4f       	sbci	r25, 0xFD	; 253
    3100:	9f 93       	push	r25
    3102:	8f 93       	push	r24
    3104:	8e 01       	movw	r16, r28
    3106:	0f 5f       	subi	r16, 0xFF	; 255
    3108:	1f 4f       	sbci	r17, 0xFF	; 255
    310a:	1f 93       	push	r17
    310c:	0f 93       	push	r16
    310e:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
    3112:	c8 01       	movw	r24, r16
    3114:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
			writestr_OLED(1, "Time", 1);
    3118:	41 e0       	ldi	r20, 0x01	; 1
    311a:	6a e0       	ldi	r22, 0x0A	; 10
    311c:	76 eb       	ldi	r23, 0xB6	; 182
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    3124:	b7 01       	movw	r22, r14
    3126:	65 5f       	subi	r22, 0xF5	; 245
    3128:	7f 4f       	sbci	r23, 0xFF	; 255
    312a:	42 e0       	ldi	r20, 0x02	; 2
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			break;
    3132:	cd bf       	out	0x3d, r28	; 61
    3134:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    3136:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    3138:	a3 c0       	rjmp	.+326    	; 0x3280 <report+0x1032>

		case 'v':					// Vacuum
			redvac = read_ionpump(REDPUMP);
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	0e 94 37 0a 	call	0x146e	; 0x146e <read_ionpump>
    3140:	d6 2e       	mov	r13, r22
    3142:	c7 2e       	mov	r12, r23
    3144:	b8 2e       	mov	r11, r24
    3146:	a9 2e       	mov	r10, r25
			bluvac = read_ionpump(BLUEPUMP);
    3148:	82 e0       	ldi	r24, 0x02	; 2
    314a:	0e 94 37 0a 	call	0x146e	; 0x146e <read_ionpump>
    314e:	96 2e       	mov	r9, r22
    3150:	87 2e       	mov	r8, r23
    3152:	78 2e       	mov	r7, r24
    3154:	69 2e       	mov	r6, r25
			get_time(currenttime);
    3156:	7e 01       	movw	r14, r28
    3158:	96 ef       	ldi	r25, 0xF6	; 246
    315a:	e9 1a       	sub	r14, r25
    315c:	9e ef       	ldi	r25, 0xFE	; 254
    315e:	f9 0a       	sbc	r15, r25
    3160:	c7 01       	movw	r24, r14
    3162:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
    3166:	24 e3       	ldi	r18, 0x34	; 52
    3168:	20 9f       	mul	r18, r16
    316a:	c0 01       	movw	r24, r0
    316c:	21 9f       	mul	r18, r17
    316e:	90 0d       	add	r25, r0
    3170:	11 24       	eor	r1, r1
    3172:	86 5c       	subi	r24, 0xC6	; 198
    3174:	97 4d       	sbci	r25, 0xD7	; 215
    3176:	9f 93       	push	r25
    3178:	8f 93       	push	r24
    317a:	6f 92       	push	r6
    317c:	7f 92       	push	r7
    317e:	8f 92       	push	r8
    3180:	9f 92       	push	r9
    3182:	af 92       	push	r10
    3184:	bf 92       	push	r11
    3186:	cf 92       	push	r12
    3188:	df 92       	push	r13
    318a:	ff 92       	push	r15
    318c:	ef 92       	push	r14
    318e:	ce 01       	movw	r24, r28
    3190:	8a 5e       	subi	r24, 0xEA	; 234
    3192:	9c 4f       	sbci	r25, 0xFC	; 252
    3194:	9f 93       	push	r25
    3196:	8f 93       	push	r24
    3198:	8e 01       	movw	r16, r28
    319a:	0f 5f       	subi	r16, 0xFF	; 255
    319c:	1f 4f       	sbci	r17, 0xFF	; 255
    319e:	1f 93       	push	r17
    31a0:	0f 93       	push	r16
    31a2:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			printLine(outbuf);
    31a6:	c8 01       	movw	r24, r16
    31a8:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    31ac:	41 e0       	ldi	r20, 0x01	; 1
    31ae:	6f e0       	ldi	r22, 0x0F	; 15
    31b0:	76 eb       	ldi	r23, 0xB6	; 182
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    31b8:	6f 92       	push	r6
    31ba:	7f 92       	push	r7
    31bc:	8f 92       	push	r8
    31be:	9f 92       	push	r9
    31c0:	af 92       	push	r10
    31c2:	bf 92       	push	r11
    31c4:	cf 92       	push	r12
    31c6:	df 92       	push	r13
    31c8:	ce 01       	movw	r24, r28
    31ca:	85 5c       	subi	r24, 0xC5	; 197
    31cc:	9c 4f       	sbci	r25, 0xFC	; 252
    31ce:	9f 93       	push	r25
    31d0:	8f 93       	push	r24
    31d2:	1f 93       	push	r17
    31d4:	0f 93       	push	r16
    31d6:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			writestr_OLED(1, outbuf, 2);
    31da:	42 e0       	ldi	r20, 0x02	; 2
    31dc:	b8 01       	movw	r22, r16
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			break;
    31e4:	cd bf       	out	0x3d, r28	; 61
    31e6:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    31e8:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    31ea:	4a c0       	rjmp	.+148    	; 0x3280 <report+0x1032>

		case 'V':					// Version
			get_VERSION(version);
    31ec:	6e 01       	movw	r12, r28
    31ee:	9f ef       	ldi	r25, 0xFF	; 255
    31f0:	c9 0e       	add	r12, r25
    31f2:	d1 1c       	adc	r13, r1
    31f4:	c6 01       	movw	r24, r12
    31f6:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_VERSION>
			get_time(currenttime);
    31fa:	7e 01       	movw	r14, r28
    31fc:	86 ef       	ldi	r24, 0xF6	; 246
    31fe:	e8 1a       	sub	r14, r24
    3200:	8e ef       	ldi	r24, 0xFE	; 254
    3202:	f8 0a       	sbc	r15, r24
    3204:	c7 01       	movw	r24, r14
    3206:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
    320a:	24 e3       	ldi	r18, 0x34	; 52
    320c:	20 9f       	mul	r18, r16
    320e:	c0 01       	movw	r24, r0
    3210:	21 9f       	mul	r18, r17
    3212:	90 0d       	add	r25, r0
    3214:	11 24       	eor	r1, r1
    3216:	86 5c       	subi	r24, 0xC6	; 198
    3218:	97 4d       	sbci	r25, 0xD7	; 215
    321a:	9f 93       	push	r25
    321c:	8f 93       	push	r24
    321e:	df 92       	push	r13
    3220:	cf 92       	push	r12
    3222:	ff 92       	push	r15
    3224:	ef 92       	push	r14
    3226:	ce 01       	movw	r24, r28
    3228:	88 5b       	subi	r24, 0xB8	; 184
    322a:	9c 4f       	sbci	r25, 0xFC	; 252
    322c:	9f 93       	push	r25
    322e:	8f 93       	push	r24
    3230:	8e 01       	movw	r16, r28
    3232:	0f 5f       	subi	r16, 0xFF	; 255
    3234:	1f 4f       	sbci	r17, 0xFF	; 255
    3236:	1f 93       	push	r17
    3238:	0f 93       	push	r16
    323a:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			printLine(outbuf);
    323e:	c8 01       	movw	r24, r16
    3240:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
			writestr_OLED(1, "specMech Version", 1);
    3244:	41 e0       	ldi	r20, 0x01	; 1
    3246:	60 ed       	ldi	r22, 0xD0	; 208
    3248:	73 eb       	ldi	r23, 0xB3	; 179
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			get_VERSION(outbuf);
    3250:	c8 01       	movw	r24, r16
    3252:	0e 94 3c 08 	call	0x1078	; 0x1078 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    3256:	42 e0       	ldi	r20, 0x02	; 2
    3258:	b8 01       	movw	r22, r16
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <writestr_OLED>
			break;
    3260:	cd bf       	out	0x3d, r28	; 61
    3262:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    3264:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    3266:	0c c0       	rjmp	.+24     	; 0x3280 <report+0x1032>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    3268:	6f e1       	ldi	r22, 0x1F	; 31
    326a:	76 eb       	ldi	r23, 0xB6	; 182
    326c:	8a ec       	ldi	r24, 0xCA	; 202
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			return(ERROR);
    3274:	0f 2e       	mov	r0, r31
    3276:	f3 e6       	ldi	r31, 0x63	; 99
    3278:	ff 2e       	mov	r15, r31
    327a:	f0 2d       	mov	r31, r0
    327c:	01 c0       	rjmp	.+2      	; 0x3280 <report+0x1032>
			break;
	}

	return(NOERROR);
    327e:	f1 2c       	mov	r15, r1

}
    3280:	8f 2d       	mov	r24, r15
    3282:	c9 5f       	subi	r28, 0xF9	; 249
    3284:	db 4f       	sbci	r29, 0xFB	; 251
    3286:	cd bf       	out	0x3d, r28	; 61
    3288:	de bf       	out	0x3e, r29	; 62
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	1f 91       	pop	r17
    3290:	0f 91       	pop	r16
    3292:	ff 90       	pop	r15
    3294:	ef 90       	pop	r14
    3296:	df 90       	pop	r13
    3298:	cf 90       	pop	r12
    329a:	bf 90       	pop	r11
    329c:	af 90       	pop	r10
    329e:	9f 90       	pop	r9
    32a0:	8f 90       	pop	r8
    32a2:	7f 90       	pop	r7
    32a4:	6f 90       	pop	r6
    32a6:	5f 90       	pop	r5
    32a8:	4f 90       	pop	r4
    32aa:	3f 90       	pop	r3
    32ac:	2f 90       	pop	r2
    32ae:	08 95       	ret

000032b0 <crc16>:

-------------*/

	return(NOERROR);

}
    32b0:	dc 01       	movw	r26, r24
    32b2:	40 e0       	ldi	r20, 0x00	; 0
    32b4:	50 e0       	ldi	r21, 0x00	; 0
    32b6:	80 e0       	ldi	r24, 0x00	; 0
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	1b c0       	rjmp	.+54     	; 0x32f2 <crc16+0x42>
    32bc:	fd 01       	movw	r30, r26
    32be:	e4 0f       	add	r30, r20
    32c0:	f5 1f       	adc	r31, r21
    32c2:	20 81       	ld	r18, Z
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	32 2f       	mov	r19, r18
    32c8:	22 27       	eor	r18, r18
    32ca:	82 27       	eor	r24, r18
    32cc:	93 27       	eor	r25, r19
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	0c c0       	rjmp	.+24     	; 0x32ea <crc16+0x3a>
    32d2:	99 23       	and	r25, r25
    32d4:	3c f4       	brge	.+14     	; 0x32e4 <crc16+0x34>
    32d6:	88 0f       	add	r24, r24
    32d8:	99 1f       	adc	r25, r25
    32da:	31 e2       	ldi	r19, 0x21	; 33
    32dc:	83 27       	eor	r24, r19
    32de:	30 e1       	ldi	r19, 0x10	; 16
    32e0:	93 27       	eor	r25, r19
    32e2:	02 c0       	rjmp	.+4      	; 0x32e8 <crc16+0x38>
    32e4:	88 0f       	add	r24, r24
    32e6:	99 1f       	adc	r25, r25
    32e8:	2f 5f       	subi	r18, 0xFF	; 255
    32ea:	28 30       	cpi	r18, 0x08	; 8
    32ec:	90 f3       	brcs	.-28     	; 0x32d2 <crc16+0x22>
    32ee:	4f 5f       	subi	r20, 0xFF	; 255
    32f0:	5f 4f       	sbci	r21, 0xFF	; 255
    32f2:	46 17       	cp	r20, r22
    32f4:	57 07       	cpc	r21, r23
    32f6:	10 f3       	brcs	.-60     	; 0x32bc <crc16+0xc>
    32f8:	08 95       	ret

000032fa <get_FRAM_ENCSAVETIME>:
    32fa:	ef 92       	push	r14
    32fc:	ff 92       	push	r15
    32fe:	1f 93       	push	r17
    3300:	cf 93       	push	r28
    3302:	df 93       	push	r29
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    3308:	c6 57       	subi	r28, 0x76	; 118
    330a:	d1 09       	sbc	r29, r1
    330c:	cd bf       	out	0x3d, r28	; 61
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	7c 01       	movw	r14, r24
    3312:	86 e2       	ldi	r24, 0x26	; 38
    3314:	ed e2       	ldi	r30, 0x2D	; 45
    3316:	f8 eb       	ldi	r31, 0xB8	; 184
    3318:	de 01       	movw	r26, r28
    331a:	af 5a       	subi	r26, 0xAF	; 175
    331c:	bf 4f       	sbci	r27, 0xFF	; 255
    331e:	01 90       	ld	r0, Z+
    3320:	0d 92       	st	X+, r0
    3322:	8a 95       	dec	r24
    3324:	e1 f7       	brne	.-8      	; 0x331e <get_FRAM_ENCSAVETIME+0x24>
    3326:	24 e1       	ldi	r18, 0x14	; 20
    3328:	a7 01       	movw	r20, r14
    332a:	60 e2       	ldi	r22, 0x20	; 32
    332c:	70 e0       	ldi	r23, 0x00	; 0
    332e:	80 e5       	ldi	r24, 0x50	; 80
    3330:	0e 94 b5 08 	call	0x116a	; 0x116a <read_FRAM>
    3334:	18 2f       	mov	r17, r24
    3336:	83 36       	cpi	r24, 0x63	; 99
    3338:	b1 f4       	brne	.+44     	; 0x3366 <get_FRAM_ENCSAVETIME+0x6c>
    333a:	ce 01       	movw	r24, r28
    333c:	8f 5a       	subi	r24, 0xAF	; 175
    333e:	9f 4f       	sbci	r25, 0xFF	; 255
    3340:	9f 93       	push	r25
    3342:	8f 93       	push	r24
    3344:	80 55       	subi	r24, 0x50	; 80
    3346:	91 09       	sbc	r25, r1
    3348:	7c 01       	movw	r14, r24
    334a:	9f 93       	push	r25
    334c:	8f 93       	push	r24
    334e:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
    3352:	b7 01       	movw	r22, r14
    3354:	86 e3       	ldi	r24, 0x36	; 54
    3356:	91 e0       	ldi	r25, 0x01	; 1
    3358:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    335c:	0f 90       	pop	r0
    335e:	0f 90       	pop	r0
    3360:	0f 90       	pop	r0
    3362:	0f 90       	pop	r0
    3364:	03 c0       	rjmp	.+6      	; 0x336c <get_FRAM_ENCSAVETIME+0x72>
    3366:	f7 01       	movw	r30, r14
    3368:	13 8a       	std	Z+19, r1	; 0x13
    336a:	10 e0       	ldi	r17, 0x00	; 0
    336c:	81 2f       	mov	r24, r17
    336e:	ca 58       	subi	r28, 0x8A	; 138
    3370:	df 4f       	sbci	r29, 0xFF	; 255
    3372:	cd bf       	out	0x3d, r28	; 61
    3374:	de bf       	out	0x3e, r29	; 62
    3376:	df 91       	pop	r29
    3378:	cf 91       	pop	r28
    337a:	1f 91       	pop	r17
    337c:	ff 90       	pop	r15
    337e:	ef 90       	pop	r14
    3380:	08 95       	ret

00003382 <get_FRAM_MOTOR_ENCODER>:
    3382:	cf 92       	push	r12
    3384:	df 92       	push	r13
    3386:	ef 92       	push	r14
    3388:	ff 92       	push	r15
    338a:	0f 93       	push	r16
    338c:	1f 93       	push	r17
    338e:	cf 93       	push	r28
    3390:	df 93       	push	r29
    3392:	cd b7       	in	r28, 0x3d	; 61
    3394:	de b7       	in	r29, 0x3e	; 62
    3396:	c3 58       	subi	r28, 0x83	; 131
    3398:	d1 09       	sbc	r29, r1
    339a:	cd bf       	out	0x3d, r28	; 61
    339c:	de bf       	out	0x3e, r29	; 62
    339e:	8b 01       	movw	r16, r22
    33a0:	9f e2       	ldi	r25, 0x2F	; 47
    33a2:	e3 e5       	ldi	r30, 0x53	; 83
    33a4:	f8 eb       	ldi	r31, 0xB8	; 184
    33a6:	de 01       	movw	r26, r28
    33a8:	ab 5a       	subi	r26, 0xAB	; 171
    33aa:	bf 4f       	sbci	r27, 0xFF	; 255
    33ac:	01 90       	ld	r0, Z+
    33ae:	0d 92       	st	X+, r0
    33b0:	9a 95       	dec	r25
    33b2:	e1 f7       	brne	.-8      	; 0x33ac <get_FRAM_MOTOR_ENCODER+0x2a>
    33b4:	81 38       	cpi	r24, 0x81	; 129
    33b6:	59 f0       	breq	.+22     	; 0x33ce <get_FRAM_MOTOR_ENCODER+0x4c>
    33b8:	82 38       	cpi	r24, 0x82	; 130
    33ba:	31 f0       	breq	.+12     	; 0x33c8 <get_FRAM_MOTOR_ENCODER+0x46>
    33bc:	80 38       	cpi	r24, 0x80	; 128
    33be:	09 f0       	breq	.+2      	; 0x33c2 <get_FRAM_MOTOR_ENCODER+0x40>
    33c0:	69 c0       	rjmp	.+210    	; 0x3494 <get_FRAM_MOTOR_ENCODER+0x112>
    33c2:	64 e1       	ldi	r22, 0x14	; 20
    33c4:	70 e0       	ldi	r23, 0x00	; 0
    33c6:	05 c0       	rjmp	.+10     	; 0x33d2 <get_FRAM_MOTOR_ENCODER+0x50>
    33c8:	6c e1       	ldi	r22, 0x1C	; 28
    33ca:	70 e0       	ldi	r23, 0x00	; 0
    33cc:	02 c0       	rjmp	.+4      	; 0x33d2 <get_FRAM_MOTOR_ENCODER+0x50>
    33ce:	68 e1       	ldi	r22, 0x18	; 24
    33d0:	70 e0       	ldi	r23, 0x00	; 0
    33d2:	f8 2e       	mov	r15, r24
    33d4:	24 e0       	ldi	r18, 0x04	; 4
    33d6:	ae 01       	movw	r20, r28
    33d8:	4f 5a       	subi	r20, 0xAF	; 175
    33da:	5f 4f       	sbci	r21, 0xFF	; 255
    33dc:	80 e5       	ldi	r24, 0x50	; 80
    33de:	0e 94 b5 08 	call	0x116a	; 0x116a <read_FRAM>
    33e2:	e8 2e       	mov	r14, r24
    33e4:	83 e6       	ldi	r24, 0x63	; 99
    33e6:	e8 12       	cpse	r14, r24
    33e8:	24 c0       	rjmp	.+72     	; 0x3432 <get_FRAM_MOTOR_ENCODER+0xb0>
    33ea:	81 ec       	ldi	r24, 0xC1	; 193
    33ec:	8f 0d       	add	r24, r15
    33ee:	1f 92       	push	r1
    33f0:	8f 93       	push	r24
    33f2:	ce 01       	movw	r24, r28
    33f4:	8b 5a       	subi	r24, 0xAB	; 171
    33f6:	9f 4f       	sbci	r25, 0xFF	; 255
    33f8:	9f 93       	push	r25
    33fa:	8f 93       	push	r24
    33fc:	fe 01       	movw	r30, r28
    33fe:	31 96       	adiw	r30, 0x01	; 1
    3400:	6f 01       	movw	r12, r30
    3402:	ff 93       	push	r31
    3404:	ef 93       	push	r30
    3406:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
    340a:	b6 01       	movw	r22, r12
    340c:	83 e9       	ldi	r24, 0x93	; 147
    340e:	91 e0       	ldi	r25, 0x01	; 1
    3410:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    3414:	8f ef       	ldi	r24, 0xFF	; 255
    3416:	9f ef       	ldi	r25, 0xFF	; 255
    3418:	dc 01       	movw	r26, r24
    341a:	f8 01       	movw	r30, r16
    341c:	80 83       	st	Z, r24
    341e:	91 83       	std	Z+1, r25	; 0x01
    3420:	a2 83       	std	Z+2, r26	; 0x02
    3422:	b3 83       	std	Z+3, r27	; 0x03
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	0f 90       	pop	r0
    342a:	0f 90       	pop	r0
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	35 c0       	rjmp	.+106    	; 0x349c <get_FRAM_MOTOR_ENCODER+0x11a>
    3432:	62 96       	adiw	r28, 0x12	; 18
    3434:	8f ad       	ldd	r24, Y+63	; 0x3f
    3436:	62 97       	sbiw	r28, 0x12	; 18
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	a0 e0       	ldi	r26, 0x00	; 0
    343c:	b0 e0       	ldi	r27, 0x00	; 0
    343e:	78 2f       	mov	r23, r24
    3440:	66 27       	eor	r22, r22
    3442:	55 27       	eor	r21, r21
    3444:	44 27       	eor	r20, r20
    3446:	63 96       	adiw	r28, 0x13	; 19
    3448:	9f ad       	ldd	r25, Y+63	; 0x3f
    344a:	63 97       	sbiw	r28, 0x13	; 19
    344c:	89 2f       	mov	r24, r25
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	a0 e0       	ldi	r26, 0x00	; 0
    3452:	b0 e0       	ldi	r27, 0x00	; 0
    3454:	dc 01       	movw	r26, r24
    3456:	99 27       	eor	r25, r25
    3458:	88 27       	eor	r24, r24
    345a:	84 2b       	or	r24, r20
    345c:	95 2b       	or	r25, r21
    345e:	a6 2b       	or	r26, r22
    3460:	b7 2b       	or	r27, r23
    3462:	64 96       	adiw	r28, 0x14	; 20
    3464:	4f ad       	ldd	r20, Y+63	; 0x3f
    3466:	64 97       	sbiw	r28, 0x14	; 20
    3468:	50 e0       	ldi	r21, 0x00	; 0
    346a:	60 e0       	ldi	r22, 0x00	; 0
    346c:	70 e0       	ldi	r23, 0x00	; 0
    346e:	76 2f       	mov	r23, r22
    3470:	65 2f       	mov	r22, r21
    3472:	54 2f       	mov	r21, r20
    3474:	44 27       	eor	r20, r20
    3476:	84 2b       	or	r24, r20
    3478:	95 2b       	or	r25, r21
    347a:	a6 2b       	or	r26, r22
    347c:	b7 2b       	or	r27, r23
    347e:	65 96       	adiw	r28, 0x15	; 21
    3480:	2f ad       	ldd	r18, Y+63	; 0x3f
    3482:	65 97       	sbiw	r28, 0x15	; 21
    3484:	82 2b       	or	r24, r18
    3486:	f8 01       	movw	r30, r16
    3488:	80 83       	st	Z, r24
    348a:	91 83       	std	Z+1, r25	; 0x01
    348c:	a2 83       	std	Z+2, r26	; 0x02
    348e:	b3 83       	std	Z+3, r27	; 0x03
    3490:	e1 2c       	mov	r14, r1
    3492:	04 c0       	rjmp	.+8      	; 0x349c <get_FRAM_MOTOR_ENCODER+0x11a>
    3494:	0f 2e       	mov	r0, r31
    3496:	f3 e6       	ldi	r31, 0x63	; 99
    3498:	ef 2e       	mov	r14, r31
    349a:	f0 2d       	mov	r31, r0
    349c:	8e 2d       	mov	r24, r14
    349e:	cd 57       	subi	r28, 0x7D	; 125
    34a0:	df 4f       	sbci	r29, 0xFF	; 255
    34a2:	cd bf       	out	0x3d, r28	; 61
    34a4:	de bf       	out	0x3e, r29	; 62
    34a6:	df 91       	pop	r29
    34a8:	cf 91       	pop	r28
    34aa:	1f 91       	pop	r17
    34ac:	0f 91       	pop	r16
    34ae:	ff 90       	pop	r15
    34b0:	ef 90       	pop	r14
    34b2:	df 90       	pop	r13
    34b4:	cf 90       	pop	r12
    34b6:	08 95       	ret

000034b8 <get_MOTOR>:
    34b8:	3f 92       	push	r3
    34ba:	4f 92       	push	r4
    34bc:	5f 92       	push	r5
    34be:	6f 92       	push	r6
    34c0:	7f 92       	push	r7
    34c2:	8f 92       	push	r8
    34c4:	9f 92       	push	r9
    34c6:	af 92       	push	r10
    34c8:	bf 92       	push	r11
    34ca:	cf 92       	push	r12
    34cc:	df 92       	push	r13
    34ce:	ef 92       	push	r14
    34d0:	ff 92       	push	r15
    34d2:	0f 93       	push	r16
    34d4:	1f 93       	push	r17
    34d6:	cf 93       	push	r28
    34d8:	df 93       	push	r29
    34da:	cd b7       	in	r28, 0x3d	; 61
    34dc:	de b7       	in	r29, 0x3e	; 62
    34de:	ce 58       	subi	r28, 0x8E	; 142
    34e0:	d1 09       	sbc	r29, r1
    34e2:	cd bf       	out	0x3d, r28	; 61
    34e4:	de bf       	out	0x3e, r29	; 62
    34e6:	38 2e       	mov	r3, r24
    34e8:	7a 01       	movw	r14, r20
    34ea:	42 2e       	mov	r4, r18
    34ec:	8d b6       	in	r8, 0x3d	; 61
    34ee:	9e b6       	in	r9, 0x3e	; 62
    34f0:	a2 2e       	mov	r10, r18
    34f2:	b1 2c       	mov	r11, r1
    34f4:	c5 01       	movw	r24, r10
    34f6:	02 96       	adiw	r24, 0x02	; 2
    34f8:	35 01       	movw	r6, r10
    34fa:	2f ef       	ldi	r18, 0xFF	; 255
    34fc:	62 1a       	sub	r6, r18
    34fe:	72 0a       	sbc	r7, r18
    3500:	ed b7       	in	r30, 0x3d	; 61
    3502:	fe b7       	in	r31, 0x3e	; 62
    3504:	e8 1b       	sub	r30, r24
    3506:	f9 0b       	sbc	r31, r25
    3508:	ed bf       	out	0x3d, r30	; 61
    350a:	fe bf       	out	0x3e, r31	; 62
    350c:	2d b7       	in	r18, 0x3d	; 61
    350e:	3e b7       	in	r19, 0x3e	; 62
    3510:	2f 5f       	subi	r18, 0xFF	; 255
    3512:	3f 4f       	sbci	r19, 0xFF	; 255
    3514:	69 01       	movw	r12, r18
    3516:	89 01       	movw	r16, r18
    3518:	80 e2       	ldi	r24, 0x20	; 32
    351a:	e2 e8       	ldi	r30, 0x82	; 130
    351c:	f8 eb       	ldi	r31, 0xB8	; 184
    351e:	de 01       	movw	r26, r28
    3520:	af 5a       	subi	r26, 0xAF	; 175
    3522:	bf 4f       	sbci	r27, 0xFF	; 255
    3524:	01 90       	ld	r0, Z+
    3526:	0d 92       	st	X+, r0
    3528:	8a 95       	dec	r24
    352a:	e1 f7       	brne	.-8      	; 0x3524 <get_MOTOR+0x6c>
    352c:	8e e1       	ldi	r24, 0x1E	; 30
    352e:	e2 ea       	ldi	r30, 0xA2	; 162
    3530:	f8 eb       	ldi	r31, 0xB8	; 184
    3532:	de 01       	movw	r26, r28
    3534:	af 58       	subi	r26, 0x8F	; 143
    3536:	bf 4f       	sbci	r27, 0xFF	; 255
    3538:	01 90       	ld	r0, Z+
    353a:	0d 92       	st	X+, r0
    353c:	8a 95       	dec	r24
    353e:	e1 f7       	brne	.-8      	; 0x3538 <get_MOTOR+0x80>
    3540:	68 94       	set
    3542:	55 24       	eor	r5, r5
    3544:	51 f8       	bld	r5, 1
    3546:	54 0c       	add	r5, r4
    3548:	10 92 42 2b 	sts	0x2B42, r1	; 0x802b42 <ser_recv1+0xff>
    354c:	50 92 41 2b 	sts	0x2B41, r5	; 0x802b41 <ser_recv1+0xfe>
    3550:	ed b7       	in	r30, 0x3d	; 61
    3552:	fe b7       	in	r31, 0x3e	; 62
    3554:	31 82       	std	Z+1, r3	; 0x01
    3556:	f9 01       	movw	r30, r18
    3558:	61 83       	std	Z+1, r22	; 0x01
    355a:	62 e0       	ldi	r22, 0x02	; 2
    355c:	70 e0       	ldi	r23, 0x00	; 0
    355e:	c9 01       	movw	r24, r18
    3560:	0e 94 58 19 	call	0x32b0	; 0x32b0 <crc16>
    3564:	f6 01       	movw	r30, r12
    3566:	92 83       	std	Z+2, r25	; 0x02
    3568:	83 83       	std	Z+3, r24	; 0x03
    356a:	62 e0       	ldi	r22, 0x02	; 2
    356c:	c6 01       	movw	r24, r12
    356e:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <send_USART1>
    3572:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    3576:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
    357a:	24 c0       	rjmp	.+72     	; 0x35c4 <get_MOTOR+0x10c>
    357c:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    3580:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    3584:	85 36       	cpi	r24, 0x65	; 101
    3586:	91 05       	cpc	r25, r1
    3588:	e8 f0       	brcs	.+58     	; 0x35c4 <get_MOTOR+0x10c>
    358a:	81 ec       	ldi	r24, 0xC1	; 193
    358c:	83 0d       	add	r24, r3
    358e:	1f 92       	push	r1
    3590:	8f 93       	push	r24
    3592:	ce 01       	movw	r24, r28
    3594:	8f 5a       	subi	r24, 0xAF	; 175
    3596:	9f 4f       	sbci	r25, 0xFF	; 255
    3598:	9f 93       	push	r25
    359a:	8f 93       	push	r24
    359c:	8e 01       	movw	r16, r28
    359e:	0f 5f       	subi	r16, 0xFF	; 255
    35a0:	1f 4f       	sbci	r17, 0xFF	; 255
    35a2:	1f 93       	push	r17
    35a4:	0f 93       	push	r16
    35a6:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
    35aa:	b8 01       	movw	r22, r16
    35ac:	80 e3       	ldi	r24, 0x30	; 48
    35ae:	91 e0       	ldi	r25, 0x01	; 1
    35b0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    35b4:	0f 90       	pop	r0
    35b6:	0f 90       	pop	r0
    35b8:	0f 90       	pop	r0
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0
    35be:	0f 90       	pop	r0
    35c0:	83 e6       	ldi	r24, 0x63	; 99
    35c2:	56 c0       	rjmp	.+172    	; 0x3670 <get_MOTOR+0x1b8>
    35c4:	90 91 42 2b 	lds	r25, 0x2B42	; 0x802b42 <ser_recv1+0xff>
    35c8:	80 91 41 2b 	lds	r24, 0x2B41	; 0x802b41 <ser_recv1+0xfe>
    35cc:	98 17       	cp	r25, r24
    35ce:	b0 f2       	brcs	.-84     	; 0x357c <get_MOTOR+0xc4>
    35d0:	f5 01       	movw	r30, r10
    35d2:	ed 5b       	subi	r30, 0xBD	; 189
    35d4:	f5 4d       	sbci	r31, 0xD5	; 213
    35d6:	a0 80       	ld	r10, Z
    35d8:	b1 2c       	mov	r11, r1
    35da:	ba 2c       	mov	r11, r10
    35dc:	aa 24       	eor	r10, r10
    35de:	f3 01       	movw	r30, r6
    35e0:	ed 5b       	subi	r30, 0xBD	; 189
    35e2:	f5 4d       	sbci	r31, 0xD5	; 213
    35e4:	80 81       	ld	r24, Z
    35e6:	a8 2a       	or	r10, r24
    35e8:	22 e0       	ldi	r18, 0x02	; 2
    35ea:	0b c0       	rjmp	.+22     	; 0x3602 <get_MOTOR+0x14a>
    35ec:	82 2f       	mov	r24, r18
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	fc 01       	movw	r30, r24
    35f2:	ef 5b       	subi	r30, 0xBF	; 191
    35f4:	f5 4d       	sbci	r31, 0xD5	; 213
    35f6:	30 81       	ld	r19, Z
    35f8:	f8 01       	movw	r30, r16
    35fa:	e8 0f       	add	r30, r24
    35fc:	f9 1f       	adc	r31, r25
    35fe:	30 83       	st	Z, r19
    3600:	2f 5f       	subi	r18, 0xFF	; 255
    3602:	25 15       	cp	r18, r5
    3604:	98 f3       	brcs	.-26     	; 0x35ec <get_MOTOR+0x134>
    3606:	65 2d       	mov	r22, r5
    3608:	70 e0       	ldi	r23, 0x00	; 0
    360a:	c6 01       	movw	r24, r12
    360c:	0e 94 58 19 	call	0x32b0	; 0x32b0 <crc16>
    3610:	a8 16       	cp	r10, r24
    3612:	b9 06       	cpc	r11, r25
    3614:	49 f1       	breq	.+82     	; 0x3668 <get_MOTOR+0x1b0>
    3616:	81 ec       	ldi	r24, 0xC1	; 193
    3618:	83 0d       	add	r24, r3
    361a:	1f 92       	push	r1
    361c:	8f 93       	push	r24
    361e:	ce 01       	movw	r24, r28
    3620:	8f 58       	subi	r24, 0x8F	; 143
    3622:	9f 4f       	sbci	r25, 0xFF	; 255
    3624:	9f 93       	push	r25
    3626:	8f 93       	push	r24
    3628:	8e 01       	movw	r16, r28
    362a:	0f 5f       	subi	r16, 0xFF	; 255
    362c:	1f 4f       	sbci	r17, 0xFF	; 255
    362e:	1f 93       	push	r17
    3630:	0f 93       	push	r16
    3632:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
    3636:	b8 01       	movw	r22, r16
    3638:	81 e3       	ldi	r24, 0x31	; 49
    363a:	91 e0       	ldi	r25, 0x01	; 1
    363c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	0f 90       	pop	r0
    3646:	0f 90       	pop	r0
    3648:	0f 90       	pop	r0
    364a:	0f 90       	pop	r0
    364c:	83 e6       	ldi	r24, 0x63	; 99
    364e:	10 c0       	rjmp	.+32     	; 0x3670 <get_MOTOR+0x1b8>
    3650:	82 2f       	mov	r24, r18
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	f7 01       	movw	r30, r14
    3656:	e8 0f       	add	r30, r24
    3658:	f9 1f       	adc	r31, r25
    365a:	dc 01       	movw	r26, r24
    365c:	ad 5b       	subi	r26, 0xBD	; 189
    365e:	b5 4d       	sbci	r27, 0xD5	; 213
    3660:	8c 91       	ld	r24, X
    3662:	80 83       	st	Z, r24
    3664:	2f 5f       	subi	r18, 0xFF	; 255
    3666:	01 c0       	rjmp	.+2      	; 0x366a <get_MOTOR+0x1b2>
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	24 15       	cp	r18, r4
    366c:	88 f3       	brcs	.-30     	; 0x3650 <get_MOTOR+0x198>
    366e:	80 e0       	ldi	r24, 0x00	; 0
    3670:	8d be       	out	0x3d, r8	; 61
    3672:	9e be       	out	0x3e, r9	; 62
    3674:	c2 57       	subi	r28, 0x72	; 114
    3676:	df 4f       	sbci	r29, 0xFF	; 255
    3678:	cd bf       	out	0x3d, r28	; 61
    367a:	de bf       	out	0x3e, r29	; 62
    367c:	df 91       	pop	r29
    367e:	cf 91       	pop	r28
    3680:	1f 91       	pop	r17
    3682:	0f 91       	pop	r16
    3684:	ff 90       	pop	r15
    3686:	ef 90       	pop	r14
    3688:	df 90       	pop	r13
    368a:	cf 90       	pop	r12
    368c:	bf 90       	pop	r11
    368e:	af 90       	pop	r10
    3690:	9f 90       	pop	r9
    3692:	8f 90       	pop	r8
    3694:	7f 90       	pop	r7
    3696:	6f 90       	pop	r6
    3698:	5f 90       	pop	r5
    369a:	4f 90       	pop	r4
    369c:	3f 90       	pop	r3
    369e:	08 95       	ret

000036a0 <get_MOTOR_CURRENT>:
    36a0:	cf 92       	push	r12
    36a2:	df 92       	push	r13
    36a4:	ef 92       	push	r14
    36a6:	ff 92       	push	r15
    36a8:	0f 93       	push	r16
    36aa:	1f 93       	push	r17
    36ac:	cf 93       	push	r28
    36ae:	df 93       	push	r29
    36b0:	cd b7       	in	r28, 0x3d	; 61
    36b2:	de b7       	in	r29, 0x3e	; 62
    36b4:	cd 57       	subi	r28, 0x7D	; 125
    36b6:	d1 09       	sbc	r29, r1
    36b8:	cd bf       	out	0x3d, r28	; 61
    36ba:	de bf       	out	0x3e, r29	; 62
    36bc:	e8 2e       	mov	r14, r24
    36be:	8b 01       	movw	r16, r22
    36c0:	89 e2       	ldi	r24, 0x29	; 41
    36c2:	e0 ec       	ldi	r30, 0xC0	; 192
    36c4:	f8 eb       	ldi	r31, 0xB8	; 184
    36c6:	de 01       	movw	r26, r28
    36c8:	11 96       	adiw	r26, 0x01	; 1
    36ca:	01 90       	ld	r0, Z+
    36cc:	0d 92       	st	X+, r0
    36ce:	8a 95       	dec	r24
    36d0:	e1 f7       	brne	.-8      	; 0x36ca <get_MOTOR_CURRENT+0x2a>
    36d2:	24 e0       	ldi	r18, 0x04	; 4
    36d4:	ae 01       	movw	r20, r28
    36d6:	46 58       	subi	r20, 0x86	; 134
    36d8:	5f 4f       	sbci	r21, 0xFF	; 255
    36da:	61 e3       	ldi	r22, 0x31	; 49
    36dc:	8e 2d       	mov	r24, r14
    36de:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <get_MOTOR>
    36e2:	f8 2e       	mov	r15, r24
    36e4:	83 e6       	ldi	r24, 0x63	; 99
    36e6:	f8 12       	cpse	r15, r24
    36e8:	21 c0       	rjmp	.+66     	; 0x372c <get_MOTOR_CURRENT+0x8c>
    36ea:	81 ec       	ldi	r24, 0xC1	; 193
    36ec:	8e 0d       	add	r24, r14
    36ee:	1f 92       	push	r1
    36f0:	8f 93       	push	r24
    36f2:	ce 01       	movw	r24, r28
    36f4:	01 96       	adiw	r24, 0x01	; 1
    36f6:	9f 93       	push	r25
    36f8:	8f 93       	push	r24
    36fa:	6e 01       	movw	r12, r28
    36fc:	ea e2       	ldi	r30, 0x2A	; 42
    36fe:	ce 0e       	add	r12, r30
    3700:	d1 1c       	adc	r13, r1
    3702:	df 92       	push	r13
    3704:	cf 92       	push	r12
    3706:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
    370a:	b6 01       	movw	r22, r12
    370c:	86 e3       	ldi	r24, 0x36	; 54
    370e:	91 e0       	ldi	r25, 0x01	; 1
    3710:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    3714:	8f ef       	ldi	r24, 0xFF	; 255
    3716:	9f ef       	ldi	r25, 0xFF	; 255
    3718:	f8 01       	movw	r30, r16
    371a:	80 83       	st	Z, r24
    371c:	91 83       	std	Z+1, r25	; 0x01
    371e:	0f 90       	pop	r0
    3720:	0f 90       	pop	r0
    3722:	0f 90       	pop	r0
    3724:	0f 90       	pop	r0
    3726:	0f 90       	pop	r0
    3728:	0f 90       	pop	r0
    372a:	19 c0       	rjmp	.+50     	; 0x375e <get_MOTOR_CURRENT+0xbe>
    372c:	eb 96       	adiw	r28, 0x3b	; 59
    372e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3730:	eb 97       	sbiw	r28, 0x3b	; 59
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	98 2f       	mov	r25, r24
    3736:	88 27       	eor	r24, r24
    3738:	ec 96       	adiw	r28, 0x3c	; 60
    373a:	2f ad       	ldd	r18, Y+63	; 0x3f
    373c:	ec 97       	sbiw	r28, 0x3c	; 60
    373e:	82 2b       	or	r24, r18
    3740:	9c 01       	movw	r18, r24
    3742:	22 0f       	add	r18, r18
    3744:	33 1f       	adc	r19, r19
    3746:	88 0f       	add	r24, r24
    3748:	99 1f       	adc	r25, r25
    374a:	88 0f       	add	r24, r24
    374c:	99 1f       	adc	r25, r25
    374e:	88 0f       	add	r24, r24
    3750:	99 1f       	adc	r25, r25
    3752:	82 0f       	add	r24, r18
    3754:	93 1f       	adc	r25, r19
    3756:	f8 01       	movw	r30, r16
    3758:	80 83       	st	Z, r24
    375a:	91 83       	std	Z+1, r25	; 0x01
    375c:	f1 2c       	mov	r15, r1
    375e:	8f 2d       	mov	r24, r15
    3760:	c3 58       	subi	r28, 0x83	; 131
    3762:	df 4f       	sbci	r29, 0xFF	; 255
    3764:	cd bf       	out	0x3d, r28	; 61
    3766:	de bf       	out	0x3e, r29	; 62
    3768:	df 91       	pop	r29
    376a:	cf 91       	pop	r28
    376c:	1f 91       	pop	r17
    376e:	0f 91       	pop	r16
    3770:	ff 90       	pop	r15
    3772:	ef 90       	pop	r14
    3774:	df 90       	pop	r13
    3776:	cf 90       	pop	r12
    3778:	08 95       	ret

0000377a <get_MOTOR_ENCODER>:
    377a:	ef 92       	push	r14
    377c:	ff 92       	push	r15
    377e:	0f 93       	push	r16
    3780:	1f 93       	push	r17
    3782:	cf 93       	push	r28
    3784:	df 93       	push	r29
    3786:	cd b7       	in	r28, 0x3d	; 61
    3788:	de b7       	in	r29, 0x3e	; 62
    378a:	ce 57       	subi	r28, 0x7E	; 126
    378c:	d1 09       	sbc	r29, r1
    378e:	cd bf       	out	0x3d, r28	; 61
    3790:	de bf       	out	0x3e, r29	; 62
    3792:	e8 2e       	mov	r14, r24
    3794:	8b 01       	movw	r16, r22
    3796:	89 e2       	ldi	r24, 0x29	; 41
    3798:	e9 ee       	ldi	r30, 0xE9	; 233
    379a:	f8 eb       	ldi	r31, 0xB8	; 184
    379c:	de 01       	movw	r26, r28
    379e:	aa 5a       	subi	r26, 0xAA	; 170
    37a0:	bf 4f       	sbci	r27, 0xFF	; 255
    37a2:	01 90       	ld	r0, Z+
    37a4:	0d 92       	st	X+, r0
    37a6:	8a 95       	dec	r24
    37a8:	e1 f7       	brne	.-8      	; 0x37a2 <get_MOTOR_ENCODER+0x28>
    37aa:	25 e0       	ldi	r18, 0x05	; 5
    37ac:	ae 01       	movw	r20, r28
    37ae:	4f 5a       	subi	r20, 0xAF	; 175
    37b0:	5f 4f       	sbci	r21, 0xFF	; 255
    37b2:	60 e1       	ldi	r22, 0x10	; 16
    37b4:	8e 2d       	mov	r24, r14
    37b6:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <get_MOTOR>
    37ba:	f8 2e       	mov	r15, r24
    37bc:	83 e6       	ldi	r24, 0x63	; 99
    37be:	f8 12       	cpse	r15, r24
    37c0:	1c c0       	rjmp	.+56     	; 0x37fa <get_MOTOR_ENCODER+0x80>
    37c2:	81 ec       	ldi	r24, 0xC1	; 193
    37c4:	8e 0d       	add	r24, r14
    37c6:	1f 92       	push	r1
    37c8:	8f 93       	push	r24
    37ca:	ce 01       	movw	r24, r28
    37cc:	8a 5a       	subi	r24, 0xAA	; 170
    37ce:	9f 4f       	sbci	r25, 0xFF	; 255
    37d0:	9f 93       	push	r25
    37d2:	8f 93       	push	r24
    37d4:	8e 01       	movw	r16, r28
    37d6:	0f 5f       	subi	r16, 0xFF	; 255
    37d8:	1f 4f       	sbci	r17, 0xFF	; 255
    37da:	1f 93       	push	r17
    37dc:	0f 93       	push	r16
    37de:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
    37e2:	b8 01       	movw	r22, r16
    37e4:	86 e3       	ldi	r24, 0x36	; 54
    37e6:	91 e0       	ldi	r25, 0x01	; 1
    37e8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    37ec:	0f 90       	pop	r0
    37ee:	0f 90       	pop	r0
    37f0:	0f 90       	pop	r0
    37f2:	0f 90       	pop	r0
    37f4:	0f 90       	pop	r0
    37f6:	0f 90       	pop	r0
    37f8:	30 c0       	rjmp	.+96     	; 0x385a <get_MOTOR_ENCODER+0xe0>
    37fa:	62 96       	adiw	r28, 0x12	; 18
    37fc:	8f ad       	ldd	r24, Y+63	; 0x3f
    37fe:	62 97       	sbiw	r28, 0x12	; 18
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	a0 e0       	ldi	r26, 0x00	; 0
    3804:	b0 e0       	ldi	r27, 0x00	; 0
    3806:	78 2f       	mov	r23, r24
    3808:	66 27       	eor	r22, r22
    380a:	55 27       	eor	r21, r21
    380c:	44 27       	eor	r20, r20
    380e:	63 96       	adiw	r28, 0x13	; 19
    3810:	9f ad       	ldd	r25, Y+63	; 0x3f
    3812:	63 97       	sbiw	r28, 0x13	; 19
    3814:	89 2f       	mov	r24, r25
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	a0 e0       	ldi	r26, 0x00	; 0
    381a:	b0 e0       	ldi	r27, 0x00	; 0
    381c:	dc 01       	movw	r26, r24
    381e:	99 27       	eor	r25, r25
    3820:	88 27       	eor	r24, r24
    3822:	84 2b       	or	r24, r20
    3824:	95 2b       	or	r25, r21
    3826:	a6 2b       	or	r26, r22
    3828:	b7 2b       	or	r27, r23
    382a:	64 96       	adiw	r28, 0x14	; 20
    382c:	4f ad       	ldd	r20, Y+63	; 0x3f
    382e:	64 97       	sbiw	r28, 0x14	; 20
    3830:	50 e0       	ldi	r21, 0x00	; 0
    3832:	60 e0       	ldi	r22, 0x00	; 0
    3834:	70 e0       	ldi	r23, 0x00	; 0
    3836:	76 2f       	mov	r23, r22
    3838:	65 2f       	mov	r22, r21
    383a:	54 2f       	mov	r21, r20
    383c:	44 27       	eor	r20, r20
    383e:	84 2b       	or	r24, r20
    3840:	95 2b       	or	r25, r21
    3842:	a6 2b       	or	r26, r22
    3844:	b7 2b       	or	r27, r23
    3846:	65 96       	adiw	r28, 0x15	; 21
    3848:	2f ad       	ldd	r18, Y+63	; 0x3f
    384a:	65 97       	sbiw	r28, 0x15	; 21
    384c:	82 2b       	or	r24, r18
    384e:	f8 01       	movw	r30, r16
    3850:	80 83       	st	Z, r24
    3852:	91 83       	std	Z+1, r25	; 0x01
    3854:	a2 83       	std	Z+2, r26	; 0x02
    3856:	b3 83       	std	Z+3, r27	; 0x03
    3858:	f1 2c       	mov	r15, r1
    385a:	8f 2d       	mov	r24, r15
    385c:	c2 58       	subi	r28, 0x82	; 130
    385e:	df 4f       	sbci	r29, 0xFF	; 255
    3860:	cd bf       	out	0x3d, r28	; 61
    3862:	de bf       	out	0x3e, r29	; 62
    3864:	df 91       	pop	r29
    3866:	cf 91       	pop	r28
    3868:	1f 91       	pop	r17
    386a:	0f 91       	pop	r16
    386c:	ff 90       	pop	r15
    386e:	ef 90       	pop	r14
    3870:	08 95       	ret

00003872 <get_MOTOR_FLOAT>:
    3872:	cf 92       	push	r12
    3874:	df 92       	push	r13
    3876:	ef 92       	push	r14
    3878:	ff 92       	push	r15
    387a:	0f 93       	push	r16
    387c:	1f 93       	push	r17
    387e:	cf 93       	push	r28
    3880:	df 93       	push	r29
    3882:	cd b7       	in	r28, 0x3d	; 61
    3884:	de b7       	in	r29, 0x3e	; 62
    3886:	c9 57       	subi	r28, 0x79	; 121
    3888:	d1 09       	sbc	r29, r1
    388a:	cd bf       	out	0x3d, r28	; 61
    388c:	de bf       	out	0x3e, r29	; 62
    388e:	e8 2e       	mov	r14, r24
    3890:	8a 01       	movw	r16, r20
    3892:	87 e2       	ldi	r24, 0x27	; 39
    3894:	e2 e1       	ldi	r30, 0x12	; 18
    3896:	f9 eb       	ldi	r31, 0xB9	; 185
    3898:	de 01       	movw	r26, r28
    389a:	ad 5a       	subi	r26, 0xAD	; 173
    389c:	bf 4f       	sbci	r27, 0xFF	; 255
    389e:	01 90       	ld	r0, Z+
    38a0:	0d 92       	st	X+, r0
    38a2:	8a 95       	dec	r24
    38a4:	e1 f7       	brne	.-8      	; 0x389e <get_MOTOR_FLOAT+0x2c>
    38a6:	22 e0       	ldi	r18, 0x02	; 2
    38a8:	ae 01       	movw	r20, r28
    38aa:	4f 5a       	subi	r20, 0xAF	; 175
    38ac:	5f 4f       	sbci	r21, 0xFF	; 255
    38ae:	8e 2d       	mov	r24, r14
    38b0:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <get_MOTOR>
    38b4:	f8 2e       	mov	r15, r24
    38b6:	83 e6       	ldi	r24, 0x63	; 99
    38b8:	f8 12       	cpse	r15, r24
    38ba:	25 c0       	rjmp	.+74     	; 0x3906 <get_MOTOR_FLOAT+0x94>
    38bc:	81 ec       	ldi	r24, 0xC1	; 193
    38be:	8e 0d       	add	r24, r14
    38c0:	1f 92       	push	r1
    38c2:	8f 93       	push	r24
    38c4:	ce 01       	movw	r24, r28
    38c6:	8d 5a       	subi	r24, 0xAD	; 173
    38c8:	9f 4f       	sbci	r25, 0xFF	; 255
    38ca:	9f 93       	push	r25
    38cc:	8f 93       	push	r24
    38ce:	fe 01       	movw	r30, r28
    38d0:	31 96       	adiw	r30, 0x01	; 1
    38d2:	6f 01       	movw	r12, r30
    38d4:	ff 93       	push	r31
    38d6:	ef 93       	push	r30
    38d8:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
    38dc:	b6 01       	movw	r22, r12
    38de:	86 e3       	ldi	r24, 0x36	; 54
    38e0:	91 e0       	ldi	r25, 0x01	; 1
    38e2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    38e6:	80 e0       	ldi	r24, 0x00	; 0
    38e8:	90 e8       	ldi	r25, 0x80	; 128
    38ea:	a6 e2       	ldi	r26, 0x26	; 38
    38ec:	b4 ec       	ldi	r27, 0xC4	; 196
    38ee:	f8 01       	movw	r30, r16
    38f0:	80 83       	st	Z, r24
    38f2:	91 83       	std	Z+1, r25	; 0x01
    38f4:	a2 83       	std	Z+2, r26	; 0x02
    38f6:	b3 83       	std	Z+3, r27	; 0x03
    38f8:	0f 90       	pop	r0
    38fa:	0f 90       	pop	r0
    38fc:	0f 90       	pop	r0
    38fe:	0f 90       	pop	r0
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	1c c0       	rjmp	.+56     	; 0x393e <get_MOTOR_FLOAT+0xcc>
    3906:	62 96       	adiw	r28, 0x12	; 18
    3908:	6f ad       	ldd	r22, Y+63	; 0x3f
    390a:	62 97       	sbiw	r28, 0x12	; 18
    390c:	70 e0       	ldi	r23, 0x00	; 0
    390e:	76 2f       	mov	r23, r22
    3910:	66 27       	eor	r22, r22
    3912:	63 96       	adiw	r28, 0x13	; 19
    3914:	8f ad       	ldd	r24, Y+63	; 0x3f
    3916:	63 97       	sbiw	r28, 0x13	; 19
    3918:	68 2b       	or	r22, r24
    391a:	07 2e       	mov	r0, r23
    391c:	00 0c       	add	r0, r0
    391e:	88 0b       	sbc	r24, r24
    3920:	99 0b       	sbc	r25, r25
    3922:	0e 94 65 31 	call	0x62ca	; 0x62ca <__floatsisf>
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	40 e2       	ldi	r20, 0x20	; 32
    392c:	51 e4       	ldi	r21, 0x41	; 65
    392e:	0e 94 bb 30 	call	0x6176	; 0x6176 <__divsf3>
    3932:	f8 01       	movw	r30, r16
    3934:	60 83       	st	Z, r22
    3936:	71 83       	std	Z+1, r23	; 0x01
    3938:	82 83       	std	Z+2, r24	; 0x02
    393a:	93 83       	std	Z+3, r25	; 0x03
    393c:	f1 2c       	mov	r15, r1
    393e:	8f 2d       	mov	r24, r15
    3940:	c7 58       	subi	r28, 0x87	; 135
    3942:	df 4f       	sbci	r29, 0xFF	; 255
    3944:	cd bf       	out	0x3d, r28	; 61
    3946:	de bf       	out	0x3e, r29	; 62
    3948:	df 91       	pop	r29
    394a:	cf 91       	pop	r28
    394c:	1f 91       	pop	r17
    394e:	0f 91       	pop	r16
    3950:	ff 90       	pop	r15
    3952:	ef 90       	pop	r14
    3954:	df 90       	pop	r13
    3956:	cf 90       	pop	r12
    3958:	08 95       	ret

0000395a <get_MOTOR_MAXCURRENT>:
    395a:	cf 92       	push	r12
    395c:	df 92       	push	r13
    395e:	ef 92       	push	r14
    3960:	ff 92       	push	r15
    3962:	0f 93       	push	r16
    3964:	1f 93       	push	r17
    3966:	cf 93       	push	r28
    3968:	df 93       	push	r29
    396a:	cd b7       	in	r28, 0x3d	; 61
    396c:	de b7       	in	r29, 0x3e	; 62
    396e:	c4 58       	subi	r28, 0x84	; 132
    3970:	d1 09       	sbc	r29, r1
    3972:	cd bf       	out	0x3d, r28	; 61
    3974:	de bf       	out	0x3e, r29	; 62
    3976:	e8 2e       	mov	r14, r24
    3978:	8b 01       	movw	r16, r22
    397a:	8c e2       	ldi	r24, 0x2C	; 44
    397c:	e9 e3       	ldi	r30, 0x39	; 57
    397e:	f9 eb       	ldi	r31, 0xB9	; 185
    3980:	de 01       	movw	r26, r28
    3982:	11 96       	adiw	r26, 0x01	; 1
    3984:	01 90       	ld	r0, Z+
    3986:	0d 92       	st	X+, r0
    3988:	8a 95       	dec	r24
    398a:	e1 f7       	brne	.-8      	; 0x3984 <get_MOTOR_MAXCURRENT+0x2a>
    398c:	28 e0       	ldi	r18, 0x08	; 8
    398e:	ae 01       	movw	r20, r28
    3990:	43 58       	subi	r20, 0x83	; 131
    3992:	5f 4f       	sbci	r21, 0xFF	; 255
    3994:	67 e8       	ldi	r22, 0x87	; 135
    3996:	8e 2d       	mov	r24, r14
    3998:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <get_MOTOR>
    399c:	f8 2e       	mov	r15, r24
    399e:	83 e6       	ldi	r24, 0x63	; 99
    39a0:	f8 12       	cpse	r15, r24
    39a2:	1b c0       	rjmp	.+54     	; 0x39da <get_MOTOR_MAXCURRENT+0x80>
    39a4:	81 ec       	ldi	r24, 0xC1	; 193
    39a6:	8e 0d       	add	r24, r14
    39a8:	1f 92       	push	r1
    39aa:	8f 93       	push	r24
    39ac:	ce 01       	movw	r24, r28
    39ae:	01 96       	adiw	r24, 0x01	; 1
    39b0:	9f 93       	push	r25
    39b2:	8f 93       	push	r24
    39b4:	8e 01       	movw	r16, r28
    39b6:	03 5d       	subi	r16, 0xD3	; 211
    39b8:	1f 4f       	sbci	r17, 0xFF	; 255
    39ba:	1f 93       	push	r17
    39bc:	0f 93       	push	r16
    39be:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
    39c2:	b8 01       	movw	r22, r16
    39c4:	86 e3       	ldi	r24, 0x36	; 54
    39c6:	91 e0       	ldi	r25, 0x01	; 1
    39c8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    39cc:	0f 90       	pop	r0
    39ce:	0f 90       	pop	r0
    39d0:	0f 90       	pop	r0
    39d2:	0f 90       	pop	r0
    39d4:	0f 90       	pop	r0
    39d6:	0f 90       	pop	r0
    39d8:	45 c0       	rjmp	.+138    	; 0x3a64 <get_MOTOR_MAXCURRENT+0x10a>
    39da:	ee 96       	adiw	r28, 0x3e	; 62
    39dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    39de:	ee 97       	sbiw	r28, 0x3e	; 62
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	a0 e0       	ldi	r26, 0x00	; 0
    39e4:	b0 e0       	ldi	r27, 0x00	; 0
    39e6:	f8 2e       	mov	r15, r24
    39e8:	ee 24       	eor	r14, r14
    39ea:	dd 24       	eor	r13, r13
    39ec:	cc 24       	eor	r12, r12
    39ee:	ef 96       	adiw	r28, 0x3f	; 63
    39f0:	4f ad       	ldd	r20, Y+63	; 0x3f
    39f2:	ef 97       	sbiw	r28, 0x3f	; 63
    39f4:	50 e0       	ldi	r21, 0x00	; 0
    39f6:	60 e0       	ldi	r22, 0x00	; 0
    39f8:	70 e0       	ldi	r23, 0x00	; 0
    39fa:	da 01       	movw	r26, r20
    39fc:	99 27       	eor	r25, r25
    39fe:	88 27       	eor	r24, r24
    3a00:	8c 29       	or	r24, r12
    3a02:	9d 29       	or	r25, r13
    3a04:	ae 29       	or	r26, r14
    3a06:	bf 29       	or	r27, r15
    3a08:	c1 58       	subi	r28, 0x81	; 129
    3a0a:	df 4f       	sbci	r29, 0xFF	; 255
    3a0c:	48 81       	ld	r20, Y
    3a0e:	cf 57       	subi	r28, 0x7F	; 127
    3a10:	d0 40       	sbci	r29, 0x00	; 0
    3a12:	50 e0       	ldi	r21, 0x00	; 0
    3a14:	60 e0       	ldi	r22, 0x00	; 0
    3a16:	70 e0       	ldi	r23, 0x00	; 0
    3a18:	76 2f       	mov	r23, r22
    3a1a:	65 2f       	mov	r22, r21
    3a1c:	54 2f       	mov	r21, r20
    3a1e:	44 27       	eor	r20, r20
    3a20:	84 2b       	or	r24, r20
    3a22:	95 2b       	or	r25, r21
    3a24:	a6 2b       	or	r26, r22
    3a26:	b7 2b       	or	r27, r23
    3a28:	c0 58       	subi	r28, 0x80	; 128
    3a2a:	df 4f       	sbci	r29, 0xFF	; 255
    3a2c:	28 81       	ld	r18, Y
    3a2e:	c0 58       	subi	r28, 0x80	; 128
    3a30:	d0 40       	sbci	r29, 0x00	; 0
    3a32:	82 2b       	or	r24, r18
    3a34:	88 0f       	add	r24, r24
    3a36:	99 1f       	adc	r25, r25
    3a38:	aa 1f       	adc	r26, r26
    3a3a:	bb 1f       	adc	r27, r27
    3a3c:	ac 01       	movw	r20, r24
    3a3e:	bd 01       	movw	r22, r26
    3a40:	44 0f       	add	r20, r20
    3a42:	55 1f       	adc	r21, r21
    3a44:	66 1f       	adc	r22, r22
    3a46:	77 1f       	adc	r23, r23
    3a48:	44 0f       	add	r20, r20
    3a4a:	55 1f       	adc	r21, r21
    3a4c:	66 1f       	adc	r22, r22
    3a4e:	77 1f       	adc	r23, r23
    3a50:	84 0f       	add	r24, r20
    3a52:	95 1f       	adc	r25, r21
    3a54:	a6 1f       	adc	r26, r22
    3a56:	b7 1f       	adc	r27, r23
    3a58:	f8 01       	movw	r30, r16
    3a5a:	80 83       	st	Z, r24
    3a5c:	91 83       	std	Z+1, r25	; 0x01
    3a5e:	a2 83       	std	Z+2, r26	; 0x02
    3a60:	b3 83       	std	Z+3, r27	; 0x03
    3a62:	f1 2c       	mov	r15, r1
    3a64:	8f 2d       	mov	r24, r15
    3a66:	cc 57       	subi	r28, 0x7C	; 124
    3a68:	df 4f       	sbci	r29, 0xFF	; 255
    3a6a:	cd bf       	out	0x3d, r28	; 61
    3a6c:	de bf       	out	0x3e, r29	; 62
    3a6e:	df 91       	pop	r29
    3a70:	cf 91       	pop	r28
    3a72:	1f 91       	pop	r17
    3a74:	0f 91       	pop	r16
    3a76:	ff 90       	pop	r15
    3a78:	ef 90       	pop	r14
    3a7a:	df 90       	pop	r13
    3a7c:	cf 90       	pop	r12
    3a7e:	08 95       	ret

00003a80 <get_MOTOR_PID>:
    3a80:	ef 92       	push	r14
    3a82:	ff 92       	push	r15
    3a84:	0f 93       	push	r16
    3a86:	1f 93       	push	r17
    3a88:	cf 93       	push	r28
    3a8a:	df 93       	push	r29
    3a8c:	cd b7       	in	r28, 0x3d	; 61
    3a8e:	de b7       	in	r29, 0x3e	; 62
    3a90:	c1 59       	subi	r28, 0x91	; 145
    3a92:	d1 09       	sbc	r29, r1
    3a94:	cd bf       	out	0x3d, r28	; 61
    3a96:	de bf       	out	0x3e, r29	; 62
    3a98:	f8 2e       	mov	r15, r24
    3a9a:	8b 01       	movw	r16, r22
    3a9c:	85 e2       	ldi	r24, 0x25	; 37
    3a9e:	e5 e6       	ldi	r30, 0x65	; 101
    3aa0:	f9 eb       	ldi	r31, 0xB9	; 185
    3aa2:	de 01       	movw	r26, r28
    3aa4:	11 96       	adiw	r26, 0x01	; 1
    3aa6:	01 90       	ld	r0, Z+
    3aa8:	0d 92       	st	X+, r0
    3aaa:	8a 95       	dec	r24
    3aac:	e1 f7       	brne	.-8      	; 0x3aa6 <get_MOTOR_PID+0x26>
    3aae:	2c e1       	ldi	r18, 0x1C	; 28
    3ab0:	ae 01       	movw	r20, r28
    3ab2:	4a 58       	subi	r20, 0x8A	; 138
    3ab4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ab6:	6f e3       	ldi	r22, 0x3F	; 63
    3ab8:	8f 2d       	mov	r24, r15
    3aba:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <get_MOTOR>
    3abe:	e8 2e       	mov	r14, r24
    3ac0:	83 e6       	ldi	r24, 0x63	; 99
    3ac2:	e8 12       	cpse	r14, r24
    3ac4:	1b c0       	rjmp	.+54     	; 0x3afc <get_MOTOR_PID+0x7c>
    3ac6:	81 ec       	ldi	r24, 0xC1	; 193
    3ac8:	8f 0d       	add	r24, r15
    3aca:	1f 92       	push	r1
    3acc:	8f 93       	push	r24
    3ace:	ce 01       	movw	r24, r28
    3ad0:	01 96       	adiw	r24, 0x01	; 1
    3ad2:	9f 93       	push	r25
    3ad4:	8f 93       	push	r24
    3ad6:	8e 01       	movw	r16, r28
    3ad8:	0a 5d       	subi	r16, 0xDA	; 218
    3ada:	1f 4f       	sbci	r17, 0xFF	; 255
    3adc:	1f 93       	push	r17
    3ade:	0f 93       	push	r16
    3ae0:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
    3ae4:	b8 01       	movw	r22, r16
    3ae6:	86 e3       	ldi	r24, 0x36	; 54
    3ae8:	91 e0       	ldi	r25, 0x01	; 1
    3aea:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    3aee:	0f 90       	pop	r0
    3af0:	0f 90       	pop	r0
    3af2:	0f 90       	pop	r0
    3af4:	0f 90       	pop	r0
    3af6:	0f 90       	pop	r0
    3af8:	0f 90       	pop	r0
    3afa:	e5 c1       	rjmp	.+970    	; 0x3ec6 <get_MOTOR_PID+0x446>
    3afc:	e7 96       	adiw	r28, 0x37	; 55
    3afe:	4f ad       	ldd	r20, Y+63	; 0x3f
    3b00:	e7 97       	sbiw	r28, 0x37	; 55
    3b02:	50 e0       	ldi	r21, 0x00	; 0
    3b04:	60 e0       	ldi	r22, 0x00	; 0
    3b06:	70 e0       	ldi	r23, 0x00	; 0
    3b08:	74 2f       	mov	r23, r20
    3b0a:	66 27       	eor	r22, r22
    3b0c:	55 27       	eor	r21, r21
    3b0e:	44 27       	eor	r20, r20
    3b10:	e8 96       	adiw	r28, 0x38	; 56
    3b12:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b14:	e8 97       	sbiw	r28, 0x38	; 56
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	a0 e0       	ldi	r26, 0x00	; 0
    3b1a:	b0 e0       	ldi	r27, 0x00	; 0
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	99 27       	eor	r25, r25
    3b20:	88 27       	eor	r24, r24
    3b22:	48 2b       	or	r20, r24
    3b24:	59 2b       	or	r21, r25
    3b26:	6a 2b       	or	r22, r26
    3b28:	7b 2b       	or	r23, r27
    3b2a:	e9 96       	adiw	r28, 0x39	; 57
    3b2c:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b2e:	e9 97       	sbiw	r28, 0x39	; 57
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	a0 e0       	ldi	r26, 0x00	; 0
    3b34:	b0 e0       	ldi	r27, 0x00	; 0
    3b36:	ba 2f       	mov	r27, r26
    3b38:	a9 2f       	mov	r26, r25
    3b3a:	98 2f       	mov	r25, r24
    3b3c:	88 27       	eor	r24, r24
    3b3e:	84 2b       	or	r24, r20
    3b40:	95 2b       	or	r25, r21
    3b42:	a6 2b       	or	r26, r22
    3b44:	b7 2b       	or	r27, r23
    3b46:	ea 96       	adiw	r28, 0x3a	; 58
    3b48:	2f ad       	ldd	r18, Y+63	; 0x3f
    3b4a:	ea 97       	sbiw	r28, 0x3a	; 58
    3b4c:	bc 01       	movw	r22, r24
    3b4e:	cd 01       	movw	r24, r26
    3b50:	62 2b       	or	r22, r18
    3b52:	0e 94 65 31 	call	0x62ca	; 0x62ca <__floatsisf>
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	30 e0       	ldi	r19, 0x00	; 0
    3b5a:	40 e8       	ldi	r20, 0x80	; 128
    3b5c:	5a e3       	ldi	r21, 0x3A	; 58
    3b5e:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
    3b62:	f8 01       	movw	r30, r16
    3b64:	60 83       	st	Z, r22
    3b66:	71 83       	std	Z+1, r23	; 0x01
    3b68:	82 83       	std	Z+2, r24	; 0x02
    3b6a:	93 83       	std	Z+3, r25	; 0x03
    3b6c:	eb 96       	adiw	r28, 0x3b	; 59
    3b6e:	4f ad       	ldd	r20, Y+63	; 0x3f
    3b70:	eb 97       	sbiw	r28, 0x3b	; 59
    3b72:	50 e0       	ldi	r21, 0x00	; 0
    3b74:	60 e0       	ldi	r22, 0x00	; 0
    3b76:	70 e0       	ldi	r23, 0x00	; 0
    3b78:	74 2f       	mov	r23, r20
    3b7a:	66 27       	eor	r22, r22
    3b7c:	55 27       	eor	r21, r21
    3b7e:	44 27       	eor	r20, r20
    3b80:	ec 96       	adiw	r28, 0x3c	; 60
    3b82:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b84:	ec 97       	sbiw	r28, 0x3c	; 60
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	a0 e0       	ldi	r26, 0x00	; 0
    3b8a:	b0 e0       	ldi	r27, 0x00	; 0
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	99 27       	eor	r25, r25
    3b90:	88 27       	eor	r24, r24
    3b92:	48 2b       	or	r20, r24
    3b94:	59 2b       	or	r21, r25
    3b96:	6a 2b       	or	r22, r26
    3b98:	7b 2b       	or	r23, r27
    3b9a:	ed 96       	adiw	r28, 0x3d	; 61
    3b9c:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b9e:	ed 97       	sbiw	r28, 0x3d	; 61
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	a0 e0       	ldi	r26, 0x00	; 0
    3ba4:	b0 e0       	ldi	r27, 0x00	; 0
    3ba6:	ba 2f       	mov	r27, r26
    3ba8:	a9 2f       	mov	r26, r25
    3baa:	98 2f       	mov	r25, r24
    3bac:	88 27       	eor	r24, r24
    3bae:	84 2b       	or	r24, r20
    3bb0:	95 2b       	or	r25, r21
    3bb2:	a6 2b       	or	r26, r22
    3bb4:	b7 2b       	or	r27, r23
    3bb6:	ee 96       	adiw	r28, 0x3e	; 62
    3bb8:	2f ad       	ldd	r18, Y+63	; 0x3f
    3bba:	ee 97       	sbiw	r28, 0x3e	; 62
    3bbc:	bc 01       	movw	r22, r24
    3bbe:	cd 01       	movw	r24, r26
    3bc0:	62 2b       	or	r22, r18
    3bc2:	0e 94 65 31 	call	0x62ca	; 0x62ca <__floatsisf>
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	40 e8       	ldi	r20, 0x80	; 128
    3bcc:	5a e3       	ldi	r21, 0x3A	; 58
    3bce:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
    3bd2:	f8 01       	movw	r30, r16
    3bd4:	64 83       	std	Z+4, r22	; 0x04
    3bd6:	75 83       	std	Z+5, r23	; 0x05
    3bd8:	86 83       	std	Z+6, r24	; 0x06
    3bda:	97 83       	std	Z+7, r25	; 0x07
    3bdc:	ef 96       	adiw	r28, 0x3f	; 63
    3bde:	4f ad       	ldd	r20, Y+63	; 0x3f
    3be0:	ef 97       	sbiw	r28, 0x3f	; 63
    3be2:	50 e0       	ldi	r21, 0x00	; 0
    3be4:	60 e0       	ldi	r22, 0x00	; 0
    3be6:	70 e0       	ldi	r23, 0x00	; 0
    3be8:	74 2f       	mov	r23, r20
    3bea:	66 27       	eor	r22, r22
    3bec:	55 27       	eor	r21, r21
    3bee:	44 27       	eor	r20, r20
    3bf0:	c1 58       	subi	r28, 0x81	; 129
    3bf2:	df 4f       	sbci	r29, 0xFF	; 255
    3bf4:	88 81       	ld	r24, Y
    3bf6:	cf 57       	subi	r28, 0x7F	; 127
    3bf8:	d0 40       	sbci	r29, 0x00	; 0
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	a0 e0       	ldi	r26, 0x00	; 0
    3bfe:	b0 e0       	ldi	r27, 0x00	; 0
    3c00:	dc 01       	movw	r26, r24
    3c02:	99 27       	eor	r25, r25
    3c04:	88 27       	eor	r24, r24
    3c06:	48 2b       	or	r20, r24
    3c08:	59 2b       	or	r21, r25
    3c0a:	6a 2b       	or	r22, r26
    3c0c:	7b 2b       	or	r23, r27
    3c0e:	c0 58       	subi	r28, 0x80	; 128
    3c10:	df 4f       	sbci	r29, 0xFF	; 255
    3c12:	88 81       	ld	r24, Y
    3c14:	c0 58       	subi	r28, 0x80	; 128
    3c16:	d0 40       	sbci	r29, 0x00	; 0
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	a0 e0       	ldi	r26, 0x00	; 0
    3c1c:	b0 e0       	ldi	r27, 0x00	; 0
    3c1e:	ba 2f       	mov	r27, r26
    3c20:	a9 2f       	mov	r26, r25
    3c22:	98 2f       	mov	r25, r24
    3c24:	88 27       	eor	r24, r24
    3c26:	84 2b       	or	r24, r20
    3c28:	95 2b       	or	r25, r21
    3c2a:	a6 2b       	or	r26, r22
    3c2c:	b7 2b       	or	r27, r23
    3c2e:	cf 57       	subi	r28, 0x7F	; 127
    3c30:	df 4f       	sbci	r29, 0xFF	; 255
    3c32:	28 81       	ld	r18, Y
    3c34:	c1 58       	subi	r28, 0x81	; 129
    3c36:	d0 40       	sbci	r29, 0x00	; 0
    3c38:	bc 01       	movw	r22, r24
    3c3a:	cd 01       	movw	r24, r26
    3c3c:	62 2b       	or	r22, r18
    3c3e:	0e 94 65 31 	call	0x62ca	; 0x62ca <__floatsisf>
    3c42:	20 e0       	ldi	r18, 0x00	; 0
    3c44:	30 e0       	ldi	r19, 0x00	; 0
    3c46:	40 e8       	ldi	r20, 0x80	; 128
    3c48:	5a e3       	ldi	r21, 0x3A	; 58
    3c4a:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
    3c4e:	f8 01       	movw	r30, r16
    3c50:	60 87       	std	Z+8, r22	; 0x08
    3c52:	71 87       	std	Z+9, r23	; 0x09
    3c54:	82 87       	std	Z+10, r24	; 0x0a
    3c56:	93 87       	std	Z+11, r25	; 0x0b
    3c58:	ce 57       	subi	r28, 0x7E	; 126
    3c5a:	df 4f       	sbci	r29, 0xFF	; 255
    3c5c:	88 81       	ld	r24, Y
    3c5e:	c2 58       	subi	r28, 0x82	; 130
    3c60:	d0 40       	sbci	r29, 0x00	; 0
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	a0 e0       	ldi	r26, 0x00	; 0
    3c66:	b0 e0       	ldi	r27, 0x00	; 0
    3c68:	78 2f       	mov	r23, r24
    3c6a:	66 27       	eor	r22, r22
    3c6c:	55 27       	eor	r21, r21
    3c6e:	44 27       	eor	r20, r20
    3c70:	cd 57       	subi	r28, 0x7D	; 125
    3c72:	df 4f       	sbci	r29, 0xFF	; 255
    3c74:	98 81       	ld	r25, Y
    3c76:	c3 58       	subi	r28, 0x83	; 131
    3c78:	d0 40       	sbci	r29, 0x00	; 0
    3c7a:	89 2f       	mov	r24, r25
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	a0 e0       	ldi	r26, 0x00	; 0
    3c80:	b0 e0       	ldi	r27, 0x00	; 0
    3c82:	dc 01       	movw	r26, r24
    3c84:	99 27       	eor	r25, r25
    3c86:	88 27       	eor	r24, r24
    3c88:	84 2b       	or	r24, r20
    3c8a:	95 2b       	or	r25, r21
    3c8c:	a6 2b       	or	r26, r22
    3c8e:	b7 2b       	or	r27, r23
    3c90:	cc 57       	subi	r28, 0x7C	; 124
    3c92:	df 4f       	sbci	r29, 0xFF	; 255
    3c94:	48 81       	ld	r20, Y
    3c96:	c4 58       	subi	r28, 0x84	; 132
    3c98:	d0 40       	sbci	r29, 0x00	; 0
    3c9a:	50 e0       	ldi	r21, 0x00	; 0
    3c9c:	60 e0       	ldi	r22, 0x00	; 0
    3c9e:	70 e0       	ldi	r23, 0x00	; 0
    3ca0:	76 2f       	mov	r23, r22
    3ca2:	65 2f       	mov	r22, r21
    3ca4:	54 2f       	mov	r21, r20
    3ca6:	44 27       	eor	r20, r20
    3ca8:	84 2b       	or	r24, r20
    3caa:	95 2b       	or	r25, r21
    3cac:	a6 2b       	or	r26, r22
    3cae:	b7 2b       	or	r27, r23
    3cb0:	cb 57       	subi	r28, 0x7B	; 123
    3cb2:	df 4f       	sbci	r29, 0xFF	; 255
    3cb4:	28 81       	ld	r18, Y
    3cb6:	c5 58       	subi	r28, 0x85	; 133
    3cb8:	d0 40       	sbci	r29, 0x00	; 0
    3cba:	82 2b       	or	r24, r18
    3cbc:	84 87       	std	Z+12, r24	; 0x0c
    3cbe:	95 87       	std	Z+13, r25	; 0x0d
    3cc0:	a6 87       	std	Z+14, r26	; 0x0e
    3cc2:	b7 87       	std	Z+15, r27	; 0x0f
    3cc4:	ca 57       	subi	r28, 0x7A	; 122
    3cc6:	df 4f       	sbci	r29, 0xFF	; 255
    3cc8:	88 81       	ld	r24, Y
    3cca:	c6 58       	subi	r28, 0x86	; 134
    3ccc:	d0 40       	sbci	r29, 0x00	; 0
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	a0 e0       	ldi	r26, 0x00	; 0
    3cd2:	b0 e0       	ldi	r27, 0x00	; 0
    3cd4:	78 2f       	mov	r23, r24
    3cd6:	66 27       	eor	r22, r22
    3cd8:	55 27       	eor	r21, r21
    3cda:	44 27       	eor	r20, r20
    3cdc:	c9 57       	subi	r28, 0x79	; 121
    3cde:	df 4f       	sbci	r29, 0xFF	; 255
    3ce0:	98 81       	ld	r25, Y
    3ce2:	c7 58       	subi	r28, 0x87	; 135
    3ce4:	d0 40       	sbci	r29, 0x00	; 0
    3ce6:	89 2f       	mov	r24, r25
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	a0 e0       	ldi	r26, 0x00	; 0
    3cec:	b0 e0       	ldi	r27, 0x00	; 0
    3cee:	dc 01       	movw	r26, r24
    3cf0:	99 27       	eor	r25, r25
    3cf2:	88 27       	eor	r24, r24
    3cf4:	84 2b       	or	r24, r20
    3cf6:	95 2b       	or	r25, r21
    3cf8:	a6 2b       	or	r26, r22
    3cfa:	b7 2b       	or	r27, r23
    3cfc:	c8 57       	subi	r28, 0x78	; 120
    3cfe:	df 4f       	sbci	r29, 0xFF	; 255
    3d00:	48 81       	ld	r20, Y
    3d02:	c8 58       	subi	r28, 0x88	; 136
    3d04:	d0 40       	sbci	r29, 0x00	; 0
    3d06:	50 e0       	ldi	r21, 0x00	; 0
    3d08:	60 e0       	ldi	r22, 0x00	; 0
    3d0a:	70 e0       	ldi	r23, 0x00	; 0
    3d0c:	76 2f       	mov	r23, r22
    3d0e:	65 2f       	mov	r22, r21
    3d10:	54 2f       	mov	r21, r20
    3d12:	44 27       	eor	r20, r20
    3d14:	84 2b       	or	r24, r20
    3d16:	95 2b       	or	r25, r21
    3d18:	a6 2b       	or	r26, r22
    3d1a:	b7 2b       	or	r27, r23
    3d1c:	c7 57       	subi	r28, 0x77	; 119
    3d1e:	df 4f       	sbci	r29, 0xFF	; 255
    3d20:	28 81       	ld	r18, Y
    3d22:	c9 58       	subi	r28, 0x89	; 137
    3d24:	d0 40       	sbci	r29, 0x00	; 0
    3d26:	82 2b       	or	r24, r18
    3d28:	80 8b       	std	Z+16, r24	; 0x10
    3d2a:	91 8b       	std	Z+17, r25	; 0x11
    3d2c:	a2 8b       	std	Z+18, r26	; 0x12
    3d2e:	b3 8b       	std	Z+19, r27	; 0x13
    3d30:	c6 57       	subi	r28, 0x76	; 118
    3d32:	df 4f       	sbci	r29, 0xFF	; 255
    3d34:	88 81       	ld	r24, Y
    3d36:	ca 58       	subi	r28, 0x8A	; 138
    3d38:	d0 40       	sbci	r29, 0x00	; 0
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	a0 e0       	ldi	r26, 0x00	; 0
    3d3e:	b0 e0       	ldi	r27, 0x00	; 0
    3d40:	78 2f       	mov	r23, r24
    3d42:	66 27       	eor	r22, r22
    3d44:	55 27       	eor	r21, r21
    3d46:	44 27       	eor	r20, r20
    3d48:	c5 57       	subi	r28, 0x75	; 117
    3d4a:	df 4f       	sbci	r29, 0xFF	; 255
    3d4c:	98 81       	ld	r25, Y
    3d4e:	cb 58       	subi	r28, 0x8B	; 139
    3d50:	d0 40       	sbci	r29, 0x00	; 0
    3d52:	89 2f       	mov	r24, r25
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	a0 e0       	ldi	r26, 0x00	; 0
    3d58:	b0 e0       	ldi	r27, 0x00	; 0
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	99 27       	eor	r25, r25
    3d5e:	88 27       	eor	r24, r24
    3d60:	84 2b       	or	r24, r20
    3d62:	95 2b       	or	r25, r21
    3d64:	a6 2b       	or	r26, r22
    3d66:	b7 2b       	or	r27, r23
    3d68:	c4 57       	subi	r28, 0x74	; 116
    3d6a:	df 4f       	sbci	r29, 0xFF	; 255
    3d6c:	48 81       	ld	r20, Y
    3d6e:	cc 58       	subi	r28, 0x8C	; 140
    3d70:	d0 40       	sbci	r29, 0x00	; 0
    3d72:	50 e0       	ldi	r21, 0x00	; 0
    3d74:	60 e0       	ldi	r22, 0x00	; 0
    3d76:	70 e0       	ldi	r23, 0x00	; 0
    3d78:	76 2f       	mov	r23, r22
    3d7a:	65 2f       	mov	r22, r21
    3d7c:	54 2f       	mov	r21, r20
    3d7e:	44 27       	eor	r20, r20
    3d80:	84 2b       	or	r24, r20
    3d82:	95 2b       	or	r25, r21
    3d84:	a6 2b       	or	r26, r22
    3d86:	b7 2b       	or	r27, r23
    3d88:	c3 57       	subi	r28, 0x73	; 115
    3d8a:	df 4f       	sbci	r29, 0xFF	; 255
    3d8c:	28 81       	ld	r18, Y
    3d8e:	cd 58       	subi	r28, 0x8D	; 141
    3d90:	d0 40       	sbci	r29, 0x00	; 0
    3d92:	82 2b       	or	r24, r18
    3d94:	84 8b       	std	Z+20, r24	; 0x14
    3d96:	95 8b       	std	Z+21, r25	; 0x15
    3d98:	a6 8b       	std	Z+22, r26	; 0x16
    3d9a:	b7 8b       	std	Z+23, r27	; 0x17
    3d9c:	c2 57       	subi	r28, 0x72	; 114
    3d9e:	df 4f       	sbci	r29, 0xFF	; 255
    3da0:	88 81       	ld	r24, Y
    3da2:	ce 58       	subi	r28, 0x8E	; 142
    3da4:	d0 40       	sbci	r29, 0x00	; 0
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	a0 e0       	ldi	r26, 0x00	; 0
    3daa:	b0 e0       	ldi	r27, 0x00	; 0
    3dac:	78 2f       	mov	r23, r24
    3dae:	66 27       	eor	r22, r22
    3db0:	55 27       	eor	r21, r21
    3db2:	44 27       	eor	r20, r20
    3db4:	c1 57       	subi	r28, 0x71	; 113
    3db6:	df 4f       	sbci	r29, 0xFF	; 255
    3db8:	98 81       	ld	r25, Y
    3dba:	cf 58       	subi	r28, 0x8F	; 143
    3dbc:	d0 40       	sbci	r29, 0x00	; 0
    3dbe:	89 2f       	mov	r24, r25
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	a0 e0       	ldi	r26, 0x00	; 0
    3dc4:	b0 e0       	ldi	r27, 0x00	; 0
    3dc6:	dc 01       	movw	r26, r24
    3dc8:	99 27       	eor	r25, r25
    3dca:	88 27       	eor	r24, r24
    3dcc:	84 2b       	or	r24, r20
    3dce:	95 2b       	or	r25, r21
    3dd0:	a6 2b       	or	r26, r22
    3dd2:	b7 2b       	or	r27, r23
    3dd4:	c0 57       	subi	r28, 0x70	; 112
    3dd6:	df 4f       	sbci	r29, 0xFF	; 255
    3dd8:	48 81       	ld	r20, Y
    3dda:	c0 59       	subi	r28, 0x90	; 144
    3ddc:	d0 40       	sbci	r29, 0x00	; 0
    3dde:	50 e0       	ldi	r21, 0x00	; 0
    3de0:	60 e0       	ldi	r22, 0x00	; 0
    3de2:	70 e0       	ldi	r23, 0x00	; 0
    3de4:	76 2f       	mov	r23, r22
    3de6:	65 2f       	mov	r22, r21
    3de8:	54 2f       	mov	r21, r20
    3dea:	44 27       	eor	r20, r20
    3dec:	84 2b       	or	r24, r20
    3dee:	95 2b       	or	r25, r21
    3df0:	a6 2b       	or	r26, r22
    3df2:	b7 2b       	or	r27, r23
    3df4:	cf 56       	subi	r28, 0x6F	; 111
    3df6:	df 4f       	sbci	r29, 0xFF	; 255
    3df8:	28 81       	ld	r18, Y
    3dfa:	c1 59       	subi	r28, 0x91	; 145
    3dfc:	d0 40       	sbci	r29, 0x00	; 0
    3dfe:	82 2b       	or	r24, r18
    3e00:	80 8f       	std	Z+24, r24	; 0x18
    3e02:	91 8f       	std	Z+25, r25	; 0x19
    3e04:	a2 8f       	std	Z+26, r26	; 0x1a
    3e06:	b3 8f       	std	Z+27, r27	; 0x1b
    3e08:	20 e1       	ldi	r18, 0x10	; 16
    3e0a:	ae 01       	movw	r20, r28
    3e0c:	4a 58       	subi	r20, 0x8A	; 138
    3e0e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e10:	67 e3       	ldi	r22, 0x37	; 55
    3e12:	8f 2d       	mov	r24, r15
    3e14:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <get_MOTOR>
    3e18:	e8 2e       	mov	r14, r24
    3e1a:	f3 e6       	ldi	r31, 0x63	; 99
    3e1c:	8f 13       	cpse	r24, r31
    3e1e:	1b c0       	rjmp	.+54     	; 0x3e56 <get_MOTOR_PID+0x3d6>
    3e20:	81 ec       	ldi	r24, 0xC1	; 193
    3e22:	8f 0d       	add	r24, r15
    3e24:	1f 92       	push	r1
    3e26:	8f 93       	push	r24
    3e28:	ce 01       	movw	r24, r28
    3e2a:	01 96       	adiw	r24, 0x01	; 1
    3e2c:	9f 93       	push	r25
    3e2e:	8f 93       	push	r24
    3e30:	8e 01       	movw	r16, r28
    3e32:	0a 5d       	subi	r16, 0xDA	; 218
    3e34:	1f 4f       	sbci	r17, 0xFF	; 255
    3e36:	1f 93       	push	r17
    3e38:	0f 93       	push	r16
    3e3a:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
    3e3e:	b8 01       	movw	r22, r16
    3e40:	86 e3       	ldi	r24, 0x36	; 54
    3e42:	91 e0       	ldi	r25, 0x01	; 1
    3e44:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    3e48:	0f 90       	pop	r0
    3e4a:	0f 90       	pop	r0
    3e4c:	0f 90       	pop	r0
    3e4e:	0f 90       	pop	r0
    3e50:	0f 90       	pop	r0
    3e52:	0f 90       	pop	r0
    3e54:	38 c0       	rjmp	.+112    	; 0x3ec6 <get_MOTOR_PID+0x446>
    3e56:	ce 57       	subi	r28, 0x7E	; 126
    3e58:	df 4f       	sbci	r29, 0xFF	; 255
    3e5a:	88 81       	ld	r24, Y
    3e5c:	c2 58       	subi	r28, 0x82	; 130
    3e5e:	d0 40       	sbci	r29, 0x00	; 0
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	a0 e0       	ldi	r26, 0x00	; 0
    3e64:	b0 e0       	ldi	r27, 0x00	; 0
    3e66:	78 2f       	mov	r23, r24
    3e68:	66 27       	eor	r22, r22
    3e6a:	55 27       	eor	r21, r21
    3e6c:	44 27       	eor	r20, r20
    3e6e:	cd 57       	subi	r28, 0x7D	; 125
    3e70:	df 4f       	sbci	r29, 0xFF	; 255
    3e72:	98 81       	ld	r25, Y
    3e74:	c3 58       	subi	r28, 0x83	; 131
    3e76:	d0 40       	sbci	r29, 0x00	; 0
    3e78:	89 2f       	mov	r24, r25
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	a0 e0       	ldi	r26, 0x00	; 0
    3e7e:	b0 e0       	ldi	r27, 0x00	; 0
    3e80:	dc 01       	movw	r26, r24
    3e82:	99 27       	eor	r25, r25
    3e84:	88 27       	eor	r24, r24
    3e86:	84 2b       	or	r24, r20
    3e88:	95 2b       	or	r25, r21
    3e8a:	a6 2b       	or	r26, r22
    3e8c:	b7 2b       	or	r27, r23
    3e8e:	cc 57       	subi	r28, 0x7C	; 124
    3e90:	df 4f       	sbci	r29, 0xFF	; 255
    3e92:	48 81       	ld	r20, Y
    3e94:	c4 58       	subi	r28, 0x84	; 132
    3e96:	d0 40       	sbci	r29, 0x00	; 0
    3e98:	50 e0       	ldi	r21, 0x00	; 0
    3e9a:	60 e0       	ldi	r22, 0x00	; 0
    3e9c:	70 e0       	ldi	r23, 0x00	; 0
    3e9e:	76 2f       	mov	r23, r22
    3ea0:	65 2f       	mov	r22, r21
    3ea2:	54 2f       	mov	r21, r20
    3ea4:	44 27       	eor	r20, r20
    3ea6:	84 2b       	or	r24, r20
    3ea8:	95 2b       	or	r25, r21
    3eaa:	a6 2b       	or	r26, r22
    3eac:	b7 2b       	or	r27, r23
    3eae:	cb 57       	subi	r28, 0x7B	; 123
    3eb0:	df 4f       	sbci	r29, 0xFF	; 255
    3eb2:	28 81       	ld	r18, Y
    3eb4:	c5 58       	subi	r28, 0x85	; 133
    3eb6:	d0 40       	sbci	r29, 0x00	; 0
    3eb8:	82 2b       	or	r24, r18
    3eba:	f8 01       	movw	r30, r16
    3ebc:	84 8f       	std	Z+28, r24	; 0x1c
    3ebe:	95 8f       	std	Z+29, r25	; 0x1d
    3ec0:	a6 8f       	std	Z+30, r26	; 0x1e
    3ec2:	b7 8f       	std	Z+31, r27	; 0x1f
    3ec4:	e1 2c       	mov	r14, r1
    3ec6:	8e 2d       	mov	r24, r14
    3ec8:	cf 56       	subi	r28, 0x6F	; 111
    3eca:	df 4f       	sbci	r29, 0xFF	; 255
    3ecc:	cd bf       	out	0x3d, r28	; 61
    3ece:	de bf       	out	0x3e, r29	; 62
    3ed0:	df 91       	pop	r29
    3ed2:	cf 91       	pop	r28
    3ed4:	1f 91       	pop	r17
    3ed6:	0f 91       	pop	r16
    3ed8:	ff 90       	pop	r15
    3eda:	ef 90       	pop	r14
    3edc:	08 95       	ret

00003ede <get_MOTOR_S4MODE>:
    3ede:	cf 92       	push	r12
    3ee0:	df 92       	push	r13
    3ee2:	ef 92       	push	r14
    3ee4:	ff 92       	push	r15
    3ee6:	0f 93       	push	r16
    3ee8:	1f 93       	push	r17
    3eea:	cf 93       	push	r28
    3eec:	df 93       	push	r29
    3eee:	cd b7       	in	r28, 0x3d	; 61
    3ef0:	de b7       	in	r29, 0x3e	; 62
    3ef2:	c7 57       	subi	r28, 0x77	; 119
    3ef4:	d1 09       	sbc	r29, r1
    3ef6:	cd bf       	out	0x3d, r28	; 61
    3ef8:	de bf       	out	0x3e, r29	; 62
    3efa:	08 2f       	mov	r16, r24
    3efc:	7b 01       	movw	r14, r22
    3efe:	84 e2       	ldi	r24, 0x24	; 36
    3f00:	ea e8       	ldi	r30, 0x8A	; 138
    3f02:	f9 eb       	ldi	r31, 0xB9	; 185
    3f04:	de 01       	movw	r26, r28
    3f06:	11 96       	adiw	r26, 0x01	; 1
    3f08:	01 90       	ld	r0, Z+
    3f0a:	0d 92       	st	X+, r0
    3f0c:	8a 95       	dec	r24
    3f0e:	e1 f7       	brne	.-8      	; 0x3f08 <get_MOTOR_S4MODE+0x2a>
    3f10:	23 e0       	ldi	r18, 0x03	; 3
    3f12:	ae 01       	movw	r20, r28
    3f14:	4b 58       	subi	r20, 0x8B	; 139
    3f16:	5f 4f       	sbci	r21, 0xFF	; 255
    3f18:	6b e4       	ldi	r22, 0x4B	; 75
    3f1a:	80 2f       	mov	r24, r16
    3f1c:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <get_MOTOR>
    3f20:	18 2f       	mov	r17, r24
    3f22:	83 36       	cpi	r24, 0x63	; 99
    3f24:	f1 f4       	brne	.+60     	; 0x3f62 <get_MOTOR_S4MODE+0x84>
    3f26:	0f 53       	subi	r16, 0x3F	; 63
    3f28:	1f 92       	push	r1
    3f2a:	0f 93       	push	r16
    3f2c:	ce 01       	movw	r24, r28
    3f2e:	01 96       	adiw	r24, 0x01	; 1
    3f30:	9f 93       	push	r25
    3f32:	8f 93       	push	r24
    3f34:	6e 01       	movw	r12, r28
    3f36:	85 e2       	ldi	r24, 0x25	; 37
    3f38:	c8 0e       	add	r12, r24
    3f3a:	d1 1c       	adc	r13, r1
    3f3c:	df 92       	push	r13
    3f3e:	cf 92       	push	r12
    3f40:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
    3f44:	b6 01       	movw	r22, r12
    3f46:	86 e3       	ldi	r24, 0x36	; 54
    3f48:	91 e0       	ldi	r25, 0x01	; 1
    3f4a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    3f4e:	8f ef       	ldi	r24, 0xFF	; 255
    3f50:	f7 01       	movw	r30, r14
    3f52:	80 83       	st	Z, r24
    3f54:	0f 90       	pop	r0
    3f56:	0f 90       	pop	r0
    3f58:	0f 90       	pop	r0
    3f5a:	0f 90       	pop	r0
    3f5c:	0f 90       	pop	r0
    3f5e:	0f 90       	pop	r0
    3f60:	06 c0       	rjmp	.+12     	; 0x3f6e <get_MOTOR_S4MODE+0x90>
    3f62:	e7 96       	adiw	r28, 0x37	; 55
    3f64:	8f ad       	ldd	r24, Y+63	; 0x3f
    3f66:	e7 97       	sbiw	r28, 0x37	; 55
    3f68:	f7 01       	movw	r30, r14
    3f6a:	80 83       	st	Z, r24
    3f6c:	10 e0       	ldi	r17, 0x00	; 0
    3f6e:	81 2f       	mov	r24, r17
    3f70:	c9 58       	subi	r28, 0x89	; 137
    3f72:	df 4f       	sbci	r29, 0xFF	; 255
    3f74:	cd bf       	out	0x3d, r28	; 61
    3f76:	de bf       	out	0x3e, r29	; 62
    3f78:	df 91       	pop	r29
    3f7a:	cf 91       	pop	r28
    3f7c:	1f 91       	pop	r17
    3f7e:	0f 91       	pop	r16
    3f80:	ff 90       	pop	r15
    3f82:	ef 90       	pop	r14
    3f84:	df 90       	pop	r13
    3f86:	cf 90       	pop	r12
    3f88:	08 95       	ret

00003f8a <get_MOTOR_SPEED>:
    3f8a:	ef 92       	push	r14
    3f8c:	ff 92       	push	r15
    3f8e:	0f 93       	push	r16
    3f90:	1f 93       	push	r17
    3f92:	cf 93       	push	r28
    3f94:	df 93       	push	r29
    3f96:	cd b7       	in	r28, 0x3d	; 61
    3f98:	de b7       	in	r29, 0x3e	; 62
    3f9a:	c1 58       	subi	r28, 0x81	; 129
    3f9c:	d1 09       	sbc	r29, r1
    3f9e:	cd bf       	out	0x3d, r28	; 61
    3fa0:	de bf       	out	0x3e, r29	; 62
    3fa2:	e8 2e       	mov	r14, r24
    3fa4:	8b 01       	movw	r16, r22
    3fa6:	8c e2       	ldi	r24, 0x2C	; 44
    3fa8:	ee ea       	ldi	r30, 0xAE	; 174
    3faa:	f9 eb       	ldi	r31, 0xB9	; 185
    3fac:	de 01       	movw	r26, r28
    3fae:	aa 5a       	subi	r26, 0xAA	; 170
    3fb0:	bf 4f       	sbci	r27, 0xFF	; 255
    3fb2:	01 90       	ld	r0, Z+
    3fb4:	0d 92       	st	X+, r0
    3fb6:	8a 95       	dec	r24
    3fb8:	e1 f7       	brne	.-8      	; 0x3fb2 <get_MOTOR_SPEED+0x28>
    3fba:	25 e0       	ldi	r18, 0x05	; 5
    3fbc:	ae 01       	movw	r20, r28
    3fbe:	4f 5a       	subi	r20, 0xAF	; 175
    3fc0:	5f 4f       	sbci	r21, 0xFF	; 255
    3fc2:	62 e1       	ldi	r22, 0x12	; 18
    3fc4:	8e 2d       	mov	r24, r14
    3fc6:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <get_MOTOR>
    3fca:	f8 2e       	mov	r15, r24
    3fcc:	83 e6       	ldi	r24, 0x63	; 99
    3fce:	f8 12       	cpse	r15, r24
    3fd0:	1c c0       	rjmp	.+56     	; 0x400a <__RODATA_PM_OFFSET__+0xa>
    3fd2:	81 ec       	ldi	r24, 0xC1	; 193
    3fd4:	8e 0d       	add	r24, r14
    3fd6:	1f 92       	push	r1
    3fd8:	8f 93       	push	r24
    3fda:	ce 01       	movw	r24, r28
    3fdc:	8a 5a       	subi	r24, 0xAA	; 170
    3fde:	9f 4f       	sbci	r25, 0xFF	; 255
    3fe0:	9f 93       	push	r25
    3fe2:	8f 93       	push	r24
    3fe4:	8e 01       	movw	r16, r28
    3fe6:	0f 5f       	subi	r16, 0xFF	; 255
    3fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    3fea:	1f 93       	push	r17
    3fec:	0f 93       	push	r16
    3fee:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
    3ff2:	b8 01       	movw	r22, r16
    3ff4:	86 e3       	ldi	r24, 0x36	; 54
    3ff6:	91 e0       	ldi	r25, 0x01	; 1
    3ff8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    3ffc:	0f 90       	pop	r0
    3ffe:	0f 90       	pop	r0
    4000:	0f 90       	pop	r0
    4002:	0f 90       	pop	r0
    4004:	0f 90       	pop	r0
    4006:	0f 90       	pop	r0
    4008:	30 c0       	rjmp	.+96     	; 0x406a <__RODATA_PM_OFFSET__+0x6a>
    400a:	62 96       	adiw	r28, 0x12	; 18
    400c:	8f ad       	ldd	r24, Y+63	; 0x3f
    400e:	62 97       	sbiw	r28, 0x12	; 18
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	a0 e0       	ldi	r26, 0x00	; 0
    4014:	b0 e0       	ldi	r27, 0x00	; 0
    4016:	78 2f       	mov	r23, r24
    4018:	66 27       	eor	r22, r22
    401a:	55 27       	eor	r21, r21
    401c:	44 27       	eor	r20, r20
    401e:	63 96       	adiw	r28, 0x13	; 19
    4020:	9f ad       	ldd	r25, Y+63	; 0x3f
    4022:	63 97       	sbiw	r28, 0x13	; 19
    4024:	89 2f       	mov	r24, r25
    4026:	90 e0       	ldi	r25, 0x00	; 0
    4028:	a0 e0       	ldi	r26, 0x00	; 0
    402a:	b0 e0       	ldi	r27, 0x00	; 0
    402c:	dc 01       	movw	r26, r24
    402e:	99 27       	eor	r25, r25
    4030:	88 27       	eor	r24, r24
    4032:	84 2b       	or	r24, r20
    4034:	95 2b       	or	r25, r21
    4036:	a6 2b       	or	r26, r22
    4038:	b7 2b       	or	r27, r23
    403a:	64 96       	adiw	r28, 0x14	; 20
    403c:	4f ad       	ldd	r20, Y+63	; 0x3f
    403e:	64 97       	sbiw	r28, 0x14	; 20
    4040:	50 e0       	ldi	r21, 0x00	; 0
    4042:	60 e0       	ldi	r22, 0x00	; 0
    4044:	70 e0       	ldi	r23, 0x00	; 0
    4046:	76 2f       	mov	r23, r22
    4048:	65 2f       	mov	r22, r21
    404a:	54 2f       	mov	r21, r20
    404c:	44 27       	eor	r20, r20
    404e:	84 2b       	or	r24, r20
    4050:	95 2b       	or	r25, r21
    4052:	a6 2b       	or	r26, r22
    4054:	b7 2b       	or	r27, r23
    4056:	65 96       	adiw	r28, 0x15	; 21
    4058:	2f ad       	ldd	r18, Y+63	; 0x3f
    405a:	65 97       	sbiw	r28, 0x15	; 21
    405c:	82 2b       	or	r24, r18
    405e:	f8 01       	movw	r30, r16
    4060:	80 83       	st	Z, r24
    4062:	91 83       	std	Z+1, r25	; 0x01
    4064:	a2 83       	std	Z+2, r26	; 0x02
    4066:	b3 83       	std	Z+3, r27	; 0x03
    4068:	f1 2c       	mov	r15, r1
    406a:	8f 2d       	mov	r24, r15
    406c:	cf 57       	subi	r28, 0x7F	; 127
    406e:	df 4f       	sbci	r29, 0xFF	; 255
    4070:	cd bf       	out	0x3d, r28	; 61
    4072:	de bf       	out	0x3e, r29	; 62
    4074:	df 91       	pop	r29
    4076:	cf 91       	pop	r28
    4078:	1f 91       	pop	r17
    407a:	0f 91       	pop	r16
    407c:	ff 90       	pop	r15
    407e:	ef 90       	pop	r14
    4080:	08 95       	ret

00004082 <get_MOTOR_STATUS>:
    4082:	ef 92       	push	r14
    4084:	ff 92       	push	r15
    4086:	0f 93       	push	r16
    4088:	1f 93       	push	r17
    408a:	cf 93       	push	r28
    408c:	df 93       	push	r29
    408e:	cd b7       	in	r28, 0x3d	; 61
    4090:	de b7       	in	r29, 0x3e	; 62
    4092:	c9 57       	subi	r28, 0x79	; 121
    4094:	d1 09       	sbc	r29, r1
    4096:	cd bf       	out	0x3d, r28	; 61
    4098:	de bf       	out	0x3e, r29	; 62
    409a:	e8 2e       	mov	r14, r24
    409c:	8b 01       	movw	r16, r22
    409e:	85 e2       	ldi	r24, 0x25	; 37
    40a0:	ea ed       	ldi	r30, 0xDA	; 218
    40a2:	f9 eb       	ldi	r31, 0xB9	; 185
    40a4:	de 01       	movw	r26, r28
    40a6:	af 5a       	subi	r26, 0xAF	; 175
    40a8:	bf 4f       	sbci	r27, 0xFF	; 255
    40aa:	01 90       	ld	r0, Z+
    40ac:	0d 92       	st	X+, r0
    40ae:	8a 95       	dec	r24
    40b0:	e1 f7       	brne	.-8      	; 0x40aa <get_MOTOR_STATUS+0x28>
    40b2:	24 e0       	ldi	r18, 0x04	; 4
    40b4:	ae 01       	movw	r20, r28
    40b6:	4a 58       	subi	r20, 0x8A	; 138
    40b8:	5f 4f       	sbci	r21, 0xFF	; 255
    40ba:	6a e5       	ldi	r22, 0x5A	; 90
    40bc:	8e 2d       	mov	r24, r14
    40be:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <get_MOTOR>
    40c2:	f8 2e       	mov	r15, r24
    40c4:	83 e6       	ldi	r24, 0x63	; 99
    40c6:	f8 12       	cpse	r15, r24
    40c8:	1d c0       	rjmp	.+58     	; 0x4104 <get_MOTOR_STATUS+0x82>
    40ca:	8e 2d       	mov	r24, r14
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	cf 97       	sbiw	r24, 0x3f	; 63
    40d0:	9f 93       	push	r25
    40d2:	8f 93       	push	r24
    40d4:	ce 01       	movw	r24, r28
    40d6:	8f 5a       	subi	r24, 0xAF	; 175
    40d8:	9f 4f       	sbci	r25, 0xFF	; 255
    40da:	9f 93       	push	r25
    40dc:	8f 93       	push	r24
    40de:	8e 01       	movw	r16, r28
    40e0:	0f 5f       	subi	r16, 0xFF	; 255
    40e2:	1f 4f       	sbci	r17, 0xFF	; 255
    40e4:	1f 93       	push	r17
    40e6:	0f 93       	push	r16
    40e8:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
    40ec:	b8 01       	movw	r22, r16
    40ee:	86 e3       	ldi	r24, 0x36	; 54
    40f0:	91 e0       	ldi	r25, 0x01	; 1
    40f2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    40f6:	0f 90       	pop	r0
    40f8:	0f 90       	pop	r0
    40fa:	0f 90       	pop	r0
    40fc:	0f 90       	pop	r0
    40fe:	0f 90       	pop	r0
    4100:	0f 90       	pop	r0
    4102:	30 c0       	rjmp	.+96     	; 0x4164 <get_MOTOR_STATUS+0xe2>
    4104:	e7 96       	adiw	r28, 0x37	; 55
    4106:	8f ad       	ldd	r24, Y+63	; 0x3f
    4108:	e7 97       	sbiw	r28, 0x37	; 55
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	a0 e0       	ldi	r26, 0x00	; 0
    410e:	b0 e0       	ldi	r27, 0x00	; 0
    4110:	78 2f       	mov	r23, r24
    4112:	66 27       	eor	r22, r22
    4114:	55 27       	eor	r21, r21
    4116:	44 27       	eor	r20, r20
    4118:	e8 96       	adiw	r28, 0x38	; 56
    411a:	9f ad       	ldd	r25, Y+63	; 0x3f
    411c:	e8 97       	sbiw	r28, 0x38	; 56
    411e:	89 2f       	mov	r24, r25
    4120:	90 e0       	ldi	r25, 0x00	; 0
    4122:	a0 e0       	ldi	r26, 0x00	; 0
    4124:	b0 e0       	ldi	r27, 0x00	; 0
    4126:	dc 01       	movw	r26, r24
    4128:	99 27       	eor	r25, r25
    412a:	88 27       	eor	r24, r24
    412c:	84 2b       	or	r24, r20
    412e:	95 2b       	or	r25, r21
    4130:	a6 2b       	or	r26, r22
    4132:	b7 2b       	or	r27, r23
    4134:	e9 96       	adiw	r28, 0x39	; 57
    4136:	4f ad       	ldd	r20, Y+63	; 0x3f
    4138:	e9 97       	sbiw	r28, 0x39	; 57
    413a:	50 e0       	ldi	r21, 0x00	; 0
    413c:	60 e0       	ldi	r22, 0x00	; 0
    413e:	70 e0       	ldi	r23, 0x00	; 0
    4140:	76 2f       	mov	r23, r22
    4142:	65 2f       	mov	r22, r21
    4144:	54 2f       	mov	r21, r20
    4146:	44 27       	eor	r20, r20
    4148:	84 2b       	or	r24, r20
    414a:	95 2b       	or	r25, r21
    414c:	a6 2b       	or	r26, r22
    414e:	b7 2b       	or	r27, r23
    4150:	ea 96       	adiw	r28, 0x3a	; 58
    4152:	2f ad       	ldd	r18, Y+63	; 0x3f
    4154:	ea 97       	sbiw	r28, 0x3a	; 58
    4156:	82 2b       	or	r24, r18
    4158:	f8 01       	movw	r30, r16
    415a:	80 83       	st	Z, r24
    415c:	91 83       	std	Z+1, r25	; 0x01
    415e:	a2 83       	std	Z+2, r26	; 0x02
    4160:	b3 83       	std	Z+3, r27	; 0x03
    4162:	f1 2c       	mov	r15, r1
    4164:	8f 2d       	mov	r24, r15
    4166:	c7 58       	subi	r28, 0x87	; 135
    4168:	df 4f       	sbci	r29, 0xFF	; 255
    416a:	cd bf       	out	0x3d, r28	; 61
    416c:	de bf       	out	0x3e, r29	; 62
    416e:	df 91       	pop	r29
    4170:	cf 91       	pop	r28
    4172:	1f 91       	pop	r17
    4174:	0f 91       	pop	r16
    4176:	ff 90       	pop	r15
    4178:	ef 90       	pop	r14
    417a:	08 95       	ret

0000417c <get_MOTOR_LIMIT>:
    417c:	0f 93       	push	r16
    417e:	1f 93       	push	r17
    4180:	cf 93       	push	r28
    4182:	df 93       	push	r29
    4184:	cd b7       	in	r28, 0x3d	; 61
    4186:	de b7       	in	r29, 0x3e	; 62
    4188:	c2 58       	subi	r28, 0x82	; 130
    418a:	d1 09       	sbc	r29, r1
    418c:	cd bf       	out	0x3d, r28	; 61
    418e:	de bf       	out	0x3e, r29	; 62
    4190:	18 2f       	mov	r17, r24
    4192:	8e e2       	ldi	r24, 0x2E	; 46
    4194:	ef ef       	ldi	r30, 0xFF	; 255
    4196:	f9 eb       	ldi	r31, 0xB9	; 185
    4198:	de 01       	movw	r26, r28
    419a:	af 5a       	subi	r26, 0xAF	; 175
    419c:	bf 4f       	sbci	r27, 0xFF	; 255
    419e:	01 90       	ld	r0, Z+
    41a0:	0d 92       	st	X+, r0
    41a2:	8a 95       	dec	r24
    41a4:	e1 f7       	brne	.-8      	; 0x419e <get_MOTOR_LIMIT+0x22>
    41a6:	be 01       	movw	r22, r28
    41a8:	61 58       	subi	r22, 0x81	; 129
    41aa:	7f 4f       	sbci	r23, 0xFF	; 255
    41ac:	81 2f       	mov	r24, r17
    41ae:	0e 94 41 20 	call	0x4082	; 0x4082 <get_MOTOR_STATUS>
    41b2:	83 36       	cpi	r24, 0x63	; 99
    41b4:	d1 f4       	brne	.+52     	; 0x41ea <get_MOTOR_LIMIT+0x6e>
    41b6:	1f 51       	subi	r17, 0x1F	; 31
    41b8:	1f 92       	push	r1
    41ba:	1f 93       	push	r17
    41bc:	ce 01       	movw	r24, r28
    41be:	8f 5a       	subi	r24, 0xAF	; 175
    41c0:	9f 4f       	sbci	r25, 0xFF	; 255
    41c2:	9f 93       	push	r25
    41c4:	8f 93       	push	r24
    41c6:	8e 01       	movw	r16, r28
    41c8:	0f 5f       	subi	r16, 0xFF	; 255
    41ca:	1f 4f       	sbci	r17, 0xFF	; 255
    41cc:	1f 93       	push	r17
    41ce:	0f 93       	push	r16
    41d0:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
    41d4:	b8 01       	movw	r22, r16
    41d6:	86 e3       	ldi	r24, 0x36	; 54
    41d8:	91 e0       	ldi	r25, 0x01	; 1
    41da:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    41de:	0f 90       	pop	r0
    41e0:	0f 90       	pop	r0
    41e2:	0f 90       	pop	r0
    41e4:	0f 90       	pop	r0
    41e6:	0f 90       	pop	r0
    41e8:	0f 90       	pop	r0
    41ea:	c1 58       	subi	r28, 0x81	; 129
    41ec:	df 4f       	sbci	r29, 0xFF	; 255
    41ee:	88 81       	ld	r24, Y
    41f0:	99 81       	ldd	r25, Y+1	; 0x01
    41f2:	aa 81       	ldd	r26, Y+2	; 0x02
    41f4:	bb 81       	ldd	r27, Y+3	; 0x03
    41f6:	cf 57       	subi	r28, 0x7F	; 127
    41f8:	d0 40       	sbci	r29, 0x00	; 0
    41fa:	a6 ff       	sbrs	r26, 6
    41fc:	02 c0       	rjmp	.+4      	; 0x4202 <get_MOTOR_LIMIT+0x86>
    41fe:	81 e0       	ldi	r24, 0x01	; 1
    4200:	01 c0       	rjmp	.+2      	; 0x4204 <get_MOTOR_LIMIT+0x88>
    4202:	80 e0       	ldi	r24, 0x00	; 0
    4204:	ce 57       	subi	r28, 0x7E	; 126
    4206:	df 4f       	sbci	r29, 0xFF	; 255
    4208:	cd bf       	out	0x3d, r28	; 61
    420a:	de bf       	out	0x3e, r29	; 62
    420c:	df 91       	pop	r29
    420e:	cf 91       	pop	r28
    4210:	1f 91       	pop	r17
    4212:	0f 91       	pop	r16
    4214:	08 95       	ret

00004216 <get_MOTOR_LIMITS>:
    4216:	ef 92       	push	r14
    4218:	ff 92       	push	r15
    421a:	1f 93       	push	r17
    421c:	cf 93       	push	r28
    421e:	df 93       	push	r29
    4220:	00 d0       	rcall	.+0      	; 0x4222 <get_MOTOR_LIMITS+0xc>
    4222:	00 d0       	rcall	.+0      	; 0x4224 <get_MOTOR_LIMITS+0xe>
    4224:	cd b7       	in	r28, 0x3d	; 61
    4226:	de b7       	in	r29, 0x3e	; 62
    4228:	10 e0       	ldi	r17, 0x00	; 0
    422a:	1b c0       	rjmp	.+54     	; 0x4262 <get_MOTOR_LIMITS+0x4c>
    422c:	e1 2e       	mov	r14, r17
    422e:	f1 2c       	mov	r15, r1
    4230:	f7 01       	movw	r30, r14
    4232:	e0 5c       	subi	r30, 0xC0	; 192
    4234:	f5 4d       	sbci	r31, 0xD5	; 213
    4236:	10 82       	st	Z, r1
    4238:	be 01       	movw	r22, r28
    423a:	6f 5f       	subi	r22, 0xFF	; 255
    423c:	7f 4f       	sbci	r23, 0xFF	; 255
    423e:	80 e8       	ldi	r24, 0x80	; 128
    4240:	81 0f       	add	r24, r17
    4242:	0e 94 41 20 	call	0x4082	; 0x4082 <get_MOTOR_STATUS>
    4246:	83 36       	cpi	r24, 0x63	; 99
    4248:	59 f0       	breq	.+22     	; 0x4260 <get_MOTOR_LIMITS+0x4a>
    424a:	89 81       	ldd	r24, Y+1	; 0x01
    424c:	9a 81       	ldd	r25, Y+2	; 0x02
    424e:	ab 81       	ldd	r26, Y+3	; 0x03
    4250:	bc 81       	ldd	r27, Y+4	; 0x04
    4252:	a6 ff       	sbrs	r26, 6
    4254:	05 c0       	rjmp	.+10     	; 0x4260 <get_MOTOR_LIMITS+0x4a>
    4256:	f7 01       	movw	r30, r14
    4258:	e0 5c       	subi	r30, 0xC0	; 192
    425a:	f5 4d       	sbci	r31, 0xD5	; 213
    425c:	81 e0       	ldi	r24, 0x01	; 1
    425e:	80 83       	st	Z, r24
    4260:	1f 5f       	subi	r17, 0xFF	; 255
    4262:	13 30       	cpi	r17, 0x03	; 3
    4264:	18 f3       	brcs	.-58     	; 0x422c <get_MOTOR_LIMITS+0x16>
    4266:	80 e0       	ldi	r24, 0x00	; 0
    4268:	24 96       	adiw	r28, 0x04	; 4
    426a:	cd bf       	out	0x3d, r28	; 61
    426c:	de bf       	out	0x3e, r29	; 62
    426e:	df 91       	pop	r29
    4270:	cf 91       	pop	r28
    4272:	1f 91       	pop	r17
    4274:	ff 90       	pop	r15
    4276:	ef 90       	pop	r14
    4278:	08 95       	ret

0000427a <motorsMoving>:
    427a:	ef 92       	push	r14
    427c:	ff 92       	push	r15
    427e:	0f 93       	push	r16
    4280:	1f 93       	push	r17
    4282:	cf 93       	push	r28
    4284:	df 93       	push	r29
    4286:	cd b7       	in	r28, 0x3d	; 61
    4288:	de b7       	in	r29, 0x3e	; 62
    428a:	ce 57       	subi	r28, 0x7E	; 126
    428c:	d1 09       	sbc	r29, r1
    428e:	cd bf       	out	0x3d, r28	; 61
    4290:	de bf       	out	0x3e, r29	; 62
    4292:	8a e2       	ldi	r24, 0x2A	; 42
    4294:	e6 e5       	ldi	r30, 0x56	; 86
    4296:	fa eb       	ldi	r31, 0xBA	; 186
    4298:	de 01       	movw	r26, r28
    429a:	11 96       	adiw	r26, 0x01	; 1
    429c:	01 90       	ld	r0, Z+
    429e:	0d 92       	st	X+, r0
    42a0:	8a 95       	dec	r24
    42a2:	e1 f7       	brne	.-8      	; 0x429c <motorsMoving+0x22>
    42a4:	ef 96       	adiw	r28, 0x3f	; 63
    42a6:	1c ae       	std	Y+60, r1	; 0x3c
    42a8:	1d ae       	std	Y+61, r1	; 0x3d
    42aa:	1e ae       	std	Y+62, r1	; 0x3e
    42ac:	1f ae       	std	Y+63, r1	; 0x3f
    42ae:	ef 97       	sbiw	r28, 0x3f	; 63
    42b0:	00 e0       	ldi	r16, 0x00	; 0
    42b2:	10 e0       	ldi	r17, 0x00	; 0
    42b4:	31 c0       	rjmp	.+98     	; 0x4318 <motorsMoving+0x9e>
    42b6:	be 01       	movw	r22, r28
    42b8:	65 58       	subi	r22, 0x85	; 133
    42ba:	7f 4f       	sbci	r23, 0xFF	; 255
    42bc:	80 e8       	ldi	r24, 0x80	; 128
    42be:	81 0f       	add	r24, r17
    42c0:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <get_MOTOR_SPEED>
    42c4:	83 36       	cpi	r24, 0x63	; 99
    42c6:	e1 f4       	brne	.+56     	; 0x4300 <motorsMoving+0x86>
    42c8:	1f 92       	push	r1
    42ca:	81 e4       	ldi	r24, 0x41	; 65
    42cc:	81 0f       	add	r24, r17
    42ce:	8f 93       	push	r24
    42d0:	ce 01       	movw	r24, r28
    42d2:	01 96       	adiw	r24, 0x01	; 1
    42d4:	9f 93       	push	r25
    42d6:	8f 93       	push	r24
    42d8:	7e 01       	movw	r14, r28
    42da:	8b e2       	ldi	r24, 0x2B	; 43
    42dc:	e8 0e       	add	r14, r24
    42de:	f1 1c       	adc	r15, r1
    42e0:	ff 92       	push	r15
    42e2:	ef 92       	push	r14
    42e4:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
    42e8:	b7 01       	movw	r22, r14
    42ea:	86 e3       	ldi	r24, 0x36	; 54
    42ec:	91 e0       	ldi	r25, 0x01	; 1
    42ee:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    42f2:	0f 90       	pop	r0
    42f4:	0f 90       	pop	r0
    42f6:	0f 90       	pop	r0
    42f8:	0f 90       	pop	r0
    42fa:	0f 90       	pop	r0
    42fc:	0f 90       	pop	r0
    42fe:	0b c0       	rjmp	.+22     	; 0x4316 <motorsMoving+0x9c>
    4300:	ef 96       	adiw	r28, 0x3f	; 63
    4302:	8c ad       	ldd	r24, Y+60	; 0x3c
    4304:	9d ad       	ldd	r25, Y+61	; 0x3d
    4306:	ae ad       	ldd	r26, Y+62	; 0x3e
    4308:	bf ad       	ldd	r27, Y+63	; 0x3f
    430a:	ef 97       	sbiw	r28, 0x3f	; 63
    430c:	89 2b       	or	r24, r25
    430e:	8a 2b       	or	r24, r26
    4310:	8b 2b       	or	r24, r27
    4312:	09 f0       	breq	.+2      	; 0x4316 <motorsMoving+0x9c>
    4314:	0f 5f       	subi	r16, 0xFF	; 255
    4316:	1f 5f       	subi	r17, 0xFF	; 255
    4318:	13 30       	cpi	r17, 0x03	; 3
    431a:	68 f2       	brcs	.-102    	; 0x42b6 <motorsMoving+0x3c>
    431c:	00 23       	and	r16, r16
    431e:	11 f0       	breq	.+4      	; 0x4324 <motorsMoving+0xaa>
    4320:	81 e0       	ldi	r24, 0x01	; 1
    4322:	01 c0       	rjmp	.+2      	; 0x4326 <motorsMoving+0xac>
    4324:	80 e0       	ldi	r24, 0x00	; 0
    4326:	c2 58       	subi	r28, 0x82	; 130
    4328:	df 4f       	sbci	r29, 0xFF	; 255
    432a:	cd bf       	out	0x3d, r28	; 61
    432c:	de bf       	out	0x3e, r29	; 62
    432e:	df 91       	pop	r29
    4330:	cf 91       	pop	r28
    4332:	1f 91       	pop	r17
    4334:	0f 91       	pop	r16
    4336:	ff 90       	pop	r15
    4338:	ef 90       	pop	r14
    433a:	08 95       	ret

0000433c <put_FRAM_ENCODERS>:
    433c:	1f 93       	push	r17
    433e:	cf 93       	push	r28
    4340:	df 93       	push	r29
    4342:	cd b7       	in	r28, 0x3d	; 61
    4344:	de b7       	in	r29, 0x3e	; 62
    4346:	a2 97       	sbiw	r28, 0x22	; 34
    4348:	cd bf       	out	0x3d, r28	; 61
    434a:	de bf       	out	0x3e, r29	; 62
    434c:	86 e0       	ldi	r24, 0x06	; 6
    434e:	ea e3       	ldi	r30, 0x3A	; 58
    4350:	f2 eb       	ldi	r31, 0xB2	; 178
    4352:	de 01       	movw	r26, r28
    4354:	59 96       	adiw	r26, 0x19	; 25
    4356:	01 90       	ld	r0, Z+
    4358:	0d 92       	st	X+, r0
    435a:	8a 95       	dec	r24
    435c:	e1 f7       	brne	.-8      	; 0x4356 <put_FRAM_ENCODERS+0x1a>
    435e:	10 e0       	ldi	r17, 0x00	; 0
    4360:	27 c0       	rjmp	.+78     	; 0x43b0 <put_FRAM_ENCODERS+0x74>
    4362:	be 01       	movw	r22, r28
    4364:	61 5e       	subi	r22, 0xE1	; 225
    4366:	7f 4f       	sbci	r23, 0xFF	; 255
    4368:	80 e8       	ldi	r24, 0x80	; 128
    436a:	81 0f       	add	r24, r17
    436c:	0e 94 bd 1b 	call	0x377a	; 0x377a <get_MOTOR_ENCODER>
    4370:	83 36       	cpi	r24, 0x63	; 99
    4372:	71 f1       	breq	.+92     	; 0x43d0 <put_FRAM_ENCODERS+0x94>
    4374:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4376:	98 a1       	ldd	r25, Y+32	; 0x20
    4378:	29 a1       	ldd	r18, Y+33	; 0x21
    437a:	3a a1       	ldd	r19, Y+34	; 0x22
    437c:	3d 8b       	std	Y+21, r19	; 0x15
    437e:	2e 8b       	std	Y+22, r18	; 0x16
    4380:	9f 8b       	std	Y+23, r25	; 0x17
    4382:	88 8f       	std	Y+24, r24	; 0x18
    4384:	e1 2f       	mov	r30, r17
    4386:	f0 e0       	ldi	r31, 0x00	; 0
    4388:	ee 0f       	add	r30, r30
    438a:	ff 1f       	adc	r31, r31
    438c:	81 e0       	ldi	r24, 0x01	; 1
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	8c 0f       	add	r24, r28
    4392:	9d 1f       	adc	r25, r29
    4394:	e8 0f       	add	r30, r24
    4396:	f9 1f       	adc	r31, r25
    4398:	60 8d       	ldd	r22, Z+24	; 0x18
    439a:	71 8d       	ldd	r23, Z+25	; 0x19
    439c:	24 e0       	ldi	r18, 0x04	; 4
    439e:	ae 01       	movw	r20, r28
    43a0:	4b 5e       	subi	r20, 0xEB	; 235
    43a2:	5f 4f       	sbci	r21, 0xFF	; 255
    43a4:	80 e5       	ldi	r24, 0x50	; 80
    43a6:	0e 94 33 09 	call	0x1266	; 0x1266 <write_FRAM>
    43aa:	83 36       	cpi	r24, 0x63	; 99
    43ac:	89 f0       	breq	.+34     	; 0x43d0 <put_FRAM_ENCODERS+0x94>
    43ae:	1f 5f       	subi	r17, 0xFF	; 255
    43b0:	13 30       	cpi	r17, 0x03	; 3
    43b2:	b8 f2       	brcs	.-82     	; 0x4362 <put_FRAM_ENCODERS+0x26>
    43b4:	ce 01       	movw	r24, r28
    43b6:	01 96       	adiw	r24, 0x01	; 1
    43b8:	0e 94 92 07 	call	0xf24	; 0xf24 <get_time>
    43bc:	24 e1       	ldi	r18, 0x14	; 20
    43be:	ae 01       	movw	r20, r28
    43c0:	4f 5f       	subi	r20, 0xFF	; 255
    43c2:	5f 4f       	sbci	r21, 0xFF	; 255
    43c4:	60 e2       	ldi	r22, 0x20	; 32
    43c6:	70 e0       	ldi	r23, 0x00	; 0
    43c8:	80 e5       	ldi	r24, 0x50	; 80
    43ca:	0e 94 33 09 	call	0x1266	; 0x1266 <write_FRAM>
    43ce:	80 e0       	ldi	r24, 0x00	; 0
    43d0:	a2 96       	adiw	r28, 0x22	; 34
    43d2:	cd bf       	out	0x3d, r28	; 61
    43d4:	de bf       	out	0x3e, r29	; 62
    43d6:	df 91       	pop	r29
    43d8:	cf 91       	pop	r28
    43da:	1f 91       	pop	r17
    43dc:	08 95       	ret

000043de <put_MOTOR>:
    43de:	8f 92       	push	r8
    43e0:	9f 92       	push	r9
    43e2:	af 92       	push	r10
    43e4:	bf 92       	push	r11
    43e6:	cf 92       	push	r12
    43e8:	df 92       	push	r13
    43ea:	ef 92       	push	r14
    43ec:	ff 92       	push	r15
    43ee:	0f 93       	push	r16
    43f0:	1f 93       	push	r17
    43f2:	cf 93       	push	r28
    43f4:	df 93       	push	r29
    43f6:	cd b7       	in	r28, 0x3d	; 61
    43f8:	de b7       	in	r29, 0x3e	; 62
    43fa:	c5 59       	subi	r28, 0x95	; 149
    43fc:	d1 09       	sbc	r29, r1
    43fe:	cd bf       	out	0x3d, r28	; 61
    4400:	de bf       	out	0x3e, r29	; 62
    4402:	a8 2e       	mov	r10, r24
    4404:	b2 2e       	mov	r11, r18
    4406:	cd b6       	in	r12, 0x3d	; 61
    4408:	de b6       	in	r13, 0x3e	; 62
    440a:	80 e2       	ldi	r24, 0x20	; 32
    440c:	e0 e8       	ldi	r30, 0x80	; 128
    440e:	fa eb       	ldi	r31, 0xBA	; 186
    4410:	de 01       	movw	r26, r28
    4412:	11 96       	adiw	r26, 0x01	; 1
    4414:	01 90       	ld	r0, Z+
    4416:	0d 92       	st	X+, r0
    4418:	8a 95       	dec	r24
    441a:	e1 f7       	brne	.-8      	; 0x4414 <put_MOTOR+0x36>
    441c:	85 e2       	ldi	r24, 0x25	; 37
    441e:	e0 ea       	ldi	r30, 0xA0	; 160
    4420:	fa eb       	ldi	r31, 0xBA	; 186
    4422:	de 01       	movw	r26, r28
    4424:	91 96       	adiw	r26, 0x21	; 33
    4426:	01 90       	ld	r0, Z+
    4428:	0d 92       	st	X+, r0
    442a:	8a 95       	dec	r24
    442c:	e1 f7       	brne	.-8      	; 0x4426 <put_MOTOR+0x48>
    442e:	82 2e       	mov	r8, r18
    4430:	91 2c       	mov	r9, r1
    4432:	c4 01       	movw	r24, r8
    4434:	04 96       	adiw	r24, 0x04	; 4
    4436:	74 01       	movw	r14, r8
    4438:	23 e0       	ldi	r18, 0x03	; 3
    443a:	e2 0e       	add	r14, r18
    443c:	f1 1c       	adc	r15, r1
    443e:	ad b7       	in	r26, 0x3d	; 61
    4440:	be b7       	in	r27, 0x3e	; 62
    4442:	a8 1b       	sub	r26, r24
    4444:	b9 0b       	sbc	r27, r25
    4446:	ad bf       	out	0x3d, r26	; 61
    4448:	be bf       	out	0x3e, r27	; 62
    444a:	0d b7       	in	r16, 0x3d	; 61
    444c:	1e b7       	in	r17, 0x3e	; 62
    444e:	0f 5f       	subi	r16, 0xFF	; 255
    4450:	1f 4f       	sbci	r17, 0xFF	; 255
    4452:	f8 01       	movw	r30, r16
    4454:	10 92 42 2b 	sts	0x2B42, r1	; 0x802b42 <ser_recv1+0xff>
    4458:	81 e0       	ldi	r24, 0x01	; 1
    445a:	80 93 41 2b 	sts	0x2B41, r24	; 0x802b41 <ser_recv1+0xfe>
    445e:	11 96       	adiw	r26, 0x01	; 1
    4460:	ac 92       	st	X, r10
    4462:	61 83       	std	Z+1, r22	; 0x01
    4464:	60 e0       	ldi	r22, 0x00	; 0
    4466:	0e c0       	rjmp	.+28     	; 0x4484 <put_MOTOR+0xa6>
    4468:	86 2f       	mov	r24, r22
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	9c 01       	movw	r18, r24
    446e:	2e 5f       	subi	r18, 0xFE	; 254
    4470:	3f 4f       	sbci	r19, 0xFF	; 255
    4472:	da 01       	movw	r26, r20
    4474:	a8 0f       	add	r26, r24
    4476:	b9 1f       	adc	r27, r25
    4478:	8c 91       	ld	r24, X
    447a:	df 01       	movw	r26, r30
    447c:	a2 0f       	add	r26, r18
    447e:	b3 1f       	adc	r27, r19
    4480:	8c 93       	st	X, r24
    4482:	6f 5f       	subi	r22, 0xFF	; 255
    4484:	6b 15       	cp	r22, r11
    4486:	80 f3       	brcs	.-32     	; 0x4468 <put_MOTOR+0x8a>
    4488:	b2 e0       	ldi	r27, 0x02	; 2
    448a:	8b 0e       	add	r8, r27
    448c:	91 1c       	adc	r9, r1
    448e:	b4 01       	movw	r22, r8
    4490:	c8 01       	movw	r24, r16
    4492:	0e 94 58 19 	call	0x32b0	; 0x32b0 <crc16>
    4496:	d8 01       	movw	r26, r16
    4498:	a8 0d       	add	r26, r8
    449a:	b9 1d       	adc	r27, r9
    449c:	9c 93       	st	X, r25
    449e:	f8 01       	movw	r30, r16
    44a0:	ee 0d       	add	r30, r14
    44a2:	ff 1d       	adc	r31, r15
    44a4:	80 83       	st	Z, r24
    44a6:	64 e0       	ldi	r22, 0x04	; 4
    44a8:	6b 0d       	add	r22, r11
    44aa:	c8 01       	movw	r24, r16
    44ac:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <send_USART1>
    44b0:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    44b4:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
    44b8:	24 c0       	rjmp	.+72     	; 0x4502 <put_MOTOR+0x124>
    44ba:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    44be:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    44c2:	85 36       	cpi	r24, 0x65	; 101
    44c4:	91 05       	cpc	r25, r1
    44c6:	e0 f0       	brcs	.+56     	; 0x4500 <put_MOTOR+0x122>
    44c8:	81 ec       	ldi	r24, 0xC1	; 193
    44ca:	8a 0d       	add	r24, r10
    44cc:	1f 92       	push	r1
    44ce:	8f 93       	push	r24
    44d0:	ce 01       	movw	r24, r28
    44d2:	01 96       	adiw	r24, 0x01	; 1
    44d4:	9f 93       	push	r25
    44d6:	8f 93       	push	r24
    44d8:	8e 01       	movw	r16, r28
    44da:	0a 5b       	subi	r16, 0xBA	; 186
    44dc:	1f 4f       	sbci	r17, 0xFF	; 255
    44de:	1f 93       	push	r17
    44e0:	0f 93       	push	r16
    44e2:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
    44e6:	b8 01       	movw	r22, r16
    44e8:	86 e3       	ldi	r24, 0x36	; 54
    44ea:	91 e0       	ldi	r25, 0x01	; 1
    44ec:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    44f0:	0f 90       	pop	r0
    44f2:	0f 90       	pop	r0
    44f4:	0f 90       	pop	r0
    44f6:	0f 90       	pop	r0
    44f8:	0f 90       	pop	r0
    44fa:	0f 90       	pop	r0
    44fc:	83 e6       	ldi	r24, 0x63	; 99
    44fe:	2a c0       	rjmp	.+84     	; 0x4554 <put_MOTOR+0x176>
    4500:	00 00       	nop
    4502:	90 91 42 2b 	lds	r25, 0x2B42	; 0x802b42 <ser_recv1+0xff>
    4506:	80 91 41 2b 	lds	r24, 0x2B41	; 0x802b41 <ser_recv1+0xfe>
    450a:	98 17       	cp	r25, r24
    450c:	b0 f2       	brcs	.-84     	; 0x44ba <put_MOTOR+0xdc>
    450e:	90 91 43 2a 	lds	r25, 0x2A43	; 0x802a43 <ser_recv1>
    4512:	9f 3f       	cpi	r25, 0xFF	; 255
    4514:	f1 f0       	breq	.+60     	; 0x4552 <put_MOTOR+0x174>
    4516:	81 ee       	ldi	r24, 0xE1	; 225
    4518:	8a 0d       	add	r24, r10
    451a:	1f 92       	push	r1
    451c:	9f 93       	push	r25
    451e:	1f 92       	push	r1
    4520:	8f 93       	push	r24
    4522:	ce 01       	movw	r24, r28
    4524:	81 96       	adiw	r24, 0x21	; 33
    4526:	9f 93       	push	r25
    4528:	8f 93       	push	r24
    452a:	8e 01       	movw	r16, r28
    452c:	0a 5b       	subi	r16, 0xBA	; 186
    452e:	1f 4f       	sbci	r17, 0xFF	; 255
    4530:	1f 93       	push	r17
    4532:	0f 93       	push	r16
    4534:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
    4538:	b8 01       	movw	r22, r16
    453a:	86 e3       	ldi	r24, 0x36	; 54
    453c:	91 e0       	ldi	r25, 0x01	; 1
    453e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    4542:	2d b7       	in	r18, 0x3d	; 61
    4544:	3e b7       	in	r19, 0x3e	; 62
    4546:	28 5f       	subi	r18, 0xF8	; 248
    4548:	3f 4f       	sbci	r19, 0xFF	; 255
    454a:	2d bf       	out	0x3d, r18	; 61
    454c:	3e bf       	out	0x3e, r19	; 62
    454e:	83 e6       	ldi	r24, 0x63	; 99
    4550:	01 c0       	rjmp	.+2      	; 0x4554 <put_MOTOR+0x176>
    4552:	80 e0       	ldi	r24, 0x00	; 0
    4554:	cd be       	out	0x3d, r12	; 61
    4556:	de be       	out	0x3e, r13	; 62
    4558:	cb 56       	subi	r28, 0x6B	; 107
    455a:	df 4f       	sbci	r29, 0xFF	; 255
    455c:	cd bf       	out	0x3d, r28	; 61
    455e:	de bf       	out	0x3e, r29	; 62
    4560:	df 91       	pop	r29
    4562:	cf 91       	pop	r28
    4564:	1f 91       	pop	r17
    4566:	0f 91       	pop	r16
    4568:	ff 90       	pop	r15
    456a:	ef 90       	pop	r14
    456c:	df 90       	pop	r13
    456e:	cf 90       	pop	r12
    4570:	bf 90       	pop	r11
    4572:	af 90       	pop	r10
    4574:	9f 90       	pop	r9
    4576:	8f 90       	pop	r8
    4578:	08 95       	ret

0000457a <move_MOTOR>:
    457a:	bf 92       	push	r11
    457c:	cf 92       	push	r12
    457e:	df 92       	push	r13
    4580:	ef 92       	push	r14
    4582:	ff 92       	push	r15
    4584:	0f 93       	push	r16
    4586:	1f 93       	push	r17
    4588:	cf 93       	push	r28
    458a:	df 93       	push	r29
    458c:	cd b7       	in	r28, 0x3d	; 61
    458e:	de b7       	in	r29, 0x3e	; 62
    4590:	c7 58       	subi	r28, 0x87	; 135
    4592:	d1 09       	sbc	r29, r1
    4594:	cd bf       	out	0x3d, r28	; 61
    4596:	de bf       	out	0x3e, r29	; 62
    4598:	18 2f       	mov	r17, r24
    459a:	6a 01       	movw	r12, r20
    459c:	7b 01       	movw	r14, r22
    459e:	82 e2       	ldi	r24, 0x22	; 34
    45a0:	e5 ec       	ldi	r30, 0xC5	; 197
    45a2:	fa eb       	ldi	r31, 0xBA	; 186
    45a4:	de 01       	movw	r26, r28
    45a6:	11 96       	adiw	r26, 0x01	; 1
    45a8:	01 90       	ld	r0, Z+
    45aa:	0d 92       	st	X+, r0
    45ac:	8a 95       	dec	r24
    45ae:	e1 f7       	brne	.-8      	; 0x45a8 <move_MOTOR+0x2e>
    45b0:	68 94       	set
    45b2:	bb 24       	eor	r11, r11
    45b4:	b7 f8       	bld	r11, 7
    45b6:	b1 0e       	add	r11, r17
    45b8:	be 01       	movw	r22, r28
    45ba:	6c 57       	subi	r22, 0x7C	; 124
    45bc:	7f 4f       	sbci	r23, 0xFF	; 255
    45be:	81 2f       	mov	r24, r17
    45c0:	0e 94 bd 1b 	call	0x377a	; 0x377a <get_MOTOR_ENCODER>
    45c4:	cc 57       	subi	r28, 0x7C	; 124
    45c6:	df 4f       	sbci	r29, 0xFF	; 255
    45c8:	88 81       	ld	r24, Y
    45ca:	99 81       	ldd	r25, Y+1	; 0x01
    45cc:	aa 81       	ldd	r26, Y+2	; 0x02
    45ce:	bb 81       	ldd	r27, Y+3	; 0x03
    45d0:	c4 58       	subi	r28, 0x84	; 132
    45d2:	d0 40       	sbci	r29, 0x00	; 0
    45d4:	8c 15       	cp	r24, r12
    45d6:	9d 05       	cpc	r25, r13
    45d8:	ae 05       	cpc	r26, r14
    45da:	bf 05       	cpc	r27, r15
    45dc:	09 f4       	brne	.+2      	; 0x45e0 <move_MOTOR+0x66>
    45de:	84 c0       	rjmp	.+264    	; 0x46e8 <move_MOTOR+0x16e>
    45e0:	e4 96       	adiw	r28, 0x34	; 52
    45e2:	1f ae       	std	Y+63, r1	; 0x3f
    45e4:	e4 97       	sbiw	r28, 0x34	; 52
    45e6:	e5 96       	adiw	r28, 0x35	; 53
    45e8:	1f ae       	std	Y+63, r1	; 0x3f
    45ea:	e5 97       	sbiw	r28, 0x35	; 53
    45ec:	37 e3       	ldi	r19, 0x37	; 55
    45ee:	e6 96       	adiw	r28, 0x36	; 54
    45f0:	3f af       	std	Y+63, r19	; 0x3f
    45f2:	e6 97       	sbiw	r28, 0x36	; 54
    45f4:	2a e4       	ldi	r18, 0x4A	; 74
    45f6:	e7 96       	adiw	r28, 0x37	; 55
    45f8:	2f af       	std	Y+63, r18	; 0x3f
    45fa:	e7 97       	sbiw	r28, 0x37	; 55
    45fc:	e8 96       	adiw	r28, 0x38	; 56
    45fe:	1f ae       	std	Y+63, r1	; 0x3f
    4600:	e8 97       	sbiw	r28, 0x38	; 56
    4602:	e9 96       	adiw	r28, 0x39	; 57
    4604:	1f ae       	std	Y+63, r1	; 0x3f
    4606:	e9 97       	sbiw	r28, 0x39	; 57
    4608:	4b e1       	ldi	r20, 0x1B	; 27
    460a:	ea 96       	adiw	r28, 0x3a	; 58
    460c:	4f af       	std	Y+63, r20	; 0x3f
    460e:	ea 97       	sbiw	r28, 0x3a	; 58
    4610:	45 ea       	ldi	r20, 0xA5	; 165
    4612:	eb 96       	adiw	r28, 0x3b	; 59
    4614:	4f af       	std	Y+63, r20	; 0x3f
    4616:	eb 97       	sbiw	r28, 0x3b	; 59
    4618:	ec 96       	adiw	r28, 0x3c	; 60
    461a:	1f ae       	std	Y+63, r1	; 0x3f
    461c:	ec 97       	sbiw	r28, 0x3c	; 60
    461e:	ed 96       	adiw	r28, 0x3d	; 61
    4620:	1f ae       	std	Y+63, r1	; 0x3f
    4622:	ed 97       	sbiw	r28, 0x3d	; 61
    4624:	ee 96       	adiw	r28, 0x3e	; 62
    4626:	3f af       	std	Y+63, r19	; 0x3f
    4628:	ee 97       	sbiw	r28, 0x3e	; 62
    462a:	ef 96       	adiw	r28, 0x3f	; 63
    462c:	2f af       	std	Y+63, r18	; 0x3f
    462e:	ef 97       	sbiw	r28, 0x3f	; 63
    4630:	c1 58       	subi	r28, 0x81	; 129
    4632:	df 4f       	sbci	r29, 0xFF	; 255
    4634:	f8 82       	st	Y, r15
    4636:	cf 57       	subi	r28, 0x7F	; 127
    4638:	d0 40       	sbci	r29, 0x00	; 0
    463a:	c0 58       	subi	r28, 0x80	; 128
    463c:	df 4f       	sbci	r29, 0xFF	; 255
    463e:	e8 82       	st	Y, r14
    4640:	c0 58       	subi	r28, 0x80	; 128
    4642:	d0 40       	sbci	r29, 0x00	; 0
    4644:	cf 57       	subi	r28, 0x7F	; 127
    4646:	df 4f       	sbci	r29, 0xFF	; 255
    4648:	d8 82       	st	Y, r13
    464a:	c1 58       	subi	r28, 0x81	; 129
    464c:	d0 40       	sbci	r29, 0x00	; 0
    464e:	ce 57       	subi	r28, 0x7E	; 126
    4650:	df 4f       	sbci	r29, 0xFF	; 255
    4652:	c8 82       	st	Y, r12
    4654:	c2 58       	subi	r28, 0x82	; 130
    4656:	d0 40       	sbci	r29, 0x00	; 0
    4658:	21 e0       	ldi	r18, 0x01	; 1
    465a:	cd 57       	subi	r28, 0x7D	; 125
    465c:	df 4f       	sbci	r29, 0xFF	; 255
    465e:	28 83       	st	Y, r18
    4660:	c3 58       	subi	r28, 0x83	; 131
    4662:	d0 40       	sbci	r29, 0x00	; 0
    4664:	8c 15       	cp	r24, r12
    4666:	9d 05       	cpc	r25, r13
    4668:	ae 05       	cpc	r26, r14
    466a:	bf 05       	cpc	r27, r15
    466c:	3c f4       	brge	.+14     	; 0x467c <move_MOTOR+0x102>
    466e:	eb 2d       	mov	r30, r11
    4670:	f0 e0       	ldi	r31, 0x00	; 0
    4672:	e3 5c       	subi	r30, 0xC3	; 195
    4674:	f5 4d       	sbci	r31, 0xD5	; 213
    4676:	81 e0       	ldi	r24, 0x01	; 1
    4678:	80 83       	st	Z, r24
    467a:	0a c0       	rjmp	.+20     	; 0x4690 <move_MOTOR+0x116>
    467c:	c8 16       	cp	r12, r24
    467e:	d9 06       	cpc	r13, r25
    4680:	ea 06       	cpc	r14, r26
    4682:	fb 06       	cpc	r15, r27
    4684:	2c f4       	brge	.+10     	; 0x4690 <move_MOTOR+0x116>
    4686:	eb 2d       	mov	r30, r11
    4688:	f0 e0       	ldi	r31, 0x00	; 0
    468a:	e3 5c       	subi	r30, 0xC3	; 195
    468c:	f5 4d       	sbci	r31, 0xD5	; 213
    468e:	10 82       	st	Z, r1
    4690:	21 e1       	ldi	r18, 0x11	; 17
    4692:	ae 01       	movw	r20, r28
    4694:	4d 58       	subi	r20, 0x8D	; 141
    4696:	5f 4f       	sbci	r21, 0xFF	; 255
    4698:	61 e4       	ldi	r22, 0x41	; 65
    469a:	81 2f       	mov	r24, r17
    469c:	0e 94 ef 21 	call	0x43de	; 0x43de <put_MOTOR>
    46a0:	08 2f       	mov	r16, r24
    46a2:	83 36       	cpi	r24, 0x63	; 99
    46a4:	19 f5       	brne	.+70     	; 0x46ec <move_MOTOR+0x172>
    46a6:	eb 2d       	mov	r30, r11
    46a8:	f0 e0       	ldi	r31, 0x00	; 0
    46aa:	e3 5c       	subi	r30, 0xC3	; 195
    46ac:	f5 4d       	sbci	r31, 0xD5	; 213
    46ae:	82 e0       	ldi	r24, 0x02	; 2
    46b0:	80 83       	st	Z, r24
    46b2:	1f 53       	subi	r17, 0x3F	; 63
    46b4:	1f 92       	push	r1
    46b6:	1f 93       	push	r17
    46b8:	ce 01       	movw	r24, r28
    46ba:	01 96       	adiw	r24, 0x01	; 1
    46bc:	9f 93       	push	r25
    46be:	8f 93       	push	r24
    46c0:	7e 01       	movw	r14, r28
    46c2:	83 e2       	ldi	r24, 0x23	; 35
    46c4:	e8 0e       	add	r14, r24
    46c6:	f1 1c       	adc	r15, r1
    46c8:	ff 92       	push	r15
    46ca:	ef 92       	push	r14
    46cc:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
    46d0:	b7 01       	movw	r22, r14
    46d2:	86 e3       	ldi	r24, 0x36	; 54
    46d4:	91 e0       	ldi	r25, 0x01	; 1
    46d6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
    46da:	0f 90       	pop	r0
    46dc:	0f 90       	pop	r0
    46de:	0f 90       	pop	r0
    46e0:	0f 90       	pop	r0
    46e2:	0f 90       	pop	r0
    46e4:	0f 90       	pop	r0
    46e6:	03 c0       	rjmp	.+6      	; 0x46ee <move_MOTOR+0x174>
    46e8:	00 e0       	ldi	r16, 0x00	; 0
    46ea:	01 c0       	rjmp	.+2      	; 0x46ee <move_MOTOR+0x174>
    46ec:	00 e0       	ldi	r16, 0x00	; 0
    46ee:	80 2f       	mov	r24, r16
    46f0:	c9 57       	subi	r28, 0x79	; 121
    46f2:	df 4f       	sbci	r29, 0xFF	; 255
    46f4:	cd bf       	out	0x3d, r28	; 61
    46f6:	de bf       	out	0x3e, r29	; 62
    46f8:	df 91       	pop	r29
    46fa:	cf 91       	pop	r28
    46fc:	1f 91       	pop	r17
    46fe:	0f 91       	pop	r16
    4700:	ff 90       	pop	r15
    4702:	ef 90       	pop	r14
    4704:	df 90       	pop	r13
    4706:	cf 90       	pop	r12
    4708:	bf 90       	pop	r11
    470a:	08 95       	ret

0000470c <move_MOTORS_PISTON>:

uint8_t move_MOTORS_PISTON(int32_t deltaValue)
{
    470c:	8f 92       	push	r8
    470e:	9f 92       	push	r9
    4710:	af 92       	push	r10
    4712:	bf 92       	push	r11
    4714:	df 92       	push	r13
    4716:	ef 92       	push	r14
    4718:	ff 92       	push	r15
    471a:	0f 93       	push	r16
    471c:	1f 93       	push	r17
    471e:	cf 93       	push	r28
    4720:	df 93       	push	r29
    4722:	cd b7       	in	r28, 0x3d	; 61
    4724:	de b7       	in	r29, 0x3e	; 62
    4726:	c5 5c       	subi	r28, 0xC5	; 197
    4728:	d1 09       	sbc	r29, r1
    472a:	cd bf       	out	0x3d, r28	; 61
    472c:	de bf       	out	0x3e, r29	; 62
    472e:	4b 01       	movw	r8, r22
    4730:	5c 01       	movw	r10, r24

	char strbuf[80];
	uint8_t i, mtraddr;
	int32_t curPos[3], newPos[3];
	const char fmt0[] = "move_MOTORS_PISTON: get_MOTOR_ENCODER error on %c";
    4732:	82 e3       	ldi	r24, 0x32	; 50
    4734:	ec e7       	ldi	r30, 0x7C	; 124
    4736:	fb eb       	ldi	r31, 0xBB	; 187
    4738:	de 01       	movw	r26, r28
    473a:	a7 59       	subi	r26, 0x97	; 151
    473c:	bf 4f       	sbci	r27, 0xFF	; 255
    473e:	01 90       	ld	r0, Z+
    4740:	0d 92       	st	X+, r0
    4742:	8a 95       	dec	r24
    4744:	e1 f7       	brne	.-8      	; 0x473e <move_MOTORS_PISTON+0x32>
	const char fmt1[] = "move_MOTORS_PISTON: move_MOTOR error on %c";
    4746:	8b e2       	ldi	r24, 0x2B	; 43
    4748:	ee ea       	ldi	r30, 0xAE	; 174
    474a:	fb eb       	ldi	r31, 0xBB	; 187
    474c:	de 01       	movw	r26, r28
    474e:	a5 56       	subi	r26, 0x65	; 101
    4750:	bf 4f       	sbci	r27, 0xFF	; 255
    4752:	01 90       	ld	r0, Z+
    4754:	0d 92       	st	X+, r0
    4756:	8a 95       	dec	r24
    4758:	e1 f7       	brne	.-8      	; 0x4752 <move_MOTORS_PISTON+0x46>

	for (i = 0; i < NMOTORS; i++) {
    475a:	f1 2c       	mov	r15, r1
    475c:	52 c0       	rjmp	.+164    	; 0x4802 <move_MOTORS_PISTON+0xf6>
		mtraddr = i + MOTOR_A;
    475e:	68 94       	set
    4760:	dd 24       	eor	r13, r13
    4762:	d7 f8       	bld	r13, 7
    4764:	df 0c       	add	r13, r15
		if (get_MOTOR_ENCODER(mtraddr, &curPos[i]) == ERROR) {
    4766:	0f 2d       	mov	r16, r15
    4768:	10 e0       	ldi	r17, 0x00	; 0
    476a:	b8 01       	movw	r22, r16
    476c:	66 0f       	add	r22, r22
    476e:	77 1f       	adc	r23, r23
    4770:	66 0f       	add	r22, r22
    4772:	77 1f       	adc	r23, r23
    4774:	81 e5       	ldi	r24, 0x51	; 81
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	8c 0f       	add	r24, r28
    477a:	9d 1f       	adc	r25, r29
    477c:	68 0f       	add	r22, r24
    477e:	79 1f       	adc	r23, r25
    4780:	8d 2d       	mov	r24, r13
    4782:	0e 94 bd 1b 	call	0x377a	; 0x377a <get_MOTOR_ENCODER>
    4786:	e8 2e       	mov	r14, r24
    4788:	93 e6       	ldi	r25, 0x63	; 99
    478a:	89 13       	cpse	r24, r25
    478c:	1d c0       	rjmp	.+58     	; 0x47c8 <move_MOTORS_PISTON+0xbc>
			sprintf(strbuf, fmt0, mtraddr-63);
    478e:	8d 2d       	mov	r24, r13
    4790:	90 e0       	ldi	r25, 0x00	; 0
    4792:	cf 97       	sbiw	r24, 0x3f	; 63
    4794:	9f 93       	push	r25
    4796:	8f 93       	push	r24
    4798:	ce 01       	movw	r24, r28
    479a:	87 59       	subi	r24, 0x97	; 151
    479c:	9f 4f       	sbci	r25, 0xFF	; 255
    479e:	9f 93       	push	r25
    47a0:	8f 93       	push	r24
    47a2:	8e 01       	movw	r16, r28
    47a4:	0f 5f       	subi	r16, 0xFF	; 255
    47a6:	1f 4f       	sbci	r17, 0xFF	; 255
    47a8:	1f 93       	push	r17
    47aa:	0f 93       	push	r16
    47ac:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			printError(ERR_MTR, strbuf);
    47b0:	b8 01       	movw	r22, r16
    47b2:	86 e3       	ldi	r24, 0x36	; 54
    47b4:	91 e0       	ldi	r25, 0x01	; 1
    47b6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			return(ERROR);
    47ba:	0f 90       	pop	r0
    47bc:	0f 90       	pop	r0
    47be:	0f 90       	pop	r0
    47c0:	0f 90       	pop	r0
    47c2:	0f 90       	pop	r0
    47c4:	0f 90       	pop	r0
    47c6:	8c c0       	rjmp	.+280    	; 0x48e0 <move_MOTORS_PISTON+0x1d4>
		}
		newPos[i] = curPos[i] + deltaValue;
    47c8:	00 0f       	add	r16, r16
    47ca:	11 1f       	adc	r17, r17
    47cc:	00 0f       	add	r16, r16
    47ce:	11 1f       	adc	r17, r17
    47d0:	e1 e5       	ldi	r30, 0x51	; 81
    47d2:	f0 e0       	ldi	r31, 0x00	; 0
    47d4:	ec 0f       	add	r30, r28
    47d6:	fd 1f       	adc	r31, r29
    47d8:	e0 0f       	add	r30, r16
    47da:	f1 1f       	adc	r31, r17
    47dc:	80 81       	ld	r24, Z
    47de:	91 81       	ldd	r25, Z+1	; 0x01
    47e0:	a2 81       	ldd	r26, Z+2	; 0x02
    47e2:	b3 81       	ldd	r27, Z+3	; 0x03
    47e4:	88 0d       	add	r24, r8
    47e6:	99 1d       	adc	r25, r9
    47e8:	aa 1d       	adc	r26, r10
    47ea:	bb 1d       	adc	r27, r11
    47ec:	ed e5       	ldi	r30, 0x5D	; 93
    47ee:	f0 e0       	ldi	r31, 0x00	; 0
    47f0:	ec 0f       	add	r30, r28
    47f2:	fd 1f       	adc	r31, r29
    47f4:	e0 0f       	add	r30, r16
    47f6:	f1 1f       	adc	r31, r17
    47f8:	80 83       	st	Z, r24
    47fa:	91 83       	std	Z+1, r25	; 0x01
    47fc:	a2 83       	std	Z+2, r26	; 0x02
    47fe:	b3 83       	std	Z+3, r27	; 0x03
	uint8_t i, mtraddr;
	int32_t curPos[3], newPos[3];
	const char fmt0[] = "move_MOTORS_PISTON: get_MOTOR_ENCODER error on %c";
	const char fmt1[] = "move_MOTORS_PISTON: move_MOTOR error on %c";

	for (i = 0; i < NMOTORS; i++) {
    4800:	f3 94       	inc	r15
    4802:	82 e0       	ldi	r24, 0x02	; 2
    4804:	8f 15       	cp	r24, r15
    4806:	08 f0       	brcs	.+2      	; 0x480a <move_MOTORS_PISTON+0xfe>
    4808:	aa cf       	rjmp	.-172    	; 0x475e <move_MOTORS_PISTON+0x52>
    480a:	f1 2c       	mov	r15, r1
    480c:	64 c0       	rjmp	.+200    	; 0x48d6 <move_MOTORS_PISTON+0x1ca>
		}
		newPos[i] = curPos[i] + deltaValue;
	}

	for (i = 0; i < NMOTORS; i++) {
		mtraddr = i + MOTOR_A;
    480e:	68 94       	set
    4810:	dd 24       	eor	r13, r13
    4812:	d7 f8       	bld	r13, 7
    4814:	df 0c       	add	r13, r15
		if (move_MOTOR(mtraddr, newPos[i]) == ERROR) {
    4816:	0f 2d       	mov	r16, r15
    4818:	10 e0       	ldi	r17, 0x00	; 0
    481a:	f8 01       	movw	r30, r16
    481c:	ee 0f       	add	r30, r30
    481e:	ff 1f       	adc	r31, r31
    4820:	ee 0f       	add	r30, r30
    4822:	ff 1f       	adc	r31, r31
    4824:	8d e5       	ldi	r24, 0x5D	; 93
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	8c 0f       	add	r24, r28
    482a:	9d 1f       	adc	r25, r29
    482c:	e8 0f       	add	r30, r24
    482e:	f9 1f       	adc	r31, r25
    4830:	80 80       	ld	r8, Z
    4832:	91 80       	ldd	r9, Z+1	; 0x01
    4834:	a2 80       	ldd	r10, Z+2	; 0x02
    4836:	b3 80       	ldd	r11, Z+3	; 0x03
    4838:	b5 01       	movw	r22, r10
    483a:	a4 01       	movw	r20, r8
    483c:	8d 2d       	mov	r24, r13
    483e:	0e 94 bd 22 	call	0x457a	; 0x457a <move_MOTOR>
    4842:	e8 2e       	mov	r14, r24
    4844:	93 e6       	ldi	r25, 0x63	; 99
    4846:	89 13       	cpse	r24, r25
    4848:	1d c0       	rjmp	.+58     	; 0x4884 <move_MOTORS_PISTON+0x178>
			sprintf(strbuf, fmt1, mtraddr-63);
    484a:	8d 2d       	mov	r24, r13
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	cf 97       	sbiw	r24, 0x3f	; 63
    4850:	9f 93       	push	r25
    4852:	8f 93       	push	r24
    4854:	ce 01       	movw	r24, r28
    4856:	85 56       	subi	r24, 0x65	; 101
    4858:	9f 4f       	sbci	r25, 0xFF	; 255
    485a:	9f 93       	push	r25
    485c:	8f 93       	push	r24
    485e:	8e 01       	movw	r16, r28
    4860:	0f 5f       	subi	r16, 0xFF	; 255
    4862:	1f 4f       	sbci	r17, 0xFF	; 255
    4864:	1f 93       	push	r17
    4866:	0f 93       	push	r16
    4868:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			printError(ERR_MTR, strbuf);
    486c:	b8 01       	movw	r22, r16
    486e:	86 e3       	ldi	r24, 0x36	; 54
    4870:	91 e0       	ldi	r25, 0x01	; 1
    4872:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			return(ERROR);
    4876:	0f 90       	pop	r0
    4878:	0f 90       	pop	r0
    487a:	0f 90       	pop	r0
    487c:	0f 90       	pop	r0
    487e:	0f 90       	pop	r0
    4880:	0f 90       	pop	r0
    4882:	2e c0       	rjmp	.+92     	; 0x48e0 <move_MOTORS_PISTON+0x1d4>
		}
		motorDir[i] = MTRDIRUNKNOWN;
    4884:	82 e0       	ldi	r24, 0x02	; 2
    4886:	f8 01       	movw	r30, r16
    4888:	e3 5c       	subi	r30, 0xC3	; 195
    488a:	f5 4d       	sbci	r31, 0xD5	; 213
    488c:	80 83       	st	Z, r24
		if (newPos[i] > curPos[i]) {
    488e:	f8 01       	movw	r30, r16
    4890:	ee 0f       	add	r30, r30
    4892:	ff 1f       	adc	r31, r31
    4894:	ee 0f       	add	r30, r30
    4896:	ff 1f       	adc	r31, r31
    4898:	81 e5       	ldi	r24, 0x51	; 81
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	8c 0f       	add	r24, r28
    489e:	9d 1f       	adc	r25, r29
    48a0:	e8 0f       	add	r30, r24
    48a2:	f9 1f       	adc	r31, r25
    48a4:	80 81       	ld	r24, Z
    48a6:	91 81       	ldd	r25, Z+1	; 0x01
    48a8:	a2 81       	ldd	r26, Z+2	; 0x02
    48aa:	b3 81       	ldd	r27, Z+3	; 0x03
    48ac:	88 15       	cp	r24, r8
    48ae:	99 05       	cpc	r25, r9
    48b0:	aa 05       	cpc	r26, r10
    48b2:	bb 05       	cpc	r27, r11
    48b4:	34 f4       	brge	.+12     	; 0x48c2 <move_MOTORS_PISTON+0x1b6>
			motorDir[i] = MTRDIRPOSITIVE;
    48b6:	f8 01       	movw	r30, r16
    48b8:	e3 5c       	subi	r30, 0xC3	; 195
    48ba:	f5 4d       	sbci	r31, 0xD5	; 213
    48bc:	81 e0       	ldi	r24, 0x01	; 1
    48be:	80 83       	st	Z, r24
    48c0:	09 c0       	rjmp	.+18     	; 0x48d4 <move_MOTORS_PISTON+0x1c8>
		} else if (newPos[i] < curPos[i]) {
    48c2:	88 16       	cp	r8, r24
    48c4:	99 06       	cpc	r9, r25
    48c6:	aa 06       	cpc	r10, r26
    48c8:	bb 06       	cpc	r11, r27
    48ca:	24 f4       	brge	.+8      	; 0x48d4 <move_MOTORS_PISTON+0x1c8>
			motorDir[i] = MTRDIRNEGATIVE;
    48cc:	f8 01       	movw	r30, r16
    48ce:	e3 5c       	subi	r30, 0xC3	; 195
    48d0:	f5 4d       	sbci	r31, 0xD5	; 213
    48d2:	10 82       	st	Z, r1
			return(ERROR);
		}
		newPos[i] = curPos[i] + deltaValue;
	}

	for (i = 0; i < NMOTORS; i++) {
    48d4:	f3 94       	inc	r15
    48d6:	92 e0       	ldi	r25, 0x02	; 2
    48d8:	9f 15       	cp	r25, r15
    48da:	08 f0       	brcs	.+2      	; 0x48de <move_MOTORS_PISTON+0x1d2>
    48dc:	98 cf       	rjmp	.-208    	; 0x480e <move_MOTORS_PISTON+0x102>
		} else if (newPos[i] < curPos[i]) {
			motorDir[i] = MTRDIRNEGATIVE;
		}
	}

	return(NOERROR);
    48de:	e1 2c       	mov	r14, r1

}
    48e0:	8e 2d       	mov	r24, r14
    48e2:	cb 53       	subi	r28, 0x3B	; 59
    48e4:	df 4f       	sbci	r29, 0xFF	; 255
    48e6:	cd bf       	out	0x3d, r28	; 61
    48e8:	de bf       	out	0x3e, r29	; 62
    48ea:	df 91       	pop	r29
    48ec:	cf 91       	pop	r28
    48ee:	1f 91       	pop	r17
    48f0:	0f 91       	pop	r16
    48f2:	ff 90       	pop	r15
    48f4:	ef 90       	pop	r14
    48f6:	df 90       	pop	r13
    48f8:	bf 90       	pop	r11
    48fa:	af 90       	pop	r10
    48fc:	9f 90       	pop	r9
    48fe:	8f 90       	pop	r8
    4900:	08 95       	ret

00004902 <move_MOTOR_CMD>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR_CMD(uint8_t cstack)
{
    4902:	8f 92       	push	r8
    4904:	9f 92       	push	r9
    4906:	af 92       	push	r10
    4908:	bf 92       	push	r11
    490a:	ef 92       	push	r14
    490c:	ff 92       	push	r15
    490e:	0f 93       	push	r16
    4910:	1f 93       	push	r17
    4912:	cf 93       	push	r28
    4914:	df 93       	push	r29
    4916:	cd b7       	in	r28, 0x3d	; 61
    4918:	de b7       	in	r29, 0x3e	; 62
    491a:	c4 5e       	subi	r28, 0xE4	; 228
    491c:	d1 09       	sbc	r29, r1
    491e:	cd bf       	out	0x3d, r28	; 61
    4920:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	uint8_t motor, controller;
	int32_t newPosition, currentPosition, deltaPos;
	const char fmt0[] = "move_MOTOR_CMD: get_MOTOR_ENCODER error";
    4922:	98 e2       	ldi	r25, 0x28	; 40
    4924:	e9 ed       	ldi	r30, 0xD9	; 217
    4926:	fb eb       	ldi	r31, 0xBB	; 187
    4928:	de 01       	movw	r26, r28
    492a:	ab 5a       	subi	r26, 0xAB	; 171
    492c:	bf 4f       	sbci	r27, 0xFF	; 255
    492e:	01 90       	ld	r0, Z+
    4930:	0d 92       	st	X+, r0
    4932:	9a 95       	dec	r25
    4934:	e1 f7       	brne	.-8      	; 0x492e <move_MOTOR_CMD+0x2c>
	const char fmt1[] = "move_MOTOR_CMD: unknown motor";
    4936:	9e e1       	ldi	r25, 0x1E	; 30
    4938:	e1 e0       	ldi	r30, 0x01	; 1
    493a:	fc eb       	ldi	r31, 0xBC	; 188
    493c:	de 01       	movw	r26, r28
    493e:	a3 58       	subi	r26, 0x83	; 131
    4940:	bf 4f       	sbci	r27, 0xFF	; 255
    4942:	01 90       	ld	r0, Z+
    4944:	0d 92       	st	X+, r0
    4946:	9a 95       	dec	r25
    4948:	e1 f7       	brne	.-8      	; 0x4942 <move_MOTOR_CMD+0x40>
	const char fmt2[] = "move_MOTOR_CMD: move_MOTOR error";
    494a:	91 e2       	ldi	r25, 0x21	; 33
    494c:	ef e1       	ldi	r30, 0x1F	; 31
    494e:	fc eb       	ldi	r31, 0xBC	; 188
    4950:	de 01       	movw	r26, r28
    4952:	a5 56       	subi	r26, 0x65	; 101
    4954:	bf 4f       	sbci	r27, 0xFF	; 255
    4956:	01 90       	ld	r0, Z+
    4958:	0d 92       	st	X+, r0
    495a:	9a 95       	dec	r25
    495c:	e1 f7       	brne	.-8      	; 0x4956 <move_MOTOR_CMD+0x54>
	const char fmt3[] = "move_MOTOR_CMD: move_MOTORS_PISTON error";
    495e:	99 e2       	ldi	r25, 0x29	; 41
    4960:	e0 e4       	ldi	r30, 0x40	; 64
    4962:	fc eb       	ldi	r31, 0xBC	; 188
    4964:	de 01       	movw	r26, r28
    4966:	a4 54       	subi	r26, 0x44	; 68
    4968:	bf 4f       	sbci	r27, 0xFF	; 255
    496a:	01 90       	ld	r0, Z+
    496c:	0d 92       	st	X+, r0
    496e:	9a 95       	dec	r25
    4970:	e1 f7       	brne	.-8      	; 0x496a <move_MOTOR_CMD+0x68>

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    4972:	08 2f       	mov	r16, r24
    4974:	10 e0       	ldi	r17, 0x00	; 0
    4976:	84 e3       	ldi	r24, 0x34	; 52
    4978:	80 9f       	mul	r24, r16
    497a:	f0 01       	movw	r30, r0
    497c:	81 9f       	mul	r24, r17
    497e:	f0 0d       	add	r31, r0
    4980:	11 24       	eor	r1, r1
    4982:	e1 5f       	subi	r30, 0xF1	; 241
    4984:	f7 4d       	sbci	r31, 0xD7	; 215
    4986:	82 81       	ldd	r24, Z+2	; 0x02
    4988:	88 23       	and	r24, r24
    498a:	09 f4       	brne	.+2      	; 0x498e <move_MOTOR_CMD+0x8c>
    498c:	1c c1       	rjmp	.+568    	; 0x4bc6 <move_MOTOR_CMD+0x2c4>
		return(NOERROR);
	}

	motor = pcmd[cstack].cobject;
    498e:	84 e3       	ldi	r24, 0x34	; 52
    4990:	80 9f       	mul	r24, r16
    4992:	f0 01       	movw	r30, r0
    4994:	81 9f       	mul	r24, r17
    4996:	f0 0d       	add	r31, r0
    4998:	11 24       	eor	r1, r1
    499a:	e1 5f       	subi	r30, 0xF1	; 241
    499c:	f7 4d       	sbci	r31, 0xD7	; 215
    499e:	81 81       	ldd	r24, Z+1	; 0x01

	switch(motor) {
    49a0:	84 36       	cpi	r24, 0x64	; 100
    49a2:	40 f4       	brcc	.+16     	; 0x49b4 <move_MOTOR_CMD+0xb2>
    49a4:	81 36       	cpi	r24, 0x61	; 97
    49a6:	08 f0       	brcs	.+2      	; 0x49aa <move_MOTOR_CMD+0xa8>
    49a8:	41 c0       	rjmp	.+130    	; 0x4a2c <move_MOTOR_CMD+0x12a>
    49aa:	9f eb       	ldi	r25, 0xBF	; 191
    49ac:	98 0f       	add	r25, r24
    49ae:	93 30       	cpi	r25, 0x03	; 3
    49b0:	28 f0       	brcs	.+10     	; 0x49bc <move_MOTOR_CMD+0xba>
    49b2:	aa c0       	rjmp	.+340    	; 0x4b08 <move_MOTOR_CMD+0x206>
    49b4:	84 36       	cpi	r24, 0x64	; 100
    49b6:	09 f4       	brne	.+2      	; 0x49ba <move_MOTOR_CMD+0xb8>
    49b8:	7b c0       	rjmp	.+246    	; 0x4ab0 <move_MOTOR_CMD+0x1ae>
    49ba:	a6 c0       	rjmp	.+332    	; 0x4b08 <move_MOTOR_CMD+0x206>

		case 'A':			// Move absolute
		case 'B':
		case 'C':
			controller = motor + 63;
    49bc:	0f 2e       	mov	r0, r31
    49be:	ff e3       	ldi	r31, 0x3F	; 63
    49c0:	ef 2e       	mov	r14, r31
    49c2:	f0 2d       	mov	r31, r0
    49c4:	e8 0e       	add	r14, r24
			if (get_MOTOR_ENCODER(controller, &currentPosition) == ERROR) {
    49c6:	be 01       	movw	r22, r28
    49c8:	6f 5a       	subi	r22, 0xAF	; 175
    49ca:	7f 4f       	sbci	r23, 0xFF	; 255
    49cc:	8e 2d       	mov	r24, r14
    49ce:	0e 94 bd 1b 	call	0x377a	; 0x377a <get_MOTOR_ENCODER>
    49d2:	f8 2e       	mov	r15, r24
    49d4:	83 e6       	ldi	r24, 0x63	; 99
    49d6:	f8 12       	cpse	r15, r24
    49d8:	16 c0       	rjmp	.+44     	; 0x4a06 <move_MOTOR_CMD+0x104>
				sprintf(strbuf, fmt0);
    49da:	ce 01       	movw	r24, r28
    49dc:	8b 5a       	subi	r24, 0xAB	; 171
    49de:	9f 4f       	sbci	r25, 0xFF	; 255
    49e0:	9f 93       	push	r25
    49e2:	8f 93       	push	r24
    49e4:	8e 01       	movw	r16, r28
    49e6:	0f 5f       	subi	r16, 0xFF	; 255
    49e8:	1f 4f       	sbci	r17, 0xFF	; 255
    49ea:	1f 93       	push	r17
    49ec:	0f 93       	push	r16
    49ee:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
				printError(ERR_MTR_ENC_VAL, strbuf);
    49f2:	b8 01       	movw	r22, r16
    49f4:	85 e3       	ldi	r24, 0x35	; 53
    49f6:	91 e0       	ldi	r25, 0x01	; 1
    49f8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    49fc:	0f 90       	pop	r0
    49fe:	0f 90       	pop	r0
    4a00:	0f 90       	pop	r0
    4a02:	0f 90       	pop	r0
    4a04:	e5 c0       	rjmp	.+458    	; 0x4bd0 <move_MOTOR_CMD+0x2ce>
			}
			newPosition = (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    4a06:	24 e3       	ldi	r18, 0x34	; 52
    4a08:	20 9f       	mul	r18, r16
    4a0a:	c0 01       	movw	r24, r0
    4a0c:	21 9f       	mul	r18, r17
    4a0e:	90 0d       	add	r25, r0
    4a10:	11 24       	eor	r1, r1
    4a12:	8f 5e       	subi	r24, 0xEF	; 239
    4a14:	97 4d       	sbci	r25, 0xD7	; 215
    4a16:	0e 94 d7 36 	call	0x6dae	; 0x6dae <atol>
    4a1a:	9b 01       	movw	r18, r22
    4a1c:	ac 01       	movw	r20, r24
    4a1e:	ab e1       	ldi	r26, 0x1B	; 27
    4a20:	b1 e0       	ldi	r27, 0x01	; 1
    4a22:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__muluhisi3>
    4a26:	4b 01       	movw	r8, r22
    4a28:	5c 01       	movw	r10, r24
			break;
    4a2a:	88 c0       	rjmp	.+272    	; 0x4b3c <move_MOTOR_CMD+0x23a>

		case 'a':			// Move relative
		case 'b':
		case 'c':
			controller = motor + 31;
    4a2c:	0f 2e       	mov	r0, r31
    4a2e:	ff e1       	ldi	r31, 0x1F	; 31
    4a30:	ef 2e       	mov	r14, r31
    4a32:	f0 2d       	mov	r31, r0
    4a34:	e8 0e       	add	r14, r24
			if (get_MOTOR_ENCODER(controller, &currentPosition) == ERROR) {
    4a36:	be 01       	movw	r22, r28
    4a38:	6f 5a       	subi	r22, 0xAF	; 175
    4a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a3c:	8e 2d       	mov	r24, r14
    4a3e:	0e 94 bd 1b 	call	0x377a	; 0x377a <get_MOTOR_ENCODER>
    4a42:	f8 2e       	mov	r15, r24
    4a44:	83 e6       	ldi	r24, 0x63	; 99
    4a46:	f8 12       	cpse	r15, r24
    4a48:	16 c0       	rjmp	.+44     	; 0x4a76 <move_MOTOR_CMD+0x174>
				sprintf(strbuf, fmt0);
    4a4a:	ce 01       	movw	r24, r28
    4a4c:	8b 5a       	subi	r24, 0xAB	; 171
    4a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a50:	9f 93       	push	r25
    4a52:	8f 93       	push	r24
    4a54:	8e 01       	movw	r16, r28
    4a56:	0f 5f       	subi	r16, 0xFF	; 255
    4a58:	1f 4f       	sbci	r17, 0xFF	; 255
    4a5a:	1f 93       	push	r17
    4a5c:	0f 93       	push	r16
    4a5e:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
				printError(ERR_MTR_ENC_VAL, strbuf);
    4a62:	b8 01       	movw	r22, r16
    4a64:	85 e3       	ldi	r24, 0x35	; 53
    4a66:	91 e0       	ldi	r25, 0x01	; 1
    4a68:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    4a6c:	0f 90       	pop	r0
    4a6e:	0f 90       	pop	r0
    4a70:	0f 90       	pop	r0
    4a72:	0f 90       	pop	r0
    4a74:	ad c0       	rjmp	.+346    	; 0x4bd0 <move_MOTOR_CMD+0x2ce>
			}
			newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    4a76:	24 e3       	ldi	r18, 0x34	; 52
    4a78:	20 9f       	mul	r18, r16
    4a7a:	c0 01       	movw	r24, r0
    4a7c:	21 9f       	mul	r18, r17
    4a7e:	90 0d       	add	r25, r0
    4a80:	11 24       	eor	r1, r1
    4a82:	8f 5e       	subi	r24, 0xEF	; 239
    4a84:	97 4d       	sbci	r25, 0xD7	; 215
    4a86:	0e 94 d7 36 	call	0x6dae	; 0x6dae <atol>
    4a8a:	9b 01       	movw	r18, r22
    4a8c:	ac 01       	movw	r20, r24
    4a8e:	ab e1       	ldi	r26, 0x1B	; 27
    4a90:	b1 e0       	ldi	r27, 0x01	; 1
    4a92:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__muluhisi3>
    4a96:	65 96       	adiw	r28, 0x15	; 21
    4a98:	0c ad       	ldd	r16, Y+60	; 0x3c
    4a9a:	1d ad       	ldd	r17, Y+61	; 0x3d
    4a9c:	2e ad       	ldd	r18, Y+62	; 0x3e
    4a9e:	3f ad       	ldd	r19, Y+63	; 0x3f
    4aa0:	65 97       	sbiw	r28, 0x15	; 21
    4aa2:	4b 01       	movw	r8, r22
    4aa4:	5c 01       	movw	r10, r24
    4aa6:	80 0e       	add	r8, r16
    4aa8:	91 1e       	adc	r9, r17
    4aaa:	a2 1e       	adc	r10, r18
    4aac:	b3 1e       	adc	r11, r19
			break;
    4aae:	46 c0       	rjmp	.+140    	; 0x4b3c <move_MOTOR_CMD+0x23a>

		case 'd':
			deltaPos = (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    4ab0:	24 e3       	ldi	r18, 0x34	; 52
    4ab2:	20 9f       	mul	r18, r16
    4ab4:	c0 01       	movw	r24, r0
    4ab6:	21 9f       	mul	r18, r17
    4ab8:	90 0d       	add	r25, r0
    4aba:	11 24       	eor	r1, r1
    4abc:	8f 5e       	subi	r24, 0xEF	; 239
    4abe:	97 4d       	sbci	r25, 0xD7	; 215
    4ac0:	0e 94 d7 36 	call	0x6dae	; 0x6dae <atol>
    4ac4:	9b 01       	movw	r18, r22
    4ac6:	ac 01       	movw	r20, r24
    4ac8:	ab e1       	ldi	r26, 0x1B	; 27
    4aca:	b1 e0       	ldi	r27, 0x01	; 1
    4acc:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__muluhisi3>
			if (move_MOTORS_PISTON(deltaPos) == ERROR) {
    4ad0:	0e 94 86 23 	call	0x470c	; 0x470c <move_MOTORS_PISTON>
    4ad4:	f8 2e       	mov	r15, r24
    4ad6:	83 e6       	ldi	r24, 0x63	; 99
    4ad8:	f8 12       	cpse	r15, r24
    4ada:	77 c0       	rjmp	.+238    	; 0x4bca <move_MOTOR_CMD+0x2c8>
				sprintf(strbuf, fmt3);
    4adc:	ce 01       	movw	r24, r28
    4ade:	84 54       	subi	r24, 0x44	; 68
    4ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ae2:	9f 93       	push	r25
    4ae4:	8f 93       	push	r24
    4ae6:	8e 01       	movw	r16, r28
    4ae8:	0f 5f       	subi	r16, 0xFF	; 255
    4aea:	1f 4f       	sbci	r17, 0xFF	; 255
    4aec:	1f 93       	push	r17
    4aee:	0f 93       	push	r16
    4af0:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
				printError(ERR_MTR, strbuf);
    4af4:	b8 01       	movw	r22, r16
    4af6:	86 e3       	ldi	r24, 0x36	; 54
    4af8:	91 e0       	ldi	r25, 0x01	; 1
    4afa:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    4afe:	0f 90       	pop	r0
    4b00:	0f 90       	pop	r0
    4b02:	0f 90       	pop	r0
    4b04:	0f 90       	pop	r0
    4b06:	64 c0       	rjmp	.+200    	; 0x4bd0 <move_MOTOR_CMD+0x2ce>
			}
			return(NOERROR);

		default:
			sprintf(strbuf, fmt1);
    4b08:	ce 01       	movw	r24, r28
    4b0a:	83 58       	subi	r24, 0x83	; 131
    4b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b0e:	9f 93       	push	r25
    4b10:	8f 93       	push	r24
    4b12:	8e 01       	movw	r16, r28
    4b14:	0f 5f       	subi	r16, 0xFF	; 255
    4b16:	1f 4f       	sbci	r17, 0xFF	; 255
    4b18:	1f 93       	push	r17
    4b1a:	0f 93       	push	r16
    4b1c:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			printError(ERR_MTR, strbuf);
    4b20:	b8 01       	movw	r22, r16
    4b22:	86 e3       	ldi	r24, 0x36	; 54
    4b24:	91 e0       	ldi	r25, 0x01	; 1
    4b26:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			return(ERROR);
    4b2a:	0f 90       	pop	r0
    4b2c:	0f 90       	pop	r0
    4b2e:	0f 90       	pop	r0
    4b30:	0f 90       	pop	r0
    4b32:	0f 2e       	mov	r0, r31
    4b34:	f3 e6       	ldi	r31, 0x63	; 99
    4b36:	ff 2e       	mov	r15, r31
    4b38:	f0 2d       	mov	r31, r0
    4b3a:	4a c0       	rjmp	.+148    	; 0x4bd0 <move_MOTOR_CMD+0x2ce>
			break;	
	}

	motorDir[controller - MOTOR_A] = MTRDIRUNKNOWN;
    4b3c:	0e 2d       	mov	r16, r14
    4b3e:	10 e0       	ldi	r17, 0x00	; 0
    4b40:	00 58       	subi	r16, 0x80	; 128
    4b42:	11 09       	sbc	r17, r1
    4b44:	f8 01       	movw	r30, r16
    4b46:	e3 5c       	subi	r30, 0xC3	; 195
    4b48:	f5 4d       	sbci	r31, 0xD5	; 213
    4b4a:	82 e0       	ldi	r24, 0x02	; 2
    4b4c:	80 83       	st	Z, r24

	if (move_MOTOR(controller, newPosition) == ERROR) {
    4b4e:	b5 01       	movw	r22, r10
    4b50:	a4 01       	movw	r20, r8
    4b52:	8e 2d       	mov	r24, r14
    4b54:	0e 94 bd 22 	call	0x457a	; 0x457a <move_MOTOR>
    4b58:	f8 2e       	mov	r15, r24
    4b5a:	83 e6       	ldi	r24, 0x63	; 99
    4b5c:	f8 12       	cpse	r15, r24
    4b5e:	16 c0       	rjmp	.+44     	; 0x4b8c <move_MOTOR_CMD+0x28a>
		sprintf(strbuf, fmt2);
    4b60:	ce 01       	movw	r24, r28
    4b62:	85 56       	subi	r24, 0x65	; 101
    4b64:	9f 4f       	sbci	r25, 0xFF	; 255
    4b66:	9f 93       	push	r25
    4b68:	8f 93       	push	r24
    4b6a:	8e 01       	movw	r16, r28
    4b6c:	0f 5f       	subi	r16, 0xFF	; 255
    4b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b70:	1f 93       	push	r17
    4b72:	0f 93       	push	r16
    4b74:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
		printError(ERR_MTR, strbuf);
    4b78:	b8 01       	movw	r22, r16
    4b7a:	86 e3       	ldi	r24, 0x36	; 54
    4b7c:	91 e0       	ldi	r25, 0x01	; 1
    4b7e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    4b82:	0f 90       	pop	r0
    4b84:	0f 90       	pop	r0
    4b86:	0f 90       	pop	r0
    4b88:	0f 90       	pop	r0
    4b8a:	22 c0       	rjmp	.+68     	; 0x4bd0 <move_MOTOR_CMD+0x2ce>
	}

	if (newPosition < currentPosition) {
    4b8c:	65 96       	adiw	r28, 0x15	; 21
    4b8e:	8c ad       	ldd	r24, Y+60	; 0x3c
    4b90:	9d ad       	ldd	r25, Y+61	; 0x3d
    4b92:	ae ad       	ldd	r26, Y+62	; 0x3e
    4b94:	bf ad       	ldd	r27, Y+63	; 0x3f
    4b96:	65 97       	sbiw	r28, 0x15	; 21
    4b98:	88 16       	cp	r8, r24
    4b9a:	99 06       	cpc	r9, r25
    4b9c:	aa 06       	cpc	r10, r26
    4b9e:	bb 06       	cpc	r11, r27
    4ba0:	34 f4       	brge	.+12     	; 0x4bae <move_MOTOR_CMD+0x2ac>
		motorDir[controller - MOTOR_A] = MTRDIRNEGATIVE;
    4ba2:	f8 01       	movw	r30, r16
    4ba4:	e3 5c       	subi	r30, 0xC3	; 195
    4ba6:	f5 4d       	sbci	r31, 0xD5	; 213
    4ba8:	10 82       	st	Z, r1
	} else if (newPosition > currentPosition) {
		motorDir[controller - MOTOR_A] = MTRDIRPOSITIVE;
	}

	return(NOERROR);
    4baa:	f1 2c       	mov	r15, r1
    4bac:	11 c0       	rjmp	.+34     	; 0x4bd0 <move_MOTOR_CMD+0x2ce>
		return(ERROR);
	}

	if (newPosition < currentPosition) {
		motorDir[controller - MOTOR_A] = MTRDIRNEGATIVE;
	} else if (newPosition > currentPosition) {
    4bae:	88 15       	cp	r24, r8
    4bb0:	99 05       	cpc	r25, r9
    4bb2:	aa 05       	cpc	r26, r10
    4bb4:	bb 05       	cpc	r27, r11
    4bb6:	5c f4       	brge	.+22     	; 0x4bce <move_MOTOR_CMD+0x2cc>
		motorDir[controller - MOTOR_A] = MTRDIRPOSITIVE;
    4bb8:	f8 01       	movw	r30, r16
    4bba:	e3 5c       	subi	r30, 0xC3	; 195
    4bbc:	f5 4d       	sbci	r31, 0xD5	; 213
    4bbe:	81 e0       	ldi	r24, 0x01	; 1
    4bc0:	80 83       	st	Z, r24
	}

	return(NOERROR);
    4bc2:	f1 2c       	mov	r15, r1
    4bc4:	05 c0       	rjmp	.+10     	; 0x4bd0 <move_MOTOR_CMD+0x2ce>
	const char fmt1[] = "move_MOTOR_CMD: unknown motor";
	const char fmt2[] = "move_MOTOR_CMD: move_MOTOR error";
	const char fmt3[] = "move_MOTOR_CMD: move_MOTORS_PISTON error";

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
		return(NOERROR);
    4bc6:	f1 2c       	mov	r15, r1
    4bc8:	03 c0       	rjmp	.+6      	; 0x4bd0 <move_MOTOR_CMD+0x2ce>
			if (move_MOTORS_PISTON(deltaPos) == ERROR) {
				sprintf(strbuf, fmt3);
				printError(ERR_MTR, strbuf);
				return(ERROR);
			}
			return(NOERROR);
    4bca:	f1 2c       	mov	r15, r1
    4bcc:	01 c0       	rjmp	.+2      	; 0x4bd0 <move_MOTOR_CMD+0x2ce>
		motorDir[controller - MOTOR_A] = MTRDIRNEGATIVE;
	} else if (newPosition > currentPosition) {
		motorDir[controller - MOTOR_A] = MTRDIRPOSITIVE;
	}

	return(NOERROR);
    4bce:	f1 2c       	mov	r15, r1

}
    4bd0:	8f 2d       	mov	r24, r15
    4bd2:	cc 51       	subi	r28, 0x1C	; 28
    4bd4:	df 4f       	sbci	r29, 0xFF	; 255
    4bd6:	cd bf       	out	0x3d, r28	; 61
    4bd8:	de bf       	out	0x3e, r29	; 62
    4bda:	df 91       	pop	r29
    4bdc:	cf 91       	pop	r28
    4bde:	1f 91       	pop	r17
    4be0:	0f 91       	pop	r16
    4be2:	ff 90       	pop	r15
    4be4:	ef 90       	pop	r14
    4be6:	bf 90       	pop	r11
    4be8:	af 90       	pop	r10
    4bea:	9f 90       	pop	r9
    4bec:	8f 90       	pop	r8
    4bee:	08 95       	ret

00004bf0 <put_MOTOR_ENCODER>:
	Returns:
		ERROR:		If put_MOTOR returns an error
		NOERROR:	Otherwise
------------------------------------------------------------------------------*/
uint8_t put_MOTOR_ENCODER(uint8_t mtraddr, int32_t encoderValue)
{
    4bf0:	ef 92       	push	r14
    4bf2:	ff 92       	push	r15
    4bf4:	0f 93       	push	r16
    4bf6:	1f 93       	push	r17
    4bf8:	cf 93       	push	r28
    4bfa:	df 93       	push	r29
    4bfc:	cd b7       	in	r28, 0x3d	; 61
    4bfe:	de b7       	in	r29, 0x3e	; 62
    4c00:	cd 57       	subi	r28, 0x7D	; 125
    4c02:	d1 09       	sbc	r29, r1
    4c04:	cd bf       	out	0x3d, r28	; 61
    4c06:	de bf       	out	0x3e, r29	; 62
    4c08:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_ENCODER: put_MOTOR error on %c";
    4c0a:	89 e2       	ldi	r24, 0x29	; 41
    4c0c:	e9 e6       	ldi	r30, 0x69	; 105
    4c0e:	fc eb       	ldi	r31, 0xBC	; 188
    4c10:	de 01       	movw	r26, r28
    4c12:	11 96       	adiw	r26, 0x01	; 1
    4c14:	01 90       	ld	r0, Z+
    4c16:	0d 92       	st	X+, r0
    4c18:	8a 95       	dec	r24
    4c1a:	e1 f7       	brne	.-8      	; 0x4c14 <put_MOTOR_ENCODER+0x24>
	char strbuf[80];
	uint8_t data[4];

	data[0] = (encoderValue >> 24) & 0xFF;
    4c1c:	eb 96       	adiw	r28, 0x3b	; 59
    4c1e:	7f af       	std	Y+63, r23	; 0x3f
    4c20:	eb 97       	sbiw	r28, 0x3b	; 59
	data[1] = (encoderValue >> 16) & 0xFF;
    4c22:	ec 96       	adiw	r28, 0x3c	; 60
    4c24:	6f af       	std	Y+63, r22	; 0x3f
    4c26:	ec 97       	sbiw	r28, 0x3c	; 60
	data[2] = (encoderValue >> 8) & 0xFF;
    4c28:	ed 96       	adiw	r28, 0x3d	; 61
    4c2a:	5f af       	std	Y+63, r21	; 0x3f
    4c2c:	ed 97       	sbiw	r28, 0x3d	; 61
	data[3] = encoderValue & 0xFF;
    4c2e:	ee 96       	adiw	r28, 0x3e	; 62
    4c30:	4f af       	std	Y+63, r20	; 0x3f
    4c32:	ee 97       	sbiw	r28, 0x3e	; 62

	if (put_MOTOR(mtraddr, PUTENCODER, data, 4) == ERROR) {
    4c34:	24 e0       	ldi	r18, 0x04	; 4
    4c36:	ae 01       	movw	r20, r28
    4c38:	46 58       	subi	r20, 0x86	; 134
    4c3a:	5f 4f       	sbci	r21, 0xFF	; 255
    4c3c:	66 e1       	ldi	r22, 0x16	; 22
    4c3e:	80 2f       	mov	r24, r16
    4c40:	0e 94 ef 21 	call	0x43de	; 0x43de <put_MOTOR>
    4c44:	18 2f       	mov	r17, r24
    4c46:	83 36       	cpi	r24, 0x63	; 99
    4c48:	d9 f4       	brne	.+54     	; 0x4c80 <put_MOTOR_ENCODER+0x90>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    4c4a:	0f 53       	subi	r16, 0x3F	; 63
    4c4c:	1f 92       	push	r1
    4c4e:	0f 93       	push	r16
    4c50:	ce 01       	movw	r24, r28
    4c52:	01 96       	adiw	r24, 0x01	; 1
    4c54:	9f 93       	push	r25
    4c56:	8f 93       	push	r24
    4c58:	7e 01       	movw	r14, r28
    4c5a:	8a e2       	ldi	r24, 0x2A	; 42
    4c5c:	e8 0e       	add	r14, r24
    4c5e:	f1 1c       	adc	r15, r1
    4c60:	ff 92       	push	r15
    4c62:	ef 92       	push	r14
    4c64:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
		printError(ERR_MTR, strbuf);
    4c68:	b7 01       	movw	r22, r14
    4c6a:	86 e3       	ldi	r24, 0x36	; 54
    4c6c:	91 e0       	ldi	r25, 0x01	; 1
    4c6e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    4c72:	0f 90       	pop	r0
    4c74:	0f 90       	pop	r0
    4c76:	0f 90       	pop	r0
    4c78:	0f 90       	pop	r0
    4c7a:	0f 90       	pop	r0
    4c7c:	0f 90       	pop	r0
    4c7e:	01 c0       	rjmp	.+2      	; 0x4c82 <put_MOTOR_ENCODER+0x92>
	}

	return(NOERROR);
    4c80:	10 e0       	ldi	r17, 0x00	; 0

}
    4c82:	81 2f       	mov	r24, r17
    4c84:	c3 58       	subi	r28, 0x83	; 131
    4c86:	df 4f       	sbci	r29, 0xFF	; 255
    4c88:	cd bf       	out	0x3d, r28	; 61
    4c8a:	de bf       	out	0x3e, r29	; 62
    4c8c:	df 91       	pop	r29
    4c8e:	cf 91       	pop	r28
    4c90:	1f 91       	pop	r17
    4c92:	0f 91       	pop	r16
    4c94:	ff 90       	pop	r15
    4c96:	ef 90       	pop	r14
    4c98:	08 95       	ret

00004c9a <init_MOTORS>:
		NOERROR otherwise

ADD ERROR CHECKS?
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    4c9a:	0f 93       	push	r16
    4c9c:	1f 93       	push	r17
    4c9e:	cf 93       	push	r28
    4ca0:	df 93       	push	r29
    4ca2:	00 d0       	rcall	.+0      	; 0x4ca4 <init_MOTORS+0xa>
    4ca4:	00 d0       	rcall	.+0      	; 0x4ca6 <init_MOTORS+0xc>
    4ca6:	cd b7       	in	r28, 0x3d	; 61
    4ca8:	de b7       	in	r29, 0x3e	; 62
    4caa:	2f e3       	ldi	r18, 0x3F	; 63
    4cac:	8d e0       	ldi	r24, 0x0D	; 13
    4cae:	93 e0       	ldi	r25, 0x03	; 3
    4cb0:	21 50       	subi	r18, 0x01	; 1
    4cb2:	80 40       	sbci	r24, 0x00	; 0
    4cb4:	90 40       	sbci	r25, 0x00	; 0
    4cb6:	e1 f7       	brne	.-8      	; 0x4cb0 <init_MOTORS+0x16>
    4cb8:	00 c0       	rjmp	.+0      	; 0x4cba <init_MOTORS+0x20>
    4cba:	00 00       	nop

	uint8_t i, mtraddr;
	int32_t encoderValue;

	_delay_ms(100);		// Wait to boot up
	timerSAVEENCODER = 0;
    4cbc:	10 92 3c 2a 	sts	0x2A3C, r1	; 0x802a3c <timerSAVEENCODER>
	timeoutSAVEENCODER = SAVEENCODERPERIOD;
    4cc0:	84 e0       	ldi	r24, 0x04	; 4
    4cc2:	80 93 3b 2a 	sts	0x2A3B, r24	; 0x802a3b <timeoutSAVEENCODER>

	for (i = 0; i < NMOTORS; i++) {
    4cc6:	10 e0       	ldi	r17, 0x00	; 0
    4cc8:	1b c0       	rjmp	.+54     	; 0x4d00 <init_MOTORS+0x66>
		motorDir[i] = MTRDIRUNKNOWN;
    4cca:	81 2f       	mov	r24, r17
    4ccc:	90 e0       	ldi	r25, 0x00	; 0
    4cce:	fc 01       	movw	r30, r24
    4cd0:	e3 5c       	subi	r30, 0xC3	; 195
    4cd2:	f5 4d       	sbci	r31, 0xD5	; 213
    4cd4:	22 e0       	ldi	r18, 0x02	; 2
    4cd6:	20 83       	st	Z, r18
		motorLim[i] = MTRLIMUNKNOWN;
    4cd8:	fc 01       	movw	r30, r24
    4cda:	e0 5c       	subi	r30, 0xC0	; 192
    4cdc:	f5 4d       	sbci	r31, 0xD5	; 213
    4cde:	10 82       	st	Z, r1
		mtraddr = i + MOTOR_A;
    4ce0:	00 e8       	ldi	r16, 0x80	; 128
    4ce2:	01 0f       	add	r16, r17
		get_FRAM_MOTOR_ENCODER(mtraddr, &encoderValue);
    4ce4:	be 01       	movw	r22, r28
    4ce6:	6f 5f       	subi	r22, 0xFF	; 255
    4ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    4cea:	80 2f       	mov	r24, r16
    4cec:	0e 94 c1 19 	call	0x3382	; 0x3382 <get_FRAM_MOTOR_ENCODER>
		put_MOTOR_ENCODER(mtraddr, encoderValue);
    4cf0:	49 81       	ldd	r20, Y+1	; 0x01
    4cf2:	5a 81       	ldd	r21, Y+2	; 0x02
    4cf4:	6b 81       	ldd	r22, Y+3	; 0x03
    4cf6:	7c 81       	ldd	r23, Y+4	; 0x04
    4cf8:	80 2f       	mov	r24, r16
    4cfa:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <put_MOTOR_ENCODER>

	_delay_ms(100);		// Wait to boot up
	timerSAVEENCODER = 0;
	timeoutSAVEENCODER = SAVEENCODERPERIOD;

	for (i = 0; i < NMOTORS; i++) {
    4cfe:	1f 5f       	subi	r17, 0xFF	; 255
    4d00:	13 30       	cpi	r17, 0x03	; 3
    4d02:	18 f3       	brcs	.-58     	; 0x4cca <init_MOTORS+0x30>
		put_MOTOR_ENCODER(mtraddr, encoderValue);
	}

	return(NOERROR);

}
    4d04:	80 e0       	ldi	r24, 0x00	; 0
    4d06:	24 96       	adiw	r28, 0x04	; 4
    4d08:	cd bf       	out	0x3d, r28	; 61
    4d0a:	de bf       	out	0x3e, r29	; 62
    4d0c:	df 91       	pop	r29
    4d0e:	cf 91       	pop	r28
    4d10:	1f 91       	pop	r17
    4d12:	0f 91       	pop	r16
    4d14:	08 95       	ret

00004d16 <put_MOTOR_PID>:
		ERROR:		If put_MOTOR returns an error
		NOERROR:	Otherwise
------------------------------------------------------------------------------*/

uint8_t put_MOTOR_PID(uint8_t mtraddr, PID pid)
{
    4d16:	9f 92       	push	r9
    4d18:	af 92       	push	r10
    4d1a:	bf 92       	push	r11
    4d1c:	cf 92       	push	r12
    4d1e:	df 92       	push	r13
    4d20:	ef 92       	push	r14
    4d22:	ff 92       	push	r15
    4d24:	0f 93       	push	r16
    4d26:	1f 93       	push	r17
    4d28:	cf 93       	push	r28
    4d2a:	df 93       	push	r29
    4d2c:	cd b7       	in	r28, 0x3d	; 61
    4d2e:	de b7       	in	r29, 0x3e	; 62
    4d30:	cf 5b       	subi	r28, 0xBF	; 191
    4d32:	d1 09       	sbc	r29, r1
    4d34:	cd bf       	out	0x3d, r28	; 61
    4d36:	de bf       	out	0x3e, r29	; 62
    4d38:	08 2f       	mov	r16, r24

	const char fmt1[] = "put_MOTOR_PID: put_MOTOR error pid on %c";
    4d3a:	89 e2       	ldi	r24, 0x29	; 41
    4d3c:	e2 e9       	ldi	r30, 0x92	; 146
    4d3e:	fc eb       	ldi	r31, 0xBC	; 188
    4d40:	de 01       	movw	r26, r28
    4d42:	11 96       	adiw	r26, 0x01	; 1
    4d44:	01 90       	ld	r0, Z+
    4d46:	0d 92       	st	X+, r0
    4d48:	8a 95       	dec	r24
    4d4a:	e1 f7       	brne	.-8      	; 0x4d44 <put_MOTOR_PID+0x2e>
	const char fmt2[] = "put_MOTOR_PID: put_MOTOR error qpps on %c";
    4d4c:	8a e2       	ldi	r24, 0x2A	; 42
    4d4e:	eb eb       	ldi	r30, 0xBB	; 187
    4d50:	fc eb       	ldi	r31, 0xBC	; 188
    4d52:	de 01       	movw	r26, r28
    4d54:	9a 96       	adiw	r26, 0x2a	; 42
    4d56:	01 90       	ld	r0, Z+
    4d58:	0d 92       	st	X+, r0
    4d5a:	8a 95       	dec	r24
    4d5c:	e1 f7       	brne	.-8      	; 0x4d56 <put_MOTOR_PID+0x40>
	char strbuf[80];
	uint8_t data[28];
	int32_t p, i, d;

	p = (int32_t) (pid.p * 1024.0);
    4d5e:	c3 53       	subi	r28, 0x33	; 51
    4d60:	df 4f       	sbci	r29, 0xFF	; 255
    4d62:	68 81       	ld	r22, Y
    4d64:	79 81       	ldd	r23, Y+1	; 0x01
    4d66:	8a 81       	ldd	r24, Y+2	; 0x02
    4d68:	9b 81       	ldd	r25, Y+3	; 0x03
    4d6a:	cd 5c       	subi	r28, 0xCD	; 205
    4d6c:	d0 40       	sbci	r29, 0x00	; 0
    4d6e:	20 e0       	ldi	r18, 0x00	; 0
    4d70:	30 e0       	ldi	r19, 0x00	; 0
    4d72:	40 e8       	ldi	r20, 0x80	; 128
    4d74:	54 e4       	ldi	r21, 0x44	; 68
    4d76:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
    4d7a:	0e 94 2d 31 	call	0x625a	; 0x625a <__fixsfsi>
    4d7e:	c6 2e       	mov	r12, r22
    4d80:	b7 2e       	mov	r11, r23
    4d82:	a8 2e       	mov	r10, r24
    4d84:	99 2e       	mov	r9, r25
	i = (int32_t) (pid.i * 1024.0);
    4d86:	cf 52       	subi	r28, 0x2F	; 47
    4d88:	df 4f       	sbci	r29, 0xFF	; 255
    4d8a:	68 81       	ld	r22, Y
    4d8c:	79 81       	ldd	r23, Y+1	; 0x01
    4d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d90:	9b 81       	ldd	r25, Y+3	; 0x03
    4d92:	c1 5d       	subi	r28, 0xD1	; 209
    4d94:	d0 40       	sbci	r29, 0x00	; 0
    4d96:	20 e0       	ldi	r18, 0x00	; 0
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	40 e8       	ldi	r20, 0x80	; 128
    4d9c:	54 e4       	ldi	r21, 0x44	; 68
    4d9e:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
    4da2:	0e 94 2d 31 	call	0x625a	; 0x625a <__fixsfsi>
    4da6:	16 2f       	mov	r17, r22
    4da8:	f7 2e       	mov	r15, r23
    4daa:	e8 2e       	mov	r14, r24
    4dac:	d9 2e       	mov	r13, r25
	d = (int32_t) (pid.d * 1024.0);
    4dae:	cb 52       	subi	r28, 0x2B	; 43
    4db0:	df 4f       	sbci	r29, 0xFF	; 255
    4db2:	68 81       	ld	r22, Y
    4db4:	79 81       	ldd	r23, Y+1	; 0x01
    4db6:	8a 81       	ldd	r24, Y+2	; 0x02
    4db8:	9b 81       	ldd	r25, Y+3	; 0x03
    4dba:	c5 5d       	subi	r28, 0xD5	; 213
    4dbc:	d0 40       	sbci	r29, 0x00	; 0
    4dbe:	20 e0       	ldi	r18, 0x00	; 0
    4dc0:	30 e0       	ldi	r19, 0x00	; 0
    4dc2:	40 e8       	ldi	r20, 0x80	; 128
    4dc4:	54 e4       	ldi	r21, 0x44	; 68
    4dc6:	0e 94 15 32 	call	0x642a	; 0x642a <__mulsf3>
    4dca:	0e 94 2d 31 	call	0x625a	; 0x625a <__fixsfsi>

	data[0] = (d >> 24) & 0xFF;
    4dce:	cc 55       	subi	r28, 0x5C	; 92
    4dd0:	df 4f       	sbci	r29, 0xFF	; 255
    4dd2:	98 83       	st	Y, r25
    4dd4:	c4 5a       	subi	r28, 0xA4	; 164
    4dd6:	d0 40       	sbci	r29, 0x00	; 0
	data[1] = (d >> 16) & 0xFF;
    4dd8:	cb 55       	subi	r28, 0x5B	; 91
    4dda:	df 4f       	sbci	r29, 0xFF	; 255
    4ddc:	88 83       	st	Y, r24
    4dde:	c5 5a       	subi	r28, 0xA5	; 165
    4de0:	d0 40       	sbci	r29, 0x00	; 0
	data[2] = (d >> 8) & 0xFF;
    4de2:	ca 55       	subi	r28, 0x5A	; 90
    4de4:	df 4f       	sbci	r29, 0xFF	; 255
    4de6:	78 83       	st	Y, r23
    4de8:	c6 5a       	subi	r28, 0xA6	; 166
    4dea:	d0 40       	sbci	r29, 0x00	; 0
	data[3] = d & 0xFF;
    4dec:	c9 55       	subi	r28, 0x59	; 89
    4dee:	df 4f       	sbci	r29, 0xFF	; 255
    4df0:	68 83       	st	Y, r22
    4df2:	c7 5a       	subi	r28, 0xA7	; 167
    4df4:	d0 40       	sbci	r29, 0x00	; 0
	data[4] = (p >> 24) & 0xFF;
    4df6:	c8 55       	subi	r28, 0x58	; 88
    4df8:	df 4f       	sbci	r29, 0xFF	; 255
    4dfa:	98 82       	st	Y, r9
    4dfc:	c8 5a       	subi	r28, 0xA8	; 168
    4dfe:	d0 40       	sbci	r29, 0x00	; 0
	data[5] = (p >> 16) & 0xFF;
    4e00:	c7 55       	subi	r28, 0x57	; 87
    4e02:	df 4f       	sbci	r29, 0xFF	; 255
    4e04:	a8 82       	st	Y, r10
    4e06:	c9 5a       	subi	r28, 0xA9	; 169
    4e08:	d0 40       	sbci	r29, 0x00	; 0
	data[6] = (p >> 8) & 0xFF;
    4e0a:	c6 55       	subi	r28, 0x56	; 86
    4e0c:	df 4f       	sbci	r29, 0xFF	; 255
    4e0e:	b8 82       	st	Y, r11
    4e10:	ca 5a       	subi	r28, 0xAA	; 170
    4e12:	d0 40       	sbci	r29, 0x00	; 0
	data[7] = p & 0xFF;
    4e14:	c5 55       	subi	r28, 0x55	; 85
    4e16:	df 4f       	sbci	r29, 0xFF	; 255
    4e18:	c8 82       	st	Y, r12
    4e1a:	cb 5a       	subi	r28, 0xAB	; 171
    4e1c:	d0 40       	sbci	r29, 0x00	; 0
	data[8] = (i >> 24) & 0xFF;
    4e1e:	c4 55       	subi	r28, 0x54	; 84
    4e20:	df 4f       	sbci	r29, 0xFF	; 255
    4e22:	d8 82       	st	Y, r13
    4e24:	cc 5a       	subi	r28, 0xAC	; 172
    4e26:	d0 40       	sbci	r29, 0x00	; 0
	data[9] = (i >> 16) & 0xFF;
    4e28:	c3 55       	subi	r28, 0x53	; 83
    4e2a:	df 4f       	sbci	r29, 0xFF	; 255
    4e2c:	e8 82       	st	Y, r14
    4e2e:	cd 5a       	subi	r28, 0xAD	; 173
    4e30:	d0 40       	sbci	r29, 0x00	; 0
	data[10] = (i >> 8) & 0xFF;
    4e32:	c2 55       	subi	r28, 0x52	; 82
    4e34:	df 4f       	sbci	r29, 0xFF	; 255
    4e36:	f8 82       	st	Y, r15
    4e38:	ce 5a       	subi	r28, 0xAE	; 174
    4e3a:	d0 40       	sbci	r29, 0x00	; 0
	data[11] = i & 0xFF;
    4e3c:	c1 55       	subi	r28, 0x51	; 81
    4e3e:	df 4f       	sbci	r29, 0xFF	; 255
    4e40:	18 83       	st	Y, r17
    4e42:	cf 5a       	subi	r28, 0xAF	; 175
    4e44:	d0 40       	sbci	r29, 0x00	; 0
	data[12] = (pid.maxI >> 24) & 0xFF;
    4e46:	c7 52       	subi	r28, 0x27	; 39
    4e48:	df 4f       	sbci	r29, 0xFF	; 255
    4e4a:	88 81       	ld	r24, Y
    4e4c:	c9 5d       	subi	r28, 0xD9	; 217
    4e4e:	d0 40       	sbci	r29, 0x00	; 0
    4e50:	c6 52       	subi	r28, 0x26	; 38
    4e52:	df 4f       	sbci	r29, 0xFF	; 255
    4e54:	98 81       	ld	r25, Y
    4e56:	ca 5d       	subi	r28, 0xDA	; 218
    4e58:	d0 40       	sbci	r29, 0x00	; 0
    4e5a:	c5 52       	subi	r28, 0x25	; 37
    4e5c:	df 4f       	sbci	r29, 0xFF	; 255
    4e5e:	28 81       	ld	r18, Y
    4e60:	cb 5d       	subi	r28, 0xDB	; 219
    4e62:	d0 40       	sbci	r29, 0x00	; 0
    4e64:	c4 52       	subi	r28, 0x24	; 36
    4e66:	df 4f       	sbci	r29, 0xFF	; 255
    4e68:	38 81       	ld	r19, Y
    4e6a:	cc 5d       	subi	r28, 0xDC	; 220
    4e6c:	d0 40       	sbci	r29, 0x00	; 0
    4e6e:	c0 55       	subi	r28, 0x50	; 80
    4e70:	df 4f       	sbci	r29, 0xFF	; 255
    4e72:	38 83       	st	Y, r19
    4e74:	c0 5b       	subi	r28, 0xB0	; 176
    4e76:	d0 40       	sbci	r29, 0x00	; 0
	data[13] = (pid.maxI >> 16) & 0xFF;
    4e78:	cf 54       	subi	r28, 0x4F	; 79
    4e7a:	df 4f       	sbci	r29, 0xFF	; 255
    4e7c:	28 83       	st	Y, r18
    4e7e:	c1 5b       	subi	r28, 0xB1	; 177
    4e80:	d0 40       	sbci	r29, 0x00	; 0
	data[14] = (pid.maxI >> 8) & 0xFF;
    4e82:	ce 54       	subi	r28, 0x4E	; 78
    4e84:	df 4f       	sbci	r29, 0xFF	; 255
    4e86:	98 83       	st	Y, r25
    4e88:	c2 5b       	subi	r28, 0xB2	; 178
    4e8a:	d0 40       	sbci	r29, 0x00	; 0
	data[15] = pid.maxI & 0xFF;
    4e8c:	cd 54       	subi	r28, 0x4D	; 77
    4e8e:	df 4f       	sbci	r29, 0xFF	; 255
    4e90:	88 83       	st	Y, r24
    4e92:	c3 5b       	subi	r28, 0xB3	; 179
    4e94:	d0 40       	sbci	r29, 0x00	; 0
	data[16] = (pid.deadZone >> 24) & 0xFF;
    4e96:	c3 52       	subi	r28, 0x23	; 35
    4e98:	df 4f       	sbci	r29, 0xFF	; 255
    4e9a:	88 81       	ld	r24, Y
    4e9c:	cd 5d       	subi	r28, 0xDD	; 221
    4e9e:	d0 40       	sbci	r29, 0x00	; 0
    4ea0:	c2 52       	subi	r28, 0x22	; 34
    4ea2:	df 4f       	sbci	r29, 0xFF	; 255
    4ea4:	98 81       	ld	r25, Y
    4ea6:	ce 5d       	subi	r28, 0xDE	; 222
    4ea8:	d0 40       	sbci	r29, 0x00	; 0
    4eaa:	c1 52       	subi	r28, 0x21	; 33
    4eac:	df 4f       	sbci	r29, 0xFF	; 255
    4eae:	28 81       	ld	r18, Y
    4eb0:	cf 5d       	subi	r28, 0xDF	; 223
    4eb2:	d0 40       	sbci	r29, 0x00	; 0
    4eb4:	c0 52       	subi	r28, 0x20	; 32
    4eb6:	df 4f       	sbci	r29, 0xFF	; 255
    4eb8:	38 81       	ld	r19, Y
    4eba:	c0 5e       	subi	r28, 0xE0	; 224
    4ebc:	d0 40       	sbci	r29, 0x00	; 0
    4ebe:	cc 54       	subi	r28, 0x4C	; 76
    4ec0:	df 4f       	sbci	r29, 0xFF	; 255
    4ec2:	38 83       	st	Y, r19
    4ec4:	c4 5b       	subi	r28, 0xB4	; 180
    4ec6:	d0 40       	sbci	r29, 0x00	; 0
	data[17] = (pid.deadZone >> 16) & 0xFF;
    4ec8:	cb 54       	subi	r28, 0x4B	; 75
    4eca:	df 4f       	sbci	r29, 0xFF	; 255
    4ecc:	28 83       	st	Y, r18
    4ece:	c5 5b       	subi	r28, 0xB5	; 181
    4ed0:	d0 40       	sbci	r29, 0x00	; 0
	data[18] = (pid.deadZone >> 8) & 0xFF;
    4ed2:	ca 54       	subi	r28, 0x4A	; 74
    4ed4:	df 4f       	sbci	r29, 0xFF	; 255
    4ed6:	98 83       	st	Y, r25
    4ed8:	c6 5b       	subi	r28, 0xB6	; 182
    4eda:	d0 40       	sbci	r29, 0x00	; 0
	data[19] = pid.deadZone & 0xFF;
    4edc:	c9 54       	subi	r28, 0x49	; 73
    4ede:	df 4f       	sbci	r29, 0xFF	; 255
    4ee0:	88 83       	st	Y, r24
    4ee2:	c7 5b       	subi	r28, 0xB7	; 183
    4ee4:	d0 40       	sbci	r29, 0x00	; 0
	data[20] = (pid.minPos >> 24) & 0xFF;
    4ee6:	cf 51       	subi	r28, 0x1F	; 31
    4ee8:	df 4f       	sbci	r29, 0xFF	; 255
    4eea:	88 81       	ld	r24, Y
    4eec:	c1 5e       	subi	r28, 0xE1	; 225
    4eee:	d0 40       	sbci	r29, 0x00	; 0
    4ef0:	ce 51       	subi	r28, 0x1E	; 30
    4ef2:	df 4f       	sbci	r29, 0xFF	; 255
    4ef4:	98 81       	ld	r25, Y
    4ef6:	c2 5e       	subi	r28, 0xE2	; 226
    4ef8:	d0 40       	sbci	r29, 0x00	; 0
    4efa:	cd 51       	subi	r28, 0x1D	; 29
    4efc:	df 4f       	sbci	r29, 0xFF	; 255
    4efe:	28 81       	ld	r18, Y
    4f00:	c3 5e       	subi	r28, 0xE3	; 227
    4f02:	d0 40       	sbci	r29, 0x00	; 0
    4f04:	cc 51       	subi	r28, 0x1C	; 28
    4f06:	df 4f       	sbci	r29, 0xFF	; 255
    4f08:	38 81       	ld	r19, Y
    4f0a:	c4 5e       	subi	r28, 0xE4	; 228
    4f0c:	d0 40       	sbci	r29, 0x00	; 0
    4f0e:	c8 54       	subi	r28, 0x48	; 72
    4f10:	df 4f       	sbci	r29, 0xFF	; 255
    4f12:	38 83       	st	Y, r19
    4f14:	c8 5b       	subi	r28, 0xB8	; 184
    4f16:	d0 40       	sbci	r29, 0x00	; 0
	data[21] = (pid.minPos >> 16) & 0xFF;
    4f18:	c7 54       	subi	r28, 0x47	; 71
    4f1a:	df 4f       	sbci	r29, 0xFF	; 255
    4f1c:	28 83       	st	Y, r18
    4f1e:	c9 5b       	subi	r28, 0xB9	; 185
    4f20:	d0 40       	sbci	r29, 0x00	; 0
	data[22] = (pid.minPos >> 8) & 0xFF;
    4f22:	c6 54       	subi	r28, 0x46	; 70
    4f24:	df 4f       	sbci	r29, 0xFF	; 255
    4f26:	98 83       	st	Y, r25
    4f28:	ca 5b       	subi	r28, 0xBA	; 186
    4f2a:	d0 40       	sbci	r29, 0x00	; 0
	data[23] = pid.minPos & 0xFF;
    4f2c:	c5 54       	subi	r28, 0x45	; 69
    4f2e:	df 4f       	sbci	r29, 0xFF	; 255
    4f30:	88 83       	st	Y, r24
    4f32:	cb 5b       	subi	r28, 0xBB	; 187
    4f34:	d0 40       	sbci	r29, 0x00	; 0
	data[24] = (pid.maxPos >> 24) & 0xFF;
    4f36:	cb 51       	subi	r28, 0x1B	; 27
    4f38:	df 4f       	sbci	r29, 0xFF	; 255
    4f3a:	88 81       	ld	r24, Y
    4f3c:	c5 5e       	subi	r28, 0xE5	; 229
    4f3e:	d0 40       	sbci	r29, 0x00	; 0
    4f40:	ca 51       	subi	r28, 0x1A	; 26
    4f42:	df 4f       	sbci	r29, 0xFF	; 255
    4f44:	98 81       	ld	r25, Y
    4f46:	c6 5e       	subi	r28, 0xE6	; 230
    4f48:	d0 40       	sbci	r29, 0x00	; 0
    4f4a:	c9 51       	subi	r28, 0x19	; 25
    4f4c:	df 4f       	sbci	r29, 0xFF	; 255
    4f4e:	28 81       	ld	r18, Y
    4f50:	c7 5e       	subi	r28, 0xE7	; 231
    4f52:	d0 40       	sbci	r29, 0x00	; 0
    4f54:	c8 51       	subi	r28, 0x18	; 24
    4f56:	df 4f       	sbci	r29, 0xFF	; 255
    4f58:	38 81       	ld	r19, Y
    4f5a:	c8 5e       	subi	r28, 0xE8	; 232
    4f5c:	d0 40       	sbci	r29, 0x00	; 0
    4f5e:	c4 54       	subi	r28, 0x44	; 68
    4f60:	df 4f       	sbci	r29, 0xFF	; 255
    4f62:	38 83       	st	Y, r19
    4f64:	cc 5b       	subi	r28, 0xBC	; 188
    4f66:	d0 40       	sbci	r29, 0x00	; 0
	data[25] = (pid.maxPos >> 16) & 0xFF;
    4f68:	c3 54       	subi	r28, 0x43	; 67
    4f6a:	df 4f       	sbci	r29, 0xFF	; 255
    4f6c:	28 83       	st	Y, r18
    4f6e:	cd 5b       	subi	r28, 0xBD	; 189
    4f70:	d0 40       	sbci	r29, 0x00	; 0
	data[26] = (pid.maxPos >> 8) & 0xFF;
    4f72:	c2 54       	subi	r28, 0x42	; 66
    4f74:	df 4f       	sbci	r29, 0xFF	; 255
    4f76:	98 83       	st	Y, r25
    4f78:	ce 5b       	subi	r28, 0xBE	; 190
    4f7a:	d0 40       	sbci	r29, 0x00	; 0
	data[27] = pid.maxPos & 0xFF;
    4f7c:	c1 54       	subi	r28, 0x41	; 65
    4f7e:	df 4f       	sbci	r29, 0xFF	; 255
    4f80:	88 83       	st	Y, r24
    4f82:	cf 5b       	subi	r28, 0xBF	; 191
    4f84:	d0 40       	sbci	r29, 0x00	; 0

	if (put_MOTOR(mtraddr, SETPID, data, 28) == ERROR) {
    4f86:	2c e1       	ldi	r18, 0x1C	; 28
    4f88:	ae 01       	movw	r20, r28
    4f8a:	4c 55       	subi	r20, 0x5C	; 92
    4f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    4f8e:	6d e3       	ldi	r22, 0x3D	; 61
    4f90:	80 2f       	mov	r24, r16
    4f92:	0e 94 ef 21 	call	0x43de	; 0x43de <put_MOTOR>
    4f96:	18 2f       	mov	r17, r24
    4f98:	83 36       	cpi	r24, 0x63	; 99
    4f9a:	d9 f4       	brne	.+54     	; 0x4fd2 <put_MOTOR_PID+0x2bc>
		sprintf(strbuf, fmt1, (char) (mtraddr-63));
    4f9c:	0f 53       	subi	r16, 0x3F	; 63
    4f9e:	1f 92       	push	r1
    4fa0:	0f 93       	push	r16
    4fa2:	ce 01       	movw	r24, r28
    4fa4:	01 96       	adiw	r24, 0x01	; 1
    4fa6:	9f 93       	push	r25
    4fa8:	8f 93       	push	r24
    4faa:	7e 01       	movw	r14, r28
    4fac:	84 e5       	ldi	r24, 0x54	; 84
    4fae:	e8 0e       	add	r14, r24
    4fb0:	f1 1c       	adc	r15, r1
    4fb2:	ff 92       	push	r15
    4fb4:	ef 92       	push	r14
    4fb6:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
		printError(ERR_MTR, strbuf);
    4fba:	b7 01       	movw	r22, r14
    4fbc:	86 e3       	ldi	r24, 0x36	; 54
    4fbe:	91 e0       	ldi	r25, 0x01	; 1
    4fc0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    4fc4:	0f 90       	pop	r0
    4fc6:	0f 90       	pop	r0
    4fc8:	0f 90       	pop	r0
    4fca:	0f 90       	pop	r0
    4fcc:	0f 90       	pop	r0
    4fce:	0f 90       	pop	r0
    4fd0:	8b c0       	rjmp	.+278    	; 0x50e8 <put_MOTOR_PID+0x3d2>
	}

	data[0] = data[1] = data[2] = data[3] = 0;
    4fd2:	c9 55       	subi	r28, 0x59	; 89
    4fd4:	df 4f       	sbci	r29, 0xFF	; 255
    4fd6:	18 82       	st	Y, r1
    4fd8:	c7 5a       	subi	r28, 0xA7	; 167
    4fda:	d0 40       	sbci	r29, 0x00	; 0
    4fdc:	ca 55       	subi	r28, 0x5A	; 90
    4fde:	df 4f       	sbci	r29, 0xFF	; 255
    4fe0:	18 82       	st	Y, r1
    4fe2:	c6 5a       	subi	r28, 0xA6	; 166
    4fe4:	d0 40       	sbci	r29, 0x00	; 0
    4fe6:	cb 55       	subi	r28, 0x5B	; 91
    4fe8:	df 4f       	sbci	r29, 0xFF	; 255
    4fea:	18 82       	st	Y, r1
    4fec:	c5 5a       	subi	r28, 0xA5	; 165
    4fee:	d0 40       	sbci	r29, 0x00	; 0
    4ff0:	cc 55       	subi	r28, 0x5C	; 92
    4ff2:	df 4f       	sbci	r29, 0xFF	; 255
    4ff4:	18 82       	st	Y, r1
    4ff6:	c4 5a       	subi	r28, 0xA4	; 164
    4ff8:	d0 40       	sbci	r29, 0x00	; 0
	data[4] = data[5] = data[6] = data[7] = 0;
    4ffa:	c5 55       	subi	r28, 0x55	; 85
    4ffc:	df 4f       	sbci	r29, 0xFF	; 255
    4ffe:	18 82       	st	Y, r1
    5000:	cb 5a       	subi	r28, 0xAB	; 171
    5002:	d0 40       	sbci	r29, 0x00	; 0
    5004:	c6 55       	subi	r28, 0x56	; 86
    5006:	df 4f       	sbci	r29, 0xFF	; 255
    5008:	18 82       	st	Y, r1
    500a:	ca 5a       	subi	r28, 0xAA	; 170
    500c:	d0 40       	sbci	r29, 0x00	; 0
    500e:	c7 55       	subi	r28, 0x57	; 87
    5010:	df 4f       	sbci	r29, 0xFF	; 255
    5012:	18 82       	st	Y, r1
    5014:	c9 5a       	subi	r28, 0xA9	; 169
    5016:	d0 40       	sbci	r29, 0x00	; 0
    5018:	c8 55       	subi	r28, 0x58	; 88
    501a:	df 4f       	sbci	r29, 0xFF	; 255
    501c:	18 82       	st	Y, r1
    501e:	c8 5a       	subi	r28, 0xA8	; 168
    5020:	d0 40       	sbci	r29, 0x00	; 0
	data[8] = data[9] = data[10] = data[11] = 0;
    5022:	c1 55       	subi	r28, 0x51	; 81
    5024:	df 4f       	sbci	r29, 0xFF	; 255
    5026:	18 82       	st	Y, r1
    5028:	cf 5a       	subi	r28, 0xAF	; 175
    502a:	d0 40       	sbci	r29, 0x00	; 0
    502c:	c2 55       	subi	r28, 0x52	; 82
    502e:	df 4f       	sbci	r29, 0xFF	; 255
    5030:	18 82       	st	Y, r1
    5032:	ce 5a       	subi	r28, 0xAE	; 174
    5034:	d0 40       	sbci	r29, 0x00	; 0
    5036:	c3 55       	subi	r28, 0x53	; 83
    5038:	df 4f       	sbci	r29, 0xFF	; 255
    503a:	18 82       	st	Y, r1
    503c:	cd 5a       	subi	r28, 0xAD	; 173
    503e:	d0 40       	sbci	r29, 0x00	; 0
    5040:	c4 55       	subi	r28, 0x54	; 84
    5042:	df 4f       	sbci	r29, 0xFF	; 255
    5044:	18 82       	st	Y, r1
    5046:	cc 5a       	subi	r28, 0xAC	; 172
    5048:	d0 40       	sbci	r29, 0x00	; 0
	data[12] = (pid.qpps >> 24) & 0xFF;
    504a:	c7 51       	subi	r28, 0x17	; 23
    504c:	df 4f       	sbci	r29, 0xFF	; 255
    504e:	88 81       	ld	r24, Y
    5050:	c9 5e       	subi	r28, 0xE9	; 233
    5052:	d0 40       	sbci	r29, 0x00	; 0
    5054:	c6 51       	subi	r28, 0x16	; 22
    5056:	df 4f       	sbci	r29, 0xFF	; 255
    5058:	98 81       	ld	r25, Y
    505a:	ca 5e       	subi	r28, 0xEA	; 234
    505c:	d0 40       	sbci	r29, 0x00	; 0
    505e:	c5 51       	subi	r28, 0x15	; 21
    5060:	df 4f       	sbci	r29, 0xFF	; 255
    5062:	28 81       	ld	r18, Y
    5064:	cb 5e       	subi	r28, 0xEB	; 235
    5066:	d0 40       	sbci	r29, 0x00	; 0
    5068:	c4 51       	subi	r28, 0x14	; 20
    506a:	df 4f       	sbci	r29, 0xFF	; 255
    506c:	38 81       	ld	r19, Y
    506e:	cc 5e       	subi	r28, 0xEC	; 236
    5070:	d0 40       	sbci	r29, 0x00	; 0
    5072:	c0 55       	subi	r28, 0x50	; 80
    5074:	df 4f       	sbci	r29, 0xFF	; 255
    5076:	38 83       	st	Y, r19
    5078:	c0 5b       	subi	r28, 0xB0	; 176
    507a:	d0 40       	sbci	r29, 0x00	; 0
	data[13] = (pid.qpps >> 16) & 0xFF;
    507c:	cf 54       	subi	r28, 0x4F	; 79
    507e:	df 4f       	sbci	r29, 0xFF	; 255
    5080:	28 83       	st	Y, r18
    5082:	c1 5b       	subi	r28, 0xB1	; 177
    5084:	d0 40       	sbci	r29, 0x00	; 0
	data[14] = (pid.qpps >> 8) & 0xFF;
    5086:	ce 54       	subi	r28, 0x4E	; 78
    5088:	df 4f       	sbci	r29, 0xFF	; 255
    508a:	98 83       	st	Y, r25
    508c:	c2 5b       	subi	r28, 0xB2	; 178
    508e:	d0 40       	sbci	r29, 0x00	; 0
	data[15] = pid.qpps & 0xFF;
    5090:	cd 54       	subi	r28, 0x4D	; 77
    5092:	df 4f       	sbci	r29, 0xFF	; 255
    5094:	88 83       	st	Y, r24
    5096:	c3 5b       	subi	r28, 0xB3	; 179
    5098:	d0 40       	sbci	r29, 0x00	; 0

	if (put_MOTOR(mtraddr, SETQPPS, data, 16) == ERROR) {
    509a:	20 e1       	ldi	r18, 0x10	; 16
    509c:	ae 01       	movw	r20, r28
    509e:	4c 55       	subi	r20, 0x5C	; 92
    50a0:	5f 4f       	sbci	r21, 0xFF	; 255
    50a2:	6c e1       	ldi	r22, 0x1C	; 28
    50a4:	80 2f       	mov	r24, r16
    50a6:	0e 94 ef 21 	call	0x43de	; 0x43de <put_MOTOR>
    50aa:	18 2f       	mov	r17, r24
    50ac:	83 36       	cpi	r24, 0x63	; 99
    50ae:	d9 f4       	brne	.+54     	; 0x50e6 <put_MOTOR_PID+0x3d0>
		sprintf(strbuf, fmt2, (char) (mtraddr-63));
    50b0:	0f 53       	subi	r16, 0x3F	; 63
    50b2:	1f 92       	push	r1
    50b4:	0f 93       	push	r16
    50b6:	ce 01       	movw	r24, r28
    50b8:	8a 96       	adiw	r24, 0x2a	; 42
    50ba:	9f 93       	push	r25
    50bc:	8f 93       	push	r24
    50be:	7e 01       	movw	r14, r28
    50c0:	84 e5       	ldi	r24, 0x54	; 84
    50c2:	e8 0e       	add	r14, r24
    50c4:	f1 1c       	adc	r15, r1
    50c6:	ff 92       	push	r15
    50c8:	ef 92       	push	r14
    50ca:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
		printError(ERR_MTR, strbuf);
    50ce:	b7 01       	movw	r22, r14
    50d0:	86 e3       	ldi	r24, 0x36	; 54
    50d2:	91 e0       	ldi	r25, 0x01	; 1
    50d4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    50d8:	0f 90       	pop	r0
    50da:	0f 90       	pop	r0
    50dc:	0f 90       	pop	r0
    50de:	0f 90       	pop	r0
    50e0:	0f 90       	pop	r0
    50e2:	0f 90       	pop	r0
    50e4:	01 c0       	rjmp	.+2      	; 0x50e8 <put_MOTOR_PID+0x3d2>
	}

	return(NOERROR);
    50e6:	10 e0       	ldi	r17, 0x00	; 0
}
    50e8:	81 2f       	mov	r24, r17
    50ea:	c1 54       	subi	r28, 0x41	; 65
    50ec:	df 4f       	sbci	r29, 0xFF	; 255
    50ee:	cd bf       	out	0x3d, r28	; 61
    50f0:	de bf       	out	0x3e, r29	; 62
    50f2:	df 91       	pop	r29
    50f4:	cf 91       	pop	r28
    50f6:	1f 91       	pop	r17
    50f8:	0f 91       	pop	r16
    50fa:	ff 90       	pop	r15
    50fc:	ef 90       	pop	r14
    50fe:	df 90       	pop	r13
    5100:	cf 90       	pop	r12
    5102:	bf 90       	pop	r11
    5104:	af 90       	pop	r10
    5106:	9f 90       	pop	r9
    5108:	08 95       	ret

0000510a <unstick_MOTOR_LIMIT>:
	Returns:
		ERROR
		NOERROR
------------------------------------------------------------------------------*/
uint8_t unstick_MOTOR_LIMIT(uint8_t cstack)
{
    510a:	bf 92       	push	r11
    510c:	cf 92       	push	r12
    510e:	df 92       	push	r13
    5110:	ef 92       	push	r14
    5112:	ff 92       	push	r15
    5114:	0f 93       	push	r16
    5116:	1f 93       	push	r17
    5118:	cf 93       	push	r28
    511a:	df 93       	push	r29
    511c:	cd b7       	in	r28, 0x3d	; 61
    511e:	de b7       	in	r29, 0x3e	; 62
    5120:	c8 55       	subi	r28, 0x58	; 88
    5122:	d1 09       	sbc	r29, r1
    5124:	cd bf       	out	0x3d, r28	; 61
    5126:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	uint8_t i, mtraddr, mtrIndex, direction, stuck;
	int32_t encodervalue, encoderspeed, newPosition;

	mtraddr = pcmd[cstack].cobject + 31;	// 128, 129, or 130
    5128:	24 e3       	ldi	r18, 0x34	; 52
    512a:	82 9f       	mul	r24, r18
    512c:	c0 01       	movw	r24, r0
    512e:	11 24       	eor	r1, r1
    5130:	fc 01       	movw	r30, r24
    5132:	e1 5f       	subi	r30, 0xF1	; 241
    5134:	f7 4d       	sbci	r31, 0xD7	; 215
    5136:	e1 81       	ldd	r30, Z+1	; 0x01
    5138:	1f e1       	ldi	r17, 0x1F	; 31
    513a:	1e 0f       	add	r17, r30
	mtrIndex = mtraddr - MOTOR_A;
    513c:	e1 56       	subi	r30, 0x61	; 97
	direction = motorDir[mtrIndex];		// Save the most recent command direction
    513e:	f0 e0       	ldi	r31, 0x00	; 0
    5140:	e3 5c       	subi	r30, 0xC3	; 195
    5142:	f5 4d       	sbci	r31, 0xD5	; 213
    5144:	b0 80       	ld	r11, Z

//sprintf(strbuf, "mtraddr = %d, mtrIndex = %d, direction = %d", mtraddr, mtrIndex, direction);
//printLine(strbuf);

	if (get_MOTOR_LIMIT(mtraddr) == NO) {
    5146:	81 2f       	mov	r24, r17
    5148:	0e 94 be 20 	call	0x417c	; 0x417c <get_MOTOR_LIMIT>
    514c:	08 2f       	mov	r16, r24
    514e:	81 11       	cpse	r24, r1
    5150:	1c c0       	rjmp	.+56     	; 0x518a <unstick_MOTOR_LIMIT+0x80>
		sprintf(strbuf, "motor %c not stuck", mtraddr - 31);
    5152:	81 2f       	mov	r24, r17
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	4f 97       	sbiw	r24, 0x1f	; 31
    5158:	9f 93       	push	r25
    515a:	8f 93       	push	r24
    515c:	85 ee       	ldi	r24, 0xE5	; 229
    515e:	9c eb       	ldi	r25, 0xBC	; 188
    5160:	9f 93       	push	r25
    5162:	8f 93       	push	r24
    5164:	ce 01       	movw	r24, r28
    5166:	01 96       	adiw	r24, 0x01	; 1
    5168:	7c 01       	movw	r14, r24
    516a:	9f 93       	push	r25
    516c:	8f 93       	push	r24
    516e:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
		printError(ERR_MTR, strbuf);
    5172:	b7 01       	movw	r22, r14
    5174:	86 e3       	ldi	r24, 0x36	; 54
    5176:	91 e0       	ldi	r25, 0x01	; 1
    5178:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(NOERROR);
    517c:	0f 90       	pop	r0
    517e:	0f 90       	pop	r0
    5180:	0f 90       	pop	r0
    5182:	0f 90       	pop	r0
    5184:	0f 90       	pop	r0
    5186:	0f 90       	pop	r0
    5188:	b8 c0       	rjmp	.+368    	; 0x52fa <unstick_MOTOR_LIMIT+0x1f0>
	}

	stuck = YES;
	get_MOTOR_ENCODER(mtraddr, &encodervalue);
    518a:	be 01       	movw	r22, r28
    518c:	6f 5a       	subi	r22, 0xAF	; 175
    518e:	7f 4f       	sbci	r23, 0xFF	; 255
    5190:	81 2f       	mov	r24, r17
    5192:	0e 94 bd 1b 	call	0x377a	; 0x377a <get_MOTOR_ENCODER>

//sprintf(strbuf, "current position = %ld", encodervalue);
//printLine(strbuf);

	for (i = 0; i < 3; i++) {
    5196:	00 e0       	ldi	r16, 0x00	; 0
    5198:	7a c0       	rjmp	.+244    	; 0x528e <unstick_MOTOR_LIMIT+0x184>

		// Try the opposite direction first
		if (direction == MTRDIRNEGATIVE) {
    519a:	b1 10       	cpse	r11, r1
    519c:	0d c0       	rjmp	.+26     	; 0x51b8 <unstick_MOTOR_LIMIT+0xae>
			newPosition = encodervalue + 2 * ENC_COUNTS_PER_MICRON;
    519e:	65 96       	adiw	r28, 0x15	; 21
    51a0:	cc ac       	ldd	r12, Y+60	; 0x3c
    51a2:	dd ac       	ldd	r13, Y+61	; 0x3d
    51a4:	ee ac       	ldd	r14, Y+62	; 0x3e
    51a6:	ff ac       	ldd	r15, Y+63	; 0x3f
    51a8:	65 97       	sbiw	r28, 0x15	; 21
    51aa:	96 e3       	ldi	r25, 0x36	; 54
    51ac:	c9 0e       	add	r12, r25
    51ae:	92 e0       	ldi	r25, 0x02	; 2
    51b0:	d9 1e       	adc	r13, r25
    51b2:	e1 1c       	adc	r14, r1
    51b4:	f1 1c       	adc	r15, r1
    51b6:	0c c0       	rjmp	.+24     	; 0x51d0 <unstick_MOTOR_LIMIT+0xc6>
		} else {
			newPosition = encodervalue - 2 * ENC_COUNTS_PER_MICRON;			
    51b8:	65 96       	adiw	r28, 0x15	; 21
    51ba:	cc ac       	ldd	r12, Y+60	; 0x3c
    51bc:	dd ac       	ldd	r13, Y+61	; 0x3d
    51be:	ee ac       	ldd	r14, Y+62	; 0x3e
    51c0:	ff ac       	ldd	r15, Y+63	; 0x3f
    51c2:	65 97       	sbiw	r28, 0x15	; 21
    51c4:	26 e3       	ldi	r18, 0x36	; 54
    51c6:	c2 1a       	sub	r12, r18
    51c8:	22 e0       	ldi	r18, 0x02	; 2
    51ca:	d2 0a       	sbc	r13, r18
    51cc:	e1 08       	sbc	r14, r1
    51ce:	f1 08       	sbc	r15, r1
		}

//sprintf(strbuf, "moving to %ld", newPosition);
//printLine(strbuf);

		move_MOTOR(mtraddr, newPosition);
    51d0:	b7 01       	movw	r22, r14
    51d2:	a6 01       	movw	r20, r12
    51d4:	81 2f       	mov	r24, r17
    51d6:	0e 94 bd 22 	call	0x457a	; 0x457a <move_MOTOR>
		get_MOTOR_SPEED(mtraddr, &encoderspeed);
    51da:	be 01       	movw	r22, r28
    51dc:	6b 5a       	subi	r22, 0xAB	; 171
    51de:	7f 4f       	sbci	r23, 0xFF	; 255
    51e0:	81 2f       	mov	r24, r17
    51e2:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <get_MOTOR_SPEED>
		while (encoderspeed) {
    51e6:	06 c0       	rjmp	.+12     	; 0x51f4 <unstick_MOTOR_LIMIT+0xea>
			get_MOTOR_SPEED(mtraddr, &encoderspeed);
    51e8:	be 01       	movw	r22, r28
    51ea:	6b 5a       	subi	r22, 0xAB	; 171
    51ec:	7f 4f       	sbci	r23, 0xFF	; 255
    51ee:	81 2f       	mov	r24, r17
    51f0:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <get_MOTOR_SPEED>
//sprintf(strbuf, "moving to %ld", newPosition);
//printLine(strbuf);

		move_MOTOR(mtraddr, newPosition);
		get_MOTOR_SPEED(mtraddr, &encoderspeed);
		while (encoderspeed) {
    51f4:	69 96       	adiw	r28, 0x19	; 25
    51f6:	8c ad       	ldd	r24, Y+60	; 0x3c
    51f8:	9d ad       	ldd	r25, Y+61	; 0x3d
    51fa:	ae ad       	ldd	r26, Y+62	; 0x3e
    51fc:	bf ad       	ldd	r27, Y+63	; 0x3f
    51fe:	69 97       	sbiw	r28, 0x19	; 25
    5200:	89 2b       	or	r24, r25
    5202:	8a 2b       	or	r24, r26
    5204:	8b 2b       	or	r24, r27
    5206:	81 f7       	brne	.-32     	; 0x51e8 <unstick_MOTOR_LIMIT+0xde>
//printLine(strbuf);

		}
//		_delay_ms(3000);

		if (get_MOTOR_LIMIT(mtraddr) == NO) {
    5208:	81 2f       	mov	r24, r17
    520a:	0e 94 be 20 	call	0x417c	; 0x417c <get_MOTOR_LIMIT>
    520e:	88 23       	and	r24, r24
    5210:	09 f4       	brne	.+2      	; 0x5214 <unstick_MOTOR_LIMIT+0x10a>
    5212:	42 c0       	rjmp	.+132    	; 0x5298 <unstick_MOTOR_LIMIT+0x18e>
			stuck = NO;
			break;
		}

		// Try the same direction
		if (direction == MTRDIRNEGATIVE) {
    5214:	b1 10       	cpse	r11, r1
    5216:	0d c0       	rjmp	.+26     	; 0x5232 <unstick_MOTOR_LIMIT+0x128>
			newPosition = encodervalue - 2 * ENC_COUNTS_PER_MICRON;
    5218:	65 96       	adiw	r28, 0x15	; 21
    521a:	cc ac       	ldd	r12, Y+60	; 0x3c
    521c:	dd ac       	ldd	r13, Y+61	; 0x3d
    521e:	ee ac       	ldd	r14, Y+62	; 0x3e
    5220:	ff ac       	ldd	r15, Y+63	; 0x3f
    5222:	65 97       	sbiw	r28, 0x15	; 21
    5224:	86 e3       	ldi	r24, 0x36	; 54
    5226:	c8 1a       	sub	r12, r24
    5228:	82 e0       	ldi	r24, 0x02	; 2
    522a:	d8 0a       	sbc	r13, r24
    522c:	e1 08       	sbc	r14, r1
    522e:	f1 08       	sbc	r15, r1
    5230:	0c c0       	rjmp	.+24     	; 0x524a <unstick_MOTOR_LIMIT+0x140>
		} else {
			newPosition = encodervalue + 2 * ENC_COUNTS_PER_MICRON;
    5232:	65 96       	adiw	r28, 0x15	; 21
    5234:	cc ac       	ldd	r12, Y+60	; 0x3c
    5236:	dd ac       	ldd	r13, Y+61	; 0x3d
    5238:	ee ac       	ldd	r14, Y+62	; 0x3e
    523a:	ff ac       	ldd	r15, Y+63	; 0x3f
    523c:	65 97       	sbiw	r28, 0x15	; 21
    523e:	96 e3       	ldi	r25, 0x36	; 54
    5240:	c9 0e       	add	r12, r25
    5242:	92 e0       	ldi	r25, 0x02	; 2
    5244:	d9 1e       	adc	r13, r25
    5246:	e1 1c       	adc	r14, r1
    5248:	f1 1c       	adc	r15, r1
		}
		move_MOTOR(mtraddr, newPosition);
    524a:	b7 01       	movw	r22, r14
    524c:	a6 01       	movw	r20, r12
    524e:	81 2f       	mov	r24, r17
    5250:	0e 94 bd 22 	call	0x457a	; 0x457a <move_MOTOR>
		get_MOTOR_SPEED(mtraddr, &encoderspeed);
    5254:	be 01       	movw	r22, r28
    5256:	6b 5a       	subi	r22, 0xAB	; 171
    5258:	7f 4f       	sbci	r23, 0xFF	; 255
    525a:	81 2f       	mov	r24, r17
    525c:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <get_MOTOR_SPEED>
		while (encoderspeed) {
    5260:	06 c0       	rjmp	.+12     	; 0x526e <unstick_MOTOR_LIMIT+0x164>
			get_MOTOR_SPEED(mtraddr, &encoderspeed);
    5262:	be 01       	movw	r22, r28
    5264:	6b 5a       	subi	r22, 0xAB	; 171
    5266:	7f 4f       	sbci	r23, 0xFF	; 255
    5268:	81 2f       	mov	r24, r17
    526a:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <get_MOTOR_SPEED>
		} else {
			newPosition = encodervalue + 2 * ENC_COUNTS_PER_MICRON;
		}
		move_MOTOR(mtraddr, newPosition);
		get_MOTOR_SPEED(mtraddr, &encoderspeed);
		while (encoderspeed) {
    526e:	69 96       	adiw	r28, 0x19	; 25
    5270:	8c ad       	ldd	r24, Y+60	; 0x3c
    5272:	9d ad       	ldd	r25, Y+61	; 0x3d
    5274:	ae ad       	ldd	r26, Y+62	; 0x3e
    5276:	bf ad       	ldd	r27, Y+63	; 0x3f
    5278:	69 97       	sbiw	r28, 0x19	; 25
    527a:	89 2b       	or	r24, r25
    527c:	8a 2b       	or	r24, r26
    527e:	8b 2b       	or	r24, r27
    5280:	81 f7       	brne	.-32     	; 0x5262 <unstick_MOTOR_LIMIT+0x158>
//sprintf(strbuf, "encoderspeed = %ld", encoderspeed);
//printLine(strbuf);
		}
//		_delay_ms(2000);

		if (get_MOTOR_LIMIT(mtraddr) == NO) {
    5282:	81 2f       	mov	r24, r17
    5284:	0e 94 be 20 	call	0x417c	; 0x417c <get_MOTOR_LIMIT>
    5288:	88 23       	and	r24, r24
    528a:	41 f0       	breq	.+16     	; 0x529c <unstick_MOTOR_LIMIT+0x192>
	get_MOTOR_ENCODER(mtraddr, &encodervalue);

//sprintf(strbuf, "current position = %ld", encodervalue);
//printLine(strbuf);

	for (i = 0; i < 3; i++) {
    528c:	0f 5f       	subi	r16, 0xFF	; 255
    528e:	03 30       	cpi	r16, 0x03	; 3
    5290:	08 f4       	brcc	.+2      	; 0x5294 <unstick_MOTOR_LIMIT+0x18a>
    5292:	83 cf       	rjmp	.-250    	; 0x519a <unstick_MOTOR_LIMIT+0x90>
		sprintf(strbuf, "motor %c not stuck", mtraddr - 31);
		printError(ERR_MTR, strbuf);
		return(NOERROR);
	}

	stuck = YES;
    5294:	81 e0       	ldi	r24, 0x01	; 1
    5296:	03 c0       	rjmp	.+6      	; 0x529e <unstick_MOTOR_LIMIT+0x194>
//		_delay_ms(3000);

		if (get_MOTOR_LIMIT(mtraddr) == NO) {
//sprintf(strbuf, "unstuck at i=%d, opposite direction", i);
//printLine(strbuf);
			stuck = NO;
    5298:	80 e0       	ldi	r24, 0x00	; 0
    529a:	01 c0       	rjmp	.+2      	; 0x529e <unstick_MOTOR_LIMIT+0x194>
//		_delay_ms(2000);

		if (get_MOTOR_LIMIT(mtraddr) == NO) {
//sprintf(strbuf, "unstuck at i=%d, same direction", i);
//printLine(strbuf);
			stuck = NO;
    529c:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
	if (stuck == YES) {		// Tried 3 times and failed
    529e:	81 30       	cpi	r24, 0x01	; 1
    52a0:	59 f1       	breq	.+86     	; 0x52f8 <unstick_MOTOR_LIMIT+0x1ee>
//printLine(strbuf);
		return(ERROR);
	}

	// Move 200 um away
	get_MOTOR_ENCODER(mtraddr, &encodervalue);
    52a2:	be 01       	movw	r22, r28
    52a4:	6f 5a       	subi	r22, 0xAF	; 175
    52a6:	7f 4f       	sbci	r23, 0xFF	; 255
    52a8:	81 2f       	mov	r24, r17
    52aa:	0e 94 bd 1b 	call	0x377a	; 0x377a <get_MOTOR_ENCODER>
	if (direction == MTRDIRNEGATIVE) {
    52ae:	b1 10       	cpse	r11, r1
    52b0:	0d c0       	rjmp	.+26     	; 0x52cc <unstick_MOTOR_LIMIT+0x1c2>
		newPosition = encodervalue + 200L * ENC_COUNTS_PER_MICRON;
    52b2:	65 96       	adiw	r28, 0x15	; 21
    52b4:	cc ac       	ldd	r12, Y+60	; 0x3c
    52b6:	dd ac       	ldd	r13, Y+61	; 0x3d
    52b8:	ee ac       	ldd	r14, Y+62	; 0x3e
    52ba:	ff ac       	ldd	r15, Y+63	; 0x3f
    52bc:	65 97       	sbiw	r28, 0x15	; 21
    52be:	28 e1       	ldi	r18, 0x18	; 24
    52c0:	c2 0e       	add	r12, r18
    52c2:	2d ed       	ldi	r18, 0xDD	; 221
    52c4:	d2 1e       	adc	r13, r18
    52c6:	e1 1c       	adc	r14, r1
    52c8:	f1 1c       	adc	r15, r1
    52ca:	0f c0       	rjmp	.+30     	; 0x52ea <unstick_MOTOR_LIMIT+0x1e0>
	} else if (direction == MTRDIRPOSITIVE) {
    52cc:	81 e0       	ldi	r24, 0x01	; 1
    52ce:	b8 12       	cpse	r11, r24
    52d0:	0c c0       	rjmp	.+24     	; 0x52ea <unstick_MOTOR_LIMIT+0x1e0>
		newPosition = encodervalue - 200L * ENC_COUNTS_PER_MICRON;
    52d2:	65 96       	adiw	r28, 0x15	; 21
    52d4:	cc ac       	ldd	r12, Y+60	; 0x3c
    52d6:	dd ac       	ldd	r13, Y+61	; 0x3d
    52d8:	ee ac       	ldd	r14, Y+62	; 0x3e
    52da:	ff ac       	ldd	r15, Y+63	; 0x3f
    52dc:	65 97       	sbiw	r28, 0x15	; 21
    52de:	98 e1       	ldi	r25, 0x18	; 24
    52e0:	c9 1a       	sub	r12, r25
    52e2:	9d ed       	ldi	r25, 0xDD	; 221
    52e4:	d9 0a       	sbc	r13, r25
    52e6:	e1 08       	sbc	r14, r1
    52e8:	f1 08       	sbc	r15, r1
	} 
//sprintf(strbuf, "encodervalue = %ld, newPosition = %ld", encodervalue, newPosition);
//printLine(strbuf);
	move_MOTOR(mtraddr, newPosition);
    52ea:	b7 01       	movw	r22, r14
    52ec:	a6 01       	movw	r20, r12
    52ee:	81 2f       	mov	r24, r17
    52f0:	0e 94 bd 22 	call	0x457a	; 0x457a <move_MOTOR>
	return(NOERROR);
    52f4:	00 e0       	ldi	r16, 0x00	; 0
    52f6:	01 c0       	rjmp	.+2      	; 0x52fa <unstick_MOTOR_LIMIT+0x1f0>
		}
	}
	if (stuck == YES) {		// Tried 3 times and failed
//sprintf(strbuf, "tried 3 times and failed");
//printLine(strbuf);
		return(ERROR);
    52f8:	03 e6       	ldi	r16, 0x63	; 99
//sprintf(strbuf, "encodervalue = %ld, newPosition = %ld", encodervalue, newPosition);
//printLine(strbuf);
	move_MOTOR(mtraddr, newPosition);
	return(NOERROR);

}
    52fa:	80 2f       	mov	r24, r16
    52fc:	c8 5a       	subi	r28, 0xA8	; 168
    52fe:	df 4f       	sbci	r29, 0xFF	; 255
    5300:	cd bf       	out	0x3d, r28	; 61
    5302:	de bf       	out	0x3e, r29	; 62
    5304:	df 91       	pop	r29
    5306:	cf 91       	pop	r28
    5308:	1f 91       	pop	r17
    530a:	0f 91       	pop	r16
    530c:	ff 90       	pop	r15
    530e:	ef 90       	pop	r14
    5310:	df 90       	pop	r13
    5312:	cf 90       	pop	r12
    5314:	bf 90       	pop	r11
    5316:	08 95       	ret

00005318 <zero_MOTOR_CMD>:

	Outputs:
		None
------------------------------------------------------------------------------*/
void zero_MOTOR_CMD(uint8_t cstack)
{
    5318:	0f 93       	push	r16
    531a:	1f 93       	push	r17
    531c:	cf 93       	push	r28
    531e:	df 93       	push	r29
    5320:	cd b7       	in	r28, 0x3d	; 61
    5322:	de b7       	in	r29, 0x3e	; 62
    5324:	c5 5a       	subi	r28, 0xA5	; 165
    5326:	d1 09       	sbc	r29, r1
    5328:	cd bf       	out	0x3d, r28	; 61
    532a:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
	const char fmt0[] = "zero_MOTOR_CMD: failed put_MOTOR_ENCODER on %c";
    532c:	9f e2       	ldi	r25, 0x2F	; 47
    532e:	e8 ef       	ldi	r30, 0xF8	; 248
    5330:	fc eb       	ldi	r31, 0xBC	; 188
    5332:	de 01       	movw	r26, r28
    5334:	af 5a       	subi	r26, 0xAF	; 175
    5336:	bf 4f       	sbci	r27, 0xFF	; 255
    5338:	01 90       	ld	r0, Z+
    533a:	0d 92       	st	X+, r0
    533c:	9a 95       	dec	r25
    533e:	e1 f7       	brne	.-8      	; 0x5338 <zero_MOTOR_CMD+0x20>
	const char fmt1[] = "zero_MOTOR_CMD: not a motor name (%c)";
    5340:	96 e2       	ldi	r25, 0x26	; 38
    5342:	e7 e2       	ldi	r30, 0x27	; 39
    5344:	fd eb       	ldi	r31, 0xBD	; 189
    5346:	de 01       	movw	r26, r28
    5348:	a0 58       	subi	r26, 0x80	; 128
    534a:	bf 4f       	sbci	r27, 0xFF	; 255
    534c:	01 90       	ld	r0, Z+
    534e:	0d 92       	st	X+, r0
    5350:	9a 95       	dec	r25
    5352:	e1 f7       	brne	.-8      	; 0x534c <zero_MOTOR_CMD+0x34>
	uint8_t motor, mtraddr, retval;

	motor = pcmd[cstack].cobject;	// The char a, b, or c
    5354:	24 e3       	ldi	r18, 0x34	; 52
    5356:	82 9f       	mul	r24, r18
    5358:	c0 01       	movw	r24, r0
    535a:	11 24       	eor	r1, r1
    535c:	fc 01       	movw	r30, r24
    535e:	e1 5f       	subi	r30, 0xF1	; 241
    5360:	f7 4d       	sbci	r31, 0xD7	; 215
    5362:	11 81       	ldd	r17, Z+1	; 0x01

	switch (motor) {
    5364:	8f e9       	ldi	r24, 0x9F	; 159
    5366:	81 0f       	add	r24, r17
    5368:	83 30       	cpi	r24, 0x03	; 3
    536a:	18 f5       	brcc	.+70     	; 0x53b2 <zero_MOTOR_CMD+0x9a>
		case 'a':
		case 'b':
		case 'c':
			mtraddr = motor + 31;
			retval = put_MOTOR_ENCODER(mtraddr, 0L);
    536c:	40 e0       	ldi	r20, 0x00	; 0
    536e:	50 e0       	ldi	r21, 0x00	; 0
    5370:	ba 01       	movw	r22, r20
    5372:	8f e1       	ldi	r24, 0x1F	; 31
    5374:	81 0f       	add	r24, r17
    5376:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <put_MOTOR_ENCODER>
			if (retval == ERROR) {
    537a:	83 36       	cpi	r24, 0x63	; 99
    537c:	99 f5       	brne	.+102    	; 0x53e4 <zero_MOTOR_CMD+0xcc>
				sprintf(strbuf, fmt0, motor);
    537e:	1f 92       	push	r1
    5380:	1f 93       	push	r17
    5382:	ce 01       	movw	r24, r28
    5384:	8f 5a       	subi	r24, 0xAF	; 175
    5386:	9f 4f       	sbci	r25, 0xFF	; 255
    5388:	9f 93       	push	r25
    538a:	8f 93       	push	r24
    538c:	8e 01       	movw	r16, r28
    538e:	0f 5f       	subi	r16, 0xFF	; 255
    5390:	1f 4f       	sbci	r17, 0xFF	; 255
    5392:	1f 93       	push	r17
    5394:	0f 93       	push	r16
    5396:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
				printError(ERR_ZERMTR, strbuf);
    539a:	b8 01       	movw	r22, r16
    539c:	87 e3       	ldi	r24, 0x37	; 55
    539e:	91 e0       	ldi	r25, 0x01	; 1
    53a0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return;
    53a4:	0f 90       	pop	r0
    53a6:	0f 90       	pop	r0
    53a8:	0f 90       	pop	r0
    53aa:	0f 90       	pop	r0
    53ac:	0f 90       	pop	r0
    53ae:	0f 90       	pop	r0
    53b0:	19 c0       	rjmp	.+50     	; 0x53e4 <zero_MOTOR_CMD+0xcc>
			}
			break;

		default:
			sprintf(strbuf, fmt1, motor);
    53b2:	1f 92       	push	r1
    53b4:	1f 93       	push	r17
    53b6:	ce 01       	movw	r24, r28
    53b8:	80 58       	subi	r24, 0x80	; 128
    53ba:	9f 4f       	sbci	r25, 0xFF	; 255
    53bc:	9f 93       	push	r25
    53be:	8f 93       	push	r24
    53c0:	8e 01       	movw	r16, r28
    53c2:	0f 5f       	subi	r16, 0xFF	; 255
    53c4:	1f 4f       	sbci	r17, 0xFF	; 255
    53c6:	1f 93       	push	r17
    53c8:	0f 93       	push	r16
    53ca:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			printError(ERR_ZERMTR, strbuf);
    53ce:	b8 01       	movw	r22, r16
    53d0:	87 e3       	ldi	r24, 0x37	; 55
    53d2:	91 e0       	ldi	r25, 0x01	; 1
    53d4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			break;
    53d8:	0f 90       	pop	r0
    53da:	0f 90       	pop	r0
    53dc:	0f 90       	pop	r0
    53de:	0f 90       	pop	r0
    53e0:	0f 90       	pop	r0
    53e2:	0f 90       	pop	r0
		
	}
    53e4:	cb 55       	subi	r28, 0x5B	; 91
    53e6:	df 4f       	sbci	r29, 0xFF	; 255
    53e8:	cd bf       	out	0x3d, r28	; 61
    53ea:	de bf       	out	0x3e, r29	; 62
    53ec:	df 91       	pop	r29
    53ee:	cf 91       	pop	r28
    53f0:	1f 91       	pop	r17
    53f2:	0f 91       	pop	r16
    53f4:	08 95       	ret

000053f6 <set>:
	Returns:
		ERROR if an invalid object was requested.
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    53f6:	ef 92       	push	r14
    53f8:	ff 92       	push	r15
    53fa:	0f 93       	push	r16
    53fc:	1f 93       	push	r17
    53fe:	cf 93       	push	r28
    5400:	df 93       	push	r29
    5402:	cd b7       	in	r28, 0x3d	; 61
    5404:	de b7       	in	r29, 0x3e	; 62
    5406:	c8 5f       	subi	r28, 0xF8	; 248
    5408:	d1 09       	sbc	r29, r1
    540a:	cd bf       	out	0x3d, r28	; 61
    540c:	de bf       	out	0x3e, r29	; 62
	char object;
	uint8_t i, mtraddr;
//	int32_t newEncoderValue;
	PID motorPID;
//	const char fmt0[] = "set: put_MOTOR_ENCODER error on %c";
	const char fmt1[] = "set: bad time format";
    540e:	95 e1       	ldi	r25, 0x15	; 21
    5410:	ed e4       	ldi	r30, 0x4D	; 77
    5412:	fd eb       	ldi	r31, 0xBD	; 189
    5414:	de 01       	movw	r26, r28
    5416:	af 58       	subi	r26, 0x8F	; 143
    5418:	bf 4f       	sbci	r27, 0xFF	; 255
    541a:	01 90       	ld	r0, Z+
    541c:	0d 92       	st	X+, r0
    541e:	9a 95       	dec	r25
    5420:	e1 f7       	brne	.-8      	; 0x541a <set+0x24>
	const char fmt2[] = "set: put_time error";
    5422:	94 e1       	ldi	r25, 0x14	; 20
    5424:	e2 e6       	ldi	r30, 0x62	; 98
    5426:	fd eb       	ldi	r31, 0xBD	; 189
    5428:	de 01       	movw	r26, r28
    542a:	aa 57       	subi	r26, 0x7A	; 122
    542c:	bf 4f       	sbci	r27, 0xFF	; 255
    542e:	01 90       	ld	r0, Z+
    5430:	0d 92       	st	X+, r0
    5432:	9a 95       	dec	r25
    5434:	e1 f7       	brne	.-8      	; 0x542e <set+0x38>
	const char fmt3[] = "set: write_FRAM error";
    5436:	96 e1       	ldi	r25, 0x16	; 22
    5438:	e6 e7       	ldi	r30, 0x76	; 118
    543a:	fd eb       	ldi	r31, 0xBD	; 189
    543c:	de 01       	movw	r26, r28
    543e:	a6 56       	subi	r26, 0x66	; 102
    5440:	bf 4f       	sbci	r27, 0xFF	; 255
    5442:	01 90       	ld	r0, Z+
    5444:	0d 92       	st	X+, r0
    5446:	9a 95       	dec	r25
    5448:	e1 f7       	brne	.-8      	; 0x5442 <set+0x4c>
	const char fmt4[] = "set: what?";
    544a:	9b e0       	ldi	r25, 0x0B	; 11
    544c:	ec e8       	ldi	r30, 0x8C	; 140
    544e:	fd eb       	ldi	r31, 0xBD	; 189
    5450:	de 01       	movw	r26, r28
    5452:	a0 55       	subi	r26, 0x50	; 80
    5454:	bf 4f       	sbci	r27, 0xFF	; 255
    5456:	01 90       	ld	r0, Z+
    5458:	0d 92       	st	X+, r0
    545a:	9a 95       	dec	r25
    545c:	e1 f7       	brne	.-8      	; 0x5456 <set+0x60>
//	const char fmt5[] = "set: encoder value out of range %ld";
	const char fmt6[] = "set: get_MOTOR_PID error on %c";
    545e:	9f e1       	ldi	r25, 0x1F	; 31
    5460:	e7 e9       	ldi	r30, 0x97	; 151
    5462:	fd eb       	ldi	r31, 0xBD	; 189
    5464:	de 01       	movw	r26, r28
    5466:	a5 54       	subi	r26, 0x45	; 69
    5468:	bf 4f       	sbci	r27, 0xFF	; 255
    546a:	01 90       	ld	r0, Z+
    546c:	0d 92       	st	X+, r0
    546e:	9a 95       	dec	r25
    5470:	e1 f7       	brne	.-8      	; 0x546a <set+0x74>
	const char fmt7[] = "set: put_MOTOR_PID error on %c";
    5472:	9f e1       	ldi	r25, 0x1F	; 31
    5474:	e6 eb       	ldi	r30, 0xB6	; 182
    5476:	fd eb       	ldi	r31, 0xBD	; 189
    5478:	de 01       	movw	r26, r28
    547a:	a6 52       	subi	r26, 0x26	; 38
    547c:	bf 4f       	sbci	r27, 0xFF	; 255
    547e:	01 90       	ld	r0, Z+
    5480:	0d 92       	st	X+, r0
    5482:	9a 95       	dec	r25
    5484:	e1 f7       	brne	.-8      	; 0x547e <set+0x88>

	object = pcmd[cstack].cobject;
    5486:	90 e0       	ldi	r25, 0x00	; 0
    5488:	24 e3       	ldi	r18, 0x34	; 52
    548a:	28 9f       	mul	r18, r24
    548c:	f0 01       	movw	r30, r0
    548e:	29 9f       	mul	r18, r25
    5490:	f0 0d       	add	r31, r0
    5492:	11 24       	eor	r1, r1
    5494:	e1 5f       	subi	r30, 0xF1	; 241
    5496:	f7 4d       	sbci	r31, 0xD7	; 215
    5498:	21 81       	ldd	r18, Z+1	; 0x01
	switch(object) {
    549a:	23 37       	cpi	r18, 0x73	; 115
    549c:	09 f4       	brne	.+2      	; 0x54a0 <set+0xaa>
    549e:	64 c1       	rjmp	.+712    	; 0x5768 <set+0x372>
    54a0:	38 f4       	brcc	.+14     	; 0x54b0 <set+0xba>
    54a2:	2c 34       	cpi	r18, 0x4C	; 76
    54a4:	09 f4       	brne	.+2      	; 0x54a8 <set+0xb2>
    54a6:	e5 c0       	rjmp	.+458    	; 0x5672 <set+0x27c>
    54a8:	2c 36       	cpi	r18, 0x6C	; 108
    54aa:	09 f4       	brne	.+2      	; 0x54ae <set+0xb8>
    54ac:	5d c1       	rjmp	.+698    	; 0x5768 <set+0x372>
    54ae:	62 c1       	rjmp	.+708    	; 0x5774 <set+0x37e>
    54b0:	24 37       	cpi	r18, 0x74	; 116
    54b2:	21 f0       	breq	.+8      	; 0x54bc <set+0xc6>
    54b4:	25 37       	cpi	r18, 0x75	; 117
    54b6:	09 f4       	brne	.+2      	; 0x54ba <set+0xc4>
    54b8:	dc c0       	rjmp	.+440    	; 0x5672 <set+0x27c>
    54ba:	5c c1       	rjmp	.+696    	; 0x5774 <set+0x37e>
			}
			break;
*/

		case 't':		// Time
			if (strlen(pcmd[cstack].cvalue) != 19) {
    54bc:	44 e3       	ldi	r20, 0x34	; 52
    54be:	48 9f       	mul	r20, r24
    54c0:	90 01       	movw	r18, r0
    54c2:	49 9f       	mul	r20, r25
    54c4:	30 0d       	add	r19, r0
    54c6:	11 24       	eor	r1, r1
    54c8:	c9 01       	movw	r24, r18
    54ca:	8f 5e       	subi	r24, 0xEF	; 239
    54cc:	97 4d       	sbci	r25, 0xD7	; 215
    54ce:	7c 01       	movw	r14, r24
    54d0:	fc 01       	movw	r30, r24
    54d2:	01 90       	ld	r0, Z+
    54d4:	00 20       	and	r0, r0
    54d6:	e9 f7       	brne	.-6      	; 0x54d2 <set+0xdc>
    54d8:	31 97       	sbiw	r30, 0x01	; 1
    54da:	e8 1b       	sub	r30, r24
    54dc:	f9 0b       	sbc	r31, r25
    54de:	73 97       	sbiw	r30, 0x13	; 19
    54e0:	b9 f0       	breq	.+46     	; 0x5510 <set+0x11a>
				sprintf(strbuf, fmt1);
    54e2:	ce 01       	movw	r24, r28
    54e4:	8f 58       	subi	r24, 0x8F	; 143
    54e6:	9f 4f       	sbci	r25, 0xFF	; 255
    54e8:	9f 93       	push	r25
    54ea:	8f 93       	push	r24
    54ec:	8e 01       	movw	r16, r28
    54ee:	0f 5f       	subi	r16, 0xFF	; 255
    54f0:	1f 4f       	sbci	r17, 0xFF	; 255
    54f2:	1f 93       	push	r17
    54f4:	0f 93       	push	r16
    54f6:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
				printError(ERR_SETTIME, strbuf);
    54fa:	b8 01       	movw	r22, r16
    54fc:	8a e5       	ldi	r24, 0x5A	; 90
    54fe:	92 e0       	ldi	r25, 0x02	; 2
    5500:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    5504:	0f 90       	pop	r0
    5506:	0f 90       	pop	r0
    5508:	0f 90       	pop	r0
    550a:	0f 90       	pop	r0
    550c:	13 e6       	ldi	r17, 0x63	; 99
    550e:	4a c1       	rjmp	.+660    	; 0x57a4 <set+0x3ae>
			}
			if (put_time(pcmd[cstack].cvalue) == ERROR) {
    5510:	0e 94 fe 07 	call	0xffc	; 0xffc <put_time>
    5514:	18 2f       	mov	r17, r24
    5516:	83 36       	cpi	r24, 0x63	; 99
    5518:	b1 f4       	brne	.+44     	; 0x5546 <set+0x150>
				sprintf(strbuf, fmt2);
    551a:	ce 01       	movw	r24, r28
    551c:	8a 57       	subi	r24, 0x7A	; 122
    551e:	9f 4f       	sbci	r25, 0xFF	; 255
    5520:	9f 93       	push	r25
    5522:	8f 93       	push	r24
    5524:	85 58       	subi	r24, 0x85	; 133
    5526:	91 09       	sbc	r25, r1
    5528:	7c 01       	movw	r14, r24
    552a:	9f 93       	push	r25
    552c:	8f 93       	push	r24
    552e:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
				printError(ERR_ISO, strbuf);
    5532:	b7 01       	movw	r22, r14
    5534:	8b e5       	ldi	r24, 0x5B	; 91
    5536:	92 e0       	ldi	r25, 0x02	; 2
    5538:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    553c:	0f 90       	pop	r0
    553e:	0f 90       	pop	r0
    5540:	0f 90       	pop	r0
    5542:	0f 90       	pop	r0
    5544:	2f c1       	rjmp	.+606    	; 0x57a4 <set+0x3ae>
			}
			if (write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20) == ERROR) {
    5546:	24 e1       	ldi	r18, 0x14	; 20
    5548:	a7 01       	movw	r20, r14
    554a:	60 e0       	ldi	r22, 0x00	; 0
    554c:	70 e0       	ldi	r23, 0x00	; 0
    554e:	80 e5       	ldi	r24, 0x50	; 80
    5550:	0e 94 33 09 	call	0x1266	; 0x1266 <write_FRAM>
    5554:	18 2f       	mov	r17, r24
    5556:	83 36       	cpi	r24, 0x63	; 99
    5558:	09 f0       	breq	.+2      	; 0x555c <set+0x166>
    555a:	23 c1       	rjmp	.+582    	; 0x57a2 <set+0x3ac>
				sprintf(strbuf, fmt3);
    555c:	ce 01       	movw	r24, r28
    555e:	86 56       	subi	r24, 0x66	; 102
    5560:	9f 4f       	sbci	r25, 0xFF	; 255
    5562:	9f 93       	push	r25
    5564:	8f 93       	push	r24
    5566:	89 59       	subi	r24, 0x99	; 153
    5568:	91 09       	sbc	r25, r1
    556a:	7c 01       	movw	r14, r24
    556c:	9f 93       	push	r25
    556e:	8f 93       	push	r24
    5570:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
				printError(ERR_ISO, strbuf);
    5574:	b7 01       	movw	r22, r14
    5576:	8b e5       	ldi	r24, 0x5B	; 91
    5578:	92 e0       	ldi	r25, 0x02	; 2
    557a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
				return(ERROR);
    557e:	0f 90       	pop	r0
    5580:	0f 90       	pop	r0
    5582:	0f 90       	pop	r0
    5584:	0f 90       	pop	r0
    5586:	0e c1       	rjmp	.+540    	; 0x57a4 <set+0x3ae>
			break;

		case 'u':		// Unsafe motor encoder limits
		case 'L':
			for (i = 0; i < NMOTORS; i++) {
				mtraddr = i + MOTOR_A;
    5588:	68 94       	set
    558a:	ff 24       	eor	r15, r15
    558c:	f7 f8       	bld	r15, 7
    558e:	f0 0e       	add	r15, r16
				if (get_MOTOR_PID(mtraddr, &motorPID) == ERROR) {
    5590:	be 01       	movw	r22, r28
    5592:	6f 5a       	subi	r22, 0xAF	; 175
    5594:	7f 4f       	sbci	r23, 0xFF	; 255
    5596:	8f 2d       	mov	r24, r15
    5598:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <get_MOTOR_PID>
    559c:	18 2f       	mov	r17, r24
    559e:	83 36       	cpi	r24, 0x63	; 99
    55a0:	e9 f4       	brne	.+58     	; 0x55dc <set+0x1e6>
					sprintf(strbuf, fmt6, mtraddr - 31);
    55a2:	8f 2d       	mov	r24, r15
    55a4:	90 e0       	ldi	r25, 0x00	; 0
    55a6:	4f 97       	sbiw	r24, 0x1f	; 31
    55a8:	9f 93       	push	r25
    55aa:	8f 93       	push	r24
    55ac:	ce 01       	movw	r24, r28
    55ae:	85 54       	subi	r24, 0x45	; 69
    55b0:	9f 4f       	sbci	r25, 0xFF	; 255
    55b2:	9f 93       	push	r25
    55b4:	8f 93       	push	r24
    55b6:	8a 5b       	subi	r24, 0xBA	; 186
    55b8:	91 09       	sbc	r25, r1
    55ba:	7c 01       	movw	r14, r24
    55bc:	9f 93       	push	r25
    55be:	8f 93       	push	r24
    55c0:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
					printError(ERR_MTR, strbuf);
    55c4:	b7 01       	movw	r22, r14
    55c6:	86 e3       	ldi	r24, 0x36	; 54
    55c8:	91 e0       	ldi	r25, 0x01	; 1
    55ca:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
					return(ERROR);
    55ce:	0f 90       	pop	r0
    55d0:	0f 90       	pop	r0
    55d2:	0f 90       	pop	r0
    55d4:	0f 90       	pop	r0
    55d6:	0f 90       	pop	r0
    55d8:	0f 90       	pop	r0
    55da:	e4 c0       	rjmp	.+456    	; 0x57a4 <set+0x3ae>
				}
				motorPID.minPos = PID_MINPOSUNSAFE;
    55dc:	80 ee       	ldi	r24, 0xE0	; 224
    55de:	9e e5       	ldi	r25, 0x5E	; 94
    55e0:	a8 ef       	ldi	r26, 0xF8	; 248
    55e2:	bf ef       	ldi	r27, 0xFF	; 255
    55e4:	a9 96       	adiw	r28, 0x29	; 41
    55e6:	8c af       	std	Y+60, r24	; 0x3c
    55e8:	9d af       	std	Y+61, r25	; 0x3d
    55ea:	ae af       	std	Y+62, r26	; 0x3e
    55ec:	bf af       	std	Y+63, r27	; 0x3f
    55ee:	a9 97       	sbiw	r28, 0x29	; 41
				motorPID.maxPos = PID_MAXPOSUNSAFE;
    55f0:	80 e4       	ldi	r24, 0x40	; 64
    55f2:	92 e4       	ldi	r25, 0x42	; 66
    55f4:	af e0       	ldi	r26, 0x0F	; 15
    55f6:	b0 e0       	ldi	r27, 0x00	; 0
    55f8:	ad 96       	adiw	r28, 0x2d	; 45
    55fa:	8c af       	std	Y+60, r24	; 0x3c
    55fc:	9d af       	std	Y+61, r25	; 0x3d
    55fe:	ae af       	std	Y+62, r26	; 0x3e
    5600:	bf af       	std	Y+63, r27	; 0x3f
    5602:	ad 97       	sbiw	r28, 0x2d	; 45
				if (put_MOTOR_PID(mtraddr, motorPID) == ERROR) {
    5604:	8d b7       	in	r24, 0x3d	; 61
    5606:	9e b7       	in	r25, 0x3e	; 62
    5608:	80 97       	sbiw	r24, 0x20	; 32
    560a:	8d bf       	out	0x3d, r24	; 61
    560c:	9e bf       	out	0x3e, r25	; 62
    560e:	ad b7       	in	r26, 0x3d	; 61
    5610:	be b7       	in	r27, 0x3e	; 62
    5612:	11 96       	adiw	r26, 0x01	; 1
    5614:	80 e2       	ldi	r24, 0x20	; 32
    5616:	fe 01       	movw	r30, r28
    5618:	ef 5a       	subi	r30, 0xAF	; 175
    561a:	ff 4f       	sbci	r31, 0xFF	; 255
    561c:	01 90       	ld	r0, Z+
    561e:	0d 92       	st	X+, r0
    5620:	8a 95       	dec	r24
    5622:	e1 f7       	brne	.-8      	; 0x561c <set+0x226>
    5624:	8f 2d       	mov	r24, r15
    5626:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <put_MOTOR_PID>
    562a:	18 2f       	mov	r17, r24
    562c:	cd bf       	out	0x3d, r28	; 61
    562e:	de bf       	out	0x3e, r29	; 62
    5630:	13 36       	cpi	r17, 0x63	; 99
    5632:	e9 f4       	brne	.+58     	; 0x566e <set+0x278>
					sprintf(strbuf, fmt7, mtraddr - 31);
    5634:	8f 2d       	mov	r24, r15
    5636:	90 e0       	ldi	r25, 0x00	; 0
    5638:	4f 97       	sbiw	r24, 0x1f	; 31
    563a:	9f 93       	push	r25
    563c:	8f 93       	push	r24
    563e:	ce 01       	movw	r24, r28
    5640:	86 52       	subi	r24, 0x26	; 38
    5642:	9f 4f       	sbci	r25, 0xFF	; 255
    5644:	9f 93       	push	r25
    5646:	8f 93       	push	r24
    5648:	89 5d       	subi	r24, 0xD9	; 217
    564a:	91 09       	sbc	r25, r1
    564c:	7c 01       	movw	r14, r24
    564e:	9f 93       	push	r25
    5650:	8f 93       	push	r24
    5652:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
					printError(ERR_MTR, strbuf);
    5656:	b7 01       	movw	r22, r14
    5658:	86 e3       	ldi	r24, 0x36	; 54
    565a:	91 e0       	ldi	r25, 0x01	; 1
    565c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
					return(ERROR);
    5660:	0f 90       	pop	r0
    5662:	0f 90       	pop	r0
    5664:	0f 90       	pop	r0
    5666:	0f 90       	pop	r0
    5668:	0f 90       	pop	r0
    566a:	0f 90       	pop	r0
    566c:	9b c0       	rjmp	.+310    	; 0x57a4 <set+0x3ae>
			}
			break;

		case 'u':		// Unsafe motor encoder limits
		case 'L':
			for (i = 0; i < NMOTORS; i++) {
    566e:	0f 5f       	subi	r16, 0xFF	; 255
    5670:	01 c0       	rjmp	.+2      	; 0x5674 <set+0x27e>
//	const char fmt5[] = "set: encoder value out of range %ld";
	const char fmt6[] = "set: get_MOTOR_PID error on %c";
	const char fmt7[] = "set: put_MOTOR_PID error on %c";

	object = pcmd[cstack].cobject;
	switch(object) {
    5672:	00 e0       	ldi	r16, 0x00	; 0
			}
			break;

		case 'u':		// Unsafe motor encoder limits
		case 'L':
			for (i = 0; i < NMOTORS; i++) {
    5674:	03 30       	cpi	r16, 0x03	; 3
    5676:	08 f4       	brcc	.+2      	; 0x567a <set+0x284>
    5678:	87 cf       	rjmp	.-242    	; 0x5588 <set+0x192>
			sprintf(strbuf, fmt4);
			printError(ERR_SET, strbuf);
			return(ERROR);
	}

	return(NOERROR);
    567a:	10 e0       	ldi	r17, 0x00	; 0
    567c:	93 c0       	rjmp	.+294    	; 0x57a4 <set+0x3ae>
			break;

		case 's':		// Safe motor encoder limits
		case 'l':
			for (i = 0; i < NMOTORS; i++) {
				mtraddr = i + MOTOR_A;
    567e:	68 94       	set
    5680:	ff 24       	eor	r15, r15
    5682:	f7 f8       	bld	r15, 7
    5684:	f0 0e       	add	r15, r16
				if (get_MOTOR_PID(mtraddr, &motorPID) == ERROR) {
    5686:	be 01       	movw	r22, r28
    5688:	6f 5a       	subi	r22, 0xAF	; 175
    568a:	7f 4f       	sbci	r23, 0xFF	; 255
    568c:	8f 2d       	mov	r24, r15
    568e:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <get_MOTOR_PID>
    5692:	18 2f       	mov	r17, r24
    5694:	83 36       	cpi	r24, 0x63	; 99
    5696:	e9 f4       	brne	.+58     	; 0x56d2 <set+0x2dc>
					sprintf(strbuf, fmt6, mtraddr - 31);
    5698:	8f 2d       	mov	r24, r15
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	4f 97       	sbiw	r24, 0x1f	; 31
    569e:	9f 93       	push	r25
    56a0:	8f 93       	push	r24
    56a2:	ce 01       	movw	r24, r28
    56a4:	85 54       	subi	r24, 0x45	; 69
    56a6:	9f 4f       	sbci	r25, 0xFF	; 255
    56a8:	9f 93       	push	r25
    56aa:	8f 93       	push	r24
    56ac:	8a 5b       	subi	r24, 0xBA	; 186
    56ae:	91 09       	sbc	r25, r1
    56b0:	7c 01       	movw	r14, r24
    56b2:	9f 93       	push	r25
    56b4:	8f 93       	push	r24
    56b6:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
					printError(ERR_MTR, strbuf);
    56ba:	b7 01       	movw	r22, r14
    56bc:	86 e3       	ldi	r24, 0x36	; 54
    56be:	91 e0       	ldi	r25, 0x01	; 1
    56c0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
					return(ERROR);
    56c4:	0f 90       	pop	r0
    56c6:	0f 90       	pop	r0
    56c8:	0f 90       	pop	r0
    56ca:	0f 90       	pop	r0
    56cc:	0f 90       	pop	r0
    56ce:	0f 90       	pop	r0
    56d0:	69 c0       	rjmp	.+210    	; 0x57a4 <set+0x3ae>
				}
				motorPID.minPos = PID_MINPOS;
    56d2:	80 e8       	ldi	r24, 0x80	; 128
    56d4:	98 e3       	ldi	r25, 0x38	; 56
    56d6:	a1 e0       	ldi	r26, 0x01	; 1
    56d8:	b0 e0       	ldi	r27, 0x00	; 0
    56da:	a9 96       	adiw	r28, 0x29	; 41
    56dc:	8c af       	std	Y+60, r24	; 0x3c
    56de:	9d af       	std	Y+61, r25	; 0x3d
    56e0:	ae af       	std	Y+62, r26	; 0x3e
    56e2:	bf af       	std	Y+63, r27	; 0x3f
    56e4:	a9 97       	sbiw	r28, 0x29	; 41
				motorPID.maxPos = PID_MAXPOS;
    56e6:	80 e0       	ldi	r24, 0x00	; 0
    56e8:	95 e3       	ldi	r25, 0x35	; 53
    56ea:	ac e0       	ldi	r26, 0x0C	; 12
    56ec:	b0 e0       	ldi	r27, 0x00	; 0
    56ee:	ad 96       	adiw	r28, 0x2d	; 45
    56f0:	8c af       	std	Y+60, r24	; 0x3c
    56f2:	9d af       	std	Y+61, r25	; 0x3d
    56f4:	ae af       	std	Y+62, r26	; 0x3e
    56f6:	bf af       	std	Y+63, r27	; 0x3f
    56f8:	ad 97       	sbiw	r28, 0x2d	; 45
				if (put_MOTOR_PID(mtraddr, motorPID) == ERROR) {
    56fa:	8d b7       	in	r24, 0x3d	; 61
    56fc:	9e b7       	in	r25, 0x3e	; 62
    56fe:	80 97       	sbiw	r24, 0x20	; 32
    5700:	8d bf       	out	0x3d, r24	; 61
    5702:	9e bf       	out	0x3e, r25	; 62
    5704:	ad b7       	in	r26, 0x3d	; 61
    5706:	be b7       	in	r27, 0x3e	; 62
    5708:	11 96       	adiw	r26, 0x01	; 1
    570a:	80 e2       	ldi	r24, 0x20	; 32
    570c:	fe 01       	movw	r30, r28
    570e:	ef 5a       	subi	r30, 0xAF	; 175
    5710:	ff 4f       	sbci	r31, 0xFF	; 255
    5712:	01 90       	ld	r0, Z+
    5714:	0d 92       	st	X+, r0
    5716:	8a 95       	dec	r24
    5718:	e1 f7       	brne	.-8      	; 0x5712 <set+0x31c>
    571a:	8f 2d       	mov	r24, r15
    571c:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <put_MOTOR_PID>
    5720:	18 2f       	mov	r17, r24
    5722:	cd bf       	out	0x3d, r28	; 61
    5724:	de bf       	out	0x3e, r29	; 62
    5726:	13 36       	cpi	r17, 0x63	; 99
    5728:	e9 f4       	brne	.+58     	; 0x5764 <set+0x36e>
					sprintf(strbuf, fmt7, mtraddr - 31);
    572a:	8f 2d       	mov	r24, r15
    572c:	90 e0       	ldi	r25, 0x00	; 0
    572e:	4f 97       	sbiw	r24, 0x1f	; 31
    5730:	9f 93       	push	r25
    5732:	8f 93       	push	r24
    5734:	ce 01       	movw	r24, r28
    5736:	86 52       	subi	r24, 0x26	; 38
    5738:	9f 4f       	sbci	r25, 0xFF	; 255
    573a:	9f 93       	push	r25
    573c:	8f 93       	push	r24
    573e:	89 5d       	subi	r24, 0xD9	; 217
    5740:	91 09       	sbc	r25, r1
    5742:	7c 01       	movw	r14, r24
    5744:	9f 93       	push	r25
    5746:	8f 93       	push	r24
    5748:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
					printError(ERR_MTR, strbuf);
    574c:	b7 01       	movw	r22, r14
    574e:	86 e3       	ldi	r24, 0x36	; 54
    5750:	91 e0       	ldi	r25, 0x01	; 1
    5752:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
					return(ERROR);
    5756:	0f 90       	pop	r0
    5758:	0f 90       	pop	r0
    575a:	0f 90       	pop	r0
    575c:	0f 90       	pop	r0
    575e:	0f 90       	pop	r0
    5760:	0f 90       	pop	r0
    5762:	20 c0       	rjmp	.+64     	; 0x57a4 <set+0x3ae>
			}
			break;

		case 's':		// Safe motor encoder limits
		case 'l':
			for (i = 0; i < NMOTORS; i++) {
    5764:	0f 5f       	subi	r16, 0xFF	; 255
    5766:	01 c0       	rjmp	.+2      	; 0x576a <set+0x374>
//	const char fmt5[] = "set: encoder value out of range %ld";
	const char fmt6[] = "set: get_MOTOR_PID error on %c";
	const char fmt7[] = "set: put_MOTOR_PID error on %c";

	object = pcmd[cstack].cobject;
	switch(object) {
    5768:	00 e0       	ldi	r16, 0x00	; 0
			}
			break;

		case 's':		// Safe motor encoder limits
		case 'l':
			for (i = 0; i < NMOTORS; i++) {
    576a:	03 30       	cpi	r16, 0x03	; 3
    576c:	08 f4       	brcc	.+2      	; 0x5770 <set+0x37a>
    576e:	87 cf       	rjmp	.-242    	; 0x567e <set+0x288>
			sprintf(strbuf, fmt4);
			printError(ERR_SET, strbuf);
			return(ERROR);
	}

	return(NOERROR);
    5770:	10 e0       	ldi	r17, 0x00	; 0
    5772:	18 c0       	rjmp	.+48     	; 0x57a4 <set+0x3ae>
				}
			}
			break;

		default:
			sprintf(strbuf, fmt4);
    5774:	ce 01       	movw	r24, r28
    5776:	80 55       	subi	r24, 0x50	; 80
    5778:	9f 4f       	sbci	r25, 0xFF	; 255
    577a:	9f 93       	push	r25
    577c:	8f 93       	push	r24
    577e:	8e 01       	movw	r16, r28
    5780:	0f 5f       	subi	r16, 0xFF	; 255
    5782:	1f 4f       	sbci	r17, 0xFF	; 255
    5784:	1f 93       	push	r17
    5786:	0f 93       	push	r16
    5788:	0e 94 57 38 	call	0x70ae	; 0x70ae <sprintf>
			printError(ERR_SET, strbuf);
    578c:	b8 01       	movw	r22, r16
    578e:	89 e5       	ldi	r24, 0x59	; 89
    5790:	92 e0       	ldi	r25, 0x02	; 2
    5792:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
			return(ERROR);
    5796:	0f 90       	pop	r0
    5798:	0f 90       	pop	r0
    579a:	0f 90       	pop	r0
    579c:	0f 90       	pop	r0
    579e:	13 e6       	ldi	r17, 0x63	; 99
    57a0:	01 c0       	rjmp	.+2      	; 0x57a4 <set+0x3ae>
	}

	return(NOERROR);
    57a2:	10 e0       	ldi	r17, 0x00	; 0

}
    57a4:	81 2f       	mov	r24, r17
    57a6:	c8 50       	subi	r28, 0x08	; 8
    57a8:	df 4f       	sbci	r29, 0xFF	; 255
    57aa:	cd bf       	out	0x3d, r28	; 61
    57ac:	de bf       	out	0x3e, r29	; 62
    57ae:	df 91       	pop	r29
    57b0:	cf 91       	pop	r28
    57b2:	1f 91       	pop	r17
    57b4:	0f 91       	pop	r16
    57b6:	ff 90       	pop	r15
    57b8:	ef 90       	pop	r14
    57ba:	08 95       	ret

000057bc <get_temperature>:
	point for the actual devices.

	The signal is 1.5E-3 mV/K with a 1500 kOhm dropping resistor.
------------------------------------------------------------------------------*/
float get_temperature(uint8_t sensor)
{
    57bc:	cf 93       	push	r28
    57be:	df 93       	push	r29
    57c0:	00 d0       	rcall	.+0      	; 0x57c2 <get_temperature+0x6>
    57c2:	00 d0       	rcall	.+0      	; 0x57c4 <get_temperature+0x8>
    57c4:	cd b7       	in	r28, 0x3d	; 61
    57c6:	de b7       	in	r29, 0x3e	; 62

	float temperature;

	switch (sensor) {
    57c8:	83 30       	cpi	r24, 0x03	; 3
    57ca:	18 f0       	brcs	.+6      	; 0x57d2 <get_temperature+0x16>
    57cc:	83 30       	cpi	r24, 0x03	; 3
    57ce:	39 f0       	breq	.+14     	; 0x57de <get_temperature+0x22>
    57d0:	0b c0       	rjmp	.+22     	; 0x57e8 <get_temperature+0x2c>
		case 0:
		case 1:
		case 2:
			read_AD590(sensor, &temperature);
    57d2:	be 01       	movw	r22, r28
    57d4:	6f 5f       	subi	r22, 0xFF	; 255
    57d6:	7f 4f       	sbci	r23, 0xFF	; 255
    57d8:	0e 94 48 01 	call	0x290	; 0x290 <read_AD590>
			break;
    57dc:	0d c0       	rjmp	.+26     	; 0x57f8 <get_temperature+0x3c>

		case 3:
			read_MCP9808(&temperature);
    57de:	ce 01       	movw	r24, r28
    57e0:	01 96       	adiw	r24, 0x01	; 1
    57e2:	0e 94 77 0b 	call	0x16ee	; 0x16ee <read_MCP9808>
			break;
    57e6:	08 c0       	rjmp	.+16     	; 0x57f8 <get_temperature+0x3c>

		default:
			temperature = BADFLOAT;
    57e8:	80 e0       	ldi	r24, 0x00	; 0
    57ea:	90 e8       	ldi	r25, 0x80	; 128
    57ec:	a6 e2       	ldi	r26, 0x26	; 38
    57ee:	b4 ec       	ldi	r27, 0xC4	; 196
    57f0:	89 83       	std	Y+1, r24	; 0x01
    57f2:	9a 83       	std	Y+2, r25	; 0x02
    57f4:	ab 83       	std	Y+3, r26	; 0x03
    57f6:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}

	if (temperature < -50.0) {
    57f8:	69 81       	ldd	r22, Y+1	; 0x01
    57fa:	7a 81       	ldd	r23, Y+2	; 0x02
    57fc:	8b 81       	ldd	r24, Y+3	; 0x03
    57fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5800:	20 e0       	ldi	r18, 0x00	; 0
    5802:	30 e0       	ldi	r19, 0x00	; 0
    5804:	48 e4       	ldi	r20, 0x48	; 72
    5806:	52 ec       	ldi	r21, 0xC2	; 194
    5808:	0e 94 b6 30 	call	0x616c	; 0x616c <__cmpsf2>
    580c:	88 23       	and	r24, r24
    580e:	44 f4       	brge	.+16     	; 0x5820 <get_temperature+0x64>
		temperature = BADFLOAT;
    5810:	80 e0       	ldi	r24, 0x00	; 0
    5812:	90 e8       	ldi	r25, 0x80	; 128
    5814:	a6 e2       	ldi	r26, 0x26	; 38
    5816:	b4 ec       	ldi	r27, 0xC4	; 196
    5818:	89 83       	std	Y+1, r24	; 0x01
    581a:	9a 83       	std	Y+2, r25	; 0x02
    581c:	ab 83       	std	Y+3, r26	; 0x03
    581e:	bc 83       	std	Y+4, r27	; 0x04
	}

	return(temperature);
    5820:	69 81       	ldd	r22, Y+1	; 0x01
    5822:	7a 81       	ldd	r23, Y+2	; 0x02
    5824:	8b 81       	ldd	r24, Y+3	; 0x03
    5826:	9c 81       	ldd	r25, Y+4	; 0x04

}
    5828:	24 96       	adiw	r28, 0x04	; 4
    582a:	cd bf       	out	0x3d, r28	; 61
    582c:	de bf       	out	0x3e, r29	; 62
    582e:	df 91       	pop	r29
    5830:	cf 91       	pop	r28
    5832:	08 95       	ret

00005834 <testroutine>:
#include "commands.h"
#include "errors.h"
#include "beeper.h"

void testroutine(void)
{
    5834:	cf 93       	push	r28
    5836:	df 93       	push	r29
    5838:	cd b7       	in	r28, 0x3d	; 61
    583a:	de b7       	in	r29, 0x3e	; 62
    583c:	c0 55       	subi	r28, 0x50	; 80
    583e:	d1 09       	sbc	r29, r1
    5840:	cd bf       	out	0x3d, r28	; 61
    5842:	de bf       	out	0x3e, r29	; 62

	char strbuf[80];
//	uint8_t i;

	strcpy(strbuf, "TESTING\r");
    5844:	89 e0       	ldi	r24, 0x09	; 9
    5846:	e5 ed       	ldi	r30, 0xD5	; 213
    5848:	fd eb       	ldi	r31, 0xBD	; 189
    584a:	be 01       	movw	r22, r28
    584c:	6f 5f       	subi	r22, 0xFF	; 255
    584e:	7f 4f       	sbci	r23, 0xFF	; 255
    5850:	db 01       	movw	r26, r22
    5852:	01 90       	ld	r0, Z+
    5854:	0d 92       	st	X+, r0
    5856:	8a 95       	dec	r24
    5858:	e1 f7       	brne	.-8      	; 0x5852 <testroutine+0x1e>
	send_USART(3, (uint8_t*) strbuf, strlen(strbuf));
    585a:	fb 01       	movw	r30, r22
    585c:	01 90       	ld	r0, Z+
    585e:	00 20       	and	r0, r0
    5860:	e9 f7       	brne	.-6      	; 0x585c <testroutine+0x28>
    5862:	31 97       	sbiw	r30, 0x01	; 1
    5864:	af 01       	movw	r20, r30
    5866:	46 1b       	sub	r20, r22
    5868:	57 0b       	sbc	r21, r23
    586a:	83 e0       	ldi	r24, 0x03	; 3
    586c:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <send_USART>
	get_MOTOR_MAXCURRENT(130, &value);
---*/

//	stop_MOTOR(128);

    5870:	c0 5b       	subi	r28, 0xB0	; 176
    5872:	df 4f       	sbci	r29, 0xFF	; 255
    5874:	cd bf       	out	0x3d, r28	; 61
    5876:	de bf       	out	0x3e, r29	; 62
    5878:	df 91       	pop	r29
    587a:	cf 91       	pop	r28
    587c:	08 95       	ret

0000587e <init_RTC>:
	Turn off the TCB0 timer
------------------------------------------------------------------------------*/
void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    587e:	ac 01       	movw	r20, r24
    5880:	e0 e6       	ldi	r30, 0x60	; 96
    5882:	f0 e0       	ldi	r31, 0x00	; 0
    5884:	94 8d       	ldd	r25, Z+28	; 0x1c
    5886:	9e 7f       	andi	r25, 0xFE	; 254
    5888:	88 ed       	ldi	r24, 0xD8	; 216
    588a:	84 bf       	out	0x34, r24	; 52
    588c:	94 8f       	std	Z+28, r25	; 0x1c
    588e:	01 c0       	rjmp	.+2      	; 0x5892 <init_RTC+0x14>
    5890:	00 00       	nop
    5892:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    5896:	96 fd       	sbrc	r25, 6
    5898:	fb cf       	rjmp	.-10     	; 0x5890 <init_RTC+0x12>
    589a:	e0 e6       	ldi	r30, 0x60	; 96
    589c:	f0 e0       	ldi	r31, 0x00	; 0
    589e:	94 8d       	ldd	r25, Z+28	; 0x1c
    58a0:	9b 7f       	andi	r25, 0xFB	; 251
    58a2:	28 ed       	ldi	r18, 0xD8	; 216
    58a4:	24 bf       	out	0x34, r18	; 52
    58a6:	94 8f       	std	Z+28, r25	; 0x1c
    58a8:	94 8d       	ldd	r25, Z+28	; 0x1c
    58aa:	91 60       	ori	r25, 0x01	; 1
    58ac:	24 bf       	out	0x34, r18	; 52
    58ae:	94 8f       	std	Z+28, r25	; 0x1c
    58b0:	01 c0       	rjmp	.+2      	; 0x58b4 <init_RTC+0x36>
    58b2:	00 00       	nop
    58b4:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    58b8:	91 11       	cpse	r25, r1
    58ba:	fb cf       	rjmp	.-10     	; 0x58b2 <init_RTC+0x34>
    58bc:	e0 e4       	ldi	r30, 0x40	; 64
    58be:	f1 e0       	ldi	r31, 0x01	; 1
    58c0:	42 87       	std	Z+10, r20	; 0x0a
    58c2:	53 87       	std	Z+11, r21	; 0x0b
    58c4:	82 e0       	ldi	r24, 0x02	; 2
    58c6:	87 83       	std	Z+7, r24	; 0x07
    58c8:	85 81       	ldd	r24, Z+5	; 0x05
    58ca:	81 60       	ori	r24, 0x01	; 1
    58cc:	85 83       	std	Z+5, r24	; 0x05
    58ce:	81 eb       	ldi	r24, 0xB1	; 177
    58d0:	80 83       	st	Z, r24
    58d2:	82 81       	ldd	r24, Z+2	; 0x02
    58d4:	81 60       	ori	r24, 0x01	; 1
    58d6:	82 83       	std	Z+2, r24	; 0x02
    58d8:	81 e2       	ldi	r24, 0x21	; 33
    58da:	80 8b       	std	Z+16, r24	; 0x10
    58dc:	81 e0       	ldi	r24, 0x01	; 1
    58de:	82 8b       	std	Z+18, r24	; 0x12
    58e0:	08 95       	ret

000058e2 <__vector_3>:
    58e2:	1f 92       	push	r1
    58e4:	0f 92       	push	r0
    58e6:	0f b6       	in	r0, 0x3f	; 63
    58e8:	0f 92       	push	r0
    58ea:	11 24       	eor	r1, r1
    58ec:	8f 93       	push	r24
    58ee:	9f 93       	push	r25
    58f0:	81 e0       	ldi	r24, 0x01	; 1
    58f2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>
    58f6:	80 91 18 2a 	lds	r24, 0x2A18	; 0x802a18 <timerOLED>
    58fa:	90 91 19 2a 	lds	r25, 0x2A19	; 0x802a19 <timerOLED+0x1>
    58fe:	01 96       	adiw	r24, 0x01	; 1
    5900:	80 93 18 2a 	sts	0x2A18, r24	; 0x802a18 <timerOLED>
    5904:	90 93 19 2a 	sts	0x2A19, r25	; 0x802a19 <timerOLED+0x1>
    5908:	80 e2       	ldi	r24, 0x20	; 32
    590a:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>
    590e:	80 91 3c 2a 	lds	r24, 0x2A3C	; 0x802a3c <timerSAVEENCODER>
    5912:	8f 5f       	subi	r24, 0xFF	; 255
    5914:	80 93 3c 2a 	sts	0x2A3C, r24	; 0x802a3c <timerSAVEENCODER>
    5918:	9f 91       	pop	r25
    591a:	8f 91       	pop	r24
    591c:	0f 90       	pop	r0
    591e:	0f be       	out	0x3f, r0	; 63
    5920:	0f 90       	pop	r0
    5922:	1f 90       	pop	r1
    5924:	18 95       	reti

00005926 <__vector_4>:
    5926:	1f 92       	push	r1
    5928:	0f 92       	push	r0
    592a:	0f b6       	in	r0, 0x3f	; 63
    592c:	0f 92       	push	r0
    592e:	11 24       	eor	r1, r1
    5930:	8f 93       	push	r24
    5932:	9f 93       	push	r25
    5934:	81 e0       	ldi	r24, 0x01	; 1
    5936:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7f4153>
    593a:	80 91 0b 28 	lds	r24, 0x280B	; 0x80280b <testTicks>
    593e:	90 91 0c 28 	lds	r25, 0x280C	; 0x80280c <testTicks+0x1>
    5942:	01 96       	adiw	r24, 0x01	; 1
    5944:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <testTicks>
    5948:	90 93 0c 28 	sts	0x280C, r25	; 0x80280c <testTicks+0x1>
    594c:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    5950:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    5954:	01 96       	adiw	r24, 0x01	; 1
    5956:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <USART0_ticks>
    595a:	90 93 04 28 	sts	0x2804, r25	; 0x802804 <USART0_ticks+0x1>
    595e:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    5962:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    5966:	01 96       	adiw	r24, 0x01	; 1
    5968:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <USART1_ticks>
    596c:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <USART1_ticks+0x1>
    5970:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <USART3_ticks>
    5974:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <USART3_ticks+0x1>
    5978:	01 96       	adiw	r24, 0x01	; 1
    597a:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <USART3_ticks>
    597e:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <USART3_ticks+0x1>
    5982:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    5986:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    598a:	01 96       	adiw	r24, 0x01	; 1
    598c:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <TWI_ticks>
    5990:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <TWI_ticks+0x1>
    5994:	9f 91       	pop	r25
    5996:	8f 91       	pop	r24
    5998:	0f 90       	pop	r0
    599a:	0f be       	out	0x3f, r0	; 63
    599c:	0f 90       	pop	r0
    599e:	1f 90       	pop	r1
    59a0:	18 95       	reti

000059a2 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    59a2:	1f 92       	push	r1
    59a4:	0f 92       	push	r0
    59a6:	0f b6       	in	r0, 0x3f	; 63
    59a8:	0f 92       	push	r0
    59aa:	11 24       	eor	r1, r1
    59ac:	8f 93       	push	r24

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    59ae:	81 e0       	ldi	r24, 0x01	; 1
    59b0:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>

    59b4:	8f 91       	pop	r24
    59b6:	0f 90       	pop	r0
    59b8:	0f be       	out	0x3f, r0	; 63
    59ba:	0f 90       	pop	r0
    59bc:	1f 90       	pop	r1
    59be:	18 95       	reti

000059c0 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    59c0:	e0 ea       	ldi	r30, 0xA0	; 160
    59c2:	f8 e0       	ldi	r31, 0x08	; 8
    59c4:	87 e0       	ldi	r24, 0x07	; 7
    59c6:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    59c8:	83 81       	ldd	r24, Z+3	; 0x03
    59ca:	81 60       	ori	r24, 0x01	; 1
    59cc:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    59ce:	85 81       	ldd	r24, Z+5	; 0x05
    59d0:	81 60       	ori	r24, 0x01	; 1
    59d2:	85 83       	std	Z+5, r24	; 0x05
    59d4:	08 95       	ret

000059d6 <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    59d6:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    59da:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    59de:	0f c0       	rjmp	.+30     	; 0x59fe <read_TWI+0x28>
		asm("nop");
    59e0:	00 00       	nop
		if (TWI_ticks > 50) {					// Typically 0 ticks needed
    59e2:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    59e6:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    59ea:	c3 97       	sbiw	r24, 0x33	; 51
    59ec:	40 f0       	brcs	.+16     	; 0x59fe <read_TWI+0x28>
			printError(ERR_TWI, "read_TWI timeout");
    59ee:	6e ed       	ldi	r22, 0xDE	; 222
    59f0:	7d eb       	ldi	r23, 0xBD	; 189
    59f2:	81 e9       	ldi	r24, 0x91	; 145
    59f4:	91 e0       	ldi	r25, 0x01	; 1
    59f6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
//			stop_TCB0();
			return(0xFF);
    59fa:	8f ef       	ldi	r24, 0xFF	; 255
    59fc:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    59fe:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5a02:	88 23       	and	r24, r24
    5a04:	6c f7       	brge	.-38     	; 0x59e0 <read_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK
    5a06:	e0 ea       	ldi	r30, 0xA0	; 160
    5a08:	f8 e0       	ldi	r31, 0x08	; 8
    5a0a:	84 81       	ldd	r24, Z+4	; 0x04
    5a0c:	8b 7f       	andi	r24, 0xFB	; 251
    5a0e:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;							// Next read
    5a10:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    5a12:	94 81       	ldd	r25, Z+4	; 0x04
    5a14:	92 60       	ori	r25, 0x02	; 2
    5a16:	94 83       	std	Z+4, r25	; 0x04

	return(data);

}
    5a18:	08 95       	ret

00005a1a <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    5a1a:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    5a1e:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    5a22:	0f c0       	rjmp	.+30     	; 0x5a42 <readlast_TWI+0x28>
		asm("nop");
    5a24:	00 00       	nop
		if (TWI_ticks > 50) {						// Typically 0 ticks needed
    5a26:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    5a2a:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    5a2e:	c3 97       	sbiw	r24, 0x33	; 51
    5a30:	40 f0       	brcs	.+16     	; 0x5a42 <readlast_TWI+0x28>
			printError(ERR_TWI, "readlast timeout");
    5a32:	6f ee       	ldi	r22, 0xEF	; 239
    5a34:	7d eb       	ldi	r23, 0xBD	; 189
    5a36:	81 e9       	ldi	r24, 0x91	; 145
    5a38:	91 e0       	ldi	r25, 0x01	; 1
    5a3a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
//			stop_TCB0();
			return(0xFF);
    5a3e:	8f ef       	ldi	r24, 0xFF	; 255
    5a40:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    5a42:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5a46:	88 23       	and	r24, r24
    5a48:	6c f7       	brge	.-38     	; 0x5a24 <readlast_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    5a4a:	e0 ea       	ldi	r30, 0xA0	; 160
    5a4c:	f8 e0       	ldi	r31, 0x08	; 8
    5a4e:	84 81       	ldd	r24, Z+4	; 0x04
    5a50:	84 60       	ori	r24, 0x04	; 4
    5a52:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    5a54:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    5a56:	08 95       	ret

00005a58 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    5a58:	61 30       	cpi	r22, 0x01	; 1
    5a5a:	39 f4       	brne	.+14     	; 0x5a6a <start_TWI+0x12>
		TWI0.MADDR = ((addr << 1) | 0x01);
    5a5c:	90 e0       	ldi	r25, 0x00	; 0
    5a5e:	88 0f       	add	r24, r24
    5a60:	99 1f       	adc	r25, r25
    5a62:	81 60       	ori	r24, 0x01	; 1
    5a64:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    5a68:	03 c0       	rjmp	.+6      	; 0x5a70 <start_TWI+0x18>
	} else {
		TWI0.MADDR = (addr << 1);
    5a6a:	88 0f       	add	r24, r24
    5a6c:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

	TWI_ticks = 0;
    5a70:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    5a74:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    5a78:	0f c0       	rjmp	.+30     	; 0x5a98 <start_TWI+0x40>
		asm("nop");								// Wait for addr transmission
    5a7a:	00 00       	nop
		if (TWI_ticks > 50) {
    5a7c:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    5a80:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    5a84:	c3 97       	sbiw	r24, 0x33	; 51
    5a86:	40 f0       	brcs	.+16     	; 0x5a98 <start_TWI+0x40>
			printError(ERR_TWI, "TWI start timeout");
    5a88:	60 e0       	ldi	r22, 0x00	; 0
    5a8a:	7e eb       	ldi	r23, 0xBE	; 190
    5a8c:	81 e9       	ldi	r24, 0x91	; 145
    5a8e:	91 e0       	ldi	r25, 0x01	; 1
    5a90:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
//			stop_TCB0();
			return(ERROR);
    5a94:	83 e6       	ldi	r24, 0x63	; 99
    5a96:	08 95       	ret
		TWI0.MADDR = (addr << 1);
	}

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    5a98:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5a9c:	80 7c       	andi	r24, 0xC0	; 192
    5a9e:	69 f3       	breq	.-38     	; 0x5a7a <start_TWI+0x22>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    5aa0:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5aa4:	82 ff       	sbrs	r24, 2
    5aa6:	08 c0       	rjmp	.+16     	; 0x5ab8 <start_TWI+0x60>
		printError(ERR_TWI, "TWI bus");
    5aa8:	62 e1       	ldi	r22, 0x12	; 18
    5aaa:	7e eb       	ldi	r23, 0xBE	; 190
    5aac:	81 e9       	ldi	r24, 0x91	; 145
    5aae:	91 e0       	ldi	r25, 0x01	; 1
    5ab0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    5ab4:	83 e6       	ldi	r24, 0x63	; 99
    5ab6:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    5ab8:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5abc:	83 ff       	sbrs	r24, 3
    5abe:	08 c0       	rjmp	.+16     	; 0x5ad0 <start_TWI+0x78>
		printError(ERR_TWI, "TWI arbitration");
    5ac0:	6a e1       	ldi	r22, 0x1A	; 26
    5ac2:	7e eb       	ldi	r23, 0xBE	; 190
    5ac4:	81 e9       	ldi	r24, 0x91	; 145
    5ac6:	91 e0       	ldi	r25, 0x01	; 1
    5ac8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    5acc:	83 e6       	ldi	r24, 0x63	; 99
    5ace:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    5ad0:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5ad4:	89 2f       	mov	r24, r25
    5ad6:	80 71       	andi	r24, 0x10	; 16
    5ad8:	94 ff       	sbrs	r25, 4
    5ada:	07 c0       	rjmp	.+14     	; 0x5aea <start_TWI+0x92>
		printError(ERR_TWI, "TWI no device responded");
    5adc:	6a e2       	ldi	r22, 0x2A	; 42
    5ade:	7e eb       	ldi	r23, 0xBE	; 190
    5ae0:	81 e9       	ldi	r24, 0x91	; 145
    5ae2:	91 e0       	ldi	r25, 0x01	; 1
    5ae4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    5ae8:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    5aea:	08 95       	ret

00005aec <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    5aec:	87 e0       	ldi	r24, 0x07	; 7
    5aee:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    5af2:	08 95       	ret

00005af4 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
    5af4:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    5af8:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    5afc:	10 c0       	rjmp	.+32     	; 0x5b1e <write_TWI+0x2a>
		asm("nop");
    5afe:	00 00       	nop
		if (TWI_ticks > 50) {
    5b00:	20 91 05 28 	lds	r18, 0x2805	; 0x802805 <TWI_ticks>
    5b04:	30 91 06 28 	lds	r19, 0x2806	; 0x802806 <TWI_ticks+0x1>
    5b08:	23 33       	cpi	r18, 0x33	; 51
    5b0a:	31 05       	cpc	r19, r1
    5b0c:	40 f0       	brcs	.+16     	; 0x5b1e <write_TWI+0x2a>
			printError(ERR_TWI, "write_TWI error1");
    5b0e:	62 e4       	ldi	r22, 0x42	; 66
    5b10:	7e eb       	ldi	r23, 0xBE	; 190
    5b12:	81 e9       	ldi	r24, 0x91	; 145
    5b14:	91 e0       	ldi	r25, 0x01	; 1
    5b16:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
//			stop_TCB0();
			return(ERROR);
    5b1a:	83 e6       	ldi	r24, 0x63	; 99
    5b1c:	08 95       	ret
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    5b1e:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5b22:	96 ff       	sbrs	r25, 6
    5b24:	ec cf       	rjmp	.-40     	; 0x5afe <write_TWI+0xa>
			return(ERROR);
		}
	}
//	stop_TCB0();

	TWI0.MDATA = data;
    5b26:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	TWI_ticks = 0;
    5b2a:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    5b2e:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    5b32:	0f c0       	rjmp	.+30     	; 0x5b52 <write_TWI+0x5e>
		asm("nop");
    5b34:	00 00       	nop
		if (TWI_ticks > 50) {
    5b36:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    5b3a:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    5b3e:	c3 97       	sbiw	r24, 0x33	; 51
    5b40:	40 f0       	brcs	.+16     	; 0x5b52 <write_TWI+0x5e>
			printError(ERR_TWI, "write_TWI error2");
    5b42:	63 e5       	ldi	r22, 0x53	; 83
    5b44:	7e eb       	ldi	r23, 0xBE	; 190
    5b46:	81 e9       	ldi	r24, 0x91	; 145
    5b48:	91 e0       	ldi	r25, 0x01	; 1
    5b4a:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
//			stop_TCB0();
			return(ERROR);
    5b4e:	83 e6       	ldi	r24, 0x63	; 99
    5b50:	08 95       	ret

	TWI0.MDATA = data;

	TWI_ticks = 0;
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    5b52:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5b56:	86 ff       	sbrs	r24, 6
    5b58:	ed cf       	rjmp	.-38     	; 0x5b34 <write_TWI+0x40>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    5b5a:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    5b5e:	89 2f       	mov	r24, r25
    5b60:	80 71       	andi	r24, 0x10	; 16
    5b62:	94 ff       	sbrs	r25, 4
    5b64:	07 c0       	rjmp	.+14     	; 0x5b74 <write_TWI+0x80>
		printError(ERR_TWI, "ACK not received");
    5b66:	64 e6       	ldi	r22, 0x64	; 100
    5b68:	7e eb       	ldi	r23, 0xBE	; 190
    5b6a:	81 e9       	ldi	r24, 0x91	; 145
    5b6c:	91 e0       	ldi	r25, 0x01	; 1
    5b6e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <printError>
		return(ERROR);
    5b72:	83 e6       	ldi	r24, 0x63	; 99
	} else {
		return(NOERROR);
	}

}
    5b74:	08 95       	ret

00005b76 <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    5b76:	e0 e0       	ldi	r30, 0x00	; 0
    5b78:	f4 e0       	ldi	r31, 0x04	; 4
    5b7a:	81 e0       	ldi	r24, 0x01	; 1
    5b7c:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    5b7e:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    5b80:	e0 e0       	ldi	r30, 0x00	; 0
    5b82:	f8 e0       	ldi	r31, 0x08	; 8
    5b84:	2b e5       	ldi	r18, 0x5B	; 91
    5b86:	31 e0       	ldi	r19, 0x01	; 1
    5b88:	20 87       	std	Z+8, r18	; 0x08
    5b8a:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    5b8c:	95 81       	ldd	r25, Z+5	; 0x05
    5b8e:	90 68       	ori	r25, 0x80	; 128
    5b90:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    5b92:	96 81       	ldd	r25, Z+6	; 0x06
    5b94:	90 64       	ori	r25, 0x40	; 64
    5b96:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    5b98:	96 81       	ldd	r25, Z+6	; 0x06
    5b9a:	90 68       	ori	r25, 0x80	; 128
    5b9c:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;					// Set up send/receive buffers
    5b9e:	10 92 49 2f 	sts	0x2F49, r1	; 0x802f49 <send0_buf+0xfe>
	send0_buf.tail = 0;
    5ba2:	10 92 4a 2f 	sts	0x2F4A, r1	; 0x802f4a <send0_buf+0xff>
	send0_buf.done = YES;
    5ba6:	80 93 4e 2f 	sts	0x2F4E, r24	; 0x802f4e <send0_buf+0x103>
	recv0_buf.head = 0;
    5baa:	10 92 45 2e 	sts	0x2E45, r1	; 0x802e45 <recv0_buf+0xfe>
	recv0_buf.tail = 0;
    5bae:	10 92 46 2e 	sts	0x2E46, r1	; 0x802e46 <recv0_buf+0xff>
	recv0_buf.data[0] = '\0';
    5bb2:	10 92 47 2d 	sts	0x2D47, r1	; 0x802d47 <recv0_buf>
	recv0_buf.length = 0;
    5bb6:	10 92 48 2e 	sts	0x2E48, r1	; 0x802e48 <recv0_buf+0x101>
	recv0_buf.done = NO;
    5bba:	10 92 4a 2e 	sts	0x2E4A, r1	; 0x802e4a <recv0_buf+0x103>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    5bbe:	e0 e4       	ldi	r30, 0x40	; 64
    5bc0:	f4 e0       	ldi	r31, 0x04	; 4
    5bc2:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    5bc4:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    5bc6:	e0 e2       	ldi	r30, 0x20	; 32
    5bc8:	f8 e0       	ldi	r31, 0x08	; 8
    5bca:	20 87       	std	Z+8, r18	; 0x08
    5bcc:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    5bce:	95 81       	ldd	r25, Z+5	; 0x05
    5bd0:	90 68       	ori	r25, 0x80	; 128
    5bd2:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    5bd4:	96 81       	ldd	r25, Z+6	; 0x06
    5bd6:	90 64       	ori	r25, 0x40	; 64
    5bd8:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    5bda:	96 81       	ldd	r25, Z+6	; 0x06
    5bdc:	90 68       	ori	r25, 0x80	; 128
    5bde:	96 83       	std	Z+6, r25	; 0x06

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    5be0:	e0 e2       	ldi	r30, 0x20	; 32
    5be2:	f4 e0       	ldi	r31, 0x04	; 4
    5be4:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    5be6:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    5be8:	e0 e6       	ldi	r30, 0x60	; 96
    5bea:	f8 e0       	ldi	r31, 0x08	; 8
    5bec:	27 e4       	ldi	r18, 0x47	; 71
    5bee:	30 e1       	ldi	r19, 0x10	; 16
    5bf0:	20 87       	std	Z+8, r18	; 0x08
    5bf2:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    5bf4:	95 81       	ldd	r25, Z+5	; 0x05
    5bf6:	90 68       	ori	r25, 0x80	; 128
    5bf8:	95 83       	std	Z+5, r25	; 0x05
	USART3.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    5bfa:	96 81       	ldd	r25, Z+6	; 0x06
    5bfc:	90 64       	ori	r25, 0x40	; 64
    5bfe:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    5c00:	96 81       	ldd	r25, Z+6	; 0x06
    5c02:	90 68       	ori	r25, 0x80	; 128
    5c04:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    5c06:	80 93 4f 31 	sts	0x314F, r24	; 0x80314f <send3_buf+0xff>
	recv3_buf.done = NO;
    5c0a:	10 92 4e 30 	sts	0x304E, r1	; 0x80304e <recv3_buf+0xff>
    5c0e:	08 95       	ret

00005c10 <send_USART>:
		"transmit data register empty" interrupt (DREIE). The USARTn_DRE_vect
		puts the bytes into the transmit register until the tail catches up
		to the head of the circular buffer.
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    5c10:	0f 93       	push	r16
    5c12:	1f 93       	push	r17
    5c14:	cf 93       	push	r28
    5c16:	df 93       	push	r29
    5c18:	eb 01       	movw	r28, r22
    5c1a:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    5c1c:	81 30       	cpi	r24, 0x01	; 1
    5c1e:	b1 f1       	breq	.+108    	; 0x5c8c <send_USART+0x7c>
    5c20:	20 f0       	brcs	.+8      	; 0x5c2a <send_USART+0x1a>
    5c22:	83 30       	cpi	r24, 0x03	; 3
    5c24:	09 f4       	brne	.+2      	; 0x5c28 <send_USART+0x18>
    5c26:	6f c0       	rjmp	.+222    	; 0x5d06 <send_USART+0xf6>
    5c28:	9d c0       	rjmp	.+314    	; 0x5d64 <send_USART+0x154>
		case 0:		// Ethernet port
			send0_buf.done = NO;
    5c2a:	10 92 4e 2f 	sts	0x2F4E, r1	; 0x802f4e <send0_buf+0x103>
			for (i = 0; i < nbytes; i++) {
    5c2e:	20 e0       	ldi	r18, 0x00	; 0
    5c30:	11 c0       	rjmp	.+34     	; 0x5c54 <send_USART+0x44>
				send0_buf.data[send0_buf.head] = *data++;
    5c32:	e9 e4       	ldi	r30, 0x49	; 73
    5c34:	ff e2       	ldi	r31, 0x2F	; 47
    5c36:	80 81       	ld	r24, Z
    5c38:	90 e0       	ldi	r25, 0x00	; 0
    5c3a:	38 81       	ld	r19, Y
    5c3c:	dc 01       	movw	r26, r24
    5c3e:	a5 5b       	subi	r26, 0xB5	; 181
    5c40:	b1 4d       	sbci	r27, 0xD1	; 209
    5c42:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    5c44:	01 96       	adiw	r24, 0x01	; 1
    5c46:	6e ef       	ldi	r22, 0xFE	; 254
    5c48:	70 e0       	ldi	r23, 0x00	; 0
    5c4a:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__divmodhi4>
    5c4e:	80 83       	st	Z, r24
	uint16_t crc;

	switch (port) {
		case 0:		// Ethernet port
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    5c50:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    5c52:	21 96       	adiw	r28, 0x01	; 1
	uint16_t crc;

	switch (port) {
		case 0:		// Ethernet port
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    5c54:	21 17       	cp	r18, r17
    5c56:	68 f3       	brcs	.-38     	; 0x5c32 <send_USART+0x22>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    5c58:	e0 e0       	ldi	r30, 0x00	; 0
    5c5a:	f8 e0       	ldi	r31, 0x08	; 8
    5c5c:	85 81       	ldd	r24, Z+5	; 0x05
    5c5e:	80 62       	ori	r24, 0x20	; 32
    5c60:	85 83       	std	Z+5, r24	; 0x05
			USART0_ticks = 0;
    5c62:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <USART0_ticks>
    5c66:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <USART0_ticks+0x1>
			while (send0_buf.done == NO) {
    5c6a:	0b c0       	rjmp	.+22     	; 0x5c82 <send_USART+0x72>
				if (USART0_ticks > 100) {				// 0.1 second enough?
    5c6c:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    5c70:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    5c74:	85 36       	cpi	r24, 0x65	; 101
    5c76:	91 05       	cpc	r25, r1
    5c78:	20 f0       	brcs	.+8      	; 0x5c82 <send_USART+0x72>
					send0_buf.done = YES;
    5c7a:	81 e0       	ldi	r24, 0x01	; 1
    5c7c:	80 93 4e 2f 	sts	0x2F4E, r24	; 0x802f4e <send0_buf+0x103>
					return;
    5c80:	71 c0       	rjmp	.+226    	; 0x5d64 <send_USART+0x154>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			USART0_ticks = 0;
			while (send0_buf.done == NO) {
    5c82:	80 91 4e 2f 	lds	r24, 0x2F4E	; 0x802f4e <send0_buf+0x103>
    5c86:	88 23       	and	r24, r24
    5c88:	89 f3       	breq	.-30     	; 0x5c6c <send_USART+0x5c>
    5c8a:	6c c0       	rjmp	.+216    	; 0x5d64 <send_USART+0x154>
				}
			}
			break;

		case 1:		// Collimator motor controllers
			crc = crc16(data, nbytes);
    5c8c:	64 2f       	mov	r22, r20
    5c8e:	70 e0       	ldi	r23, 0x00	; 0
    5c90:	ce 01       	movw	r24, r28
    5c92:	0e 94 58 19 	call	0x32b0	; 0x32b0 <crc16>
    5c96:	48 2f       	mov	r20, r24
    5c98:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    5c9a:	20 e0       	ldi	r18, 0x00	; 0
    5c9c:	11 c0       	rjmp	.+34     	; 0x5cc0 <send_USART+0xb0>
				send1_buf.data[send1_buf.head] = *data++;
    5c9e:	ef e4       	ldi	r30, 0x4F	; 79
    5ca0:	f2 e3       	ldi	r31, 0x32	; 50
    5ca2:	80 81       	ld	r24, Z
    5ca4:	90 e0       	ldi	r25, 0x00	; 0
    5ca6:	38 81       	ld	r19, Y
    5ca8:	dc 01       	movw	r26, r24
    5caa:	af 5a       	subi	r26, 0xAF	; 175
    5cac:	be 4c       	sbci	r27, 0xCE	; 206
    5cae:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    5cb0:	01 96       	adiw	r24, 0x01	; 1
    5cb2:	6e ef       	ldi	r22, 0xFE	; 254
    5cb4:	70 e0       	ldi	r23, 0x00	; 0
    5cb6:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__divmodhi4>
    5cba:	80 83       	st	Z, r24
			}
			break;

		case 1:		// Collimator motor controllers
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    5cbc:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    5cbe:	21 96       	adiw	r28, 0x01	; 1
			}
			break;

		case 1:		// Collimator motor controllers
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    5cc0:	21 17       	cp	r18, r17
    5cc2:	68 f3       	brcs	.-38     	; 0x5c9e <send_USART+0x8e>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    5cc4:	ef e4       	ldi	r30, 0x4F	; 79
    5cc6:	f2 e3       	ldi	r31, 0x32	; 50
    5cc8:	80 81       	ld	r24, Z
    5cca:	90 e0       	ldi	r25, 0x00	; 0
    5ccc:	dc 01       	movw	r26, r24
    5cce:	af 5a       	subi	r26, 0xAF	; 175
    5cd0:	be 4c       	sbci	r27, 0xCE	; 206
    5cd2:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    5cd4:	01 96       	adiw	r24, 0x01	; 1
    5cd6:	2e ef       	ldi	r18, 0xFE	; 254
    5cd8:	30 e0       	ldi	r19, 0x00	; 0
    5cda:	b9 01       	movw	r22, r18
    5cdc:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    5ce0:	90 e0       	ldi	r25, 0x00	; 0
    5ce2:	dc 01       	movw	r26, r24
    5ce4:	af 5a       	subi	r26, 0xAF	; 175
    5ce6:	be 4c       	sbci	r27, 0xCE	; 206
    5ce8:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    5cea:	01 96       	adiw	r24, 0x01	; 1
    5cec:	b9 01       	movw	r22, r18
    5cee:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__divmodhi4>
    5cf2:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    5cf4:	1e 5f       	subi	r17, 0xFE	; 254
    5cf6:	10 93 51 32 	sts	0x3251, r17	; 0x803251 <send1_buf+0x100>
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    5cfa:	e0 e2       	ldi	r30, 0x20	; 32
    5cfc:	f8 e0       	ldi	r31, 0x08	; 8
    5cfe:	85 81       	ldd	r24, Z+5	; 0x05
    5d00:	80 62       	ori	r24, 0x20	; 32
    5d02:	85 83       	std	Z+5, r24	; 0x05
			break;
    5d04:	2f c0       	rjmp	.+94     	; 0x5d64 <send_USART+0x154>

		case 3:		// LN2 controller
			send3_buf.nbytes = nbytes;
    5d06:	40 93 4e 31 	sts	0x314E, r20	; 0x80314e <send3_buf+0xfe>
			send3_buf.nxfrd = 0;
    5d0a:	10 92 50 31 	sts	0x3150, r1	; 0x803150 <send3_buf+0x100>
			send3_buf.done = NO;
    5d0e:	10 92 4f 31 	sts	0x314F, r1	; 0x80314f <send3_buf+0xff>
			for (i = 0; i < nbytes; i++) {
    5d12:	80 e0       	ldi	r24, 0x00	; 0
    5d14:	08 c0       	rjmp	.+16     	; 0x5d26 <send_USART+0x116>
				send3_buf.data[i] = *data++;
    5d16:	e8 2f       	mov	r30, r24
    5d18:	f0 e0       	ldi	r31, 0x00	; 0
    5d1a:	98 81       	ld	r25, Y
    5d1c:	e0 5b       	subi	r30, 0xB0	; 176
    5d1e:	ff 4c       	sbci	r31, 0xCF	; 207
    5d20:	90 83       	st	Z, r25

		case 3:		// LN2 controller
			send3_buf.nbytes = nbytes;
			send3_buf.nxfrd = 0;
			send3_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    5d22:	8f 5f       	subi	r24, 0xFF	; 255
				send3_buf.data[i] = *data++;
    5d24:	21 96       	adiw	r28, 0x01	; 1

		case 3:		// LN2 controller
			send3_buf.nbytes = nbytes;
			send3_buf.nxfrd = 0;
			send3_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    5d26:	81 17       	cp	r24, r17
    5d28:	b0 f3       	brcs	.-20     	; 0x5d16 <send_USART+0x106>
				send3_buf.data[i] = *data++;
			}
			USART3_ticks = 0;
    5d2a:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <USART3_ticks>
    5d2e:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <USART3_ticks+0x1>
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    5d32:	e0 e6       	ldi	r30, 0x60	; 96
    5d34:	f8 e0       	ldi	r31, 0x08	; 8
    5d36:	85 81       	ldd	r24, Z+5	; 0x05
    5d38:	80 62       	ori	r24, 0x20	; 32
    5d3a:	85 83       	std	Z+5, r24	; 0x05
			while (send3_buf.done == NO) {
    5d3c:	0f c0       	rjmp	.+30     	; 0x5d5c <send_USART+0x14c>
				if (USART3_ticks > 500) {		// 1 second enough?
    5d3e:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <USART3_ticks>
    5d42:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <USART3_ticks+0x1>
    5d46:	85 3f       	cpi	r24, 0xF5	; 245
    5d48:	91 40       	sbci	r25, 0x01	; 1
    5d4a:	40 f0       	brcs	.+16     	; 0x5d5c <send_USART+0x14c>
printLine("FAILED SENDING CR");
    5d4c:	85 e7       	ldi	r24, 0x75	; 117
    5d4e:	9e eb       	ldi	r25, 0xBE	; 190
    5d50:	0e 94 cb 03 	call	0x796	; 0x796 <printLine>
					send3_buf.done = YES;
    5d54:	81 e0       	ldi	r24, 0x01	; 1
    5d56:	80 93 4f 31 	sts	0x314F, r24	; 0x80314f <send3_buf+0xff>
					return;
    5d5a:	04 c0       	rjmp	.+8      	; 0x5d64 <send_USART+0x154>
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[i] = *data++;
			}
			USART3_ticks = 0;
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			while (send3_buf.done == NO) {
    5d5c:	80 91 4f 31 	lds	r24, 0x314F	; 0x80314f <send3_buf+0xff>
    5d60:	88 23       	and	r24, r24
    5d62:	69 f3       	breq	.-38     	; 0x5d3e <send_USART+0x12e>

		default:
			break;
	}

}
    5d64:	df 91       	pop	r29
    5d66:	cf 91       	pop	r28
    5d68:	1f 91       	pop	r17
    5d6a:	0f 91       	pop	r16
    5d6c:	08 95       	ret

00005d6e <send_USART1>:

void send_USART1(uint8_t *data, uint8_t nbytes)
{
    5d6e:	dc 01       	movw	r26, r24
	char strbuf[80];
	sprintf(strbuf, " sending nbytes=%d", nbytes);
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
    5d70:	10 92 42 2c 	sts	0x2C42, r1	; 0x802c42 <ser_send1+0xff>
	ser_send1.n2xfr = nbytes;
    5d74:	60 93 41 2c 	sts	0x2C41, r22	; 0x802c41 <ser_send1+0xfe>
	for (i = 0; i < nbytes; i++) {
    5d78:	90 e0       	ldi	r25, 0x00	; 0
    5d7a:	08 c0       	rjmp	.+16     	; 0x5d8c <send_USART1+0x1e>
		ser_send1.data[i] = *data++;
    5d7c:	e9 2f       	mov	r30, r25
    5d7e:	f0 e0       	ldi	r31, 0x00	; 0
    5d80:	8c 91       	ld	r24, X
    5d82:	ed 5b       	subi	r30, 0xBD	; 189
    5d84:	f4 4d       	sbci	r31, 0xD4	; 212
    5d86:	80 83       	st	Z, r24
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
	ser_send1.n2xfr = nbytes;
	for (i = 0; i < nbytes; i++) {
    5d88:	9f 5f       	subi	r25, 0xFF	; 255
		ser_send1.data[i] = *data++;
    5d8a:	11 96       	adiw	r26, 0x01	; 1
	printLine(strbuf);
#endif

	ser_send1.nxfrd = 0;
	ser_send1.n2xfr = nbytes;
	for (i = 0; i < nbytes; i++) {
    5d8c:	96 17       	cp	r25, r22
    5d8e:	b0 f3       	brcs	.-20     	; 0x5d7c <send_USART1+0xe>
		sprintf(strbuf, " n=%d: %d (0x%02X)", i, ser_send1.data[i], ser_send1.data[i]);
		printLine(strbuf);
#endif
	}

	USART1.CTRLA |= USART_DREIE_bm;		// Enable DRE interrupts
    5d90:	e0 e2       	ldi	r30, 0x20	; 32
    5d92:	f8 e0       	ldi	r31, 0x08	; 8
    5d94:	85 81       	ldd	r24, Z+5	; 0x05
    5d96:	80 62       	ori	r24, 0x20	; 32
    5d98:	85 83       	std	Z+5, r24	; 0x05
    5d9a:	08 95       	ret

00005d9c <__vector_26>:
/*------------------------------------------------------------------------------
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    5d9c:	1f 92       	push	r1
    5d9e:	0f 92       	push	r0
    5da0:	0f b6       	in	r0, 0x3f	; 63
    5da2:	0f 92       	push	r0
    5da4:	11 24       	eor	r1, r1
    5da6:	8f 93       	push	r24
    5da8:	af 93       	push	r26
    5daa:	bf 93       	push	r27
    5dac:	ef 93       	push	r30
    5dae:	ff 93       	push	r31

	ser_recv1.data[ser_recv1.nxfrd++] = USART1.RXDATAL;
    5db0:	a2 e4       	ldi	r26, 0x42	; 66
    5db2:	bb e2       	ldi	r27, 0x2B	; 43
    5db4:	ec 91       	ld	r30, X
    5db6:	81 e0       	ldi	r24, 0x01	; 1
    5db8:	8e 0f       	add	r24, r30
    5dba:	8c 93       	st	X, r24
    5dbc:	f0 e0       	ldi	r31, 0x00	; 0
    5dbe:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
    5dc2:	ed 5b       	subi	r30, 0xBD	; 189
    5dc4:	f5 4d       	sbci	r31, 0xD5	; 213
    5dc6:	80 83       	st	Z, r24

}
    5dc8:	ff 91       	pop	r31
    5dca:	ef 91       	pop	r30
    5dcc:	bf 91       	pop	r27
    5dce:	af 91       	pop	r26
    5dd0:	8f 91       	pop	r24
    5dd2:	0f 90       	pop	r0
    5dd4:	0f be       	out	0x3f, r0	; 63
    5dd6:	0f 90       	pop	r0
    5dd8:	1f 90       	pop	r1
    5dda:	18 95       	reti

00005ddc <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    5ddc:	1f 92       	push	r1
    5dde:	0f 92       	push	r0
    5de0:	0f b6       	in	r0, 0x3f	; 63
    5de2:	0f 92       	push	r0
    5de4:	11 24       	eor	r1, r1
    5de6:	8f 93       	push	r24
    5de8:	9f 93       	push	r25
    5dea:	af 93       	push	r26
    5dec:	bf 93       	push	r27
    5dee:	cf 93       	push	r28
    5df0:	df 93       	push	r29
    5df2:	ef 93       	push	r30
    5df4:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    5df6:	a0 e2       	ldi	r26, 0x20	; 32
    5df8:	b8 e0       	ldi	r27, 0x08	; 8
    5dfa:	15 96       	adiw	r26, 0x05	; 5
    5dfc:	8c 91       	ld	r24, X
    5dfe:	15 97       	sbiw	r26, 0x05	; 5
    5e00:	8f 7d       	andi	r24, 0xDF	; 223
    5e02:	15 96       	adiw	r26, 0x05	; 5
    5e04:	8c 93       	st	X, r24
    5e06:	15 97       	sbiw	r26, 0x05	; 5
	USART1.TXDATAL = ser_send1.data[ser_send1.nxfrd++];
    5e08:	c2 e4       	ldi	r28, 0x42	; 66
    5e0a:	dc e2       	ldi	r29, 0x2C	; 44
    5e0c:	e8 81       	ld	r30, Y
    5e0e:	81 e0       	ldi	r24, 0x01	; 1
    5e10:	8e 0f       	add	r24, r30
    5e12:	88 83       	st	Y, r24
    5e14:	f0 e0       	ldi	r31, 0x00	; 0
    5e16:	ed 5b       	subi	r30, 0xBD	; 189
    5e18:	f4 4d       	sbci	r31, 0xD4	; 212
    5e1a:	90 81       	ld	r25, Z
    5e1c:	12 96       	adiw	r26, 0x02	; 2
    5e1e:	9c 93       	st	X, r25
	if (ser_send1.nxfrd < ser_send1.n2xfr) {
    5e20:	90 91 41 2c 	lds	r25, 0x2C41	; 0x802c41 <ser_send1+0xfe>
    5e24:	89 17       	cp	r24, r25
    5e26:	28 f4       	brcc	.+10     	; 0x5e32 <__vector_27+0x56>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts	
    5e28:	e0 e2       	ldi	r30, 0x20	; 32
    5e2a:	f8 e0       	ldi	r31, 0x08	; 8
    5e2c:	85 81       	ldd	r24, Z+5	; 0x05
    5e2e:	80 62       	ori	r24, 0x20	; 32
    5e30:	85 83       	std	Z+5, r24	; 0x05
	}

}
    5e32:	ff 91       	pop	r31
    5e34:	ef 91       	pop	r30
    5e36:	df 91       	pop	r29
    5e38:	cf 91       	pop	r28
    5e3a:	bf 91       	pop	r27
    5e3c:	af 91       	pop	r26
    5e3e:	9f 91       	pop	r25
    5e40:	8f 91       	pop	r24
    5e42:	0f 90       	pop	r0
    5e44:	0f be       	out	0x3f, r0	; 63
    5e46:	0f 90       	pop	r0
    5e48:	1f 90       	pop	r1
    5e4a:	18 95       	reti

00005e4c <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    5e4c:	1f 92       	push	r1
    5e4e:	0f 92       	push	r0
    5e50:	0f b6       	in	r0, 0x3f	; 63
    5e52:	0f 92       	push	r0
    5e54:	11 24       	eor	r1, r1
    5e56:	5f 93       	push	r21
    5e58:	6f 93       	push	r22
    5e5a:	7f 93       	push	r23
    5e5c:	8f 93       	push	r24
    5e5e:	9f 93       	push	r25
    5e60:	af 93       	push	r26
    5e62:	bf 93       	push	r27
    5e64:	ef 93       	push	r30
    5e66:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    5e68:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if (recv0_buf.length < (BUFSIZE-1)) {		// BUFSIZE-1 to make room for the terminating \0
    5e6c:	80 91 48 2e 	lds	r24, 0x2E48	; 0x802e48 <recv0_buf+0x101>
    5e70:	8d 3f       	cpi	r24, 0xFD	; 253
    5e72:	10 f5       	brcc	.+68     	; 0x5eb8 <__vector_17+0x6c>
//		c = USART0.RXDATAL;
		if ((char) c == '\r') {
    5e74:	9d 30       	cpi	r25, 0x0D	; 13
    5e76:	51 f4       	brne	.+20     	; 0x5e8c <__vector_17+0x40>
			recv0_buf.done = YES;
    5e78:	81 e0       	ldi	r24, 0x01	; 1
    5e7a:	80 93 4a 2e 	sts	0x2E4A, r24	; 0x802e4a <recv0_buf+0x103>
			recv0_buf.data[recv0_buf.head] = '\0';
    5e7e:	e0 91 45 2e 	lds	r30, 0x2E45	; 0x802e45 <recv0_buf+0xfe>
    5e82:	f0 e0       	ldi	r31, 0x00	; 0
    5e84:	e9 5b       	subi	r30, 0xB9	; 185
    5e86:	f2 4d       	sbci	r31, 0xD2	; 210
    5e88:	10 82       	st	Z, r1
    5e8a:	06 c0       	rjmp	.+12     	; 0x5e98 <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    5e8c:	e0 91 45 2e 	lds	r30, 0x2E45	; 0x802e45 <recv0_buf+0xfe>
    5e90:	f0 e0       	ldi	r31, 0x00	; 0
    5e92:	e9 5b       	subi	r30, 0xB9	; 185
    5e94:	f2 4d       	sbci	r31, 0xD2	; 210
    5e96:	90 83       	st	Z, r25
		}
		recv0_buf.length++;
    5e98:	e8 e4       	ldi	r30, 0x48	; 72
    5e9a:	fe e2       	ldi	r31, 0x2E	; 46
    5e9c:	80 81       	ld	r24, Z
    5e9e:	8f 5f       	subi	r24, 0xFF	; 255
    5ea0:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    5ea2:	e5 e4       	ldi	r30, 0x45	; 69
    5ea4:	fe e2       	ldi	r31, 0x2E	; 46
    5ea6:	80 81       	ld	r24, Z
    5ea8:	90 e0       	ldi	r25, 0x00	; 0
    5eaa:	01 96       	adiw	r24, 0x01	; 1
    5eac:	6e ef       	ldi	r22, 0xFE	; 254
    5eae:	70 e0       	ldi	r23, 0x00	; 0
    5eb0:	0e 94 ff 35 	call	0x6bfe	; 0x6bfe <__divmodhi4>
    5eb4:	80 83       	st	Z, r24
    5eb6:	0a c0       	rjmp	.+20     	; 0x5ecc <__vector_17+0x80>
	} else {
		recv0_buf.head = 0;
    5eb8:	10 92 45 2e 	sts	0x2E45, r1	; 0x802e45 <recv0_buf+0xfe>
		recv0_buf.tail = 0;
    5ebc:	10 92 46 2e 	sts	0x2E46, r1	; 0x802e46 <recv0_buf+0xff>
		recv0_buf.data[0] = '\0';
    5ec0:	10 92 47 2d 	sts	0x2D47, r1	; 0x802d47 <recv0_buf>
		recv0_buf.length = 0;
    5ec4:	10 92 48 2e 	sts	0x2E48, r1	; 0x802e48 <recv0_buf+0x101>
		recv0_buf.done = NO;
    5ec8:	10 92 4a 2e 	sts	0x2E4A, r1	; 0x802e4a <recv0_buf+0x103>
	}
}
    5ecc:	ff 91       	pop	r31
    5ece:	ef 91       	pop	r30
    5ed0:	bf 91       	pop	r27
    5ed2:	af 91       	pop	r26
    5ed4:	9f 91       	pop	r25
    5ed6:	8f 91       	pop	r24
    5ed8:	7f 91       	pop	r23
    5eda:	6f 91       	pop	r22
    5edc:	5f 91       	pop	r21
    5ede:	0f 90       	pop	r0
    5ee0:	0f be       	out	0x3f, r0	; 63
    5ee2:	0f 90       	pop	r0
    5ee4:	1f 90       	pop	r1
    5ee6:	18 95       	reti

00005ee8 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    5ee8:	1f 92       	push	r1
    5eea:	0f 92       	push	r0
    5eec:	0f b6       	in	r0, 0x3f	; 63
    5eee:	0f 92       	push	r0
    5ef0:	11 24       	eor	r1, r1
    5ef2:	2f 93       	push	r18
    5ef4:	8f 93       	push	r24
    5ef6:	9f 93       	push	r25
    5ef8:	ef 93       	push	r30
    5efa:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    5efc:	e0 e0       	ldi	r30, 0x00	; 0
    5efe:	f8 e0       	ldi	r31, 0x08	; 8
    5f00:	85 81       	ldd	r24, Z+5	; 0x05
    5f02:	8f 7d       	andi	r24, 0xDF	; 223
    5f04:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    5f06:	80 91 49 2f 	lds	r24, 0x2F49	; 0x802f49 <send0_buf+0xfe>
    5f0a:	e0 91 4a 2f 	lds	r30, 0x2F4A	; 0x802f4a <send0_buf+0xff>
    5f0e:	8e 17       	cp	r24, r30
    5f10:	d1 f0       	breq	.+52     	; 0x5f46 <__vector_18+0x5e>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    5f12:	81 e0       	ldi	r24, 0x01	; 1
    5f14:	8e 0f       	add	r24, r30
    5f16:	80 93 4a 2f 	sts	0x2F4A, r24	; 0x802f4a <send0_buf+0xff>
    5f1a:	f0 e0       	ldi	r31, 0x00	; 0
    5f1c:	e5 5b       	subi	r30, 0xB5	; 181
    5f1e:	f1 4d       	sbci	r31, 0xD1	; 209
    5f20:	90 81       	ld	r25, Z
    5f22:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    5f26:	91 e0       	ldi	r25, 0x01	; 1
    5f28:	8e 3f       	cpi	r24, 0xFE	; 254
    5f2a:	08 f4       	brcc	.+2      	; 0x5f2e <__vector_18+0x46>
    5f2c:	90 e0       	ldi	r25, 0x00	; 0
    5f2e:	91 95       	neg	r25
    5f30:	29 2f       	mov	r18, r25
    5f32:	22 0f       	add	r18, r18
    5f34:	82 1b       	sub	r24, r18
    5f36:	80 93 4a 2f 	sts	0x2F4A, r24	; 0x802f4a <send0_buf+0xff>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    5f3a:	e0 e0       	ldi	r30, 0x00	; 0
    5f3c:	f8 e0       	ldi	r31, 0x08	; 8
    5f3e:	85 81       	ldd	r24, Z+5	; 0x05
    5f40:	80 62       	ori	r24, 0x20	; 32
    5f42:	85 83       	std	Z+5, r24	; 0x05
    5f44:	03 c0       	rjmp	.+6      	; 0x5f4c <__vector_18+0x64>
	} else {
		send0_buf.done = YES;
    5f46:	81 e0       	ldi	r24, 0x01	; 1
    5f48:	80 93 4e 2f 	sts	0x2F4E, r24	; 0x802f4e <send0_buf+0x103>
	}

}
    5f4c:	ff 91       	pop	r31
    5f4e:	ef 91       	pop	r30
    5f50:	9f 91       	pop	r25
    5f52:	8f 91       	pop	r24
    5f54:	2f 91       	pop	r18
    5f56:	0f 90       	pop	r0
    5f58:	0f be       	out	0x3f, r0	; 63
    5f5a:	0f 90       	pop	r0
    5f5c:	1f 90       	pop	r1
    5f5e:	18 95       	reti

00005f60 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    5f60:	1f 92       	push	r1
    5f62:	0f 92       	push	r0
    5f64:	0f b6       	in	r0, 0x3f	; 63
    5f66:	0f 92       	push	r0
    5f68:	11 24       	eor	r1, r1
    5f6a:	2f 93       	push	r18
    5f6c:	3f 93       	push	r19
    5f6e:	8f 93       	push	r24
    5f70:	9f 93       	push	r25
    5f72:	ef 93       	push	r30
    5f74:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    5f76:	90 91 60 08 	lds	r25, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>

	recv3_buf.data[recv3_buf.nxfrd] = c;
    5f7a:	80 91 4f 30 	lds	r24, 0x304F	; 0x80304f <recv3_buf+0x100>
    5f7e:	28 2f       	mov	r18, r24
    5f80:	30 e0       	ldi	r19, 0x00	; 0
    5f82:	f9 01       	movw	r30, r18
    5f84:	e1 5b       	subi	r30, 0xB1	; 177
    5f86:	f0 4d       	sbci	r31, 0xD0	; 208
    5f88:	90 83       	st	Z, r25

	if (((char) c) == '\r') {
    5f8a:	9d 30       	cpi	r25, 0x0D	; 13
    5f8c:	39 f4       	brne	.+14     	; 0x5f9c <__vector_37+0x3c>
		recv3_buf.data[recv3_buf.nxfrd] = '\0';
    5f8e:	f9 01       	movw	r30, r18
    5f90:	e1 5b       	subi	r30, 0xB1	; 177
    5f92:	f0 4d       	sbci	r31, 0xD0	; 208
    5f94:	10 82       	st	Z, r1
		recv3_buf.done = YES;
    5f96:	91 e0       	ldi	r25, 0x01	; 1
    5f98:	90 93 4e 30 	sts	0x304E, r25	; 0x80304e <recv3_buf+0xff>
	}

	recv3_buf.nxfrd++;
    5f9c:	8f 5f       	subi	r24, 0xFF	; 255
    5f9e:	80 93 4f 30 	sts	0x304F, r24	; 0x80304f <recv3_buf+0x100>

}
    5fa2:	ff 91       	pop	r31
    5fa4:	ef 91       	pop	r30
    5fa6:	9f 91       	pop	r25
    5fa8:	8f 91       	pop	r24
    5faa:	3f 91       	pop	r19
    5fac:	2f 91       	pop	r18
    5fae:	0f 90       	pop	r0
    5fb0:	0f be       	out	0x3f, r0	; 63
    5fb2:	0f 90       	pop	r0
    5fb4:	1f 90       	pop	r1
    5fb6:	18 95       	reti

00005fb8 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    5fb8:	1f 92       	push	r1
    5fba:	0f 92       	push	r0
    5fbc:	0f b6       	in	r0, 0x3f	; 63
    5fbe:	0f 92       	push	r0
    5fc0:	11 24       	eor	r1, r1
    5fc2:	8f 93       	push	r24
    5fc4:	9f 93       	push	r25
    5fc6:	af 93       	push	r26
    5fc8:	bf 93       	push	r27
    5fca:	cf 93       	push	r28
    5fcc:	df 93       	push	r29
    5fce:	ef 93       	push	r30
    5fd0:	ff 93       	push	r31

	USART3.CTRLA &= ~USART_DREIE_bm;		// Turn off interrupts
    5fd2:	a0 e6       	ldi	r26, 0x60	; 96
    5fd4:	b8 e0       	ldi	r27, 0x08	; 8
    5fd6:	15 96       	adiw	r26, 0x05	; 5
    5fd8:	8c 91       	ld	r24, X
    5fda:	15 97       	sbiw	r26, 0x05	; 5
    5fdc:	8f 7d       	andi	r24, 0xDF	; 223
    5fde:	15 96       	adiw	r26, 0x05	; 5
    5fe0:	8c 93       	st	X, r24
    5fe2:	15 97       	sbiw	r26, 0x05	; 5
	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    5fe4:	c0 e5       	ldi	r28, 0x50	; 80
    5fe6:	d1 e3       	ldi	r29, 0x31	; 49
    5fe8:	e8 81       	ld	r30, Y
    5fea:	81 e0       	ldi	r24, 0x01	; 1
    5fec:	8e 0f       	add	r24, r30
    5fee:	88 83       	st	Y, r24
    5ff0:	f0 e0       	ldi	r31, 0x00	; 0
    5ff2:	e0 5b       	subi	r30, 0xB0	; 176
    5ff4:	ff 4c       	sbci	r31, 0xCF	; 207
    5ff6:	90 81       	ld	r25, Z
    5ff8:	12 96       	adiw	r26, 0x02	; 2
    5ffa:	9c 93       	st	X, r25
	if (send3_buf.nxfrd < send3_buf.nbytes) {
    5ffc:	90 91 4e 31 	lds	r25, 0x314E	; 0x80314e <send3_buf+0xfe>
    6000:	89 17       	cp	r24, r25
    6002:	30 f4       	brcc	.+12     	; 0x6010 <__vector_38+0x58>
		USART3.CTRLA |= USART_DREIE_bm;			// Turn on interrupts
    6004:	e0 e6       	ldi	r30, 0x60	; 96
    6006:	f8 e0       	ldi	r31, 0x08	; 8
    6008:	85 81       	ldd	r24, Z+5	; 0x05
    600a:	80 62       	ori	r24, 0x20	; 32
    600c:	85 83       	std	Z+5, r24	; 0x05
    600e:	03 c0       	rjmp	.+6      	; 0x6016 <__vector_38+0x5e>
	} else {
		send3_buf.done = YES;
    6010:	81 e0       	ldi	r24, 0x01	; 1
    6012:	80 93 4f 31 	sts	0x314F, r24	; 0x80314f <send3_buf+0xff>
	}

}
    6016:	ff 91       	pop	r31
    6018:	ef 91       	pop	r30
    601a:	df 91       	pop	r29
    601c:	cf 91       	pop	r28
    601e:	bf 91       	pop	r27
    6020:	af 91       	pop	r26
    6022:	9f 91       	pop	r25
    6024:	8f 91       	pop	r24
    6026:	0f 90       	pop	r0
    6028:	0f be       	out	0x3f, r0	; 63
    602a:	0f 90       	pop	r0
    602c:	1f 90       	pop	r1
    602e:	18 95       	reti

00006030 <reboot>:
#include "wdt.h"

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
    6030:	88 ed       	ldi	r24, 0xD8	; 216
    6032:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    6034:	81 e0       	ldi	r24, 0x01	; 1
    6036:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    603a:	08 95       	ret

0000603c <__vector_29>:

}

ISR(PORTF_PORT_vect)
{
    603c:	1f 92       	push	r1
    603e:	0f 92       	push	r0
    6040:	0f b6       	in	r0, 0x3f	; 63
    6042:	0f 92       	push	r0
    6044:	11 24       	eor	r1, r1
    6046:	2f 93       	push	r18
    6048:	3f 93       	push	r19
    604a:	4f 93       	push	r20
    604c:	5f 93       	push	r21
    604e:	6f 93       	push	r22
    6050:	7f 93       	push	r23
    6052:	8f 93       	push	r24
    6054:	9f 93       	push	r25
    6056:	af 93       	push	r26
    6058:	bf 93       	push	r27
    605a:	ef 93       	push	r30
    605c:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
    605e:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
    6062:	86 ff       	sbrs	r24, 6
    6064:	05 c0       	rjmp	.+10     	; 0x6070 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
    6066:	80 e4       	ldi	r24, 0x40	; 64
    6068:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
    606c:	0e 94 18 30 	call	0x6030	; 0x6030 <reboot>
	}

}
    6070:	ff 91       	pop	r31
    6072:	ef 91       	pop	r30
    6074:	bf 91       	pop	r27
    6076:	af 91       	pop	r26
    6078:	9f 91       	pop	r25
    607a:	8f 91       	pop	r24
    607c:	7f 91       	pop	r23
    607e:	6f 91       	pop	r22
    6080:	5f 91       	pop	r21
    6082:	4f 91       	pop	r20
    6084:	3f 91       	pop	r19
    6086:	2f 91       	pop	r18
    6088:	0f 90       	pop	r0
    608a:	0f be       	out	0x3f, r0	; 63
    608c:	0f 90       	pop	r0
    608e:	1f 90       	pop	r1
    6090:	18 95       	reti

00006092 <__subsf3>:
    6092:	50 58       	subi	r21, 0x80	; 128

00006094 <__addsf3>:
    6094:	bb 27       	eor	r27, r27
    6096:	aa 27       	eor	r26, r26
    6098:	0e 94 61 30 	call	0x60c2	; 0x60c2 <__addsf3x>
    609c:	0c 94 db 31 	jmp	0x63b6	; 0x63b6 <__fp_round>
    60a0:	0e 94 cd 31 	call	0x639a	; 0x639a <__fp_pscA>
    60a4:	38 f0       	brcs	.+14     	; 0x60b4 <__addsf3+0x20>
    60a6:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__fp_pscB>
    60aa:	20 f0       	brcs	.+8      	; 0x60b4 <__addsf3+0x20>
    60ac:	39 f4       	brne	.+14     	; 0x60bc <__addsf3+0x28>
    60ae:	9f 3f       	cpi	r25, 0xFF	; 255
    60b0:	19 f4       	brne	.+6      	; 0x60b8 <__addsf3+0x24>
    60b2:	26 f4       	brtc	.+8      	; 0x60bc <__addsf3+0x28>
    60b4:	0c 94 ca 31 	jmp	0x6394	; 0x6394 <__fp_nan>
    60b8:	0e f4       	brtc	.+2      	; 0x60bc <__addsf3+0x28>
    60ba:	e0 95       	com	r30
    60bc:	e7 fb       	bst	r30, 7
    60be:	0c 94 c4 31 	jmp	0x6388	; 0x6388 <__fp_inf>

000060c2 <__addsf3x>:
    60c2:	e9 2f       	mov	r30, r25
    60c4:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <__fp_split3>
    60c8:	58 f3       	brcs	.-42     	; 0x60a0 <__addsf3+0xc>
    60ca:	ba 17       	cp	r27, r26
    60cc:	62 07       	cpc	r22, r18
    60ce:	73 07       	cpc	r23, r19
    60d0:	84 07       	cpc	r24, r20
    60d2:	95 07       	cpc	r25, r21
    60d4:	20 f0       	brcs	.+8      	; 0x60de <__addsf3x+0x1c>
    60d6:	79 f4       	brne	.+30     	; 0x60f6 <__addsf3x+0x34>
    60d8:	a6 f5       	brtc	.+104    	; 0x6142 <__addsf3x+0x80>
    60da:	0c 94 0e 32 	jmp	0x641c	; 0x641c <__fp_zero>
    60de:	0e f4       	brtc	.+2      	; 0x60e2 <__addsf3x+0x20>
    60e0:	e0 95       	com	r30
    60e2:	0b 2e       	mov	r0, r27
    60e4:	ba 2f       	mov	r27, r26
    60e6:	a0 2d       	mov	r26, r0
    60e8:	0b 01       	movw	r0, r22
    60ea:	b9 01       	movw	r22, r18
    60ec:	90 01       	movw	r18, r0
    60ee:	0c 01       	movw	r0, r24
    60f0:	ca 01       	movw	r24, r20
    60f2:	a0 01       	movw	r20, r0
    60f4:	11 24       	eor	r1, r1
    60f6:	ff 27       	eor	r31, r31
    60f8:	59 1b       	sub	r21, r25
    60fa:	99 f0       	breq	.+38     	; 0x6122 <__addsf3x+0x60>
    60fc:	59 3f       	cpi	r21, 0xF9	; 249
    60fe:	50 f4       	brcc	.+20     	; 0x6114 <__addsf3x+0x52>
    6100:	50 3e       	cpi	r21, 0xE0	; 224
    6102:	68 f1       	brcs	.+90     	; 0x615e <__addsf3x+0x9c>
    6104:	1a 16       	cp	r1, r26
    6106:	f0 40       	sbci	r31, 0x00	; 0
    6108:	a2 2f       	mov	r26, r18
    610a:	23 2f       	mov	r18, r19
    610c:	34 2f       	mov	r19, r20
    610e:	44 27       	eor	r20, r20
    6110:	58 5f       	subi	r21, 0xF8	; 248
    6112:	f3 cf       	rjmp	.-26     	; 0x60fa <__addsf3x+0x38>
    6114:	46 95       	lsr	r20
    6116:	37 95       	ror	r19
    6118:	27 95       	ror	r18
    611a:	a7 95       	ror	r26
    611c:	f0 40       	sbci	r31, 0x00	; 0
    611e:	53 95       	inc	r21
    6120:	c9 f7       	brne	.-14     	; 0x6114 <__addsf3x+0x52>
    6122:	7e f4       	brtc	.+30     	; 0x6142 <__addsf3x+0x80>
    6124:	1f 16       	cp	r1, r31
    6126:	ba 0b       	sbc	r27, r26
    6128:	62 0b       	sbc	r22, r18
    612a:	73 0b       	sbc	r23, r19
    612c:	84 0b       	sbc	r24, r20
    612e:	ba f0       	brmi	.+46     	; 0x615e <__addsf3x+0x9c>
    6130:	91 50       	subi	r25, 0x01	; 1
    6132:	a1 f0       	breq	.+40     	; 0x615c <__addsf3x+0x9a>
    6134:	ff 0f       	add	r31, r31
    6136:	bb 1f       	adc	r27, r27
    6138:	66 1f       	adc	r22, r22
    613a:	77 1f       	adc	r23, r23
    613c:	88 1f       	adc	r24, r24
    613e:	c2 f7       	brpl	.-16     	; 0x6130 <__addsf3x+0x6e>
    6140:	0e c0       	rjmp	.+28     	; 0x615e <__addsf3x+0x9c>
    6142:	ba 0f       	add	r27, r26
    6144:	62 1f       	adc	r22, r18
    6146:	73 1f       	adc	r23, r19
    6148:	84 1f       	adc	r24, r20
    614a:	48 f4       	brcc	.+18     	; 0x615e <__addsf3x+0x9c>
    614c:	87 95       	ror	r24
    614e:	77 95       	ror	r23
    6150:	67 95       	ror	r22
    6152:	b7 95       	ror	r27
    6154:	f7 95       	ror	r31
    6156:	9e 3f       	cpi	r25, 0xFE	; 254
    6158:	08 f0       	brcs	.+2      	; 0x615c <__addsf3x+0x9a>
    615a:	b0 cf       	rjmp	.-160    	; 0x60bc <__addsf3+0x28>
    615c:	93 95       	inc	r25
    615e:	88 0f       	add	r24, r24
    6160:	08 f0       	brcs	.+2      	; 0x6164 <__addsf3x+0xa2>
    6162:	99 27       	eor	r25, r25
    6164:	ee 0f       	add	r30, r30
    6166:	97 95       	ror	r25
    6168:	87 95       	ror	r24
    616a:	08 95       	ret

0000616c <__cmpsf2>:
    616c:	0e 94 a0 31 	call	0x6340	; 0x6340 <__fp_cmp>
    6170:	08 f4       	brcc	.+2      	; 0x6174 <__cmpsf2+0x8>
    6172:	81 e0       	ldi	r24, 0x01	; 1
    6174:	08 95       	ret

00006176 <__divsf3>:
    6176:	0e 94 cf 30 	call	0x619e	; 0x619e <__divsf3x>
    617a:	0c 94 db 31 	jmp	0x63b6	; 0x63b6 <__fp_round>
    617e:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__fp_pscB>
    6182:	58 f0       	brcs	.+22     	; 0x619a <__divsf3+0x24>
    6184:	0e 94 cd 31 	call	0x639a	; 0x639a <__fp_pscA>
    6188:	40 f0       	brcs	.+16     	; 0x619a <__divsf3+0x24>
    618a:	29 f4       	brne	.+10     	; 0x6196 <__divsf3+0x20>
    618c:	5f 3f       	cpi	r21, 0xFF	; 255
    618e:	29 f0       	breq	.+10     	; 0x619a <__divsf3+0x24>
    6190:	0c 94 c4 31 	jmp	0x6388	; 0x6388 <__fp_inf>
    6194:	51 11       	cpse	r21, r1
    6196:	0c 94 0f 32 	jmp	0x641e	; 0x641e <__fp_szero>
    619a:	0c 94 ca 31 	jmp	0x6394	; 0x6394 <__fp_nan>

0000619e <__divsf3x>:
    619e:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <__fp_split3>
    61a2:	68 f3       	brcs	.-38     	; 0x617e <__divsf3+0x8>

000061a4 <__divsf3_pse>:
    61a4:	99 23       	and	r25, r25
    61a6:	b1 f3       	breq	.-20     	; 0x6194 <__divsf3+0x1e>
    61a8:	55 23       	and	r21, r21
    61aa:	91 f3       	breq	.-28     	; 0x6190 <__divsf3+0x1a>
    61ac:	95 1b       	sub	r25, r21
    61ae:	55 0b       	sbc	r21, r21
    61b0:	bb 27       	eor	r27, r27
    61b2:	aa 27       	eor	r26, r26
    61b4:	62 17       	cp	r22, r18
    61b6:	73 07       	cpc	r23, r19
    61b8:	84 07       	cpc	r24, r20
    61ba:	38 f0       	brcs	.+14     	; 0x61ca <__divsf3_pse+0x26>
    61bc:	9f 5f       	subi	r25, 0xFF	; 255
    61be:	5f 4f       	sbci	r21, 0xFF	; 255
    61c0:	22 0f       	add	r18, r18
    61c2:	33 1f       	adc	r19, r19
    61c4:	44 1f       	adc	r20, r20
    61c6:	aa 1f       	adc	r26, r26
    61c8:	a9 f3       	breq	.-22     	; 0x61b4 <__divsf3_pse+0x10>
    61ca:	35 d0       	rcall	.+106    	; 0x6236 <__divsf3_pse+0x92>
    61cc:	0e 2e       	mov	r0, r30
    61ce:	3a f0       	brmi	.+14     	; 0x61de <__divsf3_pse+0x3a>
    61d0:	e0 e8       	ldi	r30, 0x80	; 128
    61d2:	32 d0       	rcall	.+100    	; 0x6238 <__divsf3_pse+0x94>
    61d4:	91 50       	subi	r25, 0x01	; 1
    61d6:	50 40       	sbci	r21, 0x00	; 0
    61d8:	e6 95       	lsr	r30
    61da:	00 1c       	adc	r0, r0
    61dc:	ca f7       	brpl	.-14     	; 0x61d0 <__divsf3_pse+0x2c>
    61de:	2b d0       	rcall	.+86     	; 0x6236 <__divsf3_pse+0x92>
    61e0:	fe 2f       	mov	r31, r30
    61e2:	29 d0       	rcall	.+82     	; 0x6236 <__divsf3_pse+0x92>
    61e4:	66 0f       	add	r22, r22
    61e6:	77 1f       	adc	r23, r23
    61e8:	88 1f       	adc	r24, r24
    61ea:	bb 1f       	adc	r27, r27
    61ec:	26 17       	cp	r18, r22
    61ee:	37 07       	cpc	r19, r23
    61f0:	48 07       	cpc	r20, r24
    61f2:	ab 07       	cpc	r26, r27
    61f4:	b0 e8       	ldi	r27, 0x80	; 128
    61f6:	09 f0       	breq	.+2      	; 0x61fa <__divsf3_pse+0x56>
    61f8:	bb 0b       	sbc	r27, r27
    61fa:	80 2d       	mov	r24, r0
    61fc:	bf 01       	movw	r22, r30
    61fe:	ff 27       	eor	r31, r31
    6200:	93 58       	subi	r25, 0x83	; 131
    6202:	5f 4f       	sbci	r21, 0xFF	; 255
    6204:	3a f0       	brmi	.+14     	; 0x6214 <__divsf3_pse+0x70>
    6206:	9e 3f       	cpi	r25, 0xFE	; 254
    6208:	51 05       	cpc	r21, r1
    620a:	78 f0       	brcs	.+30     	; 0x622a <__divsf3_pse+0x86>
    620c:	0c 94 c4 31 	jmp	0x6388	; 0x6388 <__fp_inf>
    6210:	0c 94 0f 32 	jmp	0x641e	; 0x641e <__fp_szero>
    6214:	5f 3f       	cpi	r21, 0xFF	; 255
    6216:	e4 f3       	brlt	.-8      	; 0x6210 <__divsf3_pse+0x6c>
    6218:	98 3e       	cpi	r25, 0xE8	; 232
    621a:	d4 f3       	brlt	.-12     	; 0x6210 <__divsf3_pse+0x6c>
    621c:	86 95       	lsr	r24
    621e:	77 95       	ror	r23
    6220:	67 95       	ror	r22
    6222:	b7 95       	ror	r27
    6224:	f7 95       	ror	r31
    6226:	9f 5f       	subi	r25, 0xFF	; 255
    6228:	c9 f7       	brne	.-14     	; 0x621c <__divsf3_pse+0x78>
    622a:	88 0f       	add	r24, r24
    622c:	91 1d       	adc	r25, r1
    622e:	96 95       	lsr	r25
    6230:	87 95       	ror	r24
    6232:	97 f9       	bld	r25, 7
    6234:	08 95       	ret
    6236:	e1 e0       	ldi	r30, 0x01	; 1
    6238:	66 0f       	add	r22, r22
    623a:	77 1f       	adc	r23, r23
    623c:	88 1f       	adc	r24, r24
    623e:	bb 1f       	adc	r27, r27
    6240:	62 17       	cp	r22, r18
    6242:	73 07       	cpc	r23, r19
    6244:	84 07       	cpc	r24, r20
    6246:	ba 07       	cpc	r27, r26
    6248:	20 f0       	brcs	.+8      	; 0x6252 <__divsf3_pse+0xae>
    624a:	62 1b       	sub	r22, r18
    624c:	73 0b       	sbc	r23, r19
    624e:	84 0b       	sbc	r24, r20
    6250:	ba 0b       	sbc	r27, r26
    6252:	ee 1f       	adc	r30, r30
    6254:	88 f7       	brcc	.-30     	; 0x6238 <__divsf3_pse+0x94>
    6256:	e0 95       	com	r30
    6258:	08 95       	ret

0000625a <__fixsfsi>:
    625a:	0e 94 34 31 	call	0x6268	; 0x6268 <__fixunssfsi>
    625e:	68 94       	set
    6260:	b1 11       	cpse	r27, r1
    6262:	0c 94 0f 32 	jmp	0x641e	; 0x641e <__fp_szero>
    6266:	08 95       	ret

00006268 <__fixunssfsi>:
    6268:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <__fp_splitA>
    626c:	88 f0       	brcs	.+34     	; 0x6290 <__fixunssfsi+0x28>
    626e:	9f 57       	subi	r25, 0x7F	; 127
    6270:	98 f0       	brcs	.+38     	; 0x6298 <__fixunssfsi+0x30>
    6272:	b9 2f       	mov	r27, r25
    6274:	99 27       	eor	r25, r25
    6276:	b7 51       	subi	r27, 0x17	; 23
    6278:	b0 f0       	brcs	.+44     	; 0x62a6 <__fixunssfsi+0x3e>
    627a:	e1 f0       	breq	.+56     	; 0x62b4 <__fixunssfsi+0x4c>
    627c:	66 0f       	add	r22, r22
    627e:	77 1f       	adc	r23, r23
    6280:	88 1f       	adc	r24, r24
    6282:	99 1f       	adc	r25, r25
    6284:	1a f0       	brmi	.+6      	; 0x628c <__fixunssfsi+0x24>
    6286:	ba 95       	dec	r27
    6288:	c9 f7       	brne	.-14     	; 0x627c <__fixunssfsi+0x14>
    628a:	14 c0       	rjmp	.+40     	; 0x62b4 <__fixunssfsi+0x4c>
    628c:	b1 30       	cpi	r27, 0x01	; 1
    628e:	91 f0       	breq	.+36     	; 0x62b4 <__fixunssfsi+0x4c>
    6290:	0e 94 0e 32 	call	0x641c	; 0x641c <__fp_zero>
    6294:	b1 e0       	ldi	r27, 0x01	; 1
    6296:	08 95       	ret
    6298:	0c 94 0e 32 	jmp	0x641c	; 0x641c <__fp_zero>
    629c:	67 2f       	mov	r22, r23
    629e:	78 2f       	mov	r23, r24
    62a0:	88 27       	eor	r24, r24
    62a2:	b8 5f       	subi	r27, 0xF8	; 248
    62a4:	39 f0       	breq	.+14     	; 0x62b4 <__fixunssfsi+0x4c>
    62a6:	b9 3f       	cpi	r27, 0xF9	; 249
    62a8:	cc f3       	brlt	.-14     	; 0x629c <__fixunssfsi+0x34>
    62aa:	86 95       	lsr	r24
    62ac:	77 95       	ror	r23
    62ae:	67 95       	ror	r22
    62b0:	b3 95       	inc	r27
    62b2:	d9 f7       	brne	.-10     	; 0x62aa <__fixunssfsi+0x42>
    62b4:	3e f4       	brtc	.+14     	; 0x62c4 <__fixunssfsi+0x5c>
    62b6:	90 95       	com	r25
    62b8:	80 95       	com	r24
    62ba:	70 95       	com	r23
    62bc:	61 95       	neg	r22
    62be:	7f 4f       	sbci	r23, 0xFF	; 255
    62c0:	8f 4f       	sbci	r24, 0xFF	; 255
    62c2:	9f 4f       	sbci	r25, 0xFF	; 255
    62c4:	08 95       	ret

000062c6 <__floatunsisf>:
    62c6:	e8 94       	clt
    62c8:	09 c0       	rjmp	.+18     	; 0x62dc <__floatsisf+0x12>

000062ca <__floatsisf>:
    62ca:	97 fb       	bst	r25, 7
    62cc:	3e f4       	brtc	.+14     	; 0x62dc <__floatsisf+0x12>
    62ce:	90 95       	com	r25
    62d0:	80 95       	com	r24
    62d2:	70 95       	com	r23
    62d4:	61 95       	neg	r22
    62d6:	7f 4f       	sbci	r23, 0xFF	; 255
    62d8:	8f 4f       	sbci	r24, 0xFF	; 255
    62da:	9f 4f       	sbci	r25, 0xFF	; 255
    62dc:	99 23       	and	r25, r25
    62de:	a9 f0       	breq	.+42     	; 0x630a <__floatsisf+0x40>
    62e0:	f9 2f       	mov	r31, r25
    62e2:	96 e9       	ldi	r25, 0x96	; 150
    62e4:	bb 27       	eor	r27, r27
    62e6:	93 95       	inc	r25
    62e8:	f6 95       	lsr	r31
    62ea:	87 95       	ror	r24
    62ec:	77 95       	ror	r23
    62ee:	67 95       	ror	r22
    62f0:	b7 95       	ror	r27
    62f2:	f1 11       	cpse	r31, r1
    62f4:	f8 cf       	rjmp	.-16     	; 0x62e6 <__floatsisf+0x1c>
    62f6:	fa f4       	brpl	.+62     	; 0x6336 <__floatsisf+0x6c>
    62f8:	bb 0f       	add	r27, r27
    62fa:	11 f4       	brne	.+4      	; 0x6300 <__floatsisf+0x36>
    62fc:	60 ff       	sbrs	r22, 0
    62fe:	1b c0       	rjmp	.+54     	; 0x6336 <__floatsisf+0x6c>
    6300:	6f 5f       	subi	r22, 0xFF	; 255
    6302:	7f 4f       	sbci	r23, 0xFF	; 255
    6304:	8f 4f       	sbci	r24, 0xFF	; 255
    6306:	9f 4f       	sbci	r25, 0xFF	; 255
    6308:	16 c0       	rjmp	.+44     	; 0x6336 <__floatsisf+0x6c>
    630a:	88 23       	and	r24, r24
    630c:	11 f0       	breq	.+4      	; 0x6312 <__floatsisf+0x48>
    630e:	96 e9       	ldi	r25, 0x96	; 150
    6310:	11 c0       	rjmp	.+34     	; 0x6334 <__floatsisf+0x6a>
    6312:	77 23       	and	r23, r23
    6314:	21 f0       	breq	.+8      	; 0x631e <__floatsisf+0x54>
    6316:	9e e8       	ldi	r25, 0x8E	; 142
    6318:	87 2f       	mov	r24, r23
    631a:	76 2f       	mov	r23, r22
    631c:	05 c0       	rjmp	.+10     	; 0x6328 <__floatsisf+0x5e>
    631e:	66 23       	and	r22, r22
    6320:	71 f0       	breq	.+28     	; 0x633e <__floatsisf+0x74>
    6322:	96 e8       	ldi	r25, 0x86	; 134
    6324:	86 2f       	mov	r24, r22
    6326:	70 e0       	ldi	r23, 0x00	; 0
    6328:	60 e0       	ldi	r22, 0x00	; 0
    632a:	2a f0       	brmi	.+10     	; 0x6336 <__floatsisf+0x6c>
    632c:	9a 95       	dec	r25
    632e:	66 0f       	add	r22, r22
    6330:	77 1f       	adc	r23, r23
    6332:	88 1f       	adc	r24, r24
    6334:	da f7       	brpl	.-10     	; 0x632c <__floatsisf+0x62>
    6336:	88 0f       	add	r24, r24
    6338:	96 95       	lsr	r25
    633a:	87 95       	ror	r24
    633c:	97 f9       	bld	r25, 7
    633e:	08 95       	ret

00006340 <__fp_cmp>:
    6340:	99 0f       	add	r25, r25
    6342:	00 08       	sbc	r0, r0
    6344:	55 0f       	add	r21, r21
    6346:	aa 0b       	sbc	r26, r26
    6348:	e0 e8       	ldi	r30, 0x80	; 128
    634a:	fe ef       	ldi	r31, 0xFE	; 254
    634c:	16 16       	cp	r1, r22
    634e:	17 06       	cpc	r1, r23
    6350:	e8 07       	cpc	r30, r24
    6352:	f9 07       	cpc	r31, r25
    6354:	c0 f0       	brcs	.+48     	; 0x6386 <__fp_cmp+0x46>
    6356:	12 16       	cp	r1, r18
    6358:	13 06       	cpc	r1, r19
    635a:	e4 07       	cpc	r30, r20
    635c:	f5 07       	cpc	r31, r21
    635e:	98 f0       	brcs	.+38     	; 0x6386 <__fp_cmp+0x46>
    6360:	62 1b       	sub	r22, r18
    6362:	73 0b       	sbc	r23, r19
    6364:	84 0b       	sbc	r24, r20
    6366:	95 0b       	sbc	r25, r21
    6368:	39 f4       	brne	.+14     	; 0x6378 <__fp_cmp+0x38>
    636a:	0a 26       	eor	r0, r26
    636c:	61 f0       	breq	.+24     	; 0x6386 <__fp_cmp+0x46>
    636e:	23 2b       	or	r18, r19
    6370:	24 2b       	or	r18, r20
    6372:	25 2b       	or	r18, r21
    6374:	21 f4       	brne	.+8      	; 0x637e <__fp_cmp+0x3e>
    6376:	08 95       	ret
    6378:	0a 26       	eor	r0, r26
    637a:	09 f4       	brne	.+2      	; 0x637e <__fp_cmp+0x3e>
    637c:	a1 40       	sbci	r26, 0x01	; 1
    637e:	a6 95       	lsr	r26
    6380:	8f ef       	ldi	r24, 0xFF	; 255
    6382:	81 1d       	adc	r24, r1
    6384:	81 1d       	adc	r24, r1
    6386:	08 95       	ret

00006388 <__fp_inf>:
    6388:	97 f9       	bld	r25, 7
    638a:	9f 67       	ori	r25, 0x7F	; 127
    638c:	80 e8       	ldi	r24, 0x80	; 128
    638e:	70 e0       	ldi	r23, 0x00	; 0
    6390:	60 e0       	ldi	r22, 0x00	; 0
    6392:	08 95       	ret

00006394 <__fp_nan>:
    6394:	9f ef       	ldi	r25, 0xFF	; 255
    6396:	80 ec       	ldi	r24, 0xC0	; 192
    6398:	08 95       	ret

0000639a <__fp_pscA>:
    639a:	00 24       	eor	r0, r0
    639c:	0a 94       	dec	r0
    639e:	16 16       	cp	r1, r22
    63a0:	17 06       	cpc	r1, r23
    63a2:	18 06       	cpc	r1, r24
    63a4:	09 06       	cpc	r0, r25
    63a6:	08 95       	ret

000063a8 <__fp_pscB>:
    63a8:	00 24       	eor	r0, r0
    63aa:	0a 94       	dec	r0
    63ac:	12 16       	cp	r1, r18
    63ae:	13 06       	cpc	r1, r19
    63b0:	14 06       	cpc	r1, r20
    63b2:	05 06       	cpc	r0, r21
    63b4:	08 95       	ret

000063b6 <__fp_round>:
    63b6:	09 2e       	mov	r0, r25
    63b8:	03 94       	inc	r0
    63ba:	00 0c       	add	r0, r0
    63bc:	11 f4       	brne	.+4      	; 0x63c2 <__fp_round+0xc>
    63be:	88 23       	and	r24, r24
    63c0:	52 f0       	brmi	.+20     	; 0x63d6 <__fp_round+0x20>
    63c2:	bb 0f       	add	r27, r27
    63c4:	40 f4       	brcc	.+16     	; 0x63d6 <__fp_round+0x20>
    63c6:	bf 2b       	or	r27, r31
    63c8:	11 f4       	brne	.+4      	; 0x63ce <__fp_round+0x18>
    63ca:	60 ff       	sbrs	r22, 0
    63cc:	04 c0       	rjmp	.+8      	; 0x63d6 <__fp_round+0x20>
    63ce:	6f 5f       	subi	r22, 0xFF	; 255
    63d0:	7f 4f       	sbci	r23, 0xFF	; 255
    63d2:	8f 4f       	sbci	r24, 0xFF	; 255
    63d4:	9f 4f       	sbci	r25, 0xFF	; 255
    63d6:	08 95       	ret

000063d8 <__fp_split3>:
    63d8:	57 fd       	sbrc	r21, 7
    63da:	90 58       	subi	r25, 0x80	; 128
    63dc:	44 0f       	add	r20, r20
    63de:	55 1f       	adc	r21, r21
    63e0:	59 f0       	breq	.+22     	; 0x63f8 <__fp_splitA+0x10>
    63e2:	5f 3f       	cpi	r21, 0xFF	; 255
    63e4:	71 f0       	breq	.+28     	; 0x6402 <__fp_splitA+0x1a>
    63e6:	47 95       	ror	r20

000063e8 <__fp_splitA>:
    63e8:	88 0f       	add	r24, r24
    63ea:	97 fb       	bst	r25, 7
    63ec:	99 1f       	adc	r25, r25
    63ee:	61 f0       	breq	.+24     	; 0x6408 <__fp_splitA+0x20>
    63f0:	9f 3f       	cpi	r25, 0xFF	; 255
    63f2:	79 f0       	breq	.+30     	; 0x6412 <__fp_splitA+0x2a>
    63f4:	87 95       	ror	r24
    63f6:	08 95       	ret
    63f8:	12 16       	cp	r1, r18
    63fa:	13 06       	cpc	r1, r19
    63fc:	14 06       	cpc	r1, r20
    63fe:	55 1f       	adc	r21, r21
    6400:	f2 cf       	rjmp	.-28     	; 0x63e6 <__fp_split3+0xe>
    6402:	46 95       	lsr	r20
    6404:	f1 df       	rcall	.-30     	; 0x63e8 <__fp_splitA>
    6406:	08 c0       	rjmp	.+16     	; 0x6418 <__fp_splitA+0x30>
    6408:	16 16       	cp	r1, r22
    640a:	17 06       	cpc	r1, r23
    640c:	18 06       	cpc	r1, r24
    640e:	99 1f       	adc	r25, r25
    6410:	f1 cf       	rjmp	.-30     	; 0x63f4 <__fp_splitA+0xc>
    6412:	86 95       	lsr	r24
    6414:	71 05       	cpc	r23, r1
    6416:	61 05       	cpc	r22, r1
    6418:	08 94       	sec
    641a:	08 95       	ret

0000641c <__fp_zero>:
    641c:	e8 94       	clt

0000641e <__fp_szero>:
    641e:	bb 27       	eor	r27, r27
    6420:	66 27       	eor	r22, r22
    6422:	77 27       	eor	r23, r23
    6424:	cb 01       	movw	r24, r22
    6426:	97 f9       	bld	r25, 7
    6428:	08 95       	ret

0000642a <__mulsf3>:
    642a:	0e 94 28 32 	call	0x6450	; 0x6450 <__mulsf3x>
    642e:	0c 94 db 31 	jmp	0x63b6	; 0x63b6 <__fp_round>
    6432:	0e 94 cd 31 	call	0x639a	; 0x639a <__fp_pscA>
    6436:	38 f0       	brcs	.+14     	; 0x6446 <__mulsf3+0x1c>
    6438:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__fp_pscB>
    643c:	20 f0       	brcs	.+8      	; 0x6446 <__mulsf3+0x1c>
    643e:	95 23       	and	r25, r21
    6440:	11 f0       	breq	.+4      	; 0x6446 <__mulsf3+0x1c>
    6442:	0c 94 c4 31 	jmp	0x6388	; 0x6388 <__fp_inf>
    6446:	0c 94 ca 31 	jmp	0x6394	; 0x6394 <__fp_nan>
    644a:	11 24       	eor	r1, r1
    644c:	0c 94 0f 32 	jmp	0x641e	; 0x641e <__fp_szero>

00006450 <__mulsf3x>:
    6450:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <__fp_split3>
    6454:	70 f3       	brcs	.-36     	; 0x6432 <__mulsf3+0x8>

00006456 <__mulsf3_pse>:
    6456:	95 9f       	mul	r25, r21
    6458:	c1 f3       	breq	.-16     	; 0x644a <__mulsf3+0x20>
    645a:	95 0f       	add	r25, r21
    645c:	50 e0       	ldi	r21, 0x00	; 0
    645e:	55 1f       	adc	r21, r21
    6460:	62 9f       	mul	r22, r18
    6462:	f0 01       	movw	r30, r0
    6464:	72 9f       	mul	r23, r18
    6466:	bb 27       	eor	r27, r27
    6468:	f0 0d       	add	r31, r0
    646a:	b1 1d       	adc	r27, r1
    646c:	63 9f       	mul	r22, r19
    646e:	aa 27       	eor	r26, r26
    6470:	f0 0d       	add	r31, r0
    6472:	b1 1d       	adc	r27, r1
    6474:	aa 1f       	adc	r26, r26
    6476:	64 9f       	mul	r22, r20
    6478:	66 27       	eor	r22, r22
    647a:	b0 0d       	add	r27, r0
    647c:	a1 1d       	adc	r26, r1
    647e:	66 1f       	adc	r22, r22
    6480:	82 9f       	mul	r24, r18
    6482:	22 27       	eor	r18, r18
    6484:	b0 0d       	add	r27, r0
    6486:	a1 1d       	adc	r26, r1
    6488:	62 1f       	adc	r22, r18
    648a:	73 9f       	mul	r23, r19
    648c:	b0 0d       	add	r27, r0
    648e:	a1 1d       	adc	r26, r1
    6490:	62 1f       	adc	r22, r18
    6492:	83 9f       	mul	r24, r19
    6494:	a0 0d       	add	r26, r0
    6496:	61 1d       	adc	r22, r1
    6498:	22 1f       	adc	r18, r18
    649a:	74 9f       	mul	r23, r20
    649c:	33 27       	eor	r19, r19
    649e:	a0 0d       	add	r26, r0
    64a0:	61 1d       	adc	r22, r1
    64a2:	23 1f       	adc	r18, r19
    64a4:	84 9f       	mul	r24, r20
    64a6:	60 0d       	add	r22, r0
    64a8:	21 1d       	adc	r18, r1
    64aa:	82 2f       	mov	r24, r18
    64ac:	76 2f       	mov	r23, r22
    64ae:	6a 2f       	mov	r22, r26
    64b0:	11 24       	eor	r1, r1
    64b2:	9f 57       	subi	r25, 0x7F	; 127
    64b4:	50 40       	sbci	r21, 0x00	; 0
    64b6:	9a f0       	brmi	.+38     	; 0x64de <__mulsf3_pse+0x88>
    64b8:	f1 f0       	breq	.+60     	; 0x64f6 <__mulsf3_pse+0xa0>
    64ba:	88 23       	and	r24, r24
    64bc:	4a f0       	brmi	.+18     	; 0x64d0 <__mulsf3_pse+0x7a>
    64be:	ee 0f       	add	r30, r30
    64c0:	ff 1f       	adc	r31, r31
    64c2:	bb 1f       	adc	r27, r27
    64c4:	66 1f       	adc	r22, r22
    64c6:	77 1f       	adc	r23, r23
    64c8:	88 1f       	adc	r24, r24
    64ca:	91 50       	subi	r25, 0x01	; 1
    64cc:	50 40       	sbci	r21, 0x00	; 0
    64ce:	a9 f7       	brne	.-22     	; 0x64ba <__mulsf3_pse+0x64>
    64d0:	9e 3f       	cpi	r25, 0xFE	; 254
    64d2:	51 05       	cpc	r21, r1
    64d4:	80 f0       	brcs	.+32     	; 0x64f6 <__mulsf3_pse+0xa0>
    64d6:	0c 94 c4 31 	jmp	0x6388	; 0x6388 <__fp_inf>
    64da:	0c 94 0f 32 	jmp	0x641e	; 0x641e <__fp_szero>
    64de:	5f 3f       	cpi	r21, 0xFF	; 255
    64e0:	e4 f3       	brlt	.-8      	; 0x64da <__mulsf3_pse+0x84>
    64e2:	98 3e       	cpi	r25, 0xE8	; 232
    64e4:	d4 f3       	brlt	.-12     	; 0x64da <__mulsf3_pse+0x84>
    64e6:	86 95       	lsr	r24
    64e8:	77 95       	ror	r23
    64ea:	67 95       	ror	r22
    64ec:	b7 95       	ror	r27
    64ee:	f7 95       	ror	r31
    64f0:	e7 95       	ror	r30
    64f2:	9f 5f       	subi	r25, 0xFF	; 255
    64f4:	c1 f7       	brne	.-16     	; 0x64e6 <__mulsf3_pse+0x90>
    64f6:	fe 2b       	or	r31, r30
    64f8:	88 0f       	add	r24, r24
    64fa:	91 1d       	adc	r25, r1
    64fc:	96 95       	lsr	r25
    64fe:	87 95       	ror	r24
    6500:	97 f9       	bld	r25, 7
    6502:	08 95       	ret

00006504 <vfprintf>:
    6504:	a0 e1       	ldi	r26, 0x10	; 16
    6506:	b0 e0       	ldi	r27, 0x00	; 0
    6508:	e8 e8       	ldi	r30, 0x88	; 136
    650a:	f2 e3       	ldi	r31, 0x32	; 50
    650c:	0c 94 43 36 	jmp	0x6c86	; 0x6c86 <__prologue_saves__>
    6510:	7c 01       	movw	r14, r24
    6512:	1b 01       	movw	r2, r22
    6514:	6a 01       	movw	r12, r20
    6516:	fc 01       	movw	r30, r24
    6518:	16 82       	std	Z+6, r1	; 0x06
    651a:	17 82       	std	Z+7, r1	; 0x07
    651c:	83 81       	ldd	r24, Z+3	; 0x03
    651e:	81 ff       	sbrs	r24, 1
    6520:	44 c3       	rjmp	.+1672   	; 0x6baa <vfprintf+0x6a6>
    6522:	9e 01       	movw	r18, r28
    6524:	2f 5f       	subi	r18, 0xFF	; 255
    6526:	3f 4f       	sbci	r19, 0xFF	; 255
    6528:	39 01       	movw	r6, r18
    652a:	f7 01       	movw	r30, r14
    652c:	93 81       	ldd	r25, Z+3	; 0x03
    652e:	f1 01       	movw	r30, r2
    6530:	93 fd       	sbrc	r25, 3
    6532:	85 91       	lpm	r24, Z+
    6534:	93 ff       	sbrs	r25, 3
    6536:	81 91       	ld	r24, Z+
    6538:	1f 01       	movw	r2, r30
    653a:	88 23       	and	r24, r24
    653c:	09 f4       	brne	.+2      	; 0x6540 <vfprintf+0x3c>
    653e:	31 c3       	rjmp	.+1634   	; 0x6ba2 <vfprintf+0x69e>
    6540:	85 32       	cpi	r24, 0x25	; 37
    6542:	39 f4       	brne	.+14     	; 0x6552 <vfprintf+0x4e>
    6544:	93 fd       	sbrc	r25, 3
    6546:	85 91       	lpm	r24, Z+
    6548:	93 ff       	sbrs	r25, 3
    654a:	81 91       	ld	r24, Z+
    654c:	1f 01       	movw	r2, r30
    654e:	85 32       	cpi	r24, 0x25	; 37
    6550:	39 f4       	brne	.+14     	; 0x6560 <vfprintf+0x5c>
    6552:	b7 01       	movw	r22, r14
    6554:	90 e0       	ldi	r25, 0x00	; 0
    6556:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    655a:	56 01       	movw	r10, r12
    655c:	65 01       	movw	r12, r10
    655e:	e5 cf       	rjmp	.-54     	; 0x652a <vfprintf+0x26>
    6560:	10 e0       	ldi	r17, 0x00	; 0
    6562:	51 2c       	mov	r5, r1
    6564:	91 2c       	mov	r9, r1
    6566:	ff e1       	ldi	r31, 0x1F	; 31
    6568:	f9 15       	cp	r31, r9
    656a:	d8 f0       	brcs	.+54     	; 0x65a2 <vfprintf+0x9e>
    656c:	8b 32       	cpi	r24, 0x2B	; 43
    656e:	79 f0       	breq	.+30     	; 0x658e <vfprintf+0x8a>
    6570:	38 f4       	brcc	.+14     	; 0x6580 <vfprintf+0x7c>
    6572:	80 32       	cpi	r24, 0x20	; 32
    6574:	79 f0       	breq	.+30     	; 0x6594 <vfprintf+0x90>
    6576:	83 32       	cpi	r24, 0x23	; 35
    6578:	a1 f4       	brne	.+40     	; 0x65a2 <vfprintf+0x9e>
    657a:	f9 2d       	mov	r31, r9
    657c:	f0 61       	ori	r31, 0x10	; 16
    657e:	2e c0       	rjmp	.+92     	; 0x65dc <vfprintf+0xd8>
    6580:	8d 32       	cpi	r24, 0x2D	; 45
    6582:	61 f0       	breq	.+24     	; 0x659c <vfprintf+0x98>
    6584:	80 33       	cpi	r24, 0x30	; 48
    6586:	69 f4       	brne	.+26     	; 0x65a2 <vfprintf+0x9e>
    6588:	29 2d       	mov	r18, r9
    658a:	21 60       	ori	r18, 0x01	; 1
    658c:	2d c0       	rjmp	.+90     	; 0x65e8 <vfprintf+0xe4>
    658e:	39 2d       	mov	r19, r9
    6590:	32 60       	ori	r19, 0x02	; 2
    6592:	93 2e       	mov	r9, r19
    6594:	89 2d       	mov	r24, r9
    6596:	84 60       	ori	r24, 0x04	; 4
    6598:	98 2e       	mov	r9, r24
    659a:	2a c0       	rjmp	.+84     	; 0x65f0 <vfprintf+0xec>
    659c:	e9 2d       	mov	r30, r9
    659e:	e8 60       	ori	r30, 0x08	; 8
    65a0:	15 c0       	rjmp	.+42     	; 0x65cc <vfprintf+0xc8>
    65a2:	97 fc       	sbrc	r9, 7
    65a4:	2d c0       	rjmp	.+90     	; 0x6600 <vfprintf+0xfc>
    65a6:	20 ed       	ldi	r18, 0xD0	; 208
    65a8:	28 0f       	add	r18, r24
    65aa:	2a 30       	cpi	r18, 0x0A	; 10
    65ac:	88 f4       	brcc	.+34     	; 0x65d0 <vfprintf+0xcc>
    65ae:	96 fe       	sbrs	r9, 6
    65b0:	06 c0       	rjmp	.+12     	; 0x65be <vfprintf+0xba>
    65b2:	3a e0       	ldi	r19, 0x0A	; 10
    65b4:	13 9f       	mul	r17, r19
    65b6:	20 0d       	add	r18, r0
    65b8:	11 24       	eor	r1, r1
    65ba:	12 2f       	mov	r17, r18
    65bc:	19 c0       	rjmp	.+50     	; 0x65f0 <vfprintf+0xec>
    65be:	8a e0       	ldi	r24, 0x0A	; 10
    65c0:	58 9e       	mul	r5, r24
    65c2:	20 0d       	add	r18, r0
    65c4:	11 24       	eor	r1, r1
    65c6:	52 2e       	mov	r5, r18
    65c8:	e9 2d       	mov	r30, r9
    65ca:	e0 62       	ori	r30, 0x20	; 32
    65cc:	9e 2e       	mov	r9, r30
    65ce:	10 c0       	rjmp	.+32     	; 0x65f0 <vfprintf+0xec>
    65d0:	8e 32       	cpi	r24, 0x2E	; 46
    65d2:	31 f4       	brne	.+12     	; 0x65e0 <vfprintf+0xdc>
    65d4:	96 fc       	sbrc	r9, 6
    65d6:	e5 c2       	rjmp	.+1482   	; 0x6ba2 <vfprintf+0x69e>
    65d8:	f9 2d       	mov	r31, r9
    65da:	f0 64       	ori	r31, 0x40	; 64
    65dc:	9f 2e       	mov	r9, r31
    65de:	08 c0       	rjmp	.+16     	; 0x65f0 <vfprintf+0xec>
    65e0:	8c 36       	cpi	r24, 0x6C	; 108
    65e2:	21 f4       	brne	.+8      	; 0x65ec <vfprintf+0xe8>
    65e4:	29 2d       	mov	r18, r9
    65e6:	20 68       	ori	r18, 0x80	; 128
    65e8:	92 2e       	mov	r9, r18
    65ea:	02 c0       	rjmp	.+4      	; 0x65f0 <vfprintf+0xec>
    65ec:	88 36       	cpi	r24, 0x68	; 104
    65ee:	41 f4       	brne	.+16     	; 0x6600 <vfprintf+0xfc>
    65f0:	f1 01       	movw	r30, r2
    65f2:	93 fd       	sbrc	r25, 3
    65f4:	85 91       	lpm	r24, Z+
    65f6:	93 ff       	sbrs	r25, 3
    65f8:	81 91       	ld	r24, Z+
    65fa:	1f 01       	movw	r2, r30
    65fc:	81 11       	cpse	r24, r1
    65fe:	b3 cf       	rjmp	.-154    	; 0x6566 <vfprintf+0x62>
    6600:	9b eb       	ldi	r25, 0xBB	; 187
    6602:	98 0f       	add	r25, r24
    6604:	93 30       	cpi	r25, 0x03	; 3
    6606:	20 f4       	brcc	.+8      	; 0x6610 <vfprintf+0x10c>
    6608:	99 2d       	mov	r25, r9
    660a:	90 61       	ori	r25, 0x10	; 16
    660c:	80 5e       	subi	r24, 0xE0	; 224
    660e:	07 c0       	rjmp	.+14     	; 0x661e <vfprintf+0x11a>
    6610:	9b e9       	ldi	r25, 0x9B	; 155
    6612:	98 0f       	add	r25, r24
    6614:	93 30       	cpi	r25, 0x03	; 3
    6616:	08 f0       	brcs	.+2      	; 0x661a <vfprintf+0x116>
    6618:	66 c1       	rjmp	.+716    	; 0x68e6 <vfprintf+0x3e2>
    661a:	99 2d       	mov	r25, r9
    661c:	9f 7e       	andi	r25, 0xEF	; 239
    661e:	96 ff       	sbrs	r25, 6
    6620:	16 e0       	ldi	r17, 0x06	; 6
    6622:	9f 73       	andi	r25, 0x3F	; 63
    6624:	99 2e       	mov	r9, r25
    6626:	85 36       	cpi	r24, 0x65	; 101
    6628:	19 f4       	brne	.+6      	; 0x6630 <vfprintf+0x12c>
    662a:	90 64       	ori	r25, 0x40	; 64
    662c:	99 2e       	mov	r9, r25
    662e:	08 c0       	rjmp	.+16     	; 0x6640 <vfprintf+0x13c>
    6630:	86 36       	cpi	r24, 0x66	; 102
    6632:	21 f4       	brne	.+8      	; 0x663c <vfprintf+0x138>
    6634:	39 2f       	mov	r19, r25
    6636:	30 68       	ori	r19, 0x80	; 128
    6638:	93 2e       	mov	r9, r19
    663a:	02 c0       	rjmp	.+4      	; 0x6640 <vfprintf+0x13c>
    663c:	11 11       	cpse	r17, r1
    663e:	11 50       	subi	r17, 0x01	; 1
    6640:	97 fe       	sbrs	r9, 7
    6642:	07 c0       	rjmp	.+14     	; 0x6652 <vfprintf+0x14e>
    6644:	1c 33       	cpi	r17, 0x3C	; 60
    6646:	50 f4       	brcc	.+20     	; 0x665c <vfprintf+0x158>
    6648:	44 24       	eor	r4, r4
    664a:	43 94       	inc	r4
    664c:	41 0e       	add	r4, r17
    664e:	27 e0       	ldi	r18, 0x07	; 7
    6650:	0b c0       	rjmp	.+22     	; 0x6668 <vfprintf+0x164>
    6652:	18 30       	cpi	r17, 0x08	; 8
    6654:	38 f0       	brcs	.+14     	; 0x6664 <vfprintf+0x160>
    6656:	27 e0       	ldi	r18, 0x07	; 7
    6658:	17 e0       	ldi	r17, 0x07	; 7
    665a:	05 c0       	rjmp	.+10     	; 0x6666 <vfprintf+0x162>
    665c:	27 e0       	ldi	r18, 0x07	; 7
    665e:	9c e3       	ldi	r25, 0x3C	; 60
    6660:	49 2e       	mov	r4, r25
    6662:	02 c0       	rjmp	.+4      	; 0x6668 <vfprintf+0x164>
    6664:	21 2f       	mov	r18, r17
    6666:	41 2c       	mov	r4, r1
    6668:	56 01       	movw	r10, r12
    666a:	84 e0       	ldi	r24, 0x04	; 4
    666c:	a8 0e       	add	r10, r24
    666e:	b1 1c       	adc	r11, r1
    6670:	f6 01       	movw	r30, r12
    6672:	60 81       	ld	r22, Z
    6674:	71 81       	ldd	r23, Z+1	; 0x01
    6676:	82 81       	ldd	r24, Z+2	; 0x02
    6678:	93 81       	ldd	r25, Z+3	; 0x03
    667a:	04 2d       	mov	r16, r4
    667c:	a3 01       	movw	r20, r6
    667e:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <__ftoa_engine>
    6682:	6c 01       	movw	r12, r24
    6684:	f9 81       	ldd	r31, Y+1	; 0x01
    6686:	fc 87       	std	Y+12, r31	; 0x0c
    6688:	f0 ff       	sbrs	r31, 0
    668a:	02 c0       	rjmp	.+4      	; 0x6690 <vfprintf+0x18c>
    668c:	f3 ff       	sbrs	r31, 3
    668e:	06 c0       	rjmp	.+12     	; 0x669c <vfprintf+0x198>
    6690:	91 fc       	sbrc	r9, 1
    6692:	06 c0       	rjmp	.+12     	; 0x66a0 <vfprintf+0x19c>
    6694:	92 fe       	sbrs	r9, 2
    6696:	06 c0       	rjmp	.+12     	; 0x66a4 <vfprintf+0x1a0>
    6698:	00 e2       	ldi	r16, 0x20	; 32
    669a:	05 c0       	rjmp	.+10     	; 0x66a6 <vfprintf+0x1a2>
    669c:	0d e2       	ldi	r16, 0x2D	; 45
    669e:	03 c0       	rjmp	.+6      	; 0x66a6 <vfprintf+0x1a2>
    66a0:	0b e2       	ldi	r16, 0x2B	; 43
    66a2:	01 c0       	rjmp	.+2      	; 0x66a6 <vfprintf+0x1a2>
    66a4:	00 e0       	ldi	r16, 0x00	; 0
    66a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    66a8:	8c 70       	andi	r24, 0x0C	; 12
    66aa:	19 f0       	breq	.+6      	; 0x66b2 <vfprintf+0x1ae>
    66ac:	01 11       	cpse	r16, r1
    66ae:	5a c2       	rjmp	.+1204   	; 0x6b64 <vfprintf+0x660>
    66b0:	9b c2       	rjmp	.+1334   	; 0x6be8 <vfprintf+0x6e4>
    66b2:	97 fe       	sbrs	r9, 7
    66b4:	10 c0       	rjmp	.+32     	; 0x66d6 <vfprintf+0x1d2>
    66b6:	4c 0c       	add	r4, r12
    66b8:	fc 85       	ldd	r31, Y+12	; 0x0c
    66ba:	f4 ff       	sbrs	r31, 4
    66bc:	04 c0       	rjmp	.+8      	; 0x66c6 <vfprintf+0x1c2>
    66be:	8a 81       	ldd	r24, Y+2	; 0x02
    66c0:	81 33       	cpi	r24, 0x31	; 49
    66c2:	09 f4       	brne	.+2      	; 0x66c6 <vfprintf+0x1c2>
    66c4:	4a 94       	dec	r4
    66c6:	14 14       	cp	r1, r4
    66c8:	74 f5       	brge	.+92     	; 0x6726 <vfprintf+0x222>
    66ca:	28 e0       	ldi	r18, 0x08	; 8
    66cc:	24 15       	cp	r18, r4
    66ce:	78 f5       	brcc	.+94     	; 0x672e <vfprintf+0x22a>
    66d0:	88 e0       	ldi	r24, 0x08	; 8
    66d2:	48 2e       	mov	r4, r24
    66d4:	2c c0       	rjmp	.+88     	; 0x672e <vfprintf+0x22a>
    66d6:	96 fc       	sbrc	r9, 6
    66d8:	2a c0       	rjmp	.+84     	; 0x672e <vfprintf+0x22a>
    66da:	81 2f       	mov	r24, r17
    66dc:	90 e0       	ldi	r25, 0x00	; 0
    66de:	8c 15       	cp	r24, r12
    66e0:	9d 05       	cpc	r25, r13
    66e2:	9c f0       	brlt	.+38     	; 0x670a <vfprintf+0x206>
    66e4:	3c ef       	ldi	r19, 0xFC	; 252
    66e6:	c3 16       	cp	r12, r19
    66e8:	3f ef       	ldi	r19, 0xFF	; 255
    66ea:	d3 06       	cpc	r13, r19
    66ec:	74 f0       	brlt	.+28     	; 0x670a <vfprintf+0x206>
    66ee:	89 2d       	mov	r24, r9
    66f0:	80 68       	ori	r24, 0x80	; 128
    66f2:	98 2e       	mov	r9, r24
    66f4:	0a c0       	rjmp	.+20     	; 0x670a <vfprintf+0x206>
    66f6:	e2 e0       	ldi	r30, 0x02	; 2
    66f8:	f0 e0       	ldi	r31, 0x00	; 0
    66fa:	ec 0f       	add	r30, r28
    66fc:	fd 1f       	adc	r31, r29
    66fe:	e1 0f       	add	r30, r17
    6700:	f1 1d       	adc	r31, r1
    6702:	80 81       	ld	r24, Z
    6704:	80 33       	cpi	r24, 0x30	; 48
    6706:	19 f4       	brne	.+6      	; 0x670e <vfprintf+0x20a>
    6708:	11 50       	subi	r17, 0x01	; 1
    670a:	11 11       	cpse	r17, r1
    670c:	f4 cf       	rjmp	.-24     	; 0x66f6 <vfprintf+0x1f2>
    670e:	97 fe       	sbrs	r9, 7
    6710:	0e c0       	rjmp	.+28     	; 0x672e <vfprintf+0x22a>
    6712:	44 24       	eor	r4, r4
    6714:	43 94       	inc	r4
    6716:	41 0e       	add	r4, r17
    6718:	81 2f       	mov	r24, r17
    671a:	90 e0       	ldi	r25, 0x00	; 0
    671c:	c8 16       	cp	r12, r24
    671e:	d9 06       	cpc	r13, r25
    6720:	2c f4       	brge	.+10     	; 0x672c <vfprintf+0x228>
    6722:	1c 19       	sub	r17, r12
    6724:	04 c0       	rjmp	.+8      	; 0x672e <vfprintf+0x22a>
    6726:	44 24       	eor	r4, r4
    6728:	43 94       	inc	r4
    672a:	01 c0       	rjmp	.+2      	; 0x672e <vfprintf+0x22a>
    672c:	10 e0       	ldi	r17, 0x00	; 0
    672e:	97 fe       	sbrs	r9, 7
    6730:	06 c0       	rjmp	.+12     	; 0x673e <vfprintf+0x23a>
    6732:	1c 14       	cp	r1, r12
    6734:	1d 04       	cpc	r1, r13
    6736:	34 f4       	brge	.+12     	; 0x6744 <vfprintf+0x240>
    6738:	c6 01       	movw	r24, r12
    673a:	01 96       	adiw	r24, 0x01	; 1
    673c:	05 c0       	rjmp	.+10     	; 0x6748 <vfprintf+0x244>
    673e:	85 e0       	ldi	r24, 0x05	; 5
    6740:	90 e0       	ldi	r25, 0x00	; 0
    6742:	02 c0       	rjmp	.+4      	; 0x6748 <vfprintf+0x244>
    6744:	81 e0       	ldi	r24, 0x01	; 1
    6746:	90 e0       	ldi	r25, 0x00	; 0
    6748:	01 11       	cpse	r16, r1
    674a:	01 96       	adiw	r24, 0x01	; 1
    674c:	11 23       	and	r17, r17
    674e:	31 f0       	breq	.+12     	; 0x675c <vfprintf+0x258>
    6750:	21 2f       	mov	r18, r17
    6752:	30 e0       	ldi	r19, 0x00	; 0
    6754:	2f 5f       	subi	r18, 0xFF	; 255
    6756:	3f 4f       	sbci	r19, 0xFF	; 255
    6758:	82 0f       	add	r24, r18
    675a:	93 1f       	adc	r25, r19
    675c:	25 2d       	mov	r18, r5
    675e:	30 e0       	ldi	r19, 0x00	; 0
    6760:	82 17       	cp	r24, r18
    6762:	93 07       	cpc	r25, r19
    6764:	14 f4       	brge	.+4      	; 0x676a <vfprintf+0x266>
    6766:	58 1a       	sub	r5, r24
    6768:	01 c0       	rjmp	.+2      	; 0x676c <vfprintf+0x268>
    676a:	51 2c       	mov	r5, r1
    676c:	89 2d       	mov	r24, r9
    676e:	89 70       	andi	r24, 0x09	; 9
    6770:	49 f4       	brne	.+18     	; 0x6784 <vfprintf+0x280>
    6772:	55 20       	and	r5, r5
    6774:	39 f0       	breq	.+14     	; 0x6784 <vfprintf+0x280>
    6776:	b7 01       	movw	r22, r14
    6778:	80 e2       	ldi	r24, 0x20	; 32
    677a:	90 e0       	ldi	r25, 0x00	; 0
    677c:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    6780:	5a 94       	dec	r5
    6782:	f7 cf       	rjmp	.-18     	; 0x6772 <vfprintf+0x26e>
    6784:	00 23       	and	r16, r16
    6786:	29 f0       	breq	.+10     	; 0x6792 <vfprintf+0x28e>
    6788:	b7 01       	movw	r22, r14
    678a:	80 2f       	mov	r24, r16
    678c:	90 e0       	ldi	r25, 0x00	; 0
    678e:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    6792:	93 fc       	sbrc	r9, 3
    6794:	09 c0       	rjmp	.+18     	; 0x67a8 <vfprintf+0x2a4>
    6796:	55 20       	and	r5, r5
    6798:	39 f0       	breq	.+14     	; 0x67a8 <vfprintf+0x2a4>
    679a:	b7 01       	movw	r22, r14
    679c:	80 e3       	ldi	r24, 0x30	; 48
    679e:	90 e0       	ldi	r25, 0x00	; 0
    67a0:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    67a4:	5a 94       	dec	r5
    67a6:	f7 cf       	rjmp	.-18     	; 0x6796 <vfprintf+0x292>
    67a8:	97 fe       	sbrs	r9, 7
    67aa:	4c c0       	rjmp	.+152    	; 0x6844 <vfprintf+0x340>
    67ac:	46 01       	movw	r8, r12
    67ae:	d7 fe       	sbrs	r13, 7
    67b0:	02 c0       	rjmp	.+4      	; 0x67b6 <vfprintf+0x2b2>
    67b2:	81 2c       	mov	r8, r1
    67b4:	91 2c       	mov	r9, r1
    67b6:	c6 01       	movw	r24, r12
    67b8:	88 19       	sub	r24, r8
    67ba:	99 09       	sbc	r25, r9
    67bc:	f3 01       	movw	r30, r6
    67be:	e8 0f       	add	r30, r24
    67c0:	f9 1f       	adc	r31, r25
    67c2:	ed 87       	std	Y+13, r30	; 0x0d
    67c4:	fe 87       	std	Y+14, r31	; 0x0e
    67c6:	96 01       	movw	r18, r12
    67c8:	24 19       	sub	r18, r4
    67ca:	31 09       	sbc	r19, r1
    67cc:	2f 87       	std	Y+15, r18	; 0x0f
    67ce:	38 8b       	std	Y+16, r19	; 0x10
    67d0:	01 2f       	mov	r16, r17
    67d2:	10 e0       	ldi	r17, 0x00	; 0
    67d4:	11 95       	neg	r17
    67d6:	01 95       	neg	r16
    67d8:	11 09       	sbc	r17, r1
    67da:	3f ef       	ldi	r19, 0xFF	; 255
    67dc:	83 16       	cp	r8, r19
    67de:	93 06       	cpc	r9, r19
    67e0:	29 f4       	brne	.+10     	; 0x67ec <vfprintf+0x2e8>
    67e2:	b7 01       	movw	r22, r14
    67e4:	8e e2       	ldi	r24, 0x2E	; 46
    67e6:	90 e0       	ldi	r25, 0x00	; 0
    67e8:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    67ec:	c8 14       	cp	r12, r8
    67ee:	d9 04       	cpc	r13, r9
    67f0:	4c f0       	brlt	.+18     	; 0x6804 <vfprintf+0x300>
    67f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    67f4:	98 89       	ldd	r25, Y+16	; 0x10
    67f6:	88 15       	cp	r24, r8
    67f8:	99 05       	cpc	r25, r9
    67fa:	24 f4       	brge	.+8      	; 0x6804 <vfprintf+0x300>
    67fc:	ed 85       	ldd	r30, Y+13	; 0x0d
    67fe:	fe 85       	ldd	r31, Y+14	; 0x0e
    6800:	81 81       	ldd	r24, Z+1	; 0x01
    6802:	01 c0       	rjmp	.+2      	; 0x6806 <vfprintf+0x302>
    6804:	80 e3       	ldi	r24, 0x30	; 48
    6806:	f1 e0       	ldi	r31, 0x01	; 1
    6808:	8f 1a       	sub	r8, r31
    680a:	91 08       	sbc	r9, r1
    680c:	2d 85       	ldd	r18, Y+13	; 0x0d
    680e:	3e 85       	ldd	r19, Y+14	; 0x0e
    6810:	2f 5f       	subi	r18, 0xFF	; 255
    6812:	3f 4f       	sbci	r19, 0xFF	; 255
    6814:	2d 87       	std	Y+13, r18	; 0x0d
    6816:	3e 87       	std	Y+14, r19	; 0x0e
    6818:	80 16       	cp	r8, r16
    681a:	91 06       	cpc	r9, r17
    681c:	2c f0       	brlt	.+10     	; 0x6828 <vfprintf+0x324>
    681e:	b7 01       	movw	r22, r14
    6820:	90 e0       	ldi	r25, 0x00	; 0
    6822:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    6826:	d9 cf       	rjmp	.-78     	; 0x67da <vfprintf+0x2d6>
    6828:	c8 14       	cp	r12, r8
    682a:	d9 04       	cpc	r13, r9
    682c:	41 f4       	brne	.+16     	; 0x683e <vfprintf+0x33a>
    682e:	9a 81       	ldd	r25, Y+2	; 0x02
    6830:	96 33       	cpi	r25, 0x36	; 54
    6832:	20 f4       	brcc	.+8      	; 0x683c <vfprintf+0x338>
    6834:	95 33       	cpi	r25, 0x35	; 53
    6836:	19 f4       	brne	.+6      	; 0x683e <vfprintf+0x33a>
    6838:	3c 85       	ldd	r19, Y+12	; 0x0c
    683a:	34 ff       	sbrs	r19, 4
    683c:	81 e3       	ldi	r24, 0x31	; 49
    683e:	b7 01       	movw	r22, r14
    6840:	90 e0       	ldi	r25, 0x00	; 0
    6842:	4e c0       	rjmp	.+156    	; 0x68e0 <vfprintf+0x3dc>
    6844:	8a 81       	ldd	r24, Y+2	; 0x02
    6846:	81 33       	cpi	r24, 0x31	; 49
    6848:	19 f0       	breq	.+6      	; 0x6850 <vfprintf+0x34c>
    684a:	9c 85       	ldd	r25, Y+12	; 0x0c
    684c:	9f 7e       	andi	r25, 0xEF	; 239
    684e:	9c 87       	std	Y+12, r25	; 0x0c
    6850:	b7 01       	movw	r22, r14
    6852:	90 e0       	ldi	r25, 0x00	; 0
    6854:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    6858:	11 11       	cpse	r17, r1
    685a:	05 c0       	rjmp	.+10     	; 0x6866 <vfprintf+0x362>
    685c:	94 fc       	sbrc	r9, 4
    685e:	18 c0       	rjmp	.+48     	; 0x6890 <vfprintf+0x38c>
    6860:	85 e6       	ldi	r24, 0x65	; 101
    6862:	90 e0       	ldi	r25, 0x00	; 0
    6864:	17 c0       	rjmp	.+46     	; 0x6894 <vfprintf+0x390>
    6866:	b7 01       	movw	r22, r14
    6868:	8e e2       	ldi	r24, 0x2E	; 46
    686a:	90 e0       	ldi	r25, 0x00	; 0
    686c:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    6870:	1e 5f       	subi	r17, 0xFE	; 254
    6872:	82 e0       	ldi	r24, 0x02	; 2
    6874:	01 e0       	ldi	r16, 0x01	; 1
    6876:	08 0f       	add	r16, r24
    6878:	f3 01       	movw	r30, r6
    687a:	e8 0f       	add	r30, r24
    687c:	f1 1d       	adc	r31, r1
    687e:	80 81       	ld	r24, Z
    6880:	b7 01       	movw	r22, r14
    6882:	90 e0       	ldi	r25, 0x00	; 0
    6884:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    6888:	80 2f       	mov	r24, r16
    688a:	01 13       	cpse	r16, r17
    688c:	f3 cf       	rjmp	.-26     	; 0x6874 <vfprintf+0x370>
    688e:	e6 cf       	rjmp	.-52     	; 0x685c <vfprintf+0x358>
    6890:	85 e4       	ldi	r24, 0x45	; 69
    6892:	90 e0       	ldi	r25, 0x00	; 0
    6894:	b7 01       	movw	r22, r14
    6896:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    689a:	d7 fc       	sbrc	r13, 7
    689c:	06 c0       	rjmp	.+12     	; 0x68aa <vfprintf+0x3a6>
    689e:	c1 14       	cp	r12, r1
    68a0:	d1 04       	cpc	r13, r1
    68a2:	41 f4       	brne	.+16     	; 0x68b4 <vfprintf+0x3b0>
    68a4:	ec 85       	ldd	r30, Y+12	; 0x0c
    68a6:	e4 ff       	sbrs	r30, 4
    68a8:	05 c0       	rjmp	.+10     	; 0x68b4 <vfprintf+0x3b0>
    68aa:	d1 94       	neg	r13
    68ac:	c1 94       	neg	r12
    68ae:	d1 08       	sbc	r13, r1
    68b0:	8d e2       	ldi	r24, 0x2D	; 45
    68b2:	01 c0       	rjmp	.+2      	; 0x68b6 <vfprintf+0x3b2>
    68b4:	8b e2       	ldi	r24, 0x2B	; 43
    68b6:	b7 01       	movw	r22, r14
    68b8:	90 e0       	ldi	r25, 0x00	; 0
    68ba:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    68be:	80 e3       	ldi	r24, 0x30	; 48
    68c0:	2a e0       	ldi	r18, 0x0A	; 10
    68c2:	c2 16       	cp	r12, r18
    68c4:	d1 04       	cpc	r13, r1
    68c6:	2c f0       	brlt	.+10     	; 0x68d2 <vfprintf+0x3ce>
    68c8:	8f 5f       	subi	r24, 0xFF	; 255
    68ca:	fa e0       	ldi	r31, 0x0A	; 10
    68cc:	cf 1a       	sub	r12, r31
    68ce:	d1 08       	sbc	r13, r1
    68d0:	f7 cf       	rjmp	.-18     	; 0x68c0 <vfprintf+0x3bc>
    68d2:	b7 01       	movw	r22, r14
    68d4:	90 e0       	ldi	r25, 0x00	; 0
    68d6:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    68da:	b7 01       	movw	r22, r14
    68dc:	c6 01       	movw	r24, r12
    68de:	c0 96       	adiw	r24, 0x30	; 48
    68e0:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    68e4:	54 c1       	rjmp	.+680    	; 0x6b8e <vfprintf+0x68a>
    68e6:	83 36       	cpi	r24, 0x63	; 99
    68e8:	31 f0       	breq	.+12     	; 0x68f6 <vfprintf+0x3f2>
    68ea:	83 37       	cpi	r24, 0x73	; 115
    68ec:	79 f0       	breq	.+30     	; 0x690c <vfprintf+0x408>
    68ee:	83 35       	cpi	r24, 0x53	; 83
    68f0:	09 f0       	breq	.+2      	; 0x68f4 <vfprintf+0x3f0>
    68f2:	56 c0       	rjmp	.+172    	; 0x69a0 <vfprintf+0x49c>
    68f4:	20 c0       	rjmp	.+64     	; 0x6936 <vfprintf+0x432>
    68f6:	56 01       	movw	r10, r12
    68f8:	32 e0       	ldi	r19, 0x02	; 2
    68fa:	a3 0e       	add	r10, r19
    68fc:	b1 1c       	adc	r11, r1
    68fe:	f6 01       	movw	r30, r12
    6900:	80 81       	ld	r24, Z
    6902:	89 83       	std	Y+1, r24	; 0x01
    6904:	01 e0       	ldi	r16, 0x01	; 1
    6906:	10 e0       	ldi	r17, 0x00	; 0
    6908:	63 01       	movw	r12, r6
    690a:	12 c0       	rjmp	.+36     	; 0x6930 <vfprintf+0x42c>
    690c:	56 01       	movw	r10, r12
    690e:	f2 e0       	ldi	r31, 0x02	; 2
    6910:	af 0e       	add	r10, r31
    6912:	b1 1c       	adc	r11, r1
    6914:	f6 01       	movw	r30, r12
    6916:	c0 80       	ld	r12, Z
    6918:	d1 80       	ldd	r13, Z+1	; 0x01
    691a:	96 fe       	sbrs	r9, 6
    691c:	03 c0       	rjmp	.+6      	; 0x6924 <vfprintf+0x420>
    691e:	61 2f       	mov	r22, r17
    6920:	70 e0       	ldi	r23, 0x00	; 0
    6922:	02 c0       	rjmp	.+4      	; 0x6928 <vfprintf+0x424>
    6924:	6f ef       	ldi	r22, 0xFF	; 255
    6926:	7f ef       	ldi	r23, 0xFF	; 255
    6928:	c6 01       	movw	r24, r12
    692a:	0e 94 f3 37 	call	0x6fe6	; 0x6fe6 <strnlen>
    692e:	8c 01       	movw	r16, r24
    6930:	f9 2d       	mov	r31, r9
    6932:	ff 77       	andi	r31, 0x7F	; 127
    6934:	14 c0       	rjmp	.+40     	; 0x695e <vfprintf+0x45a>
    6936:	56 01       	movw	r10, r12
    6938:	22 e0       	ldi	r18, 0x02	; 2
    693a:	a2 0e       	add	r10, r18
    693c:	b1 1c       	adc	r11, r1
    693e:	f6 01       	movw	r30, r12
    6940:	c0 80       	ld	r12, Z
    6942:	d1 80       	ldd	r13, Z+1	; 0x01
    6944:	96 fe       	sbrs	r9, 6
    6946:	03 c0       	rjmp	.+6      	; 0x694e <vfprintf+0x44a>
    6948:	61 2f       	mov	r22, r17
    694a:	70 e0       	ldi	r23, 0x00	; 0
    694c:	02 c0       	rjmp	.+4      	; 0x6952 <vfprintf+0x44e>
    694e:	6f ef       	ldi	r22, 0xFF	; 255
    6950:	7f ef       	ldi	r23, 0xFF	; 255
    6952:	c6 01       	movw	r24, r12
    6954:	0e 94 d6 37 	call	0x6fac	; 0x6fac <strnlen_P>
    6958:	8c 01       	movw	r16, r24
    695a:	f9 2d       	mov	r31, r9
    695c:	f0 68       	ori	r31, 0x80	; 128
    695e:	9f 2e       	mov	r9, r31
    6960:	f3 fd       	sbrc	r31, 3
    6962:	1a c0       	rjmp	.+52     	; 0x6998 <vfprintf+0x494>
    6964:	85 2d       	mov	r24, r5
    6966:	90 e0       	ldi	r25, 0x00	; 0
    6968:	08 17       	cp	r16, r24
    696a:	19 07       	cpc	r17, r25
    696c:	a8 f4       	brcc	.+42     	; 0x6998 <vfprintf+0x494>
    696e:	b7 01       	movw	r22, r14
    6970:	80 e2       	ldi	r24, 0x20	; 32
    6972:	90 e0       	ldi	r25, 0x00	; 0
    6974:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    6978:	5a 94       	dec	r5
    697a:	f4 cf       	rjmp	.-24     	; 0x6964 <vfprintf+0x460>
    697c:	f6 01       	movw	r30, r12
    697e:	97 fc       	sbrc	r9, 7
    6980:	85 91       	lpm	r24, Z+
    6982:	97 fe       	sbrs	r9, 7
    6984:	81 91       	ld	r24, Z+
    6986:	6f 01       	movw	r12, r30
    6988:	b7 01       	movw	r22, r14
    698a:	90 e0       	ldi	r25, 0x00	; 0
    698c:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    6990:	51 10       	cpse	r5, r1
    6992:	5a 94       	dec	r5
    6994:	01 50       	subi	r16, 0x01	; 1
    6996:	11 09       	sbc	r17, r1
    6998:	01 15       	cp	r16, r1
    699a:	11 05       	cpc	r17, r1
    699c:	79 f7       	brne	.-34     	; 0x697c <vfprintf+0x478>
    699e:	f7 c0       	rjmp	.+494    	; 0x6b8e <vfprintf+0x68a>
    69a0:	84 36       	cpi	r24, 0x64	; 100
    69a2:	11 f0       	breq	.+4      	; 0x69a8 <vfprintf+0x4a4>
    69a4:	89 36       	cpi	r24, 0x69	; 105
    69a6:	61 f5       	brne	.+88     	; 0x6a00 <vfprintf+0x4fc>
    69a8:	56 01       	movw	r10, r12
    69aa:	97 fe       	sbrs	r9, 7
    69ac:	09 c0       	rjmp	.+18     	; 0x69c0 <vfprintf+0x4bc>
    69ae:	24 e0       	ldi	r18, 0x04	; 4
    69b0:	a2 0e       	add	r10, r18
    69b2:	b1 1c       	adc	r11, r1
    69b4:	f6 01       	movw	r30, r12
    69b6:	60 81       	ld	r22, Z
    69b8:	71 81       	ldd	r23, Z+1	; 0x01
    69ba:	82 81       	ldd	r24, Z+2	; 0x02
    69bc:	93 81       	ldd	r25, Z+3	; 0x03
    69be:	0a c0       	rjmp	.+20     	; 0x69d4 <vfprintf+0x4d0>
    69c0:	f2 e0       	ldi	r31, 0x02	; 2
    69c2:	af 0e       	add	r10, r31
    69c4:	b1 1c       	adc	r11, r1
    69c6:	f6 01       	movw	r30, r12
    69c8:	60 81       	ld	r22, Z
    69ca:	71 81       	ldd	r23, Z+1	; 0x01
    69cc:	07 2e       	mov	r0, r23
    69ce:	00 0c       	add	r0, r0
    69d0:	88 0b       	sbc	r24, r24
    69d2:	99 0b       	sbc	r25, r25
    69d4:	f9 2d       	mov	r31, r9
    69d6:	ff 76       	andi	r31, 0x6F	; 111
    69d8:	9f 2e       	mov	r9, r31
    69da:	97 ff       	sbrs	r25, 7
    69dc:	09 c0       	rjmp	.+18     	; 0x69f0 <vfprintf+0x4ec>
    69de:	90 95       	com	r25
    69e0:	80 95       	com	r24
    69e2:	70 95       	com	r23
    69e4:	61 95       	neg	r22
    69e6:	7f 4f       	sbci	r23, 0xFF	; 255
    69e8:	8f 4f       	sbci	r24, 0xFF	; 255
    69ea:	9f 4f       	sbci	r25, 0xFF	; 255
    69ec:	f0 68       	ori	r31, 0x80	; 128
    69ee:	9f 2e       	mov	r9, r31
    69f0:	2a e0       	ldi	r18, 0x0A	; 10
    69f2:	30 e0       	ldi	r19, 0x00	; 0
    69f4:	a3 01       	movw	r20, r6
    69f6:	0e 94 79 38 	call	0x70f2	; 0x70f2 <__ultoa_invert>
    69fa:	c8 2e       	mov	r12, r24
    69fc:	c6 18       	sub	r12, r6
    69fe:	3f c0       	rjmp	.+126    	; 0x6a7e <vfprintf+0x57a>
    6a00:	09 2d       	mov	r16, r9
    6a02:	85 37       	cpi	r24, 0x75	; 117
    6a04:	21 f4       	brne	.+8      	; 0x6a0e <vfprintf+0x50a>
    6a06:	0f 7e       	andi	r16, 0xEF	; 239
    6a08:	2a e0       	ldi	r18, 0x0A	; 10
    6a0a:	30 e0       	ldi	r19, 0x00	; 0
    6a0c:	1d c0       	rjmp	.+58     	; 0x6a48 <vfprintf+0x544>
    6a0e:	09 7f       	andi	r16, 0xF9	; 249
    6a10:	8f 36       	cpi	r24, 0x6F	; 111
    6a12:	91 f0       	breq	.+36     	; 0x6a38 <vfprintf+0x534>
    6a14:	18 f4       	brcc	.+6      	; 0x6a1c <vfprintf+0x518>
    6a16:	88 35       	cpi	r24, 0x58	; 88
    6a18:	59 f0       	breq	.+22     	; 0x6a30 <vfprintf+0x52c>
    6a1a:	c3 c0       	rjmp	.+390    	; 0x6ba2 <vfprintf+0x69e>
    6a1c:	80 37       	cpi	r24, 0x70	; 112
    6a1e:	19 f0       	breq	.+6      	; 0x6a26 <vfprintf+0x522>
    6a20:	88 37       	cpi	r24, 0x78	; 120
    6a22:	11 f0       	breq	.+4      	; 0x6a28 <vfprintf+0x524>
    6a24:	be c0       	rjmp	.+380    	; 0x6ba2 <vfprintf+0x69e>
    6a26:	00 61       	ori	r16, 0x10	; 16
    6a28:	04 ff       	sbrs	r16, 4
    6a2a:	09 c0       	rjmp	.+18     	; 0x6a3e <vfprintf+0x53a>
    6a2c:	04 60       	ori	r16, 0x04	; 4
    6a2e:	07 c0       	rjmp	.+14     	; 0x6a3e <vfprintf+0x53a>
    6a30:	94 fe       	sbrs	r9, 4
    6a32:	08 c0       	rjmp	.+16     	; 0x6a44 <vfprintf+0x540>
    6a34:	06 60       	ori	r16, 0x06	; 6
    6a36:	06 c0       	rjmp	.+12     	; 0x6a44 <vfprintf+0x540>
    6a38:	28 e0       	ldi	r18, 0x08	; 8
    6a3a:	30 e0       	ldi	r19, 0x00	; 0
    6a3c:	05 c0       	rjmp	.+10     	; 0x6a48 <vfprintf+0x544>
    6a3e:	20 e1       	ldi	r18, 0x10	; 16
    6a40:	30 e0       	ldi	r19, 0x00	; 0
    6a42:	02 c0       	rjmp	.+4      	; 0x6a48 <vfprintf+0x544>
    6a44:	20 e1       	ldi	r18, 0x10	; 16
    6a46:	32 e0       	ldi	r19, 0x02	; 2
    6a48:	56 01       	movw	r10, r12
    6a4a:	07 ff       	sbrs	r16, 7
    6a4c:	09 c0       	rjmp	.+18     	; 0x6a60 <vfprintf+0x55c>
    6a4e:	84 e0       	ldi	r24, 0x04	; 4
    6a50:	a8 0e       	add	r10, r24
    6a52:	b1 1c       	adc	r11, r1
    6a54:	f6 01       	movw	r30, r12
    6a56:	60 81       	ld	r22, Z
    6a58:	71 81       	ldd	r23, Z+1	; 0x01
    6a5a:	82 81       	ldd	r24, Z+2	; 0x02
    6a5c:	93 81       	ldd	r25, Z+3	; 0x03
    6a5e:	08 c0       	rjmp	.+16     	; 0x6a70 <vfprintf+0x56c>
    6a60:	f2 e0       	ldi	r31, 0x02	; 2
    6a62:	af 0e       	add	r10, r31
    6a64:	b1 1c       	adc	r11, r1
    6a66:	f6 01       	movw	r30, r12
    6a68:	60 81       	ld	r22, Z
    6a6a:	71 81       	ldd	r23, Z+1	; 0x01
    6a6c:	80 e0       	ldi	r24, 0x00	; 0
    6a6e:	90 e0       	ldi	r25, 0x00	; 0
    6a70:	a3 01       	movw	r20, r6
    6a72:	0e 94 79 38 	call	0x70f2	; 0x70f2 <__ultoa_invert>
    6a76:	c8 2e       	mov	r12, r24
    6a78:	c6 18       	sub	r12, r6
    6a7a:	0f 77       	andi	r16, 0x7F	; 127
    6a7c:	90 2e       	mov	r9, r16
    6a7e:	96 fe       	sbrs	r9, 6
    6a80:	0b c0       	rjmp	.+22     	; 0x6a98 <vfprintf+0x594>
    6a82:	09 2d       	mov	r16, r9
    6a84:	0e 7f       	andi	r16, 0xFE	; 254
    6a86:	c1 16       	cp	r12, r17
    6a88:	50 f4       	brcc	.+20     	; 0x6a9e <vfprintf+0x59a>
    6a8a:	94 fe       	sbrs	r9, 4
    6a8c:	0a c0       	rjmp	.+20     	; 0x6aa2 <vfprintf+0x59e>
    6a8e:	92 fc       	sbrc	r9, 2
    6a90:	08 c0       	rjmp	.+16     	; 0x6aa2 <vfprintf+0x59e>
    6a92:	09 2d       	mov	r16, r9
    6a94:	0e 7e       	andi	r16, 0xEE	; 238
    6a96:	05 c0       	rjmp	.+10     	; 0x6aa2 <vfprintf+0x59e>
    6a98:	dc 2c       	mov	r13, r12
    6a9a:	09 2d       	mov	r16, r9
    6a9c:	03 c0       	rjmp	.+6      	; 0x6aa4 <vfprintf+0x5a0>
    6a9e:	dc 2c       	mov	r13, r12
    6aa0:	01 c0       	rjmp	.+2      	; 0x6aa4 <vfprintf+0x5a0>
    6aa2:	d1 2e       	mov	r13, r17
    6aa4:	04 ff       	sbrs	r16, 4
    6aa6:	0d c0       	rjmp	.+26     	; 0x6ac2 <vfprintf+0x5be>
    6aa8:	fe 01       	movw	r30, r28
    6aaa:	ec 0d       	add	r30, r12
    6aac:	f1 1d       	adc	r31, r1
    6aae:	80 81       	ld	r24, Z
    6ab0:	80 33       	cpi	r24, 0x30	; 48
    6ab2:	11 f4       	brne	.+4      	; 0x6ab8 <vfprintf+0x5b4>
    6ab4:	09 7e       	andi	r16, 0xE9	; 233
    6ab6:	09 c0       	rjmp	.+18     	; 0x6aca <vfprintf+0x5c6>
    6ab8:	02 ff       	sbrs	r16, 2
    6aba:	06 c0       	rjmp	.+12     	; 0x6ac8 <vfprintf+0x5c4>
    6abc:	d3 94       	inc	r13
    6abe:	d3 94       	inc	r13
    6ac0:	04 c0       	rjmp	.+8      	; 0x6aca <vfprintf+0x5c6>
    6ac2:	80 2f       	mov	r24, r16
    6ac4:	86 78       	andi	r24, 0x86	; 134
    6ac6:	09 f0       	breq	.+2      	; 0x6aca <vfprintf+0x5c6>
    6ac8:	d3 94       	inc	r13
    6aca:	03 fd       	sbrc	r16, 3
    6acc:	11 c0       	rjmp	.+34     	; 0x6af0 <vfprintf+0x5ec>
    6ace:	00 ff       	sbrs	r16, 0
    6ad0:	06 c0       	rjmp	.+12     	; 0x6ade <vfprintf+0x5da>
    6ad2:	1c 2d       	mov	r17, r12
    6ad4:	d5 14       	cp	r13, r5
    6ad6:	80 f4       	brcc	.+32     	; 0x6af8 <vfprintf+0x5f4>
    6ad8:	15 0d       	add	r17, r5
    6ada:	1d 19       	sub	r17, r13
    6adc:	0d c0       	rjmp	.+26     	; 0x6af8 <vfprintf+0x5f4>
    6ade:	d5 14       	cp	r13, r5
    6ae0:	58 f4       	brcc	.+22     	; 0x6af8 <vfprintf+0x5f4>
    6ae2:	b7 01       	movw	r22, r14
    6ae4:	80 e2       	ldi	r24, 0x20	; 32
    6ae6:	90 e0       	ldi	r25, 0x00	; 0
    6ae8:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    6aec:	d3 94       	inc	r13
    6aee:	f7 cf       	rjmp	.-18     	; 0x6ade <vfprintf+0x5da>
    6af0:	d5 14       	cp	r13, r5
    6af2:	10 f4       	brcc	.+4      	; 0x6af8 <vfprintf+0x5f4>
    6af4:	5d 18       	sub	r5, r13
    6af6:	01 c0       	rjmp	.+2      	; 0x6afa <vfprintf+0x5f6>
    6af8:	51 2c       	mov	r5, r1
    6afa:	04 ff       	sbrs	r16, 4
    6afc:	10 c0       	rjmp	.+32     	; 0x6b1e <vfprintf+0x61a>
    6afe:	b7 01       	movw	r22, r14
    6b00:	80 e3       	ldi	r24, 0x30	; 48
    6b02:	90 e0       	ldi	r25, 0x00	; 0
    6b04:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    6b08:	02 ff       	sbrs	r16, 2
    6b0a:	17 c0       	rjmp	.+46     	; 0x6b3a <vfprintf+0x636>
    6b0c:	01 fd       	sbrc	r16, 1
    6b0e:	03 c0       	rjmp	.+6      	; 0x6b16 <vfprintf+0x612>
    6b10:	88 e7       	ldi	r24, 0x78	; 120
    6b12:	90 e0       	ldi	r25, 0x00	; 0
    6b14:	02 c0       	rjmp	.+4      	; 0x6b1a <vfprintf+0x616>
    6b16:	88 e5       	ldi	r24, 0x58	; 88
    6b18:	90 e0       	ldi	r25, 0x00	; 0
    6b1a:	b7 01       	movw	r22, r14
    6b1c:	0c c0       	rjmp	.+24     	; 0x6b36 <vfprintf+0x632>
    6b1e:	80 2f       	mov	r24, r16
    6b20:	86 78       	andi	r24, 0x86	; 134
    6b22:	59 f0       	breq	.+22     	; 0x6b3a <vfprintf+0x636>
    6b24:	01 ff       	sbrs	r16, 1
    6b26:	02 c0       	rjmp	.+4      	; 0x6b2c <vfprintf+0x628>
    6b28:	8b e2       	ldi	r24, 0x2B	; 43
    6b2a:	01 c0       	rjmp	.+2      	; 0x6b2e <vfprintf+0x62a>
    6b2c:	80 e2       	ldi	r24, 0x20	; 32
    6b2e:	07 fd       	sbrc	r16, 7
    6b30:	8d e2       	ldi	r24, 0x2D	; 45
    6b32:	b7 01       	movw	r22, r14
    6b34:	90 e0       	ldi	r25, 0x00	; 0
    6b36:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    6b3a:	c1 16       	cp	r12, r17
    6b3c:	38 f4       	brcc	.+14     	; 0x6b4c <vfprintf+0x648>
    6b3e:	b7 01       	movw	r22, r14
    6b40:	80 e3       	ldi	r24, 0x30	; 48
    6b42:	90 e0       	ldi	r25, 0x00	; 0
    6b44:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    6b48:	11 50       	subi	r17, 0x01	; 1
    6b4a:	f7 cf       	rjmp	.-18     	; 0x6b3a <vfprintf+0x636>
    6b4c:	ca 94       	dec	r12
    6b4e:	f3 01       	movw	r30, r6
    6b50:	ec 0d       	add	r30, r12
    6b52:	f1 1d       	adc	r31, r1
    6b54:	80 81       	ld	r24, Z
    6b56:	b7 01       	movw	r22, r14
    6b58:	90 e0       	ldi	r25, 0x00	; 0
    6b5a:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    6b5e:	c1 10       	cpse	r12, r1
    6b60:	f5 cf       	rjmp	.-22     	; 0x6b4c <vfprintf+0x648>
    6b62:	15 c0       	rjmp	.+42     	; 0x6b8e <vfprintf+0x68a>
    6b64:	f4 e0       	ldi	r31, 0x04	; 4
    6b66:	f5 15       	cp	r31, r5
    6b68:	60 f5       	brcc	.+88     	; 0x6bc2 <vfprintf+0x6be>
    6b6a:	84 e0       	ldi	r24, 0x04	; 4
    6b6c:	58 1a       	sub	r5, r24
    6b6e:	93 fe       	sbrs	r9, 3
    6b70:	1f c0       	rjmp	.+62     	; 0x6bb0 <vfprintf+0x6ac>
    6b72:	01 11       	cpse	r16, r1
    6b74:	27 c0       	rjmp	.+78     	; 0x6bc4 <vfprintf+0x6c0>
    6b76:	2c 85       	ldd	r18, Y+12	; 0x0c
    6b78:	23 ff       	sbrs	r18, 3
    6b7a:	2a c0       	rjmp	.+84     	; 0x6bd0 <vfprintf+0x6cc>
    6b7c:	06 e6       	ldi	r16, 0x66	; 102
    6b7e:	11 e0       	ldi	r17, 0x01	; 1
    6b80:	39 2d       	mov	r19, r9
    6b82:	30 71       	andi	r19, 0x10	; 16
    6b84:	93 2e       	mov	r9, r19
    6b86:	f8 01       	movw	r30, r16
    6b88:	84 91       	lpm	r24, Z
    6b8a:	81 11       	cpse	r24, r1
    6b8c:	24 c0       	rjmp	.+72     	; 0x6bd6 <vfprintf+0x6d2>
    6b8e:	55 20       	and	r5, r5
    6b90:	09 f4       	brne	.+2      	; 0x6b94 <vfprintf+0x690>
    6b92:	e4 cc       	rjmp	.-1592   	; 0x655c <vfprintf+0x58>
    6b94:	b7 01       	movw	r22, r14
    6b96:	80 e2       	ldi	r24, 0x20	; 32
    6b98:	90 e0       	ldi	r25, 0x00	; 0
    6b9a:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    6b9e:	5a 94       	dec	r5
    6ba0:	f6 cf       	rjmp	.-20     	; 0x6b8e <vfprintf+0x68a>
    6ba2:	f7 01       	movw	r30, r14
    6ba4:	86 81       	ldd	r24, Z+6	; 0x06
    6ba6:	97 81       	ldd	r25, Z+7	; 0x07
    6ba8:	26 c0       	rjmp	.+76     	; 0x6bf6 <vfprintf+0x6f2>
    6baa:	8f ef       	ldi	r24, 0xFF	; 255
    6bac:	9f ef       	ldi	r25, 0xFF	; 255
    6bae:	23 c0       	rjmp	.+70     	; 0x6bf6 <vfprintf+0x6f2>
    6bb0:	b7 01       	movw	r22, r14
    6bb2:	80 e2       	ldi	r24, 0x20	; 32
    6bb4:	90 e0       	ldi	r25, 0x00	; 0
    6bb6:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    6bba:	5a 94       	dec	r5
    6bbc:	51 10       	cpse	r5, r1
    6bbe:	f8 cf       	rjmp	.-16     	; 0x6bb0 <vfprintf+0x6ac>
    6bc0:	d8 cf       	rjmp	.-80     	; 0x6b72 <vfprintf+0x66e>
    6bc2:	51 2c       	mov	r5, r1
    6bc4:	b7 01       	movw	r22, r14
    6bc6:	80 2f       	mov	r24, r16
    6bc8:	90 e0       	ldi	r25, 0x00	; 0
    6bca:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    6bce:	d3 cf       	rjmp	.-90     	; 0x6b76 <vfprintf+0x672>
    6bd0:	0a e6       	ldi	r16, 0x6A	; 106
    6bd2:	11 e0       	ldi	r17, 0x01	; 1
    6bd4:	d5 cf       	rjmp	.-86     	; 0x6b80 <vfprintf+0x67c>
    6bd6:	91 10       	cpse	r9, r1
    6bd8:	80 52       	subi	r24, 0x20	; 32
    6bda:	b7 01       	movw	r22, r14
    6bdc:	90 e0       	ldi	r25, 0x00	; 0
    6bde:	0e 94 1b 38 	call	0x7036	; 0x7036 <fputc>
    6be2:	0f 5f       	subi	r16, 0xFF	; 255
    6be4:	1f 4f       	sbci	r17, 0xFF	; 255
    6be6:	cf cf       	rjmp	.-98     	; 0x6b86 <vfprintf+0x682>
    6be8:	23 e0       	ldi	r18, 0x03	; 3
    6bea:	25 15       	cp	r18, r5
    6bec:	10 f4       	brcc	.+4      	; 0x6bf2 <vfprintf+0x6ee>
    6bee:	83 e0       	ldi	r24, 0x03	; 3
    6bf0:	bd cf       	rjmp	.-134    	; 0x6b6c <vfprintf+0x668>
    6bf2:	51 2c       	mov	r5, r1
    6bf4:	c0 cf       	rjmp	.-128    	; 0x6b76 <vfprintf+0x672>
    6bf6:	60 96       	adiw	r28, 0x10	; 16
    6bf8:	e2 e1       	ldi	r30, 0x12	; 18
    6bfa:	0c 94 5c 36 	jmp	0x6cb8	; 0x6cb8 <__epilogue_restores__>

00006bfe <__divmodhi4>:
    6bfe:	97 fb       	bst	r25, 7
    6c00:	07 2e       	mov	r0, r23
    6c02:	16 f4       	brtc	.+4      	; 0x6c08 <__divmodhi4+0xa>
    6c04:	00 94       	com	r0
    6c06:	07 d0       	rcall	.+14     	; 0x6c16 <__divmodhi4_neg1>
    6c08:	77 fd       	sbrc	r23, 7
    6c0a:	09 d0       	rcall	.+18     	; 0x6c1e <__divmodhi4_neg2>
    6c0c:	0e 94 74 36 	call	0x6ce8	; 0x6ce8 <__udivmodhi4>
    6c10:	07 fc       	sbrc	r0, 7
    6c12:	05 d0       	rcall	.+10     	; 0x6c1e <__divmodhi4_neg2>
    6c14:	3e f4       	brtc	.+14     	; 0x6c24 <__divmodhi4_exit>

00006c16 <__divmodhi4_neg1>:
    6c16:	90 95       	com	r25
    6c18:	81 95       	neg	r24
    6c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    6c1c:	08 95       	ret

00006c1e <__divmodhi4_neg2>:
    6c1e:	70 95       	com	r23
    6c20:	61 95       	neg	r22
    6c22:	7f 4f       	sbci	r23, 0xFF	; 255

00006c24 <__divmodhi4_exit>:
    6c24:	08 95       	ret

00006c26 <__divmodsi4>:
    6c26:	05 2e       	mov	r0, r21
    6c28:	97 fb       	bst	r25, 7
    6c2a:	1e f4       	brtc	.+6      	; 0x6c32 <__divmodsi4+0xc>
    6c2c:	00 94       	com	r0
    6c2e:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <__negsi2>
    6c32:	57 fd       	sbrc	r21, 7
    6c34:	07 d0       	rcall	.+14     	; 0x6c44 <__divmodsi4_neg2>
    6c36:	0e 94 88 36 	call	0x6d10	; 0x6d10 <__udivmodsi4>
    6c3a:	07 fc       	sbrc	r0, 7
    6c3c:	03 d0       	rcall	.+6      	; 0x6c44 <__divmodsi4_neg2>
    6c3e:	4e f4       	brtc	.+18     	; 0x6c52 <__divmodsi4_exit>
    6c40:	0c 94 2a 36 	jmp	0x6c54	; 0x6c54 <__negsi2>

00006c44 <__divmodsi4_neg2>:
    6c44:	50 95       	com	r21
    6c46:	40 95       	com	r20
    6c48:	30 95       	com	r19
    6c4a:	21 95       	neg	r18
    6c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    6c4e:	4f 4f       	sbci	r20, 0xFF	; 255
    6c50:	5f 4f       	sbci	r21, 0xFF	; 255

00006c52 <__divmodsi4_exit>:
    6c52:	08 95       	ret

00006c54 <__negsi2>:
    6c54:	90 95       	com	r25
    6c56:	80 95       	com	r24
    6c58:	70 95       	com	r23
    6c5a:	61 95       	neg	r22
    6c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    6c5e:	8f 4f       	sbci	r24, 0xFF	; 255
    6c60:	9f 4f       	sbci	r25, 0xFF	; 255
    6c62:	08 95       	ret

00006c64 <__tablejump2__>:
    6c64:	ee 0f       	add	r30, r30
    6c66:	ff 1f       	adc	r31, r31
    6c68:	05 90       	lpm	r0, Z+
    6c6a:	f4 91       	lpm	r31, Z
    6c6c:	e0 2d       	mov	r30, r0
    6c6e:	09 94       	ijmp

00006c70 <__muluhisi3>:
    6c70:	0e 94 aa 36 	call	0x6d54	; 0x6d54 <__umulhisi3>
    6c74:	a5 9f       	mul	r26, r21
    6c76:	90 0d       	add	r25, r0
    6c78:	b4 9f       	mul	r27, r20
    6c7a:	90 0d       	add	r25, r0
    6c7c:	a4 9f       	mul	r26, r20
    6c7e:	80 0d       	add	r24, r0
    6c80:	91 1d       	adc	r25, r1
    6c82:	11 24       	eor	r1, r1
    6c84:	08 95       	ret

00006c86 <__prologue_saves__>:
    6c86:	2f 92       	push	r2
    6c88:	3f 92       	push	r3
    6c8a:	4f 92       	push	r4
    6c8c:	5f 92       	push	r5
    6c8e:	6f 92       	push	r6
    6c90:	7f 92       	push	r7
    6c92:	8f 92       	push	r8
    6c94:	9f 92       	push	r9
    6c96:	af 92       	push	r10
    6c98:	bf 92       	push	r11
    6c9a:	cf 92       	push	r12
    6c9c:	df 92       	push	r13
    6c9e:	ef 92       	push	r14
    6ca0:	ff 92       	push	r15
    6ca2:	0f 93       	push	r16
    6ca4:	1f 93       	push	r17
    6ca6:	cf 93       	push	r28
    6ca8:	df 93       	push	r29
    6caa:	cd b7       	in	r28, 0x3d	; 61
    6cac:	de b7       	in	r29, 0x3e	; 62
    6cae:	ca 1b       	sub	r28, r26
    6cb0:	db 0b       	sbc	r29, r27
    6cb2:	cd bf       	out	0x3d, r28	; 61
    6cb4:	de bf       	out	0x3e, r29	; 62
    6cb6:	09 94       	ijmp

00006cb8 <__epilogue_restores__>:
    6cb8:	2a 88       	ldd	r2, Y+18	; 0x12
    6cba:	39 88       	ldd	r3, Y+17	; 0x11
    6cbc:	48 88       	ldd	r4, Y+16	; 0x10
    6cbe:	5f 84       	ldd	r5, Y+15	; 0x0f
    6cc0:	6e 84       	ldd	r6, Y+14	; 0x0e
    6cc2:	7d 84       	ldd	r7, Y+13	; 0x0d
    6cc4:	8c 84       	ldd	r8, Y+12	; 0x0c
    6cc6:	9b 84       	ldd	r9, Y+11	; 0x0b
    6cc8:	aa 84       	ldd	r10, Y+10	; 0x0a
    6cca:	b9 84       	ldd	r11, Y+9	; 0x09
    6ccc:	c8 84       	ldd	r12, Y+8	; 0x08
    6cce:	df 80       	ldd	r13, Y+7	; 0x07
    6cd0:	ee 80       	ldd	r14, Y+6	; 0x06
    6cd2:	fd 80       	ldd	r15, Y+5	; 0x05
    6cd4:	0c 81       	ldd	r16, Y+4	; 0x04
    6cd6:	1b 81       	ldd	r17, Y+3	; 0x03
    6cd8:	aa 81       	ldd	r26, Y+2	; 0x02
    6cda:	b9 81       	ldd	r27, Y+1	; 0x01
    6cdc:	ce 0f       	add	r28, r30
    6cde:	d1 1d       	adc	r29, r1
    6ce0:	cd bf       	out	0x3d, r28	; 61
    6ce2:	de bf       	out	0x3e, r29	; 62
    6ce4:	ed 01       	movw	r28, r26
    6ce6:	08 95       	ret

00006ce8 <__udivmodhi4>:
    6ce8:	aa 1b       	sub	r26, r26
    6cea:	bb 1b       	sub	r27, r27
    6cec:	51 e1       	ldi	r21, 0x11	; 17
    6cee:	07 c0       	rjmp	.+14     	; 0x6cfe <__udivmodhi4_ep>

00006cf0 <__udivmodhi4_loop>:
    6cf0:	aa 1f       	adc	r26, r26
    6cf2:	bb 1f       	adc	r27, r27
    6cf4:	a6 17       	cp	r26, r22
    6cf6:	b7 07       	cpc	r27, r23
    6cf8:	10 f0       	brcs	.+4      	; 0x6cfe <__udivmodhi4_ep>
    6cfa:	a6 1b       	sub	r26, r22
    6cfc:	b7 0b       	sbc	r27, r23

00006cfe <__udivmodhi4_ep>:
    6cfe:	88 1f       	adc	r24, r24
    6d00:	99 1f       	adc	r25, r25
    6d02:	5a 95       	dec	r21
    6d04:	a9 f7       	brne	.-22     	; 0x6cf0 <__udivmodhi4_loop>
    6d06:	80 95       	com	r24
    6d08:	90 95       	com	r25
    6d0a:	bc 01       	movw	r22, r24
    6d0c:	cd 01       	movw	r24, r26
    6d0e:	08 95       	ret

00006d10 <__udivmodsi4>:
    6d10:	a1 e2       	ldi	r26, 0x21	; 33
    6d12:	1a 2e       	mov	r1, r26
    6d14:	aa 1b       	sub	r26, r26
    6d16:	bb 1b       	sub	r27, r27
    6d18:	fd 01       	movw	r30, r26
    6d1a:	0d c0       	rjmp	.+26     	; 0x6d36 <__udivmodsi4_ep>

00006d1c <__udivmodsi4_loop>:
    6d1c:	aa 1f       	adc	r26, r26
    6d1e:	bb 1f       	adc	r27, r27
    6d20:	ee 1f       	adc	r30, r30
    6d22:	ff 1f       	adc	r31, r31
    6d24:	a2 17       	cp	r26, r18
    6d26:	b3 07       	cpc	r27, r19
    6d28:	e4 07       	cpc	r30, r20
    6d2a:	f5 07       	cpc	r31, r21
    6d2c:	20 f0       	brcs	.+8      	; 0x6d36 <__udivmodsi4_ep>
    6d2e:	a2 1b       	sub	r26, r18
    6d30:	b3 0b       	sbc	r27, r19
    6d32:	e4 0b       	sbc	r30, r20
    6d34:	f5 0b       	sbc	r31, r21

00006d36 <__udivmodsi4_ep>:
    6d36:	66 1f       	adc	r22, r22
    6d38:	77 1f       	adc	r23, r23
    6d3a:	88 1f       	adc	r24, r24
    6d3c:	99 1f       	adc	r25, r25
    6d3e:	1a 94       	dec	r1
    6d40:	69 f7       	brne	.-38     	; 0x6d1c <__udivmodsi4_loop>
    6d42:	60 95       	com	r22
    6d44:	70 95       	com	r23
    6d46:	80 95       	com	r24
    6d48:	90 95       	com	r25
    6d4a:	9b 01       	movw	r18, r22
    6d4c:	ac 01       	movw	r20, r24
    6d4e:	bd 01       	movw	r22, r26
    6d50:	cf 01       	movw	r24, r30
    6d52:	08 95       	ret

00006d54 <__umulhisi3>:
    6d54:	a2 9f       	mul	r26, r18
    6d56:	b0 01       	movw	r22, r0
    6d58:	b3 9f       	mul	r27, r19
    6d5a:	c0 01       	movw	r24, r0
    6d5c:	a3 9f       	mul	r26, r19
    6d5e:	70 0d       	add	r23, r0
    6d60:	81 1d       	adc	r24, r1
    6d62:	11 24       	eor	r1, r1
    6d64:	91 1d       	adc	r25, r1
    6d66:	b2 9f       	mul	r27, r18
    6d68:	70 0d       	add	r23, r0
    6d6a:	81 1d       	adc	r24, r1
    6d6c:	11 24       	eor	r1, r1
    6d6e:	91 1d       	adc	r25, r1
    6d70:	08 95       	ret

00006d72 <atoi>:
    6d72:	fc 01       	movw	r30, r24
    6d74:	88 27       	eor	r24, r24
    6d76:	99 27       	eor	r25, r25
    6d78:	e8 94       	clt
    6d7a:	21 91       	ld	r18, Z+
    6d7c:	20 32       	cpi	r18, 0x20	; 32
    6d7e:	e9 f3       	breq	.-6      	; 0x6d7a <atoi+0x8>
    6d80:	29 30       	cpi	r18, 0x09	; 9
    6d82:	10 f0       	brcs	.+4      	; 0x6d88 <atoi+0x16>
    6d84:	2e 30       	cpi	r18, 0x0E	; 14
    6d86:	c8 f3       	brcs	.-14     	; 0x6d7a <atoi+0x8>
    6d88:	2b 32       	cpi	r18, 0x2B	; 43
    6d8a:	41 f0       	breq	.+16     	; 0x6d9c <atoi+0x2a>
    6d8c:	2d 32       	cpi	r18, 0x2D	; 45
    6d8e:	39 f4       	brne	.+14     	; 0x6d9e <atoi+0x2c>
    6d90:	68 94       	set
    6d92:	04 c0       	rjmp	.+8      	; 0x6d9c <atoi+0x2a>
    6d94:	0e 94 13 38 	call	0x7026	; 0x7026 <__mulhi_const_10>
    6d98:	82 0f       	add	r24, r18
    6d9a:	91 1d       	adc	r25, r1
    6d9c:	21 91       	ld	r18, Z+
    6d9e:	20 53       	subi	r18, 0x30	; 48
    6da0:	2a 30       	cpi	r18, 0x0A	; 10
    6da2:	c0 f3       	brcs	.-16     	; 0x6d94 <atoi+0x22>
    6da4:	1e f4       	brtc	.+6      	; 0x6dac <atoi+0x3a>
    6da6:	90 95       	com	r25
    6da8:	81 95       	neg	r24
    6daa:	9f 4f       	sbci	r25, 0xFF	; 255
    6dac:	08 95       	ret

00006dae <atol>:
    6dae:	1f 93       	push	r17
    6db0:	fc 01       	movw	r30, r24
    6db2:	99 27       	eor	r25, r25
    6db4:	88 27       	eor	r24, r24
    6db6:	bc 01       	movw	r22, r24
    6db8:	e8 94       	clt
    6dba:	11 91       	ld	r17, Z+
    6dbc:	10 32       	cpi	r17, 0x20	; 32
    6dbe:	e9 f3       	breq	.-6      	; 0x6dba <atol+0xc>
    6dc0:	19 30       	cpi	r17, 0x09	; 9
    6dc2:	10 f0       	brcs	.+4      	; 0x6dc8 <atol+0x1a>
    6dc4:	1e 30       	cpi	r17, 0x0E	; 14
    6dc6:	c8 f3       	brcs	.-14     	; 0x6dba <atol+0xc>
    6dc8:	1b 32       	cpi	r17, 0x2B	; 43
    6dca:	51 f0       	breq	.+20     	; 0x6de0 <atol+0x32>
    6dcc:	1d 32       	cpi	r17, 0x2D	; 45
    6dce:	49 f4       	brne	.+18     	; 0x6de2 <atol+0x34>
    6dd0:	68 94       	set
    6dd2:	06 c0       	rjmp	.+12     	; 0x6de0 <atol+0x32>
    6dd4:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <__mulsi_const_10>
    6dd8:	61 0f       	add	r22, r17
    6dda:	71 1d       	adc	r23, r1
    6ddc:	81 1d       	adc	r24, r1
    6dde:	91 1d       	adc	r25, r1
    6de0:	11 91       	ld	r17, Z+
    6de2:	10 53       	subi	r17, 0x30	; 48
    6de4:	1a 30       	cpi	r17, 0x0A	; 10
    6de6:	b0 f3       	brcs	.-20     	; 0x6dd4 <atol+0x26>
    6de8:	3e f4       	brtc	.+14     	; 0x6df8 <atol+0x4a>
    6dea:	90 95       	com	r25
    6dec:	80 95       	com	r24
    6dee:	70 95       	com	r23
    6df0:	61 95       	neg	r22
    6df2:	7f 4f       	sbci	r23, 0xFF	; 255
    6df4:	8f 4f       	sbci	r24, 0xFF	; 255
    6df6:	9f 4f       	sbci	r25, 0xFF	; 255
    6df8:	1f 91       	pop	r17
    6dfa:	08 95       	ret

00006dfc <__ftoa_engine>:
    6dfc:	28 30       	cpi	r18, 0x08	; 8
    6dfe:	08 f0       	brcs	.+2      	; 0x6e02 <__ftoa_engine+0x6>
    6e00:	27 e0       	ldi	r18, 0x07	; 7
    6e02:	33 27       	eor	r19, r19
    6e04:	da 01       	movw	r26, r20
    6e06:	99 0f       	add	r25, r25
    6e08:	31 1d       	adc	r19, r1
    6e0a:	87 fd       	sbrc	r24, 7
    6e0c:	91 60       	ori	r25, 0x01	; 1
    6e0e:	00 96       	adiw	r24, 0x00	; 0
    6e10:	61 05       	cpc	r22, r1
    6e12:	71 05       	cpc	r23, r1
    6e14:	39 f4       	brne	.+14     	; 0x6e24 <__ftoa_engine+0x28>
    6e16:	32 60       	ori	r19, 0x02	; 2
    6e18:	2e 5f       	subi	r18, 0xFE	; 254
    6e1a:	3d 93       	st	X+, r19
    6e1c:	30 e3       	ldi	r19, 0x30	; 48
    6e1e:	2a 95       	dec	r18
    6e20:	e1 f7       	brne	.-8      	; 0x6e1a <__ftoa_engine+0x1e>
    6e22:	08 95       	ret
    6e24:	9f 3f       	cpi	r25, 0xFF	; 255
    6e26:	30 f0       	brcs	.+12     	; 0x6e34 <__ftoa_engine+0x38>
    6e28:	80 38       	cpi	r24, 0x80	; 128
    6e2a:	71 05       	cpc	r23, r1
    6e2c:	61 05       	cpc	r22, r1
    6e2e:	09 f0       	breq	.+2      	; 0x6e32 <__ftoa_engine+0x36>
    6e30:	3c 5f       	subi	r19, 0xFC	; 252
    6e32:	3c 5f       	subi	r19, 0xFC	; 252
    6e34:	3d 93       	st	X+, r19
    6e36:	91 30       	cpi	r25, 0x01	; 1
    6e38:	08 f0       	brcs	.+2      	; 0x6e3c <__ftoa_engine+0x40>
    6e3a:	80 68       	ori	r24, 0x80	; 128
    6e3c:	91 1d       	adc	r25, r1
    6e3e:	df 93       	push	r29
    6e40:	cf 93       	push	r28
    6e42:	1f 93       	push	r17
    6e44:	0f 93       	push	r16
    6e46:	ff 92       	push	r15
    6e48:	ef 92       	push	r14
    6e4a:	19 2f       	mov	r17, r25
    6e4c:	98 7f       	andi	r25, 0xF8	; 248
    6e4e:	96 95       	lsr	r25
    6e50:	e9 2f       	mov	r30, r25
    6e52:	96 95       	lsr	r25
    6e54:	96 95       	lsr	r25
    6e56:	e9 0f       	add	r30, r25
    6e58:	ff 27       	eor	r31, r31
    6e5a:	e8 53       	subi	r30, 0x38	; 56
    6e5c:	fe 4f       	sbci	r31, 0xFE	; 254
    6e5e:	99 27       	eor	r25, r25
    6e60:	33 27       	eor	r19, r19
    6e62:	ee 24       	eor	r14, r14
    6e64:	ff 24       	eor	r15, r15
    6e66:	a7 01       	movw	r20, r14
    6e68:	e7 01       	movw	r28, r14
    6e6a:	05 90       	lpm	r0, Z+
    6e6c:	08 94       	sec
    6e6e:	07 94       	ror	r0
    6e70:	28 f4       	brcc	.+10     	; 0x6e7c <__ftoa_engine+0x80>
    6e72:	36 0f       	add	r19, r22
    6e74:	e7 1e       	adc	r14, r23
    6e76:	f8 1e       	adc	r15, r24
    6e78:	49 1f       	adc	r20, r25
    6e7a:	51 1d       	adc	r21, r1
    6e7c:	66 0f       	add	r22, r22
    6e7e:	77 1f       	adc	r23, r23
    6e80:	88 1f       	adc	r24, r24
    6e82:	99 1f       	adc	r25, r25
    6e84:	06 94       	lsr	r0
    6e86:	a1 f7       	brne	.-24     	; 0x6e70 <__ftoa_engine+0x74>
    6e88:	05 90       	lpm	r0, Z+
    6e8a:	07 94       	ror	r0
    6e8c:	28 f4       	brcc	.+10     	; 0x6e98 <__ftoa_engine+0x9c>
    6e8e:	e7 0e       	add	r14, r23
    6e90:	f8 1e       	adc	r15, r24
    6e92:	49 1f       	adc	r20, r25
    6e94:	56 1f       	adc	r21, r22
    6e96:	c1 1d       	adc	r28, r1
    6e98:	77 0f       	add	r23, r23
    6e9a:	88 1f       	adc	r24, r24
    6e9c:	99 1f       	adc	r25, r25
    6e9e:	66 1f       	adc	r22, r22
    6ea0:	06 94       	lsr	r0
    6ea2:	a1 f7       	brne	.-24     	; 0x6e8c <__ftoa_engine+0x90>
    6ea4:	05 90       	lpm	r0, Z+
    6ea6:	07 94       	ror	r0
    6ea8:	28 f4       	brcc	.+10     	; 0x6eb4 <__ftoa_engine+0xb8>
    6eaa:	f8 0e       	add	r15, r24
    6eac:	49 1f       	adc	r20, r25
    6eae:	56 1f       	adc	r21, r22
    6eb0:	c7 1f       	adc	r28, r23
    6eb2:	d1 1d       	adc	r29, r1
    6eb4:	88 0f       	add	r24, r24
    6eb6:	99 1f       	adc	r25, r25
    6eb8:	66 1f       	adc	r22, r22
    6eba:	77 1f       	adc	r23, r23
    6ebc:	06 94       	lsr	r0
    6ebe:	a1 f7       	brne	.-24     	; 0x6ea8 <__ftoa_engine+0xac>
    6ec0:	05 90       	lpm	r0, Z+
    6ec2:	07 94       	ror	r0
    6ec4:	20 f4       	brcc	.+8      	; 0x6ece <__ftoa_engine+0xd2>
    6ec6:	49 0f       	add	r20, r25
    6ec8:	56 1f       	adc	r21, r22
    6eca:	c7 1f       	adc	r28, r23
    6ecc:	d8 1f       	adc	r29, r24
    6ece:	99 0f       	add	r25, r25
    6ed0:	66 1f       	adc	r22, r22
    6ed2:	77 1f       	adc	r23, r23
    6ed4:	88 1f       	adc	r24, r24
    6ed6:	06 94       	lsr	r0
    6ed8:	a9 f7       	brne	.-22     	; 0x6ec4 <__ftoa_engine+0xc8>
    6eda:	84 91       	lpm	r24, Z
    6edc:	10 95       	com	r17
    6ede:	17 70       	andi	r17, 0x07	; 7
    6ee0:	41 f0       	breq	.+16     	; 0x6ef2 <__ftoa_engine+0xf6>
    6ee2:	d6 95       	lsr	r29
    6ee4:	c7 95       	ror	r28
    6ee6:	57 95       	ror	r21
    6ee8:	47 95       	ror	r20
    6eea:	f7 94       	ror	r15
    6eec:	e7 94       	ror	r14
    6eee:	1a 95       	dec	r17
    6ef0:	c1 f7       	brne	.-16     	; 0x6ee2 <__ftoa_engine+0xe6>
    6ef2:	ee e6       	ldi	r30, 0x6E	; 110
    6ef4:	f1 e0       	ldi	r31, 0x01	; 1
    6ef6:	68 94       	set
    6ef8:	15 90       	lpm	r1, Z+
    6efa:	15 91       	lpm	r17, Z+
    6efc:	35 91       	lpm	r19, Z+
    6efe:	65 91       	lpm	r22, Z+
    6f00:	95 91       	lpm	r25, Z+
    6f02:	05 90       	lpm	r0, Z+
    6f04:	7f e2       	ldi	r23, 0x2F	; 47
    6f06:	73 95       	inc	r23
    6f08:	e1 18       	sub	r14, r1
    6f0a:	f1 0a       	sbc	r15, r17
    6f0c:	43 0b       	sbc	r20, r19
    6f0e:	56 0b       	sbc	r21, r22
    6f10:	c9 0b       	sbc	r28, r25
    6f12:	d0 09       	sbc	r29, r0
    6f14:	c0 f7       	brcc	.-16     	; 0x6f06 <__ftoa_engine+0x10a>
    6f16:	e1 0c       	add	r14, r1
    6f18:	f1 1e       	adc	r15, r17
    6f1a:	43 1f       	adc	r20, r19
    6f1c:	56 1f       	adc	r21, r22
    6f1e:	c9 1f       	adc	r28, r25
    6f20:	d0 1d       	adc	r29, r0
    6f22:	7e f4       	brtc	.+30     	; 0x6f42 <__ftoa_engine+0x146>
    6f24:	70 33       	cpi	r23, 0x30	; 48
    6f26:	11 f4       	brne	.+4      	; 0x6f2c <__ftoa_engine+0x130>
    6f28:	8a 95       	dec	r24
    6f2a:	e6 cf       	rjmp	.-52     	; 0x6ef8 <__ftoa_engine+0xfc>
    6f2c:	e8 94       	clt
    6f2e:	01 50       	subi	r16, 0x01	; 1
    6f30:	30 f0       	brcs	.+12     	; 0x6f3e <__ftoa_engine+0x142>
    6f32:	08 0f       	add	r16, r24
    6f34:	0a f4       	brpl	.+2      	; 0x6f38 <__ftoa_engine+0x13c>
    6f36:	00 27       	eor	r16, r16
    6f38:	02 17       	cp	r16, r18
    6f3a:	08 f4       	brcc	.+2      	; 0x6f3e <__ftoa_engine+0x142>
    6f3c:	20 2f       	mov	r18, r16
    6f3e:	23 95       	inc	r18
    6f40:	02 2f       	mov	r16, r18
    6f42:	7a 33       	cpi	r23, 0x3A	; 58
    6f44:	28 f0       	brcs	.+10     	; 0x6f50 <__ftoa_engine+0x154>
    6f46:	79 e3       	ldi	r23, 0x39	; 57
    6f48:	7d 93       	st	X+, r23
    6f4a:	2a 95       	dec	r18
    6f4c:	e9 f7       	brne	.-6      	; 0x6f48 <__ftoa_engine+0x14c>
    6f4e:	10 c0       	rjmp	.+32     	; 0x6f70 <__ftoa_engine+0x174>
    6f50:	7d 93       	st	X+, r23
    6f52:	2a 95       	dec	r18
    6f54:	89 f6       	brne	.-94     	; 0x6ef8 <__ftoa_engine+0xfc>
    6f56:	06 94       	lsr	r0
    6f58:	97 95       	ror	r25
    6f5a:	67 95       	ror	r22
    6f5c:	37 95       	ror	r19
    6f5e:	17 95       	ror	r17
    6f60:	17 94       	ror	r1
    6f62:	e1 18       	sub	r14, r1
    6f64:	f1 0a       	sbc	r15, r17
    6f66:	43 0b       	sbc	r20, r19
    6f68:	56 0b       	sbc	r21, r22
    6f6a:	c9 0b       	sbc	r28, r25
    6f6c:	d0 09       	sbc	r29, r0
    6f6e:	98 f0       	brcs	.+38     	; 0x6f96 <__ftoa_engine+0x19a>
    6f70:	23 95       	inc	r18
    6f72:	7e 91       	ld	r23, -X
    6f74:	73 95       	inc	r23
    6f76:	7a 33       	cpi	r23, 0x3A	; 58
    6f78:	08 f0       	brcs	.+2      	; 0x6f7c <__ftoa_engine+0x180>
    6f7a:	70 e3       	ldi	r23, 0x30	; 48
    6f7c:	7c 93       	st	X, r23
    6f7e:	20 13       	cpse	r18, r16
    6f80:	b8 f7       	brcc	.-18     	; 0x6f70 <__ftoa_engine+0x174>
    6f82:	7e 91       	ld	r23, -X
    6f84:	70 61       	ori	r23, 0x10	; 16
    6f86:	7d 93       	st	X+, r23
    6f88:	30 f0       	brcs	.+12     	; 0x6f96 <__ftoa_engine+0x19a>
    6f8a:	83 95       	inc	r24
    6f8c:	71 e3       	ldi	r23, 0x31	; 49
    6f8e:	7d 93       	st	X+, r23
    6f90:	70 e3       	ldi	r23, 0x30	; 48
    6f92:	2a 95       	dec	r18
    6f94:	e1 f7       	brne	.-8      	; 0x6f8e <__ftoa_engine+0x192>
    6f96:	11 24       	eor	r1, r1
    6f98:	ef 90       	pop	r14
    6f9a:	ff 90       	pop	r15
    6f9c:	0f 91       	pop	r16
    6f9e:	1f 91       	pop	r17
    6fa0:	cf 91       	pop	r28
    6fa2:	df 91       	pop	r29
    6fa4:	99 27       	eor	r25, r25
    6fa6:	87 fd       	sbrc	r24, 7
    6fa8:	90 95       	com	r25
    6faa:	08 95       	ret

00006fac <strnlen_P>:
    6fac:	fc 01       	movw	r30, r24
    6fae:	05 90       	lpm	r0, Z+
    6fb0:	61 50       	subi	r22, 0x01	; 1
    6fb2:	70 40       	sbci	r23, 0x00	; 0
    6fb4:	01 10       	cpse	r0, r1
    6fb6:	d8 f7       	brcc	.-10     	; 0x6fae <strnlen_P+0x2>
    6fb8:	80 95       	com	r24
    6fba:	90 95       	com	r25
    6fbc:	8e 0f       	add	r24, r30
    6fbe:	9f 1f       	adc	r25, r31
    6fc0:	08 95       	ret

00006fc2 <strcat>:
    6fc2:	fb 01       	movw	r30, r22
    6fc4:	dc 01       	movw	r26, r24
    6fc6:	0d 90       	ld	r0, X+
    6fc8:	00 20       	and	r0, r0
    6fca:	e9 f7       	brne	.-6      	; 0x6fc6 <strcat+0x4>
    6fcc:	11 97       	sbiw	r26, 0x01	; 1
    6fce:	01 90       	ld	r0, Z+
    6fd0:	0d 92       	st	X+, r0
    6fd2:	00 20       	and	r0, r0
    6fd4:	e1 f7       	brne	.-8      	; 0x6fce <strcat+0xc>
    6fd6:	08 95       	ret

00006fd8 <strcpy>:
    6fd8:	fb 01       	movw	r30, r22
    6fda:	dc 01       	movw	r26, r24
    6fdc:	01 90       	ld	r0, Z+
    6fde:	0d 92       	st	X+, r0
    6fe0:	00 20       	and	r0, r0
    6fe2:	e1 f7       	brne	.-8      	; 0x6fdc <strcpy+0x4>
    6fe4:	08 95       	ret

00006fe6 <strnlen>:
    6fe6:	fc 01       	movw	r30, r24
    6fe8:	61 50       	subi	r22, 0x01	; 1
    6fea:	70 40       	sbci	r23, 0x00	; 0
    6fec:	01 90       	ld	r0, Z+
    6fee:	01 10       	cpse	r0, r1
    6ff0:	d8 f7       	brcc	.-10     	; 0x6fe8 <strnlen+0x2>
    6ff2:	80 95       	com	r24
    6ff4:	90 95       	com	r25
    6ff6:	8e 0f       	add	r24, r30
    6ff8:	9f 1f       	adc	r25, r31
    6ffa:	08 95       	ret

00006ffc <__mulsi_const_10>:
    6ffc:	59 2f       	mov	r21, r25
    6ffe:	48 2f       	mov	r20, r24
    7000:	37 2f       	mov	r19, r23
    7002:	26 2f       	mov	r18, r22
    7004:	66 0f       	add	r22, r22
    7006:	77 1f       	adc	r23, r23
    7008:	88 1f       	adc	r24, r24
    700a:	99 1f       	adc	r25, r25
    700c:	66 0f       	add	r22, r22
    700e:	77 1f       	adc	r23, r23
    7010:	88 1f       	adc	r24, r24
    7012:	99 1f       	adc	r25, r25
    7014:	62 0f       	add	r22, r18
    7016:	73 1f       	adc	r23, r19
    7018:	84 1f       	adc	r24, r20
    701a:	95 1f       	adc	r25, r21
    701c:	66 0f       	add	r22, r22
    701e:	77 1f       	adc	r23, r23
    7020:	88 1f       	adc	r24, r24
    7022:	99 1f       	adc	r25, r25
    7024:	08 95       	ret

00007026 <__mulhi_const_10>:
    7026:	7a e0       	ldi	r23, 0x0A	; 10
    7028:	97 9f       	mul	r25, r23
    702a:	90 2d       	mov	r25, r0
    702c:	87 9f       	mul	r24, r23
    702e:	80 2d       	mov	r24, r0
    7030:	91 0d       	add	r25, r1
    7032:	11 24       	eor	r1, r1
    7034:	08 95       	ret

00007036 <fputc>:
    7036:	0f 93       	push	r16
    7038:	1f 93       	push	r17
    703a:	cf 93       	push	r28
    703c:	df 93       	push	r29
    703e:	fb 01       	movw	r30, r22
    7040:	23 81       	ldd	r18, Z+3	; 0x03
    7042:	21 fd       	sbrc	r18, 1
    7044:	03 c0       	rjmp	.+6      	; 0x704c <fputc+0x16>
    7046:	8f ef       	ldi	r24, 0xFF	; 255
    7048:	9f ef       	ldi	r25, 0xFF	; 255
    704a:	2c c0       	rjmp	.+88     	; 0x70a4 <fputc+0x6e>
    704c:	22 ff       	sbrs	r18, 2
    704e:	16 c0       	rjmp	.+44     	; 0x707c <fputc+0x46>
    7050:	46 81       	ldd	r20, Z+6	; 0x06
    7052:	57 81       	ldd	r21, Z+7	; 0x07
    7054:	24 81       	ldd	r18, Z+4	; 0x04
    7056:	35 81       	ldd	r19, Z+5	; 0x05
    7058:	42 17       	cp	r20, r18
    705a:	53 07       	cpc	r21, r19
    705c:	44 f4       	brge	.+16     	; 0x706e <fputc+0x38>
    705e:	a0 81       	ld	r26, Z
    7060:	b1 81       	ldd	r27, Z+1	; 0x01
    7062:	9d 01       	movw	r18, r26
    7064:	2f 5f       	subi	r18, 0xFF	; 255
    7066:	3f 4f       	sbci	r19, 0xFF	; 255
    7068:	20 83       	st	Z, r18
    706a:	31 83       	std	Z+1, r19	; 0x01
    706c:	8c 93       	st	X, r24
    706e:	26 81       	ldd	r18, Z+6	; 0x06
    7070:	37 81       	ldd	r19, Z+7	; 0x07
    7072:	2f 5f       	subi	r18, 0xFF	; 255
    7074:	3f 4f       	sbci	r19, 0xFF	; 255
    7076:	26 83       	std	Z+6, r18	; 0x06
    7078:	37 83       	std	Z+7, r19	; 0x07
    707a:	14 c0       	rjmp	.+40     	; 0x70a4 <fputc+0x6e>
    707c:	8b 01       	movw	r16, r22
    707e:	ec 01       	movw	r28, r24
    7080:	fb 01       	movw	r30, r22
    7082:	00 84       	ldd	r0, Z+8	; 0x08
    7084:	f1 85       	ldd	r31, Z+9	; 0x09
    7086:	e0 2d       	mov	r30, r0
    7088:	09 95       	icall
    708a:	89 2b       	or	r24, r25
    708c:	e1 f6       	brne	.-72     	; 0x7046 <fputc+0x10>
    708e:	d8 01       	movw	r26, r16
    7090:	16 96       	adiw	r26, 0x06	; 6
    7092:	8d 91       	ld	r24, X+
    7094:	9c 91       	ld	r25, X
    7096:	17 97       	sbiw	r26, 0x07	; 7
    7098:	01 96       	adiw	r24, 0x01	; 1
    709a:	16 96       	adiw	r26, 0x06	; 6
    709c:	8d 93       	st	X+, r24
    709e:	9c 93       	st	X, r25
    70a0:	17 97       	sbiw	r26, 0x07	; 7
    70a2:	ce 01       	movw	r24, r28
    70a4:	df 91       	pop	r29
    70a6:	cf 91       	pop	r28
    70a8:	1f 91       	pop	r17
    70aa:	0f 91       	pop	r16
    70ac:	08 95       	ret

000070ae <sprintf>:
    70ae:	ae e0       	ldi	r26, 0x0E	; 14
    70b0:	b0 e0       	ldi	r27, 0x00	; 0
    70b2:	ed e5       	ldi	r30, 0x5D	; 93
    70b4:	f8 e3       	ldi	r31, 0x38	; 56
    70b6:	0c 94 51 36 	jmp	0x6ca2	; 0x6ca2 <__prologue_saves__+0x1c>
    70ba:	0d 89       	ldd	r16, Y+21	; 0x15
    70bc:	1e 89       	ldd	r17, Y+22	; 0x16
    70be:	86 e0       	ldi	r24, 0x06	; 6
    70c0:	8c 83       	std	Y+4, r24	; 0x04
    70c2:	09 83       	std	Y+1, r16	; 0x01
    70c4:	1a 83       	std	Y+2, r17	; 0x02
    70c6:	8f ef       	ldi	r24, 0xFF	; 255
    70c8:	9f e7       	ldi	r25, 0x7F	; 127
    70ca:	8d 83       	std	Y+5, r24	; 0x05
    70cc:	9e 83       	std	Y+6, r25	; 0x06
    70ce:	ae 01       	movw	r20, r28
    70d0:	47 5e       	subi	r20, 0xE7	; 231
    70d2:	5f 4f       	sbci	r21, 0xFF	; 255
    70d4:	6f 89       	ldd	r22, Y+23	; 0x17
    70d6:	78 8d       	ldd	r23, Y+24	; 0x18
    70d8:	ce 01       	movw	r24, r28
    70da:	01 96       	adiw	r24, 0x01	; 1
    70dc:	0e 94 82 32 	call	0x6504	; 0x6504 <vfprintf>
    70e0:	ef 81       	ldd	r30, Y+7	; 0x07
    70e2:	f8 85       	ldd	r31, Y+8	; 0x08
    70e4:	e0 0f       	add	r30, r16
    70e6:	f1 1f       	adc	r31, r17
    70e8:	10 82       	st	Z, r1
    70ea:	2e 96       	adiw	r28, 0x0e	; 14
    70ec:	e4 e0       	ldi	r30, 0x04	; 4
    70ee:	0c 94 6a 36 	jmp	0x6cd4	; 0x6cd4 <__epilogue_restores__+0x1c>

000070f2 <__ultoa_invert>:
    70f2:	fa 01       	movw	r30, r20
    70f4:	aa 27       	eor	r26, r26
    70f6:	28 30       	cpi	r18, 0x08	; 8
    70f8:	51 f1       	breq	.+84     	; 0x714e <__ultoa_invert+0x5c>
    70fa:	20 31       	cpi	r18, 0x10	; 16
    70fc:	81 f1       	breq	.+96     	; 0x715e <__ultoa_invert+0x6c>
    70fe:	e8 94       	clt
    7100:	6f 93       	push	r22
    7102:	6e 7f       	andi	r22, 0xFE	; 254
    7104:	6e 5f       	subi	r22, 0xFE	; 254
    7106:	7f 4f       	sbci	r23, 0xFF	; 255
    7108:	8f 4f       	sbci	r24, 0xFF	; 255
    710a:	9f 4f       	sbci	r25, 0xFF	; 255
    710c:	af 4f       	sbci	r26, 0xFF	; 255
    710e:	b1 e0       	ldi	r27, 0x01	; 1
    7110:	3e d0       	rcall	.+124    	; 0x718e <__ultoa_invert+0x9c>
    7112:	b4 e0       	ldi	r27, 0x04	; 4
    7114:	3c d0       	rcall	.+120    	; 0x718e <__ultoa_invert+0x9c>
    7116:	67 0f       	add	r22, r23
    7118:	78 1f       	adc	r23, r24
    711a:	89 1f       	adc	r24, r25
    711c:	9a 1f       	adc	r25, r26
    711e:	a1 1d       	adc	r26, r1
    7120:	68 0f       	add	r22, r24
    7122:	79 1f       	adc	r23, r25
    7124:	8a 1f       	adc	r24, r26
    7126:	91 1d       	adc	r25, r1
    7128:	a1 1d       	adc	r26, r1
    712a:	6a 0f       	add	r22, r26
    712c:	71 1d       	adc	r23, r1
    712e:	81 1d       	adc	r24, r1
    7130:	91 1d       	adc	r25, r1
    7132:	a1 1d       	adc	r26, r1
    7134:	20 d0       	rcall	.+64     	; 0x7176 <__ultoa_invert+0x84>
    7136:	09 f4       	brne	.+2      	; 0x713a <__ultoa_invert+0x48>
    7138:	68 94       	set
    713a:	3f 91       	pop	r19
    713c:	2a e0       	ldi	r18, 0x0A	; 10
    713e:	26 9f       	mul	r18, r22
    7140:	11 24       	eor	r1, r1
    7142:	30 19       	sub	r19, r0
    7144:	30 5d       	subi	r19, 0xD0	; 208
    7146:	31 93       	st	Z+, r19
    7148:	de f6       	brtc	.-74     	; 0x7100 <__ultoa_invert+0xe>
    714a:	cf 01       	movw	r24, r30
    714c:	08 95       	ret
    714e:	46 2f       	mov	r20, r22
    7150:	47 70       	andi	r20, 0x07	; 7
    7152:	40 5d       	subi	r20, 0xD0	; 208
    7154:	41 93       	st	Z+, r20
    7156:	b3 e0       	ldi	r27, 0x03	; 3
    7158:	0f d0       	rcall	.+30     	; 0x7178 <__ultoa_invert+0x86>
    715a:	c9 f7       	brne	.-14     	; 0x714e <__ultoa_invert+0x5c>
    715c:	f6 cf       	rjmp	.-20     	; 0x714a <__ultoa_invert+0x58>
    715e:	46 2f       	mov	r20, r22
    7160:	4f 70       	andi	r20, 0x0F	; 15
    7162:	40 5d       	subi	r20, 0xD0	; 208
    7164:	4a 33       	cpi	r20, 0x3A	; 58
    7166:	18 f0       	brcs	.+6      	; 0x716e <__ultoa_invert+0x7c>
    7168:	49 5d       	subi	r20, 0xD9	; 217
    716a:	31 fd       	sbrc	r19, 1
    716c:	40 52       	subi	r20, 0x20	; 32
    716e:	41 93       	st	Z+, r20
    7170:	02 d0       	rcall	.+4      	; 0x7176 <__ultoa_invert+0x84>
    7172:	a9 f7       	brne	.-22     	; 0x715e <__ultoa_invert+0x6c>
    7174:	ea cf       	rjmp	.-44     	; 0x714a <__ultoa_invert+0x58>
    7176:	b4 e0       	ldi	r27, 0x04	; 4
    7178:	a6 95       	lsr	r26
    717a:	97 95       	ror	r25
    717c:	87 95       	ror	r24
    717e:	77 95       	ror	r23
    7180:	67 95       	ror	r22
    7182:	ba 95       	dec	r27
    7184:	c9 f7       	brne	.-14     	; 0x7178 <__ultoa_invert+0x86>
    7186:	00 97       	sbiw	r24, 0x00	; 0
    7188:	61 05       	cpc	r22, r1
    718a:	71 05       	cpc	r23, r1
    718c:	08 95       	ret
    718e:	9b 01       	movw	r18, r22
    7190:	ac 01       	movw	r20, r24
    7192:	0a 2e       	mov	r0, r26
    7194:	06 94       	lsr	r0
    7196:	57 95       	ror	r21
    7198:	47 95       	ror	r20
    719a:	37 95       	ror	r19
    719c:	27 95       	ror	r18
    719e:	ba 95       	dec	r27
    71a0:	c9 f7       	brne	.-14     	; 0x7194 <__ultoa_invert+0xa2>
    71a2:	62 0f       	add	r22, r18
    71a4:	73 1f       	adc	r23, r19
    71a6:	84 1f       	adc	r24, r20
    71a8:	95 1f       	adc	r25, r21
    71aa:	a0 1d       	adc	r26, r0
    71ac:	08 95       	ret

000071ae <eeprom_read_block>:
    71ae:	60 50       	subi	r22, 0x00	; 0
    71b0:	7c 4e       	sbci	r23, 0xEC	; 236
    71b2:	0c 94 12 39 	jmp	0x7224	; 0x7224 <memcpy>

000071b6 <eeprom_update_block>:
    71b6:	dc 01       	movw	r26, r24
    71b8:	a4 0f       	add	r26, r20
    71ba:	b5 1f       	adc	r27, r21
    71bc:	41 50       	subi	r20, 0x01	; 1
    71be:	50 40       	sbci	r21, 0x00	; 0
    71c0:	48 f0       	brcs	.+18     	; 0x71d4 <eeprom_update_block+0x1e>
    71c2:	cb 01       	movw	r24, r22
    71c4:	84 0f       	add	r24, r20
    71c6:	95 1f       	adc	r25, r21
    71c8:	2e 91       	ld	r18, -X
    71ca:	0e 94 ec 38 	call	0x71d8	; 0x71d8 <eeprom_update_r18>
    71ce:	41 50       	subi	r20, 0x01	; 1
    71d0:	50 40       	sbci	r21, 0x00	; 0
    71d2:	d0 f7       	brcc	.-12     	; 0x71c8 <eeprom_update_block+0x12>
    71d4:	08 95       	ret

000071d6 <eeprom_update_byte>:
    71d6:	26 2f       	mov	r18, r22

000071d8 <eeprom_update_r18>:
    71d8:	0e 94 0e 39 	call	0x721c	; 0x721c <eeprom_mapen>
    71dc:	00 80       	ld	r0, Z
    71de:	02 16       	cp	r0, r18
    71e0:	19 f0       	breq	.+6      	; 0x71e8 <eeprom_update_r18+0x10>
    71e2:	0e 94 f7 38 	call	0x71ee	; 0x71ee <eeprom_write_r18>
    71e6:	01 97       	sbiw	r24, 0x01	; 1
    71e8:	01 97       	sbiw	r24, 0x01	; 1
    71ea:	08 95       	ret

000071ec <eeprom_write_byte>:
    71ec:	26 2f       	mov	r18, r22

000071ee <eeprom_write_r18>:
    71ee:	af 93       	push	r26
    71f0:	bf 93       	push	r27
    71f2:	e0 e0       	ldi	r30, 0x00	; 0
    71f4:	f0 e1       	ldi	r31, 0x10	; 16
    71f6:	32 81       	ldd	r19, Z+2	; 0x02
    71f8:	31 fd       	sbrc	r19, 1
    71fa:	fd cf       	rjmp	.-6      	; 0x71f6 <eeprom_write_r18+0x8>
    71fc:	dc 01       	movw	r26, r24
    71fe:	a0 50       	subi	r26, 0x00	; 0
    7200:	bc 4e       	sbci	r27, 0xEC	; 236
    7202:	2c 93       	st	X, r18
    7204:	2d e9       	ldi	r18, 0x9D	; 157
    7206:	24 bf       	out	0x34, r18	; 52
    7208:	23 e0       	ldi	r18, 0x03	; 3
    720a:	20 83       	st	Z, r18
    720c:	01 96       	adiw	r24, 0x01	; 1
    720e:	bf 91       	pop	r27
    7210:	af 91       	pop	r26
    7212:	08 95       	ret

00007214 <eeprom_read_byte>:
    7214:	03 d0       	rcall	.+6      	; 0x721c <eeprom_mapen>
    7216:	80 81       	ld	r24, Z
    7218:	99 27       	eor	r25, r25
    721a:	08 95       	ret

0000721c <eeprom_mapen>:
    721c:	fc 01       	movw	r30, r24
    721e:	e0 50       	subi	r30, 0x00	; 0
    7220:	fc 4e       	sbci	r31, 0xEC	; 236
    7222:	08 95       	ret

00007224 <memcpy>:
    7224:	fb 01       	movw	r30, r22
    7226:	dc 01       	movw	r26, r24
    7228:	02 c0       	rjmp	.+4      	; 0x722e <memcpy+0xa>
    722a:	01 90       	ld	r0, Z+
    722c:	0d 92       	st	X+, r0
    722e:	41 50       	subi	r20, 0x01	; 1
    7230:	50 40       	sbci	r21, 0x00	; 0
    7232:	d8 f7       	brcc	.-10     	; 0x722a <memcpy+0x6>
    7234:	08 95       	ret

00007236 <_exit>:
    7236:	f8 94       	cli

00007238 <__stop_program>:
    7238:	ff cf       	rjmp	.-2      	; 0x7238 <__stop_program>
