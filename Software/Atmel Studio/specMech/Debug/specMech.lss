
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00802800  00004cbd  00004d71  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000048be  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ff  000088be  000048be  00004972  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000830  00802804  00802804  00004d75  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00004d75  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004dd4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000668  00000000  00000000  00004e18  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a8f9  00000000  00000000  00005480  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000049e2  00000000  00000000  0000fd79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000047e3  00000000  00000000  0001475b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f9c  00000000  00000000  00018f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000022d6  00000000  00000000  00019edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003ff0  00000000  00000000  0001c1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b8  00000000  00000000  000201a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 01 	jmp	0x254	; 0x254 <__ctors_end>
       4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       c:	0c 94 f1 17 	jmp	0x2fe2	; 0x2fe2 <__vector_3>
      10:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      14:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      18:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      1c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      20:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      24:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      28:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      2c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      30:	0c 94 ef 18 	jmp	0x31de	; 0x31de <__vector_12>
      34:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      38:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      3c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      40:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      44:	0c 94 8d 1a 	jmp	0x351a	; 0x351a <__vector_17>
      48:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <__vector_18>
      4c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      50:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <__vector_20>
      54:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      58:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      5c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      60:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      64:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      68:	0c 94 07 1b 	jmp	0x360e	; 0x360e <__vector_26>
      6c:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <__vector_27>
      70:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      74:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__vector_29>
      78:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      7c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      80:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      84:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      88:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      8c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      90:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      94:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <__vector_37>
      98:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__vector_38>
      9c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      a0:	e7 04       	cpc	r14, r7
      a2:	f5 04       	cpc	r15, r5
      a4:	f5 04       	cpc	r15, r5
      a6:	f5 04       	cpc	r15, r5
      a8:	f5 04       	cpc	r15, r5
      aa:	f5 04       	cpc	r15, r5
      ac:	f5 04       	cpc	r15, r5
      ae:	f5 04       	cpc	r15, r5
      b0:	f5 04       	cpc	r15, r5
      b2:	f5 04       	cpc	r15, r5
      b4:	f5 04       	cpc	r15, r5
      b6:	f5 04       	cpc	r15, r5
      b8:	f5 04       	cpc	r15, r5
      ba:	f5 04       	cpc	r15, r5
      bc:	f5 04       	cpc	r15, r5
      be:	f5 04       	cpc	r15, r5
      c0:	f5 04       	cpc	r15, r5
      c2:	cf 04       	cpc	r12, r15
      c4:	f5 04       	cpc	r15, r5
      c6:	f5 04       	cpc	r15, r5
      c8:	f5 04       	cpc	r15, r5
      ca:	f5 04       	cpc	r15, r5
      cc:	f5 04       	cpc	r15, r5
      ce:	f5 04       	cpc	r15, r5
      d0:	f5 04       	cpc	r15, r5
      d2:	f5 04       	cpc	r15, r5
      d4:	f5 04       	cpc	r15, r5
      d6:	d7 04       	cpc	r13, r7
      d8:	f5 04       	cpc	r15, r5
      da:	d3 04       	cpc	r13, r3
      dc:	f5 04       	cpc	r15, r5
      de:	f5 04       	cpc	r15, r5
      e0:	db 04       	cpc	r13, r11
      e2:	df 04       	cpc	r13, r15
      e4:	e3 04       	cpc	r14, r3
      e6:	4d 0f       	add	r20, r29
      e8:	4d 0f       	add	r20, r29
      ea:	4d 0f       	add	r20, r29
      ec:	6a 14       	cp	r6, r10
      ee:	6a 14       	cp	r6, r10
      f0:	6a 14       	cp	r6, r10
      f2:	6a 14       	cp	r6, r10
      f4:	6a 14       	cp	r6, r10
      f6:	6a 14       	cp	r6, r10
      f8:	6a 14       	cp	r6, r10
      fa:	6a 14       	cp	r6, r10
      fc:	6a 14       	cp	r6, r10
      fe:	6a 14       	cp	r6, r10
     100:	6a 14       	cp	r6, r10
     102:	6a 14       	cp	r6, r10
     104:	6a 14       	cp	r6, r10
     106:	6a 14       	cp	r6, r10
     108:	6a 14       	cp	r6, r10
     10a:	6a 14       	cp	r6, r10
     10c:	6a 14       	cp	r6, r10
     10e:	6a 14       	cp	r6, r10
     110:	18 14       	cp	r1, r8
     112:	6a 14       	cp	r6, r10
     114:	6a 14       	cp	r6, r10
     116:	6a 14       	cp	r6, r10
     118:	6a 14       	cp	r6, r10
     11a:	6a 14       	cp	r6, r10
     11c:	6a 14       	cp	r6, r10
     11e:	6a 14       	cp	r6, r10
     120:	6a 14       	cp	r6, r10
     122:	6a 14       	cp	r6, r10
     124:	6a 14       	cp	r6, r10
     126:	dc 0f       	add	r29, r28
     128:	dc 0f       	add	r29, r28
     12a:	dc 0f       	add	r29, r28
     12c:	6a 14       	cp	r6, r10
     12e:	99 10       	cpse	r9, r9
     130:	6a 14       	cp	r6, r10
     132:	6a 14       	cp	r6, r10
     134:	6a 14       	cp	r6, r10
     136:	6a 14       	cp	r6, r10
     138:	6a 14       	cp	r6, r10
     13a:	6a 14       	cp	r6, r10
     13c:	6a 14       	cp	r6, r10
     13e:	6a 14       	cp	r6, r10
     140:	6a 14       	cp	r6, r10
     142:	d5 11       	cpse	r29, r5
     144:	c3 12       	cpse	r12, r19
     146:	6a 14       	cp	r6, r10
     148:	6a 14       	cp	r6, r10
     14a:	6a 14       	cp	r6, r10
     14c:	4b 13       	cpse	r20, r27
     14e:	6a 14       	cp	r6, r10
     150:	aa 13       	cpse	r26, r26

00000152 <__trampolines_end>:
     152:	6e 61       	ori	r22, 0x1E	; 30
     154:	6e 00       	.word	0x006e	; ????

00000156 <__c.2332>:
     156:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     166:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     176:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     186:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     196:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1a6:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1b6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1c6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1d6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1e6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1f6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     206:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     216:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     226:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     236:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     246:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000254 <__ctors_end>:
     254:	11 24       	eor	r1, r1
     256:	1f be       	out	0x3f, r1	; 63
     258:	cf ef       	ldi	r28, 0xFF	; 255
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	df e3       	ldi	r29, 0x3F	; 63
     25e:	de bf       	out	0x3e, r29	; 62

00000260 <__do_copy_data>:
     260:	18 e2       	ldi	r17, 0x28	; 40
     262:	a0 e0       	ldi	r26, 0x00	; 0
     264:	b8 e2       	ldi	r27, 0x28	; 40
     266:	ed eb       	ldi	r30, 0xBD	; 189
     268:	fc e4       	ldi	r31, 0x4C	; 76
     26a:	02 c0       	rjmp	.+4      	; 0x270 <__do_copy_data+0x10>
     26c:	05 90       	lpm	r0, Z+
     26e:	0d 92       	st	X+, r0
     270:	a4 30       	cpi	r26, 0x04	; 4
     272:	b1 07       	cpc	r27, r17
     274:	d9 f7       	brne	.-10     	; 0x26c <__do_copy_data+0xc>

00000276 <__do_clear_bss>:
     276:	20 e3       	ldi	r18, 0x30	; 48
     278:	a4 e0       	ldi	r26, 0x04	; 4
     27a:	b8 e2       	ldi	r27, 0x28	; 40
     27c:	01 c0       	rjmp	.+2      	; 0x280 <.do_clear_bss_start>

0000027e <.do_clear_bss_loop>:
     27e:	1d 92       	st	X+, r1

00000280 <.do_clear_bss_start>:
     280:	a4 33       	cpi	r26, 0x34	; 52
     282:	b2 07       	cpc	r27, r18
     284:	e1 f7       	brne	.-8      	; 0x27e <.do_clear_bss_loop>
     286:	0e 94 a6 08 	call	0x114c	; 0x114c <main>
     28a:	0c 94 5d 24 	jmp	0x48ba	; 0x48ba <_exit>

0000028e <__bad_interrupt>:
     28e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000292 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
uint8_t read_AD590(uint8_t sensor, float *temperature)
{
     292:	8f 92       	push	r8
     294:	9f 92       	push	r9
     296:	af 92       	push	r10
     298:	bf 92       	push	r11
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <read_AD590+0x16>
     2a8:	00 d0       	rcall	.+0      	; 0x2aa <read_AD590+0x18>
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	7b 01       	movw	r14, r22

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     2b0:	81 30       	cpi	r24, 0x01	; 1
     2b2:	c9 f0       	breq	.+50     	; 0x2e6 <read_AD590+0x54>
     2b4:	18 f0       	brcs	.+6      	; 0x2bc <read_AD590+0x2a>
     2b6:	82 30       	cpi	r24, 0x02	; 2
     2b8:	61 f0       	breq	.+24     	; 0x2d2 <read_AD590+0x40>
     2ba:	10 c0       	rjmp	.+32     	; 0x2dc <read_AD590+0x4a>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     2bc:	0f 2e       	mov	r0, r31
     2be:	f3 e3       	ldi	r31, 0x33	; 51
     2c0:	8f 2e       	mov	r8, r31
     2c2:	98 2c       	mov	r9, r8
     2c4:	f3 ef       	ldi	r31, 0xF3	; 243
     2c6:	af 2e       	mov	r10, r31
     2c8:	f0 e4       	ldi	r31, 0x40	; 64
     2ca:	bf 2e       	mov	r11, r31
     2cc:	f0 2d       	mov	r31, r0
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     2ce:	11 e0       	ldi	r17, 0x01	; 1
     2d0:	0e c0       	rjmp	.+28     	; 0x2ee <read_AD590+0x5c>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     2d2:	81 2c       	mov	r8, r1
     2d4:	91 2c       	mov	r9, r1
     2d6:	54 01       	movw	r10, r8
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     2d8:	10 e1       	ldi	r17, 0x10	; 16
			offset = 0.0;
			break;
     2da:	09 c0       	rjmp	.+18     	; 0x2ee <read_AD590+0x5c>
{

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
     2dc:	81 2c       	mov	r8, r1
     2de:	91 2c       	mov	r9, r1
     2e0:	54 01       	movw	r10, r8
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2e2:	10 e0       	ldi	r17, 0x00	; 0
			break;
     2e4:	04 c0       	rjmp	.+8      	; 0x2ee <read_AD590+0x5c>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2e6:	81 2c       	mov	r8, r1
     2e8:	91 2c       	mov	r9, r1
     2ea:	54 01       	movw	r10, r8
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2ec:	14 e0       	ldi	r17, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     2ee:	40 e0       	ldi	r20, 0x00	; 0
     2f0:	66 e0       	ldi	r22, 0x06	; 6
     2f2:	87 e2       	ldi	r24, 0x27	; 39
     2f4:	0e 94 d7 08 	call	0x11ae	; 0x11ae <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2f8:	41 2f       	mov	r20, r17
     2fa:	40 95       	com	r20
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	87 e2       	ldi	r24, 0x27	; 39
     300:	0e 94 d7 08 	call	0x11ae	; 0x11ae <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     304:	41 2f       	mov	r20, r17
     306:	6a e0       	ldi	r22, 0x0A	; 10
     308:	87 e2       	ldi	r24, 0x27	; 39
     30a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30e:	86 e1       	ldi	r24, 0x16	; 22
     310:	8a 95       	dec	r24
     312:	f1 f7       	brne	.-4      	; 0x310 <read_AD590+0x7e>
     314:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	if (read_ADS1115(ADC_TE, PGA0512, AIN3, DR128, &voltage) == ERROR) {
     316:	8e 01       	movw	r16, r28
     318:	0f 5f       	subi	r16, 0xFF	; 255
     31a:	1f 4f       	sbci	r17, 0xFF	; 255
     31c:	20 e8       	ldi	r18, 0x80	; 128
     31e:	40 e7       	ldi	r20, 0x70	; 112
     320:	68 e0       	ldi	r22, 0x08	; 8
     322:	88 e4       	ldi	r24, 0x48	; 72
     324:	0e 94 ca 01 	call	0x394	; 0x394 <read_ADS1115>
     328:	83 36       	cpi	r24, 0x63	; 99
     32a:	51 f4       	brne	.+20     	; 0x340 <read_AD590+0xae>
		*temperature = BADFLOAT;
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	50 e8       	ldi	r21, 0x80	; 128
     330:	66 e2       	ldi	r22, 0x26	; 38
     332:	74 ec       	ldi	r23, 0xC4	; 196
     334:	f7 01       	movw	r30, r14
     336:	40 83       	st	Z, r20
     338:	51 83       	std	Z+1, r21	; 0x01
     33a:	62 83       	std	Z+2, r22	; 0x02
     33c:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
     33e:	1c c0       	rjmp	.+56     	; 0x378 <read_AD590+0xe6>
	}
	*temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	4a e7       	ldi	r20, 0x7A	; 122
     346:	54 e4       	ldi	r21, 0x44	; 68
     348:	69 81       	ldd	r22, Y+1	; 0x01
     34a:	7a 81       	ldd	r23, Y+2	; 0x02
     34c:	8b 81       	ldd	r24, Y+3	; 0x03
     34e:	9c 81       	ldd	r25, Y+4	; 0x04
     350:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__mulsf3>
     354:	23 e3       	ldi	r18, 0x33	; 51
     356:	33 e9       	ldi	r19, 0x93	; 147
     358:	48 e8       	ldi	r20, 0x88	; 136
     35a:	53 e4       	ldi	r21, 0x43	; 67
     35c:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <__subsf3>
     360:	9b 01       	movw	r18, r22
     362:	ac 01       	movw	r20, r24
     364:	c5 01       	movw	r24, r10
     366:	b4 01       	movw	r22, r8
     368:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__addsf3>
     36c:	f7 01       	movw	r30, r14
     36e:	60 83       	st	Z, r22
     370:	71 83       	std	Z+1, r23	; 0x01
     372:	82 83       	std	Z+2, r24	; 0x02
     374:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     376:	80 e0       	ldi	r24, 0x00	; 0

}
     378:	24 96       	adiw	r28, 0x04	; 4
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	ff 90       	pop	r15
     388:	ef 90       	pop	r14
     38a:	bf 90       	pop	r11
     38c:	af 90       	pop	r10
     38e:	9f 90       	pop	r9
     390:	8f 90       	pop	r8
     392:	08 95       	ret

00000394 <read_ADS1115>:
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
uint8_t read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins,
	uint8_t datarate, float *voltage)
{
     394:	8f 92       	push	r8
     396:	9f 92       	push	r9
     398:	af 92       	push	r10
     39a:	bf 92       	push	r11
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	f8 2e       	mov	r15, r24
     3ae:	e6 2e       	mov	r14, r22
     3b0:	68 01       	movw	r12, r16
	float scale;
	uint8_t confighi, configlo, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     3b2:	46 2b       	or	r20, r22
     3b4:	c4 2f       	mov	r28, r20
     3b6:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     3b8:	d2 2f       	mov	r29, r18
     3ba:	d3 60       	ori	r29, 0x03	; 3

	*voltage = BADFLOAT;
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e8       	ldi	r25, 0x80	; 128
     3c0:	a6 e2       	ldi	r26, 0x26	; 38
     3c2:	b4 ec       	ldi	r27, 0xC4	; 196
     3c4:	f8 01       	movw	r30, r16
     3c6:	80 83       	st	Z, r24
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	a2 83       	std	Z+2, r26	; 0x02
     3cc:	b3 83       	std	Z+3, r27	; 0x03
	if (start_TWI(addr, TWIWRITE == ERROR)) {		// TWI start condition
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	8f 2d       	mov	r24, r15
     3d2:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
     3d6:	08 2f       	mov	r16, r24
     3d8:	88 23       	and	r24, r24
     3da:	21 f0       	breq	.+8      	; 0x3e4 <read_ADS1115+0x50>
		stop_TWI();
     3dc:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
		return(ERROR);
     3e0:	13 e6       	ldi	r17, 0x63	; 99
     3e2:	b4 c0       	rjmp	.+360    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	if ((write_TWI(ADS1115CONFIG) == ERROR)) {		// Write the CONFIG register
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
     3ea:	18 2f       	mov	r17, r24
     3ec:	83 36       	cpi	r24, 0x63	; 99
     3ee:	19 f4       	brne	.+6      	; 0x3f6 <read_ADS1115+0x62>
		stop_TWI();
     3f0:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
		return(ERROR);
     3f4:	ab c0       	rjmp	.+342    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	if ((write_TWI(confighi) == ERROR)) {			// Write high byte
     3f6:	8c 2f       	mov	r24, r28
     3f8:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
     3fc:	18 2f       	mov	r17, r24
     3fe:	83 36       	cpi	r24, 0x63	; 99
     400:	19 f4       	brne	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		stop_TWI();
     402:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
		return(ERROR);
     406:	a2 c0       	rjmp	.+324    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	if ((write_TWI(configlo) == ERROR)) {			// Write low byte
     408:	8d 2f       	mov	r24, r29
     40a:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
     40e:	18 2f       	mov	r17, r24
     410:	83 36       	cpi	r24, 0x63	; 99
     412:	19 f4       	brne	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		stop_TWI();
     414:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
		return(ERROR);
     418:	99 c0       	rjmp	.+306    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	}
	stop_TWI();
     41a:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
     41e:	fc e1       	ldi	r31, 0x1C	; 28
     420:	fa 95       	dec	r31
     422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>

	_delay_us(25);									// Power-up time

	converting = YES;
     424:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     426:	09 c0       	rjmp	.+18     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		start_TWI(addr, TWIREAD);
     428:	61 e0       	ldi	r22, 0x01	; 1
     42a:	8f 2d       	mov	r24, r15
     42c:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
		flag = readlast_TWI();
     430:	0e 94 24 19 	call	0x3248	; 0x3248 <readlast_TWI>
		if (flag & 0b10000000) {
     434:	88 23       	and	r24, r24
     436:	0c f4       	brge	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			converting = NO;
     438:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     43a:	c1 11       	cpse	r28, r1
     43c:	f5 cf       	rjmp	.-22     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		flag = readlast_TWI();
		if (flag & 0b10000000) {
			converting = NO;
		}
	}
	stop_TWI();
     43e:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>

	start_TWI(addr, TWIWRITE);
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	8f 2d       	mov	r24, r15
     446:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	8f 2d       	mov	r24, r15
     454:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
	highbyte = read_TWI();
     458:	0e 94 14 19 	call	0x3228	; 0x3228 <read_TWI>
     45c:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     45e:	0e 94 24 19 	call	0x3248	; 0x3248 <readlast_TWI>
     462:	d8 2f       	mov	r29, r24
	stop_TWI();
     464:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>

	value = highbyte;
     468:	6c 2f       	mov	r22, r28
     46a:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     46c:	76 2f       	mov	r23, r22
     46e:	66 27       	eor	r22, r22
	value |= lowbyte;
     470:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	e8 16       	cp	r14, r24
     476:	49 f1       	breq	.+82     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     478:	8e 15       	cp	r24, r14
     47a:	30 f0       	brcs	.+12     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     47c:	ee 20       	and	r14, r14
     47e:	d9 f1       	breq	.+118    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     480:	e2 e0       	ldi	r30, 0x02	; 2
     482:	ee 16       	cp	r14, r30
     484:	69 f1       	breq	.+90     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     486:	42 c0       	rjmp	.+132    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     488:	f8 e0       	ldi	r31, 0x08	; 8
     48a:	ef 16       	cp	r14, r31
     48c:	09 f4       	brne	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48e:	42 c0       	rjmp	.+132    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     490:	8a e0       	ldi	r24, 0x0A	; 10
     492:	e8 16       	cp	r14, r24
     494:	21 f0       	breq	.+8      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     496:	e6 e0       	ldi	r30, 0x06	; 6
     498:	ee 12       	cpse	r14, r30
     49a:	38 c0       	rjmp	.+112    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		case PGA0256:
			scale = SCA0256;
     49e:	0f 2e       	mov	r0, r31
     4a0:	f4 e7       	ldi	r31, 0x74	; 116
     4a2:	8f 2e       	mov	r8, r31
     4a4:	f3 e1       	ldi	r31, 0x13	; 19
     4a6:	9f 2e       	mov	r9, r31
     4a8:	f3 e0       	ldi	r31, 0x03	; 3
     4aa:	af 2e       	mov	r10, r31
     4ac:	f7 e3       	ldi	r31, 0x37	; 55
     4ae:	bf 2e       	mov	r11, r31
     4b0:	f0 2d       	mov	r31, r0
     4b2:	3a c0       	rjmp	.+116    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     4b4:	0f 2e       	mov	r0, r31
     4b6:	f4 e7       	ldi	r31, 0x74	; 116
     4b8:	8f 2e       	mov	r8, r31
     4ba:	f3 e1       	ldi	r31, 0x13	; 19
     4bc:	9f 2e       	mov	r9, r31
     4be:	f3 e0       	ldi	r31, 0x03	; 3
     4c0:	af 2e       	mov	r10, r31
     4c2:	f8 e3       	ldi	r31, 0x38	; 56
     4c4:	bf 2e       	mov	r11, r31
     4c6:	f0 2d       	mov	r31, r0
			break;
     4c8:	2f c0       	rjmp	.+94     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		case PGA2048:
			scale = SCA2048;
     4ca:	0f 2e       	mov	r0, r31
     4cc:	f2 e1       	ldi	r31, 0x12	; 18
     4ce:	8f 2e       	mov	r8, r31
     4d0:	f3 e1       	ldi	r31, 0x13	; 19
     4d2:	9f 2e       	mov	r9, r31
     4d4:	f3 e8       	ldi	r31, 0x83	; 131
     4d6:	af 2e       	mov	r10, r31
     4d8:	f8 e3       	ldi	r31, 0x38	; 56
     4da:	bf 2e       	mov	r11, r31
     4dc:	f0 2d       	mov	r31, r0
			break;
     4de:	24 c0       	rjmp	.+72     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		case PGA4096:
			scale = SCA4096;
     4e0:	0f 2e       	mov	r0, r31
     4e2:	f4 e7       	ldi	r31, 0x74	; 116
     4e4:	8f 2e       	mov	r8, r31
     4e6:	f3 e1       	ldi	r31, 0x13	; 19
     4e8:	9f 2e       	mov	r9, r31
     4ea:	f3 e0       	ldi	r31, 0x03	; 3
     4ec:	af 2e       	mov	r10, r31
     4ee:	f9 e3       	ldi	r31, 0x39	; 57
     4f0:	bf 2e       	mov	r11, r31
     4f2:	f0 2d       	mov	r31, r0
			break;
     4f4:	19 c0       	rjmp	.+50     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		case PGA6144:
			scale = SCA6144;
     4f6:	0f 2e       	mov	r0, r31
     4f8:	fe e2       	ldi	r31, 0x2E	; 46
     4fa:	8f 2e       	mov	r8, r31
     4fc:	fd e9       	ldi	r31, 0x9D	; 157
     4fe:	9f 2e       	mov	r9, r31
     500:	f4 e4       	ldi	r31, 0x44	; 68
     502:	af 2e       	mov	r10, r31
     504:	f9 e3       	ldi	r31, 0x39	; 57
     506:	bf 2e       	mov	r11, r31
     508:	f0 2d       	mov	r31, r0
			break;
     50a:	0e c0       	rjmp	.+28     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
		default:
			scale = 0.0;
     50c:	81 2c       	mov	r8, r1
     50e:	91 2c       	mov	r9, r1
     510:	54 01       	movw	r10, r8
			break;
     512:	0a c0       	rjmp	.+20     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     514:	0f 2e       	mov	r0, r31
     516:	f1 e7       	ldi	r31, 0x71	; 113
     518:	8f 2e       	mov	r8, r31
     51a:	f3 e1       	ldi	r31, 0x13	; 19
     51c:	9f 2e       	mov	r9, r31
     51e:	f3 e8       	ldi	r31, 0x83	; 131
     520:	af 2e       	mov	r10, r31
     522:	f7 e3       	ldi	r31, 0x37	; 55
     524:	bf 2e       	mov	r11, r31
     526:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	*voltage = scale * (float) value;
     528:	07 2e       	mov	r0, r23
     52a:	00 0c       	add	r0, r0
     52c:	88 0b       	sbc	r24, r24
     52e:	99 0b       	sbc	r25, r25
     530:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__floatsisf>
     534:	9b 01       	movw	r18, r22
     536:	ac 01       	movw	r20, r24
     538:	c5 01       	movw	r24, r10
     53a:	b4 01       	movw	r22, r8
     53c:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__mulsf3>
     540:	f6 01       	movw	r30, r12
     542:	60 83       	st	Z, r22
     544:	71 83       	std	Z+1, r23	; 0x01
     546:	82 83       	std	Z+2, r24	; 0x02
     548:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     54a:	10 2f       	mov	r17, r16

}
     54c:	81 2f       	mov	r24, r17
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	df 90       	pop	r13
     55c:	cf 90       	pop	r12
     55e:	bf 90       	pop	r11
     560:	af 90       	pop	r10
     562:	9f 90       	pop	r9
     564:	8f 90       	pop	r8
     566:	08 95       	ret

00000568 <init_BEEPER>:
#include "beeper.h"

void init_BEEPER(void)
{

	PORTB.OUTSET = PIN2_bm;
     568:	e0 e2       	ldi	r30, 0x20	; 32
     56a:	f4 e0       	ldi	r31, 0x04	; 4
     56c:	84 e0       	ldi	r24, 0x04	; 4
     56e:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     570:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = PIN2_bm;
     572:	86 83       	std	Z+6, r24	; 0x06
     574:	08 95       	ret

00000576 <get_cmdline>:
{
	if ((d >= '0') && (d <= '9')) {
		return(1);
	}
	return(0);
}
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	9c 01       	movw	r18, r24
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	1c c0       	rjmp	.+56     	; 0x5b8 <get_cmdline+0x42>
     580:	cb e1       	ldi	r28, 0x1B	; 27
     582:	dc e2       	ldi	r29, 0x2C	; 44
     584:	e8 81       	ld	r30, Y
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	e5 5e       	subi	r30, 0xE5	; 229
     58a:	f4 4d       	sbci	r31, 0xD4	; 212
     58c:	80 81       	ld	r24, Z
     58e:	f9 01       	movw	r30, r18
     590:	e4 0f       	add	r30, r20
     592:	f1 1d       	adc	r31, r1
     594:	80 83       	st	Z, r24
     596:	ad e1       	ldi	r26, 0x1D	; 29
     598:	bc e2       	ldi	r27, 0x2C	; 44
     59a:	8c 91       	ld	r24, X
     59c:	81 50       	subi	r24, 0x01	; 1
     59e:	8c 93       	st	X, r24
     5a0:	88 81       	ld	r24, Y
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	01 96       	adiw	r24, 0x01	; 1
     5a6:	6f ef       	ldi	r22, 0xFF	; 255
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	0e 94 67 21 	call	0x42ce	; 0x42ce <__divmodhi4>
     5ae:	88 83       	st	Y, r24
     5b0:	80 81       	ld	r24, Z
     5b2:	88 23       	and	r24, r24
     5b4:	29 f0       	breq	.+10     	; 0x5c0 <get_cmdline+0x4a>
     5b6:	4f 5f       	subi	r20, 0xFF	; 255
     5b8:	80 91 1d 2c 	lds	r24, 0x2C1D	; 0x802c1d <recv0_buf+0x102>
     5bc:	81 11       	cpse	r24, r1
     5be:	e0 cf       	rjmp	.-64     	; 0x580 <get_cmdline+0xa>
     5c0:	f9 01       	movw	r30, r18
     5c2:	e4 0f       	add	r30, r20
     5c4:	f1 1d       	adc	r31, r1
     5c6:	10 82       	st	Z, r1
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     5ce:	9f e9       	ldi	r25, 0x9F	; 159
     5d0:	98 0f       	add	r25, r24
     5d2:	9a 31       	cpi	r25, 0x1A	; 26
     5d4:	28 f0       	brcs	.+10     	; 0x5e0 <isaletter+0x12>
     5d6:	81 54       	subi	r24, 0x41	; 65
     5d8:	8a 31       	cpi	r24, 0x1A	; 26
     5da:	20 f4       	brcc	.+8      	; 0x5e4 <isaletter+0x16>
		return(1);
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	08 95       	ret
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	08 95       	ret
	}
	return(0);
     5e4:	80 e0       	ldi	r24, 0x00	; 0

}
     5e6:	08 95       	ret

000005e8 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     5f4:	e6 2e       	mov	r14, r22
     5f6:	f1 2c       	mov	r15, r1
     5f8:	84 e3       	ldi	r24, 0x34	; 52
     5fa:	8e 9d       	mul	r24, r14
     5fc:	f0 01       	movw	r30, r0
     5fe:	8f 9d       	mul	r24, r15
     600:	f0 0d       	add	r31, r0
     602:	11 24       	eor	r1, r1
     604:	e9 5f       	subi	r30, 0xF9	; 249
     606:	f7 4d       	sbci	r31, 0xD7	; 215
     608:	8f e3       	ldi	r24, 0x3F	; 63
     60a:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     60c:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     60e:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     610:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {
     612:	04 c0       	rjmp	.+8      	; 0x61c <parse_cmd+0x34>
		if (*ptr == '\0') {
     614:	11 23       	and	r17, r17
     616:	09 f4       	brne	.+2      	; 0x61a <parse_cmd+0x32>
     618:	75 c0       	rjmp	.+234    	; 0x704 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     61a:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {
     61c:	18 81       	ld	r17, Y
     61e:	81 2f       	mov	r24, r17
     620:	0e 94 e7 02 	call	0x5ce	; 0x5ce <isaletter>
     624:	88 23       	and	r24, r24
     626:	b1 f3       	breq	.-20     	; 0x614 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     628:	21 96       	adiw	r28, 0x01	; 1
     62a:	84 e3       	ldi	r24, 0x34	; 52
     62c:	8e 9d       	mul	r24, r14
     62e:	f0 01       	movw	r30, r0
     630:	8f 9d       	mul	r24, r15
     632:	f0 0d       	add	r31, r0
     634:	11 24       	eor	r1, r1
     636:	e9 5f       	subi	r30, 0xF9	; 249
     638:	f7 4d       	sbci	r31, 0xD7	; 215
     63a:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {
     63c:	04 c0       	rjmp	.+8      	; 0x646 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     63e:	11 23       	and	r17, r17
     640:	09 f4       	brne	.+2      	; 0x644 <parse_cmd+0x5c>
     642:	60 c0       	rjmp	.+192    	; 0x704 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     644:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {
     646:	18 81       	ld	r17, Y
     648:	81 2f       	mov	r24, r17
     64a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <isaletter>
     64e:	88 23       	and	r24, r24
     650:	b1 f3       	breq	.-20     	; 0x63e <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     652:	21 96       	adiw	r28, 0x01	; 1
     654:	84 e3       	ldi	r24, 0x34	; 52
     656:	8e 9d       	mul	r24, r14
     658:	f0 01       	movw	r30, r0
     65a:	8f 9d       	mul	r24, r15
     65c:	f0 0d       	add	r31, r0
     65e:	11 24       	eor	r1, r1
     660:	e9 5f       	subi	r30, 0xF9	; 249
     662:	f7 4d       	sbci	r31, 0xD7	; 215
     664:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	2a c0       	rjmp	.+84     	; 0x6be <parse_cmd+0xd6>
		if (*ptr == '\0') {
     66a:	98 81       	ld	r25, Y
     66c:	91 11       	cpse	r25, r1
     66e:	0c c0       	rjmp	.+24     	; 0x688 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     670:	94 e3       	ldi	r25, 0x34	; 52
     672:	9e 9d       	mul	r25, r14
     674:	f0 01       	movw	r30, r0
     676:	9f 9d       	mul	r25, r15
     678:	f0 0d       	add	r31, r0
     67a:	11 24       	eor	r1, r1
     67c:	e9 5f       	subi	r30, 0xF9	; 249
     67e:	f7 4d       	sbci	r31, 0xD7	; 215
     680:	e8 0f       	add	r30, r24
     682:	f1 1d       	adc	r31, r1
     684:	12 82       	std	Z+2, r1	; 0x02
			return;
     686:	3e c0       	rjmp	.+124    	; 0x704 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {
     688:	9b 33       	cpi	r25, 0x3B	; 59
     68a:	61 f4       	brne	.+24     	; 0x6a4 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     68c:	94 e3       	ldi	r25, 0x34	; 52
     68e:	9e 9d       	mul	r25, r14
     690:	f0 01       	movw	r30, r0
     692:	9f 9d       	mul	r25, r15
     694:	f0 0d       	add	r31, r0
     696:	11 24       	eor	r1, r1
     698:	e9 5f       	subi	r30, 0xF9	; 249
     69a:	f7 4d       	sbci	r31, 0xD7	; 215
     69c:	e8 0f       	add	r30, r24
     69e:	f1 1d       	adc	r31, r1
     6a0:	12 82       	std	Z+2, r1	; 0x02
			break;
     6a2:	0f c0       	rjmp	.+30     	; 0x6c2 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     6a4:	21 96       	adiw	r28, 0x01	; 1
     6a6:	24 e3       	ldi	r18, 0x34	; 52
     6a8:	2e 9d       	mul	r18, r14
     6aa:	f0 01       	movw	r30, r0
     6ac:	2f 9d       	mul	r18, r15
     6ae:	f0 0d       	add	r31, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	e9 5f       	subi	r30, 0xF9	; 249
     6b4:	f7 4d       	sbci	r31, 0xD7	; 215
     6b6:	e8 0f       	add	r30, r24
     6b8:	f1 1d       	adc	r31, r1
     6ba:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	89 32       	cpi	r24, 0x29	; 41
     6c0:	a0 f2       	brcs	.-88     	; 0x66a <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
     6c2:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	1c c0       	rjmp	.+56     	; 0x700 <parse_cmd+0x118>
		if (*ptr == '\0') {
     6c8:	98 81       	ld	r25, Y
     6ca:	91 11       	cpse	r25, r1
     6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     6ce:	94 e3       	ldi	r25, 0x34	; 52
     6d0:	9e 9d       	mul	r25, r14
     6d2:	f0 01       	movw	r30, r0
     6d4:	9f 9d       	mul	r25, r15
     6d6:	f0 0d       	add	r31, r0
     6d8:	11 24       	eor	r1, r1
     6da:	e9 5f       	subi	r30, 0xF9	; 249
     6dc:	f7 4d       	sbci	r31, 0xD7	; 215
     6de:	e8 0f       	add	r30, r24
     6e0:	f1 1d       	adc	r31, r1
     6e2:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     6e4:	0f c0       	rjmp	.+30     	; 0x704 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     6e6:	21 96       	adiw	r28, 0x01	; 1
     6e8:	24 e3       	ldi	r18, 0x34	; 52
     6ea:	2e 9d       	mul	r18, r14
     6ec:	f0 01       	movw	r30, r0
     6ee:	2f 9d       	mul	r18, r15
     6f0:	f0 0d       	add	r31, r0
     6f2:	11 24       	eor	r1, r1
     6f4:	e9 5f       	subi	r30, 0xF9	; 249
     6f6:	f7 4d       	sbci	r31, 0xD7	; 215
     6f8:	e8 0f       	add	r30, r24
     6fa:	f1 1d       	adc	r31, r1
     6fc:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     6fe:	8f 5f       	subi	r24, 0xFF	; 255
     700:	89 30       	cpi	r24, 0x09	; 9
     702:	10 f3       	brcs	.-60     	; 0x6c8 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
     70e:	08 95       	ret

00000710 <send_prompt>:

	If specMech is rebooted, it will only prompt with a single exclamation
	point (!) until it receives an acknowledgment in the form of a single !.
------------------------------------------------------------------------------*/
void send_prompt(uint8_t prompt_flag)
{
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	6d 97       	sbiw	r28, 0x1d	; 29
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	de bf       	out	0x3e, r29	; 62

	const char str0[] = ">";
     722:	2e e3       	ldi	r18, 0x3E	; 62
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	29 83       	std	Y+1, r18	; 0x01
     728:	3a 83       	std	Y+2, r19	; 0x02
	const char str1[] = "!";
     72a:	21 e2       	ldi	r18, 0x21	; 33
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	2b 83       	std	Y+3, r18	; 0x03
     730:	3c 83       	std	Y+4, r19	; 0x04

	char prompt_str[25];

	switch (prompt_flag) {
     732:	88 23       	and	r24, r24
     734:	19 f0       	breq	.+6      	; 0x73c <send_prompt+0x2c>
     736:	81 30       	cpi	r24, 0x01	; 1
     738:	b9 f0       	breq	.+46     	; 0x768 <send_prompt+0x58>
     73a:	2c c0       	rjmp	.+88     	; 0x794 <send_prompt+0x84>
		case GREATERPROMPT:
			strcpy(prompt_str, str0);
     73c:	8e 01       	movw	r16, r28
     73e:	0b 5f       	subi	r16, 0xFB	; 251
     740:	1f 4f       	sbci	r17, 0xFF	; 255
     742:	be 01       	movw	r22, r28
     744:	6f 5f       	subi	r22, 0xFF	; 255
     746:	7f 4f       	sbci	r23, 0xFF	; 255
     748:	c8 01       	movw	r24, r16
     74a:	0e 94 36 23 	call	0x466c	; 0x466c <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     74e:	f8 01       	movw	r30, r16
     750:	01 90       	ld	r0, Z+
     752:	00 20       	and	r0, r0
     754:	e9 f7       	brne	.-6      	; 0x750 <send_prompt+0x40>
     756:	31 97       	sbiw	r30, 0x01	; 1
     758:	af 01       	movw	r20, r30
     75a:	40 1b       	sub	r20, r16
     75c:	51 0b       	sbc	r21, r17
     75e:	b8 01       	movw	r22, r16
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	0e 94 07 1a 	call	0x340e	; 0x340e <send_USART>
			break;
     766:	2b c0       	rjmp	.+86     	; 0x7be <send_prompt+0xae>
			strcpy(prompt_str, str0);
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
			break;
*/
		case EXCLAIMPROMPT:
			strcpy(prompt_str, str1);
     768:	8e 01       	movw	r16, r28
     76a:	0b 5f       	subi	r16, 0xFB	; 251
     76c:	1f 4f       	sbci	r17, 0xFF	; 255
     76e:	be 01       	movw	r22, r28
     770:	6d 5f       	subi	r22, 0xFD	; 253
     772:	7f 4f       	sbci	r23, 0xFF	; 255
     774:	c8 01       	movw	r24, r16
     776:	0e 94 36 23 	call	0x466c	; 0x466c <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     77a:	f8 01       	movw	r30, r16
     77c:	01 90       	ld	r0, Z+
     77e:	00 20       	and	r0, r0
     780:	e9 f7       	brne	.-6      	; 0x77c <send_prompt+0x6c>
     782:	31 97       	sbiw	r30, 0x01	; 1
     784:	af 01       	movw	r20, r30
     786:	40 1b       	sub	r20, r16
     788:	51 0b       	sbc	r21, r17
     78a:	b8 01       	movw	r22, r16
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	0e 94 07 1a 	call	0x340e	; 0x340e <send_USART>
			break;
     792:	15 c0       	rjmp	.+42     	; 0x7be <send_prompt+0xae>

		default:
			strcpy(prompt_str, str1);
     794:	8e 01       	movw	r16, r28
     796:	0b 5f       	subi	r16, 0xFB	; 251
     798:	1f 4f       	sbci	r17, 0xFF	; 255
     79a:	be 01       	movw	r22, r28
     79c:	6d 5f       	subi	r22, 0xFD	; 253
     79e:	7f 4f       	sbci	r23, 0xFF	; 255
     7a0:	c8 01       	movw	r24, r16
     7a2:	0e 94 36 23 	call	0x466c	; 0x466c <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     7a6:	f8 01       	movw	r30, r16
     7a8:	01 90       	ld	r0, Z+
     7aa:	00 20       	and	r0, r0
     7ac:	e9 f7       	brne	.-6      	; 0x7a8 <send_prompt+0x98>
     7ae:	31 97       	sbiw	r30, 0x01	; 1
     7b0:	af 01       	movw	r20, r30
     7b2:	40 1b       	sub	r20, r16
     7b4:	51 0b       	sbc	r21, r17
     7b6:	b8 01       	movw	r22, r16
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	0e 94 07 1a 	call	0x340e	; 0x340e <send_USART>
			break;

	}

}
     7be:	6d 96       	adiw	r28, 0x1d	; 29
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	08 95       	ret

000007ce <rebootACKd>:
	Returns:
		YES if the reboot acknowledge string was received
		NO if it wasn't
------------------------------------------------------------------------------*/
uint8_t rebootACKd(char *cmdline)
{
     7ce:	cf 93       	push	r28


	if (!rebootackd) {
     7d0:	c0 91 06 28 	lds	r28, 0x2806	; 0x802806 <rebootackd>
     7d4:	c1 11       	cpse	r28, r1
     7d6:	22 c0       	rjmp	.+68     	; 0x81c <rebootACKd+0x4e>
     7d8:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     7da:	80 81       	ld	r24, Z
     7dc:	81 32       	cpi	r24, 0x21	; 33
     7de:	91 f4       	brne	.+36     	; 0x804 <rebootACKd+0x36>
     7e0:	91 81       	ldd	r25, Z+1	; 0x01
     7e2:	91 11       	cpse	r25, r1
     7e4:	0f c0       	rjmp	.+30     	; 0x804 <rebootACKd+0x36>
			init_RTC(511);		// 1-sec RTC clock ticks
     7e6:	8f ef       	ldi	r24, 0xFF	; 255
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     7ee:	85 e0       	ldi	r24, 0x05	; 5
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	80 93 11 2a 	sts	0x2A11, r24	; 0x802a11 <timeoutOLED>
     7f6:	90 93 12 2a 	sts	0x2A12, r25	; 0x802a12 <timeoutOLED+0x1>
			rebootackd = YES;
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <rebootackd>
			return(YES);
     800:	c1 e0       	ldi	r28, 0x01	; 1
     802:	0d c0       	rjmp	.+26     	; 0x81e <rebootACKd+0x50>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     804:	81 32       	cpi	r24, 0x21	; 33
     806:	31 f4       	brne	.+12     	; 0x814 <rebootACKd+0x46>
     808:	81 81       	ldd	r24, Z+1	; 0x01
     80a:	88 23       	and	r24, r24
     80c:	19 f0       	breq	.+6      	; 0x814 <rebootACKd+0x46>
			reboot();
     80e:	0e 94 cc 1b 	call	0x3798	; 0x3798 <reboot>
			return(NO);
     812:	05 c0       	rjmp	.+10     	; 0x81e <rebootACKd+0x50>
		} else {
			send_prompt(EXCLAIMPROMPT);
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	0e 94 88 03 	call	0x710	; 0x710 <send_prompt>
			return(NO);
     81a:	01 c0       	rjmp	.+2      	; 0x81e <rebootACKd+0x50>
		}
	}

	return(YES);
     81c:	c1 e0       	ldi	r28, 0x01	; 1

}
     81e:	8c 2f       	mov	r24, r28
     820:	cf 91       	pop	r28
     822:	08 95       	ret

00000824 <printLine>:

}


void printLine(char *str)
{
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	c5 50       	subi	r28, 0x05	; 5
     832:	d1 40       	sbci	r29, 0x01	; 1
     834:	cd bf       	out	0x3d, r28	; 61
     836:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE], prFormat[] = "$%d%s";
     838:	26 e0       	ldi	r18, 0x06	; 6
     83a:	ee eb       	ldi	r30, 0xBE	; 190
     83c:	f8 e8       	ldi	r31, 0x88	; 136
     83e:	de 01       	movw	r26, r28
     840:	b3 95       	inc	r27
     842:	01 90       	ld	r0, Z+
     844:	0d 92       	st	X+, r0
     846:	2a 95       	dec	r18
     848:	e1 f7       	brne	.-8      	; 0x842 <printLine+0x1e>

	sprintf(strbuf, prFormat, get_SPECID, str);
     84a:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     84e:	22 ff       	sbrs	r18, 2
     850:	03 c0       	rjmp	.+6      	; 0x858 <printLine+0x34>
     852:	22 e0       	ldi	r18, 0x02	; 2
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	02 c0       	rjmp	.+4      	; 0x85c <printLine+0x38>
     858:	21 e0       	ldi	r18, 0x01	; 1
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	9f 93       	push	r25
     85e:	8f 93       	push	r24
     860:	3f 93       	push	r19
     862:	2f 93       	push	r18
     864:	ce 01       	movw	r24, r28
     866:	93 95       	inc	r25
     868:	9f 93       	push	r25
     86a:	8f 93       	push	r24
     86c:	8e 01       	movw	r16, r28
     86e:	0f 5f       	subi	r16, 0xFF	; 255
     870:	1f 4f       	sbci	r17, 0xFF	; 255
     872:	1f 93       	push	r17
     874:	0f 93       	push	r16
     876:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
	checksum_NMEA(strbuf);
     87a:	c8 01       	movw	r24, r16
     87c:	0e 94 90 0a 	call	0x1520	; 0x1520 <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     880:	f8 01       	movw	r30, r16
     882:	01 90       	ld	r0, Z+
     884:	00 20       	and	r0, r0
     886:	e9 f7       	brne	.-6      	; 0x882 <printLine+0x5e>
     888:	31 97       	sbiw	r30, 0x01	; 1
     88a:	af 01       	movw	r20, r30
     88c:	40 1b       	sub	r20, r16
     88e:	51 0b       	sbc	r21, r17
     890:	b8 01       	movw	r22, r16
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	0e 94 07 1a 	call	0x340e	; 0x340e <send_USART>

     898:	cd bf       	out	0x3d, r28	; 61
     89a:	de bf       	out	0x3e, r29	; 62
     89c:	cb 5f       	subi	r28, 0xFB	; 251
     89e:	de 4f       	sbci	r29, 0xFE	; 254
     8a0:	cd bf       	out	0x3d, r28	; 61
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	08 95       	ret

000008ae <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding the NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     8ae:	cf 92       	push	r12
     8b0:	df 92       	push	r13
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	cd 51       	subi	r28, 0x1D	; 29
     8c4:	d1 40       	sbci	r29, 0x01	; 1
     8c6:	cd bf       	out	0x3d, r28	; 61
     8c8:	de bf       	out	0x3e, r29	; 62
     8ca:	d8 2e       	mov	r13, r24
     8cc:	c9 2e       	mov	r12, r25

//	char format_CMD[] = "$S%dCMD,%s,%s";
	char format_CMD[] = "CMD,%s,%s";
     8ce:	8a e0       	ldi	r24, 0x0A	; 10
     8d0:	e4 ec       	ldi	r30, 0xC4	; 196
     8d2:	f8 e8       	ldi	r31, 0x88	; 136
     8d4:	9e 01       	movw	r18, r28
     8d6:	2f 5f       	subi	r18, 0xFF	; 255
     8d8:	3f 4f       	sbci	r19, 0xFF	; 255
     8da:	79 01       	movw	r14, r18
     8dc:	d9 01       	movw	r26, r18
     8de:	01 90       	ld	r0, Z+
     8e0:	0d 92       	st	X+, r0
     8e2:	8a 95       	dec	r24
     8e4:	e1 f7       	brne	.-8      	; 0x8de <echo_cmd+0x30>
	char currenttime[20], strbuf[BUFSIZE];

		// Format and echo the command line
	get_time(currenttime);
     8e6:	8e 01       	movw	r16, r28
     8e8:	05 5f       	subi	r16, 0xF5	; 245
     8ea:	1f 4f       	sbci	r17, 0xFF	; 255
     8ec:	c8 01       	movw	r24, r16
     8ee:	0e 94 d6 05 	call	0xbac	; 0xbac <get_time>
//	sprintf(strbuf, format_CMD, get_SPECID, currenttime, cmdline);
//	checksum_NMEA(strbuf);
//	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
	sprintf(strbuf, format_CMD, currenttime, cmdline);
     8f2:	cf 92       	push	r12
     8f4:	df 92       	push	r13
     8f6:	1f 93       	push	r17
     8f8:	0f 93       	push	r16
     8fa:	ff 92       	push	r15
     8fc:	ef 92       	push	r14
     8fe:	0c 5e       	subi	r16, 0xEC	; 236
     900:	1f 4f       	sbci	r17, 0xFF	; 255
     902:	1f 93       	push	r17
     904:	0f 93       	push	r16
     906:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
	printLine(strbuf);
     90a:	c8 01       	movw	r24, r16
     90c:	0e 94 12 04 	call	0x824	; 0x824 <printLine>

}
     910:	cd bf       	out	0x3d, r28	; 61
     912:	de bf       	out	0x3e, r29	; 62
     914:	c3 5e       	subi	r28, 0xE3	; 227
     916:	de 4f       	sbci	r29, 0xFE	; 254
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	df 90       	pop	r13
     92a:	cf 90       	pop	r12
     92c:	08 95       	ret

0000092e <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
     936:	cf 5f       	subi	r28, 0xFF	; 255
     938:	d1 09       	sbc	r29, r1
     93a:	cd bf       	out	0x3d, r28	; 61
     93c:	de bf       	out	0x3e, r29	; 62

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	uint8_t prompt_flag = GREATERPROMPT;
	static uint8_t cstack = 0;		// pcmd index

	get_cmdline(cmdline);
     93e:	ce 01       	movw	r24, r28
     940:	01 96       	adiw	r24, 0x01	; 1
     942:	0e 94 bb 02 	call	0x576	; 0x576 <get_cmdline>

	if (!rebootACKd(cmdline)) {		// Reboot acknowledge failed
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <rebootACKd>
     94e:	88 23       	and	r24, r24
     950:	09 f4       	brne	.+2      	; 0x954 <commands+0x26>
     952:	68 c0       	rjmp	.+208    	; 0xa24 <commands+0xf6>
		return;
	}

	echo_cmd(cmdline);
     954:	ce 01       	movw	r24, r28
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	0e 94 57 04 	call	0x8ae	; 0x8ae <echo_cmd>

	if (cmdline[0] == '\0') {		// <CR> alone is not an error
     95c:	89 81       	ldd	r24, Y+1	; 0x01
     95e:	81 11       	cpse	r24, r1
     960:	03 c0       	rjmp	.+6      	; 0x968 <commands+0x3a>
		send_prompt(GREATERPROMPT);
     962:	0e 94 88 03 	call	0x710	; 0x710 <send_prompt>
		return;
     966:	5e c0       	rjmp	.+188    	; 0xa24 <commands+0xf6>
	}

	parse_cmd(cmdline, cstack);
     968:	60 91 04 28 	lds	r22, 0x2804	; 0x802804 <__data_end>
     96c:	ce 01       	movw	r24, r28
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <parse_cmd>

	switch (pcmd[cstack].cverb) {
     974:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
     978:	24 e3       	ldi	r18, 0x34	; 52
     97a:	82 9f       	mul	r24, r18
     97c:	f0 01       	movw	r30, r0
     97e:	11 24       	eor	r1, r1
     980:	e9 5f       	subi	r30, 0xF9	; 249
     982:	f7 4d       	sbci	r31, 0xD7	; 215
     984:	e0 81       	ld	r30, Z
     986:	4e 2f       	mov	r20, r30
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	fa 01       	movw	r30, r20
     98c:	e2 55       	subi	r30, 0x52	; 82
     98e:	f1 09       	sbc	r31, r1
     990:	e3 32       	cpi	r30, 0x23	; 35
     992:	f1 05       	cpc	r31, r1
     994:	50 f5       	brcc	.+84     	; 0x9ea <commands+0xbc>
     996:	e0 5b       	subi	r30, 0xB0	; 176
     998:	ff 4f       	sbci	r31, 0xFF	; 255
     99a:	0c 94 9a 21 	jmp	0x4334	; 0x4334 <__tablejump2__>
		case 'c':				// close
			prompt_flag = close_PNEU(cstack);
     99e:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <close_PNEU>
     9a2:	28 2f       	mov	r18, r24
			break;
     9a4:	2f c0       	rjmp	.+94     	; 0xa04 <commands+0xd6>

		case 'o':				// open
			prompt_flag = open_PNEU(cstack);
     9a6:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <open_PNEU>
     9aa:	28 2f       	mov	r18, r24
			break;
     9ac:	2b c0       	rjmp	.+86     	; 0xa04 <commands+0xd6>

		case 'm':				// move
			move_MOTOR(cstack);
     9ae:	0e 94 db 16 	call	0x2db6	; 0x2db6 <move_MOTOR>
------------------------------------------------------------------------------*/
void commands(void)
{

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	uint8_t prompt_flag = GREATERPROMPT;
     9b2:	20 e0       	ldi	r18, 0x00	; 0
			prompt_flag = open_PNEU(cstack);
			break;

		case 'm':				// move
			move_MOTOR(cstack);
			break;
     9b4:	27 c0       	rjmp	.+78     	; 0xa04 <commands+0xd6>

		case 'r':				// report
			prompt_flag = report(cstack);
     9b6:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <report>
     9ba:	28 2f       	mov	r18, r24
			break;
     9bc:	23 c0       	rjmp	.+70     	; 0xa04 <commands+0xd6>

		case 's':				// set
			prompt_flag = set(cstack);
     9be:	0e 94 36 18 	call	0x306c	; 0x306c <set>
     9c2:	28 2f       	mov	r18, r24
			break;
     9c4:	1f c0       	rjmp	.+62     	; 0xa04 <commands+0xd6>

		case 't':
			testroutine();
     9c6:	0e 94 97 18 	call	0x312e	; 0x312e <testroutine>
------------------------------------------------------------------------------*/
void commands(void)
{

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	uint8_t prompt_flag = GREATERPROMPT;
     9ca:	20 e0       	ldi	r18, 0x00	; 0
			prompt_flag = set(cstack);
			break;

		case 't':
			testroutine();
			break;
     9cc:	1b c0       	rjmp	.+54     	; 0xa04 <commands+0xd6>

		case 'R':				// Reboot
			send_prompt(GREATERPROMPT);
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	0e 94 88 03 	call	0x710	; 0x710 <send_prompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9d4:	8a e6       	ldi	r24, 0x6A	; 106
     9d6:	94 e0       	ldi	r25, 0x04	; 4
     9d8:	21 e0       	ldi	r18, 0x01	; 1
     9da:	81 50       	subi	r24, 0x01	; 1
     9dc:	90 40       	sbci	r25, 0x00	; 0
     9de:	20 40       	sbci	r18, 0x00	; 0
     9e0:	e1 f7       	brne	.-8      	; 0x9da <commands+0xac>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <commands+0xb6>
			_delay_ms(100);		// Avoids finishing the command loop before reboot
			reboot();
     9e4:	0e 94 cc 1b 	call	0x3798	; 0x3798 <reboot>
			return;
     9e8:	1d c0       	rjmp	.+58     	; 0xa24 <commands+0xf6>

		default:
			if (notfirstpass) {
     9ea:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <notfirstpass>
     9ee:	88 23       	and	r24, r24
     9f0:	41 f0       	breq	.+16     	; 0xa02 <commands+0xd4>
				printError(ERR_BADCOMMAND, "Not a command");
     9f2:	6e ec       	ldi	r22, 0xCE	; 206
     9f4:	78 e8       	ldi	r23, 0x88	; 136
     9f6:	89 ec       	ldi	r24, 0xC9	; 201
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 9a 06 	call	0xd34	; 0xd34 <printError>
			}
			prompt_flag = GREATERPROMPT;
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	01 c0       	rjmp	.+2      	; 0xa04 <commands+0xd6>
     a02:	20 e0       	ldi	r18, 0x00	; 0
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     a04:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <__data_end>
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	01 96       	adiw	r24, 0x01	; 1
     a0c:	6a e0       	ldi	r22, 0x0A	; 10
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	0e 94 67 21 	call	0x42ce	; 0x42ce <__divmodhi4>
     a14:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <__data_end>
	notfirstpass = YES;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <notfirstpass>
	send_prompt(prompt_flag);
     a1e:	82 2f       	mov	r24, r18
     a20:	0e 94 88 03 	call	0x710	; 0x710 <send_prompt>

}
     a24:	c1 50       	subi	r28, 0x01	; 1
     a26:	df 4f       	sbci	r29, 0xFF	; 255
     a28:	cd bf       	out	0x3d, r28	; 61
     a2a:	de bf       	out	0x3e, r29	; 62
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret

00000a32 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     a32:	fb 01       	movw	r30, r22
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     a34:	70 81       	ld	r23, Z
	minutes = (*ds3231time++);
     a36:	61 81       	ldd	r22, Z+1	; 0x01
	hours = (*ds3231time++);
     a38:	52 81       	ldd	r21, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     a3a:	44 81       	ldd	r20, Z+4	; 0x04
	month = (*ds3231time++);
     a3c:	35 81       	ldd	r19, Z+5	; 0x05
	year = (*ds3231time);
     a3e:	26 81       	ldd	r18, Z+6	; 0x06

	sprintf(isotime, "20%02x-%02x-%02xT%02x:%02x:%02x",
     a40:	1f 92       	push	r1
     a42:	7f 93       	push	r23
     a44:	1f 92       	push	r1
     a46:	6f 93       	push	r22
     a48:	1f 92       	push	r1
     a4a:	5f 93       	push	r21
     a4c:	1f 92       	push	r1
     a4e:	4f 93       	push	r20
     a50:	1f 92       	push	r1
     a52:	3f 93       	push	r19
     a54:	1f 92       	push	r1
     a56:	2f 93       	push	r18
     a58:	2c ed       	ldi	r18, 0xDC	; 220
     a5a:	38 e8       	ldi	r19, 0x88	; 136
     a5c:	3f 93       	push	r19
     a5e:	2f 93       	push	r18
     a60:	9f 93       	push	r25
     a62:	8f 93       	push	r24
     a64:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
		year, month, date, hours, minutes, seconds);

}
     a68:	8d b7       	in	r24, 0x3d	; 61
     a6a:	9e b7       	in	r25, 0x3e	; 62
     a6c:	40 96       	adiw	r24, 0x10	; 16
     a6e:	8d bf       	out	0x3d, r24	; 61
     a70:	9e bf       	out	0x3e, r25	; 62
     a72:	08 95       	ret

00000a74 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ssZ
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     a74:	dc 01       	movw	r26, r24
     a76:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     a78:	81 89       	ldd	r24, Z+17	; 0x11
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	c0 97       	sbiw	r24, 0x30	; 48
     a7e:	82 95       	swap	r24
     a80:	92 95       	swap	r25
     a82:	90 7f       	andi	r25, 0xF0	; 240
     a84:	98 27       	eor	r25, r24
     a86:	80 7f       	andi	r24, 0xF0	; 240
     a88:	98 27       	eor	r25, r24
     a8a:	92 89       	ldd	r25, Z+18	; 0x12
     a8c:	90 53       	subi	r25, 0x30	; 48
     a8e:	89 2b       	or	r24, r25
     a90:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     a92:	86 85       	ldd	r24, Z+14	; 0x0e
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	c0 97       	sbiw	r24, 0x30	; 48
     a98:	82 95       	swap	r24
     a9a:	92 95       	swap	r25
     a9c:	90 7f       	andi	r25, 0xF0	; 240
     a9e:	98 27       	eor	r25, r24
     aa0:	80 7f       	andi	r24, 0xF0	; 240
     aa2:	98 27       	eor	r25, r24
     aa4:	97 85       	ldd	r25, Z+15	; 0x0f
     aa6:	90 53       	subi	r25, 0x30	; 48
     aa8:	89 2b       	or	r24, r25
     aaa:	11 96       	adiw	r26, 0x01	; 1
     aac:	8c 93       	st	X, r24
     aae:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     ab0:	83 85       	ldd	r24, Z+11	; 0x0b
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	c0 97       	sbiw	r24, 0x30	; 48
     ab6:	82 95       	swap	r24
     ab8:	92 95       	swap	r25
     aba:	90 7f       	andi	r25, 0xF0	; 240
     abc:	98 27       	eor	r25, r24
     abe:	80 7f       	andi	r24, 0xF0	; 240
     ac0:	98 27       	eor	r25, r24
     ac2:	94 85       	ldd	r25, Z+12	; 0x0c
     ac4:	90 53       	subi	r25, 0x30	; 48
     ac6:	89 2b       	or	r24, r25
     ac8:	12 96       	adiw	r26, 0x02	; 2
     aca:	8c 93       	st	X, r24
     acc:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	13 96       	adiw	r26, 0x03	; 3
     ad2:	8c 93       	st	X, r24
     ad4:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     ad6:	80 85       	ldd	r24, Z+8	; 0x08
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	c0 97       	sbiw	r24, 0x30	; 48
     adc:	82 95       	swap	r24
     ade:	92 95       	swap	r25
     ae0:	90 7f       	andi	r25, 0xF0	; 240
     ae2:	98 27       	eor	r25, r24
     ae4:	80 7f       	andi	r24, 0xF0	; 240
     ae6:	98 27       	eor	r25, r24
     ae8:	91 85       	ldd	r25, Z+9	; 0x09
     aea:	90 53       	subi	r25, 0x30	; 48
     aec:	89 2b       	or	r24, r25
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8c 93       	st	X, r24
     af2:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     af4:	25 81       	ldd	r18, Z+5	; 0x05
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	20 53       	subi	r18, 0x30	; 48
     afa:	31 09       	sbc	r19, r1
     afc:	22 95       	swap	r18
     afe:	32 95       	swap	r19
     b00:	30 7f       	andi	r19, 0xF0	; 240
     b02:	32 27       	eor	r19, r18
     b04:	20 7f       	andi	r18, 0xF0	; 240
     b06:	32 27       	eor	r19, r18
     b08:	86 81       	ldd	r24, Z+6	; 0x06
     b0a:	80 53       	subi	r24, 0x30	; 48
     b0c:	28 2b       	or	r18, r24
     b0e:	15 96       	adiw	r26, 0x05	; 5
     b10:	2c 93       	st	X, r18
     b12:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     b14:	22 81       	ldd	r18, Z+2	; 0x02
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	20 53       	subi	r18, 0x30	; 48
     b1a:	31 09       	sbc	r19, r1
     b1c:	22 95       	swap	r18
     b1e:	32 95       	swap	r19
     b20:	30 7f       	andi	r19, 0xF0	; 240
     b22:	32 27       	eor	r19, r18
     b24:	20 7f       	andi	r18, 0xF0	; 240
     b26:	32 27       	eor	r19, r18
     b28:	83 81       	ldd	r24, Z+3	; 0x03
     b2a:	80 53       	subi	r24, 0x30	; 48
     b2c:	28 2b       	or	r18, r24
     b2e:	16 96       	adiw	r26, 0x06	; 6
     b30:	2c 93       	st	X, r18
     b32:	08 95       	ret

00000b34 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	7b 01       	movw	r14, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
     b46:	c8 2f       	mov	r28, r24
     b48:	83 36       	cpi	r24, 0x63	; 99
     b4a:	19 f4       	brne	.+6      	; 0xb52 <read_DS3231+0x1e>
		stop_TWI();
     b4c:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
		return(ERROR);
     b50:	26 c0       	rjmp	.+76     	; 0xb9e <read_DS3231+0x6a>
    }  

// Can probably remove the error checks

	if (write_TWI(0x00) == ERROR) {	// Register 00h
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
     b58:	c8 2f       	mov	r28, r24
     b5a:	83 36       	cpi	r24, 0x63	; 99
     b5c:	19 f4       	brne	.+6      	; 0xb64 <read_DS3231+0x30>
		stop_TWI();
     b5e:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
		return(ERROR);
     b62:	1d c0       	rjmp	.+58     	; 0xb9e <read_DS3231+0x6a>
	}

	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	88 e6       	ldi	r24, 0x68	; 104
     b68:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
     b6c:	c8 2f       	mov	r28, r24
     b6e:	83 36       	cpi	r24, 0x63	; 99
     b70:	61 f4       	brne	.+24     	; 0xb8a <read_DS3231+0x56>
		stop_TWI();
     b72:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
		return(ERROR);
     b76:	13 c0       	rjmp	.+38     	; 0xb9e <read_DS3231+0x6a>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     b78:	87 01       	movw	r16, r14
     b7a:	0c 0f       	add	r16, r28
     b7c:	11 1d       	adc	r17, r1
     b7e:	0e 94 14 19 	call	0x3228	; 0x3228 <read_TWI>
     b82:	f8 01       	movw	r30, r16
     b84:	80 83       	st	Z, r24
	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 6; i++) {
     b86:	cf 5f       	subi	r28, 0xFF	; 255
     b88:	01 c0       	rjmp	.+2      	; 0xb8c <read_DS3231+0x58>
     b8a:	c0 e0       	ldi	r28, 0x00	; 0
     b8c:	c6 30       	cpi	r28, 0x06	; 6
     b8e:	a0 f3       	brcs	.-24     	; 0xb78 <read_DS3231+0x44>
		ds3231time[i] = read_TWI();
	}

	ds3231time[6] = readlast_TWI();
     b90:	0e 94 24 19 	call	0x3248	; 0x3248 <readlast_TWI>
     b94:	f7 01       	movw	r30, r14
     b96:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     b98:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>

	return(NOERROR);
     b9c:	c0 e0       	ldi	r28, 0x00	; 0

}
     b9e:	8c 2f       	mov	r24, r28
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	ff 90       	pop	r15
     ba8:	ef 90       	pop	r14
     baa:	08 95       	ret

00000bac <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	27 97       	sbiw	r28, 0x07	; 7
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	8c 01       	movw	r16, r24

	uint8_t retval, ds3231time[7];

	if ((retval = read_DS3231(DS3231ADDR, ds3231time))) {
     bc0:	be 01       	movw	r22, r28
     bc2:	6f 5f       	subi	r22, 0xFF	; 255
     bc4:	7f 4f       	sbci	r23, 0xFF	; 255
     bc6:	88 e6       	ldi	r24, 0x68	; 104
     bc8:	0e 94 9a 05 	call	0xb34	; 0xb34 <read_DS3231>
     bcc:	88 23       	and	r24, r24
     bce:	49 f0       	breq	.+18     	; 0xbe2 <get_time+0x36>
// avoid a bootup announcement at boot-time by not sending this
//		printError(ERR_GETTIME, "DS3231 get_time");
		strcpy(isotime, "CurrentTime?");
     bd0:	9d e0       	ldi	r25, 0x0D	; 13
     bd2:	ec ef       	ldi	r30, 0xFC	; 252
     bd4:	f8 e8       	ldi	r31, 0x88	; 136
     bd6:	d8 01       	movw	r26, r16
     bd8:	01 90       	ld	r0, Z+
     bda:	0d 92       	st	X+, r0
     bdc:	9a 95       	dec	r25
     bde:	e1 f7       	brne	.-8      	; 0xbd8 <get_time+0x2c>
		return(retval);
     be0:	07 c0       	rjmp	.+14     	; 0xbf0 <get_time+0x44>
	}

	convert_ds2iso(isotime, ds3231time);
     be2:	be 01       	movw	r22, r28
     be4:	6f 5f       	subi	r22, 0xFF	; 255
     be6:	7f 4f       	sbci	r23, 0xFF	; 255
     be8:	c8 01       	movw	r24, r16
     bea:	0e 94 19 05 	call	0xa32	; 0xa32 <convert_ds2iso>
	return(0);
     bee:	80 e0       	ldi	r24, 0x00	; 0

}
     bf0:	27 96       	adiw	r28, 0x07	; 7
     bf2:	cd bf       	out	0x3d, r28	; 61
     bf4:	de bf       	out	0x3e, r29	; 62
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	08 95       	ret

00000c00 <write_DS3231>:

	Returns
		TWI errors
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	8b 01       	movw	r16, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
     c14:	c8 2f       	mov	r28, r24
     c16:	83 36       	cpi	r24, 0x63	; 99
     c18:	19 f4       	brne	.+6      	; 0xc20 <write_DS3231+0x20>
		stop_TWI();
     c1a:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
		return(ERROR);
     c1e:	20 c0       	rjmp	.+64     	; 0xc60 <write_DS3231+0x60>
	}

	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
     c26:	c8 2f       	mov	r28, r24
     c28:	83 36       	cpi	r24, 0x63	; 99
     c2a:	a1 f4       	brne	.+40     	; 0xc54 <write_DS3231+0x54>
		stop_TWI();
     c2c:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
		return(ERROR);
     c30:	17 c0       	rjmp	.+46     	; 0xc60 <write_DS3231+0x60>
	}

	for (i = 0; i < 7; i++) {
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     c32:	78 01       	movw	r14, r16
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	e8 1a       	sub	r14, r24
     c38:	f8 0a       	sbc	r15, r24
     c3a:	f8 01       	movw	r30, r16
     c3c:	80 81       	ld	r24, Z
     c3e:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
     c42:	c8 2f       	mov	r28, r24
     c44:	83 36       	cpi	r24, 0x63	; 99
     c46:	19 f4       	brne	.+6      	; 0xc4e <write_DS3231+0x4e>
			stop_TWI();
     c48:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
			return(ERROR);
     c4c:	09 c0       	rjmp	.+18     	; 0xc60 <write_DS3231+0x60>
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     c4e:	df 5f       	subi	r29, 0xFF	; 255
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     c50:	87 01       	movw	r16, r14
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <write_DS3231+0x56>
     c54:	d0 e0       	ldi	r29, 0x00	; 0
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     c56:	d7 30       	cpi	r29, 0x07	; 7
     c58:	60 f3       	brcs	.-40     	; 0xc32 <write_DS3231+0x32>
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
			stop_TWI();
			return(ERROR);
		}
	}
	stop_TWI();
     c5a:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>

	return(NOERROR);
     c5e:	c0 e0       	ldi	r28, 0x00	; 0

}
     c60:	8c 2f       	mov	r24, r28
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	ff 90       	pop	r15
     c6c:	ef 90       	pop	r14
     c6e:	08 95       	ret

00000c70 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	27 97       	sbiw	r28, 0x07	; 7
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	de bf       	out	0x3e, r29	; 62

	uint8_t retval, ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     c7e:	bc 01       	movw	r22, r24
     c80:	ce 01       	movw	r24, r28
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	0e 94 3a 05 	call	0xa74	; 0xa74 <convert_iso2ds>
	if ((retval = write_DS3231(DS3231ADDR, ds3231time))) {
     c88:	be 01       	movw	r22, r28
     c8a:	6f 5f       	subi	r22, 0xFF	; 255
     c8c:	7f 4f       	sbci	r23, 0xFF	; 255
     c8e:	88 e6       	ldi	r24, 0x68	; 104
     c90:	0e 94 00 06 	call	0xc00	; 0xc00 <write_DS3231>
		return(retval);
	}
	return(0);

}
     c94:	27 96       	adiw	r28, 0x07	; 7
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	08 95       	ret

00000ca0 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     ca0:	45 e1       	ldi	r20, 0x15	; 21
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	6b e0       	ldi	r22, 0x0B	; 11
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	0e 94 19 24 	call	0x4832	; 0x4832 <eeprom_read_block>
     cac:	08 95       	ret

00000cae <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     cae:	4b e0       	ldi	r20, 0x0B	; 11
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	0e 94 19 24 	call	0x4832	; 0x4832 <eeprom_read_block>
     cba:	08 95       	ret

00000cbc <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	65 97       	sbiw	r28, 0x15	; 21
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     cca:	ce 01       	movw	r24, r28
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	0e 94 d6 05 	call	0xbac	; 0xbac <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     cd2:	45 e1       	ldi	r20, 0x15	; 21
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	6b e0       	ldi	r22, 0x0B	; 11
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	ce 01       	movw	r24, r28
     cdc:	01 96       	adiw	r24, 0x01	; 1
     cde:	0e 94 1d 24 	call	0x483a	; 0x483a <eeprom_update_block>

}
     ce2:	65 96       	adiw	r28, 0x15	; 21
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <update_VERSION>:

void update_VERSION(void)
{
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	2b 97       	sbiw	r28, 0x0b	; 11
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     cfc:	8b e0       	ldi	r24, 0x0B	; 11
     cfe:	e9 e0       	ldi	r30, 0x09	; 9
     d00:	f9 e8       	ldi	r31, 0x89	; 137
     d02:	de 01       	movw	r26, r28
     d04:	11 96       	adiw	r26, 0x01	; 1
     d06:	01 90       	ld	r0, Z+
     d08:	0d 92       	st	X+, r0
     d0a:	8a 95       	dec	r24
     d0c:	e1 f7       	brne	.-8      	; 0xd06 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     d0e:	4b e0       	ldi	r20, 0x0B	; 11
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	ce 01       	movw	r24, r28
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	0e 94 1d 24 	call	0x483a	; 0x483a <eeprom_update_block>

}
     d1e:	2b 96       	adiw	r28, 0x0b	; 11
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     d2a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <update_BOOTTIME>
	update_VERSION();
     d2e:	0e 94 77 06 	call	0xcee	; 0xcee <update_VERSION>
     d32:	08 95       	ret

00000d34 <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	c9 50       	subi	r28, 0x09	; 9
     d42:	d1 40       	sbci	r29, 0x01	; 1
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
//	const char errorFormat[] = "$S%dERR,%d,%s";
	const char errorFormat[] = "ERR,%d,%s";
     d48:	9e 01       	movw	r18, r28
     d4a:	33 95       	inc	r19
     d4c:	4a e0       	ldi	r20, 0x0A	; 10
     d4e:	e4 e1       	ldi	r30, 0x14	; 20
     d50:	f9 e8       	ldi	r31, 0x89	; 137
     d52:	d9 01       	movw	r26, r18
     d54:	01 90       	ld	r0, Z+
     d56:	0d 92       	st	X+, r0
     d58:	4a 95       	dec	r20
     d5a:	e1 f7       	brne	.-8      	; 0xd54 <printError+0x20>

	sprintf(strbuf, errorFormat, errorNumber, errorString);
     d5c:	7f 93       	push	r23
     d5e:	6f 93       	push	r22
     d60:	9f 93       	push	r25
     d62:	8f 93       	push	r24
     d64:	3f 93       	push	r19
     d66:	2f 93       	push	r18
     d68:	8e 01       	movw	r16, r28
     d6a:	0f 5f       	subi	r16, 0xFF	; 255
     d6c:	1f 4f       	sbci	r17, 0xFF	; 255
     d6e:	1f 93       	push	r17
     d70:	0f 93       	push	r16
     d72:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
//	checksum_NMEA(strbuf);
//	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
	printLine(strbuf);
     d76:	c8 01       	movw	r24, r16
     d78:	0e 94 12 04 	call	0x824	; 0x824 <printLine>

}
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	c7 5f       	subi	r28, 0xF7	; 247
     d82:	de 4f       	sbci	r29, 0xFE	; 254
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	08 95       	ret

00000d92 <read_FRAM>:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)

------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     d92:	ef 92       	push	r14
     d94:	ff 92       	push	r15
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	c8 2f       	mov	r28, r24
     da0:	e6 2e       	mov	r14, r22
     da2:	f7 2e       	mov	r15, r23
     da4:	8a 01       	movw	r16, r20
     da6:	d2 2f       	mov	r29, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
     dae:	81 11       	cpse	r24, r1
     db0:	2b c0       	rjmp	.+86     	; 0xe08 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {			// Send memory address
     db2:	8f 2d       	mov	r24, r15
     db4:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
     db8:	81 11       	cpse	r24, r1
     dba:	26 c0       	rjmp	.+76     	; 0xe08 <read_FRAM+0x76>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {
     dbc:	8e 2d       	mov	r24, r14
     dbe:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
     dc2:	81 11       	cpse	r24, r1
     dc4:	21 c0       	rjmp	.+66     	; 0xe08 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
     dc6:	61 e0       	ldi	r22, 0x01	; 1
     dc8:	8c 2f       	mov	r24, r28
     dca:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
     dce:	81 11       	cpse	r24, r1
     dd0:	1b c0       	rjmp	.+54     	; 0xe08 <read_FRAM+0x76>
     dd2:	c0 e0       	ldi	r28, 0x00	; 0
     dd4:	08 c0       	rjmp	.+16     	; 0xde6 <read_FRAM+0x54>
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     dd6:	78 01       	movw	r14, r16
     dd8:	ec 0e       	add	r14, r28
     dda:	f1 1c       	adc	r15, r1
     ddc:	0e 94 14 19 	call	0x3228	; 0x3228 <read_TWI>
     de0:	f7 01       	movw	r30, r14
     de2:	80 83       	st	Z, r24

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
     de4:	cf 5f       	subi	r28, 0xFF	; 255
     de6:	2c 2f       	mov	r18, r28
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	8d 2f       	mov	r24, r29
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	28 17       	cp	r18, r24
     df2:	39 07       	cpc	r19, r25
     df4:	84 f3       	brlt	.-32     	; 0xdd6 <read_FRAM+0x44>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     df6:	ec 01       	movw	r28, r24
     df8:	c0 0f       	add	r28, r16
     dfa:	d1 1f       	adc	r29, r17
     dfc:	0e 94 24 19 	call	0x3248	; 0x3248 <readlast_TWI>
     e00:	88 83       	st	Y, r24

	stop_TWI();
     e02:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>

	return(0);
     e06:	80 e0       	ldi	r24, 0x00	; 0

}
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	08 95       	ret

00000e16 <write_FRAM>:
	Returns:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     e16:	ef 92       	push	r14
     e18:	ff 92       	push	r15
     e1a:	0f 93       	push	r16
     e1c:	1f 93       	push	r17
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	f6 2e       	mov	r15, r22
     e24:	17 2f       	mov	r17, r23
     e26:	ea 01       	movw	r28, r20
     e28:	02 2f       	mov	r16, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if ((retval = start_TWI(addr, TWIWRITE))) {	// TWI START
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
     e30:	81 11       	cpse	r24, r1
     e32:	1c c0       	rjmp	.+56     	; 0xe6c <write_FRAM+0x56>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {		// FRAM address to write
     e34:	81 2f       	mov	r24, r17
     e36:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
     e3a:	81 11       	cpse	r24, r1
     e3c:	17 c0       	rjmp	.+46     	; 0xe6c <write_FRAM+0x56>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
     e3e:	8f 2d       	mov	r24, r15
     e40:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
     e44:	81 11       	cpse	r24, r1
     e46:	12 c0       	rjmp	.+36     	; 0xe6c <write_FRAM+0x56>
     e48:	10 e0       	ldi	r17, 0x00	; 0
     e4a:	0b c0       	rjmp	.+22     	; 0xe62 <write_FRAM+0x4c>
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     e4c:	7e 01       	movw	r14, r28
     e4e:	8f ef       	ldi	r24, 0xFF	; 255
     e50:	e8 1a       	sub	r14, r24
     e52:	f8 0a       	sbc	r15, r24
     e54:	88 81       	ld	r24, Y
     e56:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
     e5a:	81 11       	cpse	r24, r1
     e5c:	07 c0       	rjmp	.+14     	; 0xe6c <write_FRAM+0x56>
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     e5e:	1f 5f       	subi	r17, 0xFF	; 255
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     e60:	e7 01       	movw	r28, r14
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     e62:	10 17       	cp	r17, r16
     e64:	98 f3       	brcs	.-26     	; 0xe4c <write_FRAM+0x36>
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
			return(retval);
		}
	}

	stop_TWI();
     e66:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>

	return(0);
     e6a:	80 e0       	ldi	r24, 0x00	; 0

}
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	ff 90       	pop	r15
     e76:	ef 90       	pop	r14
     e78:	08 95       	ret

00000e7a <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     e7a:	8f 92       	push	r8
     e7c:	9f 92       	push	r9
     e7e:	af 92       	push	r10
     e80:	bf 92       	push	r11
     e82:	cf 92       	push	r12
     e84:	df 92       	push	r13
     e86:	ef 92       	push	r14
     e88:	ff 92       	push	r15
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	00 d0       	rcall	.+0      	; 0xe94 <get_humidity+0x1a>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <get_humidity+0x1c>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62

	uint8_t adcpin;
	float voltage, humidity, temperature;

	switch (sensor) {
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	59 f0       	breq	.+22     	; 0xeb4 <get_humidity+0x3a>
     e9e:	18 f0       	brcs	.+6      	; 0xea6 <get_humidity+0x2c>
     ea0:	82 30       	cpi	r24, 0x02	; 2
     ea2:	79 f0       	breq	.+30     	; 0xec2 <get_humidity+0x48>
     ea4:	15 c0       	rjmp	.+42     	; 0xed0 <get_humidity+0x56>
		case 0:
			temperature = get_temperature(0);
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	0e 94 6f 18 	call	0x30de	; 0x30de <get_temperature>
     eac:	6b 01       	movw	r12, r22
     eae:	7c 01       	movw	r14, r24
			adcpin = AIN0;		// production
     eb0:	40 e4       	ldi	r20, 0x40	; 64
			break;
     eb2:	17 c0       	rjmp	.+46     	; 0xee2 <get_humidity+0x68>
		case 1:
			temperature = get_temperature(1);
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	0e 94 6f 18 	call	0x30de	; 0x30de <get_temperature>
     eba:	6b 01       	movw	r12, r22
     ebc:	7c 01       	movw	r14, r24
			adcpin = AIN1;
     ebe:	40 e5       	ldi	r20, 0x50	; 80
			break;
     ec0:	10 c0       	rjmp	.+32     	; 0xee2 <get_humidity+0x68>
		case 2:
			temperature = get_temperature(2);
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	0e 94 6f 18 	call	0x30de	; 0x30de <get_temperature>
     ec8:	6b 01       	movw	r12, r22
     eca:	7c 01       	movw	r14, r24
			adcpin = AIN2;
     ecc:	40 e6       	ldi	r20, 0x60	; 96
			break;
     ece:	09 c0       	rjmp	.+18     	; 0xee2 <get_humidity+0x68>
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     ed0:	0f 2e       	mov	r0, r31
     ed2:	c1 2c       	mov	r12, r1
     ed4:	d1 2c       	mov	r13, r1
     ed6:	f0 ea       	ldi	r31, 0xA0	; 160
     ed8:	ef 2e       	mov	r14, r31
     eda:	f1 e4       	ldi	r31, 0x41	; 65
     edc:	ff 2e       	mov	r15, r31
     ede:	f0 2d       	mov	r31, r0
			temperature = get_temperature(2);
			adcpin = AIN2;
			break;
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     ee0:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
     ee2:	8e 01       	movw	r16, r28
     ee4:	0f 5f       	subi	r16, 0xFF	; 255
     ee6:	1f 4f       	sbci	r17, 0xFF	; 255
     ee8:	20 e8       	ldi	r18, 0x80	; 128
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	88 e4       	ldi	r24, 0x48	; 72
     eee:	0e 94 ca 01 	call	0x394	; 0x394 <read_ADS1115>
     ef2:	83 36       	cpi	r24, 0x63	; 99
     ef4:	79 f1       	breq	.+94     	; 0xf54 <get_humidity+0xda>
		humidity = -666.0;
	}
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 ea       	ldi	r20, 0xA0	; 160
     efc:	50 e4       	ldi	r21, 0x40	; 64
     efe:	69 81       	ldd	r22, Y+1	; 0x01
     f00:	7a 81       	ldd	r23, Y+2	; 0x02
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	9c 81       	ldd	r25, Y+4	; 0x04
     f06:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <__divsf3>
     f0a:	2a e0       	ldi	r18, 0x0A	; 10
     f0c:	37 ed       	ldi	r19, 0xD7	; 215
     f0e:	43 e2       	ldi	r20, 0x23	; 35
     f10:	5e e3       	ldi	r21, 0x3E	; 62
     f12:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <__subsf3>
     f16:	2f e5       	ldi	r18, 0x5F	; 95
     f18:	39 e2       	ldi	r19, 0x29	; 41
     f1a:	4b ec       	ldi	r20, 0xCB	; 203
     f1c:	5b e3       	ldi	r21, 0x3B	; 59
     f1e:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <__divsf3>
     f22:	4b 01       	movw	r8, r22
     f24:	5c 01       	movw	r10, r24
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
     f26:	29 ec       	ldi	r18, 0xC9	; 201
     f28:	3e e8       	ldi	r19, 0x8E	; 142
     f2a:	4d e0       	ldi	r20, 0x0D	; 13
     f2c:	5b e3       	ldi	r21, 0x3B	; 59
     f2e:	c7 01       	movw	r24, r14
     f30:	b6 01       	movw	r22, r12
     f32:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__mulsf3>
     f36:	9b 01       	movw	r18, r22
     f38:	ac 01       	movw	r20, r24
     f3a:	62 e2       	ldi	r22, 0x22	; 34
     f3c:	7d ef       	ldi	r23, 0xFD	; 253
     f3e:	86 e8       	ldi	r24, 0x86	; 134
     f40:	9f e3       	ldi	r25, 0x3F	; 63
     f42:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <__subsf3>
     f46:	9b 01       	movw	r18, r22
     f48:	ac 01       	movw	r20, r24
     f4a:	c5 01       	movw	r24, r10
     f4c:	b4 01       	movw	r22, r8
     f4e:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <__divsf3>
     f52:	04 c0       	rjmp	.+8      	; 0xf5c <get_humidity+0xe2>
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
		humidity = -666.0;
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	70 e8       	ldi	r23, 0x80	; 128
     f58:	86 e2       	ldi	r24, 0x26	; 38
     f5a:	94 ec       	ldi	r25, 0xC4	; 196
	humidity = (humidity / (1.0546 - 0.00216 * temperature));
*/

	return(humidity);

}
     f5c:	24 96       	adiw	r28, 0x04	; 4
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	ff 90       	pop	r15
     f6c:	ef 90       	pop	r14
     f6e:	df 90       	pop	r13
     f70:	cf 90       	pop	r12
     f72:	bf 90       	pop	r11
     f74:	af 90       	pop	r10
     f76:	9f 90       	pop	r9
     f78:	8f 90       	pop	r8
     f7a:	08 95       	ret

00000f7c <initialize0>:
*/

void initialize0(void)
{

	init_PORTS();
     f7c:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <init_PORTS>
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton setup
     f80:	8b e0       	ldi	r24, 0x0B	; 11
     f82:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f44b6>
	init_XPORT();
     f86:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <init_XPORT>
	init_SPECID();
     f8a:	0e 94 67 18 	call	0x30ce	; 0x30ce <init_SPECID>
	init_LED();
     f8e:	0e 94 a0 08 	call	0x1140	; 0x1140 <init_LED>
	init_BEEPER();
     f92:	0e 94 b4 02 	call	0x568	; 0x568 <init_BEEPER>
	init_TWI();
     f96:	0e 94 09 19 	call	0x3212	; 0x3212 <init_TWI>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
     f9a:	80 e2       	ldi	r24, 0x20	; 32
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <init_RTC>
	init_USART();
     fa2:	0e 94 af 19 	call	0x335e	; 0x335e <init_USART>
     fa6:	08 95       	ret

00000fa8 <initialize1>:

}

void initialize1(void)
{
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	2b 97       	sbiw	r28, 0x0b	; 11
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	notfirstpass = NO;
     fb6:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <notfirstpass>
	rebootackd = NO;
     fba:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <rebootackd>
	init_MOTORS();
     fbe:	0e 94 91 17 	call	0x2f22	; 0x2f22 <init_MOTORS>
	init_MMA8451();
     fc2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <init_MMA8451>
	init_PNEU();
     fc6:	0e 94 33 0c 	call	0x1866	; 0x1866 <init_PNEU>
	init_OLED(0);
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <init_OLED>
	init_OLED(1);
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <init_OLED>
	init_EEPROM();	// Needs TWI
     fd6:	0e 94 95 06 	call	0xd2a	; 0xd2a <init_EEPROM>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
     fda:	80 ee       	ldi	r24, 0xE0	; 224
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	80 93 11 2a 	sts	0x2A11, r24	; 0x802a11 <timeoutOLED>
     fe2:	90 93 12 2a 	sts	0x2A12, r25	; 0x802a12 <timeoutOLED+0x1>
	get_VERSION(versionstr);
     fe6:	ce 01       	movw	r24, r28
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	0e 94 57 06 	call	0xcae	; 0xcae <get_VERSION>
	writestr_OLED(1,"specMech Version", 1);
     fee:	41 e0       	ldi	r20, 0x01	; 1
     ff0:	6e e1       	ldi	r22, 0x1E	; 30
     ff2:	79 e8       	ldi	r23, 0x89	; 137
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	0e 94 ab 0b 	call	0x1756	; 0x1756 <writestr_OLED>
	writestr_OLED(1, versionstr, 2);
     ffa:	42 e0       	ldi	r20, 0x02	; 2
     ffc:	be 01       	movw	r22, r28
     ffe:	6f 5f       	subi	r22, 0xFF	; 255
    1000:	7f 4f       	sbci	r23, 0xFF	; 255
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	0e 94 ab 0b 	call	0x1756	; 0x1756 <writestr_OLED>

}
    1008:	2b 96       	adiw	r28, 0x0b	; 11
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	08 95       	ret

00001014 <__vector_29>:

/*----------------------------------------------------------------------
Curiosity Nano on-board pushbutton reboots the system
----------------------------------------------------------------------*/
ISR(PORTF_PORT_vect)
{
    1014:	1f 92       	push	r1
    1016:	0f 92       	push	r0
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	0f 92       	push	r0
    101c:	11 24       	eor	r1, r1
    101e:	2f 93       	push	r18
    1020:	3f 93       	push	r19
    1022:	4f 93       	push	r20
    1024:	5f 93       	push	r21
    1026:	6f 93       	push	r22
    1028:	7f 93       	push	r23
    102a:	8f 93       	push	r24
    102c:	9f 93       	push	r25
    102e:	af 93       	push	r26
    1030:	bf 93       	push	r27
    1032:	ef 93       	push	r30
    1034:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
    1036:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
    103a:	86 ff       	sbrs	r24, 6
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
    103e:	80 e4       	ldi	r24, 0x40	; 64
    1040:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
    1044:	0e 94 cc 1b 	call	0x3798	; 0x3798 <reboot>
	}

}
    1048:	ff 91       	pop	r31
    104a:	ef 91       	pop	r30
    104c:	bf 91       	pop	r27
    104e:	af 91       	pop	r26
    1050:	9f 91       	pop	r25
    1052:	8f 91       	pop	r24
    1054:	7f 91       	pop	r23
    1056:	6f 91       	pop	r22
    1058:	5f 91       	pop	r21
    105a:	4f 91       	pop	r20
    105c:	3f 91       	pop	r19
    105e:	2f 91       	pop	r18
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	0f 90       	pop	r0
    1066:	1f 90       	pop	r1
    1068:	18 95       	reti

0000106a <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
    106a:	cf 92       	push	r12
    106c:	df 92       	push	r13
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	00 d0       	rcall	.+0      	; 0x107c <read_ionpump+0x12>
    107c:	00 d0       	rcall	.+0      	; 0x107e <read_ionpump+0x14>
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	21 f0       	breq	.+8      	; 0x108e <read_ionpump+0x24>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	c1 f5       	brne	.+112    	; 0x10fa <read_ionpump+0x90>
		pins = AIN23;
    108a:	40 e3       	ldi	r20, 0x30	; 48
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <read_ionpump+0x26>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
    108e:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(-666.0);
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
    1090:	8e 01       	movw	r16, r28
    1092:	0f 5f       	subi	r16, 0xFF	; 255
    1094:	1f 4f       	sbci	r17, 0xFF	; 255
    1096:	20 e8       	ldi	r18, 0x80	; 128
    1098:	62 e0       	ldi	r22, 0x02	; 2
    109a:	89 e4       	ldi	r24, 0x49	; 73
    109c:	0e 94 ca 01 	call	0x394	; 0x394 <read_ADS1115>
    10a0:	83 36       	cpi	r24, 0x63	; 99
    10a2:	81 f1       	breq	.+96     	; 0x1104 <read_ionpump+0x9a>
		return(-666.0);
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
    10a4:	c9 80       	ldd	r12, Y+1	; 0x01
    10a6:	da 80       	ldd	r13, Y+2	; 0x02
    10a8:	eb 80       	ldd	r14, Y+3	; 0x03
    10aa:	fc 80       	ldd	r15, Y+4	; 0x04
    10ac:	2d ec       	ldi	r18, 0xCD	; 205
    10ae:	3c ec       	ldi	r19, 0xCC	; 204
    10b0:	4c ec       	ldi	r20, 0xCC	; 204
    10b2:	5e e3       	ldi	r21, 0x3E	; 62
    10b4:	c7 01       	movw	r24, r14
    10b6:	b6 01       	movw	r22, r12
    10b8:	0e 94 4f 1c 	call	0x389e	; 0x389e <__cmpsf2>
    10bc:	88 23       	and	r24, r24
    10be:	3c f1       	brlt	.+78     	; 0x110e <read_ionpump+0xa4>
		return(-666.0);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	50 e4       	ldi	r21, 0x40	; 64
    10c8:	c7 01       	movw	r24, r14
    10ca:	b6 01       	movw	r22, r12
    10cc:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__gesf2>
    10d0:	18 16       	cp	r1, r24
    10d2:	14 f1       	brlt	.+68     	; 0x1118 <read_ionpump+0xae>
		return(-666.0);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    10d4:	29 e7       	ldi	r18, 0x79	; 121
    10d6:	39 ee       	ldi	r19, 0xE9	; 233
    10d8:	42 e0       	ldi	r20, 0x02	; 2
    10da:	50 e4       	ldi	r21, 0x40	; 64
    10dc:	c7 01       	movw	r24, r14
    10de:	b6 01       	movw	r22, r12
    10e0:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__mulsf3>
    10e4:	2e e6       	ldi	r18, 0x6E	; 110
    10e6:	33 ea       	ldi	r19, 0xA3	; 163
    10e8:	4b ed       	ldi	r20, 0xDB	; 219
    10ea:	50 e4       	ldi	r21, 0x40	; 64
    10ec:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <__subsf3>
	return(vacuum);
    10f0:	56 2f       	mov	r21, r22
    10f2:	47 2f       	mov	r20, r23
    10f4:	38 2f       	mov	r19, r24
    10f6:	29 2f       	mov	r18, r25
    10f8:	13 c0       	rjmp	.+38     	; 0x1120 <read_ionpump+0xb6>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(-666.0);
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	40 e8       	ldi	r20, 0x80	; 128
    10fe:	36 e2       	ldi	r19, 0x26	; 38
    1100:	24 ec       	ldi	r18, 0xC4	; 196
    1102:	0e c0       	rjmp	.+28     	; 0x1120 <read_ionpump+0xb6>
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
		return(-666.0);
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	40 e8       	ldi	r20, 0x80	; 128
    1108:	36 e2       	ldi	r19, 0x26	; 38
    110a:	24 ec       	ldi	r18, 0xC4	; 196
    110c:	09 c0       	rjmp	.+18     	; 0x1120 <read_ionpump+0xb6>
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(-666.0);							// after ISO224 op-amp is 0.5 to 2.0 V
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	40 e8       	ldi	r20, 0x80	; 128
    1112:	36 e2       	ldi	r19, 0x26	; 38
    1114:	24 ec       	ldi	r18, 0xC4	; 196
    1116:	04 c0       	rjmp	.+8      	; 0x1120 <read_ionpump+0xb6>
	} else if (voltage > 2.0) {
		return(-666.0);
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	40 e8       	ldi	r20, 0x80	; 128
    111c:	36 e2       	ldi	r19, 0x26	; 38
    111e:	24 ec       	ldi	r18, 0xC4	; 196
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
    1120:	65 2f       	mov	r22, r21
    1122:	74 2f       	mov	r23, r20
    1124:	83 2f       	mov	r24, r19
    1126:	92 2f       	mov	r25, r18
    1128:	24 96       	adiw	r28, 0x04	; 4
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	ff 90       	pop	r15
    1138:	ef 90       	pop	r14
    113a:	df 90       	pop	r13
    113c:	cf 90       	pop	r12
    113e:	08 95       	ret

00001140 <init_LED>:
#include "globals.h"

void init_LED(void)
{
	PORTF.OUTSET = PIN5_bm;
    1140:	e0 ea       	ldi	r30, 0xA0	; 160
    1142:	f4 e0       	ldi	r31, 0x04	; 4
    1144:	80 e2       	ldi	r24, 0x20	; 32
    1146:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN5_bm;
    1148:	81 83       	std	Z+1, r24	; 0x01
    114a:	08 95       	ret

0000114c <main>:
extern void initialize(void);

int main(void)
{

	initialize0();
    114c:	0e 94 be 07 	call	0xf7c	; 0xf7c <initialize0>
	sei();
    1150:	78 94       	sei
	initialize1();
    1152:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <initialize1>

	for (;;) {
		if (recv0_buf.done) {
    1156:	80 91 1f 2c 	lds	r24, 0x2C1F	; 0x802c1f <recv0_buf+0x104>
    115a:	88 23       	and	r24, r24
    115c:	e1 f3       	breq	.-8      	; 0x1156 <main+0xa>
			recv0_buf.done = NO;
    115e:	10 92 1f 2c 	sts	0x2C1F, r1	; 0x802c1f <recv0_buf+0x104>
			commands();
    1162:	0e 94 97 04 	call	0x92e	; 0x92e <commands>
    1166:	f7 cf       	rjmp	.-18     	; 0x1156 <main+0xa>

00001168 <read_MCP23008>:
	Returns:
		val - data in that MCP23008 register
		Function return value is 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	c8 2f       	mov	r28, r24
    116e:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
    1176:	83 36       	cpi	r24, 0x63	; 99
    1178:	51 f4       	brne	.+20     	; 0x118e <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 error");
    117a:	6f e2       	ldi	r22, 0x2F	; 47
    117c:	79 e8       	ldi	r23, 0x89	; 137
    117e:	82 e9       	ldi	r24, 0x92	; 146
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	0e 94 9a 06 	call	0xd34	; 0xd34 <printError>
		stop_TWI();
    1186:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
		return(0x7F);
    118a:	8f e7       	ldi	r24, 0x7F	; 127
    118c:	0d c0       	rjmp	.+26     	; 0x11a8 <read_MCP23008+0x40>
	}
	write_TWI(reg);
    118e:	8d 2f       	mov	r24, r29
    1190:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
	start_TWI(addr, TWIREAD);
    1194:	61 e0       	ldi	r22, 0x01	; 1
    1196:	8c 2f       	mov	r24, r28
    1198:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
	value = readlast_TWI();
    119c:	0e 94 24 19 	call	0x3248	; 0x3248 <readlast_TWI>
    11a0:	c8 2f       	mov	r28, r24
	stop_TWI();
    11a2:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
	return(value);
    11a6:	8c 2f       	mov	r24, r28

}
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	08 95       	ret

000011ae <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	d6 2f       	mov	r29, r22
    11b6:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
    11be:	c8 2f       	mov	r28, r24
    11c0:	88 23       	and	r24, r24
    11c2:	21 f0       	breq	.+8      	; 0x11cc <write_MCP23008+0x1e>
		stop_TWI();
    11c4:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
		return(retval);
    11c8:	8c 2f       	mov	r24, r28
    11ca:	17 c0       	rjmp	.+46     	; 0x11fa <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    11cc:	8d 2f       	mov	r24, r29
    11ce:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
    11d2:	c8 2f       	mov	r28, r24
    11d4:	88 23       	and	r24, r24
    11d6:	21 f0       	breq	.+8      	; 0x11e0 <write_MCP23008+0x32>
		stop_TWI();
    11d8:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
		return(retval);
    11dc:	8c 2f       	mov	r24, r28
    11de:	0d c0       	rjmp	.+26     	; 0x11fa <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(val))) {
    11e0:	81 2f       	mov	r24, r17
    11e2:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
    11e6:	c8 2f       	mov	r28, r24
    11e8:	88 23       	and	r24, r24
    11ea:	21 f0       	breq	.+8      	; 0x11f4 <write_MCP23008+0x46>
		stop_TWI();
    11ec:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
		return(retval);
    11f0:	8c 2f       	mov	r24, r28
    11f2:	03 c0       	rjmp	.+6      	; 0x11fa <write_MCP23008+0x4c>
	}
	stop_TWI();
    11f4:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
	return(0);
    11f8:	80 e0       	ldi	r24, 0x00	; 0
	
}
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	08 95       	ret

00001202 <read_MCP9808>:
#include "errors.h"
#include "mcp9808.h"
#include "twi.h"

uint8_t read_MCP9808(float *temperature)
{
    1202:	8f 92       	push	r8
    1204:	9f 92       	push	r9
    1206:	af 92       	push	r10
    1208:	bf 92       	push	r11
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	8c 01       	movw	r16, r24

	uint8_t highbyte, lowbyte, sign;
	float temp;

	if (start_TWI(MCP9808ADDR, TWIWRITE) == ERROR) {
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	88 e1       	ldi	r24, 0x18	; 24
    121a:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
    121e:	83 36       	cpi	r24, 0x63	; 99
    1220:	51 f4       	brne	.+20     	; 0x1236 <read_MCP9808+0x34>
		*temperature = -666.0;
    1222:	40 e0       	ldi	r20, 0x00	; 0
    1224:	50 e8       	ldi	r21, 0x80	; 128
    1226:	66 e2       	ldi	r22, 0x26	; 38
    1228:	74 ec       	ldi	r23, 0xC4	; 196
    122a:	f8 01       	movw	r30, r16
    122c:	40 83       	st	Z, r20
    122e:	51 83       	std	Z+1, r21	; 0x01
    1230:	62 83       	std	Z+2, r22	; 0x02
    1232:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    1234:	43 c0       	rjmp	.+134    	; 0x12bc <read_MCP9808+0xba>
	}
	write_TWI(TEMPREGISTER);
    1236:	85 e0       	ldi	r24, 0x05	; 5
    1238:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    123c:	61 e0       	ldi	r22, 0x01	; 1
    123e:	88 e1       	ldi	r24, 0x18	; 24
    1240:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
	highbyte = read_TWI();
    1244:	0e 94 14 19 	call	0x3228	; 0x3228 <read_TWI>
    1248:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    124a:	0e 94 24 19 	call	0x3248	; 0x3248 <readlast_TWI>
    124e:	d8 2f       	mov	r29, r24
	stop_TWI();
    1250:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1254:	fc 2f       	mov	r31, r28
    1256:	f0 71       	andi	r31, 0x10	; 16
    1258:	ff 2e       	mov	r15, r31
	highbyte &= 0x0F;					// Clear threshold & sign bits
    125a:	6c 2f       	mov	r22, r28
    125c:	6f 70       	andi	r22, 0x0F	; 15
	temp = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	0e 94 c6 1c 	call	0x398c	; 0x398c <__floatunsisf>
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e8       	ldi	r20, 0x80	; 128
    126e:	51 e4       	ldi	r21, 0x41	; 65
    1270:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__mulsf3>
    1274:	4b 01       	movw	r8, r22
    1276:	5c 01       	movw	r10, r24
    1278:	6d 2f       	mov	r22, r29
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 c6 1c 	call	0x398c	; 0x398c <__floatunsisf>
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	40 e8       	ldi	r20, 0x80	; 128
    128a:	5d e3       	ldi	r21, 0x3D	; 61
    128c:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__mulsf3>
    1290:	9b 01       	movw	r18, r22
    1292:	ac 01       	movw	r20, r24
    1294:	c5 01       	movw	r24, r10
    1296:	b4 01       	movw	r22, r8
    1298:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__addsf3>
	if (sign) {
    129c:	ff 20       	and	r15, r15
    129e:	41 f0       	breq	.+16     	; 0x12b0 <read_MCP9808+0xae>
		temp = 256.0 - temp;
    12a0:	9b 01       	movw	r18, r22
    12a2:	ac 01       	movw	r20, r24
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	80 e8       	ldi	r24, 0x80	; 128
    12aa:	93 e4       	ldi	r25, 0x43	; 67
    12ac:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <__subsf3>
	}
	*temperature = temp;
    12b0:	f8 01       	movw	r30, r16
    12b2:	60 83       	st	Z, r22
    12b4:	71 83       	std	Z+1, r23	; 0x01
    12b6:	82 83       	std	Z+2, r24	; 0x02
    12b8:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    12ba:	80 e0       	ldi	r24, 0x00	; 0
}
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	bf 90       	pop	r11
    12c8:	af 90       	pop	r10
    12ca:	9f 90       	pop	r9
    12cc:	8f 90       	pop	r8
    12ce:	08 95       	ret

000012d0 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    12d0:	ef 92       	push	r14
    12d2:	ff 92       	push	r15
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	18 2f       	mov	r17, r24
    12de:	f6 2e       	mov	r15, r22
    12e0:	ea 01       	movw	r28, r20
    12e2:	02 2f       	mov	r16, r18

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
    12ea:	81 11       	cpse	r24, r1
    12ec:	1e c0       	rjmp	.+60     	; 0x132a <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = write_TWI(reg))) {
    12ee:	8f 2d       	mov	r24, r15
    12f0:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
    12f4:	81 11       	cpse	r24, r1
    12f6:	19 c0       	rjmp	.+50     	; 0x132a <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
    12f8:	61 e0       	ldi	r22, 0x01	; 1
    12fa:	81 2f       	mov	r24, r17
    12fc:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
    1300:	81 11       	cpse	r24, r1
    1302:	13 c0       	rjmp	.+38     	; 0x132a <read_MMA8451+0x5a>
    1304:	11 e0       	ldi	r17, 0x01	; 1
    1306:	09 c0       	rjmp	.+18     	; 0x131a <read_MMA8451+0x4a>
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    1308:	7e 01       	movw	r14, r28
    130a:	8f ef       	ldi	r24, 0xFF	; 255
    130c:	e8 1a       	sub	r14, r24
    130e:	f8 0a       	sbc	r15, r24
    1310:	0e 94 14 19 	call	0x3228	; 0x3228 <read_TWI>
    1314:	88 83       	st	Y, r24
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    1316:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    1318:	e7 01       	movw	r28, r14
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    131a:	10 17       	cp	r17, r16
    131c:	a8 f3       	brcs	.-22     	; 0x1308 <read_MMA8451+0x38>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    131e:	0e 94 24 19 	call	0x3248	; 0x3248 <readlast_TWI>
    1322:	88 83       	st	Y, r24
	stop_TWI();
    1324:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
	return(0);
    1328:	80 e0       	ldi	r24, 0x00	; 0

}
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	08 95       	ret

00001338 <get_orientation>:
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
//uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
uint8_t get_orientation(float *x, float *y, float *z)
{
    1338:	cf 92       	push	r12
    133a:	df 92       	push	r13
    133c:	ef 92       	push	r14
    133e:	ff 92       	push	r15
    1340:	0f 93       	push	r16
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	26 97       	sbiw	r28, 0x06	; 6
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	6c 01       	movw	r12, r24
    1354:	7b 01       	movw	r14, r22
    1356:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -666.0;
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	90 e8       	ldi	r25, 0x80	; 128
    135c:	a6 e2       	ldi	r26, 0x26	; 38
    135e:	b4 ec       	ldi	r27, 0xC4	; 196
    1360:	fa 01       	movw	r30, r20
    1362:	80 83       	st	Z, r24
    1364:	91 83       	std	Z+1, r25	; 0x01
    1366:	a2 83       	std	Z+2, r26	; 0x02
    1368:	b3 83       	std	Z+3, r27	; 0x03
    136a:	fb 01       	movw	r30, r22
    136c:	80 83       	st	Z, r24
    136e:	91 83       	std	Z+1, r25	; 0x01
    1370:	a2 83       	std	Z+2, r26	; 0x02
    1372:	b3 83       	std	Z+3, r27	; 0x03
    1374:	f6 01       	movw	r30, r12
    1376:	80 83       	st	Z, r24
    1378:	91 83       	std	Z+1, r25	; 0x01
    137a:	a2 83       	std	Z+2, r26	; 0x02
    137c:	b3 83       	std	Z+3, r27	; 0x03

	read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6);
    137e:	26 e0       	ldi	r18, 0x06	; 6
    1380:	ae 01       	movw	r20, r28
    1382:	4f 5f       	subi	r20, 0xFF	; 255
    1384:	5f 4f       	sbci	r21, 0xFF	; 255
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	8d e1       	ldi	r24, 0x1D	; 29
    138a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <read_MMA8451>

	ix = datain[0];
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    1392:	98 2f       	mov	r25, r24
    1394:	88 27       	eor	r24, r24
	ix |= datain[1];
    1396:	2a 81       	ldd	r18, Y+2	; 0x02
    1398:	82 2b       	or	r24, r18
	ix /= 4;
    139a:	bc 01       	movw	r22, r24
    139c:	77 23       	and	r23, r23
    139e:	14 f4       	brge	.+4      	; 0x13a4 <get_orientation+0x6c>
    13a0:	6d 5f       	subi	r22, 0xFD	; 253
    13a2:	7f 4f       	sbci	r23, 0xFF	; 255
    13a4:	75 95       	asr	r23
    13a6:	67 95       	ror	r22
    13a8:	75 95       	asr	r23
    13aa:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    13ac:	07 2e       	mov	r0, r23
    13ae:	00 0c       	add	r0, r0
    13b0:	88 0b       	sbc	r24, r24
    13b2:	99 0b       	sbc	r25, r25
    13b4:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__floatsisf>
    13b8:	26 e6       	ldi	r18, 0x66	; 102
    13ba:	36 e2       	ldi	r19, 0x26	; 38
    13bc:	45 e7       	ldi	r20, 0x75	; 117
    13be:	5e e3       	ldi	r21, 0x3E	; 62
    13c0:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__mulsf3>
    13c4:	f6 01       	movw	r30, r12
    13c6:	60 83       	st	Z, r22
    13c8:	71 83       	std	Z+1, r23	; 0x01
    13ca:	82 83       	std	Z+2, r24	; 0x02
    13cc:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    13d2:	98 2f       	mov	r25, r24
    13d4:	88 27       	eor	r24, r24
	iy |= datain[3];
    13d6:	2c 81       	ldd	r18, Y+4	; 0x04
    13d8:	82 2b       	or	r24, r18
	iy /= 4;
    13da:	bc 01       	movw	r22, r24
    13dc:	77 23       	and	r23, r23
    13de:	14 f4       	brge	.+4      	; 0x13e4 <get_orientation+0xac>
    13e0:	6d 5f       	subi	r22, 0xFD	; 253
    13e2:	7f 4f       	sbci	r23, 0xFF	; 255
    13e4:	75 95       	asr	r23
    13e6:	67 95       	ror	r22
    13e8:	75 95       	asr	r23
    13ea:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    13ec:	07 2e       	mov	r0, r23
    13ee:	00 0c       	add	r0, r0
    13f0:	88 0b       	sbc	r24, r24
    13f2:	99 0b       	sbc	r25, r25
    13f4:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__floatsisf>
    13f8:	26 e6       	ldi	r18, 0x66	; 102
    13fa:	36 e2       	ldi	r19, 0x26	; 38
    13fc:	45 e7       	ldi	r20, 0x75	; 117
    13fe:	5e e3       	ldi	r21, 0x3E	; 62
    1400:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__mulsf3>
    1404:	f7 01       	movw	r30, r14
    1406:	60 83       	st	Z, r22
    1408:	71 83       	std	Z+1, r23	; 0x01
    140a:	82 83       	std	Z+2, r24	; 0x02
    140c:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    1412:	98 2f       	mov	r25, r24
    1414:	88 27       	eor	r24, r24
	iz |= datain[5];
    1416:	2e 81       	ldd	r18, Y+6	; 0x06
    1418:	82 2b       	or	r24, r18
	iz /= 4;
    141a:	bc 01       	movw	r22, r24
    141c:	77 23       	and	r23, r23
    141e:	14 f4       	brge	.+4      	; 0x1424 <get_orientation+0xec>
    1420:	6d 5f       	subi	r22, 0xFD	; 253
    1422:	7f 4f       	sbci	r23, 0xFF	; 255
    1424:	75 95       	asr	r23
    1426:	67 95       	ror	r22
    1428:	75 95       	asr	r23
    142a:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    142c:	07 2e       	mov	r0, r23
    142e:	00 0c       	add	r0, r0
    1430:	88 0b       	sbc	r24, r24
    1432:	99 0b       	sbc	r25, r25
    1434:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__floatsisf>
    1438:	26 e6       	ldi	r18, 0x66	; 102
    143a:	36 e2       	ldi	r19, 0x26	; 38
    143c:	45 e7       	ldi	r20, 0x75	; 117
    143e:	5e e3       	ldi	r21, 0x3E	; 62
    1440:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__mulsf3>
    1444:	f8 01       	movw	r30, r16
    1446:	60 83       	st	Z, r22
    1448:	71 83       	std	Z+1, r23	; 0x01
    144a:	82 83       	std	Z+2, r24	; 0x02
    144c:	93 83       	std	Z+3, r25	; 0x03

	return(0);

}
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	26 96       	adiw	r28, 0x06	; 6
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	df 90       	pop	r13
    1464:	cf 90       	pop	r12
    1466:	08 95       	ret

00001468 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	d6 2f       	mov	r29, r22
    1470:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
    1478:	c8 2f       	mov	r28, r24
    147a:	88 23       	and	r24, r24
    147c:	21 f0       	breq	.+8      	; 0x1486 <write_MMA8451+0x1e>
		stop_TWI();
    147e:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
		return(retval);
    1482:	8c 2f       	mov	r24, r28
    1484:	17 c0       	rjmp	.+46     	; 0x14b4 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1486:	8d 2f       	mov	r24, r29
    1488:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
    148c:	c8 2f       	mov	r28, r24
    148e:	88 23       	and	r24, r24
    1490:	21 f0       	breq	.+8      	; 0x149a <write_MMA8451+0x32>
		stop_TWI();
    1492:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
		return(retval);
    1496:	8c 2f       	mov	r24, r28
    1498:	0d c0       	rjmp	.+26     	; 0x14b4 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    149a:	81 2f       	mov	r24, r17
    149c:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
    14a0:	c8 2f       	mov	r28, r24
    14a2:	88 23       	and	r24, r24
    14a4:	21 f0       	breq	.+8      	; 0x14ae <write_MMA8451+0x46>
		stop_TWI();
    14a6:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
		return(retval);
    14aa:	8c 2f       	mov	r24, r28
    14ac:	03 c0       	rjmp	.+6      	; 0x14b4 <write_MMA8451+0x4c>
	}
	stop_TWI();
    14ae:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>
	return(0);
    14b2:	80 e0       	ldi	r24, 0x00	; 0
	
}
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	08 95       	ret

000014bc <init_MMA8451>:
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/

uint8_t init_MMA8451(void)
{
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	1f 92       	push	r1
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    14c6:	40 e4       	ldi	r20, 0x40	; 64
    14c8:	6b e2       	ldi	r22, 0x2B	; 43
    14ca:	8d e1       	ldi	r24, 0x1D	; 29
    14cc:	0e 94 34 0a 	call	0x1468	; 0x1468 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    14d0:	21 e0       	ldi	r18, 0x01	; 1
    14d2:	ae 01       	movw	r20, r28
    14d4:	4f 5f       	subi	r20, 0xFF	; 255
    14d6:	5f 4f       	sbci	r21, 0xFF	; 255
    14d8:	6b e2       	ldi	r22, 0x2B	; 43
    14da:	8d e1       	ldi	r24, 0x1D	; 29
    14dc:	0e 94 68 09 	call	0x12d0	; 0x12d0 <read_MMA8451>
	while (retval & 0x40) {
    14e0:	08 c0       	rjmp	.+16     	; 0x14f2 <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    14e2:	21 e0       	ldi	r18, 0x01	; 1
    14e4:	ae 01       	movw	r20, r28
    14e6:	4f 5f       	subi	r20, 0xFF	; 255
    14e8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ea:	6b e2       	ldi	r22, 0x2B	; 43
    14ec:	8d e1       	ldi	r24, 0x1D	; 29
    14ee:	0e 94 68 09 	call	0x12d0	; 0x12d0 <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	86 fd       	sbrc	r24, 6
    14f6:	f5 cf       	rjmp	.-22     	; 0x14e2 <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    14f8:	40 ec       	ldi	r20, 0xC0	; 192
    14fa:	6f e0       	ldi	r22, 0x0F	; 15
    14fc:	8d e1       	ldi	r24, 0x1D	; 29
    14fe:	0e 94 34 0a 	call	0x1468	; 0x1468 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    1502:	42 e0       	ldi	r20, 0x02	; 2
    1504:	6b e2       	ldi	r22, 0x2B	; 43
    1506:	8d e1       	ldi	r24, 0x1D	; 29
    1508:	0e 94 34 0a 	call	0x1468	; 0x1468 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    150c:	4d e3       	ldi	r20, 0x3D	; 61
    150e:	6a e2       	ldi	r22, 0x2A	; 42
    1510:	8d e1       	ldi	r24, 0x1D	; 29
    1512:	0e 94 34 0a 	call	0x1468	; 0x1468 <write_MMA8451>

	return(retval);

}
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	0f 90       	pop	r0
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	2e 97       	sbiw	r28, 0x0e	; 14
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    1538:	88 e0       	ldi	r24, 0x08	; 8
    153a:	ee e3       	ldi	r30, 0x3E	; 62
    153c:	f9 e8       	ldi	r31, 0x89	; 137
    153e:	de 01       	movw	r26, r28
    1540:	11 96       	adiw	r26, 0x01	; 1
    1542:	01 90       	ld	r0, Z+
    1544:	0d 92       	st	X+, r0
    1546:	8a 95       	dec	r24
    1548:	e1 f7       	brne	.-8      	; 0x1542 <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    154a:	f8 01       	movw	r30, r16
    154c:	01 90       	ld	r0, Z+
    154e:	00 20       	and	r0, r0
    1550:	e9 f7       	brne	.-6      	; 0x154c <checksum_NMEA+0x2c>
    1552:	31 97       	sbiw	r30, 0x01	; 1
    1554:	3e 2f       	mov	r19, r30
    1556:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    1558:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	06 c0       	rjmp	.+12     	; 0x156a <checksum_NMEA+0x4a>
		checksum ^= str[i];
    155e:	f8 01       	movw	r30, r16
    1560:	e8 0f       	add	r30, r24
    1562:	f1 1d       	adc	r31, r1
    1564:	20 81       	ld	r18, Z
    1566:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1568:	8f 5f       	subi	r24, 0xFF	; 255
    156a:	83 17       	cp	r24, r19
    156c:	c0 f3       	brcs	.-16     	; 0x155e <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    156e:	1f 92       	push	r1
    1570:	9f 93       	push	r25
    1572:	ce 01       	movw	r24, r28
    1574:	01 96       	adiw	r24, 0x01	; 1
    1576:	9f 93       	push	r25
    1578:	8f 93       	push	r24
    157a:	7e 01       	movw	r14, r28
    157c:	89 e0       	ldi	r24, 0x09	; 9
    157e:	e8 0e       	add	r14, r24
    1580:	f1 1c       	adc	r15, r1
    1582:	ff 92       	push	r15
    1584:	ef 92       	push	r14
    1586:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
	strcat(str, chksum);
    158a:	b7 01       	movw	r22, r14
    158c:	c8 01       	movw	r24, r16
    158e:	0e 94 2b 23 	call	0x4656	; 0x4656 <strcat>

}
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	2e 96       	adiw	r28, 0x0e	; 14
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	1f 91       	pop	r17
    15aa:	0f 91       	pop	r16
    15ac:	ff 90       	pop	r15
    15ae:	ef 90       	pop	r14
    15b0:	08 95       	ret

000015b2 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
    15b6:	d6 2f       	mov	r29, r22
    15b8:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	0e 94 31 19 	call	0x3262	; 0x3262 <start_TWI>
	write_TWI(type);
    15c0:	8d 2f       	mov	r24, r29
    15c2:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
	write_TWI(byteToSend);
    15c6:	8c 2f       	mov	r24, r28
    15c8:	0e 94 81 19 	call	0x3302	; 0x3302 <write_TWI>
	stop_TWI();
    15cc:	0e 94 7d 19 	call	0x32fa	; 0x32fa <stop_TWI>

}
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	08 95       	ret

000015d6 <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
    15d6:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    15d8:	e0 e6       	ldi	r30, 0x60	; 96
    15da:	f4 e0       	ldi	r31, 0x04	; 4
    15dc:	90 e4       	ldi	r25, 0x40	; 64
    15de:	96 83       	std	Z+6, r25	; 0x06
	PORTD.DIRSET = PIN6_bm;
    15e0:	91 83       	std	Z+1, r25	; 0x01
    15e2:	a1 e4       	ldi	r26, 0x41	; 65
    15e4:	b3 e0       	ldi	r27, 0x03	; 3
    15e6:	11 97       	sbiw	r26, 0x01	; 1
    15e8:	f1 f7       	brne	.-4      	; 0x15e6 <init_OLED+0x10>
    15ea:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    15ec:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
    15ee:	81 11       	cpse	r24, r1
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <init_OLED+0x20>
		twiaddr = OLEDADDR0;
    15f2:	cc e3       	ldi	r28, 0x3C	; 60
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
    15f6:	cd e3       	ldi	r28, 0x3D	; 61
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    15f8:	4a e2       	ldi	r20, 0x2A	; 42
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	8c 2f       	mov	r24, r28
    15fe:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    1602:	41 e7       	ldi	r20, 0x71	; 113
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	8c 2f       	mov	r24, r28
    1608:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    160c:	4c e5       	ldi	r20, 0x5C	; 92
    160e:	60 e4       	ldi	r22, 0x40	; 64
    1610:	8c 2f       	mov	r24, r28
    1612:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1616:	48 e2       	ldi	r20, 0x28	; 40
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	8c 2f       	mov	r24, r28
    161c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    1620:	48 e0       	ldi	r20, 0x08	; 8
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	8c 2f       	mov	r24, r28
    1626:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    162a:	4a e2       	ldi	r20, 0x2A	; 42
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	8c 2f       	mov	r24, r28
    1630:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1634:	49 e7       	ldi	r20, 0x79	; 121
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	8c 2f       	mov	r24, r28
    163a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    163e:	45 ed       	ldi	r20, 0xD5	; 213
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	8c 2f       	mov	r24, r28
    1644:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    1648:	40 e7       	ldi	r20, 0x70	; 112
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	8c 2f       	mov	r24, r28
    164e:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1652:	48 e7       	ldi	r20, 0x78	; 120
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	8c 2f       	mov	r24, r28
    1658:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    165c:	48 e0       	ldi	r20, 0x08	; 8
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	8c 2f       	mov	r24, r28
    1662:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1666:	46 e0       	ldi	r20, 0x06	; 6
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	8c 2f       	mov	r24, r28
    166c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1670:	42 e7       	ldi	r20, 0x72	; 114
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	8c 2f       	mov	r24, r28
    1676:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	60 e4       	ldi	r22, 0x40	; 64
    167e:	8c 2f       	mov	r24, r28
    1680:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1684:	4a e2       	ldi	r20, 0x2A	; 42
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	8c 2f       	mov	r24, r28
    168a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    168e:	49 e7       	ldi	r20, 0x79	; 121
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	8c 2f       	mov	r24, r28
    1694:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    1698:	4a ed       	ldi	r20, 0xDA	; 218
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	8c 2f       	mov	r24, r28
    169e:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    16a2:	40 e0       	ldi	r20, 0x00	; 0
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	8c 2f       	mov	r24, r28
    16a8:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    16ac:	4c ed       	ldi	r20, 0xDC	; 220
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	8c 2f       	mov	r24, r28
    16b2:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    16b6:	40 e0       	ldi	r20, 0x00	; 0
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	8c 2f       	mov	r24, r28
    16bc:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    16c0:	41 e8       	ldi	r20, 0x81	; 129
    16c2:	60 e0       	ldi	r22, 0x00	; 0
    16c4:	8c 2f       	mov	r24, r28
    16c6:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    16ca:	4f e7       	ldi	r20, 0x7F	; 127
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	8c 2f       	mov	r24, r28
    16d0:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    16d4:	49 ed       	ldi	r20, 0xD9	; 217
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	8c 2f       	mov	r24, r28
    16da:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    16de:	41 ef       	ldi	r20, 0xF1	; 241
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	8c 2f       	mov	r24, r28
    16e4:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    16e8:	4b ed       	ldi	r20, 0xDB	; 219
    16ea:	60 e0       	ldi	r22, 0x00	; 0
    16ec:	8c 2f       	mov	r24, r28
    16ee:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    16f2:	40 e4       	ldi	r20, 0x40	; 64
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	8c 2f       	mov	r24, r28
    16f8:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    16fc:	48 e7       	ldi	r20, 0x78	; 120
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	8c 2f       	mov	r24, r28
    1702:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1706:	48 e2       	ldi	r20, 0x28	; 40
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	8c 2f       	mov	r24, r28
    170c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    1710:	41 e0       	ldi	r20, 0x01	; 1
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	8c 2f       	mov	r24, r28
    1716:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    171a:	40 e8       	ldi	r20, 0x80	; 128
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	8c 2f       	mov	r24, r28
    1720:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    1724:	4c e0       	ldi	r20, 0x0C	; 12
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	8c 2f       	mov	r24, r28
    172a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
    172e:	ba e6       	ldi	r27, 0x6A	; 106
    1730:	24 e0       	ldi	r18, 0x04	; 4
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	b1 50       	subi	r27, 0x01	; 1
    1736:	20 40       	sbci	r18, 0x00	; 0
    1738:	80 40       	sbci	r24, 0x00	; 0
    173a:	e1 f7       	brne	.-8      	; 0x1734 <init_OLED+0x15e>
    173c:	00 c0       	rjmp	.+0      	; 0x173e <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
    173e:	10 92 0f 2a 	sts	0x2A0F, r1	; 0x802a0f <timerOLED>
    1742:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <timerOLED+0x1>
	timeoutOLED = 5;
    1746:	85 e0       	ldi	r24, 0x05	; 5
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	80 93 11 2a 	sts	0x2A11, r24	; 0x802a11 <timeoutOLED>
    174e:	90 93 12 2a 	sts	0x2A12, r25	; 0x802a12 <timeoutOLED+0x1>

}
    1752:	cf 91       	pop	r28
    1754:	08 95       	ret

00001756 <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1756:	ef 92       	push	r14
    1758:	ff 92       	push	r15
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	e2 97       	sbiw	r28, 0x32	; 50
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    176e:	91 e1       	ldi	r25, 0x11	; 17
    1770:	e6 e4       	ldi	r30, 0x46	; 70
    1772:	f9 e8       	ldi	r31, 0x89	; 137
    1774:	de 01       	movw	r26, r28
    1776:	92 96       	adiw	r26, 0x22	; 34
    1778:	01 90       	ld	r0, Z+
    177a:	0d 92       	st	X+, r0
    177c:	9a 95       	dec	r25
    177e:	e1 f7       	brne	.-8      	; 0x1778 <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1780:	81 11       	cpse	r24, r1
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1784:	0c e3       	ldi	r16, 0x3C	; 60
    1786:	01 c0       	rjmp	.+2      	; 0x178a <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1788:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    178a:	ce 01       	movw	r24, r28
    178c:	01 96       	adiw	r24, 0x01	; 1
    178e:	7c 01       	movw	r14, r24
    1790:	0e 94 36 23 	call	0x466c	; 0x466c <strcpy>
	if (strlen(strbuf) > 16) {
    1794:	f7 01       	movw	r30, r14
    1796:	01 90       	ld	r0, Z+
    1798:	00 20       	and	r0, r0
    179a:	e9 f7       	brne	.-6      	; 0x1796 <writestr_OLED+0x40>
    179c:	31 97       	sbiw	r30, 0x01	; 1
    179e:	ee 19       	sub	r30, r14
    17a0:	ff 09       	sbc	r31, r15
    17a2:	71 97       	sbiw	r30, 0x11	; 17
    17a4:	08 f0       	brcs	.+2      	; 0x17a8 <writestr_OLED+0x52>
		strbuf[16] = '\0';
    17a6:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    17a8:	be 01       	movw	r22, r28
    17aa:	6e 5d       	subi	r22, 0xDE	; 222
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	ce 01       	movw	r24, r28
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	0e 94 2b 23 	call	0x4656	; 0x4656 <strcat>

	if (lineno == 1) {
    17b6:	11 30       	cpi	r17, 0x01	; 1
    17b8:	39 f4       	brne	.+14     	; 0x17c8 <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    17ba:	40 e8       	ldi	r20, 0x80	; 128
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	80 2f       	mov	r24, r16
    17c0:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    17c4:	10 e0       	ldi	r17, 0x00	; 0
    17c6:	12 c0       	rjmp	.+36     	; 0x17ec <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    17c8:	40 ec       	ldi	r20, 0xC0	; 192
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	80 2f       	mov	r24, r16
    17ce:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>
    17d2:	f8 cf       	rjmp	.-16     	; 0x17c4 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    17d4:	e1 e0       	ldi	r30, 0x01	; 1
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	ec 0f       	add	r30, r28
    17da:	fd 1f       	adc	r31, r29
    17dc:	e1 0f       	add	r30, r17
    17de:	f1 1d       	adc	r31, r1
    17e0:	40 81       	ld	r20, Z
    17e2:	60 e4       	ldi	r22, 0x40	; 64
    17e4:	80 2f       	mov	r24, r16
    17e6:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    17ea:	1f 5f       	subi	r17, 0xFF	; 255
    17ec:	10 31       	cpi	r17, 0x10	; 16
    17ee:	90 f3       	brcs	.-28     	; 0x17d4 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <timerOLED>
    17f8:	90 93 10 2a 	sts	0x2A10, r25	; 0x802a10 <timerOLED+0x1>

}
    17fc:	e2 96       	adiw	r28, 0x32	; 50
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	ff 90       	pop	r15
    180c:	ef 90       	pop	r14
    180e:	08 95       	ret

00001810 <clear_OLED>:
/*------------------------------------------------------------------------------
void clear_OLED(uint8_t displaynumber)
	Clears the OLED screen by writing blank spaces to both lines.
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	61 97       	sbiw	r28, 0x11	; 17
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	18 2f       	mov	r17, r24

	char blanks[] = "                ";	// Does const put this in flash?
    1822:	81 e1       	ldi	r24, 0x11	; 17
    1824:	e6 e4       	ldi	r30, 0x46	; 70
    1826:	f9 e8       	ldi	r31, 0x89	; 137
    1828:	de 01       	movw	r26, r28
    182a:	11 96       	adiw	r26, 0x01	; 1
    182c:	01 90       	ld	r0, Z+
    182e:	0d 92       	st	X+, r0
    1830:	8a 95       	dec	r24
    1832:	e1 f7       	brne	.-8      	; 0x182c <clear_OLED+0x1c>

	writestr_OLED(displaynumber, blanks, 1);
    1834:	41 e0       	ldi	r20, 0x01	; 1
    1836:	be 01       	movw	r22, r28
    1838:	6f 5f       	subi	r22, 0xFF	; 255
    183a:	7f 4f       	sbci	r23, 0xFF	; 255
    183c:	81 2f       	mov	r24, r17
    183e:	0e 94 ab 0b 	call	0x1756	; 0x1756 <writestr_OLED>
	writestr_OLED(displaynumber, blanks, 2);
    1842:	42 e0       	ldi	r20, 0x02	; 2
    1844:	be 01       	movw	r22, r28
    1846:	6f 5f       	subi	r22, 0xFF	; 255
    1848:	7f 4f       	sbci	r23, 0xFF	; 255
    184a:	81 2f       	mov	r24, r17
    184c:	0e 94 ab 0b 	call	0x1756	; 0x1756 <writestr_OLED>
	timerOLED = 0;
    1850:	10 92 0f 2a 	sts	0x2A0F, r1	; 0x802a0f <timerOLED>
    1854:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <timerOLED+0x1>

}
    1858:	61 96       	adiw	r28, 0x11	; 17
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	08 95       	ret

00001866 <init_PNEU>:
*/

uint8_t init_PNEU(void)
{

	if (write_MCP23008(HIGHCURRENT, IODIR, 0x00) == ERROR) {
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	60 e0       	ldi	r22, 0x00	; 0
    186a:	84 e2       	ldi	r24, 0x24	; 36
    186c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <write_MCP23008>
    1870:	83 36       	cpi	r24, 0x63	; 99
    1872:	a9 f1       	breq	.+106    	; 0x18de <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(HIGHCURRENT, OLAT, 0x00) == ERROR) {
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	6a e0       	ldi	r22, 0x0A	; 10
    1878:	84 e2       	ldi	r24, 0x24	; 36
    187a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <write_MCP23008>
    187e:	83 36       	cpi	r24, 0x63	; 99
    1880:	71 f1       	breq	.+92     	; 0x18de <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IODIR, 0xFE) == ERROR) {	// Inputs
    1882:	4e ef       	ldi	r20, 0xFE	; 254
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	81 e2       	ldi	r24, 0x21	; 33
    1888:	0e 94 d7 08 	call	0x11ae	; 0x11ae <write_MCP23008>
    188c:	83 36       	cpi	r24, 0x63	; 99
    188e:	39 f1       	breq	.+78     	; 0x18de <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IPOL, 0x00) == ERROR) {
    1890:	40 e0       	ldi	r20, 0x00	; 0
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	81 e2       	ldi	r24, 0x21	; 33
    1896:	0e 94 d7 08 	call	0x11ae	; 0x11ae <write_MCP23008>
    189a:	83 36       	cpi	r24, 0x63	; 99
    189c:	01 f1       	breq	.+64     	; 0x18de <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100) == ERROR) {
    189e:	4c ef       	ldi	r20, 0xFC	; 252
    18a0:	62 e0       	ldi	r22, 0x02	; 2
    18a2:	81 e2       	ldi	r24, 0x21	; 33
    18a4:	0e 94 d7 08 	call	0x11ae	; 0x11ae <write_MCP23008>
    18a8:	83 36       	cpi	r24, 0x63	; 99
    18aa:	c9 f0       	breq	.+50     	; 0x18de <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, INTCON, 0x00) == ERROR) {
    18ac:	40 e0       	ldi	r20, 0x00	; 0
    18ae:	64 e0       	ldi	r22, 0x04	; 4
    18b0:	81 e2       	ldi	r24, 0x21	; 33
    18b2:	0e 94 d7 08 	call	0x11ae	; 0x11ae <write_MCP23008>
    18b6:	83 36       	cpi	r24, 0x63	; 99
    18b8:	91 f0       	breq	.+36     	; 0x18de <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, IOCON, 0x20) == ERROR) { // Don't increment addr
    18ba:	40 e2       	ldi	r20, 0x20	; 32
    18bc:	65 e0       	ldi	r22, 0x05	; 5
    18be:	81 e2       	ldi	r24, 0x21	; 33
    18c0:	0e 94 d7 08 	call	0x11ae	; 0x11ae <write_MCP23008>
    18c4:	83 36       	cpi	r24, 0x63	; 99
    18c6:	59 f0       	breq	.+22     	; 0x18de <init_PNEU+0x78>
		return(ERROR);
	}
	if (write_MCP23008(PNEUSENSORS, GPPU, 0x7F) == ERROR) { // Pullups (not really needed)
    18c8:	4f e7       	ldi	r20, 0x7F	; 127
    18ca:	66 e0       	ldi	r22, 0x06	; 6
    18cc:	81 e2       	ldi	r24, 0x21	; 33
    18ce:	0e 94 d7 08 	call	0x11ae	; 0x11ae <write_MCP23008>
    18d2:	83 36       	cpi	r24, 0x63	; 99
    18d4:	21 f0       	breq	.+8      	; 0x18de <init_PNEU+0x78>
		return(ERROR);
	}
	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    18d6:	89 e0       	ldi	r24, 0x09	; 9
    18d8:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	return(NOERROR);
    18dc:	80 e0       	ldi	r24, 0x00	; 0

}
    18de:	08 95       	ret

000018e0 <read_PNEUSENSORS>:
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
{
    18e0:	cf 92       	push	r12
    18e2:	df 92       	push	r13
    18e4:	ef 92       	push	r14
    18e6:	ff 92       	push	r15
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	6c 01       	movw	r12, r24
    18f2:	8b 01       	movw	r16, r22
    18f4:	7a 01       	movw	r14, r20
    18f6:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);	// NEEDS ERRORCHECK
    18f8:	69 e0       	ldi	r22, 0x09	; 9
    18fa:	81 e2       	ldi	r24, 0x21	; 33
    18fc:	0e 94 b4 08 	call	0x1168	; 0x1168 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1900:	98 2f       	mov	r25, r24
    1902:	92 95       	swap	r25
    1904:	96 95       	lsr	r25
    1906:	96 95       	lsr	r25
    1908:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    190a:	91 30       	cpi	r25, 0x01	; 1
    190c:	21 f4       	brne	.+8      	; 0x1916 <read_PNEUSENSORS+0x36>
		*shutter = 'c';
    190e:	93 e6       	ldi	r25, 0x63	; 99
    1910:	f6 01       	movw	r30, r12
    1912:	90 83       	st	Z, r25
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <read_PNEUSENSORS+0x54>
	} else if (state == 2) {
    1916:	92 30       	cpi	r25, 0x02	; 2
    1918:	21 f4       	brne	.+8      	; 0x1922 <read_PNEUSENSORS+0x42>
		*shutter = 'o';
    191a:	9f e6       	ldi	r25, 0x6F	; 111
    191c:	f6 01       	movw	r30, r12
    191e:	90 83       	st	Z, r25
    1920:	09 c0       	rjmp	.+18     	; 0x1934 <read_PNEUSENSORS+0x54>
	} else if (state == 3) {
    1922:	93 30       	cpi	r25, 0x03	; 3
    1924:	21 f4       	brne	.+8      	; 0x192e <read_PNEUSENSORS+0x4e>
		*shutter = 't';
    1926:	94 e7       	ldi	r25, 0x74	; 116
    1928:	f6 01       	movw	r30, r12
    192a:	90 83       	st	Z, r25
    192c:	03 c0       	rjmp	.+6      	; 0x1934 <read_PNEUSENSORS+0x54>
	} else {
		*shutter = 'x';
    192e:	98 e7       	ldi	r25, 0x78	; 120
    1930:	f6 01       	movw	r30, r12
    1932:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1934:	98 2f       	mov	r25, r24
    1936:	96 95       	lsr	r25
    1938:	96 95       	lsr	r25
	state &= 0b00000011;
    193a:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    193c:	91 30       	cpi	r25, 0x01	; 1
    193e:	21 f4       	brne	.+8      	; 0x1948 <read_PNEUSENSORS+0x68>
		*right = 'c';
    1940:	93 e6       	ldi	r25, 0x63	; 99
    1942:	f7 01       	movw	r30, r14
    1944:	90 83       	st	Z, r25
    1946:	0f c0       	rjmp	.+30     	; 0x1966 <read_PNEUSENSORS+0x86>
	} else if (state == 2) {
    1948:	92 30       	cpi	r25, 0x02	; 2
    194a:	21 f4       	brne	.+8      	; 0x1954 <read_PNEUSENSORS+0x74>
		*right = 'o';
    194c:	9f e6       	ldi	r25, 0x6F	; 111
    194e:	f7 01       	movw	r30, r14
    1950:	90 83       	st	Z, r25
    1952:	09 c0       	rjmp	.+18     	; 0x1966 <read_PNEUSENSORS+0x86>
	} else if (state == 3) {
    1954:	93 30       	cpi	r25, 0x03	; 3
    1956:	21 f4       	brne	.+8      	; 0x1960 <read_PNEUSENSORS+0x80>
		*right = 't';
    1958:	94 e7       	ldi	r25, 0x74	; 116
    195a:	f7 01       	movw	r30, r14
    195c:	90 83       	st	Z, r25
    195e:	03 c0       	rjmp	.+6      	; 0x1966 <read_PNEUSENSORS+0x86>
	} else {
		*right = 'x';
    1960:	98 e7       	ldi	r25, 0x78	; 120
    1962:	f7 01       	movw	r30, r14
    1964:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1966:	98 2f       	mov	r25, r24
    1968:	92 95       	swap	r25
    196a:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    196c:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    196e:	91 30       	cpi	r25, 0x01	; 1
    1970:	21 f4       	brne	.+8      	; 0x197a <read_PNEUSENSORS+0x9a>
		*left = 'o';
    1972:	9f e6       	ldi	r25, 0x6F	; 111
    1974:	f8 01       	movw	r30, r16
    1976:	90 83       	st	Z, r25
    1978:	0f c0       	rjmp	.+30     	; 0x1998 <read_PNEUSENSORS+0xb8>
	} else if (state == 2) {
    197a:	92 30       	cpi	r25, 0x02	; 2
    197c:	21 f4       	brne	.+8      	; 0x1986 <read_PNEUSENSORS+0xa6>
		*left = 'c';
    197e:	93 e6       	ldi	r25, 0x63	; 99
    1980:	f8 01       	movw	r30, r16
    1982:	90 83       	st	Z, r25
    1984:	09 c0       	rjmp	.+18     	; 0x1998 <read_PNEUSENSORS+0xb8>
	} else if (state == 3) {
    1986:	93 30       	cpi	r25, 0x03	; 3
    1988:	21 f4       	brne	.+8      	; 0x1992 <read_PNEUSENSORS+0xb2>
		*left = 't';
    198a:	94 e7       	ldi	r25, 0x74	; 116
    198c:	f8 01       	movw	r30, r16
    198e:	90 83       	st	Z, r25
    1990:	03 c0       	rjmp	.+6      	; 0x1998 <read_PNEUSENSORS+0xb8>
	} else {
		*left = 'x';
    1992:	98 e7       	ldi	r25, 0x78	; 120
    1994:	f8 01       	movw	r30, r16
    1996:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1998:	81 ff       	sbrs	r24, 1
    199a:	03 c0       	rjmp	.+6      	; 0x19a2 <read_PNEUSENSORS+0xc2>
		*air = '0';
    199c:	80 e3       	ldi	r24, 0x30	; 48
    199e:	88 83       	st	Y, r24
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <read_PNEUSENSORS+0xc6>
	} else {
		*air = '1';
    19a2:	81 e3       	ldi	r24, 0x31	; 49
    19a4:	88 83       	st	Y, r24
	}
}
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	1f 91       	pop	r17
    19ac:	0f 91       	pop	r16
    19ae:	ff 90       	pop	r15
    19b0:	ef 90       	pop	r14
    19b2:	df 90       	pop	r13
    19b4:	cf 90       	pop	r12
    19b6:	08 95       	ret

000019b8 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	d8 2f       	mov	r29, r24
    19be:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    19c0:	69 e0       	ldi	r22, 0x09	; 9
    19c2:	84 e2       	ldi	r24, 0x24	; 36
    19c4:	0e 94 b4 08 	call	0x1168	; 0x1168 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    19c8:	8d 2b       	or	r24, r29
    19ca:	48 2f       	mov	r20, r24
    19cc:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    19ce:	6a e0       	ldi	r22, 0x0A	; 10
    19d0:	84 e2       	ldi	r24, 0x24	; 36
    19d2:	0e 94 d7 08 	call	0x11ae	; 0x11ae <write_MCP23008>
		return(retval);
	}

	return(0);

}
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	08 95       	ret

000019dc <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(uint8_t cstack)
{
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	6a 97       	sbiw	r28, 0x1a	; 26
    19e6:	cd bf       	out	0x3d, r28	; 61
    19e8:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    19ea:	99 e0       	ldi	r25, 0x09	; 9
    19ec:	e1 e9       	ldi	r30, 0x91	; 145
    19ee:	f9 e8       	ldi	r31, 0x89	; 137
    19f0:	de 01       	movw	r26, r28
    19f2:	11 96       	adiw	r26, 0x01	; 1
    19f4:	01 90       	ld	r0, Z+
    19f6:	0d 92       	st	X+, r0
    19f8:	9a 95       	dec	r25
    19fa:	e1 f7       	brne	.-8      	; 0x19f4 <close_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    19fc:	24 e3       	ldi	r18, 0x34	; 52
    19fe:	82 9f       	mul	r24, r18
    1a00:	c0 01       	movw	r24, r0
    1a02:	11 24       	eor	r1, r1
    1a04:	fc 01       	movw	r30, r24
    1a06:	e9 5f       	subi	r30, 0xF9	; 249
    1a08:	f7 4d       	sbci	r31, 0xD7	; 215
    1a0a:	81 81       	ldd	r24, Z+1	; 0x01
    1a0c:	8c 36       	cpi	r24, 0x6C	; 108
    1a0e:	31 f1       	breq	.+76     	; 0x1a5c <close_PNEU+0x80>
    1a10:	18 f4       	brcc	.+6      	; 0x1a18 <close_PNEU+0x3c>
    1a12:	82 36       	cpi	r24, 0x62	; 98
    1a14:	39 f0       	breq	.+14     	; 0x1a24 <close_PNEU+0x48>
    1a16:	6a c0       	rjmp	.+212    	; 0x1aec <close_PNEU+0x110>
    1a18:	82 37       	cpi	r24, 0x72	; 114
    1a1a:	c1 f1       	breq	.+112    	; 0x1a8c <close_PNEU+0xb0>
    1a1c:	83 37       	cpi	r24, 0x73	; 115
    1a1e:	09 f4       	brne	.+2      	; 0x1a22 <close_PNEU+0x46>
    1a20:	4d c0       	rjmp	.+154    	; 0x1abc <close_PNEU+0xe0>
    1a22:	64 c0       	rjmp	.+200    	; 0x1aec <close_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1a24:	6a ee       	ldi	r22, 0xEA	; 234
    1a26:	84 e4       	ldi	r24, 0x44	; 68
    1a28:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1a2c:	66 ee       	ldi	r22, 0xE6	; 230
    1a2e:	88 e8       	ldi	r24, 0x88	; 136
    1a30:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1a34:	87 e5       	ldi	r24, 0x57	; 87
    1a36:	99 e8       	ldi	r25, 0x89	; 137
    1a38:	9f 93       	push	r25
    1a3a:	8f 93       	push	r24
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	9f 93       	push	r25
    1a42:	8f 93       	push	r24
    1a44:	09 96       	adiw	r24, 0x09	; 9
    1a46:	9f 93       	push	r25
    1a48:	8f 93       	push	r24
    1a4a:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
			break;
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	57 c0       	rjmp	.+174    	; 0x1b0a <close_PNEU+0x12e>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1a5c:	6a ee       	ldi	r22, 0xEA	; 234
    1a5e:	84 e4       	ldi	r24, 0x44	; 68
    1a60:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1a64:	8c e5       	ldi	r24, 0x5C	; 92
    1a66:	99 e8       	ldi	r25, 0x89	; 137
    1a68:	9f 93       	push	r25
    1a6a:	8f 93       	push	r24
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	01 96       	adiw	r24, 0x01	; 1
    1a70:	9f 93       	push	r25
    1a72:	8f 93       	push	r24
    1a74:	09 96       	adiw	r24, 0x09	; 9
    1a76:	9f 93       	push	r25
    1a78:	8f 93       	push	r24
    1a7a:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
			break;
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	3f c0       	rjmp	.+126    	; 0x1b0a <close_PNEU+0x12e>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1a8c:	66 ee       	ldi	r22, 0xE6	; 230
    1a8e:	88 e8       	ldi	r24, 0x88	; 136
    1a90:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1a94:	81 e6       	ldi	r24, 0x61	; 97
    1a96:	99 e8       	ldi	r25, 0x89	; 137
    1a98:	9f 93       	push	r25
    1a9a:	8f 93       	push	r24
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	9f 93       	push	r25
    1aa2:	8f 93       	push	r24
    1aa4:	09 96       	adiw	r24, 0x09	; 9
    1aa6:	9f 93       	push	r25
    1aa8:	8f 93       	push	r24
    1aaa:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
			break;
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	27 c0       	rjmp	.+78     	; 0x1b0a <close_PNEU+0x12e>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1abc:	6c ee       	ldi	r22, 0xEC	; 236
    1abe:	82 e2       	ldi	r24, 0x22	; 34
    1ac0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1ac4:	87 e6       	ldi	r24, 0x67	; 103
    1ac6:	99 e8       	ldi	r25, 0x89	; 137
    1ac8:	9f 93       	push	r25
    1aca:	8f 93       	push	r24
    1acc:	ce 01       	movw	r24, r28
    1ace:	01 96       	adiw	r24, 0x01	; 1
    1ad0:	9f 93       	push	r25
    1ad2:	8f 93       	push	r24
    1ad4:	09 96       	adiw	r24, 0x09	; 9
    1ad6:	9f 93       	push	r25
    1ad8:	8f 93       	push	r24
    1ada:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
			break;
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f c0       	rjmp	.+30     	; 0x1b0a <close_PNEU+0x12e>

		default:
			printError(ERR_PNUMECH, "close_PNEU bad object");
    1aec:	6f e6       	ldi	r22, 0x6F	; 111
    1aee:	79 e8       	ldi	r23, 0x89	; 137
    1af0:	85 ef       	ldi	r24, 0xF5	; 245
    1af2:	91 e0       	ldi	r25, 0x01	; 1
    1af4:	0e 94 9a 06 	call	0xd34	; 0xd34 <printError>
			strcpy(outbuf, "close what?");
    1af8:	8c e0       	ldi	r24, 0x0C	; 12
    1afa:	e5 e8       	ldi	r30, 0x85	; 133
    1afc:	f9 e8       	ldi	r31, 0x89	; 137
    1afe:	de 01       	movw	r26, r28
    1b00:	1a 96       	adiw	r26, 0x0a	; 10
    1b02:	01 90       	ld	r0, Z+
    1b04:	0d 92       	st	X+, r0
    1b06:	8a 95       	dec	r24
    1b08:	e1 f7       	brne	.-8      	; 0x1b02 <close_PNEU+0x126>
			break;

	}

	clear_OLED(1);
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	0e 94 08 0c 	call	0x1810	; 0x1810 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1b10:	41 e0       	ldi	r20, 0x01	; 1
    1b12:	be 01       	movw	r22, r28
    1b14:	66 5f       	subi	r22, 0xF6	; 246
    1b16:	7f 4f       	sbci	r23, 0xFF	; 255
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	0e 94 ab 0b 	call	0x1756	; 0x1756 <writestr_OLED>
	return(GREATERPROMPT);

}
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	6a 96       	adiw	r28, 0x1a	; 26
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	08 95       	ret

00001b2c <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(uint8_t cstack)
{
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	69 97       	sbiw	r28, 0x19	; 25
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	de bf       	out	0x3e, r29	; 62

	const char dformat_OPE[] = "Open %s";
    1b3a:	98 e0       	ldi	r25, 0x08	; 8
    1b3c:	ea eb       	ldi	r30, 0xBA	; 186
    1b3e:	f9 e8       	ldi	r31, 0x89	; 137
    1b40:	de 01       	movw	r26, r28
    1b42:	11 96       	adiw	r26, 0x01	; 1
    1b44:	01 90       	ld	r0, Z+
    1b46:	0d 92       	st	X+, r0
    1b48:	9a 95       	dec	r25
    1b4a:	e1 f7       	brne	.-8      	; 0x1b44 <open_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1b4c:	24 e3       	ldi	r18, 0x34	; 52
    1b4e:	82 9f       	mul	r24, r18
    1b50:	c0 01       	movw	r24, r0
    1b52:	11 24       	eor	r1, r1
    1b54:	fc 01       	movw	r30, r24
    1b56:	e9 5f       	subi	r30, 0xF9	; 249
    1b58:	f7 4d       	sbci	r31, 0xD7	; 215
    1b5a:	81 81       	ldd	r24, Z+1	; 0x01
    1b5c:	8c 36       	cpi	r24, 0x6C	; 108
    1b5e:	31 f1       	breq	.+76     	; 0x1bac <open_PNEU+0x80>
    1b60:	18 f4       	brcc	.+6      	; 0x1b68 <open_PNEU+0x3c>
    1b62:	82 36       	cpi	r24, 0x62	; 98
    1b64:	39 f0       	breq	.+14     	; 0x1b74 <open_PNEU+0x48>
    1b66:	6a c0       	rjmp	.+212    	; 0x1c3c <open_PNEU+0x110>
    1b68:	82 37       	cpi	r24, 0x72	; 114
    1b6a:	c1 f1       	breq	.+112    	; 0x1bdc <open_PNEU+0xb0>
    1b6c:	83 37       	cpi	r24, 0x73	; 115
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <open_PNEU+0x46>
    1b70:	4d c0       	rjmp	.+154    	; 0x1c0c <open_PNEU+0xe0>
    1b72:	64 c0       	rjmp	.+200    	; 0x1c3c <open_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1b74:	6e ea       	ldi	r22, 0xAE	; 174
    1b76:	84 e4       	ldi	r24, 0x44	; 68
    1b78:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1b7c:	6e e6       	ldi	r22, 0x6E	; 110
    1b7e:	88 e8       	ldi	r24, 0x88	; 136
    1b80:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1b84:	87 e5       	ldi	r24, 0x57	; 87
    1b86:	99 e8       	ldi	r25, 0x89	; 137
    1b88:	9f 93       	push	r25
    1b8a:	8f 93       	push	r24
    1b8c:	ce 01       	movw	r24, r28
    1b8e:	01 96       	adiw	r24, 0x01	; 1
    1b90:	9f 93       	push	r25
    1b92:	8f 93       	push	r24
    1b94:	08 96       	adiw	r24, 0x08	; 8
    1b96:	9f 93       	push	r25
    1b98:	8f 93       	push	r24
    1b9a:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
			break;
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	57 c0       	rjmp	.+174    	; 0x1c5a <open_PNEU+0x12e>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1bac:	6e ea       	ldi	r22, 0xAE	; 174
    1bae:	84 e4       	ldi	r24, 0x44	; 68
    1bb0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1bb4:	8c e5       	ldi	r24, 0x5C	; 92
    1bb6:	99 e8       	ldi	r25, 0x89	; 137
    1bb8:	9f 93       	push	r25
    1bba:	8f 93       	push	r24
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	01 96       	adiw	r24, 0x01	; 1
    1bc0:	9f 93       	push	r25
    1bc2:	8f 93       	push	r24
    1bc4:	08 96       	adiw	r24, 0x08	; 8
    1bc6:	9f 93       	push	r25
    1bc8:	8f 93       	push	r24
    1bca:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
			break;
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	3f c0       	rjmp	.+126    	; 0x1c5a <open_PNEU+0x12e>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1bdc:	6e e6       	ldi	r22, 0x6E	; 110
    1bde:	88 e8       	ldi	r24, 0x88	; 136
    1be0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1be4:	81 e6       	ldi	r24, 0x61	; 97
    1be6:	99 e8       	ldi	r25, 0x89	; 137
    1be8:	9f 93       	push	r25
    1bea:	8f 93       	push	r24
    1bec:	ce 01       	movw	r24, r28
    1bee:	01 96       	adiw	r24, 0x01	; 1
    1bf0:	9f 93       	push	r25
    1bf2:	8f 93       	push	r24
    1bf4:	08 96       	adiw	r24, 0x08	; 8
    1bf6:	9f 93       	push	r25
    1bf8:	8f 93       	push	r24
    1bfa:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
			break;
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	27 c0       	rjmp	.+78     	; 0x1c5a <open_PNEU+0x12e>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1c0c:	6e ec       	ldi	r22, 0xCE	; 206
    1c0e:	82 e2       	ldi	r24, 0x22	; 34
    1c10:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1c14:	87 e6       	ldi	r24, 0x67	; 103
    1c16:	99 e8       	ldi	r25, 0x89	; 137
    1c18:	9f 93       	push	r25
    1c1a:	8f 93       	push	r24
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	9f 93       	push	r25
    1c22:	8f 93       	push	r24
    1c24:	08 96       	adiw	r24, 0x08	; 8
    1c26:	9f 93       	push	r25
    1c28:	8f 93       	push	r24
    1c2a:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
			break;
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <open_PNEU+0x12e>

		default:
			printError(ERR_PNUMECH, "open_PNEU bad object");
    1c3c:	6a e9       	ldi	r22, 0x9A	; 154
    1c3e:	79 e8       	ldi	r23, 0x89	; 137
    1c40:	85 ef       	ldi	r24, 0xF5	; 245
    1c42:	91 e0       	ldi	r25, 0x01	; 1
    1c44:	0e 94 9a 06 	call	0xd34	; 0xd34 <printError>
			strcpy(outbuf, "open what?");
    1c48:	8b e0       	ldi	r24, 0x0B	; 11
    1c4a:	ef ea       	ldi	r30, 0xAF	; 175
    1c4c:	f9 e8       	ldi	r31, 0x89	; 137
    1c4e:	de 01       	movw	r26, r28
    1c50:	19 96       	adiw	r26, 0x09	; 9
    1c52:	01 90       	ld	r0, Z+
    1c54:	0d 92       	st	X+, r0
    1c56:	8a 95       	dec	r24
    1c58:	e1 f7       	brne	.-8      	; 0x1c52 <open_PNEU+0x126>
			break;

	}

	clear_OLED(1);
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	0e 94 08 0c 	call	0x1810	; 0x1810 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1c60:	41 e0       	ldi	r20, 0x01	; 1
    1c62:	be 01       	movw	r22, r28
    1c64:	67 5f       	subi	r22, 0xF7	; 247
    1c66:	7f 4f       	sbci	r23, 0xFF	; 255
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	0e 94 ab 0b 	call	0x1756	; 0x1756 <writestr_OLED>
	return(GREATERPROMPT);

}
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	69 96       	adiw	r28, 0x19	; 25
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	08 95       	ret

00001c7c <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1c7c:	1f 92       	push	r1
    1c7e:	0f 92       	push	r0
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	0f 92       	push	r0
    1c84:	11 24       	eor	r1, r1
    1c86:	2f 93       	push	r18
    1c88:	3f 93       	push	r19
    1c8a:	4f 93       	push	r20
    1c8c:	5f 93       	push	r21
    1c8e:	6f 93       	push	r22
    1c90:	7f 93       	push	r23
    1c92:	8f 93       	push	r24
    1c94:	9f 93       	push	r25
    1c96:	af 93       	push	r26
    1c98:	bf 93       	push	r27
    1c9a:	ef 93       	push	r30
    1c9c:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1c9e:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1ca2:	88 23       	and	r24, r24
    1ca4:	4c f4       	brge	.+18     	; 0x1cb8 <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1ca6:	80 e8       	ldi	r24, 0x80	; 128
    1ca8:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1cac:	68 e0       	ldi	r22, 0x08	; 8
    1cae:	81 e2       	ldi	r24, 0x21	; 33
    1cb0:	0e 94 b4 08 	call	0x1168	; 0x1168 <read_MCP23008>
    1cb4:	80 93 13 2a 	sts	0x2A13, r24	; 0x802a13 <pneuState>
	}

}
    1cb8:	ff 91       	pop	r31
    1cba:	ef 91       	pop	r30
    1cbc:	bf 91       	pop	r27
    1cbe:	af 91       	pop	r26
    1cc0:	9f 91       	pop	r25
    1cc2:	8f 91       	pop	r24
    1cc4:	7f 91       	pop	r23
    1cc6:	6f 91       	pop	r22
    1cc8:	5f 91       	pop	r21
    1cca:	4f 91       	pop	r20
    1ccc:	3f 91       	pop	r19
    1cce:	2f 91       	pop	r18
    1cd0:	0f 90       	pop	r0
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	0f 90       	pop	r0
    1cd6:	1f 90       	pop	r1
    1cd8:	18 95       	reti

00001cda <init_PORTS>:
	sure nothing lurks in the background by accident.
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
    1cda:	e0 e0       	ldi	r30, 0x00	; 0
    1cdc:	f4 e0       	ldi	r31, 0x04	; 4
    1cde:	88 e0       	ldi	r24, 0x08	; 8
    1ce0:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
    1ce2:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
    1ce4:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
    1ce6:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
    1ce8:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    1cea:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    1cec:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
    1cee:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
    1cf0:	e0 e2       	ldi	r30, 0x20	; 32
    1cf2:	f4 e0       	ldi	r31, 0x04	; 4
    1cf4:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
    1cf6:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
    1cf8:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
    1cfa:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
    1cfc:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
    1cfe:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
    1d00:	e0 e4       	ldi	r30, 0x40	; 64
    1d02:	f4 e0       	ldi	r31, 0x04	; 4
    1d04:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
    1d06:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
    1d08:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
    1d0a:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
    1d0c:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
    1d0e:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
    1d10:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
    1d12:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d14:	e0 e6       	ldi	r30, 0x60	; 96
    1d16:	f4 e0       	ldi	r31, 0x04	; 4
    1d18:	94 e0       	ldi	r25, 0x04	; 4
    1d1a:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d1c:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d1e:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d20:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d22:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d24:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d26:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1d28:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
    1d2a:	e0 e8       	ldi	r30, 0x80	; 128
    1d2c:	f4 e0       	ldi	r31, 0x04	; 4
    1d2e:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
    1d30:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
    1d32:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
    1d34:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
    1d36:	e0 ea       	ldi	r30, 0xA0	; 160
    1d38:	f4 e0       	ldi	r31, 0x04	; 4
    1d3a:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
    1d3c:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
    1d3e:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
    1d40:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
    1d42:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
    1d44:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
    1d46:	86 8b       	std	Z+22, r24	; 0x16
    1d48:	08 95       	ret

00001d4a <report>:
	Returns
		0 - GREATERPROMPT on success
		1 - ERRORPROMPT on error (invalid command noun)
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1d4a:	2f 92       	push	r2
    1d4c:	3f 92       	push	r3
    1d4e:	4f 92       	push	r4
    1d50:	5f 92       	push	r5
    1d52:	6f 92       	push	r6
    1d54:	7f 92       	push	r7
    1d56:	8f 92       	push	r8
    1d58:	9f 92       	push	r9
    1d5a:	af 92       	push	r10
    1d5c:	bf 92       	push	r11
    1d5e:	cf 92       	push	r12
    1d60:	df 92       	push	r13
    1d62:	ef 92       	push	r14
    1d64:	ff 92       	push	r15
    1d66:	0f 93       	push	r16
    1d68:	1f 93       	push	r17
    1d6a:	cf 93       	push	r28
    1d6c:	df 93       	push	r29
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	ca 5f       	subi	r28, 0xFA	; 250
    1d74:	d2 40       	sbci	r29, 0x02	; 2
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE+10], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	char shutter, left, right, air;
//	const char format_ENV[] = "$S%dENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
	const char format_ENV[] = "ENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
    1d7a:	95 e4       	ldi	r25, 0x45	; 69
    1d7c:	e0 e2       	ldi	r30, 0x20	; 32
    1d7e:	fa e8       	ldi	r31, 0x8A	; 138
    1d80:	de 01       	movw	r26, r28
    1d82:	ab 5a       	subi	r26, 0xAB	; 171
    1d84:	be 4f       	sbci	r27, 0xFE	; 254
    1d86:	01 90       	ld	r0, Z+
    1d88:	0d 92       	st	X+, r0
    1d8a:	9a 95       	dec	r25
    1d8c:	e1 f7       	brne	.-8      	; 0x1d86 <report+0x3c>
//	const char format_MTR[] = "$S%dMTR,%s,%c,%ld,microns,%ld,microns/sec,%d,mA,%s";
	const char format_MTR[] = "MTR,%s,%c,%ld,microns,%ld,microns/sec,%d,mA,%s";
    1d8e:	9f e2       	ldi	r25, 0x2F	; 47
    1d90:	e5 e6       	ldi	r30, 0x65	; 101
    1d92:	fa e8       	ldi	r31, 0x8A	; 138
    1d94:	de 01       	movw	r26, r28
    1d96:	a6 56       	subi	r26, 0x66	; 102
    1d98:	be 4f       	sbci	r27, 0xFE	; 254
    1d9a:	01 90       	ld	r0, Z+
    1d9c:	0d 92       	st	X+, r0
    1d9e:	9a 95       	dec	r25
    1da0:	e1 f7       	brne	.-8      	; 0x1d9a <report+0x50>
//	const char format1_MTR[] = "$S%dMTR,%s,%c,%3.1f,V,%3.1f,C,%s";
	const char format_MTV[] = "MTV,%s,%c,%3.1f,V,%3.1f,C,%s";
    1da2:	9d e1       	ldi	r25, 0x1D	; 29
    1da4:	e4 e9       	ldi	r30, 0x94	; 148
    1da6:	fa e8       	ldi	r31, 0x8A	; 138
    1da8:	de 01       	movw	r26, r28
    1daa:	a7 53       	subi	r26, 0x37	; 55
    1dac:	be 4f       	sbci	r27, 0xFE	; 254
    1dae:	01 90       	ld	r0, Z+
    1db0:	0d 92       	st	X+, r0
    1db2:	9a 95       	dec	r25
    1db4:	e1 f7       	brne	.-8      	; 0x1dae <report+0x64>
	const char format_ORI[] = "$S%dORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1db6:	90 e2       	ldi	r25, 0x20	; 32
    1db8:	e1 eb       	ldi	r30, 0xB1	; 177
    1dba:	fa e8       	ldi	r31, 0x8A	; 138
    1dbc:	de 01       	movw	r26, r28
    1dbe:	aa 51       	subi	r26, 0x1A	; 26
    1dc0:	be 4f       	sbci	r27, 0xFE	; 254
    1dc2:	01 90       	ld	r0, Z+
    1dc4:	0d 92       	st	X+, r0
    1dc6:	9a 95       	dec	r25
    1dc8:	e1 f7       	brne	.-8      	; 0x1dc2 <report+0x78>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1dca:	92 e1       	ldi	r25, 0x12	; 18
    1dcc:	e1 ed       	ldi	r30, 0xD1	; 209
    1dce:	fa e8       	ldi	r31, 0x8A	; 138
    1dd0:	de 01       	movw	r26, r28
    1dd2:	aa 5f       	subi	r26, 0xFA	; 250
    1dd4:	bd 4f       	sbci	r27, 0xFD	; 253
    1dd6:	01 90       	ld	r0, Z+
    1dd8:	0d 92       	st	X+, r0
    1dda:	9a 95       	dec	r25
    1ddc:	e1 f7       	brne	.-8      	; 0x1dd6 <report+0x8c>
//	const char format_PNU[] = "$S%dPNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
	const char format_PNU[] = "PNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1dde:	9d e2       	ldi	r25, 0x2D	; 45
    1de0:	e3 ee       	ldi	r30, 0xE3	; 227
    1de2:	fa e8       	ldi	r31, 0x8A	; 138
    1de4:	de 01       	movw	r26, r28
    1de6:	a8 5e       	subi	r26, 0xE8	; 232
    1de8:	bd 4f       	sbci	r27, 0xFD	; 253
    1dea:	01 90       	ld	r0, Z+
    1dec:	0d 92       	st	X+, r0
    1dee:	9a 95       	dec	r25
    1df0:	e1 f7       	brne	.-8      	; 0x1dea <report+0xa0>
	const char dformat_PN1[] = "left:%c   right:%c";
    1df2:	93 e1       	ldi	r25, 0x13	; 19
    1df4:	e0 e1       	ldi	r30, 0x10	; 16
    1df6:	fb e8       	ldi	r31, 0x8B	; 139
    1df8:	de 01       	movw	r26, r28
    1dfa:	ab 5b       	subi	r26, 0xBB	; 187
    1dfc:	bd 4f       	sbci	r27, 0xFD	; 253
    1dfe:	01 90       	ld	r0, Z+
    1e00:	0d 92       	st	X+, r0
    1e02:	9a 95       	dec	r25
    1e04:	e1 f7       	brne	.-8      	; 0x1dfe <report+0xb4>
	const char dformat_PN2[] = "shutter:%c  air:%c";
    1e06:	93 e1       	ldi	r25, 0x13	; 19
    1e08:	e3 e2       	ldi	r30, 0x23	; 35
    1e0a:	fb e8       	ldi	r31, 0x8B	; 139
    1e0c:	de 01       	movw	r26, r28
    1e0e:	a8 5a       	subi	r26, 0xA8	; 168
    1e10:	bd 4f       	sbci	r27, 0xFD	; 253
    1e12:	01 90       	ld	r0, Z+
    1e14:	0d 92       	st	X+, r0
    1e16:	9a 95       	dec	r25
    1e18:	e1 f7       	brne	.-8      	; 0x1e12 <report+0xc8>
	const char format_TIM[] = "$S%dTIM,%s,%s,set,%s,boot,%s";
    1e1a:	9d e1       	ldi	r25, 0x1D	; 29
    1e1c:	e6 e3       	ldi	r30, 0x36	; 54
    1e1e:	fb e8       	ldi	r31, 0x8B	; 139
    1e20:	de 01       	movw	r26, r28
    1e22:	a5 59       	subi	r26, 0x95	; 149
    1e24:	bd 4f       	sbci	r27, 0xFD	; 253
    1e26:	01 90       	ld	r0, Z+
    1e28:	0d 92       	st	X+, r0
    1e2a:	9a 95       	dec	r25
    1e2c:	e1 f7       	brne	.-8      	; 0x1e26 <report+0xdc>
	const char format_VAC[] = "$S%dVAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1e2e:	99 e2       	ldi	r25, 0x29	; 41
    1e30:	e3 e5       	ldi	r30, 0x53	; 83
    1e32:	fb e8       	ldi	r31, 0x8B	; 139
    1e34:	de 01       	movw	r26, r28
    1e36:	a8 57       	subi	r26, 0x78	; 120
    1e38:	bd 4f       	sbci	r27, 0xFD	; 253
    1e3a:	01 90       	ld	r0, Z+
    1e3c:	0d 92       	st	X+, r0
    1e3e:	9a 95       	dec	r25
    1e40:	e1 f7       	brne	.-8      	; 0x1e3a <report+0xf0>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1e42:	9d e0       	ldi	r25, 0x0D	; 13
    1e44:	ec e7       	ldi	r30, 0x7C	; 124
    1e46:	fb e8       	ldi	r31, 0x8B	; 139
    1e48:	de 01       	movw	r26, r28
    1e4a:	af 54       	subi	r26, 0x4F	; 79
    1e4c:	bd 4f       	sbci	r27, 0xFD	; 253
    1e4e:	01 90       	ld	r0, Z+
    1e50:	0d 92       	st	X+, r0
    1e52:	9a 95       	dec	r25
    1e54:	e1 f7       	brne	.-8      	; 0x1e4e <report+0x104>
	const char format_VER[] = "$S%dVER,%s,%s,%s";
    1e56:	91 e1       	ldi	r25, 0x11	; 17
    1e58:	e9 e8       	ldi	r30, 0x89	; 137
    1e5a:	fb e8       	ldi	r31, 0x8B	; 139
    1e5c:	de 01       	movw	r26, r28
    1e5e:	a2 54       	subi	r26, 0x42	; 66
    1e60:	bd 4f       	sbci	r27, 0xFD	; 253
    1e62:	01 90       	ld	r0, Z+
    1e64:	0d 92       	st	X+, r0
    1e66:	9a 95       	dec	r25
    1e68:	e1 f7       	brne	.-8      	; 0x1e62 <report+0x118>
	float voltage;							// voltage
	uint16_t current;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum

	switch(pcmd[cstack].cobject) {
    1e6a:	08 2f       	mov	r16, r24
    1e6c:	10 e0       	ldi	r17, 0x00	; 0
    1e6e:	84 e3       	ldi	r24, 0x34	; 52
    1e70:	80 9f       	mul	r24, r16
    1e72:	f0 01       	movw	r30, r0
    1e74:	81 9f       	mul	r24, r17
    1e76:	f0 0d       	add	r31, r0
    1e78:	11 24       	eor	r1, r1
    1e7a:	e9 5f       	subi	r30, 0xF9	; 249
    1e7c:	f7 4d       	sbci	r31, 0xD7	; 215
    1e7e:	e1 81       	ldd	r30, Z+1	; 0x01
    1e80:	8e 2f       	mov	r24, r30
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	fc 01       	movw	r30, r24
    1e86:	e1 54       	subi	r30, 0x41	; 65
    1e88:	f1 09       	sbc	r31, r1
    1e8a:	e6 33       	cpi	r30, 0x36	; 54
    1e8c:	f1 05       	cpc	r31, r1
    1e8e:	08 f0       	brcs	.+2      	; 0x1e92 <report+0x148>
    1e90:	21 c5       	rjmp	.+2626   	; 0x28d4 <report+0xb8a>
    1e92:	ed 58       	subi	r30, 0x8D	; 141
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	0c 94 9a 21 	jmp	0x4334	; 0x4334 <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    1e9a:	ce 01       	movw	r24, r28
    1e9c:	8b 5e       	subi	r24, 0xEB	; 235
    1e9e:	9e 4f       	sbci	r25, 0xFE	; 254
    1ea0:	0e 94 d6 05 	call	0xbac	; 0xbac <get_time>
			controller = pcmd[cstack].cobject + 63;
    1ea4:	84 e3       	ldi	r24, 0x34	; 52
    1ea6:	80 9f       	mul	r24, r16
    1ea8:	f0 01       	movw	r30, r0
    1eaa:	81 9f       	mul	r24, r17
    1eac:	f0 0d       	add	r31, r0
    1eae:	11 24       	eor	r1, r1
    1eb0:	e9 5f       	subi	r30, 0xF9	; 249
    1eb2:	f7 4d       	sbci	r31, 0xD7	; 215
    1eb4:	e1 80       	ldd	r14, Z+1	; 0x01
    1eb6:	0f 2e       	mov	r0, r31
    1eb8:	ff e3       	ldi	r31, 0x3F	; 63
    1eba:	ff 2e       	mov	r15, r31
    1ebc:	f0 2d       	mov	r31, r0
    1ebe:	fe 0c       	add	r15, r14
			retval = get_MOTORFloat(controller, ROBOREADMAINVOLTAGE, &voltage);
    1ec0:	ae 01       	movw	r20, r28
    1ec2:	41 52       	subi	r20, 0x21	; 33
    1ec4:	5d 4f       	sbci	r21, 0xFD	; 253
    1ec6:	68 e1       	ldi	r22, 0x18	; 24
    1ec8:	8f 2d       	mov	r24, r15
    1eca:	0e 94 5d 15 	call	0x2aba	; 0x2aba <get_MOTORFloat>
			if (retval == ERROR) {
    1ece:	83 36       	cpi	r24, 0x63	; 99
    1ed0:	61 f4       	brne	.+24     	; 0x1eea <report+0x1a0>
				voltage = -666.0;
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	90 e8       	ldi	r25, 0x80	; 128
    1ed6:	a6 e2       	ldi	r26, 0x26	; 38
    1ed8:	b4 ec       	ldi	r27, 0xC4	; 196
    1eda:	c1 52       	subi	r28, 0x21	; 33
    1edc:	dd 4f       	sbci	r29, 0xFD	; 253
    1ede:	88 83       	st	Y, r24
    1ee0:	99 83       	std	Y+1, r25	; 0x01
    1ee2:	aa 83       	std	Y+2, r26	; 0x02
    1ee4:	bb 83       	std	Y+3, r27	; 0x03
    1ee6:	cf 5d       	subi	r28, 0xDF	; 223
    1ee8:	d2 40       	sbci	r29, 0x02	; 2
			}
			retval = get_MOTORFloat(controller, ROBOREADTEMPERATURE, &t0);
    1eea:	ae 01       	movw	r20, r28
    1eec:	45 52       	subi	r20, 0x25	; 37
    1eee:	5d 4f       	sbci	r21, 0xFD	; 253
    1ef0:	62 e5       	ldi	r22, 0x52	; 82
    1ef2:	8f 2d       	mov	r24, r15
    1ef4:	0e 94 5d 15 	call	0x2aba	; 0x2aba <get_MOTORFloat>
			if (retval == ERROR) {
    1ef8:	83 36       	cpi	r24, 0x63	; 99
    1efa:	61 f4       	brne	.+24     	; 0x1f14 <report+0x1ca>
				t0 = -666.0;
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e8       	ldi	r25, 0x80	; 128
    1f00:	a6 e2       	ldi	r26, 0x26	; 38
    1f02:	b4 ec       	ldi	r27, 0xC4	; 196
    1f04:	c5 52       	subi	r28, 0x25	; 37
    1f06:	dd 4f       	sbci	r29, 0xFD	; 253
    1f08:	88 83       	st	Y, r24
    1f0a:	99 83       	std	Y+1, r25	; 0x01
    1f0c:	aa 83       	std	Y+2, r26	; 0x02
    1f0e:	bb 83       	std	Y+3, r27	; 0x03
    1f10:	cb 5d       	subi	r28, 0xDB	; 219
    1f12:	d2 40       	sbci	r29, 0x02	; 2
//			sprintf(outbuf, format1_MTR, get_SPECID, currenttime, (char) (controller-63),
//				voltage, t0, pcmd[cstack].cid);
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
    1f14:	24 e3       	ldi	r18, 0x34	; 52
    1f16:	20 9f       	mul	r18, r16
    1f18:	c0 01       	movw	r24, r0
    1f1a:	21 9f       	mul	r18, r17
    1f1c:	90 0d       	add	r25, r0
    1f1e:	11 24       	eor	r1, r1
    1f20:	8e 5c       	subi	r24, 0xCE	; 206
    1f22:	97 4d       	sbci	r25, 0xD7	; 215
			}
//			sprintf(outbuf, format1_MTR, get_SPECID, currenttime, (char) (controller-63),
//				voltage, t0, pcmd[cstack].cid);
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
    1f24:	9f 93       	push	r25
    1f26:	8f 93       	push	r24
    1f28:	c2 52       	subi	r28, 0x22	; 34
    1f2a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f2c:	88 81       	ld	r24, Y
    1f2e:	ce 5d       	subi	r28, 0xDE	; 222
    1f30:	d2 40       	sbci	r29, 0x02	; 2
    1f32:	8f 93       	push	r24
    1f34:	c3 52       	subi	r28, 0x23	; 35
    1f36:	dd 4f       	sbci	r29, 0xFD	; 253
    1f38:	88 81       	ld	r24, Y
    1f3a:	cd 5d       	subi	r28, 0xDD	; 221
    1f3c:	d2 40       	sbci	r29, 0x02	; 2
    1f3e:	8f 93       	push	r24
    1f40:	c4 52       	subi	r28, 0x24	; 36
    1f42:	dd 4f       	sbci	r29, 0xFD	; 253
    1f44:	88 81       	ld	r24, Y
    1f46:	cc 5d       	subi	r28, 0xDC	; 220
    1f48:	d2 40       	sbci	r29, 0x02	; 2
    1f4a:	8f 93       	push	r24
    1f4c:	c5 52       	subi	r28, 0x25	; 37
    1f4e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f50:	88 81       	ld	r24, Y
    1f52:	cb 5d       	subi	r28, 0xDB	; 219
    1f54:	d2 40       	sbci	r29, 0x02	; 2
    1f56:	8f 93       	push	r24
    1f58:	ce 51       	subi	r28, 0x1E	; 30
    1f5a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f5c:	88 81       	ld	r24, Y
    1f5e:	c2 5e       	subi	r28, 0xE2	; 226
    1f60:	d2 40       	sbci	r29, 0x02	; 2
    1f62:	8f 93       	push	r24
    1f64:	cf 51       	subi	r28, 0x1F	; 31
    1f66:	dd 4f       	sbci	r29, 0xFD	; 253
    1f68:	88 81       	ld	r24, Y
    1f6a:	c1 5e       	subi	r28, 0xE1	; 225
    1f6c:	d2 40       	sbci	r29, 0x02	; 2
    1f6e:	8f 93       	push	r24
    1f70:	c0 52       	subi	r28, 0x20	; 32
    1f72:	dd 4f       	sbci	r29, 0xFD	; 253
    1f74:	88 81       	ld	r24, Y
    1f76:	c0 5e       	subi	r28, 0xE0	; 224
    1f78:	d2 40       	sbci	r29, 0x02	; 2
    1f7a:	8f 93       	push	r24
    1f7c:	c1 52       	subi	r28, 0x21	; 33
    1f7e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f80:	88 81       	ld	r24, Y
    1f82:	cf 5d       	subi	r28, 0xDF	; 223
    1f84:	d2 40       	sbci	r29, 0x02	; 2
    1f86:	8f 93       	push	r24
    1f88:	1f 92       	push	r1
    1f8a:	ef 92       	push	r14
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	8b 5e       	subi	r24, 0xEB	; 235
    1f90:	9e 4f       	sbci	r25, 0xFE	; 254
    1f92:	9f 93       	push	r25
    1f94:	8f 93       	push	r24
    1f96:	8c 54       	subi	r24, 0x4C	; 76
    1f98:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9a:	9f 93       	push	r25
    1f9c:	8f 93       	push	r24
    1f9e:	8e 01       	movw	r16, r28
    1fa0:	0f 5f       	subi	r16, 0xFF	; 255
    1fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa4:	1f 93       	push	r17
    1fa6:	0f 93       	push	r16
    1fa8:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
				voltage, t0, pcmd[cstack].cid);
			printLine(outbuf);
    1fac:	c8 01       	movw	r24, r16
    1fae:	0e 94 12 04 	call	0x824	; 0x824 <printLine>
			break;
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	94 c4       	rjmp	.+2344   	; 0x28e0 <report+0xb96>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    1fb8:	ce 01       	movw	r24, r28
    1fba:	8b 5e       	subi	r24, 0xEB	; 235
    1fbc:	9e 4f       	sbci	r25, 0xFE	; 254
    1fbe:	0e 94 d6 05 	call	0xbac	; 0xbac <get_time>
			controller = pcmd[cstack].cobject + 31;
    1fc2:	84 e3       	ldi	r24, 0x34	; 52
    1fc4:	80 9f       	mul	r24, r16
    1fc6:	f0 01       	movw	r30, r0
    1fc8:	81 9f       	mul	r24, r17
    1fca:	f0 0d       	add	r31, r0
    1fcc:	11 24       	eor	r1, r1
    1fce:	e9 5f       	subi	r30, 0xF9	; 249
    1fd0:	f7 4d       	sbci	r31, 0xD7	; 215
    1fd2:	81 81       	ldd	r24, Z+1	; 0x01
    1fd4:	0f 2e       	mov	r0, r31
    1fd6:	ff e1       	ldi	r31, 0x1F	; 31
    1fd8:	7f 2e       	mov	r7, r31
    1fda:	f0 2d       	mov	r31, r0
    1fdc:	78 0e       	add	r7, r24
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &encoderValue);
    1fde:	ae 01       	movw	r20, r28
    1fe0:	41 53       	subi	r20, 0x31	; 49
    1fe2:	5d 4f       	sbci	r21, 0xFD	; 253
    1fe4:	60 e1       	ldi	r22, 0x10	; 16
    1fe6:	87 2d       	mov	r24, r7
    1fe8:	0e 94 ad 14 	call	0x295a	; 0x295a <get_MOTOREncoder>
			if (retval == ERROR) {
    1fec:	83 36       	cpi	r24, 0x63	; 99
    1fee:	61 f4       	brne	.+24     	; 0x2008 <report+0x2be>
				encoderValue = 0x7FFFFFFF;
    1ff0:	8f ef       	ldi	r24, 0xFF	; 255
    1ff2:	9f ef       	ldi	r25, 0xFF	; 255
    1ff4:	af ef       	ldi	r26, 0xFF	; 255
    1ff6:	bf e7       	ldi	r27, 0x7F	; 127
    1ff8:	c1 53       	subi	r28, 0x31	; 49
    1ffa:	dd 4f       	sbci	r29, 0xFD	; 253
    1ffc:	88 83       	st	Y, r24
    1ffe:	99 83       	std	Y+1, r25	; 0x01
    2000:	aa 83       	std	Y+2, r26	; 0x02
    2002:	bb 83       	std	Y+3, r27	; 0x03
    2004:	cf 5c       	subi	r28, 0xCF	; 207
    2006:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronValue = encoderValue/ROBOCOUNTSPERMICRON;
    2008:	c1 53       	subi	r28, 0x31	; 49
    200a:	dd 4f       	sbci	r29, 0xFD	; 253
    200c:	68 81       	ld	r22, Y
    200e:	79 81       	ldd	r23, Y+1	; 0x01
    2010:	8a 81       	ldd	r24, Y+2	; 0x02
    2012:	9b 81       	ldd	r25, Y+3	; 0x03
    2014:	cf 5c       	subi	r28, 0xCF	; 207
    2016:	d2 40       	sbci	r29, 0x02	; 2
    2018:	2c e0       	ldi	r18, 0x0C	; 12
    201a:	31 e0       	ldi	r19, 0x01	; 1
    201c:	40 e0       	ldi	r20, 0x00	; 0
    201e:	50 e0       	ldi	r21, 0x00	; 0
    2020:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__divmodsi4>
    2024:	f2 2e       	mov	r15, r18
    2026:	e3 2e       	mov	r14, r19
    2028:	d4 2e       	mov	r13, r20
    202a:	c5 2e       	mov	r12, r21
			retval = get_MOTOREncoder(controller, ROBOREADENCODERSPEED, &encoderSpeed);
    202c:	ae 01       	movw	r20, r28
    202e:	4d 52       	subi	r20, 0x2D	; 45
    2030:	5d 4f       	sbci	r21, 0xFD	; 253
    2032:	62 e1       	ldi	r22, 0x12	; 18
    2034:	87 2d       	mov	r24, r7
    2036:	0e 94 ad 14 	call	0x295a	; 0x295a <get_MOTOREncoder>
			if (retval == ERROR) {
    203a:	83 36       	cpi	r24, 0x63	; 99
    203c:	61 f4       	brne	.+24     	; 0x2056 <report+0x30c>
				encoderSpeed = 0x7FFFFFFF;
    203e:	8f ef       	ldi	r24, 0xFF	; 255
    2040:	9f ef       	ldi	r25, 0xFF	; 255
    2042:	af ef       	ldi	r26, 0xFF	; 255
    2044:	bf e7       	ldi	r27, 0x7F	; 127
    2046:	cd 52       	subi	r28, 0x2D	; 45
    2048:	dd 4f       	sbci	r29, 0xFD	; 253
    204a:	88 83       	st	Y, r24
    204c:	99 83       	std	Y+1, r25	; 0x01
    204e:	aa 83       	std	Y+2, r26	; 0x02
    2050:	bb 83       	std	Y+3, r27	; 0x03
    2052:	c3 5d       	subi	r28, 0xD3	; 211
    2054:	d2 40       	sbci	r29, 0x02	; 2
			}
			micronSpeed = encoderSpeed/ROBOCOUNTSPERMICRON;			
    2056:	cd 52       	subi	r28, 0x2D	; 45
    2058:	dd 4f       	sbci	r29, 0xFD	; 253
    205a:	68 81       	ld	r22, Y
    205c:	79 81       	ldd	r23, Y+1	; 0x01
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	9b 81       	ldd	r25, Y+3	; 0x03
    2062:	c3 5d       	subi	r28, 0xD3	; 211
    2064:	d2 40       	sbci	r29, 0x02	; 2
    2066:	2c e0       	ldi	r18, 0x0C	; 12
    2068:	31 e0       	ldi	r19, 0x01	; 1
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	50 e0       	ldi	r21, 0x00	; 0
    206e:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <__divmodsi4>
    2072:	b2 2e       	mov	r11, r18
    2074:	a3 2e       	mov	r10, r19
    2076:	94 2e       	mov	r9, r20
    2078:	85 2e       	mov	r8, r21
			retval = get_MOTORInt32(controller, ROBOREADCURRENT, &icurrents);
    207a:	ae 01       	movw	r20, r28
    207c:	49 52       	subi	r20, 0x29	; 41
    207e:	5d 4f       	sbci	r21, 0xFD	; 253
    2080:	61 e3       	ldi	r22, 0x31	; 49
    2082:	87 2d       	mov	r24, r7
    2084:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <get_MOTORInt32>
			if (retval == ERROR) {
    2088:	83 36       	cpi	r24, 0x63	; 99
    208a:	61 f4       	brne	.+24     	; 0x20a4 <report+0x35a>
				icurrents = 0x7FFFFFFF;
    208c:	8f ef       	ldi	r24, 0xFF	; 255
    208e:	9f ef       	ldi	r25, 0xFF	; 255
    2090:	af ef       	ldi	r26, 0xFF	; 255
    2092:	bf e7       	ldi	r27, 0x7F	; 127
    2094:	c9 52       	subi	r28, 0x29	; 41
    2096:	dd 4f       	sbci	r29, 0xFD	; 253
    2098:	88 83       	st	Y, r24
    209a:	99 83       	std	Y+1, r25	; 0x01
    209c:	aa 83       	std	Y+2, r26	; 0x02
    209e:	bb 83       	std	Y+3, r27	; 0x03
    20a0:	c7 5d       	subi	r28, 0xD7	; 215
    20a2:	d2 40       	sbci	r29, 0x02	; 2
			}
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
    20a4:	c9 52       	subi	r28, 0x29	; 41
    20a6:	dd 4f       	sbci	r29, 0xFD	; 253
    20a8:	88 81       	ld	r24, Y
    20aa:	99 81       	ldd	r25, Y+1	; 0x01
    20ac:	aa 81       	ldd	r26, Y+2	; 0x02
    20ae:	bb 81       	ldd	r27, Y+3	; 0x03
    20b0:	c7 5d       	subi	r28, 0xD7	; 215
    20b2:	d2 40       	sbci	r29, 0x02	; 2
    20b4:	cd 01       	movw	r24, r26
    20b6:	aa 27       	eor	r26, r26
    20b8:	bb 27       	eor	r27, r27
    20ba:	9c 01       	movw	r18, r24
    20bc:	22 0f       	add	r18, r18
    20be:	33 1f       	adc	r19, r19
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	82 0f       	add	r24, r18
    20ce:	93 1f       	adc	r25, r19
//			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
//				micronValue, micronSpeed, current, pcmd[cstack].cid);
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
				micronValue, micronSpeed, current, pcmd[cstack].cid);
    20d0:	44 e3       	ldi	r20, 0x34	; 52
    20d2:	40 9f       	mul	r20, r16
    20d4:	90 01       	movw	r18, r0
    20d6:	41 9f       	mul	r20, r17
    20d8:	30 0d       	add	r19, r0
    20da:	11 24       	eor	r1, r1
    20dc:	a9 01       	movw	r20, r18
    20de:	4e 5c       	subi	r20, 0xCE	; 206
    20e0:	57 4d       	sbci	r21, 0xD7	; 215
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
//			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
//				micronValue, micronSpeed, current, pcmd[cstack].cid);
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
    20e2:	f9 01       	movw	r30, r18
    20e4:	e9 5f       	subi	r30, 0xF9	; 249
    20e6:	f7 4d       	sbci	r31, 0xD7	; 215
    20e8:	21 81       	ldd	r18, Z+1	; 0x01
    20ea:	5f 93       	push	r21
    20ec:	4f 93       	push	r20
    20ee:	9f 93       	push	r25
    20f0:	8f 93       	push	r24
    20f2:	8f 92       	push	r8
    20f4:	9f 92       	push	r9
    20f6:	af 92       	push	r10
    20f8:	bf 92       	push	r11
    20fa:	cf 92       	push	r12
    20fc:	df 92       	push	r13
    20fe:	ef 92       	push	r14
    2100:	ff 92       	push	r15
    2102:	1f 92       	push	r1
    2104:	2f 93       	push	r18
    2106:	ce 01       	movw	r24, r28
    2108:	8b 5e       	subi	r24, 0xEB	; 235
    210a:	9e 4f       	sbci	r25, 0xFE	; 254
    210c:	9f 93       	push	r25
    210e:	8f 93       	push	r24
    2110:	8b 57       	subi	r24, 0x7B	; 123
    2112:	9f 4f       	sbci	r25, 0xFF	; 255
    2114:	9f 93       	push	r25
    2116:	8f 93       	push	r24
    2118:	8e 01       	movw	r16, r28
    211a:	0f 5f       	subi	r16, 0xFF	; 255
    211c:	1f 4f       	sbci	r17, 0xFF	; 255
    211e:	1f 93       	push	r17
    2120:	0f 93       	push	r16
    2122:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
				micronValue, micronSpeed, current, pcmd[cstack].cid);
			printLine(outbuf);
    2126:	c8 01       	movw	r24, r16
    2128:	0e 94 12 04 	call	0x824	; 0x824 <printLine>
			break;
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	d7 c3       	rjmp	.+1966   	; 0x28e0 <report+0xb96>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	0e 94 6f 18 	call	0x30de	; 0x30de <get_temperature>
    2138:	c5 52       	subi	r28, 0x25	; 37
    213a:	dd 4f       	sbci	r29, 0xFD	; 253
    213c:	68 83       	st	Y, r22
    213e:	79 83       	std	Y+1, r23	; 0x01
    2140:	8a 83       	std	Y+2, r24	; 0x02
    2142:	9b 83       	std	Y+3, r25	; 0x03
    2144:	cb 5d       	subi	r28, 0xDB	; 219
    2146:	d2 40       	sbci	r29, 0x02	; 2
			h0 = get_humidity(0);
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <get_humidity>
    214e:	d6 2e       	mov	r13, r22
    2150:	c7 2e       	mov	r12, r23
    2152:	b8 2e       	mov	r11, r24
    2154:	a9 2e       	mov	r10, r25
			t1 = get_temperature(1);
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	0e 94 6f 18 	call	0x30de	; 0x30de <get_temperature>
    215c:	c1 51       	subi	r28, 0x11	; 17
    215e:	dd 4f       	sbci	r29, 0xFD	; 253
    2160:	68 83       	st	Y, r22
    2162:	cf 5e       	subi	r28, 0xEF	; 239
    2164:	d2 40       	sbci	r29, 0x02	; 2
    2166:	c0 51       	subi	r28, 0x10	; 16
    2168:	dd 4f       	sbci	r29, 0xFD	; 253
    216a:	78 83       	st	Y, r23
    216c:	c0 5f       	subi	r28, 0xF0	; 240
    216e:	d2 40       	sbci	r29, 0x02	; 2
    2170:	cf 50       	subi	r28, 0x0F	; 15
    2172:	dd 4f       	sbci	r29, 0xFD	; 253
    2174:	88 83       	st	Y, r24
    2176:	c1 5f       	subi	r28, 0xF1	; 241
    2178:	d2 40       	sbci	r29, 0x02	; 2
    217a:	ce 50       	subi	r28, 0x0E	; 14
    217c:	dd 4f       	sbci	r29, 0xFD	; 253
    217e:	98 83       	st	Y, r25
    2180:	c2 5f       	subi	r28, 0xF2	; 242
    2182:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	0e 94 3d 07 	call	0xe7a	; 0xe7a <get_humidity>
    218a:	cd 50       	subi	r28, 0x0D	; 13
    218c:	dd 4f       	sbci	r29, 0xFD	; 253
    218e:	68 83       	st	Y, r22
    2190:	c3 5f       	subi	r28, 0xF3	; 243
    2192:	d2 40       	sbci	r29, 0x02	; 2
    2194:	cc 50       	subi	r28, 0x0C	; 12
    2196:	dd 4f       	sbci	r29, 0xFD	; 253
    2198:	78 83       	st	Y, r23
    219a:	c4 5f       	subi	r28, 0xF4	; 244
    219c:	d2 40       	sbci	r29, 0x02	; 2
    219e:	cb 50       	subi	r28, 0x0B	; 11
    21a0:	dd 4f       	sbci	r29, 0xFD	; 253
    21a2:	88 83       	st	Y, r24
    21a4:	c5 5f       	subi	r28, 0xF5	; 245
    21a6:	d2 40       	sbci	r29, 0x02	; 2
    21a8:	ca 50       	subi	r28, 0x0A	; 10
    21aa:	dd 4f       	sbci	r29, 0xFD	; 253
    21ac:	98 83       	st	Y, r25
    21ae:	c6 5f       	subi	r28, 0xF6	; 246
    21b0:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    21b2:	82 e0       	ldi	r24, 0x02	; 2
    21b4:	0e 94 6f 18 	call	0x30de	; 0x30de <get_temperature>
    21b8:	c9 50       	subi	r28, 0x09	; 9
    21ba:	dd 4f       	sbci	r29, 0xFD	; 253
    21bc:	68 83       	st	Y, r22
    21be:	c7 5f       	subi	r28, 0xF7	; 247
    21c0:	d2 40       	sbci	r29, 0x02	; 2
    21c2:	c8 50       	subi	r28, 0x08	; 8
    21c4:	dd 4f       	sbci	r29, 0xFD	; 253
    21c6:	78 83       	st	Y, r23
    21c8:	c8 5f       	subi	r28, 0xF8	; 248
    21ca:	d2 40       	sbci	r29, 0x02	; 2
    21cc:	98 2e       	mov	r9, r24
    21ce:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    21d0:	82 e0       	ldi	r24, 0x02	; 2
    21d2:	0e 94 3d 07 	call	0xe7a	; 0xe7a <get_humidity>
    21d6:	76 2e       	mov	r7, r22
    21d8:	67 2e       	mov	r6, r23
    21da:	58 2e       	mov	r5, r24
    21dc:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    21de:	83 e0       	ldi	r24, 0x03	; 3
    21e0:	0e 94 6f 18 	call	0x30de	; 0x30de <get_temperature>
    21e4:	c7 50       	subi	r28, 0x07	; 7
    21e6:	dd 4f       	sbci	r29, 0xFD	; 253
    21e8:	68 83       	st	Y, r22
    21ea:	c9 5f       	subi	r28, 0xF9	; 249
    21ec:	d2 40       	sbci	r29, 0x02	; 2
    21ee:	c6 50       	subi	r28, 0x06	; 6
    21f0:	dd 4f       	sbci	r29, 0xFD	; 253
    21f2:	78 83       	st	Y, r23
    21f4:	ca 5f       	subi	r28, 0xFA	; 250
    21f6:	d2 40       	sbci	r29, 0x02	; 2
    21f8:	38 2e       	mov	r3, r24
    21fa:	29 2e       	mov	r2, r25
			get_time(currenttime);
    21fc:	7e 01       	movw	r14, r28
    21fe:	9b ee       	ldi	r25, 0xEB	; 235
    2200:	e9 1a       	sub	r14, r25
    2202:	9e ef       	ldi	r25, 0xFE	; 254
    2204:	f9 0a       	sbc	r15, r25
    2206:	c7 01       	movw	r24, r14
    2208:	0e 94 d6 05 	call	0xbac	; 0xbac <get_time>
//			sprintf(outbuf, format_ENV, get_SPECID, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    220c:	24 e3       	ldi	r18, 0x34	; 52
    220e:	20 9f       	mul	r18, r16
    2210:	c0 01       	movw	r24, r0
    2212:	21 9f       	mul	r18, r17
    2214:	90 0d       	add	r25, r0
    2216:	11 24       	eor	r1, r1
    2218:	8e 5c       	subi	r24, 0xCE	; 206
    221a:	97 4d       	sbci	r25, 0xD7	; 215
    221c:	9f 93       	push	r25
    221e:	8f 93       	push	r24
    2220:	2f 92       	push	r2
    2222:	3f 92       	push	r3
    2224:	c6 50       	subi	r28, 0x06	; 6
    2226:	dd 4f       	sbci	r29, 0xFD	; 253
    2228:	88 81       	ld	r24, Y
    222a:	ca 5f       	subi	r28, 0xFA	; 250
    222c:	d2 40       	sbci	r29, 0x02	; 2
    222e:	8f 93       	push	r24
    2230:	c7 50       	subi	r28, 0x07	; 7
    2232:	dd 4f       	sbci	r29, 0xFD	; 253
    2234:	98 81       	ld	r25, Y
    2236:	c9 5f       	subi	r28, 0xF9	; 249
    2238:	d2 40       	sbci	r29, 0x02	; 2
    223a:	9f 93       	push	r25
    223c:	4f 92       	push	r4
    223e:	5f 92       	push	r5
    2240:	6f 92       	push	r6
    2242:	7f 92       	push	r7
    2244:	8f 92       	push	r8
    2246:	9f 92       	push	r9
    2248:	c8 50       	subi	r28, 0x08	; 8
    224a:	dd 4f       	sbci	r29, 0xFD	; 253
    224c:	88 81       	ld	r24, Y
    224e:	c8 5f       	subi	r28, 0xF8	; 248
    2250:	d2 40       	sbci	r29, 0x02	; 2
    2252:	8f 93       	push	r24
    2254:	c9 50       	subi	r28, 0x09	; 9
    2256:	dd 4f       	sbci	r29, 0xFD	; 253
    2258:	98 81       	ld	r25, Y
    225a:	c7 5f       	subi	r28, 0xF7	; 247
    225c:	d2 40       	sbci	r29, 0x02	; 2
    225e:	9f 93       	push	r25
    2260:	ca 50       	subi	r28, 0x0A	; 10
    2262:	dd 4f       	sbci	r29, 0xFD	; 253
    2264:	88 81       	ld	r24, Y
    2266:	c6 5f       	subi	r28, 0xF6	; 246
    2268:	d2 40       	sbci	r29, 0x02	; 2
    226a:	8f 93       	push	r24
    226c:	cb 50       	subi	r28, 0x0B	; 11
    226e:	dd 4f       	sbci	r29, 0xFD	; 253
    2270:	98 81       	ld	r25, Y
    2272:	c5 5f       	subi	r28, 0xF5	; 245
    2274:	d2 40       	sbci	r29, 0x02	; 2
    2276:	9f 93       	push	r25
    2278:	cc 50       	subi	r28, 0x0C	; 12
    227a:	dd 4f       	sbci	r29, 0xFD	; 253
    227c:	88 81       	ld	r24, Y
    227e:	c4 5f       	subi	r28, 0xF4	; 244
    2280:	d2 40       	sbci	r29, 0x02	; 2
    2282:	8f 93       	push	r24
    2284:	cd 50       	subi	r28, 0x0D	; 13
    2286:	dd 4f       	sbci	r29, 0xFD	; 253
    2288:	98 81       	ld	r25, Y
    228a:	c3 5f       	subi	r28, 0xF3	; 243
    228c:	d2 40       	sbci	r29, 0x02	; 2
    228e:	9f 93       	push	r25
    2290:	ce 50       	subi	r28, 0x0E	; 14
    2292:	dd 4f       	sbci	r29, 0xFD	; 253
    2294:	88 81       	ld	r24, Y
    2296:	c2 5f       	subi	r28, 0xF2	; 242
    2298:	d2 40       	sbci	r29, 0x02	; 2
    229a:	8f 93       	push	r24
    229c:	cf 50       	subi	r28, 0x0F	; 15
    229e:	dd 4f       	sbci	r29, 0xFD	; 253
    22a0:	98 81       	ld	r25, Y
    22a2:	c1 5f       	subi	r28, 0xF1	; 241
    22a4:	d2 40       	sbci	r29, 0x02	; 2
    22a6:	9f 93       	push	r25
    22a8:	c0 51       	subi	r28, 0x10	; 16
    22aa:	dd 4f       	sbci	r29, 0xFD	; 253
    22ac:	88 81       	ld	r24, Y
    22ae:	c0 5f       	subi	r28, 0xF0	; 240
    22b0:	d2 40       	sbci	r29, 0x02	; 2
    22b2:	8f 93       	push	r24
    22b4:	c1 51       	subi	r28, 0x11	; 17
    22b6:	dd 4f       	sbci	r29, 0xFD	; 253
    22b8:	98 81       	ld	r25, Y
    22ba:	cf 5e       	subi	r28, 0xEF	; 239
    22bc:	d2 40       	sbci	r29, 0x02	; 2
    22be:	9f 93       	push	r25
    22c0:	af 92       	push	r10
    22c2:	bf 92       	push	r11
    22c4:	cf 92       	push	r12
    22c6:	df 92       	push	r13
    22c8:	c2 52       	subi	r28, 0x22	; 34
    22ca:	dd 4f       	sbci	r29, 0xFD	; 253
    22cc:	88 81       	ld	r24, Y
    22ce:	ce 5d       	subi	r28, 0xDE	; 222
    22d0:	d2 40       	sbci	r29, 0x02	; 2
    22d2:	8f 93       	push	r24
    22d4:	c3 52       	subi	r28, 0x23	; 35
    22d6:	dd 4f       	sbci	r29, 0xFD	; 253
    22d8:	88 81       	ld	r24, Y
    22da:	cd 5d       	subi	r28, 0xDD	; 221
    22dc:	d2 40       	sbci	r29, 0x02	; 2
    22de:	8f 93       	push	r24
    22e0:	c4 52       	subi	r28, 0x24	; 36
    22e2:	dd 4f       	sbci	r29, 0xFD	; 253
    22e4:	88 81       	ld	r24, Y
    22e6:	cc 5d       	subi	r28, 0xDC	; 220
    22e8:	d2 40       	sbci	r29, 0x02	; 2
    22ea:	8f 93       	push	r24
    22ec:	c5 52       	subi	r28, 0x25	; 37
    22ee:	dd 4f       	sbci	r29, 0xFD	; 253
    22f0:	88 81       	ld	r24, Y
    22f2:	cb 5d       	subi	r28, 0xDB	; 219
    22f4:	d2 40       	sbci	r29, 0x02	; 2
    22f6:	8f 93       	push	r24
    22f8:	ff 92       	push	r15
    22fa:	ef 92       	push	r14
    22fc:	ce 01       	movw	r24, r28
    22fe:	8b 5a       	subi	r24, 0xAB	; 171
    2300:	9e 4f       	sbci	r25, 0xFE	; 254
    2302:	9f 93       	push	r25
    2304:	8f 93       	push	r24
    2306:	8e 01       	movw	r16, r28
    2308:	0f 5f       	subi	r16, 0xFF	; 255
    230a:	1f 4f       	sbci	r17, 0xFF	; 255
    230c:	1f 93       	push	r17
    230e:	0f 93       	push	r16
    2310:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
			printLine(outbuf);
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	de bf       	out	0x3e, r29	; 62
    2318:	c8 01       	movw	r24, r16
    231a:	0e 94 12 04 	call	0x824	; 0x824 <printLine>
			writestr_OLED(1, "Temp & Humidity", 1);
    231e:	41 e0       	ldi	r20, 0x01	; 1
    2320:	62 ec       	ldi	r22, 0xC2	; 194
    2322:	79 e8       	ldi	r23, 0x89	; 137
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	0e 94 ab 0b 	call	0x1756	; 0x1756 <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    232a:	c5 52       	subi	r28, 0x25	; 37
    232c:	dd 4f       	sbci	r29, 0xFD	; 253
    232e:	f8 80       	ld	r15, Y
    2330:	cb 5d       	subi	r28, 0xDB	; 219
    2332:	d2 40       	sbci	r29, 0x02	; 2
    2334:	c4 52       	subi	r28, 0x24	; 36
    2336:	dd 4f       	sbci	r29, 0xFD	; 253
    2338:	e8 80       	ld	r14, Y
    233a:	cc 5d       	subi	r28, 0xDC	; 220
    233c:	d2 40       	sbci	r29, 0x02	; 2
    233e:	c3 52       	subi	r28, 0x23	; 35
    2340:	dd 4f       	sbci	r29, 0xFD	; 253
    2342:	98 80       	ld	r9, Y
    2344:	cd 5d       	subi	r28, 0xDD	; 221
    2346:	d2 40       	sbci	r29, 0x02	; 2
    2348:	c2 52       	subi	r28, 0x22	; 34
    234a:	dd 4f       	sbci	r29, 0xFD	; 253
    234c:	88 80       	ld	r8, Y
    234e:	ce 5d       	subi	r28, 0xDE	; 222
    2350:	d2 40       	sbci	r29, 0x02	; 2
    2352:	26 e6       	ldi	r18, 0x66	; 102
    2354:	36 e6       	ldi	r19, 0x66	; 102
    2356:	46 ee       	ldi	r20, 0xE6	; 230
    2358:	5f e3       	ldi	r21, 0x3F	; 63
    235a:	6f 2d       	mov	r22, r15
    235c:	7e 2d       	mov	r23, r14
    235e:	89 2d       	mov	r24, r9
    2360:	98 2d       	mov	r25, r8
    2362:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__mulsf3>
    2366:	af 92       	push	r10
    2368:	bf 92       	push	r11
    236a:	cf 92       	push	r12
    236c:	df 92       	push	r13
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	52 e4       	ldi	r21, 0x42	; 66
    2376:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__addsf3>
    237a:	9f 93       	push	r25
    237c:	8f 93       	push	r24
    237e:	7f 93       	push	r23
    2380:	6f 93       	push	r22
    2382:	8f 92       	push	r8
    2384:	9f 92       	push	r9
    2386:	ef 92       	push	r14
    2388:	ff 92       	push	r15
    238a:	82 ed       	ldi	r24, 0xD2	; 210
    238c:	99 e8       	ldi	r25, 0x89	; 137
    238e:	9f 93       	push	r25
    2390:	8f 93       	push	r24
    2392:	1f 93       	push	r17
    2394:	0f 93       	push	r16
    2396:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
			writestr_OLED(1, outbuf, 2);
    239a:	42 e0       	ldi	r20, 0x02	; 2
    239c:	b8 01       	movw	r22, r16
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	0e 94 ab 0b 	call	0x1756	; 0x1756 <writestr_OLED>
			break;
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	9b c2       	rjmp	.+1334   	; 0x28e0 <report+0xb96>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    23aa:	ae 01       	movw	r20, r28
    23ac:	45 51       	subi	r20, 0x15	; 21
    23ae:	5d 4f       	sbci	r21, 0xFD	; 253
    23b0:	be 01       	movw	r22, r28
    23b2:	69 51       	subi	r22, 0x19	; 25
    23b4:	7d 4f       	sbci	r23, 0xFD	; 253
    23b6:	ce 01       	movw	r24, r28
    23b8:	8d 51       	subi	r24, 0x1D	; 29
    23ba:	9d 4f       	sbci	r25, 0xFD	; 253
    23bc:	0e 94 9c 09 	call	0x1338	; 0x1338 <get_orientation>
			get_time(currenttime);
    23c0:	ce 01       	movw	r24, r28
    23c2:	8b 5e       	subi	r24, 0xEB	; 235
    23c4:	9e 4f       	sbci	r25, 0xFE	; 254
    23c6:	0e 94 d6 05 	call	0xbac	; 0xbac <get_time>
			sprintf(outbuf, format_ORI, get_SPECID, currenttime, x, y, z, pcmd[cstack].cid);
    23ca:	24 e3       	ldi	r18, 0x34	; 52
    23cc:	20 9f       	mul	r18, r16
    23ce:	c0 01       	movw	r24, r0
    23d0:	21 9f       	mul	r18, r17
    23d2:	90 0d       	add	r25, r0
    23d4:	11 24       	eor	r1, r1
    23d6:	8e 5c       	subi	r24, 0xCE	; 206
    23d8:	97 4d       	sbci	r25, 0xD7	; 215
    23da:	c5 51       	subi	r28, 0x15	; 21
    23dc:	dd 4f       	sbci	r29, 0xFD	; 253
    23de:	a8 81       	ld	r26, Y
    23e0:	cb 5e       	subi	r28, 0xEB	; 235
    23e2:	d2 40       	sbci	r29, 0x02	; 2
    23e4:	c4 51       	subi	r28, 0x14	; 20
    23e6:	dd 4f       	sbci	r29, 0xFD	; 253
    23e8:	b8 81       	ld	r27, Y
    23ea:	cc 5e       	subi	r28, 0xEC	; 236
    23ec:	d2 40       	sbci	r29, 0x02	; 2
    23ee:	c3 51       	subi	r28, 0x13	; 19
    23f0:	dd 4f       	sbci	r29, 0xFD	; 253
    23f2:	18 81       	ld	r17, Y
    23f4:	cd 5e       	subi	r28, 0xED	; 237
    23f6:	d2 40       	sbci	r29, 0x02	; 2
    23f8:	c2 51       	subi	r28, 0x12	; 18
    23fa:	dd 4f       	sbci	r29, 0xFD	; 253
    23fc:	08 81       	ld	r16, Y
    23fe:	ce 5e       	subi	r28, 0xEE	; 238
    2400:	d2 40       	sbci	r29, 0x02	; 2
    2402:	c9 51       	subi	r28, 0x19	; 25
    2404:	dd 4f       	sbci	r29, 0xFD	; 253
    2406:	68 81       	ld	r22, Y
    2408:	c7 5e       	subi	r28, 0xE7	; 231
    240a:	d2 40       	sbci	r29, 0x02	; 2
    240c:	c8 51       	subi	r28, 0x18	; 24
    240e:	dd 4f       	sbci	r29, 0xFD	; 253
    2410:	78 81       	ld	r23, Y
    2412:	c8 5e       	subi	r28, 0xE8	; 232
    2414:	d2 40       	sbci	r29, 0x02	; 2
    2416:	c7 51       	subi	r28, 0x17	; 23
    2418:	dd 4f       	sbci	r29, 0xFD	; 253
    241a:	e8 81       	ld	r30, Y
    241c:	c9 5e       	subi	r28, 0xE9	; 233
    241e:	d2 40       	sbci	r29, 0x02	; 2
    2420:	c6 51       	subi	r28, 0x16	; 22
    2422:	dd 4f       	sbci	r29, 0xFD	; 253
    2424:	f8 81       	ld	r31, Y
    2426:	ca 5e       	subi	r28, 0xEA	; 234
    2428:	d2 40       	sbci	r29, 0x02	; 2
    242a:	cd 51       	subi	r28, 0x1D	; 29
    242c:	dd 4f       	sbci	r29, 0xFD	; 253
    242e:	28 81       	ld	r18, Y
    2430:	c3 5e       	subi	r28, 0xE3	; 227
    2432:	d2 40       	sbci	r29, 0x02	; 2
    2434:	cc 51       	subi	r28, 0x1C	; 28
    2436:	dd 4f       	sbci	r29, 0xFD	; 253
    2438:	38 81       	ld	r19, Y
    243a:	c4 5e       	subi	r28, 0xE4	; 228
    243c:	d2 40       	sbci	r29, 0x02	; 2
    243e:	cb 51       	subi	r28, 0x1B	; 27
    2440:	dd 4f       	sbci	r29, 0xFD	; 253
    2442:	48 81       	ld	r20, Y
    2444:	c5 5e       	subi	r28, 0xE5	; 229
    2446:	d2 40       	sbci	r29, 0x02	; 2
    2448:	ca 51       	subi	r28, 0x1A	; 26
    244a:	dd 4f       	sbci	r29, 0xFD	; 253
    244c:	58 81       	ld	r21, Y
    244e:	c6 5e       	subi	r28, 0xE6	; 230
    2450:	d2 40       	sbci	r29, 0x02	; 2
    2452:	f0 90 a8 04 	lds	r15, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2456:	f2 fe       	sbrs	r15, 2
    2458:	05 c0       	rjmp	.+10     	; 0x2464 <report+0x71a>
    245a:	68 94       	set
    245c:	ff 24       	eor	r15, r15
    245e:	f1 f8       	bld	r15, 1
    2460:	e1 2c       	mov	r14, r1
    2462:	03 c0       	rjmp	.+6      	; 0x246a <report+0x720>
    2464:	ff 24       	eor	r15, r15
    2466:	f3 94       	inc	r15
    2468:	e1 2c       	mov	r14, r1
    246a:	9f 93       	push	r25
    246c:	8f 93       	push	r24
    246e:	0f 93       	push	r16
    2470:	1f 93       	push	r17
    2472:	bf 93       	push	r27
    2474:	af 93       	push	r26
    2476:	ff 93       	push	r31
    2478:	ef 93       	push	r30
    247a:	7f 93       	push	r23
    247c:	6f 93       	push	r22
    247e:	5f 93       	push	r21
    2480:	4f 93       	push	r20
    2482:	3f 93       	push	r19
    2484:	2f 93       	push	r18
    2486:	ce 01       	movw	r24, r28
    2488:	8b 5e       	subi	r24, 0xEB	; 235
    248a:	9e 4f       	sbci	r25, 0xFE	; 254
    248c:	9f 93       	push	r25
    248e:	8f 93       	push	r24
    2490:	ef 92       	push	r14
    2492:	ff 92       	push	r15
    2494:	8f 52       	subi	r24, 0x2F	; 47
    2496:	9f 4f       	sbci	r25, 0xFF	; 255
    2498:	9f 93       	push	r25
    249a:	8f 93       	push	r24
    249c:	8e 01       	movw	r16, r28
    249e:	0f 5f       	subi	r16, 0xFF	; 255
    24a0:	1f 4f       	sbci	r17, 0xFF	; 255
    24a2:	1f 93       	push	r17
    24a4:	0f 93       	push	r16
    24a6:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
			checksum_NMEA(outbuf);
    24aa:	c8 01       	movw	r24, r16
    24ac:	0e 94 90 0a 	call	0x1520	; 0x1520 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    24b0:	f8 01       	movw	r30, r16
    24b2:	01 90       	ld	r0, Z+
    24b4:	00 20       	and	r0, r0
    24b6:	e9 f7       	brne	.-6      	; 0x24b2 <report+0x768>
    24b8:	31 97       	sbiw	r30, 0x01	; 1
    24ba:	af 01       	movw	r20, r30
    24bc:	40 1b       	sub	r20, r16
    24be:	51 0b       	sbc	r21, r17
    24c0:	b8 01       	movw	r22, r16
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	0e 94 07 1a 	call	0x340e	; 0x340e <send_USART>
			writestr_OLED(1, "Orientation", 1);
    24c8:	41 e0       	ldi	r20, 0x01	; 1
    24ca:	68 ee       	ldi	r22, 0xE8	; 232
    24cc:	79 e8       	ldi	r23, 0x89	; 137
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	0e 94 ab 0b 	call	0x1756	; 0x1756 <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    24d4:	c2 51       	subi	r28, 0x12	; 18
    24d6:	dd 4f       	sbci	r29, 0xFD	; 253
    24d8:	88 81       	ld	r24, Y
    24da:	ce 5e       	subi	r28, 0xEE	; 238
    24dc:	d2 40       	sbci	r29, 0x02	; 2
    24de:	8f 93       	push	r24
    24e0:	c3 51       	subi	r28, 0x13	; 19
    24e2:	dd 4f       	sbci	r29, 0xFD	; 253
    24e4:	88 81       	ld	r24, Y
    24e6:	cd 5e       	subi	r28, 0xED	; 237
    24e8:	d2 40       	sbci	r29, 0x02	; 2
    24ea:	8f 93       	push	r24
    24ec:	c4 51       	subi	r28, 0x14	; 20
    24ee:	dd 4f       	sbci	r29, 0xFD	; 253
    24f0:	88 81       	ld	r24, Y
    24f2:	cc 5e       	subi	r28, 0xEC	; 236
    24f4:	d2 40       	sbci	r29, 0x02	; 2
    24f6:	8f 93       	push	r24
    24f8:	c5 51       	subi	r28, 0x15	; 21
    24fa:	dd 4f       	sbci	r29, 0xFD	; 253
    24fc:	88 81       	ld	r24, Y
    24fe:	cb 5e       	subi	r28, 0xEB	; 235
    2500:	d2 40       	sbci	r29, 0x02	; 2
    2502:	8f 93       	push	r24
    2504:	c6 51       	subi	r28, 0x16	; 22
    2506:	dd 4f       	sbci	r29, 0xFD	; 253
    2508:	88 81       	ld	r24, Y
    250a:	ca 5e       	subi	r28, 0xEA	; 234
    250c:	d2 40       	sbci	r29, 0x02	; 2
    250e:	8f 93       	push	r24
    2510:	c7 51       	subi	r28, 0x17	; 23
    2512:	dd 4f       	sbci	r29, 0xFD	; 253
    2514:	88 81       	ld	r24, Y
    2516:	c9 5e       	subi	r28, 0xE9	; 233
    2518:	d2 40       	sbci	r29, 0x02	; 2
    251a:	8f 93       	push	r24
    251c:	c8 51       	subi	r28, 0x18	; 24
    251e:	dd 4f       	sbci	r29, 0xFD	; 253
    2520:	88 81       	ld	r24, Y
    2522:	c8 5e       	subi	r28, 0xE8	; 232
    2524:	d2 40       	sbci	r29, 0x02	; 2
    2526:	8f 93       	push	r24
    2528:	c9 51       	subi	r28, 0x19	; 25
    252a:	dd 4f       	sbci	r29, 0xFD	; 253
    252c:	88 81       	ld	r24, Y
    252e:	c7 5e       	subi	r28, 0xE7	; 231
    2530:	d2 40       	sbci	r29, 0x02	; 2
    2532:	8f 93       	push	r24
    2534:	ca 51       	subi	r28, 0x1A	; 26
    2536:	dd 4f       	sbci	r29, 0xFD	; 253
    2538:	88 81       	ld	r24, Y
    253a:	c6 5e       	subi	r28, 0xE6	; 230
    253c:	d2 40       	sbci	r29, 0x02	; 2
    253e:	8f 93       	push	r24
    2540:	cb 51       	subi	r28, 0x1B	; 27
    2542:	dd 4f       	sbci	r29, 0xFD	; 253
    2544:	88 81       	ld	r24, Y
    2546:	c5 5e       	subi	r28, 0xE5	; 229
    2548:	d2 40       	sbci	r29, 0x02	; 2
    254a:	8f 93       	push	r24
    254c:	cc 51       	subi	r28, 0x1C	; 28
    254e:	dd 4f       	sbci	r29, 0xFD	; 253
    2550:	88 81       	ld	r24, Y
    2552:	c4 5e       	subi	r28, 0xE4	; 228
    2554:	d2 40       	sbci	r29, 0x02	; 2
    2556:	8f 93       	push	r24
    2558:	cd 51       	subi	r28, 0x1D	; 29
    255a:	dd 4f       	sbci	r29, 0xFD	; 253
    255c:	88 81       	ld	r24, Y
    255e:	c3 5e       	subi	r28, 0xE3	; 227
    2560:	d2 40       	sbci	r29, 0x02	; 2
    2562:	8f 93       	push	r24
    2564:	ce 01       	movw	r24, r28
    2566:	8a 5f       	subi	r24, 0xFA	; 250
    2568:	9d 4f       	sbci	r25, 0xFD	; 253
    256a:	9f 93       	push	r25
    256c:	8f 93       	push	r24
    256e:	1f 93       	push	r17
    2570:	0f 93       	push	r16
    2572:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	42 e0       	ldi	r20, 0x02	; 2
    257c:	b8 01       	movw	r22, r16
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	0e 94 ab 0b 	call	0x1756	; 0x1756 <writestr_OLED>
			break;
    2584:	ad c1       	rjmp	.+858    	; 0x28e0 <report+0xb96>

		case 'p':
			get_time(currenttime);
    2586:	7e 01       	movw	r14, r28
    2588:	9b ee       	ldi	r25, 0xEB	; 235
    258a:	e9 1a       	sub	r14, r25
    258c:	9e ef       	ldi	r25, 0xFE	; 254
    258e:	f9 0a       	sbc	r15, r25
    2590:	c7 01       	movw	r24, r14
    2592:	0e 94 d6 05 	call	0xbac	; 0xbac <get_time>
			read_PNEUSENSORS(&shutter, &left, &right, &air);
    2596:	9e 01       	movw	r18, r28
    2598:	2c 5a       	subi	r18, 0xAC	; 172
    259a:	3e 4f       	sbci	r19, 0xFE	; 254
    259c:	ae 01       	movw	r20, r28
    259e:	4d 5a       	subi	r20, 0xAD	; 173
    25a0:	5e 4f       	sbci	r21, 0xFE	; 254
    25a2:	be 01       	movw	r22, r28
    25a4:	6e 5a       	subi	r22, 0xAE	; 174
    25a6:	7e 4f       	sbci	r23, 0xFE	; 254
    25a8:	ce 01       	movw	r24, r28
    25aa:	8f 5a       	subi	r24, 0xAF	; 175
    25ac:	9e 4f       	sbci	r25, 0xFE	; 254
    25ae:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <read_PNEUSENSORS>
//			sprintf(outbuf, format_PNU, get_SPECID, currenttime, shutter, left, right, air, pcmd[cstack].cid);
//			checksum_NMEA(outbuf);
//			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, format_PNU, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    25b2:	24 e3       	ldi	r18, 0x34	; 52
    25b4:	20 9f       	mul	r18, r16
    25b6:	c0 01       	movw	r24, r0
    25b8:	21 9f       	mul	r18, r17
    25ba:	90 0d       	add	r25, r0
    25bc:	11 24       	eor	r1, r1
    25be:	8e 5c       	subi	r24, 0xCE	; 206
    25c0:	97 4d       	sbci	r25, 0xD7	; 215
    25c2:	9f 93       	push	r25
    25c4:	8f 93       	push	r24
    25c6:	cc 5a       	subi	r28, 0xAC	; 172
    25c8:	de 4f       	sbci	r29, 0xFE	; 254
    25ca:	88 81       	ld	r24, Y
    25cc:	c4 55       	subi	r28, 0x54	; 84
    25ce:	d1 40       	sbci	r29, 0x01	; 1
    25d0:	1f 92       	push	r1
    25d2:	8f 93       	push	r24
    25d4:	cd 5a       	subi	r28, 0xAD	; 173
    25d6:	de 4f       	sbci	r29, 0xFE	; 254
    25d8:	88 81       	ld	r24, Y
    25da:	c3 55       	subi	r28, 0x53	; 83
    25dc:	d1 40       	sbci	r29, 0x01	; 1
    25de:	1f 92       	push	r1
    25e0:	8f 93       	push	r24
    25e2:	ce 5a       	subi	r28, 0xAE	; 174
    25e4:	de 4f       	sbci	r29, 0xFE	; 254
    25e6:	88 81       	ld	r24, Y
    25e8:	c2 55       	subi	r28, 0x52	; 82
    25ea:	d1 40       	sbci	r29, 0x01	; 1
    25ec:	1f 92       	push	r1
    25ee:	8f 93       	push	r24
    25f0:	cf 5a       	subi	r28, 0xAF	; 175
    25f2:	de 4f       	sbci	r29, 0xFE	; 254
    25f4:	88 81       	ld	r24, Y
    25f6:	c1 55       	subi	r28, 0x51	; 81
    25f8:	d1 40       	sbci	r29, 0x01	; 1
    25fa:	1f 92       	push	r1
    25fc:	8f 93       	push	r24
    25fe:	ff 92       	push	r15
    2600:	ef 92       	push	r14
    2602:	ce 01       	movw	r24, r28
    2604:	88 5e       	subi	r24, 0xE8	; 232
    2606:	9d 4f       	sbci	r25, 0xFD	; 253
    2608:	9f 93       	push	r25
    260a:	8f 93       	push	r24
    260c:	8e 01       	movw	r16, r28
    260e:	0f 5f       	subi	r16, 0xFF	; 255
    2610:	1f 4f       	sbci	r17, 0xFF	; 255
    2612:	1f 93       	push	r17
    2614:	0f 93       	push	r16
    2616:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
			printLine(outbuf);
    261a:	c8 01       	movw	r24, r16
    261c:	0e 94 12 04 	call	0x824	; 0x824 <printLine>

			sprintf(outbuf, dformat_PN1, left, right);
    2620:	cd 5a       	subi	r28, 0xAD	; 173
    2622:	de 4f       	sbci	r29, 0xFE	; 254
    2624:	88 81       	ld	r24, Y
    2626:	c3 55       	subi	r28, 0x53	; 83
    2628:	d1 40       	sbci	r29, 0x01	; 1
    262a:	1f 92       	push	r1
    262c:	8f 93       	push	r24
    262e:	ce 5a       	subi	r28, 0xAE	; 174
    2630:	de 4f       	sbci	r29, 0xFE	; 254
    2632:	88 81       	ld	r24, Y
    2634:	c2 55       	subi	r28, 0x52	; 82
    2636:	d1 40       	sbci	r29, 0x01	; 1
    2638:	1f 92       	push	r1
    263a:	8f 93       	push	r24
    263c:	ce 01       	movw	r24, r28
    263e:	8b 5b       	subi	r24, 0xBB	; 187
    2640:	9d 4f       	sbci	r25, 0xFD	; 253
    2642:	9f 93       	push	r25
    2644:	8f 93       	push	r24
    2646:	1f 93       	push	r17
    2648:	0f 93       	push	r16
    264a:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
			writestr_OLED(1, outbuf, 1);
    264e:	41 e0       	ldi	r20, 0x01	; 1
    2650:	b8 01       	movw	r22, r16
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	0e 94 ab 0b 	call	0x1756	; 0x1756 <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2658:	cc 5a       	subi	r28, 0xAC	; 172
    265a:	de 4f       	sbci	r29, 0xFE	; 254
    265c:	88 81       	ld	r24, Y
    265e:	c4 55       	subi	r28, 0x54	; 84
    2660:	d1 40       	sbci	r29, 0x01	; 1
    2662:	1f 92       	push	r1
    2664:	8f 93       	push	r24
    2666:	cf 5a       	subi	r28, 0xAF	; 175
    2668:	de 4f       	sbci	r29, 0xFE	; 254
    266a:	88 81       	ld	r24, Y
    266c:	c1 55       	subi	r28, 0x51	; 81
    266e:	d1 40       	sbci	r29, 0x01	; 1
    2670:	1f 92       	push	r1
    2672:	8f 93       	push	r24
    2674:	ce 01       	movw	r24, r28
    2676:	88 5a       	subi	r24, 0xA8	; 168
    2678:	9d 4f       	sbci	r25, 0xFD	; 253
    267a:	9f 93       	push	r25
    267c:	8f 93       	push	r24
    267e:	1f 93       	push	r17
    2680:	0f 93       	push	r16
    2682:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	de bf       	out	0x3e, r29	; 62
    268a:	42 e0       	ldi	r20, 0x02	; 2
    268c:	b8 01       	movw	r22, r16
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	0e 94 ab 0b 	call	0x1756	; 0x1756 <writestr_OLED>
			break;
    2694:	25 c1       	rjmp	.+586    	; 0x28e0 <report+0xb96>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    2696:	ce 01       	movw	r24, r28
    2698:	8b 5e       	subi	r24, 0xEB	; 235
    269a:	9e 4f       	sbci	r25, 0xFE	; 254
    269c:	0e 94 d6 05 	call	0xbac	; 0xbac <get_time>
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
    26a0:	24 e1       	ldi	r18, 0x14	; 20
    26a2:	ae 01       	movw	r20, r28
    26a4:	47 5d       	subi	r20, 0xD7	; 215
    26a6:	5e 4f       	sbci	r21, 0xFE	; 254
    26a8:	60 e0       	ldi	r22, 0x00	; 0
    26aa:	70 e0       	ldi	r23, 0x00	; 0
    26ac:	80 e5       	ldi	r24, 0x50	; 80
    26ae:	0e 94 c9 06 	call	0xd92	; 0xd92 <read_FRAM>
			get_BOOTTIME(boottime);
    26b2:	ce 01       	movw	r24, r28
    26b4:	83 5c       	subi	r24, 0xC3	; 195
    26b6:	9e 4f       	sbci	r25, 0xFE	; 254
    26b8:	0e 94 50 06 	call	0xca0	; 0xca0 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    26bc:	24 e3       	ldi	r18, 0x34	; 52
    26be:	20 9f       	mul	r18, r16
    26c0:	c0 01       	movw	r24, r0
    26c2:	21 9f       	mul	r18, r17
    26c4:	90 0d       	add	r25, r0
    26c6:	11 24       	eor	r1, r1
    26c8:	8e 5c       	subi	r24, 0xCE	; 206
    26ca:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
    26cc:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    26d0:	22 ff       	sbrs	r18, 2
    26d2:	03 c0       	rjmp	.+6      	; 0x26da <report+0x990>
    26d4:	22 e0       	ldi	r18, 0x02	; 2
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <report+0x994>
    26da:	21 e0       	ldi	r18, 0x01	; 1
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	9f 93       	push	r25
    26e0:	8f 93       	push	r24
    26e2:	ce 01       	movw	r24, r28
    26e4:	83 5c       	subi	r24, 0xC3	; 195
    26e6:	9e 4f       	sbci	r25, 0xFE	; 254
    26e8:	9f 93       	push	r25
    26ea:	8f 93       	push	r24
    26ec:	44 97       	sbiw	r24, 0x14	; 20
    26ee:	9f 93       	push	r25
    26f0:	8f 93       	push	r24
    26f2:	8e 01       	movw	r16, r28
    26f4:	0b 5e       	subi	r16, 0xEB	; 235
    26f6:	1e 4f       	sbci	r17, 0xFE	; 254
    26f8:	1f 93       	push	r17
    26fa:	0f 93       	push	r16
    26fc:	3f 93       	push	r19
    26fe:	2f 93       	push	r18
    2700:	8e 5b       	subi	r24, 0xBE	; 190
    2702:	9e 4f       	sbci	r25, 0xFE	; 254
    2704:	9f 93       	push	r25
    2706:	8f 93       	push	r24
    2708:	8a 56       	subi	r24, 0x6A	; 106
    270a:	92 40       	sbci	r25, 0x02	; 2
    270c:	7c 01       	movw	r14, r24
    270e:	9f 93       	push	r25
    2710:	8f 93       	push	r24
    2712:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    2716:	c7 01       	movw	r24, r14
    2718:	0e 94 90 0a 	call	0x1520	; 0x1520 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    271c:	f7 01       	movw	r30, r14
    271e:	01 90       	ld	r0, Z+
    2720:	00 20       	and	r0, r0
    2722:	e9 f7       	brne	.-6      	; 0x271e <report+0x9d4>
    2724:	31 97       	sbiw	r30, 0x01	; 1
    2726:	af 01       	movw	r20, r30
    2728:	4e 19       	sub	r20, r14
    272a:	5f 09       	sbc	r21, r15
    272c:	b7 01       	movw	r22, r14
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	0e 94 07 1a 	call	0x340e	; 0x340e <send_USART>
			writestr_OLED(1, "Time", 1);
    2734:	41 e0       	ldi	r20, 0x01	; 1
    2736:	64 ef       	ldi	r22, 0xF4	; 244
    2738:	79 e8       	ldi	r23, 0x89	; 137
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	0e 94 ab 0b 	call	0x1756	; 0x1756 <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    2740:	b8 01       	movw	r22, r16
    2742:	65 5f       	subi	r22, 0xF5	; 245
    2744:	7f 4f       	sbci	r23, 0xFF	; 255
    2746:	42 e0       	ldi	r20, 0x02	; 2
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	0e 94 ab 0b 	call	0x1756	; 0x1756 <writestr_OLED>
			break;
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	de bf       	out	0x3e, r29	; 62
    2752:	c6 c0       	rjmp	.+396    	; 0x28e0 <report+0xb96>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	0e 94 35 08 	call	0x106a	; 0x106a <read_ionpump>
    275a:	f6 2e       	mov	r15, r22
    275c:	e7 2e       	mov	r14, r23
    275e:	d8 2e       	mov	r13, r24
    2760:	c9 2e       	mov	r12, r25
			bluvac = read_ionpump(BLUEPUMP);
    2762:	82 e0       	ldi	r24, 0x02	; 2
    2764:	0e 94 35 08 	call	0x106a	; 0x106a <read_ionpump>
    2768:	b6 2e       	mov	r11, r22
    276a:	a7 2e       	mov	r10, r23
    276c:	98 2e       	mov	r9, r24
    276e:	89 2e       	mov	r8, r25
			get_time(currenttime);
    2770:	ce 01       	movw	r24, r28
    2772:	8b 5e       	subi	r24, 0xEB	; 235
    2774:	9e 4f       	sbci	r25, 0xFE	; 254
    2776:	0e 94 d6 05 	call	0xbac	; 0xbac <get_time>
			sprintf(outbuf, format_VAC, get_SPECID, currenttime, redvac, bluvac, pcmd[cstack].cid);
    277a:	24 e3       	ldi	r18, 0x34	; 52
    277c:	20 9f       	mul	r18, r16
    277e:	c0 01       	movw	r24, r0
    2780:	21 9f       	mul	r18, r17
    2782:	90 0d       	add	r25, r0
    2784:	11 24       	eor	r1, r1
    2786:	8e 5c       	subi	r24, 0xCE	; 206
    2788:	97 4d       	sbci	r25, 0xD7	; 215
    278a:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    278e:	22 ff       	sbrs	r18, 2
    2790:	03 c0       	rjmp	.+6      	; 0x2798 <report+0xa4e>
    2792:	22 e0       	ldi	r18, 0x02	; 2
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	02 c0       	rjmp	.+4      	; 0x279c <report+0xa52>
    2798:	21 e0       	ldi	r18, 0x01	; 1
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	9f 93       	push	r25
    279e:	8f 93       	push	r24
    27a0:	8f 92       	push	r8
    27a2:	9f 92       	push	r9
    27a4:	af 92       	push	r10
    27a6:	bf 92       	push	r11
    27a8:	cf 92       	push	r12
    27aa:	df 92       	push	r13
    27ac:	ef 92       	push	r14
    27ae:	ff 92       	push	r15
    27b0:	ce 01       	movw	r24, r28
    27b2:	8b 5e       	subi	r24, 0xEB	; 235
    27b4:	9e 4f       	sbci	r25, 0xFE	; 254
    27b6:	9f 93       	push	r25
    27b8:	8f 93       	push	r24
    27ba:	3f 93       	push	r19
    27bc:	2f 93       	push	r18
    27be:	8d 58       	subi	r24, 0x8D	; 141
    27c0:	9e 4f       	sbci	r25, 0xFE	; 254
    27c2:	9f 93       	push	r25
    27c4:	8f 93       	push	r24
    27c6:	8e 01       	movw	r16, r28
    27c8:	0f 5f       	subi	r16, 0xFF	; 255
    27ca:	1f 4f       	sbci	r17, 0xFF	; 255
    27cc:	1f 93       	push	r17
    27ce:	0f 93       	push	r16
    27d0:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
			checksum_NMEA(outbuf);
    27d4:	c8 01       	movw	r24, r16
    27d6:	0e 94 90 0a 	call	0x1520	; 0x1520 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    27da:	f8 01       	movw	r30, r16
    27dc:	01 90       	ld	r0, Z+
    27de:	00 20       	and	r0, r0
    27e0:	e9 f7       	brne	.-6      	; 0x27dc <report+0xa92>
    27e2:	31 97       	sbiw	r30, 0x01	; 1
    27e4:	af 01       	movw	r20, r30
    27e6:	40 1b       	sub	r20, r16
    27e8:	51 0b       	sbc	r21, r17
    27ea:	b8 01       	movw	r22, r16
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	0e 94 07 1a 	call	0x340e	; 0x340e <send_USART>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    27f2:	41 e0       	ldi	r20, 0x01	; 1
    27f4:	69 ef       	ldi	r22, 0xF9	; 249
    27f6:	79 e8       	ldi	r23, 0x89	; 137
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	0e 94 ab 0b 	call	0x1756	; 0x1756 <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    27fe:	8f 92       	push	r8
    2800:	9f 92       	push	r9
    2802:	af 92       	push	r10
    2804:	bf 92       	push	r11
    2806:	cf 92       	push	r12
    2808:	df 92       	push	r13
    280a:	ef 92       	push	r14
    280c:	ff 92       	push	r15
    280e:	ce 01       	movw	r24, r28
    2810:	8f 54       	subi	r24, 0x4F	; 79
    2812:	9d 4f       	sbci	r25, 0xFD	; 253
    2814:	9f 93       	push	r25
    2816:	8f 93       	push	r24
    2818:	1f 93       	push	r17
    281a:	0f 93       	push	r16
    281c:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2820:	42 e0       	ldi	r20, 0x02	; 2
    2822:	b8 01       	movw	r22, r16
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	0e 94 ab 0b 	call	0x1756	; 0x1756 <writestr_OLED>
			break;
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	58 c0       	rjmp	.+176    	; 0x28e0 <report+0xb96>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    2830:	ce 01       	movw	r24, r28
    2832:	86 5f       	subi	r24, 0xF6	; 246
    2834:	9e 4f       	sbci	r25, 0xFE	; 254
    2836:	0e 94 57 06 	call	0xcae	; 0xcae <get_VERSION>
			get_time(currenttime);
    283a:	ce 01       	movw	r24, r28
    283c:	8b 5e       	subi	r24, 0xEB	; 235
    283e:	9e 4f       	sbci	r25, 0xFE	; 254
    2840:	0e 94 d6 05 	call	0xbac	; 0xbac <get_time>
			sprintf(outbuf, format_VER, get_SPECID, currenttime, version, pcmd[cstack].cid);
    2844:	24 e3       	ldi	r18, 0x34	; 52
    2846:	20 9f       	mul	r18, r16
    2848:	c0 01       	movw	r24, r0
    284a:	21 9f       	mul	r18, r17
    284c:	90 0d       	add	r25, r0
    284e:	11 24       	eor	r1, r1
    2850:	8e 5c       	subi	r24, 0xCE	; 206
    2852:	97 4d       	sbci	r25, 0xD7	; 215
    2854:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2858:	22 ff       	sbrs	r18, 2
    285a:	03 c0       	rjmp	.+6      	; 0x2862 <report+0xb18>
    285c:	22 e0       	ldi	r18, 0x02	; 2
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <report+0xb1c>
    2862:	21 e0       	ldi	r18, 0x01	; 1
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	9f 93       	push	r25
    2868:	8f 93       	push	r24
    286a:	ce 01       	movw	r24, r28
    286c:	86 5f       	subi	r24, 0xF6	; 246
    286e:	9e 4f       	sbci	r25, 0xFE	; 254
    2870:	9f 93       	push	r25
    2872:	8f 93       	push	r24
    2874:	0b 96       	adiw	r24, 0x0b	; 11
    2876:	9f 93       	push	r25
    2878:	8f 93       	push	r24
    287a:	3f 93       	push	r19
    287c:	2f 93       	push	r18
    287e:	87 55       	subi	r24, 0x57	; 87
    2880:	9e 4f       	sbci	r25, 0xFE	; 254
    2882:	9f 93       	push	r25
    2884:	8f 93       	push	r24
    2886:	8e 01       	movw	r16, r28
    2888:	0f 5f       	subi	r16, 0xFF	; 255
    288a:	1f 4f       	sbci	r17, 0xFF	; 255
    288c:	1f 93       	push	r17
    288e:	0f 93       	push	r16
    2890:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
			checksum_NMEA(outbuf);
    2894:	c8 01       	movw	r24, r16
    2896:	0e 94 90 0a 	call	0x1520	; 0x1520 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    289a:	f8 01       	movw	r30, r16
    289c:	01 90       	ld	r0, Z+
    289e:	00 20       	and	r0, r0
    28a0:	e9 f7       	brne	.-6      	; 0x289c <report+0xb52>
    28a2:	31 97       	sbiw	r30, 0x01	; 1
    28a4:	af 01       	movw	r20, r30
    28a6:	40 1b       	sub	r20, r16
    28a8:	51 0b       	sbc	r21, r17
    28aa:	b8 01       	movw	r22, r16
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	0e 94 07 1a 	call	0x340e	; 0x340e <send_USART>
			writestr_OLED(1, "specMech Version", 1);
    28b2:	41 e0       	ldi	r20, 0x01	; 1
    28b4:	6e e1       	ldi	r22, 0x1E	; 30
    28b6:	79 e8       	ldi	r23, 0x89	; 137
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	0e 94 ab 0b 	call	0x1756	; 0x1756 <writestr_OLED>
			get_VERSION(outbuf);
    28be:	c8 01       	movw	r24, r16
    28c0:	0e 94 57 06 	call	0xcae	; 0xcae <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    28c4:	42 e0       	ldi	r20, 0x02	; 2
    28c6:	b8 01       	movw	r22, r16
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	0e 94 ab 0b 	call	0x1756	; 0x1756 <writestr_OLED>
			break;
    28ce:	cd bf       	out	0x3d, r28	; 61
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	06 c0       	rjmp	.+12     	; 0x28e0 <report+0xb96>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    28d4:	69 e0       	ldi	r22, 0x09	; 9
    28d6:	7a e8       	ldi	r23, 0x8A	; 138
    28d8:	8a ec       	ldi	r24, 0xCA	; 202
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	0e 94 9a 06 	call	0xd34	; 0xd34 <printError>
			break;
	}

	return(GREATERPROMPT);

}
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	c6 50       	subi	r28, 0x06	; 6
    28e4:	dd 4f       	sbci	r29, 0xFD	; 253
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	df 91       	pop	r29
    28ec:	cf 91       	pop	r28
    28ee:	1f 91       	pop	r17
    28f0:	0f 91       	pop	r16
    28f2:	ff 90       	pop	r15
    28f4:	ef 90       	pop	r14
    28f6:	df 90       	pop	r13
    28f8:	cf 90       	pop	r12
    28fa:	bf 90       	pop	r11
    28fc:	af 90       	pop	r10
    28fe:	9f 90       	pop	r9
    2900:	8f 90       	pop	r8
    2902:	7f 90       	pop	r7
    2904:	6f 90       	pop	r6
    2906:	5f 90       	pop	r5
    2908:	4f 90       	pop	r4
    290a:	3f 90       	pop	r3
    290c:	2f 90       	pop	r2
    290e:	08 95       	ret

00002910 <crc16>:

	Returns:
		The CRC16 value as an unsigned 16-bit word
------------------------------------------------------------------------------*/
uint16_t crc16(uint8_t *packet, uint16_t nBytes)
{
    2910:	dc 01       	movw	r26, r24

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    2912:	40 e0       	ldi	r20, 0x00	; 0
    2914:	50 e0       	ldi	r21, 0x00	; 0
------------------------------------------------------------------------------*/
uint16_t crc16(uint8_t *packet, uint16_t nBytes)
{

	uint8_t bit;
	uint16_t crc = 0;
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	90 e0       	ldi	r25, 0x00	; 0
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    291a:	1b c0       	rjmp	.+54     	; 0x2952 <crc16+0x42>
		crc = crc ^ ((uint16_t) packet[byte] << 8);
    291c:	fd 01       	movw	r30, r26
    291e:	e4 0f       	add	r30, r20
    2920:	f5 1f       	adc	r31, r21
    2922:	20 81       	ld	r18, Z
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	32 2f       	mov	r19, r18
    2928:	22 27       	eor	r18, r18
    292a:	82 27       	eor	r24, r18
    292c:	93 27       	eor	r25, r19
		for (bit = 0; bit < 8; bit++) {
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	0c c0       	rjmp	.+24     	; 0x294a <crc16+0x3a>
			if (crc & 0x8000) {
    2932:	99 23       	and	r25, r25
    2934:	3c f4       	brge	.+14     	; 0x2944 <crc16+0x34>
				crc = (crc << 1) ^ 0x1021;
    2936:	88 0f       	add	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	31 e2       	ldi	r19, 0x21	; 33
    293c:	83 27       	eor	r24, r19
    293e:	30 e1       	ldi	r19, 0x10	; 16
    2940:	93 27       	eor	r25, r19
    2942:	02 c0       	rjmp	.+4      	; 0x2948 <crc16+0x38>
			} else {
				crc = crc << 1;
    2944:	88 0f       	add	r24, r24
    2946:	99 1f       	adc	r25, r25
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
		crc = crc ^ ((uint16_t) packet[byte] << 8);
		for (bit = 0; bit < 8; bit++) {
    2948:	2f 5f       	subi	r18, 0xFF	; 255
    294a:	28 30       	cpi	r18, 0x08	; 8
    294c:	90 f3       	brcs	.-28     	; 0x2932 <crc16+0x22>

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    294e:	4f 5f       	subi	r20, 0xFF	; 255
    2950:	5f 4f       	sbci	r21, 0xFF	; 255
    2952:	46 17       	cp	r20, r22
    2954:	57 07       	cpc	r21, r23
    2956:	10 f3       	brcs	.-60     	; 0x291c <crc16+0xc>
				crc = crc << 1;
			}
		}
	}
	return (crc);
}
    2958:	08 95       	ret

0000295a <get_MOTOREncoder>:
			Bit1: Direction (0=forward, 1-backwards)
			Bit2: Counter overflow (1=overflow occurred, clear after reading)
			Bits 3-7 are "reserved." Bit7 is 1.
------------------------------------------------------------------------------*/
uint8_t get_MOTOREncoder(uint8_t controller, uint8_t command, int32_t *value)
{
    295a:	ef 92       	push	r14
    295c:	ff 92       	push	r15
    295e:	0f 93       	push	r16
    2960:	1f 93       	push	r17
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
    296a:	27 97       	sbiw	r28, 0x07	; 7
    296c:	cd bf       	out	0x3d, r28	; 61
    296e:	de bf       	out	0x3e, r29	; 62
    2970:	8a 01       	movw	r16, r20
	uint8_t i, tbuf[7];
	uint16_t crcReceived, crcExpected;

	recv1_buf.nbytes = 7;			// Set up reply buffer
    2972:	97 e0       	ldi	r25, 0x07	; 7
    2974:	90 93 17 2b 	sts	0x2B17, r25	; 0x802b17 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2978:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x103>
	recv1_buf.done = NO;
    297c:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv1_buf+0x104>

	tbuf[0] = controller;
    2980:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    2982:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);			// Send the command
    2984:	42 e0       	ldi	r20, 0x02	; 2
    2986:	be 01       	movw	r22, r28
    2988:	6f 5f       	subi	r22, 0xFF	; 255
    298a:	7f 4f       	sbci	r23, 0xFF	; 255
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	0e 94 07 1a 	call	0x340e	; 0x340e <send_USART>

	start_TCB0(1);
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	0e 94 d6 18 	call	0x31ac	; 0x31ac <start_TCB0>
	while (recv1_buf.done == NO) {	// Wait for the reply
    299a:	11 c0       	rjmp	.+34     	; 0x29be <get_MOTOREncoder+0x64>
		asm("nop");
    299c:	00 00       	nop
		if (ticks > 50) {			// Timeout
    299e:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    29a2:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    29a6:	c3 97       	sbiw	r24, 0x33	; 51
    29a8:	50 f0       	brcs	.+20     	; 0x29be <get_MOTOREncoder+0x64>
			stop_TCB0();
    29aa:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <stop_TCB0>
			printError(ERR_MTRREADENC, "get_MOTOREncoder timeout");
    29ae:	6a e9       	ldi	r22, 0x9A	; 154
    29b0:	7b e8       	ldi	r23, 0x8B	; 139
    29b2:	80 e3       	ldi	r24, 0x30	; 48
    29b4:	91 e0       	ldi	r25, 0x01	; 1
    29b6:	0e 94 9a 06 	call	0xd34	; 0xd34 <printError>
			return(ERROR);
    29ba:	83 e6       	ldi	r24, 0x63	; 99
    29bc:	74 c0       	rjmp	.+232    	; 0x2aa6 <get_MOTOREncoder+0x14c>
	tbuf[0] = controller;
	tbuf[1] = command;
	send_USART(1, tbuf, 2);			// Send the command

	start_TCB0(1);
	while (recv1_buf.done == NO) {	// Wait for the reply
    29be:	80 91 1a 2b 	lds	r24, 0x2B1A	; 0x802b1a <recv1_buf+0x104>
    29c2:	88 23       	and	r24, r24
    29c4:	59 f3       	breq	.-42     	; 0x299c <get_MOTOREncoder+0x42>
			stop_TCB0();
			printError(ERR_MTRREADENC, "get_MOTOREncoder timeout");
			return(ERROR);
		}
	}
	stop_TCB0();
    29c6:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <stop_TCB0>

	crcReceived = (recv1_buf.data[5] << 8) | recv1_buf.data[6];
    29ca:	e6 e1       	ldi	r30, 0x16	; 22
    29cc:	fa e2       	ldi	r31, 0x2A	; 42
    29ce:	e5 80       	ldd	r14, Z+5	; 0x05
    29d0:	f1 2c       	mov	r15, r1
    29d2:	fe 2c       	mov	r15, r14
    29d4:	ee 24       	eor	r14, r14
    29d6:	86 81       	ldd	r24, Z+6	; 0x06
    29d8:	e8 2a       	or	r14, r24

	for (i = 2; i < 7; i++) {		// Compute expected crc value
    29da:	22 e0       	ldi	r18, 0x02	; 2
    29dc:	0e c0       	rjmp	.+28     	; 0x29fa <get_MOTOREncoder+0xa0>
		tbuf[i] = recv1_buf.data[i-2];
    29de:	82 2f       	mov	r24, r18
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	fc 01       	movw	r30, r24
    29e4:	ec 5e       	subi	r30, 0xEC	; 236
    29e6:	f5 4d       	sbci	r31, 0xD5	; 213
    29e8:	30 81       	ld	r19, Z
    29ea:	e1 e0       	ldi	r30, 0x01	; 1
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	ec 0f       	add	r30, r28
    29f0:	fd 1f       	adc	r31, r29
    29f2:	e8 0f       	add	r30, r24
    29f4:	f9 1f       	adc	r31, r25
    29f6:	30 83       	st	Z, r19
	}
	stop_TCB0();

	crcReceived = (recv1_buf.data[5] << 8) | recv1_buf.data[6];

	for (i = 2; i < 7; i++) {		// Compute expected crc value
    29f8:	2f 5f       	subi	r18, 0xFF	; 255
    29fa:	27 30       	cpi	r18, 0x07	; 7
    29fc:	80 f3       	brcs	.-32     	; 0x29de <get_MOTOREncoder+0x84>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 7);
    29fe:	67 e0       	ldi	r22, 0x07	; 7
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	ce 01       	movw	r24, r28
    2a04:	01 96       	adiw	r24, 0x01	; 1
    2a06:	0e 94 88 14 	call	0x2910	; 0x2910 <crc16>

	if (crcReceived != crcExpected) {
    2a0a:	e8 16       	cp	r14, r24
    2a0c:	f9 06       	cpc	r15, r25
    2a0e:	71 f0       	breq	.+28     	; 0x2a2c <get_MOTOREncoder+0xd2>
		*value = 0;
    2a10:	d8 01       	movw	r26, r16
    2a12:	1d 92       	st	X+, r1
    2a14:	1d 92       	st	X+, r1
    2a16:	1d 92       	st	X+, r1
    2a18:	1c 92       	st	X, r1
    2a1a:	13 97       	sbiw	r26, 0x03	; 3
		printError(ERR_MTRENCCRC, "get_MOTOREncoder CRC");
    2a1c:	63 eb       	ldi	r22, 0xB3	; 179
    2a1e:	7b e8       	ldi	r23, 0x8B	; 139
    2a20:	81 e3       	ldi	r24, 0x31	; 49
    2a22:	91 e0       	ldi	r25, 0x01	; 1
    2a24:	0e 94 9a 06 	call	0xd34	; 0xd34 <printError>
		return(ERROR);
    2a28:	83 e6       	ldi	r24, 0x63	; 99
    2a2a:	3d c0       	rjmp	.+122    	; 0x2aa6 <get_MOTOREncoder+0x14c>
	}

	*value =  (uint32_t) recv1_buf.data[0] << 24;
    2a2c:	26 e1       	ldi	r18, 0x16	; 22
    2a2e:	3a e2       	ldi	r19, 0x2A	; 42
    2a30:	f9 01       	movw	r30, r18
    2a32:	80 81       	ld	r24, Z
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	a0 e0       	ldi	r26, 0x00	; 0
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	78 2f       	mov	r23, r24
    2a3c:	66 27       	eor	r22, r22
    2a3e:	55 27       	eor	r21, r21
    2a40:	44 27       	eor	r20, r20
    2a42:	d8 01       	movw	r26, r16
    2a44:	4d 93       	st	X+, r20
    2a46:	5d 93       	st	X+, r21
    2a48:	6d 93       	st	X+, r22
    2a4a:	7c 93       	st	X, r23
    2a4c:	13 97       	sbiw	r26, 0x03	; 3
	*value |= (uint32_t) recv1_buf.data[1] << 16;
    2a4e:	91 81       	ldd	r25, Z+1	; 0x01
    2a50:	89 2f       	mov	r24, r25
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	a0 e0       	ldi	r26, 0x00	; 0
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	dc 01       	movw	r26, r24
    2a5a:	99 27       	eor	r25, r25
    2a5c:	88 27       	eor	r24, r24
    2a5e:	84 2b       	or	r24, r20
    2a60:	95 2b       	or	r25, r21
    2a62:	a6 2b       	or	r26, r22
    2a64:	b7 2b       	or	r27, r23
    2a66:	f8 01       	movw	r30, r16
    2a68:	80 83       	st	Z, r24
    2a6a:	91 83       	std	Z+1, r25	; 0x01
    2a6c:	a2 83       	std	Z+2, r26	; 0x02
    2a6e:	b3 83       	std	Z+3, r27	; 0x03
	*value |= (uint32_t) recv1_buf.data[2] << 8;
    2a70:	f9 01       	movw	r30, r18
    2a72:	42 81       	ldd	r20, Z+2	; 0x02
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	60 e0       	ldi	r22, 0x00	; 0
    2a78:	70 e0       	ldi	r23, 0x00	; 0
    2a7a:	76 2f       	mov	r23, r22
    2a7c:	65 2f       	mov	r22, r21
    2a7e:	54 2f       	mov	r21, r20
    2a80:	44 27       	eor	r20, r20
    2a82:	84 2b       	or	r24, r20
    2a84:	95 2b       	or	r25, r21
    2a86:	a6 2b       	or	r26, r22
    2a88:	b7 2b       	or	r27, r23
    2a8a:	f8 01       	movw	r30, r16
    2a8c:	80 83       	st	Z, r24
    2a8e:	91 83       	std	Z+1, r25	; 0x01
    2a90:	a2 83       	std	Z+2, r26	; 0x02
    2a92:	b3 83       	std	Z+3, r27	; 0x03
	*value |= (uint32_t) recv1_buf.data[3];
    2a94:	f9 01       	movw	r30, r18
    2a96:	23 81       	ldd	r18, Z+3	; 0x03
    2a98:	82 2b       	or	r24, r18
    2a9a:	f8 01       	movw	r30, r16
    2a9c:	80 83       	st	Z, r24
    2a9e:	91 83       	std	Z+1, r25	; 0x01
    2aa0:	a2 83       	std	Z+2, r26	; 0x02
    2aa2:	b3 83       	std	Z+3, r27	; 0x03

//	status = recv1_buf.data[4];

	return(NOERROR);
    2aa4:	80 e0       	ldi	r24, 0x00	; 0

}
    2aa6:	27 96       	adiw	r28, 0x07	; 7
    2aa8:	cd bf       	out	0x3d, r28	; 61
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	df 91       	pop	r29
    2aae:	cf 91       	pop	r28
    2ab0:	1f 91       	pop	r17
    2ab2:	0f 91       	pop	r16
    2ab4:	ff 90       	pop	r15
    2ab6:	ef 90       	pop	r14
    2ab8:	08 95       	ret

00002aba <get_MOTORFloat>:
	Returns:
		ERROR: USART timeout or CRC check error
		NOERROR
------------------------------------------------------------------------------*/
uint8_t get_MOTORFloat(uint8_t controller, uint8_t command, float *value)
{
    2aba:	af 92       	push	r10
    2abc:	bf 92       	push	r11
    2abe:	cf 92       	push	r12
    2ac0:	df 92       	push	r13
    2ac2:	ef 92       	push	r14
    2ac4:	ff 92       	push	r15
    2ac6:	0f 93       	push	r16
    2ac8:	1f 93       	push	r17
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29
    2ace:	00 d0       	rcall	.+0      	; 0x2ad0 <get_MOTORFloat+0x16>
    2ad0:	00 d0       	rcall	.+0      	; 0x2ad2 <get_MOTORFloat+0x18>
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    2ad6:	a8 2e       	mov	r10, r24
    2ad8:	b6 2e       	mov	r11, r22
    2ada:	7a 01       	movw	r14, r20
	uint8_t tbuf[4];
	uint16_t tempval, crcReceived, crcExpected;

	recv1_buf.nbytes = 4;				// Set up receive buffer
    2adc:	84 e0       	ldi	r24, 0x04	; 4
    2ade:	80 93 17 2b 	sts	0x2B17, r24	; 0x802b17 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2ae2:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2ae6:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv1_buf+0x104>

	tbuf[0] = controller;
    2aea:	a9 82       	std	Y+1, r10	; 0x01
	tbuf[1] = command;
    2aec:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);				// Send command
    2aee:	42 e0       	ldi	r20, 0x02	; 2
    2af0:	be 01       	movw	r22, r28
    2af2:	6f 5f       	subi	r22, 0xFF	; 255
    2af4:	7f 4f       	sbci	r23, 0xFF	; 255
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	0e 94 07 1a 	call	0x340e	; 0x340e <send_USART>

	start_TCB0(1);
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	0e 94 d6 18 	call	0x31ac	; 0x31ac <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
    2b04:	80 91 1a 2b 	lds	r24, 0x2B1A	; 0x802b1a <recv1_buf+0x104>
    2b08:	81 30       	cpi	r24, 0x01	; 1
    2b0a:	81 f0       	breq	.+32     	; 0x2b2c <get_MOTORFloat+0x72>
			break;
		}
		if (ticks > 50) {				// Timeout
    2b0c:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    2b10:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    2b14:	c3 97       	sbiw	r24, 0x33	; 51
    2b16:	b0 f3       	brcs	.-20     	; 0x2b04 <get_MOTORFloat+0x4a>
			stop_TCB0();
    2b18:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <stop_TCB0>
			printError(ERR_MTRREADENC, "ROBOFloat timeout");
    2b1c:	68 ec       	ldi	r22, 0xC8	; 200
    2b1e:	7b e8       	ldi	r23, 0x8B	; 139
    2b20:	80 e3       	ldi	r24, 0x30	; 48
    2b22:	91 e0       	ldi	r25, 0x01	; 1
    2b24:	0e 94 9a 06 	call	0xd34	; 0xd34 <printError>
			return(ERROR);
    2b28:	83 e6       	ldi	r24, 0x63	; 99
    2b2a:	37 c0       	rjmp	.+110    	; 0x2b9a <get_MOTORFloat+0xe0>
		}
	}
	stop_TCB0();
    2b2c:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <stop_TCB0>

	tempval = (recv1_buf.data[0] << 8) | recv1_buf.data[1];
    2b30:	e6 e1       	ldi	r30, 0x16	; 22
    2b32:	fa e2       	ldi	r31, 0x2A	; 42
    2b34:	90 81       	ld	r25, Z
    2b36:	c9 2e       	mov	r12, r25
    2b38:	d1 2c       	mov	r13, r1
    2b3a:	dc 2c       	mov	r13, r12
    2b3c:	cc 24       	eor	r12, r12
    2b3e:	81 81       	ldd	r24, Z+1	; 0x01
    2b40:	c8 2a       	or	r12, r24
	crcReceived = (recv1_buf.data[2] << 8) | recv1_buf.data[3];
    2b42:	02 81       	ldd	r16, Z+2	; 0x02
    2b44:	10 e0       	ldi	r17, 0x00	; 0
    2b46:	10 2f       	mov	r17, r16
    2b48:	00 27       	eor	r16, r16
    2b4a:	23 81       	ldd	r18, Z+3	; 0x03
    2b4c:	02 2b       	or	r16, r18

	tbuf[0] = controller;
    2b4e:	a9 82       	std	Y+1, r10	; 0x01
	tbuf[1] = command;
    2b50:	ba 82       	std	Y+2, r11	; 0x02
	tbuf[2] = recv1_buf.data[0];
    2b52:	9b 83       	std	Y+3, r25	; 0x03
	tbuf[3] = recv1_buf.data[1];
    2b54:	8c 83       	std	Y+4, r24	; 0x04
	crcExpected = crc16(tbuf, 4);
    2b56:	64 e0       	ldi	r22, 0x04	; 4
    2b58:	70 e0       	ldi	r23, 0x00	; 0
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	01 96       	adiw	r24, 0x01	; 1
    2b5e:	0e 94 88 14 	call	0x2910	; 0x2910 <crc16>

	if (crcExpected != crcReceived) {
    2b62:	08 17       	cp	r16, r24
    2b64:	19 07       	cpc	r17, r25
    2b66:	41 f0       	breq	.+16     	; 0x2b78 <get_MOTORFloat+0xbe>
		printError(ERR_MTRENCCRC, "get_MOTORFloat CRC");
    2b68:	6a ed       	ldi	r22, 0xDA	; 218
    2b6a:	7b e8       	ldi	r23, 0x8B	; 139
    2b6c:	81 e3       	ldi	r24, 0x31	; 49
    2b6e:	91 e0       	ldi	r25, 0x01	; 1
    2b70:	0e 94 9a 06 	call	0xd34	; 0xd34 <printError>
		return(ERROR);
    2b74:	83 e6       	ldi	r24, 0x63	; 99
    2b76:	11 c0       	rjmp	.+34     	; 0x2b9a <get_MOTORFloat+0xe0>
	} else {
		*value = ((float) tempval / 10.0);
    2b78:	b6 01       	movw	r22, r12
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	0e 94 c6 1c 	call	0x398c	; 0x398c <__floatunsisf>
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	40 e2       	ldi	r20, 0x20	; 32
    2b88:	51 e4       	ldi	r21, 0x41	; 65
    2b8a:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <__divsf3>
    2b8e:	f7 01       	movw	r30, r14
    2b90:	60 83       	st	Z, r22
    2b92:	71 83       	std	Z+1, r23	; 0x01
    2b94:	82 83       	std	Z+2, r24	; 0x02
    2b96:	93 83       	std	Z+3, r25	; 0x03
		return(NOERROR);
    2b98:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2b9a:	24 96       	adiw	r28, 0x04	; 4
    2b9c:	cd bf       	out	0x3d, r28	; 61
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	df 91       	pop	r29
    2ba2:	cf 91       	pop	r28
    2ba4:	1f 91       	pop	r17
    2ba6:	0f 91       	pop	r16
    2ba8:	ff 90       	pop	r15
    2baa:	ef 90       	pop	r14
    2bac:	df 90       	pop	r13
    2bae:	cf 90       	pop	r12
    2bb0:	bf 90       	pop	r11
    2bb2:	af 90       	pop	r10
    2bb4:	08 95       	ret

00002bb6 <get_MOTORInt32>:
	Returns:
		ERROR: USART timeout or CRC error
		NOERROR
------------------------------------------------------------------------------*/
uint8_t get_MOTORInt32(uint8_t controller, uint8_t command, uint32_t *value)
{
    2bb6:	ef 92       	push	r14
    2bb8:	ff 92       	push	r15
    2bba:	0f 93       	push	r16
    2bbc:	1f 93       	push	r17
    2bbe:	cf 93       	push	r28
    2bc0:	df 93       	push	r29
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	26 97       	sbiw	r28, 0x06	; 6
    2bc8:	cd bf       	out	0x3d, r28	; 61
    2bca:	de bf       	out	0x3e, r29	; 62
    2bcc:	8a 01       	movw	r16, r20
	uint8_t i, tbuf[6];
	uint16_t crcReceived, crcExpected;
	uint32_t tempval;

	recv1_buf.nbytes = 6;				// Set up receive buffer
    2bce:	96 e0       	ldi	r25, 0x06	; 6
    2bd0:	90 93 17 2b 	sts	0x2B17, r25	; 0x802b17 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2bd4:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2bd8:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv1_buf+0x104>

	tbuf[0] = controller;
    2bdc:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    2bde:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);				// Send command
    2be0:	42 e0       	ldi	r20, 0x02	; 2
    2be2:	be 01       	movw	r22, r28
    2be4:	6f 5f       	subi	r22, 0xFF	; 255
    2be6:	7f 4f       	sbci	r23, 0xFF	; 255
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	0e 94 07 1a 	call	0x340e	; 0x340e <send_USART>

	start_TCB0(1);
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	0e 94 d6 18 	call	0x31ac	; 0x31ac <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
    2bf6:	80 91 1a 2b 	lds	r24, 0x2B1A	; 0x802b1a <recv1_buf+0x104>
    2bfa:	81 30       	cpi	r24, 0x01	; 1
    2bfc:	61 f4       	brne	.+24     	; 0x2c16 <get_MOTORInt32+0x60>
			stop_TCB0();
    2bfe:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "get_MOTORInt32 timeout");
			return(ERROR);
		}
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];
    2c02:	e6 e1       	ldi	r30, 0x16	; 22
    2c04:	fa e2       	ldi	r31, 0x2A	; 42
    2c06:	e4 80       	ldd	r14, Z+4	; 0x04
    2c08:	f1 2c       	mov	r15, r1
    2c0a:	fe 2c       	mov	r15, r14
    2c0c:	ee 24       	eor	r14, r14
    2c0e:	85 81       	ldd	r24, Z+5	; 0x05
    2c10:	e8 2a       	or	r14, r24

	for (i = 2; i < 6; i++) {			// Compute expected CRC
    2c12:	22 e0       	ldi	r18, 0x02	; 2
    2c14:	1e c0       	rjmp	.+60     	; 0x2c52 <get_MOTORInt32+0x9c>
	for (;;) {
		if (recv1_buf.done == YES) {	// Receive reply
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// Timeout
    2c16:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    2c1a:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    2c1e:	c3 97       	sbiw	r24, 0x33	; 51
    2c20:	50 f3       	brcs	.-44     	; 0x2bf6 <get_MOTORInt32+0x40>
			stop_TCB0();
    2c22:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "get_MOTORInt32 timeout");
    2c26:	6d ee       	ldi	r22, 0xED	; 237
    2c28:	7b e8       	ldi	r23, 0x8B	; 139
    2c2a:	8f e2       	ldi	r24, 0x2F	; 47
    2c2c:	91 e0       	ldi	r25, 0x01	; 1
    2c2e:	0e 94 9a 06 	call	0xd34	; 0xd34 <printError>
			return(ERROR);
    2c32:	83 e6       	ldi	r24, 0x63	; 99
    2c34:	54 c0       	rjmp	.+168    	; 0x2cde <get_MOTORInt32+0x128>
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {			// Compute expected CRC
		tbuf[i] = recv1_buf.data[i-2];
    2c36:	82 2f       	mov	r24, r18
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	ec 5e       	subi	r30, 0xEC	; 236
    2c3e:	f5 4d       	sbci	r31, 0xD5	; 213
    2c40:	30 81       	ld	r19, Z
    2c42:	e1 e0       	ldi	r30, 0x01	; 1
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	ec 0f       	add	r30, r28
    2c48:	fd 1f       	adc	r31, r29
    2c4a:	e8 0f       	add	r30, r24
    2c4c:	f9 1f       	adc	r31, r25
    2c4e:	30 83       	st	Z, r19
		}
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {			// Compute expected CRC
    2c50:	2f 5f       	subi	r18, 0xFF	; 255
    2c52:	26 30       	cpi	r18, 0x06	; 6
    2c54:	80 f3       	brcs	.-32     	; 0x2c36 <get_MOTORInt32+0x80>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 6);
    2c56:	66 e0       	ldi	r22, 0x06	; 6
    2c58:	70 e0       	ldi	r23, 0x00	; 0
    2c5a:	ce 01       	movw	r24, r28
    2c5c:	01 96       	adiw	r24, 0x01	; 1
    2c5e:	0e 94 88 14 	call	0x2910	; 0x2910 <crc16>

	if (crcReceived != crcExpected) {
    2c62:	e8 16       	cp	r14, r24
    2c64:	f9 06       	cpc	r15, r25
    2c66:	89 f0       	breq	.+34     	; 0x2c8a <get_MOTORInt32+0xd4>
		printError(ERR_MTRENCCRC, "get_MOTORInt32 CRC error");
    2c68:	64 e0       	ldi	r22, 0x04	; 4
    2c6a:	7c e8       	ldi	r23, 0x8C	; 140
    2c6c:	81 e3       	ldi	r24, 0x31	; 49
    2c6e:	91 e0       	ldi	r25, 0x01	; 1
    2c70:	0e 94 9a 06 	call	0xd34	; 0xd34 <printError>
		*value = 0x7FFFFFFF;
    2c74:	8f ef       	ldi	r24, 0xFF	; 255
    2c76:	9f ef       	ldi	r25, 0xFF	; 255
    2c78:	af ef       	ldi	r26, 0xFF	; 255
    2c7a:	bf e7       	ldi	r27, 0x7F	; 127
    2c7c:	f8 01       	movw	r30, r16
    2c7e:	80 83       	st	Z, r24
    2c80:	91 83       	std	Z+1, r25	; 0x01
    2c82:	a2 83       	std	Z+2, r26	; 0x02
    2c84:	b3 83       	std	Z+3, r27	; 0x03
		return(ERROR);
    2c86:	83 e6       	ldi	r24, 0x63	; 99
    2c88:	2a c0       	rjmp	.+84     	; 0x2cde <get_MOTORInt32+0x128>
	}

	tempval =  (uint32_t) recv1_buf.data[0] << 24;
    2c8a:	e6 e1       	ldi	r30, 0x16	; 22
    2c8c:	fa e2       	ldi	r31, 0x2A	; 42
    2c8e:	80 81       	ld	r24, Z
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	a0 e0       	ldi	r26, 0x00	; 0
    2c94:	b0 e0       	ldi	r27, 0x00	; 0
    2c96:	78 2f       	mov	r23, r24
    2c98:	66 27       	eor	r22, r22
    2c9a:	55 27       	eor	r21, r21
    2c9c:	44 27       	eor	r20, r20
	tempval |= (uint32_t) recv1_buf.data[1] << 16;
    2c9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ca0:	89 2f       	mov	r24, r25
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	a0 e0       	ldi	r26, 0x00	; 0
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	dc 01       	movw	r26, r24
    2caa:	99 27       	eor	r25, r25
    2cac:	88 27       	eor	r24, r24
    2cae:	84 2b       	or	r24, r20
    2cb0:	95 2b       	or	r25, r21
    2cb2:	a6 2b       	or	r26, r22
    2cb4:	b7 2b       	or	r27, r23
	tempval |= (uint32_t) recv1_buf.data[2] << 8;
    2cb6:	42 81       	ldd	r20, Z+2	; 0x02
    2cb8:	50 e0       	ldi	r21, 0x00	; 0
    2cba:	60 e0       	ldi	r22, 0x00	; 0
    2cbc:	70 e0       	ldi	r23, 0x00	; 0
    2cbe:	76 2f       	mov	r23, r22
    2cc0:	65 2f       	mov	r22, r21
    2cc2:	54 2f       	mov	r21, r20
    2cc4:	44 27       	eor	r20, r20
    2cc6:	84 2b       	or	r24, r20
    2cc8:	95 2b       	or	r25, r21
    2cca:	a6 2b       	or	r26, r22
    2ccc:	b7 2b       	or	r27, r23
	tempval |= (uint32_t) recv1_buf.data[3];
    2cce:	23 81       	ldd	r18, Z+3	; 0x03
    2cd0:	82 2b       	or	r24, r18
	*value = tempval;
    2cd2:	f8 01       	movw	r30, r16
    2cd4:	80 83       	st	Z, r24
    2cd6:	91 83       	std	Z+1, r25	; 0x01
    2cd8:	a2 83       	std	Z+2, r26	; 0x02
    2cda:	b3 83       	std	Z+3, r27	; 0x03

	return(NOERROR);
    2cdc:	80 e0       	ldi	r24, 0x00	; 0

}
    2cde:	26 96       	adiw	r28, 0x06	; 6
    2ce0:	cd bf       	out	0x3d, r28	; 61
    2ce2:	de bf       	out	0x3e, r29	; 62
    2ce4:	df 91       	pop	r29
    2ce6:	cf 91       	pop	r28
    2ce8:	1f 91       	pop	r17
    2cea:	0f 91       	pop	r16
    2cec:	ff 90       	pop	r15
    2cee:	ef 90       	pop	r14
    2cf0:	08 95       	ret

00002cf2 <move_MOTORAbsolute>:
	Returns:
		ERROR on USART timeout or bad (not 0xFF) ack
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTORAbsolute(uint8_t controller, int32_t newPosition)
{
    2cf2:	cf 93       	push	r28
    2cf4:	df 93       	push	r29
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	65 97       	sbiw	r28, 0x15	; 21
    2cfc:	cd bf       	out	0x3d, r28	; 61
    2cfe:	de bf       	out	0x3e, r29	; 62
	acceleration = ACCELERATION;
	deceleration = DECELERATION;
	speed = SPEED;
	buffer = 0;							// 0 -> command is buffered

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    2d00:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <recv1_buf>
	recv1_buf.nbytes = 1;
    2d04:	91 e0       	ldi	r25, 0x01	; 1
    2d06:	90 93 17 2b 	sts	0x2B17, r25	; 0x802b17 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2d0a:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2d0e:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv1_buf+0x104>

	tbuf[0] = controller;
    2d12:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBODRIVETO;				// Command 65
    2d14:	81 e4       	ldi	r24, 0x41	; 65
    2d16:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (acceleration >> 24) & 0XFF;
    2d18:	1b 82       	std	Y+3, r1	; 0x03
	tbuf[3] = (acceleration >> 16) & 0xFF;
    2d1a:	1c 82       	std	Y+4, r1	; 0x04
	tbuf[4] = (acceleration >> 8) & 0xFF;
    2d1c:	80 e2       	ldi	r24, 0x20	; 32
    2d1e:	8d 83       	std	Y+5, r24	; 0x05
	tbuf[5] = (acceleration) & 0xFF;
    2d20:	1e 82       	std	Y+6, r1	; 0x06
	tbuf[6] = (speed >> 24) & 0xFF;
    2d22:	1f 82       	std	Y+7, r1	; 0x07
	tbuf[7] = (speed >> 16) & 0xFF;
    2d24:	18 86       	std	Y+8, r1	; 0x08
	tbuf[8] = (speed >> 8) & 0xFF;
    2d26:	90 e4       	ldi	r25, 0x40	; 64
    2d28:	99 87       	std	Y+9, r25	; 0x09
	tbuf[9] = (speed) & 0xFF;
    2d2a:	1a 86       	std	Y+10, r1	; 0x0a
	tbuf[10] = (deceleration >> 24) & 0xFF;
    2d2c:	1b 86       	std	Y+11, r1	; 0x0b
	tbuf[11] = (deceleration >> 16) & 0xFF;
    2d2e:	1c 86       	std	Y+12, r1	; 0x0c
	tbuf[12] = (deceleration >> 8) & 0xFF;
    2d30:	8d 87       	std	Y+13, r24	; 0x0d
	tbuf[13] = (deceleration) & 0xFF;
    2d32:	1e 86       	std	Y+14, r1	; 0x0e
	tbuf[14] = (newPosition >> 24) & 0xFF;
    2d34:	7f 87       	std	Y+15, r23	; 0x0f
	tbuf[15] = (newPosition >> 16) & 0xFF;
    2d36:	68 8b       	std	Y+16, r22	; 0x10
	tbuf[16] = (newPosition >> 8) & 0xFF;
    2d38:	59 8b       	std	Y+17, r21	; 0x11
	tbuf[17] = (newPosition) & 0xFF;
    2d3a:	4a 8b       	std	Y+18, r20	; 0x12
	tbuf[18] = buffer;
    2d3c:	1b 8a       	std	Y+19, r1	; 0x13
	crc = crc16(tbuf, 19);
    2d3e:	63 e1       	ldi	r22, 0x13	; 19
    2d40:	70 e0       	ldi	r23, 0x00	; 0
    2d42:	ce 01       	movw	r24, r28
    2d44:	01 96       	adiw	r24, 0x01	; 1
    2d46:	0e 94 88 14 	call	0x2910	; 0x2910 <crc16>
	tbuf[19] = (crc >> 8) & 0xFF;
    2d4a:	9c 8b       	std	Y+20, r25	; 0x14
	tbuf[20] = crc & 0xFF;
    2d4c:	8d 8b       	std	Y+21, r24	; 0x15

	send_USART(1, tbuf, 21);			// Send command
    2d4e:	45 e1       	ldi	r20, 0x15	; 21
    2d50:	be 01       	movw	r22, r28
    2d52:	6f 5f       	subi	r22, 0xFF	; 255
    2d54:	7f 4f       	sbci	r23, 0xFF	; 255
    2d56:	81 e0       	ldi	r24, 0x01	; 1
    2d58:	0e 94 07 1a 	call	0x340e	; 0x340e <send_USART>

	start_TCB0(1);						// Start 1 ms ticks timer
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	0e 94 d6 18 	call	0x31ac	; 0x31ac <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    2d64:	80 91 1a 2b 	lds	r24, 0x2B1A	; 0x802b1a <recv1_buf+0x104>
    2d68:	81 30       	cpi	r24, 0x01	; 1
    2d6a:	41 f4       	brne	.+16     	; 0x2d7c <move_MOTORAbsolute+0x8a>
			stop_TCB0();
    2d6c:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute timeout");
			return(ERROR);
		}
	}

	if (recv1_buf.data[0] != 0xFF) {
    2d70:	80 91 16 2a 	lds	r24, 0x2A16	; 0x802a16 <recv1_buf>
    2d74:	8f 3f       	cpi	r24, 0xFF	; 255
    2d76:	91 f4       	brne	.+36     	; 0x2d9c <move_MOTORAbsolute+0xaa>
		printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute ack");		
		return(ERROR);
	}

	return(NOERROR);
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	17 c0       	rjmp	.+46     	; 0x2daa <move_MOTORAbsolute+0xb8>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// 4 ms just barely works at 38400 baud
    2d7c:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    2d80:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    2d84:	c3 97       	sbiw	r24, 0x33	; 51
    2d86:	70 f3       	brcs	.-36     	; 0x2d64 <move_MOTORAbsolute+0x72>
			stop_TCB0();
    2d88:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <stop_TCB0>
			printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute timeout");
    2d8c:	6d e1       	ldi	r22, 0x1D	; 29
    2d8e:	7c e8       	ldi	r23, 0x8C	; 140
    2d90:	8f e2       	ldi	r24, 0x2F	; 47
    2d92:	91 e0       	ldi	r25, 0x01	; 1
    2d94:	0e 94 9a 06 	call	0xd34	; 0xd34 <printError>
			return(ERROR);
    2d98:	83 e6       	ldi	r24, 0x63	; 99
    2d9a:	07 c0       	rjmp	.+14     	; 0x2daa <move_MOTORAbsolute+0xb8>
		}
	}

	if (recv1_buf.data[0] != 0xFF) {
		printError(ERR_MTRTIMEOUT, "move_MOTORAbsolute ack");		
    2d9c:	68 e3       	ldi	r22, 0x38	; 56
    2d9e:	7c e8       	ldi	r23, 0x8C	; 140
    2da0:	8f e2       	ldi	r24, 0x2F	; 47
    2da2:	91 e0       	ldi	r25, 0x01	; 1
    2da4:	0e 94 9a 06 	call	0xd34	; 0xd34 <printError>
		return(ERROR);
    2da8:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);
}
    2daa:	65 96       	adiw	r28, 0x15	; 21
    2dac:	cd bf       	out	0x3d, r28	; 61
    2dae:	de bf       	out	0x3e, r29	; 62
    2db0:	df 91       	pop	r29
    2db2:	cf 91       	pop	r28
    2db4:	08 95       	ret

00002db6 <move_MOTOR>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR(uint8_t cstack)
{
    2db6:	cf 92       	push	r12
    2db8:	df 92       	push	r13
    2dba:	ef 92       	push	r14
    2dbc:	ff 92       	push	r15
    2dbe:	1f 93       	push	r17
    2dc0:	cf 93       	push	r28
    2dc2:	df 93       	push	r29
    2dc4:	00 d0       	rcall	.+0      	; 0x2dc6 <move_MOTOR+0x10>
    2dc6:	00 d0       	rcall	.+0      	; 0x2dc8 <move_MOTOR+0x12>
    2dc8:	cd b7       	in	r28, 0x3d	; 61
    2dca:	de b7       	in	r29, 0x3e	; 62

	uint8_t motor, controller, retval;
	int32_t newPosition, currentPosition;

	motor = pcmd[cstack].cobject;
    2dcc:	e8 2e       	mov	r14, r24
    2dce:	f1 2c       	mov	r15, r1
    2dd0:	84 e3       	ldi	r24, 0x34	; 52
    2dd2:	8e 9d       	mul	r24, r14
    2dd4:	f0 01       	movw	r30, r0
    2dd6:	8f 9d       	mul	r24, r15
    2dd8:	f0 0d       	add	r31, r0
    2dda:	11 24       	eor	r1, r1
    2ddc:	e9 5f       	subi	r30, 0xF9	; 249
    2dde:	f7 4d       	sbci	r31, 0xD7	; 215
    2de0:	81 81       	ldd	r24, Z+1	; 0x01
	switch(motor) {
    2de2:	81 34       	cpi	r24, 0x41	; 65
    2de4:	d0 f0       	brcs	.+52     	; 0x2e1a <move_MOTOR+0x64>
    2de6:	84 34       	cpi	r24, 0x44	; 68
    2de8:	28 f0       	brcs	.+10     	; 0x2df4 <move_MOTOR+0x3e>
    2dea:	9f e9       	ldi	r25, 0x9F	; 159
    2dec:	98 0f       	add	r25, r24
    2dee:	93 30       	cpi	r25, 0x03	; 3
    2df0:	40 f0       	brcs	.+16     	; 0x2e02 <move_MOTOR+0x4c>
    2df2:	13 c0       	rjmp	.+38     	; 0x2e1a <move_MOTOR+0x64>
		case 'A':
		case 'B':
		case 'C':
			controller = motor + 63;
    2df4:	1f e3       	ldi	r17, 0x3F	; 63
    2df6:	18 0f       	add	r17, r24
			currentPosition = 0;
    2df8:	19 82       	std	Y+1, r1	; 0x01
    2dfa:	1a 82       	std	Y+2, r1	; 0x02
    2dfc:	1b 82       	std	Y+3, r1	; 0x03
    2dfe:	1c 82       	std	Y+4, r1	; 0x04
			break;
    2e00:	14 c0       	rjmp	.+40     	; 0x2e2a <move_MOTOR+0x74>

		case 'a':
		case 'b':
		case 'c':
			controller = motor + 31;
    2e02:	1f e1       	ldi	r17, 0x1F	; 31
    2e04:	18 0f       	add	r17, r24
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &currentPosition);
    2e06:	ae 01       	movw	r20, r28
    2e08:	4f 5f       	subi	r20, 0xFF	; 255
    2e0a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e0c:	60 e1       	ldi	r22, 0x10	; 16
    2e0e:	81 2f       	mov	r24, r17
    2e10:	0e 94 ad 14 	call	0x295a	; 0x295a <get_MOTOREncoder>
			if (retval == ERROR) {
    2e14:	83 36       	cpi	r24, 0x63	; 99
    2e16:	49 f4       	brne	.+18     	; 0x2e2a <move_MOTOR+0x74>
    2e18:	39 c0       	rjmp	.+114    	; 0x2e8c <move_MOTOR+0xd6>
				return(ERROR);
			}
			break;

		default:
			printError(ERR_UNKNOWNMTR, "move_MOTOR unknown motor");
    2e1a:	6f e4       	ldi	r22, 0x4F	; 79
    2e1c:	7c e8       	ldi	r23, 0x8C	; 140
    2e1e:	8d e2       	ldi	r24, 0x2D	; 45
    2e20:	91 e0       	ldi	r25, 0x01	; 1
    2e22:	0e 94 9a 06 	call	0xd34	; 0xd34 <printError>
			return(ERROR);
    2e26:	83 e6       	ldi	r24, 0x63	; 99
    2e28:	32 c0       	rjmp	.+100    	; 0x2e8e <move_MOTOR+0xd8>
			break;	
	}

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    2e2a:	84 e3       	ldi	r24, 0x34	; 52
    2e2c:	8e 9d       	mul	r24, r14
    2e2e:	f0 01       	movw	r30, r0
    2e30:	8f 9d       	mul	r24, r15
    2e32:	f0 0d       	add	r31, r0
    2e34:	11 24       	eor	r1, r1
    2e36:	e9 5f       	subi	r30, 0xF9	; 249
    2e38:	f7 4d       	sbci	r31, 0xD7	; 215
    2e3a:	82 81       	ldd	r24, Z+2	; 0x02
    2e3c:	81 11       	cpse	r24, r1
    2e3e:	08 c0       	rjmp	.+16     	; 0x2e50 <move_MOTOR+0x9a>
		printError(ERR_MTRNULLMOVE, "move_MOTOR no position or increment");
    2e40:	68 e6       	ldi	r22, 0x68	; 104
    2e42:	7c e8       	ldi	r23, 0x8C	; 140
    2e44:	83 e3       	ldi	r24, 0x33	; 51
    2e46:	91 e0       	ldi	r25, 0x01	; 1
    2e48:	0e 94 9a 06 	call	0xd34	; 0xd34 <printError>
		return(ERROR);
    2e4c:	83 e6       	ldi	r24, 0x63	; 99
    2e4e:	1f c0       	rjmp	.+62     	; 0x2e8e <move_MOTOR+0xd8>
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);
    2e50:	24 e3       	ldi	r18, 0x34	; 52
    2e52:	2e 9d       	mul	r18, r14
    2e54:	c0 01       	movw	r24, r0
    2e56:	2f 9d       	mul	r18, r15
    2e58:	90 0d       	add	r25, r0
    2e5a:	11 24       	eor	r1, r1
    2e5c:	87 5f       	subi	r24, 0xF7	; 247
    2e5e:	97 4d       	sbci	r25, 0xD7	; 215
    2e60:	0e 94 21 22 	call	0x4442	; 0x4442 <atol>
    2e64:	9b 01       	movw	r18, r22
    2e66:	ac 01       	movw	r20, r24
    2e68:	ac e0       	ldi	r26, 0x0C	; 12
    2e6a:	b1 e0       	ldi	r27, 0x01	; 1
    2e6c:	0e 94 a0 21 	call	0x4340	; 0x4340 <__muluhisi3>
    2e70:	c9 80       	ldd	r12, Y+1	; 0x01
    2e72:	da 80       	ldd	r13, Y+2	; 0x02
    2e74:	eb 80       	ldd	r14, Y+3	; 0x03
    2e76:	fc 80       	ldd	r15, Y+4	; 0x04
    2e78:	ab 01       	movw	r20, r22
    2e7a:	bc 01       	movw	r22, r24
    2e7c:	4c 0d       	add	r20, r12
    2e7e:	5d 1d       	adc	r21, r13
    2e80:	6e 1d       	adc	r22, r14
    2e82:	7f 1d       	adc	r23, r15
	return(move_MOTORAbsolute(controller, newPosition));
    2e84:	81 2f       	mov	r24, r17
    2e86:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <move_MOTORAbsolute>
    2e8a:	01 c0       	rjmp	.+2      	; 0x2e8e <move_MOTOR+0xd8>
		case 'b':
		case 'c':
			controller = motor + 31;
			retval = get_MOTOREncoder(controller, ROBOREADENCODERCOUNT, &currentPosition);
			if (retval == ERROR) {
				return(ERROR);
    2e8c:	83 e6       	ldi	r24, 0x63	; 99
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ROBOCOUNTSPERMICRON);
	return(move_MOTORAbsolute(controller, newPosition));

}
    2e8e:	24 96       	adiw	r28, 0x04	; 4
    2e90:	cd bf       	out	0x3d, r28	; 61
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	1f 91       	pop	r17
    2e9a:	ff 90       	pop	r15
    2e9c:	ef 90       	pop	r14
    2e9e:	df 90       	pop	r13
    2ea0:	cf 90       	pop	r12
    2ea2:	08 95       	ret

00002ea4 <set_MOTOREncoder>:
		Does not print an error. It's only called at reboot. We should have a
		double-check at startup to make sure the encoder values agree before
		a move.
------------------------------------------------------------------------------*/
uint8_t set_MOTOREncoder(uint8_t controller, uint32_t value)
{
    2ea4:	cf 93       	push	r28
    2ea6:	df 93       	push	r29
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
    2eac:	26 97       	sbiw	r28, 0x06	; 6
    2eae:	cd bf       	out	0x3d, r28	; 61
    2eb0:	de bf       	out	0x3e, r29	; 62

	uint8_t tbuf[6];

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    2eb2:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <recv1_buf>
	recv1_buf.nbytes = 1;
    2eb6:	91 e0       	ldi	r25, 0x01	; 1
    2eb8:	90 93 17 2b 	sts	0x2B17, r25	; 0x802b17 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    2ebc:	10 92 19 2b 	sts	0x2B19, r1	; 0x802b19 <recv1_buf+0x103>
	recv1_buf.done = NO;
    2ec0:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv1_buf+0x104>

	tbuf[0] = controller;
    2ec4:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = ROBOSETENCODER;
    2ec6:	86 e1       	ldi	r24, 0x16	; 22
    2ec8:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = (value >> 24) & 0xFF;
    2eca:	7b 83       	std	Y+3, r23	; 0x03
	tbuf[3] = (value >> 16) & 0xFF;
    2ecc:	6c 83       	std	Y+4, r22	; 0x04
	tbuf[4] = (value >> 8) & 0xFF;
    2ece:	5d 83       	std	Y+5, r21	; 0x05
	tbuf[5] = value & 0xFF;
    2ed0:	4e 83       	std	Y+6, r20	; 0x06

	send_USART(1, tbuf, 6);				// Send the command
    2ed2:	46 e0       	ldi	r20, 0x06	; 6
    2ed4:	be 01       	movw	r22, r28
    2ed6:	6f 5f       	subi	r22, 0xFF	; 255
    2ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	0e 94 07 1a 	call	0x340e	; 0x340e <send_USART>

	start_TCB0(1);						// Start 1 ms ticks timer
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	0e 94 d6 18 	call	0x31ac	; 0x31ac <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    2ee8:	80 91 1a 2b 	lds	r24, 0x2B1A	; 0x802b1a <recv1_buf+0x104>
    2eec:	81 30       	cpi	r24, 0x01	; 1
    2eee:	41 f4       	brne	.+16     	; 0x2f00 <set_MOTOREncoder+0x5c>
			stop_TCB0();
    2ef0:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <stop_TCB0>
			stop_TCB0();
			return(ERROR);
		}
	}

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
    2ef4:	80 91 16 2a 	lds	r24, 0x2A16	; 0x802a16 <recv1_buf>
    2ef8:	8f 3f       	cpi	r24, 0xFF	; 255
    2efa:	61 f0       	breq	.+24     	; 0x2f14 <set_MOTOREncoder+0x70>
		return(ERROR);
    2efc:	83 e6       	ldi	r24, 0x63	; 99
    2efe:	0b c0       	rjmp	.+22     	; 0x2f16 <set_MOTOREncoder+0x72>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
			stop_TCB0();
			break;
		}
		if (ticks > 50) {				// 4 ms barely works at 38400 baud
    2f00:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    2f04:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    2f08:	c3 97       	sbiw	r24, 0x33	; 51
    2f0a:	70 f3       	brcs	.-36     	; 0x2ee8 <set_MOTOREncoder+0x44>
			stop_TCB0();
    2f0c:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <stop_TCB0>
			return(ERROR);
    2f10:	83 e6       	ldi	r24, 0x63	; 99
    2f12:	01 c0       	rjmp	.+2      	; 0x2f16 <set_MOTOREncoder+0x72>

	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
		return(ERROR);
	}

	return(NOERROR);
    2f14:	80 e0       	ldi	r24, 0x00	; 0

}
    2f16:	26 96       	adiw	r28, 0x06	; 6
    2f18:	cd bf       	out	0x3d, r28	; 61
    2f1a:	de bf       	out	0x3e, r29	; 62
    2f1c:	df 91       	pop	r29
    2f1e:	cf 91       	pop	r28
    2f20:	08 95       	ret

00002f22 <init_MOTORS>:
	Returns
		ERROR if set_MOTOREncoder fails
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    2f22:	0f 93       	push	r16
    2f24:	1f 93       	push	r17
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29

	static uint8_t firstTime[3] = {YES, YES, YES};
	uint8_t controller, error = 0;
    2f2a:	d0 e0       	ldi	r29, 0x00	; 0
	uint32_t encoderValue;

	for (controller = 128; controller < 131; controller++) {
    2f2c:	c0 e8       	ldi	r28, 0x80	; 128
    2f2e:	1f c0       	rjmp	.+62     	; 0x2f6e <init_MOTORS+0x4c>
		// get saved encoder value from FRAM
		encoderValue = 22 * ROBOCOUNTSPERMICRON;	// Proxy for now
		if (set_MOTOREncoder(controller, encoderValue) == ERROR) {
    2f30:	48 e0       	ldi	r20, 0x08	; 8
    2f32:	57 e1       	ldi	r21, 0x17	; 23
    2f34:	60 e0       	ldi	r22, 0x00	; 0
    2f36:	70 e0       	ldi	r23, 0x00	; 0
    2f38:	8c 2f       	mov	r24, r28
    2f3a:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <set_MOTOREncoder>
    2f3e:	83 36       	cpi	r24, 0x63	; 99
    2f40:	a9 f4       	brne	.+42     	; 0x2f6c <init_MOTORS+0x4a>
			if (!firstTime[controller - 128]) {
    2f42:	0c 2f       	mov	r16, r28
    2f44:	10 e0       	ldi	r17, 0x00	; 0
    2f46:	00 58       	subi	r16, 0x80	; 128
    2f48:	11 09       	sbc	r17, r1
    2f4a:	f8 01       	movw	r30, r16
    2f4c:	e0 50       	subi	r30, 0x00	; 0
    2f4e:	f8 4d       	sbci	r31, 0xD8	; 216
    2f50:	80 81       	ld	r24, Z
    2f52:	81 11       	cpse	r24, r1
    2f54:	0a c0       	rjmp	.+20     	; 0x2f6a <init_MOTORS+0x48>
				printError(ERR_MTRSETENC, "init_MOTORS");
    2f56:	6c e8       	ldi	r22, 0x8C	; 140
    2f58:	7c e8       	ldi	r23, 0x8C	; 140
    2f5a:	82 e3       	ldi	r24, 0x32	; 50
    2f5c:	91 e0       	ldi	r25, 0x01	; 1
    2f5e:	0e 94 9a 06 	call	0xd34	; 0xd34 <printError>
				firstTime[controller - 128] = NO;
    2f62:	f8 01       	movw	r30, r16
    2f64:	e0 50       	subi	r30, 0x00	; 0
    2f66:	f8 4d       	sbci	r31, 0xD8	; 216
    2f68:	10 82       	st	Z, r1
			}
			error++;
    2f6a:	df 5f       	subi	r29, 0xFF	; 255

	static uint8_t firstTime[3] = {YES, YES, YES};
	uint8_t controller, error = 0;
	uint32_t encoderValue;

	for (controller = 128; controller < 131; controller++) {
    2f6c:	cf 5f       	subi	r28, 0xFF	; 255
    2f6e:	c3 38       	cpi	r28, 0x83	; 131
    2f70:	f8 f2       	brcs	.-66     	; 0x2f30 <init_MOTORS+0xe>
				firstTime[controller - 128] = NO;
			}
			error++;
		}
	}
	if (error) {
    2f72:	dd 23       	and	r29, r29
    2f74:	11 f0       	breq	.+4      	; 0x2f7a <init_MOTORS+0x58>
		return(ERROR);
    2f76:	83 e6       	ldi	r24, 0x63	; 99
    2f78:	01 c0       	rjmp	.+2      	; 0x2f7c <init_MOTORS+0x5a>
	} else {
		return(NOERROR);
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2f7c:	df 91       	pop	r29
    2f7e:	cf 91       	pop	r28
    2f80:	1f 91       	pop	r17
    2f82:	0f 91       	pop	r16
    2f84:	08 95       	ret

00002f86 <init_RTC>:
			between interrupts. ticksRTC = 30719 generates an interrupt
			every minute. ticksRTC = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticksRTC)
{
    2f86:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2f88:	e0 e6       	ldi	r30, 0x60	; 96
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    2f8e:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    2f90:	88 ed       	ldi	r24, 0xD8	; 216
    2f92:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2f94:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2f96:	01 c0       	rjmp	.+2      	; 0x2f9a <init_RTC+0x14>
		asm("nop");
    2f98:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    2f9a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    2f9e:	96 fd       	sbrc	r25, 6
    2fa0:	fb cf       	rjmp	.-10     	; 0x2f98 <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2fa2:	e0 e6       	ldi	r30, 0x60	; 96
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    2fa8:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    2faa:	28 ed       	ldi	r18, 0xD8	; 216
    2fac:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2fae:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    2fb0:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    2fb2:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    2fb4:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2fb6:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    2fb8:	01 c0       	rjmp	.+2      	; 0x2fbc <init_RTC+0x36>
		asm("nop");
    2fba:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    2fbc:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    2fc0:	91 11       	cpse	r25, r1
    2fc2:	fb cf       	rjmp	.-10     	; 0x2fba <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticksRTC;
    2fc4:	e0 e4       	ldi	r30, 0x40	; 64
    2fc6:	f1 e0       	ldi	r31, 0x01	; 1
    2fc8:	42 87       	std	Z+10, r20	; 0x0a
    2fca:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    2fcc:	82 e0       	ldi	r24, 0x02	; 2
    2fce:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    2fd0:	85 81       	ldd	r24, Z+5	; 0x05
    2fd2:	81 60       	ori	r24, 0x01	; 1
    2fd4:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    2fd6:	81 eb       	ldi	r24, 0xB1	; 177
    2fd8:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    2fda:	82 81       	ldd	r24, Z+2	; 0x02
    2fdc:	81 60       	ori	r24, 0x01	; 1
    2fde:	82 83       	std	Z+2, r24	; 0x02
    2fe0:	08 95       	ret

00002fe2 <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    2fe2:	1f 92       	push	r1
    2fe4:	0f 92       	push	r0
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	0f 92       	push	r0
    2fea:	11 24       	eor	r1, r1
    2fec:	2f 93       	push	r18
    2fee:	3f 93       	push	r19
    2ff0:	4f 93       	push	r20
    2ff2:	5f 93       	push	r21
    2ff4:	6f 93       	push	r22
    2ff6:	7f 93       	push	r23
    2ff8:	8f 93       	push	r24
    2ffa:	9f 93       	push	r25
    2ffc:	af 93       	push	r26
    2ffe:	bf 93       	push	r27
    3000:	ef 93       	push	r30
    3002:	ff 93       	push	r31

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	if (timerOLED) {
    300a:	80 91 0f 2a 	lds	r24, 0x2A0F	; 0x802a0f <timerOLED>
    300e:	90 91 10 2a 	lds	r25, 0x2A10	; 0x802a10 <timerOLED+0x1>
    3012:	00 97       	sbiw	r24, 0x00	; 0
    3014:	b9 f0       	breq	.+46     	; 0x3044 <__vector_3+0x62>
		if (timerOLED > timeoutOLED) {	// Display timeout
    3016:	20 91 11 2a 	lds	r18, 0x2A11	; 0x802a11 <timeoutOLED>
    301a:	30 91 12 2a 	lds	r19, 0x2A12	; 0x802a12 <timeoutOLED+0x1>
    301e:	28 17       	cp	r18, r24
    3020:	39 07       	cpc	r19, r25
    3022:	58 f4       	brcc	.+22     	; 0x303a <__vector_3+0x58>
			clear_OLED(0);
    3024:	80 e0       	ldi	r24, 0x00	; 0
    3026:	0e 94 08 0c 	call	0x1810	; 0x1810 <clear_OLED>
			clear_OLED(1);
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	0e 94 08 0c 	call	0x1810	; 0x1810 <clear_OLED>
			timerOLED = 0;
    3030:	10 92 0f 2a 	sts	0x2A0F, r1	; 0x802a0f <timerOLED>
    3034:	10 92 10 2a 	sts	0x2A10, r1	; 0x802a10 <timerOLED+0x1>
    3038:	05 c0       	rjmp	.+10     	; 0x3044 <__vector_3+0x62>
		} else {
			timerOLED++;
    303a:	01 96       	adiw	r24, 0x01	; 1
    303c:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <timerOLED>
    3040:	90 93 10 2a 	sts	0x2A10, r25	; 0x802a10 <timerOLED+0x1>
		}
	}
	toggle_LED;						// Defined in led.c
    3044:	80 e2       	ldi	r24, 0x20	; 32
    3046:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>

}
    304a:	ff 91       	pop	r31
    304c:	ef 91       	pop	r30
    304e:	bf 91       	pop	r27
    3050:	af 91       	pop	r26
    3052:	9f 91       	pop	r25
    3054:	8f 91       	pop	r24
    3056:	7f 91       	pop	r23
    3058:	6f 91       	pop	r22
    305a:	5f 91       	pop	r21
    305c:	4f 91       	pop	r20
    305e:	3f 91       	pop	r19
    3060:	2f 91       	pop	r18
    3062:	0f 90       	pop	r0
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	0f 90       	pop	r0
    3068:	1f 90       	pop	r1
    306a:	18 95       	reti

0000306c <set>:
	Returns:
		GREATERPROMPT on success
		ERRORPROMPT if an invalid object was requested.
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    306c:	cf 93       	push	r28
    306e:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	24 e3       	ldi	r18, 0x34	; 52
    3074:	28 9f       	mul	r18, r24
    3076:	f0 01       	movw	r30, r0
    3078:	29 9f       	mul	r18, r25
    307a:	f0 0d       	add	r31, r0
    307c:	11 24       	eor	r1, r1
    307e:	e9 5f       	subi	r30, 0xF9	; 249
    3080:	f7 4d       	sbci	r31, 0xD7	; 215
    3082:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    3084:	24 37       	cpi	r18, 0x74	; 116
    3086:	e9 f4       	brne	.+58     	; 0x30c2 <set+0x56>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    3088:	24 e3       	ldi	r18, 0x34	; 52
    308a:	28 9f       	mul	r18, r24
    308c:	e0 01       	movw	r28, r0
    308e:	29 9f       	mul	r18, r25
    3090:	d0 0d       	add	r29, r0
    3092:	11 24       	eor	r1, r1
    3094:	c7 5f       	subi	r28, 0xF7	; 247
    3096:	d7 4d       	sbci	r29, 0xD7	; 215
    3098:	fe 01       	movw	r30, r28
    309a:	01 90       	ld	r0, Z+
    309c:	00 20       	and	r0, r0
    309e:	e9 f7       	brne	.-6      	; 0x309a <set+0x2e>
    30a0:	31 97       	sbiw	r30, 0x01	; 1
    30a2:	ec 1b       	sub	r30, r28
    30a4:	fd 0b       	sbc	r31, r29
    30a6:	73 97       	sbiw	r30, 0x13	; 19
    30a8:	71 f4       	brne	.+28     	; 0x30c6 <set+0x5a>
				return(ERRORPROMPT);
			}
			put_time(pcmd[cstack].cvalue);
    30aa:	ce 01       	movw	r24, r28
    30ac:	0e 94 38 06 	call	0xc70	; 0xc70 <put_time>
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    30b0:	24 e1       	ldi	r18, 0x14	; 20
    30b2:	ae 01       	movw	r20, r28
    30b4:	60 e0       	ldi	r22, 0x00	; 0
    30b6:	70 e0       	ldi	r23, 0x00	; 0
    30b8:	80 e5       	ldi	r24, 0x50	; 80
    30ba:	0e 94 0b 07 	call	0xe16	; 0xe16 <write_FRAM>
			break;

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	03 c0       	rjmp	.+6      	; 0x30c8 <set+0x5c>
			put_time(pcmd[cstack].cvalue);
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			return(ERRORPROMPT);
    30c2:	82 e0       	ldi	r24, 0x02	; 2
    30c4:	01 c0       	rjmp	.+2      	; 0x30c8 <set+0x5c>
	object = pcmd[cstack].cobject;

	switch(object) {
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
				return(ERRORPROMPT);
    30c6:	82 e0       	ldi	r24, 0x02	; 2

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
}
    30c8:	df 91       	pop	r29
    30ca:	cf 91       	pop	r28
    30cc:	08 95       	ret

000030ce <init_SPECID>:
	pullup. Must be called AFTER init_PORTS().
------------------------------------------------------------------------------*/
void init_SPECID(void)
{

	PORTF.PIN2CTRL &= ~PORT_PULLUPEN_bm;	// Remove pullup
    30ce:	e0 ea       	ldi	r30, 0xA0	; 160
    30d0:	f4 e0       	ldi	r31, 0x04	; 4
    30d2:	82 89       	ldd	r24, Z+18	; 0x12
    30d4:	87 7f       	andi	r24, 0xF7	; 247
    30d6:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.DIRCLR = PIN2_bm;					// Set as input
    30d8:	84 e0       	ldi	r24, 0x04	; 4
    30da:	82 83       	std	Z+2, r24	; 0x02
    30dc:	08 95       	ret

000030de <get_temperature>:
	point for the actual devices.

	The signal is 1.5E-3 mV/K with a 1500 kOhm dropping resistor.
------------------------------------------------------------------------------*/
float get_temperature(uint8_t sensor)
{
    30de:	cf 93       	push	r28
    30e0:	df 93       	push	r29
    30e2:	00 d0       	rcall	.+0      	; 0x30e4 <get_temperature+0x6>
    30e4:	00 d0       	rcall	.+0      	; 0x30e6 <get_temperature+0x8>
    30e6:	cd b7       	in	r28, 0x3d	; 61
    30e8:	de b7       	in	r29, 0x3e	; 62

	float temperature;

	switch (sensor) {
    30ea:	83 30       	cpi	r24, 0x03	; 3
    30ec:	18 f0       	brcs	.+6      	; 0x30f4 <get_temperature+0x16>
    30ee:	83 30       	cpi	r24, 0x03	; 3
    30f0:	39 f0       	breq	.+14     	; 0x3100 <get_temperature+0x22>
    30f2:	0b c0       	rjmp	.+22     	; 0x310a <get_temperature+0x2c>
		case 0:
		case 1:
		case 2:
			read_AD590(sensor, &temperature);
    30f4:	be 01       	movw	r22, r28
    30f6:	6f 5f       	subi	r22, 0xFF	; 255
    30f8:	7f 4f       	sbci	r23, 0xFF	; 255
    30fa:	0e 94 49 01 	call	0x292	; 0x292 <read_AD590>
			break;
    30fe:	0d c0       	rjmp	.+26     	; 0x311a <get_temperature+0x3c>
		case 3:
			read_MCP9808(&temperature);
    3100:	ce 01       	movw	r24, r28
    3102:	01 96       	adiw	r24, 0x01	; 1
    3104:	0e 94 01 09 	call	0x1202	; 0x1202 <read_MCP9808>
			break;
    3108:	08 c0       	rjmp	.+16     	; 0x311a <get_temperature+0x3c>
		default:
			temperature = -666.0;
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	90 e8       	ldi	r25, 0x80	; 128
    310e:	a6 e2       	ldi	r26, 0x26	; 38
    3110:	b4 ec       	ldi	r27, 0xC4	; 196
    3112:	89 83       	std	Y+1, r24	; 0x01
    3114:	9a 83       	std	Y+2, r25	; 0x02
    3116:	ab 83       	std	Y+3, r26	; 0x03
    3118:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}

	return(temperature);
    311a:	69 81       	ldd	r22, Y+1	; 0x01
    311c:	7a 81       	ldd	r23, Y+2	; 0x02
    311e:	8b 81       	ldd	r24, Y+3	; 0x03
    3120:	9c 81       	ldd	r25, Y+4	; 0x04

}
    3122:	24 96       	adiw	r28, 0x04	; 4
    3124:	cd bf       	out	0x3d, r28	; 61
    3126:	de bf       	out	0x3e, r29	; 62
    3128:	df 91       	pop	r29
    312a:	cf 91       	pop	r28
    312c:	08 95       	ret

0000312e <testroutine>:
#include "usart.h"
#include "roboclaw.h"
#include "testroutine.h"

void testroutine(void)
{
    312e:	0f 93       	push	r16
    3130:	1f 93       	push	r17
    3132:	cf 93       	push	r28
    3134:	df 93       	push	r29
    3136:	cd b7       	in	r28, 0x3d	; 61
    3138:	de b7       	in	r29, 0x3e	; 62
    313a:	e2 97       	sbiw	r28, 0x32	; 50
    313c:	cd bf       	out	0x3d, r28	; 61
    313e:	de bf       	out	0x3e, r29	; 62


	char buf[50];

	start_TCB0(1);
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	0e 94 d6 18 	call	0x31ac	; 0x31ac <start_TCB0>
    3148:	8d e8       	ldi	r24, 0x8D	; 141
    314a:	90 e2       	ldi	r25, 0x20	; 32
    314c:	01 97       	sbiw	r24, 0x01	; 1
    314e:	f1 f7       	brne	.-4      	; 0x314c <testroutine+0x1e>
    3150:	00 00       	nop
	_delay_ms(10);
	stop_TCB0();
    3152:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <stop_TCB0>
	sprintf(buf, "ticks = %d\r\n", ticks);
    3156:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    315a:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    315e:	9f 93       	push	r25
    3160:	8f 93       	push	r24
    3162:	88 e9       	ldi	r24, 0x98	; 152
    3164:	9c e8       	ldi	r25, 0x8C	; 140
    3166:	9f 93       	push	r25
    3168:	8f 93       	push	r24
    316a:	8e 01       	movw	r16, r28
    316c:	0f 5f       	subi	r16, 0xFF	; 255
    316e:	1f 4f       	sbci	r17, 0xFF	; 255
    3170:	1f 93       	push	r17
    3172:	0f 93       	push	r16
    3174:	0e 94 99 23 	call	0x4732	; 0x4732 <sprintf>
	send_USART(0, (uint8_t*) buf, strlen(buf));
    3178:	f8 01       	movw	r30, r16
    317a:	01 90       	ld	r0, Z+
    317c:	00 20       	and	r0, r0
    317e:	e9 f7       	brne	.-6      	; 0x317a <testroutine+0x4c>
    3180:	31 97       	sbiw	r30, 0x01	; 1
    3182:	af 01       	movw	r20, r30
    3184:	40 1b       	sub	r20, r16
    3186:	51 0b       	sbc	r21, r17
    3188:	b8 01       	movw	r22, r16
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	0e 94 07 1a 	call	0x340e	; 0x340e <send_USART>
	write_MCP23008(addr, OLAT, 0x00);
	_delay_ms(1000);
	write_MCP23008(addr, OLAT, 0xFF);
	send_USART(0, (uint8_t*) buf, strlen(buf));
*/
	return;
    3190:	0f 90       	pop	r0
    3192:	0f 90       	pop	r0
    3194:	0f 90       	pop	r0
    3196:	0f 90       	pop	r0
    3198:	0f 90       	pop	r0
    319a:	0f 90       	pop	r0
    319c:	e2 96       	adiw	r28, 0x32	; 50
    319e:	cd bf       	out	0x3d, r28	; 61
    31a0:	de bf       	out	0x3e, r29	; 62
    31a2:	df 91       	pop	r29
    31a4:	cf 91       	pop	r28
    31a6:	1f 91       	pop	r17
    31a8:	0f 91       	pop	r16
    31aa:	08 95       	ret

000031ac <start_TCB0>:
#include "timers.h"

void start_TCB0(uint16_t msPeriod)
{

	ticks = 0;
    31ac:	10 92 14 2a 	sts	0x2A14, r1	; 0x802a14 <ticks>
    31b0:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <ticks+0x1>
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);	// Check for overflows; msPeriod=19ms is max for 3.33MHz
    31b4:	25 e0       	ldi	r18, 0x05	; 5
    31b6:	3d e0       	ldi	r19, 0x0D	; 13
    31b8:	ac 01       	movw	r20, r24
    31ba:	42 9f       	mul	r20, r18
    31bc:	c0 01       	movw	r24, r0
    31be:	43 9f       	mul	r20, r19
    31c0:	90 0d       	add	r25, r0
    31c2:	52 9f       	mul	r21, r18
    31c4:	90 0d       	add	r25, r0
    31c6:	11 24       	eor	r1, r1
    31c8:	e0 e8       	ldi	r30, 0x80	; 128
    31ca:	fa e0       	ldi	r31, 0x0A	; 10
    31cc:	84 87       	std	Z+12, r24	; 0x0c
    31ce:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	85 83       	std	Z+5, r24	; 0x05
//	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc | TCB_ENABLE_bm;	// Start the clock
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    31d4:	80 83       	st	Z, r24
    31d6:	08 95       	ret

000031d8 <stop_TCB0>:
}

void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    31d8:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    31dc:	08 95       	ret

000031de <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    31de:	1f 92       	push	r1
    31e0:	0f 92       	push	r0
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	0f 92       	push	r0
    31e6:	11 24       	eor	r1, r1
    31e8:	8f 93       	push	r24
    31ea:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks++;
    31f2:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    31f6:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    31fa:	01 96       	adiw	r24, 0x01	; 1
    31fc:	80 93 14 2a 	sts	0x2A14, r24	; 0x802a14 <ticks>
    3200:	90 93 15 2a 	sts	0x2A15, r25	; 0x802a15 <ticks+0x1>

    3204:	9f 91       	pop	r25
    3206:	8f 91       	pop	r24
    3208:	0f 90       	pop	r0
    320a:	0f be       	out	0x3f, r0	; 63
    320c:	0f 90       	pop	r0
    320e:	1f 90       	pop	r1
    3210:	18 95       	reti

00003212 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    3212:	e0 ea       	ldi	r30, 0xA0	; 160
    3214:	f8 e0       	ldi	r31, 0x08	; 8
    3216:	8b e0       	ldi	r24, 0x0B	; 11
    3218:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    321a:	83 81       	ldd	r24, Z+3	; 0x03
    321c:	81 60       	ori	r24, 0x01	; 1
    321e:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    3220:	85 81       	ldd	r24, Z+5	; 0x05
    3222:	81 60       	ori	r24, 0x01	; 1
    3224:	85 83       	std	Z+5, r24	; 0x05
    3226:	08 95       	ret

00003228 <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    3228:	01 c0       	rjmp	.+2      	; 0x322c <read_TWI+0x4>
		asm("nop");								// Should set timer here
    322a:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    322c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3230:	88 23       	and	r24, r24
    3232:	dc f7       	brge	.-10     	; 0x322a <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    3234:	e0 ea       	ldi	r30, 0xA0	; 160
    3236:	f8 e0       	ldi	r31, 0x08	; 8
    3238:	84 81       	ldd	r24, Z+4	; 0x04
    323a:	8b 7f       	andi	r24, 0xFB	; 251
    323c:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    323e:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    3240:	94 81       	ldd	r25, Z+4	; 0x04
    3242:	92 60       	ori	r25, 0x02	; 2
    3244:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    3246:	08 95       	ret

00003248 <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    3248:	01 c0       	rjmp	.+2      	; 0x324c <readlast_TWI+0x4>
		asm("nop");
    324a:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    324c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3250:	88 23       	and	r24, r24
    3252:	dc f7       	brge	.-10     	; 0x324a <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    3254:	e0 ea       	ldi	r30, 0xA0	; 160
    3256:	f8 e0       	ldi	r31, 0x08	; 8
    3258:	84 81       	ldd	r24, Z+4	; 0x04
    325a:	84 60       	ori	r24, 0x04	; 4
    325c:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    325e:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    3260:	08 95       	ret

00003262 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    3262:	61 30       	cpi	r22, 0x01	; 1
    3264:	39 f4       	brne	.+14     	; 0x3274 <start_TWI+0x12>
//		addr = ((addr << 1) | 0x01);
		TWI0.MADDR = ((addr << 1) | 0x01);
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	88 0f       	add	r24, r24
    326a:	99 1f       	adc	r25, r25
    326c:	81 60       	ori	r24, 0x01	; 1
    326e:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    3272:	03 c0       	rjmp	.+6      	; 0x327a <start_TWI+0x18>
	} else {
//		addr = ((addr << 1) & ~0x01);
//		addr = (addr << 1);
		TWI0.MADDR = (addr << 1);
    3274:	88 0f       	add	r24, r24
    3276:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	0e 94 d6 18 	call	0x31ac	; 0x31ac <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    3282:	0b c0       	rjmp	.+22     	; 0x329a <start_TWI+0x38>
		if (ticks > 10) {
    3284:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    3288:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    328c:	0b 97       	sbiw	r24, 0x0b	; 11
    328e:	20 f0       	brcs	.+8      	; 0x3298 <start_TWI+0x36>
			stop_TCB0();
    3290:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <stop_TCB0>
			return(ERROR);
    3294:	83 e6       	ldi	r24, 0x63	; 99
    3296:	08 95       	ret
		}
		asm("nop");								// Wait for addr transmission
    3298:	00 00       	nop
	}

//	TWI0.MADDR = addr;							// Start condition

	start_TCB0(1);
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    329a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    329e:	80 7c       	andi	r24, 0xC0	; 192
    32a0:	89 f3       	breq	.-30     	; 0x3284 <start_TWI+0x22>
			return(ERROR);
		}
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    32a2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    32a6:	82 ff       	sbrs	r24, 2
    32a8:	0c c0       	rjmp	.+24     	; 0x32c2 <start_TWI+0x60>
		if (notfirstpass) {
    32aa:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <notfirstpass>
    32ae:	88 23       	and	r24, r24
    32b0:	f1 f0       	breq	.+60     	; 0x32ee <start_TWI+0x8c>
			printError(ERR_TWI, "TWI bus");
    32b2:	65 ea       	ldi	r22, 0xA5	; 165
    32b4:	7c e8       	ldi	r23, 0x8C	; 140
    32b6:	81 e9       	ldi	r24, 0x91	; 145
    32b8:	91 e0       	ldi	r25, 0x01	; 1
    32ba:	0e 94 9a 06 	call	0xd34	; 0xd34 <printError>
			return(ERROR);
    32be:	83 e6       	ldi	r24, 0x63	; 99
    32c0:	08 95       	ret
		}
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    32c2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    32c6:	83 ff       	sbrs	r24, 3
    32c8:	0c c0       	rjmp	.+24     	; 0x32e2 <start_TWI+0x80>
		if (notfirstpass) {
    32ca:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <notfirstpass>
    32ce:	88 23       	and	r24, r24
    32d0:	81 f0       	breq	.+32     	; 0x32f2 <start_TWI+0x90>
			printError(ERR_TWI, "TWI arbitration");
    32d2:	6d ea       	ldi	r22, 0xAD	; 173
    32d4:	7c e8       	ldi	r23, 0x8C	; 140
    32d6:	81 e9       	ldi	r24, 0x91	; 145
    32d8:	91 e0       	ldi	r25, 0x01	; 1
    32da:	0e 94 9a 06 	call	0xd34	; 0xd34 <printError>
			return(ERROR);
    32de:	83 e6       	ldi	r24, 0x63	; 99
    32e0:	08 95       	ret
		}
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    32e2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    32e6:	84 fd       	sbrc	r24, 4
    32e8:	06 c0       	rjmp	.+12     	; 0x32f6 <start_TWI+0x94>
			return(ERROR);
	}

	return(NOERROR);
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	08 95       	ret
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	08 95       	ret
    32f2:	80 e0       	ldi	r24, 0x00	; 0
    32f4:	08 95       	ret
		if (notfirstpass) {
			printError(ERR_TWI, "TWI arbitration");
			return(ERROR);
		}
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
			return(ERROR);
    32f6:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    32f8:	08 95       	ret

000032fa <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    32fa:	87 e0       	ldi	r24, 0x07	; 7
    32fc:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    3300:	08 95       	ret

00003302 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    3302:	01 c0       	rjmp	.+2      	; 0x3306 <write_TWI+0x4>
		asm("nop");
    3304:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    3306:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    330a:	96 ff       	sbrs	r25, 6
    330c:	fb cf       	rjmp	.-10     	; 0x3304 <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    330e:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	start_TCB0(1);
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	0e 94 d6 18 	call	0x31ac	; 0x31ac <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    331a:	14 c0       	rjmp	.+40     	; 0x3344 <write_TWI+0x42>
		asm("nop");
    331c:	00 00       	nop
		ticks++;
    331e:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    3322:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    3326:	01 96       	adiw	r24, 0x01	; 1
    3328:	80 93 14 2a 	sts	0x2A14, r24	; 0x802a14 <ticks>
    332c:	90 93 15 2a 	sts	0x2A15, r25	; 0x802a15 <ticks+0x1>
		if (ticks > 50) {
    3330:	80 91 14 2a 	lds	r24, 0x2A14	; 0x802a14 <ticks>
    3334:	90 91 15 2a 	lds	r25, 0x2A15	; 0x802a15 <ticks+0x1>
    3338:	c3 97       	sbiw	r24, 0x33	; 51
    333a:	20 f0       	brcs	.+8      	; 0x3344 <write_TWI+0x42>
			stop_TCB0();
    333c:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <stop_TCB0>
			return(ERROR);
    3340:	83 e6       	ldi	r24, 0x63	; 99
    3342:	08 95       	ret
	}

	TWI0.MDATA = data;

	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    3344:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3348:	86 ff       	sbrs	r24, 6
    334a:	e8 cf       	rjmp	.-48     	; 0x331c <write_TWI+0x1a>
			stop_TCB0();
			return(ERROR);
			break;
		}
	}
	stop_TCB0();
    334c:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <stop_TCB0>
	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    3350:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3354:	89 2f       	mov	r24, r25
    3356:	80 71       	andi	r24, 0x10	; 16
    3358:	94 fd       	sbrc	r25, 4
		return(ERROR);
    335a:	83 e6       	ldi	r24, 0x63	; 99
	} else {
		return(NOERROR);
	}

}
    335c:	08 95       	ret

0000335e <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    335e:	e0 e0       	ldi	r30, 0x00	; 0
    3360:	f4 e0       	ldi	r31, 0x04	; 4
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    3366:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    3368:	e0 e0       	ldi	r30, 0x00	; 0
    336a:	f8 e0       	ldi	r31, 0x08	; 8
    336c:	2d e6       	ldi	r18, 0x6D	; 109
    336e:	35 e0       	ldi	r19, 0x05	; 5
    3370:	20 87       	std	Z+8, r18	; 0x08
    3372:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    3374:	95 81       	ldd	r25, Z+5	; 0x05
    3376:	90 68       	ori	r25, 0x80	; 128
    3378:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    337a:	96 81       	ldd	r25, Z+6	; 0x06
    337c:	90 64       	ori	r25, 0x40	; 64
    337e:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART Receiver
    3380:	96 81       	ldd	r25, Z+6	; 0x06
    3382:	90 68       	ori	r25, 0x80	; 128
    3384:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;
    3386:	10 92 1f 2d 	sts	0x2D1F, r1	; 0x802d1f <send0_buf+0xff>
	send0_buf.tail = 0;
    338a:	10 92 20 2d 	sts	0x2D20, r1	; 0x802d20 <send0_buf+0x100>
	send0_buf.done = YES;
    338e:	80 93 24 2d 	sts	0x2D24, r24	; 0x802d24 <send0_buf+0x104>
	recv0_buf.head = 0;
    3392:	10 92 1a 2c 	sts	0x2C1A, r1	; 0x802c1a <recv0_buf+0xff>
	recv0_buf.tail = 0;
    3396:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0x100>
	recv0_buf.data[0] = '\0';
    339a:	10 92 1b 2b 	sts	0x2B1B, r1	; 0x802b1b <recv0_buf>
	recv0_buf.length = 0;
    339e:	10 92 1d 2c 	sts	0x2C1D, r1	; 0x802c1d <recv0_buf+0x102>
	recv0_buf.done = NO;
    33a2:	10 92 1f 2c 	sts	0x2C1F, r1	; 0x802c1f <recv0_buf+0x104>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    33a6:	e0 e4       	ldi	r30, 0x40	; 64
    33a8:	f4 e0       	ldi	r31, 0x04	; 4
    33aa:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    33ac:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
    33ae:	e0 e2       	ldi	r30, 0x20	; 32
    33b0:	f8 e0       	ldi	r31, 0x08	; 8
    33b2:	4b e5       	ldi	r20, 0x5B	; 91
    33b4:	51 e0       	ldi	r21, 0x01	; 1
    33b6:	40 87       	std	Z+8, r20	; 0x08
    33b8:	51 87       	std	Z+9, r21	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    33ba:	95 81       	ldd	r25, Z+5	; 0x05
    33bc:	90 68       	ori	r25, 0x80	; 128
    33be:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;
    33c0:	96 81       	ldd	r25, Z+6	; 0x06
    33c2:	90 64       	ori	r25, 0x40	; 64
    33c4:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;
    33c6:	96 81       	ldd	r25, Z+6	; 0x06
    33c8:	90 68       	ori	r25, 0x80	; 128
    33ca:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    33cc:	10 92 2e 30 	sts	0x302E, r1	; 0x80302e <send1_buf+0xff>
	send1_buf.tail = 0;
    33d0:	10 92 2f 30 	sts	0x302F, r1	; 0x80302f <send1_buf+0x100>
	send1_buf.done = YES;
    33d4:	80 93 33 30 	sts	0x3033, r24	; 0x803033 <send1_buf+0x104>
	recv1_buf.head = 0;
    33d8:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0xff>
	recv1_buf.tail = 0;
    33dc:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x100>
	recv1_buf.data[0] = '\0';
    33e0:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <recv1_buf>
	recv1_buf.done = NO;
    33e4:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv1_buf+0x104>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    33e8:	e0 e2       	ldi	r30, 0x20	; 32
    33ea:	f4 e0       	ldi	r31, 0x04	; 4
    33ec:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    33ee:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    33f0:	e0 e6       	ldi	r30, 0x60	; 96
    33f2:	f8 e0       	ldi	r31, 0x08	; 8
    33f4:	20 87       	std	Z+8, r18	; 0x08
    33f6:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    33f8:	96 81       	ldd	r25, Z+6	; 0x06
    33fa:	90 64       	ori	r25, 0x40	; 64
    33fc:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    33fe:	96 81       	ldd	r25, Z+6	; 0x06
    3400:	90 68       	ori	r25, 0x80	; 128
    3402:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    3404:	80 93 2e 2f 	sts	0x2F2E, r24	; 0x802f2e <send3_buf+0x104>
	recv3_buf.done = NO;
    3408:	10 92 29 2e 	sts	0x2E29, r1	; 0x802e29 <recv3_buf+0x104>
    340c:	08 95       	ret

0000340e <send_USART>:
		port - The USARTn port (0, 1, or 3)
		data - Contains the data to send
		nbytes - Number of bytes to send
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    340e:	0f 93       	push	r16
    3410:	1f 93       	push	r17
    3412:	cf 93       	push	r28
    3414:	df 93       	push	r29
    3416:	eb 01       	movw	r28, r22
    3418:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    341a:	81 30       	cpi	r24, 0x01	; 1
    341c:	01 f1       	breq	.+64     	; 0x345e <send_USART+0x50>
    341e:	b0 f0       	brcs	.+44     	; 0x344c <send_USART+0x3e>
    3420:	83 30       	cpi	r24, 0x03	; 3
    3422:	09 f4       	brne	.+2      	; 0x3426 <send_USART+0x18>
    3424:	6d c0       	rjmp	.+218    	; 0x3500 <send_USART+0xf2>
    3426:	74 c0       	rjmp	.+232    	; 0x3510 <send_USART+0x102>
		case 0:
			for (i = 0; i < nbytes; i++) {
				send0_buf.data[send0_buf.head] = *data++;
    3428:	ef e1       	ldi	r30, 0x1F	; 31
    342a:	fd e2       	ldi	r31, 0x2D	; 45
    342c:	80 81       	ld	r24, Z
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	38 81       	ld	r19, Y
    3432:	dc 01       	movw	r26, r24
    3434:	a0 5e       	subi	r26, 0xE0	; 224
    3436:	b3 4d       	sbci	r27, 0xD3	; 211
    3438:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    343a:	01 96       	adiw	r24, 0x01	; 1
    343c:	6f ef       	ldi	r22, 0xFF	; 255
    343e:	70 e0       	ldi	r23, 0x00	; 0
    3440:	0e 94 67 21 	call	0x42ce	; 0x42ce <__divmodhi4>
    3444:	80 83       	st	Z, r24
	uint8_t i;
	uint16_t crc;

	switch (port) {
		case 0:
			for (i = 0; i < nbytes; i++) {
    3446:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    3448:	21 96       	adiw	r28, 0x01	; 1
    344a:	01 c0       	rjmp	.+2      	; 0x344e <send_USART+0x40>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    344c:	20 e0       	ldi	r18, 0x00	; 0
		case 0:
			for (i = 0; i < nbytes; i++) {
    344e:	21 17       	cp	r18, r17
    3450:	58 f3       	brcs	.-42     	; 0x3428 <send_USART+0x1a>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3452:	e0 e0       	ldi	r30, 0x00	; 0
    3454:	f8 e0       	ldi	r31, 0x08	; 8
    3456:	85 81       	ldd	r24, Z+5	; 0x05
    3458:	80 62       	ori	r24, 0x20	; 32
    345a:	85 83       	std	Z+5, r24	; 0x05
			break;
    345c:	59 c0       	rjmp	.+178    	; 0x3510 <send_USART+0x102>

		case 1:
			crc = crc16(data, nbytes);
    345e:	64 2f       	mov	r22, r20
    3460:	70 e0       	ldi	r23, 0x00	; 0
    3462:	ce 01       	movw	r24, r28
    3464:	0e 94 88 14 	call	0x2910	; 0x2910 <crc16>
    3468:	48 2f       	mov	r20, r24
    346a:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	11 c0       	rjmp	.+34     	; 0x3492 <send_USART+0x84>
				send1_buf.data[send1_buf.head] = *data++;
    3470:	ee e2       	ldi	r30, 0x2E	; 46
    3472:	f0 e3       	ldi	r31, 0x30	; 48
    3474:	80 81       	ld	r24, Z
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	38 81       	ld	r19, Y
    347a:	dc 01       	movw	r26, r24
    347c:	a1 5d       	subi	r26, 0xD1	; 209
    347e:	b0 4d       	sbci	r27, 0xD0	; 208
    3480:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3482:	01 96       	adiw	r24, 0x01	; 1
    3484:	6f ef       	ldi	r22, 0xFF	; 255
    3486:	70 e0       	ldi	r23, 0x00	; 0
    3488:	0e 94 67 21 	call	0x42ce	; 0x42ce <__divmodhi4>
    348c:	80 83       	st	Z, r24
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    348e:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    3490:	21 96       	adiw	r28, 0x01	; 1
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    3492:	21 17       	cp	r18, r17
    3494:	68 f3       	brcs	.-38     	; 0x3470 <send_USART+0x62>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    3496:	ee e2       	ldi	r30, 0x2E	; 46
    3498:	f0 e3       	ldi	r31, 0x30	; 48
    349a:	80 81       	ld	r24, Z
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	dc 01       	movw	r26, r24
    34a0:	a1 5d       	subi	r26, 0xD1	; 209
    34a2:	b0 4d       	sbci	r27, 0xD0	; 208
    34a4:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    34a6:	01 96       	adiw	r24, 0x01	; 1
    34a8:	2f ef       	ldi	r18, 0xFF	; 255
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	b9 01       	movw	r22, r18
    34ae:	0e 94 67 21 	call	0x42ce	; 0x42ce <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	dc 01       	movw	r26, r24
    34b6:	a1 5d       	subi	r26, 0xD1	; 209
    34b8:	b0 4d       	sbci	r27, 0xD0	; 208
    34ba:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    34bc:	01 96       	adiw	r24, 0x01	; 1
    34be:	b9 01       	movw	r22, r18
    34c0:	0e 94 67 21 	call	0x42ce	; 0x42ce <__divmodhi4>
    34c4:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    34c6:	1e 5f       	subi	r17, 0xFE	; 254
    34c8:	10 93 30 30 	sts	0x3030, r17	; 0x803030 <send1_buf+0x101>
			send1_buf.nxfrd = 0;
    34cc:	10 92 32 30 	sts	0x3032, r1	; 0x803032 <send1_buf+0x103>
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    34d0:	e0 e2       	ldi	r30, 0x20	; 32
    34d2:	f8 e0       	ldi	r31, 0x08	; 8
    34d4:	85 81       	ldd	r24, Z+5	; 0x05
    34d6:	80 62       	ori	r24, 0x20	; 32
    34d8:	85 83       	std	Z+5, r24	; 0x05
			break;
    34da:	1a c0       	rjmp	.+52     	; 0x3510 <send_USART+0x102>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    34dc:	e9 e2       	ldi	r30, 0x29	; 41
    34de:	ff e2       	ldi	r31, 0x2F	; 47
    34e0:	80 81       	ld	r24, Z
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	38 81       	ld	r19, Y
    34e6:	dc 01       	movw	r26, r24
    34e8:	a6 5d       	subi	r26, 0xD6	; 214
    34ea:	b1 4d       	sbci	r27, 0xD1	; 209
    34ec:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    34ee:	01 96       	adiw	r24, 0x01	; 1
    34f0:	6f ef       	ldi	r22, 0xFF	; 255
    34f2:	70 e0       	ldi	r23, 0x00	; 0
    34f4:	0e 94 67 21 	call	0x42ce	; 0x42ce <__divmodhi4>
    34f8:	80 83       	st	Z, r24
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    34fa:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    34fc:	21 96       	adiw	r28, 0x01	; 1
    34fe:	01 c0       	rjmp	.+2      	; 0x3502 <send_USART+0xf4>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    3500:	20 e0       	ldi	r18, 0x00	; 0
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    3502:	21 17       	cp	r18, r17
    3504:	58 f3       	brcs	.-42     	; 0x34dc <send_USART+0xce>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3506:	e0 e6       	ldi	r30, 0x60	; 96
    3508:	f8 e0       	ldi	r31, 0x08	; 8
    350a:	85 81       	ldd	r24, Z+5	; 0x05
    350c:	80 62       	ori	r24, 0x20	; 32
    350e:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    3510:	df 91       	pop	r29
    3512:	cf 91       	pop	r28
    3514:	1f 91       	pop	r17
    3516:	0f 91       	pop	r16
    3518:	08 95       	ret

0000351a <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    351a:	1f 92       	push	r1
    351c:	0f 92       	push	r0
    351e:	0f b6       	in	r0, 0x3f	; 63
    3520:	0f 92       	push	r0
    3522:	11 24       	eor	r1, r1
    3524:	5f 93       	push	r21
    3526:	6f 93       	push	r22
    3528:	7f 93       	push	r23
    352a:	8f 93       	push	r24
    352c:	9f 93       	push	r25
    352e:	af 93       	push	r26
    3530:	bf 93       	push	r27
    3532:	ef 93       	push	r30
    3534:	ff 93       	push	r31

	uint8_t c;

	if (recv0_buf.length < BUFSIZE) {
    3536:	80 91 1d 2c 	lds	r24, 0x2C1D	; 0x802c1d <recv0_buf+0x102>
    353a:	8f 3f       	cpi	r24, 0xFF	; 255
    353c:	19 f1       	breq	.+70     	; 0x3584 <__vector_17+0x6a>
		c = USART0.RXDATAL;
    353e:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
		if ((char) c == '\r') {
    3542:	8d 30       	cpi	r24, 0x0D	; 13
    3544:	51 f4       	brne	.+20     	; 0x355a <__vector_17+0x40>
			recv0_buf.done = YES;
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	80 93 1f 2c 	sts	0x2C1F, r24	; 0x802c1f <recv0_buf+0x104>
			recv0_buf.data[recv0_buf.head] = '\0';
    354c:	e0 91 1a 2c 	lds	r30, 0x2C1A	; 0x802c1a <recv0_buf+0xff>
    3550:	f0 e0       	ldi	r31, 0x00	; 0
    3552:	e5 5e       	subi	r30, 0xE5	; 229
    3554:	f4 4d       	sbci	r31, 0xD4	; 212
    3556:	10 82       	st	Z, r1
    3558:	06 c0       	rjmp	.+12     	; 0x3566 <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    355a:	e0 91 1a 2c 	lds	r30, 0x2C1A	; 0x802c1a <recv0_buf+0xff>
    355e:	f0 e0       	ldi	r31, 0x00	; 0
    3560:	e5 5e       	subi	r30, 0xE5	; 229
    3562:	f4 4d       	sbci	r31, 0xD4	; 212
    3564:	80 83       	st	Z, r24
		}
		recv0_buf.length++;
    3566:	ed e1       	ldi	r30, 0x1D	; 29
    3568:	fc e2       	ldi	r31, 0x2C	; 44
    356a:	80 81       	ld	r24, Z
    356c:	8f 5f       	subi	r24, 0xFF	; 255
    356e:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    3570:	ea e1       	ldi	r30, 0x1A	; 26
    3572:	fc e2       	ldi	r31, 0x2C	; 44
    3574:	80 81       	ld	r24, Z
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	01 96       	adiw	r24, 0x01	; 1
    357a:	6f ef       	ldi	r22, 0xFF	; 255
    357c:	70 e0       	ldi	r23, 0x00	; 0
    357e:	0e 94 67 21 	call	0x42ce	; 0x42ce <__divmodhi4>
    3582:	80 83       	st	Z, r24
	}
}
    3584:	ff 91       	pop	r31
    3586:	ef 91       	pop	r30
    3588:	bf 91       	pop	r27
    358a:	af 91       	pop	r26
    358c:	9f 91       	pop	r25
    358e:	8f 91       	pop	r24
    3590:	7f 91       	pop	r23
    3592:	6f 91       	pop	r22
    3594:	5f 91       	pop	r21
    3596:	0f 90       	pop	r0
    3598:	0f be       	out	0x3f, r0	; 63
    359a:	0f 90       	pop	r0
    359c:	1f 90       	pop	r1
    359e:	18 95       	reti

000035a0 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    35a0:	1f 92       	push	r1
    35a2:	0f 92       	push	r0
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	0f 92       	push	r0
    35a8:	11 24       	eor	r1, r1
    35aa:	8f 93       	push	r24
    35ac:	9f 93       	push	r25
    35ae:	ef 93       	push	r30
    35b0:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    35b2:	e0 e0       	ldi	r30, 0x00	; 0
    35b4:	f8 e0       	ldi	r31, 0x08	; 8
    35b6:	85 81       	ldd	r24, Z+5	; 0x05
    35b8:	8f 7d       	andi	r24, 0xDF	; 223
    35ba:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    35bc:	80 91 1f 2d 	lds	r24, 0x2D1F	; 0x802d1f <send0_buf+0xff>
    35c0:	e0 91 20 2d 	lds	r30, 0x2D20	; 0x802d20 <send0_buf+0x100>
    35c4:	8e 17       	cp	r24, r30
    35c6:	b9 f0       	breq	.+46     	; 0x35f6 <__vector_18+0x56>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    35c8:	91 e0       	ldi	r25, 0x01	; 1
    35ca:	9e 0f       	add	r25, r30
    35cc:	90 93 20 2d 	sts	0x2D20, r25	; 0x802d20 <send0_buf+0x100>
    35d0:	f0 e0       	ldi	r31, 0x00	; 0
    35d2:	e0 5e       	subi	r30, 0xE0	; 224
    35d4:	f3 4d       	sbci	r31, 0xD3	; 211
    35d6:	80 81       	ld	r24, Z
    35d8:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	9f 3f       	cpi	r25, 0xFF	; 255
    35e0:	08 f4       	brcc	.+2      	; 0x35e4 <__vector_18+0x44>
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	89 0f       	add	r24, r25
    35e6:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0x100>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    35ea:	e0 e0       	ldi	r30, 0x00	; 0
    35ec:	f8 e0       	ldi	r31, 0x08	; 8
    35ee:	85 81       	ldd	r24, Z+5	; 0x05
    35f0:	80 62       	ori	r24, 0x20	; 32
    35f2:	85 83       	std	Z+5, r24	; 0x05
    35f4:	03 c0       	rjmp	.+6      	; 0x35fc <__vector_18+0x5c>
	} else {
		send0_buf.done = YES;
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	80 93 24 2d 	sts	0x2D24, r24	; 0x802d24 <send0_buf+0x104>
	}

}
    35fc:	ff 91       	pop	r31
    35fe:	ef 91       	pop	r30
    3600:	9f 91       	pop	r25
    3602:	8f 91       	pop	r24
    3604:	0f 90       	pop	r0
    3606:	0f be       	out	0x3f, r0	; 63
    3608:	0f 90       	pop	r0
    360a:	1f 90       	pop	r1
    360c:	18 95       	reti

0000360e <__vector_26>:
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.

------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    360e:	1f 92       	push	r1
    3610:	0f 92       	push	r0
    3612:	0f b6       	in	r0, 0x3f	; 63
    3614:	0f 92       	push	r0
    3616:	11 24       	eor	r1, r1
    3618:	2f 93       	push	r18
    361a:	8f 93       	push	r24
    361c:	9f 93       	push	r25
    361e:	ef 93       	push	r30
    3620:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    3622:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>

	if (recv1_buf.nxfrd < recv1_buf.nbytes) {
    3626:	e0 91 19 2b 	lds	r30, 0x2B19	; 0x802b19 <recv1_buf+0x103>
    362a:	80 91 17 2b 	lds	r24, 0x2B17	; 0x802b17 <recv1_buf+0x101>
    362e:	e8 17       	cp	r30, r24
    3630:	40 f4       	brcc	.+16     	; 0x3642 <__vector_26+0x34>
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    3632:	21 e0       	ldi	r18, 0x01	; 1
    3634:	2e 0f       	add	r18, r30
    3636:	20 93 19 2b 	sts	0x2B19, r18	; 0x802b19 <recv1_buf+0x103>
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	ea 5e       	subi	r30, 0xEA	; 234
    363e:	f5 4d       	sbci	r31, 0xD5	; 213
    3640:	90 83       	st	Z, r25
	}

	if (recv1_buf.nxfrd >= recv1_buf.nbytes) {
    3642:	90 91 19 2b 	lds	r25, 0x2B19	; 0x802b19 <recv1_buf+0x103>
    3646:	98 17       	cp	r25, r24
    3648:	18 f0       	brcs	.+6      	; 0x3650 <__vector_26+0x42>
		recv1_buf.done = YES;
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	80 93 1a 2b 	sts	0x2B1A, r24	; 0x802b1a <recv1_buf+0x104>
	}

}
    3650:	ff 91       	pop	r31
    3652:	ef 91       	pop	r30
    3654:	9f 91       	pop	r25
    3656:	8f 91       	pop	r24
    3658:	2f 91       	pop	r18
    365a:	0f 90       	pop	r0
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	0f 90       	pop	r0
    3660:	1f 90       	pop	r1
    3662:	18 95       	reti

00003664 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    3664:	1f 92       	push	r1
    3666:	0f 92       	push	r0
    3668:	0f b6       	in	r0, 0x3f	; 63
    366a:	0f 92       	push	r0
    366c:	11 24       	eor	r1, r1
    366e:	8f 93       	push	r24
    3670:	9f 93       	push	r25
    3672:	ef 93       	push	r30
    3674:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    3676:	e0 e2       	ldi	r30, 0x20	; 32
    3678:	f8 e0       	ldi	r31, 0x08	; 8
    367a:	85 81       	ldd	r24, Z+5	; 0x05
    367c:	8f 7d       	andi	r24, 0xDF	; 223
    367e:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    3680:	80 91 2e 30 	lds	r24, 0x302E	; 0x80302e <send1_buf+0xff>
    3684:	e0 91 2f 30 	lds	r30, 0x302F	; 0x80302f <send1_buf+0x100>
    3688:	8e 17       	cp	r24, r30
    368a:	b9 f0       	breq	.+46     	; 0x36ba <__vector_27+0x56>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    368c:	91 e0       	ldi	r25, 0x01	; 1
    368e:	9e 0f       	add	r25, r30
    3690:	90 93 2f 30 	sts	0x302F, r25	; 0x80302f <send1_buf+0x100>
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	e1 5d       	subi	r30, 0xD1	; 209
    3698:	f0 4d       	sbci	r31, 0xD0	; 208
    369a:	80 81       	ld	r24, Z
    369c:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	9f 3f       	cpi	r25, 0xFF	; 255
    36a4:	08 f4       	brcc	.+2      	; 0x36a8 <__vector_27+0x44>
    36a6:	80 e0       	ldi	r24, 0x00	; 0
    36a8:	89 0f       	add	r24, r25
    36aa:	80 93 2f 30 	sts	0x302F, r24	; 0x80302f <send1_buf+0x100>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    36ae:	e0 e2       	ldi	r30, 0x20	; 32
    36b0:	f8 e0       	ldi	r31, 0x08	; 8
    36b2:	85 81       	ldd	r24, Z+5	; 0x05
    36b4:	80 62       	ori	r24, 0x20	; 32
    36b6:	85 83       	std	Z+5, r24	; 0x05
    36b8:	03 c0       	rjmp	.+6      	; 0x36c0 <__vector_27+0x5c>
	} else {
		send1_buf.done = YES;
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	80 93 33 30 	sts	0x3033, r24	; 0x803033 <send1_buf+0x104>
	if (send1_buf.nxfrd >= send1_buf.nbytes) {
		USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
		send1_buf.done = YES;
	}
*/
}
    36c0:	ff 91       	pop	r31
    36c2:	ef 91       	pop	r30
    36c4:	9f 91       	pop	r25
    36c6:	8f 91       	pop	r24
    36c8:	0f 90       	pop	r0
    36ca:	0f be       	out	0x3f, r0	; 63
    36cc:	0f 90       	pop	r0
    36ce:	1f 90       	pop	r1
    36d0:	18 95       	reti

000036d2 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    36d2:	1f 92       	push	r1
    36d4:	0f 92       	push	r0
    36d6:	0f b6       	in	r0, 0x3f	; 63
    36d8:	0f 92       	push	r0
    36da:	11 24       	eor	r1, r1
    36dc:	8f 93       	push	r24
    36de:	9f 93       	push	r25
    36e0:	af 93       	push	r26
    36e2:	bf 93       	push	r27
    36e4:	ef 93       	push	r30
    36e6:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    36e8:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    36ec:	8d 30       	cpi	r24, 0x0D	; 13
    36ee:	21 f0       	breq	.+8      	; 0x36f8 <__vector_37+0x26>
    36f0:	e0 91 28 2e 	lds	r30, 0x2E28	; 0x802e28 <recv3_buf+0x103>
    36f4:	ee 3f       	cpi	r30, 0xFE	; 254
    36f6:	78 f0       	brcs	.+30     	; 0x3716 <__vector_37+0x44>
		recv3_buf.done = YES;
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	80 93 29 2e 	sts	0x2E29, r24	; 0x802e29 <recv3_buf+0x104>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    36fe:	a8 e2       	ldi	r26, 0x28	; 40
    3700:	be e2       	ldi	r27, 0x2E	; 46
    3702:	8c 91       	ld	r24, X
    3704:	e8 2f       	mov	r30, r24
    3706:	f0 e0       	ldi	r31, 0x00	; 0
    3708:	eb 5d       	subi	r30, 0xDB	; 219
    370a:	f2 4d       	sbci	r31, 0xD2	; 210
    370c:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    370e:	80 93 26 2e 	sts	0x2E26, r24	; 0x802e26 <recv3_buf+0x101>
		recv3_buf.nxfrd = 0;
    3712:	1c 92       	st	X, r1
		return;
    3714:	08 c0       	rjmp	.+16     	; 0x3726 <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    3716:	91 e0       	ldi	r25, 0x01	; 1
    3718:	9e 0f       	add	r25, r30
    371a:	90 93 28 2e 	sts	0x2E28, r25	; 0x802e28 <recv3_buf+0x103>
    371e:	f0 e0       	ldi	r31, 0x00	; 0
    3720:	eb 5d       	subi	r30, 0xDB	; 219
    3722:	f2 4d       	sbci	r31, 0xD2	; 210
    3724:	80 83       	st	Z, r24
	}

}
    3726:	ff 91       	pop	r31
    3728:	ef 91       	pop	r30
    372a:	bf 91       	pop	r27
    372c:	af 91       	pop	r26
    372e:	9f 91       	pop	r25
    3730:	8f 91       	pop	r24
    3732:	0f 90       	pop	r0
    3734:	0f be       	out	0x3f, r0	; 63
    3736:	0f 90       	pop	r0
    3738:	1f 90       	pop	r1
    373a:	18 95       	reti

0000373c <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    373c:	1f 92       	push	r1
    373e:	0f 92       	push	r0
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	0f 92       	push	r0
    3744:	11 24       	eor	r1, r1
    3746:	8f 93       	push	r24
    3748:	9f 93       	push	r25
    374a:	af 93       	push	r26
    374c:	bf 93       	push	r27
    374e:	ef 93       	push	r30
    3750:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    3752:	ad e2       	ldi	r26, 0x2D	; 45
    3754:	bf e2       	ldi	r27, 0x2F	; 47
    3756:	ec 91       	ld	r30, X
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	8e 0f       	add	r24, r30
    375c:	8c 93       	st	X, r24
    375e:	f0 e0       	ldi	r31, 0x00	; 0
    3760:	e6 5d       	subi	r30, 0xD6	; 214
    3762:	f1 4d       	sbci	r31, 0xD1	; 209
    3764:	90 81       	ld	r25, Z
    3766:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    376a:	90 91 2b 2f 	lds	r25, 0x2F2B	; 0x802f2b <send3_buf+0x101>
    376e:	89 17       	cp	r24, r25
    3770:	40 f0       	brcs	.+16     	; 0x3782 <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    3772:	e0 e6       	ldi	r30, 0x60	; 96
    3774:	f8 e0       	ldi	r31, 0x08	; 8
    3776:	85 81       	ldd	r24, Z+5	; 0x05
    3778:	8f 7d       	andi	r24, 0xDF	; 223
    377a:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	80 93 2e 2f 	sts	0x2F2E, r24	; 0x802f2e <send3_buf+0x104>
	}

}
    3782:	ff 91       	pop	r31
    3784:	ef 91       	pop	r30
    3786:	bf 91       	pop	r27
    3788:	af 91       	pop	r26
    378a:	9f 91       	pop	r25
    378c:	8f 91       	pop	r24
    378e:	0f 90       	pop	r0
    3790:	0f be       	out	0x3f, r0	; 63
    3792:	0f 90       	pop	r0
    3794:	1f 90       	pop	r1
    3796:	18 95       	reti

00003798 <reboot>:
#include "wdt.h"

void reboot(void)
{

	init_USART();
    3798:	0e 94 af 19 	call	0x335e	; 0x335e <init_USART>
	init_XPORT();
    379c:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <init_XPORT>
	CPU_CCP = CCP_IOREG_gc;
    37a0:	88 ed       	ldi	r24, 0xD8	; 216
    37a2:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    37aa:	08 95       	ret

000037ac <init_XPORT>:
#include "initialize.h"

void init_XPORT(void)
{

	PORTC.OUTCLR = PIN3_bm;		// PC3 is the /RESET pin for the XPort
    37ac:	e0 e4       	ldi	r30, 0x40	; 64
    37ae:	f4 e0       	ldi	r31, 0x04	; 4
    37b0:	88 e0       	ldi	r24, 0x08	; 8
    37b2:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;
    37b4:	81 83       	std	Z+1, r24	; 0x01
    37b6:	ad e8       	ldi	r26, 0x8D	; 141
    37b8:	b0 e2       	ldi	r27, 0x20	; 32
    37ba:	11 97       	sbiw	r26, 0x01	; 1
    37bc:	f1 f7       	brne	.-4      	; 0x37ba <init_XPORT+0xe>
    37be:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;
    37c0:	85 83       	std	Z+5, r24	; 0x05
    37c2:	08 95       	ret

000037c4 <__subsf3>:
    37c4:	50 58       	subi	r21, 0x80	; 128

000037c6 <__addsf3>:
    37c6:	bb 27       	eor	r27, r27
    37c8:	aa 27       	eor	r26, r26
    37ca:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__addsf3x>
    37ce:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <__fp_round>
    37d2:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__fp_pscA>
    37d6:	38 f0       	brcs	.+14     	; 0x37e6 <__addsf3+0x20>
    37d8:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <__fp_pscB>
    37dc:	20 f0       	brcs	.+8      	; 0x37e6 <__addsf3+0x20>
    37de:	39 f4       	brne	.+14     	; 0x37ee <__addsf3+0x28>
    37e0:	9f 3f       	cpi	r25, 0xFF	; 255
    37e2:	19 f4       	brne	.+6      	; 0x37ea <__addsf3+0x24>
    37e4:	26 f4       	brtc	.+8      	; 0x37ee <__addsf3+0x28>
    37e6:	0c 94 2d 1d 	jmp	0x3a5a	; 0x3a5a <__fp_nan>
    37ea:	0e f4       	brtc	.+2      	; 0x37ee <__addsf3+0x28>
    37ec:	e0 95       	com	r30
    37ee:	e7 fb       	bst	r30, 7
    37f0:	0c 94 27 1d 	jmp	0x3a4e	; 0x3a4e <__fp_inf>

000037f4 <__addsf3x>:
    37f4:	e9 2f       	mov	r30, r25
    37f6:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__fp_split3>
    37fa:	58 f3       	brcs	.-42     	; 0x37d2 <__addsf3+0xc>
    37fc:	ba 17       	cp	r27, r26
    37fe:	62 07       	cpc	r22, r18
    3800:	73 07       	cpc	r23, r19
    3802:	84 07       	cpc	r24, r20
    3804:	95 07       	cpc	r25, r21
    3806:	20 f0       	brcs	.+8      	; 0x3810 <__addsf3x+0x1c>
    3808:	79 f4       	brne	.+30     	; 0x3828 <__addsf3x+0x34>
    380a:	a6 f5       	brtc	.+104    	; 0x3874 <__addsf3x+0x80>
    380c:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__fp_zero>
    3810:	0e f4       	brtc	.+2      	; 0x3814 <__addsf3x+0x20>
    3812:	e0 95       	com	r30
    3814:	0b 2e       	mov	r0, r27
    3816:	ba 2f       	mov	r27, r26
    3818:	a0 2d       	mov	r26, r0
    381a:	0b 01       	movw	r0, r22
    381c:	b9 01       	movw	r22, r18
    381e:	90 01       	movw	r18, r0
    3820:	0c 01       	movw	r0, r24
    3822:	ca 01       	movw	r24, r20
    3824:	a0 01       	movw	r20, r0
    3826:	11 24       	eor	r1, r1
    3828:	ff 27       	eor	r31, r31
    382a:	59 1b       	sub	r21, r25
    382c:	99 f0       	breq	.+38     	; 0x3854 <__addsf3x+0x60>
    382e:	59 3f       	cpi	r21, 0xF9	; 249
    3830:	50 f4       	brcc	.+20     	; 0x3846 <__addsf3x+0x52>
    3832:	50 3e       	cpi	r21, 0xE0	; 224
    3834:	68 f1       	brcs	.+90     	; 0x3890 <__addsf3x+0x9c>
    3836:	1a 16       	cp	r1, r26
    3838:	f0 40       	sbci	r31, 0x00	; 0
    383a:	a2 2f       	mov	r26, r18
    383c:	23 2f       	mov	r18, r19
    383e:	34 2f       	mov	r19, r20
    3840:	44 27       	eor	r20, r20
    3842:	58 5f       	subi	r21, 0xF8	; 248
    3844:	f3 cf       	rjmp	.-26     	; 0x382c <__addsf3x+0x38>
    3846:	46 95       	lsr	r20
    3848:	37 95       	ror	r19
    384a:	27 95       	ror	r18
    384c:	a7 95       	ror	r26
    384e:	f0 40       	sbci	r31, 0x00	; 0
    3850:	53 95       	inc	r21
    3852:	c9 f7       	brne	.-14     	; 0x3846 <__addsf3x+0x52>
    3854:	7e f4       	brtc	.+30     	; 0x3874 <__addsf3x+0x80>
    3856:	1f 16       	cp	r1, r31
    3858:	ba 0b       	sbc	r27, r26
    385a:	62 0b       	sbc	r22, r18
    385c:	73 0b       	sbc	r23, r19
    385e:	84 0b       	sbc	r24, r20
    3860:	ba f0       	brmi	.+46     	; 0x3890 <__addsf3x+0x9c>
    3862:	91 50       	subi	r25, 0x01	; 1
    3864:	a1 f0       	breq	.+40     	; 0x388e <__addsf3x+0x9a>
    3866:	ff 0f       	add	r31, r31
    3868:	bb 1f       	adc	r27, r27
    386a:	66 1f       	adc	r22, r22
    386c:	77 1f       	adc	r23, r23
    386e:	88 1f       	adc	r24, r24
    3870:	c2 f7       	brpl	.-16     	; 0x3862 <__addsf3x+0x6e>
    3872:	0e c0       	rjmp	.+28     	; 0x3890 <__addsf3x+0x9c>
    3874:	ba 0f       	add	r27, r26
    3876:	62 1f       	adc	r22, r18
    3878:	73 1f       	adc	r23, r19
    387a:	84 1f       	adc	r24, r20
    387c:	48 f4       	brcc	.+18     	; 0x3890 <__addsf3x+0x9c>
    387e:	87 95       	ror	r24
    3880:	77 95       	ror	r23
    3882:	67 95       	ror	r22
    3884:	b7 95       	ror	r27
    3886:	f7 95       	ror	r31
    3888:	9e 3f       	cpi	r25, 0xFE	; 254
    388a:	08 f0       	brcs	.+2      	; 0x388e <__addsf3x+0x9a>
    388c:	b0 cf       	rjmp	.-160    	; 0x37ee <__addsf3+0x28>
    388e:	93 95       	inc	r25
    3890:	88 0f       	add	r24, r24
    3892:	08 f0       	brcs	.+2      	; 0x3896 <__addsf3x+0xa2>
    3894:	99 27       	eor	r25, r25
    3896:	ee 0f       	add	r30, r30
    3898:	97 95       	ror	r25
    389a:	87 95       	ror	r24
    389c:	08 95       	ret

0000389e <__cmpsf2>:
    389e:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <__fp_cmp>
    38a2:	08 f4       	brcc	.+2      	; 0x38a6 <__cmpsf2+0x8>
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	08 95       	ret

000038a8 <__divsf3>:
    38a8:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__divsf3x>
    38ac:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <__fp_round>
    38b0:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <__fp_pscB>
    38b4:	58 f0       	brcs	.+22     	; 0x38cc <__divsf3+0x24>
    38b6:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__fp_pscA>
    38ba:	40 f0       	brcs	.+16     	; 0x38cc <__divsf3+0x24>
    38bc:	29 f4       	brne	.+10     	; 0x38c8 <__divsf3+0x20>
    38be:	5f 3f       	cpi	r21, 0xFF	; 255
    38c0:	29 f0       	breq	.+10     	; 0x38cc <__divsf3+0x24>
    38c2:	0c 94 27 1d 	jmp	0x3a4e	; 0x3a4e <__fp_inf>
    38c6:	51 11       	cpse	r21, r1
    38c8:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <__fp_szero>
    38cc:	0c 94 2d 1d 	jmp	0x3a5a	; 0x3a5a <__fp_nan>

000038d0 <__divsf3x>:
    38d0:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__fp_split3>
    38d4:	68 f3       	brcs	.-38     	; 0x38b0 <__divsf3+0x8>

000038d6 <__divsf3_pse>:
    38d6:	99 23       	and	r25, r25
    38d8:	b1 f3       	breq	.-20     	; 0x38c6 <__divsf3+0x1e>
    38da:	55 23       	and	r21, r21
    38dc:	91 f3       	breq	.-28     	; 0x38c2 <__divsf3+0x1a>
    38de:	95 1b       	sub	r25, r21
    38e0:	55 0b       	sbc	r21, r21
    38e2:	bb 27       	eor	r27, r27
    38e4:	aa 27       	eor	r26, r26
    38e6:	62 17       	cp	r22, r18
    38e8:	73 07       	cpc	r23, r19
    38ea:	84 07       	cpc	r24, r20
    38ec:	38 f0       	brcs	.+14     	; 0x38fc <__divsf3_pse+0x26>
    38ee:	9f 5f       	subi	r25, 0xFF	; 255
    38f0:	5f 4f       	sbci	r21, 0xFF	; 255
    38f2:	22 0f       	add	r18, r18
    38f4:	33 1f       	adc	r19, r19
    38f6:	44 1f       	adc	r20, r20
    38f8:	aa 1f       	adc	r26, r26
    38fa:	a9 f3       	breq	.-22     	; 0x38e6 <__divsf3_pse+0x10>
    38fc:	35 d0       	rcall	.+106    	; 0x3968 <__divsf3_pse+0x92>
    38fe:	0e 2e       	mov	r0, r30
    3900:	3a f0       	brmi	.+14     	; 0x3910 <__divsf3_pse+0x3a>
    3902:	e0 e8       	ldi	r30, 0x80	; 128
    3904:	32 d0       	rcall	.+100    	; 0x396a <__divsf3_pse+0x94>
    3906:	91 50       	subi	r25, 0x01	; 1
    3908:	50 40       	sbci	r21, 0x00	; 0
    390a:	e6 95       	lsr	r30
    390c:	00 1c       	adc	r0, r0
    390e:	ca f7       	brpl	.-14     	; 0x3902 <__divsf3_pse+0x2c>
    3910:	2b d0       	rcall	.+86     	; 0x3968 <__divsf3_pse+0x92>
    3912:	fe 2f       	mov	r31, r30
    3914:	29 d0       	rcall	.+82     	; 0x3968 <__divsf3_pse+0x92>
    3916:	66 0f       	add	r22, r22
    3918:	77 1f       	adc	r23, r23
    391a:	88 1f       	adc	r24, r24
    391c:	bb 1f       	adc	r27, r27
    391e:	26 17       	cp	r18, r22
    3920:	37 07       	cpc	r19, r23
    3922:	48 07       	cpc	r20, r24
    3924:	ab 07       	cpc	r26, r27
    3926:	b0 e8       	ldi	r27, 0x80	; 128
    3928:	09 f0       	breq	.+2      	; 0x392c <__divsf3_pse+0x56>
    392a:	bb 0b       	sbc	r27, r27
    392c:	80 2d       	mov	r24, r0
    392e:	bf 01       	movw	r22, r30
    3930:	ff 27       	eor	r31, r31
    3932:	93 58       	subi	r25, 0x83	; 131
    3934:	5f 4f       	sbci	r21, 0xFF	; 255
    3936:	3a f0       	brmi	.+14     	; 0x3946 <__divsf3_pse+0x70>
    3938:	9e 3f       	cpi	r25, 0xFE	; 254
    393a:	51 05       	cpc	r21, r1
    393c:	78 f0       	brcs	.+30     	; 0x395c <__divsf3_pse+0x86>
    393e:	0c 94 27 1d 	jmp	0x3a4e	; 0x3a4e <__fp_inf>
    3942:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <__fp_szero>
    3946:	5f 3f       	cpi	r21, 0xFF	; 255
    3948:	e4 f3       	brlt	.-8      	; 0x3942 <__divsf3_pse+0x6c>
    394a:	98 3e       	cpi	r25, 0xE8	; 232
    394c:	d4 f3       	brlt	.-12     	; 0x3942 <__divsf3_pse+0x6c>
    394e:	86 95       	lsr	r24
    3950:	77 95       	ror	r23
    3952:	67 95       	ror	r22
    3954:	b7 95       	ror	r27
    3956:	f7 95       	ror	r31
    3958:	9f 5f       	subi	r25, 0xFF	; 255
    395a:	c9 f7       	brne	.-14     	; 0x394e <__divsf3_pse+0x78>
    395c:	88 0f       	add	r24, r24
    395e:	91 1d       	adc	r25, r1
    3960:	96 95       	lsr	r25
    3962:	87 95       	ror	r24
    3964:	97 f9       	bld	r25, 7
    3966:	08 95       	ret
    3968:	e1 e0       	ldi	r30, 0x01	; 1
    396a:	66 0f       	add	r22, r22
    396c:	77 1f       	adc	r23, r23
    396e:	88 1f       	adc	r24, r24
    3970:	bb 1f       	adc	r27, r27
    3972:	62 17       	cp	r22, r18
    3974:	73 07       	cpc	r23, r19
    3976:	84 07       	cpc	r24, r20
    3978:	ba 07       	cpc	r27, r26
    397a:	20 f0       	brcs	.+8      	; 0x3984 <__divsf3_pse+0xae>
    397c:	62 1b       	sub	r22, r18
    397e:	73 0b       	sbc	r23, r19
    3980:	84 0b       	sbc	r24, r20
    3982:	ba 0b       	sbc	r27, r26
    3984:	ee 1f       	adc	r30, r30
    3986:	88 f7       	brcc	.-30     	; 0x396a <__divsf3_pse+0x94>
    3988:	e0 95       	com	r30
    398a:	08 95       	ret

0000398c <__floatunsisf>:
    398c:	e8 94       	clt
    398e:	09 c0       	rjmp	.+18     	; 0x39a2 <__floatsisf+0x12>

00003990 <__floatsisf>:
    3990:	97 fb       	bst	r25, 7
    3992:	3e f4       	brtc	.+14     	; 0x39a2 <__floatsisf+0x12>
    3994:	90 95       	com	r25
    3996:	80 95       	com	r24
    3998:	70 95       	com	r23
    399a:	61 95       	neg	r22
    399c:	7f 4f       	sbci	r23, 0xFF	; 255
    399e:	8f 4f       	sbci	r24, 0xFF	; 255
    39a0:	9f 4f       	sbci	r25, 0xFF	; 255
    39a2:	99 23       	and	r25, r25
    39a4:	a9 f0       	breq	.+42     	; 0x39d0 <__floatsisf+0x40>
    39a6:	f9 2f       	mov	r31, r25
    39a8:	96 e9       	ldi	r25, 0x96	; 150
    39aa:	bb 27       	eor	r27, r27
    39ac:	93 95       	inc	r25
    39ae:	f6 95       	lsr	r31
    39b0:	87 95       	ror	r24
    39b2:	77 95       	ror	r23
    39b4:	67 95       	ror	r22
    39b6:	b7 95       	ror	r27
    39b8:	f1 11       	cpse	r31, r1
    39ba:	f8 cf       	rjmp	.-16     	; 0x39ac <__floatsisf+0x1c>
    39bc:	fa f4       	brpl	.+62     	; 0x39fc <__floatsisf+0x6c>
    39be:	bb 0f       	add	r27, r27
    39c0:	11 f4       	brne	.+4      	; 0x39c6 <__floatsisf+0x36>
    39c2:	60 ff       	sbrs	r22, 0
    39c4:	1b c0       	rjmp	.+54     	; 0x39fc <__floatsisf+0x6c>
    39c6:	6f 5f       	subi	r22, 0xFF	; 255
    39c8:	7f 4f       	sbci	r23, 0xFF	; 255
    39ca:	8f 4f       	sbci	r24, 0xFF	; 255
    39cc:	9f 4f       	sbci	r25, 0xFF	; 255
    39ce:	16 c0       	rjmp	.+44     	; 0x39fc <__floatsisf+0x6c>
    39d0:	88 23       	and	r24, r24
    39d2:	11 f0       	breq	.+4      	; 0x39d8 <__floatsisf+0x48>
    39d4:	96 e9       	ldi	r25, 0x96	; 150
    39d6:	11 c0       	rjmp	.+34     	; 0x39fa <__floatsisf+0x6a>
    39d8:	77 23       	and	r23, r23
    39da:	21 f0       	breq	.+8      	; 0x39e4 <__floatsisf+0x54>
    39dc:	9e e8       	ldi	r25, 0x8E	; 142
    39de:	87 2f       	mov	r24, r23
    39e0:	76 2f       	mov	r23, r22
    39e2:	05 c0       	rjmp	.+10     	; 0x39ee <__floatsisf+0x5e>
    39e4:	66 23       	and	r22, r22
    39e6:	71 f0       	breq	.+28     	; 0x3a04 <__floatsisf+0x74>
    39e8:	96 e8       	ldi	r25, 0x86	; 134
    39ea:	86 2f       	mov	r24, r22
    39ec:	70 e0       	ldi	r23, 0x00	; 0
    39ee:	60 e0       	ldi	r22, 0x00	; 0
    39f0:	2a f0       	brmi	.+10     	; 0x39fc <__floatsisf+0x6c>
    39f2:	9a 95       	dec	r25
    39f4:	66 0f       	add	r22, r22
    39f6:	77 1f       	adc	r23, r23
    39f8:	88 1f       	adc	r24, r24
    39fa:	da f7       	brpl	.-10     	; 0x39f2 <__floatsisf+0x62>
    39fc:	88 0f       	add	r24, r24
    39fe:	96 95       	lsr	r25
    3a00:	87 95       	ror	r24
    3a02:	97 f9       	bld	r25, 7
    3a04:	08 95       	ret

00003a06 <__fp_cmp>:
    3a06:	99 0f       	add	r25, r25
    3a08:	00 08       	sbc	r0, r0
    3a0a:	55 0f       	add	r21, r21
    3a0c:	aa 0b       	sbc	r26, r26
    3a0e:	e0 e8       	ldi	r30, 0x80	; 128
    3a10:	fe ef       	ldi	r31, 0xFE	; 254
    3a12:	16 16       	cp	r1, r22
    3a14:	17 06       	cpc	r1, r23
    3a16:	e8 07       	cpc	r30, r24
    3a18:	f9 07       	cpc	r31, r25
    3a1a:	c0 f0       	brcs	.+48     	; 0x3a4c <__fp_cmp+0x46>
    3a1c:	12 16       	cp	r1, r18
    3a1e:	13 06       	cpc	r1, r19
    3a20:	e4 07       	cpc	r30, r20
    3a22:	f5 07       	cpc	r31, r21
    3a24:	98 f0       	brcs	.+38     	; 0x3a4c <__fp_cmp+0x46>
    3a26:	62 1b       	sub	r22, r18
    3a28:	73 0b       	sbc	r23, r19
    3a2a:	84 0b       	sbc	r24, r20
    3a2c:	95 0b       	sbc	r25, r21
    3a2e:	39 f4       	brne	.+14     	; 0x3a3e <__fp_cmp+0x38>
    3a30:	0a 26       	eor	r0, r26
    3a32:	61 f0       	breq	.+24     	; 0x3a4c <__fp_cmp+0x46>
    3a34:	23 2b       	or	r18, r19
    3a36:	24 2b       	or	r18, r20
    3a38:	25 2b       	or	r18, r21
    3a3a:	21 f4       	brne	.+8      	; 0x3a44 <__fp_cmp+0x3e>
    3a3c:	08 95       	ret
    3a3e:	0a 26       	eor	r0, r26
    3a40:	09 f4       	brne	.+2      	; 0x3a44 <__fp_cmp+0x3e>
    3a42:	a1 40       	sbci	r26, 0x01	; 1
    3a44:	a6 95       	lsr	r26
    3a46:	8f ef       	ldi	r24, 0xFF	; 255
    3a48:	81 1d       	adc	r24, r1
    3a4a:	81 1d       	adc	r24, r1
    3a4c:	08 95       	ret

00003a4e <__fp_inf>:
    3a4e:	97 f9       	bld	r25, 7
    3a50:	9f 67       	ori	r25, 0x7F	; 127
    3a52:	80 e8       	ldi	r24, 0x80	; 128
    3a54:	70 e0       	ldi	r23, 0x00	; 0
    3a56:	60 e0       	ldi	r22, 0x00	; 0
    3a58:	08 95       	ret

00003a5a <__fp_nan>:
    3a5a:	9f ef       	ldi	r25, 0xFF	; 255
    3a5c:	80 ec       	ldi	r24, 0xC0	; 192
    3a5e:	08 95       	ret

00003a60 <__fp_pscA>:
    3a60:	00 24       	eor	r0, r0
    3a62:	0a 94       	dec	r0
    3a64:	16 16       	cp	r1, r22
    3a66:	17 06       	cpc	r1, r23
    3a68:	18 06       	cpc	r1, r24
    3a6a:	09 06       	cpc	r0, r25
    3a6c:	08 95       	ret

00003a6e <__fp_pscB>:
    3a6e:	00 24       	eor	r0, r0
    3a70:	0a 94       	dec	r0
    3a72:	12 16       	cp	r1, r18
    3a74:	13 06       	cpc	r1, r19
    3a76:	14 06       	cpc	r1, r20
    3a78:	05 06       	cpc	r0, r21
    3a7a:	08 95       	ret

00003a7c <__fp_round>:
    3a7c:	09 2e       	mov	r0, r25
    3a7e:	03 94       	inc	r0
    3a80:	00 0c       	add	r0, r0
    3a82:	11 f4       	brne	.+4      	; 0x3a88 <__fp_round+0xc>
    3a84:	88 23       	and	r24, r24
    3a86:	52 f0       	brmi	.+20     	; 0x3a9c <__fp_round+0x20>
    3a88:	bb 0f       	add	r27, r27
    3a8a:	40 f4       	brcc	.+16     	; 0x3a9c <__fp_round+0x20>
    3a8c:	bf 2b       	or	r27, r31
    3a8e:	11 f4       	brne	.+4      	; 0x3a94 <__fp_round+0x18>
    3a90:	60 ff       	sbrs	r22, 0
    3a92:	04 c0       	rjmp	.+8      	; 0x3a9c <__fp_round+0x20>
    3a94:	6f 5f       	subi	r22, 0xFF	; 255
    3a96:	7f 4f       	sbci	r23, 0xFF	; 255
    3a98:	8f 4f       	sbci	r24, 0xFF	; 255
    3a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a9c:	08 95       	ret

00003a9e <__fp_split3>:
    3a9e:	57 fd       	sbrc	r21, 7
    3aa0:	90 58       	subi	r25, 0x80	; 128
    3aa2:	44 0f       	add	r20, r20
    3aa4:	55 1f       	adc	r21, r21
    3aa6:	59 f0       	breq	.+22     	; 0x3abe <__fp_splitA+0x10>
    3aa8:	5f 3f       	cpi	r21, 0xFF	; 255
    3aaa:	71 f0       	breq	.+28     	; 0x3ac8 <__fp_splitA+0x1a>
    3aac:	47 95       	ror	r20

00003aae <__fp_splitA>:
    3aae:	88 0f       	add	r24, r24
    3ab0:	97 fb       	bst	r25, 7
    3ab2:	99 1f       	adc	r25, r25
    3ab4:	61 f0       	breq	.+24     	; 0x3ace <__fp_splitA+0x20>
    3ab6:	9f 3f       	cpi	r25, 0xFF	; 255
    3ab8:	79 f0       	breq	.+30     	; 0x3ad8 <__fp_splitA+0x2a>
    3aba:	87 95       	ror	r24
    3abc:	08 95       	ret
    3abe:	12 16       	cp	r1, r18
    3ac0:	13 06       	cpc	r1, r19
    3ac2:	14 06       	cpc	r1, r20
    3ac4:	55 1f       	adc	r21, r21
    3ac6:	f2 cf       	rjmp	.-28     	; 0x3aac <__fp_split3+0xe>
    3ac8:	46 95       	lsr	r20
    3aca:	f1 df       	rcall	.-30     	; 0x3aae <__fp_splitA>
    3acc:	08 c0       	rjmp	.+16     	; 0x3ade <__fp_splitA+0x30>
    3ace:	16 16       	cp	r1, r22
    3ad0:	17 06       	cpc	r1, r23
    3ad2:	18 06       	cpc	r1, r24
    3ad4:	99 1f       	adc	r25, r25
    3ad6:	f1 cf       	rjmp	.-30     	; 0x3aba <__fp_splitA+0xc>
    3ad8:	86 95       	lsr	r24
    3ada:	71 05       	cpc	r23, r1
    3adc:	61 05       	cpc	r22, r1
    3ade:	08 94       	sec
    3ae0:	08 95       	ret

00003ae2 <__fp_zero>:
    3ae2:	e8 94       	clt

00003ae4 <__fp_szero>:
    3ae4:	bb 27       	eor	r27, r27
    3ae6:	66 27       	eor	r22, r22
    3ae8:	77 27       	eor	r23, r23
    3aea:	cb 01       	movw	r24, r22
    3aec:	97 f9       	bld	r25, 7
    3aee:	08 95       	ret

00003af0 <__gesf2>:
    3af0:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <__fp_cmp>
    3af4:	08 f4       	brcc	.+2      	; 0x3af8 <__gesf2+0x8>
    3af6:	8f ef       	ldi	r24, 0xFF	; 255
    3af8:	08 95       	ret

00003afa <__mulsf3>:
    3afa:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <__mulsf3x>
    3afe:	0c 94 3e 1d 	jmp	0x3a7c	; 0x3a7c <__fp_round>
    3b02:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__fp_pscA>
    3b06:	38 f0       	brcs	.+14     	; 0x3b16 <__mulsf3+0x1c>
    3b08:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <__fp_pscB>
    3b0c:	20 f0       	brcs	.+8      	; 0x3b16 <__mulsf3+0x1c>
    3b0e:	95 23       	and	r25, r21
    3b10:	11 f0       	breq	.+4      	; 0x3b16 <__mulsf3+0x1c>
    3b12:	0c 94 27 1d 	jmp	0x3a4e	; 0x3a4e <__fp_inf>
    3b16:	0c 94 2d 1d 	jmp	0x3a5a	; 0x3a5a <__fp_nan>
    3b1a:	11 24       	eor	r1, r1
    3b1c:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <__fp_szero>

00003b20 <__mulsf3x>:
    3b20:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__fp_split3>
    3b24:	70 f3       	brcs	.-36     	; 0x3b02 <__mulsf3+0x8>

00003b26 <__mulsf3_pse>:
    3b26:	95 9f       	mul	r25, r21
    3b28:	c1 f3       	breq	.-16     	; 0x3b1a <__mulsf3+0x20>
    3b2a:	95 0f       	add	r25, r21
    3b2c:	50 e0       	ldi	r21, 0x00	; 0
    3b2e:	55 1f       	adc	r21, r21
    3b30:	62 9f       	mul	r22, r18
    3b32:	f0 01       	movw	r30, r0
    3b34:	72 9f       	mul	r23, r18
    3b36:	bb 27       	eor	r27, r27
    3b38:	f0 0d       	add	r31, r0
    3b3a:	b1 1d       	adc	r27, r1
    3b3c:	63 9f       	mul	r22, r19
    3b3e:	aa 27       	eor	r26, r26
    3b40:	f0 0d       	add	r31, r0
    3b42:	b1 1d       	adc	r27, r1
    3b44:	aa 1f       	adc	r26, r26
    3b46:	64 9f       	mul	r22, r20
    3b48:	66 27       	eor	r22, r22
    3b4a:	b0 0d       	add	r27, r0
    3b4c:	a1 1d       	adc	r26, r1
    3b4e:	66 1f       	adc	r22, r22
    3b50:	82 9f       	mul	r24, r18
    3b52:	22 27       	eor	r18, r18
    3b54:	b0 0d       	add	r27, r0
    3b56:	a1 1d       	adc	r26, r1
    3b58:	62 1f       	adc	r22, r18
    3b5a:	73 9f       	mul	r23, r19
    3b5c:	b0 0d       	add	r27, r0
    3b5e:	a1 1d       	adc	r26, r1
    3b60:	62 1f       	adc	r22, r18
    3b62:	83 9f       	mul	r24, r19
    3b64:	a0 0d       	add	r26, r0
    3b66:	61 1d       	adc	r22, r1
    3b68:	22 1f       	adc	r18, r18
    3b6a:	74 9f       	mul	r23, r20
    3b6c:	33 27       	eor	r19, r19
    3b6e:	a0 0d       	add	r26, r0
    3b70:	61 1d       	adc	r22, r1
    3b72:	23 1f       	adc	r18, r19
    3b74:	84 9f       	mul	r24, r20
    3b76:	60 0d       	add	r22, r0
    3b78:	21 1d       	adc	r18, r1
    3b7a:	82 2f       	mov	r24, r18
    3b7c:	76 2f       	mov	r23, r22
    3b7e:	6a 2f       	mov	r22, r26
    3b80:	11 24       	eor	r1, r1
    3b82:	9f 57       	subi	r25, 0x7F	; 127
    3b84:	50 40       	sbci	r21, 0x00	; 0
    3b86:	9a f0       	brmi	.+38     	; 0x3bae <__mulsf3_pse+0x88>
    3b88:	f1 f0       	breq	.+60     	; 0x3bc6 <__mulsf3_pse+0xa0>
    3b8a:	88 23       	and	r24, r24
    3b8c:	4a f0       	brmi	.+18     	; 0x3ba0 <__mulsf3_pse+0x7a>
    3b8e:	ee 0f       	add	r30, r30
    3b90:	ff 1f       	adc	r31, r31
    3b92:	bb 1f       	adc	r27, r27
    3b94:	66 1f       	adc	r22, r22
    3b96:	77 1f       	adc	r23, r23
    3b98:	88 1f       	adc	r24, r24
    3b9a:	91 50       	subi	r25, 0x01	; 1
    3b9c:	50 40       	sbci	r21, 0x00	; 0
    3b9e:	a9 f7       	brne	.-22     	; 0x3b8a <__mulsf3_pse+0x64>
    3ba0:	9e 3f       	cpi	r25, 0xFE	; 254
    3ba2:	51 05       	cpc	r21, r1
    3ba4:	80 f0       	brcs	.+32     	; 0x3bc6 <__mulsf3_pse+0xa0>
    3ba6:	0c 94 27 1d 	jmp	0x3a4e	; 0x3a4e <__fp_inf>
    3baa:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <__fp_szero>
    3bae:	5f 3f       	cpi	r21, 0xFF	; 255
    3bb0:	e4 f3       	brlt	.-8      	; 0x3baa <__mulsf3_pse+0x84>
    3bb2:	98 3e       	cpi	r25, 0xE8	; 232
    3bb4:	d4 f3       	brlt	.-12     	; 0x3baa <__mulsf3_pse+0x84>
    3bb6:	86 95       	lsr	r24
    3bb8:	77 95       	ror	r23
    3bba:	67 95       	ror	r22
    3bbc:	b7 95       	ror	r27
    3bbe:	f7 95       	ror	r31
    3bc0:	e7 95       	ror	r30
    3bc2:	9f 5f       	subi	r25, 0xFF	; 255
    3bc4:	c1 f7       	brne	.-16     	; 0x3bb6 <__mulsf3_pse+0x90>
    3bc6:	fe 2b       	or	r31, r30
    3bc8:	88 0f       	add	r24, r24
    3bca:	91 1d       	adc	r25, r1
    3bcc:	96 95       	lsr	r25
    3bce:	87 95       	ror	r24
    3bd0:	97 f9       	bld	r25, 7
    3bd2:	08 95       	ret

00003bd4 <vfprintf>:
    3bd4:	a0 e1       	ldi	r26, 0x10	; 16
    3bd6:	b0 e0       	ldi	r27, 0x00	; 0
    3bd8:	e0 ef       	ldi	r30, 0xF0	; 240
    3bda:	fd e1       	ldi	r31, 0x1D	; 29
    3bdc:	0c 94 ab 21 	jmp	0x4356	; 0x4356 <__prologue_saves__>
    3be0:	7c 01       	movw	r14, r24
    3be2:	1b 01       	movw	r2, r22
    3be4:	6a 01       	movw	r12, r20
    3be6:	fc 01       	movw	r30, r24
    3be8:	16 82       	std	Z+6, r1	; 0x06
    3bea:	17 82       	std	Z+7, r1	; 0x07
    3bec:	83 81       	ldd	r24, Z+3	; 0x03
    3bee:	81 ff       	sbrs	r24, 1
    3bf0:	44 c3       	rjmp	.+1672   	; 0x427a <__RODATA_PM_OFFSET__+0x27a>
    3bf2:	9e 01       	movw	r18, r28
    3bf4:	2f 5f       	subi	r18, 0xFF	; 255
    3bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    3bf8:	39 01       	movw	r6, r18
    3bfa:	f7 01       	movw	r30, r14
    3bfc:	93 81       	ldd	r25, Z+3	; 0x03
    3bfe:	f1 01       	movw	r30, r2
    3c00:	93 fd       	sbrc	r25, 3
    3c02:	85 91       	lpm	r24, Z+
    3c04:	93 ff       	sbrs	r25, 3
    3c06:	81 91       	ld	r24, Z+
    3c08:	1f 01       	movw	r2, r30
    3c0a:	88 23       	and	r24, r24
    3c0c:	09 f4       	brne	.+2      	; 0x3c10 <vfprintf+0x3c>
    3c0e:	31 c3       	rjmp	.+1634   	; 0x4272 <__RODATA_PM_OFFSET__+0x272>
    3c10:	85 32       	cpi	r24, 0x25	; 37
    3c12:	39 f4       	brne	.+14     	; 0x3c22 <vfprintf+0x4e>
    3c14:	93 fd       	sbrc	r25, 3
    3c16:	85 91       	lpm	r24, Z+
    3c18:	93 ff       	sbrs	r25, 3
    3c1a:	81 91       	ld	r24, Z+
    3c1c:	1f 01       	movw	r2, r30
    3c1e:	85 32       	cpi	r24, 0x25	; 37
    3c20:	39 f4       	brne	.+14     	; 0x3c30 <vfprintf+0x5c>
    3c22:	b7 01       	movw	r22, r14
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    3c2a:	56 01       	movw	r10, r12
    3c2c:	65 01       	movw	r12, r10
    3c2e:	e5 cf       	rjmp	.-54     	; 0x3bfa <vfprintf+0x26>
    3c30:	10 e0       	ldi	r17, 0x00	; 0
    3c32:	51 2c       	mov	r5, r1
    3c34:	91 2c       	mov	r9, r1
    3c36:	ff e1       	ldi	r31, 0x1F	; 31
    3c38:	f9 15       	cp	r31, r9
    3c3a:	d8 f0       	brcs	.+54     	; 0x3c72 <vfprintf+0x9e>
    3c3c:	8b 32       	cpi	r24, 0x2B	; 43
    3c3e:	79 f0       	breq	.+30     	; 0x3c5e <vfprintf+0x8a>
    3c40:	38 f4       	brcc	.+14     	; 0x3c50 <vfprintf+0x7c>
    3c42:	80 32       	cpi	r24, 0x20	; 32
    3c44:	79 f0       	breq	.+30     	; 0x3c64 <vfprintf+0x90>
    3c46:	83 32       	cpi	r24, 0x23	; 35
    3c48:	a1 f4       	brne	.+40     	; 0x3c72 <vfprintf+0x9e>
    3c4a:	f9 2d       	mov	r31, r9
    3c4c:	f0 61       	ori	r31, 0x10	; 16
    3c4e:	2e c0       	rjmp	.+92     	; 0x3cac <vfprintf+0xd8>
    3c50:	8d 32       	cpi	r24, 0x2D	; 45
    3c52:	61 f0       	breq	.+24     	; 0x3c6c <vfprintf+0x98>
    3c54:	80 33       	cpi	r24, 0x30	; 48
    3c56:	69 f4       	brne	.+26     	; 0x3c72 <vfprintf+0x9e>
    3c58:	29 2d       	mov	r18, r9
    3c5a:	21 60       	ori	r18, 0x01	; 1
    3c5c:	2d c0       	rjmp	.+90     	; 0x3cb8 <vfprintf+0xe4>
    3c5e:	39 2d       	mov	r19, r9
    3c60:	32 60       	ori	r19, 0x02	; 2
    3c62:	93 2e       	mov	r9, r19
    3c64:	89 2d       	mov	r24, r9
    3c66:	84 60       	ori	r24, 0x04	; 4
    3c68:	98 2e       	mov	r9, r24
    3c6a:	2a c0       	rjmp	.+84     	; 0x3cc0 <vfprintf+0xec>
    3c6c:	e9 2d       	mov	r30, r9
    3c6e:	e8 60       	ori	r30, 0x08	; 8
    3c70:	15 c0       	rjmp	.+42     	; 0x3c9c <vfprintf+0xc8>
    3c72:	97 fc       	sbrc	r9, 7
    3c74:	2d c0       	rjmp	.+90     	; 0x3cd0 <vfprintf+0xfc>
    3c76:	20 ed       	ldi	r18, 0xD0	; 208
    3c78:	28 0f       	add	r18, r24
    3c7a:	2a 30       	cpi	r18, 0x0A	; 10
    3c7c:	88 f4       	brcc	.+34     	; 0x3ca0 <vfprintf+0xcc>
    3c7e:	96 fe       	sbrs	r9, 6
    3c80:	06 c0       	rjmp	.+12     	; 0x3c8e <vfprintf+0xba>
    3c82:	3a e0       	ldi	r19, 0x0A	; 10
    3c84:	13 9f       	mul	r17, r19
    3c86:	20 0d       	add	r18, r0
    3c88:	11 24       	eor	r1, r1
    3c8a:	12 2f       	mov	r17, r18
    3c8c:	19 c0       	rjmp	.+50     	; 0x3cc0 <vfprintf+0xec>
    3c8e:	8a e0       	ldi	r24, 0x0A	; 10
    3c90:	58 9e       	mul	r5, r24
    3c92:	20 0d       	add	r18, r0
    3c94:	11 24       	eor	r1, r1
    3c96:	52 2e       	mov	r5, r18
    3c98:	e9 2d       	mov	r30, r9
    3c9a:	e0 62       	ori	r30, 0x20	; 32
    3c9c:	9e 2e       	mov	r9, r30
    3c9e:	10 c0       	rjmp	.+32     	; 0x3cc0 <vfprintf+0xec>
    3ca0:	8e 32       	cpi	r24, 0x2E	; 46
    3ca2:	31 f4       	brne	.+12     	; 0x3cb0 <vfprintf+0xdc>
    3ca4:	96 fc       	sbrc	r9, 6
    3ca6:	e5 c2       	rjmp	.+1482   	; 0x4272 <__RODATA_PM_OFFSET__+0x272>
    3ca8:	f9 2d       	mov	r31, r9
    3caa:	f0 64       	ori	r31, 0x40	; 64
    3cac:	9f 2e       	mov	r9, r31
    3cae:	08 c0       	rjmp	.+16     	; 0x3cc0 <vfprintf+0xec>
    3cb0:	8c 36       	cpi	r24, 0x6C	; 108
    3cb2:	21 f4       	brne	.+8      	; 0x3cbc <vfprintf+0xe8>
    3cb4:	29 2d       	mov	r18, r9
    3cb6:	20 68       	ori	r18, 0x80	; 128
    3cb8:	92 2e       	mov	r9, r18
    3cba:	02 c0       	rjmp	.+4      	; 0x3cc0 <vfprintf+0xec>
    3cbc:	88 36       	cpi	r24, 0x68	; 104
    3cbe:	41 f4       	brne	.+16     	; 0x3cd0 <vfprintf+0xfc>
    3cc0:	f1 01       	movw	r30, r2
    3cc2:	93 fd       	sbrc	r25, 3
    3cc4:	85 91       	lpm	r24, Z+
    3cc6:	93 ff       	sbrs	r25, 3
    3cc8:	81 91       	ld	r24, Z+
    3cca:	1f 01       	movw	r2, r30
    3ccc:	81 11       	cpse	r24, r1
    3cce:	b3 cf       	rjmp	.-154    	; 0x3c36 <vfprintf+0x62>
    3cd0:	9b eb       	ldi	r25, 0xBB	; 187
    3cd2:	98 0f       	add	r25, r24
    3cd4:	93 30       	cpi	r25, 0x03	; 3
    3cd6:	20 f4       	brcc	.+8      	; 0x3ce0 <vfprintf+0x10c>
    3cd8:	99 2d       	mov	r25, r9
    3cda:	90 61       	ori	r25, 0x10	; 16
    3cdc:	80 5e       	subi	r24, 0xE0	; 224
    3cde:	07 c0       	rjmp	.+14     	; 0x3cee <vfprintf+0x11a>
    3ce0:	9b e9       	ldi	r25, 0x9B	; 155
    3ce2:	98 0f       	add	r25, r24
    3ce4:	93 30       	cpi	r25, 0x03	; 3
    3ce6:	08 f0       	brcs	.+2      	; 0x3cea <vfprintf+0x116>
    3ce8:	66 c1       	rjmp	.+716    	; 0x3fb6 <vfprintf+0x3e2>
    3cea:	99 2d       	mov	r25, r9
    3cec:	9f 7e       	andi	r25, 0xEF	; 239
    3cee:	96 ff       	sbrs	r25, 6
    3cf0:	16 e0       	ldi	r17, 0x06	; 6
    3cf2:	9f 73       	andi	r25, 0x3F	; 63
    3cf4:	99 2e       	mov	r9, r25
    3cf6:	85 36       	cpi	r24, 0x65	; 101
    3cf8:	19 f4       	brne	.+6      	; 0x3d00 <vfprintf+0x12c>
    3cfa:	90 64       	ori	r25, 0x40	; 64
    3cfc:	99 2e       	mov	r9, r25
    3cfe:	08 c0       	rjmp	.+16     	; 0x3d10 <vfprintf+0x13c>
    3d00:	86 36       	cpi	r24, 0x66	; 102
    3d02:	21 f4       	brne	.+8      	; 0x3d0c <vfprintf+0x138>
    3d04:	39 2f       	mov	r19, r25
    3d06:	30 68       	ori	r19, 0x80	; 128
    3d08:	93 2e       	mov	r9, r19
    3d0a:	02 c0       	rjmp	.+4      	; 0x3d10 <vfprintf+0x13c>
    3d0c:	11 11       	cpse	r17, r1
    3d0e:	11 50       	subi	r17, 0x01	; 1
    3d10:	97 fe       	sbrs	r9, 7
    3d12:	07 c0       	rjmp	.+14     	; 0x3d22 <vfprintf+0x14e>
    3d14:	1c 33       	cpi	r17, 0x3C	; 60
    3d16:	50 f4       	brcc	.+20     	; 0x3d2c <vfprintf+0x158>
    3d18:	44 24       	eor	r4, r4
    3d1a:	43 94       	inc	r4
    3d1c:	41 0e       	add	r4, r17
    3d1e:	27 e0       	ldi	r18, 0x07	; 7
    3d20:	0b c0       	rjmp	.+22     	; 0x3d38 <vfprintf+0x164>
    3d22:	18 30       	cpi	r17, 0x08	; 8
    3d24:	38 f0       	brcs	.+14     	; 0x3d34 <vfprintf+0x160>
    3d26:	27 e0       	ldi	r18, 0x07	; 7
    3d28:	17 e0       	ldi	r17, 0x07	; 7
    3d2a:	05 c0       	rjmp	.+10     	; 0x3d36 <vfprintf+0x162>
    3d2c:	27 e0       	ldi	r18, 0x07	; 7
    3d2e:	9c e3       	ldi	r25, 0x3C	; 60
    3d30:	49 2e       	mov	r4, r25
    3d32:	02 c0       	rjmp	.+4      	; 0x3d38 <vfprintf+0x164>
    3d34:	21 2f       	mov	r18, r17
    3d36:	41 2c       	mov	r4, r1
    3d38:	56 01       	movw	r10, r12
    3d3a:	84 e0       	ldi	r24, 0x04	; 4
    3d3c:	a8 0e       	add	r10, r24
    3d3e:	b1 1c       	adc	r11, r1
    3d40:	f6 01       	movw	r30, r12
    3d42:	60 81       	ld	r22, Z
    3d44:	71 81       	ldd	r23, Z+1	; 0x01
    3d46:	82 81       	ldd	r24, Z+2	; 0x02
    3d48:	93 81       	ldd	r25, Z+3	; 0x03
    3d4a:	04 2d       	mov	r16, r4
    3d4c:	a3 01       	movw	r20, r6
    3d4e:	0e 94 48 22 	call	0x4490	; 0x4490 <__ftoa_engine>
    3d52:	6c 01       	movw	r12, r24
    3d54:	f9 81       	ldd	r31, Y+1	; 0x01
    3d56:	fc 87       	std	Y+12, r31	; 0x0c
    3d58:	f0 ff       	sbrs	r31, 0
    3d5a:	02 c0       	rjmp	.+4      	; 0x3d60 <vfprintf+0x18c>
    3d5c:	f3 ff       	sbrs	r31, 3
    3d5e:	06 c0       	rjmp	.+12     	; 0x3d6c <vfprintf+0x198>
    3d60:	91 fc       	sbrc	r9, 1
    3d62:	06 c0       	rjmp	.+12     	; 0x3d70 <vfprintf+0x19c>
    3d64:	92 fe       	sbrs	r9, 2
    3d66:	06 c0       	rjmp	.+12     	; 0x3d74 <vfprintf+0x1a0>
    3d68:	00 e2       	ldi	r16, 0x20	; 32
    3d6a:	05 c0       	rjmp	.+10     	; 0x3d76 <vfprintf+0x1a2>
    3d6c:	0d e2       	ldi	r16, 0x2D	; 45
    3d6e:	03 c0       	rjmp	.+6      	; 0x3d76 <vfprintf+0x1a2>
    3d70:	0b e2       	ldi	r16, 0x2B	; 43
    3d72:	01 c0       	rjmp	.+2      	; 0x3d76 <vfprintf+0x1a2>
    3d74:	00 e0       	ldi	r16, 0x00	; 0
    3d76:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d78:	8c 70       	andi	r24, 0x0C	; 12
    3d7a:	19 f0       	breq	.+6      	; 0x3d82 <vfprintf+0x1ae>
    3d7c:	01 11       	cpse	r16, r1
    3d7e:	5a c2       	rjmp	.+1204   	; 0x4234 <__RODATA_PM_OFFSET__+0x234>
    3d80:	9b c2       	rjmp	.+1334   	; 0x42b8 <__RODATA_PM_OFFSET__+0x2b8>
    3d82:	97 fe       	sbrs	r9, 7
    3d84:	10 c0       	rjmp	.+32     	; 0x3da6 <vfprintf+0x1d2>
    3d86:	4c 0c       	add	r4, r12
    3d88:	fc 85       	ldd	r31, Y+12	; 0x0c
    3d8a:	f4 ff       	sbrs	r31, 4
    3d8c:	04 c0       	rjmp	.+8      	; 0x3d96 <vfprintf+0x1c2>
    3d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d90:	81 33       	cpi	r24, 0x31	; 49
    3d92:	09 f4       	brne	.+2      	; 0x3d96 <vfprintf+0x1c2>
    3d94:	4a 94       	dec	r4
    3d96:	14 14       	cp	r1, r4
    3d98:	74 f5       	brge	.+92     	; 0x3df6 <vfprintf+0x222>
    3d9a:	28 e0       	ldi	r18, 0x08	; 8
    3d9c:	24 15       	cp	r18, r4
    3d9e:	78 f5       	brcc	.+94     	; 0x3dfe <vfprintf+0x22a>
    3da0:	88 e0       	ldi	r24, 0x08	; 8
    3da2:	48 2e       	mov	r4, r24
    3da4:	2c c0       	rjmp	.+88     	; 0x3dfe <vfprintf+0x22a>
    3da6:	96 fc       	sbrc	r9, 6
    3da8:	2a c0       	rjmp	.+84     	; 0x3dfe <vfprintf+0x22a>
    3daa:	81 2f       	mov	r24, r17
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	8c 15       	cp	r24, r12
    3db0:	9d 05       	cpc	r25, r13
    3db2:	9c f0       	brlt	.+38     	; 0x3dda <vfprintf+0x206>
    3db4:	3c ef       	ldi	r19, 0xFC	; 252
    3db6:	c3 16       	cp	r12, r19
    3db8:	3f ef       	ldi	r19, 0xFF	; 255
    3dba:	d3 06       	cpc	r13, r19
    3dbc:	74 f0       	brlt	.+28     	; 0x3dda <vfprintf+0x206>
    3dbe:	89 2d       	mov	r24, r9
    3dc0:	80 68       	ori	r24, 0x80	; 128
    3dc2:	98 2e       	mov	r9, r24
    3dc4:	0a c0       	rjmp	.+20     	; 0x3dda <vfprintf+0x206>
    3dc6:	e2 e0       	ldi	r30, 0x02	; 2
    3dc8:	f0 e0       	ldi	r31, 0x00	; 0
    3dca:	ec 0f       	add	r30, r28
    3dcc:	fd 1f       	adc	r31, r29
    3dce:	e1 0f       	add	r30, r17
    3dd0:	f1 1d       	adc	r31, r1
    3dd2:	80 81       	ld	r24, Z
    3dd4:	80 33       	cpi	r24, 0x30	; 48
    3dd6:	19 f4       	brne	.+6      	; 0x3dde <vfprintf+0x20a>
    3dd8:	11 50       	subi	r17, 0x01	; 1
    3dda:	11 11       	cpse	r17, r1
    3ddc:	f4 cf       	rjmp	.-24     	; 0x3dc6 <vfprintf+0x1f2>
    3dde:	97 fe       	sbrs	r9, 7
    3de0:	0e c0       	rjmp	.+28     	; 0x3dfe <vfprintf+0x22a>
    3de2:	44 24       	eor	r4, r4
    3de4:	43 94       	inc	r4
    3de6:	41 0e       	add	r4, r17
    3de8:	81 2f       	mov	r24, r17
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	c8 16       	cp	r12, r24
    3dee:	d9 06       	cpc	r13, r25
    3df0:	2c f4       	brge	.+10     	; 0x3dfc <vfprintf+0x228>
    3df2:	1c 19       	sub	r17, r12
    3df4:	04 c0       	rjmp	.+8      	; 0x3dfe <vfprintf+0x22a>
    3df6:	44 24       	eor	r4, r4
    3df8:	43 94       	inc	r4
    3dfa:	01 c0       	rjmp	.+2      	; 0x3dfe <vfprintf+0x22a>
    3dfc:	10 e0       	ldi	r17, 0x00	; 0
    3dfe:	97 fe       	sbrs	r9, 7
    3e00:	06 c0       	rjmp	.+12     	; 0x3e0e <vfprintf+0x23a>
    3e02:	1c 14       	cp	r1, r12
    3e04:	1d 04       	cpc	r1, r13
    3e06:	34 f4       	brge	.+12     	; 0x3e14 <vfprintf+0x240>
    3e08:	c6 01       	movw	r24, r12
    3e0a:	01 96       	adiw	r24, 0x01	; 1
    3e0c:	05 c0       	rjmp	.+10     	; 0x3e18 <vfprintf+0x244>
    3e0e:	85 e0       	ldi	r24, 0x05	; 5
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	02 c0       	rjmp	.+4      	; 0x3e18 <vfprintf+0x244>
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	01 11       	cpse	r16, r1
    3e1a:	01 96       	adiw	r24, 0x01	; 1
    3e1c:	11 23       	and	r17, r17
    3e1e:	31 f0       	breq	.+12     	; 0x3e2c <vfprintf+0x258>
    3e20:	21 2f       	mov	r18, r17
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	2f 5f       	subi	r18, 0xFF	; 255
    3e26:	3f 4f       	sbci	r19, 0xFF	; 255
    3e28:	82 0f       	add	r24, r18
    3e2a:	93 1f       	adc	r25, r19
    3e2c:	25 2d       	mov	r18, r5
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	82 17       	cp	r24, r18
    3e32:	93 07       	cpc	r25, r19
    3e34:	14 f4       	brge	.+4      	; 0x3e3a <vfprintf+0x266>
    3e36:	58 1a       	sub	r5, r24
    3e38:	01 c0       	rjmp	.+2      	; 0x3e3c <vfprintf+0x268>
    3e3a:	51 2c       	mov	r5, r1
    3e3c:	89 2d       	mov	r24, r9
    3e3e:	89 70       	andi	r24, 0x09	; 9
    3e40:	49 f4       	brne	.+18     	; 0x3e54 <vfprintf+0x280>
    3e42:	55 20       	and	r5, r5
    3e44:	39 f0       	breq	.+14     	; 0x3e54 <vfprintf+0x280>
    3e46:	b7 01       	movw	r22, r14
    3e48:	80 e2       	ldi	r24, 0x20	; 32
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    3e50:	5a 94       	dec	r5
    3e52:	f7 cf       	rjmp	.-18     	; 0x3e42 <vfprintf+0x26e>
    3e54:	00 23       	and	r16, r16
    3e56:	29 f0       	breq	.+10     	; 0x3e62 <vfprintf+0x28e>
    3e58:	b7 01       	movw	r22, r14
    3e5a:	80 2f       	mov	r24, r16
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    3e62:	93 fc       	sbrc	r9, 3
    3e64:	09 c0       	rjmp	.+18     	; 0x3e78 <vfprintf+0x2a4>
    3e66:	55 20       	and	r5, r5
    3e68:	39 f0       	breq	.+14     	; 0x3e78 <vfprintf+0x2a4>
    3e6a:	b7 01       	movw	r22, r14
    3e6c:	80 e3       	ldi	r24, 0x30	; 48
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    3e74:	5a 94       	dec	r5
    3e76:	f7 cf       	rjmp	.-18     	; 0x3e66 <vfprintf+0x292>
    3e78:	97 fe       	sbrs	r9, 7
    3e7a:	4c c0       	rjmp	.+152    	; 0x3f14 <vfprintf+0x340>
    3e7c:	46 01       	movw	r8, r12
    3e7e:	d7 fe       	sbrs	r13, 7
    3e80:	02 c0       	rjmp	.+4      	; 0x3e86 <vfprintf+0x2b2>
    3e82:	81 2c       	mov	r8, r1
    3e84:	91 2c       	mov	r9, r1
    3e86:	c6 01       	movw	r24, r12
    3e88:	88 19       	sub	r24, r8
    3e8a:	99 09       	sbc	r25, r9
    3e8c:	f3 01       	movw	r30, r6
    3e8e:	e8 0f       	add	r30, r24
    3e90:	f9 1f       	adc	r31, r25
    3e92:	ed 87       	std	Y+13, r30	; 0x0d
    3e94:	fe 87       	std	Y+14, r31	; 0x0e
    3e96:	96 01       	movw	r18, r12
    3e98:	24 19       	sub	r18, r4
    3e9a:	31 09       	sbc	r19, r1
    3e9c:	2f 87       	std	Y+15, r18	; 0x0f
    3e9e:	38 8b       	std	Y+16, r19	; 0x10
    3ea0:	01 2f       	mov	r16, r17
    3ea2:	10 e0       	ldi	r17, 0x00	; 0
    3ea4:	11 95       	neg	r17
    3ea6:	01 95       	neg	r16
    3ea8:	11 09       	sbc	r17, r1
    3eaa:	3f ef       	ldi	r19, 0xFF	; 255
    3eac:	83 16       	cp	r8, r19
    3eae:	93 06       	cpc	r9, r19
    3eb0:	29 f4       	brne	.+10     	; 0x3ebc <vfprintf+0x2e8>
    3eb2:	b7 01       	movw	r22, r14
    3eb4:	8e e2       	ldi	r24, 0x2E	; 46
    3eb6:	90 e0       	ldi	r25, 0x00	; 0
    3eb8:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    3ebc:	c8 14       	cp	r12, r8
    3ebe:	d9 04       	cpc	r13, r9
    3ec0:	4c f0       	brlt	.+18     	; 0x3ed4 <vfprintf+0x300>
    3ec2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ec4:	98 89       	ldd	r25, Y+16	; 0x10
    3ec6:	88 15       	cp	r24, r8
    3ec8:	99 05       	cpc	r25, r9
    3eca:	24 f4       	brge	.+8      	; 0x3ed4 <vfprintf+0x300>
    3ecc:	ed 85       	ldd	r30, Y+13	; 0x0d
    3ece:	fe 85       	ldd	r31, Y+14	; 0x0e
    3ed0:	81 81       	ldd	r24, Z+1	; 0x01
    3ed2:	01 c0       	rjmp	.+2      	; 0x3ed6 <vfprintf+0x302>
    3ed4:	80 e3       	ldi	r24, 0x30	; 48
    3ed6:	f1 e0       	ldi	r31, 0x01	; 1
    3ed8:	8f 1a       	sub	r8, r31
    3eda:	91 08       	sbc	r9, r1
    3edc:	2d 85       	ldd	r18, Y+13	; 0x0d
    3ede:	3e 85       	ldd	r19, Y+14	; 0x0e
    3ee0:	2f 5f       	subi	r18, 0xFF	; 255
    3ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ee4:	2d 87       	std	Y+13, r18	; 0x0d
    3ee6:	3e 87       	std	Y+14, r19	; 0x0e
    3ee8:	80 16       	cp	r8, r16
    3eea:	91 06       	cpc	r9, r17
    3eec:	2c f0       	brlt	.+10     	; 0x3ef8 <vfprintf+0x324>
    3eee:	b7 01       	movw	r22, r14
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    3ef6:	d9 cf       	rjmp	.-78     	; 0x3eaa <vfprintf+0x2d6>
    3ef8:	c8 14       	cp	r12, r8
    3efa:	d9 04       	cpc	r13, r9
    3efc:	41 f4       	brne	.+16     	; 0x3f0e <vfprintf+0x33a>
    3efe:	9a 81       	ldd	r25, Y+2	; 0x02
    3f00:	96 33       	cpi	r25, 0x36	; 54
    3f02:	20 f4       	brcc	.+8      	; 0x3f0c <vfprintf+0x338>
    3f04:	95 33       	cpi	r25, 0x35	; 53
    3f06:	19 f4       	brne	.+6      	; 0x3f0e <vfprintf+0x33a>
    3f08:	3c 85       	ldd	r19, Y+12	; 0x0c
    3f0a:	34 ff       	sbrs	r19, 4
    3f0c:	81 e3       	ldi	r24, 0x31	; 49
    3f0e:	b7 01       	movw	r22, r14
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	4e c0       	rjmp	.+156    	; 0x3fb0 <vfprintf+0x3dc>
    3f14:	8a 81       	ldd	r24, Y+2	; 0x02
    3f16:	81 33       	cpi	r24, 0x31	; 49
    3f18:	19 f0       	breq	.+6      	; 0x3f20 <vfprintf+0x34c>
    3f1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f1c:	9f 7e       	andi	r25, 0xEF	; 239
    3f1e:	9c 87       	std	Y+12, r25	; 0x0c
    3f20:	b7 01       	movw	r22, r14
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    3f28:	11 11       	cpse	r17, r1
    3f2a:	05 c0       	rjmp	.+10     	; 0x3f36 <vfprintf+0x362>
    3f2c:	94 fc       	sbrc	r9, 4
    3f2e:	18 c0       	rjmp	.+48     	; 0x3f60 <vfprintf+0x38c>
    3f30:	85 e6       	ldi	r24, 0x65	; 101
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	17 c0       	rjmp	.+46     	; 0x3f64 <vfprintf+0x390>
    3f36:	b7 01       	movw	r22, r14
    3f38:	8e e2       	ldi	r24, 0x2E	; 46
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    3f40:	1e 5f       	subi	r17, 0xFE	; 254
    3f42:	82 e0       	ldi	r24, 0x02	; 2
    3f44:	01 e0       	ldi	r16, 0x01	; 1
    3f46:	08 0f       	add	r16, r24
    3f48:	f3 01       	movw	r30, r6
    3f4a:	e8 0f       	add	r30, r24
    3f4c:	f1 1d       	adc	r31, r1
    3f4e:	80 81       	ld	r24, Z
    3f50:	b7 01       	movw	r22, r14
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    3f58:	80 2f       	mov	r24, r16
    3f5a:	01 13       	cpse	r16, r17
    3f5c:	f3 cf       	rjmp	.-26     	; 0x3f44 <vfprintf+0x370>
    3f5e:	e6 cf       	rjmp	.-52     	; 0x3f2c <vfprintf+0x358>
    3f60:	85 e4       	ldi	r24, 0x45	; 69
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	b7 01       	movw	r22, r14
    3f66:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    3f6a:	d7 fc       	sbrc	r13, 7
    3f6c:	06 c0       	rjmp	.+12     	; 0x3f7a <vfprintf+0x3a6>
    3f6e:	c1 14       	cp	r12, r1
    3f70:	d1 04       	cpc	r13, r1
    3f72:	41 f4       	brne	.+16     	; 0x3f84 <vfprintf+0x3b0>
    3f74:	ec 85       	ldd	r30, Y+12	; 0x0c
    3f76:	e4 ff       	sbrs	r30, 4
    3f78:	05 c0       	rjmp	.+10     	; 0x3f84 <vfprintf+0x3b0>
    3f7a:	d1 94       	neg	r13
    3f7c:	c1 94       	neg	r12
    3f7e:	d1 08       	sbc	r13, r1
    3f80:	8d e2       	ldi	r24, 0x2D	; 45
    3f82:	01 c0       	rjmp	.+2      	; 0x3f86 <vfprintf+0x3b2>
    3f84:	8b e2       	ldi	r24, 0x2B	; 43
    3f86:	b7 01       	movw	r22, r14
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    3f8e:	80 e3       	ldi	r24, 0x30	; 48
    3f90:	2a e0       	ldi	r18, 0x0A	; 10
    3f92:	c2 16       	cp	r12, r18
    3f94:	d1 04       	cpc	r13, r1
    3f96:	2c f0       	brlt	.+10     	; 0x3fa2 <vfprintf+0x3ce>
    3f98:	8f 5f       	subi	r24, 0xFF	; 255
    3f9a:	fa e0       	ldi	r31, 0x0A	; 10
    3f9c:	cf 1a       	sub	r12, r31
    3f9e:	d1 08       	sbc	r13, r1
    3fa0:	f7 cf       	rjmp	.-18     	; 0x3f90 <vfprintf+0x3bc>
    3fa2:	b7 01       	movw	r22, r14
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    3faa:	b7 01       	movw	r22, r14
    3fac:	c6 01       	movw	r24, r12
    3fae:	c0 96       	adiw	r24, 0x30	; 48
    3fb0:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    3fb4:	54 c1       	rjmp	.+680    	; 0x425e <__RODATA_PM_OFFSET__+0x25e>
    3fb6:	83 36       	cpi	r24, 0x63	; 99
    3fb8:	31 f0       	breq	.+12     	; 0x3fc6 <vfprintf+0x3f2>
    3fba:	83 37       	cpi	r24, 0x73	; 115
    3fbc:	79 f0       	breq	.+30     	; 0x3fdc <vfprintf+0x408>
    3fbe:	83 35       	cpi	r24, 0x53	; 83
    3fc0:	09 f0       	breq	.+2      	; 0x3fc4 <vfprintf+0x3f0>
    3fc2:	56 c0       	rjmp	.+172    	; 0x4070 <__RODATA_PM_OFFSET__+0x70>
    3fc4:	20 c0       	rjmp	.+64     	; 0x4006 <__RODATA_PM_OFFSET__+0x6>
    3fc6:	56 01       	movw	r10, r12
    3fc8:	32 e0       	ldi	r19, 0x02	; 2
    3fca:	a3 0e       	add	r10, r19
    3fcc:	b1 1c       	adc	r11, r1
    3fce:	f6 01       	movw	r30, r12
    3fd0:	80 81       	ld	r24, Z
    3fd2:	89 83       	std	Y+1, r24	; 0x01
    3fd4:	01 e0       	ldi	r16, 0x01	; 1
    3fd6:	10 e0       	ldi	r17, 0x00	; 0
    3fd8:	63 01       	movw	r12, r6
    3fda:	12 c0       	rjmp	.+36     	; 0x4000 <__RODATA_PM_OFFSET__>
    3fdc:	56 01       	movw	r10, r12
    3fde:	f2 e0       	ldi	r31, 0x02	; 2
    3fe0:	af 0e       	add	r10, r31
    3fe2:	b1 1c       	adc	r11, r1
    3fe4:	f6 01       	movw	r30, r12
    3fe6:	c0 80       	ld	r12, Z
    3fe8:	d1 80       	ldd	r13, Z+1	; 0x01
    3fea:	96 fe       	sbrs	r9, 6
    3fec:	03 c0       	rjmp	.+6      	; 0x3ff4 <vfprintf+0x420>
    3fee:	61 2f       	mov	r22, r17
    3ff0:	70 e0       	ldi	r23, 0x00	; 0
    3ff2:	02 c0       	rjmp	.+4      	; 0x3ff8 <vfprintf+0x424>
    3ff4:	6f ef       	ldi	r22, 0xFF	; 255
    3ff6:	7f ef       	ldi	r23, 0xFF	; 255
    3ff8:	c6 01       	movw	r24, r12
    3ffa:	0e 94 3d 23 	call	0x467a	; 0x467a <strnlen>
    3ffe:	8c 01       	movw	r16, r24
    4000:	f9 2d       	mov	r31, r9
    4002:	ff 77       	andi	r31, 0x7F	; 127
    4004:	14 c0       	rjmp	.+40     	; 0x402e <__RODATA_PM_OFFSET__+0x2e>
    4006:	56 01       	movw	r10, r12
    4008:	22 e0       	ldi	r18, 0x02	; 2
    400a:	a2 0e       	add	r10, r18
    400c:	b1 1c       	adc	r11, r1
    400e:	f6 01       	movw	r30, r12
    4010:	c0 80       	ld	r12, Z
    4012:	d1 80       	ldd	r13, Z+1	; 0x01
    4014:	96 fe       	sbrs	r9, 6
    4016:	03 c0       	rjmp	.+6      	; 0x401e <__RODATA_PM_OFFSET__+0x1e>
    4018:	61 2f       	mov	r22, r17
    401a:	70 e0       	ldi	r23, 0x00	; 0
    401c:	02 c0       	rjmp	.+4      	; 0x4022 <__RODATA_PM_OFFSET__+0x22>
    401e:	6f ef       	ldi	r22, 0xFF	; 255
    4020:	7f ef       	ldi	r23, 0xFF	; 255
    4022:	c6 01       	movw	r24, r12
    4024:	0e 94 20 23 	call	0x4640	; 0x4640 <strnlen_P>
    4028:	8c 01       	movw	r16, r24
    402a:	f9 2d       	mov	r31, r9
    402c:	f0 68       	ori	r31, 0x80	; 128
    402e:	9f 2e       	mov	r9, r31
    4030:	f3 fd       	sbrc	r31, 3
    4032:	1a c0       	rjmp	.+52     	; 0x4068 <__RODATA_PM_OFFSET__+0x68>
    4034:	85 2d       	mov	r24, r5
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	08 17       	cp	r16, r24
    403a:	19 07       	cpc	r17, r25
    403c:	a8 f4       	brcc	.+42     	; 0x4068 <__RODATA_PM_OFFSET__+0x68>
    403e:	b7 01       	movw	r22, r14
    4040:	80 e2       	ldi	r24, 0x20	; 32
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    4048:	5a 94       	dec	r5
    404a:	f4 cf       	rjmp	.-24     	; 0x4034 <__RODATA_PM_OFFSET__+0x34>
    404c:	f6 01       	movw	r30, r12
    404e:	97 fc       	sbrc	r9, 7
    4050:	85 91       	lpm	r24, Z+
    4052:	97 fe       	sbrs	r9, 7
    4054:	81 91       	ld	r24, Z+
    4056:	6f 01       	movw	r12, r30
    4058:	b7 01       	movw	r22, r14
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    4060:	51 10       	cpse	r5, r1
    4062:	5a 94       	dec	r5
    4064:	01 50       	subi	r16, 0x01	; 1
    4066:	11 09       	sbc	r17, r1
    4068:	01 15       	cp	r16, r1
    406a:	11 05       	cpc	r17, r1
    406c:	79 f7       	brne	.-34     	; 0x404c <__RODATA_PM_OFFSET__+0x4c>
    406e:	f7 c0       	rjmp	.+494    	; 0x425e <__RODATA_PM_OFFSET__+0x25e>
    4070:	84 36       	cpi	r24, 0x64	; 100
    4072:	11 f0       	breq	.+4      	; 0x4078 <__RODATA_PM_OFFSET__+0x78>
    4074:	89 36       	cpi	r24, 0x69	; 105
    4076:	61 f5       	brne	.+88     	; 0x40d0 <__RODATA_PM_OFFSET__+0xd0>
    4078:	56 01       	movw	r10, r12
    407a:	97 fe       	sbrs	r9, 7
    407c:	09 c0       	rjmp	.+18     	; 0x4090 <__RODATA_PM_OFFSET__+0x90>
    407e:	24 e0       	ldi	r18, 0x04	; 4
    4080:	a2 0e       	add	r10, r18
    4082:	b1 1c       	adc	r11, r1
    4084:	f6 01       	movw	r30, r12
    4086:	60 81       	ld	r22, Z
    4088:	71 81       	ldd	r23, Z+1	; 0x01
    408a:	82 81       	ldd	r24, Z+2	; 0x02
    408c:	93 81       	ldd	r25, Z+3	; 0x03
    408e:	0a c0       	rjmp	.+20     	; 0x40a4 <__RODATA_PM_OFFSET__+0xa4>
    4090:	f2 e0       	ldi	r31, 0x02	; 2
    4092:	af 0e       	add	r10, r31
    4094:	b1 1c       	adc	r11, r1
    4096:	f6 01       	movw	r30, r12
    4098:	60 81       	ld	r22, Z
    409a:	71 81       	ldd	r23, Z+1	; 0x01
    409c:	07 2e       	mov	r0, r23
    409e:	00 0c       	add	r0, r0
    40a0:	88 0b       	sbc	r24, r24
    40a2:	99 0b       	sbc	r25, r25
    40a4:	f9 2d       	mov	r31, r9
    40a6:	ff 76       	andi	r31, 0x6F	; 111
    40a8:	9f 2e       	mov	r9, r31
    40aa:	97 ff       	sbrs	r25, 7
    40ac:	09 c0       	rjmp	.+18     	; 0x40c0 <__RODATA_PM_OFFSET__+0xc0>
    40ae:	90 95       	com	r25
    40b0:	80 95       	com	r24
    40b2:	70 95       	com	r23
    40b4:	61 95       	neg	r22
    40b6:	7f 4f       	sbci	r23, 0xFF	; 255
    40b8:	8f 4f       	sbci	r24, 0xFF	; 255
    40ba:	9f 4f       	sbci	r25, 0xFF	; 255
    40bc:	f0 68       	ori	r31, 0x80	; 128
    40be:	9f 2e       	mov	r9, r31
    40c0:	2a e0       	ldi	r18, 0x0A	; 10
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	a3 01       	movw	r20, r6
    40c6:	0e 94 bb 23 	call	0x4776	; 0x4776 <__ultoa_invert>
    40ca:	c8 2e       	mov	r12, r24
    40cc:	c6 18       	sub	r12, r6
    40ce:	3f c0       	rjmp	.+126    	; 0x414e <__RODATA_PM_OFFSET__+0x14e>
    40d0:	09 2d       	mov	r16, r9
    40d2:	85 37       	cpi	r24, 0x75	; 117
    40d4:	21 f4       	brne	.+8      	; 0x40de <__RODATA_PM_OFFSET__+0xde>
    40d6:	0f 7e       	andi	r16, 0xEF	; 239
    40d8:	2a e0       	ldi	r18, 0x0A	; 10
    40da:	30 e0       	ldi	r19, 0x00	; 0
    40dc:	1d c0       	rjmp	.+58     	; 0x4118 <__RODATA_PM_OFFSET__+0x118>
    40de:	09 7f       	andi	r16, 0xF9	; 249
    40e0:	8f 36       	cpi	r24, 0x6F	; 111
    40e2:	91 f0       	breq	.+36     	; 0x4108 <__RODATA_PM_OFFSET__+0x108>
    40e4:	18 f4       	brcc	.+6      	; 0x40ec <__RODATA_PM_OFFSET__+0xec>
    40e6:	88 35       	cpi	r24, 0x58	; 88
    40e8:	59 f0       	breq	.+22     	; 0x4100 <__RODATA_PM_OFFSET__+0x100>
    40ea:	c3 c0       	rjmp	.+390    	; 0x4272 <__RODATA_PM_OFFSET__+0x272>
    40ec:	80 37       	cpi	r24, 0x70	; 112
    40ee:	19 f0       	breq	.+6      	; 0x40f6 <__RODATA_PM_OFFSET__+0xf6>
    40f0:	88 37       	cpi	r24, 0x78	; 120
    40f2:	11 f0       	breq	.+4      	; 0x40f8 <__RODATA_PM_OFFSET__+0xf8>
    40f4:	be c0       	rjmp	.+380    	; 0x4272 <__RODATA_PM_OFFSET__+0x272>
    40f6:	00 61       	ori	r16, 0x10	; 16
    40f8:	04 ff       	sbrs	r16, 4
    40fa:	09 c0       	rjmp	.+18     	; 0x410e <__RODATA_PM_OFFSET__+0x10e>
    40fc:	04 60       	ori	r16, 0x04	; 4
    40fe:	07 c0       	rjmp	.+14     	; 0x410e <__RODATA_PM_OFFSET__+0x10e>
    4100:	94 fe       	sbrs	r9, 4
    4102:	08 c0       	rjmp	.+16     	; 0x4114 <__RODATA_PM_OFFSET__+0x114>
    4104:	06 60       	ori	r16, 0x06	; 6
    4106:	06 c0       	rjmp	.+12     	; 0x4114 <__RODATA_PM_OFFSET__+0x114>
    4108:	28 e0       	ldi	r18, 0x08	; 8
    410a:	30 e0       	ldi	r19, 0x00	; 0
    410c:	05 c0       	rjmp	.+10     	; 0x4118 <__RODATA_PM_OFFSET__+0x118>
    410e:	20 e1       	ldi	r18, 0x10	; 16
    4110:	30 e0       	ldi	r19, 0x00	; 0
    4112:	02 c0       	rjmp	.+4      	; 0x4118 <__RODATA_PM_OFFSET__+0x118>
    4114:	20 e1       	ldi	r18, 0x10	; 16
    4116:	32 e0       	ldi	r19, 0x02	; 2
    4118:	56 01       	movw	r10, r12
    411a:	07 ff       	sbrs	r16, 7
    411c:	09 c0       	rjmp	.+18     	; 0x4130 <__RODATA_PM_OFFSET__+0x130>
    411e:	84 e0       	ldi	r24, 0x04	; 4
    4120:	a8 0e       	add	r10, r24
    4122:	b1 1c       	adc	r11, r1
    4124:	f6 01       	movw	r30, r12
    4126:	60 81       	ld	r22, Z
    4128:	71 81       	ldd	r23, Z+1	; 0x01
    412a:	82 81       	ldd	r24, Z+2	; 0x02
    412c:	93 81       	ldd	r25, Z+3	; 0x03
    412e:	08 c0       	rjmp	.+16     	; 0x4140 <__RODATA_PM_OFFSET__+0x140>
    4130:	f2 e0       	ldi	r31, 0x02	; 2
    4132:	af 0e       	add	r10, r31
    4134:	b1 1c       	adc	r11, r1
    4136:	f6 01       	movw	r30, r12
    4138:	60 81       	ld	r22, Z
    413a:	71 81       	ldd	r23, Z+1	; 0x01
    413c:	80 e0       	ldi	r24, 0x00	; 0
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	a3 01       	movw	r20, r6
    4142:	0e 94 bb 23 	call	0x4776	; 0x4776 <__ultoa_invert>
    4146:	c8 2e       	mov	r12, r24
    4148:	c6 18       	sub	r12, r6
    414a:	0f 77       	andi	r16, 0x7F	; 127
    414c:	90 2e       	mov	r9, r16
    414e:	96 fe       	sbrs	r9, 6
    4150:	0b c0       	rjmp	.+22     	; 0x4168 <__RODATA_PM_OFFSET__+0x168>
    4152:	09 2d       	mov	r16, r9
    4154:	0e 7f       	andi	r16, 0xFE	; 254
    4156:	c1 16       	cp	r12, r17
    4158:	50 f4       	brcc	.+20     	; 0x416e <__RODATA_PM_OFFSET__+0x16e>
    415a:	94 fe       	sbrs	r9, 4
    415c:	0a c0       	rjmp	.+20     	; 0x4172 <__RODATA_PM_OFFSET__+0x172>
    415e:	92 fc       	sbrc	r9, 2
    4160:	08 c0       	rjmp	.+16     	; 0x4172 <__RODATA_PM_OFFSET__+0x172>
    4162:	09 2d       	mov	r16, r9
    4164:	0e 7e       	andi	r16, 0xEE	; 238
    4166:	05 c0       	rjmp	.+10     	; 0x4172 <__RODATA_PM_OFFSET__+0x172>
    4168:	dc 2c       	mov	r13, r12
    416a:	09 2d       	mov	r16, r9
    416c:	03 c0       	rjmp	.+6      	; 0x4174 <__RODATA_PM_OFFSET__+0x174>
    416e:	dc 2c       	mov	r13, r12
    4170:	01 c0       	rjmp	.+2      	; 0x4174 <__RODATA_PM_OFFSET__+0x174>
    4172:	d1 2e       	mov	r13, r17
    4174:	04 ff       	sbrs	r16, 4
    4176:	0d c0       	rjmp	.+26     	; 0x4192 <__RODATA_PM_OFFSET__+0x192>
    4178:	fe 01       	movw	r30, r28
    417a:	ec 0d       	add	r30, r12
    417c:	f1 1d       	adc	r31, r1
    417e:	80 81       	ld	r24, Z
    4180:	80 33       	cpi	r24, 0x30	; 48
    4182:	11 f4       	brne	.+4      	; 0x4188 <__RODATA_PM_OFFSET__+0x188>
    4184:	09 7e       	andi	r16, 0xE9	; 233
    4186:	09 c0       	rjmp	.+18     	; 0x419a <__RODATA_PM_OFFSET__+0x19a>
    4188:	02 ff       	sbrs	r16, 2
    418a:	06 c0       	rjmp	.+12     	; 0x4198 <__RODATA_PM_OFFSET__+0x198>
    418c:	d3 94       	inc	r13
    418e:	d3 94       	inc	r13
    4190:	04 c0       	rjmp	.+8      	; 0x419a <__RODATA_PM_OFFSET__+0x19a>
    4192:	80 2f       	mov	r24, r16
    4194:	86 78       	andi	r24, 0x86	; 134
    4196:	09 f0       	breq	.+2      	; 0x419a <__RODATA_PM_OFFSET__+0x19a>
    4198:	d3 94       	inc	r13
    419a:	03 fd       	sbrc	r16, 3
    419c:	11 c0       	rjmp	.+34     	; 0x41c0 <__RODATA_PM_OFFSET__+0x1c0>
    419e:	00 ff       	sbrs	r16, 0
    41a0:	06 c0       	rjmp	.+12     	; 0x41ae <__RODATA_PM_OFFSET__+0x1ae>
    41a2:	1c 2d       	mov	r17, r12
    41a4:	d5 14       	cp	r13, r5
    41a6:	80 f4       	brcc	.+32     	; 0x41c8 <__RODATA_PM_OFFSET__+0x1c8>
    41a8:	15 0d       	add	r17, r5
    41aa:	1d 19       	sub	r17, r13
    41ac:	0d c0       	rjmp	.+26     	; 0x41c8 <__RODATA_PM_OFFSET__+0x1c8>
    41ae:	d5 14       	cp	r13, r5
    41b0:	58 f4       	brcc	.+22     	; 0x41c8 <__RODATA_PM_OFFSET__+0x1c8>
    41b2:	b7 01       	movw	r22, r14
    41b4:	80 e2       	ldi	r24, 0x20	; 32
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    41bc:	d3 94       	inc	r13
    41be:	f7 cf       	rjmp	.-18     	; 0x41ae <__RODATA_PM_OFFSET__+0x1ae>
    41c0:	d5 14       	cp	r13, r5
    41c2:	10 f4       	brcc	.+4      	; 0x41c8 <__RODATA_PM_OFFSET__+0x1c8>
    41c4:	5d 18       	sub	r5, r13
    41c6:	01 c0       	rjmp	.+2      	; 0x41ca <__RODATA_PM_OFFSET__+0x1ca>
    41c8:	51 2c       	mov	r5, r1
    41ca:	04 ff       	sbrs	r16, 4
    41cc:	10 c0       	rjmp	.+32     	; 0x41ee <__RODATA_PM_OFFSET__+0x1ee>
    41ce:	b7 01       	movw	r22, r14
    41d0:	80 e3       	ldi	r24, 0x30	; 48
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    41d8:	02 ff       	sbrs	r16, 2
    41da:	17 c0       	rjmp	.+46     	; 0x420a <__RODATA_PM_OFFSET__+0x20a>
    41dc:	01 fd       	sbrc	r16, 1
    41de:	03 c0       	rjmp	.+6      	; 0x41e6 <__RODATA_PM_OFFSET__+0x1e6>
    41e0:	88 e7       	ldi	r24, 0x78	; 120
    41e2:	90 e0       	ldi	r25, 0x00	; 0
    41e4:	02 c0       	rjmp	.+4      	; 0x41ea <__RODATA_PM_OFFSET__+0x1ea>
    41e6:	88 e5       	ldi	r24, 0x58	; 88
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	b7 01       	movw	r22, r14
    41ec:	0c c0       	rjmp	.+24     	; 0x4206 <__RODATA_PM_OFFSET__+0x206>
    41ee:	80 2f       	mov	r24, r16
    41f0:	86 78       	andi	r24, 0x86	; 134
    41f2:	59 f0       	breq	.+22     	; 0x420a <__RODATA_PM_OFFSET__+0x20a>
    41f4:	01 ff       	sbrs	r16, 1
    41f6:	02 c0       	rjmp	.+4      	; 0x41fc <__RODATA_PM_OFFSET__+0x1fc>
    41f8:	8b e2       	ldi	r24, 0x2B	; 43
    41fa:	01 c0       	rjmp	.+2      	; 0x41fe <__RODATA_PM_OFFSET__+0x1fe>
    41fc:	80 e2       	ldi	r24, 0x20	; 32
    41fe:	07 fd       	sbrc	r16, 7
    4200:	8d e2       	ldi	r24, 0x2D	; 45
    4202:	b7 01       	movw	r22, r14
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    420a:	c1 16       	cp	r12, r17
    420c:	38 f4       	brcc	.+14     	; 0x421c <__RODATA_PM_OFFSET__+0x21c>
    420e:	b7 01       	movw	r22, r14
    4210:	80 e3       	ldi	r24, 0x30	; 48
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    4218:	11 50       	subi	r17, 0x01	; 1
    421a:	f7 cf       	rjmp	.-18     	; 0x420a <__RODATA_PM_OFFSET__+0x20a>
    421c:	ca 94       	dec	r12
    421e:	f3 01       	movw	r30, r6
    4220:	ec 0d       	add	r30, r12
    4222:	f1 1d       	adc	r31, r1
    4224:	80 81       	ld	r24, Z
    4226:	b7 01       	movw	r22, r14
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    422e:	c1 10       	cpse	r12, r1
    4230:	f5 cf       	rjmp	.-22     	; 0x421c <__RODATA_PM_OFFSET__+0x21c>
    4232:	15 c0       	rjmp	.+42     	; 0x425e <__RODATA_PM_OFFSET__+0x25e>
    4234:	f4 e0       	ldi	r31, 0x04	; 4
    4236:	f5 15       	cp	r31, r5
    4238:	60 f5       	brcc	.+88     	; 0x4292 <__RODATA_PM_OFFSET__+0x292>
    423a:	84 e0       	ldi	r24, 0x04	; 4
    423c:	58 1a       	sub	r5, r24
    423e:	93 fe       	sbrs	r9, 3
    4240:	1f c0       	rjmp	.+62     	; 0x4280 <__RODATA_PM_OFFSET__+0x280>
    4242:	01 11       	cpse	r16, r1
    4244:	27 c0       	rjmp	.+78     	; 0x4294 <__RODATA_PM_OFFSET__+0x294>
    4246:	2c 85       	ldd	r18, Y+12	; 0x0c
    4248:	23 ff       	sbrs	r18, 3
    424a:	2a c0       	rjmp	.+84     	; 0x42a0 <__RODATA_PM_OFFSET__+0x2a0>
    424c:	02 e5       	ldi	r16, 0x52	; 82
    424e:	11 e0       	ldi	r17, 0x01	; 1
    4250:	39 2d       	mov	r19, r9
    4252:	30 71       	andi	r19, 0x10	; 16
    4254:	93 2e       	mov	r9, r19
    4256:	f8 01       	movw	r30, r16
    4258:	84 91       	lpm	r24, Z
    425a:	81 11       	cpse	r24, r1
    425c:	24 c0       	rjmp	.+72     	; 0x42a6 <__RODATA_PM_OFFSET__+0x2a6>
    425e:	55 20       	and	r5, r5
    4260:	09 f4       	brne	.+2      	; 0x4264 <__RODATA_PM_OFFSET__+0x264>
    4262:	e4 cc       	rjmp	.-1592   	; 0x3c2c <vfprintf+0x58>
    4264:	b7 01       	movw	r22, r14
    4266:	80 e2       	ldi	r24, 0x20	; 32
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    426e:	5a 94       	dec	r5
    4270:	f6 cf       	rjmp	.-20     	; 0x425e <__RODATA_PM_OFFSET__+0x25e>
    4272:	f7 01       	movw	r30, r14
    4274:	86 81       	ldd	r24, Z+6	; 0x06
    4276:	97 81       	ldd	r25, Z+7	; 0x07
    4278:	26 c0       	rjmp	.+76     	; 0x42c6 <__RODATA_PM_OFFSET__+0x2c6>
    427a:	8f ef       	ldi	r24, 0xFF	; 255
    427c:	9f ef       	ldi	r25, 0xFF	; 255
    427e:	23 c0       	rjmp	.+70     	; 0x42c6 <__RODATA_PM_OFFSET__+0x2c6>
    4280:	b7 01       	movw	r22, r14
    4282:	80 e2       	ldi	r24, 0x20	; 32
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    428a:	5a 94       	dec	r5
    428c:	51 10       	cpse	r5, r1
    428e:	f8 cf       	rjmp	.-16     	; 0x4280 <__RODATA_PM_OFFSET__+0x280>
    4290:	d8 cf       	rjmp	.-80     	; 0x4242 <__RODATA_PM_OFFSET__+0x242>
    4292:	51 2c       	mov	r5, r1
    4294:	b7 01       	movw	r22, r14
    4296:	80 2f       	mov	r24, r16
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    429e:	d3 cf       	rjmp	.-90     	; 0x4246 <__RODATA_PM_OFFSET__+0x246>
    42a0:	06 e5       	ldi	r16, 0x56	; 86
    42a2:	11 e0       	ldi	r17, 0x01	; 1
    42a4:	d5 cf       	rjmp	.-86     	; 0x4250 <__RODATA_PM_OFFSET__+0x250>
    42a6:	91 10       	cpse	r9, r1
    42a8:	80 52       	subi	r24, 0x20	; 32
    42aa:	b7 01       	movw	r22, r14
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	0e 94 5d 23 	call	0x46ba	; 0x46ba <fputc>
    42b2:	0f 5f       	subi	r16, 0xFF	; 255
    42b4:	1f 4f       	sbci	r17, 0xFF	; 255
    42b6:	cf cf       	rjmp	.-98     	; 0x4256 <__RODATA_PM_OFFSET__+0x256>
    42b8:	23 e0       	ldi	r18, 0x03	; 3
    42ba:	25 15       	cp	r18, r5
    42bc:	10 f4       	brcc	.+4      	; 0x42c2 <__RODATA_PM_OFFSET__+0x2c2>
    42be:	83 e0       	ldi	r24, 0x03	; 3
    42c0:	bd cf       	rjmp	.-134    	; 0x423c <__RODATA_PM_OFFSET__+0x23c>
    42c2:	51 2c       	mov	r5, r1
    42c4:	c0 cf       	rjmp	.-128    	; 0x4246 <__RODATA_PM_OFFSET__+0x246>
    42c6:	60 96       	adiw	r28, 0x10	; 16
    42c8:	e2 e1       	ldi	r30, 0x12	; 18
    42ca:	0c 94 c4 21 	jmp	0x4388	; 0x4388 <__epilogue_restores__>

000042ce <__divmodhi4>:
    42ce:	97 fb       	bst	r25, 7
    42d0:	07 2e       	mov	r0, r23
    42d2:	16 f4       	brtc	.+4      	; 0x42d8 <__divmodhi4+0xa>
    42d4:	00 94       	com	r0
    42d6:	07 d0       	rcall	.+14     	; 0x42e6 <__divmodhi4_neg1>
    42d8:	77 fd       	sbrc	r23, 7
    42da:	09 d0       	rcall	.+18     	; 0x42ee <__divmodhi4_neg2>
    42dc:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <__udivmodhi4>
    42e0:	07 fc       	sbrc	r0, 7
    42e2:	05 d0       	rcall	.+10     	; 0x42ee <__divmodhi4_neg2>
    42e4:	3e f4       	brtc	.+14     	; 0x42f4 <__divmodhi4_exit>

000042e6 <__divmodhi4_neg1>:
    42e6:	90 95       	com	r25
    42e8:	81 95       	neg	r24
    42ea:	9f 4f       	sbci	r25, 0xFF	; 255
    42ec:	08 95       	ret

000042ee <__divmodhi4_neg2>:
    42ee:	70 95       	com	r23
    42f0:	61 95       	neg	r22
    42f2:	7f 4f       	sbci	r23, 0xFF	; 255

000042f4 <__divmodhi4_exit>:
    42f4:	08 95       	ret

000042f6 <__divmodsi4>:
    42f6:	05 2e       	mov	r0, r21
    42f8:	97 fb       	bst	r25, 7
    42fa:	1e f4       	brtc	.+6      	; 0x4302 <__divmodsi4+0xc>
    42fc:	00 94       	com	r0
    42fe:	0e 94 92 21 	call	0x4324	; 0x4324 <__negsi2>
    4302:	57 fd       	sbrc	r21, 7
    4304:	07 d0       	rcall	.+14     	; 0x4314 <__divmodsi4_neg2>
    4306:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <__udivmodsi4>
    430a:	07 fc       	sbrc	r0, 7
    430c:	03 d0       	rcall	.+6      	; 0x4314 <__divmodsi4_neg2>
    430e:	4e f4       	brtc	.+18     	; 0x4322 <__divmodsi4_exit>
    4310:	0c 94 92 21 	jmp	0x4324	; 0x4324 <__negsi2>

00004314 <__divmodsi4_neg2>:
    4314:	50 95       	com	r21
    4316:	40 95       	com	r20
    4318:	30 95       	com	r19
    431a:	21 95       	neg	r18
    431c:	3f 4f       	sbci	r19, 0xFF	; 255
    431e:	4f 4f       	sbci	r20, 0xFF	; 255
    4320:	5f 4f       	sbci	r21, 0xFF	; 255

00004322 <__divmodsi4_exit>:
    4322:	08 95       	ret

00004324 <__negsi2>:
    4324:	90 95       	com	r25
    4326:	80 95       	com	r24
    4328:	70 95       	com	r23
    432a:	61 95       	neg	r22
    432c:	7f 4f       	sbci	r23, 0xFF	; 255
    432e:	8f 4f       	sbci	r24, 0xFF	; 255
    4330:	9f 4f       	sbci	r25, 0xFF	; 255
    4332:	08 95       	ret

00004334 <__tablejump2__>:
    4334:	ee 0f       	add	r30, r30
    4336:	ff 1f       	adc	r31, r31
    4338:	05 90       	lpm	r0, Z+
    433a:	f4 91       	lpm	r31, Z
    433c:	e0 2d       	mov	r30, r0
    433e:	09 94       	ijmp

00004340 <__muluhisi3>:
    4340:	0e 94 12 22 	call	0x4424	; 0x4424 <__umulhisi3>
    4344:	a5 9f       	mul	r26, r21
    4346:	90 0d       	add	r25, r0
    4348:	b4 9f       	mul	r27, r20
    434a:	90 0d       	add	r25, r0
    434c:	a4 9f       	mul	r26, r20
    434e:	80 0d       	add	r24, r0
    4350:	91 1d       	adc	r25, r1
    4352:	11 24       	eor	r1, r1
    4354:	08 95       	ret

00004356 <__prologue_saves__>:
    4356:	2f 92       	push	r2
    4358:	3f 92       	push	r3
    435a:	4f 92       	push	r4
    435c:	5f 92       	push	r5
    435e:	6f 92       	push	r6
    4360:	7f 92       	push	r7
    4362:	8f 92       	push	r8
    4364:	9f 92       	push	r9
    4366:	af 92       	push	r10
    4368:	bf 92       	push	r11
    436a:	cf 92       	push	r12
    436c:	df 92       	push	r13
    436e:	ef 92       	push	r14
    4370:	ff 92       	push	r15
    4372:	0f 93       	push	r16
    4374:	1f 93       	push	r17
    4376:	cf 93       	push	r28
    4378:	df 93       	push	r29
    437a:	cd b7       	in	r28, 0x3d	; 61
    437c:	de b7       	in	r29, 0x3e	; 62
    437e:	ca 1b       	sub	r28, r26
    4380:	db 0b       	sbc	r29, r27
    4382:	cd bf       	out	0x3d, r28	; 61
    4384:	de bf       	out	0x3e, r29	; 62
    4386:	09 94       	ijmp

00004388 <__epilogue_restores__>:
    4388:	2a 88       	ldd	r2, Y+18	; 0x12
    438a:	39 88       	ldd	r3, Y+17	; 0x11
    438c:	48 88       	ldd	r4, Y+16	; 0x10
    438e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4390:	6e 84       	ldd	r6, Y+14	; 0x0e
    4392:	7d 84       	ldd	r7, Y+13	; 0x0d
    4394:	8c 84       	ldd	r8, Y+12	; 0x0c
    4396:	9b 84       	ldd	r9, Y+11	; 0x0b
    4398:	aa 84       	ldd	r10, Y+10	; 0x0a
    439a:	b9 84       	ldd	r11, Y+9	; 0x09
    439c:	c8 84       	ldd	r12, Y+8	; 0x08
    439e:	df 80       	ldd	r13, Y+7	; 0x07
    43a0:	ee 80       	ldd	r14, Y+6	; 0x06
    43a2:	fd 80       	ldd	r15, Y+5	; 0x05
    43a4:	0c 81       	ldd	r16, Y+4	; 0x04
    43a6:	1b 81       	ldd	r17, Y+3	; 0x03
    43a8:	aa 81       	ldd	r26, Y+2	; 0x02
    43aa:	b9 81       	ldd	r27, Y+1	; 0x01
    43ac:	ce 0f       	add	r28, r30
    43ae:	d1 1d       	adc	r29, r1
    43b0:	cd bf       	out	0x3d, r28	; 61
    43b2:	de bf       	out	0x3e, r29	; 62
    43b4:	ed 01       	movw	r28, r26
    43b6:	08 95       	ret

000043b8 <__udivmodhi4>:
    43b8:	aa 1b       	sub	r26, r26
    43ba:	bb 1b       	sub	r27, r27
    43bc:	51 e1       	ldi	r21, 0x11	; 17
    43be:	07 c0       	rjmp	.+14     	; 0x43ce <__udivmodhi4_ep>

000043c0 <__udivmodhi4_loop>:
    43c0:	aa 1f       	adc	r26, r26
    43c2:	bb 1f       	adc	r27, r27
    43c4:	a6 17       	cp	r26, r22
    43c6:	b7 07       	cpc	r27, r23
    43c8:	10 f0       	brcs	.+4      	; 0x43ce <__udivmodhi4_ep>
    43ca:	a6 1b       	sub	r26, r22
    43cc:	b7 0b       	sbc	r27, r23

000043ce <__udivmodhi4_ep>:
    43ce:	88 1f       	adc	r24, r24
    43d0:	99 1f       	adc	r25, r25
    43d2:	5a 95       	dec	r21
    43d4:	a9 f7       	brne	.-22     	; 0x43c0 <__udivmodhi4_loop>
    43d6:	80 95       	com	r24
    43d8:	90 95       	com	r25
    43da:	bc 01       	movw	r22, r24
    43dc:	cd 01       	movw	r24, r26
    43de:	08 95       	ret

000043e0 <__udivmodsi4>:
    43e0:	a1 e2       	ldi	r26, 0x21	; 33
    43e2:	1a 2e       	mov	r1, r26
    43e4:	aa 1b       	sub	r26, r26
    43e6:	bb 1b       	sub	r27, r27
    43e8:	fd 01       	movw	r30, r26
    43ea:	0d c0       	rjmp	.+26     	; 0x4406 <__udivmodsi4_ep>

000043ec <__udivmodsi4_loop>:
    43ec:	aa 1f       	adc	r26, r26
    43ee:	bb 1f       	adc	r27, r27
    43f0:	ee 1f       	adc	r30, r30
    43f2:	ff 1f       	adc	r31, r31
    43f4:	a2 17       	cp	r26, r18
    43f6:	b3 07       	cpc	r27, r19
    43f8:	e4 07       	cpc	r30, r20
    43fa:	f5 07       	cpc	r31, r21
    43fc:	20 f0       	brcs	.+8      	; 0x4406 <__udivmodsi4_ep>
    43fe:	a2 1b       	sub	r26, r18
    4400:	b3 0b       	sbc	r27, r19
    4402:	e4 0b       	sbc	r30, r20
    4404:	f5 0b       	sbc	r31, r21

00004406 <__udivmodsi4_ep>:
    4406:	66 1f       	adc	r22, r22
    4408:	77 1f       	adc	r23, r23
    440a:	88 1f       	adc	r24, r24
    440c:	99 1f       	adc	r25, r25
    440e:	1a 94       	dec	r1
    4410:	69 f7       	brne	.-38     	; 0x43ec <__udivmodsi4_loop>
    4412:	60 95       	com	r22
    4414:	70 95       	com	r23
    4416:	80 95       	com	r24
    4418:	90 95       	com	r25
    441a:	9b 01       	movw	r18, r22
    441c:	ac 01       	movw	r20, r24
    441e:	bd 01       	movw	r22, r26
    4420:	cf 01       	movw	r24, r30
    4422:	08 95       	ret

00004424 <__umulhisi3>:
    4424:	a2 9f       	mul	r26, r18
    4426:	b0 01       	movw	r22, r0
    4428:	b3 9f       	mul	r27, r19
    442a:	c0 01       	movw	r24, r0
    442c:	a3 9f       	mul	r26, r19
    442e:	70 0d       	add	r23, r0
    4430:	81 1d       	adc	r24, r1
    4432:	11 24       	eor	r1, r1
    4434:	91 1d       	adc	r25, r1
    4436:	b2 9f       	mul	r27, r18
    4438:	70 0d       	add	r23, r0
    443a:	81 1d       	adc	r24, r1
    443c:	11 24       	eor	r1, r1
    443e:	91 1d       	adc	r25, r1
    4440:	08 95       	ret

00004442 <atol>:
    4442:	1f 93       	push	r17
    4444:	fc 01       	movw	r30, r24
    4446:	99 27       	eor	r25, r25
    4448:	88 27       	eor	r24, r24
    444a:	bc 01       	movw	r22, r24
    444c:	e8 94       	clt
    444e:	11 91       	ld	r17, Z+
    4450:	10 32       	cpi	r17, 0x20	; 32
    4452:	e9 f3       	breq	.-6      	; 0x444e <atol+0xc>
    4454:	19 30       	cpi	r17, 0x09	; 9
    4456:	10 f0       	brcs	.+4      	; 0x445c <atol+0x1a>
    4458:	1e 30       	cpi	r17, 0x0E	; 14
    445a:	c8 f3       	brcs	.-14     	; 0x444e <atol+0xc>
    445c:	1b 32       	cpi	r17, 0x2B	; 43
    445e:	51 f0       	breq	.+20     	; 0x4474 <atol+0x32>
    4460:	1d 32       	cpi	r17, 0x2D	; 45
    4462:	49 f4       	brne	.+18     	; 0x4476 <atol+0x34>
    4464:	68 94       	set
    4466:	06 c0       	rjmp	.+12     	; 0x4474 <atol+0x32>
    4468:	0e 94 48 23 	call	0x4690	; 0x4690 <__mulsi_const_10>
    446c:	61 0f       	add	r22, r17
    446e:	71 1d       	adc	r23, r1
    4470:	81 1d       	adc	r24, r1
    4472:	91 1d       	adc	r25, r1
    4474:	11 91       	ld	r17, Z+
    4476:	10 53       	subi	r17, 0x30	; 48
    4478:	1a 30       	cpi	r17, 0x0A	; 10
    447a:	b0 f3       	brcs	.-20     	; 0x4468 <atol+0x26>
    447c:	3e f4       	brtc	.+14     	; 0x448c <atol+0x4a>
    447e:	90 95       	com	r25
    4480:	80 95       	com	r24
    4482:	70 95       	com	r23
    4484:	61 95       	neg	r22
    4486:	7f 4f       	sbci	r23, 0xFF	; 255
    4488:	8f 4f       	sbci	r24, 0xFF	; 255
    448a:	9f 4f       	sbci	r25, 0xFF	; 255
    448c:	1f 91       	pop	r17
    448e:	08 95       	ret

00004490 <__ftoa_engine>:
    4490:	28 30       	cpi	r18, 0x08	; 8
    4492:	08 f0       	brcs	.+2      	; 0x4496 <__ftoa_engine+0x6>
    4494:	27 e0       	ldi	r18, 0x07	; 7
    4496:	33 27       	eor	r19, r19
    4498:	da 01       	movw	r26, r20
    449a:	99 0f       	add	r25, r25
    449c:	31 1d       	adc	r19, r1
    449e:	87 fd       	sbrc	r24, 7
    44a0:	91 60       	ori	r25, 0x01	; 1
    44a2:	00 96       	adiw	r24, 0x00	; 0
    44a4:	61 05       	cpc	r22, r1
    44a6:	71 05       	cpc	r23, r1
    44a8:	39 f4       	brne	.+14     	; 0x44b8 <__ftoa_engine+0x28>
    44aa:	32 60       	ori	r19, 0x02	; 2
    44ac:	2e 5f       	subi	r18, 0xFE	; 254
    44ae:	3d 93       	st	X+, r19
    44b0:	30 e3       	ldi	r19, 0x30	; 48
    44b2:	2a 95       	dec	r18
    44b4:	e1 f7       	brne	.-8      	; 0x44ae <__ftoa_engine+0x1e>
    44b6:	08 95       	ret
    44b8:	9f 3f       	cpi	r25, 0xFF	; 255
    44ba:	30 f0       	brcs	.+12     	; 0x44c8 <__ftoa_engine+0x38>
    44bc:	80 38       	cpi	r24, 0x80	; 128
    44be:	71 05       	cpc	r23, r1
    44c0:	61 05       	cpc	r22, r1
    44c2:	09 f0       	breq	.+2      	; 0x44c6 <__ftoa_engine+0x36>
    44c4:	3c 5f       	subi	r19, 0xFC	; 252
    44c6:	3c 5f       	subi	r19, 0xFC	; 252
    44c8:	3d 93       	st	X+, r19
    44ca:	91 30       	cpi	r25, 0x01	; 1
    44cc:	08 f0       	brcs	.+2      	; 0x44d0 <__ftoa_engine+0x40>
    44ce:	80 68       	ori	r24, 0x80	; 128
    44d0:	91 1d       	adc	r25, r1
    44d2:	df 93       	push	r29
    44d4:	cf 93       	push	r28
    44d6:	1f 93       	push	r17
    44d8:	0f 93       	push	r16
    44da:	ff 92       	push	r15
    44dc:	ef 92       	push	r14
    44de:	19 2f       	mov	r17, r25
    44e0:	98 7f       	andi	r25, 0xF8	; 248
    44e2:	96 95       	lsr	r25
    44e4:	e9 2f       	mov	r30, r25
    44e6:	96 95       	lsr	r25
    44e8:	96 95       	lsr	r25
    44ea:	e9 0f       	add	r30, r25
    44ec:	ff 27       	eor	r31, r31
    44ee:	ec 54       	subi	r30, 0x4C	; 76
    44f0:	fe 4f       	sbci	r31, 0xFE	; 254
    44f2:	99 27       	eor	r25, r25
    44f4:	33 27       	eor	r19, r19
    44f6:	ee 24       	eor	r14, r14
    44f8:	ff 24       	eor	r15, r15
    44fa:	a7 01       	movw	r20, r14
    44fc:	e7 01       	movw	r28, r14
    44fe:	05 90       	lpm	r0, Z+
    4500:	08 94       	sec
    4502:	07 94       	ror	r0
    4504:	28 f4       	brcc	.+10     	; 0x4510 <__ftoa_engine+0x80>
    4506:	36 0f       	add	r19, r22
    4508:	e7 1e       	adc	r14, r23
    450a:	f8 1e       	adc	r15, r24
    450c:	49 1f       	adc	r20, r25
    450e:	51 1d       	adc	r21, r1
    4510:	66 0f       	add	r22, r22
    4512:	77 1f       	adc	r23, r23
    4514:	88 1f       	adc	r24, r24
    4516:	99 1f       	adc	r25, r25
    4518:	06 94       	lsr	r0
    451a:	a1 f7       	brne	.-24     	; 0x4504 <__ftoa_engine+0x74>
    451c:	05 90       	lpm	r0, Z+
    451e:	07 94       	ror	r0
    4520:	28 f4       	brcc	.+10     	; 0x452c <__ftoa_engine+0x9c>
    4522:	e7 0e       	add	r14, r23
    4524:	f8 1e       	adc	r15, r24
    4526:	49 1f       	adc	r20, r25
    4528:	56 1f       	adc	r21, r22
    452a:	c1 1d       	adc	r28, r1
    452c:	77 0f       	add	r23, r23
    452e:	88 1f       	adc	r24, r24
    4530:	99 1f       	adc	r25, r25
    4532:	66 1f       	adc	r22, r22
    4534:	06 94       	lsr	r0
    4536:	a1 f7       	brne	.-24     	; 0x4520 <__ftoa_engine+0x90>
    4538:	05 90       	lpm	r0, Z+
    453a:	07 94       	ror	r0
    453c:	28 f4       	brcc	.+10     	; 0x4548 <__ftoa_engine+0xb8>
    453e:	f8 0e       	add	r15, r24
    4540:	49 1f       	adc	r20, r25
    4542:	56 1f       	adc	r21, r22
    4544:	c7 1f       	adc	r28, r23
    4546:	d1 1d       	adc	r29, r1
    4548:	88 0f       	add	r24, r24
    454a:	99 1f       	adc	r25, r25
    454c:	66 1f       	adc	r22, r22
    454e:	77 1f       	adc	r23, r23
    4550:	06 94       	lsr	r0
    4552:	a1 f7       	brne	.-24     	; 0x453c <__ftoa_engine+0xac>
    4554:	05 90       	lpm	r0, Z+
    4556:	07 94       	ror	r0
    4558:	20 f4       	brcc	.+8      	; 0x4562 <__ftoa_engine+0xd2>
    455a:	49 0f       	add	r20, r25
    455c:	56 1f       	adc	r21, r22
    455e:	c7 1f       	adc	r28, r23
    4560:	d8 1f       	adc	r29, r24
    4562:	99 0f       	add	r25, r25
    4564:	66 1f       	adc	r22, r22
    4566:	77 1f       	adc	r23, r23
    4568:	88 1f       	adc	r24, r24
    456a:	06 94       	lsr	r0
    456c:	a9 f7       	brne	.-22     	; 0x4558 <__ftoa_engine+0xc8>
    456e:	84 91       	lpm	r24, Z
    4570:	10 95       	com	r17
    4572:	17 70       	andi	r17, 0x07	; 7
    4574:	41 f0       	breq	.+16     	; 0x4586 <__ftoa_engine+0xf6>
    4576:	d6 95       	lsr	r29
    4578:	c7 95       	ror	r28
    457a:	57 95       	ror	r21
    457c:	47 95       	ror	r20
    457e:	f7 94       	ror	r15
    4580:	e7 94       	ror	r14
    4582:	1a 95       	dec	r17
    4584:	c1 f7       	brne	.-16     	; 0x4576 <__ftoa_engine+0xe6>
    4586:	ea e5       	ldi	r30, 0x5A	; 90
    4588:	f1 e0       	ldi	r31, 0x01	; 1
    458a:	68 94       	set
    458c:	15 90       	lpm	r1, Z+
    458e:	15 91       	lpm	r17, Z+
    4590:	35 91       	lpm	r19, Z+
    4592:	65 91       	lpm	r22, Z+
    4594:	95 91       	lpm	r25, Z+
    4596:	05 90       	lpm	r0, Z+
    4598:	7f e2       	ldi	r23, 0x2F	; 47
    459a:	73 95       	inc	r23
    459c:	e1 18       	sub	r14, r1
    459e:	f1 0a       	sbc	r15, r17
    45a0:	43 0b       	sbc	r20, r19
    45a2:	56 0b       	sbc	r21, r22
    45a4:	c9 0b       	sbc	r28, r25
    45a6:	d0 09       	sbc	r29, r0
    45a8:	c0 f7       	brcc	.-16     	; 0x459a <__ftoa_engine+0x10a>
    45aa:	e1 0c       	add	r14, r1
    45ac:	f1 1e       	adc	r15, r17
    45ae:	43 1f       	adc	r20, r19
    45b0:	56 1f       	adc	r21, r22
    45b2:	c9 1f       	adc	r28, r25
    45b4:	d0 1d       	adc	r29, r0
    45b6:	7e f4       	brtc	.+30     	; 0x45d6 <__ftoa_engine+0x146>
    45b8:	70 33       	cpi	r23, 0x30	; 48
    45ba:	11 f4       	brne	.+4      	; 0x45c0 <__ftoa_engine+0x130>
    45bc:	8a 95       	dec	r24
    45be:	e6 cf       	rjmp	.-52     	; 0x458c <__ftoa_engine+0xfc>
    45c0:	e8 94       	clt
    45c2:	01 50       	subi	r16, 0x01	; 1
    45c4:	30 f0       	brcs	.+12     	; 0x45d2 <__ftoa_engine+0x142>
    45c6:	08 0f       	add	r16, r24
    45c8:	0a f4       	brpl	.+2      	; 0x45cc <__ftoa_engine+0x13c>
    45ca:	00 27       	eor	r16, r16
    45cc:	02 17       	cp	r16, r18
    45ce:	08 f4       	brcc	.+2      	; 0x45d2 <__ftoa_engine+0x142>
    45d0:	20 2f       	mov	r18, r16
    45d2:	23 95       	inc	r18
    45d4:	02 2f       	mov	r16, r18
    45d6:	7a 33       	cpi	r23, 0x3A	; 58
    45d8:	28 f0       	brcs	.+10     	; 0x45e4 <__ftoa_engine+0x154>
    45da:	79 e3       	ldi	r23, 0x39	; 57
    45dc:	7d 93       	st	X+, r23
    45de:	2a 95       	dec	r18
    45e0:	e9 f7       	brne	.-6      	; 0x45dc <__ftoa_engine+0x14c>
    45e2:	10 c0       	rjmp	.+32     	; 0x4604 <__ftoa_engine+0x174>
    45e4:	7d 93       	st	X+, r23
    45e6:	2a 95       	dec	r18
    45e8:	89 f6       	brne	.-94     	; 0x458c <__ftoa_engine+0xfc>
    45ea:	06 94       	lsr	r0
    45ec:	97 95       	ror	r25
    45ee:	67 95       	ror	r22
    45f0:	37 95       	ror	r19
    45f2:	17 95       	ror	r17
    45f4:	17 94       	ror	r1
    45f6:	e1 18       	sub	r14, r1
    45f8:	f1 0a       	sbc	r15, r17
    45fa:	43 0b       	sbc	r20, r19
    45fc:	56 0b       	sbc	r21, r22
    45fe:	c9 0b       	sbc	r28, r25
    4600:	d0 09       	sbc	r29, r0
    4602:	98 f0       	brcs	.+38     	; 0x462a <__ftoa_engine+0x19a>
    4604:	23 95       	inc	r18
    4606:	7e 91       	ld	r23, -X
    4608:	73 95       	inc	r23
    460a:	7a 33       	cpi	r23, 0x3A	; 58
    460c:	08 f0       	brcs	.+2      	; 0x4610 <__ftoa_engine+0x180>
    460e:	70 e3       	ldi	r23, 0x30	; 48
    4610:	7c 93       	st	X, r23
    4612:	20 13       	cpse	r18, r16
    4614:	b8 f7       	brcc	.-18     	; 0x4604 <__ftoa_engine+0x174>
    4616:	7e 91       	ld	r23, -X
    4618:	70 61       	ori	r23, 0x10	; 16
    461a:	7d 93       	st	X+, r23
    461c:	30 f0       	brcs	.+12     	; 0x462a <__ftoa_engine+0x19a>
    461e:	83 95       	inc	r24
    4620:	71 e3       	ldi	r23, 0x31	; 49
    4622:	7d 93       	st	X+, r23
    4624:	70 e3       	ldi	r23, 0x30	; 48
    4626:	2a 95       	dec	r18
    4628:	e1 f7       	brne	.-8      	; 0x4622 <__ftoa_engine+0x192>
    462a:	11 24       	eor	r1, r1
    462c:	ef 90       	pop	r14
    462e:	ff 90       	pop	r15
    4630:	0f 91       	pop	r16
    4632:	1f 91       	pop	r17
    4634:	cf 91       	pop	r28
    4636:	df 91       	pop	r29
    4638:	99 27       	eor	r25, r25
    463a:	87 fd       	sbrc	r24, 7
    463c:	90 95       	com	r25
    463e:	08 95       	ret

00004640 <strnlen_P>:
    4640:	fc 01       	movw	r30, r24
    4642:	05 90       	lpm	r0, Z+
    4644:	61 50       	subi	r22, 0x01	; 1
    4646:	70 40       	sbci	r23, 0x00	; 0
    4648:	01 10       	cpse	r0, r1
    464a:	d8 f7       	brcc	.-10     	; 0x4642 <strnlen_P+0x2>
    464c:	80 95       	com	r24
    464e:	90 95       	com	r25
    4650:	8e 0f       	add	r24, r30
    4652:	9f 1f       	adc	r25, r31
    4654:	08 95       	ret

00004656 <strcat>:
    4656:	fb 01       	movw	r30, r22
    4658:	dc 01       	movw	r26, r24
    465a:	0d 90       	ld	r0, X+
    465c:	00 20       	and	r0, r0
    465e:	e9 f7       	brne	.-6      	; 0x465a <strcat+0x4>
    4660:	11 97       	sbiw	r26, 0x01	; 1
    4662:	01 90       	ld	r0, Z+
    4664:	0d 92       	st	X+, r0
    4666:	00 20       	and	r0, r0
    4668:	e1 f7       	brne	.-8      	; 0x4662 <strcat+0xc>
    466a:	08 95       	ret

0000466c <strcpy>:
    466c:	fb 01       	movw	r30, r22
    466e:	dc 01       	movw	r26, r24
    4670:	01 90       	ld	r0, Z+
    4672:	0d 92       	st	X+, r0
    4674:	00 20       	and	r0, r0
    4676:	e1 f7       	brne	.-8      	; 0x4670 <strcpy+0x4>
    4678:	08 95       	ret

0000467a <strnlen>:
    467a:	fc 01       	movw	r30, r24
    467c:	61 50       	subi	r22, 0x01	; 1
    467e:	70 40       	sbci	r23, 0x00	; 0
    4680:	01 90       	ld	r0, Z+
    4682:	01 10       	cpse	r0, r1
    4684:	d8 f7       	brcc	.-10     	; 0x467c <strnlen+0x2>
    4686:	80 95       	com	r24
    4688:	90 95       	com	r25
    468a:	8e 0f       	add	r24, r30
    468c:	9f 1f       	adc	r25, r31
    468e:	08 95       	ret

00004690 <__mulsi_const_10>:
    4690:	59 2f       	mov	r21, r25
    4692:	48 2f       	mov	r20, r24
    4694:	37 2f       	mov	r19, r23
    4696:	26 2f       	mov	r18, r22
    4698:	66 0f       	add	r22, r22
    469a:	77 1f       	adc	r23, r23
    469c:	88 1f       	adc	r24, r24
    469e:	99 1f       	adc	r25, r25
    46a0:	66 0f       	add	r22, r22
    46a2:	77 1f       	adc	r23, r23
    46a4:	88 1f       	adc	r24, r24
    46a6:	99 1f       	adc	r25, r25
    46a8:	62 0f       	add	r22, r18
    46aa:	73 1f       	adc	r23, r19
    46ac:	84 1f       	adc	r24, r20
    46ae:	95 1f       	adc	r25, r21
    46b0:	66 0f       	add	r22, r22
    46b2:	77 1f       	adc	r23, r23
    46b4:	88 1f       	adc	r24, r24
    46b6:	99 1f       	adc	r25, r25
    46b8:	08 95       	ret

000046ba <fputc>:
    46ba:	0f 93       	push	r16
    46bc:	1f 93       	push	r17
    46be:	cf 93       	push	r28
    46c0:	df 93       	push	r29
    46c2:	fb 01       	movw	r30, r22
    46c4:	23 81       	ldd	r18, Z+3	; 0x03
    46c6:	21 fd       	sbrc	r18, 1
    46c8:	03 c0       	rjmp	.+6      	; 0x46d0 <fputc+0x16>
    46ca:	8f ef       	ldi	r24, 0xFF	; 255
    46cc:	9f ef       	ldi	r25, 0xFF	; 255
    46ce:	2c c0       	rjmp	.+88     	; 0x4728 <fputc+0x6e>
    46d0:	22 ff       	sbrs	r18, 2
    46d2:	16 c0       	rjmp	.+44     	; 0x4700 <fputc+0x46>
    46d4:	46 81       	ldd	r20, Z+6	; 0x06
    46d6:	57 81       	ldd	r21, Z+7	; 0x07
    46d8:	24 81       	ldd	r18, Z+4	; 0x04
    46da:	35 81       	ldd	r19, Z+5	; 0x05
    46dc:	42 17       	cp	r20, r18
    46de:	53 07       	cpc	r21, r19
    46e0:	44 f4       	brge	.+16     	; 0x46f2 <fputc+0x38>
    46e2:	a0 81       	ld	r26, Z
    46e4:	b1 81       	ldd	r27, Z+1	; 0x01
    46e6:	9d 01       	movw	r18, r26
    46e8:	2f 5f       	subi	r18, 0xFF	; 255
    46ea:	3f 4f       	sbci	r19, 0xFF	; 255
    46ec:	20 83       	st	Z, r18
    46ee:	31 83       	std	Z+1, r19	; 0x01
    46f0:	8c 93       	st	X, r24
    46f2:	26 81       	ldd	r18, Z+6	; 0x06
    46f4:	37 81       	ldd	r19, Z+7	; 0x07
    46f6:	2f 5f       	subi	r18, 0xFF	; 255
    46f8:	3f 4f       	sbci	r19, 0xFF	; 255
    46fa:	26 83       	std	Z+6, r18	; 0x06
    46fc:	37 83       	std	Z+7, r19	; 0x07
    46fe:	14 c0       	rjmp	.+40     	; 0x4728 <fputc+0x6e>
    4700:	8b 01       	movw	r16, r22
    4702:	ec 01       	movw	r28, r24
    4704:	fb 01       	movw	r30, r22
    4706:	00 84       	ldd	r0, Z+8	; 0x08
    4708:	f1 85       	ldd	r31, Z+9	; 0x09
    470a:	e0 2d       	mov	r30, r0
    470c:	09 95       	icall
    470e:	89 2b       	or	r24, r25
    4710:	e1 f6       	brne	.-72     	; 0x46ca <fputc+0x10>
    4712:	d8 01       	movw	r26, r16
    4714:	16 96       	adiw	r26, 0x06	; 6
    4716:	8d 91       	ld	r24, X+
    4718:	9c 91       	ld	r25, X
    471a:	17 97       	sbiw	r26, 0x07	; 7
    471c:	01 96       	adiw	r24, 0x01	; 1
    471e:	16 96       	adiw	r26, 0x06	; 6
    4720:	8d 93       	st	X+, r24
    4722:	9c 93       	st	X, r25
    4724:	17 97       	sbiw	r26, 0x07	; 7
    4726:	ce 01       	movw	r24, r28
    4728:	df 91       	pop	r29
    472a:	cf 91       	pop	r28
    472c:	1f 91       	pop	r17
    472e:	0f 91       	pop	r16
    4730:	08 95       	ret

00004732 <sprintf>:
    4732:	ae e0       	ldi	r26, 0x0E	; 14
    4734:	b0 e0       	ldi	r27, 0x00	; 0
    4736:	ef e9       	ldi	r30, 0x9F	; 159
    4738:	f3 e2       	ldi	r31, 0x23	; 35
    473a:	0c 94 b9 21 	jmp	0x4372	; 0x4372 <__prologue_saves__+0x1c>
    473e:	0d 89       	ldd	r16, Y+21	; 0x15
    4740:	1e 89       	ldd	r17, Y+22	; 0x16
    4742:	86 e0       	ldi	r24, 0x06	; 6
    4744:	8c 83       	std	Y+4, r24	; 0x04
    4746:	09 83       	std	Y+1, r16	; 0x01
    4748:	1a 83       	std	Y+2, r17	; 0x02
    474a:	8f ef       	ldi	r24, 0xFF	; 255
    474c:	9f e7       	ldi	r25, 0x7F	; 127
    474e:	8d 83       	std	Y+5, r24	; 0x05
    4750:	9e 83       	std	Y+6, r25	; 0x06
    4752:	ae 01       	movw	r20, r28
    4754:	47 5e       	subi	r20, 0xE7	; 231
    4756:	5f 4f       	sbci	r21, 0xFF	; 255
    4758:	6f 89       	ldd	r22, Y+23	; 0x17
    475a:	78 8d       	ldd	r23, Y+24	; 0x18
    475c:	ce 01       	movw	r24, r28
    475e:	01 96       	adiw	r24, 0x01	; 1
    4760:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <vfprintf>
    4764:	ef 81       	ldd	r30, Y+7	; 0x07
    4766:	f8 85       	ldd	r31, Y+8	; 0x08
    4768:	e0 0f       	add	r30, r16
    476a:	f1 1f       	adc	r31, r17
    476c:	10 82       	st	Z, r1
    476e:	2e 96       	adiw	r28, 0x0e	; 14
    4770:	e4 e0       	ldi	r30, 0x04	; 4
    4772:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__epilogue_restores__+0x1c>

00004776 <__ultoa_invert>:
    4776:	fa 01       	movw	r30, r20
    4778:	aa 27       	eor	r26, r26
    477a:	28 30       	cpi	r18, 0x08	; 8
    477c:	51 f1       	breq	.+84     	; 0x47d2 <__ultoa_invert+0x5c>
    477e:	20 31       	cpi	r18, 0x10	; 16
    4780:	81 f1       	breq	.+96     	; 0x47e2 <__ultoa_invert+0x6c>
    4782:	e8 94       	clt
    4784:	6f 93       	push	r22
    4786:	6e 7f       	andi	r22, 0xFE	; 254
    4788:	6e 5f       	subi	r22, 0xFE	; 254
    478a:	7f 4f       	sbci	r23, 0xFF	; 255
    478c:	8f 4f       	sbci	r24, 0xFF	; 255
    478e:	9f 4f       	sbci	r25, 0xFF	; 255
    4790:	af 4f       	sbci	r26, 0xFF	; 255
    4792:	b1 e0       	ldi	r27, 0x01	; 1
    4794:	3e d0       	rcall	.+124    	; 0x4812 <__ultoa_invert+0x9c>
    4796:	b4 e0       	ldi	r27, 0x04	; 4
    4798:	3c d0       	rcall	.+120    	; 0x4812 <__ultoa_invert+0x9c>
    479a:	67 0f       	add	r22, r23
    479c:	78 1f       	adc	r23, r24
    479e:	89 1f       	adc	r24, r25
    47a0:	9a 1f       	adc	r25, r26
    47a2:	a1 1d       	adc	r26, r1
    47a4:	68 0f       	add	r22, r24
    47a6:	79 1f       	adc	r23, r25
    47a8:	8a 1f       	adc	r24, r26
    47aa:	91 1d       	adc	r25, r1
    47ac:	a1 1d       	adc	r26, r1
    47ae:	6a 0f       	add	r22, r26
    47b0:	71 1d       	adc	r23, r1
    47b2:	81 1d       	adc	r24, r1
    47b4:	91 1d       	adc	r25, r1
    47b6:	a1 1d       	adc	r26, r1
    47b8:	20 d0       	rcall	.+64     	; 0x47fa <__ultoa_invert+0x84>
    47ba:	09 f4       	brne	.+2      	; 0x47be <__ultoa_invert+0x48>
    47bc:	68 94       	set
    47be:	3f 91       	pop	r19
    47c0:	2a e0       	ldi	r18, 0x0A	; 10
    47c2:	26 9f       	mul	r18, r22
    47c4:	11 24       	eor	r1, r1
    47c6:	30 19       	sub	r19, r0
    47c8:	30 5d       	subi	r19, 0xD0	; 208
    47ca:	31 93       	st	Z+, r19
    47cc:	de f6       	brtc	.-74     	; 0x4784 <__ultoa_invert+0xe>
    47ce:	cf 01       	movw	r24, r30
    47d0:	08 95       	ret
    47d2:	46 2f       	mov	r20, r22
    47d4:	47 70       	andi	r20, 0x07	; 7
    47d6:	40 5d       	subi	r20, 0xD0	; 208
    47d8:	41 93       	st	Z+, r20
    47da:	b3 e0       	ldi	r27, 0x03	; 3
    47dc:	0f d0       	rcall	.+30     	; 0x47fc <__ultoa_invert+0x86>
    47de:	c9 f7       	brne	.-14     	; 0x47d2 <__ultoa_invert+0x5c>
    47e0:	f6 cf       	rjmp	.-20     	; 0x47ce <__ultoa_invert+0x58>
    47e2:	46 2f       	mov	r20, r22
    47e4:	4f 70       	andi	r20, 0x0F	; 15
    47e6:	40 5d       	subi	r20, 0xD0	; 208
    47e8:	4a 33       	cpi	r20, 0x3A	; 58
    47ea:	18 f0       	brcs	.+6      	; 0x47f2 <__ultoa_invert+0x7c>
    47ec:	49 5d       	subi	r20, 0xD9	; 217
    47ee:	31 fd       	sbrc	r19, 1
    47f0:	40 52       	subi	r20, 0x20	; 32
    47f2:	41 93       	st	Z+, r20
    47f4:	02 d0       	rcall	.+4      	; 0x47fa <__ultoa_invert+0x84>
    47f6:	a9 f7       	brne	.-22     	; 0x47e2 <__ultoa_invert+0x6c>
    47f8:	ea cf       	rjmp	.-44     	; 0x47ce <__ultoa_invert+0x58>
    47fa:	b4 e0       	ldi	r27, 0x04	; 4
    47fc:	a6 95       	lsr	r26
    47fe:	97 95       	ror	r25
    4800:	87 95       	ror	r24
    4802:	77 95       	ror	r23
    4804:	67 95       	ror	r22
    4806:	ba 95       	dec	r27
    4808:	c9 f7       	brne	.-14     	; 0x47fc <__ultoa_invert+0x86>
    480a:	00 97       	sbiw	r24, 0x00	; 0
    480c:	61 05       	cpc	r22, r1
    480e:	71 05       	cpc	r23, r1
    4810:	08 95       	ret
    4812:	9b 01       	movw	r18, r22
    4814:	ac 01       	movw	r20, r24
    4816:	0a 2e       	mov	r0, r26
    4818:	06 94       	lsr	r0
    481a:	57 95       	ror	r21
    481c:	47 95       	ror	r20
    481e:	37 95       	ror	r19
    4820:	27 95       	ror	r18
    4822:	ba 95       	dec	r27
    4824:	c9 f7       	brne	.-14     	; 0x4818 <__ultoa_invert+0xa2>
    4826:	62 0f       	add	r22, r18
    4828:	73 1f       	adc	r23, r19
    482a:	84 1f       	adc	r24, r20
    482c:	95 1f       	adc	r25, r21
    482e:	a0 1d       	adc	r26, r0
    4830:	08 95       	ret

00004832 <eeprom_read_block>:
    4832:	60 50       	subi	r22, 0x00	; 0
    4834:	7c 4e       	sbci	r23, 0xEC	; 236
    4836:	0c 94 54 24 	jmp	0x48a8	; 0x48a8 <memcpy>

0000483a <eeprom_update_block>:
    483a:	dc 01       	movw	r26, r24
    483c:	a4 0f       	add	r26, r20
    483e:	b5 1f       	adc	r27, r21
    4840:	41 50       	subi	r20, 0x01	; 1
    4842:	50 40       	sbci	r21, 0x00	; 0
    4844:	48 f0       	brcs	.+18     	; 0x4858 <eeprom_update_block+0x1e>
    4846:	cb 01       	movw	r24, r22
    4848:	84 0f       	add	r24, r20
    484a:	95 1f       	adc	r25, r21
    484c:	2e 91       	ld	r18, -X
    484e:	0e 94 2e 24 	call	0x485c	; 0x485c <eeprom_update_r18>
    4852:	41 50       	subi	r20, 0x01	; 1
    4854:	50 40       	sbci	r21, 0x00	; 0
    4856:	d0 f7       	brcc	.-12     	; 0x484c <eeprom_update_block+0x12>
    4858:	08 95       	ret

0000485a <eeprom_update_byte>:
    485a:	26 2f       	mov	r18, r22

0000485c <eeprom_update_r18>:
    485c:	0e 94 50 24 	call	0x48a0	; 0x48a0 <eeprom_mapen>
    4860:	00 80       	ld	r0, Z
    4862:	02 16       	cp	r0, r18
    4864:	19 f0       	breq	.+6      	; 0x486c <eeprom_update_r18+0x10>
    4866:	0e 94 39 24 	call	0x4872	; 0x4872 <eeprom_write_r18>
    486a:	01 97       	sbiw	r24, 0x01	; 1
    486c:	01 97       	sbiw	r24, 0x01	; 1
    486e:	08 95       	ret

00004870 <eeprom_write_byte>:
    4870:	26 2f       	mov	r18, r22

00004872 <eeprom_write_r18>:
    4872:	af 93       	push	r26
    4874:	bf 93       	push	r27
    4876:	e0 e0       	ldi	r30, 0x00	; 0
    4878:	f0 e1       	ldi	r31, 0x10	; 16
    487a:	32 81       	ldd	r19, Z+2	; 0x02
    487c:	31 fd       	sbrc	r19, 1
    487e:	fd cf       	rjmp	.-6      	; 0x487a <eeprom_write_r18+0x8>
    4880:	dc 01       	movw	r26, r24
    4882:	a0 50       	subi	r26, 0x00	; 0
    4884:	bc 4e       	sbci	r27, 0xEC	; 236
    4886:	2c 93       	st	X, r18
    4888:	2d e9       	ldi	r18, 0x9D	; 157
    488a:	24 bf       	out	0x34, r18	; 52
    488c:	23 e0       	ldi	r18, 0x03	; 3
    488e:	20 83       	st	Z, r18
    4890:	01 96       	adiw	r24, 0x01	; 1
    4892:	bf 91       	pop	r27
    4894:	af 91       	pop	r26
    4896:	08 95       	ret

00004898 <eeprom_read_byte>:
    4898:	03 d0       	rcall	.+6      	; 0x48a0 <eeprom_mapen>
    489a:	80 81       	ld	r24, Z
    489c:	99 27       	eor	r25, r25
    489e:	08 95       	ret

000048a0 <eeprom_mapen>:
    48a0:	fc 01       	movw	r30, r24
    48a2:	e0 50       	subi	r30, 0x00	; 0
    48a4:	fc 4e       	sbci	r31, 0xEC	; 236
    48a6:	08 95       	ret

000048a8 <memcpy>:
    48a8:	fb 01       	movw	r30, r22
    48aa:	dc 01       	movw	r26, r24
    48ac:	02 c0       	rjmp	.+4      	; 0x48b2 <memcpy+0xa>
    48ae:	01 90       	ld	r0, Z+
    48b0:	0d 92       	st	X+, r0
    48b2:	41 50       	subi	r20, 0x01	; 1
    48b4:	50 40       	sbci	r21, 0x00	; 0
    48b6:	d8 f7       	brcc	.-10     	; 0x48ae <memcpy+0x6>
    48b8:	08 95       	ret

000048ba <_exit>:
    48ba:	f8 94       	cli

000048bc <__stop_program>:
    48bc:	ff cf       	rjmp	.-2      	; 0x48bc <__stop_program>
