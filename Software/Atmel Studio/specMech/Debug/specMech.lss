
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000064c5  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005b74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bd  00009b74  00005b74  00005c08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000851  00802800  00802800  000064c5  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000064c5  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006524  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000618  00000000  00000000  00006568  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a5d6  00000000  00000000  00006b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000449d  00000000  00000000  00011156  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000449d  00000000  00000000  000155f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001158  00000000  00000000  00019a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000023ae  00000000  00000000  0001abe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004b86  00000000  00000000  0001cf96  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003c8  00000000  00000000  00021b1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__ctors_end>
       4:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
       8:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
       c:	0c 94 be 1c 	jmp	0x397c	; 0x397c <__vector_3>
      10:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      14:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      18:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      1c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      20:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      24:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      28:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      2c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      30:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <__vector_12>
      34:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      38:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      3c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      40:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      44:	0c 94 f4 1e 	jmp	0x3de8	; 0x3de8 <__vector_17>
      48:	0c 94 42 1f 	jmp	0x3e84	; 0x3e84 <__vector_18>
      4c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      50:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__vector_20>
      54:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      58:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      5c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      60:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      64:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      68:	0c 94 7e 1f 	jmp	0x3efc	; 0x3efc <__vector_26>
      6c:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <__vector_27>
      70:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      74:	0c 94 4e 20 	jmp	0x409c	; 0x409c <__vector_29>
      78:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      7c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      80:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      84:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      88:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      8c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      90:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      94:	0c 94 e5 1f 	jmp	0x3fca	; 0x3fca <__vector_37>
      98:	0c 94 1a 20 	jmp	0x4034	; 0x4034 <__vector_38>
      9c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
      a0:	d0 04       	cpc	r13, r0
      a2:	f7 04       	cpc	r15, r7
      a4:	f7 04       	cpc	r15, r7
      a6:	f7 04       	cpc	r15, r7
      a8:	f7 04       	cpc	r15, r7
      aa:	f7 04       	cpc	r15, r7
      ac:	f7 04       	cpc	r15, r7
      ae:	f7 04       	cpc	r15, r7
      b0:	f7 04       	cpc	r15, r7
      b2:	d3 04       	cpc	r13, r3
      b4:	f7 04       	cpc	r15, r7
      b6:	f7 04       	cpc	r15, r7
      b8:	f7 04       	cpc	r15, r7
      ba:	f7 04       	cpc	r15, r7
      bc:	f7 04       	cpc	r15, r7
      be:	f7 04       	cpc	r15, r7
      c0:	f7 04       	cpc	r15, r7
      c2:	f7 04       	cpc	r15, r7
      c4:	f7 04       	cpc	r15, r7
      c6:	f7 04       	cpc	r15, r7
      c8:	f7 04       	cpc	r15, r7
      ca:	f7 04       	cpc	r15, r7
      cc:	f7 04       	cpc	r15, r7
      ce:	f7 04       	cpc	r15, r7
      d0:	f7 04       	cpc	r15, r7
      d2:	f7 04       	cpc	r15, r7
      d4:	be 04       	cpc	r11, r14
      d6:	f7 04       	cpc	r15, r7
      d8:	f7 04       	cpc	r15, r7
      da:	f7 04       	cpc	r15, r7
      dc:	f7 04       	cpc	r15, r7
      de:	f7 04       	cpc	r15, r7
      e0:	f7 04       	cpc	r15, r7
      e2:	f7 04       	cpc	r15, r7
      e4:	f7 04       	cpc	r15, r7
      e6:	f7 04       	cpc	r15, r7
      e8:	c4 04       	cpc	r12, r4
      ea:	f7 04       	cpc	r15, r7
      ec:	c1 04       	cpc	r12, r1
      ee:	f7 04       	cpc	r15, r7
      f0:	f7 04       	cpc	r15, r7
      f2:	c7 04       	cpc	r12, r7
      f4:	ca 04       	cpc	r12, r10
      f6:	cd 04       	cpc	r12, r13
      f8:	5d 10       	cpse	r5, r13
      fa:	5d 10       	cpse	r5, r13
      fc:	5d 10       	cpse	r5, r13
      fe:	b0 15       	cp	r27, r0
     100:	b0 15       	cp	r27, r0
     102:	b0 15       	cp	r27, r0
     104:	b0 15       	cp	r27, r0
     106:	b0 15       	cp	r27, r0
     108:	b0 15       	cp	r27, r0
     10a:	b0 15       	cp	r27, r0
     10c:	b0 15       	cp	r27, r0
     10e:	b0 15       	cp	r27, r0
     110:	b0 15       	cp	r27, r0
     112:	b0 15       	cp	r27, r0
     114:	b0 15       	cp	r27, r0
     116:	b0 15       	cp	r27, r0
     118:	b0 15       	cp	r27, r0
     11a:	b0 15       	cp	r27, r0
     11c:	b0 15       	cp	r27, r0
     11e:	b0 15       	cp	r27, r0
     120:	b0 15       	cp	r27, r0
     122:	72 15       	cp	r23, r2
     124:	b0 15       	cp	r27, r0
     126:	b0 15       	cp	r27, r0
     128:	b0 15       	cp	r27, r0
     12a:	b0 15       	cp	r27, r0
     12c:	b0 15       	cp	r27, r0
     12e:	b0 15       	cp	r27, r0
     130:	b0 15       	cp	r27, r0
     132:	b0 15       	cp	r27, r0
     134:	b0 15       	cp	r27, r0
     136:	b0 15       	cp	r27, r0
     138:	88 11       	cpse	r24, r8
     13a:	88 11       	cpse	r24, r8
     13c:	88 11       	cpse	r24, r8
     13e:	b0 15       	cp	r27, r0
     140:	36 12       	cpse	r3, r22
     142:	b0 15       	cp	r27, r0
     144:	b0 15       	cp	r27, r0
     146:	b0 15       	cp	r27, r0
     148:	b0 15       	cp	r27, r0
     14a:	b0 15       	cp	r27, r0
     14c:	b0 15       	cp	r27, r0
     14e:	b0 15       	cp	r27, r0
     150:	b0 15       	cp	r27, r0
     152:	b0 15       	cp	r27, r0
     154:	73 13       	cpse	r23, r19
     156:	48 14       	cp	r4, r8
     158:	b0 15       	cp	r27, r0
     15a:	b0 15       	cp	r27, r0
     15c:	b0 15       	cp	r27, r0
     15e:	d1 14       	cp	r13, r1
     160:	b0 15       	cp	r27, r0
     162:	19 15       	cp	r17, r9

00000164 <__trampolines_end>:
     164:	6e 61       	ori	r22, 0x1E	; 30
     166:	6e 00       	.word	0x006e	; ????

00000168 <__c.2332>:
     168:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     178:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     188:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     198:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1a8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1b8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1c8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1d8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1e8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1f8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     208:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     218:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     228:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     238:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     248:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     258:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000266 <__c.2474>:
     266:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000272 <pstr_nan>:
     272:	4e 41 4e                                            NAN

00000275 <pstr_inity>:
     275:	49 4e 49 54 59                                      INITY

0000027a <pstr_inf>:
     27a:	49 4e 46                                            INF

0000027d <pwr_m10>:
     27d:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     28d:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000295 <pwr_p10>:
     295:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     2a5:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000002ae <__ctors_end>:
     2ae:	11 24       	eor	r1, r1
     2b0:	1f be       	out	0x3f, r1	; 63
     2b2:	cf ef       	ldi	r28, 0xFF	; 255
     2b4:	cd bf       	out	0x3d, r28	; 61
     2b6:	df e3       	ldi	r29, 0x3F	; 63
     2b8:	de bf       	out	0x3e, r29	; 62

000002ba <__do_clear_bss>:
     2ba:	20 e3       	ldi	r18, 0x30	; 48
     2bc:	a0 e0       	ldi	r26, 0x00	; 0
     2be:	b8 e2       	ldi	r27, 0x28	; 40
     2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <.do_clear_bss_start>

000002c2 <.do_clear_bss_loop>:
     2c2:	1d 92       	st	X+, r1

000002c4 <.do_clear_bss_start>:
     2c4:	a1 35       	cpi	r26, 0x51	; 81
     2c6:	b2 07       	cpc	r27, r18
     2c8:	e1 f7       	brne	.-8      	; 0x2c2 <.do_clear_bss_loop>
     2ca:	0e 94 ca 09 	call	0x1394	; 0x1394 <main>
     2ce:	0c 94 b8 2d 	jmp	0x5b70	; 0x5b70 <_exit>

000002d2 <__bad_interrupt>:
     2d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002d6 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
uint8_t read_AD590(uint8_t sensor, float *temperature)
{
     2d6:	8f 92       	push	r8
     2d8:	9f 92       	push	r9
     2da:	af 92       	push	r10
     2dc:	bf 92       	push	r11
     2de:	ef 92       	push	r14
     2e0:	ff 92       	push	r15
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	00 d0       	rcall	.+0      	; 0x2ec <read_AD590+0x16>
     2ec:	00 d0       	rcall	.+0      	; 0x2ee <read_AD590+0x18>
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
     2f2:	7b 01       	movw	r14, r22

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     2f4:	81 30       	cpi	r24, 0x01	; 1
     2f6:	c9 f0       	breq	.+50     	; 0x32a <read_AD590+0x54>
     2f8:	18 f0       	brcs	.+6      	; 0x300 <read_AD590+0x2a>
     2fa:	82 30       	cpi	r24, 0x02	; 2
     2fc:	61 f0       	breq	.+24     	; 0x316 <read_AD590+0x40>
     2fe:	10 c0       	rjmp	.+32     	; 0x320 <read_AD590+0x4a>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     300:	0f 2e       	mov	r0, r31
     302:	f3 e3       	ldi	r31, 0x33	; 51
     304:	8f 2e       	mov	r8, r31
     306:	98 2c       	mov	r9, r8
     308:	f3 ef       	ldi	r31, 0xF3	; 243
     30a:	af 2e       	mov	r10, r31
     30c:	f0 e4       	ldi	r31, 0x40	; 64
     30e:	bf 2e       	mov	r11, r31
     310:	f0 2d       	mov	r31, r0
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     312:	11 e0       	ldi	r17, 0x01	; 1
     314:	0e c0       	rjmp	.+28     	; 0x332 <read_AD590+0x5c>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     316:	81 2c       	mov	r8, r1
     318:	91 2c       	mov	r9, r1
     31a:	54 01       	movw	r10, r8
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     31c:	10 e1       	ldi	r17, 0x10	; 16
			offset = 0.0;
			break;
     31e:	09 c0       	rjmp	.+18     	; 0x332 <read_AD590+0x5c>
{

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
     320:	81 2c       	mov	r8, r1
     322:	91 2c       	mov	r9, r1
     324:	54 01       	movw	r10, r8
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     326:	10 e0       	ldi	r17, 0x00	; 0
			break;
     328:	04 c0       	rjmp	.+8      	; 0x332 <read_AD590+0x5c>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     32a:	81 2c       	mov	r8, r1
     32c:	91 2c       	mov	r9, r1
     32e:	54 01       	movw	r10, r8
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     330:	14 e0       	ldi	r17, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     332:	40 e0       	ldi	r20, 0x00	; 0
     334:	66 e0       	ldi	r22, 0x06	; 6
     336:	87 e2       	ldi	r24, 0x27	; 39
     338:	0e 94 38 0a 	call	0x1470	; 0x1470 <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     33c:	41 2f       	mov	r20, r17
     33e:	40 95       	com	r20
     340:	60 e0       	ldi	r22, 0x00	; 0
     342:	87 e2       	ldi	r24, 0x27	; 39
     344:	0e 94 38 0a 	call	0x1470	; 0x1470 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     348:	41 2f       	mov	r20, r17
     34a:	6a e0       	ldi	r22, 0x0A	; 10
     34c:	87 e2       	ldi	r24, 0x27	; 39
     34e:	0e 94 38 0a 	call	0x1470	; 0x1470 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     352:	86 e1       	ldi	r24, 0x16	; 22
     354:	8a 95       	dec	r24
     356:	f1 f7       	brne	.-4      	; 0x354 <read_AD590+0x7e>
     358:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	if (read_ADS1115(ADC_TE, PGA0512, AIN3, DR128, &voltage) == ERROR) {
     35a:	8e 01       	movw	r16, r28
     35c:	0f 5f       	subi	r16, 0xFF	; 255
     35e:	1f 4f       	sbci	r17, 0xFF	; 255
     360:	20 e8       	ldi	r18, 0x80	; 128
     362:	40 e7       	ldi	r20, 0x70	; 112
     364:	68 e0       	ldi	r22, 0x08	; 8
     366:	88 e4       	ldi	r24, 0x48	; 72
     368:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <read_ADS1115>
     36c:	83 36       	cpi	r24, 0x63	; 99
     36e:	51 f4       	brne	.+20     	; 0x384 <read_AD590+0xae>
		*temperature = BADFLOAT;
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	50 e8       	ldi	r21, 0x80	; 128
     374:	66 e2       	ldi	r22, 0x26	; 38
     376:	74 ec       	ldi	r23, 0xC4	; 196
     378:	f7 01       	movw	r30, r14
     37a:	40 83       	st	Z, r20
     37c:	51 83       	std	Z+1, r21	; 0x01
     37e:	62 83       	std	Z+2, r22	; 0x02
     380:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
     382:	1c c0       	rjmp	.+56     	; 0x3bc <read_AD590+0xe6>
	}
	*temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	4a e7       	ldi	r20, 0x7A	; 122
     38a:	54 e4       	ldi	r21, 0x44	; 68
     38c:	69 81       	ldd	r22, Y+1	; 0x01
     38e:	7a 81       	ldd	r23, Y+2	; 0x02
     390:	8b 81       	ldd	r24, Y+3	; 0x03
     392:	9c 81       	ldd	r25, Y+4	; 0x04
     394:	0e 94 14 22 	call	0x4428	; 0x4428 <__mulsf3>
     398:	23 e3       	ldi	r18, 0x33	; 51
     39a:	33 e9       	ldi	r19, 0x93	; 147
     39c:	48 e8       	ldi	r20, 0x88	; 136
     39e:	53 e4       	ldi	r21, 0x43	; 67
     3a0:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__subsf3>
     3a4:	9b 01       	movw	r18, r22
     3a6:	ac 01       	movw	r20, r24
     3a8:	c5 01       	movw	r24, r10
     3aa:	b4 01       	movw	r22, r8
     3ac:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__addsf3>
     3b0:	f7 01       	movw	r30, r14
     3b2:	60 83       	st	Z, r22
     3b4:	71 83       	std	Z+1, r23	; 0x01
     3b6:	82 83       	std	Z+2, r24	; 0x02
     3b8:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     3ba:	80 e0       	ldi	r24, 0x00	; 0

}
     3bc:	24 96       	adiw	r28, 0x04	; 4
     3be:	cd bf       	out	0x3d, r28	; 61
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	1f 91       	pop	r17
     3c8:	0f 91       	pop	r16
     3ca:	ff 90       	pop	r15
     3cc:	ef 90       	pop	r14
     3ce:	bf 90       	pop	r11
     3d0:	af 90       	pop	r10
     3d2:	9f 90       	pop	r9
     3d4:	8f 90       	pop	r8
     3d6:	08 95       	ret

000003d8 <read_ADS1115>:
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
uint8_t read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins,
	uint8_t datarate, float *voltage)
{
     3d8:	8f 92       	push	r8
     3da:	9f 92       	push	r9
     3dc:	af 92       	push	r10
     3de:	bf 92       	push	r11
     3e0:	cf 92       	push	r12
     3e2:	df 92       	push	r13
     3e4:	ef 92       	push	r14
     3e6:	ff 92       	push	r15
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	f8 2e       	mov	r15, r24
     3f2:	e6 2e       	mov	r14, r22
     3f4:	68 01       	movw	r12, r16
	float scale;
	uint8_t confighi, configlo, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     3f6:	46 2b       	or	r20, r22
     3f8:	c4 2f       	mov	r28, r20
     3fa:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     3fc:	d2 2f       	mov	r29, r18
     3fe:	d3 60       	ori	r29, 0x03	; 3

	*voltage = BADFLOAT;
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e8       	ldi	r25, 0x80	; 128
     404:	a6 e2       	ldi	r26, 0x26	; 38
     406:	b4 ec       	ldi	r27, 0xC4	; 196
     408:	f8 01       	movw	r30, r16
     40a:	80 83       	st	Z, r24
     40c:	91 83       	std	Z+1, r25	; 0x01
     40e:	a2 83       	std	Z+2, r26	; 0x02
     410:	b3 83       	std	Z+3, r27	; 0x03
	if (start_TWI(addr, TWIWRITE == ERROR)) {		// TWI start condition
     412:	60 e0       	ldi	r22, 0x00	; 0
     414:	8f 2d       	mov	r24, r15
     416:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
     41a:	08 2f       	mov	r16, r24
     41c:	88 23       	and	r24, r24
     41e:	21 f0       	breq	.+8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		stop_TWI();
     420:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(ERROR);
     424:	13 e6       	ldi	r17, 0x63	; 99
     426:	b4 c0       	rjmp	.+360    	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
	}
	if ((write_TWI(ADS1115CONFIG) == ERROR)) {		// Write the CONFIG register
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
     42e:	18 2f       	mov	r17, r24
     430:	83 36       	cpi	r24, 0x63	; 99
     432:	19 f4       	brne	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		stop_TWI();
     434:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(ERROR);
     438:	ab c0       	rjmp	.+342    	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
	}
	if ((write_TWI(confighi) == ERROR)) {			// Write high byte
     43a:	8c 2f       	mov	r24, r28
     43c:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
     440:	18 2f       	mov	r17, r24
     442:	83 36       	cpi	r24, 0x63	; 99
     444:	19 f4       	brne	.+6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		stop_TWI();
     446:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(ERROR);
     44a:	a2 c0       	rjmp	.+324    	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
	}
	if ((write_TWI(configlo) == ERROR)) {			// Write low byte
     44c:	8d 2f       	mov	r24, r29
     44e:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
     452:	18 2f       	mov	r17, r24
     454:	83 36       	cpi	r24, 0x63	; 99
     456:	19 f4       	brne	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		stop_TWI();
     458:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(ERROR);
     45c:	99 c0       	rjmp	.+306    	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
	}
	stop_TWI();
     45e:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
     462:	fc e1       	ldi	r31, 0x1C	; 28
     464:	fa 95       	dec	r31
     466:	f1 f7       	brne	.-4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>

	_delay_us(25);									// Power-up time

	converting = YES;
     468:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     46a:	09 c0       	rjmp	.+18     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
		start_TWI(addr, TWIREAD);
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	8f 2d       	mov	r24, r15
     470:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
		flag = readlast_TWI();
     474:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <readlast_TWI>
		if (flag & 0b10000000) {
     478:	88 23       	and	r24, r24
     47a:	0c f4       	brge	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
			converting = NO;
     47c:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     47e:	c1 11       	cpse	r28, r1
     480:	f5 cf       	rjmp	.-22     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		flag = readlast_TWI();
		if (flag & 0b10000000) {
			converting = NO;
		}
	}
	stop_TWI();
     482:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>

	start_TWI(addr, TWIWRITE);
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	8f 2d       	mov	r24, r15
     48a:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     494:	61 e0       	ldi	r22, 0x01	; 1
     496:	8f 2d       	mov	r24, r15
     498:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
	highbyte = read_TWI();
     49c:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <read_TWI>
     4a0:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     4a2:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <readlast_TWI>
     4a6:	d8 2f       	mov	r29, r24
	stop_TWI();
     4a8:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>

	value = highbyte;
     4ac:	6c 2f       	mov	r22, r28
     4ae:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     4b0:	76 2f       	mov	r23, r22
     4b2:	66 27       	eor	r22, r22
	value |= lowbyte;
     4b4:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     4b6:	84 e0       	ldi	r24, 0x04	; 4
     4b8:	e8 16       	cp	r14, r24
     4ba:	49 f1       	breq	.+82     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     4bc:	8e 15       	cp	r24, r14
     4be:	30 f0       	brcs	.+12     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4c0:	ee 20       	and	r14, r14
     4c2:	d9 f1       	breq	.+118    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     4c4:	e2 e0       	ldi	r30, 0x02	; 2
     4c6:	ee 16       	cp	r14, r30
     4c8:	69 f1       	breq	.+90     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     4ca:	42 c0       	rjmp	.+132    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     4cc:	f8 e0       	ldi	r31, 0x08	; 8
     4ce:	ef 16       	cp	r14, r31
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4d2:	42 c0       	rjmp	.+132    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     4d4:	8a e0       	ldi	r24, 0x0A	; 10
     4d6:	e8 16       	cp	r14, r24
     4d8:	21 f0       	breq	.+8      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     4da:	e6 e0       	ldi	r30, 0x06	; 6
     4dc:	ee 12       	cpse	r14, r30
     4de:	38 c0       	rjmp	.+112    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     4e0:	0b c0       	rjmp	.+22     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		case PGA0256:
			scale = SCA0256;
     4e2:	0f 2e       	mov	r0, r31
     4e4:	f4 e7       	ldi	r31, 0x74	; 116
     4e6:	8f 2e       	mov	r8, r31
     4e8:	f3 e1       	ldi	r31, 0x13	; 19
     4ea:	9f 2e       	mov	r9, r31
     4ec:	f3 e0       	ldi	r31, 0x03	; 3
     4ee:	af 2e       	mov	r10, r31
     4f0:	f7 e3       	ldi	r31, 0x37	; 55
     4f2:	bf 2e       	mov	r11, r31
     4f4:	f0 2d       	mov	r31, r0
     4f6:	3a c0       	rjmp	.+116    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     4f8:	0f 2e       	mov	r0, r31
     4fa:	f4 e7       	ldi	r31, 0x74	; 116
     4fc:	8f 2e       	mov	r8, r31
     4fe:	f3 e1       	ldi	r31, 0x13	; 19
     500:	9f 2e       	mov	r9, r31
     502:	f3 e0       	ldi	r31, 0x03	; 3
     504:	af 2e       	mov	r10, r31
     506:	f8 e3       	ldi	r31, 0x38	; 56
     508:	bf 2e       	mov	r11, r31
     50a:	f0 2d       	mov	r31, r0
			break;
     50c:	2f c0       	rjmp	.+94     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		case PGA2048:
			scale = SCA2048;
     50e:	0f 2e       	mov	r0, r31
     510:	f2 e1       	ldi	r31, 0x12	; 18
     512:	8f 2e       	mov	r8, r31
     514:	f3 e1       	ldi	r31, 0x13	; 19
     516:	9f 2e       	mov	r9, r31
     518:	f3 e8       	ldi	r31, 0x83	; 131
     51a:	af 2e       	mov	r10, r31
     51c:	f8 e3       	ldi	r31, 0x38	; 56
     51e:	bf 2e       	mov	r11, r31
     520:	f0 2d       	mov	r31, r0
			break;
     522:	24 c0       	rjmp	.+72     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		case PGA4096:
			scale = SCA4096;
     524:	0f 2e       	mov	r0, r31
     526:	f4 e7       	ldi	r31, 0x74	; 116
     528:	8f 2e       	mov	r8, r31
     52a:	f3 e1       	ldi	r31, 0x13	; 19
     52c:	9f 2e       	mov	r9, r31
     52e:	f3 e0       	ldi	r31, 0x03	; 3
     530:	af 2e       	mov	r10, r31
     532:	f9 e3       	ldi	r31, 0x39	; 57
     534:	bf 2e       	mov	r11, r31
     536:	f0 2d       	mov	r31, r0
			break;
     538:	19 c0       	rjmp	.+50     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		case PGA6144:
			scale = SCA6144;
     53a:	0f 2e       	mov	r0, r31
     53c:	fe e2       	ldi	r31, 0x2E	; 46
     53e:	8f 2e       	mov	r8, r31
     540:	fd e9       	ldi	r31, 0x9D	; 157
     542:	9f 2e       	mov	r9, r31
     544:	f4 e4       	ldi	r31, 0x44	; 68
     546:	af 2e       	mov	r10, r31
     548:	f9 e3       	ldi	r31, 0x39	; 57
     54a:	bf 2e       	mov	r11, r31
     54c:	f0 2d       	mov	r31, r0
			break;
     54e:	0e c0       	rjmp	.+28     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		default:
			scale = 0.0;
     550:	81 2c       	mov	r8, r1
     552:	91 2c       	mov	r9, r1
     554:	54 01       	movw	r10, r8
			break;
     556:	0a c0       	rjmp	.+20     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     558:	0f 2e       	mov	r0, r31
     55a:	f1 e7       	ldi	r31, 0x71	; 113
     55c:	8f 2e       	mov	r8, r31
     55e:	f3 e1       	ldi	r31, 0x13	; 19
     560:	9f 2e       	mov	r9, r31
     562:	f3 e8       	ldi	r31, 0x83	; 131
     564:	af 2e       	mov	r10, r31
     566:	f7 e3       	ldi	r31, 0x37	; 55
     568:	bf 2e       	mov	r11, r31
     56a:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	*voltage = scale * (float) value;
     56c:	07 2e       	mov	r0, r23
     56e:	00 0c       	add	r0, r0
     570:	88 0b       	sbc	r24, r24
     572:	99 0b       	sbc	r25, r25
     574:	0e 94 5f 21 	call	0x42be	; 0x42be <__floatsisf>
     578:	9b 01       	movw	r18, r22
     57a:	ac 01       	movw	r20, r24
     57c:	c5 01       	movw	r24, r10
     57e:	b4 01       	movw	r22, r8
     580:	0e 94 14 22 	call	0x4428	; 0x4428 <__mulsf3>
     584:	f6 01       	movw	r30, r12
     586:	60 83       	st	Z, r22
     588:	71 83       	std	Z+1, r23	; 0x01
     58a:	82 83       	std	Z+2, r24	; 0x02
     58c:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     58e:	10 2f       	mov	r17, r16

}
     590:	81 2f       	mov	r24, r17
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	df 90       	pop	r13
     5a0:	cf 90       	pop	r12
     5a2:	bf 90       	pop	r11
     5a4:	af 90       	pop	r10
     5a6:	9f 90       	pop	r9
     5a8:	8f 90       	pop	r8
     5aa:	08 95       	ret

000005ac <get_cmdline>:
	if ((d >= '0') && (d <= '9')) {
		return(ERROR);
	}
	return(NOERROR);

}
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	9c 01       	movw	r18, r24
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	1c c0       	rjmp	.+56     	; 0x5ee <get_cmdline+0x42>
     5b6:	ca e3       	ldi	r28, 0x3A	; 58
     5b8:	dc e2       	ldi	r29, 0x2C	; 44
     5ba:	e8 81       	ld	r30, Y
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	e5 5c       	subi	r30, 0xC5	; 197
     5c0:	f4 4d       	sbci	r31, 0xD4	; 212
     5c2:	80 81       	ld	r24, Z
     5c4:	f9 01       	movw	r30, r18
     5c6:	e4 0f       	add	r30, r20
     5c8:	f1 1d       	adc	r31, r1
     5ca:	80 83       	st	Z, r24
     5cc:	ac e3       	ldi	r26, 0x3C	; 60
     5ce:	bc e2       	ldi	r27, 0x2C	; 44
     5d0:	8c 91       	ld	r24, X
     5d2:	81 50       	subi	r24, 0x01	; 1
     5d4:	8c 93       	st	X, r24
     5d6:	88 81       	ld	r24, Y
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	01 96       	adiw	r24, 0x01	; 1
     5dc:	6e ef       	ldi	r22, 0xFE	; 254
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <__divmodhi4>
     5e4:	88 83       	st	Y, r24
     5e6:	80 81       	ld	r24, Z
     5e8:	88 23       	and	r24, r24
     5ea:	29 f0       	breq	.+10     	; 0x5f6 <get_cmdline+0x4a>
     5ec:	4f 5f       	subi	r20, 0xFF	; 255
     5ee:	80 91 3c 2c 	lds	r24, 0x2C3C	; 0x802c3c <recv0_buf+0x101>
     5f2:	81 11       	cpse	r24, r1
     5f4:	e0 cf       	rjmp	.-64     	; 0x5b6 <get_cmdline+0xa>
     5f6:	f9 01       	movw	r30, r18
     5f8:	e4 0f       	add	r30, r20
     5fa:	f1 1d       	adc	r31, r1
     5fc:	10 82       	st	Z, r1
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     604:	9f e9       	ldi	r25, 0x9F	; 159
     606:	98 0f       	add	r25, r24
     608:	9a 31       	cpi	r25, 0x1A	; 26
     60a:	28 f0       	brcs	.+10     	; 0x616 <isaletter+0x12>
     60c:	81 54       	subi	r24, 0x41	; 65
     60e:	8a 31       	cpi	r24, 0x1A	; 26
     610:	20 f4       	brcc	.+8      	; 0x61a <isaletter+0x16>
		return(ERROR);
     612:	83 e6       	ldi	r24, 0x63	; 99
     614:	08 95       	ret
     616:	83 e6       	ldi	r24, 0x63	; 99
     618:	08 95       	ret
	}
	return(NOERROR);
     61a:	80 e0       	ldi	r24, 0x00	; 0

}
     61c:	08 95       	ret

0000061e <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     62a:	e6 2e       	mov	r14, r22
     62c:	f1 2c       	mov	r15, r1
     62e:	84 e3       	ldi	r24, 0x34	; 52
     630:	8e 9d       	mul	r24, r14
     632:	f0 01       	movw	r30, r0
     634:	8f 9d       	mul	r24, r15
     636:	f0 0d       	add	r31, r0
     638:	11 24       	eor	r1, r1
     63a:	e3 5f       	subi	r30, 0xF3	; 243
     63c:	f7 4d       	sbci	r31, 0xD7	; 215
     63e:	8f e3       	ldi	r24, 0x3F	; 63
     640:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     642:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     644:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     646:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     648:	04 c0       	rjmp	.+8      	; 0x652 <parse_cmd+0x34>
		if (*ptr == '\0') {
     64a:	11 23       	and	r17, r17
     64c:	09 f4       	brne	.+2      	; 0x650 <parse_cmd+0x32>
     64e:	75 c0       	rjmp	.+234    	; 0x73a <parse_cmd+0x11c>
			return;
		}
		ptr++;
     650:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     652:	18 81       	ld	r17, Y
     654:	81 2f       	mov	r24, r17
     656:	0e 94 02 03 	call	0x604	; 0x604 <isaletter>
     65a:	88 23       	and	r24, r24
     65c:	b1 f3       	breq	.-20     	; 0x64a <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     65e:	21 96       	adiw	r28, 0x01	; 1
     660:	84 e3       	ldi	r24, 0x34	; 52
     662:	8e 9d       	mul	r24, r14
     664:	f0 01       	movw	r30, r0
     666:	8f 9d       	mul	r24, r15
     668:	f0 0d       	add	r31, r0
     66a:	11 24       	eor	r1, r1
     66c:	e3 5f       	subi	r30, 0xF3	; 243
     66e:	f7 4d       	sbci	r31, 0xD7	; 215
     670:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     672:	04 c0       	rjmp	.+8      	; 0x67c <parse_cmd+0x5e>
		if (*ptr == '\0') {
     674:	11 23       	and	r17, r17
     676:	09 f4       	brne	.+2      	; 0x67a <parse_cmd+0x5c>
     678:	60 c0       	rjmp	.+192    	; 0x73a <parse_cmd+0x11c>
			return;
		}
		ptr++;
     67a:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     67c:	18 81       	ld	r17, Y
     67e:	81 2f       	mov	r24, r17
     680:	0e 94 02 03 	call	0x604	; 0x604 <isaletter>
     684:	88 23       	and	r24, r24
     686:	b1 f3       	breq	.-20     	; 0x674 <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     688:	21 96       	adiw	r28, 0x01	; 1
     68a:	84 e3       	ldi	r24, 0x34	; 52
     68c:	8e 9d       	mul	r24, r14
     68e:	f0 01       	movw	r30, r0
     690:	8f 9d       	mul	r24, r15
     692:	f0 0d       	add	r31, r0
     694:	11 24       	eor	r1, r1
     696:	e3 5f       	subi	r30, 0xF3	; 243
     698:	f7 4d       	sbci	r31, 0xD7	; 215
     69a:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	2a c0       	rjmp	.+84     	; 0x6f4 <parse_cmd+0xd6>
		if (*ptr == '\0') {
     6a0:	98 81       	ld	r25, Y
     6a2:	91 11       	cpse	r25, r1
     6a4:	0c c0       	rjmp	.+24     	; 0x6be <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     6a6:	94 e3       	ldi	r25, 0x34	; 52
     6a8:	9e 9d       	mul	r25, r14
     6aa:	f0 01       	movw	r30, r0
     6ac:	9f 9d       	mul	r25, r15
     6ae:	f0 0d       	add	r31, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	e3 5f       	subi	r30, 0xF3	; 243
     6b4:	f7 4d       	sbci	r31, 0xD7	; 215
     6b6:	e8 0f       	add	r30, r24
     6b8:	f1 1d       	adc	r31, r1
     6ba:	12 82       	std	Z+2, r1	; 0x02
			return;
     6bc:	3e c0       	rjmp	.+124    	; 0x73a <parse_cmd+0x11c>
		}
		if (*ptr == ';') {			// Command ID separator
     6be:	9b 33       	cpi	r25, 0x3B	; 59
     6c0:	61 f4       	brne	.+24     	; 0x6da <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     6c2:	94 e3       	ldi	r25, 0x34	; 52
     6c4:	9e 9d       	mul	r25, r14
     6c6:	f0 01       	movw	r30, r0
     6c8:	9f 9d       	mul	r25, r15
     6ca:	f0 0d       	add	r31, r0
     6cc:	11 24       	eor	r1, r1
     6ce:	e3 5f       	subi	r30, 0xF3	; 243
     6d0:	f7 4d       	sbci	r31, 0xD7	; 215
     6d2:	e8 0f       	add	r30, r24
     6d4:	f1 1d       	adc	r31, r1
     6d6:	12 82       	std	Z+2, r1	; 0x02
			break;
     6d8:	0f c0       	rjmp	.+30     	; 0x6f8 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     6da:	21 96       	adiw	r28, 0x01	; 1
     6dc:	24 e3       	ldi	r18, 0x34	; 52
     6de:	2e 9d       	mul	r18, r14
     6e0:	f0 01       	movw	r30, r0
     6e2:	2f 9d       	mul	r18, r15
     6e4:	f0 0d       	add	r31, r0
     6e6:	11 24       	eor	r1, r1
     6e8:	e3 5f       	subi	r30, 0xF3	; 243
     6ea:	f7 4d       	sbci	r31, 0xD7	; 215
     6ec:	e8 0f       	add	r30, r24
     6ee:	f1 1d       	adc	r31, r1
     6f0:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6f2:	8f 5f       	subi	r24, 0xFF	; 255
     6f4:	89 32       	cpi	r24, 0x29	; 41
     6f6:	a0 f2       	brcs	.-88     	; 0x6a0 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
     6f8:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	1c c0       	rjmp	.+56     	; 0x736 <parse_cmd+0x118>
		if (*ptr == '\0') {
     6fe:	98 81       	ld	r25, Y
     700:	91 11       	cpse	r25, r1
     702:	0c c0       	rjmp	.+24     	; 0x71c <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     704:	94 e3       	ldi	r25, 0x34	; 52
     706:	9e 9d       	mul	r25, r14
     708:	f0 01       	movw	r30, r0
     70a:	9f 9d       	mul	r25, r15
     70c:	f0 0d       	add	r31, r0
     70e:	11 24       	eor	r1, r1
     710:	e3 5f       	subi	r30, 0xF3	; 243
     712:	f7 4d       	sbci	r31, 0xD7	; 215
     714:	e8 0f       	add	r30, r24
     716:	f1 1d       	adc	r31, r1
     718:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     71a:	0f c0       	rjmp	.+30     	; 0x73a <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     71c:	21 96       	adiw	r28, 0x01	; 1
     71e:	24 e3       	ldi	r18, 0x34	; 52
     720:	2e 9d       	mul	r18, r14
     722:	f0 01       	movw	r30, r0
     724:	2f 9d       	mul	r18, r15
     726:	f0 0d       	add	r31, r0
     728:	11 24       	eor	r1, r1
     72a:	e3 5f       	subi	r30, 0xF3	; 243
     72c:	f7 4d       	sbci	r31, 0xD7	; 215
     72e:	e8 0f       	add	r30, r24
     730:	f1 1d       	adc	r31, r1
     732:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     734:	8f 5f       	subi	r24, 0xFF	; 255
     736:	89 30       	cpi	r24, 0x09	; 9
     738:	10 f3       	brcs	.-60     	; 0x6fe <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	08 95       	ret

00000746 <printLine>:
		been run and the system has received a reboot acknowledge (the !). This
		is done to prevent unsolicited text being sent (error messages) at
		initialization or after a reboot.
------------------------------------------------------------------------------*/
void printLine(char *str)
{
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
     752:	c5 50       	subi	r28, 0x05	; 5
     754:	d1 40       	sbci	r29, 0x01	; 1
     756:	cd bf       	out	0x3d, r28	; 61
     758:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char prFormat[] = "$S%d%s";
     75a:	27 e0       	ldi	r18, 0x07	; 7
     75c:	ea e7       	ldi	r30, 0x7A	; 122
     75e:	fb e9       	ldi	r31, 0x9B	; 155
     760:	de 01       	movw	r26, r28
     762:	a1 50       	subi	r26, 0x01	; 1
     764:	bf 4f       	sbci	r27, 0xFF	; 255
     766:	01 90       	ld	r0, Z+
     768:	0d 92       	st	X+, r0
     76a:	2a 95       	dec	r18
     76c:	e1 f7       	brne	.-8      	; 0x766 <printLine+0x20>

	if (firstpass) {
     76e:	20 91 15 2a 	lds	r18, 0x2A15	; 0x802a15 <firstpass>
     772:	21 11       	cpse	r18, r1
     774:	2a c0       	rjmp	.+84     	; 0x7ca <printLine+0x84>
		return;
	}

	sprintf(strbuf, prFormat, get_SPECID, str);
     776:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     77a:	22 ff       	sbrs	r18, 2
     77c:	03 c0       	rjmp	.+6      	; 0x784 <printLine+0x3e>
     77e:	22 e0       	ldi	r18, 0x02	; 2
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	02 c0       	rjmp	.+4      	; 0x788 <printLine+0x42>
     784:	21 e0       	ldi	r18, 0x01	; 1
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	9f 93       	push	r25
     78a:	8f 93       	push	r24
     78c:	3f 93       	push	r19
     78e:	2f 93       	push	r18
     790:	ce 01       	movw	r24, r28
     792:	81 50       	subi	r24, 0x01	; 1
     794:	9f 4f       	sbci	r25, 0xFF	; 255
     796:	9f 93       	push	r25
     798:	8f 93       	push	r24
     79a:	8e 01       	movw	r16, r28
     79c:	0f 5f       	subi	r16, 0xFF	; 255
     79e:	1f 4f       	sbci	r17, 0xFF	; 255
     7a0:	1f 93       	push	r17
     7a2:	0f 93       	push	r16
     7a4:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
	checksum_NMEA(strbuf);
     7a8:	c8 01       	movw	r24, r16
     7aa:	0e 94 05 0c 	call	0x180a	; 0x180a <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     7ae:	f8 01       	movw	r30, r16
     7b0:	01 90       	ld	r0, Z+
     7b2:	00 20       	and	r0, r0
     7b4:	e9 f7       	brne	.-6      	; 0x7b0 <printLine+0x6a>
     7b6:	31 97       	sbiw	r30, 0x01	; 1
     7b8:	af 01       	movw	r20, r30
     7ba:	40 1b       	sub	r20, r16
     7bc:	51 0b       	sbc	r21, r17
     7be:	b8 01       	movw	r22, r16
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <send_USART>
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	de bf       	out	0x3e, r29	; 62

}
     7ca:	cb 5f       	subi	r28, 0xFB	; 251
     7cc:	de 4f       	sbci	r29, 0xFE	; 254
     7ce:	cd bf       	out	0x3d, r28	; 61
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	08 95       	ret

000007dc <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     7dc:	cf 92       	push	r12
     7de:	df 92       	push	r13
     7e0:	ef 92       	push	r14
     7e2:	ff 92       	push	r15
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	cc 51       	subi	r28, 0x1C	; 28
     7f2:	d1 40       	sbci	r29, 0x01	; 1
     7f4:	cd bf       	out	0x3d, r28	; 61
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	d8 2e       	mov	r13, r24
     7fa:	c9 2e       	mov	r12, r25

	const char format_CMD[] = "CMD,%s,%s";
     7fc:	8a e0       	ldi	r24, 0x0A	; 10
     7fe:	e1 e8       	ldi	r30, 0x81	; 129
     800:	fb e9       	ldi	r31, 0x9B	; 155
     802:	9e 01       	movw	r18, r28
     804:	2f 5f       	subi	r18, 0xFF	; 255
     806:	3f 4f       	sbci	r19, 0xFF	; 255
     808:	79 01       	movw	r14, r18
     80a:	d9 01       	movw	r26, r18
     80c:	01 90       	ld	r0, Z+
     80e:	0d 92       	st	X+, r0
     810:	8a 95       	dec	r24
     812:	e1 f7       	brne	.-8      	; 0x80c <echo_cmd+0x30>
	char currenttime[20], strbuf[BUFSIZE];

	get_time(currenttime);
     814:	8e 01       	movw	r16, r28
     816:	05 5f       	subi	r16, 0xF5	; 245
     818:	1f 4f       	sbci	r17, 0xFF	; 255
     81a:	c8 01       	movw	r24, r16
     81c:	0e 94 ca 06 	call	0xd94	; 0xd94 <get_time>
	sprintf(strbuf, format_CMD, currenttime, cmdline);
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	1f 93       	push	r17
     826:	0f 93       	push	r16
     828:	ff 92       	push	r15
     82a:	ef 92       	push	r14
     82c:	0c 5e       	subi	r16, 0xEC	; 236
     82e:	1f 4f       	sbci	r17, 0xFF	; 255
     830:	1f 93       	push	r17
     832:	0f 93       	push	r16
     834:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
	printLine(strbuf);
     838:	c8 01       	movw	r24, r16
     83a:	0e 94 a3 03 	call	0x746	; 0x746 <printLine>

}
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	de bf       	out	0x3e, r29	; 62
     842:	c4 5e       	subi	r28, 0xE4	; 228
     844:	de 4f       	sbci	r29, 0xFE	; 254
     846:	cd bf       	out	0x3d, r28	; 61
     848:	de bf       	out	0x3e, r29	; 62
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	ff 90       	pop	r15
     854:	ef 90       	pop	r14
     856:	df 90       	pop	r13
     858:	cf 90       	pop	r12
     85a:	08 95       	ret

0000085c <send_EXprompt>:
/*------------------------------------------------------------------------------
void send_EXprompt(void)
	Sends an exclamation mark on USART port 0
------------------------------------------------------------------------------*/
void send_EXprompt(void)
{
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	00 d0       	rcall	.+0      	; 0x862 <send_EXprompt+0x6>
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62

	const char str[] = "!";
     866:	81 e2       	ldi	r24, 0x21	; 33
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	89 83       	std	Y+1, r24	; 0x01
     86c:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     86e:	41 e0       	ldi	r20, 0x01	; 1
     870:	be 01       	movw	r22, r28
     872:	6f 5f       	subi	r22, 0xFF	; 255
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <send_USART>

}
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <rebootACKd>:
	Returns:
		YES if the reboot acknowledge string was received
		NO if it wasn't
------------------------------------------------------------------------------*/
uint8_t rebootACKd(char *cmdline)
{
     886:	cf 93       	push	r28

	if (!rebootackd) {
     888:	c0 91 0c 28 	lds	r28, 0x280C	; 0x80280c <rebootackd>
     88c:	c1 11       	cpse	r28, r1
     88e:	21 c0       	rjmp	.+66     	; 0x8d2 <rebootACKd+0x4c>
     890:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     892:	80 81       	ld	r24, Z
     894:	81 32       	cpi	r24, 0x21	; 33
     896:	91 f4       	brne	.+36     	; 0x8bc <rebootACKd+0x36>
     898:	91 81       	ldd	r25, Z+1	; 0x01
     89a:	91 11       	cpse	r25, r1
     89c:	0f c0       	rjmp	.+30     	; 0x8bc <rebootACKd+0x36>
			init_RTC(511);		// 1-sec RTC clock ticks
     89e:	8f ef       	ldi	r24, 0xFF	; 255
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	0e 94 90 1c 	call	0x3920	; 0x3920 <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     8a6:	85 e0       	ldi	r24, 0x05	; 5
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
     8ae:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>
			rebootackd = YES;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	80 93 0c 28 	sts	0x280C, r24	; 0x80280c <rebootackd>
			return(YES);
     8b8:	c1 e0       	ldi	r28, 0x01	; 1
     8ba:	0c c0       	rjmp	.+24     	; 0x8d4 <rebootACKd+0x4e>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     8bc:	81 32       	cpi	r24, 0x21	; 33
     8be:	31 f4       	brne	.+12     	; 0x8cc <rebootACKd+0x46>
     8c0:	81 81       	ldd	r24, Z+1	; 0x01
     8c2:	88 23       	and	r24, r24
     8c4:	19 f0       	breq	.+6      	; 0x8cc <rebootACKd+0x46>
			reboot();
     8c6:	0e 94 48 20 	call	0x4090	; 0x4090 <reboot>
			return(NO);
     8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <rebootACKd+0x4e>
		} else {
			send_EXprompt();
     8cc:	0e 94 2e 04 	call	0x85c	; 0x85c <send_EXprompt>
//			send_prompt('!');
			return(NO);
     8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <rebootACKd+0x4e>
		}
	}

	return(YES);
     8d2:	c1 e0       	ldi	r28, 0x01	; 1

}
     8d4:	8c 2f       	mov	r24, r28
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret

000008da <send_GTprompt>:
/*------------------------------------------------------------------------------
void send_GTprompt(void)
	Sends a greater than (>) on USART port 0
------------------------------------------------------------------------------*/
void send_GTprompt(void)
{
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	00 d0       	rcall	.+0      	; 0x8e0 <send_GTprompt+0x6>
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62

	const char str[] = ">";
     8e4:	8e e3       	ldi	r24, 0x3E	; 62
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	89 83       	std	Y+1, r24	; 0x01
     8ea:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     8ec:	41 e0       	ldi	r20, 0x01	; 1
     8ee:	be 01       	movw	r22, r28
     8f0:	6f 5f       	subi	r22, 0xFF	; 255
     8f2:	7f 4f       	sbci	r23, 0xFF	; 255
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <send_USART>

}
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	08 95       	ret

00000904 <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
     90c:	cf 5f       	subi	r28, 0xFF	; 255
     90e:	d1 09       	sbc	r29, r1
     910:	cd bf       	out	0x3d, r28	; 61
     912:	de bf       	out	0x3e, r29	; 62

	char cmdline[BUFSIZE+1];		// BUFSIZE is the size of the ring buffer
	static uint8_t cstack = 0;		// pcmd index

	get_cmdline(cmdline);
     914:	ce 01       	movw	r24, r28
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	0e 94 d6 02 	call	0x5ac	; 0x5ac <get_cmdline>

	if (!rebootACKd(cmdline)) {		// Reboot not yet acknowledged
     91c:	ce 01       	movw	r24, r28
     91e:	01 96       	adiw	r24, 0x01	; 1
     920:	0e 94 43 04 	call	0x886	; 0x886 <rebootACKd>
     924:	88 23       	and	r24, r24
     926:	09 f4       	brne	.+2      	; 0x92a <commands+0x26>
     928:	74 c0       	rjmp	.+232    	; 0xa12 <commands+0x10e>
		return;
	}

		// <CR> or ! alone are not errors
	if ((cmdline[0] == '\0') || (cmdline[0] == '!')) {
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	88 23       	and	r24, r24
     92e:	11 f0       	breq	.+4      	; 0x934 <commands+0x30>
     930:	81 32       	cpi	r24, 0x21	; 33
     932:	29 f4       	brne	.+10     	; 0x93e <commands+0x3a>
		firstpass = NO;
     934:	10 92 15 2a 	sts	0x2A15, r1	; 0x802a15 <firstpass>
		send_GTprompt();
     938:	0e 94 6d 04 	call	0x8da	; 0x8da <send_GTprompt>
		return;
     93c:	6a c0       	rjmp	.+212    	; 0xa12 <commands+0x10e>
	}

	echo_cmd(cmdline);
     93e:	ce 01       	movw	r24, r28
     940:	01 96       	adiw	r24, 0x01	; 1
     942:	0e 94 ee 03 	call	0x7dc	; 0x7dc <echo_cmd>
	parse_cmd(cmdline, cstack);
     946:	60 91 00 28 	lds	r22, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     94a:	ce 01       	movw	r24, r28
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	0e 94 0f 03 	call	0x61e	; 0x61e <parse_cmd>

	switch (pcmd[cstack].cverb) {
     952:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     956:	24 e3       	ldi	r18, 0x34	; 52
     958:	82 9f       	mul	r24, r18
     95a:	f0 01       	movw	r30, r0
     95c:	11 24       	eor	r1, r1
     95e:	e3 5f       	subi	r30, 0xF3	; 243
     960:	f7 4d       	sbci	r31, 0xD7	; 215
     962:	e0 81       	ld	r30, Z
     964:	4e 2f       	mov	r20, r30
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	fa 01       	movw	r30, r20
     96a:	e9 54       	subi	r30, 0x49	; 73
     96c:	f1 09       	sbc	r31, r1
     96e:	ec 32       	cpi	r30, 0x2C	; 44
     970:	f1 05       	cpc	r31, r1
     972:	e8 f5       	brcc	.+122    	; 0x9ee <commands+0xea>
     974:	e0 5b       	subi	r30, 0xB0	; 176
     976:	ff 4f       	sbci	r31, 0xFF	; 255
     978:	0c 94 31 26 	jmp	0x4c62	; 0x4c62 <__tablejump2__>
		case 'c':				// close
			close_PNEU(cstack);
     97c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <close_PNEU>
			break;
     980:	3c c0       	rjmp	.+120    	; 0x9fa <commands+0xf6>

		case 'o':				// open
			open_PNEU(cstack);
     982:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <open_PNEU>
			break;
     986:	39 c0       	rjmp	.+114    	; 0x9fa <commands+0xf6>

		case 'm':				// move
			move_MOTOR_CMD(cstack);
     988:	0e 94 cb 1a 	call	0x3596	; 0x3596 <move_MOTOR_CMD>
			break;
     98c:	36 c0       	rjmp	.+108    	; 0x9fa <commands+0xf6>

		case 'r':				// report
			report(cstack);
     98e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <report>
			break;
     992:	33 c0       	rjmp	.+102    	; 0x9fa <commands+0xf6>

		case 's':				// set
			set(cstack);
     994:	0e 94 9f 1b 	call	0x373e	; 0x373e <set>
			break;
     998:	30 c0       	rjmp	.+96     	; 0x9fa <commands+0xf6>

		case 't':
			testroutine();
     99a:	0e 94 11 1c 	call	0x3822	; 0x3822 <testroutine>
			break;
     99e:	2d c0       	rjmp	.+90     	; 0x9fa <commands+0xf6>

		case 'I':	// test init_MOTORS
			init_MOTORS();
     9a0:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <init_MOTORS>
			break;
     9a4:	2a c0       	rjmp	.+84     	; 0x9fa <commands+0xf6>

		case 'R':				// Reboot
			if (motorsMoving()) {
     9a6:	0e 94 76 19 	call	0x32ec	; 0x32ec <motorsMoving>
     9aa:	88 23       	and	r24, r24
     9ac:	39 f0       	breq	.+14     	; 0x9bc <commands+0xb8>
				printError(ERR_MTR, "commands: Can't reboot, motor moving");
     9ae:	6b e8       	ldi	r22, 0x8B	; 139
     9b0:	7b e9       	ldi	r23, 0x9B	; 155
     9b2:	86 e3       	ldi	r24, 0x36	; 54
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
				break;
     9ba:	1f c0       	rjmp	.+62     	; 0x9fa <commands+0xf6>
			} else {
				if (put_FRAM_ENCODERS() == ERROR) {
     9bc:	0e 94 a3 19 	call	0x3346	; 0x3346 <put_FRAM_ENCODERS>
     9c0:	83 36       	cpi	r24, 0x63	; 99
     9c2:	31 f4       	brne	.+12     	; 0x9d0 <commands+0xcc>
					printError(ERR_FRAM, "commands: put_FRAM_ENCODERS error");
     9c4:	60 eb       	ldi	r22, 0xB0	; 176
     9c6:	7b e9       	ldi	r23, 0x9B	; 155
     9c8:	83 e9       	ldi	r24, 0x93	; 147
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
				}
				timerSAVEENCODER = 0;
     9d0:	10 92 36 2a 	sts	0x2A36, r1	; 0x802a36 <timerSAVEENCODER>
				send_GTprompt();	// Aidan request
     9d4:	0e 94 6d 04 	call	0x8da	; 0x8da <send_GTprompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9d8:	8a e6       	ldi	r24, 0x6A	; 106
     9da:	94 e0       	ldi	r25, 0x04	; 4
     9dc:	21 e0       	ldi	r18, 0x01	; 1
     9de:	81 50       	subi	r24, 0x01	; 1
     9e0:	90 40       	sbci	r25, 0x00	; 0
     9e2:	20 40       	sbci	r18, 0x00	; 0
     9e4:	e1 f7       	brne	.-8      	; 0x9de <commands+0xda>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <commands+0xe4>
				_delay_ms(100);
				reboot();
     9e8:	0e 94 48 20 	call	0x4090	; 0x4090 <reboot>
				return;
     9ec:	12 c0       	rjmp	.+36     	; 0xa12 <commands+0x10e>
			}

		default:
			printError(ERR_BADCOMMAND, "Not a command");
     9ee:	62 ed       	ldi	r22, 0xD2	; 210
     9f0:	7b e9       	ldi	r23, 0x9B	; 155
     9f2:	89 ec       	ldi	r24, 0xC9	; 201
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     9fa:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	01 96       	adiw	r24, 0x01	; 1
     a02:	6a e0       	ldi	r22, 0x0A	; 10
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <__divmodhi4>
     a0a:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	send_GTprompt();
     a0e:	0e 94 6d 04 	call	0x8da	; 0x8da <send_GTprompt>

}
     a12:	c1 50       	subi	r28, 0x01	; 1
     a14:	df 4f       	sbci	r29, 0xFF	; 255
     a16:	cd bf       	out	0x3d, r28	; 61
     a18:	de bf       	out	0x3e, r29	; 62
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	08 95       	ret

00000a20 <check_isotime>:
#include "twi.h"
#include "errors.h"
#include "ds3231.h"

uint8_t check_isotime(char *isotime)
{
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	2a 97       	sbiw	r28, 0x0a	; 10
     a2e:	cd bf       	out	0x3d, r28	; 61
     a30:	de bf       	out	0x3e, r29	; 62
     a32:	8c 01       	movw	r16, r24
	char sbuf[10];
	uint8_t i;
	int year, month, day, hours, minutes, seconds;

	for (i = 0; i < 4; i++) {
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	0e c0       	rjmp	.+28     	; 0xa54 <check_isotime+0x34>
		sbuf[i] = isotime[i];
     a38:	82 2f       	mov	r24, r18
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	f8 01       	movw	r30, r16
     a3e:	e8 0f       	add	r30, r24
     a40:	f9 1f       	adc	r31, r25
     a42:	30 81       	ld	r19, Z
     a44:	e1 e0       	ldi	r30, 0x01	; 1
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	ec 0f       	add	r30, r28
     a4a:	fd 1f       	adc	r31, r29
     a4c:	e8 0f       	add	r30, r24
     a4e:	f9 1f       	adc	r31, r25
     a50:	30 83       	st	Z, r19
{
	char sbuf[10];
	uint8_t i;
	int year, month, day, hours, minutes, seconds;

	for (i = 0; i < 4; i++) {
     a52:	2f 5f       	subi	r18, 0xFF	; 255
     a54:	24 30       	cpi	r18, 0x04	; 4
     a56:	80 f3       	brcs	.-32     	; 0xa38 <check_isotime+0x18>
		sbuf[i] = isotime[i];
	}
	sbuf[4] = '\0';
     a58:	1d 82       	std	Y+5, r1	; 0x05
	year = atoi(sbuf);
     a5a:	ce 01       	movw	r24, r28
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <atoi>
	if ((year < 2021) || year > 2030) {
     a62:	85 5e       	subi	r24, 0xE5	; 229
     a64:	97 40       	sbci	r25, 0x07	; 7
     a66:	0a 97       	sbiw	r24, 0x0a	; 10
     a68:	c8 f0       	brcs	.+50     	; 0xa9c <check_isotime+0x7c>
		printError(ERR_ISO, "check_isotime: year out of range (2021-2030)");
     a6a:	60 ee       	ldi	r22, 0xE0	; 224
     a6c:	7b e9       	ldi	r23, 0x9B	; 155
     a6e:	8b e5       	ldi	r24, 0x5B	; 91
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
     a76:	83 e6       	ldi	r24, 0x63	; 99
     a78:	b2 c0       	rjmp	.+356    	; 0xbde <check_isotime+0x1be>
	}
	for (i = 5; i < 7; i++) {
		sbuf[i-5] = isotime[i];
     a7a:	28 2f       	mov	r18, r24
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	f9 01       	movw	r30, r18
     a80:	35 97       	sbiw	r30, 0x05	; 5
     a82:	d8 01       	movw	r26, r16
     a84:	a2 0f       	add	r26, r18
     a86:	b3 1f       	adc	r27, r19
     a88:	9c 91       	ld	r25, X
     a8a:	21 e0       	ldi	r18, 0x01	; 1
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	2c 0f       	add	r18, r28
     a90:	3d 1f       	adc	r19, r29
     a92:	e2 0f       	add	r30, r18
     a94:	f3 1f       	adc	r31, r19
     a96:	90 83       	st	Z, r25
	year = atoi(sbuf);
	if ((year < 2021) || year > 2030) {
		printError(ERR_ISO, "check_isotime: year out of range (2021-2030)");
		return(ERROR);
	}
	for (i = 5; i < 7; i++) {
     a98:	8f 5f       	subi	r24, 0xFF	; 255
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <check_isotime+0x7e>
     a9c:	85 e0       	ldi	r24, 0x05	; 5
     a9e:	87 30       	cpi	r24, 0x07	; 7
     aa0:	60 f3       	brcs	.-40     	; 0xa7a <check_isotime+0x5a>
		sbuf[i-5] = isotime[i];
	}
	sbuf[2] = '\0';
     aa2:	1b 82       	std	Y+3, r1	; 0x03
	month = atoi(sbuf);
     aa4:	ce 01       	movw	r24, r28
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <atoi>
	if ((month < 1) || (month > 12)) {
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	0c 97       	sbiw	r24, 0x0c	; 12
     ab0:	c8 f0       	brcs	.+50     	; 0xae4 <check_isotime+0xc4>
		printError(ERR_ISO, "check_isotime: invalid month (not 1-12)");
     ab2:	6d e0       	ldi	r22, 0x0D	; 13
     ab4:	7c e9       	ldi	r23, 0x9C	; 156
     ab6:	8b e5       	ldi	r24, 0x5B	; 91
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
     abe:	83 e6       	ldi	r24, 0x63	; 99
     ac0:	8e c0       	rjmp	.+284    	; 0xbde <check_isotime+0x1be>
	}
	for (i = 8; i < 10; i++) {
		sbuf[i-8] = isotime[i];
     ac2:	28 2f       	mov	r18, r24
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	f9 01       	movw	r30, r18
     ac8:	38 97       	sbiw	r30, 0x08	; 8
     aca:	d8 01       	movw	r26, r16
     acc:	a2 0f       	add	r26, r18
     ace:	b3 1f       	adc	r27, r19
     ad0:	9c 91       	ld	r25, X
     ad2:	21 e0       	ldi	r18, 0x01	; 1
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	2c 0f       	add	r18, r28
     ad8:	3d 1f       	adc	r19, r29
     ada:	e2 0f       	add	r30, r18
     adc:	f3 1f       	adc	r31, r19
     ade:	90 83       	st	Z, r25
	month = atoi(sbuf);
	if ((month < 1) || (month > 12)) {
		printError(ERR_ISO, "check_isotime: invalid month (not 1-12)");
		return(ERROR);
	}
	for (i = 8; i < 10; i++) {
     ae0:	8f 5f       	subi	r24, 0xFF	; 255
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <check_isotime+0xc6>
     ae4:	88 e0       	ldi	r24, 0x08	; 8
     ae6:	8a 30       	cpi	r24, 0x0A	; 10
     ae8:	60 f3       	brcs	.-40     	; 0xac2 <check_isotime+0xa2>
		sbuf[i-8] = isotime[i];
	}
	sbuf[2] = '\0';
     aea:	1b 82       	std	Y+3, r1	; 0x03
	day = atoi(sbuf);
     aec:	ce 01       	movw	r24, r28
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <atoi>
	if ((day < 1) || (day > 31)) {
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	4f 97       	sbiw	r24, 0x1f	; 31
     af8:	c8 f0       	brcs	.+50     	; 0xb2c <check_isotime+0x10c>
		printError(ERR_ISO, "check_isotime: invalid day (not 1-31)");
     afa:	65 e3       	ldi	r22, 0x35	; 53
     afc:	7c e9       	ldi	r23, 0x9C	; 156
     afe:	8b e5       	ldi	r24, 0x5B	; 91
     b00:	92 e0       	ldi	r25, 0x02	; 2
     b02:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
     b06:	83 e6       	ldi	r24, 0x63	; 99
     b08:	6a c0       	rjmp	.+212    	; 0xbde <check_isotime+0x1be>
	}
	for (i = 11; i < 13; i++) {
		sbuf[i-11] = isotime[i];
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	f9 01       	movw	r30, r18
     b10:	3b 97       	sbiw	r30, 0x0b	; 11
     b12:	d8 01       	movw	r26, r16
     b14:	a2 0f       	add	r26, r18
     b16:	b3 1f       	adc	r27, r19
     b18:	9c 91       	ld	r25, X
     b1a:	21 e0       	ldi	r18, 0x01	; 1
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	2c 0f       	add	r18, r28
     b20:	3d 1f       	adc	r19, r29
     b22:	e2 0f       	add	r30, r18
     b24:	f3 1f       	adc	r31, r19
     b26:	90 83       	st	Z, r25
	day = atoi(sbuf);
	if ((day < 1) || (day > 31)) {
		printError(ERR_ISO, "check_isotime: invalid day (not 1-31)");
		return(ERROR);
	}
	for (i = 11; i < 13; i++) {
     b28:	8f 5f       	subi	r24, 0xFF	; 255
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <check_isotime+0x10e>
     b2c:	8b e0       	ldi	r24, 0x0B	; 11
     b2e:	8d 30       	cpi	r24, 0x0D	; 13
     b30:	60 f3       	brcs	.-40     	; 0xb0a <check_isotime+0xea>
		sbuf[i-11] = isotime[i];
	}
	sbuf[2] = '\0';
     b32:	1b 82       	std	Y+3, r1	; 0x03
	hours = atoi(sbuf);
     b34:	ce 01       	movw	r24, r28
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <atoi>
	if ((hours < 0) || (hours > 23)) {
     b3c:	48 97       	sbiw	r24, 0x18	; 24
     b3e:	c8 f0       	brcs	.+50     	; 0xb72 <check_isotime+0x152>
		printError(ERR_ISO, "check_isotime: invalid hour");
     b40:	6b e5       	ldi	r22, 0x5B	; 91
     b42:	7c e9       	ldi	r23, 0x9C	; 156
     b44:	8b e5       	ldi	r24, 0x5B	; 91
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
     b4c:	83 e6       	ldi	r24, 0x63	; 99
     b4e:	47 c0       	rjmp	.+142    	; 0xbde <check_isotime+0x1be>
	}
	for (i = 14; i < 16; i++) {
		sbuf[i-14] = isotime[i];
     b50:	28 2f       	mov	r18, r24
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	f9 01       	movw	r30, r18
     b56:	3e 97       	sbiw	r30, 0x0e	; 14
     b58:	d8 01       	movw	r26, r16
     b5a:	a2 0f       	add	r26, r18
     b5c:	b3 1f       	adc	r27, r19
     b5e:	9c 91       	ld	r25, X
     b60:	21 e0       	ldi	r18, 0x01	; 1
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	2c 0f       	add	r18, r28
     b66:	3d 1f       	adc	r19, r29
     b68:	e2 0f       	add	r30, r18
     b6a:	f3 1f       	adc	r31, r19
     b6c:	90 83       	st	Z, r25
	hours = atoi(sbuf);
	if ((hours < 0) || (hours > 23)) {
		printError(ERR_ISO, "check_isotime: invalid hour");
		return(ERROR);
	}
	for (i = 14; i < 16; i++) {
     b6e:	8f 5f       	subi	r24, 0xFF	; 255
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <check_isotime+0x154>
     b72:	8e e0       	ldi	r24, 0x0E	; 14
     b74:	80 31       	cpi	r24, 0x10	; 16
     b76:	60 f3       	brcs	.-40     	; 0xb50 <check_isotime+0x130>
		sbuf[i-14] = isotime[i];
	}
	sbuf[2] = '\0';
     b78:	1b 82       	std	Y+3, r1	; 0x03
	minutes = atoi(sbuf);
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <atoi>
	if ((minutes < 0) || (minutes > 59)) {
     b82:	cc 97       	sbiw	r24, 0x3c	; 60
     b84:	c8 f0       	brcs	.+50     	; 0xbb8 <check_isotime+0x198>
		printError(ERR_ISO, "check_isotime: invalid minutes");
     b86:	67 e7       	ldi	r22, 0x77	; 119
     b88:	7c e9       	ldi	r23, 0x9C	; 156
     b8a:	8b e5       	ldi	r24, 0x5B	; 91
     b8c:	92 e0       	ldi	r25, 0x02	; 2
     b8e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
     b92:	83 e6       	ldi	r24, 0x63	; 99
     b94:	24 c0       	rjmp	.+72     	; 0xbde <check_isotime+0x1be>
	}
	for (i = 17; i < 19; i++) {
		sbuf[i-17] = isotime[i];
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	f9 01       	movw	r30, r18
     b9c:	71 97       	sbiw	r30, 0x11	; 17
     b9e:	d8 01       	movw	r26, r16
     ba0:	a2 0f       	add	r26, r18
     ba2:	b3 1f       	adc	r27, r19
     ba4:	9c 91       	ld	r25, X
     ba6:	21 e0       	ldi	r18, 0x01	; 1
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	2c 0f       	add	r18, r28
     bac:	3d 1f       	adc	r19, r29
     bae:	e2 0f       	add	r30, r18
     bb0:	f3 1f       	adc	r31, r19
     bb2:	90 83       	st	Z, r25
	minutes = atoi(sbuf);
	if ((minutes < 0) || (minutes > 59)) {
		printError(ERR_ISO, "check_isotime: invalid minutes");
		return(ERROR);
	}
	for (i = 17; i < 19; i++) {
     bb4:	8f 5f       	subi	r24, 0xFF	; 255
     bb6:	01 c0       	rjmp	.+2      	; 0xbba <check_isotime+0x19a>
     bb8:	81 e1       	ldi	r24, 0x11	; 17
     bba:	83 31       	cpi	r24, 0x13	; 19
     bbc:	60 f3       	brcs	.-40     	; 0xb96 <check_isotime+0x176>
		sbuf[i-17] = isotime[i];
	}
	sbuf[2] = '\0';
     bbe:	1b 82       	std	Y+3, r1	; 0x03
	seconds = atoi(sbuf);
     bc0:	ce 01       	movw	r24, r28
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <atoi>
	if ((seconds < 0) || (seconds > 59)) {
     bc8:	cc 97       	sbiw	r24, 0x3c	; 60
     bca:	40 f0       	brcs	.+16     	; 0xbdc <check_isotime+0x1bc>
		printError(ERR_ISO, "check_isotime: invalid seconds");
     bcc:	66 e9       	ldi	r22, 0x96	; 150
     bce:	7c e9       	ldi	r23, 0x9C	; 156
     bd0:	8b e5       	ldi	r24, 0x5B	; 91
     bd2:	92 e0       	ldi	r25, 0x02	; 2
     bd4:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
     bd8:	83 e6       	ldi	r24, 0x63	; 99
     bda:	01 c0       	rjmp	.+2      	; 0xbde <check_isotime+0x1be>
	}
	return(NOERROR);
     bdc:	80 e0       	ldi	r24, 0x00	; 0
}
     bde:	2a 96       	adiw	r28, 0x0a	; 10
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	de bf       	out	0x3e, r29	; 62
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	08 95       	ret

00000bee <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	a0 97       	sbiw	r28, 0x20	; 32
     bfc:	cd bf       	out	0x3d, r28	; 61
     bfe:	de bf       	out	0x3e, r29	; 62

	const char format_ISO[] = "20%02x-%02x-%02xT%02x:%02x:%02x";
     c00:	40 e2       	ldi	r20, 0x20	; 32
     c02:	e5 eb       	ldi	r30, 0xB5	; 181
     c04:	fc e9       	ldi	r31, 0x9C	; 156
     c06:	9e 01       	movw	r18, r28
     c08:	2f 5f       	subi	r18, 0xFF	; 255
     c0a:	3f 4f       	sbci	r19, 0xFF	; 255
     c0c:	d9 01       	movw	r26, r18
     c0e:	01 90       	ld	r0, Z+
     c10:	0d 92       	st	X+, r0
     c12:	4a 95       	dec	r20
     c14:	e1 f7       	brne	.-8      	; 0xc0e <convert_ds2iso+0x20>
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     c16:	fb 01       	movw	r30, r22
     c18:	b0 81       	ld	r27, Z
	minutes = (*ds3231time++);
     c1a:	a1 81       	ldd	r26, Z+1	; 0x01
	hours = (*ds3231time++);
     c1c:	12 81       	ldd	r17, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     c1e:	04 81       	ldd	r16, Z+4	; 0x04
	month = (*ds3231time++);
     c20:	55 81       	ldd	r21, Z+5	; 0x05
	year = (*ds3231time);
     c22:	46 81       	ldd	r20, Z+6	; 0x06

	sprintf(isotime, format_ISO, year, month, date, hours, minutes, seconds);
     c24:	1f 92       	push	r1
     c26:	bf 93       	push	r27
     c28:	1f 92       	push	r1
     c2a:	af 93       	push	r26
     c2c:	1f 92       	push	r1
     c2e:	1f 93       	push	r17
     c30:	1f 92       	push	r1
     c32:	0f 93       	push	r16
     c34:	1f 92       	push	r1
     c36:	5f 93       	push	r21
     c38:	1f 92       	push	r1
     c3a:	4f 93       	push	r20
     c3c:	3f 93       	push	r19
     c3e:	2f 93       	push	r18
     c40:	9f 93       	push	r25
     c42:	8f 93       	push	r24
     c44:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>

}
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	a0 96       	adiw	r28, 0x20	; 32
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	0f 91       	pop	r16
     c5a:	08 95       	ret

00000c5c <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     c5c:	dc 01       	movw	r26, r24
     c5e:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     c60:	81 89       	ldd	r24, Z+17	; 0x11
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	c0 97       	sbiw	r24, 0x30	; 48
     c66:	82 95       	swap	r24
     c68:	92 95       	swap	r25
     c6a:	90 7f       	andi	r25, 0xF0	; 240
     c6c:	98 27       	eor	r25, r24
     c6e:	80 7f       	andi	r24, 0xF0	; 240
     c70:	98 27       	eor	r25, r24
     c72:	92 89       	ldd	r25, Z+18	; 0x12
     c74:	90 53       	subi	r25, 0x30	; 48
     c76:	89 2b       	or	r24, r25
     c78:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     c7a:	86 85       	ldd	r24, Z+14	; 0x0e
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	c0 97       	sbiw	r24, 0x30	; 48
     c80:	82 95       	swap	r24
     c82:	92 95       	swap	r25
     c84:	90 7f       	andi	r25, 0xF0	; 240
     c86:	98 27       	eor	r25, r24
     c88:	80 7f       	andi	r24, 0xF0	; 240
     c8a:	98 27       	eor	r25, r24
     c8c:	97 85       	ldd	r25, Z+15	; 0x0f
     c8e:	90 53       	subi	r25, 0x30	; 48
     c90:	89 2b       	or	r24, r25
     c92:	11 96       	adiw	r26, 0x01	; 1
     c94:	8c 93       	st	X, r24
     c96:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     c98:	83 85       	ldd	r24, Z+11	; 0x0b
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	c0 97       	sbiw	r24, 0x30	; 48
     c9e:	82 95       	swap	r24
     ca0:	92 95       	swap	r25
     ca2:	90 7f       	andi	r25, 0xF0	; 240
     ca4:	98 27       	eor	r25, r24
     ca6:	80 7f       	andi	r24, 0xF0	; 240
     ca8:	98 27       	eor	r25, r24
     caa:	94 85       	ldd	r25, Z+12	; 0x0c
     cac:	90 53       	subi	r25, 0x30	; 48
     cae:	89 2b       	or	r24, r25
     cb0:	12 96       	adiw	r26, 0x02	; 2
     cb2:	8c 93       	st	X, r24
     cb4:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	13 96       	adiw	r26, 0x03	; 3
     cba:	8c 93       	st	X, r24
     cbc:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     cbe:	80 85       	ldd	r24, Z+8	; 0x08
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	c0 97       	sbiw	r24, 0x30	; 48
     cc4:	82 95       	swap	r24
     cc6:	92 95       	swap	r25
     cc8:	90 7f       	andi	r25, 0xF0	; 240
     cca:	98 27       	eor	r25, r24
     ccc:	80 7f       	andi	r24, 0xF0	; 240
     cce:	98 27       	eor	r25, r24
     cd0:	91 85       	ldd	r25, Z+9	; 0x09
     cd2:	90 53       	subi	r25, 0x30	; 48
     cd4:	89 2b       	or	r24, r25
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	8c 93       	st	X, r24
     cda:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     cdc:	25 81       	ldd	r18, Z+5	; 0x05
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	20 53       	subi	r18, 0x30	; 48
     ce2:	31 09       	sbc	r19, r1
     ce4:	22 95       	swap	r18
     ce6:	32 95       	swap	r19
     ce8:	30 7f       	andi	r19, 0xF0	; 240
     cea:	32 27       	eor	r19, r18
     cec:	20 7f       	andi	r18, 0xF0	; 240
     cee:	32 27       	eor	r19, r18
     cf0:	86 81       	ldd	r24, Z+6	; 0x06
     cf2:	80 53       	subi	r24, 0x30	; 48
     cf4:	28 2b       	or	r18, r24
     cf6:	15 96       	adiw	r26, 0x05	; 5
     cf8:	2c 93       	st	X, r18
     cfa:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     cfc:	22 81       	ldd	r18, Z+2	; 0x02
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	20 53       	subi	r18, 0x30	; 48
     d02:	31 09       	sbc	r19, r1
     d04:	22 95       	swap	r18
     d06:	32 95       	swap	r19
     d08:	30 7f       	andi	r19, 0xF0	; 240
     d0a:	32 27       	eor	r19, r18
     d0c:	20 7f       	andi	r18, 0xF0	; 240
     d0e:	32 27       	eor	r19, r18
     d10:	83 81       	ldd	r24, Z+3	; 0x03
     d12:	80 53       	subi	r24, 0x30	; 48
     d14:	28 2b       	or	r18, r24
     d16:	16 96       	adiw	r26, 0x06	; 6
     d18:	2c 93       	st	X, r18
     d1a:	08 95       	ret

00000d1c <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	7b 01       	movw	r14, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
     d2e:	c8 2f       	mov	r28, r24
     d30:	83 36       	cpi	r24, 0x63	; 99
     d32:	19 f4       	brne	.+6      	; 0xd3a <read_DS3231+0x1e>
		stop_TWI();
     d34:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(ERROR);
     d38:	26 c0       	rjmp	.+76     	; 0xd86 <read_DS3231+0x6a>
    }  

	if (write_TWI(0x00) == ERROR) {	// Register 00h
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
     d40:	c8 2f       	mov	r28, r24
     d42:	83 36       	cpi	r24, 0x63	; 99
     d44:	19 f4       	brne	.+6      	; 0xd4c <read_DS3231+0x30>
		stop_TWI();
     d46:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(ERROR);
     d4a:	1d c0       	rjmp	.+58     	; 0xd86 <read_DS3231+0x6a>
	}

	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
     d4c:	61 e0       	ldi	r22, 0x01	; 1
     d4e:	88 e6       	ldi	r24, 0x68	; 104
     d50:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
     d54:	c8 2f       	mov	r28, r24
     d56:	83 36       	cpi	r24, 0x63	; 99
     d58:	61 f4       	brne	.+24     	; 0xd72 <read_DS3231+0x56>
		stop_TWI();
     d5a:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(ERROR);
     d5e:	13 c0       	rjmp	.+38     	; 0xd86 <read_DS3231+0x6a>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     d60:	87 01       	movw	r16, r14
     d62:	0c 0f       	add	r16, r28
     d64:	11 1d       	adc	r17, r1
     d66:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <read_TWI>
     d6a:	f8 01       	movw	r30, r16
     d6c:	80 83       	st	Z, r24
	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 6; i++) {
     d6e:	cf 5f       	subi	r28, 0xFF	; 255
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <read_DS3231+0x58>
     d72:	c0 e0       	ldi	r28, 0x00	; 0
     d74:	c6 30       	cpi	r28, 0x06	; 6
     d76:	a0 f3       	brcs	.-24     	; 0xd60 <read_DS3231+0x44>
		ds3231time[i] = read_TWI();
	}

	ds3231time[6] = readlast_TWI();
     d78:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <readlast_TWI>
     d7c:	f7 01       	movw	r30, r14
     d7e:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     d80:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>

	return(NOERROR);
     d84:	c0 e0       	ldi	r28, 0x00	; 0

}
     d86:	8c 2f       	mov	r24, r28
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	ff 90       	pop	r15
     d90:	ef 90       	pop	r14
     d92:	08 95       	ret

00000d94 <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	27 97       	sbiw	r28, 0x07	; 7
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (read_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     daa:	be 01       	movw	r22, r28
     dac:	6f 5f       	subi	r22, 0xFF	; 255
     dae:	7f 4f       	sbci	r23, 0xFF	; 255
     db0:	88 e6       	ldi	r24, 0x68	; 104
     db2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <read_DS3231>
     db6:	18 2f       	mov	r17, r24
     db8:	83 36       	cpi	r24, 0x63	; 99
     dba:	79 f4       	brne	.+30     	; 0xdda <get_time+0x46>
		printError(ERR_GETTIME, "get_time DS3231");
     dbc:	65 ed       	ldi	r22, 0xD5	; 213
     dbe:	7c e9       	ldi	r23, 0x9C	; 156
     dc0:	85 e6       	ldi	r24, 0x65	; 101
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		strcpy(isotime, "DateTime?");
     dc8:	8a e0       	ldi	r24, 0x0A	; 10
     dca:	e5 ee       	ldi	r30, 0xE5	; 229
     dcc:	fc e9       	ldi	r31, 0x9C	; 156
     dce:	d7 01       	movw	r26, r14
     dd0:	01 90       	ld	r0, Z+
     dd2:	0d 92       	st	X+, r0
     dd4:	8a 95       	dec	r24
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <get_time+0x3c>
		return(ERROR);
     dd8:	07 c0       	rjmp	.+14     	; 0xde8 <get_time+0x54>
	}

	convert_ds2iso(isotime, ds3231time);
     dda:	be 01       	movw	r22, r28
     ddc:	6f 5f       	subi	r22, 0xFF	; 255
     dde:	7f 4f       	sbci	r23, 0xFF	; 255
     de0:	c7 01       	movw	r24, r14
     de2:	0e 94 f7 05 	call	0xbee	; 0xbee <convert_ds2iso>
	return(NOERROR);
     de6:	10 e0       	ldi	r17, 0x00	; 0

}
     de8:	81 2f       	mov	r24, r17
     dea:	27 96       	adiw	r28, 0x07	; 7
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	08 95       	ret

00000dfc <write_DS3231>:
	Returns:
		ERROR for TWI start error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	8b 01       	movw	r16, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
     e10:	c8 2f       	mov	r28, r24
     e12:	83 36       	cpi	r24, 0x63	; 99
     e14:	19 f4       	brne	.+6      	; 0xe1c <write_DS3231+0x20>
		stop_TWI();
     e16:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(ERROR);
     e1a:	20 c0       	rjmp	.+64     	; 0xe5c <write_DS3231+0x60>
	}

	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
     e22:	c8 2f       	mov	r28, r24
     e24:	83 36       	cpi	r24, 0x63	; 99
     e26:	a1 f4       	brne	.+40     	; 0xe50 <write_DS3231+0x54>
		stop_TWI();
     e28:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(ERROR);
     e2c:	17 c0       	rjmp	.+46     	; 0xe5c <write_DS3231+0x60>
	}

	for (i = 0; i < 7; i++) {
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     e2e:	78 01       	movw	r14, r16
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	e8 1a       	sub	r14, r24
     e34:	f8 0a       	sbc	r15, r24
     e36:	f8 01       	movw	r30, r16
     e38:	80 81       	ld	r24, Z
     e3a:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
     e3e:	c8 2f       	mov	r28, r24
     e40:	83 36       	cpi	r24, 0x63	; 99
     e42:	19 f4       	brne	.+6      	; 0xe4a <write_DS3231+0x4e>
			stop_TWI();
     e44:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
			return(ERROR);
     e48:	09 c0       	rjmp	.+18     	; 0xe5c <write_DS3231+0x60>
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     e4a:	df 5f       	subi	r29, 0xFF	; 255
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     e4c:	87 01       	movw	r16, r14
     e4e:	01 c0       	rjmp	.+2      	; 0xe52 <write_DS3231+0x56>
     e50:	d0 e0       	ldi	r29, 0x00	; 0
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     e52:	d7 30       	cpi	r29, 0x07	; 7
     e54:	60 f3       	brcs	.-40     	; 0xe2e <write_DS3231+0x32>
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
			stop_TWI();
			return(ERROR);
		}
	}
	stop_TWI();
     e56:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>

	return(NOERROR);
     e5a:	c0 e0       	ldi	r28, 0x00	; 0

}
     e5c:	8c 2f       	mov	r24, r28
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	08 95       	ret

00000e6c <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	27 97       	sbiw	r28, 0x07	; 7
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (check_isotime(isotime) == ERROR) {
     e82:	0e 94 10 05 	call	0xa20	; 0xa20 <check_isotime>
     e86:	18 2f       	mov	r17, r24
     e88:	83 36       	cpi	r24, 0x63	; 99
     e8a:	39 f4       	brne	.+14     	; 0xe9a <put_time+0x2e>
		printError(ERR_ISO, "put_time: check_isotime error");
     e8c:	6f ee       	ldi	r22, 0xEF	; 239
     e8e:	7c e9       	ldi	r23, 0x9C	; 156
     e90:	8b e5       	ldi	r24, 0x5B	; 91
     e92:	92 e0       	ldi	r25, 0x02	; 2
     e94:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
     e98:	16 c0       	rjmp	.+44     	; 0xec6 <put_time+0x5a>
	}
	convert_iso2ds(ds3231time, isotime);
     e9a:	b7 01       	movw	r22, r14
     e9c:	ce 01       	movw	r24, r28
     e9e:	01 96       	adiw	r24, 0x01	; 1
     ea0:	0e 94 2e 06 	call	0xc5c	; 0xc5c <convert_iso2ds>
	if (write_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     ea4:	be 01       	movw	r22, r28
     ea6:	6f 5f       	subi	r22, 0xFF	; 255
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
     eaa:	88 e6       	ldi	r24, 0x68	; 104
     eac:	0e 94 fe 06 	call	0xdfc	; 0xdfc <write_DS3231>
     eb0:	18 2f       	mov	r17, r24
     eb2:	83 36       	cpi	r24, 0x63	; 99
     eb4:	39 f4       	brne	.+14     	; 0xec4 <put_time+0x58>
		printError(ERR_PUTTIME, "put_time: write_DS3231 error");
     eb6:	6d e0       	ldi	r22, 0x0D	; 13
     eb8:	7d e9       	ldi	r23, 0x9D	; 157
     eba:	86 e6       	ldi	r24, 0x66	; 102
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
     ec2:	01 c0       	rjmp	.+2      	; 0xec6 <put_time+0x5a>
	}
	return(NOERROR);
     ec4:	10 e0       	ldi	r17, 0x00	; 0

}
     ec6:	81 2f       	mov	r24, r17
     ec8:	27 96       	adiw	r28, 0x07	; 7
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	08 95       	ret

00000eda <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     eda:	45 e1       	ldi	r20, 0x15	; 21
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	6b e0       	ldi	r22, 0x0B	; 11
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	0e 94 74 2d 	call	0x5ae8	; 0x5ae8 <eeprom_read_block>
     ee6:	08 95       	ret

00000ee8 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     ee8:	4b e0       	ldi	r20, 0x0B	; 11
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	0e 94 74 2d 	call	0x5ae8	; 0x5ae8 <eeprom_read_block>
     ef4:	08 95       	ret

00000ef6 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	65 97       	sbiw	r28, 0x15	; 21
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     f04:	ce 01       	movw	r24, r28
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	0e 94 ca 06 	call	0xd94	; 0xd94 <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     f0c:	45 e1       	ldi	r20, 0x15	; 21
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	6b e0       	ldi	r22, 0x0B	; 11
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	ce 01       	movw	r24, r28
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <eeprom_update_block>

}
     f1c:	65 96       	adiw	r28, 0x15	; 21
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	08 95       	ret

00000f28 <update_VERSION>:

void update_VERSION(void)
{
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	2b 97       	sbiw	r28, 0x0b	; 11
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     f36:	8b e0       	ldi	r24, 0x0B	; 11
     f38:	ea e2       	ldi	r30, 0x2A	; 42
     f3a:	fd e9       	ldi	r31, 0x9D	; 157
     f3c:	de 01       	movw	r26, r28
     f3e:	11 96       	adiw	r26, 0x01	; 1
     f40:	01 90       	ld	r0, Z+
     f42:	0d 92       	st	X+, r0
     f44:	8a 95       	dec	r24
     f46:	e1 f7       	brne	.-8      	; 0xf40 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     f48:	4b e0       	ldi	r20, 0x0B	; 11
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	ce 01       	movw	r24, r28
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <eeprom_update_block>

}
     f58:	2b 96       	adiw	r28, 0x0b	; 11
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	08 95       	ret

00000f64 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     f64:	0e 94 7b 07 	call	0xef6	; 0xef6 <update_BOOTTIME>
	update_VERSION();
     f68:	0e 94 94 07 	call	0xf28	; 0xf28 <update_VERSION>
     f6c:	08 95       	ret

00000f6e <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	c8 50       	subi	r28, 0x08	; 8
     f7c:	d1 40       	sbci	r29, 0x01	; 1
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char errorFormat[] = "ERR,%d,%s";
     f82:	2a e0       	ldi	r18, 0x0A	; 10
     f84:	e5 e3       	ldi	r30, 0x35	; 53
     f86:	fd e9       	ldi	r31, 0x9D	; 157
     f88:	de 01       	movw	r26, r28
     f8a:	a1 50       	subi	r26, 0x01	; 1
     f8c:	bf 4f       	sbci	r27, 0xFF	; 255
     f8e:	01 90       	ld	r0, Z+
     f90:	0d 92       	st	X+, r0
     f92:	2a 95       	dec	r18
     f94:	e1 f7       	brne	.-8      	; 0xf8e <printError+0x20>

	if (!squelchErrors) {
     f96:	20 91 0b 28 	lds	r18, 0x280B	; 0x80280b <squelchErrors>
     f9a:	21 11       	cpse	r18, r1
     f9c:	15 c0       	rjmp	.+42     	; 0xfc8 <printError+0x5a>
		sprintf(strbuf, errorFormat, errorNumber, errorString);
     f9e:	7f 93       	push	r23
     fa0:	6f 93       	push	r22
     fa2:	9f 93       	push	r25
     fa4:	8f 93       	push	r24
     fa6:	ce 01       	movw	r24, r28
     fa8:	81 50       	subi	r24, 0x01	; 1
     faa:	9f 4f       	sbci	r25, 0xFF	; 255
     fac:	9f 93       	push	r25
     fae:	8f 93       	push	r24
     fb0:	8e 01       	movw	r16, r28
     fb2:	0f 5f       	subi	r16, 0xFF	; 255
     fb4:	1f 4f       	sbci	r17, 0xFF	; 255
     fb6:	1f 93       	push	r17
     fb8:	0f 93       	push	r16
     fba:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
		printLine(strbuf);
     fbe:	c8 01       	movw	r24, r16
     fc0:	0e 94 a3 03 	call	0x746	; 0x746 <printLine>
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	de bf       	out	0x3e, r29	; 62
	}

}
     fc8:	c8 5f       	subi	r28, 0xF8	; 248
     fca:	de 4f       	sbci	r29, 0xFE	; 254
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	08 95       	ret

00000fda <read_FRAM>:
	Returns:
		ERROR on start_TWI error (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     fda:	cf 92       	push	r12
     fdc:	df 92       	push	r13
     fde:	ef 92       	push	r14
     fe0:	ff 92       	push	r15
     fe2:	0f 93       	push	r16
     fe4:	1f 93       	push	r17
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	d8 2f       	mov	r29, r24
     fec:	d6 2e       	mov	r13, r22
     fee:	07 2f       	mov	r16, r23
     ff0:	7a 01       	movw	r14, r20
     ff2:	12 2f       	mov	r17, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if (start_TWI(addr, TWIWRITE) == ERROR) {		// TWI start
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
     ffa:	c8 2f       	mov	r28, r24
     ffc:	83 36       	cpi	r24, 0x63	; 99
     ffe:	19 f4       	brne	.+6      	; 0x1006 <read_FRAM+0x2c>
		stop_TWI();
    1000:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(ERROR);
    1004:	2e c0       	rjmp	.+92     	; 0x1062 <read_FRAM+0x88>
	}

	if (write_TWI(memhigh) == ERROR) {			// Send memory address
    1006:	80 2f       	mov	r24, r16
    1008:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
    100c:	c8 2f       	mov	r28, r24
    100e:	83 36       	cpi	r24, 0x63	; 99
    1010:	41 f1       	breq	.+80     	; 0x1062 <read_FRAM+0x88>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {
    1012:	8d 2d       	mov	r24, r13
    1014:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
    1018:	c8 2f       	mov	r28, r24
    101a:	83 36       	cpi	r24, 0x63	; 99
    101c:	11 f1       	breq	.+68     	; 0x1062 <read_FRAM+0x88>
		return(ERROR);
	}

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	8d 2f       	mov	r24, r29
    1022:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
    1026:	c8 2f       	mov	r28, r24
    1028:	83 36       	cpi	r24, 0x63	; 99
    102a:	d9 f0       	breq	.+54     	; 0x1062 <read_FRAM+0x88>
    102c:	c0 e0       	ldi	r28, 0x00	; 0
    102e:	08 c0       	rjmp	.+16     	; 0x1040 <read_FRAM+0x66>
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
    1030:	67 01       	movw	r12, r14
    1032:	cc 0e       	add	r12, r28
    1034:	d1 1c       	adc	r13, r1
    1036:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <read_TWI>
    103a:	f6 01       	movw	r30, r12
    103c:	80 83       	st	Z, r24

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
    103e:	cf 5f       	subi	r28, 0xFF	; 255
    1040:	2c 2f       	mov	r18, r28
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 2f       	mov	r24, r17
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	28 17       	cp	r18, r24
    104c:	39 07       	cpc	r19, r25
    104e:	84 f3       	brlt	.-32     	; 0x1030 <read_FRAM+0x56>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
    1050:	ec 01       	movw	r28, r24
    1052:	ce 0d       	add	r28, r14
    1054:	df 1d       	adc	r29, r15
    1056:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <readlast_TWI>
    105a:	88 83       	st	Y, r24

	stop_TWI();
    105c:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>

	return(NOERROR);
    1060:	c0 e0       	ldi	r28, 0x00	; 0

}
    1062:	8c 2f       	mov	r24, r28
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	df 90       	pop	r13
    1072:	cf 90       	pop	r12
    1074:	08 95       	ret

00001076 <get_SETTIME>:
	Input: None
	Output: The data from FRAM, presumably containing the time
	Returns: ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t get_SETTIME(char *lastsettime)
{
    1076:	ef 92       	push	r14
    1078:	ff 92       	push	r15
    107a:	1f 93       	push	r17
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	2a 97       	sbiw	r28, 0x0a	; 10
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	7c 01       	movw	r14, r24

	const char timeset[] = "Time Set?";
    108c:	8a e0       	ldi	r24, 0x0A	; 10
    108e:	ef e3       	ldi	r30, 0x3F	; 63
    1090:	fd e9       	ldi	r31, 0x9D	; 157
    1092:	de 01       	movw	r26, r28
    1094:	11 96       	adiw	r26, 0x01	; 1
    1096:	01 90       	ld	r0, Z+
    1098:	0d 92       	st	X+, r0
    109a:	8a 95       	dec	r24
    109c:	e1 f7       	brne	.-8      	; 0x1096 <get_SETTIME+0x20>
	if (read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, ISOTIMELEN) == ERROR) {;
    109e:	24 e1       	ldi	r18, 0x14	; 20
    10a0:	a7 01       	movw	r20, r14
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	80 e5       	ldi	r24, 0x50	; 80
    10a8:	0e 94 ed 07 	call	0xfda	; 0xfda <read_FRAM>
    10ac:	18 2f       	mov	r17, r24
    10ae:	83 36       	cpi	r24, 0x63	; 99
    10b0:	39 f4       	brne	.+14     	; 0x10c0 <get_SETTIME+0x4a>
		strcpy(lastsettime, timeset);
    10b2:	be 01       	movw	r22, r28
    10b4:	6f 5f       	subi	r22, 0xFF	; 255
    10b6:	7f 4f       	sbci	r23, 0xFF	; 255
    10b8:	c7 01       	movw	r24, r14
    10ba:	0e 94 ef 27 	call	0x4fde	; 0x4fde <strcpy>
		return(ERROR);
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <get_SETTIME+0x4c>
	}
	return(NOERROR);
    10c0:	10 e0       	ldi	r17, 0x00	; 0
}
    10c2:	81 2f       	mov	r24, r17
    10c4:	2a 96       	adiw	r28, 0x0a	; 10
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	ff 90       	pop	r15
    10d2:	ef 90       	pop	r14
    10d4:	08 95       	ret

000010d6 <write_FRAM>:
	Returns:
		ERROR if start_TWI fails (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
    10d6:	ef 92       	push	r14
    10d8:	ff 92       	push	r15
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	f6 2e       	mov	r15, r22
    10e4:	17 2f       	mov	r17, r23
    10e6:	ea 01       	movw	r28, r20
    10e8:	02 2f       	mov	r16, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if (start_TWI(addr, TWIWRITE) == ERROR) {	// TWI START
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
    10f0:	83 36       	cpi	r24, 0x63	; 99
    10f2:	e1 f0       	breq	.+56     	; 0x112c <write_FRAM+0x56>
		return(ERROR);
	}

	if (write_TWI(memhigh) == ERROR) {			// FRAM address to write
    10f4:	81 2f       	mov	r24, r17
    10f6:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
    10fa:	83 36       	cpi	r24, 0x63	; 99
    10fc:	b9 f0       	breq	.+46     	; 0x112c <write_FRAM+0x56>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
    10fe:	8f 2d       	mov	r24, r15
    1100:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
    1104:	83 36       	cpi	r24, 0x63	; 99
    1106:	91 f0       	breq	.+36     	; 0x112c <write_FRAM+0x56>
    1108:	10 e0       	ldi	r17, 0x00	; 0
    110a:	0b c0       	rjmp	.+22     	; 0x1122 <write_FRAM+0x4c>
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    110c:	7e 01       	movw	r14, r28
    110e:	8f ef       	ldi	r24, 0xFF	; 255
    1110:	e8 1a       	sub	r14, r24
    1112:	f8 0a       	sbc	r15, r24
    1114:	88 81       	ld	r24, Y
    1116:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
    111a:	83 36       	cpi	r24, 0x63	; 99
    111c:	39 f0       	breq	.+14     	; 0x112c <write_FRAM+0x56>
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    111e:	1f 5f       	subi	r17, 0xFF	; 255
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
    1120:	e7 01       	movw	r28, r14
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    1122:	10 17       	cp	r17, r16
    1124:	98 f3       	brcs	.-26     	; 0x110c <write_FRAM+0x36>
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
			return(ERROR);
		}
	}

	stop_TWI();
    1126:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>

	return(NOERROR);
    112a:	80 e0       	ldi	r24, 0x00	; 0

}
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	08 95       	ret

0000113a <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
    113a:	8f 92       	push	r8
    113c:	9f 92       	push	r9
    113e:	af 92       	push	r10
    1140:	bf 92       	push	r11
    1142:	cf 92       	push	r12
    1144:	df 92       	push	r13
    1146:	ef 92       	push	r14
    1148:	ff 92       	push	r15
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	00 d0       	rcall	.+0      	; 0x1154 <get_humidity+0x1a>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <get_humidity+0x1c>
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62

	uint8_t adcpin;
	float voltage, humidity, temperature;

	switch (sensor) {
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	59 f0       	breq	.+22     	; 0x1174 <get_humidity+0x3a>
    115e:	18 f0       	brcs	.+6      	; 0x1166 <get_humidity+0x2c>
    1160:	82 30       	cpi	r24, 0x02	; 2
    1162:	79 f0       	breq	.+30     	; 0x1182 <get_humidity+0x48>
    1164:	15 c0       	rjmp	.+42     	; 0x1190 <get_humidity+0x56>
		case 0:
			temperature = get_temperature(0);
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <get_temperature>
    116c:	6b 01       	movw	r12, r22
    116e:	7c 01       	movw	r14, r24
			adcpin = AIN0;		// production
    1170:	40 e4       	ldi	r20, 0x40	; 64
			break;
    1172:	17 c0       	rjmp	.+46     	; 0x11a2 <get_humidity+0x68>

		case 1:
			temperature = get_temperature(1);
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <get_temperature>
    117a:	6b 01       	movw	r12, r22
    117c:	7c 01       	movw	r14, r24
			adcpin = AIN1;
    117e:	40 e5       	ldi	r20, 0x50	; 80
			break;
    1180:	10 c0       	rjmp	.+32     	; 0x11a2 <get_humidity+0x68>

		case 2:
			temperature = get_temperature(2);
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <get_temperature>
    1188:	6b 01       	movw	r12, r22
    118a:	7c 01       	movw	r14, r24
			adcpin = AIN2;
    118c:	40 e6       	ldi	r20, 0x60	; 96
			break;
    118e:	09 c0       	rjmp	.+18     	; 0x11a2 <get_humidity+0x68>

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
    1190:	0f 2e       	mov	r0, r31
    1192:	c1 2c       	mov	r12, r1
    1194:	d1 2c       	mov	r13, r1
    1196:	f0 ea       	ldi	r31, 0xA0	; 160
    1198:	ef 2e       	mov	r14, r31
    119a:	f1 e4       	ldi	r31, 0x41	; 65
    119c:	ff 2e       	mov	r15, r31
    119e:	f0 2d       	mov	r31, r0
			adcpin = AIN2;
			break;

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
    11a0:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
    11a2:	8e 01       	movw	r16, r28
    11a4:	0f 5f       	subi	r16, 0xFF	; 255
    11a6:	1f 4f       	sbci	r17, 0xFF	; 255
    11a8:	20 e8       	ldi	r18, 0x80	; 128
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	88 e4       	ldi	r24, 0x48	; 72
    11ae:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <read_ADS1115>
    11b2:	83 36       	cpi	r24, 0x63	; 99
    11b4:	79 f1       	breq	.+94     	; 0x1214 <get_humidity+0xda>
		humidity = BADFLOAT;
	}
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 ea       	ldi	r20, 0xA0	; 160
    11bc:	50 e4       	ldi	r21, 0x40	; 64
    11be:	69 81       	ldd	r22, Y+1	; 0x01
    11c0:	7a 81       	ldd	r23, Y+2	; 0x02
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__divsf3>
    11ca:	2a e0       	ldi	r18, 0x0A	; 10
    11cc:	37 ed       	ldi	r19, 0xD7	; 215
    11ce:	43 e2       	ldi	r20, 0x23	; 35
    11d0:	5e e3       	ldi	r21, 0x3E	; 62
    11d2:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__subsf3>
    11d6:	2f e5       	ldi	r18, 0x5F	; 95
    11d8:	39 e2       	ldi	r19, 0x29	; 41
    11da:	4b ec       	ldi	r20, 0xCB	; 203
    11dc:	5b e3       	ldi	r21, 0x3B	; 59
    11de:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__divsf3>
    11e2:	4b 01       	movw	r8, r22
    11e4:	5c 01       	movw	r10, r24
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
    11e6:	29 ec       	ldi	r18, 0xC9	; 201
    11e8:	3e e8       	ldi	r19, 0x8E	; 142
    11ea:	4d e0       	ldi	r20, 0x0D	; 13
    11ec:	5b e3       	ldi	r21, 0x3B	; 59
    11ee:	c7 01       	movw	r24, r14
    11f0:	b6 01       	movw	r22, r12
    11f2:	0e 94 14 22 	call	0x4428	; 0x4428 <__mulsf3>
    11f6:	9b 01       	movw	r18, r22
    11f8:	ac 01       	movw	r20, r24
    11fa:	62 e2       	ldi	r22, 0x22	; 34
    11fc:	7d ef       	ldi	r23, 0xFD	; 253
    11fe:	86 e8       	ldi	r24, 0x86	; 134
    1200:	9f e3       	ldi	r25, 0x3F	; 63
    1202:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__subsf3>
    1206:	9b 01       	movw	r18, r22
    1208:	ac 01       	movw	r20, r24
    120a:	c5 01       	movw	r24, r10
    120c:	b4 01       	movw	r22, r8
    120e:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__divsf3>
    1212:	04 c0       	rjmp	.+8      	; 0x121c <get_humidity+0xe2>
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
		humidity = BADFLOAT;
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	70 e8       	ldi	r23, 0x80	; 128
    1218:	86 e2       	ldi	r24, 0x26	; 38
    121a:	94 ec       	ldi	r25, 0xC4	; 196
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
	}

	return(humidity);

}
    121c:	24 96       	adiw	r28, 0x04	; 4
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	ff 90       	pop	r15
    122c:	ef 90       	pop	r14
    122e:	df 90       	pop	r13
    1230:	cf 90       	pop	r12
    1232:	bf 90       	pop	r11
    1234:	af 90       	pop	r10
    1236:	9f 90       	pop	r9
    1238:	8f 90       	pop	r8
    123a:	08 95       	ret

0000123c <initialize>:
#include "initialize.h"

uint8_t rebootackd;

void initialize(void)
{
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	2b 97       	sbiw	r28, 0x0b	; 11
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	rebootackd = NO;
    124a:	10 92 0c 28 	sts	0x280C, r1	; 0x80280c <rebootackd>
	timerOLED = 0;					// See oled.h
    124e:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerOLED>
    1252:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <timerOLED+0x1>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
    1256:	80 ee       	ldi	r24, 0xE0	; 224
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	80 93 09 28 	sts	0x2809, r24	; 0x802809 <timeoutOLED>
    125e:	90 93 0a 28 	sts	0x280A, r25	; 0x80280a <timeoutOLED+0x1>

	init_PORTS();
    1262:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <init_PORTS>
	init_TWI();
    1266:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <init_TWI>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
    126a:	80 e2       	ldi	r24, 0x20	; 32
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 90 1c 	call	0x3920	; 0x3920 <init_RTC>
	init_MMA8451();	// Accelerometer; needs TWI
    1272:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <init_MMA8451>
	init_OLED();	// Needs TWI
    1276:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <init_OLED>
	init_EEPROM();	// Needs TWI to get boot time from clock
    127a:	0e 94 b2 07 	call	0xf64	; 0xf64 <init_EEPROM>
	init_USART();
    127e:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <init_USART>
	start_TCB0(1);	// 1 ms ticks for TWI & USART timeouts
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <start_TCB0>
	sei();
    128a:	78 94       	sei

	init_MOTORS();	// Needs USART & interrupts on
    128c:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <init_MOTORS>
	get_VERSION(versionstr);
    1290:	ce 01       	movw	r24, r28
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	0e 94 74 07 	call	0xee8	; 0xee8 <get_VERSION>
	writestr_OLED(0,"specMech Version", 1);
    1298:	41 e0       	ldi	r20, 0x01	; 1
    129a:	69 e4       	ldi	r22, 0x49	; 73
    129c:	7d e9       	ldi	r23, 0x9D	; 157
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <writestr_OLED>
	writestr_OLED(0, versionstr, 2);
    12a4:	42 e0       	ldi	r20, 0x02	; 2
    12a6:	be 01       	movw	r22, r28
    12a8:	6f 5f       	subi	r22, 0xFF	; 255
    12aa:	7f 4f       	sbci	r23, 0xFF	; 255
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <writestr_OLED>

}
    12b2:	2b 96       	adiw	r28, 0x0b	; 11
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	08 95       	ret

000012be <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
    12be:	cf 92       	push	r12
    12c0:	df 92       	push	r13
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <read_ionpump+0x12>
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <read_ionpump+0x14>
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	21 f0       	breq	.+8      	; 0x12e2 <read_ionpump+0x24>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
    12da:	82 30       	cpi	r24, 0x02	; 2
    12dc:	c1 f5       	brne	.+112    	; 0x134e <read_ionpump+0x90>
		pins = AIN23;
    12de:	40 e3       	ldi	r20, 0x30	; 48
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <read_ionpump+0x26>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
    12e2:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(BADFLOAT);
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
    12e4:	8e 01       	movw	r16, r28
    12e6:	0f 5f       	subi	r16, 0xFF	; 255
    12e8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ea:	20 e8       	ldi	r18, 0x80	; 128
    12ec:	62 e0       	ldi	r22, 0x02	; 2
    12ee:	89 e4       	ldi	r24, 0x49	; 73
    12f0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <read_ADS1115>
    12f4:	83 36       	cpi	r24, 0x63	; 99
    12f6:	81 f1       	breq	.+96     	; 0x1358 <read_ionpump+0x9a>
		return(BADFLOAT);
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
    12f8:	c9 80       	ldd	r12, Y+1	; 0x01
    12fa:	da 80       	ldd	r13, Y+2	; 0x02
    12fc:	eb 80       	ldd	r14, Y+3	; 0x03
    12fe:	fc 80       	ldd	r15, Y+4	; 0x04
    1300:	2d ec       	ldi	r18, 0xCD	; 205
    1302:	3c ec       	ldi	r19, 0xCC	; 204
    1304:	4c ec       	ldi	r20, 0xCC	; 204
    1306:	5e e3       	ldi	r21, 0x3E	; 62
    1308:	c7 01       	movw	r24, r14
    130a:	b6 01       	movw	r22, r12
    130c:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__cmpsf2>
    1310:	88 23       	and	r24, r24
    1312:	3c f1       	brlt	.+78     	; 0x1362 <read_ionpump+0xa4>
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e0       	ldi	r20, 0x00	; 0
    131a:	50 e4       	ldi	r21, 0x40	; 64
    131c:	c7 01       	movw	r24, r14
    131e:	b6 01       	movw	r22, r12
    1320:	0e 94 0f 22 	call	0x441e	; 0x441e <__gesf2>
    1324:	18 16       	cp	r1, r24
    1326:	14 f1       	brlt	.+68     	; 0x136c <read_ionpump+0xae>
		return(BADFLOAT);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    1328:	29 e7       	ldi	r18, 0x79	; 121
    132a:	39 ee       	ldi	r19, 0xE9	; 233
    132c:	42 e0       	ldi	r20, 0x02	; 2
    132e:	50 e4       	ldi	r21, 0x40	; 64
    1330:	c7 01       	movw	r24, r14
    1332:	b6 01       	movw	r22, r12
    1334:	0e 94 14 22 	call	0x4428	; 0x4428 <__mulsf3>
    1338:	2e e6       	ldi	r18, 0x6E	; 110
    133a:	33 ea       	ldi	r19, 0xA3	; 163
    133c:	4b ed       	ldi	r20, 0xDB	; 219
    133e:	50 e4       	ldi	r21, 0x40	; 64
    1340:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__subsf3>
	return(vacuum);
    1344:	56 2f       	mov	r21, r22
    1346:	47 2f       	mov	r20, r23
    1348:	38 2f       	mov	r19, r24
    134a:	29 2f       	mov	r18, r25
    134c:	13 c0       	rjmp	.+38     	; 0x1374 <read_ionpump+0xb6>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(BADFLOAT);
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	40 e8       	ldi	r20, 0x80	; 128
    1352:	36 e2       	ldi	r19, 0x26	; 38
    1354:	24 ec       	ldi	r18, 0xC4	; 196
    1356:	0e c0       	rjmp	.+28     	; 0x1374 <read_ionpump+0xb6>
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
		return(BADFLOAT);
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	40 e8       	ldi	r20, 0x80	; 128
    135c:	36 e2       	ldi	r19, 0x26	; 38
    135e:	24 ec       	ldi	r18, 0xC4	; 196
    1360:	09 c0       	rjmp	.+18     	; 0x1374 <read_ionpump+0xb6>
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
    1362:	50 e0       	ldi	r21, 0x00	; 0
    1364:	40 e8       	ldi	r20, 0x80	; 128
    1366:	36 e2       	ldi	r19, 0x26	; 38
    1368:	24 ec       	ldi	r18, 0xC4	; 196
    136a:	04 c0       	rjmp	.+8      	; 0x1374 <read_ionpump+0xb6>
	} else if (voltage > 2.0) {
		return(BADFLOAT);
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	40 e8       	ldi	r20, 0x80	; 128
    1370:	36 e2       	ldi	r19, 0x26	; 38
    1372:	24 ec       	ldi	r18, 0xC4	; 196
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
    1374:	65 2f       	mov	r22, r21
    1376:	74 2f       	mov	r23, r20
    1378:	83 2f       	mov	r24, r19
    137a:	92 2f       	mov	r25, r18
    137c:	24 96       	adiw	r28, 0x04	; 4
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	df 90       	pop	r13
    1390:	cf 90       	pop	r12
    1392:	08 95       	ret

00001394 <main>:
void read_PNEUSensors(char*, char*, char*, char*);	//TESTING

int main(void)
{

	firstpass = YES;		// Set to NO in commands.c
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	80 93 15 2a 	sts	0x2A15, r24	; 0x802a15 <firstpass>
	squelchErrors = YES;	// Don't need this?
    139a:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <squelchErrors>
	initialize();
    139e:	0e 94 1e 09 	call	0x123c	; 0x123c <initialize>
	squelchErrors = NO;
    13a2:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <squelchErrors>

	for (;;) {
		if (recv0_buf.done) {
    13a6:	80 91 3e 2c 	lds	r24, 0x2C3E	; 0x802c3e <recv0_buf+0x103>
    13aa:	88 23       	and	r24, r24
    13ac:	21 f0       	breq	.+8      	; 0x13b6 <main+0x22>
			recv0_buf.done = NO;
    13ae:	10 92 3e 2c 	sts	0x2C3E, r1	; 0x802c3e <recv0_buf+0x103>
			commands();
    13b2:	0e 94 82 04 	call	0x904	; 0x904 <commands>
		}
		if (timerOLED > timeoutOLED) {	// Display timeout
    13b6:	20 91 16 2a 	lds	r18, 0x2A16	; 0x802a16 <timerOLED>
    13ba:	30 91 17 2a 	lds	r19, 0x2A17	; 0x802a17 <timerOLED+0x1>
    13be:	80 91 09 28 	lds	r24, 0x2809	; 0x802809 <timeoutOLED>
    13c2:	90 91 0a 28 	lds	r25, 0x280A	; 0x80280a <timeoutOLED+0x1>
    13c6:	82 17       	cp	r24, r18
    13c8:	93 07       	cpc	r25, r19
    13ca:	78 f4       	brcc	.+30     	; 0x13ea <main+0x56>
			squelchErrors = YES;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <squelchErrors>
			clear_OLED(0);
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <clear_OLED>
			clear_OLED(1);
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <clear_OLED>
			timerOLED = 0;
    13de:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerOLED>
    13e2:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <timerOLED+0x1>
			squelchErrors = NO;
    13e6:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <squelchErrors>
		} if ((timerSAVEENCODER > timeoutSAVEENCODER) && rebootackd) {
    13ea:	90 91 36 2a 	lds	r25, 0x2A36	; 0x802a36 <timerSAVEENCODER>
    13ee:	80 91 35 2a 	lds	r24, 0x2A35	; 0x802a35 <timeoutSAVEENCODER>
    13f2:	89 17       	cp	r24, r25
    13f4:	c0 f6       	brcc	.-80     	; 0x13a6 <main+0x12>
    13f6:	80 91 0c 28 	lds	r24, 0x280C	; 0x80280c <rebootackd>
    13fa:	88 23       	and	r24, r24
    13fc:	a1 f2       	breq	.-88     	; 0x13a6 <main+0x12>
			squelchErrors = YES;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	80 93 0b 28 	sts	0x280B, r24	; 0x80280b <squelchErrors>
			put_FRAM_ENCODERS();	// Maybe set a global error variable?
    1404:	0e 94 a3 19 	call	0x3346	; 0x3346 <put_FRAM_ENCODERS>
			timerSAVEENCODER = 0;
    1408:	10 92 36 2a 	sts	0x2A36, r1	; 0x802a36 <timerSAVEENCODER>
			squelchErrors = NO;
    140c:	10 92 0b 28 	sts	0x280B, r1	; 0x80280b <squelchErrors>
    1410:	ca cf       	rjmp	.-108    	; 0x13a6 <main+0x12>

00001412 <read_MCP23008>:
	Returns:
		ERROR if TWI error
		NOERROR Otherwise
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	c8 2f       	mov	r28, r24
    1418:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
    1420:	83 36       	cpi	r24, 0x63	; 99
    1422:	51 f4       	brne	.+20     	; 0x1438 <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 read error");
    1424:	6a e5       	ldi	r22, 0x5A	; 90
    1426:	7d e9       	ldi	r23, 0x9D	; 157
    1428:	82 e9       	ldi	r24, 0x92	; 146
    142a:	91 e0       	ldi	r25, 0x01	; 1
    142c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		stop_TWI();
    1430:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(0xFF);
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	19 c0       	rjmp	.+50     	; 0x146a <read_MCP23008+0x58>
	}
	write_TWI(reg);
    1438:	8d 2f       	mov	r24, r29
    143a:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
	if (start_TWI(addr, TWIREAD) == ERROR) {
    143e:	61 e0       	ldi	r22, 0x01	; 1
    1440:	8c 2f       	mov	r24, r28
    1442:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
    1446:	83 36       	cpi	r24, 0x63	; 99
    1448:	51 f4       	brne	.+20     	; 0x145e <read_MCP23008+0x4c>
		printError(ERR_MCP23008, "MCP23008 read error");
    144a:	6a e5       	ldi	r22, 0x5A	; 90
    144c:	7d e9       	ldi	r23, 0x9D	; 157
    144e:	82 e9       	ldi	r24, 0x92	; 146
    1450:	91 e0       	ldi	r25, 0x01	; 1
    1452:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		stop_TWI();
    1456:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(0xFF);
    145a:	8f ef       	ldi	r24, 0xFF	; 255
    145c:	06 c0       	rjmp	.+12     	; 0x146a <read_MCP23008+0x58>
	}
	value = readlast_TWI();
    145e:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <readlast_TWI>
    1462:	c8 2f       	mov	r28, r24
	stop_TWI();
    1464:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
	return(value);
    1468:	8c 2f       	mov	r24, r28

}
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	08 95       	ret

00001470 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    1470:	1f 93       	push	r17
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	d6 2f       	mov	r29, r22
    1478:	14 2f       	mov	r17, r20

	uint8_t retval;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
    1480:	c8 2f       	mov	r28, r24
    1482:	83 36       	cpi	r24, 0x63	; 99
    1484:	49 f4       	brne	.+18     	; 0x1498 <write_MCP23008+0x28>
		printError(ERR_MCP23008, "MCP23008 write error");
    1486:	6e e6       	ldi	r22, 0x6E	; 110
    1488:	7d e9       	ldi	r23, 0x9D	; 157
    148a:	82 e9       	ldi	r24, 0x92	; 146
    148c:	91 e0       	ldi	r25, 0x01	; 1
    148e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		stop_TWI();
    1492:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(ERROR);
    1496:	15 c0       	rjmp	.+42     	; 0x14c2 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(reg))) {
    1498:	8d 2f       	mov	r24, r29
    149a:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
    149e:	88 23       	and	r24, r24
    14a0:	21 f0       	breq	.+8      	; 0x14aa <write_MCP23008+0x3a>
		stop_TWI();
    14a2:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(ERROR);
    14a6:	c3 e6       	ldi	r28, 0x63	; 99
    14a8:	0c c0       	rjmp	.+24     	; 0x14c2 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(val))) {
    14aa:	81 2f       	mov	r24, r17
    14ac:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
    14b0:	88 23       	and	r24, r24
    14b2:	21 f0       	breq	.+8      	; 0x14bc <write_MCP23008+0x4c>
		stop_TWI();
    14b4:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(ERROR);
    14b8:	c3 e6       	ldi	r28, 0x63	; 99
    14ba:	03 c0       	rjmp	.+6      	; 0x14c2 <write_MCP23008+0x52>
	}
	stop_TWI();
    14bc:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
	return(NOERROR);
    14c0:	c0 e0       	ldi	r28, 0x00	; 0
	
}
    14c2:	8c 2f       	mov	r24, r28
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
    14ca:	08 95       	ret

000014cc <read_MCP9808>:
#include "errors.h"
#include "mcp9808.h"
#include "twi.h"

uint8_t read_MCP9808(float *temperature)
{
    14cc:	8f 92       	push	r8
    14ce:	9f 92       	push	r9
    14d0:	af 92       	push	r10
    14d2:	bf 92       	push	r11
    14d4:	ff 92       	push	r15
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	8c 01       	movw	r16, r24

	uint8_t highbyte, lowbyte, sign;
	float temp;

	if (start_TWI(MCP9808ADDR, TWIWRITE) == ERROR) {
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	88 e1       	ldi	r24, 0x18	; 24
    14e4:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
    14e8:	83 36       	cpi	r24, 0x63	; 99
    14ea:	51 f4       	brne	.+20     	; 0x1500 <read_MCP9808+0x34>
		*temperature = BADFLOAT;
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	50 e8       	ldi	r21, 0x80	; 128
    14f0:	66 e2       	ldi	r22, 0x26	; 38
    14f2:	74 ec       	ldi	r23, 0xC4	; 196
    14f4:	f8 01       	movw	r30, r16
    14f6:	40 83       	st	Z, r20
    14f8:	51 83       	std	Z+1, r21	; 0x01
    14fa:	62 83       	std	Z+2, r22	; 0x02
    14fc:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    14fe:	43 c0       	rjmp	.+134    	; 0x1586 <read_MCP9808+0xba>
	}
	write_TWI(TEMPREGISTER);
    1500:	85 e0       	ldi	r24, 0x05	; 5
    1502:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    1506:	61 e0       	ldi	r22, 0x01	; 1
    1508:	88 e1       	ldi	r24, 0x18	; 24
    150a:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
	highbyte = read_TWI();
    150e:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <read_TWI>
    1512:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    1514:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <readlast_TWI>
    1518:	d8 2f       	mov	r29, r24
	stop_TWI();
    151a:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    151e:	fc 2f       	mov	r31, r28
    1520:	f0 71       	andi	r31, 0x10	; 16
    1522:	ff 2e       	mov	r15, r31
	highbyte &= 0x0F;					// Clear threshold & sign bits
    1524:	6c 2f       	mov	r22, r28
    1526:	6f 70       	andi	r22, 0x0F	; 15
	temp = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__floatunsisf>
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	40 e8       	ldi	r20, 0x80	; 128
    1538:	51 e4       	ldi	r21, 0x41	; 65
    153a:	0e 94 14 22 	call	0x4428	; 0x4428 <__mulsf3>
    153e:	4b 01       	movw	r8, r22
    1540:	5c 01       	movw	r10, r24
    1542:	6d 2f       	mov	r22, r29
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__floatunsisf>
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e8       	ldi	r20, 0x80	; 128
    1554:	5d e3       	ldi	r21, 0x3D	; 61
    1556:	0e 94 14 22 	call	0x4428	; 0x4428 <__mulsf3>
    155a:	9b 01       	movw	r18, r22
    155c:	ac 01       	movw	r20, r24
    155e:	c5 01       	movw	r24, r10
    1560:	b4 01       	movw	r22, r8
    1562:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__addsf3>
	if (sign) {
    1566:	ff 20       	and	r15, r15
    1568:	41 f0       	breq	.+16     	; 0x157a <read_MCP9808+0xae>
		temp = 256.0 - temp;
    156a:	9b 01       	movw	r18, r22
    156c:	ac 01       	movw	r20, r24
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	80 e8       	ldi	r24, 0x80	; 128
    1574:	93 e4       	ldi	r25, 0x43	; 67
    1576:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__subsf3>
	}
	*temperature = temp;
    157a:	f8 01       	movw	r30, r16
    157c:	60 83       	st	Z, r22
    157e:	71 83       	std	Z+1, r23	; 0x01
    1580:	82 83       	std	Z+2, r24	; 0x02
    1582:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    1584:	80 e0       	ldi	r24, 0x00	; 0
}
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	ff 90       	pop	r15
    1590:	bf 90       	pop	r11
    1592:	af 90       	pop	r10
    1594:	9f 90       	pop	r9
    1596:	8f 90       	pop	r8
    1598:	08 95       	ret

0000159a <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    159a:	ef 92       	push	r14
    159c:	ff 92       	push	r15
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	f8 2e       	mov	r15, r24
    15a8:	e6 2e       	mov	r14, r22
    15aa:	ea 01       	movw	r28, r20
    15ac:	02 2f       	mov	r16, r18

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
    15b4:	18 2f       	mov	r17, r24
    15b6:	83 36       	cpi	r24, 0x63	; 99
    15b8:	19 f4       	brne	.+6      	; 0x15c0 <read_MMA8451+0x26>
		stop_TWI();
    15ba:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(ERROR);
    15be:	23 c0       	rjmp	.+70     	; 0x1606 <read_MMA8451+0x6c>
	}
	if (write_TWI(reg) == ERROR) {
    15c0:	8e 2d       	mov	r24, r14
    15c2:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
    15c6:	18 2f       	mov	r17, r24
    15c8:	83 36       	cpi	r24, 0x63	; 99
    15ca:	e9 f0       	breq	.+58     	; 0x1606 <read_MMA8451+0x6c>
		return(ERROR);
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
    15cc:	61 e0       	ldi	r22, 0x01	; 1
    15ce:	8f 2d       	mov	r24, r15
    15d0:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
    15d4:	18 2f       	mov	r17, r24
    15d6:	83 36       	cpi	r24, 0x63	; 99
    15d8:	69 f4       	brne	.+26     	; 0x15f4 <read_MMA8451+0x5a>
		stop_TWI();
    15da:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(ERROR);
    15de:	13 c0       	rjmp	.+38     	; 0x1606 <read_MMA8451+0x6c>
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    15e0:	7e 01       	movw	r14, r28
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	e8 1a       	sub	r14, r24
    15e6:	f8 0a       	sbc	r15, r24
    15e8:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <read_TWI>
    15ec:	88 83       	st	Y, r24
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    15ee:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    15f0:	e7 01       	movw	r28, r14
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <read_MMA8451+0x5c>
    15f4:	11 e0       	ldi	r17, 0x01	; 1
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    15f6:	10 17       	cp	r17, r16
    15f8:	98 f3       	brcs	.-26     	; 0x15e0 <read_MMA8451+0x46>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    15fa:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <readlast_TWI>
    15fe:	88 83       	st	Y, r24
	stop_TWI();
    1600:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
	return(NOERROR);
    1604:	10 e0       	ldi	r17, 0x00	; 0

}
    1606:	81 2f       	mov	r24, r17
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	ff 90       	pop	r15
    1612:	ef 90       	pop	r14
    1614:	08 95       	ret

00001616 <get_orientation>:
uint8_t get_orientation(float *x, float *y, float *z)
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
uint8_t get_orientation(float *x, float *y, float *z)
{
    1616:	cf 92       	push	r12
    1618:	df 92       	push	r13
    161a:	ef 92       	push	r14
    161c:	ff 92       	push	r15
    161e:	0f 93       	push	r16
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	26 97       	sbiw	r28, 0x06	; 6
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	6c 01       	movw	r12, r24
    1632:	7b 01       	movw	r14, r22
    1634:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = BADFLOAT;
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	90 e8       	ldi	r25, 0x80	; 128
    163a:	a6 e2       	ldi	r26, 0x26	; 38
    163c:	b4 ec       	ldi	r27, 0xC4	; 196
    163e:	fa 01       	movw	r30, r20
    1640:	80 83       	st	Z, r24
    1642:	91 83       	std	Z+1, r25	; 0x01
    1644:	a2 83       	std	Z+2, r26	; 0x02
    1646:	b3 83       	std	Z+3, r27	; 0x03
    1648:	fb 01       	movw	r30, r22
    164a:	80 83       	st	Z, r24
    164c:	91 83       	std	Z+1, r25	; 0x01
    164e:	a2 83       	std	Z+2, r26	; 0x02
    1650:	b3 83       	std	Z+3, r27	; 0x03
    1652:	f6 01       	movw	r30, r12
    1654:	80 83       	st	Z, r24
    1656:	91 83       	std	Z+1, r25	; 0x01
    1658:	a2 83       	std	Z+2, r26	; 0x02
    165a:	b3 83       	std	Z+3, r27	; 0x03

	if (read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6) == ERROR) {
    165c:	26 e0       	ldi	r18, 0x06	; 6
    165e:	ae 01       	movw	r20, r28
    1660:	4f 5f       	subi	r20, 0xFF	; 255
    1662:	5f 4f       	sbci	r21, 0xFF	; 255
    1664:	61 e0       	ldi	r22, 0x01	; 1
    1666:	8d e1       	ldi	r24, 0x1D	; 29
    1668:	0e 94 cd 0a 	call	0x159a	; 0x159a <read_MMA8451>
    166c:	83 36       	cpi	r24, 0x63	; 99
    166e:	09 f4       	brne	.+2      	; 0x1672 <get_orientation+0x5c>
    1670:	64 c0       	rjmp	.+200    	; 0x173a <get_orientation+0x124>
		return(ERROR);
	}

	ix = datain[0];
    1672:	69 81       	ldd	r22, Y+1	; 0x01
    1674:	70 e0       	ldi	r23, 0x00	; 0
	ix <<= 8;
    1676:	76 2f       	mov	r23, r22
    1678:	66 27       	eor	r22, r22
	ix |= datain[1];
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	68 2b       	or	r22, r24
	ix >>= 2;
    167e:	75 95       	asr	r23
    1680:	67 95       	ror	r22
    1682:	75 95       	asr	r23
    1684:	67 95       	ror	r22
	*x = 980.6 * ((float) ix/4096.0);
    1686:	07 2e       	mov	r0, r23
    1688:	00 0c       	add	r0, r0
    168a:	88 0b       	sbc	r24, r24
    168c:	99 0b       	sbc	r25, r25
    168e:	0e 94 5f 21 	call	0x42be	; 0x42be <__floatsisf>
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e8       	ldi	r20, 0x80	; 128
    1698:	59 e3       	ldi	r21, 0x39	; 57
    169a:	0e 94 14 22 	call	0x4428	; 0x4428 <__mulsf3>
    169e:	26 e6       	ldi	r18, 0x66	; 102
    16a0:	36 e2       	ldi	r19, 0x26	; 38
    16a2:	45 e7       	ldi	r20, 0x75	; 117
    16a4:	54 e4       	ldi	r21, 0x44	; 68
    16a6:	0e 94 14 22 	call	0x4428	; 0x4428 <__mulsf3>
    16aa:	f6 01       	movw	r30, r12
    16ac:	60 83       	st	Z, r22
    16ae:	71 83       	std	Z+1, r23	; 0x01
    16b0:	82 83       	std	Z+2, r24	; 0x02
    16b2:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    16b4:	6b 81       	ldd	r22, Y+3	; 0x03
    16b6:	70 e0       	ldi	r23, 0x00	; 0
	iy <<= 8;
    16b8:	76 2f       	mov	r23, r22
    16ba:	66 27       	eor	r22, r22
	iy |= datain[3];
    16bc:	8c 81       	ldd	r24, Y+4	; 0x04
    16be:	68 2b       	or	r22, r24
	iy >>= 2;
    16c0:	75 95       	asr	r23
    16c2:	67 95       	ror	r22
    16c4:	75 95       	asr	r23
    16c6:	67 95       	ror	r22
	*y = 980.6 * ((float) iy/4096.0);
    16c8:	07 2e       	mov	r0, r23
    16ca:	00 0c       	add	r0, r0
    16cc:	88 0b       	sbc	r24, r24
    16ce:	99 0b       	sbc	r25, r25
    16d0:	0e 94 5f 21 	call	0x42be	; 0x42be <__floatsisf>
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e8       	ldi	r20, 0x80	; 128
    16da:	59 e3       	ldi	r21, 0x39	; 57
    16dc:	0e 94 14 22 	call	0x4428	; 0x4428 <__mulsf3>
    16e0:	26 e6       	ldi	r18, 0x66	; 102
    16e2:	36 e2       	ldi	r19, 0x26	; 38
    16e4:	45 e7       	ldi	r20, 0x75	; 117
    16e6:	54 e4       	ldi	r21, 0x44	; 68
    16e8:	0e 94 14 22 	call	0x4428	; 0x4428 <__mulsf3>
    16ec:	f7 01       	movw	r30, r14
    16ee:	60 83       	st	Z, r22
    16f0:	71 83       	std	Z+1, r23	; 0x01
    16f2:	82 83       	std	Z+2, r24	; 0x02
    16f4:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    16f6:	6d 81       	ldd	r22, Y+5	; 0x05
    16f8:	70 e0       	ldi	r23, 0x00	; 0
	iz <<= 8;
    16fa:	76 2f       	mov	r23, r22
    16fc:	66 27       	eor	r22, r22
	iz |= datain[5];
    16fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1700:	68 2b       	or	r22, r24
	iz >>= 2;
    1702:	75 95       	asr	r23
    1704:	67 95       	ror	r22
    1706:	75 95       	asr	r23
    1708:	67 95       	ror	r22
	*z = 980.6 * ((float) iz/4096.0);
    170a:	07 2e       	mov	r0, r23
    170c:	00 0c       	add	r0, r0
    170e:	88 0b       	sbc	r24, r24
    1710:	99 0b       	sbc	r25, r25
    1712:	0e 94 5f 21 	call	0x42be	; 0x42be <__floatsisf>
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e8       	ldi	r20, 0x80	; 128
    171c:	59 e3       	ldi	r21, 0x39	; 57
    171e:	0e 94 14 22 	call	0x4428	; 0x4428 <__mulsf3>
    1722:	26 e6       	ldi	r18, 0x66	; 102
    1724:	36 e2       	ldi	r19, 0x26	; 38
    1726:	45 e7       	ldi	r20, 0x75	; 117
    1728:	54 e4       	ldi	r21, 0x44	; 68
    172a:	0e 94 14 22 	call	0x4428	; 0x4428 <__mulsf3>
    172e:	f8 01       	movw	r30, r16
    1730:	60 83       	st	Z, r22
    1732:	71 83       	std	Z+1, r23	; 0x01
    1734:	82 83       	std	Z+2, r24	; 0x02
    1736:	93 83       	std	Z+3, r25	; 0x03

	return(0);
    1738:	80 e0       	ldi	r24, 0x00	; 0

}
    173a:	26 96       	adiw	r28, 0x06	; 6
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	1f 91       	pop	r17
    1746:	0f 91       	pop	r16
    1748:	ff 90       	pop	r15
    174a:	ef 90       	pop	r14
    174c:	df 90       	pop	r13
    174e:	cf 90       	pop	r12
    1750:	08 95       	ret

00001752 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	d6 2f       	mov	r29, r22
    175a:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
    1762:	c8 2f       	mov	r28, r24
    1764:	88 23       	and	r24, r24
    1766:	21 f0       	breq	.+8      	; 0x1770 <write_MMA8451+0x1e>
		stop_TWI();
    1768:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(retval);
    176c:	8c 2f       	mov	r24, r28
    176e:	17 c0       	rjmp	.+46     	; 0x179e <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1770:	8d 2f       	mov	r24, r29
    1772:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
    1776:	c8 2f       	mov	r28, r24
    1778:	88 23       	and	r24, r24
    177a:	21 f0       	breq	.+8      	; 0x1784 <write_MMA8451+0x32>
		stop_TWI();
    177c:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(retval);
    1780:	8c 2f       	mov	r24, r28
    1782:	0d c0       	rjmp	.+26     	; 0x179e <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1784:	81 2f       	mov	r24, r17
    1786:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
    178a:	c8 2f       	mov	r28, r24
    178c:	88 23       	and	r24, r24
    178e:	21 f0       	breq	.+8      	; 0x1798 <write_MMA8451+0x46>
		stop_TWI();
    1790:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
		return(retval);
    1794:	8c 2f       	mov	r24, r28
    1796:	03 c0       	rjmp	.+6      	; 0x179e <write_MMA8451+0x4c>
	}
	stop_TWI();
    1798:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>
	return(0);
    179c:	80 e0       	ldi	r24, 0x00	; 0
	
}
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	1f 91       	pop	r17
    17a4:	08 95       	ret

000017a6 <init_MMA8451>:
	sampling frequency (1.56 Hz), a low cutoff frequency on the high pass
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/
uint8_t init_MMA8451(void)
{
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	1f 92       	push	r1
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    17b0:	40 e4       	ldi	r20, 0x40	; 64
    17b2:	6b e2       	ldi	r22, 0x2B	; 43
    17b4:	8d e1       	ldi	r24, 0x1D	; 29
    17b6:	0e 94 a9 0b 	call	0x1752	; 0x1752 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    17ba:	21 e0       	ldi	r18, 0x01	; 1
    17bc:	ae 01       	movw	r20, r28
    17be:	4f 5f       	subi	r20, 0xFF	; 255
    17c0:	5f 4f       	sbci	r21, 0xFF	; 255
    17c2:	6b e2       	ldi	r22, 0x2B	; 43
    17c4:	8d e1       	ldi	r24, 0x1D	; 29
    17c6:	0e 94 cd 0a 	call	0x159a	; 0x159a <read_MMA8451>
	while (retval & 0x40) {
    17ca:	08 c0       	rjmp	.+16     	; 0x17dc <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    17cc:	21 e0       	ldi	r18, 0x01	; 1
    17ce:	ae 01       	movw	r20, r28
    17d0:	4f 5f       	subi	r20, 0xFF	; 255
    17d2:	5f 4f       	sbci	r21, 0xFF	; 255
    17d4:	6b e2       	ldi	r22, 0x2B	; 43
    17d6:	8d e1       	ldi	r24, 0x1D	; 29
    17d8:	0e 94 cd 0a 	call	0x159a	; 0x159a <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	86 fd       	sbrc	r24, 6
    17e0:	f5 cf       	rjmp	.-22     	; 0x17cc <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    17e2:	40 ec       	ldi	r20, 0xC0	; 192
    17e4:	6f e0       	ldi	r22, 0x0F	; 15
    17e6:	8d e1       	ldi	r24, 0x1D	; 29
    17e8:	0e 94 a9 0b 	call	0x1752	; 0x1752 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    17ec:	42 e0       	ldi	r20, 0x02	; 2
    17ee:	6b e2       	ldi	r22, 0x2B	; 43
    17f0:	8d e1       	ldi	r24, 0x1D	; 29
    17f2:	0e 94 a9 0b 	call	0x1752	; 0x1752 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    17f6:	4d e3       	ldi	r20, 0x3D	; 61
    17f8:	6a e2       	ldi	r22, 0x2A	; 42
    17fa:	8d e1       	ldi	r24, 0x1D	; 29
    17fc:	0e 94 a9 0b 	call	0x1752	; 0x1752 <write_MMA8451>

	return(retval);

}
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	0f 90       	pop	r0
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	08 95       	ret

0000180a <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum and \r\n to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    180a:	ef 92       	push	r14
    180c:	ff 92       	push	r15
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	2e 97       	sbiw	r28, 0x0e	; 14
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    1822:	88 e0       	ldi	r24, 0x08	; 8
    1824:	e3 e8       	ldi	r30, 0x83	; 131
    1826:	fd e9       	ldi	r31, 0x9D	; 157
    1828:	de 01       	movw	r26, r28
    182a:	11 96       	adiw	r26, 0x01	; 1
    182c:	01 90       	ld	r0, Z+
    182e:	0d 92       	st	X+, r0
    1830:	8a 95       	dec	r24
    1832:	e1 f7       	brne	.-8      	; 0x182c <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    1834:	f8 01       	movw	r30, r16
    1836:	01 90       	ld	r0, Z+
    1838:	00 20       	and	r0, r0
    183a:	e9 f7       	brne	.-6      	; 0x1836 <checksum_NMEA+0x2c>
    183c:	31 97       	sbiw	r30, 0x01	; 1
    183e:	3e 2f       	mov	r19, r30
    1840:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    1842:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	06 c0       	rjmp	.+12     	; 0x1854 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    1848:	f8 01       	movw	r30, r16
    184a:	e8 0f       	add	r30, r24
    184c:	f1 1d       	adc	r31, r1
    184e:	20 81       	ld	r18, Z
    1850:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1852:	8f 5f       	subi	r24, 0xFF	; 255
    1854:	83 17       	cp	r24, r19
    1856:	c0 f3       	brcs	.-16     	; 0x1848 <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1858:	1f 92       	push	r1
    185a:	9f 93       	push	r25
    185c:	ce 01       	movw	r24, r28
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	9f 93       	push	r25
    1862:	8f 93       	push	r24
    1864:	7e 01       	movw	r14, r28
    1866:	89 e0       	ldi	r24, 0x09	; 9
    1868:	e8 0e       	add	r14, r24
    186a:	f1 1c       	adc	r15, r1
    186c:	ff 92       	push	r15
    186e:	ef 92       	push	r14
    1870:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
	strcat(str, chksum);
    1874:	b7 01       	movw	r22, r14
    1876:	c8 01       	movw	r24, r16
    1878:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <strcat>

}
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	2e 96       	adiw	r28, 0x0e	; 14
    188a:	cd bf       	out	0x3d, r28	; 61
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	1f 91       	pop	r17
    1894:	0f 91       	pop	r16
    1896:	ff 90       	pop	r15
    1898:	ef 90       	pop	r14
    189a:	08 95       	ret

0000189c <reset_OLED>:
void reset_OLED(void)
	Pulls the OLED display reset line low for 1 ms. This seems to be needed.
------------------------------------------------------------------------------*/
void reset_OLED(void)
{
	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    189c:	e0 e6       	ldi	r30, 0x60	; 96
    189e:	f4 e0       	ldi	r31, 0x04	; 4
    18a0:	80 e4       	ldi	r24, 0x40	; 64
    18a2:	86 83       	std	Z+6, r24	; 0x06
	PORTD.DIRSET = PIN6_bm;
    18a4:	81 83       	std	Z+1, r24	; 0x01
    18a6:	a1 e4       	ldi	r26, 0x41	; 65
    18a8:	b3 e0       	ldi	r27, 0x03	; 3
    18aa:	11 97       	sbiw	r26, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <reset_OLED+0xe>
    18ae:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    18b0:	85 83       	std	Z+5, r24	; 0x05
    18b2:	08 95       	ret

000018b4 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	d6 2f       	mov	r29, r22
    18ba:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    18bc:	60 e0       	ldi	r22, 0x00	; 0
    18be:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <start_TWI>
	write_TWI(type);
    18c2:	8d 2f       	mov	r24, r29
    18c4:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
	write_TWI(byteToSend);
    18c8:	8c 2f       	mov	r24, r28
    18ca:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <write_TWI>
	stop_TWI();
    18ce:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <stop_TWI>

}
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	08 95       	ret

000018d8 <init_OLEDDISPLAY>:
	Initialize a Newhaven NHD-0216AW-1B3 OLED display. This is taken straight
	from https://github.com/NewhavenDisplay/NHD_US2066. The manual is not easy
	to understand but this seems to work.
------------------------------------------------------------------------------*/
void init_OLEDDISPLAY(uint8_t displaynumber)
{
    18d8:	cf 93       	push	r28

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
    18da:	88 23       	and	r24, r24
    18dc:	29 f0       	breq	.+10     	; 0x18e8 <init_OLEDDISPLAY+0x10>
		twiaddr = OLEDADDR0;		
	} else if (displaynumber == 1) {	// Left-side display
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	09 f0       	breq	.+2      	; 0x18e4 <init_OLEDDISPLAY+0xc>
    18e2:	9e c0       	rjmp	.+316    	; 0x1a20 <init_OLEDDISPLAY+0x148>
		twiaddr = OLEDADDR1;
    18e4:	cd e3       	ldi	r28, 0x3D	; 61
    18e6:	01 c0       	rjmp	.+2      	; 0x18ea <init_OLEDDISPLAY+0x12>
{

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
		twiaddr = OLEDADDR0;		
    18e8:	cc e3       	ldi	r28, 0x3C	; 60
		twiaddr = OLEDADDR1;
	} else {
		return;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    18ea:	4a e2       	ldi	r20, 0x2A	; 42
    18ec:	60 e0       	ldi	r22, 0x00	; 0
    18ee:	8c 2f       	mov	r24, r28
    18f0:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    18f4:	41 e7       	ldi	r20, 0x71	; 113
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	8c 2f       	mov	r24, r28
    18fa:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    18fe:	4c e5       	ldi	r20, 0x5C	; 92
    1900:	60 e4       	ldi	r22, 0x40	; 64
    1902:	8c 2f       	mov	r24, r28
    1904:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1908:	48 e2       	ldi	r20, 0x28	; 40
    190a:	60 e0       	ldi	r22, 0x00	; 0
    190c:	8c 2f       	mov	r24, r28
    190e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    1912:	48 e0       	ldi	r20, 0x08	; 8
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	8c 2f       	mov	r24, r28
    1918:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    191c:	4a e2       	ldi	r20, 0x2A	; 42
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	8c 2f       	mov	r24, r28
    1922:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1926:	49 e7       	ldi	r20, 0x79	; 121
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	8c 2f       	mov	r24, r28
    192c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    1930:	45 ed       	ldi	r20, 0xD5	; 213
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	8c 2f       	mov	r24, r28
    1936:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    193a:	40 e7       	ldi	r20, 0x70	; 112
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	8c 2f       	mov	r24, r28
    1940:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1944:	48 e7       	ldi	r20, 0x78	; 120
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	8c 2f       	mov	r24, r28
    194a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    194e:	48 e0       	ldi	r20, 0x08	; 8
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	8c 2f       	mov	r24, r28
    1954:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1958:	46 e0       	ldi	r20, 0x06	; 6
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	8c 2f       	mov	r24, r28
    195e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1962:	42 e7       	ldi	r20, 0x72	; 114
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	8c 2f       	mov	r24, r28
    1968:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    196c:	40 e0       	ldi	r20, 0x00	; 0
    196e:	60 e4       	ldi	r22, 0x40	; 64
    1970:	8c 2f       	mov	r24, r28
    1972:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1976:	4a e2       	ldi	r20, 0x2A	; 42
    1978:	60 e0       	ldi	r22, 0x00	; 0
    197a:	8c 2f       	mov	r24, r28
    197c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1980:	49 e7       	ldi	r20, 0x79	; 121
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	8c 2f       	mov	r24, r28
    1986:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    198a:	4a ed       	ldi	r20, 0xDA	; 218
    198c:	60 e0       	ldi	r22, 0x00	; 0
    198e:	8c 2f       	mov	r24, r28
    1990:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	60 e0       	ldi	r22, 0x00	; 0
    1998:	8c 2f       	mov	r24, r28
    199a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    199e:	4c ed       	ldi	r20, 0xDC	; 220
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	8c 2f       	mov	r24, r28
    19a4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	8c 2f       	mov	r24, r28
    19ae:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    19b2:	41 e8       	ldi	r20, 0x81	; 129
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	8c 2f       	mov	r24, r28
    19b8:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    19bc:	4f e7       	ldi	r20, 0x7F	; 127
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	8c 2f       	mov	r24, r28
    19c2:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    19c6:	49 ed       	ldi	r20, 0xD9	; 217
    19c8:	60 e0       	ldi	r22, 0x00	; 0
    19ca:	8c 2f       	mov	r24, r28
    19cc:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    19d0:	41 ef       	ldi	r20, 0xF1	; 241
    19d2:	60 e0       	ldi	r22, 0x00	; 0
    19d4:	8c 2f       	mov	r24, r28
    19d6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    19da:	4b ed       	ldi	r20, 0xDB	; 219
    19dc:	60 e0       	ldi	r22, 0x00	; 0
    19de:	8c 2f       	mov	r24, r28
    19e0:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    19e4:	40 e4       	ldi	r20, 0x40	; 64
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	8c 2f       	mov	r24, r28
    19ea:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    19ee:	48 e7       	ldi	r20, 0x78	; 120
    19f0:	60 e0       	ldi	r22, 0x00	; 0
    19f2:	8c 2f       	mov	r24, r28
    19f4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    19f8:	48 e2       	ldi	r20, 0x28	; 40
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	8c 2f       	mov	r24, r28
    19fe:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    1a02:	41 e0       	ldi	r20, 0x01	; 1
    1a04:	60 e0       	ldi	r22, 0x00	; 0
    1a06:	8c 2f       	mov	r24, r28
    1a08:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    1a0c:	40 e8       	ldi	r20, 0x80	; 128
    1a0e:	60 e0       	ldi	r22, 0x00	; 0
    1a10:	8c 2f       	mov	r24, r28
    1a12:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    1a16:	4c e0       	ldi	r20, 0x0C	; 12
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	8c 2f       	mov	r24, r28
    1a1c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>

}
    1a20:	cf 91       	pop	r28
    1a22:	08 95       	ret

00001a24 <init_OLED>:
	Set up the two OLED displays
------------------------------------------------------------------------------*/
void init_OLED(void)
{

	reset_OLED();				// Need to start with a reset
    1a24:	0e 94 4e 0c 	call	0x189c	; 0x189c <reset_OLED>
	init_OLEDDISPLAY(0);
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <init_OLEDDISPLAY>
	init_OLEDDISPLAY(1);
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <init_OLEDDISPLAY>
    1a34:	2a e6       	ldi	r18, 0x6A	; 106
    1a36:	84 e0       	ldi	r24, 0x04	; 4
    1a38:	91 e0       	ldi	r25, 0x01	; 1
    1a3a:	21 50       	subi	r18, 0x01	; 1
    1a3c:	80 40       	sbci	r24, 0x00	; 0
    1a3e:	90 40       	sbci	r25, 0x00	; 0
    1a40:	e1 f7       	brne	.-8      	; 0x1a3a <init_OLED+0x16>
    1a42:	00 c0       	rjmp	.+0      	; 0x1a44 <init_OLED+0x20>
    1a44:	08 95       	ret

00001a46 <writestr_OLED>:
	
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.
------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1a46:	ef 92       	push	r14
    1a48:	ff 92       	push	r15
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	e2 97       	sbiw	r28, 0x32	; 50
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    1a5e:	91 e1       	ldi	r25, 0x11	; 17
    1a60:	eb e8       	ldi	r30, 0x8B	; 139
    1a62:	fd e9       	ldi	r31, 0x9D	; 157
    1a64:	de 01       	movw	r26, r28
    1a66:	92 96       	adiw	r26, 0x22	; 34
    1a68:	01 90       	ld	r0, Z+
    1a6a:	0d 92       	st	X+, r0
    1a6c:	9a 95       	dec	r25
    1a6e:	e1 f7       	brne	.-8      	; 0x1a68 <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1a70:	81 11       	cpse	r24, r1
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1a74:	0c e3       	ldi	r16, 0x3C	; 60
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1a78:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	01 96       	adiw	r24, 0x01	; 1
    1a7e:	7c 01       	movw	r14, r24
    1a80:	0e 94 ef 27 	call	0x4fde	; 0x4fde <strcpy>
	if (strlen(strbuf) > 16) {
    1a84:	f7 01       	movw	r30, r14
    1a86:	01 90       	ld	r0, Z+
    1a88:	00 20       	and	r0, r0
    1a8a:	e9 f7       	brne	.-6      	; 0x1a86 <writestr_OLED+0x40>
    1a8c:	31 97       	sbiw	r30, 0x01	; 1
    1a8e:	ee 19       	sub	r30, r14
    1a90:	ff 09       	sbc	r31, r15
    1a92:	71 97       	sbiw	r30, 0x11	; 17
    1a94:	08 f0       	brcs	.+2      	; 0x1a98 <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1a96:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1a98:	be 01       	movw	r22, r28
    1a9a:	6e 5d       	subi	r22, 0xDE	; 222
    1a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <strcat>

	if (lineno == 1) {
    1aa6:	11 30       	cpi	r17, 0x01	; 1
    1aa8:	39 f4       	brne	.+14     	; 0x1ab8 <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    1aaa:	40 e8       	ldi	r20, 0x80	; 128
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	80 2f       	mov	r24, r16
    1ab0:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1ab4:	10 e0       	ldi	r17, 0x00	; 0
    1ab6:	12 c0       	rjmp	.+36     	; 0x1adc <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1ab8:	40 ec       	ldi	r20, 0xC0	; 192
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	80 2f       	mov	r24, r16
    1abe:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>
    1ac2:	f8 cf       	rjmp	.-16     	; 0x1ab4 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1ac4:	e1 e0       	ldi	r30, 0x01	; 1
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	ec 0f       	add	r30, r28
    1aca:	fd 1f       	adc	r31, r29
    1acc:	e1 0f       	add	r30, r17
    1ace:	f1 1d       	adc	r31, r1
    1ad0:	40 81       	ld	r20, Z
    1ad2:	60 e4       	ldi	r22, 0x40	; 64
    1ad4:	80 2f       	mov	r24, r16
    1ad6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    1ada:	1f 5f       	subi	r17, 0xFF	; 255
    1adc:	10 31       	cpi	r17, 0x10	; 16
    1ade:	90 f3       	brcs	.-28     	; 0x1ac4 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	80 93 16 2a 	sts	0x2A16, r24	; 0x802a16 <timerOLED>
    1ae8:	90 93 17 2a 	sts	0x2A17, r25	; 0x802a17 <timerOLED+0x1>

}
    1aec:	e2 96       	adiw	r28, 0x32	; 50
    1aee:	cd bf       	out	0x3d, r28	; 61
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	1f 91       	pop	r17
    1af8:	0f 91       	pop	r16
    1afa:	ff 90       	pop	r15
    1afc:	ef 90       	pop	r14
    1afe:	08 95       	ret

00001b00 <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    1b00:	1f 93       	push	r17
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	1f 92       	push	r1
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	18 2f       	mov	r17, r24

	char nullstr[] = "";
    1b0e:	19 82       	std	Y+1, r1	; 0x01
	writestr_OLED(displaynumber, nullstr, 1);
    1b10:	41 e0       	ldi	r20, 0x01	; 1
    1b12:	be 01       	movw	r22, r28
    1b14:	6f 5f       	subi	r22, 0xFF	; 255
    1b16:	7f 4f       	sbci	r23, 0xFF	; 255
    1b18:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
    1b1c:	42 e0       	ldi	r20, 0x02	; 2
    1b1e:	be 01       	movw	r22, r28
    1b20:	6f 5f       	subi	r22, 0xFF	; 255
    1b22:	7f 4f       	sbci	r23, 0xFF	; 255
    1b24:	81 2f       	mov	r24, r17
    1b26:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <writestr_OLED>
	timerOLED = 0;
    1b2a:	10 92 16 2a 	sts	0x2A16, r1	; 0x802a16 <timerOLED>
    1b2e:	10 92 17 2a 	sts	0x2A17, r1	; 0x802a17 <timerOLED+0x1>

}
    1b32:	0f 90       	pop	r0
    1b34:	df 91       	pop	r29
    1b36:	cf 91       	pop	r28
    1b38:	1f 91       	pop	r17
    1b3a:	08 95       	ret

00001b3c <read_PNEUSensors>:
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
{
    1b3c:	cf 92       	push	r12
    1b3e:	df 92       	push	r13
    1b40:	ef 92       	push	r14
    1b42:	ff 92       	push	r15
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	6c 01       	movw	r12, r24
    1b4e:	8b 01       	movw	r16, r22
    1b50:	7a 01       	movw	r14, r20
    1b52:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);	// NEEDS ERRORCHECK
    1b54:	69 e0       	ldi	r22, 0x09	; 9
    1b56:	81 e2       	ldi	r24, 0x21	; 33
    1b58:	0e 94 09 0a 	call	0x1412	; 0x1412 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1b5c:	98 2f       	mov	r25, r24
    1b5e:	92 95       	swap	r25
    1b60:	96 95       	lsr	r25
    1b62:	96 95       	lsr	r25
    1b64:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    1b66:	91 30       	cpi	r25, 0x01	; 1
    1b68:	21 f4       	brne	.+8      	; 0x1b72 <read_PNEUSensors+0x36>
		*shutter = 'c';
    1b6a:	93 e6       	ldi	r25, 0x63	; 99
    1b6c:	f6 01       	movw	r30, r12
    1b6e:	90 83       	st	Z, r25
    1b70:	0f c0       	rjmp	.+30     	; 0x1b90 <read_PNEUSensors+0x54>
	} else if (state == 2) {
    1b72:	92 30       	cpi	r25, 0x02	; 2
    1b74:	21 f4       	brne	.+8      	; 0x1b7e <read_PNEUSensors+0x42>
		*shutter = 'o';
    1b76:	9f e6       	ldi	r25, 0x6F	; 111
    1b78:	f6 01       	movw	r30, r12
    1b7a:	90 83       	st	Z, r25
    1b7c:	09 c0       	rjmp	.+18     	; 0x1b90 <read_PNEUSensors+0x54>
	} else if (state == 3) {
    1b7e:	93 30       	cpi	r25, 0x03	; 3
    1b80:	21 f4       	brne	.+8      	; 0x1b8a <read_PNEUSensors+0x4e>
		*shutter = 't';
    1b82:	94 e7       	ldi	r25, 0x74	; 116
    1b84:	f6 01       	movw	r30, r12
    1b86:	90 83       	st	Z, r25
    1b88:	03 c0       	rjmp	.+6      	; 0x1b90 <read_PNEUSensors+0x54>
	} else {
		*shutter = 'x';
    1b8a:	98 e7       	ldi	r25, 0x78	; 120
    1b8c:	f6 01       	movw	r30, r12
    1b8e:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1b90:	98 2f       	mov	r25, r24
    1b92:	96 95       	lsr	r25
    1b94:	96 95       	lsr	r25
	state &= 0b00000011;
    1b96:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1b98:	91 30       	cpi	r25, 0x01	; 1
    1b9a:	21 f4       	brne	.+8      	; 0x1ba4 <read_PNEUSensors+0x68>
		*right = 'c';
    1b9c:	93 e6       	ldi	r25, 0x63	; 99
    1b9e:	f7 01       	movw	r30, r14
    1ba0:	90 83       	st	Z, r25
    1ba2:	0f c0       	rjmp	.+30     	; 0x1bc2 <read_PNEUSensors+0x86>
	} else if (state == 2) {
    1ba4:	92 30       	cpi	r25, 0x02	; 2
    1ba6:	21 f4       	brne	.+8      	; 0x1bb0 <read_PNEUSensors+0x74>
		*right = 'o';
    1ba8:	9f e6       	ldi	r25, 0x6F	; 111
    1baa:	f7 01       	movw	r30, r14
    1bac:	90 83       	st	Z, r25
    1bae:	09 c0       	rjmp	.+18     	; 0x1bc2 <read_PNEUSensors+0x86>
	} else if (state == 3) {
    1bb0:	93 30       	cpi	r25, 0x03	; 3
    1bb2:	21 f4       	brne	.+8      	; 0x1bbc <read_PNEUSensors+0x80>
		*right = 't';
    1bb4:	94 e7       	ldi	r25, 0x74	; 116
    1bb6:	f7 01       	movw	r30, r14
    1bb8:	90 83       	st	Z, r25
    1bba:	03 c0       	rjmp	.+6      	; 0x1bc2 <read_PNEUSensors+0x86>
	} else {
		*right = 'x';
    1bbc:	98 e7       	ldi	r25, 0x78	; 120
    1bbe:	f7 01       	movw	r30, r14
    1bc0:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1bc2:	98 2f       	mov	r25, r24
    1bc4:	92 95       	swap	r25
    1bc6:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    1bc8:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1bca:	91 30       	cpi	r25, 0x01	; 1
    1bcc:	21 f4       	brne	.+8      	; 0x1bd6 <read_PNEUSensors+0x9a>
		*left = 'o';
    1bce:	9f e6       	ldi	r25, 0x6F	; 111
    1bd0:	f8 01       	movw	r30, r16
    1bd2:	90 83       	st	Z, r25
    1bd4:	0f c0       	rjmp	.+30     	; 0x1bf4 <read_PNEUSensors+0xb8>
	} else if (state == 2) {
    1bd6:	92 30       	cpi	r25, 0x02	; 2
    1bd8:	21 f4       	brne	.+8      	; 0x1be2 <read_PNEUSensors+0xa6>
		*left = 'c';
    1bda:	93 e6       	ldi	r25, 0x63	; 99
    1bdc:	f8 01       	movw	r30, r16
    1bde:	90 83       	st	Z, r25
    1be0:	09 c0       	rjmp	.+18     	; 0x1bf4 <read_PNEUSensors+0xb8>
	} else if (state == 3) {
    1be2:	93 30       	cpi	r25, 0x03	; 3
    1be4:	21 f4       	brne	.+8      	; 0x1bee <read_PNEUSensors+0xb2>
		*left = 't';
    1be6:	94 e7       	ldi	r25, 0x74	; 116
    1be8:	f8 01       	movw	r30, r16
    1bea:	90 83       	st	Z, r25
    1bec:	03 c0       	rjmp	.+6      	; 0x1bf4 <read_PNEUSensors+0xb8>
	} else {
		*left = 'x';
    1bee:	98 e7       	ldi	r25, 0x78	; 120
    1bf0:	f8 01       	movw	r30, r16
    1bf2:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1bf4:	81 ff       	sbrs	r24, 1
    1bf6:	03 c0       	rjmp	.+6      	; 0x1bfe <read_PNEUSensors+0xc2>
		*air = '0';
    1bf8:	80 e3       	ldi	r24, 0x30	; 48
    1bfa:	88 83       	st	Y, r24
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <read_PNEUSensors+0xc6>
	} else {
		*air = '1';
    1bfe:	81 e3       	ldi	r24, 0x31	; 49
    1c00:	88 83       	st	Y, r24
	}
}
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	ff 90       	pop	r15
    1c0c:	ef 90       	pop	r14
    1c0e:	df 90       	pop	r13
    1c10:	cf 90       	pop	r12
    1c12:	08 95       	ret

00001c14 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	d8 2f       	mov	r29, r24
    1c1a:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    1c1c:	69 e0       	ldi	r22, 0x09	; 9
    1c1e:	84 e2       	ldi	r24, 0x24	; 36
    1c20:	0e 94 09 0a 	call	0x1412	; 0x1412 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    1c24:	8d 2b       	or	r24, r29
    1c26:	48 2f       	mov	r20, r24
    1c28:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1c2a:	6a e0       	ldi	r22, 0x0A	; 10
    1c2c:	84 e2       	ldi	r24, 0x24	; 36
    1c2e:	0e 94 38 0a 	call	0x1470	; 0x1470 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	08 95       	ret

00001c38 <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(uint8_t cstack)
{
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	6a 97       	sbiw	r28, 0x1a	; 26
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    1c46:	99 e0       	ldi	r25, 0x09	; 9
    1c48:	e6 ed       	ldi	r30, 0xD6	; 214
    1c4a:	fd e9       	ldi	r31, 0x9D	; 157
    1c4c:	de 01       	movw	r26, r28
    1c4e:	11 96       	adiw	r26, 0x01	; 1
    1c50:	01 90       	ld	r0, Z+
    1c52:	0d 92       	st	X+, r0
    1c54:	9a 95       	dec	r25
    1c56:	e1 f7       	brne	.-8      	; 0x1c50 <close_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1c58:	24 e3       	ldi	r18, 0x34	; 52
    1c5a:	82 9f       	mul	r24, r18
    1c5c:	c0 01       	movw	r24, r0
    1c5e:	11 24       	eor	r1, r1
    1c60:	fc 01       	movw	r30, r24
    1c62:	e3 5f       	subi	r30, 0xF3	; 243
    1c64:	f7 4d       	sbci	r31, 0xD7	; 215
    1c66:	81 81       	ldd	r24, Z+1	; 0x01
    1c68:	8c 36       	cpi	r24, 0x6C	; 108
    1c6a:	31 f1       	breq	.+76     	; 0x1cb8 <close_PNEU+0x80>
    1c6c:	18 f4       	brcc	.+6      	; 0x1c74 <close_PNEU+0x3c>
    1c6e:	82 36       	cpi	r24, 0x62	; 98
    1c70:	39 f0       	breq	.+14     	; 0x1c80 <close_PNEU+0x48>
    1c72:	6a c0       	rjmp	.+212    	; 0x1d48 <close_PNEU+0x110>
    1c74:	82 37       	cpi	r24, 0x72	; 114
    1c76:	c1 f1       	breq	.+112    	; 0x1ce8 <close_PNEU+0xb0>
    1c78:	83 37       	cpi	r24, 0x73	; 115
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <close_PNEU+0x46>
    1c7c:	4d c0       	rjmp	.+154    	; 0x1d18 <close_PNEU+0xe0>
    1c7e:	64 c0       	rjmp	.+200    	; 0x1d48 <close_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1c80:	6a ee       	ldi	r22, 0xEA	; 234
    1c82:	84 e4       	ldi	r24, 0x44	; 68
    1c84:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1c88:	66 ee       	ldi	r22, 0xE6	; 230
    1c8a:	88 e8       	ldi	r24, 0x88	; 136
    1c8c:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1c90:	8c e9       	ldi	r24, 0x9C	; 156
    1c92:	9d e9       	ldi	r25, 0x9D	; 157
    1c94:	9f 93       	push	r25
    1c96:	8f 93       	push	r24
    1c98:	ce 01       	movw	r24, r28
    1c9a:	01 96       	adiw	r24, 0x01	; 1
    1c9c:	9f 93       	push	r25
    1c9e:	8f 93       	push	r24
    1ca0:	09 96       	adiw	r24, 0x09	; 9
    1ca2:	9f 93       	push	r25
    1ca4:	8f 93       	push	r24
    1ca6:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			break;
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	59 c0       	rjmp	.+178    	; 0x1d6a <close_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1cb8:	6a ee       	ldi	r22, 0xEA	; 234
    1cba:	84 e4       	ldi	r24, 0x44	; 68
    1cbc:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1cc0:	81 ea       	ldi	r24, 0xA1	; 161
    1cc2:	9d e9       	ldi	r25, 0x9D	; 157
    1cc4:	9f 93       	push	r25
    1cc6:	8f 93       	push	r24
    1cc8:	ce 01       	movw	r24, r28
    1cca:	01 96       	adiw	r24, 0x01	; 1
    1ccc:	9f 93       	push	r25
    1cce:	8f 93       	push	r24
    1cd0:	09 96       	adiw	r24, 0x09	; 9
    1cd2:	9f 93       	push	r25
    1cd4:	8f 93       	push	r24
    1cd6:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			break;
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	41 c0       	rjmp	.+130    	; 0x1d6a <close_PNEU+0x132>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1ce8:	66 ee       	ldi	r22, 0xE6	; 230
    1cea:	88 e8       	ldi	r24, 0x88	; 136
    1cec:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1cf0:	86 ea       	ldi	r24, 0xA6	; 166
    1cf2:	9d e9       	ldi	r25, 0x9D	; 157
    1cf4:	9f 93       	push	r25
    1cf6:	8f 93       	push	r24
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	01 96       	adiw	r24, 0x01	; 1
    1cfc:	9f 93       	push	r25
    1cfe:	8f 93       	push	r24
    1d00:	09 96       	adiw	r24, 0x09	; 9
    1d02:	9f 93       	push	r25
    1d04:	8f 93       	push	r24
    1d06:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			break;
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	29 c0       	rjmp	.+82     	; 0x1d6a <close_PNEU+0x132>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1d18:	6c ee       	ldi	r22, 0xEC	; 236
    1d1a:	82 e2       	ldi	r24, 0x22	; 34
    1d1c:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1d20:	8c ea       	ldi	r24, 0xAC	; 172
    1d22:	9d e9       	ldi	r25, 0x9D	; 157
    1d24:	9f 93       	push	r25
    1d26:	8f 93       	push	r24
    1d28:	ce 01       	movw	r24, r28
    1d2a:	01 96       	adiw	r24, 0x01	; 1
    1d2c:	9f 93       	push	r25
    1d2e:	8f 93       	push	r24
    1d30:	09 96       	adiw	r24, 0x09	; 9
    1d32:	9f 93       	push	r25
    1d34:	8f 93       	push	r24
    1d36:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			break;
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	11 c0       	rjmp	.+34     	; 0x1d6a <close_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "close_PNEU bad object");
    1d48:	64 eb       	ldi	r22, 0xB4	; 180
    1d4a:	7d e9       	ldi	r23, 0x9D	; 157
    1d4c:	85 ef       	ldi	r24, 0xF5	; 245
    1d4e:	91 e0       	ldi	r25, 0x01	; 1
    1d50:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
			strcpy(outbuf, "close what?");
    1d54:	8c e0       	ldi	r24, 0x0C	; 12
    1d56:	ea ec       	ldi	r30, 0xCA	; 202
    1d58:	fd e9       	ldi	r31, 0x9D	; 157
    1d5a:	de 01       	movw	r26, r28
    1d5c:	1a 96       	adiw	r26, 0x0a	; 10
    1d5e:	01 90       	ld	r0, Z+
    1d60:	0d 92       	st	X+, r0
    1d62:	8a 95       	dec	r24
    1d64:	e1 f7       	brne	.-8      	; 0x1d5e <close_PNEU+0x126>
			return(ERROR);
    1d66:	83 e6       	ldi	r24, 0x63	; 99
    1d68:	0b c0       	rjmp	.+22     	; 0x1d80 <close_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1d70:	41 e0       	ldi	r20, 0x01	; 1
    1d72:	be 01       	movw	r22, r28
    1d74:	66 5f       	subi	r22, 0xF6	; 246
    1d76:	7f 4f       	sbci	r23, 0xFF	; 255
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <writestr_OLED>
	return(NOERROR);
    1d7e:	80 e0       	ldi	r24, 0x00	; 0

}
    1d80:	6a 96       	adiw	r28, 0x1a	; 26
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	08 95       	ret

00001d8c <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(uint8_t cstack)
{
    1d8c:	cf 93       	push	r28
    1d8e:	df 93       	push	r29
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	69 97       	sbiw	r28, 0x19	; 25
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	de bf       	out	0x3e, r29	; 62

	const char dformat_OPE[] = "Open %s";
    1d9a:	98 e0       	ldi	r25, 0x08	; 8
    1d9c:	ef ef       	ldi	r30, 0xFF	; 255
    1d9e:	fd e9       	ldi	r31, 0x9D	; 157
    1da0:	de 01       	movw	r26, r28
    1da2:	11 96       	adiw	r26, 0x01	; 1
    1da4:	01 90       	ld	r0, Z+
    1da6:	0d 92       	st	X+, r0
    1da8:	9a 95       	dec	r25
    1daa:	e1 f7       	brne	.-8      	; 0x1da4 <open_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1dac:	24 e3       	ldi	r18, 0x34	; 52
    1dae:	82 9f       	mul	r24, r18
    1db0:	c0 01       	movw	r24, r0
    1db2:	11 24       	eor	r1, r1
    1db4:	fc 01       	movw	r30, r24
    1db6:	e3 5f       	subi	r30, 0xF3	; 243
    1db8:	f7 4d       	sbci	r31, 0xD7	; 215
    1dba:	81 81       	ldd	r24, Z+1	; 0x01
    1dbc:	8c 36       	cpi	r24, 0x6C	; 108
    1dbe:	31 f1       	breq	.+76     	; 0x1e0c <open_PNEU+0x80>
    1dc0:	18 f4       	brcc	.+6      	; 0x1dc8 <open_PNEU+0x3c>
    1dc2:	82 36       	cpi	r24, 0x62	; 98
    1dc4:	39 f0       	breq	.+14     	; 0x1dd4 <open_PNEU+0x48>
    1dc6:	6a c0       	rjmp	.+212    	; 0x1e9c <open_PNEU+0x110>
    1dc8:	82 37       	cpi	r24, 0x72	; 114
    1dca:	c1 f1       	breq	.+112    	; 0x1e3c <open_PNEU+0xb0>
    1dcc:	83 37       	cpi	r24, 0x73	; 115
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <open_PNEU+0x46>
    1dd0:	4d c0       	rjmp	.+154    	; 0x1e6c <open_PNEU+0xe0>
    1dd2:	64 c0       	rjmp	.+200    	; 0x1e9c <open_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1dd4:	6e ea       	ldi	r22, 0xAE	; 174
    1dd6:	84 e4       	ldi	r24, 0x44	; 68
    1dd8:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1ddc:	6e e6       	ldi	r22, 0x6E	; 110
    1dde:	88 e8       	ldi	r24, 0x88	; 136
    1de0:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1de4:	8c e9       	ldi	r24, 0x9C	; 156
    1de6:	9d e9       	ldi	r25, 0x9D	; 157
    1de8:	9f 93       	push	r25
    1dea:	8f 93       	push	r24
    1dec:	ce 01       	movw	r24, r28
    1dee:	01 96       	adiw	r24, 0x01	; 1
    1df0:	9f 93       	push	r25
    1df2:	8f 93       	push	r24
    1df4:	08 96       	adiw	r24, 0x08	; 8
    1df6:	9f 93       	push	r25
    1df8:	8f 93       	push	r24
    1dfa:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			break;
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	59 c0       	rjmp	.+178    	; 0x1ebe <open_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1e0c:	6e ea       	ldi	r22, 0xAE	; 174
    1e0e:	84 e4       	ldi	r24, 0x44	; 68
    1e10:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1e14:	81 ea       	ldi	r24, 0xA1	; 161
    1e16:	9d e9       	ldi	r25, 0x9D	; 157
    1e18:	9f 93       	push	r25
    1e1a:	8f 93       	push	r24
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	01 96       	adiw	r24, 0x01	; 1
    1e20:	9f 93       	push	r25
    1e22:	8f 93       	push	r24
    1e24:	08 96       	adiw	r24, 0x08	; 8
    1e26:	9f 93       	push	r25
    1e28:	8f 93       	push	r24
    1e2a:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			break;
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	41 c0       	rjmp	.+130    	; 0x1ebe <open_PNEU+0x132>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1e3c:	6e e6       	ldi	r22, 0x6E	; 110
    1e3e:	88 e8       	ldi	r24, 0x88	; 136
    1e40:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1e44:	86 ea       	ldi	r24, 0xA6	; 166
    1e46:	9d e9       	ldi	r25, 0x9D	; 157
    1e48:	9f 93       	push	r25
    1e4a:	8f 93       	push	r24
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	01 96       	adiw	r24, 0x01	; 1
    1e50:	9f 93       	push	r25
    1e52:	8f 93       	push	r24
    1e54:	08 96       	adiw	r24, 0x08	; 8
    1e56:	9f 93       	push	r25
    1e58:	8f 93       	push	r24
    1e5a:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			break;
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	29 c0       	rjmp	.+82     	; 0x1ebe <open_PNEU+0x132>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1e6c:	6e ec       	ldi	r22, 0xCE	; 206
    1e6e:	82 e2       	ldi	r24, 0x22	; 34
    1e70:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1e74:	8c ea       	ldi	r24, 0xAC	; 172
    1e76:	9d e9       	ldi	r25, 0x9D	; 157
    1e78:	9f 93       	push	r25
    1e7a:	8f 93       	push	r24
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	01 96       	adiw	r24, 0x01	; 1
    1e80:	9f 93       	push	r25
    1e82:	8f 93       	push	r24
    1e84:	08 96       	adiw	r24, 0x08	; 8
    1e86:	9f 93       	push	r25
    1e88:	8f 93       	push	r24
    1e8a:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			break;
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	11 c0       	rjmp	.+34     	; 0x1ebe <open_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "open_PNEU bad object");
    1e9c:	6f ed       	ldi	r22, 0xDF	; 223
    1e9e:	7d e9       	ldi	r23, 0x9D	; 157
    1ea0:	85 ef       	ldi	r24, 0xF5	; 245
    1ea2:	91 e0       	ldi	r25, 0x01	; 1
    1ea4:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
			strcpy(outbuf, "open what?");
    1ea8:	8b e0       	ldi	r24, 0x0B	; 11
    1eaa:	e4 ef       	ldi	r30, 0xF4	; 244
    1eac:	fd e9       	ldi	r31, 0x9D	; 157
    1eae:	de 01       	movw	r26, r28
    1eb0:	19 96       	adiw	r26, 0x09	; 9
    1eb2:	01 90       	ld	r0, Z+
    1eb4:	0d 92       	st	X+, r0
    1eb6:	8a 95       	dec	r24
    1eb8:	e1 f7       	brne	.-8      	; 0x1eb2 <open_PNEU+0x126>
			return(ERROR);
    1eba:	83 e6       	ldi	r24, 0x63	; 99
    1ebc:	0b c0       	rjmp	.+22     	; 0x1ed4 <open_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1ec4:	41 e0       	ldi	r20, 0x01	; 1
    1ec6:	be 01       	movw	r22, r28
    1ec8:	67 5f       	subi	r22, 0xF7	; 247
    1eca:	7f 4f       	sbci	r23, 0xFF	; 255
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <writestr_OLED>
	return(NOERROR);
    1ed2:	80 e0       	ldi	r24, 0x00	; 0

}
    1ed4:	69 96       	adiw	r28, 0x19	; 25
    1ed6:	cd bf       	out	0x3d, r28	; 61
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	08 95       	ret

00001ee0 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1ee0:	1f 92       	push	r1
    1ee2:	0f 92       	push	r0
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	0f 92       	push	r0
    1ee8:	11 24       	eor	r1, r1
    1eea:	2f 93       	push	r18
    1eec:	3f 93       	push	r19
    1eee:	4f 93       	push	r20
    1ef0:	5f 93       	push	r21
    1ef2:	6f 93       	push	r22
    1ef4:	7f 93       	push	r23
    1ef6:	8f 93       	push	r24
    1ef8:	9f 93       	push	r25
    1efa:	af 93       	push	r26
    1efc:	bf 93       	push	r27
    1efe:	ef 93       	push	r30
    1f00:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1f02:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1f06:	88 23       	and	r24, r24
    1f08:	4c f4       	brge	.+18     	; 0x1f1c <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1f0a:	80 e8       	ldi	r24, 0x80	; 128
    1f0c:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1f10:	68 e0       	ldi	r22, 0x08	; 8
    1f12:	81 e2       	ldi	r24, 0x21	; 33
    1f14:	0e 94 09 0a 	call	0x1412	; 0x1412 <read_MCP23008>
    1f18:	80 93 18 2a 	sts	0x2A18, r24	; 0x802a18 <pneuState>
	}

}
    1f1c:	ff 91       	pop	r31
    1f1e:	ef 91       	pop	r30
    1f20:	bf 91       	pop	r27
    1f22:	af 91       	pop	r26
    1f24:	9f 91       	pop	r25
    1f26:	8f 91       	pop	r24
    1f28:	7f 91       	pop	r23
    1f2a:	6f 91       	pop	r22
    1f2c:	5f 91       	pop	r21
    1f2e:	4f 91       	pop	r20
    1f30:	3f 91       	pop	r19
    1f32:	2f 91       	pop	r18
    1f34:	0f 90       	pop	r0
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	0f 90       	pop	r0
    1f3a:	1f 90       	pop	r1
    1f3c:	18 95       	reti

00001f3e <init_PORTS>:
void init_PORTS(void)
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTB.DIRSET = PIN2_bm;		// Beeper
    1f3e:	84 e0       	ldi	r24, 0x04	; 4
    1f40:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7f4421>
	PORTF.DIRCLR = PIN2_bm;		// specID jumper
    1f44:	e0 ea       	ldi	r30, 0xA0	; 160
    1f46:	f4 e0       	ldi	r31, 0x04	; 4
    1f48:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRSET = PIN5_bm;		// On-board LED
    1f4a:	80 e2       	ldi	r24, 0x20	; 32
    1f4c:	81 83       	std	Z+1, r24	; 0x01
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton
    1f4e:	8b e0       	ldi	r24, 0x0B	; 11
    1f50:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.OUTCLR = PIN3_bm;		// Reset the XPort
    1f52:	e0 e4       	ldi	r30, 0x40	; 64
    1f54:	f4 e0       	ldi	r31, 0x04	; 4
    1f56:	88 e0       	ldi	r24, 0x08	; 8
    1f58:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;		// Set XPort reset pin as output
    1f5a:	81 83       	std	Z+1, r24	; 0x01
    1f5c:	ad e8       	ldi	r26, 0x8D	; 141
    1f5e:	b0 e2       	ldi	r27, 0x20	; 32
    1f60:	11 97       	sbiw	r26, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <init_PORTS+0x22>
    1f64:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;		// Enable the XPort
    1f66:	85 83       	std	Z+5, r24	; 0x05
    1f68:	08 95       	ret

00001f6a <report>:

	Returns:
		ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1f6a:	2f 92       	push	r2
    1f6c:	3f 92       	push	r3
    1f6e:	4f 92       	push	r4
    1f70:	5f 92       	push	r5
    1f72:	6f 92       	push	r6
    1f74:	7f 92       	push	r7
    1f76:	8f 92       	push	r8
    1f78:	9f 92       	push	r9
    1f7a:	af 92       	push	r10
    1f7c:	bf 92       	push	r11
    1f7e:	cf 92       	push	r12
    1f80:	df 92       	push	r13
    1f82:	ef 92       	push	r14
    1f84:	ff 92       	push	r15
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	c3 53       	subi	r28, 0x33	; 51
    1f94:	d3 40       	sbci	r29, 0x03	; 3
    1f96:	cd bf       	out	0x3d, r28	; 61
    1f98:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "ENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
    1f9a:	95 e4       	ldi	r25, 0x45	; 69
    1f9c:	ef e0       	ldi	r30, 0x0F	; 15
    1f9e:	ff e9       	ldi	r31, 0x9F	; 159
    1fa0:	de 01       	movw	r26, r28
    1fa2:	a6 5b       	subi	r26, 0xB6	; 182
    1fa4:	be 4f       	sbci	r27, 0xFE	; 254
    1fa6:	01 90       	ld	r0, Z+
    1fa8:	0d 92       	st	X+, r0
    1faa:	9a 95       	dec	r25
    1fac:	e1 f7       	brne	.-8      	; 0x1fa6 <report+0x3c>
	const char format_MTR[] = "MTR,%s,%c,%ld,microns,%ld,microns/sec,%d,mA,%s";
    1fae:	9f e2       	ldi	r25, 0x2F	; 47
    1fb0:	e4 e5       	ldi	r30, 0x54	; 84
    1fb2:	ff e9       	ldi	r31, 0x9F	; 159
    1fb4:	de 01       	movw	r26, r28
    1fb6:	a1 57       	subi	r26, 0x71	; 113
    1fb8:	be 4f       	sbci	r27, 0xFE	; 254
    1fba:	01 90       	ld	r0, Z+
    1fbc:	0d 92       	st	X+, r0
    1fbe:	9a 95       	dec	r25
    1fc0:	e1 f7       	brne	.-8      	; 0x1fba <report+0x50>
	const char format_MTV[] = "MTV,%s,Motor %c,%3.1f,V,%3.1f,C,%.2f,p,%.3f,i,%.2f,d,%ld,maxI,%ld,minPos,%ld,maxPos,%s";
    1fc2:	97 e5       	ldi	r25, 0x57	; 87
    1fc4:	e3 e8       	ldi	r30, 0x83	; 131
    1fc6:	ff e9       	ldi	r31, 0x9F	; 159
    1fc8:	de 01       	movw	r26, r28
    1fca:	a2 54       	subi	r26, 0x42	; 66
    1fcc:	be 4f       	sbci	r27, 0xFE	; 254
    1fce:	01 90       	ld	r0, Z+
    1fd0:	0d 92       	st	X+, r0
    1fd2:	9a 95       	dec	r25
    1fd4:	e1 f7       	brne	.-8      	; 0x1fce <report+0x64>
	const char format_ORI[] = "ORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1fd6:	9c e1       	ldi	r25, 0x1C	; 28
    1fd8:	ea ed       	ldi	r30, 0xDA	; 218
    1fda:	ff e9       	ldi	r31, 0x9F	; 159
    1fdc:	de 01       	movw	r26, r28
    1fde:	ab 5e       	subi	r26, 0xEB	; 235
    1fe0:	bd 4f       	sbci	r27, 0xFD	; 253
    1fe2:	01 90       	ld	r0, Z+
    1fe4:	0d 92       	st	X+, r0
    1fe6:	9a 95       	dec	r25
    1fe8:	e1 f7       	brne	.-8      	; 0x1fe2 <report+0x78>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1fea:	92 e1       	ldi	r25, 0x12	; 18
    1fec:	e6 ef       	ldi	r30, 0xF6	; 246
    1fee:	ff e9       	ldi	r31, 0x9F	; 159
    1ff0:	de 01       	movw	r26, r28
    1ff2:	af 5c       	subi	r26, 0xCF	; 207
    1ff4:	bd 4f       	sbci	r27, 0xFD	; 253
    1ff6:	01 90       	ld	r0, Z+
    1ff8:	0d 92       	st	X+, r0
    1ffa:	9a 95       	dec	r25
    1ffc:	e1 f7       	brne	.-8      	; 0x1ff6 <report+0x8c>
	const char format_PNU[] = "PNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1ffe:	9d e2       	ldi	r25, 0x2D	; 45
    2000:	e8 e0       	ldi	r30, 0x08	; 8
    2002:	f0 ea       	ldi	r31, 0xA0	; 160
    2004:	de 01       	movw	r26, r28
    2006:	ad 5b       	subi	r26, 0xBD	; 189
    2008:	bd 4f       	sbci	r27, 0xFD	; 253
    200a:	01 90       	ld	r0, Z+
    200c:	0d 92       	st	X+, r0
    200e:	9a 95       	dec	r25
    2010:	e1 f7       	brne	.-8      	; 0x200a <report+0xa0>
	const char dformat_PN1[] = "Left:%c   Right:%c";
    2012:	93 e1       	ldi	r25, 0x13	; 19
    2014:	e5 e3       	ldi	r30, 0x35	; 53
    2016:	f0 ea       	ldi	r31, 0xA0	; 160
    2018:	de 01       	movw	r26, r28
    201a:	a0 59       	subi	r26, 0x90	; 144
    201c:	bd 4f       	sbci	r27, 0xFD	; 253
    201e:	01 90       	ld	r0, Z+
    2020:	0d 92       	st	X+, r0
    2022:	9a 95       	dec	r25
    2024:	e1 f7       	brne	.-8      	; 0x201e <report+0xb4>
	const char dformat_PN2[] = "Shutter:%c  Air:%c";
    2026:	93 e1       	ldi	r25, 0x13	; 19
    2028:	e8 e4       	ldi	r30, 0x48	; 72
    202a:	f0 ea       	ldi	r31, 0xA0	; 160
    202c:	de 01       	movw	r26, r28
    202e:	ad 57       	subi	r26, 0x7D	; 125
    2030:	bd 4f       	sbci	r27, 0xFD	; 253
    2032:	01 90       	ld	r0, Z+
    2034:	0d 92       	st	X+, r0
    2036:	9a 95       	dec	r25
    2038:	e1 f7       	brne	.-8      	; 0x2032 <report+0xc8>
	const char format_TIM[] = "TIM,%s,%s,set,%s,boot,%s";
    203a:	99 e1       	ldi	r25, 0x19	; 25
    203c:	eb e5       	ldi	r30, 0x5B	; 91
    203e:	f0 ea       	ldi	r31, 0xA0	; 160
    2040:	de 01       	movw	r26, r28
    2042:	aa 56       	subi	r26, 0x6A	; 106
    2044:	bd 4f       	sbci	r27, 0xFD	; 253
    2046:	01 90       	ld	r0, Z+
    2048:	0d 92       	st	X+, r0
    204a:	9a 95       	dec	r25
    204c:	e1 f7       	brne	.-8      	; 0x2046 <report+0xdc>
	const char format_VAC[] = "VAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    204e:	95 e2       	ldi	r25, 0x25	; 37
    2050:	e4 e7       	ldi	r30, 0x74	; 116
    2052:	f0 ea       	ldi	r31, 0xA0	; 160
    2054:	de 01       	movw	r26, r28
    2056:	a1 55       	subi	r26, 0x51	; 81
    2058:	bd 4f       	sbci	r27, 0xFD	; 253
    205a:	01 90       	ld	r0, Z+
    205c:	0d 92       	st	X+, r0
    205e:	9a 95       	dec	r25
    2060:	e1 f7       	brne	.-8      	; 0x205a <report+0xf0>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    2062:	9d e0       	ldi	r25, 0x0D	; 13
    2064:	e9 e9       	ldi	r30, 0x99	; 153
    2066:	f0 ea       	ldi	r31, 0xA0	; 160
    2068:	de 01       	movw	r26, r28
    206a:	ac 52       	subi	r26, 0x2C	; 44
    206c:	bd 4f       	sbci	r27, 0xFD	; 253
    206e:	01 90       	ld	r0, Z+
    2070:	0d 92       	st	X+, r0
    2072:	9a 95       	dec	r25
    2074:	e1 f7       	brne	.-8      	; 0x206e <report+0x104>
	const char format_VER[] = "VER,%s,%s,%s";
    2076:	9d e0       	ldi	r25, 0x0D	; 13
    2078:	e6 ea       	ldi	r30, 0xA6	; 166
    207a:	f0 ea       	ldi	r31, 0xA0	; 160
    207c:	de 01       	movw	r26, r28
    207e:	af 51       	subi	r26, 0x1F	; 31
    2080:	bd 4f       	sbci	r27, 0xFD	; 253
    2082:	01 90       	ld	r0, Z+
    2084:	0d 92       	st	X+, r0
    2086:	9a 95       	dec	r25
    2088:	e1 f7       	brne	.-8      	; 0x2082 <report+0x118>
	uint16_t motorCurrent;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	PID pid;

	switch(pcmd[cstack].cobject) {
    208a:	08 2f       	mov	r16, r24
    208c:	10 e0       	ldi	r17, 0x00	; 0
    208e:	84 e3       	ldi	r24, 0x34	; 52
    2090:	80 9f       	mul	r24, r16
    2092:	f0 01       	movw	r30, r0
    2094:	81 9f       	mul	r24, r17
    2096:	f0 0d       	add	r31, r0
    2098:	11 24       	eor	r1, r1
    209a:	e3 5f       	subi	r30, 0xF3	; 243
    209c:	f7 4d       	sbci	r31, 0xD7	; 215
    209e:	e1 81       	ldd	r30, Z+1	; 0x01
    20a0:	8e 2f       	mov	r24, r30
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	fc 01       	movw	r30, r24
    20a6:	e1 54       	subi	r30, 0x41	; 65
    20a8:	f1 09       	sbc	r31, r1
    20aa:	e6 33       	cpi	r30, 0x36	; 54
    20ac:	f1 05       	cpc	r31, r1
    20ae:	08 f0       	brcs	.+2      	; 0x20b2 <report+0x148>
    20b0:	57 c5       	rjmp	.+2734   	; 0x2b60 <report+0xbf6>
    20b2:	e4 58       	subi	r30, 0x84	; 132
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	0c 94 31 26 	jmp	0x4c62	; 0x4c62 <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    20ba:	ce 01       	movw	r24, r28
    20bc:	86 5f       	subi	r24, 0xF6	; 246
    20be:	9e 4f       	sbci	r25, 0xFE	; 254
    20c0:	0e 94 ca 06 	call	0xd94	; 0xd94 <get_time>
			controller = pcmd[cstack].cobject + 63;
    20c4:	84 e3       	ldi	r24, 0x34	; 52
    20c6:	80 9f       	mul	r24, r16
    20c8:	f0 01       	movw	r30, r0
    20ca:	81 9f       	mul	r24, r17
    20cc:	f0 0d       	add	r31, r0
    20ce:	11 24       	eor	r1, r1
    20d0:	e3 5f       	subi	r30, 0xF3	; 243
    20d2:	f7 4d       	sbci	r31, 0xD7	; 215
    20d4:	d1 80       	ldd	r13, Z+1	; 0x01
    20d6:	0f 2e       	mov	r0, r31
    20d8:	ff e3       	ldi	r31, 0x3F	; 63
    20da:	ef 2e       	mov	r14, r31
    20dc:	f0 2d       	mov	r31, r0
    20de:	ed 0c       	add	r14, r13
			if (get_MOTOR_FLOAT(controller, READMAINVOLTAGE, &voltage) == ERROR) {
    20e0:	ae 01       	movw	r20, r28
    20e2:	46 50       	subi	r20, 0x06	; 6
    20e4:	5d 4f       	sbci	r21, 0xFD	; 253
    20e6:	68 e1       	ldi	r22, 0x18	; 24
    20e8:	8e 2d       	mov	r24, r14
    20ea:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <get_MOTOR_FLOAT>
    20ee:	f8 2e       	mov	r15, r24
    20f0:	83 e6       	ldi	r24, 0x63	; 99
    20f2:	f8 12       	cpse	r15, r24
    20f4:	07 c0       	rjmp	.+14     	; 0x2104 <report+0x19a>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT volts error");
    20f6:	67 e0       	ldi	r22, 0x07	; 7
    20f8:	7e e9       	ldi	r23, 0x9E	; 158
    20fa:	86 e3       	ldi	r24, 0x36	; 54
    20fc:	91 e0       	ldi	r25, 0x01	; 1
    20fe:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
				return(ERROR);
    2102:	38 c5       	rjmp	.+2672   	; 0x2b74 <report+0xc0a>
			}
			if (get_MOTOR_FLOAT(controller, READTEMPERATURE, &t0) == ERROR) {
    2104:	ae 01       	movw	r20, r28
    2106:	4a 50       	subi	r20, 0x0A	; 10
    2108:	5d 4f       	sbci	r21, 0xFD	; 253
    210a:	62 e5       	ldi	r22, 0x52	; 82
    210c:	8e 2d       	mov	r24, r14
    210e:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <get_MOTOR_FLOAT>
    2112:	f8 2e       	mov	r15, r24
    2114:	93 e6       	ldi	r25, 0x63	; 99
    2116:	89 13       	cpse	r24, r25
    2118:	07 c0       	rjmp	.+14     	; 0x2128 <report+0x1be>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT temperature error");
    211a:	6b e2       	ldi	r22, 0x2B	; 43
    211c:	7e e9       	ldi	r23, 0x9E	; 158
    211e:	86 e3       	ldi	r24, 0x36	; 54
    2120:	91 e0       	ldi	r25, 0x01	; 1
    2122:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
				return(ERROR);
    2126:	26 c5       	rjmp	.+2636   	; 0x2b74 <report+0xc0a>
			}
			if (get_MOTOR_PID(controller, &pid) == ERROR) {
    2128:	be 01       	movw	r22, r28
    212a:	64 5f       	subi	r22, 0xF4	; 244
    212c:	7c 4f       	sbci	r23, 0xFC	; 252
    212e:	8e 2d       	mov	r24, r14
    2130:	0e 94 26 18 	call	0x304c	; 0x304c <get_MOTOR_PID>
    2134:	f8 2e       	mov	r15, r24
    2136:	83 e6       	ldi	r24, 0x63	; 99
    2138:	f8 12       	cpse	r15, r24
    213a:	07 c0       	rjmp	.+14     	; 0x214a <report+0x1e0>
				printError(ERR_MTR, "report: get_MOTOR_PID error");
    213c:	65 e5       	ldi	r22, 0x55	; 85
    213e:	7e e9       	ldi	r23, 0x9E	; 158
    2140:	86 e3       	ldi	r24, 0x36	; 54
    2142:	91 e0       	ldi	r25, 0x01	; 1
    2144:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
				return(ERROR);
    2148:	15 c5       	rjmp	.+2602   	; 0x2b74 <report+0xc0a>
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, t0, pid.p, pid.i, pid.d, pid.maxI, pid.minPos, pid.maxPos, pcmd[cstack].cid);
    214a:	24 e3       	ldi	r18, 0x34	; 52
    214c:	20 9f       	mul	r18, r16
    214e:	c0 01       	movw	r24, r0
    2150:	21 9f       	mul	r18, r17
    2152:	90 0d       	add	r25, r0
    2154:	11 24       	eor	r1, r1
    2156:	88 5c       	subi	r24, 0xC8	; 200
    2158:	97 4d       	sbci	r25, 0xD7	; 215
    215a:	cc 5e       	subi	r28, 0xEC	; 236
    215c:	dc 4f       	sbci	r29, 0xFC	; 252
    215e:	a8 81       	ld	r26, Y
    2160:	c4 51       	subi	r28, 0x14	; 20
    2162:	d3 40       	sbci	r29, 0x03	; 3
    2164:	cb 5e       	subi	r28, 0xEB	; 235
    2166:	dc 4f       	sbci	r29, 0xFC	; 252
    2168:	b8 81       	ld	r27, Y
    216a:	c5 51       	subi	r28, 0x15	; 21
    216c:	d3 40       	sbci	r29, 0x03	; 3
    216e:	ca 5e       	subi	r28, 0xEA	; 234
    2170:	dc 4f       	sbci	r29, 0xFC	; 252
    2172:	18 81       	ld	r17, Y
    2174:	c6 51       	subi	r28, 0x16	; 22
    2176:	d3 40       	sbci	r29, 0x03	; 3
    2178:	c9 5e       	subi	r28, 0xE9	; 233
    217a:	dc 4f       	sbci	r29, 0xFC	; 252
    217c:	08 81       	ld	r16, Y
    217e:	c7 51       	subi	r28, 0x17	; 23
    2180:	d3 40       	sbci	r29, 0x03	; 3
    2182:	c0 5f       	subi	r28, 0xF0	; 240
    2184:	dc 4f       	sbci	r29, 0xFC	; 252
    2186:	68 81       	ld	r22, Y
    2188:	c0 51       	subi	r28, 0x10	; 16
    218a:	d3 40       	sbci	r29, 0x03	; 3
    218c:	cf 5e       	subi	r28, 0xEF	; 239
    218e:	dc 4f       	sbci	r29, 0xFC	; 252
    2190:	78 81       	ld	r23, Y
    2192:	c1 51       	subi	r28, 0x11	; 17
    2194:	d3 40       	sbci	r29, 0x03	; 3
    2196:	ce 5e       	subi	r28, 0xEE	; 238
    2198:	dc 4f       	sbci	r29, 0xFC	; 252
    219a:	e8 81       	ld	r30, Y
    219c:	c2 51       	subi	r28, 0x12	; 18
    219e:	d3 40       	sbci	r29, 0x03	; 3
    21a0:	cd 5e       	subi	r28, 0xED	; 237
    21a2:	dc 4f       	sbci	r29, 0xFC	; 252
    21a4:	f8 81       	ld	r31, Y
    21a6:	c3 51       	subi	r28, 0x13	; 19
    21a8:	d3 40       	sbci	r29, 0x03	; 3
    21aa:	c4 5f       	subi	r28, 0xF4	; 244
    21ac:	dc 4f       	sbci	r29, 0xFC	; 252
    21ae:	28 81       	ld	r18, Y
    21b0:	cc 50       	subi	r28, 0x0C	; 12
    21b2:	d3 40       	sbci	r29, 0x03	; 3
    21b4:	c3 5f       	subi	r28, 0xF3	; 243
    21b6:	dc 4f       	sbci	r29, 0xFC	; 252
    21b8:	38 81       	ld	r19, Y
    21ba:	cd 50       	subi	r28, 0x0D	; 13
    21bc:	d3 40       	sbci	r29, 0x03	; 3
    21be:	c2 5f       	subi	r28, 0xF2	; 242
    21c0:	dc 4f       	sbci	r29, 0xFC	; 252
    21c2:	48 81       	ld	r20, Y
    21c4:	ce 50       	subi	r28, 0x0E	; 14
    21c6:	d3 40       	sbci	r29, 0x03	; 3
    21c8:	c1 5f       	subi	r28, 0xF1	; 241
    21ca:	dc 4f       	sbci	r29, 0xFC	; 252
    21cc:	58 81       	ld	r21, Y
    21ce:	cf 50       	subi	r28, 0x0F	; 15
    21d0:	d3 40       	sbci	r29, 0x03	; 3
			}
			if (get_MOTOR_PID(controller, &pid) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_PID error");
				return(ERROR);
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
    21d2:	9f 93       	push	r25
    21d4:	8f 93       	push	r24
    21d6:	c9 5d       	subi	r28, 0xD9	; 217
    21d8:	dc 4f       	sbci	r29, 0xFC	; 252
    21da:	88 81       	ld	r24, Y
    21dc:	c7 52       	subi	r28, 0x27	; 39
    21de:	d3 40       	sbci	r29, 0x03	; 3
    21e0:	8f 93       	push	r24
    21e2:	ca 5d       	subi	r28, 0xDA	; 218
    21e4:	dc 4f       	sbci	r29, 0xFC	; 252
    21e6:	88 81       	ld	r24, Y
    21e8:	c6 52       	subi	r28, 0x26	; 38
    21ea:	d3 40       	sbci	r29, 0x03	; 3
    21ec:	8f 93       	push	r24
    21ee:	cb 5d       	subi	r28, 0xDB	; 219
    21f0:	dc 4f       	sbci	r29, 0xFC	; 252
    21f2:	88 81       	ld	r24, Y
    21f4:	c5 52       	subi	r28, 0x25	; 37
    21f6:	d3 40       	sbci	r29, 0x03	; 3
    21f8:	8f 93       	push	r24
    21fa:	cc 5d       	subi	r28, 0xDC	; 220
    21fc:	dc 4f       	sbci	r29, 0xFC	; 252
    21fe:	88 81       	ld	r24, Y
    2200:	c4 52       	subi	r28, 0x24	; 36
    2202:	d3 40       	sbci	r29, 0x03	; 3
    2204:	8f 93       	push	r24
    2206:	cd 5d       	subi	r28, 0xDD	; 221
    2208:	dc 4f       	sbci	r29, 0xFC	; 252
    220a:	88 81       	ld	r24, Y
    220c:	c3 52       	subi	r28, 0x23	; 35
    220e:	d3 40       	sbci	r29, 0x03	; 3
    2210:	8f 93       	push	r24
    2212:	ce 5d       	subi	r28, 0xDE	; 222
    2214:	dc 4f       	sbci	r29, 0xFC	; 252
    2216:	88 81       	ld	r24, Y
    2218:	c2 52       	subi	r28, 0x22	; 34
    221a:	d3 40       	sbci	r29, 0x03	; 3
    221c:	8f 93       	push	r24
    221e:	cf 5d       	subi	r28, 0xDF	; 223
    2220:	dc 4f       	sbci	r29, 0xFC	; 252
    2222:	88 81       	ld	r24, Y
    2224:	c1 52       	subi	r28, 0x21	; 33
    2226:	d3 40       	sbci	r29, 0x03	; 3
    2228:	8f 93       	push	r24
    222a:	c0 5e       	subi	r28, 0xE0	; 224
    222c:	dc 4f       	sbci	r29, 0xFC	; 252
    222e:	88 81       	ld	r24, Y
    2230:	c0 52       	subi	r28, 0x20	; 32
    2232:	d3 40       	sbci	r29, 0x03	; 3
    2234:	8f 93       	push	r24
    2236:	c5 5e       	subi	r28, 0xE5	; 229
    2238:	dc 4f       	sbci	r29, 0xFC	; 252
    223a:	88 81       	ld	r24, Y
    223c:	cb 51       	subi	r28, 0x1B	; 27
    223e:	d3 40       	sbci	r29, 0x03	; 3
    2240:	8f 93       	push	r24
    2242:	c6 5e       	subi	r28, 0xE6	; 230
    2244:	dc 4f       	sbci	r29, 0xFC	; 252
    2246:	88 81       	ld	r24, Y
    2248:	ca 51       	subi	r28, 0x1A	; 26
    224a:	d3 40       	sbci	r29, 0x03	; 3
    224c:	8f 93       	push	r24
    224e:	c7 5e       	subi	r28, 0xE7	; 231
    2250:	dc 4f       	sbci	r29, 0xFC	; 252
    2252:	88 81       	ld	r24, Y
    2254:	c9 51       	subi	r28, 0x19	; 25
    2256:	d3 40       	sbci	r29, 0x03	; 3
    2258:	8f 93       	push	r24
    225a:	c8 5e       	subi	r28, 0xE8	; 232
    225c:	dc 4f       	sbci	r29, 0xFC	; 252
    225e:	88 81       	ld	r24, Y
    2260:	c8 51       	subi	r28, 0x18	; 24
    2262:	d3 40       	sbci	r29, 0x03	; 3
    2264:	8f 93       	push	r24
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	bf 93       	push	r27
    226c:	af 93       	push	r26
    226e:	ff 93       	push	r31
    2270:	ef 93       	push	r30
    2272:	7f 93       	push	r23
    2274:	6f 93       	push	r22
    2276:	5f 93       	push	r21
    2278:	4f 93       	push	r20
    227a:	3f 93       	push	r19
    227c:	2f 93       	push	r18
    227e:	c7 50       	subi	r28, 0x07	; 7
    2280:	dd 4f       	sbci	r29, 0xFD	; 253
    2282:	88 81       	ld	r24, Y
    2284:	c9 5f       	subi	r28, 0xF9	; 249
    2286:	d2 40       	sbci	r29, 0x02	; 2
    2288:	8f 93       	push	r24
    228a:	c8 50       	subi	r28, 0x08	; 8
    228c:	dd 4f       	sbci	r29, 0xFD	; 253
    228e:	88 81       	ld	r24, Y
    2290:	c8 5f       	subi	r28, 0xF8	; 248
    2292:	d2 40       	sbci	r29, 0x02	; 2
    2294:	8f 93       	push	r24
    2296:	c9 50       	subi	r28, 0x09	; 9
    2298:	dd 4f       	sbci	r29, 0xFD	; 253
    229a:	88 81       	ld	r24, Y
    229c:	c7 5f       	subi	r28, 0xF7	; 247
    229e:	d2 40       	sbci	r29, 0x02	; 2
    22a0:	8f 93       	push	r24
    22a2:	ca 50       	subi	r28, 0x0A	; 10
    22a4:	dd 4f       	sbci	r29, 0xFD	; 253
    22a6:	88 81       	ld	r24, Y
    22a8:	c6 5f       	subi	r28, 0xF6	; 246
    22aa:	d2 40       	sbci	r29, 0x02	; 2
    22ac:	8f 93       	push	r24
    22ae:	c3 50       	subi	r28, 0x03	; 3
    22b0:	dd 4f       	sbci	r29, 0xFD	; 253
    22b2:	88 81       	ld	r24, Y
    22b4:	cd 5f       	subi	r28, 0xFD	; 253
    22b6:	d2 40       	sbci	r29, 0x02	; 2
    22b8:	8f 93       	push	r24
    22ba:	c4 50       	subi	r28, 0x04	; 4
    22bc:	dd 4f       	sbci	r29, 0xFD	; 253
    22be:	88 81       	ld	r24, Y
    22c0:	cc 5f       	subi	r28, 0xFC	; 252
    22c2:	d2 40       	sbci	r29, 0x02	; 2
    22c4:	8f 93       	push	r24
    22c6:	c5 50       	subi	r28, 0x05	; 5
    22c8:	dd 4f       	sbci	r29, 0xFD	; 253
    22ca:	88 81       	ld	r24, Y
    22cc:	cb 5f       	subi	r28, 0xFB	; 251
    22ce:	d2 40       	sbci	r29, 0x02	; 2
    22d0:	8f 93       	push	r24
    22d2:	c6 50       	subi	r28, 0x06	; 6
    22d4:	dd 4f       	sbci	r29, 0xFD	; 253
    22d6:	88 81       	ld	r24, Y
    22d8:	ca 5f       	subi	r28, 0xFA	; 250
    22da:	d2 40       	sbci	r29, 0x02	; 2
    22dc:	8f 93       	push	r24
    22de:	1f 92       	push	r1
    22e0:	df 92       	push	r13
    22e2:	ce 01       	movw	r24, r28
    22e4:	86 5f       	subi	r24, 0xF6	; 246
    22e6:	9e 4f       	sbci	r25, 0xFE	; 254
    22e8:	9f 93       	push	r25
    22ea:	8f 93       	push	r24
    22ec:	8c 54       	subi	r24, 0x4C	; 76
    22ee:	9f 4f       	sbci	r25, 0xFF	; 255
    22f0:	9f 93       	push	r25
    22f2:	8f 93       	push	r24
    22f4:	8e 01       	movw	r16, r28
    22f6:	0f 5f       	subi	r16, 0xFF	; 255
    22f8:	1f 4f       	sbci	r17, 0xFF	; 255
    22fa:	1f 93       	push	r17
    22fc:	0f 93       	push	r16
    22fe:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
				voltage, t0, pid.p, pid.i, pid.d, pid.maxI, pid.minPos, pid.maxPos, pcmd[cstack].cid);
			printLine(outbuf);
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	c8 01       	movw	r24, r16
    2308:	0e 94 a3 03 	call	0x746	; 0x746 <printLine>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    230c:	f1 2c       	mov	r15, r1
				return(ERROR);
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, t0, pid.p, pid.i, pid.d, pid.maxI, pid.minPos, pid.maxPos, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    230e:	32 c4       	rjmp	.+2148   	; 0x2b74 <report+0xc0a>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    2310:	ce 01       	movw	r24, r28
    2312:	86 5f       	subi	r24, 0xF6	; 246
    2314:	9e 4f       	sbci	r25, 0xFE	; 254
    2316:	0e 94 ca 06 	call	0xd94	; 0xd94 <get_time>
			controller = pcmd[cstack].cobject + 31;
    231a:	84 e3       	ldi	r24, 0x34	; 52
    231c:	80 9f       	mul	r24, r16
    231e:	f0 01       	movw	r30, r0
    2320:	81 9f       	mul	r24, r17
    2322:	f0 0d       	add	r31, r0
    2324:	11 24       	eor	r1, r1
    2326:	e3 5f       	subi	r30, 0xF3	; 243
    2328:	f7 4d       	sbci	r31, 0xD7	; 215
    232a:	81 81       	ldd	r24, Z+1	; 0x01
    232c:	0f 2e       	mov	r0, r31
    232e:	ff e1       	ldi	r31, 0x1F	; 31
    2330:	ef 2e       	mov	r14, r31
    2332:	f0 2d       	mov	r31, r0
    2334:	e8 0e       	add	r14, r24

			if (get_MOTOR_ENCODER(controller, &encoderValue) == ERROR) {
    2336:	be 01       	movw	r22, r28
    2338:	62 51       	subi	r22, 0x12	; 18
    233a:	7d 4f       	sbci	r23, 0xFD	; 253
    233c:	8e 2d       	mov	r24, r14
    233e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <get_MOTOR_ENCODER>
    2342:	f8 2e       	mov	r15, r24
    2344:	93 e6       	ldi	r25, 0x63	; 99
    2346:	89 13       	cpse	r24, r25
    2348:	07 c0       	rjmp	.+14     	; 0x2358 <report+0x3ee>
				printError(ERR_MTR, "report: get_MOTOR_ENCODER error");
    234a:	61 e7       	ldi	r22, 0x71	; 113
    234c:	7e e9       	ldi	r23, 0x9E	; 158
    234e:	86 e3       	ldi	r24, 0x36	; 54
    2350:	91 e0       	ldi	r25, 0x01	; 1
    2352:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
				return(ERROR);
    2356:	0e c4       	rjmp	.+2076   	; 0x2b74 <report+0xc0a>
			}
			micronValue = encoderValue/ENC_COUNTS_PER_MICRON;
    2358:	c2 51       	subi	r28, 0x12	; 18
    235a:	dd 4f       	sbci	r29, 0xFD	; 253
    235c:	68 81       	ld	r22, Y
    235e:	79 81       	ldd	r23, Y+1	; 0x01
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	9b 81       	ldd	r25, Y+3	; 0x03
    2364:	ce 5e       	subi	r28, 0xEE	; 238
    2366:	d2 40       	sbci	r29, 0x02	; 2
    2368:	2c e0       	ldi	r18, 0x0C	; 12
    236a:	31 e0       	ldi	r19, 0x01	; 1
    236c:	40 e0       	ldi	r20, 0x00	; 0
    236e:	50 e0       	ldi	r21, 0x00	; 0
    2370:	0e 94 12 26 	call	0x4c24	; 0x4c24 <__divmodsi4>
    2374:	f2 2e       	mov	r15, r18
    2376:	d3 2e       	mov	r13, r19
    2378:	c4 2e       	mov	r12, r20
    237a:	b5 2e       	mov	r11, r21

			if (get_MOTOR_SPEED(controller, &encoderSpeed) == ERROR) {
    237c:	be 01       	movw	r22, r28
    237e:	6e 50       	subi	r22, 0x0E	; 14
    2380:	7d 4f       	sbci	r23, 0xFD	; 253
    2382:	8e 2d       	mov	r24, r14
    2384:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <get_MOTOR_SPEED>
    2388:	83 36       	cpi	r24, 0x63	; 99
    238a:	61 f4       	brne	.+24     	; 0x23a4 <report+0x43a>
				encoderSpeed = 0x7FFFFFFF;
    238c:	8f ef       	ldi	r24, 0xFF	; 255
    238e:	9f ef       	ldi	r25, 0xFF	; 255
    2390:	af ef       	ldi	r26, 0xFF	; 255
    2392:	bf e7       	ldi	r27, 0x7F	; 127
    2394:	ce 50       	subi	r28, 0x0E	; 14
    2396:	dd 4f       	sbci	r29, 0xFD	; 253
    2398:	88 83       	st	Y, r24
    239a:	99 83       	std	Y+1, r25	; 0x01
    239c:	aa 83       	std	Y+2, r26	; 0x02
    239e:	bb 83       	std	Y+3, r27	; 0x03
    23a0:	c2 5f       	subi	r28, 0xF2	; 242
    23a2:	d2 40       	sbci	r29, 0x02	; 2
			}

			micronSpeed = encoderSpeed/ENC_COUNTS_PER_MICRON;
    23a4:	ce 50       	subi	r28, 0x0E	; 14
    23a6:	dd 4f       	sbci	r29, 0xFD	; 253
    23a8:	68 81       	ld	r22, Y
    23aa:	79 81       	ldd	r23, Y+1	; 0x01
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	9b 81       	ldd	r25, Y+3	; 0x03
    23b0:	c2 5f       	subi	r28, 0xF2	; 242
    23b2:	d2 40       	sbci	r29, 0x02	; 2
    23b4:	2c e0       	ldi	r18, 0x0C	; 12
    23b6:	31 e0       	ldi	r19, 0x01	; 1
    23b8:	40 e0       	ldi	r20, 0x00	; 0
    23ba:	50 e0       	ldi	r21, 0x00	; 0
    23bc:	0e 94 12 26 	call	0x4c24	; 0x4c24 <__divmodsi4>
    23c0:	a2 2e       	mov	r10, r18
    23c2:	93 2e       	mov	r9, r19
    23c4:	84 2e       	mov	r8, r20
    23c6:	75 2e       	mov	r7, r21

			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
    23c8:	be 01       	movw	r22, r28
    23ca:	62 50       	subi	r22, 0x02	; 2
    23cc:	7d 4f       	sbci	r23, 0xFD	; 253
    23ce:	8e 2d       	mov	r24, r14
    23d0:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <get_MOTOR_CURRENT>
    23d4:	83 36       	cpi	r24, 0x63	; 99
    23d6:	71 f4       	brne	.+28     	; 0x23f4 <report+0x48a>
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
    23d8:	61 e9       	ldi	r22, 0x91	; 145
    23da:	7e e9       	ldi	r23, 0x9E	; 158
    23dc:	86 e3       	ldi	r24, 0x36	; 54
    23de:	91 e0       	ldi	r25, 0x01	; 1
    23e0:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
				motorCurrent = 0xFFFF;
    23e4:	8f ef       	ldi	r24, 0xFF	; 255
    23e6:	9f ef       	ldi	r25, 0xFF	; 255
    23e8:	c2 50       	subi	r28, 0x02	; 2
    23ea:	dd 4f       	sbci	r29, 0xFD	; 253
    23ec:	88 83       	st	Y, r24
    23ee:	99 83       	std	Y+1, r25	; 0x01
    23f0:	ce 5f       	subi	r28, 0xFE	; 254
    23f2:	d2 40       	sbci	r29, 0x02	; 2
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
			micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
    23f4:	24 e3       	ldi	r18, 0x34	; 52
    23f6:	20 9f       	mul	r18, r16
    23f8:	c0 01       	movw	r24, r0
    23fa:	21 9f       	mul	r18, r17
    23fc:	90 0d       	add	r25, r0
    23fe:	11 24       	eor	r1, r1
    2400:	9c 01       	movw	r18, r24
    2402:	28 5c       	subi	r18, 0xC8	; 200
    2404:	37 4d       	sbci	r19, 0xD7	; 215

			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
				motorCurrent = 0xFFFF;
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
    2406:	fc 01       	movw	r30, r24
    2408:	e3 5f       	subi	r30, 0xF3	; 243
    240a:	f7 4d       	sbci	r31, 0xD7	; 215
    240c:	81 81       	ldd	r24, Z+1	; 0x01
    240e:	3f 93       	push	r19
    2410:	2f 93       	push	r18
    2412:	c1 50       	subi	r28, 0x01	; 1
    2414:	dd 4f       	sbci	r29, 0xFD	; 253
    2416:	98 81       	ld	r25, Y
    2418:	cf 5f       	subi	r28, 0xFF	; 255
    241a:	d2 40       	sbci	r29, 0x02	; 2
    241c:	9f 93       	push	r25
    241e:	c2 50       	subi	r28, 0x02	; 2
    2420:	dd 4f       	sbci	r29, 0xFD	; 253
    2422:	98 81       	ld	r25, Y
    2424:	ce 5f       	subi	r28, 0xFE	; 254
    2426:	d2 40       	sbci	r29, 0x02	; 2
    2428:	9f 93       	push	r25
    242a:	7f 92       	push	r7
    242c:	8f 92       	push	r8
    242e:	9f 92       	push	r9
    2430:	af 92       	push	r10
    2432:	bf 92       	push	r11
    2434:	cf 92       	push	r12
    2436:	df 92       	push	r13
    2438:	ff 92       	push	r15
    243a:	1f 92       	push	r1
    243c:	8f 93       	push	r24
    243e:	ce 01       	movw	r24, r28
    2440:	86 5f       	subi	r24, 0xF6	; 246
    2442:	9e 4f       	sbci	r25, 0xFE	; 254
    2444:	9f 93       	push	r25
    2446:	8f 93       	push	r24
    2448:	8b 57       	subi	r24, 0x7B	; 123
    244a:	9f 4f       	sbci	r25, 0xFF	; 255
    244c:	9f 93       	push	r25
    244e:	8f 93       	push	r24
    2450:	8e 01       	movw	r16, r28
    2452:	0f 5f       	subi	r16, 0xFF	; 255
    2454:	1f 4f       	sbci	r17, 0xFF	; 255
    2456:	1f 93       	push	r17
    2458:	0f 93       	push	r16
    245a:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
			printLine(outbuf);
    245e:	c8 01       	movw	r24, r16
    2460:	0e 94 a3 03 	call	0x746	; 0x746 <printLine>
			break;
    2464:	cd bf       	out	0x3d, r28	; 61
    2466:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2468:	f1 2c       	mov	r15, r1
				motorCurrent = 0xFFFF;
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
			micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    246a:	84 c3       	rjmp	.+1800   	; 0x2b74 <report+0xc0a>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <get_temperature>
    2472:	ca 50       	subi	r28, 0x0A	; 10
    2474:	dd 4f       	sbci	r29, 0xFD	; 253
    2476:	68 83       	st	Y, r22
    2478:	79 83       	std	Y+1, r23	; 0x01
    247a:	8a 83       	std	Y+2, r24	; 0x02
    247c:	9b 83       	std	Y+3, r25	; 0x03
    247e:	c6 5f       	subi	r28, 0xF6	; 246
    2480:	d2 40       	sbci	r29, 0x02	; 2
			h0 = get_humidity(0);
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	0e 94 9d 08 	call	0x113a	; 0x113a <get_humidity>
    2488:	d6 2e       	mov	r13, r22
    248a:	c7 2e       	mov	r12, r23
    248c:	b8 2e       	mov	r11, r24
    248e:	a9 2e       	mov	r10, r25
			t1 = get_temperature(1);
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <get_temperature>
    2496:	c8 5d       	subi	r28, 0xD8	; 216
    2498:	dc 4f       	sbci	r29, 0xFC	; 252
    249a:	68 83       	st	Y, r22
    249c:	c8 52       	subi	r28, 0x28	; 40
    249e:	d3 40       	sbci	r29, 0x03	; 3
    24a0:	c7 5d       	subi	r28, 0xD7	; 215
    24a2:	dc 4f       	sbci	r29, 0xFC	; 252
    24a4:	78 83       	st	Y, r23
    24a6:	c9 52       	subi	r28, 0x29	; 41
    24a8:	d3 40       	sbci	r29, 0x03	; 3
    24aa:	c6 5d       	subi	r28, 0xD6	; 214
    24ac:	dc 4f       	sbci	r29, 0xFC	; 252
    24ae:	88 83       	st	Y, r24
    24b0:	ca 52       	subi	r28, 0x2A	; 42
    24b2:	d3 40       	sbci	r29, 0x03	; 3
    24b4:	c5 5d       	subi	r28, 0xD5	; 213
    24b6:	dc 4f       	sbci	r29, 0xFC	; 252
    24b8:	98 83       	st	Y, r25
    24ba:	cb 52       	subi	r28, 0x2B	; 43
    24bc:	d3 40       	sbci	r29, 0x03	; 3
			h1 = get_humidity(1);
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	0e 94 9d 08 	call	0x113a	; 0x113a <get_humidity>
    24c4:	c4 5d       	subi	r28, 0xD4	; 212
    24c6:	dc 4f       	sbci	r29, 0xFC	; 252
    24c8:	68 83       	st	Y, r22
    24ca:	cc 52       	subi	r28, 0x2C	; 44
    24cc:	d3 40       	sbci	r29, 0x03	; 3
    24ce:	c3 5d       	subi	r28, 0xD3	; 211
    24d0:	dc 4f       	sbci	r29, 0xFC	; 252
    24d2:	78 83       	st	Y, r23
    24d4:	cd 52       	subi	r28, 0x2D	; 45
    24d6:	d3 40       	sbci	r29, 0x03	; 3
    24d8:	c2 5d       	subi	r28, 0xD2	; 210
    24da:	dc 4f       	sbci	r29, 0xFC	; 252
    24dc:	88 83       	st	Y, r24
    24de:	ce 52       	subi	r28, 0x2E	; 46
    24e0:	d3 40       	sbci	r29, 0x03	; 3
    24e2:	c1 5d       	subi	r28, 0xD1	; 209
    24e4:	dc 4f       	sbci	r29, 0xFC	; 252
    24e6:	98 83       	st	Y, r25
    24e8:	cf 52       	subi	r28, 0x2F	; 47
    24ea:	d3 40       	sbci	r29, 0x03	; 3
			t2 = get_temperature(2);
    24ec:	82 e0       	ldi	r24, 0x02	; 2
    24ee:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <get_temperature>
    24f2:	c0 5d       	subi	r28, 0xD0	; 208
    24f4:	dc 4f       	sbci	r29, 0xFC	; 252
    24f6:	68 83       	st	Y, r22
    24f8:	c0 53       	subi	r28, 0x30	; 48
    24fa:	d3 40       	sbci	r29, 0x03	; 3
    24fc:	cf 5c       	subi	r28, 0xCF	; 207
    24fe:	dc 4f       	sbci	r29, 0xFC	; 252
    2500:	78 83       	st	Y, r23
    2502:	c1 53       	subi	r28, 0x31	; 49
    2504:	d3 40       	sbci	r29, 0x03	; 3
    2506:	98 2e       	mov	r9, r24
    2508:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    250a:	82 e0       	ldi	r24, 0x02	; 2
    250c:	0e 94 9d 08 	call	0x113a	; 0x113a <get_humidity>
    2510:	76 2e       	mov	r7, r22
    2512:	67 2e       	mov	r6, r23
    2514:	58 2e       	mov	r5, r24
    2516:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    2518:	83 e0       	ldi	r24, 0x03	; 3
    251a:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <get_temperature>
    251e:	ce 5c       	subi	r28, 0xCE	; 206
    2520:	dc 4f       	sbci	r29, 0xFC	; 252
    2522:	68 83       	st	Y, r22
    2524:	c2 53       	subi	r28, 0x32	; 50
    2526:	d3 40       	sbci	r29, 0x03	; 3
    2528:	cd 5c       	subi	r28, 0xCD	; 205
    252a:	dc 4f       	sbci	r29, 0xFC	; 252
    252c:	78 83       	st	Y, r23
    252e:	c3 53       	subi	r28, 0x33	; 51
    2530:	d3 40       	sbci	r29, 0x03	; 3
    2532:	38 2e       	mov	r3, r24
    2534:	29 2e       	mov	r2, r25
			get_time(currenttime);
    2536:	7e 01       	movw	r14, r28
    2538:	96 ef       	ldi	r25, 0xF6	; 246
    253a:	e9 1a       	sub	r14, r25
    253c:	9e ef       	ldi	r25, 0xFE	; 254
    253e:	f9 0a       	sbc	r15, r25
    2540:	c7 01       	movw	r24, r14
    2542:	0e 94 ca 06 	call	0xd94	; 0xd94 <get_time>
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    2546:	24 e3       	ldi	r18, 0x34	; 52
    2548:	20 9f       	mul	r18, r16
    254a:	c0 01       	movw	r24, r0
    254c:	21 9f       	mul	r18, r17
    254e:	90 0d       	add	r25, r0
    2550:	11 24       	eor	r1, r1
    2552:	88 5c       	subi	r24, 0xC8	; 200
    2554:	97 4d       	sbci	r25, 0xD7	; 215
    2556:	9f 93       	push	r25
    2558:	8f 93       	push	r24
    255a:	2f 92       	push	r2
    255c:	3f 92       	push	r3
    255e:	cd 5c       	subi	r28, 0xCD	; 205
    2560:	dc 4f       	sbci	r29, 0xFC	; 252
    2562:	88 81       	ld	r24, Y
    2564:	c3 53       	subi	r28, 0x33	; 51
    2566:	d3 40       	sbci	r29, 0x03	; 3
    2568:	8f 93       	push	r24
    256a:	ce 5c       	subi	r28, 0xCE	; 206
    256c:	dc 4f       	sbci	r29, 0xFC	; 252
    256e:	98 81       	ld	r25, Y
    2570:	c2 53       	subi	r28, 0x32	; 50
    2572:	d3 40       	sbci	r29, 0x03	; 3
    2574:	9f 93       	push	r25
    2576:	4f 92       	push	r4
    2578:	5f 92       	push	r5
    257a:	6f 92       	push	r6
    257c:	7f 92       	push	r7
    257e:	8f 92       	push	r8
    2580:	9f 92       	push	r9
    2582:	cf 5c       	subi	r28, 0xCF	; 207
    2584:	dc 4f       	sbci	r29, 0xFC	; 252
    2586:	88 81       	ld	r24, Y
    2588:	c1 53       	subi	r28, 0x31	; 49
    258a:	d3 40       	sbci	r29, 0x03	; 3
    258c:	8f 93       	push	r24
    258e:	c0 5d       	subi	r28, 0xD0	; 208
    2590:	dc 4f       	sbci	r29, 0xFC	; 252
    2592:	98 81       	ld	r25, Y
    2594:	c0 53       	subi	r28, 0x30	; 48
    2596:	d3 40       	sbci	r29, 0x03	; 3
    2598:	9f 93       	push	r25
    259a:	c1 5d       	subi	r28, 0xD1	; 209
    259c:	dc 4f       	sbci	r29, 0xFC	; 252
    259e:	88 81       	ld	r24, Y
    25a0:	cf 52       	subi	r28, 0x2F	; 47
    25a2:	d3 40       	sbci	r29, 0x03	; 3
    25a4:	8f 93       	push	r24
    25a6:	c2 5d       	subi	r28, 0xD2	; 210
    25a8:	dc 4f       	sbci	r29, 0xFC	; 252
    25aa:	98 81       	ld	r25, Y
    25ac:	ce 52       	subi	r28, 0x2E	; 46
    25ae:	d3 40       	sbci	r29, 0x03	; 3
    25b0:	9f 93       	push	r25
    25b2:	c3 5d       	subi	r28, 0xD3	; 211
    25b4:	dc 4f       	sbci	r29, 0xFC	; 252
    25b6:	88 81       	ld	r24, Y
    25b8:	cd 52       	subi	r28, 0x2D	; 45
    25ba:	d3 40       	sbci	r29, 0x03	; 3
    25bc:	8f 93       	push	r24
    25be:	c4 5d       	subi	r28, 0xD4	; 212
    25c0:	dc 4f       	sbci	r29, 0xFC	; 252
    25c2:	98 81       	ld	r25, Y
    25c4:	cc 52       	subi	r28, 0x2C	; 44
    25c6:	d3 40       	sbci	r29, 0x03	; 3
    25c8:	9f 93       	push	r25
    25ca:	c5 5d       	subi	r28, 0xD5	; 213
    25cc:	dc 4f       	sbci	r29, 0xFC	; 252
    25ce:	88 81       	ld	r24, Y
    25d0:	cb 52       	subi	r28, 0x2B	; 43
    25d2:	d3 40       	sbci	r29, 0x03	; 3
    25d4:	8f 93       	push	r24
    25d6:	c6 5d       	subi	r28, 0xD6	; 214
    25d8:	dc 4f       	sbci	r29, 0xFC	; 252
    25da:	98 81       	ld	r25, Y
    25dc:	ca 52       	subi	r28, 0x2A	; 42
    25de:	d3 40       	sbci	r29, 0x03	; 3
    25e0:	9f 93       	push	r25
    25e2:	c7 5d       	subi	r28, 0xD7	; 215
    25e4:	dc 4f       	sbci	r29, 0xFC	; 252
    25e6:	88 81       	ld	r24, Y
    25e8:	c9 52       	subi	r28, 0x29	; 41
    25ea:	d3 40       	sbci	r29, 0x03	; 3
    25ec:	8f 93       	push	r24
    25ee:	c8 5d       	subi	r28, 0xD8	; 216
    25f0:	dc 4f       	sbci	r29, 0xFC	; 252
    25f2:	98 81       	ld	r25, Y
    25f4:	c8 52       	subi	r28, 0x28	; 40
    25f6:	d3 40       	sbci	r29, 0x03	; 3
    25f8:	9f 93       	push	r25
    25fa:	af 92       	push	r10
    25fc:	bf 92       	push	r11
    25fe:	cf 92       	push	r12
    2600:	df 92       	push	r13
    2602:	c7 50       	subi	r28, 0x07	; 7
    2604:	dd 4f       	sbci	r29, 0xFD	; 253
    2606:	88 81       	ld	r24, Y
    2608:	c9 5f       	subi	r28, 0xF9	; 249
    260a:	d2 40       	sbci	r29, 0x02	; 2
    260c:	8f 93       	push	r24
    260e:	c8 50       	subi	r28, 0x08	; 8
    2610:	dd 4f       	sbci	r29, 0xFD	; 253
    2612:	88 81       	ld	r24, Y
    2614:	c8 5f       	subi	r28, 0xF8	; 248
    2616:	d2 40       	sbci	r29, 0x02	; 2
    2618:	8f 93       	push	r24
    261a:	c9 50       	subi	r28, 0x09	; 9
    261c:	dd 4f       	sbci	r29, 0xFD	; 253
    261e:	88 81       	ld	r24, Y
    2620:	c7 5f       	subi	r28, 0xF7	; 247
    2622:	d2 40       	sbci	r29, 0x02	; 2
    2624:	8f 93       	push	r24
    2626:	ca 50       	subi	r28, 0x0A	; 10
    2628:	dd 4f       	sbci	r29, 0xFD	; 253
    262a:	88 81       	ld	r24, Y
    262c:	c6 5f       	subi	r28, 0xF6	; 246
    262e:	d2 40       	sbci	r29, 0x02	; 2
    2630:	8f 93       	push	r24
    2632:	ff 92       	push	r15
    2634:	ef 92       	push	r14
    2636:	ce 01       	movw	r24, r28
    2638:	86 5b       	subi	r24, 0xB6	; 182
    263a:	9e 4f       	sbci	r25, 0xFE	; 254
    263c:	9f 93       	push	r25
    263e:	8f 93       	push	r24
    2640:	8e 01       	movw	r16, r28
    2642:	0f 5f       	subi	r16, 0xFF	; 255
    2644:	1f 4f       	sbci	r17, 0xFF	; 255
    2646:	1f 93       	push	r17
    2648:	0f 93       	push	r16
    264a:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			printLine(outbuf);
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	c8 01       	movw	r24, r16
    2654:	0e 94 a3 03 	call	0x746	; 0x746 <printLine>
			writestr_OLED(1, "Temp & Humidity", 1);
    2658:	41 e0       	ldi	r20, 0x01	; 1
    265a:	61 eb       	ldi	r22, 0xB1	; 177
    265c:	7e e9       	ldi	r23, 0x9E	; 158
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    2664:	ca 50       	subi	r28, 0x0A	; 10
    2666:	dd 4f       	sbci	r29, 0xFD	; 253
    2668:	f8 80       	ld	r15, Y
    266a:	c6 5f       	subi	r28, 0xF6	; 246
    266c:	d2 40       	sbci	r29, 0x02	; 2
    266e:	c9 50       	subi	r28, 0x09	; 9
    2670:	dd 4f       	sbci	r29, 0xFD	; 253
    2672:	e8 80       	ld	r14, Y
    2674:	c7 5f       	subi	r28, 0xF7	; 247
    2676:	d2 40       	sbci	r29, 0x02	; 2
    2678:	c8 50       	subi	r28, 0x08	; 8
    267a:	dd 4f       	sbci	r29, 0xFD	; 253
    267c:	98 80       	ld	r9, Y
    267e:	c8 5f       	subi	r28, 0xF8	; 248
    2680:	d2 40       	sbci	r29, 0x02	; 2
    2682:	c7 50       	subi	r28, 0x07	; 7
    2684:	dd 4f       	sbci	r29, 0xFD	; 253
    2686:	88 80       	ld	r8, Y
    2688:	c9 5f       	subi	r28, 0xF9	; 249
    268a:	d2 40       	sbci	r29, 0x02	; 2
    268c:	26 e6       	ldi	r18, 0x66	; 102
    268e:	36 e6       	ldi	r19, 0x66	; 102
    2690:	46 ee       	ldi	r20, 0xE6	; 230
    2692:	5f e3       	ldi	r21, 0x3F	; 63
    2694:	6f 2d       	mov	r22, r15
    2696:	7e 2d       	mov	r23, r14
    2698:	89 2d       	mov	r24, r9
    269a:	98 2d       	mov	r25, r8
    269c:	0e 94 14 22 	call	0x4428	; 0x4428 <__mulsf3>
    26a0:	af 92       	push	r10
    26a2:	bf 92       	push	r11
    26a4:	cf 92       	push	r12
    26a6:	df 92       	push	r13
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e0       	ldi	r20, 0x00	; 0
    26ae:	52 e4       	ldi	r21, 0x42	; 66
    26b0:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__addsf3>
    26b4:	9f 93       	push	r25
    26b6:	8f 93       	push	r24
    26b8:	7f 93       	push	r23
    26ba:	6f 93       	push	r22
    26bc:	8f 92       	push	r8
    26be:	9f 92       	push	r9
    26c0:	ef 92       	push	r14
    26c2:	ff 92       	push	r15
    26c4:	81 ec       	ldi	r24, 0xC1	; 193
    26c6:	9e e9       	ldi	r25, 0x9E	; 158
    26c8:	9f 93       	push	r25
    26ca:	8f 93       	push	r24
    26cc:	1f 93       	push	r17
    26ce:	0f 93       	push	r16
    26d0:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			writestr_OLED(1, outbuf, 2);
    26d4:	42 e0       	ldi	r20, 0x02	; 2
    26d6:	b8 01       	movw	r22, r16
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <writestr_OLED>
			break;
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    26e2:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    26e4:	47 c2       	rjmp	.+1166   	; 0x2b74 <report+0xc0a>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    26e6:	ae 01       	movw	r20, r28
    26e8:	48 5f       	subi	r20, 0xF8	; 248
    26ea:	5c 4f       	sbci	r21, 0xFC	; 252
    26ec:	be 01       	movw	r22, r28
    26ee:	6c 5f       	subi	r22, 0xFC	; 252
    26f0:	7c 4f       	sbci	r23, 0xFC	; 252
    26f2:	ce 01       	movw	r24, r28
    26f4:	9d 5f       	subi	r25, 0xFD	; 253
    26f6:	0e 94 0b 0b 	call	0x1616	; 0x1616 <get_orientation>
			get_time(currenttime);
    26fa:	7e 01       	movw	r14, r28
    26fc:	96 ef       	ldi	r25, 0xF6	; 246
    26fe:	e9 1a       	sub	r14, r25
    2700:	9e ef       	ldi	r25, 0xFE	; 254
    2702:	f9 0a       	sbc	r15, r25
    2704:	c7 01       	movw	r24, r14
    2706:	0e 94 ca 06 	call	0xd94	; 0xd94 <get_time>
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
    270a:	24 e3       	ldi	r18, 0x34	; 52
    270c:	20 9f       	mul	r18, r16
    270e:	c0 01       	movw	r24, r0
    2710:	21 9f       	mul	r18, r17
    2712:	90 0d       	add	r25, r0
    2714:	11 24       	eor	r1, r1
    2716:	88 5c       	subi	r24, 0xC8	; 200
    2718:	97 4d       	sbci	r25, 0xD7	; 215
    271a:	9f 93       	push	r25
    271c:	8f 93       	push	r24
    271e:	c5 5f       	subi	r28, 0xF5	; 245
    2720:	dc 4f       	sbci	r29, 0xFC	; 252
    2722:	88 81       	ld	r24, Y
    2724:	cb 50       	subi	r28, 0x0B	; 11
    2726:	d3 40       	sbci	r29, 0x03	; 3
    2728:	8f 93       	push	r24
    272a:	c6 5f       	subi	r28, 0xF6	; 246
    272c:	dc 4f       	sbci	r29, 0xFC	; 252
    272e:	88 81       	ld	r24, Y
    2730:	ca 50       	subi	r28, 0x0A	; 10
    2732:	d3 40       	sbci	r29, 0x03	; 3
    2734:	8f 93       	push	r24
    2736:	c7 5f       	subi	r28, 0xF7	; 247
    2738:	dc 4f       	sbci	r29, 0xFC	; 252
    273a:	88 81       	ld	r24, Y
    273c:	c9 50       	subi	r28, 0x09	; 9
    273e:	d3 40       	sbci	r29, 0x03	; 3
    2740:	8f 93       	push	r24
    2742:	c8 5f       	subi	r28, 0xF8	; 248
    2744:	dc 4f       	sbci	r29, 0xFC	; 252
    2746:	88 81       	ld	r24, Y
    2748:	c8 50       	subi	r28, 0x08	; 8
    274a:	d3 40       	sbci	r29, 0x03	; 3
    274c:	8f 93       	push	r24
    274e:	c9 5f       	subi	r28, 0xF9	; 249
    2750:	dc 4f       	sbci	r29, 0xFC	; 252
    2752:	88 81       	ld	r24, Y
    2754:	c7 50       	subi	r28, 0x07	; 7
    2756:	d3 40       	sbci	r29, 0x03	; 3
    2758:	8f 93       	push	r24
    275a:	ca 5f       	subi	r28, 0xFA	; 250
    275c:	dc 4f       	sbci	r29, 0xFC	; 252
    275e:	88 81       	ld	r24, Y
    2760:	c6 50       	subi	r28, 0x06	; 6
    2762:	d3 40       	sbci	r29, 0x03	; 3
    2764:	8f 93       	push	r24
    2766:	cb 5f       	subi	r28, 0xFB	; 251
    2768:	dc 4f       	sbci	r29, 0xFC	; 252
    276a:	88 81       	ld	r24, Y
    276c:	c5 50       	subi	r28, 0x05	; 5
    276e:	d3 40       	sbci	r29, 0x03	; 3
    2770:	8f 93       	push	r24
    2772:	cc 5f       	subi	r28, 0xFC	; 252
    2774:	dc 4f       	sbci	r29, 0xFC	; 252
    2776:	88 81       	ld	r24, Y
    2778:	c4 50       	subi	r28, 0x04	; 4
    277a:	d3 40       	sbci	r29, 0x03	; 3
    277c:	8f 93       	push	r24
    277e:	cd 5f       	subi	r28, 0xFD	; 253
    2780:	dc 4f       	sbci	r29, 0xFC	; 252
    2782:	88 81       	ld	r24, Y
    2784:	c3 50       	subi	r28, 0x03	; 3
    2786:	d3 40       	sbci	r29, 0x03	; 3
    2788:	8f 93       	push	r24
    278a:	ce 5f       	subi	r28, 0xFE	; 254
    278c:	dc 4f       	sbci	r29, 0xFC	; 252
    278e:	88 81       	ld	r24, Y
    2790:	c2 50       	subi	r28, 0x02	; 2
    2792:	d3 40       	sbci	r29, 0x03	; 3
    2794:	8f 93       	push	r24
    2796:	cf 5f       	subi	r28, 0xFF	; 255
    2798:	dc 4f       	sbci	r29, 0xFC	; 252
    279a:	88 81       	ld	r24, Y
    279c:	c1 50       	subi	r28, 0x01	; 1
    279e:	d3 40       	sbci	r29, 0x03	; 3
    27a0:	8f 93       	push	r24
    27a2:	c0 50       	subi	r28, 0x00	; 0
    27a4:	dd 4f       	sbci	r29, 0xFD	; 253
    27a6:	88 81       	ld	r24, Y
    27a8:	c0 50       	subi	r28, 0x00	; 0
    27aa:	d3 40       	sbci	r29, 0x03	; 3
    27ac:	8f 93       	push	r24
    27ae:	ff 92       	push	r15
    27b0:	ef 92       	push	r14
    27b2:	ce 01       	movw	r24, r28
    27b4:	8b 5e       	subi	r24, 0xEB	; 235
    27b6:	9d 4f       	sbci	r25, 0xFD	; 253
    27b8:	9f 93       	push	r25
    27ba:	8f 93       	push	r24
    27bc:	8e 01       	movw	r16, r28
    27be:	0f 5f       	subi	r16, 0xFF	; 255
    27c0:	1f 4f       	sbci	r17, 0xFF	; 255
    27c2:	1f 93       	push	r17
    27c4:	0f 93       	push	r16
    27c6:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			printLine(outbuf);
    27ca:	c8 01       	movw	r24, r16
    27cc:	0e 94 a3 03 	call	0x746	; 0x746 <printLine>
			writestr_OLED(1, "Orientation", 1);
    27d0:	41 e0       	ldi	r20, 0x01	; 1
    27d2:	67 ed       	ldi	r22, 0xD7	; 215
    27d4:	7e e9       	ldi	r23, 0x9E	; 158
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    27dc:	c5 5f       	subi	r28, 0xF5	; 245
    27de:	dc 4f       	sbci	r29, 0xFC	; 252
    27e0:	88 81       	ld	r24, Y
    27e2:	cb 50       	subi	r28, 0x0B	; 11
    27e4:	d3 40       	sbci	r29, 0x03	; 3
    27e6:	8f 93       	push	r24
    27e8:	c6 5f       	subi	r28, 0xF6	; 246
    27ea:	dc 4f       	sbci	r29, 0xFC	; 252
    27ec:	88 81       	ld	r24, Y
    27ee:	ca 50       	subi	r28, 0x0A	; 10
    27f0:	d3 40       	sbci	r29, 0x03	; 3
    27f2:	8f 93       	push	r24
    27f4:	c7 5f       	subi	r28, 0xF7	; 247
    27f6:	dc 4f       	sbci	r29, 0xFC	; 252
    27f8:	88 81       	ld	r24, Y
    27fa:	c9 50       	subi	r28, 0x09	; 9
    27fc:	d3 40       	sbci	r29, 0x03	; 3
    27fe:	8f 93       	push	r24
    2800:	c8 5f       	subi	r28, 0xF8	; 248
    2802:	dc 4f       	sbci	r29, 0xFC	; 252
    2804:	88 81       	ld	r24, Y
    2806:	c8 50       	subi	r28, 0x08	; 8
    2808:	d3 40       	sbci	r29, 0x03	; 3
    280a:	8f 93       	push	r24
    280c:	c9 5f       	subi	r28, 0xF9	; 249
    280e:	dc 4f       	sbci	r29, 0xFC	; 252
    2810:	88 81       	ld	r24, Y
    2812:	c7 50       	subi	r28, 0x07	; 7
    2814:	d3 40       	sbci	r29, 0x03	; 3
    2816:	8f 93       	push	r24
    2818:	ca 5f       	subi	r28, 0xFA	; 250
    281a:	dc 4f       	sbci	r29, 0xFC	; 252
    281c:	88 81       	ld	r24, Y
    281e:	c6 50       	subi	r28, 0x06	; 6
    2820:	d3 40       	sbci	r29, 0x03	; 3
    2822:	8f 93       	push	r24
    2824:	cb 5f       	subi	r28, 0xFB	; 251
    2826:	dc 4f       	sbci	r29, 0xFC	; 252
    2828:	88 81       	ld	r24, Y
    282a:	c5 50       	subi	r28, 0x05	; 5
    282c:	d3 40       	sbci	r29, 0x03	; 3
    282e:	8f 93       	push	r24
    2830:	cc 5f       	subi	r28, 0xFC	; 252
    2832:	dc 4f       	sbci	r29, 0xFC	; 252
    2834:	88 81       	ld	r24, Y
    2836:	c4 50       	subi	r28, 0x04	; 4
    2838:	d3 40       	sbci	r29, 0x03	; 3
    283a:	8f 93       	push	r24
    283c:	cd 5f       	subi	r28, 0xFD	; 253
    283e:	dc 4f       	sbci	r29, 0xFC	; 252
    2840:	88 81       	ld	r24, Y
    2842:	c3 50       	subi	r28, 0x03	; 3
    2844:	d3 40       	sbci	r29, 0x03	; 3
    2846:	8f 93       	push	r24
    2848:	ce 5f       	subi	r28, 0xFE	; 254
    284a:	dc 4f       	sbci	r29, 0xFC	; 252
    284c:	88 81       	ld	r24, Y
    284e:	c2 50       	subi	r28, 0x02	; 2
    2850:	d3 40       	sbci	r29, 0x03	; 3
    2852:	8f 93       	push	r24
    2854:	cf 5f       	subi	r28, 0xFF	; 255
    2856:	dc 4f       	sbci	r29, 0xFC	; 252
    2858:	88 81       	ld	r24, Y
    285a:	c1 50       	subi	r28, 0x01	; 1
    285c:	d3 40       	sbci	r29, 0x03	; 3
    285e:	8f 93       	push	r24
    2860:	c0 50       	subi	r28, 0x00	; 0
    2862:	dd 4f       	sbci	r29, 0xFD	; 253
    2864:	88 81       	ld	r24, Y
    2866:	c0 50       	subi	r28, 0x00	; 0
    2868:	d3 40       	sbci	r29, 0x03	; 3
    286a:	8f 93       	push	r24
    286c:	ce 01       	movw	r24, r28
    286e:	8f 5c       	subi	r24, 0xCF	; 207
    2870:	9d 4f       	sbci	r25, 0xFD	; 253
    2872:	9f 93       	push	r25
    2874:	8f 93       	push	r24
    2876:	1f 93       	push	r17
    2878:	0f 93       	push	r16
    287a:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			writestr_OLED(1, outbuf, 2);
    287e:	cd bf       	out	0x3d, r28	; 61
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	42 e0       	ldi	r20, 0x02	; 2
    2884:	b8 01       	movw	r22, r16
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    288c:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    288e:	72 c1       	rjmp	.+740    	; 0x2b74 <report+0xc0a>

		case 'p':					// Pneumatics
			get_time(currenttime);
    2890:	7e 01       	movw	r14, r28
    2892:	96 ef       	ldi	r25, 0xF6	; 246
    2894:	e9 1a       	sub	r14, r25
    2896:	9e ef       	ldi	r25, 0xFE	; 254
    2898:	f9 0a       	sbc	r15, r25
    289a:	c7 01       	movw	r24, r14
    289c:	0e 94 ca 06 	call	0xd94	; 0xd94 <get_time>
			read_PNEUSensors(&shutter, &left, &right, &air);
    28a0:	9e 01       	movw	r18, r28
    28a2:	27 5b       	subi	r18, 0xB7	; 183
    28a4:	3e 4f       	sbci	r19, 0xFE	; 254
    28a6:	ae 01       	movw	r20, r28
    28a8:	48 5b       	subi	r20, 0xB8	; 184
    28aa:	5e 4f       	sbci	r21, 0xFE	; 254
    28ac:	be 01       	movw	r22, r28
    28ae:	69 5b       	subi	r22, 0xB9	; 185
    28b0:	7e 4f       	sbci	r23, 0xFE	; 254
    28b2:	ce 01       	movw	r24, r28
    28b4:	8a 5b       	subi	r24, 0xBA	; 186
    28b6:	9e 4f       	sbci	r25, 0xFE	; 254
    28b8:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <read_PNEUSensors>
			sprintf(outbuf, format_PNU, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    28bc:	24 e3       	ldi	r18, 0x34	; 52
    28be:	20 9f       	mul	r18, r16
    28c0:	c0 01       	movw	r24, r0
    28c2:	21 9f       	mul	r18, r17
    28c4:	90 0d       	add	r25, r0
    28c6:	11 24       	eor	r1, r1
    28c8:	88 5c       	subi	r24, 0xC8	; 200
    28ca:	97 4d       	sbci	r25, 0xD7	; 215
    28cc:	9f 93       	push	r25
    28ce:	8f 93       	push	r24
    28d0:	c7 5b       	subi	r28, 0xB7	; 183
    28d2:	de 4f       	sbci	r29, 0xFE	; 254
    28d4:	88 81       	ld	r24, Y
    28d6:	c9 54       	subi	r28, 0x49	; 73
    28d8:	d1 40       	sbci	r29, 0x01	; 1
    28da:	1f 92       	push	r1
    28dc:	8f 93       	push	r24
    28de:	c8 5b       	subi	r28, 0xB8	; 184
    28e0:	de 4f       	sbci	r29, 0xFE	; 254
    28e2:	88 81       	ld	r24, Y
    28e4:	c8 54       	subi	r28, 0x48	; 72
    28e6:	d1 40       	sbci	r29, 0x01	; 1
    28e8:	1f 92       	push	r1
    28ea:	8f 93       	push	r24
    28ec:	c9 5b       	subi	r28, 0xB9	; 185
    28ee:	de 4f       	sbci	r29, 0xFE	; 254
    28f0:	88 81       	ld	r24, Y
    28f2:	c7 54       	subi	r28, 0x47	; 71
    28f4:	d1 40       	sbci	r29, 0x01	; 1
    28f6:	1f 92       	push	r1
    28f8:	8f 93       	push	r24
    28fa:	ca 5b       	subi	r28, 0xBA	; 186
    28fc:	de 4f       	sbci	r29, 0xFE	; 254
    28fe:	88 81       	ld	r24, Y
    2900:	c6 54       	subi	r28, 0x46	; 70
    2902:	d1 40       	sbci	r29, 0x01	; 1
    2904:	1f 92       	push	r1
    2906:	8f 93       	push	r24
    2908:	ff 92       	push	r15
    290a:	ef 92       	push	r14
    290c:	ce 01       	movw	r24, r28
    290e:	8d 5b       	subi	r24, 0xBD	; 189
    2910:	9d 4f       	sbci	r25, 0xFD	; 253
    2912:	9f 93       	push	r25
    2914:	8f 93       	push	r24
    2916:	8e 01       	movw	r16, r28
    2918:	0f 5f       	subi	r16, 0xFF	; 255
    291a:	1f 4f       	sbci	r17, 0xFF	; 255
    291c:	1f 93       	push	r17
    291e:	0f 93       	push	r16
    2920:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			printLine(outbuf);
    2924:	c8 01       	movw	r24, r16
    2926:	0e 94 a3 03 	call	0x746	; 0x746 <printLine>
			sprintf(outbuf, dformat_PN1, left, right);
    292a:	c8 5b       	subi	r28, 0xB8	; 184
    292c:	de 4f       	sbci	r29, 0xFE	; 254
    292e:	88 81       	ld	r24, Y
    2930:	c8 54       	subi	r28, 0x48	; 72
    2932:	d1 40       	sbci	r29, 0x01	; 1
    2934:	1f 92       	push	r1
    2936:	8f 93       	push	r24
    2938:	c9 5b       	subi	r28, 0xB9	; 185
    293a:	de 4f       	sbci	r29, 0xFE	; 254
    293c:	88 81       	ld	r24, Y
    293e:	c7 54       	subi	r28, 0x47	; 71
    2940:	d1 40       	sbci	r29, 0x01	; 1
    2942:	1f 92       	push	r1
    2944:	8f 93       	push	r24
    2946:	ce 01       	movw	r24, r28
    2948:	80 59       	subi	r24, 0x90	; 144
    294a:	9d 4f       	sbci	r25, 0xFD	; 253
    294c:	9f 93       	push	r25
    294e:	8f 93       	push	r24
    2950:	1f 93       	push	r17
    2952:	0f 93       	push	r16
    2954:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			writestr_OLED(1, outbuf, 1);
    2958:	41 e0       	ldi	r20, 0x01	; 1
    295a:	b8 01       	movw	r22, r16
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2962:	c7 5b       	subi	r28, 0xB7	; 183
    2964:	de 4f       	sbci	r29, 0xFE	; 254
    2966:	88 81       	ld	r24, Y
    2968:	c9 54       	subi	r28, 0x49	; 73
    296a:	d1 40       	sbci	r29, 0x01	; 1
    296c:	1f 92       	push	r1
    296e:	8f 93       	push	r24
    2970:	ca 5b       	subi	r28, 0xBA	; 186
    2972:	de 4f       	sbci	r29, 0xFE	; 254
    2974:	88 81       	ld	r24, Y
    2976:	c6 54       	subi	r28, 0x46	; 70
    2978:	d1 40       	sbci	r29, 0x01	; 1
    297a:	1f 92       	push	r1
    297c:	8f 93       	push	r24
    297e:	ce 01       	movw	r24, r28
    2980:	8d 57       	subi	r24, 0x7D	; 125
    2982:	9d 4f       	sbci	r25, 0xFD	; 253
    2984:	9f 93       	push	r25
    2986:	8f 93       	push	r24
    2988:	1f 93       	push	r17
    298a:	0f 93       	push	r16
    298c:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2990:	cd bf       	out	0x3d, r28	; 61
    2992:	de bf       	out	0x3e, r29	; 62
    2994:	42 e0       	ldi	r20, 0x02	; 2
    2996:	b8 01       	movw	r22, r16
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    299e:	f1 2c       	mov	r15, r1
			printLine(outbuf);
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    29a0:	e9 c0       	rjmp	.+466    	; 0x2b74 <report+0xc0a>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    29a2:	7e 01       	movw	r14, r28
    29a4:	96 ef       	ldi	r25, 0xF6	; 246
    29a6:	e9 1a       	sub	r14, r25
    29a8:	9e ef       	ldi	r25, 0xFE	; 254
    29aa:	f9 0a       	sbc	r15, r25
    29ac:	c7 01       	movw	r24, r14
    29ae:	0e 94 ca 06 	call	0xd94	; 0xd94 <get_time>
			get_SETTIME(lastsettime);
    29b2:	6e 01       	movw	r12, r28
    29b4:	82 ee       	ldi	r24, 0xE2	; 226
    29b6:	c8 1a       	sub	r12, r24
    29b8:	8e ef       	ldi	r24, 0xFE	; 254
    29ba:	d8 0a       	sbc	r13, r24
    29bc:	c6 01       	movw	r24, r12
    29be:	0e 94 3b 08 	call	0x1076	; 0x1076 <get_SETTIME>
			get_BOOTTIME(boottime);
    29c2:	5e 01       	movw	r10, r28
    29c4:	9e ec       	ldi	r25, 0xCE	; 206
    29c6:	a9 1a       	sub	r10, r25
    29c8:	9e ef       	ldi	r25, 0xFE	; 254
    29ca:	b9 0a       	sbc	r11, r25
    29cc:	c5 01       	movw	r24, r10
    29ce:	0e 94 6d 07 	call	0xeda	; 0xeda <get_BOOTTIME>
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    29d2:	24 e3       	ldi	r18, 0x34	; 52
    29d4:	20 9f       	mul	r18, r16
    29d6:	c0 01       	movw	r24, r0
    29d8:	21 9f       	mul	r18, r17
    29da:	90 0d       	add	r25, r0
    29dc:	11 24       	eor	r1, r1
    29de:	88 5c       	subi	r24, 0xC8	; 200
    29e0:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			get_SETTIME(lastsettime);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
    29e2:	9f 93       	push	r25
    29e4:	8f 93       	push	r24
    29e6:	bf 92       	push	r11
    29e8:	af 92       	push	r10
    29ea:	df 92       	push	r13
    29ec:	cf 92       	push	r12
    29ee:	ff 92       	push	r15
    29f0:	ef 92       	push	r14
    29f2:	ce 01       	movw	r24, r28
    29f4:	8a 56       	subi	r24, 0x6A	; 106
    29f6:	9d 4f       	sbci	r25, 0xFD	; 253
    29f8:	9f 93       	push	r25
    29fa:	8f 93       	push	r24
    29fc:	8e 01       	movw	r16, r28
    29fe:	0f 5f       	subi	r16, 0xFF	; 255
    2a00:	1f 4f       	sbci	r17, 0xFF	; 255
    2a02:	1f 93       	push	r17
    2a04:	0f 93       	push	r16
    2a06:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
    2a0a:	c8 01       	movw	r24, r16
    2a0c:	0e 94 a3 03 	call	0x746	; 0x746 <printLine>
			writestr_OLED(1, "Time", 1);
    2a10:	41 e0       	ldi	r20, 0x01	; 1
    2a12:	63 ee       	ldi	r22, 0xE3	; 227
    2a14:	7e e9       	ldi	r23, 0x9E	; 158
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    2a1c:	b7 01       	movw	r22, r14
    2a1e:	65 5f       	subi	r22, 0xF5	; 245
    2a20:	7f 4f       	sbci	r23, 0xFF	; 255
    2a22:	42 e0       	ldi	r20, 0x02	; 2
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <writestr_OLED>
			break;
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2a2e:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    2a30:	a1 c0       	rjmp	.+322    	; 0x2b74 <report+0xc0a>

		case 'v':					// Vacuum
			redvac = read_ionpump(REDPUMP);
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	0e 94 5f 09 	call	0x12be	; 0x12be <read_ionpump>
    2a38:	d6 2e       	mov	r13, r22
    2a3a:	c7 2e       	mov	r12, r23
    2a3c:	b8 2e       	mov	r11, r24
    2a3e:	a9 2e       	mov	r10, r25
			bluvac = read_ionpump(BLUEPUMP);
    2a40:	82 e0       	ldi	r24, 0x02	; 2
    2a42:	0e 94 5f 09 	call	0x12be	; 0x12be <read_ionpump>
    2a46:	96 2e       	mov	r9, r22
    2a48:	87 2e       	mov	r8, r23
    2a4a:	78 2e       	mov	r7, r24
    2a4c:	69 2e       	mov	r6, r25
			get_time(currenttime);
    2a4e:	7e 01       	movw	r14, r28
    2a50:	96 ef       	ldi	r25, 0xF6	; 246
    2a52:	e9 1a       	sub	r14, r25
    2a54:	9e ef       	ldi	r25, 0xFE	; 254
    2a56:	f9 0a       	sbc	r15, r25
    2a58:	c7 01       	movw	r24, r14
    2a5a:	0e 94 ca 06 	call	0xd94	; 0xd94 <get_time>
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
    2a5e:	24 e3       	ldi	r18, 0x34	; 52
    2a60:	20 9f       	mul	r18, r16
    2a62:	c0 01       	movw	r24, r0
    2a64:	21 9f       	mul	r18, r17
    2a66:	90 0d       	add	r25, r0
    2a68:	11 24       	eor	r1, r1
    2a6a:	88 5c       	subi	r24, 0xC8	; 200
    2a6c:	97 4d       	sbci	r25, 0xD7	; 215
    2a6e:	9f 93       	push	r25
    2a70:	8f 93       	push	r24
    2a72:	6f 92       	push	r6
    2a74:	7f 92       	push	r7
    2a76:	8f 92       	push	r8
    2a78:	9f 92       	push	r9
    2a7a:	af 92       	push	r10
    2a7c:	bf 92       	push	r11
    2a7e:	cf 92       	push	r12
    2a80:	df 92       	push	r13
    2a82:	ff 92       	push	r15
    2a84:	ef 92       	push	r14
    2a86:	ce 01       	movw	r24, r28
    2a88:	81 55       	subi	r24, 0x51	; 81
    2a8a:	9d 4f       	sbci	r25, 0xFD	; 253
    2a8c:	9f 93       	push	r25
    2a8e:	8f 93       	push	r24
    2a90:	8e 01       	movw	r16, r28
    2a92:	0f 5f       	subi	r16, 0xFF	; 255
    2a94:	1f 4f       	sbci	r17, 0xFF	; 255
    2a96:	1f 93       	push	r17
    2a98:	0f 93       	push	r16
    2a9a:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			printLine(outbuf);
    2a9e:	c8 01       	movw	r24, r16
    2aa0:	0e 94 a3 03 	call	0x746	; 0x746 <printLine>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    2aa4:	41 e0       	ldi	r20, 0x01	; 1
    2aa6:	68 ee       	ldi	r22, 0xE8	; 232
    2aa8:	7e e9       	ldi	r23, 0x9E	; 158
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    2ab0:	6f 92       	push	r6
    2ab2:	7f 92       	push	r7
    2ab4:	8f 92       	push	r8
    2ab6:	9f 92       	push	r9
    2ab8:	af 92       	push	r10
    2aba:	bf 92       	push	r11
    2abc:	cf 92       	push	r12
    2abe:	df 92       	push	r13
    2ac0:	ce 01       	movw	r24, r28
    2ac2:	8c 52       	subi	r24, 0x2C	; 44
    2ac4:	9d 4f       	sbci	r25, 0xFD	; 253
    2ac6:	9f 93       	push	r25
    2ac8:	8f 93       	push	r24
    2aca:	1f 93       	push	r17
    2acc:	0f 93       	push	r16
    2ace:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2ad2:	42 e0       	ldi	r20, 0x02	; 2
    2ad4:	b8 01       	movw	r22, r16
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <writestr_OLED>
			break;
    2adc:	cd bf       	out	0x3d, r28	; 61
    2ade:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2ae0:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    2ae2:	48 c0       	rjmp	.+144    	; 0x2b74 <report+0xc0a>

		case 'V':					// Version
			get_VERSION(version);
    2ae4:	6e 01       	movw	r12, r28
    2ae6:	9f ef       	ldi	r25, 0xFF	; 255
    2ae8:	c9 0e       	add	r12, r25
    2aea:	d1 1c       	adc	r13, r1
    2aec:	c6 01       	movw	r24, r12
    2aee:	0e 94 74 07 	call	0xee8	; 0xee8 <get_VERSION>
			get_time(currenttime);
    2af2:	7e 01       	movw	r14, r28
    2af4:	86 ef       	ldi	r24, 0xF6	; 246
    2af6:	e8 1a       	sub	r14, r24
    2af8:	8e ef       	ldi	r24, 0xFE	; 254
    2afa:	f8 0a       	sbc	r15, r24
    2afc:	c7 01       	movw	r24, r14
    2afe:	0e 94 ca 06 	call	0xd94	; 0xd94 <get_time>
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
    2b02:	24 e3       	ldi	r18, 0x34	; 52
    2b04:	20 9f       	mul	r18, r16
    2b06:	c0 01       	movw	r24, r0
    2b08:	21 9f       	mul	r18, r17
    2b0a:	90 0d       	add	r25, r0
    2b0c:	11 24       	eor	r1, r1
    2b0e:	88 5c       	subi	r24, 0xC8	; 200
    2b10:	97 4d       	sbci	r25, 0xD7	; 215
    2b12:	9f 93       	push	r25
    2b14:	8f 93       	push	r24
    2b16:	df 92       	push	r13
    2b18:	cf 92       	push	r12
    2b1a:	ff 92       	push	r15
    2b1c:	ef 92       	push	r14
    2b1e:	ce 01       	movw	r24, r28
    2b20:	8f 51       	subi	r24, 0x1F	; 31
    2b22:	9d 4f       	sbci	r25, 0xFD	; 253
    2b24:	9f 93       	push	r25
    2b26:	8f 93       	push	r24
    2b28:	8e 01       	movw	r16, r28
    2b2a:	0f 5f       	subi	r16, 0xFF	; 255
    2b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2e:	1f 93       	push	r17
    2b30:	0f 93       	push	r16
    2b32:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
			printLine(outbuf);
    2b36:	c8 01       	movw	r24, r16
    2b38:	0e 94 a3 03 	call	0x746	; 0x746 <printLine>
			writestr_OLED(1, "specMech Version", 1);
    2b3c:	41 e0       	ldi	r20, 0x01	; 1
    2b3e:	69 e4       	ldi	r22, 0x49	; 73
    2b40:	7d e9       	ldi	r23, 0x9D	; 157
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <writestr_OLED>
			get_VERSION(outbuf);
    2b48:	c8 01       	movw	r24, r16
    2b4a:	0e 94 74 07 	call	0xee8	; 0xee8 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    2b4e:	42 e0       	ldi	r20, 0x02	; 2
    2b50:	b8 01       	movw	r22, r16
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <writestr_OLED>
			break;
    2b58:	cd bf       	out	0x3d, r28	; 61
    2b5a:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2b5c:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    2b5e:	0a c0       	rjmp	.+20     	; 0x2b74 <report+0xc0a>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    2b60:	68 ef       	ldi	r22, 0xF8	; 248
    2b62:	7e e9       	ldi	r23, 0x9E	; 158
    2b64:	8a ec       	ldi	r24, 0xCA	; 202
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
			return(ERROR);
    2b6c:	0f 2e       	mov	r0, r31
    2b6e:	f3 e6       	ldi	r31, 0x63	; 99
    2b70:	ff 2e       	mov	r15, r31
    2b72:	f0 2d       	mov	r31, r0
			break;
	}

	return(NOERROR);

}
    2b74:	8f 2d       	mov	r24, r15
    2b76:	cd 5c       	subi	r28, 0xCD	; 205
    2b78:	dc 4f       	sbci	r29, 0xFC	; 252
    2b7a:	cd bf       	out	0x3d, r28	; 61
    2b7c:	de bf       	out	0x3e, r29	; 62
    2b7e:	df 91       	pop	r29
    2b80:	cf 91       	pop	r28
    2b82:	1f 91       	pop	r17
    2b84:	0f 91       	pop	r16
    2b86:	ff 90       	pop	r15
    2b88:	ef 90       	pop	r14
    2b8a:	df 90       	pop	r13
    2b8c:	cf 90       	pop	r12
    2b8e:	bf 90       	pop	r11
    2b90:	af 90       	pop	r10
    2b92:	9f 90       	pop	r9
    2b94:	8f 90       	pop	r8
    2b96:	7f 90       	pop	r7
    2b98:	6f 90       	pop	r6
    2b9a:	5f 90       	pop	r5
    2b9c:	4f 90       	pop	r4
    2b9e:	3f 90       	pop	r3
    2ba0:	2f 90       	pop	r2
    2ba2:	08 95       	ret

00002ba4 <crc16>:

	Returns:
		The CRC16 value, an unsigned 16-bit word
------------------------------------------------------------------------------*/
uint16_t crc16(uint8_t *packet, uint16_t nBytes)
{
    2ba4:	dc 01       	movw	r26, r24

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    2ba6:	40 e0       	ldi	r20, 0x00	; 0
    2ba8:	50 e0       	ldi	r21, 0x00	; 0
------------------------------------------------------------------------------*/
uint16_t crc16(uint8_t *packet, uint16_t nBytes)
{

	uint8_t bit;
	uint16_t crc = 0;
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	90 e0       	ldi	r25, 0x00	; 0
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    2bae:	1b c0       	rjmp	.+54     	; 0x2be6 <crc16+0x42>
		crc = crc ^ ((uint16_t) packet[byte] << 8);
    2bb0:	fd 01       	movw	r30, r26
    2bb2:	e4 0f       	add	r30, r20
    2bb4:	f5 1f       	adc	r31, r21
    2bb6:	20 81       	ld	r18, Z
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	32 2f       	mov	r19, r18
    2bbc:	22 27       	eor	r18, r18
    2bbe:	82 27       	eor	r24, r18
    2bc0:	93 27       	eor	r25, r19
		for (bit = 0; bit < 8; bit++) {
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	0c c0       	rjmp	.+24     	; 0x2bde <crc16+0x3a>
			if (crc & 0x8000) {
    2bc6:	99 23       	and	r25, r25
    2bc8:	3c f4       	brge	.+14     	; 0x2bd8 <crc16+0x34>
				crc = (crc << 1) ^ 0x1021;
    2bca:	88 0f       	add	r24, r24
    2bcc:	99 1f       	adc	r25, r25
    2bce:	31 e2       	ldi	r19, 0x21	; 33
    2bd0:	83 27       	eor	r24, r19
    2bd2:	30 e1       	ldi	r19, 0x10	; 16
    2bd4:	93 27       	eor	r25, r19
    2bd6:	02 c0       	rjmp	.+4      	; 0x2bdc <crc16+0x38>
			} else {
				crc = crc << 1;
    2bd8:	88 0f       	add	r24, r24
    2bda:	99 1f       	adc	r25, r25
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
		crc = crc ^ ((uint16_t) packet[byte] << 8);
		for (bit = 0; bit < 8; bit++) {
    2bdc:	2f 5f       	subi	r18, 0xFF	; 255
    2bde:	28 30       	cpi	r18, 0x08	; 8
    2be0:	90 f3       	brcs	.-28     	; 0x2bc6 <crc16+0x22>

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    2be2:	4f 5f       	subi	r20, 0xFF	; 255
    2be4:	5f 4f       	sbci	r21, 0xFF	; 255
    2be6:	46 17       	cp	r20, r22
    2be8:	57 07       	cpc	r21, r23
    2bea:	10 f3       	brcs	.-60     	; 0x2bb0 <crc16+0xc>
				crc = crc << 1;
			}
		}
	}
	return (crc);
}
    2bec:	08 95       	ret

00002bee <get_FRAM_MOTOR_ENCODER>:
	Returns:
		ERROR on FRAM read error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t get_FRAM_MOTOR_ENCODER(uint8_t controller, int32_t *encoderValue)
{
    2bee:	ff 92       	push	r15
    2bf0:	0f 93       	push	r16
    2bf2:	1f 93       	push	r17
    2bf4:	cf 93       	push	r28
    2bf6:	df 93       	push	r29
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <get_FRAM_MOTOR_ENCODER+0xc>
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <get_FRAM_MOTOR_ENCODER+0xe>
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	8b 01       	movw	r16, r22

	uint8_t tbuf[4];
	uint16_t framaddr;
	int32_t tempVal;

	switch (controller) {
    2c02:	81 38       	cpi	r24, 0x81	; 129
    2c04:	59 f0       	breq	.+22     	; 0x2c1c <get_FRAM_MOTOR_ENCODER+0x2e>
    2c06:	82 38       	cpi	r24, 0x82	; 130
    2c08:	31 f0       	breq	.+12     	; 0x2c16 <get_FRAM_MOTOR_ENCODER+0x28>
    2c0a:	80 38       	cpi	r24, 0x80	; 128
    2c0c:	09 f0       	breq	.+2      	; 0x2c10 <get_FRAM_MOTOR_ENCODER+0x22>
    2c0e:	4b c0       	rjmp	.+150    	; 0x2ca6 <get_FRAM_MOTOR_ENCODER+0xb8>
		case MOTOR_A:
			framaddr = ENCA_FRAMADDR;
    2c10:	64 e1       	ldi	r22, 0x14	; 20
    2c12:	70 e0       	ldi	r23, 0x00	; 0
    2c14:	05 c0       	rjmp	.+10     	; 0x2c20 <get_FRAM_MOTOR_ENCODER+0x32>
		case MOTOR_B:
			framaddr = ENCB_FRAMADDR;
			break;

		case MOTOR_C:
			framaddr = ENCC_FRAMADDR;
    2c16:	6c e1       	ldi	r22, 0x1C	; 28
    2c18:	70 e0       	ldi	r23, 0x00	; 0
			break;
    2c1a:	02 c0       	rjmp	.+4      	; 0x2c20 <get_FRAM_MOTOR_ENCODER+0x32>
		case MOTOR_A:
			framaddr = ENCA_FRAMADDR;
			break;

		case MOTOR_B:
			framaddr = ENCB_FRAMADDR;
    2c1c:	68 e1       	ldi	r22, 0x18	; 24
    2c1e:	70 e0       	ldi	r23, 0x00	; 0

		default:
			return(ERROR);
	}

	if (read_FRAM(FRAMTWIADDR, framaddr, tbuf, 4) == ERROR) {
    2c20:	24 e0       	ldi	r18, 0x04	; 4
    2c22:	ae 01       	movw	r20, r28
    2c24:	4f 5f       	subi	r20, 0xFF	; 255
    2c26:	5f 4f       	sbci	r21, 0xFF	; 255
    2c28:	80 e5       	ldi	r24, 0x50	; 80
    2c2a:	0e 94 ed 07 	call	0xfda	; 0xfda <read_FRAM>
    2c2e:	f8 2e       	mov	r15, r24
    2c30:	83 e6       	ldi	r24, 0x63	; 99
    2c32:	f8 12       	cpse	r15, r24
    2c34:	0f c0       	rjmp	.+30     	; 0x2c54 <get_FRAM_MOTOR_ENCODER+0x66>
		printError(ERR_FRAM, "get_FRAM_MOTOR_ENCODER: read_FRAM error");
    2c36:	63 eb       	ldi	r22, 0xB3	; 179
    2c38:	70 ea       	ldi	r23, 0xA0	; 160
    2c3a:	83 e9       	ldi	r24, 0x93	; 147
    2c3c:	91 e0       	ldi	r25, 0x01	; 1
    2c3e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		*encoderValue = 0xFFFFFFFF;
    2c42:	8f ef       	ldi	r24, 0xFF	; 255
    2c44:	9f ef       	ldi	r25, 0xFF	; 255
    2c46:	dc 01       	movw	r26, r24
    2c48:	f8 01       	movw	r30, r16
    2c4a:	80 83       	st	Z, r24
    2c4c:	91 83       	std	Z+1, r25	; 0x01
    2c4e:	a2 83       	std	Z+2, r26	; 0x02
    2c50:	b3 83       	std	Z+3, r27	; 0x03
		return(ERROR);
    2c52:	2d c0       	rjmp	.+90     	; 0x2cae <get_FRAM_MOTOR_ENCODER+0xc0>
	}

	tempVal =  (uint32_t) tbuf[0] << 24;
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	a0 e0       	ldi	r26, 0x00	; 0
    2c5a:	b0 e0       	ldi	r27, 0x00	; 0
    2c5c:	78 2f       	mov	r23, r24
    2c5e:	66 27       	eor	r22, r22
    2c60:	55 27       	eor	r21, r21
    2c62:	44 27       	eor	r20, r20
	tempVal |= (uint32_t) tbuf[1] << 16;
    2c64:	9a 81       	ldd	r25, Y+2	; 0x02
    2c66:	89 2f       	mov	r24, r25
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	a0 e0       	ldi	r26, 0x00	; 0
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	dc 01       	movw	r26, r24
    2c70:	99 27       	eor	r25, r25
    2c72:	88 27       	eor	r24, r24
    2c74:	84 2b       	or	r24, r20
    2c76:	95 2b       	or	r25, r21
    2c78:	a6 2b       	or	r26, r22
    2c7a:	b7 2b       	or	r27, r23
	tempVal |= (uint32_t) tbuf[2] << 8;
    2c7c:	4b 81       	ldd	r20, Y+3	; 0x03
    2c7e:	50 e0       	ldi	r21, 0x00	; 0
    2c80:	60 e0       	ldi	r22, 0x00	; 0
    2c82:	70 e0       	ldi	r23, 0x00	; 0
    2c84:	76 2f       	mov	r23, r22
    2c86:	65 2f       	mov	r22, r21
    2c88:	54 2f       	mov	r21, r20
    2c8a:	44 27       	eor	r20, r20
    2c8c:	84 2b       	or	r24, r20
    2c8e:	95 2b       	or	r25, r21
    2c90:	a6 2b       	or	r26, r22
    2c92:	b7 2b       	or	r27, r23
	tempVal |= (uint32_t) tbuf[3];
    2c94:	2c 81       	ldd	r18, Y+4	; 0x04
    2c96:	82 2b       	or	r24, r18
	*encoderValue = tempVal;
    2c98:	f8 01       	movw	r30, r16
    2c9a:	80 83       	st	Z, r24
    2c9c:	91 83       	std	Z+1, r25	; 0x01
    2c9e:	a2 83       	std	Z+2, r26	; 0x02
    2ca0:	b3 83       	std	Z+3, r27	; 0x03

	return(NOERROR);
    2ca2:	f1 2c       	mov	r15, r1
    2ca4:	04 c0       	rjmp	.+8      	; 0x2cae <get_FRAM_MOTOR_ENCODER+0xc0>
		case MOTOR_C:
			framaddr = ENCC_FRAMADDR;
			break;

		default:
			return(ERROR);
    2ca6:	0f 2e       	mov	r0, r31
    2ca8:	f3 e6       	ldi	r31, 0x63	; 99
    2caa:	ff 2e       	mov	r15, r31
    2cac:	f0 2d       	mov	r31, r0
	tempVal |= (uint32_t) tbuf[3];
	*encoderValue = tempVal;

	return(NOERROR);

}
    2cae:	8f 2d       	mov	r24, r15
    2cb0:	24 96       	adiw	r28, 0x04	; 4
    2cb2:	cd bf       	out	0x3d, r28	; 61
    2cb4:	de bf       	out	0x3e, r29	; 62
    2cb6:	df 91       	pop	r29
    2cb8:	cf 91       	pop	r28
    2cba:	1f 91       	pop	r17
    2cbc:	0f 91       	pop	r16
    2cbe:	ff 90       	pop	r15
    2cc0:	08 95       	ret

00002cc2 <get_MOTOR>:
	Returns
		ERROR on USART timeout or CRC mismatch
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t get_MOTOR(uint8_t mtraddr, uint8_t cmd, uint8_t* data, uint8_t nbytes)
{
    2cc2:	3f 92       	push	r3
    2cc4:	4f 92       	push	r4
    2cc6:	5f 92       	push	r5
    2cc8:	6f 92       	push	r6
    2cca:	7f 92       	push	r7
    2ccc:	8f 92       	push	r8
    2cce:	9f 92       	push	r9
    2cd0:	af 92       	push	r10
    2cd2:	bf 92       	push	r11
    2cd4:	cf 92       	push	r12
    2cd6:	df 92       	push	r13
    2cd8:	ef 92       	push	r14
    2cda:	ff 92       	push	r15
    2cdc:	0f 93       	push	r16
    2cde:	1f 93       	push	r17
    2ce0:	cf 93       	push	r28
    2ce2:	df 93       	push	r29
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	8a 01       	movw	r16, r20
    2cea:	32 2e       	mov	r3, r18
		data[i] = recv1_buf.data[i];
	}

	return(NOERROR);	
	
}
    2cec:	8d b6       	in	r8, 0x3d	; 61
    2cee:	9e b6       	in	r9, 0x3e	; 62
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t get_MOTOR(uint8_t mtraddr, uint8_t cmd, uint8_t* data, uint8_t nbytes)
{

	uint8_t i, tbuf[nbytes+2];
    2cf0:	a2 2e       	mov	r10, r18
    2cf2:	b1 2c       	mov	r11, r1
    2cf4:	75 01       	movw	r14, r10
    2cf6:	22 e0       	ldi	r18, 0x02	; 2
    2cf8:	e2 0e       	add	r14, r18
    2cfa:	f1 1c       	adc	r15, r1
    2cfc:	25 01       	movw	r4, r10
    2cfe:	3f ef       	ldi	r19, 0xFF	; 255
    2d00:	43 1a       	sub	r4, r19
    2d02:	53 0a       	sbc	r5, r19
    2d04:	ed b7       	in	r30, 0x3d	; 61
    2d06:	fe b7       	in	r31, 0x3e	; 62
    2d08:	ee 19       	sub	r30, r14
    2d0a:	ff 09       	sbc	r31, r15
    2d0c:	ed bf       	out	0x3d, r30	; 61
    2d0e:	fe bf       	out	0x3e, r31	; 62
    2d10:	2d b7       	in	r18, 0x3d	; 61
    2d12:	3e b7       	in	r19, 0x3e	; 62
    2d14:	2f 5f       	subi	r18, 0xFF	; 255
    2d16:	3f 4f       	sbci	r19, 0xFF	; 255
    2d18:	39 01       	movw	r6, r18
    2d1a:	69 01       	movw	r12, r18
	uint16_t crcReceived, crcExpected;

	recv1_buf.nbytes = nbytes+2;	// Set up receive buffer (+2 for crc bytes)
    2d1c:	92 e0       	ldi	r25, 0x02	; 2
    2d1e:	93 0d       	add	r25, r3
    2d20:	90 93 37 2b 	sts	0x2B37, r25	; 0x802b37 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    2d24:	10 92 39 2b 	sts	0x2B39, r1	; 0x802b39 <recv1_buf+0x102>
	recv1_buf.done = NO;
    2d28:	10 92 3a 2b 	sts	0x2B3A, r1	; 0x802b3a <recv1_buf+0x103>

	tbuf[0] = mtraddr;				// Motor controller packet serial address
    2d2c:	81 83       	std	Z+1, r24	; 0x01
	tbuf[1] = cmd;					// Motor controller command
    2d2e:	f9 01       	movw	r30, r18
    2d30:	61 83       	std	Z+1, r22	; 0x01
	send_USART(1, tbuf, 2);
    2d32:	42 e0       	ldi	r20, 0x02	; 2
    2d34:	b9 01       	movw	r22, r18
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <send_USART>

	USART1_ticks = 0;
    2d3c:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    2d40:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
//	start_TCB0(1);					// 1 ms tisk period for USART1_ticks
	while (recv1_buf.done == NO) {	// Wait for the reply
    2d44:	0e c0       	rjmp	.+28     	; 0x2d62 <get_MOTOR+0xa0>
		if (USART1_ticks > 50) {	// Timeout about 4 ticks at 38400 baud
    2d46:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    2d4a:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    2d4e:	c3 97       	sbiw	r24, 0x33	; 51
    2d50:	40 f0       	brcs	.+16     	; 0x2d62 <get_MOTOR+0xa0>
//			stop_TCB0();
			printError(ERR_MTRREADENC, "get_MOTOR: serial timeout");
    2d52:	6b ed       	ldi	r22, 0xDB	; 219
    2d54:	70 ea       	ldi	r23, 0xA0	; 160
    2d56:	80 e3       	ldi	r24, 0x30	; 48
    2d58:	91 e0       	ldi	r25, 0x01	; 1
    2d5a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
			return(ERROR);
    2d5e:	83 e6       	ldi	r24, 0x63	; 99
    2d60:	3f c0       	rjmp	.+126    	; 0x2de0 <get_MOTOR+0x11e>
	tbuf[1] = cmd;					// Motor controller command
	send_USART(1, tbuf, 2);

	USART1_ticks = 0;
//	start_TCB0(1);					// 1 ms tisk period for USART1_ticks
	while (recv1_buf.done == NO) {	// Wait for the reply
    2d62:	80 91 3a 2b 	lds	r24, 0x2B3A	; 0x802b3a <recv1_buf+0x103>
    2d66:	88 23       	and	r24, r24
    2d68:	71 f3       	breq	.-36     	; 0x2d46 <get_MOTOR+0x84>
			return(ERROR);
		}
	}
//	stop_TCB0();

	crcReceived = (recv1_buf.data[nbytes] << 8) | recv1_buf.data[nbytes+1];
    2d6a:	f5 01       	movw	r30, r10
    2d6c:	e9 5c       	subi	r30, 0xC9	; 201
    2d6e:	f5 4d       	sbci	r31, 0xD5	; 213
    2d70:	a0 80       	ld	r10, Z
    2d72:	b1 2c       	mov	r11, r1
    2d74:	ba 2c       	mov	r11, r10
    2d76:	aa 24       	eor	r10, r10
    2d78:	f2 01       	movw	r30, r4
    2d7a:	e9 5c       	subi	r30, 0xC9	; 201
    2d7c:	f5 4d       	sbci	r31, 0xD5	; 213
    2d7e:	80 81       	ld	r24, Z
    2d80:	a8 2a       	or	r10, r24

	for (i = 2; i < nbytes+2; i++) {		// Compute expected crc value
    2d82:	22 e0       	ldi	r18, 0x02	; 2
    2d84:	09 c0       	rjmp	.+18     	; 0x2d98 <get_MOTOR+0xd6>
		tbuf[i] = recv1_buf.data[i-2];
    2d86:	fc 01       	movw	r30, r24
    2d88:	eb 5c       	subi	r30, 0xCB	; 203
    2d8a:	f5 4d       	sbci	r31, 0xD5	; 213
    2d8c:	30 81       	ld	r19, Z
    2d8e:	f6 01       	movw	r30, r12
    2d90:	e8 0f       	add	r30, r24
    2d92:	f9 1f       	adc	r31, r25
    2d94:	30 83       	st	Z, r19
	}
//	stop_TCB0();

	crcReceived = (recv1_buf.data[nbytes] << 8) | recv1_buf.data[nbytes+1];

	for (i = 2; i < nbytes+2; i++) {		// Compute expected crc value
    2d96:	2f 5f       	subi	r18, 0xFF	; 255
    2d98:	82 2f       	mov	r24, r18
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	8e 15       	cp	r24, r14
    2d9e:	9f 05       	cpc	r25, r15
    2da0:	94 f3       	brlt	.-28     	; 0x2d86 <get_MOTOR+0xc4>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, nbytes+2);
    2da2:	b7 01       	movw	r22, r14
    2da4:	c3 01       	movw	r24, r6
    2da6:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <crc16>

	if (crcReceived != crcExpected) {
    2daa:	a8 16       	cp	r10, r24
    2dac:	b9 06       	cpc	r11, r25
    2dae:	a1 f0       	breq	.+40     	; 0x2dd8 <get_MOTOR+0x116>
		printError(ERR_MTRENCCRC, "get_MOTOR: CRC mismatch");
    2db0:	65 ef       	ldi	r22, 0xF5	; 245
    2db2:	70 ea       	ldi	r23, 0xA0	; 160
    2db4:	81 e3       	ldi	r24, 0x31	; 49
    2db6:	91 e0       	ldi	r25, 0x01	; 1
    2db8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
    2dbc:	83 e6       	ldi	r24, 0x63	; 99
    2dbe:	10 c0       	rjmp	.+32     	; 0x2de0 <get_MOTOR+0x11e>
	}

	for (i = 0; i < nbytes; i++) {
		data[i] = recv1_buf.data[i];
    2dc0:	82 2f       	mov	r24, r18
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	f8 01       	movw	r30, r16
    2dc6:	e8 0f       	add	r30, r24
    2dc8:	f9 1f       	adc	r31, r25
    2dca:	dc 01       	movw	r26, r24
    2dcc:	a9 5c       	subi	r26, 0xC9	; 201
    2dce:	b5 4d       	sbci	r27, 0xD5	; 213
    2dd0:	8c 91       	ld	r24, X
    2dd2:	80 83       	st	Z, r24
	if (crcReceived != crcExpected) {
		printError(ERR_MTRENCCRC, "get_MOTOR: CRC mismatch");
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    2dd4:	2f 5f       	subi	r18, 0xFF	; 255
    2dd6:	01 c0       	rjmp	.+2      	; 0x2dda <get_MOTOR+0x118>
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	23 15       	cp	r18, r3
    2ddc:	88 f3       	brcs	.-30     	; 0x2dc0 <get_MOTOR+0xfe>
		data[i] = recv1_buf.data[i];
	}

	return(NOERROR);	
    2dde:	80 e0       	ldi	r24, 0x00	; 0
	
}
    2de0:	8d be       	out	0x3d, r8	; 61
    2de2:	9e be       	out	0x3e, r9	; 62
    2de4:	df 91       	pop	r29
    2de6:	cf 91       	pop	r28
    2de8:	1f 91       	pop	r17
    2dea:	0f 91       	pop	r16
    2dec:	ff 90       	pop	r15
    2dee:	ef 90       	pop	r14
    2df0:	df 90       	pop	r13
    2df2:	cf 90       	pop	r12
    2df4:	bf 90       	pop	r11
    2df6:	af 90       	pop	r10
    2df8:	9f 90       	pop	r9
    2dfa:	8f 90       	pop	r8
    2dfc:	7f 90       	pop	r7
    2dfe:	6f 90       	pop	r6
    2e00:	5f 90       	pop	r5
    2e02:	4f 90       	pop	r4
    2e04:	3f 90       	pop	r3
    2e06:	08 95       	ret

00002e08 <get_MOTOR_ENCODER>:
			Bit1: Direction (0=forward, 1-backwards)
			Bit2: Counter overflow (1=overflow occurred, clear after reading)
			Bits 3-7 are "reserved." Bit7 is 1.
------------------------------------------------------------------------------*/
uint8_t get_MOTOR_ENCODER(uint8_t controller, int32_t *encoderValue)
{
    2e08:	ff 92       	push	r15
    2e0a:	0f 93       	push	r16
    2e0c:	1f 93       	push	r17
    2e0e:	cf 93       	push	r28
    2e10:	df 93       	push	r29
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
    2e16:	25 97       	sbiw	r28, 0x05	; 5
    2e18:	cd bf       	out	0x3d, r28	; 61
    2e1a:	de bf       	out	0x3e, r29	; 62
    2e1c:	8b 01       	movw	r16, r22

	uint8_t data[5];	// 5 bytes includes status, which is ignored here

	if (get_MOTOR(controller, ENCODERCOUNT, data, 5) == ERROR) {
    2e1e:	25 e0       	ldi	r18, 0x05	; 5
    2e20:	ae 01       	movw	r20, r28
    2e22:	4f 5f       	subi	r20, 0xFF	; 255
    2e24:	5f 4f       	sbci	r21, 0xFF	; 255
    2e26:	60 e1       	ldi	r22, 0x10	; 16
    2e28:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <get_MOTOR>
    2e2c:	f8 2e       	mov	r15, r24
    2e2e:	83 e6       	ldi	r24, 0x63	; 99
    2e30:	f8 12       	cpse	r15, r24
    2e32:	07 c0       	rjmp	.+14     	; 0x2e42 <get_MOTOR_ENCODER+0x3a>
		printError(ERR_MTR, "get_MOTOR_ENCODER: get_MOTOR error");
    2e34:	6d e0       	ldi	r22, 0x0D	; 13
    2e36:	71 ea       	ldi	r23, 0xA1	; 161
    2e38:	86 e3       	ldi	r24, 0x36	; 54
    2e3a:	91 e0       	ldi	r25, 0x01	; 1
    2e3c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
    2e40:	28 c0       	rjmp	.+80     	; 0x2e92 <get_MOTOR_ENCODER+0x8a>
	}

	*encoderValue =  (uint32_t) data[0] << 24;
    2e42:	89 81       	ldd	r24, Y+1	; 0x01
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	a0 e0       	ldi	r26, 0x00	; 0
    2e48:	b0 e0       	ldi	r27, 0x00	; 0
    2e4a:	78 2f       	mov	r23, r24
    2e4c:	66 27       	eor	r22, r22
    2e4e:	55 27       	eor	r21, r21
    2e50:	44 27       	eor	r20, r20
	*encoderValue |= (uint32_t) data[1] << 16;
    2e52:	9a 81       	ldd	r25, Y+2	; 0x02
    2e54:	89 2f       	mov	r24, r25
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	a0 e0       	ldi	r26, 0x00	; 0
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	99 27       	eor	r25, r25
    2e60:	88 27       	eor	r24, r24
    2e62:	84 2b       	or	r24, r20
    2e64:	95 2b       	or	r25, r21
    2e66:	a6 2b       	or	r26, r22
    2e68:	b7 2b       	or	r27, r23
	*encoderValue |= (uint32_t) data[2] << 8;
    2e6a:	4b 81       	ldd	r20, Y+3	; 0x03
    2e6c:	50 e0       	ldi	r21, 0x00	; 0
    2e6e:	60 e0       	ldi	r22, 0x00	; 0
    2e70:	70 e0       	ldi	r23, 0x00	; 0
    2e72:	76 2f       	mov	r23, r22
    2e74:	65 2f       	mov	r22, r21
    2e76:	54 2f       	mov	r21, r20
    2e78:	44 27       	eor	r20, r20
    2e7a:	84 2b       	or	r24, r20
    2e7c:	95 2b       	or	r25, r21
    2e7e:	a6 2b       	or	r26, r22
    2e80:	b7 2b       	or	r27, r23
	*encoderValue |= (uint32_t) data[3];
    2e82:	2c 81       	ldd	r18, Y+4	; 0x04
    2e84:	82 2b       	or	r24, r18
    2e86:	f8 01       	movw	r30, r16
    2e88:	80 83       	st	Z, r24
    2e8a:	91 83       	std	Z+1, r25	; 0x01
    2e8c:	a2 83       	std	Z+2, r26	; 0x02
    2e8e:	b3 83       	std	Z+3, r27	; 0x03

	return(NOERROR);
    2e90:	f1 2c       	mov	r15, r1

}
    2e92:	8f 2d       	mov	r24, r15
    2e94:	25 96       	adiw	r28, 0x05	; 5
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	de bf       	out	0x3e, r29	; 62
    2e9a:	df 91       	pop	r29
    2e9c:	cf 91       	pop	r28
    2e9e:	1f 91       	pop	r17
    2ea0:	0f 91       	pop	r16
    2ea2:	ff 90       	pop	r15
    2ea4:	08 95       	ret

00002ea6 <get_MOTOR_FLOAT>:
	Returns:
		ERROR: USART timeout or CRC check error
		NOERROR
------------------------------------------------------------------------------*/
uint8_t get_MOTOR_FLOAT(uint8_t mtraddr, uint8_t cmd, float* value)
{
    2ea6:	ff 92       	push	r15
    2ea8:	0f 93       	push	r16
    2eaa:	1f 93       	push	r17
    2eac:	cf 93       	push	r28
    2eae:	df 93       	push	r29
    2eb0:	00 d0       	rcall	.+0      	; 0x2eb2 <get_MOTOR_FLOAT+0xc>
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
    2eb6:	8a 01       	movw	r16, r20

	uint8_t data[2];

	if (get_MOTOR(mtraddr, cmd, data, 2) == ERROR) {
    2eb8:	22 e0       	ldi	r18, 0x02	; 2
    2eba:	ae 01       	movw	r20, r28
    2ebc:	4f 5f       	subi	r20, 0xFF	; 255
    2ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    2ec0:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <get_MOTOR>
    2ec4:	f8 2e       	mov	r15, r24
    2ec6:	83 e6       	ldi	r24, 0x63	; 99
    2ec8:	f8 12       	cpse	r15, r24
    2eca:	10 c0       	rjmp	.+32     	; 0x2eec <get_MOTOR_FLOAT+0x46>
		printError(ERR_MTR, "get_MOTOR_FLOAT: get_MOTOR error");
    2ecc:	60 e3       	ldi	r22, 0x30	; 48
    2ece:	71 ea       	ldi	r23, 0xA1	; 161
    2ed0:	86 e3       	ldi	r24, 0x36	; 54
    2ed2:	91 e0       	ldi	r25, 0x01	; 1
    2ed4:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		*value = BADFLOAT;
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	90 e8       	ldi	r25, 0x80	; 128
    2edc:	a6 e2       	ldi	r26, 0x26	; 38
    2ede:	b4 ec       	ldi	r27, 0xC4	; 196
    2ee0:	f8 01       	movw	r30, r16
    2ee2:	80 83       	st	Z, r24
    2ee4:	91 83       	std	Z+1, r25	; 0x01
    2ee6:	a2 83       	std	Z+2, r26	; 0x02
    2ee8:	b3 83       	std	Z+3, r27	; 0x03
		return(ERROR);
    2eea:	18 c0       	rjmp	.+48     	; 0x2f1c <get_MOTOR_FLOAT+0x76>
	}
	*value = ((float) ((data[0] << 8) | data[1])) / 10.0;
    2eec:	69 81       	ldd	r22, Y+1	; 0x01
    2eee:	70 e0       	ldi	r23, 0x00	; 0
    2ef0:	76 2f       	mov	r23, r22
    2ef2:	66 27       	eor	r22, r22
    2ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef6:	68 2b       	or	r22, r24
    2ef8:	07 2e       	mov	r0, r23
    2efa:	00 0c       	add	r0, r0
    2efc:	88 0b       	sbc	r24, r24
    2efe:	99 0b       	sbc	r25, r25
    2f00:	0e 94 5f 21 	call	0x42be	; 0x42be <__floatsisf>
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	40 e2       	ldi	r20, 0x20	; 32
    2f0a:	51 e4       	ldi	r21, 0x41	; 65
    2f0c:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__divsf3>
    2f10:	f8 01       	movw	r30, r16
    2f12:	60 83       	st	Z, r22
    2f14:	71 83       	std	Z+1, r23	; 0x01
    2f16:	82 83       	std	Z+2, r24	; 0x02
    2f18:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    2f1a:	f1 2c       	mov	r15, r1
}
    2f1c:	8f 2d       	mov	r24, r15
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	df 91       	pop	r29
    2f24:	cf 91       	pop	r28
    2f26:	1f 91       	pop	r17
    2f28:	0f 91       	pop	r16
    2f2a:	ff 90       	pop	r15
    2f2c:	08 95       	ret

00002f2e <get_MOTOR_SPEED>:
			Bit1: Direction (0=forward, 1-backwards)
			Bit2: Counter overflow (1=overflow occurred, clear after reading)
			Bits 3-7 are "reserved." Bit7 is 1.
------------------------------------------------------------------------------*/
uint8_t get_MOTOR_SPEED(uint8_t mtraddr, int32_t *speed)
{
    2f2e:	ff 92       	push	r15
    2f30:	0f 93       	push	r16
    2f32:	1f 93       	push	r17
    2f34:	cf 93       	push	r28
    2f36:	df 93       	push	r29
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	25 97       	sbiw	r28, 0x05	; 5
    2f3e:	cd bf       	out	0x3d, r28	; 61
    2f40:	de bf       	out	0x3e, r29	; 62
    2f42:	8b 01       	movw	r16, r22
	
	uint8_t data[5];

	if (get_MOTOR(mtraddr, ENCODERSPEED, data, 5) == ERROR) {
    2f44:	25 e0       	ldi	r18, 0x05	; 5
    2f46:	ae 01       	movw	r20, r28
    2f48:	4f 5f       	subi	r20, 0xFF	; 255
    2f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f4c:	62 e1       	ldi	r22, 0x12	; 18
    2f4e:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <get_MOTOR>
    2f52:	f8 2e       	mov	r15, r24
    2f54:	83 e6       	ldi	r24, 0x63	; 99
    2f56:	f8 12       	cpse	r15, r24
    2f58:	07 c0       	rjmp	.+14     	; 0x2f68 <get_MOTOR_SPEED+0x3a>
		printError(ERR_MTR, "get_MOTOR_SPEED: get_MOTOR call error");
    2f5a:	61 e5       	ldi	r22, 0x51	; 81
    2f5c:	71 ea       	ldi	r23, 0xA1	; 161
    2f5e:	86 e3       	ldi	r24, 0x36	; 54
    2f60:	91 e0       	ldi	r25, 0x01	; 1
    2f62:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
    2f66:	28 c0       	rjmp	.+80     	; 0x2fb8 <get_MOTOR_SPEED+0x8a>
	}

	*speed =  (uint32_t) data[0] << 24;
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	a0 e0       	ldi	r26, 0x00	; 0
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	78 2f       	mov	r23, r24
    2f72:	66 27       	eor	r22, r22
    2f74:	55 27       	eor	r21, r21
    2f76:	44 27       	eor	r20, r20
	*speed |= (uint32_t) data[1] << 16;
    2f78:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7a:	89 2f       	mov	r24, r25
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	a0 e0       	ldi	r26, 0x00	; 0
    2f80:	b0 e0       	ldi	r27, 0x00	; 0
    2f82:	dc 01       	movw	r26, r24
    2f84:	99 27       	eor	r25, r25
    2f86:	88 27       	eor	r24, r24
    2f88:	84 2b       	or	r24, r20
    2f8a:	95 2b       	or	r25, r21
    2f8c:	a6 2b       	or	r26, r22
    2f8e:	b7 2b       	or	r27, r23
	*speed |= (uint32_t) data[2] << 8;
    2f90:	4b 81       	ldd	r20, Y+3	; 0x03
    2f92:	50 e0       	ldi	r21, 0x00	; 0
    2f94:	60 e0       	ldi	r22, 0x00	; 0
    2f96:	70 e0       	ldi	r23, 0x00	; 0
    2f98:	76 2f       	mov	r23, r22
    2f9a:	65 2f       	mov	r22, r21
    2f9c:	54 2f       	mov	r21, r20
    2f9e:	44 27       	eor	r20, r20
    2fa0:	84 2b       	or	r24, r20
    2fa2:	95 2b       	or	r25, r21
    2fa4:	a6 2b       	or	r26, r22
    2fa6:	b7 2b       	or	r27, r23
	*speed |= (uint32_t) data[3];
    2fa8:	2c 81       	ldd	r18, Y+4	; 0x04
    2faa:	82 2b       	or	r24, r18
    2fac:	f8 01       	movw	r30, r16
    2fae:	80 83       	st	Z, r24
    2fb0:	91 83       	std	Z+1, r25	; 0x01
    2fb2:	a2 83       	std	Z+2, r26	; 0x02
    2fb4:	b3 83       	std	Z+3, r27	; 0x03

	return(NOERROR);
    2fb6:	f1 2c       	mov	r15, r1

}
    2fb8:	8f 2d       	mov	r24, r15
    2fba:	25 96       	adiw	r28, 0x05	; 5
    2fbc:	cd bf       	out	0x3d, r28	; 61
    2fbe:	de bf       	out	0x3e, r29	; 62
    2fc0:	df 91       	pop	r29
    2fc2:	cf 91       	pop	r28
    2fc4:	1f 91       	pop	r17
    2fc6:	0f 91       	pop	r16
    2fc8:	ff 90       	pop	r15
    2fca:	08 95       	ret

00002fcc <get_MOTOR_CURRENT>:

uint8_t get_MOTOR_CURRENT(uint8_t mtraddr, uint16_t *current)
{
    2fcc:	ff 92       	push	r15
    2fce:	0f 93       	push	r16
    2fd0:	1f 93       	push	r17
    2fd2:	cf 93       	push	r28
    2fd4:	df 93       	push	r29
    2fd6:	00 d0       	rcall	.+0      	; 0x2fd8 <get_MOTOR_CURRENT+0xc>
    2fd8:	00 d0       	rcall	.+0      	; 0x2fda <get_MOTOR_CURRENT+0xe>
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
    2fde:	8b 01       	movw	r16, r22
	uint8_t data[4];

	if (get_MOTOR(mtraddr, ROBOREADCURRENT, data, 4) == ERROR) {
    2fe0:	24 e0       	ldi	r18, 0x04	; 4
    2fe2:	ae 01       	movw	r20, r28
    2fe4:	4f 5f       	subi	r20, 0xFF	; 255
    2fe6:	5f 4f       	sbci	r21, 0xFF	; 255
    2fe8:	61 e3       	ldi	r22, 0x31	; 49
    2fea:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <get_MOTOR>
    2fee:	f8 2e       	mov	r15, r24
    2ff0:	83 e6       	ldi	r24, 0x63	; 99
    2ff2:	f8 12       	cpse	r15, r24
    2ff4:	0c c0       	rjmp	.+24     	; 0x300e <get_MOTOR_CURRENT+0x42>
		printError(ERR_MTR, "get_MOTOR_CURRENT: get_MOTOR error");
    2ff6:	67 e7       	ldi	r22, 0x77	; 119
    2ff8:	71 ea       	ldi	r23, 0xA1	; 161
    2ffa:	86 e3       	ldi	r24, 0x36	; 54
    2ffc:	91 e0       	ldi	r25, 0x01	; 1
    2ffe:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		*current = 0xFFFF;
    3002:	8f ef       	ldi	r24, 0xFF	; 255
    3004:	9f ef       	ldi	r25, 0xFF	; 255
    3006:	f8 01       	movw	r30, r16
    3008:	80 83       	st	Z, r24
    300a:	91 83       	std	Z+1, r25	; 0x01
		return(ERROR);
    300c:	15 c0       	rjmp	.+42     	; 0x3038 <get_MOTOR_CURRENT+0x6c>
	}
	*current = (((uint16_t) data[0] << 8) | (uint16_t) data[1]) * 10;
    300e:	89 81       	ldd	r24, Y+1	; 0x01
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	98 2f       	mov	r25, r24
    3014:	88 27       	eor	r24, r24
    3016:	2a 81       	ldd	r18, Y+2	; 0x02
    3018:	82 2b       	or	r24, r18
    301a:	9c 01       	movw	r18, r24
    301c:	22 0f       	add	r18, r18
    301e:	33 1f       	adc	r19, r19
    3020:	88 0f       	add	r24, r24
    3022:	99 1f       	adc	r25, r25
    3024:	88 0f       	add	r24, r24
    3026:	99 1f       	adc	r25, r25
    3028:	88 0f       	add	r24, r24
    302a:	99 1f       	adc	r25, r25
    302c:	82 0f       	add	r24, r18
    302e:	93 1f       	adc	r25, r19
    3030:	f8 01       	movw	r30, r16
    3032:	80 83       	st	Z, r24
    3034:	91 83       	std	Z+1, r25	; 0x01
	return(NOERROR);	
    3036:	f1 2c       	mov	r15, r1
}
    3038:	8f 2d       	mov	r24, r15
    303a:	24 96       	adiw	r28, 0x04	; 4
    303c:	cd bf       	out	0x3d, r28	; 61
    303e:	de bf       	out	0x3e, r29	; 62
    3040:	df 91       	pop	r29
    3042:	cf 91       	pop	r28
    3044:	1f 91       	pop	r17
    3046:	0f 91       	pop	r16
    3048:	ff 90       	pop	r15
    304a:	08 95       	ret

0000304c <get_MOTOR_PID>:

uint8_t get_MOTOR_PID(uint8_t mtraddr, PID *pid)
{
    304c:	ff 92       	push	r15
    304e:	0f 93       	push	r16
    3050:	1f 93       	push	r17
    3052:	cf 93       	push	r28
    3054:	df 93       	push	r29
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
    305a:	6c 97       	sbiw	r28, 0x1c	; 28
    305c:	cd bf       	out	0x3d, r28	; 61
    305e:	de bf       	out	0x3e, r29	; 62
    3060:	8b 01       	movw	r16, r22
	uint8_t data[28];
	int32_t p, i, d, maxI, deadZone, minPos, maxPos;

	if (get_MOTOR(mtraddr, READPID, data, 28) == ERROR) {
    3062:	2c e1       	ldi	r18, 0x1C	; 28
    3064:	ae 01       	movw	r20, r28
    3066:	4f 5f       	subi	r20, 0xFF	; 255
    3068:	5f 4f       	sbci	r21, 0xFF	; 255
    306a:	6f e3       	ldi	r22, 0x3F	; 63
    306c:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <get_MOTOR>
    3070:	f8 2e       	mov	r15, r24
    3072:	83 e6       	ldi	r24, 0x63	; 99
    3074:	f8 12       	cpse	r15, r24
    3076:	07 c0       	rjmp	.+14     	; 0x3086 <get_MOTOR_PID+0x3a>
		printError(ERR_MTR, "get_MOTOR_PID: get_MOTOR error");
    3078:	6a e9       	ldi	r22, 0x9A	; 154
    307a:	71 ea       	ldi	r23, 0xA1	; 161
    307c:	86 e3       	ldi	r24, 0x36	; 54
    307e:	91 e0       	ldi	r25, 0x01	; 1
    3080:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
    3084:	29 c1       	rjmp	.+594    	; 0x32d8 <get_MOTOR_PID+0x28c>
	}

	p =  (uint32_t) data[0] << 24;
    3086:	49 81       	ldd	r20, Y+1	; 0x01
    3088:	50 e0       	ldi	r21, 0x00	; 0
    308a:	60 e0       	ldi	r22, 0x00	; 0
    308c:	70 e0       	ldi	r23, 0x00	; 0
    308e:	74 2f       	mov	r23, r20
    3090:	66 27       	eor	r22, r22
    3092:	55 27       	eor	r21, r21
    3094:	44 27       	eor	r20, r20
	p |= (uint32_t) data[1] << 16;
    3096:	8a 81       	ldd	r24, Y+2	; 0x02
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	a0 e0       	ldi	r26, 0x00	; 0
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	dc 01       	movw	r26, r24
    30a0:	99 27       	eor	r25, r25
    30a2:	88 27       	eor	r24, r24
    30a4:	48 2b       	or	r20, r24
    30a6:	59 2b       	or	r21, r25
    30a8:	6a 2b       	or	r22, r26
    30aa:	7b 2b       	or	r23, r27
	p |= (uint32_t) data[2] << 8;
    30ac:	8b 81       	ldd	r24, Y+3	; 0x03
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	a0 e0       	ldi	r26, 0x00	; 0
    30b2:	b0 e0       	ldi	r27, 0x00	; 0
    30b4:	ba 2f       	mov	r27, r26
    30b6:	a9 2f       	mov	r26, r25
    30b8:	98 2f       	mov	r25, r24
    30ba:	88 27       	eor	r24, r24
    30bc:	84 2b       	or	r24, r20
    30be:	95 2b       	or	r25, r21
    30c0:	a6 2b       	or	r26, r22
    30c2:	b7 2b       	or	r27, r23
	p |= (uint32_t) data[3];
    30c4:	2c 81       	ldd	r18, Y+4	; 0x04
    30c6:	bc 01       	movw	r22, r24
    30c8:	cd 01       	movw	r24, r26
    30ca:	62 2b       	or	r22, r18
	pid->p = (float) p / 1024.0;
    30cc:	0e 94 5f 21 	call	0x42be	; 0x42be <__floatsisf>
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	40 e8       	ldi	r20, 0x80	; 128
    30d6:	5a e3       	ldi	r21, 0x3A	; 58
    30d8:	0e 94 14 22 	call	0x4428	; 0x4428 <__mulsf3>
    30dc:	f8 01       	movw	r30, r16
    30de:	60 83       	st	Z, r22
    30e0:	71 83       	std	Z+1, r23	; 0x01
    30e2:	82 83       	std	Z+2, r24	; 0x02
    30e4:	93 83       	std	Z+3, r25	; 0x03

	i =  (uint32_t) data[4] << 24;
    30e6:	4d 81       	ldd	r20, Y+5	; 0x05
    30e8:	50 e0       	ldi	r21, 0x00	; 0
    30ea:	60 e0       	ldi	r22, 0x00	; 0
    30ec:	70 e0       	ldi	r23, 0x00	; 0
    30ee:	74 2f       	mov	r23, r20
    30f0:	66 27       	eor	r22, r22
    30f2:	55 27       	eor	r21, r21
    30f4:	44 27       	eor	r20, r20
	i |= (uint32_t) data[5] << 16;
    30f6:	8e 81       	ldd	r24, Y+6	; 0x06
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	a0 e0       	ldi	r26, 0x00	; 0
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	dc 01       	movw	r26, r24
    3100:	99 27       	eor	r25, r25
    3102:	88 27       	eor	r24, r24
    3104:	48 2b       	or	r20, r24
    3106:	59 2b       	or	r21, r25
    3108:	6a 2b       	or	r22, r26
    310a:	7b 2b       	or	r23, r27
	i |= (uint32_t) data[6] << 8;
    310c:	8f 81       	ldd	r24, Y+7	; 0x07
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	a0 e0       	ldi	r26, 0x00	; 0
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	ba 2f       	mov	r27, r26
    3116:	a9 2f       	mov	r26, r25
    3118:	98 2f       	mov	r25, r24
    311a:	88 27       	eor	r24, r24
    311c:	84 2b       	or	r24, r20
    311e:	95 2b       	or	r25, r21
    3120:	a6 2b       	or	r26, r22
    3122:	b7 2b       	or	r27, r23
	i |= (uint32_t) data[7];
    3124:	28 85       	ldd	r18, Y+8	; 0x08
    3126:	bc 01       	movw	r22, r24
    3128:	cd 01       	movw	r24, r26
    312a:	62 2b       	or	r22, r18
	pid->i = (float) i / 1024.0;
    312c:	0e 94 5f 21 	call	0x42be	; 0x42be <__floatsisf>
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	40 e8       	ldi	r20, 0x80	; 128
    3136:	5a e3       	ldi	r21, 0x3A	; 58
    3138:	0e 94 14 22 	call	0x4428	; 0x4428 <__mulsf3>
    313c:	f8 01       	movw	r30, r16
    313e:	64 83       	std	Z+4, r22	; 0x04
    3140:	75 83       	std	Z+5, r23	; 0x05
    3142:	86 83       	std	Z+6, r24	; 0x06
    3144:	97 83       	std	Z+7, r25	; 0x07

	d =  (uint32_t) data[8] << 24;
    3146:	49 85       	ldd	r20, Y+9	; 0x09
    3148:	50 e0       	ldi	r21, 0x00	; 0
    314a:	60 e0       	ldi	r22, 0x00	; 0
    314c:	70 e0       	ldi	r23, 0x00	; 0
    314e:	74 2f       	mov	r23, r20
    3150:	66 27       	eor	r22, r22
    3152:	55 27       	eor	r21, r21
    3154:	44 27       	eor	r20, r20
	d |= (uint32_t) data[9] << 16;
    3156:	8a 85       	ldd	r24, Y+10	; 0x0a
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	a0 e0       	ldi	r26, 0x00	; 0
    315c:	b0 e0       	ldi	r27, 0x00	; 0
    315e:	dc 01       	movw	r26, r24
    3160:	99 27       	eor	r25, r25
    3162:	88 27       	eor	r24, r24
    3164:	48 2b       	or	r20, r24
    3166:	59 2b       	or	r21, r25
    3168:	6a 2b       	or	r22, r26
    316a:	7b 2b       	or	r23, r27
	d |= (uint32_t) data[10] << 8;
    316c:	8b 85       	ldd	r24, Y+11	; 0x0b
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	a0 e0       	ldi	r26, 0x00	; 0
    3172:	b0 e0       	ldi	r27, 0x00	; 0
    3174:	ba 2f       	mov	r27, r26
    3176:	a9 2f       	mov	r26, r25
    3178:	98 2f       	mov	r25, r24
    317a:	88 27       	eor	r24, r24
    317c:	84 2b       	or	r24, r20
    317e:	95 2b       	or	r25, r21
    3180:	a6 2b       	or	r26, r22
    3182:	b7 2b       	or	r27, r23
	d |= (uint32_t) data[11];
    3184:	2c 85       	ldd	r18, Y+12	; 0x0c
    3186:	bc 01       	movw	r22, r24
    3188:	cd 01       	movw	r24, r26
    318a:	62 2b       	or	r22, r18
	pid->d = (float) d / 1024.0;
    318c:	0e 94 5f 21 	call	0x42be	; 0x42be <__floatsisf>
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	40 e8       	ldi	r20, 0x80	; 128
    3196:	5a e3       	ldi	r21, 0x3A	; 58
    3198:	0e 94 14 22 	call	0x4428	; 0x4428 <__mulsf3>
    319c:	f8 01       	movw	r30, r16
    319e:	60 87       	std	Z+8, r22	; 0x08
    31a0:	71 87       	std	Z+9, r23	; 0x09
    31a2:	82 87       	std	Z+10, r24	; 0x0a
    31a4:	93 87       	std	Z+11, r25	; 0x0b

	maxI =  (uint32_t) data[12] << 24;
    31a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	a0 e0       	ldi	r26, 0x00	; 0
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	78 2f       	mov	r23, r24
    31b0:	66 27       	eor	r22, r22
    31b2:	55 27       	eor	r21, r21
    31b4:	44 27       	eor	r20, r20
	maxI |= (uint32_t) data[13] << 16;
    31b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b8:	89 2f       	mov	r24, r25
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	a0 e0       	ldi	r26, 0x00	; 0
    31be:	b0 e0       	ldi	r27, 0x00	; 0
    31c0:	dc 01       	movw	r26, r24
    31c2:	99 27       	eor	r25, r25
    31c4:	88 27       	eor	r24, r24
    31c6:	84 2b       	or	r24, r20
    31c8:	95 2b       	or	r25, r21
    31ca:	a6 2b       	or	r26, r22
    31cc:	b7 2b       	or	r27, r23
	maxI |= (uint32_t) data[14] << 8;
    31ce:	4f 85       	ldd	r20, Y+15	; 0x0f
    31d0:	50 e0       	ldi	r21, 0x00	; 0
    31d2:	60 e0       	ldi	r22, 0x00	; 0
    31d4:	70 e0       	ldi	r23, 0x00	; 0
    31d6:	76 2f       	mov	r23, r22
    31d8:	65 2f       	mov	r22, r21
    31da:	54 2f       	mov	r21, r20
    31dc:	44 27       	eor	r20, r20
    31de:	84 2b       	or	r24, r20
    31e0:	95 2b       	or	r25, r21
    31e2:	a6 2b       	or	r26, r22
    31e4:	b7 2b       	or	r27, r23
	maxI |= (uint32_t) data[15];
    31e6:	28 89       	ldd	r18, Y+16	; 0x10
    31e8:	82 2b       	or	r24, r18
	pid->maxI = maxI;
    31ea:	84 87       	std	Z+12, r24	; 0x0c
    31ec:	95 87       	std	Z+13, r25	; 0x0d
    31ee:	a6 87       	std	Z+14, r26	; 0x0e
    31f0:	b7 87       	std	Z+15, r27	; 0x0f

	deadZone =  (uint32_t) data[16] << 24;
    31f2:	89 89       	ldd	r24, Y+17	; 0x11
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	a0 e0       	ldi	r26, 0x00	; 0
    31f8:	b0 e0       	ldi	r27, 0x00	; 0
    31fa:	78 2f       	mov	r23, r24
    31fc:	66 27       	eor	r22, r22
    31fe:	55 27       	eor	r21, r21
    3200:	44 27       	eor	r20, r20
	deadZone |= (uint32_t) data[17] << 16;
    3202:	9a 89       	ldd	r25, Y+18	; 0x12
    3204:	89 2f       	mov	r24, r25
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	a0 e0       	ldi	r26, 0x00	; 0
    320a:	b0 e0       	ldi	r27, 0x00	; 0
    320c:	dc 01       	movw	r26, r24
    320e:	99 27       	eor	r25, r25
    3210:	88 27       	eor	r24, r24
    3212:	84 2b       	or	r24, r20
    3214:	95 2b       	or	r25, r21
    3216:	a6 2b       	or	r26, r22
    3218:	b7 2b       	or	r27, r23
	deadZone |= (uint32_t) data[18] << 8;
    321a:	4b 89       	ldd	r20, Y+19	; 0x13
    321c:	50 e0       	ldi	r21, 0x00	; 0
    321e:	60 e0       	ldi	r22, 0x00	; 0
    3220:	70 e0       	ldi	r23, 0x00	; 0
    3222:	76 2f       	mov	r23, r22
    3224:	65 2f       	mov	r22, r21
    3226:	54 2f       	mov	r21, r20
    3228:	44 27       	eor	r20, r20
    322a:	84 2b       	or	r24, r20
    322c:	95 2b       	or	r25, r21
    322e:	a6 2b       	or	r26, r22
    3230:	b7 2b       	or	r27, r23
	deadZone |= (uint32_t) data[19];
    3232:	2c 89       	ldd	r18, Y+20	; 0x14
    3234:	82 2b       	or	r24, r18
	pid->deadZone = deadZone;
    3236:	80 8b       	std	Z+16, r24	; 0x10
    3238:	91 8b       	std	Z+17, r25	; 0x11
    323a:	a2 8b       	std	Z+18, r26	; 0x12
    323c:	b3 8b       	std	Z+19, r27	; 0x13

	minPos =  (uint32_t) data[20] << 24;
    323e:	8d 89       	ldd	r24, Y+21	; 0x15
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	a0 e0       	ldi	r26, 0x00	; 0
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	78 2f       	mov	r23, r24
    3248:	66 27       	eor	r22, r22
    324a:	55 27       	eor	r21, r21
    324c:	44 27       	eor	r20, r20
	minPos |= (uint32_t) data[21] << 16;
    324e:	9e 89       	ldd	r25, Y+22	; 0x16
    3250:	89 2f       	mov	r24, r25
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	a0 e0       	ldi	r26, 0x00	; 0
    3256:	b0 e0       	ldi	r27, 0x00	; 0
    3258:	dc 01       	movw	r26, r24
    325a:	99 27       	eor	r25, r25
    325c:	88 27       	eor	r24, r24
    325e:	84 2b       	or	r24, r20
    3260:	95 2b       	or	r25, r21
    3262:	a6 2b       	or	r26, r22
    3264:	b7 2b       	or	r27, r23
	minPos |= (uint32_t) data[22] << 8;
    3266:	4f 89       	ldd	r20, Y+23	; 0x17
    3268:	50 e0       	ldi	r21, 0x00	; 0
    326a:	60 e0       	ldi	r22, 0x00	; 0
    326c:	70 e0       	ldi	r23, 0x00	; 0
    326e:	76 2f       	mov	r23, r22
    3270:	65 2f       	mov	r22, r21
    3272:	54 2f       	mov	r21, r20
    3274:	44 27       	eor	r20, r20
    3276:	84 2b       	or	r24, r20
    3278:	95 2b       	or	r25, r21
    327a:	a6 2b       	or	r26, r22
    327c:	b7 2b       	or	r27, r23
	minPos |= (uint32_t) data[23];
    327e:	28 8d       	ldd	r18, Y+24	; 0x18
    3280:	82 2b       	or	r24, r18
	pid->minPos = minPos;
    3282:	84 8b       	std	Z+20, r24	; 0x14
    3284:	95 8b       	std	Z+21, r25	; 0x15
    3286:	a6 8b       	std	Z+22, r26	; 0x16
    3288:	b7 8b       	std	Z+23, r27	; 0x17

	maxPos =  (uint32_t) data[24] << 24;
    328a:	89 8d       	ldd	r24, Y+25	; 0x19
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	a0 e0       	ldi	r26, 0x00	; 0
    3290:	b0 e0       	ldi	r27, 0x00	; 0
    3292:	78 2f       	mov	r23, r24
    3294:	66 27       	eor	r22, r22
    3296:	55 27       	eor	r21, r21
    3298:	44 27       	eor	r20, r20
	maxPos |= (uint32_t) data[25] << 16;
    329a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    329c:	89 2f       	mov	r24, r25
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	a0 e0       	ldi	r26, 0x00	; 0
    32a2:	b0 e0       	ldi	r27, 0x00	; 0
    32a4:	dc 01       	movw	r26, r24
    32a6:	99 27       	eor	r25, r25
    32a8:	88 27       	eor	r24, r24
    32aa:	84 2b       	or	r24, r20
    32ac:	95 2b       	or	r25, r21
    32ae:	a6 2b       	or	r26, r22
    32b0:	b7 2b       	or	r27, r23
	maxPos |= (uint32_t) data[26] << 8;
    32b2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    32b4:	50 e0       	ldi	r21, 0x00	; 0
    32b6:	60 e0       	ldi	r22, 0x00	; 0
    32b8:	70 e0       	ldi	r23, 0x00	; 0
    32ba:	76 2f       	mov	r23, r22
    32bc:	65 2f       	mov	r22, r21
    32be:	54 2f       	mov	r21, r20
    32c0:	44 27       	eor	r20, r20
    32c2:	84 2b       	or	r24, r20
    32c4:	95 2b       	or	r25, r21
    32c6:	a6 2b       	or	r26, r22
    32c8:	b7 2b       	or	r27, r23
	maxPos |= (uint32_t) data[27];
    32ca:	2c 8d       	ldd	r18, Y+28	; 0x1c
    32cc:	82 2b       	or	r24, r18
	pid->maxPos = maxPos;
    32ce:	80 8f       	std	Z+24, r24	; 0x18
    32d0:	91 8f       	std	Z+25, r25	; 0x19
    32d2:	a2 8f       	std	Z+26, r26	; 0x1a
    32d4:	b3 8f       	std	Z+27, r27	; 0x1b

	return(NOERROR);
    32d6:	f1 2c       	mov	r15, r1

}
    32d8:	8f 2d       	mov	r24, r15
    32da:	6c 96       	adiw	r28, 0x1c	; 28
    32dc:	cd bf       	out	0x3d, r28	; 61
    32de:	de bf       	out	0x3e, r29	; 62
    32e0:	df 91       	pop	r29
    32e2:	cf 91       	pop	r28
    32e4:	1f 91       	pop	r17
    32e6:	0f 91       	pop	r16
    32e8:	ff 90       	pop	r15
    32ea:	08 95       	ret

000032ec <motorsMoving>:
	}
	return(NOERROR);
}

uint8_t motorsMoving(void)
{
    32ec:	1f 93       	push	r17
    32ee:	cf 93       	push	r28
    32f0:	df 93       	push	r29
    32f2:	00 d0       	rcall	.+0      	; 0x32f4 <motorsMoving+0x8>
    32f4:	00 d0       	rcall	.+0      	; 0x32f6 <motorsMoving+0xa>
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int32_t encoderSpeed;

	for (i = MOTOR_A; i <= MOTOR_C; i++) {
    32fa:	10 e8       	ldi	r17, 0x80	; 128
    32fc:	18 c0       	rjmp	.+48     	; 0x332e <motorsMoving+0x42>
		if (get_MOTOR_SPEED(i, &encoderSpeed) == ERROR) {
    32fe:	be 01       	movw	r22, r28
    3300:	6f 5f       	subi	r22, 0xFF	; 255
    3302:	7f 4f       	sbci	r23, 0xFF	; 255
    3304:	81 2f       	mov	r24, r17
    3306:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <get_MOTOR_SPEED>
    330a:	83 36       	cpi	r24, 0x63	; 99
    330c:	39 f4       	brne	.+14     	; 0x331c <motorsMoving+0x30>
			printError(ERR_MTR, "motorsMoving: get_MOTOR_SPEED error");
    330e:	69 eb       	ldi	r22, 0xB9	; 185
    3310:	71 ea       	ldi	r23, 0xA1	; 161
    3312:	86 e3       	ldi	r24, 0x36	; 54
    3314:	91 e0       	ldi	r25, 0x01	; 1
    3316:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
			continue;
    331a:	08 c0       	rjmp	.+16     	; 0x332c <motorsMoving+0x40>
		}
		if (encoderSpeed != 0) {
    331c:	89 81       	ldd	r24, Y+1	; 0x01
    331e:	9a 81       	ldd	r25, Y+2	; 0x02
    3320:	ab 81       	ldd	r26, Y+3	; 0x03
    3322:	bc 81       	ldd	r27, Y+4	; 0x04
    3324:	89 2b       	or	r24, r25
    3326:	8a 2b       	or	r24, r26
    3328:	8b 2b       	or	r24, r27
    332a:	29 f4       	brne	.+10     	; 0x3336 <motorsMoving+0x4a>
uint8_t motorsMoving(void)
{
	uint8_t i;
	int32_t encoderSpeed;

	for (i = MOTOR_A; i <= MOTOR_C; i++) {
    332c:	1f 5f       	subi	r17, 0xFF	; 255
    332e:	13 38       	cpi	r17, 0x83	; 131
    3330:	30 f3       	brcs	.-52     	; 0x32fe <motorsMoving+0x12>
		if (encoderSpeed != 0) {
			return(YES);
		}
	}

	return(NO);
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	01 c0       	rjmp	.+2      	; 0x3338 <motorsMoving+0x4c>
		if (get_MOTOR_SPEED(i, &encoderSpeed) == ERROR) {
			printError(ERR_MTR, "motorsMoving: get_MOTOR_SPEED error");
			continue;
		}
		if (encoderSpeed != 0) {
			return(YES);
    3336:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	return(NO);

}
    3338:	24 96       	adiw	r28, 0x04	; 4
    333a:	cd bf       	out	0x3d, r28	; 61
    333c:	de bf       	out	0x3e, r29	; 62
    333e:	df 91       	pop	r29
    3340:	cf 91       	pop	r28
    3342:	1f 91       	pop	r17
    3344:	08 95       	ret

00003346 <put_FRAM_ENCODERS>:
	Returns:
		ERROR on get_MOTOREncoder or write_FRAM failure
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t put_FRAM_ENCODERS(void)
{
    3346:	ef 92       	push	r14
    3348:	ff 92       	push	r15
    334a:	0f 93       	push	r16
    334c:	1f 93       	push	r17
    334e:	cf 93       	push	r28
    3350:	df 93       	push	r29
    3352:	cd b7       	in	r28, 0x3d	; 61
    3354:	de b7       	in	r29, 0x3e	; 62
    3356:	61 97       	sbiw	r28, 0x11	; 17
    3358:	cd bf       	out	0x3d, r28	; 61
    335a:	de bf       	out	0x3e, r29	; 62

	uint8_t i, tbuf[4], errorFlag, mtraddr[3] = {MOTOR_A, MOTOR_B, MOTOR_C};
    335c:	80 e8       	ldi	r24, 0x80	; 128
    335e:	8d 83       	std	Y+5, r24	; 0x05
    3360:	81 e8       	ldi	r24, 0x81	; 129
    3362:	8e 83       	std	Y+6, r24	; 0x06
    3364:	82 e8       	ldi	r24, 0x82	; 130
    3366:	8f 83       	std	Y+7, r24	; 0x07
	uint16_t memaddr[3] = {ENCA_FRAMADDR, ENCB_FRAMADDR, ENCC_FRAMADDR};
    3368:	86 e0       	ldi	r24, 0x06	; 6
    336a:	e4 e7       	ldi	r30, 0x74	; 116
    336c:	fb e9       	ldi	r31, 0x9B	; 155
    336e:	de 01       	movw	r26, r28
    3370:	18 96       	adiw	r26, 0x08	; 8
    3372:	01 90       	ld	r0, Z+
    3374:	0d 92       	st	X+, r0
    3376:	8a 95       	dec	r24
    3378:	e1 f7       	brne	.-8      	; 0x3372 <put_FRAM_ENCODERS+0x2c>
	int32_t encoderValue;

	errorFlag = 0;
    337a:	e1 2c       	mov	r14, r1
	for (i = 0; i < 3; i++) {
    337c:	f1 2c       	mov	r15, r1
    337e:	3c c0       	rjmp	.+120    	; 0x33f8 <put_FRAM_ENCODERS+0xb2>
		if (get_MOTOR_ENCODER(mtraddr[i], &encoderValue) == ERROR) {
    3380:	0f 2d       	mov	r16, r15
    3382:	10 e0       	ldi	r17, 0x00	; 0
    3384:	e5 e0       	ldi	r30, 0x05	; 5
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	ec 0f       	add	r30, r28
    338a:	fd 1f       	adc	r31, r29
    338c:	e0 0f       	add	r30, r16
    338e:	f1 1f       	adc	r31, r17
    3390:	be 01       	movw	r22, r28
    3392:	62 5f       	subi	r22, 0xF2	; 242
    3394:	7f 4f       	sbci	r23, 0xFF	; 255
    3396:	80 81       	ld	r24, Z
    3398:	0e 94 04 17 	call	0x2e08	; 0x2e08 <get_MOTOR_ENCODER>
    339c:	83 36       	cpi	r24, 0x63	; 99
    339e:	41 f4       	brne	.+16     	; 0x33b0 <put_FRAM_ENCODERS+0x6a>
			printError(ERR_MTR, "put_FRAM_ENCODERS: get_MOTOR_ENCODER error");
    33a0:	6d ed       	ldi	r22, 0xDD	; 221
    33a2:	71 ea       	ldi	r23, 0xA1	; 161
    33a4:	86 e3       	ldi	r24, 0x36	; 54
    33a6:	91 e0       	ldi	r25, 0x01	; 1
    33a8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
			errorFlag = 1;
    33ac:	ee 24       	eor	r14, r14
    33ae:	e3 94       	inc	r14
		}
		tbuf[0] = (encoderValue >> 24) & 0xFF;
    33b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    33b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    33b4:	28 89       	ldd	r18, Y+16	; 0x10
    33b6:	39 89       	ldd	r19, Y+17	; 0x11
    33b8:	39 83       	std	Y+1, r19	; 0x01
		tbuf[1] = (encoderValue >> 16) & 0xFF;
    33ba:	2a 83       	std	Y+2, r18	; 0x02
		tbuf[2] = (encoderValue >> 8) & 0xFF;
    33bc:	9b 83       	std	Y+3, r25	; 0x03
		tbuf[3] = encoderValue & 0xFF;
    33be:	8c 83       	std	Y+4, r24	; 0x04
		if (write_FRAM(FRAMTWIADDR, memaddr[i], tbuf, 4) == ERROR) {
    33c0:	00 0f       	add	r16, r16
    33c2:	11 1f       	adc	r17, r17
    33c4:	e1 e0       	ldi	r30, 0x01	; 1
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	ec 0f       	add	r30, r28
    33ca:	fd 1f       	adc	r31, r29
    33cc:	e0 0f       	add	r30, r16
    33ce:	f1 1f       	adc	r31, r17
    33d0:	67 81       	ldd	r22, Z+7	; 0x07
    33d2:	70 85       	ldd	r23, Z+8	; 0x08
    33d4:	24 e0       	ldi	r18, 0x04	; 4
    33d6:	ae 01       	movw	r20, r28
    33d8:	4f 5f       	subi	r20, 0xFF	; 255
    33da:	5f 4f       	sbci	r21, 0xFF	; 255
    33dc:	80 e5       	ldi	r24, 0x50	; 80
    33de:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <write_FRAM>
    33e2:	83 36       	cpi	r24, 0x63	; 99
    33e4:	41 f4       	brne	.+16     	; 0x33f6 <put_FRAM_ENCODERS+0xb0>
			printError(ERR_FRAM, "put_FRAM_ENCODERS: write_FRAM error");
    33e6:	68 e0       	ldi	r22, 0x08	; 8
    33e8:	72 ea       	ldi	r23, 0xA2	; 162
    33ea:	83 e9       	ldi	r24, 0x93	; 147
    33ec:	91 e0       	ldi	r25, 0x01	; 1
    33ee:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
			errorFlag = 1;
    33f2:	ee 24       	eor	r14, r14
    33f4:	e3 94       	inc	r14
	uint8_t i, tbuf[4], errorFlag, mtraddr[3] = {MOTOR_A, MOTOR_B, MOTOR_C};
	uint16_t memaddr[3] = {ENCA_FRAMADDR, ENCB_FRAMADDR, ENCC_FRAMADDR};
	int32_t encoderValue;

	errorFlag = 0;
	for (i = 0; i < 3; i++) {
    33f6:	f3 94       	inc	r15
    33f8:	82 e0       	ldi	r24, 0x02	; 2
    33fa:	8f 15       	cp	r24, r15
    33fc:	08 f6       	brcc	.-126    	; 0x3380 <put_FRAM_ENCODERS+0x3a>
		if (write_FRAM(FRAMTWIADDR, memaddr[i], tbuf, 4) == ERROR) {
			printError(ERR_FRAM, "put_FRAM_ENCODERS: write_FRAM error");
			errorFlag = 1;
		}
	}
	if (errorFlag) {
    33fe:	ee 20       	and	r14, r14
    3400:	11 f0       	breq	.+4      	; 0x3406 <put_FRAM_ENCODERS+0xc0>
		return(ERROR);
    3402:	83 e6       	ldi	r24, 0x63	; 99
    3404:	01 c0       	rjmp	.+2      	; 0x3408 <put_FRAM_ENCODERS+0xc2>
	} else {
		return(NOERROR);
    3406:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    3408:	61 96       	adiw	r28, 0x11	; 17
    340a:	cd bf       	out	0x3d, r28	; 61
    340c:	de bf       	out	0x3e, r29	; 62
    340e:	df 91       	pop	r29
    3410:	cf 91       	pop	r28
    3412:	1f 91       	pop	r17
    3414:	0f 91       	pop	r16
    3416:	ff 90       	pop	r15
    3418:	ef 90       	pop	r14
    341a:	08 95       	ret

0000341c <put_MOTOR>:

uint8_t put_MOTOR(uint8_t mtraddr, uint8_t cmd, uint8_t* data, uint8_t nbytes)
{
    341c:	8f 92       	push	r8
    341e:	9f 92       	push	r9
    3420:	bf 92       	push	r11
    3422:	cf 92       	push	r12
    3424:	df 92       	push	r13
    3426:	ef 92       	push	r14
    3428:	ff 92       	push	r15
    342a:	0f 93       	push	r16
    342c:	1f 93       	push	r17
    342e:	cf 93       	push	r28
    3430:	df 93       	push	r29
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	b2 2e       	mov	r11, r18
	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
		printError(ERR_MTR, "put_MOTOR: bad ACK");
		return(ERROR);
	}
	return(NOERROR);
}
    3438:	cd b6       	in	r12, 0x3d	; 61
    343a:	de b6       	in	r13, 0x3e	; 62
	}
}

uint8_t put_MOTOR(uint8_t mtraddr, uint8_t cmd, uint8_t* data, uint8_t nbytes)
{
	uint8_t i, tbuf[nbytes+4];
    343c:	82 2e       	mov	r8, r18
    343e:	91 2c       	mov	r9, r1
    3440:	94 01       	movw	r18, r8
    3442:	2c 5f       	subi	r18, 0xFC	; 252
    3444:	3f 4f       	sbci	r19, 0xFF	; 255
    3446:	74 01       	movw	r14, r8
    3448:	93 e0       	ldi	r25, 0x03	; 3
    344a:	e9 0e       	add	r14, r25
    344c:	f1 1c       	adc	r15, r1
    344e:	ed b7       	in	r30, 0x3d	; 61
    3450:	fe b7       	in	r31, 0x3e	; 62
    3452:	e2 1b       	sub	r30, r18
    3454:	f3 0b       	sbc	r31, r19
    3456:	ed bf       	out	0x3d, r30	; 61
    3458:	fe bf       	out	0x3e, r31	; 62
    345a:	0d b7       	in	r16, 0x3d	; 61
    345c:	1e b7       	in	r17, 0x3e	; 62
    345e:	0f 5f       	subi	r16, 0xFF	; 255
    3460:	1f 4f       	sbci	r17, 0xFF	; 255
    3462:	98 01       	movw	r18, r16
	uint16_t crc;

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    3464:	10 92 37 2a 	sts	0x2A37, r1	; 0x802a37 <recv1_buf>
	recv1_buf.nbytes = 1;
    3468:	91 e0       	ldi	r25, 0x01	; 1
    346a:	90 93 37 2b 	sts	0x2B37, r25	; 0x802b37 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    346e:	10 92 39 2b 	sts	0x2B39, r1	; 0x802b39 <recv1_buf+0x102>
	recv1_buf.done = NO;
    3472:	10 92 3a 2b 	sts	0x2B3A, r1	; 0x802b3a <recv1_buf+0x103>

	tbuf[0] = mtraddr;
    3476:	81 83       	std	Z+1, r24	; 0x01
	tbuf[1] = cmd;
    3478:	f8 01       	movw	r30, r16
    347a:	61 83       	std	Z+1, r22	; 0x01
	for (i = 0; i < nbytes; i++) {
    347c:	a0 e0       	ldi	r26, 0x00	; 0
    347e:	0e c0       	rjmp	.+28     	; 0x349c <put_MOTOR+0x80>
		tbuf[i+2] = data[i];
    3480:	8a 2f       	mov	r24, r26
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	bc 01       	movw	r22, r24
    3486:	6e 5f       	subi	r22, 0xFE	; 254
    3488:	7f 4f       	sbci	r23, 0xFF	; 255
    348a:	fa 01       	movw	r30, r20
    348c:	e8 0f       	add	r30, r24
    348e:	f9 1f       	adc	r31, r25
    3490:	80 81       	ld	r24, Z
    3492:	f9 01       	movw	r30, r18
    3494:	e6 0f       	add	r30, r22
    3496:	f7 1f       	adc	r31, r23
    3498:	80 83       	st	Z, r24
	recv1_buf.nxfrd = 0;
	recv1_buf.done = NO;

	tbuf[0] = mtraddr;
	tbuf[1] = cmd;
	for (i = 0; i < nbytes; i++) {
    349a:	af 5f       	subi	r26, 0xFF	; 255
    349c:	ab 15       	cp	r26, r11
    349e:	80 f3       	brcs	.-32     	; 0x3480 <put_MOTOR+0x64>
		tbuf[i+2] = data[i];
	}
	crc = crc16(tbuf, nbytes+2);
    34a0:	f2 e0       	ldi	r31, 0x02	; 2
    34a2:	8f 0e       	add	r8, r31
    34a4:	91 1c       	adc	r9, r1
    34a6:	b4 01       	movw	r22, r8
    34a8:	c8 01       	movw	r24, r16
    34aa:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <crc16>
	tbuf[nbytes+2] = (crc >> 8) & 0xFF;
    34ae:	f8 01       	movw	r30, r16
    34b0:	e8 0d       	add	r30, r8
    34b2:	f9 1d       	adc	r31, r9
    34b4:	90 83       	st	Z, r25
	tbuf[nbytes+3] = crc & 0xFF;
    34b6:	f8 01       	movw	r30, r16
    34b8:	ee 0d       	add	r30, r14
    34ba:	ff 1d       	adc	r31, r15
    34bc:	80 83       	st	Z, r24

	send_USART(1, tbuf, nbytes+4);		// Send the command
    34be:	44 e0       	ldi	r20, 0x04	; 4
    34c0:	4b 0d       	add	r20, r11
    34c2:	b8 01       	movw	r22, r16
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <send_USART>

	USART1_ticks = 0;
    34ca:	10 92 07 28 	sts	0x2807, r1	; 0x802807 <USART1_ticks>
    34ce:	10 92 08 28 	sts	0x2808, r1	; 0x802808 <USART1_ticks+0x1>
//	start_TCB0(1);						// Start 1 ms USART1_ticks timer
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    34d2:	80 91 3a 2b 	lds	r24, 0x2B3A	; 0x802b3a <recv1_buf+0x103>
    34d6:	81 30       	cpi	r24, 0x01	; 1
    34d8:	71 f0       	breq	.+28     	; 0x34f6 <put_MOTOR+0xda>
//			stop_TCB0();
			break;
		}
		if (USART1_ticks > 50) {
    34da:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    34de:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    34e2:	c3 97       	sbiw	r24, 0x33	; 51
    34e4:	b0 f3       	brcs	.-20     	; 0x34d2 <put_MOTOR+0xb6>
//			stop_TCB0();
			printError(ERR_MTR, "put_MOTOR: serial timeout");
    34e6:	6c e2       	ldi	r22, 0x2C	; 44
    34e8:	72 ea       	ldi	r23, 0xA2	; 162
    34ea:	86 e3       	ldi	r24, 0x36	; 54
    34ec:	91 e0       	ldi	r25, 0x01	; 1
    34ee:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
			return(ERROR);
    34f2:	83 e6       	ldi	r24, 0x63	; 99
    34f4:	0d c0       	rjmp	.+26     	; 0x3510 <put_MOTOR+0xf4>
		}
	}
	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
    34f6:	80 91 37 2a 	lds	r24, 0x2A37	; 0x802a37 <recv1_buf>
    34fa:	8f 3f       	cpi	r24, 0xFF	; 255
    34fc:	41 f0       	breq	.+16     	; 0x350e <put_MOTOR+0xf2>
		printError(ERR_MTR, "put_MOTOR: bad ACK");
    34fe:	66 e4       	ldi	r22, 0x46	; 70
    3500:	72 ea       	ldi	r23, 0xA2	; 162
    3502:	86 e3       	ldi	r24, 0x36	; 54
    3504:	91 e0       	ldi	r25, 0x01	; 1
    3506:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
    350a:	83 e6       	ldi	r24, 0x63	; 99
    350c:	01 c0       	rjmp	.+2      	; 0x3510 <put_MOTOR+0xf4>
	}
	return(NOERROR);
    350e:	80 e0       	ldi	r24, 0x00	; 0
}
    3510:	cd be       	out	0x3d, r12	; 61
    3512:	de be       	out	0x3e, r13	; 62
    3514:	df 91       	pop	r29
    3516:	cf 91       	pop	r28
    3518:	1f 91       	pop	r17
    351a:	0f 91       	pop	r16
    351c:	ff 90       	pop	r15
    351e:	ef 90       	pop	r14
    3520:	df 90       	pop	r13
    3522:	cf 90       	pop	r12
    3524:	bf 90       	pop	r11
    3526:	9f 90       	pop	r9
    3528:	8f 90       	pop	r8
    352a:	08 95       	ret

0000352c <move_MOTOR>:
	return(ERROR);

}

uint8_t move_MOTOR(uint8_t mtraddr, int32_t newPosition)
{
    352c:	1f 93       	push	r17
    352e:	cf 93       	push	r28
    3530:	df 93       	push	r29
    3532:	cd b7       	in	r28, 0x3d	; 61
    3534:	de b7       	in	r29, 0x3e	; 62
    3536:	61 97       	sbiw	r28, 0x11	; 17
    3538:	cd bf       	out	0x3d, r28	; 61
    353a:	de bf       	out	0x3e, r29	; 62
	buffer = 0;						// Operation is buffered
	acceleration = ACCELERATION;	// See roboclaw.h
	deceleration = DECELERATION;
	speed = SPEED;

	data[0] = (acceleration >> 24) & 0XFF;
    353c:	19 82       	std	Y+1, r1	; 0x01
	data[1] = (acceleration >> 16) & 0xFF;
    353e:	1a 82       	std	Y+2, r1	; 0x02
	data[2] = (acceleration >> 8) & 0xFF;
    3540:	90 e2       	ldi	r25, 0x20	; 32
    3542:	9b 83       	std	Y+3, r25	; 0x03
	data[3] = (acceleration) & 0xFF;
    3544:	1c 82       	std	Y+4, r1	; 0x04
	data[4] = (speed >> 24) & 0xFF;
    3546:	1d 82       	std	Y+5, r1	; 0x05
	data[5] = (speed >> 16) & 0xFF;
    3548:	1e 82       	std	Y+6, r1	; 0x06
	data[6] = (speed >> 8) & 0xFF;
    354a:	20 e4       	ldi	r18, 0x40	; 64
    354c:	2f 83       	std	Y+7, r18	; 0x07
	data[7] = (speed) & 0xFF;
    354e:	18 86       	std	Y+8, r1	; 0x08
	data[8] = (deceleration >> 24) & 0xFF;
    3550:	19 86       	std	Y+9, r1	; 0x09
	data[9] = (deceleration >> 16) & 0xFF;
    3552:	1a 86       	std	Y+10, r1	; 0x0a
	data[10] = (deceleration >> 8) & 0xFF;
    3554:	9b 87       	std	Y+11, r25	; 0x0b
	data[11] = (deceleration) & 0xFF;
    3556:	1c 86       	std	Y+12, r1	; 0x0c
	data[12] = (newPosition >> 24) & 0xFF;
    3558:	7d 87       	std	Y+13, r23	; 0x0d
	data[13] = (newPosition >> 16) & 0xFF;
    355a:	6e 87       	std	Y+14, r22	; 0x0e
	data[14] = (newPosition >> 8) & 0xFF;
    355c:	5f 87       	std	Y+15, r21	; 0x0f
	data[15] = (newPosition) & 0xFF;
    355e:	48 8b       	std	Y+16, r20	; 0x10
	data[16] = buffer;
    3560:	19 8a       	std	Y+17, r1	; 0x11

	if (put_MOTOR(mtraddr, DRIVETO, data, nbytes) == ERROR) {
    3562:	21 e1       	ldi	r18, 0x11	; 17
    3564:	ae 01       	movw	r20, r28
    3566:	4f 5f       	subi	r20, 0xFF	; 255
    3568:	5f 4f       	sbci	r21, 0xFF	; 255
    356a:	61 e4       	ldi	r22, 0x41	; 65
    356c:	0e 94 0e 1a 	call	0x341c	; 0x341c <put_MOTOR>
    3570:	18 2f       	mov	r17, r24
    3572:	83 36       	cpi	r24, 0x63	; 99
    3574:	39 f4       	brne	.+14     	; 0x3584 <move_MOTOR+0x58>
		printError(ERR_MTR, "move_MOTOR: put_MOTOR call error");
    3576:	69 e5       	ldi	r22, 0x59	; 89
    3578:	72 ea       	ldi	r23, 0xA2	; 162
    357a:	86 e3       	ldi	r24, 0x36	; 54
    357c:	91 e0       	ldi	r25, 0x01	; 1
    357e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
    3582:	01 c0       	rjmp	.+2      	; 0x3586 <move_MOTOR+0x5a>
	}

	return(NOERROR);
    3584:	10 e0       	ldi	r17, 0x00	; 0

}
    3586:	81 2f       	mov	r24, r17
    3588:	61 96       	adiw	r28, 0x11	; 17
    358a:	cd bf       	out	0x3d, r28	; 61
    358c:	de bf       	out	0x3e, r29	; 62
    358e:	df 91       	pop	r29
    3590:	cf 91       	pop	r28
    3592:	1f 91       	pop	r17
    3594:	08 95       	ret

00003596 <move_MOTOR_CMD>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR_CMD(uint8_t cstack)
{
    3596:	cf 92       	push	r12
    3598:	df 92       	push	r13
    359a:	ef 92       	push	r14
    359c:	ff 92       	push	r15
    359e:	1f 93       	push	r17
    35a0:	cf 93       	push	r28
    35a2:	df 93       	push	r29
    35a4:	00 d0       	rcall	.+0      	; 0x35a6 <move_MOTOR_CMD+0x10>
    35a6:	00 d0       	rcall	.+0      	; 0x35a8 <move_MOTOR_CMD+0x12>
    35a8:	cd b7       	in	r28, 0x3d	; 61
    35aa:	de b7       	in	r29, 0x3e	; 62

	uint8_t motor, controller, retval;
	int32_t newPosition, currentPosition;

	motor = pcmd[cstack].cobject;
    35ac:	e8 2e       	mov	r14, r24
    35ae:	f1 2c       	mov	r15, r1
    35b0:	84 e3       	ldi	r24, 0x34	; 52
    35b2:	8e 9d       	mul	r24, r14
    35b4:	f0 01       	movw	r30, r0
    35b6:	8f 9d       	mul	r24, r15
    35b8:	f0 0d       	add	r31, r0
    35ba:	11 24       	eor	r1, r1
    35bc:	e3 5f       	subi	r30, 0xF3	; 243
    35be:	f7 4d       	sbci	r31, 0xD7	; 215
    35c0:	81 81       	ldd	r24, Z+1	; 0x01
	switch(motor) {
    35c2:	81 34       	cpi	r24, 0x41	; 65
    35c4:	00 f1       	brcs	.+64     	; 0x3606 <move_MOTOR_CMD+0x70>
    35c6:	84 34       	cpi	r24, 0x44	; 68
    35c8:	28 f0       	brcs	.+10     	; 0x35d4 <move_MOTOR_CMD+0x3e>
    35ca:	9f e9       	ldi	r25, 0x9F	; 159
    35cc:	98 0f       	add	r25, r24
    35ce:	93 30       	cpi	r25, 0x03	; 3
    35d0:	40 f0       	brcs	.+16     	; 0x35e2 <move_MOTOR_CMD+0x4c>
    35d2:	19 c0       	rjmp	.+50     	; 0x3606 <move_MOTOR_CMD+0x70>
		case 'A':
		case 'B':
		case 'C':
			controller = motor + 63;
    35d4:	1f e3       	ldi	r17, 0x3F	; 63
    35d6:	18 0f       	add	r17, r24
			currentPosition = 0;
    35d8:	19 82       	std	Y+1, r1	; 0x01
    35da:	1a 82       	std	Y+2, r1	; 0x02
    35dc:	1b 82       	std	Y+3, r1	; 0x03
    35de:	1c 82       	std	Y+4, r1	; 0x04
			break;
    35e0:	1a c0       	rjmp	.+52     	; 0x3616 <move_MOTOR_CMD+0x80>

		case 'a':
		case 'b':
		case 'c':
			controller = motor + 31;
    35e2:	1f e1       	ldi	r17, 0x1F	; 31
    35e4:	18 0f       	add	r17, r24
			retval = get_MOTOR_ENCODER(controller, &currentPosition);
    35e6:	be 01       	movw	r22, r28
    35e8:	6f 5f       	subi	r22, 0xFF	; 255
    35ea:	7f 4f       	sbci	r23, 0xFF	; 255
    35ec:	81 2f       	mov	r24, r17
    35ee:	0e 94 04 17 	call	0x2e08	; 0x2e08 <get_MOTOR_ENCODER>
			if (retval == ERROR) {
    35f2:	83 36       	cpi	r24, 0x63	; 99
    35f4:	81 f4       	brne	.+32     	; 0x3616 <move_MOTOR_CMD+0x80>
				printError(ERR_MTR_ENC_VAL, "move_MOTOR_CMD: get_MOTOR_ENCODER error");
    35f6:	6a e7       	ldi	r22, 0x7A	; 122
    35f8:	72 ea       	ldi	r23, 0xA2	; 162
    35fa:	85 e3       	ldi	r24, 0x35	; 53
    35fc:	91 e0       	ldi	r25, 0x01	; 1
    35fe:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
				return(ERROR);
    3602:	13 e6       	ldi	r17, 0x63	; 99
    3604:	3d c0       	rjmp	.+122    	; 0x3680 <move_MOTOR_CMD+0xea>
			}
			break;

		default:
			printError(ERR_MTR, "move_MOTOR_CMD: unknown motor");
    3606:	62 ea       	ldi	r22, 0xA2	; 162
    3608:	72 ea       	ldi	r23, 0xA2	; 162
    360a:	86 e3       	ldi	r24, 0x36	; 54
    360c:	91 e0       	ldi	r25, 0x01	; 1
    360e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
			return(ERROR);
    3612:	13 e6       	ldi	r17, 0x63	; 99
    3614:	35 c0       	rjmp	.+106    	; 0x3680 <move_MOTOR_CMD+0xea>
			break;	
	}

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    3616:	84 e3       	ldi	r24, 0x34	; 52
    3618:	8e 9d       	mul	r24, r14
    361a:	f0 01       	movw	r30, r0
    361c:	8f 9d       	mul	r24, r15
    361e:	f0 0d       	add	r31, r0
    3620:	11 24       	eor	r1, r1
    3622:	e3 5f       	subi	r30, 0xF3	; 243
    3624:	f7 4d       	sbci	r31, 0xD7	; 215
    3626:	82 81       	ldd	r24, Z+2	; 0x02
    3628:	88 23       	and	r24, r24
    362a:	39 f1       	breq	.+78     	; 0x367a <move_MOTOR_CMD+0xe4>
		return(NOERROR);
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    362c:	24 e3       	ldi	r18, 0x34	; 52
    362e:	2e 9d       	mul	r18, r14
    3630:	c0 01       	movw	r24, r0
    3632:	2f 9d       	mul	r18, r15
    3634:	90 0d       	add	r25, r0
    3636:	11 24       	eor	r1, r1
    3638:	81 5f       	subi	r24, 0xF1	; 241
    363a:	97 4d       	sbci	r25, 0xD7	; 215
    363c:	0e 94 da 26 	call	0x4db4	; 0x4db4 <atol>
    3640:	9b 01       	movw	r18, r22
    3642:	ac 01       	movw	r20, r24
    3644:	ac e0       	ldi	r26, 0x0C	; 12
    3646:	b1 e0       	ldi	r27, 0x01	; 1
    3648:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__muluhisi3>
    364c:	c9 80       	ldd	r12, Y+1	; 0x01
    364e:	da 80       	ldd	r13, Y+2	; 0x02
    3650:	eb 80       	ldd	r14, Y+3	; 0x03
    3652:	fc 80       	ldd	r15, Y+4	; 0x04
    3654:	ab 01       	movw	r20, r22
    3656:	bc 01       	movw	r22, r24
    3658:	4c 0d       	add	r20, r12
    365a:	5d 1d       	adc	r21, r13
    365c:	6e 1d       	adc	r22, r14
    365e:	7f 1d       	adc	r23, r15

	if (move_MOTOR(controller, newPosition) == ERROR) {
    3660:	81 2f       	mov	r24, r17
    3662:	0e 94 96 1a 	call	0x352c	; 0x352c <move_MOTOR>
    3666:	18 2f       	mov	r17, r24
    3668:	83 36       	cpi	r24, 0x63	; 99
    366a:	49 f4       	brne	.+18     	; 0x367e <move_MOTOR_CMD+0xe8>
		printError(ERR_MTR, "move_MOTOR_CMD: move_MOTOR call error");
    366c:	60 ec       	ldi	r22, 0xC0	; 192
    366e:	72 ea       	ldi	r23, 0xA2	; 162
    3670:	86 e3       	ldi	r24, 0x36	; 54
    3672:	91 e0       	ldi	r25, 0x01	; 1
    3674:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
    3678:	03 c0       	rjmp	.+6      	; 0x3680 <move_MOTOR_CMD+0xea>
			return(ERROR);
			break;	
	}

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
		return(NOERROR);
    367a:	10 e0       	ldi	r17, 0x00	; 0
    367c:	01 c0       	rjmp	.+2      	; 0x3680 <move_MOTOR_CMD+0xea>
	if (move_MOTOR(controller, newPosition) == ERROR) {
		printError(ERR_MTR, "move_MOTOR_CMD: move_MOTOR call error");
		return(ERROR);
	}

	return(ERROR);
    367e:	13 e6       	ldi	r17, 0x63	; 99

}
    3680:	81 2f       	mov	r24, r17
    3682:	24 96       	adiw	r28, 0x04	; 4
    3684:	cd bf       	out	0x3d, r28	; 61
    3686:	de bf       	out	0x3e, r29	; 62
    3688:	df 91       	pop	r29
    368a:	cf 91       	pop	r28
    368c:	1f 91       	pop	r17
    368e:	ff 90       	pop	r15
    3690:	ef 90       	pop	r14
    3692:	df 90       	pop	r13
    3694:	cf 90       	pop	r12
    3696:	08 95       	ret

00003698 <put_MOTOR_ENCODER>:
	}
	return(NOERROR);
}

uint8_t put_MOTOR_ENCODER(uint8_t mtraddr, int32_t encoderValue)
{
    3698:	1f 93       	push	r17
    369a:	cf 93       	push	r28
    369c:	df 93       	push	r29
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <put_MOTOR_ENCODER+0x8>
    36a0:	00 d0       	rcall	.+0      	; 0x36a2 <put_MOTOR_ENCODER+0xa>
    36a2:	cd b7       	in	r28, 0x3d	; 61
    36a4:	de b7       	in	r29, 0x3e	; 62

	uint8_t data[4];
	
	data[0] = (encoderValue >> 24) & 0xFF;
    36a6:	79 83       	std	Y+1, r23	; 0x01
	data[1] = (encoderValue >> 16) & 0xFF;
    36a8:	6a 83       	std	Y+2, r22	; 0x02
	data[2] = (encoderValue >> 8) & 0xFF;
    36aa:	5b 83       	std	Y+3, r21	; 0x03
	data[3] = encoderValue & 0xFF;
    36ac:	4c 83       	std	Y+4, r20	; 0x04
	if (put_MOTOR(mtraddr, PUTENCODER, data, 4) == ERROR) {
    36ae:	24 e0       	ldi	r18, 0x04	; 4
    36b0:	ae 01       	movw	r20, r28
    36b2:	4f 5f       	subi	r20, 0xFF	; 255
    36b4:	5f 4f       	sbci	r21, 0xFF	; 255
    36b6:	66 e1       	ldi	r22, 0x16	; 22
    36b8:	0e 94 0e 1a 	call	0x341c	; 0x341c <put_MOTOR>
    36bc:	18 2f       	mov	r17, r24
    36be:	83 36       	cpi	r24, 0x63	; 99
    36c0:	39 f4       	brne	.+14     	; 0x36d0 <put_MOTOR_ENCODER+0x38>
		printError(ERR_MTR, "put_MOTOR_ENCODER: put_MOTOR error");
    36c2:	66 ee       	ldi	r22, 0xE6	; 230
    36c4:	72 ea       	ldi	r23, 0xA2	; 162
    36c6:	86 e3       	ldi	r24, 0x36	; 54
    36c8:	91 e0       	ldi	r25, 0x01	; 1
    36ca:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
    36ce:	01 c0       	rjmp	.+2      	; 0x36d2 <put_MOTOR_ENCODER+0x3a>
	}
	return(NOERROR);
    36d0:	10 e0       	ldi	r17, 0x00	; 0

}
    36d2:	81 2f       	mov	r24, r17
    36d4:	24 96       	adiw	r28, 0x04	; 4
    36d6:	cd bf       	out	0x3d, r28	; 61
    36d8:	de bf       	out	0x3e, r29	; 62
    36da:	df 91       	pop	r29
    36dc:	cf 91       	pop	r28
    36de:	1f 91       	pop	r17
    36e0:	08 95       	ret

000036e2 <init_MOTORS>:
		NOERROR otherwise

ADD ERROR CHECKS?
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    36e2:	1f 93       	push	r17
    36e4:	cf 93       	push	r28
    36e6:	df 93       	push	r29
    36e8:	00 d0       	rcall	.+0      	; 0x36ea <init_MOTORS+0x8>
    36ea:	00 d0       	rcall	.+0      	; 0x36ec <init_MOTORS+0xa>
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
    36f0:	2a e6       	ldi	r18, 0x6A	; 106
    36f2:	84 e0       	ldi	r24, 0x04	; 4
    36f4:	91 e0       	ldi	r25, 0x01	; 1
    36f6:	21 50       	subi	r18, 0x01	; 1
    36f8:	80 40       	sbci	r24, 0x00	; 0
    36fa:	90 40       	sbci	r25, 0x00	; 0
    36fc:	e1 f7       	brne	.-8      	; 0x36f6 <init_MOTORS+0x14>
    36fe:	00 c0       	rjmp	.+0      	; 0x3700 <init_MOTORS+0x1e>

	uint8_t controller;
	int32_t encoderValue;

	_delay_ms(100);	// 50 seems to work
	timerSAVEENCODER = 0;
    3700:	10 92 36 2a 	sts	0x2A36, r1	; 0x802a36 <timerSAVEENCODER>
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;
    3704:	8b e0       	ldi	r24, 0x0B	; 11
    3706:	80 93 35 2a 	sts	0x2A35, r24	; 0x802a35 <timeoutSAVEENCODER>
	for (controller = MOTOR_A; controller <= MOTOR_C; controller++) {
    370a:	10 e8       	ldi	r17, 0x80	; 128
    370c:	0e c0       	rjmp	.+28     	; 0x372a <init_MOTORS+0x48>
		get_FRAM_MOTOR_ENCODER(controller, &encoderValue);
    370e:	be 01       	movw	r22, r28
    3710:	6f 5f       	subi	r22, 0xFF	; 255
    3712:	7f 4f       	sbci	r23, 0xFF	; 255
    3714:	81 2f       	mov	r24, r17
    3716:	0e 94 f7 15 	call	0x2bee	; 0x2bee <get_FRAM_MOTOR_ENCODER>
		put_MOTOR_ENCODER(controller, encoderValue);
    371a:	49 81       	ldd	r20, Y+1	; 0x01
    371c:	5a 81       	ldd	r21, Y+2	; 0x02
    371e:	6b 81       	ldd	r22, Y+3	; 0x03
    3720:	7c 81       	ldd	r23, Y+4	; 0x04
    3722:	81 2f       	mov	r24, r17
    3724:	0e 94 4c 1b 	call	0x3698	; 0x3698 <put_MOTOR_ENCODER>
	int32_t encoderValue;

	_delay_ms(100);	// 50 seems to work
	timerSAVEENCODER = 0;
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;
	for (controller = MOTOR_A; controller <= MOTOR_C; controller++) {
    3728:	1f 5f       	subi	r17, 0xFF	; 255
    372a:	13 38       	cpi	r17, 0x83	; 131
    372c:	80 f3       	brcs	.-32     	; 0x370e <init_MOTORS+0x2c>
		get_FRAM_MOTOR_ENCODER(controller, &encoderValue);
		put_MOTOR_ENCODER(controller, encoderValue);
	}
	return(NOERROR);
}
    372e:	80 e0       	ldi	r24, 0x00	; 0
    3730:	24 96       	adiw	r28, 0x04	; 4
    3732:	cd bf       	out	0x3d, r28	; 61
    3734:	de bf       	out	0x3e, r29	; 62
    3736:	df 91       	pop	r29
    3738:	cf 91       	pop	r28
    373a:	1f 91       	pop	r17
    373c:	08 95       	ret

0000373e <set>:
	Returns:
		ERROR if an invalid object was requested.
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    373e:	1f 93       	push	r17
    3740:	cf 93       	push	r28
    3742:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	24 e3       	ldi	r18, 0x34	; 52
    3748:	28 9f       	mul	r18, r24
    374a:	f0 01       	movw	r30, r0
    374c:	29 9f       	mul	r18, r25
    374e:	f0 0d       	add	r31, r0
    3750:	11 24       	eor	r1, r1
    3752:	e3 5f       	subi	r30, 0xF3	; 243
    3754:	f7 4d       	sbci	r31, 0xD7	; 215
    3756:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    3758:	24 37       	cpi	r18, 0x74	; 116
    375a:	79 f5       	brne	.+94     	; 0x37ba <set+0x7c>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    375c:	24 e3       	ldi	r18, 0x34	; 52
    375e:	28 9f       	mul	r18, r24
    3760:	e0 01       	movw	r28, r0
    3762:	29 9f       	mul	r18, r25
    3764:	d0 0d       	add	r29, r0
    3766:	11 24       	eor	r1, r1
    3768:	c1 5f       	subi	r28, 0xF1	; 241
    376a:	d7 4d       	sbci	r29, 0xD7	; 215
    376c:	fe 01       	movw	r30, r28
    376e:	01 90       	ld	r0, Z+
    3770:	00 20       	and	r0, r0
    3772:	e9 f7       	brne	.-6      	; 0x376e <set+0x30>
    3774:	31 97       	sbiw	r30, 0x01	; 1
    3776:	ec 1b       	sub	r30, r28
    3778:	fd 0b       	sbc	r31, r29
    377a:	73 97       	sbiw	r30, 0x13	; 19
    377c:	41 f0       	breq	.+16     	; 0x378e <set+0x50>
				printError(ERR_SETTIME, "set: bad time format");
    377e:	68 e2       	ldi	r22, 0x28	; 40
    3780:	73 ea       	ldi	r23, 0xA3	; 163
    3782:	8a e5       	ldi	r24, 0x5A	; 90
    3784:	92 e0       	ldi	r25, 0x02	; 2
    3786:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
				return(ERROR);
    378a:	13 e6       	ldi	r17, 0x63	; 99
    378c:	1d c0       	rjmp	.+58     	; 0x37c8 <set+0x8a>
			}
			if (put_time(pcmd[cstack].cvalue) == ERROR) {
    378e:	ce 01       	movw	r24, r28
    3790:	0e 94 36 07 	call	0xe6c	; 0xe6c <put_time>
    3794:	18 2f       	mov	r17, r24
    3796:	83 36       	cpi	r24, 0x63	; 99
    3798:	39 f4       	brne	.+14     	; 0x37a8 <set+0x6a>
				printError(ERR_ISO, "set time: put_time error");
    379a:	6d e3       	ldi	r22, 0x3D	; 61
    379c:	73 ea       	ldi	r23, 0xA3	; 163
    379e:	8b e5       	ldi	r24, 0x5B	; 91
    37a0:	92 e0       	ldi	r25, 0x02	; 2
    37a2:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
				return(ERROR);
    37a6:	10 c0       	rjmp	.+32     	; 0x37c8 <set+0x8a>
			}
			write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    37a8:	24 e1       	ldi	r18, 0x14	; 20
    37aa:	ae 01       	movw	r20, r28
    37ac:	60 e0       	ldi	r22, 0x00	; 0
    37ae:	70 e0       	ldi	r23, 0x00	; 0
    37b0:	80 e5       	ldi	r24, 0x50	; 80
    37b2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <write_FRAM>

		default:
			printError(ERR_SET, "set what?");
			return(ERROR);
	}
	return(NOERROR);
    37b6:	10 e0       	ldi	r17, 0x00	; 0
    37b8:	07 c0       	rjmp	.+14     	; 0x37c8 <set+0x8a>
			}
			write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			printError(ERR_SET, "set what?");
    37ba:	66 e5       	ldi	r22, 0x56	; 86
    37bc:	73 ea       	ldi	r23, 0xA3	; 163
    37be:	89 e5       	ldi	r24, 0x59	; 89
    37c0:	92 e0       	ldi	r25, 0x02	; 2
    37c2:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
			return(ERROR);
    37c6:	13 e6       	ldi	r17, 0x63	; 99
	}
	return(NOERROR);
}
    37c8:	81 2f       	mov	r24, r17
    37ca:	df 91       	pop	r29
    37cc:	cf 91       	pop	r28
    37ce:	1f 91       	pop	r17
    37d0:	08 95       	ret

000037d2 <get_temperature>:
	point for the actual devices.

	The signal is 1.5E-3 mV/K with a 1500 kOhm dropping resistor.
------------------------------------------------------------------------------*/
float get_temperature(uint8_t sensor)
{
    37d2:	cf 93       	push	r28
    37d4:	df 93       	push	r29
    37d6:	00 d0       	rcall	.+0      	; 0x37d8 <get_temperature+0x6>
    37d8:	00 d0       	rcall	.+0      	; 0x37da <get_temperature+0x8>
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62

	float temperature;

	switch (sensor) {
    37de:	83 30       	cpi	r24, 0x03	; 3
    37e0:	18 f0       	brcs	.+6      	; 0x37e8 <get_temperature+0x16>
    37e2:	83 30       	cpi	r24, 0x03	; 3
    37e4:	39 f0       	breq	.+14     	; 0x37f4 <get_temperature+0x22>
    37e6:	0b c0       	rjmp	.+22     	; 0x37fe <get_temperature+0x2c>
		case 0:
		case 1:
		case 2:
			read_AD590(sensor, &temperature);
    37e8:	be 01       	movw	r22, r28
    37ea:	6f 5f       	subi	r22, 0xFF	; 255
    37ec:	7f 4f       	sbci	r23, 0xFF	; 255
    37ee:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <read_AD590>
			break;
    37f2:	0d c0       	rjmp	.+26     	; 0x380e <get_temperature+0x3c>
		case 3:
			read_MCP9808(&temperature);
    37f4:	ce 01       	movw	r24, r28
    37f6:	01 96       	adiw	r24, 0x01	; 1
    37f8:	0e 94 66 0a 	call	0x14cc	; 0x14cc <read_MCP9808>
			break;
    37fc:	08 c0       	rjmp	.+16     	; 0x380e <get_temperature+0x3c>
		default:
			temperature = -666.0;
    37fe:	80 e0       	ldi	r24, 0x00	; 0
    3800:	90 e8       	ldi	r25, 0x80	; 128
    3802:	a6 e2       	ldi	r26, 0x26	; 38
    3804:	b4 ec       	ldi	r27, 0xC4	; 196
    3806:	89 83       	std	Y+1, r24	; 0x01
    3808:	9a 83       	std	Y+2, r25	; 0x02
    380a:	ab 83       	std	Y+3, r26	; 0x03
    380c:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}

	return(temperature);
    380e:	69 81       	ldd	r22, Y+1	; 0x01
    3810:	7a 81       	ldd	r23, Y+2	; 0x02
    3812:	8b 81       	ldd	r24, Y+3	; 0x03
    3814:	9c 81       	ldd	r25, Y+4	; 0x04

}
    3816:	24 96       	adiw	r28, 0x04	; 4
    3818:	cd bf       	out	0x3d, r28	; 61
    381a:	de bf       	out	0x3e, r29	; 62
    381c:	df 91       	pop	r29
    381e:	cf 91       	pop	r28
    3820:	08 95       	ret

00003822 <testroutine>:

#include "commands.h"
#include "errors.h"

void testroutine(void)
{
    3822:	6f 92       	push	r6
    3824:	7f 92       	push	r7
    3826:	8f 92       	push	r8
    3828:	9f 92       	push	r9
    382a:	af 92       	push	r10
    382c:	bf 92       	push	r11
    382e:	cf 92       	push	r12
    3830:	df 92       	push	r13
    3832:	ef 92       	push	r14
    3834:	ff 92       	push	r15
    3836:	0f 93       	push	r16
    3838:	1f 93       	push	r17
    383a:	cf 93       	push	r28
    383c:	df 93       	push	r29
    383e:	cd b7       	in	r28, 0x3d	; 61
    3840:	de b7       	in	r29, 0x3e	; 62
    3842:	c8 57       	subi	r28, 0x78	; 120
    3844:	d1 09       	sbc	r29, r1
    3846:	cd bf       	out	0x3d, r28	; 61
    3848:	de bf       	out	0x3e, r29	; 62
*/

	char strbuf[80], istr[10], jstr[10], kstr[10], fstr[10];
	int i, j, k, nitems;
	float f;
	strcpy(strbuf," 400.5 200 300 400");
    384a:	83 e1       	ldi	r24, 0x13	; 19
    384c:	e0 e6       	ldi	r30, 0x60	; 96
    384e:	f3 ea       	ldi	r31, 0xA3	; 163
    3850:	8e 01       	movw	r16, r28
    3852:	0f 5f       	subi	r16, 0xFF	; 255
    3854:	1f 4f       	sbci	r17, 0xFF	; 255
    3856:	d8 01       	movw	r26, r16
    3858:	01 90       	ld	r0, Z+
    385a:	0d 92       	st	X+, r0
    385c:	8a 95       	dec	r24
    385e:	e1 f7       	brne	.-8      	; 0x3858 <testroutine+0x36>
	nitems = sscanf(strbuf, "%s%s%s%s", fstr, istr, jstr, kstr);
    3860:	6e 01       	movw	r12, r28
    3862:	85 e6       	ldi	r24, 0x65	; 101
    3864:	c8 0e       	add	r12, r24
    3866:	d1 1c       	adc	r13, r1
    3868:	df 92       	push	r13
    386a:	cf 92       	push	r12
    386c:	5e 01       	movw	r10, r28
    386e:	9b e5       	ldi	r25, 0x5B	; 91
    3870:	a9 0e       	add	r10, r25
    3872:	b1 1c       	adc	r11, r1
    3874:	bf 92       	push	r11
    3876:	af 92       	push	r10
    3878:	4e 01       	movw	r8, r28
    387a:	81 e5       	ldi	r24, 0x51	; 81
    387c:	88 0e       	add	r8, r24
    387e:	91 1c       	adc	r9, r1
    3880:	9f 92       	push	r9
    3882:	8f 92       	push	r8
    3884:	7e 01       	movw	r14, r28
    3886:	9f e6       	ldi	r25, 0x6F	; 111
    3888:	e9 0e       	add	r14, r25
    388a:	f1 1c       	adc	r15, r1
    388c:	ff 92       	push	r15
    388e:	ef 92       	push	r14
    3890:	83 e7       	ldi	r24, 0x73	; 115
    3892:	93 ea       	ldi	r25, 0xA3	; 163
    3894:	9f 93       	push	r25
    3896:	8f 93       	push	r24
    3898:	1f 93       	push	r17
    389a:	0f 93       	push	r16
    389c:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <sscanf>
    38a0:	78 2e       	mov	r7, r24
    38a2:	69 2e       	mov	r6, r25
	i = atoi(istr);
    38a4:	c4 01       	movw	r24, r8
    38a6:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <atoi>
    38aa:	98 2e       	mov	r9, r24
    38ac:	89 2e       	mov	r8, r25
	j = atoi(jstr);
    38ae:	c5 01       	movw	r24, r10
    38b0:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <atoi>
    38b4:	b8 2e       	mov	r11, r24
    38b6:	a9 2e       	mov	r10, r25
	k = atoi(kstr);
    38b8:	c6 01       	movw	r24, r12
    38ba:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <atoi>
    38be:	d8 2e       	mov	r13, r24
    38c0:	c9 2e       	mov	r12, r25
	f = atof(fstr);
    38c2:	c7 01       	movw	r24, r14
    38c4:	0e 94 b8 26 	call	0x4d70	; 0x4d70 <atof>
	sprintf(strbuf, "nitems=%d i=%d j=%d k=%d f=%f", nitems, i, j, k, f);
    38c8:	9f 93       	push	r25
    38ca:	8f 93       	push	r24
    38cc:	7f 93       	push	r23
    38ce:	6f 93       	push	r22
    38d0:	cf 92       	push	r12
    38d2:	df 92       	push	r13
    38d4:	af 92       	push	r10
    38d6:	bf 92       	push	r11
    38d8:	8f 92       	push	r8
    38da:	9f 92       	push	r9
    38dc:	6f 92       	push	r6
    38de:	7f 92       	push	r7
    38e0:	8c e7       	ldi	r24, 0x7C	; 124
    38e2:	93 ea       	ldi	r25, 0xA3	; 163
    38e4:	9f 93       	push	r25
    38e6:	8f 93       	push	r24
    38e8:	1f 93       	push	r17
    38ea:	0f 93       	push	r16
    38ec:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <sprintf>
	printLine(strbuf);
    38f0:	c8 01       	movw	r24, r16
    38f2:	0e 94 a3 03 	call	0x746	; 0x746 <printLine>

	return;
    38f6:	cd bf       	out	0x3d, r28	; 61
    38f8:	de bf       	out	0x3e, r29	; 62
    38fa:	c8 58       	subi	r28, 0x88	; 136
    38fc:	df 4f       	sbci	r29, 0xFF	; 255
    38fe:	cd bf       	out	0x3d, r28	; 61
    3900:	de bf       	out	0x3e, r29	; 62
    3902:	df 91       	pop	r29
    3904:	cf 91       	pop	r28
    3906:	1f 91       	pop	r17
    3908:	0f 91       	pop	r16
    390a:	ff 90       	pop	r15
    390c:	ef 90       	pop	r14
    390e:	df 90       	pop	r13
    3910:	cf 90       	pop	r12
    3912:	bf 90       	pop	r11
    3914:	af 90       	pop	r10
    3916:	9f 90       	pop	r9
    3918:	8f 90       	pop	r8
    391a:	7f 90       	pop	r7
    391c:	6f 90       	pop	r6
    391e:	08 95       	ret

00003920 <init_RTC>:
	Turn off the TCB0 timer
------------------------------------------------------------------------------*/
void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    3920:	ac 01       	movw	r20, r24
    3922:	e0 e6       	ldi	r30, 0x60	; 96
    3924:	f0 e0       	ldi	r31, 0x00	; 0
    3926:	94 8d       	ldd	r25, Z+28	; 0x1c
    3928:	9e 7f       	andi	r25, 0xFE	; 254
    392a:	88 ed       	ldi	r24, 0xD8	; 216
    392c:	84 bf       	out	0x34, r24	; 52
    392e:	94 8f       	std	Z+28, r25	; 0x1c
    3930:	01 c0       	rjmp	.+2      	; 0x3934 <init_RTC+0x14>
    3932:	00 00       	nop
    3934:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    3938:	96 fd       	sbrc	r25, 6
    393a:	fb cf       	rjmp	.-10     	; 0x3932 <init_RTC+0x12>
    393c:	e0 e6       	ldi	r30, 0x60	; 96
    393e:	f0 e0       	ldi	r31, 0x00	; 0
    3940:	94 8d       	ldd	r25, Z+28	; 0x1c
    3942:	9b 7f       	andi	r25, 0xFB	; 251
    3944:	28 ed       	ldi	r18, 0xD8	; 216
    3946:	24 bf       	out	0x34, r18	; 52
    3948:	94 8f       	std	Z+28, r25	; 0x1c
    394a:	94 8d       	ldd	r25, Z+28	; 0x1c
    394c:	91 60       	ori	r25, 0x01	; 1
    394e:	24 bf       	out	0x34, r18	; 52
    3950:	94 8f       	std	Z+28, r25	; 0x1c
    3952:	01 c0       	rjmp	.+2      	; 0x3956 <init_RTC+0x36>
    3954:	00 00       	nop
    3956:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    395a:	91 11       	cpse	r25, r1
    395c:	fb cf       	rjmp	.-10     	; 0x3954 <init_RTC+0x34>
    395e:	e0 e4       	ldi	r30, 0x40	; 64
    3960:	f1 e0       	ldi	r31, 0x01	; 1
    3962:	42 87       	std	Z+10, r20	; 0x0a
    3964:	53 87       	std	Z+11, r21	; 0x0b
    3966:	82 e0       	ldi	r24, 0x02	; 2
    3968:	87 83       	std	Z+7, r24	; 0x07
    396a:	85 81       	ldd	r24, Z+5	; 0x05
    396c:	81 60       	ori	r24, 0x01	; 1
    396e:	85 83       	std	Z+5, r24	; 0x05
    3970:	81 eb       	ldi	r24, 0xB1	; 177
    3972:	80 83       	st	Z, r24
    3974:	82 81       	ldd	r24, Z+2	; 0x02
    3976:	81 60       	ori	r24, 0x01	; 1
    3978:	82 83       	std	Z+2, r24	; 0x02
    397a:	08 95       	ret

0000397c <__vector_3>:
    397c:	1f 92       	push	r1
    397e:	0f 92       	push	r0
    3980:	0f b6       	in	r0, 0x3f	; 63
    3982:	0f 92       	push	r0
    3984:	11 24       	eor	r1, r1
    3986:	8f 93       	push	r24
    3988:	9f 93       	push	r25
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>
    3990:	80 91 16 2a 	lds	r24, 0x2A16	; 0x802a16 <timerOLED>
    3994:	90 91 17 2a 	lds	r25, 0x2A17	; 0x802a17 <timerOLED+0x1>
    3998:	01 96       	adiw	r24, 0x01	; 1
    399a:	80 93 16 2a 	sts	0x2A16, r24	; 0x802a16 <timerOLED>
    399e:	90 93 17 2a 	sts	0x2A17, r25	; 0x802a17 <timerOLED+0x1>
    39a2:	80 e2       	ldi	r24, 0x20	; 32
    39a4:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>
    39a8:	80 91 36 2a 	lds	r24, 0x2A36	; 0x802a36 <timerSAVEENCODER>
    39ac:	8f 5f       	subi	r24, 0xFF	; 255
    39ae:	80 93 36 2a 	sts	0x2A36, r24	; 0x802a36 <timerSAVEENCODER>
    39b2:	9f 91       	pop	r25
    39b4:	8f 91       	pop	r24
    39b6:	0f 90       	pop	r0
    39b8:	0f be       	out	0x3f, r0	; 63
    39ba:	0f 90       	pop	r0
    39bc:	1f 90       	pop	r1
    39be:	18 95       	reti

000039c0 <start_TCB0>:
    39c0:	25 e0       	ldi	r18, 0x05	; 5
    39c2:	3d e0       	ldi	r19, 0x0D	; 13
    39c4:	ac 01       	movw	r20, r24
    39c6:	42 9f       	mul	r20, r18
    39c8:	c0 01       	movw	r24, r0
    39ca:	43 9f       	mul	r20, r19
    39cc:	90 0d       	add	r25, r0
    39ce:	52 9f       	mul	r21, r18
    39d0:	90 0d       	add	r25, r0
    39d2:	11 24       	eor	r1, r1
    39d4:	e0 e8       	ldi	r30, 0x80	; 128
    39d6:	fa e0       	ldi	r31, 0x0A	; 10
    39d8:	84 87       	std	Z+12, r24	; 0x0c
    39da:	95 87       	std	Z+13, r25	; 0x0d
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	85 83       	std	Z+5, r24	; 0x05
    39e0:	80 83       	st	Z, r24
    39e2:	08 95       	ret

000039e4 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    39e4:	1f 92       	push	r1
    39e6:	0f 92       	push	r0
    39e8:	0f b6       	in	r0, 0x3f	; 63
    39ea:	0f 92       	push	r0
    39ec:	11 24       	eor	r1, r1
    39ee:	8f 93       	push	r24
    39f0:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	USART0_ticks++;
    39f8:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    39fc:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    3a00:	01 96       	adiw	r24, 0x01	; 1
    3a02:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <USART0_ticks>
    3a06:	90 93 04 28 	sts	0x2804, r25	; 0x802804 <USART0_ticks+0x1>
	USART1_ticks++;
    3a0a:	80 91 07 28 	lds	r24, 0x2807	; 0x802807 <USART1_ticks>
    3a0e:	90 91 08 28 	lds	r25, 0x2808	; 0x802808 <USART1_ticks+0x1>
    3a12:	01 96       	adiw	r24, 0x01	; 1
    3a14:	80 93 07 28 	sts	0x2807, r24	; 0x802807 <USART1_ticks>
    3a18:	90 93 08 28 	sts	0x2808, r25	; 0x802808 <USART1_ticks+0x1>
	USART3_ticks++;
    3a1c:	80 91 01 28 	lds	r24, 0x2801	; 0x802801 <USART3_ticks>
    3a20:	90 91 02 28 	lds	r25, 0x2802	; 0x802802 <USART3_ticks+0x1>
    3a24:	01 96       	adiw	r24, 0x01	; 1
    3a26:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <USART3_ticks>
    3a2a:	90 93 02 28 	sts	0x2802, r25	; 0x802802 <USART3_ticks+0x1>
	TWI_ticks++;
    3a2e:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    3a32:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    3a36:	01 96       	adiw	r24, 0x01	; 1
    3a38:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <TWI_ticks>
    3a3c:	90 93 06 28 	sts	0x2806, r25	; 0x802806 <TWI_ticks+0x1>

    3a40:	9f 91       	pop	r25
    3a42:	8f 91       	pop	r24
    3a44:	0f 90       	pop	r0
    3a46:	0f be       	out	0x3f, r0	; 63
    3a48:	0f 90       	pop	r0
    3a4a:	1f 90       	pop	r1
    3a4c:	18 95       	reti

00003a4e <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    3a4e:	e0 ea       	ldi	r30, 0xA0	; 160
    3a50:	f8 e0       	ldi	r31, 0x08	; 8
    3a52:	8b e0       	ldi	r24, 0x0B	; 11
    3a54:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    3a56:	83 81       	ldd	r24, Z+3	; 0x03
    3a58:	81 60       	ori	r24, 0x01	; 1
    3a5a:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    3a5c:	85 81       	ldd	r24, Z+5	; 0x05
    3a5e:	81 60       	ori	r24, 0x01	; 1
    3a60:	85 83       	std	Z+5, r24	; 0x05
    3a62:	08 95       	ret

00003a64 <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    3a64:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    3a68:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    3a6c:	0f c0       	rjmp	.+30     	; 0x3a8c <read_TWI+0x28>
		asm("nop");
    3a6e:	00 00       	nop
		if (TWI_ticks > 50) {					// Typically 0 ticks needed
    3a70:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    3a74:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    3a78:	c3 97       	sbiw	r24, 0x33	; 51
    3a7a:	40 f0       	brcs	.+16     	; 0x3a8c <read_TWI+0x28>
			printError(ERR_TWI, "read_TWI timeout");
    3a7c:	6a e9       	ldi	r22, 0x9A	; 154
    3a7e:	73 ea       	ldi	r23, 0xA3	; 163
    3a80:	81 e9       	ldi	r24, 0x91	; 145
    3a82:	91 e0       	ldi	r25, 0x01	; 1
    3a84:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
//			stop_TCB0();
			return(0xFF);
    3a88:	8f ef       	ldi	r24, 0xFF	; 255
    3a8a:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    3a8c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3a90:	88 23       	and	r24, r24
    3a92:	6c f7       	brge	.-38     	; 0x3a6e <read_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK
    3a94:	e0 ea       	ldi	r30, 0xA0	; 160
    3a96:	f8 e0       	ldi	r31, 0x08	; 8
    3a98:	84 81       	ldd	r24, Z+4	; 0x04
    3a9a:	8b 7f       	andi	r24, 0xFB	; 251
    3a9c:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;							// Next read
    3a9e:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    3aa0:	94 81       	ldd	r25, Z+4	; 0x04
    3aa2:	92 60       	ori	r25, 0x02	; 2
    3aa4:	94 83       	std	Z+4, r25	; 0x04

	return(data);

}
    3aa6:	08 95       	ret

00003aa8 <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    3aa8:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    3aac:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    3ab0:	0f c0       	rjmp	.+30     	; 0x3ad0 <readlast_TWI+0x28>
		asm("nop");
    3ab2:	00 00       	nop
		if (TWI_ticks > 50) {						// Typically 0 ticks needed
    3ab4:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    3ab8:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    3abc:	c3 97       	sbiw	r24, 0x33	; 51
    3abe:	40 f0       	brcs	.+16     	; 0x3ad0 <readlast_TWI+0x28>
			printError(ERR_TWI, "readlast timeout");
    3ac0:	6b ea       	ldi	r22, 0xAB	; 171
    3ac2:	73 ea       	ldi	r23, 0xA3	; 163
    3ac4:	81 e9       	ldi	r24, 0x91	; 145
    3ac6:	91 e0       	ldi	r25, 0x01	; 1
    3ac8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
//			stop_TCB0();
			return(0xFF);
    3acc:	8f ef       	ldi	r24, 0xFF	; 255
    3ace:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    3ad0:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3ad4:	88 23       	and	r24, r24
    3ad6:	6c f7       	brge	.-38     	; 0x3ab2 <readlast_TWI+0xa>
			return(0xFF);
		}
	}
//	stop_TCB0();

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    3ad8:	e0 ea       	ldi	r30, 0xA0	; 160
    3ada:	f8 e0       	ldi	r31, 0x08	; 8
    3adc:	84 81       	ldd	r24, Z+4	; 0x04
    3ade:	84 60       	ori	r24, 0x04	; 4
    3ae0:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    3ae2:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    3ae4:	08 95       	ret

00003ae6 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    3ae6:	61 30       	cpi	r22, 0x01	; 1
    3ae8:	39 f4       	brne	.+14     	; 0x3af8 <start_TWI+0x12>
		TWI0.MADDR = ((addr << 1) | 0x01);
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	88 0f       	add	r24, r24
    3aee:	99 1f       	adc	r25, r25
    3af0:	81 60       	ori	r24, 0x01	; 1
    3af2:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    3af6:	03 c0       	rjmp	.+6      	; 0x3afe <start_TWI+0x18>
	} else {
		TWI0.MADDR = (addr << 1);
    3af8:	88 0f       	add	r24, r24
    3afa:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

	TWI_ticks = 0;
    3afe:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    3b02:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    3b06:	0f c0       	rjmp	.+30     	; 0x3b26 <start_TWI+0x40>
		asm("nop");								// Wait for addr transmission
    3b08:	00 00       	nop
		if (TWI_ticks > 50) {
    3b0a:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    3b0e:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    3b12:	c3 97       	sbiw	r24, 0x33	; 51
    3b14:	40 f0       	brcs	.+16     	; 0x3b26 <start_TWI+0x40>
			printError(ERR_TWI, "TWI start timeout");
    3b16:	6c eb       	ldi	r22, 0xBC	; 188
    3b18:	73 ea       	ldi	r23, 0xA3	; 163
    3b1a:	81 e9       	ldi	r24, 0x91	; 145
    3b1c:	91 e0       	ldi	r25, 0x01	; 1
    3b1e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
//			stop_TCB0();
			return(ERROR);
    3b22:	83 e6       	ldi	r24, 0x63	; 99
    3b24:	08 95       	ret
		TWI0.MADDR = (addr << 1);
	}

	TWI_ticks = 0;
//	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    3b26:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3b2a:	80 7c       	andi	r24, 0xC0	; 192
    3b2c:	69 f3       	breq	.-38     	; 0x3b08 <start_TWI+0x22>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    3b2e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3b32:	82 ff       	sbrs	r24, 2
    3b34:	08 c0       	rjmp	.+16     	; 0x3b46 <start_TWI+0x60>
		printError(ERR_TWI, "TWI bus");
    3b36:	6e ec       	ldi	r22, 0xCE	; 206
    3b38:	73 ea       	ldi	r23, 0xA3	; 163
    3b3a:	81 e9       	ldi	r24, 0x91	; 145
    3b3c:	91 e0       	ldi	r25, 0x01	; 1
    3b3e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
    3b42:	83 e6       	ldi	r24, 0x63	; 99
    3b44:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    3b46:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3b4a:	83 ff       	sbrs	r24, 3
    3b4c:	08 c0       	rjmp	.+16     	; 0x3b5e <start_TWI+0x78>
		printError(ERR_TWI, "TWI arbitration");
    3b4e:	66 ed       	ldi	r22, 0xD6	; 214
    3b50:	73 ea       	ldi	r23, 0xA3	; 163
    3b52:	81 e9       	ldi	r24, 0x91	; 145
    3b54:	91 e0       	ldi	r25, 0x01	; 1
    3b56:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
    3b5a:	83 e6       	ldi	r24, 0x63	; 99
    3b5c:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    3b5e:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3b62:	89 2f       	mov	r24, r25
    3b64:	80 71       	andi	r24, 0x10	; 16
    3b66:	94 ff       	sbrs	r25, 4
    3b68:	07 c0       	rjmp	.+14     	; 0x3b78 <start_TWI+0x92>
		printError(ERR_TWI, "TWI no device responded");
    3b6a:	66 ee       	ldi	r22, 0xE6	; 230
    3b6c:	73 ea       	ldi	r23, 0xA3	; 163
    3b6e:	81 e9       	ldi	r24, 0x91	; 145
    3b70:	91 e0       	ldi	r25, 0x01	; 1
    3b72:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
    3b76:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    3b78:	08 95       	ret

00003b7a <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    3b7a:	87 e0       	ldi	r24, 0x07	; 7
    3b7c:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    3b80:	08 95       	ret

00003b82 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
    3b82:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    3b86:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    3b8a:	10 c0       	rjmp	.+32     	; 0x3bac <write_TWI+0x2a>
		asm("nop");
    3b8c:	00 00       	nop
		if (TWI_ticks > 50) {
    3b8e:	20 91 05 28 	lds	r18, 0x2805	; 0x802805 <TWI_ticks>
    3b92:	30 91 06 28 	lds	r19, 0x2806	; 0x802806 <TWI_ticks+0x1>
    3b96:	23 33       	cpi	r18, 0x33	; 51
    3b98:	31 05       	cpc	r19, r1
    3b9a:	40 f0       	brcs	.+16     	; 0x3bac <write_TWI+0x2a>
			printError(ERR_TWI, "write_TWI error1");
    3b9c:	6e ef       	ldi	r22, 0xFE	; 254
    3b9e:	73 ea       	ldi	r23, 0xA3	; 163
    3ba0:	81 e9       	ldi	r24, 0x91	; 145
    3ba2:	91 e0       	ldi	r25, 0x01	; 1
    3ba4:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
//			stop_TCB0();
			return(ERROR);
    3ba8:	83 e6       	ldi	r24, 0x63	; 99
    3baa:	08 95       	ret
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
//	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    3bac:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3bb0:	96 ff       	sbrs	r25, 6
    3bb2:	ec cf       	rjmp	.-40     	; 0x3b8c <write_TWI+0xa>
			return(ERROR);
		}
	}
//	stop_TCB0();

	TWI0.MDATA = data;
    3bb4:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	TWI_ticks = 0;
    3bb8:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <TWI_ticks>
    3bbc:	10 92 06 28 	sts	0x2806, r1	; 0x802806 <TWI_ticks+0x1>
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    3bc0:	0f c0       	rjmp	.+30     	; 0x3be0 <write_TWI+0x5e>
		asm("nop");
    3bc2:	00 00       	nop
		if (TWI_ticks > 50) {
    3bc4:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <TWI_ticks>
    3bc8:	90 91 06 28 	lds	r25, 0x2806	; 0x802806 <TWI_ticks+0x1>
    3bcc:	c3 97       	sbiw	r24, 0x33	; 51
    3bce:	40 f0       	brcs	.+16     	; 0x3be0 <write_TWI+0x5e>
			printError(ERR_TWI, "write_TWI error2");
    3bd0:	6f e0       	ldi	r22, 0x0F	; 15
    3bd2:	74 ea       	ldi	r23, 0xA4	; 164
    3bd4:	81 e9       	ldi	r24, 0x91	; 145
    3bd6:	91 e0       	ldi	r25, 0x01	; 1
    3bd8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
//			stop_TCB0();
			return(ERROR);
    3bdc:	83 e6       	ldi	r24, 0x63	; 99
    3bde:	08 95       	ret

	TWI0.MDATA = data;

	TWI_ticks = 0;
//	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    3be0:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3be4:	86 ff       	sbrs	r24, 6
    3be6:	ed cf       	rjmp	.-38     	; 0x3bc2 <write_TWI+0x40>
			return(ERROR);
		}
	}
//	stop_TCB0();

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    3be8:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3bec:	89 2f       	mov	r24, r25
    3bee:	80 71       	andi	r24, 0x10	; 16
    3bf0:	94 ff       	sbrs	r25, 4
    3bf2:	07 c0       	rjmp	.+14     	; 0x3c02 <write_TWI+0x80>
		printError(ERR_TWI, "ACK not received");
    3bf4:	60 e2       	ldi	r22, 0x20	; 32
    3bf6:	74 ea       	ldi	r23, 0xA4	; 164
    3bf8:	81 e9       	ldi	r24, 0x91	; 145
    3bfa:	91 e0       	ldi	r25, 0x01	; 1
    3bfc:	0e 94 b7 07 	call	0xf6e	; 0xf6e <printError>
		return(ERROR);
    3c00:	83 e6       	ldi	r24, 0x63	; 99
	} else {
		return(NOERROR);
	}

}
    3c02:	08 95       	ret

00003c04 <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    3c04:	e0 e0       	ldi	r30, 0x00	; 0
    3c06:	f4 e0       	ldi	r31, 0x04	; 4
    3c08:	81 e0       	ldi	r24, 0x01	; 1
    3c0a:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    3c0c:	81 83       	std	Z+1, r24	; 0x01
//	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    3c0e:	e0 e0       	ldi	r30, 0x00	; 0
    3c10:	f8 e0       	ldi	r31, 0x08	; 8
    3c12:	24 e7       	ldi	r18, 0x74	; 116
    3c14:	30 e0       	ldi	r19, 0x00	; 0
    3c16:	20 87       	std	Z+8, r18	; 0x08
    3c18:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    3c1a:	95 81       	ldd	r25, Z+5	; 0x05
    3c1c:	90 68       	ori	r25, 0x80	; 128
    3c1e:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    3c20:	96 81       	ldd	r25, Z+6	; 0x06
    3c22:	90 64       	ori	r25, 0x40	; 64
    3c24:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    3c26:	96 81       	ldd	r25, Z+6	; 0x06
    3c28:	90 68       	ori	r25, 0x80	; 128
    3c2a:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;					// Set up send/receive buffers
    3c2c:	10 92 3d 2d 	sts	0x2D3D, r1	; 0x802d3d <send0_buf+0xfe>
	send0_buf.tail = 0;
    3c30:	10 92 3e 2d 	sts	0x2D3E, r1	; 0x802d3e <send0_buf+0xff>
	send0_buf.done = YES;
    3c34:	80 93 42 2d 	sts	0x2D42, r24	; 0x802d42 <send0_buf+0x103>
	recv0_buf.head = 0;
    3c38:	10 92 39 2c 	sts	0x2C39, r1	; 0x802c39 <recv0_buf+0xfe>
	recv0_buf.tail = 0;
    3c3c:	10 92 3a 2c 	sts	0x2C3A, r1	; 0x802c3a <recv0_buf+0xff>
	recv0_buf.data[0] = '\0';
    3c40:	10 92 3b 2b 	sts	0x2B3B, r1	; 0x802b3b <recv0_buf>
	recv0_buf.length = 0;
    3c44:	10 92 3c 2c 	sts	0x2C3C, r1	; 0x802c3c <recv0_buf+0x101>
	recv0_buf.done = NO;
    3c48:	10 92 3e 2c 	sts	0x2C3E, r1	; 0x802c3e <recv0_buf+0x103>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    3c4c:	e0 e4       	ldi	r30, 0x40	; 64
    3c4e:	f4 e0       	ldi	r31, 0x04	; 4
    3c50:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    3c52:	81 83       	std	Z+1, r24	; 0x01
//	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    3c54:	e0 e2       	ldi	r30, 0x20	; 32
    3c56:	f8 e0       	ldi	r31, 0x08	; 8
    3c58:	2d e6       	ldi	r18, 0x6D	; 109
    3c5a:	35 e0       	ldi	r19, 0x05	; 5
    3c5c:	20 87       	std	Z+8, r18	; 0x08
    3c5e:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    3c60:	95 81       	ldd	r25, Z+5	; 0x05
    3c62:	90 68       	ori	r25, 0x80	; 128
    3c64:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    3c66:	96 81       	ldd	r25, Z+6	; 0x06
    3c68:	90 64       	ori	r25, 0x40	; 64
    3c6a:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    3c6c:	96 81       	ldd	r25, Z+6	; 0x06
    3c6e:	90 68       	ori	r25, 0x80	; 128
    3c70:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    3c72:	10 92 49 30 	sts	0x3049, r1	; 0x803049 <send1_buf+0xfe>
	send1_buf.tail = 0;
    3c76:	10 92 4a 30 	sts	0x304A, r1	; 0x80304a <send1_buf+0xff>
	send1_buf.done = YES;
    3c7a:	80 93 4e 30 	sts	0x304E, r24	; 0x80304e <send1_buf+0x103>
	recv1_buf.head = 0;
    3c7e:	10 92 35 2b 	sts	0x2B35, r1	; 0x802b35 <recv1_buf+0xfe>
	recv1_buf.tail = 0;
    3c82:	10 92 36 2b 	sts	0x2B36, r1	; 0x802b36 <recv1_buf+0xff>
	recv1_buf.data[0] = '\0';
    3c86:	10 92 37 2a 	sts	0x2A37, r1	; 0x802a37 <recv1_buf>
	recv1_buf.done = NO;
    3c8a:	10 92 3a 2b 	sts	0x2B3A, r1	; 0x802b3a <recv1_buf+0x103>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    3c8e:	e0 e2       	ldi	r30, 0x20	; 32
    3c90:	f4 e0       	ldi	r31, 0x04	; 4
    3c92:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    3c94:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    3c96:	e0 e6       	ldi	r30, 0x60	; 96
    3c98:	f8 e0       	ldi	r31, 0x08	; 8
    3c9a:	20 87       	std	Z+8, r18	; 0x08
    3c9c:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    3c9e:	96 81       	ldd	r25, Z+6	; 0x06
    3ca0:	90 64       	ori	r25, 0x40	; 64
    3ca2:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    3ca4:	96 81       	ldd	r25, Z+6	; 0x06
    3ca6:	90 68       	ori	r25, 0x80	; 128
    3ca8:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    3caa:	80 93 4a 2f 	sts	0x2F4A, r24	; 0x802f4a <send3_buf+0x103>
	recv3_buf.done = NO;
    3cae:	10 92 46 2e 	sts	0x2E46, r1	; 0x802e46 <recv3_buf+0x103>
    3cb2:	08 95       	ret

00003cb4 <send_USART>:
		"transmit data register empty" interrupt (DREIE). The USARTn_DRE_vect
		puts the bytes into the transmit register until the tail catches up
		to the head of the circular buffer.
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    3cb4:	0f 93       	push	r16
    3cb6:	1f 93       	push	r17
    3cb8:	cf 93       	push	r28
    3cba:	df 93       	push	r29
    3cbc:	eb 01       	movw	r28, r22
    3cbe:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    3cc0:	81 30       	cpi	r24, 0x01	; 1
    3cc2:	b1 f1       	breq	.+108    	; 0x3d30 <send_USART+0x7c>
    3cc4:	20 f0       	brcs	.+8      	; 0x3cce <send_USART+0x1a>
    3cc6:	83 30       	cpi	r24, 0x03	; 3
    3cc8:	09 f4       	brne	.+2      	; 0x3ccc <send_USART+0x18>
    3cca:	81 c0       	rjmp	.+258    	; 0x3dce <send_USART+0x11a>
    3ccc:	88 c0       	rjmp	.+272    	; 0x3dde <send_USART+0x12a>
		case 0:
			send0_buf.done = NO;
    3cce:	10 92 42 2d 	sts	0x2D42, r1	; 0x802d42 <send0_buf+0x103>
			for (i = 0; i < nbytes; i++) {
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	11 c0       	rjmp	.+34     	; 0x3cf8 <send_USART+0x44>
				send0_buf.data[send0_buf.head] = *data++;
    3cd6:	ed e3       	ldi	r30, 0x3D	; 61
    3cd8:	fd e2       	ldi	r31, 0x2D	; 45
    3cda:	80 81       	ld	r24, Z
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	38 81       	ld	r19, Y
    3ce0:	dc 01       	movw	r26, r24
    3ce2:	a1 5c       	subi	r26, 0xC1	; 193
    3ce4:	b3 4d       	sbci	r27, 0xD3	; 211
    3ce6:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    3ce8:	01 96       	adiw	r24, 0x01	; 1
    3cea:	6e ef       	ldi	r22, 0xFE	; 254
    3cec:	70 e0       	ldi	r23, 0x00	; 0
    3cee:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <__divmodhi4>
    3cf2:	80 83       	st	Z, r24
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    3cf4:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    3cf6:	21 96       	adiw	r28, 0x01	; 1
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    3cf8:	21 17       	cp	r18, r17
    3cfa:	68 f3       	brcs	.-38     	; 0x3cd6 <send_USART+0x22>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3cfc:	e0 e0       	ldi	r30, 0x00	; 0
    3cfe:	f8 e0       	ldi	r31, 0x08	; 8
    3d00:	85 81       	ldd	r24, Z+5	; 0x05
    3d02:	80 62       	ori	r24, 0x20	; 32
    3d04:	85 83       	std	Z+5, r24	; 0x05
			USART0_ticks = 0;
    3d06:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <USART0_ticks>
    3d0a:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <USART0_ticks+0x1>
//			start_TCB0(10);						// 10 ms ticks
			while (send0_buf.done == NO) {
    3d0e:	0b c0       	rjmp	.+22     	; 0x3d26 <send_USART+0x72>
				if (USART0_ticks > 100) {				// 1 second enough?
    3d10:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <USART0_ticks>
    3d14:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <USART0_ticks+0x1>
    3d18:	85 36       	cpi	r24, 0x65	; 101
    3d1a:	91 05       	cpc	r25, r1
    3d1c:	20 f0       	brcs	.+8      	; 0x3d26 <send_USART+0x72>
//					stop_TCB0();
					send0_buf.done = YES;
    3d1e:	81 e0       	ldi	r24, 0x01	; 1
    3d20:	80 93 42 2d 	sts	0x2D42, r24	; 0x802d42 <send0_buf+0x103>
					return;
    3d24:	5c c0       	rjmp	.+184    	; 0x3dde <send_USART+0x12a>
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			USART0_ticks = 0;
//			start_TCB0(10);						// 10 ms ticks
			while (send0_buf.done == NO) {
    3d26:	80 91 42 2d 	lds	r24, 0x2D42	; 0x802d42 <send0_buf+0x103>
    3d2a:	88 23       	and	r24, r24
    3d2c:	89 f3       	breq	.-30     	; 0x3d10 <send_USART+0x5c>
    3d2e:	57 c0       	rjmp	.+174    	; 0x3dde <send_USART+0x12a>
			}
//			stop_TCB0();
			break;

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
    3d30:	64 2f       	mov	r22, r20
    3d32:	70 e0       	ldi	r23, 0x00	; 0
    3d34:	ce 01       	movw	r24, r28
    3d36:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <crc16>
    3d3a:	48 2f       	mov	r20, r24
    3d3c:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	11 c0       	rjmp	.+34     	; 0x3d64 <send_USART+0xb0>
				send1_buf.data[send1_buf.head] = *data++;
    3d42:	e9 e4       	ldi	r30, 0x49	; 73
    3d44:	f0 e3       	ldi	r31, 0x30	; 48
    3d46:	80 81       	ld	r24, Z
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	38 81       	ld	r19, Y
    3d4c:	dc 01       	movw	r26, r24
    3d4e:	a5 5b       	subi	r26, 0xB5	; 181
    3d50:	b0 4d       	sbci	r27, 0xD0	; 208
    3d52:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3d54:	01 96       	adiw	r24, 0x01	; 1
    3d56:	6e ef       	ldi	r22, 0xFE	; 254
    3d58:	70 e0       	ldi	r23, 0x00	; 0
    3d5a:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <__divmodhi4>
    3d5e:	80 83       	st	Z, r24
//			stop_TCB0();
			break;

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    3d60:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    3d62:	21 96       	adiw	r28, 0x01	; 1
//			stop_TCB0();
			break;

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    3d64:	21 17       	cp	r18, r17
    3d66:	68 f3       	brcs	.-38     	; 0x3d42 <send_USART+0x8e>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    3d68:	e9 e4       	ldi	r30, 0x49	; 73
    3d6a:	f0 e3       	ldi	r31, 0x30	; 48
    3d6c:	80 81       	ld	r24, Z
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	dc 01       	movw	r26, r24
    3d72:	a5 5b       	subi	r26, 0xB5	; 181
    3d74:	b0 4d       	sbci	r27, 0xD0	; 208
    3d76:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3d78:	01 96       	adiw	r24, 0x01	; 1
    3d7a:	2e ef       	ldi	r18, 0xFE	; 254
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	b9 01       	movw	r22, r18
    3d80:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	dc 01       	movw	r26, r24
    3d88:	a5 5b       	subi	r26, 0xB5	; 181
    3d8a:	b0 4d       	sbci	r27, 0xD0	; 208
    3d8c:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3d8e:	01 96       	adiw	r24, 0x01	; 1
    3d90:	b9 01       	movw	r22, r18
    3d92:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <__divmodhi4>
    3d96:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    3d98:	1e 5f       	subi	r17, 0xFE	; 254
    3d9a:	10 93 4b 30 	sts	0x304B, r17	; 0x80304b <send1_buf+0x100>
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3d9e:	e0 e2       	ldi	r30, 0x20	; 32
    3da0:	f8 e0       	ldi	r31, 0x08	; 8
    3da2:	85 81       	ldd	r24, Z+5	; 0x05
    3da4:	80 62       	ori	r24, 0x20	; 32
    3da6:	85 83       	std	Z+5, r24	; 0x05
			break;
    3da8:	1a c0       	rjmp	.+52     	; 0x3dde <send_USART+0x12a>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    3daa:	e5 e4       	ldi	r30, 0x45	; 69
    3dac:	ff e2       	ldi	r31, 0x2F	; 47
    3dae:	80 81       	ld	r24, Z
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	38 81       	ld	r19, Y
    3db4:	dc 01       	movw	r26, r24
    3db6:	a9 5b       	subi	r26, 0xB9	; 185
    3db8:	b1 4d       	sbci	r27, 0xD1	; 209
    3dba:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    3dbc:	01 96       	adiw	r24, 0x01	; 1
    3dbe:	6e ef       	ldi	r22, 0xFE	; 254
    3dc0:	70 e0       	ldi	r23, 0x00	; 0
    3dc2:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <__divmodhi4>
    3dc6:	80 83       	st	Z, r24
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    3dc8:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    3dca:	21 96       	adiw	r28, 0x01	; 1
    3dcc:	01 c0       	rjmp	.+2      	; 0x3dd0 <send_USART+0x11c>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    3dce:	20 e0       	ldi	r18, 0x00	; 0
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    3dd0:	21 17       	cp	r18, r17
    3dd2:	58 f3       	brcs	.-42     	; 0x3daa <send_USART+0xf6>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3dd4:	e0 e6       	ldi	r30, 0x60	; 96
    3dd6:	f8 e0       	ldi	r31, 0x08	; 8
    3dd8:	85 81       	ldd	r24, Z+5	; 0x05
    3dda:	80 62       	ori	r24, 0x20	; 32
    3ddc:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    3dde:	df 91       	pop	r29
    3de0:	cf 91       	pop	r28
    3de2:	1f 91       	pop	r17
    3de4:	0f 91       	pop	r16
    3de6:	08 95       	ret

00003de8 <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    3de8:	1f 92       	push	r1
    3dea:	0f 92       	push	r0
    3dec:	0f b6       	in	r0, 0x3f	; 63
    3dee:	0f 92       	push	r0
    3df0:	11 24       	eor	r1, r1
    3df2:	5f 93       	push	r21
    3df4:	6f 93       	push	r22
    3df6:	7f 93       	push	r23
    3df8:	8f 93       	push	r24
    3dfa:	9f 93       	push	r25
    3dfc:	af 93       	push	r26
    3dfe:	bf 93       	push	r27
    3e00:	ef 93       	push	r30
    3e02:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    3e04:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if (recv0_buf.length < (BUFSIZE-1)) {		// BUFSIZE-1 to make room for the terminating \0
    3e08:	80 91 3c 2c 	lds	r24, 0x2C3C	; 0x802c3c <recv0_buf+0x101>
    3e0c:	8d 3f       	cpi	r24, 0xFD	; 253
    3e0e:	10 f5       	brcc	.+68     	; 0x3e54 <__vector_17+0x6c>
//		c = USART0.RXDATAL;
		if ((char) c == '\r') {
    3e10:	9d 30       	cpi	r25, 0x0D	; 13
    3e12:	51 f4       	brne	.+20     	; 0x3e28 <__vector_17+0x40>
			recv0_buf.done = YES;
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	80 93 3e 2c 	sts	0x2C3E, r24	; 0x802c3e <recv0_buf+0x103>
			recv0_buf.data[recv0_buf.head] = '\0';
    3e1a:	e0 91 39 2c 	lds	r30, 0x2C39	; 0x802c39 <recv0_buf+0xfe>
    3e1e:	f0 e0       	ldi	r31, 0x00	; 0
    3e20:	e5 5c       	subi	r30, 0xC5	; 197
    3e22:	f4 4d       	sbci	r31, 0xD4	; 212
    3e24:	10 82       	st	Z, r1
    3e26:	06 c0       	rjmp	.+12     	; 0x3e34 <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    3e28:	e0 91 39 2c 	lds	r30, 0x2C39	; 0x802c39 <recv0_buf+0xfe>
    3e2c:	f0 e0       	ldi	r31, 0x00	; 0
    3e2e:	e5 5c       	subi	r30, 0xC5	; 197
    3e30:	f4 4d       	sbci	r31, 0xD4	; 212
    3e32:	90 83       	st	Z, r25
		}
		recv0_buf.length++;
    3e34:	ec e3       	ldi	r30, 0x3C	; 60
    3e36:	fc e2       	ldi	r31, 0x2C	; 44
    3e38:	80 81       	ld	r24, Z
    3e3a:	8f 5f       	subi	r24, 0xFF	; 255
    3e3c:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    3e3e:	e9 e3       	ldi	r30, 0x39	; 57
    3e40:	fc e2       	ldi	r31, 0x2C	; 44
    3e42:	80 81       	ld	r24, Z
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	01 96       	adiw	r24, 0x01	; 1
    3e48:	6e ef       	ldi	r22, 0xFE	; 254
    3e4a:	70 e0       	ldi	r23, 0x00	; 0
    3e4c:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <__divmodhi4>
    3e50:	80 83       	st	Z, r24
    3e52:	0a c0       	rjmp	.+20     	; 0x3e68 <__vector_17+0x80>
	} else {
		recv0_buf.head = 0;
    3e54:	10 92 39 2c 	sts	0x2C39, r1	; 0x802c39 <recv0_buf+0xfe>
		recv0_buf.tail = 0;
    3e58:	10 92 3a 2c 	sts	0x2C3A, r1	; 0x802c3a <recv0_buf+0xff>
		recv0_buf.data[0] = '\0';
    3e5c:	10 92 3b 2b 	sts	0x2B3B, r1	; 0x802b3b <recv0_buf>
		recv0_buf.length = 0;
    3e60:	10 92 3c 2c 	sts	0x2C3C, r1	; 0x802c3c <recv0_buf+0x101>
		recv0_buf.done = NO;
    3e64:	10 92 3e 2c 	sts	0x2C3E, r1	; 0x802c3e <recv0_buf+0x103>
	}
}
    3e68:	ff 91       	pop	r31
    3e6a:	ef 91       	pop	r30
    3e6c:	bf 91       	pop	r27
    3e6e:	af 91       	pop	r26
    3e70:	9f 91       	pop	r25
    3e72:	8f 91       	pop	r24
    3e74:	7f 91       	pop	r23
    3e76:	6f 91       	pop	r22
    3e78:	5f 91       	pop	r21
    3e7a:	0f 90       	pop	r0
    3e7c:	0f be       	out	0x3f, r0	; 63
    3e7e:	0f 90       	pop	r0
    3e80:	1f 90       	pop	r1
    3e82:	18 95       	reti

00003e84 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    3e84:	1f 92       	push	r1
    3e86:	0f 92       	push	r0
    3e88:	0f b6       	in	r0, 0x3f	; 63
    3e8a:	0f 92       	push	r0
    3e8c:	11 24       	eor	r1, r1
    3e8e:	2f 93       	push	r18
    3e90:	8f 93       	push	r24
    3e92:	9f 93       	push	r25
    3e94:	ef 93       	push	r30
    3e96:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    3e98:	e0 e0       	ldi	r30, 0x00	; 0
    3e9a:	f8 e0       	ldi	r31, 0x08	; 8
    3e9c:	85 81       	ldd	r24, Z+5	; 0x05
    3e9e:	8f 7d       	andi	r24, 0xDF	; 223
    3ea0:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    3ea2:	80 91 3d 2d 	lds	r24, 0x2D3D	; 0x802d3d <send0_buf+0xfe>
    3ea6:	e0 91 3e 2d 	lds	r30, 0x2D3E	; 0x802d3e <send0_buf+0xff>
    3eaa:	8e 17       	cp	r24, r30
    3eac:	d1 f0       	breq	.+52     	; 0x3ee2 <__vector_18+0x5e>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    3eae:	81 e0       	ldi	r24, 0x01	; 1
    3eb0:	8e 0f       	add	r24, r30
    3eb2:	80 93 3e 2d 	sts	0x2D3E, r24	; 0x802d3e <send0_buf+0xff>
    3eb6:	f0 e0       	ldi	r31, 0x00	; 0
    3eb8:	e1 5c       	subi	r30, 0xC1	; 193
    3eba:	f3 4d       	sbci	r31, 0xD3	; 211
    3ebc:	90 81       	ld	r25, Z
    3ebe:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    3ec2:	91 e0       	ldi	r25, 0x01	; 1
    3ec4:	8e 3f       	cpi	r24, 0xFE	; 254
    3ec6:	08 f4       	brcc	.+2      	; 0x3eca <__vector_18+0x46>
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	91 95       	neg	r25
    3ecc:	29 2f       	mov	r18, r25
    3ece:	22 0f       	add	r18, r18
    3ed0:	82 1b       	sub	r24, r18
    3ed2:	80 93 3e 2d 	sts	0x2D3E, r24	; 0x802d3e <send0_buf+0xff>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    3ed6:	e0 e0       	ldi	r30, 0x00	; 0
    3ed8:	f8 e0       	ldi	r31, 0x08	; 8
    3eda:	85 81       	ldd	r24, Z+5	; 0x05
    3edc:	80 62       	ori	r24, 0x20	; 32
    3ede:	85 83       	std	Z+5, r24	; 0x05
    3ee0:	03 c0       	rjmp	.+6      	; 0x3ee8 <__vector_18+0x64>
	} else {
		send0_buf.done = YES;
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
    3ee4:	80 93 42 2d 	sts	0x2D42, r24	; 0x802d42 <send0_buf+0x103>
	}

}
    3ee8:	ff 91       	pop	r31
    3eea:	ef 91       	pop	r30
    3eec:	9f 91       	pop	r25
    3eee:	8f 91       	pop	r24
    3ef0:	2f 91       	pop	r18
    3ef2:	0f 90       	pop	r0
    3ef4:	0f be       	out	0x3f, r0	; 63
    3ef6:	0f 90       	pop	r0
    3ef8:	1f 90       	pop	r1
    3efa:	18 95       	reti

00003efc <__vector_26>:
/*------------------------------------------------------------------------------
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    3efc:	1f 92       	push	r1
    3efe:	0f 92       	push	r0
    3f00:	0f b6       	in	r0, 0x3f	; 63
    3f02:	0f 92       	push	r0
    3f04:	11 24       	eor	r1, r1
    3f06:	2f 93       	push	r18
    3f08:	8f 93       	push	r24
    3f0a:	9f 93       	push	r25
    3f0c:	ef 93       	push	r30
    3f0e:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    3f10:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>

	if (recv1_buf.nxfrd < recv1_buf.nbytes) {
    3f14:	e0 91 39 2b 	lds	r30, 0x2B39	; 0x802b39 <recv1_buf+0x102>
    3f18:	80 91 37 2b 	lds	r24, 0x2B37	; 0x802b37 <recv1_buf+0x100>
    3f1c:	e8 17       	cp	r30, r24
    3f1e:	40 f4       	brcc	.+16     	; 0x3f30 <__vector_26+0x34>
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    3f20:	21 e0       	ldi	r18, 0x01	; 1
    3f22:	2e 0f       	add	r18, r30
    3f24:	20 93 39 2b 	sts	0x2B39, r18	; 0x802b39 <recv1_buf+0x102>
    3f28:	f0 e0       	ldi	r31, 0x00	; 0
    3f2a:	e9 5c       	subi	r30, 0xC9	; 201
    3f2c:	f5 4d       	sbci	r31, 0xD5	; 213
    3f2e:	90 83       	st	Z, r25
	}

	if (recv1_buf.nxfrd >= recv1_buf.nbytes) {
    3f30:	90 91 39 2b 	lds	r25, 0x2B39	; 0x802b39 <recv1_buf+0x102>
    3f34:	98 17       	cp	r25, r24
    3f36:	18 f0       	brcs	.+6      	; 0x3f3e <__vector_26+0x42>
		recv1_buf.done = YES;
    3f38:	81 e0       	ldi	r24, 0x01	; 1
    3f3a:	80 93 3a 2b 	sts	0x2B3A, r24	; 0x802b3a <recv1_buf+0x103>
	}

}
    3f3e:	ff 91       	pop	r31
    3f40:	ef 91       	pop	r30
    3f42:	9f 91       	pop	r25
    3f44:	8f 91       	pop	r24
    3f46:	2f 91       	pop	r18
    3f48:	0f 90       	pop	r0
    3f4a:	0f be       	out	0x3f, r0	; 63
    3f4c:	0f 90       	pop	r0
    3f4e:	1f 90       	pop	r1
    3f50:	18 95       	reti

00003f52 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    3f52:	1f 92       	push	r1
    3f54:	0f 92       	push	r0
    3f56:	0f b6       	in	r0, 0x3f	; 63
    3f58:	0f 92       	push	r0
    3f5a:	11 24       	eor	r1, r1
    3f5c:	2f 93       	push	r18
    3f5e:	8f 93       	push	r24
    3f60:	9f 93       	push	r25
    3f62:	ef 93       	push	r30
    3f64:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    3f66:	e0 e2       	ldi	r30, 0x20	; 32
    3f68:	f8 e0       	ldi	r31, 0x08	; 8
    3f6a:	85 81       	ldd	r24, Z+5	; 0x05
    3f6c:	8f 7d       	andi	r24, 0xDF	; 223
    3f6e:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    3f70:	80 91 49 30 	lds	r24, 0x3049	; 0x803049 <send1_buf+0xfe>
    3f74:	e0 91 4a 30 	lds	r30, 0x304A	; 0x80304a <send1_buf+0xff>
    3f78:	8e 17       	cp	r24, r30
    3f7a:	d1 f0       	breq	.+52     	; 0x3fb0 <__vector_27+0x5e>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	8e 0f       	add	r24, r30
    3f80:	80 93 4a 30 	sts	0x304A, r24	; 0x80304a <send1_buf+0xff>
    3f84:	f0 e0       	ldi	r31, 0x00	; 0
    3f86:	e5 5b       	subi	r30, 0xB5	; 181
    3f88:	f0 4d       	sbci	r31, 0xD0	; 208
    3f8a:	90 81       	ld	r25, Z
    3f8c:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    3f90:	91 e0       	ldi	r25, 0x01	; 1
    3f92:	8e 3f       	cpi	r24, 0xFE	; 254
    3f94:	08 f4       	brcc	.+2      	; 0x3f98 <__vector_27+0x46>
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	91 95       	neg	r25
    3f9a:	29 2f       	mov	r18, r25
    3f9c:	22 0f       	add	r18, r18
    3f9e:	82 1b       	sub	r24, r18
    3fa0:	80 93 4a 30 	sts	0x304A, r24	; 0x80304a <send1_buf+0xff>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    3fa4:	e0 e2       	ldi	r30, 0x20	; 32
    3fa6:	f8 e0       	ldi	r31, 0x08	; 8
    3fa8:	85 81       	ldd	r24, Z+5	; 0x05
    3faa:	80 62       	ori	r24, 0x20	; 32
    3fac:	85 83       	std	Z+5, r24	; 0x05
    3fae:	03 c0       	rjmp	.+6      	; 0x3fb6 <__vector_27+0x64>
	} else {
		send1_buf.done = YES;
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
    3fb2:	80 93 4e 30 	sts	0x304E, r24	; 0x80304e <send1_buf+0x103>
	}

}
    3fb6:	ff 91       	pop	r31
    3fb8:	ef 91       	pop	r30
    3fba:	9f 91       	pop	r25
    3fbc:	8f 91       	pop	r24
    3fbe:	2f 91       	pop	r18
    3fc0:	0f 90       	pop	r0
    3fc2:	0f be       	out	0x3f, r0	; 63
    3fc4:	0f 90       	pop	r0
    3fc6:	1f 90       	pop	r1
    3fc8:	18 95       	reti

00003fca <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    3fca:	1f 92       	push	r1
    3fcc:	0f 92       	push	r0
    3fce:	0f b6       	in	r0, 0x3f	; 63
    3fd0:	0f 92       	push	r0
    3fd2:	11 24       	eor	r1, r1
    3fd4:	8f 93       	push	r24
    3fd6:	9f 93       	push	r25
    3fd8:	af 93       	push	r26
    3fda:	bf 93       	push	r27
    3fdc:	ef 93       	push	r30
    3fde:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    3fe0:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    3fe4:	8d 30       	cpi	r24, 0x0D	; 13
    3fe6:	21 f0       	breq	.+8      	; 0x3ff0 <__vector_37+0x26>
    3fe8:	e0 91 45 2e 	lds	r30, 0x2E45	; 0x802e45 <recv3_buf+0x102>
    3fec:	ed 3f       	cpi	r30, 0xFD	; 253
    3fee:	78 f0       	brcs	.+30     	; 0x400e <__RODATA_PM_OFFSET__+0xe>
		recv3_buf.done = YES;
    3ff0:	81 e0       	ldi	r24, 0x01	; 1
    3ff2:	80 93 46 2e 	sts	0x2E46, r24	; 0x802e46 <recv3_buf+0x103>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    3ff6:	a5 e4       	ldi	r26, 0x45	; 69
    3ff8:	be e2       	ldi	r27, 0x2E	; 46
    3ffa:	8c 91       	ld	r24, X
    3ffc:	e8 2f       	mov	r30, r24
    3ffe:	f0 e0       	ldi	r31, 0x00	; 0
    4000:	ed 5b       	subi	r30, 0xBD	; 189
    4002:	f2 4d       	sbci	r31, 0xD2	; 210
    4004:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    4006:	80 93 43 2e 	sts	0x2E43, r24	; 0x802e43 <recv3_buf+0x100>
		recv3_buf.nxfrd = 0;
    400a:	1c 92       	st	X, r1
		return;
    400c:	08 c0       	rjmp	.+16     	; 0x401e <__RODATA_PM_OFFSET__+0x1e>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    400e:	91 e0       	ldi	r25, 0x01	; 1
    4010:	9e 0f       	add	r25, r30
    4012:	90 93 45 2e 	sts	0x2E45, r25	; 0x802e45 <recv3_buf+0x102>
    4016:	f0 e0       	ldi	r31, 0x00	; 0
    4018:	ed 5b       	subi	r30, 0xBD	; 189
    401a:	f2 4d       	sbci	r31, 0xD2	; 210
    401c:	80 83       	st	Z, r24
	}

}
    401e:	ff 91       	pop	r31
    4020:	ef 91       	pop	r30
    4022:	bf 91       	pop	r27
    4024:	af 91       	pop	r26
    4026:	9f 91       	pop	r25
    4028:	8f 91       	pop	r24
    402a:	0f 90       	pop	r0
    402c:	0f be       	out	0x3f, r0	; 63
    402e:	0f 90       	pop	r0
    4030:	1f 90       	pop	r1
    4032:	18 95       	reti

00004034 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    4034:	1f 92       	push	r1
    4036:	0f 92       	push	r0
    4038:	0f b6       	in	r0, 0x3f	; 63
    403a:	0f 92       	push	r0
    403c:	11 24       	eor	r1, r1
    403e:	8f 93       	push	r24
    4040:	9f 93       	push	r25
    4042:	af 93       	push	r26
    4044:	bf 93       	push	r27
    4046:	ef 93       	push	r30
    4048:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    404a:	a9 e4       	ldi	r26, 0x49	; 73
    404c:	bf e2       	ldi	r27, 0x2F	; 47
    404e:	ec 91       	ld	r30, X
    4050:	81 e0       	ldi	r24, 0x01	; 1
    4052:	8e 0f       	add	r24, r30
    4054:	8c 93       	st	X, r24
    4056:	f0 e0       	ldi	r31, 0x00	; 0
    4058:	e9 5b       	subi	r30, 0xB9	; 185
    405a:	f1 4d       	sbci	r31, 0xD1	; 209
    405c:	90 81       	ld	r25, Z
    405e:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    4062:	90 91 47 2f 	lds	r25, 0x2F47	; 0x802f47 <send3_buf+0x100>
    4066:	89 17       	cp	r24, r25
    4068:	40 f0       	brcs	.+16     	; 0x407a <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    406a:	e0 e6       	ldi	r30, 0x60	; 96
    406c:	f8 e0       	ldi	r31, 0x08	; 8
    406e:	85 81       	ldd	r24, Z+5	; 0x05
    4070:	8f 7d       	andi	r24, 0xDF	; 223
    4072:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	80 93 4a 2f 	sts	0x2F4A, r24	; 0x802f4a <send3_buf+0x103>
	}

}
    407a:	ff 91       	pop	r31
    407c:	ef 91       	pop	r30
    407e:	bf 91       	pop	r27
    4080:	af 91       	pop	r26
    4082:	9f 91       	pop	r25
    4084:	8f 91       	pop	r24
    4086:	0f 90       	pop	r0
    4088:	0f be       	out	0x3f, r0	; 63
    408a:	0f 90       	pop	r0
    408c:	1f 90       	pop	r1
    408e:	18 95       	reti

00004090 <reboot>:
#include "wdt.h"

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
    4090:	88 ed       	ldi	r24, 0xD8	; 216
    4092:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    409a:	08 95       	ret

0000409c <__vector_29>:

}

ISR(PORTF_PORT_vect)
{
    409c:	1f 92       	push	r1
    409e:	0f 92       	push	r0
    40a0:	0f b6       	in	r0, 0x3f	; 63
    40a2:	0f 92       	push	r0
    40a4:	11 24       	eor	r1, r1
    40a6:	2f 93       	push	r18
    40a8:	3f 93       	push	r19
    40aa:	4f 93       	push	r20
    40ac:	5f 93       	push	r21
    40ae:	6f 93       	push	r22
    40b0:	7f 93       	push	r23
    40b2:	8f 93       	push	r24
    40b4:	9f 93       	push	r25
    40b6:	af 93       	push	r26
    40b8:	bf 93       	push	r27
    40ba:	ef 93       	push	r30
    40bc:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
    40be:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
    40c2:	86 ff       	sbrs	r24, 6
    40c4:	05 c0       	rjmp	.+10     	; 0x40d0 <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
    40c6:	80 e4       	ldi	r24, 0x40	; 64
    40c8:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
    40cc:	0e 94 48 20 	call	0x4090	; 0x4090 <reboot>
	}

}
    40d0:	ff 91       	pop	r31
    40d2:	ef 91       	pop	r30
    40d4:	bf 91       	pop	r27
    40d6:	af 91       	pop	r26
    40d8:	9f 91       	pop	r25
    40da:	8f 91       	pop	r24
    40dc:	7f 91       	pop	r23
    40de:	6f 91       	pop	r22
    40e0:	5f 91       	pop	r21
    40e2:	4f 91       	pop	r20
    40e4:	3f 91       	pop	r19
    40e6:	2f 91       	pop	r18
    40e8:	0f 90       	pop	r0
    40ea:	0f be       	out	0x3f, r0	; 63
    40ec:	0f 90       	pop	r0
    40ee:	1f 90       	pop	r1
    40f0:	18 95       	reti

000040f2 <__subsf3>:
    40f2:	50 58       	subi	r21, 0x80	; 128

000040f4 <__addsf3>:
    40f4:	bb 27       	eor	r27, r27
    40f6:	aa 27       	eor	r26, r26
    40f8:	0e 94 91 20 	call	0x4122	; 0x4122 <__addsf3x>
    40fc:	0c 94 d5 21 	jmp	0x43aa	; 0x43aa <__fp_round>
    4100:	0e 94 c7 21 	call	0x438e	; 0x438e <__fp_pscA>
    4104:	38 f0       	brcs	.+14     	; 0x4114 <__addsf3+0x20>
    4106:	0e 94 ce 21 	call	0x439c	; 0x439c <__fp_pscB>
    410a:	20 f0       	brcs	.+8      	; 0x4114 <__addsf3+0x20>
    410c:	39 f4       	brne	.+14     	; 0x411c <__addsf3+0x28>
    410e:	9f 3f       	cpi	r25, 0xFF	; 255
    4110:	19 f4       	brne	.+6      	; 0x4118 <__addsf3+0x24>
    4112:	26 f4       	brtc	.+8      	; 0x411c <__addsf3+0x28>
    4114:	0c 94 c4 21 	jmp	0x4388	; 0x4388 <__fp_nan>
    4118:	0e f4       	brtc	.+2      	; 0x411c <__addsf3+0x28>
    411a:	e0 95       	com	r30
    411c:	e7 fb       	bst	r30, 7
    411e:	0c 94 be 21 	jmp	0x437c	; 0x437c <__fp_inf>

00004122 <__addsf3x>:
    4122:	e9 2f       	mov	r30, r25
    4124:	0e 94 e6 21 	call	0x43cc	; 0x43cc <__fp_split3>
    4128:	58 f3       	brcs	.-42     	; 0x4100 <__addsf3+0xc>
    412a:	ba 17       	cp	r27, r26
    412c:	62 07       	cpc	r22, r18
    412e:	73 07       	cpc	r23, r19
    4130:	84 07       	cpc	r24, r20
    4132:	95 07       	cpc	r25, r21
    4134:	20 f0       	brcs	.+8      	; 0x413e <__addsf3x+0x1c>
    4136:	79 f4       	brne	.+30     	; 0x4156 <__addsf3x+0x34>
    4138:	a6 f5       	brtc	.+104    	; 0x41a2 <__addsf3x+0x80>
    413a:	0c 94 08 22 	jmp	0x4410	; 0x4410 <__fp_zero>
    413e:	0e f4       	brtc	.+2      	; 0x4142 <__addsf3x+0x20>
    4140:	e0 95       	com	r30
    4142:	0b 2e       	mov	r0, r27
    4144:	ba 2f       	mov	r27, r26
    4146:	a0 2d       	mov	r26, r0
    4148:	0b 01       	movw	r0, r22
    414a:	b9 01       	movw	r22, r18
    414c:	90 01       	movw	r18, r0
    414e:	0c 01       	movw	r0, r24
    4150:	ca 01       	movw	r24, r20
    4152:	a0 01       	movw	r20, r0
    4154:	11 24       	eor	r1, r1
    4156:	ff 27       	eor	r31, r31
    4158:	59 1b       	sub	r21, r25
    415a:	99 f0       	breq	.+38     	; 0x4182 <__addsf3x+0x60>
    415c:	59 3f       	cpi	r21, 0xF9	; 249
    415e:	50 f4       	brcc	.+20     	; 0x4174 <__addsf3x+0x52>
    4160:	50 3e       	cpi	r21, 0xE0	; 224
    4162:	68 f1       	brcs	.+90     	; 0x41be <__addsf3x+0x9c>
    4164:	1a 16       	cp	r1, r26
    4166:	f0 40       	sbci	r31, 0x00	; 0
    4168:	a2 2f       	mov	r26, r18
    416a:	23 2f       	mov	r18, r19
    416c:	34 2f       	mov	r19, r20
    416e:	44 27       	eor	r20, r20
    4170:	58 5f       	subi	r21, 0xF8	; 248
    4172:	f3 cf       	rjmp	.-26     	; 0x415a <__addsf3x+0x38>
    4174:	46 95       	lsr	r20
    4176:	37 95       	ror	r19
    4178:	27 95       	ror	r18
    417a:	a7 95       	ror	r26
    417c:	f0 40       	sbci	r31, 0x00	; 0
    417e:	53 95       	inc	r21
    4180:	c9 f7       	brne	.-14     	; 0x4174 <__addsf3x+0x52>
    4182:	7e f4       	brtc	.+30     	; 0x41a2 <__addsf3x+0x80>
    4184:	1f 16       	cp	r1, r31
    4186:	ba 0b       	sbc	r27, r26
    4188:	62 0b       	sbc	r22, r18
    418a:	73 0b       	sbc	r23, r19
    418c:	84 0b       	sbc	r24, r20
    418e:	ba f0       	brmi	.+46     	; 0x41be <__addsf3x+0x9c>
    4190:	91 50       	subi	r25, 0x01	; 1
    4192:	a1 f0       	breq	.+40     	; 0x41bc <__addsf3x+0x9a>
    4194:	ff 0f       	add	r31, r31
    4196:	bb 1f       	adc	r27, r27
    4198:	66 1f       	adc	r22, r22
    419a:	77 1f       	adc	r23, r23
    419c:	88 1f       	adc	r24, r24
    419e:	c2 f7       	brpl	.-16     	; 0x4190 <__addsf3x+0x6e>
    41a0:	0e c0       	rjmp	.+28     	; 0x41be <__addsf3x+0x9c>
    41a2:	ba 0f       	add	r27, r26
    41a4:	62 1f       	adc	r22, r18
    41a6:	73 1f       	adc	r23, r19
    41a8:	84 1f       	adc	r24, r20
    41aa:	48 f4       	brcc	.+18     	; 0x41be <__addsf3x+0x9c>
    41ac:	87 95       	ror	r24
    41ae:	77 95       	ror	r23
    41b0:	67 95       	ror	r22
    41b2:	b7 95       	ror	r27
    41b4:	f7 95       	ror	r31
    41b6:	9e 3f       	cpi	r25, 0xFE	; 254
    41b8:	08 f0       	brcs	.+2      	; 0x41bc <__addsf3x+0x9a>
    41ba:	b0 cf       	rjmp	.-160    	; 0x411c <__addsf3+0x28>
    41bc:	93 95       	inc	r25
    41be:	88 0f       	add	r24, r24
    41c0:	08 f0       	brcs	.+2      	; 0x41c4 <__addsf3x+0xa2>
    41c2:	99 27       	eor	r25, r25
    41c4:	ee 0f       	add	r30, r30
    41c6:	97 95       	ror	r25
    41c8:	87 95       	ror	r24
    41ca:	08 95       	ret

000041cc <__cmpsf2>:
    41cc:	0e 94 9a 21 	call	0x4334	; 0x4334 <__fp_cmp>
    41d0:	08 f4       	brcc	.+2      	; 0x41d4 <__cmpsf2+0x8>
    41d2:	81 e0       	ldi	r24, 0x01	; 1
    41d4:	08 95       	ret

000041d6 <__divsf3>:
    41d6:	0e 94 ff 20 	call	0x41fe	; 0x41fe <__divsf3x>
    41da:	0c 94 d5 21 	jmp	0x43aa	; 0x43aa <__fp_round>
    41de:	0e 94 ce 21 	call	0x439c	; 0x439c <__fp_pscB>
    41e2:	58 f0       	brcs	.+22     	; 0x41fa <__divsf3+0x24>
    41e4:	0e 94 c7 21 	call	0x438e	; 0x438e <__fp_pscA>
    41e8:	40 f0       	brcs	.+16     	; 0x41fa <__divsf3+0x24>
    41ea:	29 f4       	brne	.+10     	; 0x41f6 <__divsf3+0x20>
    41ec:	5f 3f       	cpi	r21, 0xFF	; 255
    41ee:	29 f0       	breq	.+10     	; 0x41fa <__divsf3+0x24>
    41f0:	0c 94 be 21 	jmp	0x437c	; 0x437c <__fp_inf>
    41f4:	51 11       	cpse	r21, r1
    41f6:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__fp_szero>
    41fa:	0c 94 c4 21 	jmp	0x4388	; 0x4388 <__fp_nan>

000041fe <__divsf3x>:
    41fe:	0e 94 e6 21 	call	0x43cc	; 0x43cc <__fp_split3>
    4202:	68 f3       	brcs	.-38     	; 0x41de <__divsf3+0x8>

00004204 <__divsf3_pse>:
    4204:	99 23       	and	r25, r25
    4206:	b1 f3       	breq	.-20     	; 0x41f4 <__divsf3+0x1e>
    4208:	55 23       	and	r21, r21
    420a:	91 f3       	breq	.-28     	; 0x41f0 <__divsf3+0x1a>
    420c:	95 1b       	sub	r25, r21
    420e:	55 0b       	sbc	r21, r21
    4210:	bb 27       	eor	r27, r27
    4212:	aa 27       	eor	r26, r26
    4214:	62 17       	cp	r22, r18
    4216:	73 07       	cpc	r23, r19
    4218:	84 07       	cpc	r24, r20
    421a:	38 f0       	brcs	.+14     	; 0x422a <__divsf3_pse+0x26>
    421c:	9f 5f       	subi	r25, 0xFF	; 255
    421e:	5f 4f       	sbci	r21, 0xFF	; 255
    4220:	22 0f       	add	r18, r18
    4222:	33 1f       	adc	r19, r19
    4224:	44 1f       	adc	r20, r20
    4226:	aa 1f       	adc	r26, r26
    4228:	a9 f3       	breq	.-22     	; 0x4214 <__divsf3_pse+0x10>
    422a:	35 d0       	rcall	.+106    	; 0x4296 <__divsf3_pse+0x92>
    422c:	0e 2e       	mov	r0, r30
    422e:	3a f0       	brmi	.+14     	; 0x423e <__divsf3_pse+0x3a>
    4230:	e0 e8       	ldi	r30, 0x80	; 128
    4232:	32 d0       	rcall	.+100    	; 0x4298 <__divsf3_pse+0x94>
    4234:	91 50       	subi	r25, 0x01	; 1
    4236:	50 40       	sbci	r21, 0x00	; 0
    4238:	e6 95       	lsr	r30
    423a:	00 1c       	adc	r0, r0
    423c:	ca f7       	brpl	.-14     	; 0x4230 <__divsf3_pse+0x2c>
    423e:	2b d0       	rcall	.+86     	; 0x4296 <__divsf3_pse+0x92>
    4240:	fe 2f       	mov	r31, r30
    4242:	29 d0       	rcall	.+82     	; 0x4296 <__divsf3_pse+0x92>
    4244:	66 0f       	add	r22, r22
    4246:	77 1f       	adc	r23, r23
    4248:	88 1f       	adc	r24, r24
    424a:	bb 1f       	adc	r27, r27
    424c:	26 17       	cp	r18, r22
    424e:	37 07       	cpc	r19, r23
    4250:	48 07       	cpc	r20, r24
    4252:	ab 07       	cpc	r26, r27
    4254:	b0 e8       	ldi	r27, 0x80	; 128
    4256:	09 f0       	breq	.+2      	; 0x425a <__divsf3_pse+0x56>
    4258:	bb 0b       	sbc	r27, r27
    425a:	80 2d       	mov	r24, r0
    425c:	bf 01       	movw	r22, r30
    425e:	ff 27       	eor	r31, r31
    4260:	93 58       	subi	r25, 0x83	; 131
    4262:	5f 4f       	sbci	r21, 0xFF	; 255
    4264:	3a f0       	brmi	.+14     	; 0x4274 <__divsf3_pse+0x70>
    4266:	9e 3f       	cpi	r25, 0xFE	; 254
    4268:	51 05       	cpc	r21, r1
    426a:	78 f0       	brcs	.+30     	; 0x428a <__divsf3_pse+0x86>
    426c:	0c 94 be 21 	jmp	0x437c	; 0x437c <__fp_inf>
    4270:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__fp_szero>
    4274:	5f 3f       	cpi	r21, 0xFF	; 255
    4276:	e4 f3       	brlt	.-8      	; 0x4270 <__divsf3_pse+0x6c>
    4278:	98 3e       	cpi	r25, 0xE8	; 232
    427a:	d4 f3       	brlt	.-12     	; 0x4270 <__divsf3_pse+0x6c>
    427c:	86 95       	lsr	r24
    427e:	77 95       	ror	r23
    4280:	67 95       	ror	r22
    4282:	b7 95       	ror	r27
    4284:	f7 95       	ror	r31
    4286:	9f 5f       	subi	r25, 0xFF	; 255
    4288:	c9 f7       	brne	.-14     	; 0x427c <__divsf3_pse+0x78>
    428a:	88 0f       	add	r24, r24
    428c:	91 1d       	adc	r25, r1
    428e:	96 95       	lsr	r25
    4290:	87 95       	ror	r24
    4292:	97 f9       	bld	r25, 7
    4294:	08 95       	ret
    4296:	e1 e0       	ldi	r30, 0x01	; 1
    4298:	66 0f       	add	r22, r22
    429a:	77 1f       	adc	r23, r23
    429c:	88 1f       	adc	r24, r24
    429e:	bb 1f       	adc	r27, r27
    42a0:	62 17       	cp	r22, r18
    42a2:	73 07       	cpc	r23, r19
    42a4:	84 07       	cpc	r24, r20
    42a6:	ba 07       	cpc	r27, r26
    42a8:	20 f0       	brcs	.+8      	; 0x42b2 <__divsf3_pse+0xae>
    42aa:	62 1b       	sub	r22, r18
    42ac:	73 0b       	sbc	r23, r19
    42ae:	84 0b       	sbc	r24, r20
    42b0:	ba 0b       	sbc	r27, r26
    42b2:	ee 1f       	adc	r30, r30
    42b4:	88 f7       	brcc	.-30     	; 0x4298 <__divsf3_pse+0x94>
    42b6:	e0 95       	com	r30
    42b8:	08 95       	ret

000042ba <__floatunsisf>:
    42ba:	e8 94       	clt
    42bc:	09 c0       	rjmp	.+18     	; 0x42d0 <__floatsisf+0x12>

000042be <__floatsisf>:
    42be:	97 fb       	bst	r25, 7
    42c0:	3e f4       	brtc	.+14     	; 0x42d0 <__floatsisf+0x12>
    42c2:	90 95       	com	r25
    42c4:	80 95       	com	r24
    42c6:	70 95       	com	r23
    42c8:	61 95       	neg	r22
    42ca:	7f 4f       	sbci	r23, 0xFF	; 255
    42cc:	8f 4f       	sbci	r24, 0xFF	; 255
    42ce:	9f 4f       	sbci	r25, 0xFF	; 255
    42d0:	99 23       	and	r25, r25
    42d2:	a9 f0       	breq	.+42     	; 0x42fe <__floatsisf+0x40>
    42d4:	f9 2f       	mov	r31, r25
    42d6:	96 e9       	ldi	r25, 0x96	; 150
    42d8:	bb 27       	eor	r27, r27
    42da:	93 95       	inc	r25
    42dc:	f6 95       	lsr	r31
    42de:	87 95       	ror	r24
    42e0:	77 95       	ror	r23
    42e2:	67 95       	ror	r22
    42e4:	b7 95       	ror	r27
    42e6:	f1 11       	cpse	r31, r1
    42e8:	f8 cf       	rjmp	.-16     	; 0x42da <__floatsisf+0x1c>
    42ea:	fa f4       	brpl	.+62     	; 0x432a <__floatsisf+0x6c>
    42ec:	bb 0f       	add	r27, r27
    42ee:	11 f4       	brne	.+4      	; 0x42f4 <__floatsisf+0x36>
    42f0:	60 ff       	sbrs	r22, 0
    42f2:	1b c0       	rjmp	.+54     	; 0x432a <__floatsisf+0x6c>
    42f4:	6f 5f       	subi	r22, 0xFF	; 255
    42f6:	7f 4f       	sbci	r23, 0xFF	; 255
    42f8:	8f 4f       	sbci	r24, 0xFF	; 255
    42fa:	9f 4f       	sbci	r25, 0xFF	; 255
    42fc:	16 c0       	rjmp	.+44     	; 0x432a <__floatsisf+0x6c>
    42fe:	88 23       	and	r24, r24
    4300:	11 f0       	breq	.+4      	; 0x4306 <__floatsisf+0x48>
    4302:	96 e9       	ldi	r25, 0x96	; 150
    4304:	11 c0       	rjmp	.+34     	; 0x4328 <__floatsisf+0x6a>
    4306:	77 23       	and	r23, r23
    4308:	21 f0       	breq	.+8      	; 0x4312 <__floatsisf+0x54>
    430a:	9e e8       	ldi	r25, 0x8E	; 142
    430c:	87 2f       	mov	r24, r23
    430e:	76 2f       	mov	r23, r22
    4310:	05 c0       	rjmp	.+10     	; 0x431c <__floatsisf+0x5e>
    4312:	66 23       	and	r22, r22
    4314:	71 f0       	breq	.+28     	; 0x4332 <__floatsisf+0x74>
    4316:	96 e8       	ldi	r25, 0x86	; 134
    4318:	86 2f       	mov	r24, r22
    431a:	70 e0       	ldi	r23, 0x00	; 0
    431c:	60 e0       	ldi	r22, 0x00	; 0
    431e:	2a f0       	brmi	.+10     	; 0x432a <__floatsisf+0x6c>
    4320:	9a 95       	dec	r25
    4322:	66 0f       	add	r22, r22
    4324:	77 1f       	adc	r23, r23
    4326:	88 1f       	adc	r24, r24
    4328:	da f7       	brpl	.-10     	; 0x4320 <__floatsisf+0x62>
    432a:	88 0f       	add	r24, r24
    432c:	96 95       	lsr	r25
    432e:	87 95       	ror	r24
    4330:	97 f9       	bld	r25, 7
    4332:	08 95       	ret

00004334 <__fp_cmp>:
    4334:	99 0f       	add	r25, r25
    4336:	00 08       	sbc	r0, r0
    4338:	55 0f       	add	r21, r21
    433a:	aa 0b       	sbc	r26, r26
    433c:	e0 e8       	ldi	r30, 0x80	; 128
    433e:	fe ef       	ldi	r31, 0xFE	; 254
    4340:	16 16       	cp	r1, r22
    4342:	17 06       	cpc	r1, r23
    4344:	e8 07       	cpc	r30, r24
    4346:	f9 07       	cpc	r31, r25
    4348:	c0 f0       	brcs	.+48     	; 0x437a <__fp_cmp+0x46>
    434a:	12 16       	cp	r1, r18
    434c:	13 06       	cpc	r1, r19
    434e:	e4 07       	cpc	r30, r20
    4350:	f5 07       	cpc	r31, r21
    4352:	98 f0       	brcs	.+38     	; 0x437a <__fp_cmp+0x46>
    4354:	62 1b       	sub	r22, r18
    4356:	73 0b       	sbc	r23, r19
    4358:	84 0b       	sbc	r24, r20
    435a:	95 0b       	sbc	r25, r21
    435c:	39 f4       	brne	.+14     	; 0x436c <__fp_cmp+0x38>
    435e:	0a 26       	eor	r0, r26
    4360:	61 f0       	breq	.+24     	; 0x437a <__fp_cmp+0x46>
    4362:	23 2b       	or	r18, r19
    4364:	24 2b       	or	r18, r20
    4366:	25 2b       	or	r18, r21
    4368:	21 f4       	brne	.+8      	; 0x4372 <__fp_cmp+0x3e>
    436a:	08 95       	ret
    436c:	0a 26       	eor	r0, r26
    436e:	09 f4       	brne	.+2      	; 0x4372 <__fp_cmp+0x3e>
    4370:	a1 40       	sbci	r26, 0x01	; 1
    4372:	a6 95       	lsr	r26
    4374:	8f ef       	ldi	r24, 0xFF	; 255
    4376:	81 1d       	adc	r24, r1
    4378:	81 1d       	adc	r24, r1
    437a:	08 95       	ret

0000437c <__fp_inf>:
    437c:	97 f9       	bld	r25, 7
    437e:	9f 67       	ori	r25, 0x7F	; 127
    4380:	80 e8       	ldi	r24, 0x80	; 128
    4382:	70 e0       	ldi	r23, 0x00	; 0
    4384:	60 e0       	ldi	r22, 0x00	; 0
    4386:	08 95       	ret

00004388 <__fp_nan>:
    4388:	9f ef       	ldi	r25, 0xFF	; 255
    438a:	80 ec       	ldi	r24, 0xC0	; 192
    438c:	08 95       	ret

0000438e <__fp_pscA>:
    438e:	00 24       	eor	r0, r0
    4390:	0a 94       	dec	r0
    4392:	16 16       	cp	r1, r22
    4394:	17 06       	cpc	r1, r23
    4396:	18 06       	cpc	r1, r24
    4398:	09 06       	cpc	r0, r25
    439a:	08 95       	ret

0000439c <__fp_pscB>:
    439c:	00 24       	eor	r0, r0
    439e:	0a 94       	dec	r0
    43a0:	12 16       	cp	r1, r18
    43a2:	13 06       	cpc	r1, r19
    43a4:	14 06       	cpc	r1, r20
    43a6:	05 06       	cpc	r0, r21
    43a8:	08 95       	ret

000043aa <__fp_round>:
    43aa:	09 2e       	mov	r0, r25
    43ac:	03 94       	inc	r0
    43ae:	00 0c       	add	r0, r0
    43b0:	11 f4       	brne	.+4      	; 0x43b6 <__fp_round+0xc>
    43b2:	88 23       	and	r24, r24
    43b4:	52 f0       	brmi	.+20     	; 0x43ca <__fp_round+0x20>
    43b6:	bb 0f       	add	r27, r27
    43b8:	40 f4       	brcc	.+16     	; 0x43ca <__fp_round+0x20>
    43ba:	bf 2b       	or	r27, r31
    43bc:	11 f4       	brne	.+4      	; 0x43c2 <__fp_round+0x18>
    43be:	60 ff       	sbrs	r22, 0
    43c0:	04 c0       	rjmp	.+8      	; 0x43ca <__fp_round+0x20>
    43c2:	6f 5f       	subi	r22, 0xFF	; 255
    43c4:	7f 4f       	sbci	r23, 0xFF	; 255
    43c6:	8f 4f       	sbci	r24, 0xFF	; 255
    43c8:	9f 4f       	sbci	r25, 0xFF	; 255
    43ca:	08 95       	ret

000043cc <__fp_split3>:
    43cc:	57 fd       	sbrc	r21, 7
    43ce:	90 58       	subi	r25, 0x80	; 128
    43d0:	44 0f       	add	r20, r20
    43d2:	55 1f       	adc	r21, r21
    43d4:	59 f0       	breq	.+22     	; 0x43ec <__fp_splitA+0x10>
    43d6:	5f 3f       	cpi	r21, 0xFF	; 255
    43d8:	71 f0       	breq	.+28     	; 0x43f6 <__fp_splitA+0x1a>
    43da:	47 95       	ror	r20

000043dc <__fp_splitA>:
    43dc:	88 0f       	add	r24, r24
    43de:	97 fb       	bst	r25, 7
    43e0:	99 1f       	adc	r25, r25
    43e2:	61 f0       	breq	.+24     	; 0x43fc <__fp_splitA+0x20>
    43e4:	9f 3f       	cpi	r25, 0xFF	; 255
    43e6:	79 f0       	breq	.+30     	; 0x4406 <__fp_splitA+0x2a>
    43e8:	87 95       	ror	r24
    43ea:	08 95       	ret
    43ec:	12 16       	cp	r1, r18
    43ee:	13 06       	cpc	r1, r19
    43f0:	14 06       	cpc	r1, r20
    43f2:	55 1f       	adc	r21, r21
    43f4:	f2 cf       	rjmp	.-28     	; 0x43da <__fp_split3+0xe>
    43f6:	46 95       	lsr	r20
    43f8:	f1 df       	rcall	.-30     	; 0x43dc <__fp_splitA>
    43fa:	08 c0       	rjmp	.+16     	; 0x440c <__fp_splitA+0x30>
    43fc:	16 16       	cp	r1, r22
    43fe:	17 06       	cpc	r1, r23
    4400:	18 06       	cpc	r1, r24
    4402:	99 1f       	adc	r25, r25
    4404:	f1 cf       	rjmp	.-30     	; 0x43e8 <__fp_splitA+0xc>
    4406:	86 95       	lsr	r24
    4408:	71 05       	cpc	r23, r1
    440a:	61 05       	cpc	r22, r1
    440c:	08 94       	sec
    440e:	08 95       	ret

00004410 <__fp_zero>:
    4410:	e8 94       	clt

00004412 <__fp_szero>:
    4412:	bb 27       	eor	r27, r27
    4414:	66 27       	eor	r22, r22
    4416:	77 27       	eor	r23, r23
    4418:	cb 01       	movw	r24, r22
    441a:	97 f9       	bld	r25, 7
    441c:	08 95       	ret

0000441e <__gesf2>:
    441e:	0e 94 9a 21 	call	0x4334	; 0x4334 <__fp_cmp>
    4422:	08 f4       	brcc	.+2      	; 0x4426 <__gesf2+0x8>
    4424:	8f ef       	ldi	r24, 0xFF	; 255
    4426:	08 95       	ret

00004428 <__mulsf3>:
    4428:	0e 94 27 22 	call	0x444e	; 0x444e <__mulsf3x>
    442c:	0c 94 d5 21 	jmp	0x43aa	; 0x43aa <__fp_round>
    4430:	0e 94 c7 21 	call	0x438e	; 0x438e <__fp_pscA>
    4434:	38 f0       	brcs	.+14     	; 0x4444 <__mulsf3+0x1c>
    4436:	0e 94 ce 21 	call	0x439c	; 0x439c <__fp_pscB>
    443a:	20 f0       	brcs	.+8      	; 0x4444 <__mulsf3+0x1c>
    443c:	95 23       	and	r25, r21
    443e:	11 f0       	breq	.+4      	; 0x4444 <__mulsf3+0x1c>
    4440:	0c 94 be 21 	jmp	0x437c	; 0x437c <__fp_inf>
    4444:	0c 94 c4 21 	jmp	0x4388	; 0x4388 <__fp_nan>
    4448:	11 24       	eor	r1, r1
    444a:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__fp_szero>

0000444e <__mulsf3x>:
    444e:	0e 94 e6 21 	call	0x43cc	; 0x43cc <__fp_split3>
    4452:	70 f3       	brcs	.-36     	; 0x4430 <__mulsf3+0x8>

00004454 <__mulsf3_pse>:
    4454:	95 9f       	mul	r25, r21
    4456:	c1 f3       	breq	.-16     	; 0x4448 <__mulsf3+0x20>
    4458:	95 0f       	add	r25, r21
    445a:	50 e0       	ldi	r21, 0x00	; 0
    445c:	55 1f       	adc	r21, r21
    445e:	62 9f       	mul	r22, r18
    4460:	f0 01       	movw	r30, r0
    4462:	72 9f       	mul	r23, r18
    4464:	bb 27       	eor	r27, r27
    4466:	f0 0d       	add	r31, r0
    4468:	b1 1d       	adc	r27, r1
    446a:	63 9f       	mul	r22, r19
    446c:	aa 27       	eor	r26, r26
    446e:	f0 0d       	add	r31, r0
    4470:	b1 1d       	adc	r27, r1
    4472:	aa 1f       	adc	r26, r26
    4474:	64 9f       	mul	r22, r20
    4476:	66 27       	eor	r22, r22
    4478:	b0 0d       	add	r27, r0
    447a:	a1 1d       	adc	r26, r1
    447c:	66 1f       	adc	r22, r22
    447e:	82 9f       	mul	r24, r18
    4480:	22 27       	eor	r18, r18
    4482:	b0 0d       	add	r27, r0
    4484:	a1 1d       	adc	r26, r1
    4486:	62 1f       	adc	r22, r18
    4488:	73 9f       	mul	r23, r19
    448a:	b0 0d       	add	r27, r0
    448c:	a1 1d       	adc	r26, r1
    448e:	62 1f       	adc	r22, r18
    4490:	83 9f       	mul	r24, r19
    4492:	a0 0d       	add	r26, r0
    4494:	61 1d       	adc	r22, r1
    4496:	22 1f       	adc	r18, r18
    4498:	74 9f       	mul	r23, r20
    449a:	33 27       	eor	r19, r19
    449c:	a0 0d       	add	r26, r0
    449e:	61 1d       	adc	r22, r1
    44a0:	23 1f       	adc	r18, r19
    44a2:	84 9f       	mul	r24, r20
    44a4:	60 0d       	add	r22, r0
    44a6:	21 1d       	adc	r18, r1
    44a8:	82 2f       	mov	r24, r18
    44aa:	76 2f       	mov	r23, r22
    44ac:	6a 2f       	mov	r22, r26
    44ae:	11 24       	eor	r1, r1
    44b0:	9f 57       	subi	r25, 0x7F	; 127
    44b2:	50 40       	sbci	r21, 0x00	; 0
    44b4:	9a f0       	brmi	.+38     	; 0x44dc <__mulsf3_pse+0x88>
    44b6:	f1 f0       	breq	.+60     	; 0x44f4 <__mulsf3_pse+0xa0>
    44b8:	88 23       	and	r24, r24
    44ba:	4a f0       	brmi	.+18     	; 0x44ce <__mulsf3_pse+0x7a>
    44bc:	ee 0f       	add	r30, r30
    44be:	ff 1f       	adc	r31, r31
    44c0:	bb 1f       	adc	r27, r27
    44c2:	66 1f       	adc	r22, r22
    44c4:	77 1f       	adc	r23, r23
    44c6:	88 1f       	adc	r24, r24
    44c8:	91 50       	subi	r25, 0x01	; 1
    44ca:	50 40       	sbci	r21, 0x00	; 0
    44cc:	a9 f7       	brne	.-22     	; 0x44b8 <__mulsf3_pse+0x64>
    44ce:	9e 3f       	cpi	r25, 0xFE	; 254
    44d0:	51 05       	cpc	r21, r1
    44d2:	80 f0       	brcs	.+32     	; 0x44f4 <__mulsf3_pse+0xa0>
    44d4:	0c 94 be 21 	jmp	0x437c	; 0x437c <__fp_inf>
    44d8:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__fp_szero>
    44dc:	5f 3f       	cpi	r21, 0xFF	; 255
    44de:	e4 f3       	brlt	.-8      	; 0x44d8 <__mulsf3_pse+0x84>
    44e0:	98 3e       	cpi	r25, 0xE8	; 232
    44e2:	d4 f3       	brlt	.-12     	; 0x44d8 <__mulsf3_pse+0x84>
    44e4:	86 95       	lsr	r24
    44e6:	77 95       	ror	r23
    44e8:	67 95       	ror	r22
    44ea:	b7 95       	ror	r27
    44ec:	f7 95       	ror	r31
    44ee:	e7 95       	ror	r30
    44f0:	9f 5f       	subi	r25, 0xFF	; 255
    44f2:	c1 f7       	brne	.-16     	; 0x44e4 <__mulsf3_pse+0x90>
    44f4:	fe 2b       	or	r31, r30
    44f6:	88 0f       	add	r24, r24
    44f8:	91 1d       	adc	r25, r1
    44fa:	96 95       	lsr	r25
    44fc:	87 95       	ror	r24
    44fe:	97 f9       	bld	r25, 7
    4500:	08 95       	ret

00004502 <vfprintf>:
    4502:	a0 e1       	ldi	r26, 0x10	; 16
    4504:	b0 e0       	ldi	r27, 0x00	; 0
    4506:	e7 e8       	ldi	r30, 0x87	; 135
    4508:	f2 e2       	ldi	r31, 0x22	; 34
    450a:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <__prologue_saves__>
    450e:	7c 01       	movw	r14, r24
    4510:	1b 01       	movw	r2, r22
    4512:	6a 01       	movw	r12, r20
    4514:	fc 01       	movw	r30, r24
    4516:	16 82       	std	Z+6, r1	; 0x06
    4518:	17 82       	std	Z+7, r1	; 0x07
    451a:	83 81       	ldd	r24, Z+3	; 0x03
    451c:	81 ff       	sbrs	r24, 1
    451e:	44 c3       	rjmp	.+1672   	; 0x4ba8 <vfprintf+0x6a6>
    4520:	9e 01       	movw	r18, r28
    4522:	2f 5f       	subi	r18, 0xFF	; 255
    4524:	3f 4f       	sbci	r19, 0xFF	; 255
    4526:	39 01       	movw	r6, r18
    4528:	f7 01       	movw	r30, r14
    452a:	93 81       	ldd	r25, Z+3	; 0x03
    452c:	f1 01       	movw	r30, r2
    452e:	93 fd       	sbrc	r25, 3
    4530:	85 91       	lpm	r24, Z+
    4532:	93 ff       	sbrs	r25, 3
    4534:	81 91       	ld	r24, Z+
    4536:	1f 01       	movw	r2, r30
    4538:	88 23       	and	r24, r24
    453a:	09 f4       	brne	.+2      	; 0x453e <vfprintf+0x3c>
    453c:	31 c3       	rjmp	.+1634   	; 0x4ba0 <vfprintf+0x69e>
    453e:	85 32       	cpi	r24, 0x25	; 37
    4540:	39 f4       	brne	.+14     	; 0x4550 <vfprintf+0x4e>
    4542:	93 fd       	sbrc	r25, 3
    4544:	85 91       	lpm	r24, Z+
    4546:	93 ff       	sbrs	r25, 3
    4548:	81 91       	ld	r24, Z+
    454a:	1f 01       	movw	r2, r30
    454c:	85 32       	cpi	r24, 0x25	; 37
    454e:	39 f4       	brne	.+14     	; 0x455e <vfprintf+0x5c>
    4550:	b7 01       	movw	r22, r14
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    4558:	56 01       	movw	r10, r12
    455a:	65 01       	movw	r12, r10
    455c:	e5 cf       	rjmp	.-54     	; 0x4528 <vfprintf+0x26>
    455e:	10 e0       	ldi	r17, 0x00	; 0
    4560:	51 2c       	mov	r5, r1
    4562:	91 2c       	mov	r9, r1
    4564:	ff e1       	ldi	r31, 0x1F	; 31
    4566:	f9 15       	cp	r31, r9
    4568:	d8 f0       	brcs	.+54     	; 0x45a0 <vfprintf+0x9e>
    456a:	8b 32       	cpi	r24, 0x2B	; 43
    456c:	79 f0       	breq	.+30     	; 0x458c <vfprintf+0x8a>
    456e:	38 f4       	brcc	.+14     	; 0x457e <vfprintf+0x7c>
    4570:	80 32       	cpi	r24, 0x20	; 32
    4572:	79 f0       	breq	.+30     	; 0x4592 <vfprintf+0x90>
    4574:	83 32       	cpi	r24, 0x23	; 35
    4576:	a1 f4       	brne	.+40     	; 0x45a0 <vfprintf+0x9e>
    4578:	f9 2d       	mov	r31, r9
    457a:	f0 61       	ori	r31, 0x10	; 16
    457c:	2e c0       	rjmp	.+92     	; 0x45da <vfprintf+0xd8>
    457e:	8d 32       	cpi	r24, 0x2D	; 45
    4580:	61 f0       	breq	.+24     	; 0x459a <vfprintf+0x98>
    4582:	80 33       	cpi	r24, 0x30	; 48
    4584:	69 f4       	brne	.+26     	; 0x45a0 <vfprintf+0x9e>
    4586:	29 2d       	mov	r18, r9
    4588:	21 60       	ori	r18, 0x01	; 1
    458a:	2d c0       	rjmp	.+90     	; 0x45e6 <vfprintf+0xe4>
    458c:	39 2d       	mov	r19, r9
    458e:	32 60       	ori	r19, 0x02	; 2
    4590:	93 2e       	mov	r9, r19
    4592:	89 2d       	mov	r24, r9
    4594:	84 60       	ori	r24, 0x04	; 4
    4596:	98 2e       	mov	r9, r24
    4598:	2a c0       	rjmp	.+84     	; 0x45ee <vfprintf+0xec>
    459a:	e9 2d       	mov	r30, r9
    459c:	e8 60       	ori	r30, 0x08	; 8
    459e:	15 c0       	rjmp	.+42     	; 0x45ca <vfprintf+0xc8>
    45a0:	97 fc       	sbrc	r9, 7
    45a2:	2d c0       	rjmp	.+90     	; 0x45fe <vfprintf+0xfc>
    45a4:	20 ed       	ldi	r18, 0xD0	; 208
    45a6:	28 0f       	add	r18, r24
    45a8:	2a 30       	cpi	r18, 0x0A	; 10
    45aa:	88 f4       	brcc	.+34     	; 0x45ce <vfprintf+0xcc>
    45ac:	96 fe       	sbrs	r9, 6
    45ae:	06 c0       	rjmp	.+12     	; 0x45bc <vfprintf+0xba>
    45b0:	3a e0       	ldi	r19, 0x0A	; 10
    45b2:	13 9f       	mul	r17, r19
    45b4:	20 0d       	add	r18, r0
    45b6:	11 24       	eor	r1, r1
    45b8:	12 2f       	mov	r17, r18
    45ba:	19 c0       	rjmp	.+50     	; 0x45ee <vfprintf+0xec>
    45bc:	8a e0       	ldi	r24, 0x0A	; 10
    45be:	58 9e       	mul	r5, r24
    45c0:	20 0d       	add	r18, r0
    45c2:	11 24       	eor	r1, r1
    45c4:	52 2e       	mov	r5, r18
    45c6:	e9 2d       	mov	r30, r9
    45c8:	e0 62       	ori	r30, 0x20	; 32
    45ca:	9e 2e       	mov	r9, r30
    45cc:	10 c0       	rjmp	.+32     	; 0x45ee <vfprintf+0xec>
    45ce:	8e 32       	cpi	r24, 0x2E	; 46
    45d0:	31 f4       	brne	.+12     	; 0x45de <vfprintf+0xdc>
    45d2:	96 fc       	sbrc	r9, 6
    45d4:	e5 c2       	rjmp	.+1482   	; 0x4ba0 <vfprintf+0x69e>
    45d6:	f9 2d       	mov	r31, r9
    45d8:	f0 64       	ori	r31, 0x40	; 64
    45da:	9f 2e       	mov	r9, r31
    45dc:	08 c0       	rjmp	.+16     	; 0x45ee <vfprintf+0xec>
    45de:	8c 36       	cpi	r24, 0x6C	; 108
    45e0:	21 f4       	brne	.+8      	; 0x45ea <vfprintf+0xe8>
    45e2:	29 2d       	mov	r18, r9
    45e4:	20 68       	ori	r18, 0x80	; 128
    45e6:	92 2e       	mov	r9, r18
    45e8:	02 c0       	rjmp	.+4      	; 0x45ee <vfprintf+0xec>
    45ea:	88 36       	cpi	r24, 0x68	; 104
    45ec:	41 f4       	brne	.+16     	; 0x45fe <vfprintf+0xfc>
    45ee:	f1 01       	movw	r30, r2
    45f0:	93 fd       	sbrc	r25, 3
    45f2:	85 91       	lpm	r24, Z+
    45f4:	93 ff       	sbrs	r25, 3
    45f6:	81 91       	ld	r24, Z+
    45f8:	1f 01       	movw	r2, r30
    45fa:	81 11       	cpse	r24, r1
    45fc:	b3 cf       	rjmp	.-154    	; 0x4564 <vfprintf+0x62>
    45fe:	9b eb       	ldi	r25, 0xBB	; 187
    4600:	98 0f       	add	r25, r24
    4602:	93 30       	cpi	r25, 0x03	; 3
    4604:	20 f4       	brcc	.+8      	; 0x460e <vfprintf+0x10c>
    4606:	99 2d       	mov	r25, r9
    4608:	90 61       	ori	r25, 0x10	; 16
    460a:	80 5e       	subi	r24, 0xE0	; 224
    460c:	07 c0       	rjmp	.+14     	; 0x461c <vfprintf+0x11a>
    460e:	9b e9       	ldi	r25, 0x9B	; 155
    4610:	98 0f       	add	r25, r24
    4612:	93 30       	cpi	r25, 0x03	; 3
    4614:	08 f0       	brcs	.+2      	; 0x4618 <vfprintf+0x116>
    4616:	66 c1       	rjmp	.+716    	; 0x48e4 <vfprintf+0x3e2>
    4618:	99 2d       	mov	r25, r9
    461a:	9f 7e       	andi	r25, 0xEF	; 239
    461c:	96 ff       	sbrs	r25, 6
    461e:	16 e0       	ldi	r17, 0x06	; 6
    4620:	9f 73       	andi	r25, 0x3F	; 63
    4622:	99 2e       	mov	r9, r25
    4624:	85 36       	cpi	r24, 0x65	; 101
    4626:	19 f4       	brne	.+6      	; 0x462e <vfprintf+0x12c>
    4628:	90 64       	ori	r25, 0x40	; 64
    462a:	99 2e       	mov	r9, r25
    462c:	08 c0       	rjmp	.+16     	; 0x463e <vfprintf+0x13c>
    462e:	86 36       	cpi	r24, 0x66	; 102
    4630:	21 f4       	brne	.+8      	; 0x463a <vfprintf+0x138>
    4632:	39 2f       	mov	r19, r25
    4634:	30 68       	ori	r19, 0x80	; 128
    4636:	93 2e       	mov	r9, r19
    4638:	02 c0       	rjmp	.+4      	; 0x463e <vfprintf+0x13c>
    463a:	11 11       	cpse	r17, r1
    463c:	11 50       	subi	r17, 0x01	; 1
    463e:	97 fe       	sbrs	r9, 7
    4640:	07 c0       	rjmp	.+14     	; 0x4650 <vfprintf+0x14e>
    4642:	1c 33       	cpi	r17, 0x3C	; 60
    4644:	50 f4       	brcc	.+20     	; 0x465a <vfprintf+0x158>
    4646:	44 24       	eor	r4, r4
    4648:	43 94       	inc	r4
    464a:	41 0e       	add	r4, r17
    464c:	27 e0       	ldi	r18, 0x07	; 7
    464e:	0b c0       	rjmp	.+22     	; 0x4666 <vfprintf+0x164>
    4650:	18 30       	cpi	r17, 0x08	; 8
    4652:	38 f0       	brcs	.+14     	; 0x4662 <vfprintf+0x160>
    4654:	27 e0       	ldi	r18, 0x07	; 7
    4656:	17 e0       	ldi	r17, 0x07	; 7
    4658:	05 c0       	rjmp	.+10     	; 0x4664 <vfprintf+0x162>
    465a:	27 e0       	ldi	r18, 0x07	; 7
    465c:	9c e3       	ldi	r25, 0x3C	; 60
    465e:	49 2e       	mov	r4, r25
    4660:	02 c0       	rjmp	.+4      	; 0x4666 <vfprintf+0x164>
    4662:	21 2f       	mov	r18, r17
    4664:	41 2c       	mov	r4, r1
    4666:	56 01       	movw	r10, r12
    4668:	84 e0       	ldi	r24, 0x04	; 4
    466a:	a8 0e       	add	r10, r24
    466c:	b1 1c       	adc	r11, r1
    466e:	f6 01       	movw	r30, r12
    4670:	60 81       	ld	r22, Z
    4672:	71 81       	ldd	r23, Z+1	; 0x01
    4674:	82 81       	ldd	r24, Z+2	; 0x02
    4676:	93 81       	ldd	r25, Z+3	; 0x03
    4678:	04 2d       	mov	r16, r4
    467a:	a3 01       	movw	r20, r6
    467c:	0e 94 01 27 	call	0x4e02	; 0x4e02 <__ftoa_engine>
    4680:	6c 01       	movw	r12, r24
    4682:	f9 81       	ldd	r31, Y+1	; 0x01
    4684:	fc 87       	std	Y+12, r31	; 0x0c
    4686:	f0 ff       	sbrs	r31, 0
    4688:	02 c0       	rjmp	.+4      	; 0x468e <vfprintf+0x18c>
    468a:	f3 ff       	sbrs	r31, 3
    468c:	06 c0       	rjmp	.+12     	; 0x469a <vfprintf+0x198>
    468e:	91 fc       	sbrc	r9, 1
    4690:	06 c0       	rjmp	.+12     	; 0x469e <vfprintf+0x19c>
    4692:	92 fe       	sbrs	r9, 2
    4694:	06 c0       	rjmp	.+12     	; 0x46a2 <vfprintf+0x1a0>
    4696:	00 e2       	ldi	r16, 0x20	; 32
    4698:	05 c0       	rjmp	.+10     	; 0x46a4 <vfprintf+0x1a2>
    469a:	0d e2       	ldi	r16, 0x2D	; 45
    469c:	03 c0       	rjmp	.+6      	; 0x46a4 <vfprintf+0x1a2>
    469e:	0b e2       	ldi	r16, 0x2B	; 43
    46a0:	01 c0       	rjmp	.+2      	; 0x46a4 <vfprintf+0x1a2>
    46a2:	00 e0       	ldi	r16, 0x00	; 0
    46a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    46a6:	8c 70       	andi	r24, 0x0C	; 12
    46a8:	19 f0       	breq	.+6      	; 0x46b0 <vfprintf+0x1ae>
    46aa:	01 11       	cpse	r16, r1
    46ac:	5a c2       	rjmp	.+1204   	; 0x4b62 <vfprintf+0x660>
    46ae:	9b c2       	rjmp	.+1334   	; 0x4be6 <vfprintf+0x6e4>
    46b0:	97 fe       	sbrs	r9, 7
    46b2:	10 c0       	rjmp	.+32     	; 0x46d4 <vfprintf+0x1d2>
    46b4:	4c 0c       	add	r4, r12
    46b6:	fc 85       	ldd	r31, Y+12	; 0x0c
    46b8:	f4 ff       	sbrs	r31, 4
    46ba:	04 c0       	rjmp	.+8      	; 0x46c4 <vfprintf+0x1c2>
    46bc:	8a 81       	ldd	r24, Y+2	; 0x02
    46be:	81 33       	cpi	r24, 0x31	; 49
    46c0:	09 f4       	brne	.+2      	; 0x46c4 <vfprintf+0x1c2>
    46c2:	4a 94       	dec	r4
    46c4:	14 14       	cp	r1, r4
    46c6:	74 f5       	brge	.+92     	; 0x4724 <vfprintf+0x222>
    46c8:	28 e0       	ldi	r18, 0x08	; 8
    46ca:	24 15       	cp	r18, r4
    46cc:	78 f5       	brcc	.+94     	; 0x472c <vfprintf+0x22a>
    46ce:	88 e0       	ldi	r24, 0x08	; 8
    46d0:	48 2e       	mov	r4, r24
    46d2:	2c c0       	rjmp	.+88     	; 0x472c <vfprintf+0x22a>
    46d4:	96 fc       	sbrc	r9, 6
    46d6:	2a c0       	rjmp	.+84     	; 0x472c <vfprintf+0x22a>
    46d8:	81 2f       	mov	r24, r17
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	8c 15       	cp	r24, r12
    46de:	9d 05       	cpc	r25, r13
    46e0:	9c f0       	brlt	.+38     	; 0x4708 <vfprintf+0x206>
    46e2:	3c ef       	ldi	r19, 0xFC	; 252
    46e4:	c3 16       	cp	r12, r19
    46e6:	3f ef       	ldi	r19, 0xFF	; 255
    46e8:	d3 06       	cpc	r13, r19
    46ea:	74 f0       	brlt	.+28     	; 0x4708 <vfprintf+0x206>
    46ec:	89 2d       	mov	r24, r9
    46ee:	80 68       	ori	r24, 0x80	; 128
    46f0:	98 2e       	mov	r9, r24
    46f2:	0a c0       	rjmp	.+20     	; 0x4708 <vfprintf+0x206>
    46f4:	e2 e0       	ldi	r30, 0x02	; 2
    46f6:	f0 e0       	ldi	r31, 0x00	; 0
    46f8:	ec 0f       	add	r30, r28
    46fa:	fd 1f       	adc	r31, r29
    46fc:	e1 0f       	add	r30, r17
    46fe:	f1 1d       	adc	r31, r1
    4700:	80 81       	ld	r24, Z
    4702:	80 33       	cpi	r24, 0x30	; 48
    4704:	19 f4       	brne	.+6      	; 0x470c <vfprintf+0x20a>
    4706:	11 50       	subi	r17, 0x01	; 1
    4708:	11 11       	cpse	r17, r1
    470a:	f4 cf       	rjmp	.-24     	; 0x46f4 <vfprintf+0x1f2>
    470c:	97 fe       	sbrs	r9, 7
    470e:	0e c0       	rjmp	.+28     	; 0x472c <vfprintf+0x22a>
    4710:	44 24       	eor	r4, r4
    4712:	43 94       	inc	r4
    4714:	41 0e       	add	r4, r17
    4716:	81 2f       	mov	r24, r17
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	c8 16       	cp	r12, r24
    471c:	d9 06       	cpc	r13, r25
    471e:	2c f4       	brge	.+10     	; 0x472a <vfprintf+0x228>
    4720:	1c 19       	sub	r17, r12
    4722:	04 c0       	rjmp	.+8      	; 0x472c <vfprintf+0x22a>
    4724:	44 24       	eor	r4, r4
    4726:	43 94       	inc	r4
    4728:	01 c0       	rjmp	.+2      	; 0x472c <vfprintf+0x22a>
    472a:	10 e0       	ldi	r17, 0x00	; 0
    472c:	97 fe       	sbrs	r9, 7
    472e:	06 c0       	rjmp	.+12     	; 0x473c <vfprintf+0x23a>
    4730:	1c 14       	cp	r1, r12
    4732:	1d 04       	cpc	r1, r13
    4734:	34 f4       	brge	.+12     	; 0x4742 <vfprintf+0x240>
    4736:	c6 01       	movw	r24, r12
    4738:	01 96       	adiw	r24, 0x01	; 1
    473a:	05 c0       	rjmp	.+10     	; 0x4746 <vfprintf+0x244>
    473c:	85 e0       	ldi	r24, 0x05	; 5
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	02 c0       	rjmp	.+4      	; 0x4746 <vfprintf+0x244>
    4742:	81 e0       	ldi	r24, 0x01	; 1
    4744:	90 e0       	ldi	r25, 0x00	; 0
    4746:	01 11       	cpse	r16, r1
    4748:	01 96       	adiw	r24, 0x01	; 1
    474a:	11 23       	and	r17, r17
    474c:	31 f0       	breq	.+12     	; 0x475a <vfprintf+0x258>
    474e:	21 2f       	mov	r18, r17
    4750:	30 e0       	ldi	r19, 0x00	; 0
    4752:	2f 5f       	subi	r18, 0xFF	; 255
    4754:	3f 4f       	sbci	r19, 0xFF	; 255
    4756:	82 0f       	add	r24, r18
    4758:	93 1f       	adc	r25, r19
    475a:	25 2d       	mov	r18, r5
    475c:	30 e0       	ldi	r19, 0x00	; 0
    475e:	82 17       	cp	r24, r18
    4760:	93 07       	cpc	r25, r19
    4762:	14 f4       	brge	.+4      	; 0x4768 <vfprintf+0x266>
    4764:	58 1a       	sub	r5, r24
    4766:	01 c0       	rjmp	.+2      	; 0x476a <vfprintf+0x268>
    4768:	51 2c       	mov	r5, r1
    476a:	89 2d       	mov	r24, r9
    476c:	89 70       	andi	r24, 0x09	; 9
    476e:	49 f4       	brne	.+18     	; 0x4782 <vfprintf+0x280>
    4770:	55 20       	and	r5, r5
    4772:	39 f0       	breq	.+14     	; 0x4782 <vfprintf+0x280>
    4774:	b7 01       	movw	r22, r14
    4776:	80 e2       	ldi	r24, 0x20	; 32
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    477e:	5a 94       	dec	r5
    4780:	f7 cf       	rjmp	.-18     	; 0x4770 <vfprintf+0x26e>
    4782:	00 23       	and	r16, r16
    4784:	29 f0       	breq	.+10     	; 0x4790 <vfprintf+0x28e>
    4786:	b7 01       	movw	r22, r14
    4788:	80 2f       	mov	r24, r16
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    4790:	93 fc       	sbrc	r9, 3
    4792:	09 c0       	rjmp	.+18     	; 0x47a6 <vfprintf+0x2a4>
    4794:	55 20       	and	r5, r5
    4796:	39 f0       	breq	.+14     	; 0x47a6 <vfprintf+0x2a4>
    4798:	b7 01       	movw	r22, r14
    479a:	80 e3       	ldi	r24, 0x30	; 48
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    47a2:	5a 94       	dec	r5
    47a4:	f7 cf       	rjmp	.-18     	; 0x4794 <vfprintf+0x292>
    47a6:	97 fe       	sbrs	r9, 7
    47a8:	4c c0       	rjmp	.+152    	; 0x4842 <vfprintf+0x340>
    47aa:	46 01       	movw	r8, r12
    47ac:	d7 fe       	sbrs	r13, 7
    47ae:	02 c0       	rjmp	.+4      	; 0x47b4 <vfprintf+0x2b2>
    47b0:	81 2c       	mov	r8, r1
    47b2:	91 2c       	mov	r9, r1
    47b4:	c6 01       	movw	r24, r12
    47b6:	88 19       	sub	r24, r8
    47b8:	99 09       	sbc	r25, r9
    47ba:	f3 01       	movw	r30, r6
    47bc:	e8 0f       	add	r30, r24
    47be:	f9 1f       	adc	r31, r25
    47c0:	ed 87       	std	Y+13, r30	; 0x0d
    47c2:	fe 87       	std	Y+14, r31	; 0x0e
    47c4:	96 01       	movw	r18, r12
    47c6:	24 19       	sub	r18, r4
    47c8:	31 09       	sbc	r19, r1
    47ca:	2f 87       	std	Y+15, r18	; 0x0f
    47cc:	38 8b       	std	Y+16, r19	; 0x10
    47ce:	01 2f       	mov	r16, r17
    47d0:	10 e0       	ldi	r17, 0x00	; 0
    47d2:	11 95       	neg	r17
    47d4:	01 95       	neg	r16
    47d6:	11 09       	sbc	r17, r1
    47d8:	3f ef       	ldi	r19, 0xFF	; 255
    47da:	83 16       	cp	r8, r19
    47dc:	93 06       	cpc	r9, r19
    47de:	29 f4       	brne	.+10     	; 0x47ea <vfprintf+0x2e8>
    47e0:	b7 01       	movw	r22, r14
    47e2:	8e e2       	ldi	r24, 0x2E	; 46
    47e4:	90 e0       	ldi	r25, 0x00	; 0
    47e6:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    47ea:	c8 14       	cp	r12, r8
    47ec:	d9 04       	cpc	r13, r9
    47ee:	4c f0       	brlt	.+18     	; 0x4802 <vfprintf+0x300>
    47f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    47f2:	98 89       	ldd	r25, Y+16	; 0x10
    47f4:	88 15       	cp	r24, r8
    47f6:	99 05       	cpc	r25, r9
    47f8:	24 f4       	brge	.+8      	; 0x4802 <vfprintf+0x300>
    47fa:	ed 85       	ldd	r30, Y+13	; 0x0d
    47fc:	fe 85       	ldd	r31, Y+14	; 0x0e
    47fe:	81 81       	ldd	r24, Z+1	; 0x01
    4800:	01 c0       	rjmp	.+2      	; 0x4804 <vfprintf+0x302>
    4802:	80 e3       	ldi	r24, 0x30	; 48
    4804:	f1 e0       	ldi	r31, 0x01	; 1
    4806:	8f 1a       	sub	r8, r31
    4808:	91 08       	sbc	r9, r1
    480a:	2d 85       	ldd	r18, Y+13	; 0x0d
    480c:	3e 85       	ldd	r19, Y+14	; 0x0e
    480e:	2f 5f       	subi	r18, 0xFF	; 255
    4810:	3f 4f       	sbci	r19, 0xFF	; 255
    4812:	2d 87       	std	Y+13, r18	; 0x0d
    4814:	3e 87       	std	Y+14, r19	; 0x0e
    4816:	80 16       	cp	r8, r16
    4818:	91 06       	cpc	r9, r17
    481a:	2c f0       	brlt	.+10     	; 0x4826 <vfprintf+0x324>
    481c:	b7 01       	movw	r22, r14
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    4824:	d9 cf       	rjmp	.-78     	; 0x47d8 <vfprintf+0x2d6>
    4826:	c8 14       	cp	r12, r8
    4828:	d9 04       	cpc	r13, r9
    482a:	41 f4       	brne	.+16     	; 0x483c <vfprintf+0x33a>
    482c:	9a 81       	ldd	r25, Y+2	; 0x02
    482e:	96 33       	cpi	r25, 0x36	; 54
    4830:	20 f4       	brcc	.+8      	; 0x483a <vfprintf+0x338>
    4832:	95 33       	cpi	r25, 0x35	; 53
    4834:	19 f4       	brne	.+6      	; 0x483c <vfprintf+0x33a>
    4836:	3c 85       	ldd	r19, Y+12	; 0x0c
    4838:	34 ff       	sbrs	r19, 4
    483a:	81 e3       	ldi	r24, 0x31	; 49
    483c:	b7 01       	movw	r22, r14
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	4e c0       	rjmp	.+156    	; 0x48de <vfprintf+0x3dc>
    4842:	8a 81       	ldd	r24, Y+2	; 0x02
    4844:	81 33       	cpi	r24, 0x31	; 49
    4846:	19 f0       	breq	.+6      	; 0x484e <vfprintf+0x34c>
    4848:	9c 85       	ldd	r25, Y+12	; 0x0c
    484a:	9f 7e       	andi	r25, 0xEF	; 239
    484c:	9c 87       	std	Y+12, r25	; 0x0c
    484e:	b7 01       	movw	r22, r14
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    4856:	11 11       	cpse	r17, r1
    4858:	05 c0       	rjmp	.+10     	; 0x4864 <vfprintf+0x362>
    485a:	94 fc       	sbrc	r9, 4
    485c:	18 c0       	rjmp	.+48     	; 0x488e <vfprintf+0x38c>
    485e:	85 e6       	ldi	r24, 0x65	; 101
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	17 c0       	rjmp	.+46     	; 0x4892 <vfprintf+0x390>
    4864:	b7 01       	movw	r22, r14
    4866:	8e e2       	ldi	r24, 0x2E	; 46
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    486e:	1e 5f       	subi	r17, 0xFE	; 254
    4870:	82 e0       	ldi	r24, 0x02	; 2
    4872:	01 e0       	ldi	r16, 0x01	; 1
    4874:	08 0f       	add	r16, r24
    4876:	f3 01       	movw	r30, r6
    4878:	e8 0f       	add	r30, r24
    487a:	f1 1d       	adc	r31, r1
    487c:	80 81       	ld	r24, Z
    487e:	b7 01       	movw	r22, r14
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    4886:	80 2f       	mov	r24, r16
    4888:	01 13       	cpse	r16, r17
    488a:	f3 cf       	rjmp	.-26     	; 0x4872 <vfprintf+0x370>
    488c:	e6 cf       	rjmp	.-52     	; 0x485a <vfprintf+0x358>
    488e:	85 e4       	ldi	r24, 0x45	; 69
    4890:	90 e0       	ldi	r25, 0x00	; 0
    4892:	b7 01       	movw	r22, r14
    4894:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    4898:	d7 fc       	sbrc	r13, 7
    489a:	06 c0       	rjmp	.+12     	; 0x48a8 <vfprintf+0x3a6>
    489c:	c1 14       	cp	r12, r1
    489e:	d1 04       	cpc	r13, r1
    48a0:	41 f4       	brne	.+16     	; 0x48b2 <vfprintf+0x3b0>
    48a2:	ec 85       	ldd	r30, Y+12	; 0x0c
    48a4:	e4 ff       	sbrs	r30, 4
    48a6:	05 c0       	rjmp	.+10     	; 0x48b2 <vfprintf+0x3b0>
    48a8:	d1 94       	neg	r13
    48aa:	c1 94       	neg	r12
    48ac:	d1 08       	sbc	r13, r1
    48ae:	8d e2       	ldi	r24, 0x2D	; 45
    48b0:	01 c0       	rjmp	.+2      	; 0x48b4 <vfprintf+0x3b2>
    48b2:	8b e2       	ldi	r24, 0x2B	; 43
    48b4:	b7 01       	movw	r22, r14
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    48bc:	80 e3       	ldi	r24, 0x30	; 48
    48be:	2a e0       	ldi	r18, 0x0A	; 10
    48c0:	c2 16       	cp	r12, r18
    48c2:	d1 04       	cpc	r13, r1
    48c4:	2c f0       	brlt	.+10     	; 0x48d0 <vfprintf+0x3ce>
    48c6:	8f 5f       	subi	r24, 0xFF	; 255
    48c8:	fa e0       	ldi	r31, 0x0A	; 10
    48ca:	cf 1a       	sub	r12, r31
    48cc:	d1 08       	sbc	r13, r1
    48ce:	f7 cf       	rjmp	.-18     	; 0x48be <vfprintf+0x3bc>
    48d0:	b7 01       	movw	r22, r14
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    48d8:	b7 01       	movw	r22, r14
    48da:	c6 01       	movw	r24, r12
    48dc:	c0 96       	adiw	r24, 0x30	; 48
    48de:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    48e2:	54 c1       	rjmp	.+680    	; 0x4b8c <vfprintf+0x68a>
    48e4:	83 36       	cpi	r24, 0x63	; 99
    48e6:	31 f0       	breq	.+12     	; 0x48f4 <vfprintf+0x3f2>
    48e8:	83 37       	cpi	r24, 0x73	; 115
    48ea:	79 f0       	breq	.+30     	; 0x490a <vfprintf+0x408>
    48ec:	83 35       	cpi	r24, 0x53	; 83
    48ee:	09 f0       	breq	.+2      	; 0x48f2 <vfprintf+0x3f0>
    48f0:	56 c0       	rjmp	.+172    	; 0x499e <vfprintf+0x49c>
    48f2:	20 c0       	rjmp	.+64     	; 0x4934 <vfprintf+0x432>
    48f4:	56 01       	movw	r10, r12
    48f6:	32 e0       	ldi	r19, 0x02	; 2
    48f8:	a3 0e       	add	r10, r19
    48fa:	b1 1c       	adc	r11, r1
    48fc:	f6 01       	movw	r30, r12
    48fe:	80 81       	ld	r24, Z
    4900:	89 83       	std	Y+1, r24	; 0x01
    4902:	01 e0       	ldi	r16, 0x01	; 1
    4904:	10 e0       	ldi	r17, 0x00	; 0
    4906:	63 01       	movw	r12, r6
    4908:	12 c0       	rjmp	.+36     	; 0x492e <vfprintf+0x42c>
    490a:	56 01       	movw	r10, r12
    490c:	f2 e0       	ldi	r31, 0x02	; 2
    490e:	af 0e       	add	r10, r31
    4910:	b1 1c       	adc	r11, r1
    4912:	f6 01       	movw	r30, r12
    4914:	c0 80       	ld	r12, Z
    4916:	d1 80       	ldd	r13, Z+1	; 0x01
    4918:	96 fe       	sbrs	r9, 6
    491a:	03 c0       	rjmp	.+6      	; 0x4922 <vfprintf+0x420>
    491c:	61 2f       	mov	r22, r17
    491e:	70 e0       	ldi	r23, 0x00	; 0
    4920:	02 c0       	rjmp	.+4      	; 0x4926 <vfprintf+0x424>
    4922:	6f ef       	ldi	r22, 0xFF	; 255
    4924:	7f ef       	ldi	r23, 0xFF	; 255
    4926:	c6 01       	movw	r24, r12
    4928:	0e 94 f6 27 	call	0x4fec	; 0x4fec <strnlen>
    492c:	8c 01       	movw	r16, r24
    492e:	f9 2d       	mov	r31, r9
    4930:	ff 77       	andi	r31, 0x7F	; 127
    4932:	14 c0       	rjmp	.+40     	; 0x495c <vfprintf+0x45a>
    4934:	56 01       	movw	r10, r12
    4936:	22 e0       	ldi	r18, 0x02	; 2
    4938:	a2 0e       	add	r10, r18
    493a:	b1 1c       	adc	r11, r1
    493c:	f6 01       	movw	r30, r12
    493e:	c0 80       	ld	r12, Z
    4940:	d1 80       	ldd	r13, Z+1	; 0x01
    4942:	96 fe       	sbrs	r9, 6
    4944:	03 c0       	rjmp	.+6      	; 0x494c <vfprintf+0x44a>
    4946:	61 2f       	mov	r22, r17
    4948:	70 e0       	ldi	r23, 0x00	; 0
    494a:	02 c0       	rjmp	.+4      	; 0x4950 <vfprintf+0x44e>
    494c:	6f ef       	ldi	r22, 0xFF	; 255
    494e:	7f ef       	ldi	r23, 0xFF	; 255
    4950:	c6 01       	movw	r24, r12
    4952:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <strnlen_P>
    4956:	8c 01       	movw	r16, r24
    4958:	f9 2d       	mov	r31, r9
    495a:	f0 68       	ori	r31, 0x80	; 128
    495c:	9f 2e       	mov	r9, r31
    495e:	f3 fd       	sbrc	r31, 3
    4960:	1a c0       	rjmp	.+52     	; 0x4996 <vfprintf+0x494>
    4962:	85 2d       	mov	r24, r5
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	08 17       	cp	r16, r24
    4968:	19 07       	cpc	r17, r25
    496a:	a8 f4       	brcc	.+42     	; 0x4996 <vfprintf+0x494>
    496c:	b7 01       	movw	r22, r14
    496e:	80 e2       	ldi	r24, 0x20	; 32
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    4976:	5a 94       	dec	r5
    4978:	f4 cf       	rjmp	.-24     	; 0x4962 <vfprintf+0x460>
    497a:	f6 01       	movw	r30, r12
    497c:	97 fc       	sbrc	r9, 7
    497e:	85 91       	lpm	r24, Z+
    4980:	97 fe       	sbrs	r9, 7
    4982:	81 91       	ld	r24, Z+
    4984:	6f 01       	movw	r12, r30
    4986:	b7 01       	movw	r22, r14
    4988:	90 e0       	ldi	r25, 0x00	; 0
    498a:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    498e:	51 10       	cpse	r5, r1
    4990:	5a 94       	dec	r5
    4992:	01 50       	subi	r16, 0x01	; 1
    4994:	11 09       	sbc	r17, r1
    4996:	01 15       	cp	r16, r1
    4998:	11 05       	cpc	r17, r1
    499a:	79 f7       	brne	.-34     	; 0x497a <vfprintf+0x478>
    499c:	f7 c0       	rjmp	.+494    	; 0x4b8c <vfprintf+0x68a>
    499e:	84 36       	cpi	r24, 0x64	; 100
    49a0:	11 f0       	breq	.+4      	; 0x49a6 <vfprintf+0x4a4>
    49a2:	89 36       	cpi	r24, 0x69	; 105
    49a4:	61 f5       	brne	.+88     	; 0x49fe <vfprintf+0x4fc>
    49a6:	56 01       	movw	r10, r12
    49a8:	97 fe       	sbrs	r9, 7
    49aa:	09 c0       	rjmp	.+18     	; 0x49be <vfprintf+0x4bc>
    49ac:	24 e0       	ldi	r18, 0x04	; 4
    49ae:	a2 0e       	add	r10, r18
    49b0:	b1 1c       	adc	r11, r1
    49b2:	f6 01       	movw	r30, r12
    49b4:	60 81       	ld	r22, Z
    49b6:	71 81       	ldd	r23, Z+1	; 0x01
    49b8:	82 81       	ldd	r24, Z+2	; 0x02
    49ba:	93 81       	ldd	r25, Z+3	; 0x03
    49bc:	0a c0       	rjmp	.+20     	; 0x49d2 <vfprintf+0x4d0>
    49be:	f2 e0       	ldi	r31, 0x02	; 2
    49c0:	af 0e       	add	r10, r31
    49c2:	b1 1c       	adc	r11, r1
    49c4:	f6 01       	movw	r30, r12
    49c6:	60 81       	ld	r22, Z
    49c8:	71 81       	ldd	r23, Z+1	; 0x01
    49ca:	07 2e       	mov	r0, r23
    49cc:	00 0c       	add	r0, r0
    49ce:	88 0b       	sbc	r24, r24
    49d0:	99 0b       	sbc	r25, r25
    49d2:	f9 2d       	mov	r31, r9
    49d4:	ff 76       	andi	r31, 0x6F	; 111
    49d6:	9f 2e       	mov	r9, r31
    49d8:	97 ff       	sbrs	r25, 7
    49da:	09 c0       	rjmp	.+18     	; 0x49ee <vfprintf+0x4ec>
    49dc:	90 95       	com	r25
    49de:	80 95       	com	r24
    49e0:	70 95       	com	r23
    49e2:	61 95       	neg	r22
    49e4:	7f 4f       	sbci	r23, 0xFF	; 255
    49e6:	8f 4f       	sbci	r24, 0xFF	; 255
    49e8:	9f 4f       	sbci	r25, 0xFF	; 255
    49ea:	f0 68       	ori	r31, 0x80	; 128
    49ec:	9f 2e       	mov	r9, r31
    49ee:	2a e0       	ldi	r18, 0x0A	; 10
    49f0:	30 e0       	ldi	r19, 0x00	; 0
    49f2:	a3 01       	movw	r20, r6
    49f4:	0e 94 95 28 	call	0x512a	; 0x512a <__ultoa_invert>
    49f8:	c8 2e       	mov	r12, r24
    49fa:	c6 18       	sub	r12, r6
    49fc:	3f c0       	rjmp	.+126    	; 0x4a7c <vfprintf+0x57a>
    49fe:	09 2d       	mov	r16, r9
    4a00:	85 37       	cpi	r24, 0x75	; 117
    4a02:	21 f4       	brne	.+8      	; 0x4a0c <vfprintf+0x50a>
    4a04:	0f 7e       	andi	r16, 0xEF	; 239
    4a06:	2a e0       	ldi	r18, 0x0A	; 10
    4a08:	30 e0       	ldi	r19, 0x00	; 0
    4a0a:	1d c0       	rjmp	.+58     	; 0x4a46 <vfprintf+0x544>
    4a0c:	09 7f       	andi	r16, 0xF9	; 249
    4a0e:	8f 36       	cpi	r24, 0x6F	; 111
    4a10:	91 f0       	breq	.+36     	; 0x4a36 <vfprintf+0x534>
    4a12:	18 f4       	brcc	.+6      	; 0x4a1a <vfprintf+0x518>
    4a14:	88 35       	cpi	r24, 0x58	; 88
    4a16:	59 f0       	breq	.+22     	; 0x4a2e <vfprintf+0x52c>
    4a18:	c3 c0       	rjmp	.+390    	; 0x4ba0 <vfprintf+0x69e>
    4a1a:	80 37       	cpi	r24, 0x70	; 112
    4a1c:	19 f0       	breq	.+6      	; 0x4a24 <vfprintf+0x522>
    4a1e:	88 37       	cpi	r24, 0x78	; 120
    4a20:	11 f0       	breq	.+4      	; 0x4a26 <vfprintf+0x524>
    4a22:	be c0       	rjmp	.+380    	; 0x4ba0 <vfprintf+0x69e>
    4a24:	00 61       	ori	r16, 0x10	; 16
    4a26:	04 ff       	sbrs	r16, 4
    4a28:	09 c0       	rjmp	.+18     	; 0x4a3c <vfprintf+0x53a>
    4a2a:	04 60       	ori	r16, 0x04	; 4
    4a2c:	07 c0       	rjmp	.+14     	; 0x4a3c <vfprintf+0x53a>
    4a2e:	94 fe       	sbrs	r9, 4
    4a30:	08 c0       	rjmp	.+16     	; 0x4a42 <vfprintf+0x540>
    4a32:	06 60       	ori	r16, 0x06	; 6
    4a34:	06 c0       	rjmp	.+12     	; 0x4a42 <vfprintf+0x540>
    4a36:	28 e0       	ldi	r18, 0x08	; 8
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	05 c0       	rjmp	.+10     	; 0x4a46 <vfprintf+0x544>
    4a3c:	20 e1       	ldi	r18, 0x10	; 16
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	02 c0       	rjmp	.+4      	; 0x4a46 <vfprintf+0x544>
    4a42:	20 e1       	ldi	r18, 0x10	; 16
    4a44:	32 e0       	ldi	r19, 0x02	; 2
    4a46:	56 01       	movw	r10, r12
    4a48:	07 ff       	sbrs	r16, 7
    4a4a:	09 c0       	rjmp	.+18     	; 0x4a5e <vfprintf+0x55c>
    4a4c:	84 e0       	ldi	r24, 0x04	; 4
    4a4e:	a8 0e       	add	r10, r24
    4a50:	b1 1c       	adc	r11, r1
    4a52:	f6 01       	movw	r30, r12
    4a54:	60 81       	ld	r22, Z
    4a56:	71 81       	ldd	r23, Z+1	; 0x01
    4a58:	82 81       	ldd	r24, Z+2	; 0x02
    4a5a:	93 81       	ldd	r25, Z+3	; 0x03
    4a5c:	08 c0       	rjmp	.+16     	; 0x4a6e <vfprintf+0x56c>
    4a5e:	f2 e0       	ldi	r31, 0x02	; 2
    4a60:	af 0e       	add	r10, r31
    4a62:	b1 1c       	adc	r11, r1
    4a64:	f6 01       	movw	r30, r12
    4a66:	60 81       	ld	r22, Z
    4a68:	71 81       	ldd	r23, Z+1	; 0x01
    4a6a:	80 e0       	ldi	r24, 0x00	; 0
    4a6c:	90 e0       	ldi	r25, 0x00	; 0
    4a6e:	a3 01       	movw	r20, r6
    4a70:	0e 94 95 28 	call	0x512a	; 0x512a <__ultoa_invert>
    4a74:	c8 2e       	mov	r12, r24
    4a76:	c6 18       	sub	r12, r6
    4a78:	0f 77       	andi	r16, 0x7F	; 127
    4a7a:	90 2e       	mov	r9, r16
    4a7c:	96 fe       	sbrs	r9, 6
    4a7e:	0b c0       	rjmp	.+22     	; 0x4a96 <vfprintf+0x594>
    4a80:	09 2d       	mov	r16, r9
    4a82:	0e 7f       	andi	r16, 0xFE	; 254
    4a84:	c1 16       	cp	r12, r17
    4a86:	50 f4       	brcc	.+20     	; 0x4a9c <vfprintf+0x59a>
    4a88:	94 fe       	sbrs	r9, 4
    4a8a:	0a c0       	rjmp	.+20     	; 0x4aa0 <vfprintf+0x59e>
    4a8c:	92 fc       	sbrc	r9, 2
    4a8e:	08 c0       	rjmp	.+16     	; 0x4aa0 <vfprintf+0x59e>
    4a90:	09 2d       	mov	r16, r9
    4a92:	0e 7e       	andi	r16, 0xEE	; 238
    4a94:	05 c0       	rjmp	.+10     	; 0x4aa0 <vfprintf+0x59e>
    4a96:	dc 2c       	mov	r13, r12
    4a98:	09 2d       	mov	r16, r9
    4a9a:	03 c0       	rjmp	.+6      	; 0x4aa2 <vfprintf+0x5a0>
    4a9c:	dc 2c       	mov	r13, r12
    4a9e:	01 c0       	rjmp	.+2      	; 0x4aa2 <vfprintf+0x5a0>
    4aa0:	d1 2e       	mov	r13, r17
    4aa2:	04 ff       	sbrs	r16, 4
    4aa4:	0d c0       	rjmp	.+26     	; 0x4ac0 <vfprintf+0x5be>
    4aa6:	fe 01       	movw	r30, r28
    4aa8:	ec 0d       	add	r30, r12
    4aaa:	f1 1d       	adc	r31, r1
    4aac:	80 81       	ld	r24, Z
    4aae:	80 33       	cpi	r24, 0x30	; 48
    4ab0:	11 f4       	brne	.+4      	; 0x4ab6 <vfprintf+0x5b4>
    4ab2:	09 7e       	andi	r16, 0xE9	; 233
    4ab4:	09 c0       	rjmp	.+18     	; 0x4ac8 <vfprintf+0x5c6>
    4ab6:	02 ff       	sbrs	r16, 2
    4ab8:	06 c0       	rjmp	.+12     	; 0x4ac6 <vfprintf+0x5c4>
    4aba:	d3 94       	inc	r13
    4abc:	d3 94       	inc	r13
    4abe:	04 c0       	rjmp	.+8      	; 0x4ac8 <vfprintf+0x5c6>
    4ac0:	80 2f       	mov	r24, r16
    4ac2:	86 78       	andi	r24, 0x86	; 134
    4ac4:	09 f0       	breq	.+2      	; 0x4ac8 <vfprintf+0x5c6>
    4ac6:	d3 94       	inc	r13
    4ac8:	03 fd       	sbrc	r16, 3
    4aca:	11 c0       	rjmp	.+34     	; 0x4aee <vfprintf+0x5ec>
    4acc:	00 ff       	sbrs	r16, 0
    4ace:	06 c0       	rjmp	.+12     	; 0x4adc <vfprintf+0x5da>
    4ad0:	1c 2d       	mov	r17, r12
    4ad2:	d5 14       	cp	r13, r5
    4ad4:	80 f4       	brcc	.+32     	; 0x4af6 <vfprintf+0x5f4>
    4ad6:	15 0d       	add	r17, r5
    4ad8:	1d 19       	sub	r17, r13
    4ada:	0d c0       	rjmp	.+26     	; 0x4af6 <vfprintf+0x5f4>
    4adc:	d5 14       	cp	r13, r5
    4ade:	58 f4       	brcc	.+22     	; 0x4af6 <vfprintf+0x5f4>
    4ae0:	b7 01       	movw	r22, r14
    4ae2:	80 e2       	ldi	r24, 0x20	; 32
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    4aea:	d3 94       	inc	r13
    4aec:	f7 cf       	rjmp	.-18     	; 0x4adc <vfprintf+0x5da>
    4aee:	d5 14       	cp	r13, r5
    4af0:	10 f4       	brcc	.+4      	; 0x4af6 <vfprintf+0x5f4>
    4af2:	5d 18       	sub	r5, r13
    4af4:	01 c0       	rjmp	.+2      	; 0x4af8 <vfprintf+0x5f6>
    4af6:	51 2c       	mov	r5, r1
    4af8:	04 ff       	sbrs	r16, 4
    4afa:	10 c0       	rjmp	.+32     	; 0x4b1c <vfprintf+0x61a>
    4afc:	b7 01       	movw	r22, r14
    4afe:	80 e3       	ldi	r24, 0x30	; 48
    4b00:	90 e0       	ldi	r25, 0x00	; 0
    4b02:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    4b06:	02 ff       	sbrs	r16, 2
    4b08:	17 c0       	rjmp	.+46     	; 0x4b38 <vfprintf+0x636>
    4b0a:	01 fd       	sbrc	r16, 1
    4b0c:	03 c0       	rjmp	.+6      	; 0x4b14 <vfprintf+0x612>
    4b0e:	88 e7       	ldi	r24, 0x78	; 120
    4b10:	90 e0       	ldi	r25, 0x00	; 0
    4b12:	02 c0       	rjmp	.+4      	; 0x4b18 <vfprintf+0x616>
    4b14:	88 e5       	ldi	r24, 0x58	; 88
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	b7 01       	movw	r22, r14
    4b1a:	0c c0       	rjmp	.+24     	; 0x4b34 <vfprintf+0x632>
    4b1c:	80 2f       	mov	r24, r16
    4b1e:	86 78       	andi	r24, 0x86	; 134
    4b20:	59 f0       	breq	.+22     	; 0x4b38 <vfprintf+0x636>
    4b22:	01 ff       	sbrs	r16, 1
    4b24:	02 c0       	rjmp	.+4      	; 0x4b2a <vfprintf+0x628>
    4b26:	8b e2       	ldi	r24, 0x2B	; 43
    4b28:	01 c0       	rjmp	.+2      	; 0x4b2c <vfprintf+0x62a>
    4b2a:	80 e2       	ldi	r24, 0x20	; 32
    4b2c:	07 fd       	sbrc	r16, 7
    4b2e:	8d e2       	ldi	r24, 0x2D	; 45
    4b30:	b7 01       	movw	r22, r14
    4b32:	90 e0       	ldi	r25, 0x00	; 0
    4b34:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    4b38:	c1 16       	cp	r12, r17
    4b3a:	38 f4       	brcc	.+14     	; 0x4b4a <vfprintf+0x648>
    4b3c:	b7 01       	movw	r22, r14
    4b3e:	80 e3       	ldi	r24, 0x30	; 48
    4b40:	90 e0       	ldi	r25, 0x00	; 0
    4b42:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    4b46:	11 50       	subi	r17, 0x01	; 1
    4b48:	f7 cf       	rjmp	.-18     	; 0x4b38 <vfprintf+0x636>
    4b4a:	ca 94       	dec	r12
    4b4c:	f3 01       	movw	r30, r6
    4b4e:	ec 0d       	add	r30, r12
    4b50:	f1 1d       	adc	r31, r1
    4b52:	80 81       	ld	r24, Z
    4b54:	b7 01       	movw	r22, r14
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    4b5c:	c1 10       	cpse	r12, r1
    4b5e:	f5 cf       	rjmp	.-22     	; 0x4b4a <vfprintf+0x648>
    4b60:	15 c0       	rjmp	.+42     	; 0x4b8c <vfprintf+0x68a>
    4b62:	f4 e0       	ldi	r31, 0x04	; 4
    4b64:	f5 15       	cp	r31, r5
    4b66:	60 f5       	brcc	.+88     	; 0x4bc0 <vfprintf+0x6be>
    4b68:	84 e0       	ldi	r24, 0x04	; 4
    4b6a:	58 1a       	sub	r5, r24
    4b6c:	93 fe       	sbrs	r9, 3
    4b6e:	1f c0       	rjmp	.+62     	; 0x4bae <vfprintf+0x6ac>
    4b70:	01 11       	cpse	r16, r1
    4b72:	27 c0       	rjmp	.+78     	; 0x4bc2 <vfprintf+0x6c0>
    4b74:	2c 85       	ldd	r18, Y+12	; 0x0c
    4b76:	23 ff       	sbrs	r18, 3
    4b78:	2a c0       	rjmp	.+84     	; 0x4bce <vfprintf+0x6cc>
    4b7a:	04 e6       	ldi	r16, 0x64	; 100
    4b7c:	11 e0       	ldi	r17, 0x01	; 1
    4b7e:	39 2d       	mov	r19, r9
    4b80:	30 71       	andi	r19, 0x10	; 16
    4b82:	93 2e       	mov	r9, r19
    4b84:	f8 01       	movw	r30, r16
    4b86:	84 91       	lpm	r24, Z
    4b88:	81 11       	cpse	r24, r1
    4b8a:	24 c0       	rjmp	.+72     	; 0x4bd4 <vfprintf+0x6d2>
    4b8c:	55 20       	and	r5, r5
    4b8e:	09 f4       	brne	.+2      	; 0x4b92 <vfprintf+0x690>
    4b90:	e4 cc       	rjmp	.-1592   	; 0x455a <vfprintf+0x58>
    4b92:	b7 01       	movw	r22, r14
    4b94:	80 e2       	ldi	r24, 0x20	; 32
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    4b9c:	5a 94       	dec	r5
    4b9e:	f6 cf       	rjmp	.-20     	; 0x4b8c <vfprintf+0x68a>
    4ba0:	f7 01       	movw	r30, r14
    4ba2:	86 81       	ldd	r24, Z+6	; 0x06
    4ba4:	97 81       	ldd	r25, Z+7	; 0x07
    4ba6:	26 c0       	rjmp	.+76     	; 0x4bf4 <vfprintf+0x6f2>
    4ba8:	8f ef       	ldi	r24, 0xFF	; 255
    4baa:	9f ef       	ldi	r25, 0xFF	; 255
    4bac:	23 c0       	rjmp	.+70     	; 0x4bf4 <vfprintf+0x6f2>
    4bae:	b7 01       	movw	r22, r14
    4bb0:	80 e2       	ldi	r24, 0x20	; 32
    4bb2:	90 e0       	ldi	r25, 0x00	; 0
    4bb4:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    4bb8:	5a 94       	dec	r5
    4bba:	51 10       	cpse	r5, r1
    4bbc:	f8 cf       	rjmp	.-16     	; 0x4bae <vfprintf+0x6ac>
    4bbe:	d8 cf       	rjmp	.-80     	; 0x4b70 <vfprintf+0x66e>
    4bc0:	51 2c       	mov	r5, r1
    4bc2:	b7 01       	movw	r22, r14
    4bc4:	80 2f       	mov	r24, r16
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
    4bc8:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    4bcc:	d3 cf       	rjmp	.-90     	; 0x4b74 <vfprintf+0x672>
    4bce:	08 e6       	ldi	r16, 0x68	; 104
    4bd0:	11 e0       	ldi	r17, 0x01	; 1
    4bd2:	d5 cf       	rjmp	.-86     	; 0x4b7e <vfprintf+0x67c>
    4bd4:	91 10       	cpse	r9, r1
    4bd6:	80 52       	subi	r24, 0x20	; 32
    4bd8:	b7 01       	movw	r22, r14
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	0e 94 1e 28 	call	0x503c	; 0x503c <fputc>
    4be0:	0f 5f       	subi	r16, 0xFF	; 255
    4be2:	1f 4f       	sbci	r17, 0xFF	; 255
    4be4:	cf cf       	rjmp	.-98     	; 0x4b84 <vfprintf+0x682>
    4be6:	23 e0       	ldi	r18, 0x03	; 3
    4be8:	25 15       	cp	r18, r5
    4bea:	10 f4       	brcc	.+4      	; 0x4bf0 <vfprintf+0x6ee>
    4bec:	83 e0       	ldi	r24, 0x03	; 3
    4bee:	bd cf       	rjmp	.-134    	; 0x4b6a <vfprintf+0x668>
    4bf0:	51 2c       	mov	r5, r1
    4bf2:	c0 cf       	rjmp	.-128    	; 0x4b74 <vfprintf+0x672>
    4bf4:	60 96       	adiw	r28, 0x10	; 16
    4bf6:	e2 e1       	ldi	r30, 0x12	; 18
    4bf8:	0c 94 5b 26 	jmp	0x4cb6	; 0x4cb6 <__epilogue_restores__>

00004bfc <__divmodhi4>:
    4bfc:	97 fb       	bst	r25, 7
    4bfe:	07 2e       	mov	r0, r23
    4c00:	16 f4       	brtc	.+4      	; 0x4c06 <__divmodhi4+0xa>
    4c02:	00 94       	com	r0
    4c04:	07 d0       	rcall	.+14     	; 0x4c14 <__divmodhi4_neg1>
    4c06:	77 fd       	sbrc	r23, 7
    4c08:	09 d0       	rcall	.+18     	; 0x4c1c <__divmodhi4_neg2>
    4c0a:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__udivmodhi4>
    4c0e:	07 fc       	sbrc	r0, 7
    4c10:	05 d0       	rcall	.+10     	; 0x4c1c <__divmodhi4_neg2>
    4c12:	3e f4       	brtc	.+14     	; 0x4c22 <__divmodhi4_exit>

00004c14 <__divmodhi4_neg1>:
    4c14:	90 95       	com	r25
    4c16:	81 95       	neg	r24
    4c18:	9f 4f       	sbci	r25, 0xFF	; 255
    4c1a:	08 95       	ret

00004c1c <__divmodhi4_neg2>:
    4c1c:	70 95       	com	r23
    4c1e:	61 95       	neg	r22
    4c20:	7f 4f       	sbci	r23, 0xFF	; 255

00004c22 <__divmodhi4_exit>:
    4c22:	08 95       	ret

00004c24 <__divmodsi4>:
    4c24:	05 2e       	mov	r0, r21
    4c26:	97 fb       	bst	r25, 7
    4c28:	1e f4       	brtc	.+6      	; 0x4c30 <__divmodsi4+0xc>
    4c2a:	00 94       	com	r0
    4c2c:	0e 94 29 26 	call	0x4c52	; 0x4c52 <__negsi2>
    4c30:	57 fd       	sbrc	r21, 7
    4c32:	07 d0       	rcall	.+14     	; 0x4c42 <__divmodsi4_neg2>
    4c34:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <__udivmodsi4>
    4c38:	07 fc       	sbrc	r0, 7
    4c3a:	03 d0       	rcall	.+6      	; 0x4c42 <__divmodsi4_neg2>
    4c3c:	4e f4       	brtc	.+18     	; 0x4c50 <__divmodsi4_exit>
    4c3e:	0c 94 29 26 	jmp	0x4c52	; 0x4c52 <__negsi2>

00004c42 <__divmodsi4_neg2>:
    4c42:	50 95       	com	r21
    4c44:	40 95       	com	r20
    4c46:	30 95       	com	r19
    4c48:	21 95       	neg	r18
    4c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c4c:	4f 4f       	sbci	r20, 0xFF	; 255
    4c4e:	5f 4f       	sbci	r21, 0xFF	; 255

00004c50 <__divmodsi4_exit>:
    4c50:	08 95       	ret

00004c52 <__negsi2>:
    4c52:	90 95       	com	r25
    4c54:	80 95       	com	r24
    4c56:	70 95       	com	r23
    4c58:	61 95       	neg	r22
    4c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    4c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    4c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    4c60:	08 95       	ret

00004c62 <__tablejump2__>:
    4c62:	ee 0f       	add	r30, r30
    4c64:	ff 1f       	adc	r31, r31
    4c66:	05 90       	lpm	r0, Z+
    4c68:	f4 91       	lpm	r31, Z
    4c6a:	e0 2d       	mov	r30, r0
    4c6c:	09 94       	ijmp

00004c6e <__muluhisi3>:
    4c6e:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__umulhisi3>
    4c72:	a5 9f       	mul	r26, r21
    4c74:	90 0d       	add	r25, r0
    4c76:	b4 9f       	mul	r27, r20
    4c78:	90 0d       	add	r25, r0
    4c7a:	a4 9f       	mul	r26, r20
    4c7c:	80 0d       	add	r24, r0
    4c7e:	91 1d       	adc	r25, r1
    4c80:	11 24       	eor	r1, r1
    4c82:	08 95       	ret

00004c84 <__prologue_saves__>:
    4c84:	2f 92       	push	r2
    4c86:	3f 92       	push	r3
    4c88:	4f 92       	push	r4
    4c8a:	5f 92       	push	r5
    4c8c:	6f 92       	push	r6
    4c8e:	7f 92       	push	r7
    4c90:	8f 92       	push	r8
    4c92:	9f 92       	push	r9
    4c94:	af 92       	push	r10
    4c96:	bf 92       	push	r11
    4c98:	cf 92       	push	r12
    4c9a:	df 92       	push	r13
    4c9c:	ef 92       	push	r14
    4c9e:	ff 92       	push	r15
    4ca0:	0f 93       	push	r16
    4ca2:	1f 93       	push	r17
    4ca4:	cf 93       	push	r28
    4ca6:	df 93       	push	r29
    4ca8:	cd b7       	in	r28, 0x3d	; 61
    4caa:	de b7       	in	r29, 0x3e	; 62
    4cac:	ca 1b       	sub	r28, r26
    4cae:	db 0b       	sbc	r29, r27
    4cb0:	cd bf       	out	0x3d, r28	; 61
    4cb2:	de bf       	out	0x3e, r29	; 62
    4cb4:	09 94       	ijmp

00004cb6 <__epilogue_restores__>:
    4cb6:	2a 88       	ldd	r2, Y+18	; 0x12
    4cb8:	39 88       	ldd	r3, Y+17	; 0x11
    4cba:	48 88       	ldd	r4, Y+16	; 0x10
    4cbc:	5f 84       	ldd	r5, Y+15	; 0x0f
    4cbe:	6e 84       	ldd	r6, Y+14	; 0x0e
    4cc0:	7d 84       	ldd	r7, Y+13	; 0x0d
    4cc2:	8c 84       	ldd	r8, Y+12	; 0x0c
    4cc4:	9b 84       	ldd	r9, Y+11	; 0x0b
    4cc6:	aa 84       	ldd	r10, Y+10	; 0x0a
    4cc8:	b9 84       	ldd	r11, Y+9	; 0x09
    4cca:	c8 84       	ldd	r12, Y+8	; 0x08
    4ccc:	df 80       	ldd	r13, Y+7	; 0x07
    4cce:	ee 80       	ldd	r14, Y+6	; 0x06
    4cd0:	fd 80       	ldd	r15, Y+5	; 0x05
    4cd2:	0c 81       	ldd	r16, Y+4	; 0x04
    4cd4:	1b 81       	ldd	r17, Y+3	; 0x03
    4cd6:	aa 81       	ldd	r26, Y+2	; 0x02
    4cd8:	b9 81       	ldd	r27, Y+1	; 0x01
    4cda:	ce 0f       	add	r28, r30
    4cdc:	d1 1d       	adc	r29, r1
    4cde:	cd bf       	out	0x3d, r28	; 61
    4ce0:	de bf       	out	0x3e, r29	; 62
    4ce2:	ed 01       	movw	r28, r26
    4ce4:	08 95       	ret

00004ce6 <__udivmodhi4>:
    4ce6:	aa 1b       	sub	r26, r26
    4ce8:	bb 1b       	sub	r27, r27
    4cea:	51 e1       	ldi	r21, 0x11	; 17
    4cec:	07 c0       	rjmp	.+14     	; 0x4cfc <__udivmodhi4_ep>

00004cee <__udivmodhi4_loop>:
    4cee:	aa 1f       	adc	r26, r26
    4cf0:	bb 1f       	adc	r27, r27
    4cf2:	a6 17       	cp	r26, r22
    4cf4:	b7 07       	cpc	r27, r23
    4cf6:	10 f0       	brcs	.+4      	; 0x4cfc <__udivmodhi4_ep>
    4cf8:	a6 1b       	sub	r26, r22
    4cfa:	b7 0b       	sbc	r27, r23

00004cfc <__udivmodhi4_ep>:
    4cfc:	88 1f       	adc	r24, r24
    4cfe:	99 1f       	adc	r25, r25
    4d00:	5a 95       	dec	r21
    4d02:	a9 f7       	brne	.-22     	; 0x4cee <__udivmodhi4_loop>
    4d04:	80 95       	com	r24
    4d06:	90 95       	com	r25
    4d08:	bc 01       	movw	r22, r24
    4d0a:	cd 01       	movw	r24, r26
    4d0c:	08 95       	ret

00004d0e <__udivmodsi4>:
    4d0e:	a1 e2       	ldi	r26, 0x21	; 33
    4d10:	1a 2e       	mov	r1, r26
    4d12:	aa 1b       	sub	r26, r26
    4d14:	bb 1b       	sub	r27, r27
    4d16:	fd 01       	movw	r30, r26
    4d18:	0d c0       	rjmp	.+26     	; 0x4d34 <__udivmodsi4_ep>

00004d1a <__udivmodsi4_loop>:
    4d1a:	aa 1f       	adc	r26, r26
    4d1c:	bb 1f       	adc	r27, r27
    4d1e:	ee 1f       	adc	r30, r30
    4d20:	ff 1f       	adc	r31, r31
    4d22:	a2 17       	cp	r26, r18
    4d24:	b3 07       	cpc	r27, r19
    4d26:	e4 07       	cpc	r30, r20
    4d28:	f5 07       	cpc	r31, r21
    4d2a:	20 f0       	brcs	.+8      	; 0x4d34 <__udivmodsi4_ep>
    4d2c:	a2 1b       	sub	r26, r18
    4d2e:	b3 0b       	sbc	r27, r19
    4d30:	e4 0b       	sbc	r30, r20
    4d32:	f5 0b       	sbc	r31, r21

00004d34 <__udivmodsi4_ep>:
    4d34:	66 1f       	adc	r22, r22
    4d36:	77 1f       	adc	r23, r23
    4d38:	88 1f       	adc	r24, r24
    4d3a:	99 1f       	adc	r25, r25
    4d3c:	1a 94       	dec	r1
    4d3e:	69 f7       	brne	.-38     	; 0x4d1a <__udivmodsi4_loop>
    4d40:	60 95       	com	r22
    4d42:	70 95       	com	r23
    4d44:	80 95       	com	r24
    4d46:	90 95       	com	r25
    4d48:	9b 01       	movw	r18, r22
    4d4a:	ac 01       	movw	r20, r24
    4d4c:	bd 01       	movw	r22, r26
    4d4e:	cf 01       	movw	r24, r30
    4d50:	08 95       	ret

00004d52 <__umulhisi3>:
    4d52:	a2 9f       	mul	r26, r18
    4d54:	b0 01       	movw	r22, r0
    4d56:	b3 9f       	mul	r27, r19
    4d58:	c0 01       	movw	r24, r0
    4d5a:	a3 9f       	mul	r26, r19
    4d5c:	70 0d       	add	r23, r0
    4d5e:	81 1d       	adc	r24, r1
    4d60:	11 24       	eor	r1, r1
    4d62:	91 1d       	adc	r25, r1
    4d64:	b2 9f       	mul	r27, r18
    4d66:	70 0d       	add	r23, r0
    4d68:	81 1d       	adc	r24, r1
    4d6a:	11 24       	eor	r1, r1
    4d6c:	91 1d       	adc	r25, r1
    4d6e:	08 95       	ret

00004d70 <atof>:
    4d70:	66 27       	eor	r22, r22
    4d72:	77 27       	eor	r23, r23
    4d74:	0c 94 a0 2b 	jmp	0x5740	; 0x5740 <strtod>

00004d78 <atoi>:
    4d78:	fc 01       	movw	r30, r24
    4d7a:	88 27       	eor	r24, r24
    4d7c:	99 27       	eor	r25, r25
    4d7e:	e8 94       	clt
    4d80:	21 91       	ld	r18, Z+
    4d82:	20 32       	cpi	r18, 0x20	; 32
    4d84:	e9 f3       	breq	.-6      	; 0x4d80 <atoi+0x8>
    4d86:	29 30       	cpi	r18, 0x09	; 9
    4d88:	10 f0       	brcs	.+4      	; 0x4d8e <atoi+0x16>
    4d8a:	2e 30       	cpi	r18, 0x0E	; 14
    4d8c:	c8 f3       	brcs	.-14     	; 0x4d80 <atoi+0x8>
    4d8e:	2b 32       	cpi	r18, 0x2B	; 43
    4d90:	41 f0       	breq	.+16     	; 0x4da2 <atoi+0x2a>
    4d92:	2d 32       	cpi	r18, 0x2D	; 45
    4d94:	39 f4       	brne	.+14     	; 0x4da4 <atoi+0x2c>
    4d96:	68 94       	set
    4d98:	04 c0       	rjmp	.+8      	; 0x4da2 <atoi+0x2a>
    4d9a:	0e 94 16 28 	call	0x502c	; 0x502c <__mulhi_const_10>
    4d9e:	82 0f       	add	r24, r18
    4da0:	91 1d       	adc	r25, r1
    4da2:	21 91       	ld	r18, Z+
    4da4:	20 53       	subi	r18, 0x30	; 48
    4da6:	2a 30       	cpi	r18, 0x0A	; 10
    4da8:	c0 f3       	brcs	.-16     	; 0x4d9a <atoi+0x22>
    4daa:	1e f4       	brtc	.+6      	; 0x4db2 <atoi+0x3a>
    4dac:	90 95       	com	r25
    4dae:	81 95       	neg	r24
    4db0:	9f 4f       	sbci	r25, 0xFF	; 255
    4db2:	08 95       	ret

00004db4 <atol>:
    4db4:	1f 93       	push	r17
    4db6:	fc 01       	movw	r30, r24
    4db8:	99 27       	eor	r25, r25
    4dba:	88 27       	eor	r24, r24
    4dbc:	bc 01       	movw	r22, r24
    4dbe:	e8 94       	clt
    4dc0:	11 91       	ld	r17, Z+
    4dc2:	10 32       	cpi	r17, 0x20	; 32
    4dc4:	e9 f3       	breq	.-6      	; 0x4dc0 <atol+0xc>
    4dc6:	19 30       	cpi	r17, 0x09	; 9
    4dc8:	10 f0       	brcs	.+4      	; 0x4dce <atol+0x1a>
    4dca:	1e 30       	cpi	r17, 0x0E	; 14
    4dcc:	c8 f3       	brcs	.-14     	; 0x4dc0 <atol+0xc>
    4dce:	1b 32       	cpi	r17, 0x2B	; 43
    4dd0:	51 f0       	breq	.+20     	; 0x4de6 <atol+0x32>
    4dd2:	1d 32       	cpi	r17, 0x2D	; 45
    4dd4:	49 f4       	brne	.+18     	; 0x4de8 <atol+0x34>
    4dd6:	68 94       	set
    4dd8:	06 c0       	rjmp	.+12     	; 0x4de6 <atol+0x32>
    4dda:	0e 94 01 28 	call	0x5002	; 0x5002 <__mulsi_const_10>
    4dde:	61 0f       	add	r22, r17
    4de0:	71 1d       	adc	r23, r1
    4de2:	81 1d       	adc	r24, r1
    4de4:	91 1d       	adc	r25, r1
    4de6:	11 91       	ld	r17, Z+
    4de8:	10 53       	subi	r17, 0x30	; 48
    4dea:	1a 30       	cpi	r17, 0x0A	; 10
    4dec:	b0 f3       	brcs	.-20     	; 0x4dda <atol+0x26>
    4dee:	3e f4       	brtc	.+14     	; 0x4dfe <atol+0x4a>
    4df0:	90 95       	com	r25
    4df2:	80 95       	com	r24
    4df4:	70 95       	com	r23
    4df6:	61 95       	neg	r22
    4df8:	7f 4f       	sbci	r23, 0xFF	; 255
    4dfa:	8f 4f       	sbci	r24, 0xFF	; 255
    4dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    4dfe:	1f 91       	pop	r17
    4e00:	08 95       	ret

00004e02 <__ftoa_engine>:
    4e02:	28 30       	cpi	r18, 0x08	; 8
    4e04:	08 f0       	brcs	.+2      	; 0x4e08 <__ftoa_engine+0x6>
    4e06:	27 e0       	ldi	r18, 0x07	; 7
    4e08:	33 27       	eor	r19, r19
    4e0a:	da 01       	movw	r26, r20
    4e0c:	99 0f       	add	r25, r25
    4e0e:	31 1d       	adc	r19, r1
    4e10:	87 fd       	sbrc	r24, 7
    4e12:	91 60       	ori	r25, 0x01	; 1
    4e14:	00 96       	adiw	r24, 0x00	; 0
    4e16:	61 05       	cpc	r22, r1
    4e18:	71 05       	cpc	r23, r1
    4e1a:	39 f4       	brne	.+14     	; 0x4e2a <__ftoa_engine+0x28>
    4e1c:	32 60       	ori	r19, 0x02	; 2
    4e1e:	2e 5f       	subi	r18, 0xFE	; 254
    4e20:	3d 93       	st	X+, r19
    4e22:	30 e3       	ldi	r19, 0x30	; 48
    4e24:	2a 95       	dec	r18
    4e26:	e1 f7       	brne	.-8      	; 0x4e20 <__ftoa_engine+0x1e>
    4e28:	08 95       	ret
    4e2a:	9f 3f       	cpi	r25, 0xFF	; 255
    4e2c:	30 f0       	brcs	.+12     	; 0x4e3a <__ftoa_engine+0x38>
    4e2e:	80 38       	cpi	r24, 0x80	; 128
    4e30:	71 05       	cpc	r23, r1
    4e32:	61 05       	cpc	r22, r1
    4e34:	09 f0       	breq	.+2      	; 0x4e38 <__ftoa_engine+0x36>
    4e36:	3c 5f       	subi	r19, 0xFC	; 252
    4e38:	3c 5f       	subi	r19, 0xFC	; 252
    4e3a:	3d 93       	st	X+, r19
    4e3c:	91 30       	cpi	r25, 0x01	; 1
    4e3e:	08 f0       	brcs	.+2      	; 0x4e42 <__ftoa_engine+0x40>
    4e40:	80 68       	ori	r24, 0x80	; 128
    4e42:	91 1d       	adc	r25, r1
    4e44:	df 93       	push	r29
    4e46:	cf 93       	push	r28
    4e48:	1f 93       	push	r17
    4e4a:	0f 93       	push	r16
    4e4c:	ff 92       	push	r15
    4e4e:	ef 92       	push	r14
    4e50:	19 2f       	mov	r17, r25
    4e52:	98 7f       	andi	r25, 0xF8	; 248
    4e54:	96 95       	lsr	r25
    4e56:	e9 2f       	mov	r30, r25
    4e58:	96 95       	lsr	r25
    4e5a:	96 95       	lsr	r25
    4e5c:	e9 0f       	add	r30, r25
    4e5e:	ff 27       	eor	r31, r31
    4e60:	ea 53       	subi	r30, 0x3A	; 58
    4e62:	fe 4f       	sbci	r31, 0xFE	; 254
    4e64:	99 27       	eor	r25, r25
    4e66:	33 27       	eor	r19, r19
    4e68:	ee 24       	eor	r14, r14
    4e6a:	ff 24       	eor	r15, r15
    4e6c:	a7 01       	movw	r20, r14
    4e6e:	e7 01       	movw	r28, r14
    4e70:	05 90       	lpm	r0, Z+
    4e72:	08 94       	sec
    4e74:	07 94       	ror	r0
    4e76:	28 f4       	brcc	.+10     	; 0x4e82 <__ftoa_engine+0x80>
    4e78:	36 0f       	add	r19, r22
    4e7a:	e7 1e       	adc	r14, r23
    4e7c:	f8 1e       	adc	r15, r24
    4e7e:	49 1f       	adc	r20, r25
    4e80:	51 1d       	adc	r21, r1
    4e82:	66 0f       	add	r22, r22
    4e84:	77 1f       	adc	r23, r23
    4e86:	88 1f       	adc	r24, r24
    4e88:	99 1f       	adc	r25, r25
    4e8a:	06 94       	lsr	r0
    4e8c:	a1 f7       	brne	.-24     	; 0x4e76 <__ftoa_engine+0x74>
    4e8e:	05 90       	lpm	r0, Z+
    4e90:	07 94       	ror	r0
    4e92:	28 f4       	brcc	.+10     	; 0x4e9e <__ftoa_engine+0x9c>
    4e94:	e7 0e       	add	r14, r23
    4e96:	f8 1e       	adc	r15, r24
    4e98:	49 1f       	adc	r20, r25
    4e9a:	56 1f       	adc	r21, r22
    4e9c:	c1 1d       	adc	r28, r1
    4e9e:	77 0f       	add	r23, r23
    4ea0:	88 1f       	adc	r24, r24
    4ea2:	99 1f       	adc	r25, r25
    4ea4:	66 1f       	adc	r22, r22
    4ea6:	06 94       	lsr	r0
    4ea8:	a1 f7       	brne	.-24     	; 0x4e92 <__ftoa_engine+0x90>
    4eaa:	05 90       	lpm	r0, Z+
    4eac:	07 94       	ror	r0
    4eae:	28 f4       	brcc	.+10     	; 0x4eba <__ftoa_engine+0xb8>
    4eb0:	f8 0e       	add	r15, r24
    4eb2:	49 1f       	adc	r20, r25
    4eb4:	56 1f       	adc	r21, r22
    4eb6:	c7 1f       	adc	r28, r23
    4eb8:	d1 1d       	adc	r29, r1
    4eba:	88 0f       	add	r24, r24
    4ebc:	99 1f       	adc	r25, r25
    4ebe:	66 1f       	adc	r22, r22
    4ec0:	77 1f       	adc	r23, r23
    4ec2:	06 94       	lsr	r0
    4ec4:	a1 f7       	brne	.-24     	; 0x4eae <__ftoa_engine+0xac>
    4ec6:	05 90       	lpm	r0, Z+
    4ec8:	07 94       	ror	r0
    4eca:	20 f4       	brcc	.+8      	; 0x4ed4 <__ftoa_engine+0xd2>
    4ecc:	49 0f       	add	r20, r25
    4ece:	56 1f       	adc	r21, r22
    4ed0:	c7 1f       	adc	r28, r23
    4ed2:	d8 1f       	adc	r29, r24
    4ed4:	99 0f       	add	r25, r25
    4ed6:	66 1f       	adc	r22, r22
    4ed8:	77 1f       	adc	r23, r23
    4eda:	88 1f       	adc	r24, r24
    4edc:	06 94       	lsr	r0
    4ede:	a9 f7       	brne	.-22     	; 0x4eca <__ftoa_engine+0xc8>
    4ee0:	84 91       	lpm	r24, Z
    4ee2:	10 95       	com	r17
    4ee4:	17 70       	andi	r17, 0x07	; 7
    4ee6:	41 f0       	breq	.+16     	; 0x4ef8 <__ftoa_engine+0xf6>
    4ee8:	d6 95       	lsr	r29
    4eea:	c7 95       	ror	r28
    4eec:	57 95       	ror	r21
    4eee:	47 95       	ror	r20
    4ef0:	f7 94       	ror	r15
    4ef2:	e7 94       	ror	r14
    4ef4:	1a 95       	dec	r17
    4ef6:	c1 f7       	brne	.-16     	; 0x4ee8 <__ftoa_engine+0xe6>
    4ef8:	ec e6       	ldi	r30, 0x6C	; 108
    4efa:	f1 e0       	ldi	r31, 0x01	; 1
    4efc:	68 94       	set
    4efe:	15 90       	lpm	r1, Z+
    4f00:	15 91       	lpm	r17, Z+
    4f02:	35 91       	lpm	r19, Z+
    4f04:	65 91       	lpm	r22, Z+
    4f06:	95 91       	lpm	r25, Z+
    4f08:	05 90       	lpm	r0, Z+
    4f0a:	7f e2       	ldi	r23, 0x2F	; 47
    4f0c:	73 95       	inc	r23
    4f0e:	e1 18       	sub	r14, r1
    4f10:	f1 0a       	sbc	r15, r17
    4f12:	43 0b       	sbc	r20, r19
    4f14:	56 0b       	sbc	r21, r22
    4f16:	c9 0b       	sbc	r28, r25
    4f18:	d0 09       	sbc	r29, r0
    4f1a:	c0 f7       	brcc	.-16     	; 0x4f0c <__ftoa_engine+0x10a>
    4f1c:	e1 0c       	add	r14, r1
    4f1e:	f1 1e       	adc	r15, r17
    4f20:	43 1f       	adc	r20, r19
    4f22:	56 1f       	adc	r21, r22
    4f24:	c9 1f       	adc	r28, r25
    4f26:	d0 1d       	adc	r29, r0
    4f28:	7e f4       	brtc	.+30     	; 0x4f48 <__ftoa_engine+0x146>
    4f2a:	70 33       	cpi	r23, 0x30	; 48
    4f2c:	11 f4       	brne	.+4      	; 0x4f32 <__ftoa_engine+0x130>
    4f2e:	8a 95       	dec	r24
    4f30:	e6 cf       	rjmp	.-52     	; 0x4efe <__ftoa_engine+0xfc>
    4f32:	e8 94       	clt
    4f34:	01 50       	subi	r16, 0x01	; 1
    4f36:	30 f0       	brcs	.+12     	; 0x4f44 <__ftoa_engine+0x142>
    4f38:	08 0f       	add	r16, r24
    4f3a:	0a f4       	brpl	.+2      	; 0x4f3e <__ftoa_engine+0x13c>
    4f3c:	00 27       	eor	r16, r16
    4f3e:	02 17       	cp	r16, r18
    4f40:	08 f4       	brcc	.+2      	; 0x4f44 <__ftoa_engine+0x142>
    4f42:	20 2f       	mov	r18, r16
    4f44:	23 95       	inc	r18
    4f46:	02 2f       	mov	r16, r18
    4f48:	7a 33       	cpi	r23, 0x3A	; 58
    4f4a:	28 f0       	brcs	.+10     	; 0x4f56 <__ftoa_engine+0x154>
    4f4c:	79 e3       	ldi	r23, 0x39	; 57
    4f4e:	7d 93       	st	X+, r23
    4f50:	2a 95       	dec	r18
    4f52:	e9 f7       	brne	.-6      	; 0x4f4e <__ftoa_engine+0x14c>
    4f54:	10 c0       	rjmp	.+32     	; 0x4f76 <__ftoa_engine+0x174>
    4f56:	7d 93       	st	X+, r23
    4f58:	2a 95       	dec	r18
    4f5a:	89 f6       	brne	.-94     	; 0x4efe <__ftoa_engine+0xfc>
    4f5c:	06 94       	lsr	r0
    4f5e:	97 95       	ror	r25
    4f60:	67 95       	ror	r22
    4f62:	37 95       	ror	r19
    4f64:	17 95       	ror	r17
    4f66:	17 94       	ror	r1
    4f68:	e1 18       	sub	r14, r1
    4f6a:	f1 0a       	sbc	r15, r17
    4f6c:	43 0b       	sbc	r20, r19
    4f6e:	56 0b       	sbc	r21, r22
    4f70:	c9 0b       	sbc	r28, r25
    4f72:	d0 09       	sbc	r29, r0
    4f74:	98 f0       	brcs	.+38     	; 0x4f9c <__ftoa_engine+0x19a>
    4f76:	23 95       	inc	r18
    4f78:	7e 91       	ld	r23, -X
    4f7a:	73 95       	inc	r23
    4f7c:	7a 33       	cpi	r23, 0x3A	; 58
    4f7e:	08 f0       	brcs	.+2      	; 0x4f82 <__ftoa_engine+0x180>
    4f80:	70 e3       	ldi	r23, 0x30	; 48
    4f82:	7c 93       	st	X, r23
    4f84:	20 13       	cpse	r18, r16
    4f86:	b8 f7       	brcc	.-18     	; 0x4f76 <__ftoa_engine+0x174>
    4f88:	7e 91       	ld	r23, -X
    4f8a:	70 61       	ori	r23, 0x10	; 16
    4f8c:	7d 93       	st	X+, r23
    4f8e:	30 f0       	brcs	.+12     	; 0x4f9c <__ftoa_engine+0x19a>
    4f90:	83 95       	inc	r24
    4f92:	71 e3       	ldi	r23, 0x31	; 49
    4f94:	7d 93       	st	X+, r23
    4f96:	70 e3       	ldi	r23, 0x30	; 48
    4f98:	2a 95       	dec	r18
    4f9a:	e1 f7       	brne	.-8      	; 0x4f94 <__ftoa_engine+0x192>
    4f9c:	11 24       	eor	r1, r1
    4f9e:	ef 90       	pop	r14
    4fa0:	ff 90       	pop	r15
    4fa2:	0f 91       	pop	r16
    4fa4:	1f 91       	pop	r17
    4fa6:	cf 91       	pop	r28
    4fa8:	df 91       	pop	r29
    4faa:	99 27       	eor	r25, r25
    4fac:	87 fd       	sbrc	r24, 7
    4fae:	90 95       	com	r25
    4fb0:	08 95       	ret

00004fb2 <strnlen_P>:
    4fb2:	fc 01       	movw	r30, r24
    4fb4:	05 90       	lpm	r0, Z+
    4fb6:	61 50       	subi	r22, 0x01	; 1
    4fb8:	70 40       	sbci	r23, 0x00	; 0
    4fba:	01 10       	cpse	r0, r1
    4fbc:	d8 f7       	brcc	.-10     	; 0x4fb4 <strnlen_P+0x2>
    4fbe:	80 95       	com	r24
    4fc0:	90 95       	com	r25
    4fc2:	8e 0f       	add	r24, r30
    4fc4:	9f 1f       	adc	r25, r31
    4fc6:	08 95       	ret

00004fc8 <strcat>:
    4fc8:	fb 01       	movw	r30, r22
    4fca:	dc 01       	movw	r26, r24
    4fcc:	0d 90       	ld	r0, X+
    4fce:	00 20       	and	r0, r0
    4fd0:	e9 f7       	brne	.-6      	; 0x4fcc <strcat+0x4>
    4fd2:	11 97       	sbiw	r26, 0x01	; 1
    4fd4:	01 90       	ld	r0, Z+
    4fd6:	0d 92       	st	X+, r0
    4fd8:	00 20       	and	r0, r0
    4fda:	e1 f7       	brne	.-8      	; 0x4fd4 <strcat+0xc>
    4fdc:	08 95       	ret

00004fde <strcpy>:
    4fde:	fb 01       	movw	r30, r22
    4fe0:	dc 01       	movw	r26, r24
    4fe2:	01 90       	ld	r0, Z+
    4fe4:	0d 92       	st	X+, r0
    4fe6:	00 20       	and	r0, r0
    4fe8:	e1 f7       	brne	.-8      	; 0x4fe2 <strcpy+0x4>
    4fea:	08 95       	ret

00004fec <strnlen>:
    4fec:	fc 01       	movw	r30, r24
    4fee:	61 50       	subi	r22, 0x01	; 1
    4ff0:	70 40       	sbci	r23, 0x00	; 0
    4ff2:	01 90       	ld	r0, Z+
    4ff4:	01 10       	cpse	r0, r1
    4ff6:	d8 f7       	brcc	.-10     	; 0x4fee <strnlen+0x2>
    4ff8:	80 95       	com	r24
    4ffa:	90 95       	com	r25
    4ffc:	8e 0f       	add	r24, r30
    4ffe:	9f 1f       	adc	r25, r31
    5000:	08 95       	ret

00005002 <__mulsi_const_10>:
    5002:	59 2f       	mov	r21, r25
    5004:	48 2f       	mov	r20, r24
    5006:	37 2f       	mov	r19, r23
    5008:	26 2f       	mov	r18, r22
    500a:	66 0f       	add	r22, r22
    500c:	77 1f       	adc	r23, r23
    500e:	88 1f       	adc	r24, r24
    5010:	99 1f       	adc	r25, r25
    5012:	66 0f       	add	r22, r22
    5014:	77 1f       	adc	r23, r23
    5016:	88 1f       	adc	r24, r24
    5018:	99 1f       	adc	r25, r25
    501a:	62 0f       	add	r22, r18
    501c:	73 1f       	adc	r23, r19
    501e:	84 1f       	adc	r24, r20
    5020:	95 1f       	adc	r25, r21
    5022:	66 0f       	add	r22, r22
    5024:	77 1f       	adc	r23, r23
    5026:	88 1f       	adc	r24, r24
    5028:	99 1f       	adc	r25, r25
    502a:	08 95       	ret

0000502c <__mulhi_const_10>:
    502c:	7a e0       	ldi	r23, 0x0A	; 10
    502e:	97 9f       	mul	r25, r23
    5030:	90 2d       	mov	r25, r0
    5032:	87 9f       	mul	r24, r23
    5034:	80 2d       	mov	r24, r0
    5036:	91 0d       	add	r25, r1
    5038:	11 24       	eor	r1, r1
    503a:	08 95       	ret

0000503c <fputc>:
    503c:	0f 93       	push	r16
    503e:	1f 93       	push	r17
    5040:	cf 93       	push	r28
    5042:	df 93       	push	r29
    5044:	fb 01       	movw	r30, r22
    5046:	23 81       	ldd	r18, Z+3	; 0x03
    5048:	21 fd       	sbrc	r18, 1
    504a:	03 c0       	rjmp	.+6      	; 0x5052 <fputc+0x16>
    504c:	8f ef       	ldi	r24, 0xFF	; 255
    504e:	9f ef       	ldi	r25, 0xFF	; 255
    5050:	2c c0       	rjmp	.+88     	; 0x50aa <fputc+0x6e>
    5052:	22 ff       	sbrs	r18, 2
    5054:	16 c0       	rjmp	.+44     	; 0x5082 <fputc+0x46>
    5056:	46 81       	ldd	r20, Z+6	; 0x06
    5058:	57 81       	ldd	r21, Z+7	; 0x07
    505a:	24 81       	ldd	r18, Z+4	; 0x04
    505c:	35 81       	ldd	r19, Z+5	; 0x05
    505e:	42 17       	cp	r20, r18
    5060:	53 07       	cpc	r21, r19
    5062:	44 f4       	brge	.+16     	; 0x5074 <fputc+0x38>
    5064:	a0 81       	ld	r26, Z
    5066:	b1 81       	ldd	r27, Z+1	; 0x01
    5068:	9d 01       	movw	r18, r26
    506a:	2f 5f       	subi	r18, 0xFF	; 255
    506c:	3f 4f       	sbci	r19, 0xFF	; 255
    506e:	20 83       	st	Z, r18
    5070:	31 83       	std	Z+1, r19	; 0x01
    5072:	8c 93       	st	X, r24
    5074:	26 81       	ldd	r18, Z+6	; 0x06
    5076:	37 81       	ldd	r19, Z+7	; 0x07
    5078:	2f 5f       	subi	r18, 0xFF	; 255
    507a:	3f 4f       	sbci	r19, 0xFF	; 255
    507c:	26 83       	std	Z+6, r18	; 0x06
    507e:	37 83       	std	Z+7, r19	; 0x07
    5080:	14 c0       	rjmp	.+40     	; 0x50aa <fputc+0x6e>
    5082:	8b 01       	movw	r16, r22
    5084:	ec 01       	movw	r28, r24
    5086:	fb 01       	movw	r30, r22
    5088:	00 84       	ldd	r0, Z+8	; 0x08
    508a:	f1 85       	ldd	r31, Z+9	; 0x09
    508c:	e0 2d       	mov	r30, r0
    508e:	09 95       	icall
    5090:	89 2b       	or	r24, r25
    5092:	e1 f6       	brne	.-72     	; 0x504c <fputc+0x10>
    5094:	d8 01       	movw	r26, r16
    5096:	16 96       	adiw	r26, 0x06	; 6
    5098:	8d 91       	ld	r24, X+
    509a:	9c 91       	ld	r25, X
    509c:	17 97       	sbiw	r26, 0x07	; 7
    509e:	01 96       	adiw	r24, 0x01	; 1
    50a0:	16 96       	adiw	r26, 0x06	; 6
    50a2:	8d 93       	st	X+, r24
    50a4:	9c 93       	st	X, r25
    50a6:	17 97       	sbiw	r26, 0x07	; 7
    50a8:	ce 01       	movw	r24, r28
    50aa:	df 91       	pop	r29
    50ac:	cf 91       	pop	r28
    50ae:	1f 91       	pop	r17
    50b0:	0f 91       	pop	r16
    50b2:	08 95       	ret

000050b4 <sprintf>:
    50b4:	ae e0       	ldi	r26, 0x0E	; 14
    50b6:	b0 e0       	ldi	r27, 0x00	; 0
    50b8:	e0 e6       	ldi	r30, 0x60	; 96
    50ba:	f8 e2       	ldi	r31, 0x28	; 40
    50bc:	0c 94 50 26 	jmp	0x4ca0	; 0x4ca0 <__prologue_saves__+0x1c>
    50c0:	0d 89       	ldd	r16, Y+21	; 0x15
    50c2:	1e 89       	ldd	r17, Y+22	; 0x16
    50c4:	86 e0       	ldi	r24, 0x06	; 6
    50c6:	8c 83       	std	Y+4, r24	; 0x04
    50c8:	09 83       	std	Y+1, r16	; 0x01
    50ca:	1a 83       	std	Y+2, r17	; 0x02
    50cc:	8f ef       	ldi	r24, 0xFF	; 255
    50ce:	9f e7       	ldi	r25, 0x7F	; 127
    50d0:	8d 83       	std	Y+5, r24	; 0x05
    50d2:	9e 83       	std	Y+6, r25	; 0x06
    50d4:	ae 01       	movw	r20, r28
    50d6:	47 5e       	subi	r20, 0xE7	; 231
    50d8:	5f 4f       	sbci	r21, 0xFF	; 255
    50da:	6f 89       	ldd	r22, Y+23	; 0x17
    50dc:	78 8d       	ldd	r23, Y+24	; 0x18
    50de:	ce 01       	movw	r24, r28
    50e0:	01 96       	adiw	r24, 0x01	; 1
    50e2:	0e 94 81 22 	call	0x4502	; 0x4502 <vfprintf>
    50e6:	ef 81       	ldd	r30, Y+7	; 0x07
    50e8:	f8 85       	ldd	r31, Y+8	; 0x08
    50ea:	e0 0f       	add	r30, r16
    50ec:	f1 1f       	adc	r31, r17
    50ee:	10 82       	st	Z, r1
    50f0:	2e 96       	adiw	r28, 0x0e	; 14
    50f2:	e4 e0       	ldi	r30, 0x04	; 4
    50f4:	0c 94 69 26 	jmp	0x4cd2	; 0x4cd2 <__epilogue_restores__+0x1c>

000050f8 <sscanf>:
    50f8:	ae e0       	ldi	r26, 0x0E	; 14
    50fa:	b0 e0       	ldi	r27, 0x00	; 0
    50fc:	e2 e8       	ldi	r30, 0x82	; 130
    50fe:	f8 e2       	ldi	r31, 0x28	; 40
    5100:	0c 94 52 26 	jmp	0x4ca4	; 0x4ca4 <__prologue_saves__+0x20>
    5104:	85 e0       	ldi	r24, 0x05	; 5
    5106:	8c 83       	std	Y+4, r24	; 0x04
    5108:	8b 89       	ldd	r24, Y+19	; 0x13
    510a:	9c 89       	ldd	r25, Y+20	; 0x14
    510c:	89 83       	std	Y+1, r24	; 0x01
    510e:	9a 83       	std	Y+2, r25	; 0x02
    5110:	ae 01       	movw	r20, r28
    5112:	49 5e       	subi	r20, 0xE9	; 233
    5114:	5f 4f       	sbci	r21, 0xFF	; 255
    5116:	6d 89       	ldd	r22, Y+21	; 0x15
    5118:	7e 89       	ldd	r23, Y+22	; 0x16
    511a:	ce 01       	movw	r24, r28
    511c:	01 96       	adiw	r24, 0x01	; 1
    511e:	0e 94 8f 2a 	call	0x551e	; 0x551e <vfscanf>
    5122:	2e 96       	adiw	r28, 0x0e	; 14
    5124:	e2 e0       	ldi	r30, 0x02	; 2
    5126:	0c 94 6b 26 	jmp	0x4cd6	; 0x4cd6 <__epilogue_restores__+0x20>

0000512a <__ultoa_invert>:
    512a:	fa 01       	movw	r30, r20
    512c:	aa 27       	eor	r26, r26
    512e:	28 30       	cpi	r18, 0x08	; 8
    5130:	51 f1       	breq	.+84     	; 0x5186 <__ultoa_invert+0x5c>
    5132:	20 31       	cpi	r18, 0x10	; 16
    5134:	81 f1       	breq	.+96     	; 0x5196 <__ultoa_invert+0x6c>
    5136:	e8 94       	clt
    5138:	6f 93       	push	r22
    513a:	6e 7f       	andi	r22, 0xFE	; 254
    513c:	6e 5f       	subi	r22, 0xFE	; 254
    513e:	7f 4f       	sbci	r23, 0xFF	; 255
    5140:	8f 4f       	sbci	r24, 0xFF	; 255
    5142:	9f 4f       	sbci	r25, 0xFF	; 255
    5144:	af 4f       	sbci	r26, 0xFF	; 255
    5146:	b1 e0       	ldi	r27, 0x01	; 1
    5148:	3e d0       	rcall	.+124    	; 0x51c6 <__ultoa_invert+0x9c>
    514a:	b4 e0       	ldi	r27, 0x04	; 4
    514c:	3c d0       	rcall	.+120    	; 0x51c6 <__ultoa_invert+0x9c>
    514e:	67 0f       	add	r22, r23
    5150:	78 1f       	adc	r23, r24
    5152:	89 1f       	adc	r24, r25
    5154:	9a 1f       	adc	r25, r26
    5156:	a1 1d       	adc	r26, r1
    5158:	68 0f       	add	r22, r24
    515a:	79 1f       	adc	r23, r25
    515c:	8a 1f       	adc	r24, r26
    515e:	91 1d       	adc	r25, r1
    5160:	a1 1d       	adc	r26, r1
    5162:	6a 0f       	add	r22, r26
    5164:	71 1d       	adc	r23, r1
    5166:	81 1d       	adc	r24, r1
    5168:	91 1d       	adc	r25, r1
    516a:	a1 1d       	adc	r26, r1
    516c:	20 d0       	rcall	.+64     	; 0x51ae <__ultoa_invert+0x84>
    516e:	09 f4       	brne	.+2      	; 0x5172 <__ultoa_invert+0x48>
    5170:	68 94       	set
    5172:	3f 91       	pop	r19
    5174:	2a e0       	ldi	r18, 0x0A	; 10
    5176:	26 9f       	mul	r18, r22
    5178:	11 24       	eor	r1, r1
    517a:	30 19       	sub	r19, r0
    517c:	30 5d       	subi	r19, 0xD0	; 208
    517e:	31 93       	st	Z+, r19
    5180:	de f6       	brtc	.-74     	; 0x5138 <__ultoa_invert+0xe>
    5182:	cf 01       	movw	r24, r30
    5184:	08 95       	ret
    5186:	46 2f       	mov	r20, r22
    5188:	47 70       	andi	r20, 0x07	; 7
    518a:	40 5d       	subi	r20, 0xD0	; 208
    518c:	41 93       	st	Z+, r20
    518e:	b3 e0       	ldi	r27, 0x03	; 3
    5190:	0f d0       	rcall	.+30     	; 0x51b0 <__ultoa_invert+0x86>
    5192:	c9 f7       	brne	.-14     	; 0x5186 <__ultoa_invert+0x5c>
    5194:	f6 cf       	rjmp	.-20     	; 0x5182 <__ultoa_invert+0x58>
    5196:	46 2f       	mov	r20, r22
    5198:	4f 70       	andi	r20, 0x0F	; 15
    519a:	40 5d       	subi	r20, 0xD0	; 208
    519c:	4a 33       	cpi	r20, 0x3A	; 58
    519e:	18 f0       	brcs	.+6      	; 0x51a6 <__ultoa_invert+0x7c>
    51a0:	49 5d       	subi	r20, 0xD9	; 217
    51a2:	31 fd       	sbrc	r19, 1
    51a4:	40 52       	subi	r20, 0x20	; 32
    51a6:	41 93       	st	Z+, r20
    51a8:	02 d0       	rcall	.+4      	; 0x51ae <__ultoa_invert+0x84>
    51aa:	a9 f7       	brne	.-22     	; 0x5196 <__ultoa_invert+0x6c>
    51ac:	ea cf       	rjmp	.-44     	; 0x5182 <__ultoa_invert+0x58>
    51ae:	b4 e0       	ldi	r27, 0x04	; 4
    51b0:	a6 95       	lsr	r26
    51b2:	97 95       	ror	r25
    51b4:	87 95       	ror	r24
    51b6:	77 95       	ror	r23
    51b8:	67 95       	ror	r22
    51ba:	ba 95       	dec	r27
    51bc:	c9 f7       	brne	.-14     	; 0x51b0 <__ultoa_invert+0x86>
    51be:	00 97       	sbiw	r24, 0x00	; 0
    51c0:	61 05       	cpc	r22, r1
    51c2:	71 05       	cpc	r23, r1
    51c4:	08 95       	ret
    51c6:	9b 01       	movw	r18, r22
    51c8:	ac 01       	movw	r20, r24
    51ca:	0a 2e       	mov	r0, r26
    51cc:	06 94       	lsr	r0
    51ce:	57 95       	ror	r21
    51d0:	47 95       	ror	r20
    51d2:	37 95       	ror	r19
    51d4:	27 95       	ror	r18
    51d6:	ba 95       	dec	r27
    51d8:	c9 f7       	brne	.-14     	; 0x51cc <__ultoa_invert+0xa2>
    51da:	62 0f       	add	r22, r18
    51dc:	73 1f       	adc	r23, r19
    51de:	84 1f       	adc	r24, r20
    51e0:	95 1f       	adc	r25, r21
    51e2:	a0 1d       	adc	r26, r0
    51e4:	08 95       	ret

000051e6 <putval>:
    51e6:	20 fd       	sbrc	r18, 0
    51e8:	09 c0       	rjmp	.+18     	; 0x51fc <putval+0x16>
    51ea:	fc 01       	movw	r30, r24
    51ec:	23 fd       	sbrc	r18, 3
    51ee:	05 c0       	rjmp	.+10     	; 0x51fa <putval+0x14>
    51f0:	22 ff       	sbrs	r18, 2
    51f2:	02 c0       	rjmp	.+4      	; 0x51f8 <putval+0x12>
    51f4:	73 83       	std	Z+3, r23	; 0x03
    51f6:	62 83       	std	Z+2, r22	; 0x02
    51f8:	51 83       	std	Z+1, r21	; 0x01
    51fa:	40 83       	st	Z, r20
    51fc:	08 95       	ret

000051fe <mulacc>:
    51fe:	44 fd       	sbrc	r20, 4
    5200:	17 c0       	rjmp	.+46     	; 0x5230 <mulacc+0x32>
    5202:	46 fd       	sbrc	r20, 6
    5204:	17 c0       	rjmp	.+46     	; 0x5234 <mulacc+0x36>
    5206:	ab 01       	movw	r20, r22
    5208:	bc 01       	movw	r22, r24
    520a:	da 01       	movw	r26, r20
    520c:	fb 01       	movw	r30, r22
    520e:	aa 0f       	add	r26, r26
    5210:	bb 1f       	adc	r27, r27
    5212:	ee 1f       	adc	r30, r30
    5214:	ff 1f       	adc	r31, r31
    5216:	10 94       	com	r1
    5218:	d1 f7       	brne	.-12     	; 0x520e <mulacc+0x10>
    521a:	4a 0f       	add	r20, r26
    521c:	5b 1f       	adc	r21, r27
    521e:	6e 1f       	adc	r22, r30
    5220:	7f 1f       	adc	r23, r31
    5222:	cb 01       	movw	r24, r22
    5224:	ba 01       	movw	r22, r20
    5226:	66 0f       	add	r22, r22
    5228:	77 1f       	adc	r23, r23
    522a:	88 1f       	adc	r24, r24
    522c:	99 1f       	adc	r25, r25
    522e:	09 c0       	rjmp	.+18     	; 0x5242 <mulacc+0x44>
    5230:	33 e0       	ldi	r19, 0x03	; 3
    5232:	01 c0       	rjmp	.+2      	; 0x5236 <mulacc+0x38>
    5234:	34 e0       	ldi	r19, 0x04	; 4
    5236:	66 0f       	add	r22, r22
    5238:	77 1f       	adc	r23, r23
    523a:	88 1f       	adc	r24, r24
    523c:	99 1f       	adc	r25, r25
    523e:	31 50       	subi	r19, 0x01	; 1
    5240:	d1 f7       	brne	.-12     	; 0x5236 <mulacc+0x38>
    5242:	62 0f       	add	r22, r18
    5244:	71 1d       	adc	r23, r1
    5246:	81 1d       	adc	r24, r1
    5248:	91 1d       	adc	r25, r1
    524a:	08 95       	ret

0000524c <skip_spaces>:
    524c:	0f 93       	push	r16
    524e:	1f 93       	push	r17
    5250:	cf 93       	push	r28
    5252:	df 93       	push	r29
    5254:	8c 01       	movw	r16, r24
    5256:	c8 01       	movw	r24, r16
    5258:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <fgetc>
    525c:	ec 01       	movw	r28, r24
    525e:	97 fd       	sbrc	r25, 7
    5260:	08 c0       	rjmp	.+16     	; 0x5272 <skip_spaces+0x26>
    5262:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <isspace>
    5266:	89 2b       	or	r24, r25
    5268:	b1 f7       	brne	.-20     	; 0x5256 <skip_spaces+0xa>
    526a:	b8 01       	movw	r22, r16
    526c:	ce 01       	movw	r24, r28
    526e:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <ungetc>
    5272:	ce 01       	movw	r24, r28
    5274:	df 91       	pop	r29
    5276:	cf 91       	pop	r28
    5278:	1f 91       	pop	r17
    527a:	0f 91       	pop	r16
    527c:	08 95       	ret

0000527e <conv_int>:
    527e:	8f 92       	push	r8
    5280:	9f 92       	push	r9
    5282:	af 92       	push	r10
    5284:	bf 92       	push	r11
    5286:	ef 92       	push	r14
    5288:	ff 92       	push	r15
    528a:	0f 93       	push	r16
    528c:	1f 93       	push	r17
    528e:	cf 93       	push	r28
    5290:	df 93       	push	r29
    5292:	8c 01       	movw	r16, r24
    5294:	d6 2f       	mov	r29, r22
    5296:	7a 01       	movw	r14, r20
    5298:	b2 2e       	mov	r11, r18
    529a:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <fgetc>
    529e:	9c 01       	movw	r18, r24
    52a0:	33 27       	eor	r19, r19
    52a2:	2b 32       	cpi	r18, 0x2B	; 43
    52a4:	31 05       	cpc	r19, r1
    52a6:	31 f0       	breq	.+12     	; 0x52b4 <conv_int+0x36>
    52a8:	2d 32       	cpi	r18, 0x2D	; 45
    52aa:	31 05       	cpc	r19, r1
    52ac:	61 f4       	brne	.+24     	; 0x52c6 <conv_int+0x48>
    52ae:	8b 2d       	mov	r24, r11
    52b0:	80 68       	ori	r24, 0x80	; 128
    52b2:	b8 2e       	mov	r11, r24
    52b4:	d1 50       	subi	r29, 0x01	; 1
    52b6:	11 f4       	brne	.+4      	; 0x52bc <conv_int+0x3e>
    52b8:	80 e0       	ldi	r24, 0x00	; 0
    52ba:	68 c0       	rjmp	.+208    	; 0x538c <conv_int+0x10e>
    52bc:	c8 01       	movw	r24, r16
    52be:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <fgetc>
    52c2:	97 fd       	sbrc	r25, 7
    52c4:	f9 cf       	rjmp	.-14     	; 0x52b8 <conv_int+0x3a>
    52c6:	cb 2d       	mov	r28, r11
    52c8:	cd 7f       	andi	r28, 0xFD	; 253
    52ca:	2b 2d       	mov	r18, r11
    52cc:	20 73       	andi	r18, 0x30	; 48
    52ce:	09 f5       	brne	.+66     	; 0x5312 <conv_int+0x94>
    52d0:	80 33       	cpi	r24, 0x30	; 48
    52d2:	f9 f4       	brne	.+62     	; 0x5312 <conv_int+0x94>
    52d4:	aa 24       	eor	r10, r10
    52d6:	aa 94       	dec	r10
    52d8:	ad 0e       	add	r10, r29
    52da:	09 f4       	brne	.+2      	; 0x52de <conv_int+0x60>
    52dc:	43 c0       	rjmp	.+134    	; 0x5364 <conv_int+0xe6>
    52de:	c8 01       	movw	r24, r16
    52e0:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <fgetc>
    52e4:	97 fd       	sbrc	r25, 7
    52e6:	3e c0       	rjmp	.+124    	; 0x5364 <conv_int+0xe6>
    52e8:	9c 01       	movw	r18, r24
    52ea:	2f 7d       	andi	r18, 0xDF	; 223
    52ec:	33 27       	eor	r19, r19
    52ee:	28 35       	cpi	r18, 0x58	; 88
    52f0:	31 05       	cpc	r19, r1
    52f2:	49 f4       	brne	.+18     	; 0x5306 <conv_int+0x88>
    52f4:	c2 64       	ori	r28, 0x42	; 66
    52f6:	d2 50       	subi	r29, 0x02	; 2
    52f8:	a9 f1       	breq	.+106    	; 0x5364 <conv_int+0xe6>
    52fa:	c8 01       	movw	r24, r16
    52fc:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <fgetc>
    5300:	97 ff       	sbrs	r25, 7
    5302:	07 c0       	rjmp	.+14     	; 0x5312 <conv_int+0x94>
    5304:	2f c0       	rjmp	.+94     	; 0x5364 <conv_int+0xe6>
    5306:	b6 fe       	sbrs	r11, 6
    5308:	02 c0       	rjmp	.+4      	; 0x530e <conv_int+0x90>
    530a:	c2 60       	ori	r28, 0x02	; 2
    530c:	01 c0       	rjmp	.+2      	; 0x5310 <conv_int+0x92>
    530e:	c2 61       	ori	r28, 0x12	; 18
    5310:	da 2d       	mov	r29, r10
    5312:	81 2c       	mov	r8, r1
    5314:	91 2c       	mov	r9, r1
    5316:	54 01       	movw	r10, r8
    5318:	20 ed       	ldi	r18, 0xD0	; 208
    531a:	28 0f       	add	r18, r24
    531c:	28 30       	cpi	r18, 0x08	; 8
    531e:	80 f0       	brcs	.+32     	; 0x5340 <conv_int+0xc2>
    5320:	c4 ff       	sbrs	r28, 4
    5322:	04 c0       	rjmp	.+8      	; 0x532c <conv_int+0xae>
    5324:	b8 01       	movw	r22, r16
    5326:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <ungetc>
    532a:	19 c0       	rjmp	.+50     	; 0x535e <conv_int+0xe0>
    532c:	2a 30       	cpi	r18, 0x0A	; 10
    532e:	40 f0       	brcs	.+16     	; 0x5340 <conv_int+0xc2>
    5330:	c6 ff       	sbrs	r28, 6
    5332:	f8 cf       	rjmp	.-16     	; 0x5324 <conv_int+0xa6>
    5334:	2f 7d       	andi	r18, 0xDF	; 223
    5336:	3f ee       	ldi	r19, 0xEF	; 239
    5338:	32 0f       	add	r19, r18
    533a:	36 30       	cpi	r19, 0x06	; 6
    533c:	98 f7       	brcc	.-26     	; 0x5324 <conv_int+0xa6>
    533e:	27 50       	subi	r18, 0x07	; 7
    5340:	4c 2f       	mov	r20, r28
    5342:	c5 01       	movw	r24, r10
    5344:	b4 01       	movw	r22, r8
    5346:	0e 94 ff 28 	call	0x51fe	; 0x51fe <mulacc>
    534a:	4b 01       	movw	r8, r22
    534c:	5c 01       	movw	r10, r24
    534e:	c2 60       	ori	r28, 0x02	; 2
    5350:	d1 50       	subi	r29, 0x01	; 1
    5352:	59 f0       	breq	.+22     	; 0x536a <conv_int+0xec>
    5354:	c8 01       	movw	r24, r16
    5356:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <fgetc>
    535a:	97 ff       	sbrs	r25, 7
    535c:	dd cf       	rjmp	.-70     	; 0x5318 <conv_int+0x9a>
    535e:	c1 fd       	sbrc	r28, 1
    5360:	04 c0       	rjmp	.+8      	; 0x536a <conv_int+0xec>
    5362:	aa cf       	rjmp	.-172    	; 0x52b8 <conv_int+0x3a>
    5364:	81 2c       	mov	r8, r1
    5366:	91 2c       	mov	r9, r1
    5368:	54 01       	movw	r10, r8
    536a:	c7 ff       	sbrs	r28, 7
    536c:	08 c0       	rjmp	.+16     	; 0x537e <conv_int+0x100>
    536e:	b0 94       	com	r11
    5370:	a0 94       	com	r10
    5372:	90 94       	com	r9
    5374:	80 94       	com	r8
    5376:	81 1c       	adc	r8, r1
    5378:	91 1c       	adc	r9, r1
    537a:	a1 1c       	adc	r10, r1
    537c:	b1 1c       	adc	r11, r1
    537e:	2c 2f       	mov	r18, r28
    5380:	b5 01       	movw	r22, r10
    5382:	a4 01       	movw	r20, r8
    5384:	c7 01       	movw	r24, r14
    5386:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <putval>
    538a:	81 e0       	ldi	r24, 0x01	; 1
    538c:	df 91       	pop	r29
    538e:	cf 91       	pop	r28
    5390:	1f 91       	pop	r17
    5392:	0f 91       	pop	r16
    5394:	ff 90       	pop	r15
    5396:	ef 90       	pop	r14
    5398:	bf 90       	pop	r11
    539a:	af 90       	pop	r10
    539c:	9f 90       	pop	r9
    539e:	8f 90       	pop	r8
    53a0:	08 95       	ret

000053a2 <conv_brk>:
    53a2:	a0 e2       	ldi	r26, 0x20	; 32
    53a4:	b0 e0       	ldi	r27, 0x00	; 0
    53a6:	e7 ed       	ldi	r30, 0xD7	; 215
    53a8:	f9 e2       	ldi	r31, 0x29	; 41
    53aa:	0c 94 45 26 	jmp	0x4c8a	; 0x4c8a <__prologue_saves__+0x6>
    53ae:	5c 01       	movw	r10, r24
    53b0:	96 2e       	mov	r9, r22
    53b2:	7a 01       	movw	r14, r20
    53b4:	f9 01       	movw	r30, r18
    53b6:	8e 01       	movw	r16, r28
    53b8:	0f 5f       	subi	r16, 0xFF	; 255
    53ba:	1f 4f       	sbci	r17, 0xFF	; 255
    53bc:	68 01       	movw	r12, r16
    53be:	80 e2       	ldi	r24, 0x20	; 32
    53c0:	d8 01       	movw	r26, r16
    53c2:	1d 92       	st	X+, r1
    53c4:	8a 95       	dec	r24
    53c6:	e9 f7       	brne	.-6      	; 0x53c2 <conv_brk+0x20>
    53c8:	d5 01       	movw	r26, r10
    53ca:	13 96       	adiw	r26, 0x03	; 3
    53cc:	8c 90       	ld	r8, X
    53ce:	80 e0       	ldi	r24, 0x00	; 0
    53d0:	90 e0       	ldi	r25, 0x00	; 0
    53d2:	61 2c       	mov	r6, r1
    53d4:	71 2c       	mov	r7, r1
    53d6:	30 e0       	ldi	r19, 0x00	; 0
    53d8:	61 e0       	ldi	r22, 0x01	; 1
    53da:	70 e0       	ldi	r23, 0x00	; 0
    53dc:	83 fc       	sbrc	r8, 3
    53de:	25 91       	lpm	r18, Z+
    53e0:	83 fe       	sbrs	r8, 3
    53e2:	21 91       	ld	r18, Z+
    53e4:	8f 01       	movw	r16, r30
    53e6:	52 2e       	mov	r5, r18
    53e8:	21 11       	cpse	r18, r1
    53ea:	03 c0       	rjmp	.+6      	; 0x53f2 <conv_brk+0x50>
    53ec:	80 e0       	ldi	r24, 0x00	; 0
    53ee:	90 e0       	ldi	r25, 0x00	; 0
    53f0:	92 c0       	rjmp	.+292    	; 0x5516 <conv_brk+0x174>
    53f2:	2e 35       	cpi	r18, 0x5E	; 94
    53f4:	11 f4       	brne	.+4      	; 0x53fa <conv_brk+0x58>
    53f6:	00 97       	sbiw	r24, 0x00	; 0
    53f8:	51 f1       	breq	.+84     	; 0x544e <conv_brk+0xac>
    53fa:	43 2f       	mov	r20, r19
    53fc:	50 e0       	ldi	r21, 0x00	; 0
    53fe:	48 17       	cp	r20, r24
    5400:	59 07       	cpc	r21, r25
    5402:	3c f4       	brge	.+14     	; 0x5412 <conv_brk+0x70>
    5404:	2d 35       	cpi	r18, 0x5D	; 93
    5406:	59 f1       	breq	.+86     	; 0x545e <conv_brk+0xbc>
    5408:	2d 32       	cpi	r18, 0x2D	; 45
    540a:	19 f4       	brne	.+6      	; 0x5412 <conv_brk+0x70>
    540c:	77 20       	and	r7, r7
    540e:	09 f1       	breq	.+66     	; 0x5452 <conv_brk+0xb0>
    5410:	03 c0       	rjmp	.+6      	; 0x5418 <conv_brk+0x76>
    5412:	77 20       	and	r7, r7
    5414:	09 f4       	brne	.+2      	; 0x5418 <conv_brk+0x76>
    5416:	6a c0       	rjmp	.+212    	; 0x54ec <conv_brk+0x14a>
    5418:	45 2d       	mov	r20, r5
    541a:	46 95       	lsr	r20
    541c:	46 95       	lsr	r20
    541e:	46 95       	lsr	r20
    5420:	d6 01       	movw	r26, r12
    5422:	a4 0f       	add	r26, r20
    5424:	b1 1d       	adc	r27, r1
    5426:	45 2d       	mov	r20, r5
    5428:	47 70       	andi	r20, 0x07	; 7
    542a:	8b 01       	movw	r16, r22
    542c:	02 c0       	rjmp	.+4      	; 0x5432 <conv_brk+0x90>
    542e:	00 0f       	add	r16, r16
    5430:	11 1f       	adc	r17, r17
    5432:	4a 95       	dec	r20
    5434:	e2 f7       	brpl	.-8      	; 0x542e <conv_brk+0x8c>
    5436:	a8 01       	movw	r20, r16
    5438:	5c 91       	ld	r21, X
    543a:	45 2b       	or	r20, r21
    543c:	4c 93       	st	X, r20
    543e:	65 14       	cp	r6, r5
    5440:	59 f0       	breq	.+22     	; 0x5458 <conv_brk+0xb6>
    5442:	56 14       	cp	r5, r6
    5444:	10 f4       	brcc	.+4      	; 0x544a <conv_brk+0xa8>
    5446:	53 94       	inc	r5
    5448:	e7 cf       	rjmp	.-50     	; 0x5418 <conv_brk+0x76>
    544a:	5a 94       	dec	r5
    544c:	e5 cf       	rjmp	.-54     	; 0x5418 <conv_brk+0x76>
    544e:	31 e0       	ldi	r19, 0x01	; 1
    5450:	04 c0       	rjmp	.+8      	; 0x545a <conv_brk+0xb8>
    5452:	77 24       	eor	r7, r7
    5454:	73 94       	inc	r7
    5456:	01 c0       	rjmp	.+2      	; 0x545a <conv_brk+0xb8>
    5458:	71 2c       	mov	r7, r1
    545a:	01 96       	adiw	r24, 0x01	; 1
    545c:	bf cf       	rjmp	.-130    	; 0x53dc <conv_brk+0x3a>
    545e:	77 20       	and	r7, r7
    5460:	19 f0       	breq	.+6      	; 0x5468 <conv_brk+0xc6>
    5462:	8e 81       	ldd	r24, Y+6	; 0x06
    5464:	80 62       	ori	r24, 0x20	; 32
    5466:	8e 83       	std	Y+6, r24	; 0x06
    5468:	31 11       	cpse	r19, r1
    546a:	03 c0       	rjmp	.+6      	; 0x5472 <conv_brk+0xd0>
    546c:	88 24       	eor	r8, r8
    546e:	83 94       	inc	r8
    5470:	17 c0       	rjmp	.+46     	; 0x54a0 <conv_brk+0xfe>
    5472:	f6 01       	movw	r30, r12
    5474:	9e 01       	movw	r18, r28
    5476:	2f 5d       	subi	r18, 0xDF	; 223
    5478:	3f 4f       	sbci	r19, 0xFF	; 255
    547a:	80 81       	ld	r24, Z
    547c:	80 95       	com	r24
    547e:	81 93       	st	Z+, r24
    5480:	2e 17       	cp	r18, r30
    5482:	3f 07       	cpc	r19, r31
    5484:	d1 f7       	brne	.-12     	; 0x547a <conv_brk+0xd8>
    5486:	f2 cf       	rjmp	.-28     	; 0x546c <conv_brk+0xca>
    5488:	e1 14       	cp	r14, r1
    548a:	f1 04       	cpc	r15, r1
    548c:	29 f0       	breq	.+10     	; 0x5498 <conv_brk+0xf6>
    548e:	d7 01       	movw	r26, r14
    5490:	8c 93       	st	X, r24
    5492:	f7 01       	movw	r30, r14
    5494:	31 96       	adiw	r30, 0x01	; 1
    5496:	7f 01       	movw	r14, r30
    5498:	9a 94       	dec	r9
    549a:	81 2c       	mov	r8, r1
    549c:	99 20       	and	r9, r9
    549e:	f9 f0       	breq	.+62     	; 0x54de <conv_brk+0x13c>
    54a0:	c5 01       	movw	r24, r10
    54a2:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <fgetc>
    54a6:	97 fd       	sbrc	r25, 7
    54a8:	18 c0       	rjmp	.+48     	; 0x54da <conv_brk+0x138>
    54aa:	fc 01       	movw	r30, r24
    54ac:	ff 27       	eor	r31, r31
    54ae:	23 e0       	ldi	r18, 0x03	; 3
    54b0:	f5 95       	asr	r31
    54b2:	e7 95       	ror	r30
    54b4:	2a 95       	dec	r18
    54b6:	e1 f7       	brne	.-8      	; 0x54b0 <conv_brk+0x10e>
    54b8:	ec 0d       	add	r30, r12
    54ba:	fd 1d       	adc	r31, r13
    54bc:	20 81       	ld	r18, Z
    54be:	30 e0       	ldi	r19, 0x00	; 0
    54c0:	ac 01       	movw	r20, r24
    54c2:	47 70       	andi	r20, 0x07	; 7
    54c4:	55 27       	eor	r21, r21
    54c6:	02 c0       	rjmp	.+4      	; 0x54cc <conv_brk+0x12a>
    54c8:	35 95       	asr	r19
    54ca:	27 95       	ror	r18
    54cc:	4a 95       	dec	r20
    54ce:	e2 f7       	brpl	.-8      	; 0x54c8 <conv_brk+0x126>
    54d0:	20 fd       	sbrc	r18, 0
    54d2:	da cf       	rjmp	.-76     	; 0x5488 <conv_brk+0xe6>
    54d4:	b5 01       	movw	r22, r10
    54d6:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <ungetc>
    54da:	81 10       	cpse	r8, r1
    54dc:	87 cf       	rjmp	.-242    	; 0x53ec <conv_brk+0x4a>
    54de:	e1 14       	cp	r14, r1
    54e0:	f1 04       	cpc	r15, r1
    54e2:	11 f0       	breq	.+4      	; 0x54e8 <conv_brk+0x146>
    54e4:	d7 01       	movw	r26, r14
    54e6:	1c 92       	st	X, r1
    54e8:	c8 01       	movw	r24, r16
    54ea:	15 c0       	rjmp	.+42     	; 0x5516 <conv_brk+0x174>
    54ec:	42 2f       	mov	r20, r18
    54ee:	46 95       	lsr	r20
    54f0:	46 95       	lsr	r20
    54f2:	46 95       	lsr	r20
    54f4:	d6 01       	movw	r26, r12
    54f6:	a4 0f       	add	r26, r20
    54f8:	b1 1d       	adc	r27, r1
    54fa:	42 2f       	mov	r20, r18
    54fc:	47 70       	andi	r20, 0x07	; 7
    54fe:	8b 01       	movw	r16, r22
    5500:	02 c0       	rjmp	.+4      	; 0x5506 <conv_brk+0x164>
    5502:	00 0f       	add	r16, r16
    5504:	11 1f       	adc	r17, r17
    5506:	4a 95       	dec	r20
    5508:	e2 f7       	brpl	.-8      	; 0x5502 <conv_brk+0x160>
    550a:	a8 01       	movw	r20, r16
    550c:	5c 91       	ld	r21, X
    550e:	45 2b       	or	r20, r21
    5510:	4c 93       	st	X, r20
    5512:	62 2e       	mov	r6, r18
    5514:	a2 cf       	rjmp	.-188    	; 0x545a <conv_brk+0xb8>
    5516:	a0 96       	adiw	r28, 0x20	; 32
    5518:	ef e0       	ldi	r30, 0x0F	; 15
    551a:	0c 94 5e 26 	jmp	0x4cbc	; 0x4cbc <__epilogue_restores__+0x6>

0000551e <vfscanf>:
    551e:	a0 e0       	ldi	r26, 0x00	; 0
    5520:	b0 e0       	ldi	r27, 0x00	; 0
    5522:	e5 e9       	ldi	r30, 0x95	; 149
    5524:	fa e2       	ldi	r31, 0x2A	; 42
    5526:	0c 94 45 26 	jmp	0x4c8a	; 0x4c8a <__prologue_saves__+0x6>
    552a:	6c 01       	movw	r12, r24
    552c:	eb 01       	movw	r28, r22
    552e:	5a 01       	movw	r10, r20
    5530:	fc 01       	movw	r30, r24
    5532:	16 82       	std	Z+6, r1	; 0x06
    5534:	17 82       	std	Z+7, r1	; 0x07
    5536:	51 2c       	mov	r5, r1
    5538:	f6 01       	movw	r30, r12
    553a:	e3 80       	ldd	r14, Z+3	; 0x03
    553c:	fe 01       	movw	r30, r28
    553e:	e3 fc       	sbrc	r14, 3
    5540:	85 91       	lpm	r24, Z+
    5542:	e3 fe       	sbrs	r14, 3
    5544:	81 91       	ld	r24, Z+
    5546:	18 2f       	mov	r17, r24
    5548:	ef 01       	movw	r28, r30
    554a:	88 23       	and	r24, r24
    554c:	09 f4       	brne	.+2      	; 0x5550 <vfscanf+0x32>
    554e:	ee c0       	rjmp	.+476    	; 0x572c <vfscanf+0x20e>
    5550:	90 e0       	ldi	r25, 0x00	; 0
    5552:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <isspace>
    5556:	89 2b       	or	r24, r25
    5558:	21 f0       	breq	.+8      	; 0x5562 <vfscanf+0x44>
    555a:	c6 01       	movw	r24, r12
    555c:	0e 94 26 29 	call	0x524c	; 0x524c <skip_spaces>
    5560:	eb cf       	rjmp	.-42     	; 0x5538 <vfscanf+0x1a>
    5562:	15 32       	cpi	r17, 0x25	; 37
    5564:	41 f4       	brne	.+16     	; 0x5576 <vfscanf+0x58>
    5566:	fe 01       	movw	r30, r28
    5568:	e3 fc       	sbrc	r14, 3
    556a:	15 91       	lpm	r17, Z+
    556c:	e3 fe       	sbrs	r14, 3
    556e:	11 91       	ld	r17, Z+
    5570:	ef 01       	movw	r28, r30
    5572:	15 32       	cpi	r17, 0x25	; 37
    5574:	81 f4       	brne	.+32     	; 0x5596 <vfscanf+0x78>
    5576:	c6 01       	movw	r24, r12
    5578:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <fgetc>
    557c:	97 fd       	sbrc	r25, 7
    557e:	d4 c0       	rjmp	.+424    	; 0x5728 <vfscanf+0x20a>
    5580:	41 2f       	mov	r20, r17
    5582:	50 e0       	ldi	r21, 0x00	; 0
    5584:	9c 01       	movw	r18, r24
    5586:	33 27       	eor	r19, r19
    5588:	24 17       	cp	r18, r20
    558a:	35 07       	cpc	r19, r21
    558c:	a9 f2       	breq	.-86     	; 0x5538 <vfscanf+0x1a>
    558e:	b6 01       	movw	r22, r12
    5590:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <ungetc>
    5594:	cb c0       	rjmp	.+406    	; 0x572c <vfscanf+0x20e>
    5596:	1a 32       	cpi	r17, 0x2A	; 42
    5598:	39 f4       	brne	.+14     	; 0x55a8 <vfscanf+0x8a>
    559a:	e3 fc       	sbrc	r14, 3
    559c:	15 91       	lpm	r17, Z+
    559e:	e3 fe       	sbrs	r14, 3
    55a0:	11 91       	ld	r17, Z+
    55a2:	ef 01       	movw	r28, r30
    55a4:	01 e0       	ldi	r16, 0x01	; 1
    55a6:	01 c0       	rjmp	.+2      	; 0x55aa <vfscanf+0x8c>
    55a8:	00 e0       	ldi	r16, 0x00	; 0
    55aa:	f1 2c       	mov	r15, r1
    55ac:	20 ed       	ldi	r18, 0xD0	; 208
    55ae:	21 0f       	add	r18, r17
    55b0:	2a 30       	cpi	r18, 0x0A	; 10
    55b2:	80 f4       	brcc	.+32     	; 0x55d4 <vfscanf+0xb6>
    55b4:	02 60       	ori	r16, 0x02	; 2
    55b6:	6f 2d       	mov	r22, r15
    55b8:	70 e0       	ldi	r23, 0x00	; 0
    55ba:	80 e0       	ldi	r24, 0x00	; 0
    55bc:	90 e0       	ldi	r25, 0x00	; 0
    55be:	40 e2       	ldi	r20, 0x20	; 32
    55c0:	0e 94 ff 28 	call	0x51fe	; 0x51fe <mulacc>
    55c4:	f6 2e       	mov	r15, r22
    55c6:	fe 01       	movw	r30, r28
    55c8:	e3 fc       	sbrc	r14, 3
    55ca:	15 91       	lpm	r17, Z+
    55cc:	e3 fe       	sbrs	r14, 3
    55ce:	11 91       	ld	r17, Z+
    55d0:	ef 01       	movw	r28, r30
    55d2:	ec cf       	rjmp	.-40     	; 0x55ac <vfscanf+0x8e>
    55d4:	01 ff       	sbrs	r16, 1
    55d6:	03 c0       	rjmp	.+6      	; 0x55de <vfscanf+0xc0>
    55d8:	f1 10       	cpse	r15, r1
    55da:	03 c0       	rjmp	.+6      	; 0x55e2 <vfscanf+0xc4>
    55dc:	a7 c0       	rjmp	.+334    	; 0x572c <vfscanf+0x20e>
    55de:	ff 24       	eor	r15, r15
    55e0:	fa 94       	dec	r15
    55e2:	18 36       	cpi	r17, 0x68	; 104
    55e4:	19 f0       	breq	.+6      	; 0x55ec <vfscanf+0xce>
    55e6:	1c 36       	cpi	r17, 0x6C	; 108
    55e8:	51 f0       	breq	.+20     	; 0x55fe <vfscanf+0xe0>
    55ea:	10 c0       	rjmp	.+32     	; 0x560c <vfscanf+0xee>
    55ec:	fe 01       	movw	r30, r28
    55ee:	e3 fc       	sbrc	r14, 3
    55f0:	15 91       	lpm	r17, Z+
    55f2:	e3 fe       	sbrs	r14, 3
    55f4:	11 91       	ld	r17, Z+
    55f6:	ef 01       	movw	r28, r30
    55f8:	18 36       	cpi	r17, 0x68	; 104
    55fa:	41 f4       	brne	.+16     	; 0x560c <vfscanf+0xee>
    55fc:	08 60       	ori	r16, 0x08	; 8
    55fe:	04 60       	ori	r16, 0x04	; 4
    5600:	fe 01       	movw	r30, r28
    5602:	e3 fc       	sbrc	r14, 3
    5604:	15 91       	lpm	r17, Z+
    5606:	e3 fe       	sbrs	r14, 3
    5608:	11 91       	ld	r17, Z+
    560a:	ef 01       	movw	r28, r30
    560c:	11 23       	and	r17, r17
    560e:	09 f4       	brne	.+2      	; 0x5612 <vfscanf+0xf4>
    5610:	8d c0       	rjmp	.+282    	; 0x572c <vfscanf+0x20e>
    5612:	61 2f       	mov	r22, r17
    5614:	70 e0       	ldi	r23, 0x00	; 0
    5616:	86 e6       	ldi	r24, 0x66	; 102
    5618:	92 e0       	ldi	r25, 0x02	; 2
    561a:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <strchr_P>
    561e:	89 2b       	or	r24, r25
    5620:	09 f4       	brne	.+2      	; 0x5624 <vfscanf+0x106>
    5622:	84 c0       	rjmp	.+264    	; 0x572c <vfscanf+0x20e>
    5624:	00 fd       	sbrc	r16, 0
    5626:	07 c0       	rjmp	.+14     	; 0x5636 <vfscanf+0x118>
    5628:	f5 01       	movw	r30, r10
    562a:	80 80       	ld	r8, Z
    562c:	91 80       	ldd	r9, Z+1	; 0x01
    562e:	c5 01       	movw	r24, r10
    5630:	02 96       	adiw	r24, 0x02	; 2
    5632:	5c 01       	movw	r10, r24
    5634:	02 c0       	rjmp	.+4      	; 0x563a <vfscanf+0x11c>
    5636:	81 2c       	mov	r8, r1
    5638:	91 2c       	mov	r9, r1
    563a:	1e 36       	cpi	r17, 0x6E	; 110
    563c:	51 f4       	brne	.+20     	; 0x5652 <vfscanf+0x134>
    563e:	f6 01       	movw	r30, r12
    5640:	46 81       	ldd	r20, Z+6	; 0x06
    5642:	57 81       	ldd	r21, Z+7	; 0x07
    5644:	60 e0       	ldi	r22, 0x00	; 0
    5646:	70 e0       	ldi	r23, 0x00	; 0
    5648:	20 2f       	mov	r18, r16
    564a:	c4 01       	movw	r24, r8
    564c:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <putval>
    5650:	73 cf       	rjmp	.-282    	; 0x5538 <vfscanf+0x1a>
    5652:	13 36       	cpi	r17, 0x63	; 99
    5654:	a9 f4       	brne	.+42     	; 0x5680 <vfscanf+0x162>
    5656:	01 fd       	sbrc	r16, 1
    5658:	02 c0       	rjmp	.+4      	; 0x565e <vfscanf+0x140>
    565a:	ff 24       	eor	r15, r15
    565c:	f3 94       	inc	r15
    565e:	c6 01       	movw	r24, r12
    5660:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <fgetc>
    5664:	97 fd       	sbrc	r25, 7
    5666:	60 c0       	rjmp	.+192    	; 0x5728 <vfscanf+0x20a>
    5668:	81 14       	cp	r8, r1
    566a:	91 04       	cpc	r9, r1
    566c:	29 f0       	breq	.+10     	; 0x5678 <vfscanf+0x15a>
    566e:	f4 01       	movw	r30, r8
    5670:	80 83       	st	Z, r24
    5672:	c4 01       	movw	r24, r8
    5674:	01 96       	adiw	r24, 0x01	; 1
    5676:	4c 01       	movw	r8, r24
    5678:	fa 94       	dec	r15
    567a:	f1 10       	cpse	r15, r1
    567c:	f0 cf       	rjmp	.-32     	; 0x565e <vfscanf+0x140>
    567e:	50 c0       	rjmp	.+160    	; 0x5720 <vfscanf+0x202>
    5680:	1b 35       	cpi	r17, 0x5B	; 91
    5682:	59 f4       	brne	.+22     	; 0x569a <vfscanf+0x17c>
    5684:	9e 01       	movw	r18, r28
    5686:	a4 01       	movw	r20, r8
    5688:	6f 2d       	mov	r22, r15
    568a:	c6 01       	movw	r24, r12
    568c:	0e 94 d1 29 	call	0x53a2	; 0x53a2 <conv_brk>
    5690:	ec 01       	movw	r28, r24
    5692:	89 2b       	or	r24, r25
    5694:	09 f0       	breq	.+2      	; 0x5698 <vfscanf+0x17a>
    5696:	44 c0       	rjmp	.+136    	; 0x5720 <vfscanf+0x202>
    5698:	3e c0       	rjmp	.+124    	; 0x5716 <vfscanf+0x1f8>
    569a:	c6 01       	movw	r24, r12
    569c:	0e 94 26 29 	call	0x524c	; 0x524c <skip_spaces>
    56a0:	97 fd       	sbrc	r25, 7
    56a2:	42 c0       	rjmp	.+132    	; 0x5728 <vfscanf+0x20a>
    56a4:	1f 36       	cpi	r17, 0x6F	; 111
    56a6:	61 f1       	breq	.+88     	; 0x5700 <vfscanf+0x1e2>
    56a8:	28 f4       	brcc	.+10     	; 0x56b4 <vfscanf+0x196>
    56aa:	14 36       	cpi	r17, 0x64	; 100
    56ac:	39 f1       	breq	.+78     	; 0x56fc <vfscanf+0x1de>
    56ae:	19 36       	cpi	r17, 0x69	; 105
    56b0:	51 f1       	breq	.+84     	; 0x5706 <vfscanf+0x1e8>
    56b2:	28 c0       	rjmp	.+80     	; 0x5704 <vfscanf+0x1e6>
    56b4:	13 37       	cpi	r17, 0x73	; 115
    56b6:	71 f0       	breq	.+28     	; 0x56d4 <vfscanf+0x1b6>
    56b8:	15 37       	cpi	r17, 0x75	; 117
    56ba:	01 f1       	breq	.+64     	; 0x56fc <vfscanf+0x1de>
    56bc:	23 c0       	rjmp	.+70     	; 0x5704 <vfscanf+0x1e6>
    56be:	81 14       	cp	r8, r1
    56c0:	91 04       	cpc	r9, r1
    56c2:	29 f0       	breq	.+10     	; 0x56ce <vfscanf+0x1b0>
    56c4:	f4 01       	movw	r30, r8
    56c6:	60 82       	st	Z, r6
    56c8:	c4 01       	movw	r24, r8
    56ca:	01 96       	adiw	r24, 0x01	; 1
    56cc:	4c 01       	movw	r8, r24
    56ce:	fa 94       	dec	r15
    56d0:	ff 20       	and	r15, r15
    56d2:	71 f0       	breq	.+28     	; 0x56f0 <vfscanf+0x1d2>
    56d4:	c6 01       	movw	r24, r12
    56d6:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <fgetc>
    56da:	3c 01       	movw	r6, r24
    56dc:	97 fd       	sbrc	r25, 7
    56de:	08 c0       	rjmp	.+16     	; 0x56f0 <vfscanf+0x1d2>
    56e0:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <isspace>
    56e4:	89 2b       	or	r24, r25
    56e6:	59 f3       	breq	.-42     	; 0x56be <vfscanf+0x1a0>
    56e8:	b6 01       	movw	r22, r12
    56ea:	c3 01       	movw	r24, r6
    56ec:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <ungetc>
    56f0:	81 14       	cp	r8, r1
    56f2:	91 04       	cpc	r9, r1
    56f4:	a9 f0       	breq	.+42     	; 0x5720 <vfscanf+0x202>
    56f6:	f4 01       	movw	r30, r8
    56f8:	10 82       	st	Z, r1
    56fa:	12 c0       	rjmp	.+36     	; 0x5720 <vfscanf+0x202>
    56fc:	00 62       	ori	r16, 0x20	; 32
    56fe:	03 c0       	rjmp	.+6      	; 0x5706 <vfscanf+0x1e8>
    5700:	00 61       	ori	r16, 0x10	; 16
    5702:	01 c0       	rjmp	.+2      	; 0x5706 <vfscanf+0x1e8>
    5704:	00 64       	ori	r16, 0x40	; 64
    5706:	20 2f       	mov	r18, r16
    5708:	a4 01       	movw	r20, r8
    570a:	6f 2d       	mov	r22, r15
    570c:	c6 01       	movw	r24, r12
    570e:	0e 94 3f 29 	call	0x527e	; 0x527e <conv_int>
    5712:	81 11       	cpse	r24, r1
    5714:	05 c0       	rjmp	.+10     	; 0x5720 <vfscanf+0x202>
    5716:	f6 01       	movw	r30, r12
    5718:	83 81       	ldd	r24, Z+3	; 0x03
    571a:	80 73       	andi	r24, 0x30	; 48
    571c:	29 f4       	brne	.+10     	; 0x5728 <vfscanf+0x20a>
    571e:	06 c0       	rjmp	.+12     	; 0x572c <vfscanf+0x20e>
    5720:	00 fd       	sbrc	r16, 0
    5722:	0a cf       	rjmp	.-492    	; 0x5538 <vfscanf+0x1a>
    5724:	53 94       	inc	r5
    5726:	08 cf       	rjmp	.-496    	; 0x5538 <vfscanf+0x1a>
    5728:	55 20       	and	r5, r5
    572a:	19 f0       	breq	.+6      	; 0x5732 <vfscanf+0x214>
    572c:	85 2d       	mov	r24, r5
    572e:	90 e0       	ldi	r25, 0x00	; 0
    5730:	02 c0       	rjmp	.+4      	; 0x5736 <vfscanf+0x218>
    5732:	8f ef       	ldi	r24, 0xFF	; 255
    5734:	9f ef       	ldi	r25, 0xFF	; 255
    5736:	cd b7       	in	r28, 0x3d	; 61
    5738:	de b7       	in	r29, 0x3e	; 62
    573a:	ef e0       	ldi	r30, 0x0F	; 15
    573c:	0c 94 5e 26 	jmp	0x4cbc	; 0x4cbc <__epilogue_restores__+0x6>

00005740 <strtod>:
    5740:	a0 e0       	ldi	r26, 0x00	; 0
    5742:	b0 e0       	ldi	r27, 0x00	; 0
    5744:	e6 ea       	ldi	r30, 0xA6	; 166
    5746:	fb e2       	ldi	r31, 0x2B	; 43
    5748:	0c 94 48 26 	jmp	0x4c90	; 0x4c90 <__prologue_saves__+0xc>
    574c:	ec 01       	movw	r28, r24
    574e:	6b 01       	movw	r12, r22
    5750:	61 15       	cp	r22, r1
    5752:	71 05       	cpc	r23, r1
    5754:	19 f0       	breq	.+6      	; 0x575c <strtod+0x1c>
    5756:	fb 01       	movw	r30, r22
    5758:	80 83       	st	Z, r24
    575a:	91 83       	std	Z+1, r25	; 0x01
    575c:	7e 01       	movw	r14, r28
    575e:	ff ef       	ldi	r31, 0xFF	; 255
    5760:	ef 1a       	sub	r14, r31
    5762:	ff 0a       	sbc	r15, r31
    5764:	08 81       	ld	r16, Y
    5766:	80 2f       	mov	r24, r16
    5768:	90 e0       	ldi	r25, 0x00	; 0
    576a:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <isspace>
    576e:	89 2b       	or	r24, r25
    5770:	11 f0       	breq	.+4      	; 0x5776 <strtod+0x36>
    5772:	e7 01       	movw	r28, r14
    5774:	f3 cf       	rjmp	.-26     	; 0x575c <strtod+0x1c>
    5776:	0d 32       	cpi	r16, 0x2D	; 45
    5778:	39 f4       	brne	.+14     	; 0x5788 <strtod+0x48>
    577a:	7e 01       	movw	r14, r28
    577c:	82 e0       	ldi	r24, 0x02	; 2
    577e:	e8 0e       	add	r14, r24
    5780:	f1 1c       	adc	r15, r1
    5782:	09 81       	ldd	r16, Y+1	; 0x01
    5784:	11 e0       	ldi	r17, 0x01	; 1
    5786:	08 c0       	rjmp	.+16     	; 0x5798 <strtod+0x58>
    5788:	0b 32       	cpi	r16, 0x2B	; 43
    578a:	29 f4       	brne	.+10     	; 0x5796 <strtod+0x56>
    578c:	7e 01       	movw	r14, r28
    578e:	92 e0       	ldi	r25, 0x02	; 2
    5790:	e9 0e       	add	r14, r25
    5792:	f1 1c       	adc	r15, r1
    5794:	09 81       	ldd	r16, Y+1	; 0x01
    5796:	10 e0       	ldi	r17, 0x00	; 0
    5798:	e7 01       	movw	r28, r14
    579a:	21 97       	sbiw	r28, 0x01	; 1
    579c:	43 e0       	ldi	r20, 0x03	; 3
    579e:	50 e0       	ldi	r21, 0x00	; 0
    57a0:	6a e7       	ldi	r22, 0x7A	; 122
    57a2:	72 e0       	ldi	r23, 0x02	; 2
    57a4:	ce 01       	movw	r24, r28
    57a6:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <strncasecmp_P>
    57aa:	89 2b       	or	r24, r25
    57ac:	c1 f4       	brne	.+48     	; 0x57de <strtod+0x9e>
    57ae:	23 96       	adiw	r28, 0x03	; 3
    57b0:	45 e0       	ldi	r20, 0x05	; 5
    57b2:	50 e0       	ldi	r21, 0x00	; 0
    57b4:	65 e7       	ldi	r22, 0x75	; 117
    57b6:	72 e0       	ldi	r23, 0x02	; 2
    57b8:	ce 01       	movw	r24, r28
    57ba:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <strncasecmp_P>
    57be:	89 2b       	or	r24, r25
    57c0:	09 f4       	brne	.+2      	; 0x57c4 <strtod+0x84>
    57c2:	25 96       	adiw	r28, 0x05	; 5
    57c4:	c1 14       	cp	r12, r1
    57c6:	d1 04       	cpc	r13, r1
    57c8:	19 f0       	breq	.+6      	; 0x57d0 <strtod+0x90>
    57ca:	f6 01       	movw	r30, r12
    57cc:	c0 83       	st	Z, r28
    57ce:	d1 83       	std	Z+1, r29	; 0x01
    57d0:	11 11       	cpse	r17, r1
    57d2:	f6 c0       	rjmp	.+492    	; 0x59c0 <strtod+0x280>
    57d4:	60 e0       	ldi	r22, 0x00	; 0
    57d6:	70 e0       	ldi	r23, 0x00	; 0
    57d8:	80 e8       	ldi	r24, 0x80	; 128
    57da:	9f e7       	ldi	r25, 0x7F	; 127
    57dc:	fa c0       	rjmp	.+500    	; 0x59d2 <strtod+0x292>
    57de:	43 e0       	ldi	r20, 0x03	; 3
    57e0:	50 e0       	ldi	r21, 0x00	; 0
    57e2:	62 e7       	ldi	r22, 0x72	; 114
    57e4:	72 e0       	ldi	r23, 0x02	; 2
    57e6:	ce 01       	movw	r24, r28
    57e8:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <strncasecmp_P>
    57ec:	89 2b       	or	r24, r25
    57ee:	59 f4       	brne	.+22     	; 0x5806 <strtod+0xc6>
    57f0:	c1 14       	cp	r12, r1
    57f2:	d1 04       	cpc	r13, r1
    57f4:	09 f4       	brne	.+2      	; 0x57f8 <strtod+0xb8>
    57f6:	e9 c0       	rjmp	.+466    	; 0x59ca <strtod+0x28a>
    57f8:	f2 e0       	ldi	r31, 0x02	; 2
    57fa:	ef 0e       	add	r14, r31
    57fc:	f1 1c       	adc	r15, r1
    57fe:	f6 01       	movw	r30, r12
    5800:	e0 82       	st	Z, r14
    5802:	f1 82       	std	Z+1, r15	; 0x01
    5804:	e2 c0       	rjmp	.+452    	; 0x59ca <strtod+0x28a>
    5806:	20 e0       	ldi	r18, 0x00	; 0
    5808:	30 e0       	ldi	r19, 0x00	; 0
    580a:	a9 01       	movw	r20, r18
    580c:	c0 e0       	ldi	r28, 0x00	; 0
    580e:	d0 e0       	ldi	r29, 0x00	; 0
    5810:	f7 01       	movw	r30, r14
    5812:	80 ed       	ldi	r24, 0xD0	; 208
    5814:	a8 2e       	mov	r10, r24
    5816:	a0 0e       	add	r10, r16
    5818:	89 e0       	ldi	r24, 0x09	; 9
    581a:	8a 15       	cp	r24, r10
    581c:	30 f1       	brcs	.+76     	; 0x586a <strtod+0x12a>
    581e:	91 2f       	mov	r25, r17
    5820:	92 60       	ori	r25, 0x02	; 2
    5822:	b9 2e       	mov	r11, r25
    5824:	81 2f       	mov	r24, r17
    5826:	88 70       	andi	r24, 0x08	; 8
    5828:	12 ff       	sbrs	r17, 2
    582a:	04 c0       	rjmp	.+8      	; 0x5834 <strtod+0xf4>
    582c:	81 11       	cpse	r24, r1
    582e:	24 c0       	rjmp	.+72     	; 0x5878 <strtod+0x138>
    5830:	21 96       	adiw	r28, 0x01	; 1
    5832:	22 c0       	rjmp	.+68     	; 0x5878 <strtod+0x138>
    5834:	81 11       	cpse	r24, r1
    5836:	21 97       	sbiw	r28, 0x01	; 1
    5838:	a5 e0       	ldi	r26, 0x05	; 5
    583a:	b0 e0       	ldi	r27, 0x00	; 0
    583c:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <__muluhisi3>
    5840:	dc 01       	movw	r26, r24
    5842:	cb 01       	movw	r24, r22
    5844:	88 0f       	add	r24, r24
    5846:	99 1f       	adc	r25, r25
    5848:	aa 1f       	adc	r26, r26
    584a:	bb 1f       	adc	r27, r27
    584c:	9c 01       	movw	r18, r24
    584e:	ad 01       	movw	r20, r26
    5850:	2a 0d       	add	r18, r10
    5852:	31 1d       	adc	r19, r1
    5854:	41 1d       	adc	r20, r1
    5856:	51 1d       	adc	r21, r1
    5858:	28 39       	cpi	r18, 0x98	; 152
    585a:	89 e9       	ldi	r24, 0x99	; 153
    585c:	38 07       	cpc	r19, r24
    585e:	48 07       	cpc	r20, r24
    5860:	89 e1       	ldi	r24, 0x19	; 25
    5862:	58 07       	cpc	r21, r24
    5864:	48 f0       	brcs	.+18     	; 0x5878 <strtod+0x138>
    5866:	16 60       	ori	r17, 0x06	; 6
    5868:	06 c0       	rjmp	.+12     	; 0x5876 <strtod+0x136>
    586a:	9e ef       	ldi	r25, 0xFE	; 254
    586c:	a9 12       	cpse	r10, r25
    586e:	0a c0       	rjmp	.+20     	; 0x5884 <strtod+0x144>
    5870:	13 fd       	sbrc	r17, 3
    5872:	40 c0       	rjmp	.+128    	; 0x58f4 <strtod+0x1b4>
    5874:	18 60       	ori	r17, 0x08	; 8
    5876:	b1 2e       	mov	r11, r17
    5878:	8f ef       	ldi	r24, 0xFF	; 255
    587a:	e8 1a       	sub	r14, r24
    587c:	f8 0a       	sbc	r15, r24
    587e:	00 81       	ld	r16, Z
    5880:	1b 2d       	mov	r17, r11
    5882:	c6 cf       	rjmp	.-116    	; 0x5810 <strtod+0xd0>
    5884:	80 2f       	mov	r24, r16
    5886:	8f 7d       	andi	r24, 0xDF	; 223
    5888:	85 34       	cpi	r24, 0x45	; 69
    588a:	a1 f5       	brne	.+104    	; 0x58f4 <strtod+0x1b4>
    588c:	80 81       	ld	r24, Z
    588e:	8d 32       	cpi	r24, 0x2D	; 45
    5890:	11 f4       	brne	.+4      	; 0x5896 <strtod+0x156>
    5892:	10 61       	ori	r17, 0x10	; 16
    5894:	06 c0       	rjmp	.+12     	; 0x58a2 <strtod+0x162>
    5896:	8b 32       	cpi	r24, 0x2B	; 43
    5898:	21 f0       	breq	.+8      	; 0x58a2 <strtod+0x162>
    589a:	31 96       	adiw	r30, 0x01	; 1
    589c:	61 e0       	ldi	r22, 0x01	; 1
    589e:	70 e0       	ldi	r23, 0x00	; 0
    58a0:	04 c0       	rjmp	.+8      	; 0x58aa <strtod+0x16a>
    58a2:	81 81       	ldd	r24, Z+1	; 0x01
    58a4:	32 96       	adiw	r30, 0x02	; 2
    58a6:	62 e0       	ldi	r22, 0x02	; 2
    58a8:	70 e0       	ldi	r23, 0x00	; 0
    58aa:	80 53       	subi	r24, 0x30	; 48
    58ac:	8a 30       	cpi	r24, 0x0A	; 10
    58ae:	18 f0       	brcs	.+6      	; 0x58b6 <strtod+0x176>
    58b0:	e6 1b       	sub	r30, r22
    58b2:	f7 0b       	sbc	r31, r23
    58b4:	1f c0       	rjmp	.+62     	; 0x58f4 <strtod+0x1b4>
    58b6:	60 e0       	ldi	r22, 0x00	; 0
    58b8:	70 e0       	ldi	r23, 0x00	; 0
    58ba:	60 38       	cpi	r22, 0x80	; 128
    58bc:	9c e0       	ldi	r25, 0x0C	; 12
    58be:	79 07       	cpc	r23, r25
    58c0:	5c f4       	brge	.+22     	; 0x58d8 <strtod+0x198>
    58c2:	db 01       	movw	r26, r22
    58c4:	aa 0f       	add	r26, r26
    58c6:	bb 1f       	adc	r27, r27
    58c8:	aa 0f       	add	r26, r26
    58ca:	bb 1f       	adc	r27, r27
    58cc:	6a 0f       	add	r22, r26
    58ce:	7b 1f       	adc	r23, r27
    58d0:	66 0f       	add	r22, r22
    58d2:	77 1f       	adc	r23, r23
    58d4:	68 0f       	add	r22, r24
    58d6:	71 1d       	adc	r23, r1
    58d8:	31 96       	adiw	r30, 0x01	; 1
    58da:	df 01       	movw	r26, r30
    58dc:	11 97       	sbiw	r26, 0x01	; 1
    58de:	8c 91       	ld	r24, X
    58e0:	80 53       	subi	r24, 0x30	; 48
    58e2:	8a 30       	cpi	r24, 0x0A	; 10
    58e4:	50 f3       	brcs	.-44     	; 0x58ba <strtod+0x17a>
    58e6:	14 ff       	sbrs	r17, 4
    58e8:	03 c0       	rjmp	.+6      	; 0x58f0 <strtod+0x1b0>
    58ea:	71 95       	neg	r23
    58ec:	61 95       	neg	r22
    58ee:	71 09       	sbc	r23, r1
    58f0:	c6 0f       	add	r28, r22
    58f2:	d7 1f       	adc	r29, r23
    58f4:	11 ff       	sbrs	r17, 1
    58f6:	08 c0       	rjmp	.+16     	; 0x5908 <strtod+0x1c8>
    58f8:	c1 14       	cp	r12, r1
    58fa:	d1 04       	cpc	r13, r1
    58fc:	29 f0       	breq	.+10     	; 0x5908 <strtod+0x1c8>
    58fe:	cf 01       	movw	r24, r30
    5900:	01 97       	sbiw	r24, 0x01	; 1
    5902:	f6 01       	movw	r30, r12
    5904:	80 83       	st	Z, r24
    5906:	91 83       	std	Z+1, r25	; 0x01
    5908:	ca 01       	movw	r24, r20
    590a:	b9 01       	movw	r22, r18
    590c:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__floatunsisf>
    5910:	21 2f       	mov	r18, r17
    5912:	23 70       	andi	r18, 0x03	; 3
    5914:	23 30       	cpi	r18, 0x03	; 3
    5916:	19 f0       	breq	.+6      	; 0x591e <strtod+0x1de>
    5918:	4b 01       	movw	r8, r22
    591a:	5c 01       	movw	r10, r24
    591c:	06 c0       	rjmp	.+12     	; 0x592a <strtod+0x1ea>
    591e:	4b 01       	movw	r8, r22
    5920:	5c 01       	movw	r10, r24
    5922:	b7 fa       	bst	r11, 7
    5924:	b0 94       	com	r11
    5926:	b7 f8       	bld	r11, 7
    5928:	b0 94       	com	r11
    592a:	20 e0       	ldi	r18, 0x00	; 0
    592c:	30 e0       	ldi	r19, 0x00	; 0
    592e:	a9 01       	movw	r20, r18
    5930:	c5 01       	movw	r24, r10
    5932:	b4 01       	movw	r22, r8
    5934:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__cmpsf2>
    5938:	88 23       	and	r24, r24
    593a:	09 f4       	brne	.+2      	; 0x593e <strtod+0x1fe>
    593c:	3e c0       	rjmp	.+124    	; 0x59ba <strtod+0x27a>
    593e:	d7 ff       	sbrs	r29, 7
    5940:	06 c0       	rjmp	.+12     	; 0x594e <strtod+0x20e>
    5942:	d1 95       	neg	r29
    5944:	c1 95       	neg	r28
    5946:	d1 09       	sbc	r29, r1
    5948:	01 e9       	ldi	r16, 0x91	; 145
    594a:	12 e0       	ldi	r17, 0x02	; 2
    594c:	02 c0       	rjmp	.+4      	; 0x5952 <strtod+0x212>
    594e:	09 ea       	ldi	r16, 0xA9	; 169
    5950:	12 e0       	ldi	r17, 0x02	; 2
    5952:	68 01       	movw	r12, r16
    5954:	f8 e1       	ldi	r31, 0x18	; 24
    5956:	cf 1a       	sub	r12, r31
    5958:	d1 08       	sbc	r13, r1
    595a:	90 e2       	ldi	r25, 0x20	; 32
    595c:	e9 2e       	mov	r14, r25
    595e:	f1 2c       	mov	r15, r1
    5960:	ce 15       	cp	r28, r14
    5962:	df 05       	cpc	r29, r15
    5964:	74 f0       	brlt	.+28     	; 0x5982 <strtod+0x242>
    5966:	f8 01       	movw	r30, r16
    5968:	25 91       	lpm	r18, Z+
    596a:	35 91       	lpm	r19, Z+
    596c:	45 91       	lpm	r20, Z+
    596e:	54 91       	lpm	r21, Z
    5970:	c5 01       	movw	r24, r10
    5972:	b4 01       	movw	r22, r8
    5974:	0e 94 14 22 	call	0x4428	; 0x4428 <__mulsf3>
    5978:	4b 01       	movw	r8, r22
    597a:	5c 01       	movw	r10, r24
    597c:	ce 19       	sub	r28, r14
    597e:	df 09       	sbc	r29, r15
    5980:	ef cf       	rjmp	.-34     	; 0x5960 <strtod+0x220>
    5982:	04 50       	subi	r16, 0x04	; 4
    5984:	11 09       	sbc	r17, r1
    5986:	f5 94       	asr	r15
    5988:	e7 94       	ror	r14
    598a:	0c 15       	cp	r16, r12
    598c:	1d 05       	cpc	r17, r13
    598e:	41 f7       	brne	.-48     	; 0x5960 <strtod+0x220>
    5990:	8a 2d       	mov	r24, r10
    5992:	88 0f       	add	r24, r24
    5994:	8b 2d       	mov	r24, r11
    5996:	88 1f       	adc	r24, r24
    5998:	8f 3f       	cpi	r24, 0xFF	; 255
    599a:	49 f0       	breq	.+18     	; 0x59ae <strtod+0x26e>
    599c:	20 e0       	ldi	r18, 0x00	; 0
    599e:	30 e0       	ldi	r19, 0x00	; 0
    59a0:	a9 01       	movw	r20, r18
    59a2:	c5 01       	movw	r24, r10
    59a4:	b4 01       	movw	r22, r8
    59a6:	0e 94 e6 20 	call	0x41cc	; 0x41cc <__cmpsf2>
    59aa:	81 11       	cpse	r24, r1
    59ac:	06 c0       	rjmp	.+12     	; 0x59ba <strtod+0x27a>
    59ae:	82 e2       	ldi	r24, 0x22	; 34
    59b0:	90 e0       	ldi	r25, 0x00	; 0
    59b2:	80 93 4f 30 	sts	0x304F, r24	; 0x80304f <errno>
    59b6:	90 93 50 30 	sts	0x3050, r25	; 0x803050 <errno+0x1>
    59ba:	c5 01       	movw	r24, r10
    59bc:	b4 01       	movw	r22, r8
    59be:	09 c0       	rjmp	.+18     	; 0x59d2 <strtod+0x292>
    59c0:	60 e0       	ldi	r22, 0x00	; 0
    59c2:	70 e0       	ldi	r23, 0x00	; 0
    59c4:	80 e8       	ldi	r24, 0x80	; 128
    59c6:	9f ef       	ldi	r25, 0xFF	; 255
    59c8:	04 c0       	rjmp	.+8      	; 0x59d2 <strtod+0x292>
    59ca:	60 e0       	ldi	r22, 0x00	; 0
    59cc:	70 e0       	ldi	r23, 0x00	; 0
    59ce:	80 ec       	ldi	r24, 0xC0	; 192
    59d0:	9f e7       	ldi	r25, 0x7F	; 127
    59d2:	cd b7       	in	r28, 0x3d	; 61
    59d4:	de b7       	in	r29, 0x3e	; 62
    59d6:	ec e0       	ldi	r30, 0x0C	; 12
    59d8:	0c 94 61 26 	jmp	0x4cc2	; 0x4cc2 <__epilogue_restores__+0xc>

000059dc <isspace>:
    59dc:	91 11       	cpse	r25, r1
    59de:	0c 94 71 2d 	jmp	0x5ae2	; 0x5ae2 <__ctype_isfalse>
    59e2:	80 32       	cpi	r24, 0x20	; 32
    59e4:	19 f0       	breq	.+6      	; 0x59ec <isspace+0x10>
    59e6:	89 50       	subi	r24, 0x09	; 9
    59e8:	85 50       	subi	r24, 0x05	; 5
    59ea:	c8 f7       	brcc	.-14     	; 0x59de <isspace+0x2>
    59ec:	08 95       	ret

000059ee <strchr_P>:
    59ee:	fc 01       	movw	r30, r24
    59f0:	05 90       	lpm	r0, Z+
    59f2:	06 16       	cp	r0, r22
    59f4:	21 f0       	breq	.+8      	; 0x59fe <strchr_P+0x10>
    59f6:	00 20       	and	r0, r0
    59f8:	d9 f7       	brne	.-10     	; 0x59f0 <strchr_P+0x2>
    59fa:	c0 01       	movw	r24, r0
    59fc:	08 95       	ret
    59fe:	31 97       	sbiw	r30, 0x01	; 1
    5a00:	cf 01       	movw	r24, r30
    5a02:	08 95       	ret

00005a04 <strncasecmp_P>:
    5a04:	fb 01       	movw	r30, r22
    5a06:	dc 01       	movw	r26, r24
    5a08:	41 50       	subi	r20, 0x01	; 1
    5a0a:	50 40       	sbci	r21, 0x00	; 0
    5a0c:	88 f0       	brcs	.+34     	; 0x5a30 <strncasecmp_P+0x2c>
    5a0e:	8d 91       	ld	r24, X+
    5a10:	81 34       	cpi	r24, 0x41	; 65
    5a12:	1c f0       	brlt	.+6      	; 0x5a1a <strncasecmp_P+0x16>
    5a14:	8b 35       	cpi	r24, 0x5B	; 91
    5a16:	0c f4       	brge	.+2      	; 0x5a1a <strncasecmp_P+0x16>
    5a18:	80 5e       	subi	r24, 0xE0	; 224
    5a1a:	65 91       	lpm	r22, Z+
    5a1c:	61 34       	cpi	r22, 0x41	; 65
    5a1e:	1c f0       	brlt	.+6      	; 0x5a26 <strncasecmp_P+0x22>
    5a20:	6b 35       	cpi	r22, 0x5B	; 91
    5a22:	0c f4       	brge	.+2      	; 0x5a26 <strncasecmp_P+0x22>
    5a24:	60 5e       	subi	r22, 0xE0	; 224
    5a26:	86 1b       	sub	r24, r22
    5a28:	61 11       	cpse	r22, r1
    5a2a:	71 f3       	breq	.-36     	; 0x5a08 <strncasecmp_P+0x4>
    5a2c:	99 0b       	sbc	r25, r25
    5a2e:	08 95       	ret
    5a30:	88 1b       	sub	r24, r24
    5a32:	fc cf       	rjmp	.-8      	; 0x5a2c <strncasecmp_P+0x28>

00005a34 <fgetc>:
    5a34:	cf 93       	push	r28
    5a36:	df 93       	push	r29
    5a38:	ec 01       	movw	r28, r24
    5a3a:	2b 81       	ldd	r18, Y+3	; 0x03
    5a3c:	20 ff       	sbrs	r18, 0
    5a3e:	33 c0       	rjmp	.+102    	; 0x5aa6 <fgetc+0x72>
    5a40:	26 ff       	sbrs	r18, 6
    5a42:	0a c0       	rjmp	.+20     	; 0x5a58 <fgetc+0x24>
    5a44:	2f 7b       	andi	r18, 0xBF	; 191
    5a46:	2b 83       	std	Y+3, r18	; 0x03
    5a48:	8e 81       	ldd	r24, Y+6	; 0x06
    5a4a:	9f 81       	ldd	r25, Y+7	; 0x07
    5a4c:	01 96       	adiw	r24, 0x01	; 1
    5a4e:	8e 83       	std	Y+6, r24	; 0x06
    5a50:	9f 83       	std	Y+7, r25	; 0x07
    5a52:	8a 81       	ldd	r24, Y+2	; 0x02
    5a54:	90 e0       	ldi	r25, 0x00	; 0
    5a56:	29 c0       	rjmp	.+82     	; 0x5aaa <fgetc+0x76>
    5a58:	22 ff       	sbrs	r18, 2
    5a5a:	0f c0       	rjmp	.+30     	; 0x5a7a <fgetc+0x46>
    5a5c:	e8 81       	ld	r30, Y
    5a5e:	f9 81       	ldd	r31, Y+1	; 0x01
    5a60:	80 81       	ld	r24, Z
    5a62:	08 2e       	mov	r0, r24
    5a64:	00 0c       	add	r0, r0
    5a66:	99 0b       	sbc	r25, r25
    5a68:	00 97       	sbiw	r24, 0x00	; 0
    5a6a:	19 f4       	brne	.+6      	; 0x5a72 <fgetc+0x3e>
    5a6c:	20 62       	ori	r18, 0x20	; 32
    5a6e:	2b 83       	std	Y+3, r18	; 0x03
    5a70:	1a c0       	rjmp	.+52     	; 0x5aa6 <fgetc+0x72>
    5a72:	31 96       	adiw	r30, 0x01	; 1
    5a74:	e8 83       	st	Y, r30
    5a76:	f9 83       	std	Y+1, r31	; 0x01
    5a78:	0e c0       	rjmp	.+28     	; 0x5a96 <fgetc+0x62>
    5a7a:	ea 85       	ldd	r30, Y+10	; 0x0a
    5a7c:	fb 85       	ldd	r31, Y+11	; 0x0b
    5a7e:	09 95       	icall
    5a80:	97 ff       	sbrs	r25, 7
    5a82:	09 c0       	rjmp	.+18     	; 0x5a96 <fgetc+0x62>
    5a84:	2b 81       	ldd	r18, Y+3	; 0x03
    5a86:	01 96       	adiw	r24, 0x01	; 1
    5a88:	11 f0       	breq	.+4      	; 0x5a8e <fgetc+0x5a>
    5a8a:	80 e2       	ldi	r24, 0x20	; 32
    5a8c:	01 c0       	rjmp	.+2      	; 0x5a90 <fgetc+0x5c>
    5a8e:	80 e1       	ldi	r24, 0x10	; 16
    5a90:	82 2b       	or	r24, r18
    5a92:	8b 83       	std	Y+3, r24	; 0x03
    5a94:	08 c0       	rjmp	.+16     	; 0x5aa6 <fgetc+0x72>
    5a96:	2e 81       	ldd	r18, Y+6	; 0x06
    5a98:	3f 81       	ldd	r19, Y+7	; 0x07
    5a9a:	2f 5f       	subi	r18, 0xFF	; 255
    5a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    5a9e:	2e 83       	std	Y+6, r18	; 0x06
    5aa0:	3f 83       	std	Y+7, r19	; 0x07
    5aa2:	99 27       	eor	r25, r25
    5aa4:	02 c0       	rjmp	.+4      	; 0x5aaa <fgetc+0x76>
    5aa6:	8f ef       	ldi	r24, 0xFF	; 255
    5aa8:	9f ef       	ldi	r25, 0xFF	; 255
    5aaa:	df 91       	pop	r29
    5aac:	cf 91       	pop	r28
    5aae:	08 95       	ret

00005ab0 <ungetc>:
    5ab0:	fb 01       	movw	r30, r22
    5ab2:	23 81       	ldd	r18, Z+3	; 0x03
    5ab4:	20 ff       	sbrs	r18, 0
    5ab6:	12 c0       	rjmp	.+36     	; 0x5adc <ungetc+0x2c>
    5ab8:	26 fd       	sbrc	r18, 6
    5aba:	10 c0       	rjmp	.+32     	; 0x5adc <ungetc+0x2c>
    5abc:	8f 3f       	cpi	r24, 0xFF	; 255
    5abe:	3f ef       	ldi	r19, 0xFF	; 255
    5ac0:	93 07       	cpc	r25, r19
    5ac2:	61 f0       	breq	.+24     	; 0x5adc <ungetc+0x2c>
    5ac4:	82 83       	std	Z+2, r24	; 0x02
    5ac6:	2f 7d       	andi	r18, 0xDF	; 223
    5ac8:	20 64       	ori	r18, 0x40	; 64
    5aca:	23 83       	std	Z+3, r18	; 0x03
    5acc:	26 81       	ldd	r18, Z+6	; 0x06
    5ace:	37 81       	ldd	r19, Z+7	; 0x07
    5ad0:	21 50       	subi	r18, 0x01	; 1
    5ad2:	31 09       	sbc	r19, r1
    5ad4:	26 83       	std	Z+6, r18	; 0x06
    5ad6:	37 83       	std	Z+7, r19	; 0x07
    5ad8:	99 27       	eor	r25, r25
    5ada:	08 95       	ret
    5adc:	8f ef       	ldi	r24, 0xFF	; 255
    5ade:	9f ef       	ldi	r25, 0xFF	; 255
    5ae0:	08 95       	ret

00005ae2 <__ctype_isfalse>:
    5ae2:	99 27       	eor	r25, r25
    5ae4:	88 27       	eor	r24, r24

00005ae6 <__ctype_istrue>:
    5ae6:	08 95       	ret

00005ae8 <eeprom_read_block>:
    5ae8:	60 50       	subi	r22, 0x00	; 0
    5aea:	7c 4e       	sbci	r23, 0xEC	; 236
    5aec:	0c 94 af 2d 	jmp	0x5b5e	; 0x5b5e <memcpy>

00005af0 <eeprom_update_block>:
    5af0:	dc 01       	movw	r26, r24
    5af2:	a4 0f       	add	r26, r20
    5af4:	b5 1f       	adc	r27, r21
    5af6:	41 50       	subi	r20, 0x01	; 1
    5af8:	50 40       	sbci	r21, 0x00	; 0
    5afa:	48 f0       	brcs	.+18     	; 0x5b0e <eeprom_update_block+0x1e>
    5afc:	cb 01       	movw	r24, r22
    5afe:	84 0f       	add	r24, r20
    5b00:	95 1f       	adc	r25, r21
    5b02:	2e 91       	ld	r18, -X
    5b04:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <eeprom_update_r18>
    5b08:	41 50       	subi	r20, 0x01	; 1
    5b0a:	50 40       	sbci	r21, 0x00	; 0
    5b0c:	d0 f7       	brcc	.-12     	; 0x5b02 <eeprom_update_block+0x12>
    5b0e:	08 95       	ret

00005b10 <eeprom_update_byte>:
    5b10:	26 2f       	mov	r18, r22

00005b12 <eeprom_update_r18>:
    5b12:	0e 94 ab 2d 	call	0x5b56	; 0x5b56 <eeprom_mapen>
    5b16:	00 80       	ld	r0, Z
    5b18:	02 16       	cp	r0, r18
    5b1a:	19 f0       	breq	.+6      	; 0x5b22 <eeprom_update_r18+0x10>
    5b1c:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <eeprom_write_r18>
    5b20:	01 97       	sbiw	r24, 0x01	; 1
    5b22:	01 97       	sbiw	r24, 0x01	; 1
    5b24:	08 95       	ret

00005b26 <eeprom_write_byte>:
    5b26:	26 2f       	mov	r18, r22

00005b28 <eeprom_write_r18>:
    5b28:	af 93       	push	r26
    5b2a:	bf 93       	push	r27
    5b2c:	e0 e0       	ldi	r30, 0x00	; 0
    5b2e:	f0 e1       	ldi	r31, 0x10	; 16
    5b30:	32 81       	ldd	r19, Z+2	; 0x02
    5b32:	31 fd       	sbrc	r19, 1
    5b34:	fd cf       	rjmp	.-6      	; 0x5b30 <eeprom_write_r18+0x8>
    5b36:	dc 01       	movw	r26, r24
    5b38:	a0 50       	subi	r26, 0x00	; 0
    5b3a:	bc 4e       	sbci	r27, 0xEC	; 236
    5b3c:	2c 93       	st	X, r18
    5b3e:	2d e9       	ldi	r18, 0x9D	; 157
    5b40:	24 bf       	out	0x34, r18	; 52
    5b42:	23 e0       	ldi	r18, 0x03	; 3
    5b44:	20 83       	st	Z, r18
    5b46:	01 96       	adiw	r24, 0x01	; 1
    5b48:	bf 91       	pop	r27
    5b4a:	af 91       	pop	r26
    5b4c:	08 95       	ret

00005b4e <eeprom_read_byte>:
    5b4e:	03 d0       	rcall	.+6      	; 0x5b56 <eeprom_mapen>
    5b50:	80 81       	ld	r24, Z
    5b52:	99 27       	eor	r25, r25
    5b54:	08 95       	ret

00005b56 <eeprom_mapen>:
    5b56:	fc 01       	movw	r30, r24
    5b58:	e0 50       	subi	r30, 0x00	; 0
    5b5a:	fc 4e       	sbci	r31, 0xEC	; 236
    5b5c:	08 95       	ret

00005b5e <memcpy>:
    5b5e:	fb 01       	movw	r30, r22
    5b60:	dc 01       	movw	r26, r24
    5b62:	02 c0       	rjmp	.+4      	; 0x5b68 <memcpy+0xa>
    5b64:	01 90       	ld	r0, Z+
    5b66:	0d 92       	st	X+, r0
    5b68:	41 50       	subi	r20, 0x01	; 1
    5b6a:	50 40       	sbci	r21, 0x00	; 0
    5b6c:	d8 f7       	brcc	.-10     	; 0x5b64 <memcpy+0x6>
    5b6e:	08 95       	ret

00005b70 <_exit>:
    5b70:	f8 94       	cli

00005b72 <__stop_program>:
    5b72:	ff cf       	rjmp	.-2      	; 0x5b72 <__stop_program>
