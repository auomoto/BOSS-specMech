
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00005c86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005476  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  00009476  00005476  0000550a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000084d  00802800  00802800  00005c86  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00005c86  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005ce4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000628  00000000  00000000  00005d28  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a4f4  00000000  00000000  00006350  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000458a  00000000  00000000  00010844  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000450b  00000000  00000000  00014dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001150  00000000  00000000  000192dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002368  00000000  00000000  0001a42c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004857  00000000  00000000  0001c794  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003c8  00000000  00000000  00020feb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 01 	jmp	0x266	; 0x266 <__ctors_end>
       4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       c:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__vector_3>
      10:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      14:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      18:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      1c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      20:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      24:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      28:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      2c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      30:	0c 94 dc 1d 	jmp	0x3bb8	; 0x3bb8 <__vector_12>
      34:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      38:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      3c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      40:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      44:	0c 94 03 20 	jmp	0x4006	; 0x4006 <__vector_17>
      48:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <__vector_18>
      4c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      50:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__vector_20>
      54:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      58:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      5c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      60:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      64:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      68:	0c 94 8d 20 	jmp	0x411a	; 0x411a <__vector_26>
      6c:	0c 94 b8 20 	jmp	0x4170	; 0x4170 <__vector_27>
      70:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      74:	0c 94 5d 21 	jmp	0x42ba	; 0x42ba <__vector_29>
      78:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      7c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      80:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      84:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      88:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      8c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      90:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      94:	0c 94 f4 20 	jmp	0x41e8	; 0x41e8 <__vector_37>
      98:	0c 94 29 21 	jmp	0x4252	; 0x4252 <__vector_38>
      9c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      a0:	ac 04       	cpc	r10, r12
      a2:	d3 04       	cpc	r13, r3
      a4:	d3 04       	cpc	r13, r3
      a6:	d3 04       	cpc	r13, r3
      a8:	d3 04       	cpc	r13, r3
      aa:	d3 04       	cpc	r13, r3
      ac:	d3 04       	cpc	r13, r3
      ae:	d3 04       	cpc	r13, r3
      b0:	d3 04       	cpc	r13, r3
      b2:	af 04       	cpc	r10, r15
      b4:	d3 04       	cpc	r13, r3
      b6:	d3 04       	cpc	r13, r3
      b8:	d3 04       	cpc	r13, r3
      ba:	d3 04       	cpc	r13, r3
      bc:	d3 04       	cpc	r13, r3
      be:	d3 04       	cpc	r13, r3
      c0:	d3 04       	cpc	r13, r3
      c2:	d3 04       	cpc	r13, r3
      c4:	d3 04       	cpc	r13, r3
      c6:	d3 04       	cpc	r13, r3
      c8:	d3 04       	cpc	r13, r3
      ca:	d3 04       	cpc	r13, r3
      cc:	d3 04       	cpc	r13, r3
      ce:	d3 04       	cpc	r13, r3
      d0:	d3 04       	cpc	r13, r3
      d2:	d3 04       	cpc	r13, r3
      d4:	9a 04       	cpc	r9, r10
      d6:	d3 04       	cpc	r13, r3
      d8:	d3 04       	cpc	r13, r3
      da:	d3 04       	cpc	r13, r3
      dc:	d3 04       	cpc	r13, r3
      de:	d3 04       	cpc	r13, r3
      e0:	d3 04       	cpc	r13, r3
      e2:	d3 04       	cpc	r13, r3
      e4:	d3 04       	cpc	r13, r3
      e6:	d3 04       	cpc	r13, r3
      e8:	a0 04       	cpc	r10, r0
      ea:	d3 04       	cpc	r13, r3
      ec:	9d 04       	cpc	r9, r13
      ee:	d3 04       	cpc	r13, r3
      f0:	d3 04       	cpc	r13, r3
      f2:	a3 04       	cpc	r10, r3
      f4:	a6 04       	cpc	r10, r6
      f6:	a9 04       	cpc	r10, r9
      f8:	3d 0f       	add	r19, r29
      fa:	3d 0f       	add	r19, r29
      fc:	3d 0f       	add	r19, r29
      fe:	ea 13       	cpse	r30, r26
     100:	ea 13       	cpse	r30, r26
     102:	ea 13       	cpse	r30, r26
     104:	ea 13       	cpse	r30, r26
     106:	ea 13       	cpse	r30, r26
     108:	ea 13       	cpse	r30, r26
     10a:	ea 13       	cpse	r30, r26
     10c:	ea 13       	cpse	r30, r26
     10e:	ea 13       	cpse	r30, r26
     110:	ea 13       	cpse	r30, r26
     112:	ea 13       	cpse	r30, r26
     114:	ea 13       	cpse	r30, r26
     116:	ea 13       	cpse	r30, r26
     118:	ea 13       	cpse	r30, r26
     11a:	ea 13       	cpse	r30, r26
     11c:	ea 13       	cpse	r30, r26
     11e:	ea 13       	cpse	r30, r26
     120:	ea 13       	cpse	r30, r26
     122:	ac 13       	cpse	r26, r28
     124:	ea 13       	cpse	r30, r26
     126:	ea 13       	cpse	r30, r26
     128:	ea 13       	cpse	r30, r26
     12a:	ea 13       	cpse	r30, r26
     12c:	ea 13       	cpse	r30, r26
     12e:	ea 13       	cpse	r30, r26
     130:	ea 13       	cpse	r30, r26
     132:	ea 13       	cpse	r30, r26
     134:	ea 13       	cpse	r30, r26
     136:	ea 13       	cpse	r30, r26
     138:	c1 0f       	add	r28, r17
     13a:	c1 0f       	add	r28, r17
     13c:	c1 0f       	add	r28, r17
     13e:	ea 13       	cpse	r30, r26
     140:	6f 10       	cpse	r6, r15
     142:	ea 13       	cpse	r30, r26
     144:	ea 13       	cpse	r30, r26
     146:	ea 13       	cpse	r30, r26
     148:	ea 13       	cpse	r30, r26
     14a:	ea 13       	cpse	r30, r26
     14c:	ea 13       	cpse	r30, r26
     14e:	ea 13       	cpse	r30, r26
     150:	ea 13       	cpse	r30, r26
     152:	ea 13       	cpse	r30, r26
     154:	ac 11       	cpse	r26, r12
     156:	82 12       	cpse	r8, r18
     158:	ea 13       	cpse	r30, r26
     15a:	ea 13       	cpse	r30, r26
     15c:	ea 13       	cpse	r30, r26
     15e:	0b 13       	cpse	r16, r27
     160:	ea 13       	cpse	r30, r26
     162:	53 13       	cpse	r21, r19

00000164 <__trampolines_end>:
     164:	6e 61       	ori	r22, 0x1E	; 30
     166:	6e 00       	.word	0x006e	; ????

00000168 <__c.2332>:
     168:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     178:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     188:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     198:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1a8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1b8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1c8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1d8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1e8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1f8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     208:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     218:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     228:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     238:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     248:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     258:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000266 <__ctors_end>:
     266:	11 24       	eor	r1, r1
     268:	1f be       	out	0x3f, r1	; 63
     26a:	cf ef       	ldi	r28, 0xFF	; 255
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	df e3       	ldi	r29, 0x3F	; 63
     270:	de bf       	out	0x3e, r29	; 62

00000272 <__do_clear_bss>:
     272:	20 e3       	ldi	r18, 0x30	; 48
     274:	a0 e0       	ldi	r26, 0x00	; 0
     276:	b8 e2       	ldi	r27, 0x28	; 40
     278:	01 c0       	rjmp	.+2      	; 0x27c <.do_clear_bss_start>

0000027a <.do_clear_bss_loop>:
     27a:	1d 92       	st	X+, r1

0000027c <.do_clear_bss_start>:
     27c:	ad 34       	cpi	r26, 0x4D	; 77
     27e:	b2 07       	cpc	r27, r18
     280:	e1 f7       	brne	.-8      	; 0x27a <.do_clear_bss_loop>
     282:	0e 94 aa 08 	call	0x1154	; 0x1154 <main>
     286:	0c 94 39 2a 	jmp	0x5472	; 0x5472 <_exit>

0000028a <__bad_interrupt>:
     28a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028e <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
uint8_t read_AD590(uint8_t sensor, float *temperature)
{
     28e:	8f 92       	push	r8
     290:	9f 92       	push	r9
     292:	af 92       	push	r10
     294:	bf 92       	push	r11
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <read_AD590+0x16>
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <read_AD590+0x18>
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	7b 01       	movw	r14, r22

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	c9 f0       	breq	.+50     	; 0x2e2 <read_AD590+0x54>
     2b0:	18 f0       	brcs	.+6      	; 0x2b8 <read_AD590+0x2a>
     2b2:	82 30       	cpi	r24, 0x02	; 2
     2b4:	61 f0       	breq	.+24     	; 0x2ce <read_AD590+0x40>
     2b6:	10 c0       	rjmp	.+32     	; 0x2d8 <read_AD590+0x4a>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     2b8:	0f 2e       	mov	r0, r31
     2ba:	f3 e3       	ldi	r31, 0x33	; 51
     2bc:	8f 2e       	mov	r8, r31
     2be:	98 2c       	mov	r9, r8
     2c0:	f3 ef       	ldi	r31, 0xF3	; 243
     2c2:	af 2e       	mov	r10, r31
     2c4:	f0 e4       	ldi	r31, 0x40	; 64
     2c6:	bf 2e       	mov	r11, r31
     2c8:	f0 2d       	mov	r31, r0
	float voltage, offset;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     2ca:	11 e0       	ldi	r17, 0x01	; 1
     2cc:	0e c0       	rjmp	.+28     	; 0x2ea <read_AD590+0x5c>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     2ce:	81 2c       	mov	r8, r1
     2d0:	91 2c       	mov	r9, r1
     2d2:	54 01       	movw	r10, r8
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     2d4:	10 e1       	ldi	r17, 0x10	; 16
			offset = 0.0;
			break;
     2d6:	09 c0       	rjmp	.+18     	; 0x2ea <read_AD590+0x5c>
{

	uint8_t pins;
	float voltage, offset;

	offset = 0.0;
     2d8:	81 2c       	mov	r8, r1
     2da:	91 2c       	mov	r9, r1
     2dc:	54 01       	movw	r10, r8
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2de:	10 e0       	ldi	r17, 0x00	; 0
			break;
     2e0:	04 c0       	rjmp	.+8      	; 0x2ea <read_AD590+0x5c>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2e2:	81 2c       	mov	r8, r1
     2e4:	91 2c       	mov	r9, r1
     2e6:	54 01       	movw	r10, r8
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2e8:	14 e0       	ldi	r17, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	66 e0       	ldi	r22, 0x06	; 6
     2ee:	87 e2       	ldi	r24, 0x27	; 39
     2f0:	0e 94 18 09 	call	0x1230	; 0x1230 <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2f4:	41 2f       	mov	r20, r17
     2f6:	40 95       	com	r20
     2f8:	60 e0       	ldi	r22, 0x00	; 0
     2fa:	87 e2       	ldi	r24, 0x27	; 39
     2fc:	0e 94 18 09 	call	0x1230	; 0x1230 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     300:	41 2f       	mov	r20, r17
     302:	6a e0       	ldi	r22, 0x0A	; 10
     304:	87 e2       	ldi	r24, 0x27	; 39
     306:	0e 94 18 09 	call	0x1230	; 0x1230 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     30a:	86 e1       	ldi	r24, 0x16	; 22
     30c:	8a 95       	dec	r24
     30e:	f1 f7       	brne	.-4      	; 0x30c <read_AD590+0x7e>
     310:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	if (read_ADS1115(ADC_TE, PGA0512, AIN3, DR128, &voltage) == ERROR) {
     312:	8e 01       	movw	r16, r28
     314:	0f 5f       	subi	r16, 0xFF	; 255
     316:	1f 4f       	sbci	r17, 0xFF	; 255
     318:	20 e8       	ldi	r18, 0x80	; 128
     31a:	40 e7       	ldi	r20, 0x70	; 112
     31c:	68 e0       	ldi	r22, 0x08	; 8
     31e:	88 e4       	ldi	r24, 0x48	; 72
     320:	0e 94 c8 01 	call	0x390	; 0x390 <read_ADS1115>
     324:	83 36       	cpi	r24, 0x63	; 99
     326:	51 f4       	brne	.+20     	; 0x33c <read_AD590+0xae>
		*temperature = BADFLOAT;
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	50 e8       	ldi	r21, 0x80	; 128
     32c:	66 e2       	ldi	r22, 0x26	; 38
     32e:	74 ec       	ldi	r23, 0xC4	; 196
     330:	f7 01       	movw	r30, r14
     332:	40 83       	st	Z, r20
     334:	51 83       	std	Z+1, r21	; 0x01
     336:	62 83       	std	Z+2, r22	; 0x02
     338:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
     33a:	1c c0       	rjmp	.+56     	; 0x374 <read_AD590+0xe6>
	}
	*temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     33c:	20 e0       	ldi	r18, 0x00	; 0
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	4a e7       	ldi	r20, 0x7A	; 122
     342:	54 e4       	ldi	r21, 0x44	; 68
     344:	69 81       	ldd	r22, Y+1	; 0x01
     346:	7a 81       	ldd	r23, Y+2	; 0x02
     348:	8b 81       	ldd	r24, Y+3	; 0x03
     34a:	9c 81       	ldd	r25, Y+4	; 0x04
     34c:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
     350:	23 e3       	ldi	r18, 0x33	; 51
     352:	33 e9       	ldi	r19, 0x93	; 147
     354:	48 e8       	ldi	r20, 0x88	; 136
     356:	53 e4       	ldi	r21, 0x43	; 67
     358:	0e 94 88 21 	call	0x4310	; 0x4310 <__subsf3>
     35c:	9b 01       	movw	r18, r22
     35e:	ac 01       	movw	r20, r24
     360:	c5 01       	movw	r24, r10
     362:	b4 01       	movw	r22, r8
     364:	0e 94 89 21 	call	0x4312	; 0x4312 <__addsf3>
     368:	f7 01       	movw	r30, r14
     36a:	60 83       	st	Z, r22
     36c:	71 83       	std	Z+1, r23	; 0x01
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     372:	80 e0       	ldi	r24, 0x00	; 0

}
     374:	24 96       	adiw	r28, 0x04	; 4
     376:	cd bf       	out	0x3d, r28	; 61
     378:	de bf       	out	0x3e, r29	; 62
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	bf 90       	pop	r11
     388:	af 90       	pop	r10
     38a:	9f 90       	pop	r9
     38c:	8f 90       	pop	r8
     38e:	08 95       	ret

00000390 <read_ADS1115>:
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
uint8_t read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins,
	uint8_t datarate, float *voltage)
{
     390:	8f 92       	push	r8
     392:	9f 92       	push	r9
     394:	af 92       	push	r10
     396:	bf 92       	push	r11
     398:	cf 92       	push	r12
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	f8 2e       	mov	r15, r24
     3aa:	e6 2e       	mov	r14, r22
     3ac:	68 01       	movw	r12, r16
	float scale;
	uint8_t confighi, configlo, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     3ae:	46 2b       	or	r20, r22
     3b0:	c4 2f       	mov	r28, r20
     3b2:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     3b4:	d2 2f       	mov	r29, r18
     3b6:	d3 60       	ori	r29, 0x03	; 3

	*voltage = BADFLOAT;
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e8       	ldi	r25, 0x80	; 128
     3bc:	a6 e2       	ldi	r26, 0x26	; 38
     3be:	b4 ec       	ldi	r27, 0xC4	; 196
     3c0:	f8 01       	movw	r30, r16
     3c2:	80 83       	st	Z, r24
     3c4:	91 83       	std	Z+1, r25	; 0x01
     3c6:	a2 83       	std	Z+2, r26	; 0x02
     3c8:	b3 83       	std	Z+3, r27	; 0x03
	if (start_TWI(addr, TWIWRITE == ERROR)) {		// TWI start condition
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	8f 2d       	mov	r24, r15
     3ce:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
     3d2:	08 2f       	mov	r16, r24
     3d4:	88 23       	and	r24, r24
     3d6:	21 f0       	breq	.+8      	; 0x3e0 <read_ADS1115+0x50>
		stop_TWI();
     3d8:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(ERROR);
     3dc:	13 e6       	ldi	r17, 0x63	; 99
     3de:	b4 c0       	rjmp	.+360    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	if ((write_TWI(ADS1115CONFIG) == ERROR)) {		// Write the CONFIG register
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
     3e6:	18 2f       	mov	r17, r24
     3e8:	83 36       	cpi	r24, 0x63	; 99
     3ea:	19 f4       	brne	.+6      	; 0x3f2 <read_ADS1115+0x62>
		stop_TWI();
     3ec:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(ERROR);
     3f0:	ab c0       	rjmp	.+342    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	if ((write_TWI(confighi) == ERROR)) {			// Write high byte
     3f2:	8c 2f       	mov	r24, r28
     3f4:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
     3f8:	18 2f       	mov	r17, r24
     3fa:	83 36       	cpi	r24, 0x63	; 99
     3fc:	19 f4       	brne	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		stop_TWI();
     3fe:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(ERROR);
     402:	a2 c0       	rjmp	.+324    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	if ((write_TWI(configlo) == ERROR)) {			// Write low byte
     404:	8d 2f       	mov	r24, r29
     406:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
     40a:	18 2f       	mov	r17, r24
     40c:	83 36       	cpi	r24, 0x63	; 99
     40e:	19 f4       	brne	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		stop_TWI();
     410:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(ERROR);
     414:	99 c0       	rjmp	.+306    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	}
	stop_TWI();
     416:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
     41a:	fc e1       	ldi	r31, 0x1C	; 28
     41c:	fa 95       	dec	r31
     41e:	f1 f7       	brne	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>

	_delay_us(25);									// Power-up time

	converting = YES;
     420:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     422:	09 c0       	rjmp	.+18     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		start_TWI(addr, TWIREAD);
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	8f 2d       	mov	r24, r15
     428:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
		flag = readlast_TWI();
     42c:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <readlast_TWI>
		if (flag & 0b10000000) {
     430:	88 23       	and	r24, r24
     432:	0c f4       	brge	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			converting = NO;
     434:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     436:	c1 11       	cpse	r28, r1
     438:	f5 cf       	rjmp	.-22     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		flag = readlast_TWI();
		if (flag & 0b10000000) {
			converting = NO;
		}
	}
	stop_TWI();
     43a:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>

	start_TWI(addr, TWIWRITE);
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	8f 2d       	mov	r24, r15
     442:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	8f 2d       	mov	r24, r15
     450:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
	highbyte = read_TWI();
     454:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <read_TWI>
     458:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     45a:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <readlast_TWI>
     45e:	d8 2f       	mov	r29, r24
	stop_TWI();
     460:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>

	value = highbyte;
     464:	6c 2f       	mov	r22, r28
     466:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     468:	76 2f       	mov	r23, r22
     46a:	66 27       	eor	r22, r22
	value |= lowbyte;
     46c:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     46e:	84 e0       	ldi	r24, 0x04	; 4
     470:	e8 16       	cp	r14, r24
     472:	49 f1       	breq	.+82     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     474:	8e 15       	cp	r24, r14
     476:	30 f0       	brcs	.+12     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     478:	ee 20       	and	r14, r14
     47a:	d9 f1       	breq	.+118    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     47c:	e2 e0       	ldi	r30, 0x02	; 2
     47e:	ee 16       	cp	r14, r30
     480:	69 f1       	breq	.+90     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     482:	42 c0       	rjmp	.+132    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     484:	f8 e0       	ldi	r31, 0x08	; 8
     486:	ef 16       	cp	r14, r31
     488:	09 f4       	brne	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     48a:	42 c0       	rjmp	.+132    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     48c:	8a e0       	ldi	r24, 0x0A	; 10
     48e:	e8 16       	cp	r14, r24
     490:	21 f0       	breq	.+8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     492:	e6 e0       	ldi	r30, 0x06	; 6
     494:	ee 12       	cpse	r14, r30
     496:	38 c0       	rjmp	.+112    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     498:	0b c0       	rjmp	.+22     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		case PGA0256:
			scale = SCA0256;
     49a:	0f 2e       	mov	r0, r31
     49c:	f4 e7       	ldi	r31, 0x74	; 116
     49e:	8f 2e       	mov	r8, r31
     4a0:	f3 e1       	ldi	r31, 0x13	; 19
     4a2:	9f 2e       	mov	r9, r31
     4a4:	f3 e0       	ldi	r31, 0x03	; 3
     4a6:	af 2e       	mov	r10, r31
     4a8:	f7 e3       	ldi	r31, 0x37	; 55
     4aa:	bf 2e       	mov	r11, r31
     4ac:	f0 2d       	mov	r31, r0
     4ae:	3a c0       	rjmp	.+116    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     4b0:	0f 2e       	mov	r0, r31
     4b2:	f4 e7       	ldi	r31, 0x74	; 116
     4b4:	8f 2e       	mov	r8, r31
     4b6:	f3 e1       	ldi	r31, 0x13	; 19
     4b8:	9f 2e       	mov	r9, r31
     4ba:	f3 e0       	ldi	r31, 0x03	; 3
     4bc:	af 2e       	mov	r10, r31
     4be:	f8 e3       	ldi	r31, 0x38	; 56
     4c0:	bf 2e       	mov	r11, r31
     4c2:	f0 2d       	mov	r31, r0
			break;
     4c4:	2f c0       	rjmp	.+94     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		case PGA2048:
			scale = SCA2048;
     4c6:	0f 2e       	mov	r0, r31
     4c8:	f2 e1       	ldi	r31, 0x12	; 18
     4ca:	8f 2e       	mov	r8, r31
     4cc:	f3 e1       	ldi	r31, 0x13	; 19
     4ce:	9f 2e       	mov	r9, r31
     4d0:	f3 e8       	ldi	r31, 0x83	; 131
     4d2:	af 2e       	mov	r10, r31
     4d4:	f8 e3       	ldi	r31, 0x38	; 56
     4d6:	bf 2e       	mov	r11, r31
     4d8:	f0 2d       	mov	r31, r0
			break;
     4da:	24 c0       	rjmp	.+72     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		case PGA4096:
			scale = SCA4096;
     4dc:	0f 2e       	mov	r0, r31
     4de:	f4 e7       	ldi	r31, 0x74	; 116
     4e0:	8f 2e       	mov	r8, r31
     4e2:	f3 e1       	ldi	r31, 0x13	; 19
     4e4:	9f 2e       	mov	r9, r31
     4e6:	f3 e0       	ldi	r31, 0x03	; 3
     4e8:	af 2e       	mov	r10, r31
     4ea:	f9 e3       	ldi	r31, 0x39	; 57
     4ec:	bf 2e       	mov	r11, r31
     4ee:	f0 2d       	mov	r31, r0
			break;
     4f0:	19 c0       	rjmp	.+50     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		case PGA6144:
			scale = SCA6144;
     4f2:	0f 2e       	mov	r0, r31
     4f4:	fe e2       	ldi	r31, 0x2E	; 46
     4f6:	8f 2e       	mov	r8, r31
     4f8:	fd e9       	ldi	r31, 0x9D	; 157
     4fa:	9f 2e       	mov	r9, r31
     4fc:	f4 e4       	ldi	r31, 0x44	; 68
     4fe:	af 2e       	mov	r10, r31
     500:	f9 e3       	ldi	r31, 0x39	; 57
     502:	bf 2e       	mov	r11, r31
     504:	f0 2d       	mov	r31, r0
			break;
     506:	0e c0       	rjmp	.+28     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		default:
			scale = 0.0;
     508:	81 2c       	mov	r8, r1
     50a:	91 2c       	mov	r9, r1
     50c:	54 01       	movw	r10, r8
			break;
     50e:	0a c0       	rjmp	.+20     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     510:	0f 2e       	mov	r0, r31
     512:	f1 e7       	ldi	r31, 0x71	; 113
     514:	8f 2e       	mov	r8, r31
     516:	f3 e1       	ldi	r31, 0x13	; 19
     518:	9f 2e       	mov	r9, r31
     51a:	f3 e8       	ldi	r31, 0x83	; 131
     51c:	af 2e       	mov	r10, r31
     51e:	f7 e3       	ldi	r31, 0x37	; 55
     520:	bf 2e       	mov	r11, r31
     522:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	*voltage = scale * (float) value;
     524:	07 2e       	mov	r0, r23
     526:	00 0c       	add	r0, r0
     528:	88 0b       	sbc	r24, r24
     52a:	99 0b       	sbc	r25, r25
     52c:	0e 94 a4 22 	call	0x4548	; 0x4548 <__floatsisf>
     530:	9b 01       	movw	r18, r22
     532:	ac 01       	movw	r20, r24
     534:	c5 01       	movw	r24, r10
     536:	b4 01       	movw	r22, r8
     538:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
     53c:	f6 01       	movw	r30, r12
     53e:	60 83       	st	Z, r22
     540:	71 83       	std	Z+1, r23	; 0x01
     542:	82 83       	std	Z+2, r24	; 0x02
     544:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
     546:	10 2f       	mov	r17, r16

}
     548:	81 2f       	mov	r24, r17
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	ff 90       	pop	r15
     554:	ef 90       	pop	r14
     556:	df 90       	pop	r13
     558:	cf 90       	pop	r12
     55a:	bf 90       	pop	r11
     55c:	af 90       	pop	r10
     55e:	9f 90       	pop	r9
     560:	8f 90       	pop	r8
     562:	08 95       	ret

00000564 <get_cmdline>:
	if ((d >= '0') && (d <= '9')) {
		return(ERROR);
	}
	return(NOERROR);

}
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	9c 01       	movw	r18, r24
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	1c c0       	rjmp	.+56     	; 0x5a6 <get_cmdline+0x42>
     56e:	c8 e3       	ldi	r28, 0x38	; 56
     570:	dc e2       	ldi	r29, 0x2C	; 44
     572:	e8 81       	ld	r30, Y
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	e7 5c       	subi	r30, 0xC7	; 199
     578:	f4 4d       	sbci	r31, 0xD4	; 212
     57a:	80 81       	ld	r24, Z
     57c:	f9 01       	movw	r30, r18
     57e:	e4 0f       	add	r30, r20
     580:	f1 1d       	adc	r31, r1
     582:	80 83       	st	Z, r24
     584:	aa e3       	ldi	r26, 0x3A	; 58
     586:	bc e2       	ldi	r27, 0x2C	; 44
     588:	8c 91       	ld	r24, X
     58a:	81 50       	subi	r24, 0x01	; 1
     58c:	8c 93       	st	X, r24
     58e:	88 81       	ld	r24, Y
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	6e ef       	ldi	r22, 0xFE	; 254
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	0e 94 43 27 	call	0x4e86	; 0x4e86 <__divmodhi4>
     59c:	88 83       	st	Y, r24
     59e:	80 81       	ld	r24, Z
     5a0:	88 23       	and	r24, r24
     5a2:	29 f0       	breq	.+10     	; 0x5ae <get_cmdline+0x4a>
     5a4:	4f 5f       	subi	r20, 0xFF	; 255
     5a6:	80 91 3a 2c 	lds	r24, 0x2C3A	; 0x802c3a <recv0_buf+0x101>
     5aa:	81 11       	cpse	r24, r1
     5ac:	e0 cf       	rjmp	.-64     	; 0x56e <get_cmdline+0xa>
     5ae:	f9 01       	movw	r30, r18
     5b0:	e4 0f       	add	r30, r20
     5b2:	f1 1d       	adc	r31, r1
     5b4:	10 82       	st	Z, r1
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	08 95       	ret

000005bc <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
     5bc:	9f e9       	ldi	r25, 0x9F	; 159
     5be:	98 0f       	add	r25, r24
     5c0:	9a 31       	cpi	r25, 0x1A	; 26
     5c2:	28 f0       	brcs	.+10     	; 0x5ce <isaletter+0x12>
     5c4:	81 54       	subi	r24, 0x41	; 65
     5c6:	8a 31       	cpi	r24, 0x1A	; 26
     5c8:	20 f4       	brcc	.+8      	; 0x5d2 <isaletter+0x16>
		return(ERROR);
     5ca:	83 e6       	ldi	r24, 0x63	; 99
     5cc:	08 95       	ret
     5ce:	83 e6       	ldi	r24, 0x63	; 99
     5d0:	08 95       	ret
	}
	return(NOERROR);
     5d2:	80 e0       	ldi	r24, 0x00	; 0

}
     5d4:	08 95       	ret

000005d6 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     5e2:	e6 2e       	mov	r14, r22
     5e4:	f1 2c       	mov	r15, r1
     5e6:	84 e3       	ldi	r24, 0x34	; 52
     5e8:	8e 9d       	mul	r24, r14
     5ea:	f0 01       	movw	r30, r0
     5ec:	8f 9d       	mul	r24, r15
     5ee:	f0 0d       	add	r31, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	ed 5f       	subi	r30, 0xFD	; 253
     5f4:	f7 4d       	sbci	r31, 0xD7	; 215
     5f6:	8f e3       	ldi	r24, 0x3F	; 63
     5f8:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     5fa:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     5fc:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     5fe:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     600:	04 c0       	rjmp	.+8      	; 0x60a <parse_cmd+0x34>
		if (*ptr == '\0') {
     602:	11 23       	and	r17, r17
     604:	09 f4       	brne	.+2      	; 0x608 <parse_cmd+0x32>
     606:	75 c0       	rjmp	.+234    	; 0x6f2 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     608:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {		// the verb is a single letter
     60a:	18 81       	ld	r17, Y
     60c:	81 2f       	mov	r24, r17
     60e:	0e 94 de 02 	call	0x5bc	; 0x5bc <isaletter>
     612:	88 23       	and	r24, r24
     614:	b1 f3       	breq	.-20     	; 0x602 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     616:	21 96       	adiw	r28, 0x01	; 1
     618:	84 e3       	ldi	r24, 0x34	; 52
     61a:	8e 9d       	mul	r24, r14
     61c:	f0 01       	movw	r30, r0
     61e:	8f 9d       	mul	r24, r15
     620:	f0 0d       	add	r31, r0
     622:	11 24       	eor	r1, r1
     624:	ed 5f       	subi	r30, 0xFD	; 253
     626:	f7 4d       	sbci	r31, 0xD7	; 215
     628:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     62a:	04 c0       	rjmp	.+8      	; 0x634 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     62c:	11 23       	and	r17, r17
     62e:	09 f4       	brne	.+2      	; 0x632 <parse_cmd+0x5c>
     630:	60 c0       	rjmp	.+192    	; 0x6f2 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     632:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {		// objects are single letters
     634:	18 81       	ld	r17, Y
     636:	81 2f       	mov	r24, r17
     638:	0e 94 de 02 	call	0x5bc	; 0x5bc <isaletter>
     63c:	88 23       	and	r24, r24
     63e:	b1 f3       	breq	.-20     	; 0x62c <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     640:	21 96       	adiw	r28, 0x01	; 1
     642:	84 e3       	ldi	r24, 0x34	; 52
     644:	8e 9d       	mul	r24, r14
     646:	f0 01       	movw	r30, r0
     648:	8f 9d       	mul	r24, r15
     64a:	f0 0d       	add	r31, r0
     64c:	11 24       	eor	r1, r1
     64e:	ed 5f       	subi	r30, 0xFD	; 253
     650:	f7 4d       	sbci	r31, 0xD7	; 215
     652:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	2a c0       	rjmp	.+84     	; 0x6ac <parse_cmd+0xd6>
		if (*ptr == '\0') {
     658:	98 81       	ld	r25, Y
     65a:	91 11       	cpse	r25, r1
     65c:	0c c0       	rjmp	.+24     	; 0x676 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     65e:	94 e3       	ldi	r25, 0x34	; 52
     660:	9e 9d       	mul	r25, r14
     662:	f0 01       	movw	r30, r0
     664:	9f 9d       	mul	r25, r15
     666:	f0 0d       	add	r31, r0
     668:	11 24       	eor	r1, r1
     66a:	ed 5f       	subi	r30, 0xFD	; 253
     66c:	f7 4d       	sbci	r31, 0xD7	; 215
     66e:	e8 0f       	add	r30, r24
     670:	f1 1d       	adc	r31, r1
     672:	12 82       	std	Z+2, r1	; 0x02
			return;
     674:	3e c0       	rjmp	.+124    	; 0x6f2 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {			// Command ID separator
     676:	9b 33       	cpi	r25, 0x3B	; 59
     678:	61 f4       	brne	.+24     	; 0x692 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     67a:	94 e3       	ldi	r25, 0x34	; 52
     67c:	9e 9d       	mul	r25, r14
     67e:	f0 01       	movw	r30, r0
     680:	9f 9d       	mul	r25, r15
     682:	f0 0d       	add	r31, r0
     684:	11 24       	eor	r1, r1
     686:	ed 5f       	subi	r30, 0xFD	; 253
     688:	f7 4d       	sbci	r31, 0xD7	; 215
     68a:	e8 0f       	add	r30, r24
     68c:	f1 1d       	adc	r31, r1
     68e:	12 82       	std	Z+2, r1	; 0x02
			break;
     690:	0f c0       	rjmp	.+30     	; 0x6b0 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     692:	21 96       	adiw	r28, 0x01	; 1
     694:	24 e3       	ldi	r18, 0x34	; 52
     696:	2e 9d       	mul	r18, r14
     698:	f0 01       	movw	r30, r0
     69a:	2f 9d       	mul	r18, r15
     69c:	f0 0d       	add	r31, r0
     69e:	11 24       	eor	r1, r1
     6a0:	ed 5f       	subi	r30, 0xFD	; 253
     6a2:	f7 4d       	sbci	r31, 0xD7	; 215
     6a4:	e8 0f       	add	r30, r24
     6a6:	f1 1d       	adc	r31, r1
     6a8:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6aa:	8f 5f       	subi	r24, 0xFF	; 255
     6ac:	89 32       	cpi	r24, 0x29	; 41
     6ae:	a0 f2       	brcs	.-88     	; 0x658 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
     6b0:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	1c c0       	rjmp	.+56     	; 0x6ee <parse_cmd+0x118>
		if (*ptr == '\0') {
     6b6:	98 81       	ld	r25, Y
     6b8:	91 11       	cpse	r25, r1
     6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     6bc:	94 e3       	ldi	r25, 0x34	; 52
     6be:	9e 9d       	mul	r25, r14
     6c0:	f0 01       	movw	r30, r0
     6c2:	9f 9d       	mul	r25, r15
     6c4:	f0 0d       	add	r31, r0
     6c6:	11 24       	eor	r1, r1
     6c8:	ed 5f       	subi	r30, 0xFD	; 253
     6ca:	f7 4d       	sbci	r31, 0xD7	; 215
     6cc:	e8 0f       	add	r30, r24
     6ce:	f1 1d       	adc	r31, r1
     6d0:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     6d2:	0f c0       	rjmp	.+30     	; 0x6f2 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     6d4:	21 96       	adiw	r28, 0x01	; 1
     6d6:	24 e3       	ldi	r18, 0x34	; 52
     6d8:	2e 9d       	mul	r18, r14
     6da:	f0 01       	movw	r30, r0
     6dc:	2f 9d       	mul	r18, r15
     6de:	f0 0d       	add	r31, r0
     6e0:	11 24       	eor	r1, r1
     6e2:	ed 5f       	subi	r30, 0xFD	; 253
     6e4:	f7 4d       	sbci	r31, 0xD7	; 215
     6e6:	e8 0f       	add	r30, r24
     6e8:	f1 1d       	adc	r31, r1
     6ea:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the optional command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     6ec:	8f 5f       	subi	r24, 0xFF	; 255
     6ee:	89 30       	cpi	r24, 0x09	; 9
     6f0:	10 f3       	brcs	.-60     	; 0x6b6 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	08 95       	ret

000006fe <printLine>:
		been run and the system has received a reboot acknowledge (the !). This
		is done to prevent unsolicited text being sent (error messages) at
		initialization or after a reboot.
------------------------------------------------------------------------------*/
void printLine(char *str)
{
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	c5 50       	subi	r28, 0x05	; 5
     70c:	d1 40       	sbci	r29, 0x01	; 1
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char prFormat[] = "$S%d%s";
     712:	27 e0       	ldi	r18, 0x07	; 7
     714:	ec e7       	ldi	r30, 0x7C	; 124
     716:	f4 e9       	ldi	r31, 0x94	; 148
     718:	de 01       	movw	r26, r28
     71a:	a1 50       	subi	r26, 0x01	; 1
     71c:	bf 4f       	sbci	r27, 0xFF	; 255
     71e:	01 90       	ld	r0, Z+
     720:	0d 92       	st	X+, r0
     722:	2a 95       	dec	r18
     724:	e1 f7       	brne	.-8      	; 0x71e <printLine+0x20>

	if (firstpass) {
     726:	20 91 0b 2a 	lds	r18, 0x2A0B	; 0x802a0b <firstpass>
     72a:	21 11       	cpse	r18, r1
     72c:	2a c0       	rjmp	.+84     	; 0x782 <printLine+0x84>
		return;
	}

	sprintf(strbuf, prFormat, get_SPECID, str);
     72e:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     732:	22 ff       	sbrs	r18, 2
     734:	03 c0       	rjmp	.+6      	; 0x73c <printLine+0x3e>
     736:	22 e0       	ldi	r18, 0x02	; 2
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	02 c0       	rjmp	.+4      	; 0x740 <printLine+0x42>
     73c:	21 e0       	ldi	r18, 0x01	; 1
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	9f 93       	push	r25
     742:	8f 93       	push	r24
     744:	3f 93       	push	r19
     746:	2f 93       	push	r18
     748:	ce 01       	movw	r24, r28
     74a:	81 50       	subi	r24, 0x01	; 1
     74c:	9f 4f       	sbci	r25, 0xFF	; 255
     74e:	9f 93       	push	r25
     750:	8f 93       	push	r24
     752:	8e 01       	movw	r16, r28
     754:	0f 5f       	subi	r16, 0xFF	; 255
     756:	1f 4f       	sbci	r17, 0xFF	; 255
     758:	1f 93       	push	r17
     75a:	0f 93       	push	r16
     75c:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
	checksum_NMEA(strbuf);
     760:	c8 01       	movw	r24, r16
     762:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     766:	f8 01       	movw	r30, r16
     768:	01 90       	ld	r0, Z+
     76a:	00 20       	and	r0, r0
     76c:	e9 f7       	brne	.-6      	; 0x768 <printLine+0x6a>
     76e:	31 97       	sbiw	r30, 0x01	; 1
     770:	af 01       	movw	r20, r30
     772:	40 1b       	sub	r20, r16
     774:	51 0b       	sbc	r21, r17
     776:	b8 01       	movw	r22, r16
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	0e 94 65 1f 	call	0x3eca	; 0x3eca <send_USART>
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	de bf       	out	0x3e, r29	; 62

}
     782:	cb 5f       	subi	r28, 0xFB	; 251
     784:	de 4f       	sbci	r29, 0xFE	; 254
     786:	cd bf       	out	0x3d, r28	; 61
     788:	de bf       	out	0x3e, r29	; 62
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	08 95       	ret

00000794 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     794:	cf 92       	push	r12
     796:	df 92       	push	r13
     798:	ef 92       	push	r14
     79a:	ff 92       	push	r15
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	cc 51       	subi	r28, 0x1C	; 28
     7aa:	d1 40       	sbci	r29, 0x01	; 1
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	d8 2e       	mov	r13, r24
     7b2:	c9 2e       	mov	r12, r25

	const char format_CMD[] = "CMD,%s,%s";
     7b4:	8a e0       	ldi	r24, 0x0A	; 10
     7b6:	e3 e8       	ldi	r30, 0x83	; 131
     7b8:	f4 e9       	ldi	r31, 0x94	; 148
     7ba:	9e 01       	movw	r18, r28
     7bc:	2f 5f       	subi	r18, 0xFF	; 255
     7be:	3f 4f       	sbci	r19, 0xFF	; 255
     7c0:	79 01       	movw	r14, r18
     7c2:	d9 01       	movw	r26, r18
     7c4:	01 90       	ld	r0, Z+
     7c6:	0d 92       	st	X+, r0
     7c8:	8a 95       	dec	r24
     7ca:	e1 f7       	brne	.-8      	; 0x7c4 <echo_cmd+0x30>
	char currenttime[20], strbuf[BUFSIZE];

	get_time(currenttime);
     7cc:	8e 01       	movw	r16, r28
     7ce:	05 5f       	subi	r16, 0xF5	; 245
     7d0:	1f 4f       	sbci	r17, 0xFF	; 255
     7d2:	c8 01       	movw	r24, r16
     7d4:	0e 94 bf 05 	call	0xb7e	; 0xb7e <get_time>
	sprintf(strbuf, format_CMD, currenttime, cmdline);
     7d8:	cf 92       	push	r12
     7da:	df 92       	push	r13
     7dc:	1f 93       	push	r17
     7de:	0f 93       	push	r16
     7e0:	ff 92       	push	r15
     7e2:	ef 92       	push	r14
     7e4:	0c 5e       	subi	r16, 0xEC	; 236
     7e6:	1f 4f       	sbci	r17, 0xFF	; 255
     7e8:	1f 93       	push	r17
     7ea:	0f 93       	push	r16
     7ec:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
	printLine(strbuf);
     7f0:	c8 01       	movw	r24, r16
     7f2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

}
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	c4 5e       	subi	r28, 0xE4	; 228
     7fc:	de 4f       	sbci	r29, 0xFE	; 254
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	de bf       	out	0x3e, r29	; 62
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	df 90       	pop	r13
     810:	cf 90       	pop	r12
     812:	08 95       	ret

00000814 <send_EXprompt>:
/*------------------------------------------------------------------------------
void send_EXprompt(void)
	Sends an exclamation mark on USART port 0
------------------------------------------------------------------------------*/
void send_EXprompt(void)
{
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	00 d0       	rcall	.+0      	; 0x81a <send_EXprompt+0x6>
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62

	const char str[] = "!";
     81e:	81 e2       	ldi	r24, 0x21	; 33
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	89 83       	std	Y+1, r24	; 0x01
     824:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     826:	41 e0       	ldi	r20, 0x01	; 1
     828:	be 01       	movw	r22, r28
     82a:	6f 5f       	subi	r22, 0xFF	; 255
     82c:	7f 4f       	sbci	r23, 0xFF	; 255
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	0e 94 65 1f 	call	0x3eca	; 0x3eca <send_USART>

}
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <rebootACKd>:
	Returns:
		YES if the reboot acknowledge string was received
		NO if it wasn't
------------------------------------------------------------------------------*/
uint8_t rebootACKd(char *cmdline)
{
     83e:	cf 93       	push	r28

	if (!rebootackd) {
     840:	c0 91 02 28 	lds	r28, 0x2802	; 0x802802 <rebootackd>
     844:	c1 11       	cpse	r28, r1
     846:	21 c0       	rjmp	.+66     	; 0x88a <rebootACKd+0x4c>
     848:	fc 01       	movw	r30, r24
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     84a:	80 81       	ld	r24, Z
     84c:	81 32       	cpi	r24, 0x21	; 33
     84e:	91 f4       	brne	.+36     	; 0x874 <rebootACKd+0x36>
     850:	91 81       	ldd	r25, Z+1	; 0x01
     852:	91 11       	cpse	r25, r1
     854:	0f c0       	rjmp	.+30     	; 0x874 <rebootACKd+0x36>
			init_RTC(511);		// 1-sec RTC clock ticks
     856:	8f ef       	ldi	r24, 0xFF	; 255
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	0e 94 81 1a 	call	0x3502	; 0x3502 <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (minimum)
     85e:	85 e0       	ldi	r24, 0x05	; 5
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	80 93 0e 2a 	sts	0x2A0E, r24	; 0x802a0e <timeoutOLED>
     866:	90 93 0f 2a 	sts	0x2A0F, r25	; 0x802a0f <timeoutOLED+0x1>
			rebootackd = YES;
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <rebootackd>
			return(YES);
     870:	c1 e0       	ldi	r28, 0x01	; 1
     872:	0c c0       	rjmp	.+24     	; 0x88c <rebootACKd+0x4e>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     874:	81 32       	cpi	r24, 0x21	; 33
     876:	31 f4       	brne	.+12     	; 0x884 <rebootACKd+0x46>
     878:	81 81       	ldd	r24, Z+1	; 0x01
     87a:	88 23       	and	r24, r24
     87c:	19 f0       	breq	.+6      	; 0x884 <rebootACKd+0x46>
			reboot();
     87e:	0e 94 57 21 	call	0x42ae	; 0x42ae <reboot>
			return(NO);
     882:	04 c0       	rjmp	.+8      	; 0x88c <rebootACKd+0x4e>
		} else {
			send_EXprompt();
     884:	0e 94 0a 04 	call	0x814	; 0x814 <send_EXprompt>
//			send_prompt('!');
			return(NO);
     888:	01 c0       	rjmp	.+2      	; 0x88c <rebootACKd+0x4e>
		}
	}

	return(YES);
     88a:	c1 e0       	ldi	r28, 0x01	; 1

}
     88c:	8c 2f       	mov	r24, r28
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <send_GTprompt>:
/*------------------------------------------------------------------------------
void send_GTprompt(void)
	Sends a greater than (>) on USART port 0
------------------------------------------------------------------------------*/
void send_GTprompt(void)
{
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	00 d0       	rcall	.+0      	; 0x898 <send_GTprompt+0x6>
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62

	const char str[] = ">";
     89c:	8e e3       	ldi	r24, 0x3E	; 62
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	89 83       	std	Y+1, r24	; 0x01
     8a2:	9a 83       	std	Y+2, r25	; 0x02

	send_USART(0, (uint8_t*) str, 1);
     8a4:	41 e0       	ldi	r20, 0x01	; 1
     8a6:	be 01       	movw	r22, r28
     8a8:	6f 5f       	subi	r22, 0xFF	; 255
     8aa:	7f 4f       	sbci	r23, 0xFF	; 255
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	0e 94 65 1f 	call	0x3eca	; 0x3eca <send_USART>

}
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	cf 5f       	subi	r28, 0xFF	; 255
     8c6:	d1 09       	sbc	r29, r1
     8c8:	cd bf       	out	0x3d, r28	; 61
     8ca:	de bf       	out	0x3e, r29	; 62

	char cmdline[BUFSIZE+1];		// BUFSIZE is the size of the ring buffer
	static uint8_t cstack = 0;		// pcmd index

	get_cmdline(cmdline);
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 b2 02 	call	0x564	; 0x564 <get_cmdline>

	if (!rebootACKd(cmdline)) {		// Reboot not yet acknowledged
     8d4:	ce 01       	movw	r24, r28
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	0e 94 1f 04 	call	0x83e	; 0x83e <rebootACKd>
     8dc:	88 23       	and	r24, r24
     8de:	09 f4       	brne	.+2      	; 0x8e2 <commands+0x26>
     8e0:	74 c0       	rjmp	.+232    	; 0x9ca <commands+0x10e>
		return;
	}

		// <CR> or ! alone are not errors
	if ((cmdline[0] == '\0') || (cmdline[0] == '!')) {
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	88 23       	and	r24, r24
     8e6:	11 f0       	breq	.+4      	; 0x8ec <commands+0x30>
     8e8:	81 32       	cpi	r24, 0x21	; 33
     8ea:	29 f4       	brne	.+10     	; 0x8f6 <commands+0x3a>
		firstpass = NO;
     8ec:	10 92 0b 2a 	sts	0x2A0B, r1	; 0x802a0b <firstpass>
		send_GTprompt();
     8f0:	0e 94 49 04 	call	0x892	; 0x892 <send_GTprompt>
		return;
     8f4:	6a c0       	rjmp	.+212    	; 0x9ca <commands+0x10e>
	}

	echo_cmd(cmdline);
     8f6:	ce 01       	movw	r24, r28
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	0e 94 ca 03 	call	0x794	; 0x794 <echo_cmd>
	parse_cmd(cmdline, cstack);
     8fe:	60 91 00 28 	lds	r22, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     902:	ce 01       	movw	r24, r28
     904:	01 96       	adiw	r24, 0x01	; 1
     906:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <parse_cmd>

	switch (pcmd[cstack].cverb) {
     90a:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     90e:	24 e3       	ldi	r18, 0x34	; 52
     910:	82 9f       	mul	r24, r18
     912:	f0 01       	movw	r30, r0
     914:	11 24       	eor	r1, r1
     916:	ed 5f       	subi	r30, 0xFD	; 253
     918:	f7 4d       	sbci	r31, 0xD7	; 215
     91a:	e0 81       	ld	r30, Z
     91c:	4e 2f       	mov	r20, r30
     91e:	50 e0       	ldi	r21, 0x00	; 0
     920:	fa 01       	movw	r30, r20
     922:	e9 54       	subi	r30, 0x49	; 73
     924:	f1 09       	sbc	r31, r1
     926:	ec 32       	cpi	r30, 0x2C	; 44
     928:	f1 05       	cpc	r31, r1
     92a:	e8 f5       	brcc	.+122    	; 0x9a6 <commands+0xea>
     92c:	e0 5b       	subi	r30, 0xB0	; 176
     92e:	ff 4f       	sbci	r31, 0xFF	; 255
     930:	0c 94 76 27 	jmp	0x4eec	; 0x4eec <__tablejump2__>
		case 'c':				// close
			close_PNEU(cstack);
     934:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <close_PNEU>
			break;
     938:	3c c0       	rjmp	.+120    	; 0x9b2 <commands+0xf6>

		case 'o':				// open
			open_PNEU(cstack);
     93a:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <open_PNEU>
			break;
     93e:	39 c0       	rjmp	.+114    	; 0x9b2 <commands+0xf6>

		case 'm':				// move
			move_MOTOR_CMD(cstack);
     940:	0e 94 15 19 	call	0x322a	; 0x322a <move_MOTOR_CMD>
			break;
     944:	36 c0       	rjmp	.+108    	; 0x9b2 <commands+0xf6>

		case 'r':				// report
			report(cstack);
     946:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <report>
			break;
     94a:	33 c0       	rjmp	.+102    	; 0x9b2 <commands+0xf6>

		case 's':				// set
			set(cstack);
     94c:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <set>
			break;
     950:	30 c0       	rjmp	.+96     	; 0x9b2 <commands+0xf6>

		case 't':
			testroutine();
     952:	0e 94 36 1b 	call	0x366c	; 0x366c <testroutine>
			break;
     956:	2d c0       	rjmp	.+90     	; 0x9b2 <commands+0xf6>

		case 'I':	// test init_MOTORS
			init_MOTORS();
     958:	0e 94 bb 19 	call	0x3376	; 0x3376 <init_MOTORS>
			break;
     95c:	2a c0       	rjmp	.+84     	; 0x9b2 <commands+0xf6>

		case 'R':				// Reboot
			if (motorsMoving()) {
     95e:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <motorsMoving>
     962:	88 23       	and	r24, r24
     964:	39 f0       	breq	.+14     	; 0x974 <commands+0xb8>
				printError(ERR_MTR, "commands: Can't reboot, motor moving");
     966:	6d e8       	ldi	r22, 0x8D	; 141
     968:	74 e9       	ldi	r23, 0x94	; 148
     96a:	86 e3       	ldi	r24, 0x36	; 54
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
				break;
     972:	1f c0       	rjmp	.+62     	; 0x9b2 <commands+0xf6>
			} else {
				if (put_FRAM_ENCODERS() == ERROR) {
     974:	0e 94 e5 17 	call	0x2fca	; 0x2fca <put_FRAM_ENCODERS>
     978:	83 36       	cpi	r24, 0x63	; 99
     97a:	31 f4       	brne	.+12     	; 0x988 <commands+0xcc>
					printError(ERR_FRAM, "commands: put_FRAM_ENCODERS error");
     97c:	62 eb       	ldi	r22, 0xB2	; 178
     97e:	74 e9       	ldi	r23, 0x94	; 148
     980:	83 e9       	ldi	r24, 0x93	; 147
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
				}
				timerSAVEENCODER = 0;
     988:	10 92 32 2a 	sts	0x2A32, r1	; 0x802a32 <timerSAVEENCODER>
				send_GTprompt();	// Aidan request
     98c:	0e 94 49 04 	call	0x892	; 0x892 <send_GTprompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     990:	8a e6       	ldi	r24, 0x6A	; 106
     992:	94 e0       	ldi	r25, 0x04	; 4
     994:	21 e0       	ldi	r18, 0x01	; 1
     996:	81 50       	subi	r24, 0x01	; 1
     998:	90 40       	sbci	r25, 0x00	; 0
     99a:	20 40       	sbci	r18, 0x00	; 0
     99c:	e1 f7       	brne	.-8      	; 0x996 <commands+0xda>
     99e:	00 c0       	rjmp	.+0      	; 0x9a0 <commands+0xe4>
				_delay_ms(100);
				reboot();
     9a0:	0e 94 57 21 	call	0x42ae	; 0x42ae <reboot>
				return;
     9a4:	12 c0       	rjmp	.+36     	; 0x9ca <commands+0x10e>
			}

		default:
			printError(ERR_BADCOMMAND, "Not a command");
     9a6:	64 ed       	ldi	r22, 0xD4	; 212
     9a8:	74 e9       	ldi	r23, 0x94	; 148
     9aa:	89 ec       	ldi	r24, 0xC9	; 201
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     9b2:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	6a e0       	ldi	r22, 0x0A	; 10
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	0e 94 43 27 	call	0x4e86	; 0x4e86 <__divmodhi4>
     9c2:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
	send_GTprompt();
     9c6:	0e 94 49 04 	call	0x892	; 0x892 <send_GTprompt>

}
     9ca:	c1 50       	subi	r28, 0x01	; 1
     9cc:	df 4f       	sbci	r29, 0xFF	; 255
     9ce:	cd bf       	out	0x3d, r28	; 61
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	08 95       	ret

000009d8 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	a0 97       	sbiw	r28, 0x20	; 32
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	de bf       	out	0x3e, r29	; 62

	const char format_ISO[] = "20%02x-%02x-%02xT%02x:%02x:%02x";
     9ea:	40 e2       	ldi	r20, 0x20	; 32
     9ec:	e2 ee       	ldi	r30, 0xE2	; 226
     9ee:	f4 e9       	ldi	r31, 0x94	; 148
     9f0:	9e 01       	movw	r18, r28
     9f2:	2f 5f       	subi	r18, 0xFF	; 255
     9f4:	3f 4f       	sbci	r19, 0xFF	; 255
     9f6:	d9 01       	movw	r26, r18
     9f8:	01 90       	ld	r0, Z+
     9fa:	0d 92       	st	X+, r0
     9fc:	4a 95       	dec	r20
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <convert_ds2iso+0x20>
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     a00:	fb 01       	movw	r30, r22
     a02:	b0 81       	ld	r27, Z
	minutes = (*ds3231time++);
     a04:	a1 81       	ldd	r26, Z+1	; 0x01
	hours = (*ds3231time++);
     a06:	12 81       	ldd	r17, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     a08:	04 81       	ldd	r16, Z+4	; 0x04
	month = (*ds3231time++);
     a0a:	55 81       	ldd	r21, Z+5	; 0x05
	year = (*ds3231time);
     a0c:	46 81       	ldd	r20, Z+6	; 0x06

	sprintf(isotime, format_ISO, year, month, date, hours, minutes, seconds);
     a0e:	1f 92       	push	r1
     a10:	bf 93       	push	r27
     a12:	1f 92       	push	r1
     a14:	af 93       	push	r26
     a16:	1f 92       	push	r1
     a18:	1f 93       	push	r17
     a1a:	1f 92       	push	r1
     a1c:	0f 93       	push	r16
     a1e:	1f 92       	push	r1
     a20:	5f 93       	push	r21
     a22:	1f 92       	push	r1
     a24:	4f 93       	push	r20
     a26:	3f 93       	push	r19
     a28:	2f 93       	push	r18
     a2a:	9f 93       	push	r25
     a2c:	8f 93       	push	r24
     a2e:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>

}
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	de bf       	out	0x3e, r29	; 62
     a36:	a0 96       	adiw	r28, 0x20	; 32
     a38:	cd bf       	out	0x3d, r28	; 61
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	08 95       	ret

00000a46 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     a46:	dc 01       	movw	r26, r24
     a48:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     a4a:	81 89       	ldd	r24, Z+17	; 0x11
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	c0 97       	sbiw	r24, 0x30	; 48
     a50:	82 95       	swap	r24
     a52:	92 95       	swap	r25
     a54:	90 7f       	andi	r25, 0xF0	; 240
     a56:	98 27       	eor	r25, r24
     a58:	80 7f       	andi	r24, 0xF0	; 240
     a5a:	98 27       	eor	r25, r24
     a5c:	92 89       	ldd	r25, Z+18	; 0x12
     a5e:	90 53       	subi	r25, 0x30	; 48
     a60:	89 2b       	or	r24, r25
     a62:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     a64:	86 85       	ldd	r24, Z+14	; 0x0e
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	c0 97       	sbiw	r24, 0x30	; 48
     a6a:	82 95       	swap	r24
     a6c:	92 95       	swap	r25
     a6e:	90 7f       	andi	r25, 0xF0	; 240
     a70:	98 27       	eor	r25, r24
     a72:	80 7f       	andi	r24, 0xF0	; 240
     a74:	98 27       	eor	r25, r24
     a76:	97 85       	ldd	r25, Z+15	; 0x0f
     a78:	90 53       	subi	r25, 0x30	; 48
     a7a:	89 2b       	or	r24, r25
     a7c:	11 96       	adiw	r26, 0x01	; 1
     a7e:	8c 93       	st	X, r24
     a80:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     a82:	83 85       	ldd	r24, Z+11	; 0x0b
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	c0 97       	sbiw	r24, 0x30	; 48
     a88:	82 95       	swap	r24
     a8a:	92 95       	swap	r25
     a8c:	90 7f       	andi	r25, 0xF0	; 240
     a8e:	98 27       	eor	r25, r24
     a90:	80 7f       	andi	r24, 0xF0	; 240
     a92:	98 27       	eor	r25, r24
     a94:	94 85       	ldd	r25, Z+12	; 0x0c
     a96:	90 53       	subi	r25, 0x30	; 48
     a98:	89 2b       	or	r24, r25
     a9a:	12 96       	adiw	r26, 0x02	; 2
     a9c:	8c 93       	st	X, r24
     a9e:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	13 96       	adiw	r26, 0x03	; 3
     aa4:	8c 93       	st	X, r24
     aa6:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     aa8:	80 85       	ldd	r24, Z+8	; 0x08
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	c0 97       	sbiw	r24, 0x30	; 48
     aae:	82 95       	swap	r24
     ab0:	92 95       	swap	r25
     ab2:	90 7f       	andi	r25, 0xF0	; 240
     ab4:	98 27       	eor	r25, r24
     ab6:	80 7f       	andi	r24, 0xF0	; 240
     ab8:	98 27       	eor	r25, r24
     aba:	91 85       	ldd	r25, Z+9	; 0x09
     abc:	90 53       	subi	r25, 0x30	; 48
     abe:	89 2b       	or	r24, r25
     ac0:	14 96       	adiw	r26, 0x04	; 4
     ac2:	8c 93       	st	X, r24
     ac4:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     ac6:	25 81       	ldd	r18, Z+5	; 0x05
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	20 53       	subi	r18, 0x30	; 48
     acc:	31 09       	sbc	r19, r1
     ace:	22 95       	swap	r18
     ad0:	32 95       	swap	r19
     ad2:	30 7f       	andi	r19, 0xF0	; 240
     ad4:	32 27       	eor	r19, r18
     ad6:	20 7f       	andi	r18, 0xF0	; 240
     ad8:	32 27       	eor	r19, r18
     ada:	86 81       	ldd	r24, Z+6	; 0x06
     adc:	80 53       	subi	r24, 0x30	; 48
     ade:	28 2b       	or	r18, r24
     ae0:	15 96       	adiw	r26, 0x05	; 5
     ae2:	2c 93       	st	X, r18
     ae4:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     ae6:	22 81       	ldd	r18, Z+2	; 0x02
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	20 53       	subi	r18, 0x30	; 48
     aec:	31 09       	sbc	r19, r1
     aee:	22 95       	swap	r18
     af0:	32 95       	swap	r19
     af2:	30 7f       	andi	r19, 0xF0	; 240
     af4:	32 27       	eor	r19, r18
     af6:	20 7f       	andi	r18, 0xF0	; 240
     af8:	32 27       	eor	r19, r18
     afa:	83 81       	ldd	r24, Z+3	; 0x03
     afc:	80 53       	subi	r24, 0x30	; 48
     afe:	28 2b       	or	r18, r24
     b00:	16 96       	adiw	r26, 0x06	; 6
     b02:	2c 93       	st	X, r18
     b04:	08 95       	ret

00000b06 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     b06:	ef 92       	push	r14
     b08:	ff 92       	push	r15
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	7b 01       	movw	r14, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
     b18:	c8 2f       	mov	r28, r24
     b1a:	83 36       	cpi	r24, 0x63	; 99
     b1c:	19 f4       	brne	.+6      	; 0xb24 <read_DS3231+0x1e>
		stop_TWI();
     b1e:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(ERROR);
     b22:	26 c0       	rjmp	.+76     	; 0xb70 <read_DS3231+0x6a>
    }  

	if (write_TWI(0x00) == ERROR) {	// Register 00h
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
     b2a:	c8 2f       	mov	r28, r24
     b2c:	83 36       	cpi	r24, 0x63	; 99
     b2e:	19 f4       	brne	.+6      	; 0xb36 <read_DS3231+0x30>
		stop_TWI();
     b30:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(ERROR);
     b34:	1d c0       	rjmp	.+58     	; 0xb70 <read_DS3231+0x6a>
	}

	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
     b36:	61 e0       	ldi	r22, 0x01	; 1
     b38:	88 e6       	ldi	r24, 0x68	; 104
     b3a:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
     b3e:	c8 2f       	mov	r28, r24
     b40:	83 36       	cpi	r24, 0x63	; 99
     b42:	61 f4       	brne	.+24     	; 0xb5c <read_DS3231+0x56>
		stop_TWI();
     b44:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(ERROR);
     b48:	13 c0       	rjmp	.+38     	; 0xb70 <read_DS3231+0x6a>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     b4a:	87 01       	movw	r16, r14
     b4c:	0c 0f       	add	r16, r28
     b4e:	11 1d       	adc	r17, r1
     b50:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <read_TWI>
     b54:	f8 01       	movw	r30, r16
     b56:	80 83       	st	Z, r24
	if (start_TWI(DS3231ADDR, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 6; i++) {
     b58:	cf 5f       	subi	r28, 0xFF	; 255
     b5a:	01 c0       	rjmp	.+2      	; 0xb5e <read_DS3231+0x58>
     b5c:	c0 e0       	ldi	r28, 0x00	; 0
     b5e:	c6 30       	cpi	r28, 0x06	; 6
     b60:	a0 f3       	brcs	.-24     	; 0xb4a <read_DS3231+0x44>
		ds3231time[i] = read_TWI();
	}

	ds3231time[6] = readlast_TWI();
     b62:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <readlast_TWI>
     b66:	f7 01       	movw	r30, r14
     b68:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     b6a:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>

	return(NOERROR);
     b6e:	c0 e0       	ldi	r28, 0x00	; 0

}
     b70:	8c 2f       	mov	r24, r28
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	08 95       	ret

00000b7e <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	27 97       	sbiw	r28, 0x07	; 7
     b8e:	cd bf       	out	0x3d, r28	; 61
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	7c 01       	movw	r14, r24

	uint8_t ds3231time[7];

	if (read_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     b94:	be 01       	movw	r22, r28
     b96:	6f 5f       	subi	r22, 0xFF	; 255
     b98:	7f 4f       	sbci	r23, 0xFF	; 255
     b9a:	88 e6       	ldi	r24, 0x68	; 104
     b9c:	0e 94 83 05 	call	0xb06	; 0xb06 <read_DS3231>
     ba0:	18 2f       	mov	r17, r24
     ba2:	83 36       	cpi	r24, 0x63	; 99
     ba4:	79 f4       	brne	.+30     	; 0xbc4 <get_time+0x46>
		printError(ERR_GETTIME, "get_time DS3231");
     ba6:	62 e0       	ldi	r22, 0x02	; 2
     ba8:	75 e9       	ldi	r23, 0x95	; 149
     baa:	85 e6       	ldi	r24, 0x65	; 101
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		strcpy(isotime, "DateTime?");
     bb2:	8a e0       	ldi	r24, 0x0A	; 10
     bb4:	e2 e1       	ldi	r30, 0x12	; 18
     bb6:	f5 e9       	ldi	r31, 0x95	; 149
     bb8:	d7 01       	movw	r26, r14
     bba:	01 90       	ld	r0, Z+
     bbc:	0d 92       	st	X+, r0
     bbe:	8a 95       	dec	r24
     bc0:	e1 f7       	brne	.-8      	; 0xbba <get_time+0x3c>
		return(ERROR);
     bc2:	07 c0       	rjmp	.+14     	; 0xbd2 <get_time+0x54>
	}

	convert_ds2iso(isotime, ds3231time);
     bc4:	be 01       	movw	r22, r28
     bc6:	6f 5f       	subi	r22, 0xFF	; 255
     bc8:	7f 4f       	sbci	r23, 0xFF	; 255
     bca:	c7 01       	movw	r24, r14
     bcc:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <convert_ds2iso>
	return(NOERROR);
     bd0:	10 e0       	ldi	r17, 0x00	; 0

}
     bd2:	81 2f       	mov	r24, r17
     bd4:	27 96       	adiw	r28, 0x07	; 7
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	08 95       	ret

00000be6 <write_DS3231>:
	Returns:
		ERROR for TWI start error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     be6:	ef 92       	push	r14
     be8:	ff 92       	push	r15
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	8b 01       	movw	r16, r22

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
     bfa:	c8 2f       	mov	r28, r24
     bfc:	83 36       	cpi	r24, 0x63	; 99
     bfe:	19 f4       	brne	.+6      	; 0xc06 <write_DS3231+0x20>
		stop_TWI();
     c00:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(ERROR);
     c04:	20 c0       	rjmp	.+64     	; 0xc46 <write_DS3231+0x60>
	}

	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
     c0c:	c8 2f       	mov	r28, r24
     c0e:	83 36       	cpi	r24, 0x63	; 99
     c10:	a1 f4       	brne	.+40     	; 0xc3a <write_DS3231+0x54>
		stop_TWI();
     c12:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(ERROR);
     c16:	17 c0       	rjmp	.+46     	; 0xc46 <write_DS3231+0x60>
	}

	for (i = 0; i < 7; i++) {
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     c18:	78 01       	movw	r14, r16
     c1a:	8f ef       	ldi	r24, 0xFF	; 255
     c1c:	e8 1a       	sub	r14, r24
     c1e:	f8 0a       	sbc	r15, r24
     c20:	f8 01       	movw	r30, r16
     c22:	80 81       	ld	r24, Z
     c24:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
     c28:	c8 2f       	mov	r28, r24
     c2a:	83 36       	cpi	r24, 0x63	; 99
     c2c:	19 f4       	brne	.+6      	; 0xc34 <write_DS3231+0x4e>
			stop_TWI();
     c2e:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
			return(ERROR);
     c32:	09 c0       	rjmp	.+18     	; 0xc46 <write_DS3231+0x60>
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     c34:	df 5f       	subi	r29, 0xFF	; 255
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
     c36:	87 01       	movw	r16, r14
     c38:	01 c0       	rjmp	.+2      	; 0xc3c <write_DS3231+0x56>
     c3a:	d0 e0       	ldi	r29, 0x00	; 0
	if (write_TWI(0x00) == ERROR) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(ERROR);
	}

	for (i = 0; i < 7; i++) {
     c3c:	d7 30       	cpi	r29, 0x07	; 7
     c3e:	60 f3       	brcs	.-40     	; 0xc18 <write_DS3231+0x32>
		if (write_TWI(*ds3231time++) == ERROR) {	// send the new time
			stop_TWI();
			return(ERROR);
		}
	}
	stop_TWI();
     c40:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>

	return(NOERROR);
     c44:	c0 e0       	ldi	r28, 0x00	; 0

}
     c46:	8c 2f       	mov	r24, r28
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	ff 90       	pop	r15
     c52:	ef 90       	pop	r14
     c54:	08 95       	ret

00000c56 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	27 97       	sbiw	r28, 0x07	; 7
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	de bf       	out	0x3e, r29	; 62

	uint8_t ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     c66:	bc 01       	movw	r22, r24
     c68:	ce 01       	movw	r24, r28
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	0e 94 23 05 	call	0xa46	; 0xa46 <convert_iso2ds>
	if (write_DS3231(DS3231ADDR, ds3231time) == ERROR) {
     c70:	be 01       	movw	r22, r28
     c72:	6f 5f       	subi	r22, 0xFF	; 255
     c74:	7f 4f       	sbci	r23, 0xFF	; 255
     c76:	88 e6       	ldi	r24, 0x68	; 104
     c78:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <write_DS3231>
     c7c:	18 2f       	mov	r17, r24
     c7e:	83 36       	cpi	r24, 0x63	; 99
     c80:	39 f4       	brne	.+14     	; 0xc90 <put_time+0x3a>
		printError(ERR_PUTTIME, "put_time DS3231");
     c82:	6c e1       	ldi	r22, 0x1C	; 28
     c84:	75 e9       	ldi	r23, 0x95	; 149
     c86:	86 e6       	ldi	r24, 0x66	; 102
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		return(ERROR);
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <put_time+0x3c>
	}
	return(NOERROR);
     c90:	10 e0       	ldi	r17, 0x00	; 0

}
     c92:	81 2f       	mov	r24, r17
     c94:	27 96       	adiw	r28, 0x07	; 7
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	08 95       	ret

00000ca2 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     ca2:	45 e1       	ldi	r20, 0x15	; 21
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	6b e0       	ldi	r22, 0x0B	; 11
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	0e 94 f5 29 	call	0x53ea	; 0x53ea <eeprom_read_block>
     cae:	08 95       	ret

00000cb0 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     cb0:	4b e0       	ldi	r20, 0x0B	; 11
     cb2:	50 e0       	ldi	r21, 0x00	; 0
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	0e 94 f5 29 	call	0x53ea	; 0x53ea <eeprom_read_block>
     cbc:	08 95       	ret

00000cbe <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	65 97       	sbiw	r28, 0x15	; 21
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	0e 94 bf 05 	call	0xb7e	; 0xb7e <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     cd4:	45 e1       	ldi	r20, 0x15	; 21
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	6b e0       	ldi	r22, 0x0B	; 11
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	ce 01       	movw	r24, r28
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <eeprom_update_block>

}
     ce4:	65 96       	adiw	r28, 0x15	; 21
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	08 95       	ret

00000cf0 <update_VERSION>:

void update_VERSION(void)
{
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	2b 97       	sbiw	r28, 0x0b	; 11
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     cfe:	8b e0       	ldi	r24, 0x0B	; 11
     d00:	ec e2       	ldi	r30, 0x2C	; 44
     d02:	f5 e9       	ldi	r31, 0x95	; 149
     d04:	de 01       	movw	r26, r28
     d06:	11 96       	adiw	r26, 0x01	; 1
     d08:	01 90       	ld	r0, Z+
     d0a:	0d 92       	st	X+, r0
     d0c:	8a 95       	dec	r24
     d0e:	e1 f7       	brne	.-8      	; 0xd08 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     d10:	4b e0       	ldi	r20, 0x0B	; 11
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	ce 01       	movw	r24, r28
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <eeprom_update_block>

}
     d20:	2b 96       	adiw	r28, 0x0b	; 11
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	08 95       	ret

00000d2c <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     d2c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <update_BOOTTIME>
	update_VERSION();
     d30:	0e 94 78 06 	call	0xcf0	; 0xcf0 <update_VERSION>
     d34:	08 95       	ret

00000d36 <printError>:
/*------------------------------------------------------------------------------
void printError(uint8_t errorNumber, char *errorString)
	Prints an error report on USART0
------------------------------------------------------------------------------*/
void printError(uint16_t errorNumber, char *errorString)
{
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	c8 50       	subi	r28, 0x08	; 8
     d44:	d1 40       	sbci	r29, 0x01	; 1
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	de bf       	out	0x3e, r29	; 62

	char strbuf[BUFSIZE];
	const char errorFormat[] = "ERR,%d,%s";
     d4a:	2a e0       	ldi	r18, 0x0A	; 10
     d4c:	e7 e3       	ldi	r30, 0x37	; 55
     d4e:	f5 e9       	ldi	r31, 0x95	; 149
     d50:	de 01       	movw	r26, r28
     d52:	a1 50       	subi	r26, 0x01	; 1
     d54:	bf 4f       	sbci	r27, 0xFF	; 255
     d56:	01 90       	ld	r0, Z+
     d58:	0d 92       	st	X+, r0
     d5a:	2a 95       	dec	r18
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <printError+0x20>

	if (!squelchErrors) {
     d5e:	20 91 01 28 	lds	r18, 0x2801	; 0x802801 <squelchErrors>
     d62:	21 11       	cpse	r18, r1
     d64:	15 c0       	rjmp	.+42     	; 0xd90 <printError+0x5a>
		sprintf(strbuf, errorFormat, errorNumber, errorString);
     d66:	7f 93       	push	r23
     d68:	6f 93       	push	r22
     d6a:	9f 93       	push	r25
     d6c:	8f 93       	push	r24
     d6e:	ce 01       	movw	r24, r28
     d70:	81 50       	subi	r24, 0x01	; 1
     d72:	9f 4f       	sbci	r25, 0xFF	; 255
     d74:	9f 93       	push	r25
     d76:	8f 93       	push	r24
     d78:	8e 01       	movw	r16, r28
     d7a:	0f 5f       	subi	r16, 0xFF	; 255
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
     d7e:	1f 93       	push	r17
     d80:	0f 93       	push	r16
     d82:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
		printLine(strbuf);
     d86:	c8 01       	movw	r24, r16
     d88:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	de bf       	out	0x3e, r29	; 62
	}

}
     d90:	c8 5f       	subi	r28, 0xF8	; 248
     d92:	de 4f       	sbci	r29, 0xFE	; 254
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	08 95       	ret

00000da2 <read_FRAM>:
	Returns:
		ERROR on start_TWI error (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     da2:	cf 92       	push	r12
     da4:	df 92       	push	r13
     da6:	ef 92       	push	r14
     da8:	ff 92       	push	r15
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	d8 2f       	mov	r29, r24
     db4:	d6 2e       	mov	r13, r22
     db6:	07 2f       	mov	r16, r23
     db8:	7a 01       	movw	r14, r20
     dba:	12 2f       	mov	r17, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if (start_TWI(addr, TWIWRITE) == ERROR) {		// TWI start
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
     dc2:	c8 2f       	mov	r28, r24
     dc4:	83 36       	cpi	r24, 0x63	; 99
     dc6:	19 f4       	brne	.+6      	; 0xdce <read_FRAM+0x2c>
		stop_TWI();
     dc8:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(ERROR);
     dcc:	2e c0       	rjmp	.+92     	; 0xe2a <read_FRAM+0x88>
	}

	if (write_TWI(memhigh) == ERROR) {			// Send memory address
     dce:	80 2f       	mov	r24, r16
     dd0:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
     dd4:	c8 2f       	mov	r28, r24
     dd6:	83 36       	cpi	r24, 0x63	; 99
     dd8:	41 f1       	breq	.+80     	; 0xe2a <read_FRAM+0x88>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {
     dda:	8d 2d       	mov	r24, r13
     ddc:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
     de0:	c8 2f       	mov	r28, r24
     de2:	83 36       	cpi	r24, 0x63	; 99
     de4:	11 f1       	breq	.+68     	; 0xe2a <read_FRAM+0x88>
		return(ERROR);
	}

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
     de6:	61 e0       	ldi	r22, 0x01	; 1
     de8:	8d 2f       	mov	r24, r29
     dea:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
     dee:	c8 2f       	mov	r28, r24
     df0:	83 36       	cpi	r24, 0x63	; 99
     df2:	d9 f0       	breq	.+54     	; 0xe2a <read_FRAM+0x88>
     df4:	c0 e0       	ldi	r28, 0x00	; 0
     df6:	08 c0       	rjmp	.+16     	; 0xe08 <read_FRAM+0x66>
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     df8:	67 01       	movw	r12, r14
     dfa:	cc 0e       	add	r12, r28
     dfc:	d1 1c       	adc	r13, r1
     dfe:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <read_TWI>
     e02:	f6 01       	movw	r30, r12
     e04:	80 83       	st	Z, r24

	if (start_TWI(addr, TWIREAD) == ERROR) {		// Repeated start
		return(ERROR);
	}

	for (i = 0; i < (nbytes-1); i++) {
     e06:	cf 5f       	subi	r28, 0xFF	; 255
     e08:	2c 2f       	mov	r18, r28
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 2f       	mov	r24, r17
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	28 17       	cp	r18, r24
     e14:	39 07       	cpc	r19, r25
     e16:	84 f3       	brlt	.-32     	; 0xdf8 <read_FRAM+0x56>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     e18:	ec 01       	movw	r28, r24
     e1a:	ce 0d       	add	r28, r14
     e1c:	df 1d       	adc	r29, r15
     e1e:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <readlast_TWI>
     e22:	88 83       	st	Y, r24

	stop_TWI();
     e24:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>

	return(NOERROR);
     e28:	c0 e0       	ldi	r28, 0x00	; 0

}
     e2a:	8c 2f       	mov	r24, r28
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
     e3c:	08 95       	ret

00000e3e <get_SETTIME>:
	Input: None
	Output: The data from FRAM, presumably containing the time
	Returns: ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t get_SETTIME(char *lastsettime)
{
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	2a 97       	sbiw	r28, 0x0a	; 10
     e4e:	cd bf       	out	0x3d, r28	; 61
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	7c 01       	movw	r14, r24

	const char timeset[] = "Time Set?";
     e54:	8a e0       	ldi	r24, 0x0A	; 10
     e56:	e1 e4       	ldi	r30, 0x41	; 65
     e58:	f5 e9       	ldi	r31, 0x95	; 149
     e5a:	de 01       	movw	r26, r28
     e5c:	11 96       	adiw	r26, 0x01	; 1
     e5e:	01 90       	ld	r0, Z+
     e60:	0d 92       	st	X+, r0
     e62:	8a 95       	dec	r24
     e64:	e1 f7       	brne	.-8      	; 0xe5e <get_SETTIME+0x20>
	if (read_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) lastsettime, ISOTIMELEN) == ERROR) {;
     e66:	24 e1       	ldi	r18, 0x14	; 20
     e68:	a7 01       	movw	r20, r14
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	80 e5       	ldi	r24, 0x50	; 80
     e70:	0e 94 d1 06 	call	0xda2	; 0xda2 <read_FRAM>
     e74:	18 2f       	mov	r17, r24
     e76:	83 36       	cpi	r24, 0x63	; 99
     e78:	39 f4       	brne	.+14     	; 0xe88 <get_SETTIME+0x4a>
		strcpy(lastsettime, timeset);
     e7a:	be 01       	movw	r22, r28
     e7c:	6f 5f       	subi	r22, 0xFF	; 255
     e7e:	7f 4f       	sbci	r23, 0xFF	; 255
     e80:	c7 01       	movw	r24, r14
     e82:	0e 94 12 29 	call	0x5224	; 0x5224 <strcpy>
		return(ERROR);
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <get_SETTIME+0x4c>
	}
	return(NOERROR);
     e88:	10 e0       	ldi	r17, 0x00	; 0
}
     e8a:	81 2f       	mov	r24, r17
     e8c:	2a 96       	adiw	r28, 0x0a	; 10
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	08 95       	ret

00000e9e <write_FRAM>:
	Returns:
		ERROR if start_TWI fails (NACK)
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     e9e:	ef 92       	push	r14
     ea0:	ff 92       	push	r15
     ea2:	0f 93       	push	r16
     ea4:	1f 93       	push	r17
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	f6 2e       	mov	r15, r22
     eac:	17 2f       	mov	r17, r23
     eae:	ea 01       	movw	r28, r20
     eb0:	02 2f       	mov	r16, r18
	uint8_t i, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if (start_TWI(addr, TWIWRITE) == ERROR) {	// TWI START
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
     eb8:	83 36       	cpi	r24, 0x63	; 99
     eba:	e1 f0       	breq	.+56     	; 0xef4 <write_FRAM+0x56>
		return(ERROR);
	}

	if (write_TWI(memhigh) == ERROR) {			// FRAM address to write
     ebc:	81 2f       	mov	r24, r17
     ebe:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
     ec2:	83 36       	cpi	r24, 0x63	; 99
     ec4:	b9 f0       	breq	.+46     	; 0xef4 <write_FRAM+0x56>
		return(ERROR);
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
     ec6:	8f 2d       	mov	r24, r15
     ec8:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
     ecc:	83 36       	cpi	r24, 0x63	; 99
     ece:	91 f0       	breq	.+36     	; 0xef4 <write_FRAM+0x56>
     ed0:	10 e0       	ldi	r17, 0x00	; 0
     ed2:	0b c0       	rjmp	.+22     	; 0xeea <write_FRAM+0x4c>
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
     ed4:	7e 01       	movw	r14, r28
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	e8 1a       	sub	r14, r24
     eda:	f8 0a       	sbc	r15, r24
     edc:	88 81       	ld	r24, Y
     ede:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
     ee2:	83 36       	cpi	r24, 0x63	; 99
     ee4:	39 f0       	breq	.+14     	; 0xef4 <write_FRAM+0x56>
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
     ee6:	1f 5f       	subi	r17, 0xFF	; 255
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
     ee8:	e7 01       	movw	r28, r14
	}
	if (write_TWI(memlow) == ERROR) {			// FRAM address to write
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
     eea:	10 17       	cp	r17, r16
     eec:	98 f3       	brcs	.-26     	; 0xed4 <write_FRAM+0x36>
		if (write_TWI(*val++) == ERROR) {		// Write to FRAM
			return(ERROR);
		}
	}

	stop_TWI();
     eee:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>

	return(NOERROR);
     ef2:	80 e0       	ldi	r24, 0x00	; 0

}
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	1f 91       	pop	r17
     efa:	0f 91       	pop	r16
     efc:	ff 90       	pop	r15
     efe:	ef 90       	pop	r14
     f00:	08 95       	ret

00000f02 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     f02:	8f 92       	push	r8
     f04:	9f 92       	push	r9
     f06:	af 92       	push	r10
     f08:	bf 92       	push	r11
     f0a:	cf 92       	push	r12
     f0c:	df 92       	push	r13
     f0e:	ef 92       	push	r14
     f10:	ff 92       	push	r15
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <get_humidity+0x1a>
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <get_humidity+0x1c>
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62

	uint8_t adcpin;
	float voltage, humidity, temperature;

	switch (sensor) {
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	59 f0       	breq	.+22     	; 0xf3c <get_humidity+0x3a>
     f26:	18 f0       	brcs	.+6      	; 0xf2e <get_humidity+0x2c>
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	79 f0       	breq	.+30     	; 0xf4a <get_humidity+0x48>
     f2c:	15 c0       	rjmp	.+42     	; 0xf58 <get_humidity+0x56>
		case 0:
			temperature = get_temperature(0);
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	0e 94 0e 1b 	call	0x361c	; 0x361c <get_temperature>
     f34:	6b 01       	movw	r12, r22
     f36:	7c 01       	movw	r14, r24
			adcpin = AIN0;		// production
     f38:	40 e4       	ldi	r20, 0x40	; 64
			break;
     f3a:	17 c0       	rjmp	.+46     	; 0xf6a <get_humidity+0x68>

		case 1:
			temperature = get_temperature(1);
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	0e 94 0e 1b 	call	0x361c	; 0x361c <get_temperature>
     f42:	6b 01       	movw	r12, r22
     f44:	7c 01       	movw	r14, r24
			adcpin = AIN1;
     f46:	40 e5       	ldi	r20, 0x50	; 80
			break;
     f48:	10 c0       	rjmp	.+32     	; 0xf6a <get_humidity+0x68>

		case 2:
			temperature = get_temperature(2);
     f4a:	82 e0       	ldi	r24, 0x02	; 2
     f4c:	0e 94 0e 1b 	call	0x361c	; 0x361c <get_temperature>
     f50:	6b 01       	movw	r12, r22
     f52:	7c 01       	movw	r14, r24
			adcpin = AIN2;
     f54:	40 e6       	ldi	r20, 0x60	; 96
			break;
     f56:	09 c0       	rjmp	.+18     	; 0xf6a <get_humidity+0x68>

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     f58:	0f 2e       	mov	r0, r31
     f5a:	c1 2c       	mov	r12, r1
     f5c:	d1 2c       	mov	r13, r1
     f5e:	f0 ea       	ldi	r31, 0xA0	; 160
     f60:	ef 2e       	mov	r14, r31
     f62:	f1 e4       	ldi	r31, 0x41	; 65
     f64:	ff 2e       	mov	r15, r31
     f66:	f0 2d       	mov	r31, r0
			adcpin = AIN2;
			break;

		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     f68:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
     f6a:	8e 01       	movw	r16, r28
     f6c:	0f 5f       	subi	r16, 0xFF	; 255
     f6e:	1f 4f       	sbci	r17, 0xFF	; 255
     f70:	20 e8       	ldi	r18, 0x80	; 128
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	88 e4       	ldi	r24, 0x48	; 72
     f76:	0e 94 c8 01 	call	0x390	; 0x390 <read_ADS1115>
     f7a:	83 36       	cpi	r24, 0x63	; 99
     f7c:	79 f1       	breq	.+94     	; 0xfdc <get_humidity+0xda>
		humidity = BADFLOAT;
	}
	else {
		humidity = ((voltage / 5.0) - 0.16) / 0.0062;
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	40 ea       	ldi	r20, 0xA0	; 160
     f84:	50 e4       	ldi	r21, 0x40	; 64
     f86:	69 81       	ldd	r22, Y+1	; 0x01
     f88:	7a 81       	ldd	r23, Y+2	; 0x02
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	9c 81       	ldd	r25, Y+4	; 0x04
     f8e:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <__divsf3>
     f92:	2a e0       	ldi	r18, 0x0A	; 10
     f94:	37 ed       	ldi	r19, 0xD7	; 215
     f96:	43 e2       	ldi	r20, 0x23	; 35
     f98:	5e e3       	ldi	r21, 0x3E	; 62
     f9a:	0e 94 88 21 	call	0x4310	; 0x4310 <__subsf3>
     f9e:	2f e5       	ldi	r18, 0x5F	; 95
     fa0:	39 e2       	ldi	r19, 0x29	; 41
     fa2:	4b ec       	ldi	r20, 0xCB	; 203
     fa4:	5b e3       	ldi	r21, 0x3B	; 59
     fa6:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <__divsf3>
     faa:	4b 01       	movw	r8, r22
     fac:	5c 01       	movw	r10, r24
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
     fae:	29 ec       	ldi	r18, 0xC9	; 201
     fb0:	3e e8       	ldi	r19, 0x8E	; 142
     fb2:	4d e0       	ldi	r20, 0x0D	; 13
     fb4:	5b e3       	ldi	r21, 0x3B	; 59
     fb6:	c7 01       	movw	r24, r14
     fb8:	b6 01       	movw	r22, r12
     fba:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
     fbe:	9b 01       	movw	r18, r22
     fc0:	ac 01       	movw	r20, r24
     fc2:	62 e2       	ldi	r22, 0x22	; 34
     fc4:	7d ef       	ldi	r23, 0xFD	; 253
     fc6:	86 e8       	ldi	r24, 0x86	; 134
     fc8:	9f e3       	ldi	r25, 0x3F	; 63
     fca:	0e 94 88 21 	call	0x4310	; 0x4310 <__subsf3>
     fce:	9b 01       	movw	r18, r22
     fd0:	ac 01       	movw	r20, r24
     fd2:	c5 01       	movw	r24, r10
     fd4:	b4 01       	movw	r22, r8
     fd6:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <__divsf3>
     fda:	04 c0       	rjmp	.+8      	; 0xfe4 <get_humidity+0xe2>
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	if (read_ADS1115(ADC_RH, PGA6144, adcpin, DR128, &voltage) == ERROR) {
		humidity = BADFLOAT;
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	70 e8       	ldi	r23, 0x80	; 128
     fe0:	86 e2       	ldi	r24, 0x26	; 38
     fe2:	94 ec       	ldi	r25, 0xC4	; 196
		humidity = (humidity / (1.0546 - 0.00216 * temperature));
	}

	return(humidity);

}
     fe4:	24 96       	adiw	r28, 0x04	; 4
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	9f 90       	pop	r9
    1000:	8f 90       	pop	r8
    1002:	08 95       	ret

00001004 <initialize>:
#include "errors.h" //TESTING

uint8_t rebootackd;

void initialize(void)
{
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	2b 97       	sbiw	r28, 0x0b	; 11
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	rebootackd = NO;
    1012:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <rebootackd>
	timerOLED = 0;					// See oled.h
    1016:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED>
    101a:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED+0x1>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
    101e:	80 ee       	ldi	r24, 0xE0	; 224
    1020:	91 e0       	ldi	r25, 0x01	; 1
    1022:	80 93 0e 2a 	sts	0x2A0E, r24	; 0x802a0e <timeoutOLED>
    1026:	90 93 0f 2a 	sts	0x2A0F, r25	; 0x802a0f <timeoutOLED+0x1>

	init_PORTS();
    102a:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <init_PORTS>
	init_TWI();
    102e:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <init_TWI>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
    1032:	80 e2       	ldi	r24, 0x20	; 32
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 81 1a 	call	0x3502	; 0x3502 <init_RTC>
	init_MMA8451();	// Accelerometer; needs TWI
    103a:	0e 94 b3 0a 	call	0x1566	; 0x1566 <init_MMA8451>
	init_OLED();	// Needs TWI
    103e:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <init_OLED>
	init_EEPROM();	// Needs TWI to get boot time from clock
    1042:	0e 94 96 06 	call	0xd2c	; 0xd2c <init_EEPROM>
	init_USART();
    1046:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <init_USART>
	sei();
    104a:	78 94       	sei

	init_MOTORS();	// Needs USART & interrupts on
    104c:	0e 94 bb 19 	call	0x3376	; 0x3376 <init_MOTORS>
	get_VERSION(versionstr);
    1050:	ce 01       	movw	r24, r28
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	0e 94 58 06 	call	0xcb0	; 0xcb0 <get_VERSION>
	writestr_OLED(0,"specMech Version", 1);
    1058:	41 e0       	ldi	r20, 0x01	; 1
    105a:	6b e4       	ldi	r22, 0x4B	; 75
    105c:	75 e9       	ldi	r23, 0x95	; 149
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
	writestr_OLED(0, versionstr, 2);
    1064:	42 e0       	ldi	r20, 0x02	; 2
    1066:	be 01       	movw	r22, r28
    1068:	6f 5f       	subi	r22, 0xFF	; 255
    106a:	7f 4f       	sbci	r23, 0xFF	; 255
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>

}
    1072:	2b 96       	adiw	r28, 0x0b	; 11
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
    107e:	cf 92       	push	r12
    1080:	df 92       	push	r13
    1082:	ef 92       	push	r14
    1084:	ff 92       	push	r15
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	00 d0       	rcall	.+0      	; 0x1090 <read_ionpump+0x12>
    1090:	00 d0       	rcall	.+0      	; 0x1092 <read_ionpump+0x14>
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	21 f0       	breq	.+8      	; 0x10a2 <read_ionpump+0x24>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	c1 f5       	brne	.+112    	; 0x110e <read_ionpump+0x90>
		pins = AIN23;
    109e:	40 e3       	ldi	r20, 0x30	; 48
    10a0:	01 c0       	rjmp	.+2      	; 0x10a4 <read_ionpump+0x26>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
    10a2:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(BADFLOAT);
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
    10a4:	8e 01       	movw	r16, r28
    10a6:	0f 5f       	subi	r16, 0xFF	; 255
    10a8:	1f 4f       	sbci	r17, 0xFF	; 255
    10aa:	20 e8       	ldi	r18, 0x80	; 128
    10ac:	62 e0       	ldi	r22, 0x02	; 2
    10ae:	89 e4       	ldi	r24, 0x49	; 73
    10b0:	0e 94 c8 01 	call	0x390	; 0x390 <read_ADS1115>
    10b4:	83 36       	cpi	r24, 0x63	; 99
    10b6:	81 f1       	breq	.+96     	; 0x1118 <read_ionpump+0x9a>
		return(BADFLOAT);
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
    10b8:	c9 80       	ldd	r12, Y+1	; 0x01
    10ba:	da 80       	ldd	r13, Y+2	; 0x02
    10bc:	eb 80       	ldd	r14, Y+3	; 0x03
    10be:	fc 80       	ldd	r15, Y+4	; 0x04
    10c0:	2d ec       	ldi	r18, 0xCD	; 205
    10c2:	3c ec       	ldi	r19, 0xCC	; 204
    10c4:	4c ec       	ldi	r20, 0xCC	; 204
    10c6:	5e e3       	ldi	r21, 0x3E	; 62
    10c8:	c7 01       	movw	r24, r14
    10ca:	b6 01       	movw	r22, r12
    10cc:	0e 94 f5 21 	call	0x43ea	; 0x43ea <__cmpsf2>
    10d0:	88 23       	and	r24, r24
    10d2:	3c f1       	brlt	.+78     	; 0x1122 <read_ionpump+0xa4>
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e0       	ldi	r20, 0x00	; 0
    10da:	50 e4       	ldi	r21, 0x40	; 64
    10dc:	c7 01       	movw	r24, r14
    10de:	b6 01       	movw	r22, r12
    10e0:	0e 94 54 23 	call	0x46a8	; 0x46a8 <__gesf2>
    10e4:	18 16       	cp	r1, r24
    10e6:	14 f1       	brlt	.+68     	; 0x112c <read_ionpump+0xae>
		return(BADFLOAT);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
    10e8:	29 e7       	ldi	r18, 0x79	; 121
    10ea:	39 ee       	ldi	r19, 0xE9	; 233
    10ec:	42 e0       	ldi	r20, 0x02	; 2
    10ee:	50 e4       	ldi	r21, 0x40	; 64
    10f0:	c7 01       	movw	r24, r14
    10f2:	b6 01       	movw	r22, r12
    10f4:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
    10f8:	2e e6       	ldi	r18, 0x6E	; 110
    10fa:	33 ea       	ldi	r19, 0xA3	; 163
    10fc:	4b ed       	ldi	r20, 0xDB	; 219
    10fe:	50 e4       	ldi	r21, 0x40	; 64
    1100:	0e 94 88 21 	call	0x4310	; 0x4310 <__subsf3>
	return(vacuum);
    1104:	56 2f       	mov	r21, r22
    1106:	47 2f       	mov	r20, r23
    1108:	38 2f       	mov	r19, r24
    110a:	29 2f       	mov	r18, r25
    110c:	13 c0       	rjmp	.+38     	; 0x1134 <read_ionpump+0xb6>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(BADFLOAT);
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	40 e8       	ldi	r20, 0x80	; 128
    1112:	36 e2       	ldi	r19, 0x26	; 38
    1114:	24 ec       	ldi	r18, 0xC4	; 196
    1116:	0e c0       	rjmp	.+28     	; 0x1134 <read_ionpump+0xb6>
	}

	if (read_ADS1115(ADC_IP, PGA4096, pins, DR128, &voltage) == ERROR) {
		return(BADFLOAT);
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	40 e8       	ldi	r20, 0x80	; 128
    111c:	36 e2       	ldi	r19, 0x26	; 38
    111e:	24 ec       	ldi	r18, 0xC4	; 196
    1120:	09 c0       	rjmp	.+18     	; 0x1134 <read_ionpump+0xb6>
	}
	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(BADFLOAT);							// after ISO224 op-amp is 0.5 to 2.0 V
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	40 e8       	ldi	r20, 0x80	; 128
    1126:	36 e2       	ldi	r19, 0x26	; 38
    1128:	24 ec       	ldi	r18, 0xC4	; 196
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <read_ionpump+0xb6>
	} else if (voltage > 2.0) {
		return(BADFLOAT);
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	40 e8       	ldi	r20, 0x80	; 128
    1130:	36 e2       	ldi	r19, 0x26	; 38
    1132:	24 ec       	ldi	r18, 0xC4	; 196
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
    1134:	65 2f       	mov	r22, r21
    1136:	74 2f       	mov	r23, r20
    1138:	83 2f       	mov	r24, r19
    113a:	92 2f       	mov	r25, r18
    113c:	24 96       	adiw	r28, 0x04	; 4
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	ff 90       	pop	r15
    114c:	ef 90       	pop	r14
    114e:	df 90       	pop	r13
    1150:	cf 90       	pop	r12
    1152:	08 95       	ret

00001154 <main>:
void read_PNEUSensors(char*, char*, char*, char*);	//TESTING

int main(void)
{

	firstpass = YES;		// Set to NO in commands.c
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	80 93 0b 2a 	sts	0x2A0B, r24	; 0x802a0b <firstpass>
	squelchErrors = YES;	// Don't need this?
    115a:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <squelchErrors>
	initialize();
    115e:	0e 94 02 08 	call	0x1004	; 0x1004 <initialize>
	squelchErrors = NO;
    1162:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <squelchErrors>

	for (;;) {
		if (recv0_buf.done) {
    1166:	80 91 3c 2c 	lds	r24, 0x2C3C	; 0x802c3c <recv0_buf+0x103>
    116a:	88 23       	and	r24, r24
    116c:	21 f0       	breq	.+8      	; 0x1176 <main+0x22>
			recv0_buf.done = NO;
    116e:	10 92 3c 2c 	sts	0x2C3C, r1	; 0x802c3c <recv0_buf+0x103>
			commands();
    1172:	0e 94 5e 04 	call	0x8bc	; 0x8bc <commands>
		}
		if (timerOLED > timeoutOLED) {	// Display timeout
    1176:	20 91 0c 2a 	lds	r18, 0x2A0C	; 0x802a0c <timerOLED>
    117a:	30 91 0d 2a 	lds	r19, 0x2A0D	; 0x802a0d <timerOLED+0x1>
    117e:	80 91 0e 2a 	lds	r24, 0x2A0E	; 0x802a0e <timeoutOLED>
    1182:	90 91 0f 2a 	lds	r25, 0x2A0F	; 0x802a0f <timeoutOLED+0x1>
    1186:	82 17       	cp	r24, r18
    1188:	93 07       	cpc	r25, r19
    118a:	78 f4       	brcc	.+30     	; 0x11aa <main+0x56>
			squelchErrors = YES;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <squelchErrors>
			clear_OLED(0);
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <clear_OLED>
			clear_OLED(1);
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <clear_OLED>
			timerOLED = 0;
    119e:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED>
    11a2:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED+0x1>
			squelchErrors = NO;
    11a6:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <squelchErrors>
		} if ((timerSAVEENCODER > timeoutSAVEENCODER) && rebootackd) {
    11aa:	90 91 32 2a 	lds	r25, 0x2A32	; 0x802a32 <timerSAVEENCODER>
    11ae:	80 91 2d 2a 	lds	r24, 0x2A2D	; 0x802a2d <timeoutSAVEENCODER>
    11b2:	89 17       	cp	r24, r25
    11b4:	c0 f6       	brcc	.-80     	; 0x1166 <main+0x12>
    11b6:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <rebootackd>
    11ba:	88 23       	and	r24, r24
    11bc:	a1 f2       	breq	.-88     	; 0x1166 <main+0x12>
			squelchErrors = YES;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 93 01 28 	sts	0x2801, r24	; 0x802801 <squelchErrors>
			put_FRAM_ENCODERS();	// Maybe set a global error variable?
    11c4:	0e 94 e5 17 	call	0x2fca	; 0x2fca <put_FRAM_ENCODERS>
			timerSAVEENCODER = 0;
    11c8:	10 92 32 2a 	sts	0x2A32, r1	; 0x802a32 <timerSAVEENCODER>
			squelchErrors = NO;
    11cc:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <squelchErrors>
    11d0:	ca cf       	rjmp	.-108    	; 0x1166 <main+0x12>

000011d2 <read_MCP23008>:
	Returns:
		ERROR if TWI error
		NOERROR Otherwise
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	c8 2f       	mov	r28, r24
    11d8:	d6 2f       	mov	r29, r22

	uint8_t value;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
    11e0:	83 36       	cpi	r24, 0x63	; 99
    11e2:	51 f4       	brne	.+20     	; 0x11f8 <read_MCP23008+0x26>
		printError(ERR_MCP23008, "MCP23008 read error");
    11e4:	6c e5       	ldi	r22, 0x5C	; 92
    11e6:	75 e9       	ldi	r23, 0x95	; 149
    11e8:	82 e9       	ldi	r24, 0x92	; 146
    11ea:	91 e0       	ldi	r25, 0x01	; 1
    11ec:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		stop_TWI();
    11f0:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(0xFF);
    11f4:	8f ef       	ldi	r24, 0xFF	; 255
    11f6:	19 c0       	rjmp	.+50     	; 0x122a <read_MCP23008+0x58>
	}
	write_TWI(reg);
    11f8:	8d 2f       	mov	r24, r29
    11fa:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
	if (start_TWI(addr, TWIREAD) == ERROR) {
    11fe:	61 e0       	ldi	r22, 0x01	; 1
    1200:	8c 2f       	mov	r24, r28
    1202:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
    1206:	83 36       	cpi	r24, 0x63	; 99
    1208:	51 f4       	brne	.+20     	; 0x121e <read_MCP23008+0x4c>
		printError(ERR_MCP23008, "MCP23008 read error");
    120a:	6c e5       	ldi	r22, 0x5C	; 92
    120c:	75 e9       	ldi	r23, 0x95	; 149
    120e:	82 e9       	ldi	r24, 0x92	; 146
    1210:	91 e0       	ldi	r25, 0x01	; 1
    1212:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		stop_TWI();
    1216:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(0xFF);
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	06 c0       	rjmp	.+12     	; 0x122a <read_MCP23008+0x58>
	}
	value = readlast_TWI();
    121e:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <readlast_TWI>
    1222:	c8 2f       	mov	r28, r24
	stop_TWI();
    1224:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
	return(value);
    1228:	8c 2f       	mov	r24, r28

}
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	d6 2f       	mov	r29, r22
    1238:	14 2f       	mov	r17, r20

	uint8_t retval;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
    1240:	c8 2f       	mov	r28, r24
    1242:	83 36       	cpi	r24, 0x63	; 99
    1244:	49 f4       	brne	.+18     	; 0x1258 <write_MCP23008+0x28>
		printError(ERR_MCP23008, "MCP23008 write error");
    1246:	60 e7       	ldi	r22, 0x70	; 112
    1248:	75 e9       	ldi	r23, 0x95	; 149
    124a:	82 e9       	ldi	r24, 0x92	; 146
    124c:	91 e0       	ldi	r25, 0x01	; 1
    124e:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		stop_TWI();
    1252:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(ERROR);
    1256:	15 c0       	rjmp	.+42     	; 0x1282 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(reg))) {
    1258:	8d 2f       	mov	r24, r29
    125a:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
    125e:	88 23       	and	r24, r24
    1260:	21 f0       	breq	.+8      	; 0x126a <write_MCP23008+0x3a>
		stop_TWI();
    1262:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(ERROR);
    1266:	c3 e6       	ldi	r28, 0x63	; 99
    1268:	0c c0       	rjmp	.+24     	; 0x1282 <write_MCP23008+0x52>
	}
	if ((retval = write_TWI(val))) {
    126a:	81 2f       	mov	r24, r17
    126c:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
    1270:	88 23       	and	r24, r24
    1272:	21 f0       	breq	.+8      	; 0x127c <write_MCP23008+0x4c>
		stop_TWI();
    1274:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(ERROR);
    1278:	c3 e6       	ldi	r28, 0x63	; 99
    127a:	03 c0       	rjmp	.+6      	; 0x1282 <write_MCP23008+0x52>
	}
	stop_TWI();
    127c:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
	return(NOERROR);
    1280:	c0 e0       	ldi	r28, 0x00	; 0
	
}
    1282:	8c 2f       	mov	r24, r28
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	08 95       	ret

0000128c <read_MCP9808>:
#include "errors.h"
#include "mcp9808.h"
#include "twi.h"

uint8_t read_MCP9808(float *temperature)
{
    128c:	8f 92       	push	r8
    128e:	9f 92       	push	r9
    1290:	af 92       	push	r10
    1292:	bf 92       	push	r11
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	8c 01       	movw	r16, r24

	uint8_t highbyte, lowbyte, sign;
	float temp;

	if (start_TWI(MCP9808ADDR, TWIWRITE) == ERROR) {
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	88 e1       	ldi	r24, 0x18	; 24
    12a4:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
    12a8:	83 36       	cpi	r24, 0x63	; 99
    12aa:	51 f4       	brne	.+20     	; 0x12c0 <read_MCP9808+0x34>
		*temperature = BADFLOAT;
    12ac:	40 e0       	ldi	r20, 0x00	; 0
    12ae:	50 e8       	ldi	r21, 0x80	; 128
    12b0:	66 e2       	ldi	r22, 0x26	; 38
    12b2:	74 ec       	ldi	r23, 0xC4	; 196
    12b4:	f8 01       	movw	r30, r16
    12b6:	40 83       	st	Z, r20
    12b8:	51 83       	std	Z+1, r21	; 0x01
    12ba:	62 83       	std	Z+2, r22	; 0x02
    12bc:	73 83       	std	Z+3, r23	; 0x03
		return(ERROR);
    12be:	43 c0       	rjmp	.+134    	; 0x1346 <read_MCP9808+0xba>
	}
	write_TWI(TEMPREGISTER);
    12c0:	85 e0       	ldi	r24, 0x05	; 5
    12c2:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    12c6:	61 e0       	ldi	r22, 0x01	; 1
    12c8:	88 e1       	ldi	r24, 0x18	; 24
    12ca:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
	highbyte = read_TWI();
    12ce:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <read_TWI>
    12d2:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    12d4:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <readlast_TWI>
    12d8:	d8 2f       	mov	r29, r24
	stop_TWI();
    12da:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    12de:	fc 2f       	mov	r31, r28
    12e0:	f0 71       	andi	r31, 0x10	; 16
    12e2:	ff 2e       	mov	r15, r31
	highbyte &= 0x0F;					// Clear threshold & sign bits
    12e4:	6c 2f       	mov	r22, r28
    12e6:	6f 70       	andi	r22, 0x0F	; 15
	temp = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 a2 22 	call	0x4544	; 0x4544 <__floatunsisf>
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	40 e8       	ldi	r20, 0x80	; 128
    12f8:	51 e4       	ldi	r21, 0x41	; 65
    12fa:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
    12fe:	4b 01       	movw	r8, r22
    1300:	5c 01       	movw	r10, r24
    1302:	6d 2f       	mov	r22, r29
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0e 94 a2 22 	call	0x4544	; 0x4544 <__floatunsisf>
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e8       	ldi	r20, 0x80	; 128
    1314:	5d e3       	ldi	r21, 0x3D	; 61
    1316:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
    131a:	9b 01       	movw	r18, r22
    131c:	ac 01       	movw	r20, r24
    131e:	c5 01       	movw	r24, r10
    1320:	b4 01       	movw	r22, r8
    1322:	0e 94 89 21 	call	0x4312	; 0x4312 <__addsf3>
	if (sign) {
    1326:	ff 20       	and	r15, r15
    1328:	41 f0       	breq	.+16     	; 0x133a <read_MCP9808+0xae>
		temp = 256.0 - temp;
    132a:	9b 01       	movw	r18, r22
    132c:	ac 01       	movw	r20, r24
    132e:	60 e0       	ldi	r22, 0x00	; 0
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	80 e8       	ldi	r24, 0x80	; 128
    1334:	93 e4       	ldi	r25, 0x43	; 67
    1336:	0e 94 88 21 	call	0x4310	; 0x4310 <__subsf3>
	}
	*temperature = temp;
    133a:	f8 01       	movw	r30, r16
    133c:	60 83       	st	Z, r22
    133e:	71 83       	std	Z+1, r23	; 0x01
    1340:	82 83       	std	Z+2, r24	; 0x02
    1342:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    1344:	80 e0       	ldi	r24, 0x00	; 0
}
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
    134e:	ff 90       	pop	r15
    1350:	bf 90       	pop	r11
    1352:	af 90       	pop	r10
    1354:	9f 90       	pop	r9
    1356:	8f 90       	pop	r8
    1358:	08 95       	ret

0000135a <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	f8 2e       	mov	r15, r24
    1368:	e6 2e       	mov	r14, r22
    136a:	ea 01       	movw	r28, r20
    136c:	02 2f       	mov	r16, r18

	uint8_t i;

	if (start_TWI(addr, TWIWRITE) == ERROR) {
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
    1374:	18 2f       	mov	r17, r24
    1376:	83 36       	cpi	r24, 0x63	; 99
    1378:	19 f4       	brne	.+6      	; 0x1380 <read_MMA8451+0x26>
		stop_TWI();
    137a:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(ERROR);
    137e:	23 c0       	rjmp	.+70     	; 0x13c6 <read_MMA8451+0x6c>
	}
	if (write_TWI(reg) == ERROR) {
    1380:	8e 2d       	mov	r24, r14
    1382:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
    1386:	18 2f       	mov	r17, r24
    1388:	83 36       	cpi	r24, 0x63	; 99
    138a:	e9 f0       	breq	.+58     	; 0x13c6 <read_MMA8451+0x6c>
		return(ERROR);
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
    138c:	61 e0       	ldi	r22, 0x01	; 1
    138e:	8f 2d       	mov	r24, r15
    1390:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
    1394:	18 2f       	mov	r17, r24
    1396:	83 36       	cpi	r24, 0x63	; 99
    1398:	69 f4       	brne	.+26     	; 0x13b4 <read_MMA8451+0x5a>
		stop_TWI();
    139a:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(ERROR);
    139e:	13 c0       	rjmp	.+38     	; 0x13c6 <read_MMA8451+0x6c>
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    13a0:	7e 01       	movw	r14, r28
    13a2:	8f ef       	ldi	r24, 0xFF	; 255
    13a4:	e8 1a       	sub	r14, r24
    13a6:	f8 0a       	sbc	r15, r24
    13a8:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <read_TWI>
    13ac:	88 83       	st	Y, r24
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    13ae:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    13b0:	e7 01       	movw	r28, r14
    13b2:	01 c0       	rjmp	.+2      	; 0x13b6 <read_MMA8451+0x5c>
    13b4:	11 e0       	ldi	r17, 0x01	; 1
	}
	if (start_TWI(addr, TWIREAD) == ERROR) {
		stop_TWI();
		return(ERROR);
	}
	for (i = 1; i < nbytes; i++) {
    13b6:	10 17       	cp	r17, r16
    13b8:	98 f3       	brcs	.-26     	; 0x13a0 <read_MMA8451+0x46>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    13ba:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <readlast_TWI>
    13be:	88 83       	st	Y, r24
	stop_TWI();
    13c0:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
	return(NOERROR);
    13c4:	10 e0       	ldi	r17, 0x00	; 0

}
    13c6:	81 2f       	mov	r24, r17
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	08 95       	ret

000013d6 <get_orientation>:
uint8_t get_orientation(float *x, float *y, float *z)
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
uint8_t get_orientation(float *x, float *y, float *z)
{
    13d6:	cf 92       	push	r12
    13d8:	df 92       	push	r13
    13da:	ef 92       	push	r14
    13dc:	ff 92       	push	r15
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	26 97       	sbiw	r28, 0x06	; 6
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	6c 01       	movw	r12, r24
    13f2:	7b 01       	movw	r14, r22
    13f4:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = BADFLOAT;
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e8       	ldi	r25, 0x80	; 128
    13fa:	a6 e2       	ldi	r26, 0x26	; 38
    13fc:	b4 ec       	ldi	r27, 0xC4	; 196
    13fe:	fa 01       	movw	r30, r20
    1400:	80 83       	st	Z, r24
    1402:	91 83       	std	Z+1, r25	; 0x01
    1404:	a2 83       	std	Z+2, r26	; 0x02
    1406:	b3 83       	std	Z+3, r27	; 0x03
    1408:	fb 01       	movw	r30, r22
    140a:	80 83       	st	Z, r24
    140c:	91 83       	std	Z+1, r25	; 0x01
    140e:	a2 83       	std	Z+2, r26	; 0x02
    1410:	b3 83       	std	Z+3, r27	; 0x03
    1412:	f6 01       	movw	r30, r12
    1414:	80 83       	st	Z, r24
    1416:	91 83       	std	Z+1, r25	; 0x01
    1418:	a2 83       	std	Z+2, r26	; 0x02
    141a:	b3 83       	std	Z+3, r27	; 0x03

	if (read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6) == ERROR) {
    141c:	26 e0       	ldi	r18, 0x06	; 6
    141e:	ae 01       	movw	r20, r28
    1420:	4f 5f       	subi	r20, 0xFF	; 255
    1422:	5f 4f       	sbci	r21, 0xFF	; 255
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	8d e1       	ldi	r24, 0x1D	; 29
    1428:	0e 94 ad 09 	call	0x135a	; 0x135a <read_MMA8451>
    142c:	83 36       	cpi	r24, 0x63	; 99
    142e:	09 f4       	brne	.+2      	; 0x1432 <get_orientation+0x5c>
    1430:	64 c0       	rjmp	.+200    	; 0x14fa <get_orientation+0x124>
		return(ERROR);
	}

	ix = datain[0];
    1432:	69 81       	ldd	r22, Y+1	; 0x01
    1434:	70 e0       	ldi	r23, 0x00	; 0
	ix <<= 8;
    1436:	76 2f       	mov	r23, r22
    1438:	66 27       	eor	r22, r22
	ix |= datain[1];
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	68 2b       	or	r22, r24
	ix >>= 2;
    143e:	75 95       	asr	r23
    1440:	67 95       	ror	r22
    1442:	75 95       	asr	r23
    1444:	67 95       	ror	r22
	*x = 980.6 * ((float) ix/4096.0);
    1446:	07 2e       	mov	r0, r23
    1448:	00 0c       	add	r0, r0
    144a:	88 0b       	sbc	r24, r24
    144c:	99 0b       	sbc	r25, r25
    144e:	0e 94 a4 22 	call	0x4548	; 0x4548 <__floatsisf>
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e8       	ldi	r20, 0x80	; 128
    1458:	59 e3       	ldi	r21, 0x39	; 57
    145a:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
    145e:	26 e6       	ldi	r18, 0x66	; 102
    1460:	36 e2       	ldi	r19, 0x26	; 38
    1462:	45 e7       	ldi	r20, 0x75	; 117
    1464:	54 e4       	ldi	r21, 0x44	; 68
    1466:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
    146a:	f6 01       	movw	r30, r12
    146c:	60 83       	st	Z, r22
    146e:	71 83       	std	Z+1, r23	; 0x01
    1470:	82 83       	std	Z+2, r24	; 0x02
    1472:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    1474:	6b 81       	ldd	r22, Y+3	; 0x03
    1476:	70 e0       	ldi	r23, 0x00	; 0
	iy <<= 8;
    1478:	76 2f       	mov	r23, r22
    147a:	66 27       	eor	r22, r22
	iy |= datain[3];
    147c:	8c 81       	ldd	r24, Y+4	; 0x04
    147e:	68 2b       	or	r22, r24
	iy >>= 2;
    1480:	75 95       	asr	r23
    1482:	67 95       	ror	r22
    1484:	75 95       	asr	r23
    1486:	67 95       	ror	r22
	*y = 980.6 * ((float) iy/4096.0);
    1488:	07 2e       	mov	r0, r23
    148a:	00 0c       	add	r0, r0
    148c:	88 0b       	sbc	r24, r24
    148e:	99 0b       	sbc	r25, r25
    1490:	0e 94 a4 22 	call	0x4548	; 0x4548 <__floatsisf>
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e8       	ldi	r20, 0x80	; 128
    149a:	59 e3       	ldi	r21, 0x39	; 57
    149c:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
    14a0:	26 e6       	ldi	r18, 0x66	; 102
    14a2:	36 e2       	ldi	r19, 0x26	; 38
    14a4:	45 e7       	ldi	r20, 0x75	; 117
    14a6:	54 e4       	ldi	r21, 0x44	; 68
    14a8:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
    14ac:	f7 01       	movw	r30, r14
    14ae:	60 83       	st	Z, r22
    14b0:	71 83       	std	Z+1, r23	; 0x01
    14b2:	82 83       	std	Z+2, r24	; 0x02
    14b4:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    14b6:	6d 81       	ldd	r22, Y+5	; 0x05
    14b8:	70 e0       	ldi	r23, 0x00	; 0
	iz <<= 8;
    14ba:	76 2f       	mov	r23, r22
    14bc:	66 27       	eor	r22, r22
	iz |= datain[5];
    14be:	8e 81       	ldd	r24, Y+6	; 0x06
    14c0:	68 2b       	or	r22, r24
	iz >>= 2;
    14c2:	75 95       	asr	r23
    14c4:	67 95       	ror	r22
    14c6:	75 95       	asr	r23
    14c8:	67 95       	ror	r22
	*z = 980.6 * ((float) iz/4096.0);
    14ca:	07 2e       	mov	r0, r23
    14cc:	00 0c       	add	r0, r0
    14ce:	88 0b       	sbc	r24, r24
    14d0:	99 0b       	sbc	r25, r25
    14d2:	0e 94 a4 22 	call	0x4548	; 0x4548 <__floatsisf>
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	40 e8       	ldi	r20, 0x80	; 128
    14dc:	59 e3       	ldi	r21, 0x39	; 57
    14de:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
    14e2:	26 e6       	ldi	r18, 0x66	; 102
    14e4:	36 e2       	ldi	r19, 0x26	; 38
    14e6:	45 e7       	ldi	r20, 0x75	; 117
    14e8:	54 e4       	ldi	r21, 0x44	; 68
    14ea:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
    14ee:	f8 01       	movw	r30, r16
    14f0:	60 83       	st	Z, r22
    14f2:	71 83       	std	Z+1, r23	; 0x01
    14f4:	82 83       	std	Z+2, r24	; 0x02
    14f6:	93 83       	std	Z+3, r25	; 0x03

	return(0);
    14f8:	80 e0       	ldi	r24, 0x00	; 0

}
    14fa:	26 96       	adiw	r28, 0x06	; 6
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	ff 90       	pop	r15
    150a:	ef 90       	pop	r14
    150c:	df 90       	pop	r13
    150e:	cf 90       	pop	r12
    1510:	08 95       	ret

00001512 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	d6 2f       	mov	r29, r22
    151a:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
    1522:	c8 2f       	mov	r28, r24
    1524:	88 23       	and	r24, r24
    1526:	21 f0       	breq	.+8      	; 0x1530 <write_MMA8451+0x1e>
		stop_TWI();
    1528:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(retval);
    152c:	8c 2f       	mov	r24, r28
    152e:	17 c0       	rjmp	.+46     	; 0x155e <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1530:	8d 2f       	mov	r24, r29
    1532:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
    1536:	c8 2f       	mov	r28, r24
    1538:	88 23       	and	r24, r24
    153a:	21 f0       	breq	.+8      	; 0x1544 <write_MMA8451+0x32>
		stop_TWI();
    153c:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(retval);
    1540:	8c 2f       	mov	r24, r28
    1542:	0d c0       	rjmp	.+26     	; 0x155e <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1544:	81 2f       	mov	r24, r17
    1546:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
    154a:	c8 2f       	mov	r28, r24
    154c:	88 23       	and	r24, r24
    154e:	21 f0       	breq	.+8      	; 0x1558 <write_MMA8451+0x46>
		stop_TWI();
    1550:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
		return(retval);
    1554:	8c 2f       	mov	r24, r28
    1556:	03 c0       	rjmp	.+6      	; 0x155e <write_MMA8451+0x4c>
	}
	stop_TWI();
    1558:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>
	return(0);
    155c:	80 e0       	ldi	r24, 0x00	; 0
	
}
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	08 95       	ret

00001566 <init_MMA8451>:
	sampling frequency (1.56 Hz), a low cutoff frequency on the high pass
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/
uint8_t init_MMA8451(void)
{
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	1f 92       	push	r1
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    1570:	40 e4       	ldi	r20, 0x40	; 64
    1572:	6b e2       	ldi	r22, 0x2B	; 43
    1574:	8d e1       	ldi	r24, 0x1D	; 29
    1576:	0e 94 89 0a 	call	0x1512	; 0x1512 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    157a:	21 e0       	ldi	r18, 0x01	; 1
    157c:	ae 01       	movw	r20, r28
    157e:	4f 5f       	subi	r20, 0xFF	; 255
    1580:	5f 4f       	sbci	r21, 0xFF	; 255
    1582:	6b e2       	ldi	r22, 0x2B	; 43
    1584:	8d e1       	ldi	r24, 0x1D	; 29
    1586:	0e 94 ad 09 	call	0x135a	; 0x135a <read_MMA8451>
	while (retval & 0x40) {
    158a:	08 c0       	rjmp	.+16     	; 0x159c <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    158c:	21 e0       	ldi	r18, 0x01	; 1
    158e:	ae 01       	movw	r20, r28
    1590:	4f 5f       	subi	r20, 0xFF	; 255
    1592:	5f 4f       	sbci	r21, 0xFF	; 255
    1594:	6b e2       	ldi	r22, 0x2B	; 43
    1596:	8d e1       	ldi	r24, 0x1D	; 29
    1598:	0e 94 ad 09 	call	0x135a	; 0x135a <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	86 fd       	sbrc	r24, 6
    15a0:	f5 cf       	rjmp	.-22     	; 0x158c <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    15a2:	40 ec       	ldi	r20, 0xC0	; 192
    15a4:	6f e0       	ldi	r22, 0x0F	; 15
    15a6:	8d e1       	ldi	r24, 0x1D	; 29
    15a8:	0e 94 89 0a 	call	0x1512	; 0x1512 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    15ac:	42 e0       	ldi	r20, 0x02	; 2
    15ae:	6b e2       	ldi	r22, 0x2B	; 43
    15b0:	8d e1       	ldi	r24, 0x1D	; 29
    15b2:	0e 94 89 0a 	call	0x1512	; 0x1512 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    15b6:	4d e3       	ldi	r20, 0x3D	; 61
    15b8:	6a e2       	ldi	r22, 0x2A	; 42
    15ba:	8d e1       	ldi	r24, 0x1D	; 29
    15bc:	0e 94 89 0a 	call	0x1512	; 0x1512 <write_MMA8451>

	return(retval);

}
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	0f 90       	pop	r0
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	08 95       	ret

000015ca <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum and \r\n to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	2e 97       	sbiw	r28, 0x0e	; 14
    15dc:	cd bf       	out	0x3d, r28	; 61
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    15e2:	88 e0       	ldi	r24, 0x08	; 8
    15e4:	e5 e8       	ldi	r30, 0x85	; 133
    15e6:	f5 e9       	ldi	r31, 0x95	; 149
    15e8:	de 01       	movw	r26, r28
    15ea:	11 96       	adiw	r26, 0x01	; 1
    15ec:	01 90       	ld	r0, Z+
    15ee:	0d 92       	st	X+, r0
    15f0:	8a 95       	dec	r24
    15f2:	e1 f7       	brne	.-8      	; 0x15ec <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    15f4:	f8 01       	movw	r30, r16
    15f6:	01 90       	ld	r0, Z+
    15f8:	00 20       	and	r0, r0
    15fa:	e9 f7       	brne	.-6      	; 0x15f6 <checksum_NMEA+0x2c>
    15fc:	31 97       	sbiw	r30, 0x01	; 1
    15fe:	3e 2f       	mov	r19, r30
    1600:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    1602:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	06 c0       	rjmp	.+12     	; 0x1614 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    1608:	f8 01       	movw	r30, r16
    160a:	e8 0f       	add	r30, r24
    160c:	f1 1d       	adc	r31, r1
    160e:	20 81       	ld	r18, Z
    1610:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1612:	8f 5f       	subi	r24, 0xFF	; 255
    1614:	83 17       	cp	r24, r19
    1616:	c0 f3       	brcs	.-16     	; 0x1608 <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1618:	1f 92       	push	r1
    161a:	9f 93       	push	r25
    161c:	ce 01       	movw	r24, r28
    161e:	01 96       	adiw	r24, 0x01	; 1
    1620:	9f 93       	push	r25
    1622:	8f 93       	push	r24
    1624:	7e 01       	movw	r14, r28
    1626:	89 e0       	ldi	r24, 0x09	; 9
    1628:	e8 0e       	add	r14, r24
    162a:	f1 1c       	adc	r15, r1
    162c:	ff 92       	push	r15
    162e:	ef 92       	push	r14
    1630:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
	strcat(str, chksum);
    1634:	b7 01       	movw	r22, r14
    1636:	c8 01       	movw	r24, r16
    1638:	0e 94 07 29 	call	0x520e	; 0x520e <strcat>

}
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	2e 96       	adiw	r28, 0x0e	; 14
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	08 95       	ret

0000165c <reset_OLED>:
void reset_OLED(void)
	Pulls the OLED display reset line low for 1 ms. This seems to be needed.
------------------------------------------------------------------------------*/
void reset_OLED(void)
{
	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    165c:	e0 e6       	ldi	r30, 0x60	; 96
    165e:	f4 e0       	ldi	r31, 0x04	; 4
    1660:	80 e4       	ldi	r24, 0x40	; 64
    1662:	86 83       	std	Z+6, r24	; 0x06
	PORTD.DIRSET = PIN6_bm;
    1664:	81 83       	std	Z+1, r24	; 0x01
    1666:	a1 e4       	ldi	r26, 0x41	; 65
    1668:	b3 e0       	ldi	r27, 0x03	; 3
    166a:	11 97       	sbiw	r26, 0x01	; 1
    166c:	f1 f7       	brne	.-4      	; 0x166a <reset_OLED+0xe>
    166e:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    1670:	85 83       	std	Z+5, r24	; 0x05
    1672:	08 95       	ret

00001674 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	d6 2f       	mov	r29, r22
    167a:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <start_TWI>
	write_TWI(type);
    1682:	8d 2f       	mov	r24, r29
    1684:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
	write_TWI(byteToSend);
    1688:	8c 2f       	mov	r24, r28
    168a:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <write_TWI>
	stop_TWI();
    168e:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <stop_TWI>

}
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	08 95       	ret

00001698 <init_OLEDDISPLAY>:
	Initialize a Newhaven NHD-0216AW-1B3 OLED display. This is taken straight
	from https://github.com/NewhavenDisplay/NHD_US2066. The manual is not easy
	to understand but this seems to work.
------------------------------------------------------------------------------*/
void init_OLEDDISPLAY(uint8_t displaynumber)
{
    1698:	cf 93       	push	r28

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
    169a:	88 23       	and	r24, r24
    169c:	29 f0       	breq	.+10     	; 0x16a8 <init_OLEDDISPLAY+0x10>
		twiaddr = OLEDADDR0;		
	} else if (displaynumber == 1) {	// Left-side display
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <init_OLEDDISPLAY+0xc>
    16a2:	9e c0       	rjmp	.+316    	; 0x17e0 <init_OLEDDISPLAY+0x148>
		twiaddr = OLEDADDR1;
    16a4:	cd e3       	ldi	r28, 0x3D	; 61
    16a6:	01 c0       	rjmp	.+2      	; 0x16aa <init_OLEDDISPLAY+0x12>
{

	uint8_t twiaddr;

	if (displaynumber == 0) {			// Right-side display
		twiaddr = OLEDADDR0;		
    16a8:	cc e3       	ldi	r28, 0x3C	; 60
		twiaddr = OLEDADDR1;
	} else {
		return;
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    16aa:	4a e2       	ldi	r20, 0x2A	; 42
    16ac:	60 e0       	ldi	r22, 0x00	; 0
    16ae:	8c 2f       	mov	r24, r28
    16b0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    16b4:	41 e7       	ldi	r20, 0x71	; 113
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	8c 2f       	mov	r24, r28
    16ba:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    16be:	4c e5       	ldi	r20, 0x5C	; 92
    16c0:	60 e4       	ldi	r22, 0x40	; 64
    16c2:	8c 2f       	mov	r24, r28
    16c4:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    16c8:	48 e2       	ldi	r20, 0x28	; 40
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	8c 2f       	mov	r24, r28
    16ce:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    16d2:	48 e0       	ldi	r20, 0x08	; 8
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	8c 2f       	mov	r24, r28
    16d8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    16dc:	4a e2       	ldi	r20, 0x2A	; 42
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	8c 2f       	mov	r24, r28
    16e2:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    16e6:	49 e7       	ldi	r20, 0x79	; 121
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	8c 2f       	mov	r24, r28
    16ec:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    16f0:	45 ed       	ldi	r20, 0xD5	; 213
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	8c 2f       	mov	r24, r28
    16f6:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    16fa:	40 e7       	ldi	r20, 0x70	; 112
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	8c 2f       	mov	r24, r28
    1700:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1704:	48 e7       	ldi	r20, 0x78	; 120
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	8c 2f       	mov	r24, r28
    170a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    170e:	48 e0       	ldi	r20, 0x08	; 8
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	8c 2f       	mov	r24, r28
    1714:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1718:	46 e0       	ldi	r20, 0x06	; 6
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	8c 2f       	mov	r24, r28
    171e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1722:	42 e7       	ldi	r20, 0x72	; 114
    1724:	60 e0       	ldi	r22, 0x00	; 0
    1726:	8c 2f       	mov	r24, r28
    1728:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	60 e4       	ldi	r22, 0x40	; 64
    1730:	8c 2f       	mov	r24, r28
    1732:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1736:	4a e2       	ldi	r20, 0x2A	; 42
    1738:	60 e0       	ldi	r22, 0x00	; 0
    173a:	8c 2f       	mov	r24, r28
    173c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    1740:	49 e7       	ldi	r20, 0x79	; 121
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	8c 2f       	mov	r24, r28
    1746:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    174a:	4a ed       	ldi	r20, 0xDA	; 218
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	8c 2f       	mov	r24, r28
    1750:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	8c 2f       	mov	r24, r28
    175a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    175e:	4c ed       	ldi	r20, 0xDC	; 220
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	8c 2f       	mov	r24, r28
    1764:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    1768:	40 e0       	ldi	r20, 0x00	; 0
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	8c 2f       	mov	r24, r28
    176e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    1772:	41 e8       	ldi	r20, 0x81	; 129
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	8c 2f       	mov	r24, r28
    1778:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    177c:	4f e7       	ldi	r20, 0x7F	; 127
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	8c 2f       	mov	r24, r28
    1782:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1786:	49 ed       	ldi	r20, 0xD9	; 217
    1788:	60 e0       	ldi	r22, 0x00	; 0
    178a:	8c 2f       	mov	r24, r28
    178c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    1790:	41 ef       	ldi	r20, 0xF1	; 241
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	8c 2f       	mov	r24, r28
    1796:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    179a:	4b ed       	ldi	r20, 0xDB	; 219
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	8c 2f       	mov	r24, r28
    17a0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    17a4:	40 e4       	ldi	r20, 0x40	; 64
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	8c 2f       	mov	r24, r28
    17aa:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    17ae:	48 e7       	ldi	r20, 0x78	; 120
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	8c 2f       	mov	r24, r28
    17b4:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    17b8:	48 e2       	ldi	r20, 0x28	; 40
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	8c 2f       	mov	r24, r28
    17be:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	8c 2f       	mov	r24, r28
    17c8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    17cc:	40 e8       	ldi	r20, 0x80	; 128
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	8c 2f       	mov	r24, r28
    17d2:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    17d6:	4c e0       	ldi	r20, 0x0C	; 12
    17d8:	60 e0       	ldi	r22, 0x00	; 0
    17da:	8c 2f       	mov	r24, r28
    17dc:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>

}
    17e0:	cf 91       	pop	r28
    17e2:	08 95       	ret

000017e4 <init_OLED>:
	Set up the two OLED displays
------------------------------------------------------------------------------*/
void init_OLED(void)
{

	reset_OLED();				// Need to start with a reset
    17e4:	0e 94 2e 0b 	call	0x165c	; 0x165c <reset_OLED>
	init_OLEDDISPLAY(0);
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	0e 94 4c 0b 	call	0x1698	; 0x1698 <init_OLEDDISPLAY>
	init_OLEDDISPLAY(1);
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <init_OLEDDISPLAY>
    17f4:	2a e6       	ldi	r18, 0x6A	; 106
    17f6:	84 e0       	ldi	r24, 0x04	; 4
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	21 50       	subi	r18, 0x01	; 1
    17fc:	80 40       	sbci	r24, 0x00	; 0
    17fe:	90 40       	sbci	r25, 0x00	; 0
    1800:	e1 f7       	brne	.-8      	; 0x17fa <init_OLED+0x16>
    1802:	00 c0       	rjmp	.+0      	; 0x1804 <__DATA_REGION_LENGTH__+0x4>
    1804:	08 95       	ret

00001806 <writestr_OLED>:
	
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.
------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1806:	ef 92       	push	r14
    1808:	ff 92       	push	r15
    180a:	0f 93       	push	r16
    180c:	1f 93       	push	r17
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	e2 97       	sbiw	r28, 0x32	; 50
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    181e:	91 e1       	ldi	r25, 0x11	; 17
    1820:	ed e8       	ldi	r30, 0x8D	; 141
    1822:	f5 e9       	ldi	r31, 0x95	; 149
    1824:	de 01       	movw	r26, r28
    1826:	92 96       	adiw	r26, 0x22	; 34
    1828:	01 90       	ld	r0, Z+
    182a:	0d 92       	st	X+, r0
    182c:	9a 95       	dec	r25
    182e:	e1 f7       	brne	.-8      	; 0x1828 <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1830:	81 11       	cpse	r24, r1
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1834:	0c e3       	ldi	r16, 0x3C	; 60
    1836:	01 c0       	rjmp	.+2      	; 0x183a <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1838:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    183a:	ce 01       	movw	r24, r28
    183c:	01 96       	adiw	r24, 0x01	; 1
    183e:	7c 01       	movw	r14, r24
    1840:	0e 94 12 29 	call	0x5224	; 0x5224 <strcpy>
	if (strlen(strbuf) > 16) {
    1844:	f7 01       	movw	r30, r14
    1846:	01 90       	ld	r0, Z+
    1848:	00 20       	and	r0, r0
    184a:	e9 f7       	brne	.-6      	; 0x1846 <writestr_OLED+0x40>
    184c:	31 97       	sbiw	r30, 0x01	; 1
    184e:	ee 19       	sub	r30, r14
    1850:	ff 09       	sbc	r31, r15
    1852:	71 97       	sbiw	r30, 0x11	; 17
    1854:	08 f0       	brcs	.+2      	; 0x1858 <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1856:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1858:	be 01       	movw	r22, r28
    185a:	6e 5d       	subi	r22, 0xDE	; 222
    185c:	7f 4f       	sbci	r23, 0xFF	; 255
    185e:	ce 01       	movw	r24, r28
    1860:	01 96       	adiw	r24, 0x01	; 1
    1862:	0e 94 07 29 	call	0x520e	; 0x520e <strcat>

	if (lineno == 1) {
    1866:	11 30       	cpi	r17, 0x01	; 1
    1868:	39 f4       	brne	.+14     	; 0x1878 <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    186a:	40 e8       	ldi	r20, 0x80	; 128
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	80 2f       	mov	r24, r16
    1870:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1874:	10 e0       	ldi	r17, 0x00	; 0
    1876:	12 c0       	rjmp	.+36     	; 0x189c <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1878:	40 ec       	ldi	r20, 0xC0	; 192
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	80 2f       	mov	r24, r16
    187e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>
    1882:	f8 cf       	rjmp	.-16     	; 0x1874 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1884:	e1 e0       	ldi	r30, 0x01	; 1
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	ec 0f       	add	r30, r28
    188a:	fd 1f       	adc	r31, r29
    188c:	e1 0f       	add	r30, r17
    188e:	f1 1d       	adc	r31, r1
    1890:	40 81       	ld	r20, Z
    1892:	60 e4       	ldi	r22, 0x40	; 64
    1894:	80 2f       	mov	r24, r16
    1896:	0e 94 3a 0b 	call	0x1674	; 0x1674 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    189a:	1f 5f       	subi	r17, 0xFF	; 255
    189c:	10 31       	cpi	r17, 0x10	; 16
    189e:	90 f3       	brcs	.-28     	; 0x1884 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <timerOLED>
    18a8:	90 93 0d 2a 	sts	0x2A0D, r25	; 0x802a0d <timerOLED+0x1>

}
    18ac:	e2 96       	adiw	r28, 0x32	; 50
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	ff 90       	pop	r15
    18bc:	ef 90       	pop	r14
    18be:	08 95       	ret

000018c0 <clear_OLED>:
	Clears the OLED screen by writing blank spaces to both lines.
	
	TRY DOING writestr_OLED with zero length string since writestr pads w/blanks
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	1f 92       	push	r1
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	18 2f       	mov	r17, r24

	char nullstr[] = "";
    18ce:	19 82       	std	Y+1, r1	; 0x01
	writestr_OLED(displaynumber, nullstr, 1);
    18d0:	41 e0       	ldi	r20, 0x01	; 1
    18d2:	be 01       	movw	r22, r28
    18d4:	6f 5f       	subi	r22, 0xFF	; 255
    18d6:	7f 4f       	sbci	r23, 0xFF	; 255
    18d8:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
	writestr_OLED(displaynumber, nullstr, 2);
    18dc:	42 e0       	ldi	r20, 0x02	; 2
    18de:	be 01       	movw	r22, r28
    18e0:	6f 5f       	subi	r22, 0xFF	; 255
    18e2:	7f 4f       	sbci	r23, 0xFF	; 255
    18e4:	81 2f       	mov	r24, r17
    18e6:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
	timerOLED = 0;
    18ea:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED>
    18ee:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED+0x1>

}
    18f2:	0f 90       	pop	r0
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	08 95       	ret

000018fc <read_PNEUSensors>:
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSensors(char *shutter, char *left, char *right, char *air)
{
    18fc:	cf 92       	push	r12
    18fe:	df 92       	push	r13
    1900:	ef 92       	push	r14
    1902:	ff 92       	push	r15
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	6c 01       	movw	r12, r24
    190e:	8b 01       	movw	r16, r22
    1910:	7a 01       	movw	r14, r20
    1912:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);	// NEEDS ERRORCHECK
    1914:	69 e0       	ldi	r22, 0x09	; 9
    1916:	81 e2       	ldi	r24, 0x21	; 33
    1918:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    191c:	98 2f       	mov	r25, r24
    191e:	92 95       	swap	r25
    1920:	96 95       	lsr	r25
    1922:	96 95       	lsr	r25
    1924:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    1926:	91 30       	cpi	r25, 0x01	; 1
    1928:	21 f4       	brne	.+8      	; 0x1932 <read_PNEUSensors+0x36>
		*shutter = 'c';
    192a:	93 e6       	ldi	r25, 0x63	; 99
    192c:	f6 01       	movw	r30, r12
    192e:	90 83       	st	Z, r25
    1930:	0f c0       	rjmp	.+30     	; 0x1950 <read_PNEUSensors+0x54>
	} else if (state == 2) {
    1932:	92 30       	cpi	r25, 0x02	; 2
    1934:	21 f4       	brne	.+8      	; 0x193e <read_PNEUSensors+0x42>
		*shutter = 'o';
    1936:	9f e6       	ldi	r25, 0x6F	; 111
    1938:	f6 01       	movw	r30, r12
    193a:	90 83       	st	Z, r25
    193c:	09 c0       	rjmp	.+18     	; 0x1950 <read_PNEUSensors+0x54>
	} else if (state == 3) {
    193e:	93 30       	cpi	r25, 0x03	; 3
    1940:	21 f4       	brne	.+8      	; 0x194a <read_PNEUSensors+0x4e>
		*shutter = 't';
    1942:	94 e7       	ldi	r25, 0x74	; 116
    1944:	f6 01       	movw	r30, r12
    1946:	90 83       	st	Z, r25
    1948:	03 c0       	rjmp	.+6      	; 0x1950 <read_PNEUSensors+0x54>
	} else {
		*shutter = 'x';
    194a:	98 e7       	ldi	r25, 0x78	; 120
    194c:	f6 01       	movw	r30, r12
    194e:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    1950:	98 2f       	mov	r25, r24
    1952:	96 95       	lsr	r25
    1954:	96 95       	lsr	r25
	state &= 0b00000011;
    1956:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    1958:	91 30       	cpi	r25, 0x01	; 1
    195a:	21 f4       	brne	.+8      	; 0x1964 <read_PNEUSensors+0x68>
		*right = 'c';
    195c:	93 e6       	ldi	r25, 0x63	; 99
    195e:	f7 01       	movw	r30, r14
    1960:	90 83       	st	Z, r25
    1962:	0f c0       	rjmp	.+30     	; 0x1982 <read_PNEUSensors+0x86>
	} else if (state == 2) {
    1964:	92 30       	cpi	r25, 0x02	; 2
    1966:	21 f4       	brne	.+8      	; 0x1970 <read_PNEUSensors+0x74>
		*right = 'o';
    1968:	9f e6       	ldi	r25, 0x6F	; 111
    196a:	f7 01       	movw	r30, r14
    196c:	90 83       	st	Z, r25
    196e:	09 c0       	rjmp	.+18     	; 0x1982 <read_PNEUSensors+0x86>
	} else if (state == 3) {
    1970:	93 30       	cpi	r25, 0x03	; 3
    1972:	21 f4       	brne	.+8      	; 0x197c <read_PNEUSensors+0x80>
		*right = 't';
    1974:	94 e7       	ldi	r25, 0x74	; 116
    1976:	f7 01       	movw	r30, r14
    1978:	90 83       	st	Z, r25
    197a:	03 c0       	rjmp	.+6      	; 0x1982 <read_PNEUSensors+0x86>
	} else {
		*right = 'x';
    197c:	98 e7       	ldi	r25, 0x78	; 120
    197e:	f7 01       	movw	r30, r14
    1980:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1982:	98 2f       	mov	r25, r24
    1984:	92 95       	swap	r25
    1986:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    1988:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    198a:	91 30       	cpi	r25, 0x01	; 1
    198c:	21 f4       	brne	.+8      	; 0x1996 <read_PNEUSensors+0x9a>
		*left = 'o';
    198e:	9f e6       	ldi	r25, 0x6F	; 111
    1990:	f8 01       	movw	r30, r16
    1992:	90 83       	st	Z, r25
    1994:	0f c0       	rjmp	.+30     	; 0x19b4 <read_PNEUSensors+0xb8>
	} else if (state == 2) {
    1996:	92 30       	cpi	r25, 0x02	; 2
    1998:	21 f4       	brne	.+8      	; 0x19a2 <read_PNEUSensors+0xa6>
		*left = 'c';
    199a:	93 e6       	ldi	r25, 0x63	; 99
    199c:	f8 01       	movw	r30, r16
    199e:	90 83       	st	Z, r25
    19a0:	09 c0       	rjmp	.+18     	; 0x19b4 <read_PNEUSensors+0xb8>
	} else if (state == 3) {
    19a2:	93 30       	cpi	r25, 0x03	; 3
    19a4:	21 f4       	brne	.+8      	; 0x19ae <read_PNEUSensors+0xb2>
		*left = 't';
    19a6:	94 e7       	ldi	r25, 0x74	; 116
    19a8:	f8 01       	movw	r30, r16
    19aa:	90 83       	st	Z, r25
    19ac:	03 c0       	rjmp	.+6      	; 0x19b4 <read_PNEUSensors+0xb8>
	} else {
		*left = 'x';
    19ae:	98 e7       	ldi	r25, 0x78	; 120
    19b0:	f8 01       	movw	r30, r16
    19b2:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    19b4:	81 ff       	sbrs	r24, 1
    19b6:	03 c0       	rjmp	.+6      	; 0x19be <read_PNEUSensors+0xc2>
		*air = '0';
    19b8:	80 e3       	ldi	r24, 0x30	; 48
    19ba:	88 83       	st	Y, r24
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <read_PNEUSensors+0xc6>
	} else {
		*air = '1';
    19be:	81 e3       	ldi	r24, 0x31	; 49
    19c0:	88 83       	st	Y, r24
	}
}
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	df 90       	pop	r13
    19d0:	cf 90       	pop	r12
    19d2:	08 95       	ret

000019d4 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	d8 2f       	mov	r29, r24
    19da:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    19dc:	69 e0       	ldi	r22, 0x09	; 9
    19de:	84 e2       	ldi	r24, 0x24	; 36
    19e0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    19e4:	8d 2b       	or	r24, r29
    19e6:	48 2f       	mov	r20, r24
    19e8:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    19ea:	6a e0       	ldi	r22, 0x0A	; 10
    19ec:	84 e2       	ldi	r24, 0x24	; 36
    19ee:	0e 94 18 09 	call	0x1230	; 0x1230 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	08 95       	ret

000019f8 <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(uint8_t cstack)
{
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	6a 97       	sbiw	r28, 0x1a	; 26
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    1a06:	99 e0       	ldi	r25, 0x09	; 9
    1a08:	e8 ed       	ldi	r30, 0xD8	; 216
    1a0a:	f5 e9       	ldi	r31, 0x95	; 149
    1a0c:	de 01       	movw	r26, r28
    1a0e:	11 96       	adiw	r26, 0x01	; 1
    1a10:	01 90       	ld	r0, Z+
    1a12:	0d 92       	st	X+, r0
    1a14:	9a 95       	dec	r25
    1a16:	e1 f7       	brne	.-8      	; 0x1a10 <close_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1a18:	24 e3       	ldi	r18, 0x34	; 52
    1a1a:	82 9f       	mul	r24, r18
    1a1c:	c0 01       	movw	r24, r0
    1a1e:	11 24       	eor	r1, r1
    1a20:	fc 01       	movw	r30, r24
    1a22:	ed 5f       	subi	r30, 0xFD	; 253
    1a24:	f7 4d       	sbci	r31, 0xD7	; 215
    1a26:	81 81       	ldd	r24, Z+1	; 0x01
    1a28:	8c 36       	cpi	r24, 0x6C	; 108
    1a2a:	31 f1       	breq	.+76     	; 0x1a78 <close_PNEU+0x80>
    1a2c:	18 f4       	brcc	.+6      	; 0x1a34 <close_PNEU+0x3c>
    1a2e:	82 36       	cpi	r24, 0x62	; 98
    1a30:	39 f0       	breq	.+14     	; 0x1a40 <close_PNEU+0x48>
    1a32:	6a c0       	rjmp	.+212    	; 0x1b08 <close_PNEU+0x110>
    1a34:	82 37       	cpi	r24, 0x72	; 114
    1a36:	c1 f1       	breq	.+112    	; 0x1aa8 <close_PNEU+0xb0>
    1a38:	83 37       	cpi	r24, 0x73	; 115
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <close_PNEU+0x46>
    1a3c:	4d c0       	rjmp	.+154    	; 0x1ad8 <close_PNEU+0xe0>
    1a3e:	64 c0       	rjmp	.+200    	; 0x1b08 <close_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1a40:	6a ee       	ldi	r22, 0xEA	; 234
    1a42:	84 e4       	ldi	r24, 0x44	; 68
    1a44:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1a48:	66 ee       	ldi	r22, 0xE6	; 230
    1a4a:	88 e8       	ldi	r24, 0x88	; 136
    1a4c:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1a50:	8e e9       	ldi	r24, 0x9E	; 158
    1a52:	95 e9       	ldi	r25, 0x95	; 149
    1a54:	9f 93       	push	r25
    1a56:	8f 93       	push	r24
    1a58:	ce 01       	movw	r24, r28
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	9f 93       	push	r25
    1a5e:	8f 93       	push	r24
    1a60:	09 96       	adiw	r24, 0x09	; 9
    1a62:	9f 93       	push	r25
    1a64:	8f 93       	push	r24
    1a66:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			break;
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	59 c0       	rjmp	.+178    	; 0x1b2a <close_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1a78:	6a ee       	ldi	r22, 0xEA	; 234
    1a7a:	84 e4       	ldi	r24, 0x44	; 68
    1a7c:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1a80:	83 ea       	ldi	r24, 0xA3	; 163
    1a82:	95 e9       	ldi	r25, 0x95	; 149
    1a84:	9f 93       	push	r25
    1a86:	8f 93       	push	r24
    1a88:	ce 01       	movw	r24, r28
    1a8a:	01 96       	adiw	r24, 0x01	; 1
    1a8c:	9f 93       	push	r25
    1a8e:	8f 93       	push	r24
    1a90:	09 96       	adiw	r24, 0x09	; 9
    1a92:	9f 93       	push	r25
    1a94:	8f 93       	push	r24
    1a96:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			break;
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	41 c0       	rjmp	.+130    	; 0x1b2a <close_PNEU+0x132>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1aa8:	66 ee       	ldi	r22, 0xE6	; 230
    1aaa:	88 e8       	ldi	r24, 0x88	; 136
    1aac:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1ab0:	88 ea       	ldi	r24, 0xA8	; 168
    1ab2:	95 e9       	ldi	r25, 0x95	; 149
    1ab4:	9f 93       	push	r25
    1ab6:	8f 93       	push	r24
    1ab8:	ce 01       	movw	r24, r28
    1aba:	01 96       	adiw	r24, 0x01	; 1
    1abc:	9f 93       	push	r25
    1abe:	8f 93       	push	r24
    1ac0:	09 96       	adiw	r24, 0x09	; 9
    1ac2:	9f 93       	push	r25
    1ac4:	8f 93       	push	r24
    1ac6:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			break;
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	29 c0       	rjmp	.+82     	; 0x1b2a <close_PNEU+0x132>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1ad8:	6c ee       	ldi	r22, 0xEC	; 236
    1ada:	82 e2       	ldi	r24, 0x22	; 34
    1adc:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1ae0:	8e ea       	ldi	r24, 0xAE	; 174
    1ae2:	95 e9       	ldi	r25, 0x95	; 149
    1ae4:	9f 93       	push	r25
    1ae6:	8f 93       	push	r24
    1ae8:	ce 01       	movw	r24, r28
    1aea:	01 96       	adiw	r24, 0x01	; 1
    1aec:	9f 93       	push	r25
    1aee:	8f 93       	push	r24
    1af0:	09 96       	adiw	r24, 0x09	; 9
    1af2:	9f 93       	push	r25
    1af4:	8f 93       	push	r24
    1af6:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			break;
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	11 c0       	rjmp	.+34     	; 0x1b2a <close_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "close_PNEU bad object");
    1b08:	66 eb       	ldi	r22, 0xB6	; 182
    1b0a:	75 e9       	ldi	r23, 0x95	; 149
    1b0c:	85 ef       	ldi	r24, 0xF5	; 245
    1b0e:	91 e0       	ldi	r25, 0x01	; 1
    1b10:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
			strcpy(outbuf, "close what?");
    1b14:	8c e0       	ldi	r24, 0x0C	; 12
    1b16:	ec ec       	ldi	r30, 0xCC	; 204
    1b18:	f5 e9       	ldi	r31, 0x95	; 149
    1b1a:	de 01       	movw	r26, r28
    1b1c:	1a 96       	adiw	r26, 0x0a	; 10
    1b1e:	01 90       	ld	r0, Z+
    1b20:	0d 92       	st	X+, r0
    1b22:	8a 95       	dec	r24
    1b24:	e1 f7       	brne	.-8      	; 0x1b1e <close_PNEU+0x126>
			return(ERROR);
    1b26:	83 e6       	ldi	r24, 0x63	; 99
    1b28:	0b c0       	rjmp	.+22     	; 0x1b40 <close_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1b30:	41 e0       	ldi	r20, 0x01	; 1
    1b32:	be 01       	movw	r22, r28
    1b34:	66 5f       	subi	r22, 0xF6	; 246
    1b36:	7f 4f       	sbci	r23, 0xFF	; 255
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
	return(NOERROR);
    1b3e:	80 e0       	ldi	r24, 0x00	; 0

}
    1b40:	6a 96       	adiw	r28, 0x1a	; 26
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	de bf       	out	0x3e, r29	; 62
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	08 95       	ret

00001b4c <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(uint8_t cstack)
{
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	69 97       	sbiw	r28, 0x19	; 25
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	de bf       	out	0x3e, r29	; 62

	const char dformat_OPE[] = "Open %s";
    1b5a:	98 e0       	ldi	r25, 0x08	; 8
    1b5c:	e1 e0       	ldi	r30, 0x01	; 1
    1b5e:	f6 e9       	ldi	r31, 0x96	; 150
    1b60:	de 01       	movw	r26, r28
    1b62:	11 96       	adiw	r26, 0x01	; 1
    1b64:	01 90       	ld	r0, Z+
    1b66:	0d 92       	st	X+, r0
    1b68:	9a 95       	dec	r25
    1b6a:	e1 f7       	brne	.-8      	; 0x1b64 <open_PNEU+0x18>
	char outbuf[17];

	switch (pcmd[cstack].cobject) {
    1b6c:	24 e3       	ldi	r18, 0x34	; 52
    1b6e:	82 9f       	mul	r24, r18
    1b70:	c0 01       	movw	r24, r0
    1b72:	11 24       	eor	r1, r1
    1b74:	fc 01       	movw	r30, r24
    1b76:	ed 5f       	subi	r30, 0xFD	; 253
    1b78:	f7 4d       	sbci	r31, 0xD7	; 215
    1b7a:	81 81       	ldd	r24, Z+1	; 0x01
    1b7c:	8c 36       	cpi	r24, 0x6C	; 108
    1b7e:	31 f1       	breq	.+76     	; 0x1bcc <open_PNEU+0x80>
    1b80:	18 f4       	brcc	.+6      	; 0x1b88 <open_PNEU+0x3c>
    1b82:	82 36       	cpi	r24, 0x62	; 98
    1b84:	39 f0       	breq	.+14     	; 0x1b94 <open_PNEU+0x48>
    1b86:	6a c0       	rjmp	.+212    	; 0x1c5c <open_PNEU+0x110>
    1b88:	82 37       	cpi	r24, 0x72	; 114
    1b8a:	c1 f1       	breq	.+112    	; 0x1bfc <open_PNEU+0xb0>
    1b8c:	83 37       	cpi	r24, 0x73	; 115
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <open_PNEU+0x46>
    1b90:	4d c0       	rjmp	.+154    	; 0x1c2c <open_PNEU+0xe0>
    1b92:	64 c0       	rjmp	.+200    	; 0x1c5c <open_PNEU+0x110>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1b94:	6e ea       	ldi	r22, 0xAE	; 174
    1b96:	84 e4       	ldi	r24, 0x44	; 68
    1b98:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1b9c:	6e e6       	ldi	r22, 0x6E	; 110
    1b9e:	88 e8       	ldi	r24, 0x88	; 136
    1ba0:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    1ba4:	8e e9       	ldi	r24, 0x9E	; 158
    1ba6:	95 e9       	ldi	r25, 0x95	; 149
    1ba8:	9f 93       	push	r25
    1baa:	8f 93       	push	r24
    1bac:	ce 01       	movw	r24, r28
    1bae:	01 96       	adiw	r24, 0x01	; 1
    1bb0:	9f 93       	push	r25
    1bb2:	8f 93       	push	r24
    1bb4:	08 96       	adiw	r24, 0x08	; 8
    1bb6:	9f 93       	push	r25
    1bb8:	8f 93       	push	r24
    1bba:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			break;
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	59 c0       	rjmp	.+178    	; 0x1c7e <open_PNEU+0x132>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1bcc:	6e ea       	ldi	r22, 0xAE	; 174
    1bce:	84 e4       	ldi	r24, 0x44	; 68
    1bd0:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1bd4:	83 ea       	ldi	r24, 0xA3	; 163
    1bd6:	95 e9       	ldi	r25, 0x95	; 149
    1bd8:	9f 93       	push	r25
    1bda:	8f 93       	push	r24
    1bdc:	ce 01       	movw	r24, r28
    1bde:	01 96       	adiw	r24, 0x01	; 1
    1be0:	9f 93       	push	r25
    1be2:	8f 93       	push	r24
    1be4:	08 96       	adiw	r24, 0x08	; 8
    1be6:	9f 93       	push	r25
    1be8:	8f 93       	push	r24
    1bea:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			break;
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	41 c0       	rjmp	.+130    	; 0x1c7e <open_PNEU+0x132>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1bfc:	6e e6       	ldi	r22, 0x6E	; 110
    1bfe:	88 e8       	ldi	r24, 0x88	; 136
    1c00:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1c04:	88 ea       	ldi	r24, 0xA8	; 168
    1c06:	95 e9       	ldi	r25, 0x95	; 149
    1c08:	9f 93       	push	r25
    1c0a:	8f 93       	push	r24
    1c0c:	ce 01       	movw	r24, r28
    1c0e:	01 96       	adiw	r24, 0x01	; 1
    1c10:	9f 93       	push	r25
    1c12:	8f 93       	push	r24
    1c14:	08 96       	adiw	r24, 0x08	; 8
    1c16:	9f 93       	push	r25
    1c18:	8f 93       	push	r24
    1c1a:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			break;
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	29 c0       	rjmp	.+82     	; 0x1c7e <open_PNEU+0x132>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1c2c:	6e ec       	ldi	r22, 0xCE	; 206
    1c2e:	82 e2       	ldi	r24, 0x22	; 34
    1c30:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1c34:	8e ea       	ldi	r24, 0xAE	; 174
    1c36:	95 e9       	ldi	r25, 0x95	; 149
    1c38:	9f 93       	push	r25
    1c3a:	8f 93       	push	r24
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	01 96       	adiw	r24, 0x01	; 1
    1c40:	9f 93       	push	r25
    1c42:	8f 93       	push	r24
    1c44:	08 96       	adiw	r24, 0x08	; 8
    1c46:	9f 93       	push	r25
    1c48:	8f 93       	push	r24
    1c4a:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			break;
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	11 c0       	rjmp	.+34     	; 0x1c7e <open_PNEU+0x132>

		default:
			printError(ERR_PNUMECH, "open_PNEU bad object");
    1c5c:	61 ee       	ldi	r22, 0xE1	; 225
    1c5e:	75 e9       	ldi	r23, 0x95	; 149
    1c60:	85 ef       	ldi	r24, 0xF5	; 245
    1c62:	91 e0       	ldi	r25, 0x01	; 1
    1c64:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
			strcpy(outbuf, "open what?");
    1c68:	8b e0       	ldi	r24, 0x0B	; 11
    1c6a:	e6 ef       	ldi	r30, 0xF6	; 246
    1c6c:	f5 e9       	ldi	r31, 0x95	; 149
    1c6e:	de 01       	movw	r26, r28
    1c70:	19 96       	adiw	r26, 0x09	; 9
    1c72:	01 90       	ld	r0, Z+
    1c74:	0d 92       	st	X+, r0
    1c76:	8a 95       	dec	r24
    1c78:	e1 f7       	brne	.-8      	; 0x1c72 <open_PNEU+0x126>
			return(ERROR);
    1c7a:	83 e6       	ldi	r24, 0x63	; 99
    1c7c:	0b c0       	rjmp	.+22     	; 0x1c94 <open_PNEU+0x148>
			break;

	}

	clear_OLED(1);
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1c84:	41 e0       	ldi	r20, 0x01	; 1
    1c86:	be 01       	movw	r22, r28
    1c88:	67 5f       	subi	r22, 0xF7	; 247
    1c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
	return(NOERROR);
    1c92:	80 e0       	ldi	r24, 0x00	; 0

}
    1c94:	69 96       	adiw	r28, 0x19	; 25
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	08 95       	ret

00001ca0 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1ca0:	1f 92       	push	r1
    1ca2:	0f 92       	push	r0
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	0f 92       	push	r0
    1ca8:	11 24       	eor	r1, r1
    1caa:	2f 93       	push	r18
    1cac:	3f 93       	push	r19
    1cae:	4f 93       	push	r20
    1cb0:	5f 93       	push	r21
    1cb2:	6f 93       	push	r22
    1cb4:	7f 93       	push	r23
    1cb6:	8f 93       	push	r24
    1cb8:	9f 93       	push	r25
    1cba:	af 93       	push	r26
    1cbc:	bf 93       	push	r27
    1cbe:	ef 93       	push	r30
    1cc0:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1cc2:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1cc6:	88 23       	and	r24, r24
    1cc8:	4c f4       	brge	.+18     	; 0x1cdc <__vector_20+0x3c>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1cca:	80 e8       	ldi	r24, 0x80	; 128
    1ccc:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1cd0:	68 e0       	ldi	r22, 0x08	; 8
    1cd2:	81 e2       	ldi	r24, 0x21	; 33
    1cd4:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <read_MCP23008>
    1cd8:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <pneuState>
	}

}
    1cdc:	ff 91       	pop	r31
    1cde:	ef 91       	pop	r30
    1ce0:	bf 91       	pop	r27
    1ce2:	af 91       	pop	r26
    1ce4:	9f 91       	pop	r25
    1ce6:	8f 91       	pop	r24
    1ce8:	7f 91       	pop	r23
    1cea:	6f 91       	pop	r22
    1cec:	5f 91       	pop	r21
    1cee:	4f 91       	pop	r20
    1cf0:	3f 91       	pop	r19
    1cf2:	2f 91       	pop	r18
    1cf4:	0f 90       	pop	r0
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	0f 90       	pop	r0
    1cfa:	1f 90       	pop	r1
    1cfc:	18 95       	reti

00001cfe <init_PORTS>:
void init_PORTS(void)
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTB.DIRSET = PIN2_bm;		// Beeper
    1cfe:	84 e0       	ldi	r24, 0x04	; 4
    1d00:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7f4421>
	PORTF.DIRCLR = PIN2_bm;		// specID jumper
    1d04:	e0 ea       	ldi	r30, 0xA0	; 160
    1d06:	f4 e0       	ldi	r31, 0x04	; 4
    1d08:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRSET = PIN5_bm;		// On-board LED
    1d0a:	80 e2       	ldi	r24, 0x20	; 32
    1d0c:	81 83       	std	Z+1, r24	; 0x01
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton
    1d0e:	8b e0       	ldi	r24, 0x0B	; 11
    1d10:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.OUTCLR = PIN3_bm;		// Reset the XPort
    1d12:	e0 e4       	ldi	r30, 0x40	; 64
    1d14:	f4 e0       	ldi	r31, 0x04	; 4
    1d16:	88 e0       	ldi	r24, 0x08	; 8
    1d18:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;		// Set XPort reset pin as output
    1d1a:	81 83       	std	Z+1, r24	; 0x01
    1d1c:	ad e8       	ldi	r26, 0x8D	; 141
    1d1e:	b0 e2       	ldi	r27, 0x20	; 32
    1d20:	11 97       	sbiw	r26, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <init_PORTS+0x22>
    1d24:	00 00       	nop
	_delay_ms(10);				// Reset signal wait time
	PORTC.OUTSET = PIN3_bm;		// Enable the XPort
    1d26:	85 83       	std	Z+5, r24	; 0x05
    1d28:	08 95       	ret

00001d2a <report>:

	Returns:
		ERROR or NOERROR
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1d2a:	2f 92       	push	r2
    1d2c:	3f 92       	push	r3
    1d2e:	4f 92       	push	r4
    1d30:	5f 92       	push	r5
    1d32:	6f 92       	push	r6
    1d34:	7f 92       	push	r7
    1d36:	8f 92       	push	r8
    1d38:	9f 92       	push	r9
    1d3a:	af 92       	push	r10
    1d3c:	bf 92       	push	r11
    1d3e:	cf 92       	push	r12
    1d40:	df 92       	push	r13
    1d42:	ef 92       	push	r14
    1d44:	ff 92       	push	r15
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	cd 5d       	subi	r28, 0xDD	; 221
    1d54:	d2 40       	sbci	r29, 0x02	; 2
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "ENV,%s,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%1.0f,%%,%3.1f,C,%s";
    1d5a:	95 e4       	ldi	r25, 0x45	; 69
    1d5c:	e5 ef       	ldi	r30, 0xF5	; 245
    1d5e:	f6 e9       	ldi	r31, 0x96	; 150
    1d60:	de 01       	movw	r26, r28
    1d62:	a6 5b       	subi	r26, 0xB6	; 182
    1d64:	be 4f       	sbci	r27, 0xFE	; 254
    1d66:	01 90       	ld	r0, Z+
    1d68:	0d 92       	st	X+, r0
    1d6a:	9a 95       	dec	r25
    1d6c:	e1 f7       	brne	.-8      	; 0x1d66 <report+0x3c>
	const char format_MTR[] = "MTR,%s,%c,%ld,microns,%ld,microns/sec,%d,mA,%s";
    1d6e:	9f e2       	ldi	r25, 0x2F	; 47
    1d70:	ea e3       	ldi	r30, 0x3A	; 58
    1d72:	f7 e9       	ldi	r31, 0x97	; 151
    1d74:	de 01       	movw	r26, r28
    1d76:	a1 57       	subi	r26, 0x71	; 113
    1d78:	be 4f       	sbci	r27, 0xFE	; 254
    1d7a:	01 90       	ld	r0, Z+
    1d7c:	0d 92       	st	X+, r0
    1d7e:	9a 95       	dec	r25
    1d80:	e1 f7       	brne	.-8      	; 0x1d7a <report+0x50>
	const char format_MTV[] = "MTV,%s,%c,%3.1f,V,%3.1f,C,%s";
    1d82:	9d e1       	ldi	r25, 0x1D	; 29
    1d84:	e9 e6       	ldi	r30, 0x69	; 105
    1d86:	f7 e9       	ldi	r31, 0x97	; 151
    1d88:	de 01       	movw	r26, r28
    1d8a:	a2 54       	subi	r26, 0x42	; 66
    1d8c:	be 4f       	sbci	r27, 0xFE	; 254
    1d8e:	01 90       	ld	r0, Z+
    1d90:	0d 92       	st	X+, r0
    1d92:	9a 95       	dec	r25
    1d94:	e1 f7       	brne	.-8      	; 0x1d8e <report+0x64>
	const char format_ORI[] = "ORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1d96:	9c e1       	ldi	r25, 0x1C	; 28
    1d98:	e6 e8       	ldi	r30, 0x86	; 134
    1d9a:	f7 e9       	ldi	r31, 0x97	; 151
    1d9c:	de 01       	movw	r26, r28
    1d9e:	a5 52       	subi	r26, 0x25	; 37
    1da0:	be 4f       	sbci	r27, 0xFE	; 254
    1da2:	01 90       	ld	r0, Z+
    1da4:	0d 92       	st	X+, r0
    1da6:	9a 95       	dec	r25
    1da8:	e1 f7       	brne	.-8      	; 0x1da2 <report+0x78>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1daa:	92 e1       	ldi	r25, 0x12	; 18
    1dac:	e2 ea       	ldi	r30, 0xA2	; 162
    1dae:	f7 e9       	ldi	r31, 0x97	; 151
    1db0:	de 01       	movw	r26, r28
    1db2:	a9 50       	subi	r26, 0x09	; 9
    1db4:	be 4f       	sbci	r27, 0xFE	; 254
    1db6:	01 90       	ld	r0, Z+
    1db8:	0d 92       	st	X+, r0
    1dba:	9a 95       	dec	r25
    1dbc:	e1 f7       	brne	.-8      	; 0x1db6 <report+0x8c>
	const char format_PNU[] = "PNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1dbe:	9d e2       	ldi	r25, 0x2D	; 45
    1dc0:	e4 eb       	ldi	r30, 0xB4	; 180
    1dc2:	f7 e9       	ldi	r31, 0x97	; 151
    1dc4:	de 01       	movw	r26, r28
    1dc6:	a7 5f       	subi	r26, 0xF7	; 247
    1dc8:	bd 4f       	sbci	r27, 0xFD	; 253
    1dca:	01 90       	ld	r0, Z+
    1dcc:	0d 92       	st	X+, r0
    1dce:	9a 95       	dec	r25
    1dd0:	e1 f7       	brne	.-8      	; 0x1dca <report+0xa0>
	const char dformat_PN1[] = "Left:%c   Right:%c";
    1dd2:	93 e1       	ldi	r25, 0x13	; 19
    1dd4:	e1 ee       	ldi	r30, 0xE1	; 225
    1dd6:	f7 e9       	ldi	r31, 0x97	; 151
    1dd8:	de 01       	movw	r26, r28
    1dda:	aa 5c       	subi	r26, 0xCA	; 202
    1ddc:	bd 4f       	sbci	r27, 0xFD	; 253
    1dde:	01 90       	ld	r0, Z+
    1de0:	0d 92       	st	X+, r0
    1de2:	9a 95       	dec	r25
    1de4:	e1 f7       	brne	.-8      	; 0x1dde <report+0xb4>
	const char dformat_PN2[] = "Shutter:%c  Air:%c";
    1de6:	93 e1       	ldi	r25, 0x13	; 19
    1de8:	e4 ef       	ldi	r30, 0xF4	; 244
    1dea:	f7 e9       	ldi	r31, 0x97	; 151
    1dec:	de 01       	movw	r26, r28
    1dee:	a7 5b       	subi	r26, 0xB7	; 183
    1df0:	bd 4f       	sbci	r27, 0xFD	; 253
    1df2:	01 90       	ld	r0, Z+
    1df4:	0d 92       	st	X+, r0
    1df6:	9a 95       	dec	r25
    1df8:	e1 f7       	brne	.-8      	; 0x1df2 <report+0xc8>
	const char format_TIM[] = "TIM,%s,%s,set,%s,boot,%s";
    1dfa:	99 e1       	ldi	r25, 0x19	; 25
    1dfc:	e7 e0       	ldi	r30, 0x07	; 7
    1dfe:	f8 e9       	ldi	r31, 0x98	; 152
    1e00:	de 01       	movw	r26, r28
    1e02:	a4 5a       	subi	r26, 0xA4	; 164
    1e04:	bd 4f       	sbci	r27, 0xFD	; 253
    1e06:	01 90       	ld	r0, Z+
    1e08:	0d 92       	st	X+, r0
    1e0a:	9a 95       	dec	r25
    1e0c:	e1 f7       	brne	.-8      	; 0x1e06 <report+0xdc>
	const char format_VAC[] = "VAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1e0e:	95 e2       	ldi	r25, 0x25	; 37
    1e10:	e0 e2       	ldi	r30, 0x20	; 32
    1e12:	f8 e9       	ldi	r31, 0x98	; 152
    1e14:	de 01       	movw	r26, r28
    1e16:	ab 58       	subi	r26, 0x8B	; 139
    1e18:	bd 4f       	sbci	r27, 0xFD	; 253
    1e1a:	01 90       	ld	r0, Z+
    1e1c:	0d 92       	st	X+, r0
    1e1e:	9a 95       	dec	r25
    1e20:	e1 f7       	brne	.-8      	; 0x1e1a <report+0xf0>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1e22:	9d e0       	ldi	r25, 0x0D	; 13
    1e24:	e5 e4       	ldi	r30, 0x45	; 69
    1e26:	f8 e9       	ldi	r31, 0x98	; 152
    1e28:	de 01       	movw	r26, r28
    1e2a:	a6 56       	subi	r26, 0x66	; 102
    1e2c:	bd 4f       	sbci	r27, 0xFD	; 253
    1e2e:	01 90       	ld	r0, Z+
    1e30:	0d 92       	st	X+, r0
    1e32:	9a 95       	dec	r25
    1e34:	e1 f7       	brne	.-8      	; 0x1e2e <report+0x104>
	const char format_VER[] = "VER,%s,%s,%s";
    1e36:	9d e0       	ldi	r25, 0x0D	; 13
    1e38:	e2 e5       	ldi	r30, 0x52	; 82
    1e3a:	f8 e9       	ldi	r31, 0x98	; 152
    1e3c:	de 01       	movw	r26, r28
    1e3e:	a9 55       	subi	r26, 0x59	; 89
    1e40:	bd 4f       	sbci	r27, 0xFD	; 253
    1e42:	01 90       	ld	r0, Z+
    1e44:	0d 92       	st	X+, r0
    1e46:	9a 95       	dec	r25
    1e48:	e1 f7       	brne	.-8      	; 0x1e42 <report+0x118>
	float voltage;							// voltage
	uint16_t motorCurrent;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum

	switch(pcmd[cstack].cobject) {
    1e4a:	08 2f       	mov	r16, r24
    1e4c:	10 e0       	ldi	r17, 0x00	; 0
    1e4e:	84 e3       	ldi	r24, 0x34	; 52
    1e50:	80 9f       	mul	r24, r16
    1e52:	f0 01       	movw	r30, r0
    1e54:	81 9f       	mul	r24, r17
    1e56:	f0 0d       	add	r31, r0
    1e58:	11 24       	eor	r1, r1
    1e5a:	ed 5f       	subi	r30, 0xFD	; 253
    1e5c:	f7 4d       	sbci	r31, 0xD7	; 215
    1e5e:	e1 81       	ldd	r30, Z+1	; 0x01
    1e60:	8e 2f       	mov	r24, r30
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	fc 01       	movw	r30, r24
    1e66:	e1 54       	subi	r30, 0x41	; 65
    1e68:	f1 09       	sbc	r31, r1
    1e6a:	e6 33       	cpi	r30, 0x36	; 54
    1e6c:	f1 05       	cpc	r31, r1
    1e6e:	08 f0       	brcs	.+2      	; 0x1e72 <report+0x148>
    1e70:	b1 c4       	rjmp	.+2402   	; 0x27d4 <report+0xaaa>
    1e72:	e4 58       	subi	r30, 0x84	; 132
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	0c 94 76 27 	jmp	0x4eec	; 0x4eec <__tablejump2__>

		case 'A':
		case 'B':
		case 'C':
			get_time(currenttime);
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	86 5f       	subi	r24, 0xF6	; 246
    1e7e:	9e 4f       	sbci	r25, 0xFE	; 254
    1e80:	0e 94 bf 05 	call	0xb7e	; 0xb7e <get_time>
			controller = pcmd[cstack].cobject + 63;
    1e84:	84 e3       	ldi	r24, 0x34	; 52
    1e86:	80 9f       	mul	r24, r16
    1e88:	f0 01       	movw	r30, r0
    1e8a:	81 9f       	mul	r24, r17
    1e8c:	f0 0d       	add	r31, r0
    1e8e:	11 24       	eor	r1, r1
    1e90:	ed 5f       	subi	r30, 0xFD	; 253
    1e92:	f7 4d       	sbci	r31, 0xD7	; 215
    1e94:	e1 80       	ldd	r14, Z+1	; 0x01
    1e96:	0f 2e       	mov	r0, r31
    1e98:	ff e3       	ldi	r31, 0x3F	; 63
    1e9a:	ff 2e       	mov	r15, r31
    1e9c:	f0 2d       	mov	r31, r0
    1e9e:	fe 0c       	add	r15, r14
			if (get_MOTOR_FLOAT(controller, READMAINVOLTAGE, &voltage) == ERROR) {
    1ea0:	ae 01       	movw	r20, r28
    1ea2:	40 54       	subi	r20, 0x40	; 64
    1ea4:	5d 4f       	sbci	r21, 0xFD	; 253
    1ea6:	68 e1       	ldi	r22, 0x18	; 24
    1ea8:	8f 2d       	mov	r24, r15
    1eaa:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <get_MOTOR_FLOAT>
    1eae:	83 36       	cpi	r24, 0x63	; 99
    1eb0:	31 f4       	brne	.+12     	; 0x1ebe <report+0x194>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT volts error");
    1eb2:	69 e0       	ldi	r22, 0x09	; 9
    1eb4:	76 e9       	ldi	r23, 0x96	; 150
    1eb6:	86 e3       	ldi	r24, 0x36	; 54
    1eb8:	91 e0       	ldi	r25, 0x01	; 1
    1eba:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
			}
			if (get_MOTOR_FLOAT(controller, READTEMPERATURE, &t0) == ERROR) {
    1ebe:	ae 01       	movw	r20, r28
    1ec0:	44 54       	subi	r20, 0x44	; 68
    1ec2:	5d 4f       	sbci	r21, 0xFD	; 253
    1ec4:	62 e5       	ldi	r22, 0x52	; 82
    1ec6:	8f 2d       	mov	r24, r15
    1ec8:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <get_MOTOR_FLOAT>
    1ecc:	83 36       	cpi	r24, 0x63	; 99
    1ece:	31 f4       	brne	.+12     	; 0x1edc <report+0x1b2>
				printError(ERR_MTR, "report: get_MOTOR_FLOAT temperature error");
    1ed0:	6d e2       	ldi	r22, 0x2D	; 45
    1ed2:	76 e9       	ldi	r23, 0x96	; 150
    1ed4:	86 e3       	ldi	r24, 0x36	; 54
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
    1edc:	24 e3       	ldi	r18, 0x34	; 52
    1ede:	20 9f       	mul	r18, r16
    1ee0:	c0 01       	movw	r24, r0
    1ee2:	21 9f       	mul	r18, r17
    1ee4:	90 0d       	add	r25, r0
    1ee6:	11 24       	eor	r1, r1
    1ee8:	82 5d       	subi	r24, 0xD2	; 210
    1eea:	97 4d       	sbci	r25, 0xD7	; 215
				printError(ERR_MTR, "report: get_MOTOR_FLOAT volts error");
			}
			if (get_MOTOR_FLOAT(controller, READTEMPERATURE, &t0) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_FLOAT temperature error");
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
    1eec:	9f 93       	push	r25
    1eee:	8f 93       	push	r24
    1ef0:	c1 54       	subi	r28, 0x41	; 65
    1ef2:	dd 4f       	sbci	r29, 0xFD	; 253
    1ef4:	88 81       	ld	r24, Y
    1ef6:	cf 5b       	subi	r28, 0xBF	; 191
    1ef8:	d2 40       	sbci	r29, 0x02	; 2
    1efa:	8f 93       	push	r24
    1efc:	c2 54       	subi	r28, 0x42	; 66
    1efe:	dd 4f       	sbci	r29, 0xFD	; 253
    1f00:	88 81       	ld	r24, Y
    1f02:	ce 5b       	subi	r28, 0xBE	; 190
    1f04:	d2 40       	sbci	r29, 0x02	; 2
    1f06:	8f 93       	push	r24
    1f08:	c3 54       	subi	r28, 0x43	; 67
    1f0a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f0c:	88 81       	ld	r24, Y
    1f0e:	cd 5b       	subi	r28, 0xBD	; 189
    1f10:	d2 40       	sbci	r29, 0x02	; 2
    1f12:	8f 93       	push	r24
    1f14:	c4 54       	subi	r28, 0x44	; 68
    1f16:	dd 4f       	sbci	r29, 0xFD	; 253
    1f18:	88 81       	ld	r24, Y
    1f1a:	cc 5b       	subi	r28, 0xBC	; 188
    1f1c:	d2 40       	sbci	r29, 0x02	; 2
    1f1e:	8f 93       	push	r24
    1f20:	cd 53       	subi	r28, 0x3D	; 61
    1f22:	dd 4f       	sbci	r29, 0xFD	; 253
    1f24:	88 81       	ld	r24, Y
    1f26:	c3 5c       	subi	r28, 0xC3	; 195
    1f28:	d2 40       	sbci	r29, 0x02	; 2
    1f2a:	8f 93       	push	r24
    1f2c:	ce 53       	subi	r28, 0x3E	; 62
    1f2e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f30:	88 81       	ld	r24, Y
    1f32:	c2 5c       	subi	r28, 0xC2	; 194
    1f34:	d2 40       	sbci	r29, 0x02	; 2
    1f36:	8f 93       	push	r24
    1f38:	cf 53       	subi	r28, 0x3F	; 63
    1f3a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f3c:	88 81       	ld	r24, Y
    1f3e:	c1 5c       	subi	r28, 0xC1	; 193
    1f40:	d2 40       	sbci	r29, 0x02	; 2
    1f42:	8f 93       	push	r24
    1f44:	c0 54       	subi	r28, 0x40	; 64
    1f46:	dd 4f       	sbci	r29, 0xFD	; 253
    1f48:	88 81       	ld	r24, Y
    1f4a:	c0 5c       	subi	r28, 0xC0	; 192
    1f4c:	d2 40       	sbci	r29, 0x02	; 2
    1f4e:	8f 93       	push	r24
    1f50:	1f 92       	push	r1
    1f52:	ef 92       	push	r14
    1f54:	ce 01       	movw	r24, r28
    1f56:	86 5f       	subi	r24, 0xF6	; 246
    1f58:	9e 4f       	sbci	r25, 0xFE	; 254
    1f5a:	9f 93       	push	r25
    1f5c:	8f 93       	push	r24
    1f5e:	8c 54       	subi	r24, 0x4C	; 76
    1f60:	9f 4f       	sbci	r25, 0xFF	; 255
    1f62:	9f 93       	push	r25
    1f64:	8f 93       	push	r24
    1f66:	8e 01       	movw	r16, r28
    1f68:	0f 5f       	subi	r16, 0xFF	; 255
    1f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6c:	1f 93       	push	r17
    1f6e:	0f 93       	push	r16
    1f70:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
				voltage, t0, pcmd[cstack].cid);
			printLine(outbuf);
    1f74:	c8 01       	movw	r24, r16
    1f76:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			break;
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    1f7e:	f1 2c       	mov	r15, r1
				printError(ERR_MTR, "report: get_MOTOR_FLOAT temperature error");
			}
			sprintf(outbuf, format_MTV, currenttime, (char) (controller-63),
				voltage, t0, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    1f80:	33 c4       	rjmp	.+2150   	; 0x27e8 <report+0xabe>

		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    1f82:	ce 01       	movw	r24, r28
    1f84:	86 5f       	subi	r24, 0xF6	; 246
    1f86:	9e 4f       	sbci	r25, 0xFE	; 254
    1f88:	0e 94 bf 05 	call	0xb7e	; 0xb7e <get_time>
			controller = pcmd[cstack].cobject + 31;
    1f8c:	84 e3       	ldi	r24, 0x34	; 52
    1f8e:	80 9f       	mul	r24, r16
    1f90:	f0 01       	movw	r30, r0
    1f92:	81 9f       	mul	r24, r17
    1f94:	f0 0d       	add	r31, r0
    1f96:	11 24       	eor	r1, r1
    1f98:	ed 5f       	subi	r30, 0xFD	; 253
    1f9a:	f7 4d       	sbci	r31, 0xD7	; 215
    1f9c:	81 81       	ldd	r24, Z+1	; 0x01
    1f9e:	0f 2e       	mov	r0, r31
    1fa0:	ff e1       	ldi	r31, 0x1F	; 31
    1fa2:	ef 2e       	mov	r14, r31
    1fa4:	f0 2d       	mov	r31, r0
    1fa6:	e8 0e       	add	r14, r24

			if (get_MOTOR_ENCODER(controller, &encoderValue) == ERROR) {
    1fa8:	be 01       	movw	r22, r28
    1faa:	6c 54       	subi	r22, 0x4C	; 76
    1fac:	7d 4f       	sbci	r23, 0xFD	; 253
    1fae:	8e 2d       	mov	r24, r14
    1fb0:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <get_MOTOR_ENCODER>
    1fb4:	f8 2e       	mov	r15, r24
    1fb6:	93 e6       	ldi	r25, 0x63	; 99
    1fb8:	89 13       	cpse	r24, r25
    1fba:	07 c0       	rjmp	.+14     	; 0x1fca <report+0x2a0>
				printError(ERR_MTR, "report: get_MOTOR_ENCODER error");
    1fbc:	67 e5       	ldi	r22, 0x57	; 87
    1fbe:	76 e9       	ldi	r23, 0x96	; 150
    1fc0:	86 e3       	ldi	r24, 0x36	; 54
    1fc2:	91 e0       	ldi	r25, 0x01	; 1
    1fc4:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
				return(ERROR);
    1fc8:	0f c4       	rjmp	.+2078   	; 0x27e8 <report+0xabe>
			}
			micronValue = encoderValue/ENC_COUNTS_PER_MICRON;
    1fca:	cc 54       	subi	r28, 0x4C	; 76
    1fcc:	dd 4f       	sbci	r29, 0xFD	; 253
    1fce:	68 81       	ld	r22, Y
    1fd0:	79 81       	ldd	r23, Y+1	; 0x01
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd6:	c4 5b       	subi	r28, 0xB4	; 180
    1fd8:	d2 40       	sbci	r29, 0x02	; 2
    1fda:	2c e0       	ldi	r18, 0x0C	; 12
    1fdc:	31 e0       	ldi	r19, 0x01	; 1
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	50 e0       	ldi	r21, 0x00	; 0
    1fe2:	0e 94 57 27 	call	0x4eae	; 0x4eae <__divmodsi4>
    1fe6:	f2 2e       	mov	r15, r18
    1fe8:	d3 2e       	mov	r13, r19
    1fea:	c4 2e       	mov	r12, r20
    1fec:	b5 2e       	mov	r11, r21

			if (get_MOTOR_SPEED(controller, &encoderSpeed) == ERROR) {
    1fee:	be 01       	movw	r22, r28
    1ff0:	68 54       	subi	r22, 0x48	; 72
    1ff2:	7d 4f       	sbci	r23, 0xFD	; 253
    1ff4:	8e 2d       	mov	r24, r14
    1ff6:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <get_MOTOR_SPEED>
    1ffa:	83 36       	cpi	r24, 0x63	; 99
    1ffc:	61 f4       	brne	.+24     	; 0x2016 <report+0x2ec>
				encoderSpeed = 0x7FFFFFFF;
    1ffe:	8f ef       	ldi	r24, 0xFF	; 255
    2000:	9f ef       	ldi	r25, 0xFF	; 255
    2002:	af ef       	ldi	r26, 0xFF	; 255
    2004:	bf e7       	ldi	r27, 0x7F	; 127
    2006:	c8 54       	subi	r28, 0x48	; 72
    2008:	dd 4f       	sbci	r29, 0xFD	; 253
    200a:	88 83       	st	Y, r24
    200c:	99 83       	std	Y+1, r25	; 0x01
    200e:	aa 83       	std	Y+2, r26	; 0x02
    2010:	bb 83       	std	Y+3, r27	; 0x03
    2012:	c8 5b       	subi	r28, 0xB8	; 184
    2014:	d2 40       	sbci	r29, 0x02	; 2
			}

			micronSpeed = encoderSpeed/ENC_COUNTS_PER_MICRON;
    2016:	c8 54       	subi	r28, 0x48	; 72
    2018:	dd 4f       	sbci	r29, 0xFD	; 253
    201a:	68 81       	ld	r22, Y
    201c:	79 81       	ldd	r23, Y+1	; 0x01
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	9b 81       	ldd	r25, Y+3	; 0x03
    2022:	c8 5b       	subi	r28, 0xB8	; 184
    2024:	d2 40       	sbci	r29, 0x02	; 2
    2026:	2c e0       	ldi	r18, 0x0C	; 12
    2028:	31 e0       	ldi	r19, 0x01	; 1
    202a:	40 e0       	ldi	r20, 0x00	; 0
    202c:	50 e0       	ldi	r21, 0x00	; 0
    202e:	0e 94 57 27 	call	0x4eae	; 0x4eae <__divmodsi4>
    2032:	a2 2e       	mov	r10, r18
    2034:	93 2e       	mov	r9, r19
    2036:	84 2e       	mov	r8, r20
    2038:	75 2e       	mov	r7, r21

			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
    203a:	be 01       	movw	r22, r28
    203c:	6c 53       	subi	r22, 0x3C	; 60
    203e:	7d 4f       	sbci	r23, 0xFD	; 253
    2040:	8e 2d       	mov	r24, r14
    2042:	0e 94 28 16 	call	0x2c50	; 0x2c50 <get_MOTOR_CURRENT>
    2046:	83 36       	cpi	r24, 0x63	; 99
    2048:	71 f4       	brne	.+28     	; 0x2066 <report+0x33c>
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
    204a:	67 e7       	ldi	r22, 0x77	; 119
    204c:	76 e9       	ldi	r23, 0x96	; 150
    204e:	86 e3       	ldi	r24, 0x36	; 54
    2050:	91 e0       	ldi	r25, 0x01	; 1
    2052:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
				motorCurrent = 0xFFFF;
    2056:	8f ef       	ldi	r24, 0xFF	; 255
    2058:	9f ef       	ldi	r25, 0xFF	; 255
    205a:	cc 53       	subi	r28, 0x3C	; 60
    205c:	dd 4f       	sbci	r29, 0xFD	; 253
    205e:	88 83       	st	Y, r24
    2060:	99 83       	std	Y+1, r25	; 0x01
    2062:	c4 5c       	subi	r28, 0xC4	; 196
    2064:	d2 40       	sbci	r29, 0x02	; 2
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
			micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
    2066:	24 e3       	ldi	r18, 0x34	; 52
    2068:	20 9f       	mul	r18, r16
    206a:	c0 01       	movw	r24, r0
    206c:	21 9f       	mul	r18, r17
    206e:	90 0d       	add	r25, r0
    2070:	11 24       	eor	r1, r1
    2072:	9c 01       	movw	r18, r24
    2074:	22 5d       	subi	r18, 0xD2	; 210
    2076:	37 4d       	sbci	r19, 0xD7	; 215

			if (get_MOTOR_CURRENT(controller, &motorCurrent) == ERROR) {
				printError(ERR_MTR, "report: get_MOTOR_CURRENT error");
				motorCurrent = 0xFFFF;
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
    2078:	fc 01       	movw	r30, r24
    207a:	ed 5f       	subi	r30, 0xFD	; 253
    207c:	f7 4d       	sbci	r31, 0xD7	; 215
    207e:	81 81       	ldd	r24, Z+1	; 0x01
    2080:	3f 93       	push	r19
    2082:	2f 93       	push	r18
    2084:	cb 53       	subi	r28, 0x3B	; 59
    2086:	dd 4f       	sbci	r29, 0xFD	; 253
    2088:	98 81       	ld	r25, Y
    208a:	c5 5c       	subi	r28, 0xC5	; 197
    208c:	d2 40       	sbci	r29, 0x02	; 2
    208e:	9f 93       	push	r25
    2090:	cc 53       	subi	r28, 0x3C	; 60
    2092:	dd 4f       	sbci	r29, 0xFD	; 253
    2094:	98 81       	ld	r25, Y
    2096:	c4 5c       	subi	r28, 0xC4	; 196
    2098:	d2 40       	sbci	r29, 0x02	; 2
    209a:	9f 93       	push	r25
    209c:	7f 92       	push	r7
    209e:	8f 92       	push	r8
    20a0:	9f 92       	push	r9
    20a2:	af 92       	push	r10
    20a4:	bf 92       	push	r11
    20a6:	cf 92       	push	r12
    20a8:	df 92       	push	r13
    20aa:	ff 92       	push	r15
    20ac:	1f 92       	push	r1
    20ae:	8f 93       	push	r24
    20b0:	ce 01       	movw	r24, r28
    20b2:	86 5f       	subi	r24, 0xF6	; 246
    20b4:	9e 4f       	sbci	r25, 0xFE	; 254
    20b6:	9f 93       	push	r25
    20b8:	8f 93       	push	r24
    20ba:	8b 57       	subi	r24, 0x7B	; 123
    20bc:	9f 4f       	sbci	r25, 0xFF	; 255
    20be:	9f 93       	push	r25
    20c0:	8f 93       	push	r24
    20c2:	8e 01       	movw	r16, r28
    20c4:	0f 5f       	subi	r16, 0xFF	; 255
    20c6:	1f 4f       	sbci	r17, 0xFF	; 255
    20c8:	1f 93       	push	r17
    20ca:	0f 93       	push	r16
    20cc:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
			printLine(outbuf);
    20d0:	c8 01       	movw	r24, r16
    20d2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			break;
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    20da:	f1 2c       	mov	r15, r1
				motorCurrent = 0xFFFF;
			}
			sprintf(outbuf, format_MTR, currenttime, pcmd[cstack].cobject,
			micronValue, micronSpeed, motorCurrent, pcmd[cstack].cid);
			printLine(outbuf);
			break;
    20dc:	85 c3       	rjmp	.+1802   	; 0x27e8 <report+0xabe>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	0e 94 0e 1b 	call	0x361c	; 0x361c <get_temperature>
    20e4:	c4 54       	subi	r28, 0x44	; 68
    20e6:	dd 4f       	sbci	r29, 0xFD	; 253
    20e8:	68 83       	st	Y, r22
    20ea:	79 83       	std	Y+1, r23	; 0x01
    20ec:	8a 83       	std	Y+2, r24	; 0x02
    20ee:	9b 83       	std	Y+3, r25	; 0x03
    20f0:	cc 5b       	subi	r28, 0xBC	; 188
    20f2:	d2 40       	sbci	r29, 0x02	; 2
			h0 = get_humidity(0);
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	0e 94 81 07 	call	0xf02	; 0xf02 <get_humidity>
    20fa:	d6 2e       	mov	r13, r22
    20fc:	c7 2e       	mov	r12, r23
    20fe:	b8 2e       	mov	r11, r24
    2100:	a9 2e       	mov	r10, r25
			t1 = get_temperature(1);
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	0e 94 0e 1b 	call	0x361c	; 0x361c <get_temperature>
    2108:	ce 52       	subi	r28, 0x2E	; 46
    210a:	dd 4f       	sbci	r29, 0xFD	; 253
    210c:	68 83       	st	Y, r22
    210e:	c2 5d       	subi	r28, 0xD2	; 210
    2110:	d2 40       	sbci	r29, 0x02	; 2
    2112:	cd 52       	subi	r28, 0x2D	; 45
    2114:	dd 4f       	sbci	r29, 0xFD	; 253
    2116:	78 83       	st	Y, r23
    2118:	c3 5d       	subi	r28, 0xD3	; 211
    211a:	d2 40       	sbci	r29, 0x02	; 2
    211c:	cc 52       	subi	r28, 0x2C	; 44
    211e:	dd 4f       	sbci	r29, 0xFD	; 253
    2120:	88 83       	st	Y, r24
    2122:	c4 5d       	subi	r28, 0xD4	; 212
    2124:	d2 40       	sbci	r29, 0x02	; 2
    2126:	cb 52       	subi	r28, 0x2B	; 43
    2128:	dd 4f       	sbci	r29, 0xFD	; 253
    212a:	98 83       	st	Y, r25
    212c:	c5 5d       	subi	r28, 0xD5	; 213
    212e:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	0e 94 81 07 	call	0xf02	; 0xf02 <get_humidity>
    2136:	ca 52       	subi	r28, 0x2A	; 42
    2138:	dd 4f       	sbci	r29, 0xFD	; 253
    213a:	68 83       	st	Y, r22
    213c:	c6 5d       	subi	r28, 0xD6	; 214
    213e:	d2 40       	sbci	r29, 0x02	; 2
    2140:	c9 52       	subi	r28, 0x29	; 41
    2142:	dd 4f       	sbci	r29, 0xFD	; 253
    2144:	78 83       	st	Y, r23
    2146:	c7 5d       	subi	r28, 0xD7	; 215
    2148:	d2 40       	sbci	r29, 0x02	; 2
    214a:	c8 52       	subi	r28, 0x28	; 40
    214c:	dd 4f       	sbci	r29, 0xFD	; 253
    214e:	88 83       	st	Y, r24
    2150:	c8 5d       	subi	r28, 0xD8	; 216
    2152:	d2 40       	sbci	r29, 0x02	; 2
    2154:	c7 52       	subi	r28, 0x27	; 39
    2156:	dd 4f       	sbci	r29, 0xFD	; 253
    2158:	98 83       	st	Y, r25
    215a:	c9 5d       	subi	r28, 0xD9	; 217
    215c:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    215e:	82 e0       	ldi	r24, 0x02	; 2
    2160:	0e 94 0e 1b 	call	0x361c	; 0x361c <get_temperature>
    2164:	c6 52       	subi	r28, 0x26	; 38
    2166:	dd 4f       	sbci	r29, 0xFD	; 253
    2168:	68 83       	st	Y, r22
    216a:	ca 5d       	subi	r28, 0xDA	; 218
    216c:	d2 40       	sbci	r29, 0x02	; 2
    216e:	c5 52       	subi	r28, 0x25	; 37
    2170:	dd 4f       	sbci	r29, 0xFD	; 253
    2172:	78 83       	st	Y, r23
    2174:	cb 5d       	subi	r28, 0xDB	; 219
    2176:	d2 40       	sbci	r29, 0x02	; 2
    2178:	98 2e       	mov	r9, r24
    217a:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    217c:	82 e0       	ldi	r24, 0x02	; 2
    217e:	0e 94 81 07 	call	0xf02	; 0xf02 <get_humidity>
    2182:	76 2e       	mov	r7, r22
    2184:	67 2e       	mov	r6, r23
    2186:	58 2e       	mov	r5, r24
    2188:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    218a:	83 e0       	ldi	r24, 0x03	; 3
    218c:	0e 94 0e 1b 	call	0x361c	; 0x361c <get_temperature>
    2190:	c4 52       	subi	r28, 0x24	; 36
    2192:	dd 4f       	sbci	r29, 0xFD	; 253
    2194:	68 83       	st	Y, r22
    2196:	cc 5d       	subi	r28, 0xDC	; 220
    2198:	d2 40       	sbci	r29, 0x02	; 2
    219a:	c3 52       	subi	r28, 0x23	; 35
    219c:	dd 4f       	sbci	r29, 0xFD	; 253
    219e:	78 83       	st	Y, r23
    21a0:	cd 5d       	subi	r28, 0xDD	; 221
    21a2:	d2 40       	sbci	r29, 0x02	; 2
    21a4:	38 2e       	mov	r3, r24
    21a6:	29 2e       	mov	r2, r25
			get_time(currenttime);
    21a8:	7e 01       	movw	r14, r28
    21aa:	96 ef       	ldi	r25, 0xF6	; 246
    21ac:	e9 1a       	sub	r14, r25
    21ae:	9e ef       	ldi	r25, 0xFE	; 254
    21b0:	f9 0a       	sbc	r15, r25
    21b2:	c7 01       	movw	r24, r14
    21b4:	0e 94 bf 05 	call	0xb7e	; 0xb7e <get_time>
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    21b8:	24 e3       	ldi	r18, 0x34	; 52
    21ba:	20 9f       	mul	r18, r16
    21bc:	c0 01       	movw	r24, r0
    21be:	21 9f       	mul	r18, r17
    21c0:	90 0d       	add	r25, r0
    21c2:	11 24       	eor	r1, r1
    21c4:	82 5d       	subi	r24, 0xD2	; 210
    21c6:	97 4d       	sbci	r25, 0xD7	; 215
    21c8:	9f 93       	push	r25
    21ca:	8f 93       	push	r24
    21cc:	2f 92       	push	r2
    21ce:	3f 92       	push	r3
    21d0:	c3 52       	subi	r28, 0x23	; 35
    21d2:	dd 4f       	sbci	r29, 0xFD	; 253
    21d4:	88 81       	ld	r24, Y
    21d6:	cd 5d       	subi	r28, 0xDD	; 221
    21d8:	d2 40       	sbci	r29, 0x02	; 2
    21da:	8f 93       	push	r24
    21dc:	c4 52       	subi	r28, 0x24	; 36
    21de:	dd 4f       	sbci	r29, 0xFD	; 253
    21e0:	98 81       	ld	r25, Y
    21e2:	cc 5d       	subi	r28, 0xDC	; 220
    21e4:	d2 40       	sbci	r29, 0x02	; 2
    21e6:	9f 93       	push	r25
    21e8:	4f 92       	push	r4
    21ea:	5f 92       	push	r5
    21ec:	6f 92       	push	r6
    21ee:	7f 92       	push	r7
    21f0:	8f 92       	push	r8
    21f2:	9f 92       	push	r9
    21f4:	c5 52       	subi	r28, 0x25	; 37
    21f6:	dd 4f       	sbci	r29, 0xFD	; 253
    21f8:	88 81       	ld	r24, Y
    21fa:	cb 5d       	subi	r28, 0xDB	; 219
    21fc:	d2 40       	sbci	r29, 0x02	; 2
    21fe:	8f 93       	push	r24
    2200:	c6 52       	subi	r28, 0x26	; 38
    2202:	dd 4f       	sbci	r29, 0xFD	; 253
    2204:	98 81       	ld	r25, Y
    2206:	ca 5d       	subi	r28, 0xDA	; 218
    2208:	d2 40       	sbci	r29, 0x02	; 2
    220a:	9f 93       	push	r25
    220c:	c7 52       	subi	r28, 0x27	; 39
    220e:	dd 4f       	sbci	r29, 0xFD	; 253
    2210:	88 81       	ld	r24, Y
    2212:	c9 5d       	subi	r28, 0xD9	; 217
    2214:	d2 40       	sbci	r29, 0x02	; 2
    2216:	8f 93       	push	r24
    2218:	c8 52       	subi	r28, 0x28	; 40
    221a:	dd 4f       	sbci	r29, 0xFD	; 253
    221c:	98 81       	ld	r25, Y
    221e:	c8 5d       	subi	r28, 0xD8	; 216
    2220:	d2 40       	sbci	r29, 0x02	; 2
    2222:	9f 93       	push	r25
    2224:	c9 52       	subi	r28, 0x29	; 41
    2226:	dd 4f       	sbci	r29, 0xFD	; 253
    2228:	88 81       	ld	r24, Y
    222a:	c7 5d       	subi	r28, 0xD7	; 215
    222c:	d2 40       	sbci	r29, 0x02	; 2
    222e:	8f 93       	push	r24
    2230:	ca 52       	subi	r28, 0x2A	; 42
    2232:	dd 4f       	sbci	r29, 0xFD	; 253
    2234:	98 81       	ld	r25, Y
    2236:	c6 5d       	subi	r28, 0xD6	; 214
    2238:	d2 40       	sbci	r29, 0x02	; 2
    223a:	9f 93       	push	r25
    223c:	cb 52       	subi	r28, 0x2B	; 43
    223e:	dd 4f       	sbci	r29, 0xFD	; 253
    2240:	88 81       	ld	r24, Y
    2242:	c5 5d       	subi	r28, 0xD5	; 213
    2244:	d2 40       	sbci	r29, 0x02	; 2
    2246:	8f 93       	push	r24
    2248:	cc 52       	subi	r28, 0x2C	; 44
    224a:	dd 4f       	sbci	r29, 0xFD	; 253
    224c:	98 81       	ld	r25, Y
    224e:	c4 5d       	subi	r28, 0xD4	; 212
    2250:	d2 40       	sbci	r29, 0x02	; 2
    2252:	9f 93       	push	r25
    2254:	cd 52       	subi	r28, 0x2D	; 45
    2256:	dd 4f       	sbci	r29, 0xFD	; 253
    2258:	88 81       	ld	r24, Y
    225a:	c3 5d       	subi	r28, 0xD3	; 211
    225c:	d2 40       	sbci	r29, 0x02	; 2
    225e:	8f 93       	push	r24
    2260:	ce 52       	subi	r28, 0x2E	; 46
    2262:	dd 4f       	sbci	r29, 0xFD	; 253
    2264:	98 81       	ld	r25, Y
    2266:	c2 5d       	subi	r28, 0xD2	; 210
    2268:	d2 40       	sbci	r29, 0x02	; 2
    226a:	9f 93       	push	r25
    226c:	af 92       	push	r10
    226e:	bf 92       	push	r11
    2270:	cf 92       	push	r12
    2272:	df 92       	push	r13
    2274:	c1 54       	subi	r28, 0x41	; 65
    2276:	dd 4f       	sbci	r29, 0xFD	; 253
    2278:	88 81       	ld	r24, Y
    227a:	cf 5b       	subi	r28, 0xBF	; 191
    227c:	d2 40       	sbci	r29, 0x02	; 2
    227e:	8f 93       	push	r24
    2280:	c2 54       	subi	r28, 0x42	; 66
    2282:	dd 4f       	sbci	r29, 0xFD	; 253
    2284:	88 81       	ld	r24, Y
    2286:	ce 5b       	subi	r28, 0xBE	; 190
    2288:	d2 40       	sbci	r29, 0x02	; 2
    228a:	8f 93       	push	r24
    228c:	c3 54       	subi	r28, 0x43	; 67
    228e:	dd 4f       	sbci	r29, 0xFD	; 253
    2290:	88 81       	ld	r24, Y
    2292:	cd 5b       	subi	r28, 0xBD	; 189
    2294:	d2 40       	sbci	r29, 0x02	; 2
    2296:	8f 93       	push	r24
    2298:	c4 54       	subi	r28, 0x44	; 68
    229a:	dd 4f       	sbci	r29, 0xFD	; 253
    229c:	88 81       	ld	r24, Y
    229e:	cc 5b       	subi	r28, 0xBC	; 188
    22a0:	d2 40       	sbci	r29, 0x02	; 2
    22a2:	8f 93       	push	r24
    22a4:	ff 92       	push	r15
    22a6:	ef 92       	push	r14
    22a8:	ce 01       	movw	r24, r28
    22aa:	86 5b       	subi	r24, 0xB6	; 182
    22ac:	9e 4f       	sbci	r25, 0xFE	; 254
    22ae:	9f 93       	push	r25
    22b0:	8f 93       	push	r24
    22b2:	8e 01       	movw	r16, r28
    22b4:	0f 5f       	subi	r16, 0xFF	; 255
    22b6:	1f 4f       	sbci	r17, 0xFF	; 255
    22b8:	1f 93       	push	r17
    22ba:	0f 93       	push	r16
    22bc:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			printLine(outbuf);
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	c8 01       	movw	r24, r16
    22c6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "Temp & Humidity", 1);
    22ca:	41 e0       	ldi	r20, 0x01	; 1
    22cc:	67 e9       	ldi	r22, 0x97	; 151
    22ce:	76 e9       	ldi	r23, 0x96	; 150
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    22d6:	c4 54       	subi	r28, 0x44	; 68
    22d8:	dd 4f       	sbci	r29, 0xFD	; 253
    22da:	f8 80       	ld	r15, Y
    22dc:	cc 5b       	subi	r28, 0xBC	; 188
    22de:	d2 40       	sbci	r29, 0x02	; 2
    22e0:	c3 54       	subi	r28, 0x43	; 67
    22e2:	dd 4f       	sbci	r29, 0xFD	; 253
    22e4:	e8 80       	ld	r14, Y
    22e6:	cd 5b       	subi	r28, 0xBD	; 189
    22e8:	d2 40       	sbci	r29, 0x02	; 2
    22ea:	c2 54       	subi	r28, 0x42	; 66
    22ec:	dd 4f       	sbci	r29, 0xFD	; 253
    22ee:	98 80       	ld	r9, Y
    22f0:	ce 5b       	subi	r28, 0xBE	; 190
    22f2:	d2 40       	sbci	r29, 0x02	; 2
    22f4:	c1 54       	subi	r28, 0x41	; 65
    22f6:	dd 4f       	sbci	r29, 0xFD	; 253
    22f8:	88 80       	ld	r8, Y
    22fa:	cf 5b       	subi	r28, 0xBF	; 191
    22fc:	d2 40       	sbci	r29, 0x02	; 2
    22fe:	26 e6       	ldi	r18, 0x66	; 102
    2300:	36 e6       	ldi	r19, 0x66	; 102
    2302:	46 ee       	ldi	r20, 0xE6	; 230
    2304:	5f e3       	ldi	r21, 0x3F	; 63
    2306:	6f 2d       	mov	r22, r15
    2308:	7e 2d       	mov	r23, r14
    230a:	89 2d       	mov	r24, r9
    230c:	98 2d       	mov	r25, r8
    230e:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
    2312:	af 92       	push	r10
    2314:	bf 92       	push	r11
    2316:	cf 92       	push	r12
    2318:	df 92       	push	r13
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e0       	ldi	r20, 0x00	; 0
    2320:	52 e4       	ldi	r21, 0x42	; 66
    2322:	0e 94 89 21 	call	0x4312	; 0x4312 <__addsf3>
    2326:	9f 93       	push	r25
    2328:	8f 93       	push	r24
    232a:	7f 93       	push	r23
    232c:	6f 93       	push	r22
    232e:	8f 92       	push	r8
    2330:	9f 92       	push	r9
    2332:	ef 92       	push	r14
    2334:	ff 92       	push	r15
    2336:	87 ea       	ldi	r24, 0xA7	; 167
    2338:	96 e9       	ldi	r25, 0x96	; 150
    233a:	9f 93       	push	r25
    233c:	8f 93       	push	r24
    233e:	1f 93       	push	r17
    2340:	0f 93       	push	r16
    2342:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			writestr_OLED(1, outbuf, 2);
    2346:	42 e0       	ldi	r20, 0x02	; 2
    2348:	b8 01       	movw	r22, r16
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			break;
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2354:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ENV, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    2356:	48 c2       	rjmp	.+1168   	; 0x27e8 <report+0xabe>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    2358:	ae 01       	movw	r20, r28
    235a:	42 53       	subi	r20, 0x32	; 50
    235c:	5d 4f       	sbci	r21, 0xFD	; 253
    235e:	be 01       	movw	r22, r28
    2360:	66 53       	subi	r22, 0x36	; 54
    2362:	7d 4f       	sbci	r23, 0xFD	; 253
    2364:	ce 01       	movw	r24, r28
    2366:	8a 53       	subi	r24, 0x3A	; 58
    2368:	9d 4f       	sbci	r25, 0xFD	; 253
    236a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <get_orientation>
			get_time(currenttime);
    236e:	7e 01       	movw	r14, r28
    2370:	96 ef       	ldi	r25, 0xF6	; 246
    2372:	e9 1a       	sub	r14, r25
    2374:	9e ef       	ldi	r25, 0xFE	; 254
    2376:	f9 0a       	sbc	r15, r25
    2378:	c7 01       	movw	r24, r14
    237a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <get_time>
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
    237e:	24 e3       	ldi	r18, 0x34	; 52
    2380:	20 9f       	mul	r18, r16
    2382:	c0 01       	movw	r24, r0
    2384:	21 9f       	mul	r18, r17
    2386:	90 0d       	add	r25, r0
    2388:	11 24       	eor	r1, r1
    238a:	82 5d       	subi	r24, 0xD2	; 210
    238c:	97 4d       	sbci	r25, 0xD7	; 215
    238e:	9f 93       	push	r25
    2390:	8f 93       	push	r24
    2392:	cf 52       	subi	r28, 0x2F	; 47
    2394:	dd 4f       	sbci	r29, 0xFD	; 253
    2396:	88 81       	ld	r24, Y
    2398:	c1 5d       	subi	r28, 0xD1	; 209
    239a:	d2 40       	sbci	r29, 0x02	; 2
    239c:	8f 93       	push	r24
    239e:	c0 53       	subi	r28, 0x30	; 48
    23a0:	dd 4f       	sbci	r29, 0xFD	; 253
    23a2:	88 81       	ld	r24, Y
    23a4:	c0 5d       	subi	r28, 0xD0	; 208
    23a6:	d2 40       	sbci	r29, 0x02	; 2
    23a8:	8f 93       	push	r24
    23aa:	c1 53       	subi	r28, 0x31	; 49
    23ac:	dd 4f       	sbci	r29, 0xFD	; 253
    23ae:	88 81       	ld	r24, Y
    23b0:	cf 5c       	subi	r28, 0xCF	; 207
    23b2:	d2 40       	sbci	r29, 0x02	; 2
    23b4:	8f 93       	push	r24
    23b6:	c2 53       	subi	r28, 0x32	; 50
    23b8:	dd 4f       	sbci	r29, 0xFD	; 253
    23ba:	88 81       	ld	r24, Y
    23bc:	ce 5c       	subi	r28, 0xCE	; 206
    23be:	d2 40       	sbci	r29, 0x02	; 2
    23c0:	8f 93       	push	r24
    23c2:	c3 53       	subi	r28, 0x33	; 51
    23c4:	dd 4f       	sbci	r29, 0xFD	; 253
    23c6:	88 81       	ld	r24, Y
    23c8:	cd 5c       	subi	r28, 0xCD	; 205
    23ca:	d2 40       	sbci	r29, 0x02	; 2
    23cc:	8f 93       	push	r24
    23ce:	c4 53       	subi	r28, 0x34	; 52
    23d0:	dd 4f       	sbci	r29, 0xFD	; 253
    23d2:	88 81       	ld	r24, Y
    23d4:	cc 5c       	subi	r28, 0xCC	; 204
    23d6:	d2 40       	sbci	r29, 0x02	; 2
    23d8:	8f 93       	push	r24
    23da:	c5 53       	subi	r28, 0x35	; 53
    23dc:	dd 4f       	sbci	r29, 0xFD	; 253
    23de:	88 81       	ld	r24, Y
    23e0:	cb 5c       	subi	r28, 0xCB	; 203
    23e2:	d2 40       	sbci	r29, 0x02	; 2
    23e4:	8f 93       	push	r24
    23e6:	c6 53       	subi	r28, 0x36	; 54
    23e8:	dd 4f       	sbci	r29, 0xFD	; 253
    23ea:	88 81       	ld	r24, Y
    23ec:	ca 5c       	subi	r28, 0xCA	; 202
    23ee:	d2 40       	sbci	r29, 0x02	; 2
    23f0:	8f 93       	push	r24
    23f2:	c7 53       	subi	r28, 0x37	; 55
    23f4:	dd 4f       	sbci	r29, 0xFD	; 253
    23f6:	88 81       	ld	r24, Y
    23f8:	c9 5c       	subi	r28, 0xC9	; 201
    23fa:	d2 40       	sbci	r29, 0x02	; 2
    23fc:	8f 93       	push	r24
    23fe:	c8 53       	subi	r28, 0x38	; 56
    2400:	dd 4f       	sbci	r29, 0xFD	; 253
    2402:	88 81       	ld	r24, Y
    2404:	c8 5c       	subi	r28, 0xC8	; 200
    2406:	d2 40       	sbci	r29, 0x02	; 2
    2408:	8f 93       	push	r24
    240a:	c9 53       	subi	r28, 0x39	; 57
    240c:	dd 4f       	sbci	r29, 0xFD	; 253
    240e:	88 81       	ld	r24, Y
    2410:	c7 5c       	subi	r28, 0xC7	; 199
    2412:	d2 40       	sbci	r29, 0x02	; 2
    2414:	8f 93       	push	r24
    2416:	ca 53       	subi	r28, 0x3A	; 58
    2418:	dd 4f       	sbci	r29, 0xFD	; 253
    241a:	88 81       	ld	r24, Y
    241c:	c6 5c       	subi	r28, 0xC6	; 198
    241e:	d2 40       	sbci	r29, 0x02	; 2
    2420:	8f 93       	push	r24
    2422:	ff 92       	push	r15
    2424:	ef 92       	push	r14
    2426:	ce 01       	movw	r24, r28
    2428:	85 52       	subi	r24, 0x25	; 37
    242a:	9e 4f       	sbci	r25, 0xFE	; 254
    242c:	9f 93       	push	r25
    242e:	8f 93       	push	r24
    2430:	8e 01       	movw	r16, r28
    2432:	0f 5f       	subi	r16, 0xFF	; 255
    2434:	1f 4f       	sbci	r17, 0xFF	; 255
    2436:	1f 93       	push	r17
    2438:	0f 93       	push	r16
    243a:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			printLine(outbuf);
    243e:	c8 01       	movw	r24, r16
    2440:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "Orientation", 1);
    2444:	41 e0       	ldi	r20, 0x01	; 1
    2446:	6d eb       	ldi	r22, 0xBD	; 189
    2448:	76 e9       	ldi	r23, 0x96	; 150
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    2450:	cf 52       	subi	r28, 0x2F	; 47
    2452:	dd 4f       	sbci	r29, 0xFD	; 253
    2454:	88 81       	ld	r24, Y
    2456:	c1 5d       	subi	r28, 0xD1	; 209
    2458:	d2 40       	sbci	r29, 0x02	; 2
    245a:	8f 93       	push	r24
    245c:	c0 53       	subi	r28, 0x30	; 48
    245e:	dd 4f       	sbci	r29, 0xFD	; 253
    2460:	88 81       	ld	r24, Y
    2462:	c0 5d       	subi	r28, 0xD0	; 208
    2464:	d2 40       	sbci	r29, 0x02	; 2
    2466:	8f 93       	push	r24
    2468:	c1 53       	subi	r28, 0x31	; 49
    246a:	dd 4f       	sbci	r29, 0xFD	; 253
    246c:	88 81       	ld	r24, Y
    246e:	cf 5c       	subi	r28, 0xCF	; 207
    2470:	d2 40       	sbci	r29, 0x02	; 2
    2472:	8f 93       	push	r24
    2474:	c2 53       	subi	r28, 0x32	; 50
    2476:	dd 4f       	sbci	r29, 0xFD	; 253
    2478:	88 81       	ld	r24, Y
    247a:	ce 5c       	subi	r28, 0xCE	; 206
    247c:	d2 40       	sbci	r29, 0x02	; 2
    247e:	8f 93       	push	r24
    2480:	c3 53       	subi	r28, 0x33	; 51
    2482:	dd 4f       	sbci	r29, 0xFD	; 253
    2484:	88 81       	ld	r24, Y
    2486:	cd 5c       	subi	r28, 0xCD	; 205
    2488:	d2 40       	sbci	r29, 0x02	; 2
    248a:	8f 93       	push	r24
    248c:	c4 53       	subi	r28, 0x34	; 52
    248e:	dd 4f       	sbci	r29, 0xFD	; 253
    2490:	88 81       	ld	r24, Y
    2492:	cc 5c       	subi	r28, 0xCC	; 204
    2494:	d2 40       	sbci	r29, 0x02	; 2
    2496:	8f 93       	push	r24
    2498:	c5 53       	subi	r28, 0x35	; 53
    249a:	dd 4f       	sbci	r29, 0xFD	; 253
    249c:	88 81       	ld	r24, Y
    249e:	cb 5c       	subi	r28, 0xCB	; 203
    24a0:	d2 40       	sbci	r29, 0x02	; 2
    24a2:	8f 93       	push	r24
    24a4:	c6 53       	subi	r28, 0x36	; 54
    24a6:	dd 4f       	sbci	r29, 0xFD	; 253
    24a8:	88 81       	ld	r24, Y
    24aa:	ca 5c       	subi	r28, 0xCA	; 202
    24ac:	d2 40       	sbci	r29, 0x02	; 2
    24ae:	8f 93       	push	r24
    24b0:	c7 53       	subi	r28, 0x37	; 55
    24b2:	dd 4f       	sbci	r29, 0xFD	; 253
    24b4:	88 81       	ld	r24, Y
    24b6:	c9 5c       	subi	r28, 0xC9	; 201
    24b8:	d2 40       	sbci	r29, 0x02	; 2
    24ba:	8f 93       	push	r24
    24bc:	c8 53       	subi	r28, 0x38	; 56
    24be:	dd 4f       	sbci	r29, 0xFD	; 253
    24c0:	88 81       	ld	r24, Y
    24c2:	c8 5c       	subi	r28, 0xC8	; 200
    24c4:	d2 40       	sbci	r29, 0x02	; 2
    24c6:	8f 93       	push	r24
    24c8:	c9 53       	subi	r28, 0x39	; 57
    24ca:	dd 4f       	sbci	r29, 0xFD	; 253
    24cc:	88 81       	ld	r24, Y
    24ce:	c7 5c       	subi	r28, 0xC7	; 199
    24d0:	d2 40       	sbci	r29, 0x02	; 2
    24d2:	8f 93       	push	r24
    24d4:	ca 53       	subi	r28, 0x3A	; 58
    24d6:	dd 4f       	sbci	r29, 0xFD	; 253
    24d8:	88 81       	ld	r24, Y
    24da:	c6 5c       	subi	r28, 0xC6	; 198
    24dc:	d2 40       	sbci	r29, 0x02	; 2
    24de:	8f 93       	push	r24
    24e0:	ce 01       	movw	r24, r28
    24e2:	89 50       	subi	r24, 0x09	; 9
    24e4:	9e 4f       	sbci	r25, 0xFE	; 254
    24e6:	9f 93       	push	r25
    24e8:	8f 93       	push	r24
    24ea:	1f 93       	push	r17
    24ec:	0f 93       	push	r16
    24ee:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			writestr_OLED(1, outbuf, 2);
    24f2:	cd bf       	out	0x3d, r28	; 61
    24f4:	de bf       	out	0x3e, r29	; 62
    24f6:	42 e0       	ldi	r20, 0x02	; 2
    24f8:	b8 01       	movw	r22, r16
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2500:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_ORI, currenttime, x, y, z, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    2502:	72 c1       	rjmp	.+740    	; 0x27e8 <report+0xabe>

		case 'p':					// Pneumatics
			get_time(currenttime);
    2504:	7e 01       	movw	r14, r28
    2506:	96 ef       	ldi	r25, 0xF6	; 246
    2508:	e9 1a       	sub	r14, r25
    250a:	9e ef       	ldi	r25, 0xFE	; 254
    250c:	f9 0a       	sbc	r15, r25
    250e:	c7 01       	movw	r24, r14
    2510:	0e 94 bf 05 	call	0xb7e	; 0xb7e <get_time>
			read_PNEUSensors(&shutter, &left, &right, &air);
    2514:	9e 01       	movw	r18, r28
    2516:	27 5b       	subi	r18, 0xB7	; 183
    2518:	3e 4f       	sbci	r19, 0xFE	; 254
    251a:	ae 01       	movw	r20, r28
    251c:	48 5b       	subi	r20, 0xB8	; 184
    251e:	5e 4f       	sbci	r21, 0xFE	; 254
    2520:	be 01       	movw	r22, r28
    2522:	69 5b       	subi	r22, 0xB9	; 185
    2524:	7e 4f       	sbci	r23, 0xFE	; 254
    2526:	ce 01       	movw	r24, r28
    2528:	8a 5b       	subi	r24, 0xBA	; 186
    252a:	9e 4f       	sbci	r25, 0xFE	; 254
    252c:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <read_PNEUSensors>
			sprintf(outbuf, format_PNU, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    2530:	24 e3       	ldi	r18, 0x34	; 52
    2532:	20 9f       	mul	r18, r16
    2534:	c0 01       	movw	r24, r0
    2536:	21 9f       	mul	r18, r17
    2538:	90 0d       	add	r25, r0
    253a:	11 24       	eor	r1, r1
    253c:	82 5d       	subi	r24, 0xD2	; 210
    253e:	97 4d       	sbci	r25, 0xD7	; 215
    2540:	9f 93       	push	r25
    2542:	8f 93       	push	r24
    2544:	c7 5b       	subi	r28, 0xB7	; 183
    2546:	de 4f       	sbci	r29, 0xFE	; 254
    2548:	88 81       	ld	r24, Y
    254a:	c9 54       	subi	r28, 0x49	; 73
    254c:	d1 40       	sbci	r29, 0x01	; 1
    254e:	1f 92       	push	r1
    2550:	8f 93       	push	r24
    2552:	c8 5b       	subi	r28, 0xB8	; 184
    2554:	de 4f       	sbci	r29, 0xFE	; 254
    2556:	88 81       	ld	r24, Y
    2558:	c8 54       	subi	r28, 0x48	; 72
    255a:	d1 40       	sbci	r29, 0x01	; 1
    255c:	1f 92       	push	r1
    255e:	8f 93       	push	r24
    2560:	c9 5b       	subi	r28, 0xB9	; 185
    2562:	de 4f       	sbci	r29, 0xFE	; 254
    2564:	88 81       	ld	r24, Y
    2566:	c7 54       	subi	r28, 0x47	; 71
    2568:	d1 40       	sbci	r29, 0x01	; 1
    256a:	1f 92       	push	r1
    256c:	8f 93       	push	r24
    256e:	ca 5b       	subi	r28, 0xBA	; 186
    2570:	de 4f       	sbci	r29, 0xFE	; 254
    2572:	88 81       	ld	r24, Y
    2574:	c6 54       	subi	r28, 0x46	; 70
    2576:	d1 40       	sbci	r29, 0x01	; 1
    2578:	1f 92       	push	r1
    257a:	8f 93       	push	r24
    257c:	ff 92       	push	r15
    257e:	ef 92       	push	r14
    2580:	ce 01       	movw	r24, r28
    2582:	87 5f       	subi	r24, 0xF7	; 247
    2584:	9d 4f       	sbci	r25, 0xFD	; 253
    2586:	9f 93       	push	r25
    2588:	8f 93       	push	r24
    258a:	8e 01       	movw	r16, r28
    258c:	0f 5f       	subi	r16, 0xFF	; 255
    258e:	1f 4f       	sbci	r17, 0xFF	; 255
    2590:	1f 93       	push	r17
    2592:	0f 93       	push	r16
    2594:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			printLine(outbuf);
    2598:	c8 01       	movw	r24, r16
    259a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			sprintf(outbuf, dformat_PN1, left, right);
    259e:	c8 5b       	subi	r28, 0xB8	; 184
    25a0:	de 4f       	sbci	r29, 0xFE	; 254
    25a2:	88 81       	ld	r24, Y
    25a4:	c8 54       	subi	r28, 0x48	; 72
    25a6:	d1 40       	sbci	r29, 0x01	; 1
    25a8:	1f 92       	push	r1
    25aa:	8f 93       	push	r24
    25ac:	c9 5b       	subi	r28, 0xB9	; 185
    25ae:	de 4f       	sbci	r29, 0xFE	; 254
    25b0:	88 81       	ld	r24, Y
    25b2:	c7 54       	subi	r28, 0x47	; 71
    25b4:	d1 40       	sbci	r29, 0x01	; 1
    25b6:	1f 92       	push	r1
    25b8:	8f 93       	push	r24
    25ba:	ce 01       	movw	r24, r28
    25bc:	8a 5c       	subi	r24, 0xCA	; 202
    25be:	9d 4f       	sbci	r25, 0xFD	; 253
    25c0:	9f 93       	push	r25
    25c2:	8f 93       	push	r24
    25c4:	1f 93       	push	r17
    25c6:	0f 93       	push	r16
    25c8:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			writestr_OLED(1, outbuf, 1);
    25cc:	41 e0       	ldi	r20, 0x01	; 1
    25ce:	b8 01       	movw	r22, r16
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    25d6:	c7 5b       	subi	r28, 0xB7	; 183
    25d8:	de 4f       	sbci	r29, 0xFE	; 254
    25da:	88 81       	ld	r24, Y
    25dc:	c9 54       	subi	r28, 0x49	; 73
    25de:	d1 40       	sbci	r29, 0x01	; 1
    25e0:	1f 92       	push	r1
    25e2:	8f 93       	push	r24
    25e4:	ca 5b       	subi	r28, 0xBA	; 186
    25e6:	de 4f       	sbci	r29, 0xFE	; 254
    25e8:	88 81       	ld	r24, Y
    25ea:	c6 54       	subi	r28, 0x46	; 70
    25ec:	d1 40       	sbci	r29, 0x01	; 1
    25ee:	1f 92       	push	r1
    25f0:	8f 93       	push	r24
    25f2:	ce 01       	movw	r24, r28
    25f4:	87 5b       	subi	r24, 0xB7	; 183
    25f6:	9d 4f       	sbci	r25, 0xFD	; 253
    25f8:	9f 93       	push	r25
    25fa:	8f 93       	push	r24
    25fc:	1f 93       	push	r17
    25fe:	0f 93       	push	r16
    2600:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			writestr_OLED(1, outbuf, 2);
    2604:	cd bf       	out	0x3d, r28	; 61
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	42 e0       	ldi	r20, 0x02	; 2
    260a:	b8 01       	movw	r22, r16
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2612:	f1 2c       	mov	r15, r1
			printLine(outbuf);
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    2614:	e9 c0       	rjmp	.+466    	; 0x27e8 <report+0xabe>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    2616:	7e 01       	movw	r14, r28
    2618:	96 ef       	ldi	r25, 0xF6	; 246
    261a:	e9 1a       	sub	r14, r25
    261c:	9e ef       	ldi	r25, 0xFE	; 254
    261e:	f9 0a       	sbc	r15, r25
    2620:	c7 01       	movw	r24, r14
    2622:	0e 94 bf 05 	call	0xb7e	; 0xb7e <get_time>
			get_SETTIME(lastsettime);
    2626:	6e 01       	movw	r12, r28
    2628:	82 ee       	ldi	r24, 0xE2	; 226
    262a:	c8 1a       	sub	r12, r24
    262c:	8e ef       	ldi	r24, 0xFE	; 254
    262e:	d8 0a       	sbc	r13, r24
    2630:	c6 01       	movw	r24, r12
    2632:	0e 94 1f 07 	call	0xe3e	; 0xe3e <get_SETTIME>
			get_BOOTTIME(boottime);
    2636:	5e 01       	movw	r10, r28
    2638:	9e ec       	ldi	r25, 0xCE	; 206
    263a:	a9 1a       	sub	r10, r25
    263c:	9e ef       	ldi	r25, 0xFE	; 254
    263e:	b9 0a       	sbc	r11, r25
    2640:	c5 01       	movw	r24, r10
    2642:	0e 94 51 06 	call	0xca2	; 0xca2 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    2646:	24 e3       	ldi	r18, 0x34	; 52
    2648:	20 9f       	mul	r18, r16
    264a:	c0 01       	movw	r24, r0
    264c:	21 9f       	mul	r18, r17
    264e:	90 0d       	add	r25, r0
    2650:	11 24       	eor	r1, r1
    2652:	82 5d       	subi	r24, 0xD2	; 210
    2654:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			get_SETTIME(lastsettime);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
    2656:	9f 93       	push	r25
    2658:	8f 93       	push	r24
    265a:	bf 92       	push	r11
    265c:	af 92       	push	r10
    265e:	df 92       	push	r13
    2660:	cf 92       	push	r12
    2662:	ff 92       	push	r15
    2664:	ef 92       	push	r14
    2666:	ce 01       	movw	r24, r28
    2668:	84 5a       	subi	r24, 0xA4	; 164
    266a:	9d 4f       	sbci	r25, 0xFD	; 253
    266c:	9f 93       	push	r25
    266e:	8f 93       	push	r24
    2670:	8e 01       	movw	r16, r28
    2672:	0f 5f       	subi	r16, 0xFF	; 255
    2674:	1f 4f       	sbci	r17, 0xFF	; 255
    2676:	1f 93       	push	r17
    2678:	0f 93       	push	r16
    267a:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
    267e:	c8 01       	movw	r24, r16
    2680:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "Time", 1);
    2684:	41 e0       	ldi	r20, 0x01	; 1
    2686:	69 ec       	ldi	r22, 0xC9	; 201
    2688:	76 e9       	ldi	r23, 0x96	; 150
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    2690:	b7 01       	movw	r22, r14
    2692:	65 5f       	subi	r22, 0xF5	; 245
    2694:	7f 4f       	sbci	r23, 0xFF	; 255
    2696:	42 e0       	ldi	r20, 0x02	; 2
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			break;
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    26a2:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_TIM, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    26a4:	a1 c0       	rjmp	.+322    	; 0x27e8 <report+0xabe>

		case 'v':					// Vacuum
			redvac = read_ionpump(REDPUMP);
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	0e 94 3f 08 	call	0x107e	; 0x107e <read_ionpump>
    26ac:	d6 2e       	mov	r13, r22
    26ae:	c7 2e       	mov	r12, r23
    26b0:	b8 2e       	mov	r11, r24
    26b2:	a9 2e       	mov	r10, r25
			bluvac = read_ionpump(BLUEPUMP);
    26b4:	82 e0       	ldi	r24, 0x02	; 2
    26b6:	0e 94 3f 08 	call	0x107e	; 0x107e <read_ionpump>
    26ba:	96 2e       	mov	r9, r22
    26bc:	87 2e       	mov	r8, r23
    26be:	78 2e       	mov	r7, r24
    26c0:	69 2e       	mov	r6, r25
			get_time(currenttime);
    26c2:	7e 01       	movw	r14, r28
    26c4:	96 ef       	ldi	r25, 0xF6	; 246
    26c6:	e9 1a       	sub	r14, r25
    26c8:	9e ef       	ldi	r25, 0xFE	; 254
    26ca:	f9 0a       	sbc	r15, r25
    26cc:	c7 01       	movw	r24, r14
    26ce:	0e 94 bf 05 	call	0xb7e	; 0xb7e <get_time>
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
    26d2:	24 e3       	ldi	r18, 0x34	; 52
    26d4:	20 9f       	mul	r18, r16
    26d6:	c0 01       	movw	r24, r0
    26d8:	21 9f       	mul	r18, r17
    26da:	90 0d       	add	r25, r0
    26dc:	11 24       	eor	r1, r1
    26de:	82 5d       	subi	r24, 0xD2	; 210
    26e0:	97 4d       	sbci	r25, 0xD7	; 215
    26e2:	9f 93       	push	r25
    26e4:	8f 93       	push	r24
    26e6:	6f 92       	push	r6
    26e8:	7f 92       	push	r7
    26ea:	8f 92       	push	r8
    26ec:	9f 92       	push	r9
    26ee:	af 92       	push	r10
    26f0:	bf 92       	push	r11
    26f2:	cf 92       	push	r12
    26f4:	df 92       	push	r13
    26f6:	ff 92       	push	r15
    26f8:	ef 92       	push	r14
    26fa:	ce 01       	movw	r24, r28
    26fc:	8b 58       	subi	r24, 0x8B	; 139
    26fe:	9d 4f       	sbci	r25, 0xFD	; 253
    2700:	9f 93       	push	r25
    2702:	8f 93       	push	r24
    2704:	8e 01       	movw	r16, r28
    2706:	0f 5f       	subi	r16, 0xFF	; 255
    2708:	1f 4f       	sbci	r17, 0xFF	; 255
    270a:	1f 93       	push	r17
    270c:	0f 93       	push	r16
    270e:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			printLine(outbuf);
    2712:	c8 01       	movw	r24, r16
    2714:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    2718:	41 e0       	ldi	r20, 0x01	; 1
    271a:	6e ec       	ldi	r22, 0xCE	; 206
    271c:	76 e9       	ldi	r23, 0x96	; 150
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    2724:	6f 92       	push	r6
    2726:	7f 92       	push	r7
    2728:	8f 92       	push	r8
    272a:	9f 92       	push	r9
    272c:	af 92       	push	r10
    272e:	bf 92       	push	r11
    2730:	cf 92       	push	r12
    2732:	df 92       	push	r13
    2734:	ce 01       	movw	r24, r28
    2736:	86 56       	subi	r24, 0x66	; 102
    2738:	9d 4f       	sbci	r25, 0xFD	; 253
    273a:	9f 93       	push	r25
    273c:	8f 93       	push	r24
    273e:	1f 93       	push	r17
    2740:	0f 93       	push	r16
    2742:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			writestr_OLED(1, outbuf, 2);
    2746:	42 e0       	ldi	r20, 0x02	; 2
    2748:	b8 01       	movw	r22, r16
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			break;
    2750:	cd bf       	out	0x3d, r28	; 61
    2752:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    2754:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VAC, currenttime, redvac, bluvac, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    2756:	48 c0       	rjmp	.+144    	; 0x27e8 <report+0xabe>

		case 'V':					// Version
			get_VERSION(version);
    2758:	6e 01       	movw	r12, r28
    275a:	9f ef       	ldi	r25, 0xFF	; 255
    275c:	c9 0e       	add	r12, r25
    275e:	d1 1c       	adc	r13, r1
    2760:	c6 01       	movw	r24, r12
    2762:	0e 94 58 06 	call	0xcb0	; 0xcb0 <get_VERSION>
			get_time(currenttime);
    2766:	7e 01       	movw	r14, r28
    2768:	86 ef       	ldi	r24, 0xF6	; 246
    276a:	e8 1a       	sub	r14, r24
    276c:	8e ef       	ldi	r24, 0xFE	; 254
    276e:	f8 0a       	sbc	r15, r24
    2770:	c7 01       	movw	r24, r14
    2772:	0e 94 bf 05 	call	0xb7e	; 0xb7e <get_time>
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
    2776:	24 e3       	ldi	r18, 0x34	; 52
    2778:	20 9f       	mul	r18, r16
    277a:	c0 01       	movw	r24, r0
    277c:	21 9f       	mul	r18, r17
    277e:	90 0d       	add	r25, r0
    2780:	11 24       	eor	r1, r1
    2782:	82 5d       	subi	r24, 0xD2	; 210
    2784:	97 4d       	sbci	r25, 0xD7	; 215
    2786:	9f 93       	push	r25
    2788:	8f 93       	push	r24
    278a:	df 92       	push	r13
    278c:	cf 92       	push	r12
    278e:	ff 92       	push	r15
    2790:	ef 92       	push	r14
    2792:	ce 01       	movw	r24, r28
    2794:	89 55       	subi	r24, 0x59	; 89
    2796:	9d 4f       	sbci	r25, 0xFD	; 253
    2798:	9f 93       	push	r25
    279a:	8f 93       	push	r24
    279c:	8e 01       	movw	r16, r28
    279e:	0f 5f       	subi	r16, 0xFF	; 255
    27a0:	1f 4f       	sbci	r17, 0xFF	; 255
    27a2:	1f 93       	push	r17
    27a4:	0f 93       	push	r16
    27a6:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
			printLine(outbuf);
    27aa:	c8 01       	movw	r24, r16
    27ac:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>
			writestr_OLED(1, "specMech Version", 1);
    27b0:	41 e0       	ldi	r20, 0x01	; 1
    27b2:	6b e4       	ldi	r22, 0x4B	; 75
    27b4:	75 e9       	ldi	r23, 0x95	; 149
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			get_VERSION(outbuf);
    27bc:	c8 01       	movw	r24, r16
    27be:	0e 94 58 06 	call	0xcb0	; 0xcb0 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    27c2:	42 e0       	ldi	r20, 0x02	; 2
    27c4:	b8 01       	movw	r22, r16
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	0e 94 03 0c 	call	0x1806	; 0x1806 <writestr_OLED>
			break;
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	de bf       	out	0x3e, r29	; 62
			printError(ERR_BADOBJECT, "report: unknown object");
			return(ERROR);
			break;
	}

	return(NOERROR);
    27d0:	f1 2c       	mov	r15, r1
			sprintf(outbuf, format_VER, currenttime, version, pcmd[cstack].cid);
			printLine(outbuf);
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    27d2:	0a c0       	rjmp	.+20     	; 0x27e8 <report+0xabe>

		default:
			printError(ERR_BADOBJECT, "report: unknown object");
    27d4:	6e ed       	ldi	r22, 0xDE	; 222
    27d6:	76 e9       	ldi	r23, 0x96	; 150
    27d8:	8a ec       	ldi	r24, 0xCA	; 202
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
			return(ERROR);
    27e0:	0f 2e       	mov	r0, r31
    27e2:	f3 e6       	ldi	r31, 0x63	; 99
    27e4:	ff 2e       	mov	r15, r31
    27e6:	f0 2d       	mov	r31, r0
			break;
	}

	return(NOERROR);

}
    27e8:	8f 2d       	mov	r24, r15
    27ea:	c3 52       	subi	r28, 0x23	; 35
    27ec:	dd 4f       	sbci	r29, 0xFD	; 253
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	de bf       	out	0x3e, r29	; 62
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	1f 91       	pop	r17
    27f8:	0f 91       	pop	r16
    27fa:	ff 90       	pop	r15
    27fc:	ef 90       	pop	r14
    27fe:	df 90       	pop	r13
    2800:	cf 90       	pop	r12
    2802:	bf 90       	pop	r11
    2804:	af 90       	pop	r10
    2806:	9f 90       	pop	r9
    2808:	8f 90       	pop	r8
    280a:	7f 90       	pop	r7
    280c:	6f 90       	pop	r6
    280e:	5f 90       	pop	r5
    2810:	4f 90       	pop	r4
    2812:	3f 90       	pop	r3
    2814:	2f 90       	pop	r2
    2816:	08 95       	ret

00002818 <crc16>:

	Returns:
		The CRC16 value, an unsigned 16-bit word
------------------------------------------------------------------------------*/
uint16_t crc16(uint8_t *packet, uint16_t nBytes)
{
    2818:	dc 01       	movw	r26, r24

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    281a:	40 e0       	ldi	r20, 0x00	; 0
    281c:	50 e0       	ldi	r21, 0x00	; 0
------------------------------------------------------------------------------*/
uint16_t crc16(uint8_t *packet, uint16_t nBytes)
{

	uint8_t bit;
	uint16_t crc = 0;
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	90 e0       	ldi	r25, 0x00	; 0
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    2822:	1b c0       	rjmp	.+54     	; 0x285a <crc16+0x42>
		crc = crc ^ ((uint16_t) packet[byte] << 8);
    2824:	fd 01       	movw	r30, r26
    2826:	e4 0f       	add	r30, r20
    2828:	f5 1f       	adc	r31, r21
    282a:	20 81       	ld	r18, Z
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	32 2f       	mov	r19, r18
    2830:	22 27       	eor	r18, r18
    2832:	82 27       	eor	r24, r18
    2834:	93 27       	eor	r25, r19
		for (bit = 0; bit < 8; bit++) {
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	0c c0       	rjmp	.+24     	; 0x2852 <crc16+0x3a>
			if (crc & 0x8000) {
    283a:	99 23       	and	r25, r25
    283c:	3c f4       	brge	.+14     	; 0x284c <crc16+0x34>
				crc = (crc << 1) ^ 0x1021;
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	31 e2       	ldi	r19, 0x21	; 33
    2844:	83 27       	eor	r24, r19
    2846:	30 e1       	ldi	r19, 0x10	; 16
    2848:	93 27       	eor	r25, r19
    284a:	02 c0       	rjmp	.+4      	; 0x2850 <crc16+0x38>
			} else {
				crc = crc << 1;
    284c:	88 0f       	add	r24, r24
    284e:	99 1f       	adc	r25, r25
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
		crc = crc ^ ((uint16_t) packet[byte] << 8);
		for (bit = 0; bit < 8; bit++) {
    2850:	2f 5f       	subi	r18, 0xFF	; 255
    2852:	28 30       	cpi	r18, 0x08	; 8
    2854:	90 f3       	brcs	.-28     	; 0x283a <crc16+0x22>

	uint8_t bit;
	uint16_t crc = 0;
	int16_t byte;

	for (byte = 0; byte < nBytes; byte++) {
    2856:	4f 5f       	subi	r20, 0xFF	; 255
    2858:	5f 4f       	sbci	r21, 0xFF	; 255
    285a:	46 17       	cp	r20, r22
    285c:	57 07       	cpc	r21, r23
    285e:	10 f3       	brcs	.-60     	; 0x2824 <crc16+0xc>
				crc = crc << 1;
			}
		}
	}
	return (crc);
}
    2860:	08 95       	ret

00002862 <get_FRAM_MOTOR_ENCODER>:
	Returns:
		ERROR on FRAM read error
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t get_FRAM_MOTOR_ENCODER(uint8_t controller, int32_t *encoderValue)
{
    2862:	ff 92       	push	r15
    2864:	0f 93       	push	r16
    2866:	1f 93       	push	r17
    2868:	cf 93       	push	r28
    286a:	df 93       	push	r29
    286c:	00 d0       	rcall	.+0      	; 0x286e <get_FRAM_MOTOR_ENCODER+0xc>
    286e:	00 d0       	rcall	.+0      	; 0x2870 <get_FRAM_MOTOR_ENCODER+0xe>
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
    2874:	8b 01       	movw	r16, r22

	uint8_t tbuf[4];
	uint16_t framaddr;
	int32_t tempVal;

	switch (controller) {
    2876:	81 38       	cpi	r24, 0x81	; 129
    2878:	59 f0       	breq	.+22     	; 0x2890 <get_FRAM_MOTOR_ENCODER+0x2e>
    287a:	82 38       	cpi	r24, 0x82	; 130
    287c:	31 f0       	breq	.+12     	; 0x288a <get_FRAM_MOTOR_ENCODER+0x28>
    287e:	80 38       	cpi	r24, 0x80	; 128
    2880:	09 f0       	breq	.+2      	; 0x2884 <get_FRAM_MOTOR_ENCODER+0x22>
    2882:	4b c0       	rjmp	.+150    	; 0x291a <get_FRAM_MOTOR_ENCODER+0xb8>
		case MOTOR_A:
			framaddr = ENCA_FRAMADDR;
    2884:	64 e1       	ldi	r22, 0x14	; 20
    2886:	70 e0       	ldi	r23, 0x00	; 0
    2888:	05 c0       	rjmp	.+10     	; 0x2894 <get_FRAM_MOTOR_ENCODER+0x32>
		case MOTOR_B:
			framaddr = ENCB_FRAMADDR;
			break;

		case MOTOR_C:
			framaddr = ENCC_FRAMADDR;
    288a:	6c e1       	ldi	r22, 0x1C	; 28
    288c:	70 e0       	ldi	r23, 0x00	; 0
			break;
    288e:	02 c0       	rjmp	.+4      	; 0x2894 <get_FRAM_MOTOR_ENCODER+0x32>
		case MOTOR_A:
			framaddr = ENCA_FRAMADDR;
			break;

		case MOTOR_B:
			framaddr = ENCB_FRAMADDR;
    2890:	68 e1       	ldi	r22, 0x18	; 24
    2892:	70 e0       	ldi	r23, 0x00	; 0

		default:
			return(ERROR);
	}

	if (read_FRAM(FRAMTWIADDR, framaddr, tbuf, 4) == ERROR) {
    2894:	24 e0       	ldi	r18, 0x04	; 4
    2896:	ae 01       	movw	r20, r28
    2898:	4f 5f       	subi	r20, 0xFF	; 255
    289a:	5f 4f       	sbci	r21, 0xFF	; 255
    289c:	80 e5       	ldi	r24, 0x50	; 80
    289e:	0e 94 d1 06 	call	0xda2	; 0xda2 <read_FRAM>
    28a2:	f8 2e       	mov	r15, r24
    28a4:	83 e6       	ldi	r24, 0x63	; 99
    28a6:	f8 12       	cpse	r15, r24
    28a8:	0f c0       	rjmp	.+30     	; 0x28c8 <get_FRAM_MOTOR_ENCODER+0x66>
		printError(ERR_FRAM, "get_FRAM_MOTOR_ENCODER: read_FRAM error");
    28aa:	6f e5       	ldi	r22, 0x5F	; 95
    28ac:	78 e9       	ldi	r23, 0x98	; 152
    28ae:	83 e9       	ldi	r24, 0x93	; 147
    28b0:	91 e0       	ldi	r25, 0x01	; 1
    28b2:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		*encoderValue = 0xFFFFFFFF;
    28b6:	8f ef       	ldi	r24, 0xFF	; 255
    28b8:	9f ef       	ldi	r25, 0xFF	; 255
    28ba:	dc 01       	movw	r26, r24
    28bc:	f8 01       	movw	r30, r16
    28be:	80 83       	st	Z, r24
    28c0:	91 83       	std	Z+1, r25	; 0x01
    28c2:	a2 83       	std	Z+2, r26	; 0x02
    28c4:	b3 83       	std	Z+3, r27	; 0x03
		return(ERROR);
    28c6:	2d c0       	rjmp	.+90     	; 0x2922 <get_FRAM_MOTOR_ENCODER+0xc0>
	}

	tempVal =  (uint32_t) tbuf[0] << 24;
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	a0 e0       	ldi	r26, 0x00	; 0
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	78 2f       	mov	r23, r24
    28d2:	66 27       	eor	r22, r22
    28d4:	55 27       	eor	r21, r21
    28d6:	44 27       	eor	r20, r20
	tempVal |= (uint32_t) tbuf[1] << 16;
    28d8:	9a 81       	ldd	r25, Y+2	; 0x02
    28da:	89 2f       	mov	r24, r25
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	a0 e0       	ldi	r26, 0x00	; 0
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	dc 01       	movw	r26, r24
    28e4:	99 27       	eor	r25, r25
    28e6:	88 27       	eor	r24, r24
    28e8:	84 2b       	or	r24, r20
    28ea:	95 2b       	or	r25, r21
    28ec:	a6 2b       	or	r26, r22
    28ee:	b7 2b       	or	r27, r23
	tempVal |= (uint32_t) tbuf[2] << 8;
    28f0:	4b 81       	ldd	r20, Y+3	; 0x03
    28f2:	50 e0       	ldi	r21, 0x00	; 0
    28f4:	60 e0       	ldi	r22, 0x00	; 0
    28f6:	70 e0       	ldi	r23, 0x00	; 0
    28f8:	76 2f       	mov	r23, r22
    28fa:	65 2f       	mov	r22, r21
    28fc:	54 2f       	mov	r21, r20
    28fe:	44 27       	eor	r20, r20
    2900:	84 2b       	or	r24, r20
    2902:	95 2b       	or	r25, r21
    2904:	a6 2b       	or	r26, r22
    2906:	b7 2b       	or	r27, r23
	tempVal |= (uint32_t) tbuf[3];
    2908:	2c 81       	ldd	r18, Y+4	; 0x04
    290a:	82 2b       	or	r24, r18
	*encoderValue = tempVal;
    290c:	f8 01       	movw	r30, r16
    290e:	80 83       	st	Z, r24
    2910:	91 83       	std	Z+1, r25	; 0x01
    2912:	a2 83       	std	Z+2, r26	; 0x02
    2914:	b3 83       	std	Z+3, r27	; 0x03

	return(NOERROR);
    2916:	f1 2c       	mov	r15, r1
    2918:	04 c0       	rjmp	.+8      	; 0x2922 <get_FRAM_MOTOR_ENCODER+0xc0>
		case MOTOR_C:
			framaddr = ENCC_FRAMADDR;
			break;

		default:
			return(ERROR);
    291a:	0f 2e       	mov	r0, r31
    291c:	f3 e6       	ldi	r31, 0x63	; 99
    291e:	ff 2e       	mov	r15, r31
    2920:	f0 2d       	mov	r31, r0
	tempVal |= (uint32_t) tbuf[3];
	*encoderValue = tempVal;

	return(NOERROR);

}
    2922:	8f 2d       	mov	r24, r15
    2924:	24 96       	adiw	r28, 0x04	; 4
    2926:	cd bf       	out	0x3d, r28	; 61
    2928:	de bf       	out	0x3e, r29	; 62
    292a:	df 91       	pop	r29
    292c:	cf 91       	pop	r28
    292e:	1f 91       	pop	r17
    2930:	0f 91       	pop	r16
    2932:	ff 90       	pop	r15
    2934:	08 95       	ret

00002936 <get_MOTOR>:
	Returns
		ERROR on USART timeout or CRC mismatch
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t get_MOTOR(uint8_t mtraddr, uint8_t cmd, uint8_t* data, uint8_t nbytes)
{
    2936:	3f 92       	push	r3
    2938:	4f 92       	push	r4
    293a:	5f 92       	push	r5
    293c:	6f 92       	push	r6
    293e:	7f 92       	push	r7
    2940:	8f 92       	push	r8
    2942:	9f 92       	push	r9
    2944:	af 92       	push	r10
    2946:	bf 92       	push	r11
    2948:	cf 92       	push	r12
    294a:	df 92       	push	r13
    294c:	ef 92       	push	r14
    294e:	ff 92       	push	r15
    2950:	0f 93       	push	r16
    2952:	1f 93       	push	r17
    2954:	cf 93       	push	r28
    2956:	df 93       	push	r29
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	8a 01       	movw	r16, r20
    295e:	32 2e       	mov	r3, r18
		data[i] = recv1_buf.data[i];
	}

	return(NOERROR);	
	
}
    2960:	8d b6       	in	r8, 0x3d	; 61
    2962:	9e b6       	in	r9, 0x3e	; 62
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t get_MOTOR(uint8_t mtraddr, uint8_t cmd, uint8_t* data, uint8_t nbytes)
{

	uint8_t i, tbuf[nbytes+2];
    2964:	a2 2e       	mov	r10, r18
    2966:	b1 2c       	mov	r11, r1
    2968:	75 01       	movw	r14, r10
    296a:	22 e0       	ldi	r18, 0x02	; 2
    296c:	e2 0e       	add	r14, r18
    296e:	f1 1c       	adc	r15, r1
    2970:	25 01       	movw	r4, r10
    2972:	3f ef       	ldi	r19, 0xFF	; 255
    2974:	43 1a       	sub	r4, r19
    2976:	53 0a       	sbc	r5, r19
    2978:	ed b7       	in	r30, 0x3d	; 61
    297a:	fe b7       	in	r31, 0x3e	; 62
    297c:	ee 19       	sub	r30, r14
    297e:	ff 09       	sbc	r31, r15
    2980:	ed bf       	out	0x3d, r30	; 61
    2982:	fe bf       	out	0x3e, r31	; 62
    2984:	2d b7       	in	r18, 0x3d	; 61
    2986:	3e b7       	in	r19, 0x3e	; 62
    2988:	2f 5f       	subi	r18, 0xFF	; 255
    298a:	3f 4f       	sbci	r19, 0xFF	; 255
    298c:	39 01       	movw	r6, r18
    298e:	69 01       	movw	r12, r18
	uint16_t crcReceived, crcExpected;

	recv1_buf.nbytes = nbytes+2;	// Set up receive buffer (+2 for crc bytes)
    2990:	92 e0       	ldi	r25, 0x02	; 2
    2992:	93 0d       	add	r25, r3
    2994:	90 93 35 2b 	sts	0x2B35, r25	; 0x802b35 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    2998:	10 92 37 2b 	sts	0x2B37, r1	; 0x802b37 <recv1_buf+0x102>
	recv1_buf.done = NO;
    299c:	10 92 38 2b 	sts	0x2B38, r1	; 0x802b38 <recv1_buf+0x103>

	tbuf[0] = mtraddr;				// Motor controller packet serial address
    29a0:	81 83       	std	Z+1, r24	; 0x01
	tbuf[1] = cmd;					// Motor controller command
    29a2:	f9 01       	movw	r30, r18
    29a4:	61 83       	std	Z+1, r22	; 0x01
	send_USART(1, tbuf, 2);
    29a6:	42 e0       	ldi	r20, 0x02	; 2
    29a8:	b9 01       	movw	r22, r18
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	0e 94 65 1f 	call	0x3eca	; 0x3eca <send_USART>

	USART1_ticks = 0;
    29b0:	10 92 30 2a 	sts	0x2A30, r1	; 0x802a30 <USART1_ticks>
    29b4:	10 92 31 2a 	sts	0x2A31, r1	; 0x802a31 <USART1_ticks+0x1>
	start_TCB0(1);					// 1 ms tisk period for USART1_ticks
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <start_TCB0>
	while (recv1_buf.done == NO) {	// Wait for the reply
    29c0:	10 c0       	rjmp	.+32     	; 0x29e2 <get_MOTOR+0xac>
		if (USART1_ticks > 50) {	// Timeout about 4 ticks at 38400 baud
    29c2:	80 91 30 2a 	lds	r24, 0x2A30	; 0x802a30 <USART1_ticks>
    29c6:	90 91 31 2a 	lds	r25, 0x2A31	; 0x802a31 <USART1_ticks+0x1>
    29ca:	c3 97       	sbiw	r24, 0x33	; 51
    29cc:	50 f0       	brcs	.+20     	; 0x29e2 <get_MOTOR+0xac>
			stop_TCB0();
    29ce:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <stop_TCB0>
			printError(ERR_MTRREADENC, "get_MOTOR: serial timeout");
    29d2:	67 e8       	ldi	r22, 0x87	; 135
    29d4:	78 e9       	ldi	r23, 0x98	; 152
    29d6:	80 e3       	ldi	r24, 0x30	; 48
    29d8:	91 e0       	ldi	r25, 0x01	; 1
    29da:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
			return(ERROR);
    29de:	83 e6       	ldi	r24, 0x63	; 99
    29e0:	41 c0       	rjmp	.+130    	; 0x2a64 <get_MOTOR+0x12e>
	tbuf[1] = cmd;					// Motor controller command
	send_USART(1, tbuf, 2);

	USART1_ticks = 0;
	start_TCB0(1);					// 1 ms tisk period for USART1_ticks
	while (recv1_buf.done == NO) {	// Wait for the reply
    29e2:	80 91 38 2b 	lds	r24, 0x2B38	; 0x802b38 <recv1_buf+0x103>
    29e6:	88 23       	and	r24, r24
    29e8:	61 f3       	breq	.-40     	; 0x29c2 <get_MOTOR+0x8c>
			stop_TCB0();
			printError(ERR_MTRREADENC, "get_MOTOR: serial timeout");
			return(ERROR);
		}
	}
	stop_TCB0();
    29ea:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <stop_TCB0>

	crcReceived = (recv1_buf.data[nbytes] << 8) | recv1_buf.data[nbytes+1];
    29ee:	f5 01       	movw	r30, r10
    29f0:	eb 5c       	subi	r30, 0xCB	; 203
    29f2:	f5 4d       	sbci	r31, 0xD5	; 213
    29f4:	a0 80       	ld	r10, Z
    29f6:	b1 2c       	mov	r11, r1
    29f8:	ba 2c       	mov	r11, r10
    29fa:	aa 24       	eor	r10, r10
    29fc:	f2 01       	movw	r30, r4
    29fe:	eb 5c       	subi	r30, 0xCB	; 203
    2a00:	f5 4d       	sbci	r31, 0xD5	; 213
    2a02:	80 81       	ld	r24, Z
    2a04:	a8 2a       	or	r10, r24

	for (i = 2; i < nbytes+2; i++) {		// Compute expected crc value
    2a06:	22 e0       	ldi	r18, 0x02	; 2
    2a08:	09 c0       	rjmp	.+18     	; 0x2a1c <get_MOTOR+0xe6>
		tbuf[i] = recv1_buf.data[i-2];
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	ed 5c       	subi	r30, 0xCD	; 205
    2a0e:	f5 4d       	sbci	r31, 0xD5	; 213
    2a10:	30 81       	ld	r19, Z
    2a12:	f6 01       	movw	r30, r12
    2a14:	e8 0f       	add	r30, r24
    2a16:	f9 1f       	adc	r31, r25
    2a18:	30 83       	st	Z, r19
	}
	stop_TCB0();

	crcReceived = (recv1_buf.data[nbytes] << 8) | recv1_buf.data[nbytes+1];

	for (i = 2; i < nbytes+2; i++) {		// Compute expected crc value
    2a1a:	2f 5f       	subi	r18, 0xFF	; 255
    2a1c:	82 2f       	mov	r24, r18
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	8e 15       	cp	r24, r14
    2a22:	9f 05       	cpc	r25, r15
    2a24:	94 f3       	brlt	.-28     	; 0x2a0a <get_MOTOR+0xd4>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, nbytes+2);
    2a26:	b7 01       	movw	r22, r14
    2a28:	c3 01       	movw	r24, r6
    2a2a:	0e 94 0c 14 	call	0x2818	; 0x2818 <crc16>

	if (crcReceived != crcExpected) {
    2a2e:	a8 16       	cp	r10, r24
    2a30:	b9 06       	cpc	r11, r25
    2a32:	a1 f0       	breq	.+40     	; 0x2a5c <get_MOTOR+0x126>
		printError(ERR_MTRENCCRC, "get_MOTOR: CRC mismatch");
    2a34:	61 ea       	ldi	r22, 0xA1	; 161
    2a36:	78 e9       	ldi	r23, 0x98	; 152
    2a38:	81 e3       	ldi	r24, 0x31	; 49
    2a3a:	91 e0       	ldi	r25, 0x01	; 1
    2a3c:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		return(ERROR);
    2a40:	83 e6       	ldi	r24, 0x63	; 99
    2a42:	10 c0       	rjmp	.+32     	; 0x2a64 <get_MOTOR+0x12e>
	}

	for (i = 0; i < nbytes; i++) {
		data[i] = recv1_buf.data[i];
    2a44:	82 2f       	mov	r24, r18
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	f8 01       	movw	r30, r16
    2a4a:	e8 0f       	add	r30, r24
    2a4c:	f9 1f       	adc	r31, r25
    2a4e:	dc 01       	movw	r26, r24
    2a50:	ab 5c       	subi	r26, 0xCB	; 203
    2a52:	b5 4d       	sbci	r27, 0xD5	; 213
    2a54:	8c 91       	ld	r24, X
    2a56:	80 83       	st	Z, r24
	if (crcReceived != crcExpected) {
		printError(ERR_MTRENCCRC, "get_MOTOR: CRC mismatch");
		return(ERROR);
	}

	for (i = 0; i < nbytes; i++) {
    2a58:	2f 5f       	subi	r18, 0xFF	; 255
    2a5a:	01 c0       	rjmp	.+2      	; 0x2a5e <get_MOTOR+0x128>
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	23 15       	cp	r18, r3
    2a60:	88 f3       	brcs	.-30     	; 0x2a44 <get_MOTOR+0x10e>
		data[i] = recv1_buf.data[i];
	}

	return(NOERROR);	
    2a62:	80 e0       	ldi	r24, 0x00	; 0
	
}
    2a64:	8d be       	out	0x3d, r8	; 61
    2a66:	9e be       	out	0x3e, r9	; 62
    2a68:	df 91       	pop	r29
    2a6a:	cf 91       	pop	r28
    2a6c:	1f 91       	pop	r17
    2a6e:	0f 91       	pop	r16
    2a70:	ff 90       	pop	r15
    2a72:	ef 90       	pop	r14
    2a74:	df 90       	pop	r13
    2a76:	cf 90       	pop	r12
    2a78:	bf 90       	pop	r11
    2a7a:	af 90       	pop	r10
    2a7c:	9f 90       	pop	r9
    2a7e:	8f 90       	pop	r8
    2a80:	7f 90       	pop	r7
    2a82:	6f 90       	pop	r6
    2a84:	5f 90       	pop	r5
    2a86:	4f 90       	pop	r4
    2a88:	3f 90       	pop	r3
    2a8a:	08 95       	ret

00002a8c <get_MOTOR_ENCODER>:
			Bit1: Direction (0=forward, 1-backwards)
			Bit2: Counter overflow (1=overflow occurred, clear after reading)
			Bits 3-7 are "reserved." Bit7 is 1.
------------------------------------------------------------------------------*/
uint8_t get_MOTOR_ENCODER(uint8_t controller, int32_t *encoderValue)
{
    2a8c:	ff 92       	push	r15
    2a8e:	0f 93       	push	r16
    2a90:	1f 93       	push	r17
    2a92:	cf 93       	push	r28
    2a94:	df 93       	push	r29
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	25 97       	sbiw	r28, 0x05	; 5
    2a9c:	cd bf       	out	0x3d, r28	; 61
    2a9e:	de bf       	out	0x3e, r29	; 62
    2aa0:	8b 01       	movw	r16, r22

	uint8_t data[5];	// 5 bytes includes status, which is ignored here

	if (get_MOTOR(controller, ENCODERCOUNT, data, 5) == ERROR) {
    2aa2:	25 e0       	ldi	r18, 0x05	; 5
    2aa4:	ae 01       	movw	r20, r28
    2aa6:	4f 5f       	subi	r20, 0xFF	; 255
    2aa8:	5f 4f       	sbci	r21, 0xFF	; 255
    2aaa:	60 e1       	ldi	r22, 0x10	; 16
    2aac:	0e 94 9b 14 	call	0x2936	; 0x2936 <get_MOTOR>
    2ab0:	f8 2e       	mov	r15, r24
    2ab2:	83 e6       	ldi	r24, 0x63	; 99
    2ab4:	f8 12       	cpse	r15, r24
    2ab6:	07 c0       	rjmp	.+14     	; 0x2ac6 <get_MOTOR_ENCODER+0x3a>
		printError(ERR_MTR, "get_MOTOR_ENCODER: get_MOTOR error");
    2ab8:	69 eb       	ldi	r22, 0xB9	; 185
    2aba:	78 e9       	ldi	r23, 0x98	; 152
    2abc:	86 e3       	ldi	r24, 0x36	; 54
    2abe:	91 e0       	ldi	r25, 0x01	; 1
    2ac0:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		return(ERROR);
    2ac4:	28 c0       	rjmp	.+80     	; 0x2b16 <get_MOTOR_ENCODER+0x8a>
	}

	*encoderValue =  (uint32_t) data[0] << 24;
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	a0 e0       	ldi	r26, 0x00	; 0
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	78 2f       	mov	r23, r24
    2ad0:	66 27       	eor	r22, r22
    2ad2:	55 27       	eor	r21, r21
    2ad4:	44 27       	eor	r20, r20
	*encoderValue |= (uint32_t) data[1] << 16;
    2ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad8:	89 2f       	mov	r24, r25
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	a0 e0       	ldi	r26, 0x00	; 0
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	99 27       	eor	r25, r25
    2ae4:	88 27       	eor	r24, r24
    2ae6:	84 2b       	or	r24, r20
    2ae8:	95 2b       	or	r25, r21
    2aea:	a6 2b       	or	r26, r22
    2aec:	b7 2b       	or	r27, r23
	*encoderValue |= (uint32_t) data[2] << 8;
    2aee:	4b 81       	ldd	r20, Y+3	; 0x03
    2af0:	50 e0       	ldi	r21, 0x00	; 0
    2af2:	60 e0       	ldi	r22, 0x00	; 0
    2af4:	70 e0       	ldi	r23, 0x00	; 0
    2af6:	76 2f       	mov	r23, r22
    2af8:	65 2f       	mov	r22, r21
    2afa:	54 2f       	mov	r21, r20
    2afc:	44 27       	eor	r20, r20
    2afe:	84 2b       	or	r24, r20
    2b00:	95 2b       	or	r25, r21
    2b02:	a6 2b       	or	r26, r22
    2b04:	b7 2b       	or	r27, r23
	*encoderValue |= (uint32_t) data[3];
    2b06:	2c 81       	ldd	r18, Y+4	; 0x04
    2b08:	82 2b       	or	r24, r18
    2b0a:	f8 01       	movw	r30, r16
    2b0c:	80 83       	st	Z, r24
    2b0e:	91 83       	std	Z+1, r25	; 0x01
    2b10:	a2 83       	std	Z+2, r26	; 0x02
    2b12:	b3 83       	std	Z+3, r27	; 0x03

	return(NOERROR);
    2b14:	f1 2c       	mov	r15, r1

}
    2b16:	8f 2d       	mov	r24, r15
    2b18:	25 96       	adiw	r28, 0x05	; 5
    2b1a:	cd bf       	out	0x3d, r28	; 61
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	df 91       	pop	r29
    2b20:	cf 91       	pop	r28
    2b22:	1f 91       	pop	r17
    2b24:	0f 91       	pop	r16
    2b26:	ff 90       	pop	r15
    2b28:	08 95       	ret

00002b2a <get_MOTOR_FLOAT>:
	Returns:
		ERROR: USART timeout or CRC check error
		NOERROR
------------------------------------------------------------------------------*/
uint8_t get_MOTOR_FLOAT(uint8_t mtraddr, uint8_t cmd, float* value)
{
    2b2a:	ff 92       	push	r15
    2b2c:	0f 93       	push	r16
    2b2e:	1f 93       	push	r17
    2b30:	cf 93       	push	r28
    2b32:	df 93       	push	r29
    2b34:	00 d0       	rcall	.+0      	; 0x2b36 <get_MOTOR_FLOAT+0xc>
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
    2b3a:	8a 01       	movw	r16, r20

	uint8_t data[2];

	if (get_MOTOR(mtraddr, cmd, data, 2) == ERROR) {
    2b3c:	22 e0       	ldi	r18, 0x02	; 2
    2b3e:	ae 01       	movw	r20, r28
    2b40:	4f 5f       	subi	r20, 0xFF	; 255
    2b42:	5f 4f       	sbci	r21, 0xFF	; 255
    2b44:	0e 94 9b 14 	call	0x2936	; 0x2936 <get_MOTOR>
    2b48:	f8 2e       	mov	r15, r24
    2b4a:	83 e6       	ldi	r24, 0x63	; 99
    2b4c:	f8 12       	cpse	r15, r24
    2b4e:	10 c0       	rjmp	.+32     	; 0x2b70 <get_MOTOR_FLOAT+0x46>
		printError(ERR_MTR, "get_MOTOR_FLOAT: get_MOTOR error");
    2b50:	6c ed       	ldi	r22, 0xDC	; 220
    2b52:	78 e9       	ldi	r23, 0x98	; 152
    2b54:	86 e3       	ldi	r24, 0x36	; 54
    2b56:	91 e0       	ldi	r25, 0x01	; 1
    2b58:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		*value = BADFLOAT;
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	90 e8       	ldi	r25, 0x80	; 128
    2b60:	a6 e2       	ldi	r26, 0x26	; 38
    2b62:	b4 ec       	ldi	r27, 0xC4	; 196
    2b64:	f8 01       	movw	r30, r16
    2b66:	80 83       	st	Z, r24
    2b68:	91 83       	std	Z+1, r25	; 0x01
    2b6a:	a2 83       	std	Z+2, r26	; 0x02
    2b6c:	b3 83       	std	Z+3, r27	; 0x03
		return(ERROR);
    2b6e:	18 c0       	rjmp	.+48     	; 0x2ba0 <get_MOTOR_FLOAT+0x76>
	}
	*value = ((float) ((data[0] << 8) | data[1])) / 10.0;
    2b70:	69 81       	ldd	r22, Y+1	; 0x01
    2b72:	70 e0       	ldi	r23, 0x00	; 0
    2b74:	76 2f       	mov	r23, r22
    2b76:	66 27       	eor	r22, r22
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	68 2b       	or	r22, r24
    2b7c:	07 2e       	mov	r0, r23
    2b7e:	00 0c       	add	r0, r0
    2b80:	88 0b       	sbc	r24, r24
    2b82:	99 0b       	sbc	r25, r25
    2b84:	0e 94 a4 22 	call	0x4548	; 0x4548 <__floatsisf>
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	40 e2       	ldi	r20, 0x20	; 32
    2b8e:	51 e4       	ldi	r21, 0x41	; 65
    2b90:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <__divsf3>
    2b94:	f8 01       	movw	r30, r16
    2b96:	60 83       	st	Z, r22
    2b98:	71 83       	std	Z+1, r23	; 0x01
    2b9a:	82 83       	std	Z+2, r24	; 0x02
    2b9c:	93 83       	std	Z+3, r25	; 0x03
	return(NOERROR);
    2b9e:	f1 2c       	mov	r15, r1
}
    2ba0:	8f 2d       	mov	r24, r15
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	df 91       	pop	r29
    2ba8:	cf 91       	pop	r28
    2baa:	1f 91       	pop	r17
    2bac:	0f 91       	pop	r16
    2bae:	ff 90       	pop	r15
    2bb0:	08 95       	ret

00002bb2 <get_MOTOR_SPEED>:
			Bit1: Direction (0=forward, 1-backwards)
			Bit2: Counter overflow (1=overflow occurred, clear after reading)
			Bits 3-7 are "reserved." Bit7 is 1.
------------------------------------------------------------------------------*/
uint8_t get_MOTOR_SPEED(uint8_t mtraddr, int32_t *speed)
{
    2bb2:	ff 92       	push	r15
    2bb4:	0f 93       	push	r16
    2bb6:	1f 93       	push	r17
    2bb8:	cf 93       	push	r28
    2bba:	df 93       	push	r29
    2bbc:	cd b7       	in	r28, 0x3d	; 61
    2bbe:	de b7       	in	r29, 0x3e	; 62
    2bc0:	25 97       	sbiw	r28, 0x05	; 5
    2bc2:	cd bf       	out	0x3d, r28	; 61
    2bc4:	de bf       	out	0x3e, r29	; 62
    2bc6:	8b 01       	movw	r16, r22
	
	uint8_t data[5];

	if (get_MOTOR(mtraddr, ENCODERSPEED, data, 5) == ERROR) {
    2bc8:	25 e0       	ldi	r18, 0x05	; 5
    2bca:	ae 01       	movw	r20, r28
    2bcc:	4f 5f       	subi	r20, 0xFF	; 255
    2bce:	5f 4f       	sbci	r21, 0xFF	; 255
    2bd0:	62 e1       	ldi	r22, 0x12	; 18
    2bd2:	0e 94 9b 14 	call	0x2936	; 0x2936 <get_MOTOR>
    2bd6:	f8 2e       	mov	r15, r24
    2bd8:	83 e6       	ldi	r24, 0x63	; 99
    2bda:	f8 12       	cpse	r15, r24
    2bdc:	07 c0       	rjmp	.+14     	; 0x2bec <get_MOTOR_SPEED+0x3a>
		printError(ERR_MTR, "get_MOTOR_SPEED: get_MOTOR call error");
    2bde:	6d ef       	ldi	r22, 0xFD	; 253
    2be0:	78 e9       	ldi	r23, 0x98	; 152
    2be2:	86 e3       	ldi	r24, 0x36	; 54
    2be4:	91 e0       	ldi	r25, 0x01	; 1
    2be6:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		return(ERROR);
    2bea:	28 c0       	rjmp	.+80     	; 0x2c3c <get_MOTOR_SPEED+0x8a>
	}

	*speed =  (uint32_t) data[0] << 24;
    2bec:	89 81       	ldd	r24, Y+1	; 0x01
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	a0 e0       	ldi	r26, 0x00	; 0
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	78 2f       	mov	r23, r24
    2bf6:	66 27       	eor	r22, r22
    2bf8:	55 27       	eor	r21, r21
    2bfa:	44 27       	eor	r20, r20
	*speed |= (uint32_t) data[1] << 16;
    2bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfe:	89 2f       	mov	r24, r25
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	a0 e0       	ldi	r26, 0x00	; 0
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	dc 01       	movw	r26, r24
    2c08:	99 27       	eor	r25, r25
    2c0a:	88 27       	eor	r24, r24
    2c0c:	84 2b       	or	r24, r20
    2c0e:	95 2b       	or	r25, r21
    2c10:	a6 2b       	or	r26, r22
    2c12:	b7 2b       	or	r27, r23
	*speed |= (uint32_t) data[2] << 8;
    2c14:	4b 81       	ldd	r20, Y+3	; 0x03
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	60 e0       	ldi	r22, 0x00	; 0
    2c1a:	70 e0       	ldi	r23, 0x00	; 0
    2c1c:	76 2f       	mov	r23, r22
    2c1e:	65 2f       	mov	r22, r21
    2c20:	54 2f       	mov	r21, r20
    2c22:	44 27       	eor	r20, r20
    2c24:	84 2b       	or	r24, r20
    2c26:	95 2b       	or	r25, r21
    2c28:	a6 2b       	or	r26, r22
    2c2a:	b7 2b       	or	r27, r23
	*speed |= (uint32_t) data[3];
    2c2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c2e:	82 2b       	or	r24, r18
    2c30:	f8 01       	movw	r30, r16
    2c32:	80 83       	st	Z, r24
    2c34:	91 83       	std	Z+1, r25	; 0x01
    2c36:	a2 83       	std	Z+2, r26	; 0x02
    2c38:	b3 83       	std	Z+3, r27	; 0x03

	return(NOERROR);
    2c3a:	f1 2c       	mov	r15, r1

}
    2c3c:	8f 2d       	mov	r24, r15
    2c3e:	25 96       	adiw	r28, 0x05	; 5
    2c40:	cd bf       	out	0x3d, r28	; 61
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	df 91       	pop	r29
    2c46:	cf 91       	pop	r28
    2c48:	1f 91       	pop	r17
    2c4a:	0f 91       	pop	r16
    2c4c:	ff 90       	pop	r15
    2c4e:	08 95       	ret

00002c50 <get_MOTOR_CURRENT>:

uint8_t get_MOTOR_CURRENT(uint8_t mtraddr, uint16_t *current)
{
    2c50:	ff 92       	push	r15
    2c52:	0f 93       	push	r16
    2c54:	1f 93       	push	r17
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	00 d0       	rcall	.+0      	; 0x2c5c <get_MOTOR_CURRENT+0xc>
    2c5c:	00 d0       	rcall	.+0      	; 0x2c5e <get_MOTOR_CURRENT+0xe>
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	8b 01       	movw	r16, r22
	uint8_t data[4];

	if (get_MOTOR(mtraddr, ROBOREADCURRENT, data, 4) == ERROR) {
    2c64:	24 e0       	ldi	r18, 0x04	; 4
    2c66:	ae 01       	movw	r20, r28
    2c68:	4f 5f       	subi	r20, 0xFF	; 255
    2c6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c6c:	61 e3       	ldi	r22, 0x31	; 49
    2c6e:	0e 94 9b 14 	call	0x2936	; 0x2936 <get_MOTOR>
    2c72:	f8 2e       	mov	r15, r24
    2c74:	83 e6       	ldi	r24, 0x63	; 99
    2c76:	f8 12       	cpse	r15, r24
    2c78:	0c c0       	rjmp	.+24     	; 0x2c92 <get_MOTOR_CURRENT+0x42>
		printError(ERR_MTR, "get_MOTOR_CURRENT: get_MOTOR error");
    2c7a:	63 e2       	ldi	r22, 0x23	; 35
    2c7c:	79 e9       	ldi	r23, 0x99	; 153
    2c7e:	86 e3       	ldi	r24, 0x36	; 54
    2c80:	91 e0       	ldi	r25, 0x01	; 1
    2c82:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		*current = 0xFFFF;
    2c86:	8f ef       	ldi	r24, 0xFF	; 255
    2c88:	9f ef       	ldi	r25, 0xFF	; 255
    2c8a:	f8 01       	movw	r30, r16
    2c8c:	80 83       	st	Z, r24
    2c8e:	91 83       	std	Z+1, r25	; 0x01
		return(ERROR);
    2c90:	15 c0       	rjmp	.+42     	; 0x2cbc <get_MOTOR_CURRENT+0x6c>
	}
	*current = (((uint16_t) data[0] << 8) | (uint16_t) data[1]) * 10;
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	98 2f       	mov	r25, r24
    2c98:	88 27       	eor	r24, r24
    2c9a:	2a 81       	ldd	r18, Y+2	; 0x02
    2c9c:	82 2b       	or	r24, r18
    2c9e:	9c 01       	movw	r18, r24
    2ca0:	22 0f       	add	r18, r18
    2ca2:	33 1f       	adc	r19, r19
    2ca4:	88 0f       	add	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	88 0f       	add	r24, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	88 0f       	add	r24, r24
    2cae:	99 1f       	adc	r25, r25
    2cb0:	82 0f       	add	r24, r18
    2cb2:	93 1f       	adc	r25, r19
    2cb4:	f8 01       	movw	r30, r16
    2cb6:	80 83       	st	Z, r24
    2cb8:	91 83       	std	Z+1, r25	; 0x01
	return(NOERROR);	
    2cba:	f1 2c       	mov	r15, r1
}
    2cbc:	8f 2d       	mov	r24, r15
    2cbe:	24 96       	adiw	r28, 0x04	; 4
    2cc0:	cd bf       	out	0x3d, r28	; 61
    2cc2:	de bf       	out	0x3e, r29	; 62
    2cc4:	df 91       	pop	r29
    2cc6:	cf 91       	pop	r28
    2cc8:	1f 91       	pop	r17
    2cca:	0f 91       	pop	r16
    2ccc:	ff 90       	pop	r15
    2cce:	08 95       	ret

00002cd0 <get_MOTOR_PID>:

uint8_t get_MOTOR_PID(uint8_t mtraddr, PID *pid)
{
    2cd0:	ff 92       	push	r15
    2cd2:	0f 93       	push	r16
    2cd4:	1f 93       	push	r17
    2cd6:	cf 93       	push	r28
    2cd8:	df 93       	push	r29
    2cda:	cd b7       	in	r28, 0x3d	; 61
    2cdc:	de b7       	in	r29, 0x3e	; 62
    2cde:	6c 97       	sbiw	r28, 0x1c	; 28
    2ce0:	cd bf       	out	0x3d, r28	; 61
    2ce2:	de bf       	out	0x3e, r29	; 62
    2ce4:	8b 01       	movw	r16, r22
	uint8_t data[28];
	int32_t p, i, d, maxI, deadZone, minPos, maxPos;

	if (get_MOTOR(mtraddr, READPID, data, 28) == ERROR) {
    2ce6:	2c e1       	ldi	r18, 0x1C	; 28
    2ce8:	ae 01       	movw	r20, r28
    2cea:	4f 5f       	subi	r20, 0xFF	; 255
    2cec:	5f 4f       	sbci	r21, 0xFF	; 255
    2cee:	6f e3       	ldi	r22, 0x3F	; 63
    2cf0:	0e 94 9b 14 	call	0x2936	; 0x2936 <get_MOTOR>
    2cf4:	f8 2e       	mov	r15, r24
    2cf6:	83 e6       	ldi	r24, 0x63	; 99
    2cf8:	f8 12       	cpse	r15, r24
    2cfa:	07 c0       	rjmp	.+14     	; 0x2d0a <get_MOTOR_PID+0x3a>
		printError(ERR_MTR, "get_MOTOR_PID: get_MOTOR error");
    2cfc:	66 e4       	ldi	r22, 0x46	; 70
    2cfe:	79 e9       	ldi	r23, 0x99	; 153
    2d00:	86 e3       	ldi	r24, 0x36	; 54
    2d02:	91 e0       	ldi	r25, 0x01	; 1
    2d04:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		return(ERROR);
    2d08:	29 c1       	rjmp	.+594    	; 0x2f5c <get_MOTOR_PID+0x28c>
	}

	p =  (uint32_t) data[0] << 24;
    2d0a:	49 81       	ldd	r20, Y+1	; 0x01
    2d0c:	50 e0       	ldi	r21, 0x00	; 0
    2d0e:	60 e0       	ldi	r22, 0x00	; 0
    2d10:	70 e0       	ldi	r23, 0x00	; 0
    2d12:	74 2f       	mov	r23, r20
    2d14:	66 27       	eor	r22, r22
    2d16:	55 27       	eor	r21, r21
    2d18:	44 27       	eor	r20, r20
	p |= (uint32_t) data[1] << 16;
    2d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	a0 e0       	ldi	r26, 0x00	; 0
    2d20:	b0 e0       	ldi	r27, 0x00	; 0
    2d22:	dc 01       	movw	r26, r24
    2d24:	99 27       	eor	r25, r25
    2d26:	88 27       	eor	r24, r24
    2d28:	48 2b       	or	r20, r24
    2d2a:	59 2b       	or	r21, r25
    2d2c:	6a 2b       	or	r22, r26
    2d2e:	7b 2b       	or	r23, r27
	p |= (uint32_t) data[2] << 8;
    2d30:	8b 81       	ldd	r24, Y+3	; 0x03
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	a0 e0       	ldi	r26, 0x00	; 0
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	ba 2f       	mov	r27, r26
    2d3a:	a9 2f       	mov	r26, r25
    2d3c:	98 2f       	mov	r25, r24
    2d3e:	88 27       	eor	r24, r24
    2d40:	84 2b       	or	r24, r20
    2d42:	95 2b       	or	r25, r21
    2d44:	a6 2b       	or	r26, r22
    2d46:	b7 2b       	or	r27, r23
	p |= (uint32_t) data[3];
    2d48:	2c 81       	ldd	r18, Y+4	; 0x04
    2d4a:	bc 01       	movw	r22, r24
    2d4c:	cd 01       	movw	r24, r26
    2d4e:	62 2b       	or	r22, r18
	pid->p = (float) p / 1024.0;
    2d50:	0e 94 a4 22 	call	0x4548	; 0x4548 <__floatsisf>
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	40 e8       	ldi	r20, 0x80	; 128
    2d5a:	5a e3       	ldi	r21, 0x3A	; 58
    2d5c:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
    2d60:	f8 01       	movw	r30, r16
    2d62:	60 83       	st	Z, r22
    2d64:	71 83       	std	Z+1, r23	; 0x01
    2d66:	82 83       	std	Z+2, r24	; 0x02
    2d68:	93 83       	std	Z+3, r25	; 0x03

	i =  (uint32_t) data[4] << 24;
    2d6a:	4d 81       	ldd	r20, Y+5	; 0x05
    2d6c:	50 e0       	ldi	r21, 0x00	; 0
    2d6e:	60 e0       	ldi	r22, 0x00	; 0
    2d70:	70 e0       	ldi	r23, 0x00	; 0
    2d72:	74 2f       	mov	r23, r20
    2d74:	66 27       	eor	r22, r22
    2d76:	55 27       	eor	r21, r21
    2d78:	44 27       	eor	r20, r20
	i |= (uint32_t) data[5] << 16;
    2d7a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	a0 e0       	ldi	r26, 0x00	; 0
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	dc 01       	movw	r26, r24
    2d84:	99 27       	eor	r25, r25
    2d86:	88 27       	eor	r24, r24
    2d88:	48 2b       	or	r20, r24
    2d8a:	59 2b       	or	r21, r25
    2d8c:	6a 2b       	or	r22, r26
    2d8e:	7b 2b       	or	r23, r27
	i |= (uint32_t) data[6] << 8;
    2d90:	8f 81       	ldd	r24, Y+7	; 0x07
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	a0 e0       	ldi	r26, 0x00	; 0
    2d96:	b0 e0       	ldi	r27, 0x00	; 0
    2d98:	ba 2f       	mov	r27, r26
    2d9a:	a9 2f       	mov	r26, r25
    2d9c:	98 2f       	mov	r25, r24
    2d9e:	88 27       	eor	r24, r24
    2da0:	84 2b       	or	r24, r20
    2da2:	95 2b       	or	r25, r21
    2da4:	a6 2b       	or	r26, r22
    2da6:	b7 2b       	or	r27, r23
	i |= (uint32_t) data[7];
    2da8:	28 85       	ldd	r18, Y+8	; 0x08
    2daa:	bc 01       	movw	r22, r24
    2dac:	cd 01       	movw	r24, r26
    2dae:	62 2b       	or	r22, r18
	pid->i = (float) i / 1024.0;
    2db0:	0e 94 a4 22 	call	0x4548	; 0x4548 <__floatsisf>
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	40 e8       	ldi	r20, 0x80	; 128
    2dba:	5a e3       	ldi	r21, 0x3A	; 58
    2dbc:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
    2dc0:	f8 01       	movw	r30, r16
    2dc2:	64 83       	std	Z+4, r22	; 0x04
    2dc4:	75 83       	std	Z+5, r23	; 0x05
    2dc6:	86 83       	std	Z+6, r24	; 0x06
    2dc8:	97 83       	std	Z+7, r25	; 0x07

	d =  (uint32_t) data[8] << 24;
    2dca:	49 85       	ldd	r20, Y+9	; 0x09
    2dcc:	50 e0       	ldi	r21, 0x00	; 0
    2dce:	60 e0       	ldi	r22, 0x00	; 0
    2dd0:	70 e0       	ldi	r23, 0x00	; 0
    2dd2:	74 2f       	mov	r23, r20
    2dd4:	66 27       	eor	r22, r22
    2dd6:	55 27       	eor	r21, r21
    2dd8:	44 27       	eor	r20, r20
	d |= (uint32_t) data[9] << 16;
    2dda:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	a0 e0       	ldi	r26, 0x00	; 0
    2de0:	b0 e0       	ldi	r27, 0x00	; 0
    2de2:	dc 01       	movw	r26, r24
    2de4:	99 27       	eor	r25, r25
    2de6:	88 27       	eor	r24, r24
    2de8:	48 2b       	or	r20, r24
    2dea:	59 2b       	or	r21, r25
    2dec:	6a 2b       	or	r22, r26
    2dee:	7b 2b       	or	r23, r27
	d |= (uint32_t) data[10] << 8;
    2df0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	a0 e0       	ldi	r26, 0x00	; 0
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	ba 2f       	mov	r27, r26
    2dfa:	a9 2f       	mov	r26, r25
    2dfc:	98 2f       	mov	r25, r24
    2dfe:	88 27       	eor	r24, r24
    2e00:	84 2b       	or	r24, r20
    2e02:	95 2b       	or	r25, r21
    2e04:	a6 2b       	or	r26, r22
    2e06:	b7 2b       	or	r27, r23
	d |= (uint32_t) data[11];
    2e08:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e0a:	bc 01       	movw	r22, r24
    2e0c:	cd 01       	movw	r24, r26
    2e0e:	62 2b       	or	r22, r18
	pid->d = (float) d / 1024.0;
    2e10:	0e 94 a4 22 	call	0x4548	; 0x4548 <__floatsisf>
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e8       	ldi	r20, 0x80	; 128
    2e1a:	5a e3       	ldi	r21, 0x3A	; 58
    2e1c:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
    2e20:	f8 01       	movw	r30, r16
    2e22:	60 87       	std	Z+8, r22	; 0x08
    2e24:	71 87       	std	Z+9, r23	; 0x09
    2e26:	82 87       	std	Z+10, r24	; 0x0a
    2e28:	93 87       	std	Z+11, r25	; 0x0b

	maxI =  (uint32_t) data[12] << 24;
    2e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	a0 e0       	ldi	r26, 0x00	; 0
    2e30:	b0 e0       	ldi	r27, 0x00	; 0
    2e32:	78 2f       	mov	r23, r24
    2e34:	66 27       	eor	r22, r22
    2e36:	55 27       	eor	r21, r21
    2e38:	44 27       	eor	r20, r20
	maxI |= (uint32_t) data[13] << 16;
    2e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e3c:	89 2f       	mov	r24, r25
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	a0 e0       	ldi	r26, 0x00	; 0
    2e42:	b0 e0       	ldi	r27, 0x00	; 0
    2e44:	dc 01       	movw	r26, r24
    2e46:	99 27       	eor	r25, r25
    2e48:	88 27       	eor	r24, r24
    2e4a:	84 2b       	or	r24, r20
    2e4c:	95 2b       	or	r25, r21
    2e4e:	a6 2b       	or	r26, r22
    2e50:	b7 2b       	or	r27, r23
	maxI |= (uint32_t) data[14] << 8;
    2e52:	4f 85       	ldd	r20, Y+15	; 0x0f
    2e54:	50 e0       	ldi	r21, 0x00	; 0
    2e56:	60 e0       	ldi	r22, 0x00	; 0
    2e58:	70 e0       	ldi	r23, 0x00	; 0
    2e5a:	76 2f       	mov	r23, r22
    2e5c:	65 2f       	mov	r22, r21
    2e5e:	54 2f       	mov	r21, r20
    2e60:	44 27       	eor	r20, r20
    2e62:	84 2b       	or	r24, r20
    2e64:	95 2b       	or	r25, r21
    2e66:	a6 2b       	or	r26, r22
    2e68:	b7 2b       	or	r27, r23
	maxI |= (uint32_t) data[15];
    2e6a:	28 89       	ldd	r18, Y+16	; 0x10
    2e6c:	82 2b       	or	r24, r18
	pid->maxI = maxI;
    2e6e:	84 87       	std	Z+12, r24	; 0x0c
    2e70:	95 87       	std	Z+13, r25	; 0x0d
    2e72:	a6 87       	std	Z+14, r26	; 0x0e
    2e74:	b7 87       	std	Z+15, r27	; 0x0f

	deadZone =  (uint32_t) data[16] << 24;
    2e76:	89 89       	ldd	r24, Y+17	; 0x11
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	a0 e0       	ldi	r26, 0x00	; 0
    2e7c:	b0 e0       	ldi	r27, 0x00	; 0
    2e7e:	78 2f       	mov	r23, r24
    2e80:	66 27       	eor	r22, r22
    2e82:	55 27       	eor	r21, r21
    2e84:	44 27       	eor	r20, r20
	deadZone |= (uint32_t) data[17] << 16;
    2e86:	9a 89       	ldd	r25, Y+18	; 0x12
    2e88:	89 2f       	mov	r24, r25
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	a0 e0       	ldi	r26, 0x00	; 0
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	dc 01       	movw	r26, r24
    2e92:	99 27       	eor	r25, r25
    2e94:	88 27       	eor	r24, r24
    2e96:	84 2b       	or	r24, r20
    2e98:	95 2b       	or	r25, r21
    2e9a:	a6 2b       	or	r26, r22
    2e9c:	b7 2b       	or	r27, r23
	deadZone |= (uint32_t) data[18] << 8;
    2e9e:	4b 89       	ldd	r20, Y+19	; 0x13
    2ea0:	50 e0       	ldi	r21, 0x00	; 0
    2ea2:	60 e0       	ldi	r22, 0x00	; 0
    2ea4:	70 e0       	ldi	r23, 0x00	; 0
    2ea6:	76 2f       	mov	r23, r22
    2ea8:	65 2f       	mov	r22, r21
    2eaa:	54 2f       	mov	r21, r20
    2eac:	44 27       	eor	r20, r20
    2eae:	84 2b       	or	r24, r20
    2eb0:	95 2b       	or	r25, r21
    2eb2:	a6 2b       	or	r26, r22
    2eb4:	b7 2b       	or	r27, r23
	deadZone |= (uint32_t) data[19];
    2eb6:	2c 89       	ldd	r18, Y+20	; 0x14
    2eb8:	82 2b       	or	r24, r18
	pid->deadZone = deadZone;
    2eba:	80 8b       	std	Z+16, r24	; 0x10
    2ebc:	91 8b       	std	Z+17, r25	; 0x11
    2ebe:	a2 8b       	std	Z+18, r26	; 0x12
    2ec0:	b3 8b       	std	Z+19, r27	; 0x13

	minPos =  (uint32_t) data[20] << 24;
    2ec2:	8d 89       	ldd	r24, Y+21	; 0x15
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	a0 e0       	ldi	r26, 0x00	; 0
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	78 2f       	mov	r23, r24
    2ecc:	66 27       	eor	r22, r22
    2ece:	55 27       	eor	r21, r21
    2ed0:	44 27       	eor	r20, r20
	minPos |= (uint32_t) data[21] << 16;
    2ed2:	9e 89       	ldd	r25, Y+22	; 0x16
    2ed4:	89 2f       	mov	r24, r25
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	a0 e0       	ldi	r26, 0x00	; 0
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	dc 01       	movw	r26, r24
    2ede:	99 27       	eor	r25, r25
    2ee0:	88 27       	eor	r24, r24
    2ee2:	84 2b       	or	r24, r20
    2ee4:	95 2b       	or	r25, r21
    2ee6:	a6 2b       	or	r26, r22
    2ee8:	b7 2b       	or	r27, r23
	minPos |= (uint32_t) data[22] << 8;
    2eea:	4f 89       	ldd	r20, Y+23	; 0x17
    2eec:	50 e0       	ldi	r21, 0x00	; 0
    2eee:	60 e0       	ldi	r22, 0x00	; 0
    2ef0:	70 e0       	ldi	r23, 0x00	; 0
    2ef2:	76 2f       	mov	r23, r22
    2ef4:	65 2f       	mov	r22, r21
    2ef6:	54 2f       	mov	r21, r20
    2ef8:	44 27       	eor	r20, r20
    2efa:	84 2b       	or	r24, r20
    2efc:	95 2b       	or	r25, r21
    2efe:	a6 2b       	or	r26, r22
    2f00:	b7 2b       	or	r27, r23
	minPos |= (uint32_t) data[23];
    2f02:	28 8d       	ldd	r18, Y+24	; 0x18
    2f04:	82 2b       	or	r24, r18
	pid->minPos = minPos;
    2f06:	84 8b       	std	Z+20, r24	; 0x14
    2f08:	95 8b       	std	Z+21, r25	; 0x15
    2f0a:	a6 8b       	std	Z+22, r26	; 0x16
    2f0c:	b7 8b       	std	Z+23, r27	; 0x17

	maxPos =  (uint32_t) data[24] << 24;
    2f0e:	89 8d       	ldd	r24, Y+25	; 0x19
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	a0 e0       	ldi	r26, 0x00	; 0
    2f14:	b0 e0       	ldi	r27, 0x00	; 0
    2f16:	78 2f       	mov	r23, r24
    2f18:	66 27       	eor	r22, r22
    2f1a:	55 27       	eor	r21, r21
    2f1c:	44 27       	eor	r20, r20
	maxPos |= (uint32_t) data[25] << 16;
    2f1e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f20:	89 2f       	mov	r24, r25
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	a0 e0       	ldi	r26, 0x00	; 0
    2f26:	b0 e0       	ldi	r27, 0x00	; 0
    2f28:	dc 01       	movw	r26, r24
    2f2a:	99 27       	eor	r25, r25
    2f2c:	88 27       	eor	r24, r24
    2f2e:	84 2b       	or	r24, r20
    2f30:	95 2b       	or	r25, r21
    2f32:	a6 2b       	or	r26, r22
    2f34:	b7 2b       	or	r27, r23
	maxPos |= (uint32_t) data[26] << 8;
    2f36:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2f38:	50 e0       	ldi	r21, 0x00	; 0
    2f3a:	60 e0       	ldi	r22, 0x00	; 0
    2f3c:	70 e0       	ldi	r23, 0x00	; 0
    2f3e:	76 2f       	mov	r23, r22
    2f40:	65 2f       	mov	r22, r21
    2f42:	54 2f       	mov	r21, r20
    2f44:	44 27       	eor	r20, r20
    2f46:	84 2b       	or	r24, r20
    2f48:	95 2b       	or	r25, r21
    2f4a:	a6 2b       	or	r26, r22
    2f4c:	b7 2b       	or	r27, r23
	maxPos |= (uint32_t) data[27];
    2f4e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2f50:	82 2b       	or	r24, r18
	pid->maxPos = maxPos;
    2f52:	80 8f       	std	Z+24, r24	; 0x18
    2f54:	91 8f       	std	Z+25, r25	; 0x19
    2f56:	a2 8f       	std	Z+26, r26	; 0x1a
    2f58:	b3 8f       	std	Z+27, r27	; 0x1b

	return(NOERROR);
    2f5a:	f1 2c       	mov	r15, r1

}
    2f5c:	8f 2d       	mov	r24, r15
    2f5e:	6c 96       	adiw	r28, 0x1c	; 28
    2f60:	cd bf       	out	0x3d, r28	; 61
    2f62:	de bf       	out	0x3e, r29	; 62
    2f64:	df 91       	pop	r29
    2f66:	cf 91       	pop	r28
    2f68:	1f 91       	pop	r17
    2f6a:	0f 91       	pop	r16
    2f6c:	ff 90       	pop	r15
    2f6e:	08 95       	ret

00002f70 <motorsMoving>:
	}
	return(NOERROR);
}

uint8_t motorsMoving(void)
{
    2f70:	1f 93       	push	r17
    2f72:	cf 93       	push	r28
    2f74:	df 93       	push	r29
    2f76:	00 d0       	rcall	.+0      	; 0x2f78 <motorsMoving+0x8>
    2f78:	00 d0       	rcall	.+0      	; 0x2f7a <motorsMoving+0xa>
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	int32_t encoderSpeed;

	for (i = MOTOR_A; i <= MOTOR_C; i++) {
    2f7e:	10 e8       	ldi	r17, 0x80	; 128
    2f80:	18 c0       	rjmp	.+48     	; 0x2fb2 <motorsMoving+0x42>
		if (get_MOTOR_SPEED(i, &encoderSpeed) == ERROR) {
    2f82:	be 01       	movw	r22, r28
    2f84:	6f 5f       	subi	r22, 0xFF	; 255
    2f86:	7f 4f       	sbci	r23, 0xFF	; 255
    2f88:	81 2f       	mov	r24, r17
    2f8a:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <get_MOTOR_SPEED>
    2f8e:	83 36       	cpi	r24, 0x63	; 99
    2f90:	39 f4       	brne	.+14     	; 0x2fa0 <motorsMoving+0x30>
			printError(ERR_MTR, "motorsMoving: get_MOTOR_SPEED error");
    2f92:	65 e6       	ldi	r22, 0x65	; 101
    2f94:	79 e9       	ldi	r23, 0x99	; 153
    2f96:	86 e3       	ldi	r24, 0x36	; 54
    2f98:	91 e0       	ldi	r25, 0x01	; 1
    2f9a:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
			continue;
    2f9e:	08 c0       	rjmp	.+16     	; 0x2fb0 <motorsMoving+0x40>
		}
		if (encoderSpeed != 0) {
    2fa0:	89 81       	ldd	r24, Y+1	; 0x01
    2fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa4:	ab 81       	ldd	r26, Y+3	; 0x03
    2fa6:	bc 81       	ldd	r27, Y+4	; 0x04
    2fa8:	89 2b       	or	r24, r25
    2faa:	8a 2b       	or	r24, r26
    2fac:	8b 2b       	or	r24, r27
    2fae:	29 f4       	brne	.+10     	; 0x2fba <motorsMoving+0x4a>
uint8_t motorsMoving(void)
{
	uint8_t i;
	int32_t encoderSpeed;

	for (i = MOTOR_A; i <= MOTOR_C; i++) {
    2fb0:	1f 5f       	subi	r17, 0xFF	; 255
    2fb2:	13 38       	cpi	r17, 0x83	; 131
    2fb4:	30 f3       	brcs	.-52     	; 0x2f82 <motorsMoving+0x12>
		if (encoderSpeed != 0) {
			return(YES);
		}
	}

	return(NO);
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
    2fb8:	01 c0       	rjmp	.+2      	; 0x2fbc <motorsMoving+0x4c>
		if (get_MOTOR_SPEED(i, &encoderSpeed) == ERROR) {
			printError(ERR_MTR, "motorsMoving: get_MOTOR_SPEED error");
			continue;
		}
		if (encoderSpeed != 0) {
			return(YES);
    2fba:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	return(NO);

}
    2fbc:	24 96       	adiw	r28, 0x04	; 4
    2fbe:	cd bf       	out	0x3d, r28	; 61
    2fc0:	de bf       	out	0x3e, r29	; 62
    2fc2:	df 91       	pop	r29
    2fc4:	cf 91       	pop	r28
    2fc6:	1f 91       	pop	r17
    2fc8:	08 95       	ret

00002fca <put_FRAM_ENCODERS>:
	Returns:
		ERROR on get_MOTOREncoder or write_FRAM failure
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t put_FRAM_ENCODERS(void)
{
    2fca:	ef 92       	push	r14
    2fcc:	ff 92       	push	r15
    2fce:	0f 93       	push	r16
    2fd0:	1f 93       	push	r17
    2fd2:	cf 93       	push	r28
    2fd4:	df 93       	push	r29
    2fd6:	cd b7       	in	r28, 0x3d	; 61
    2fd8:	de b7       	in	r29, 0x3e	; 62
    2fda:	61 97       	sbiw	r28, 0x11	; 17
    2fdc:	cd bf       	out	0x3d, r28	; 61
    2fde:	de bf       	out	0x3e, r29	; 62

	uint8_t i, tbuf[4], errorFlag, mtraddr[3] = {MOTOR_A, MOTOR_B, MOTOR_C};
    2fe0:	80 e8       	ldi	r24, 0x80	; 128
    2fe2:	8d 83       	std	Y+5, r24	; 0x05
    2fe4:	81 e8       	ldi	r24, 0x81	; 129
    2fe6:	8e 83       	std	Y+6, r24	; 0x06
    2fe8:	82 e8       	ldi	r24, 0x82	; 130
    2fea:	8f 83       	std	Y+7, r24	; 0x07
	uint16_t memaddr[3] = {ENCA_FRAMADDR, ENCB_FRAMADDR, ENCC_FRAMADDR};
    2fec:	86 e0       	ldi	r24, 0x06	; 6
    2fee:	e6 e7       	ldi	r30, 0x76	; 118
    2ff0:	f4 e9       	ldi	r31, 0x94	; 148
    2ff2:	de 01       	movw	r26, r28
    2ff4:	18 96       	adiw	r26, 0x08	; 8
    2ff6:	01 90       	ld	r0, Z+
    2ff8:	0d 92       	st	X+, r0
    2ffa:	8a 95       	dec	r24
    2ffc:	e1 f7       	brne	.-8      	; 0x2ff6 <put_FRAM_ENCODERS+0x2c>
	int32_t encoderValue;

	errorFlag = 0;
    2ffe:	e1 2c       	mov	r14, r1
	for (i = 0; i < 3; i++) {
    3000:	f1 2c       	mov	r15, r1
    3002:	3c c0       	rjmp	.+120    	; 0x307c <put_FRAM_ENCODERS+0xb2>
		if (get_MOTOR_ENCODER(mtraddr[i], &encoderValue) == ERROR) {
    3004:	0f 2d       	mov	r16, r15
    3006:	10 e0       	ldi	r17, 0x00	; 0
    3008:	e5 e0       	ldi	r30, 0x05	; 5
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	ec 0f       	add	r30, r28
    300e:	fd 1f       	adc	r31, r29
    3010:	e0 0f       	add	r30, r16
    3012:	f1 1f       	adc	r31, r17
    3014:	be 01       	movw	r22, r28
    3016:	62 5f       	subi	r22, 0xF2	; 242
    3018:	7f 4f       	sbci	r23, 0xFF	; 255
    301a:	80 81       	ld	r24, Z
    301c:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <get_MOTOR_ENCODER>
    3020:	83 36       	cpi	r24, 0x63	; 99
    3022:	41 f4       	brne	.+16     	; 0x3034 <put_FRAM_ENCODERS+0x6a>
			printError(ERR_MTR, "put_FRAM_ENCODERS: get_MOTOR_ENCODER error");
    3024:	69 e8       	ldi	r22, 0x89	; 137
    3026:	79 e9       	ldi	r23, 0x99	; 153
    3028:	86 e3       	ldi	r24, 0x36	; 54
    302a:	91 e0       	ldi	r25, 0x01	; 1
    302c:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
			errorFlag = 1;
    3030:	ee 24       	eor	r14, r14
    3032:	e3 94       	inc	r14
		}
		tbuf[0] = (encoderValue >> 24) & 0xFF;
    3034:	8e 85       	ldd	r24, Y+14	; 0x0e
    3036:	9f 85       	ldd	r25, Y+15	; 0x0f
    3038:	28 89       	ldd	r18, Y+16	; 0x10
    303a:	39 89       	ldd	r19, Y+17	; 0x11
    303c:	39 83       	std	Y+1, r19	; 0x01
		tbuf[1] = (encoderValue >> 16) & 0xFF;
    303e:	2a 83       	std	Y+2, r18	; 0x02
		tbuf[2] = (encoderValue >> 8) & 0xFF;
    3040:	9b 83       	std	Y+3, r25	; 0x03
		tbuf[3] = encoderValue & 0xFF;
    3042:	8c 83       	std	Y+4, r24	; 0x04
		if (write_FRAM(FRAMTWIADDR, memaddr[i], tbuf, 4) == ERROR) {
    3044:	00 0f       	add	r16, r16
    3046:	11 1f       	adc	r17, r17
    3048:	e1 e0       	ldi	r30, 0x01	; 1
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	ec 0f       	add	r30, r28
    304e:	fd 1f       	adc	r31, r29
    3050:	e0 0f       	add	r30, r16
    3052:	f1 1f       	adc	r31, r17
    3054:	67 81       	ldd	r22, Z+7	; 0x07
    3056:	70 85       	ldd	r23, Z+8	; 0x08
    3058:	24 e0       	ldi	r18, 0x04	; 4
    305a:	ae 01       	movw	r20, r28
    305c:	4f 5f       	subi	r20, 0xFF	; 255
    305e:	5f 4f       	sbci	r21, 0xFF	; 255
    3060:	80 e5       	ldi	r24, 0x50	; 80
    3062:	0e 94 4f 07 	call	0xe9e	; 0xe9e <write_FRAM>
    3066:	83 36       	cpi	r24, 0x63	; 99
    3068:	41 f4       	brne	.+16     	; 0x307a <put_FRAM_ENCODERS+0xb0>
			printError(ERR_FRAM, "put_FRAM_ENCODERS: write_FRAM error");
    306a:	64 eb       	ldi	r22, 0xB4	; 180
    306c:	79 e9       	ldi	r23, 0x99	; 153
    306e:	83 e9       	ldi	r24, 0x93	; 147
    3070:	91 e0       	ldi	r25, 0x01	; 1
    3072:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
			errorFlag = 1;
    3076:	ee 24       	eor	r14, r14
    3078:	e3 94       	inc	r14
	uint8_t i, tbuf[4], errorFlag, mtraddr[3] = {MOTOR_A, MOTOR_B, MOTOR_C};
	uint16_t memaddr[3] = {ENCA_FRAMADDR, ENCB_FRAMADDR, ENCC_FRAMADDR};
	int32_t encoderValue;

	errorFlag = 0;
	for (i = 0; i < 3; i++) {
    307a:	f3 94       	inc	r15
    307c:	82 e0       	ldi	r24, 0x02	; 2
    307e:	8f 15       	cp	r24, r15
    3080:	08 f6       	brcc	.-126    	; 0x3004 <put_FRAM_ENCODERS+0x3a>
		if (write_FRAM(FRAMTWIADDR, memaddr[i], tbuf, 4) == ERROR) {
			printError(ERR_FRAM, "put_FRAM_ENCODERS: write_FRAM error");
			errorFlag = 1;
		}
	}
	if (errorFlag) {
    3082:	ee 20       	and	r14, r14
    3084:	11 f0       	breq	.+4      	; 0x308a <put_FRAM_ENCODERS+0xc0>
		return(ERROR);
    3086:	83 e6       	ldi	r24, 0x63	; 99
    3088:	01 c0       	rjmp	.+2      	; 0x308c <put_FRAM_ENCODERS+0xc2>
	} else {
		return(NOERROR);
    308a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    308c:	61 96       	adiw	r28, 0x11	; 17
    308e:	cd bf       	out	0x3d, r28	; 61
    3090:	de bf       	out	0x3e, r29	; 62
    3092:	df 91       	pop	r29
    3094:	cf 91       	pop	r28
    3096:	1f 91       	pop	r17
    3098:	0f 91       	pop	r16
    309a:	ff 90       	pop	r15
    309c:	ef 90       	pop	r14
    309e:	08 95       	ret

000030a0 <put_MOTOR>:

uint8_t put_MOTOR(uint8_t mtraddr, uint8_t cmd, uint8_t* data, uint8_t nbytes)
{
    30a0:	8f 92       	push	r8
    30a2:	9f 92       	push	r9
    30a4:	bf 92       	push	r11
    30a6:	cf 92       	push	r12
    30a8:	df 92       	push	r13
    30aa:	ef 92       	push	r14
    30ac:	ff 92       	push	r15
    30ae:	0f 93       	push	r16
    30b0:	1f 93       	push	r17
    30b2:	cf 93       	push	r28
    30b4:	df 93       	push	r29
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
    30ba:	b2 2e       	mov	r11, r18
	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
		printError(ERR_MTR, "put_MOTOR: bad ACK");
		return(ERROR);
	}
	return(NOERROR);
}
    30bc:	cd b6       	in	r12, 0x3d	; 61
    30be:	de b6       	in	r13, 0x3e	; 62
	}
}

uint8_t put_MOTOR(uint8_t mtraddr, uint8_t cmd, uint8_t* data, uint8_t nbytes)
{
	uint8_t i, tbuf[nbytes+4];
    30c0:	82 2e       	mov	r8, r18
    30c2:	91 2c       	mov	r9, r1
    30c4:	94 01       	movw	r18, r8
    30c6:	2c 5f       	subi	r18, 0xFC	; 252
    30c8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ca:	74 01       	movw	r14, r8
    30cc:	93 e0       	ldi	r25, 0x03	; 3
    30ce:	e9 0e       	add	r14, r25
    30d0:	f1 1c       	adc	r15, r1
    30d2:	ed b7       	in	r30, 0x3d	; 61
    30d4:	fe b7       	in	r31, 0x3e	; 62
    30d6:	e2 1b       	sub	r30, r18
    30d8:	f3 0b       	sbc	r31, r19
    30da:	ed bf       	out	0x3d, r30	; 61
    30dc:	fe bf       	out	0x3e, r31	; 62
    30de:	0d b7       	in	r16, 0x3d	; 61
    30e0:	1e b7       	in	r17, 0x3e	; 62
    30e2:	0f 5f       	subi	r16, 0xFF	; 255
    30e4:	1f 4f       	sbci	r17, 0xFF	; 255
    30e6:	98 01       	movw	r18, r16
	uint16_t crc;

	recv1_buf.data[0] = 0x00;			// Set up receiving buffer
    30e8:	10 92 35 2a 	sts	0x2A35, r1	; 0x802a35 <recv1_buf>
	recv1_buf.nbytes = 1;
    30ec:	91 e0       	ldi	r25, 0x01	; 1
    30ee:	90 93 35 2b 	sts	0x2B35, r25	; 0x802b35 <recv1_buf+0x100>
	recv1_buf.nxfrd = 0;
    30f2:	10 92 37 2b 	sts	0x2B37, r1	; 0x802b37 <recv1_buf+0x102>
	recv1_buf.done = NO;
    30f6:	10 92 38 2b 	sts	0x2B38, r1	; 0x802b38 <recv1_buf+0x103>

	tbuf[0] = mtraddr;
    30fa:	81 83       	std	Z+1, r24	; 0x01
	tbuf[1] = cmd;
    30fc:	f8 01       	movw	r30, r16
    30fe:	61 83       	std	Z+1, r22	; 0x01
	for (i = 0; i < nbytes; i++) {
    3100:	a0 e0       	ldi	r26, 0x00	; 0
    3102:	0e c0       	rjmp	.+28     	; 0x3120 <put_MOTOR+0x80>
		tbuf[i+2] = data[i];
    3104:	8a 2f       	mov	r24, r26
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	bc 01       	movw	r22, r24
    310a:	6e 5f       	subi	r22, 0xFE	; 254
    310c:	7f 4f       	sbci	r23, 0xFF	; 255
    310e:	fa 01       	movw	r30, r20
    3110:	e8 0f       	add	r30, r24
    3112:	f9 1f       	adc	r31, r25
    3114:	80 81       	ld	r24, Z
    3116:	f9 01       	movw	r30, r18
    3118:	e6 0f       	add	r30, r22
    311a:	f7 1f       	adc	r31, r23
    311c:	80 83       	st	Z, r24
	recv1_buf.nxfrd = 0;
	recv1_buf.done = NO;

	tbuf[0] = mtraddr;
	tbuf[1] = cmd;
	for (i = 0; i < nbytes; i++) {
    311e:	af 5f       	subi	r26, 0xFF	; 255
    3120:	ab 15       	cp	r26, r11
    3122:	80 f3       	brcs	.-32     	; 0x3104 <put_MOTOR+0x64>
		tbuf[i+2] = data[i];
	}
	crc = crc16(tbuf, nbytes+2);
    3124:	f2 e0       	ldi	r31, 0x02	; 2
    3126:	8f 0e       	add	r8, r31
    3128:	91 1c       	adc	r9, r1
    312a:	b4 01       	movw	r22, r8
    312c:	c8 01       	movw	r24, r16
    312e:	0e 94 0c 14 	call	0x2818	; 0x2818 <crc16>
	tbuf[nbytes+2] = (crc >> 8) & 0xFF;
    3132:	f8 01       	movw	r30, r16
    3134:	e8 0d       	add	r30, r8
    3136:	f9 1d       	adc	r31, r9
    3138:	90 83       	st	Z, r25
	tbuf[nbytes+3] = crc & 0xFF;
    313a:	f8 01       	movw	r30, r16
    313c:	ee 0d       	add	r30, r14
    313e:	ff 1d       	adc	r31, r15
    3140:	80 83       	st	Z, r24

	send_USART(1, tbuf, nbytes+4);		// Send the command
    3142:	44 e0       	ldi	r20, 0x04	; 4
    3144:	4b 0d       	add	r20, r11
    3146:	b8 01       	movw	r22, r16
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	0e 94 65 1f 	call	0x3eca	; 0x3eca <send_USART>

	USART1_ticks = 0;
    314e:	10 92 30 2a 	sts	0x2A30, r1	; 0x802a30 <USART1_ticks>
    3152:	10 92 31 2a 	sts	0x2A31, r1	; 0x802a31 <USART1_ticks+0x1>
	start_TCB0(1);						// Start 1 ms USART1_ticks timer
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <start_TCB0>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
    315e:	80 91 38 2b 	lds	r24, 0x2B38	; 0x802b38 <recv1_buf+0x103>
    3162:	81 30       	cpi	r24, 0x01	; 1
    3164:	41 f4       	brne	.+16     	; 0x3176 <put_MOTOR+0xd6>
			stop_TCB0();
    3166:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <stop_TCB0>
			stop_TCB0();
			printError(ERR_MTR, "put_MOTOR: serial timeout");
			return(ERROR);
		}
	}
	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
    316a:	80 91 35 2a 	lds	r24, 0x2A35	; 0x802a35 <recv1_buf>
    316e:	8f 3f       	cpi	r24, 0xFF	; 255
    3170:	91 f4       	brne	.+36     	; 0x3196 <put_MOTOR+0xf6>
		printError(ERR_MTR, "put_MOTOR: bad ACK");
		return(ERROR);
	}
	return(NOERROR);
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	17 c0       	rjmp	.+46     	; 0x31a4 <put_MOTOR+0x104>
	for (;;) {
		if (recv1_buf.done == YES) {	// Reply received
			stop_TCB0();
			break;
		}
		if (USART1_ticks > 50) {
    3176:	80 91 30 2a 	lds	r24, 0x2A30	; 0x802a30 <USART1_ticks>
    317a:	90 91 31 2a 	lds	r25, 0x2A31	; 0x802a31 <USART1_ticks+0x1>
    317e:	c3 97       	sbiw	r24, 0x33	; 51
    3180:	70 f3       	brcs	.-36     	; 0x315e <put_MOTOR+0xbe>
			stop_TCB0();
    3182:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <stop_TCB0>
			printError(ERR_MTR, "put_MOTOR: serial timeout");
    3186:	68 ed       	ldi	r22, 0xD8	; 216
    3188:	79 e9       	ldi	r23, 0x99	; 153
    318a:	86 e3       	ldi	r24, 0x36	; 54
    318c:	91 e0       	ldi	r25, 0x01	; 1
    318e:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
			return(ERROR);
    3192:	83 e6       	ldi	r24, 0x63	; 99
    3194:	07 c0       	rjmp	.+14     	; 0x31a4 <put_MOTOR+0x104>
		}
	}
	if (recv1_buf.data[0] != 0xFF) {	// Bad ack
		printError(ERR_MTR, "put_MOTOR: bad ACK");
    3196:	62 ef       	ldi	r22, 0xF2	; 242
    3198:	79 e9       	ldi	r23, 0x99	; 153
    319a:	86 e3       	ldi	r24, 0x36	; 54
    319c:	91 e0       	ldi	r25, 0x01	; 1
    319e:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		return(ERROR);
    31a2:	83 e6       	ldi	r24, 0x63	; 99
	}
	return(NOERROR);
}
    31a4:	cd be       	out	0x3d, r12	; 61
    31a6:	de be       	out	0x3e, r13	; 62
    31a8:	df 91       	pop	r29
    31aa:	cf 91       	pop	r28
    31ac:	1f 91       	pop	r17
    31ae:	0f 91       	pop	r16
    31b0:	ff 90       	pop	r15
    31b2:	ef 90       	pop	r14
    31b4:	df 90       	pop	r13
    31b6:	cf 90       	pop	r12
    31b8:	bf 90       	pop	r11
    31ba:	9f 90       	pop	r9
    31bc:	8f 90       	pop	r8
    31be:	08 95       	ret

000031c0 <move_MOTOR>:
	return(ERROR);

}

uint8_t move_MOTOR(uint8_t mtraddr, int32_t newPosition)
{
    31c0:	1f 93       	push	r17
    31c2:	cf 93       	push	r28
    31c4:	df 93       	push	r29
    31c6:	cd b7       	in	r28, 0x3d	; 61
    31c8:	de b7       	in	r29, 0x3e	; 62
    31ca:	61 97       	sbiw	r28, 0x11	; 17
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	de bf       	out	0x3e, r29	; 62
	buffer = 0;						// Operation is buffered
	acceleration = ACCELERATION;	// See roboclaw.h
	deceleration = DECELERATION;
	speed = SPEED;

	data[0] = (acceleration >> 24) & 0XFF;
    31d0:	19 82       	std	Y+1, r1	; 0x01
	data[1] = (acceleration >> 16) & 0xFF;
    31d2:	1a 82       	std	Y+2, r1	; 0x02
	data[2] = (acceleration >> 8) & 0xFF;
    31d4:	90 e2       	ldi	r25, 0x20	; 32
    31d6:	9b 83       	std	Y+3, r25	; 0x03
	data[3] = (acceleration) & 0xFF;
    31d8:	1c 82       	std	Y+4, r1	; 0x04
	data[4] = (speed >> 24) & 0xFF;
    31da:	1d 82       	std	Y+5, r1	; 0x05
	data[5] = (speed >> 16) & 0xFF;
    31dc:	1e 82       	std	Y+6, r1	; 0x06
	data[6] = (speed >> 8) & 0xFF;
    31de:	20 e4       	ldi	r18, 0x40	; 64
    31e0:	2f 83       	std	Y+7, r18	; 0x07
	data[7] = (speed) & 0xFF;
    31e2:	18 86       	std	Y+8, r1	; 0x08
	data[8] = (deceleration >> 24) & 0xFF;
    31e4:	19 86       	std	Y+9, r1	; 0x09
	data[9] = (deceleration >> 16) & 0xFF;
    31e6:	1a 86       	std	Y+10, r1	; 0x0a
	data[10] = (deceleration >> 8) & 0xFF;
    31e8:	9b 87       	std	Y+11, r25	; 0x0b
	data[11] = (deceleration) & 0xFF;
    31ea:	1c 86       	std	Y+12, r1	; 0x0c
	data[12] = (newPosition >> 24) & 0xFF;
    31ec:	7d 87       	std	Y+13, r23	; 0x0d
	data[13] = (newPosition >> 16) & 0xFF;
    31ee:	6e 87       	std	Y+14, r22	; 0x0e
	data[14] = (newPosition >> 8) & 0xFF;
    31f0:	5f 87       	std	Y+15, r21	; 0x0f
	data[15] = (newPosition) & 0xFF;
    31f2:	48 8b       	std	Y+16, r20	; 0x10
	data[16] = buffer;
    31f4:	19 8a       	std	Y+17, r1	; 0x11

	if (put_MOTOR(mtraddr, DRIVETO, data, nbytes) == ERROR) {
    31f6:	21 e1       	ldi	r18, 0x11	; 17
    31f8:	ae 01       	movw	r20, r28
    31fa:	4f 5f       	subi	r20, 0xFF	; 255
    31fc:	5f 4f       	sbci	r21, 0xFF	; 255
    31fe:	61 e4       	ldi	r22, 0x41	; 65
    3200:	0e 94 50 18 	call	0x30a0	; 0x30a0 <put_MOTOR>
    3204:	18 2f       	mov	r17, r24
    3206:	83 36       	cpi	r24, 0x63	; 99
    3208:	39 f4       	brne	.+14     	; 0x3218 <move_MOTOR+0x58>
		printError(ERR_MTR, "move_MOTOR: put_MOTOR call error");
    320a:	65 e0       	ldi	r22, 0x05	; 5
    320c:	7a e9       	ldi	r23, 0x9A	; 154
    320e:	86 e3       	ldi	r24, 0x36	; 54
    3210:	91 e0       	ldi	r25, 0x01	; 1
    3212:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		return(ERROR);
    3216:	01 c0       	rjmp	.+2      	; 0x321a <move_MOTOR+0x5a>
	}

	return(NOERROR);
    3218:	10 e0       	ldi	r17, 0x00	; 0

}
    321a:	81 2f       	mov	r24, r17
    321c:	61 96       	adiw	r28, 0x11	; 17
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	de bf       	out	0x3e, r29	; 62
    3222:	df 91       	pop	r29
    3224:	cf 91       	pop	r28
    3226:	1f 91       	pop	r17
    3228:	08 95       	ret

0000322a <move_MOTOR_CMD>:
	Returns:
		ERROR if an unknown motor designator (not A, B, C, or a, b, c) is read
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t move_MOTOR_CMD(uint8_t cstack)
{
    322a:	cf 92       	push	r12
    322c:	df 92       	push	r13
    322e:	ef 92       	push	r14
    3230:	ff 92       	push	r15
    3232:	1f 93       	push	r17
    3234:	cf 93       	push	r28
    3236:	df 93       	push	r29
    3238:	00 d0       	rcall	.+0      	; 0x323a <move_MOTOR_CMD+0x10>
    323a:	00 d0       	rcall	.+0      	; 0x323c <move_MOTOR_CMD+0x12>
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62

	uint8_t motor, controller, retval;
	int32_t newPosition, currentPosition;

	motor = pcmd[cstack].cobject;
    3240:	e8 2e       	mov	r14, r24
    3242:	f1 2c       	mov	r15, r1
    3244:	84 e3       	ldi	r24, 0x34	; 52
    3246:	8e 9d       	mul	r24, r14
    3248:	f0 01       	movw	r30, r0
    324a:	8f 9d       	mul	r24, r15
    324c:	f0 0d       	add	r31, r0
    324e:	11 24       	eor	r1, r1
    3250:	ed 5f       	subi	r30, 0xFD	; 253
    3252:	f7 4d       	sbci	r31, 0xD7	; 215
    3254:	81 81       	ldd	r24, Z+1	; 0x01
	switch(motor) {
    3256:	81 34       	cpi	r24, 0x41	; 65
    3258:	00 f1       	brcs	.+64     	; 0x329a <move_MOTOR_CMD+0x70>
    325a:	84 34       	cpi	r24, 0x44	; 68
    325c:	28 f0       	brcs	.+10     	; 0x3268 <move_MOTOR_CMD+0x3e>
    325e:	9f e9       	ldi	r25, 0x9F	; 159
    3260:	98 0f       	add	r25, r24
    3262:	93 30       	cpi	r25, 0x03	; 3
    3264:	40 f0       	brcs	.+16     	; 0x3276 <move_MOTOR_CMD+0x4c>
    3266:	19 c0       	rjmp	.+50     	; 0x329a <move_MOTOR_CMD+0x70>
		case 'A':
		case 'B':
		case 'C':
			controller = motor + 63;
    3268:	1f e3       	ldi	r17, 0x3F	; 63
    326a:	18 0f       	add	r17, r24
			currentPosition = 0;
    326c:	19 82       	std	Y+1, r1	; 0x01
    326e:	1a 82       	std	Y+2, r1	; 0x02
    3270:	1b 82       	std	Y+3, r1	; 0x03
    3272:	1c 82       	std	Y+4, r1	; 0x04
			break;
    3274:	1a c0       	rjmp	.+52     	; 0x32aa <move_MOTOR_CMD+0x80>

		case 'a':
		case 'b':
		case 'c':
			controller = motor + 31;
    3276:	1f e1       	ldi	r17, 0x1F	; 31
    3278:	18 0f       	add	r17, r24
			retval = get_MOTOR_ENCODER(controller, &currentPosition);
    327a:	be 01       	movw	r22, r28
    327c:	6f 5f       	subi	r22, 0xFF	; 255
    327e:	7f 4f       	sbci	r23, 0xFF	; 255
    3280:	81 2f       	mov	r24, r17
    3282:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <get_MOTOR_ENCODER>
			if (retval == ERROR) {
    3286:	83 36       	cpi	r24, 0x63	; 99
    3288:	81 f4       	brne	.+32     	; 0x32aa <move_MOTOR_CMD+0x80>
				printError(ERR_MTR_ENC_VAL, "move_MOTOR_CMD: get_MOTOR_ENCODER error");
    328a:	66 e2       	ldi	r22, 0x26	; 38
    328c:	7a e9       	ldi	r23, 0x9A	; 154
    328e:	85 e3       	ldi	r24, 0x35	; 53
    3290:	91 e0       	ldi	r25, 0x01	; 1
    3292:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
				return(ERROR);
    3296:	13 e6       	ldi	r17, 0x63	; 99
    3298:	3d c0       	rjmp	.+122    	; 0x3314 <move_MOTOR_CMD+0xea>
			}
			break;

		default:
			printError(ERR_MTR, "move_MOTOR_CMD: unknown motor");
    329a:	6e e4       	ldi	r22, 0x4E	; 78
    329c:	7a e9       	ldi	r23, 0x9A	; 154
    329e:	86 e3       	ldi	r24, 0x36	; 54
    32a0:	91 e0       	ldi	r25, 0x01	; 1
    32a2:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
			return(ERROR);
    32a6:	13 e6       	ldi	r17, 0x63	; 99
    32a8:	35 c0       	rjmp	.+106    	; 0x3314 <move_MOTOR_CMD+0xea>
			break;	
	}

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
    32aa:	84 e3       	ldi	r24, 0x34	; 52
    32ac:	8e 9d       	mul	r24, r14
    32ae:	f0 01       	movw	r30, r0
    32b0:	8f 9d       	mul	r24, r15
    32b2:	f0 0d       	add	r31, r0
    32b4:	11 24       	eor	r1, r1
    32b6:	ed 5f       	subi	r30, 0xFD	; 253
    32b8:	f7 4d       	sbci	r31, 0xD7	; 215
    32ba:	82 81       	ldd	r24, Z+2	; 0x02
    32bc:	88 23       	and	r24, r24
    32be:	39 f1       	breq	.+78     	; 0x330e <move_MOTOR_CMD+0xe4>
		return(NOERROR);
	}

	newPosition = currentPosition + (atol(pcmd[cstack].cvalue) * ENC_COUNTS_PER_MICRON);
    32c0:	24 e3       	ldi	r18, 0x34	; 52
    32c2:	2e 9d       	mul	r18, r14
    32c4:	c0 01       	movw	r24, r0
    32c6:	2f 9d       	mul	r18, r15
    32c8:	90 0d       	add	r25, r0
    32ca:	11 24       	eor	r1, r1
    32cc:	8b 5f       	subi	r24, 0xFB	; 251
    32ce:	97 4d       	sbci	r25, 0xD7	; 215
    32d0:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <atol>
    32d4:	9b 01       	movw	r18, r22
    32d6:	ac 01       	movw	r20, r24
    32d8:	ac e0       	ldi	r26, 0x0C	; 12
    32da:	b1 e0       	ldi	r27, 0x01	; 1
    32dc:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <__muluhisi3>
    32e0:	c9 80       	ldd	r12, Y+1	; 0x01
    32e2:	da 80       	ldd	r13, Y+2	; 0x02
    32e4:	eb 80       	ldd	r14, Y+3	; 0x03
    32e6:	fc 80       	ldd	r15, Y+4	; 0x04
    32e8:	ab 01       	movw	r20, r22
    32ea:	bc 01       	movw	r22, r24
    32ec:	4c 0d       	add	r20, r12
    32ee:	5d 1d       	adc	r21, r13
    32f0:	6e 1d       	adc	r22, r14
    32f2:	7f 1d       	adc	r23, r15

	if (move_MOTOR(controller, newPosition) == ERROR) {
    32f4:	81 2f       	mov	r24, r17
    32f6:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <move_MOTOR>
    32fa:	18 2f       	mov	r17, r24
    32fc:	83 36       	cpi	r24, 0x63	; 99
    32fe:	49 f4       	brne	.+18     	; 0x3312 <move_MOTOR_CMD+0xe8>
		printError(ERR_MTR, "move_MOTOR_CMD: move_MOTOR call error");
    3300:	6c e6       	ldi	r22, 0x6C	; 108
    3302:	7a e9       	ldi	r23, 0x9A	; 154
    3304:	86 e3       	ldi	r24, 0x36	; 54
    3306:	91 e0       	ldi	r25, 0x01	; 1
    3308:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		return(ERROR);
    330c:	03 c0       	rjmp	.+6      	; 0x3314 <move_MOTOR_CMD+0xea>
			return(ERROR);
			break;	
	}

	if (pcmd[cstack].cvalue[0] == '\0') {	// Don't do anything on null distance
		return(NOERROR);
    330e:	10 e0       	ldi	r17, 0x00	; 0
    3310:	01 c0       	rjmp	.+2      	; 0x3314 <move_MOTOR_CMD+0xea>
	if (move_MOTOR(controller, newPosition) == ERROR) {
		printError(ERR_MTR, "move_MOTOR_CMD: move_MOTOR call error");
		return(ERROR);
	}

	return(ERROR);
    3312:	13 e6       	ldi	r17, 0x63	; 99

}
    3314:	81 2f       	mov	r24, r17
    3316:	24 96       	adiw	r28, 0x04	; 4
    3318:	cd bf       	out	0x3d, r28	; 61
    331a:	de bf       	out	0x3e, r29	; 62
    331c:	df 91       	pop	r29
    331e:	cf 91       	pop	r28
    3320:	1f 91       	pop	r17
    3322:	ff 90       	pop	r15
    3324:	ef 90       	pop	r14
    3326:	df 90       	pop	r13
    3328:	cf 90       	pop	r12
    332a:	08 95       	ret

0000332c <put_MOTOR_ENCODER>:
	}
	return(NOERROR);
}

uint8_t put_MOTOR_ENCODER(uint8_t mtraddr, int32_t encoderValue)
{
    332c:	1f 93       	push	r17
    332e:	cf 93       	push	r28
    3330:	df 93       	push	r29
    3332:	00 d0       	rcall	.+0      	; 0x3334 <put_MOTOR_ENCODER+0x8>
    3334:	00 d0       	rcall	.+0      	; 0x3336 <put_MOTOR_ENCODER+0xa>
    3336:	cd b7       	in	r28, 0x3d	; 61
    3338:	de b7       	in	r29, 0x3e	; 62

	uint8_t data[4];
	
	data[0] = (encoderValue >> 24) & 0xFF;
    333a:	79 83       	std	Y+1, r23	; 0x01
	data[1] = (encoderValue >> 16) & 0xFF;
    333c:	6a 83       	std	Y+2, r22	; 0x02
	data[2] = (encoderValue >> 8) & 0xFF;
    333e:	5b 83       	std	Y+3, r21	; 0x03
	data[3] = encoderValue & 0xFF;
    3340:	4c 83       	std	Y+4, r20	; 0x04
	if (put_MOTOR(mtraddr, PUTENCODER, data, 4) == ERROR) {
    3342:	24 e0       	ldi	r18, 0x04	; 4
    3344:	ae 01       	movw	r20, r28
    3346:	4f 5f       	subi	r20, 0xFF	; 255
    3348:	5f 4f       	sbci	r21, 0xFF	; 255
    334a:	66 e1       	ldi	r22, 0x16	; 22
    334c:	0e 94 50 18 	call	0x30a0	; 0x30a0 <put_MOTOR>
    3350:	18 2f       	mov	r17, r24
    3352:	83 36       	cpi	r24, 0x63	; 99
    3354:	39 f4       	brne	.+14     	; 0x3364 <put_MOTOR_ENCODER+0x38>
		printError(ERR_MTR, "put_MOTOR_ENCODER: put_MOTOR error");
    3356:	62 e9       	ldi	r22, 0x92	; 146
    3358:	7a e9       	ldi	r23, 0x9A	; 154
    335a:	86 e3       	ldi	r24, 0x36	; 54
    335c:	91 e0       	ldi	r25, 0x01	; 1
    335e:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		return(ERROR);
    3362:	01 c0       	rjmp	.+2      	; 0x3366 <put_MOTOR_ENCODER+0x3a>
	}
	return(NOERROR);
    3364:	10 e0       	ldi	r17, 0x00	; 0

}
    3366:	81 2f       	mov	r24, r17
    3368:	24 96       	adiw	r28, 0x04	; 4
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	de bf       	out	0x3e, r29	; 62
    336e:	df 91       	pop	r29
    3370:	cf 91       	pop	r28
    3372:	1f 91       	pop	r17
    3374:	08 95       	ret

00003376 <init_MOTORS>:
		NOERROR otherwise

ADD ERROR CHECKS?
------------------------------------------------------------------------------*/
uint8_t init_MOTORS(void)
{
    3376:	1f 93       	push	r17
    3378:	cf 93       	push	r28
    337a:	df 93       	push	r29
    337c:	00 d0       	rcall	.+0      	; 0x337e <init_MOTORS+0x8>
    337e:	00 d0       	rcall	.+0      	; 0x3380 <init_MOTORS+0xa>
    3380:	cd b7       	in	r28, 0x3d	; 61
    3382:	de b7       	in	r29, 0x3e	; 62
    3384:	2a e6       	ldi	r18, 0x6A	; 106
    3386:	84 e0       	ldi	r24, 0x04	; 4
    3388:	91 e0       	ldi	r25, 0x01	; 1
    338a:	21 50       	subi	r18, 0x01	; 1
    338c:	80 40       	sbci	r24, 0x00	; 0
    338e:	90 40       	sbci	r25, 0x00	; 0
    3390:	e1 f7       	brne	.-8      	; 0x338a <init_MOTORS+0x14>
    3392:	00 c0       	rjmp	.+0      	; 0x3394 <init_MOTORS+0x1e>

	uint8_t controller;
	int32_t encoderValue;

	_delay_ms(100);	// 50 seems to work
	timerSAVEENCODER = 0;
    3394:	10 92 32 2a 	sts	0x2A32, r1	; 0x802a32 <timerSAVEENCODER>
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;
    3398:	8b e0       	ldi	r24, 0x0B	; 11
    339a:	80 93 2d 2a 	sts	0x2A2D, r24	; 0x802a2d <timeoutSAVEENCODER>
	for (controller = MOTOR_A; controller <= MOTOR_C; controller++) {
    339e:	10 e8       	ldi	r17, 0x80	; 128
    33a0:	0e c0       	rjmp	.+28     	; 0x33be <init_MOTORS+0x48>
		get_FRAM_MOTOR_ENCODER(controller, &encoderValue);
    33a2:	be 01       	movw	r22, r28
    33a4:	6f 5f       	subi	r22, 0xFF	; 255
    33a6:	7f 4f       	sbci	r23, 0xFF	; 255
    33a8:	81 2f       	mov	r24, r17
    33aa:	0e 94 31 14 	call	0x2862	; 0x2862 <get_FRAM_MOTOR_ENCODER>
		put_MOTOR_ENCODER(controller, encoderValue);
    33ae:	49 81       	ldd	r20, Y+1	; 0x01
    33b0:	5a 81       	ldd	r21, Y+2	; 0x02
    33b2:	6b 81       	ldd	r22, Y+3	; 0x03
    33b4:	7c 81       	ldd	r23, Y+4	; 0x04
    33b6:	81 2f       	mov	r24, r17
    33b8:	0e 94 96 19 	call	0x332c	; 0x332c <put_MOTOR_ENCODER>
	int32_t encoderValue;

	_delay_ms(100);	// 50 seems to work
	timerSAVEENCODER = 0;
	timeoutSAVEENCODER = SAVEENCODERFREQUENCY;
	for (controller = MOTOR_A; controller <= MOTOR_C; controller++) {
    33bc:	1f 5f       	subi	r17, 0xFF	; 255
    33be:	13 38       	cpi	r17, 0x83	; 131
    33c0:	80 f3       	brcs	.-32     	; 0x33a2 <init_MOTORS+0x2c>
		get_FRAM_MOTOR_ENCODER(controller, &encoderValue);
		put_MOTOR_ENCODER(controller, encoderValue);
	}
	return(NOERROR);
}
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	24 96       	adiw	r28, 0x04	; 4
    33c6:	cd bf       	out	0x3d, r28	; 61
    33c8:	de bf       	out	0x3e, r29	; 62
    33ca:	df 91       	pop	r29
    33cc:	cf 91       	pop	r28
    33ce:	1f 91       	pop	r17
    33d0:	08 95       	ret

000033d2 <put_MOTOR_PID>:
	return(NOERROR);

}

uint8_t put_MOTOR_PID(uint8_t mtraddr, PID pid)
{
    33d2:	9f 92       	push	r9
    33d4:	af 92       	push	r10
    33d6:	bf 92       	push	r11
    33d8:	cf 92       	push	r12
    33da:	df 92       	push	r13
    33dc:	ef 92       	push	r14
    33de:	ff 92       	push	r15
    33e0:	0f 93       	push	r16
    33e2:	1f 93       	push	r17
    33e4:	cf 93       	push	r28
    33e6:	df 93       	push	r29
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
    33ec:	6c 97       	sbiw	r28, 0x1c	; 28
    33ee:	cd bf       	out	0x3d, r28	; 61
    33f0:	de bf       	out	0x3e, r29	; 62
    33f2:	18 2f       	mov	r17, r24
	uint8_t data[28];
	int32_t p, i, d;

	p = (int32_t) (pid.p * 1024.0);
    33f4:	6a a5       	ldd	r22, Y+42	; 0x2a
    33f6:	7b a5       	ldd	r23, Y+43	; 0x2b
    33f8:	8c a5       	ldd	r24, Y+44	; 0x2c
    33fa:	9d a5       	ldd	r25, Y+45	; 0x2d
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e8       	ldi	r20, 0x80	; 128
    3402:	54 e4       	ldi	r21, 0x44	; 68
    3404:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
    3408:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <__fixsfsi>
    340c:	c6 2e       	mov	r12, r22
    340e:	b7 2e       	mov	r11, r23
    3410:	a8 2e       	mov	r10, r24
    3412:	99 2e       	mov	r9, r25
	i = (int32_t) (pid.i * 1024.0);
    3414:	6e a5       	ldd	r22, Y+46	; 0x2e
    3416:	7f a5       	ldd	r23, Y+47	; 0x2f
    3418:	88 a9       	ldd	r24, Y+48	; 0x30
    341a:	99 a9       	ldd	r25, Y+49	; 0x31
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	40 e8       	ldi	r20, 0x80	; 128
    3422:	54 e4       	ldi	r21, 0x44	; 68
    3424:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
    3428:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <__fixsfsi>
    342c:	06 2f       	mov	r16, r22
    342e:	f7 2e       	mov	r15, r23
    3430:	e8 2e       	mov	r14, r24
    3432:	d9 2e       	mov	r13, r25
	d = (int32_t) (pid.d * 1024.0);
    3434:	6a a9       	ldd	r22, Y+50	; 0x32
    3436:	7b a9       	ldd	r23, Y+51	; 0x33
    3438:	8c a9       	ldd	r24, Y+52	; 0x34
    343a:	9d a9       	ldd	r25, Y+53	; 0x35
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	40 e8       	ldi	r20, 0x80	; 128
    3442:	54 e4       	ldi	r21, 0x44	; 68
    3444:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__mulsf3>
    3448:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <__fixsfsi>

	data[0] = (d >> 24) & 0xFF;
    344c:	99 83       	std	Y+1, r25	; 0x01
	data[1] = (d >> 16) & 0xFF;
    344e:	8a 83       	std	Y+2, r24	; 0x02
	data[2] = (d >> 8) & 0xFF;
    3450:	7b 83       	std	Y+3, r23	; 0x03
	data[3] = d & 0xFF;
    3452:	6c 83       	std	Y+4, r22	; 0x04
	data[4] = (p >> 24) & 0xFF;
    3454:	9d 82       	std	Y+5, r9	; 0x05
	data[5] = (p >> 16) & 0xFF;
    3456:	ae 82       	std	Y+6, r10	; 0x06
	data[6] = (p >> 8) & 0xFF;
    3458:	bf 82       	std	Y+7, r11	; 0x07
	data[7] = p & 0xFF;
    345a:	c8 86       	std	Y+8, r12	; 0x08
	data[8] = (i >> 24) & 0xFF;
    345c:	d9 86       	std	Y+9, r13	; 0x09
	data[9] = (i >> 16) & 0xFF;
    345e:	ea 86       	std	Y+10, r14	; 0x0a
	data[10] = (i >> 8) & 0xFF;
    3460:	fb 86       	std	Y+11, r15	; 0x0b
	data[11] = i & 0xFF;
    3462:	0c 87       	std	Y+12, r16	; 0x0c
	data[12] = (pid.maxI >> 24) & 0xFF;
    3464:	8e a9       	ldd	r24, Y+54	; 0x36
    3466:	9f a9       	ldd	r25, Y+55	; 0x37
    3468:	28 ad       	ldd	r18, Y+56	; 0x38
    346a:	39 ad       	ldd	r19, Y+57	; 0x39
    346c:	3d 87       	std	Y+13, r19	; 0x0d
	data[13] = (pid.maxI >> 16) & 0xFF;
    346e:	2e 87       	std	Y+14, r18	; 0x0e
	data[14] = (pid.maxI >> 8) & 0xFF;
    3470:	9f 87       	std	Y+15, r25	; 0x0f
	data[15] = pid.maxI & 0xFF;
    3472:	88 8b       	std	Y+16, r24	; 0x10
	data[16] = (pid.deadZone >> 24) & 0xFF;
    3474:	8a ad       	ldd	r24, Y+58	; 0x3a
    3476:	9b ad       	ldd	r25, Y+59	; 0x3b
    3478:	2c ad       	ldd	r18, Y+60	; 0x3c
    347a:	3d ad       	ldd	r19, Y+61	; 0x3d
    347c:	39 8b       	std	Y+17, r19	; 0x11
	data[17] = (pid.deadZone >> 16) & 0xFF;
    347e:	2a 8b       	std	Y+18, r18	; 0x12
	data[18] = (pid.deadZone >> 8) & 0xFF;
    3480:	9b 8b       	std	Y+19, r25	; 0x13
	data[19] = pid.deadZone & 0xFF;
    3482:	8c 8b       	std	Y+20, r24	; 0x14
	data[20] = (pid.minPos >> 24) & 0xFF;
    3484:	8e ad       	ldd	r24, Y+62	; 0x3e
    3486:	9f ad       	ldd	r25, Y+63	; 0x3f
    3488:	21 96       	adiw	r28, 0x01	; 1
    348a:	2f ad       	ldd	r18, Y+63	; 0x3f
    348c:	21 97       	sbiw	r28, 0x01	; 1
    348e:	22 96       	adiw	r28, 0x02	; 2
    3490:	3f ad       	ldd	r19, Y+63	; 0x3f
    3492:	22 97       	sbiw	r28, 0x02	; 2
    3494:	3d 8b       	std	Y+21, r19	; 0x15
	data[21] = (pid.minPos >> 16) & 0xFF;
    3496:	2e 8b       	std	Y+22, r18	; 0x16
	data[22] = (pid.minPos >> 8) & 0xFF;
    3498:	9f 8b       	std	Y+23, r25	; 0x17
	data[23] = pid.minPos & 0xFF;
    349a:	88 8f       	std	Y+24, r24	; 0x18
	data[24] = (pid.maxPos >> 24) & 0xFF;
    349c:	23 96       	adiw	r28, 0x03	; 3
    349e:	8f ad       	ldd	r24, Y+63	; 0x3f
    34a0:	23 97       	sbiw	r28, 0x03	; 3
    34a2:	24 96       	adiw	r28, 0x04	; 4
    34a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    34a6:	24 97       	sbiw	r28, 0x04	; 4
    34a8:	25 96       	adiw	r28, 0x05	; 5
    34aa:	2f ad       	ldd	r18, Y+63	; 0x3f
    34ac:	25 97       	sbiw	r28, 0x05	; 5
    34ae:	26 96       	adiw	r28, 0x06	; 6
    34b0:	3f ad       	ldd	r19, Y+63	; 0x3f
    34b2:	26 97       	sbiw	r28, 0x06	; 6
    34b4:	39 8f       	std	Y+25, r19	; 0x19
	data[25] = (pid.maxPos >> 16) & 0xFF;
    34b6:	2a 8f       	std	Y+26, r18	; 0x1a
	data[26] = (pid.maxPos >> 8) & 0xFF;
    34b8:	9b 8f       	std	Y+27, r25	; 0x1b
	data[27] = pid.maxPos & 0xFF;
    34ba:	8c 8f       	std	Y+28, r24	; 0x1c

	if (put_MOTOR(mtraddr, SETPID, data, 28) == ERROR) {
    34bc:	2c e1       	ldi	r18, 0x1C	; 28
    34be:	ae 01       	movw	r20, r28
    34c0:	4f 5f       	subi	r20, 0xFF	; 255
    34c2:	5f 4f       	sbci	r21, 0xFF	; 255
    34c4:	6d e3       	ldi	r22, 0x3D	; 61
    34c6:	81 2f       	mov	r24, r17
    34c8:	0e 94 50 18 	call	0x30a0	; 0x30a0 <put_MOTOR>
    34cc:	18 2f       	mov	r17, r24
    34ce:	83 36       	cpi	r24, 0x63	; 99
    34d0:	39 f4       	brne	.+14     	; 0x34e0 <put_MOTOR_PID+0x10e>
		printError(ERR_MTR, "put_MOTOR_PID: put_MOTOR error");
    34d2:	65 eb       	ldi	r22, 0xB5	; 181
    34d4:	7a e9       	ldi	r23, 0x9A	; 154
    34d6:	86 e3       	ldi	r24, 0x36	; 54
    34d8:	91 e0       	ldi	r25, 0x01	; 1
    34da:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		return(ERROR);
    34de:	01 c0       	rjmp	.+2      	; 0x34e2 <put_MOTOR_PID+0x110>
	}
	return(NOERROR);
    34e0:	10 e0       	ldi	r17, 0x00	; 0
}
    34e2:	81 2f       	mov	r24, r17
    34e4:	6c 96       	adiw	r28, 0x1c	; 28
    34e6:	cd bf       	out	0x3d, r28	; 61
    34e8:	de bf       	out	0x3e, r29	; 62
    34ea:	df 91       	pop	r29
    34ec:	cf 91       	pop	r28
    34ee:	1f 91       	pop	r17
    34f0:	0f 91       	pop	r16
    34f2:	ff 90       	pop	r15
    34f4:	ef 90       	pop	r14
    34f6:	df 90       	pop	r13
    34f8:	cf 90       	pop	r12
    34fa:	bf 90       	pop	r11
    34fc:	af 90       	pop	r10
    34fe:	9f 90       	pop	r9
    3500:	08 95       	ret

00003502 <init_RTC>:
			between interrupts. ticksRTC = 30719 generates an interrupt
			every minute. ticksRTC = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticksRTC)
{
    3502:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    3504:	e0 e6       	ldi	r30, 0x60	; 96
    3506:	f0 e0       	ldi	r31, 0x00	; 0
    3508:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    350a:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    350c:	88 ed       	ldi	r24, 0xD8	; 216
    350e:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    3510:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    3512:	01 c0       	rjmp	.+2      	; 0x3516 <init_RTC+0x14>
		asm("nop");
    3514:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    3516:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    351a:	96 fd       	sbrc	r25, 6
    351c:	fb cf       	rjmp	.-10     	; 0x3514 <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    351e:	e0 e6       	ldi	r30, 0x60	; 96
    3520:	f0 e0       	ldi	r31, 0x00	; 0
    3522:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    3524:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    3526:	28 ed       	ldi	r18, 0xD8	; 216
    3528:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    352a:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    352c:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    352e:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    3530:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    3532:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    3534:	01 c0       	rjmp	.+2      	; 0x3538 <init_RTC+0x36>
		asm("nop");
    3536:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    3538:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    353c:	91 11       	cpse	r25, r1
    353e:	fb cf       	rjmp	.-10     	; 0x3536 <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticksRTC;
    3540:	e0 e4       	ldi	r30, 0x40	; 64
    3542:	f1 e0       	ldi	r31, 0x01	; 1
    3544:	42 87       	std	Z+10, r20	; 0x0a
    3546:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    3548:	82 e0       	ldi	r24, 0x02	; 2
    354a:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    354c:	85 81       	ldd	r24, Z+5	; 0x05
    354e:	81 60       	ori	r24, 0x01	; 1
    3550:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz) and set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    3552:	81 eb       	ldi	r24, 0xB1	; 177
    3554:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable interrupt on overflow
    3556:	82 81       	ldd	r24, Z+2	; 0x02
    3558:	81 60       	ori	r24, 0x01	; 1
    355a:	82 83       	std	Z+2, r24	; 0x02
    355c:	08 95       	ret

0000355e <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    355e:	1f 92       	push	r1
    3560:	0f 92       	push	r0
    3562:	0f b6       	in	r0, 0x3f	; 63
    3564:	0f 92       	push	r0
    3566:	11 24       	eor	r1, r1
    3568:	8f 93       	push	r24
    356a:	9f 93       	push	r25

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    356c:	81 e0       	ldi	r24, 0x01	; 1
    356e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	timerOLED++;					// Turn off the OLED display
    3572:	80 91 0c 2a 	lds	r24, 0x2A0C	; 0x802a0c <timerOLED>
    3576:	90 91 0d 2a 	lds	r25, 0x2A0D	; 0x802a0d <timerOLED+0x1>
    357a:	01 96       	adiw	r24, 0x01	; 1
    357c:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <timerOLED>
    3580:	90 93 0d 2a 	sts	0x2A0D, r25	; 0x802a0d <timerOLED+0x1>
	toggle_LED;						// Blink the light
    3584:	80 e2       	ldi	r24, 0x20	; 32
    3586:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>
	timerSAVEENCODER++;				// Save the motor encoder values
    358a:	80 91 32 2a 	lds	r24, 0x2A32	; 0x802a32 <timerSAVEENCODER>
    358e:	8f 5f       	subi	r24, 0xFF	; 255
    3590:	80 93 32 2a 	sts	0x2A32, r24	; 0x802a32 <timerSAVEENCODER>

}
    3594:	9f 91       	pop	r25
    3596:	8f 91       	pop	r24
    3598:	0f 90       	pop	r0
    359a:	0f be       	out	0x3f, r0	; 63
    359c:	0f 90       	pop	r0
    359e:	1f 90       	pop	r1
    35a0:	18 95       	reti

000035a2 <set>:
	Returns:
		ERROR if an invalid object was requested.
		NOERROR otherwise
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    35a2:	cf 93       	push	r28
    35a4:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	24 e3       	ldi	r18, 0x34	; 52
    35aa:	28 9f       	mul	r18, r24
    35ac:	f0 01       	movw	r30, r0
    35ae:	29 9f       	mul	r18, r25
    35b0:	f0 0d       	add	r31, r0
    35b2:	11 24       	eor	r1, r1
    35b4:	ed 5f       	subi	r30, 0xFD	; 253
    35b6:	f7 4d       	sbci	r31, 0xD7	; 215
    35b8:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    35ba:	24 37       	cpi	r18, 0x74	; 116
    35bc:	29 f5       	brne	.+74     	; 0x3608 <set+0x66>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    35be:	24 e3       	ldi	r18, 0x34	; 52
    35c0:	28 9f       	mul	r18, r24
    35c2:	e0 01       	movw	r28, r0
    35c4:	29 9f       	mul	r18, r25
    35c6:	d0 0d       	add	r29, r0
    35c8:	11 24       	eor	r1, r1
    35ca:	cb 5f       	subi	r28, 0xFB	; 251
    35cc:	d7 4d       	sbci	r29, 0xD7	; 215
    35ce:	fe 01       	movw	r30, r28
    35d0:	01 90       	ld	r0, Z+
    35d2:	00 20       	and	r0, r0
    35d4:	e9 f7       	brne	.-6      	; 0x35d0 <set+0x2e>
    35d6:	31 97       	sbiw	r30, 0x01	; 1
    35d8:	ec 1b       	sub	r30, r28
    35da:	fd 0b       	sbc	r31, r29
    35dc:	73 97       	sbiw	r30, 0x13	; 19
    35de:	41 f0       	breq	.+16     	; 0x35f0 <set+0x4e>
				printError(ERR_SETTIME, "set: bad time format");
    35e0:	64 ed       	ldi	r22, 0xD4	; 212
    35e2:	7a e9       	ldi	r23, 0x9A	; 154
    35e4:	8a e5       	ldi	r24, 0x5A	; 90
    35e6:	92 e0       	ldi	r25, 0x02	; 2
    35e8:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
				return(ERROR);
    35ec:	83 e6       	ldi	r24, 0x63	; 99
    35ee:	13 c0       	rjmp	.+38     	; 0x3616 <set+0x74>
			}
			put_time(pcmd[cstack].cvalue);
    35f0:	ce 01       	movw	r24, r28
    35f2:	0e 94 2b 06 	call	0xc56	; 0xc56 <put_time>
			write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    35f6:	24 e1       	ldi	r18, 0x14	; 20
    35f8:	ae 01       	movw	r20, r28
    35fa:	60 e0       	ldi	r22, 0x00	; 0
    35fc:	70 e0       	ldi	r23, 0x00	; 0
    35fe:	80 e5       	ldi	r24, 0x50	; 80
    3600:	0e 94 4f 07 	call	0xe9e	; 0xe9e <write_FRAM>

		default:
			printError(ERR_SET, "set what?");
			return(ERROR);
	}
	return(NOERROR);
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	07 c0       	rjmp	.+14     	; 0x3616 <set+0x74>
			put_time(pcmd[cstack].cvalue);
			write_FRAM(FRAMTWIADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			printError(ERR_SET, "set what?");
    3608:	69 ee       	ldi	r22, 0xE9	; 233
    360a:	7a e9       	ldi	r23, 0x9A	; 154
    360c:	89 e5       	ldi	r24, 0x59	; 89
    360e:	92 e0       	ldi	r25, 0x02	; 2
    3610:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
			return(ERROR);
    3614:	83 e6       	ldi	r24, 0x63	; 99
	}
	return(NOERROR);
}
    3616:	df 91       	pop	r29
    3618:	cf 91       	pop	r28
    361a:	08 95       	ret

0000361c <get_temperature>:
	point for the actual devices.

	The signal is 1.5E-3 mV/K with a 1500 kOhm dropping resistor.
------------------------------------------------------------------------------*/
float get_temperature(uint8_t sensor)
{
    361c:	cf 93       	push	r28
    361e:	df 93       	push	r29
    3620:	00 d0       	rcall	.+0      	; 0x3622 <get_temperature+0x6>
    3622:	00 d0       	rcall	.+0      	; 0x3624 <get_temperature+0x8>
    3624:	cd b7       	in	r28, 0x3d	; 61
    3626:	de b7       	in	r29, 0x3e	; 62

	float temperature;

	switch (sensor) {
    3628:	83 30       	cpi	r24, 0x03	; 3
    362a:	18 f0       	brcs	.+6      	; 0x3632 <get_temperature+0x16>
    362c:	83 30       	cpi	r24, 0x03	; 3
    362e:	39 f0       	breq	.+14     	; 0x363e <get_temperature+0x22>
    3630:	0b c0       	rjmp	.+22     	; 0x3648 <get_temperature+0x2c>
		case 0:
		case 1:
		case 2:
			read_AD590(sensor, &temperature);
    3632:	be 01       	movw	r22, r28
    3634:	6f 5f       	subi	r22, 0xFF	; 255
    3636:	7f 4f       	sbci	r23, 0xFF	; 255
    3638:	0e 94 47 01 	call	0x28e	; 0x28e <read_AD590>
			break;
    363c:	0d c0       	rjmp	.+26     	; 0x3658 <get_temperature+0x3c>
		case 3:
			read_MCP9808(&temperature);
    363e:	ce 01       	movw	r24, r28
    3640:	01 96       	adiw	r24, 0x01	; 1
    3642:	0e 94 46 09 	call	0x128c	; 0x128c <read_MCP9808>
			break;
    3646:	08 c0       	rjmp	.+16     	; 0x3658 <get_temperature+0x3c>
		default:
			temperature = -666.0;
    3648:	80 e0       	ldi	r24, 0x00	; 0
    364a:	90 e8       	ldi	r25, 0x80	; 128
    364c:	a6 e2       	ldi	r26, 0x26	; 38
    364e:	b4 ec       	ldi	r27, 0xC4	; 196
    3650:	89 83       	std	Y+1, r24	; 0x01
    3652:	9a 83       	std	Y+2, r25	; 0x02
    3654:	ab 83       	std	Y+3, r26	; 0x03
    3656:	bc 83       	std	Y+4, r27	; 0x04
			break;
	}

	return(temperature);
    3658:	69 81       	ldd	r22, Y+1	; 0x01
    365a:	7a 81       	ldd	r23, Y+2	; 0x02
    365c:	8b 81       	ldd	r24, Y+3	; 0x03
    365e:	9c 81       	ldd	r25, Y+4	; 0x04

}
    3660:	24 96       	adiw	r28, 0x04	; 4
    3662:	cd bf       	out	0x3d, r28	; 61
    3664:	de bf       	out	0x3e, r29	; 62
    3666:	df 91       	pop	r29
    3668:	cf 91       	pop	r28
    366a:	08 95       	ret

0000366c <testroutine>:

#include "commands.h"
#include "errors.h"

void testroutine(void)
{
    366c:	2f 92       	push	r2
    366e:	3f 92       	push	r3
    3670:	4f 92       	push	r4
    3672:	5f 92       	push	r5
    3674:	6f 92       	push	r6
    3676:	7f 92       	push	r7
    3678:	8f 92       	push	r8
    367a:	9f 92       	push	r9
    367c:	af 92       	push	r10
    367e:	bf 92       	push	r11
    3680:	cf 92       	push	r12
    3682:	df 92       	push	r13
    3684:	ef 92       	push	r14
    3686:	ff 92       	push	r15
    3688:	0f 93       	push	r16
    368a:	1f 93       	push	r17
    368c:	cf 93       	push	r28
    368e:	df 93       	push	r29
    3690:	cd b7       	in	r28, 0x3d	; 61
    3692:	de b7       	in	r29, 0x3e	; 62
    3694:	cc 56       	subi	r28, 0x6C	; 108
    3696:	d1 09       	sbc	r29, r1
    3698:	cd bf       	out	0x3d, r28	; 61
    369a:	de bf       	out	0x3e, r29	; 62
*/

	char strbuf[80];
	PID pid;

	pid.p = pid.i = pid.d = 0.0;
    369c:	6d 96       	adiw	r28, 0x1d	; 29
    369e:	1c ae       	std	Y+60, r1	; 0x3c
    36a0:	1d ae       	std	Y+61, r1	; 0x3d
    36a2:	1e ae       	std	Y+62, r1	; 0x3e
    36a4:	1f ae       	std	Y+63, r1	; 0x3f
    36a6:	6d 97       	sbiw	r28, 0x1d	; 29
    36a8:	69 96       	adiw	r28, 0x19	; 25
    36aa:	1c ae       	std	Y+60, r1	; 0x3c
    36ac:	1d ae       	std	Y+61, r1	; 0x3d
    36ae:	1e ae       	std	Y+62, r1	; 0x3e
    36b0:	1f ae       	std	Y+63, r1	; 0x3f
    36b2:	69 97       	sbiw	r28, 0x19	; 25
    36b4:	65 96       	adiw	r28, 0x15	; 21
    36b6:	1c ae       	std	Y+60, r1	; 0x3c
    36b8:	1d ae       	std	Y+61, r1	; 0x3d
    36ba:	1e ae       	std	Y+62, r1	; 0x3e
    36bc:	1f ae       	std	Y+63, r1	; 0x3f
    36be:	65 97       	sbiw	r28, 0x15	; 21
	pid.maxI = pid.deadZone = pid.minPos = pid.maxPos = 0;
    36c0:	ad 96       	adiw	r28, 0x2d	; 45
    36c2:	1c ae       	std	Y+60, r1	; 0x3c
    36c4:	1d ae       	std	Y+61, r1	; 0x3d
    36c6:	1e ae       	std	Y+62, r1	; 0x3e
    36c8:	1f ae       	std	Y+63, r1	; 0x3f
    36ca:	ad 97       	sbiw	r28, 0x2d	; 45
    36cc:	a9 96       	adiw	r28, 0x29	; 41
    36ce:	1c ae       	std	Y+60, r1	; 0x3c
    36d0:	1d ae       	std	Y+61, r1	; 0x3d
    36d2:	1e ae       	std	Y+62, r1	; 0x3e
    36d4:	1f ae       	std	Y+63, r1	; 0x3f
    36d6:	a9 97       	sbiw	r28, 0x29	; 41
    36d8:	a5 96       	adiw	r28, 0x25	; 37
    36da:	1c ae       	std	Y+60, r1	; 0x3c
    36dc:	1d ae       	std	Y+61, r1	; 0x3d
    36de:	1e ae       	std	Y+62, r1	; 0x3e
    36e0:	1f ae       	std	Y+63, r1	; 0x3f
    36e2:	a5 97       	sbiw	r28, 0x25	; 37
    36e4:	a1 96       	adiw	r28, 0x21	; 33
    36e6:	1c ae       	std	Y+60, r1	; 0x3c
    36e8:	1d ae       	std	Y+61, r1	; 0x3d
    36ea:	1e ae       	std	Y+62, r1	; 0x3e
    36ec:	1f ae       	std	Y+63, r1	; 0x3f
    36ee:	a1 97       	sbiw	r28, 0x21	; 33

	get_MOTOR_PID(128, &pid);
    36f0:	be 01       	movw	r22, r28
    36f2:	6f 5a       	subi	r22, 0xAF	; 175
    36f4:	7f 4f       	sbci	r23, 0xFF	; 255
    36f6:	80 e8       	ldi	r24, 0x80	; 128
    36f8:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <get_MOTOR_PID>

	sprintf(strbuf, " p=%10.5f", pid.p);
    36fc:	62 96       	adiw	r28, 0x12	; 18
    36fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    3700:	62 97       	sbiw	r28, 0x12	; 18
    3702:	63 96       	adiw	r28, 0x13	; 19
    3704:	9f ad       	ldd	r25, Y+63	; 0x3f
    3706:	63 97       	sbiw	r28, 0x13	; 19
    3708:	64 96       	adiw	r28, 0x14	; 20
    370a:	2f ad       	ldd	r18, Y+63	; 0x3f
    370c:	64 97       	sbiw	r28, 0x14	; 20
    370e:	65 96       	adiw	r28, 0x15	; 21
    3710:	3f ad       	ldd	r19, Y+63	; 0x3f
    3712:	65 97       	sbiw	r28, 0x15	; 21
    3714:	3f 93       	push	r19
    3716:	2f 93       	push	r18
    3718:	9f 93       	push	r25
    371a:	8f 93       	push	r24
    371c:	0f 2e       	mov	r0, r31
    371e:	f3 ef       	ldi	r31, 0xF3	; 243
    3720:	8f 2e       	mov	r8, r31
    3722:	fa e9       	ldi	r31, 0x9A	; 154
    3724:	9f 2e       	mov	r9, r31
    3726:	f0 2d       	mov	r31, r0
    3728:	9f 92       	push	r9
    372a:	8f 92       	push	r8
    372c:	8e 01       	movw	r16, r28
    372e:	0f 5f       	subi	r16, 0xFF	; 255
    3730:	1f 4f       	sbci	r17, 0xFF	; 255
    3732:	1f 93       	push	r17
    3734:	0f 93       	push	r16
    3736:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
	printLine(strbuf);
    373a:	c8 01       	movw	r24, r16
    373c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	sprintf(strbuf, " i=%10.5f", pid.i);
    3740:	66 96       	adiw	r28, 0x16	; 22
    3742:	8f ad       	ldd	r24, Y+63	; 0x3f
    3744:	66 97       	sbiw	r28, 0x16	; 22
    3746:	67 96       	adiw	r28, 0x17	; 23
    3748:	9f ad       	ldd	r25, Y+63	; 0x3f
    374a:	67 97       	sbiw	r28, 0x17	; 23
    374c:	68 96       	adiw	r28, 0x18	; 24
    374e:	2f ad       	ldd	r18, Y+63	; 0x3f
    3750:	68 97       	sbiw	r28, 0x18	; 24
    3752:	69 96       	adiw	r28, 0x19	; 25
    3754:	3f ad       	ldd	r19, Y+63	; 0x3f
    3756:	69 97       	sbiw	r28, 0x19	; 25
    3758:	3f 93       	push	r19
    375a:	2f 93       	push	r18
    375c:	9f 93       	push	r25
    375e:	8f 93       	push	r24
    3760:	0f 2e       	mov	r0, r31
    3762:	fd ef       	ldi	r31, 0xFD	; 253
    3764:	af 2e       	mov	r10, r31
    3766:	fa e9       	ldi	r31, 0x9A	; 154
    3768:	bf 2e       	mov	r11, r31
    376a:	f0 2d       	mov	r31, r0
    376c:	bf 92       	push	r11
    376e:	af 92       	push	r10
    3770:	1f 93       	push	r17
    3772:	0f 93       	push	r16
    3774:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
	printLine(strbuf);
    3778:	c8 01       	movw	r24, r16
    377a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	sprintf(strbuf, " d=%10.5f", pid.d);
    377e:	6a 96       	adiw	r28, 0x1a	; 26
    3780:	8f ad       	ldd	r24, Y+63	; 0x3f
    3782:	6a 97       	sbiw	r28, 0x1a	; 26
    3784:	6b 96       	adiw	r28, 0x1b	; 27
    3786:	9f ad       	ldd	r25, Y+63	; 0x3f
    3788:	6b 97       	sbiw	r28, 0x1b	; 27
    378a:	6c 96       	adiw	r28, 0x1c	; 28
    378c:	2f ad       	ldd	r18, Y+63	; 0x3f
    378e:	6c 97       	sbiw	r28, 0x1c	; 28
    3790:	6d 96       	adiw	r28, 0x1d	; 29
    3792:	3f ad       	ldd	r19, Y+63	; 0x3f
    3794:	6d 97       	sbiw	r28, 0x1d	; 29
    3796:	3f 93       	push	r19
    3798:	2f 93       	push	r18
    379a:	9f 93       	push	r25
    379c:	8f 93       	push	r24
    379e:	0f 2e       	mov	r0, r31
    37a0:	f7 e0       	ldi	r31, 0x07	; 7
    37a2:	cf 2e       	mov	r12, r31
    37a4:	fb e9       	ldi	r31, 0x9B	; 155
    37a6:	df 2e       	mov	r13, r31
    37a8:	f0 2d       	mov	r31, r0
    37aa:	df 92       	push	r13
    37ac:	cf 92       	push	r12
    37ae:	1f 93       	push	r17
    37b0:	0f 93       	push	r16
    37b2:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
	printLine(strbuf);
    37b6:	c8 01       	movw	r24, r16
    37b8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	sprintf(strbuf, " maxI=%ld", pid.maxI);
    37bc:	a1 96       	adiw	r28, 0x21	; 33
    37be:	8f ad       	ldd	r24, Y+63	; 0x3f
    37c0:	a1 97       	sbiw	r28, 0x21	; 33
    37c2:	8f 93       	push	r24
    37c4:	a0 96       	adiw	r28, 0x20	; 32
    37c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    37c8:	a0 97       	sbiw	r28, 0x20	; 32
    37ca:	8f 93       	push	r24
    37cc:	6f 96       	adiw	r28, 0x1f	; 31
    37ce:	8f ad       	ldd	r24, Y+63	; 0x3f
    37d0:	6f 97       	sbiw	r28, 0x1f	; 31
    37d2:	8f 93       	push	r24
    37d4:	6e 96       	adiw	r28, 0x1e	; 30
    37d6:	8f ad       	ldd	r24, Y+63	; 0x3f
    37d8:	6e 97       	sbiw	r28, 0x1e	; 30
    37da:	8f 93       	push	r24
    37dc:	0f 2e       	mov	r0, r31
    37de:	f1 e1       	ldi	r31, 0x11	; 17
    37e0:	ef 2e       	mov	r14, r31
    37e2:	fb e9       	ldi	r31, 0x9B	; 155
    37e4:	ff 2e       	mov	r15, r31
    37e6:	f0 2d       	mov	r31, r0
    37e8:	ff 92       	push	r15
    37ea:	ef 92       	push	r14
    37ec:	1f 93       	push	r17
    37ee:	0f 93       	push	r16
    37f0:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
	printLine(strbuf);
    37f4:	cd bf       	out	0x3d, r28	; 61
    37f6:	de bf       	out	0x3e, r29	; 62
    37f8:	c8 01       	movw	r24, r16
    37fa:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	sprintf(strbuf, " deadZone=%ld", pid.deadZone);
    37fe:	a5 96       	adiw	r28, 0x25	; 37
    3800:	8f ad       	ldd	r24, Y+63	; 0x3f
    3802:	a5 97       	sbiw	r28, 0x25	; 37
    3804:	8f 93       	push	r24
    3806:	a4 96       	adiw	r28, 0x24	; 36
    3808:	8f ad       	ldd	r24, Y+63	; 0x3f
    380a:	a4 97       	sbiw	r28, 0x24	; 36
    380c:	8f 93       	push	r24
    380e:	a3 96       	adiw	r28, 0x23	; 35
    3810:	8f ad       	ldd	r24, Y+63	; 0x3f
    3812:	a3 97       	sbiw	r28, 0x23	; 35
    3814:	8f 93       	push	r24
    3816:	a2 96       	adiw	r28, 0x22	; 34
    3818:	8f ad       	ldd	r24, Y+63	; 0x3f
    381a:	a2 97       	sbiw	r28, 0x22	; 34
    381c:	8f 93       	push	r24
    381e:	0f 2e       	mov	r0, r31
    3820:	fb e1       	ldi	r31, 0x1B	; 27
    3822:	6f 2e       	mov	r6, r31
    3824:	fb e9       	ldi	r31, 0x9B	; 155
    3826:	7f 2e       	mov	r7, r31
    3828:	f0 2d       	mov	r31, r0
    382a:	7f 92       	push	r7
    382c:	6f 92       	push	r6
    382e:	1f 93       	push	r17
    3830:	0f 93       	push	r16
    3832:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
	printLine(strbuf);
    3836:	c8 01       	movw	r24, r16
    3838:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	sprintf(strbuf, " minPos=%ld", pid.minPos);
    383c:	a9 96       	adiw	r28, 0x29	; 41
    383e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3840:	a9 97       	sbiw	r28, 0x29	; 41
    3842:	8f 93       	push	r24
    3844:	a8 96       	adiw	r28, 0x28	; 40
    3846:	8f ad       	ldd	r24, Y+63	; 0x3f
    3848:	a8 97       	sbiw	r28, 0x28	; 40
    384a:	8f 93       	push	r24
    384c:	a7 96       	adiw	r28, 0x27	; 39
    384e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3850:	a7 97       	sbiw	r28, 0x27	; 39
    3852:	8f 93       	push	r24
    3854:	a6 96       	adiw	r28, 0x26	; 38
    3856:	8f ad       	ldd	r24, Y+63	; 0x3f
    3858:	a6 97       	sbiw	r28, 0x26	; 38
    385a:	8f 93       	push	r24
    385c:	0f 2e       	mov	r0, r31
    385e:	f9 e2       	ldi	r31, 0x29	; 41
    3860:	4f 2e       	mov	r4, r31
    3862:	fb e9       	ldi	r31, 0x9B	; 155
    3864:	5f 2e       	mov	r5, r31
    3866:	f0 2d       	mov	r31, r0
    3868:	5f 92       	push	r5
    386a:	4f 92       	push	r4
    386c:	1f 93       	push	r17
    386e:	0f 93       	push	r16
    3870:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
	printLine(strbuf);
    3874:	c8 01       	movw	r24, r16
    3876:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	sprintf(strbuf, " maxPos=%ld", pid.maxPos);
    387a:	ad 96       	adiw	r28, 0x2d	; 45
    387c:	8f ad       	ldd	r24, Y+63	; 0x3f
    387e:	ad 97       	sbiw	r28, 0x2d	; 45
    3880:	8f 93       	push	r24
    3882:	ac 96       	adiw	r28, 0x2c	; 44
    3884:	8f ad       	ldd	r24, Y+63	; 0x3f
    3886:	ac 97       	sbiw	r28, 0x2c	; 44
    3888:	8f 93       	push	r24
    388a:	ab 96       	adiw	r28, 0x2b	; 43
    388c:	8f ad       	ldd	r24, Y+63	; 0x3f
    388e:	ab 97       	sbiw	r28, 0x2b	; 43
    3890:	8f 93       	push	r24
    3892:	aa 96       	adiw	r28, 0x2a	; 42
    3894:	8f ad       	ldd	r24, Y+63	; 0x3f
    3896:	aa 97       	sbiw	r28, 0x2a	; 42
    3898:	8f 93       	push	r24
    389a:	0f 2e       	mov	r0, r31
    389c:	f5 e3       	ldi	r31, 0x35	; 53
    389e:	2f 2e       	mov	r2, r31
    38a0:	fb e9       	ldi	r31, 0x9B	; 155
    38a2:	3f 2e       	mov	r3, r31
    38a4:	f0 2d       	mov	r31, r0
    38a6:	3f 92       	push	r3
    38a8:	2f 92       	push	r2
    38aa:	1f 93       	push	r17
    38ac:	0f 93       	push	r16
    38ae:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
	printLine(strbuf);
    38b2:	c8 01       	movw	r24, r16
    38b4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	// Values for the test motors, not PI motors
	pid.p = 100.0;
    38b8:	80 e0       	ldi	r24, 0x00	; 0
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	a8 ec       	ldi	r26, 0xC8	; 200
    38be:	b2 e4       	ldi	r27, 0x42	; 66
    38c0:	65 96       	adiw	r28, 0x15	; 21
    38c2:	8c af       	std	Y+60, r24	; 0x3c
    38c4:	9d af       	std	Y+61, r25	; 0x3d
    38c6:	ae af       	std	Y+62, r26	; 0x3e
    38c8:	bf af       	std	Y+63, r27	; 0x3f
    38ca:	65 97       	sbiw	r28, 0x15	; 21
	pid.i = 1.4;
    38cc:	83 e3       	ldi	r24, 0x33	; 51
    38ce:	93 e3       	ldi	r25, 0x33	; 51
    38d0:	a3 eb       	ldi	r26, 0xB3	; 179
    38d2:	bf e3       	ldi	r27, 0x3F	; 63
    38d4:	69 96       	adiw	r28, 0x19	; 25
    38d6:	8c af       	std	Y+60, r24	; 0x3c
    38d8:	9d af       	std	Y+61, r25	; 0x3d
    38da:	ae af       	std	Y+62, r26	; 0x3e
    38dc:	bf af       	std	Y+63, r27	; 0x3f
    38de:	69 97       	sbiw	r28, 0x19	; 25
	pid.d = 430.0;
    38e0:	80 e0       	ldi	r24, 0x00	; 0
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	a7 ed       	ldi	r26, 0xD7	; 215
    38e6:	b3 e4       	ldi	r27, 0x43	; 67
    38e8:	6d 96       	adiw	r28, 0x1d	; 29
    38ea:	8c af       	std	Y+60, r24	; 0x3c
    38ec:	9d af       	std	Y+61, r25	; 0x3d
    38ee:	ae af       	std	Y+62, r26	; 0x3e
    38f0:	bf af       	std	Y+63, r27	; 0x3f
    38f2:	6d 97       	sbiw	r28, 0x1d	; 29
	pid.maxI = 217;
    38f4:	89 ed       	ldi	r24, 0xD9	; 217
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	a0 e0       	ldi	r26, 0x00	; 0
    38fa:	b0 e0       	ldi	r27, 0x00	; 0
    38fc:	a1 96       	adiw	r28, 0x21	; 33
    38fe:	8c af       	std	Y+60, r24	; 0x3c
    3900:	9d af       	std	Y+61, r25	; 0x3d
    3902:	ae af       	std	Y+62, r26	; 0x3e
    3904:	bf af       	std	Y+63, r27	; 0x3f
    3906:	a1 97       	sbiw	r28, 0x21	; 33
	pid.deadZone = 0;
    3908:	a5 96       	adiw	r28, 0x25	; 37
    390a:	1c ae       	std	Y+60, r1	; 0x3c
    390c:	1d ae       	std	Y+61, r1	; 0x3d
    390e:	1e ae       	std	Y+62, r1	; 0x3e
    3910:	1f ae       	std	Y+63, r1	; 0x3f
    3912:	a5 97       	sbiw	r28, 0x25	; 37
	pid.minPos = -1000000000;
    3914:	80 e0       	ldi	r24, 0x00	; 0
    3916:	96 e3       	ldi	r25, 0x36	; 54
    3918:	a5 e6       	ldi	r26, 0x65	; 101
    391a:	b4 ec       	ldi	r27, 0xC4	; 196
    391c:	a9 96       	adiw	r28, 0x29	; 41
    391e:	8c af       	std	Y+60, r24	; 0x3c
    3920:	9d af       	std	Y+61, r25	; 0x3d
    3922:	ae af       	std	Y+62, r26	; 0x3e
    3924:	bf af       	std	Y+63, r27	; 0x3f
    3926:	a9 97       	sbiw	r28, 0x29	; 41
	pid.maxPos = 1000000000;
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	9a ec       	ldi	r25, 0xCA	; 202
    392c:	aa e9       	ldi	r26, 0x9A	; 154
    392e:	bb e3       	ldi	r27, 0x3B	; 59
    3930:	ad 96       	adiw	r28, 0x2d	; 45
    3932:	8c af       	std	Y+60, r24	; 0x3c
    3934:	9d af       	std	Y+61, r25	; 0x3d
    3936:	ae af       	std	Y+62, r26	; 0x3e
    3938:	bf af       	std	Y+63, r27	; 0x3f
    393a:	ad 97       	sbiw	r28, 0x2d	; 45

	sprintf(strbuf, " setting pid");
    393c:	8d e0       	ldi	r24, 0x0D	; 13
    393e:	e1 e4       	ldi	r30, 0x41	; 65
    3940:	fb e9       	ldi	r31, 0x9B	; 155
    3942:	d8 01       	movw	r26, r16
    3944:	01 90       	ld	r0, Z+
    3946:	0d 92       	st	X+, r0
    3948:	8a 95       	dec	r24
    394a:	e1 f7       	brne	.-8      	; 0x3944 <testroutine+0x2d8>
	printLine(strbuf);
    394c:	c8 01       	movw	r24, r16
    394e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	put_MOTOR_PID(128, pid);
    3952:	8d b7       	in	r24, 0x3d	; 61
    3954:	9e b7       	in	r25, 0x3e	; 62
    3956:	4c 97       	sbiw	r24, 0x1c	; 28
    3958:	8d bf       	out	0x3d, r24	; 61
    395a:	9e bf       	out	0x3e, r25	; 62
    395c:	ad b7       	in	r26, 0x3d	; 61
    395e:	be b7       	in	r27, 0x3e	; 62
    3960:	11 96       	adiw	r26, 0x01	; 1
    3962:	8c e1       	ldi	r24, 0x1C	; 28
    3964:	fe 01       	movw	r30, r28
    3966:	ef 5a       	subi	r30, 0xAF	; 175
    3968:	ff 4f       	sbci	r31, 0xFF	; 255
    396a:	01 90       	ld	r0, Z+
    396c:	0d 92       	st	X+, r0
    396e:	8a 95       	dec	r24
    3970:	e1 f7       	brne	.-8      	; 0x396a <testroutine+0x2fe>
    3972:	80 e8       	ldi	r24, 0x80	; 128
    3974:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <put_MOTOR_PID>

	pid.p = pid.i = pid.d = 0.0;
    3978:	6d 96       	adiw	r28, 0x1d	; 29
    397a:	1c ae       	std	Y+60, r1	; 0x3c
    397c:	1d ae       	std	Y+61, r1	; 0x3d
    397e:	1e ae       	std	Y+62, r1	; 0x3e
    3980:	1f ae       	std	Y+63, r1	; 0x3f
    3982:	6d 97       	sbiw	r28, 0x1d	; 29
    3984:	69 96       	adiw	r28, 0x19	; 25
    3986:	1c ae       	std	Y+60, r1	; 0x3c
    3988:	1d ae       	std	Y+61, r1	; 0x3d
    398a:	1e ae       	std	Y+62, r1	; 0x3e
    398c:	1f ae       	std	Y+63, r1	; 0x3f
    398e:	69 97       	sbiw	r28, 0x19	; 25
    3990:	65 96       	adiw	r28, 0x15	; 21
    3992:	1c ae       	std	Y+60, r1	; 0x3c
    3994:	1d ae       	std	Y+61, r1	; 0x3d
    3996:	1e ae       	std	Y+62, r1	; 0x3e
    3998:	1f ae       	std	Y+63, r1	; 0x3f
    399a:	65 97       	sbiw	r28, 0x15	; 21
	pid.maxI = pid.deadZone = pid.minPos = pid.maxPos = 0;
    399c:	ad 96       	adiw	r28, 0x2d	; 45
    399e:	1c ae       	std	Y+60, r1	; 0x3c
    39a0:	1d ae       	std	Y+61, r1	; 0x3d
    39a2:	1e ae       	std	Y+62, r1	; 0x3e
    39a4:	1f ae       	std	Y+63, r1	; 0x3f
    39a6:	ad 97       	sbiw	r28, 0x2d	; 45
    39a8:	a9 96       	adiw	r28, 0x29	; 41
    39aa:	1c ae       	std	Y+60, r1	; 0x3c
    39ac:	1d ae       	std	Y+61, r1	; 0x3d
    39ae:	1e ae       	std	Y+62, r1	; 0x3e
    39b0:	1f ae       	std	Y+63, r1	; 0x3f
    39b2:	a9 97       	sbiw	r28, 0x29	; 41
    39b4:	a5 96       	adiw	r28, 0x25	; 37
    39b6:	1c ae       	std	Y+60, r1	; 0x3c
    39b8:	1d ae       	std	Y+61, r1	; 0x3d
    39ba:	1e ae       	std	Y+62, r1	; 0x3e
    39bc:	1f ae       	std	Y+63, r1	; 0x3f
    39be:	a5 97       	sbiw	r28, 0x25	; 37
    39c0:	a1 96       	adiw	r28, 0x21	; 33
    39c2:	1c ae       	std	Y+60, r1	; 0x3c
    39c4:	1d ae       	std	Y+61, r1	; 0x3d
    39c6:	1e ae       	std	Y+62, r1	; 0x3e
    39c8:	1f ae       	std	Y+63, r1	; 0x3f
    39ca:	a1 97       	sbiw	r28, 0x21	; 33

	get_MOTOR_PID(128, &pid);
    39cc:	cd bf       	out	0x3d, r28	; 61
    39ce:	de bf       	out	0x3e, r29	; 62
    39d0:	be 01       	movw	r22, r28
    39d2:	6f 5a       	subi	r22, 0xAF	; 175
    39d4:	7f 4f       	sbci	r23, 0xFF	; 255
    39d6:	80 e8       	ldi	r24, 0x80	; 128
    39d8:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <get_MOTOR_PID>

	sprintf(strbuf, " getting pid");
    39dc:	8d e0       	ldi	r24, 0x0D	; 13
    39de:	ee e4       	ldi	r30, 0x4E	; 78
    39e0:	fb e9       	ldi	r31, 0x9B	; 155
    39e2:	d8 01       	movw	r26, r16
    39e4:	01 90       	ld	r0, Z+
    39e6:	0d 92       	st	X+, r0
    39e8:	8a 95       	dec	r24
    39ea:	e1 f7       	brne	.-8      	; 0x39e4 <testroutine+0x378>
	printLine(strbuf);
    39ec:	c8 01       	movw	r24, r16
    39ee:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	sprintf(strbuf, " p=%10.5f", pid.p);
    39f2:	62 96       	adiw	r28, 0x12	; 18
    39f4:	8f ad       	ldd	r24, Y+63	; 0x3f
    39f6:	62 97       	sbiw	r28, 0x12	; 18
    39f8:	63 96       	adiw	r28, 0x13	; 19
    39fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    39fc:	63 97       	sbiw	r28, 0x13	; 19
    39fe:	64 96       	adiw	r28, 0x14	; 20
    3a00:	2f ad       	ldd	r18, Y+63	; 0x3f
    3a02:	64 97       	sbiw	r28, 0x14	; 20
    3a04:	65 96       	adiw	r28, 0x15	; 21
    3a06:	3f ad       	ldd	r19, Y+63	; 0x3f
    3a08:	65 97       	sbiw	r28, 0x15	; 21
    3a0a:	3f 93       	push	r19
    3a0c:	2f 93       	push	r18
    3a0e:	9f 93       	push	r25
    3a10:	8f 93       	push	r24
    3a12:	9f 92       	push	r9
    3a14:	8f 92       	push	r8
    3a16:	1f 93       	push	r17
    3a18:	0f 93       	push	r16
    3a1a:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
	printLine(strbuf);
    3a1e:	c8 01       	movw	r24, r16
    3a20:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	sprintf(strbuf, " i=%10.5f", pid.i);
    3a24:	66 96       	adiw	r28, 0x16	; 22
    3a26:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a28:	66 97       	sbiw	r28, 0x16	; 22
    3a2a:	67 96       	adiw	r28, 0x17	; 23
    3a2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a2e:	67 97       	sbiw	r28, 0x17	; 23
    3a30:	68 96       	adiw	r28, 0x18	; 24
    3a32:	2f ad       	ldd	r18, Y+63	; 0x3f
    3a34:	68 97       	sbiw	r28, 0x18	; 24
    3a36:	69 96       	adiw	r28, 0x19	; 25
    3a38:	3f ad       	ldd	r19, Y+63	; 0x3f
    3a3a:	69 97       	sbiw	r28, 0x19	; 25
    3a3c:	3f 93       	push	r19
    3a3e:	2f 93       	push	r18
    3a40:	9f 93       	push	r25
    3a42:	8f 93       	push	r24
    3a44:	bf 92       	push	r11
    3a46:	af 92       	push	r10
    3a48:	1f 93       	push	r17
    3a4a:	0f 93       	push	r16
    3a4c:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
	printLine(strbuf);
    3a50:	c8 01       	movw	r24, r16
    3a52:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	sprintf(strbuf, " d=%10.5f", pid.d);
    3a56:	6a 96       	adiw	r28, 0x1a	; 26
    3a58:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a5a:	6a 97       	sbiw	r28, 0x1a	; 26
    3a5c:	6b 96       	adiw	r28, 0x1b	; 27
    3a5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a60:	6b 97       	sbiw	r28, 0x1b	; 27
    3a62:	6c 96       	adiw	r28, 0x1c	; 28
    3a64:	2f ad       	ldd	r18, Y+63	; 0x3f
    3a66:	6c 97       	sbiw	r28, 0x1c	; 28
    3a68:	6d 96       	adiw	r28, 0x1d	; 29
    3a6a:	3f ad       	ldd	r19, Y+63	; 0x3f
    3a6c:	6d 97       	sbiw	r28, 0x1d	; 29
    3a6e:	3f 93       	push	r19
    3a70:	2f 93       	push	r18
    3a72:	9f 93       	push	r25
    3a74:	8f 93       	push	r24
    3a76:	df 92       	push	r13
    3a78:	cf 92       	push	r12
    3a7a:	1f 93       	push	r17
    3a7c:	0f 93       	push	r16
    3a7e:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
	printLine(strbuf);
    3a82:	c8 01       	movw	r24, r16
    3a84:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	sprintf(strbuf, " maxI=%ld", pid.maxI);
    3a88:	a1 96       	adiw	r28, 0x21	; 33
    3a8a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a8c:	a1 97       	sbiw	r28, 0x21	; 33
    3a8e:	8f 93       	push	r24
    3a90:	a0 96       	adiw	r28, 0x20	; 32
    3a92:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a94:	a0 97       	sbiw	r28, 0x20	; 32
    3a96:	8f 93       	push	r24
    3a98:	6f 96       	adiw	r28, 0x1f	; 31
    3a9a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3a9c:	6f 97       	sbiw	r28, 0x1f	; 31
    3a9e:	8f 93       	push	r24
    3aa0:	6e 96       	adiw	r28, 0x1e	; 30
    3aa2:	8f ad       	ldd	r24, Y+63	; 0x3f
    3aa4:	6e 97       	sbiw	r28, 0x1e	; 30
    3aa6:	8f 93       	push	r24
    3aa8:	ff 92       	push	r15
    3aaa:	ef 92       	push	r14
    3aac:	1f 93       	push	r17
    3aae:	0f 93       	push	r16
    3ab0:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
	printLine(strbuf);
    3ab4:	cd bf       	out	0x3d, r28	; 61
    3ab6:	de bf       	out	0x3e, r29	; 62
    3ab8:	c8 01       	movw	r24, r16
    3aba:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	sprintf(strbuf, " deadZone=%ld", pid.deadZone);
    3abe:	a5 96       	adiw	r28, 0x25	; 37
    3ac0:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ac2:	a5 97       	sbiw	r28, 0x25	; 37
    3ac4:	8f 93       	push	r24
    3ac6:	a4 96       	adiw	r28, 0x24	; 36
    3ac8:	8f ad       	ldd	r24, Y+63	; 0x3f
    3aca:	a4 97       	sbiw	r28, 0x24	; 36
    3acc:	8f 93       	push	r24
    3ace:	a3 96       	adiw	r28, 0x23	; 35
    3ad0:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ad2:	a3 97       	sbiw	r28, 0x23	; 35
    3ad4:	8f 93       	push	r24
    3ad6:	a2 96       	adiw	r28, 0x22	; 34
    3ad8:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ada:	a2 97       	sbiw	r28, 0x22	; 34
    3adc:	8f 93       	push	r24
    3ade:	7f 92       	push	r7
    3ae0:	6f 92       	push	r6
    3ae2:	1f 93       	push	r17
    3ae4:	0f 93       	push	r16
    3ae6:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
	printLine(strbuf);
    3aea:	c8 01       	movw	r24, r16
    3aec:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	sprintf(strbuf, " minPos=%ld", pid.minPos);
    3af0:	a9 96       	adiw	r28, 0x29	; 41
    3af2:	8f ad       	ldd	r24, Y+63	; 0x3f
    3af4:	a9 97       	sbiw	r28, 0x29	; 41
    3af6:	8f 93       	push	r24
    3af8:	a8 96       	adiw	r28, 0x28	; 40
    3afa:	8f ad       	ldd	r24, Y+63	; 0x3f
    3afc:	a8 97       	sbiw	r28, 0x28	; 40
    3afe:	8f 93       	push	r24
    3b00:	a7 96       	adiw	r28, 0x27	; 39
    3b02:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b04:	a7 97       	sbiw	r28, 0x27	; 39
    3b06:	8f 93       	push	r24
    3b08:	a6 96       	adiw	r28, 0x26	; 38
    3b0a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b0c:	a6 97       	sbiw	r28, 0x26	; 38
    3b0e:	8f 93       	push	r24
    3b10:	5f 92       	push	r5
    3b12:	4f 92       	push	r4
    3b14:	1f 93       	push	r17
    3b16:	0f 93       	push	r16
    3b18:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
	printLine(strbuf);
    3b1c:	c8 01       	movw	r24, r16
    3b1e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	sprintf(strbuf, " maxPos=%ld", pid.maxPos);
    3b22:	ad 96       	adiw	r28, 0x2d	; 45
    3b24:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b26:	ad 97       	sbiw	r28, 0x2d	; 45
    3b28:	8f 93       	push	r24
    3b2a:	ac 96       	adiw	r28, 0x2c	; 44
    3b2c:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b2e:	ac 97       	sbiw	r28, 0x2c	; 44
    3b30:	8f 93       	push	r24
    3b32:	ab 96       	adiw	r28, 0x2b	; 43
    3b34:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b36:	ab 97       	sbiw	r28, 0x2b	; 43
    3b38:	8f 93       	push	r24
    3b3a:	aa 96       	adiw	r28, 0x2a	; 42
    3b3c:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b3e:	aa 97       	sbiw	r28, 0x2a	; 42
    3b40:	8f 93       	push	r24
    3b42:	3f 92       	push	r3
    3b44:	2f 92       	push	r2
    3b46:	1f 93       	push	r17
    3b48:	0f 93       	push	r16
    3b4a:	0e 94 75 29 	call	0x52ea	; 0x52ea <sprintf>
	printLine(strbuf);
    3b4e:	c8 01       	movw	r24, r16
    3b50:	0e 94 7f 03 	call	0x6fe	; 0x6fe <printLine>

	return;
    3b54:	cd bf       	out	0x3d, r28	; 61
    3b56:	de bf       	out	0x3e, r29	; 62
    3b58:	c4 59       	subi	r28, 0x94	; 148
    3b5a:	df 4f       	sbci	r29, 0xFF	; 255
    3b5c:	cd bf       	out	0x3d, r28	; 61
    3b5e:	de bf       	out	0x3e, r29	; 62
    3b60:	df 91       	pop	r29
    3b62:	cf 91       	pop	r28
    3b64:	1f 91       	pop	r17
    3b66:	0f 91       	pop	r16
    3b68:	ff 90       	pop	r15
    3b6a:	ef 90       	pop	r14
    3b6c:	df 90       	pop	r13
    3b6e:	cf 90       	pop	r12
    3b70:	bf 90       	pop	r11
    3b72:	af 90       	pop	r10
    3b74:	9f 90       	pop	r9
    3b76:	8f 90       	pop	r8
    3b78:	7f 90       	pop	r7
    3b7a:	6f 90       	pop	r6
    3b7c:	5f 90       	pop	r5
    3b7e:	4f 90       	pop	r4
    3b80:	3f 90       	pop	r3
    3b82:	2f 90       	pop	r2
    3b84:	08 95       	ret

00003b86 <start_TCB0>:
	Output:
		None
------------------------------------------------------------------------------*/
void start_TCB0(uint16_t msPeriod)
{
ticks = 0;
    3b86:	10 92 33 2a 	sts	0x2A33, r1	; 0x802a33 <ticks>
    3b8a:	10 92 34 2a 	sts	0x2A34, r1	; 0x802a34 <ticks+0x1>
	// Check for overflows; msPeriod=19ms is max for 3.33MHz
	TCB0.CCMP = msPeriod * (uint16_t) (F_CPU/1000UL);
    3b8e:	25 e0       	ldi	r18, 0x05	; 5
    3b90:	3d e0       	ldi	r19, 0x0D	; 13
    3b92:	ac 01       	movw	r20, r24
    3b94:	42 9f       	mul	r20, r18
    3b96:	c0 01       	movw	r24, r0
    3b98:	43 9f       	mul	r20, r19
    3b9a:	90 0d       	add	r25, r0
    3b9c:	52 9f       	mul	r21, r18
    3b9e:	90 0d       	add	r25, r0
    3ba0:	11 24       	eor	r1, r1
    3ba2:	e0 e8       	ldi	r30, 0x80	; 128
    3ba4:	fa e0       	ldi	r31, 0x0A	; 10
    3ba6:	84 87       	std	Z+12, r24	; 0x0c
    3ba8:	95 87       	std	Z+13, r25	; 0x0d
	TCB0.INTCTRL = TCB_CAPT_bm;				// Interrupt at TOP
    3baa:	81 e0       	ldi	r24, 0x01	; 1
    3bac:	85 83       	std	Z+5, r24	; 0x05
	TCB0.CTRLA = TCB_ENABLE_bm;				// Start the clock
    3bae:	80 83       	st	Z, r24
    3bb0:	08 95       	ret

00003bb2 <stop_TCB0>:
	Turn off the TCB0 timer
------------------------------------------------------------------------------*/
void stop_TCB0(void)
{
	
	TCB0.CTRLA = 0;
    3bb2:	10 92 80 0a 	sts	0x0A80, r1	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
    3bb6:	08 95       	ret

00003bb8 <__vector_12>:

}

ISR(TCB0_INT_vect)
{
    3bb8:	1f 92       	push	r1
    3bba:	0f 92       	push	r0
    3bbc:	0f b6       	in	r0, 0x3f	; 63
    3bbe:	0f 92       	push	r0
    3bc0:	11 24       	eor	r1, r1
    3bc2:	8f 93       	push	r24
    3bc4:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks++;
    3bcc:	80 91 33 2a 	lds	r24, 0x2A33	; 0x802a33 <ticks>
    3bd0:	90 91 34 2a 	lds	r25, 0x2A34	; 0x802a34 <ticks+0x1>
    3bd4:	01 96       	adiw	r24, 0x01	; 1
    3bd6:	80 93 33 2a 	sts	0x2A33, r24	; 0x802a33 <ticks>
    3bda:	90 93 34 2a 	sts	0x2A34, r25	; 0x802a34 <ticks+0x1>
	TWI_ticks++;
    3bde:	80 91 2e 2a 	lds	r24, 0x2A2E	; 0x802a2e <TWI_ticks>
    3be2:	90 91 2f 2a 	lds	r25, 0x2A2F	; 0x802a2f <TWI_ticks+0x1>
    3be6:	01 96       	adiw	r24, 0x01	; 1
    3be8:	80 93 2e 2a 	sts	0x2A2E, r24	; 0x802a2e <TWI_ticks>
    3bec:	90 93 2f 2a 	sts	0x2A2F, r25	; 0x802a2f <TWI_ticks+0x1>
	USART1_ticks++;
    3bf0:	80 91 30 2a 	lds	r24, 0x2A30	; 0x802a30 <USART1_ticks>
    3bf4:	90 91 31 2a 	lds	r25, 0x2A31	; 0x802a31 <USART1_ticks+0x1>
    3bf8:	01 96       	adiw	r24, 0x01	; 1
    3bfa:	80 93 30 2a 	sts	0x2A30, r24	; 0x802a30 <USART1_ticks>
    3bfe:	90 93 31 2a 	sts	0x2A31, r25	; 0x802a31 <USART1_ticks+0x1>

    3c02:	9f 91       	pop	r25
    3c04:	8f 91       	pop	r24
    3c06:	0f 90       	pop	r0
    3c08:	0f be       	out	0x3f, r0	; 63
    3c0a:	0f 90       	pop	r0
    3c0c:	1f 90       	pop	r1
    3c0e:	18 95       	reti

00003c10 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    3c10:	e0 ea       	ldi	r30, 0xA0	; 160
    3c12:	f8 e0       	ldi	r31, 0x08	; 8
    3c14:	8b e0       	ldi	r24, 0x0B	; 11
    3c16:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    3c18:	83 81       	ldd	r24, Z+3	; 0x03
    3c1a:	81 60       	ori	r24, 0x01	; 1
    3c1c:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    3c1e:	85 81       	ldd	r24, Z+5	; 0x05
    3c20:	81 60       	ori	r24, 0x01	; 1
    3c22:	85 83       	std	Z+5, r24	; 0x05
    3c24:	08 95       	ret

00003c26 <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    3c26:	10 92 2e 2a 	sts	0x2A2E, r1	; 0x802a2e <TWI_ticks>
    3c2a:	10 92 2f 2a 	sts	0x2A2F, r1	; 0x802a2f <TWI_ticks+0x1>
	start_TCB0(1);								// 1 ms ticks
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    3c36:	11 c0       	rjmp	.+34     	; 0x3c5a <read_TWI+0x34>
		asm("nop");
    3c38:	00 00       	nop
		if (TWI_ticks > 50) {					// Typically 0 ticks needed
    3c3a:	80 91 2e 2a 	lds	r24, 0x2A2E	; 0x802a2e <TWI_ticks>
    3c3e:	90 91 2f 2a 	lds	r25, 0x2A2F	; 0x802a2f <TWI_ticks+0x1>
    3c42:	c3 97       	sbiw	r24, 0x33	; 51
    3c44:	50 f0       	brcs	.+20     	; 0x3c5a <read_TWI+0x34>
			printError(ERR_TWI, "read_TWI timeout");
    3c46:	6b e5       	ldi	r22, 0x5B	; 91
    3c48:	7b e9       	ldi	r23, 0x9B	; 155
    3c4a:	81 e9       	ldi	r24, 0x91	; 145
    3c4c:	91 e0       	ldi	r25, 0x01	; 1
    3c4e:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
			stop_TCB0();
    3c52:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <stop_TCB0>
			return(0xFF);
    3c56:	8f ef       	ldi	r24, 0xFF	; 255
    3c58:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    3c5a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3c5e:	88 23       	and	r24, r24
    3c60:	5c f7       	brge	.-42     	; 0x3c38 <read_TWI+0x12>
			printError(ERR_TWI, "read_TWI timeout");
			stop_TCB0();
			return(0xFF);
		}
	}
	stop_TCB0();
    3c62:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <stop_TCB0>

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK
    3c66:	e0 ea       	ldi	r30, 0xA0	; 160
    3c68:	f8 e0       	ldi	r31, 0x08	; 8
    3c6a:	84 81       	ldd	r24, Z+4	; 0x04
    3c6c:	8b 7f       	andi	r24, 0xFB	; 251
    3c6e:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;							// Next read
    3c70:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    3c72:	94 81       	ldd	r25, Z+4	; 0x04
    3c74:	92 60       	ori	r25, 0x02	; 2
    3c76:	94 83       	std	Z+4, r25	; 0x04

	return(data);

}
    3c78:	08 95       	ret

00003c7a <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	TWI_ticks = 0;
    3c7a:	10 92 2e 2a 	sts	0x2A2E, r1	; 0x802a2e <TWI_ticks>
    3c7e:	10 92 2f 2a 	sts	0x2A2F, r1	; 0x802a2f <TWI_ticks+0x1>
	start_TCB0(1);								// 1 ms ticks
    3c82:	81 e0       	ldi	r24, 0x01	; 1
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    3c8a:	11 c0       	rjmp	.+34     	; 0x3cae <readlast_TWI+0x34>
		asm("nop");
    3c8c:	00 00       	nop
		if (TWI_ticks > 50) {						// Typically 0 ticks needed
    3c8e:	80 91 2e 2a 	lds	r24, 0x2A2E	; 0x802a2e <TWI_ticks>
    3c92:	90 91 2f 2a 	lds	r25, 0x2A2F	; 0x802a2f <TWI_ticks+0x1>
    3c96:	c3 97       	sbiw	r24, 0x33	; 51
    3c98:	50 f0       	brcs	.+20     	; 0x3cae <readlast_TWI+0x34>
			printError(ERR_TWI, "readlast timeout");
    3c9a:	6c e6       	ldi	r22, 0x6C	; 108
    3c9c:	7b e9       	ldi	r23, 0x9B	; 155
    3c9e:	81 e9       	ldi	r24, 0x91	; 145
    3ca0:	91 e0       	ldi	r25, 0x01	; 1
    3ca2:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
			stop_TCB0();
    3ca6:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <stop_TCB0>
			return(0xFF);
    3caa:	8f ef       	ldi	r24, 0xFF	; 255
    3cac:	08 95       	ret

	uint8_t data;

	TWI_ticks = 0;
	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    3cae:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3cb2:	88 23       	and	r24, r24
    3cb4:	5c f7       	brge	.-42     	; 0x3c8c <readlast_TWI+0x12>
			printError(ERR_TWI, "readlast timeout");
			stop_TCB0();
			return(0xFF);
		}
	}
	stop_TCB0();
    3cb6:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <stop_TCB0>

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    3cba:	e0 ea       	ldi	r30, 0xA0	; 160
    3cbc:	f8 e0       	ldi	r31, 0x08	; 8
    3cbe:	84 81       	ldd	r24, Z+4	; 0x04
    3cc0:	84 60       	ori	r24, 0x04	; 4
    3cc2:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    3cc4:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    3cc6:	08 95       	ret

00003cc8 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    3cc8:	61 30       	cpi	r22, 0x01	; 1
    3cca:	39 f4       	brne	.+14     	; 0x3cda <start_TWI+0x12>
		TWI0.MADDR = ((addr << 1) | 0x01);
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	88 0f       	add	r24, r24
    3cd0:	99 1f       	adc	r25, r25
    3cd2:	81 60       	ori	r24, 0x01	; 1
    3cd4:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    3cd8:	03 c0       	rjmp	.+6      	; 0x3ce0 <start_TWI+0x18>
	} else {
		TWI0.MADDR = (addr << 1);
    3cda:	88 0f       	add	r24, r24
    3cdc:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
	}

	TWI_ticks = 0;
    3ce0:	10 92 2e 2a 	sts	0x2A2E, r1	; 0x802a2e <TWI_ticks>
    3ce4:	10 92 2f 2a 	sts	0x2A2F, r1	; 0x802a2f <TWI_ticks+0x1>
	start_TCB0(1);								// 1 ms ticks
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <start_TCB0>
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    3cf0:	11 c0       	rjmp	.+34     	; 0x3d14 <start_TWI+0x4c>
		asm("nop");								// Wait for addr transmission
    3cf2:	00 00       	nop
		if (TWI_ticks > 50) {
    3cf4:	80 91 2e 2a 	lds	r24, 0x2A2E	; 0x802a2e <TWI_ticks>
    3cf8:	90 91 2f 2a 	lds	r25, 0x2A2F	; 0x802a2f <TWI_ticks+0x1>
    3cfc:	c3 97       	sbiw	r24, 0x33	; 51
    3cfe:	50 f0       	brcs	.+20     	; 0x3d14 <start_TWI+0x4c>
			printError(ERR_TWI, "TWI start timeout");
    3d00:	6d e7       	ldi	r22, 0x7D	; 125
    3d02:	7b e9       	ldi	r23, 0x9B	; 155
    3d04:	81 e9       	ldi	r24, 0x91	; 145
    3d06:	91 e0       	ldi	r25, 0x01	; 1
    3d08:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
			stop_TCB0();
    3d0c:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <stop_TCB0>
			return(ERROR);
    3d10:	83 e6       	ldi	r24, 0x63	; 99
    3d12:	08 95       	ret
		TWI0.MADDR = (addr << 1);
	}

	TWI_ticks = 0;
	start_TCB0(1);								// 1 ms ticks
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    3d14:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3d18:	80 7c       	andi	r24, 0xC0	; 192
    3d1a:	59 f3       	breq	.-42     	; 0x3cf2 <start_TWI+0x2a>
			printError(ERR_TWI, "TWI start timeout");
			stop_TCB0();
			return(ERROR);
		}
	}
	stop_TCB0();
    3d1c:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <stop_TCB0>

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    3d20:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3d24:	82 ff       	sbrs	r24, 2
    3d26:	08 c0       	rjmp	.+16     	; 0x3d38 <start_TWI+0x70>
		printError(ERR_TWI, "TWI bus");
    3d28:	6f e8       	ldi	r22, 0x8F	; 143
    3d2a:	7b e9       	ldi	r23, 0x9B	; 155
    3d2c:	81 e9       	ldi	r24, 0x91	; 145
    3d2e:	91 e0       	ldi	r25, 0x01	; 1
    3d30:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		return(ERROR);
    3d34:	83 e6       	ldi	r24, 0x63	; 99
    3d36:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    3d38:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3d3c:	83 ff       	sbrs	r24, 3
    3d3e:	08 c0       	rjmp	.+16     	; 0x3d50 <start_TWI+0x88>
		printError(ERR_TWI, "TWI arbitration");
    3d40:	67 e9       	ldi	r22, 0x97	; 151
    3d42:	7b e9       	ldi	r23, 0x9B	; 155
    3d44:	81 e9       	ldi	r24, 0x91	; 145
    3d46:	91 e0       	ldi	r25, 0x01	; 1
    3d48:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		return(ERROR);
    3d4c:	83 e6       	ldi	r24, 0x63	; 99
    3d4e:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    3d50:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3d54:	89 2f       	mov	r24, r25
    3d56:	80 71       	andi	r24, 0x10	; 16
    3d58:	94 ff       	sbrs	r25, 4
    3d5a:	07 c0       	rjmp	.+14     	; 0x3d6a <start_TWI+0xa2>
		printError(ERR_TWI, "TWI no device responded");
    3d5c:	67 ea       	ldi	r22, 0xA7	; 167
    3d5e:	7b e9       	ldi	r23, 0x9B	; 155
    3d60:	81 e9       	ldi	r24, 0x91	; 145
    3d62:	91 e0       	ldi	r25, 0x01	; 1
    3d64:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		return(ERROR);
    3d68:	83 e6       	ldi	r24, 0x63	; 99
	}

	return(NOERROR);

}
    3d6a:	08 95       	ret

00003d6c <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    3d6c:	87 e0       	ldi	r24, 0x07	; 7
    3d6e:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    3d72:	08 95       	ret

00003d74 <write_TWI>:
	is required to get out of the NOP loop at the top.

	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{
    3d74:	cf 93       	push	r28
    3d76:	c8 2f       	mov	r28, r24

	TWI_ticks = 0;
    3d78:	10 92 2e 2a 	sts	0x2A2E, r1	; 0x802a2e <TWI_ticks>
    3d7c:	10 92 2f 2a 	sts	0x2A2F, r1	; 0x802a2f <TWI_ticks+0x1>
	start_TCB0(1);							// 1 ms ticks
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    3d88:	11 c0       	rjmp	.+34     	; 0x3dac <write_TWI+0x38>
		asm("nop");
    3d8a:	00 00       	nop
		if (TWI_ticks > 50) {
    3d8c:	80 91 2e 2a 	lds	r24, 0x2A2E	; 0x802a2e <TWI_ticks>
    3d90:	90 91 2f 2a 	lds	r25, 0x2A2F	; 0x802a2f <TWI_ticks+0x1>
    3d94:	c3 97       	sbiw	r24, 0x33	; 51
    3d96:	50 f0       	brcs	.+20     	; 0x3dac <write_TWI+0x38>
			printError(ERR_TWI, "write_TWI error1");
    3d98:	6f eb       	ldi	r22, 0xBF	; 191
    3d9a:	7b e9       	ldi	r23, 0x9B	; 155
    3d9c:	81 e9       	ldi	r24, 0x91	; 145
    3d9e:	91 e0       	ldi	r25, 0x01	; 1
    3da0:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
			stop_TCB0();
    3da4:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <stop_TCB0>
			return(ERROR);
    3da8:	83 e6       	ldi	r24, 0x63	; 99
    3daa:	35 c0       	rjmp	.+106    	; 0x3e16 <write_TWI+0xa2>
uint8_t write_TWI(uint8_t data)
{

	TWI_ticks = 0;
	start_TCB0(1);							// 1 ms ticks
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    3dac:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3db0:	86 ff       	sbrs	r24, 6
    3db2:	eb cf       	rjmp	.-42     	; 0x3d8a <write_TWI+0x16>
			printError(ERR_TWI, "write_TWI error1");
			stop_TCB0();
			return(ERROR);
		}
	}
	stop_TCB0();
    3db4:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <stop_TCB0>

	TWI0.MDATA = data;
    3db8:	c0 93 a8 08 	sts	0x08A8, r28	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	TWI_ticks = 0;
    3dbc:	10 92 2e 2a 	sts	0x2A2E, r1	; 0x802a2e <TWI_ticks>
    3dc0:	10 92 2f 2a 	sts	0x2A2F, r1	; 0x802a2f <TWI_ticks+0x1>
	start_TCB0(1);
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <start_TCB0>
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    3dcc:	11 c0       	rjmp	.+34     	; 0x3df0 <write_TWI+0x7c>
		asm("nop");
    3dce:	00 00       	nop
		if (TWI_ticks > 50) {
    3dd0:	80 91 2e 2a 	lds	r24, 0x2A2E	; 0x802a2e <TWI_ticks>
    3dd4:	90 91 2f 2a 	lds	r25, 0x2A2F	; 0x802a2f <TWI_ticks+0x1>
    3dd8:	c3 97       	sbiw	r24, 0x33	; 51
    3dda:	50 f0       	brcs	.+20     	; 0x3df0 <write_TWI+0x7c>
			printError(ERR_TWI, "write_TWI error2");
    3ddc:	60 ed       	ldi	r22, 0xD0	; 208
    3dde:	7b e9       	ldi	r23, 0x9B	; 155
    3de0:	81 e9       	ldi	r24, 0x91	; 145
    3de2:	91 e0       	ldi	r25, 0x01	; 1
    3de4:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
			stop_TCB0();
    3de8:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <stop_TCB0>
			return(ERROR);
    3dec:	83 e6       	ldi	r24, 0x63	; 99
    3dee:	13 c0       	rjmp	.+38     	; 0x3e16 <write_TWI+0xa2>

	TWI0.MDATA = data;

	TWI_ticks = 0;
	start_TCB0(1);
	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    3df0:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3df4:	86 ff       	sbrs	r24, 6
    3df6:	eb cf       	rjmp	.-42     	; 0x3dce <write_TWI+0x5a>
			printError(ERR_TWI, "write_TWI error2");
			stop_TCB0();
			return(ERROR);
		}
	}
	stop_TCB0();
    3df8:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <stop_TCB0>

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    3dfc:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    3e00:	89 2f       	mov	r24, r25
    3e02:	80 71       	andi	r24, 0x10	; 16
    3e04:	94 ff       	sbrs	r25, 4
    3e06:	07 c0       	rjmp	.+14     	; 0x3e16 <write_TWI+0xa2>
		printError(ERR_TWI, "ACK not received");
    3e08:	61 ee       	ldi	r22, 0xE1	; 225
    3e0a:	7b e9       	ldi	r23, 0x9B	; 155
    3e0c:	81 e9       	ldi	r24, 0x91	; 145
    3e0e:	91 e0       	ldi	r25, 0x01	; 1
    3e10:	0e 94 9b 06 	call	0xd36	; 0xd36 <printError>
		return(ERROR);
    3e14:	83 e6       	ldi	r24, 0x63	; 99
	} else {
		return(NOERROR);
	}

}
    3e16:	cf 91       	pop	r28
    3e18:	08 95       	ret

00003e1a <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    3e1a:	e0 e0       	ldi	r30, 0x00	; 0
    3e1c:	f4 e0       	ldi	r31, 0x04	; 4
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    3e22:	81 83       	std	Z+1, r24	; 0x01
//	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(115200);
    3e24:	e0 e0       	ldi	r30, 0x00	; 0
    3e26:	f8 e0       	ldi	r31, 0x08	; 8
    3e28:	24 e7       	ldi	r18, 0x74	; 116
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	20 87       	std	Z+8, r18	; 0x08
    3e2e:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    3e30:	95 81       	ldd	r25, Z+5	; 0x05
    3e32:	90 68       	ori	r25, 0x80	; 128
    3e34:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    3e36:	96 81       	ldd	r25, Z+6	; 0x06
    3e38:	90 64       	ori	r25, 0x40	; 64
    3e3a:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    3e3c:	96 81       	ldd	r25, Z+6	; 0x06
    3e3e:	90 68       	ori	r25, 0x80	; 128
    3e40:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;					// Set up send/receive buffers
    3e42:	10 92 3b 2d 	sts	0x2D3B, r1	; 0x802d3b <send0_buf+0xfe>
	send0_buf.tail = 0;
    3e46:	10 92 3c 2d 	sts	0x2D3C, r1	; 0x802d3c <send0_buf+0xff>
	send0_buf.done = YES;
    3e4a:	80 93 40 2d 	sts	0x2D40, r24	; 0x802d40 <send0_buf+0x103>
	recv0_buf.head = 0;
    3e4e:	10 92 37 2c 	sts	0x2C37, r1	; 0x802c37 <recv0_buf+0xfe>
	recv0_buf.tail = 0;
    3e52:	10 92 38 2c 	sts	0x2C38, r1	; 0x802c38 <recv0_buf+0xff>
	recv0_buf.data[0] = '\0';
    3e56:	10 92 39 2b 	sts	0x2B39, r1	; 0x802b39 <recv0_buf>
	recv0_buf.length = 0;
    3e5a:	10 92 3a 2c 	sts	0x2C3A, r1	; 0x802c3a <recv0_buf+0x101>
	recv0_buf.done = NO;
    3e5e:	10 92 3c 2c 	sts	0x2C3C, r1	; 0x802c3c <recv0_buf+0x103>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    3e62:	e0 e4       	ldi	r30, 0x40	; 64
    3e64:	f4 e0       	ldi	r31, 0x04	; 4
    3e66:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    3e68:	81 83       	std	Z+1, r24	; 0x01
//	USART1.BAUD = (uint16_t) USART_BAUD_RATE(38400);
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    3e6a:	e0 e2       	ldi	r30, 0x20	; 32
    3e6c:	f8 e0       	ldi	r31, 0x08	; 8
    3e6e:	2d e6       	ldi	r18, 0x6D	; 109
    3e70:	35 e0       	ldi	r19, 0x05	; 5
    3e72:	20 87       	std	Z+8, r18	; 0x08
    3e74:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    3e76:	95 81       	ldd	r25, Z+5	; 0x05
    3e78:	90 68       	ori	r25, 0x80	; 128
    3e7a:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    3e7c:	96 81       	ldd	r25, Z+6	; 0x06
    3e7e:	90 64       	ori	r25, 0x40	; 64
    3e80:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;		// Enable USART receiver
    3e82:	96 81       	ldd	r25, Z+6	; 0x06
    3e84:	90 68       	ori	r25, 0x80	; 128
    3e86:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    3e88:	10 92 47 30 	sts	0x3047, r1	; 0x803047 <send1_buf+0xfe>
	send1_buf.tail = 0;
    3e8c:	10 92 48 30 	sts	0x3048, r1	; 0x803048 <send1_buf+0xff>
	send1_buf.done = YES;
    3e90:	80 93 4c 30 	sts	0x304C, r24	; 0x80304c <send1_buf+0x103>
	recv1_buf.head = 0;
    3e94:	10 92 33 2b 	sts	0x2B33, r1	; 0x802b33 <recv1_buf+0xfe>
	recv1_buf.tail = 0;
    3e98:	10 92 34 2b 	sts	0x2B34, r1	; 0x802b34 <recv1_buf+0xff>
	recv1_buf.data[0] = '\0';
    3e9c:	10 92 35 2a 	sts	0x2A35, r1	; 0x802a35 <recv1_buf>
	recv1_buf.done = NO;
    3ea0:	10 92 38 2b 	sts	0x2B38, r1	; 0x802b38 <recv1_buf+0x103>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    3ea4:	e0 e2       	ldi	r30, 0x20	; 32
    3ea6:	f4 e0       	ldi	r31, 0x04	; 4
    3ea8:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    3eaa:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    3eac:	e0 e6       	ldi	r30, 0x60	; 96
    3eae:	f8 e0       	ldi	r31, 0x08	; 8
    3eb0:	20 87       	std	Z+8, r18	; 0x08
    3eb2:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    3eb4:	96 81       	ldd	r25, Z+6	; 0x06
    3eb6:	90 64       	ori	r25, 0x40	; 64
    3eb8:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    3eba:	96 81       	ldd	r25, Z+6	; 0x06
    3ebc:	90 68       	ori	r25, 0x80	; 128
    3ebe:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    3ec0:	80 93 48 2f 	sts	0x2F48, r24	; 0x802f48 <send3_buf+0x103>
	recv3_buf.done = NO;
    3ec4:	10 92 44 2e 	sts	0x2E44, r1	; 0x802e44 <recv3_buf+0x103>
    3ec8:	08 95       	ret

00003eca <send_USART>:
		"transmit data register empty" interrupt (DREIE). The USARTn_DRE_vect
		puts the bytes into the transmit register until the tail catches up
		to the head of the circular buffer.
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    3eca:	0f 93       	push	r16
    3ecc:	1f 93       	push	r17
    3ece:	cf 93       	push	r28
    3ed0:	df 93       	push	r29
    3ed2:	eb 01       	movw	r28, r22
    3ed4:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    3ed6:	81 30       	cpi	r24, 0x01	; 1
    3ed8:	d1 f1       	breq	.+116    	; 0x3f4e <send_USART+0x84>
    3eda:	20 f0       	brcs	.+8      	; 0x3ee4 <send_USART+0x1a>
    3edc:	83 30       	cpi	r24, 0x03	; 3
    3ede:	09 f4       	brne	.+2      	; 0x3ee2 <send_USART+0x18>
    3ee0:	85 c0       	rjmp	.+266    	; 0x3fec <send_USART+0x122>
    3ee2:	8c c0       	rjmp	.+280    	; 0x3ffc <send_USART+0x132>
		case 0:
			send0_buf.done = NO;
    3ee4:	10 92 40 2d 	sts	0x2D40, r1	; 0x802d40 <send0_buf+0x103>
			for (i = 0; i < nbytes; i++) {
    3ee8:	20 e0       	ldi	r18, 0x00	; 0
    3eea:	11 c0       	rjmp	.+34     	; 0x3f0e <send_USART+0x44>
				send0_buf.data[send0_buf.head] = *data++;
    3eec:	eb e3       	ldi	r30, 0x3B	; 59
    3eee:	fd e2       	ldi	r31, 0x2D	; 45
    3ef0:	80 81       	ld	r24, Z
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	38 81       	ld	r19, Y
    3ef6:	dc 01       	movw	r26, r24
    3ef8:	a3 5c       	subi	r26, 0xC3	; 195
    3efa:	b3 4d       	sbci	r27, 0xD3	; 211
    3efc:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    3efe:	01 96       	adiw	r24, 0x01	; 1
    3f00:	6e ef       	ldi	r22, 0xFE	; 254
    3f02:	70 e0       	ldi	r23, 0x00	; 0
    3f04:	0e 94 43 27 	call	0x4e86	; 0x4e86 <__divmodhi4>
    3f08:	80 83       	st	Z, r24
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    3f0a:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    3f0c:	21 96       	adiw	r28, 0x01	; 1
	uint16_t crc;

	switch (port) {
		case 0:
			send0_buf.done = NO;
			for (i = 0; i < nbytes; i++) {
    3f0e:	21 17       	cp	r18, r17
    3f10:	68 f3       	brcs	.-38     	; 0x3eec <send_USART+0x22>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3f12:	e0 e0       	ldi	r30, 0x00	; 0
    3f14:	f8 e0       	ldi	r31, 0x08	; 8
    3f16:	85 81       	ldd	r24, Z+5	; 0x05
    3f18:	80 62       	ori	r24, 0x20	; 32
    3f1a:	85 83       	std	Z+5, r24	; 0x05
			start_TCB0(10);						// 10 ms ticks
    3f1c:	8a e0       	ldi	r24, 0x0A	; 10
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <start_TCB0>
			while (send0_buf.done == NO) {
    3f24:	0d c0       	rjmp	.+26     	; 0x3f40 <send_USART+0x76>
				if (ticks > 100) {				// 1 second enough?
    3f26:	80 91 33 2a 	lds	r24, 0x2A33	; 0x802a33 <ticks>
    3f2a:	90 91 34 2a 	lds	r25, 0x2A34	; 0x802a34 <ticks+0x1>
    3f2e:	85 36       	cpi	r24, 0x65	; 101
    3f30:	91 05       	cpc	r25, r1
    3f32:	30 f0       	brcs	.+12     	; 0x3f40 <send_USART+0x76>
					stop_TCB0();
    3f34:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <stop_TCB0>
					send0_buf.done = YES;
    3f38:	81 e0       	ldi	r24, 0x01	; 1
    3f3a:	80 93 40 2d 	sts	0x2D40, r24	; 0x802d40 <send0_buf+0x103>
					return;
    3f3e:	5e c0       	rjmp	.+188    	; 0x3ffc <send_USART+0x132>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			start_TCB0(10);						// 10 ms ticks
			while (send0_buf.done == NO) {
    3f40:	80 91 40 2d 	lds	r24, 0x2D40	; 0x802d40 <send0_buf+0x103>
    3f44:	88 23       	and	r24, r24
    3f46:	79 f3       	breq	.-34     	; 0x3f26 <send_USART+0x5c>
					stop_TCB0();
					send0_buf.done = YES;
					return;
				}
			}
			stop_TCB0();
    3f48:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <stop_TCB0>
			break;
    3f4c:	57 c0       	rjmp	.+174    	; 0x3ffc <send_USART+0x132>

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
    3f4e:	64 2f       	mov	r22, r20
    3f50:	70 e0       	ldi	r23, 0x00	; 0
    3f52:	ce 01       	movw	r24, r28
    3f54:	0e 94 0c 14 	call	0x2818	; 0x2818 <crc16>
    3f58:	48 2f       	mov	r20, r24
    3f5a:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	11 c0       	rjmp	.+34     	; 0x3f82 <send_USART+0xb8>
				send1_buf.data[send1_buf.head] = *data++;
    3f60:	e7 e4       	ldi	r30, 0x47	; 71
    3f62:	f0 e3       	ldi	r31, 0x30	; 48
    3f64:	80 81       	ld	r24, Z
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	38 81       	ld	r19, Y
    3f6a:	dc 01       	movw	r26, r24
    3f6c:	a7 5b       	subi	r26, 0xB7	; 183
    3f6e:	b0 4d       	sbci	r27, 0xD0	; 208
    3f70:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3f72:	01 96       	adiw	r24, 0x01	; 1
    3f74:	6e ef       	ldi	r22, 0xFE	; 254
    3f76:	70 e0       	ldi	r23, 0x00	; 0
    3f78:	0e 94 43 27 	call	0x4e86	; 0x4e86 <__divmodhi4>
    3f7c:	80 83       	st	Z, r24
			stop_TCB0();
			break;

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    3f7e:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    3f80:	21 96       	adiw	r28, 0x01	; 1
			stop_TCB0();
			break;

		case 1:			// Timeouts are handled in caller routines
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    3f82:	21 17       	cp	r18, r17
    3f84:	68 f3       	brcs	.-38     	; 0x3f60 <send_USART+0x96>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    3f86:	e7 e4       	ldi	r30, 0x47	; 71
    3f88:	f0 e3       	ldi	r31, 0x30	; 48
    3f8a:	80 81       	ld	r24, Z
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	dc 01       	movw	r26, r24
    3f90:	a7 5b       	subi	r26, 0xB7	; 183
    3f92:	b0 4d       	sbci	r27, 0xD0	; 208
    3f94:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3f96:	01 96       	adiw	r24, 0x01	; 1
    3f98:	2e ef       	ldi	r18, 0xFE	; 254
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	b9 01       	movw	r22, r18
    3f9e:	0e 94 43 27 	call	0x4e86	; 0x4e86 <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	dc 01       	movw	r26, r24
    3fa6:	a7 5b       	subi	r26, 0xB7	; 183
    3fa8:	b0 4d       	sbci	r27, 0xD0	; 208
    3faa:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    3fac:	01 96       	adiw	r24, 0x01	; 1
    3fae:	b9 01       	movw	r22, r18
    3fb0:	0e 94 43 27 	call	0x4e86	; 0x4e86 <__divmodhi4>
    3fb4:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    3fb6:	1e 5f       	subi	r17, 0xFE	; 254
    3fb8:	10 93 49 30 	sts	0x3049, r17	; 0x803049 <send1_buf+0x100>
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3fbc:	e0 e2       	ldi	r30, 0x20	; 32
    3fbe:	f8 e0       	ldi	r31, 0x08	; 8
    3fc0:	85 81       	ldd	r24, Z+5	; 0x05
    3fc2:	80 62       	ori	r24, 0x20	; 32
    3fc4:	85 83       	std	Z+5, r24	; 0x05
			break;
    3fc6:	1a c0       	rjmp	.+52     	; 0x3ffc <send_USART+0x132>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    3fc8:	e3 e4       	ldi	r30, 0x43	; 67
    3fca:	ff e2       	ldi	r31, 0x2F	; 47
    3fcc:	80 81       	ld	r24, Z
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	38 81       	ld	r19, Y
    3fd2:	dc 01       	movw	r26, r24
    3fd4:	ab 5b       	subi	r26, 0xBB	; 187
    3fd6:	b1 4d       	sbci	r27, 0xD1	; 209
    3fd8:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    3fda:	01 96       	adiw	r24, 0x01	; 1
    3fdc:	6e ef       	ldi	r22, 0xFE	; 254
    3fde:	70 e0       	ldi	r23, 0x00	; 0
    3fe0:	0e 94 43 27 	call	0x4e86	; 0x4e86 <__divmodhi4>
    3fe4:	80 83       	st	Z, r24
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    3fe6:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    3fe8:	21 96       	adiw	r28, 0x01	; 1
    3fea:	01 c0       	rjmp	.+2      	; 0x3fee <send_USART+0x124>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    3fec:	20 e0       	ldi	r18, 0x00	; 0
//			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    3fee:	21 17       	cp	r18, r17
    3ff0:	58 f3       	brcs	.-42     	; 0x3fc8 <send_USART+0xfe>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    3ff2:	e0 e6       	ldi	r30, 0x60	; 96
    3ff4:	f8 e0       	ldi	r31, 0x08	; 8
    3ff6:	85 81       	ldd	r24, Z+5	; 0x05
    3ff8:	80 62       	ori	r24, 0x20	; 32
    3ffa:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    3ffc:	df 91       	pop	r29
    3ffe:	cf 91       	pop	r28
    4000:	1f 91       	pop	r17
    4002:	0f 91       	pop	r16
    4004:	08 95       	ret

00004006 <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    4006:	1f 92       	push	r1
    4008:	0f 92       	push	r0
    400a:	0f b6       	in	r0, 0x3f	; 63
    400c:	0f 92       	push	r0
    400e:	11 24       	eor	r1, r1
    4010:	5f 93       	push	r21
    4012:	6f 93       	push	r22
    4014:	7f 93       	push	r23
    4016:	8f 93       	push	r24
    4018:	9f 93       	push	r25
    401a:	af 93       	push	r26
    401c:	bf 93       	push	r27
    401e:	ef 93       	push	r30
    4020:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    4022:	90 91 00 08 	lds	r25, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if (recv0_buf.length < (BUFSIZE-1)) {		// BUFSIZE-1 to make room for the terminating \0
    4026:	80 91 3a 2c 	lds	r24, 0x2C3A	; 0x802c3a <recv0_buf+0x101>
    402a:	8d 3f       	cpi	r24, 0xFD	; 253
    402c:	10 f5       	brcc	.+68     	; 0x4072 <__vector_17+0x6c>
//		c = USART0.RXDATAL;
		if ((char) c == '\r') {
    402e:	9d 30       	cpi	r25, 0x0D	; 13
    4030:	51 f4       	brne	.+20     	; 0x4046 <__vector_17+0x40>
			recv0_buf.done = YES;
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	80 93 3c 2c 	sts	0x2C3C, r24	; 0x802c3c <recv0_buf+0x103>
			recv0_buf.data[recv0_buf.head] = '\0';
    4038:	e0 91 37 2c 	lds	r30, 0x2C37	; 0x802c37 <recv0_buf+0xfe>
    403c:	f0 e0       	ldi	r31, 0x00	; 0
    403e:	e7 5c       	subi	r30, 0xC7	; 199
    4040:	f4 4d       	sbci	r31, 0xD4	; 212
    4042:	10 82       	st	Z, r1
    4044:	06 c0       	rjmp	.+12     	; 0x4052 <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    4046:	e0 91 37 2c 	lds	r30, 0x2C37	; 0x802c37 <recv0_buf+0xfe>
    404a:	f0 e0       	ldi	r31, 0x00	; 0
    404c:	e7 5c       	subi	r30, 0xC7	; 199
    404e:	f4 4d       	sbci	r31, 0xD4	; 212
    4050:	90 83       	st	Z, r25
		}
		recv0_buf.length++;
    4052:	ea e3       	ldi	r30, 0x3A	; 58
    4054:	fc e2       	ldi	r31, 0x2C	; 44
    4056:	80 81       	ld	r24, Z
    4058:	8f 5f       	subi	r24, 0xFF	; 255
    405a:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    405c:	e7 e3       	ldi	r30, 0x37	; 55
    405e:	fc e2       	ldi	r31, 0x2C	; 44
    4060:	80 81       	ld	r24, Z
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	01 96       	adiw	r24, 0x01	; 1
    4066:	6e ef       	ldi	r22, 0xFE	; 254
    4068:	70 e0       	ldi	r23, 0x00	; 0
    406a:	0e 94 43 27 	call	0x4e86	; 0x4e86 <__divmodhi4>
    406e:	80 83       	st	Z, r24
    4070:	0a c0       	rjmp	.+20     	; 0x4086 <__vector_17+0x80>
	} else {
		recv0_buf.head = 0;
    4072:	10 92 37 2c 	sts	0x2C37, r1	; 0x802c37 <recv0_buf+0xfe>
		recv0_buf.tail = 0;
    4076:	10 92 38 2c 	sts	0x2C38, r1	; 0x802c38 <recv0_buf+0xff>
		recv0_buf.data[0] = '\0';
    407a:	10 92 39 2b 	sts	0x2B39, r1	; 0x802b39 <recv0_buf>
		recv0_buf.length = 0;
    407e:	10 92 3a 2c 	sts	0x2C3A, r1	; 0x802c3a <recv0_buf+0x101>
		recv0_buf.done = NO;
    4082:	10 92 3c 2c 	sts	0x2C3C, r1	; 0x802c3c <recv0_buf+0x103>
	}
}
    4086:	ff 91       	pop	r31
    4088:	ef 91       	pop	r30
    408a:	bf 91       	pop	r27
    408c:	af 91       	pop	r26
    408e:	9f 91       	pop	r25
    4090:	8f 91       	pop	r24
    4092:	7f 91       	pop	r23
    4094:	6f 91       	pop	r22
    4096:	5f 91       	pop	r21
    4098:	0f 90       	pop	r0
    409a:	0f be       	out	0x3f, r0	; 63
    409c:	0f 90       	pop	r0
    409e:	1f 90       	pop	r1
    40a0:	18 95       	reti

000040a2 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    40a2:	1f 92       	push	r1
    40a4:	0f 92       	push	r0
    40a6:	0f b6       	in	r0, 0x3f	; 63
    40a8:	0f 92       	push	r0
    40aa:	11 24       	eor	r1, r1
    40ac:	2f 93       	push	r18
    40ae:	8f 93       	push	r24
    40b0:	9f 93       	push	r25
    40b2:	ef 93       	push	r30
    40b4:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    40b6:	e0 e0       	ldi	r30, 0x00	; 0
    40b8:	f8 e0       	ldi	r31, 0x08	; 8
    40ba:	85 81       	ldd	r24, Z+5	; 0x05
    40bc:	8f 7d       	andi	r24, 0xDF	; 223
    40be:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    40c0:	80 91 3b 2d 	lds	r24, 0x2D3B	; 0x802d3b <send0_buf+0xfe>
    40c4:	e0 91 3c 2d 	lds	r30, 0x2D3C	; 0x802d3c <send0_buf+0xff>
    40c8:	8e 17       	cp	r24, r30
    40ca:	d1 f0       	breq	.+52     	; 0x4100 <__vector_18+0x5e>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    40cc:	81 e0       	ldi	r24, 0x01	; 1
    40ce:	8e 0f       	add	r24, r30
    40d0:	80 93 3c 2d 	sts	0x2D3C, r24	; 0x802d3c <send0_buf+0xff>
    40d4:	f0 e0       	ldi	r31, 0x00	; 0
    40d6:	e3 5c       	subi	r30, 0xC3	; 195
    40d8:	f3 4d       	sbci	r31, 0xD3	; 211
    40da:	90 81       	ld	r25, Z
    40dc:	90 93 02 08 	sts	0x0802, r25	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    40e0:	91 e0       	ldi	r25, 0x01	; 1
    40e2:	8e 3f       	cpi	r24, 0xFE	; 254
    40e4:	08 f4       	brcc	.+2      	; 0x40e8 <__vector_18+0x46>
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	91 95       	neg	r25
    40ea:	29 2f       	mov	r18, r25
    40ec:	22 0f       	add	r18, r18
    40ee:	82 1b       	sub	r24, r18
    40f0:	80 93 3c 2d 	sts	0x2D3C, r24	; 0x802d3c <send0_buf+0xff>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    40f4:	e0 e0       	ldi	r30, 0x00	; 0
    40f6:	f8 e0       	ldi	r31, 0x08	; 8
    40f8:	85 81       	ldd	r24, Z+5	; 0x05
    40fa:	80 62       	ori	r24, 0x20	; 32
    40fc:	85 83       	std	Z+5, r24	; 0x05
    40fe:	03 c0       	rjmp	.+6      	; 0x4106 <__vector_18+0x64>
	} else {
		send0_buf.done = YES;
    4100:	81 e0       	ldi	r24, 0x01	; 1
    4102:	80 93 40 2d 	sts	0x2D40, r24	; 0x802d40 <send0_buf+0x103>
	}

}
    4106:	ff 91       	pop	r31
    4108:	ef 91       	pop	r30
    410a:	9f 91       	pop	r25
    410c:	8f 91       	pop	r24
    410e:	2f 91       	pop	r18
    4110:	0f 90       	pop	r0
    4112:	0f be       	out	0x3f, r0	; 63
    4114:	0f 90       	pop	r0
    4116:	1f 90       	pop	r1
    4118:	18 95       	reti

0000411a <__vector_26>:
/*------------------------------------------------------------------------------
ISR(USART1_RXC_vect)
	A byte at USART1 has been received.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    411a:	1f 92       	push	r1
    411c:	0f 92       	push	r0
    411e:	0f b6       	in	r0, 0x3f	; 63
    4120:	0f 92       	push	r0
    4122:	11 24       	eor	r1, r1
    4124:	2f 93       	push	r18
    4126:	8f 93       	push	r24
    4128:	9f 93       	push	r25
    412a:	ef 93       	push	r30
    412c:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    412e:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>

	if (recv1_buf.nxfrd < recv1_buf.nbytes) {
    4132:	e0 91 37 2b 	lds	r30, 0x2B37	; 0x802b37 <recv1_buf+0x102>
    4136:	80 91 35 2b 	lds	r24, 0x2B35	; 0x802b35 <recv1_buf+0x100>
    413a:	e8 17       	cp	r30, r24
    413c:	40 f4       	brcc	.+16     	; 0x414e <__vector_26+0x34>
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    413e:	21 e0       	ldi	r18, 0x01	; 1
    4140:	2e 0f       	add	r18, r30
    4142:	20 93 37 2b 	sts	0x2B37, r18	; 0x802b37 <recv1_buf+0x102>
    4146:	f0 e0       	ldi	r31, 0x00	; 0
    4148:	eb 5c       	subi	r30, 0xCB	; 203
    414a:	f5 4d       	sbci	r31, 0xD5	; 213
    414c:	90 83       	st	Z, r25
	}

	if (recv1_buf.nxfrd >= recv1_buf.nbytes) {
    414e:	90 91 37 2b 	lds	r25, 0x2B37	; 0x802b37 <recv1_buf+0x102>
    4152:	98 17       	cp	r25, r24
    4154:	18 f0       	brcs	.+6      	; 0x415c <__vector_26+0x42>
		recv1_buf.done = YES;
    4156:	81 e0       	ldi	r24, 0x01	; 1
    4158:	80 93 38 2b 	sts	0x2B38, r24	; 0x802b38 <recv1_buf+0x103>
	}

}
    415c:	ff 91       	pop	r31
    415e:	ef 91       	pop	r30
    4160:	9f 91       	pop	r25
    4162:	8f 91       	pop	r24
    4164:	2f 91       	pop	r18
    4166:	0f 90       	pop	r0
    4168:	0f be       	out	0x3f, r0	; 63
    416a:	0f 90       	pop	r0
    416c:	1f 90       	pop	r1
    416e:	18 95       	reti

00004170 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    4170:	1f 92       	push	r1
    4172:	0f 92       	push	r0
    4174:	0f b6       	in	r0, 0x3f	; 63
    4176:	0f 92       	push	r0
    4178:	11 24       	eor	r1, r1
    417a:	2f 93       	push	r18
    417c:	8f 93       	push	r24
    417e:	9f 93       	push	r25
    4180:	ef 93       	push	r30
    4182:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    4184:	e0 e2       	ldi	r30, 0x20	; 32
    4186:	f8 e0       	ldi	r31, 0x08	; 8
    4188:	85 81       	ldd	r24, Z+5	; 0x05
    418a:	8f 7d       	andi	r24, 0xDF	; 223
    418c:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    418e:	80 91 47 30 	lds	r24, 0x3047	; 0x803047 <send1_buf+0xfe>
    4192:	e0 91 48 30 	lds	r30, 0x3048	; 0x803048 <send1_buf+0xff>
    4196:	8e 17       	cp	r24, r30
    4198:	d1 f0       	breq	.+52     	; 0x41ce <__vector_27+0x5e>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	8e 0f       	add	r24, r30
    419e:	80 93 48 30 	sts	0x3048, r24	; 0x803048 <send1_buf+0xff>
    41a2:	f0 e0       	ldi	r31, 0x00	; 0
    41a4:	e7 5b       	subi	r30, 0xB7	; 183
    41a6:	f0 4d       	sbci	r31, 0xD0	; 208
    41a8:	90 81       	ld	r25, Z
    41aa:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    41ae:	91 e0       	ldi	r25, 0x01	; 1
    41b0:	8e 3f       	cpi	r24, 0xFE	; 254
    41b2:	08 f4       	brcc	.+2      	; 0x41b6 <__vector_27+0x46>
    41b4:	90 e0       	ldi	r25, 0x00	; 0
    41b6:	91 95       	neg	r25
    41b8:	29 2f       	mov	r18, r25
    41ba:	22 0f       	add	r18, r18
    41bc:	82 1b       	sub	r24, r18
    41be:	80 93 48 30 	sts	0x3048, r24	; 0x803048 <send1_buf+0xff>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    41c2:	e0 e2       	ldi	r30, 0x20	; 32
    41c4:	f8 e0       	ldi	r31, 0x08	; 8
    41c6:	85 81       	ldd	r24, Z+5	; 0x05
    41c8:	80 62       	ori	r24, 0x20	; 32
    41ca:	85 83       	std	Z+5, r24	; 0x05
    41cc:	03 c0       	rjmp	.+6      	; 0x41d4 <__vector_27+0x64>
	} else {
		send1_buf.done = YES;
    41ce:	81 e0       	ldi	r24, 0x01	; 1
    41d0:	80 93 4c 30 	sts	0x304C, r24	; 0x80304c <send1_buf+0x103>
	}

}
    41d4:	ff 91       	pop	r31
    41d6:	ef 91       	pop	r30
    41d8:	9f 91       	pop	r25
    41da:	8f 91       	pop	r24
    41dc:	2f 91       	pop	r18
    41de:	0f 90       	pop	r0
    41e0:	0f be       	out	0x3f, r0	; 63
    41e2:	0f 90       	pop	r0
    41e4:	1f 90       	pop	r1
    41e6:	18 95       	reti

000041e8 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    41e8:	1f 92       	push	r1
    41ea:	0f 92       	push	r0
    41ec:	0f b6       	in	r0, 0x3f	; 63
    41ee:	0f 92       	push	r0
    41f0:	11 24       	eor	r1, r1
    41f2:	8f 93       	push	r24
    41f4:	9f 93       	push	r25
    41f6:	af 93       	push	r26
    41f8:	bf 93       	push	r27
    41fa:	ef 93       	push	r30
    41fc:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    41fe:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    4202:	8d 30       	cpi	r24, 0x0D	; 13
    4204:	21 f0       	breq	.+8      	; 0x420e <__vector_37+0x26>
    4206:	e0 91 43 2e 	lds	r30, 0x2E43	; 0x802e43 <recv3_buf+0x102>
    420a:	ed 3f       	cpi	r30, 0xFD	; 253
    420c:	78 f0       	brcs	.+30     	; 0x422c <__vector_37+0x44>
		recv3_buf.done = YES;
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	80 93 44 2e 	sts	0x2E44, r24	; 0x802e44 <recv3_buf+0x103>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    4214:	a3 e4       	ldi	r26, 0x43	; 67
    4216:	be e2       	ldi	r27, 0x2E	; 46
    4218:	8c 91       	ld	r24, X
    421a:	e8 2f       	mov	r30, r24
    421c:	f0 e0       	ldi	r31, 0x00	; 0
    421e:	ef 5b       	subi	r30, 0xBF	; 191
    4220:	f2 4d       	sbci	r31, 0xD2	; 210
    4222:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    4224:	80 93 41 2e 	sts	0x2E41, r24	; 0x802e41 <recv3_buf+0x100>
		recv3_buf.nxfrd = 0;
    4228:	1c 92       	st	X, r1
		return;
    422a:	08 c0       	rjmp	.+16     	; 0x423c <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    422c:	91 e0       	ldi	r25, 0x01	; 1
    422e:	9e 0f       	add	r25, r30
    4230:	90 93 43 2e 	sts	0x2E43, r25	; 0x802e43 <recv3_buf+0x102>
    4234:	f0 e0       	ldi	r31, 0x00	; 0
    4236:	ef 5b       	subi	r30, 0xBF	; 191
    4238:	f2 4d       	sbci	r31, 0xD2	; 210
    423a:	80 83       	st	Z, r24
	}

}
    423c:	ff 91       	pop	r31
    423e:	ef 91       	pop	r30
    4240:	bf 91       	pop	r27
    4242:	af 91       	pop	r26
    4244:	9f 91       	pop	r25
    4246:	8f 91       	pop	r24
    4248:	0f 90       	pop	r0
    424a:	0f be       	out	0x3f, r0	; 63
    424c:	0f 90       	pop	r0
    424e:	1f 90       	pop	r1
    4250:	18 95       	reti

00004252 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    4252:	1f 92       	push	r1
    4254:	0f 92       	push	r0
    4256:	0f b6       	in	r0, 0x3f	; 63
    4258:	0f 92       	push	r0
    425a:	11 24       	eor	r1, r1
    425c:	8f 93       	push	r24
    425e:	9f 93       	push	r25
    4260:	af 93       	push	r26
    4262:	bf 93       	push	r27
    4264:	ef 93       	push	r30
    4266:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    4268:	a7 e4       	ldi	r26, 0x47	; 71
    426a:	bf e2       	ldi	r27, 0x2F	; 47
    426c:	ec 91       	ld	r30, X
    426e:	81 e0       	ldi	r24, 0x01	; 1
    4270:	8e 0f       	add	r24, r30
    4272:	8c 93       	st	X, r24
    4274:	f0 e0       	ldi	r31, 0x00	; 0
    4276:	eb 5b       	subi	r30, 0xBB	; 187
    4278:	f1 4d       	sbci	r31, 0xD1	; 209
    427a:	90 81       	ld	r25, Z
    427c:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    4280:	90 91 45 2f 	lds	r25, 0x2F45	; 0x802f45 <send3_buf+0x100>
    4284:	89 17       	cp	r24, r25
    4286:	40 f0       	brcs	.+16     	; 0x4298 <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    4288:	e0 e6       	ldi	r30, 0x60	; 96
    428a:	f8 e0       	ldi	r31, 0x08	; 8
    428c:	85 81       	ldd	r24, Z+5	; 0x05
    428e:	8f 7d       	andi	r24, 0xDF	; 223
    4290:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	80 93 48 2f 	sts	0x2F48, r24	; 0x802f48 <send3_buf+0x103>
	}

}
    4298:	ff 91       	pop	r31
    429a:	ef 91       	pop	r30
    429c:	bf 91       	pop	r27
    429e:	af 91       	pop	r26
    42a0:	9f 91       	pop	r25
    42a2:	8f 91       	pop	r24
    42a4:	0f 90       	pop	r0
    42a6:	0f be       	out	0x3f, r0	; 63
    42a8:	0f 90       	pop	r0
    42aa:	1f 90       	pop	r1
    42ac:	18 95       	reti

000042ae <reboot>:
#include "wdt.h"

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
    42ae:	88 ed       	ldi	r24, 0xD8	; 216
    42b0:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    42b2:	81 e0       	ldi	r24, 0x01	; 1
    42b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    42b8:	08 95       	ret

000042ba <__vector_29>:

}

ISR(PORTF_PORT_vect)
{
    42ba:	1f 92       	push	r1
    42bc:	0f 92       	push	r0
    42be:	0f b6       	in	r0, 0x3f	; 63
    42c0:	0f 92       	push	r0
    42c2:	11 24       	eor	r1, r1
    42c4:	2f 93       	push	r18
    42c6:	3f 93       	push	r19
    42c8:	4f 93       	push	r20
    42ca:	5f 93       	push	r21
    42cc:	6f 93       	push	r22
    42ce:	7f 93       	push	r23
    42d0:	8f 93       	push	r24
    42d2:	9f 93       	push	r25
    42d4:	af 93       	push	r26
    42d6:	bf 93       	push	r27
    42d8:	ef 93       	push	r30
    42da:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
    42dc:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
    42e0:	86 ff       	sbrs	r24, 6
    42e2:	05 c0       	rjmp	.+10     	; 0x42ee <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
    42e4:	80 e4       	ldi	r24, 0x40	; 64
    42e6:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
    42ea:	0e 94 57 21 	call	0x42ae	; 0x42ae <reboot>
	}

}
    42ee:	ff 91       	pop	r31
    42f0:	ef 91       	pop	r30
    42f2:	bf 91       	pop	r27
    42f4:	af 91       	pop	r26
    42f6:	9f 91       	pop	r25
    42f8:	8f 91       	pop	r24
    42fa:	7f 91       	pop	r23
    42fc:	6f 91       	pop	r22
    42fe:	5f 91       	pop	r21
    4300:	4f 91       	pop	r20
    4302:	3f 91       	pop	r19
    4304:	2f 91       	pop	r18
    4306:	0f 90       	pop	r0
    4308:	0f be       	out	0x3f, r0	; 63
    430a:	0f 90       	pop	r0
    430c:	1f 90       	pop	r1
    430e:	18 95       	reti

00004310 <__subsf3>:
    4310:	50 58       	subi	r21, 0x80	; 128

00004312 <__addsf3>:
    4312:	bb 27       	eor	r27, r27
    4314:	aa 27       	eor	r26, r26
    4316:	0e 94 a0 21 	call	0x4340	; 0x4340 <__addsf3x>
    431a:	0c 94 1a 23 	jmp	0x4634	; 0x4634 <__fp_round>
    431e:	0e 94 0c 23 	call	0x4618	; 0x4618 <__fp_pscA>
    4322:	38 f0       	brcs	.+14     	; 0x4332 <__addsf3+0x20>
    4324:	0e 94 13 23 	call	0x4626	; 0x4626 <__fp_pscB>
    4328:	20 f0       	brcs	.+8      	; 0x4332 <__addsf3+0x20>
    432a:	39 f4       	brne	.+14     	; 0x433a <__addsf3+0x28>
    432c:	9f 3f       	cpi	r25, 0xFF	; 255
    432e:	19 f4       	brne	.+6      	; 0x4336 <__addsf3+0x24>
    4330:	26 f4       	brtc	.+8      	; 0x433a <__addsf3+0x28>
    4332:	0c 94 09 23 	jmp	0x4612	; 0x4612 <__fp_nan>
    4336:	0e f4       	brtc	.+2      	; 0x433a <__addsf3+0x28>
    4338:	e0 95       	com	r30
    433a:	e7 fb       	bst	r30, 7
    433c:	0c 94 03 23 	jmp	0x4606	; 0x4606 <__fp_inf>

00004340 <__addsf3x>:
    4340:	e9 2f       	mov	r30, r25
    4342:	0e 94 2b 23 	call	0x4656	; 0x4656 <__fp_split3>
    4346:	58 f3       	brcs	.-42     	; 0x431e <__addsf3+0xc>
    4348:	ba 17       	cp	r27, r26
    434a:	62 07       	cpc	r22, r18
    434c:	73 07       	cpc	r23, r19
    434e:	84 07       	cpc	r24, r20
    4350:	95 07       	cpc	r25, r21
    4352:	20 f0       	brcs	.+8      	; 0x435c <__addsf3x+0x1c>
    4354:	79 f4       	brne	.+30     	; 0x4374 <__addsf3x+0x34>
    4356:	a6 f5       	brtc	.+104    	; 0x43c0 <__addsf3x+0x80>
    4358:	0c 94 4d 23 	jmp	0x469a	; 0x469a <__fp_zero>
    435c:	0e f4       	brtc	.+2      	; 0x4360 <__addsf3x+0x20>
    435e:	e0 95       	com	r30
    4360:	0b 2e       	mov	r0, r27
    4362:	ba 2f       	mov	r27, r26
    4364:	a0 2d       	mov	r26, r0
    4366:	0b 01       	movw	r0, r22
    4368:	b9 01       	movw	r22, r18
    436a:	90 01       	movw	r18, r0
    436c:	0c 01       	movw	r0, r24
    436e:	ca 01       	movw	r24, r20
    4370:	a0 01       	movw	r20, r0
    4372:	11 24       	eor	r1, r1
    4374:	ff 27       	eor	r31, r31
    4376:	59 1b       	sub	r21, r25
    4378:	99 f0       	breq	.+38     	; 0x43a0 <__addsf3x+0x60>
    437a:	59 3f       	cpi	r21, 0xF9	; 249
    437c:	50 f4       	brcc	.+20     	; 0x4392 <__addsf3x+0x52>
    437e:	50 3e       	cpi	r21, 0xE0	; 224
    4380:	68 f1       	brcs	.+90     	; 0x43dc <__addsf3x+0x9c>
    4382:	1a 16       	cp	r1, r26
    4384:	f0 40       	sbci	r31, 0x00	; 0
    4386:	a2 2f       	mov	r26, r18
    4388:	23 2f       	mov	r18, r19
    438a:	34 2f       	mov	r19, r20
    438c:	44 27       	eor	r20, r20
    438e:	58 5f       	subi	r21, 0xF8	; 248
    4390:	f3 cf       	rjmp	.-26     	; 0x4378 <__addsf3x+0x38>
    4392:	46 95       	lsr	r20
    4394:	37 95       	ror	r19
    4396:	27 95       	ror	r18
    4398:	a7 95       	ror	r26
    439a:	f0 40       	sbci	r31, 0x00	; 0
    439c:	53 95       	inc	r21
    439e:	c9 f7       	brne	.-14     	; 0x4392 <__addsf3x+0x52>
    43a0:	7e f4       	brtc	.+30     	; 0x43c0 <__addsf3x+0x80>
    43a2:	1f 16       	cp	r1, r31
    43a4:	ba 0b       	sbc	r27, r26
    43a6:	62 0b       	sbc	r22, r18
    43a8:	73 0b       	sbc	r23, r19
    43aa:	84 0b       	sbc	r24, r20
    43ac:	ba f0       	brmi	.+46     	; 0x43dc <__addsf3x+0x9c>
    43ae:	91 50       	subi	r25, 0x01	; 1
    43b0:	a1 f0       	breq	.+40     	; 0x43da <__addsf3x+0x9a>
    43b2:	ff 0f       	add	r31, r31
    43b4:	bb 1f       	adc	r27, r27
    43b6:	66 1f       	adc	r22, r22
    43b8:	77 1f       	adc	r23, r23
    43ba:	88 1f       	adc	r24, r24
    43bc:	c2 f7       	brpl	.-16     	; 0x43ae <__addsf3x+0x6e>
    43be:	0e c0       	rjmp	.+28     	; 0x43dc <__addsf3x+0x9c>
    43c0:	ba 0f       	add	r27, r26
    43c2:	62 1f       	adc	r22, r18
    43c4:	73 1f       	adc	r23, r19
    43c6:	84 1f       	adc	r24, r20
    43c8:	48 f4       	brcc	.+18     	; 0x43dc <__addsf3x+0x9c>
    43ca:	87 95       	ror	r24
    43cc:	77 95       	ror	r23
    43ce:	67 95       	ror	r22
    43d0:	b7 95       	ror	r27
    43d2:	f7 95       	ror	r31
    43d4:	9e 3f       	cpi	r25, 0xFE	; 254
    43d6:	08 f0       	brcs	.+2      	; 0x43da <__addsf3x+0x9a>
    43d8:	b0 cf       	rjmp	.-160    	; 0x433a <__addsf3+0x28>
    43da:	93 95       	inc	r25
    43dc:	88 0f       	add	r24, r24
    43de:	08 f0       	brcs	.+2      	; 0x43e2 <__addsf3x+0xa2>
    43e0:	99 27       	eor	r25, r25
    43e2:	ee 0f       	add	r30, r30
    43e4:	97 95       	ror	r25
    43e6:	87 95       	ror	r24
    43e8:	08 95       	ret

000043ea <__cmpsf2>:
    43ea:	0e 94 df 22 	call	0x45be	; 0x45be <__fp_cmp>
    43ee:	08 f4       	brcc	.+2      	; 0x43f2 <__cmpsf2+0x8>
    43f0:	81 e0       	ldi	r24, 0x01	; 1
    43f2:	08 95       	ret

000043f4 <__divsf3>:
    43f4:	0e 94 0e 22 	call	0x441c	; 0x441c <__divsf3x>
    43f8:	0c 94 1a 23 	jmp	0x4634	; 0x4634 <__fp_round>
    43fc:	0e 94 13 23 	call	0x4626	; 0x4626 <__fp_pscB>
    4400:	58 f0       	brcs	.+22     	; 0x4418 <__divsf3+0x24>
    4402:	0e 94 0c 23 	call	0x4618	; 0x4618 <__fp_pscA>
    4406:	40 f0       	brcs	.+16     	; 0x4418 <__divsf3+0x24>
    4408:	29 f4       	brne	.+10     	; 0x4414 <__divsf3+0x20>
    440a:	5f 3f       	cpi	r21, 0xFF	; 255
    440c:	29 f0       	breq	.+10     	; 0x4418 <__divsf3+0x24>
    440e:	0c 94 03 23 	jmp	0x4606	; 0x4606 <__fp_inf>
    4412:	51 11       	cpse	r21, r1
    4414:	0c 94 4e 23 	jmp	0x469c	; 0x469c <__fp_szero>
    4418:	0c 94 09 23 	jmp	0x4612	; 0x4612 <__fp_nan>

0000441c <__divsf3x>:
    441c:	0e 94 2b 23 	call	0x4656	; 0x4656 <__fp_split3>
    4420:	68 f3       	brcs	.-38     	; 0x43fc <__divsf3+0x8>

00004422 <__divsf3_pse>:
    4422:	99 23       	and	r25, r25
    4424:	b1 f3       	breq	.-20     	; 0x4412 <__divsf3+0x1e>
    4426:	55 23       	and	r21, r21
    4428:	91 f3       	breq	.-28     	; 0x440e <__divsf3+0x1a>
    442a:	95 1b       	sub	r25, r21
    442c:	55 0b       	sbc	r21, r21
    442e:	bb 27       	eor	r27, r27
    4430:	aa 27       	eor	r26, r26
    4432:	62 17       	cp	r22, r18
    4434:	73 07       	cpc	r23, r19
    4436:	84 07       	cpc	r24, r20
    4438:	38 f0       	brcs	.+14     	; 0x4448 <__divsf3_pse+0x26>
    443a:	9f 5f       	subi	r25, 0xFF	; 255
    443c:	5f 4f       	sbci	r21, 0xFF	; 255
    443e:	22 0f       	add	r18, r18
    4440:	33 1f       	adc	r19, r19
    4442:	44 1f       	adc	r20, r20
    4444:	aa 1f       	adc	r26, r26
    4446:	a9 f3       	breq	.-22     	; 0x4432 <__divsf3_pse+0x10>
    4448:	35 d0       	rcall	.+106    	; 0x44b4 <__divsf3_pse+0x92>
    444a:	0e 2e       	mov	r0, r30
    444c:	3a f0       	brmi	.+14     	; 0x445c <__divsf3_pse+0x3a>
    444e:	e0 e8       	ldi	r30, 0x80	; 128
    4450:	32 d0       	rcall	.+100    	; 0x44b6 <__divsf3_pse+0x94>
    4452:	91 50       	subi	r25, 0x01	; 1
    4454:	50 40       	sbci	r21, 0x00	; 0
    4456:	e6 95       	lsr	r30
    4458:	00 1c       	adc	r0, r0
    445a:	ca f7       	brpl	.-14     	; 0x444e <__divsf3_pse+0x2c>
    445c:	2b d0       	rcall	.+86     	; 0x44b4 <__divsf3_pse+0x92>
    445e:	fe 2f       	mov	r31, r30
    4460:	29 d0       	rcall	.+82     	; 0x44b4 <__divsf3_pse+0x92>
    4462:	66 0f       	add	r22, r22
    4464:	77 1f       	adc	r23, r23
    4466:	88 1f       	adc	r24, r24
    4468:	bb 1f       	adc	r27, r27
    446a:	26 17       	cp	r18, r22
    446c:	37 07       	cpc	r19, r23
    446e:	48 07       	cpc	r20, r24
    4470:	ab 07       	cpc	r26, r27
    4472:	b0 e8       	ldi	r27, 0x80	; 128
    4474:	09 f0       	breq	.+2      	; 0x4478 <__divsf3_pse+0x56>
    4476:	bb 0b       	sbc	r27, r27
    4478:	80 2d       	mov	r24, r0
    447a:	bf 01       	movw	r22, r30
    447c:	ff 27       	eor	r31, r31
    447e:	93 58       	subi	r25, 0x83	; 131
    4480:	5f 4f       	sbci	r21, 0xFF	; 255
    4482:	3a f0       	brmi	.+14     	; 0x4492 <__divsf3_pse+0x70>
    4484:	9e 3f       	cpi	r25, 0xFE	; 254
    4486:	51 05       	cpc	r21, r1
    4488:	78 f0       	brcs	.+30     	; 0x44a8 <__divsf3_pse+0x86>
    448a:	0c 94 03 23 	jmp	0x4606	; 0x4606 <__fp_inf>
    448e:	0c 94 4e 23 	jmp	0x469c	; 0x469c <__fp_szero>
    4492:	5f 3f       	cpi	r21, 0xFF	; 255
    4494:	e4 f3       	brlt	.-8      	; 0x448e <__divsf3_pse+0x6c>
    4496:	98 3e       	cpi	r25, 0xE8	; 232
    4498:	d4 f3       	brlt	.-12     	; 0x448e <__divsf3_pse+0x6c>
    449a:	86 95       	lsr	r24
    449c:	77 95       	ror	r23
    449e:	67 95       	ror	r22
    44a0:	b7 95       	ror	r27
    44a2:	f7 95       	ror	r31
    44a4:	9f 5f       	subi	r25, 0xFF	; 255
    44a6:	c9 f7       	brne	.-14     	; 0x449a <__divsf3_pse+0x78>
    44a8:	88 0f       	add	r24, r24
    44aa:	91 1d       	adc	r25, r1
    44ac:	96 95       	lsr	r25
    44ae:	87 95       	ror	r24
    44b0:	97 f9       	bld	r25, 7
    44b2:	08 95       	ret
    44b4:	e1 e0       	ldi	r30, 0x01	; 1
    44b6:	66 0f       	add	r22, r22
    44b8:	77 1f       	adc	r23, r23
    44ba:	88 1f       	adc	r24, r24
    44bc:	bb 1f       	adc	r27, r27
    44be:	62 17       	cp	r22, r18
    44c0:	73 07       	cpc	r23, r19
    44c2:	84 07       	cpc	r24, r20
    44c4:	ba 07       	cpc	r27, r26
    44c6:	20 f0       	brcs	.+8      	; 0x44d0 <__divsf3_pse+0xae>
    44c8:	62 1b       	sub	r22, r18
    44ca:	73 0b       	sbc	r23, r19
    44cc:	84 0b       	sbc	r24, r20
    44ce:	ba 0b       	sbc	r27, r26
    44d0:	ee 1f       	adc	r30, r30
    44d2:	88 f7       	brcc	.-30     	; 0x44b6 <__divsf3_pse+0x94>
    44d4:	e0 95       	com	r30
    44d6:	08 95       	ret

000044d8 <__fixsfsi>:
    44d8:	0e 94 73 22 	call	0x44e6	; 0x44e6 <__fixunssfsi>
    44dc:	68 94       	set
    44de:	b1 11       	cpse	r27, r1
    44e0:	0c 94 4e 23 	jmp	0x469c	; 0x469c <__fp_szero>
    44e4:	08 95       	ret

000044e6 <__fixunssfsi>:
    44e6:	0e 94 33 23 	call	0x4666	; 0x4666 <__fp_splitA>
    44ea:	88 f0       	brcs	.+34     	; 0x450e <__fixunssfsi+0x28>
    44ec:	9f 57       	subi	r25, 0x7F	; 127
    44ee:	98 f0       	brcs	.+38     	; 0x4516 <__fixunssfsi+0x30>
    44f0:	b9 2f       	mov	r27, r25
    44f2:	99 27       	eor	r25, r25
    44f4:	b7 51       	subi	r27, 0x17	; 23
    44f6:	b0 f0       	brcs	.+44     	; 0x4524 <__fixunssfsi+0x3e>
    44f8:	e1 f0       	breq	.+56     	; 0x4532 <__fixunssfsi+0x4c>
    44fa:	66 0f       	add	r22, r22
    44fc:	77 1f       	adc	r23, r23
    44fe:	88 1f       	adc	r24, r24
    4500:	99 1f       	adc	r25, r25
    4502:	1a f0       	brmi	.+6      	; 0x450a <__fixunssfsi+0x24>
    4504:	ba 95       	dec	r27
    4506:	c9 f7       	brne	.-14     	; 0x44fa <__fixunssfsi+0x14>
    4508:	14 c0       	rjmp	.+40     	; 0x4532 <__fixunssfsi+0x4c>
    450a:	b1 30       	cpi	r27, 0x01	; 1
    450c:	91 f0       	breq	.+36     	; 0x4532 <__fixunssfsi+0x4c>
    450e:	0e 94 4d 23 	call	0x469a	; 0x469a <__fp_zero>
    4512:	b1 e0       	ldi	r27, 0x01	; 1
    4514:	08 95       	ret
    4516:	0c 94 4d 23 	jmp	0x469a	; 0x469a <__fp_zero>
    451a:	67 2f       	mov	r22, r23
    451c:	78 2f       	mov	r23, r24
    451e:	88 27       	eor	r24, r24
    4520:	b8 5f       	subi	r27, 0xF8	; 248
    4522:	39 f0       	breq	.+14     	; 0x4532 <__fixunssfsi+0x4c>
    4524:	b9 3f       	cpi	r27, 0xF9	; 249
    4526:	cc f3       	brlt	.-14     	; 0x451a <__fixunssfsi+0x34>
    4528:	86 95       	lsr	r24
    452a:	77 95       	ror	r23
    452c:	67 95       	ror	r22
    452e:	b3 95       	inc	r27
    4530:	d9 f7       	brne	.-10     	; 0x4528 <__fixunssfsi+0x42>
    4532:	3e f4       	brtc	.+14     	; 0x4542 <__fixunssfsi+0x5c>
    4534:	90 95       	com	r25
    4536:	80 95       	com	r24
    4538:	70 95       	com	r23
    453a:	61 95       	neg	r22
    453c:	7f 4f       	sbci	r23, 0xFF	; 255
    453e:	8f 4f       	sbci	r24, 0xFF	; 255
    4540:	9f 4f       	sbci	r25, 0xFF	; 255
    4542:	08 95       	ret

00004544 <__floatunsisf>:
    4544:	e8 94       	clt
    4546:	09 c0       	rjmp	.+18     	; 0x455a <__floatsisf+0x12>

00004548 <__floatsisf>:
    4548:	97 fb       	bst	r25, 7
    454a:	3e f4       	brtc	.+14     	; 0x455a <__floatsisf+0x12>
    454c:	90 95       	com	r25
    454e:	80 95       	com	r24
    4550:	70 95       	com	r23
    4552:	61 95       	neg	r22
    4554:	7f 4f       	sbci	r23, 0xFF	; 255
    4556:	8f 4f       	sbci	r24, 0xFF	; 255
    4558:	9f 4f       	sbci	r25, 0xFF	; 255
    455a:	99 23       	and	r25, r25
    455c:	a9 f0       	breq	.+42     	; 0x4588 <__floatsisf+0x40>
    455e:	f9 2f       	mov	r31, r25
    4560:	96 e9       	ldi	r25, 0x96	; 150
    4562:	bb 27       	eor	r27, r27
    4564:	93 95       	inc	r25
    4566:	f6 95       	lsr	r31
    4568:	87 95       	ror	r24
    456a:	77 95       	ror	r23
    456c:	67 95       	ror	r22
    456e:	b7 95       	ror	r27
    4570:	f1 11       	cpse	r31, r1
    4572:	f8 cf       	rjmp	.-16     	; 0x4564 <__floatsisf+0x1c>
    4574:	fa f4       	brpl	.+62     	; 0x45b4 <__floatsisf+0x6c>
    4576:	bb 0f       	add	r27, r27
    4578:	11 f4       	brne	.+4      	; 0x457e <__floatsisf+0x36>
    457a:	60 ff       	sbrs	r22, 0
    457c:	1b c0       	rjmp	.+54     	; 0x45b4 <__floatsisf+0x6c>
    457e:	6f 5f       	subi	r22, 0xFF	; 255
    4580:	7f 4f       	sbci	r23, 0xFF	; 255
    4582:	8f 4f       	sbci	r24, 0xFF	; 255
    4584:	9f 4f       	sbci	r25, 0xFF	; 255
    4586:	16 c0       	rjmp	.+44     	; 0x45b4 <__floatsisf+0x6c>
    4588:	88 23       	and	r24, r24
    458a:	11 f0       	breq	.+4      	; 0x4590 <__floatsisf+0x48>
    458c:	96 e9       	ldi	r25, 0x96	; 150
    458e:	11 c0       	rjmp	.+34     	; 0x45b2 <__floatsisf+0x6a>
    4590:	77 23       	and	r23, r23
    4592:	21 f0       	breq	.+8      	; 0x459c <__floatsisf+0x54>
    4594:	9e e8       	ldi	r25, 0x8E	; 142
    4596:	87 2f       	mov	r24, r23
    4598:	76 2f       	mov	r23, r22
    459a:	05 c0       	rjmp	.+10     	; 0x45a6 <__floatsisf+0x5e>
    459c:	66 23       	and	r22, r22
    459e:	71 f0       	breq	.+28     	; 0x45bc <__floatsisf+0x74>
    45a0:	96 e8       	ldi	r25, 0x86	; 134
    45a2:	86 2f       	mov	r24, r22
    45a4:	70 e0       	ldi	r23, 0x00	; 0
    45a6:	60 e0       	ldi	r22, 0x00	; 0
    45a8:	2a f0       	brmi	.+10     	; 0x45b4 <__floatsisf+0x6c>
    45aa:	9a 95       	dec	r25
    45ac:	66 0f       	add	r22, r22
    45ae:	77 1f       	adc	r23, r23
    45b0:	88 1f       	adc	r24, r24
    45b2:	da f7       	brpl	.-10     	; 0x45aa <__floatsisf+0x62>
    45b4:	88 0f       	add	r24, r24
    45b6:	96 95       	lsr	r25
    45b8:	87 95       	ror	r24
    45ba:	97 f9       	bld	r25, 7
    45bc:	08 95       	ret

000045be <__fp_cmp>:
    45be:	99 0f       	add	r25, r25
    45c0:	00 08       	sbc	r0, r0
    45c2:	55 0f       	add	r21, r21
    45c4:	aa 0b       	sbc	r26, r26
    45c6:	e0 e8       	ldi	r30, 0x80	; 128
    45c8:	fe ef       	ldi	r31, 0xFE	; 254
    45ca:	16 16       	cp	r1, r22
    45cc:	17 06       	cpc	r1, r23
    45ce:	e8 07       	cpc	r30, r24
    45d0:	f9 07       	cpc	r31, r25
    45d2:	c0 f0       	brcs	.+48     	; 0x4604 <__fp_cmp+0x46>
    45d4:	12 16       	cp	r1, r18
    45d6:	13 06       	cpc	r1, r19
    45d8:	e4 07       	cpc	r30, r20
    45da:	f5 07       	cpc	r31, r21
    45dc:	98 f0       	brcs	.+38     	; 0x4604 <__fp_cmp+0x46>
    45de:	62 1b       	sub	r22, r18
    45e0:	73 0b       	sbc	r23, r19
    45e2:	84 0b       	sbc	r24, r20
    45e4:	95 0b       	sbc	r25, r21
    45e6:	39 f4       	brne	.+14     	; 0x45f6 <__fp_cmp+0x38>
    45e8:	0a 26       	eor	r0, r26
    45ea:	61 f0       	breq	.+24     	; 0x4604 <__fp_cmp+0x46>
    45ec:	23 2b       	or	r18, r19
    45ee:	24 2b       	or	r18, r20
    45f0:	25 2b       	or	r18, r21
    45f2:	21 f4       	brne	.+8      	; 0x45fc <__fp_cmp+0x3e>
    45f4:	08 95       	ret
    45f6:	0a 26       	eor	r0, r26
    45f8:	09 f4       	brne	.+2      	; 0x45fc <__fp_cmp+0x3e>
    45fa:	a1 40       	sbci	r26, 0x01	; 1
    45fc:	a6 95       	lsr	r26
    45fe:	8f ef       	ldi	r24, 0xFF	; 255
    4600:	81 1d       	adc	r24, r1
    4602:	81 1d       	adc	r24, r1
    4604:	08 95       	ret

00004606 <__fp_inf>:
    4606:	97 f9       	bld	r25, 7
    4608:	9f 67       	ori	r25, 0x7F	; 127
    460a:	80 e8       	ldi	r24, 0x80	; 128
    460c:	70 e0       	ldi	r23, 0x00	; 0
    460e:	60 e0       	ldi	r22, 0x00	; 0
    4610:	08 95       	ret

00004612 <__fp_nan>:
    4612:	9f ef       	ldi	r25, 0xFF	; 255
    4614:	80 ec       	ldi	r24, 0xC0	; 192
    4616:	08 95       	ret

00004618 <__fp_pscA>:
    4618:	00 24       	eor	r0, r0
    461a:	0a 94       	dec	r0
    461c:	16 16       	cp	r1, r22
    461e:	17 06       	cpc	r1, r23
    4620:	18 06       	cpc	r1, r24
    4622:	09 06       	cpc	r0, r25
    4624:	08 95       	ret

00004626 <__fp_pscB>:
    4626:	00 24       	eor	r0, r0
    4628:	0a 94       	dec	r0
    462a:	12 16       	cp	r1, r18
    462c:	13 06       	cpc	r1, r19
    462e:	14 06       	cpc	r1, r20
    4630:	05 06       	cpc	r0, r21
    4632:	08 95       	ret

00004634 <__fp_round>:
    4634:	09 2e       	mov	r0, r25
    4636:	03 94       	inc	r0
    4638:	00 0c       	add	r0, r0
    463a:	11 f4       	brne	.+4      	; 0x4640 <__fp_round+0xc>
    463c:	88 23       	and	r24, r24
    463e:	52 f0       	brmi	.+20     	; 0x4654 <__fp_round+0x20>
    4640:	bb 0f       	add	r27, r27
    4642:	40 f4       	brcc	.+16     	; 0x4654 <__fp_round+0x20>
    4644:	bf 2b       	or	r27, r31
    4646:	11 f4       	brne	.+4      	; 0x464c <__fp_round+0x18>
    4648:	60 ff       	sbrs	r22, 0
    464a:	04 c0       	rjmp	.+8      	; 0x4654 <__fp_round+0x20>
    464c:	6f 5f       	subi	r22, 0xFF	; 255
    464e:	7f 4f       	sbci	r23, 0xFF	; 255
    4650:	8f 4f       	sbci	r24, 0xFF	; 255
    4652:	9f 4f       	sbci	r25, 0xFF	; 255
    4654:	08 95       	ret

00004656 <__fp_split3>:
    4656:	57 fd       	sbrc	r21, 7
    4658:	90 58       	subi	r25, 0x80	; 128
    465a:	44 0f       	add	r20, r20
    465c:	55 1f       	adc	r21, r21
    465e:	59 f0       	breq	.+22     	; 0x4676 <__fp_splitA+0x10>
    4660:	5f 3f       	cpi	r21, 0xFF	; 255
    4662:	71 f0       	breq	.+28     	; 0x4680 <__fp_splitA+0x1a>
    4664:	47 95       	ror	r20

00004666 <__fp_splitA>:
    4666:	88 0f       	add	r24, r24
    4668:	97 fb       	bst	r25, 7
    466a:	99 1f       	adc	r25, r25
    466c:	61 f0       	breq	.+24     	; 0x4686 <__fp_splitA+0x20>
    466e:	9f 3f       	cpi	r25, 0xFF	; 255
    4670:	79 f0       	breq	.+30     	; 0x4690 <__fp_splitA+0x2a>
    4672:	87 95       	ror	r24
    4674:	08 95       	ret
    4676:	12 16       	cp	r1, r18
    4678:	13 06       	cpc	r1, r19
    467a:	14 06       	cpc	r1, r20
    467c:	55 1f       	adc	r21, r21
    467e:	f2 cf       	rjmp	.-28     	; 0x4664 <__fp_split3+0xe>
    4680:	46 95       	lsr	r20
    4682:	f1 df       	rcall	.-30     	; 0x4666 <__fp_splitA>
    4684:	08 c0       	rjmp	.+16     	; 0x4696 <__fp_splitA+0x30>
    4686:	16 16       	cp	r1, r22
    4688:	17 06       	cpc	r1, r23
    468a:	18 06       	cpc	r1, r24
    468c:	99 1f       	adc	r25, r25
    468e:	f1 cf       	rjmp	.-30     	; 0x4672 <__fp_splitA+0xc>
    4690:	86 95       	lsr	r24
    4692:	71 05       	cpc	r23, r1
    4694:	61 05       	cpc	r22, r1
    4696:	08 94       	sec
    4698:	08 95       	ret

0000469a <__fp_zero>:
    469a:	e8 94       	clt

0000469c <__fp_szero>:
    469c:	bb 27       	eor	r27, r27
    469e:	66 27       	eor	r22, r22
    46a0:	77 27       	eor	r23, r23
    46a2:	cb 01       	movw	r24, r22
    46a4:	97 f9       	bld	r25, 7
    46a6:	08 95       	ret

000046a8 <__gesf2>:
    46a8:	0e 94 df 22 	call	0x45be	; 0x45be <__fp_cmp>
    46ac:	08 f4       	brcc	.+2      	; 0x46b0 <__gesf2+0x8>
    46ae:	8f ef       	ldi	r24, 0xFF	; 255
    46b0:	08 95       	ret

000046b2 <__mulsf3>:
    46b2:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__mulsf3x>
    46b6:	0c 94 1a 23 	jmp	0x4634	; 0x4634 <__fp_round>
    46ba:	0e 94 0c 23 	call	0x4618	; 0x4618 <__fp_pscA>
    46be:	38 f0       	brcs	.+14     	; 0x46ce <__mulsf3+0x1c>
    46c0:	0e 94 13 23 	call	0x4626	; 0x4626 <__fp_pscB>
    46c4:	20 f0       	brcs	.+8      	; 0x46ce <__mulsf3+0x1c>
    46c6:	95 23       	and	r25, r21
    46c8:	11 f0       	breq	.+4      	; 0x46ce <__mulsf3+0x1c>
    46ca:	0c 94 03 23 	jmp	0x4606	; 0x4606 <__fp_inf>
    46ce:	0c 94 09 23 	jmp	0x4612	; 0x4612 <__fp_nan>
    46d2:	11 24       	eor	r1, r1
    46d4:	0c 94 4e 23 	jmp	0x469c	; 0x469c <__fp_szero>

000046d8 <__mulsf3x>:
    46d8:	0e 94 2b 23 	call	0x4656	; 0x4656 <__fp_split3>
    46dc:	70 f3       	brcs	.-36     	; 0x46ba <__mulsf3+0x8>

000046de <__mulsf3_pse>:
    46de:	95 9f       	mul	r25, r21
    46e0:	c1 f3       	breq	.-16     	; 0x46d2 <__mulsf3+0x20>
    46e2:	95 0f       	add	r25, r21
    46e4:	50 e0       	ldi	r21, 0x00	; 0
    46e6:	55 1f       	adc	r21, r21
    46e8:	62 9f       	mul	r22, r18
    46ea:	f0 01       	movw	r30, r0
    46ec:	72 9f       	mul	r23, r18
    46ee:	bb 27       	eor	r27, r27
    46f0:	f0 0d       	add	r31, r0
    46f2:	b1 1d       	adc	r27, r1
    46f4:	63 9f       	mul	r22, r19
    46f6:	aa 27       	eor	r26, r26
    46f8:	f0 0d       	add	r31, r0
    46fa:	b1 1d       	adc	r27, r1
    46fc:	aa 1f       	adc	r26, r26
    46fe:	64 9f       	mul	r22, r20
    4700:	66 27       	eor	r22, r22
    4702:	b0 0d       	add	r27, r0
    4704:	a1 1d       	adc	r26, r1
    4706:	66 1f       	adc	r22, r22
    4708:	82 9f       	mul	r24, r18
    470a:	22 27       	eor	r18, r18
    470c:	b0 0d       	add	r27, r0
    470e:	a1 1d       	adc	r26, r1
    4710:	62 1f       	adc	r22, r18
    4712:	73 9f       	mul	r23, r19
    4714:	b0 0d       	add	r27, r0
    4716:	a1 1d       	adc	r26, r1
    4718:	62 1f       	adc	r22, r18
    471a:	83 9f       	mul	r24, r19
    471c:	a0 0d       	add	r26, r0
    471e:	61 1d       	adc	r22, r1
    4720:	22 1f       	adc	r18, r18
    4722:	74 9f       	mul	r23, r20
    4724:	33 27       	eor	r19, r19
    4726:	a0 0d       	add	r26, r0
    4728:	61 1d       	adc	r22, r1
    472a:	23 1f       	adc	r18, r19
    472c:	84 9f       	mul	r24, r20
    472e:	60 0d       	add	r22, r0
    4730:	21 1d       	adc	r18, r1
    4732:	82 2f       	mov	r24, r18
    4734:	76 2f       	mov	r23, r22
    4736:	6a 2f       	mov	r22, r26
    4738:	11 24       	eor	r1, r1
    473a:	9f 57       	subi	r25, 0x7F	; 127
    473c:	50 40       	sbci	r21, 0x00	; 0
    473e:	9a f0       	brmi	.+38     	; 0x4766 <__mulsf3_pse+0x88>
    4740:	f1 f0       	breq	.+60     	; 0x477e <__mulsf3_pse+0xa0>
    4742:	88 23       	and	r24, r24
    4744:	4a f0       	brmi	.+18     	; 0x4758 <__mulsf3_pse+0x7a>
    4746:	ee 0f       	add	r30, r30
    4748:	ff 1f       	adc	r31, r31
    474a:	bb 1f       	adc	r27, r27
    474c:	66 1f       	adc	r22, r22
    474e:	77 1f       	adc	r23, r23
    4750:	88 1f       	adc	r24, r24
    4752:	91 50       	subi	r25, 0x01	; 1
    4754:	50 40       	sbci	r21, 0x00	; 0
    4756:	a9 f7       	brne	.-22     	; 0x4742 <__mulsf3_pse+0x64>
    4758:	9e 3f       	cpi	r25, 0xFE	; 254
    475a:	51 05       	cpc	r21, r1
    475c:	80 f0       	brcs	.+32     	; 0x477e <__mulsf3_pse+0xa0>
    475e:	0c 94 03 23 	jmp	0x4606	; 0x4606 <__fp_inf>
    4762:	0c 94 4e 23 	jmp	0x469c	; 0x469c <__fp_szero>
    4766:	5f 3f       	cpi	r21, 0xFF	; 255
    4768:	e4 f3       	brlt	.-8      	; 0x4762 <__mulsf3_pse+0x84>
    476a:	98 3e       	cpi	r25, 0xE8	; 232
    476c:	d4 f3       	brlt	.-12     	; 0x4762 <__mulsf3_pse+0x84>
    476e:	86 95       	lsr	r24
    4770:	77 95       	ror	r23
    4772:	67 95       	ror	r22
    4774:	b7 95       	ror	r27
    4776:	f7 95       	ror	r31
    4778:	e7 95       	ror	r30
    477a:	9f 5f       	subi	r25, 0xFF	; 255
    477c:	c1 f7       	brne	.-16     	; 0x476e <__mulsf3_pse+0x90>
    477e:	fe 2b       	or	r31, r30
    4780:	88 0f       	add	r24, r24
    4782:	91 1d       	adc	r25, r1
    4784:	96 95       	lsr	r25
    4786:	87 95       	ror	r24
    4788:	97 f9       	bld	r25, 7
    478a:	08 95       	ret

0000478c <vfprintf>:
    478c:	a0 e1       	ldi	r26, 0x10	; 16
    478e:	b0 e0       	ldi	r27, 0x00	; 0
    4790:	ec ec       	ldi	r30, 0xCC	; 204
    4792:	f3 e2       	ldi	r31, 0x23	; 35
    4794:	0c 94 87 27 	jmp	0x4f0e	; 0x4f0e <__prologue_saves__>
    4798:	7c 01       	movw	r14, r24
    479a:	1b 01       	movw	r2, r22
    479c:	6a 01       	movw	r12, r20
    479e:	fc 01       	movw	r30, r24
    47a0:	16 82       	std	Z+6, r1	; 0x06
    47a2:	17 82       	std	Z+7, r1	; 0x07
    47a4:	83 81       	ldd	r24, Z+3	; 0x03
    47a6:	81 ff       	sbrs	r24, 1
    47a8:	44 c3       	rjmp	.+1672   	; 0x4e32 <vfprintf+0x6a6>
    47aa:	9e 01       	movw	r18, r28
    47ac:	2f 5f       	subi	r18, 0xFF	; 255
    47ae:	3f 4f       	sbci	r19, 0xFF	; 255
    47b0:	39 01       	movw	r6, r18
    47b2:	f7 01       	movw	r30, r14
    47b4:	93 81       	ldd	r25, Z+3	; 0x03
    47b6:	f1 01       	movw	r30, r2
    47b8:	93 fd       	sbrc	r25, 3
    47ba:	85 91       	lpm	r24, Z+
    47bc:	93 ff       	sbrs	r25, 3
    47be:	81 91       	ld	r24, Z+
    47c0:	1f 01       	movw	r2, r30
    47c2:	88 23       	and	r24, r24
    47c4:	09 f4       	brne	.+2      	; 0x47c8 <vfprintf+0x3c>
    47c6:	31 c3       	rjmp	.+1634   	; 0x4e2a <vfprintf+0x69e>
    47c8:	85 32       	cpi	r24, 0x25	; 37
    47ca:	39 f4       	brne	.+14     	; 0x47da <vfprintf+0x4e>
    47cc:	93 fd       	sbrc	r25, 3
    47ce:	85 91       	lpm	r24, Z+
    47d0:	93 ff       	sbrs	r25, 3
    47d2:	81 91       	ld	r24, Z+
    47d4:	1f 01       	movw	r2, r30
    47d6:	85 32       	cpi	r24, 0x25	; 37
    47d8:	39 f4       	brne	.+14     	; 0x47e8 <vfprintf+0x5c>
    47da:	b7 01       	movw	r22, r14
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    47e2:	56 01       	movw	r10, r12
    47e4:	65 01       	movw	r12, r10
    47e6:	e5 cf       	rjmp	.-54     	; 0x47b2 <vfprintf+0x26>
    47e8:	10 e0       	ldi	r17, 0x00	; 0
    47ea:	51 2c       	mov	r5, r1
    47ec:	91 2c       	mov	r9, r1
    47ee:	ff e1       	ldi	r31, 0x1F	; 31
    47f0:	f9 15       	cp	r31, r9
    47f2:	d8 f0       	brcs	.+54     	; 0x482a <vfprintf+0x9e>
    47f4:	8b 32       	cpi	r24, 0x2B	; 43
    47f6:	79 f0       	breq	.+30     	; 0x4816 <vfprintf+0x8a>
    47f8:	38 f4       	brcc	.+14     	; 0x4808 <vfprintf+0x7c>
    47fa:	80 32       	cpi	r24, 0x20	; 32
    47fc:	79 f0       	breq	.+30     	; 0x481c <vfprintf+0x90>
    47fe:	83 32       	cpi	r24, 0x23	; 35
    4800:	a1 f4       	brne	.+40     	; 0x482a <vfprintf+0x9e>
    4802:	f9 2d       	mov	r31, r9
    4804:	f0 61       	ori	r31, 0x10	; 16
    4806:	2e c0       	rjmp	.+92     	; 0x4864 <vfprintf+0xd8>
    4808:	8d 32       	cpi	r24, 0x2D	; 45
    480a:	61 f0       	breq	.+24     	; 0x4824 <vfprintf+0x98>
    480c:	80 33       	cpi	r24, 0x30	; 48
    480e:	69 f4       	brne	.+26     	; 0x482a <vfprintf+0x9e>
    4810:	29 2d       	mov	r18, r9
    4812:	21 60       	ori	r18, 0x01	; 1
    4814:	2d c0       	rjmp	.+90     	; 0x4870 <vfprintf+0xe4>
    4816:	39 2d       	mov	r19, r9
    4818:	32 60       	ori	r19, 0x02	; 2
    481a:	93 2e       	mov	r9, r19
    481c:	89 2d       	mov	r24, r9
    481e:	84 60       	ori	r24, 0x04	; 4
    4820:	98 2e       	mov	r9, r24
    4822:	2a c0       	rjmp	.+84     	; 0x4878 <vfprintf+0xec>
    4824:	e9 2d       	mov	r30, r9
    4826:	e8 60       	ori	r30, 0x08	; 8
    4828:	15 c0       	rjmp	.+42     	; 0x4854 <vfprintf+0xc8>
    482a:	97 fc       	sbrc	r9, 7
    482c:	2d c0       	rjmp	.+90     	; 0x4888 <vfprintf+0xfc>
    482e:	20 ed       	ldi	r18, 0xD0	; 208
    4830:	28 0f       	add	r18, r24
    4832:	2a 30       	cpi	r18, 0x0A	; 10
    4834:	88 f4       	brcc	.+34     	; 0x4858 <vfprintf+0xcc>
    4836:	96 fe       	sbrs	r9, 6
    4838:	06 c0       	rjmp	.+12     	; 0x4846 <vfprintf+0xba>
    483a:	3a e0       	ldi	r19, 0x0A	; 10
    483c:	13 9f       	mul	r17, r19
    483e:	20 0d       	add	r18, r0
    4840:	11 24       	eor	r1, r1
    4842:	12 2f       	mov	r17, r18
    4844:	19 c0       	rjmp	.+50     	; 0x4878 <vfprintf+0xec>
    4846:	8a e0       	ldi	r24, 0x0A	; 10
    4848:	58 9e       	mul	r5, r24
    484a:	20 0d       	add	r18, r0
    484c:	11 24       	eor	r1, r1
    484e:	52 2e       	mov	r5, r18
    4850:	e9 2d       	mov	r30, r9
    4852:	e0 62       	ori	r30, 0x20	; 32
    4854:	9e 2e       	mov	r9, r30
    4856:	10 c0       	rjmp	.+32     	; 0x4878 <vfprintf+0xec>
    4858:	8e 32       	cpi	r24, 0x2E	; 46
    485a:	31 f4       	brne	.+12     	; 0x4868 <vfprintf+0xdc>
    485c:	96 fc       	sbrc	r9, 6
    485e:	e5 c2       	rjmp	.+1482   	; 0x4e2a <vfprintf+0x69e>
    4860:	f9 2d       	mov	r31, r9
    4862:	f0 64       	ori	r31, 0x40	; 64
    4864:	9f 2e       	mov	r9, r31
    4866:	08 c0       	rjmp	.+16     	; 0x4878 <vfprintf+0xec>
    4868:	8c 36       	cpi	r24, 0x6C	; 108
    486a:	21 f4       	brne	.+8      	; 0x4874 <vfprintf+0xe8>
    486c:	29 2d       	mov	r18, r9
    486e:	20 68       	ori	r18, 0x80	; 128
    4870:	92 2e       	mov	r9, r18
    4872:	02 c0       	rjmp	.+4      	; 0x4878 <vfprintf+0xec>
    4874:	88 36       	cpi	r24, 0x68	; 104
    4876:	41 f4       	brne	.+16     	; 0x4888 <vfprintf+0xfc>
    4878:	f1 01       	movw	r30, r2
    487a:	93 fd       	sbrc	r25, 3
    487c:	85 91       	lpm	r24, Z+
    487e:	93 ff       	sbrs	r25, 3
    4880:	81 91       	ld	r24, Z+
    4882:	1f 01       	movw	r2, r30
    4884:	81 11       	cpse	r24, r1
    4886:	b3 cf       	rjmp	.-154    	; 0x47ee <vfprintf+0x62>
    4888:	9b eb       	ldi	r25, 0xBB	; 187
    488a:	98 0f       	add	r25, r24
    488c:	93 30       	cpi	r25, 0x03	; 3
    488e:	20 f4       	brcc	.+8      	; 0x4898 <vfprintf+0x10c>
    4890:	99 2d       	mov	r25, r9
    4892:	90 61       	ori	r25, 0x10	; 16
    4894:	80 5e       	subi	r24, 0xE0	; 224
    4896:	07 c0       	rjmp	.+14     	; 0x48a6 <vfprintf+0x11a>
    4898:	9b e9       	ldi	r25, 0x9B	; 155
    489a:	98 0f       	add	r25, r24
    489c:	93 30       	cpi	r25, 0x03	; 3
    489e:	08 f0       	brcs	.+2      	; 0x48a2 <vfprintf+0x116>
    48a0:	66 c1       	rjmp	.+716    	; 0x4b6e <vfprintf+0x3e2>
    48a2:	99 2d       	mov	r25, r9
    48a4:	9f 7e       	andi	r25, 0xEF	; 239
    48a6:	96 ff       	sbrs	r25, 6
    48a8:	16 e0       	ldi	r17, 0x06	; 6
    48aa:	9f 73       	andi	r25, 0x3F	; 63
    48ac:	99 2e       	mov	r9, r25
    48ae:	85 36       	cpi	r24, 0x65	; 101
    48b0:	19 f4       	brne	.+6      	; 0x48b8 <vfprintf+0x12c>
    48b2:	90 64       	ori	r25, 0x40	; 64
    48b4:	99 2e       	mov	r9, r25
    48b6:	08 c0       	rjmp	.+16     	; 0x48c8 <vfprintf+0x13c>
    48b8:	86 36       	cpi	r24, 0x66	; 102
    48ba:	21 f4       	brne	.+8      	; 0x48c4 <vfprintf+0x138>
    48bc:	39 2f       	mov	r19, r25
    48be:	30 68       	ori	r19, 0x80	; 128
    48c0:	93 2e       	mov	r9, r19
    48c2:	02 c0       	rjmp	.+4      	; 0x48c8 <vfprintf+0x13c>
    48c4:	11 11       	cpse	r17, r1
    48c6:	11 50       	subi	r17, 0x01	; 1
    48c8:	97 fe       	sbrs	r9, 7
    48ca:	07 c0       	rjmp	.+14     	; 0x48da <vfprintf+0x14e>
    48cc:	1c 33       	cpi	r17, 0x3C	; 60
    48ce:	50 f4       	brcc	.+20     	; 0x48e4 <vfprintf+0x158>
    48d0:	44 24       	eor	r4, r4
    48d2:	43 94       	inc	r4
    48d4:	41 0e       	add	r4, r17
    48d6:	27 e0       	ldi	r18, 0x07	; 7
    48d8:	0b c0       	rjmp	.+22     	; 0x48f0 <vfprintf+0x164>
    48da:	18 30       	cpi	r17, 0x08	; 8
    48dc:	38 f0       	brcs	.+14     	; 0x48ec <vfprintf+0x160>
    48de:	27 e0       	ldi	r18, 0x07	; 7
    48e0:	17 e0       	ldi	r17, 0x07	; 7
    48e2:	05 c0       	rjmp	.+10     	; 0x48ee <vfprintf+0x162>
    48e4:	27 e0       	ldi	r18, 0x07	; 7
    48e6:	9c e3       	ldi	r25, 0x3C	; 60
    48e8:	49 2e       	mov	r4, r25
    48ea:	02 c0       	rjmp	.+4      	; 0x48f0 <vfprintf+0x164>
    48ec:	21 2f       	mov	r18, r17
    48ee:	41 2c       	mov	r4, r1
    48f0:	56 01       	movw	r10, r12
    48f2:	84 e0       	ldi	r24, 0x04	; 4
    48f4:	a8 0e       	add	r10, r24
    48f6:	b1 1c       	adc	r11, r1
    48f8:	f6 01       	movw	r30, r12
    48fa:	60 81       	ld	r22, Z
    48fc:	71 81       	ldd	r23, Z+1	; 0x01
    48fe:	82 81       	ldd	r24, Z+2	; 0x02
    4900:	93 81       	ldd	r25, Z+3	; 0x03
    4902:	04 2d       	mov	r16, r4
    4904:	a3 01       	movw	r20, r6
    4906:	0e 94 24 28 	call	0x5048	; 0x5048 <__ftoa_engine>
    490a:	6c 01       	movw	r12, r24
    490c:	f9 81       	ldd	r31, Y+1	; 0x01
    490e:	fc 87       	std	Y+12, r31	; 0x0c
    4910:	f0 ff       	sbrs	r31, 0
    4912:	02 c0       	rjmp	.+4      	; 0x4918 <vfprintf+0x18c>
    4914:	f3 ff       	sbrs	r31, 3
    4916:	06 c0       	rjmp	.+12     	; 0x4924 <vfprintf+0x198>
    4918:	91 fc       	sbrc	r9, 1
    491a:	06 c0       	rjmp	.+12     	; 0x4928 <vfprintf+0x19c>
    491c:	92 fe       	sbrs	r9, 2
    491e:	06 c0       	rjmp	.+12     	; 0x492c <vfprintf+0x1a0>
    4920:	00 e2       	ldi	r16, 0x20	; 32
    4922:	05 c0       	rjmp	.+10     	; 0x492e <vfprintf+0x1a2>
    4924:	0d e2       	ldi	r16, 0x2D	; 45
    4926:	03 c0       	rjmp	.+6      	; 0x492e <vfprintf+0x1a2>
    4928:	0b e2       	ldi	r16, 0x2B	; 43
    492a:	01 c0       	rjmp	.+2      	; 0x492e <vfprintf+0x1a2>
    492c:	00 e0       	ldi	r16, 0x00	; 0
    492e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4930:	8c 70       	andi	r24, 0x0C	; 12
    4932:	19 f0       	breq	.+6      	; 0x493a <vfprintf+0x1ae>
    4934:	01 11       	cpse	r16, r1
    4936:	5a c2       	rjmp	.+1204   	; 0x4dec <vfprintf+0x660>
    4938:	9b c2       	rjmp	.+1334   	; 0x4e70 <vfprintf+0x6e4>
    493a:	97 fe       	sbrs	r9, 7
    493c:	10 c0       	rjmp	.+32     	; 0x495e <vfprintf+0x1d2>
    493e:	4c 0c       	add	r4, r12
    4940:	fc 85       	ldd	r31, Y+12	; 0x0c
    4942:	f4 ff       	sbrs	r31, 4
    4944:	04 c0       	rjmp	.+8      	; 0x494e <vfprintf+0x1c2>
    4946:	8a 81       	ldd	r24, Y+2	; 0x02
    4948:	81 33       	cpi	r24, 0x31	; 49
    494a:	09 f4       	brne	.+2      	; 0x494e <vfprintf+0x1c2>
    494c:	4a 94       	dec	r4
    494e:	14 14       	cp	r1, r4
    4950:	74 f5       	brge	.+92     	; 0x49ae <vfprintf+0x222>
    4952:	28 e0       	ldi	r18, 0x08	; 8
    4954:	24 15       	cp	r18, r4
    4956:	78 f5       	brcc	.+94     	; 0x49b6 <vfprintf+0x22a>
    4958:	88 e0       	ldi	r24, 0x08	; 8
    495a:	48 2e       	mov	r4, r24
    495c:	2c c0       	rjmp	.+88     	; 0x49b6 <vfprintf+0x22a>
    495e:	96 fc       	sbrc	r9, 6
    4960:	2a c0       	rjmp	.+84     	; 0x49b6 <vfprintf+0x22a>
    4962:	81 2f       	mov	r24, r17
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	8c 15       	cp	r24, r12
    4968:	9d 05       	cpc	r25, r13
    496a:	9c f0       	brlt	.+38     	; 0x4992 <vfprintf+0x206>
    496c:	3c ef       	ldi	r19, 0xFC	; 252
    496e:	c3 16       	cp	r12, r19
    4970:	3f ef       	ldi	r19, 0xFF	; 255
    4972:	d3 06       	cpc	r13, r19
    4974:	74 f0       	brlt	.+28     	; 0x4992 <vfprintf+0x206>
    4976:	89 2d       	mov	r24, r9
    4978:	80 68       	ori	r24, 0x80	; 128
    497a:	98 2e       	mov	r9, r24
    497c:	0a c0       	rjmp	.+20     	; 0x4992 <vfprintf+0x206>
    497e:	e2 e0       	ldi	r30, 0x02	; 2
    4980:	f0 e0       	ldi	r31, 0x00	; 0
    4982:	ec 0f       	add	r30, r28
    4984:	fd 1f       	adc	r31, r29
    4986:	e1 0f       	add	r30, r17
    4988:	f1 1d       	adc	r31, r1
    498a:	80 81       	ld	r24, Z
    498c:	80 33       	cpi	r24, 0x30	; 48
    498e:	19 f4       	brne	.+6      	; 0x4996 <vfprintf+0x20a>
    4990:	11 50       	subi	r17, 0x01	; 1
    4992:	11 11       	cpse	r17, r1
    4994:	f4 cf       	rjmp	.-24     	; 0x497e <vfprintf+0x1f2>
    4996:	97 fe       	sbrs	r9, 7
    4998:	0e c0       	rjmp	.+28     	; 0x49b6 <vfprintf+0x22a>
    499a:	44 24       	eor	r4, r4
    499c:	43 94       	inc	r4
    499e:	41 0e       	add	r4, r17
    49a0:	81 2f       	mov	r24, r17
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	c8 16       	cp	r12, r24
    49a6:	d9 06       	cpc	r13, r25
    49a8:	2c f4       	brge	.+10     	; 0x49b4 <vfprintf+0x228>
    49aa:	1c 19       	sub	r17, r12
    49ac:	04 c0       	rjmp	.+8      	; 0x49b6 <vfprintf+0x22a>
    49ae:	44 24       	eor	r4, r4
    49b0:	43 94       	inc	r4
    49b2:	01 c0       	rjmp	.+2      	; 0x49b6 <vfprintf+0x22a>
    49b4:	10 e0       	ldi	r17, 0x00	; 0
    49b6:	97 fe       	sbrs	r9, 7
    49b8:	06 c0       	rjmp	.+12     	; 0x49c6 <vfprintf+0x23a>
    49ba:	1c 14       	cp	r1, r12
    49bc:	1d 04       	cpc	r1, r13
    49be:	34 f4       	brge	.+12     	; 0x49cc <vfprintf+0x240>
    49c0:	c6 01       	movw	r24, r12
    49c2:	01 96       	adiw	r24, 0x01	; 1
    49c4:	05 c0       	rjmp	.+10     	; 0x49d0 <vfprintf+0x244>
    49c6:	85 e0       	ldi	r24, 0x05	; 5
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	02 c0       	rjmp	.+4      	; 0x49d0 <vfprintf+0x244>
    49cc:	81 e0       	ldi	r24, 0x01	; 1
    49ce:	90 e0       	ldi	r25, 0x00	; 0
    49d0:	01 11       	cpse	r16, r1
    49d2:	01 96       	adiw	r24, 0x01	; 1
    49d4:	11 23       	and	r17, r17
    49d6:	31 f0       	breq	.+12     	; 0x49e4 <vfprintf+0x258>
    49d8:	21 2f       	mov	r18, r17
    49da:	30 e0       	ldi	r19, 0x00	; 0
    49dc:	2f 5f       	subi	r18, 0xFF	; 255
    49de:	3f 4f       	sbci	r19, 0xFF	; 255
    49e0:	82 0f       	add	r24, r18
    49e2:	93 1f       	adc	r25, r19
    49e4:	25 2d       	mov	r18, r5
    49e6:	30 e0       	ldi	r19, 0x00	; 0
    49e8:	82 17       	cp	r24, r18
    49ea:	93 07       	cpc	r25, r19
    49ec:	14 f4       	brge	.+4      	; 0x49f2 <vfprintf+0x266>
    49ee:	58 1a       	sub	r5, r24
    49f0:	01 c0       	rjmp	.+2      	; 0x49f4 <vfprintf+0x268>
    49f2:	51 2c       	mov	r5, r1
    49f4:	89 2d       	mov	r24, r9
    49f6:	89 70       	andi	r24, 0x09	; 9
    49f8:	49 f4       	brne	.+18     	; 0x4a0c <vfprintf+0x280>
    49fa:	55 20       	and	r5, r5
    49fc:	39 f0       	breq	.+14     	; 0x4a0c <vfprintf+0x280>
    49fe:	b7 01       	movw	r22, r14
    4a00:	80 e2       	ldi	r24, 0x20	; 32
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4a08:	5a 94       	dec	r5
    4a0a:	f7 cf       	rjmp	.-18     	; 0x49fa <vfprintf+0x26e>
    4a0c:	00 23       	and	r16, r16
    4a0e:	29 f0       	breq	.+10     	; 0x4a1a <vfprintf+0x28e>
    4a10:	b7 01       	movw	r22, r14
    4a12:	80 2f       	mov	r24, r16
    4a14:	90 e0       	ldi	r25, 0x00	; 0
    4a16:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4a1a:	93 fc       	sbrc	r9, 3
    4a1c:	09 c0       	rjmp	.+18     	; 0x4a30 <vfprintf+0x2a4>
    4a1e:	55 20       	and	r5, r5
    4a20:	39 f0       	breq	.+14     	; 0x4a30 <vfprintf+0x2a4>
    4a22:	b7 01       	movw	r22, r14
    4a24:	80 e3       	ldi	r24, 0x30	; 48
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4a2c:	5a 94       	dec	r5
    4a2e:	f7 cf       	rjmp	.-18     	; 0x4a1e <vfprintf+0x292>
    4a30:	97 fe       	sbrs	r9, 7
    4a32:	4c c0       	rjmp	.+152    	; 0x4acc <vfprintf+0x340>
    4a34:	46 01       	movw	r8, r12
    4a36:	d7 fe       	sbrs	r13, 7
    4a38:	02 c0       	rjmp	.+4      	; 0x4a3e <vfprintf+0x2b2>
    4a3a:	81 2c       	mov	r8, r1
    4a3c:	91 2c       	mov	r9, r1
    4a3e:	c6 01       	movw	r24, r12
    4a40:	88 19       	sub	r24, r8
    4a42:	99 09       	sbc	r25, r9
    4a44:	f3 01       	movw	r30, r6
    4a46:	e8 0f       	add	r30, r24
    4a48:	f9 1f       	adc	r31, r25
    4a4a:	ed 87       	std	Y+13, r30	; 0x0d
    4a4c:	fe 87       	std	Y+14, r31	; 0x0e
    4a4e:	96 01       	movw	r18, r12
    4a50:	24 19       	sub	r18, r4
    4a52:	31 09       	sbc	r19, r1
    4a54:	2f 87       	std	Y+15, r18	; 0x0f
    4a56:	38 8b       	std	Y+16, r19	; 0x10
    4a58:	01 2f       	mov	r16, r17
    4a5a:	10 e0       	ldi	r17, 0x00	; 0
    4a5c:	11 95       	neg	r17
    4a5e:	01 95       	neg	r16
    4a60:	11 09       	sbc	r17, r1
    4a62:	3f ef       	ldi	r19, 0xFF	; 255
    4a64:	83 16       	cp	r8, r19
    4a66:	93 06       	cpc	r9, r19
    4a68:	29 f4       	brne	.+10     	; 0x4a74 <vfprintf+0x2e8>
    4a6a:	b7 01       	movw	r22, r14
    4a6c:	8e e2       	ldi	r24, 0x2E	; 46
    4a6e:	90 e0       	ldi	r25, 0x00	; 0
    4a70:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4a74:	c8 14       	cp	r12, r8
    4a76:	d9 04       	cpc	r13, r9
    4a78:	4c f0       	brlt	.+18     	; 0x4a8c <vfprintf+0x300>
    4a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a7c:	98 89       	ldd	r25, Y+16	; 0x10
    4a7e:	88 15       	cp	r24, r8
    4a80:	99 05       	cpc	r25, r9
    4a82:	24 f4       	brge	.+8      	; 0x4a8c <vfprintf+0x300>
    4a84:	ed 85       	ldd	r30, Y+13	; 0x0d
    4a86:	fe 85       	ldd	r31, Y+14	; 0x0e
    4a88:	81 81       	ldd	r24, Z+1	; 0x01
    4a8a:	01 c0       	rjmp	.+2      	; 0x4a8e <vfprintf+0x302>
    4a8c:	80 e3       	ldi	r24, 0x30	; 48
    4a8e:	f1 e0       	ldi	r31, 0x01	; 1
    4a90:	8f 1a       	sub	r8, r31
    4a92:	91 08       	sbc	r9, r1
    4a94:	2d 85       	ldd	r18, Y+13	; 0x0d
    4a96:	3e 85       	ldd	r19, Y+14	; 0x0e
    4a98:	2f 5f       	subi	r18, 0xFF	; 255
    4a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a9c:	2d 87       	std	Y+13, r18	; 0x0d
    4a9e:	3e 87       	std	Y+14, r19	; 0x0e
    4aa0:	80 16       	cp	r8, r16
    4aa2:	91 06       	cpc	r9, r17
    4aa4:	2c f0       	brlt	.+10     	; 0x4ab0 <vfprintf+0x324>
    4aa6:	b7 01       	movw	r22, r14
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4aae:	d9 cf       	rjmp	.-78     	; 0x4a62 <vfprintf+0x2d6>
    4ab0:	c8 14       	cp	r12, r8
    4ab2:	d9 04       	cpc	r13, r9
    4ab4:	41 f4       	brne	.+16     	; 0x4ac6 <vfprintf+0x33a>
    4ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ab8:	96 33       	cpi	r25, 0x36	; 54
    4aba:	20 f4       	brcc	.+8      	; 0x4ac4 <vfprintf+0x338>
    4abc:	95 33       	cpi	r25, 0x35	; 53
    4abe:	19 f4       	brne	.+6      	; 0x4ac6 <vfprintf+0x33a>
    4ac0:	3c 85       	ldd	r19, Y+12	; 0x0c
    4ac2:	34 ff       	sbrs	r19, 4
    4ac4:	81 e3       	ldi	r24, 0x31	; 49
    4ac6:	b7 01       	movw	r22, r14
    4ac8:	90 e0       	ldi	r25, 0x00	; 0
    4aca:	4e c0       	rjmp	.+156    	; 0x4b68 <vfprintf+0x3dc>
    4acc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ace:	81 33       	cpi	r24, 0x31	; 49
    4ad0:	19 f0       	breq	.+6      	; 0x4ad8 <vfprintf+0x34c>
    4ad2:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ad4:	9f 7e       	andi	r25, 0xEF	; 239
    4ad6:	9c 87       	std	Y+12, r25	; 0x0c
    4ad8:	b7 01       	movw	r22, r14
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4ae0:	11 11       	cpse	r17, r1
    4ae2:	05 c0       	rjmp	.+10     	; 0x4aee <vfprintf+0x362>
    4ae4:	94 fc       	sbrc	r9, 4
    4ae6:	18 c0       	rjmp	.+48     	; 0x4b18 <vfprintf+0x38c>
    4ae8:	85 e6       	ldi	r24, 0x65	; 101
    4aea:	90 e0       	ldi	r25, 0x00	; 0
    4aec:	17 c0       	rjmp	.+46     	; 0x4b1c <vfprintf+0x390>
    4aee:	b7 01       	movw	r22, r14
    4af0:	8e e2       	ldi	r24, 0x2E	; 46
    4af2:	90 e0       	ldi	r25, 0x00	; 0
    4af4:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4af8:	1e 5f       	subi	r17, 0xFE	; 254
    4afa:	82 e0       	ldi	r24, 0x02	; 2
    4afc:	01 e0       	ldi	r16, 0x01	; 1
    4afe:	08 0f       	add	r16, r24
    4b00:	f3 01       	movw	r30, r6
    4b02:	e8 0f       	add	r30, r24
    4b04:	f1 1d       	adc	r31, r1
    4b06:	80 81       	ld	r24, Z
    4b08:	b7 01       	movw	r22, r14
    4b0a:	90 e0       	ldi	r25, 0x00	; 0
    4b0c:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4b10:	80 2f       	mov	r24, r16
    4b12:	01 13       	cpse	r16, r17
    4b14:	f3 cf       	rjmp	.-26     	; 0x4afc <vfprintf+0x370>
    4b16:	e6 cf       	rjmp	.-52     	; 0x4ae4 <vfprintf+0x358>
    4b18:	85 e4       	ldi	r24, 0x45	; 69
    4b1a:	90 e0       	ldi	r25, 0x00	; 0
    4b1c:	b7 01       	movw	r22, r14
    4b1e:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4b22:	d7 fc       	sbrc	r13, 7
    4b24:	06 c0       	rjmp	.+12     	; 0x4b32 <vfprintf+0x3a6>
    4b26:	c1 14       	cp	r12, r1
    4b28:	d1 04       	cpc	r13, r1
    4b2a:	41 f4       	brne	.+16     	; 0x4b3c <vfprintf+0x3b0>
    4b2c:	ec 85       	ldd	r30, Y+12	; 0x0c
    4b2e:	e4 ff       	sbrs	r30, 4
    4b30:	05 c0       	rjmp	.+10     	; 0x4b3c <vfprintf+0x3b0>
    4b32:	d1 94       	neg	r13
    4b34:	c1 94       	neg	r12
    4b36:	d1 08       	sbc	r13, r1
    4b38:	8d e2       	ldi	r24, 0x2D	; 45
    4b3a:	01 c0       	rjmp	.+2      	; 0x4b3e <vfprintf+0x3b2>
    4b3c:	8b e2       	ldi	r24, 0x2B	; 43
    4b3e:	b7 01       	movw	r22, r14
    4b40:	90 e0       	ldi	r25, 0x00	; 0
    4b42:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4b46:	80 e3       	ldi	r24, 0x30	; 48
    4b48:	2a e0       	ldi	r18, 0x0A	; 10
    4b4a:	c2 16       	cp	r12, r18
    4b4c:	d1 04       	cpc	r13, r1
    4b4e:	2c f0       	brlt	.+10     	; 0x4b5a <vfprintf+0x3ce>
    4b50:	8f 5f       	subi	r24, 0xFF	; 255
    4b52:	fa e0       	ldi	r31, 0x0A	; 10
    4b54:	cf 1a       	sub	r12, r31
    4b56:	d1 08       	sbc	r13, r1
    4b58:	f7 cf       	rjmp	.-18     	; 0x4b48 <vfprintf+0x3bc>
    4b5a:	b7 01       	movw	r22, r14
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4b62:	b7 01       	movw	r22, r14
    4b64:	c6 01       	movw	r24, r12
    4b66:	c0 96       	adiw	r24, 0x30	; 48
    4b68:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4b6c:	54 c1       	rjmp	.+680    	; 0x4e16 <vfprintf+0x68a>
    4b6e:	83 36       	cpi	r24, 0x63	; 99
    4b70:	31 f0       	breq	.+12     	; 0x4b7e <vfprintf+0x3f2>
    4b72:	83 37       	cpi	r24, 0x73	; 115
    4b74:	79 f0       	breq	.+30     	; 0x4b94 <vfprintf+0x408>
    4b76:	83 35       	cpi	r24, 0x53	; 83
    4b78:	09 f0       	breq	.+2      	; 0x4b7c <vfprintf+0x3f0>
    4b7a:	56 c0       	rjmp	.+172    	; 0x4c28 <vfprintf+0x49c>
    4b7c:	20 c0       	rjmp	.+64     	; 0x4bbe <vfprintf+0x432>
    4b7e:	56 01       	movw	r10, r12
    4b80:	32 e0       	ldi	r19, 0x02	; 2
    4b82:	a3 0e       	add	r10, r19
    4b84:	b1 1c       	adc	r11, r1
    4b86:	f6 01       	movw	r30, r12
    4b88:	80 81       	ld	r24, Z
    4b8a:	89 83       	std	Y+1, r24	; 0x01
    4b8c:	01 e0       	ldi	r16, 0x01	; 1
    4b8e:	10 e0       	ldi	r17, 0x00	; 0
    4b90:	63 01       	movw	r12, r6
    4b92:	12 c0       	rjmp	.+36     	; 0x4bb8 <vfprintf+0x42c>
    4b94:	56 01       	movw	r10, r12
    4b96:	f2 e0       	ldi	r31, 0x02	; 2
    4b98:	af 0e       	add	r10, r31
    4b9a:	b1 1c       	adc	r11, r1
    4b9c:	f6 01       	movw	r30, r12
    4b9e:	c0 80       	ld	r12, Z
    4ba0:	d1 80       	ldd	r13, Z+1	; 0x01
    4ba2:	96 fe       	sbrs	r9, 6
    4ba4:	03 c0       	rjmp	.+6      	; 0x4bac <vfprintf+0x420>
    4ba6:	61 2f       	mov	r22, r17
    4ba8:	70 e0       	ldi	r23, 0x00	; 0
    4baa:	02 c0       	rjmp	.+4      	; 0x4bb0 <vfprintf+0x424>
    4bac:	6f ef       	ldi	r22, 0xFF	; 255
    4bae:	7f ef       	ldi	r23, 0xFF	; 255
    4bb0:	c6 01       	movw	r24, r12
    4bb2:	0e 94 19 29 	call	0x5232	; 0x5232 <strnlen>
    4bb6:	8c 01       	movw	r16, r24
    4bb8:	f9 2d       	mov	r31, r9
    4bba:	ff 77       	andi	r31, 0x7F	; 127
    4bbc:	14 c0       	rjmp	.+40     	; 0x4be6 <vfprintf+0x45a>
    4bbe:	56 01       	movw	r10, r12
    4bc0:	22 e0       	ldi	r18, 0x02	; 2
    4bc2:	a2 0e       	add	r10, r18
    4bc4:	b1 1c       	adc	r11, r1
    4bc6:	f6 01       	movw	r30, r12
    4bc8:	c0 80       	ld	r12, Z
    4bca:	d1 80       	ldd	r13, Z+1	; 0x01
    4bcc:	96 fe       	sbrs	r9, 6
    4bce:	03 c0       	rjmp	.+6      	; 0x4bd6 <vfprintf+0x44a>
    4bd0:	61 2f       	mov	r22, r17
    4bd2:	70 e0       	ldi	r23, 0x00	; 0
    4bd4:	02 c0       	rjmp	.+4      	; 0x4bda <vfprintf+0x44e>
    4bd6:	6f ef       	ldi	r22, 0xFF	; 255
    4bd8:	7f ef       	ldi	r23, 0xFF	; 255
    4bda:	c6 01       	movw	r24, r12
    4bdc:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <strnlen_P>
    4be0:	8c 01       	movw	r16, r24
    4be2:	f9 2d       	mov	r31, r9
    4be4:	f0 68       	ori	r31, 0x80	; 128
    4be6:	9f 2e       	mov	r9, r31
    4be8:	f3 fd       	sbrc	r31, 3
    4bea:	1a c0       	rjmp	.+52     	; 0x4c20 <vfprintf+0x494>
    4bec:	85 2d       	mov	r24, r5
    4bee:	90 e0       	ldi	r25, 0x00	; 0
    4bf0:	08 17       	cp	r16, r24
    4bf2:	19 07       	cpc	r17, r25
    4bf4:	a8 f4       	brcc	.+42     	; 0x4c20 <vfprintf+0x494>
    4bf6:	b7 01       	movw	r22, r14
    4bf8:	80 e2       	ldi	r24, 0x20	; 32
    4bfa:	90 e0       	ldi	r25, 0x00	; 0
    4bfc:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4c00:	5a 94       	dec	r5
    4c02:	f4 cf       	rjmp	.-24     	; 0x4bec <vfprintf+0x460>
    4c04:	f6 01       	movw	r30, r12
    4c06:	97 fc       	sbrc	r9, 7
    4c08:	85 91       	lpm	r24, Z+
    4c0a:	97 fe       	sbrs	r9, 7
    4c0c:	81 91       	ld	r24, Z+
    4c0e:	6f 01       	movw	r12, r30
    4c10:	b7 01       	movw	r22, r14
    4c12:	90 e0       	ldi	r25, 0x00	; 0
    4c14:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4c18:	51 10       	cpse	r5, r1
    4c1a:	5a 94       	dec	r5
    4c1c:	01 50       	subi	r16, 0x01	; 1
    4c1e:	11 09       	sbc	r17, r1
    4c20:	01 15       	cp	r16, r1
    4c22:	11 05       	cpc	r17, r1
    4c24:	79 f7       	brne	.-34     	; 0x4c04 <vfprintf+0x478>
    4c26:	f7 c0       	rjmp	.+494    	; 0x4e16 <vfprintf+0x68a>
    4c28:	84 36       	cpi	r24, 0x64	; 100
    4c2a:	11 f0       	breq	.+4      	; 0x4c30 <vfprintf+0x4a4>
    4c2c:	89 36       	cpi	r24, 0x69	; 105
    4c2e:	61 f5       	brne	.+88     	; 0x4c88 <vfprintf+0x4fc>
    4c30:	56 01       	movw	r10, r12
    4c32:	97 fe       	sbrs	r9, 7
    4c34:	09 c0       	rjmp	.+18     	; 0x4c48 <vfprintf+0x4bc>
    4c36:	24 e0       	ldi	r18, 0x04	; 4
    4c38:	a2 0e       	add	r10, r18
    4c3a:	b1 1c       	adc	r11, r1
    4c3c:	f6 01       	movw	r30, r12
    4c3e:	60 81       	ld	r22, Z
    4c40:	71 81       	ldd	r23, Z+1	; 0x01
    4c42:	82 81       	ldd	r24, Z+2	; 0x02
    4c44:	93 81       	ldd	r25, Z+3	; 0x03
    4c46:	0a c0       	rjmp	.+20     	; 0x4c5c <vfprintf+0x4d0>
    4c48:	f2 e0       	ldi	r31, 0x02	; 2
    4c4a:	af 0e       	add	r10, r31
    4c4c:	b1 1c       	adc	r11, r1
    4c4e:	f6 01       	movw	r30, r12
    4c50:	60 81       	ld	r22, Z
    4c52:	71 81       	ldd	r23, Z+1	; 0x01
    4c54:	07 2e       	mov	r0, r23
    4c56:	00 0c       	add	r0, r0
    4c58:	88 0b       	sbc	r24, r24
    4c5a:	99 0b       	sbc	r25, r25
    4c5c:	f9 2d       	mov	r31, r9
    4c5e:	ff 76       	andi	r31, 0x6F	; 111
    4c60:	9f 2e       	mov	r9, r31
    4c62:	97 ff       	sbrs	r25, 7
    4c64:	09 c0       	rjmp	.+18     	; 0x4c78 <vfprintf+0x4ec>
    4c66:	90 95       	com	r25
    4c68:	80 95       	com	r24
    4c6a:	70 95       	com	r23
    4c6c:	61 95       	neg	r22
    4c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c70:	8f 4f       	sbci	r24, 0xFF	; 255
    4c72:	9f 4f       	sbci	r25, 0xFF	; 255
    4c74:	f0 68       	ori	r31, 0x80	; 128
    4c76:	9f 2e       	mov	r9, r31
    4c78:	2a e0       	ldi	r18, 0x0A	; 10
    4c7a:	30 e0       	ldi	r19, 0x00	; 0
    4c7c:	a3 01       	movw	r20, r6
    4c7e:	0e 94 97 29 	call	0x532e	; 0x532e <__ultoa_invert>
    4c82:	c8 2e       	mov	r12, r24
    4c84:	c6 18       	sub	r12, r6
    4c86:	3f c0       	rjmp	.+126    	; 0x4d06 <vfprintf+0x57a>
    4c88:	09 2d       	mov	r16, r9
    4c8a:	85 37       	cpi	r24, 0x75	; 117
    4c8c:	21 f4       	brne	.+8      	; 0x4c96 <vfprintf+0x50a>
    4c8e:	0f 7e       	andi	r16, 0xEF	; 239
    4c90:	2a e0       	ldi	r18, 0x0A	; 10
    4c92:	30 e0       	ldi	r19, 0x00	; 0
    4c94:	1d c0       	rjmp	.+58     	; 0x4cd0 <vfprintf+0x544>
    4c96:	09 7f       	andi	r16, 0xF9	; 249
    4c98:	8f 36       	cpi	r24, 0x6F	; 111
    4c9a:	91 f0       	breq	.+36     	; 0x4cc0 <vfprintf+0x534>
    4c9c:	18 f4       	brcc	.+6      	; 0x4ca4 <vfprintf+0x518>
    4c9e:	88 35       	cpi	r24, 0x58	; 88
    4ca0:	59 f0       	breq	.+22     	; 0x4cb8 <vfprintf+0x52c>
    4ca2:	c3 c0       	rjmp	.+390    	; 0x4e2a <vfprintf+0x69e>
    4ca4:	80 37       	cpi	r24, 0x70	; 112
    4ca6:	19 f0       	breq	.+6      	; 0x4cae <vfprintf+0x522>
    4ca8:	88 37       	cpi	r24, 0x78	; 120
    4caa:	11 f0       	breq	.+4      	; 0x4cb0 <vfprintf+0x524>
    4cac:	be c0       	rjmp	.+380    	; 0x4e2a <vfprintf+0x69e>
    4cae:	00 61       	ori	r16, 0x10	; 16
    4cb0:	04 ff       	sbrs	r16, 4
    4cb2:	09 c0       	rjmp	.+18     	; 0x4cc6 <vfprintf+0x53a>
    4cb4:	04 60       	ori	r16, 0x04	; 4
    4cb6:	07 c0       	rjmp	.+14     	; 0x4cc6 <vfprintf+0x53a>
    4cb8:	94 fe       	sbrs	r9, 4
    4cba:	08 c0       	rjmp	.+16     	; 0x4ccc <vfprintf+0x540>
    4cbc:	06 60       	ori	r16, 0x06	; 6
    4cbe:	06 c0       	rjmp	.+12     	; 0x4ccc <vfprintf+0x540>
    4cc0:	28 e0       	ldi	r18, 0x08	; 8
    4cc2:	30 e0       	ldi	r19, 0x00	; 0
    4cc4:	05 c0       	rjmp	.+10     	; 0x4cd0 <vfprintf+0x544>
    4cc6:	20 e1       	ldi	r18, 0x10	; 16
    4cc8:	30 e0       	ldi	r19, 0x00	; 0
    4cca:	02 c0       	rjmp	.+4      	; 0x4cd0 <vfprintf+0x544>
    4ccc:	20 e1       	ldi	r18, 0x10	; 16
    4cce:	32 e0       	ldi	r19, 0x02	; 2
    4cd0:	56 01       	movw	r10, r12
    4cd2:	07 ff       	sbrs	r16, 7
    4cd4:	09 c0       	rjmp	.+18     	; 0x4ce8 <vfprintf+0x55c>
    4cd6:	84 e0       	ldi	r24, 0x04	; 4
    4cd8:	a8 0e       	add	r10, r24
    4cda:	b1 1c       	adc	r11, r1
    4cdc:	f6 01       	movw	r30, r12
    4cde:	60 81       	ld	r22, Z
    4ce0:	71 81       	ldd	r23, Z+1	; 0x01
    4ce2:	82 81       	ldd	r24, Z+2	; 0x02
    4ce4:	93 81       	ldd	r25, Z+3	; 0x03
    4ce6:	08 c0       	rjmp	.+16     	; 0x4cf8 <vfprintf+0x56c>
    4ce8:	f2 e0       	ldi	r31, 0x02	; 2
    4cea:	af 0e       	add	r10, r31
    4cec:	b1 1c       	adc	r11, r1
    4cee:	f6 01       	movw	r30, r12
    4cf0:	60 81       	ld	r22, Z
    4cf2:	71 81       	ldd	r23, Z+1	; 0x01
    4cf4:	80 e0       	ldi	r24, 0x00	; 0
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	a3 01       	movw	r20, r6
    4cfa:	0e 94 97 29 	call	0x532e	; 0x532e <__ultoa_invert>
    4cfe:	c8 2e       	mov	r12, r24
    4d00:	c6 18       	sub	r12, r6
    4d02:	0f 77       	andi	r16, 0x7F	; 127
    4d04:	90 2e       	mov	r9, r16
    4d06:	96 fe       	sbrs	r9, 6
    4d08:	0b c0       	rjmp	.+22     	; 0x4d20 <vfprintf+0x594>
    4d0a:	09 2d       	mov	r16, r9
    4d0c:	0e 7f       	andi	r16, 0xFE	; 254
    4d0e:	c1 16       	cp	r12, r17
    4d10:	50 f4       	brcc	.+20     	; 0x4d26 <vfprintf+0x59a>
    4d12:	94 fe       	sbrs	r9, 4
    4d14:	0a c0       	rjmp	.+20     	; 0x4d2a <vfprintf+0x59e>
    4d16:	92 fc       	sbrc	r9, 2
    4d18:	08 c0       	rjmp	.+16     	; 0x4d2a <vfprintf+0x59e>
    4d1a:	09 2d       	mov	r16, r9
    4d1c:	0e 7e       	andi	r16, 0xEE	; 238
    4d1e:	05 c0       	rjmp	.+10     	; 0x4d2a <vfprintf+0x59e>
    4d20:	dc 2c       	mov	r13, r12
    4d22:	09 2d       	mov	r16, r9
    4d24:	03 c0       	rjmp	.+6      	; 0x4d2c <vfprintf+0x5a0>
    4d26:	dc 2c       	mov	r13, r12
    4d28:	01 c0       	rjmp	.+2      	; 0x4d2c <vfprintf+0x5a0>
    4d2a:	d1 2e       	mov	r13, r17
    4d2c:	04 ff       	sbrs	r16, 4
    4d2e:	0d c0       	rjmp	.+26     	; 0x4d4a <vfprintf+0x5be>
    4d30:	fe 01       	movw	r30, r28
    4d32:	ec 0d       	add	r30, r12
    4d34:	f1 1d       	adc	r31, r1
    4d36:	80 81       	ld	r24, Z
    4d38:	80 33       	cpi	r24, 0x30	; 48
    4d3a:	11 f4       	brne	.+4      	; 0x4d40 <vfprintf+0x5b4>
    4d3c:	09 7e       	andi	r16, 0xE9	; 233
    4d3e:	09 c0       	rjmp	.+18     	; 0x4d52 <vfprintf+0x5c6>
    4d40:	02 ff       	sbrs	r16, 2
    4d42:	06 c0       	rjmp	.+12     	; 0x4d50 <vfprintf+0x5c4>
    4d44:	d3 94       	inc	r13
    4d46:	d3 94       	inc	r13
    4d48:	04 c0       	rjmp	.+8      	; 0x4d52 <vfprintf+0x5c6>
    4d4a:	80 2f       	mov	r24, r16
    4d4c:	86 78       	andi	r24, 0x86	; 134
    4d4e:	09 f0       	breq	.+2      	; 0x4d52 <vfprintf+0x5c6>
    4d50:	d3 94       	inc	r13
    4d52:	03 fd       	sbrc	r16, 3
    4d54:	11 c0       	rjmp	.+34     	; 0x4d78 <vfprintf+0x5ec>
    4d56:	00 ff       	sbrs	r16, 0
    4d58:	06 c0       	rjmp	.+12     	; 0x4d66 <vfprintf+0x5da>
    4d5a:	1c 2d       	mov	r17, r12
    4d5c:	d5 14       	cp	r13, r5
    4d5e:	80 f4       	brcc	.+32     	; 0x4d80 <vfprintf+0x5f4>
    4d60:	15 0d       	add	r17, r5
    4d62:	1d 19       	sub	r17, r13
    4d64:	0d c0       	rjmp	.+26     	; 0x4d80 <vfprintf+0x5f4>
    4d66:	d5 14       	cp	r13, r5
    4d68:	58 f4       	brcc	.+22     	; 0x4d80 <vfprintf+0x5f4>
    4d6a:	b7 01       	movw	r22, r14
    4d6c:	80 e2       	ldi	r24, 0x20	; 32
    4d6e:	90 e0       	ldi	r25, 0x00	; 0
    4d70:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4d74:	d3 94       	inc	r13
    4d76:	f7 cf       	rjmp	.-18     	; 0x4d66 <vfprintf+0x5da>
    4d78:	d5 14       	cp	r13, r5
    4d7a:	10 f4       	brcc	.+4      	; 0x4d80 <vfprintf+0x5f4>
    4d7c:	5d 18       	sub	r5, r13
    4d7e:	01 c0       	rjmp	.+2      	; 0x4d82 <vfprintf+0x5f6>
    4d80:	51 2c       	mov	r5, r1
    4d82:	04 ff       	sbrs	r16, 4
    4d84:	10 c0       	rjmp	.+32     	; 0x4da6 <vfprintf+0x61a>
    4d86:	b7 01       	movw	r22, r14
    4d88:	80 e3       	ldi	r24, 0x30	; 48
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4d90:	02 ff       	sbrs	r16, 2
    4d92:	17 c0       	rjmp	.+46     	; 0x4dc2 <vfprintf+0x636>
    4d94:	01 fd       	sbrc	r16, 1
    4d96:	03 c0       	rjmp	.+6      	; 0x4d9e <vfprintf+0x612>
    4d98:	88 e7       	ldi	r24, 0x78	; 120
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	02 c0       	rjmp	.+4      	; 0x4da2 <vfprintf+0x616>
    4d9e:	88 e5       	ldi	r24, 0x58	; 88
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	b7 01       	movw	r22, r14
    4da4:	0c c0       	rjmp	.+24     	; 0x4dbe <vfprintf+0x632>
    4da6:	80 2f       	mov	r24, r16
    4da8:	86 78       	andi	r24, 0x86	; 134
    4daa:	59 f0       	breq	.+22     	; 0x4dc2 <vfprintf+0x636>
    4dac:	01 ff       	sbrs	r16, 1
    4dae:	02 c0       	rjmp	.+4      	; 0x4db4 <vfprintf+0x628>
    4db0:	8b e2       	ldi	r24, 0x2B	; 43
    4db2:	01 c0       	rjmp	.+2      	; 0x4db6 <vfprintf+0x62a>
    4db4:	80 e2       	ldi	r24, 0x20	; 32
    4db6:	07 fd       	sbrc	r16, 7
    4db8:	8d e2       	ldi	r24, 0x2D	; 45
    4dba:	b7 01       	movw	r22, r14
    4dbc:	90 e0       	ldi	r25, 0x00	; 0
    4dbe:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4dc2:	c1 16       	cp	r12, r17
    4dc4:	38 f4       	brcc	.+14     	; 0x4dd4 <vfprintf+0x648>
    4dc6:	b7 01       	movw	r22, r14
    4dc8:	80 e3       	ldi	r24, 0x30	; 48
    4dca:	90 e0       	ldi	r25, 0x00	; 0
    4dcc:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4dd0:	11 50       	subi	r17, 0x01	; 1
    4dd2:	f7 cf       	rjmp	.-18     	; 0x4dc2 <vfprintf+0x636>
    4dd4:	ca 94       	dec	r12
    4dd6:	f3 01       	movw	r30, r6
    4dd8:	ec 0d       	add	r30, r12
    4dda:	f1 1d       	adc	r31, r1
    4ddc:	80 81       	ld	r24, Z
    4dde:	b7 01       	movw	r22, r14
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4de6:	c1 10       	cpse	r12, r1
    4de8:	f5 cf       	rjmp	.-22     	; 0x4dd4 <vfprintf+0x648>
    4dea:	15 c0       	rjmp	.+42     	; 0x4e16 <vfprintf+0x68a>
    4dec:	f4 e0       	ldi	r31, 0x04	; 4
    4dee:	f5 15       	cp	r31, r5
    4df0:	60 f5       	brcc	.+88     	; 0x4e4a <vfprintf+0x6be>
    4df2:	84 e0       	ldi	r24, 0x04	; 4
    4df4:	58 1a       	sub	r5, r24
    4df6:	93 fe       	sbrs	r9, 3
    4df8:	1f c0       	rjmp	.+62     	; 0x4e38 <vfprintf+0x6ac>
    4dfa:	01 11       	cpse	r16, r1
    4dfc:	27 c0       	rjmp	.+78     	; 0x4e4c <vfprintf+0x6c0>
    4dfe:	2c 85       	ldd	r18, Y+12	; 0x0c
    4e00:	23 ff       	sbrs	r18, 3
    4e02:	2a c0       	rjmp	.+84     	; 0x4e58 <vfprintf+0x6cc>
    4e04:	04 e6       	ldi	r16, 0x64	; 100
    4e06:	11 e0       	ldi	r17, 0x01	; 1
    4e08:	39 2d       	mov	r19, r9
    4e0a:	30 71       	andi	r19, 0x10	; 16
    4e0c:	93 2e       	mov	r9, r19
    4e0e:	f8 01       	movw	r30, r16
    4e10:	84 91       	lpm	r24, Z
    4e12:	81 11       	cpse	r24, r1
    4e14:	24 c0       	rjmp	.+72     	; 0x4e5e <vfprintf+0x6d2>
    4e16:	55 20       	and	r5, r5
    4e18:	09 f4       	brne	.+2      	; 0x4e1c <vfprintf+0x690>
    4e1a:	e4 cc       	rjmp	.-1592   	; 0x47e4 <vfprintf+0x58>
    4e1c:	b7 01       	movw	r22, r14
    4e1e:	80 e2       	ldi	r24, 0x20	; 32
    4e20:	90 e0       	ldi	r25, 0x00	; 0
    4e22:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4e26:	5a 94       	dec	r5
    4e28:	f6 cf       	rjmp	.-20     	; 0x4e16 <vfprintf+0x68a>
    4e2a:	f7 01       	movw	r30, r14
    4e2c:	86 81       	ldd	r24, Z+6	; 0x06
    4e2e:	97 81       	ldd	r25, Z+7	; 0x07
    4e30:	26 c0       	rjmp	.+76     	; 0x4e7e <vfprintf+0x6f2>
    4e32:	8f ef       	ldi	r24, 0xFF	; 255
    4e34:	9f ef       	ldi	r25, 0xFF	; 255
    4e36:	23 c0       	rjmp	.+70     	; 0x4e7e <vfprintf+0x6f2>
    4e38:	b7 01       	movw	r22, r14
    4e3a:	80 e2       	ldi	r24, 0x20	; 32
    4e3c:	90 e0       	ldi	r25, 0x00	; 0
    4e3e:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4e42:	5a 94       	dec	r5
    4e44:	51 10       	cpse	r5, r1
    4e46:	f8 cf       	rjmp	.-16     	; 0x4e38 <vfprintf+0x6ac>
    4e48:	d8 cf       	rjmp	.-80     	; 0x4dfa <vfprintf+0x66e>
    4e4a:	51 2c       	mov	r5, r1
    4e4c:	b7 01       	movw	r22, r14
    4e4e:	80 2f       	mov	r24, r16
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4e56:	d3 cf       	rjmp	.-90     	; 0x4dfe <vfprintf+0x672>
    4e58:	08 e6       	ldi	r16, 0x68	; 104
    4e5a:	11 e0       	ldi	r17, 0x01	; 1
    4e5c:	d5 cf       	rjmp	.-86     	; 0x4e08 <vfprintf+0x67c>
    4e5e:	91 10       	cpse	r9, r1
    4e60:	80 52       	subi	r24, 0x20	; 32
    4e62:	b7 01       	movw	r22, r14
    4e64:	90 e0       	ldi	r25, 0x00	; 0
    4e66:	0e 94 39 29 	call	0x5272	; 0x5272 <fputc>
    4e6a:	0f 5f       	subi	r16, 0xFF	; 255
    4e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    4e6e:	cf cf       	rjmp	.-98     	; 0x4e0e <vfprintf+0x682>
    4e70:	23 e0       	ldi	r18, 0x03	; 3
    4e72:	25 15       	cp	r18, r5
    4e74:	10 f4       	brcc	.+4      	; 0x4e7a <vfprintf+0x6ee>
    4e76:	83 e0       	ldi	r24, 0x03	; 3
    4e78:	bd cf       	rjmp	.-134    	; 0x4df4 <vfprintf+0x668>
    4e7a:	51 2c       	mov	r5, r1
    4e7c:	c0 cf       	rjmp	.-128    	; 0x4dfe <vfprintf+0x672>
    4e7e:	60 96       	adiw	r28, 0x10	; 16
    4e80:	e2 e1       	ldi	r30, 0x12	; 18
    4e82:	0c 94 a0 27 	jmp	0x4f40	; 0x4f40 <__epilogue_restores__>

00004e86 <__divmodhi4>:
    4e86:	97 fb       	bst	r25, 7
    4e88:	07 2e       	mov	r0, r23
    4e8a:	16 f4       	brtc	.+4      	; 0x4e90 <__divmodhi4+0xa>
    4e8c:	00 94       	com	r0
    4e8e:	07 d0       	rcall	.+14     	; 0x4e9e <__divmodhi4_neg1>
    4e90:	77 fd       	sbrc	r23, 7
    4e92:	09 d0       	rcall	.+18     	; 0x4ea6 <__divmodhi4_neg2>
    4e94:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <__udivmodhi4>
    4e98:	07 fc       	sbrc	r0, 7
    4e9a:	05 d0       	rcall	.+10     	; 0x4ea6 <__divmodhi4_neg2>
    4e9c:	3e f4       	brtc	.+14     	; 0x4eac <__divmodhi4_exit>

00004e9e <__divmodhi4_neg1>:
    4e9e:	90 95       	com	r25
    4ea0:	81 95       	neg	r24
    4ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ea4:	08 95       	ret

00004ea6 <__divmodhi4_neg2>:
    4ea6:	70 95       	com	r23
    4ea8:	61 95       	neg	r22
    4eaa:	7f 4f       	sbci	r23, 0xFF	; 255

00004eac <__divmodhi4_exit>:
    4eac:	08 95       	ret

00004eae <__divmodsi4>:
    4eae:	05 2e       	mov	r0, r21
    4eb0:	97 fb       	bst	r25, 7
    4eb2:	1e f4       	brtc	.+6      	; 0x4eba <__divmodsi4+0xc>
    4eb4:	00 94       	com	r0
    4eb6:	0e 94 6e 27 	call	0x4edc	; 0x4edc <__negsi2>
    4eba:	57 fd       	sbrc	r21, 7
    4ebc:	07 d0       	rcall	.+14     	; 0x4ecc <__divmodsi4_neg2>
    4ebe:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <__udivmodsi4>
    4ec2:	07 fc       	sbrc	r0, 7
    4ec4:	03 d0       	rcall	.+6      	; 0x4ecc <__divmodsi4_neg2>
    4ec6:	4e f4       	brtc	.+18     	; 0x4eda <__divmodsi4_exit>
    4ec8:	0c 94 6e 27 	jmp	0x4edc	; 0x4edc <__negsi2>

00004ecc <__divmodsi4_neg2>:
    4ecc:	50 95       	com	r21
    4ece:	40 95       	com	r20
    4ed0:	30 95       	com	r19
    4ed2:	21 95       	neg	r18
    4ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ed6:	4f 4f       	sbci	r20, 0xFF	; 255
    4ed8:	5f 4f       	sbci	r21, 0xFF	; 255

00004eda <__divmodsi4_exit>:
    4eda:	08 95       	ret

00004edc <__negsi2>:
    4edc:	90 95       	com	r25
    4ede:	80 95       	com	r24
    4ee0:	70 95       	com	r23
    4ee2:	61 95       	neg	r22
    4ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ee6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    4eea:	08 95       	ret

00004eec <__tablejump2__>:
    4eec:	ee 0f       	add	r30, r30
    4eee:	ff 1f       	adc	r31, r31
    4ef0:	05 90       	lpm	r0, Z+
    4ef2:	f4 91       	lpm	r31, Z
    4ef4:	e0 2d       	mov	r30, r0
    4ef6:	09 94       	ijmp

00004ef8 <__muluhisi3>:
    4ef8:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <__umulhisi3>
    4efc:	a5 9f       	mul	r26, r21
    4efe:	90 0d       	add	r25, r0
    4f00:	b4 9f       	mul	r27, r20
    4f02:	90 0d       	add	r25, r0
    4f04:	a4 9f       	mul	r26, r20
    4f06:	80 0d       	add	r24, r0
    4f08:	91 1d       	adc	r25, r1
    4f0a:	11 24       	eor	r1, r1
    4f0c:	08 95       	ret

00004f0e <__prologue_saves__>:
    4f0e:	2f 92       	push	r2
    4f10:	3f 92       	push	r3
    4f12:	4f 92       	push	r4
    4f14:	5f 92       	push	r5
    4f16:	6f 92       	push	r6
    4f18:	7f 92       	push	r7
    4f1a:	8f 92       	push	r8
    4f1c:	9f 92       	push	r9
    4f1e:	af 92       	push	r10
    4f20:	bf 92       	push	r11
    4f22:	cf 92       	push	r12
    4f24:	df 92       	push	r13
    4f26:	ef 92       	push	r14
    4f28:	ff 92       	push	r15
    4f2a:	0f 93       	push	r16
    4f2c:	1f 93       	push	r17
    4f2e:	cf 93       	push	r28
    4f30:	df 93       	push	r29
    4f32:	cd b7       	in	r28, 0x3d	; 61
    4f34:	de b7       	in	r29, 0x3e	; 62
    4f36:	ca 1b       	sub	r28, r26
    4f38:	db 0b       	sbc	r29, r27
    4f3a:	cd bf       	out	0x3d, r28	; 61
    4f3c:	de bf       	out	0x3e, r29	; 62
    4f3e:	09 94       	ijmp

00004f40 <__epilogue_restores__>:
    4f40:	2a 88       	ldd	r2, Y+18	; 0x12
    4f42:	39 88       	ldd	r3, Y+17	; 0x11
    4f44:	48 88       	ldd	r4, Y+16	; 0x10
    4f46:	5f 84       	ldd	r5, Y+15	; 0x0f
    4f48:	6e 84       	ldd	r6, Y+14	; 0x0e
    4f4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    4f4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    4f4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4f50:	aa 84       	ldd	r10, Y+10	; 0x0a
    4f52:	b9 84       	ldd	r11, Y+9	; 0x09
    4f54:	c8 84       	ldd	r12, Y+8	; 0x08
    4f56:	df 80       	ldd	r13, Y+7	; 0x07
    4f58:	ee 80       	ldd	r14, Y+6	; 0x06
    4f5a:	fd 80       	ldd	r15, Y+5	; 0x05
    4f5c:	0c 81       	ldd	r16, Y+4	; 0x04
    4f5e:	1b 81       	ldd	r17, Y+3	; 0x03
    4f60:	aa 81       	ldd	r26, Y+2	; 0x02
    4f62:	b9 81       	ldd	r27, Y+1	; 0x01
    4f64:	ce 0f       	add	r28, r30
    4f66:	d1 1d       	adc	r29, r1
    4f68:	cd bf       	out	0x3d, r28	; 61
    4f6a:	de bf       	out	0x3e, r29	; 62
    4f6c:	ed 01       	movw	r28, r26
    4f6e:	08 95       	ret

00004f70 <__udivmodhi4>:
    4f70:	aa 1b       	sub	r26, r26
    4f72:	bb 1b       	sub	r27, r27
    4f74:	51 e1       	ldi	r21, 0x11	; 17
    4f76:	07 c0       	rjmp	.+14     	; 0x4f86 <__udivmodhi4_ep>

00004f78 <__udivmodhi4_loop>:
    4f78:	aa 1f       	adc	r26, r26
    4f7a:	bb 1f       	adc	r27, r27
    4f7c:	a6 17       	cp	r26, r22
    4f7e:	b7 07       	cpc	r27, r23
    4f80:	10 f0       	brcs	.+4      	; 0x4f86 <__udivmodhi4_ep>
    4f82:	a6 1b       	sub	r26, r22
    4f84:	b7 0b       	sbc	r27, r23

00004f86 <__udivmodhi4_ep>:
    4f86:	88 1f       	adc	r24, r24
    4f88:	99 1f       	adc	r25, r25
    4f8a:	5a 95       	dec	r21
    4f8c:	a9 f7       	brne	.-22     	; 0x4f78 <__udivmodhi4_loop>
    4f8e:	80 95       	com	r24
    4f90:	90 95       	com	r25
    4f92:	bc 01       	movw	r22, r24
    4f94:	cd 01       	movw	r24, r26
    4f96:	08 95       	ret

00004f98 <__udivmodsi4>:
    4f98:	a1 e2       	ldi	r26, 0x21	; 33
    4f9a:	1a 2e       	mov	r1, r26
    4f9c:	aa 1b       	sub	r26, r26
    4f9e:	bb 1b       	sub	r27, r27
    4fa0:	fd 01       	movw	r30, r26
    4fa2:	0d c0       	rjmp	.+26     	; 0x4fbe <__udivmodsi4_ep>

00004fa4 <__udivmodsi4_loop>:
    4fa4:	aa 1f       	adc	r26, r26
    4fa6:	bb 1f       	adc	r27, r27
    4fa8:	ee 1f       	adc	r30, r30
    4faa:	ff 1f       	adc	r31, r31
    4fac:	a2 17       	cp	r26, r18
    4fae:	b3 07       	cpc	r27, r19
    4fb0:	e4 07       	cpc	r30, r20
    4fb2:	f5 07       	cpc	r31, r21
    4fb4:	20 f0       	brcs	.+8      	; 0x4fbe <__udivmodsi4_ep>
    4fb6:	a2 1b       	sub	r26, r18
    4fb8:	b3 0b       	sbc	r27, r19
    4fba:	e4 0b       	sbc	r30, r20
    4fbc:	f5 0b       	sbc	r31, r21

00004fbe <__udivmodsi4_ep>:
    4fbe:	66 1f       	adc	r22, r22
    4fc0:	77 1f       	adc	r23, r23
    4fc2:	88 1f       	adc	r24, r24
    4fc4:	99 1f       	adc	r25, r25
    4fc6:	1a 94       	dec	r1
    4fc8:	69 f7       	brne	.-38     	; 0x4fa4 <__udivmodsi4_loop>
    4fca:	60 95       	com	r22
    4fcc:	70 95       	com	r23
    4fce:	80 95       	com	r24
    4fd0:	90 95       	com	r25
    4fd2:	9b 01       	movw	r18, r22
    4fd4:	ac 01       	movw	r20, r24
    4fd6:	bd 01       	movw	r22, r26
    4fd8:	cf 01       	movw	r24, r30
    4fda:	08 95       	ret

00004fdc <__umulhisi3>:
    4fdc:	a2 9f       	mul	r26, r18
    4fde:	b0 01       	movw	r22, r0
    4fe0:	b3 9f       	mul	r27, r19
    4fe2:	c0 01       	movw	r24, r0
    4fe4:	a3 9f       	mul	r26, r19
    4fe6:	70 0d       	add	r23, r0
    4fe8:	81 1d       	adc	r24, r1
    4fea:	11 24       	eor	r1, r1
    4fec:	91 1d       	adc	r25, r1
    4fee:	b2 9f       	mul	r27, r18
    4ff0:	70 0d       	add	r23, r0
    4ff2:	81 1d       	adc	r24, r1
    4ff4:	11 24       	eor	r1, r1
    4ff6:	91 1d       	adc	r25, r1
    4ff8:	08 95       	ret

00004ffa <atol>:
    4ffa:	1f 93       	push	r17
    4ffc:	fc 01       	movw	r30, r24
    4ffe:	99 27       	eor	r25, r25
    5000:	88 27       	eor	r24, r24
    5002:	bc 01       	movw	r22, r24
    5004:	e8 94       	clt
    5006:	11 91       	ld	r17, Z+
    5008:	10 32       	cpi	r17, 0x20	; 32
    500a:	e9 f3       	breq	.-6      	; 0x5006 <atol+0xc>
    500c:	19 30       	cpi	r17, 0x09	; 9
    500e:	10 f0       	brcs	.+4      	; 0x5014 <atol+0x1a>
    5010:	1e 30       	cpi	r17, 0x0E	; 14
    5012:	c8 f3       	brcs	.-14     	; 0x5006 <atol+0xc>
    5014:	1b 32       	cpi	r17, 0x2B	; 43
    5016:	51 f0       	breq	.+20     	; 0x502c <atol+0x32>
    5018:	1d 32       	cpi	r17, 0x2D	; 45
    501a:	49 f4       	brne	.+18     	; 0x502e <atol+0x34>
    501c:	68 94       	set
    501e:	06 c0       	rjmp	.+12     	; 0x502c <atol+0x32>
    5020:	0e 94 24 29 	call	0x5248	; 0x5248 <__mulsi_const_10>
    5024:	61 0f       	add	r22, r17
    5026:	71 1d       	adc	r23, r1
    5028:	81 1d       	adc	r24, r1
    502a:	91 1d       	adc	r25, r1
    502c:	11 91       	ld	r17, Z+
    502e:	10 53       	subi	r17, 0x30	; 48
    5030:	1a 30       	cpi	r17, 0x0A	; 10
    5032:	b0 f3       	brcs	.-20     	; 0x5020 <atol+0x26>
    5034:	3e f4       	brtc	.+14     	; 0x5044 <atol+0x4a>
    5036:	90 95       	com	r25
    5038:	80 95       	com	r24
    503a:	70 95       	com	r23
    503c:	61 95       	neg	r22
    503e:	7f 4f       	sbci	r23, 0xFF	; 255
    5040:	8f 4f       	sbci	r24, 0xFF	; 255
    5042:	9f 4f       	sbci	r25, 0xFF	; 255
    5044:	1f 91       	pop	r17
    5046:	08 95       	ret

00005048 <__ftoa_engine>:
    5048:	28 30       	cpi	r18, 0x08	; 8
    504a:	08 f0       	brcs	.+2      	; 0x504e <__ftoa_engine+0x6>
    504c:	27 e0       	ldi	r18, 0x07	; 7
    504e:	33 27       	eor	r19, r19
    5050:	da 01       	movw	r26, r20
    5052:	99 0f       	add	r25, r25
    5054:	31 1d       	adc	r19, r1
    5056:	87 fd       	sbrc	r24, 7
    5058:	91 60       	ori	r25, 0x01	; 1
    505a:	00 96       	adiw	r24, 0x00	; 0
    505c:	61 05       	cpc	r22, r1
    505e:	71 05       	cpc	r23, r1
    5060:	39 f4       	brne	.+14     	; 0x5070 <__ftoa_engine+0x28>
    5062:	32 60       	ori	r19, 0x02	; 2
    5064:	2e 5f       	subi	r18, 0xFE	; 254
    5066:	3d 93       	st	X+, r19
    5068:	30 e3       	ldi	r19, 0x30	; 48
    506a:	2a 95       	dec	r18
    506c:	e1 f7       	brne	.-8      	; 0x5066 <__ftoa_engine+0x1e>
    506e:	08 95       	ret
    5070:	9f 3f       	cpi	r25, 0xFF	; 255
    5072:	30 f0       	brcs	.+12     	; 0x5080 <__ftoa_engine+0x38>
    5074:	80 38       	cpi	r24, 0x80	; 128
    5076:	71 05       	cpc	r23, r1
    5078:	61 05       	cpc	r22, r1
    507a:	09 f0       	breq	.+2      	; 0x507e <__ftoa_engine+0x36>
    507c:	3c 5f       	subi	r19, 0xFC	; 252
    507e:	3c 5f       	subi	r19, 0xFC	; 252
    5080:	3d 93       	st	X+, r19
    5082:	91 30       	cpi	r25, 0x01	; 1
    5084:	08 f0       	brcs	.+2      	; 0x5088 <__ftoa_engine+0x40>
    5086:	80 68       	ori	r24, 0x80	; 128
    5088:	91 1d       	adc	r25, r1
    508a:	df 93       	push	r29
    508c:	cf 93       	push	r28
    508e:	1f 93       	push	r17
    5090:	0f 93       	push	r16
    5092:	ff 92       	push	r15
    5094:	ef 92       	push	r14
    5096:	19 2f       	mov	r17, r25
    5098:	98 7f       	andi	r25, 0xF8	; 248
    509a:	96 95       	lsr	r25
    509c:	e9 2f       	mov	r30, r25
    509e:	96 95       	lsr	r25
    50a0:	96 95       	lsr	r25
    50a2:	e9 0f       	add	r30, r25
    50a4:	ff 27       	eor	r31, r31
    50a6:	ea 53       	subi	r30, 0x3A	; 58
    50a8:	fe 4f       	sbci	r31, 0xFE	; 254
    50aa:	99 27       	eor	r25, r25
    50ac:	33 27       	eor	r19, r19
    50ae:	ee 24       	eor	r14, r14
    50b0:	ff 24       	eor	r15, r15
    50b2:	a7 01       	movw	r20, r14
    50b4:	e7 01       	movw	r28, r14
    50b6:	05 90       	lpm	r0, Z+
    50b8:	08 94       	sec
    50ba:	07 94       	ror	r0
    50bc:	28 f4       	brcc	.+10     	; 0x50c8 <__ftoa_engine+0x80>
    50be:	36 0f       	add	r19, r22
    50c0:	e7 1e       	adc	r14, r23
    50c2:	f8 1e       	adc	r15, r24
    50c4:	49 1f       	adc	r20, r25
    50c6:	51 1d       	adc	r21, r1
    50c8:	66 0f       	add	r22, r22
    50ca:	77 1f       	adc	r23, r23
    50cc:	88 1f       	adc	r24, r24
    50ce:	99 1f       	adc	r25, r25
    50d0:	06 94       	lsr	r0
    50d2:	a1 f7       	brne	.-24     	; 0x50bc <__ftoa_engine+0x74>
    50d4:	05 90       	lpm	r0, Z+
    50d6:	07 94       	ror	r0
    50d8:	28 f4       	brcc	.+10     	; 0x50e4 <__ftoa_engine+0x9c>
    50da:	e7 0e       	add	r14, r23
    50dc:	f8 1e       	adc	r15, r24
    50de:	49 1f       	adc	r20, r25
    50e0:	56 1f       	adc	r21, r22
    50e2:	c1 1d       	adc	r28, r1
    50e4:	77 0f       	add	r23, r23
    50e6:	88 1f       	adc	r24, r24
    50e8:	99 1f       	adc	r25, r25
    50ea:	66 1f       	adc	r22, r22
    50ec:	06 94       	lsr	r0
    50ee:	a1 f7       	brne	.-24     	; 0x50d8 <__ftoa_engine+0x90>
    50f0:	05 90       	lpm	r0, Z+
    50f2:	07 94       	ror	r0
    50f4:	28 f4       	brcc	.+10     	; 0x5100 <__ftoa_engine+0xb8>
    50f6:	f8 0e       	add	r15, r24
    50f8:	49 1f       	adc	r20, r25
    50fa:	56 1f       	adc	r21, r22
    50fc:	c7 1f       	adc	r28, r23
    50fe:	d1 1d       	adc	r29, r1
    5100:	88 0f       	add	r24, r24
    5102:	99 1f       	adc	r25, r25
    5104:	66 1f       	adc	r22, r22
    5106:	77 1f       	adc	r23, r23
    5108:	06 94       	lsr	r0
    510a:	a1 f7       	brne	.-24     	; 0x50f4 <__ftoa_engine+0xac>
    510c:	05 90       	lpm	r0, Z+
    510e:	07 94       	ror	r0
    5110:	20 f4       	brcc	.+8      	; 0x511a <__ftoa_engine+0xd2>
    5112:	49 0f       	add	r20, r25
    5114:	56 1f       	adc	r21, r22
    5116:	c7 1f       	adc	r28, r23
    5118:	d8 1f       	adc	r29, r24
    511a:	99 0f       	add	r25, r25
    511c:	66 1f       	adc	r22, r22
    511e:	77 1f       	adc	r23, r23
    5120:	88 1f       	adc	r24, r24
    5122:	06 94       	lsr	r0
    5124:	a9 f7       	brne	.-22     	; 0x5110 <__ftoa_engine+0xc8>
    5126:	84 91       	lpm	r24, Z
    5128:	10 95       	com	r17
    512a:	17 70       	andi	r17, 0x07	; 7
    512c:	41 f0       	breq	.+16     	; 0x513e <__ftoa_engine+0xf6>
    512e:	d6 95       	lsr	r29
    5130:	c7 95       	ror	r28
    5132:	57 95       	ror	r21
    5134:	47 95       	ror	r20
    5136:	f7 94       	ror	r15
    5138:	e7 94       	ror	r14
    513a:	1a 95       	dec	r17
    513c:	c1 f7       	brne	.-16     	; 0x512e <__ftoa_engine+0xe6>
    513e:	ec e6       	ldi	r30, 0x6C	; 108
    5140:	f1 e0       	ldi	r31, 0x01	; 1
    5142:	68 94       	set
    5144:	15 90       	lpm	r1, Z+
    5146:	15 91       	lpm	r17, Z+
    5148:	35 91       	lpm	r19, Z+
    514a:	65 91       	lpm	r22, Z+
    514c:	95 91       	lpm	r25, Z+
    514e:	05 90       	lpm	r0, Z+
    5150:	7f e2       	ldi	r23, 0x2F	; 47
    5152:	73 95       	inc	r23
    5154:	e1 18       	sub	r14, r1
    5156:	f1 0a       	sbc	r15, r17
    5158:	43 0b       	sbc	r20, r19
    515a:	56 0b       	sbc	r21, r22
    515c:	c9 0b       	sbc	r28, r25
    515e:	d0 09       	sbc	r29, r0
    5160:	c0 f7       	brcc	.-16     	; 0x5152 <__ftoa_engine+0x10a>
    5162:	e1 0c       	add	r14, r1
    5164:	f1 1e       	adc	r15, r17
    5166:	43 1f       	adc	r20, r19
    5168:	56 1f       	adc	r21, r22
    516a:	c9 1f       	adc	r28, r25
    516c:	d0 1d       	adc	r29, r0
    516e:	7e f4       	brtc	.+30     	; 0x518e <__ftoa_engine+0x146>
    5170:	70 33       	cpi	r23, 0x30	; 48
    5172:	11 f4       	brne	.+4      	; 0x5178 <__ftoa_engine+0x130>
    5174:	8a 95       	dec	r24
    5176:	e6 cf       	rjmp	.-52     	; 0x5144 <__ftoa_engine+0xfc>
    5178:	e8 94       	clt
    517a:	01 50       	subi	r16, 0x01	; 1
    517c:	30 f0       	brcs	.+12     	; 0x518a <__ftoa_engine+0x142>
    517e:	08 0f       	add	r16, r24
    5180:	0a f4       	brpl	.+2      	; 0x5184 <__ftoa_engine+0x13c>
    5182:	00 27       	eor	r16, r16
    5184:	02 17       	cp	r16, r18
    5186:	08 f4       	brcc	.+2      	; 0x518a <__ftoa_engine+0x142>
    5188:	20 2f       	mov	r18, r16
    518a:	23 95       	inc	r18
    518c:	02 2f       	mov	r16, r18
    518e:	7a 33       	cpi	r23, 0x3A	; 58
    5190:	28 f0       	brcs	.+10     	; 0x519c <__ftoa_engine+0x154>
    5192:	79 e3       	ldi	r23, 0x39	; 57
    5194:	7d 93       	st	X+, r23
    5196:	2a 95       	dec	r18
    5198:	e9 f7       	brne	.-6      	; 0x5194 <__ftoa_engine+0x14c>
    519a:	10 c0       	rjmp	.+32     	; 0x51bc <__ftoa_engine+0x174>
    519c:	7d 93       	st	X+, r23
    519e:	2a 95       	dec	r18
    51a0:	89 f6       	brne	.-94     	; 0x5144 <__ftoa_engine+0xfc>
    51a2:	06 94       	lsr	r0
    51a4:	97 95       	ror	r25
    51a6:	67 95       	ror	r22
    51a8:	37 95       	ror	r19
    51aa:	17 95       	ror	r17
    51ac:	17 94       	ror	r1
    51ae:	e1 18       	sub	r14, r1
    51b0:	f1 0a       	sbc	r15, r17
    51b2:	43 0b       	sbc	r20, r19
    51b4:	56 0b       	sbc	r21, r22
    51b6:	c9 0b       	sbc	r28, r25
    51b8:	d0 09       	sbc	r29, r0
    51ba:	98 f0       	brcs	.+38     	; 0x51e2 <__ftoa_engine+0x19a>
    51bc:	23 95       	inc	r18
    51be:	7e 91       	ld	r23, -X
    51c0:	73 95       	inc	r23
    51c2:	7a 33       	cpi	r23, 0x3A	; 58
    51c4:	08 f0       	brcs	.+2      	; 0x51c8 <__ftoa_engine+0x180>
    51c6:	70 e3       	ldi	r23, 0x30	; 48
    51c8:	7c 93       	st	X, r23
    51ca:	20 13       	cpse	r18, r16
    51cc:	b8 f7       	brcc	.-18     	; 0x51bc <__ftoa_engine+0x174>
    51ce:	7e 91       	ld	r23, -X
    51d0:	70 61       	ori	r23, 0x10	; 16
    51d2:	7d 93       	st	X+, r23
    51d4:	30 f0       	brcs	.+12     	; 0x51e2 <__ftoa_engine+0x19a>
    51d6:	83 95       	inc	r24
    51d8:	71 e3       	ldi	r23, 0x31	; 49
    51da:	7d 93       	st	X+, r23
    51dc:	70 e3       	ldi	r23, 0x30	; 48
    51de:	2a 95       	dec	r18
    51e0:	e1 f7       	brne	.-8      	; 0x51da <__ftoa_engine+0x192>
    51e2:	11 24       	eor	r1, r1
    51e4:	ef 90       	pop	r14
    51e6:	ff 90       	pop	r15
    51e8:	0f 91       	pop	r16
    51ea:	1f 91       	pop	r17
    51ec:	cf 91       	pop	r28
    51ee:	df 91       	pop	r29
    51f0:	99 27       	eor	r25, r25
    51f2:	87 fd       	sbrc	r24, 7
    51f4:	90 95       	com	r25
    51f6:	08 95       	ret

000051f8 <strnlen_P>:
    51f8:	fc 01       	movw	r30, r24
    51fa:	05 90       	lpm	r0, Z+
    51fc:	61 50       	subi	r22, 0x01	; 1
    51fe:	70 40       	sbci	r23, 0x00	; 0
    5200:	01 10       	cpse	r0, r1
    5202:	d8 f7       	brcc	.-10     	; 0x51fa <strnlen_P+0x2>
    5204:	80 95       	com	r24
    5206:	90 95       	com	r25
    5208:	8e 0f       	add	r24, r30
    520a:	9f 1f       	adc	r25, r31
    520c:	08 95       	ret

0000520e <strcat>:
    520e:	fb 01       	movw	r30, r22
    5210:	dc 01       	movw	r26, r24
    5212:	0d 90       	ld	r0, X+
    5214:	00 20       	and	r0, r0
    5216:	e9 f7       	brne	.-6      	; 0x5212 <strcat+0x4>
    5218:	11 97       	sbiw	r26, 0x01	; 1
    521a:	01 90       	ld	r0, Z+
    521c:	0d 92       	st	X+, r0
    521e:	00 20       	and	r0, r0
    5220:	e1 f7       	brne	.-8      	; 0x521a <strcat+0xc>
    5222:	08 95       	ret

00005224 <strcpy>:
    5224:	fb 01       	movw	r30, r22
    5226:	dc 01       	movw	r26, r24
    5228:	01 90       	ld	r0, Z+
    522a:	0d 92       	st	X+, r0
    522c:	00 20       	and	r0, r0
    522e:	e1 f7       	brne	.-8      	; 0x5228 <strcpy+0x4>
    5230:	08 95       	ret

00005232 <strnlen>:
    5232:	fc 01       	movw	r30, r24
    5234:	61 50       	subi	r22, 0x01	; 1
    5236:	70 40       	sbci	r23, 0x00	; 0
    5238:	01 90       	ld	r0, Z+
    523a:	01 10       	cpse	r0, r1
    523c:	d8 f7       	brcc	.-10     	; 0x5234 <strnlen+0x2>
    523e:	80 95       	com	r24
    5240:	90 95       	com	r25
    5242:	8e 0f       	add	r24, r30
    5244:	9f 1f       	adc	r25, r31
    5246:	08 95       	ret

00005248 <__mulsi_const_10>:
    5248:	59 2f       	mov	r21, r25
    524a:	48 2f       	mov	r20, r24
    524c:	37 2f       	mov	r19, r23
    524e:	26 2f       	mov	r18, r22
    5250:	66 0f       	add	r22, r22
    5252:	77 1f       	adc	r23, r23
    5254:	88 1f       	adc	r24, r24
    5256:	99 1f       	adc	r25, r25
    5258:	66 0f       	add	r22, r22
    525a:	77 1f       	adc	r23, r23
    525c:	88 1f       	adc	r24, r24
    525e:	99 1f       	adc	r25, r25
    5260:	62 0f       	add	r22, r18
    5262:	73 1f       	adc	r23, r19
    5264:	84 1f       	adc	r24, r20
    5266:	95 1f       	adc	r25, r21
    5268:	66 0f       	add	r22, r22
    526a:	77 1f       	adc	r23, r23
    526c:	88 1f       	adc	r24, r24
    526e:	99 1f       	adc	r25, r25
    5270:	08 95       	ret

00005272 <fputc>:
    5272:	0f 93       	push	r16
    5274:	1f 93       	push	r17
    5276:	cf 93       	push	r28
    5278:	df 93       	push	r29
    527a:	fb 01       	movw	r30, r22
    527c:	23 81       	ldd	r18, Z+3	; 0x03
    527e:	21 fd       	sbrc	r18, 1
    5280:	03 c0       	rjmp	.+6      	; 0x5288 <fputc+0x16>
    5282:	8f ef       	ldi	r24, 0xFF	; 255
    5284:	9f ef       	ldi	r25, 0xFF	; 255
    5286:	2c c0       	rjmp	.+88     	; 0x52e0 <fputc+0x6e>
    5288:	22 ff       	sbrs	r18, 2
    528a:	16 c0       	rjmp	.+44     	; 0x52b8 <fputc+0x46>
    528c:	46 81       	ldd	r20, Z+6	; 0x06
    528e:	57 81       	ldd	r21, Z+7	; 0x07
    5290:	24 81       	ldd	r18, Z+4	; 0x04
    5292:	35 81       	ldd	r19, Z+5	; 0x05
    5294:	42 17       	cp	r20, r18
    5296:	53 07       	cpc	r21, r19
    5298:	44 f4       	brge	.+16     	; 0x52aa <fputc+0x38>
    529a:	a0 81       	ld	r26, Z
    529c:	b1 81       	ldd	r27, Z+1	; 0x01
    529e:	9d 01       	movw	r18, r26
    52a0:	2f 5f       	subi	r18, 0xFF	; 255
    52a2:	3f 4f       	sbci	r19, 0xFF	; 255
    52a4:	20 83       	st	Z, r18
    52a6:	31 83       	std	Z+1, r19	; 0x01
    52a8:	8c 93       	st	X, r24
    52aa:	26 81       	ldd	r18, Z+6	; 0x06
    52ac:	37 81       	ldd	r19, Z+7	; 0x07
    52ae:	2f 5f       	subi	r18, 0xFF	; 255
    52b0:	3f 4f       	sbci	r19, 0xFF	; 255
    52b2:	26 83       	std	Z+6, r18	; 0x06
    52b4:	37 83       	std	Z+7, r19	; 0x07
    52b6:	14 c0       	rjmp	.+40     	; 0x52e0 <fputc+0x6e>
    52b8:	8b 01       	movw	r16, r22
    52ba:	ec 01       	movw	r28, r24
    52bc:	fb 01       	movw	r30, r22
    52be:	00 84       	ldd	r0, Z+8	; 0x08
    52c0:	f1 85       	ldd	r31, Z+9	; 0x09
    52c2:	e0 2d       	mov	r30, r0
    52c4:	09 95       	icall
    52c6:	89 2b       	or	r24, r25
    52c8:	e1 f6       	brne	.-72     	; 0x5282 <fputc+0x10>
    52ca:	d8 01       	movw	r26, r16
    52cc:	16 96       	adiw	r26, 0x06	; 6
    52ce:	8d 91       	ld	r24, X+
    52d0:	9c 91       	ld	r25, X
    52d2:	17 97       	sbiw	r26, 0x07	; 7
    52d4:	01 96       	adiw	r24, 0x01	; 1
    52d6:	16 96       	adiw	r26, 0x06	; 6
    52d8:	8d 93       	st	X+, r24
    52da:	9c 93       	st	X, r25
    52dc:	17 97       	sbiw	r26, 0x07	; 7
    52de:	ce 01       	movw	r24, r28
    52e0:	df 91       	pop	r29
    52e2:	cf 91       	pop	r28
    52e4:	1f 91       	pop	r17
    52e6:	0f 91       	pop	r16
    52e8:	08 95       	ret

000052ea <sprintf>:
    52ea:	ae e0       	ldi	r26, 0x0E	; 14
    52ec:	b0 e0       	ldi	r27, 0x00	; 0
    52ee:	eb e7       	ldi	r30, 0x7B	; 123
    52f0:	f9 e2       	ldi	r31, 0x29	; 41
    52f2:	0c 94 95 27 	jmp	0x4f2a	; 0x4f2a <__prologue_saves__+0x1c>
    52f6:	0d 89       	ldd	r16, Y+21	; 0x15
    52f8:	1e 89       	ldd	r17, Y+22	; 0x16
    52fa:	86 e0       	ldi	r24, 0x06	; 6
    52fc:	8c 83       	std	Y+4, r24	; 0x04
    52fe:	09 83       	std	Y+1, r16	; 0x01
    5300:	1a 83       	std	Y+2, r17	; 0x02
    5302:	8f ef       	ldi	r24, 0xFF	; 255
    5304:	9f e7       	ldi	r25, 0x7F	; 127
    5306:	8d 83       	std	Y+5, r24	; 0x05
    5308:	9e 83       	std	Y+6, r25	; 0x06
    530a:	ae 01       	movw	r20, r28
    530c:	47 5e       	subi	r20, 0xE7	; 231
    530e:	5f 4f       	sbci	r21, 0xFF	; 255
    5310:	6f 89       	ldd	r22, Y+23	; 0x17
    5312:	78 8d       	ldd	r23, Y+24	; 0x18
    5314:	ce 01       	movw	r24, r28
    5316:	01 96       	adiw	r24, 0x01	; 1
    5318:	0e 94 c6 23 	call	0x478c	; 0x478c <vfprintf>
    531c:	ef 81       	ldd	r30, Y+7	; 0x07
    531e:	f8 85       	ldd	r31, Y+8	; 0x08
    5320:	e0 0f       	add	r30, r16
    5322:	f1 1f       	adc	r31, r17
    5324:	10 82       	st	Z, r1
    5326:	2e 96       	adiw	r28, 0x0e	; 14
    5328:	e4 e0       	ldi	r30, 0x04	; 4
    532a:	0c 94 ae 27 	jmp	0x4f5c	; 0x4f5c <__epilogue_restores__+0x1c>

0000532e <__ultoa_invert>:
    532e:	fa 01       	movw	r30, r20
    5330:	aa 27       	eor	r26, r26
    5332:	28 30       	cpi	r18, 0x08	; 8
    5334:	51 f1       	breq	.+84     	; 0x538a <__ultoa_invert+0x5c>
    5336:	20 31       	cpi	r18, 0x10	; 16
    5338:	81 f1       	breq	.+96     	; 0x539a <__ultoa_invert+0x6c>
    533a:	e8 94       	clt
    533c:	6f 93       	push	r22
    533e:	6e 7f       	andi	r22, 0xFE	; 254
    5340:	6e 5f       	subi	r22, 0xFE	; 254
    5342:	7f 4f       	sbci	r23, 0xFF	; 255
    5344:	8f 4f       	sbci	r24, 0xFF	; 255
    5346:	9f 4f       	sbci	r25, 0xFF	; 255
    5348:	af 4f       	sbci	r26, 0xFF	; 255
    534a:	b1 e0       	ldi	r27, 0x01	; 1
    534c:	3e d0       	rcall	.+124    	; 0x53ca <__ultoa_invert+0x9c>
    534e:	b4 e0       	ldi	r27, 0x04	; 4
    5350:	3c d0       	rcall	.+120    	; 0x53ca <__ultoa_invert+0x9c>
    5352:	67 0f       	add	r22, r23
    5354:	78 1f       	adc	r23, r24
    5356:	89 1f       	adc	r24, r25
    5358:	9a 1f       	adc	r25, r26
    535a:	a1 1d       	adc	r26, r1
    535c:	68 0f       	add	r22, r24
    535e:	79 1f       	adc	r23, r25
    5360:	8a 1f       	adc	r24, r26
    5362:	91 1d       	adc	r25, r1
    5364:	a1 1d       	adc	r26, r1
    5366:	6a 0f       	add	r22, r26
    5368:	71 1d       	adc	r23, r1
    536a:	81 1d       	adc	r24, r1
    536c:	91 1d       	adc	r25, r1
    536e:	a1 1d       	adc	r26, r1
    5370:	20 d0       	rcall	.+64     	; 0x53b2 <__ultoa_invert+0x84>
    5372:	09 f4       	brne	.+2      	; 0x5376 <__ultoa_invert+0x48>
    5374:	68 94       	set
    5376:	3f 91       	pop	r19
    5378:	2a e0       	ldi	r18, 0x0A	; 10
    537a:	26 9f       	mul	r18, r22
    537c:	11 24       	eor	r1, r1
    537e:	30 19       	sub	r19, r0
    5380:	30 5d       	subi	r19, 0xD0	; 208
    5382:	31 93       	st	Z+, r19
    5384:	de f6       	brtc	.-74     	; 0x533c <__ultoa_invert+0xe>
    5386:	cf 01       	movw	r24, r30
    5388:	08 95       	ret
    538a:	46 2f       	mov	r20, r22
    538c:	47 70       	andi	r20, 0x07	; 7
    538e:	40 5d       	subi	r20, 0xD0	; 208
    5390:	41 93       	st	Z+, r20
    5392:	b3 e0       	ldi	r27, 0x03	; 3
    5394:	0f d0       	rcall	.+30     	; 0x53b4 <__ultoa_invert+0x86>
    5396:	c9 f7       	brne	.-14     	; 0x538a <__ultoa_invert+0x5c>
    5398:	f6 cf       	rjmp	.-20     	; 0x5386 <__ultoa_invert+0x58>
    539a:	46 2f       	mov	r20, r22
    539c:	4f 70       	andi	r20, 0x0F	; 15
    539e:	40 5d       	subi	r20, 0xD0	; 208
    53a0:	4a 33       	cpi	r20, 0x3A	; 58
    53a2:	18 f0       	brcs	.+6      	; 0x53aa <__ultoa_invert+0x7c>
    53a4:	49 5d       	subi	r20, 0xD9	; 217
    53a6:	31 fd       	sbrc	r19, 1
    53a8:	40 52       	subi	r20, 0x20	; 32
    53aa:	41 93       	st	Z+, r20
    53ac:	02 d0       	rcall	.+4      	; 0x53b2 <__ultoa_invert+0x84>
    53ae:	a9 f7       	brne	.-22     	; 0x539a <__ultoa_invert+0x6c>
    53b0:	ea cf       	rjmp	.-44     	; 0x5386 <__ultoa_invert+0x58>
    53b2:	b4 e0       	ldi	r27, 0x04	; 4
    53b4:	a6 95       	lsr	r26
    53b6:	97 95       	ror	r25
    53b8:	87 95       	ror	r24
    53ba:	77 95       	ror	r23
    53bc:	67 95       	ror	r22
    53be:	ba 95       	dec	r27
    53c0:	c9 f7       	brne	.-14     	; 0x53b4 <__ultoa_invert+0x86>
    53c2:	00 97       	sbiw	r24, 0x00	; 0
    53c4:	61 05       	cpc	r22, r1
    53c6:	71 05       	cpc	r23, r1
    53c8:	08 95       	ret
    53ca:	9b 01       	movw	r18, r22
    53cc:	ac 01       	movw	r20, r24
    53ce:	0a 2e       	mov	r0, r26
    53d0:	06 94       	lsr	r0
    53d2:	57 95       	ror	r21
    53d4:	47 95       	ror	r20
    53d6:	37 95       	ror	r19
    53d8:	27 95       	ror	r18
    53da:	ba 95       	dec	r27
    53dc:	c9 f7       	brne	.-14     	; 0x53d0 <__ultoa_invert+0xa2>
    53de:	62 0f       	add	r22, r18
    53e0:	73 1f       	adc	r23, r19
    53e2:	84 1f       	adc	r24, r20
    53e4:	95 1f       	adc	r25, r21
    53e6:	a0 1d       	adc	r26, r0
    53e8:	08 95       	ret

000053ea <eeprom_read_block>:
    53ea:	60 50       	subi	r22, 0x00	; 0
    53ec:	7c 4e       	sbci	r23, 0xEC	; 236
    53ee:	0c 94 30 2a 	jmp	0x5460	; 0x5460 <memcpy>

000053f2 <eeprom_update_block>:
    53f2:	dc 01       	movw	r26, r24
    53f4:	a4 0f       	add	r26, r20
    53f6:	b5 1f       	adc	r27, r21
    53f8:	41 50       	subi	r20, 0x01	; 1
    53fa:	50 40       	sbci	r21, 0x00	; 0
    53fc:	48 f0       	brcs	.+18     	; 0x5410 <eeprom_update_block+0x1e>
    53fe:	cb 01       	movw	r24, r22
    5400:	84 0f       	add	r24, r20
    5402:	95 1f       	adc	r25, r21
    5404:	2e 91       	ld	r18, -X
    5406:	0e 94 0a 2a 	call	0x5414	; 0x5414 <eeprom_update_r18>
    540a:	41 50       	subi	r20, 0x01	; 1
    540c:	50 40       	sbci	r21, 0x00	; 0
    540e:	d0 f7       	brcc	.-12     	; 0x5404 <eeprom_update_block+0x12>
    5410:	08 95       	ret

00005412 <eeprom_update_byte>:
    5412:	26 2f       	mov	r18, r22

00005414 <eeprom_update_r18>:
    5414:	0e 94 2c 2a 	call	0x5458	; 0x5458 <eeprom_mapen>
    5418:	00 80       	ld	r0, Z
    541a:	02 16       	cp	r0, r18
    541c:	19 f0       	breq	.+6      	; 0x5424 <eeprom_update_r18+0x10>
    541e:	0e 94 15 2a 	call	0x542a	; 0x542a <eeprom_write_r18>
    5422:	01 97       	sbiw	r24, 0x01	; 1
    5424:	01 97       	sbiw	r24, 0x01	; 1
    5426:	08 95       	ret

00005428 <eeprom_write_byte>:
    5428:	26 2f       	mov	r18, r22

0000542a <eeprom_write_r18>:
    542a:	af 93       	push	r26
    542c:	bf 93       	push	r27
    542e:	e0 e0       	ldi	r30, 0x00	; 0
    5430:	f0 e1       	ldi	r31, 0x10	; 16
    5432:	32 81       	ldd	r19, Z+2	; 0x02
    5434:	31 fd       	sbrc	r19, 1
    5436:	fd cf       	rjmp	.-6      	; 0x5432 <eeprom_write_r18+0x8>
    5438:	dc 01       	movw	r26, r24
    543a:	a0 50       	subi	r26, 0x00	; 0
    543c:	bc 4e       	sbci	r27, 0xEC	; 236
    543e:	2c 93       	st	X, r18
    5440:	2d e9       	ldi	r18, 0x9D	; 157
    5442:	24 bf       	out	0x34, r18	; 52
    5444:	23 e0       	ldi	r18, 0x03	; 3
    5446:	20 83       	st	Z, r18
    5448:	01 96       	adiw	r24, 0x01	; 1
    544a:	bf 91       	pop	r27
    544c:	af 91       	pop	r26
    544e:	08 95       	ret

00005450 <eeprom_read_byte>:
    5450:	03 d0       	rcall	.+6      	; 0x5458 <eeprom_mapen>
    5452:	80 81       	ld	r24, Z
    5454:	99 27       	eor	r25, r25
    5456:	08 95       	ret

00005458 <eeprom_mapen>:
    5458:	fc 01       	movw	r30, r24
    545a:	e0 50       	subi	r30, 0x00	; 0
    545c:	fc 4e       	sbci	r31, 0xEC	; 236
    545e:	08 95       	ret

00005460 <memcpy>:
    5460:	fb 01       	movw	r30, r22
    5462:	dc 01       	movw	r26, r24
    5464:	02 c0       	rjmp	.+4      	; 0x546a <memcpy+0xa>
    5466:	01 90       	ld	r0, Z+
    5468:	0d 92       	st	X+, r0
    546a:	41 50       	subi	r20, 0x01	; 1
    546c:	50 40       	sbci	r21, 0x00	; 0
    546e:	d8 f7       	brcc	.-10     	; 0x5466 <memcpy+0x6>
    5470:	08 95       	ret

00005472 <_exit>:
    5472:	f8 94       	cli

00005474 <__stop_program>:
    5474:	ff cf       	rjmp	.-2      	; 0x5474 <__stop_program>
