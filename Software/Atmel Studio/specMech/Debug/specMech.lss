
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  00003643  000036f7  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034e2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000161  000074e2  000034e2  00003596  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000527  00802802  00802802  000036f9  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000036f9  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003758  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000568  00000000  00000000  00003798  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008750  00000000  00000000  00003d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003eeb  00000000  00000000  0000c450  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003605  00000000  00000000  0001033b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ba0  00000000  00000000  00013940  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000201b  00000000  00000000  000144e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000032fd  00000000  00000000  000164fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000308  00000000  00000000  000197f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 06 01 	jmp	0x20c	; 0x20c <__ctors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       c:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__vector_3>
      10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      28:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      2c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      38:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      40:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      44:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__vector_17>
      48:	0c 94 8f 11 	jmp	0x231e	; 0x231e <__vector_18>
      4c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      50:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      60:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      68:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__vector_26>
      6c:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__vector_27>
      70:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      74:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__vector_29>
      78:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      7c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      80:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      84:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      88:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      8c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      90:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      94:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__vector_37>
      98:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__vector_38>
      9c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a0:	9a 0c       	add	r9, r10
      a2:	a2 0f       	add	r26, r18
      a4:	a2 0f       	add	r26, r18
      a6:	a2 0f       	add	r26, r18
      a8:	a2 0f       	add	r26, r18
      aa:	a2 0f       	add	r26, r18
      ac:	a2 0f       	add	r26, r18
      ae:	a2 0f       	add	r26, r18
      b0:	a2 0f       	add	r26, r18
      b2:	a2 0f       	add	r26, r18
      b4:	a2 0f       	add	r26, r18
      b6:	a2 0f       	add	r26, r18
      b8:	a2 0f       	add	r26, r18
      ba:	a2 0f       	add	r26, r18
      bc:	a2 0f       	add	r26, r18
      be:	a2 0f       	add	r26, r18
      c0:	a2 0f       	add	r26, r18
      c2:	a2 0f       	add	r26, r18
      c4:	a2 0f       	add	r26, r18
      c6:	a2 0f       	add	r26, r18
      c8:	5d 0f       	add	r21, r29
      ca:	a2 0f       	add	r26, r18
      cc:	a2 0f       	add	r26, r18
      ce:	a2 0f       	add	r26, r18
      d0:	a2 0f       	add	r26, r18
      d2:	a2 0f       	add	r26, r18
      d4:	a2 0f       	add	r26, r18
      d6:	a2 0f       	add	r26, r18
      d8:	a2 0f       	add	r26, r18
      da:	a2 0f       	add	r26, r18
      dc:	a2 0f       	add	r26, r18
      de:	a2 0f       	add	r26, r18
      e0:	a2 0f       	add	r26, r18
      e2:	a2 0f       	add	r26, r18
      e4:	a2 0f       	add	r26, r18
      e6:	d6 0c       	add	r13, r6
      e8:	a2 0f       	add	r26, r18
      ea:	a2 0f       	add	r26, r18
      ec:	a2 0f       	add	r26, r18
      ee:	a2 0f       	add	r26, r18
      f0:	a2 0f       	add	r26, r18
      f2:	a2 0f       	add	r26, r18
      f4:	a2 0f       	add	r26, r18
      f6:	a2 0f       	add	r26, r18
      f8:	a2 0f       	add	r26, r18
      fa:	de 0d       	add	r29, r14
      fc:	52 0e       	add	r5, r18
      fe:	a2 0f       	add	r26, r18
     100:	a2 0f       	add	r26, r18
     102:	a2 0f       	add	r26, r18
     104:	b9 0e       	add	r11, r25
     106:	a2 0f       	add	r26, r18
     108:	0a 0f       	add	r16, r26

0000010a <__trampolines_end>:
     10a:	6e 61       	ori	r22, 0x1E	; 30
     10c:	6e 00       	.word	0x006e	; ????

0000010e <__c.2332>:
     10e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     11e:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     12e:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     13e:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     14e:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     15e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     16e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     17e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     18e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     19e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1ae:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1be:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1ce:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1de:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1ee:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1fe:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000020c <__ctors_end>:
     20c:	11 24       	eor	r1, r1
     20e:	1f be       	out	0x3f, r1	; 63
     210:	cf ef       	ldi	r28, 0xFF	; 255
     212:	cd bf       	out	0x3d, r28	; 61
     214:	df e3       	ldi	r29, 0x3F	; 63
     216:	de bf       	out	0x3e, r29	; 62

00000218 <__do_copy_data>:
     218:	18 e2       	ldi	r17, 0x28	; 40
     21a:	a0 e0       	ldi	r26, 0x00	; 0
     21c:	b8 e2       	ldi	r27, 0x28	; 40
     21e:	e3 e4       	ldi	r30, 0x43	; 67
     220:	f6 e3       	ldi	r31, 0x36	; 54
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x10>
     224:	05 90       	lpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a2 30       	cpi	r26, 0x02	; 2
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0xc>

0000022e <__do_clear_bss>:
     22e:	2d e2       	ldi	r18, 0x2D	; 45
     230:	a2 e0       	ldi	r26, 0x02	; 2
     232:	b8 e2       	ldi	r27, 0x28	; 40
     234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
     236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
     238:	a9 32       	cpi	r26, 0x29	; 41
     23a:	b2 07       	cpc	r27, r18
     23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>
     23e:	0e 94 93 07 	call	0xf26	; 0xf26 <main>
     242:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <_exit>

00000246 <__bad_interrupt>:
     246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
float read_AD590(uint8_t sensor)
{
     24a:	cf 92       	push	r12
     24c:	df 92       	push	r13
     24e:	ef 92       	push	r14
     250:	ff 92       	push	r15
     252:	cf 93       	push	r28

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     254:	81 30       	cpi	r24, 0x01	; 1
     256:	c9 f0       	breq	.+50     	; 0x28a <read_AD590+0x40>
     258:	18 f0       	brcs	.+6      	; 0x260 <read_AD590+0x16>
     25a:	82 30       	cpi	r24, 0x02	; 2
     25c:	61 f0       	breq	.+24     	; 0x276 <read_AD590+0x2c>
     25e:	10 c0       	rjmp	.+32     	; 0x280 <read_AD590+0x36>
		case 0:
// The commented alternates are for the prototype ADS1115 board:
//			pins = 0x80;
			pins = 0x01;	// t0
			offset = 7.6;
     260:	0f 2e       	mov	r0, r31
     262:	f3 e3       	ldi	r31, 0x33	; 51
     264:	cf 2e       	mov	r12, r31
     266:	dc 2c       	mov	r13, r12
     268:	f3 ef       	ldi	r31, 0xF3	; 243
     26a:	ef 2e       	mov	r14, r31
     26c:	f0 e4       	ldi	r31, 0x40	; 64
     26e:	ff 2e       	mov	r15, r31
     270:	f0 2d       	mov	r31, r0
	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
// The commented alternates are for the prototype ADS1115 board:
//			pins = 0x80;
			pins = 0x01;	// t0
     272:	c1 e0       	ldi	r28, 0x01	; 1
     274:	0e c0       	rjmp	.+28     	; 0x292 <read_AD590+0x48>
			offset = 0.0;
			break;
		case 2:
//			pins = 0x20;
			pins = 0x10;	// t2
			offset = 0.0;
     276:	c1 2c       	mov	r12, r1
     278:	d1 2c       	mov	r13, r1
     27a:	76 01       	movw	r14, r12
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
//			pins = 0x20;
			pins = 0x10;	// t2
     27c:	c0 e1       	ldi	r28, 0x10	; 16
			offset = 0.0;
			break;
     27e:	09 c0       	rjmp	.+18     	; 0x292 <read_AD590+0x48>
{

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
     280:	c1 2c       	mov	r12, r1
     282:	d1 2c       	mov	r13, r1
     284:	76 01       	movw	r14, r12
//			pins = 0x20;
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     286:	c0 e0       	ldi	r28, 0x00	; 0
			break;
     288:	04 c0       	rjmp	.+8      	; 0x292 <read_AD590+0x48>
			offset = 7.6;
			break;
		case 1:
//			pins = 0x40;
			pins = 0x04;	// t1
			offset = 0.0;
     28a:	c1 2c       	mov	r12, r1
     28c:	d1 2c       	mov	r13, r1
     28e:	76 01       	movw	r14, r12
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
//			pins = 0x40;
			pins = 0x04;	// t1
     290:	c4 e0       	ldi	r28, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	66 e0       	ldi	r22, 0x06	; 6
     296:	8e e4       	ldi	r24, 0x4E	; 78
     298:	0e 94 c2 07 	call	0xf84	; 0xf84 <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     29c:	4c 2f       	mov	r20, r28
     29e:	40 95       	com	r20
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	8e e4       	ldi	r24, 0x4E	; 78
     2a4:	0e 94 c2 07 	call	0xf84	; 0xf84 <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     2a8:	4c 2f       	mov	r20, r28
     2aa:	6a e0       	ldi	r22, 0x0A	; 10
     2ac:	8e e4       	ldi	r24, 0x4E	; 78
     2ae:	0e 94 c2 07 	call	0xf84	; 0xf84 <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2b2:	86 e1       	ldi	r24, 0x16	; 22
     2b4:	8a 95       	dec	r24
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <read_AD590+0x6a>
     2b8:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
//	voltage = read_ADS1115(ADC_TE, PGA0512, AIN2, DR128);		// test board input port is AIN2
	voltage = read_ADS1115(ADC_TE, PGA0512, AIN3, DR128);		// on specMech board
     2ba:	20 e8       	ldi	r18, 0x80	; 128
     2bc:	40 e7       	ldi	r20, 0x70	; 112
     2be:	68 e0       	ldi	r22, 0x08	; 8
     2c0:	80 e9       	ldi	r24, 0x90	; 144
     2c2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_ADS1115>
	temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Include offset calibration
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	4a e7       	ldi	r20, 0x7A	; 122
     2cc:	54 e4       	ldi	r21, 0x44	; 68
     2ce:	0e 94 26 14 	call	0x284c	; 0x284c <__mulsf3>
     2d2:	23 e3       	ldi	r18, 0x33	; 51
     2d4:	33 e9       	ldi	r19, 0x93	; 147
     2d6:	48 e8       	ldi	r20, 0x88	; 136
     2d8:	53 e4       	ldi	r21, 0x43	; 67
     2da:	0e 94 8b 12 	call	0x2516	; 0x2516 <__subsf3>
     2de:	9b 01       	movw	r18, r22
     2e0:	ac 01       	movw	r20, r24
     2e2:	c7 01       	movw	r24, r14
     2e4:	b6 01       	movw	r22, r12
     2e6:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
	return(temperature);

}
     2ea:	cf 91       	pop	r28
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	08 95       	ret

000002f6 <read_ADS1115>:
		datarate - one of the eight selectable data rates. We chose the
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
float read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins, uint8_t datarate)
{
     2f6:	cf 92       	push	r12
     2f8:	df 92       	push	r13
     2fa:	ef 92       	push	r14
     2fc:	ff 92       	push	r15
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	d8 2f       	mov	r29, r24
     308:	f6 2e       	mov	r15, r22
	float scale, voltage;
	uint8_t confighi, configlo, retval, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     30a:	46 2b       	or	r20, r22
     30c:	c4 2f       	mov	r28, r20
     30e:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     310:	12 2f       	mov	r17, r18
     312:	13 60       	ori	r17, 0x03	; 3

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start condition
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
     31a:	08 2f       	mov	r16, r24
     31c:	88 23       	and	r24, r24
     31e:	69 f0       	breq	.+26     	; 0x33a <read_ADS1115+0x44>
		stop_TWI();
     320:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
		return(retval);
     324:	60 2f       	mov	r22, r16
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 6f 13 	call	0x26de	; 0x26de <__floatunsisf>
     330:	56 2f       	mov	r21, r22
     332:	47 2f       	mov	r20, r23
     334:	38 2f       	mov	r19, r24
     336:	29 2f       	mov	r18, r25
     338:	d0 c0       	rjmp	.+416    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	if ((retval = write_TWI(ADS1115CONFIG))) {		// Write the CONFIG register
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
     340:	08 2f       	mov	r16, r24
     342:	88 23       	and	r24, r24
     344:	69 f0       	breq	.+26     	; 0x360 <read_ADS1115+0x6a>
		stop_TWI();
     346:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
		return(retval);
     34a:	60 2f       	mov	r22, r16
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 6f 13 	call	0x26de	; 0x26de <__floatunsisf>
     356:	56 2f       	mov	r21, r22
     358:	47 2f       	mov	r20, r23
     35a:	38 2f       	mov	r19, r24
     35c:	29 2f       	mov	r18, r25
     35e:	bd c0       	rjmp	.+378    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	if ((retval = write_TWI(confighi))) {			// Write high byte
     360:	8c 2f       	mov	r24, r28
     362:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
     366:	c8 2f       	mov	r28, r24
     368:	88 23       	and	r24, r24
     36a:	69 f0       	breq	.+26     	; 0x386 <read_ADS1115+0x90>
		stop_TWI();
     36c:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
		return(retval);
     370:	6c 2f       	mov	r22, r28
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 6f 13 	call	0x26de	; 0x26de <__floatunsisf>
     37c:	56 2f       	mov	r21, r22
     37e:	47 2f       	mov	r20, r23
     380:	38 2f       	mov	r19, r24
     382:	29 2f       	mov	r18, r25
     384:	aa c0       	rjmp	.+340    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	if ((retval = write_TWI(configlo))) {			// Write low byte
     386:	81 2f       	mov	r24, r17
     388:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
     38c:	c8 2f       	mov	r28, r24
     38e:	88 23       	and	r24, r24
     390:	69 f0       	breq	.+26     	; 0x3ac <read_ADS1115+0xb6>
		stop_TWI();
     392:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
		return(retval);
     396:	6c 2f       	mov	r22, r28
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 6f 13 	call	0x26de	; 0x26de <__floatunsisf>
     3a2:	56 2f       	mov	r21, r22
     3a4:	47 2f       	mov	r20, r23
     3a6:	38 2f       	mov	r19, r24
     3a8:	29 2f       	mov	r18, r25
     3aa:	97 c0       	rjmp	.+302    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	stop_TWI();
     3ac:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
     3b0:	8c e1       	ldi	r24, 0x1C	; 28
     3b2:	8a 95       	dec	r24
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <read_ADS1115+0xbc>

	_delay_us(25);									// Power-up time

	converting = YES;
     3b6:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     3b8:	09 c0       	rjmp	.+18     	; 0x3cc <read_ADS1115+0xd6>
		start_TWI(addr, TWIREAD);
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	8d 2f       	mov	r24, r29
     3be:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
     3c2:	0e 94 5e 10 	call	0x20bc	; 0x20bc <readlast_TWI>
		if (flag & 0b10000000) {			// or add a timer timeout
     3c6:	88 23       	and	r24, r24
     3c8:	0c f4       	brge	.+2      	; 0x3cc <read_ADS1115+0xd6>
			converting = NO;
     3ca:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     3cc:	c1 11       	cpse	r28, r1
     3ce:	f5 cf       	rjmp	.-22     	; 0x3ba <read_ADS1115+0xc4>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
		if (flag & 0b10000000) {			// or add a timer timeout
			converting = NO;
		}
	}
	stop_TWI();
     3d0:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>

	start_TWI(addr, TWIWRITE);
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	8d 2f       	mov	r24, r29
     3d8:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     3e2:	61 e0       	ldi	r22, 0x01	; 1
     3e4:	8d 2f       	mov	r24, r29
     3e6:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
	highbyte = read_TWI();
     3ea:	0e 94 4e 10 	call	0x209c	; 0x209c <read_TWI>
     3ee:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     3f0:	0e 94 5e 10 	call	0x20bc	; 0x20bc <readlast_TWI>
     3f4:	d8 2f       	mov	r29, r24
	stop_TWI();
     3f6:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>

	value = highbyte;
     3fa:	6c 2f       	mov	r22, r28
     3fc:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     3fe:	76 2f       	mov	r23, r22
     400:	66 27       	eor	r22, r22
	value |= lowbyte;
     402:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     404:	84 e0       	ldi	r24, 0x04	; 4
     406:	f8 16       	cp	r15, r24
     408:	49 f1       	breq	.+82     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     40a:	8f 15       	cp	r24, r15
     40c:	30 f0       	brcs	.+12     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     40e:	ff 20       	and	r15, r15
     410:	d9 f1       	breq	.+118    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	f8 16       	cp	r15, r24
     416:	69 f1       	breq	.+90     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     418:	42 c0       	rjmp	.+132    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     41a:	88 e0       	ldi	r24, 0x08	; 8
     41c:	f8 16       	cp	r15, r24
     41e:	09 f4       	brne	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     420:	42 c0       	rjmp	.+132    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     422:	8a e0       	ldi	r24, 0x0A	; 10
     424:	f8 16       	cp	r15, r24
     426:	21 f0       	breq	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     428:	86 e0       	ldi	r24, 0x06	; 6
     42a:	f8 12       	cpse	r15, r24
     42c:	38 c0       	rjmp	.+112    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     42e:	0b c0       	rjmp	.+22     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		case PGA0256:
			scale = SCA0256;
     430:	0f 2e       	mov	r0, r31
     432:	f4 e7       	ldi	r31, 0x74	; 116
     434:	cf 2e       	mov	r12, r31
     436:	f3 e1       	ldi	r31, 0x13	; 19
     438:	df 2e       	mov	r13, r31
     43a:	f3 e0       	ldi	r31, 0x03	; 3
     43c:	ef 2e       	mov	r14, r31
     43e:	f7 e3       	ldi	r31, 0x37	; 55
     440:	ff 2e       	mov	r15, r31
     442:	f0 2d       	mov	r31, r0
     444:	3a c0       	rjmp	.+116    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     446:	0f 2e       	mov	r0, r31
     448:	f4 e7       	ldi	r31, 0x74	; 116
     44a:	cf 2e       	mov	r12, r31
     44c:	f3 e1       	ldi	r31, 0x13	; 19
     44e:	df 2e       	mov	r13, r31
     450:	f3 e0       	ldi	r31, 0x03	; 3
     452:	ef 2e       	mov	r14, r31
     454:	f8 e3       	ldi	r31, 0x38	; 56
     456:	ff 2e       	mov	r15, r31
     458:	f0 2d       	mov	r31, r0
			break;
     45a:	2f c0       	rjmp	.+94     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		case PGA2048:
			scale = SCA2048;
     45c:	0f 2e       	mov	r0, r31
     45e:	f2 e1       	ldi	r31, 0x12	; 18
     460:	cf 2e       	mov	r12, r31
     462:	f3 e1       	ldi	r31, 0x13	; 19
     464:	df 2e       	mov	r13, r31
     466:	f3 e8       	ldi	r31, 0x83	; 131
     468:	ef 2e       	mov	r14, r31
     46a:	f8 e3       	ldi	r31, 0x38	; 56
     46c:	ff 2e       	mov	r15, r31
     46e:	f0 2d       	mov	r31, r0
			break;
     470:	24 c0       	rjmp	.+72     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		case PGA4096:
			scale = SCA4096;
     472:	0f 2e       	mov	r0, r31
     474:	f4 e7       	ldi	r31, 0x74	; 116
     476:	cf 2e       	mov	r12, r31
     478:	f3 e1       	ldi	r31, 0x13	; 19
     47a:	df 2e       	mov	r13, r31
     47c:	f3 e0       	ldi	r31, 0x03	; 3
     47e:	ef 2e       	mov	r14, r31
     480:	f9 e3       	ldi	r31, 0x39	; 57
     482:	ff 2e       	mov	r15, r31
     484:	f0 2d       	mov	r31, r0
			break;
     486:	19 c0       	rjmp	.+50     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		case PGA6144:
			scale = SCA6144;
     488:	0f 2e       	mov	r0, r31
     48a:	fe e2       	ldi	r31, 0x2E	; 46
     48c:	cf 2e       	mov	r12, r31
     48e:	fd e9       	ldi	r31, 0x9D	; 157
     490:	df 2e       	mov	r13, r31
     492:	f4 e4       	ldi	r31, 0x44	; 68
     494:	ef 2e       	mov	r14, r31
     496:	f9 e3       	ldi	r31, 0x39	; 57
     498:	ff 2e       	mov	r15, r31
     49a:	f0 2d       	mov	r31, r0
			break;
     49c:	0e c0       	rjmp	.+28     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		default:
			scale = 0.0;
     49e:	c1 2c       	mov	r12, r1
     4a0:	d1 2c       	mov	r13, r1
     4a2:	76 01       	movw	r14, r12
			break;
     4a4:	0a c0       	rjmp	.+20     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     4a6:	0f 2e       	mov	r0, r31
     4a8:	f1 e7       	ldi	r31, 0x71	; 113
     4aa:	cf 2e       	mov	r12, r31
     4ac:	f3 e1       	ldi	r31, 0x13	; 19
     4ae:	df 2e       	mov	r13, r31
     4b0:	f3 e8       	ldi	r31, 0x83	; 131
     4b2:	ef 2e       	mov	r14, r31
     4b4:	f7 e3       	ldi	r31, 0x37	; 55
     4b6:	ff 2e       	mov	r15, r31
     4b8:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	voltage = scale * (float) value;
     4ba:	07 2e       	mov	r0, r23
     4bc:	00 0c       	add	r0, r0
     4be:	88 0b       	sbc	r24, r24
     4c0:	99 0b       	sbc	r25, r25
     4c2:	0e 94 71 13 	call	0x26e2	; 0x26e2 <__floatsisf>
     4c6:	9b 01       	movw	r18, r22
     4c8:	ac 01       	movw	r20, r24
     4ca:	c7 01       	movw	r24, r14
     4cc:	b6 01       	movw	r22, r12
     4ce:	0e 94 26 14 	call	0x284c	; 0x284c <__mulsf3>
	return(voltage);
     4d2:	56 2f       	mov	r21, r22
     4d4:	47 2f       	mov	r20, r23
     4d6:	38 2f       	mov	r19, r24
     4d8:	29 2f       	mov	r18, r25

}
     4da:	65 2f       	mov	r22, r21
     4dc:	74 2f       	mov	r23, r20
     4de:	83 2f       	mov	r24, r19
     4e0:	92 2f       	mov	r25, r18
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	df 90       	pop	r13
     4f0:	cf 90       	pop	r12
     4f2:	08 95       	ret

000004f4 <init_BEEPER>:
#include "globals.h"

void init_BEEPER(void)
{

	PORTB.OUTSET = PIN2_bm;
     4f4:	e0 e2       	ldi	r30, 0x20	; 32
     4f6:	f4 e0       	ldi	r31, 0x04	; 4
     4f8:	84 e0       	ldi	r24, 0x04	; 4
     4fa:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     4fc:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = PIN2_bm;
     4fe:	86 83       	std	Z+6, r24	; 0x06
     500:	08 95       	ret

00000502 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding the NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	c5 59       	subi	r28, 0x95	; 149
     510:	d1 09       	sbc	r29, r1
     512:	cd bf       	out	0x3d, r28	; 61
     514:	de bf       	out	0x3e, r29	; 62

	char format_CMD[] = "$S%dCMD,%s";
     516:	2b e0       	ldi	r18, 0x0B	; 11
     518:	e2 ee       	ldi	r30, 0xE2	; 226
     51a:	f4 e7       	ldi	r31, 0x74	; 116
     51c:	de 01       	movw	r26, r28
     51e:	11 96       	adiw	r26, 0x01	; 1
     520:	01 90       	ld	r0, Z+
     522:	0d 92       	st	X+, r0
     524:	2a 95       	dec	r18
     526:	e1 f7       	brne	.-8      	; 0x520 <echo_cmd+0x1e>
	char strbuf[BUFSIZE+10];		// Add $SXCMD, and *HH checksum

		// Format and echo the command line
	sprintf(strbuf, format_CMD, get_SPECID, cmdline);
     528:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     52c:	22 ff       	sbrs	r18, 2
     52e:	03 c0       	rjmp	.+6      	; 0x536 <echo_cmd+0x34>
     530:	22 e0       	ldi	r18, 0x02	; 2
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	02 c0       	rjmp	.+4      	; 0x53a <echo_cmd+0x38>
     536:	21 e0       	ldi	r18, 0x01	; 1
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	9f 93       	push	r25
     53c:	8f 93       	push	r24
     53e:	3f 93       	push	r19
     540:	2f 93       	push	r18
     542:	ce 01       	movw	r24, r28
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	9f 93       	push	r25
     548:	8f 93       	push	r24
     54a:	8e 01       	movw	r16, r28
     54c:	04 5f       	subi	r16, 0xF4	; 244
     54e:	1f 4f       	sbci	r17, 0xFF	; 255
     550:	1f 93       	push	r17
     552:	0f 93       	push	r16
     554:	0e 94 ab 19 	call	0x3356	; 0x3356 <sprintf>
	checksum_NMEA(strbuf);
     558:	c8 01       	movw	r24, r16
     55a:	0e 94 62 09 	call	0x12c4	; 0x12c4 <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     55e:	f8 01       	movw	r30, r16
     560:	01 90       	ld	r0, Z+
     562:	00 20       	and	r0, r0
     564:	e9 f7       	brne	.-6      	; 0x560 <echo_cmd+0x5e>
     566:	31 97       	sbiw	r30, 0x01	; 1
     568:	af 01       	movw	r20, r30
     56a:	40 1b       	sub	r20, r16
     56c:	51 0b       	sbc	r21, r17
     56e:	b8 01       	movw	r22, r16
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <send_USART>

}
     576:	cd bf       	out	0x3d, r28	; 61
     578:	de bf       	out	0x3e, r29	; 62
     57a:	cb 56       	subi	r28, 0x6B	; 107
     57c:	df 4f       	sbci	r29, 0xFF	; 255
     57e:	cd bf       	out	0x3d, r28	; 61
     580:	de bf       	out	0x3e, r29	; 62
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	08 95       	ret

0000058c <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if (c >= 'a' && c <= 'z') {
     58c:	9f e9       	ldi	r25, 0x9F	; 159
     58e:	98 0f       	add	r25, r24
     590:	9a 31       	cpi	r25, 0x1A	; 26
     592:	28 f0       	brcs	.+10     	; 0x59e <isaletter+0x12>
		return(1);
	}

	if (c >= 'A' && c <= 'Z') {
     594:	81 54       	subi	r24, 0x41	; 65
     596:	8a 31       	cpi	r24, 0x1A	; 26
     598:	20 f4       	brcc	.+8      	; 0x5a2 <isaletter+0x16>
		return(1);
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	08 95       	ret
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if (c >= 'a' && c <= 'z') {
		return(1);
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	08 95       	ret

	if (c >= 'A' && c <= 'Z') {
		return(1);
	}

	return(0);
     5a2:	80 e0       	ldi	r24, 0x00	; 0

}
     5a4:	08 95       	ret

000005a6 <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     5b2:	e6 2e       	mov	r14, r22
     5b4:	f1 2c       	mov	r15, r1
     5b6:	84 e3       	ldi	r24, 0x34	; 52
     5b8:	8e 9d       	mul	r24, r14
     5ba:	f0 01       	movw	r30, r0
     5bc:	8f 9d       	mul	r24, r15
     5be:	f0 0d       	add	r31, r0
     5c0:	11 24       	eor	r1, r1
     5c2:	ed 5f       	subi	r30, 0xFD	; 253
     5c4:	f7 4d       	sbci	r31, 0xD7	; 215
     5c6:	8f e3       	ldi	r24, 0x3F	; 63
     5c8:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     5ca:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     5cc:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     5ce:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {
     5d0:	04 c0       	rjmp	.+8      	; 0x5da <parse_cmd+0x34>
		if (*ptr == '\0') {
     5d2:	11 23       	and	r17, r17
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <parse_cmd+0x32>
     5d6:	75 c0       	rjmp	.+234    	; 0x6c2 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     5d8:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {
     5da:	18 81       	ld	r17, Y
     5dc:	81 2f       	mov	r24, r17
     5de:	0e 94 c6 02 	call	0x58c	; 0x58c <isaletter>
     5e2:	88 23       	and	r24, r24
     5e4:	b1 f3       	breq	.-20     	; 0x5d2 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     5e6:	21 96       	adiw	r28, 0x01	; 1
     5e8:	84 e3       	ldi	r24, 0x34	; 52
     5ea:	8e 9d       	mul	r24, r14
     5ec:	f0 01       	movw	r30, r0
     5ee:	8f 9d       	mul	r24, r15
     5f0:	f0 0d       	add	r31, r0
     5f2:	11 24       	eor	r1, r1
     5f4:	ed 5f       	subi	r30, 0xFD	; 253
     5f6:	f7 4d       	sbci	r31, 0xD7	; 215
     5f8:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {
     5fa:	04 c0       	rjmp	.+8      	; 0x604 <parse_cmd+0x5e>
		if (*ptr == '\0') {
     5fc:	11 23       	and	r17, r17
     5fe:	09 f4       	brne	.+2      	; 0x602 <parse_cmd+0x5c>
     600:	60 c0       	rjmp	.+192    	; 0x6c2 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     602:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {
     604:	18 81       	ld	r17, Y
     606:	81 2f       	mov	r24, r17
     608:	0e 94 c6 02 	call	0x58c	; 0x58c <isaletter>
     60c:	88 23       	and	r24, r24
     60e:	b1 f3       	breq	.-20     	; 0x5fc <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     610:	21 96       	adiw	r28, 0x01	; 1
     612:	84 e3       	ldi	r24, 0x34	; 52
     614:	8e 9d       	mul	r24, r14
     616:	f0 01       	movw	r30, r0
     618:	8f 9d       	mul	r24, r15
     61a:	f0 0d       	add	r31, r0
     61c:	11 24       	eor	r1, r1
     61e:	ed 5f       	subi	r30, 0xFD	; 253
     620:	f7 4d       	sbci	r31, 0xD7	; 215
     622:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	2a c0       	rjmp	.+84     	; 0x67c <parse_cmd+0xd6>
		if (*ptr == '\0') {
     628:	98 81       	ld	r25, Y
     62a:	91 11       	cpse	r25, r1
     62c:	0c c0       	rjmp	.+24     	; 0x646 <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     62e:	94 e3       	ldi	r25, 0x34	; 52
     630:	9e 9d       	mul	r25, r14
     632:	f0 01       	movw	r30, r0
     634:	9f 9d       	mul	r25, r15
     636:	f0 0d       	add	r31, r0
     638:	11 24       	eor	r1, r1
     63a:	ed 5f       	subi	r30, 0xFD	; 253
     63c:	f7 4d       	sbci	r31, 0xD7	; 215
     63e:	e8 0f       	add	r30, r24
     640:	f1 1d       	adc	r31, r1
     642:	12 82       	std	Z+2, r1	; 0x02
			return;
     644:	3e c0       	rjmp	.+124    	; 0x6c2 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {
     646:	9b 33       	cpi	r25, 0x3B	; 59
     648:	61 f4       	brne	.+24     	; 0x662 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     64a:	94 e3       	ldi	r25, 0x34	; 52
     64c:	9e 9d       	mul	r25, r14
     64e:	f0 01       	movw	r30, r0
     650:	9f 9d       	mul	r25, r15
     652:	f0 0d       	add	r31, r0
     654:	11 24       	eor	r1, r1
     656:	ed 5f       	subi	r30, 0xFD	; 253
     658:	f7 4d       	sbci	r31, 0xD7	; 215
     65a:	e8 0f       	add	r30, r24
     65c:	f1 1d       	adc	r31, r1
     65e:	12 82       	std	Z+2, r1	; 0x02
			break;
     660:	0f c0       	rjmp	.+30     	; 0x680 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     662:	21 96       	adiw	r28, 0x01	; 1
     664:	24 e3       	ldi	r18, 0x34	; 52
     666:	2e 9d       	mul	r18, r14
     668:	f0 01       	movw	r30, r0
     66a:	2f 9d       	mul	r18, r15
     66c:	f0 0d       	add	r31, r0
     66e:	11 24       	eor	r1, r1
     670:	ed 5f       	subi	r30, 0xFD	; 253
     672:	f7 4d       	sbci	r31, 0xD7	; 215
     674:	e8 0f       	add	r30, r24
     676:	f1 1d       	adc	r31, r1
     678:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     67a:	8f 5f       	subi	r24, 0xFF	; 255
     67c:	89 32       	cpi	r24, 0x29	; 41
     67e:	a0 f2       	brcs	.-88     	; 0x628 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
     680:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	1c c0       	rjmp	.+56     	; 0x6be <parse_cmd+0x118>
		if (*ptr == '\0') {
     686:	98 81       	ld	r25, Y
     688:	91 11       	cpse	r25, r1
     68a:	0c c0       	rjmp	.+24     	; 0x6a4 <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     68c:	94 e3       	ldi	r25, 0x34	; 52
     68e:	9e 9d       	mul	r25, r14
     690:	f0 01       	movw	r30, r0
     692:	9f 9d       	mul	r25, r15
     694:	f0 0d       	add	r31, r0
     696:	11 24       	eor	r1, r1
     698:	ed 5f       	subi	r30, 0xFD	; 253
     69a:	f7 4d       	sbci	r31, 0xD7	; 215
     69c:	e8 0f       	add	r30, r24
     69e:	f1 1d       	adc	r31, r1
     6a0:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     6a2:	0f c0       	rjmp	.+30     	; 0x6c2 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     6a4:	21 96       	adiw	r28, 0x01	; 1
     6a6:	24 e3       	ldi	r18, 0x34	; 52
     6a8:	2e 9d       	mul	r18, r14
     6aa:	f0 01       	movw	r30, r0
     6ac:	2f 9d       	mul	r18, r15
     6ae:	f0 0d       	add	r31, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	ed 5f       	subi	r30, 0xFD	; 253
     6b4:	f7 4d       	sbci	r31, 0xD7	; 215
     6b6:	e8 0f       	add	r30, r24
     6b8:	f1 1d       	adc	r31, r1
     6ba:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	89 30       	cpi	r24, 0x09	; 9
     6c0:	10 f3       	brcs	.-60     	; 0x686 <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	08 95       	ret

000006ce <send_prompt>:

	If specMech is rebooted, it will only prompt with a single exclamation
	point (!) until it receives an acknowledgment in the form of a single !.
------------------------------------------------------------------------------*/
void send_prompt(uint8_t prompt_flag)
{
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	6d 97       	sbiw	r28, 0x1d	; 29
     6dc:	cd bf       	out	0x3d, r28	; 61
     6de:	de bf       	out	0x3e, r29	; 62

	const char str0[] = ">";
     6e0:	2e e3       	ldi	r18, 0x3E	; 62
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	29 83       	std	Y+1, r18	; 0x01
     6e6:	3a 83       	std	Y+2, r19	; 0x02
	const char str1[] = "!";
     6e8:	21 e2       	ldi	r18, 0x21	; 33
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	2b 83       	std	Y+3, r18	; 0x03
     6ee:	3c 83       	std	Y+4, r19	; 0x04

	char prompt_str[25];

	switch (prompt_flag) {
     6f0:	81 30       	cpi	r24, 0x01	; 1
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <send_prompt+0x28>
     6f4:	3f c0       	rjmp	.+126    	; 0x774 <send_prompt+0xa6>
     6f6:	18 f0       	brcs	.+6      	; 0x6fe <send_prompt+0x30>
     6f8:	82 30       	cpi	r24, 0x02	; 2
     6fa:	b9 f0       	breq	.+46     	; 0x72a <send_prompt+0x5c>
     6fc:	51 c0       	rjmp	.+162    	; 0x7a0 <send_prompt+0xd2>
		case GREATERPROMPT:
			strcpy(prompt_str, str0);
     6fe:	8e 01       	movw	r16, r28
     700:	0b 5f       	subi	r16, 0xFB	; 251
     702:	1f 4f       	sbci	r17, 0xFF	; 255
     704:	be 01       	movw	r22, r28
     706:	6f 5f       	subi	r22, 0xFF	; 255
     708:	7f 4f       	sbci	r23, 0xFF	; 255
     70a:	c8 01       	movw	r24, r16
     70c:	0e 94 5d 19 	call	0x32ba	; 0x32ba <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     710:	f8 01       	movw	r30, r16
     712:	01 90       	ld	r0, Z+
     714:	00 20       	and	r0, r0
     716:	e9 f7       	brne	.-6      	; 0x712 <send_prompt+0x44>
     718:	31 97       	sbiw	r30, 0x01	; 1
     71a:	af 01       	movw	r20, r30
     71c:	40 1b       	sub	r20, r16
     71e:	51 0b       	sbc	r21, r17
     720:	b8 01       	movw	r22, r16
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <send_USART>
			break;
     728:	50 c0       	rjmp	.+160    	; 0x7ca <send_prompt+0xfc>

		case ERRORPROMPT:
			format_ERR(prompt_str);
     72a:	8e 01       	movw	r16, r28
     72c:	0b 5f       	subi	r16, 0xFB	; 251
     72e:	1f 4f       	sbci	r17, 0xFF	; 255
     730:	c8 01       	movw	r24, r16
     732:	0e 94 ab 09 	call	0x1356	; 0x1356 <format_ERR>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     736:	f8 01       	movw	r30, r16
     738:	01 90       	ld	r0, Z+
     73a:	00 20       	and	r0, r0
     73c:	e9 f7       	brne	.-6      	; 0x738 <send_prompt+0x6a>
     73e:	31 97       	sbiw	r30, 0x01	; 1
     740:	af 01       	movw	r20, r30
     742:	40 1b       	sub	r20, r16
     744:	51 0b       	sbc	r21, r17
     746:	b8 01       	movw	r22, r16
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <send_USART>
			strcpy(prompt_str, str0);
     74e:	be 01       	movw	r22, r28
     750:	6f 5f       	subi	r22, 0xFF	; 255
     752:	7f 4f       	sbci	r23, 0xFF	; 255
     754:	c8 01       	movw	r24, r16
     756:	0e 94 5d 19 	call	0x32ba	; 0x32ba <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     75a:	f8 01       	movw	r30, r16
     75c:	01 90       	ld	r0, Z+
     75e:	00 20       	and	r0, r0
     760:	e9 f7       	brne	.-6      	; 0x75c <send_prompt+0x8e>
     762:	31 97       	sbiw	r30, 0x01	; 1
     764:	af 01       	movw	r20, r30
     766:	40 1b       	sub	r20, r16
     768:	51 0b       	sbc	r21, r17
     76a:	b8 01       	movw	r22, r16
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <send_USART>
			break;
     772:	2b c0       	rjmp	.+86     	; 0x7ca <send_prompt+0xfc>

		case EXCLAIMPROMPT:
			strcpy(prompt_str, str1);
     774:	8e 01       	movw	r16, r28
     776:	0b 5f       	subi	r16, 0xFB	; 251
     778:	1f 4f       	sbci	r17, 0xFF	; 255
     77a:	be 01       	movw	r22, r28
     77c:	6d 5f       	subi	r22, 0xFD	; 253
     77e:	7f 4f       	sbci	r23, 0xFF	; 255
     780:	c8 01       	movw	r24, r16
     782:	0e 94 5d 19 	call	0x32ba	; 0x32ba <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     786:	f8 01       	movw	r30, r16
     788:	01 90       	ld	r0, Z+
     78a:	00 20       	and	r0, r0
     78c:	e9 f7       	brne	.-6      	; 0x788 <send_prompt+0xba>
     78e:	31 97       	sbiw	r30, 0x01	; 1
     790:	af 01       	movw	r20, r30
     792:	40 1b       	sub	r20, r16
     794:	51 0b       	sbc	r21, r17
     796:	b8 01       	movw	r22, r16
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <send_USART>
			break;
     79e:	15 c0       	rjmp	.+42     	; 0x7ca <send_prompt+0xfc>

		default:
			strcpy(prompt_str, str1);
     7a0:	8e 01       	movw	r16, r28
     7a2:	0b 5f       	subi	r16, 0xFB	; 251
     7a4:	1f 4f       	sbci	r17, 0xFF	; 255
     7a6:	be 01       	movw	r22, r28
     7a8:	6d 5f       	subi	r22, 0xFD	; 253
     7aa:	7f 4f       	sbci	r23, 0xFF	; 255
     7ac:	c8 01       	movw	r24, r16
     7ae:	0e 94 5d 19 	call	0x32ba	; 0x32ba <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     7b2:	f8 01       	movw	r30, r16
     7b4:	01 90       	ld	r0, Z+
     7b6:	00 20       	and	r0, r0
     7b8:	e9 f7       	brne	.-6      	; 0x7b4 <send_prompt+0xe6>
     7ba:	31 97       	sbiw	r30, 0x01	; 1
     7bc:	af 01       	movw	r20, r30
     7be:	40 1b       	sub	r20, r16
     7c0:	51 0b       	sbc	r21, r17
     7c2:	b8 01       	movw	r22, r16
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <send_USART>
			break;

	}

}
     7ca:	6d 96       	adiw	r28, 0x1d	; 29
     7cc:	cd bf       	out	0x3d, r28	; 61
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62
     7e2:	c0 58       	subi	r28, 0x80	; 128
     7e4:	d1 09       	sbc	r29, r1
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	de bf       	out	0x3e, r29	; 62
	char verb, object;
	uint8_t i, prompt_flag = GREATERPROMPT;
	static uint8_t rebootnack = 1;
	static uint8_t cstack = 0;		// Index for pcmd

on_BEEPER;
     7ea:	e0 e2       	ldi	r30, 0x20	; 32
     7ec:	f4 e0       	ldi	r31, 0x04	; 4
     7ee:	84 e0       	ldi	r24, 0x04	; 4
     7f0:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7f2:	a2 ec       	ldi	r26, 0xC2	; 194
     7f4:	b2 ea       	ldi	r27, 0xA2	; 162
     7f6:	11 97       	sbiw	r26, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <commands+0x1c>
     7fa:	00 c0       	rjmp	.+0      	; 0x7fc <commands+0x22>
_delay_ms(50);
off_BEEPER;
     7fc:	86 83       	std	Z+6, r24	; 0x06

	// Copy the command string to cmdline
	for (i = 0; i < BUFSIZE; i++) {
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	1c c0       	rjmp	.+56     	; 0x83a <commands+0x60>
		cmdline[i] = recv0_buf.data[recv0_buf.tail];
     802:	80 91 11 2b 	lds	r24, 0x2B11	; 0x802b11 <recv0_buf+0x81>
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	fc 01       	movw	r30, r24
     80a:	e0 57       	subi	r30, 0x70	; 112
     80c:	f5 4d       	sbci	r31, 0xD5	; 213
     80e:	30 81       	ld	r19, Z
     810:	e1 e0       	ldi	r30, 0x01	; 1
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	ec 0f       	add	r30, r28
     816:	fd 1f       	adc	r31, r29
     818:	e2 0f       	add	r30, r18
     81a:	f1 1d       	adc	r31, r1
     81c:	30 83       	st	Z, r19
		recv0_buf.tail = (recv0_buf.tail + 1) % BUFSIZE;
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	8f 77       	andi	r24, 0x7F	; 127
     822:	90 78       	andi	r25, 0x80	; 128
     824:	99 23       	and	r25, r25
     826:	24 f4       	brge	.+8      	; 0x830 <commands+0x56>
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	80 68       	ori	r24, 0x80	; 128
     82c:	9f 6f       	ori	r25, 0xFF	; 255
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	80 93 11 2b 	sts	0x2B11, r24	; 0x802b11 <recv0_buf+0x81>
		if (cmdline[i] == '\0') {
     834:	33 23       	and	r19, r19
     836:	19 f0       	breq	.+6      	; 0x83e <commands+0x64>
on_BEEPER;
_delay_ms(50);
off_BEEPER;

	// Copy the command string to cmdline
	for (i = 0; i < BUFSIZE; i++) {
     838:	2f 5f       	subi	r18, 0xFF	; 255
     83a:	22 23       	and	r18, r18
     83c:	14 f7       	brge	.-60     	; 0x802 <commands+0x28>
			break;
		}
	}

	// Check if rebooted
	if (rebootnack) {
     83e:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     842:	88 23       	and	r24, r24
     844:	89 f0       	breq	.+34     	; 0x868 <commands+0x8e>
		if (cmdline[0] != '!') {
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	81 32       	cpi	r24, 0x21	; 33
     84a:	21 f0       	breq	.+8      	; 0x854 <commands+0x7a>
			send_prompt(EXCLAIMPROMPT);		
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	0e 94 67 03 	call	0x6ce	; 0x6ce <send_prompt>
			return;
     852:	66 c0       	rjmp	.+204    	; 0x920 <commands+0x146>
		} else {
			init_RTC(511);		// 1-sec RTC clock
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <init_RTC>
			send_prompt(GREATERPROMPT);
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	0e 94 67 03 	call	0x6ce	; 0x6ce <send_prompt>
			rebootnack = 0;
     862:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
			return;
     866:	5c c0       	rjmp	.+184    	; 0x920 <commands+0x146>
		}
	}

	// Echo the command back to the user
	echo_cmd(cmdline);
     868:	ce 01       	movw	r24, r28
     86a:	01 96       	adiw	r24, 0x01	; 1
     86c:	0e 94 81 02 	call	0x502	; 0x502 <echo_cmd>

//writestr_OLED(0, cmdline, 1);
writestr_OLED(1, cmdline, 1);
     870:	41 e0       	ldi	r20, 0x01	; 1
     872:	be 01       	movw	r22, r28
     874:	6f 5f       	subi	r22, 0xFF	; 255
     876:	7f 4f       	sbci	r23, 0xFF	; 255
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <writestr_OLED>

	if (strlen(cmdline) == 0) {		// Catch a terminal cr
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	81 11       	cpse	r24, r1
     882:	03 c0       	rjmp	.+6      	; 0x88a <commands+0xb0>
		send_prompt(GREATERPROMPT);
     884:	0e 94 67 03 	call	0x6ce	; 0x6ce <send_prompt>
		return;
     888:	4b c0       	rjmp	.+150    	; 0x920 <commands+0x146>
	}

	parse_cmd(cmdline, cstack);
     88a:	60 91 02 28 	lds	r22, 0x2802	; 0x802802 <__data_end>
     88e:	ce 01       	movw	r24, r28
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <parse_cmd>
	verb = pcmd[cstack].cverb;
     896:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     89a:	b4 e3       	ldi	r27, 0x34	; 52
     89c:	8b 9f       	mul	r24, r27
     89e:	f0 01       	movw	r30, r0
     8a0:	11 24       	eor	r1, r1
     8a2:	ed 5f       	subi	r30, 0xFD	; 253
     8a4:	f7 4d       	sbci	r31, 0xD7	; 215
     8a6:	90 81       	ld	r25, Z
	object = pcmd[cstack].cobject;
     8a8:	21 81       	ldd	r18, Z+1	; 0x01

	switch (verb) {
     8aa:	9f 36       	cpi	r25, 0x6F	; 111
     8ac:	81 f0       	breq	.+32     	; 0x8ce <commands+0xf4>
     8ae:	28 f4       	brcc	.+10     	; 0x8ba <commands+0xe0>
     8b0:	92 35       	cpi	r25, 0x52	; 82
     8b2:	d1 f0       	breq	.+52     	; 0x8e8 <commands+0x10e>
     8b4:	93 36       	cpi	r25, 0x63	; 99
     8b6:	31 f0       	breq	.+12     	; 0x8c4 <commands+0xea>
     8b8:	25 c0       	rjmp	.+74     	; 0x904 <commands+0x12a>
     8ba:	92 37       	cpi	r25, 0x72	; 114
     8bc:	69 f0       	breq	.+26     	; 0x8d8 <commands+0xfe>
     8be:	93 37       	cpi	r25, 0x73	; 115
     8c0:	79 f0       	breq	.+30     	; 0x8e0 <commands+0x106>
     8c2:	20 c0       	rjmp	.+64     	; 0x904 <commands+0x12a>
		case 'c':				// close
			prompt_flag = close_PNEU(object);
     8c4:	82 2f       	mov	r24, r18
     8c6:	0e 94 9a 0b 	call	0x1734	; 0x1734 <close_PNEU>
     8ca:	28 2f       	mov	r18, r24
			break;
     8cc:	1c c0       	rjmp	.+56     	; 0x906 <commands+0x12c>

		case 'o':				// open
			prompt_flag = open_PNEU(object);
     8ce:	82 2f       	mov	r24, r18
     8d0:	0e 94 c3 0b 	call	0x1786	; 0x1786 <open_PNEU>
     8d4:	28 2f       	mov	r18, r24
			break;
     8d6:	17 c0       	rjmp	.+46     	; 0x906 <commands+0x12c>

		case 'r':				// Report
			prompt_flag = report(cstack);
     8d8:	0e 94 24 0c 	call	0x1848	; 0x1848 <report>
     8dc:	28 2f       	mov	r18, r24
			break;
     8de:	13 c0       	rjmp	.+38     	; 0x906 <commands+0x12c>

		case 's':				// Set
			prompt_flag = set(cstack);
     8e0:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <set>
     8e4:	28 2f       	mov	r18, r24
			break;
     8e6:	0f c0       	rjmp	.+30     	; 0x906 <commands+0x12c>

		case 'R':				// Reboot
			send_prompt(GREATERPROMPT);
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	0e 94 67 03 	call	0x6ce	; 0x6ce <send_prompt>
     8ee:	2a e6       	ldi	r18, 0x6A	; 106
     8f0:	84 e0       	ldi	r24, 0x04	; 4
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	21 50       	subi	r18, 0x01	; 1
     8f6:	80 40       	sbci	r24, 0x00	; 0
     8f8:	90 40       	sbci	r25, 0x00	; 0
     8fa:	e1 f7       	brne	.-8      	; 0x8f4 <commands+0x11a>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <commands+0x124>
			_delay_ms(100);		// Avoid finishing the command loop before reboot
			reboot();
     8fe:	0e 94 85 12 	call	0x250a	; 0x250a <reboot>
			return;
     902:	0e c0       	rjmp	.+28     	; 0x920 <commands+0x146>

		default:
			prompt_flag = ERRORPROMPT;
     904:	22 e0       	ldi	r18, 0x02	; 2
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     906:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	6a e0       	ldi	r22, 0x0A	; 10
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	0e 94 10 18 	call	0x3020	; 0x3020 <__divmodhi4>
     916:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <__data_end>
	send_prompt(prompt_flag);
     91a:	82 2f       	mov	r24, r18
     91c:	0e 94 67 03 	call	0x6ce	; 0x6ce <send_prompt>

}
     920:	c0 58       	subi	r28, 0x80	; 128
     922:	df 4f       	sbci	r29, 0xFF	; 255
     924:	cd bf       	out	0x3d, r28	; 61
     926:	de bf       	out	0x3e, r29	; 62
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	08 95       	ret

0000092e <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     92e:	fb 01       	movw	r30, r22
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     930:	70 81       	ld	r23, Z
	minutes = (*ds3231time++);
     932:	61 81       	ldd	r22, Z+1	; 0x01
	hours = (*ds3231time++);
     934:	52 81       	ldd	r21, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     936:	44 81       	ldd	r20, Z+4	; 0x04
	month = (*ds3231time++);
     938:	35 81       	ldd	r19, Z+5	; 0x05
	year = (*ds3231time);
     93a:	26 81       	ldd	r18, Z+6	; 0x06

	sprintf(isotime, "20%02x-%02x-%02xT%02x:%02x:%02x",
     93c:	1f 92       	push	r1
     93e:	7f 93       	push	r23
     940:	1f 92       	push	r1
     942:	6f 93       	push	r22
     944:	1f 92       	push	r1
     946:	5f 93       	push	r21
     948:	1f 92       	push	r1
     94a:	4f 93       	push	r20
     94c:	1f 92       	push	r1
     94e:	3f 93       	push	r19
     950:	1f 92       	push	r1
     952:	2f 93       	push	r18
     954:	2d ee       	ldi	r18, 0xED	; 237
     956:	34 e7       	ldi	r19, 0x74	; 116
     958:	3f 93       	push	r19
     95a:	2f 93       	push	r18
     95c:	9f 93       	push	r25
     95e:	8f 93       	push	r24
     960:	0e 94 ab 19 	call	0x3356	; 0x3356 <sprintf>
		year, month, date, hours, minutes, seconds);

}
     964:	8d b7       	in	r24, 0x3d	; 61
     966:	9e b7       	in	r25, 0x3e	; 62
     968:	40 96       	adiw	r24, 0x10	; 16
     96a:	8d bf       	out	0x3d, r24	; 61
     96c:	9e bf       	out	0x3e, r25	; 62
     96e:	08 95       	ret

00000970 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ssZ
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     970:	dc 01       	movw	r26, r24
     972:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     974:	81 89       	ldd	r24, Z+17	; 0x11
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	c0 97       	sbiw	r24, 0x30	; 48
     97a:	82 95       	swap	r24
     97c:	92 95       	swap	r25
     97e:	90 7f       	andi	r25, 0xF0	; 240
     980:	98 27       	eor	r25, r24
     982:	80 7f       	andi	r24, 0xF0	; 240
     984:	98 27       	eor	r25, r24
     986:	92 89       	ldd	r25, Z+18	; 0x12
     988:	90 53       	subi	r25, 0x30	; 48
     98a:	89 2b       	or	r24, r25
     98c:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     98e:	86 85       	ldd	r24, Z+14	; 0x0e
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	c0 97       	sbiw	r24, 0x30	; 48
     994:	82 95       	swap	r24
     996:	92 95       	swap	r25
     998:	90 7f       	andi	r25, 0xF0	; 240
     99a:	98 27       	eor	r25, r24
     99c:	80 7f       	andi	r24, 0xF0	; 240
     99e:	98 27       	eor	r25, r24
     9a0:	97 85       	ldd	r25, Z+15	; 0x0f
     9a2:	90 53       	subi	r25, 0x30	; 48
     9a4:	89 2b       	or	r24, r25
     9a6:	11 96       	adiw	r26, 0x01	; 1
     9a8:	8c 93       	st	X, r24
     9aa:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     9ac:	83 85       	ldd	r24, Z+11	; 0x0b
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	c0 97       	sbiw	r24, 0x30	; 48
     9b2:	82 95       	swap	r24
     9b4:	92 95       	swap	r25
     9b6:	90 7f       	andi	r25, 0xF0	; 240
     9b8:	98 27       	eor	r25, r24
     9ba:	80 7f       	andi	r24, 0xF0	; 240
     9bc:	98 27       	eor	r25, r24
     9be:	94 85       	ldd	r25, Z+12	; 0x0c
     9c0:	90 53       	subi	r25, 0x30	; 48
     9c2:	89 2b       	or	r24, r25
     9c4:	12 96       	adiw	r26, 0x02	; 2
     9c6:	8c 93       	st	X, r24
     9c8:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	13 96       	adiw	r26, 0x03	; 3
     9ce:	8c 93       	st	X, r24
     9d0:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     9d2:	80 85       	ldd	r24, Z+8	; 0x08
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	c0 97       	sbiw	r24, 0x30	; 48
     9d8:	82 95       	swap	r24
     9da:	92 95       	swap	r25
     9dc:	90 7f       	andi	r25, 0xF0	; 240
     9de:	98 27       	eor	r25, r24
     9e0:	80 7f       	andi	r24, 0xF0	; 240
     9e2:	98 27       	eor	r25, r24
     9e4:	91 85       	ldd	r25, Z+9	; 0x09
     9e6:	90 53       	subi	r25, 0x30	; 48
     9e8:	89 2b       	or	r24, r25
     9ea:	14 96       	adiw	r26, 0x04	; 4
     9ec:	8c 93       	st	X, r24
     9ee:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     9f0:	25 81       	ldd	r18, Z+5	; 0x05
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	20 53       	subi	r18, 0x30	; 48
     9f6:	31 09       	sbc	r19, r1
     9f8:	22 95       	swap	r18
     9fa:	32 95       	swap	r19
     9fc:	30 7f       	andi	r19, 0xF0	; 240
     9fe:	32 27       	eor	r19, r18
     a00:	20 7f       	andi	r18, 0xF0	; 240
     a02:	32 27       	eor	r19, r18
     a04:	86 81       	ldd	r24, Z+6	; 0x06
     a06:	80 53       	subi	r24, 0x30	; 48
     a08:	28 2b       	or	r18, r24
     a0a:	15 96       	adiw	r26, 0x05	; 5
     a0c:	2c 93       	st	X, r18
     a0e:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     a10:	22 81       	ldd	r18, Z+2	; 0x02
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	20 53       	subi	r18, 0x30	; 48
     a16:	31 09       	sbc	r19, r1
     a18:	22 95       	swap	r18
     a1a:	32 95       	swap	r19
     a1c:	30 7f       	andi	r19, 0xF0	; 240
     a1e:	32 27       	eor	r19, r18
     a20:	20 7f       	andi	r18, 0xF0	; 240
     a22:	32 27       	eor	r19, r18
     a24:	83 81       	ldd	r24, Z+3	; 0x03
     a26:	80 53       	subi	r24, 0x30	; 48
     a28:	28 2b       	or	r18, r24
     a2a:	16 96       	adiw	r26, 0x06	; 6
     a2c:	2c 93       	st	X, r18
     a2e:	08 95       	ret

00000a30 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	7b 01       	movw	r14, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     a3c:	60 e0       	ldi	r22, 0x00	; 0
     a3e:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
     a42:	c8 2f       	mov	r28, r24
     a44:	88 23       	and	r24, r24
     a46:	21 f0       	breq	.+8      	; 0xa50 <read_DS3231+0x20>
		stop_TWI();
     a48:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
		return(retval);
     a4c:	8c 2f       	mov	r24, r28
     a4e:	28 c0       	rjmp	.+80     	; 0xaa0 <read_DS3231+0x70>
    }  

	if ((retval = write_TWI(0x00))) {	// Register 00h
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
     a56:	c8 2f       	mov	r28, r24
     a58:	88 23       	and	r24, r24
     a5a:	21 f0       	breq	.+8      	; 0xa64 <read_DS3231+0x34>
		stop_TWI();
     a5c:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
		return(retval);
     a60:	8c 2f       	mov	r24, r28
     a62:	1e c0       	rjmp	.+60     	; 0xaa0 <read_DS3231+0x70>
	}
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
     a64:	61 e0       	ldi	r22, 0x01	; 1
     a66:	80 ed       	ldi	r24, 0xD0	; 208
     a68:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
     a6c:	c8 2f       	mov	r28, r24
     a6e:	88 23       	and	r24, r24
     a70:	69 f0       	breq	.+26     	; 0xa8c <read_DS3231+0x5c>
		stop_TWI();
     a72:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
		return(retval);
     a76:	8c 2f       	mov	r24, r28
     a78:	13 c0       	rjmp	.+38     	; 0xaa0 <read_DS3231+0x70>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     a7a:	87 01       	movw	r16, r14
     a7c:	0c 0f       	add	r16, r28
     a7e:	11 1d       	adc	r17, r1
     a80:	0e 94 4e 10 	call	0x209c	; 0x209c <read_TWI>
     a84:	f8 01       	movw	r30, r16
     a86:	80 83       	st	Z, r24
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 6; i++) {
     a88:	cf 5f       	subi	r28, 0xFF	; 255
     a8a:	01 c0       	rjmp	.+2      	; 0xa8e <read_DS3231+0x5e>
     a8c:	c0 e0       	ldi	r28, 0x00	; 0
     a8e:	c6 30       	cpi	r28, 0x06	; 6
     a90:	a0 f3       	brcs	.-24     	; 0xa7a <read_DS3231+0x4a>
		ds3231time[i] = read_TWI();
	}
	ds3231time[6] = readlast_TWI();
     a92:	0e 94 5e 10 	call	0x20bc	; 0x20bc <readlast_TWI>
     a96:	f7 01       	movw	r30, r14
     a98:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     a9a:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>

	return(0);
     a9e:	80 e0       	ldi	r24, 0x00	; 0

}
     aa0:	cf 91       	pop	r28
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
     ab8:	27 97       	sbiw	r28, 0x07	; 7
     aba:	cd bf       	out	0x3d, r28	; 61
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	8c 01       	movw	r16, r24

	uint8_t retval, ds3231time[7];

	if ((retval = read_DS3231(DS3231ADDR, ds3231time))) {
     ac0:	be 01       	movw	r22, r28
     ac2:	6f 5f       	subi	r22, 0xFF	; 255
     ac4:	7f 4f       	sbci	r23, 0xFF	; 255
     ac6:	80 ed       	ldi	r24, 0xD0	; 208
     ac8:	0e 94 18 05 	call	0xa30	; 0xa30 <read_DS3231>
     acc:	88 23       	and	r24, r24
     ace:	49 f0       	breq	.+18     	; 0xae2 <get_time+0x36>
		strcpy(isotime, "DS3231 read error");
     ad0:	92 e1       	ldi	r25, 0x12	; 18
     ad2:	ed e0       	ldi	r30, 0x0D	; 13
     ad4:	f5 e7       	ldi	r31, 0x75	; 117
     ad6:	d8 01       	movw	r26, r16
     ad8:	01 90       	ld	r0, Z+
     ada:	0d 92       	st	X+, r0
     adc:	9a 95       	dec	r25
     ade:	e1 f7       	brne	.-8      	; 0xad8 <get_time+0x2c>
		return(retval);
     ae0:	07 c0       	rjmp	.+14     	; 0xaf0 <get_time+0x44>
	}

	convert_ds2iso(isotime, ds3231time);
     ae2:	be 01       	movw	r22, r28
     ae4:	6f 5f       	subi	r22, 0xFF	; 255
     ae6:	7f 4f       	sbci	r23, 0xFF	; 255
     ae8:	c8 01       	movw	r24, r16
     aea:	0e 94 97 04 	call	0x92e	; 0x92e <convert_ds2iso>
	return(0);
     aee:	80 e0       	ldi	r24, 0x00	; 0

}
     af0:	27 96       	adiw	r28, 0x07	; 7
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	08 95       	ret

00000b00 <write_DS3231>:

	Returns
		TWI errors
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	8b 01       	movw	r16, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
     b14:	c8 2f       	mov	r28, r24
     b16:	88 23       	and	r24, r24
     b18:	21 f0       	breq	.+8      	; 0xb22 <write_DS3231+0x22>
		stop_TWI();
     b1a:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
		return(retval);
     b1e:	8c 2f       	mov	r24, r28
     b20:	22 c0       	rjmp	.+68     	; 0xb66 <write_DS3231+0x66>
	}

	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
     b28:	c8 2f       	mov	r28, r24
     b2a:	88 23       	and	r24, r24
     b2c:	b1 f0       	breq	.+44     	; 0xb5a <write_DS3231+0x5a>
		stop_TWI();
     b2e:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
		return(retval);
     b32:	8c 2f       	mov	r24, r28
     b34:	18 c0       	rjmp	.+48     	; 0xb66 <write_DS3231+0x66>
	}

	for (i = 0; i < 7; i++) {
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b36:	78 01       	movw	r14, r16
     b38:	8f ef       	ldi	r24, 0xFF	; 255
     b3a:	e8 1a       	sub	r14, r24
     b3c:	f8 0a       	sbc	r15, r24
     b3e:	f8 01       	movw	r30, r16
     b40:	80 81       	ld	r24, Z
     b42:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
     b46:	c8 2f       	mov	r28, r24
     b48:	88 23       	and	r24, r24
     b4a:	21 f0       	breq	.+8      	; 0xb54 <write_DS3231+0x54>
			stop_TWI();
     b4c:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
			return(retval);
     b50:	8c 2f       	mov	r24, r28
     b52:	09 c0       	rjmp	.+18     	; 0xb66 <write_DS3231+0x66>
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b54:	df 5f       	subi	r29, 0xFF	; 255
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b56:	87 01       	movw	r16, r14
     b58:	01 c0       	rjmp	.+2      	; 0xb5c <write_DS3231+0x5c>
     b5a:	d0 e0       	ldi	r29, 0x00	; 0
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b5c:	d7 30       	cpi	r29, 0x07	; 7
     b5e:	58 f3       	brcs	.-42     	; 0xb36 <write_DS3231+0x36>
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
			stop_TWI();
			return(retval);
		}
	}
	stop_TWI();
     b60:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>

	return(0);
     b64:	80 e0       	ldi	r24, 0x00	; 0

}
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	ff 90       	pop	r15
     b70:	ef 90       	pop	r14
     b72:	08 95       	ret

00000b74 <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	27 97       	sbiw	r28, 0x07	; 7
     b7e:	cd bf       	out	0x3d, r28	; 61
     b80:	de bf       	out	0x3e, r29	; 62

	uint8_t retval, ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     b82:	bc 01       	movw	r22, r24
     b84:	ce 01       	movw	r24, r28
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	0e 94 b8 04 	call	0x970	; 0x970 <convert_iso2ds>
	if ((retval = write_DS3231(DS3231ADDR, ds3231time))) {
     b8c:	be 01       	movw	r22, r28
     b8e:	6f 5f       	subi	r22, 0xFF	; 255
     b90:	7f 4f       	sbci	r23, 0xFF	; 255
     b92:	80 ed       	ldi	r24, 0xD0	; 208
     b94:	0e 94 80 05 	call	0xb00	; 0xb00 <write_DS3231>
		return(retval);
	}
	return(0);

}
     b98:	27 96       	adiw	r28, 0x07	; 7
     b9a:	cd bf       	out	0x3d, r28	; 61
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	08 95       	ret

00000ba4 <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     ba4:	45 e1       	ldi	r20, 0x15	; 21
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	6b e0       	ldi	r22, 0x0B	; 11
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	0e 94 2b 1a 	call	0x3456	; 0x3456 <eeprom_read_block>
     bb0:	08 95       	ret

00000bb2 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     bb2:	4b e0       	ldi	r20, 0x0B	; 11
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	0e 94 2b 1a 	call	0x3456	; 0x3456 <eeprom_read_block>
     bbe:	08 95       	ret

00000bc0 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	65 97       	sbiw	r28, 0x15	; 21
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     bce:	ce 01       	movw	r24, r28
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	0e 94 56 05 	call	0xaac	; 0xaac <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     bd6:	45 e1       	ldi	r20, 0x15	; 21
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	6b e0       	ldi	r22, 0x0B	; 11
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	ce 01       	movw	r24, r28
     be0:	01 96       	adiw	r24, 0x01	; 1
     be2:	0e 94 2f 1a 	call	0x345e	; 0x345e <eeprom_update_block>

}
     be6:	65 96       	adiw	r28, 0x15	; 21
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <update_VERSION>:

void update_VERSION(void)
{
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	2b 97       	sbiw	r28, 0x0b	; 11
     bfc:	cd bf       	out	0x3d, r28	; 61
     bfe:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     c00:	8b e0       	ldi	r24, 0x0B	; 11
     c02:	ef e1       	ldi	r30, 0x1F	; 31
     c04:	f5 e7       	ldi	r31, 0x75	; 117
     c06:	de 01       	movw	r26, r28
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	01 90       	ld	r0, Z+
     c0c:	0d 92       	st	X+, r0
     c0e:	8a 95       	dec	r24
     c10:	e1 f7       	brne	.-8      	; 0xc0a <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     c12:	4b e0       	ldi	r20, 0x0B	; 11
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	ce 01       	movw	r24, r28
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	0e 94 2f 1a 	call	0x345e	; 0x345e <eeprom_update_block>

}
     c22:	2b 96       	adiw	r28, 0x0b	; 11
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     c2e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <update_BOOTTIME>
	update_VERSION();
     c32:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <update_VERSION>
     c36:	08 95       	ret

00000c38 <read_FRAM>:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)

------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	c8 2f       	mov	r28, r24
     c46:	e6 2e       	mov	r14, r22
     c48:	f7 2e       	mov	r15, r23
     c4a:	8a 01       	movw	r16, r20
     c4c:	d2 2f       	mov	r29, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
     c54:	81 11       	cpse	r24, r1
     c56:	2b c0       	rjmp	.+86     	; 0xcae <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {			// Send memory address
     c58:	8f 2d       	mov	r24, r15
     c5a:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
     c5e:	81 11       	cpse	r24, r1
     c60:	26 c0       	rjmp	.+76     	; 0xcae <read_FRAM+0x76>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {
     c62:	8e 2d       	mov	r24, r14
     c64:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
     c68:	81 11       	cpse	r24, r1
     c6a:	21 c0       	rjmp	.+66     	; 0xcae <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
     c6c:	61 e0       	ldi	r22, 0x01	; 1
     c6e:	8c 2f       	mov	r24, r28
     c70:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
     c74:	81 11       	cpse	r24, r1
     c76:	1b c0       	rjmp	.+54     	; 0xcae <read_FRAM+0x76>
     c78:	c0 e0       	ldi	r28, 0x00	; 0
     c7a:	08 c0       	rjmp	.+16     	; 0xc8c <read_FRAM+0x54>
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     c7c:	78 01       	movw	r14, r16
     c7e:	ec 0e       	add	r14, r28
     c80:	f1 1c       	adc	r15, r1
     c82:	0e 94 4e 10 	call	0x209c	; 0x209c <read_TWI>
     c86:	f7 01       	movw	r30, r14
     c88:	80 83       	st	Z, r24

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
     c8a:	cf 5f       	subi	r28, 0xFF	; 255
     c8c:	2c 2f       	mov	r18, r28
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	8d 2f       	mov	r24, r29
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	28 17       	cp	r18, r24
     c98:	39 07       	cpc	r19, r25
     c9a:	84 f3       	brlt	.-32     	; 0xc7c <read_FRAM+0x44>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     c9c:	ec 01       	movw	r28, r24
     c9e:	c0 0f       	add	r28, r16
     ca0:	d1 1f       	adc	r29, r17
     ca2:	0e 94 5e 10 	call	0x20bc	; 0x20bc <readlast_TWI>
     ca6:	88 83       	st	Y, r24

	stop_TWI();
     ca8:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>

	return(0);
     cac:	80 e0       	ldi	r24, 0x00	; 0

}
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	ff 90       	pop	r15
     cb8:	ef 90       	pop	r14
     cba:	08 95       	ret

00000cbc <write_FRAM>:
	Returns:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     cbc:	ef 92       	push	r14
     cbe:	ff 92       	push	r15
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	f6 2e       	mov	r15, r22
     cca:	17 2f       	mov	r17, r23
     ccc:	ea 01       	movw	r28, r20
     cce:	02 2f       	mov	r16, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if ((retval = start_TWI(addr, TWIWRITE))) {	// TWI START
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
     cd6:	81 11       	cpse	r24, r1
     cd8:	1c c0       	rjmp	.+56     	; 0xd12 <write_FRAM+0x56>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {		// FRAM address to write
     cda:	81 2f       	mov	r24, r17
     cdc:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
     ce0:	81 11       	cpse	r24, r1
     ce2:	17 c0       	rjmp	.+46     	; 0xd12 <write_FRAM+0x56>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
     ce4:	8f 2d       	mov	r24, r15
     ce6:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
     cea:	81 11       	cpse	r24, r1
     cec:	12 c0       	rjmp	.+36     	; 0xd12 <write_FRAM+0x56>
     cee:	10 e0       	ldi	r17, 0x00	; 0
     cf0:	0b c0       	rjmp	.+22     	; 0xd08 <write_FRAM+0x4c>
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     cf2:	7e 01       	movw	r14, r28
     cf4:	8f ef       	ldi	r24, 0xFF	; 255
     cf6:	e8 1a       	sub	r14, r24
     cf8:	f8 0a       	sbc	r15, r24
     cfa:	88 81       	ld	r24, Y
     cfc:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
     d00:	81 11       	cpse	r24, r1
     d02:	07 c0       	rjmp	.+14     	; 0xd12 <write_FRAM+0x56>
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     d04:	1f 5f       	subi	r17, 0xFF	; 255
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     d06:	e7 01       	movw	r28, r14
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     d08:	10 17       	cp	r17, r16
     d0a:	98 f3       	brcs	.-26     	; 0xcf2 <write_FRAM+0x36>
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
			return(retval);
		}
	}

	stop_TWI();
     d0c:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>

	return(0);
     d10:	80 e0       	ldi	r24, 0x00	; 0

}
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	08 95       	ret

00000d20 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     d20:	8f 92       	push	r8
     d22:	9f 92       	push	r9
     d24:	af 92       	push	r10
     d26:	bf 92       	push	r11
     d28:	cf 92       	push	r12
     d2a:	df 92       	push	r13
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15

	uint8_t adcpin;
	float humidity, temperature;

	switch (sensor) {
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	59 f0       	breq	.+22     	; 0xd4a <get_humidity+0x2a>
     d34:	18 f0       	brcs	.+6      	; 0xd3c <get_humidity+0x1c>
     d36:	82 30       	cpi	r24, 0x02	; 2
     d38:	79 f0       	breq	.+30     	; 0xd58 <get_humidity+0x38>
     d3a:	15 c0       	rjmp	.+42     	; 0xd66 <get_humidity+0x46>
		case 0:
			temperature = get_temperature(0);
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	0e 94 33 10 	call	0x2066	; 0x2066 <get_temperature>
     d42:	4b 01       	movw	r8, r22
     d44:	5c 01       	movw	r10, r24
//			adcpin = AIN1;		// test unit
			adcpin = AIN0;		// production
     d46:	40 e4       	ldi	r20, 0x40	; 64
			break;
     d48:	17 c0       	rjmp	.+46     	; 0xd78 <get_humidity+0x58>
		case 1:
			temperature = get_temperature(1);
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	0e 94 33 10 	call	0x2066	; 0x2066 <get_temperature>
     d50:	4b 01       	movw	r8, r22
     d52:	5c 01       	movw	r10, r24
			adcpin = AIN1;
     d54:	40 e5       	ldi	r20, 0x50	; 80
			break;
     d56:	10 c0       	rjmp	.+32     	; 0xd78 <get_humidity+0x58>
		case 2:
			temperature = get_temperature(2);
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	0e 94 33 10 	call	0x2066	; 0x2066 <get_temperature>
     d5e:	4b 01       	movw	r8, r22
     d60:	5c 01       	movw	r10, r24
			adcpin = AIN2;
     d62:	40 e6       	ldi	r20, 0x60	; 96
			break;
     d64:	09 c0       	rjmp	.+18     	; 0xd78 <get_humidity+0x58>
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     d66:	0f 2e       	mov	r0, r31
     d68:	81 2c       	mov	r8, r1
     d6a:	91 2c       	mov	r9, r1
     d6c:	f0 ea       	ldi	r31, 0xA0	; 160
     d6e:	af 2e       	mov	r10, r31
     d70:	f1 e4       	ldi	r31, 0x41	; 65
     d72:	bf 2e       	mov	r11, r31
     d74:	f0 2d       	mov	r31, r0
			temperature = get_temperature(2);
			adcpin = AIN2;
			break;
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     d76:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	humidity = ((read_ADS1115(ADC_RH, PGA6144, adcpin, DR128)/5.0) - 0.16) / 0.0062;
     d78:	20 e8       	ldi	r18, 0x80	; 128
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	80 e9       	ldi	r24, 0x90	; 144
     d7e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_ADS1115>
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 ea       	ldi	r20, 0xA0	; 160
     d88:	50 e4       	ldi	r21, 0x40	; 64
     d8a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__divsf3>
     d8e:	2a e0       	ldi	r18, 0x0A	; 10
     d90:	37 ed       	ldi	r19, 0xD7	; 215
     d92:	43 e2       	ldi	r20, 0x23	; 35
     d94:	5e e3       	ldi	r21, 0x3E	; 62
     d96:	0e 94 8b 12 	call	0x2516	; 0x2516 <__subsf3>
     d9a:	2f e5       	ldi	r18, 0x5F	; 95
     d9c:	39 e2       	ldi	r19, 0x29	; 41
     d9e:	4b ec       	ldi	r20, 0xCB	; 203
     da0:	5b e3       	ldi	r21, 0x3B	; 59
     da2:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__divsf3>
     da6:	6b 01       	movw	r12, r22
     da8:	7c 01       	movw	r14, r24
	humidity = (humidity / (1.0546 - 0.00216 * temperature));
     daa:	29 ec       	ldi	r18, 0xC9	; 201
     dac:	3e e8       	ldi	r19, 0x8E	; 142
     dae:	4d e0       	ldi	r20, 0x0D	; 13
     db0:	5b e3       	ldi	r21, 0x3B	; 59
     db2:	c5 01       	movw	r24, r10
     db4:	b4 01       	movw	r22, r8
     db6:	0e 94 26 14 	call	0x284c	; 0x284c <__mulsf3>
     dba:	9b 01       	movw	r18, r22
     dbc:	ac 01       	movw	r20, r24
     dbe:	62 e2       	ldi	r22, 0x22	; 34
     dc0:	7d ef       	ldi	r23, 0xFD	; 253
     dc2:	86 e8       	ldi	r24, 0x86	; 134
     dc4:	9f e3       	ldi	r25, 0x3F	; 63
     dc6:	0e 94 8b 12 	call	0x2516	; 0x2516 <__subsf3>
     dca:	9b 01       	movw	r18, r22
     dcc:	ac 01       	movw	r20, r24
     dce:	c7 01       	movw	r24, r14
     dd0:	b6 01       	movw	r22, r12
     dd2:	0e 94 fd 12 	call	0x25fa	; 0x25fa <__divsf3>
	return(humidity);

}
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	df 90       	pop	r13
     ddc:	cf 90       	pop	r12
     dde:	bf 90       	pop	r11
     de0:	af 90       	pop	r10
     de2:	9f 90       	pop	r9
     de4:	8f 90       	pop	r8
     de6:	08 95       	ret

00000de8 <initialize>:
#include "globals.h"

void initialize(void)
{

	init_PORTS();
     de8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <init_PORTS>
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;
     dec:	8b e0       	ldi	r24, 0x0B	; 11
     dee:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f44b6>
	init_SPECID();
     df2:	0e 94 2b 10 	call	0x2056	; 0x2056 <init_SPECID>
	init_LED();
     df6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <init_LED>
	init_BEEPER();
     dfa:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <init_BEEPER>
	init_RTC(64);	// Fast, for blinking the LED at startup
     dfe:	80 e4       	ldi	r24, 0x40	; 64
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <init_RTC>
	init_USART();
     e06:	0e 94 a5 10 	call	0x214a	; 0x214a <init_USART>
	init_TWI();
     e0a:	0e 94 43 10 	call	0x2086	; 0x2086 <init_TWI>
	init_MMA8451();
     e0e:	0e 94 30 09 	call	0x1260	; 0x1260 <init_MMA8451>
	init_PNEU();
     e12:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <init_PNEU>
	init_OLED(0);
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	0e 94 f6 09 	call	0x13ec	; 0x13ec <init_OLED>
	init_OLED(1);
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <init_OLED>
	init_EEPROM();	// Needs TWI for get_time()
     e22:	0e 94 17 06 	call	0xc2e	; 0xc2e <init_EEPROM>
     e26:	08 95       	ret

00000e28 <__vector_29>:

/*----------------------------------------------------------------------
Curiosity Nano on-board pushbutton reboots the system
----------------------------------------------------------------------*/
ISR(PORTF_PORT_vect)
{
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	2f 93       	push	r18
     e34:	3f 93       	push	r19
     e36:	4f 93       	push	r20
     e38:	5f 93       	push	r21
     e3a:	6f 93       	push	r22
     e3c:	7f 93       	push	r23
     e3e:	8f 93       	push	r24
     e40:	9f 93       	push	r25
     e42:	af 93       	push	r26
     e44:	bf 93       	push	r27
     e46:	ef 93       	push	r30
     e48:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
     e4a:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
     e4e:	86 ff       	sbrs	r24, 6
     e50:	05 c0       	rjmp	.+10     	; 0xe5c <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
     e52:	80 e4       	ldi	r24, 0x40	; 64
     e54:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
     e58:	0e 94 85 12 	call	0x250a	; 0x250a <reboot>
	}

}
     e5c:	ff 91       	pop	r31
     e5e:	ef 91       	pop	r30
     e60:	bf 91       	pop	r27
     e62:	af 91       	pop	r26
     e64:	9f 91       	pop	r25
     e66:	8f 91       	pop	r24
     e68:	7f 91       	pop	r23
     e6a:	6f 91       	pop	r22
     e6c:	5f 91       	pop	r21
     e6e:	4f 91       	pop	r20
     e70:	3f 91       	pop	r19
     e72:	2f 91       	pop	r18
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	0f 90       	pop	r0
     e7a:	1f 90       	pop	r1
     e7c:	18 95       	reti

00000e7e <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
     e7e:	cf 92       	push	r12
     e80:	df 92       	push	r13
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	21 f0       	breq	.+8      	; 0xe92 <read_ionpump+0x14>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
     e8a:	82 30       	cpi	r24, 0x02	; 2
     e8c:	79 f5       	brne	.+94     	; 0xeec <read_ionpump+0x6e>
		pins = AIN23;
     e8e:	40 e3       	ldi	r20, 0x30	; 48
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <read_ionpump+0x16>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
     e92:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(-999.9);
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);
     e94:	20 e8       	ldi	r18, 0x80	; 128
     e96:	62 e0       	ldi	r22, 0x02	; 2
     e98:	82 e9       	ldi	r24, 0x92	; 146
     e9a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_ADS1115>
     e9e:	6b 01       	movw	r12, r22
     ea0:	7c 01       	movw	r14, r24

	if (voltage < 0.5) {						// Useful range for the Modion pump
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	5f e3       	ldi	r21, 0x3F	; 63
     eaa:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__cmpsf2>
     eae:	88 23       	and	r24, r24
     eb0:	14 f1       	brlt	.+68     	; 0xef6 <read_ionpump+0x78>
		return(-999.9);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	50 e4       	ldi	r21, 0x40	; 64
     eba:	c7 01       	movw	r24, r14
     ebc:	b6 01       	movw	r22, r12
     ebe:	0e 94 21 14 	call	0x2842	; 0x2842 <__gesf2>
     ec2:	18 16       	cp	r1, r24
     ec4:	ec f0       	brlt	.+58     	; 0xf00 <read_ionpump+0x82>
		return(-999.9);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
     ec6:	26 ed       	ldi	r18, 0xD6	; 214
     ec8:	36 e5       	ldi	r19, 0x56	; 86
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	50 e4       	ldi	r21, 0x40	; 64
     ece:	c7 01       	movw	r24, r14
     ed0:	b6 01       	movw	r22, r12
     ed2:	0e 94 26 14 	call	0x284c	; 0x284c <__mulsf3>
     ed6:	2e e6       	ldi	r18, 0x6E	; 110
     ed8:	33 ea       	ldi	r19, 0xA3	; 163
     eda:	4b ed       	ldi	r20, 0xDB	; 219
     edc:	50 e4       	ldi	r21, 0x40	; 64
     ede:	0e 94 8b 12 	call	0x2516	; 0x2516 <__subsf3>
	return(vacuum);
     ee2:	56 2f       	mov	r21, r22
     ee4:	47 2f       	mov	r20, r23
     ee6:	38 2f       	mov	r19, r24
     ee8:	29 2f       	mov	r18, r25
     eea:	0e c0       	rjmp	.+28     	; 0xf08 <read_ionpump+0x8a>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(-999.9);
     eec:	5a e9       	ldi	r21, 0x9A	; 154
     eee:	49 ef       	ldi	r20, 0xF9	; 249
     ef0:	39 e7       	ldi	r19, 0x79	; 121
     ef2:	24 ec       	ldi	r18, 0xC4	; 196
     ef4:	09 c0       	rjmp	.+18     	; 0xf08 <read_ionpump+0x8a>
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);

	if (voltage < 0.5) {						// Useful range for the Modion pump
		return(-999.9);							// after ISO224 op-amp is 0.5 to 2.0 V
     ef6:	5a e9       	ldi	r21, 0x9A	; 154
     ef8:	49 ef       	ldi	r20, 0xF9	; 249
     efa:	39 e7       	ldi	r19, 0x79	; 121
     efc:	24 ec       	ldi	r18, 0xC4	; 196
     efe:	04 c0       	rjmp	.+8      	; 0xf08 <read_ionpump+0x8a>
	} else if (voltage > 2.0) {
		return(-999.9);
     f00:	5a e9       	ldi	r21, 0x9A	; 154
     f02:	49 ef       	ldi	r20, 0xF9	; 249
     f04:	39 e7       	ldi	r19, 0x79	; 121
     f06:	24 ec       	ldi	r18, 0xC4	; 196
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
	return(vacuum);

}
     f08:	65 2f       	mov	r22, r21
     f0a:	74 2f       	mov	r23, r20
     f0c:	83 2f       	mov	r24, r19
     f0e:	92 2f       	mov	r25, r18
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	08 95       	ret

00000f1a <init_LED>:
#include "globals.h"

void init_LED(void)
{
	PORTF.OUTSET = PIN5_bm;
     f1a:	e0 ea       	ldi	r30, 0xA0	; 160
     f1c:	f4 e0       	ldi	r31, 0x04	; 4
     f1e:	80 e2       	ldi	r24, 0x20	; 32
     f20:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN5_bm;
     f22:	81 83       	std	Z+1, r24	; 0x01
     f24:	08 95       	ret

00000f26 <main>:
ParsedCMD pcmd[CSTACKSIZE];	// Split the command line into its parts

int main(void)
{

	initialize();
     f26:	0e 94 f4 06 	call	0xde8	; 0xde8 <initialize>
	sei();
     f2a:	78 94       	sei

	for (;;) {
		if (recv0_buf.done) {
     f2c:	80 91 14 2b 	lds	r24, 0x2B14	; 0x802b14 <recv0_buf+0x84>
     f30:	88 23       	and	r24, r24
     f32:	e1 f3       	breq	.-8      	; 0xf2c <main+0x6>
			recv0_buf.done = NO;
     f34:	10 92 14 2b 	sts	0x2B14, r1	; 0x802b14 <recv0_buf+0x84>
			commands();
     f38:	0e 94 ed 03 	call	0x7da	; 0x7da <commands>
     f3c:	f7 cf       	rjmp	.-18     	; 0xf2c <main+0x6>

00000f3e <read_MCP23008>:
	Returns:
		val - data in that MCP23008 register
		Function return value is 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg, uint8_t *val)
{
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	c8 2f       	mov	r28, r24
     f48:	d6 2f       	mov	r29, r22
     f4a:	8a 01       	movw	r16, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
     f52:	81 11       	cpse	r24, r1
     f54:	12 c0       	rjmp	.+36     	; 0xf7a <read_MCP23008+0x3c>
		return(retval);
	}
	if ((retval = write_TWI(reg))) {
     f56:	8d 2f       	mov	r24, r29
     f58:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
     f5c:	81 11       	cpse	r24, r1
     f5e:	0d c0       	rjmp	.+26     	; 0xf7a <read_MCP23008+0x3c>
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	8c 2f       	mov	r24, r28
     f64:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
     f68:	81 11       	cpse	r24, r1
     f6a:	07 c0       	rjmp	.+14     	; 0xf7a <read_MCP23008+0x3c>
		return(retval);
	}
	*val = readlast_TWI();
     f6c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <readlast_TWI>
     f70:	f8 01       	movw	r30, r16
     f72:	80 83       	st	Z, r24
	stop_TWI();
     f74:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
	return(0);
     f78:	80 e0       	ldi	r24, 0x00	; 0

}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	08 95       	ret

00000f84 <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	d6 2f       	mov	r29, r22
     f8c:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
     f94:	c8 2f       	mov	r28, r24
     f96:	88 23       	and	r24, r24
     f98:	21 f0       	breq	.+8      	; 0xfa2 <write_MCP23008+0x1e>
		stop_TWI();
     f9a:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
		return(retval);
     f9e:	8c 2f       	mov	r24, r28
     fa0:	17 c0       	rjmp	.+46     	; 0xfd0 <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(reg))) {
     fa2:	8d 2f       	mov	r24, r29
     fa4:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
     fa8:	c8 2f       	mov	r28, r24
     faa:	88 23       	and	r24, r24
     fac:	21 f0       	breq	.+8      	; 0xfb6 <write_MCP23008+0x32>
		stop_TWI();
     fae:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
		return(retval);
     fb2:	8c 2f       	mov	r24, r28
     fb4:	0d c0       	rjmp	.+26     	; 0xfd0 <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(val))) {
     fb6:	81 2f       	mov	r24, r17
     fb8:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
     fbc:	c8 2f       	mov	r28, r24
     fbe:	88 23       	and	r24, r24
     fc0:	21 f0       	breq	.+8      	; 0xfca <write_MCP23008+0x46>
		stop_TWI();
     fc2:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
		return(retval);
     fc6:	8c 2f       	mov	r24, r28
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <write_MCP23008+0x4c>
	}
	stop_TWI();
     fca:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
	return(0);
     fce:	80 e0       	ldi	r24, 0x00	; 0
	
}
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	08 95       	ret

00000fd8 <read_MCP9808>:
------------------------------------------------------------------------------*/

#include "globals.h"

float read_MCP9808(void)
{
     fd8:	cf 92       	push	r12
     fda:	df 92       	push	r13
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	1f 93       	push	r17
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29

	uint8_t highbyte, lowbyte, sign;
	float temperature;

	start_TWI(MCP9808ADDR, TWIWRITE);
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	80 e3       	ldi	r24, 0x30	; 48
     fea:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
	write_TWI(TEMPREGISTER);
     fee:	85 e0       	ldi	r24, 0x05	; 5
     ff0:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	80 e3       	ldi	r24, 0x30	; 48
     ff8:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
	highbyte = read_TWI();
     ffc:	0e 94 4e 10 	call	0x209c	; 0x209c <read_TWI>
    1000:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    1002:	0e 94 5e 10 	call	0x20bc	; 0x20bc <readlast_TWI>
    1006:	d8 2f       	mov	r29, r24
	stop_TWI();
    1008:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    100c:	1c 2f       	mov	r17, r28
    100e:	10 71       	andi	r17, 0x10	; 16
	highbyte &= 0x0F;					// Clear threshold & sign bits
    1010:	6c 2f       	mov	r22, r28
    1012:	6f 70       	andi	r22, 0x0F	; 15
	temperature = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 6f 13 	call	0x26de	; 0x26de <__floatunsisf>
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 e8       	ldi	r20, 0x80	; 128
    1024:	51 e4       	ldi	r21, 0x41	; 65
    1026:	0e 94 26 14 	call	0x284c	; 0x284c <__mulsf3>
    102a:	6b 01       	movw	r12, r22
    102c:	7c 01       	movw	r14, r24
    102e:	6d 2f       	mov	r22, r29
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 6f 13 	call	0x26de	; 0x26de <__floatunsisf>
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 e8       	ldi	r20, 0x80	; 128
    1040:	5d e3       	ldi	r21, 0x3D	; 61
    1042:	0e 94 26 14 	call	0x284c	; 0x284c <__mulsf3>
    1046:	9b 01       	movw	r18, r22
    1048:	ac 01       	movw	r20, r24
    104a:	c7 01       	movw	r24, r14
    104c:	b6 01       	movw	r22, r12
    104e:	0e 94 8c 12 	call	0x2518	; 0x2518 <__addsf3>
	if (sign) {
    1052:	11 23       	and	r17, r17
    1054:	41 f0       	breq	.+16     	; 0x1066 <read_MCP9808+0x8e>
		temperature = 256.0 - temperature;
    1056:	9b 01       	movw	r18, r22
    1058:	ac 01       	movw	r20, r24
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	80 e8       	ldi	r24, 0x80	; 128
    1060:	93 e4       	ldi	r25, 0x43	; 67
    1062:	0e 94 8b 12 	call	0x2516	; 0x2516 <__subsf3>
	}
	return(temperature);
}
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	df 90       	pop	r13
    1072:	cf 90       	pop	r12
    1074:	08 95       	ret

00001076 <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    1076:	ef 92       	push	r14
    1078:	ff 92       	push	r15
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	18 2f       	mov	r17, r24
    1084:	f6 2e       	mov	r15, r22
    1086:	ea 01       	movw	r28, r20
    1088:	02 2f       	mov	r16, r18

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
    1090:	81 11       	cpse	r24, r1
    1092:	1e c0       	rjmp	.+60     	; 0x10d0 <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = write_TWI(reg))) {
    1094:	8f 2d       	mov	r24, r15
    1096:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
    109a:	81 11       	cpse	r24, r1
    109c:	19 c0       	rjmp	.+50     	; 0x10d0 <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
    109e:	61 e0       	ldi	r22, 0x01	; 1
    10a0:	81 2f       	mov	r24, r17
    10a2:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
    10a6:	81 11       	cpse	r24, r1
    10a8:	13 c0       	rjmp	.+38     	; 0x10d0 <read_MMA8451+0x5a>
    10aa:	11 e0       	ldi	r17, 0x01	; 1
    10ac:	09 c0       	rjmp	.+18     	; 0x10c0 <read_MMA8451+0x4a>
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    10ae:	7e 01       	movw	r14, r28
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	e8 1a       	sub	r14, r24
    10b4:	f8 0a       	sbc	r15, r24
    10b6:	0e 94 4e 10 	call	0x209c	; 0x209c <read_TWI>
    10ba:	88 83       	st	Y, r24
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    10bc:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    10be:	e7 01       	movw	r28, r14
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    10c0:	10 17       	cp	r17, r16
    10c2:	a8 f3       	brcs	.-22     	; 0x10ae <read_MMA8451+0x38>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    10c4:	0e 94 5e 10 	call	0x20bc	; 0x20bc <readlast_TWI>
    10c8:	88 83       	st	Y, r24
	stop_TWI();
    10ca:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
	return(0);
    10ce:	80 e0       	ldi	r24, 0x00	; 0

}
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	1f 91       	pop	r17
    10d6:	0f 91       	pop	r16
    10d8:	ff 90       	pop	r15
    10da:	ef 90       	pop	r14
    10dc:	08 95       	ret

000010de <get_orientation>:
uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
{
    10de:	cf 92       	push	r12
    10e0:	df 92       	push	r13
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	26 97       	sbiw	r28, 0x06	; 6
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	6b 01       	movw	r12, r22
    10fa:	7a 01       	movw	r14, r20
    10fc:	89 01       	movw	r16, r18

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -9999.9;
    10fe:	4a e9       	ldi	r20, 0x9A	; 154
    1100:	5f e3       	ldi	r21, 0x3F	; 63
    1102:	6c e1       	ldi	r22, 0x1C	; 28
    1104:	76 ec       	ldi	r23, 0xC6	; 198
    1106:	f9 01       	movw	r30, r18
    1108:	40 83       	st	Z, r20
    110a:	51 83       	std	Z+1, r21	; 0x01
    110c:	62 83       	std	Z+2, r22	; 0x02
    110e:	73 83       	std	Z+3, r23	; 0x03
    1110:	f7 01       	movw	r30, r14
    1112:	40 83       	st	Z, r20
    1114:	51 83       	std	Z+1, r21	; 0x01
    1116:	62 83       	std	Z+2, r22	; 0x02
    1118:	73 83       	std	Z+3, r23	; 0x03
    111a:	f6 01       	movw	r30, r12
    111c:	40 83       	st	Z, r20
    111e:	51 83       	std	Z+1, r21	; 0x01
    1120:	62 83       	std	Z+2, r22	; 0x02
    1122:	73 83       	std	Z+3, r23	; 0x03

	read_MMA8451(addr, MMA8451OUTXMSB, datain, 6);
    1124:	26 e0       	ldi	r18, 0x06	; 6
    1126:	ae 01       	movw	r20, r28
    1128:	4f 5f       	subi	r20, 0xFF	; 255
    112a:	5f 4f       	sbci	r21, 0xFF	; 255
    112c:	61 e0       	ldi	r22, 0x01	; 1
    112e:	0e 94 3b 08 	call	0x1076	; 0x1076 <read_MMA8451>

	ix = datain[0];
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    1136:	98 2f       	mov	r25, r24
    1138:	88 27       	eor	r24, r24
	ix |= datain[1];
    113a:	2a 81       	ldd	r18, Y+2	; 0x02
    113c:	82 2b       	or	r24, r18
	ix /= 4;
    113e:	bc 01       	movw	r22, r24
    1140:	77 23       	and	r23, r23
    1142:	14 f4       	brge	.+4      	; 0x1148 <get_orientation+0x6a>
    1144:	6d 5f       	subi	r22, 0xFD	; 253
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	75 95       	asr	r23
    114a:	67 95       	ror	r22
    114c:	75 95       	asr	r23
    114e:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    1150:	07 2e       	mov	r0, r23
    1152:	00 0c       	add	r0, r0
    1154:	88 0b       	sbc	r24, r24
    1156:	99 0b       	sbc	r25, r25
    1158:	0e 94 71 13 	call	0x26e2	; 0x26e2 <__floatsisf>
    115c:	26 e6       	ldi	r18, 0x66	; 102
    115e:	36 e2       	ldi	r19, 0x26	; 38
    1160:	45 e7       	ldi	r20, 0x75	; 117
    1162:	5e e3       	ldi	r21, 0x3E	; 62
    1164:	0e 94 26 14 	call	0x284c	; 0x284c <__mulsf3>
    1168:	f6 01       	movw	r30, r12
    116a:	60 83       	st	Z, r22
    116c:	71 83       	std	Z+1, r23	; 0x01
    116e:	82 83       	std	Z+2, r24	; 0x02
    1170:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    1176:	98 2f       	mov	r25, r24
    1178:	88 27       	eor	r24, r24
	iy |= datain[3];
    117a:	2c 81       	ldd	r18, Y+4	; 0x04
    117c:	82 2b       	or	r24, r18
	iy /= 4;
    117e:	bc 01       	movw	r22, r24
    1180:	77 23       	and	r23, r23
    1182:	14 f4       	brge	.+4      	; 0x1188 <get_orientation+0xaa>
    1184:	6d 5f       	subi	r22, 0xFD	; 253
    1186:	7f 4f       	sbci	r23, 0xFF	; 255
    1188:	75 95       	asr	r23
    118a:	67 95       	ror	r22
    118c:	75 95       	asr	r23
    118e:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    1190:	07 2e       	mov	r0, r23
    1192:	00 0c       	add	r0, r0
    1194:	88 0b       	sbc	r24, r24
    1196:	99 0b       	sbc	r25, r25
    1198:	0e 94 71 13 	call	0x26e2	; 0x26e2 <__floatsisf>
    119c:	26 e6       	ldi	r18, 0x66	; 102
    119e:	36 e2       	ldi	r19, 0x26	; 38
    11a0:	45 e7       	ldi	r20, 0x75	; 117
    11a2:	5e e3       	ldi	r21, 0x3E	; 62
    11a4:	0e 94 26 14 	call	0x284c	; 0x284c <__mulsf3>
    11a8:	f7 01       	movw	r30, r14
    11aa:	60 83       	st	Z, r22
    11ac:	71 83       	std	Z+1, r23	; 0x01
    11ae:	82 83       	std	Z+2, r24	; 0x02
    11b0:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    11b2:	8d 81       	ldd	r24, Y+5	; 0x05
    11b4:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    11b6:	98 2f       	mov	r25, r24
    11b8:	88 27       	eor	r24, r24
	iz |= datain[5];
    11ba:	2e 81       	ldd	r18, Y+6	; 0x06
    11bc:	82 2b       	or	r24, r18
	iz /= 4;
    11be:	bc 01       	movw	r22, r24
    11c0:	77 23       	and	r23, r23
    11c2:	14 f4       	brge	.+4      	; 0x11c8 <get_orientation+0xea>
    11c4:	6d 5f       	subi	r22, 0xFD	; 253
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255
    11c8:	75 95       	asr	r23
    11ca:	67 95       	ror	r22
    11cc:	75 95       	asr	r23
    11ce:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    11d0:	07 2e       	mov	r0, r23
    11d2:	00 0c       	add	r0, r0
    11d4:	88 0b       	sbc	r24, r24
    11d6:	99 0b       	sbc	r25, r25
    11d8:	0e 94 71 13 	call	0x26e2	; 0x26e2 <__floatsisf>
    11dc:	26 e6       	ldi	r18, 0x66	; 102
    11de:	36 e2       	ldi	r19, 0x26	; 38
    11e0:	45 e7       	ldi	r20, 0x75	; 117
    11e2:	5e e3       	ldi	r21, 0x3E	; 62
    11e4:	0e 94 26 14 	call	0x284c	; 0x284c <__mulsf3>
    11e8:	f8 01       	movw	r30, r16
    11ea:	60 83       	st	Z, r22
    11ec:	71 83       	std	Z+1, r23	; 0x01
    11ee:	82 83       	std	Z+2, r24	; 0x02
    11f0:	93 83       	std	Z+3, r25	; 0x03

	return(0);

}
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	26 96       	adiw	r28, 0x06	; 6
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	ff 90       	pop	r15
    1204:	ef 90       	pop	r14
    1206:	df 90       	pop	r13
    1208:	cf 90       	pop	r12
    120a:	08 95       	ret

0000120c <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	d6 2f       	mov	r29, r22
    1214:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
    121c:	c8 2f       	mov	r28, r24
    121e:	88 23       	and	r24, r24
    1220:	21 f0       	breq	.+8      	; 0x122a <write_MMA8451+0x1e>
		stop_TWI();
    1222:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
		return(retval);
    1226:	8c 2f       	mov	r24, r28
    1228:	17 c0       	rjmp	.+46     	; 0x1258 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    122a:	8d 2f       	mov	r24, r29
    122c:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
    1230:	c8 2f       	mov	r28, r24
    1232:	88 23       	and	r24, r24
    1234:	21 f0       	breq	.+8      	; 0x123e <write_MMA8451+0x32>
		stop_TWI();
    1236:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
		return(retval);
    123a:	8c 2f       	mov	r24, r28
    123c:	0d c0       	rjmp	.+26     	; 0x1258 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    123e:	81 2f       	mov	r24, r17
    1240:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
    1244:	c8 2f       	mov	r28, r24
    1246:	88 23       	and	r24, r24
    1248:	21 f0       	breq	.+8      	; 0x1252 <write_MMA8451+0x46>
		stop_TWI();
    124a:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
		return(retval);
    124e:	8c 2f       	mov	r24, r28
    1250:	03 c0       	rjmp	.+6      	; 0x1258 <write_MMA8451+0x4c>
	}
	stop_TWI();
    1252:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
	return(0);
    1256:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	08 95       	ret

00001260 <init_MMA8451>:
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/

uint8_t init_MMA8451(void)
{
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	1f 92       	push	r1
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;

	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    126a:	40 e4       	ldi	r20, 0x40	; 64
    126c:	6b e2       	ldi	r22, 0x2B	; 43
    126e:	8a e3       	ldi	r24, 0x3A	; 58
    1270:	0e 94 06 09 	call	0x120c	; 0x120c <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    1274:	21 e0       	ldi	r18, 0x01	; 1
    1276:	ae 01       	movw	r20, r28
    1278:	4f 5f       	subi	r20, 0xFF	; 255
    127a:	5f 4f       	sbci	r21, 0xFF	; 255
    127c:	6b e2       	ldi	r22, 0x2B	; 43
    127e:	8a e3       	ldi	r24, 0x3A	; 58
    1280:	0e 94 3b 08 	call	0x1076	; 0x1076 <read_MMA8451>
	while (retval & 0x40) {
    1284:	08 c0       	rjmp	.+16     	; 0x1296 <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    1286:	21 e0       	ldi	r18, 0x01	; 1
    1288:	ae 01       	movw	r20, r28
    128a:	4f 5f       	subi	r20, 0xFF	; 255
    128c:	5f 4f       	sbci	r21, 0xFF	; 255
    128e:	6b e2       	ldi	r22, 0x2B	; 43
    1290:	8a e3       	ldi	r24, 0x3A	; 58
    1292:	0e 94 3b 08 	call	0x1076	; 0x1076 <read_MMA8451>

	addr = MMA8451ADDR;

	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	86 fd       	sbrc	r24, 6
    129a:	f5 cf       	rjmp	.-22     	; 0x1286 <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    129c:	40 ec       	ldi	r20, 0xC0	; 192
    129e:	6f e0       	ldi	r22, 0x0F	; 15
    12a0:	8a e3       	ldi	r24, 0x3A	; 58
    12a2:	0e 94 06 09 	call	0x120c	; 0x120c <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    12a6:	42 e0       	ldi	r20, 0x02	; 2
    12a8:	6b e2       	ldi	r22, 0x2B	; 43
    12aa:	8a e3       	ldi	r24, 0x3A	; 58
    12ac:	0e 94 06 09 	call	0x120c	; 0x120c <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    12b0:	4d e3       	ldi	r20, 0x3D	; 61
    12b2:	6a e2       	ldi	r22, 0x2A	; 42
    12b4:	8a e3       	ldi	r24, 0x3A	; 58
    12b6:	0e 94 06 09 	call	0x120c	; 0x120c <write_MMA8451>

	return(retval);

}
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	0f 90       	pop	r0
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	08 95       	ret

000012c4 <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    12c4:	ef 92       	push	r14
    12c6:	ff 92       	push	r15
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	2e 97       	sbiw	r28, 0x0e	; 14
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    12dc:	88 e0       	ldi	r24, 0x08	; 8
    12de:	ea e2       	ldi	r30, 0x2A	; 42
    12e0:	f5 e7       	ldi	r31, 0x75	; 117
    12e2:	de 01       	movw	r26, r28
    12e4:	11 96       	adiw	r26, 0x01	; 1
    12e6:	01 90       	ld	r0, Z+
    12e8:	0d 92       	st	X+, r0
    12ea:	8a 95       	dec	r24
    12ec:	e1 f7       	brne	.-8      	; 0x12e6 <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    12ee:	f8 01       	movw	r30, r16
    12f0:	01 90       	ld	r0, Z+
    12f2:	00 20       	and	r0, r0
    12f4:	e9 f7       	brne	.-6      	; 0x12f0 <checksum_NMEA+0x2c>
    12f6:	31 97       	sbiw	r30, 0x01	; 1
    12f8:	3e 2f       	mov	r19, r30
    12fa:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    12fc:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	06 c0       	rjmp	.+12     	; 0x130e <checksum_NMEA+0x4a>
		checksum ^= str[i];
    1302:	f8 01       	movw	r30, r16
    1304:	e8 0f       	add	r30, r24
    1306:	f1 1d       	adc	r31, r1
    1308:	20 81       	ld	r18, Z
    130a:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    130c:	8f 5f       	subi	r24, 0xFF	; 255
    130e:	83 17       	cp	r24, r19
    1310:	c0 f3       	brcs	.-16     	; 0x1302 <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    1312:	1f 92       	push	r1
    1314:	9f 93       	push	r25
    1316:	ce 01       	movw	r24, r28
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	9f 93       	push	r25
    131c:	8f 93       	push	r24
    131e:	7e 01       	movw	r14, r28
    1320:	89 e0       	ldi	r24, 0x09	; 9
    1322:	e8 0e       	add	r14, r24
    1324:	f1 1c       	adc	r15, r1
    1326:	ff 92       	push	r15
    1328:	ef 92       	push	r14
    132a:	0e 94 ab 19 	call	0x3356	; 0x3356 <sprintf>
	strcat(str, chksum);
    132e:	b7 01       	movw	r22, r14
    1330:	c8 01       	movw	r24, r16
    1332:	0e 94 52 19 	call	0x32a4	; 0x32a4 <strcat>

}
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	2e 96       	adiw	r28, 0x0e	; 14
    1344:	cd bf       	out	0x3d, r28	; 61
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	08 95       	ret

00001356 <format_ERR>:
/*------------------------------------------------------------------------------
void format_ERR(char *str)
	Returns an error line
------------------------------------------------------------------------------*/
void format_ERR(char *str)
{
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	28 97       	sbiw	r28, 0x08	; 8
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	08 2f       	mov	r16, r24
    136a:	19 2f       	mov	r17, r25

	const char errformat[] = "$S%dERR";
    136c:	88 e0       	ldi	r24, 0x08	; 8
    136e:	e2 e3       	ldi	r30, 0x32	; 50
    1370:	f5 e7       	ldi	r31, 0x75	; 117
    1372:	de 01       	movw	r26, r28
    1374:	11 96       	adiw	r26, 0x01	; 1
    1376:	01 90       	ld	r0, Z+
    1378:	0d 92       	st	X+, r0
    137a:	8a 95       	dec	r24
    137c:	e1 f7       	brne	.-8      	; 0x1376 <format_ERR+0x20>

	sprintf(str, errformat, get_SPECID);
    137e:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1382:	82 ff       	sbrs	r24, 2
    1384:	03 c0       	rjmp	.+6      	; 0x138c <format_ERR+0x36>
    1386:	82 e0       	ldi	r24, 0x02	; 2
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <format_ERR+0x3a>
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	9f 93       	push	r25
    1392:	8f 93       	push	r24
    1394:	ce 01       	movw	r24, r28
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	9f 93       	push	r25
    139a:	8f 93       	push	r24
    139c:	1f 93       	push	r17
    139e:	0f 93       	push	r16
    13a0:	0e 94 ab 19 	call	0x3356	; 0x3356 <sprintf>
	checksum_NMEA(str);
    13a4:	80 2f       	mov	r24, r16
    13a6:	91 2f       	mov	r25, r17
    13a8:	0e 94 62 09 	call	0x12c4	; 0x12c4 <checksum_NMEA>

}
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	28 96       	adiw	r28, 0x08	; 8
    13ba:	cd bf       	out	0x3d, r28	; 61
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	1f 91       	pop	r17
    13c4:	0f 91       	pop	r16
    13c6:	08 95       	ret

000013c8 <write_OLED>:
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	d6 2f       	mov	r29, r22
    13ce:	c4 2f       	mov	r28, r20
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <start_TWI>
    13d6:	8d 2f       	mov	r24, r29
    13d8:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
    13dc:	8c 2f       	mov	r24, r28
    13de:	0e 94 90 10 	call	0x2120	; 0x2120 <write_TWI>
    13e2:	0e 94 8c 10 	call	0x2118	; 0x2118 <stop_TWI>
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	08 95       	ret

000013ec <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
    13ec:	cf 93       	push	r28
		PORTE.OUTSET = PIN1_bm;

	}
*/

	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    13ee:	e0 e6       	ldi	r30, 0x60	; 96
    13f0:	f4 e0       	ldi	r31, 0x04	; 4
    13f2:	90 e4       	ldi	r25, 0x40	; 64
    13f4:	96 83       	std	Z+6, r25	; 0x06
	PORTD.DIRSET = PIN6_bm;
    13f6:	91 83       	std	Z+1, r25	; 0x01
    13f8:	a1 e4       	ldi	r26, 0x41	; 65
    13fa:	b3 e0       	ldi	r27, 0x03	; 3
    13fc:	11 97       	sbiw	r26, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <init_OLED+0x10>
    1400:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    1402:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
    1404:	81 11       	cpse	r24, r1
    1406:	02 c0       	rjmp	.+4      	; 0x140c <init_OLED+0x20>
		twiaddr = OLEDADDR0;
    1408:	c8 e7       	ldi	r28, 0x78	; 120
    140a:	01 c0       	rjmp	.+2      	; 0x140e <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
    140c:	ca e7       	ldi	r28, 0x7A	; 122
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    140e:	4a e2       	ldi	r20, 0x2A	; 42
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	8c 2f       	mov	r24, r28
    1414:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    1418:	41 e7       	ldi	r20, 0x71	; 113
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	8c 2f       	mov	r24, r28
    141e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    1422:	4c e5       	ldi	r20, 0x5C	; 92
    1424:	60 e4       	ldi	r22, 0x40	; 64
    1426:	8c 2f       	mov	r24, r28
    1428:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    142c:	48 e2       	ldi	r20, 0x28	; 40
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	8c 2f       	mov	r24, r28
    1432:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    1436:	48 e0       	ldi	r20, 0x08	; 8
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	8c 2f       	mov	r24, r28
    143c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1440:	4a e2       	ldi	r20, 0x2A	; 42
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	8c 2f       	mov	r24, r28
    1446:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    144a:	49 e7       	ldi	r20, 0x79	; 121
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	8c 2f       	mov	r24, r28
    1450:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    1454:	45 ed       	ldi	r20, 0xD5	; 213
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	8c 2f       	mov	r24, r28
    145a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    145e:	40 e7       	ldi	r20, 0x70	; 112
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	8c 2f       	mov	r24, r28
    1464:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1468:	48 e7       	ldi	r20, 0x78	; 120
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	8c 2f       	mov	r24, r28
    146e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    1472:	48 e0       	ldi	r20, 0x08	; 8
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	8c 2f       	mov	r24, r28
    1478:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    147c:	46 e0       	ldi	r20, 0x06	; 6
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	8c 2f       	mov	r24, r28
    1482:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1486:	42 e7       	ldi	r20, 0x72	; 114
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	8c 2f       	mov	r24, r28
    148c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    1490:	40 e0       	ldi	r20, 0x00	; 0
    1492:	60 e4       	ldi	r22, 0x40	; 64
    1494:	8c 2f       	mov	r24, r28
    1496:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    149a:	4a e2       	ldi	r20, 0x2A	; 42
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	8c 2f       	mov	r24, r28
    14a0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    14a4:	49 e7       	ldi	r20, 0x79	; 121
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	8c 2f       	mov	r24, r28
    14aa:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    14ae:	4a ed       	ldi	r20, 0xDA	; 218
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	8c 2f       	mov	r24, r28
    14b4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	8c 2f       	mov	r24, r28
    14be:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    14c2:	4c ed       	ldi	r20, 0xDC	; 220
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	8c 2f       	mov	r24, r28
    14c8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	8c 2f       	mov	r24, r28
    14d2:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    14d6:	41 e8       	ldi	r20, 0x81	; 129
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	8c 2f       	mov	r24, r28
    14dc:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    14e0:	4f e7       	ldi	r20, 0x7F	; 127
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	8c 2f       	mov	r24, r28
    14e6:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    14ea:	49 ed       	ldi	r20, 0xD9	; 217
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	8c 2f       	mov	r24, r28
    14f0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    14f4:	41 ef       	ldi	r20, 0xF1	; 241
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	8c 2f       	mov	r24, r28
    14fa:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    14fe:	4b ed       	ldi	r20, 0xDB	; 219
    1500:	60 e0       	ldi	r22, 0x00	; 0
    1502:	8c 2f       	mov	r24, r28
    1504:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    1508:	40 e4       	ldi	r20, 0x40	; 64
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	8c 2f       	mov	r24, r28
    150e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1512:	48 e7       	ldi	r20, 0x78	; 120
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	8c 2f       	mov	r24, r28
    1518:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    151c:	48 e2       	ldi	r20, 0x28	; 40
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	8c 2f       	mov	r24, r28
    1522:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    1526:	41 e0       	ldi	r20, 0x01	; 1
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	8c 2f       	mov	r24, r28
    152c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    1530:	40 e8       	ldi	r20, 0x80	; 128
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	8c 2f       	mov	r24, r28
    1536:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    153a:	4c e0       	ldi	r20, 0x0C	; 12
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	8c 2f       	mov	r24, r28
    1540:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
    1544:	ba e6       	ldi	r27, 0x6A	; 106
    1546:	24 e0       	ldi	r18, 0x04	; 4
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	b1 50       	subi	r27, 0x01	; 1
    154c:	20 40       	sbci	r18, 0x00	; 0
    154e:	80 40       	sbci	r24, 0x00	; 0
    1550:	e1 f7       	brne	.-8      	; 0x154a <init_OLED+0x15e>
    1552:	00 c0       	rjmp	.+0      	; 0x1554 <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

}
    1554:	cf 91       	pop	r28
    1556:	08 95       	ret

00001558 <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	e2 97       	sbiw	r28, 0x32	; 50
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    156c:	91 e1       	ldi	r25, 0x11	; 17
    156e:	ea e3       	ldi	r30, 0x3A	; 58
    1570:	f5 e7       	ldi	r31, 0x75	; 117
    1572:	de 01       	movw	r26, r28
    1574:	92 96       	adiw	r26, 0x22	; 34
    1576:	01 90       	ld	r0, Z+
    1578:	0d 92       	st	X+, r0
    157a:	9a 95       	dec	r25
    157c:	e1 f7       	brne	.-8      	; 0x1576 <writestr_OLED+0x1e>

	if (displaynumber == 0) {
    157e:	81 11       	cpse	r24, r1
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <writestr_OLED+0x2e>
		twiaddr = OLEDADDR0;
    1582:	08 e7       	ldi	r16, 0x78	; 120
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <writestr_OLED+0x30>
	} else {
		twiaddr = OLEDADDR1;
    1586:	0a e7       	ldi	r16, 0x7A	; 122
	}

	strcpy(strbuf, str);
    1588:	ce 01       	movw	r24, r28
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	0e 94 5d 19 	call	0x32ba	; 0x32ba <strcpy>
	strcat(strbuf, blanks);		// pad with blanks
    1590:	be 01       	movw	r22, r28
    1592:	6e 5d       	subi	r22, 0xDE	; 222
    1594:	7f 4f       	sbci	r23, 0xFF	; 255
    1596:	ce 01       	movw	r24, r28
    1598:	01 96       	adiw	r24, 0x01	; 1
    159a:	0e 94 52 19 	call	0x32a4	; 0x32a4 <strcat>

	if (lineno == 1) {
    159e:	11 30       	cpi	r17, 0x01	; 1
    15a0:	39 f4       	brne	.+14     	; 0x15b0 <writestr_OLED+0x58>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    15a2:	40 e8       	ldi	r20, 0x80	; 128
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	80 2f       	mov	r24, r16
    15a8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    15ac:	10 e0       	ldi	r17, 0x00	; 0
    15ae:	12 c0       	rjmp	.+36     	; 0x15d4 <writestr_OLED+0x7c>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    15b0:	40 ec       	ldi	r20, 0xC0	; 192
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	80 2f       	mov	r24, r16
    15b6:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>
    15ba:	f8 cf       	rjmp	.-16     	; 0x15ac <writestr_OLED+0x54>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    15bc:	e1 e0       	ldi	r30, 0x01	; 1
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	ec 0f       	add	r30, r28
    15c2:	fd 1f       	adc	r31, r29
    15c4:	e1 0f       	add	r30, r17
    15c6:	f1 1d       	adc	r31, r1
    15c8:	40 81       	ld	r20, Z
    15ca:	60 e4       	ldi	r22, 0x40	; 64
    15cc:	80 2f       	mov	r24, r16
    15ce:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    15d2:	1f 5f       	subi	r17, 0xFF	; 255
    15d4:	10 31       	cpi	r17, 0x10	; 16
    15d6:	90 f3       	brcs	.-28     	; 0x15bc <writestr_OLED+0x64>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

}
    15d8:	e2 96       	adiw	r28, 0x32	; 50
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	08 95       	ret

000015e8 <init_PNEU>:
uint8_t init_PNEU(void)
{

	uint8_t retval;

	if ((retval = write_MCP23008(HIGHCURRENT, IODIR, 0x00))) {
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	88 e4       	ldi	r24, 0x48	; 72
    15ee:	0e 94 c2 07 	call	0xf84	; 0xf84 <write_MCP23008>
    15f2:	81 11       	cpse	r24, r1
    15f4:	05 c0       	rjmp	.+10     	; 0x1600 <init_PNEU+0x18>
		return(retval);
	}
	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, 0x00))) {
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	6a e0       	ldi	r22, 0x0A	; 10
    15fa:	88 e4       	ldi	r24, 0x48	; 72
    15fc:	0e 94 c2 07 	call	0xf84	; 0xf84 <write_MCP23008>
		return(retval);
	}
	return(0);

}
    1600:	08 95       	ret

00001602 <read_PNEUSENSORS>:
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
{
    1602:	af 92       	push	r10
    1604:	bf 92       	push	r11
    1606:	cf 92       	push	r12
    1608:	df 92       	push	r13
    160a:	ef 92       	push	r14
    160c:	ff 92       	push	r15
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	1f 92       	push	r1
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	5c 01       	movw	r10, r24
    161e:	7b 01       	movw	r14, r22
    1620:	6a 01       	movw	r12, r20
    1622:	89 01       	movw	r16, r18

	uint8_t sensors, state;

	read_MCP23008(PNEUSENSORS, GPIO, &sensors);
    1624:	ae 01       	movw	r20, r28
    1626:	4f 5f       	subi	r20, 0xFF	; 255
    1628:	5f 4f       	sbci	r21, 0xFF	; 255
    162a:	69 e0       	ldi	r22, 0x09	; 9
    162c:	82 e4       	ldi	r24, 0x42	; 66
    162e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	82 95       	swap	r24
    1636:	86 95       	lsr	r24
    1638:	86 95       	lsr	r24
    163a:	83 70       	andi	r24, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	21 f4       	brne	.+8      	; 0x1648 <read_PNEUSENSORS+0x46>
		*shutter = 'c';
    1640:	83 e6       	ldi	r24, 0x63	; 99
    1642:	f5 01       	movw	r30, r10
    1644:	80 83       	st	Z, r24
    1646:	0f c0       	rjmp	.+30     	; 0x1666 <read_PNEUSENSORS+0x64>
		} else if (state == 2) {
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	21 f4       	brne	.+8      	; 0x1654 <read_PNEUSENSORS+0x52>
		*shutter = 'o';
    164c:	8f e6       	ldi	r24, 0x6F	; 111
    164e:	f5 01       	movw	r30, r10
    1650:	80 83       	st	Z, r24
    1652:	09 c0       	rjmp	.+18     	; 0x1666 <read_PNEUSENSORS+0x64>
		} else if (state == 3) {
    1654:	83 30       	cpi	r24, 0x03	; 3
    1656:	21 f4       	brne	.+8      	; 0x1660 <read_PNEUSENSORS+0x5e>
		*shutter = 't';
    1658:	84 e7       	ldi	r24, 0x74	; 116
    165a:	f5 01       	movw	r30, r10
    165c:	80 83       	st	Z, r24
    165e:	03 c0       	rjmp	.+6      	; 0x1666 <read_PNEUSENSORS+0x64>
		} else {
		*shutter = 'x';
    1660:	88 e7       	ldi	r24, 0x78	; 120
    1662:	f5 01       	movw	r30, r10
    1664:	80 83       	st	Z, r24
	}

	// Right
	state = sensors >> 2;
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	86 95       	lsr	r24
    166a:	86 95       	lsr	r24
	state &= 0b00000011;
    166c:	83 70       	andi	r24, 0x03	; 3
	if (state == 1) {
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	21 f4       	brne	.+8      	; 0x167a <read_PNEUSENSORS+0x78>
		*right = 'c';
    1672:	83 e6       	ldi	r24, 0x63	; 99
    1674:	f6 01       	movw	r30, r12
    1676:	80 83       	st	Z, r24
    1678:	0f c0       	rjmp	.+30     	; 0x1698 <read_PNEUSENSORS+0x96>
		} else if (state == 2) {
    167a:	82 30       	cpi	r24, 0x02	; 2
    167c:	21 f4       	brne	.+8      	; 0x1686 <read_PNEUSENSORS+0x84>
		*right = 'o';
    167e:	8f e6       	ldi	r24, 0x6F	; 111
    1680:	f6 01       	movw	r30, r12
    1682:	80 83       	st	Z, r24
    1684:	09 c0       	rjmp	.+18     	; 0x1698 <read_PNEUSENSORS+0x96>
		} else if (state == 3) {
    1686:	83 30       	cpi	r24, 0x03	; 3
    1688:	21 f4       	brne	.+8      	; 0x1692 <read_PNEUSENSORS+0x90>
		*right = 't';
    168a:	84 e7       	ldi	r24, 0x74	; 116
    168c:	f6 01       	movw	r30, r12
    168e:	80 83       	st	Z, r24
    1690:	03 c0       	rjmp	.+6      	; 0x1698 <read_PNEUSENSORS+0x96>
		} else {
		*right = 'x';
    1692:	88 e7       	ldi	r24, 0x78	; 120
    1694:	f6 01       	movw	r30, r12
    1696:	80 83       	st	Z, r24
	}

	// Left
	state = sensors >> 4;
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	82 95       	swap	r24
    169c:	8f 70       	andi	r24, 0x0F	; 15
	state &= 0b00000011;
    169e:	83 70       	andi	r24, 0x03	; 3
	if (state == 1) {
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	21 f4       	brne	.+8      	; 0x16ac <read_PNEUSENSORS+0xaa>
		*left = 'o';
    16a4:	8f e6       	ldi	r24, 0x6F	; 111
    16a6:	f7 01       	movw	r30, r14
    16a8:	80 83       	st	Z, r24
    16aa:	0f c0       	rjmp	.+30     	; 0x16ca <read_PNEUSENSORS+0xc8>
		} else if (state == 2) {
    16ac:	82 30       	cpi	r24, 0x02	; 2
    16ae:	21 f4       	brne	.+8      	; 0x16b8 <read_PNEUSENSORS+0xb6>
		*left = 'c';
    16b0:	83 e6       	ldi	r24, 0x63	; 99
    16b2:	f7 01       	movw	r30, r14
    16b4:	80 83       	st	Z, r24
    16b6:	09 c0       	rjmp	.+18     	; 0x16ca <read_PNEUSENSORS+0xc8>
		} else if (state == 3) {
    16b8:	83 30       	cpi	r24, 0x03	; 3
    16ba:	21 f4       	brne	.+8      	; 0x16c4 <read_PNEUSENSORS+0xc2>
		*left = 't';
    16bc:	84 e7       	ldi	r24, 0x74	; 116
    16be:	f7 01       	movw	r30, r14
    16c0:	80 83       	st	Z, r24
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <read_PNEUSENSORS+0xc8>
		} else {
		*left = 'x';
    16c4:	88 e7       	ldi	r24, 0x78	; 120
    16c6:	f7 01       	movw	r30, r14
    16c8:	80 83       	st	Z, r24
	}

	// Air
	if (sensors & 0b00000010) {
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	81 ff       	sbrs	r24, 1
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <read_PNEUSENSORS+0xd6>
		*air = '0';
    16d0:	80 e3       	ldi	r24, 0x30	; 48
    16d2:	f8 01       	movw	r30, r16
    16d4:	80 83       	st	Z, r24
    16d6:	03 c0       	rjmp	.+6      	; 0x16de <read_PNEUSENSORS+0xdc>
		} else {
		*air = '1';
    16d8:	81 e3       	ldi	r24, 0x31	; 49
    16da:	f8 01       	movw	r30, r16
    16dc:	80 83       	st	Z, r24
	}
}
    16de:	0f 90       	pop	r0
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	1f 91       	pop	r17
    16e6:	0f 91       	pop	r16
    16e8:	ff 90       	pop	r15
    16ea:	ef 90       	pop	r14
    16ec:	df 90       	pop	r13
    16ee:	cf 90       	pop	r12
    16f0:	bf 90       	pop	r11
    16f2:	af 90       	pop	r10
    16f4:	08 95       	ret

000016f6 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	1f 92       	push	r1
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	08 2f       	mov	r16, r24
    1706:	16 2f       	mov	r17, r22

	uint8_t retval, old_state, new_state;

	if ((retval = read_MCP23008(HIGHCURRENT, GPIO, &old_state))) {
    1708:	ae 01       	movw	r20, r28
    170a:	4f 5f       	subi	r20, 0xFF	; 255
    170c:	5f 4f       	sbci	r21, 0xFF	; 255
    170e:	69 e0       	ldi	r22, 0x09	; 9
    1710:	88 e4       	ldi	r24, 0x48	; 72
    1712:	0e 94 9f 07 	call	0xf3e	; 0xf3e <read_MCP23008>
    1716:	81 11       	cpse	r24, r1
    1718:	07 c0       	rjmp	.+14     	; 0x1728 <set_PNEUVALVES+0x32>
		return(retval);
	}

	new_state = ((old_state | bitmap) & action);
    171a:	49 81       	ldd	r20, Y+1	; 0x01
    171c:	40 2b       	or	r20, r16
    171e:	41 23       	and	r20, r17

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    1720:	6a e0       	ldi	r22, 0x0A	; 10
    1722:	88 e4       	ldi	r24, 0x48	; 72
    1724:	0e 94 c2 07 	call	0xf84	; 0xf84 <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1728:	0f 90       	pop	r0
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	1f 91       	pop	r17
    1730:	0f 91       	pop	r16
    1732:	08 95       	ret

00001734 <close_PNEU>:
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(char mech)
{

	switch (mech) {
    1734:	8c 36       	cpi	r24, 0x6C	; 108
    1736:	99 f0       	breq	.+38     	; 0x175e <close_PNEU+0x2a>
    1738:	18 f4       	brcc	.+6      	; 0x1740 <close_PNEU+0xc>
    173a:	82 36       	cpi	r24, 0x62	; 98
    173c:	31 f0       	breq	.+12     	; 0x174a <close_PNEU+0x16>
    173e:	21 c0       	rjmp	.+66     	; 0x1782 <close_PNEU+0x4e>
    1740:	82 37       	cpi	r24, 0x72	; 114
    1742:	99 f0       	breq	.+38     	; 0x176a <close_PNEU+0x36>
    1744:	83 37       	cpi	r24, 0x73	; 115
    1746:	b9 f0       	breq	.+46     	; 0x1776 <close_PNEU+0x42>
    1748:	1c c0       	rjmp	.+56     	; 0x1782 <close_PNEU+0x4e>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    174a:	6a ee       	ldi	r22, 0xEA	; 234
    174c:	84 e4       	ldi	r24, 0x44	; 68
    174e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    1752:	66 ee       	ldi	r22, 0xE6	; 230
    1754:	88 e8       	ldi	r24, 0x88	; 136
    1756:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <set_PNEUVALVES>
			return(ERRORPROMPT);
			break;

	}

	return(GREATERPROMPT);
    175a:	80 e0       	ldi	r24, 0x00	; 0
	switch (mech) {

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
			break;
    175c:	08 95       	ret

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    175e:	6a ee       	ldi	r22, 0xEA	; 234
    1760:	84 e4       	ldi	r24, 0x44	; 68
    1762:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <set_PNEUVALVES>
			return(ERRORPROMPT);
			break;

	}

	return(GREATERPROMPT);
    1766:	80 e0       	ldi	r24, 0x00	; 0
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
			break;

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
			break;
    1768:	08 95       	ret
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    176a:	66 ee       	ldi	r22, 0xE6	; 230
    176c:	88 e8       	ldi	r24, 0x88	; 136
    176e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <set_PNEUVALVES>
			return(ERRORPROMPT);
			break;

	}

	return(GREATERPROMPT);
    1772:	80 e0       	ldi	r24, 0x00	; 0
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
			break;
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
			break;
    1774:	08 95       	ret

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    1776:	6c ee       	ldi	r22, 0xEC	; 236
    1778:	82 e2       	ldi	r24, 0x22	; 34
    177a:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <set_PNEUVALVES>
			return(ERRORPROMPT);
			break;

	}

	return(GREATERPROMPT);
    177e:	80 e0       	ldi	r24, 0x00	; 0
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
			break;

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
			break;
    1780:	08 95       	ret

		default:
			return(ERRORPROMPT);
    1782:	82 e0       	ldi	r24, 0x02	; 2

	}

	return(GREATERPROMPT);

}
    1784:	08 95       	ret

00001786 <open_PNEU>:
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(char mechanism)
{

	switch (mechanism) {
    1786:	8c 36       	cpi	r24, 0x6C	; 108
    1788:	99 f0       	breq	.+38     	; 0x17b0 <open_PNEU+0x2a>
    178a:	18 f4       	brcc	.+6      	; 0x1792 <open_PNEU+0xc>
    178c:	82 36       	cpi	r24, 0x62	; 98
    178e:	31 f0       	breq	.+12     	; 0x179c <open_PNEU+0x16>
    1790:	21 c0       	rjmp	.+66     	; 0x17d4 <open_PNEU+0x4e>
    1792:	82 37       	cpi	r24, 0x72	; 114
    1794:	99 f0       	breq	.+38     	; 0x17bc <open_PNEU+0x36>
    1796:	83 37       	cpi	r24, 0x73	; 115
    1798:	b9 f0       	breq	.+46     	; 0x17c8 <open_PNEU+0x42>
    179a:	1c c0       	rjmp	.+56     	; 0x17d4 <open_PNEU+0x4e>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    179c:	6e ea       	ldi	r22, 0xAE	; 174
    179e:	84 e4       	ldi	r24, 0x44	; 68
    17a0:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    17a4:	6e e6       	ldi	r22, 0x6E	; 110
    17a6:	88 e8       	ldi	r24, 0x88	; 136
    17a8:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <set_PNEUVALVES>
		default:
			return(ERRORPROMPT);

	}

	return(GREATERPROMPT);
    17ac:	80 e0       	ldi	r24, 0x00	; 0
	switch (mechanism) {

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
			break;
    17ae:	08 95       	ret

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    17b0:	6e ea       	ldi	r22, 0xAE	; 174
    17b2:	84 e4       	ldi	r24, 0x44	; 68
    17b4:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <set_PNEUVALVES>
		default:
			return(ERRORPROMPT);

	}

	return(GREATERPROMPT);
    17b8:	80 e0       	ldi	r24, 0x00	; 0
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
			break;

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
			break;
    17ba:	08 95       	ret
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    17bc:	6e e6       	ldi	r22, 0x6E	; 110
    17be:	88 e8       	ldi	r24, 0x88	; 136
    17c0:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <set_PNEUVALVES>
		default:
			return(ERRORPROMPT);

	}

	return(GREATERPROMPT);
    17c4:	80 e0       	ldi	r24, 0x00	; 0
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
			break;
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
			break;
    17c6:	08 95       	ret

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    17c8:	6e ec       	ldi	r22, 0xCE	; 206
    17ca:	82 e2       	ldi	r24, 0x22	; 34
    17cc:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <set_PNEUVALVES>
		default:
			return(ERRORPROMPT);

	}

	return(GREATERPROMPT);
    17d0:	80 e0       	ldi	r24, 0x00	; 0
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
			break;

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
			break;
    17d2:	08 95       	ret

		default:
			return(ERRORPROMPT);
    17d4:	82 e0       	ldi	r24, 0x02	; 2

	}

	return(GREATERPROMPT);

}
    17d6:	08 95       	ret

000017d8 <init_PORTS>:
	sure nothing lurks in the background by accident.
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
    17d8:	e0 e0       	ldi	r30, 0x00	; 0
    17da:	f4 e0       	ldi	r31, 0x04	; 4
    17dc:	88 e0       	ldi	r24, 0x08	; 8
    17de:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
    17e0:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
    17e2:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
    17e4:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
    17e6:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    17e8:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    17ea:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
    17ec:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
    17ee:	e0 e2       	ldi	r30, 0x20	; 32
    17f0:	f4 e0       	ldi	r31, 0x04	; 4
    17f2:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
    17f4:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
    17f6:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
    17f8:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
    17fa:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
    17fc:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
    17fe:	e0 e4       	ldi	r30, 0x40	; 64
    1800:	f4 e0       	ldi	r31, 0x04	; 4
    1802:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
    1804:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
    1806:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
    1808:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
    180a:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
    180c:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
    180e:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
    1810:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1812:	e0 e6       	ldi	r30, 0x60	; 96
    1814:	f4 e0       	ldi	r31, 0x04	; 4
    1816:	94 e0       	ldi	r25, 0x04	; 4
    1818:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    181a:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    181c:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    181e:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1820:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1822:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1824:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1826:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
    1828:	e0 e8       	ldi	r30, 0x80	; 128
    182a:	f4 e0       	ldi	r31, 0x04	; 4
    182c:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
    182e:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
    1830:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
    1832:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
    1834:	e0 ea       	ldi	r30, 0xA0	; 160
    1836:	f4 e0       	ldi	r31, 0x04	; 4
    1838:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
    183a:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
    183c:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
    183e:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
    1840:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
    1842:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
    1844:	86 8b       	std	Z+22, r24	; 0x16
    1846:	08 95       	ret

00001848 <report>:
	Returns
		0 - GREATERPROMPT on success
		1 - ERRORPROMPT on error (invalid command noun)
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1848:	2f 92       	push	r2
    184a:	3f 92       	push	r3
    184c:	4f 92       	push	r4
    184e:	5f 92       	push	r5
    1850:	6f 92       	push	r6
    1852:	7f 92       	push	r7
    1854:	8f 92       	push	r8
    1856:	9f 92       	push	r9
    1858:	af 92       	push	r10
    185a:	bf 92       	push	r11
    185c:	cf 92       	push	r12
    185e:	df 92       	push	r13
    1860:	ef 92       	push	r14
    1862:	ff 92       	push	r15
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	c7 5e       	subi	r28, 0xE7	; 231
    1872:	d1 40       	sbci	r29, 0x01	; 1
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE+10], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	const char format_BTM[] = "$S%dBTM,%s,%s";
    1878:	9e e0       	ldi	r25, 0x0E	; 14
    187a:	eb e4       	ldi	r30, 0x4B	; 75
    187c:	f5 e7       	ldi	r31, 0x75	; 117
    187e:	de 01       	movw	r26, r28
    1880:	ae 52       	subi	r26, 0x2E	; 46
    1882:	bf 4f       	sbci	r27, 0xFF	; 255
    1884:	01 90       	ld	r0, Z+
    1886:	0d 92       	st	X+, r0
    1888:	9a 95       	dec	r25
    188a:	e1 f7       	brne	.-8      	; 0x1884 <report+0x3c>
	const char format_ENV[] = "$S%dENV,%s,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%s";
    188c:	92 e4       	ldi	r25, 0x42	; 66
    188e:	e9 e5       	ldi	r30, 0x59	; 89
    1890:	f5 e7       	ldi	r31, 0x75	; 117
    1892:	de 01       	movw	r26, r28
    1894:	a0 52       	subi	r26, 0x20	; 32
    1896:	bf 4f       	sbci	r27, 0xFF	; 255
    1898:	01 90       	ld	r0, Z+
    189a:	0d 92       	st	X+, r0
    189c:	9a 95       	dec	r25
    189e:	e1 f7       	brne	.-8      	; 0x1898 <report+0x50>
	const char format_ORI[] = "$S%dORI,%s,%3.1f,%3.1f,%3.1f,%s";
    18a0:	90 e2       	ldi	r25, 0x20	; 32
    18a2:	eb e9       	ldi	r30, 0x9B	; 155
    18a4:	f5 e7       	ldi	r31, 0x75	; 117
    18a6:	de 01       	movw	r26, r28
    18a8:	ae 5d       	subi	r26, 0xDE	; 222
    18aa:	be 4f       	sbci	r27, 0xFE	; 254
    18ac:	01 90       	ld	r0, Z+
    18ae:	0d 92       	st	X+, r0
    18b0:	9a 95       	dec	r25
    18b2:	e1 f7       	brne	.-8      	; 0x18ac <report+0x64>
	const char format_PNU[] = "$S%dPNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    18b4:	91 e3       	ldi	r25, 0x31	; 49
    18b6:	eb eb       	ldi	r30, 0xBB	; 187
    18b8:	f5 e7       	ldi	r31, 0x75	; 117
    18ba:	de 01       	movw	r26, r28
    18bc:	ae 5b       	subi	r26, 0xBE	; 190
    18be:	be 4f       	sbci	r27, 0xFE	; 254
    18c0:	01 90       	ld	r0, Z+
    18c2:	0d 92       	st	X+, r0
    18c4:	9a 95       	dec	r25
    18c6:	e1 f7       	brne	.-8      	; 0x18c0 <report+0x78>
	const char format_TIM[] = "$S%dTIM,%s,%s,set,%s,boot,%s";
    18c8:	9d e1       	ldi	r25, 0x1D	; 29
    18ca:	ec ee       	ldi	r30, 0xEC	; 236
    18cc:	f5 e7       	ldi	r31, 0x75	; 117
    18ce:	de 01       	movw	r26, r28
    18d0:	ad 58       	subi	r26, 0x8D	; 141
    18d2:	be 4f       	sbci	r27, 0xFE	; 254
    18d4:	01 90       	ld	r0, Z+
    18d6:	0d 92       	st	X+, r0
    18d8:	9a 95       	dec	r25
    18da:	e1 f7       	brne	.-8      	; 0x18d4 <report+0x8c>
	const char format_VAC[] = "$S%dVAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    18dc:	99 e2       	ldi	r25, 0x29	; 41
    18de:	e9 e0       	ldi	r30, 0x09	; 9
    18e0:	f6 e7       	ldi	r31, 0x76	; 118
    18e2:	de 01       	movw	r26, r28
    18e4:	a0 57       	subi	r26, 0x70	; 112
    18e6:	be 4f       	sbci	r27, 0xFE	; 254
    18e8:	01 90       	ld	r0, Z+
    18ea:	0d 92       	st	X+, r0
    18ec:	9a 95       	dec	r25
    18ee:	e1 f7       	brne	.-8      	; 0x18e8 <report+0xa0>
	const char format_VER[] = "$S%dVER,%s,%s,%s";
    18f0:	91 e1       	ldi	r25, 0x11	; 17
    18f2:	e2 e3       	ldi	r30, 0x32	; 50
    18f4:	f6 e7       	ldi	r31, 0x76	; 118
    18f6:	de 01       	movw	r26, r28
    18f8:	a7 54       	subi	r26, 0x47	; 71
    18fa:	be 4f       	sbci	r27, 0xFE	; 254
    18fc:	01 90       	ld	r0, Z+
    18fe:	0d 92       	st	X+, r0
    1900:	9a 95       	dec	r25
    1902:	e1 f7       	brne	.-8      	; 0x18fc <report+0xb4>
	float t0, t1, t2, t3, h0, h1, h2;		// temperature and humidity
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	char shutter, left, right, air;

	switch(pcmd[cstack].cobject) {
    1904:	08 2f       	mov	r16, r24
    1906:	10 e0       	ldi	r17, 0x00	; 0
    1908:	84 e3       	ldi	r24, 0x34	; 52
    190a:	80 9f       	mul	r24, r16
    190c:	f0 01       	movw	r30, r0
    190e:	81 9f       	mul	r24, r17
    1910:	f0 0d       	add	r31, r0
    1912:	11 24       	eor	r1, r1
    1914:	ed 5f       	subi	r30, 0xFD	; 253
    1916:	f7 4d       	sbci	r31, 0xD7	; 215
    1918:	e1 81       	ldd	r30, Z+1	; 0x01
    191a:	8e 2f       	mov	r24, r30
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	fc 01       	movw	r30, r24
    1920:	e2 54       	subi	r30, 0x42	; 66
    1922:	f1 09       	sbc	r31, r1
    1924:	e5 33       	cpi	r30, 0x35	; 53
    1926:	f1 05       	cpc	r31, r1
    1928:	08 f0       	brcs	.+2      	; 0x192c <report+0xe4>
    192a:	0c c3       	rjmp	.+1560   	; 0x1f44 <report+0x6fc>
    192c:	e0 5b       	subi	r30, 0xB0	; 176
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__tablejump2__>

		case 'B':					// Boot time
			get_BOOTTIME(boottime);
    1934:	ce 01       	movw	r24, r28
    1936:	82 54       	subi	r24, 0x42	; 66
    1938:	9f 4f       	sbci	r25, 0xFF	; 255
    193a:	0e 94 d2 05 	call	0xba4	; 0xba4 <get_BOOTTIME>
			sprintf(outbuf, format_BTM, get_SPECID, boottime, pcmd[cstack].cid);
    193e:	24 e3       	ldi	r18, 0x34	; 52
    1940:	20 9f       	mul	r18, r16
    1942:	c0 01       	movw	r24, r0
    1944:	21 9f       	mul	r18, r17
    1946:	90 0d       	add	r25, r0
    1948:	11 24       	eor	r1, r1
    194a:	82 5d       	subi	r24, 0xD2	; 210
    194c:	97 4d       	sbci	r25, 0xD7	; 215
    194e:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1952:	22 ff       	sbrs	r18, 2
    1954:	03 c0       	rjmp	.+6      	; 0x195c <report+0x114>
    1956:	22 e0       	ldi	r18, 0x02	; 2
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <report+0x118>
    195c:	21 e0       	ldi	r18, 0x01	; 1
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	9f 93       	push	r25
    1962:	8f 93       	push	r24
    1964:	ce 01       	movw	r24, r28
    1966:	82 54       	subi	r24, 0x42	; 66
    1968:	9f 4f       	sbci	r25, 0xFF	; 255
    196a:	9f 93       	push	r25
    196c:	8f 93       	push	r24
    196e:	3f 93       	push	r19
    1970:	2f 93       	push	r18
    1972:	44 96       	adiw	r24, 0x14	; 20
    1974:	9f 93       	push	r25
    1976:	8f 93       	push	r24
    1978:	8e 01       	movw	r16, r28
    197a:	0f 5f       	subi	r16, 0xFF	; 255
    197c:	1f 4f       	sbci	r17, 0xFF	; 255
    197e:	1f 93       	push	r17
    1980:	0f 93       	push	r16
    1982:	0e 94 ab 19 	call	0x3356	; 0x3356 <sprintf>
			checksum_NMEA(outbuf);
    1986:	c8 01       	movw	r24, r16
    1988:	0e 94 62 09 	call	0x12c4	; 0x12c4 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    198c:	f8 01       	movw	r30, r16
    198e:	01 90       	ld	r0, Z+
    1990:	00 20       	and	r0, r0
    1992:	e9 f7       	brne	.-6      	; 0x198e <report+0x146>
    1994:	31 97       	sbiw	r30, 0x01	; 1
    1996:	af 01       	movw	r20, r30
    1998:	40 1b       	sub	r20, r16
    199a:	51 0b       	sbc	r21, r17
    199c:	b8 01       	movw	r22, r16
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <send_USART>
			break;
    19a4:	cd bf       	out	0x3d, r28	; 61
    19a6:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    19a8:	80 e0       	ldi	r24, 0x00	; 0
		case 'B':					// Boot time
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_BTM, get_SPECID, boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
    19aa:	cd c2       	rjmp	.+1434   	; 0x1f46 <report+0x6fe>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	0e 94 33 10 	call	0x2066	; 0x2066 <get_temperature>
    19b2:	c6 52       	subi	r28, 0x26	; 38
    19b4:	de 4f       	sbci	r29, 0xFE	; 254
    19b6:	68 83       	st	Y, r22
    19b8:	ca 5d       	subi	r28, 0xDA	; 218
    19ba:	d1 40       	sbci	r29, 0x01	; 1
    19bc:	c5 52       	subi	r28, 0x25	; 37
    19be:	de 4f       	sbci	r29, 0xFE	; 254
    19c0:	78 83       	st	Y, r23
    19c2:	cb 5d       	subi	r28, 0xDB	; 219
    19c4:	d1 40       	sbci	r29, 0x01	; 1
    19c6:	c4 52       	subi	r28, 0x24	; 36
    19c8:	de 4f       	sbci	r29, 0xFE	; 254
    19ca:	88 83       	st	Y, r24
    19cc:	cc 5d       	subi	r28, 0xDC	; 220
    19ce:	d1 40       	sbci	r29, 0x01	; 1
    19d0:	c3 52       	subi	r28, 0x23	; 35
    19d2:	de 4f       	sbci	r29, 0xFE	; 254
    19d4:	98 83       	st	Y, r25
    19d6:	cd 5d       	subi	r28, 0xDD	; 221
    19d8:	d1 40       	sbci	r29, 0x01	; 1
			h0 = get_humidity(0);
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	0e 94 90 06 	call	0xd20	; 0xd20 <get_humidity>
    19e0:	c2 52       	subi	r28, 0x22	; 34
    19e2:	de 4f       	sbci	r29, 0xFE	; 254
    19e4:	68 83       	st	Y, r22
    19e6:	ce 5d       	subi	r28, 0xDE	; 222
    19e8:	d1 40       	sbci	r29, 0x01	; 1
    19ea:	c1 52       	subi	r28, 0x21	; 33
    19ec:	de 4f       	sbci	r29, 0xFE	; 254
    19ee:	78 83       	st	Y, r23
    19f0:	cf 5d       	subi	r28, 0xDF	; 223
    19f2:	d1 40       	sbci	r29, 0x01	; 1
    19f4:	c0 52       	subi	r28, 0x20	; 32
    19f6:	de 4f       	sbci	r29, 0xFE	; 254
    19f8:	88 83       	st	Y, r24
    19fa:	c0 5e       	subi	r28, 0xE0	; 224
    19fc:	d1 40       	sbci	r29, 0x01	; 1
    19fe:	cf 51       	subi	r28, 0x1F	; 31
    1a00:	de 4f       	sbci	r29, 0xFE	; 254
    1a02:	98 83       	st	Y, r25
    1a04:	c1 5e       	subi	r28, 0xE1	; 225
    1a06:	d1 40       	sbci	r29, 0x01	; 1
			t1 = get_temperature(1);
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	0e 94 33 10 	call	0x2066	; 0x2066 <get_temperature>
    1a0e:	ce 51       	subi	r28, 0x1E	; 30
    1a10:	de 4f       	sbci	r29, 0xFE	; 254
    1a12:	68 83       	st	Y, r22
    1a14:	c2 5e       	subi	r28, 0xE2	; 226
    1a16:	d1 40       	sbci	r29, 0x01	; 1
    1a18:	cd 51       	subi	r28, 0x1D	; 29
    1a1a:	de 4f       	sbci	r29, 0xFE	; 254
    1a1c:	78 83       	st	Y, r23
    1a1e:	c3 5e       	subi	r28, 0xE3	; 227
    1a20:	d1 40       	sbci	r29, 0x01	; 1
    1a22:	cc 51       	subi	r28, 0x1C	; 28
    1a24:	de 4f       	sbci	r29, 0xFE	; 254
    1a26:	88 83       	st	Y, r24
    1a28:	c4 5e       	subi	r28, 0xE4	; 228
    1a2a:	d1 40       	sbci	r29, 0x01	; 1
    1a2c:	cb 51       	subi	r28, 0x1B	; 27
    1a2e:	de 4f       	sbci	r29, 0xFE	; 254
    1a30:	98 83       	st	Y, r25
    1a32:	c5 5e       	subi	r28, 0xE5	; 229
    1a34:	d1 40       	sbci	r29, 0x01	; 1
			h1 = get_humidity(1);
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	0e 94 90 06 	call	0xd20	; 0xd20 <get_humidity>
    1a3c:	f6 2e       	mov	r15, r22
    1a3e:	e7 2e       	mov	r14, r23
    1a40:	d8 2e       	mov	r13, r24
    1a42:	c9 2e       	mov	r12, r25
			t2 = get_temperature(2);
    1a44:	82 e0       	ldi	r24, 0x02	; 2
    1a46:	0e 94 33 10 	call	0x2066	; 0x2066 <get_temperature>
    1a4a:	b6 2e       	mov	r11, r22
    1a4c:	a7 2e       	mov	r10, r23
    1a4e:	98 2e       	mov	r9, r24
    1a50:	89 2e       	mov	r8, r25
			h2 = get_humidity(2);
    1a52:	82 e0       	ldi	r24, 0x02	; 2
    1a54:	0e 94 90 06 	call	0xd20	; 0xd20 <get_humidity>
    1a58:	76 2e       	mov	r7, r22
    1a5a:	67 2e       	mov	r6, r23
    1a5c:	58 2e       	mov	r5, r24
    1a5e:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    1a60:	83 e0       	ldi	r24, 0x03	; 3
    1a62:	0e 94 33 10 	call	0x2066	; 0x2066 <get_temperature>
    1a66:	ca 51       	subi	r28, 0x1A	; 26
    1a68:	de 4f       	sbci	r29, 0xFE	; 254
    1a6a:	68 83       	st	Y, r22
    1a6c:	c6 5e       	subi	r28, 0xE6	; 230
    1a6e:	d1 40       	sbci	r29, 0x01	; 1
    1a70:	c9 51       	subi	r28, 0x19	; 25
    1a72:	de 4f       	sbci	r29, 0xFE	; 254
    1a74:	78 83       	st	Y, r23
    1a76:	c7 5e       	subi	r28, 0xE7	; 231
    1a78:	d1 40       	sbci	r29, 0x01	; 1
    1a7a:	38 2e       	mov	r3, r24
    1a7c:	29 2e       	mov	r2, r25
			get_time(currenttime);
    1a7e:	ce 01       	movw	r24, r28
    1a80:	8a 56       	subi	r24, 0x6A	; 106
    1a82:	9f 4f       	sbci	r25, 0xFF	; 255
    1a84:	0e 94 56 05 	call	0xaac	; 0xaac <get_time>
			sprintf(outbuf, format_ENV, get_SPECID, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    1a88:	24 e3       	ldi	r18, 0x34	; 52
    1a8a:	20 9f       	mul	r18, r16
    1a8c:	c0 01       	movw	r24, r0
    1a8e:	21 9f       	mul	r18, r17
    1a90:	90 0d       	add	r25, r0
    1a92:	11 24       	eor	r1, r1
    1a94:	82 5d       	subi	r24, 0xD2	; 210
    1a96:	97 4d       	sbci	r25, 0xD7	; 215
    1a98:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1a9c:	22 ff       	sbrs	r18, 2
    1a9e:	03 c0       	rjmp	.+6      	; 0x1aa6 <report+0x25e>
    1aa0:	22 e0       	ldi	r18, 0x02	; 2
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <report+0x262>
    1aa6:	21 e0       	ldi	r18, 0x01	; 1
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	9f 93       	push	r25
    1aac:	8f 93       	push	r24
    1aae:	2f 92       	push	r2
    1ab0:	3f 92       	push	r3
    1ab2:	c9 51       	subi	r28, 0x19	; 25
    1ab4:	de 4f       	sbci	r29, 0xFE	; 254
    1ab6:	98 81       	ld	r25, Y
    1ab8:	c7 5e       	subi	r28, 0xE7	; 231
    1aba:	d1 40       	sbci	r29, 0x01	; 1
    1abc:	9f 93       	push	r25
    1abe:	ca 51       	subi	r28, 0x1A	; 26
    1ac0:	de 4f       	sbci	r29, 0xFE	; 254
    1ac2:	88 81       	ld	r24, Y
    1ac4:	c6 5e       	subi	r28, 0xE6	; 230
    1ac6:	d1 40       	sbci	r29, 0x01	; 1
    1ac8:	8f 93       	push	r24
    1aca:	4f 92       	push	r4
    1acc:	5f 92       	push	r5
    1ace:	6f 92       	push	r6
    1ad0:	7f 92       	push	r7
    1ad2:	8f 92       	push	r8
    1ad4:	9f 92       	push	r9
    1ad6:	af 92       	push	r10
    1ad8:	bf 92       	push	r11
    1ada:	cf 92       	push	r12
    1adc:	df 92       	push	r13
    1ade:	ef 92       	push	r14
    1ae0:	ff 92       	push	r15
    1ae2:	cb 51       	subi	r28, 0x1B	; 27
    1ae4:	de 4f       	sbci	r29, 0xFE	; 254
    1ae6:	98 81       	ld	r25, Y
    1ae8:	c5 5e       	subi	r28, 0xE5	; 229
    1aea:	d1 40       	sbci	r29, 0x01	; 1
    1aec:	9f 93       	push	r25
    1aee:	cc 51       	subi	r28, 0x1C	; 28
    1af0:	de 4f       	sbci	r29, 0xFE	; 254
    1af2:	88 81       	ld	r24, Y
    1af4:	c4 5e       	subi	r28, 0xE4	; 228
    1af6:	d1 40       	sbci	r29, 0x01	; 1
    1af8:	8f 93       	push	r24
    1afa:	cd 51       	subi	r28, 0x1D	; 29
    1afc:	de 4f       	sbci	r29, 0xFE	; 254
    1afe:	98 81       	ld	r25, Y
    1b00:	c3 5e       	subi	r28, 0xE3	; 227
    1b02:	d1 40       	sbci	r29, 0x01	; 1
    1b04:	9f 93       	push	r25
    1b06:	ce 51       	subi	r28, 0x1E	; 30
    1b08:	de 4f       	sbci	r29, 0xFE	; 254
    1b0a:	88 81       	ld	r24, Y
    1b0c:	c2 5e       	subi	r28, 0xE2	; 226
    1b0e:	d1 40       	sbci	r29, 0x01	; 1
    1b10:	8f 93       	push	r24
    1b12:	cf 51       	subi	r28, 0x1F	; 31
    1b14:	de 4f       	sbci	r29, 0xFE	; 254
    1b16:	98 81       	ld	r25, Y
    1b18:	c1 5e       	subi	r28, 0xE1	; 225
    1b1a:	d1 40       	sbci	r29, 0x01	; 1
    1b1c:	9f 93       	push	r25
    1b1e:	c0 52       	subi	r28, 0x20	; 32
    1b20:	de 4f       	sbci	r29, 0xFE	; 254
    1b22:	88 81       	ld	r24, Y
    1b24:	c0 5e       	subi	r28, 0xE0	; 224
    1b26:	d1 40       	sbci	r29, 0x01	; 1
    1b28:	8f 93       	push	r24
    1b2a:	c1 52       	subi	r28, 0x21	; 33
    1b2c:	de 4f       	sbci	r29, 0xFE	; 254
    1b2e:	98 81       	ld	r25, Y
    1b30:	cf 5d       	subi	r28, 0xDF	; 223
    1b32:	d1 40       	sbci	r29, 0x01	; 1
    1b34:	9f 93       	push	r25
    1b36:	c2 52       	subi	r28, 0x22	; 34
    1b38:	de 4f       	sbci	r29, 0xFE	; 254
    1b3a:	88 81       	ld	r24, Y
    1b3c:	ce 5d       	subi	r28, 0xDE	; 222
    1b3e:	d1 40       	sbci	r29, 0x01	; 1
    1b40:	8f 93       	push	r24
    1b42:	c3 52       	subi	r28, 0x23	; 35
    1b44:	de 4f       	sbci	r29, 0xFE	; 254
    1b46:	98 81       	ld	r25, Y
    1b48:	cd 5d       	subi	r28, 0xDD	; 221
    1b4a:	d1 40       	sbci	r29, 0x01	; 1
    1b4c:	9f 93       	push	r25
    1b4e:	c4 52       	subi	r28, 0x24	; 36
    1b50:	de 4f       	sbci	r29, 0xFE	; 254
    1b52:	88 81       	ld	r24, Y
    1b54:	cc 5d       	subi	r28, 0xDC	; 220
    1b56:	d1 40       	sbci	r29, 0x01	; 1
    1b58:	8f 93       	push	r24
    1b5a:	c5 52       	subi	r28, 0x25	; 37
    1b5c:	de 4f       	sbci	r29, 0xFE	; 254
    1b5e:	98 81       	ld	r25, Y
    1b60:	cb 5d       	subi	r28, 0xDB	; 219
    1b62:	d1 40       	sbci	r29, 0x01	; 1
    1b64:	9f 93       	push	r25
    1b66:	c6 52       	subi	r28, 0x26	; 38
    1b68:	de 4f       	sbci	r29, 0xFE	; 254
    1b6a:	88 81       	ld	r24, Y
    1b6c:	ca 5d       	subi	r28, 0xDA	; 218
    1b6e:	d1 40       	sbci	r29, 0x01	; 1
    1b70:	8f 93       	push	r24
    1b72:	ce 01       	movw	r24, r28
    1b74:	8a 56       	subi	r24, 0x6A	; 106
    1b76:	9f 4f       	sbci	r25, 0xFF	; 255
    1b78:	9f 93       	push	r25
    1b7a:	8f 93       	push	r24
    1b7c:	3f 93       	push	r19
    1b7e:	2f 93       	push	r18
    1b80:	86 5b       	subi	r24, 0xB6	; 182
    1b82:	9f 4f       	sbci	r25, 0xFF	; 255
    1b84:	9f 93       	push	r25
    1b86:	8f 93       	push	r24
    1b88:	8e 01       	movw	r16, r28
    1b8a:	0f 5f       	subi	r16, 0xFF	; 255
    1b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8e:	1f 93       	push	r17
    1b90:	0f 93       	push	r16
    1b92:	0e 94 ab 19 	call	0x3356	; 0x3356 <sprintf>
			checksum_NMEA(outbuf);
    1b96:	cd bf       	out	0x3d, r28	; 61
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	c8 01       	movw	r24, r16
    1b9c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1ba0:	f8 01       	movw	r30, r16
    1ba2:	01 90       	ld	r0, Z+
    1ba4:	00 20       	and	r0, r0
    1ba6:	e9 f7       	brne	.-6      	; 0x1ba2 <report+0x35a>
    1ba8:	31 97       	sbiw	r30, 0x01	; 1
    1baa:	af 01       	movw	r20, r30
    1bac:	40 1b       	sub	r20, r16
    1bae:	51 0b       	sbc	r21, r17
    1bb0:	b8 01       	movw	r22, r16
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <send_USART>
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
			t3 = get_temperature(3);
			get_time(currenttime);
			sprintf(outbuf, format_ENV, get_SPECID, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
    1bba:	c5 c1       	rjmp	.+906    	; 0x1f46 <report+0x6fe>

		case 'o':					// Orientation
			get_orientation(MMA8451ADDR, &x, &y, &z);
    1bbc:	9e 01       	movw	r18, r28
    1bbe:	2e 52       	subi	r18, 0x2E	; 46
    1bc0:	3e 4f       	sbci	r19, 0xFE	; 254
    1bc2:	ae 01       	movw	r20, r28
    1bc4:	42 53       	subi	r20, 0x32	; 50
    1bc6:	5e 4f       	sbci	r21, 0xFE	; 254
    1bc8:	be 01       	movw	r22, r28
    1bca:	66 53       	subi	r22, 0x36	; 54
    1bcc:	7e 4f       	sbci	r23, 0xFE	; 254
    1bce:	8a e3       	ldi	r24, 0x3A	; 58
    1bd0:	0e 94 6f 08 	call	0x10de	; 0x10de <get_orientation>
			get_time(currenttime);
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	8a 56       	subi	r24, 0x6A	; 106
    1bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bda:	0e 94 56 05 	call	0xaac	; 0xaac <get_time>
x=y=z=23.4;
    1bde:	83 e3       	ldi	r24, 0x33	; 51
    1be0:	93 e3       	ldi	r25, 0x33	; 51
    1be2:	ab eb       	ldi	r26, 0xBB	; 187
    1be4:	b1 e4       	ldi	r27, 0x41	; 65
    1be6:	ce 52       	subi	r28, 0x2E	; 46
    1be8:	de 4f       	sbci	r29, 0xFE	; 254
    1bea:	88 83       	st	Y, r24
    1bec:	99 83       	std	Y+1, r25	; 0x01
    1bee:	aa 83       	std	Y+2, r26	; 0x02
    1bf0:	bb 83       	std	Y+3, r27	; 0x03
    1bf2:	c2 5d       	subi	r28, 0xD2	; 210
    1bf4:	d1 40       	sbci	r29, 0x01	; 1
    1bf6:	c2 53       	subi	r28, 0x32	; 50
    1bf8:	de 4f       	sbci	r29, 0xFE	; 254
    1bfa:	88 83       	st	Y, r24
    1bfc:	99 83       	std	Y+1, r25	; 0x01
    1bfe:	aa 83       	std	Y+2, r26	; 0x02
    1c00:	bb 83       	std	Y+3, r27	; 0x03
    1c02:	ce 5c       	subi	r28, 0xCE	; 206
    1c04:	d1 40       	sbci	r29, 0x01	; 1
    1c06:	c6 53       	subi	r28, 0x36	; 54
    1c08:	de 4f       	sbci	r29, 0xFE	; 254
    1c0a:	88 83       	st	Y, r24
    1c0c:	99 83       	std	Y+1, r25	; 0x01
    1c0e:	aa 83       	std	Y+2, r26	; 0x02
    1c10:	bb 83       	std	Y+3, r27	; 0x03
    1c12:	ca 5c       	subi	r28, 0xCA	; 202
    1c14:	d1 40       	sbci	r29, 0x01	; 1
			sprintf(outbuf, format_ORI, get_SPECID, currenttime, x, y, z, pcmd[cstack].cid);
    1c16:	24 e3       	ldi	r18, 0x34	; 52
    1c18:	20 9f       	mul	r18, r16
    1c1a:	c0 01       	movw	r24, r0
    1c1c:	21 9f       	mul	r18, r17
    1c1e:	90 0d       	add	r25, r0
    1c20:	11 24       	eor	r1, r1
    1c22:	82 5d       	subi	r24, 0xD2	; 210
    1c24:	97 4d       	sbci	r25, 0xD7	; 215
    1c26:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1c2a:	22 ff       	sbrs	r18, 2
    1c2c:	03 c0       	rjmp	.+6      	; 0x1c34 <report+0x3ec>
    1c2e:	32 e0       	ldi	r19, 0x02	; 2
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <report+0x3f0>
    1c34:	31 e0       	ldi	r19, 0x01	; 1
    1c36:	40 e0       	ldi	r20, 0x00	; 0
    1c38:	9f 93       	push	r25
    1c3a:	8f 93       	push	r24
    1c3c:	21 e4       	ldi	r18, 0x41	; 65
    1c3e:	2f 93       	push	r18
    1c40:	9b eb       	ldi	r25, 0xBB	; 187
    1c42:	9f 93       	push	r25
    1c44:	83 e3       	ldi	r24, 0x33	; 51
    1c46:	8f 93       	push	r24
    1c48:	8f 93       	push	r24
    1c4a:	2f 93       	push	r18
    1c4c:	9f 93       	push	r25
    1c4e:	8f 93       	push	r24
    1c50:	8f 93       	push	r24
    1c52:	2f 93       	push	r18
    1c54:	9f 93       	push	r25
    1c56:	8f 93       	push	r24
    1c58:	8f 93       	push	r24
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	8a 56       	subi	r24, 0x6A	; 106
    1c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c60:	9f 93       	push	r25
    1c62:	8f 93       	push	r24
    1c64:	4f 93       	push	r20
    1c66:	3f 93       	push	r19
    1c68:	84 57       	subi	r24, 0x74	; 116
    1c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6c:	9f 93       	push	r25
    1c6e:	8f 93       	push	r24
    1c70:	8e 01       	movw	r16, r28
    1c72:	0f 5f       	subi	r16, 0xFF	; 255
    1c74:	1f 4f       	sbci	r17, 0xFF	; 255
    1c76:	1f 93       	push	r17
    1c78:	0f 93       	push	r16
    1c7a:	0e 94 ab 19 	call	0x3356	; 0x3356 <sprintf>
			checksum_NMEA(outbuf);
    1c7e:	c8 01       	movw	r24, r16
    1c80:	0e 94 62 09 	call	0x12c4	; 0x12c4 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1c84:	f8 01       	movw	r30, r16
    1c86:	01 90       	ld	r0, Z+
    1c88:	00 20       	and	r0, r0
    1c8a:	e9 f7       	brne	.-6      	; 0x1c86 <report+0x43e>
    1c8c:	31 97       	sbiw	r30, 0x01	; 1
    1c8e:	af 01       	movw	r20, r30
    1c90:	40 1b       	sub	r20, r16
    1c92:	51 0b       	sbc	r21, r17
    1c94:	b8 01       	movw	r22, r16
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <send_USART>
			break;
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
			get_time(currenttime);
x=y=z=23.4;
			sprintf(outbuf, format_ORI, get_SPECID, currenttime, x, y, z, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
    1ca2:	51 c1       	rjmp	.+674    	; 0x1f46 <report+0x6fe>

		case 'p':
			get_time(currenttime);
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	8a 56       	subi	r24, 0x6A	; 106
    1ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    1caa:	0e 94 56 05 	call	0xaac	; 0xaac <get_time>
			read_PNEUSENSORS(&shutter, &left, &right, &air);
    1cae:	9e 01       	movw	r18, r28
    1cb0:	27 52       	subi	r18, 0x27	; 39
    1cb2:	3e 4f       	sbci	r19, 0xFE	; 254
    1cb4:	ae 01       	movw	r20, r28
    1cb6:	48 52       	subi	r20, 0x28	; 40
    1cb8:	5e 4f       	sbci	r21, 0xFE	; 254
    1cba:	be 01       	movw	r22, r28
    1cbc:	69 52       	subi	r22, 0x29	; 41
    1cbe:	7e 4f       	sbci	r23, 0xFE	; 254
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	8a 52       	subi	r24, 0x2A	; 42
    1cc4:	9e 4f       	sbci	r25, 0xFE	; 254
    1cc6:	0e 94 01 0b 	call	0x1602	; 0x1602 <read_PNEUSENSORS>
			sprintf(outbuf, format_PNU, get_SPECID, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    1cca:	24 e3       	ldi	r18, 0x34	; 52
    1ccc:	20 9f       	mul	r18, r16
    1cce:	c0 01       	movw	r24, r0
    1cd0:	21 9f       	mul	r18, r17
    1cd2:	90 0d       	add	r25, r0
    1cd4:	11 24       	eor	r1, r1
    1cd6:	82 5d       	subi	r24, 0xD2	; 210
    1cd8:	97 4d       	sbci	r25, 0xD7	; 215
    1cda:	c7 52       	subi	r28, 0x27	; 39
    1cdc:	de 4f       	sbci	r29, 0xFE	; 254
    1cde:	58 81       	ld	r21, Y
    1ce0:	c9 5d       	subi	r28, 0xD9	; 217
    1ce2:	d1 40       	sbci	r29, 0x01	; 1
    1ce4:	c8 52       	subi	r28, 0x28	; 40
    1ce6:	de 4f       	sbci	r29, 0xFE	; 254
    1ce8:	48 81       	ld	r20, Y
    1cea:	c8 5d       	subi	r28, 0xD8	; 216
    1cec:	d1 40       	sbci	r29, 0x01	; 1
    1cee:	c9 52       	subi	r28, 0x29	; 41
    1cf0:	de 4f       	sbci	r29, 0xFE	; 254
    1cf2:	38 81       	ld	r19, Y
    1cf4:	c7 5d       	subi	r28, 0xD7	; 215
    1cf6:	d1 40       	sbci	r29, 0x01	; 1
    1cf8:	ca 52       	subi	r28, 0x2A	; 42
    1cfa:	de 4f       	sbci	r29, 0xFE	; 254
    1cfc:	28 81       	ld	r18, Y
    1cfe:	c6 5d       	subi	r28, 0xD6	; 214
    1d00:	d1 40       	sbci	r29, 0x01	; 1
    1d02:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1d06:	62 ff       	sbrs	r22, 2
    1d08:	03 c0       	rjmp	.+6      	; 0x1d10 <report+0x4c8>
    1d0a:	62 e0       	ldi	r22, 0x02	; 2
    1d0c:	70 e0       	ldi	r23, 0x00	; 0
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <report+0x4cc>
    1d10:	61 e0       	ldi	r22, 0x01	; 1
    1d12:	70 e0       	ldi	r23, 0x00	; 0
    1d14:	9f 93       	push	r25
    1d16:	8f 93       	push	r24
    1d18:	1f 92       	push	r1
    1d1a:	5f 93       	push	r21
    1d1c:	1f 92       	push	r1
    1d1e:	4f 93       	push	r20
    1d20:	1f 92       	push	r1
    1d22:	3f 93       	push	r19
    1d24:	1f 92       	push	r1
    1d26:	2f 93       	push	r18
    1d28:	ce 01       	movw	r24, r28
    1d2a:	8a 56       	subi	r24, 0x6A	; 106
    1d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2e:	9f 93       	push	r25
    1d30:	8f 93       	push	r24
    1d32:	7f 93       	push	r23
    1d34:	6f 93       	push	r22
    1d36:	84 55       	subi	r24, 0x54	; 84
    1d38:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3a:	9f 93       	push	r25
    1d3c:	8f 93       	push	r24
    1d3e:	8e 01       	movw	r16, r28
    1d40:	0f 5f       	subi	r16, 0xFF	; 255
    1d42:	1f 4f       	sbci	r17, 0xFF	; 255
    1d44:	1f 93       	push	r17
    1d46:	0f 93       	push	r16
    1d48:	0e 94 ab 19 	call	0x3356	; 0x3356 <sprintf>
			checksum_NMEA(outbuf);
    1d4c:	c8 01       	movw	r24, r16
    1d4e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1d52:	f8 01       	movw	r30, r16
    1d54:	01 90       	ld	r0, Z+
    1d56:	00 20       	and	r0, r0
    1d58:	e9 f7       	brne	.-6      	; 0x1d54 <report+0x50c>
    1d5a:	31 97       	sbiw	r30, 0x01	; 1
    1d5c:	af 01       	movw	r20, r30
    1d5e:	40 1b       	sub	r20, r16
    1d60:	51 0b       	sbc	r21, r17
    1d62:	b8 01       	movw	r22, r16
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <send_USART>
			break;
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
			get_time(currenttime);
			read_PNEUSENSORS(&shutter, &left, &right, &air);
			sprintf(outbuf, format_PNU, get_SPECID, currenttime, shutter, left, right, air, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
    1d70:	ea c0       	rjmp	.+468    	; 0x1f46 <report+0x6fe>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    1d72:	ce 01       	movw	r24, r28
    1d74:	8a 56       	subi	r24, 0x6A	; 106
    1d76:	9f 4f       	sbci	r25, 0xFF	; 255
    1d78:	0e 94 56 05 	call	0xaac	; 0xaac <get_time>
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
    1d7c:	24 e1       	ldi	r18, 0x14	; 20
    1d7e:	ae 01       	movw	r20, r28
    1d80:	46 55       	subi	r20, 0x56	; 86
    1d82:	5f 4f       	sbci	r21, 0xFF	; 255
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	70 e0       	ldi	r23, 0x00	; 0
    1d88:	80 ea       	ldi	r24, 0xA0	; 160
    1d8a:	0e 94 1c 06 	call	0xc38	; 0xc38 <read_FRAM>
			get_BOOTTIME(boottime);
    1d8e:	ce 01       	movw	r24, r28
    1d90:	82 54       	subi	r24, 0x42	; 66
    1d92:	9f 4f       	sbci	r25, 0xFF	; 255
    1d94:	0e 94 d2 05 	call	0xba4	; 0xba4 <get_BOOTTIME>
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    1d98:	24 e3       	ldi	r18, 0x34	; 52
    1d9a:	20 9f       	mul	r18, r16
    1d9c:	c0 01       	movw	r24, r0
    1d9e:	21 9f       	mul	r18, r17
    1da0:	90 0d       	add	r25, r0
    1da2:	11 24       	eor	r1, r1
    1da4:	82 5d       	subi	r24, 0xD2	; 210
    1da6:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
    1da8:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1dac:	22 ff       	sbrs	r18, 2
    1dae:	03 c0       	rjmp	.+6      	; 0x1db6 <report+0x56e>
    1db0:	22 e0       	ldi	r18, 0x02	; 2
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <report+0x572>
    1db6:	21 e0       	ldi	r18, 0x01	; 1
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	9f 93       	push	r25
    1dbc:	8f 93       	push	r24
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	82 54       	subi	r24, 0x42	; 66
    1dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc4:	9f 93       	push	r25
    1dc6:	8f 93       	push	r24
    1dc8:	44 97       	sbiw	r24, 0x14	; 20
    1dca:	9f 93       	push	r25
    1dcc:	8f 93       	push	r24
    1dce:	44 97       	sbiw	r24, 0x14	; 20
    1dd0:	9f 93       	push	r25
    1dd2:	8f 93       	push	r24
    1dd4:	3f 93       	push	r19
    1dd6:	2f 93       	push	r18
    1dd8:	83 52       	subi	r24, 0x23	; 35
    1dda:	9f 4f       	sbci	r25, 0xFF	; 255
    1ddc:	9f 93       	push	r25
    1dde:	8f 93       	push	r24
    1de0:	8e 01       	movw	r16, r28
    1de2:	0f 5f       	subi	r16, 0xFF	; 255
    1de4:	1f 4f       	sbci	r17, 0xFF	; 255
    1de6:	1f 93       	push	r17
    1de8:	0f 93       	push	r16
    1dea:	0e 94 ab 19 	call	0x3356	; 0x3356 <sprintf>
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    1dee:	c8 01       	movw	r24, r16
    1df0:	0e 94 62 09 	call	0x12c4	; 0x12c4 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1df4:	f8 01       	movw	r30, r16
    1df6:	01 90       	ld	r0, Z+
    1df8:	00 20       	and	r0, r0
    1dfa:	e9 f7       	brne	.-6      	; 0x1df6 <report+0x5ae>
    1dfc:	31 97       	sbiw	r30, 0x01	; 1
    1dfe:	af 01       	movw	r20, r30
    1e00:	40 1b       	sub	r20, r16
    1e02:	51 0b       	sbc	r21, r17
    1e04:	b8 01       	movw	r22, r16
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <send_USART>
			break;
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1e10:	80 e0       	ldi	r24, 0x00	; 0
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
    1e12:	99 c0       	rjmp	.+306    	; 0x1f46 <report+0x6fe>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	0e 94 3f 07 	call	0xe7e	; 0xe7e <read_ionpump>
    1e1a:	f6 2e       	mov	r15, r22
    1e1c:	e7 2e       	mov	r14, r23
    1e1e:	d8 2e       	mov	r13, r24
    1e20:	c9 2e       	mov	r12, r25
			bluvac = read_ionpump(BLUEPUMP);
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	0e 94 3f 07 	call	0xe7e	; 0xe7e <read_ionpump>
    1e28:	b6 2e       	mov	r11, r22
    1e2a:	a7 2e       	mov	r10, r23
    1e2c:	98 2e       	mov	r9, r24
    1e2e:	89 2e       	mov	r8, r25
			get_time(currenttime);
    1e30:	ce 01       	movw	r24, r28
    1e32:	8a 56       	subi	r24, 0x6A	; 106
    1e34:	9f 4f       	sbci	r25, 0xFF	; 255
    1e36:	0e 94 56 05 	call	0xaac	; 0xaac <get_time>
			sprintf(outbuf, format_VAC, get_SPECID, currenttime, redvac, bluvac, pcmd[cstack].cid);
    1e3a:	24 e3       	ldi	r18, 0x34	; 52
    1e3c:	20 9f       	mul	r18, r16
    1e3e:	c0 01       	movw	r24, r0
    1e40:	21 9f       	mul	r18, r17
    1e42:	90 0d       	add	r25, r0
    1e44:	11 24       	eor	r1, r1
    1e46:	82 5d       	subi	r24, 0xD2	; 210
    1e48:	97 4d       	sbci	r25, 0xD7	; 215
    1e4a:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1e4e:	22 ff       	sbrs	r18, 2
    1e50:	03 c0       	rjmp	.+6      	; 0x1e58 <report+0x610>
    1e52:	22 e0       	ldi	r18, 0x02	; 2
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <report+0x614>
    1e58:	21 e0       	ldi	r18, 0x01	; 1
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	9f 93       	push	r25
    1e5e:	8f 93       	push	r24
    1e60:	8f 92       	push	r8
    1e62:	9f 92       	push	r9
    1e64:	af 92       	push	r10
    1e66:	bf 92       	push	r11
    1e68:	cf 92       	push	r12
    1e6a:	df 92       	push	r13
    1e6c:	ef 92       	push	r14
    1e6e:	ff 92       	push	r15
    1e70:	ce 01       	movw	r24, r28
    1e72:	8a 56       	subi	r24, 0x6A	; 106
    1e74:	9f 4f       	sbci	r25, 0xFF	; 255
    1e76:	9f 93       	push	r25
    1e78:	8f 93       	push	r24
    1e7a:	3f 93       	push	r19
    1e7c:	2f 93       	push	r18
    1e7e:	86 50       	subi	r24, 0x06	; 6
    1e80:	9f 4f       	sbci	r25, 0xFF	; 255
    1e82:	9f 93       	push	r25
    1e84:	8f 93       	push	r24
    1e86:	8e 01       	movw	r16, r28
    1e88:	0f 5f       	subi	r16, 0xFF	; 255
    1e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8c:	1f 93       	push	r17
    1e8e:	0f 93       	push	r16
    1e90:	0e 94 ab 19 	call	0x3356	; 0x3356 <sprintf>
			checksum_NMEA(outbuf);
    1e94:	c8 01       	movw	r24, r16
    1e96:	0e 94 62 09 	call	0x12c4	; 0x12c4 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	01 90       	ld	r0, Z+
    1e9e:	00 20       	and	r0, r0
    1ea0:	e9 f7       	brne	.-6      	; 0x1e9c <report+0x654>
    1ea2:	31 97       	sbiw	r30, 0x01	; 1
    1ea4:	af 01       	movw	r20, r30
    1ea6:	40 1b       	sub	r20, r16
    1ea8:	51 0b       	sbc	r21, r17
    1eaa:	b8 01       	movw	r22, r16
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <send_USART>
			break;
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
			bluvac = read_ionpump(BLUEPUMP);
			get_time(currenttime);
			sprintf(outbuf, format_VAC, get_SPECID, currenttime, redvac, bluvac, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
    1eb8:	46 c0       	rjmp	.+140    	; 0x1f46 <report+0x6fe>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    1eba:	ce 01       	movw	r24, r28
    1ebc:	85 57       	subi	r24, 0x75	; 117
    1ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec0:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <get_VERSION>
			get_time(currenttime);
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	8a 56       	subi	r24, 0x6A	; 106
    1ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eca:	0e 94 56 05 	call	0xaac	; 0xaac <get_time>
			sprintf(outbuf, format_VER, get_SPECID, currenttime, version, pcmd[cstack].cid);
    1ece:	24 e3       	ldi	r18, 0x34	; 52
    1ed0:	20 9f       	mul	r18, r16
    1ed2:	c0 01       	movw	r24, r0
    1ed4:	21 9f       	mul	r18, r17
    1ed6:	90 0d       	add	r25, r0
    1ed8:	11 24       	eor	r1, r1
    1eda:	82 5d       	subi	r24, 0xD2	; 210
    1edc:	97 4d       	sbci	r25, 0xD7	; 215
    1ede:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1ee2:	22 ff       	sbrs	r18, 2
    1ee4:	03 c0       	rjmp	.+6      	; 0x1eec <report+0x6a4>
    1ee6:	22 e0       	ldi	r18, 0x02	; 2
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <report+0x6a8>
    1eec:	21 e0       	ldi	r18, 0x01	; 1
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	9f 93       	push	r25
    1ef2:	8f 93       	push	r24
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	85 57       	subi	r24, 0x75	; 117
    1ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    1efa:	9f 93       	push	r25
    1efc:	8f 93       	push	r24
    1efe:	0b 96       	adiw	r24, 0x0b	; 11
    1f00:	9f 93       	push	r25
    1f02:	8f 93       	push	r24
    1f04:	3f 93       	push	r19
    1f06:	2f 93       	push	r18
    1f08:	8d 5d       	subi	r24, 0xDD	; 221
    1f0a:	9e 4f       	sbci	r25, 0xFE	; 254
    1f0c:	9f 93       	push	r25
    1f0e:	8f 93       	push	r24
    1f10:	8e 01       	movw	r16, r28
    1f12:	0f 5f       	subi	r16, 0xFF	; 255
    1f14:	1f 4f       	sbci	r17, 0xFF	; 255
    1f16:	1f 93       	push	r17
    1f18:	0f 93       	push	r16
    1f1a:	0e 94 ab 19 	call	0x3356	; 0x3356 <sprintf>
			checksum_NMEA(outbuf);
    1f1e:	c8 01       	movw	r24, r16
    1f20:	0e 94 62 09 	call	0x12c4	; 0x12c4 <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1f24:	f8 01       	movw	r30, r16
    1f26:	01 90       	ld	r0, Z+
    1f28:	00 20       	and	r0, r0
    1f2a:	e9 f7       	brne	.-6      	; 0x1f26 <report+0x6de>
    1f2c:	31 97       	sbiw	r30, 0x01	; 1
    1f2e:	af 01       	movw	r20, r30
    1f30:	40 1b       	sub	r20, r16
    1f32:	51 0b       	sbc	r21, r17
    1f34:	b8 01       	movw	r22, r16
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <send_USART>
			break;
    1f3c:	cd bf       	out	0x3d, r28	; 61
    1f3e:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1f40:	80 e0       	ldi	r24, 0x00	; 0
			get_VERSION(version);	// Send the specMech version
			get_time(currenttime);
			sprintf(outbuf, format_VER, get_SPECID, currenttime, version, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
    1f42:	01 c0       	rjmp	.+2      	; 0x1f46 <report+0x6fe>

		default:
			return(ERRORPROMPT);
    1f44:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}

	return(GREATERPROMPT);

}
    1f46:	c9 51       	subi	r28, 0x19	; 25
    1f48:	de 4f       	sbci	r29, 0xFE	; 254
    1f4a:	cd bf       	out	0x3d, r28	; 61
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	1f 91       	pop	r17
    1f54:	0f 91       	pop	r16
    1f56:	ff 90       	pop	r15
    1f58:	ef 90       	pop	r14
    1f5a:	df 90       	pop	r13
    1f5c:	cf 90       	pop	r12
    1f5e:	bf 90       	pop	r11
    1f60:	af 90       	pop	r10
    1f62:	9f 90       	pop	r9
    1f64:	8f 90       	pop	r8
    1f66:	7f 90       	pop	r7
    1f68:	6f 90       	pop	r6
    1f6a:	5f 90       	pop	r5
    1f6c:	4f 90       	pop	r4
    1f6e:	3f 90       	pop	r3
    1f70:	2f 90       	pop	r2
    1f72:	08 95       	ret

00001f74 <init_RTC>:
			between interrupts. ticks = 30719 generates an interrupt
			every minute. ticks = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticks)
{
    1f74:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    1f76:	e0 e6       	ldi	r30, 0x60	; 96
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    1f7c:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    1f7e:	88 ed       	ldi	r24, 0xD8	; 216
    1f80:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    1f82:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    1f84:	01 c0       	rjmp	.+2      	; 0x1f88 <init_RTC+0x14>
		asm("nop");
    1f86:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    1f88:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    1f8c:	96 fd       	sbrc	r25, 6
    1f8e:	fb cf       	rjmp	.-10     	; 0x1f86 <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    1f90:	e0 e6       	ldi	r30, 0x60	; 96
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    1f96:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    1f98:	28 ed       	ldi	r18, 0xD8	; 216
    1f9a:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    1f9c:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    1f9e:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    1fa0:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    1fa2:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    1fa4:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    1fa6:	01 c0       	rjmp	.+2      	; 0x1faa <init_RTC+0x36>
		asm("nop");
    1fa8:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    1faa:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    1fae:	91 11       	cpse	r25, r1
    1fb0:	fb cf       	rjmp	.-10     	; 0x1fa8 <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticks;
    1fb2:	e0 e4       	ldi	r30, 0x40	; 64
    1fb4:	f1 e0       	ldi	r31, 0x01	; 1
    1fb6:	42 87       	std	Z+10, r20	; 0x0a
    1fb8:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    1fba:	82 e0       	ldi	r24, 0x02	; 2
    1fbc:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    1fbe:	85 81       	ldd	r24, Z+5	; 0x05
    1fc0:	81 60       	ori	r24, 0x01	; 1
    1fc2:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    1fc4:	81 eb       	ldi	r24, 0xB1	; 177
    1fc6:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    1fc8:	82 81       	ldd	r24, Z+2	; 0x02
    1fca:	81 60       	ori	r24, 0x01	; 1
    1fcc:	82 83       	std	Z+2, r24	; 0x02
    1fce:	08 95       	ret

00001fd0 <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    1fd0:	1f 92       	push	r1
    1fd2:	0f 92       	push	r0
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	0f 92       	push	r0
    1fd8:	11 24       	eor	r1, r1
    1fda:	8f 93       	push	r24

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>
	toggle_LED;						// Defined in led.c
    1fe2:	80 e2       	ldi	r24, 0x20	; 32
    1fe4:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>

}
    1fe8:	8f 91       	pop	r24
    1fea:	0f 90       	pop	r0
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	0f 90       	pop	r0
    1ff0:	1f 90       	pop	r1
    1ff2:	18 95       	reti

00001ff4 <set>:
	Returns:
		GREATERPROMPT on success
		ERRORPROMPT if an invalid object was requested.
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    1ff4:	cf 93       	push	r28
    1ff6:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	24 e3       	ldi	r18, 0x34	; 52
    1ffc:	28 9f       	mul	r18, r24
    1ffe:	f0 01       	movw	r30, r0
    2000:	29 9f       	mul	r18, r25
    2002:	f0 0d       	add	r31, r0
    2004:	11 24       	eor	r1, r1
    2006:	ed 5f       	subi	r30, 0xFD	; 253
    2008:	f7 4d       	sbci	r31, 0xD7	; 215
    200a:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    200c:	24 37       	cpi	r18, 0x74	; 116
    200e:	e9 f4       	brne	.+58     	; 0x204a <set+0x56>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    2010:	24 e3       	ldi	r18, 0x34	; 52
    2012:	28 9f       	mul	r18, r24
    2014:	e0 01       	movw	r28, r0
    2016:	29 9f       	mul	r18, r25
    2018:	d0 0d       	add	r29, r0
    201a:	11 24       	eor	r1, r1
    201c:	cb 5f       	subi	r28, 0xFB	; 251
    201e:	d7 4d       	sbci	r29, 0xD7	; 215
    2020:	fe 01       	movw	r30, r28
    2022:	01 90       	ld	r0, Z+
    2024:	00 20       	and	r0, r0
    2026:	e9 f7       	brne	.-6      	; 0x2022 <set+0x2e>
    2028:	31 97       	sbiw	r30, 0x01	; 1
    202a:	ec 1b       	sub	r30, r28
    202c:	fd 0b       	sbc	r31, r29
    202e:	73 97       	sbiw	r30, 0x13	; 19
    2030:	71 f4       	brne	.+28     	; 0x204e <set+0x5a>
				return(ERRORPROMPT);
			}
			put_time(pcmd[cstack].cvalue);
    2032:	ce 01       	movw	r24, r28
    2034:	0e 94 ba 05 	call	0xb74	; 0xb74 <put_time>
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    2038:	24 e1       	ldi	r18, 0x14	; 20
    203a:	ae 01       	movw	r20, r28
    203c:	60 e0       	ldi	r22, 0x00	; 0
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	80 ea       	ldi	r24, 0xA0	; 160
    2042:	0e 94 5e 06 	call	0xcbc	; 0xcbc <write_FRAM>
			break;

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	03 c0       	rjmp	.+6      	; 0x2050 <set+0x5c>
			put_time(pcmd[cstack].cvalue);
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			return(ERRORPROMPT);
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	01 c0       	rjmp	.+2      	; 0x2050 <set+0x5c>
	object = pcmd[cstack].cobject;

	switch(object) {
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
				return(ERRORPROMPT);
    204e:	82 e0       	ldi	r24, 0x02	; 2

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
}
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	08 95       	ret

00002056 <init_SPECID>:
	pullup. Must be called AFTER init_PORTS().
------------------------------------------------------------------------------*/
void init_SPECID(void)
{

	PORTF.PIN2CTRL &= ~PORT_PULLUPEN_bm;	// Remove pullup
    2056:	e0 ea       	ldi	r30, 0xA0	; 160
    2058:	f4 e0       	ldi	r31, 0x04	; 4
    205a:	82 89       	ldd	r24, Z+18	; 0x12
    205c:	87 7f       	andi	r24, 0xF7	; 247
    205e:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.DIRCLR = PIN2_bm;					// Set as input
    2060:	84 e0       	ldi	r24, 0x04	; 4
    2062:	82 83       	std	Z+2, r24	; 0x02
    2064:	08 95       	ret

00002066 <get_temperature>:
float get_temperature(uint8_t sensor)
{

	float temperature;

	switch (sensor) {
    2066:	83 30       	cpi	r24, 0x03	; 3
    2068:	18 f0       	brcs	.+6      	; 0x2070 <get_temperature+0xa>
    206a:	83 30       	cpi	r24, 0x03	; 3
    206c:	21 f0       	breq	.+8      	; 0x2076 <get_temperature+0x10>
    206e:	06 c0       	rjmp	.+12     	; 0x207c <get_temperature+0x16>
		case 0:
		case 1:
		case 2:
			temperature = read_AD590(sensor);
    2070:	0e 94 25 01 	call	0x24a	; 0x24a <read_AD590>
			break;
    2074:	08 95       	ret
		case 3:
			temperature = read_MCP9808();
    2076:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <read_MCP9808>
			break;
    207a:	08 95       	ret
		default:
			temperature = -999.9;
    207c:	6a e9       	ldi	r22, 0x9A	; 154
    207e:	79 ef       	ldi	r23, 0xF9	; 249
    2080:	89 e7       	ldi	r24, 0x79	; 121
    2082:	94 ec       	ldi	r25, 0xC4	; 196
			break;
	}

	return(temperature);

}
    2084:	08 95       	ret

00002086 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    2086:	e0 ea       	ldi	r30, 0xA0	; 160
    2088:	f8 e0       	ldi	r31, 0x08	; 8
    208a:	8b e0       	ldi	r24, 0x0B	; 11
    208c:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    208e:	83 81       	ldd	r24, Z+3	; 0x03
    2090:	81 60       	ori	r24, 0x01	; 1
    2092:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    2094:	85 81       	ldd	r24, Z+5	; 0x05
    2096:	81 60       	ori	r24, 0x01	; 1
    2098:	85 83       	std	Z+5, r24	; 0x05
    209a:	08 95       	ret

0000209c <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    209c:	01 c0       	rjmp	.+2      	; 0x20a0 <read_TWI+0x4>
		asm("nop");								// Should set timer here
    209e:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    20a0:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    20a4:	88 23       	and	r24, r24
    20a6:	dc f7       	brge	.-10     	; 0x209e <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    20a8:	e0 ea       	ldi	r30, 0xA0	; 160
    20aa:	f8 e0       	ldi	r31, 0x08	; 8
    20ac:	84 81       	ldd	r24, Z+4	; 0x04
    20ae:	8b 7f       	andi	r24, 0xFB	; 251
    20b0:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    20b2:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    20b4:	94 81       	ldd	r25, Z+4	; 0x04
    20b6:	92 60       	ori	r25, 0x02	; 2
    20b8:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    20ba:	08 95       	ret

000020bc <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    20bc:	01 c0       	rjmp	.+2      	; 0x20c0 <readlast_TWI+0x4>
		asm("nop");
    20be:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    20c0:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    20c4:	88 23       	and	r24, r24
    20c6:	dc f7       	brge	.-10     	; 0x20be <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    20c8:	e0 ea       	ldi	r30, 0xA0	; 160
    20ca:	f8 e0       	ldi	r31, 0x08	; 8
    20cc:	84 81       	ldd	r24, Z+4	; 0x04
    20ce:	84 60       	ori	r24, 0x04	; 4
    20d0:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    20d2:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    20d4:	08 95       	ret

000020d6 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    20d6:	61 30       	cpi	r22, 0x01	; 1
    20d8:	11 f4       	brne	.+4      	; 0x20de <start_TWI+0x8>
		addr |= 0x01;
    20da:	81 60       	ori	r24, 0x01	; 1
    20dc:	01 c0       	rjmp	.+2      	; 0x20e0 <start_TWI+0xa>
	} else {
		addr &= ~0x01;
    20de:	8e 7f       	andi	r24, 0xFE	; 254
	}

	TWI0.MADDR = addr;							// Start condition
    20e0:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    20e4:	01 c0       	rjmp	.+2      	; 0x20e8 <start_TWI+0x12>
		asm("nop");								// Wait for addr transmission
    20e6:	00 00       	nop
		addr &= ~0x01;
	}

	TWI0.MADDR = addr;							// Start condition

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    20e8:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    20ec:	80 7c       	andi	r24, 0xC0	; 192
    20ee:	d9 f3       	breq	.-10     	; 0x20e6 <start_TWI+0x10>
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    20f0:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    20f4:	82 fd       	sbrc	r24, 2
    20f6:	0c c0       	rjmp	.+24     	; 0x2110 <start_TWI+0x3a>
		return(TWIBUSERR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    20f8:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    20fc:	83 fd       	sbrc	r24, 3
    20fe:	0a c0       	rjmp	.+20     	; 0x2114 <start_TWI+0x3e>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    2100:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2104:	89 2f       	mov	r24, r25
    2106:	80 71       	andi	r24, 0x10	; 16
    2108:	94 ff       	sbrs	r25, 4
    210a:	05 c0       	rjmp	.+10     	; 0x2116 <start_TWI+0x40>
		return(TWINODEVICE);
    210c:	84 e0       	ldi	r24, 0x04	; 4
    210e:	08 95       	ret
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERR);
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    2114:	82 e0       	ldi	r24, 0x02	; 2
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
	} else {									// OK
		return(0);
	}
}
    2116:	08 95       	ret

00002118 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    2118:	87 e0       	ldi	r24, 0x07	; 7
    211a:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    211e:	08 95       	ret

00002120 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    2120:	01 c0       	rjmp	.+2      	; 0x2124 <write_TWI+0x4>
		asm("nop");
    2122:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    2124:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2128:	96 ff       	sbrs	r25, 6
    212a:	fb cf       	rjmp	.-10     	; 0x2122 <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    212c:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    2130:	01 c0       	rjmp	.+2      	; 0x2134 <write_TWI+0x14>
		asm("nop");
    2132:	00 00       	nop
		asm("nop");
	}

	TWI0.MDATA = data;

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    2134:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2138:	86 ff       	sbrs	r24, 6
    213a:	fb cf       	rjmp	.-10     	; 0x2132 <write_TWI+0x12>
		asm("nop");
	}

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    213c:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2140:	89 2f       	mov	r24, r25
    2142:	80 71       	andi	r24, 0x10	; 16
    2144:	94 fd       	sbrc	r25, 4
		return(TWIACKERR);
    2146:	83 e0       	ldi	r24, 0x03	; 3
	} else {
		return(0);
	}

}
    2148:	08 95       	ret

0000214a <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    214a:	e0 e0       	ldi	r30, 0x00	; 0
    214c:	f4 e0       	ldi	r31, 0x04	; 4
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    2152:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    2154:	e0 e0       	ldi	r30, 0x00	; 0
    2156:	f8 e0       	ldi	r31, 0x08	; 8
    2158:	2d e6       	ldi	r18, 0x6D	; 109
    215a:	35 e0       	ldi	r19, 0x05	; 5
    215c:	20 87       	std	Z+8, r18	; 0x08
    215e:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    2160:	95 81       	ldd	r25, Z+5	; 0x05
    2162:	90 68       	ori	r25, 0x80	; 128
    2164:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    2166:	96 81       	ldd	r25, Z+6	; 0x06
    2168:	90 64       	ori	r25, 0x40	; 64
    216a:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART Receiver
    216c:	96 81       	ldd	r25, Z+6	; 0x06
    216e:	90 68       	ori	r25, 0x80	; 128
    2170:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;
    2172:	10 92 95 2b 	sts	0x2B95, r1	; 0x802b95 <send0_buf+0x80>
	send0_buf.tail = 0;
    2176:	10 92 96 2b 	sts	0x2B96, r1	; 0x802b96 <send0_buf+0x81>
	send0_buf.done = YES;
    217a:	80 93 99 2b 	sts	0x2B99, r24	; 0x802b99 <send0_buf+0x84>
	recv0_buf.head = 0;
    217e:	10 92 10 2b 	sts	0x2B10, r1	; 0x802b10 <recv0_buf+0x80>
	recv0_buf.tail = 0;
    2182:	10 92 11 2b 	sts	0x2B11, r1	; 0x802b11 <recv0_buf+0x81>
	recv0_buf.data[0] = '\0';
    2186:	10 92 90 2a 	sts	0x2A90, r1	; 0x802a90 <recv0_buf>
	recv0_buf.done = NO;
    218a:	10 92 14 2b 	sts	0x2B14, r1	; 0x802b14 <recv0_buf+0x84>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    218e:	e0 e4       	ldi	r30, 0x40	; 64
    2190:	f4 e0       	ldi	r31, 0x04	; 4
    2192:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    2194:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    2196:	e0 e2       	ldi	r30, 0x20	; 32
    2198:	f8 e0       	ldi	r31, 0x08	; 8
    219a:	20 87       	std	Z+8, r18	; 0x08
    219c:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLB |= USART_TXEN_bm;
    219e:	96 81       	ldd	r25, Z+6	; 0x06
    21a0:	90 64       	ori	r25, 0x40	; 64
    21a2:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;
    21a4:	96 81       	ldd	r25, Z+6	; 0x06
    21a6:	90 68       	ori	r25, 0x80	; 128
    21a8:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.done = YES;
    21aa:	80 93 28 2d 	sts	0x2D28, r24	; 0x802d28 <send1_buf+0x84>
	recv1_buf.done = NO;
    21ae:	10 92 8f 2a 	sts	0x2A8F, r1	; 0x802a8f <recv1_buf+0x84>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    21b2:	e0 e2       	ldi	r30, 0x20	; 32
    21b4:	f4 e0       	ldi	r31, 0x04	; 4
    21b6:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    21b8:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    21ba:	e0 e6       	ldi	r30, 0x60	; 96
    21bc:	f8 e0       	ldi	r31, 0x08	; 8
    21be:	20 87       	std	Z+8, r18	; 0x08
    21c0:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    21c2:	96 81       	ldd	r25, Z+6	; 0x06
    21c4:	90 64       	ori	r25, 0x40	; 64
    21c6:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    21c8:	96 81       	ldd	r25, Z+6	; 0x06
    21ca:	90 68       	ori	r25, 0x80	; 128
    21cc:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    21ce:	80 93 a3 2c 	sts	0x2CA3, r24	; 0x802ca3 <send3_buf+0x84>
	recv3_buf.done = NO;
    21d2:	10 92 1e 2c 	sts	0x2C1E, r1	; 0x802c1e <recv3_buf+0x84>
    21d6:	08 95       	ret

000021d8 <send_USART>:
		port - The USARTn port (0, 1, or 3)
		data - Contains the data to send
		nbytes - Number of bytes to send
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    21d8:	fb 01       	movw	r30, r22

	uint8_t i;

	switch (port) {
    21da:	81 30       	cpi	r24, 0x01	; 1
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <send_USART+0x8>
    21de:	40 c0       	rjmp	.+128    	; 0x2260 <send_USART+0x88>
    21e0:	e8 f0       	brcs	.+58     	; 0x221c <send_USART+0x44>
    21e2:	83 30       	cpi	r24, 0x03	; 3
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <send_USART+0x10>
    21e6:	5e c0       	rjmp	.+188    	; 0x22a4 <send_USART+0xcc>
    21e8:	08 95       	ret
		case 0:
			for (i = 0; i < nbytes; i++) {
				send0_buf.data[send0_buf.head] = *data++;
    21ea:	80 91 95 2b 	lds	r24, 0x2B95	; 0x802b95 <send0_buf+0x80>
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	bf 01       	movw	r22, r30
    21f2:	6f 5f       	subi	r22, 0xFF	; 255
    21f4:	7f 4f       	sbci	r23, 0xFF	; 255
    21f6:	30 81       	ld	r19, Z
    21f8:	fc 01       	movw	r30, r24
    21fa:	eb 5e       	subi	r30, 0xEB	; 235
    21fc:	f4 4d       	sbci	r31, 0xD4	; 212
    21fe:	30 83       	st	Z, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    2200:	01 96       	adiw	r24, 0x01	; 1
    2202:	8f 77       	andi	r24, 0x7F	; 127
    2204:	90 78       	andi	r25, 0x80	; 128
    2206:	99 23       	and	r25, r25
    2208:	24 f4       	brge	.+8      	; 0x2212 <send_USART+0x3a>
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	80 68       	ori	r24, 0x80	; 128
    220e:	9f 6f       	ori	r25, 0xFF	; 255
    2210:	01 96       	adiw	r24, 0x01	; 1
    2212:	80 93 95 2b 	sts	0x2B95, r24	; 0x802b95 <send0_buf+0x80>

	uint8_t i;

	switch (port) {
		case 0:
			for (i = 0; i < nbytes; i++) {
    2216:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    2218:	fb 01       	movw	r30, r22
    221a:	01 c0       	rjmp	.+2      	; 0x221e <send_USART+0x46>
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{

	uint8_t i;

	switch (port) {
    221c:	20 e0       	ldi	r18, 0x00	; 0
		case 0:
			for (i = 0; i < nbytes; i++) {
    221e:	24 17       	cp	r18, r20
    2220:	20 f3       	brcs	.-56     	; 0x21ea <send_USART+0x12>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    2222:	e0 e0       	ldi	r30, 0x00	; 0
    2224:	f8 e0       	ldi	r31, 0x08	; 8
    2226:	85 81       	ldd	r24, Z+5	; 0x05
    2228:	80 62       	ori	r24, 0x20	; 32
    222a:	85 83       	std	Z+5, r24	; 0x05
			break;
    222c:	08 95       	ret

		case 1:
			for (i = 0; i < nbytes; i++) {
				send1_buf.data[send1_buf.head] = *data++;
    222e:	80 91 24 2d 	lds	r24, 0x2D24	; 0x802d24 <send1_buf+0x80>
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	bf 01       	movw	r22, r30
    2236:	6f 5f       	subi	r22, 0xFF	; 255
    2238:	7f 4f       	sbci	r23, 0xFF	; 255
    223a:	30 81       	ld	r19, Z
    223c:	fc 01       	movw	r30, r24
    223e:	ec 55       	subi	r30, 0x5C	; 92
    2240:	f3 4d       	sbci	r31, 0xD3	; 211
    2242:	30 83       	st	Z, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    2244:	01 96       	adiw	r24, 0x01	; 1
    2246:	8f 77       	andi	r24, 0x7F	; 127
    2248:	90 78       	andi	r25, 0x80	; 128
    224a:	99 23       	and	r25, r25
    224c:	24 f4       	brge	.+8      	; 0x2256 <send_USART+0x7e>
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	80 68       	ori	r24, 0x80	; 128
    2252:	9f 6f       	ori	r25, 0xFF	; 255
    2254:	01 96       	adiw	r24, 0x01	; 1
    2256:	80 93 24 2d 	sts	0x2D24, r24	; 0x802d24 <send1_buf+0x80>
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			for (i = 0; i < nbytes; i++) {
    225a:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    225c:	fb 01       	movw	r30, r22
    225e:	01 c0       	rjmp	.+2      	; 0x2262 <send_USART+0x8a>
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{

	uint8_t i;

	switch (port) {
    2260:	20 e0       	ldi	r18, 0x00	; 0
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			for (i = 0; i < nbytes; i++) {
    2262:	24 17       	cp	r18, r20
    2264:	20 f3       	brcs	.-56     	; 0x222e <send_USART+0x56>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    2266:	e0 e2       	ldi	r30, 0x20	; 32
    2268:	f8 e0       	ldi	r31, 0x08	; 8
    226a:	85 81       	ldd	r24, Z+5	; 0x05
    226c:	80 62       	ori	r24, 0x20	; 32
    226e:	85 83       	std	Z+5, r24	; 0x05
			break;
    2270:	08 95       	ret

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    2272:	80 91 9f 2c 	lds	r24, 0x2C9F	; 0x802c9f <send3_buf+0x80>
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	bf 01       	movw	r22, r30
    227a:	6f 5f       	subi	r22, 0xFF	; 255
    227c:	7f 4f       	sbci	r23, 0xFF	; 255
    227e:	30 81       	ld	r19, Z
    2280:	fc 01       	movw	r30, r24
    2282:	e1 5e       	subi	r30, 0xE1	; 225
    2284:	f3 4d       	sbci	r31, 0xD3	; 211
    2286:	30 83       	st	Z, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    2288:	01 96       	adiw	r24, 0x01	; 1
    228a:	8f 77       	andi	r24, 0x7F	; 127
    228c:	90 78       	andi	r25, 0x80	; 128
    228e:	99 23       	and	r25, r25
    2290:	24 f4       	brge	.+8      	; 0x229a <send_USART+0xc2>
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	80 68       	ori	r24, 0x80	; 128
    2296:	9f 6f       	ori	r25, 0xFF	; 255
    2298:	01 96       	adiw	r24, 0x01	; 1
    229a:	80 93 9f 2c 	sts	0x2C9F, r24	; 0x802c9f <send3_buf+0x80>
			}
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    229e:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    22a0:	fb 01       	movw	r30, r22
    22a2:	01 c0       	rjmp	.+2      	; 0x22a6 <send_USART+0xce>
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{

	uint8_t i;

	switch (port) {
    22a4:	20 e0       	ldi	r18, 0x00	; 0
			}
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    22a6:	24 17       	cp	r18, r20
    22a8:	20 f3       	brcs	.-56     	; 0x2272 <send_USART+0x9a>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    22aa:	e0 e6       	ldi	r30, 0x60	; 96
    22ac:	f8 e0       	ldi	r31, 0x08	; 8
    22ae:	85 81       	ldd	r24, Z+5	; 0x05
    22b0:	80 62       	ori	r24, 0x20	; 32
    22b2:	85 83       	std	Z+5, r24	; 0x05
    22b4:	08 95       	ret

000022b6 <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    22b6:	1f 92       	push	r1
    22b8:	0f 92       	push	r0
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	0f 92       	push	r0
    22be:	11 24       	eor	r1, r1
    22c0:	8f 93       	push	r24
    22c2:	9f 93       	push	r25
    22c4:	ef 93       	push	r30
    22c6:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    22c8:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if ((char) c == '\r') {
    22cc:	8d 30       	cpi	r24, 0x0D	; 13
    22ce:	51 f4       	brne	.+20     	; 0x22e4 <__vector_17+0x2e>
		recv0_buf.done = YES;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	80 93 14 2b 	sts	0x2B14, r24	; 0x802b14 <recv0_buf+0x84>
		recv0_buf.data[recv0_buf.head] = '\0';
    22d6:	e0 91 10 2b 	lds	r30, 0x2B10	; 0x802b10 <recv0_buf+0x80>
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	e0 57       	subi	r30, 0x70	; 112
    22de:	f5 4d       	sbci	r31, 0xD5	; 213
    22e0:	10 82       	st	Z, r1
    22e2:	06 c0       	rjmp	.+12     	; 0x22f0 <__vector_17+0x3a>
	} else {
		recv0_buf.data[recv0_buf.head] = c;
    22e4:	e0 91 10 2b 	lds	r30, 0x2B10	; 0x802b10 <recv0_buf+0x80>
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	e0 57       	subi	r30, 0x70	; 112
    22ec:	f5 4d       	sbci	r31, 0xD5	; 213
    22ee:	80 83       	st	Z, r24
	}
	recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    22f0:	80 91 10 2b 	lds	r24, 0x2B10	; 0x802b10 <recv0_buf+0x80>
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	01 96       	adiw	r24, 0x01	; 1
    22f8:	8f 77       	andi	r24, 0x7F	; 127
    22fa:	90 78       	andi	r25, 0x80	; 128
    22fc:	99 23       	and	r25, r25
    22fe:	24 f4       	brge	.+8      	; 0x2308 <__vector_17+0x52>
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	80 68       	ori	r24, 0x80	; 128
    2304:	9f 6f       	ori	r25, 0xFF	; 255
    2306:	01 96       	adiw	r24, 0x01	; 1
    2308:	80 93 10 2b 	sts	0x2B10, r24	; 0x802b10 <recv0_buf+0x80>

}
    230c:	ff 91       	pop	r31
    230e:	ef 91       	pop	r30
    2310:	9f 91       	pop	r25
    2312:	8f 91       	pop	r24
    2314:	0f 90       	pop	r0
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	0f 90       	pop	r0
    231a:	1f 90       	pop	r1
    231c:	18 95       	reti

0000231e <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    231e:	1f 92       	push	r1
    2320:	0f 92       	push	r0
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	0f 92       	push	r0
    2326:	11 24       	eor	r1, r1
    2328:	8f 93       	push	r24
    232a:	9f 93       	push	r25
    232c:	ef 93       	push	r30
    232e:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2330:	e0 e0       	ldi	r30, 0x00	; 0
    2332:	f8 e0       	ldi	r31, 0x08	; 8
    2334:	85 81       	ldd	r24, Z+5	; 0x05
    2336:	8f 7d       	andi	r24, 0xDF	; 223
    2338:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    233a:	80 91 95 2b 	lds	r24, 0x2B95	; 0x802b95 <send0_buf+0x80>
    233e:	e0 91 96 2b 	lds	r30, 0x2B96	; 0x802b96 <send0_buf+0x81>
    2342:	8e 17       	cp	r24, r30
    2344:	81 f0       	breq	.+32     	; 0x2366 <__vector_18+0x48>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	8e 0f       	add	r24, r30
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	eb 5e       	subi	r30, 0xEB	; 235
    234e:	f4 4d       	sbci	r31, 0xD4	; 212
    2350:	90 81       	ld	r25, Z
    2352:	e0 e0       	ldi	r30, 0x00	; 0
    2354:	f8 e0       	ldi	r31, 0x08	; 8
    2356:	92 83       	std	Z+2, r25	; 0x02
		send0_buf.tail %= BUFSIZE;
    2358:	8f 77       	andi	r24, 0x7F	; 127
    235a:	80 93 96 2b 	sts	0x2B96, r24	; 0x802b96 <send0_buf+0x81>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    235e:	85 81       	ldd	r24, Z+5	; 0x05
    2360:	80 62       	ori	r24, 0x20	; 32
    2362:	85 83       	std	Z+5, r24	; 0x05
    2364:	03 c0       	rjmp	.+6      	; 0x236c <__vector_18+0x4e>
	} else {
		send0_buf.done = YES;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	80 93 99 2b 	sts	0x2B99, r24	; 0x802b99 <send0_buf+0x84>
	}

}
    236c:	ff 91       	pop	r31
    236e:	ef 91       	pop	r30
    2370:	9f 91       	pop	r25
    2372:	8f 91       	pop	r24
    2374:	0f 90       	pop	r0
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	0f 90       	pop	r0
    237a:	1f 90       	pop	r1
    237c:	18 95       	reti

0000237e <__vector_26>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    237e:	1f 92       	push	r1
    2380:	0f 92       	push	r0
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	0f 92       	push	r0
    2386:	11 24       	eor	r1, r1
    2388:	8f 93       	push	r24
    238a:	9f 93       	push	r25
    238c:	af 93       	push	r26
    238e:	bf 93       	push	r27
    2390:	ef 93       	push	r30
    2392:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    2394:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
	if (((char) c == '\r') || (recv1_buf.nxfrd >= (BUFSIZE-1))) {
    2398:	8d 30       	cpi	r24, 0x0D	; 13
    239a:	21 f0       	breq	.+8      	; 0x23a4 <__vector_26+0x26>
    239c:	e0 91 8e 2a 	lds	r30, 0x2A8E	; 0x802a8e <recv1_buf+0x83>
    23a0:	ef 37       	cpi	r30, 0x7F	; 127
    23a2:	78 f0       	brcs	.+30     	; 0x23c2 <__vector_26+0x44>
		recv1_buf.done = YES;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	80 93 8f 2a 	sts	0x2A8F, r24	; 0x802a8f <recv1_buf+0x84>
		recv1_buf.data[recv1_buf.nxfrd] = 0;	// String terminator
    23aa:	ae e8       	ldi	r26, 0x8E	; 142
    23ac:	ba e2       	ldi	r27, 0x2A	; 42
    23ae:	8c 91       	ld	r24, X
    23b0:	e8 2f       	mov	r30, r24
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	e5 5f       	subi	r30, 0xF5	; 245
    23b6:	f5 4d       	sbci	r31, 0xD5	; 213
    23b8:	10 82       	st	Z, r1
		recv1_buf.nbytes = recv1_buf.nxfrd;
    23ba:	80 93 8d 2a 	sts	0x2A8D, r24	; 0x802a8d <recv1_buf+0x82>
		recv1_buf.nxfrd = 0;
    23be:	1c 92       	st	X, r1
		return;
    23c0:	08 c0       	rjmp	.+16     	; 0x23d2 <__vector_26+0x54>
	} else {
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    23c2:	91 e0       	ldi	r25, 0x01	; 1
    23c4:	9e 0f       	add	r25, r30
    23c6:	90 93 8e 2a 	sts	0x2A8E, r25	; 0x802a8e <recv1_buf+0x83>
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	e5 5f       	subi	r30, 0xF5	; 245
    23ce:	f5 4d       	sbci	r31, 0xD5	; 213
    23d0:	80 83       	st	Z, r24
	}

}
    23d2:	ff 91       	pop	r31
    23d4:	ef 91       	pop	r30
    23d6:	bf 91       	pop	r27
    23d8:	af 91       	pop	r26
    23da:	9f 91       	pop	r25
    23dc:	8f 91       	pop	r24
    23de:	0f 90       	pop	r0
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	0f 90       	pop	r0
    23e4:	1f 90       	pop	r1
    23e6:	18 95       	reti

000023e8 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    23e8:	1f 92       	push	r1
    23ea:	0f 92       	push	r0
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	0f 92       	push	r0
    23f0:	11 24       	eor	r1, r1
    23f2:	8f 93       	push	r24
    23f4:	9f 93       	push	r25
    23f6:	af 93       	push	r26
    23f8:	bf 93       	push	r27
    23fa:	ef 93       	push	r30
    23fc:	ff 93       	push	r31

	USART1.TXDATAL = send1_buf.data[send1_buf.nxfrd++];
    23fe:	a7 e2       	ldi	r26, 0x27	; 39
    2400:	bd e2       	ldi	r27, 0x2D	; 45
    2402:	ec 91       	ld	r30, X
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	8e 0f       	add	r24, r30
    2408:	8c 93       	st	X, r24
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	ec 55       	subi	r30, 0x5C	; 92
    240e:	f3 4d       	sbci	r31, 0xD3	; 211
    2410:	90 81       	ld	r25, Z
    2412:	90 93 22 08 	sts	0x0822, r25	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
	if (send1_buf.nxfrd >= send1_buf.nbytes) {
    2416:	90 91 26 2d 	lds	r25, 0x2D26	; 0x802d26 <send1_buf+0x82>
    241a:	89 17       	cp	r24, r25
    241c:	40 f0       	brcs	.+16     	; 0x242e <__vector_27+0x46>
		USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    241e:	e0 e2       	ldi	r30, 0x20	; 32
    2420:	f8 e0       	ldi	r31, 0x08	; 8
    2422:	85 81       	ldd	r24, Z+5	; 0x05
    2424:	8f 7d       	andi	r24, 0xDF	; 223
    2426:	85 83       	std	Z+5, r24	; 0x05
		send1_buf.done = YES;
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	80 93 28 2d 	sts	0x2D28, r24	; 0x802d28 <send1_buf+0x84>
	}

}
    242e:	ff 91       	pop	r31
    2430:	ef 91       	pop	r30
    2432:	bf 91       	pop	r27
    2434:	af 91       	pop	r26
    2436:	9f 91       	pop	r25
    2438:	8f 91       	pop	r24
    243a:	0f 90       	pop	r0
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	0f 90       	pop	r0
    2440:	1f 90       	pop	r1
    2442:	18 95       	reti

00002444 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    2444:	1f 92       	push	r1
    2446:	0f 92       	push	r0
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	0f 92       	push	r0
    244c:	11 24       	eor	r1, r1
    244e:	8f 93       	push	r24
    2450:	9f 93       	push	r25
    2452:	af 93       	push	r26
    2454:	bf 93       	push	r27
    2456:	ef 93       	push	r30
    2458:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    245a:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    245e:	8d 30       	cpi	r24, 0x0D	; 13
    2460:	21 f0       	breq	.+8      	; 0x246a <__vector_37+0x26>
    2462:	e0 91 1d 2c 	lds	r30, 0x2C1D	; 0x802c1d <recv3_buf+0x83>
    2466:	ef 37       	cpi	r30, 0x7F	; 127
    2468:	78 f0       	brcs	.+30     	; 0x2488 <__vector_37+0x44>
		recv3_buf.done = YES;
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	80 93 1e 2c 	sts	0x2C1E, r24	; 0x802c1e <recv3_buf+0x84>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    2470:	ad e1       	ldi	r26, 0x1D	; 29
    2472:	bc e2       	ldi	r27, 0x2C	; 44
    2474:	8c 91       	ld	r24, X
    2476:	e8 2f       	mov	r30, r24
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	e6 56       	subi	r30, 0x66	; 102
    247c:	f4 4d       	sbci	r31, 0xD4	; 212
    247e:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    2480:	80 93 1c 2c 	sts	0x2C1C, r24	; 0x802c1c <recv3_buf+0x82>
		recv3_buf.nxfrd = 0;
    2484:	1c 92       	st	X, r1
		return;
    2486:	08 c0       	rjmp	.+16     	; 0x2498 <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    2488:	91 e0       	ldi	r25, 0x01	; 1
    248a:	9e 0f       	add	r25, r30
    248c:	90 93 1d 2c 	sts	0x2C1D, r25	; 0x802c1d <recv3_buf+0x83>
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	e6 56       	subi	r30, 0x66	; 102
    2494:	f4 4d       	sbci	r31, 0xD4	; 212
    2496:	80 83       	st	Z, r24
	}

}
    2498:	ff 91       	pop	r31
    249a:	ef 91       	pop	r30
    249c:	bf 91       	pop	r27
    249e:	af 91       	pop	r26
    24a0:	9f 91       	pop	r25
    24a2:	8f 91       	pop	r24
    24a4:	0f 90       	pop	r0
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	0f 90       	pop	r0
    24aa:	1f 90       	pop	r1
    24ac:	18 95       	reti

000024ae <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    24ae:	1f 92       	push	r1
    24b0:	0f 92       	push	r0
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	0f 92       	push	r0
    24b6:	11 24       	eor	r1, r1
    24b8:	8f 93       	push	r24
    24ba:	9f 93       	push	r25
    24bc:	af 93       	push	r26
    24be:	bf 93       	push	r27
    24c0:	ef 93       	push	r30
    24c2:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    24c4:	a2 ea       	ldi	r26, 0xA2	; 162
    24c6:	bc e2       	ldi	r27, 0x2C	; 44
    24c8:	ec 91       	ld	r30, X
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	8e 0f       	add	r24, r30
    24ce:	8c 93       	st	X, r24
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	e1 5e       	subi	r30, 0xE1	; 225
    24d4:	f3 4d       	sbci	r31, 0xD3	; 211
    24d6:	90 81       	ld	r25, Z
    24d8:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    24dc:	90 91 a1 2c 	lds	r25, 0x2CA1	; 0x802ca1 <send3_buf+0x82>
    24e0:	89 17       	cp	r24, r25
    24e2:	40 f0       	brcs	.+16     	; 0x24f4 <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    24e4:	e0 e6       	ldi	r30, 0x60	; 96
    24e6:	f8 e0       	ldi	r31, 0x08	; 8
    24e8:	85 81       	ldd	r24, Z+5	; 0x05
    24ea:	8f 7d       	andi	r24, 0xDF	; 223
    24ec:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	80 93 a3 2c 	sts	0x2CA3, r24	; 0x802ca3 <send3_buf+0x84>
	}

}
    24f4:	ff 91       	pop	r31
    24f6:	ef 91       	pop	r30
    24f8:	bf 91       	pop	r27
    24fa:	af 91       	pop	r26
    24fc:	9f 91       	pop	r25
    24fe:	8f 91       	pop	r24
    2500:	0f 90       	pop	r0
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	0f 90       	pop	r0
    2506:	1f 90       	pop	r1
    2508:	18 95       	reti

0000250a <reboot>:
#include "globals.h"

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
    250a:	88 ed       	ldi	r24, 0xD8	; 216
    250c:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    2514:	08 95       	ret

00002516 <__subsf3>:
    2516:	50 58       	subi	r21, 0x80	; 128

00002518 <__addsf3>:
    2518:	bb 27       	eor	r27, r27
    251a:	aa 27       	eor	r26, r26
    251c:	0e 94 a3 12 	call	0x2546	; 0x2546 <__addsf3x>
    2520:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__fp_round>
    2524:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__fp_pscA>
    2528:	38 f0       	brcs	.+14     	; 0x2538 <__addsf3+0x20>
    252a:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__fp_pscB>
    252e:	20 f0       	brcs	.+8      	; 0x2538 <__addsf3+0x20>
    2530:	39 f4       	brne	.+14     	; 0x2540 <__addsf3+0x28>
    2532:	9f 3f       	cpi	r25, 0xFF	; 255
    2534:	19 f4       	brne	.+6      	; 0x253c <__addsf3+0x24>
    2536:	26 f4       	brtc	.+8      	; 0x2540 <__addsf3+0x28>
    2538:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__fp_nan>
    253c:	0e f4       	brtc	.+2      	; 0x2540 <__addsf3+0x28>
    253e:	e0 95       	com	r30
    2540:	e7 fb       	bst	r30, 7
    2542:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__fp_inf>

00002546 <__addsf3x>:
    2546:	e9 2f       	mov	r30, r25
    2548:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <__fp_split3>
    254c:	58 f3       	brcs	.-42     	; 0x2524 <__addsf3+0xc>
    254e:	ba 17       	cp	r27, r26
    2550:	62 07       	cpc	r22, r18
    2552:	73 07       	cpc	r23, r19
    2554:	84 07       	cpc	r24, r20
    2556:	95 07       	cpc	r25, r21
    2558:	20 f0       	brcs	.+8      	; 0x2562 <__addsf3x+0x1c>
    255a:	79 f4       	brne	.+30     	; 0x257a <__addsf3x+0x34>
    255c:	a6 f5       	brtc	.+104    	; 0x25c6 <__addsf3x+0x80>
    255e:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__fp_zero>
    2562:	0e f4       	brtc	.+2      	; 0x2566 <__addsf3x+0x20>
    2564:	e0 95       	com	r30
    2566:	0b 2e       	mov	r0, r27
    2568:	ba 2f       	mov	r27, r26
    256a:	a0 2d       	mov	r26, r0
    256c:	0b 01       	movw	r0, r22
    256e:	b9 01       	movw	r22, r18
    2570:	90 01       	movw	r18, r0
    2572:	0c 01       	movw	r0, r24
    2574:	ca 01       	movw	r24, r20
    2576:	a0 01       	movw	r20, r0
    2578:	11 24       	eor	r1, r1
    257a:	ff 27       	eor	r31, r31
    257c:	59 1b       	sub	r21, r25
    257e:	99 f0       	breq	.+38     	; 0x25a6 <__addsf3x+0x60>
    2580:	59 3f       	cpi	r21, 0xF9	; 249
    2582:	50 f4       	brcc	.+20     	; 0x2598 <__addsf3x+0x52>
    2584:	50 3e       	cpi	r21, 0xE0	; 224
    2586:	68 f1       	brcs	.+90     	; 0x25e2 <__addsf3x+0x9c>
    2588:	1a 16       	cp	r1, r26
    258a:	f0 40       	sbci	r31, 0x00	; 0
    258c:	a2 2f       	mov	r26, r18
    258e:	23 2f       	mov	r18, r19
    2590:	34 2f       	mov	r19, r20
    2592:	44 27       	eor	r20, r20
    2594:	58 5f       	subi	r21, 0xF8	; 248
    2596:	f3 cf       	rjmp	.-26     	; 0x257e <__addsf3x+0x38>
    2598:	46 95       	lsr	r20
    259a:	37 95       	ror	r19
    259c:	27 95       	ror	r18
    259e:	a7 95       	ror	r26
    25a0:	f0 40       	sbci	r31, 0x00	; 0
    25a2:	53 95       	inc	r21
    25a4:	c9 f7       	brne	.-14     	; 0x2598 <__addsf3x+0x52>
    25a6:	7e f4       	brtc	.+30     	; 0x25c6 <__addsf3x+0x80>
    25a8:	1f 16       	cp	r1, r31
    25aa:	ba 0b       	sbc	r27, r26
    25ac:	62 0b       	sbc	r22, r18
    25ae:	73 0b       	sbc	r23, r19
    25b0:	84 0b       	sbc	r24, r20
    25b2:	ba f0       	brmi	.+46     	; 0x25e2 <__addsf3x+0x9c>
    25b4:	91 50       	subi	r25, 0x01	; 1
    25b6:	a1 f0       	breq	.+40     	; 0x25e0 <__addsf3x+0x9a>
    25b8:	ff 0f       	add	r31, r31
    25ba:	bb 1f       	adc	r27, r27
    25bc:	66 1f       	adc	r22, r22
    25be:	77 1f       	adc	r23, r23
    25c0:	88 1f       	adc	r24, r24
    25c2:	c2 f7       	brpl	.-16     	; 0x25b4 <__addsf3x+0x6e>
    25c4:	0e c0       	rjmp	.+28     	; 0x25e2 <__addsf3x+0x9c>
    25c6:	ba 0f       	add	r27, r26
    25c8:	62 1f       	adc	r22, r18
    25ca:	73 1f       	adc	r23, r19
    25cc:	84 1f       	adc	r24, r20
    25ce:	48 f4       	brcc	.+18     	; 0x25e2 <__addsf3x+0x9c>
    25d0:	87 95       	ror	r24
    25d2:	77 95       	ror	r23
    25d4:	67 95       	ror	r22
    25d6:	b7 95       	ror	r27
    25d8:	f7 95       	ror	r31
    25da:	9e 3f       	cpi	r25, 0xFE	; 254
    25dc:	08 f0       	brcs	.+2      	; 0x25e0 <__addsf3x+0x9a>
    25de:	b0 cf       	rjmp	.-160    	; 0x2540 <__addsf3+0x28>
    25e0:	93 95       	inc	r25
    25e2:	88 0f       	add	r24, r24
    25e4:	08 f0       	brcs	.+2      	; 0x25e8 <__addsf3x+0xa2>
    25e6:	99 27       	eor	r25, r25
    25e8:	ee 0f       	add	r30, r30
    25ea:	97 95       	ror	r25
    25ec:	87 95       	ror	r24
    25ee:	08 95       	ret

000025f0 <__cmpsf2>:
    25f0:	0e 94 ac 13 	call	0x2758	; 0x2758 <__fp_cmp>
    25f4:	08 f4       	brcc	.+2      	; 0x25f8 <__cmpsf2+0x8>
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	08 95       	ret

000025fa <__divsf3>:
    25fa:	0e 94 11 13 	call	0x2622	; 0x2622 <__divsf3x>
    25fe:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__fp_round>
    2602:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__fp_pscB>
    2606:	58 f0       	brcs	.+22     	; 0x261e <__divsf3+0x24>
    2608:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__fp_pscA>
    260c:	40 f0       	brcs	.+16     	; 0x261e <__divsf3+0x24>
    260e:	29 f4       	brne	.+10     	; 0x261a <__divsf3+0x20>
    2610:	5f 3f       	cpi	r21, 0xFF	; 255
    2612:	29 f0       	breq	.+10     	; 0x261e <__divsf3+0x24>
    2614:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__fp_inf>
    2618:	51 11       	cpse	r21, r1
    261a:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__fp_szero>
    261e:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__fp_nan>

00002622 <__divsf3x>:
    2622:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <__fp_split3>
    2626:	68 f3       	brcs	.-38     	; 0x2602 <__divsf3+0x8>

00002628 <__divsf3_pse>:
    2628:	99 23       	and	r25, r25
    262a:	b1 f3       	breq	.-20     	; 0x2618 <__divsf3+0x1e>
    262c:	55 23       	and	r21, r21
    262e:	91 f3       	breq	.-28     	; 0x2614 <__divsf3+0x1a>
    2630:	95 1b       	sub	r25, r21
    2632:	55 0b       	sbc	r21, r21
    2634:	bb 27       	eor	r27, r27
    2636:	aa 27       	eor	r26, r26
    2638:	62 17       	cp	r22, r18
    263a:	73 07       	cpc	r23, r19
    263c:	84 07       	cpc	r24, r20
    263e:	38 f0       	brcs	.+14     	; 0x264e <__divsf3_pse+0x26>
    2640:	9f 5f       	subi	r25, 0xFF	; 255
    2642:	5f 4f       	sbci	r21, 0xFF	; 255
    2644:	22 0f       	add	r18, r18
    2646:	33 1f       	adc	r19, r19
    2648:	44 1f       	adc	r20, r20
    264a:	aa 1f       	adc	r26, r26
    264c:	a9 f3       	breq	.-22     	; 0x2638 <__divsf3_pse+0x10>
    264e:	35 d0       	rcall	.+106    	; 0x26ba <__divsf3_pse+0x92>
    2650:	0e 2e       	mov	r0, r30
    2652:	3a f0       	brmi	.+14     	; 0x2662 <__divsf3_pse+0x3a>
    2654:	e0 e8       	ldi	r30, 0x80	; 128
    2656:	32 d0       	rcall	.+100    	; 0x26bc <__divsf3_pse+0x94>
    2658:	91 50       	subi	r25, 0x01	; 1
    265a:	50 40       	sbci	r21, 0x00	; 0
    265c:	e6 95       	lsr	r30
    265e:	00 1c       	adc	r0, r0
    2660:	ca f7       	brpl	.-14     	; 0x2654 <__divsf3_pse+0x2c>
    2662:	2b d0       	rcall	.+86     	; 0x26ba <__divsf3_pse+0x92>
    2664:	fe 2f       	mov	r31, r30
    2666:	29 d0       	rcall	.+82     	; 0x26ba <__divsf3_pse+0x92>
    2668:	66 0f       	add	r22, r22
    266a:	77 1f       	adc	r23, r23
    266c:	88 1f       	adc	r24, r24
    266e:	bb 1f       	adc	r27, r27
    2670:	26 17       	cp	r18, r22
    2672:	37 07       	cpc	r19, r23
    2674:	48 07       	cpc	r20, r24
    2676:	ab 07       	cpc	r26, r27
    2678:	b0 e8       	ldi	r27, 0x80	; 128
    267a:	09 f0       	breq	.+2      	; 0x267e <__divsf3_pse+0x56>
    267c:	bb 0b       	sbc	r27, r27
    267e:	80 2d       	mov	r24, r0
    2680:	bf 01       	movw	r22, r30
    2682:	ff 27       	eor	r31, r31
    2684:	93 58       	subi	r25, 0x83	; 131
    2686:	5f 4f       	sbci	r21, 0xFF	; 255
    2688:	3a f0       	brmi	.+14     	; 0x2698 <__divsf3_pse+0x70>
    268a:	9e 3f       	cpi	r25, 0xFE	; 254
    268c:	51 05       	cpc	r21, r1
    268e:	78 f0       	brcs	.+30     	; 0x26ae <__divsf3_pse+0x86>
    2690:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__fp_inf>
    2694:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__fp_szero>
    2698:	5f 3f       	cpi	r21, 0xFF	; 255
    269a:	e4 f3       	brlt	.-8      	; 0x2694 <__divsf3_pse+0x6c>
    269c:	98 3e       	cpi	r25, 0xE8	; 232
    269e:	d4 f3       	brlt	.-12     	; 0x2694 <__divsf3_pse+0x6c>
    26a0:	86 95       	lsr	r24
    26a2:	77 95       	ror	r23
    26a4:	67 95       	ror	r22
    26a6:	b7 95       	ror	r27
    26a8:	f7 95       	ror	r31
    26aa:	9f 5f       	subi	r25, 0xFF	; 255
    26ac:	c9 f7       	brne	.-14     	; 0x26a0 <__divsf3_pse+0x78>
    26ae:	88 0f       	add	r24, r24
    26b0:	91 1d       	adc	r25, r1
    26b2:	96 95       	lsr	r25
    26b4:	87 95       	ror	r24
    26b6:	97 f9       	bld	r25, 7
    26b8:	08 95       	ret
    26ba:	e1 e0       	ldi	r30, 0x01	; 1
    26bc:	66 0f       	add	r22, r22
    26be:	77 1f       	adc	r23, r23
    26c0:	88 1f       	adc	r24, r24
    26c2:	bb 1f       	adc	r27, r27
    26c4:	62 17       	cp	r22, r18
    26c6:	73 07       	cpc	r23, r19
    26c8:	84 07       	cpc	r24, r20
    26ca:	ba 07       	cpc	r27, r26
    26cc:	20 f0       	brcs	.+8      	; 0x26d6 <__divsf3_pse+0xae>
    26ce:	62 1b       	sub	r22, r18
    26d0:	73 0b       	sbc	r23, r19
    26d2:	84 0b       	sbc	r24, r20
    26d4:	ba 0b       	sbc	r27, r26
    26d6:	ee 1f       	adc	r30, r30
    26d8:	88 f7       	brcc	.-30     	; 0x26bc <__divsf3_pse+0x94>
    26da:	e0 95       	com	r30
    26dc:	08 95       	ret

000026de <__floatunsisf>:
    26de:	e8 94       	clt
    26e0:	09 c0       	rjmp	.+18     	; 0x26f4 <__floatsisf+0x12>

000026e2 <__floatsisf>:
    26e2:	97 fb       	bst	r25, 7
    26e4:	3e f4       	brtc	.+14     	; 0x26f4 <__floatsisf+0x12>
    26e6:	90 95       	com	r25
    26e8:	80 95       	com	r24
    26ea:	70 95       	com	r23
    26ec:	61 95       	neg	r22
    26ee:	7f 4f       	sbci	r23, 0xFF	; 255
    26f0:	8f 4f       	sbci	r24, 0xFF	; 255
    26f2:	9f 4f       	sbci	r25, 0xFF	; 255
    26f4:	99 23       	and	r25, r25
    26f6:	a9 f0       	breq	.+42     	; 0x2722 <__floatsisf+0x40>
    26f8:	f9 2f       	mov	r31, r25
    26fa:	96 e9       	ldi	r25, 0x96	; 150
    26fc:	bb 27       	eor	r27, r27
    26fe:	93 95       	inc	r25
    2700:	f6 95       	lsr	r31
    2702:	87 95       	ror	r24
    2704:	77 95       	ror	r23
    2706:	67 95       	ror	r22
    2708:	b7 95       	ror	r27
    270a:	f1 11       	cpse	r31, r1
    270c:	f8 cf       	rjmp	.-16     	; 0x26fe <__floatsisf+0x1c>
    270e:	fa f4       	brpl	.+62     	; 0x274e <__floatsisf+0x6c>
    2710:	bb 0f       	add	r27, r27
    2712:	11 f4       	brne	.+4      	; 0x2718 <__floatsisf+0x36>
    2714:	60 ff       	sbrs	r22, 0
    2716:	1b c0       	rjmp	.+54     	; 0x274e <__floatsisf+0x6c>
    2718:	6f 5f       	subi	r22, 0xFF	; 255
    271a:	7f 4f       	sbci	r23, 0xFF	; 255
    271c:	8f 4f       	sbci	r24, 0xFF	; 255
    271e:	9f 4f       	sbci	r25, 0xFF	; 255
    2720:	16 c0       	rjmp	.+44     	; 0x274e <__floatsisf+0x6c>
    2722:	88 23       	and	r24, r24
    2724:	11 f0       	breq	.+4      	; 0x272a <__floatsisf+0x48>
    2726:	96 e9       	ldi	r25, 0x96	; 150
    2728:	11 c0       	rjmp	.+34     	; 0x274c <__floatsisf+0x6a>
    272a:	77 23       	and	r23, r23
    272c:	21 f0       	breq	.+8      	; 0x2736 <__floatsisf+0x54>
    272e:	9e e8       	ldi	r25, 0x8E	; 142
    2730:	87 2f       	mov	r24, r23
    2732:	76 2f       	mov	r23, r22
    2734:	05 c0       	rjmp	.+10     	; 0x2740 <__floatsisf+0x5e>
    2736:	66 23       	and	r22, r22
    2738:	71 f0       	breq	.+28     	; 0x2756 <__floatsisf+0x74>
    273a:	96 e8       	ldi	r25, 0x86	; 134
    273c:	86 2f       	mov	r24, r22
    273e:	70 e0       	ldi	r23, 0x00	; 0
    2740:	60 e0       	ldi	r22, 0x00	; 0
    2742:	2a f0       	brmi	.+10     	; 0x274e <__floatsisf+0x6c>
    2744:	9a 95       	dec	r25
    2746:	66 0f       	add	r22, r22
    2748:	77 1f       	adc	r23, r23
    274a:	88 1f       	adc	r24, r24
    274c:	da f7       	brpl	.-10     	; 0x2744 <__floatsisf+0x62>
    274e:	88 0f       	add	r24, r24
    2750:	96 95       	lsr	r25
    2752:	87 95       	ror	r24
    2754:	97 f9       	bld	r25, 7
    2756:	08 95       	ret

00002758 <__fp_cmp>:
    2758:	99 0f       	add	r25, r25
    275a:	00 08       	sbc	r0, r0
    275c:	55 0f       	add	r21, r21
    275e:	aa 0b       	sbc	r26, r26
    2760:	e0 e8       	ldi	r30, 0x80	; 128
    2762:	fe ef       	ldi	r31, 0xFE	; 254
    2764:	16 16       	cp	r1, r22
    2766:	17 06       	cpc	r1, r23
    2768:	e8 07       	cpc	r30, r24
    276a:	f9 07       	cpc	r31, r25
    276c:	c0 f0       	brcs	.+48     	; 0x279e <__fp_cmp+0x46>
    276e:	12 16       	cp	r1, r18
    2770:	13 06       	cpc	r1, r19
    2772:	e4 07       	cpc	r30, r20
    2774:	f5 07       	cpc	r31, r21
    2776:	98 f0       	brcs	.+38     	; 0x279e <__fp_cmp+0x46>
    2778:	62 1b       	sub	r22, r18
    277a:	73 0b       	sbc	r23, r19
    277c:	84 0b       	sbc	r24, r20
    277e:	95 0b       	sbc	r25, r21
    2780:	39 f4       	brne	.+14     	; 0x2790 <__fp_cmp+0x38>
    2782:	0a 26       	eor	r0, r26
    2784:	61 f0       	breq	.+24     	; 0x279e <__fp_cmp+0x46>
    2786:	23 2b       	or	r18, r19
    2788:	24 2b       	or	r18, r20
    278a:	25 2b       	or	r18, r21
    278c:	21 f4       	brne	.+8      	; 0x2796 <__fp_cmp+0x3e>
    278e:	08 95       	ret
    2790:	0a 26       	eor	r0, r26
    2792:	09 f4       	brne	.+2      	; 0x2796 <__fp_cmp+0x3e>
    2794:	a1 40       	sbci	r26, 0x01	; 1
    2796:	a6 95       	lsr	r26
    2798:	8f ef       	ldi	r24, 0xFF	; 255
    279a:	81 1d       	adc	r24, r1
    279c:	81 1d       	adc	r24, r1
    279e:	08 95       	ret

000027a0 <__fp_inf>:
    27a0:	97 f9       	bld	r25, 7
    27a2:	9f 67       	ori	r25, 0x7F	; 127
    27a4:	80 e8       	ldi	r24, 0x80	; 128
    27a6:	70 e0       	ldi	r23, 0x00	; 0
    27a8:	60 e0       	ldi	r22, 0x00	; 0
    27aa:	08 95       	ret

000027ac <__fp_nan>:
    27ac:	9f ef       	ldi	r25, 0xFF	; 255
    27ae:	80 ec       	ldi	r24, 0xC0	; 192
    27b0:	08 95       	ret

000027b2 <__fp_pscA>:
    27b2:	00 24       	eor	r0, r0
    27b4:	0a 94       	dec	r0
    27b6:	16 16       	cp	r1, r22
    27b8:	17 06       	cpc	r1, r23
    27ba:	18 06       	cpc	r1, r24
    27bc:	09 06       	cpc	r0, r25
    27be:	08 95       	ret

000027c0 <__fp_pscB>:
    27c0:	00 24       	eor	r0, r0
    27c2:	0a 94       	dec	r0
    27c4:	12 16       	cp	r1, r18
    27c6:	13 06       	cpc	r1, r19
    27c8:	14 06       	cpc	r1, r20
    27ca:	05 06       	cpc	r0, r21
    27cc:	08 95       	ret

000027ce <__fp_round>:
    27ce:	09 2e       	mov	r0, r25
    27d0:	03 94       	inc	r0
    27d2:	00 0c       	add	r0, r0
    27d4:	11 f4       	brne	.+4      	; 0x27da <__fp_round+0xc>
    27d6:	88 23       	and	r24, r24
    27d8:	52 f0       	brmi	.+20     	; 0x27ee <__fp_round+0x20>
    27da:	bb 0f       	add	r27, r27
    27dc:	40 f4       	brcc	.+16     	; 0x27ee <__fp_round+0x20>
    27de:	bf 2b       	or	r27, r31
    27e0:	11 f4       	brne	.+4      	; 0x27e6 <__fp_round+0x18>
    27e2:	60 ff       	sbrs	r22, 0
    27e4:	04 c0       	rjmp	.+8      	; 0x27ee <__fp_round+0x20>
    27e6:	6f 5f       	subi	r22, 0xFF	; 255
    27e8:	7f 4f       	sbci	r23, 0xFF	; 255
    27ea:	8f 4f       	sbci	r24, 0xFF	; 255
    27ec:	9f 4f       	sbci	r25, 0xFF	; 255
    27ee:	08 95       	ret

000027f0 <__fp_split3>:
    27f0:	57 fd       	sbrc	r21, 7
    27f2:	90 58       	subi	r25, 0x80	; 128
    27f4:	44 0f       	add	r20, r20
    27f6:	55 1f       	adc	r21, r21
    27f8:	59 f0       	breq	.+22     	; 0x2810 <__fp_splitA+0x10>
    27fa:	5f 3f       	cpi	r21, 0xFF	; 255
    27fc:	71 f0       	breq	.+28     	; 0x281a <__fp_splitA+0x1a>
    27fe:	47 95       	ror	r20

00002800 <__fp_splitA>:
    2800:	88 0f       	add	r24, r24
    2802:	97 fb       	bst	r25, 7
    2804:	99 1f       	adc	r25, r25
    2806:	61 f0       	breq	.+24     	; 0x2820 <__fp_splitA+0x20>
    2808:	9f 3f       	cpi	r25, 0xFF	; 255
    280a:	79 f0       	breq	.+30     	; 0x282a <__fp_splitA+0x2a>
    280c:	87 95       	ror	r24
    280e:	08 95       	ret
    2810:	12 16       	cp	r1, r18
    2812:	13 06       	cpc	r1, r19
    2814:	14 06       	cpc	r1, r20
    2816:	55 1f       	adc	r21, r21
    2818:	f2 cf       	rjmp	.-28     	; 0x27fe <__fp_split3+0xe>
    281a:	46 95       	lsr	r20
    281c:	f1 df       	rcall	.-30     	; 0x2800 <__fp_splitA>
    281e:	08 c0       	rjmp	.+16     	; 0x2830 <__fp_splitA+0x30>
    2820:	16 16       	cp	r1, r22
    2822:	17 06       	cpc	r1, r23
    2824:	18 06       	cpc	r1, r24
    2826:	99 1f       	adc	r25, r25
    2828:	f1 cf       	rjmp	.-30     	; 0x280c <__fp_splitA+0xc>
    282a:	86 95       	lsr	r24
    282c:	71 05       	cpc	r23, r1
    282e:	61 05       	cpc	r22, r1
    2830:	08 94       	sec
    2832:	08 95       	ret

00002834 <__fp_zero>:
    2834:	e8 94       	clt

00002836 <__fp_szero>:
    2836:	bb 27       	eor	r27, r27
    2838:	66 27       	eor	r22, r22
    283a:	77 27       	eor	r23, r23
    283c:	cb 01       	movw	r24, r22
    283e:	97 f9       	bld	r25, 7
    2840:	08 95       	ret

00002842 <__gesf2>:
    2842:	0e 94 ac 13 	call	0x2758	; 0x2758 <__fp_cmp>
    2846:	08 f4       	brcc	.+2      	; 0x284a <__gesf2+0x8>
    2848:	8f ef       	ldi	r24, 0xFF	; 255
    284a:	08 95       	ret

0000284c <__mulsf3>:
    284c:	0e 94 39 14 	call	0x2872	; 0x2872 <__mulsf3x>
    2850:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__fp_round>
    2854:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <__fp_pscA>
    2858:	38 f0       	brcs	.+14     	; 0x2868 <__mulsf3+0x1c>
    285a:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__fp_pscB>
    285e:	20 f0       	brcs	.+8      	; 0x2868 <__mulsf3+0x1c>
    2860:	95 23       	and	r25, r21
    2862:	11 f0       	breq	.+4      	; 0x2868 <__mulsf3+0x1c>
    2864:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__fp_inf>
    2868:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__fp_nan>
    286c:	11 24       	eor	r1, r1
    286e:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__fp_szero>

00002872 <__mulsf3x>:
    2872:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <__fp_split3>
    2876:	70 f3       	brcs	.-36     	; 0x2854 <__mulsf3+0x8>

00002878 <__mulsf3_pse>:
    2878:	95 9f       	mul	r25, r21
    287a:	c1 f3       	breq	.-16     	; 0x286c <__mulsf3+0x20>
    287c:	95 0f       	add	r25, r21
    287e:	50 e0       	ldi	r21, 0x00	; 0
    2880:	55 1f       	adc	r21, r21
    2882:	62 9f       	mul	r22, r18
    2884:	f0 01       	movw	r30, r0
    2886:	72 9f       	mul	r23, r18
    2888:	bb 27       	eor	r27, r27
    288a:	f0 0d       	add	r31, r0
    288c:	b1 1d       	adc	r27, r1
    288e:	63 9f       	mul	r22, r19
    2890:	aa 27       	eor	r26, r26
    2892:	f0 0d       	add	r31, r0
    2894:	b1 1d       	adc	r27, r1
    2896:	aa 1f       	adc	r26, r26
    2898:	64 9f       	mul	r22, r20
    289a:	66 27       	eor	r22, r22
    289c:	b0 0d       	add	r27, r0
    289e:	a1 1d       	adc	r26, r1
    28a0:	66 1f       	adc	r22, r22
    28a2:	82 9f       	mul	r24, r18
    28a4:	22 27       	eor	r18, r18
    28a6:	b0 0d       	add	r27, r0
    28a8:	a1 1d       	adc	r26, r1
    28aa:	62 1f       	adc	r22, r18
    28ac:	73 9f       	mul	r23, r19
    28ae:	b0 0d       	add	r27, r0
    28b0:	a1 1d       	adc	r26, r1
    28b2:	62 1f       	adc	r22, r18
    28b4:	83 9f       	mul	r24, r19
    28b6:	a0 0d       	add	r26, r0
    28b8:	61 1d       	adc	r22, r1
    28ba:	22 1f       	adc	r18, r18
    28bc:	74 9f       	mul	r23, r20
    28be:	33 27       	eor	r19, r19
    28c0:	a0 0d       	add	r26, r0
    28c2:	61 1d       	adc	r22, r1
    28c4:	23 1f       	adc	r18, r19
    28c6:	84 9f       	mul	r24, r20
    28c8:	60 0d       	add	r22, r0
    28ca:	21 1d       	adc	r18, r1
    28cc:	82 2f       	mov	r24, r18
    28ce:	76 2f       	mov	r23, r22
    28d0:	6a 2f       	mov	r22, r26
    28d2:	11 24       	eor	r1, r1
    28d4:	9f 57       	subi	r25, 0x7F	; 127
    28d6:	50 40       	sbci	r21, 0x00	; 0
    28d8:	9a f0       	brmi	.+38     	; 0x2900 <__mulsf3_pse+0x88>
    28da:	f1 f0       	breq	.+60     	; 0x2918 <__mulsf3_pse+0xa0>
    28dc:	88 23       	and	r24, r24
    28de:	4a f0       	brmi	.+18     	; 0x28f2 <__mulsf3_pse+0x7a>
    28e0:	ee 0f       	add	r30, r30
    28e2:	ff 1f       	adc	r31, r31
    28e4:	bb 1f       	adc	r27, r27
    28e6:	66 1f       	adc	r22, r22
    28e8:	77 1f       	adc	r23, r23
    28ea:	88 1f       	adc	r24, r24
    28ec:	91 50       	subi	r25, 0x01	; 1
    28ee:	50 40       	sbci	r21, 0x00	; 0
    28f0:	a9 f7       	brne	.-22     	; 0x28dc <__mulsf3_pse+0x64>
    28f2:	9e 3f       	cpi	r25, 0xFE	; 254
    28f4:	51 05       	cpc	r21, r1
    28f6:	80 f0       	brcs	.+32     	; 0x2918 <__mulsf3_pse+0xa0>
    28f8:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__fp_inf>
    28fc:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__fp_szero>
    2900:	5f 3f       	cpi	r21, 0xFF	; 255
    2902:	e4 f3       	brlt	.-8      	; 0x28fc <__mulsf3_pse+0x84>
    2904:	98 3e       	cpi	r25, 0xE8	; 232
    2906:	d4 f3       	brlt	.-12     	; 0x28fc <__mulsf3_pse+0x84>
    2908:	86 95       	lsr	r24
    290a:	77 95       	ror	r23
    290c:	67 95       	ror	r22
    290e:	b7 95       	ror	r27
    2910:	f7 95       	ror	r31
    2912:	e7 95       	ror	r30
    2914:	9f 5f       	subi	r25, 0xFF	; 255
    2916:	c1 f7       	brne	.-16     	; 0x2908 <__mulsf3_pse+0x90>
    2918:	fe 2b       	or	r31, r30
    291a:	88 0f       	add	r24, r24
    291c:	91 1d       	adc	r25, r1
    291e:	96 95       	lsr	r25
    2920:	87 95       	ror	r24
    2922:	97 f9       	bld	r25, 7
    2924:	08 95       	ret

00002926 <vfprintf>:
    2926:	a0 e1       	ldi	r26, 0x10	; 16
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	e9 e9       	ldi	r30, 0x99	; 153
    292c:	f4 e1       	ldi	r31, 0x14	; 20
    292e:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__prologue_saves__>
    2932:	7c 01       	movw	r14, r24
    2934:	1b 01       	movw	r2, r22
    2936:	6a 01       	movw	r12, r20
    2938:	fc 01       	movw	r30, r24
    293a:	16 82       	std	Z+6, r1	; 0x06
    293c:	17 82       	std	Z+7, r1	; 0x07
    293e:	83 81       	ldd	r24, Z+3	; 0x03
    2940:	81 ff       	sbrs	r24, 1
    2942:	44 c3       	rjmp	.+1672   	; 0x2fcc <vfprintf+0x6a6>
    2944:	9e 01       	movw	r18, r28
    2946:	2f 5f       	subi	r18, 0xFF	; 255
    2948:	3f 4f       	sbci	r19, 0xFF	; 255
    294a:	39 01       	movw	r6, r18
    294c:	f7 01       	movw	r30, r14
    294e:	93 81       	ldd	r25, Z+3	; 0x03
    2950:	f1 01       	movw	r30, r2
    2952:	93 fd       	sbrc	r25, 3
    2954:	85 91       	lpm	r24, Z+
    2956:	93 ff       	sbrs	r25, 3
    2958:	81 91       	ld	r24, Z+
    295a:	1f 01       	movw	r2, r30
    295c:	88 23       	and	r24, r24
    295e:	09 f4       	brne	.+2      	; 0x2962 <vfprintf+0x3c>
    2960:	31 c3       	rjmp	.+1634   	; 0x2fc4 <vfprintf+0x69e>
    2962:	85 32       	cpi	r24, 0x25	; 37
    2964:	39 f4       	brne	.+14     	; 0x2974 <vfprintf+0x4e>
    2966:	93 fd       	sbrc	r25, 3
    2968:	85 91       	lpm	r24, Z+
    296a:	93 ff       	sbrs	r25, 3
    296c:	81 91       	ld	r24, Z+
    296e:	1f 01       	movw	r2, r30
    2970:	85 32       	cpi	r24, 0x25	; 37
    2972:	39 f4       	brne	.+14     	; 0x2982 <vfprintf+0x5c>
    2974:	b7 01       	movw	r22, r14
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    297c:	56 01       	movw	r10, r12
    297e:	65 01       	movw	r12, r10
    2980:	e5 cf       	rjmp	.-54     	; 0x294c <vfprintf+0x26>
    2982:	10 e0       	ldi	r17, 0x00	; 0
    2984:	51 2c       	mov	r5, r1
    2986:	91 2c       	mov	r9, r1
    2988:	ff e1       	ldi	r31, 0x1F	; 31
    298a:	f9 15       	cp	r31, r9
    298c:	d8 f0       	brcs	.+54     	; 0x29c4 <vfprintf+0x9e>
    298e:	8b 32       	cpi	r24, 0x2B	; 43
    2990:	79 f0       	breq	.+30     	; 0x29b0 <vfprintf+0x8a>
    2992:	38 f4       	brcc	.+14     	; 0x29a2 <vfprintf+0x7c>
    2994:	80 32       	cpi	r24, 0x20	; 32
    2996:	79 f0       	breq	.+30     	; 0x29b6 <vfprintf+0x90>
    2998:	83 32       	cpi	r24, 0x23	; 35
    299a:	a1 f4       	brne	.+40     	; 0x29c4 <vfprintf+0x9e>
    299c:	f9 2d       	mov	r31, r9
    299e:	f0 61       	ori	r31, 0x10	; 16
    29a0:	2e c0       	rjmp	.+92     	; 0x29fe <vfprintf+0xd8>
    29a2:	8d 32       	cpi	r24, 0x2D	; 45
    29a4:	61 f0       	breq	.+24     	; 0x29be <vfprintf+0x98>
    29a6:	80 33       	cpi	r24, 0x30	; 48
    29a8:	69 f4       	brne	.+26     	; 0x29c4 <vfprintf+0x9e>
    29aa:	29 2d       	mov	r18, r9
    29ac:	21 60       	ori	r18, 0x01	; 1
    29ae:	2d c0       	rjmp	.+90     	; 0x2a0a <vfprintf+0xe4>
    29b0:	39 2d       	mov	r19, r9
    29b2:	32 60       	ori	r19, 0x02	; 2
    29b4:	93 2e       	mov	r9, r19
    29b6:	89 2d       	mov	r24, r9
    29b8:	84 60       	ori	r24, 0x04	; 4
    29ba:	98 2e       	mov	r9, r24
    29bc:	2a c0       	rjmp	.+84     	; 0x2a12 <vfprintf+0xec>
    29be:	e9 2d       	mov	r30, r9
    29c0:	e8 60       	ori	r30, 0x08	; 8
    29c2:	15 c0       	rjmp	.+42     	; 0x29ee <vfprintf+0xc8>
    29c4:	97 fc       	sbrc	r9, 7
    29c6:	2d c0       	rjmp	.+90     	; 0x2a22 <vfprintf+0xfc>
    29c8:	20 ed       	ldi	r18, 0xD0	; 208
    29ca:	28 0f       	add	r18, r24
    29cc:	2a 30       	cpi	r18, 0x0A	; 10
    29ce:	88 f4       	brcc	.+34     	; 0x29f2 <vfprintf+0xcc>
    29d0:	96 fe       	sbrs	r9, 6
    29d2:	06 c0       	rjmp	.+12     	; 0x29e0 <vfprintf+0xba>
    29d4:	3a e0       	ldi	r19, 0x0A	; 10
    29d6:	13 9f       	mul	r17, r19
    29d8:	20 0d       	add	r18, r0
    29da:	11 24       	eor	r1, r1
    29dc:	12 2f       	mov	r17, r18
    29de:	19 c0       	rjmp	.+50     	; 0x2a12 <vfprintf+0xec>
    29e0:	8a e0       	ldi	r24, 0x0A	; 10
    29e2:	58 9e       	mul	r5, r24
    29e4:	20 0d       	add	r18, r0
    29e6:	11 24       	eor	r1, r1
    29e8:	52 2e       	mov	r5, r18
    29ea:	e9 2d       	mov	r30, r9
    29ec:	e0 62       	ori	r30, 0x20	; 32
    29ee:	9e 2e       	mov	r9, r30
    29f0:	10 c0       	rjmp	.+32     	; 0x2a12 <vfprintf+0xec>
    29f2:	8e 32       	cpi	r24, 0x2E	; 46
    29f4:	31 f4       	brne	.+12     	; 0x2a02 <vfprintf+0xdc>
    29f6:	96 fc       	sbrc	r9, 6
    29f8:	e5 c2       	rjmp	.+1482   	; 0x2fc4 <vfprintf+0x69e>
    29fa:	f9 2d       	mov	r31, r9
    29fc:	f0 64       	ori	r31, 0x40	; 64
    29fe:	9f 2e       	mov	r9, r31
    2a00:	08 c0       	rjmp	.+16     	; 0x2a12 <vfprintf+0xec>
    2a02:	8c 36       	cpi	r24, 0x6C	; 108
    2a04:	21 f4       	brne	.+8      	; 0x2a0e <vfprintf+0xe8>
    2a06:	29 2d       	mov	r18, r9
    2a08:	20 68       	ori	r18, 0x80	; 128
    2a0a:	92 2e       	mov	r9, r18
    2a0c:	02 c0       	rjmp	.+4      	; 0x2a12 <vfprintf+0xec>
    2a0e:	88 36       	cpi	r24, 0x68	; 104
    2a10:	41 f4       	brne	.+16     	; 0x2a22 <vfprintf+0xfc>
    2a12:	f1 01       	movw	r30, r2
    2a14:	93 fd       	sbrc	r25, 3
    2a16:	85 91       	lpm	r24, Z+
    2a18:	93 ff       	sbrs	r25, 3
    2a1a:	81 91       	ld	r24, Z+
    2a1c:	1f 01       	movw	r2, r30
    2a1e:	81 11       	cpse	r24, r1
    2a20:	b3 cf       	rjmp	.-154    	; 0x2988 <vfprintf+0x62>
    2a22:	9b eb       	ldi	r25, 0xBB	; 187
    2a24:	98 0f       	add	r25, r24
    2a26:	93 30       	cpi	r25, 0x03	; 3
    2a28:	20 f4       	brcc	.+8      	; 0x2a32 <vfprintf+0x10c>
    2a2a:	99 2d       	mov	r25, r9
    2a2c:	90 61       	ori	r25, 0x10	; 16
    2a2e:	80 5e       	subi	r24, 0xE0	; 224
    2a30:	07 c0       	rjmp	.+14     	; 0x2a40 <vfprintf+0x11a>
    2a32:	9b e9       	ldi	r25, 0x9B	; 155
    2a34:	98 0f       	add	r25, r24
    2a36:	93 30       	cpi	r25, 0x03	; 3
    2a38:	08 f0       	brcs	.+2      	; 0x2a3c <vfprintf+0x116>
    2a3a:	66 c1       	rjmp	.+716    	; 0x2d08 <vfprintf+0x3e2>
    2a3c:	99 2d       	mov	r25, r9
    2a3e:	9f 7e       	andi	r25, 0xEF	; 239
    2a40:	96 ff       	sbrs	r25, 6
    2a42:	16 e0       	ldi	r17, 0x06	; 6
    2a44:	9f 73       	andi	r25, 0x3F	; 63
    2a46:	99 2e       	mov	r9, r25
    2a48:	85 36       	cpi	r24, 0x65	; 101
    2a4a:	19 f4       	brne	.+6      	; 0x2a52 <vfprintf+0x12c>
    2a4c:	90 64       	ori	r25, 0x40	; 64
    2a4e:	99 2e       	mov	r9, r25
    2a50:	08 c0       	rjmp	.+16     	; 0x2a62 <vfprintf+0x13c>
    2a52:	86 36       	cpi	r24, 0x66	; 102
    2a54:	21 f4       	brne	.+8      	; 0x2a5e <vfprintf+0x138>
    2a56:	39 2f       	mov	r19, r25
    2a58:	30 68       	ori	r19, 0x80	; 128
    2a5a:	93 2e       	mov	r9, r19
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <vfprintf+0x13c>
    2a5e:	11 11       	cpse	r17, r1
    2a60:	11 50       	subi	r17, 0x01	; 1
    2a62:	97 fe       	sbrs	r9, 7
    2a64:	07 c0       	rjmp	.+14     	; 0x2a74 <vfprintf+0x14e>
    2a66:	1c 33       	cpi	r17, 0x3C	; 60
    2a68:	50 f4       	brcc	.+20     	; 0x2a7e <vfprintf+0x158>
    2a6a:	44 24       	eor	r4, r4
    2a6c:	43 94       	inc	r4
    2a6e:	41 0e       	add	r4, r17
    2a70:	27 e0       	ldi	r18, 0x07	; 7
    2a72:	0b c0       	rjmp	.+22     	; 0x2a8a <vfprintf+0x164>
    2a74:	18 30       	cpi	r17, 0x08	; 8
    2a76:	38 f0       	brcs	.+14     	; 0x2a86 <vfprintf+0x160>
    2a78:	27 e0       	ldi	r18, 0x07	; 7
    2a7a:	17 e0       	ldi	r17, 0x07	; 7
    2a7c:	05 c0       	rjmp	.+10     	; 0x2a88 <vfprintf+0x162>
    2a7e:	27 e0       	ldi	r18, 0x07	; 7
    2a80:	9c e3       	ldi	r25, 0x3C	; 60
    2a82:	49 2e       	mov	r4, r25
    2a84:	02 c0       	rjmp	.+4      	; 0x2a8a <vfprintf+0x164>
    2a86:	21 2f       	mov	r18, r17
    2a88:	41 2c       	mov	r4, r1
    2a8a:	56 01       	movw	r10, r12
    2a8c:	84 e0       	ldi	r24, 0x04	; 4
    2a8e:	a8 0e       	add	r10, r24
    2a90:	b1 1c       	adc	r11, r1
    2a92:	f6 01       	movw	r30, r12
    2a94:	60 81       	ld	r22, Z
    2a96:	71 81       	ldd	r23, Z+1	; 0x01
    2a98:	82 81       	ldd	r24, Z+2	; 0x02
    2a9a:	93 81       	ldd	r25, Z+3	; 0x03
    2a9c:	04 2d       	mov	r16, r4
    2a9e:	a3 01       	movw	r20, r6
    2aa0:	0e 94 6f 18 	call	0x30de	; 0x30de <__ftoa_engine>
    2aa4:	6c 01       	movw	r12, r24
    2aa6:	f9 81       	ldd	r31, Y+1	; 0x01
    2aa8:	fc 87       	std	Y+12, r31	; 0x0c
    2aaa:	f0 ff       	sbrs	r31, 0
    2aac:	02 c0       	rjmp	.+4      	; 0x2ab2 <vfprintf+0x18c>
    2aae:	f3 ff       	sbrs	r31, 3
    2ab0:	06 c0       	rjmp	.+12     	; 0x2abe <vfprintf+0x198>
    2ab2:	91 fc       	sbrc	r9, 1
    2ab4:	06 c0       	rjmp	.+12     	; 0x2ac2 <vfprintf+0x19c>
    2ab6:	92 fe       	sbrs	r9, 2
    2ab8:	06 c0       	rjmp	.+12     	; 0x2ac6 <vfprintf+0x1a0>
    2aba:	00 e2       	ldi	r16, 0x20	; 32
    2abc:	05 c0       	rjmp	.+10     	; 0x2ac8 <vfprintf+0x1a2>
    2abe:	0d e2       	ldi	r16, 0x2D	; 45
    2ac0:	03 c0       	rjmp	.+6      	; 0x2ac8 <vfprintf+0x1a2>
    2ac2:	0b e2       	ldi	r16, 0x2B	; 43
    2ac4:	01 c0       	rjmp	.+2      	; 0x2ac8 <vfprintf+0x1a2>
    2ac6:	00 e0       	ldi	r16, 0x00	; 0
    2ac8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2aca:	8c 70       	andi	r24, 0x0C	; 12
    2acc:	19 f0       	breq	.+6      	; 0x2ad4 <vfprintf+0x1ae>
    2ace:	01 11       	cpse	r16, r1
    2ad0:	5a c2       	rjmp	.+1204   	; 0x2f86 <vfprintf+0x660>
    2ad2:	9b c2       	rjmp	.+1334   	; 0x300a <vfprintf+0x6e4>
    2ad4:	97 fe       	sbrs	r9, 7
    2ad6:	10 c0       	rjmp	.+32     	; 0x2af8 <vfprintf+0x1d2>
    2ad8:	4c 0c       	add	r4, r12
    2ada:	fc 85       	ldd	r31, Y+12	; 0x0c
    2adc:	f4 ff       	sbrs	r31, 4
    2ade:	04 c0       	rjmp	.+8      	; 0x2ae8 <vfprintf+0x1c2>
    2ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae2:	81 33       	cpi	r24, 0x31	; 49
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <vfprintf+0x1c2>
    2ae6:	4a 94       	dec	r4
    2ae8:	14 14       	cp	r1, r4
    2aea:	74 f5       	brge	.+92     	; 0x2b48 <vfprintf+0x222>
    2aec:	28 e0       	ldi	r18, 0x08	; 8
    2aee:	24 15       	cp	r18, r4
    2af0:	78 f5       	brcc	.+94     	; 0x2b50 <vfprintf+0x22a>
    2af2:	88 e0       	ldi	r24, 0x08	; 8
    2af4:	48 2e       	mov	r4, r24
    2af6:	2c c0       	rjmp	.+88     	; 0x2b50 <vfprintf+0x22a>
    2af8:	96 fc       	sbrc	r9, 6
    2afa:	2a c0       	rjmp	.+84     	; 0x2b50 <vfprintf+0x22a>
    2afc:	81 2f       	mov	r24, r17
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	8c 15       	cp	r24, r12
    2b02:	9d 05       	cpc	r25, r13
    2b04:	9c f0       	brlt	.+38     	; 0x2b2c <vfprintf+0x206>
    2b06:	3c ef       	ldi	r19, 0xFC	; 252
    2b08:	c3 16       	cp	r12, r19
    2b0a:	3f ef       	ldi	r19, 0xFF	; 255
    2b0c:	d3 06       	cpc	r13, r19
    2b0e:	74 f0       	brlt	.+28     	; 0x2b2c <vfprintf+0x206>
    2b10:	89 2d       	mov	r24, r9
    2b12:	80 68       	ori	r24, 0x80	; 128
    2b14:	98 2e       	mov	r9, r24
    2b16:	0a c0       	rjmp	.+20     	; 0x2b2c <vfprintf+0x206>
    2b18:	e2 e0       	ldi	r30, 0x02	; 2
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	ec 0f       	add	r30, r28
    2b1e:	fd 1f       	adc	r31, r29
    2b20:	e1 0f       	add	r30, r17
    2b22:	f1 1d       	adc	r31, r1
    2b24:	80 81       	ld	r24, Z
    2b26:	80 33       	cpi	r24, 0x30	; 48
    2b28:	19 f4       	brne	.+6      	; 0x2b30 <vfprintf+0x20a>
    2b2a:	11 50       	subi	r17, 0x01	; 1
    2b2c:	11 11       	cpse	r17, r1
    2b2e:	f4 cf       	rjmp	.-24     	; 0x2b18 <vfprintf+0x1f2>
    2b30:	97 fe       	sbrs	r9, 7
    2b32:	0e c0       	rjmp	.+28     	; 0x2b50 <vfprintf+0x22a>
    2b34:	44 24       	eor	r4, r4
    2b36:	43 94       	inc	r4
    2b38:	41 0e       	add	r4, r17
    2b3a:	81 2f       	mov	r24, r17
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	c8 16       	cp	r12, r24
    2b40:	d9 06       	cpc	r13, r25
    2b42:	2c f4       	brge	.+10     	; 0x2b4e <vfprintf+0x228>
    2b44:	1c 19       	sub	r17, r12
    2b46:	04 c0       	rjmp	.+8      	; 0x2b50 <vfprintf+0x22a>
    2b48:	44 24       	eor	r4, r4
    2b4a:	43 94       	inc	r4
    2b4c:	01 c0       	rjmp	.+2      	; 0x2b50 <vfprintf+0x22a>
    2b4e:	10 e0       	ldi	r17, 0x00	; 0
    2b50:	97 fe       	sbrs	r9, 7
    2b52:	06 c0       	rjmp	.+12     	; 0x2b60 <vfprintf+0x23a>
    2b54:	1c 14       	cp	r1, r12
    2b56:	1d 04       	cpc	r1, r13
    2b58:	34 f4       	brge	.+12     	; 0x2b66 <vfprintf+0x240>
    2b5a:	c6 01       	movw	r24, r12
    2b5c:	01 96       	adiw	r24, 0x01	; 1
    2b5e:	05 c0       	rjmp	.+10     	; 0x2b6a <vfprintf+0x244>
    2b60:	85 e0       	ldi	r24, 0x05	; 5
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	02 c0       	rjmp	.+4      	; 0x2b6a <vfprintf+0x244>
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	01 11       	cpse	r16, r1
    2b6c:	01 96       	adiw	r24, 0x01	; 1
    2b6e:	11 23       	and	r17, r17
    2b70:	31 f0       	breq	.+12     	; 0x2b7e <vfprintf+0x258>
    2b72:	21 2f       	mov	r18, r17
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	2f 5f       	subi	r18, 0xFF	; 255
    2b78:	3f 4f       	sbci	r19, 0xFF	; 255
    2b7a:	82 0f       	add	r24, r18
    2b7c:	93 1f       	adc	r25, r19
    2b7e:	25 2d       	mov	r18, r5
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	82 17       	cp	r24, r18
    2b84:	93 07       	cpc	r25, r19
    2b86:	14 f4       	brge	.+4      	; 0x2b8c <vfprintf+0x266>
    2b88:	58 1a       	sub	r5, r24
    2b8a:	01 c0       	rjmp	.+2      	; 0x2b8e <vfprintf+0x268>
    2b8c:	51 2c       	mov	r5, r1
    2b8e:	89 2d       	mov	r24, r9
    2b90:	89 70       	andi	r24, 0x09	; 9
    2b92:	49 f4       	brne	.+18     	; 0x2ba6 <vfprintf+0x280>
    2b94:	55 20       	and	r5, r5
    2b96:	39 f0       	breq	.+14     	; 0x2ba6 <vfprintf+0x280>
    2b98:	b7 01       	movw	r22, r14
    2b9a:	80 e2       	ldi	r24, 0x20	; 32
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2ba2:	5a 94       	dec	r5
    2ba4:	f7 cf       	rjmp	.-18     	; 0x2b94 <vfprintf+0x26e>
    2ba6:	00 23       	and	r16, r16
    2ba8:	29 f0       	breq	.+10     	; 0x2bb4 <vfprintf+0x28e>
    2baa:	b7 01       	movw	r22, r14
    2bac:	80 2f       	mov	r24, r16
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2bb4:	93 fc       	sbrc	r9, 3
    2bb6:	09 c0       	rjmp	.+18     	; 0x2bca <vfprintf+0x2a4>
    2bb8:	55 20       	and	r5, r5
    2bba:	39 f0       	breq	.+14     	; 0x2bca <vfprintf+0x2a4>
    2bbc:	b7 01       	movw	r22, r14
    2bbe:	80 e3       	ldi	r24, 0x30	; 48
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2bc6:	5a 94       	dec	r5
    2bc8:	f7 cf       	rjmp	.-18     	; 0x2bb8 <vfprintf+0x292>
    2bca:	97 fe       	sbrs	r9, 7
    2bcc:	4c c0       	rjmp	.+152    	; 0x2c66 <vfprintf+0x340>
    2bce:	46 01       	movw	r8, r12
    2bd0:	d7 fe       	sbrs	r13, 7
    2bd2:	02 c0       	rjmp	.+4      	; 0x2bd8 <vfprintf+0x2b2>
    2bd4:	81 2c       	mov	r8, r1
    2bd6:	91 2c       	mov	r9, r1
    2bd8:	c6 01       	movw	r24, r12
    2bda:	88 19       	sub	r24, r8
    2bdc:	99 09       	sbc	r25, r9
    2bde:	f3 01       	movw	r30, r6
    2be0:	e8 0f       	add	r30, r24
    2be2:	f9 1f       	adc	r31, r25
    2be4:	ed 87       	std	Y+13, r30	; 0x0d
    2be6:	fe 87       	std	Y+14, r31	; 0x0e
    2be8:	96 01       	movw	r18, r12
    2bea:	24 19       	sub	r18, r4
    2bec:	31 09       	sbc	r19, r1
    2bee:	2f 87       	std	Y+15, r18	; 0x0f
    2bf0:	38 8b       	std	Y+16, r19	; 0x10
    2bf2:	01 2f       	mov	r16, r17
    2bf4:	10 e0       	ldi	r17, 0x00	; 0
    2bf6:	11 95       	neg	r17
    2bf8:	01 95       	neg	r16
    2bfa:	11 09       	sbc	r17, r1
    2bfc:	3f ef       	ldi	r19, 0xFF	; 255
    2bfe:	83 16       	cp	r8, r19
    2c00:	93 06       	cpc	r9, r19
    2c02:	29 f4       	brne	.+10     	; 0x2c0e <vfprintf+0x2e8>
    2c04:	b7 01       	movw	r22, r14
    2c06:	8e e2       	ldi	r24, 0x2E	; 46
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2c0e:	c8 14       	cp	r12, r8
    2c10:	d9 04       	cpc	r13, r9
    2c12:	4c f0       	brlt	.+18     	; 0x2c26 <vfprintf+0x300>
    2c14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c16:	98 89       	ldd	r25, Y+16	; 0x10
    2c18:	88 15       	cp	r24, r8
    2c1a:	99 05       	cpc	r25, r9
    2c1c:	24 f4       	brge	.+8      	; 0x2c26 <vfprintf+0x300>
    2c1e:	ed 85       	ldd	r30, Y+13	; 0x0d
    2c20:	fe 85       	ldd	r31, Y+14	; 0x0e
    2c22:	81 81       	ldd	r24, Z+1	; 0x01
    2c24:	01 c0       	rjmp	.+2      	; 0x2c28 <vfprintf+0x302>
    2c26:	80 e3       	ldi	r24, 0x30	; 48
    2c28:	f1 e0       	ldi	r31, 0x01	; 1
    2c2a:	8f 1a       	sub	r8, r31
    2c2c:	91 08       	sbc	r9, r1
    2c2e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c30:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c32:	2f 5f       	subi	r18, 0xFF	; 255
    2c34:	3f 4f       	sbci	r19, 0xFF	; 255
    2c36:	2d 87       	std	Y+13, r18	; 0x0d
    2c38:	3e 87       	std	Y+14, r19	; 0x0e
    2c3a:	80 16       	cp	r8, r16
    2c3c:	91 06       	cpc	r9, r17
    2c3e:	2c f0       	brlt	.+10     	; 0x2c4a <vfprintf+0x324>
    2c40:	b7 01       	movw	r22, r14
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2c48:	d9 cf       	rjmp	.-78     	; 0x2bfc <vfprintf+0x2d6>
    2c4a:	c8 14       	cp	r12, r8
    2c4c:	d9 04       	cpc	r13, r9
    2c4e:	41 f4       	brne	.+16     	; 0x2c60 <vfprintf+0x33a>
    2c50:	9a 81       	ldd	r25, Y+2	; 0x02
    2c52:	96 33       	cpi	r25, 0x36	; 54
    2c54:	20 f4       	brcc	.+8      	; 0x2c5e <vfprintf+0x338>
    2c56:	95 33       	cpi	r25, 0x35	; 53
    2c58:	19 f4       	brne	.+6      	; 0x2c60 <vfprintf+0x33a>
    2c5a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c5c:	34 ff       	sbrs	r19, 4
    2c5e:	81 e3       	ldi	r24, 0x31	; 49
    2c60:	b7 01       	movw	r22, r14
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	4e c0       	rjmp	.+156    	; 0x2d02 <vfprintf+0x3dc>
    2c66:	8a 81       	ldd	r24, Y+2	; 0x02
    2c68:	81 33       	cpi	r24, 0x31	; 49
    2c6a:	19 f0       	breq	.+6      	; 0x2c72 <vfprintf+0x34c>
    2c6c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c6e:	9f 7e       	andi	r25, 0xEF	; 239
    2c70:	9c 87       	std	Y+12, r25	; 0x0c
    2c72:	b7 01       	movw	r22, r14
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2c7a:	11 11       	cpse	r17, r1
    2c7c:	05 c0       	rjmp	.+10     	; 0x2c88 <vfprintf+0x362>
    2c7e:	94 fc       	sbrc	r9, 4
    2c80:	18 c0       	rjmp	.+48     	; 0x2cb2 <vfprintf+0x38c>
    2c82:	85 e6       	ldi	r24, 0x65	; 101
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	17 c0       	rjmp	.+46     	; 0x2cb6 <vfprintf+0x390>
    2c88:	b7 01       	movw	r22, r14
    2c8a:	8e e2       	ldi	r24, 0x2E	; 46
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2c92:	1e 5f       	subi	r17, 0xFE	; 254
    2c94:	82 e0       	ldi	r24, 0x02	; 2
    2c96:	01 e0       	ldi	r16, 0x01	; 1
    2c98:	08 0f       	add	r16, r24
    2c9a:	f3 01       	movw	r30, r6
    2c9c:	e8 0f       	add	r30, r24
    2c9e:	f1 1d       	adc	r31, r1
    2ca0:	80 81       	ld	r24, Z
    2ca2:	b7 01       	movw	r22, r14
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2caa:	80 2f       	mov	r24, r16
    2cac:	01 13       	cpse	r16, r17
    2cae:	f3 cf       	rjmp	.-26     	; 0x2c96 <vfprintf+0x370>
    2cb0:	e6 cf       	rjmp	.-52     	; 0x2c7e <vfprintf+0x358>
    2cb2:	85 e4       	ldi	r24, 0x45	; 69
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	b7 01       	movw	r22, r14
    2cb8:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2cbc:	d7 fc       	sbrc	r13, 7
    2cbe:	06 c0       	rjmp	.+12     	; 0x2ccc <vfprintf+0x3a6>
    2cc0:	c1 14       	cp	r12, r1
    2cc2:	d1 04       	cpc	r13, r1
    2cc4:	41 f4       	brne	.+16     	; 0x2cd6 <vfprintf+0x3b0>
    2cc6:	ec 85       	ldd	r30, Y+12	; 0x0c
    2cc8:	e4 ff       	sbrs	r30, 4
    2cca:	05 c0       	rjmp	.+10     	; 0x2cd6 <vfprintf+0x3b0>
    2ccc:	d1 94       	neg	r13
    2cce:	c1 94       	neg	r12
    2cd0:	d1 08       	sbc	r13, r1
    2cd2:	8d e2       	ldi	r24, 0x2D	; 45
    2cd4:	01 c0       	rjmp	.+2      	; 0x2cd8 <vfprintf+0x3b2>
    2cd6:	8b e2       	ldi	r24, 0x2B	; 43
    2cd8:	b7 01       	movw	r22, r14
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2ce0:	80 e3       	ldi	r24, 0x30	; 48
    2ce2:	2a e0       	ldi	r18, 0x0A	; 10
    2ce4:	c2 16       	cp	r12, r18
    2ce6:	d1 04       	cpc	r13, r1
    2ce8:	2c f0       	brlt	.+10     	; 0x2cf4 <vfprintf+0x3ce>
    2cea:	8f 5f       	subi	r24, 0xFF	; 255
    2cec:	fa e0       	ldi	r31, 0x0A	; 10
    2cee:	cf 1a       	sub	r12, r31
    2cf0:	d1 08       	sbc	r13, r1
    2cf2:	f7 cf       	rjmp	.-18     	; 0x2ce2 <vfprintf+0x3bc>
    2cf4:	b7 01       	movw	r22, r14
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2cfc:	b7 01       	movw	r22, r14
    2cfe:	c6 01       	movw	r24, r12
    2d00:	c0 96       	adiw	r24, 0x30	; 48
    2d02:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2d06:	54 c1       	rjmp	.+680    	; 0x2fb0 <vfprintf+0x68a>
    2d08:	83 36       	cpi	r24, 0x63	; 99
    2d0a:	31 f0       	breq	.+12     	; 0x2d18 <vfprintf+0x3f2>
    2d0c:	83 37       	cpi	r24, 0x73	; 115
    2d0e:	79 f0       	breq	.+30     	; 0x2d2e <vfprintf+0x408>
    2d10:	83 35       	cpi	r24, 0x53	; 83
    2d12:	09 f0       	breq	.+2      	; 0x2d16 <vfprintf+0x3f0>
    2d14:	56 c0       	rjmp	.+172    	; 0x2dc2 <vfprintf+0x49c>
    2d16:	20 c0       	rjmp	.+64     	; 0x2d58 <vfprintf+0x432>
    2d18:	56 01       	movw	r10, r12
    2d1a:	32 e0       	ldi	r19, 0x02	; 2
    2d1c:	a3 0e       	add	r10, r19
    2d1e:	b1 1c       	adc	r11, r1
    2d20:	f6 01       	movw	r30, r12
    2d22:	80 81       	ld	r24, Z
    2d24:	89 83       	std	Y+1, r24	; 0x01
    2d26:	01 e0       	ldi	r16, 0x01	; 1
    2d28:	10 e0       	ldi	r17, 0x00	; 0
    2d2a:	63 01       	movw	r12, r6
    2d2c:	12 c0       	rjmp	.+36     	; 0x2d52 <vfprintf+0x42c>
    2d2e:	56 01       	movw	r10, r12
    2d30:	f2 e0       	ldi	r31, 0x02	; 2
    2d32:	af 0e       	add	r10, r31
    2d34:	b1 1c       	adc	r11, r1
    2d36:	f6 01       	movw	r30, r12
    2d38:	c0 80       	ld	r12, Z
    2d3a:	d1 80       	ldd	r13, Z+1	; 0x01
    2d3c:	96 fe       	sbrs	r9, 6
    2d3e:	03 c0       	rjmp	.+6      	; 0x2d46 <vfprintf+0x420>
    2d40:	61 2f       	mov	r22, r17
    2d42:	70 e0       	ldi	r23, 0x00	; 0
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <vfprintf+0x424>
    2d46:	6f ef       	ldi	r22, 0xFF	; 255
    2d48:	7f ef       	ldi	r23, 0xFF	; 255
    2d4a:	c6 01       	movw	r24, r12
    2d4c:	0e 94 64 19 	call	0x32c8	; 0x32c8 <strnlen>
    2d50:	8c 01       	movw	r16, r24
    2d52:	f9 2d       	mov	r31, r9
    2d54:	ff 77       	andi	r31, 0x7F	; 127
    2d56:	14 c0       	rjmp	.+40     	; 0x2d80 <vfprintf+0x45a>
    2d58:	56 01       	movw	r10, r12
    2d5a:	22 e0       	ldi	r18, 0x02	; 2
    2d5c:	a2 0e       	add	r10, r18
    2d5e:	b1 1c       	adc	r11, r1
    2d60:	f6 01       	movw	r30, r12
    2d62:	c0 80       	ld	r12, Z
    2d64:	d1 80       	ldd	r13, Z+1	; 0x01
    2d66:	96 fe       	sbrs	r9, 6
    2d68:	03 c0       	rjmp	.+6      	; 0x2d70 <vfprintf+0x44a>
    2d6a:	61 2f       	mov	r22, r17
    2d6c:	70 e0       	ldi	r23, 0x00	; 0
    2d6e:	02 c0       	rjmp	.+4      	; 0x2d74 <vfprintf+0x44e>
    2d70:	6f ef       	ldi	r22, 0xFF	; 255
    2d72:	7f ef       	ldi	r23, 0xFF	; 255
    2d74:	c6 01       	movw	r24, r12
    2d76:	0e 94 47 19 	call	0x328e	; 0x328e <strnlen_P>
    2d7a:	8c 01       	movw	r16, r24
    2d7c:	f9 2d       	mov	r31, r9
    2d7e:	f0 68       	ori	r31, 0x80	; 128
    2d80:	9f 2e       	mov	r9, r31
    2d82:	f3 fd       	sbrc	r31, 3
    2d84:	1a c0       	rjmp	.+52     	; 0x2dba <vfprintf+0x494>
    2d86:	85 2d       	mov	r24, r5
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	08 17       	cp	r16, r24
    2d8c:	19 07       	cpc	r17, r25
    2d8e:	a8 f4       	brcc	.+42     	; 0x2dba <vfprintf+0x494>
    2d90:	b7 01       	movw	r22, r14
    2d92:	80 e2       	ldi	r24, 0x20	; 32
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2d9a:	5a 94       	dec	r5
    2d9c:	f4 cf       	rjmp	.-24     	; 0x2d86 <vfprintf+0x460>
    2d9e:	f6 01       	movw	r30, r12
    2da0:	97 fc       	sbrc	r9, 7
    2da2:	85 91       	lpm	r24, Z+
    2da4:	97 fe       	sbrs	r9, 7
    2da6:	81 91       	ld	r24, Z+
    2da8:	6f 01       	movw	r12, r30
    2daa:	b7 01       	movw	r22, r14
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2db2:	51 10       	cpse	r5, r1
    2db4:	5a 94       	dec	r5
    2db6:	01 50       	subi	r16, 0x01	; 1
    2db8:	11 09       	sbc	r17, r1
    2dba:	01 15       	cp	r16, r1
    2dbc:	11 05       	cpc	r17, r1
    2dbe:	79 f7       	brne	.-34     	; 0x2d9e <vfprintf+0x478>
    2dc0:	f7 c0       	rjmp	.+494    	; 0x2fb0 <vfprintf+0x68a>
    2dc2:	84 36       	cpi	r24, 0x64	; 100
    2dc4:	11 f0       	breq	.+4      	; 0x2dca <vfprintf+0x4a4>
    2dc6:	89 36       	cpi	r24, 0x69	; 105
    2dc8:	61 f5       	brne	.+88     	; 0x2e22 <vfprintf+0x4fc>
    2dca:	56 01       	movw	r10, r12
    2dcc:	97 fe       	sbrs	r9, 7
    2dce:	09 c0       	rjmp	.+18     	; 0x2de2 <vfprintf+0x4bc>
    2dd0:	24 e0       	ldi	r18, 0x04	; 4
    2dd2:	a2 0e       	add	r10, r18
    2dd4:	b1 1c       	adc	r11, r1
    2dd6:	f6 01       	movw	r30, r12
    2dd8:	60 81       	ld	r22, Z
    2dda:	71 81       	ldd	r23, Z+1	; 0x01
    2ddc:	82 81       	ldd	r24, Z+2	; 0x02
    2dde:	93 81       	ldd	r25, Z+3	; 0x03
    2de0:	0a c0       	rjmp	.+20     	; 0x2df6 <vfprintf+0x4d0>
    2de2:	f2 e0       	ldi	r31, 0x02	; 2
    2de4:	af 0e       	add	r10, r31
    2de6:	b1 1c       	adc	r11, r1
    2de8:	f6 01       	movw	r30, r12
    2dea:	60 81       	ld	r22, Z
    2dec:	71 81       	ldd	r23, Z+1	; 0x01
    2dee:	07 2e       	mov	r0, r23
    2df0:	00 0c       	add	r0, r0
    2df2:	88 0b       	sbc	r24, r24
    2df4:	99 0b       	sbc	r25, r25
    2df6:	f9 2d       	mov	r31, r9
    2df8:	ff 76       	andi	r31, 0x6F	; 111
    2dfa:	9f 2e       	mov	r9, r31
    2dfc:	97 ff       	sbrs	r25, 7
    2dfe:	09 c0       	rjmp	.+18     	; 0x2e12 <vfprintf+0x4ec>
    2e00:	90 95       	com	r25
    2e02:	80 95       	com	r24
    2e04:	70 95       	com	r23
    2e06:	61 95       	neg	r22
    2e08:	7f 4f       	sbci	r23, 0xFF	; 255
    2e0a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e0e:	f0 68       	ori	r31, 0x80	; 128
    2e10:	9f 2e       	mov	r9, r31
    2e12:	2a e0       	ldi	r18, 0x0A	; 10
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	a3 01       	movw	r20, r6
    2e18:	0e 94 cd 19 	call	0x339a	; 0x339a <__ultoa_invert>
    2e1c:	c8 2e       	mov	r12, r24
    2e1e:	c6 18       	sub	r12, r6
    2e20:	3f c0       	rjmp	.+126    	; 0x2ea0 <vfprintf+0x57a>
    2e22:	09 2d       	mov	r16, r9
    2e24:	85 37       	cpi	r24, 0x75	; 117
    2e26:	21 f4       	brne	.+8      	; 0x2e30 <vfprintf+0x50a>
    2e28:	0f 7e       	andi	r16, 0xEF	; 239
    2e2a:	2a e0       	ldi	r18, 0x0A	; 10
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	1d c0       	rjmp	.+58     	; 0x2e6a <vfprintf+0x544>
    2e30:	09 7f       	andi	r16, 0xF9	; 249
    2e32:	8f 36       	cpi	r24, 0x6F	; 111
    2e34:	91 f0       	breq	.+36     	; 0x2e5a <vfprintf+0x534>
    2e36:	18 f4       	brcc	.+6      	; 0x2e3e <vfprintf+0x518>
    2e38:	88 35       	cpi	r24, 0x58	; 88
    2e3a:	59 f0       	breq	.+22     	; 0x2e52 <vfprintf+0x52c>
    2e3c:	c3 c0       	rjmp	.+390    	; 0x2fc4 <vfprintf+0x69e>
    2e3e:	80 37       	cpi	r24, 0x70	; 112
    2e40:	19 f0       	breq	.+6      	; 0x2e48 <vfprintf+0x522>
    2e42:	88 37       	cpi	r24, 0x78	; 120
    2e44:	11 f0       	breq	.+4      	; 0x2e4a <vfprintf+0x524>
    2e46:	be c0       	rjmp	.+380    	; 0x2fc4 <vfprintf+0x69e>
    2e48:	00 61       	ori	r16, 0x10	; 16
    2e4a:	04 ff       	sbrs	r16, 4
    2e4c:	09 c0       	rjmp	.+18     	; 0x2e60 <vfprintf+0x53a>
    2e4e:	04 60       	ori	r16, 0x04	; 4
    2e50:	07 c0       	rjmp	.+14     	; 0x2e60 <vfprintf+0x53a>
    2e52:	94 fe       	sbrs	r9, 4
    2e54:	08 c0       	rjmp	.+16     	; 0x2e66 <vfprintf+0x540>
    2e56:	06 60       	ori	r16, 0x06	; 6
    2e58:	06 c0       	rjmp	.+12     	; 0x2e66 <vfprintf+0x540>
    2e5a:	28 e0       	ldi	r18, 0x08	; 8
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	05 c0       	rjmp	.+10     	; 0x2e6a <vfprintf+0x544>
    2e60:	20 e1       	ldi	r18, 0x10	; 16
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <vfprintf+0x544>
    2e66:	20 e1       	ldi	r18, 0x10	; 16
    2e68:	32 e0       	ldi	r19, 0x02	; 2
    2e6a:	56 01       	movw	r10, r12
    2e6c:	07 ff       	sbrs	r16, 7
    2e6e:	09 c0       	rjmp	.+18     	; 0x2e82 <vfprintf+0x55c>
    2e70:	84 e0       	ldi	r24, 0x04	; 4
    2e72:	a8 0e       	add	r10, r24
    2e74:	b1 1c       	adc	r11, r1
    2e76:	f6 01       	movw	r30, r12
    2e78:	60 81       	ld	r22, Z
    2e7a:	71 81       	ldd	r23, Z+1	; 0x01
    2e7c:	82 81       	ldd	r24, Z+2	; 0x02
    2e7e:	93 81       	ldd	r25, Z+3	; 0x03
    2e80:	08 c0       	rjmp	.+16     	; 0x2e92 <vfprintf+0x56c>
    2e82:	f2 e0       	ldi	r31, 0x02	; 2
    2e84:	af 0e       	add	r10, r31
    2e86:	b1 1c       	adc	r11, r1
    2e88:	f6 01       	movw	r30, r12
    2e8a:	60 81       	ld	r22, Z
    2e8c:	71 81       	ldd	r23, Z+1	; 0x01
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	a3 01       	movw	r20, r6
    2e94:	0e 94 cd 19 	call	0x339a	; 0x339a <__ultoa_invert>
    2e98:	c8 2e       	mov	r12, r24
    2e9a:	c6 18       	sub	r12, r6
    2e9c:	0f 77       	andi	r16, 0x7F	; 127
    2e9e:	90 2e       	mov	r9, r16
    2ea0:	96 fe       	sbrs	r9, 6
    2ea2:	0b c0       	rjmp	.+22     	; 0x2eba <vfprintf+0x594>
    2ea4:	09 2d       	mov	r16, r9
    2ea6:	0e 7f       	andi	r16, 0xFE	; 254
    2ea8:	c1 16       	cp	r12, r17
    2eaa:	50 f4       	brcc	.+20     	; 0x2ec0 <vfprintf+0x59a>
    2eac:	94 fe       	sbrs	r9, 4
    2eae:	0a c0       	rjmp	.+20     	; 0x2ec4 <vfprintf+0x59e>
    2eb0:	92 fc       	sbrc	r9, 2
    2eb2:	08 c0       	rjmp	.+16     	; 0x2ec4 <vfprintf+0x59e>
    2eb4:	09 2d       	mov	r16, r9
    2eb6:	0e 7e       	andi	r16, 0xEE	; 238
    2eb8:	05 c0       	rjmp	.+10     	; 0x2ec4 <vfprintf+0x59e>
    2eba:	dc 2c       	mov	r13, r12
    2ebc:	09 2d       	mov	r16, r9
    2ebe:	03 c0       	rjmp	.+6      	; 0x2ec6 <vfprintf+0x5a0>
    2ec0:	dc 2c       	mov	r13, r12
    2ec2:	01 c0       	rjmp	.+2      	; 0x2ec6 <vfprintf+0x5a0>
    2ec4:	d1 2e       	mov	r13, r17
    2ec6:	04 ff       	sbrs	r16, 4
    2ec8:	0d c0       	rjmp	.+26     	; 0x2ee4 <vfprintf+0x5be>
    2eca:	fe 01       	movw	r30, r28
    2ecc:	ec 0d       	add	r30, r12
    2ece:	f1 1d       	adc	r31, r1
    2ed0:	80 81       	ld	r24, Z
    2ed2:	80 33       	cpi	r24, 0x30	; 48
    2ed4:	11 f4       	brne	.+4      	; 0x2eda <vfprintf+0x5b4>
    2ed6:	09 7e       	andi	r16, 0xE9	; 233
    2ed8:	09 c0       	rjmp	.+18     	; 0x2eec <vfprintf+0x5c6>
    2eda:	02 ff       	sbrs	r16, 2
    2edc:	06 c0       	rjmp	.+12     	; 0x2eea <vfprintf+0x5c4>
    2ede:	d3 94       	inc	r13
    2ee0:	d3 94       	inc	r13
    2ee2:	04 c0       	rjmp	.+8      	; 0x2eec <vfprintf+0x5c6>
    2ee4:	80 2f       	mov	r24, r16
    2ee6:	86 78       	andi	r24, 0x86	; 134
    2ee8:	09 f0       	breq	.+2      	; 0x2eec <vfprintf+0x5c6>
    2eea:	d3 94       	inc	r13
    2eec:	03 fd       	sbrc	r16, 3
    2eee:	11 c0       	rjmp	.+34     	; 0x2f12 <vfprintf+0x5ec>
    2ef0:	00 ff       	sbrs	r16, 0
    2ef2:	06 c0       	rjmp	.+12     	; 0x2f00 <vfprintf+0x5da>
    2ef4:	1c 2d       	mov	r17, r12
    2ef6:	d5 14       	cp	r13, r5
    2ef8:	80 f4       	brcc	.+32     	; 0x2f1a <vfprintf+0x5f4>
    2efa:	15 0d       	add	r17, r5
    2efc:	1d 19       	sub	r17, r13
    2efe:	0d c0       	rjmp	.+26     	; 0x2f1a <vfprintf+0x5f4>
    2f00:	d5 14       	cp	r13, r5
    2f02:	58 f4       	brcc	.+22     	; 0x2f1a <vfprintf+0x5f4>
    2f04:	b7 01       	movw	r22, r14
    2f06:	80 e2       	ldi	r24, 0x20	; 32
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2f0e:	d3 94       	inc	r13
    2f10:	f7 cf       	rjmp	.-18     	; 0x2f00 <vfprintf+0x5da>
    2f12:	d5 14       	cp	r13, r5
    2f14:	10 f4       	brcc	.+4      	; 0x2f1a <vfprintf+0x5f4>
    2f16:	5d 18       	sub	r5, r13
    2f18:	01 c0       	rjmp	.+2      	; 0x2f1c <vfprintf+0x5f6>
    2f1a:	51 2c       	mov	r5, r1
    2f1c:	04 ff       	sbrs	r16, 4
    2f1e:	10 c0       	rjmp	.+32     	; 0x2f40 <vfprintf+0x61a>
    2f20:	b7 01       	movw	r22, r14
    2f22:	80 e3       	ldi	r24, 0x30	; 48
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2f2a:	02 ff       	sbrs	r16, 2
    2f2c:	17 c0       	rjmp	.+46     	; 0x2f5c <vfprintf+0x636>
    2f2e:	01 fd       	sbrc	r16, 1
    2f30:	03 c0       	rjmp	.+6      	; 0x2f38 <vfprintf+0x612>
    2f32:	88 e7       	ldi	r24, 0x78	; 120
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	02 c0       	rjmp	.+4      	; 0x2f3c <vfprintf+0x616>
    2f38:	88 e5       	ldi	r24, 0x58	; 88
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	b7 01       	movw	r22, r14
    2f3e:	0c c0       	rjmp	.+24     	; 0x2f58 <vfprintf+0x632>
    2f40:	80 2f       	mov	r24, r16
    2f42:	86 78       	andi	r24, 0x86	; 134
    2f44:	59 f0       	breq	.+22     	; 0x2f5c <vfprintf+0x636>
    2f46:	01 ff       	sbrs	r16, 1
    2f48:	02 c0       	rjmp	.+4      	; 0x2f4e <vfprintf+0x628>
    2f4a:	8b e2       	ldi	r24, 0x2B	; 43
    2f4c:	01 c0       	rjmp	.+2      	; 0x2f50 <vfprintf+0x62a>
    2f4e:	80 e2       	ldi	r24, 0x20	; 32
    2f50:	07 fd       	sbrc	r16, 7
    2f52:	8d e2       	ldi	r24, 0x2D	; 45
    2f54:	b7 01       	movw	r22, r14
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2f5c:	c1 16       	cp	r12, r17
    2f5e:	38 f4       	brcc	.+14     	; 0x2f6e <vfprintf+0x648>
    2f60:	b7 01       	movw	r22, r14
    2f62:	80 e3       	ldi	r24, 0x30	; 48
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2f6a:	11 50       	subi	r17, 0x01	; 1
    2f6c:	f7 cf       	rjmp	.-18     	; 0x2f5c <vfprintf+0x636>
    2f6e:	ca 94       	dec	r12
    2f70:	f3 01       	movw	r30, r6
    2f72:	ec 0d       	add	r30, r12
    2f74:	f1 1d       	adc	r31, r1
    2f76:	80 81       	ld	r24, Z
    2f78:	b7 01       	movw	r22, r14
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2f80:	c1 10       	cpse	r12, r1
    2f82:	f5 cf       	rjmp	.-22     	; 0x2f6e <vfprintf+0x648>
    2f84:	15 c0       	rjmp	.+42     	; 0x2fb0 <vfprintf+0x68a>
    2f86:	f4 e0       	ldi	r31, 0x04	; 4
    2f88:	f5 15       	cp	r31, r5
    2f8a:	60 f5       	brcc	.+88     	; 0x2fe4 <vfprintf+0x6be>
    2f8c:	84 e0       	ldi	r24, 0x04	; 4
    2f8e:	58 1a       	sub	r5, r24
    2f90:	93 fe       	sbrs	r9, 3
    2f92:	1f c0       	rjmp	.+62     	; 0x2fd2 <vfprintf+0x6ac>
    2f94:	01 11       	cpse	r16, r1
    2f96:	27 c0       	rjmp	.+78     	; 0x2fe6 <vfprintf+0x6c0>
    2f98:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f9a:	23 ff       	sbrs	r18, 3
    2f9c:	2a c0       	rjmp	.+84     	; 0x2ff2 <vfprintf+0x6cc>
    2f9e:	0a e0       	ldi	r16, 0x0A	; 10
    2fa0:	11 e0       	ldi	r17, 0x01	; 1
    2fa2:	39 2d       	mov	r19, r9
    2fa4:	30 71       	andi	r19, 0x10	; 16
    2fa6:	93 2e       	mov	r9, r19
    2fa8:	f8 01       	movw	r30, r16
    2faa:	84 91       	lpm	r24, Z
    2fac:	81 11       	cpse	r24, r1
    2fae:	24 c0       	rjmp	.+72     	; 0x2ff8 <vfprintf+0x6d2>
    2fb0:	55 20       	and	r5, r5
    2fb2:	09 f4       	brne	.+2      	; 0x2fb6 <vfprintf+0x690>
    2fb4:	e4 cc       	rjmp	.-1592   	; 0x297e <vfprintf+0x58>
    2fb6:	b7 01       	movw	r22, r14
    2fb8:	80 e2       	ldi	r24, 0x20	; 32
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2fc0:	5a 94       	dec	r5
    2fc2:	f6 cf       	rjmp	.-20     	; 0x2fb0 <vfprintf+0x68a>
    2fc4:	f7 01       	movw	r30, r14
    2fc6:	86 81       	ldd	r24, Z+6	; 0x06
    2fc8:	97 81       	ldd	r25, Z+7	; 0x07
    2fca:	26 c0       	rjmp	.+76     	; 0x3018 <vfprintf+0x6f2>
    2fcc:	8f ef       	ldi	r24, 0xFF	; 255
    2fce:	9f ef       	ldi	r25, 0xFF	; 255
    2fd0:	23 c0       	rjmp	.+70     	; 0x3018 <vfprintf+0x6f2>
    2fd2:	b7 01       	movw	r22, r14
    2fd4:	80 e2       	ldi	r24, 0x20	; 32
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2fdc:	5a 94       	dec	r5
    2fde:	51 10       	cpse	r5, r1
    2fe0:	f8 cf       	rjmp	.-16     	; 0x2fd2 <vfprintf+0x6ac>
    2fe2:	d8 cf       	rjmp	.-80     	; 0x2f94 <vfprintf+0x66e>
    2fe4:	51 2c       	mov	r5, r1
    2fe6:	b7 01       	movw	r22, r14
    2fe8:	80 2f       	mov	r24, r16
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    2ff0:	d3 cf       	rjmp	.-90     	; 0x2f98 <vfprintf+0x672>
    2ff2:	0e e0       	ldi	r16, 0x0E	; 14
    2ff4:	11 e0       	ldi	r17, 0x01	; 1
    2ff6:	d5 cf       	rjmp	.-86     	; 0x2fa2 <vfprintf+0x67c>
    2ff8:	91 10       	cpse	r9, r1
    2ffa:	80 52       	subi	r24, 0x20	; 32
    2ffc:	b7 01       	movw	r22, r14
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	0e 94 6f 19 	call	0x32de	; 0x32de <fputc>
    3004:	0f 5f       	subi	r16, 0xFF	; 255
    3006:	1f 4f       	sbci	r17, 0xFF	; 255
    3008:	cf cf       	rjmp	.-98     	; 0x2fa8 <vfprintf+0x682>
    300a:	23 e0       	ldi	r18, 0x03	; 3
    300c:	25 15       	cp	r18, r5
    300e:	10 f4       	brcc	.+4      	; 0x3014 <vfprintf+0x6ee>
    3010:	83 e0       	ldi	r24, 0x03	; 3
    3012:	bd cf       	rjmp	.-134    	; 0x2f8e <vfprintf+0x668>
    3014:	51 2c       	mov	r5, r1
    3016:	c0 cf       	rjmp	.-128    	; 0x2f98 <vfprintf+0x672>
    3018:	60 96       	adiw	r28, 0x10	; 16
    301a:	e2 e1       	ldi	r30, 0x12	; 18
    301c:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__epilogue_restores__>

00003020 <__divmodhi4>:
    3020:	97 fb       	bst	r25, 7
    3022:	07 2e       	mov	r0, r23
    3024:	16 f4       	brtc	.+4      	; 0x302a <__divmodhi4+0xa>
    3026:	00 94       	com	r0
    3028:	07 d0       	rcall	.+14     	; 0x3038 <__divmodhi4_neg1>
    302a:	77 fd       	sbrc	r23, 7
    302c:	09 d0       	rcall	.+18     	; 0x3040 <__divmodhi4_neg2>
    302e:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <__udivmodhi4>
    3032:	07 fc       	sbrc	r0, 7
    3034:	05 d0       	rcall	.+10     	; 0x3040 <__divmodhi4_neg2>
    3036:	3e f4       	brtc	.+14     	; 0x3046 <__divmodhi4_exit>

00003038 <__divmodhi4_neg1>:
    3038:	90 95       	com	r25
    303a:	81 95       	neg	r24
    303c:	9f 4f       	sbci	r25, 0xFF	; 255
    303e:	08 95       	ret

00003040 <__divmodhi4_neg2>:
    3040:	70 95       	com	r23
    3042:	61 95       	neg	r22
    3044:	7f 4f       	sbci	r23, 0xFF	; 255

00003046 <__divmodhi4_exit>:
    3046:	08 95       	ret

00003048 <__tablejump2__>:
    3048:	ee 0f       	add	r30, r30
    304a:	ff 1f       	adc	r31, r31
    304c:	05 90       	lpm	r0, Z+
    304e:	f4 91       	lpm	r31, Z
    3050:	e0 2d       	mov	r30, r0
    3052:	09 94       	ijmp

00003054 <__prologue_saves__>:
    3054:	2f 92       	push	r2
    3056:	3f 92       	push	r3
    3058:	4f 92       	push	r4
    305a:	5f 92       	push	r5
    305c:	6f 92       	push	r6
    305e:	7f 92       	push	r7
    3060:	8f 92       	push	r8
    3062:	9f 92       	push	r9
    3064:	af 92       	push	r10
    3066:	bf 92       	push	r11
    3068:	cf 92       	push	r12
    306a:	df 92       	push	r13
    306c:	ef 92       	push	r14
    306e:	ff 92       	push	r15
    3070:	0f 93       	push	r16
    3072:	1f 93       	push	r17
    3074:	cf 93       	push	r28
    3076:	df 93       	push	r29
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
    307c:	ca 1b       	sub	r28, r26
    307e:	db 0b       	sbc	r29, r27
    3080:	cd bf       	out	0x3d, r28	; 61
    3082:	de bf       	out	0x3e, r29	; 62
    3084:	09 94       	ijmp

00003086 <__epilogue_restores__>:
    3086:	2a 88       	ldd	r2, Y+18	; 0x12
    3088:	39 88       	ldd	r3, Y+17	; 0x11
    308a:	48 88       	ldd	r4, Y+16	; 0x10
    308c:	5f 84       	ldd	r5, Y+15	; 0x0f
    308e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3090:	7d 84       	ldd	r7, Y+13	; 0x0d
    3092:	8c 84       	ldd	r8, Y+12	; 0x0c
    3094:	9b 84       	ldd	r9, Y+11	; 0x0b
    3096:	aa 84       	ldd	r10, Y+10	; 0x0a
    3098:	b9 84       	ldd	r11, Y+9	; 0x09
    309a:	c8 84       	ldd	r12, Y+8	; 0x08
    309c:	df 80       	ldd	r13, Y+7	; 0x07
    309e:	ee 80       	ldd	r14, Y+6	; 0x06
    30a0:	fd 80       	ldd	r15, Y+5	; 0x05
    30a2:	0c 81       	ldd	r16, Y+4	; 0x04
    30a4:	1b 81       	ldd	r17, Y+3	; 0x03
    30a6:	aa 81       	ldd	r26, Y+2	; 0x02
    30a8:	b9 81       	ldd	r27, Y+1	; 0x01
    30aa:	ce 0f       	add	r28, r30
    30ac:	d1 1d       	adc	r29, r1
    30ae:	cd bf       	out	0x3d, r28	; 61
    30b0:	de bf       	out	0x3e, r29	; 62
    30b2:	ed 01       	movw	r28, r26
    30b4:	08 95       	ret

000030b6 <__udivmodhi4>:
    30b6:	aa 1b       	sub	r26, r26
    30b8:	bb 1b       	sub	r27, r27
    30ba:	51 e1       	ldi	r21, 0x11	; 17
    30bc:	07 c0       	rjmp	.+14     	; 0x30cc <__udivmodhi4_ep>

000030be <__udivmodhi4_loop>:
    30be:	aa 1f       	adc	r26, r26
    30c0:	bb 1f       	adc	r27, r27
    30c2:	a6 17       	cp	r26, r22
    30c4:	b7 07       	cpc	r27, r23
    30c6:	10 f0       	brcs	.+4      	; 0x30cc <__udivmodhi4_ep>
    30c8:	a6 1b       	sub	r26, r22
    30ca:	b7 0b       	sbc	r27, r23

000030cc <__udivmodhi4_ep>:
    30cc:	88 1f       	adc	r24, r24
    30ce:	99 1f       	adc	r25, r25
    30d0:	5a 95       	dec	r21
    30d2:	a9 f7       	brne	.-22     	; 0x30be <__udivmodhi4_loop>
    30d4:	80 95       	com	r24
    30d6:	90 95       	com	r25
    30d8:	bc 01       	movw	r22, r24
    30da:	cd 01       	movw	r24, r26
    30dc:	08 95       	ret

000030de <__ftoa_engine>:
    30de:	28 30       	cpi	r18, 0x08	; 8
    30e0:	08 f0       	brcs	.+2      	; 0x30e4 <__ftoa_engine+0x6>
    30e2:	27 e0       	ldi	r18, 0x07	; 7
    30e4:	33 27       	eor	r19, r19
    30e6:	da 01       	movw	r26, r20
    30e8:	99 0f       	add	r25, r25
    30ea:	31 1d       	adc	r19, r1
    30ec:	87 fd       	sbrc	r24, 7
    30ee:	91 60       	ori	r25, 0x01	; 1
    30f0:	00 96       	adiw	r24, 0x00	; 0
    30f2:	61 05       	cpc	r22, r1
    30f4:	71 05       	cpc	r23, r1
    30f6:	39 f4       	brne	.+14     	; 0x3106 <__ftoa_engine+0x28>
    30f8:	32 60       	ori	r19, 0x02	; 2
    30fa:	2e 5f       	subi	r18, 0xFE	; 254
    30fc:	3d 93       	st	X+, r19
    30fe:	30 e3       	ldi	r19, 0x30	; 48
    3100:	2a 95       	dec	r18
    3102:	e1 f7       	brne	.-8      	; 0x30fc <__ftoa_engine+0x1e>
    3104:	08 95       	ret
    3106:	9f 3f       	cpi	r25, 0xFF	; 255
    3108:	30 f0       	brcs	.+12     	; 0x3116 <__ftoa_engine+0x38>
    310a:	80 38       	cpi	r24, 0x80	; 128
    310c:	71 05       	cpc	r23, r1
    310e:	61 05       	cpc	r22, r1
    3110:	09 f0       	breq	.+2      	; 0x3114 <__ftoa_engine+0x36>
    3112:	3c 5f       	subi	r19, 0xFC	; 252
    3114:	3c 5f       	subi	r19, 0xFC	; 252
    3116:	3d 93       	st	X+, r19
    3118:	91 30       	cpi	r25, 0x01	; 1
    311a:	08 f0       	brcs	.+2      	; 0x311e <__ftoa_engine+0x40>
    311c:	80 68       	ori	r24, 0x80	; 128
    311e:	91 1d       	adc	r25, r1
    3120:	df 93       	push	r29
    3122:	cf 93       	push	r28
    3124:	1f 93       	push	r17
    3126:	0f 93       	push	r16
    3128:	ff 92       	push	r15
    312a:	ef 92       	push	r14
    312c:	19 2f       	mov	r17, r25
    312e:	98 7f       	andi	r25, 0xF8	; 248
    3130:	96 95       	lsr	r25
    3132:	e9 2f       	mov	r30, r25
    3134:	96 95       	lsr	r25
    3136:	96 95       	lsr	r25
    3138:	e9 0f       	add	r30, r25
    313a:	ff 27       	eor	r31, r31
    313c:	e4 59       	subi	r30, 0x94	; 148
    313e:	fe 4f       	sbci	r31, 0xFE	; 254
    3140:	99 27       	eor	r25, r25
    3142:	33 27       	eor	r19, r19
    3144:	ee 24       	eor	r14, r14
    3146:	ff 24       	eor	r15, r15
    3148:	a7 01       	movw	r20, r14
    314a:	e7 01       	movw	r28, r14
    314c:	05 90       	lpm	r0, Z+
    314e:	08 94       	sec
    3150:	07 94       	ror	r0
    3152:	28 f4       	brcc	.+10     	; 0x315e <__ftoa_engine+0x80>
    3154:	36 0f       	add	r19, r22
    3156:	e7 1e       	adc	r14, r23
    3158:	f8 1e       	adc	r15, r24
    315a:	49 1f       	adc	r20, r25
    315c:	51 1d       	adc	r21, r1
    315e:	66 0f       	add	r22, r22
    3160:	77 1f       	adc	r23, r23
    3162:	88 1f       	adc	r24, r24
    3164:	99 1f       	adc	r25, r25
    3166:	06 94       	lsr	r0
    3168:	a1 f7       	brne	.-24     	; 0x3152 <__ftoa_engine+0x74>
    316a:	05 90       	lpm	r0, Z+
    316c:	07 94       	ror	r0
    316e:	28 f4       	brcc	.+10     	; 0x317a <__ftoa_engine+0x9c>
    3170:	e7 0e       	add	r14, r23
    3172:	f8 1e       	adc	r15, r24
    3174:	49 1f       	adc	r20, r25
    3176:	56 1f       	adc	r21, r22
    3178:	c1 1d       	adc	r28, r1
    317a:	77 0f       	add	r23, r23
    317c:	88 1f       	adc	r24, r24
    317e:	99 1f       	adc	r25, r25
    3180:	66 1f       	adc	r22, r22
    3182:	06 94       	lsr	r0
    3184:	a1 f7       	brne	.-24     	; 0x316e <__ftoa_engine+0x90>
    3186:	05 90       	lpm	r0, Z+
    3188:	07 94       	ror	r0
    318a:	28 f4       	brcc	.+10     	; 0x3196 <__ftoa_engine+0xb8>
    318c:	f8 0e       	add	r15, r24
    318e:	49 1f       	adc	r20, r25
    3190:	56 1f       	adc	r21, r22
    3192:	c7 1f       	adc	r28, r23
    3194:	d1 1d       	adc	r29, r1
    3196:	88 0f       	add	r24, r24
    3198:	99 1f       	adc	r25, r25
    319a:	66 1f       	adc	r22, r22
    319c:	77 1f       	adc	r23, r23
    319e:	06 94       	lsr	r0
    31a0:	a1 f7       	brne	.-24     	; 0x318a <__ftoa_engine+0xac>
    31a2:	05 90       	lpm	r0, Z+
    31a4:	07 94       	ror	r0
    31a6:	20 f4       	brcc	.+8      	; 0x31b0 <__ftoa_engine+0xd2>
    31a8:	49 0f       	add	r20, r25
    31aa:	56 1f       	adc	r21, r22
    31ac:	c7 1f       	adc	r28, r23
    31ae:	d8 1f       	adc	r29, r24
    31b0:	99 0f       	add	r25, r25
    31b2:	66 1f       	adc	r22, r22
    31b4:	77 1f       	adc	r23, r23
    31b6:	88 1f       	adc	r24, r24
    31b8:	06 94       	lsr	r0
    31ba:	a9 f7       	brne	.-22     	; 0x31a6 <__ftoa_engine+0xc8>
    31bc:	84 91       	lpm	r24, Z
    31be:	10 95       	com	r17
    31c0:	17 70       	andi	r17, 0x07	; 7
    31c2:	41 f0       	breq	.+16     	; 0x31d4 <__ftoa_engine+0xf6>
    31c4:	d6 95       	lsr	r29
    31c6:	c7 95       	ror	r28
    31c8:	57 95       	ror	r21
    31ca:	47 95       	ror	r20
    31cc:	f7 94       	ror	r15
    31ce:	e7 94       	ror	r14
    31d0:	1a 95       	dec	r17
    31d2:	c1 f7       	brne	.-16     	; 0x31c4 <__ftoa_engine+0xe6>
    31d4:	e2 e1       	ldi	r30, 0x12	; 18
    31d6:	f1 e0       	ldi	r31, 0x01	; 1
    31d8:	68 94       	set
    31da:	15 90       	lpm	r1, Z+
    31dc:	15 91       	lpm	r17, Z+
    31de:	35 91       	lpm	r19, Z+
    31e0:	65 91       	lpm	r22, Z+
    31e2:	95 91       	lpm	r25, Z+
    31e4:	05 90       	lpm	r0, Z+
    31e6:	7f e2       	ldi	r23, 0x2F	; 47
    31e8:	73 95       	inc	r23
    31ea:	e1 18       	sub	r14, r1
    31ec:	f1 0a       	sbc	r15, r17
    31ee:	43 0b       	sbc	r20, r19
    31f0:	56 0b       	sbc	r21, r22
    31f2:	c9 0b       	sbc	r28, r25
    31f4:	d0 09       	sbc	r29, r0
    31f6:	c0 f7       	brcc	.-16     	; 0x31e8 <__ftoa_engine+0x10a>
    31f8:	e1 0c       	add	r14, r1
    31fa:	f1 1e       	adc	r15, r17
    31fc:	43 1f       	adc	r20, r19
    31fe:	56 1f       	adc	r21, r22
    3200:	c9 1f       	adc	r28, r25
    3202:	d0 1d       	adc	r29, r0
    3204:	7e f4       	brtc	.+30     	; 0x3224 <__ftoa_engine+0x146>
    3206:	70 33       	cpi	r23, 0x30	; 48
    3208:	11 f4       	brne	.+4      	; 0x320e <__ftoa_engine+0x130>
    320a:	8a 95       	dec	r24
    320c:	e6 cf       	rjmp	.-52     	; 0x31da <__ftoa_engine+0xfc>
    320e:	e8 94       	clt
    3210:	01 50       	subi	r16, 0x01	; 1
    3212:	30 f0       	brcs	.+12     	; 0x3220 <__ftoa_engine+0x142>
    3214:	08 0f       	add	r16, r24
    3216:	0a f4       	brpl	.+2      	; 0x321a <__ftoa_engine+0x13c>
    3218:	00 27       	eor	r16, r16
    321a:	02 17       	cp	r16, r18
    321c:	08 f4       	brcc	.+2      	; 0x3220 <__ftoa_engine+0x142>
    321e:	20 2f       	mov	r18, r16
    3220:	23 95       	inc	r18
    3222:	02 2f       	mov	r16, r18
    3224:	7a 33       	cpi	r23, 0x3A	; 58
    3226:	28 f0       	brcs	.+10     	; 0x3232 <__ftoa_engine+0x154>
    3228:	79 e3       	ldi	r23, 0x39	; 57
    322a:	7d 93       	st	X+, r23
    322c:	2a 95       	dec	r18
    322e:	e9 f7       	brne	.-6      	; 0x322a <__ftoa_engine+0x14c>
    3230:	10 c0       	rjmp	.+32     	; 0x3252 <__ftoa_engine+0x174>
    3232:	7d 93       	st	X+, r23
    3234:	2a 95       	dec	r18
    3236:	89 f6       	brne	.-94     	; 0x31da <__ftoa_engine+0xfc>
    3238:	06 94       	lsr	r0
    323a:	97 95       	ror	r25
    323c:	67 95       	ror	r22
    323e:	37 95       	ror	r19
    3240:	17 95       	ror	r17
    3242:	17 94       	ror	r1
    3244:	e1 18       	sub	r14, r1
    3246:	f1 0a       	sbc	r15, r17
    3248:	43 0b       	sbc	r20, r19
    324a:	56 0b       	sbc	r21, r22
    324c:	c9 0b       	sbc	r28, r25
    324e:	d0 09       	sbc	r29, r0
    3250:	98 f0       	brcs	.+38     	; 0x3278 <__ftoa_engine+0x19a>
    3252:	23 95       	inc	r18
    3254:	7e 91       	ld	r23, -X
    3256:	73 95       	inc	r23
    3258:	7a 33       	cpi	r23, 0x3A	; 58
    325a:	08 f0       	brcs	.+2      	; 0x325e <__ftoa_engine+0x180>
    325c:	70 e3       	ldi	r23, 0x30	; 48
    325e:	7c 93       	st	X, r23
    3260:	20 13       	cpse	r18, r16
    3262:	b8 f7       	brcc	.-18     	; 0x3252 <__ftoa_engine+0x174>
    3264:	7e 91       	ld	r23, -X
    3266:	70 61       	ori	r23, 0x10	; 16
    3268:	7d 93       	st	X+, r23
    326a:	30 f0       	brcs	.+12     	; 0x3278 <__ftoa_engine+0x19a>
    326c:	83 95       	inc	r24
    326e:	71 e3       	ldi	r23, 0x31	; 49
    3270:	7d 93       	st	X+, r23
    3272:	70 e3       	ldi	r23, 0x30	; 48
    3274:	2a 95       	dec	r18
    3276:	e1 f7       	brne	.-8      	; 0x3270 <__ftoa_engine+0x192>
    3278:	11 24       	eor	r1, r1
    327a:	ef 90       	pop	r14
    327c:	ff 90       	pop	r15
    327e:	0f 91       	pop	r16
    3280:	1f 91       	pop	r17
    3282:	cf 91       	pop	r28
    3284:	df 91       	pop	r29
    3286:	99 27       	eor	r25, r25
    3288:	87 fd       	sbrc	r24, 7
    328a:	90 95       	com	r25
    328c:	08 95       	ret

0000328e <strnlen_P>:
    328e:	fc 01       	movw	r30, r24
    3290:	05 90       	lpm	r0, Z+
    3292:	61 50       	subi	r22, 0x01	; 1
    3294:	70 40       	sbci	r23, 0x00	; 0
    3296:	01 10       	cpse	r0, r1
    3298:	d8 f7       	brcc	.-10     	; 0x3290 <strnlen_P+0x2>
    329a:	80 95       	com	r24
    329c:	90 95       	com	r25
    329e:	8e 0f       	add	r24, r30
    32a0:	9f 1f       	adc	r25, r31
    32a2:	08 95       	ret

000032a4 <strcat>:
    32a4:	fb 01       	movw	r30, r22
    32a6:	dc 01       	movw	r26, r24
    32a8:	0d 90       	ld	r0, X+
    32aa:	00 20       	and	r0, r0
    32ac:	e9 f7       	brne	.-6      	; 0x32a8 <strcat+0x4>
    32ae:	11 97       	sbiw	r26, 0x01	; 1
    32b0:	01 90       	ld	r0, Z+
    32b2:	0d 92       	st	X+, r0
    32b4:	00 20       	and	r0, r0
    32b6:	e1 f7       	brne	.-8      	; 0x32b0 <strcat+0xc>
    32b8:	08 95       	ret

000032ba <strcpy>:
    32ba:	fb 01       	movw	r30, r22
    32bc:	dc 01       	movw	r26, r24
    32be:	01 90       	ld	r0, Z+
    32c0:	0d 92       	st	X+, r0
    32c2:	00 20       	and	r0, r0
    32c4:	e1 f7       	brne	.-8      	; 0x32be <strcpy+0x4>
    32c6:	08 95       	ret

000032c8 <strnlen>:
    32c8:	fc 01       	movw	r30, r24
    32ca:	61 50       	subi	r22, 0x01	; 1
    32cc:	70 40       	sbci	r23, 0x00	; 0
    32ce:	01 90       	ld	r0, Z+
    32d0:	01 10       	cpse	r0, r1
    32d2:	d8 f7       	brcc	.-10     	; 0x32ca <strnlen+0x2>
    32d4:	80 95       	com	r24
    32d6:	90 95       	com	r25
    32d8:	8e 0f       	add	r24, r30
    32da:	9f 1f       	adc	r25, r31
    32dc:	08 95       	ret

000032de <fputc>:
    32de:	0f 93       	push	r16
    32e0:	1f 93       	push	r17
    32e2:	cf 93       	push	r28
    32e4:	df 93       	push	r29
    32e6:	fb 01       	movw	r30, r22
    32e8:	23 81       	ldd	r18, Z+3	; 0x03
    32ea:	21 fd       	sbrc	r18, 1
    32ec:	03 c0       	rjmp	.+6      	; 0x32f4 <fputc+0x16>
    32ee:	8f ef       	ldi	r24, 0xFF	; 255
    32f0:	9f ef       	ldi	r25, 0xFF	; 255
    32f2:	2c c0       	rjmp	.+88     	; 0x334c <fputc+0x6e>
    32f4:	22 ff       	sbrs	r18, 2
    32f6:	16 c0       	rjmp	.+44     	; 0x3324 <fputc+0x46>
    32f8:	46 81       	ldd	r20, Z+6	; 0x06
    32fa:	57 81       	ldd	r21, Z+7	; 0x07
    32fc:	24 81       	ldd	r18, Z+4	; 0x04
    32fe:	35 81       	ldd	r19, Z+5	; 0x05
    3300:	42 17       	cp	r20, r18
    3302:	53 07       	cpc	r21, r19
    3304:	44 f4       	brge	.+16     	; 0x3316 <fputc+0x38>
    3306:	a0 81       	ld	r26, Z
    3308:	b1 81       	ldd	r27, Z+1	; 0x01
    330a:	9d 01       	movw	r18, r26
    330c:	2f 5f       	subi	r18, 0xFF	; 255
    330e:	3f 4f       	sbci	r19, 0xFF	; 255
    3310:	20 83       	st	Z, r18
    3312:	31 83       	std	Z+1, r19	; 0x01
    3314:	8c 93       	st	X, r24
    3316:	26 81       	ldd	r18, Z+6	; 0x06
    3318:	37 81       	ldd	r19, Z+7	; 0x07
    331a:	2f 5f       	subi	r18, 0xFF	; 255
    331c:	3f 4f       	sbci	r19, 0xFF	; 255
    331e:	26 83       	std	Z+6, r18	; 0x06
    3320:	37 83       	std	Z+7, r19	; 0x07
    3322:	14 c0       	rjmp	.+40     	; 0x334c <fputc+0x6e>
    3324:	8b 01       	movw	r16, r22
    3326:	ec 01       	movw	r28, r24
    3328:	fb 01       	movw	r30, r22
    332a:	00 84       	ldd	r0, Z+8	; 0x08
    332c:	f1 85       	ldd	r31, Z+9	; 0x09
    332e:	e0 2d       	mov	r30, r0
    3330:	09 95       	icall
    3332:	89 2b       	or	r24, r25
    3334:	e1 f6       	brne	.-72     	; 0x32ee <fputc+0x10>
    3336:	d8 01       	movw	r26, r16
    3338:	16 96       	adiw	r26, 0x06	; 6
    333a:	8d 91       	ld	r24, X+
    333c:	9c 91       	ld	r25, X
    333e:	17 97       	sbiw	r26, 0x07	; 7
    3340:	01 96       	adiw	r24, 0x01	; 1
    3342:	16 96       	adiw	r26, 0x06	; 6
    3344:	8d 93       	st	X+, r24
    3346:	9c 93       	st	X, r25
    3348:	17 97       	sbiw	r26, 0x07	; 7
    334a:	ce 01       	movw	r24, r28
    334c:	df 91       	pop	r29
    334e:	cf 91       	pop	r28
    3350:	1f 91       	pop	r17
    3352:	0f 91       	pop	r16
    3354:	08 95       	ret

00003356 <sprintf>:
    3356:	ae e0       	ldi	r26, 0x0E	; 14
    3358:	b0 e0       	ldi	r27, 0x00	; 0
    335a:	e1 eb       	ldi	r30, 0xB1	; 177
    335c:	f9 e1       	ldi	r31, 0x19	; 25
    335e:	0c 94 38 18 	jmp	0x3070	; 0x3070 <__prologue_saves__+0x1c>
    3362:	0d 89       	ldd	r16, Y+21	; 0x15
    3364:	1e 89       	ldd	r17, Y+22	; 0x16
    3366:	86 e0       	ldi	r24, 0x06	; 6
    3368:	8c 83       	std	Y+4, r24	; 0x04
    336a:	09 83       	std	Y+1, r16	; 0x01
    336c:	1a 83       	std	Y+2, r17	; 0x02
    336e:	8f ef       	ldi	r24, 0xFF	; 255
    3370:	9f e7       	ldi	r25, 0x7F	; 127
    3372:	8d 83       	std	Y+5, r24	; 0x05
    3374:	9e 83       	std	Y+6, r25	; 0x06
    3376:	ae 01       	movw	r20, r28
    3378:	47 5e       	subi	r20, 0xE7	; 231
    337a:	5f 4f       	sbci	r21, 0xFF	; 255
    337c:	6f 89       	ldd	r22, Y+23	; 0x17
    337e:	78 8d       	ldd	r23, Y+24	; 0x18
    3380:	ce 01       	movw	r24, r28
    3382:	01 96       	adiw	r24, 0x01	; 1
    3384:	0e 94 93 14 	call	0x2926	; 0x2926 <vfprintf>
    3388:	ef 81       	ldd	r30, Y+7	; 0x07
    338a:	f8 85       	ldd	r31, Y+8	; 0x08
    338c:	e0 0f       	add	r30, r16
    338e:	f1 1f       	adc	r31, r17
    3390:	10 82       	st	Z, r1
    3392:	2e 96       	adiw	r28, 0x0e	; 14
    3394:	e4 e0       	ldi	r30, 0x04	; 4
    3396:	0c 94 51 18 	jmp	0x30a2	; 0x30a2 <__epilogue_restores__+0x1c>

0000339a <__ultoa_invert>:
    339a:	fa 01       	movw	r30, r20
    339c:	aa 27       	eor	r26, r26
    339e:	28 30       	cpi	r18, 0x08	; 8
    33a0:	51 f1       	breq	.+84     	; 0x33f6 <__ultoa_invert+0x5c>
    33a2:	20 31       	cpi	r18, 0x10	; 16
    33a4:	81 f1       	breq	.+96     	; 0x3406 <__ultoa_invert+0x6c>
    33a6:	e8 94       	clt
    33a8:	6f 93       	push	r22
    33aa:	6e 7f       	andi	r22, 0xFE	; 254
    33ac:	6e 5f       	subi	r22, 0xFE	; 254
    33ae:	7f 4f       	sbci	r23, 0xFF	; 255
    33b0:	8f 4f       	sbci	r24, 0xFF	; 255
    33b2:	9f 4f       	sbci	r25, 0xFF	; 255
    33b4:	af 4f       	sbci	r26, 0xFF	; 255
    33b6:	b1 e0       	ldi	r27, 0x01	; 1
    33b8:	3e d0       	rcall	.+124    	; 0x3436 <__ultoa_invert+0x9c>
    33ba:	b4 e0       	ldi	r27, 0x04	; 4
    33bc:	3c d0       	rcall	.+120    	; 0x3436 <__ultoa_invert+0x9c>
    33be:	67 0f       	add	r22, r23
    33c0:	78 1f       	adc	r23, r24
    33c2:	89 1f       	adc	r24, r25
    33c4:	9a 1f       	adc	r25, r26
    33c6:	a1 1d       	adc	r26, r1
    33c8:	68 0f       	add	r22, r24
    33ca:	79 1f       	adc	r23, r25
    33cc:	8a 1f       	adc	r24, r26
    33ce:	91 1d       	adc	r25, r1
    33d0:	a1 1d       	adc	r26, r1
    33d2:	6a 0f       	add	r22, r26
    33d4:	71 1d       	adc	r23, r1
    33d6:	81 1d       	adc	r24, r1
    33d8:	91 1d       	adc	r25, r1
    33da:	a1 1d       	adc	r26, r1
    33dc:	20 d0       	rcall	.+64     	; 0x341e <__ultoa_invert+0x84>
    33de:	09 f4       	brne	.+2      	; 0x33e2 <__ultoa_invert+0x48>
    33e0:	68 94       	set
    33e2:	3f 91       	pop	r19
    33e4:	2a e0       	ldi	r18, 0x0A	; 10
    33e6:	26 9f       	mul	r18, r22
    33e8:	11 24       	eor	r1, r1
    33ea:	30 19       	sub	r19, r0
    33ec:	30 5d       	subi	r19, 0xD0	; 208
    33ee:	31 93       	st	Z+, r19
    33f0:	de f6       	brtc	.-74     	; 0x33a8 <__ultoa_invert+0xe>
    33f2:	cf 01       	movw	r24, r30
    33f4:	08 95       	ret
    33f6:	46 2f       	mov	r20, r22
    33f8:	47 70       	andi	r20, 0x07	; 7
    33fa:	40 5d       	subi	r20, 0xD0	; 208
    33fc:	41 93       	st	Z+, r20
    33fe:	b3 e0       	ldi	r27, 0x03	; 3
    3400:	0f d0       	rcall	.+30     	; 0x3420 <__ultoa_invert+0x86>
    3402:	c9 f7       	brne	.-14     	; 0x33f6 <__ultoa_invert+0x5c>
    3404:	f6 cf       	rjmp	.-20     	; 0x33f2 <__ultoa_invert+0x58>
    3406:	46 2f       	mov	r20, r22
    3408:	4f 70       	andi	r20, 0x0F	; 15
    340a:	40 5d       	subi	r20, 0xD0	; 208
    340c:	4a 33       	cpi	r20, 0x3A	; 58
    340e:	18 f0       	brcs	.+6      	; 0x3416 <__ultoa_invert+0x7c>
    3410:	49 5d       	subi	r20, 0xD9	; 217
    3412:	31 fd       	sbrc	r19, 1
    3414:	40 52       	subi	r20, 0x20	; 32
    3416:	41 93       	st	Z+, r20
    3418:	02 d0       	rcall	.+4      	; 0x341e <__ultoa_invert+0x84>
    341a:	a9 f7       	brne	.-22     	; 0x3406 <__ultoa_invert+0x6c>
    341c:	ea cf       	rjmp	.-44     	; 0x33f2 <__ultoa_invert+0x58>
    341e:	b4 e0       	ldi	r27, 0x04	; 4
    3420:	a6 95       	lsr	r26
    3422:	97 95       	ror	r25
    3424:	87 95       	ror	r24
    3426:	77 95       	ror	r23
    3428:	67 95       	ror	r22
    342a:	ba 95       	dec	r27
    342c:	c9 f7       	brne	.-14     	; 0x3420 <__ultoa_invert+0x86>
    342e:	00 97       	sbiw	r24, 0x00	; 0
    3430:	61 05       	cpc	r22, r1
    3432:	71 05       	cpc	r23, r1
    3434:	08 95       	ret
    3436:	9b 01       	movw	r18, r22
    3438:	ac 01       	movw	r20, r24
    343a:	0a 2e       	mov	r0, r26
    343c:	06 94       	lsr	r0
    343e:	57 95       	ror	r21
    3440:	47 95       	ror	r20
    3442:	37 95       	ror	r19
    3444:	27 95       	ror	r18
    3446:	ba 95       	dec	r27
    3448:	c9 f7       	brne	.-14     	; 0x343c <__ultoa_invert+0xa2>
    344a:	62 0f       	add	r22, r18
    344c:	73 1f       	adc	r23, r19
    344e:	84 1f       	adc	r24, r20
    3450:	95 1f       	adc	r25, r21
    3452:	a0 1d       	adc	r26, r0
    3454:	08 95       	ret

00003456 <eeprom_read_block>:
    3456:	60 50       	subi	r22, 0x00	; 0
    3458:	7c 4e       	sbci	r23, 0xEC	; 236
    345a:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <memcpy>

0000345e <eeprom_update_block>:
    345e:	dc 01       	movw	r26, r24
    3460:	a4 0f       	add	r26, r20
    3462:	b5 1f       	adc	r27, r21
    3464:	41 50       	subi	r20, 0x01	; 1
    3466:	50 40       	sbci	r21, 0x00	; 0
    3468:	48 f0       	brcs	.+18     	; 0x347c <eeprom_update_block+0x1e>
    346a:	cb 01       	movw	r24, r22
    346c:	84 0f       	add	r24, r20
    346e:	95 1f       	adc	r25, r21
    3470:	2e 91       	ld	r18, -X
    3472:	0e 94 40 1a 	call	0x3480	; 0x3480 <eeprom_update_r18>
    3476:	41 50       	subi	r20, 0x01	; 1
    3478:	50 40       	sbci	r21, 0x00	; 0
    347a:	d0 f7       	brcc	.-12     	; 0x3470 <eeprom_update_block+0x12>
    347c:	08 95       	ret

0000347e <eeprom_update_byte>:
    347e:	26 2f       	mov	r18, r22

00003480 <eeprom_update_r18>:
    3480:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <eeprom_mapen>
    3484:	00 80       	ld	r0, Z
    3486:	02 16       	cp	r0, r18
    3488:	19 f0       	breq	.+6      	; 0x3490 <eeprom_update_r18+0x10>
    348a:	0e 94 4b 1a 	call	0x3496	; 0x3496 <eeprom_write_r18>
    348e:	01 97       	sbiw	r24, 0x01	; 1
    3490:	01 97       	sbiw	r24, 0x01	; 1
    3492:	08 95       	ret

00003494 <eeprom_write_byte>:
    3494:	26 2f       	mov	r18, r22

00003496 <eeprom_write_r18>:
    3496:	af 93       	push	r26
    3498:	bf 93       	push	r27
    349a:	e0 e0       	ldi	r30, 0x00	; 0
    349c:	f0 e1       	ldi	r31, 0x10	; 16
    349e:	32 81       	ldd	r19, Z+2	; 0x02
    34a0:	31 fd       	sbrc	r19, 1
    34a2:	fd cf       	rjmp	.-6      	; 0x349e <eeprom_write_r18+0x8>
    34a4:	dc 01       	movw	r26, r24
    34a6:	a0 50       	subi	r26, 0x00	; 0
    34a8:	bc 4e       	sbci	r27, 0xEC	; 236
    34aa:	2c 93       	st	X, r18
    34ac:	2d e9       	ldi	r18, 0x9D	; 157
    34ae:	24 bf       	out	0x34, r18	; 52
    34b0:	23 e0       	ldi	r18, 0x03	; 3
    34b2:	20 83       	st	Z, r18
    34b4:	01 96       	adiw	r24, 0x01	; 1
    34b6:	bf 91       	pop	r27
    34b8:	af 91       	pop	r26
    34ba:	08 95       	ret

000034bc <eeprom_read_byte>:
    34bc:	03 d0       	rcall	.+6      	; 0x34c4 <eeprom_mapen>
    34be:	80 81       	ld	r24, Z
    34c0:	99 27       	eor	r25, r25
    34c2:	08 95       	ret

000034c4 <eeprom_mapen>:
    34c4:	fc 01       	movw	r30, r24
    34c6:	e0 50       	subi	r30, 0x00	; 0
    34c8:	fc 4e       	sbci	r31, 0xEC	; 236
    34ca:	08 95       	ret

000034cc <memcpy>:
    34cc:	fb 01       	movw	r30, r22
    34ce:	dc 01       	movw	r26, r24
    34d0:	02 c0       	rjmp	.+4      	; 0x34d6 <memcpy+0xa>
    34d2:	01 90       	ld	r0, Z+
    34d4:	0d 92       	st	X+, r0
    34d6:	41 50       	subi	r20, 0x01	; 1
    34d8:	50 40       	sbci	r21, 0x00	; 0
    34da:	d8 f7       	brcc	.-10     	; 0x34d2 <memcpy+0x6>
    34dc:	08 95       	ret

000034de <_exit>:
    34de:	f8 94       	cli

000034e0 <__stop_program>:
    34e0:	ff cf       	rjmp	.-2      	; 0x34e0 <__stop_program>
