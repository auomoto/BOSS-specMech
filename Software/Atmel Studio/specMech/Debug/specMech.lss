
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  00003d6b  00003e1f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b3a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000231  00007b3a  00003b3a  00003bee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000052d  00802802  00802802  00003e21  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00003e21  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e80  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000560  00000000  00000000  00003ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009037  00000000  00000000  00004420  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000040de  00000000  00000000  0000d457  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000393a  00000000  00000000  00011535  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c18  00000000  00000000  00014e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002089  00000000  00000000  00015a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003420  00000000  00000000  00017b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000300  00000000  00000000  0001af31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 06 01 	jmp	0x20c	; 0x20c <__ctors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       c:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__vector_3>
      10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      28:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      2c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      38:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      40:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      44:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__vector_17>
      48:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__vector_18>
      4c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      50:	0c 94 49 0d 	jmp	0x1a92	; 0x1a92 <__vector_20>
      54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      60:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      68:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__vector_26>
      6c:	0c 94 1e 15 	jmp	0x2a3c	; 0x2a3c <__vector_27>
      70:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      74:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__vector_29>
      78:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      7c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      80:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      84:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      88:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      8c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      90:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      94:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__vector_37>
      98:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <__vector_38>
      9c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a0:	51 0e       	add	r5, r17
      a2:	85 12       	cpse	r8, r21
      a4:	85 12       	cpse	r8, r21
      a6:	85 12       	cpse	r8, r21
      a8:	85 12       	cpse	r8, r21
      aa:	85 12       	cpse	r8, r21
      ac:	85 12       	cpse	r8, r21
      ae:	85 12       	cpse	r8, r21
      b0:	85 12       	cpse	r8, r21
      b2:	85 12       	cpse	r8, r21
      b4:	85 12       	cpse	r8, r21
      b6:	85 12       	cpse	r8, r21
      b8:	85 12       	cpse	r8, r21
      ba:	85 12       	cpse	r8, r21
      bc:	85 12       	cpse	r8, r21
      be:	85 12       	cpse	r8, r21
      c0:	85 12       	cpse	r8, r21
      c2:	85 12       	cpse	r8, r21
      c4:	85 12       	cpse	r8, r21
      c6:	85 12       	cpse	r8, r21
      c8:	32 12       	cpse	r3, r18
      ca:	85 12       	cpse	r8, r21
      cc:	85 12       	cpse	r8, r21
      ce:	85 12       	cpse	r8, r21
      d0:	85 12       	cpse	r8, r21
      d2:	85 12       	cpse	r8, r21
      d4:	85 12       	cpse	r8, r21
      d6:	85 12       	cpse	r8, r21
      d8:	85 12       	cpse	r8, r21
      da:	85 12       	cpse	r8, r21
      dc:	85 12       	cpse	r8, r21
      de:	85 12       	cpse	r8, r21
      e0:	85 12       	cpse	r8, r21
      e2:	85 12       	cpse	r8, r21
      e4:	85 12       	cpse	r8, r21
      e6:	9c 0e       	add	r9, r28
      e8:	85 12       	cpse	r8, r21
      ea:	85 12       	cpse	r8, r21
      ec:	85 12       	cpse	r8, r21
      ee:	85 12       	cpse	r8, r21
      f0:	85 12       	cpse	r8, r21
      f2:	85 12       	cpse	r8, r21
      f4:	85 12       	cpse	r8, r21
      f6:	85 12       	cpse	r8, r21
      f8:	85 12       	cpse	r8, r21
      fa:	d5 0f       	add	r29, r21
      fc:	c4 10       	cpse	r12, r4
      fe:	85 12       	cpse	r8, r21
     100:	85 12       	cpse	r8, r21
     102:	85 12       	cpse	r8, r21
     104:	63 11       	cpse	r22, r3
     106:	85 12       	cpse	r8, r21
     108:	c3 11       	cpse	r28, r3

0000010a <__trampolines_end>:
     10a:	6e 61       	ori	r22, 0x1E	; 30
     10c:	6e 00       	.word	0x006e	; ????

0000010e <__c.2332>:
     10e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     11e:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     12e:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     13e:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     14e:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     15e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     16e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     17e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     18e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     19e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1ae:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1be:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1ce:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1de:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1ee:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1fe:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000020c <__ctors_end>:
     20c:	11 24       	eor	r1, r1
     20e:	1f be       	out	0x3f, r1	; 63
     210:	cf ef       	ldi	r28, 0xFF	; 255
     212:	cd bf       	out	0x3d, r28	; 61
     214:	df e3       	ldi	r29, 0x3F	; 63
     216:	de bf       	out	0x3e, r29	; 62

00000218 <__do_copy_data>:
     218:	18 e2       	ldi	r17, 0x28	; 40
     21a:	a0 e0       	ldi	r26, 0x00	; 0
     21c:	b8 e2       	ldi	r27, 0x28	; 40
     21e:	eb e6       	ldi	r30, 0x6B	; 107
     220:	fd e3       	ldi	r31, 0x3D	; 61
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x10>
     224:	05 90       	lpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a2 30       	cpi	r26, 0x02	; 2
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0xc>

0000022e <__do_clear_bss>:
     22e:	2d e2       	ldi	r18, 0x2D	; 45
     230:	a2 e0       	ldi	r26, 0x02	; 2
     232:	b8 e2       	ldi	r27, 0x28	; 40
     234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
     236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
     238:	af 32       	cpi	r26, 0x2F	; 47
     23a:	b2 07       	cpc	r27, r18
     23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>
     23e:	0e 94 ba 07 	call	0xf74	; 0xf74 <main>
     242:	0c 94 9b 1d 	jmp	0x3b36	; 0x3b36 <_exit>

00000246 <__bad_interrupt>:
     246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
float read_AD590(uint8_t sensor)
{
     24a:	cf 92       	push	r12
     24c:	df 92       	push	r13
     24e:	ef 92       	push	r14
     250:	ff 92       	push	r15
     252:	cf 93       	push	r28

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     254:	81 30       	cpi	r24, 0x01	; 1
     256:	c9 f0       	breq	.+50     	; 0x28a <read_AD590+0x40>
     258:	18 f0       	brcs	.+6      	; 0x260 <read_AD590+0x16>
     25a:	82 30       	cpi	r24, 0x02	; 2
     25c:	61 f0       	breq	.+24     	; 0x276 <read_AD590+0x2c>
     25e:	10 c0       	rjmp	.+32     	; 0x280 <read_AD590+0x36>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     260:	0f 2e       	mov	r0, r31
     262:	f3 e3       	ldi	r31, 0x33	; 51
     264:	cf 2e       	mov	r12, r31
     266:	dc 2c       	mov	r13, r12
     268:	f3 ef       	ldi	r31, 0xF3	; 243
     26a:	ef 2e       	mov	r14, r31
     26c:	f0 e4       	ldi	r31, 0x40	; 64
     26e:	ff 2e       	mov	r15, r31
     270:	f0 2d       	mov	r31, r0
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     272:	c1 e0       	ldi	r28, 0x01	; 1
     274:	0e c0       	rjmp	.+28     	; 0x292 <read_AD590+0x48>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     276:	c1 2c       	mov	r12, r1
     278:	d1 2c       	mov	r13, r1
     27a:	76 01       	movw	r14, r12
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     27c:	c0 e1       	ldi	r28, 0x10	; 16
			offset = 0.0;
			break;
     27e:	09 c0       	rjmp	.+18     	; 0x292 <read_AD590+0x48>
{

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
     280:	c1 2c       	mov	r12, r1
     282:	d1 2c       	mov	r13, r1
     284:	76 01       	movw	r14, r12
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     286:	c0 e0       	ldi	r28, 0x00	; 0
			break;
     288:	04 c0       	rjmp	.+8      	; 0x292 <read_AD590+0x48>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     28a:	c1 2c       	mov	r12, r1
     28c:	d1 2c       	mov	r13, r1
     28e:	76 01       	movw	r14, r12
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     290:	c4 e0       	ldi	r28, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	66 e0       	ldi	r22, 0x06	; 6
     296:	87 e2       	ldi	r24, 0x27	; 39
     298:	0e 94 ed 07 	call	0xfda	; 0xfda <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     29c:	4c 2f       	mov	r20, r28
     29e:	40 95       	com	r20
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	87 e2       	ldi	r24, 0x27	; 39
     2a4:	0e 94 ed 07 	call	0xfda	; 0xfda <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     2a8:	4c 2f       	mov	r20, r28
     2aa:	6a e0       	ldi	r22, 0x0A	; 10
     2ac:	87 e2       	ldi	r24, 0x27	; 39
     2ae:	0e 94 ed 07 	call	0xfda	; 0xfda <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2b2:	86 e1       	ldi	r24, 0x16	; 22
     2b4:	8a 95       	dec	r24
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <read_AD590+0x6a>
     2b8:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	voltage = read_ADS1115(ADC_TE, PGA0512, AIN3, DR128);
     2ba:	20 e8       	ldi	r18, 0x80	; 128
     2bc:	40 e7       	ldi	r20, 0x70	; 112
     2be:	68 e0       	ldi	r22, 0x08	; 8
     2c0:	88 e4       	ldi	r24, 0x48	; 72
     2c2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_ADS1115>
	temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	4a e7       	ldi	r20, 0x7A	; 122
     2cc:	54 e4       	ldi	r21, 0x44	; 68
     2ce:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
     2d2:	23 e3       	ldi	r18, 0x33	; 51
     2d4:	33 e9       	ldi	r19, 0x93	; 147
     2d6:	48 e8       	ldi	r20, 0x88	; 136
     2d8:	53 e4       	ldi	r21, 0x43	; 67
     2da:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__subsf3>
     2de:	9b 01       	movw	r18, r22
     2e0:	ac 01       	movw	r20, r24
     2e2:	c7 01       	movw	r24, r14
     2e4:	b6 01       	movw	r22, r12
     2e6:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__addsf3>
	return(temperature);

}
     2ea:	cf 91       	pop	r28
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	08 95       	ret

000002f6 <read_ADS1115>:
		datarate - one of the eight selectable data rates. We chose the
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
float read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins, uint8_t datarate)
{
     2f6:	cf 92       	push	r12
     2f8:	df 92       	push	r13
     2fa:	ef 92       	push	r14
     2fc:	ff 92       	push	r15
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	d8 2f       	mov	r29, r24
     308:	f6 2e       	mov	r15, r22
	float scale, voltage;
	uint8_t confighi, configlo, retval, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     30a:	46 2b       	or	r20, r22
     30c:	c4 2f       	mov	r28, r20
     30e:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     310:	12 2f       	mov	r17, r18
     312:	13 60       	ori	r17, 0x03	; 3

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start condition
     314:	60 e0       	ldi	r22, 0x00	; 0
     316:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
     31a:	08 2f       	mov	r16, r24
     31c:	88 23       	and	r24, r24
     31e:	69 f0       	breq	.+26     	; 0x33a <read_ADS1115+0x44>
		stop_TWI();
     320:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
		return(retval);
     324:	60 2f       	mov	r22, r16
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__floatunsisf>
     330:	56 2f       	mov	r21, r22
     332:	47 2f       	mov	r20, r23
     334:	38 2f       	mov	r19, r24
     336:	29 2f       	mov	r18, r25
     338:	d0 c0       	rjmp	.+416    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	if ((retval = write_TWI(ADS1115CONFIG))) {		// Write the CONFIG register
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
     340:	08 2f       	mov	r16, r24
     342:	88 23       	and	r24, r24
     344:	69 f0       	breq	.+26     	; 0x360 <read_ADS1115+0x6a>
		stop_TWI();
     346:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
		return(retval);
     34a:	60 2f       	mov	r22, r16
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__floatunsisf>
     356:	56 2f       	mov	r21, r22
     358:	47 2f       	mov	r20, r23
     35a:	38 2f       	mov	r19, r24
     35c:	29 2f       	mov	r18, r25
     35e:	bd c0       	rjmp	.+378    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	if ((retval = write_TWI(confighi))) {			// Write high byte
     360:	8c 2f       	mov	r24, r28
     362:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
     366:	c8 2f       	mov	r28, r24
     368:	88 23       	and	r24, r24
     36a:	69 f0       	breq	.+26     	; 0x386 <read_ADS1115+0x90>
		stop_TWI();
     36c:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
		return(retval);
     370:	6c 2f       	mov	r22, r28
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__floatunsisf>
     37c:	56 2f       	mov	r21, r22
     37e:	47 2f       	mov	r20, r23
     380:	38 2f       	mov	r19, r24
     382:	29 2f       	mov	r18, r25
     384:	aa c0       	rjmp	.+340    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	if ((retval = write_TWI(configlo))) {			// Write low byte
     386:	81 2f       	mov	r24, r17
     388:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
     38c:	c8 2f       	mov	r28, r24
     38e:	88 23       	and	r24, r24
     390:	69 f0       	breq	.+26     	; 0x3ac <read_ADS1115+0xb6>
		stop_TWI();
     392:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
		return(retval);
     396:	6c 2f       	mov	r22, r28
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__floatunsisf>
     3a2:	56 2f       	mov	r21, r22
     3a4:	47 2f       	mov	r20, r23
     3a6:	38 2f       	mov	r19, r24
     3a8:	29 2f       	mov	r18, r25
     3aa:	97 c0       	rjmp	.+302    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	stop_TWI();
     3ac:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
     3b0:	8c e1       	ldi	r24, 0x1C	; 28
     3b2:	8a 95       	dec	r24
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <read_ADS1115+0xbc>

	_delay_us(25);									// Power-up time

	converting = YES;
     3b6:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     3b8:	09 c0       	rjmp	.+18     	; 0x3cc <read_ADS1115+0xd6>
		start_TWI(addr, TWIREAD);
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	8d 2f       	mov	r24, r29
     3be:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
     3c2:	0e 94 74 13 	call	0x26e8	; 0x26e8 <readlast_TWI>
		if (flag & 0b10000000) {			// or add a timer timeout
     3c6:	88 23       	and	r24, r24
     3c8:	0c f4       	brge	.+2      	; 0x3cc <read_ADS1115+0xd6>
			converting = NO;
     3ca:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     3cc:	c1 11       	cpse	r28, r1
     3ce:	f5 cf       	rjmp	.-22     	; 0x3ba <read_ADS1115+0xc4>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
		if (flag & 0b10000000) {			// or add a timer timeout
			converting = NO;
		}
	}
	stop_TWI();
     3d0:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>

	start_TWI(addr, TWIWRITE);
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	8d 2f       	mov	r24, r29
     3d8:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     3e2:	61 e0       	ldi	r22, 0x01	; 1
     3e4:	8d 2f       	mov	r24, r29
     3e6:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
	highbyte = read_TWI();
     3ea:	0e 94 64 13 	call	0x26c8	; 0x26c8 <read_TWI>
     3ee:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     3f0:	0e 94 74 13 	call	0x26e8	; 0x26e8 <readlast_TWI>
     3f4:	d8 2f       	mov	r29, r24
	stop_TWI();
     3f6:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>

	value = highbyte;
     3fa:	6c 2f       	mov	r22, r28
     3fc:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     3fe:	76 2f       	mov	r23, r22
     400:	66 27       	eor	r22, r22
	value |= lowbyte;
     402:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     404:	84 e0       	ldi	r24, 0x04	; 4
     406:	f8 16       	cp	r15, r24
     408:	49 f1       	breq	.+82     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     40a:	8f 15       	cp	r24, r15
     40c:	30 f0       	brcs	.+12     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     40e:	ff 20       	and	r15, r15
     410:	d9 f1       	breq	.+118    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	f8 16       	cp	r15, r24
     416:	69 f1       	breq	.+90     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     418:	42 c0       	rjmp	.+132    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     41a:	88 e0       	ldi	r24, 0x08	; 8
     41c:	f8 16       	cp	r15, r24
     41e:	09 f4       	brne	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     420:	42 c0       	rjmp	.+132    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     422:	8a e0       	ldi	r24, 0x0A	; 10
     424:	f8 16       	cp	r15, r24
     426:	21 f0       	breq	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     428:	86 e0       	ldi	r24, 0x06	; 6
     42a:	f8 12       	cpse	r15, r24
     42c:	38 c0       	rjmp	.+112    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     42e:	0b c0       	rjmp	.+22     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		case PGA0256:
			scale = SCA0256;
     430:	0f 2e       	mov	r0, r31
     432:	f4 e7       	ldi	r31, 0x74	; 116
     434:	cf 2e       	mov	r12, r31
     436:	f3 e1       	ldi	r31, 0x13	; 19
     438:	df 2e       	mov	r13, r31
     43a:	f3 e0       	ldi	r31, 0x03	; 3
     43c:	ef 2e       	mov	r14, r31
     43e:	f7 e3       	ldi	r31, 0x37	; 55
     440:	ff 2e       	mov	r15, r31
     442:	f0 2d       	mov	r31, r0
     444:	3a c0       	rjmp	.+116    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     446:	0f 2e       	mov	r0, r31
     448:	f4 e7       	ldi	r31, 0x74	; 116
     44a:	cf 2e       	mov	r12, r31
     44c:	f3 e1       	ldi	r31, 0x13	; 19
     44e:	df 2e       	mov	r13, r31
     450:	f3 e0       	ldi	r31, 0x03	; 3
     452:	ef 2e       	mov	r14, r31
     454:	f8 e3       	ldi	r31, 0x38	; 56
     456:	ff 2e       	mov	r15, r31
     458:	f0 2d       	mov	r31, r0
			break;
     45a:	2f c0       	rjmp	.+94     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		case PGA2048:
			scale = SCA2048;
     45c:	0f 2e       	mov	r0, r31
     45e:	f2 e1       	ldi	r31, 0x12	; 18
     460:	cf 2e       	mov	r12, r31
     462:	f3 e1       	ldi	r31, 0x13	; 19
     464:	df 2e       	mov	r13, r31
     466:	f3 e8       	ldi	r31, 0x83	; 131
     468:	ef 2e       	mov	r14, r31
     46a:	f8 e3       	ldi	r31, 0x38	; 56
     46c:	ff 2e       	mov	r15, r31
     46e:	f0 2d       	mov	r31, r0
			break;
     470:	24 c0       	rjmp	.+72     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		case PGA4096:
			scale = SCA4096;
     472:	0f 2e       	mov	r0, r31
     474:	f4 e7       	ldi	r31, 0x74	; 116
     476:	cf 2e       	mov	r12, r31
     478:	f3 e1       	ldi	r31, 0x13	; 19
     47a:	df 2e       	mov	r13, r31
     47c:	f3 e0       	ldi	r31, 0x03	; 3
     47e:	ef 2e       	mov	r14, r31
     480:	f9 e3       	ldi	r31, 0x39	; 57
     482:	ff 2e       	mov	r15, r31
     484:	f0 2d       	mov	r31, r0
			break;
     486:	19 c0       	rjmp	.+50     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		case PGA6144:
			scale = SCA6144;
     488:	0f 2e       	mov	r0, r31
     48a:	fe e2       	ldi	r31, 0x2E	; 46
     48c:	cf 2e       	mov	r12, r31
     48e:	fd e9       	ldi	r31, 0x9D	; 157
     490:	df 2e       	mov	r13, r31
     492:	f4 e4       	ldi	r31, 0x44	; 68
     494:	ef 2e       	mov	r14, r31
     496:	f9 e3       	ldi	r31, 0x39	; 57
     498:	ff 2e       	mov	r15, r31
     49a:	f0 2d       	mov	r31, r0
			break;
     49c:	0e c0       	rjmp	.+28     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		default:
			scale = 0.0;
     49e:	c1 2c       	mov	r12, r1
     4a0:	d1 2c       	mov	r13, r1
     4a2:	76 01       	movw	r14, r12
			break;
     4a4:	0a c0       	rjmp	.+20     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     4a6:	0f 2e       	mov	r0, r31
     4a8:	f1 e7       	ldi	r31, 0x71	; 113
     4aa:	cf 2e       	mov	r12, r31
     4ac:	f3 e1       	ldi	r31, 0x13	; 19
     4ae:	df 2e       	mov	r13, r31
     4b0:	f3 e8       	ldi	r31, 0x83	; 131
     4b2:	ef 2e       	mov	r14, r31
     4b4:	f7 e3       	ldi	r31, 0x37	; 55
     4b6:	ff 2e       	mov	r15, r31
     4b8:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	voltage = scale * (float) value;
     4ba:	07 2e       	mov	r0, r23
     4bc:	00 0c       	add	r0, r0
     4be:	88 0b       	sbc	r24, r24
     4c0:	99 0b       	sbc	r25, r25
     4c2:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__floatsisf>
     4c6:	9b 01       	movw	r18, r22
     4c8:	ac 01       	movw	r20, r24
     4ca:	c7 01       	movw	r24, r14
     4cc:	b6 01       	movw	r22, r12
     4ce:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
	return(voltage);
     4d2:	56 2f       	mov	r21, r22
     4d4:	47 2f       	mov	r20, r23
     4d6:	38 2f       	mov	r19, r24
     4d8:	29 2f       	mov	r18, r25

}
     4da:	65 2f       	mov	r22, r21
     4dc:	74 2f       	mov	r23, r20
     4de:	83 2f       	mov	r24, r19
     4e0:	92 2f       	mov	r25, r18
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	df 90       	pop	r13
     4f0:	cf 90       	pop	r12
     4f2:	08 95       	ret

000004f4 <init_BEEPER>:
#include "globals.h"

void init_BEEPER(void)
{

	PORTB.OUTSET = PIN2_bm;
     4f4:	e0 e2       	ldi	r30, 0x20	; 32
     4f6:	f4 e0       	ldi	r31, 0x04	; 4
     4f8:	84 e0       	ldi	r24, 0x04	; 4
     4fa:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     4fc:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = PIN2_bm;
     4fe:	86 83       	std	Z+6, r24	; 0x06
     500:	08 95       	ret

00000502 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding the NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	c5 59       	subi	r28, 0x95	; 149
     510:	d1 09       	sbc	r29, r1
     512:	cd bf       	out	0x3d, r28	; 61
     514:	de bf       	out	0x3e, r29	; 62

	char format_CMD[] = "$S%dCMD,%s";
     516:	2b e0       	ldi	r18, 0x0B	; 11
     518:	ea e3       	ldi	r30, 0x3A	; 58
     51a:	fb e7       	ldi	r31, 0x7B	; 123
     51c:	de 01       	movw	r26, r28
     51e:	11 96       	adiw	r26, 0x01	; 1
     520:	01 90       	ld	r0, Z+
     522:	0d 92       	st	X+, r0
     524:	2a 95       	dec	r18
     526:	e1 f7       	brne	.-8      	; 0x520 <echo_cmd+0x1e>
	char strbuf[BUFSIZE+10];		// Add $SXCMD, and *HH checksum

		// Format and echo the command line
	sprintf(strbuf, format_CMD, get_SPECID, cmdline);
     528:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     52c:	22 ff       	sbrs	r18, 2
     52e:	03 c0       	rjmp	.+6      	; 0x536 <echo_cmd+0x34>
     530:	22 e0       	ldi	r18, 0x02	; 2
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	02 c0       	rjmp	.+4      	; 0x53a <echo_cmd+0x38>
     536:	21 e0       	ldi	r18, 0x01	; 1
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	9f 93       	push	r25
     53c:	8f 93       	push	r24
     53e:	3f 93       	push	r19
     540:	2f 93       	push	r18
     542:	ce 01       	movw	r24, r28
     544:	01 96       	adiw	r24, 0x01	; 1
     546:	9f 93       	push	r25
     548:	8f 93       	push	r24
     54a:	8e 01       	movw	r16, r28
     54c:	04 5f       	subi	r16, 0xF4	; 244
     54e:	1f 4f       	sbci	r17, 0xFF	; 255
     550:	1f 93       	push	r17
     552:	0f 93       	push	r16
     554:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
	checksum_NMEA(strbuf);
     558:	c8 01       	movw	r24, r16
     55a:	0e 94 8e 09 	call	0x131c	; 0x131c <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     55e:	f8 01       	movw	r30, r16
     560:	01 90       	ld	r0, Z+
     562:	00 20       	and	r0, r0
     564:	e9 f7       	brne	.-6      	; 0x560 <echo_cmd+0x5e>
     566:	31 97       	sbiw	r30, 0x01	; 1
     568:	af 01       	movw	r20, r30
     56a:	40 1b       	sub	r20, r16
     56c:	51 0b       	sbc	r21, r17
     56e:	b8 01       	movw	r22, r16
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	0e 94 0f 14 	call	0x281e	; 0x281e <send_USART>
send_USART(1, (uint8_t*) strbuf, strlen(strbuf));
     576:	f8 01       	movw	r30, r16
     578:	01 90       	ld	r0, Z+
     57a:	00 20       	and	r0, r0
     57c:	e9 f7       	brne	.-6      	; 0x578 <echo_cmd+0x76>
     57e:	31 97       	sbiw	r30, 0x01	; 1
     580:	af 01       	movw	r20, r30
     582:	40 1b       	sub	r20, r16
     584:	51 0b       	sbc	r21, r17
     586:	b8 01       	movw	r22, r16
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	0e 94 0f 14 	call	0x281e	; 0x281e <send_USART>
}
     58e:	cd bf       	out	0x3d, r28	; 61
     590:	de bf       	out	0x3e, r29	; 62
     592:	cb 56       	subi	r28, 0x6B	; 107
     594:	df 4f       	sbci	r29, 0xFF	; 255
     596:	cd bf       	out	0x3d, r28	; 61
     598:	de bf       	out	0x3e, r29	; 62
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	08 95       	ret

000005a4 <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if (c >= 'a' && c <= 'z') {
     5a4:	9f e9       	ldi	r25, 0x9F	; 159
     5a6:	98 0f       	add	r25, r24
     5a8:	9a 31       	cpi	r25, 0x1A	; 26
     5aa:	28 f0       	brcs	.+10     	; 0x5b6 <isaletter+0x12>
		return(1);
	}

	if (c >= 'A' && c <= 'Z') {
     5ac:	81 54       	subi	r24, 0x41	; 65
     5ae:	8a 31       	cpi	r24, 0x1A	; 26
     5b0:	20 f4       	brcc	.+8      	; 0x5ba <isaletter+0x16>
		return(1);
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	08 95       	ret
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if (c >= 'a' && c <= 'z') {
		return(1);
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	08 95       	ret

	if (c >= 'A' && c <= 'Z') {
		return(1);
	}

	return(0);
     5ba:	80 e0       	ldi	r24, 0x00	; 0

}
     5bc:	08 95       	ret

000005be <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     5ca:	e6 2e       	mov	r14, r22
     5cc:	f1 2c       	mov	r15, r1
     5ce:	84 e3       	ldi	r24, 0x34	; 52
     5d0:	8e 9d       	mul	r24, r14
     5d2:	f0 01       	movw	r30, r0
     5d4:	8f 9d       	mul	r24, r15
     5d6:	f0 0d       	add	r31, r0
     5d8:	11 24       	eor	r1, r1
     5da:	ec 5f       	subi	r30, 0xFC	; 252
     5dc:	f7 4d       	sbci	r31, 0xD7	; 215
     5de:	8f e3       	ldi	r24, 0x3F	; 63
     5e0:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     5e2:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     5e4:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     5e6:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {
     5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <parse_cmd+0x34>
		if (*ptr == '\0') {
     5ea:	11 23       	and	r17, r17
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <parse_cmd+0x32>
     5ee:	75 c0       	rjmp	.+234    	; 0x6da <parse_cmd+0x11c>
			return;
		}
		ptr++;
     5f0:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {
     5f2:	18 81       	ld	r17, Y
     5f4:	81 2f       	mov	r24, r17
     5f6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <isaletter>
     5fa:	88 23       	and	r24, r24
     5fc:	b1 f3       	breq	.-20     	; 0x5ea <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     5fe:	21 96       	adiw	r28, 0x01	; 1
     600:	84 e3       	ldi	r24, 0x34	; 52
     602:	8e 9d       	mul	r24, r14
     604:	f0 01       	movw	r30, r0
     606:	8f 9d       	mul	r24, r15
     608:	f0 0d       	add	r31, r0
     60a:	11 24       	eor	r1, r1
     60c:	ec 5f       	subi	r30, 0xFC	; 252
     60e:	f7 4d       	sbci	r31, 0xD7	; 215
     610:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {
     612:	04 c0       	rjmp	.+8      	; 0x61c <parse_cmd+0x5e>
		if (*ptr == '\0') {
     614:	11 23       	and	r17, r17
     616:	09 f4       	brne	.+2      	; 0x61a <parse_cmd+0x5c>
     618:	60 c0       	rjmp	.+192    	; 0x6da <parse_cmd+0x11c>
			return;
		}
		ptr++;
     61a:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {
     61c:	18 81       	ld	r17, Y
     61e:	81 2f       	mov	r24, r17
     620:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <isaletter>
     624:	88 23       	and	r24, r24
     626:	b1 f3       	breq	.-20     	; 0x614 <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     628:	21 96       	adiw	r28, 0x01	; 1
     62a:	84 e3       	ldi	r24, 0x34	; 52
     62c:	8e 9d       	mul	r24, r14
     62e:	f0 01       	movw	r30, r0
     630:	8f 9d       	mul	r24, r15
     632:	f0 0d       	add	r31, r0
     634:	11 24       	eor	r1, r1
     636:	ec 5f       	subi	r30, 0xFC	; 252
     638:	f7 4d       	sbci	r31, 0xD7	; 215
     63a:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	2a c0       	rjmp	.+84     	; 0x694 <parse_cmd+0xd6>
		if (*ptr == '\0') {
     640:	98 81       	ld	r25, Y
     642:	91 11       	cpse	r25, r1
     644:	0c c0       	rjmp	.+24     	; 0x65e <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     646:	94 e3       	ldi	r25, 0x34	; 52
     648:	9e 9d       	mul	r25, r14
     64a:	f0 01       	movw	r30, r0
     64c:	9f 9d       	mul	r25, r15
     64e:	f0 0d       	add	r31, r0
     650:	11 24       	eor	r1, r1
     652:	ec 5f       	subi	r30, 0xFC	; 252
     654:	f7 4d       	sbci	r31, 0xD7	; 215
     656:	e8 0f       	add	r30, r24
     658:	f1 1d       	adc	r31, r1
     65a:	12 82       	std	Z+2, r1	; 0x02
			return;
     65c:	3e c0       	rjmp	.+124    	; 0x6da <parse_cmd+0x11c>
		}
		if (*ptr == ';') {
     65e:	9b 33       	cpi	r25, 0x3B	; 59
     660:	61 f4       	brne	.+24     	; 0x67a <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     662:	94 e3       	ldi	r25, 0x34	; 52
     664:	9e 9d       	mul	r25, r14
     666:	f0 01       	movw	r30, r0
     668:	9f 9d       	mul	r25, r15
     66a:	f0 0d       	add	r31, r0
     66c:	11 24       	eor	r1, r1
     66e:	ec 5f       	subi	r30, 0xFC	; 252
     670:	f7 4d       	sbci	r31, 0xD7	; 215
     672:	e8 0f       	add	r30, r24
     674:	f1 1d       	adc	r31, r1
     676:	12 82       	std	Z+2, r1	; 0x02
			break;
     678:	0f c0       	rjmp	.+30     	; 0x698 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     67a:	21 96       	adiw	r28, 0x01	; 1
     67c:	24 e3       	ldi	r18, 0x34	; 52
     67e:	2e 9d       	mul	r18, r14
     680:	f0 01       	movw	r30, r0
     682:	2f 9d       	mul	r18, r15
     684:	f0 0d       	add	r31, r0
     686:	11 24       	eor	r1, r1
     688:	ec 5f       	subi	r30, 0xFC	; 252
     68a:	f7 4d       	sbci	r31, 0xD7	; 215
     68c:	e8 0f       	add	r30, r24
     68e:	f1 1d       	adc	r31, r1
     690:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     692:	8f 5f       	subi	r24, 0xFF	; 255
     694:	89 32       	cpi	r24, 0x29	; 41
     696:	a0 f2       	brcs	.-88     	; 0x640 <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
     698:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	1c c0       	rjmp	.+56     	; 0x6d6 <parse_cmd+0x118>
		if (*ptr == '\0') {
     69e:	98 81       	ld	r25, Y
     6a0:	91 11       	cpse	r25, r1
     6a2:	0c c0       	rjmp	.+24     	; 0x6bc <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     6a4:	94 e3       	ldi	r25, 0x34	; 52
     6a6:	9e 9d       	mul	r25, r14
     6a8:	f0 01       	movw	r30, r0
     6aa:	9f 9d       	mul	r25, r15
     6ac:	f0 0d       	add	r31, r0
     6ae:	11 24       	eor	r1, r1
     6b0:	ec 5f       	subi	r30, 0xFC	; 252
     6b2:	f7 4d       	sbci	r31, 0xD7	; 215
     6b4:	e8 0f       	add	r30, r24
     6b6:	f1 1d       	adc	r31, r1
     6b8:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     6ba:	0f c0       	rjmp	.+30     	; 0x6da <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     6bc:	21 96       	adiw	r28, 0x01	; 1
     6be:	24 e3       	ldi	r18, 0x34	; 52
     6c0:	2e 9d       	mul	r18, r14
     6c2:	f0 01       	movw	r30, r0
     6c4:	2f 9d       	mul	r18, r15
     6c6:	f0 0d       	add	r31, r0
     6c8:	11 24       	eor	r1, r1
     6ca:	ec 5f       	subi	r30, 0xFC	; 252
     6cc:	f7 4d       	sbci	r31, 0xD7	; 215
     6ce:	e8 0f       	add	r30, r24
     6d0:	f1 1d       	adc	r31, r1
     6d2:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     6d4:	8f 5f       	subi	r24, 0xFF	; 255
     6d6:	89 30       	cpi	r24, 0x09	; 9
     6d8:	10 f3       	brcs	.-60     	; 0x69e <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	08 95       	ret

000006e6 <send_prompt>:

	If specMech is rebooted, it will only prompt with a single exclamation
	point (!) until it receives an acknowledgment in the form of a single !.
------------------------------------------------------------------------------*/
void send_prompt(uint8_t prompt_flag)
{
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	6d 97       	sbiw	r28, 0x1d	; 29
     6f4:	cd bf       	out	0x3d, r28	; 61
     6f6:	de bf       	out	0x3e, r29	; 62

	const char str0[] = ">";
     6f8:	2e e3       	ldi	r18, 0x3E	; 62
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	29 83       	std	Y+1, r18	; 0x01
     6fe:	3a 83       	std	Y+2, r19	; 0x02
	const char str1[] = "!";
     700:	21 e2       	ldi	r18, 0x21	; 33
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	2b 83       	std	Y+3, r18	; 0x03
     706:	3c 83       	std	Y+4, r19	; 0x04

	char prompt_str[25];

	switch (prompt_flag) {
     708:	81 30       	cpi	r24, 0x01	; 1
     70a:	09 f4       	brne	.+2      	; 0x70e <send_prompt+0x28>
     70c:	3f c0       	rjmp	.+126    	; 0x78c <send_prompt+0xa6>
     70e:	18 f0       	brcs	.+6      	; 0x716 <send_prompt+0x30>
     710:	82 30       	cpi	r24, 0x02	; 2
     712:	b9 f0       	breq	.+46     	; 0x742 <send_prompt+0x5c>
     714:	51 c0       	rjmp	.+162    	; 0x7b8 <send_prompt+0xd2>
		case GREATERPROMPT:
			strcpy(prompt_str, str0);
     716:	8e 01       	movw	r16, r28
     718:	0b 5f       	subi	r16, 0xFB	; 251
     71a:	1f 4f       	sbci	r17, 0xFF	; 255
     71c:	be 01       	movw	r22, r28
     71e:	6f 5f       	subi	r22, 0xFF	; 255
     720:	7f 4f       	sbci	r23, 0xFF	; 255
     722:	c8 01       	movw	r24, r16
     724:	0e 94 89 1c 	call	0x3912	; 0x3912 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     728:	f8 01       	movw	r30, r16
     72a:	01 90       	ld	r0, Z+
     72c:	00 20       	and	r0, r0
     72e:	e9 f7       	brne	.-6      	; 0x72a <send_prompt+0x44>
     730:	31 97       	sbiw	r30, 0x01	; 1
     732:	af 01       	movw	r20, r30
     734:	40 1b       	sub	r20, r16
     736:	51 0b       	sbc	r21, r17
     738:	b8 01       	movw	r22, r16
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	0e 94 0f 14 	call	0x281e	; 0x281e <send_USART>
			break;
     740:	50 c0       	rjmp	.+160    	; 0x7e2 <send_prompt+0xfc>

		case ERRORPROMPT:
			format_ERR(prompt_str);
     742:	8e 01       	movw	r16, r28
     744:	0b 5f       	subi	r16, 0xFB	; 251
     746:	1f 4f       	sbci	r17, 0xFF	; 255
     748:	c8 01       	movw	r24, r16
     74a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <format_ERR>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     74e:	f8 01       	movw	r30, r16
     750:	01 90       	ld	r0, Z+
     752:	00 20       	and	r0, r0
     754:	e9 f7       	brne	.-6      	; 0x750 <send_prompt+0x6a>
     756:	31 97       	sbiw	r30, 0x01	; 1
     758:	af 01       	movw	r20, r30
     75a:	40 1b       	sub	r20, r16
     75c:	51 0b       	sbc	r21, r17
     75e:	b8 01       	movw	r22, r16
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	0e 94 0f 14 	call	0x281e	; 0x281e <send_USART>
			strcpy(prompt_str, str0);
     766:	be 01       	movw	r22, r28
     768:	6f 5f       	subi	r22, 0xFF	; 255
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	c8 01       	movw	r24, r16
     76e:	0e 94 89 1c 	call	0x3912	; 0x3912 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     772:	f8 01       	movw	r30, r16
     774:	01 90       	ld	r0, Z+
     776:	00 20       	and	r0, r0
     778:	e9 f7       	brne	.-6      	; 0x774 <send_prompt+0x8e>
     77a:	31 97       	sbiw	r30, 0x01	; 1
     77c:	af 01       	movw	r20, r30
     77e:	40 1b       	sub	r20, r16
     780:	51 0b       	sbc	r21, r17
     782:	b8 01       	movw	r22, r16
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	0e 94 0f 14 	call	0x281e	; 0x281e <send_USART>
			break;
     78a:	2b c0       	rjmp	.+86     	; 0x7e2 <send_prompt+0xfc>

		case EXCLAIMPROMPT:
			strcpy(prompt_str, str1);
     78c:	8e 01       	movw	r16, r28
     78e:	0b 5f       	subi	r16, 0xFB	; 251
     790:	1f 4f       	sbci	r17, 0xFF	; 255
     792:	be 01       	movw	r22, r28
     794:	6d 5f       	subi	r22, 0xFD	; 253
     796:	7f 4f       	sbci	r23, 0xFF	; 255
     798:	c8 01       	movw	r24, r16
     79a:	0e 94 89 1c 	call	0x3912	; 0x3912 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     79e:	f8 01       	movw	r30, r16
     7a0:	01 90       	ld	r0, Z+
     7a2:	00 20       	and	r0, r0
     7a4:	e9 f7       	brne	.-6      	; 0x7a0 <send_prompt+0xba>
     7a6:	31 97       	sbiw	r30, 0x01	; 1
     7a8:	af 01       	movw	r20, r30
     7aa:	40 1b       	sub	r20, r16
     7ac:	51 0b       	sbc	r21, r17
     7ae:	b8 01       	movw	r22, r16
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	0e 94 0f 14 	call	0x281e	; 0x281e <send_USART>
			break;
     7b6:	15 c0       	rjmp	.+42     	; 0x7e2 <send_prompt+0xfc>

		default:
			strcpy(prompt_str, str1);
     7b8:	8e 01       	movw	r16, r28
     7ba:	0b 5f       	subi	r16, 0xFB	; 251
     7bc:	1f 4f       	sbci	r17, 0xFF	; 255
     7be:	be 01       	movw	r22, r28
     7c0:	6d 5f       	subi	r22, 0xFD	; 253
     7c2:	7f 4f       	sbci	r23, 0xFF	; 255
     7c4:	c8 01       	movw	r24, r16
     7c6:	0e 94 89 1c 	call	0x3912	; 0x3912 <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     7ca:	f8 01       	movw	r30, r16
     7cc:	01 90       	ld	r0, Z+
     7ce:	00 20       	and	r0, r0
     7d0:	e9 f7       	brne	.-6      	; 0x7cc <send_prompt+0xe6>
     7d2:	31 97       	sbiw	r30, 0x01	; 1
     7d4:	af 01       	movw	r20, r30
     7d6:	40 1b       	sub	r20, r16
     7d8:	51 0b       	sbc	r21, r17
     7da:	b8 01       	movw	r22, r16
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	0e 94 0f 14 	call	0x281e	; 0x281e <send_USART>
			break;

	}

}
     7e2:	6d 96       	adiw	r28, 0x1d	; 29
     7e4:	cd bf       	out	0x3d, r28	; 61
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	08 95       	ret

000007f2 <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
     7fa:	c0 58       	subi	r28, 0x80	; 128
     7fc:	d1 09       	sbc	r29, r1
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	de bf       	out	0x3e, r29	; 62
	uint8_t i, prompt_flag = GREATERPROMPT;
	static uint8_t rebootnack = 1;
	static uint8_t cstack = 0;		// Index for pcmd

	// Copy the command string to cmdline
	for (i = 0; i < BUFSIZE; i++) {
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	1c c0       	rjmp	.+56     	; 0x83e <commands+0x4c>
		cmdline[i] = recv0_buf.data[recv0_buf.tail];
     806:	80 91 17 2b 	lds	r24, 0x2B17	; 0x802b17 <recv0_buf+0x81>
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	fc 01       	movw	r30, r24
     80e:	ea 56       	subi	r30, 0x6A	; 106
     810:	f5 4d       	sbci	r31, 0xD5	; 213
     812:	30 81       	ld	r19, Z
     814:	e1 e0       	ldi	r30, 0x01	; 1
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	ec 0f       	add	r30, r28
     81a:	fd 1f       	adc	r31, r29
     81c:	e2 0f       	add	r30, r18
     81e:	f1 1d       	adc	r31, r1
     820:	30 83       	st	Z, r19
		recv0_buf.tail = (recv0_buf.tail + 1) % BUFSIZE;
     822:	01 96       	adiw	r24, 0x01	; 1
     824:	8f 77       	andi	r24, 0x7F	; 127
     826:	90 78       	andi	r25, 0x80	; 128
     828:	99 23       	and	r25, r25
     82a:	24 f4       	brge	.+8      	; 0x834 <commands+0x42>
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	80 68       	ori	r24, 0x80	; 128
     830:	9f 6f       	ori	r25, 0xFF	; 255
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	80 93 17 2b 	sts	0x2B17, r24	; 0x802b17 <recv0_buf+0x81>
		if (cmdline[i] == '\0') {
     838:	33 23       	and	r19, r19
     83a:	19 f0       	breq	.+6      	; 0x842 <commands+0x50>
	uint8_t i, prompt_flag = GREATERPROMPT;
	static uint8_t rebootnack = 1;
	static uint8_t cstack = 0;		// Index for pcmd

	// Copy the command string to cmdline
	for (i = 0; i < BUFSIZE; i++) {
     83c:	2f 5f       	subi	r18, 0xFF	; 255
     83e:	22 23       	and	r18, r18
     840:	14 f7       	brge	.-60     	; 0x806 <commands+0x14>
		if (cmdline[i] == '\0') {
			break;
		}
	}

	if (rebootnack) {
     842:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     846:	88 23       	and	r24, r24
     848:	d1 f0       	breq	.+52     	; 0x87e <commands+0x8c>
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	81 32       	cpi	r24, 0x21	; 33
     84e:	99 f4       	brne	.+38     	; 0x876 <commands+0x84>
     850:	8a 81       	ldd	r24, Y+2	; 0x02
     852:	81 11       	cpse	r24, r1
     854:	10 c0       	rjmp	.+32     	; 0x876 <commands+0x84>
			init_RTC(511);		// 1-sec RTC clock ticks
     856:	8f ef       	ldi	r24, 0xFF	; 255
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	0e 94 9d 12 	call	0x253a	; 0x253a <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout
     85e:	85 e0       	ldi	r24, 0x05	; 5
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	80 93 0e 2a 	sts	0x2A0E, r24	; 0x802a0e <timeoutOLED>
     866:	90 93 0f 2a 	sts	0x2A0F, r25	; 0x802a0f <timeoutOLED+0x1>
			send_prompt(GREATERPROMPT);
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <send_prompt>
			rebootnack = 0;
     870:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
			return;
     874:	59 c0       	rjmp	.+178    	; 0x928 <commands+0x136>
		} else {
			send_prompt(EXCLAIMPROMPT);
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	0e 94 73 03 	call	0x6e6	; 0x6e6 <send_prompt>
			return;
     87c:	55 c0       	rjmp	.+170    	; 0x928 <commands+0x136>
		}
	}

	// Echo the command back to the user
	echo_cmd(cmdline);
     87e:	ce 01       	movw	r24, r28
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	0e 94 81 02 	call	0x502	; 0x502 <echo_cmd>

	if (strlen(cmdline) == 0) {		// Catch a terminal cr
     886:	89 81       	ldd	r24, Y+1	; 0x01
     888:	81 11       	cpse	r24, r1
     88a:	03 c0       	rjmp	.+6      	; 0x892 <commands+0xa0>
		send_prompt(GREATERPROMPT);
     88c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <send_prompt>
		return;
     890:	4b c0       	rjmp	.+150    	; 0x928 <commands+0x136>
	}

	parse_cmd(cmdline, cstack);
     892:	60 91 02 28 	lds	r22, 0x2802	; 0x802802 <__data_end>
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	0e 94 df 02 	call	0x5be	; 0x5be <parse_cmd>
	verb = pcmd[cstack].cverb;
     89e:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     8a2:	24 e3       	ldi	r18, 0x34	; 52
     8a4:	82 9f       	mul	r24, r18
     8a6:	f0 01       	movw	r30, r0
     8a8:	11 24       	eor	r1, r1
     8aa:	ec 5f       	subi	r30, 0xFC	; 252
     8ac:	f7 4d       	sbci	r31, 0xD7	; 215
     8ae:	90 81       	ld	r25, Z
	object = pcmd[cstack].cobject;
     8b0:	21 81       	ldd	r18, Z+1	; 0x01

	switch (verb) {
     8b2:	9f 36       	cpi	r25, 0x6F	; 111
     8b4:	81 f0       	breq	.+32     	; 0x8d6 <commands+0xe4>
     8b6:	28 f4       	brcc	.+10     	; 0x8c2 <commands+0xd0>
     8b8:	92 35       	cpi	r25, 0x52	; 82
     8ba:	d1 f0       	breq	.+52     	; 0x8f0 <commands+0xfe>
     8bc:	93 36       	cpi	r25, 0x63	; 99
     8be:	31 f0       	breq	.+12     	; 0x8cc <commands+0xda>
     8c0:	25 c0       	rjmp	.+74     	; 0x90c <commands+0x11a>
     8c2:	92 37       	cpi	r25, 0x72	; 114
     8c4:	69 f0       	breq	.+26     	; 0x8e0 <commands+0xee>
     8c6:	93 37       	cpi	r25, 0x73	; 115
     8c8:	79 f0       	breq	.+30     	; 0x8e8 <commands+0xf6>
     8ca:	20 c0       	rjmp	.+64     	; 0x90c <commands+0x11a>
		case 'c':				// close
			prompt_flag = close_PNEU(object);
     8cc:	82 2f       	mov	r24, r18
     8ce:	0e 94 25 0c 	call	0x184a	; 0x184a <close_PNEU>
     8d2:	28 2f       	mov	r18, r24
			break;
     8d4:	1c c0       	rjmp	.+56     	; 0x90e <commands+0x11c>

		case 'o':				// open
			prompt_flag = open_PNEU(object);
     8d6:	82 2f       	mov	r24, r18
     8d8:	0e 94 b7 0c 	call	0x196e	; 0x196e <open_PNEU>
     8dc:	28 2f       	mov	r18, r24
			break;
     8de:	17 c0       	rjmp	.+46     	; 0x90e <commands+0x11c>

		case 'r':				// Report
			prompt_flag = report(cstack);
     8e0:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <report>
     8e4:	28 2f       	mov	r18, r24
			break;
     8e6:	13 c0       	rjmp	.+38     	; 0x90e <commands+0x11c>

		case 's':				// Set
			prompt_flag = set(cstack);
     8e8:	0e 94 10 13 	call	0x2620	; 0x2620 <set>
     8ec:	28 2f       	mov	r18, r24
			break;
     8ee:	0f c0       	rjmp	.+30     	; 0x90e <commands+0x11c>

		case 'R':				// Reboot
			send_prompt(GREATERPROMPT);
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <send_prompt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f6:	8a e6       	ldi	r24, 0x6A	; 106
     8f8:	94 e0       	ldi	r25, 0x04	; 4
     8fa:	21 e0       	ldi	r18, 0x01	; 1
     8fc:	81 50       	subi	r24, 0x01	; 1
     8fe:	90 40       	sbci	r25, 0x00	; 0
     900:	20 40       	sbci	r18, 0x00	; 0
     902:	e1 f7       	brne	.-8      	; 0x8fc <commands+0x10a>
     904:	00 c0       	rjmp	.+0      	; 0x906 <commands+0x114>
			_delay_ms(100);		// Avoid finishing the command loop before reboot
			reboot();
     906:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <reboot>
			return;
     90a:	0e c0       	rjmp	.+28     	; 0x928 <commands+0x136>

		default:
			prompt_flag = ERRORPROMPT;
     90c:	22 e0       	ldi	r18, 0x02	; 2
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     90e:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	6a e0       	ldi	r22, 0x0A	; 10
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__divmodhi4>
     91e:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <__data_end>
	send_prompt(prompt_flag);
     922:	82 2f       	mov	r24, r18
     924:	0e 94 73 03 	call	0x6e6	; 0x6e6 <send_prompt>

}
     928:	c0 58       	subi	r28, 0x80	; 128
     92a:	df 4f       	sbci	r29, 0xFF	; 255
     92c:	cd bf       	out	0x3d, r28	; 61
     92e:	de bf       	out	0x3e, r29	; 62
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     936:	fb 01       	movw	r30, r22
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     938:	70 81       	ld	r23, Z
	minutes = (*ds3231time++);
     93a:	61 81       	ldd	r22, Z+1	; 0x01
	hours = (*ds3231time++);
     93c:	52 81       	ldd	r21, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     93e:	44 81       	ldd	r20, Z+4	; 0x04
	month = (*ds3231time++);
     940:	35 81       	ldd	r19, Z+5	; 0x05
	year = (*ds3231time);
     942:	26 81       	ldd	r18, Z+6	; 0x06

	sprintf(isotime, "20%02x-%02x-%02xT%02x:%02x:%02x",
     944:	1f 92       	push	r1
     946:	7f 93       	push	r23
     948:	1f 92       	push	r1
     94a:	6f 93       	push	r22
     94c:	1f 92       	push	r1
     94e:	5f 93       	push	r21
     950:	1f 92       	push	r1
     952:	4f 93       	push	r20
     954:	1f 92       	push	r1
     956:	3f 93       	push	r19
     958:	1f 92       	push	r1
     95a:	2f 93       	push	r18
     95c:	25 e4       	ldi	r18, 0x45	; 69
     95e:	3b e7       	ldi	r19, 0x7B	; 123
     960:	3f 93       	push	r19
     962:	2f 93       	push	r18
     964:	9f 93       	push	r25
     966:	8f 93       	push	r24
     968:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
		year, month, date, hours, minutes, seconds);

}
     96c:	8d b7       	in	r24, 0x3d	; 61
     96e:	9e b7       	in	r25, 0x3e	; 62
     970:	40 96       	adiw	r24, 0x10	; 16
     972:	8d bf       	out	0x3d, r24	; 61
     974:	9e bf       	out	0x3e, r25	; 62
     976:	08 95       	ret

00000978 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ssZ
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     978:	dc 01       	movw	r26, r24
     97a:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     97c:	81 89       	ldd	r24, Z+17	; 0x11
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	c0 97       	sbiw	r24, 0x30	; 48
     982:	82 95       	swap	r24
     984:	92 95       	swap	r25
     986:	90 7f       	andi	r25, 0xF0	; 240
     988:	98 27       	eor	r25, r24
     98a:	80 7f       	andi	r24, 0xF0	; 240
     98c:	98 27       	eor	r25, r24
     98e:	92 89       	ldd	r25, Z+18	; 0x12
     990:	90 53       	subi	r25, 0x30	; 48
     992:	89 2b       	or	r24, r25
     994:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     996:	86 85       	ldd	r24, Z+14	; 0x0e
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	c0 97       	sbiw	r24, 0x30	; 48
     99c:	82 95       	swap	r24
     99e:	92 95       	swap	r25
     9a0:	90 7f       	andi	r25, 0xF0	; 240
     9a2:	98 27       	eor	r25, r24
     9a4:	80 7f       	andi	r24, 0xF0	; 240
     9a6:	98 27       	eor	r25, r24
     9a8:	97 85       	ldd	r25, Z+15	; 0x0f
     9aa:	90 53       	subi	r25, 0x30	; 48
     9ac:	89 2b       	or	r24, r25
     9ae:	11 96       	adiw	r26, 0x01	; 1
     9b0:	8c 93       	st	X, r24
     9b2:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     9b4:	83 85       	ldd	r24, Z+11	; 0x0b
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	c0 97       	sbiw	r24, 0x30	; 48
     9ba:	82 95       	swap	r24
     9bc:	92 95       	swap	r25
     9be:	90 7f       	andi	r25, 0xF0	; 240
     9c0:	98 27       	eor	r25, r24
     9c2:	80 7f       	andi	r24, 0xF0	; 240
     9c4:	98 27       	eor	r25, r24
     9c6:	94 85       	ldd	r25, Z+12	; 0x0c
     9c8:	90 53       	subi	r25, 0x30	; 48
     9ca:	89 2b       	or	r24, r25
     9cc:	12 96       	adiw	r26, 0x02	; 2
     9ce:	8c 93       	st	X, r24
     9d0:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	13 96       	adiw	r26, 0x03	; 3
     9d6:	8c 93       	st	X, r24
     9d8:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     9da:	80 85       	ldd	r24, Z+8	; 0x08
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	c0 97       	sbiw	r24, 0x30	; 48
     9e0:	82 95       	swap	r24
     9e2:	92 95       	swap	r25
     9e4:	90 7f       	andi	r25, 0xF0	; 240
     9e6:	98 27       	eor	r25, r24
     9e8:	80 7f       	andi	r24, 0xF0	; 240
     9ea:	98 27       	eor	r25, r24
     9ec:	91 85       	ldd	r25, Z+9	; 0x09
     9ee:	90 53       	subi	r25, 0x30	; 48
     9f0:	89 2b       	or	r24, r25
     9f2:	14 96       	adiw	r26, 0x04	; 4
     9f4:	8c 93       	st	X, r24
     9f6:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     9f8:	25 81       	ldd	r18, Z+5	; 0x05
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	20 53       	subi	r18, 0x30	; 48
     9fe:	31 09       	sbc	r19, r1
     a00:	22 95       	swap	r18
     a02:	32 95       	swap	r19
     a04:	30 7f       	andi	r19, 0xF0	; 240
     a06:	32 27       	eor	r19, r18
     a08:	20 7f       	andi	r18, 0xF0	; 240
     a0a:	32 27       	eor	r19, r18
     a0c:	86 81       	ldd	r24, Z+6	; 0x06
     a0e:	80 53       	subi	r24, 0x30	; 48
     a10:	28 2b       	or	r18, r24
     a12:	15 96       	adiw	r26, 0x05	; 5
     a14:	2c 93       	st	X, r18
     a16:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     a18:	22 81       	ldd	r18, Z+2	; 0x02
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	20 53       	subi	r18, 0x30	; 48
     a1e:	31 09       	sbc	r19, r1
     a20:	22 95       	swap	r18
     a22:	32 95       	swap	r19
     a24:	30 7f       	andi	r19, 0xF0	; 240
     a26:	32 27       	eor	r19, r18
     a28:	20 7f       	andi	r18, 0xF0	; 240
     a2a:	32 27       	eor	r19, r18
     a2c:	83 81       	ldd	r24, Z+3	; 0x03
     a2e:	80 53       	subi	r24, 0x30	; 48
     a30:	28 2b       	or	r18, r24
     a32:	16 96       	adiw	r26, 0x06	; 6
     a34:	2c 93       	st	X, r18
     a36:	08 95       	ret

00000a38 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     a38:	ef 92       	push	r14
     a3a:	ff 92       	push	r15
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	cf 93       	push	r28
     a42:	7b 01       	movw	r14, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
     a4a:	c8 2f       	mov	r28, r24
     a4c:	88 23       	and	r24, r24
     a4e:	21 f0       	breq	.+8      	; 0xa58 <read_DS3231+0x20>
		stop_TWI();
     a50:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
		return(retval);
     a54:	8c 2f       	mov	r24, r28
     a56:	28 c0       	rjmp	.+80     	; 0xaa8 <read_DS3231+0x70>
    }  

	if ((retval = write_TWI(0x00))) {	// Register 00h
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
     a5e:	c8 2f       	mov	r28, r24
     a60:	88 23       	and	r24, r24
     a62:	21 f0       	breq	.+8      	; 0xa6c <read_DS3231+0x34>
		stop_TWI();
     a64:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
		return(retval);
     a68:	8c 2f       	mov	r24, r28
     a6a:	1e c0       	rjmp	.+60     	; 0xaa8 <read_DS3231+0x70>
	}
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
     a6c:	61 e0       	ldi	r22, 0x01	; 1
     a6e:	88 e6       	ldi	r24, 0x68	; 104
     a70:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
     a74:	c8 2f       	mov	r28, r24
     a76:	88 23       	and	r24, r24
     a78:	69 f0       	breq	.+26     	; 0xa94 <read_DS3231+0x5c>
		stop_TWI();
     a7a:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
		return(retval);
     a7e:	8c 2f       	mov	r24, r28
     a80:	13 c0       	rjmp	.+38     	; 0xaa8 <read_DS3231+0x70>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     a82:	87 01       	movw	r16, r14
     a84:	0c 0f       	add	r16, r28
     a86:	11 1d       	adc	r17, r1
     a88:	0e 94 64 13 	call	0x26c8	; 0x26c8 <read_TWI>
     a8c:	f8 01       	movw	r30, r16
     a8e:	80 83       	st	Z, r24
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 6; i++) {
     a90:	cf 5f       	subi	r28, 0xFF	; 255
     a92:	01 c0       	rjmp	.+2      	; 0xa96 <read_DS3231+0x5e>
     a94:	c0 e0       	ldi	r28, 0x00	; 0
     a96:	c6 30       	cpi	r28, 0x06	; 6
     a98:	a0 f3       	brcs	.-24     	; 0xa82 <read_DS3231+0x4a>
		ds3231time[i] = read_TWI();
	}
	ds3231time[6] = readlast_TWI();
     a9a:	0e 94 74 13 	call	0x26e8	; 0x26e8 <readlast_TWI>
     a9e:	f7 01       	movw	r30, r14
     aa0:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     aa2:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>

	return(0);
     aa6:	80 e0       	ldi	r24, 0x00	; 0

}
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	ff 90       	pop	r15
     ab0:	ef 90       	pop	r14
     ab2:	08 95       	ret

00000ab4 <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
     ac0:	27 97       	sbiw	r28, 0x07	; 7
     ac2:	cd bf       	out	0x3d, r28	; 61
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	8c 01       	movw	r16, r24

	uint8_t retval, ds3231time[7];

	if ((retval = read_DS3231(DS3231ADDR, ds3231time))) {
     ac8:	be 01       	movw	r22, r28
     aca:	6f 5f       	subi	r22, 0xFF	; 255
     acc:	7f 4f       	sbci	r23, 0xFF	; 255
     ace:	88 e6       	ldi	r24, 0x68	; 104
     ad0:	0e 94 1c 05 	call	0xa38	; 0xa38 <read_DS3231>
     ad4:	88 23       	and	r24, r24
     ad6:	49 f0       	breq	.+18     	; 0xaea <get_time+0x36>
		strcpy(isotime, "DS3231 read error");
     ad8:	92 e1       	ldi	r25, 0x12	; 18
     ada:	e5 e6       	ldi	r30, 0x65	; 101
     adc:	fb e7       	ldi	r31, 0x7B	; 123
     ade:	d8 01       	movw	r26, r16
     ae0:	01 90       	ld	r0, Z+
     ae2:	0d 92       	st	X+, r0
     ae4:	9a 95       	dec	r25
     ae6:	e1 f7       	brne	.-8      	; 0xae0 <get_time+0x2c>
		return(retval);
     ae8:	07 c0       	rjmp	.+14     	; 0xaf8 <get_time+0x44>
	}

	convert_ds2iso(isotime, ds3231time);
     aea:	be 01       	movw	r22, r28
     aec:	6f 5f       	subi	r22, 0xFF	; 255
     aee:	7f 4f       	sbci	r23, 0xFF	; 255
     af0:	c8 01       	movw	r24, r16
     af2:	0e 94 9b 04 	call	0x936	; 0x936 <convert_ds2iso>
	return(0);
     af6:	80 e0       	ldi	r24, 0x00	; 0

}
     af8:	27 96       	adiw	r28, 0x07	; 7
     afa:	cd bf       	out	0x3d, r28	; 61
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	08 95       	ret

00000b08 <write_DS3231>:

	Returns
		TWI errors
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	8b 01       	movw	r16, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
     b1c:	c8 2f       	mov	r28, r24
     b1e:	88 23       	and	r24, r24
     b20:	21 f0       	breq	.+8      	; 0xb2a <write_DS3231+0x22>
		stop_TWI();
     b22:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
		return(retval);
     b26:	8c 2f       	mov	r24, r28
     b28:	22 c0       	rjmp	.+68     	; 0xb6e <write_DS3231+0x66>
	}

	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
     b30:	c8 2f       	mov	r28, r24
     b32:	88 23       	and	r24, r24
     b34:	b1 f0       	breq	.+44     	; 0xb62 <write_DS3231+0x5a>
		stop_TWI();
     b36:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
		return(retval);
     b3a:	8c 2f       	mov	r24, r28
     b3c:	18 c0       	rjmp	.+48     	; 0xb6e <write_DS3231+0x66>
	}

	for (i = 0; i < 7; i++) {
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b3e:	78 01       	movw	r14, r16
     b40:	8f ef       	ldi	r24, 0xFF	; 255
     b42:	e8 1a       	sub	r14, r24
     b44:	f8 0a       	sbc	r15, r24
     b46:	f8 01       	movw	r30, r16
     b48:	80 81       	ld	r24, Z
     b4a:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
     b4e:	c8 2f       	mov	r28, r24
     b50:	88 23       	and	r24, r24
     b52:	21 f0       	breq	.+8      	; 0xb5c <write_DS3231+0x54>
			stop_TWI();
     b54:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
			return(retval);
     b58:	8c 2f       	mov	r24, r28
     b5a:	09 c0       	rjmp	.+18     	; 0xb6e <write_DS3231+0x66>
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b5c:	df 5f       	subi	r29, 0xFF	; 255
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b5e:	87 01       	movw	r16, r14
     b60:	01 c0       	rjmp	.+2      	; 0xb64 <write_DS3231+0x5c>
     b62:	d0 e0       	ldi	r29, 0x00	; 0
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b64:	d7 30       	cpi	r29, 0x07	; 7
     b66:	58 f3       	brcs	.-42     	; 0xb3e <write_DS3231+0x36>
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
			stop_TWI();
			return(retval);
		}
	}
	stop_TWI();
     b68:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>

	return(0);
     b6c:	80 e0       	ldi	r24, 0x00	; 0

}
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	ff 90       	pop	r15
     b78:	ef 90       	pop	r14
     b7a:	08 95       	ret

00000b7c <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	27 97       	sbiw	r28, 0x07	; 7
     b86:	cd bf       	out	0x3d, r28	; 61
     b88:	de bf       	out	0x3e, r29	; 62

	uint8_t retval, ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     b8a:	bc 01       	movw	r22, r24
     b8c:	ce 01       	movw	r24, r28
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	0e 94 bc 04 	call	0x978	; 0x978 <convert_iso2ds>
	if ((retval = write_DS3231(DS3231ADDR, ds3231time))) {
     b94:	be 01       	movw	r22, r28
     b96:	6f 5f       	subi	r22, 0xFF	; 255
     b98:	7f 4f       	sbci	r23, 0xFF	; 255
     b9a:	88 e6       	ldi	r24, 0x68	; 104
     b9c:	0e 94 84 05 	call	0xb08	; 0xb08 <write_DS3231>
		return(retval);
	}
	return(0);

}
     ba0:	27 96       	adiw	r28, 0x07	; 7
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	08 95       	ret

00000bac <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     bac:	45 e1       	ldi	r20, 0x15	; 21
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	6b e0       	ldi	r22, 0x0B	; 11
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	0e 94 57 1d 	call	0x3aae	; 0x3aae <eeprom_read_block>
     bb8:	08 95       	ret

00000bba <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     bba:	4b e0       	ldi	r20, 0x0B	; 11
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	0e 94 57 1d 	call	0x3aae	; 0x3aae <eeprom_read_block>
     bc6:	08 95       	ret

00000bc8 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	65 97       	sbiw	r28, 0x15	; 21
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     bd6:	ce 01       	movw	r24, r28
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	0e 94 5a 05 	call	0xab4	; 0xab4 <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     bde:	45 e1       	ldi	r20, 0x15	; 21
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	6b e0       	ldi	r22, 0x0B	; 11
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	ce 01       	movw	r24, r28
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <eeprom_update_block>

}
     bee:	65 96       	adiw	r28, 0x15	; 21
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <update_VERSION>:

void update_VERSION(void)
{
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	2b 97       	sbiw	r28, 0x0b	; 11
     c04:	cd bf       	out	0x3d, r28	; 61
     c06:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     c08:	8b e0       	ldi	r24, 0x0B	; 11
     c0a:	e7 e7       	ldi	r30, 0x77	; 119
     c0c:	fb e7       	ldi	r31, 0x7B	; 123
     c0e:	de 01       	movw	r26, r28
     c10:	11 96       	adiw	r26, 0x01	; 1
     c12:	01 90       	ld	r0, Z+
     c14:	0d 92       	st	X+, r0
     c16:	8a 95       	dec	r24
     c18:	e1 f7       	brne	.-8      	; 0xc12 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     c1a:	4b e0       	ldi	r20, 0x0B	; 11
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	ce 01       	movw	r24, r28
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <eeprom_update_block>

}
     c2a:	2b 96       	adiw	r28, 0x0b	; 11
     c2c:	cd bf       	out	0x3d, r28	; 61
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	08 95       	ret

00000c36 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     c36:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <update_BOOTTIME>
	update_VERSION();
     c3a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <update_VERSION>
     c3e:	08 95       	ret

00000c40 <read_FRAM>:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)

------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     c40:	ef 92       	push	r14
     c42:	ff 92       	push	r15
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	c8 2f       	mov	r28, r24
     c4e:	e6 2e       	mov	r14, r22
     c50:	f7 2e       	mov	r15, r23
     c52:	8a 01       	movw	r16, r20
     c54:	d2 2f       	mov	r29, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
     c5c:	81 11       	cpse	r24, r1
     c5e:	2b c0       	rjmp	.+86     	; 0xcb6 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {			// Send memory address
     c60:	8f 2d       	mov	r24, r15
     c62:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
     c66:	81 11       	cpse	r24, r1
     c68:	26 c0       	rjmp	.+76     	; 0xcb6 <read_FRAM+0x76>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {
     c6a:	8e 2d       	mov	r24, r14
     c6c:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
     c70:	81 11       	cpse	r24, r1
     c72:	21 c0       	rjmp	.+66     	; 0xcb6 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
     c74:	61 e0       	ldi	r22, 0x01	; 1
     c76:	8c 2f       	mov	r24, r28
     c78:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
     c7c:	81 11       	cpse	r24, r1
     c7e:	1b c0       	rjmp	.+54     	; 0xcb6 <read_FRAM+0x76>
     c80:	c0 e0       	ldi	r28, 0x00	; 0
     c82:	08 c0       	rjmp	.+16     	; 0xc94 <read_FRAM+0x54>
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     c84:	78 01       	movw	r14, r16
     c86:	ec 0e       	add	r14, r28
     c88:	f1 1c       	adc	r15, r1
     c8a:	0e 94 64 13 	call	0x26c8	; 0x26c8 <read_TWI>
     c8e:	f7 01       	movw	r30, r14
     c90:	80 83       	st	Z, r24

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
     c92:	cf 5f       	subi	r28, 0xFF	; 255
     c94:	2c 2f       	mov	r18, r28
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	8d 2f       	mov	r24, r29
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	28 17       	cp	r18, r24
     ca0:	39 07       	cpc	r19, r25
     ca2:	84 f3       	brlt	.-32     	; 0xc84 <read_FRAM+0x44>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     ca4:	ec 01       	movw	r28, r24
     ca6:	c0 0f       	add	r28, r16
     ca8:	d1 1f       	adc	r29, r17
     caa:	0e 94 74 13 	call	0x26e8	; 0x26e8 <readlast_TWI>
     cae:	88 83       	st	Y, r24

	stop_TWI();
     cb0:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>

	return(0);
     cb4:	80 e0       	ldi	r24, 0x00	; 0

}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	08 95       	ret

00000cc4 <write_FRAM>:
	Returns:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     cc4:	ef 92       	push	r14
     cc6:	ff 92       	push	r15
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	f6 2e       	mov	r15, r22
     cd2:	17 2f       	mov	r17, r23
     cd4:	ea 01       	movw	r28, r20
     cd6:	02 2f       	mov	r16, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if ((retval = start_TWI(addr, TWIWRITE))) {	// TWI START
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
     cde:	81 11       	cpse	r24, r1
     ce0:	1c c0       	rjmp	.+56     	; 0xd1a <write_FRAM+0x56>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {		// FRAM address to write
     ce2:	81 2f       	mov	r24, r17
     ce4:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
     ce8:	81 11       	cpse	r24, r1
     cea:	17 c0       	rjmp	.+46     	; 0xd1a <write_FRAM+0x56>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
     cec:	8f 2d       	mov	r24, r15
     cee:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
     cf2:	81 11       	cpse	r24, r1
     cf4:	12 c0       	rjmp	.+36     	; 0xd1a <write_FRAM+0x56>
     cf6:	10 e0       	ldi	r17, 0x00	; 0
     cf8:	0b c0       	rjmp	.+22     	; 0xd10 <write_FRAM+0x4c>
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     cfa:	7e 01       	movw	r14, r28
     cfc:	8f ef       	ldi	r24, 0xFF	; 255
     cfe:	e8 1a       	sub	r14, r24
     d00:	f8 0a       	sbc	r15, r24
     d02:	88 81       	ld	r24, Y
     d04:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
     d08:	81 11       	cpse	r24, r1
     d0a:	07 c0       	rjmp	.+14     	; 0xd1a <write_FRAM+0x56>
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     d0c:	1f 5f       	subi	r17, 0xFF	; 255
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     d0e:	e7 01       	movw	r28, r14
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     d10:	10 17       	cp	r17, r16
     d12:	98 f3       	brcs	.-26     	; 0xcfa <write_FRAM+0x36>
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
			return(retval);
		}
	}

	stop_TWI();
     d14:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>

	return(0);
     d18:	80 e0       	ldi	r24, 0x00	; 0

}
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	ff 90       	pop	r15
     d24:	ef 90       	pop	r14
     d26:	08 95       	ret

00000d28 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     d28:	8f 92       	push	r8
     d2a:	9f 92       	push	r9
     d2c:	af 92       	push	r10
     d2e:	bf 92       	push	r11
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15

	uint8_t adcpin;
	float humidity, temperature;

	switch (sensor) {
     d38:	81 30       	cpi	r24, 0x01	; 1
     d3a:	59 f0       	breq	.+22     	; 0xd52 <get_humidity+0x2a>
     d3c:	18 f0       	brcs	.+6      	; 0xd44 <get_humidity+0x1c>
     d3e:	82 30       	cpi	r24, 0x02	; 2
     d40:	79 f0       	breq	.+30     	; 0xd60 <get_humidity+0x38>
     d42:	15 c0       	rjmp	.+42     	; 0xd6e <get_humidity+0x46>
		case 0:
			temperature = get_temperature(0);
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	0e 94 49 13 	call	0x2692	; 0x2692 <get_temperature>
     d4a:	4b 01       	movw	r8, r22
     d4c:	5c 01       	movw	r10, r24
//			adcpin = AIN1;		// test unit
			adcpin = AIN0;		// production
     d4e:	40 e4       	ldi	r20, 0x40	; 64
			break;
     d50:	17 c0       	rjmp	.+46     	; 0xd80 <get_humidity+0x58>
		case 1:
			temperature = get_temperature(1);
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	0e 94 49 13 	call	0x2692	; 0x2692 <get_temperature>
     d58:	4b 01       	movw	r8, r22
     d5a:	5c 01       	movw	r10, r24
			adcpin = AIN1;
     d5c:	40 e5       	ldi	r20, 0x50	; 80
			break;
     d5e:	10 c0       	rjmp	.+32     	; 0xd80 <get_humidity+0x58>
		case 2:
			temperature = get_temperature(2);
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	0e 94 49 13 	call	0x2692	; 0x2692 <get_temperature>
     d66:	4b 01       	movw	r8, r22
     d68:	5c 01       	movw	r10, r24
			adcpin = AIN2;
     d6a:	40 e6       	ldi	r20, 0x60	; 96
			break;
     d6c:	09 c0       	rjmp	.+18     	; 0xd80 <get_humidity+0x58>
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     d6e:	0f 2e       	mov	r0, r31
     d70:	81 2c       	mov	r8, r1
     d72:	91 2c       	mov	r9, r1
     d74:	f0 ea       	ldi	r31, 0xA0	; 160
     d76:	af 2e       	mov	r10, r31
     d78:	f1 e4       	ldi	r31, 0x41	; 65
     d7a:	bf 2e       	mov	r11, r31
     d7c:	f0 2d       	mov	r31, r0
			temperature = get_temperature(2);
			adcpin = AIN2;
			break;
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     d7e:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	humidity = ((read_ADS1115(ADC_RH, PGA6144, adcpin, DR128)/5.0) - 0.16) / 0.0062;
     d80:	20 e8       	ldi	r18, 0x80	; 128
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	88 e4       	ldi	r24, 0x48	; 72
     d86:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_ADS1115>
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	40 ea       	ldi	r20, 0xA0	; 160
     d90:	50 e4       	ldi	r21, 0x40	; 64
     d92:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__divsf3>
     d96:	2a e0       	ldi	r18, 0x0A	; 10
     d98:	37 ed       	ldi	r19, 0xD7	; 215
     d9a:	43 e2       	ldi	r20, 0x23	; 35
     d9c:	5e e3       	ldi	r21, 0x3E	; 62
     d9e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__subsf3>
     da2:	2f e5       	ldi	r18, 0x5F	; 95
     da4:	39 e2       	ldi	r19, 0x29	; 41
     da6:	4b ec       	ldi	r20, 0xCB	; 203
     da8:	5b e3       	ldi	r21, 0x3B	; 59
     daa:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__divsf3>
     dae:	6b 01       	movw	r12, r22
     db0:	7c 01       	movw	r14, r24
	humidity = (humidity / (1.0546 - 0.00216 * temperature));
     db2:	29 ec       	ldi	r18, 0xC9	; 201
     db4:	3e e8       	ldi	r19, 0x8E	; 142
     db6:	4d e0       	ldi	r20, 0x0D	; 13
     db8:	5b e3       	ldi	r21, 0x3B	; 59
     dba:	c5 01       	movw	r24, r10
     dbc:	b4 01       	movw	r22, r8
     dbe:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
     dc2:	9b 01       	movw	r18, r22
     dc4:	ac 01       	movw	r20, r24
     dc6:	62 e2       	ldi	r22, 0x22	; 34
     dc8:	7d ef       	ldi	r23, 0xFD	; 253
     dca:	86 e8       	ldi	r24, 0x86	; 134
     dcc:	9f e3       	ldi	r25, 0x3F	; 63
     dce:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__subsf3>
     dd2:	9b 01       	movw	r18, r22
     dd4:	ac 01       	movw	r20, r24
     dd6:	c7 01       	movw	r24, r14
     dd8:	b6 01       	movw	r22, r12
     dda:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__divsf3>
	return(humidity);

}
     dde:	ff 90       	pop	r15
     de0:	ef 90       	pop	r14
     de2:	df 90       	pop	r13
     de4:	cf 90       	pop	r12
     de6:	bf 90       	pop	r11
     de8:	af 90       	pop	r10
     dea:	9f 90       	pop	r9
     dec:	8f 90       	pop	r8
     dee:	08 95       	ret

00000df0 <initialize>:
#include "globals.h"
#include "initialize.h"

void initialize(void)
{
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	2b 97       	sbiw	r28, 0x0b	; 11
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	init_PORTS();
     dfe:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <init_PORTS>
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton
     e02:	8b e0       	ldi	r24, 0x0B	; 11
     e04:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f44b6>
	init_SPECID();
     e08:	0e 94 41 13 	call	0x2682	; 0x2682 <init_SPECID>
	init_LED();
     e0c:	0e 94 b4 07 	call	0xf68	; 0xf68 <init_LED>
	init_BEEPER();
     e10:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <init_BEEPER>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
     e14:	80 e2       	ldi	r24, 0x20	; 32
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 9d 12 	call	0x253a	; 0x253a <init_RTC>
	init_USART();
     e1c:	0e 94 be 13 	call	0x277c	; 0x277c <init_USART>
	init_TWI();
     e20:	0e 94 59 13 	call	0x26b2	; 0x26b2 <init_TWI>
	init_MMA8451();
     e24:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <init_MMA8451>
	init_PNEU();
     e28:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <init_PNEU>
	init_OLED(0);
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	0e 94 22 0a 	call	0x1444	; 0x1444 <init_OLED>
	init_OLED(1);
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	0e 94 22 0a 	call	0x1444	; 0x1444 <init_OLED>
	init_EEPROM();	// Needs TWI for get_time()
     e38:	0e 94 1b 06 	call	0xc36	; 0xc36 <init_EEPROM>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
     e3c:	80 ee       	ldi	r24, 0xE0	; 224
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	80 93 0e 2a 	sts	0x2A0E, r24	; 0x802a0e <timeoutOLED>
     e44:	90 93 0f 2a 	sts	0x2A0F, r25	; 0x802a0f <timeoutOLED+0x1>
	get_VERSION(versionstr);
     e48:	ce 01       	movw	r24, r28
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	0e 94 dd 05 	call	0xbba	; 0xbba <get_VERSION>
	writestr_OLED(1,"specMech Version", 1);
     e50:	41 e0       	ldi	r20, 0x01	; 1
     e52:	62 e8       	ldi	r22, 0x82	; 130
     e54:	7b e7       	ldi	r23, 0x7B	; 123
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
	writestr_OLED(1, versionstr, 2);
     e5c:	42 e0       	ldi	r20, 0x02	; 2
     e5e:	be 01       	movw	r22, r28
     e60:	6f 5f       	subi	r22, 0xFF	; 255
     e62:	7f 4f       	sbci	r23, 0xFF	; 255
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>

}
     e6a:	2b 96       	adiw	r28, 0x0b	; 11
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	08 95       	ret

00000e76 <__vector_29>:

/*----------------------------------------------------------------------
Curiosity Nano on-board pushbutton reboots the system
----------------------------------------------------------------------*/
ISR(PORTF_PORT_vect)
{
     e76:	1f 92       	push	r1
     e78:	0f 92       	push	r0
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	0f 92       	push	r0
     e7e:	11 24       	eor	r1, r1
     e80:	2f 93       	push	r18
     e82:	3f 93       	push	r19
     e84:	4f 93       	push	r20
     e86:	5f 93       	push	r21
     e88:	6f 93       	push	r22
     e8a:	7f 93       	push	r23
     e8c:	8f 93       	push	r24
     e8e:	9f 93       	push	r25
     e90:	af 93       	push	r26
     e92:	bf 93       	push	r27
     e94:	ef 93       	push	r30
     e96:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
     e98:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
     e9c:	86 ff       	sbrs	r24, 6
     e9e:	05 c0       	rjmp	.+10     	; 0xeaa <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
     ea0:	80 e4       	ldi	r24, 0x40	; 64
     ea2:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
     ea6:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <reboot>
	}

}
     eaa:	ff 91       	pop	r31
     eac:	ef 91       	pop	r30
     eae:	bf 91       	pop	r27
     eb0:	af 91       	pop	r26
     eb2:	9f 91       	pop	r25
     eb4:	8f 91       	pop	r24
     eb6:	7f 91       	pop	r23
     eb8:	6f 91       	pop	r22
     eba:	5f 91       	pop	r21
     ebc:	4f 91       	pop	r20
     ebe:	3f 91       	pop	r19
     ec0:	2f 91       	pop	r18
     ec2:	0f 90       	pop	r0
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	0f 90       	pop	r0
     ec8:	1f 90       	pop	r1
     eca:	18 95       	reti

00000ecc <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
     ecc:	cf 92       	push	r12
     ece:	df 92       	push	r13
     ed0:	ef 92       	push	r14
     ed2:	ff 92       	push	r15

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	21 f0       	breq	.+8      	; 0xee0 <read_ionpump+0x14>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
     ed8:	82 30       	cpi	r24, 0x02	; 2
     eda:	79 f5       	brne	.+94     	; 0xf3a <read_ionpump+0x6e>
		pins = AIN23;
     edc:	40 e3       	ldi	r20, 0x30	; 48
     ede:	01 c0       	rjmp	.+2      	; 0xee2 <read_ionpump+0x16>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
     ee0:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(-999.9);
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);
     ee2:	20 e8       	ldi	r18, 0x80	; 128
     ee4:	62 e0       	ldi	r22, 0x02	; 2
     ee6:	89 e4       	ldi	r24, 0x49	; 73
     ee8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <read_ADS1115>
     eec:	6b 01       	movw	r12, r22
     eee:	7c 01       	movw	r14, r24

	if (voltage < 0.4) {						// Useful range for the Modion pump
     ef0:	2d ec       	ldi	r18, 0xCD	; 205
     ef2:	3c ec       	ldi	r19, 0xCC	; 204
     ef4:	4c ec       	ldi	r20, 0xCC	; 204
     ef6:	5e e3       	ldi	r21, 0x3E	; 62
     ef8:	0e 94 24 16 	call	0x2c48	; 0x2c48 <__cmpsf2>
     efc:	88 23       	and	r24, r24
     efe:	14 f1       	brlt	.+68     	; 0xf44 <read_ionpump+0x78>
		return(-999.9);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	40 e0       	ldi	r20, 0x00	; 0
     f06:	50 e4       	ldi	r21, 0x40	; 64
     f08:	c7 01       	movw	r24, r14
     f0a:	b6 01       	movw	r22, r12
     f0c:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__gesf2>
     f10:	18 16       	cp	r1, r24
     f12:	ec f0       	brlt	.+58     	; 0xf4e <read_ionpump+0x82>
		return(-999.9);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
     f14:	29 e7       	ldi	r18, 0x79	; 121
     f16:	39 ee       	ldi	r19, 0xE9	; 233
     f18:	42 e0       	ldi	r20, 0x02	; 2
     f1a:	50 e4       	ldi	r21, 0x40	; 64
     f1c:	c7 01       	movw	r24, r14
     f1e:	b6 01       	movw	r22, r12
     f20:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
     f24:	2e e6       	ldi	r18, 0x6E	; 110
     f26:	33 ea       	ldi	r19, 0xA3	; 163
     f28:	4b ed       	ldi	r20, 0xDB	; 219
     f2a:	50 e4       	ldi	r21, 0x40	; 64
     f2c:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__subsf3>

	return(vacuum);
     f30:	56 2f       	mov	r21, r22
     f32:	47 2f       	mov	r20, r23
     f34:	38 2f       	mov	r19, r24
     f36:	29 2f       	mov	r18, r25
     f38:	0e c0       	rjmp	.+28     	; 0xf56 <read_ionpump+0x8a>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(-999.9);
     f3a:	5a e9       	ldi	r21, 0x9A	; 154
     f3c:	49 ef       	ldi	r20, 0xF9	; 249
     f3e:	39 e7       	ldi	r19, 0x79	; 121
     f40:	24 ec       	ldi	r18, 0xC4	; 196
     f42:	09 c0       	rjmp	.+18     	; 0xf56 <read_ionpump+0x8a>
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);

	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(-999.9);							// after ISO224 op-amp is 0.5 to 2.0 V
     f44:	5a e9       	ldi	r21, 0x9A	; 154
     f46:	49 ef       	ldi	r20, 0xF9	; 249
     f48:	39 e7       	ldi	r19, 0x79	; 121
     f4a:	24 ec       	ldi	r18, 0xC4	; 196
     f4c:	04 c0       	rjmp	.+8      	; 0xf56 <read_ionpump+0x8a>
	} else if (voltage > 2.0) {
		return(-999.9);
     f4e:	5a e9       	ldi	r21, 0x9A	; 154
     f50:	49 ef       	ldi	r20, 0xF9	; 249
     f52:	39 e7       	ldi	r19, 0x79	; 121
     f54:	24 ec       	ldi	r18, 0xC4	; 196
	vacuum = ISO224SLOPE * voltage + ISO224INTER;

	return(vacuum);
//return(voltage);

}
     f56:	65 2f       	mov	r22, r21
     f58:	74 2f       	mov	r23, r20
     f5a:	83 2f       	mov	r24, r19
     f5c:	92 2f       	mov	r25, r18
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	df 90       	pop	r13
     f64:	cf 90       	pop	r12
     f66:	08 95       	ret

00000f68 <init_LED>:
#include "globals.h"

void init_LED(void)
{
	PORTF.OUTSET = PIN5_bm;
     f68:	e0 ea       	ldi	r30, 0xA0	; 160
     f6a:	f4 e0       	ldi	r31, 0x04	; 4
     f6c:	80 e2       	ldi	r24, 0x20	; 32
     f6e:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN5_bm;
     f70:	81 83       	std	Z+1, r24	; 0x01
     f72:	08 95       	ret

00000f74 <main>:
int main(void)
{

uint8_t old_recv0bufhead;	// debugging

	initialize();
     f74:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <initialize>
	sei();
     f78:	78 94       	sei

old_recv0bufhead = 0;
     f7a:	c0 e0       	ldi	r28, 0x00	; 0

	for (;;) {
		if (old_recv0bufhead != recv0_buf.head) {
     f7c:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv0_buf+0x80>
     f80:	c8 17       	cp	r28, r24
     f82:	59 f0       	breq	.+22     	; 0xf9a <main+0x26>
			old_recv0bufhead = recv0_buf.head;
			on_BEEPER;
     f84:	e0 e2       	ldi	r30, 0x20	; 32
     f86:	f4 e0       	ldi	r31, 0x04	; 4
     f88:	94 e0       	ldi	r25, 0x04	; 4
     f8a:	95 83       	std	Z+5, r25	; 0x05
     f8c:	a2 ec       	ldi	r26, 0xC2	; 194
     f8e:	b2 ea       	ldi	r27, 0xA2	; 162
     f90:	11 97       	sbiw	r26, 0x01	; 1
     f92:	f1 f7       	brne	.-4      	; 0xf90 <main+0x1c>
     f94:	00 c0       	rjmp	.+0      	; 0xf96 <main+0x22>
			_delay_ms(50);
			off_BEEPER;
     f96:	96 83       	std	Z+6, r25	; 0x06

old_recv0bufhead = 0;

	for (;;) {
		if (old_recv0bufhead != recv0_buf.head) {
			old_recv0bufhead = recv0_buf.head;
     f98:	c8 2f       	mov	r28, r24
			on_BEEPER;
			_delay_ms(50);
			off_BEEPER;
		}
		if (recv0_buf.done) {
     f9a:	80 91 1a 2b 	lds	r24, 0x2B1A	; 0x802b1a <recv0_buf+0x84>
     f9e:	88 23       	and	r24, r24
     fa0:	69 f3       	breq	.-38     	; 0xf7c <main+0x8>
			recv0_buf.done = NO;
     fa2:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv0_buf+0x84>
			commands();
     fa6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <commands>
     faa:	e8 cf       	rjmp	.-48     	; 0xf7c <main+0x8>

00000fac <read_MCP23008>:
	Returns:
		val - data in that MCP23008 register
		Function return value is 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	c8 2f       	mov	r28, r24
     fb2:	d6 2f       	mov	r29, r22

	uint8_t val;

	start_TWI(addr, TWIWRITE);
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
	write_TWI(reg);
     fba:	8d 2f       	mov	r24, r29
     fbc:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
	start_TWI(addr, TWIREAD);
     fc0:	61 e0       	ldi	r22, 0x01	; 1
     fc2:	8c 2f       	mov	r24, r28
     fc4:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
	val = readlast_TWI();
     fc8:	0e 94 74 13 	call	0x26e8	; 0x26e8 <readlast_TWI>
     fcc:	c8 2f       	mov	r28, r24
	stop_TWI();
     fce:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
	return(val);

}
     fd2:	8c 2f       	mov	r24, r28
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	d6 2f       	mov	r29, r22
     fe2:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
     fea:	c8 2f       	mov	r28, r24
     fec:	88 23       	and	r24, r24
     fee:	21 f0       	breq	.+8      	; 0xff8 <write_MCP23008+0x1e>
		stop_TWI();
     ff0:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
		return(retval);
     ff4:	8c 2f       	mov	r24, r28
     ff6:	17 c0       	rjmp	.+46     	; 0x1026 <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(reg))) {
     ff8:	8d 2f       	mov	r24, r29
     ffa:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
     ffe:	c8 2f       	mov	r28, r24
    1000:	88 23       	and	r24, r24
    1002:	21 f0       	breq	.+8      	; 0x100c <write_MCP23008+0x32>
		stop_TWI();
    1004:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
		return(retval);
    1008:	8c 2f       	mov	r24, r28
    100a:	0d c0       	rjmp	.+26     	; 0x1026 <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(val))) {
    100c:	81 2f       	mov	r24, r17
    100e:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
    1012:	c8 2f       	mov	r28, r24
    1014:	88 23       	and	r24, r24
    1016:	21 f0       	breq	.+8      	; 0x1020 <write_MCP23008+0x46>
		stop_TWI();
    1018:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
		return(retval);
    101c:	8c 2f       	mov	r24, r28
    101e:	03 c0       	rjmp	.+6      	; 0x1026 <write_MCP23008+0x4c>
	}
	stop_TWI();
    1020:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
	return(0);
    1024:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	08 95       	ret

0000102e <read_MCP9808>:
//#define MCP9808ADDR		(0x30)	// TWI address
#define MCP9808ADDR		(0x18)	// TWI address
#define TEMPREGISTER	(0x05)	// Ambient temperature register

float read_MCP9808(void)
{
    102e:	cf 92       	push	r12
    1030:	df 92       	push	r13
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29

	uint8_t highbyte, lowbyte, sign;
	float temperature;

	start_TWI(MCP9808ADDR, TWIWRITE);
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	88 e1       	ldi	r24, 0x18	; 24
    1040:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
	write_TWI(TEMPREGISTER);
    1044:	85 e0       	ldi	r24, 0x05	; 5
    1046:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    104a:	61 e0       	ldi	r22, 0x01	; 1
    104c:	88 e1       	ldi	r24, 0x18	; 24
    104e:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
	highbyte = read_TWI();
    1052:	0e 94 64 13 	call	0x26c8	; 0x26c8 <read_TWI>
    1056:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    1058:	0e 94 74 13 	call	0x26e8	; 0x26e8 <readlast_TWI>
    105c:	d8 2f       	mov	r29, r24
	stop_TWI();
    105e:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1062:	1c 2f       	mov	r17, r28
    1064:	10 71       	andi	r17, 0x10	; 16
	highbyte &= 0x0F;					// Clear threshold & sign bits
    1066:	6c 2f       	mov	r22, r28
    1068:	6f 70       	andi	r22, 0x0F	; 15
	temperature = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__floatunsisf>
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e8       	ldi	r20, 0x80	; 128
    107a:	51 e4       	ldi	r21, 0x41	; 65
    107c:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    1080:	6b 01       	movw	r12, r22
    1082:	7c 01       	movw	r14, r24
    1084:	6d 2f       	mov	r22, r29
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__floatunsisf>
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e8       	ldi	r20, 0x80	; 128
    1096:	5d e3       	ldi	r21, 0x3D	; 61
    1098:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    109c:	9b 01       	movw	r18, r22
    109e:	ac 01       	movw	r20, r24
    10a0:	c7 01       	movw	r24, r14
    10a2:	b6 01       	movw	r22, r12
    10a4:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__addsf3>
	if (sign) {
    10a8:	11 23       	and	r17, r17
    10aa:	41 f0       	breq	.+16     	; 0x10bc <read_MCP9808+0x8e>
		temperature = 256.0 - temperature;
    10ac:	9b 01       	movw	r18, r22
    10ae:	ac 01       	movw	r20, r24
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	80 e8       	ldi	r24, 0x80	; 128
    10b6:	93 e4       	ldi	r25, 0x43	; 67
    10b8:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__subsf3>
	}
	return(temperature);
}
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	df 90       	pop	r13
    10c8:	cf 90       	pop	r12
    10ca:	08 95       	ret

000010cc <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    10cc:	ef 92       	push	r14
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	18 2f       	mov	r17, r24
    10da:	f6 2e       	mov	r15, r22
    10dc:	ea 01       	movw	r28, r20
    10de:	02 2f       	mov	r16, r18

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
    10e6:	81 11       	cpse	r24, r1
    10e8:	1e c0       	rjmp	.+60     	; 0x1126 <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = write_TWI(reg))) {
    10ea:	8f 2d       	mov	r24, r15
    10ec:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
    10f0:	81 11       	cpse	r24, r1
    10f2:	19 c0       	rjmp	.+50     	; 0x1126 <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
    10f4:	61 e0       	ldi	r22, 0x01	; 1
    10f6:	81 2f       	mov	r24, r17
    10f8:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
    10fc:	81 11       	cpse	r24, r1
    10fe:	13 c0       	rjmp	.+38     	; 0x1126 <read_MMA8451+0x5a>
    1100:	11 e0       	ldi	r17, 0x01	; 1
    1102:	09 c0       	rjmp	.+18     	; 0x1116 <read_MMA8451+0x4a>
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    1104:	7e 01       	movw	r14, r28
    1106:	8f ef       	ldi	r24, 0xFF	; 255
    1108:	e8 1a       	sub	r14, r24
    110a:	f8 0a       	sbc	r15, r24
    110c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <read_TWI>
    1110:	88 83       	st	Y, r24
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    1112:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    1114:	e7 01       	movw	r28, r14
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    1116:	10 17       	cp	r17, r16
    1118:	a8 f3       	brcs	.-22     	; 0x1104 <read_MMA8451+0x38>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    111a:	0e 94 74 13 	call	0x26e8	; 0x26e8 <readlast_TWI>
    111e:	88 83       	st	Y, r24
	stop_TWI();
    1120:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
	return(0);
    1124:	80 e0       	ldi	r24, 0x00	; 0

}
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	08 95       	ret

00001134 <get_orientation>:
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
//uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
uint8_t get_orientation(float *x, float *y, float *z)
{
    1134:	cf 92       	push	r12
    1136:	df 92       	push	r13
    1138:	ef 92       	push	r14
    113a:	ff 92       	push	r15
    113c:	0f 93       	push	r16
    113e:	1f 93       	push	r17
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	26 97       	sbiw	r28, 0x06	; 6
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	6c 01       	movw	r12, r24
    1150:	7b 01       	movw	r14, r22
    1152:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -9999.9;
    1154:	8a e9       	ldi	r24, 0x9A	; 154
    1156:	9f e3       	ldi	r25, 0x3F	; 63
    1158:	ac e1       	ldi	r26, 0x1C	; 28
    115a:	b6 ec       	ldi	r27, 0xC6	; 198
    115c:	fa 01       	movw	r30, r20
    115e:	80 83       	st	Z, r24
    1160:	91 83       	std	Z+1, r25	; 0x01
    1162:	a2 83       	std	Z+2, r26	; 0x02
    1164:	b3 83       	std	Z+3, r27	; 0x03
    1166:	fb 01       	movw	r30, r22
    1168:	80 83       	st	Z, r24
    116a:	91 83       	std	Z+1, r25	; 0x01
    116c:	a2 83       	std	Z+2, r26	; 0x02
    116e:	b3 83       	std	Z+3, r27	; 0x03
    1170:	f6 01       	movw	r30, r12
    1172:	80 83       	st	Z, r24
    1174:	91 83       	std	Z+1, r25	; 0x01
    1176:	a2 83       	std	Z+2, r26	; 0x02
    1178:	b3 83       	std	Z+3, r27	; 0x03

	read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6);
    117a:	26 e0       	ldi	r18, 0x06	; 6
    117c:	ae 01       	movw	r20, r28
    117e:	4f 5f       	subi	r20, 0xFF	; 255
    1180:	5f 4f       	sbci	r21, 0xFF	; 255
    1182:	61 e0       	ldi	r22, 0x01	; 1
    1184:	8d e1       	ldi	r24, 0x1D	; 29
    1186:	0e 94 66 08 	call	0x10cc	; 0x10cc <read_MMA8451>

	ix = datain[0];
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    118e:	98 2f       	mov	r25, r24
    1190:	88 27       	eor	r24, r24
	ix |= datain[1];
    1192:	2a 81       	ldd	r18, Y+2	; 0x02
    1194:	82 2b       	or	r24, r18
	ix /= 4;
    1196:	bc 01       	movw	r22, r24
    1198:	77 23       	and	r23, r23
    119a:	14 f4       	brge	.+4      	; 0x11a0 <get_orientation+0x6c>
    119c:	6d 5f       	subi	r22, 0xFD	; 253
    119e:	7f 4f       	sbci	r23, 0xFF	; 255
    11a0:	75 95       	asr	r23
    11a2:	67 95       	ror	r22
    11a4:	75 95       	asr	r23
    11a6:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    11a8:	07 2e       	mov	r0, r23
    11aa:	00 0c       	add	r0, r0
    11ac:	88 0b       	sbc	r24, r24
    11ae:	99 0b       	sbc	r25, r25
    11b0:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__floatsisf>
    11b4:	26 e6       	ldi	r18, 0x66	; 102
    11b6:	36 e2       	ldi	r19, 0x26	; 38
    11b8:	45 e7       	ldi	r20, 0x75	; 117
    11ba:	5e e3       	ldi	r21, 0x3E	; 62
    11bc:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    11c0:	f6 01       	movw	r30, r12
    11c2:	60 83       	st	Z, r22
    11c4:	71 83       	std	Z+1, r23	; 0x01
    11c6:	82 83       	std	Z+2, r24	; 0x02
    11c8:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    11ce:	98 2f       	mov	r25, r24
    11d0:	88 27       	eor	r24, r24
	iy |= datain[3];
    11d2:	2c 81       	ldd	r18, Y+4	; 0x04
    11d4:	82 2b       	or	r24, r18
	iy /= 4;
    11d6:	bc 01       	movw	r22, r24
    11d8:	77 23       	and	r23, r23
    11da:	14 f4       	brge	.+4      	; 0x11e0 <get_orientation+0xac>
    11dc:	6d 5f       	subi	r22, 0xFD	; 253
    11de:	7f 4f       	sbci	r23, 0xFF	; 255
    11e0:	75 95       	asr	r23
    11e2:	67 95       	ror	r22
    11e4:	75 95       	asr	r23
    11e6:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    11e8:	07 2e       	mov	r0, r23
    11ea:	00 0c       	add	r0, r0
    11ec:	88 0b       	sbc	r24, r24
    11ee:	99 0b       	sbc	r25, r25
    11f0:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__floatsisf>
    11f4:	26 e6       	ldi	r18, 0x66	; 102
    11f6:	36 e2       	ldi	r19, 0x26	; 38
    11f8:	45 e7       	ldi	r20, 0x75	; 117
    11fa:	5e e3       	ldi	r21, 0x3E	; 62
    11fc:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    1200:	f7 01       	movw	r30, r14
    1202:	60 83       	st	Z, r22
    1204:	71 83       	std	Z+1, r23	; 0x01
    1206:	82 83       	std	Z+2, r24	; 0x02
    1208:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    120e:	98 2f       	mov	r25, r24
    1210:	88 27       	eor	r24, r24
	iz |= datain[5];
    1212:	2e 81       	ldd	r18, Y+6	; 0x06
    1214:	82 2b       	or	r24, r18
	iz /= 4;
    1216:	bc 01       	movw	r22, r24
    1218:	77 23       	and	r23, r23
    121a:	14 f4       	brge	.+4      	; 0x1220 <get_orientation+0xec>
    121c:	6d 5f       	subi	r22, 0xFD	; 253
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	75 95       	asr	r23
    1222:	67 95       	ror	r22
    1224:	75 95       	asr	r23
    1226:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    1228:	07 2e       	mov	r0, r23
    122a:	00 0c       	add	r0, r0
    122c:	88 0b       	sbc	r24, r24
    122e:	99 0b       	sbc	r25, r25
    1230:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__floatsisf>
    1234:	26 e6       	ldi	r18, 0x66	; 102
    1236:	36 e2       	ldi	r19, 0x26	; 38
    1238:	45 e7       	ldi	r20, 0x75	; 117
    123a:	5e e3       	ldi	r21, 0x3E	; 62
    123c:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    1240:	f8 01       	movw	r30, r16
    1242:	60 83       	st	Z, r22
    1244:	71 83       	std	Z+1, r23	; 0x01
    1246:	82 83       	std	Z+2, r24	; 0x02
    1248:	93 83       	std	Z+3, r25	; 0x03

	return(0);

}
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	26 96       	adiw	r28, 0x06	; 6
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	df 90       	pop	r13
    1260:	cf 90       	pop	r12
    1262:	08 95       	ret

00001264 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1264:	1f 93       	push	r17
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	d6 2f       	mov	r29, r22
    126c:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
    1274:	c8 2f       	mov	r28, r24
    1276:	88 23       	and	r24, r24
    1278:	21 f0       	breq	.+8      	; 0x1282 <write_MMA8451+0x1e>
		stop_TWI();
    127a:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
		return(retval);
    127e:	8c 2f       	mov	r24, r28
    1280:	17 c0       	rjmp	.+46     	; 0x12b0 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    1282:	8d 2f       	mov	r24, r29
    1284:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
    1288:	c8 2f       	mov	r28, r24
    128a:	88 23       	and	r24, r24
    128c:	21 f0       	breq	.+8      	; 0x1296 <write_MMA8451+0x32>
		stop_TWI();
    128e:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
		return(retval);
    1292:	8c 2f       	mov	r24, r28
    1294:	0d c0       	rjmp	.+26     	; 0x12b0 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    1296:	81 2f       	mov	r24, r17
    1298:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
    129c:	c8 2f       	mov	r28, r24
    129e:	88 23       	and	r24, r24
    12a0:	21 f0       	breq	.+8      	; 0x12aa <write_MMA8451+0x46>
		stop_TWI();
    12a2:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
		return(retval);
    12a6:	8c 2f       	mov	r24, r28
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <write_MMA8451+0x4c>
	}
	stop_TWI();
    12aa:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>
	return(0);
    12ae:	80 e0       	ldi	r24, 0x00	; 0
	
}
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	1f 91       	pop	r17
    12b6:	08 95       	ret

000012b8 <init_MMA8451>:
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/

uint8_t init_MMA8451(void)
{
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	1f 92       	push	r1
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    12c2:	40 e4       	ldi	r20, 0x40	; 64
    12c4:	6b e2       	ldi	r22, 0x2B	; 43
    12c6:	8d e1       	ldi	r24, 0x1D	; 29
    12c8:	0e 94 32 09 	call	0x1264	; 0x1264 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    12cc:	21 e0       	ldi	r18, 0x01	; 1
    12ce:	ae 01       	movw	r20, r28
    12d0:	4f 5f       	subi	r20, 0xFF	; 255
    12d2:	5f 4f       	sbci	r21, 0xFF	; 255
    12d4:	6b e2       	ldi	r22, 0x2B	; 43
    12d6:	8d e1       	ldi	r24, 0x1D	; 29
    12d8:	0e 94 66 08 	call	0x10cc	; 0x10cc <read_MMA8451>
	while (retval & 0x40) {
    12dc:	08 c0       	rjmp	.+16     	; 0x12ee <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    12de:	21 e0       	ldi	r18, 0x01	; 1
    12e0:	ae 01       	movw	r20, r28
    12e2:	4f 5f       	subi	r20, 0xFF	; 255
    12e4:	5f 4f       	sbci	r21, 0xFF	; 255
    12e6:	6b e2       	ldi	r22, 0x2B	; 43
    12e8:	8d e1       	ldi	r24, 0x1D	; 29
    12ea:	0e 94 66 08 	call	0x10cc	; 0x10cc <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	86 fd       	sbrc	r24, 6
    12f2:	f5 cf       	rjmp	.-22     	; 0x12de <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    12f4:	40 ec       	ldi	r20, 0xC0	; 192
    12f6:	6f e0       	ldi	r22, 0x0F	; 15
    12f8:	8d e1       	ldi	r24, 0x1D	; 29
    12fa:	0e 94 32 09 	call	0x1264	; 0x1264 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    12fe:	42 e0       	ldi	r20, 0x02	; 2
    1300:	6b e2       	ldi	r22, 0x2B	; 43
    1302:	8d e1       	ldi	r24, 0x1D	; 29
    1304:	0e 94 32 09 	call	0x1264	; 0x1264 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    1308:	4d e3       	ldi	r20, 0x3D	; 61
    130a:	6a e2       	ldi	r22, 0x2A	; 42
    130c:	8d e1       	ldi	r24, 0x1D	; 29
    130e:	0e 94 32 09 	call	0x1264	; 0x1264 <write_MMA8451>

	return(retval);

}
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	0f 90       	pop	r0
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	08 95       	ret

0000131c <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    131c:	ef 92       	push	r14
    131e:	ff 92       	push	r15
    1320:	0f 93       	push	r16
    1322:	1f 93       	push	r17
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	2e 97       	sbiw	r28, 0x0e	; 14
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    1334:	88 e0       	ldi	r24, 0x08	; 8
    1336:	e3 e9       	ldi	r30, 0x93	; 147
    1338:	fb e7       	ldi	r31, 0x7B	; 123
    133a:	de 01       	movw	r26, r28
    133c:	11 96       	adiw	r26, 0x01	; 1
    133e:	01 90       	ld	r0, Z+
    1340:	0d 92       	st	X+, r0
    1342:	8a 95       	dec	r24
    1344:	e1 f7       	brne	.-8      	; 0x133e <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    1346:	f8 01       	movw	r30, r16
    1348:	01 90       	ld	r0, Z+
    134a:	00 20       	and	r0, r0
    134c:	e9 f7       	brne	.-6      	; 0x1348 <checksum_NMEA+0x2c>
    134e:	31 97       	sbiw	r30, 0x01	; 1
    1350:	3e 2f       	mov	r19, r30
    1352:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    1354:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	06 c0       	rjmp	.+12     	; 0x1366 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    135a:	f8 01       	movw	r30, r16
    135c:	e8 0f       	add	r30, r24
    135e:	f1 1d       	adc	r31, r1
    1360:	20 81       	ld	r18, Z
    1362:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1364:	8f 5f       	subi	r24, 0xFF	; 255
    1366:	83 17       	cp	r24, r19
    1368:	c0 f3       	brcs	.-16     	; 0x135a <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    136a:	1f 92       	push	r1
    136c:	9f 93       	push	r25
    136e:	ce 01       	movw	r24, r28
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	9f 93       	push	r25
    1374:	8f 93       	push	r24
    1376:	7e 01       	movw	r14, r28
    1378:	89 e0       	ldi	r24, 0x09	; 9
    137a:	e8 0e       	add	r14, r24
    137c:	f1 1c       	adc	r15, r1
    137e:	ff 92       	push	r15
    1380:	ef 92       	push	r14
    1382:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
	strcat(str, chksum);
    1386:	b7 01       	movw	r22, r14
    1388:	c8 01       	movw	r24, r16
    138a:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <strcat>

}
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	2e 96       	adiw	r28, 0x0e	; 14
    139c:	cd bf       	out	0x3d, r28	; 61
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	ff 90       	pop	r15
    13aa:	ef 90       	pop	r14
    13ac:	08 95       	ret

000013ae <format_ERR>:
/*------------------------------------------------------------------------------
void format_ERR(char *str)
	Returns an error line
------------------------------------------------------------------------------*/
void format_ERR(char *str)
{
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	28 97       	sbiw	r28, 0x08	; 8
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	08 2f       	mov	r16, r24
    13c2:	19 2f       	mov	r17, r25

	const char errformat[] = "$S%dERR";
    13c4:	88 e0       	ldi	r24, 0x08	; 8
    13c6:	eb e9       	ldi	r30, 0x9B	; 155
    13c8:	fb e7       	ldi	r31, 0x7B	; 123
    13ca:	de 01       	movw	r26, r28
    13cc:	11 96       	adiw	r26, 0x01	; 1
    13ce:	01 90       	ld	r0, Z+
    13d0:	0d 92       	st	X+, r0
    13d2:	8a 95       	dec	r24
    13d4:	e1 f7       	brne	.-8      	; 0x13ce <format_ERR+0x20>

	sprintf(str, errformat, get_SPECID);
    13d6:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    13da:	82 ff       	sbrs	r24, 2
    13dc:	03 c0       	rjmp	.+6      	; 0x13e4 <format_ERR+0x36>
    13de:	82 e0       	ldi	r24, 0x02	; 2
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <format_ERR+0x3a>
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	9f 93       	push	r25
    13ea:	8f 93       	push	r24
    13ec:	ce 01       	movw	r24, r28
    13ee:	01 96       	adiw	r24, 0x01	; 1
    13f0:	9f 93       	push	r25
    13f2:	8f 93       	push	r24
    13f4:	1f 93       	push	r17
    13f6:	0f 93       	push	r16
    13f8:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
	checksum_NMEA(str);
    13fc:	80 2f       	mov	r24, r16
    13fe:	91 2f       	mov	r25, r17
    1400:	0e 94 8e 09 	call	0x131c	; 0x131c <checksum_NMEA>

}
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	28 96       	adiw	r28, 0x08	; 8
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	08 95       	ret

00001420 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	d6 2f       	mov	r29, r22
    1426:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	0e 94 81 13 	call	0x2702	; 0x2702 <start_TWI>
	write_TWI(type);
    142e:	8d 2f       	mov	r24, r29
    1430:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
	write_TWI(byteToSend);
    1434:	8c 2f       	mov	r24, r28
    1436:	0e 94 a9 13 	call	0x2752	; 0x2752 <write_TWI>
	stop_TWI();
    143a:	0e 94 a5 13 	call	0x274a	; 0x274a <stop_TWI>

}
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	08 95       	ret

00001444 <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
    1444:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    1446:	e0 e6       	ldi	r30, 0x60	; 96
    1448:	f4 e0       	ldi	r31, 0x04	; 4
    144a:	90 e4       	ldi	r25, 0x40	; 64
    144c:	96 83       	std	Z+6, r25	; 0x06
	PORTD.DIRSET = PIN6_bm;
    144e:	91 83       	std	Z+1, r25	; 0x01
    1450:	a1 e4       	ldi	r26, 0x41	; 65
    1452:	b3 e0       	ldi	r27, 0x03	; 3
    1454:	11 97       	sbiw	r26, 0x01	; 1
    1456:	f1 f7       	brne	.-4      	; 0x1454 <init_OLED+0x10>
    1458:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    145a:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
    145c:	81 11       	cpse	r24, r1
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <init_OLED+0x20>
		twiaddr = OLEDADDR0;
    1460:	cc e3       	ldi	r28, 0x3C	; 60
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
    1464:	cd e3       	ldi	r28, 0x3D	; 61
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    1466:	4a e2       	ldi	r20, 0x2A	; 42
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	8c 2f       	mov	r24, r28
    146c:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    1470:	41 e7       	ldi	r20, 0x71	; 113
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	8c 2f       	mov	r24, r28
    1476:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    147a:	4c e5       	ldi	r20, 0x5C	; 92
    147c:	60 e4       	ldi	r22, 0x40	; 64
    147e:	8c 2f       	mov	r24, r28
    1480:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1484:	48 e2       	ldi	r20, 0x28	; 40
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	8c 2f       	mov	r24, r28
    148a:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    148e:	48 e0       	ldi	r20, 0x08	; 8
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	8c 2f       	mov	r24, r28
    1494:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1498:	4a e2       	ldi	r20, 0x2A	; 42
    149a:	60 e0       	ldi	r22, 0x00	; 0
    149c:	8c 2f       	mov	r24, r28
    149e:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    14a2:	49 e7       	ldi	r20, 0x79	; 121
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	8c 2f       	mov	r24, r28
    14a8:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    14ac:	45 ed       	ldi	r20, 0xD5	; 213
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	8c 2f       	mov	r24, r28
    14b2:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    14b6:	40 e7       	ldi	r20, 0x70	; 112
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	8c 2f       	mov	r24, r28
    14bc:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    14c0:	48 e7       	ldi	r20, 0x78	; 120
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	8c 2f       	mov	r24, r28
    14c6:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    14ca:	48 e0       	ldi	r20, 0x08	; 8
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	8c 2f       	mov	r24, r28
    14d0:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    14d4:	46 e0       	ldi	r20, 0x06	; 6
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	8c 2f       	mov	r24, r28
    14da:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    14de:	42 e7       	ldi	r20, 0x72	; 114
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	8c 2f       	mov	r24, r28
    14e4:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    14e8:	40 e0       	ldi	r20, 0x00	; 0
    14ea:	60 e4       	ldi	r22, 0x40	; 64
    14ec:	8c 2f       	mov	r24, r28
    14ee:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    14f2:	4a e2       	ldi	r20, 0x2A	; 42
    14f4:	60 e0       	ldi	r22, 0x00	; 0
    14f6:	8c 2f       	mov	r24, r28
    14f8:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    14fc:	49 e7       	ldi	r20, 0x79	; 121
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	8c 2f       	mov	r24, r28
    1502:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    1506:	4a ed       	ldi	r20, 0xDA	; 218
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	8c 2f       	mov	r24, r28
    150c:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1510:	40 e0       	ldi	r20, 0x00	; 0
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	8c 2f       	mov	r24, r28
    1516:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    151a:	4c ed       	ldi	r20, 0xDC	; 220
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	8c 2f       	mov	r24, r28
    1520:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	8c 2f       	mov	r24, r28
    152a:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    152e:	41 e8       	ldi	r20, 0x81	; 129
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	8c 2f       	mov	r24, r28
    1534:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    1538:	4f e7       	ldi	r20, 0x7F	; 127
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	8c 2f       	mov	r24, r28
    153e:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1542:	49 ed       	ldi	r20, 0xD9	; 217
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	8c 2f       	mov	r24, r28
    1548:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    154c:	41 ef       	ldi	r20, 0xF1	; 241
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	8c 2f       	mov	r24, r28
    1552:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    1556:	4b ed       	ldi	r20, 0xDB	; 219
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	8c 2f       	mov	r24, r28
    155c:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    1560:	40 e4       	ldi	r20, 0x40	; 64
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	8c 2f       	mov	r24, r28
    1566:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    156a:	48 e7       	ldi	r20, 0x78	; 120
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	8c 2f       	mov	r24, r28
    1570:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    1574:	48 e2       	ldi	r20, 0x28	; 40
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	8c 2f       	mov	r24, r28
    157a:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    157e:	41 e0       	ldi	r20, 0x01	; 1
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	8c 2f       	mov	r24, r28
    1584:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    1588:	40 e8       	ldi	r20, 0x80	; 128
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	8c 2f       	mov	r24, r28
    158e:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    1592:	4c e0       	ldi	r20, 0x0C	; 12
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	8c 2f       	mov	r24, r28
    1598:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
    159c:	ba e6       	ldi	r27, 0x6A	; 106
    159e:	24 e0       	ldi	r18, 0x04	; 4
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	b1 50       	subi	r27, 0x01	; 1
    15a4:	20 40       	sbci	r18, 0x00	; 0
    15a6:	80 40       	sbci	r24, 0x00	; 0
    15a8:	e1 f7       	brne	.-8      	; 0x15a2 <init_OLED+0x15e>
    15aa:	00 c0       	rjmp	.+0      	; 0x15ac <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
    15ac:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED>
    15b0:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED+0x1>
	timeoutOLED = 5;
    15b4:	85 e0       	ldi	r24, 0x05	; 5
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	80 93 0e 2a 	sts	0x2A0E, r24	; 0x802a0e <timeoutOLED>
    15bc:	90 93 0f 2a 	sts	0x2A0F, r25	; 0x802a0f <timeoutOLED+0x1>

}
    15c0:	cf 91       	pop	r28
    15c2:	08 95       	ret

000015c4 <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    15c4:	ef 92       	push	r14
    15c6:	ff 92       	push	r15
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	e2 97       	sbiw	r28, 0x32	; 50
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    15dc:	91 e1       	ldi	r25, 0x11	; 17
    15de:	e3 ea       	ldi	r30, 0xA3	; 163
    15e0:	fb e7       	ldi	r31, 0x7B	; 123
    15e2:	de 01       	movw	r26, r28
    15e4:	92 96       	adiw	r26, 0x22	; 34
    15e6:	01 90       	ld	r0, Z+
    15e8:	0d 92       	st	X+, r0
    15ea:	9a 95       	dec	r25
    15ec:	e1 f7       	brne	.-8      	; 0x15e6 <writestr_OLED+0x22>

	if (displaynumber == 0) {
    15ee:	81 11       	cpse	r24, r1
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    15f2:	0c e3       	ldi	r16, 0x3C	; 60
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    15f6:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    15f8:	ce 01       	movw	r24, r28
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	7c 01       	movw	r14, r24
    15fe:	0e 94 89 1c 	call	0x3912	; 0x3912 <strcpy>
	if (strlen(strbuf) > 16) {
    1602:	f7 01       	movw	r30, r14
    1604:	01 90       	ld	r0, Z+
    1606:	00 20       	and	r0, r0
    1608:	e9 f7       	brne	.-6      	; 0x1604 <writestr_OLED+0x40>
    160a:	31 97       	sbiw	r30, 0x01	; 1
    160c:	ee 19       	sub	r30, r14
    160e:	ff 09       	sbc	r31, r15
    1610:	71 97       	sbiw	r30, 0x11	; 17
    1612:	08 f0       	brcs	.+2      	; 0x1616 <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1614:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1616:	be 01       	movw	r22, r28
    1618:	6e 5d       	subi	r22, 0xDE	; 222
    161a:	7f 4f       	sbci	r23, 0xFF	; 255
    161c:	ce 01       	movw	r24, r28
    161e:	01 96       	adiw	r24, 0x01	; 1
    1620:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <strcat>

	if (lineno == 1) {
    1624:	11 30       	cpi	r17, 0x01	; 1
    1626:	39 f4       	brne	.+14     	; 0x1636 <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    1628:	40 e8       	ldi	r20, 0x80	; 128
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	80 2f       	mov	r24, r16
    162e:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1632:	10 e0       	ldi	r17, 0x00	; 0
    1634:	12 c0       	rjmp	.+36     	; 0x165a <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1636:	40 ec       	ldi	r20, 0xC0	; 192
    1638:	60 e0       	ldi	r22, 0x00	; 0
    163a:	80 2f       	mov	r24, r16
    163c:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>
    1640:	f8 cf       	rjmp	.-16     	; 0x1632 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1642:	e1 e0       	ldi	r30, 0x01	; 1
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	ec 0f       	add	r30, r28
    1648:	fd 1f       	adc	r31, r29
    164a:	e1 0f       	add	r30, r17
    164c:	f1 1d       	adc	r31, r1
    164e:	40 81       	ld	r20, Z
    1650:	60 e4       	ldi	r22, 0x40	; 64
    1652:	80 2f       	mov	r24, r16
    1654:	0e 94 10 0a 	call	0x1420	; 0x1420 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    1658:	1f 5f       	subi	r17, 0xFF	; 255
    165a:	10 31       	cpi	r17, 0x10	; 16
    165c:	90 f3       	brcs	.-28     	; 0x1642 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <timerOLED>
    1666:	90 93 0d 2a 	sts	0x2A0D, r25	; 0x802a0d <timerOLED+0x1>

}
    166a:	e2 96       	adiw	r28, 0x32	; 50
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	df 91       	pop	r29
    1672:	cf 91       	pop	r28
    1674:	1f 91       	pop	r17
    1676:	0f 91       	pop	r16
    1678:	ff 90       	pop	r15
    167a:	ef 90       	pop	r14
    167c:	08 95       	ret

0000167e <clear_OLED>:
/*------------------------------------------------------------------------------
void clear_OLED(uint8_t displaynumber)
	Clears the OLED screen by writing blank spaces to both lines.
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    167e:	1f 93       	push	r17
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	61 97       	sbiw	r28, 0x11	; 17
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	18 2f       	mov	r17, r24

	char blanks[] = "                ";	// Does const put this in flash?
    1690:	81 e1       	ldi	r24, 0x11	; 17
    1692:	e3 ea       	ldi	r30, 0xA3	; 163
    1694:	fb e7       	ldi	r31, 0x7B	; 123
    1696:	de 01       	movw	r26, r28
    1698:	11 96       	adiw	r26, 0x01	; 1
    169a:	01 90       	ld	r0, Z+
    169c:	0d 92       	st	X+, r0
    169e:	8a 95       	dec	r24
    16a0:	e1 f7       	brne	.-8      	; 0x169a <clear_OLED+0x1c>

	writestr_OLED(displaynumber, blanks, 1);
    16a2:	41 e0       	ldi	r20, 0x01	; 1
    16a4:	be 01       	movw	r22, r28
    16a6:	6f 5f       	subi	r22, 0xFF	; 255
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	81 2f       	mov	r24, r17
    16ac:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
	writestr_OLED(displaynumber, blanks, 2);
    16b0:	42 e0       	ldi	r20, 0x02	; 2
    16b2:	be 01       	movw	r22, r28
    16b4:	6f 5f       	subi	r22, 0xFF	; 255
    16b6:	7f 4f       	sbci	r23, 0xFF	; 255
    16b8:	81 2f       	mov	r24, r17
    16ba:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
	timerOLED = 0;
    16be:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED>
    16c2:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED+0x1>

}
    16c6:	61 96       	adiw	r28, 0x11	; 17
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	1f 91       	pop	r17
    16d2:	08 95       	ret

000016d4 <init_PNEU>:
uint8_t init_PNEU(void)
{

	uint8_t retval;

	if ((retval = write_MCP23008(HIGHCURRENT, IODIR, 0x00))) {
    16d4:	40 e0       	ldi	r20, 0x00	; 0
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	84 e2       	ldi	r24, 0x24	; 36
    16da:	0e 94 ed 07 	call	0xfda	; 0xfda <write_MCP23008>
    16de:	81 11       	cpse	r24, r1
    16e0:	35 c0       	rjmp	.+106    	; 0x174c <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, 0x00))) {
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	6a e0       	ldi	r22, 0x0A	; 10
    16e6:	84 e2       	ldi	r24, 0x24	; 36
    16e8:	0e 94 ed 07 	call	0xfda	; 0xfda <write_MCP23008>
    16ec:	81 11       	cpse	r24, r1
    16ee:	2e c0       	rjmp	.+92     	; 0x174c <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IODIR, 0xFE))) {	// Inputs
    16f0:	4e ef       	ldi	r20, 0xFE	; 254
    16f2:	60 e0       	ldi	r22, 0x00	; 0
    16f4:	81 e2       	ldi	r24, 0x21	; 33
    16f6:	0e 94 ed 07 	call	0xfda	; 0xfda <write_MCP23008>
    16fa:	81 11       	cpse	r24, r1
    16fc:	27 c0       	rjmp	.+78     	; 0x174c <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IPOL, 0x00))) {
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	61 e0       	ldi	r22, 0x01	; 1
    1702:	81 e2       	ldi	r24, 0x21	; 33
    1704:	0e 94 ed 07 	call	0xfda	; 0xfda <write_MCP23008>
    1708:	81 11       	cpse	r24, r1
    170a:	20 c0       	rjmp	.+64     	; 0x174c <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100))) {
    170c:	4c ef       	ldi	r20, 0xFC	; 252
    170e:	62 e0       	ldi	r22, 0x02	; 2
    1710:	81 e2       	ldi	r24, 0x21	; 33
    1712:	0e 94 ed 07 	call	0xfda	; 0xfda <write_MCP23008>
    1716:	81 11       	cpse	r24, r1
    1718:	19 c0       	rjmp	.+50     	; 0x174c <init_PNEU+0x78>
			return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, INTCON, 0x00))) {
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	64 e0       	ldi	r22, 0x04	; 4
    171e:	81 e2       	ldi	r24, 0x21	; 33
    1720:	0e 94 ed 07 	call	0xfda	; 0xfda <write_MCP23008>
    1724:	81 11       	cpse	r24, r1
    1726:	12 c0       	rjmp	.+36     	; 0x174c <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IOCON, 0x20))) { // Don't increment addr
    1728:	40 e2       	ldi	r20, 0x20	; 32
    172a:	65 e0       	ldi	r22, 0x05	; 5
    172c:	81 e2       	ldi	r24, 0x21	; 33
    172e:	0e 94 ed 07 	call	0xfda	; 0xfda <write_MCP23008>
    1732:	81 11       	cpse	r24, r1
    1734:	0b c0       	rjmp	.+22     	; 0x174c <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPPU, 0x7F))) { // Pullups (not really needed)
    1736:	4f e7       	ldi	r20, 0x7F	; 127
    1738:	66 e0       	ldi	r22, 0x06	; 6
    173a:	81 e2       	ldi	r24, 0x21	; 33
    173c:	0e 94 ed 07 	call	0xfda	; 0xfda <write_MCP23008>
    1740:	81 11       	cpse	r24, r1
    1742:	04 c0       	rjmp	.+8      	; 0x174c <init_PNEU+0x78>
		return(retval);
	}
	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    1744:	89 e0       	ldi	r24, 0x09	; 9
    1746:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	return(0);
    174a:	80 e0       	ldi	r24, 0x00	; 0

}
    174c:	08 95       	ret

0000174e <read_PNEUSENSORS>:
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
{
    174e:	cf 92       	push	r12
    1750:	df 92       	push	r13
    1752:	ef 92       	push	r14
    1754:	ff 92       	push	r15
    1756:	0f 93       	push	r16
    1758:	1f 93       	push	r17
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	6c 01       	movw	r12, r24
    1760:	8b 01       	movw	r16, r22
    1762:	7a 01       	movw	r14, r20
    1764:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);
    1766:	69 e0       	ldi	r22, 0x09	; 9
    1768:	81 e2       	ldi	r24, 0x21	; 33
    176a:	0e 94 d6 07 	call	0xfac	; 0xfac <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    176e:	98 2f       	mov	r25, r24
    1770:	92 95       	swap	r25
    1772:	96 95       	lsr	r25
    1774:	96 95       	lsr	r25
    1776:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    1778:	91 30       	cpi	r25, 0x01	; 1
    177a:	21 f4       	brne	.+8      	; 0x1784 <read_PNEUSENSORS+0x36>
		*shutter = 'c';
    177c:	93 e6       	ldi	r25, 0x63	; 99
    177e:	f6 01       	movw	r30, r12
    1780:	90 83       	st	Z, r25
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <read_PNEUSENSORS+0x54>
	} else if (state == 2) {
    1784:	92 30       	cpi	r25, 0x02	; 2
    1786:	21 f4       	brne	.+8      	; 0x1790 <read_PNEUSENSORS+0x42>
		*shutter = 'o';
    1788:	9f e6       	ldi	r25, 0x6F	; 111
    178a:	f6 01       	movw	r30, r12
    178c:	90 83       	st	Z, r25
    178e:	09 c0       	rjmp	.+18     	; 0x17a2 <read_PNEUSENSORS+0x54>
	} else if (state == 3) {
    1790:	93 30       	cpi	r25, 0x03	; 3
    1792:	21 f4       	brne	.+8      	; 0x179c <read_PNEUSENSORS+0x4e>
		*shutter = 't';
    1794:	94 e7       	ldi	r25, 0x74	; 116
    1796:	f6 01       	movw	r30, r12
    1798:	90 83       	st	Z, r25
    179a:	03 c0       	rjmp	.+6      	; 0x17a2 <read_PNEUSENSORS+0x54>
	} else {
		*shutter = 'x';
    179c:	98 e7       	ldi	r25, 0x78	; 120
    179e:	f6 01       	movw	r30, r12
    17a0:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    17a2:	98 2f       	mov	r25, r24
    17a4:	96 95       	lsr	r25
    17a6:	96 95       	lsr	r25
	state &= 0b00000011;
    17a8:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    17aa:	91 30       	cpi	r25, 0x01	; 1
    17ac:	21 f4       	brne	.+8      	; 0x17b6 <read_PNEUSENSORS+0x68>
		*right = 'c';
    17ae:	93 e6       	ldi	r25, 0x63	; 99
    17b0:	f7 01       	movw	r30, r14
    17b2:	90 83       	st	Z, r25
    17b4:	0f c0       	rjmp	.+30     	; 0x17d4 <read_PNEUSENSORS+0x86>
	} else if (state == 2) {
    17b6:	92 30       	cpi	r25, 0x02	; 2
    17b8:	21 f4       	brne	.+8      	; 0x17c2 <read_PNEUSENSORS+0x74>
		*right = 'o';
    17ba:	9f e6       	ldi	r25, 0x6F	; 111
    17bc:	f7 01       	movw	r30, r14
    17be:	90 83       	st	Z, r25
    17c0:	09 c0       	rjmp	.+18     	; 0x17d4 <read_PNEUSENSORS+0x86>
	} else if (state == 3) {
    17c2:	93 30       	cpi	r25, 0x03	; 3
    17c4:	21 f4       	brne	.+8      	; 0x17ce <read_PNEUSENSORS+0x80>
		*right = 't';
    17c6:	94 e7       	ldi	r25, 0x74	; 116
    17c8:	f7 01       	movw	r30, r14
    17ca:	90 83       	st	Z, r25
    17cc:	03 c0       	rjmp	.+6      	; 0x17d4 <read_PNEUSENSORS+0x86>
	} else {
		*right = 'x';
    17ce:	98 e7       	ldi	r25, 0x78	; 120
    17d0:	f7 01       	movw	r30, r14
    17d2:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    17d4:	98 2f       	mov	r25, r24
    17d6:	92 95       	swap	r25
    17d8:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    17da:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    17dc:	91 30       	cpi	r25, 0x01	; 1
    17de:	21 f4       	brne	.+8      	; 0x17e8 <read_PNEUSENSORS+0x9a>
		*left = 'o';
    17e0:	9f e6       	ldi	r25, 0x6F	; 111
    17e2:	f8 01       	movw	r30, r16
    17e4:	90 83       	st	Z, r25
    17e6:	0f c0       	rjmp	.+30     	; 0x1806 <__DATA_REGION_LENGTH__+0x6>
	} else if (state == 2) {
    17e8:	92 30       	cpi	r25, 0x02	; 2
    17ea:	21 f4       	brne	.+8      	; 0x17f4 <read_PNEUSENSORS+0xa6>
		*left = 'c';
    17ec:	93 e6       	ldi	r25, 0x63	; 99
    17ee:	f8 01       	movw	r30, r16
    17f0:	90 83       	st	Z, r25
    17f2:	09 c0       	rjmp	.+18     	; 0x1806 <__DATA_REGION_LENGTH__+0x6>
	} else if (state == 3) {
    17f4:	93 30       	cpi	r25, 0x03	; 3
    17f6:	21 f4       	brne	.+8      	; 0x1800 <__DATA_REGION_LENGTH__>
		*left = 't';
    17f8:	94 e7       	ldi	r25, 0x74	; 116
    17fa:	f8 01       	movw	r30, r16
    17fc:	90 83       	st	Z, r25
    17fe:	03 c0       	rjmp	.+6      	; 0x1806 <__DATA_REGION_LENGTH__+0x6>
	} else {
		*left = 'x';
    1800:	98 e7       	ldi	r25, 0x78	; 120
    1802:	f8 01       	movw	r30, r16
    1804:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1806:	81 ff       	sbrs	r24, 1
    1808:	03 c0       	rjmp	.+6      	; 0x1810 <__DATA_REGION_LENGTH__+0x10>
		*air = '0';
    180a:	80 e3       	ldi	r24, 0x30	; 48
    180c:	88 83       	st	Y, r24
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <__DATA_REGION_LENGTH__+0x14>
	} else {
		*air = '1';
    1810:	81 e3       	ldi	r24, 0x31	; 49
    1812:	88 83       	st	Y, r24
	}
}
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	df 90       	pop	r13
    1822:	cf 90       	pop	r12
    1824:	08 95       	ret

00001826 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	d8 2f       	mov	r29, r24
    182c:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    182e:	69 e0       	ldi	r22, 0x09	; 9
    1830:	84 e2       	ldi	r24, 0x24	; 36
    1832:	0e 94 d6 07 	call	0xfac	; 0xfac <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    1836:	8d 2b       	or	r24, r29
    1838:	48 2f       	mov	r20, r24
    183a:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    183c:	6a e0       	ldi	r22, 0x0A	; 10
    183e:	84 e2       	ldi	r24, 0x24	; 36
    1840:	0e 94 ed 07 	call	0xfda	; 0xfda <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	08 95       	ret

0000184a <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(char mech)
{
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	6a 97       	sbiw	r28, 0x1a	; 26
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    1858:	99 e0       	ldi	r25, 0x09	; 9
    185a:	ec ec       	ldi	r30, 0xCC	; 204
    185c:	fb e7       	ldi	r31, 0x7B	; 123
    185e:	de 01       	movw	r26, r28
    1860:	11 96       	adiw	r26, 0x01	; 1
    1862:	01 90       	ld	r0, Z+
    1864:	0d 92       	st	X+, r0
    1866:	9a 95       	dec	r25
    1868:	e1 f7       	brne	.-8      	; 0x1862 <close_PNEU+0x18>
	char outbuf[17];

	switch (mech) {
    186a:	8c 36       	cpi	r24, 0x6C	; 108
    186c:	31 f1       	breq	.+76     	; 0x18ba <close_PNEU+0x70>
    186e:	18 f4       	brcc	.+6      	; 0x1876 <close_PNEU+0x2c>
    1870:	82 36       	cpi	r24, 0x62	; 98
    1872:	39 f0       	breq	.+14     	; 0x1882 <close_PNEU+0x38>
    1874:	75 c0       	rjmp	.+234    	; 0x1960 <close_PNEU+0x116>
    1876:	82 37       	cpi	r24, 0x72	; 114
    1878:	c1 f1       	breq	.+112    	; 0x18ea <close_PNEU+0xa0>
    187a:	83 37       	cpi	r24, 0x73	; 115
    187c:	09 f4       	brne	.+2      	; 0x1880 <close_PNEU+0x36>
    187e:	4d c0       	rjmp	.+154    	; 0x191a <close_PNEU+0xd0>
    1880:	6f c0       	rjmp	.+222    	; 0x1960 <close_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    1882:	6a ee       	ldi	r22, 0xEA	; 234
    1884:	84 e4       	ldi	r24, 0x44	; 68
    1886:	0e 94 13 0c 	call	0x1826	; 0x1826 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    188a:	66 ee       	ldi	r22, 0xE6	; 230
    188c:	88 e8       	ldi	r24, 0x88	; 136
    188e:	0e 94 13 0c 	call	0x1826	; 0x1826 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    1892:	84 eb       	ldi	r24, 0xB4	; 180
    1894:	9b e7       	ldi	r25, 0x7B	; 123
    1896:	9f 93       	push	r25
    1898:	8f 93       	push	r24
    189a:	ce 01       	movw	r24, r28
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	9f 93       	push	r25
    18a0:	8f 93       	push	r24
    18a2:	09 96       	adiw	r24, 0x09	; 9
    18a4:	9f 93       	push	r25
    18a6:	8f 93       	push	r24
    18a8:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			break;
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	47 c0       	rjmp	.+142    	; 0x1948 <close_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    18ba:	6a ee       	ldi	r22, 0xEA	; 234
    18bc:	84 e4       	ldi	r24, 0x44	; 68
    18be:	0e 94 13 0c 	call	0x1826	; 0x1826 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    18c2:	89 eb       	ldi	r24, 0xB9	; 185
    18c4:	9b e7       	ldi	r25, 0x7B	; 123
    18c6:	9f 93       	push	r25
    18c8:	8f 93       	push	r24
    18ca:	ce 01       	movw	r24, r28
    18cc:	01 96       	adiw	r24, 0x01	; 1
    18ce:	9f 93       	push	r25
    18d0:	8f 93       	push	r24
    18d2:	09 96       	adiw	r24, 0x09	; 9
    18d4:	9f 93       	push	r25
    18d6:	8f 93       	push	r24
    18d8:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			break;
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	2f c0       	rjmp	.+94     	; 0x1948 <close_PNEU+0xfe>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    18ea:	66 ee       	ldi	r22, 0xE6	; 230
    18ec:	88 e8       	ldi	r24, 0x88	; 136
    18ee:	0e 94 13 0c 	call	0x1826	; 0x1826 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    18f2:	8e eb       	ldi	r24, 0xBE	; 190
    18f4:	9b e7       	ldi	r25, 0x7B	; 123
    18f6:	9f 93       	push	r25
    18f8:	8f 93       	push	r24
    18fa:	ce 01       	movw	r24, r28
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	9f 93       	push	r25
    1900:	8f 93       	push	r24
    1902:	09 96       	adiw	r24, 0x09	; 9
    1904:	9f 93       	push	r25
    1906:	8f 93       	push	r24
    1908:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			break;
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	17 c0       	rjmp	.+46     	; 0x1948 <close_PNEU+0xfe>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    191a:	6c ee       	ldi	r22, 0xEC	; 236
    191c:	82 e2       	ldi	r24, 0x22	; 34
    191e:	0e 94 13 0c 	call	0x1826	; 0x1826 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1922:	84 ec       	ldi	r24, 0xC4	; 196
    1924:	9b e7       	ldi	r25, 0x7B	; 123
    1926:	9f 93       	push	r25
    1928:	8f 93       	push	r24
    192a:	ce 01       	movw	r24, r28
    192c:	01 96       	adiw	r24, 0x01	; 1
    192e:	9f 93       	push	r25
    1930:	8f 93       	push	r24
    1932:	09 96       	adiw	r24, 0x09	; 9
    1934:	9f 93       	push	r25
    1936:	8f 93       	push	r24
    1938:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			break;
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
			return(ERRORPROMPT);
			break;

	}

	clear_OLED(1);
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	0e 94 3f 0b 	call	0x167e	; 0x167e <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	be 01       	movw	r22, r28
    1952:	66 5f       	subi	r22, 0xF6	; 246
    1954:	7f 4f       	sbci	r23, 0xFF	; 255
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
	return(GREATERPROMPT);
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	01 c0       	rjmp	.+2      	; 0x1962 <close_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
			sprintf(outbuf, dformat_CLO, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    1960:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    1962:	6a 96       	adiw	r28, 0x1a	; 26
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	08 95       	ret

0000196e <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(char mechanism)
{
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	69 97       	sbiw	r28, 0x19	; 25
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	de bf       	out	0x3e, r29	; 62


	const char dformat_OPE[] = "Open %s";
    197c:	98 e0       	ldi	r25, 0x08	; 8
    197e:	e5 ed       	ldi	r30, 0xD5	; 213
    1980:	fb e7       	ldi	r31, 0x7B	; 123
    1982:	de 01       	movw	r26, r28
    1984:	11 96       	adiw	r26, 0x01	; 1
    1986:	01 90       	ld	r0, Z+
    1988:	0d 92       	st	X+, r0
    198a:	9a 95       	dec	r25
    198c:	e1 f7       	brne	.-8      	; 0x1986 <open_PNEU+0x18>
	char outbuf[17];

	switch (mechanism) {
    198e:	8c 36       	cpi	r24, 0x6C	; 108
    1990:	31 f1       	breq	.+76     	; 0x19de <open_PNEU+0x70>
    1992:	18 f4       	brcc	.+6      	; 0x199a <open_PNEU+0x2c>
    1994:	82 36       	cpi	r24, 0x62	; 98
    1996:	39 f0       	breq	.+14     	; 0x19a6 <open_PNEU+0x38>
    1998:	75 c0       	rjmp	.+234    	; 0x1a84 <open_PNEU+0x116>
    199a:	82 37       	cpi	r24, 0x72	; 114
    199c:	c1 f1       	breq	.+112    	; 0x1a0e <open_PNEU+0xa0>
    199e:	83 37       	cpi	r24, 0x73	; 115
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <open_PNEU+0x36>
    19a2:	4d c0       	rjmp	.+154    	; 0x1a3e <open_PNEU+0xd0>
    19a4:	6f c0       	rjmp	.+222    	; 0x1a84 <open_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    19a6:	6e ea       	ldi	r22, 0xAE	; 174
    19a8:	84 e4       	ldi	r24, 0x44	; 68
    19aa:	0e 94 13 0c 	call	0x1826	; 0x1826 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    19ae:	6e e6       	ldi	r22, 0x6E	; 110
    19b0:	88 e8       	ldi	r24, 0x88	; 136
    19b2:	0e 94 13 0c 	call	0x1826	; 0x1826 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    19b6:	84 eb       	ldi	r24, 0xB4	; 180
    19b8:	9b e7       	ldi	r25, 0x7B	; 123
    19ba:	9f 93       	push	r25
    19bc:	8f 93       	push	r24
    19be:	ce 01       	movw	r24, r28
    19c0:	01 96       	adiw	r24, 0x01	; 1
    19c2:	9f 93       	push	r25
    19c4:	8f 93       	push	r24
    19c6:	08 96       	adiw	r24, 0x08	; 8
    19c8:	9f 93       	push	r25
    19ca:	8f 93       	push	r24
    19cc:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			break;
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	47 c0       	rjmp	.+142    	; 0x1a6c <open_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    19de:	6e ea       	ldi	r22, 0xAE	; 174
    19e0:	84 e4       	ldi	r24, 0x44	; 68
    19e2:	0e 94 13 0c 	call	0x1826	; 0x1826 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    19e6:	89 eb       	ldi	r24, 0xB9	; 185
    19e8:	9b e7       	ldi	r25, 0x7B	; 123
    19ea:	9f 93       	push	r25
    19ec:	8f 93       	push	r24
    19ee:	ce 01       	movw	r24, r28
    19f0:	01 96       	adiw	r24, 0x01	; 1
    19f2:	9f 93       	push	r25
    19f4:	8f 93       	push	r24
    19f6:	08 96       	adiw	r24, 0x08	; 8
    19f8:	9f 93       	push	r25
    19fa:	8f 93       	push	r24
    19fc:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			break;
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	2f c0       	rjmp	.+94     	; 0x1a6c <open_PNEU+0xfe>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1a0e:	6e e6       	ldi	r22, 0x6E	; 110
    1a10:	88 e8       	ldi	r24, 0x88	; 136
    1a12:	0e 94 13 0c 	call	0x1826	; 0x1826 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1a16:	8e eb       	ldi	r24, 0xBE	; 190
    1a18:	9b e7       	ldi	r25, 0x7B	; 123
    1a1a:	9f 93       	push	r25
    1a1c:	8f 93       	push	r24
    1a1e:	ce 01       	movw	r24, r28
    1a20:	01 96       	adiw	r24, 0x01	; 1
    1a22:	9f 93       	push	r25
    1a24:	8f 93       	push	r24
    1a26:	08 96       	adiw	r24, 0x08	; 8
    1a28:	9f 93       	push	r25
    1a2a:	8f 93       	push	r24
    1a2c:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			break;
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	17 c0       	rjmp	.+46     	; 0x1a6c <open_PNEU+0xfe>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1a3e:	6e ec       	ldi	r22, 0xCE	; 206
    1a40:	82 e2       	ldi	r24, 0x22	; 34
    1a42:	0e 94 13 0c 	call	0x1826	; 0x1826 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1a46:	84 ec       	ldi	r24, 0xC4	; 196
    1a48:	9b e7       	ldi	r25, 0x7B	; 123
    1a4a:	9f 93       	push	r25
    1a4c:	8f 93       	push	r24
    1a4e:	ce 01       	movw	r24, r28
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	9f 93       	push	r25
    1a54:	8f 93       	push	r24
    1a56:	08 96       	adiw	r24, 0x08	; 8
    1a58:	9f 93       	push	r25
    1a5a:	8f 93       	push	r24
    1a5c:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			break;
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
		default:
			return(ERRORPROMPT);

	}

	clear_OLED(1);
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	0e 94 3f 0b 	call	0x167e	; 0x167e <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1a72:	41 e0       	ldi	r20, 0x01	; 1
    1a74:	be 01       	movw	r22, r28
    1a76:	67 5f       	subi	r22, 0xF7	; 247
    1a78:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
	return(GREATERPROMPT);
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	01 c0       	rjmp	.+2      	; 0x1a86 <open_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
			sprintf(outbuf, dformat_OPE, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    1a84:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    1a86:	69 96       	adiw	r28, 0x19	; 25
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	08 95       	ret

00001a92 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1a92:	1f 92       	push	r1
    1a94:	0f 92       	push	r0
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	0f 92       	push	r0
    1a9a:	11 24       	eor	r1, r1
    1a9c:	2f 93       	push	r18
    1a9e:	3f 93       	push	r19
    1aa0:	4f 93       	push	r20
    1aa2:	5f 93       	push	r21
    1aa4:	6f 93       	push	r22
    1aa6:	7f 93       	push	r23
    1aa8:	8f 93       	push	r24
    1aaa:	9f 93       	push	r25
    1aac:	af 93       	push	r26
    1aae:	bf 93       	push	r27
    1ab0:	ef 93       	push	r30
    1ab2:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1ab4:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1ab8:	88 23       	and	r24, r24
    1aba:	64 f4       	brge	.+24     	; 0x1ad4 <__vector_20+0x42>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1abc:	80 e8       	ldi	r24, 0x80	; 128
    1abe:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1ac2:	68 e0       	ldi	r22, 0x08	; 8
    1ac4:	81 e2       	ldi	r24, 0x21	; 33
    1ac6:	0e 94 d6 07 	call	0xfac	; 0xfac <read_MCP23008>
    1aca:	80 93 10 2a 	sts	0x2A10, r24	; 0x802a10 <pneuState>
		toggle_BEEPER;
    1ace:	84 e0       	ldi	r24, 0x04	; 4
    1ad0:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x7f4427>
	}

}
    1ad4:	ff 91       	pop	r31
    1ad6:	ef 91       	pop	r30
    1ad8:	bf 91       	pop	r27
    1ada:	af 91       	pop	r26
    1adc:	9f 91       	pop	r25
    1ade:	8f 91       	pop	r24
    1ae0:	7f 91       	pop	r23
    1ae2:	6f 91       	pop	r22
    1ae4:	5f 91       	pop	r21
    1ae6:	4f 91       	pop	r20
    1ae8:	3f 91       	pop	r19
    1aea:	2f 91       	pop	r18
    1aec:	0f 90       	pop	r0
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	0f 90       	pop	r0
    1af2:	1f 90       	pop	r1
    1af4:	18 95       	reti

00001af6 <init_PORTS>:
	sure nothing lurks in the background by accident.
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
    1af6:	e0 e0       	ldi	r30, 0x00	; 0
    1af8:	f4 e0       	ldi	r31, 0x04	; 4
    1afa:	88 e0       	ldi	r24, 0x08	; 8
    1afc:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
    1afe:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
    1b00:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
    1b02:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
    1b04:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    1b06:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    1b08:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
    1b0a:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
    1b0c:	e0 e2       	ldi	r30, 0x20	; 32
    1b0e:	f4 e0       	ldi	r31, 0x04	; 4
    1b10:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
    1b12:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
    1b14:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
    1b16:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
    1b18:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
    1b1a:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
    1b1c:	e0 e4       	ldi	r30, 0x40	; 64
    1b1e:	f4 e0       	ldi	r31, 0x04	; 4
    1b20:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
    1b22:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
    1b24:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
    1b26:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
    1b28:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
    1b2a:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
    1b2c:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
    1b2e:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b30:	e0 e6       	ldi	r30, 0x60	; 96
    1b32:	f4 e0       	ldi	r31, 0x04	; 4
    1b34:	94 e0       	ldi	r25, 0x04	; 4
    1b36:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b38:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b3a:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b3c:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b3e:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b40:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b42:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b44:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
    1b46:	e0 e8       	ldi	r30, 0x80	; 128
    1b48:	f4 e0       	ldi	r31, 0x04	; 4
    1b4a:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
    1b4c:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
    1b4e:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
    1b50:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
    1b52:	e0 ea       	ldi	r30, 0xA0	; 160
    1b54:	f4 e0       	ldi	r31, 0x04	; 4
    1b56:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
    1b58:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
    1b5a:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
    1b5c:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
    1b5e:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
    1b60:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
    1b62:	86 8b       	std	Z+22, r24	; 0x16
    1b64:	08 95       	ret

00001b66 <report>:
	Returns
		0 - GREATERPROMPT on success
		1 - ERRORPROMPT on error (invalid command noun)
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1b66:	2f 92       	push	r2
    1b68:	3f 92       	push	r3
    1b6a:	4f 92       	push	r4
    1b6c:	5f 92       	push	r5
    1b6e:	6f 92       	push	r6
    1b70:	7f 92       	push	r7
    1b72:	8f 92       	push	r8
    1b74:	9f 92       	push	r9
    1b76:	af 92       	push	r10
    1b78:	bf 92       	push	r11
    1b7a:	cf 92       	push	r12
    1b7c:	df 92       	push	r13
    1b7e:	ef 92       	push	r14
    1b80:	ff 92       	push	r15
    1b82:	0f 93       	push	r16
    1b84:	1f 93       	push	r17
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	cc 52       	subi	r28, 0x2C	; 44
    1b90:	d2 40       	sbci	r29, 0x02	; 2
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE+10], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	const char format_BTM[] = "$S%dBTM,%s,%s";
    1b96:	9e e0       	ldi	r25, 0x0E	; 14
    1b98:	ee e2       	ldi	r30, 0x2E	; 46
    1b9a:	fc e7       	ldi	r31, 0x7C	; 124
    1b9c:	de 01       	movw	r26, r28
    1b9e:	ae 52       	subi	r26, 0x2E	; 46
    1ba0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba2:	01 90       	ld	r0, Z+
    1ba4:	0d 92       	st	X+, r0
    1ba6:	9a 95       	dec	r25
    1ba8:	e1 f7       	brne	.-8      	; 0x1ba2 <report+0x3c>
	const char format_ENV[] = "$S%dENV,%s,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%s";
    1baa:	92 e4       	ldi	r25, 0x42	; 66
    1bac:	ec e3       	ldi	r30, 0x3C	; 60
    1bae:	fc e7       	ldi	r31, 0x7C	; 124
    1bb0:	de 01       	movw	r26, r28
    1bb2:	a0 52       	subi	r26, 0x20	; 32
    1bb4:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb6:	01 90       	ld	r0, Z+
    1bb8:	0d 92       	st	X+, r0
    1bba:	9a 95       	dec	r25
    1bbc:	e1 f7       	brne	.-8      	; 0x1bb6 <report+0x50>
	const char format_ORI[] = "$S%dORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1bbe:	90 e2       	ldi	r25, 0x20	; 32
    1bc0:	ee e7       	ldi	r30, 0x7E	; 126
    1bc2:	fc e7       	ldi	r31, 0x7C	; 124
    1bc4:	de 01       	movw	r26, r28
    1bc6:	ae 5d       	subi	r26, 0xDE	; 222
    1bc8:	be 4f       	sbci	r27, 0xFE	; 254
    1bca:	01 90       	ld	r0, Z+
    1bcc:	0d 92       	st	X+, r0
    1bce:	9a 95       	dec	r25
    1bd0:	e1 f7       	brne	.-8      	; 0x1bca <report+0x64>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1bd2:	92 e1       	ldi	r25, 0x12	; 18
    1bd4:	ee e9       	ldi	r30, 0x9E	; 158
    1bd6:	fc e7       	ldi	r31, 0x7C	; 124
    1bd8:	de 01       	movw	r26, r28
    1bda:	ae 5b       	subi	r26, 0xBE	; 190
    1bdc:	be 4f       	sbci	r27, 0xFE	; 254
    1bde:	01 90       	ld	r0, Z+
    1be0:	0d 92       	st	X+, r0
    1be2:	9a 95       	dec	r25
    1be4:	e1 f7       	brne	.-8      	; 0x1bde <report+0x78>
	const char format_PNU[] = "$S%dPNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1be6:	91 e3       	ldi	r25, 0x31	; 49
    1be8:	e0 eb       	ldi	r30, 0xB0	; 176
    1bea:	fc e7       	ldi	r31, 0x7C	; 124
    1bec:	de 01       	movw	r26, r28
    1bee:	ac 5a       	subi	r26, 0xAC	; 172
    1bf0:	be 4f       	sbci	r27, 0xFE	; 254
    1bf2:	01 90       	ld	r0, Z+
    1bf4:	0d 92       	st	X+, r0
    1bf6:	9a 95       	dec	r25
    1bf8:	e1 f7       	brne	.-8      	; 0x1bf2 <report+0x8c>
//	const char dformat_PNU[] = "%c %c %c %c";
	const char dformat_PN1[] = "left:%c   right:%c";
    1bfa:	93 e1       	ldi	r25, 0x13	; 19
    1bfc:	e1 ee       	ldi	r30, 0xE1	; 225
    1bfe:	fc e7       	ldi	r31, 0x7C	; 124
    1c00:	de 01       	movw	r26, r28
    1c02:	ab 57       	subi	r26, 0x7B	; 123
    1c04:	be 4f       	sbci	r27, 0xFE	; 254
    1c06:	01 90       	ld	r0, Z+
    1c08:	0d 92       	st	X+, r0
    1c0a:	9a 95       	dec	r25
    1c0c:	e1 f7       	brne	.-8      	; 0x1c06 <report+0xa0>
	const char dformat_PN2[] = "shutter:%c  air:%c";
    1c0e:	93 e1       	ldi	r25, 0x13	; 19
    1c10:	e4 ef       	ldi	r30, 0xF4	; 244
    1c12:	fc e7       	ldi	r31, 0x7C	; 124
    1c14:	de 01       	movw	r26, r28
    1c16:	a8 56       	subi	r26, 0x68	; 104
    1c18:	be 4f       	sbci	r27, 0xFE	; 254
    1c1a:	01 90       	ld	r0, Z+
    1c1c:	0d 92       	st	X+, r0
    1c1e:	9a 95       	dec	r25
    1c20:	e1 f7       	brne	.-8      	; 0x1c1a <report+0xb4>
	const char format_TIM[] = "$S%dTIM,%s,%s,set,%s,boot,%s";
    1c22:	9d e1       	ldi	r25, 0x1D	; 29
    1c24:	e7 e0       	ldi	r30, 0x07	; 7
    1c26:	fd e7       	ldi	r31, 0x7D	; 125
    1c28:	de 01       	movw	r26, r28
    1c2a:	a5 55       	subi	r26, 0x55	; 85
    1c2c:	be 4f       	sbci	r27, 0xFE	; 254
    1c2e:	01 90       	ld	r0, Z+
    1c30:	0d 92       	st	X+, r0
    1c32:	9a 95       	dec	r25
    1c34:	e1 f7       	brne	.-8      	; 0x1c2e <report+0xc8>
	const char format_VAC[] = "$S%dVAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1c36:	99 e2       	ldi	r25, 0x29	; 41
    1c38:	e4 e2       	ldi	r30, 0x24	; 36
    1c3a:	fd e7       	ldi	r31, 0x7D	; 125
    1c3c:	de 01       	movw	r26, r28
    1c3e:	a8 53       	subi	r26, 0x38	; 56
    1c40:	be 4f       	sbci	r27, 0xFE	; 254
    1c42:	01 90       	ld	r0, Z+
    1c44:	0d 92       	st	X+, r0
    1c46:	9a 95       	dec	r25
    1c48:	e1 f7       	brne	.-8      	; 0x1c42 <report+0xdc>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1c4a:	9d e0       	ldi	r25, 0x0D	; 13
    1c4c:	ed e4       	ldi	r30, 0x4D	; 77
    1c4e:	fd e7       	ldi	r31, 0x7D	; 125
    1c50:	de 01       	movw	r26, r28
    1c52:	af 50       	subi	r26, 0x0F	; 15
    1c54:	be 4f       	sbci	r27, 0xFE	; 254
    1c56:	01 90       	ld	r0, Z+
    1c58:	0d 92       	st	X+, r0
    1c5a:	9a 95       	dec	r25
    1c5c:	e1 f7       	brne	.-8      	; 0x1c56 <report+0xf0>
	const char format_VER[] = "$S%dVER,%s,%s,%s";
    1c5e:	91 e1       	ldi	r25, 0x11	; 17
    1c60:	ea e5       	ldi	r30, 0x5A	; 90
    1c62:	fd e7       	ldi	r31, 0x7D	; 125
    1c64:	de 01       	movw	r26, r28
    1c66:	a2 50       	subi	r26, 0x02	; 2
    1c68:	be 4f       	sbci	r27, 0xFE	; 254
    1c6a:	01 90       	ld	r0, Z+
    1c6c:	0d 92       	st	X+, r0
    1c6e:	9a 95       	dec	r25
    1c70:	e1 f7       	brne	.-8      	; 0x1c6a <report+0x104>
	float t0, t1, t2, t3, h0, h1, h2;		// temperature and humidity
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum
	char shutter, left, right, air;

	switch(pcmd[cstack].cobject) {
    1c72:	08 2f       	mov	r16, r24
    1c74:	10 e0       	ldi	r17, 0x00	; 0
    1c76:	84 e3       	ldi	r24, 0x34	; 52
    1c78:	80 9f       	mul	r24, r16
    1c7a:	f0 01       	movw	r30, r0
    1c7c:	81 9f       	mul	r24, r17
    1c7e:	f0 0d       	add	r31, r0
    1c80:	11 24       	eor	r1, r1
    1c82:	ec 5f       	subi	r30, 0xFC	; 252
    1c84:	f7 4d       	sbci	r31, 0xD7	; 215
    1c86:	e1 81       	ldd	r30, Z+1	; 0x01
    1c88:	8e 2f       	mov	r24, r30
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	e2 54       	subi	r30, 0x42	; 66
    1c90:	f1 09       	sbc	r31, r1
    1c92:	e5 33       	cpi	r30, 0x35	; 53
    1c94:	f1 05       	cpc	r31, r1
    1c96:	08 f0       	brcs	.+2      	; 0x1c9a <report+0x134>
    1c98:	38 c4       	rjmp	.+2160   	; 0x250a <report+0x9a4>
    1c9a:	e0 5b       	subi	r30, 0xB0	; 176
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__tablejump2__>

		case 'B':					// Boot time
			get_BOOTTIME(boottime);
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	82 54       	subi	r24, 0x42	; 66
    1ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca8:	0e 94 d6 05 	call	0xbac	; 0xbac <get_BOOTTIME>
			sprintf(outbuf, format_BTM, get_SPECID, boottime, pcmd[cstack].cid);
    1cac:	24 e3       	ldi	r18, 0x34	; 52
    1cae:	20 9f       	mul	r18, r16
    1cb0:	c0 01       	movw	r24, r0
    1cb2:	21 9f       	mul	r18, r17
    1cb4:	90 0d       	add	r25, r0
    1cb6:	11 24       	eor	r1, r1
    1cb8:	81 5d       	subi	r24, 0xD1	; 209
    1cba:	97 4d       	sbci	r25, 0xD7	; 215
    1cbc:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1cc0:	22 ff       	sbrs	r18, 2
    1cc2:	03 c0       	rjmp	.+6      	; 0x1cca <report+0x164>
    1cc4:	22 e0       	ldi	r18, 0x02	; 2
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <report+0x168>
    1cca:	21 e0       	ldi	r18, 0x01	; 1
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	9f 93       	push	r25
    1cd0:	8f 93       	push	r24
    1cd2:	8e 01       	movw	r16, r28
    1cd4:	02 54       	subi	r16, 0x42	; 66
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd8:	1f 93       	push	r17
    1cda:	0f 93       	push	r16
    1cdc:	3f 93       	push	r19
    1cde:	2f 93       	push	r18
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	8e 52       	subi	r24, 0x2E	; 46
    1ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce6:	9f 93       	push	r25
    1ce8:	8f 93       	push	r24
    1cea:	81 5d       	subi	r24, 0xD1	; 209
    1cec:	91 09       	sbc	r25, r1
    1cee:	7c 01       	movw	r14, r24
    1cf0:	9f 93       	push	r25
    1cf2:	8f 93       	push	r24
    1cf4:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			checksum_NMEA(outbuf);
    1cf8:	c7 01       	movw	r24, r14
    1cfa:	0e 94 8e 09 	call	0x131c	; 0x131c <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1cfe:	f7 01       	movw	r30, r14
    1d00:	01 90       	ld	r0, Z+
    1d02:	00 20       	and	r0, r0
    1d04:	e9 f7       	brne	.-6      	; 0x1d00 <report+0x19a>
    1d06:	31 97       	sbiw	r30, 0x01	; 1
    1d08:	af 01       	movw	r20, r30
    1d0a:	4e 19       	sub	r20, r14
    1d0c:	5f 09       	sbc	r21, r15
    1d0e:	b7 01       	movw	r22, r14
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	0e 94 0f 14 	call	0x281e	; 0x281e <send_USART>
			writestr_OLED(1, "Boot time", 1);
    1d16:	41 e0       	ldi	r20, 0x01	; 1
    1d18:	6d ed       	ldi	r22, 0xDD	; 221
    1d1a:	7b e7       	ldi	r23, 0x7B	; 123
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
			writestr_OLED(1, &boottime[5], 2);
    1d22:	b8 01       	movw	r22, r16
    1d24:	6b 5f       	subi	r22, 0xFB	; 251
    1d26:	7f 4f       	sbci	r23, 0xFF	; 255
    1d28:	42 e0       	ldi	r20, 0x02	; 2
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
			break;
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1d34:	80 e0       	ldi	r24, 0x00	; 0
			sprintf(outbuf, format_BTM, get_SPECID, boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Boot time", 1);
			writestr_OLED(1, &boottime[5], 2);
			break;
    1d36:	ea c3       	rjmp	.+2004   	; 0x250c <report+0x9a6>

		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	0e 94 49 13 	call	0x2692	; 0x2692 <get_temperature>
    1d3e:	f6 2e       	mov	r15, r22
    1d40:	e7 2e       	mov	r14, r23
    1d42:	d8 2e       	mov	r13, r24
    1d44:	c9 2e       	mov	r12, r25
			h0 = get_humidity(0);
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	0e 94 94 06 	call	0xd28	; 0xd28 <get_humidity>
    1d4c:	b6 2e       	mov	r11, r22
    1d4e:	a7 2e       	mov	r10, r23
    1d50:	98 2e       	mov	r9, r24
    1d52:	89 2e       	mov	r8, r25
			t1 = get_temperature(1);
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	0e 94 49 13 	call	0x2692	; 0x2692 <get_temperature>
    1d5a:	c1 5e       	subi	r28, 0xE1	; 225
    1d5c:	dd 4f       	sbci	r29, 0xFD	; 253
    1d5e:	68 83       	st	Y, r22
    1d60:	cf 51       	subi	r28, 0x1F	; 31
    1d62:	d2 40       	sbci	r29, 0x02	; 2
    1d64:	c0 5e       	subi	r28, 0xE0	; 224
    1d66:	dd 4f       	sbci	r29, 0xFD	; 253
    1d68:	78 83       	st	Y, r23
    1d6a:	c0 52       	subi	r28, 0x20	; 32
    1d6c:	d2 40       	sbci	r29, 0x02	; 2
    1d6e:	cf 5d       	subi	r28, 0xDF	; 223
    1d70:	dd 4f       	sbci	r29, 0xFD	; 253
    1d72:	88 83       	st	Y, r24
    1d74:	c1 52       	subi	r28, 0x21	; 33
    1d76:	d2 40       	sbci	r29, 0x02	; 2
    1d78:	ce 5d       	subi	r28, 0xDE	; 222
    1d7a:	dd 4f       	sbci	r29, 0xFD	; 253
    1d7c:	98 83       	st	Y, r25
    1d7e:	c2 52       	subi	r28, 0x22	; 34
    1d80:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	0e 94 94 06 	call	0xd28	; 0xd28 <get_humidity>
    1d88:	cd 5d       	subi	r28, 0xDD	; 221
    1d8a:	dd 4f       	sbci	r29, 0xFD	; 253
    1d8c:	68 83       	st	Y, r22
    1d8e:	c3 52       	subi	r28, 0x23	; 35
    1d90:	d2 40       	sbci	r29, 0x02	; 2
    1d92:	cc 5d       	subi	r28, 0xDC	; 220
    1d94:	dd 4f       	sbci	r29, 0xFD	; 253
    1d96:	78 83       	st	Y, r23
    1d98:	c4 52       	subi	r28, 0x24	; 36
    1d9a:	d2 40       	sbci	r29, 0x02	; 2
    1d9c:	cb 5d       	subi	r28, 0xDB	; 219
    1d9e:	dd 4f       	sbci	r29, 0xFD	; 253
    1da0:	88 83       	st	Y, r24
    1da2:	c5 52       	subi	r28, 0x25	; 37
    1da4:	d2 40       	sbci	r29, 0x02	; 2
    1da6:	ca 5d       	subi	r28, 0xDA	; 218
    1da8:	dd 4f       	sbci	r29, 0xFD	; 253
    1daa:	98 83       	st	Y, r25
    1dac:	c6 52       	subi	r28, 0x26	; 38
    1dae:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	0e 94 49 13 	call	0x2692	; 0x2692 <get_temperature>
    1db6:	c9 5d       	subi	r28, 0xD9	; 217
    1db8:	dd 4f       	sbci	r29, 0xFD	; 253
    1dba:	68 83       	st	Y, r22
    1dbc:	c7 52       	subi	r28, 0x27	; 39
    1dbe:	d2 40       	sbci	r29, 0x02	; 2
    1dc0:	c8 5d       	subi	r28, 0xD8	; 216
    1dc2:	dd 4f       	sbci	r29, 0xFD	; 253
    1dc4:	78 83       	st	Y, r23
    1dc6:	c8 52       	subi	r28, 0x28	; 40
    1dc8:	d2 40       	sbci	r29, 0x02	; 2
    1dca:	c7 5d       	subi	r28, 0xD7	; 215
    1dcc:	dd 4f       	sbci	r29, 0xFD	; 253
    1dce:	88 83       	st	Y, r24
    1dd0:	c9 52       	subi	r28, 0x29	; 41
    1dd2:	d2 40       	sbci	r29, 0x02	; 2
    1dd4:	c6 5d       	subi	r28, 0xD6	; 214
    1dd6:	dd 4f       	sbci	r29, 0xFD	; 253
    1dd8:	98 83       	st	Y, r25
    1dda:	ca 52       	subi	r28, 0x2A	; 42
    1ddc:	d2 40       	sbci	r29, 0x02	; 2
			h2 = get_humidity(2);
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	0e 94 94 06 	call	0xd28	; 0xd28 <get_humidity>
    1de4:	76 2e       	mov	r7, r22
    1de6:	67 2e       	mov	r6, r23
    1de8:	58 2e       	mov	r5, r24
    1dea:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    1dec:	83 e0       	ldi	r24, 0x03	; 3
    1dee:	0e 94 49 13 	call	0x2692	; 0x2692 <get_temperature>
    1df2:	c5 5d       	subi	r28, 0xD5	; 213
    1df4:	dd 4f       	sbci	r29, 0xFD	; 253
    1df6:	68 83       	st	Y, r22
    1df8:	cb 52       	subi	r28, 0x2B	; 43
    1dfa:	d2 40       	sbci	r29, 0x02	; 2
    1dfc:	c4 5d       	subi	r28, 0xD4	; 212
    1dfe:	dd 4f       	sbci	r29, 0xFD	; 253
    1e00:	78 83       	st	Y, r23
    1e02:	cc 52       	subi	r28, 0x2C	; 44
    1e04:	d2 40       	sbci	r29, 0x02	; 2
    1e06:	38 2e       	mov	r3, r24
    1e08:	29 2e       	mov	r2, r25
			get_time(currenttime);
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	8a 56       	subi	r24, 0x6A	; 106
    1e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e10:	0e 94 5a 05 	call	0xab4	; 0xab4 <get_time>
			sprintf(outbuf, format_ENV, get_SPECID, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    1e14:	24 e3       	ldi	r18, 0x34	; 52
    1e16:	20 9f       	mul	r18, r16
    1e18:	c0 01       	movw	r24, r0
    1e1a:	21 9f       	mul	r18, r17
    1e1c:	90 0d       	add	r25, r0
    1e1e:	11 24       	eor	r1, r1
    1e20:	81 5d       	subi	r24, 0xD1	; 209
    1e22:	97 4d       	sbci	r25, 0xD7	; 215
    1e24:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1e28:	22 ff       	sbrs	r18, 2
    1e2a:	03 c0       	rjmp	.+6      	; 0x1e32 <report+0x2cc>
    1e2c:	22 e0       	ldi	r18, 0x02	; 2
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <report+0x2d0>
    1e32:	21 e0       	ldi	r18, 0x01	; 1
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	9f 93       	push	r25
    1e38:	8f 93       	push	r24
    1e3a:	2f 92       	push	r2
    1e3c:	3f 92       	push	r3
    1e3e:	c4 5d       	subi	r28, 0xD4	; 212
    1e40:	dd 4f       	sbci	r29, 0xFD	; 253
    1e42:	98 81       	ld	r25, Y
    1e44:	cc 52       	subi	r28, 0x2C	; 44
    1e46:	d2 40       	sbci	r29, 0x02	; 2
    1e48:	9f 93       	push	r25
    1e4a:	c5 5d       	subi	r28, 0xD5	; 213
    1e4c:	dd 4f       	sbci	r29, 0xFD	; 253
    1e4e:	88 81       	ld	r24, Y
    1e50:	cb 52       	subi	r28, 0x2B	; 43
    1e52:	d2 40       	sbci	r29, 0x02	; 2
    1e54:	8f 93       	push	r24
    1e56:	4f 92       	push	r4
    1e58:	5f 92       	push	r5
    1e5a:	6f 92       	push	r6
    1e5c:	7f 92       	push	r7
    1e5e:	c6 5d       	subi	r28, 0xD6	; 214
    1e60:	dd 4f       	sbci	r29, 0xFD	; 253
    1e62:	98 81       	ld	r25, Y
    1e64:	ca 52       	subi	r28, 0x2A	; 42
    1e66:	d2 40       	sbci	r29, 0x02	; 2
    1e68:	9f 93       	push	r25
    1e6a:	c7 5d       	subi	r28, 0xD7	; 215
    1e6c:	dd 4f       	sbci	r29, 0xFD	; 253
    1e6e:	88 81       	ld	r24, Y
    1e70:	c9 52       	subi	r28, 0x29	; 41
    1e72:	d2 40       	sbci	r29, 0x02	; 2
    1e74:	8f 93       	push	r24
    1e76:	c8 5d       	subi	r28, 0xD8	; 216
    1e78:	dd 4f       	sbci	r29, 0xFD	; 253
    1e7a:	98 81       	ld	r25, Y
    1e7c:	c8 52       	subi	r28, 0x28	; 40
    1e7e:	d2 40       	sbci	r29, 0x02	; 2
    1e80:	9f 93       	push	r25
    1e82:	c9 5d       	subi	r28, 0xD9	; 217
    1e84:	dd 4f       	sbci	r29, 0xFD	; 253
    1e86:	88 81       	ld	r24, Y
    1e88:	c7 52       	subi	r28, 0x27	; 39
    1e8a:	d2 40       	sbci	r29, 0x02	; 2
    1e8c:	8f 93       	push	r24
    1e8e:	ca 5d       	subi	r28, 0xDA	; 218
    1e90:	dd 4f       	sbci	r29, 0xFD	; 253
    1e92:	98 81       	ld	r25, Y
    1e94:	c6 52       	subi	r28, 0x26	; 38
    1e96:	d2 40       	sbci	r29, 0x02	; 2
    1e98:	9f 93       	push	r25
    1e9a:	cb 5d       	subi	r28, 0xDB	; 219
    1e9c:	dd 4f       	sbci	r29, 0xFD	; 253
    1e9e:	88 81       	ld	r24, Y
    1ea0:	c5 52       	subi	r28, 0x25	; 37
    1ea2:	d2 40       	sbci	r29, 0x02	; 2
    1ea4:	8f 93       	push	r24
    1ea6:	cc 5d       	subi	r28, 0xDC	; 220
    1ea8:	dd 4f       	sbci	r29, 0xFD	; 253
    1eaa:	98 81       	ld	r25, Y
    1eac:	c4 52       	subi	r28, 0x24	; 36
    1eae:	d2 40       	sbci	r29, 0x02	; 2
    1eb0:	9f 93       	push	r25
    1eb2:	cd 5d       	subi	r28, 0xDD	; 221
    1eb4:	dd 4f       	sbci	r29, 0xFD	; 253
    1eb6:	88 81       	ld	r24, Y
    1eb8:	c3 52       	subi	r28, 0x23	; 35
    1eba:	d2 40       	sbci	r29, 0x02	; 2
    1ebc:	8f 93       	push	r24
    1ebe:	ce 5d       	subi	r28, 0xDE	; 222
    1ec0:	dd 4f       	sbci	r29, 0xFD	; 253
    1ec2:	98 81       	ld	r25, Y
    1ec4:	c2 52       	subi	r28, 0x22	; 34
    1ec6:	d2 40       	sbci	r29, 0x02	; 2
    1ec8:	9f 93       	push	r25
    1eca:	cf 5d       	subi	r28, 0xDF	; 223
    1ecc:	dd 4f       	sbci	r29, 0xFD	; 253
    1ece:	88 81       	ld	r24, Y
    1ed0:	c1 52       	subi	r28, 0x21	; 33
    1ed2:	d2 40       	sbci	r29, 0x02	; 2
    1ed4:	8f 93       	push	r24
    1ed6:	c0 5e       	subi	r28, 0xE0	; 224
    1ed8:	dd 4f       	sbci	r29, 0xFD	; 253
    1eda:	98 81       	ld	r25, Y
    1edc:	c0 52       	subi	r28, 0x20	; 32
    1ede:	d2 40       	sbci	r29, 0x02	; 2
    1ee0:	9f 93       	push	r25
    1ee2:	c1 5e       	subi	r28, 0xE1	; 225
    1ee4:	dd 4f       	sbci	r29, 0xFD	; 253
    1ee6:	88 81       	ld	r24, Y
    1ee8:	cf 51       	subi	r28, 0x1F	; 31
    1eea:	d2 40       	sbci	r29, 0x02	; 2
    1eec:	8f 93       	push	r24
    1eee:	8f 92       	push	r8
    1ef0:	9f 92       	push	r9
    1ef2:	af 92       	push	r10
    1ef4:	bf 92       	push	r11
    1ef6:	cf 92       	push	r12
    1ef8:	df 92       	push	r13
    1efa:	ef 92       	push	r14
    1efc:	ff 92       	push	r15
    1efe:	ce 01       	movw	r24, r28
    1f00:	8a 56       	subi	r24, 0x6A	; 106
    1f02:	9f 4f       	sbci	r25, 0xFF	; 255
    1f04:	9f 93       	push	r25
    1f06:	8f 93       	push	r24
    1f08:	3f 93       	push	r19
    1f0a:	2f 93       	push	r18
    1f0c:	86 5b       	subi	r24, 0xB6	; 182
    1f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f10:	9f 93       	push	r25
    1f12:	8f 93       	push	r24
    1f14:	8e 01       	movw	r16, r28
    1f16:	0f 5f       	subi	r16, 0xFF	; 255
    1f18:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1a:	1f 93       	push	r17
    1f1c:	0f 93       	push	r16
    1f1e:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			checksum_NMEA(outbuf);
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	c8 01       	movw	r24, r16
    1f28:	0e 94 8e 09 	call	0x131c	; 0x131c <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	01 90       	ld	r0, Z+
    1f30:	00 20       	and	r0, r0
    1f32:	e9 f7       	brne	.-6      	; 0x1f2e <report+0x3c8>
    1f34:	31 97       	sbiw	r30, 0x01	; 1
    1f36:	af 01       	movw	r20, r30
    1f38:	40 1b       	sub	r20, r16
    1f3a:	51 0b       	sbc	r21, r17
    1f3c:	b8 01       	movw	r22, r16
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	0e 94 0f 14 	call	0x281e	; 0x281e <send_USART>
			writestr_OLED(1, "Temp & Humidity", 1);
    1f44:	41 e0       	ldi	r20, 0x01	; 1
    1f46:	67 ee       	ldi	r22, 0xE7	; 231
    1f48:	7b e7       	ldi	r23, 0x7B	; 123
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    1f50:	26 e6       	ldi	r18, 0x66	; 102
    1f52:	36 e6       	ldi	r19, 0x66	; 102
    1f54:	46 ee       	ldi	r20, 0xE6	; 230
    1f56:	5f e3       	ldi	r21, 0x3F	; 63
    1f58:	6f 2d       	mov	r22, r15
    1f5a:	7e 2d       	mov	r23, r14
    1f5c:	8d 2d       	mov	r24, r13
    1f5e:	9c 2d       	mov	r25, r12
    1f60:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    1f64:	8f 92       	push	r8
    1f66:	9f 92       	push	r9
    1f68:	af 92       	push	r10
    1f6a:	bf 92       	push	r11
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	52 e4       	ldi	r21, 0x42	; 66
    1f74:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__addsf3>
    1f78:	9f 93       	push	r25
    1f7a:	8f 93       	push	r24
    1f7c:	7f 93       	push	r23
    1f7e:	6f 93       	push	r22
    1f80:	cf 92       	push	r12
    1f82:	df 92       	push	r13
    1f84:	ef 92       	push	r14
    1f86:	ff 92       	push	r15
    1f88:	87 ef       	ldi	r24, 0xF7	; 247
    1f8a:	9b e7       	ldi	r25, 0x7B	; 123
    1f8c:	9f 93       	push	r25
    1f8e:	8f 93       	push	r24
    1f90:	1f 93       	push	r17
    1f92:	0f 93       	push	r16
    1f94:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			writestr_OLED(1, outbuf, 2);
    1f98:	42 e0       	ldi	r20, 0x02	; 2
    1f9a:	b8 01       	movw	r22, r16
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
			break;
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    1fa8:	b1 c2       	rjmp	.+1378   	; 0x250c <report+0x9a6>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    1faa:	ae 01       	movw	r20, r28
    1fac:	49 5e       	subi	r20, 0xE9	; 233
    1fae:	5d 4f       	sbci	r21, 0xFD	; 253
    1fb0:	be 01       	movw	r22, r28
    1fb2:	6d 5e       	subi	r22, 0xED	; 237
    1fb4:	7d 4f       	sbci	r23, 0xFD	; 253
    1fb6:	ce 01       	movw	r24, r28
    1fb8:	81 5f       	subi	r24, 0xF1	; 241
    1fba:	9d 4f       	sbci	r25, 0xFD	; 253
    1fbc:	0e 94 9a 08 	call	0x1134	; 0x1134 <get_orientation>
			get_time(currenttime);
    1fc0:	ce 01       	movw	r24, r28
    1fc2:	8a 56       	subi	r24, 0x6A	; 106
    1fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc6:	0e 94 5a 05 	call	0xab4	; 0xab4 <get_time>
			sprintf(outbuf, format_ORI, get_SPECID, currenttime, x, y, z, pcmd[cstack].cid);
    1fca:	24 e3       	ldi	r18, 0x34	; 52
    1fcc:	20 9f       	mul	r18, r16
    1fce:	c0 01       	movw	r24, r0
    1fd0:	21 9f       	mul	r18, r17
    1fd2:	90 0d       	add	r25, r0
    1fd4:	11 24       	eor	r1, r1
    1fd6:	81 5d       	subi	r24, 0xD1	; 209
    1fd8:	97 4d       	sbci	r25, 0xD7	; 215
    1fda:	c9 5e       	subi	r28, 0xE9	; 233
    1fdc:	dd 4f       	sbci	r29, 0xFD	; 253
    1fde:	a8 81       	ld	r26, Y
    1fe0:	c7 51       	subi	r28, 0x17	; 23
    1fe2:	d2 40       	sbci	r29, 0x02	; 2
    1fe4:	c8 5e       	subi	r28, 0xE8	; 232
    1fe6:	dd 4f       	sbci	r29, 0xFD	; 253
    1fe8:	b8 81       	ld	r27, Y
    1fea:	c8 51       	subi	r28, 0x18	; 24
    1fec:	d2 40       	sbci	r29, 0x02	; 2
    1fee:	c7 5e       	subi	r28, 0xE7	; 231
    1ff0:	dd 4f       	sbci	r29, 0xFD	; 253
    1ff2:	18 81       	ld	r17, Y
    1ff4:	c9 51       	subi	r28, 0x19	; 25
    1ff6:	d2 40       	sbci	r29, 0x02	; 2
    1ff8:	c6 5e       	subi	r28, 0xE6	; 230
    1ffa:	dd 4f       	sbci	r29, 0xFD	; 253
    1ffc:	08 81       	ld	r16, Y
    1ffe:	ca 51       	subi	r28, 0x1A	; 26
    2000:	d2 40       	sbci	r29, 0x02	; 2
    2002:	cd 5e       	subi	r28, 0xED	; 237
    2004:	dd 4f       	sbci	r29, 0xFD	; 253
    2006:	68 81       	ld	r22, Y
    2008:	c3 51       	subi	r28, 0x13	; 19
    200a:	d2 40       	sbci	r29, 0x02	; 2
    200c:	cc 5e       	subi	r28, 0xEC	; 236
    200e:	dd 4f       	sbci	r29, 0xFD	; 253
    2010:	78 81       	ld	r23, Y
    2012:	c4 51       	subi	r28, 0x14	; 20
    2014:	d2 40       	sbci	r29, 0x02	; 2
    2016:	cb 5e       	subi	r28, 0xEB	; 235
    2018:	dd 4f       	sbci	r29, 0xFD	; 253
    201a:	e8 81       	ld	r30, Y
    201c:	c5 51       	subi	r28, 0x15	; 21
    201e:	d2 40       	sbci	r29, 0x02	; 2
    2020:	ca 5e       	subi	r28, 0xEA	; 234
    2022:	dd 4f       	sbci	r29, 0xFD	; 253
    2024:	f8 81       	ld	r31, Y
    2026:	c6 51       	subi	r28, 0x16	; 22
    2028:	d2 40       	sbci	r29, 0x02	; 2
    202a:	c1 5f       	subi	r28, 0xF1	; 241
    202c:	dd 4f       	sbci	r29, 0xFD	; 253
    202e:	28 81       	ld	r18, Y
    2030:	cf 50       	subi	r28, 0x0F	; 15
    2032:	d2 40       	sbci	r29, 0x02	; 2
    2034:	c0 5f       	subi	r28, 0xF0	; 240
    2036:	dd 4f       	sbci	r29, 0xFD	; 253
    2038:	38 81       	ld	r19, Y
    203a:	c0 51       	subi	r28, 0x10	; 16
    203c:	d2 40       	sbci	r29, 0x02	; 2
    203e:	cf 5e       	subi	r28, 0xEF	; 239
    2040:	dd 4f       	sbci	r29, 0xFD	; 253
    2042:	48 81       	ld	r20, Y
    2044:	c1 51       	subi	r28, 0x11	; 17
    2046:	d2 40       	sbci	r29, 0x02	; 2
    2048:	ce 5e       	subi	r28, 0xEE	; 238
    204a:	dd 4f       	sbci	r29, 0xFD	; 253
    204c:	58 81       	ld	r21, Y
    204e:	c2 51       	subi	r28, 0x12	; 18
    2050:	d2 40       	sbci	r29, 0x02	; 2
    2052:	f0 90 a8 04 	lds	r15, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2056:	f2 fe       	sbrs	r15, 2
    2058:	05 c0       	rjmp	.+10     	; 0x2064 <report+0x4fe>
    205a:	68 94       	set
    205c:	ff 24       	eor	r15, r15
    205e:	f1 f8       	bld	r15, 1
    2060:	e1 2c       	mov	r14, r1
    2062:	03 c0       	rjmp	.+6      	; 0x206a <report+0x504>
    2064:	ff 24       	eor	r15, r15
    2066:	f3 94       	inc	r15
    2068:	e1 2c       	mov	r14, r1
    206a:	9f 93       	push	r25
    206c:	8f 93       	push	r24
    206e:	0f 93       	push	r16
    2070:	1f 93       	push	r17
    2072:	bf 93       	push	r27
    2074:	af 93       	push	r26
    2076:	ff 93       	push	r31
    2078:	ef 93       	push	r30
    207a:	7f 93       	push	r23
    207c:	6f 93       	push	r22
    207e:	5f 93       	push	r21
    2080:	4f 93       	push	r20
    2082:	3f 93       	push	r19
    2084:	2f 93       	push	r18
    2086:	ce 01       	movw	r24, r28
    2088:	8a 56       	subi	r24, 0x6A	; 106
    208a:	9f 4f       	sbci	r25, 0xFF	; 255
    208c:	9f 93       	push	r25
    208e:	8f 93       	push	r24
    2090:	ef 92       	push	r14
    2092:	ff 92       	push	r15
    2094:	84 57       	subi	r24, 0x74	; 116
    2096:	9f 4f       	sbci	r25, 0xFF	; 255
    2098:	9f 93       	push	r25
    209a:	8f 93       	push	r24
    209c:	8e 01       	movw	r16, r28
    209e:	0f 5f       	subi	r16, 0xFF	; 255
    20a0:	1f 4f       	sbci	r17, 0xFF	; 255
    20a2:	1f 93       	push	r17
    20a4:	0f 93       	push	r16
    20a6:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			checksum_NMEA(outbuf);
    20aa:	c8 01       	movw	r24, r16
    20ac:	0e 94 8e 09 	call	0x131c	; 0x131c <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    20b0:	f8 01       	movw	r30, r16
    20b2:	01 90       	ld	r0, Z+
    20b4:	00 20       	and	r0, r0
    20b6:	e9 f7       	brne	.-6      	; 0x20b2 <report+0x54c>
    20b8:	31 97       	sbiw	r30, 0x01	; 1
    20ba:	af 01       	movw	r20, r30
    20bc:	40 1b       	sub	r20, r16
    20be:	51 0b       	sbc	r21, r17
    20c0:	b8 01       	movw	r22, r16
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	0e 94 0f 14 	call	0x281e	; 0x281e <send_USART>
			writestr_OLED(1, "Orientation", 1);
    20c8:	41 e0       	ldi	r20, 0x01	; 1
    20ca:	6d e0       	ldi	r22, 0x0D	; 13
    20cc:	7c e7       	ldi	r23, 0x7C	; 124
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    20d4:	c6 5e       	subi	r28, 0xE6	; 230
    20d6:	dd 4f       	sbci	r29, 0xFD	; 253
    20d8:	88 81       	ld	r24, Y
    20da:	ca 51       	subi	r28, 0x1A	; 26
    20dc:	d2 40       	sbci	r29, 0x02	; 2
    20de:	8f 93       	push	r24
    20e0:	c7 5e       	subi	r28, 0xE7	; 231
    20e2:	dd 4f       	sbci	r29, 0xFD	; 253
    20e4:	88 81       	ld	r24, Y
    20e6:	c9 51       	subi	r28, 0x19	; 25
    20e8:	d2 40       	sbci	r29, 0x02	; 2
    20ea:	8f 93       	push	r24
    20ec:	c8 5e       	subi	r28, 0xE8	; 232
    20ee:	dd 4f       	sbci	r29, 0xFD	; 253
    20f0:	88 81       	ld	r24, Y
    20f2:	c8 51       	subi	r28, 0x18	; 24
    20f4:	d2 40       	sbci	r29, 0x02	; 2
    20f6:	8f 93       	push	r24
    20f8:	c9 5e       	subi	r28, 0xE9	; 233
    20fa:	dd 4f       	sbci	r29, 0xFD	; 253
    20fc:	88 81       	ld	r24, Y
    20fe:	c7 51       	subi	r28, 0x17	; 23
    2100:	d2 40       	sbci	r29, 0x02	; 2
    2102:	8f 93       	push	r24
    2104:	ca 5e       	subi	r28, 0xEA	; 234
    2106:	dd 4f       	sbci	r29, 0xFD	; 253
    2108:	88 81       	ld	r24, Y
    210a:	c6 51       	subi	r28, 0x16	; 22
    210c:	d2 40       	sbci	r29, 0x02	; 2
    210e:	8f 93       	push	r24
    2110:	cb 5e       	subi	r28, 0xEB	; 235
    2112:	dd 4f       	sbci	r29, 0xFD	; 253
    2114:	88 81       	ld	r24, Y
    2116:	c5 51       	subi	r28, 0x15	; 21
    2118:	d2 40       	sbci	r29, 0x02	; 2
    211a:	8f 93       	push	r24
    211c:	cc 5e       	subi	r28, 0xEC	; 236
    211e:	dd 4f       	sbci	r29, 0xFD	; 253
    2120:	88 81       	ld	r24, Y
    2122:	c4 51       	subi	r28, 0x14	; 20
    2124:	d2 40       	sbci	r29, 0x02	; 2
    2126:	8f 93       	push	r24
    2128:	cd 5e       	subi	r28, 0xED	; 237
    212a:	dd 4f       	sbci	r29, 0xFD	; 253
    212c:	88 81       	ld	r24, Y
    212e:	c3 51       	subi	r28, 0x13	; 19
    2130:	d2 40       	sbci	r29, 0x02	; 2
    2132:	8f 93       	push	r24
    2134:	ce 5e       	subi	r28, 0xEE	; 238
    2136:	dd 4f       	sbci	r29, 0xFD	; 253
    2138:	88 81       	ld	r24, Y
    213a:	c2 51       	subi	r28, 0x12	; 18
    213c:	d2 40       	sbci	r29, 0x02	; 2
    213e:	8f 93       	push	r24
    2140:	cf 5e       	subi	r28, 0xEF	; 239
    2142:	dd 4f       	sbci	r29, 0xFD	; 253
    2144:	88 81       	ld	r24, Y
    2146:	c1 51       	subi	r28, 0x11	; 17
    2148:	d2 40       	sbci	r29, 0x02	; 2
    214a:	8f 93       	push	r24
    214c:	c0 5f       	subi	r28, 0xF0	; 240
    214e:	dd 4f       	sbci	r29, 0xFD	; 253
    2150:	88 81       	ld	r24, Y
    2152:	c0 51       	subi	r28, 0x10	; 16
    2154:	d2 40       	sbci	r29, 0x02	; 2
    2156:	8f 93       	push	r24
    2158:	c1 5f       	subi	r28, 0xF1	; 241
    215a:	dd 4f       	sbci	r29, 0xFD	; 253
    215c:	88 81       	ld	r24, Y
    215e:	cf 50       	subi	r28, 0x0F	; 15
    2160:	d2 40       	sbci	r29, 0x02	; 2
    2162:	8f 93       	push	r24
    2164:	ce 01       	movw	r24, r28
    2166:	8e 5b       	subi	r24, 0xBE	; 190
    2168:	9e 4f       	sbci	r25, 0xFE	; 254
    216a:	9f 93       	push	r25
    216c:	8f 93       	push	r24
    216e:	1f 93       	push	r17
    2170:	0f 93       	push	r16
    2172:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			writestr_OLED(1, outbuf, 2);
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	42 e0       	ldi	r20, 0x02	; 2
    217c:	b8 01       	movw	r22, r16
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2184:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    2186:	c2 c1       	rjmp	.+900    	; 0x250c <report+0x9a6>

		case 'p':
			get_time(currenttime);
    2188:	ce 01       	movw	r24, r28
    218a:	8a 56       	subi	r24, 0x6A	; 106
    218c:	9f 4f       	sbci	r25, 0xFF	; 255
    218e:	0e 94 5a 05 	call	0xab4	; 0xab4 <get_time>
			read_PNEUSENSORS(&shutter, &left, &right, &air);
    2192:	9e 01       	movw	r18, r28
    2194:	22 5e       	subi	r18, 0xE2	; 226
    2196:	3d 4f       	sbci	r19, 0xFD	; 253
    2198:	ae 01       	movw	r20, r28
    219a:	43 5e       	subi	r20, 0xE3	; 227
    219c:	5d 4f       	sbci	r21, 0xFD	; 253
    219e:	be 01       	movw	r22, r28
    21a0:	64 5e       	subi	r22, 0xE4	; 228
    21a2:	7d 4f       	sbci	r23, 0xFD	; 253
    21a4:	ce 01       	movw	r24, r28
    21a6:	85 5e       	subi	r24, 0xE5	; 229
    21a8:	9d 4f       	sbci	r25, 0xFD	; 253
    21aa:	0e 94 a7 0b 	call	0x174e	; 0x174e <read_PNEUSENSORS>
			sprintf(outbuf, format_PNU, get_SPECID, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    21ae:	24 e3       	ldi	r18, 0x34	; 52
    21b0:	20 9f       	mul	r18, r16
    21b2:	c0 01       	movw	r24, r0
    21b4:	21 9f       	mul	r18, r17
    21b6:	90 0d       	add	r25, r0
    21b8:	11 24       	eor	r1, r1
    21ba:	81 5d       	subi	r24, 0xD1	; 209
    21bc:	97 4d       	sbci	r25, 0xD7	; 215
    21be:	c2 5e       	subi	r28, 0xE2	; 226
    21c0:	dd 4f       	sbci	r29, 0xFD	; 253
    21c2:	58 81       	ld	r21, Y
    21c4:	ce 51       	subi	r28, 0x1E	; 30
    21c6:	d2 40       	sbci	r29, 0x02	; 2
    21c8:	c3 5e       	subi	r28, 0xE3	; 227
    21ca:	dd 4f       	sbci	r29, 0xFD	; 253
    21cc:	48 81       	ld	r20, Y
    21ce:	cd 51       	subi	r28, 0x1D	; 29
    21d0:	d2 40       	sbci	r29, 0x02	; 2
    21d2:	c4 5e       	subi	r28, 0xE4	; 228
    21d4:	dd 4f       	sbci	r29, 0xFD	; 253
    21d6:	38 81       	ld	r19, Y
    21d8:	cc 51       	subi	r28, 0x1C	; 28
    21da:	d2 40       	sbci	r29, 0x02	; 2
    21dc:	c5 5e       	subi	r28, 0xE5	; 229
    21de:	dd 4f       	sbci	r29, 0xFD	; 253
    21e0:	28 81       	ld	r18, Y
    21e2:	cb 51       	subi	r28, 0x1B	; 27
    21e4:	d2 40       	sbci	r29, 0x02	; 2
    21e6:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    21ea:	62 ff       	sbrs	r22, 2
    21ec:	03 c0       	rjmp	.+6      	; 0x21f4 <report+0x68e>
    21ee:	62 e0       	ldi	r22, 0x02	; 2
    21f0:	70 e0       	ldi	r23, 0x00	; 0
    21f2:	02 c0       	rjmp	.+4      	; 0x21f8 <report+0x692>
    21f4:	61 e0       	ldi	r22, 0x01	; 1
    21f6:	70 e0       	ldi	r23, 0x00	; 0
    21f8:	9f 93       	push	r25
    21fa:	8f 93       	push	r24
    21fc:	1f 92       	push	r1
    21fe:	5f 93       	push	r21
    2200:	1f 92       	push	r1
    2202:	4f 93       	push	r20
    2204:	1f 92       	push	r1
    2206:	3f 93       	push	r19
    2208:	1f 92       	push	r1
    220a:	2f 93       	push	r18
    220c:	ce 01       	movw	r24, r28
    220e:	8a 56       	subi	r24, 0x6A	; 106
    2210:	9f 4f       	sbci	r25, 0xFF	; 255
    2212:	9f 93       	push	r25
    2214:	8f 93       	push	r24
    2216:	7f 93       	push	r23
    2218:	6f 93       	push	r22
    221a:	82 54       	subi	r24, 0x42	; 66
    221c:	9f 4f       	sbci	r25, 0xFF	; 255
    221e:	9f 93       	push	r25
    2220:	8f 93       	push	r24
    2222:	8e 01       	movw	r16, r28
    2224:	0f 5f       	subi	r16, 0xFF	; 255
    2226:	1f 4f       	sbci	r17, 0xFF	; 255
    2228:	1f 93       	push	r17
    222a:	0f 93       	push	r16
    222c:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			checksum_NMEA(outbuf);
    2230:	c8 01       	movw	r24, r16
    2232:	0e 94 8e 09 	call	0x131c	; 0x131c <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2236:	f8 01       	movw	r30, r16
    2238:	01 90       	ld	r0, Z+
    223a:	00 20       	and	r0, r0
    223c:	e9 f7       	brne	.-6      	; 0x2238 <report+0x6d2>
    223e:	31 97       	sbiw	r30, 0x01	; 1
    2240:	af 01       	movw	r20, r30
    2242:	40 1b       	sub	r20, r16
    2244:	51 0b       	sbc	r21, r17
    2246:	b8 01       	movw	r22, r16
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	0e 94 0f 14 	call	0x281e	; 0x281e <send_USART>
			sprintf(outbuf, dformat_PN1, left, right);
    224e:	c3 5e       	subi	r28, 0xE3	; 227
    2250:	dd 4f       	sbci	r29, 0xFD	; 253
    2252:	88 81       	ld	r24, Y
    2254:	cd 51       	subi	r28, 0x1D	; 29
    2256:	d2 40       	sbci	r29, 0x02	; 2
    2258:	1f 92       	push	r1
    225a:	8f 93       	push	r24
    225c:	c4 5e       	subi	r28, 0xE4	; 228
    225e:	dd 4f       	sbci	r29, 0xFD	; 253
    2260:	88 81       	ld	r24, Y
    2262:	cc 51       	subi	r28, 0x1C	; 28
    2264:	d2 40       	sbci	r29, 0x02	; 2
    2266:	1f 92       	push	r1
    2268:	8f 93       	push	r24
    226a:	ce 01       	movw	r24, r28
    226c:	8b 57       	subi	r24, 0x7B	; 123
    226e:	9e 4f       	sbci	r25, 0xFE	; 254
    2270:	9f 93       	push	r25
    2272:	8f 93       	push	r24
    2274:	1f 93       	push	r17
    2276:	0f 93       	push	r16
    2278:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			writestr_OLED(1, outbuf, 1);
    227c:	41 e0       	ldi	r20, 0x01	; 1
    227e:	b8 01       	movw	r22, r16
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2286:	c2 5e       	subi	r28, 0xE2	; 226
    2288:	dd 4f       	sbci	r29, 0xFD	; 253
    228a:	88 81       	ld	r24, Y
    228c:	ce 51       	subi	r28, 0x1E	; 30
    228e:	d2 40       	sbci	r29, 0x02	; 2
    2290:	1f 92       	push	r1
    2292:	8f 93       	push	r24
    2294:	c5 5e       	subi	r28, 0xE5	; 229
    2296:	dd 4f       	sbci	r29, 0xFD	; 253
    2298:	88 81       	ld	r24, Y
    229a:	cb 51       	subi	r28, 0x1B	; 27
    229c:	d2 40       	sbci	r29, 0x02	; 2
    229e:	1f 92       	push	r1
    22a0:	8f 93       	push	r24
    22a2:	ce 01       	movw	r24, r28
    22a4:	88 56       	subi	r24, 0x68	; 104
    22a6:	9e 4f       	sbci	r25, 0xFE	; 254
    22a8:	9f 93       	push	r25
    22aa:	8f 93       	push	r24
    22ac:	1f 93       	push	r17
    22ae:	0f 93       	push	r16
    22b0:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			writestr_OLED(1, outbuf, 2);
    22b4:	cd bf       	out	0x3d, r28	; 61
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	42 e0       	ldi	r20, 0x02	; 2
    22ba:	b8 01       	movw	r22, r16
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    22c2:	80 e0       	ldi	r24, 0x00	; 0
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    22c4:	23 c1       	rjmp	.+582    	; 0x250c <report+0x9a6>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    22c6:	ce 01       	movw	r24, r28
    22c8:	8a 56       	subi	r24, 0x6A	; 106
    22ca:	9f 4f       	sbci	r25, 0xFF	; 255
    22cc:	0e 94 5a 05 	call	0xab4	; 0xab4 <get_time>
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
    22d0:	24 e1       	ldi	r18, 0x14	; 20
    22d2:	ae 01       	movw	r20, r28
    22d4:	46 55       	subi	r20, 0x56	; 86
    22d6:	5f 4f       	sbci	r21, 0xFF	; 255
    22d8:	60 e0       	ldi	r22, 0x00	; 0
    22da:	70 e0       	ldi	r23, 0x00	; 0
    22dc:	80 e5       	ldi	r24, 0x50	; 80
    22de:	0e 94 20 06 	call	0xc40	; 0xc40 <read_FRAM>
			get_BOOTTIME(boottime);
    22e2:	ce 01       	movw	r24, r28
    22e4:	82 54       	subi	r24, 0x42	; 66
    22e6:	9f 4f       	sbci	r25, 0xFF	; 255
    22e8:	0e 94 d6 05 	call	0xbac	; 0xbac <get_BOOTTIME>
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    22ec:	24 e3       	ldi	r18, 0x34	; 52
    22ee:	20 9f       	mul	r18, r16
    22f0:	c0 01       	movw	r24, r0
    22f2:	21 9f       	mul	r18, r17
    22f4:	90 0d       	add	r25, r0
    22f6:	11 24       	eor	r1, r1
    22f8:	81 5d       	subi	r24, 0xD1	; 209
    22fa:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
    22fc:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2300:	22 ff       	sbrs	r18, 2
    2302:	03 c0       	rjmp	.+6      	; 0x230a <report+0x7a4>
    2304:	22 e0       	ldi	r18, 0x02	; 2
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	02 c0       	rjmp	.+4      	; 0x230e <report+0x7a8>
    230a:	21 e0       	ldi	r18, 0x01	; 1
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	9f 93       	push	r25
    2310:	8f 93       	push	r24
    2312:	ce 01       	movw	r24, r28
    2314:	82 54       	subi	r24, 0x42	; 66
    2316:	9f 4f       	sbci	r25, 0xFF	; 255
    2318:	9f 93       	push	r25
    231a:	8f 93       	push	r24
    231c:	44 97       	sbiw	r24, 0x14	; 20
    231e:	9f 93       	push	r25
    2320:	8f 93       	push	r24
    2322:	8e 01       	movw	r16, r28
    2324:	0a 56       	subi	r16, 0x6A	; 106
    2326:	1f 4f       	sbci	r17, 0xFF	; 255
    2328:	1f 93       	push	r17
    232a:	0f 93       	push	r16
    232c:	3f 93       	push	r19
    232e:	2f 93       	push	r18
    2330:	8f 5f       	subi	r24, 0xFF	; 255
    2332:	9e 4f       	sbci	r25, 0xFE	; 254
    2334:	9f 93       	push	r25
    2336:	8f 93       	push	r24
    2338:	8a 5a       	subi	r24, 0xAA	; 170
    233a:	91 40       	sbci	r25, 0x01	; 1
    233c:	7c 01       	movw	r14, r24
    233e:	9f 93       	push	r25
    2340:	8f 93       	push	r24
    2342:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    2346:	c7 01       	movw	r24, r14
    2348:	0e 94 8e 09 	call	0x131c	; 0x131c <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    234c:	f7 01       	movw	r30, r14
    234e:	01 90       	ld	r0, Z+
    2350:	00 20       	and	r0, r0
    2352:	e9 f7       	brne	.-6      	; 0x234e <report+0x7e8>
    2354:	31 97       	sbiw	r30, 0x01	; 1
    2356:	af 01       	movw	r20, r30
    2358:	4e 19       	sub	r20, r14
    235a:	5f 09       	sbc	r21, r15
    235c:	b7 01       	movw	r22, r14
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	0e 94 0f 14 	call	0x281e	; 0x281e <send_USART>
			writestr_OLED(1, "Time", 1);
    2364:	41 e0       	ldi	r20, 0x01	; 1
    2366:	69 e1       	ldi	r22, 0x19	; 25
    2368:	7c e7       	ldi	r23, 0x7C	; 124
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    2370:	b8 01       	movw	r22, r16
    2372:	65 5f       	subi	r22, 0xF5	; 245
    2374:	7f 4f       	sbci	r23, 0xFF	; 255
    2376:	42 e0       	ldi	r20, 0x02	; 2
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
			break;
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2382:	80 e0       	ldi	r24, 0x00	; 0
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    2384:	c3 c0       	rjmp	.+390    	; 0x250c <report+0x9a6>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	0e 94 66 07 	call	0xecc	; 0xecc <read_ionpump>
    238c:	f6 2e       	mov	r15, r22
    238e:	e7 2e       	mov	r14, r23
    2390:	d8 2e       	mov	r13, r24
    2392:	c9 2e       	mov	r12, r25
			bluvac = read_ionpump(BLUEPUMP);
    2394:	82 e0       	ldi	r24, 0x02	; 2
    2396:	0e 94 66 07 	call	0xecc	; 0xecc <read_ionpump>
    239a:	b6 2e       	mov	r11, r22
    239c:	a7 2e       	mov	r10, r23
    239e:	98 2e       	mov	r9, r24
    23a0:	89 2e       	mov	r8, r25
			get_time(currenttime);
    23a2:	ce 01       	movw	r24, r28
    23a4:	8a 56       	subi	r24, 0x6A	; 106
    23a6:	9f 4f       	sbci	r25, 0xFF	; 255
    23a8:	0e 94 5a 05 	call	0xab4	; 0xab4 <get_time>
			sprintf(outbuf, format_VAC, get_SPECID, currenttime, redvac, bluvac, pcmd[cstack].cid);
    23ac:	24 e3       	ldi	r18, 0x34	; 52
    23ae:	20 9f       	mul	r18, r16
    23b0:	c0 01       	movw	r24, r0
    23b2:	21 9f       	mul	r18, r17
    23b4:	90 0d       	add	r25, r0
    23b6:	11 24       	eor	r1, r1
    23b8:	81 5d       	subi	r24, 0xD1	; 209
    23ba:	97 4d       	sbci	r25, 0xD7	; 215
    23bc:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    23c0:	22 ff       	sbrs	r18, 2
    23c2:	03 c0       	rjmp	.+6      	; 0x23ca <report+0x864>
    23c4:	22 e0       	ldi	r18, 0x02	; 2
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	02 c0       	rjmp	.+4      	; 0x23ce <report+0x868>
    23ca:	21 e0       	ldi	r18, 0x01	; 1
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	9f 93       	push	r25
    23d0:	8f 93       	push	r24
    23d2:	8f 92       	push	r8
    23d4:	9f 92       	push	r9
    23d6:	af 92       	push	r10
    23d8:	bf 92       	push	r11
    23da:	cf 92       	push	r12
    23dc:	df 92       	push	r13
    23de:	ef 92       	push	r14
    23e0:	ff 92       	push	r15
    23e2:	ce 01       	movw	r24, r28
    23e4:	8a 56       	subi	r24, 0x6A	; 106
    23e6:	9f 4f       	sbci	r25, 0xFF	; 255
    23e8:	9f 93       	push	r25
    23ea:	8f 93       	push	r24
    23ec:	3f 93       	push	r19
    23ee:	2f 93       	push	r18
    23f0:	8e 5c       	subi	r24, 0xCE	; 206
    23f2:	9e 4f       	sbci	r25, 0xFE	; 254
    23f4:	9f 93       	push	r25
    23f6:	8f 93       	push	r24
    23f8:	8e 01       	movw	r16, r28
    23fa:	0f 5f       	subi	r16, 0xFF	; 255
    23fc:	1f 4f       	sbci	r17, 0xFF	; 255
    23fe:	1f 93       	push	r17
    2400:	0f 93       	push	r16
    2402:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			checksum_NMEA(outbuf);
    2406:	c8 01       	movw	r24, r16
    2408:	0e 94 8e 09 	call	0x131c	; 0x131c <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    240c:	f8 01       	movw	r30, r16
    240e:	01 90       	ld	r0, Z+
    2410:	00 20       	and	r0, r0
    2412:	e9 f7       	brne	.-6      	; 0x240e <report+0x8a8>
    2414:	31 97       	sbiw	r30, 0x01	; 1
    2416:	af 01       	movw	r20, r30
    2418:	40 1b       	sub	r20, r16
    241a:	51 0b       	sbc	r21, r17
    241c:	b8 01       	movw	r22, r16
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	0e 94 0f 14 	call	0x281e	; 0x281e <send_USART>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    2424:	41 e0       	ldi	r20, 0x01	; 1
    2426:	6e e1       	ldi	r22, 0x1E	; 30
    2428:	7c e7       	ldi	r23, 0x7C	; 124
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    2430:	8f 92       	push	r8
    2432:	9f 92       	push	r9
    2434:	af 92       	push	r10
    2436:	bf 92       	push	r11
    2438:	cf 92       	push	r12
    243a:	df 92       	push	r13
    243c:	ef 92       	push	r14
    243e:	ff 92       	push	r15
    2440:	ce 01       	movw	r24, r28
    2442:	8f 50       	subi	r24, 0x0F	; 15
    2444:	9e 4f       	sbci	r25, 0xFE	; 254
    2446:	9f 93       	push	r25
    2448:	8f 93       	push	r24
    244a:	1f 93       	push	r17
    244c:	0f 93       	push	r16
    244e:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			writestr_OLED(1, outbuf, 2);
    2452:	42 e0       	ldi	r20, 0x02	; 2
    2454:	b8 01       	movw	r22, r16
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
			break;
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2460:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    2462:	54 c0       	rjmp	.+168    	; 0x250c <report+0x9a6>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    2464:	ce 01       	movw	r24, r28
    2466:	85 57       	subi	r24, 0x75	; 117
    2468:	9f 4f       	sbci	r25, 0xFF	; 255
    246a:	0e 94 dd 05 	call	0xbba	; 0xbba <get_VERSION>
			get_time(currenttime);
    246e:	ce 01       	movw	r24, r28
    2470:	8a 56       	subi	r24, 0x6A	; 106
    2472:	9f 4f       	sbci	r25, 0xFF	; 255
    2474:	0e 94 5a 05 	call	0xab4	; 0xab4 <get_time>
			sprintf(outbuf, format_VER, get_SPECID, currenttime, version, pcmd[cstack].cid);
    2478:	24 e3       	ldi	r18, 0x34	; 52
    247a:	20 9f       	mul	r18, r16
    247c:	c0 01       	movw	r24, r0
    247e:	21 9f       	mul	r18, r17
    2480:	90 0d       	add	r25, r0
    2482:	11 24       	eor	r1, r1
    2484:	81 5d       	subi	r24, 0xD1	; 209
    2486:	97 4d       	sbci	r25, 0xD7	; 215
    2488:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    248c:	22 ff       	sbrs	r18, 2
    248e:	03 c0       	rjmp	.+6      	; 0x2496 <report+0x930>
    2490:	22 e0       	ldi	r18, 0x02	; 2
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	02 c0       	rjmp	.+4      	; 0x249a <report+0x934>
    2496:	21 e0       	ldi	r18, 0x01	; 1
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	9f 93       	push	r25
    249c:	8f 93       	push	r24
    249e:	ce 01       	movw	r24, r28
    24a0:	85 57       	subi	r24, 0x75	; 117
    24a2:	9f 4f       	sbci	r25, 0xFF	; 255
    24a4:	9f 93       	push	r25
    24a6:	8f 93       	push	r24
    24a8:	0b 96       	adiw	r24, 0x0b	; 11
    24aa:	9f 93       	push	r25
    24ac:	8f 93       	push	r24
    24ae:	3f 93       	push	r19
    24b0:	2f 93       	push	r18
    24b2:	88 59       	subi	r24, 0x98	; 152
    24b4:	9e 4f       	sbci	r25, 0xFE	; 254
    24b6:	9f 93       	push	r25
    24b8:	8f 93       	push	r24
    24ba:	8e 01       	movw	r16, r28
    24bc:	0f 5f       	subi	r16, 0xFF	; 255
    24be:	1f 4f       	sbci	r17, 0xFF	; 255
    24c0:	1f 93       	push	r17
    24c2:	0f 93       	push	r16
    24c4:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <sprintf>
			checksum_NMEA(outbuf);
    24c8:	c8 01       	movw	r24, r16
    24ca:	0e 94 8e 09 	call	0x131c	; 0x131c <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    24ce:	f8 01       	movw	r30, r16
    24d0:	01 90       	ld	r0, Z+
    24d2:	00 20       	and	r0, r0
    24d4:	e9 f7       	brne	.-6      	; 0x24d0 <report+0x96a>
    24d6:	31 97       	sbiw	r30, 0x01	; 1
    24d8:	af 01       	movw	r20, r30
    24da:	40 1b       	sub	r20, r16
    24dc:	51 0b       	sbc	r21, r17
    24de:	b8 01       	movw	r22, r16
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	0e 94 0f 14 	call	0x281e	; 0x281e <send_USART>
			writestr_OLED(1, "specMech Version", 1);
    24e6:	41 e0       	ldi	r20, 0x01	; 1
    24e8:	62 e8       	ldi	r22, 0x82	; 130
    24ea:	7b e7       	ldi	r23, 0x7B	; 123
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
			get_VERSION(outbuf);
    24f2:	c8 01       	movw	r24, r16
    24f4:	0e 94 dd 05 	call	0xbba	; 0xbba <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    24f8:	42 e0       	ldi	r20, 0x02	; 2
    24fa:	b8 01       	movw	r22, r16
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <writestr_OLED>
			break;
    2502:	cd bf       	out	0x3d, r28	; 61
    2504:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2506:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    2508:	01 c0       	rjmp	.+2      	; 0x250c <report+0x9a6>

		default:
			return(ERRORPROMPT);
    250a:	82 e0       	ldi	r24, 0x02	; 2
			break;
	}

	return(GREATERPROMPT);

}
    250c:	c4 5d       	subi	r28, 0xD4	; 212
    250e:	dd 4f       	sbci	r29, 0xFD	; 253
    2510:	cd bf       	out	0x3d, r28	; 61
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	df 91       	pop	r29
    2516:	cf 91       	pop	r28
    2518:	1f 91       	pop	r17
    251a:	0f 91       	pop	r16
    251c:	ff 90       	pop	r15
    251e:	ef 90       	pop	r14
    2520:	df 90       	pop	r13
    2522:	cf 90       	pop	r12
    2524:	bf 90       	pop	r11
    2526:	af 90       	pop	r10
    2528:	9f 90       	pop	r9
    252a:	8f 90       	pop	r8
    252c:	7f 90       	pop	r7
    252e:	6f 90       	pop	r6
    2530:	5f 90       	pop	r5
    2532:	4f 90       	pop	r4
    2534:	3f 90       	pop	r3
    2536:	2f 90       	pop	r2
    2538:	08 95       	ret

0000253a <init_RTC>:
			between interrupts. ticks = 30719 generates an interrupt
			every minute. ticks = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticks)
{
    253a:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    253c:	e0 e6       	ldi	r30, 0x60	; 96
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    2542:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    2544:	88 ed       	ldi	r24, 0xD8	; 216
    2546:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2548:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    254a:	01 c0       	rjmp	.+2      	; 0x254e <init_RTC+0x14>
		asm("nop");
    254c:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    254e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    2552:	96 fd       	sbrc	r25, 6
    2554:	fb cf       	rjmp	.-10     	; 0x254c <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2556:	e0 e6       	ldi	r30, 0x60	; 96
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    255c:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    255e:	28 ed       	ldi	r18, 0xD8	; 216
    2560:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2562:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    2564:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    2566:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    2568:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    256a:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    256c:	01 c0       	rjmp	.+2      	; 0x2570 <init_RTC+0x36>
		asm("nop");
    256e:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    2570:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    2574:	91 11       	cpse	r25, r1
    2576:	fb cf       	rjmp	.-10     	; 0x256e <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticks;
    2578:	e0 e4       	ldi	r30, 0x40	; 64
    257a:	f1 e0       	ldi	r31, 0x01	; 1
    257c:	42 87       	std	Z+10, r20	; 0x0a
    257e:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    2580:	82 e0       	ldi	r24, 0x02	; 2
    2582:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    2584:	85 81       	ldd	r24, Z+5	; 0x05
    2586:	81 60       	ori	r24, 0x01	; 1
    2588:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    258a:	81 eb       	ldi	r24, 0xB1	; 177
    258c:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    258e:	82 81       	ldd	r24, Z+2	; 0x02
    2590:	81 60       	ori	r24, 0x01	; 1
    2592:	82 83       	std	Z+2, r24	; 0x02
    2594:	08 95       	ret

00002596 <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    2596:	1f 92       	push	r1
    2598:	0f 92       	push	r0
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	0f 92       	push	r0
    259e:	11 24       	eor	r1, r1
    25a0:	2f 93       	push	r18
    25a2:	3f 93       	push	r19
    25a4:	4f 93       	push	r20
    25a6:	5f 93       	push	r21
    25a8:	6f 93       	push	r22
    25aa:	7f 93       	push	r23
    25ac:	8f 93       	push	r24
    25ae:	9f 93       	push	r25
    25b0:	af 93       	push	r26
    25b2:	bf 93       	push	r27
    25b4:	ef 93       	push	r30
    25b6:	ff 93       	push	r31

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	if (timerOLED) {
    25be:	80 91 0c 2a 	lds	r24, 0x2A0C	; 0x802a0c <timerOLED>
    25c2:	90 91 0d 2a 	lds	r25, 0x2A0D	; 0x802a0d <timerOLED+0x1>
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	b9 f0       	breq	.+46     	; 0x25f8 <__vector_3+0x62>
		if (timerOLED > timeoutOLED) {	// Display timeout
    25ca:	20 91 0e 2a 	lds	r18, 0x2A0E	; 0x802a0e <timeoutOLED>
    25ce:	30 91 0f 2a 	lds	r19, 0x2A0F	; 0x802a0f <timeoutOLED+0x1>
    25d2:	28 17       	cp	r18, r24
    25d4:	39 07       	cpc	r19, r25
    25d6:	58 f4       	brcc	.+22     	; 0x25ee <__vector_3+0x58>
			clear_OLED(0);
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	0e 94 3f 0b 	call	0x167e	; 0x167e <clear_OLED>
			clear_OLED(1);
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	0e 94 3f 0b 	call	0x167e	; 0x167e <clear_OLED>
			timerOLED = 0;
    25e4:	10 92 0c 2a 	sts	0x2A0C, r1	; 0x802a0c <timerOLED>
    25e8:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED+0x1>
    25ec:	05 c0       	rjmp	.+10     	; 0x25f8 <__vector_3+0x62>
		} else {
			timerOLED++;
    25ee:	01 96       	adiw	r24, 0x01	; 1
    25f0:	80 93 0c 2a 	sts	0x2A0C, r24	; 0x802a0c <timerOLED>
    25f4:	90 93 0d 2a 	sts	0x2A0D, r25	; 0x802a0d <timerOLED+0x1>
		}
	}
	toggle_LED;						// Defined in led.c
    25f8:	80 e2       	ldi	r24, 0x20	; 32
    25fa:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>

}
    25fe:	ff 91       	pop	r31
    2600:	ef 91       	pop	r30
    2602:	bf 91       	pop	r27
    2604:	af 91       	pop	r26
    2606:	9f 91       	pop	r25
    2608:	8f 91       	pop	r24
    260a:	7f 91       	pop	r23
    260c:	6f 91       	pop	r22
    260e:	5f 91       	pop	r21
    2610:	4f 91       	pop	r20
    2612:	3f 91       	pop	r19
    2614:	2f 91       	pop	r18
    2616:	0f 90       	pop	r0
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	0f 90       	pop	r0
    261c:	1f 90       	pop	r1
    261e:	18 95       	reti

00002620 <set>:
	Returns:
		GREATERPROMPT on success
		ERRORPROMPT if an invalid object was requested.
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	24 e3       	ldi	r18, 0x34	; 52
    2628:	28 9f       	mul	r18, r24
    262a:	f0 01       	movw	r30, r0
    262c:	29 9f       	mul	r18, r25
    262e:	f0 0d       	add	r31, r0
    2630:	11 24       	eor	r1, r1
    2632:	ec 5f       	subi	r30, 0xFC	; 252
    2634:	f7 4d       	sbci	r31, 0xD7	; 215
    2636:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    2638:	24 37       	cpi	r18, 0x74	; 116
    263a:	e9 f4       	brne	.+58     	; 0x2676 <set+0x56>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    263c:	24 e3       	ldi	r18, 0x34	; 52
    263e:	28 9f       	mul	r18, r24
    2640:	e0 01       	movw	r28, r0
    2642:	29 9f       	mul	r18, r25
    2644:	d0 0d       	add	r29, r0
    2646:	11 24       	eor	r1, r1
    2648:	ca 5f       	subi	r28, 0xFA	; 250
    264a:	d7 4d       	sbci	r29, 0xD7	; 215
    264c:	fe 01       	movw	r30, r28
    264e:	01 90       	ld	r0, Z+
    2650:	00 20       	and	r0, r0
    2652:	e9 f7       	brne	.-6      	; 0x264e <set+0x2e>
    2654:	31 97       	sbiw	r30, 0x01	; 1
    2656:	ec 1b       	sub	r30, r28
    2658:	fd 0b       	sbc	r31, r29
    265a:	73 97       	sbiw	r30, 0x13	; 19
    265c:	71 f4       	brne	.+28     	; 0x267a <set+0x5a>
				return(ERRORPROMPT);
			}
			put_time(pcmd[cstack].cvalue);
    265e:	ce 01       	movw	r24, r28
    2660:	0e 94 be 05 	call	0xb7c	; 0xb7c <put_time>
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    2664:	24 e1       	ldi	r18, 0x14	; 20
    2666:	ae 01       	movw	r20, r28
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	70 e0       	ldi	r23, 0x00	; 0
    266c:	80 e5       	ldi	r24, 0x50	; 80
    266e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <write_FRAM>
			break;

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	03 c0       	rjmp	.+6      	; 0x267c <set+0x5c>
			put_time(pcmd[cstack].cvalue);
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			return(ERRORPROMPT);
    2676:	82 e0       	ldi	r24, 0x02	; 2
    2678:	01 c0       	rjmp	.+2      	; 0x267c <set+0x5c>
	object = pcmd[cstack].cobject;

	switch(object) {
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
				return(ERRORPROMPT);
    267a:	82 e0       	ldi	r24, 0x02	; 2

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
}
    267c:	df 91       	pop	r29
    267e:	cf 91       	pop	r28
    2680:	08 95       	ret

00002682 <init_SPECID>:
	pullup. Must be called AFTER init_PORTS().
------------------------------------------------------------------------------*/
void init_SPECID(void)
{

	PORTF.PIN2CTRL &= ~PORT_PULLUPEN_bm;	// Remove pullup
    2682:	e0 ea       	ldi	r30, 0xA0	; 160
    2684:	f4 e0       	ldi	r31, 0x04	; 4
    2686:	82 89       	ldd	r24, Z+18	; 0x12
    2688:	87 7f       	andi	r24, 0xF7	; 247
    268a:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.DIRCLR = PIN2_bm;					// Set as input
    268c:	84 e0       	ldi	r24, 0x04	; 4
    268e:	82 83       	std	Z+2, r24	; 0x02
    2690:	08 95       	ret

00002692 <get_temperature>:
float get_temperature(uint8_t sensor)
{

	float temperature;

	switch (sensor) {
    2692:	83 30       	cpi	r24, 0x03	; 3
    2694:	18 f0       	brcs	.+6      	; 0x269c <get_temperature+0xa>
    2696:	83 30       	cpi	r24, 0x03	; 3
    2698:	21 f0       	breq	.+8      	; 0x26a2 <get_temperature+0x10>
    269a:	06 c0       	rjmp	.+12     	; 0x26a8 <get_temperature+0x16>
		case 0:
		case 1:
		case 2:
			temperature = read_AD590(sensor);
    269c:	0e 94 25 01 	call	0x24a	; 0x24a <read_AD590>
			break;
    26a0:	08 95       	ret
		case 3:
			temperature = read_MCP9808();
    26a2:	0e 94 17 08 	call	0x102e	; 0x102e <read_MCP9808>
			break;
    26a6:	08 95       	ret
		default:
			temperature = -999.9;
    26a8:	6a e9       	ldi	r22, 0x9A	; 154
    26aa:	79 ef       	ldi	r23, 0xF9	; 249
    26ac:	89 e7       	ldi	r24, 0x79	; 121
    26ae:	94 ec       	ldi	r25, 0xC4	; 196
			break;
	}

	return(temperature);

}
    26b0:	08 95       	ret

000026b2 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    26b2:	e0 ea       	ldi	r30, 0xA0	; 160
    26b4:	f8 e0       	ldi	r31, 0x08	; 8
    26b6:	8b e0       	ldi	r24, 0x0B	; 11
    26b8:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    26ba:	83 81       	ldd	r24, Z+3	; 0x03
    26bc:	81 60       	ori	r24, 0x01	; 1
    26be:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    26c0:	85 81       	ldd	r24, Z+5	; 0x05
    26c2:	81 60       	ori	r24, 0x01	; 1
    26c4:	85 83       	std	Z+5, r24	; 0x05
    26c6:	08 95       	ret

000026c8 <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    26c8:	01 c0       	rjmp	.+2      	; 0x26cc <read_TWI+0x4>
		asm("nop");								// Should set timer here
    26ca:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    26cc:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    26d0:	88 23       	and	r24, r24
    26d2:	dc f7       	brge	.-10     	; 0x26ca <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    26d4:	e0 ea       	ldi	r30, 0xA0	; 160
    26d6:	f8 e0       	ldi	r31, 0x08	; 8
    26d8:	84 81       	ldd	r24, Z+4	; 0x04
    26da:	8b 7f       	andi	r24, 0xFB	; 251
    26dc:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    26de:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    26e0:	94 81       	ldd	r25, Z+4	; 0x04
    26e2:	92 60       	ori	r25, 0x02	; 2
    26e4:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    26e6:	08 95       	ret

000026e8 <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    26e8:	01 c0       	rjmp	.+2      	; 0x26ec <readlast_TWI+0x4>
		asm("nop");
    26ea:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    26ec:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    26f0:	88 23       	and	r24, r24
    26f2:	dc f7       	brge	.-10     	; 0x26ea <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    26f4:	e0 ea       	ldi	r30, 0xA0	; 160
    26f6:	f8 e0       	ldi	r31, 0x08	; 8
    26f8:	84 81       	ldd	r24, Z+4	; 0x04
    26fa:	84 60       	ori	r24, 0x04	; 4
    26fc:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    26fe:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    2700:	08 95       	ret

00002702 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    2702:	61 30       	cpi	r22, 0x01	; 1
    2704:	29 f4       	brne	.+10     	; 0x2710 <start_TWI+0xe>
//		addr |= 0x01;
		addr = ((addr << 1) | 0x01);
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	81 60       	ori	r24, 0x01	; 1
    270e:	01 c0       	rjmp	.+2      	; 0x2712 <start_TWI+0x10>

	} else {
		addr = ((addr << 1) & ~0x01);
    2710:	88 0f       	add	r24, r24
//		addr &= ~0x01;
	}

	TWI0.MADDR = addr;							// Start condition
    2712:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    2716:	01 c0       	rjmp	.+2      	; 0x271a <start_TWI+0x18>
		asm("nop");								// Wait for addr transmission
    2718:	00 00       	nop
//		addr &= ~0x01;
	}

	TWI0.MADDR = addr;							// Start condition

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    271a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    271e:	80 7c       	andi	r24, 0xC0	; 192
    2720:	d9 f3       	breq	.-10     	; 0x2718 <start_TWI+0x16>
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    2722:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2726:	82 fd       	sbrc	r24, 2
    2728:	0c c0       	rjmp	.+24     	; 0x2742 <start_TWI+0x40>
		return(TWIBUSERR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    272a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    272e:	83 fd       	sbrc	r24, 3
    2730:	0a c0       	rjmp	.+20     	; 0x2746 <start_TWI+0x44>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    2732:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2736:	89 2f       	mov	r24, r25
    2738:	80 71       	andi	r24, 0x10	; 16
    273a:	94 ff       	sbrs	r25, 4
    273c:	05 c0       	rjmp	.+10     	; 0x2748 <start_TWI+0x46>
		return(TWINODEVICE);
    273e:	84 e0       	ldi	r24, 0x04	; 4
    2740:	08 95       	ret
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERR);
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    2746:	82 e0       	ldi	r24, 0x02	; 2
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
	} else {									// OK
		return(0);
	}
}
    2748:	08 95       	ret

0000274a <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    274a:	87 e0       	ldi	r24, 0x07	; 7
    274c:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    2750:	08 95       	ret

00002752 <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    2752:	01 c0       	rjmp	.+2      	; 0x2756 <write_TWI+0x4>
		asm("nop");
    2754:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    2756:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    275a:	96 ff       	sbrs	r25, 6
    275c:	fb cf       	rjmp	.-10     	; 0x2754 <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    275e:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    2762:	01 c0       	rjmp	.+2      	; 0x2766 <write_TWI+0x14>
		asm("nop");
    2764:	00 00       	nop
		asm("nop");
	}

	TWI0.MDATA = data;

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    2766:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    276a:	86 ff       	sbrs	r24, 6
    276c:	fb cf       	rjmp	.-10     	; 0x2764 <write_TWI+0x12>
		asm("nop");
	}

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    276e:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2772:	89 2f       	mov	r24, r25
    2774:	80 71       	andi	r24, 0x10	; 16
    2776:	94 fd       	sbrc	r25, 4
		return(TWIACKERR);
    2778:	83 e0       	ldi	r24, 0x03	; 3
	} else {
		return(0);
	}

}
    277a:	08 95       	ret

0000277c <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    277c:	e0 e0       	ldi	r30, 0x00	; 0
    277e:	f4 e0       	ldi	r31, 0x04	; 4
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    2784:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    2786:	e0 e0       	ldi	r30, 0x00	; 0
    2788:	f8 e0       	ldi	r31, 0x08	; 8
    278a:	2d e6       	ldi	r18, 0x6D	; 109
    278c:	35 e0       	ldi	r19, 0x05	; 5
    278e:	20 87       	std	Z+8, r18	; 0x08
    2790:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    2792:	95 81       	ldd	r25, Z+5	; 0x05
    2794:	90 68       	ori	r25, 0x80	; 128
    2796:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    2798:	96 81       	ldd	r25, Z+6	; 0x06
    279a:	90 64       	ori	r25, 0x40	; 64
    279c:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART Receiver
    279e:	96 81       	ldd	r25, Z+6	; 0x06
    27a0:	90 68       	ori	r25, 0x80	; 128
    27a2:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;
    27a4:	10 92 9b 2b 	sts	0x2B9B, r1	; 0x802b9b <send0_buf+0x80>
	send0_buf.tail = 0;
    27a8:	10 92 9c 2b 	sts	0x2B9C, r1	; 0x802b9c <send0_buf+0x81>
	send0_buf.done = YES;
    27ac:	80 93 9f 2b 	sts	0x2B9F, r24	; 0x802b9f <send0_buf+0x84>
	recv0_buf.head = 0;
    27b0:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv0_buf+0x80>
	recv0_buf.tail = 0;
    27b4:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv0_buf+0x81>
	recv0_buf.data[0] = '\0';
    27b8:	10 92 96 2a 	sts	0x2A96, r1	; 0x802a96 <recv0_buf>
	recv0_buf.done = NO;
    27bc:	10 92 1a 2b 	sts	0x2B1A, r1	; 0x802b1a <recv0_buf+0x84>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    27c0:	e0 e4       	ldi	r30, 0x40	; 64
    27c2:	f4 e0       	ldi	r31, 0x04	; 4
    27c4:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    27c6:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    27c8:	e0 e2       	ldi	r30, 0x20	; 32
    27ca:	f8 e0       	ldi	r31, 0x08	; 8
    27cc:	20 87       	std	Z+8, r18	; 0x08
    27ce:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLB |= USART_TXEN_bm;
    27d0:	96 81       	ldd	r25, Z+6	; 0x06
    27d2:	90 64       	ori	r25, 0x40	; 64
    27d4:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;
    27d6:	96 81       	ldd	r25, Z+6	; 0x06
    27d8:	90 68       	ori	r25, 0x80	; 128
    27da:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    27dc:	10 92 2a 2d 	sts	0x2D2A, r1	; 0x802d2a <send1_buf+0x80>
	send1_buf.tail = 0;
    27e0:	10 92 2b 2d 	sts	0x2D2B, r1	; 0x802d2b <send1_buf+0x81>
	send1_buf.done = YES;
    27e4:	80 93 2e 2d 	sts	0x2D2E, r24	; 0x802d2e <send1_buf+0x84>
	recv1_buf.head = 0;
    27e8:	10 92 91 2a 	sts	0x2A91, r1	; 0x802a91 <recv1_buf+0x80>
	recv1_buf.tail = 0;
    27ec:	10 92 92 2a 	sts	0x2A92, r1	; 0x802a92 <recv1_buf+0x81>
	recv1_buf.data[0] = '\0';
    27f0:	10 92 11 2a 	sts	0x2A11, r1	; 0x802a11 <recv1_buf>
	recv1_buf.done = NO;
    27f4:	10 92 95 2a 	sts	0x2A95, r1	; 0x802a95 <recv1_buf+0x84>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    27f8:	e0 e2       	ldi	r30, 0x20	; 32
    27fa:	f4 e0       	ldi	r31, 0x04	; 4
    27fc:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    27fe:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    2800:	e0 e6       	ldi	r30, 0x60	; 96
    2802:	f8 e0       	ldi	r31, 0x08	; 8
    2804:	20 87       	std	Z+8, r18	; 0x08
    2806:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    2808:	96 81       	ldd	r25, Z+6	; 0x06
    280a:	90 64       	ori	r25, 0x40	; 64
    280c:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    280e:	96 81       	ldd	r25, Z+6	; 0x06
    2810:	90 68       	ori	r25, 0x80	; 128
    2812:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    2814:	80 93 a9 2c 	sts	0x2CA9, r24	; 0x802ca9 <send3_buf+0x84>
	recv3_buf.done = NO;
    2818:	10 92 24 2c 	sts	0x2C24, r1	; 0x802c24 <recv3_buf+0x84>
    281c:	08 95       	ret

0000281e <send_USART>:
		port - The USARTn port (0, 1, or 3)
		data - Contains the data to send
		nbytes - Number of bytes to send
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    281e:	fb 01       	movw	r30, r22

	uint8_t i;

	switch (port) {
    2820:	81 30       	cpi	r24, 0x01	; 1
    2822:	09 f4       	brne	.+2      	; 0x2826 <send_USART+0x8>
    2824:	40 c0       	rjmp	.+128    	; 0x28a6 <send_USART+0x88>
    2826:	e8 f0       	brcs	.+58     	; 0x2862 <send_USART+0x44>
    2828:	83 30       	cpi	r24, 0x03	; 3
    282a:	09 f4       	brne	.+2      	; 0x282e <send_USART+0x10>
    282c:	5e c0       	rjmp	.+188    	; 0x28ea <send_USART+0xcc>
    282e:	08 95       	ret
		case 0:
			for (i = 0; i < nbytes; i++) {
				send0_buf.data[send0_buf.head] = *data++;
    2830:	80 91 9b 2b 	lds	r24, 0x2B9B	; 0x802b9b <send0_buf+0x80>
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	bf 01       	movw	r22, r30
    2838:	6f 5f       	subi	r22, 0xFF	; 255
    283a:	7f 4f       	sbci	r23, 0xFF	; 255
    283c:	30 81       	ld	r19, Z
    283e:	fc 01       	movw	r30, r24
    2840:	e5 5e       	subi	r30, 0xE5	; 229
    2842:	f4 4d       	sbci	r31, 0xD4	; 212
    2844:	30 83       	st	Z, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    2846:	01 96       	adiw	r24, 0x01	; 1
    2848:	8f 77       	andi	r24, 0x7F	; 127
    284a:	90 78       	andi	r25, 0x80	; 128
    284c:	99 23       	and	r25, r25
    284e:	24 f4       	brge	.+8      	; 0x2858 <send_USART+0x3a>
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	80 68       	ori	r24, 0x80	; 128
    2854:	9f 6f       	ori	r25, 0xFF	; 255
    2856:	01 96       	adiw	r24, 0x01	; 1
    2858:	80 93 9b 2b 	sts	0x2B9B, r24	; 0x802b9b <send0_buf+0x80>

	uint8_t i;

	switch (port) {
		case 0:
			for (i = 0; i < nbytes; i++) {
    285c:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    285e:	fb 01       	movw	r30, r22
    2860:	01 c0       	rjmp	.+2      	; 0x2864 <send_USART+0x46>
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{

	uint8_t i;

	switch (port) {
    2862:	20 e0       	ldi	r18, 0x00	; 0
		case 0:
			for (i = 0; i < nbytes; i++) {
    2864:	24 17       	cp	r18, r20
    2866:	20 f3       	brcs	.-56     	; 0x2830 <send_USART+0x12>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    2868:	e0 e0       	ldi	r30, 0x00	; 0
    286a:	f8 e0       	ldi	r31, 0x08	; 8
    286c:	85 81       	ldd	r24, Z+5	; 0x05
    286e:	80 62       	ori	r24, 0x20	; 32
    2870:	85 83       	std	Z+5, r24	; 0x05
			break;
    2872:	08 95       	ret

		case 1:
			for (i = 0; i < nbytes; i++) {
				send1_buf.data[send1_buf.head] = *data++;
    2874:	80 91 2a 2d 	lds	r24, 0x2D2A	; 0x802d2a <send1_buf+0x80>
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	bf 01       	movw	r22, r30
    287c:	6f 5f       	subi	r22, 0xFF	; 255
    287e:	7f 4f       	sbci	r23, 0xFF	; 255
    2880:	30 81       	ld	r19, Z
    2882:	fc 01       	movw	r30, r24
    2884:	e6 55       	subi	r30, 0x56	; 86
    2886:	f3 4d       	sbci	r31, 0xD3	; 211
    2888:	30 83       	st	Z, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    288a:	01 96       	adiw	r24, 0x01	; 1
    288c:	8f 77       	andi	r24, 0x7F	; 127
    288e:	90 78       	andi	r25, 0x80	; 128
    2890:	99 23       	and	r25, r25
    2892:	24 f4       	brge	.+8      	; 0x289c <send_USART+0x7e>
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	80 68       	ori	r24, 0x80	; 128
    2898:	9f 6f       	ori	r25, 0xFF	; 255
    289a:	01 96       	adiw	r24, 0x01	; 1
    289c:	80 93 2a 2d 	sts	0x2D2A, r24	; 0x802d2a <send1_buf+0x80>
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			for (i = 0; i < nbytes; i++) {
    28a0:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    28a2:	fb 01       	movw	r30, r22
    28a4:	01 c0       	rjmp	.+2      	; 0x28a8 <send_USART+0x8a>
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{

	uint8_t i;

	switch (port) {
    28a6:	20 e0       	ldi	r18, 0x00	; 0
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			for (i = 0; i < nbytes; i++) {
    28a8:	24 17       	cp	r18, r20
    28aa:	20 f3       	brcs	.-56     	; 0x2874 <send_USART+0x56>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    28ac:	e0 e2       	ldi	r30, 0x20	; 32
    28ae:	f8 e0       	ldi	r31, 0x08	; 8
    28b0:	85 81       	ldd	r24, Z+5	; 0x05
    28b2:	80 62       	ori	r24, 0x20	; 32
    28b4:	85 83       	std	Z+5, r24	; 0x05
			break;
    28b6:	08 95       	ret

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    28b8:	80 91 a5 2c 	lds	r24, 0x2CA5	; 0x802ca5 <send3_buf+0x80>
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	bf 01       	movw	r22, r30
    28c0:	6f 5f       	subi	r22, 0xFF	; 255
    28c2:	7f 4f       	sbci	r23, 0xFF	; 255
    28c4:	30 81       	ld	r19, Z
    28c6:	fc 01       	movw	r30, r24
    28c8:	eb 5d       	subi	r30, 0xDB	; 219
    28ca:	f3 4d       	sbci	r31, 0xD3	; 211
    28cc:	30 83       	st	Z, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    28ce:	01 96       	adiw	r24, 0x01	; 1
    28d0:	8f 77       	andi	r24, 0x7F	; 127
    28d2:	90 78       	andi	r25, 0x80	; 128
    28d4:	99 23       	and	r25, r25
    28d6:	24 f4       	brge	.+8      	; 0x28e0 <send_USART+0xc2>
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	80 68       	ori	r24, 0x80	; 128
    28dc:	9f 6f       	ori	r25, 0xFF	; 255
    28de:	01 96       	adiw	r24, 0x01	; 1
    28e0:	80 93 a5 2c 	sts	0x2CA5, r24	; 0x802ca5 <send3_buf+0x80>
			}
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    28e4:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    28e6:	fb 01       	movw	r30, r22
    28e8:	01 c0       	rjmp	.+2      	; 0x28ec <send_USART+0xce>
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{

	uint8_t i;

	switch (port) {
    28ea:	20 e0       	ldi	r18, 0x00	; 0
			}
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    28ec:	24 17       	cp	r18, r20
    28ee:	20 f3       	brcs	.-56     	; 0x28b8 <send_USART+0x9a>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    28f0:	e0 e6       	ldi	r30, 0x60	; 96
    28f2:	f8 e0       	ldi	r31, 0x08	; 8
    28f4:	85 81       	ldd	r24, Z+5	; 0x05
    28f6:	80 62       	ori	r24, 0x20	; 32
    28f8:	85 83       	std	Z+5, r24	; 0x05
    28fa:	08 95       	ret

000028fc <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    28fc:	1f 92       	push	r1
    28fe:	0f 92       	push	r0
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	0f 92       	push	r0
    2904:	11 24       	eor	r1, r1
    2906:	8f 93       	push	r24
    2908:	9f 93       	push	r25
    290a:	ef 93       	push	r30
    290c:	ff 93       	push	r31

	uint8_t c;

	c = USART0.RXDATAL;
    290e:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
	if ((char) c == '\r') {
    2912:	8d 30       	cpi	r24, 0x0D	; 13
    2914:	61 f4       	brne	.+24     	; 0x292e <__vector_17+0x32>
		recv0_buf.done = YES;
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	80 93 1a 2b 	sts	0x2B1A, r24	; 0x802b1a <recv0_buf+0x84>
		recv0_buf.data[recv0_buf.head] = '\0';
    291c:	e0 91 16 2b 	lds	r30, 0x2B16	; 0x802b16 <recv0_buf+0x80>
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	ea 56       	subi	r30, 0x6A	; 106
    2924:	f5 4d       	sbci	r31, 0xD5	; 213
    2926:	10 82       	st	Z, r1
		charcount = 0;
    2928:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <charcount>
    292c:	0b c0       	rjmp	.+22     	; 0x2944 <__vector_17+0x48>
	} else {
		recv0_buf.data[recv0_buf.head] = c;
    292e:	e0 91 16 2b 	lds	r30, 0x2B16	; 0x802b16 <recv0_buf+0x80>
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	ea 56       	subi	r30, 0x6A	; 106
    2936:	f5 4d       	sbci	r31, 0xD5	; 213
    2938:	80 83       	st	Z, r24
		charcount++;
    293a:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <charcount>
    293e:	8f 5f       	subi	r24, 0xFF	; 255
    2940:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <charcount>
	}
	recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    2944:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv0_buf+0x80>
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	01 96       	adiw	r24, 0x01	; 1
    294c:	8f 77       	andi	r24, 0x7F	; 127
    294e:	90 78       	andi	r25, 0x80	; 128
    2950:	99 23       	and	r25, r25
    2952:	24 f4       	brge	.+8      	; 0x295c <__vector_17+0x60>
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	80 68       	ori	r24, 0x80	; 128
    2958:	9f 6f       	ori	r25, 0xFF	; 255
    295a:	01 96       	adiw	r24, 0x01	; 1
    295c:	80 93 16 2b 	sts	0x2B16, r24	; 0x802b16 <recv0_buf+0x80>

}
    2960:	ff 91       	pop	r31
    2962:	ef 91       	pop	r30
    2964:	9f 91       	pop	r25
    2966:	8f 91       	pop	r24
    2968:	0f 90       	pop	r0
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	0f 90       	pop	r0
    296e:	1f 90       	pop	r1
    2970:	18 95       	reti

00002972 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    2972:	1f 92       	push	r1
    2974:	0f 92       	push	r0
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	0f 92       	push	r0
    297a:	11 24       	eor	r1, r1
    297c:	8f 93       	push	r24
    297e:	9f 93       	push	r25
    2980:	ef 93       	push	r30
    2982:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2984:	e0 e0       	ldi	r30, 0x00	; 0
    2986:	f8 e0       	ldi	r31, 0x08	; 8
    2988:	85 81       	ldd	r24, Z+5	; 0x05
    298a:	8f 7d       	andi	r24, 0xDF	; 223
    298c:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    298e:	80 91 9b 2b 	lds	r24, 0x2B9B	; 0x802b9b <send0_buf+0x80>
    2992:	e0 91 9c 2b 	lds	r30, 0x2B9C	; 0x802b9c <send0_buf+0x81>
    2996:	8e 17       	cp	r24, r30
    2998:	81 f0       	breq	.+32     	; 0x29ba <__vector_18+0x48>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	8e 0f       	add	r24, r30
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	e5 5e       	subi	r30, 0xE5	; 229
    29a2:	f4 4d       	sbci	r31, 0xD4	; 212
    29a4:	90 81       	ld	r25, Z
    29a6:	e0 e0       	ldi	r30, 0x00	; 0
    29a8:	f8 e0       	ldi	r31, 0x08	; 8
    29aa:	92 83       	std	Z+2, r25	; 0x02
		send0_buf.tail %= BUFSIZE;
    29ac:	8f 77       	andi	r24, 0x7F	; 127
    29ae:	80 93 9c 2b 	sts	0x2B9C, r24	; 0x802b9c <send0_buf+0x81>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    29b2:	85 81       	ldd	r24, Z+5	; 0x05
    29b4:	80 62       	ori	r24, 0x20	; 32
    29b6:	85 83       	std	Z+5, r24	; 0x05
    29b8:	03 c0       	rjmp	.+6      	; 0x29c0 <__vector_18+0x4e>
	} else {
		send0_buf.done = YES;
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	80 93 9f 2b 	sts	0x2B9F, r24	; 0x802b9f <send0_buf+0x84>
	}

}
    29c0:	ff 91       	pop	r31
    29c2:	ef 91       	pop	r30
    29c4:	9f 91       	pop	r25
    29c6:	8f 91       	pop	r24
    29c8:	0f 90       	pop	r0
    29ca:	0f be       	out	0x3f, r0	; 63
    29cc:	0f 90       	pop	r0
    29ce:	1f 90       	pop	r1
    29d0:	18 95       	reti

000029d2 <__vector_26>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    29d2:	1f 92       	push	r1
    29d4:	0f 92       	push	r0
    29d6:	0f b6       	in	r0, 0x3f	; 63
    29d8:	0f 92       	push	r0
    29da:	11 24       	eor	r1, r1
    29dc:	8f 93       	push	r24
    29de:	9f 93       	push	r25
    29e0:	af 93       	push	r26
    29e2:	bf 93       	push	r27
    29e4:	ef 93       	push	r30
    29e6:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    29e8:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
	if (((char) c == '\r') || (recv1_buf.nxfrd >= (BUFSIZE-1))) {
    29ec:	8d 30       	cpi	r24, 0x0D	; 13
    29ee:	21 f0       	breq	.+8      	; 0x29f8 <__vector_26+0x26>
    29f0:	e0 91 94 2a 	lds	r30, 0x2A94	; 0x802a94 <recv1_buf+0x83>
    29f4:	ef 37       	cpi	r30, 0x7F	; 127
    29f6:	78 f0       	brcs	.+30     	; 0x2a16 <__vector_26+0x44>
		recv1_buf.done = YES;
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	80 93 95 2a 	sts	0x2A95, r24	; 0x802a95 <recv1_buf+0x84>
		recv1_buf.data[recv1_buf.nxfrd] = 0;	// String terminator
    29fe:	a4 e9       	ldi	r26, 0x94	; 148
    2a00:	ba e2       	ldi	r27, 0x2A	; 42
    2a02:	8c 91       	ld	r24, X
    2a04:	e8 2f       	mov	r30, r24
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	ef 5e       	subi	r30, 0xEF	; 239
    2a0a:	f5 4d       	sbci	r31, 0xD5	; 213
    2a0c:	10 82       	st	Z, r1
		recv1_buf.nbytes = recv1_buf.nxfrd;
    2a0e:	80 93 93 2a 	sts	0x2A93, r24	; 0x802a93 <recv1_buf+0x82>
		recv1_buf.nxfrd = 0;
    2a12:	1c 92       	st	X, r1
		return;
    2a14:	08 c0       	rjmp	.+16     	; 0x2a26 <__vector_26+0x54>
	} else {
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    2a16:	91 e0       	ldi	r25, 0x01	; 1
    2a18:	9e 0f       	add	r25, r30
    2a1a:	90 93 94 2a 	sts	0x2A94, r25	; 0x802a94 <recv1_buf+0x83>
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	ef 5e       	subi	r30, 0xEF	; 239
    2a22:	f5 4d       	sbci	r31, 0xD5	; 213
    2a24:	80 83       	st	Z, r24
	}

}
    2a26:	ff 91       	pop	r31
    2a28:	ef 91       	pop	r30
    2a2a:	bf 91       	pop	r27
    2a2c:	af 91       	pop	r26
    2a2e:	9f 91       	pop	r25
    2a30:	8f 91       	pop	r24
    2a32:	0f 90       	pop	r0
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	0f 90       	pop	r0
    2a38:	1f 90       	pop	r1
    2a3a:	18 95       	reti

00002a3c <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    2a3c:	1f 92       	push	r1
    2a3e:	0f 92       	push	r0
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	0f 92       	push	r0
    2a44:	11 24       	eor	r1, r1
    2a46:	8f 93       	push	r24
    2a48:	9f 93       	push	r25
    2a4a:	ef 93       	push	r30
    2a4c:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2a4e:	e0 e2       	ldi	r30, 0x20	; 32
    2a50:	f8 e0       	ldi	r31, 0x08	; 8
    2a52:	85 81       	ldd	r24, Z+5	; 0x05
    2a54:	8f 7d       	andi	r24, 0xDF	; 223
    2a56:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    2a58:	80 91 2a 2d 	lds	r24, 0x2D2A	; 0x802d2a <send1_buf+0x80>
    2a5c:	e0 91 2b 2d 	lds	r30, 0x2D2B	; 0x802d2b <send1_buf+0x81>
    2a60:	8e 17       	cp	r24, r30
    2a62:	81 f0       	breq	.+32     	; 0x2a84 <__vector_27+0x48>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	8e 0f       	add	r24, r30
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	e6 55       	subi	r30, 0x56	; 86
    2a6c:	f3 4d       	sbci	r31, 0xD3	; 211
    2a6e:	90 81       	ld	r25, Z
    2a70:	e0 e2       	ldi	r30, 0x20	; 32
    2a72:	f8 e0       	ldi	r31, 0x08	; 8
    2a74:	92 83       	std	Z+2, r25	; 0x02
		send1_buf.tail %= BUFSIZE;
    2a76:	8f 77       	andi	r24, 0x7F	; 127
    2a78:	80 93 2b 2d 	sts	0x2D2B, r24	; 0x802d2b <send1_buf+0x81>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    2a7c:	85 81       	ldd	r24, Z+5	; 0x05
    2a7e:	80 62       	ori	r24, 0x20	; 32
    2a80:	85 83       	std	Z+5, r24	; 0x05
    2a82:	03 c0       	rjmp	.+6      	; 0x2a8a <__vector_27+0x4e>
		} else {
		send1_buf.done = YES;
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	80 93 2e 2d 	sts	0x2D2E, r24	; 0x802d2e <send1_buf+0x84>
	if (send1_buf.nxfrd >= send1_buf.nbytes) {
		USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
		send1_buf.done = YES;
	}
*/
}
    2a8a:	ff 91       	pop	r31
    2a8c:	ef 91       	pop	r30
    2a8e:	9f 91       	pop	r25
    2a90:	8f 91       	pop	r24
    2a92:	0f 90       	pop	r0
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	0f 90       	pop	r0
    2a98:	1f 90       	pop	r1
    2a9a:	18 95       	reti

00002a9c <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    2a9c:	1f 92       	push	r1
    2a9e:	0f 92       	push	r0
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	0f 92       	push	r0
    2aa4:	11 24       	eor	r1, r1
    2aa6:	8f 93       	push	r24
    2aa8:	9f 93       	push	r25
    2aaa:	af 93       	push	r26
    2aac:	bf 93       	push	r27
    2aae:	ef 93       	push	r30
    2ab0:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    2ab2:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    2ab6:	8d 30       	cpi	r24, 0x0D	; 13
    2ab8:	21 f0       	breq	.+8      	; 0x2ac2 <__vector_37+0x26>
    2aba:	e0 91 23 2c 	lds	r30, 0x2C23	; 0x802c23 <recv3_buf+0x83>
    2abe:	ef 37       	cpi	r30, 0x7F	; 127
    2ac0:	78 f0       	brcs	.+30     	; 0x2ae0 <__vector_37+0x44>
		recv3_buf.done = YES;
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	80 93 24 2c 	sts	0x2C24, r24	; 0x802c24 <recv3_buf+0x84>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    2ac8:	a3 e2       	ldi	r26, 0x23	; 35
    2aca:	bc e2       	ldi	r27, 0x2C	; 44
    2acc:	8c 91       	ld	r24, X
    2ace:	e8 2f       	mov	r30, r24
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	e0 56       	subi	r30, 0x60	; 96
    2ad4:	f4 4d       	sbci	r31, 0xD4	; 212
    2ad6:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    2ad8:	80 93 22 2c 	sts	0x2C22, r24	; 0x802c22 <recv3_buf+0x82>
		recv3_buf.nxfrd = 0;
    2adc:	1c 92       	st	X, r1
		return;
    2ade:	08 c0       	rjmp	.+16     	; 0x2af0 <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    2ae0:	91 e0       	ldi	r25, 0x01	; 1
    2ae2:	9e 0f       	add	r25, r30
    2ae4:	90 93 23 2c 	sts	0x2C23, r25	; 0x802c23 <recv3_buf+0x83>
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	e0 56       	subi	r30, 0x60	; 96
    2aec:	f4 4d       	sbci	r31, 0xD4	; 212
    2aee:	80 83       	st	Z, r24
	}

}
    2af0:	ff 91       	pop	r31
    2af2:	ef 91       	pop	r30
    2af4:	bf 91       	pop	r27
    2af6:	af 91       	pop	r26
    2af8:	9f 91       	pop	r25
    2afa:	8f 91       	pop	r24
    2afc:	0f 90       	pop	r0
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	0f 90       	pop	r0
    2b02:	1f 90       	pop	r1
    2b04:	18 95       	reti

00002b06 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    2b06:	1f 92       	push	r1
    2b08:	0f 92       	push	r0
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	0f 92       	push	r0
    2b0e:	11 24       	eor	r1, r1
    2b10:	8f 93       	push	r24
    2b12:	9f 93       	push	r25
    2b14:	af 93       	push	r26
    2b16:	bf 93       	push	r27
    2b18:	ef 93       	push	r30
    2b1a:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    2b1c:	a8 ea       	ldi	r26, 0xA8	; 168
    2b1e:	bc e2       	ldi	r27, 0x2C	; 44
    2b20:	ec 91       	ld	r30, X
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	8e 0f       	add	r24, r30
    2b26:	8c 93       	st	X, r24
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	eb 5d       	subi	r30, 0xDB	; 219
    2b2c:	f3 4d       	sbci	r31, 0xD3	; 211
    2b2e:	90 81       	ld	r25, Z
    2b30:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    2b34:	90 91 a7 2c 	lds	r25, 0x2CA7	; 0x802ca7 <send3_buf+0x82>
    2b38:	89 17       	cp	r24, r25
    2b3a:	40 f0       	brcs	.+16     	; 0x2b4c <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2b3c:	e0 e6       	ldi	r30, 0x60	; 96
    2b3e:	f8 e0       	ldi	r31, 0x08	; 8
    2b40:	85 81       	ldd	r24, Z+5	; 0x05
    2b42:	8f 7d       	andi	r24, 0xDF	; 223
    2b44:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	80 93 a9 2c 	sts	0x2CA9, r24	; 0x802ca9 <send3_buf+0x84>
	}

}
    2b4c:	ff 91       	pop	r31
    2b4e:	ef 91       	pop	r30
    2b50:	bf 91       	pop	r27
    2b52:	af 91       	pop	r26
    2b54:	9f 91       	pop	r25
    2b56:	8f 91       	pop	r24
    2b58:	0f 90       	pop	r0
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	0f 90       	pop	r0
    2b5e:	1f 90       	pop	r1
    2b60:	18 95       	reti

00002b62 <reboot>:
#include "globals.h"

void reboot(void)
{

	CPU_CCP = CCP_IOREG_gc;
    2b62:	88 ed       	ldi	r24, 0xD8	; 216
    2b64:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    2b6c:	08 95       	ret

00002b6e <__subsf3>:
    2b6e:	50 58       	subi	r21, 0x80	; 128

00002b70 <__addsf3>:
    2b70:	bb 27       	eor	r27, r27
    2b72:	aa 27       	eor	r26, r26
    2b74:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__addsf3x>
    2b78:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__fp_round>
    2b7c:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__fp_pscA>
    2b80:	38 f0       	brcs	.+14     	; 0x2b90 <__addsf3+0x20>
    2b82:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__fp_pscB>
    2b86:	20 f0       	brcs	.+8      	; 0x2b90 <__addsf3+0x20>
    2b88:	39 f4       	brne	.+14     	; 0x2b98 <__addsf3+0x28>
    2b8a:	9f 3f       	cpi	r25, 0xFF	; 255
    2b8c:	19 f4       	brne	.+6      	; 0x2b94 <__addsf3+0x24>
    2b8e:	26 f4       	brtc	.+8      	; 0x2b98 <__addsf3+0x28>
    2b90:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__fp_nan>
    2b94:	0e f4       	brtc	.+2      	; 0x2b98 <__addsf3+0x28>
    2b96:	e0 95       	com	r30
    2b98:	e7 fb       	bst	r30, 7
    2b9a:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__fp_inf>

00002b9e <__addsf3x>:
    2b9e:	e9 2f       	mov	r30, r25
    2ba0:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__fp_split3>
    2ba4:	58 f3       	brcs	.-42     	; 0x2b7c <__addsf3+0xc>
    2ba6:	ba 17       	cp	r27, r26
    2ba8:	62 07       	cpc	r22, r18
    2baa:	73 07       	cpc	r23, r19
    2bac:	84 07       	cpc	r24, r20
    2bae:	95 07       	cpc	r25, r21
    2bb0:	20 f0       	brcs	.+8      	; 0x2bba <__addsf3x+0x1c>
    2bb2:	79 f4       	brne	.+30     	; 0x2bd2 <__addsf3x+0x34>
    2bb4:	a6 f5       	brtc	.+104    	; 0x2c1e <__addsf3x+0x80>
    2bb6:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__fp_zero>
    2bba:	0e f4       	brtc	.+2      	; 0x2bbe <__addsf3x+0x20>
    2bbc:	e0 95       	com	r30
    2bbe:	0b 2e       	mov	r0, r27
    2bc0:	ba 2f       	mov	r27, r26
    2bc2:	a0 2d       	mov	r26, r0
    2bc4:	0b 01       	movw	r0, r22
    2bc6:	b9 01       	movw	r22, r18
    2bc8:	90 01       	movw	r18, r0
    2bca:	0c 01       	movw	r0, r24
    2bcc:	ca 01       	movw	r24, r20
    2bce:	a0 01       	movw	r20, r0
    2bd0:	11 24       	eor	r1, r1
    2bd2:	ff 27       	eor	r31, r31
    2bd4:	59 1b       	sub	r21, r25
    2bd6:	99 f0       	breq	.+38     	; 0x2bfe <__addsf3x+0x60>
    2bd8:	59 3f       	cpi	r21, 0xF9	; 249
    2bda:	50 f4       	brcc	.+20     	; 0x2bf0 <__addsf3x+0x52>
    2bdc:	50 3e       	cpi	r21, 0xE0	; 224
    2bde:	68 f1       	brcs	.+90     	; 0x2c3a <__addsf3x+0x9c>
    2be0:	1a 16       	cp	r1, r26
    2be2:	f0 40       	sbci	r31, 0x00	; 0
    2be4:	a2 2f       	mov	r26, r18
    2be6:	23 2f       	mov	r18, r19
    2be8:	34 2f       	mov	r19, r20
    2bea:	44 27       	eor	r20, r20
    2bec:	58 5f       	subi	r21, 0xF8	; 248
    2bee:	f3 cf       	rjmp	.-26     	; 0x2bd6 <__addsf3x+0x38>
    2bf0:	46 95       	lsr	r20
    2bf2:	37 95       	ror	r19
    2bf4:	27 95       	ror	r18
    2bf6:	a7 95       	ror	r26
    2bf8:	f0 40       	sbci	r31, 0x00	; 0
    2bfa:	53 95       	inc	r21
    2bfc:	c9 f7       	brne	.-14     	; 0x2bf0 <__addsf3x+0x52>
    2bfe:	7e f4       	brtc	.+30     	; 0x2c1e <__addsf3x+0x80>
    2c00:	1f 16       	cp	r1, r31
    2c02:	ba 0b       	sbc	r27, r26
    2c04:	62 0b       	sbc	r22, r18
    2c06:	73 0b       	sbc	r23, r19
    2c08:	84 0b       	sbc	r24, r20
    2c0a:	ba f0       	brmi	.+46     	; 0x2c3a <__addsf3x+0x9c>
    2c0c:	91 50       	subi	r25, 0x01	; 1
    2c0e:	a1 f0       	breq	.+40     	; 0x2c38 <__addsf3x+0x9a>
    2c10:	ff 0f       	add	r31, r31
    2c12:	bb 1f       	adc	r27, r27
    2c14:	66 1f       	adc	r22, r22
    2c16:	77 1f       	adc	r23, r23
    2c18:	88 1f       	adc	r24, r24
    2c1a:	c2 f7       	brpl	.-16     	; 0x2c0c <__addsf3x+0x6e>
    2c1c:	0e c0       	rjmp	.+28     	; 0x2c3a <__addsf3x+0x9c>
    2c1e:	ba 0f       	add	r27, r26
    2c20:	62 1f       	adc	r22, r18
    2c22:	73 1f       	adc	r23, r19
    2c24:	84 1f       	adc	r24, r20
    2c26:	48 f4       	brcc	.+18     	; 0x2c3a <__addsf3x+0x9c>
    2c28:	87 95       	ror	r24
    2c2a:	77 95       	ror	r23
    2c2c:	67 95       	ror	r22
    2c2e:	b7 95       	ror	r27
    2c30:	f7 95       	ror	r31
    2c32:	9e 3f       	cpi	r25, 0xFE	; 254
    2c34:	08 f0       	brcs	.+2      	; 0x2c38 <__addsf3x+0x9a>
    2c36:	b0 cf       	rjmp	.-160    	; 0x2b98 <__addsf3+0x28>
    2c38:	93 95       	inc	r25
    2c3a:	88 0f       	add	r24, r24
    2c3c:	08 f0       	brcs	.+2      	; 0x2c40 <__addsf3x+0xa2>
    2c3e:	99 27       	eor	r25, r25
    2c40:	ee 0f       	add	r30, r30
    2c42:	97 95       	ror	r25
    2c44:	87 95       	ror	r24
    2c46:	08 95       	ret

00002c48 <__cmpsf2>:
    2c48:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fp_cmp>
    2c4c:	08 f4       	brcc	.+2      	; 0x2c50 <__cmpsf2+0x8>
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	08 95       	ret

00002c52 <__divsf3>:
    2c52:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__divsf3x>
    2c56:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__fp_round>
    2c5a:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__fp_pscB>
    2c5e:	58 f0       	brcs	.+22     	; 0x2c76 <__divsf3+0x24>
    2c60:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__fp_pscA>
    2c64:	40 f0       	brcs	.+16     	; 0x2c76 <__divsf3+0x24>
    2c66:	29 f4       	brne	.+10     	; 0x2c72 <__divsf3+0x20>
    2c68:	5f 3f       	cpi	r21, 0xFF	; 255
    2c6a:	29 f0       	breq	.+10     	; 0x2c76 <__divsf3+0x24>
    2c6c:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__fp_inf>
    2c70:	51 11       	cpse	r21, r1
    2c72:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__fp_szero>
    2c76:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__fp_nan>

00002c7a <__divsf3x>:
    2c7a:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__fp_split3>
    2c7e:	68 f3       	brcs	.-38     	; 0x2c5a <__divsf3+0x8>

00002c80 <__divsf3_pse>:
    2c80:	99 23       	and	r25, r25
    2c82:	b1 f3       	breq	.-20     	; 0x2c70 <__divsf3+0x1e>
    2c84:	55 23       	and	r21, r21
    2c86:	91 f3       	breq	.-28     	; 0x2c6c <__divsf3+0x1a>
    2c88:	95 1b       	sub	r25, r21
    2c8a:	55 0b       	sbc	r21, r21
    2c8c:	bb 27       	eor	r27, r27
    2c8e:	aa 27       	eor	r26, r26
    2c90:	62 17       	cp	r22, r18
    2c92:	73 07       	cpc	r23, r19
    2c94:	84 07       	cpc	r24, r20
    2c96:	38 f0       	brcs	.+14     	; 0x2ca6 <__divsf3_pse+0x26>
    2c98:	9f 5f       	subi	r25, 0xFF	; 255
    2c9a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c9c:	22 0f       	add	r18, r18
    2c9e:	33 1f       	adc	r19, r19
    2ca0:	44 1f       	adc	r20, r20
    2ca2:	aa 1f       	adc	r26, r26
    2ca4:	a9 f3       	breq	.-22     	; 0x2c90 <__divsf3_pse+0x10>
    2ca6:	35 d0       	rcall	.+106    	; 0x2d12 <__divsf3_pse+0x92>
    2ca8:	0e 2e       	mov	r0, r30
    2caa:	3a f0       	brmi	.+14     	; 0x2cba <__divsf3_pse+0x3a>
    2cac:	e0 e8       	ldi	r30, 0x80	; 128
    2cae:	32 d0       	rcall	.+100    	; 0x2d14 <__divsf3_pse+0x94>
    2cb0:	91 50       	subi	r25, 0x01	; 1
    2cb2:	50 40       	sbci	r21, 0x00	; 0
    2cb4:	e6 95       	lsr	r30
    2cb6:	00 1c       	adc	r0, r0
    2cb8:	ca f7       	brpl	.-14     	; 0x2cac <__divsf3_pse+0x2c>
    2cba:	2b d0       	rcall	.+86     	; 0x2d12 <__divsf3_pse+0x92>
    2cbc:	fe 2f       	mov	r31, r30
    2cbe:	29 d0       	rcall	.+82     	; 0x2d12 <__divsf3_pse+0x92>
    2cc0:	66 0f       	add	r22, r22
    2cc2:	77 1f       	adc	r23, r23
    2cc4:	88 1f       	adc	r24, r24
    2cc6:	bb 1f       	adc	r27, r27
    2cc8:	26 17       	cp	r18, r22
    2cca:	37 07       	cpc	r19, r23
    2ccc:	48 07       	cpc	r20, r24
    2cce:	ab 07       	cpc	r26, r27
    2cd0:	b0 e8       	ldi	r27, 0x80	; 128
    2cd2:	09 f0       	breq	.+2      	; 0x2cd6 <__divsf3_pse+0x56>
    2cd4:	bb 0b       	sbc	r27, r27
    2cd6:	80 2d       	mov	r24, r0
    2cd8:	bf 01       	movw	r22, r30
    2cda:	ff 27       	eor	r31, r31
    2cdc:	93 58       	subi	r25, 0x83	; 131
    2cde:	5f 4f       	sbci	r21, 0xFF	; 255
    2ce0:	3a f0       	brmi	.+14     	; 0x2cf0 <__divsf3_pse+0x70>
    2ce2:	9e 3f       	cpi	r25, 0xFE	; 254
    2ce4:	51 05       	cpc	r21, r1
    2ce6:	78 f0       	brcs	.+30     	; 0x2d06 <__divsf3_pse+0x86>
    2ce8:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__fp_inf>
    2cec:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__fp_szero>
    2cf0:	5f 3f       	cpi	r21, 0xFF	; 255
    2cf2:	e4 f3       	brlt	.-8      	; 0x2cec <__divsf3_pse+0x6c>
    2cf4:	98 3e       	cpi	r25, 0xE8	; 232
    2cf6:	d4 f3       	brlt	.-12     	; 0x2cec <__divsf3_pse+0x6c>
    2cf8:	86 95       	lsr	r24
    2cfa:	77 95       	ror	r23
    2cfc:	67 95       	ror	r22
    2cfe:	b7 95       	ror	r27
    2d00:	f7 95       	ror	r31
    2d02:	9f 5f       	subi	r25, 0xFF	; 255
    2d04:	c9 f7       	brne	.-14     	; 0x2cf8 <__divsf3_pse+0x78>
    2d06:	88 0f       	add	r24, r24
    2d08:	91 1d       	adc	r25, r1
    2d0a:	96 95       	lsr	r25
    2d0c:	87 95       	ror	r24
    2d0e:	97 f9       	bld	r25, 7
    2d10:	08 95       	ret
    2d12:	e1 e0       	ldi	r30, 0x01	; 1
    2d14:	66 0f       	add	r22, r22
    2d16:	77 1f       	adc	r23, r23
    2d18:	88 1f       	adc	r24, r24
    2d1a:	bb 1f       	adc	r27, r27
    2d1c:	62 17       	cp	r22, r18
    2d1e:	73 07       	cpc	r23, r19
    2d20:	84 07       	cpc	r24, r20
    2d22:	ba 07       	cpc	r27, r26
    2d24:	20 f0       	brcs	.+8      	; 0x2d2e <__divsf3_pse+0xae>
    2d26:	62 1b       	sub	r22, r18
    2d28:	73 0b       	sbc	r23, r19
    2d2a:	84 0b       	sbc	r24, r20
    2d2c:	ba 0b       	sbc	r27, r26
    2d2e:	ee 1f       	adc	r30, r30
    2d30:	88 f7       	brcc	.-30     	; 0x2d14 <__divsf3_pse+0x94>
    2d32:	e0 95       	com	r30
    2d34:	08 95       	ret

00002d36 <__floatunsisf>:
    2d36:	e8 94       	clt
    2d38:	09 c0       	rjmp	.+18     	; 0x2d4c <__floatsisf+0x12>

00002d3a <__floatsisf>:
    2d3a:	97 fb       	bst	r25, 7
    2d3c:	3e f4       	brtc	.+14     	; 0x2d4c <__floatsisf+0x12>
    2d3e:	90 95       	com	r25
    2d40:	80 95       	com	r24
    2d42:	70 95       	com	r23
    2d44:	61 95       	neg	r22
    2d46:	7f 4f       	sbci	r23, 0xFF	; 255
    2d48:	8f 4f       	sbci	r24, 0xFF	; 255
    2d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d4c:	99 23       	and	r25, r25
    2d4e:	a9 f0       	breq	.+42     	; 0x2d7a <__floatsisf+0x40>
    2d50:	f9 2f       	mov	r31, r25
    2d52:	96 e9       	ldi	r25, 0x96	; 150
    2d54:	bb 27       	eor	r27, r27
    2d56:	93 95       	inc	r25
    2d58:	f6 95       	lsr	r31
    2d5a:	87 95       	ror	r24
    2d5c:	77 95       	ror	r23
    2d5e:	67 95       	ror	r22
    2d60:	b7 95       	ror	r27
    2d62:	f1 11       	cpse	r31, r1
    2d64:	f8 cf       	rjmp	.-16     	; 0x2d56 <__floatsisf+0x1c>
    2d66:	fa f4       	brpl	.+62     	; 0x2da6 <__floatsisf+0x6c>
    2d68:	bb 0f       	add	r27, r27
    2d6a:	11 f4       	brne	.+4      	; 0x2d70 <__floatsisf+0x36>
    2d6c:	60 ff       	sbrs	r22, 0
    2d6e:	1b c0       	rjmp	.+54     	; 0x2da6 <__floatsisf+0x6c>
    2d70:	6f 5f       	subi	r22, 0xFF	; 255
    2d72:	7f 4f       	sbci	r23, 0xFF	; 255
    2d74:	8f 4f       	sbci	r24, 0xFF	; 255
    2d76:	9f 4f       	sbci	r25, 0xFF	; 255
    2d78:	16 c0       	rjmp	.+44     	; 0x2da6 <__floatsisf+0x6c>
    2d7a:	88 23       	and	r24, r24
    2d7c:	11 f0       	breq	.+4      	; 0x2d82 <__floatsisf+0x48>
    2d7e:	96 e9       	ldi	r25, 0x96	; 150
    2d80:	11 c0       	rjmp	.+34     	; 0x2da4 <__floatsisf+0x6a>
    2d82:	77 23       	and	r23, r23
    2d84:	21 f0       	breq	.+8      	; 0x2d8e <__floatsisf+0x54>
    2d86:	9e e8       	ldi	r25, 0x8E	; 142
    2d88:	87 2f       	mov	r24, r23
    2d8a:	76 2f       	mov	r23, r22
    2d8c:	05 c0       	rjmp	.+10     	; 0x2d98 <__floatsisf+0x5e>
    2d8e:	66 23       	and	r22, r22
    2d90:	71 f0       	breq	.+28     	; 0x2dae <__floatsisf+0x74>
    2d92:	96 e8       	ldi	r25, 0x86	; 134
    2d94:	86 2f       	mov	r24, r22
    2d96:	70 e0       	ldi	r23, 0x00	; 0
    2d98:	60 e0       	ldi	r22, 0x00	; 0
    2d9a:	2a f0       	brmi	.+10     	; 0x2da6 <__floatsisf+0x6c>
    2d9c:	9a 95       	dec	r25
    2d9e:	66 0f       	add	r22, r22
    2da0:	77 1f       	adc	r23, r23
    2da2:	88 1f       	adc	r24, r24
    2da4:	da f7       	brpl	.-10     	; 0x2d9c <__floatsisf+0x62>
    2da6:	88 0f       	add	r24, r24
    2da8:	96 95       	lsr	r25
    2daa:	87 95       	ror	r24
    2dac:	97 f9       	bld	r25, 7
    2dae:	08 95       	ret

00002db0 <__fp_cmp>:
    2db0:	99 0f       	add	r25, r25
    2db2:	00 08       	sbc	r0, r0
    2db4:	55 0f       	add	r21, r21
    2db6:	aa 0b       	sbc	r26, r26
    2db8:	e0 e8       	ldi	r30, 0x80	; 128
    2dba:	fe ef       	ldi	r31, 0xFE	; 254
    2dbc:	16 16       	cp	r1, r22
    2dbe:	17 06       	cpc	r1, r23
    2dc0:	e8 07       	cpc	r30, r24
    2dc2:	f9 07       	cpc	r31, r25
    2dc4:	c0 f0       	brcs	.+48     	; 0x2df6 <__fp_cmp+0x46>
    2dc6:	12 16       	cp	r1, r18
    2dc8:	13 06       	cpc	r1, r19
    2dca:	e4 07       	cpc	r30, r20
    2dcc:	f5 07       	cpc	r31, r21
    2dce:	98 f0       	brcs	.+38     	; 0x2df6 <__fp_cmp+0x46>
    2dd0:	62 1b       	sub	r22, r18
    2dd2:	73 0b       	sbc	r23, r19
    2dd4:	84 0b       	sbc	r24, r20
    2dd6:	95 0b       	sbc	r25, r21
    2dd8:	39 f4       	brne	.+14     	; 0x2de8 <__fp_cmp+0x38>
    2dda:	0a 26       	eor	r0, r26
    2ddc:	61 f0       	breq	.+24     	; 0x2df6 <__fp_cmp+0x46>
    2dde:	23 2b       	or	r18, r19
    2de0:	24 2b       	or	r18, r20
    2de2:	25 2b       	or	r18, r21
    2de4:	21 f4       	brne	.+8      	; 0x2dee <__fp_cmp+0x3e>
    2de6:	08 95       	ret
    2de8:	0a 26       	eor	r0, r26
    2dea:	09 f4       	brne	.+2      	; 0x2dee <__fp_cmp+0x3e>
    2dec:	a1 40       	sbci	r26, 0x01	; 1
    2dee:	a6 95       	lsr	r26
    2df0:	8f ef       	ldi	r24, 0xFF	; 255
    2df2:	81 1d       	adc	r24, r1
    2df4:	81 1d       	adc	r24, r1
    2df6:	08 95       	ret

00002df8 <__fp_inf>:
    2df8:	97 f9       	bld	r25, 7
    2dfa:	9f 67       	ori	r25, 0x7F	; 127
    2dfc:	80 e8       	ldi	r24, 0x80	; 128
    2dfe:	70 e0       	ldi	r23, 0x00	; 0
    2e00:	60 e0       	ldi	r22, 0x00	; 0
    2e02:	08 95       	ret

00002e04 <__fp_nan>:
    2e04:	9f ef       	ldi	r25, 0xFF	; 255
    2e06:	80 ec       	ldi	r24, 0xC0	; 192
    2e08:	08 95       	ret

00002e0a <__fp_pscA>:
    2e0a:	00 24       	eor	r0, r0
    2e0c:	0a 94       	dec	r0
    2e0e:	16 16       	cp	r1, r22
    2e10:	17 06       	cpc	r1, r23
    2e12:	18 06       	cpc	r1, r24
    2e14:	09 06       	cpc	r0, r25
    2e16:	08 95       	ret

00002e18 <__fp_pscB>:
    2e18:	00 24       	eor	r0, r0
    2e1a:	0a 94       	dec	r0
    2e1c:	12 16       	cp	r1, r18
    2e1e:	13 06       	cpc	r1, r19
    2e20:	14 06       	cpc	r1, r20
    2e22:	05 06       	cpc	r0, r21
    2e24:	08 95       	ret

00002e26 <__fp_round>:
    2e26:	09 2e       	mov	r0, r25
    2e28:	03 94       	inc	r0
    2e2a:	00 0c       	add	r0, r0
    2e2c:	11 f4       	brne	.+4      	; 0x2e32 <__fp_round+0xc>
    2e2e:	88 23       	and	r24, r24
    2e30:	52 f0       	brmi	.+20     	; 0x2e46 <__fp_round+0x20>
    2e32:	bb 0f       	add	r27, r27
    2e34:	40 f4       	brcc	.+16     	; 0x2e46 <__fp_round+0x20>
    2e36:	bf 2b       	or	r27, r31
    2e38:	11 f4       	brne	.+4      	; 0x2e3e <__fp_round+0x18>
    2e3a:	60 ff       	sbrs	r22, 0
    2e3c:	04 c0       	rjmp	.+8      	; 0x2e46 <__fp_round+0x20>
    2e3e:	6f 5f       	subi	r22, 0xFF	; 255
    2e40:	7f 4f       	sbci	r23, 0xFF	; 255
    2e42:	8f 4f       	sbci	r24, 0xFF	; 255
    2e44:	9f 4f       	sbci	r25, 0xFF	; 255
    2e46:	08 95       	ret

00002e48 <__fp_split3>:
    2e48:	57 fd       	sbrc	r21, 7
    2e4a:	90 58       	subi	r25, 0x80	; 128
    2e4c:	44 0f       	add	r20, r20
    2e4e:	55 1f       	adc	r21, r21
    2e50:	59 f0       	breq	.+22     	; 0x2e68 <__fp_splitA+0x10>
    2e52:	5f 3f       	cpi	r21, 0xFF	; 255
    2e54:	71 f0       	breq	.+28     	; 0x2e72 <__fp_splitA+0x1a>
    2e56:	47 95       	ror	r20

00002e58 <__fp_splitA>:
    2e58:	88 0f       	add	r24, r24
    2e5a:	97 fb       	bst	r25, 7
    2e5c:	99 1f       	adc	r25, r25
    2e5e:	61 f0       	breq	.+24     	; 0x2e78 <__fp_splitA+0x20>
    2e60:	9f 3f       	cpi	r25, 0xFF	; 255
    2e62:	79 f0       	breq	.+30     	; 0x2e82 <__fp_splitA+0x2a>
    2e64:	87 95       	ror	r24
    2e66:	08 95       	ret
    2e68:	12 16       	cp	r1, r18
    2e6a:	13 06       	cpc	r1, r19
    2e6c:	14 06       	cpc	r1, r20
    2e6e:	55 1f       	adc	r21, r21
    2e70:	f2 cf       	rjmp	.-28     	; 0x2e56 <__fp_split3+0xe>
    2e72:	46 95       	lsr	r20
    2e74:	f1 df       	rcall	.-30     	; 0x2e58 <__fp_splitA>
    2e76:	08 c0       	rjmp	.+16     	; 0x2e88 <__fp_splitA+0x30>
    2e78:	16 16       	cp	r1, r22
    2e7a:	17 06       	cpc	r1, r23
    2e7c:	18 06       	cpc	r1, r24
    2e7e:	99 1f       	adc	r25, r25
    2e80:	f1 cf       	rjmp	.-30     	; 0x2e64 <__fp_splitA+0xc>
    2e82:	86 95       	lsr	r24
    2e84:	71 05       	cpc	r23, r1
    2e86:	61 05       	cpc	r22, r1
    2e88:	08 94       	sec
    2e8a:	08 95       	ret

00002e8c <__fp_zero>:
    2e8c:	e8 94       	clt

00002e8e <__fp_szero>:
    2e8e:	bb 27       	eor	r27, r27
    2e90:	66 27       	eor	r22, r22
    2e92:	77 27       	eor	r23, r23
    2e94:	cb 01       	movw	r24, r22
    2e96:	97 f9       	bld	r25, 7
    2e98:	08 95       	ret

00002e9a <__gesf2>:
    2e9a:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fp_cmp>
    2e9e:	08 f4       	brcc	.+2      	; 0x2ea2 <__gesf2+0x8>
    2ea0:	8f ef       	ldi	r24, 0xFF	; 255
    2ea2:	08 95       	ret

00002ea4 <__mulsf3>:
    2ea4:	0e 94 65 17 	call	0x2eca	; 0x2eca <__mulsf3x>
    2ea8:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__fp_round>
    2eac:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__fp_pscA>
    2eb0:	38 f0       	brcs	.+14     	; 0x2ec0 <__mulsf3+0x1c>
    2eb2:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__fp_pscB>
    2eb6:	20 f0       	brcs	.+8      	; 0x2ec0 <__mulsf3+0x1c>
    2eb8:	95 23       	and	r25, r21
    2eba:	11 f0       	breq	.+4      	; 0x2ec0 <__mulsf3+0x1c>
    2ebc:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__fp_inf>
    2ec0:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__fp_nan>
    2ec4:	11 24       	eor	r1, r1
    2ec6:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__fp_szero>

00002eca <__mulsf3x>:
    2eca:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__fp_split3>
    2ece:	70 f3       	brcs	.-36     	; 0x2eac <__mulsf3+0x8>

00002ed0 <__mulsf3_pse>:
    2ed0:	95 9f       	mul	r25, r21
    2ed2:	c1 f3       	breq	.-16     	; 0x2ec4 <__mulsf3+0x20>
    2ed4:	95 0f       	add	r25, r21
    2ed6:	50 e0       	ldi	r21, 0x00	; 0
    2ed8:	55 1f       	adc	r21, r21
    2eda:	62 9f       	mul	r22, r18
    2edc:	f0 01       	movw	r30, r0
    2ede:	72 9f       	mul	r23, r18
    2ee0:	bb 27       	eor	r27, r27
    2ee2:	f0 0d       	add	r31, r0
    2ee4:	b1 1d       	adc	r27, r1
    2ee6:	63 9f       	mul	r22, r19
    2ee8:	aa 27       	eor	r26, r26
    2eea:	f0 0d       	add	r31, r0
    2eec:	b1 1d       	adc	r27, r1
    2eee:	aa 1f       	adc	r26, r26
    2ef0:	64 9f       	mul	r22, r20
    2ef2:	66 27       	eor	r22, r22
    2ef4:	b0 0d       	add	r27, r0
    2ef6:	a1 1d       	adc	r26, r1
    2ef8:	66 1f       	adc	r22, r22
    2efa:	82 9f       	mul	r24, r18
    2efc:	22 27       	eor	r18, r18
    2efe:	b0 0d       	add	r27, r0
    2f00:	a1 1d       	adc	r26, r1
    2f02:	62 1f       	adc	r22, r18
    2f04:	73 9f       	mul	r23, r19
    2f06:	b0 0d       	add	r27, r0
    2f08:	a1 1d       	adc	r26, r1
    2f0a:	62 1f       	adc	r22, r18
    2f0c:	83 9f       	mul	r24, r19
    2f0e:	a0 0d       	add	r26, r0
    2f10:	61 1d       	adc	r22, r1
    2f12:	22 1f       	adc	r18, r18
    2f14:	74 9f       	mul	r23, r20
    2f16:	33 27       	eor	r19, r19
    2f18:	a0 0d       	add	r26, r0
    2f1a:	61 1d       	adc	r22, r1
    2f1c:	23 1f       	adc	r18, r19
    2f1e:	84 9f       	mul	r24, r20
    2f20:	60 0d       	add	r22, r0
    2f22:	21 1d       	adc	r18, r1
    2f24:	82 2f       	mov	r24, r18
    2f26:	76 2f       	mov	r23, r22
    2f28:	6a 2f       	mov	r22, r26
    2f2a:	11 24       	eor	r1, r1
    2f2c:	9f 57       	subi	r25, 0x7F	; 127
    2f2e:	50 40       	sbci	r21, 0x00	; 0
    2f30:	9a f0       	brmi	.+38     	; 0x2f58 <__mulsf3_pse+0x88>
    2f32:	f1 f0       	breq	.+60     	; 0x2f70 <__mulsf3_pse+0xa0>
    2f34:	88 23       	and	r24, r24
    2f36:	4a f0       	brmi	.+18     	; 0x2f4a <__mulsf3_pse+0x7a>
    2f38:	ee 0f       	add	r30, r30
    2f3a:	ff 1f       	adc	r31, r31
    2f3c:	bb 1f       	adc	r27, r27
    2f3e:	66 1f       	adc	r22, r22
    2f40:	77 1f       	adc	r23, r23
    2f42:	88 1f       	adc	r24, r24
    2f44:	91 50       	subi	r25, 0x01	; 1
    2f46:	50 40       	sbci	r21, 0x00	; 0
    2f48:	a9 f7       	brne	.-22     	; 0x2f34 <__mulsf3_pse+0x64>
    2f4a:	9e 3f       	cpi	r25, 0xFE	; 254
    2f4c:	51 05       	cpc	r21, r1
    2f4e:	80 f0       	brcs	.+32     	; 0x2f70 <__mulsf3_pse+0xa0>
    2f50:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__fp_inf>
    2f54:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__fp_szero>
    2f58:	5f 3f       	cpi	r21, 0xFF	; 255
    2f5a:	e4 f3       	brlt	.-8      	; 0x2f54 <__mulsf3_pse+0x84>
    2f5c:	98 3e       	cpi	r25, 0xE8	; 232
    2f5e:	d4 f3       	brlt	.-12     	; 0x2f54 <__mulsf3_pse+0x84>
    2f60:	86 95       	lsr	r24
    2f62:	77 95       	ror	r23
    2f64:	67 95       	ror	r22
    2f66:	b7 95       	ror	r27
    2f68:	f7 95       	ror	r31
    2f6a:	e7 95       	ror	r30
    2f6c:	9f 5f       	subi	r25, 0xFF	; 255
    2f6e:	c1 f7       	brne	.-16     	; 0x2f60 <__mulsf3_pse+0x90>
    2f70:	fe 2b       	or	r31, r30
    2f72:	88 0f       	add	r24, r24
    2f74:	91 1d       	adc	r25, r1
    2f76:	96 95       	lsr	r25
    2f78:	87 95       	ror	r24
    2f7a:	97 f9       	bld	r25, 7
    2f7c:	08 95       	ret

00002f7e <vfprintf>:
    2f7e:	a0 e1       	ldi	r26, 0x10	; 16
    2f80:	b0 e0       	ldi	r27, 0x00	; 0
    2f82:	e5 ec       	ldi	r30, 0xC5	; 197
    2f84:	f7 e1       	ldi	r31, 0x17	; 23
    2f86:	0c 94 56 1b 	jmp	0x36ac	; 0x36ac <__prologue_saves__>
    2f8a:	7c 01       	movw	r14, r24
    2f8c:	1b 01       	movw	r2, r22
    2f8e:	6a 01       	movw	r12, r20
    2f90:	fc 01       	movw	r30, r24
    2f92:	16 82       	std	Z+6, r1	; 0x06
    2f94:	17 82       	std	Z+7, r1	; 0x07
    2f96:	83 81       	ldd	r24, Z+3	; 0x03
    2f98:	81 ff       	sbrs	r24, 1
    2f9a:	44 c3       	rjmp	.+1672   	; 0x3624 <vfprintf+0x6a6>
    2f9c:	9e 01       	movw	r18, r28
    2f9e:	2f 5f       	subi	r18, 0xFF	; 255
    2fa0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa2:	39 01       	movw	r6, r18
    2fa4:	f7 01       	movw	r30, r14
    2fa6:	93 81       	ldd	r25, Z+3	; 0x03
    2fa8:	f1 01       	movw	r30, r2
    2faa:	93 fd       	sbrc	r25, 3
    2fac:	85 91       	lpm	r24, Z+
    2fae:	93 ff       	sbrs	r25, 3
    2fb0:	81 91       	ld	r24, Z+
    2fb2:	1f 01       	movw	r2, r30
    2fb4:	88 23       	and	r24, r24
    2fb6:	09 f4       	brne	.+2      	; 0x2fba <vfprintf+0x3c>
    2fb8:	31 c3       	rjmp	.+1634   	; 0x361c <vfprintf+0x69e>
    2fba:	85 32       	cpi	r24, 0x25	; 37
    2fbc:	39 f4       	brne	.+14     	; 0x2fcc <vfprintf+0x4e>
    2fbe:	93 fd       	sbrc	r25, 3
    2fc0:	85 91       	lpm	r24, Z+
    2fc2:	93 ff       	sbrs	r25, 3
    2fc4:	81 91       	ld	r24, Z+
    2fc6:	1f 01       	movw	r2, r30
    2fc8:	85 32       	cpi	r24, 0x25	; 37
    2fca:	39 f4       	brne	.+14     	; 0x2fda <vfprintf+0x5c>
    2fcc:	b7 01       	movw	r22, r14
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    2fd4:	56 01       	movw	r10, r12
    2fd6:	65 01       	movw	r12, r10
    2fd8:	e5 cf       	rjmp	.-54     	; 0x2fa4 <vfprintf+0x26>
    2fda:	10 e0       	ldi	r17, 0x00	; 0
    2fdc:	51 2c       	mov	r5, r1
    2fde:	91 2c       	mov	r9, r1
    2fe0:	ff e1       	ldi	r31, 0x1F	; 31
    2fe2:	f9 15       	cp	r31, r9
    2fe4:	d8 f0       	brcs	.+54     	; 0x301c <vfprintf+0x9e>
    2fe6:	8b 32       	cpi	r24, 0x2B	; 43
    2fe8:	79 f0       	breq	.+30     	; 0x3008 <vfprintf+0x8a>
    2fea:	38 f4       	brcc	.+14     	; 0x2ffa <vfprintf+0x7c>
    2fec:	80 32       	cpi	r24, 0x20	; 32
    2fee:	79 f0       	breq	.+30     	; 0x300e <vfprintf+0x90>
    2ff0:	83 32       	cpi	r24, 0x23	; 35
    2ff2:	a1 f4       	brne	.+40     	; 0x301c <vfprintf+0x9e>
    2ff4:	f9 2d       	mov	r31, r9
    2ff6:	f0 61       	ori	r31, 0x10	; 16
    2ff8:	2e c0       	rjmp	.+92     	; 0x3056 <vfprintf+0xd8>
    2ffa:	8d 32       	cpi	r24, 0x2D	; 45
    2ffc:	61 f0       	breq	.+24     	; 0x3016 <vfprintf+0x98>
    2ffe:	80 33       	cpi	r24, 0x30	; 48
    3000:	69 f4       	brne	.+26     	; 0x301c <vfprintf+0x9e>
    3002:	29 2d       	mov	r18, r9
    3004:	21 60       	ori	r18, 0x01	; 1
    3006:	2d c0       	rjmp	.+90     	; 0x3062 <vfprintf+0xe4>
    3008:	39 2d       	mov	r19, r9
    300a:	32 60       	ori	r19, 0x02	; 2
    300c:	93 2e       	mov	r9, r19
    300e:	89 2d       	mov	r24, r9
    3010:	84 60       	ori	r24, 0x04	; 4
    3012:	98 2e       	mov	r9, r24
    3014:	2a c0       	rjmp	.+84     	; 0x306a <vfprintf+0xec>
    3016:	e9 2d       	mov	r30, r9
    3018:	e8 60       	ori	r30, 0x08	; 8
    301a:	15 c0       	rjmp	.+42     	; 0x3046 <vfprintf+0xc8>
    301c:	97 fc       	sbrc	r9, 7
    301e:	2d c0       	rjmp	.+90     	; 0x307a <vfprintf+0xfc>
    3020:	20 ed       	ldi	r18, 0xD0	; 208
    3022:	28 0f       	add	r18, r24
    3024:	2a 30       	cpi	r18, 0x0A	; 10
    3026:	88 f4       	brcc	.+34     	; 0x304a <vfprintf+0xcc>
    3028:	96 fe       	sbrs	r9, 6
    302a:	06 c0       	rjmp	.+12     	; 0x3038 <vfprintf+0xba>
    302c:	3a e0       	ldi	r19, 0x0A	; 10
    302e:	13 9f       	mul	r17, r19
    3030:	20 0d       	add	r18, r0
    3032:	11 24       	eor	r1, r1
    3034:	12 2f       	mov	r17, r18
    3036:	19 c0       	rjmp	.+50     	; 0x306a <vfprintf+0xec>
    3038:	8a e0       	ldi	r24, 0x0A	; 10
    303a:	58 9e       	mul	r5, r24
    303c:	20 0d       	add	r18, r0
    303e:	11 24       	eor	r1, r1
    3040:	52 2e       	mov	r5, r18
    3042:	e9 2d       	mov	r30, r9
    3044:	e0 62       	ori	r30, 0x20	; 32
    3046:	9e 2e       	mov	r9, r30
    3048:	10 c0       	rjmp	.+32     	; 0x306a <vfprintf+0xec>
    304a:	8e 32       	cpi	r24, 0x2E	; 46
    304c:	31 f4       	brne	.+12     	; 0x305a <vfprintf+0xdc>
    304e:	96 fc       	sbrc	r9, 6
    3050:	e5 c2       	rjmp	.+1482   	; 0x361c <vfprintf+0x69e>
    3052:	f9 2d       	mov	r31, r9
    3054:	f0 64       	ori	r31, 0x40	; 64
    3056:	9f 2e       	mov	r9, r31
    3058:	08 c0       	rjmp	.+16     	; 0x306a <vfprintf+0xec>
    305a:	8c 36       	cpi	r24, 0x6C	; 108
    305c:	21 f4       	brne	.+8      	; 0x3066 <vfprintf+0xe8>
    305e:	29 2d       	mov	r18, r9
    3060:	20 68       	ori	r18, 0x80	; 128
    3062:	92 2e       	mov	r9, r18
    3064:	02 c0       	rjmp	.+4      	; 0x306a <vfprintf+0xec>
    3066:	88 36       	cpi	r24, 0x68	; 104
    3068:	41 f4       	brne	.+16     	; 0x307a <vfprintf+0xfc>
    306a:	f1 01       	movw	r30, r2
    306c:	93 fd       	sbrc	r25, 3
    306e:	85 91       	lpm	r24, Z+
    3070:	93 ff       	sbrs	r25, 3
    3072:	81 91       	ld	r24, Z+
    3074:	1f 01       	movw	r2, r30
    3076:	81 11       	cpse	r24, r1
    3078:	b3 cf       	rjmp	.-154    	; 0x2fe0 <vfprintf+0x62>
    307a:	9b eb       	ldi	r25, 0xBB	; 187
    307c:	98 0f       	add	r25, r24
    307e:	93 30       	cpi	r25, 0x03	; 3
    3080:	20 f4       	brcc	.+8      	; 0x308a <vfprintf+0x10c>
    3082:	99 2d       	mov	r25, r9
    3084:	90 61       	ori	r25, 0x10	; 16
    3086:	80 5e       	subi	r24, 0xE0	; 224
    3088:	07 c0       	rjmp	.+14     	; 0x3098 <vfprintf+0x11a>
    308a:	9b e9       	ldi	r25, 0x9B	; 155
    308c:	98 0f       	add	r25, r24
    308e:	93 30       	cpi	r25, 0x03	; 3
    3090:	08 f0       	brcs	.+2      	; 0x3094 <vfprintf+0x116>
    3092:	66 c1       	rjmp	.+716    	; 0x3360 <vfprintf+0x3e2>
    3094:	99 2d       	mov	r25, r9
    3096:	9f 7e       	andi	r25, 0xEF	; 239
    3098:	96 ff       	sbrs	r25, 6
    309a:	16 e0       	ldi	r17, 0x06	; 6
    309c:	9f 73       	andi	r25, 0x3F	; 63
    309e:	99 2e       	mov	r9, r25
    30a0:	85 36       	cpi	r24, 0x65	; 101
    30a2:	19 f4       	brne	.+6      	; 0x30aa <vfprintf+0x12c>
    30a4:	90 64       	ori	r25, 0x40	; 64
    30a6:	99 2e       	mov	r9, r25
    30a8:	08 c0       	rjmp	.+16     	; 0x30ba <vfprintf+0x13c>
    30aa:	86 36       	cpi	r24, 0x66	; 102
    30ac:	21 f4       	brne	.+8      	; 0x30b6 <vfprintf+0x138>
    30ae:	39 2f       	mov	r19, r25
    30b0:	30 68       	ori	r19, 0x80	; 128
    30b2:	93 2e       	mov	r9, r19
    30b4:	02 c0       	rjmp	.+4      	; 0x30ba <vfprintf+0x13c>
    30b6:	11 11       	cpse	r17, r1
    30b8:	11 50       	subi	r17, 0x01	; 1
    30ba:	97 fe       	sbrs	r9, 7
    30bc:	07 c0       	rjmp	.+14     	; 0x30cc <vfprintf+0x14e>
    30be:	1c 33       	cpi	r17, 0x3C	; 60
    30c0:	50 f4       	brcc	.+20     	; 0x30d6 <vfprintf+0x158>
    30c2:	44 24       	eor	r4, r4
    30c4:	43 94       	inc	r4
    30c6:	41 0e       	add	r4, r17
    30c8:	27 e0       	ldi	r18, 0x07	; 7
    30ca:	0b c0       	rjmp	.+22     	; 0x30e2 <vfprintf+0x164>
    30cc:	18 30       	cpi	r17, 0x08	; 8
    30ce:	38 f0       	brcs	.+14     	; 0x30de <vfprintf+0x160>
    30d0:	27 e0       	ldi	r18, 0x07	; 7
    30d2:	17 e0       	ldi	r17, 0x07	; 7
    30d4:	05 c0       	rjmp	.+10     	; 0x30e0 <vfprintf+0x162>
    30d6:	27 e0       	ldi	r18, 0x07	; 7
    30d8:	9c e3       	ldi	r25, 0x3C	; 60
    30da:	49 2e       	mov	r4, r25
    30dc:	02 c0       	rjmp	.+4      	; 0x30e2 <vfprintf+0x164>
    30de:	21 2f       	mov	r18, r17
    30e0:	41 2c       	mov	r4, r1
    30e2:	56 01       	movw	r10, r12
    30e4:	84 e0       	ldi	r24, 0x04	; 4
    30e6:	a8 0e       	add	r10, r24
    30e8:	b1 1c       	adc	r11, r1
    30ea:	f6 01       	movw	r30, r12
    30ec:	60 81       	ld	r22, Z
    30ee:	71 81       	ldd	r23, Z+1	; 0x01
    30f0:	82 81       	ldd	r24, Z+2	; 0x02
    30f2:	93 81       	ldd	r25, Z+3	; 0x03
    30f4:	04 2d       	mov	r16, r4
    30f6:	a3 01       	movw	r20, r6
    30f8:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__ftoa_engine>
    30fc:	6c 01       	movw	r12, r24
    30fe:	f9 81       	ldd	r31, Y+1	; 0x01
    3100:	fc 87       	std	Y+12, r31	; 0x0c
    3102:	f0 ff       	sbrs	r31, 0
    3104:	02 c0       	rjmp	.+4      	; 0x310a <vfprintf+0x18c>
    3106:	f3 ff       	sbrs	r31, 3
    3108:	06 c0       	rjmp	.+12     	; 0x3116 <vfprintf+0x198>
    310a:	91 fc       	sbrc	r9, 1
    310c:	06 c0       	rjmp	.+12     	; 0x311a <vfprintf+0x19c>
    310e:	92 fe       	sbrs	r9, 2
    3110:	06 c0       	rjmp	.+12     	; 0x311e <vfprintf+0x1a0>
    3112:	00 e2       	ldi	r16, 0x20	; 32
    3114:	05 c0       	rjmp	.+10     	; 0x3120 <vfprintf+0x1a2>
    3116:	0d e2       	ldi	r16, 0x2D	; 45
    3118:	03 c0       	rjmp	.+6      	; 0x3120 <vfprintf+0x1a2>
    311a:	0b e2       	ldi	r16, 0x2B	; 43
    311c:	01 c0       	rjmp	.+2      	; 0x3120 <vfprintf+0x1a2>
    311e:	00 e0       	ldi	r16, 0x00	; 0
    3120:	8c 85       	ldd	r24, Y+12	; 0x0c
    3122:	8c 70       	andi	r24, 0x0C	; 12
    3124:	19 f0       	breq	.+6      	; 0x312c <vfprintf+0x1ae>
    3126:	01 11       	cpse	r16, r1
    3128:	5a c2       	rjmp	.+1204   	; 0x35de <vfprintf+0x660>
    312a:	9b c2       	rjmp	.+1334   	; 0x3662 <vfprintf+0x6e4>
    312c:	97 fe       	sbrs	r9, 7
    312e:	10 c0       	rjmp	.+32     	; 0x3150 <vfprintf+0x1d2>
    3130:	4c 0c       	add	r4, r12
    3132:	fc 85       	ldd	r31, Y+12	; 0x0c
    3134:	f4 ff       	sbrs	r31, 4
    3136:	04 c0       	rjmp	.+8      	; 0x3140 <vfprintf+0x1c2>
    3138:	8a 81       	ldd	r24, Y+2	; 0x02
    313a:	81 33       	cpi	r24, 0x31	; 49
    313c:	09 f4       	brne	.+2      	; 0x3140 <vfprintf+0x1c2>
    313e:	4a 94       	dec	r4
    3140:	14 14       	cp	r1, r4
    3142:	74 f5       	brge	.+92     	; 0x31a0 <vfprintf+0x222>
    3144:	28 e0       	ldi	r18, 0x08	; 8
    3146:	24 15       	cp	r18, r4
    3148:	78 f5       	brcc	.+94     	; 0x31a8 <vfprintf+0x22a>
    314a:	88 e0       	ldi	r24, 0x08	; 8
    314c:	48 2e       	mov	r4, r24
    314e:	2c c0       	rjmp	.+88     	; 0x31a8 <vfprintf+0x22a>
    3150:	96 fc       	sbrc	r9, 6
    3152:	2a c0       	rjmp	.+84     	; 0x31a8 <vfprintf+0x22a>
    3154:	81 2f       	mov	r24, r17
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	8c 15       	cp	r24, r12
    315a:	9d 05       	cpc	r25, r13
    315c:	9c f0       	brlt	.+38     	; 0x3184 <vfprintf+0x206>
    315e:	3c ef       	ldi	r19, 0xFC	; 252
    3160:	c3 16       	cp	r12, r19
    3162:	3f ef       	ldi	r19, 0xFF	; 255
    3164:	d3 06       	cpc	r13, r19
    3166:	74 f0       	brlt	.+28     	; 0x3184 <vfprintf+0x206>
    3168:	89 2d       	mov	r24, r9
    316a:	80 68       	ori	r24, 0x80	; 128
    316c:	98 2e       	mov	r9, r24
    316e:	0a c0       	rjmp	.+20     	; 0x3184 <vfprintf+0x206>
    3170:	e2 e0       	ldi	r30, 0x02	; 2
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	ec 0f       	add	r30, r28
    3176:	fd 1f       	adc	r31, r29
    3178:	e1 0f       	add	r30, r17
    317a:	f1 1d       	adc	r31, r1
    317c:	80 81       	ld	r24, Z
    317e:	80 33       	cpi	r24, 0x30	; 48
    3180:	19 f4       	brne	.+6      	; 0x3188 <vfprintf+0x20a>
    3182:	11 50       	subi	r17, 0x01	; 1
    3184:	11 11       	cpse	r17, r1
    3186:	f4 cf       	rjmp	.-24     	; 0x3170 <vfprintf+0x1f2>
    3188:	97 fe       	sbrs	r9, 7
    318a:	0e c0       	rjmp	.+28     	; 0x31a8 <vfprintf+0x22a>
    318c:	44 24       	eor	r4, r4
    318e:	43 94       	inc	r4
    3190:	41 0e       	add	r4, r17
    3192:	81 2f       	mov	r24, r17
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	c8 16       	cp	r12, r24
    3198:	d9 06       	cpc	r13, r25
    319a:	2c f4       	brge	.+10     	; 0x31a6 <vfprintf+0x228>
    319c:	1c 19       	sub	r17, r12
    319e:	04 c0       	rjmp	.+8      	; 0x31a8 <vfprintf+0x22a>
    31a0:	44 24       	eor	r4, r4
    31a2:	43 94       	inc	r4
    31a4:	01 c0       	rjmp	.+2      	; 0x31a8 <vfprintf+0x22a>
    31a6:	10 e0       	ldi	r17, 0x00	; 0
    31a8:	97 fe       	sbrs	r9, 7
    31aa:	06 c0       	rjmp	.+12     	; 0x31b8 <vfprintf+0x23a>
    31ac:	1c 14       	cp	r1, r12
    31ae:	1d 04       	cpc	r1, r13
    31b0:	34 f4       	brge	.+12     	; 0x31be <vfprintf+0x240>
    31b2:	c6 01       	movw	r24, r12
    31b4:	01 96       	adiw	r24, 0x01	; 1
    31b6:	05 c0       	rjmp	.+10     	; 0x31c2 <vfprintf+0x244>
    31b8:	85 e0       	ldi	r24, 0x05	; 5
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	02 c0       	rjmp	.+4      	; 0x31c2 <vfprintf+0x244>
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	01 11       	cpse	r16, r1
    31c4:	01 96       	adiw	r24, 0x01	; 1
    31c6:	11 23       	and	r17, r17
    31c8:	31 f0       	breq	.+12     	; 0x31d6 <vfprintf+0x258>
    31ca:	21 2f       	mov	r18, r17
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	2f 5f       	subi	r18, 0xFF	; 255
    31d0:	3f 4f       	sbci	r19, 0xFF	; 255
    31d2:	82 0f       	add	r24, r18
    31d4:	93 1f       	adc	r25, r19
    31d6:	25 2d       	mov	r18, r5
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	82 17       	cp	r24, r18
    31dc:	93 07       	cpc	r25, r19
    31de:	14 f4       	brge	.+4      	; 0x31e4 <vfprintf+0x266>
    31e0:	58 1a       	sub	r5, r24
    31e2:	01 c0       	rjmp	.+2      	; 0x31e6 <vfprintf+0x268>
    31e4:	51 2c       	mov	r5, r1
    31e6:	89 2d       	mov	r24, r9
    31e8:	89 70       	andi	r24, 0x09	; 9
    31ea:	49 f4       	brne	.+18     	; 0x31fe <vfprintf+0x280>
    31ec:	55 20       	and	r5, r5
    31ee:	39 f0       	breq	.+14     	; 0x31fe <vfprintf+0x280>
    31f0:	b7 01       	movw	r22, r14
    31f2:	80 e2       	ldi	r24, 0x20	; 32
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    31fa:	5a 94       	dec	r5
    31fc:	f7 cf       	rjmp	.-18     	; 0x31ec <vfprintf+0x26e>
    31fe:	00 23       	and	r16, r16
    3200:	29 f0       	breq	.+10     	; 0x320c <vfprintf+0x28e>
    3202:	b7 01       	movw	r22, r14
    3204:	80 2f       	mov	r24, r16
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    320c:	93 fc       	sbrc	r9, 3
    320e:	09 c0       	rjmp	.+18     	; 0x3222 <vfprintf+0x2a4>
    3210:	55 20       	and	r5, r5
    3212:	39 f0       	breq	.+14     	; 0x3222 <vfprintf+0x2a4>
    3214:	b7 01       	movw	r22, r14
    3216:	80 e3       	ldi	r24, 0x30	; 48
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    321e:	5a 94       	dec	r5
    3220:	f7 cf       	rjmp	.-18     	; 0x3210 <vfprintf+0x292>
    3222:	97 fe       	sbrs	r9, 7
    3224:	4c c0       	rjmp	.+152    	; 0x32be <vfprintf+0x340>
    3226:	46 01       	movw	r8, r12
    3228:	d7 fe       	sbrs	r13, 7
    322a:	02 c0       	rjmp	.+4      	; 0x3230 <vfprintf+0x2b2>
    322c:	81 2c       	mov	r8, r1
    322e:	91 2c       	mov	r9, r1
    3230:	c6 01       	movw	r24, r12
    3232:	88 19       	sub	r24, r8
    3234:	99 09       	sbc	r25, r9
    3236:	f3 01       	movw	r30, r6
    3238:	e8 0f       	add	r30, r24
    323a:	f9 1f       	adc	r31, r25
    323c:	ed 87       	std	Y+13, r30	; 0x0d
    323e:	fe 87       	std	Y+14, r31	; 0x0e
    3240:	96 01       	movw	r18, r12
    3242:	24 19       	sub	r18, r4
    3244:	31 09       	sbc	r19, r1
    3246:	2f 87       	std	Y+15, r18	; 0x0f
    3248:	38 8b       	std	Y+16, r19	; 0x10
    324a:	01 2f       	mov	r16, r17
    324c:	10 e0       	ldi	r17, 0x00	; 0
    324e:	11 95       	neg	r17
    3250:	01 95       	neg	r16
    3252:	11 09       	sbc	r17, r1
    3254:	3f ef       	ldi	r19, 0xFF	; 255
    3256:	83 16       	cp	r8, r19
    3258:	93 06       	cpc	r9, r19
    325a:	29 f4       	brne	.+10     	; 0x3266 <vfprintf+0x2e8>
    325c:	b7 01       	movw	r22, r14
    325e:	8e e2       	ldi	r24, 0x2E	; 46
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    3266:	c8 14       	cp	r12, r8
    3268:	d9 04       	cpc	r13, r9
    326a:	4c f0       	brlt	.+18     	; 0x327e <vfprintf+0x300>
    326c:	8f 85       	ldd	r24, Y+15	; 0x0f
    326e:	98 89       	ldd	r25, Y+16	; 0x10
    3270:	88 15       	cp	r24, r8
    3272:	99 05       	cpc	r25, r9
    3274:	24 f4       	brge	.+8      	; 0x327e <vfprintf+0x300>
    3276:	ed 85       	ldd	r30, Y+13	; 0x0d
    3278:	fe 85       	ldd	r31, Y+14	; 0x0e
    327a:	81 81       	ldd	r24, Z+1	; 0x01
    327c:	01 c0       	rjmp	.+2      	; 0x3280 <vfprintf+0x302>
    327e:	80 e3       	ldi	r24, 0x30	; 48
    3280:	f1 e0       	ldi	r31, 0x01	; 1
    3282:	8f 1a       	sub	r8, r31
    3284:	91 08       	sbc	r9, r1
    3286:	2d 85       	ldd	r18, Y+13	; 0x0d
    3288:	3e 85       	ldd	r19, Y+14	; 0x0e
    328a:	2f 5f       	subi	r18, 0xFF	; 255
    328c:	3f 4f       	sbci	r19, 0xFF	; 255
    328e:	2d 87       	std	Y+13, r18	; 0x0d
    3290:	3e 87       	std	Y+14, r19	; 0x0e
    3292:	80 16       	cp	r8, r16
    3294:	91 06       	cpc	r9, r17
    3296:	2c f0       	brlt	.+10     	; 0x32a2 <vfprintf+0x324>
    3298:	b7 01       	movw	r22, r14
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    32a0:	d9 cf       	rjmp	.-78     	; 0x3254 <vfprintf+0x2d6>
    32a2:	c8 14       	cp	r12, r8
    32a4:	d9 04       	cpc	r13, r9
    32a6:	41 f4       	brne	.+16     	; 0x32b8 <vfprintf+0x33a>
    32a8:	9a 81       	ldd	r25, Y+2	; 0x02
    32aa:	96 33       	cpi	r25, 0x36	; 54
    32ac:	20 f4       	brcc	.+8      	; 0x32b6 <vfprintf+0x338>
    32ae:	95 33       	cpi	r25, 0x35	; 53
    32b0:	19 f4       	brne	.+6      	; 0x32b8 <vfprintf+0x33a>
    32b2:	3c 85       	ldd	r19, Y+12	; 0x0c
    32b4:	34 ff       	sbrs	r19, 4
    32b6:	81 e3       	ldi	r24, 0x31	; 49
    32b8:	b7 01       	movw	r22, r14
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	4e c0       	rjmp	.+156    	; 0x335a <vfprintf+0x3dc>
    32be:	8a 81       	ldd	r24, Y+2	; 0x02
    32c0:	81 33       	cpi	r24, 0x31	; 49
    32c2:	19 f0       	breq	.+6      	; 0x32ca <vfprintf+0x34c>
    32c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    32c6:	9f 7e       	andi	r25, 0xEF	; 239
    32c8:	9c 87       	std	Y+12, r25	; 0x0c
    32ca:	b7 01       	movw	r22, r14
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    32d2:	11 11       	cpse	r17, r1
    32d4:	05 c0       	rjmp	.+10     	; 0x32e0 <vfprintf+0x362>
    32d6:	94 fc       	sbrc	r9, 4
    32d8:	18 c0       	rjmp	.+48     	; 0x330a <vfprintf+0x38c>
    32da:	85 e6       	ldi	r24, 0x65	; 101
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	17 c0       	rjmp	.+46     	; 0x330e <vfprintf+0x390>
    32e0:	b7 01       	movw	r22, r14
    32e2:	8e e2       	ldi	r24, 0x2E	; 46
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    32ea:	1e 5f       	subi	r17, 0xFE	; 254
    32ec:	82 e0       	ldi	r24, 0x02	; 2
    32ee:	01 e0       	ldi	r16, 0x01	; 1
    32f0:	08 0f       	add	r16, r24
    32f2:	f3 01       	movw	r30, r6
    32f4:	e8 0f       	add	r30, r24
    32f6:	f1 1d       	adc	r31, r1
    32f8:	80 81       	ld	r24, Z
    32fa:	b7 01       	movw	r22, r14
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    3302:	80 2f       	mov	r24, r16
    3304:	01 13       	cpse	r16, r17
    3306:	f3 cf       	rjmp	.-26     	; 0x32ee <vfprintf+0x370>
    3308:	e6 cf       	rjmp	.-52     	; 0x32d6 <vfprintf+0x358>
    330a:	85 e4       	ldi	r24, 0x45	; 69
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	b7 01       	movw	r22, r14
    3310:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    3314:	d7 fc       	sbrc	r13, 7
    3316:	06 c0       	rjmp	.+12     	; 0x3324 <vfprintf+0x3a6>
    3318:	c1 14       	cp	r12, r1
    331a:	d1 04       	cpc	r13, r1
    331c:	41 f4       	brne	.+16     	; 0x332e <vfprintf+0x3b0>
    331e:	ec 85       	ldd	r30, Y+12	; 0x0c
    3320:	e4 ff       	sbrs	r30, 4
    3322:	05 c0       	rjmp	.+10     	; 0x332e <vfprintf+0x3b0>
    3324:	d1 94       	neg	r13
    3326:	c1 94       	neg	r12
    3328:	d1 08       	sbc	r13, r1
    332a:	8d e2       	ldi	r24, 0x2D	; 45
    332c:	01 c0       	rjmp	.+2      	; 0x3330 <vfprintf+0x3b2>
    332e:	8b e2       	ldi	r24, 0x2B	; 43
    3330:	b7 01       	movw	r22, r14
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    3338:	80 e3       	ldi	r24, 0x30	; 48
    333a:	2a e0       	ldi	r18, 0x0A	; 10
    333c:	c2 16       	cp	r12, r18
    333e:	d1 04       	cpc	r13, r1
    3340:	2c f0       	brlt	.+10     	; 0x334c <vfprintf+0x3ce>
    3342:	8f 5f       	subi	r24, 0xFF	; 255
    3344:	fa e0       	ldi	r31, 0x0A	; 10
    3346:	cf 1a       	sub	r12, r31
    3348:	d1 08       	sbc	r13, r1
    334a:	f7 cf       	rjmp	.-18     	; 0x333a <vfprintf+0x3bc>
    334c:	b7 01       	movw	r22, r14
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    3354:	b7 01       	movw	r22, r14
    3356:	c6 01       	movw	r24, r12
    3358:	c0 96       	adiw	r24, 0x30	; 48
    335a:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    335e:	54 c1       	rjmp	.+680    	; 0x3608 <vfprintf+0x68a>
    3360:	83 36       	cpi	r24, 0x63	; 99
    3362:	31 f0       	breq	.+12     	; 0x3370 <vfprintf+0x3f2>
    3364:	83 37       	cpi	r24, 0x73	; 115
    3366:	79 f0       	breq	.+30     	; 0x3386 <vfprintf+0x408>
    3368:	83 35       	cpi	r24, 0x53	; 83
    336a:	09 f0       	breq	.+2      	; 0x336e <vfprintf+0x3f0>
    336c:	56 c0       	rjmp	.+172    	; 0x341a <vfprintf+0x49c>
    336e:	20 c0       	rjmp	.+64     	; 0x33b0 <vfprintf+0x432>
    3370:	56 01       	movw	r10, r12
    3372:	32 e0       	ldi	r19, 0x02	; 2
    3374:	a3 0e       	add	r10, r19
    3376:	b1 1c       	adc	r11, r1
    3378:	f6 01       	movw	r30, r12
    337a:	80 81       	ld	r24, Z
    337c:	89 83       	std	Y+1, r24	; 0x01
    337e:	01 e0       	ldi	r16, 0x01	; 1
    3380:	10 e0       	ldi	r17, 0x00	; 0
    3382:	63 01       	movw	r12, r6
    3384:	12 c0       	rjmp	.+36     	; 0x33aa <vfprintf+0x42c>
    3386:	56 01       	movw	r10, r12
    3388:	f2 e0       	ldi	r31, 0x02	; 2
    338a:	af 0e       	add	r10, r31
    338c:	b1 1c       	adc	r11, r1
    338e:	f6 01       	movw	r30, r12
    3390:	c0 80       	ld	r12, Z
    3392:	d1 80       	ldd	r13, Z+1	; 0x01
    3394:	96 fe       	sbrs	r9, 6
    3396:	03 c0       	rjmp	.+6      	; 0x339e <vfprintf+0x420>
    3398:	61 2f       	mov	r22, r17
    339a:	70 e0       	ldi	r23, 0x00	; 0
    339c:	02 c0       	rjmp	.+4      	; 0x33a2 <vfprintf+0x424>
    339e:	6f ef       	ldi	r22, 0xFF	; 255
    33a0:	7f ef       	ldi	r23, 0xFF	; 255
    33a2:	c6 01       	movw	r24, r12
    33a4:	0e 94 90 1c 	call	0x3920	; 0x3920 <strnlen>
    33a8:	8c 01       	movw	r16, r24
    33aa:	f9 2d       	mov	r31, r9
    33ac:	ff 77       	andi	r31, 0x7F	; 127
    33ae:	14 c0       	rjmp	.+40     	; 0x33d8 <vfprintf+0x45a>
    33b0:	56 01       	movw	r10, r12
    33b2:	22 e0       	ldi	r18, 0x02	; 2
    33b4:	a2 0e       	add	r10, r18
    33b6:	b1 1c       	adc	r11, r1
    33b8:	f6 01       	movw	r30, r12
    33ba:	c0 80       	ld	r12, Z
    33bc:	d1 80       	ldd	r13, Z+1	; 0x01
    33be:	96 fe       	sbrs	r9, 6
    33c0:	03 c0       	rjmp	.+6      	; 0x33c8 <vfprintf+0x44a>
    33c2:	61 2f       	mov	r22, r17
    33c4:	70 e0       	ldi	r23, 0x00	; 0
    33c6:	02 c0       	rjmp	.+4      	; 0x33cc <vfprintf+0x44e>
    33c8:	6f ef       	ldi	r22, 0xFF	; 255
    33ca:	7f ef       	ldi	r23, 0xFF	; 255
    33cc:	c6 01       	movw	r24, r12
    33ce:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <strnlen_P>
    33d2:	8c 01       	movw	r16, r24
    33d4:	f9 2d       	mov	r31, r9
    33d6:	f0 68       	ori	r31, 0x80	; 128
    33d8:	9f 2e       	mov	r9, r31
    33da:	f3 fd       	sbrc	r31, 3
    33dc:	1a c0       	rjmp	.+52     	; 0x3412 <vfprintf+0x494>
    33de:	85 2d       	mov	r24, r5
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	08 17       	cp	r16, r24
    33e4:	19 07       	cpc	r17, r25
    33e6:	a8 f4       	brcc	.+42     	; 0x3412 <vfprintf+0x494>
    33e8:	b7 01       	movw	r22, r14
    33ea:	80 e2       	ldi	r24, 0x20	; 32
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    33f2:	5a 94       	dec	r5
    33f4:	f4 cf       	rjmp	.-24     	; 0x33de <vfprintf+0x460>
    33f6:	f6 01       	movw	r30, r12
    33f8:	97 fc       	sbrc	r9, 7
    33fa:	85 91       	lpm	r24, Z+
    33fc:	97 fe       	sbrs	r9, 7
    33fe:	81 91       	ld	r24, Z+
    3400:	6f 01       	movw	r12, r30
    3402:	b7 01       	movw	r22, r14
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    340a:	51 10       	cpse	r5, r1
    340c:	5a 94       	dec	r5
    340e:	01 50       	subi	r16, 0x01	; 1
    3410:	11 09       	sbc	r17, r1
    3412:	01 15       	cp	r16, r1
    3414:	11 05       	cpc	r17, r1
    3416:	79 f7       	brne	.-34     	; 0x33f6 <vfprintf+0x478>
    3418:	f7 c0       	rjmp	.+494    	; 0x3608 <vfprintf+0x68a>
    341a:	84 36       	cpi	r24, 0x64	; 100
    341c:	11 f0       	breq	.+4      	; 0x3422 <vfprintf+0x4a4>
    341e:	89 36       	cpi	r24, 0x69	; 105
    3420:	61 f5       	brne	.+88     	; 0x347a <vfprintf+0x4fc>
    3422:	56 01       	movw	r10, r12
    3424:	97 fe       	sbrs	r9, 7
    3426:	09 c0       	rjmp	.+18     	; 0x343a <vfprintf+0x4bc>
    3428:	24 e0       	ldi	r18, 0x04	; 4
    342a:	a2 0e       	add	r10, r18
    342c:	b1 1c       	adc	r11, r1
    342e:	f6 01       	movw	r30, r12
    3430:	60 81       	ld	r22, Z
    3432:	71 81       	ldd	r23, Z+1	; 0x01
    3434:	82 81       	ldd	r24, Z+2	; 0x02
    3436:	93 81       	ldd	r25, Z+3	; 0x03
    3438:	0a c0       	rjmp	.+20     	; 0x344e <vfprintf+0x4d0>
    343a:	f2 e0       	ldi	r31, 0x02	; 2
    343c:	af 0e       	add	r10, r31
    343e:	b1 1c       	adc	r11, r1
    3440:	f6 01       	movw	r30, r12
    3442:	60 81       	ld	r22, Z
    3444:	71 81       	ldd	r23, Z+1	; 0x01
    3446:	07 2e       	mov	r0, r23
    3448:	00 0c       	add	r0, r0
    344a:	88 0b       	sbc	r24, r24
    344c:	99 0b       	sbc	r25, r25
    344e:	f9 2d       	mov	r31, r9
    3450:	ff 76       	andi	r31, 0x6F	; 111
    3452:	9f 2e       	mov	r9, r31
    3454:	97 ff       	sbrs	r25, 7
    3456:	09 c0       	rjmp	.+18     	; 0x346a <vfprintf+0x4ec>
    3458:	90 95       	com	r25
    345a:	80 95       	com	r24
    345c:	70 95       	com	r23
    345e:	61 95       	neg	r22
    3460:	7f 4f       	sbci	r23, 0xFF	; 255
    3462:	8f 4f       	sbci	r24, 0xFF	; 255
    3464:	9f 4f       	sbci	r25, 0xFF	; 255
    3466:	f0 68       	ori	r31, 0x80	; 128
    3468:	9f 2e       	mov	r9, r31
    346a:	2a e0       	ldi	r18, 0x0A	; 10
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	a3 01       	movw	r20, r6
    3470:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__ultoa_invert>
    3474:	c8 2e       	mov	r12, r24
    3476:	c6 18       	sub	r12, r6
    3478:	3f c0       	rjmp	.+126    	; 0x34f8 <vfprintf+0x57a>
    347a:	09 2d       	mov	r16, r9
    347c:	85 37       	cpi	r24, 0x75	; 117
    347e:	21 f4       	brne	.+8      	; 0x3488 <vfprintf+0x50a>
    3480:	0f 7e       	andi	r16, 0xEF	; 239
    3482:	2a e0       	ldi	r18, 0x0A	; 10
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	1d c0       	rjmp	.+58     	; 0x34c2 <vfprintf+0x544>
    3488:	09 7f       	andi	r16, 0xF9	; 249
    348a:	8f 36       	cpi	r24, 0x6F	; 111
    348c:	91 f0       	breq	.+36     	; 0x34b2 <vfprintf+0x534>
    348e:	18 f4       	brcc	.+6      	; 0x3496 <vfprintf+0x518>
    3490:	88 35       	cpi	r24, 0x58	; 88
    3492:	59 f0       	breq	.+22     	; 0x34aa <vfprintf+0x52c>
    3494:	c3 c0       	rjmp	.+390    	; 0x361c <vfprintf+0x69e>
    3496:	80 37       	cpi	r24, 0x70	; 112
    3498:	19 f0       	breq	.+6      	; 0x34a0 <vfprintf+0x522>
    349a:	88 37       	cpi	r24, 0x78	; 120
    349c:	11 f0       	breq	.+4      	; 0x34a2 <vfprintf+0x524>
    349e:	be c0       	rjmp	.+380    	; 0x361c <vfprintf+0x69e>
    34a0:	00 61       	ori	r16, 0x10	; 16
    34a2:	04 ff       	sbrs	r16, 4
    34a4:	09 c0       	rjmp	.+18     	; 0x34b8 <vfprintf+0x53a>
    34a6:	04 60       	ori	r16, 0x04	; 4
    34a8:	07 c0       	rjmp	.+14     	; 0x34b8 <vfprintf+0x53a>
    34aa:	94 fe       	sbrs	r9, 4
    34ac:	08 c0       	rjmp	.+16     	; 0x34be <vfprintf+0x540>
    34ae:	06 60       	ori	r16, 0x06	; 6
    34b0:	06 c0       	rjmp	.+12     	; 0x34be <vfprintf+0x540>
    34b2:	28 e0       	ldi	r18, 0x08	; 8
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	05 c0       	rjmp	.+10     	; 0x34c2 <vfprintf+0x544>
    34b8:	20 e1       	ldi	r18, 0x10	; 16
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	02 c0       	rjmp	.+4      	; 0x34c2 <vfprintf+0x544>
    34be:	20 e1       	ldi	r18, 0x10	; 16
    34c0:	32 e0       	ldi	r19, 0x02	; 2
    34c2:	56 01       	movw	r10, r12
    34c4:	07 ff       	sbrs	r16, 7
    34c6:	09 c0       	rjmp	.+18     	; 0x34da <vfprintf+0x55c>
    34c8:	84 e0       	ldi	r24, 0x04	; 4
    34ca:	a8 0e       	add	r10, r24
    34cc:	b1 1c       	adc	r11, r1
    34ce:	f6 01       	movw	r30, r12
    34d0:	60 81       	ld	r22, Z
    34d2:	71 81       	ldd	r23, Z+1	; 0x01
    34d4:	82 81       	ldd	r24, Z+2	; 0x02
    34d6:	93 81       	ldd	r25, Z+3	; 0x03
    34d8:	08 c0       	rjmp	.+16     	; 0x34ea <vfprintf+0x56c>
    34da:	f2 e0       	ldi	r31, 0x02	; 2
    34dc:	af 0e       	add	r10, r31
    34de:	b1 1c       	adc	r11, r1
    34e0:	f6 01       	movw	r30, r12
    34e2:	60 81       	ld	r22, Z
    34e4:	71 81       	ldd	r23, Z+1	; 0x01
    34e6:	80 e0       	ldi	r24, 0x00	; 0
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	a3 01       	movw	r20, r6
    34ec:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__ultoa_invert>
    34f0:	c8 2e       	mov	r12, r24
    34f2:	c6 18       	sub	r12, r6
    34f4:	0f 77       	andi	r16, 0x7F	; 127
    34f6:	90 2e       	mov	r9, r16
    34f8:	96 fe       	sbrs	r9, 6
    34fa:	0b c0       	rjmp	.+22     	; 0x3512 <vfprintf+0x594>
    34fc:	09 2d       	mov	r16, r9
    34fe:	0e 7f       	andi	r16, 0xFE	; 254
    3500:	c1 16       	cp	r12, r17
    3502:	50 f4       	brcc	.+20     	; 0x3518 <vfprintf+0x59a>
    3504:	94 fe       	sbrs	r9, 4
    3506:	0a c0       	rjmp	.+20     	; 0x351c <vfprintf+0x59e>
    3508:	92 fc       	sbrc	r9, 2
    350a:	08 c0       	rjmp	.+16     	; 0x351c <vfprintf+0x59e>
    350c:	09 2d       	mov	r16, r9
    350e:	0e 7e       	andi	r16, 0xEE	; 238
    3510:	05 c0       	rjmp	.+10     	; 0x351c <vfprintf+0x59e>
    3512:	dc 2c       	mov	r13, r12
    3514:	09 2d       	mov	r16, r9
    3516:	03 c0       	rjmp	.+6      	; 0x351e <vfprintf+0x5a0>
    3518:	dc 2c       	mov	r13, r12
    351a:	01 c0       	rjmp	.+2      	; 0x351e <vfprintf+0x5a0>
    351c:	d1 2e       	mov	r13, r17
    351e:	04 ff       	sbrs	r16, 4
    3520:	0d c0       	rjmp	.+26     	; 0x353c <vfprintf+0x5be>
    3522:	fe 01       	movw	r30, r28
    3524:	ec 0d       	add	r30, r12
    3526:	f1 1d       	adc	r31, r1
    3528:	80 81       	ld	r24, Z
    352a:	80 33       	cpi	r24, 0x30	; 48
    352c:	11 f4       	brne	.+4      	; 0x3532 <vfprintf+0x5b4>
    352e:	09 7e       	andi	r16, 0xE9	; 233
    3530:	09 c0       	rjmp	.+18     	; 0x3544 <vfprintf+0x5c6>
    3532:	02 ff       	sbrs	r16, 2
    3534:	06 c0       	rjmp	.+12     	; 0x3542 <vfprintf+0x5c4>
    3536:	d3 94       	inc	r13
    3538:	d3 94       	inc	r13
    353a:	04 c0       	rjmp	.+8      	; 0x3544 <vfprintf+0x5c6>
    353c:	80 2f       	mov	r24, r16
    353e:	86 78       	andi	r24, 0x86	; 134
    3540:	09 f0       	breq	.+2      	; 0x3544 <vfprintf+0x5c6>
    3542:	d3 94       	inc	r13
    3544:	03 fd       	sbrc	r16, 3
    3546:	11 c0       	rjmp	.+34     	; 0x356a <vfprintf+0x5ec>
    3548:	00 ff       	sbrs	r16, 0
    354a:	06 c0       	rjmp	.+12     	; 0x3558 <vfprintf+0x5da>
    354c:	1c 2d       	mov	r17, r12
    354e:	d5 14       	cp	r13, r5
    3550:	80 f4       	brcc	.+32     	; 0x3572 <vfprintf+0x5f4>
    3552:	15 0d       	add	r17, r5
    3554:	1d 19       	sub	r17, r13
    3556:	0d c0       	rjmp	.+26     	; 0x3572 <vfprintf+0x5f4>
    3558:	d5 14       	cp	r13, r5
    355a:	58 f4       	brcc	.+22     	; 0x3572 <vfprintf+0x5f4>
    355c:	b7 01       	movw	r22, r14
    355e:	80 e2       	ldi	r24, 0x20	; 32
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    3566:	d3 94       	inc	r13
    3568:	f7 cf       	rjmp	.-18     	; 0x3558 <vfprintf+0x5da>
    356a:	d5 14       	cp	r13, r5
    356c:	10 f4       	brcc	.+4      	; 0x3572 <vfprintf+0x5f4>
    356e:	5d 18       	sub	r5, r13
    3570:	01 c0       	rjmp	.+2      	; 0x3574 <vfprintf+0x5f6>
    3572:	51 2c       	mov	r5, r1
    3574:	04 ff       	sbrs	r16, 4
    3576:	10 c0       	rjmp	.+32     	; 0x3598 <vfprintf+0x61a>
    3578:	b7 01       	movw	r22, r14
    357a:	80 e3       	ldi	r24, 0x30	; 48
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    3582:	02 ff       	sbrs	r16, 2
    3584:	17 c0       	rjmp	.+46     	; 0x35b4 <vfprintf+0x636>
    3586:	01 fd       	sbrc	r16, 1
    3588:	03 c0       	rjmp	.+6      	; 0x3590 <vfprintf+0x612>
    358a:	88 e7       	ldi	r24, 0x78	; 120
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	02 c0       	rjmp	.+4      	; 0x3594 <vfprintf+0x616>
    3590:	88 e5       	ldi	r24, 0x58	; 88
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	b7 01       	movw	r22, r14
    3596:	0c c0       	rjmp	.+24     	; 0x35b0 <vfprintf+0x632>
    3598:	80 2f       	mov	r24, r16
    359a:	86 78       	andi	r24, 0x86	; 134
    359c:	59 f0       	breq	.+22     	; 0x35b4 <vfprintf+0x636>
    359e:	01 ff       	sbrs	r16, 1
    35a0:	02 c0       	rjmp	.+4      	; 0x35a6 <vfprintf+0x628>
    35a2:	8b e2       	ldi	r24, 0x2B	; 43
    35a4:	01 c0       	rjmp	.+2      	; 0x35a8 <vfprintf+0x62a>
    35a6:	80 e2       	ldi	r24, 0x20	; 32
    35a8:	07 fd       	sbrc	r16, 7
    35aa:	8d e2       	ldi	r24, 0x2D	; 45
    35ac:	b7 01       	movw	r22, r14
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    35b4:	c1 16       	cp	r12, r17
    35b6:	38 f4       	brcc	.+14     	; 0x35c6 <vfprintf+0x648>
    35b8:	b7 01       	movw	r22, r14
    35ba:	80 e3       	ldi	r24, 0x30	; 48
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    35c2:	11 50       	subi	r17, 0x01	; 1
    35c4:	f7 cf       	rjmp	.-18     	; 0x35b4 <vfprintf+0x636>
    35c6:	ca 94       	dec	r12
    35c8:	f3 01       	movw	r30, r6
    35ca:	ec 0d       	add	r30, r12
    35cc:	f1 1d       	adc	r31, r1
    35ce:	80 81       	ld	r24, Z
    35d0:	b7 01       	movw	r22, r14
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    35d8:	c1 10       	cpse	r12, r1
    35da:	f5 cf       	rjmp	.-22     	; 0x35c6 <vfprintf+0x648>
    35dc:	15 c0       	rjmp	.+42     	; 0x3608 <vfprintf+0x68a>
    35de:	f4 e0       	ldi	r31, 0x04	; 4
    35e0:	f5 15       	cp	r31, r5
    35e2:	60 f5       	brcc	.+88     	; 0x363c <vfprintf+0x6be>
    35e4:	84 e0       	ldi	r24, 0x04	; 4
    35e6:	58 1a       	sub	r5, r24
    35e8:	93 fe       	sbrs	r9, 3
    35ea:	1f c0       	rjmp	.+62     	; 0x362a <vfprintf+0x6ac>
    35ec:	01 11       	cpse	r16, r1
    35ee:	27 c0       	rjmp	.+78     	; 0x363e <vfprintf+0x6c0>
    35f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    35f2:	23 ff       	sbrs	r18, 3
    35f4:	2a c0       	rjmp	.+84     	; 0x364a <vfprintf+0x6cc>
    35f6:	0a e0       	ldi	r16, 0x0A	; 10
    35f8:	11 e0       	ldi	r17, 0x01	; 1
    35fa:	39 2d       	mov	r19, r9
    35fc:	30 71       	andi	r19, 0x10	; 16
    35fe:	93 2e       	mov	r9, r19
    3600:	f8 01       	movw	r30, r16
    3602:	84 91       	lpm	r24, Z
    3604:	81 11       	cpse	r24, r1
    3606:	24 c0       	rjmp	.+72     	; 0x3650 <vfprintf+0x6d2>
    3608:	55 20       	and	r5, r5
    360a:	09 f4       	brne	.+2      	; 0x360e <vfprintf+0x690>
    360c:	e4 cc       	rjmp	.-1592   	; 0x2fd6 <vfprintf+0x58>
    360e:	b7 01       	movw	r22, r14
    3610:	80 e2       	ldi	r24, 0x20	; 32
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    3618:	5a 94       	dec	r5
    361a:	f6 cf       	rjmp	.-20     	; 0x3608 <vfprintf+0x68a>
    361c:	f7 01       	movw	r30, r14
    361e:	86 81       	ldd	r24, Z+6	; 0x06
    3620:	97 81       	ldd	r25, Z+7	; 0x07
    3622:	26 c0       	rjmp	.+76     	; 0x3670 <vfprintf+0x6f2>
    3624:	8f ef       	ldi	r24, 0xFF	; 255
    3626:	9f ef       	ldi	r25, 0xFF	; 255
    3628:	23 c0       	rjmp	.+70     	; 0x3670 <vfprintf+0x6f2>
    362a:	b7 01       	movw	r22, r14
    362c:	80 e2       	ldi	r24, 0x20	; 32
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    3634:	5a 94       	dec	r5
    3636:	51 10       	cpse	r5, r1
    3638:	f8 cf       	rjmp	.-16     	; 0x362a <vfprintf+0x6ac>
    363a:	d8 cf       	rjmp	.-80     	; 0x35ec <vfprintf+0x66e>
    363c:	51 2c       	mov	r5, r1
    363e:	b7 01       	movw	r22, r14
    3640:	80 2f       	mov	r24, r16
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    3648:	d3 cf       	rjmp	.-90     	; 0x35f0 <vfprintf+0x672>
    364a:	0e e0       	ldi	r16, 0x0E	; 14
    364c:	11 e0       	ldi	r17, 0x01	; 1
    364e:	d5 cf       	rjmp	.-86     	; 0x35fa <vfprintf+0x67c>
    3650:	91 10       	cpse	r9, r1
    3652:	80 52       	subi	r24, 0x20	; 32
    3654:	b7 01       	movw	r22, r14
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	0e 94 9b 1c 	call	0x3936	; 0x3936 <fputc>
    365c:	0f 5f       	subi	r16, 0xFF	; 255
    365e:	1f 4f       	sbci	r17, 0xFF	; 255
    3660:	cf cf       	rjmp	.-98     	; 0x3600 <vfprintf+0x682>
    3662:	23 e0       	ldi	r18, 0x03	; 3
    3664:	25 15       	cp	r18, r5
    3666:	10 f4       	brcc	.+4      	; 0x366c <vfprintf+0x6ee>
    3668:	83 e0       	ldi	r24, 0x03	; 3
    366a:	bd cf       	rjmp	.-134    	; 0x35e6 <vfprintf+0x668>
    366c:	51 2c       	mov	r5, r1
    366e:	c0 cf       	rjmp	.-128    	; 0x35f0 <vfprintf+0x672>
    3670:	60 96       	adiw	r28, 0x10	; 16
    3672:	e2 e1       	ldi	r30, 0x12	; 18
    3674:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <__epilogue_restores__>

00003678 <__divmodhi4>:
    3678:	97 fb       	bst	r25, 7
    367a:	07 2e       	mov	r0, r23
    367c:	16 f4       	brtc	.+4      	; 0x3682 <__divmodhi4+0xa>
    367e:	00 94       	com	r0
    3680:	07 d0       	rcall	.+14     	; 0x3690 <__divmodhi4_neg1>
    3682:	77 fd       	sbrc	r23, 7
    3684:	09 d0       	rcall	.+18     	; 0x3698 <__divmodhi4_neg2>
    3686:	0e 94 87 1b 	call	0x370e	; 0x370e <__udivmodhi4>
    368a:	07 fc       	sbrc	r0, 7
    368c:	05 d0       	rcall	.+10     	; 0x3698 <__divmodhi4_neg2>
    368e:	3e f4       	brtc	.+14     	; 0x369e <__divmodhi4_exit>

00003690 <__divmodhi4_neg1>:
    3690:	90 95       	com	r25
    3692:	81 95       	neg	r24
    3694:	9f 4f       	sbci	r25, 0xFF	; 255
    3696:	08 95       	ret

00003698 <__divmodhi4_neg2>:
    3698:	70 95       	com	r23
    369a:	61 95       	neg	r22
    369c:	7f 4f       	sbci	r23, 0xFF	; 255

0000369e <__divmodhi4_exit>:
    369e:	08 95       	ret

000036a0 <__tablejump2__>:
    36a0:	ee 0f       	add	r30, r30
    36a2:	ff 1f       	adc	r31, r31
    36a4:	05 90       	lpm	r0, Z+
    36a6:	f4 91       	lpm	r31, Z
    36a8:	e0 2d       	mov	r30, r0
    36aa:	09 94       	ijmp

000036ac <__prologue_saves__>:
    36ac:	2f 92       	push	r2
    36ae:	3f 92       	push	r3
    36b0:	4f 92       	push	r4
    36b2:	5f 92       	push	r5
    36b4:	6f 92       	push	r6
    36b6:	7f 92       	push	r7
    36b8:	8f 92       	push	r8
    36ba:	9f 92       	push	r9
    36bc:	af 92       	push	r10
    36be:	bf 92       	push	r11
    36c0:	cf 92       	push	r12
    36c2:	df 92       	push	r13
    36c4:	ef 92       	push	r14
    36c6:	ff 92       	push	r15
    36c8:	0f 93       	push	r16
    36ca:	1f 93       	push	r17
    36cc:	cf 93       	push	r28
    36ce:	df 93       	push	r29
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
    36d4:	ca 1b       	sub	r28, r26
    36d6:	db 0b       	sbc	r29, r27
    36d8:	cd bf       	out	0x3d, r28	; 61
    36da:	de bf       	out	0x3e, r29	; 62
    36dc:	09 94       	ijmp

000036de <__epilogue_restores__>:
    36de:	2a 88       	ldd	r2, Y+18	; 0x12
    36e0:	39 88       	ldd	r3, Y+17	; 0x11
    36e2:	48 88       	ldd	r4, Y+16	; 0x10
    36e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    36e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    36e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    36ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    36ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    36ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    36f0:	b9 84       	ldd	r11, Y+9	; 0x09
    36f2:	c8 84       	ldd	r12, Y+8	; 0x08
    36f4:	df 80       	ldd	r13, Y+7	; 0x07
    36f6:	ee 80       	ldd	r14, Y+6	; 0x06
    36f8:	fd 80       	ldd	r15, Y+5	; 0x05
    36fa:	0c 81       	ldd	r16, Y+4	; 0x04
    36fc:	1b 81       	ldd	r17, Y+3	; 0x03
    36fe:	aa 81       	ldd	r26, Y+2	; 0x02
    3700:	b9 81       	ldd	r27, Y+1	; 0x01
    3702:	ce 0f       	add	r28, r30
    3704:	d1 1d       	adc	r29, r1
    3706:	cd bf       	out	0x3d, r28	; 61
    3708:	de bf       	out	0x3e, r29	; 62
    370a:	ed 01       	movw	r28, r26
    370c:	08 95       	ret

0000370e <__udivmodhi4>:
    370e:	aa 1b       	sub	r26, r26
    3710:	bb 1b       	sub	r27, r27
    3712:	51 e1       	ldi	r21, 0x11	; 17
    3714:	07 c0       	rjmp	.+14     	; 0x3724 <__udivmodhi4_ep>

00003716 <__udivmodhi4_loop>:
    3716:	aa 1f       	adc	r26, r26
    3718:	bb 1f       	adc	r27, r27
    371a:	a6 17       	cp	r26, r22
    371c:	b7 07       	cpc	r27, r23
    371e:	10 f0       	brcs	.+4      	; 0x3724 <__udivmodhi4_ep>
    3720:	a6 1b       	sub	r26, r22
    3722:	b7 0b       	sbc	r27, r23

00003724 <__udivmodhi4_ep>:
    3724:	88 1f       	adc	r24, r24
    3726:	99 1f       	adc	r25, r25
    3728:	5a 95       	dec	r21
    372a:	a9 f7       	brne	.-22     	; 0x3716 <__udivmodhi4_loop>
    372c:	80 95       	com	r24
    372e:	90 95       	com	r25
    3730:	bc 01       	movw	r22, r24
    3732:	cd 01       	movw	r24, r26
    3734:	08 95       	ret

00003736 <__ftoa_engine>:
    3736:	28 30       	cpi	r18, 0x08	; 8
    3738:	08 f0       	brcs	.+2      	; 0x373c <__ftoa_engine+0x6>
    373a:	27 e0       	ldi	r18, 0x07	; 7
    373c:	33 27       	eor	r19, r19
    373e:	da 01       	movw	r26, r20
    3740:	99 0f       	add	r25, r25
    3742:	31 1d       	adc	r19, r1
    3744:	87 fd       	sbrc	r24, 7
    3746:	91 60       	ori	r25, 0x01	; 1
    3748:	00 96       	adiw	r24, 0x00	; 0
    374a:	61 05       	cpc	r22, r1
    374c:	71 05       	cpc	r23, r1
    374e:	39 f4       	brne	.+14     	; 0x375e <__ftoa_engine+0x28>
    3750:	32 60       	ori	r19, 0x02	; 2
    3752:	2e 5f       	subi	r18, 0xFE	; 254
    3754:	3d 93       	st	X+, r19
    3756:	30 e3       	ldi	r19, 0x30	; 48
    3758:	2a 95       	dec	r18
    375a:	e1 f7       	brne	.-8      	; 0x3754 <__ftoa_engine+0x1e>
    375c:	08 95       	ret
    375e:	9f 3f       	cpi	r25, 0xFF	; 255
    3760:	30 f0       	brcs	.+12     	; 0x376e <__ftoa_engine+0x38>
    3762:	80 38       	cpi	r24, 0x80	; 128
    3764:	71 05       	cpc	r23, r1
    3766:	61 05       	cpc	r22, r1
    3768:	09 f0       	breq	.+2      	; 0x376c <__ftoa_engine+0x36>
    376a:	3c 5f       	subi	r19, 0xFC	; 252
    376c:	3c 5f       	subi	r19, 0xFC	; 252
    376e:	3d 93       	st	X+, r19
    3770:	91 30       	cpi	r25, 0x01	; 1
    3772:	08 f0       	brcs	.+2      	; 0x3776 <__ftoa_engine+0x40>
    3774:	80 68       	ori	r24, 0x80	; 128
    3776:	91 1d       	adc	r25, r1
    3778:	df 93       	push	r29
    377a:	cf 93       	push	r28
    377c:	1f 93       	push	r17
    377e:	0f 93       	push	r16
    3780:	ff 92       	push	r15
    3782:	ef 92       	push	r14
    3784:	19 2f       	mov	r17, r25
    3786:	98 7f       	andi	r25, 0xF8	; 248
    3788:	96 95       	lsr	r25
    378a:	e9 2f       	mov	r30, r25
    378c:	96 95       	lsr	r25
    378e:	96 95       	lsr	r25
    3790:	e9 0f       	add	r30, r25
    3792:	ff 27       	eor	r31, r31
    3794:	e4 59       	subi	r30, 0x94	; 148
    3796:	fe 4f       	sbci	r31, 0xFE	; 254
    3798:	99 27       	eor	r25, r25
    379a:	33 27       	eor	r19, r19
    379c:	ee 24       	eor	r14, r14
    379e:	ff 24       	eor	r15, r15
    37a0:	a7 01       	movw	r20, r14
    37a2:	e7 01       	movw	r28, r14
    37a4:	05 90       	lpm	r0, Z+
    37a6:	08 94       	sec
    37a8:	07 94       	ror	r0
    37aa:	28 f4       	brcc	.+10     	; 0x37b6 <__ftoa_engine+0x80>
    37ac:	36 0f       	add	r19, r22
    37ae:	e7 1e       	adc	r14, r23
    37b0:	f8 1e       	adc	r15, r24
    37b2:	49 1f       	adc	r20, r25
    37b4:	51 1d       	adc	r21, r1
    37b6:	66 0f       	add	r22, r22
    37b8:	77 1f       	adc	r23, r23
    37ba:	88 1f       	adc	r24, r24
    37bc:	99 1f       	adc	r25, r25
    37be:	06 94       	lsr	r0
    37c0:	a1 f7       	brne	.-24     	; 0x37aa <__ftoa_engine+0x74>
    37c2:	05 90       	lpm	r0, Z+
    37c4:	07 94       	ror	r0
    37c6:	28 f4       	brcc	.+10     	; 0x37d2 <__ftoa_engine+0x9c>
    37c8:	e7 0e       	add	r14, r23
    37ca:	f8 1e       	adc	r15, r24
    37cc:	49 1f       	adc	r20, r25
    37ce:	56 1f       	adc	r21, r22
    37d0:	c1 1d       	adc	r28, r1
    37d2:	77 0f       	add	r23, r23
    37d4:	88 1f       	adc	r24, r24
    37d6:	99 1f       	adc	r25, r25
    37d8:	66 1f       	adc	r22, r22
    37da:	06 94       	lsr	r0
    37dc:	a1 f7       	brne	.-24     	; 0x37c6 <__ftoa_engine+0x90>
    37de:	05 90       	lpm	r0, Z+
    37e0:	07 94       	ror	r0
    37e2:	28 f4       	brcc	.+10     	; 0x37ee <__ftoa_engine+0xb8>
    37e4:	f8 0e       	add	r15, r24
    37e6:	49 1f       	adc	r20, r25
    37e8:	56 1f       	adc	r21, r22
    37ea:	c7 1f       	adc	r28, r23
    37ec:	d1 1d       	adc	r29, r1
    37ee:	88 0f       	add	r24, r24
    37f0:	99 1f       	adc	r25, r25
    37f2:	66 1f       	adc	r22, r22
    37f4:	77 1f       	adc	r23, r23
    37f6:	06 94       	lsr	r0
    37f8:	a1 f7       	brne	.-24     	; 0x37e2 <__ftoa_engine+0xac>
    37fa:	05 90       	lpm	r0, Z+
    37fc:	07 94       	ror	r0
    37fe:	20 f4       	brcc	.+8      	; 0x3808 <__ftoa_engine+0xd2>
    3800:	49 0f       	add	r20, r25
    3802:	56 1f       	adc	r21, r22
    3804:	c7 1f       	adc	r28, r23
    3806:	d8 1f       	adc	r29, r24
    3808:	99 0f       	add	r25, r25
    380a:	66 1f       	adc	r22, r22
    380c:	77 1f       	adc	r23, r23
    380e:	88 1f       	adc	r24, r24
    3810:	06 94       	lsr	r0
    3812:	a9 f7       	brne	.-22     	; 0x37fe <__ftoa_engine+0xc8>
    3814:	84 91       	lpm	r24, Z
    3816:	10 95       	com	r17
    3818:	17 70       	andi	r17, 0x07	; 7
    381a:	41 f0       	breq	.+16     	; 0x382c <__ftoa_engine+0xf6>
    381c:	d6 95       	lsr	r29
    381e:	c7 95       	ror	r28
    3820:	57 95       	ror	r21
    3822:	47 95       	ror	r20
    3824:	f7 94       	ror	r15
    3826:	e7 94       	ror	r14
    3828:	1a 95       	dec	r17
    382a:	c1 f7       	brne	.-16     	; 0x381c <__ftoa_engine+0xe6>
    382c:	e2 e1       	ldi	r30, 0x12	; 18
    382e:	f1 e0       	ldi	r31, 0x01	; 1
    3830:	68 94       	set
    3832:	15 90       	lpm	r1, Z+
    3834:	15 91       	lpm	r17, Z+
    3836:	35 91       	lpm	r19, Z+
    3838:	65 91       	lpm	r22, Z+
    383a:	95 91       	lpm	r25, Z+
    383c:	05 90       	lpm	r0, Z+
    383e:	7f e2       	ldi	r23, 0x2F	; 47
    3840:	73 95       	inc	r23
    3842:	e1 18       	sub	r14, r1
    3844:	f1 0a       	sbc	r15, r17
    3846:	43 0b       	sbc	r20, r19
    3848:	56 0b       	sbc	r21, r22
    384a:	c9 0b       	sbc	r28, r25
    384c:	d0 09       	sbc	r29, r0
    384e:	c0 f7       	brcc	.-16     	; 0x3840 <__ftoa_engine+0x10a>
    3850:	e1 0c       	add	r14, r1
    3852:	f1 1e       	adc	r15, r17
    3854:	43 1f       	adc	r20, r19
    3856:	56 1f       	adc	r21, r22
    3858:	c9 1f       	adc	r28, r25
    385a:	d0 1d       	adc	r29, r0
    385c:	7e f4       	brtc	.+30     	; 0x387c <__ftoa_engine+0x146>
    385e:	70 33       	cpi	r23, 0x30	; 48
    3860:	11 f4       	brne	.+4      	; 0x3866 <__ftoa_engine+0x130>
    3862:	8a 95       	dec	r24
    3864:	e6 cf       	rjmp	.-52     	; 0x3832 <__ftoa_engine+0xfc>
    3866:	e8 94       	clt
    3868:	01 50       	subi	r16, 0x01	; 1
    386a:	30 f0       	brcs	.+12     	; 0x3878 <__ftoa_engine+0x142>
    386c:	08 0f       	add	r16, r24
    386e:	0a f4       	brpl	.+2      	; 0x3872 <__ftoa_engine+0x13c>
    3870:	00 27       	eor	r16, r16
    3872:	02 17       	cp	r16, r18
    3874:	08 f4       	brcc	.+2      	; 0x3878 <__ftoa_engine+0x142>
    3876:	20 2f       	mov	r18, r16
    3878:	23 95       	inc	r18
    387a:	02 2f       	mov	r16, r18
    387c:	7a 33       	cpi	r23, 0x3A	; 58
    387e:	28 f0       	brcs	.+10     	; 0x388a <__ftoa_engine+0x154>
    3880:	79 e3       	ldi	r23, 0x39	; 57
    3882:	7d 93       	st	X+, r23
    3884:	2a 95       	dec	r18
    3886:	e9 f7       	brne	.-6      	; 0x3882 <__ftoa_engine+0x14c>
    3888:	10 c0       	rjmp	.+32     	; 0x38aa <__ftoa_engine+0x174>
    388a:	7d 93       	st	X+, r23
    388c:	2a 95       	dec	r18
    388e:	89 f6       	brne	.-94     	; 0x3832 <__ftoa_engine+0xfc>
    3890:	06 94       	lsr	r0
    3892:	97 95       	ror	r25
    3894:	67 95       	ror	r22
    3896:	37 95       	ror	r19
    3898:	17 95       	ror	r17
    389a:	17 94       	ror	r1
    389c:	e1 18       	sub	r14, r1
    389e:	f1 0a       	sbc	r15, r17
    38a0:	43 0b       	sbc	r20, r19
    38a2:	56 0b       	sbc	r21, r22
    38a4:	c9 0b       	sbc	r28, r25
    38a6:	d0 09       	sbc	r29, r0
    38a8:	98 f0       	brcs	.+38     	; 0x38d0 <__ftoa_engine+0x19a>
    38aa:	23 95       	inc	r18
    38ac:	7e 91       	ld	r23, -X
    38ae:	73 95       	inc	r23
    38b0:	7a 33       	cpi	r23, 0x3A	; 58
    38b2:	08 f0       	brcs	.+2      	; 0x38b6 <__ftoa_engine+0x180>
    38b4:	70 e3       	ldi	r23, 0x30	; 48
    38b6:	7c 93       	st	X, r23
    38b8:	20 13       	cpse	r18, r16
    38ba:	b8 f7       	brcc	.-18     	; 0x38aa <__ftoa_engine+0x174>
    38bc:	7e 91       	ld	r23, -X
    38be:	70 61       	ori	r23, 0x10	; 16
    38c0:	7d 93       	st	X+, r23
    38c2:	30 f0       	brcs	.+12     	; 0x38d0 <__ftoa_engine+0x19a>
    38c4:	83 95       	inc	r24
    38c6:	71 e3       	ldi	r23, 0x31	; 49
    38c8:	7d 93       	st	X+, r23
    38ca:	70 e3       	ldi	r23, 0x30	; 48
    38cc:	2a 95       	dec	r18
    38ce:	e1 f7       	brne	.-8      	; 0x38c8 <__ftoa_engine+0x192>
    38d0:	11 24       	eor	r1, r1
    38d2:	ef 90       	pop	r14
    38d4:	ff 90       	pop	r15
    38d6:	0f 91       	pop	r16
    38d8:	1f 91       	pop	r17
    38da:	cf 91       	pop	r28
    38dc:	df 91       	pop	r29
    38de:	99 27       	eor	r25, r25
    38e0:	87 fd       	sbrc	r24, 7
    38e2:	90 95       	com	r25
    38e4:	08 95       	ret

000038e6 <strnlen_P>:
    38e6:	fc 01       	movw	r30, r24
    38e8:	05 90       	lpm	r0, Z+
    38ea:	61 50       	subi	r22, 0x01	; 1
    38ec:	70 40       	sbci	r23, 0x00	; 0
    38ee:	01 10       	cpse	r0, r1
    38f0:	d8 f7       	brcc	.-10     	; 0x38e8 <strnlen_P+0x2>
    38f2:	80 95       	com	r24
    38f4:	90 95       	com	r25
    38f6:	8e 0f       	add	r24, r30
    38f8:	9f 1f       	adc	r25, r31
    38fa:	08 95       	ret

000038fc <strcat>:
    38fc:	fb 01       	movw	r30, r22
    38fe:	dc 01       	movw	r26, r24
    3900:	0d 90       	ld	r0, X+
    3902:	00 20       	and	r0, r0
    3904:	e9 f7       	brne	.-6      	; 0x3900 <strcat+0x4>
    3906:	11 97       	sbiw	r26, 0x01	; 1
    3908:	01 90       	ld	r0, Z+
    390a:	0d 92       	st	X+, r0
    390c:	00 20       	and	r0, r0
    390e:	e1 f7       	brne	.-8      	; 0x3908 <strcat+0xc>
    3910:	08 95       	ret

00003912 <strcpy>:
    3912:	fb 01       	movw	r30, r22
    3914:	dc 01       	movw	r26, r24
    3916:	01 90       	ld	r0, Z+
    3918:	0d 92       	st	X+, r0
    391a:	00 20       	and	r0, r0
    391c:	e1 f7       	brne	.-8      	; 0x3916 <strcpy+0x4>
    391e:	08 95       	ret

00003920 <strnlen>:
    3920:	fc 01       	movw	r30, r24
    3922:	61 50       	subi	r22, 0x01	; 1
    3924:	70 40       	sbci	r23, 0x00	; 0
    3926:	01 90       	ld	r0, Z+
    3928:	01 10       	cpse	r0, r1
    392a:	d8 f7       	brcc	.-10     	; 0x3922 <strnlen+0x2>
    392c:	80 95       	com	r24
    392e:	90 95       	com	r25
    3930:	8e 0f       	add	r24, r30
    3932:	9f 1f       	adc	r25, r31
    3934:	08 95       	ret

00003936 <fputc>:
    3936:	0f 93       	push	r16
    3938:	1f 93       	push	r17
    393a:	cf 93       	push	r28
    393c:	df 93       	push	r29
    393e:	fb 01       	movw	r30, r22
    3940:	23 81       	ldd	r18, Z+3	; 0x03
    3942:	21 fd       	sbrc	r18, 1
    3944:	03 c0       	rjmp	.+6      	; 0x394c <fputc+0x16>
    3946:	8f ef       	ldi	r24, 0xFF	; 255
    3948:	9f ef       	ldi	r25, 0xFF	; 255
    394a:	2c c0       	rjmp	.+88     	; 0x39a4 <fputc+0x6e>
    394c:	22 ff       	sbrs	r18, 2
    394e:	16 c0       	rjmp	.+44     	; 0x397c <fputc+0x46>
    3950:	46 81       	ldd	r20, Z+6	; 0x06
    3952:	57 81       	ldd	r21, Z+7	; 0x07
    3954:	24 81       	ldd	r18, Z+4	; 0x04
    3956:	35 81       	ldd	r19, Z+5	; 0x05
    3958:	42 17       	cp	r20, r18
    395a:	53 07       	cpc	r21, r19
    395c:	44 f4       	brge	.+16     	; 0x396e <fputc+0x38>
    395e:	a0 81       	ld	r26, Z
    3960:	b1 81       	ldd	r27, Z+1	; 0x01
    3962:	9d 01       	movw	r18, r26
    3964:	2f 5f       	subi	r18, 0xFF	; 255
    3966:	3f 4f       	sbci	r19, 0xFF	; 255
    3968:	20 83       	st	Z, r18
    396a:	31 83       	std	Z+1, r19	; 0x01
    396c:	8c 93       	st	X, r24
    396e:	26 81       	ldd	r18, Z+6	; 0x06
    3970:	37 81       	ldd	r19, Z+7	; 0x07
    3972:	2f 5f       	subi	r18, 0xFF	; 255
    3974:	3f 4f       	sbci	r19, 0xFF	; 255
    3976:	26 83       	std	Z+6, r18	; 0x06
    3978:	37 83       	std	Z+7, r19	; 0x07
    397a:	14 c0       	rjmp	.+40     	; 0x39a4 <fputc+0x6e>
    397c:	8b 01       	movw	r16, r22
    397e:	ec 01       	movw	r28, r24
    3980:	fb 01       	movw	r30, r22
    3982:	00 84       	ldd	r0, Z+8	; 0x08
    3984:	f1 85       	ldd	r31, Z+9	; 0x09
    3986:	e0 2d       	mov	r30, r0
    3988:	09 95       	icall
    398a:	89 2b       	or	r24, r25
    398c:	e1 f6       	brne	.-72     	; 0x3946 <fputc+0x10>
    398e:	d8 01       	movw	r26, r16
    3990:	16 96       	adiw	r26, 0x06	; 6
    3992:	8d 91       	ld	r24, X+
    3994:	9c 91       	ld	r25, X
    3996:	17 97       	sbiw	r26, 0x07	; 7
    3998:	01 96       	adiw	r24, 0x01	; 1
    399a:	16 96       	adiw	r26, 0x06	; 6
    399c:	8d 93       	st	X+, r24
    399e:	9c 93       	st	X, r25
    39a0:	17 97       	sbiw	r26, 0x07	; 7
    39a2:	ce 01       	movw	r24, r28
    39a4:	df 91       	pop	r29
    39a6:	cf 91       	pop	r28
    39a8:	1f 91       	pop	r17
    39aa:	0f 91       	pop	r16
    39ac:	08 95       	ret

000039ae <sprintf>:
    39ae:	ae e0       	ldi	r26, 0x0E	; 14
    39b0:	b0 e0       	ldi	r27, 0x00	; 0
    39b2:	ed ed       	ldi	r30, 0xDD	; 221
    39b4:	fc e1       	ldi	r31, 0x1C	; 28
    39b6:	0c 94 64 1b 	jmp	0x36c8	; 0x36c8 <__prologue_saves__+0x1c>
    39ba:	0d 89       	ldd	r16, Y+21	; 0x15
    39bc:	1e 89       	ldd	r17, Y+22	; 0x16
    39be:	86 e0       	ldi	r24, 0x06	; 6
    39c0:	8c 83       	std	Y+4, r24	; 0x04
    39c2:	09 83       	std	Y+1, r16	; 0x01
    39c4:	1a 83       	std	Y+2, r17	; 0x02
    39c6:	8f ef       	ldi	r24, 0xFF	; 255
    39c8:	9f e7       	ldi	r25, 0x7F	; 127
    39ca:	8d 83       	std	Y+5, r24	; 0x05
    39cc:	9e 83       	std	Y+6, r25	; 0x06
    39ce:	ae 01       	movw	r20, r28
    39d0:	47 5e       	subi	r20, 0xE7	; 231
    39d2:	5f 4f       	sbci	r21, 0xFF	; 255
    39d4:	6f 89       	ldd	r22, Y+23	; 0x17
    39d6:	78 8d       	ldd	r23, Y+24	; 0x18
    39d8:	ce 01       	movw	r24, r28
    39da:	01 96       	adiw	r24, 0x01	; 1
    39dc:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <vfprintf>
    39e0:	ef 81       	ldd	r30, Y+7	; 0x07
    39e2:	f8 85       	ldd	r31, Y+8	; 0x08
    39e4:	e0 0f       	add	r30, r16
    39e6:	f1 1f       	adc	r31, r17
    39e8:	10 82       	st	Z, r1
    39ea:	2e 96       	adiw	r28, 0x0e	; 14
    39ec:	e4 e0       	ldi	r30, 0x04	; 4
    39ee:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <__epilogue_restores__+0x1c>

000039f2 <__ultoa_invert>:
    39f2:	fa 01       	movw	r30, r20
    39f4:	aa 27       	eor	r26, r26
    39f6:	28 30       	cpi	r18, 0x08	; 8
    39f8:	51 f1       	breq	.+84     	; 0x3a4e <__ultoa_invert+0x5c>
    39fa:	20 31       	cpi	r18, 0x10	; 16
    39fc:	81 f1       	breq	.+96     	; 0x3a5e <__ultoa_invert+0x6c>
    39fe:	e8 94       	clt
    3a00:	6f 93       	push	r22
    3a02:	6e 7f       	andi	r22, 0xFE	; 254
    3a04:	6e 5f       	subi	r22, 0xFE	; 254
    3a06:	7f 4f       	sbci	r23, 0xFF	; 255
    3a08:	8f 4f       	sbci	r24, 0xFF	; 255
    3a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0c:	af 4f       	sbci	r26, 0xFF	; 255
    3a0e:	b1 e0       	ldi	r27, 0x01	; 1
    3a10:	3e d0       	rcall	.+124    	; 0x3a8e <__ultoa_invert+0x9c>
    3a12:	b4 e0       	ldi	r27, 0x04	; 4
    3a14:	3c d0       	rcall	.+120    	; 0x3a8e <__ultoa_invert+0x9c>
    3a16:	67 0f       	add	r22, r23
    3a18:	78 1f       	adc	r23, r24
    3a1a:	89 1f       	adc	r24, r25
    3a1c:	9a 1f       	adc	r25, r26
    3a1e:	a1 1d       	adc	r26, r1
    3a20:	68 0f       	add	r22, r24
    3a22:	79 1f       	adc	r23, r25
    3a24:	8a 1f       	adc	r24, r26
    3a26:	91 1d       	adc	r25, r1
    3a28:	a1 1d       	adc	r26, r1
    3a2a:	6a 0f       	add	r22, r26
    3a2c:	71 1d       	adc	r23, r1
    3a2e:	81 1d       	adc	r24, r1
    3a30:	91 1d       	adc	r25, r1
    3a32:	a1 1d       	adc	r26, r1
    3a34:	20 d0       	rcall	.+64     	; 0x3a76 <__ultoa_invert+0x84>
    3a36:	09 f4       	brne	.+2      	; 0x3a3a <__ultoa_invert+0x48>
    3a38:	68 94       	set
    3a3a:	3f 91       	pop	r19
    3a3c:	2a e0       	ldi	r18, 0x0A	; 10
    3a3e:	26 9f       	mul	r18, r22
    3a40:	11 24       	eor	r1, r1
    3a42:	30 19       	sub	r19, r0
    3a44:	30 5d       	subi	r19, 0xD0	; 208
    3a46:	31 93       	st	Z+, r19
    3a48:	de f6       	brtc	.-74     	; 0x3a00 <__ultoa_invert+0xe>
    3a4a:	cf 01       	movw	r24, r30
    3a4c:	08 95       	ret
    3a4e:	46 2f       	mov	r20, r22
    3a50:	47 70       	andi	r20, 0x07	; 7
    3a52:	40 5d       	subi	r20, 0xD0	; 208
    3a54:	41 93       	st	Z+, r20
    3a56:	b3 e0       	ldi	r27, 0x03	; 3
    3a58:	0f d0       	rcall	.+30     	; 0x3a78 <__ultoa_invert+0x86>
    3a5a:	c9 f7       	brne	.-14     	; 0x3a4e <__ultoa_invert+0x5c>
    3a5c:	f6 cf       	rjmp	.-20     	; 0x3a4a <__ultoa_invert+0x58>
    3a5e:	46 2f       	mov	r20, r22
    3a60:	4f 70       	andi	r20, 0x0F	; 15
    3a62:	40 5d       	subi	r20, 0xD0	; 208
    3a64:	4a 33       	cpi	r20, 0x3A	; 58
    3a66:	18 f0       	brcs	.+6      	; 0x3a6e <__ultoa_invert+0x7c>
    3a68:	49 5d       	subi	r20, 0xD9	; 217
    3a6a:	31 fd       	sbrc	r19, 1
    3a6c:	40 52       	subi	r20, 0x20	; 32
    3a6e:	41 93       	st	Z+, r20
    3a70:	02 d0       	rcall	.+4      	; 0x3a76 <__ultoa_invert+0x84>
    3a72:	a9 f7       	brne	.-22     	; 0x3a5e <__ultoa_invert+0x6c>
    3a74:	ea cf       	rjmp	.-44     	; 0x3a4a <__ultoa_invert+0x58>
    3a76:	b4 e0       	ldi	r27, 0x04	; 4
    3a78:	a6 95       	lsr	r26
    3a7a:	97 95       	ror	r25
    3a7c:	87 95       	ror	r24
    3a7e:	77 95       	ror	r23
    3a80:	67 95       	ror	r22
    3a82:	ba 95       	dec	r27
    3a84:	c9 f7       	brne	.-14     	; 0x3a78 <__ultoa_invert+0x86>
    3a86:	00 97       	sbiw	r24, 0x00	; 0
    3a88:	61 05       	cpc	r22, r1
    3a8a:	71 05       	cpc	r23, r1
    3a8c:	08 95       	ret
    3a8e:	9b 01       	movw	r18, r22
    3a90:	ac 01       	movw	r20, r24
    3a92:	0a 2e       	mov	r0, r26
    3a94:	06 94       	lsr	r0
    3a96:	57 95       	ror	r21
    3a98:	47 95       	ror	r20
    3a9a:	37 95       	ror	r19
    3a9c:	27 95       	ror	r18
    3a9e:	ba 95       	dec	r27
    3aa0:	c9 f7       	brne	.-14     	; 0x3a94 <__ultoa_invert+0xa2>
    3aa2:	62 0f       	add	r22, r18
    3aa4:	73 1f       	adc	r23, r19
    3aa6:	84 1f       	adc	r24, r20
    3aa8:	95 1f       	adc	r25, r21
    3aaa:	a0 1d       	adc	r26, r0
    3aac:	08 95       	ret

00003aae <eeprom_read_block>:
    3aae:	60 50       	subi	r22, 0x00	; 0
    3ab0:	7c 4e       	sbci	r23, 0xEC	; 236
    3ab2:	0c 94 92 1d 	jmp	0x3b24	; 0x3b24 <memcpy>

00003ab6 <eeprom_update_block>:
    3ab6:	dc 01       	movw	r26, r24
    3ab8:	a4 0f       	add	r26, r20
    3aba:	b5 1f       	adc	r27, r21
    3abc:	41 50       	subi	r20, 0x01	; 1
    3abe:	50 40       	sbci	r21, 0x00	; 0
    3ac0:	48 f0       	brcs	.+18     	; 0x3ad4 <eeprom_update_block+0x1e>
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	84 0f       	add	r24, r20
    3ac6:	95 1f       	adc	r25, r21
    3ac8:	2e 91       	ld	r18, -X
    3aca:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <eeprom_update_r18>
    3ace:	41 50       	subi	r20, 0x01	; 1
    3ad0:	50 40       	sbci	r21, 0x00	; 0
    3ad2:	d0 f7       	brcc	.-12     	; 0x3ac8 <eeprom_update_block+0x12>
    3ad4:	08 95       	ret

00003ad6 <eeprom_update_byte>:
    3ad6:	26 2f       	mov	r18, r22

00003ad8 <eeprom_update_r18>:
    3ad8:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <eeprom_mapen>
    3adc:	00 80       	ld	r0, Z
    3ade:	02 16       	cp	r0, r18
    3ae0:	19 f0       	breq	.+6      	; 0x3ae8 <eeprom_update_r18+0x10>
    3ae2:	0e 94 77 1d 	call	0x3aee	; 0x3aee <eeprom_write_r18>
    3ae6:	01 97       	sbiw	r24, 0x01	; 1
    3ae8:	01 97       	sbiw	r24, 0x01	; 1
    3aea:	08 95       	ret

00003aec <eeprom_write_byte>:
    3aec:	26 2f       	mov	r18, r22

00003aee <eeprom_write_r18>:
    3aee:	af 93       	push	r26
    3af0:	bf 93       	push	r27
    3af2:	e0 e0       	ldi	r30, 0x00	; 0
    3af4:	f0 e1       	ldi	r31, 0x10	; 16
    3af6:	32 81       	ldd	r19, Z+2	; 0x02
    3af8:	31 fd       	sbrc	r19, 1
    3afa:	fd cf       	rjmp	.-6      	; 0x3af6 <eeprom_write_r18+0x8>
    3afc:	dc 01       	movw	r26, r24
    3afe:	a0 50       	subi	r26, 0x00	; 0
    3b00:	bc 4e       	sbci	r27, 0xEC	; 236
    3b02:	2c 93       	st	X, r18
    3b04:	2d e9       	ldi	r18, 0x9D	; 157
    3b06:	24 bf       	out	0x34, r18	; 52
    3b08:	23 e0       	ldi	r18, 0x03	; 3
    3b0a:	20 83       	st	Z, r18
    3b0c:	01 96       	adiw	r24, 0x01	; 1
    3b0e:	bf 91       	pop	r27
    3b10:	af 91       	pop	r26
    3b12:	08 95       	ret

00003b14 <eeprom_read_byte>:
    3b14:	03 d0       	rcall	.+6      	; 0x3b1c <eeprom_mapen>
    3b16:	80 81       	ld	r24, Z
    3b18:	99 27       	eor	r25, r25
    3b1a:	08 95       	ret

00003b1c <eeprom_mapen>:
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	e0 50       	subi	r30, 0x00	; 0
    3b20:	fc 4e       	sbci	r31, 0xEC	; 236
    3b22:	08 95       	ret

00003b24 <memcpy>:
    3b24:	fb 01       	movw	r30, r22
    3b26:	dc 01       	movw	r26, r24
    3b28:	02 c0       	rjmp	.+4      	; 0x3b2e <memcpy+0xa>
    3b2a:	01 90       	ld	r0, Z+
    3b2c:	0d 92       	st	X+, r0
    3b2e:	41 50       	subi	r20, 0x01	; 1
    3b30:	50 40       	sbci	r21, 0x00	; 0
    3b32:	d8 f7       	brcc	.-10     	; 0x3b2a <memcpy+0x6>
    3b34:	08 95       	ret

00003b36 <_exit>:
    3b36:	f8 94       	cli

00003b38 <__stop_program>:
    3b38:	ff cf       	rjmp	.-2      	; 0x3b38 <__stop_program>
