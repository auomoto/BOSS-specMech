
specMech.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00802800  000041f8  000042ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003fa4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  00007fa4  00003fa4  00004058  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000082e  00802802  00802802  000042ae  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000042ae  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000430c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000610  00000000  00000000  00004350  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a364  00000000  00000000  00004960  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000048f3  00000000  00000000  0000ecc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000040b6  00000000  00000000  000135b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000dd8  00000000  00000000  00017670  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000021df  00000000  00000000  00018448  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003c36  00000000  00000000  0001a627  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000370  00000000  00000000  0001e25d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 29 01 	jmp	0x252	; 0x252 <__ctors_end>
       4:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
       8:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
       c:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__vector_3>
      10:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      14:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      18:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      1c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      20:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      24:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      28:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      2c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      30:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__vector_12>
      34:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      38:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      3c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      40:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      44:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__vector_17>
      48:	0c 94 da 16 	jmp	0x2db4	; 0x2db4 <__vector_18>
      4c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      50:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__vector_20>
      54:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      58:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      5c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      60:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      64:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      68:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <__vector_26>
      6c:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__vector_27>
      70:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      74:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__vector_29>
      78:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      7c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      80:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      84:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      88:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      8c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      90:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      94:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__vector_37>
      98:	0c 94 a8 17 	jmp	0x2f50	; 0x2f50 <__vector_38>
      9c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__bad_interrupt>
      a0:	95 04       	cpc	r9, r5
      a2:	a3 04       	cpc	r10, r3
      a4:	a3 04       	cpc	r10, r3
      a6:	a3 04       	cpc	r10, r3
      a8:	a3 04       	cpc	r10, r3
      aa:	a3 04       	cpc	r10, r3
      ac:	a3 04       	cpc	r10, r3
      ae:	a3 04       	cpc	r10, r3
      b0:	a3 04       	cpc	r10, r3
      b2:	a3 04       	cpc	r10, r3
      b4:	a3 04       	cpc	r10, r3
      b6:	a3 04       	cpc	r10, r3
      b8:	a3 04       	cpc	r10, r3
      ba:	a3 04       	cpc	r10, r3
      bc:	a3 04       	cpc	r10, r3
      be:	a3 04       	cpc	r10, r3
      c0:	a3 04       	cpc	r10, r3
      c2:	6d 04       	cpc	r6, r13
      c4:	a3 04       	cpc	r10, r3
      c6:	a3 04       	cpc	r10, r3
      c8:	a3 04       	cpc	r10, r3
      ca:	a3 04       	cpc	r10, r3
      cc:	a3 04       	cpc	r10, r3
      ce:	a3 04       	cpc	r10, r3
      d0:	a3 04       	cpc	r10, r3
      d2:	a3 04       	cpc	r10, r3
      d4:	a3 04       	cpc	r10, r3
      d6:	77 04       	cpc	r7, r7
      d8:	a3 04       	cpc	r10, r3
      da:	72 04       	cpc	r7, r2
      dc:	a3 04       	cpc	r10, r3
      de:	a3 04       	cpc	r10, r3
      e0:	89 04       	cpc	r8, r9
      e2:	8d 04       	cpc	r8, r13
      e4:	91 04       	cpc	r9, r1
      e6:	01 13       	cpse	r16, r17
      e8:	01 13       	cpse	r16, r17
      ea:	71 0e       	add	r7, r17
      ec:	71 0e       	add	r7, r17
      ee:	71 0e       	add	r7, r17
      f0:	71 0e       	add	r7, r17
      f2:	71 0e       	add	r7, r17
      f4:	71 0e       	add	r7, r17
      f6:	71 0e       	add	r7, r17
      f8:	71 0e       	add	r7, r17
      fa:	71 0e       	add	r7, r17
      fc:	71 0e       	add	r7, r17
      fe:	71 0e       	add	r7, r17
     100:	71 0e       	add	r7, r17
     102:	71 0e       	add	r7, r17
     104:	71 0e       	add	r7, r17
     106:	71 0e       	add	r7, r17
     108:	71 0e       	add	r7, r17
     10a:	71 0e       	add	r7, r17
     10c:	71 0e       	add	r7, r17
     10e:	ae 12       	cpse	r10, r30
     110:	71 0e       	add	r7, r17
     112:	71 0e       	add	r7, r17
     114:	71 0e       	add	r7, r17
     116:	71 0e       	add	r7, r17
     118:	71 0e       	add	r7, r17
     11a:	71 0e       	add	r7, r17
     11c:	71 0e       	add	r7, r17
     11e:	71 0e       	add	r7, r17
     120:	71 0e       	add	r7, r17
     122:	71 0e       	add	r7, r17
     124:	73 0e       	add	r7, r19
     126:	73 0e       	add	r7, r19
     128:	73 0e       	add	r7, r19
     12a:	71 0e       	add	r7, r17
     12c:	11 0f       	add	r17, r17
     12e:	71 0e       	add	r7, r17
     130:	71 0e       	add	r7, r17
     132:	71 0e       	add	r7, r17
     134:	71 0e       	add	r7, r17
     136:	71 0e       	add	r7, r17
     138:	71 0e       	add	r7, r17
     13a:	71 0e       	add	r7, r17
     13c:	71 0e       	add	r7, r17
     13e:	71 0e       	add	r7, r17
     140:	4a 10       	cpse	r4, r10
     142:	39 11       	cpse	r19, r9
     144:	71 0e       	add	r7, r17
     146:	71 0e       	add	r7, r17
     148:	71 0e       	add	r7, r17
     14a:	d8 11       	cpse	r29, r8
     14c:	71 0e       	add	r7, r17
     14e:	38 12       	cpse	r3, r24

00000150 <__trampolines_end>:
     150:	6e 61       	ori	r22, 0x1E	; 30
     152:	6e 00       	.word	0x006e	; ????

00000154 <__c.2332>:
     154:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     164:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     174:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     184:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     194:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1a4:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1b4:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1c4:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1d4:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1e4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1f4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     204:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     214:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     224:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     234:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     244:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000252 <__ctors_end>:
     252:	11 24       	eor	r1, r1
     254:	1f be       	out	0x3f, r1	; 63
     256:	cf ef       	ldi	r28, 0xFF	; 255
     258:	cd bf       	out	0x3d, r28	; 61
     25a:	df e3       	ldi	r29, 0x3F	; 63
     25c:	de bf       	out	0x3e, r29	; 62

0000025e <__do_copy_data>:
     25e:	18 e2       	ldi	r17, 0x28	; 40
     260:	a0 e0       	ldi	r26, 0x00	; 0
     262:	b8 e2       	ldi	r27, 0x28	; 40
     264:	e8 ef       	ldi	r30, 0xF8	; 248
     266:	f1 e4       	ldi	r31, 0x41	; 65
     268:	02 c0       	rjmp	.+4      	; 0x26e <__do_copy_data+0x10>
     26a:	05 90       	lpm	r0, Z+
     26c:	0d 92       	st	X+, r0
     26e:	a2 30       	cpi	r26, 0x02	; 2
     270:	b1 07       	cpc	r27, r17
     272:	d9 f7       	brne	.-10     	; 0x26a <__do_copy_data+0xc>

00000274 <__do_clear_bss>:
     274:	20 e3       	ldi	r18, 0x30	; 48
     276:	a2 e0       	ldi	r26, 0x02	; 2
     278:	b8 e2       	ldi	r27, 0x28	; 40
     27a:	01 c0       	rjmp	.+2      	; 0x27e <.do_clear_bss_start>

0000027c <.do_clear_bss_loop>:
     27c:	1d 92       	st	X+, r1

0000027e <.do_clear_bss_start>:
     27e:	a0 33       	cpi	r26, 0x30	; 48
     280:	b2 07       	cpc	r27, r18
     282:	e1 f7       	brne	.-8      	; 0x27c <.do_clear_bss_loop>
     284:	0e 94 db 07 	call	0xfb6	; 0xfb6 <main>
     288:	0c 94 d0 1f 	jmp	0x3fa0	; 0x3fa0 <_exit>

0000028c <__bad_interrupt>:
     28c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000290 <read_AD590>:

	Output:
		Returns the temperature. -999.9 for invalid sensor value
------------------------------------------------------------------------------*/
float read_AD590(uint8_t sensor)
{
     290:	cf 92       	push	r12
     292:	df 92       	push	r13
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
     298:	cf 93       	push	r28

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
     29a:	81 30       	cpi	r24, 0x01	; 1
     29c:	c9 f0       	breq	.+50     	; 0x2d0 <read_AD590+0x40>
     29e:	18 f0       	brcs	.+6      	; 0x2a6 <read_AD590+0x16>
     2a0:	82 30       	cpi	r24, 0x02	; 2
     2a2:	61 f0       	breq	.+24     	; 0x2bc <read_AD590+0x2c>
     2a4:	10 c0       	rjmp	.+32     	; 0x2c6 <read_AD590+0x36>
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
     2a6:	0f 2e       	mov	r0, r31
     2a8:	f3 e3       	ldi	r31, 0x33	; 51
     2aa:	cf 2e       	mov	r12, r31
     2ac:	dc 2c       	mov	r13, r12
     2ae:	f3 ef       	ldi	r31, 0xF3	; 243
     2b0:	ef 2e       	mov	r14, r31
     2b2:	f0 e4       	ldi	r31, 0x40	; 64
     2b4:	ff 2e       	mov	r15, r31
     2b6:	f0 2d       	mov	r31, r0
	float voltage, offset, temperature;

	offset = 0.0;
	switch (sensor) {		// Select the sensor(s) to turn on
		case 0:
			pins = 0x01;	// t0
     2b8:	c1 e0       	ldi	r28, 0x01	; 1
     2ba:	0e c0       	rjmp	.+28     	; 0x2d8 <read_AD590+0x48>
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
     2bc:	c1 2c       	mov	r12, r1
     2be:	d1 2c       	mov	r13, r1
     2c0:	76 01       	movw	r14, r12
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
			break;
		case 2:
			pins = 0x10;	// t2
     2c2:	c0 e1       	ldi	r28, 0x10	; 16
			offset = 0.0;
			break;
     2c4:	09 c0       	rjmp	.+18     	; 0x2d8 <read_AD590+0x48>
{

	uint8_t pins;
	float voltage, offset, temperature;

	offset = 0.0;
     2c6:	c1 2c       	mov	r12, r1
     2c8:	d1 2c       	mov	r13, r1
     2ca:	76 01       	movw	r14, r12
		case 2:
			pins = 0x10;	// t2
			offset = 0.0;
			break;
		default:
			pins = 0x00;
     2cc:	c0 e0       	ldi	r28, 0x00	; 0
			break;
     2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <read_AD590+0x48>
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
			offset = 0.0;
     2d0:	c1 2c       	mov	r12, r1
     2d2:	d1 2c       	mov	r13, r1
     2d4:	76 01       	movw	r14, r12
		case 0:
			pins = 0x01;	// t0
			offset = 7.6;
			break;
		case 1:
			pins = 0x04;	// t1
     2d6:	c4 e0       	ldi	r28, 0x04	; 4
			pins = 0x00;
			break;
	}

	// Turn on the selected AD590 sensor
	write_MCP23008(AD590DRIVER, GPPU, 0x00);	// Disable pullups on input pins
     2d8:	40 e0       	ldi	r20, 0x00	; 0
     2da:	66 e0       	ldi	r22, 0x06	; 6
     2dc:	87 e2       	ldi	r24, 0x27	; 39
     2de:	0e 94 fe 07 	call	0xffc	; 0xffc <write_MCP23008>
	write_MCP23008(AD590DRIVER, IODIR, ~pins);	// Pins are inputs if the bit is high
     2e2:	4c 2f       	mov	r20, r28
     2e4:	40 95       	com	r20
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	87 e2       	ldi	r24, 0x27	; 39
     2ea:	0e 94 fe 07 	call	0xffc	; 0xffc <write_MCP23008>
	write_MCP23008(AD590DRIVER, OLAT, pins);	// Set high the selected pins
     2ee:	4c 2f       	mov	r20, r28
     2f0:	6a e0       	ldi	r22, 0x0A	; 10
     2f2:	87 e2       	ldi	r24, 0x27	; 39
     2f4:	0e 94 fe 07 	call	0xffc	; 0xffc <write_MCP23008>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f8:	86 e1       	ldi	r24, 0x16	; 22
     2fa:	8a 95       	dec	r24
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <read_AD590+0x6a>
     2fe:	00 00       	nop
	_delay_us(20);	// AD590 turn-on time

	// Use 0.512 volts range and 128 samples per second
	voltage = read_ADS1115(ADC_TE, PGA0512, AIN3, DR128);
     300:	20 e8       	ldi	r18, 0x80	; 128
     302:	40 e7       	ldi	r20, 0x70	; 112
     304:	68 e0       	ldi	r22, 0x08	; 8
     306:	88 e4       	ldi	r24, 0x48	; 72
     308:	0e 94 9e 01 	call	0x33c	; 0x33c <read_ADS1115>
	temperature = (AD590RESISTOR * voltage) - 273.15 + offset;	// Temperature & offset calibration
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	4a e7       	ldi	r20, 0x7A	; 122
     312:	54 e4       	ldi	r21, 0x44	; 68
     314:	0e 94 87 19 	call	0x330e	; 0x330e <__mulsf3>
     318:	23 e3       	ldi	r18, 0x33	; 51
     31a:	33 e9       	ldi	r19, 0x93	; 147
     31c:	48 e8       	ldi	r20, 0x88	; 136
     31e:	53 e4       	ldi	r21, 0x43	; 67
     320:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__subsf3>
     324:	9b 01       	movw	r18, r22
     326:	ac 01       	movw	r20, r24
     328:	c7 01       	movw	r24, r14
     32a:	b6 01       	movw	r22, r12
     32c:	0e 94 ed 17 	call	0x2fda	; 0x2fda <__addsf3>
	return(temperature);

}
     330:	cf 91       	pop	r28
     332:	ff 90       	pop	r15
     334:	ef 90       	pop	r14
     336:	df 90       	pop	r13
     338:	cf 90       	pop	r12
     33a:	08 95       	ret

0000033c <read_ADS1115>:
		datarate - one of the eight selectable data rates. We chose the
			default of 128 samples per second although we haven't explored
			any other options.
------------------------------------------------------------------------------*/
float read_ADS1115(uint8_t addr, uint8_t gain, uint8_t pins, uint8_t datarate)
{
     33c:	cf 92       	push	r12
     33e:	df 92       	push	r13
     340:	ef 92       	push	r14
     342:	ff 92       	push	r15
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	d8 2f       	mov	r29, r24
     34e:	f6 2e       	mov	r15, r22
	float scale, voltage;
	uint8_t confighi, configlo, retval, flag;
	uint8_t converting, lowbyte, highbyte;

	// Write the CONFIG register
	confighi = 0b10000001 | gain | pins;
     350:	46 2b       	or	r20, r22
     352:	c4 2f       	mov	r28, r20
     354:	c1 68       	ori	r28, 0x81	; 129
	configlo = datarate | 0b00000011;				// Disable comparator
     356:	12 2f       	mov	r17, r18
     358:	13 60       	ori	r17, 0x03	; 3

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start condition
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
     360:	08 2f       	mov	r16, r24
     362:	88 23       	and	r24, r24
     364:	69 f0       	breq	.+26     	; 0x380 <read_ADS1115+0x44>
		stop_TWI();
     366:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
		return(retval);
     36a:	60 2f       	mov	r22, r16
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__floatunsisf>
     376:	56 2f       	mov	r21, r22
     378:	47 2f       	mov	r20, r23
     37a:	38 2f       	mov	r19, r24
     37c:	29 2f       	mov	r18, r25
     37e:	d0 c0       	rjmp	.+416    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
	}
	if ((retval = write_TWI(ADS1115CONFIG))) {		// Write the CONFIG register
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
     386:	08 2f       	mov	r16, r24
     388:	88 23       	and	r24, r24
     38a:	69 f0       	breq	.+26     	; 0x3a6 <read_ADS1115+0x6a>
		stop_TWI();
     38c:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
		return(retval);
     390:	60 2f       	mov	r22, r16
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__floatunsisf>
     39c:	56 2f       	mov	r21, r22
     39e:	47 2f       	mov	r20, r23
     3a0:	38 2f       	mov	r19, r24
     3a2:	29 2f       	mov	r18, r25
     3a4:	bd c0       	rjmp	.+378    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
	}
	if ((retval = write_TWI(confighi))) {			// Write high byte
     3a6:	8c 2f       	mov	r24, r28
     3a8:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
     3ac:	c8 2f       	mov	r28, r24
     3ae:	88 23       	and	r24, r24
     3b0:	69 f0       	breq	.+26     	; 0x3cc <read_ADS1115+0x90>
		stop_TWI();
     3b2:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
		return(retval);
     3b6:	6c 2f       	mov	r22, r28
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__floatunsisf>
     3c2:	56 2f       	mov	r21, r22
     3c4:	47 2f       	mov	r20, r23
     3c6:	38 2f       	mov	r19, r24
     3c8:	29 2f       	mov	r18, r25
     3ca:	aa c0       	rjmp	.+340    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
	}
	if ((retval = write_TWI(configlo))) {			// Write low byte
     3cc:	81 2f       	mov	r24, r17
     3ce:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
     3d2:	c8 2f       	mov	r28, r24
     3d4:	88 23       	and	r24, r24
     3d6:	69 f0       	breq	.+26     	; 0x3f2 <read_ADS1115+0xb6>
		stop_TWI();
     3d8:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
		return(retval);
     3dc:	6c 2f       	mov	r22, r28
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__floatunsisf>
     3e8:	56 2f       	mov	r21, r22
     3ea:	47 2f       	mov	r20, r23
     3ec:	38 2f       	mov	r19, r24
     3ee:	29 2f       	mov	r18, r25
     3f0:	97 c0       	rjmp	.+302    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
	}
	stop_TWI();
     3f2:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
     3f6:	8c e1       	ldi	r24, 0x1C	; 28
     3f8:	8a 95       	dec	r24
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <read_ADS1115+0xbc>

	_delay_us(25);									// Power-up time

	converting = YES;
     3fc:	c1 e0       	ldi	r28, 0x01	; 1
	while (converting) {							// Wait for conversion to finish
     3fe:	09 c0       	rjmp	.+18     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		start_TWI(addr, TWIREAD);
     400:	61 e0       	ldi	r22, 0x01	; 1
     402:	8d 2f       	mov	r24, r29
     404:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
     408:	0e 94 6f 15 	call	0x2ade	; 0x2ade <readlast_TWI>
		if (flag & 0b10000000) {			// or add a timer timeout
     40c:	88 23       	and	r24, r24
     40e:	0c f4       	brge	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			converting = NO;
     410:	c0 e0       	ldi	r28, 0x00	; 0
	stop_TWI();

	_delay_us(25);									// Power-up time

	converting = YES;
	while (converting) {							// Wait for conversion to finish
     412:	c1 11       	cpse	r28, r1
     414:	f5 cf       	rjmp	.-22     	; 0x400 <__LOCK_REGION_LENGTH__>
		flag = readlast_TWI();				// CHANGE TO HARDWARE SENSE ON RDY PIN?
		if (flag & 0b10000000) {			// or add a timer timeout
			converting = NO;
		}
	}
	stop_TWI();
     416:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>

	start_TWI(addr, TWIWRITE);
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	8d 2f       	mov	r24, r29
     41e:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
	write_TWI(ADS1115CONVERSION);					// Start the ADC conversion
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
	start_TWI(addr, TWIREAD);						// Read the data
     428:	61 e0       	ldi	r22, 0x01	; 1
     42a:	8d 2f       	mov	r24, r29
     42c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
	highbyte = read_TWI();
     430:	0e 94 5f 15 	call	0x2abe	; 0x2abe <read_TWI>
     434:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
     436:	0e 94 6f 15 	call	0x2ade	; 0x2ade <readlast_TWI>
     43a:	d8 2f       	mov	r29, r24
	stop_TWI();
     43c:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>

	value = highbyte;
     440:	6c 2f       	mov	r22, r28
     442:	70 e0       	ldi	r23, 0x00	; 0
	value = value << 8;
     444:	76 2f       	mov	r23, r22
     446:	66 27       	eor	r22, r22
	value |= lowbyte;
     448:	6d 2b       	or	r22, r29

	switch (gain) {									// Convert to voltage
     44a:	84 e0       	ldi	r24, 0x04	; 4
     44c:	f8 16       	cp	r15, r24
     44e:	49 f1       	breq	.+82     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     450:	8f 15       	cp	r24, r15
     452:	30 f0       	brcs	.+12     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     454:	ff 20       	and	r15, r15
     456:	d9 f1       	breq	.+118    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     458:	82 e0       	ldi	r24, 0x02	; 2
     45a:	f8 16       	cp	r15, r24
     45c:	69 f1       	breq	.+90     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     45e:	42 c0       	rjmp	.+132    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     460:	88 e0       	ldi	r24, 0x08	; 8
     462:	f8 16       	cp	r15, r24
     464:	09 f4       	brne	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     466:	42 c0       	rjmp	.+132    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     468:	8a e0       	ldi	r24, 0x0A	; 10
     46a:	f8 16       	cp	r15, r24
     46c:	21 f0       	breq	.+8      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     46e:	86 e0       	ldi	r24, 0x06	; 6
     470:	f8 12       	cpse	r15, r24
     472:	38 c0       	rjmp	.+112    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     474:	0b c0       	rjmp	.+22     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		case PGA0256:
			scale = SCA0256;
     476:	0f 2e       	mov	r0, r31
     478:	f4 e7       	ldi	r31, 0x74	; 116
     47a:	cf 2e       	mov	r12, r31
     47c:	f3 e1       	ldi	r31, 0x13	; 19
     47e:	df 2e       	mov	r13, r31
     480:	f3 e0       	ldi	r31, 0x03	; 3
     482:	ef 2e       	mov	r14, r31
     484:	f7 e3       	ldi	r31, 0x37	; 55
     486:	ff 2e       	mov	r15, r31
     488:	f0 2d       	mov	r31, r0
     48a:	3a c0       	rjmp	.+116    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
			break;
		case PGA0512:
			scale = SCA0512;
			break;
		case PGA1024:
			scale = SCA1024;
     48c:	0f 2e       	mov	r0, r31
     48e:	f4 e7       	ldi	r31, 0x74	; 116
     490:	cf 2e       	mov	r12, r31
     492:	f3 e1       	ldi	r31, 0x13	; 19
     494:	df 2e       	mov	r13, r31
     496:	f3 e0       	ldi	r31, 0x03	; 3
     498:	ef 2e       	mov	r14, r31
     49a:	f8 e3       	ldi	r31, 0x38	; 56
     49c:	ff 2e       	mov	r15, r31
     49e:	f0 2d       	mov	r31, r0
			break;
     4a0:	2f c0       	rjmp	.+94     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		case PGA2048:
			scale = SCA2048;
     4a2:	0f 2e       	mov	r0, r31
     4a4:	f2 e1       	ldi	r31, 0x12	; 18
     4a6:	cf 2e       	mov	r12, r31
     4a8:	f3 e1       	ldi	r31, 0x13	; 19
     4aa:	df 2e       	mov	r13, r31
     4ac:	f3 e8       	ldi	r31, 0x83	; 131
     4ae:	ef 2e       	mov	r14, r31
     4b0:	f8 e3       	ldi	r31, 0x38	; 56
     4b2:	ff 2e       	mov	r15, r31
     4b4:	f0 2d       	mov	r31, r0
			break;
     4b6:	24 c0       	rjmp	.+72     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		case PGA4096:
			scale = SCA4096;
     4b8:	0f 2e       	mov	r0, r31
     4ba:	f4 e7       	ldi	r31, 0x74	; 116
     4bc:	cf 2e       	mov	r12, r31
     4be:	f3 e1       	ldi	r31, 0x13	; 19
     4c0:	df 2e       	mov	r13, r31
     4c2:	f3 e0       	ldi	r31, 0x03	; 3
     4c4:	ef 2e       	mov	r14, r31
     4c6:	f9 e3       	ldi	r31, 0x39	; 57
     4c8:	ff 2e       	mov	r15, r31
     4ca:	f0 2d       	mov	r31, r0
			break;
     4cc:	19 c0       	rjmp	.+50     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		case PGA6144:
			scale = SCA6144;
     4ce:	0f 2e       	mov	r0, r31
     4d0:	fe e2       	ldi	r31, 0x2E	; 46
     4d2:	cf 2e       	mov	r12, r31
     4d4:	fd e9       	ldi	r31, 0x9D	; 157
     4d6:	df 2e       	mov	r13, r31
     4d8:	f4 e4       	ldi	r31, 0x44	; 68
     4da:	ef 2e       	mov	r14, r31
     4dc:	f9 e3       	ldi	r31, 0x39	; 57
     4de:	ff 2e       	mov	r15, r31
     4e0:	f0 2d       	mov	r31, r0
			break;
     4e2:	0e c0       	rjmp	.+28     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		default:
			scale = 0.0;
     4e4:	c1 2c       	mov	r12, r1
     4e6:	d1 2c       	mov	r13, r1
     4e8:	76 01       	movw	r14, r12
			break;
     4ea:	0a c0       	rjmp	.+20     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
	switch (gain) {									// Convert to voltage
		case PGA0256:
			scale = SCA0256;
			break;
		case PGA0512:
			scale = SCA0512;
     4ec:	0f 2e       	mov	r0, r31
     4ee:	f1 e7       	ldi	r31, 0x71	; 113
     4f0:	cf 2e       	mov	r12, r31
     4f2:	f3 e1       	ldi	r31, 0x13	; 19
     4f4:	df 2e       	mov	r13, r31
     4f6:	f3 e8       	ldi	r31, 0x83	; 131
     4f8:	ef 2e       	mov	r14, r31
     4fa:	f7 e3       	ldi	r31, 0x37	; 55
     4fc:	ff 2e       	mov	r15, r31
     4fe:	f0 2d       	mov	r31, r0
		default:
			scale = 0.0;
			break;
	}

	voltage = scale * (float) value;
     500:	07 2e       	mov	r0, r23
     502:	00 0c       	add	r0, r0
     504:	88 0b       	sbc	r24, r24
     506:	99 0b       	sbc	r25, r25
     508:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__floatsisf>
     50c:	9b 01       	movw	r18, r22
     50e:	ac 01       	movw	r20, r24
     510:	c7 01       	movw	r24, r14
     512:	b6 01       	movw	r22, r12
     514:	0e 94 87 19 	call	0x330e	; 0x330e <__mulsf3>
	return(voltage);
     518:	56 2f       	mov	r21, r22
     51a:	47 2f       	mov	r20, r23
     51c:	38 2f       	mov	r19, r24
     51e:	29 2f       	mov	r18, r25

}
     520:	65 2f       	mov	r22, r21
     522:	74 2f       	mov	r23, r20
     524:	83 2f       	mov	r24, r19
     526:	92 2f       	mov	r25, r18
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	ff 90       	pop	r15
     532:	ef 90       	pop	r14
     534:	df 90       	pop	r13
     536:	cf 90       	pop	r12
     538:	08 95       	ret

0000053a <init_BEEPER>:
#include "globals.h"

void init_BEEPER(void)
{

	PORTB.OUTSET = PIN2_bm;
     53a:	e0 e2       	ldi	r30, 0x20	; 32
     53c:	f4 e0       	ldi	r31, 0x04	; 4
     53e:	84 e0       	ldi	r24, 0x04	; 4
     540:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN2_bm;
     542:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = PIN2_bm;
     544:	86 83       	std	Z+6, r24	; 0x06
     546:	08 95       	ret

00000548 <echo_cmd>:
/*------------------------------------------------------------------------------
void echo_cmd(char *cmdline)
	Echo the command line back to the user, adding the NMEA header and checksum.
------------------------------------------------------------------------------*/
void echo_cmd(char *cmdline)
{
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	c4 51       	subi	r28, 0x14	; 20
     556:	d1 40       	sbci	r29, 0x01	; 1
     558:	cd bf       	out	0x3d, r28	; 61
     55a:	de bf       	out	0x3e, r29	; 62

	char format_CMD[] = "$S%dCMD,%s";
     55c:	2b e0       	ldi	r18, 0x0B	; 11
     55e:	e4 ea       	ldi	r30, 0xA4	; 164
     560:	ff e7       	ldi	r31, 0x7F	; 127
     562:	de 01       	movw	r26, r28
     564:	11 96       	adiw	r26, 0x01	; 1
     566:	01 90       	ld	r0, Z+
     568:	0d 92       	st	X+, r0
     56a:	2a 95       	dec	r18
     56c:	e1 f7       	brne	.-8      	; 0x566 <echo_cmd+0x1e>
	char strbuf[BUFSIZE+10];		// Add $SXCMD, and *HH checksum

		// Format and echo the command line
	sprintf(strbuf, format_CMD, get_SPECID, cmdline);
     56e:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
     572:	22 ff       	sbrs	r18, 2
     574:	03 c0       	rjmp	.+6      	; 0x57c <echo_cmd+0x34>
     576:	22 e0       	ldi	r18, 0x02	; 2
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	02 c0       	rjmp	.+4      	; 0x580 <echo_cmd+0x38>
     57c:	21 e0       	ldi	r18, 0x01	; 1
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	9f 93       	push	r25
     582:	8f 93       	push	r24
     584:	3f 93       	push	r19
     586:	2f 93       	push	r18
     588:	ce 01       	movw	r24, r28
     58a:	01 96       	adiw	r24, 0x01	; 1
     58c:	9f 93       	push	r25
     58e:	8f 93       	push	r24
     590:	8e 01       	movw	r16, r28
     592:	04 5f       	subi	r16, 0xF4	; 244
     594:	1f 4f       	sbci	r17, 0xFF	; 255
     596:	1f 93       	push	r17
     598:	0f 93       	push	r16
     59a:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
	checksum_NMEA(strbuf);
     59e:	c8 01       	movw	r24, r16
     5a0:	0e 94 9f 09 	call	0x133e	; 0x133e <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
     5a4:	f8 01       	movw	r30, r16
     5a6:	01 90       	ld	r0, Z+
     5a8:	00 20       	and	r0, r0
     5aa:	e9 f7       	brne	.-6      	; 0x5a6 <echo_cmd+0x5e>
     5ac:	31 97       	sbiw	r30, 0x01	; 1
     5ae:	af 01       	movw	r20, r30
     5b0:	40 1b       	sub	r20, r16
     5b2:	51 0b       	sbc	r21, r17
     5b4:	b8 01       	movw	r22, r16
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	0e 94 11 16 	call	0x2c22	; 0x2c22 <send_USART>
//send_USART(1, (uint8_t*) strbuf, strlen(strbuf)); // testing the port
}
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	cc 5e       	subi	r28, 0xEC	; 236
     5c2:	de 4f       	sbci	r29, 0xFE	; 254
     5c4:	cd bf       	out	0x3d, r28	; 61
     5c6:	de bf       	out	0x3e, r29	; 62
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	08 95       	ret

000005d2 <isaletter>:
	Checks if the character is in the range A-Z and a-z
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if (c >= 'a' && c <= 'z') {
     5d2:	9f e9       	ldi	r25, 0x9F	; 159
     5d4:	98 0f       	add	r25, r24
     5d6:	9a 31       	cpi	r25, 0x1A	; 26
     5d8:	28 f0       	brcs	.+10     	; 0x5e4 <isaletter+0x12>
		return(1);
	}

	if (c >= 'A' && c <= 'Z') {
     5da:	81 54       	subi	r24, 0x41	; 65
     5dc:	8a 31       	cpi	r24, 0x1A	; 26
     5de:	20 f4       	brcc	.+8      	; 0x5e8 <isaletter+0x16>
		return(1);
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	08 95       	ret
------------------------------------------------------------------------------*/
uint8_t isaletter(char c)
{

	if (c >= 'a' && c <= 'z') {
		return(1);
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	08 95       	ret

	if (c >= 'A' && c <= 'Z') {
		return(1);
	}

	return(0);
     5e8:	80 e0       	ldi	r24, 0x00	; 0

}
     5ea:	08 95       	ret

000005ec <parse_cmd>:
		ID - An identifier selected by the user, a character string.
	These components are in the ParsedCMD structure defined in main.c. The pcmd
	variable is a ParsedCMD array.
------------------------------------------------------------------------------*/
void parse_cmd(char *ptr, uint8_t n)
{
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	ec 01       	movw	r28, r24

	uint8_t i;

		// Clear the command parts
	pcmd[n].cverb = '?';
     5f8:	e6 2e       	mov	r14, r22
     5fa:	f1 2c       	mov	r15, r1
     5fc:	84 e3       	ldi	r24, 0x34	; 52
     5fe:	8e 9d       	mul	r24, r14
     600:	f0 01       	movw	r30, r0
     602:	8f 9d       	mul	r24, r15
     604:	f0 0d       	add	r31, r0
     606:	11 24       	eor	r1, r1
     608:	eb 5f       	subi	r30, 0xFB	; 251
     60a:	f7 4d       	sbci	r31, 0xD7	; 215
     60c:	8f e3       	ldi	r24, 0x3F	; 63
     60e:	80 83       	st	Z, r24
	pcmd[n].cobject = '?';
     610:	81 83       	std	Z+1, r24	; 0x01
	pcmd[n].cvalue[0] = '\0';
     612:	12 82       	std	Z+2, r1	; 0x02
	pcmd[n].cid[0] = '\0';
     614:	13 a6       	std	Z+43, r1	; 0x2b

		// Find the verb
	while (!isaletter(*ptr)) {
     616:	04 c0       	rjmp	.+8      	; 0x620 <parse_cmd+0x34>
		if (*ptr == '\0') {
     618:	11 23       	and	r17, r17
     61a:	09 f4       	brne	.+2      	; 0x61e <parse_cmd+0x32>
     61c:	75 c0       	rjmp	.+234    	; 0x708 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     61e:	21 96       	adiw	r28, 0x01	; 1
	pcmd[n].cobject = '?';
	pcmd[n].cvalue[0] = '\0';
	pcmd[n].cid[0] = '\0';

		// Find the verb
	while (!isaletter(*ptr)) {
     620:	18 81       	ld	r17, Y
     622:	81 2f       	mov	r24, r17
     624:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <isaletter>
     628:	88 23       	and	r24, r24
     62a:	b1 f3       	breq	.-20     	; 0x618 <parse_cmd+0x2c>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cverb = *ptr++;
     62c:	21 96       	adiw	r28, 0x01	; 1
     62e:	84 e3       	ldi	r24, 0x34	; 52
     630:	8e 9d       	mul	r24, r14
     632:	f0 01       	movw	r30, r0
     634:	8f 9d       	mul	r24, r15
     636:	f0 0d       	add	r31, r0
     638:	11 24       	eor	r1, r1
     63a:	eb 5f       	subi	r30, 0xFB	; 251
     63c:	f7 4d       	sbci	r31, 0xD7	; 215
     63e:	10 83       	st	Z, r17

		// Find the object
	while (!isaletter(*ptr)) {
     640:	04 c0       	rjmp	.+8      	; 0x64a <parse_cmd+0x5e>
		if (*ptr == '\0') {
     642:	11 23       	and	r17, r17
     644:	09 f4       	brne	.+2      	; 0x648 <parse_cmd+0x5c>
     646:	60 c0       	rjmp	.+192    	; 0x708 <parse_cmd+0x11c>
			return;
		}
		ptr++;
     648:	21 96       	adiw	r28, 0x01	; 1
		ptr++;
	}
	pcmd[n].cverb = *ptr++;

		// Find the object
	while (!isaletter(*ptr)) {
     64a:	18 81       	ld	r17, Y
     64c:	81 2f       	mov	r24, r17
     64e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <isaletter>
     652:	88 23       	and	r24, r24
     654:	b1 f3       	breq	.-20     	; 0x642 <parse_cmd+0x56>
		if (*ptr == '\0') {
			return;
		}
		ptr++;
	}
	pcmd[n].cobject = *ptr++;
     656:	21 96       	adiw	r28, 0x01	; 1
     658:	84 e3       	ldi	r24, 0x34	; 52
     65a:	8e 9d       	mul	r24, r14
     65c:	f0 01       	movw	r30, r0
     65e:	8f 9d       	mul	r24, r15
     660:	f0 0d       	add	r31, r0
     662:	11 24       	eor	r1, r1
     664:	eb 5f       	subi	r30, 0xFB	; 251
     666:	f7 4d       	sbci	r31, 0xD7	; 215
     668:	11 83       	std	Z+1, r17	; 0x01

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	2a c0       	rjmp	.+84     	; 0x6c2 <parse_cmd+0xd6>
		if (*ptr == '\0') {
     66e:	98 81       	ld	r25, Y
     670:	91 11       	cpse	r25, r1
     672:	0c c0       	rjmp	.+24     	; 0x68c <parse_cmd+0xa0>
			pcmd[n].cvalue[i] = '\0';
     674:	94 e3       	ldi	r25, 0x34	; 52
     676:	9e 9d       	mul	r25, r14
     678:	f0 01       	movw	r30, r0
     67a:	9f 9d       	mul	r25, r15
     67c:	f0 0d       	add	r31, r0
     67e:	11 24       	eor	r1, r1
     680:	eb 5f       	subi	r30, 0xFB	; 251
     682:	f7 4d       	sbci	r31, 0xD7	; 215
     684:	e8 0f       	add	r30, r24
     686:	f1 1d       	adc	r31, r1
     688:	12 82       	std	Z+2, r1	; 0x02
			return;
     68a:	3e c0       	rjmp	.+124    	; 0x708 <parse_cmd+0x11c>
		}
		if (*ptr == ';') {
     68c:	9b 33       	cpi	r25, 0x3B	; 59
     68e:	61 f4       	brne	.+24     	; 0x6a8 <parse_cmd+0xbc>
			pcmd[n].cvalue[i] = '\0';
     690:	94 e3       	ldi	r25, 0x34	; 52
     692:	9e 9d       	mul	r25, r14
     694:	f0 01       	movw	r30, r0
     696:	9f 9d       	mul	r25, r15
     698:	f0 0d       	add	r31, r0
     69a:	11 24       	eor	r1, r1
     69c:	eb 5f       	subi	r30, 0xFB	; 251
     69e:	f7 4d       	sbci	r31, 0xD7	; 215
     6a0:	e8 0f       	add	r30, r24
     6a2:	f1 1d       	adc	r31, r1
     6a4:	12 82       	std	Z+2, r1	; 0x02
			break;
     6a6:	0f c0       	rjmp	.+30     	; 0x6c6 <parse_cmd+0xda>
		}
		pcmd[n].cvalue[i] = *ptr++;
     6a8:	21 96       	adiw	r28, 0x01	; 1
     6aa:	24 e3       	ldi	r18, 0x34	; 52
     6ac:	2e 9d       	mul	r18, r14
     6ae:	f0 01       	movw	r30, r0
     6b0:	2f 9d       	mul	r18, r15
     6b2:	f0 0d       	add	r31, r0
     6b4:	11 24       	eor	r1, r1
     6b6:	eb 5f       	subi	r30, 0xFB	; 251
     6b8:	f7 4d       	sbci	r31, 0xD7	; 215
     6ba:	e8 0f       	add	r30, r24
     6bc:	f1 1d       	adc	r31, r1
     6be:	92 83       	std	Z+2, r25	; 0x02
		ptr++;
	}
	pcmd[n].cobject = *ptr++;

		// Get the value, if there is one
	for (i = 0; i < CVALUESIZE; i++) {
     6c0:	8f 5f       	subi	r24, 0xFF	; 255
     6c2:	89 32       	cpi	r24, 0x29	; 41
     6c4:	a0 f2       	brcs	.-88     	; 0x66e <parse_cmd+0x82>
		}
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
     6c6:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < CIDSIZE; i++) {
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	1c c0       	rjmp	.+56     	; 0x704 <parse_cmd+0x118>
		if (*ptr == '\0') {
     6cc:	98 81       	ld	r25, Y
     6ce:	91 11       	cpse	r25, r1
     6d0:	0c c0       	rjmp	.+24     	; 0x6ea <parse_cmd+0xfe>
			pcmd[n].cid[i] = '\0';
     6d2:	94 e3       	ldi	r25, 0x34	; 52
     6d4:	9e 9d       	mul	r25, r14
     6d6:	f0 01       	movw	r30, r0
     6d8:	9f 9d       	mul	r25, r15
     6da:	f0 0d       	add	r31, r0
     6dc:	11 24       	eor	r1, r1
     6de:	eb 5f       	subi	r30, 0xFB	; 251
     6e0:	f7 4d       	sbci	r31, 0xD7	; 215
     6e2:	e8 0f       	add	r30, r24
     6e4:	f1 1d       	adc	r31, r1
     6e6:	13 a6       	std	Z+43, r1	; 0x2b
			return;
     6e8:	0f c0       	rjmp	.+30     	; 0x708 <parse_cmd+0x11c>
		}
		pcmd[n].cid[i] = *ptr++;
     6ea:	21 96       	adiw	r28, 0x01	; 1
     6ec:	24 e3       	ldi	r18, 0x34	; 52
     6ee:	2e 9d       	mul	r18, r14
     6f0:	f0 01       	movw	r30, r0
     6f2:	2f 9d       	mul	r18, r15
     6f4:	f0 0d       	add	r31, r0
     6f6:	11 24       	eor	r1, r1
     6f8:	eb 5f       	subi	r30, 0xFB	; 251
     6fa:	f7 4d       	sbci	r31, 0xD7	; 215
     6fc:	e8 0f       	add	r30, r24
     6fe:	f1 1d       	adc	r31, r1
     700:	93 a7       	std	Z+43, r25	; 0x2b
		pcmd[n].cvalue[i] = *ptr++;
	}

		// get the command ID if there is one
	ptr++;
	for (i = 0; i < CIDSIZE; i++) {
     702:	8f 5f       	subi	r24, 0xFF	; 255
     704:	89 30       	cpi	r24, 0x09	; 9
     706:	10 f3       	brcs	.-60     	; 0x6cc <parse_cmd+0xe0>
		pcmd[n].cid[i] = *ptr++;
	}	

	return;

}
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	1f 91       	pop	r17
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	08 95       	ret

00000714 <send_prompt>:

	If specMech is rebooted, it will only prompt with a single exclamation
	point (!) until it receives an acknowledgment in the form of a single !.
------------------------------------------------------------------------------*/
void send_prompt(uint8_t prompt_flag)
{
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	6d 97       	sbiw	r28, 0x1d	; 29
     722:	cd bf       	out	0x3d, r28	; 61
     724:	de bf       	out	0x3e, r29	; 62

	const char str0[] = ">";
     726:	2e e3       	ldi	r18, 0x3E	; 62
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	29 83       	std	Y+1, r18	; 0x01
     72c:	3a 83       	std	Y+2, r19	; 0x02
	const char str1[] = "!";
     72e:	21 e2       	ldi	r18, 0x21	; 33
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	2b 83       	std	Y+3, r18	; 0x03
     734:	3c 83       	std	Y+4, r19	; 0x04

	char prompt_str[25];

	switch (prompt_flag) {
     736:	88 23       	and	r24, r24
     738:	19 f0       	breq	.+6      	; 0x740 <send_prompt+0x2c>
     73a:	81 30       	cpi	r24, 0x01	; 1
     73c:	b9 f0       	breq	.+46     	; 0x76c <send_prompt+0x58>
     73e:	2c c0       	rjmp	.+88     	; 0x798 <send_prompt+0x84>
		case GREATERPROMPT:
			strcpy(prompt_str, str0);
     740:	8e 01       	movw	r16, r28
     742:	0b 5f       	subi	r16, 0xFB	; 251
     744:	1f 4f       	sbci	r17, 0xFF	; 255
     746:	be 01       	movw	r22, r28
     748:	6f 5f       	subi	r22, 0xFF	; 255
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
     74c:	c8 01       	movw	r24, r16
     74e:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     752:	f8 01       	movw	r30, r16
     754:	01 90       	ld	r0, Z+
     756:	00 20       	and	r0, r0
     758:	e9 f7       	brne	.-6      	; 0x754 <send_prompt+0x40>
     75a:	31 97       	sbiw	r30, 0x01	; 1
     75c:	af 01       	movw	r20, r30
     75e:	40 1b       	sub	r20, r16
     760:	51 0b       	sbc	r21, r17
     762:	b8 01       	movw	r22, r16
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	0e 94 11 16 	call	0x2c22	; 0x2c22 <send_USART>
			break;
     76a:	2b c0       	rjmp	.+86     	; 0x7c2 <send_prompt+0xae>
			strcpy(prompt_str, str0);
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
			break;
*/
		case EXCLAIMPROMPT:
			strcpy(prompt_str, str1);
     76c:	8e 01       	movw	r16, r28
     76e:	0b 5f       	subi	r16, 0xFB	; 251
     770:	1f 4f       	sbci	r17, 0xFF	; 255
     772:	be 01       	movw	r22, r28
     774:	6d 5f       	subi	r22, 0xFD	; 253
     776:	7f 4f       	sbci	r23, 0xFF	; 255
     778:	c8 01       	movw	r24, r16
     77a:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     77e:	f8 01       	movw	r30, r16
     780:	01 90       	ld	r0, Z+
     782:	00 20       	and	r0, r0
     784:	e9 f7       	brne	.-6      	; 0x780 <send_prompt+0x6c>
     786:	31 97       	sbiw	r30, 0x01	; 1
     788:	af 01       	movw	r20, r30
     78a:	40 1b       	sub	r20, r16
     78c:	51 0b       	sbc	r21, r17
     78e:	b8 01       	movw	r22, r16
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	0e 94 11 16 	call	0x2c22	; 0x2c22 <send_USART>
			break;
     796:	15 c0       	rjmp	.+42     	; 0x7c2 <send_prompt+0xae>

		default:
			strcpy(prompt_str, str1);
     798:	8e 01       	movw	r16, r28
     79a:	0b 5f       	subi	r16, 0xFB	; 251
     79c:	1f 4f       	sbci	r17, 0xFF	; 255
     79e:	be 01       	movw	r22, r28
     7a0:	6d 5f       	subi	r22, 0xFD	; 253
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
     7a4:	c8 01       	movw	r24, r16
     7a6:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <strcpy>
			send_USART(0, (uint8_t*) prompt_str, strlen(prompt_str));
     7aa:	f8 01       	movw	r30, r16
     7ac:	01 90       	ld	r0, Z+
     7ae:	00 20       	and	r0, r0
     7b0:	e9 f7       	brne	.-6      	; 0x7ac <send_prompt+0x98>
     7b2:	31 97       	sbiw	r30, 0x01	; 1
     7b4:	af 01       	movw	r20, r30
     7b6:	40 1b       	sub	r20, r16
     7b8:	51 0b       	sbc	r21, r17
     7ba:	b8 01       	movw	r22, r16
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	0e 94 11 16 	call	0x2c22	; 0x2c22 <send_USART>
			break;

	}

}
     7c2:	6d 96       	adiw	r28, 0x1d	; 29
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	08 95       	ret

000007d2 <commands>:
/*------------------------------------------------------------------------------
void commands(void)
	Command loop
------------------------------------------------------------------------------*/
void commands(void)
{
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	cf 5f       	subi	r28, 0xFF	; 255
     7e0:	d1 09       	sbc	r29, r1
     7e2:	cd bf       	out	0x3d, r28	; 61
     7e4:	de bf       	out	0x3e, r29	; 62
	uint8_t i, prompt_flag = GREATERPROMPT;
	static uint8_t rebootnack = 1;
	static uint8_t cstack = 0;		// Index for pcmd

	// Copy the command string to cmdline
	for (i = 0; recv0_buf.length; i++) {
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	1d c0       	rjmp	.+58     	; 0x824 <commands+0x52>
		cmdline[i] = recv0_buf.data[recv0_buf.tail];
     7ea:	07 e1       	ldi	r16, 0x17	; 23
     7ec:	1c e2       	ldi	r17, 0x2C	; 44
     7ee:	f8 01       	movw	r30, r16
     7f0:	80 81       	ld	r24, Z
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	fc 01       	movw	r30, r24
     7f6:	e9 5e       	subi	r30, 0xE9	; 233
     7f8:	f4 4d       	sbci	r31, 0xD4	; 212
     7fa:	40 81       	ld	r20, Z
     7fc:	e1 e0       	ldi	r30, 0x01	; 1
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	ec 0f       	add	r30, r28
     802:	fd 1f       	adc	r31, r29
     804:	e3 0f       	add	r30, r19
     806:	f1 1d       	adc	r31, r1
     808:	40 83       	st	Z, r20
		recv0_buf.length--;
     80a:	21 50       	subi	r18, 0x01	; 1
     80c:	20 93 19 2c 	sts	0x2C19, r18	; 0x802c19 <recv0_buf+0x102>
		recv0_buf.tail = (recv0_buf.tail + 1) % BUFSIZE;
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	6f ef       	ldi	r22, 0xFF	; 255
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divmodhi4>
     81a:	f8 01       	movw	r30, r16
     81c:	80 83       	st	Z, r24
		if (cmdline[i] == '\0') {
     81e:	44 23       	and	r20, r20
     820:	29 f0       	breq	.+10     	; 0x82c <commands+0x5a>
	uint8_t i, prompt_flag = GREATERPROMPT;
	static uint8_t rebootnack = 1;
	static uint8_t cstack = 0;		// Index for pcmd

	// Copy the command string to cmdline
	for (i = 0; recv0_buf.length; i++) {
     822:	3f 5f       	subi	r19, 0xFF	; 255
     824:	20 91 19 2c 	lds	r18, 0x2C19	; 0x802c19 <recv0_buf+0x102>
     828:	21 11       	cpse	r18, r1
     82a:	df cf       	rjmp	.-66     	; 0x7ea <commands+0x18>
		recv0_buf.tail = (recv0_buf.tail + 1) % BUFSIZE;
		if (cmdline[i] == '\0') {
			break;
		}
	}
	cmdline[i] = '\0';		// Overflow protection
     82c:	e1 e0       	ldi	r30, 0x01	; 1
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	ec 0f       	add	r30, r28
     832:	fd 1f       	adc	r31, r29
     834:	e3 0f       	add	r30, r19
     836:	f1 1d       	adc	r31, r1
     838:	10 82       	st	Z, r1
	if (rebootnack) {
     83a:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
     83e:	88 23       	and	r24, r24
     840:	29 f1       	breq	.+74     	; 0x88c <commands+0xba>
		if ((cmdline[0] == '!') && (cmdline[1] == '\0')) {
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	81 32       	cpi	r24, 0x21	; 33
     846:	99 f4       	brne	.+38     	; 0x86e <commands+0x9c>
     848:	9a 81       	ldd	r25, Y+2	; 0x02
     84a:	91 11       	cpse	r25, r1
     84c:	10 c0       	rjmp	.+32     	; 0x86e <commands+0x9c>
			init_RTC(511);		// 1-sec RTC clock ticks
     84e:	8f ef       	ldi	r24, 0xFF	; 255
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 7d 14 	call	0x28fa	; 0x28fa <init_RTC>
			timeoutOLED = 5;	// 5-sec display timeout (min)
     856:	85 e0       	ldi	r24, 0x05	; 5
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <timeoutOLED>
     85e:	90 93 10 2a 	sts	0x2A10, r25	; 0x802a10 <timeoutOLED+0x1>
			send_prompt(GREATERPROMPT);
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	0e 94 8a 03 	call	0x714	; 0x714 <send_prompt>
			rebootnack = 0;
     868:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
			return;
     86c:	7a c0       	rjmp	.+244    	; 0x962 <commands+0x190>
		} else if ((cmdline[0] == '!') && (cmdline[1] != '\0')) {
     86e:	81 32       	cpi	r24, 0x21	; 33
     870:	49 f4       	brne	.+18     	; 0x884 <commands+0xb2>
     872:	8a 81       	ldd	r24, Y+2	; 0x02
     874:	88 23       	and	r24, r24
     876:	31 f0       	breq	.+12     	; 0x884 <commands+0xb2>
			send_prompt(EXCLAIMPROMPT);
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	0e 94 8a 03 	call	0x714	; 0x714 <send_prompt>
			reboot();
     87e:	0e 94 d6 17 	call	0x2fac	; 0x2fac <reboot>
			return;
     882:	6f c0       	rjmp	.+222    	; 0x962 <commands+0x190>
		} else {
			send_prompt(EXCLAIMPROMPT);
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	0e 94 8a 03 	call	0x714	; 0x714 <send_prompt>
			return;
     88a:	6b c0       	rjmp	.+214    	; 0x962 <commands+0x190>
		}
	}

	// Echo the command back to the user
	echo_cmd(cmdline);
     88c:	ce 01       	movw	r24, r28
     88e:	01 96       	adiw	r24, 0x01	; 1
     890:	0e 94 a4 02 	call	0x548	; 0x548 <echo_cmd>

	if (strlen(cmdline) == 0) {		// Catch a terminal cr (not an error)
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	81 11       	cpse	r24, r1
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <commands+0xce>
		send_prompt(GREATERPROMPT);
     89a:	0e 94 8a 03 	call	0x714	; 0x714 <send_prompt>
		return;
     89e:	61 c0       	rjmp	.+194    	; 0x962 <commands+0x190>
	}

	parse_cmd(cmdline, cstack);
     8a0:	60 91 02 28 	lds	r22, 0x2802	; 0x802802 <__data_end>
     8a4:	ce 01       	movw	r24, r28
     8a6:	01 96       	adiw	r24, 0x01	; 1
     8a8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <parse_cmd>
	verb = pcmd[cstack].cverb;
     8ac:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     8b0:	f4 e3       	ldi	r31, 0x34	; 52
     8b2:	8f 9f       	mul	r24, r31
     8b4:	d0 01       	movw	r26, r0
     8b6:	11 24       	eor	r1, r1
     8b8:	ab 5f       	subi	r26, 0xFB	; 251
     8ba:	b7 4d       	sbci	r27, 0xD7	; 215
     8bc:	ec 91       	ld	r30, X
	object = pcmd[cstack].cobject;
     8be:	11 96       	adiw	r26, 0x01	; 1
     8c0:	9c 91       	ld	r25, X

	switch (verb) {
     8c2:	4e 2f       	mov	r20, r30
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	fa 01       	movw	r30, r20
     8c8:	e2 55       	subi	r30, 0x52	; 82
     8ca:	f1 09       	sbc	r31, r1
     8cc:	e3 32       	cpi	r30, 0x23	; 35
     8ce:	f1 05       	cpc	r31, r1
     8d0:	d0 f5       	brcc	.+116    	; 0x946 <commands+0x174>
     8d2:	e0 5b       	subi	r30, 0xB0	; 176
     8d4:	ff 4f       	sbci	r31, 0xFF	; 255
     8d6:	0c 94 85 1d 	jmp	0x3b0a	; 0x3b0a <__tablejump2__>
		case 'c':				// close
			prompt_flag = close_PNEU(object);
     8da:	89 2f       	mov	r24, r25
     8dc:	0e 94 46 0c 	call	0x188c	; 0x188c <close_PNEU>
     8e0:	28 2f       	mov	r18, r24
			break;
     8e2:	32 c0       	rjmp	.+100    	; 0x948 <commands+0x176>

		case 'o':				// open
			prompt_flag = open_PNEU(object);
     8e4:	89 2f       	mov	r24, r25
     8e6:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <open_PNEU>
     8ea:	28 2f       	mov	r18, r24
			break;
     8ec:	2d c0       	rjmp	.+90     	; 0x948 <commands+0x176>

		case 'm':
			prompt_flag = ROBOMove(cstack, 64);
     8ee:	60 e4       	ldi	r22, 0x40	; 64
     8f0:	0e 94 4b 14 	call	0x2896	; 0x2896 <ROBOMove>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f4:	2a e2       	ldi	r18, 0x2A	; 42
     8f6:	8c e2       	ldi	r24, 0x2C	; 44
     8f8:	9a e0       	ldi	r25, 0x0A	; 10
     8fa:	21 50       	subi	r18, 0x01	; 1
     8fc:	80 40       	sbci	r24, 0x00	; 0
     8fe:	90 40       	sbci	r25, 0x00	; 0
     900:	e1 f7       	brne	.-8      	; 0x8fa <commands+0x128>
     902:	00 00       	nop
			_delay_ms(1000);
			prompt_flag = ROBOMove(cstack, 0);
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     90a:	0e 94 4b 14 	call	0x2896	; 0x2896 <ROBOMove>
     90e:	28 2f       	mov	r18, r24
			break;
     910:	1b c0       	rjmp	.+54     	; 0x948 <commands+0x176>

		case 'r':				// Report
			prompt_flag = report(cstack);
     912:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <report>
     916:	28 2f       	mov	r18, r24
			break;
     918:	17 c0       	rjmp	.+46     	; 0x948 <commands+0x176>

		case 's':				// Set
			prompt_flag = set(cstack);
     91a:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <set>
     91e:	28 2f       	mov	r18, r24
			break;
     920:	13 c0       	rjmp	.+38     	; 0x948 <commands+0x176>

		case 't':
			testroutine();
     922:	0e 94 39 15 	call	0x2a72	; 0x2a72 <testroutine>
void commands(void)
{

	char cmdline[BUFSIZE];			// BUFSIZE is the size of the ring buffer
	char verb, object;
	uint8_t i, prompt_flag = GREATERPROMPT;
     926:	20 e0       	ldi	r18, 0x00	; 0
			prompt_flag = set(cstack);
			break;

		case 't':
			testroutine();
			break;
     928:	0f c0       	rjmp	.+30     	; 0x948 <commands+0x176>

		case 'R':				// Reboot
			send_prompt(GREATERPROMPT);
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	0e 94 8a 03 	call	0x714	; 0x714 <send_prompt>
     930:	ea e6       	ldi	r30, 0x6A	; 106
     932:	f4 e0       	ldi	r31, 0x04	; 4
     934:	21 e0       	ldi	r18, 0x01	; 1
     936:	e1 50       	subi	r30, 0x01	; 1
     938:	f0 40       	sbci	r31, 0x00	; 0
     93a:	20 40       	sbci	r18, 0x00	; 0
     93c:	e1 f7       	brne	.-8      	; 0x936 <commands+0x164>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <commands+0x16e>
			_delay_ms(100);		// Avoid finishing the command loop before reboot
			reboot();
     940:	0e 94 d6 17 	call	0x2fac	; 0x2fac <reboot>
			return;
     944:	0e c0       	rjmp	.+28     	; 0x962 <commands+0x190>

		default:
			prompt_flag = ERRORPROMPT;
     946:	22 e0       	ldi	r18, 0x02	; 2
			break;			
	}

	cstack = (cstack + 1) % CSTACKSIZE;
     948:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <__data_end>
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	6a e0       	ldi	r22, 0x0A	; 10
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divmodhi4>
     958:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <__data_end>
	send_prompt(prompt_flag);
     95c:	82 2f       	mov	r24, r18
     95e:	0e 94 8a 03 	call	0x714	; 0x714 <send_prompt>

}
     962:	c1 50       	subi	r28, 0x01	; 1
     964:	df 4f       	sbci	r29, 0xFF	; 255
     966:	cd bf       	out	0x3d, r28	; 61
     968:	de bf       	out	0x3e, r29	; 62
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	08 95       	ret

00000974 <convert_ds2iso>:
	Output:
		isotime - 20 character array with the UTC time in ISO format:
			YYYY-MM-DDThh:mm:ss
------------------------------------------------------------------------------*/
void convert_ds2iso(char *isotime, uint8_t *ds3231time)
{
     974:	fb 01       	movw	r30, r22
	uint8_t year, month, date, hours, minutes, seconds;

	seconds = (*ds3231time++);
     976:	70 81       	ld	r23, Z
	minutes = (*ds3231time++);
     978:	61 81       	ldd	r22, Z+1	; 0x01
	hours = (*ds3231time++);
     97a:	52 81       	ldd	r21, Z+2	; 0x02
	date = (*ds3231time++);		// dummy assignment for day of week
	date = (*ds3231time++);
     97c:	44 81       	ldd	r20, Z+4	; 0x04
	month = (*ds3231time++);
     97e:	35 81       	ldd	r19, Z+5	; 0x05
	year = (*ds3231time);
     980:	26 81       	ldd	r18, Z+6	; 0x06

	sprintf(isotime, "20%02x-%02x-%02xT%02x:%02x:%02x",
     982:	1f 92       	push	r1
     984:	7f 93       	push	r23
     986:	1f 92       	push	r1
     988:	6f 93       	push	r22
     98a:	1f 92       	push	r1
     98c:	5f 93       	push	r21
     98e:	1f 92       	push	r1
     990:	4f 93       	push	r20
     992:	1f 92       	push	r1
     994:	3f 93       	push	r19
     996:	1f 92       	push	r1
     998:	2f 93       	push	r18
     99a:	2f ea       	ldi	r18, 0xAF	; 175
     99c:	3f e7       	ldi	r19, 0x7F	; 127
     99e:	3f 93       	push	r19
     9a0:	2f 93       	push	r18
     9a2:	9f 93       	push	r25
     9a4:	8f 93       	push	r24
     9a6:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
		year, month, date, hours, minutes, seconds);

}
     9aa:	8d b7       	in	r24, 0x3d	; 61
     9ac:	9e b7       	in	r25, 0x3e	; 62
     9ae:	40 96       	adiw	r24, 0x10	; 16
     9b0:	8d bf       	out	0x3d, r24	; 61
     9b2:	9e bf       	out	0x3e, r25	; 62
     9b4:	08 95       	ret

000009b6 <convert_iso2ds>:
	Creates a 7-byte ds3231time array.

	ISO time format is YYYY-MM-DDThh:mm:ssZ
------------------------------------------------------------------------------*/
void convert_iso2ds(uint8_t *ds3231time, char *isotime)
{
     9b6:	dc 01       	movw	r26, r24
     9b8:	fb 01       	movw	r30, r22

	ds3231time[0] = (((isotime[17]-48) << 4) | (isotime[18]-48));	// sec
     9ba:	81 89       	ldd	r24, Z+17	; 0x11
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	c0 97       	sbiw	r24, 0x30	; 48
     9c0:	82 95       	swap	r24
     9c2:	92 95       	swap	r25
     9c4:	90 7f       	andi	r25, 0xF0	; 240
     9c6:	98 27       	eor	r25, r24
     9c8:	80 7f       	andi	r24, 0xF0	; 240
     9ca:	98 27       	eor	r25, r24
     9cc:	92 89       	ldd	r25, Z+18	; 0x12
     9ce:	90 53       	subi	r25, 0x30	; 48
     9d0:	89 2b       	or	r24, r25
     9d2:	8c 93       	st	X, r24
	ds3231time[1] = (((isotime[14]-48) << 4) | (isotime[15]-48));	// min
     9d4:	86 85       	ldd	r24, Z+14	; 0x0e
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	c0 97       	sbiw	r24, 0x30	; 48
     9da:	82 95       	swap	r24
     9dc:	92 95       	swap	r25
     9de:	90 7f       	andi	r25, 0xF0	; 240
     9e0:	98 27       	eor	r25, r24
     9e2:	80 7f       	andi	r24, 0xF0	; 240
     9e4:	98 27       	eor	r25, r24
     9e6:	97 85       	ldd	r25, Z+15	; 0x0f
     9e8:	90 53       	subi	r25, 0x30	; 48
     9ea:	89 2b       	or	r24, r25
     9ec:	11 96       	adiw	r26, 0x01	; 1
     9ee:	8c 93       	st	X, r24
     9f0:	11 97       	sbiw	r26, 0x01	; 1
	ds3231time[2] = (((isotime[11]-48) << 4) | (isotime[12]-48));	// hr
     9f2:	83 85       	ldd	r24, Z+11	; 0x0b
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	c0 97       	sbiw	r24, 0x30	; 48
     9f8:	82 95       	swap	r24
     9fa:	92 95       	swap	r25
     9fc:	90 7f       	andi	r25, 0xF0	; 240
     9fe:	98 27       	eor	r25, r24
     a00:	80 7f       	andi	r24, 0xF0	; 240
     a02:	98 27       	eor	r25, r24
     a04:	94 85       	ldd	r25, Z+12	; 0x0c
     a06:	90 53       	subi	r25, 0x30	; 48
     a08:	89 2b       	or	r24, r25
     a0a:	12 96       	adiw	r26, 0x02	; 2
     a0c:	8c 93       	st	X, r24
     a0e:	12 97       	sbiw	r26, 0x02	; 2
	ds3231time[3] = 1;												// day of wk
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	13 96       	adiw	r26, 0x03	; 3
     a14:	8c 93       	st	X, r24
     a16:	13 97       	sbiw	r26, 0x03	; 3
	ds3231time[4] = (((isotime[8]-48) << 4) | (isotime[9]-48));		// date
     a18:	80 85       	ldd	r24, Z+8	; 0x08
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	c0 97       	sbiw	r24, 0x30	; 48
     a1e:	82 95       	swap	r24
     a20:	92 95       	swap	r25
     a22:	90 7f       	andi	r25, 0xF0	; 240
     a24:	98 27       	eor	r25, r24
     a26:	80 7f       	andi	r24, 0xF0	; 240
     a28:	98 27       	eor	r25, r24
     a2a:	91 85       	ldd	r25, Z+9	; 0x09
     a2c:	90 53       	subi	r25, 0x30	; 48
     a2e:	89 2b       	or	r24, r25
     a30:	14 96       	adiw	r26, 0x04	; 4
     a32:	8c 93       	st	X, r24
     a34:	14 97       	sbiw	r26, 0x04	; 4
	ds3231time[5] = (((isotime[5]-48) << 4) | (isotime[6]-48));		// mon
     a36:	25 81       	ldd	r18, Z+5	; 0x05
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	20 53       	subi	r18, 0x30	; 48
     a3c:	31 09       	sbc	r19, r1
     a3e:	22 95       	swap	r18
     a40:	32 95       	swap	r19
     a42:	30 7f       	andi	r19, 0xF0	; 240
     a44:	32 27       	eor	r19, r18
     a46:	20 7f       	andi	r18, 0xF0	; 240
     a48:	32 27       	eor	r19, r18
     a4a:	86 81       	ldd	r24, Z+6	; 0x06
     a4c:	80 53       	subi	r24, 0x30	; 48
     a4e:	28 2b       	or	r18, r24
     a50:	15 96       	adiw	r26, 0x05	; 5
     a52:	2c 93       	st	X, r18
     a54:	15 97       	sbiw	r26, 0x05	; 5
	ds3231time[6] = (((isotime[2]-48) << 4) | (isotime[3]-48));		// yr
     a56:	22 81       	ldd	r18, Z+2	; 0x02
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	20 53       	subi	r18, 0x30	; 48
     a5c:	31 09       	sbc	r19, r1
     a5e:	22 95       	swap	r18
     a60:	32 95       	swap	r19
     a62:	30 7f       	andi	r19, 0xF0	; 240
     a64:	32 27       	eor	r19, r18
     a66:	20 7f       	andi	r18, 0xF0	; 240
     a68:	32 27       	eor	r19, r18
     a6a:	83 81       	ldd	r24, Z+3	; 0x03
     a6c:	80 53       	subi	r24, 0x30	; 48
     a6e:	28 2b       	or	r18, r24
     a70:	16 96       	adiw	r26, 0x06	; 6
     a72:	2c 93       	st	X, r18
     a74:	08 95       	ret

00000a76 <read_DS3231>:

	The clock time is UTC. Communications to the outside is via the ISO time
	format: YYYY-MM-DDThh:mm:ss (19 characters).
------------------------------------------------------------------------------*/
uint8_t read_DS3231(uint8_t addr, uint8_t ds3231time[])
{
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	7b 01       	movw	r14, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
     a88:	c8 2f       	mov	r28, r24
     a8a:	88 23       	and	r24, r24
     a8c:	21 f0       	breq	.+8      	; 0xa96 <read_DS3231+0x20>
		stop_TWI();
     a8e:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
		return(retval);
     a92:	8c 2f       	mov	r24, r28
     a94:	28 c0       	rjmp	.+80     	; 0xae6 <read_DS3231+0x70>
    }  

	if ((retval = write_TWI(0x00))) {	// Register 00h
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
     a9c:	c8 2f       	mov	r28, r24
     a9e:	88 23       	and	r24, r24
     aa0:	21 f0       	breq	.+8      	; 0xaaa <read_DS3231+0x34>
		stop_TWI();
     aa2:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
		return(retval);
     aa6:	8c 2f       	mov	r24, r28
     aa8:	1e c0       	rjmp	.+60     	; 0xae6 <read_DS3231+0x70>
	}
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
     aaa:	61 e0       	ldi	r22, 0x01	; 1
     aac:	88 e6       	ldi	r24, 0x68	; 104
     aae:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
     ab2:	c8 2f       	mov	r28, r24
     ab4:	88 23       	and	r24, r24
     ab6:	69 f0       	breq	.+26     	; 0xad2 <read_DS3231+0x5c>
		stop_TWI();
     ab8:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
		return(retval);
     abc:	8c 2f       	mov	r24, r28
     abe:	13 c0       	rjmp	.+38     	; 0xae6 <read_DS3231+0x70>
	}

	for (i = 0; i < 6; i++) {
		ds3231time[i] = read_TWI();
     ac0:	87 01       	movw	r16, r14
     ac2:	0c 0f       	add	r16, r28
     ac4:	11 1d       	adc	r17, r1
     ac6:	0e 94 5f 15 	call	0x2abe	; 0x2abe <read_TWI>
     aca:	f8 01       	movw	r30, r16
     acc:	80 83       	st	Z, r24
	if ((retval = start_TWI(DS3231ADDR, TWIREAD))) {
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 6; i++) {
     ace:	cf 5f       	subi	r28, 0xFF	; 255
     ad0:	01 c0       	rjmp	.+2      	; 0xad4 <read_DS3231+0x5e>
     ad2:	c0 e0       	ldi	r28, 0x00	; 0
     ad4:	c6 30       	cpi	r28, 0x06	; 6
     ad6:	a0 f3       	brcs	.-24     	; 0xac0 <read_DS3231+0x4a>
		ds3231time[i] = read_TWI();
	}
	ds3231time[6] = readlast_TWI();
     ad8:	0e 94 6f 15 	call	0x2ade	; 0x2ade <readlast_TWI>
     adc:	f7 01       	movw	r30, r14
     ade:	86 83       	std	Z+6, r24	; 0x06

	stop_TWI();
     ae0:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>

	return(0);
     ae4:	80 e0       	ldi	r24, 0x00	; 0

}
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	08 95       	ret

00000af2 <get_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t get_time(char *isotime)
{
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
     afe:	27 97       	sbiw	r28, 0x07	; 7
     b00:	cd bf       	out	0x3d, r28	; 61
     b02:	de bf       	out	0x3e, r29	; 62
     b04:	8c 01       	movw	r16, r24

	uint8_t retval, ds3231time[7];

	if ((retval = read_DS3231(DS3231ADDR, ds3231time))) {
     b06:	be 01       	movw	r22, r28
     b08:	6f 5f       	subi	r22, 0xFF	; 255
     b0a:	7f 4f       	sbci	r23, 0xFF	; 255
     b0c:	88 e6       	ldi	r24, 0x68	; 104
     b0e:	0e 94 3b 05 	call	0xa76	; 0xa76 <read_DS3231>
     b12:	88 23       	and	r24, r24
     b14:	49 f0       	breq	.+18     	; 0xb28 <get_time+0x36>
		strcpy(isotime, "CurrentTime?");
     b16:	9d e0       	ldi	r25, 0x0D	; 13
     b18:	ef ec       	ldi	r30, 0xCF	; 207
     b1a:	ff e7       	ldi	r31, 0x7F	; 127
     b1c:	d8 01       	movw	r26, r16
     b1e:	01 90       	ld	r0, Z+
     b20:	0d 92       	st	X+, r0
     b22:	9a 95       	dec	r25
     b24:	e1 f7       	brne	.-8      	; 0xb1e <get_time+0x2c>
		return(retval);
     b26:	07 c0       	rjmp	.+14     	; 0xb36 <get_time+0x44>
	}

	convert_ds2iso(isotime, ds3231time);
     b28:	be 01       	movw	r22, r28
     b2a:	6f 5f       	subi	r22, 0xFF	; 255
     b2c:	7f 4f       	sbci	r23, 0xFF	; 255
     b2e:	c8 01       	movw	r24, r16
     b30:	0e 94 ba 04 	call	0x974	; 0x974 <convert_ds2iso>
	return(0);
     b34:	80 e0       	ldi	r24, 0x00	; 0

}
     b36:	27 96       	adiw	r28, 0x07	; 7
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	08 95       	ret

00000b46 <write_DS3231>:

	Returns
		TWI errors
------------------------------------------------------------------------------*/
uint8_t write_DS3231(uint8_t addr, uint8_t *ds3231time)
{
     b46:	ef 92       	push	r14
     b48:	ff 92       	push	r15
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	8b 01       	movw	r16, r22

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
     b5a:	c8 2f       	mov	r28, r24
     b5c:	88 23       	and	r24, r24
     b5e:	21 f0       	breq	.+8      	; 0xb68 <write_DS3231+0x22>
		stop_TWI();
     b60:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
		return(retval);
     b64:	8c 2f       	mov	r24, r28
     b66:	22 c0       	rjmp	.+68     	; 0xbac <write_DS3231+0x66>
	}

	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
     b6e:	c8 2f       	mov	r28, r24
     b70:	88 23       	and	r24, r24
     b72:	b1 f0       	breq	.+44     	; 0xba0 <write_DS3231+0x5a>
		stop_TWI();
     b74:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
		return(retval);
     b78:	8c 2f       	mov	r24, r28
     b7a:	18 c0       	rjmp	.+48     	; 0xbac <write_DS3231+0x66>
	}

	for (i = 0; i < 7; i++) {
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b7c:	78 01       	movw	r14, r16
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 1a       	sub	r14, r24
     b82:	f8 0a       	sbc	r15, r24
     b84:	f8 01       	movw	r30, r16
     b86:	80 81       	ld	r24, Z
     b88:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
     b8c:	c8 2f       	mov	r28, r24
     b8e:	88 23       	and	r24, r24
     b90:	21 f0       	breq	.+8      	; 0xb9a <write_DS3231+0x54>
			stop_TWI();
     b92:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
			return(retval);
     b96:	8c 2f       	mov	r24, r28
     b98:	09 c0       	rjmp	.+18     	; 0xbac <write_DS3231+0x66>
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     b9a:	df 5f       	subi	r29, 0xFF	; 255
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
     b9c:	87 01       	movw	r16, r14
     b9e:	01 c0       	rjmp	.+2      	; 0xba2 <write_DS3231+0x5c>
     ba0:	d0 e0       	ldi	r29, 0x00	; 0
	if ((retval = write_TWI(0x00))) {	// Start with register 0x00 (seconds)
		stop_TWI();
		return(retval);
	}

	for (i = 0; i < 7; i++) {
     ba2:	d7 30       	cpi	r29, 0x07	; 7
     ba4:	58 f3       	brcs	.-42     	; 0xb7c <write_DS3231+0x36>
		if ((retval = write_TWI(*ds3231time++))) {	// send the new time
			stop_TWI();
			return(retval);
		}
	}
	stop_TWI();
     ba6:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>

	return(0);
     baa:	80 e0       	ldi	r24, 0x00	; 0

}
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	ff 90       	pop	r15
     bb6:	ef 90       	pop	r14
     bb8:	08 95       	ret

00000bba <put_time>:

	Returns
		0 on success or TWI error
------------------------------------------------------------------------------*/
uint8_t put_time(char *isotime)
{
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	27 97       	sbiw	r28, 0x07	; 7
     bc4:	cd bf       	out	0x3d, r28	; 61
     bc6:	de bf       	out	0x3e, r29	; 62

	uint8_t retval, ds3231time[7];

	convert_iso2ds(ds3231time, isotime);
     bc8:	bc 01       	movw	r22, r24
     bca:	ce 01       	movw	r24, r28
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	0e 94 db 04 	call	0x9b6	; 0x9b6 <convert_iso2ds>
	if ((retval = write_DS3231(DS3231ADDR, ds3231time))) {
     bd2:	be 01       	movw	r22, r28
     bd4:	6f 5f       	subi	r22, 0xFF	; 255
     bd6:	7f 4f       	sbci	r23, 0xFF	; 255
     bd8:	88 e6       	ldi	r24, 0x68	; 104
     bda:	0e 94 a3 05 	call	0xb46	; 0xb46 <write_DS3231>
		return(retval);
	}
	return(0);

}
     bde:	27 96       	adiw	r28, 0x07	; 7
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	de bf       	out	0x3e, r29	; 62
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	08 95       	ret

00000bea <get_BOOTTIME>:
	TWI must be enabled first (init_TWI()) since it calls get_time().
------------------------------------------------------------------------------*/
void get_BOOTTIME(char *boottime)
{

	eeprom_read_block((void *)boottime, (const void *)BOOTTIMEADDR, BOOTTIMESIZE);
     bea:	45 e1       	ldi	r20, 0x15	; 21
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	6b e0       	ldi	r22, 0x0B	; 11
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <eeprom_read_block>
     bf6:	08 95       	ret

00000bf8 <get_VERSION>:
}

void get_VERSION(char *version)
{

	eeprom_read_block((void *)version, (const void *)VERSIONADDR, VERSIONSIZE);
     bf8:	4b e0       	ldi	r20, 0x0B	; 11
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <eeprom_read_block>
     c04:	08 95       	ret

00000c06 <update_BOOTTIME>:
	update_VERSION();

}

void update_BOOTTIME(void)
{
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	65 97       	sbiw	r28, 0x15	; 21
     c10:	cd bf       	out	0x3d, r28	; 61
     c12:	de bf       	out	0x3e, r29	; 62

	char boottime[21];

	get_time(boottime);
     c14:	ce 01       	movw	r24, r28
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	0e 94 79 05 	call	0xaf2	; 0xaf2 <get_time>
	eeprom_update_block((const void *)boottime, (void *)BOOTTIMEADDR, BOOTTIMESIZE);
     c1c:	45 e1       	ldi	r20, 0x15	; 21
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	6b e0       	ldi	r22, 0x0B	; 11
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	ce 01       	movw	r24, r28
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <eeprom_update_block>

}
     c2c:	65 96       	adiw	r28, 0x15	; 21
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret

00000c38 <update_VERSION>:

void update_VERSION(void)
{
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	2b 97       	sbiw	r28, 0x0b	; 11
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	de bf       	out	0x3e, r29	; 62

	char version[11];

	strcpy(version, VERSION);
     c46:	8b e0       	ldi	r24, 0x0B	; 11
     c48:	ec ed       	ldi	r30, 0xDC	; 220
     c4a:	ff e7       	ldi	r31, 0x7F	; 127
     c4c:	de 01       	movw	r26, r28
     c4e:	11 96       	adiw	r26, 0x01	; 1
     c50:	01 90       	ld	r0, Z+
     c52:	0d 92       	st	X+, r0
     c54:	8a 95       	dec	r24
     c56:	e1 f7       	brne	.-8      	; 0xc50 <update_VERSION+0x18>
	eeprom_update_block((const void *)version, (void *)VERSIONADDR, VERSIONSIZE);
     c58:	4b e0       	ldi	r20, 0x0B	; 11
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	ce 01       	movw	r24, r28
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <eeprom_update_block>

}
     c68:	2b 96       	adiw	r28, 0x0b	; 11
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	08 95       	ret

00000c74 <init_EEPROM>:
}

void init_EEPROM(void)
{

	update_BOOTTIME();
     c74:	0e 94 03 06 	call	0xc06	; 0xc06 <update_BOOTTIME>
	update_VERSION();
     c78:	0e 94 1c 06 	call	0xc38	; 0xc38 <update_VERSION>
     c7c:	08 95       	ret

00000c7e <read_FRAM>:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)

------------------------------------------------------------------------------*/
uint8_t read_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     c7e:	ef 92       	push	r14
     c80:	ff 92       	push	r15
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	c8 2f       	mov	r28, r24
     c8c:	e6 2e       	mov	r14, r22
     c8e:	f7 2e       	mov	r15, r23
     c90:	8a 01       	movw	r16, r20
     c92:	d2 2f       	mov	r29, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;						// high byte
	memhigh = (memaddr >> 8);						// low byte

	if ((retval = start_TWI(addr, TWIWRITE))) {		// TWI start
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
     c9a:	81 11       	cpse	r24, r1
     c9c:	2b c0       	rjmp	.+86     	; 0xcf4 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {			// Send memory address
     c9e:	8f 2d       	mov	r24, r15
     ca0:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
     ca4:	81 11       	cpse	r24, r1
     ca6:	26 c0       	rjmp	.+76     	; 0xcf4 <read_FRAM+0x76>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {
     ca8:	8e 2d       	mov	r24, r14
     caa:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
     cae:	81 11       	cpse	r24, r1
     cb0:	21 c0       	rjmp	.+66     	; 0xcf4 <read_FRAM+0x76>
		return(retval);
	}

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	8c 2f       	mov	r24, r28
     cb6:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
     cba:	81 11       	cpse	r24, r1
     cbc:	1b c0       	rjmp	.+54     	; 0xcf4 <read_FRAM+0x76>
     cbe:	c0 e0       	ldi	r28, 0x00	; 0
     cc0:	08 c0       	rjmp	.+16     	; 0xcd2 <read_FRAM+0x54>
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
		val[i] = read_TWI();						// Read memory
     cc2:	78 01       	movw	r14, r16
     cc4:	ec 0e       	add	r14, r28
     cc6:	f1 1c       	adc	r15, r1
     cc8:	0e 94 5f 15 	call	0x2abe	; 0x2abe <read_TWI>
     ccc:	f7 01       	movw	r30, r14
     cce:	80 83       	st	Z, r24

	if ((retval = start_TWI(addr, TWIREAD))) {		// Repeated start
		return(retval);
	}

	for (i = 0; i < (nbytes-1); i++) {
     cd0:	cf 5f       	subi	r28, 0xFF	; 255
     cd2:	2c 2f       	mov	r18, r28
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	8d 2f       	mov	r24, r29
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	28 17       	cp	r18, r24
     cde:	39 07       	cpc	r19, r25
     ce0:	84 f3       	brlt	.-32     	; 0xcc2 <read_FRAM+0x44>
		val[i] = read_TWI();						// Read memory
	}
	val[nbytes-1] = readlast_TWI();
     ce2:	ec 01       	movw	r28, r24
     ce4:	c0 0f       	add	r28, r16
     ce6:	d1 1f       	adc	r29, r17
     ce8:	0e 94 6f 15 	call	0x2ade	; 0x2ade <readlast_TWI>
     cec:	88 83       	st	Y, r24

	stop_TWI();
     cee:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>

	return(0);
     cf2:	80 e0       	ldi	r24, 0x00	; 0

}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	08 95       	ret

00000d02 <write_FRAM>:
	Returns:
		val - Array with data
		Function returns 0 if OK, TWI-error if not (see twi.c for these)
------------------------------------------------------------------------------*/
uint8_t write_FRAM(uint8_t addr, uint16_t memaddr, uint8_t *val, uint8_t nbytes)
{
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	f6 2e       	mov	r15, r22
     d10:	17 2f       	mov	r17, r23
     d12:	ea 01       	movw	r28, r20
     d14:	02 2f       	mov	r16, r18
	uint8_t i, retval, memhigh, memlow;

	memlow = memaddr & 0xFF;
	memhigh = (memaddr >> 8);

	if ((retval = start_TWI(addr, TWIWRITE))) {	// TWI START
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
     d1c:	81 11       	cpse	r24, r1
     d1e:	1c c0       	rjmp	.+56     	; 0xd58 <write_FRAM+0x56>
		return(retval);
	}

	if ((retval = write_TWI(memhigh))) {		// FRAM address to write
     d20:	81 2f       	mov	r24, r17
     d22:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
     d26:	81 11       	cpse	r24, r1
     d28:	17 c0       	rjmp	.+46     	; 0xd58 <write_FRAM+0x56>
		return(retval);
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
     d2a:	8f 2d       	mov	r24, r15
     d2c:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
     d30:	81 11       	cpse	r24, r1
     d32:	12 c0       	rjmp	.+36     	; 0xd58 <write_FRAM+0x56>
     d34:	10 e0       	ldi	r17, 0x00	; 0
     d36:	0b c0       	rjmp	.+22     	; 0xd4e <write_FRAM+0x4c>
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     d38:	7e 01       	movw	r14, r28
     d3a:	8f ef       	ldi	r24, 0xFF	; 255
     d3c:	e8 1a       	sub	r14, r24
     d3e:	f8 0a       	sbc	r15, r24
     d40:	88 81       	ld	r24, Y
     d42:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
     d46:	81 11       	cpse	r24, r1
     d48:	07 c0       	rjmp	.+14     	; 0xd58 <write_FRAM+0x56>
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     d4a:	1f 5f       	subi	r17, 0xFF	; 255
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
     d4c:	e7 01       	movw	r28, r14
	}
	if ((retval = write_TWI(memlow))) {			// FRAM address to write
		return(retval);
	}

	for (i = 0; i < nbytes; i++) {
     d4e:	10 17       	cp	r17, r16
     d50:	98 f3       	brcs	.-26     	; 0xd38 <write_FRAM+0x36>
		if ((retval = write_TWI(*val++))) {		// Write to FRAM
			return(retval);
		}
	}

	stop_TWI();
     d52:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>

	return(0);
     d56:	80 e0       	ldi	r24, 0x00	; 0

}
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	1f 91       	pop	r17
     d5e:	0f 91       	pop	r16
     d60:	ff 90       	pop	r15
     d62:	ef 90       	pop	r14
     d64:	08 95       	ret

00000d66 <get_humidity>:

	Honeywell HiH-4031 humidity sensors. Voltage output is roughly 0.75 V to
	4.0 V, 0% to 100% RH at 0 C. There is a temperature correction required.
------------------------------------------------------------------------------*/
float get_humidity(uint8_t sensor)
{
     d66:	8f 92       	push	r8
     d68:	9f 92       	push	r9
     d6a:	af 92       	push	r10
     d6c:	bf 92       	push	r11
     d6e:	cf 92       	push	r12
     d70:	df 92       	push	r13
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15

	uint8_t adcpin;
	float humidity, temperature;

	switch (sensor) {
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	59 f0       	breq	.+22     	; 0xd90 <get_humidity+0x2a>
     d7a:	18 f0       	brcs	.+6      	; 0xd82 <get_humidity+0x1c>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	79 f0       	breq	.+30     	; 0xd9e <get_humidity+0x38>
     d80:	15 c0       	rjmp	.+42     	; 0xdac <get_humidity+0x46>
		case 0:
			temperature = get_temperature(0);
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	0e 94 29 15 	call	0x2a52	; 0x2a52 <get_temperature>
     d88:	4b 01       	movw	r8, r22
     d8a:	5c 01       	movw	r10, r24
//			adcpin = AIN1;		// test unit
			adcpin = AIN0;		// production
     d8c:	40 e4       	ldi	r20, 0x40	; 64
			break;
     d8e:	17 c0       	rjmp	.+46     	; 0xdbe <get_humidity+0x58>
		case 1:
			temperature = get_temperature(1);
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	0e 94 29 15 	call	0x2a52	; 0x2a52 <get_temperature>
     d96:	4b 01       	movw	r8, r22
     d98:	5c 01       	movw	r10, r24
			adcpin = AIN1;
     d9a:	40 e5       	ldi	r20, 0x50	; 80
			break;
     d9c:	10 c0       	rjmp	.+32     	; 0xdbe <get_humidity+0x58>
		case 2:
			temperature = get_temperature(2);
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	0e 94 29 15 	call	0x2a52	; 0x2a52 <get_temperature>
     da4:	4b 01       	movw	r8, r22
     da6:	5c 01       	movw	r10, r24
			adcpin = AIN2;
     da8:	40 e6       	ldi	r20, 0x60	; 96
			break;
     daa:	09 c0       	rjmp	.+18     	; 0xdbe <get_humidity+0x58>
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
			temperature = 20.0;		// to avoid uninitialized note
     dac:	0f 2e       	mov	r0, r31
     dae:	81 2c       	mov	r8, r1
     db0:	91 2c       	mov	r9, r1
     db2:	f0 ea       	ldi	r31, 0xA0	; 160
     db4:	af 2e       	mov	r10, r31
     db6:	f1 e4       	ldi	r31, 0x41	; 65
     db8:	bf 2e       	mov	r11, r31
     dba:	f0 2d       	mov	r31, r0
			temperature = get_temperature(2);
			adcpin = AIN2;
			break;
		default:
			// flag an error
			adcpin = AIN1;			// to avoid uninitialized note
     dbc:	40 e5       	ldi	r20, 0x50	; 80
			temperature = 20.0;		// to avoid uninitialized note
			break;
	}

	humidity = ((read_ADS1115(ADC_RH, PGA6144, adcpin, DR128)/5.0) - 0.16) / 0.0062;
     dbe:	20 e8       	ldi	r18, 0x80	; 128
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	88 e4       	ldi	r24, 0x48	; 72
     dc4:	0e 94 9e 01 	call	0x33c	; 0x33c <read_ADS1115>
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	40 ea       	ldi	r20, 0xA0	; 160
     dce:	50 e4       	ldi	r21, 0x40	; 64
     dd0:	0e 94 5e 18 	call	0x30bc	; 0x30bc <__divsf3>
     dd4:	2a e0       	ldi	r18, 0x0A	; 10
     dd6:	37 ed       	ldi	r19, 0xD7	; 215
     dd8:	43 e2       	ldi	r20, 0x23	; 35
     dda:	5e e3       	ldi	r21, 0x3E	; 62
     ddc:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__subsf3>
     de0:	2f e5       	ldi	r18, 0x5F	; 95
     de2:	39 e2       	ldi	r19, 0x29	; 41
     de4:	4b ec       	ldi	r20, 0xCB	; 203
     de6:	5b e3       	ldi	r21, 0x3B	; 59
     de8:	0e 94 5e 18 	call	0x30bc	; 0x30bc <__divsf3>
     dec:	6b 01       	movw	r12, r22
     dee:	7c 01       	movw	r14, r24
	humidity = (humidity / (1.0546 - 0.00216 * temperature));
     df0:	29 ec       	ldi	r18, 0xC9	; 201
     df2:	3e e8       	ldi	r19, 0x8E	; 142
     df4:	4d e0       	ldi	r20, 0x0D	; 13
     df6:	5b e3       	ldi	r21, 0x3B	; 59
     df8:	c5 01       	movw	r24, r10
     dfa:	b4 01       	movw	r22, r8
     dfc:	0e 94 87 19 	call	0x330e	; 0x330e <__mulsf3>
     e00:	9b 01       	movw	r18, r22
     e02:	ac 01       	movw	r20, r24
     e04:	62 e2       	ldi	r22, 0x22	; 34
     e06:	7d ef       	ldi	r23, 0xFD	; 253
     e08:	86 e8       	ldi	r24, 0x86	; 134
     e0a:	9f e3       	ldi	r25, 0x3F	; 63
     e0c:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__subsf3>
     e10:	9b 01       	movw	r18, r22
     e12:	ac 01       	movw	r20, r24
     e14:	c7 01       	movw	r24, r14
     e16:	b6 01       	movw	r22, r12
     e18:	0e 94 5e 18 	call	0x30bc	; 0x30bc <__divsf3>
	return(humidity);

}
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	df 90       	pop	r13
     e22:	cf 90       	pop	r12
     e24:	bf 90       	pop	r11
     e26:	af 90       	pop	r10
     e28:	9f 90       	pop	r9
     e2a:	8f 90       	pop	r8
     e2c:	08 95       	ret

00000e2e <initialize>:
#include "globals.h"
#include "initialize.h"

void initialize(void)
{
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	2b 97       	sbiw	r28, 0x0b	; 11
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	de bf       	out	0x3e, r29	; 62

	char versionstr[11];

	init_PORTS();
     e3c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <init_PORTS>
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm | PORT_ISC_FALLING_gc;	// Pushbutton setup
     e40:	8b e0       	ldi	r24, 0x0B	; 11
     e42:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__TEXT_REGION_LENGTH__+0x7f44b6>
	init_XPORT();
     e46:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <init_XPORT>
	init_SPECID();
     e4a:	0e 94 21 15 	call	0x2a42	; 0x2a42 <init_SPECID>
	init_LED();
     e4e:	0e 94 d5 07 	call	0xfaa	; 0xfaa <init_LED>
	init_BEEPER();
     e52:	0e 94 9d 02 	call	0x53a	; 0x53a <init_BEEPER>
	init_RTC(32);	// Fast, 1/16 sec, for blinking LED at startup
     e56:	80 e2       	ldi	r24, 0x20	; 32
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 7d 14 	call	0x28fa	; 0x28fa <init_RTC>
	init_USART();
     e5e:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <init_USART>
	init_TWI();
     e62:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <init_TWI>
	init_MMA8451();
     e66:	0e 94 6d 09 	call	0x12da	; 0x12da <init_MMA8451>
	init_PNEU();
     e6a:	0e 94 8b 0b 	call	0x1716	; 0x1716 <init_PNEU>
	init_OLED(0);
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	0e 94 43 0a 	call	0x1486	; 0x1486 <init_OLED>
	init_OLED(1);
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	0e 94 43 0a 	call	0x1486	; 0x1486 <init_OLED>
	init_EEPROM();	// Needs TWI for get_time()
     e7a:	0e 94 3a 06 	call	0xc74	; 0xc74 <init_EEPROM>
	timeoutOLED = 30 * (512/32);	// 30 seconds for version display
     e7e:	80 ee       	ldi	r24, 0xE0	; 224
     e80:	91 e0       	ldi	r25, 0x01	; 1
     e82:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <timeoutOLED>
     e86:	90 93 10 2a 	sts	0x2A10, r25	; 0x802a10 <timeoutOLED+0x1>
	get_VERSION(versionstr);
     e8a:	ce 01       	movw	r24, r28
     e8c:	01 96       	adiw	r24, 0x01	; 1
     e8e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <get_VERSION>
	writestr_OLED(1,"specMech Version", 1);
     e92:	41 e0       	ldi	r20, 0x01	; 1
     e94:	67 ee       	ldi	r22, 0xE7	; 231
     e96:	7f e7       	ldi	r23, 0x7F	; 127
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	0e 94 03 0b 	call	0x1606	; 0x1606 <writestr_OLED>
	writestr_OLED(1, versionstr, 2);
     e9e:	42 e0       	ldi	r20, 0x02	; 2
     ea0:	be 01       	movw	r22, r28
     ea2:	6f 5f       	subi	r22, 0xFF	; 255
     ea4:	7f 4f       	sbci	r23, 0xFF	; 255
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	0e 94 03 0b 	call	0x1606	; 0x1606 <writestr_OLED>

}
     eac:	2b 96       	adiw	r28, 0x0b	; 11
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	08 95       	ret

00000eb8 <__vector_29>:

/*----------------------------------------------------------------------
Curiosity Nano on-board pushbutton reboots the system
----------------------------------------------------------------------*/
ISR(PORTF_PORT_vect)
{
     eb8:	1f 92       	push	r1
     eba:	0f 92       	push	r0
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	0f 92       	push	r0
     ec0:	11 24       	eor	r1, r1
     ec2:	2f 93       	push	r18
     ec4:	3f 93       	push	r19
     ec6:	4f 93       	push	r20
     ec8:	5f 93       	push	r21
     eca:	6f 93       	push	r22
     ecc:	7f 93       	push	r23
     ece:	8f 93       	push	r24
     ed0:	9f 93       	push	r25
     ed2:	af 93       	push	r26
     ed4:	bf 93       	push	r27
     ed6:	ef 93       	push	r30
     ed8:	ff 93       	push	r31

	if (PORTF.INTFLAGS & PIN6_bm) {		// Curiosity Nano button
     eda:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
     ede:	86 ff       	sbrs	r24, 6
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <__vector_29+0x34>
		PORTF.INTFLAGS = PIN6_bm;		// Clear the interrupt flag
     ee2:	80 e4       	ldi	r24, 0x40	; 64
     ee4:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
		reboot();
     ee8:	0e 94 d6 17 	call	0x2fac	; 0x2fac <reboot>
	}

}
     eec:	ff 91       	pop	r31
     eee:	ef 91       	pop	r30
     ef0:	bf 91       	pop	r27
     ef2:	af 91       	pop	r26
     ef4:	9f 91       	pop	r25
     ef6:	8f 91       	pop	r24
     ef8:	7f 91       	pop	r23
     efa:	6f 91       	pop	r22
     efc:	5f 91       	pop	r21
     efe:	4f 91       	pop	r20
     f00:	3f 91       	pop	r19
     f02:	2f 91       	pop	r18
     f04:	0f 90       	pop	r0
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	0f 90       	pop	r0
     f0a:	1f 90       	pop	r1
     f0c:	18 95       	reti

00000f0e <read_ionpump>:
	Returns:
		The log10(pressure) where pressure is in Pascals. Subtracting 2.125
		from this value provides the log10(pressure) for pressure in Torr.
		If the voltage is out of range, -999.9 is returned..
------------------------------------------------------------------------------*/
float read_ionpump(uint8_t pumpid) {
     f0e:	cf 92       	push	r12
     f10:	df 92       	push	r13
     f12:	ef 92       	push	r14
     f14:	ff 92       	push	r15

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	21 f0       	breq	.+8      	; 0xf22 <read_ionpump+0x14>
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
     f1a:	82 30       	cpi	r24, 0x02	; 2
     f1c:	79 f5       	brne	.+94     	; 0xf7c <read_ionpump+0x6e>
		pins = AIN23;
     f1e:	40 e3       	ldi	r20, 0x30	; 48
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <read_ionpump+0x16>

	uint8_t pins;
	float voltage, vacuum;

	if (pumpid == REDPUMP) {
		pins = AIN01;
     f22:	40 e0       	ldi	r20, 0x00	; 0
		pins = AIN23;
	} else {
		return(-666.0);
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);
     f24:	20 e8       	ldi	r18, 0x80	; 128
     f26:	62 e0       	ldi	r22, 0x02	; 2
     f28:	89 e4       	ldi	r24, 0x49	; 73
     f2a:	0e 94 9e 01 	call	0x33c	; 0x33c <read_ADS1115>
     f2e:	6b 01       	movw	r12, r22
     f30:	7c 01       	movw	r14, r24

	if (voltage < 0.4) {						// Useful range for the Modion pump
     f32:	2d ec       	ldi	r18, 0xCD	; 205
     f34:	3c ec       	ldi	r19, 0xCC	; 204
     f36:	4c ec       	ldi	r20, 0xCC	; 204
     f38:	5e e3       	ldi	r21, 0x3E	; 62
     f3a:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__cmpsf2>
     f3e:	88 23       	and	r24, r24
     f40:	14 f1       	brlt	.+68     	; 0xf86 <read_ionpump+0x78>
		return(-666.0);							// after ISO224 op-amp is 0.5 to 2.0 V
	} else if (voltage > 2.0) {
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 e0       	ldi	r20, 0x00	; 0
     f48:	50 e4       	ldi	r21, 0x40	; 64
     f4a:	c7 01       	movw	r24, r14
     f4c:	b6 01       	movw	r22, r12
     f4e:	0e 94 82 19 	call	0x3304	; 0x3304 <__gesf2>
     f52:	18 16       	cp	r1, r24
     f54:	ec f0       	brlt	.+58     	; 0xf90 <read_ionpump+0x82>
		return(-666.0);
	}

	vacuum = ISO224SLOPE * voltage + ISO224INTER;
     f56:	29 e7       	ldi	r18, 0x79	; 121
     f58:	39 ee       	ldi	r19, 0xE9	; 233
     f5a:	42 e0       	ldi	r20, 0x02	; 2
     f5c:	50 e4       	ldi	r21, 0x40	; 64
     f5e:	c7 01       	movw	r24, r14
     f60:	b6 01       	movw	r22, r12
     f62:	0e 94 87 19 	call	0x330e	; 0x330e <__mulsf3>
     f66:	2e e6       	ldi	r18, 0x6E	; 110
     f68:	33 ea       	ldi	r19, 0xA3	; 163
     f6a:	4b ed       	ldi	r20, 0xDB	; 219
     f6c:	50 e4       	ldi	r21, 0x40	; 64
     f6e:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__subsf3>

	return(vacuum);
     f72:	56 2f       	mov	r21, r22
     f74:	47 2f       	mov	r20, r23
     f76:	38 2f       	mov	r19, r24
     f78:	29 2f       	mov	r18, r25
     f7a:	0e c0       	rjmp	.+28     	; 0xf98 <read_ionpump+0x8a>
	if (pumpid == REDPUMP) {
		pins = AIN01;
	} else if (pumpid == BLUEPUMP) {
		pins = AIN23;
	} else {
		return(-666.0);
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	40 e8       	ldi	r20, 0x80	; 128
     f80:	36 e2       	ldi	r19, 0x26	; 38
     f82:	24 ec       	ldi	r18, 0xC4	; 196
     f84:	09 c0       	rjmp	.+18     	; 0xf98 <read_ionpump+0x8a>
	}

	voltage = read_ADS1115(ADC_IP, PGA4096, pins, DR128);

	if (voltage < 0.4) {						// Useful range for the Modion pump
		return(-666.0);							// after ISO224 op-amp is 0.5 to 2.0 V
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	40 e8       	ldi	r20, 0x80	; 128
     f8a:	36 e2       	ldi	r19, 0x26	; 38
     f8c:	24 ec       	ldi	r18, 0xC4	; 196
     f8e:	04 c0       	rjmp	.+8      	; 0xf98 <read_ionpump+0x8a>
	} else if (voltage > 2.0) {
		return(-666.0);
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	40 e8       	ldi	r20, 0x80	; 128
     f94:	36 e2       	ldi	r19, 0x26	; 38
     f96:	24 ec       	ldi	r18, 0xC4	; 196
	vacuum = ISO224SLOPE * voltage + ISO224INTER;

	return(vacuum);
//return(voltage);

}
     f98:	65 2f       	mov	r22, r21
     f9a:	74 2f       	mov	r23, r20
     f9c:	83 2f       	mov	r24, r19
     f9e:	92 2f       	mov	r25, r18
     fa0:	ff 90       	pop	r15
     fa2:	ef 90       	pop	r14
     fa4:	df 90       	pop	r13
     fa6:	cf 90       	pop	r12
     fa8:	08 95       	ret

00000faa <init_LED>:
#include "globals.h"

void init_LED(void)
{
	PORTF.OUTSET = PIN5_bm;
     faa:	e0 ea       	ldi	r30, 0xA0	; 160
     fac:	f4 e0       	ldi	r31, 0x04	; 4
     fae:	80 e2       	ldi	r24, 0x20	; 32
     fb0:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = PIN5_bm;
     fb2:	81 83       	std	Z+1, r24	; 0x01
     fb4:	08 95       	ret

00000fb6 <main>:
extern void initialize(void);

int main(void)
{

	initialize();
     fb6:	0e 94 17 07 	call	0xe2e	; 0xe2e <initialize>
	sei();
     fba:	78 94       	sei

	for (;;) {
		if (recv0_buf.done) {
     fbc:	80 91 1b 2c 	lds	r24, 0x2C1B	; 0x802c1b <recv0_buf+0x104>
     fc0:	88 23       	and	r24, r24
     fc2:	e1 f3       	breq	.-8      	; 0xfbc <main+0x6>
			recv0_buf.done = NO;
     fc4:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0x104>
//			on_BEEPER;
//			_delay_ms(50);
//			off_BEEPER;
			commands();
     fc8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <commands>
     fcc:	f7 cf       	rjmp	.-18     	; 0xfbc <main+0x6>

00000fce <read_MCP23008>:
	Returns:
		val - data in that MCP23008 register
		Function return value is 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MCP23008(uint8_t addr, uint8_t reg)
{
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	c8 2f       	mov	r28, r24
     fd4:	d6 2f       	mov	r29, r22

	uint8_t val;

	start_TWI(addr, TWIWRITE);
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
	write_TWI(reg);
     fdc:	8d 2f       	mov	r24, r29
     fde:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
	start_TWI(addr, TWIREAD);
     fe2:	61 e0       	ldi	r22, 0x01	; 1
     fe4:	8c 2f       	mov	r24, r28
     fe6:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
	val = readlast_TWI();
     fea:	0e 94 6f 15 	call	0x2ade	; 0x2ade <readlast_TWI>
     fee:	c8 2f       	mov	r28, r24
	stop_TWI();
     ff0:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
	return(val);

}
     ff4:	8c 2f       	mov	r24, r28
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <write_MCP23008>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MCP23008(uint8_t addr, uint8_t reg, uint8_t val)
{
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	d6 2f       	mov	r29, r22
    1004:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1006:	60 e0       	ldi	r22, 0x00	; 0
    1008:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
    100c:	c8 2f       	mov	r28, r24
    100e:	88 23       	and	r24, r24
    1010:	21 f0       	breq	.+8      	; 0x101a <write_MCP23008+0x1e>
		stop_TWI();
    1012:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
		return(retval);
    1016:	8c 2f       	mov	r24, r28
    1018:	17 c0       	rjmp	.+46     	; 0x1048 <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    101a:	8d 2f       	mov	r24, r29
    101c:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
    1020:	c8 2f       	mov	r28, r24
    1022:	88 23       	and	r24, r24
    1024:	21 f0       	breq	.+8      	; 0x102e <write_MCP23008+0x32>
		stop_TWI();
    1026:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
		return(retval);
    102a:	8c 2f       	mov	r24, r28
    102c:	0d c0       	rjmp	.+26     	; 0x1048 <write_MCP23008+0x4c>
	}
	if ((retval = write_TWI(val))) {
    102e:	81 2f       	mov	r24, r17
    1030:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
    1034:	c8 2f       	mov	r28, r24
    1036:	88 23       	and	r24, r24
    1038:	21 f0       	breq	.+8      	; 0x1042 <write_MCP23008+0x46>
		stop_TWI();
    103a:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
		return(retval);
    103e:	8c 2f       	mov	r24, r28
    1040:	03 c0       	rjmp	.+6      	; 0x1048 <write_MCP23008+0x4c>
	}
	stop_TWI();
    1042:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
	return(0);
    1046:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	08 95       	ret

00001050 <read_MCP9808>:
//#define MCP9808ADDR		(0x30)	// TWI address
#define MCP9808ADDR		(0x18)	// TWI address
#define TEMPREGISTER	(0x05)	// Ambient temperature register

float read_MCP9808(void)
{
    1050:	cf 92       	push	r12
    1052:	df 92       	push	r13
    1054:	ef 92       	push	r14
    1056:	ff 92       	push	r15
    1058:	1f 93       	push	r17
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29

	uint8_t highbyte, lowbyte, sign;
	float temperature;

	start_TWI(MCP9808ADDR, TWIWRITE);
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	88 e1       	ldi	r24, 0x18	; 24
    1062:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
	write_TWI(TEMPREGISTER);
    1066:	85 e0       	ldi	r24, 0x05	; 5
    1068:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
	start_TWI(MCP9808ADDR, TWIREAD);
    106c:	61 e0       	ldi	r22, 0x01	; 1
    106e:	88 e1       	ldi	r24, 0x18	; 24
    1070:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
	highbyte = read_TWI();
    1074:	0e 94 5f 15 	call	0x2abe	; 0x2abe <read_TWI>
    1078:	c8 2f       	mov	r28, r24
	lowbyte = readlast_TWI();
    107a:	0e 94 6f 15 	call	0x2ade	; 0x2ade <readlast_TWI>
    107e:	d8 2f       	mov	r29, r24
	stop_TWI();
    1080:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>

	sign = highbyte & 0x10;				// Save sign
    1084:	1c 2f       	mov	r17, r28
    1086:	10 71       	andi	r17, 0x10	; 16
	highbyte &= 0x0F;					// Clear threshold & sign bits
    1088:	6c 2f       	mov	r22, r28
    108a:	6f 70       	andi	r22, 0x0F	; 15
	temperature = (((float)highbyte * 16.0) + ((float)lowbyte / 16.0));
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__floatunsisf>
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e8       	ldi	r20, 0x80	; 128
    109c:	51 e4       	ldi	r21, 0x41	; 65
    109e:	0e 94 87 19 	call	0x330e	; 0x330e <__mulsf3>
    10a2:	6b 01       	movw	r12, r22
    10a4:	7c 01       	movw	r14, r24
    10a6:	6d 2f       	mov	r22, r29
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__floatunsisf>
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e8       	ldi	r20, 0x80	; 128
    10b8:	5d e3       	ldi	r21, 0x3D	; 61
    10ba:	0e 94 87 19 	call	0x330e	; 0x330e <__mulsf3>
    10be:	9b 01       	movw	r18, r22
    10c0:	ac 01       	movw	r20, r24
    10c2:	c7 01       	movw	r24, r14
    10c4:	b6 01       	movw	r22, r12
    10c6:	0e 94 ed 17 	call	0x2fda	; 0x2fda <__addsf3>
	if (sign) {
    10ca:	11 23       	and	r17, r17
    10cc:	41 f0       	breq	.+16     	; 0x10de <read_MCP9808+0x8e>
		temperature = 256.0 - temperature;
    10ce:	9b 01       	movw	r18, r22
    10d0:	ac 01       	movw	r20, r24
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	80 e8       	ldi	r24, 0x80	; 128
    10d8:	93 e4       	ldi	r25, 0x43	; 67
    10da:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__subsf3>
	}
	return(temperature);
}
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	ff 90       	pop	r15
    10e6:	ef 90       	pop	r14
    10e8:	df 90       	pop	r13
    10ea:	cf 90       	pop	r12
    10ec:	08 95       	ret

000010ee <read_MMA8451>:
	Returns:
		val - data starting in the MMA8451 register reg
		Function returns 0 if OK, TWI-error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t read_MMA8451(uint8_t addr, uint8_t reg, uint8_t *val, uint8_t nbytes)
{
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	18 2f       	mov	r17, r24
    10fc:	f6 2e       	mov	r15, r22
    10fe:	ea 01       	movw	r28, r20
    1100:	02 2f       	mov	r16, r18

	uint8_t i, retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
    1108:	81 11       	cpse	r24, r1
    110a:	1e c0       	rjmp	.+60     	; 0x1148 <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = write_TWI(reg))) {
    110c:	8f 2d       	mov	r24, r15
    110e:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
    1112:	81 11       	cpse	r24, r1
    1114:	19 c0       	rjmp	.+50     	; 0x1148 <read_MMA8451+0x5a>
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
    1116:	61 e0       	ldi	r22, 0x01	; 1
    1118:	81 2f       	mov	r24, r17
    111a:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
    111e:	81 11       	cpse	r24, r1
    1120:	13 c0       	rjmp	.+38     	; 0x1148 <read_MMA8451+0x5a>
    1122:	11 e0       	ldi	r17, 0x01	; 1
    1124:	09 c0       	rjmp	.+18     	; 0x1138 <read_MMA8451+0x4a>
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
		*val++ = read_TWI();
    1126:	7e 01       	movw	r14, r28
    1128:	8f ef       	ldi	r24, 0xFF	; 255
    112a:	e8 1a       	sub	r14, r24
    112c:	f8 0a       	sbc	r15, r24
    112e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <read_TWI>
    1132:	88 83       	st	Y, r24
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    1134:	1f 5f       	subi	r17, 0xFF	; 255
		*val++ = read_TWI();
    1136:	e7 01       	movw	r28, r14
		return(retval);
	}
	if ((retval = start_TWI(addr, TWIREAD))) {
		return(retval);
	}
	for (i = 1; i < nbytes; i++) {
    1138:	10 17       	cp	r17, r16
    113a:	a8 f3       	brcs	.-22     	; 0x1126 <read_MMA8451+0x38>
		*val++ = read_TWI();
	}
	*val = readlast_TWI();
    113c:	0e 94 6f 15 	call	0x2ade	; 0x2ade <readlast_TWI>
    1140:	88 83       	st	Y, r24
	stop_TWI();
    1142:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
	return(0);
    1146:	80 e0       	ldi	r24, 0x00	; 0

}
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	ff 90       	pop	r15
    1152:	ef 90       	pop	r14
    1154:	08 95       	ret

00001156 <get_orientation>:
	Put the accelerometer readout into x, y, and z after scaling to 980.6
	cm/s/s gravity.
------------------------------------------------------------------------------*/
//uint8_t get_orientation(uint8_t addr, float *x, float *y, float *z)
uint8_t get_orientation(float *x, float *y, float *z)
{
    1156:	cf 92       	push	r12
    1158:	df 92       	push	r13
    115a:	ef 92       	push	r14
    115c:	ff 92       	push	r15
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	26 97       	sbiw	r28, 0x06	; 6
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	6c 01       	movw	r12, r24
    1172:	7b 01       	movw	r14, r22
    1174:	8a 01       	movw	r16, r20

	uint8_t datain[6];
	int16_t ix, iy, iz;

	*x = *y = *z = -9999.9;
    1176:	8a e9       	ldi	r24, 0x9A	; 154
    1178:	9f e3       	ldi	r25, 0x3F	; 63
    117a:	ac e1       	ldi	r26, 0x1C	; 28
    117c:	b6 ec       	ldi	r27, 0xC6	; 198
    117e:	fa 01       	movw	r30, r20
    1180:	80 83       	st	Z, r24
    1182:	91 83       	std	Z+1, r25	; 0x01
    1184:	a2 83       	std	Z+2, r26	; 0x02
    1186:	b3 83       	std	Z+3, r27	; 0x03
    1188:	fb 01       	movw	r30, r22
    118a:	80 83       	st	Z, r24
    118c:	91 83       	std	Z+1, r25	; 0x01
    118e:	a2 83       	std	Z+2, r26	; 0x02
    1190:	b3 83       	std	Z+3, r27	; 0x03
    1192:	f6 01       	movw	r30, r12
    1194:	80 83       	st	Z, r24
    1196:	91 83       	std	Z+1, r25	; 0x01
    1198:	a2 83       	std	Z+2, r26	; 0x02
    119a:	b3 83       	std	Z+3, r27	; 0x03

	read_MMA8451(MMA8451ADDR, MMA8451OUTXMSB, datain, 6);
    119c:	26 e0       	ldi	r18, 0x06	; 6
    119e:	ae 01       	movw	r20, r28
    11a0:	4f 5f       	subi	r20, 0xFF	; 255
    11a2:	5f 4f       	sbci	r21, 0xFF	; 255
    11a4:	61 e0       	ldi	r22, 0x01	; 1
    11a6:	8d e1       	ldi	r24, 0x1D	; 29
    11a8:	0e 94 77 08 	call	0x10ee	; 0x10ee <read_MMA8451>

	ix = datain[0];
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	90 e0       	ldi	r25, 0x00	; 0
	ix <<= 8;
    11b0:	98 2f       	mov	r25, r24
    11b2:	88 27       	eor	r24, r24
	ix |= datain[1];
    11b4:	2a 81       	ldd	r18, Y+2	; 0x02
    11b6:	82 2b       	or	r24, r18
	ix /= 4;
    11b8:	bc 01       	movw	r22, r24
    11ba:	77 23       	and	r23, r23
    11bc:	14 f4       	brge	.+4      	; 0x11c2 <get_orientation+0x6c>
    11be:	6d 5f       	subi	r22, 0xFD	; 253
    11c0:	7f 4f       	sbci	r23, 0xFF	; 255
    11c2:	75 95       	asr	r23
    11c4:	67 95       	ror	r22
    11c6:	75 95       	asr	r23
    11c8:	67 95       	ror	r22
	*x = (980.6/4096.0) * (float) ix;
    11ca:	07 2e       	mov	r0, r23
    11cc:	00 0c       	add	r0, r0
    11ce:	88 0b       	sbc	r24, r24
    11d0:	99 0b       	sbc	r25, r25
    11d2:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__floatsisf>
    11d6:	26 e6       	ldi	r18, 0x66	; 102
    11d8:	36 e2       	ldi	r19, 0x26	; 38
    11da:	45 e7       	ldi	r20, 0x75	; 117
    11dc:	5e e3       	ldi	r21, 0x3E	; 62
    11de:	0e 94 87 19 	call	0x330e	; 0x330e <__mulsf3>
    11e2:	f6 01       	movw	r30, r12
    11e4:	60 83       	st	Z, r22
    11e6:	71 83       	std	Z+1, r23	; 0x01
    11e8:	82 83       	std	Z+2, r24	; 0x02
    11ea:	93 83       	std	Z+3, r25	; 0x03

	iy = datain[2];
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	90 e0       	ldi	r25, 0x00	; 0
	iy <<= 8;
    11f0:	98 2f       	mov	r25, r24
    11f2:	88 27       	eor	r24, r24
	iy |= datain[3];
    11f4:	2c 81       	ldd	r18, Y+4	; 0x04
    11f6:	82 2b       	or	r24, r18
	iy /= 4;
    11f8:	bc 01       	movw	r22, r24
    11fa:	77 23       	and	r23, r23
    11fc:	14 f4       	brge	.+4      	; 0x1202 <get_orientation+0xac>
    11fe:	6d 5f       	subi	r22, 0xFD	; 253
    1200:	7f 4f       	sbci	r23, 0xFF	; 255
    1202:	75 95       	asr	r23
    1204:	67 95       	ror	r22
    1206:	75 95       	asr	r23
    1208:	67 95       	ror	r22
	*y = (980.6/4096.0) * (float) iy;
    120a:	07 2e       	mov	r0, r23
    120c:	00 0c       	add	r0, r0
    120e:	88 0b       	sbc	r24, r24
    1210:	99 0b       	sbc	r25, r25
    1212:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__floatsisf>
    1216:	26 e6       	ldi	r18, 0x66	; 102
    1218:	36 e2       	ldi	r19, 0x26	; 38
    121a:	45 e7       	ldi	r20, 0x75	; 117
    121c:	5e e3       	ldi	r21, 0x3E	; 62
    121e:	0e 94 87 19 	call	0x330e	; 0x330e <__mulsf3>
    1222:	f7 01       	movw	r30, r14
    1224:	60 83       	st	Z, r22
    1226:	71 83       	std	Z+1, r23	; 0x01
    1228:	82 83       	std	Z+2, r24	; 0x02
    122a:	93 83       	std	Z+3, r25	; 0x03

	iz = datain[4];
    122c:	8d 81       	ldd	r24, Y+5	; 0x05
    122e:	90 e0       	ldi	r25, 0x00	; 0
	iz <<= 8;
    1230:	98 2f       	mov	r25, r24
    1232:	88 27       	eor	r24, r24
	iz |= datain[5];
    1234:	2e 81       	ldd	r18, Y+6	; 0x06
    1236:	82 2b       	or	r24, r18
	iz /= 4;
    1238:	bc 01       	movw	r22, r24
    123a:	77 23       	and	r23, r23
    123c:	14 f4       	brge	.+4      	; 0x1242 <get_orientation+0xec>
    123e:	6d 5f       	subi	r22, 0xFD	; 253
    1240:	7f 4f       	sbci	r23, 0xFF	; 255
    1242:	75 95       	asr	r23
    1244:	67 95       	ror	r22
    1246:	75 95       	asr	r23
    1248:	67 95       	ror	r22
	*z = (980.6/4096.0) * (float) iz;
    124a:	07 2e       	mov	r0, r23
    124c:	00 0c       	add	r0, r0
    124e:	88 0b       	sbc	r24, r24
    1250:	99 0b       	sbc	r25, r25
    1252:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__floatsisf>
    1256:	26 e6       	ldi	r18, 0x66	; 102
    1258:	36 e2       	ldi	r19, 0x26	; 38
    125a:	45 e7       	ldi	r20, 0x75	; 117
    125c:	5e e3       	ldi	r21, 0x3E	; 62
    125e:	0e 94 87 19 	call	0x330e	; 0x330e <__mulsf3>
    1262:	f8 01       	movw	r30, r16
    1264:	60 83       	st	Z, r22
    1266:	71 83       	std	Z+1, r23	; 0x01
    1268:	82 83       	std	Z+2, r24	; 0x02
    126a:	93 83       	std	Z+3, r25	; 0x03

	return(0);

}
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	26 96       	adiw	r28, 0x06	; 6
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	ff 90       	pop	r15
    127e:	ef 90       	pop	r14
    1280:	df 90       	pop	r13
    1282:	cf 90       	pop	r12
    1284:	08 95       	ret

00001286 <write_MMA8451>:

	Returns:
		0 if OK, TWI error if not (see twi.c)
------------------------------------------------------------------------------*/
uint8_t write_MMA8451(uint8_t addr, uint8_t reg, uint8_t val)
{
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	d6 2f       	mov	r29, r22
    128e:	14 2f       	mov	r17, r20

	uint8_t retval;

	if ((retval = start_TWI(addr, TWIWRITE))) {
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
    1296:	c8 2f       	mov	r28, r24
    1298:	88 23       	and	r24, r24
    129a:	21 f0       	breq	.+8      	; 0x12a4 <write_MMA8451+0x1e>
		stop_TWI();
    129c:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
		return(retval);
    12a0:	8c 2f       	mov	r24, r28
    12a2:	17 c0       	rjmp	.+46     	; 0x12d2 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(reg))) {
    12a4:	8d 2f       	mov	r24, r29
    12a6:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
    12aa:	c8 2f       	mov	r28, r24
    12ac:	88 23       	and	r24, r24
    12ae:	21 f0       	breq	.+8      	; 0x12b8 <write_MMA8451+0x32>
		stop_TWI();
    12b0:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
		return(retval);
    12b4:	8c 2f       	mov	r24, r28
    12b6:	0d c0       	rjmp	.+26     	; 0x12d2 <write_MMA8451+0x4c>
	}
	if ((retval = write_TWI(val))) {
    12b8:	81 2f       	mov	r24, r17
    12ba:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
    12be:	c8 2f       	mov	r28, r24
    12c0:	88 23       	and	r24, r24
    12c2:	21 f0       	breq	.+8      	; 0x12cc <write_MMA8451+0x46>
		stop_TWI();
    12c4:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
		return(retval);
    12c8:	8c 2f       	mov	r24, r28
    12ca:	03 c0       	rjmp	.+6      	; 0x12d2 <write_MMA8451+0x4c>
	}
	stop_TWI();
    12cc:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>
	return(0);
    12d0:	80 e0       	ldi	r24, 0x00	; 0
	
}
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	1f 91       	pop	r17
    12d8:	08 95       	ret

000012da <init_MMA8451>:
	filter (2.0 Hz), and oversampling and resolution. This gives us good
	consistency (better than 0.5 cm/s/s) at the cost of longer sampling times.
------------------------------------------------------------------------------*/

uint8_t init_MMA8451(void)
{
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	1f 92       	push	r1
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62

	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
    12e4:	40 e4       	ldi	r20, 0x40	; 64
    12e6:	6b e2       	ldi	r22, 0x2B	; 43
    12e8:	8d e1       	ldi	r24, 0x1D	; 29
    12ea:	0e 94 43 09 	call	0x1286	; 0x1286 <write_MMA8451>
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
    12ee:	21 e0       	ldi	r18, 0x01	; 1
    12f0:	ae 01       	movw	r20, r28
    12f2:	4f 5f       	subi	r20, 0xFF	; 255
    12f4:	5f 4f       	sbci	r21, 0xFF	; 255
    12f6:	6b e2       	ldi	r22, 0x2B	; 43
    12f8:	8d e1       	ldi	r24, 0x1D	; 29
    12fa:	0e 94 77 08 	call	0x10ee	; 0x10ee <read_MMA8451>
	while (retval & 0x40) {
    12fe:	08 c0       	rjmp	.+16     	; 0x1310 <init_MMA8451+0x36>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
    1300:	21 e0       	ldi	r18, 0x01	; 1
    1302:	ae 01       	movw	r20, r28
    1304:	4f 5f       	subi	r20, 0xFF	; 255
    1306:	5f 4f       	sbci	r21, 0xFF	; 255
    1308:	6b e2       	ldi	r22, 0x2B	; 43
    130a:	8d e1       	ldi	r24, 0x1D	; 29
    130c:	0e 94 77 08 	call	0x10ee	; 0x10ee <read_MMA8451>
	uint8_t addr, retval;

	addr = MMA8451ADDR;
	write_MMA8451(addr, MMA8451CTRLREG2, 0x40);			// reset
	read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);	// Wait to finish
	while (retval & 0x40) {
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	86 fd       	sbrc	r24, 6
    1314:	f5 cf       	rjmp	.-22     	; 0x1300 <init_MMA8451+0x26>
		read_MMA8451(addr, MMA8451CTRLREG2, &retval, 1);
	}

		// 2.0 Hz high frequency filter cutoff
	write_MMA8451(addr, MMA8451HFCUTOFF, 0b11000000);
    1316:	40 ec       	ldi	r20, 0xC0	; 192
    1318:	6f e0       	ldi	r22, 0x0F	; 15
    131a:	8d e1       	ldi	r24, 0x1D	; 29
    131c:	0e 94 43 09 	call	0x1286	; 0x1286 <write_MMA8451>

		// High resolution mode
	write_MMA8451(addr, MMA8451CTRLREG2, 0b00000010);
    1320:	42 e0       	ldi	r20, 0x02	; 2
    1322:	6b e2       	ldi	r22, 0x2B	; 43
    1324:	8d e1       	ldi	r24, 0x1D	; 29
    1326:	0e 94 43 09 	call	0x1286	; 0x1286 <write_MMA8451>

		// 1.56 Hz sampling, low noise, set active
	write_MMA8451(addr, MMA8451CTRLREG1, 0b00111101);
    132a:	4d e3       	ldi	r20, 0x3D	; 61
    132c:	6a e2       	ldi	r22, 0x2A	; 42
    132e:	8d e1       	ldi	r24, 0x1D	; 29
    1330:	0e 94 43 09 	call	0x1286	; 0x1286 <write_MMA8451>

	return(retval);

}
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	0f 90       	pop	r0
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	08 95       	ret

0000133e <checksum_NMEA>:
/*------------------------------------------------------------------------------
void checksum_NMEA(char *str)
	Append checksum to a string
------------------------------------------------------------------------------*/
void checksum_NMEA(char *str)
{
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	2e 97       	sbiw	r28, 0x0e	; 14
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	8c 01       	movw	r16, r24
	const char format_CSM[] = "*%02X\r\n";
    1356:	88 e0       	ldi	r24, 0x08	; 8
    1358:	e8 ef       	ldi	r30, 0xF8	; 248
    135a:	ff e7       	ldi	r31, 0x7F	; 127
    135c:	de 01       	movw	r26, r28
    135e:	11 96       	adiw	r26, 0x01	; 1
    1360:	01 90       	ld	r0, Z+
    1362:	0d 92       	st	X+, r0
    1364:	8a 95       	dec	r24
    1366:	e1 f7       	brne	.-8      	; 0x1360 <checksum_NMEA+0x22>

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
    1368:	f8 01       	movw	r30, r16
    136a:	01 90       	ld	r0, Z+
    136c:	00 20       	and	r0, r0
    136e:	e9 f7       	brne	.-6      	; 0x136a <checksum_NMEA+0x2c>
    1370:	31 97       	sbiw	r30, 0x01	; 1
    1372:	3e 2f       	mov	r19, r30
    1374:	30 1b       	sub	r19, r16
	const char format_CSM[] = "*%02X\r\n";

	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
    1376:	90 e0       	ldi	r25, 0x00	; 0
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	06 c0       	rjmp	.+12     	; 0x1388 <checksum_NMEA+0x4a>
		checksum ^= str[i];
    137c:	f8 01       	movw	r30, r16
    137e:	e8 0f       	add	r30, r24
    1380:	f1 1d       	adc	r31, r1
    1382:	20 81       	ld	r18, Z
    1384:	92 27       	eor	r25, r18
	char chksum[6];
	uint8_t i, nchar, checksum;

	checksum = 0;
	nchar = strlen(str);
	for (i = 1; i < nchar; i++) {
    1386:	8f 5f       	subi	r24, 0xFF	; 255
    1388:	83 17       	cp	r24, r19
    138a:	c0 f3       	brcs	.-16     	; 0x137c <checksum_NMEA+0x3e>
		checksum ^= str[i];
	}
	sprintf(chksum, format_CSM, checksum);
    138c:	1f 92       	push	r1
    138e:	9f 93       	push	r25
    1390:	ce 01       	movw	r24, r28
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	9f 93       	push	r25
    1396:	8f 93       	push	r24
    1398:	7e 01       	movw	r14, r28
    139a:	89 e0       	ldi	r24, 0x09	; 9
    139c:	e8 0e       	add	r14, r24
    139e:	f1 1c       	adc	r15, r1
    13a0:	ff 92       	push	r15
    13a2:	ef 92       	push	r14
    13a4:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
	strcat(str, chksum);
    13a8:	b7 01       	movw	r22, r14
    13aa:	c8 01       	movw	r24, r16
    13ac:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <strcat>

}
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	2e 96       	adiw	r28, 0x0e	; 14
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ff 90       	pop	r15
    13cc:	ef 90       	pop	r14
    13ce:	08 95       	ret

000013d0 <printError>:
/*------------------------------------------------------------------------------
void format_ERR(char *str)
	Returns an error line
------------------------------------------------------------------------------*/
void printError(uint8_t errorVal, char *string)
{
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	cf 55       	subi	r28, 0x5F	; 95
    13de:	d1 09       	sbc	r29, r1
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	de bf       	out	0x3e, r29	; 62

	char strbuf[81];
	const char errformat[] = "$S%dERR,%d,%s";
    13e4:	9e e0       	ldi	r25, 0x0E	; 14
    13e6:	e0 e0       	ldi	r30, 0x00	; 0
    13e8:	f0 e8       	ldi	r31, 0x80	; 128
    13ea:	de 01       	movw	r26, r28
    13ec:	ae 5a       	subi	r26, 0xAE	; 174
    13ee:	bf 4f       	sbci	r27, 0xFF	; 255
    13f0:	01 90       	ld	r0, Z+
    13f2:	0d 92       	st	X+, r0
    13f4:	9a 95       	dec	r25
    13f6:	e1 f7       	brne	.-8      	; 0x13f0 <printError+0x20>

	sprintf(strbuf, errformat, get_SPECID, errorVal, string);
    13f8:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    13fc:	92 ff       	sbrs	r25, 2
    13fe:	03 c0       	rjmp	.+6      	; 0x1406 <printError+0x36>
    1400:	92 e0       	ldi	r25, 0x02	; 2
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	02 c0       	rjmp	.+4      	; 0x140a <printError+0x3a>
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	7f 93       	push	r23
    140c:	6f 93       	push	r22
    140e:	1f 92       	push	r1
    1410:	8f 93       	push	r24
    1412:	2f 93       	push	r18
    1414:	9f 93       	push	r25
    1416:	ce 01       	movw	r24, r28
    1418:	8e 5a       	subi	r24, 0xAE	; 174
    141a:	9f 4f       	sbci	r25, 0xFF	; 255
    141c:	9f 93       	push	r25
    141e:	8f 93       	push	r24
    1420:	8e 01       	movw	r16, r28
    1422:	0f 5f       	subi	r16, 0xFF	; 255
    1424:	1f 4f       	sbci	r17, 0xFF	; 255
    1426:	1f 93       	push	r17
    1428:	0f 93       	push	r16
    142a:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
	checksum_NMEA(strbuf);
    142e:	c8 01       	movw	r24, r16
    1430:	0e 94 9f 09 	call	0x133e	; 0x133e <checksum_NMEA>
	send_USART(0, (uint8_t*) strbuf, strlen(strbuf));
    1434:	f8 01       	movw	r30, r16
    1436:	01 90       	ld	r0, Z+
    1438:	00 20       	and	r0, r0
    143a:	e9 f7       	brne	.-6      	; 0x1436 <printError+0x66>
    143c:	31 97       	sbiw	r30, 0x01	; 1
    143e:	af 01       	movw	r20, r30
    1440:	40 1b       	sub	r20, r16
    1442:	51 0b       	sbc	r21, r17
    1444:	b8 01       	movw	r22, r16
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	0e 94 11 16 	call	0x2c22	; 0x2c22 <send_USART>

}
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	c1 5a       	subi	r28, 0xA1	; 161
    1452:	df 4f       	sbci	r29, 0xFF	; 255
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	08 95       	ret

00001462 <write_OLED>:
	the screen. The next byte sent is either the  command or the screen
	character.

------------------------------------------------------------------------------*/
void write_OLED(uint8_t twiaddr, uint8_t type, uint8_t byteToSend)
{
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	d6 2f       	mov	r29, r22
    1468:	c4 2f       	mov	r28, r20

	start_TWI(twiaddr, TWIWRITE);
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <start_TWI>
	write_TWI(type);
    1470:	8d 2f       	mov	r24, r29
    1472:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
	write_TWI(byteToSend);
    1476:	8c 2f       	mov	r24, r28
    1478:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <write_TWI>
	stop_TWI();
    147c:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <stop_TWI>

}
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	08 95       	ret

00001486 <init_OLED>:

	The displaynumber can be either 0 or 1. When the SA0 pin is grounded, you
	get displaynumber 0. A displaynumber not 0 acts on the other display.
------------------------------------------------------------------------------*/
void init_OLED(uint8_t displaynumber)
{
    1486:	cf 93       	push	r28

	uint8_t twiaddr;

	PORTD.OUTCLR = PIN6_bm;		// PD6 is the /RESET pin for the OLED displays
    1488:	e0 e6       	ldi	r30, 0x60	; 96
    148a:	f4 e0       	ldi	r31, 0x04	; 4
    148c:	90 e4       	ldi	r25, 0x40	; 64
    148e:	96 83       	std	Z+6, r25	; 0x06
	PORTD.DIRSET = PIN6_bm;
    1490:	91 83       	std	Z+1, r25	; 0x01
    1492:	a1 e4       	ldi	r26, 0x41	; 65
    1494:	b3 e0       	ldi	r27, 0x03	; 3
    1496:	11 97       	sbiw	r26, 0x01	; 1
    1498:	f1 f7       	brne	.-4      	; 0x1496 <init_OLED+0x10>
    149a:	00 00       	nop
	_delay_ms(1);				// Reset time
	PORTD.OUTSET = PIN6_bm;
    149c:	95 83       	std	Z+5, r25	; 0x05

	if (displaynumber == 0) {
    149e:	81 11       	cpse	r24, r1
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <init_OLED+0x20>
		twiaddr = OLEDADDR0;
    14a2:	cc e3       	ldi	r28, 0x3C	; 60
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <init_OLED+0x22>
	} else {
		twiaddr = OLEDADDR1;
    14a6:	cd e3       	ldi	r28, 0x3D	; 61
	}

	write_OLED(twiaddr, OLEDCMD, 0x2A);	// Function set (extended command set)
    14a8:	4a e2       	ldi	r20, 0x2A	; 42
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	8c 2f       	mov	r24, r28
    14ae:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x71);	//function selection A
    14b2:	41 e7       	ldi	r20, 0x71	; 113
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	8c 2f       	mov	r24, r28
    14b8:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
//	write_OLED(twiaddr, OLEDDATA, 0x00);	// disable internal VDD regulator (2.8V I/O). data(0x5C) = enable regulator (5V I/O)
	write_OLED(twiaddr, OLEDDATA, 0x5C);	// Enable internal VDD regulator (data(0x5C) = enable regulator (5V I/O)
    14bc:	4c e5       	ldi	r20, 0x5C	; 92
    14be:	60 e4       	ldi	r22, 0x40	; 64
    14c0:	8c 2f       	mov	r24, r28
    14c2:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    14c6:	48 e2       	ldi	r20, 0x28	; 40
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	8c 2f       	mov	r24, r28
    14cc:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//display off, cursor off, blink off
    14d0:	48 e0       	ldi	r20, 0x08	; 8
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	8c 2f       	mov	r24, r28
    14d6:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    14da:	4a e2       	ldi	r20, 0x2A	; 42
    14dc:	60 e0       	ldi	r22, 0x00	; 0
    14de:	8c 2f       	mov	r24, r28
    14e0:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    14e4:	49 e7       	ldi	r20, 0x79	; 121
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	8c 2f       	mov	r24, r28
    14ea:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD5);	//set display clock divide ratio/oscillator frequency
    14ee:	45 ed       	ldi	r20, 0xD5	; 213
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	8c 2f       	mov	r24, r28
    14f4:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x70);	//set display clock divide ratio/oscillator frequency
    14f8:	40 e7       	ldi	r20, 0x70	; 112
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	8c 2f       	mov	r24, r28
    14fe:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    1502:	48 e7       	ldi	r20, 0x78	; 120
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	8c 2f       	mov	r24, r28
    1508:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x08);	//extended function set (2-lines)
    150c:	48 e0       	ldi	r20, 0x08	; 8
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	8c 2f       	mov	r24, r28
    1512:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x06);	//COM SEG direction
    1516:	46 e0       	ldi	r20, 0x06	; 6
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	8c 2f       	mov	r24, r28
    151c:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x72);	//function selection B
    1520:	42 e7       	ldi	r20, 0x72	; 114
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	8c 2f       	mov	r24, r28
    1526:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDDATA, 0x00);	//ROM CGRAM selection
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	60 e4       	ldi	r22, 0x40	; 64
    152e:	8c 2f       	mov	r24, r28
    1530:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x2A);	//function set (extended command set)
    1534:	4a e2       	ldi	r20, 0x2A	; 42
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	8c 2f       	mov	r24, r28
    153a:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x79);	//OLED command set enabled
    153e:	49 e7       	ldi	r20, 0x79	; 121
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	8c 2f       	mov	r24, r28
    1544:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDA);	//set SEG pins hardware configuration
    1548:	4a ed       	ldi	r20, 0xDA	; 218
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	8c 2f       	mov	r24, r28
    154e:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//set SEG pins hardware configuration
    1552:	40 e0       	ldi	r20, 0x00	; 0
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	8c 2f       	mov	r24, r28
    1558:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDC);	//function selection C
    155c:	4c ed       	ldi	r20, 0xDC	; 220
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	8c 2f       	mov	r24, r28
    1562:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x00);	//function selection C
    1566:	40 e0       	ldi	r20, 0x00	; 0
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	8c 2f       	mov	r24, r28
    156c:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x81);	//set contrast control
    1570:	41 e8       	ldi	r20, 0x81	; 129
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	8c 2f       	mov	r24, r28
    1576:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x7F);	//set contrast control
    157a:	4f e7       	ldi	r20, 0x7F	; 127
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	8c 2f       	mov	r24, r28
    1580:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xD9);	//set phase length
    1584:	49 ed       	ldi	r20, 0xD9	; 217
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	8c 2f       	mov	r24, r28
    158a:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xF1);	//set phase length
    158e:	41 ef       	ldi	r20, 0xF1	; 241
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	8c 2f       	mov	r24, r28
    1594:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0xDB);	//set VCOMH deselect level
    1598:	4b ed       	ldi	r20, 0xDB	; 219
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	8c 2f       	mov	r24, r28
    159e:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x40);	//set VCOMH deselect level
    15a2:	40 e4       	ldi	r20, 0x40	; 64
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	8c 2f       	mov	r24, r28
    15a8:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x78);	//OLED command set disabled
    15ac:	48 e7       	ldi	r20, 0x78	; 120
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	8c 2f       	mov	r24, r28
    15b2:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x28);	//function set (fundamental command set)
    15b6:	48 e2       	ldi	r20, 0x28	; 40
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	8c 2f       	mov	r24, r28
    15bc:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x01);	//clear display
    15c0:	41 e0       	ldi	r20, 0x01	; 1
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	8c 2f       	mov	r24, r28
    15c6:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x80);	//set DDRAM address to 0x00
    15ca:	40 e8       	ldi	r20, 0x80	; 128
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	8c 2f       	mov	r24, r28
    15d0:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	write_OLED(twiaddr, OLEDCMD, 0x0C);	// Display ON
    15d4:	4c e0       	ldi	r20, 0x0C	; 12
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	8c 2f       	mov	r24, r28
    15da:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
    15de:	ba e6       	ldi	r27, 0x6A	; 106
    15e0:	24 e0       	ldi	r18, 0x04	; 4
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	b1 50       	subi	r27, 0x01	; 1
    15e6:	20 40       	sbci	r18, 0x00	; 0
    15e8:	80 40       	sbci	r24, 0x00	; 0
    15ea:	e1 f7       	brne	.-8      	; 0x15e4 <init_OLED+0x15e>
    15ec:	00 c0       	rjmp	.+0      	; 0x15ee <init_OLED+0x168>
	_delay_ms(100);				// Wait after display-on command

	timerOLED = 0;
    15ee:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED>
    15f2:	10 92 0e 2a 	sts	0x2A0E, r1	; 0x802a0e <timerOLED+0x1>
	timeoutOLED = 5;
    15f6:	85 e0       	ldi	r24, 0x05	; 5
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	80 93 0f 2a 	sts	0x2A0F, r24	; 0x802a0f <timeoutOLED>
    15fe:	90 93 10 2a 	sts	0x2A10, r25	; 0x802a10 <timeoutOLED+0x1>

}
    1602:	cf 91       	pop	r28
    1604:	08 95       	ret

00001606 <writestr_OLED>:
	This routine positions the cursor at the beginning of a line (1 or 2) pads
	the string with blanks, then writes the full 16 characters to the display.

------------------------------------------------------------------------------*/
void writestr_OLED(uint8_t displaynumber, char *str, uint8_t lineno)
{
    1606:	ef 92       	push	r14
    1608:	ff 92       	push	r15
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	e2 97       	sbiw	r28, 0x32	; 50
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	14 2f       	mov	r17, r20

	uint8_t i, twiaddr;
	char strbuf[33];
	const char blanks[] = "                ";
    161e:	91 e1       	ldi	r25, 0x11	; 17
    1620:	ee e0       	ldi	r30, 0x0E	; 14
    1622:	f0 e8       	ldi	r31, 0x80	; 128
    1624:	de 01       	movw	r26, r28
    1626:	92 96       	adiw	r26, 0x22	; 34
    1628:	01 90       	ld	r0, Z+
    162a:	0d 92       	st	X+, r0
    162c:	9a 95       	dec	r25
    162e:	e1 f7       	brne	.-8      	; 0x1628 <writestr_OLED+0x22>

	if (displaynumber == 0) {
    1630:	81 11       	cpse	r24, r1
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <writestr_OLED+0x32>
		twiaddr = OLEDADDR0;
    1634:	0c e3       	ldi	r16, 0x3C	; 60
    1636:	01 c0       	rjmp	.+2      	; 0x163a <writestr_OLED+0x34>
	} else {
		twiaddr = OLEDADDR1;
    1638:	0d e3       	ldi	r16, 0x3D	; 61
	}
	strcpy(strbuf, str);
    163a:	ce 01       	movw	r24, r28
    163c:	01 96       	adiw	r24, 0x01	; 1
    163e:	7c 01       	movw	r14, r24
    1640:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <strcpy>
	if (strlen(strbuf) > 16) {
    1644:	f7 01       	movw	r30, r14
    1646:	01 90       	ld	r0, Z+
    1648:	00 20       	and	r0, r0
    164a:	e9 f7       	brne	.-6      	; 0x1646 <writestr_OLED+0x40>
    164c:	31 97       	sbiw	r30, 0x01	; 1
    164e:	ee 19       	sub	r30, r14
    1650:	ff 09       	sbc	r31, r15
    1652:	71 97       	sbiw	r30, 0x11	; 17
    1654:	08 f0       	brcs	.+2      	; 0x1658 <writestr_OLED+0x52>
		strbuf[16] = '\0';
    1656:	19 8a       	std	Y+17, r1	; 0x11
	}
	strcat(strbuf, blanks);		// pad with blanks
    1658:	be 01       	movw	r22, r28
    165a:	6e 5d       	subi	r22, 0xDE	; 222
    165c:	7f 4f       	sbci	r23, 0xFF	; 255
    165e:	ce 01       	movw	r24, r28
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <strcat>

	if (lineno == 1) {
    1666:	11 30       	cpi	r17, 0x01	; 1
    1668:	39 f4       	brne	.+14     	; 0x1678 <writestr_OLED+0x72>
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);
    166a:	40 e8       	ldi	r20, 0x80	; 128
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	80 2f       	mov	r24, r16
    1670:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
	const char blanks[] = "                ";

	if (displaynumber == 0) {
		twiaddr = OLEDADDR0;
	} else {
		twiaddr = OLEDADDR1;
    1674:	10 e0       	ldi	r17, 0x00	; 0
    1676:	12 c0       	rjmp	.+36     	; 0x169c <writestr_OLED+0x96>

	if (lineno == 1) {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE1);

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
    1678:	40 ec       	ldi	r20, 0xC0	; 192
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	80 2f       	mov	r24, r16
    167e:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>
    1682:	f8 cf       	rjmp	.-16     	; 0x1674 <writestr_OLED+0x6e>
	}

	for (i = 0; i < 16; i++) {
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
    1684:	e1 e0       	ldi	r30, 0x01	; 1
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	ec 0f       	add	r30, r28
    168a:	fd 1f       	adc	r31, r29
    168c:	e1 0f       	add	r30, r17
    168e:	f1 1d       	adc	r31, r1
    1690:	40 81       	ld	r20, Z
    1692:	60 e4       	ldi	r22, 0x40	; 64
    1694:	80 2f       	mov	r24, r16
    1696:	0e 94 31 0a 	call	0x1462	; 0x1462 <write_OLED>

	} else {
		write_OLED(twiaddr, OLEDCMD, OLEDLINE2);
	}

	for (i = 0; i < 16; i++) {
    169a:	1f 5f       	subi	r17, 0xFF	; 255
    169c:	10 31       	cpi	r17, 0x10	; 16
    169e:	90 f3       	brcs	.-28     	; 0x1684 <writestr_OLED+0x7e>
		write_OLED(twiaddr, OLEDDATA, strbuf[i]);
	}

	timerOLED = 1;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timerOLED>
    16a8:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timerOLED+0x1>

}
    16ac:	e2 96       	adiw	r28, 0x32	; 50
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	08 95       	ret

000016c0 <clear_OLED>:
/*------------------------------------------------------------------------------
void clear_OLED(uint8_t displaynumber)
	Clears the OLED screen by writing blank spaces to both lines.
------------------------------------------------------------------------------*/
void clear_OLED(uint8_t displaynumber)
{
    16c0:	1f 93       	push	r17
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	61 97       	sbiw	r28, 0x11	; 17
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	18 2f       	mov	r17, r24

	char blanks[] = "                ";	// Does const put this in flash?
    16d2:	81 e1       	ldi	r24, 0x11	; 17
    16d4:	ee e0       	ldi	r30, 0x0E	; 14
    16d6:	f0 e8       	ldi	r31, 0x80	; 128
    16d8:	de 01       	movw	r26, r28
    16da:	11 96       	adiw	r26, 0x01	; 1
    16dc:	01 90       	ld	r0, Z+
    16de:	0d 92       	st	X+, r0
    16e0:	8a 95       	dec	r24
    16e2:	e1 f7       	brne	.-8      	; 0x16dc <clear_OLED+0x1c>

	writestr_OLED(displaynumber, blanks, 1);
    16e4:	41 e0       	ldi	r20, 0x01	; 1
    16e6:	be 01       	movw	r22, r28
    16e8:	6f 5f       	subi	r22, 0xFF	; 255
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	81 2f       	mov	r24, r17
    16ee:	0e 94 03 0b 	call	0x1606	; 0x1606 <writestr_OLED>
	writestr_OLED(displaynumber, blanks, 2);
    16f2:	42 e0       	ldi	r20, 0x02	; 2
    16f4:	be 01       	movw	r22, r28
    16f6:	6f 5f       	subi	r22, 0xFF	; 255
    16f8:	7f 4f       	sbci	r23, 0xFF	; 255
    16fa:	81 2f       	mov	r24, r17
    16fc:	0e 94 03 0b 	call	0x1606	; 0x1606 <writestr_OLED>
	timerOLED = 0;
    1700:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED>
    1704:	10 92 0e 2a 	sts	0x2A0E, r1	; 0x802a0e <timerOLED+0x1>

}
    1708:	61 96       	adiw	r28, 0x11	; 17
    170a:	cd bf       	out	0x3d, r28	; 61
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	08 95       	ret

00001716 <init_PNEU>:
uint8_t init_PNEU(void)
{

	uint8_t retval;

	if ((retval = write_MCP23008(HIGHCURRENT, IODIR, 0x00))) {
    1716:	40 e0       	ldi	r20, 0x00	; 0
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	84 e2       	ldi	r24, 0x24	; 36
    171c:	0e 94 fe 07 	call	0xffc	; 0xffc <write_MCP23008>
    1720:	81 11       	cpse	r24, r1
    1722:	35 c0       	rjmp	.+106    	; 0x178e <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, 0x00))) {
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	6a e0       	ldi	r22, 0x0A	; 10
    1728:	84 e2       	ldi	r24, 0x24	; 36
    172a:	0e 94 fe 07 	call	0xffc	; 0xffc <write_MCP23008>
    172e:	81 11       	cpse	r24, r1
    1730:	2e c0       	rjmp	.+92     	; 0x178e <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IODIR, 0xFE))) {	// Inputs
    1732:	4e ef       	ldi	r20, 0xFE	; 254
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	81 e2       	ldi	r24, 0x21	; 33
    1738:	0e 94 fe 07 	call	0xffc	; 0xffc <write_MCP23008>
    173c:	81 11       	cpse	r24, r1
    173e:	27 c0       	rjmp	.+78     	; 0x178e <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IPOL, 0x00))) {
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	61 e0       	ldi	r22, 0x01	; 1
    1744:	81 e2       	ldi	r24, 0x21	; 33
    1746:	0e 94 fe 07 	call	0xffc	; 0xffc <write_MCP23008>
    174a:	81 11       	cpse	r24, r1
    174c:	20 c0       	rjmp	.+64     	; 0x178e <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPINTEN, 0b11111100))) {
    174e:	4c ef       	ldi	r20, 0xFC	; 252
    1750:	62 e0       	ldi	r22, 0x02	; 2
    1752:	81 e2       	ldi	r24, 0x21	; 33
    1754:	0e 94 fe 07 	call	0xffc	; 0xffc <write_MCP23008>
    1758:	81 11       	cpse	r24, r1
    175a:	19 c0       	rjmp	.+50     	; 0x178e <init_PNEU+0x78>
			return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, INTCON, 0x00))) {
    175c:	40 e0       	ldi	r20, 0x00	; 0
    175e:	64 e0       	ldi	r22, 0x04	; 4
    1760:	81 e2       	ldi	r24, 0x21	; 33
    1762:	0e 94 fe 07 	call	0xffc	; 0xffc <write_MCP23008>
    1766:	81 11       	cpse	r24, r1
    1768:	12 c0       	rjmp	.+36     	; 0x178e <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, IOCON, 0x20))) { // Don't increment addr
    176a:	40 e2       	ldi	r20, 0x20	; 32
    176c:	65 e0       	ldi	r22, 0x05	; 5
    176e:	81 e2       	ldi	r24, 0x21	; 33
    1770:	0e 94 fe 07 	call	0xffc	; 0xffc <write_MCP23008>
    1774:	81 11       	cpse	r24, r1
    1776:	0b c0       	rjmp	.+22     	; 0x178e <init_PNEU+0x78>
		return(retval);
	}
	if ((retval = write_MCP23008(PNEUSENSORS, GPPU, 0x7F))) { // Pullups (not really needed)
    1778:	4f e7       	ldi	r20, 0x7F	; 127
    177a:	66 e0       	ldi	r22, 0x06	; 6
    177c:	81 e2       	ldi	r24, 0x21	; 33
    177e:	0e 94 fe 07 	call	0xffc	; 0xffc <write_MCP23008>
    1782:	81 11       	cpse	r24, r1
    1784:	04 c0       	rjmp	.+8      	; 0x178e <init_PNEU+0x78>
		return(retval);
	}
	PORTD.PIN7CTRL = PORT_PULLUPEN_bm | PORT_ISC_BOTHEDGES_gc;	// PNEUSENSORS
    1786:	89 e0       	ldi	r24, 0x09	; 9
    1788:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <__TEXT_REGION_LENGTH__+0x7f4477>
	return(0);
    178c:	80 e0       	ldi	r24, 0x00	; 0

}
    178e:	08 95       	ret

00001790 <read_PNEUSENSORS>:
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
	Reports the GMR sensors on the shutter and Hartmann doors, as well as the
	state of the air pressure switch.
------------------------------------------------------------------------------*/
void read_PNEUSENSORS(char *shutter, char *left, char *right, char *air)
{
    1790:	cf 92       	push	r12
    1792:	df 92       	push	r13
    1794:	ef 92       	push	r14
    1796:	ff 92       	push	r15
    1798:	0f 93       	push	r16
    179a:	1f 93       	push	r17
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	6c 01       	movw	r12, r24
    17a2:	8b 01       	movw	r16, r22
    17a4:	7a 01       	movw	r14, r20
    17a6:	e9 01       	movw	r28, r18

	uint8_t sensors, state;
// CHANGE TO pneuState????
	sensors = read_MCP23008(PNEUSENSORS, GPIO);
    17a8:	69 e0       	ldi	r22, 0x09	; 9
    17aa:	81 e2       	ldi	r24, 0x21	; 33
    17ac:	0e 94 e7 07 	call	0xfce	; 0xfce <read_MCP23008>

	// Shutter
	state = sensors >> 6;
    17b0:	98 2f       	mov	r25, r24
    17b2:	92 95       	swap	r25
    17b4:	96 95       	lsr	r25
    17b6:	96 95       	lsr	r25
    17b8:	93 70       	andi	r25, 0x03	; 3
	state &= 0b00000011;
	if (state == 1) {
    17ba:	91 30       	cpi	r25, 0x01	; 1
    17bc:	21 f4       	brne	.+8      	; 0x17c6 <read_PNEUSENSORS+0x36>
		*shutter = 'c';
    17be:	93 e6       	ldi	r25, 0x63	; 99
    17c0:	f6 01       	movw	r30, r12
    17c2:	90 83       	st	Z, r25
    17c4:	0f c0       	rjmp	.+30     	; 0x17e4 <read_PNEUSENSORS+0x54>
	} else if (state == 2) {
    17c6:	92 30       	cpi	r25, 0x02	; 2
    17c8:	21 f4       	brne	.+8      	; 0x17d2 <read_PNEUSENSORS+0x42>
		*shutter = 'o';
    17ca:	9f e6       	ldi	r25, 0x6F	; 111
    17cc:	f6 01       	movw	r30, r12
    17ce:	90 83       	st	Z, r25
    17d0:	09 c0       	rjmp	.+18     	; 0x17e4 <read_PNEUSENSORS+0x54>
	} else if (state == 3) {
    17d2:	93 30       	cpi	r25, 0x03	; 3
    17d4:	21 f4       	brne	.+8      	; 0x17de <read_PNEUSENSORS+0x4e>
		*shutter = 't';
    17d6:	94 e7       	ldi	r25, 0x74	; 116
    17d8:	f6 01       	movw	r30, r12
    17da:	90 83       	st	Z, r25
    17dc:	03 c0       	rjmp	.+6      	; 0x17e4 <read_PNEUSENSORS+0x54>
	} else {
		*shutter = 'x';
    17de:	98 e7       	ldi	r25, 0x78	; 120
    17e0:	f6 01       	movw	r30, r12
    17e2:	90 83       	st	Z, r25
	}

	// Right
	state = sensors >> 2;
    17e4:	98 2f       	mov	r25, r24
    17e6:	96 95       	lsr	r25
    17e8:	96 95       	lsr	r25
	state &= 0b00000011;
    17ea:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    17ec:	91 30       	cpi	r25, 0x01	; 1
    17ee:	21 f4       	brne	.+8      	; 0x17f8 <read_PNEUSENSORS+0x68>
		*right = 'c';
    17f0:	93 e6       	ldi	r25, 0x63	; 99
    17f2:	f7 01       	movw	r30, r14
    17f4:	90 83       	st	Z, r25
    17f6:	0f c0       	rjmp	.+30     	; 0x1816 <__DATA_REGION_LENGTH__+0x16>
	} else if (state == 2) {
    17f8:	92 30       	cpi	r25, 0x02	; 2
    17fa:	21 f4       	brne	.+8      	; 0x1804 <__DATA_REGION_LENGTH__+0x4>
		*right = 'o';
    17fc:	9f e6       	ldi	r25, 0x6F	; 111
    17fe:	f7 01       	movw	r30, r14
    1800:	90 83       	st	Z, r25
    1802:	09 c0       	rjmp	.+18     	; 0x1816 <__DATA_REGION_LENGTH__+0x16>
	} else if (state == 3) {
    1804:	93 30       	cpi	r25, 0x03	; 3
    1806:	21 f4       	brne	.+8      	; 0x1810 <__DATA_REGION_LENGTH__+0x10>
		*right = 't';
    1808:	94 e7       	ldi	r25, 0x74	; 116
    180a:	f7 01       	movw	r30, r14
    180c:	90 83       	st	Z, r25
    180e:	03 c0       	rjmp	.+6      	; 0x1816 <__DATA_REGION_LENGTH__+0x16>
	} else {
		*right = 'x';
    1810:	98 e7       	ldi	r25, 0x78	; 120
    1812:	f7 01       	movw	r30, r14
    1814:	90 83       	st	Z, r25
	}

	// Left
	state = sensors >> 4;
    1816:	98 2f       	mov	r25, r24
    1818:	92 95       	swap	r25
    181a:	9f 70       	andi	r25, 0x0F	; 15
	state &= 0b00000011;
    181c:	93 70       	andi	r25, 0x03	; 3
	if (state == 1) {
    181e:	91 30       	cpi	r25, 0x01	; 1
    1820:	21 f4       	brne	.+8      	; 0x182a <__DATA_REGION_LENGTH__+0x2a>
		*left = 'o';
    1822:	9f e6       	ldi	r25, 0x6F	; 111
    1824:	f8 01       	movw	r30, r16
    1826:	90 83       	st	Z, r25
    1828:	0f c0       	rjmp	.+30     	; 0x1848 <__DATA_REGION_LENGTH__+0x48>
	} else if (state == 2) {
    182a:	92 30       	cpi	r25, 0x02	; 2
    182c:	21 f4       	brne	.+8      	; 0x1836 <__DATA_REGION_LENGTH__+0x36>
		*left = 'c';
    182e:	93 e6       	ldi	r25, 0x63	; 99
    1830:	f8 01       	movw	r30, r16
    1832:	90 83       	st	Z, r25
    1834:	09 c0       	rjmp	.+18     	; 0x1848 <__DATA_REGION_LENGTH__+0x48>
	} else if (state == 3) {
    1836:	93 30       	cpi	r25, 0x03	; 3
    1838:	21 f4       	brne	.+8      	; 0x1842 <__DATA_REGION_LENGTH__+0x42>
		*left = 't';
    183a:	94 e7       	ldi	r25, 0x74	; 116
    183c:	f8 01       	movw	r30, r16
    183e:	90 83       	st	Z, r25
    1840:	03 c0       	rjmp	.+6      	; 0x1848 <__DATA_REGION_LENGTH__+0x48>
	} else {
		*left = 'x';
    1842:	98 e7       	ldi	r25, 0x78	; 120
    1844:	f8 01       	movw	r30, r16
    1846:	90 83       	st	Z, r25
	}

	// Air
	if (sensors & 0b00000010) {
    1848:	81 ff       	sbrs	r24, 1
    184a:	03 c0       	rjmp	.+6      	; 0x1852 <__DATA_REGION_LENGTH__+0x52>
		*air = '0';
    184c:	80 e3       	ldi	r24, 0x30	; 48
    184e:	88 83       	st	Y, r24
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <__DATA_REGION_LENGTH__+0x56>
	} else {
		*air = '1';
    1852:	81 e3       	ldi	r24, 0x31	; 49
    1854:	88 83       	st	Y, r24
	}
}
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	1f 91       	pop	r17
    185c:	0f 91       	pop	r16
    185e:	ff 90       	pop	r15
    1860:	ef 90       	pop	r14
    1862:	df 90       	pop	r13
    1864:	cf 90       	pop	r12
    1866:	08 95       	ret

00001868 <set_PNEUVALVES>:
	Set the Clippard valves.
	Read the current valve state, AND that value with the new pattern, then
	write the new valve state.
------------------------------------------------------------------------------*/
uint8_t set_PNEUVALVES(uint8_t bitmap, uint8_t action)
{
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	d8 2f       	mov	r29, r24
    186e:	c6 2f       	mov	r28, r22

	uint8_t retval, old_state, new_state;

	old_state = read_MCP23008(HIGHCURRENT, GPIO);
    1870:	69 e0       	ldi	r22, 0x09	; 9
    1872:	84 e2       	ldi	r24, 0x24	; 36
    1874:	0e 94 e7 07 	call	0xfce	; 0xfce <read_MCP23008>
	new_state = ((old_state | bitmap) & action);
    1878:	8d 2b       	or	r24, r29
    187a:	48 2f       	mov	r20, r24
    187c:	4c 23       	and	r20, r28

	if ((retval = write_MCP23008(HIGHCURRENT, OLAT, new_state))) {
    187e:	6a e0       	ldi	r22, 0x0A	; 10
    1880:	84 e2       	ldi	r24, 0x24	; 36
    1882:	0e 94 fe 07 	call	0xffc	; 0xffc <write_MCP23008>
		return(retval);
	}

	return(0);

}
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	08 95       	ret

0000188c <close_PNEU>:
	Input:
		mech - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t close_PNEU(char mech)
{
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	6a 97       	sbiw	r28, 0x1a	; 26
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	de bf       	out	0x3e, r29	; 62

	const char dformat_CLO[] = "Close %s";
    189a:	99 e0       	ldi	r25, 0x09	; 9
    189c:	e7 e3       	ldi	r30, 0x37	; 55
    189e:	f0 e8       	ldi	r31, 0x80	; 128
    18a0:	de 01       	movw	r26, r28
    18a2:	11 96       	adiw	r26, 0x01	; 1
    18a4:	01 90       	ld	r0, Z+
    18a6:	0d 92       	st	X+, r0
    18a8:	9a 95       	dec	r25
    18aa:	e1 f7       	brne	.-8      	; 0x18a4 <close_PNEU+0x18>
	char outbuf[17];

	switch (mech) {
    18ac:	8c 36       	cpi	r24, 0x6C	; 108
    18ae:	31 f1       	breq	.+76     	; 0x18fc <close_PNEU+0x70>
    18b0:	18 f4       	brcc	.+6      	; 0x18b8 <close_PNEU+0x2c>
    18b2:	82 36       	cpi	r24, 0x62	; 98
    18b4:	39 f0       	breq	.+14     	; 0x18c4 <close_PNEU+0x38>
    18b6:	75 c0       	rjmp	.+234    	; 0x19a2 <close_PNEU+0x116>
    18b8:	82 37       	cpi	r24, 0x72	; 114
    18ba:	c1 f1       	breq	.+112    	; 0x192c <close_PNEU+0xa0>
    18bc:	83 37       	cpi	r24, 0x73	; 115
    18be:	09 f4       	brne	.+2      	; 0x18c2 <close_PNEU+0x36>
    18c0:	4d c0       	rjmp	.+154    	; 0x195c <close_PNEU+0xd0>
    18c2:	6f c0       	rjmp	.+222    	; 0x19a2 <close_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    18c4:	6a ee       	ldi	r22, 0xEA	; 234
    18c6:	84 e4       	ldi	r24, 0x44	; 68
    18c8:	0e 94 34 0c 	call	0x1868	; 0x1868 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    18cc:	66 ee       	ldi	r22, 0xE6	; 230
    18ce:	88 e8       	ldi	r24, 0x88	; 136
    18d0:	0e 94 34 0c 	call	0x1868	; 0x1868 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "both");
    18d4:	8f e1       	ldi	r24, 0x1F	; 31
    18d6:	90 e8       	ldi	r25, 0x80	; 128
    18d8:	9f 93       	push	r25
    18da:	8f 93       	push	r24
    18dc:	ce 01       	movw	r24, r28
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	9f 93       	push	r25
    18e2:	8f 93       	push	r24
    18e4:	09 96       	adiw	r24, 0x09	; 9
    18e6:	9f 93       	push	r25
    18e8:	8f 93       	push	r24
    18ea:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
			break;
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	47 c0       	rjmp	.+142    	; 0x198a <close_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTCLOSE);
    18fc:	6a ee       	ldi	r22, 0xEA	; 234
    18fe:	84 e4       	ldi	r24, 0x44	; 68
    1900:	0e 94 34 0c 	call	0x1868	; 0x1868 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "left");
    1904:	84 e2       	ldi	r24, 0x24	; 36
    1906:	90 e8       	ldi	r25, 0x80	; 128
    1908:	9f 93       	push	r25
    190a:	8f 93       	push	r24
    190c:	ce 01       	movw	r24, r28
    190e:	01 96       	adiw	r24, 0x01	; 1
    1910:	9f 93       	push	r25
    1912:	8f 93       	push	r24
    1914:	09 96       	adiw	r24, 0x09	; 9
    1916:	9f 93       	push	r25
    1918:	8f 93       	push	r24
    191a:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
			break;
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	2f c0       	rjmp	.+94     	; 0x198a <close_PNEU+0xfe>
			
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTCLOSE);
    192c:	66 ee       	ldi	r22, 0xE6	; 230
    192e:	88 e8       	ldi	r24, 0x88	; 136
    1930:	0e 94 34 0c 	call	0x1868	; 0x1868 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "right");
    1934:	89 e2       	ldi	r24, 0x29	; 41
    1936:	90 e8       	ldi	r25, 0x80	; 128
    1938:	9f 93       	push	r25
    193a:	8f 93       	push	r24
    193c:	ce 01       	movw	r24, r28
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	9f 93       	push	r25
    1942:	8f 93       	push	r24
    1944:	09 96       	adiw	r24, 0x09	; 9
    1946:	9f 93       	push	r25
    1948:	8f 93       	push	r24
    194a:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
			break;
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	17 c0       	rjmp	.+46     	; 0x198a <close_PNEU+0xfe>

		case 's':										// Close shutter
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
    195c:	6c ee       	ldi	r22, 0xEC	; 236
    195e:	82 e2       	ldi	r24, 0x22	; 34
    1960:	0e 94 34 0c 	call	0x1868	; 0x1868 <set_PNEUVALVES>
			sprintf(outbuf, dformat_CLO, "shutter");
    1964:	8f e2       	ldi	r24, 0x2F	; 47
    1966:	90 e8       	ldi	r25, 0x80	; 128
    1968:	9f 93       	push	r25
    196a:	8f 93       	push	r24
    196c:	ce 01       	movw	r24, r28
    196e:	01 96       	adiw	r24, 0x01	; 1
    1970:	9f 93       	push	r25
    1972:	8f 93       	push	r24
    1974:	09 96       	adiw	r24, 0x09	; 9
    1976:	9f 93       	push	r25
    1978:	8f 93       	push	r24
    197a:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
			break;
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
			return(ERRORPROMPT);
			break;

	}

	clear_OLED(1);
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1990:	41 e0       	ldi	r20, 0x01	; 1
    1992:	be 01       	movw	r22, r28
    1994:	66 5f       	subi	r22, 0xF6	; 246
    1996:	7f 4f       	sbci	r23, 0xFF	; 255
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	0e 94 03 0b 	call	0x1606	; 0x1606 <writestr_OLED>
	return(GREATERPROMPT);
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	01 c0       	rjmp	.+2      	; 0x19a4 <close_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTERCLOSE);
			sprintf(outbuf, dformat_CLO, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    19a2:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    19a4:	6a 96       	adiw	r28, 0x1a	; 26
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	08 95       	ret

000019b0 <open_PNEU>:
	Input:
		mechanism - a character that selects the shutter, left Hartmann door,
		right Hartmann door, or both doors.
------------------------------------------------------------------------------*/
uint8_t open_PNEU(char mechanism)
{
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	69 97       	sbiw	r28, 0x19	; 25
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	de bf       	out	0x3e, r29	; 62


	const char dformat_OPE[] = "Open %s";
    19be:	98 e0       	ldi	r25, 0x08	; 8
    19c0:	e0 e4       	ldi	r30, 0x40	; 64
    19c2:	f0 e8       	ldi	r31, 0x80	; 128
    19c4:	de 01       	movw	r26, r28
    19c6:	11 96       	adiw	r26, 0x01	; 1
    19c8:	01 90       	ld	r0, Z+
    19ca:	0d 92       	st	X+, r0
    19cc:	9a 95       	dec	r25
    19ce:	e1 f7       	brne	.-8      	; 0x19c8 <open_PNEU+0x18>
	char outbuf[17];

	switch (mechanism) {
    19d0:	8c 36       	cpi	r24, 0x6C	; 108
    19d2:	31 f1       	breq	.+76     	; 0x1a20 <open_PNEU+0x70>
    19d4:	18 f4       	brcc	.+6      	; 0x19dc <open_PNEU+0x2c>
    19d6:	82 36       	cpi	r24, 0x62	; 98
    19d8:	39 f0       	breq	.+14     	; 0x19e8 <open_PNEU+0x38>
    19da:	75 c0       	rjmp	.+234    	; 0x1ac6 <open_PNEU+0x116>
    19dc:	82 37       	cpi	r24, 0x72	; 114
    19de:	c1 f1       	breq	.+112    	; 0x1a50 <open_PNEU+0xa0>
    19e0:	83 37       	cpi	r24, 0x73	; 115
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <open_PNEU+0x36>
    19e4:	4d c0       	rjmp	.+154    	; 0x1a80 <open_PNEU+0xd0>
    19e6:	6f c0       	rjmp	.+222    	; 0x1ac6 <open_PNEU+0x116>

		case 'b':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    19e8:	6e ea       	ldi	r22, 0xAE	; 174
    19ea:	84 e4       	ldi	r24, 0x44	; 68
    19ec:	0e 94 34 0c 	call	0x1868	; 0x1868 <set_PNEUVALVES>
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    19f0:	6e e6       	ldi	r22, 0x6E	; 110
    19f2:	88 e8       	ldi	r24, 0x88	; 136
    19f4:	0e 94 34 0c 	call	0x1868	; 0x1868 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "both");
    19f8:	8f e1       	ldi	r24, 0x1F	; 31
    19fa:	90 e8       	ldi	r25, 0x80	; 128
    19fc:	9f 93       	push	r25
    19fe:	8f 93       	push	r24
    1a00:	ce 01       	movw	r24, r28
    1a02:	01 96       	adiw	r24, 0x01	; 1
    1a04:	9f 93       	push	r25
    1a06:	8f 93       	push	r24
    1a08:	08 96       	adiw	r24, 0x08	; 8
    1a0a:	9f 93       	push	r25
    1a0c:	8f 93       	push	r24
    1a0e:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
			break;
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	47 c0       	rjmp	.+142    	; 0x1aae <open_PNEU+0xfe>

		case 'l':
			set_PNEUVALVES(LEFTBM, LEFTOPEN);
    1a20:	6e ea       	ldi	r22, 0xAE	; 174
    1a22:	84 e4       	ldi	r24, 0x44	; 68
    1a24:	0e 94 34 0c 	call	0x1868	; 0x1868 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "left");
    1a28:	84 e2       	ldi	r24, 0x24	; 36
    1a2a:	90 e8       	ldi	r25, 0x80	; 128
    1a2c:	9f 93       	push	r25
    1a2e:	8f 93       	push	r24
    1a30:	ce 01       	movw	r24, r28
    1a32:	01 96       	adiw	r24, 0x01	; 1
    1a34:	9f 93       	push	r25
    1a36:	8f 93       	push	r24
    1a38:	08 96       	adiw	r24, 0x08	; 8
    1a3a:	9f 93       	push	r25
    1a3c:	8f 93       	push	r24
    1a3e:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
			break;
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	2f c0       	rjmp	.+94     	; 0x1aae <open_PNEU+0xfe>
		
		case 'r':
			set_PNEUVALVES(RIGHTBM, RIGHTOPEN);
    1a50:	6e e6       	ldi	r22, 0x6E	; 110
    1a52:	88 e8       	ldi	r24, 0x88	; 136
    1a54:	0e 94 34 0c 	call	0x1868	; 0x1868 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "right");
    1a58:	89 e2       	ldi	r24, 0x29	; 41
    1a5a:	90 e8       	ldi	r25, 0x80	; 128
    1a5c:	9f 93       	push	r25
    1a5e:	8f 93       	push	r24
    1a60:	ce 01       	movw	r24, r28
    1a62:	01 96       	adiw	r24, 0x01	; 1
    1a64:	9f 93       	push	r25
    1a66:	8f 93       	push	r24
    1a68:	08 96       	adiw	r24, 0x08	; 8
    1a6a:	9f 93       	push	r25
    1a6c:	8f 93       	push	r24
    1a6e:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
			break;
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	17 c0       	rjmp	.+46     	; 0x1aae <open_PNEU+0xfe>

		case 's':
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
    1a80:	6e ec       	ldi	r22, 0xCE	; 206
    1a82:	82 e2       	ldi	r24, 0x22	; 34
    1a84:	0e 94 34 0c 	call	0x1868	; 0x1868 <set_PNEUVALVES>
			sprintf(outbuf, dformat_OPE, "shutter");
    1a88:	8f e2       	ldi	r24, 0x2F	; 47
    1a8a:	90 e8       	ldi	r25, 0x80	; 128
    1a8c:	9f 93       	push	r25
    1a8e:	8f 93       	push	r24
    1a90:	ce 01       	movw	r24, r28
    1a92:	01 96       	adiw	r24, 0x01	; 1
    1a94:	9f 93       	push	r25
    1a96:	8f 93       	push	r24
    1a98:	08 96       	adiw	r24, 0x08	; 8
    1a9a:	9f 93       	push	r25
    1a9c:	8f 93       	push	r24
    1a9e:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
			break;
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
		default:
			return(ERRORPROMPT);

	}

	clear_OLED(1);
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <clear_OLED>
	writestr_OLED(1, outbuf, 1);
    1ab4:	41 e0       	ldi	r20, 0x01	; 1
    1ab6:	be 01       	movw	r22, r28
    1ab8:	67 5f       	subi	r22, 0xF7	; 247
    1aba:	7f 4f       	sbci	r23, 0xFF	; 255
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	0e 94 03 0b 	call	0x1606	; 0x1606 <writestr_OLED>
	return(GREATERPROMPT);
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	01 c0       	rjmp	.+2      	; 0x1ac8 <open_PNEU+0x118>
			set_PNEUVALVES(SHUTTERBM, SHUTTEROPEN);
			sprintf(outbuf, dformat_OPE, "shutter");
			break;

		default:
			return(ERRORPROMPT);
    1ac6:	82 e0       	ldi	r24, 0x02	; 2

	clear_OLED(1);
	writestr_OLED(1, outbuf, 1);
	return(GREATERPROMPT);

}
    1ac8:	69 96       	adiw	r28, 0x19	; 25
    1aca:	cd bf       	out	0x3d, r28	; 61
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	08 95       	ret

00001ad4 <__vector_20>:

}
*/

ISR(PORTD_PORT_vect)
{
    1ad4:	1f 92       	push	r1
    1ad6:	0f 92       	push	r0
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	0f 92       	push	r0
    1adc:	11 24       	eor	r1, r1
    1ade:	2f 93       	push	r18
    1ae0:	3f 93       	push	r19
    1ae2:	4f 93       	push	r20
    1ae4:	5f 93       	push	r21
    1ae6:	6f 93       	push	r22
    1ae8:	7f 93       	push	r23
    1aea:	8f 93       	push	r24
    1aec:	9f 93       	push	r25
    1aee:	af 93       	push	r26
    1af0:	bf 93       	push	r27
    1af2:	ef 93       	push	r30
    1af4:	ff 93       	push	r31

	if (PORTD.INTFLAGS & PIN7_bm) {		// Curiosity Nano button
    1af6:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
    1afa:	88 23       	and	r24, r24
    1afc:	64 f4       	brge	.+24     	; 0x1b16 <__vector_20+0x42>
		PORTD.INTFLAGS = PIN7_bm;		// Clear the interrupt flag
    1afe:	80 e8       	ldi	r24, 0x80	; 128
    1b00:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <__TEXT_REGION_LENGTH__+0x7f4469>
		pneuState = read_MCP23008(PNEUSENSORS, INTCAP);
    1b04:	68 e0       	ldi	r22, 0x08	; 8
    1b06:	81 e2       	ldi	r24, 0x21	; 33
    1b08:	0e 94 e7 07 	call	0xfce	; 0xfce <read_MCP23008>
    1b0c:	80 93 11 2a 	sts	0x2A11, r24	; 0x802a11 <pneuState>
		toggle_BEEPER;
    1b10:	84 e0       	ldi	r24, 0x04	; 4
    1b12:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__TEXT_REGION_LENGTH__+0x7f4427>
	}

}
    1b16:	ff 91       	pop	r31
    1b18:	ef 91       	pop	r30
    1b1a:	bf 91       	pop	r27
    1b1c:	af 91       	pop	r26
    1b1e:	9f 91       	pop	r25
    1b20:	8f 91       	pop	r24
    1b22:	7f 91       	pop	r23
    1b24:	6f 91       	pop	r22
    1b26:	5f 91       	pop	r21
    1b28:	4f 91       	pop	r20
    1b2a:	3f 91       	pop	r19
    1b2c:	2f 91       	pop	r18
    1b2e:	0f 90       	pop	r0
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	0f 90       	pop	r0
    1b34:	1f 90       	pop	r1
    1b36:	18 95       	reti

00001b38 <init_PORTS>:
	sure nothing lurks in the background by accident.
------------------------------------------------------------------------------*/
void init_PORTS(void)
{

	PORTA.PIN0CTRL = PORT_PULLUPEN_bm;
    1b38:	e0 e0       	ldi	r30, 0x00	; 0
    1b3a:	f4 e0       	ldi	r31, 0x04	; 4
    1b3c:	88 e0       	ldi	r24, 0x08	; 8
    1b3e:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
    1b40:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN2CTRL = PORT_PULLUPEN_bm;
    1b42:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_PULLUPEN_bm;
    1b44:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
    1b46:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
    1b48:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_PULLUPEN_bm;
    1b4a:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
    1b4c:	87 8b       	std	Z+23, r24	; 0x17

	PORTB.PIN0CTRL = PORT_PULLUPEN_bm;
    1b4e:	e0 e2       	ldi	r30, 0x20	; 32
    1b50:	f4 e0       	ldi	r31, 0x04	; 4
    1b52:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_PULLUPEN_bm;
    1b54:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_PULLUPEN_bm;
    1b56:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_PULLUPEN_bm;
    1b58:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_PULLUPEN_bm;
    1b5a:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_PULLUPEN_bm;
    1b5c:	85 8b       	std	Z+21, r24	; 0x15

	PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
    1b5e:	e0 e4       	ldi	r30, 0x40	; 64
    1b60:	f4 e0       	ldi	r31, 0x04	; 4
    1b62:	80 8b       	std	Z+16, r24	; 0x10
	PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
    1b64:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.PIN2CTRL = PORT_PULLUPEN_bm;
    1b66:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
    1b68:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
    1b6a:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_PULLUPEN_bm;
    1b6c:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_PULLUPEN_bm;
    1b6e:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_PULLUPEN_bm;
    1b70:	87 8b       	std	Z+23, r24	; 0x17

	// ADC pins are on port D
	PORTD.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b72:	e0 e6       	ldi	r30, 0x60	; 96
    1b74:	f4 e0       	ldi	r31, 0x04	; 4
    1b76:	94 e0       	ldi	r25, 0x04	; 4
    1b78:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b7a:	91 8b       	std	Z+17, r25	; 0x11
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b7c:	92 8b       	std	Z+18, r25	; 0x12
	PORTD.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b7e:	93 8b       	std	Z+19, r25	; 0x13
	PORTD.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b80:	94 8b       	std	Z+20, r25	; 0x14
	PORTD.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b82:	95 8b       	std	Z+21, r25	; 0x15
	PORTD.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b84:	96 8b       	std	Z+22, r25	; 0x16
	PORTD.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1b86:	97 8b       	std	Z+23, r25	; 0x17

	PORTE.PIN0CTRL = PORT_PULLUPEN_bm;
    1b88:	e0 e8       	ldi	r30, 0x80	; 128
    1b8a:	f4 e0       	ldi	r31, 0x04	; 4
    1b8c:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;
    1b8e:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_PULLUPEN_bm;
    1b90:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_PULLUPEN_bm;
    1b92:	83 8b       	std	Z+19, r24	; 0x13

	PORTF.PIN0CTRL = PORT_PULLUPEN_bm;
    1b94:	e0 ea       	ldi	r30, 0xA0	; 160
    1b96:	f4 e0       	ldi	r31, 0x04	; 4
    1b98:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL = PORT_PULLUPEN_bm;
    1b9a:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL = PORT_PULLUPEN_bm;
    1b9c:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL = PORT_PULLUPEN_bm;
    1b9e:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL = PORT_PULLUPEN_bm;
    1ba0:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_PULLUPEN_bm;
    1ba2:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_PULLUPEN_bm;
    1ba4:	86 8b       	std	Z+22, r24	; 0x16
    1ba6:	08 95       	ret

00001ba8 <report>:
	Returns
		0 - GREATERPROMPT on success
		1 - ERRORPROMPT on error (invalid command noun)
------------------------------------------------------------------------------*/
uint8_t report(uint8_t cstack)
{
    1ba8:	2f 92       	push	r2
    1baa:	3f 92       	push	r3
    1bac:	4f 92       	push	r4
    1bae:	5f 92       	push	r5
    1bb0:	6f 92       	push	r6
    1bb2:	7f 92       	push	r7
    1bb4:	8f 92       	push	r8
    1bb6:	9f 92       	push	r9
    1bb8:	af 92       	push	r10
    1bba:	bf 92       	push	r11
    1bbc:	cf 92       	push	r12
    1bbe:	df 92       	push	r13
    1bc0:	ef 92       	push	r14
    1bc2:	ff 92       	push	r15
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	c8 5d       	subi	r28, 0xD8	; 216
    1bd2:	d2 40       	sbci	r29, 0x02	; 2
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	de bf       	out	0x3e, r29	; 62

	char outbuf[BUFSIZE+10], version[11];
	char currenttime[20], lastsettime[20], boottime[20];
	char shutter, left, right, air;
	const char format_ENV[] = "$S%dENV,%s,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%1.0f%%,%3.1fC,%s";
    1bd8:	92 e4       	ldi	r25, 0x42	; 66
    1bda:	e6 e9       	ldi	r30, 0x96	; 150
    1bdc:	f0 e8       	ldi	r31, 0x80	; 128
    1bde:	de 01       	movw	r26, r28
    1be0:	ab 5a       	subi	r26, 0xAB	; 171
    1be2:	be 4f       	sbci	r27, 0xFE	; 254
    1be4:	01 90       	ld	r0, Z+
    1be6:	0d 92       	st	X+, r0
    1be8:	9a 95       	dec	r25
    1bea:	e1 f7       	brne	.-8      	; 0x1be4 <report+0x3c>
	const char format_MTR[] = "$S%dMTR,%s,%c,%ld,microns,%ld,microns/sec,%d,mA,%s";
    1bec:	93 e3       	ldi	r25, 0x33	; 51
    1bee:	e8 ed       	ldi	r30, 0xD8	; 216
    1bf0:	f0 e8       	ldi	r31, 0x80	; 128
    1bf2:	de 01       	movw	r26, r28
    1bf4:	a9 56       	subi	r26, 0x69	; 105
    1bf6:	be 4f       	sbci	r27, 0xFE	; 254
    1bf8:	01 90       	ld	r0, Z+
    1bfa:	0d 92       	st	X+, r0
    1bfc:	9a 95       	dec	r25
    1bfe:	e1 f7       	brne	.-8      	; 0x1bf8 <report+0x50>
	const char format_ORI[] = "$S%dORI,%s,%3.1f,%3.1f,%3.1f,%s";
    1c00:	90 e2       	ldi	r25, 0x20	; 32
    1c02:	eb e0       	ldi	r30, 0x0B	; 11
    1c04:	f1 e8       	ldi	r31, 0x81	; 129
    1c06:	de 01       	movw	r26, r28
    1c08:	a6 53       	subi	r26, 0x36	; 54
    1c0a:	be 4f       	sbci	r27, 0xFE	; 254
    1c0c:	01 90       	ld	r0, Z+
    1c0e:	0d 92       	st	X+, r0
    1c10:	9a 95       	dec	r25
    1c12:	e1 f7       	brne	.-8      	; 0x1c0c <report+0x64>
	const char dformat_ORI[] = "%2.0f %2.0f %2.0f";
    1c14:	92 e1       	ldi	r25, 0x12	; 18
    1c16:	eb e2       	ldi	r30, 0x2B	; 43
    1c18:	f1 e8       	ldi	r31, 0x81	; 129
    1c1a:	de 01       	movw	r26, r28
    1c1c:	a6 51       	subi	r26, 0x16	; 22
    1c1e:	be 4f       	sbci	r27, 0xFE	; 254
    1c20:	01 90       	ld	r0, Z+
    1c22:	0d 92       	st	X+, r0
    1c24:	9a 95       	dec	r25
    1c26:	e1 f7       	brne	.-8      	; 0x1c20 <report+0x78>
	const char format_PNU[] = "$S%dPNU,%s,%c,shutter,%c,left,%c,right,%c,air,%s";
    1c28:	91 e3       	ldi	r25, 0x31	; 49
    1c2a:	ed e3       	ldi	r30, 0x3D	; 61
    1c2c:	f1 e8       	ldi	r31, 0x81	; 129
    1c2e:	de 01       	movw	r26, r28
    1c30:	a4 50       	subi	r26, 0x04	; 4
    1c32:	be 4f       	sbci	r27, 0xFE	; 254
    1c34:	01 90       	ld	r0, Z+
    1c36:	0d 92       	st	X+, r0
    1c38:	9a 95       	dec	r25
    1c3a:	e1 f7       	brne	.-8      	; 0x1c34 <report+0x8c>
	const char dformat_PN1[] = "left:%c   right:%c";
    1c3c:	93 e1       	ldi	r25, 0x13	; 19
    1c3e:	ee e6       	ldi	r30, 0x6E	; 110
    1c40:	f1 e8       	ldi	r31, 0x81	; 129
    1c42:	de 01       	movw	r26, r28
    1c44:	a3 5d       	subi	r26, 0xD3	; 211
    1c46:	bd 4f       	sbci	r27, 0xFD	; 253
    1c48:	01 90       	ld	r0, Z+
    1c4a:	0d 92       	st	X+, r0
    1c4c:	9a 95       	dec	r25
    1c4e:	e1 f7       	brne	.-8      	; 0x1c48 <report+0xa0>
	const char dformat_PN2[] = "shutter:%c  air:%c";
    1c50:	93 e1       	ldi	r25, 0x13	; 19
    1c52:	e1 e8       	ldi	r30, 0x81	; 129
    1c54:	f1 e8       	ldi	r31, 0x81	; 129
    1c56:	de 01       	movw	r26, r28
    1c58:	a0 5c       	subi	r26, 0xC0	; 192
    1c5a:	bd 4f       	sbci	r27, 0xFD	; 253
    1c5c:	01 90       	ld	r0, Z+
    1c5e:	0d 92       	st	X+, r0
    1c60:	9a 95       	dec	r25
    1c62:	e1 f7       	brne	.-8      	; 0x1c5c <report+0xb4>
	const char format_TIM[] = "$S%dTIM,%s,%s,set,%s,boot,%s";
    1c64:	9d e1       	ldi	r25, 0x1D	; 29
    1c66:	e4 e9       	ldi	r30, 0x94	; 148
    1c68:	f1 e8       	ldi	r31, 0x81	; 129
    1c6a:	de 01       	movw	r26, r28
    1c6c:	ad 5a       	subi	r26, 0xAD	; 173
    1c6e:	bd 4f       	sbci	r27, 0xFD	; 253
    1c70:	01 90       	ld	r0, Z+
    1c72:	0d 92       	st	X+, r0
    1c74:	9a 95       	dec	r25
    1c76:	e1 f7       	brne	.-8      	; 0x1c70 <report+0xc8>
	const char format_VAC[] = "$S%dVAC,%s,%5.2f,redvac,%5.2f,bluevac,%s";
    1c78:	99 e2       	ldi	r25, 0x29	; 41
    1c7a:	e1 eb       	ldi	r30, 0xB1	; 177
    1c7c:	f1 e8       	ldi	r31, 0x81	; 129
    1c7e:	de 01       	movw	r26, r28
    1c80:	a0 59       	subi	r26, 0x90	; 144
    1c82:	bd 4f       	sbci	r27, 0xFD	; 253
    1c84:	01 90       	ld	r0, Z+
    1c86:	0d 92       	st	X+, r0
    1c88:	9a 95       	dec	r25
    1c8a:	e1 f7       	brne	.-8      	; 0x1c84 <report+0xdc>
	const char dformat_VAC[] = "%2.2f  %2.2f";
    1c8c:	9d e0       	ldi	r25, 0x0D	; 13
    1c8e:	ea ed       	ldi	r30, 0xDA	; 218
    1c90:	f1 e8       	ldi	r31, 0x81	; 129
    1c92:	de 01       	movw	r26, r28
    1c94:	a7 56       	subi	r26, 0x67	; 103
    1c96:	bd 4f       	sbci	r27, 0xFD	; 253
    1c98:	01 90       	ld	r0, Z+
    1c9a:	0d 92       	st	X+, r0
    1c9c:	9a 95       	dec	r25
    1c9e:	e1 f7       	brne	.-8      	; 0x1c98 <report+0xf0>
	const char format_VER[] = "$S%dVER,%s,%s,%s";
    1ca0:	91 e1       	ldi	r25, 0x11	; 17
    1ca2:	e7 ee       	ldi	r30, 0xE7	; 231
    1ca4:	f1 e8       	ldi	r31, 0x81	; 129
    1ca6:	de 01       	movw	r26, r28
    1ca8:	aa 55       	subi	r26, 0x5A	; 90
    1caa:	bd 4f       	sbci	r27, 0xFD	; 253
    1cac:	01 90       	ld	r0, Z+
    1cae:	0d 92       	st	X+, r0
    1cb0:	9a 95       	dec	r25
    1cb2:	e1 f7       	brne	.-8      	; 0x1cac <report+0x104>
	float voltage;							// voltage
	uint16_t current;
	float x, y, z;							// accelerometer
	float redvac, bluvac;					// red and blue vacuum

	switch(pcmd[cstack].cobject) {
    1cb4:	08 2f       	mov	r16, r24
    1cb6:	10 e0       	ldi	r17, 0x00	; 0
    1cb8:	84 e3       	ldi	r24, 0x34	; 52
    1cba:	80 9f       	mul	r24, r16
    1cbc:	f0 01       	movw	r30, r0
    1cbe:	81 9f       	mul	r24, r17
    1cc0:	f0 0d       	add	r31, r0
    1cc2:	11 24       	eor	r1, r1
    1cc4:	eb 5f       	subi	r30, 0xFB	; 251
    1cc6:	f7 4d       	sbci	r31, 0xD7	; 215
    1cc8:	e1 81       	ldd	r30, Z+1	; 0x01
    1cca:	8e 2f       	mov	r24, r30
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	fc 01       	movw	r30, r24
    1cd0:	e2 54       	subi	r30, 0x42	; 66
    1cd2:	f1 09       	sbc	r31, r1
    1cd4:	e5 33       	cpi	r30, 0x35	; 53
    1cd6:	f1 05       	cpc	r31, r1
    1cd8:	20 f4       	brcc	.+8      	; 0x1ce2 <report+0x13a>
    1cda:	ed 58       	subi	r30, 0x8D	; 141
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	0c 94 85 1d 	jmp	0x3b0a	; 0x3b0a <__tablejump2__>
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;

		default:
			return(ERRORPROMPT);
    1ce2:	82 e0       	ldi	r24, 0x02	; 2
    1ce4:	8f c4       	rjmp	.+2334   	; 0x2604 <report+0xa5c>
			break;
*/
		case 'a':
		case 'b':
		case 'c':
			get_time(currenttime);
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	8b 5e       	subi	r24, 0xEB	; 235
    1cea:	9e 4f       	sbci	r25, 0xFE	; 254
    1cec:	0e 94 79 05 	call	0xaf2	; 0xaf2 <get_time>
			controller = pcmd[cstack].cobject + 31;
    1cf0:	84 e3       	ldi	r24, 0x34	; 52
    1cf2:	80 9f       	mul	r24, r16
    1cf4:	70 01       	movw	r14, r0
    1cf6:	81 9f       	mul	r24, r17
    1cf8:	f0 0c       	add	r15, r0
    1cfa:	11 24       	eor	r1, r1
    1cfc:	87 01       	movw	r16, r14
    1cfe:	0b 5f       	subi	r16, 0xFB	; 251
    1d00:	17 4d       	sbci	r17, 0xD7	; 215
    1d02:	f8 01       	movw	r30, r16
    1d04:	81 81       	ldd	r24, Z+1	; 0x01
    1d06:	0f 2e       	mov	r0, r31
    1d08:	ff e1       	ldi	r31, 0x1F	; 31
    1d0a:	df 2e       	mov	r13, r31
    1d0c:	f0 2d       	mov	r31, r0
    1d0e:	d8 0e       	add	r13, r24
			status = get_ROBOEncoder(controller, ROBOREADENCODERCOUNT, &encoderValue);
    1d10:	ae 01       	movw	r20, r28
    1d12:	49 54       	subi	r20, 0x49	; 73
    1d14:	5d 4f       	sbci	r21, 0xFD	; 253
    1d16:	60 e1       	ldi	r22, 0x10	; 16
    1d18:	8d 2d       	mov	r24, r13
    1d1a:	0e 94 3e 13 	call	0x267c	; 0x267c <get_ROBOEncoder>
			status = get_ROBOEncoder(controller, ROBOREADENCODERSPEED, &encoderSpeed);
    1d1e:	ae 01       	movw	r20, r28
    1d20:	45 54       	subi	r20, 0x45	; 69
    1d22:	5d 4f       	sbci	r21, 0xFD	; 253
    1d24:	62 e1       	ldi	r22, 0x12	; 18
    1d26:	8d 2d       	mov	r24, r13
    1d28:	0e 94 3e 13 	call	0x267c	; 0x267c <get_ROBOEncoder>
			icurrents = get_ROBOInt32(controller, ROBOREADCURRENT);
    1d2c:	61 e3       	ldi	r22, 0x31	; 49
    1d2e:	8d 2d       	mov	r24, r13
    1d30:	0e 94 d7 13 	call	0x27ae	; 0x27ae <get_ROBOInt32>
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
    1d34:	aa 27       	eor	r26, r26
    1d36:	bb 27       	eor	r27, r27
    1d38:	9c 01       	movw	r18, r24
    1d3a:	22 0f       	add	r18, r18
    1d3c:	33 1f       	adc	r19, r19
    1d3e:	bc 01       	movw	r22, r24
    1d40:	66 0f       	add	r22, r22
    1d42:	77 1f       	adc	r23, r23
    1d44:	66 0f       	add	r22, r22
    1d46:	77 1f       	adc	r23, r23
    1d48:	66 0f       	add	r22, r22
    1d4a:	77 1f       	adc	r23, r23
    1d4c:	62 0f       	add	r22, r18
    1d4e:	73 1f       	adc	r23, r19
			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
				encoderValue, encoderSpeed, current, pcmd[cstack].cid);
    1d50:	c7 01       	movw	r24, r14
    1d52:	80 5d       	subi	r24, 0xD0	; 208
    1d54:	97 4d       	sbci	r25, 0xD7	; 215
			controller = pcmd[cstack].cobject + 31;
			status = get_ROBOEncoder(controller, ROBOREADENCODERCOUNT, &encoderValue);
			status = get_ROBOEncoder(controller, ROBOREADENCODERSPEED, &encoderSpeed);
			icurrents = get_ROBOInt32(controller, ROBOREADCURRENT);
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
    1d56:	c5 54       	subi	r28, 0x45	; 69
    1d58:	dd 4f       	sbci	r29, 0xFD	; 253
    1d5a:	e8 80       	ld	r14, Y
    1d5c:	cb 5b       	subi	r28, 0xBB	; 187
    1d5e:	d2 40       	sbci	r29, 0x02	; 2
    1d60:	c4 54       	subi	r28, 0x44	; 68
    1d62:	dd 4f       	sbci	r29, 0xFD	; 253
    1d64:	a8 81       	ld	r26, Y
    1d66:	cc 5b       	subi	r28, 0xBC	; 188
    1d68:	d2 40       	sbci	r29, 0x02	; 2
    1d6a:	c3 54       	subi	r28, 0x43	; 67
    1d6c:	dd 4f       	sbci	r29, 0xFD	; 253
    1d6e:	b8 81       	ld	r27, Y
    1d70:	cd 5b       	subi	r28, 0xBD	; 189
    1d72:	d2 40       	sbci	r29, 0x02	; 2
    1d74:	c2 54       	subi	r28, 0x42	; 66
    1d76:	dd 4f       	sbci	r29, 0xFD	; 253
    1d78:	f8 80       	ld	r15, Y
    1d7a:	ce 5b       	subi	r28, 0xBE	; 190
    1d7c:	d2 40       	sbci	r29, 0x02	; 2
    1d7e:	c9 54       	subi	r28, 0x49	; 73
    1d80:	dd 4f       	sbci	r29, 0xFD	; 253
    1d82:	38 81       	ld	r19, Y
    1d84:	c7 5b       	subi	r28, 0xB7	; 183
    1d86:	d2 40       	sbci	r29, 0x02	; 2
    1d88:	c8 54       	subi	r28, 0x48	; 72
    1d8a:	dd 4f       	sbci	r29, 0xFD	; 253
    1d8c:	48 81       	ld	r20, Y
    1d8e:	c8 5b       	subi	r28, 0xB8	; 184
    1d90:	d2 40       	sbci	r29, 0x02	; 2
    1d92:	c7 54       	subi	r28, 0x47	; 71
    1d94:	dd 4f       	sbci	r29, 0xFD	; 253
    1d96:	58 81       	ld	r21, Y
    1d98:	c9 5b       	subi	r28, 0xB9	; 185
    1d9a:	d2 40       	sbci	r29, 0x02	; 2
    1d9c:	c6 54       	subi	r28, 0x46	; 70
    1d9e:	dd 4f       	sbci	r29, 0xFD	; 253
    1da0:	d8 80       	ld	r13, Y
    1da2:	ca 5b       	subi	r28, 0xBA	; 186
    1da4:	d2 40       	sbci	r29, 0x02	; 2
    1da6:	f8 01       	movw	r30, r16
    1da8:	21 81       	ldd	r18, Z+1	; 0x01
    1daa:	10 91 a8 04 	lds	r17, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1dae:	12 ff       	sbrs	r17, 2
    1db0:	03 c0       	rjmp	.+6      	; 0x1db8 <report+0x210>
    1db2:	12 e0       	ldi	r17, 0x02	; 2
    1db4:	00 e0       	ldi	r16, 0x00	; 0
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <report+0x214>
    1db8:	11 e0       	ldi	r17, 0x01	; 1
    1dba:	00 e0       	ldi	r16, 0x00	; 0
    1dbc:	9f 93       	push	r25
    1dbe:	8f 93       	push	r24
    1dc0:	7f 93       	push	r23
    1dc2:	6f 93       	push	r22
    1dc4:	ff 92       	push	r15
    1dc6:	bf 93       	push	r27
    1dc8:	af 93       	push	r26
    1dca:	ef 92       	push	r14
    1dcc:	df 92       	push	r13
    1dce:	5f 93       	push	r21
    1dd0:	4f 93       	push	r20
    1dd2:	3f 93       	push	r19
    1dd4:	1f 92       	push	r1
    1dd6:	2f 93       	push	r18
    1dd8:	ce 01       	movw	r24, r28
    1dda:	8b 5e       	subi	r24, 0xEB	; 235
    1ddc:	9e 4f       	sbci	r25, 0xFE	; 254
    1dde:	9f 93       	push	r25
    1de0:	8f 93       	push	r24
    1de2:	0f 93       	push	r16
    1de4:	1f 93       	push	r17
    1de6:	8e 57       	subi	r24, 0x7E	; 126
    1de8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dea:	9f 93       	push	r25
    1dec:	8f 93       	push	r24
    1dee:	8e 01       	movw	r16, r28
    1df0:	0f 5f       	subi	r16, 0xFF	; 255
    1df2:	1f 4f       	sbci	r17, 0xFF	; 255
    1df4:	1f 93       	push	r17
    1df6:	0f 93       	push	r16
    1df8:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
				encoderValue, encoderSpeed, current, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    1dfc:	c8 01       	movw	r24, r16
    1dfe:	0e 94 9f 09 	call	0x133e	; 0x133e <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    1e02:	f8 01       	movw	r30, r16
    1e04:	01 90       	ld	r0, Z+
    1e06:	00 20       	and	r0, r0
    1e08:	e9 f7       	brne	.-6      	; 0x1e04 <report+0x25c>
    1e0a:	31 97       	sbiw	r30, 0x01	; 1
    1e0c:	af 01       	movw	r20, r30
    1e0e:	40 1b       	sub	r20, r16
    1e10:	51 0b       	sbc	r21, r17
    1e12:	b8 01       	movw	r22, r16
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	0e 94 11 16 	call	0x2c22	; 0x2c22 <send_USART>
			break;
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
			current = (uint16_t) ((icurrents >> 16) * 10);	// convert to mA
			sprintf(outbuf, format_MTR, get_SPECID, currenttime, pcmd[cstack].cobject,
				encoderValue, encoderSpeed, current, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			break;
    1e20:	f1 c3       	rjmp	.+2018   	; 0x2604 <report+0xa5c>
			writestr_OLED(1, "Boot time", 1);
			writestr_OLED(1, &boottime[5], 2);
			break;
*/
		case 'e':					// Environment (temperature & humidity)
			t0 = get_temperature(0);
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	0e 94 29 15 	call	0x2a52	; 0x2a52 <get_temperature>
    1e28:	f6 2e       	mov	r15, r22
    1e2a:	e7 2e       	mov	r14, r23
    1e2c:	d8 2e       	mov	r13, r24
    1e2e:	c9 2e       	mov	r12, r25
			h0 = get_humidity(0);
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	0e 94 b3 06 	call	0xd66	; 0xd66 <get_humidity>
    1e36:	b6 2e       	mov	r11, r22
    1e38:	a7 2e       	mov	r10, r23
    1e3a:	98 2e       	mov	r9, r24
    1e3c:	89 2e       	mov	r8, r25
			t1 = get_temperature(1);
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	0e 94 29 15 	call	0x2a52	; 0x2a52 <get_temperature>
    1e44:	c5 53       	subi	r28, 0x35	; 53
    1e46:	dd 4f       	sbci	r29, 0xFD	; 253
    1e48:	68 83       	st	Y, r22
    1e4a:	cb 5c       	subi	r28, 0xCB	; 203
    1e4c:	d2 40       	sbci	r29, 0x02	; 2
    1e4e:	c4 53       	subi	r28, 0x34	; 52
    1e50:	dd 4f       	sbci	r29, 0xFD	; 253
    1e52:	78 83       	st	Y, r23
    1e54:	cc 5c       	subi	r28, 0xCC	; 204
    1e56:	d2 40       	sbci	r29, 0x02	; 2
    1e58:	c3 53       	subi	r28, 0x33	; 51
    1e5a:	dd 4f       	sbci	r29, 0xFD	; 253
    1e5c:	88 83       	st	Y, r24
    1e5e:	cd 5c       	subi	r28, 0xCD	; 205
    1e60:	d2 40       	sbci	r29, 0x02	; 2
    1e62:	c2 53       	subi	r28, 0x32	; 50
    1e64:	dd 4f       	sbci	r29, 0xFD	; 253
    1e66:	98 83       	st	Y, r25
    1e68:	ce 5c       	subi	r28, 0xCE	; 206
    1e6a:	d2 40       	sbci	r29, 0x02	; 2
			h1 = get_humidity(1);
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	0e 94 b3 06 	call	0xd66	; 0xd66 <get_humidity>
    1e72:	c1 53       	subi	r28, 0x31	; 49
    1e74:	dd 4f       	sbci	r29, 0xFD	; 253
    1e76:	68 83       	st	Y, r22
    1e78:	cf 5c       	subi	r28, 0xCF	; 207
    1e7a:	d2 40       	sbci	r29, 0x02	; 2
    1e7c:	c0 53       	subi	r28, 0x30	; 48
    1e7e:	dd 4f       	sbci	r29, 0xFD	; 253
    1e80:	78 83       	st	Y, r23
    1e82:	c0 5d       	subi	r28, 0xD0	; 208
    1e84:	d2 40       	sbci	r29, 0x02	; 2
    1e86:	cf 52       	subi	r28, 0x2F	; 47
    1e88:	dd 4f       	sbci	r29, 0xFD	; 253
    1e8a:	88 83       	st	Y, r24
    1e8c:	c1 5d       	subi	r28, 0xD1	; 209
    1e8e:	d2 40       	sbci	r29, 0x02	; 2
    1e90:	ce 52       	subi	r28, 0x2E	; 46
    1e92:	dd 4f       	sbci	r29, 0xFD	; 253
    1e94:	98 83       	st	Y, r25
    1e96:	c2 5d       	subi	r28, 0xD2	; 210
    1e98:	d2 40       	sbci	r29, 0x02	; 2
			t2 = get_temperature(2);
    1e9a:	82 e0       	ldi	r24, 0x02	; 2
    1e9c:	0e 94 29 15 	call	0x2a52	; 0x2a52 <get_temperature>
    1ea0:	cd 52       	subi	r28, 0x2D	; 45
    1ea2:	dd 4f       	sbci	r29, 0xFD	; 253
    1ea4:	68 83       	st	Y, r22
    1ea6:	c3 5d       	subi	r28, 0xD3	; 211
    1ea8:	d2 40       	sbci	r29, 0x02	; 2
    1eaa:	cc 52       	subi	r28, 0x2C	; 44
    1eac:	dd 4f       	sbci	r29, 0xFD	; 253
    1eae:	78 83       	st	Y, r23
    1eb0:	c4 5d       	subi	r28, 0xD4	; 212
    1eb2:	d2 40       	sbci	r29, 0x02	; 2
    1eb4:	cb 52       	subi	r28, 0x2B	; 43
    1eb6:	dd 4f       	sbci	r29, 0xFD	; 253
    1eb8:	88 83       	st	Y, r24
    1eba:	c5 5d       	subi	r28, 0xD5	; 213
    1ebc:	d2 40       	sbci	r29, 0x02	; 2
    1ebe:	ca 52       	subi	r28, 0x2A	; 42
    1ec0:	dd 4f       	sbci	r29, 0xFD	; 253
    1ec2:	98 83       	st	Y, r25
    1ec4:	c6 5d       	subi	r28, 0xD6	; 214
    1ec6:	d2 40       	sbci	r29, 0x02	; 2
			h2 = get_humidity(2);
    1ec8:	82 e0       	ldi	r24, 0x02	; 2
    1eca:	0e 94 b3 06 	call	0xd66	; 0xd66 <get_humidity>
    1ece:	76 2e       	mov	r7, r22
    1ed0:	67 2e       	mov	r6, r23
    1ed2:	58 2e       	mov	r5, r24
    1ed4:	49 2e       	mov	r4, r25
			t3 = get_temperature(3);
    1ed6:	83 e0       	ldi	r24, 0x03	; 3
    1ed8:	0e 94 29 15 	call	0x2a52	; 0x2a52 <get_temperature>
    1edc:	c9 52       	subi	r28, 0x29	; 41
    1ede:	dd 4f       	sbci	r29, 0xFD	; 253
    1ee0:	68 83       	st	Y, r22
    1ee2:	c7 5d       	subi	r28, 0xD7	; 215
    1ee4:	d2 40       	sbci	r29, 0x02	; 2
    1ee6:	c8 52       	subi	r28, 0x28	; 40
    1ee8:	dd 4f       	sbci	r29, 0xFD	; 253
    1eea:	78 83       	st	Y, r23
    1eec:	c8 5d       	subi	r28, 0xD8	; 216
    1eee:	d2 40       	sbci	r29, 0x02	; 2
    1ef0:	38 2e       	mov	r3, r24
    1ef2:	29 2e       	mov	r2, r25
			get_time(currenttime);
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	8b 5e       	subi	r24, 0xEB	; 235
    1ef8:	9e 4f       	sbci	r25, 0xFE	; 254
    1efa:	0e 94 79 05 	call	0xaf2	; 0xaf2 <get_time>
			sprintf(outbuf, format_ENV, get_SPECID, currenttime, t0, h0, t1, h1, t2, h2, t3, pcmd[cstack].cid);
    1efe:	24 e3       	ldi	r18, 0x34	; 52
    1f00:	20 9f       	mul	r18, r16
    1f02:	c0 01       	movw	r24, r0
    1f04:	21 9f       	mul	r18, r17
    1f06:	90 0d       	add	r25, r0
    1f08:	11 24       	eor	r1, r1
    1f0a:	80 5d       	subi	r24, 0xD0	; 208
    1f0c:	97 4d       	sbci	r25, 0xD7	; 215
    1f0e:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    1f12:	22 ff       	sbrs	r18, 2
    1f14:	03 c0       	rjmp	.+6      	; 0x1f1c <report+0x374>
    1f16:	22 e0       	ldi	r18, 0x02	; 2
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <report+0x378>
    1f1c:	21 e0       	ldi	r18, 0x01	; 1
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	9f 93       	push	r25
    1f22:	8f 93       	push	r24
    1f24:	2f 92       	push	r2
    1f26:	3f 92       	push	r3
    1f28:	c8 52       	subi	r28, 0x28	; 40
    1f2a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f2c:	98 81       	ld	r25, Y
    1f2e:	c8 5d       	subi	r28, 0xD8	; 216
    1f30:	d2 40       	sbci	r29, 0x02	; 2
    1f32:	9f 93       	push	r25
    1f34:	c9 52       	subi	r28, 0x29	; 41
    1f36:	dd 4f       	sbci	r29, 0xFD	; 253
    1f38:	e8 81       	ld	r30, Y
    1f3a:	c7 5d       	subi	r28, 0xD7	; 215
    1f3c:	d2 40       	sbci	r29, 0x02	; 2
    1f3e:	ef 93       	push	r30
    1f40:	4f 92       	push	r4
    1f42:	5f 92       	push	r5
    1f44:	6f 92       	push	r6
    1f46:	7f 92       	push	r7
    1f48:	ca 52       	subi	r28, 0x2A	; 42
    1f4a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f4c:	f8 81       	ld	r31, Y
    1f4e:	c6 5d       	subi	r28, 0xD6	; 214
    1f50:	d2 40       	sbci	r29, 0x02	; 2
    1f52:	ff 93       	push	r31
    1f54:	cb 52       	subi	r28, 0x2B	; 43
    1f56:	dd 4f       	sbci	r29, 0xFD	; 253
    1f58:	88 81       	ld	r24, Y
    1f5a:	c5 5d       	subi	r28, 0xD5	; 213
    1f5c:	d2 40       	sbci	r29, 0x02	; 2
    1f5e:	8f 93       	push	r24
    1f60:	cc 52       	subi	r28, 0x2C	; 44
    1f62:	dd 4f       	sbci	r29, 0xFD	; 253
    1f64:	98 81       	ld	r25, Y
    1f66:	c4 5d       	subi	r28, 0xD4	; 212
    1f68:	d2 40       	sbci	r29, 0x02	; 2
    1f6a:	9f 93       	push	r25
    1f6c:	cd 52       	subi	r28, 0x2D	; 45
    1f6e:	dd 4f       	sbci	r29, 0xFD	; 253
    1f70:	e8 81       	ld	r30, Y
    1f72:	c3 5d       	subi	r28, 0xD3	; 211
    1f74:	d2 40       	sbci	r29, 0x02	; 2
    1f76:	ef 93       	push	r30
    1f78:	ce 52       	subi	r28, 0x2E	; 46
    1f7a:	dd 4f       	sbci	r29, 0xFD	; 253
    1f7c:	f8 81       	ld	r31, Y
    1f7e:	c2 5d       	subi	r28, 0xD2	; 210
    1f80:	d2 40       	sbci	r29, 0x02	; 2
    1f82:	ff 93       	push	r31
    1f84:	cf 52       	subi	r28, 0x2F	; 47
    1f86:	dd 4f       	sbci	r29, 0xFD	; 253
    1f88:	88 81       	ld	r24, Y
    1f8a:	c1 5d       	subi	r28, 0xD1	; 209
    1f8c:	d2 40       	sbci	r29, 0x02	; 2
    1f8e:	8f 93       	push	r24
    1f90:	c0 53       	subi	r28, 0x30	; 48
    1f92:	dd 4f       	sbci	r29, 0xFD	; 253
    1f94:	98 81       	ld	r25, Y
    1f96:	c0 5d       	subi	r28, 0xD0	; 208
    1f98:	d2 40       	sbci	r29, 0x02	; 2
    1f9a:	9f 93       	push	r25
    1f9c:	c1 53       	subi	r28, 0x31	; 49
    1f9e:	dd 4f       	sbci	r29, 0xFD	; 253
    1fa0:	e8 81       	ld	r30, Y
    1fa2:	cf 5c       	subi	r28, 0xCF	; 207
    1fa4:	d2 40       	sbci	r29, 0x02	; 2
    1fa6:	ef 93       	push	r30
    1fa8:	c2 53       	subi	r28, 0x32	; 50
    1faa:	dd 4f       	sbci	r29, 0xFD	; 253
    1fac:	f8 81       	ld	r31, Y
    1fae:	ce 5c       	subi	r28, 0xCE	; 206
    1fb0:	d2 40       	sbci	r29, 0x02	; 2
    1fb2:	ff 93       	push	r31
    1fb4:	c3 53       	subi	r28, 0x33	; 51
    1fb6:	dd 4f       	sbci	r29, 0xFD	; 253
    1fb8:	88 81       	ld	r24, Y
    1fba:	cd 5c       	subi	r28, 0xCD	; 205
    1fbc:	d2 40       	sbci	r29, 0x02	; 2
    1fbe:	8f 93       	push	r24
    1fc0:	c4 53       	subi	r28, 0x34	; 52
    1fc2:	dd 4f       	sbci	r29, 0xFD	; 253
    1fc4:	98 81       	ld	r25, Y
    1fc6:	cc 5c       	subi	r28, 0xCC	; 204
    1fc8:	d2 40       	sbci	r29, 0x02	; 2
    1fca:	9f 93       	push	r25
    1fcc:	c5 53       	subi	r28, 0x35	; 53
    1fce:	dd 4f       	sbci	r29, 0xFD	; 253
    1fd0:	e8 81       	ld	r30, Y
    1fd2:	cb 5c       	subi	r28, 0xCB	; 203
    1fd4:	d2 40       	sbci	r29, 0x02	; 2
    1fd6:	ef 93       	push	r30
    1fd8:	8f 92       	push	r8
    1fda:	9f 92       	push	r9
    1fdc:	af 92       	push	r10
    1fde:	bf 92       	push	r11
    1fe0:	cf 92       	push	r12
    1fe2:	df 92       	push	r13
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	ce 01       	movw	r24, r28
    1fea:	8b 5e       	subi	r24, 0xEB	; 235
    1fec:	9e 4f       	sbci	r25, 0xFE	; 254
    1fee:	9f 93       	push	r25
    1ff0:	8f 93       	push	r24
    1ff2:	3f 93       	push	r19
    1ff4:	2f 93       	push	r18
    1ff6:	80 5c       	subi	r24, 0xC0	; 192
    1ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffa:	9f 93       	push	r25
    1ffc:	8f 93       	push	r24
    1ffe:	8e 01       	movw	r16, r28
    2000:	0f 5f       	subi	r16, 0xFF	; 255
    2002:	1f 4f       	sbci	r17, 0xFF	; 255
    2004:	1f 93       	push	r17
    2006:	0f 93       	push	r16
    2008:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
			checksum_NMEA(outbuf);
    200c:	cd bf       	out	0x3d, r28	; 61
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	c8 01       	movw	r24, r16
    2012:	0e 94 9f 09 	call	0x133e	; 0x133e <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2016:	f8 01       	movw	r30, r16
    2018:	01 90       	ld	r0, Z+
    201a:	00 20       	and	r0, r0
    201c:	e9 f7       	brne	.-6      	; 0x2018 <report+0x470>
    201e:	31 97       	sbiw	r30, 0x01	; 1
    2020:	af 01       	movw	r20, r30
    2022:	40 1b       	sub	r20, r16
    2024:	51 0b       	sbc	r21, r17
    2026:	b8 01       	movw	r22, r16
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	0e 94 11 16 	call	0x2c22	; 0x2c22 <send_USART>
			writestr_OLED(1, "Temp & Humidity", 1);
    202e:	41 e0       	ldi	r20, 0x01	; 1
    2030:	68 e4       	ldi	r22, 0x48	; 72
    2032:	70 e8       	ldi	r23, 0x80	; 128
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	0e 94 03 0b 	call	0x1606	; 0x1606 <writestr_OLED>
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
    203a:	26 e6       	ldi	r18, 0x66	; 102
    203c:	36 e6       	ldi	r19, 0x66	; 102
    203e:	46 ee       	ldi	r20, 0xE6	; 230
    2040:	5f e3       	ldi	r21, 0x3F	; 63
    2042:	6f 2d       	mov	r22, r15
    2044:	7e 2d       	mov	r23, r14
    2046:	8d 2d       	mov	r24, r13
    2048:	9c 2d       	mov	r25, r12
    204a:	0e 94 87 19 	call	0x330e	; 0x330e <__mulsf3>
    204e:	8f 92       	push	r8
    2050:	9f 92       	push	r9
    2052:	af 92       	push	r10
    2054:	bf 92       	push	r11
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	52 e4       	ldi	r21, 0x42	; 66
    205e:	0e 94 ed 17 	call	0x2fda	; 0x2fda <__addsf3>
    2062:	9f 93       	push	r25
    2064:	8f 93       	push	r24
    2066:	7f 93       	push	r23
    2068:	6f 93       	push	r22
    206a:	cf 92       	push	r12
    206c:	df 92       	push	r13
    206e:	ef 92       	push	r14
    2070:	ff 92       	push	r15
    2072:	88 e5       	ldi	r24, 0x58	; 88
    2074:	90 e8       	ldi	r25, 0x80	; 128
    2076:	9f 93       	push	r25
    2078:	8f 93       	push	r24
    207a:	1f 93       	push	r17
    207c:	0f 93       	push	r16
    207e:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2082:	42 e0       	ldi	r20, 0x02	; 2
    2084:	b8 01       	movw	r22, r16
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	0e 94 03 0b 	call	0x1606	; 0x1606 <writestr_OLED>
			break;
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2090:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Temp & Humidity", 1);
			sprintf(outbuf, "%1.1fC %1.0fF %1.0f%%", t0, ((t0*1.8)+32), h0);
			writestr_OLED(1, outbuf, 2);
			break;
    2092:	b8 c2       	rjmp	.+1392   	; 0x2604 <report+0xa5c>

		case 'o':					// Orientation
			get_orientation(&x, &y, &z);
    2094:	ae 01       	movw	r20, r28
    2096:	49 53       	subi	r20, 0x39	; 57
    2098:	5d 4f       	sbci	r21, 0xFD	; 253
    209a:	be 01       	movw	r22, r28
    209c:	6d 53       	subi	r22, 0x3D	; 61
    209e:	7d 4f       	sbci	r23, 0xFD	; 253
    20a0:	ce 01       	movw	r24, r28
    20a2:	81 54       	subi	r24, 0x41	; 65
    20a4:	9d 4f       	sbci	r25, 0xFD	; 253
    20a6:	0e 94 ab 08 	call	0x1156	; 0x1156 <get_orientation>
			get_time(currenttime);
    20aa:	ce 01       	movw	r24, r28
    20ac:	8b 5e       	subi	r24, 0xEB	; 235
    20ae:	9e 4f       	sbci	r25, 0xFE	; 254
    20b0:	0e 94 79 05 	call	0xaf2	; 0xaf2 <get_time>
			sprintf(outbuf, format_ORI, get_SPECID, currenttime, x, y, z, pcmd[cstack].cid);
    20b4:	24 e3       	ldi	r18, 0x34	; 52
    20b6:	20 9f       	mul	r18, r16
    20b8:	c0 01       	movw	r24, r0
    20ba:	21 9f       	mul	r18, r17
    20bc:	90 0d       	add	r25, r0
    20be:	11 24       	eor	r1, r1
    20c0:	80 5d       	subi	r24, 0xD0	; 208
    20c2:	97 4d       	sbci	r25, 0xD7	; 215
    20c4:	c9 53       	subi	r28, 0x39	; 57
    20c6:	dd 4f       	sbci	r29, 0xFD	; 253
    20c8:	a8 81       	ld	r26, Y
    20ca:	c7 5c       	subi	r28, 0xC7	; 199
    20cc:	d2 40       	sbci	r29, 0x02	; 2
    20ce:	c8 53       	subi	r28, 0x38	; 56
    20d0:	dd 4f       	sbci	r29, 0xFD	; 253
    20d2:	b8 81       	ld	r27, Y
    20d4:	c8 5c       	subi	r28, 0xC8	; 200
    20d6:	d2 40       	sbci	r29, 0x02	; 2
    20d8:	c7 53       	subi	r28, 0x37	; 55
    20da:	dd 4f       	sbci	r29, 0xFD	; 253
    20dc:	18 81       	ld	r17, Y
    20de:	c9 5c       	subi	r28, 0xC9	; 201
    20e0:	d2 40       	sbci	r29, 0x02	; 2
    20e2:	c6 53       	subi	r28, 0x36	; 54
    20e4:	dd 4f       	sbci	r29, 0xFD	; 253
    20e6:	08 81       	ld	r16, Y
    20e8:	ca 5c       	subi	r28, 0xCA	; 202
    20ea:	d2 40       	sbci	r29, 0x02	; 2
    20ec:	cd 53       	subi	r28, 0x3D	; 61
    20ee:	dd 4f       	sbci	r29, 0xFD	; 253
    20f0:	68 81       	ld	r22, Y
    20f2:	c3 5c       	subi	r28, 0xC3	; 195
    20f4:	d2 40       	sbci	r29, 0x02	; 2
    20f6:	cc 53       	subi	r28, 0x3C	; 60
    20f8:	dd 4f       	sbci	r29, 0xFD	; 253
    20fa:	78 81       	ld	r23, Y
    20fc:	c4 5c       	subi	r28, 0xC4	; 196
    20fe:	d2 40       	sbci	r29, 0x02	; 2
    2100:	cb 53       	subi	r28, 0x3B	; 59
    2102:	dd 4f       	sbci	r29, 0xFD	; 253
    2104:	e8 81       	ld	r30, Y
    2106:	c5 5c       	subi	r28, 0xC5	; 197
    2108:	d2 40       	sbci	r29, 0x02	; 2
    210a:	ca 53       	subi	r28, 0x3A	; 58
    210c:	dd 4f       	sbci	r29, 0xFD	; 253
    210e:	f8 81       	ld	r31, Y
    2110:	c6 5c       	subi	r28, 0xC6	; 198
    2112:	d2 40       	sbci	r29, 0x02	; 2
    2114:	c1 54       	subi	r28, 0x41	; 65
    2116:	dd 4f       	sbci	r29, 0xFD	; 253
    2118:	28 81       	ld	r18, Y
    211a:	cf 5b       	subi	r28, 0xBF	; 191
    211c:	d2 40       	sbci	r29, 0x02	; 2
    211e:	c0 54       	subi	r28, 0x40	; 64
    2120:	dd 4f       	sbci	r29, 0xFD	; 253
    2122:	38 81       	ld	r19, Y
    2124:	c0 5c       	subi	r28, 0xC0	; 192
    2126:	d2 40       	sbci	r29, 0x02	; 2
    2128:	cf 53       	subi	r28, 0x3F	; 63
    212a:	dd 4f       	sbci	r29, 0xFD	; 253
    212c:	48 81       	ld	r20, Y
    212e:	c1 5c       	subi	r28, 0xC1	; 193
    2130:	d2 40       	sbci	r29, 0x02	; 2
    2132:	ce 53       	subi	r28, 0x3E	; 62
    2134:	dd 4f       	sbci	r29, 0xFD	; 253
    2136:	58 81       	ld	r21, Y
    2138:	c2 5c       	subi	r28, 0xC2	; 194
    213a:	d2 40       	sbci	r29, 0x02	; 2
    213c:	f0 90 a8 04 	lds	r15, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2140:	f2 fe       	sbrs	r15, 2
    2142:	05 c0       	rjmp	.+10     	; 0x214e <report+0x5a6>
    2144:	68 94       	set
    2146:	ff 24       	eor	r15, r15
    2148:	f1 f8       	bld	r15, 1
    214a:	e1 2c       	mov	r14, r1
    214c:	03 c0       	rjmp	.+6      	; 0x2154 <report+0x5ac>
    214e:	ff 24       	eor	r15, r15
    2150:	f3 94       	inc	r15
    2152:	e1 2c       	mov	r14, r1
    2154:	9f 93       	push	r25
    2156:	8f 93       	push	r24
    2158:	0f 93       	push	r16
    215a:	1f 93       	push	r17
    215c:	bf 93       	push	r27
    215e:	af 93       	push	r26
    2160:	ff 93       	push	r31
    2162:	ef 93       	push	r30
    2164:	7f 93       	push	r23
    2166:	6f 93       	push	r22
    2168:	5f 93       	push	r21
    216a:	4f 93       	push	r20
    216c:	3f 93       	push	r19
    216e:	2f 93       	push	r18
    2170:	ce 01       	movw	r24, r28
    2172:	8b 5e       	subi	r24, 0xEB	; 235
    2174:	9e 4f       	sbci	r25, 0xFE	; 254
    2176:	9f 93       	push	r25
    2178:	8f 93       	push	r24
    217a:	ef 92       	push	r14
    217c:	ff 92       	push	r15
    217e:	8b 54       	subi	r24, 0x4B	; 75
    2180:	9f 4f       	sbci	r25, 0xFF	; 255
    2182:	9f 93       	push	r25
    2184:	8f 93       	push	r24
    2186:	8e 01       	movw	r16, r28
    2188:	0f 5f       	subi	r16, 0xFF	; 255
    218a:	1f 4f       	sbci	r17, 0xFF	; 255
    218c:	1f 93       	push	r17
    218e:	0f 93       	push	r16
    2190:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
			checksum_NMEA(outbuf);
    2194:	c8 01       	movw	r24, r16
    2196:	0e 94 9f 09 	call	0x133e	; 0x133e <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    219a:	f8 01       	movw	r30, r16
    219c:	01 90       	ld	r0, Z+
    219e:	00 20       	and	r0, r0
    21a0:	e9 f7       	brne	.-6      	; 0x219c <report+0x5f4>
    21a2:	31 97       	sbiw	r30, 0x01	; 1
    21a4:	af 01       	movw	r20, r30
    21a6:	40 1b       	sub	r20, r16
    21a8:	51 0b       	sbc	r21, r17
    21aa:	b8 01       	movw	r22, r16
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	0e 94 11 16 	call	0x2c22	; 0x2c22 <send_USART>
			writestr_OLED(1, "Orientation", 1);
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	6e e6       	ldi	r22, 0x6E	; 110
    21b6:	70 e8       	ldi	r23, 0x80	; 128
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	0e 94 03 0b 	call	0x1606	; 0x1606 <writestr_OLED>
			sprintf(outbuf, dformat_ORI, x, y, z);
    21be:	c6 53       	subi	r28, 0x36	; 54
    21c0:	dd 4f       	sbci	r29, 0xFD	; 253
    21c2:	88 81       	ld	r24, Y
    21c4:	ca 5c       	subi	r28, 0xCA	; 202
    21c6:	d2 40       	sbci	r29, 0x02	; 2
    21c8:	8f 93       	push	r24
    21ca:	c7 53       	subi	r28, 0x37	; 55
    21cc:	dd 4f       	sbci	r29, 0xFD	; 253
    21ce:	88 81       	ld	r24, Y
    21d0:	c9 5c       	subi	r28, 0xC9	; 201
    21d2:	d2 40       	sbci	r29, 0x02	; 2
    21d4:	8f 93       	push	r24
    21d6:	c8 53       	subi	r28, 0x38	; 56
    21d8:	dd 4f       	sbci	r29, 0xFD	; 253
    21da:	88 81       	ld	r24, Y
    21dc:	c8 5c       	subi	r28, 0xC8	; 200
    21de:	d2 40       	sbci	r29, 0x02	; 2
    21e0:	8f 93       	push	r24
    21e2:	c9 53       	subi	r28, 0x39	; 57
    21e4:	dd 4f       	sbci	r29, 0xFD	; 253
    21e6:	88 81       	ld	r24, Y
    21e8:	c7 5c       	subi	r28, 0xC7	; 199
    21ea:	d2 40       	sbci	r29, 0x02	; 2
    21ec:	8f 93       	push	r24
    21ee:	ca 53       	subi	r28, 0x3A	; 58
    21f0:	dd 4f       	sbci	r29, 0xFD	; 253
    21f2:	88 81       	ld	r24, Y
    21f4:	c6 5c       	subi	r28, 0xC6	; 198
    21f6:	d2 40       	sbci	r29, 0x02	; 2
    21f8:	8f 93       	push	r24
    21fa:	cb 53       	subi	r28, 0x3B	; 59
    21fc:	dd 4f       	sbci	r29, 0xFD	; 253
    21fe:	88 81       	ld	r24, Y
    2200:	c5 5c       	subi	r28, 0xC5	; 197
    2202:	d2 40       	sbci	r29, 0x02	; 2
    2204:	8f 93       	push	r24
    2206:	cc 53       	subi	r28, 0x3C	; 60
    2208:	dd 4f       	sbci	r29, 0xFD	; 253
    220a:	88 81       	ld	r24, Y
    220c:	c4 5c       	subi	r28, 0xC4	; 196
    220e:	d2 40       	sbci	r29, 0x02	; 2
    2210:	8f 93       	push	r24
    2212:	cd 53       	subi	r28, 0x3D	; 61
    2214:	dd 4f       	sbci	r29, 0xFD	; 253
    2216:	88 81       	ld	r24, Y
    2218:	c3 5c       	subi	r28, 0xC3	; 195
    221a:	d2 40       	sbci	r29, 0x02	; 2
    221c:	8f 93       	push	r24
    221e:	ce 53       	subi	r28, 0x3E	; 62
    2220:	dd 4f       	sbci	r29, 0xFD	; 253
    2222:	88 81       	ld	r24, Y
    2224:	c2 5c       	subi	r28, 0xC2	; 194
    2226:	d2 40       	sbci	r29, 0x02	; 2
    2228:	8f 93       	push	r24
    222a:	cf 53       	subi	r28, 0x3F	; 63
    222c:	dd 4f       	sbci	r29, 0xFD	; 253
    222e:	88 81       	ld	r24, Y
    2230:	c1 5c       	subi	r28, 0xC1	; 193
    2232:	d2 40       	sbci	r29, 0x02	; 2
    2234:	8f 93       	push	r24
    2236:	c0 54       	subi	r28, 0x40	; 64
    2238:	dd 4f       	sbci	r29, 0xFD	; 253
    223a:	88 81       	ld	r24, Y
    223c:	c0 5c       	subi	r28, 0xC0	; 192
    223e:	d2 40       	sbci	r29, 0x02	; 2
    2240:	8f 93       	push	r24
    2242:	c1 54       	subi	r28, 0x41	; 65
    2244:	dd 4f       	sbci	r29, 0xFD	; 253
    2246:	88 81       	ld	r24, Y
    2248:	cf 5b       	subi	r28, 0xBF	; 191
    224a:	d2 40       	sbci	r29, 0x02	; 2
    224c:	8f 93       	push	r24
    224e:	ce 01       	movw	r24, r28
    2250:	86 51       	subi	r24, 0x16	; 22
    2252:	9e 4f       	sbci	r25, 0xFE	; 254
    2254:	9f 93       	push	r25
    2256:	8f 93       	push	r24
    2258:	1f 93       	push	r17
    225a:	0f 93       	push	r16
    225c:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
			writestr_OLED(1, outbuf, 2);
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	42 e0       	ldi	r20, 0x02	; 2
    2266:	b8 01       	movw	r22, r16
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	0e 94 03 0b 	call	0x1606	; 0x1606 <writestr_OLED>
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    226e:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Orientation", 1);
			sprintf(outbuf, dformat_ORI, x, y, z);
			writestr_OLED(1, outbuf, 2);
			break;
    2270:	c9 c1       	rjmp	.+914    	; 0x2604 <report+0xa5c>

		case 'p':
			get_time(currenttime);
    2272:	ce 01       	movw	r24, r28
    2274:	8b 5e       	subi	r24, 0xEB	; 235
    2276:	9e 4f       	sbci	r25, 0xFE	; 254
    2278:	0e 94 79 05 	call	0xaf2	; 0xaf2 <get_time>
			read_PNEUSENSORS(&shutter, &left, &right, &air);
    227c:	9e 01       	movw	r18, r28
    227e:	2c 5a       	subi	r18, 0xAC	; 172
    2280:	3e 4f       	sbci	r19, 0xFE	; 254
    2282:	ae 01       	movw	r20, r28
    2284:	4d 5a       	subi	r20, 0xAD	; 173
    2286:	5e 4f       	sbci	r21, 0xFE	; 254
    2288:	be 01       	movw	r22, r28
    228a:	6e 5a       	subi	r22, 0xAE	; 174
    228c:	7e 4f       	sbci	r23, 0xFE	; 254
    228e:	ce 01       	movw	r24, r28
    2290:	8f 5a       	subi	r24, 0xAF	; 175
    2292:	9e 4f       	sbci	r25, 0xFE	; 254
    2294:	0e 94 c8 0b 	call	0x1790	; 0x1790 <read_PNEUSENSORS>
			sprintf(outbuf, format_PNU, get_SPECID, currenttime, shutter, left, right, air, pcmd[cstack].cid);
    2298:	24 e3       	ldi	r18, 0x34	; 52
    229a:	20 9f       	mul	r18, r16
    229c:	c0 01       	movw	r24, r0
    229e:	21 9f       	mul	r18, r17
    22a0:	90 0d       	add	r25, r0
    22a2:	11 24       	eor	r1, r1
    22a4:	80 5d       	subi	r24, 0xD0	; 208
    22a6:	97 4d       	sbci	r25, 0xD7	; 215
    22a8:	cc 5a       	subi	r28, 0xAC	; 172
    22aa:	de 4f       	sbci	r29, 0xFE	; 254
    22ac:	58 81       	ld	r21, Y
    22ae:	c4 55       	subi	r28, 0x54	; 84
    22b0:	d1 40       	sbci	r29, 0x01	; 1
    22b2:	cd 5a       	subi	r28, 0xAD	; 173
    22b4:	de 4f       	sbci	r29, 0xFE	; 254
    22b6:	48 81       	ld	r20, Y
    22b8:	c3 55       	subi	r28, 0x53	; 83
    22ba:	d1 40       	sbci	r29, 0x01	; 1
    22bc:	ce 5a       	subi	r28, 0xAE	; 174
    22be:	de 4f       	sbci	r29, 0xFE	; 254
    22c0:	38 81       	ld	r19, Y
    22c2:	c2 55       	subi	r28, 0x52	; 82
    22c4:	d1 40       	sbci	r29, 0x01	; 1
    22c6:	cf 5a       	subi	r28, 0xAF	; 175
    22c8:	de 4f       	sbci	r29, 0xFE	; 254
    22ca:	28 81       	ld	r18, Y
    22cc:	c1 55       	subi	r28, 0x51	; 81
    22ce:	d1 40       	sbci	r29, 0x01	; 1
    22d0:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    22d4:	62 ff       	sbrs	r22, 2
    22d6:	03 c0       	rjmp	.+6      	; 0x22de <report+0x736>
    22d8:	62 e0       	ldi	r22, 0x02	; 2
    22da:	70 e0       	ldi	r23, 0x00	; 0
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <report+0x73a>
    22de:	61 e0       	ldi	r22, 0x01	; 1
    22e0:	70 e0       	ldi	r23, 0x00	; 0
    22e2:	9f 93       	push	r25
    22e4:	8f 93       	push	r24
    22e6:	1f 92       	push	r1
    22e8:	5f 93       	push	r21
    22ea:	1f 92       	push	r1
    22ec:	4f 93       	push	r20
    22ee:	1f 92       	push	r1
    22f0:	3f 93       	push	r19
    22f2:	1f 92       	push	r1
    22f4:	2f 93       	push	r18
    22f6:	ce 01       	movw	r24, r28
    22f8:	8b 5e       	subi	r24, 0xEB	; 235
    22fa:	9e 4f       	sbci	r25, 0xFE	; 254
    22fc:	9f 93       	push	r25
    22fe:	8f 93       	push	r24
    2300:	7f 93       	push	r23
    2302:	6f 93       	push	r22
    2304:	89 51       	subi	r24, 0x19	; 25
    2306:	9f 4f       	sbci	r25, 0xFF	; 255
    2308:	9f 93       	push	r25
    230a:	8f 93       	push	r24
    230c:	8e 01       	movw	r16, r28
    230e:	0f 5f       	subi	r16, 0xFF	; 255
    2310:	1f 4f       	sbci	r17, 0xFF	; 255
    2312:	1f 93       	push	r17
    2314:	0f 93       	push	r16
    2316:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
			checksum_NMEA(outbuf);
    231a:	c8 01       	movw	r24, r16
    231c:	0e 94 9f 09 	call	0x133e	; 0x133e <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2320:	f8 01       	movw	r30, r16
    2322:	01 90       	ld	r0, Z+
    2324:	00 20       	and	r0, r0
    2326:	e9 f7       	brne	.-6      	; 0x2322 <report+0x77a>
    2328:	31 97       	sbiw	r30, 0x01	; 1
    232a:	af 01       	movw	r20, r30
    232c:	40 1b       	sub	r20, r16
    232e:	51 0b       	sbc	r21, r17
    2330:	b8 01       	movw	r22, r16
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	0e 94 11 16 	call	0x2c22	; 0x2c22 <send_USART>
			sprintf(outbuf, dformat_PN1, left, right);
    2338:	cd 5a       	subi	r28, 0xAD	; 173
    233a:	de 4f       	sbci	r29, 0xFE	; 254
    233c:	88 81       	ld	r24, Y
    233e:	c3 55       	subi	r28, 0x53	; 83
    2340:	d1 40       	sbci	r29, 0x01	; 1
    2342:	1f 92       	push	r1
    2344:	8f 93       	push	r24
    2346:	ce 5a       	subi	r28, 0xAE	; 174
    2348:	de 4f       	sbci	r29, 0xFE	; 254
    234a:	88 81       	ld	r24, Y
    234c:	c2 55       	subi	r28, 0x52	; 82
    234e:	d1 40       	sbci	r29, 0x01	; 1
    2350:	1f 92       	push	r1
    2352:	8f 93       	push	r24
    2354:	ce 01       	movw	r24, r28
    2356:	83 5d       	subi	r24, 0xD3	; 211
    2358:	9d 4f       	sbci	r25, 0xFD	; 253
    235a:	9f 93       	push	r25
    235c:	8f 93       	push	r24
    235e:	1f 93       	push	r17
    2360:	0f 93       	push	r16
    2362:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
			writestr_OLED(1, outbuf, 1);
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	b8 01       	movw	r22, r16
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	0e 94 03 0b 	call	0x1606	; 0x1606 <writestr_OLED>
			sprintf(outbuf, dformat_PN2, shutter, air);
    2370:	cc 5a       	subi	r28, 0xAC	; 172
    2372:	de 4f       	sbci	r29, 0xFE	; 254
    2374:	88 81       	ld	r24, Y
    2376:	c4 55       	subi	r28, 0x54	; 84
    2378:	d1 40       	sbci	r29, 0x01	; 1
    237a:	1f 92       	push	r1
    237c:	8f 93       	push	r24
    237e:	cf 5a       	subi	r28, 0xAF	; 175
    2380:	de 4f       	sbci	r29, 0xFE	; 254
    2382:	88 81       	ld	r24, Y
    2384:	c1 55       	subi	r28, 0x51	; 81
    2386:	d1 40       	sbci	r29, 0x01	; 1
    2388:	1f 92       	push	r1
    238a:	8f 93       	push	r24
    238c:	ce 01       	movw	r24, r28
    238e:	80 5c       	subi	r24, 0xC0	; 192
    2390:	9d 4f       	sbci	r25, 0xFD	; 253
    2392:	9f 93       	push	r25
    2394:	8f 93       	push	r24
    2396:	1f 93       	push	r17
    2398:	0f 93       	push	r16
    239a:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
			writestr_OLED(1, outbuf, 2);
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	42 e0       	ldi	r20, 0x02	; 2
    23a4:	b8 01       	movw	r22, r16
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	0e 94 03 0b 	call	0x1606	; 0x1606 <writestr_OLED>
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    23ac:	80 e0       	ldi	r24, 0x00	; 0
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			sprintf(outbuf, dformat_PN1, left, right);
			writestr_OLED(1, outbuf, 1);
			sprintf(outbuf, dformat_PN2, shutter, air);
			writestr_OLED(1, outbuf, 2);
			break;
    23ae:	2a c1       	rjmp	.+596    	; 0x2604 <report+0xa5c>

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
    23b0:	ce 01       	movw	r24, r28
    23b2:	8b 5e       	subi	r24, 0xEB	; 235
    23b4:	9e 4f       	sbci	r25, 0xFE	; 254
    23b6:	0e 94 79 05 	call	0xaf2	; 0xaf2 <get_time>
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
    23ba:	24 e1       	ldi	r18, 0x14	; 20
    23bc:	ae 01       	movw	r20, r28
    23be:	47 5d       	subi	r20, 0xD7	; 215
    23c0:	5e 4f       	sbci	r21, 0xFE	; 254
    23c2:	60 e0       	ldi	r22, 0x00	; 0
    23c4:	70 e0       	ldi	r23, 0x00	; 0
    23c6:	80 e5       	ldi	r24, 0x50	; 80
    23c8:	0e 94 3f 06 	call	0xc7e	; 0xc7e <read_FRAM>
			get_BOOTTIME(boottime);
    23cc:	ce 01       	movw	r24, r28
    23ce:	83 5c       	subi	r24, 0xC3	; 195
    23d0:	9e 4f       	sbci	r25, 0xFE	; 254
    23d2:	0e 94 f5 05 	call	0xbea	; 0xbea <get_BOOTTIME>
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
				boottime, pcmd[cstack].cid);
    23d6:	24 e3       	ldi	r18, 0x34	; 52
    23d8:	20 9f       	mul	r18, r16
    23da:	c0 01       	movw	r24, r0
    23dc:	21 9f       	mul	r18, r17
    23de:	90 0d       	add	r25, r0
    23e0:	11 24       	eor	r1, r1
    23e2:	80 5d       	subi	r24, 0xD0	; 208
    23e4:	97 4d       	sbci	r25, 0xD7	; 215

		case 't':					// Report current time on specMech clock
			get_time(currenttime);
			read_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) lastsettime, 20);
			get_BOOTTIME(boottime);
			sprintf(outbuf, format_TIM, get_SPECID, currenttime, lastsettime,
    23e6:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    23ea:	22 ff       	sbrs	r18, 2
    23ec:	03 c0       	rjmp	.+6      	; 0x23f4 <report+0x84c>
    23ee:	22 e0       	ldi	r18, 0x02	; 2
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <report+0x850>
    23f4:	21 e0       	ldi	r18, 0x01	; 1
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	9f 93       	push	r25
    23fa:	8f 93       	push	r24
    23fc:	ce 01       	movw	r24, r28
    23fe:	83 5c       	subi	r24, 0xC3	; 195
    2400:	9e 4f       	sbci	r25, 0xFE	; 254
    2402:	9f 93       	push	r25
    2404:	8f 93       	push	r24
    2406:	44 97       	sbiw	r24, 0x14	; 20
    2408:	9f 93       	push	r25
    240a:	8f 93       	push	r24
    240c:	8e 01       	movw	r16, r28
    240e:	0b 5e       	subi	r16, 0xEB	; 235
    2410:	1e 4f       	sbci	r17, 0xFE	; 254
    2412:	1f 93       	push	r17
    2414:	0f 93       	push	r16
    2416:	3f 93       	push	r19
    2418:	2f 93       	push	r18
    241a:	86 5d       	subi	r24, 0xD6	; 214
    241c:	9e 4f       	sbci	r25, 0xFE	; 254
    241e:	9f 93       	push	r25
    2420:	8f 93       	push	r24
    2422:	82 55       	subi	r24, 0x52	; 82
    2424:	92 40       	sbci	r25, 0x02	; 2
    2426:	7c 01       	movw	r14, r24
    2428:	9f 93       	push	r25
    242a:	8f 93       	push	r24
    242c:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
    2430:	c7 01       	movw	r24, r14
    2432:	0e 94 9f 09 	call	0x133e	; 0x133e <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2436:	f7 01       	movw	r30, r14
    2438:	01 90       	ld	r0, Z+
    243a:	00 20       	and	r0, r0
    243c:	e9 f7       	brne	.-6      	; 0x2438 <report+0x890>
    243e:	31 97       	sbiw	r30, 0x01	; 1
    2440:	af 01       	movw	r20, r30
    2442:	4e 19       	sub	r20, r14
    2444:	5f 09       	sbc	r21, r15
    2446:	b7 01       	movw	r22, r14
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	0e 94 11 16 	call	0x2c22	; 0x2c22 <send_USART>
			writestr_OLED(1, "Time", 1);
    244e:	41 e0       	ldi	r20, 0x01	; 1
    2450:	6a e7       	ldi	r22, 0x7A	; 122
    2452:	70 e8       	ldi	r23, 0x80	; 128
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	0e 94 03 0b 	call	0x1606	; 0x1606 <writestr_OLED>
			writestr_OLED(1, &currenttime[11], 2);			
    245a:	b8 01       	movw	r22, r16
    245c:	65 5f       	subi	r22, 0xF5	; 245
    245e:	7f 4f       	sbci	r23, 0xFF	; 255
    2460:	42 e0       	ldi	r20, 0x02	; 2
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	0e 94 03 0b 	call	0x1606	; 0x1606 <writestr_OLED>
			break;
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    246c:	80 e0       	ldi	r24, 0x00	; 0
				boottime, pcmd[cstack].cid);
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "Time", 1);
			writestr_OLED(1, &currenttime[11], 2);			
			break;
    246e:	ca c0       	rjmp	.+404    	; 0x2604 <report+0xa5c>

		case 'v':
			redvac = read_ionpump(REDPUMP);
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	0e 94 87 07 	call	0xf0e	; 0xf0e <read_ionpump>
    2476:	f6 2e       	mov	r15, r22
    2478:	e7 2e       	mov	r14, r23
    247a:	d8 2e       	mov	r13, r24
    247c:	c9 2e       	mov	r12, r25
			bluvac = read_ionpump(BLUEPUMP);
    247e:	82 e0       	ldi	r24, 0x02	; 2
    2480:	0e 94 87 07 	call	0xf0e	; 0xf0e <read_ionpump>
    2484:	b6 2e       	mov	r11, r22
    2486:	a7 2e       	mov	r10, r23
    2488:	98 2e       	mov	r9, r24
    248a:	89 2e       	mov	r8, r25
			if (get_time(currenttime)) {
    248c:	ce 01       	movw	r24, r28
    248e:	8b 5e       	subi	r24, 0xEB	; 235
    2490:	9e 4f       	sbci	r25, 0xFE	; 254
    2492:	0e 94 79 05 	call	0xaf2	; 0xaf2 <get_time>
    2496:	88 23       	and	r24, r24
    2498:	29 f0       	breq	.+10     	; 0x24a4 <report+0x8fc>
				printError(ERR_GETTIME, "DS3231");
    249a:	6f e7       	ldi	r22, 0x7F	; 127
    249c:	70 e8       	ldi	r23, 0x80	; 128
    249e:	85 e6       	ldi	r24, 0x65	; 101
    24a0:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <printError>
			}
			sprintf(outbuf, format_VAC, get_SPECID, currenttime, redvac, bluvac, pcmd[cstack].cid);
    24a4:	24 e3       	ldi	r18, 0x34	; 52
    24a6:	20 9f       	mul	r18, r16
    24a8:	c0 01       	movw	r24, r0
    24aa:	21 9f       	mul	r18, r17
    24ac:	90 0d       	add	r25, r0
    24ae:	11 24       	eor	r1, r1
    24b0:	80 5d       	subi	r24, 0xD0	; 208
    24b2:	97 4d       	sbci	r25, 0xD7	; 215
    24b4:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    24b8:	22 ff       	sbrs	r18, 2
    24ba:	03 c0       	rjmp	.+6      	; 0x24c2 <report+0x91a>
    24bc:	22 e0       	ldi	r18, 0x02	; 2
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <report+0x91e>
    24c2:	21 e0       	ldi	r18, 0x01	; 1
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	9f 93       	push	r25
    24c8:	8f 93       	push	r24
    24ca:	8f 92       	push	r8
    24cc:	9f 92       	push	r9
    24ce:	af 92       	push	r10
    24d0:	bf 92       	push	r11
    24d2:	cf 92       	push	r12
    24d4:	df 92       	push	r13
    24d6:	ef 92       	push	r14
    24d8:	ff 92       	push	r15
    24da:	ce 01       	movw	r24, r28
    24dc:	8b 5e       	subi	r24, 0xEB	; 235
    24de:	9e 4f       	sbci	r25, 0xFE	; 254
    24e0:	9f 93       	push	r25
    24e2:	8f 93       	push	r24
    24e4:	3f 93       	push	r19
    24e6:	2f 93       	push	r18
    24e8:	85 5a       	subi	r24, 0xA5	; 165
    24ea:	9e 4f       	sbci	r25, 0xFE	; 254
    24ec:	9f 93       	push	r25
    24ee:	8f 93       	push	r24
    24f0:	8e 01       	movw	r16, r28
    24f2:	0f 5f       	subi	r16, 0xFF	; 255
    24f4:	1f 4f       	sbci	r17, 0xFF	; 255
    24f6:	1f 93       	push	r17
    24f8:	0f 93       	push	r16
    24fa:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
			checksum_NMEA(outbuf);
    24fe:	c8 01       	movw	r24, r16
    2500:	0e 94 9f 09 	call	0x133e	; 0x133e <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    2504:	f8 01       	movw	r30, r16
    2506:	01 90       	ld	r0, Z+
    2508:	00 20       	and	r0, r0
    250a:	e9 f7       	brne	.-6      	; 0x2506 <report+0x95e>
    250c:	31 97       	sbiw	r30, 0x01	; 1
    250e:	af 01       	movw	r20, r30
    2510:	40 1b       	sub	r20, r16
    2512:	51 0b       	sbc	r21, r17
    2514:	b8 01       	movw	r22, r16
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	0e 94 11 16 	call	0x2c22	; 0x2c22 <send_USART>
			writestr_OLED(1, "RedVac  BlueVac", 1);
    251c:	41 e0       	ldi	r20, 0x01	; 1
    251e:	66 e8       	ldi	r22, 0x86	; 134
    2520:	70 e8       	ldi	r23, 0x80	; 128
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	0e 94 03 0b 	call	0x1606	; 0x1606 <writestr_OLED>
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
    2528:	8f 92       	push	r8
    252a:	9f 92       	push	r9
    252c:	af 92       	push	r10
    252e:	bf 92       	push	r11
    2530:	cf 92       	push	r12
    2532:	df 92       	push	r13
    2534:	ef 92       	push	r14
    2536:	ff 92       	push	r15
    2538:	ce 01       	movw	r24, r28
    253a:	87 56       	subi	r24, 0x67	; 103
    253c:	9d 4f       	sbci	r25, 0xFD	; 253
    253e:	9f 93       	push	r25
    2540:	8f 93       	push	r24
    2542:	1f 93       	push	r17
    2544:	0f 93       	push	r16
    2546:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
			writestr_OLED(1, outbuf, 2);
    254a:	42 e0       	ldi	r20, 0x02	; 2
    254c:	b8 01       	movw	r22, r16
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	0e 94 03 0b 	call	0x1606	; 0x1606 <writestr_OLED>
			break;
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2558:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "RedVac  BlueVac", 1);
			sprintf(outbuf, dformat_VAC, redvac, bluvac);
			writestr_OLED(1, outbuf, 2);
			break;
    255a:	54 c0       	rjmp	.+168    	; 0x2604 <report+0xa5c>

		case 'V':
			get_VERSION(version);	// Send the specMech version
    255c:	ce 01       	movw	r24, r28
    255e:	86 5f       	subi	r24, 0xF6	; 246
    2560:	9e 4f       	sbci	r25, 0xFE	; 254
    2562:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <get_VERSION>
			get_time(currenttime);
    2566:	ce 01       	movw	r24, r28
    2568:	8b 5e       	subi	r24, 0xEB	; 235
    256a:	9e 4f       	sbci	r25, 0xFE	; 254
    256c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <get_time>
			sprintf(outbuf, format_VER, get_SPECID, currenttime, version, pcmd[cstack].cid);
    2570:	24 e3       	ldi	r18, 0x34	; 52
    2572:	20 9f       	mul	r18, r16
    2574:	c0 01       	movw	r24, r0
    2576:	21 9f       	mul	r18, r17
    2578:	90 0d       	add	r25, r0
    257a:	11 24       	eor	r1, r1
    257c:	80 5d       	subi	r24, 0xD0	; 208
    257e:	97 4d       	sbci	r25, 0xD7	; 215
    2580:	20 91 a8 04 	lds	r18, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7f44a8>
    2584:	22 ff       	sbrs	r18, 2
    2586:	03 c0       	rjmp	.+6      	; 0x258e <report+0x9e6>
    2588:	22 e0       	ldi	r18, 0x02	; 2
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	02 c0       	rjmp	.+4      	; 0x2592 <report+0x9ea>
    258e:	21 e0       	ldi	r18, 0x01	; 1
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	9f 93       	push	r25
    2594:	8f 93       	push	r24
    2596:	ce 01       	movw	r24, r28
    2598:	86 5f       	subi	r24, 0xF6	; 246
    259a:	9e 4f       	sbci	r25, 0xFE	; 254
    259c:	9f 93       	push	r25
    259e:	8f 93       	push	r24
    25a0:	0b 96       	adiw	r24, 0x0b	; 11
    25a2:	9f 93       	push	r25
    25a4:	8f 93       	push	r24
    25a6:	3f 93       	push	r19
    25a8:	2f 93       	push	r18
    25aa:	8f 56       	subi	r24, 0x6F	; 111
    25ac:	9e 4f       	sbci	r25, 0xFE	; 254
    25ae:	9f 93       	push	r25
    25b0:	8f 93       	push	r24
    25b2:	8e 01       	movw	r16, r28
    25b4:	0f 5f       	subi	r16, 0xFF	; 255
    25b6:	1f 4f       	sbci	r17, 0xFF	; 255
    25b8:	1f 93       	push	r17
    25ba:	0f 93       	push	r16
    25bc:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <sprintf>
			checksum_NMEA(outbuf);
    25c0:	c8 01       	movw	r24, r16
    25c2:	0e 94 9f 09 	call	0x133e	; 0x133e <checksum_NMEA>
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
    25c6:	f8 01       	movw	r30, r16
    25c8:	01 90       	ld	r0, Z+
    25ca:	00 20       	and	r0, r0
    25cc:	e9 f7       	brne	.-6      	; 0x25c8 <report+0xa20>
    25ce:	31 97       	sbiw	r30, 0x01	; 1
    25d0:	af 01       	movw	r20, r30
    25d2:	40 1b       	sub	r20, r16
    25d4:	51 0b       	sbc	r21, r17
    25d6:	b8 01       	movw	r22, r16
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	0e 94 11 16 	call	0x2c22	; 0x2c22 <send_USART>
			writestr_OLED(1, "specMech Version", 1);
    25de:	41 e0       	ldi	r20, 0x01	; 1
    25e0:	67 ee       	ldi	r22, 0xE7	; 231
    25e2:	7f e7       	ldi	r23, 0x7F	; 127
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	0e 94 03 0b 	call	0x1606	; 0x1606 <writestr_OLED>
			get_VERSION(outbuf);
    25ea:	c8 01       	movw	r24, r16
    25ec:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <get_VERSION>
			writestr_OLED(1, outbuf, 2);
    25f0:	42 e0       	ldi	r20, 0x02	; 2
    25f2:	b8 01       	movw	r22, r16
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	0e 94 03 0b 	call	0x1606	; 0x1606 <writestr_OLED>
			break;
    25fa:	cd bf       	out	0x3d, r28	; 61
    25fc:	de bf       	out	0x3e, r29	; 62
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    25fe:	80 e0       	ldi	r24, 0x00	; 0
			checksum_NMEA(outbuf);
			send_USART(0, (uint8_t*) outbuf, strlen(outbuf));
			writestr_OLED(1, "specMech Version", 1);
			get_VERSION(outbuf);
			writestr_OLED(1, outbuf, 2);
			break;
    2600:	01 c0       	rjmp	.+2      	; 0x2604 <report+0xa5c>
		default:
			return(ERRORPROMPT);
			break;
	}

	return(GREATERPROMPT);
    2602:	80 e0       	ldi	r24, 0x00	; 0

}
    2604:	c8 52       	subi	r28, 0x28	; 40
    2606:	dd 4f       	sbci	r29, 0xFD	; 253
    2608:	cd bf       	out	0x3d, r28	; 61
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	1f 91       	pop	r17
    2612:	0f 91       	pop	r16
    2614:	ff 90       	pop	r15
    2616:	ef 90       	pop	r14
    2618:	df 90       	pop	r13
    261a:	cf 90       	pop	r12
    261c:	bf 90       	pop	r11
    261e:	af 90       	pop	r10
    2620:	9f 90       	pop	r9
    2622:	8f 90       	pop	r8
    2624:	7f 90       	pop	r7
    2626:	6f 90       	pop	r6
    2628:	5f 90       	pop	r5
    262a:	4f 90       	pop	r4
    262c:	3f 90       	pop	r3
    262e:	2f 90       	pop	r2
    2630:	08 95       	ret

00002632 <crc16>:
	if (crcExpected != crcReceived) {
		return(-666.0);
	} else {
		return((float) value / 10.0);
	}
}
    2632:	dc 01       	movw	r26, r24
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	1b c0       	rjmp	.+54     	; 0x2674 <crc16+0x42>
    263e:	fd 01       	movw	r30, r26
    2640:	e4 0f       	add	r30, r20
    2642:	f5 1f       	adc	r31, r21
    2644:	20 81       	ld	r18, Z
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	32 2f       	mov	r19, r18
    264a:	22 27       	eor	r18, r18
    264c:	82 27       	eor	r24, r18
    264e:	93 27       	eor	r25, r19
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	0c c0       	rjmp	.+24     	; 0x266c <crc16+0x3a>
    2654:	99 23       	and	r25, r25
    2656:	3c f4       	brge	.+14     	; 0x2666 <crc16+0x34>
    2658:	88 0f       	add	r24, r24
    265a:	99 1f       	adc	r25, r25
    265c:	31 e2       	ldi	r19, 0x21	; 33
    265e:	83 27       	eor	r24, r19
    2660:	30 e1       	ldi	r19, 0x10	; 16
    2662:	93 27       	eor	r25, r19
    2664:	02 c0       	rjmp	.+4      	; 0x266a <crc16+0x38>
    2666:	88 0f       	add	r24, r24
    2668:	99 1f       	adc	r25, r25
    266a:	2f 5f       	subi	r18, 0xFF	; 255
    266c:	28 30       	cpi	r18, 0x08	; 8
    266e:	90 f3       	brcs	.-28     	; 0x2654 <crc16+0x22>
    2670:	4f 5f       	subi	r20, 0xFF	; 255
    2672:	5f 4f       	sbci	r21, 0xFF	; 255
    2674:	46 17       	cp	r20, r22
    2676:	57 07       	cpc	r21, r23
    2678:	10 f3       	brcs	.-60     	; 0x263e <crc16+0xc>
    267a:	08 95       	ret

0000267c <get_ROBOEncoder>:
    267c:	cf 92       	push	r12
    267e:	df 92       	push	r13
    2680:	ef 92       	push	r14
    2682:	ff 92       	push	r15
    2684:	0f 93       	push	r16
    2686:	1f 93       	push	r17
    2688:	cf 93       	push	r28
    268a:	df 93       	push	r29
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
    2690:	27 97       	sbiw	r28, 0x07	; 7
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	de bf       	out	0x3e, r29	; 62
    2696:	8a 01       	movw	r16, r20
    2698:	97 e0       	ldi	r25, 0x07	; 7
    269a:	90 93 13 2b 	sts	0x2B13, r25	; 0x802b13 <recv1_buf+0x101>
    269e:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0x103>
    26a2:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	6a 83       	std	Y+2, r22	; 0x02
    26aa:	42 e0       	ldi	r20, 0x02	; 2
    26ac:	be 01       	movw	r22, r28
    26ae:	6f 5f       	subi	r22, 0xFF	; 255
    26b0:	7f 4f       	sbci	r23, 0xFF	; 255
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	0e 94 11 16 	call	0x2c22	; 0x2c22 <send_USART>
    26b8:	01 c0       	rjmp	.+2      	; 0x26bc <get_ROBOEncoder+0x40>
    26ba:	00 00       	nop
    26bc:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv1_buf+0x104>
    26c0:	88 23       	and	r24, r24
    26c2:	d9 f3       	breq	.-10     	; 0x26ba <get_ROBOEncoder+0x3e>
    26c4:	e2 e1       	ldi	r30, 0x12	; 18
    26c6:	fa e2       	ldi	r31, 0x2A	; 42
    26c8:	e5 80       	ldd	r14, Z+5	; 0x05
    26ca:	f1 2c       	mov	r15, r1
    26cc:	fe 2c       	mov	r15, r14
    26ce:	ee 24       	eor	r14, r14
    26d0:	86 81       	ldd	r24, Z+6	; 0x06
    26d2:	e8 2a       	or	r14, r24
    26d4:	22 e0       	ldi	r18, 0x02	; 2
    26d6:	0e c0       	rjmp	.+28     	; 0x26f4 <get_ROBOEncoder+0x78>
    26d8:	82 2f       	mov	r24, r18
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	fc 01       	movw	r30, r24
    26de:	e0 5f       	subi	r30, 0xF0	; 240
    26e0:	f5 4d       	sbci	r31, 0xD5	; 213
    26e2:	30 81       	ld	r19, Z
    26e4:	e1 e0       	ldi	r30, 0x01	; 1
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	ec 0f       	add	r30, r28
    26ea:	fd 1f       	adc	r31, r29
    26ec:	e8 0f       	add	r30, r24
    26ee:	f9 1f       	adc	r31, r25
    26f0:	30 83       	st	Z, r19
    26f2:	2f 5f       	subi	r18, 0xFF	; 255
    26f4:	27 30       	cpi	r18, 0x07	; 7
    26f6:	80 f3       	brcs	.-32     	; 0x26d8 <get_ROBOEncoder+0x5c>
    26f8:	67 e0       	ldi	r22, 0x07	; 7
    26fa:	70 e0       	ldi	r23, 0x00	; 0
    26fc:	ce 01       	movw	r24, r28
    26fe:	01 96       	adiw	r24, 0x01	; 1
    2700:	0e 94 19 13 	call	0x2632	; 0x2632 <crc16>
    2704:	e8 16       	cp	r14, r24
    2706:	f9 06       	cpc	r15, r25
    2708:	41 f0       	breq	.+16     	; 0x271a <get_ROBOEncoder+0x9e>
    270a:	d8 01       	movw	r26, r16
    270c:	1d 92       	st	X+, r1
    270e:	1d 92       	st	X+, r1
    2710:	1d 92       	st	X+, r1
    2712:	1c 92       	st	X, r1
    2714:	13 97       	sbiw	r26, 0x03	; 3
    2716:	80 ef       	ldi	r24, 0xF0	; 240
    2718:	3e c0       	rjmp	.+124    	; 0x2796 <get_ROBOEncoder+0x11a>
    271a:	e2 e1       	ldi	r30, 0x12	; 18
    271c:	fa e2       	ldi	r31, 0x2A	; 42
    271e:	80 81       	ld	r24, Z
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	a0 e0       	ldi	r26, 0x00	; 0
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	78 2f       	mov	r23, r24
    2728:	66 27       	eor	r22, r22
    272a:	55 27       	eor	r21, r21
    272c:	44 27       	eor	r20, r20
    272e:	d8 01       	movw	r26, r16
    2730:	4d 93       	st	X+, r20
    2732:	5d 93       	st	X+, r21
    2734:	6d 93       	st	X+, r22
    2736:	7c 93       	st	X, r23
    2738:	13 97       	sbiw	r26, 0x03	; 3
    273a:	91 81       	ldd	r25, Z+1	; 0x01
    273c:	89 2f       	mov	r24, r25
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	a0 e0       	ldi	r26, 0x00	; 0
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	dc 01       	movw	r26, r24
    2746:	99 27       	eor	r25, r25
    2748:	88 27       	eor	r24, r24
    274a:	6c 01       	movw	r12, r24
    274c:	7d 01       	movw	r14, r26
    274e:	c4 2a       	or	r12, r20
    2750:	d5 2a       	or	r13, r21
    2752:	e6 2a       	or	r14, r22
    2754:	f7 2a       	or	r15, r23
    2756:	d8 01       	movw	r26, r16
    2758:	cd 92       	st	X+, r12
    275a:	dd 92       	st	X+, r13
    275c:	ed 92       	st	X+, r14
    275e:	fc 92       	st	X, r15
    2760:	13 97       	sbiw	r26, 0x03	; 3
    2762:	42 81       	ldd	r20, Z+2	; 0x02
    2764:	50 e0       	ldi	r21, 0x00	; 0
    2766:	60 e0       	ldi	r22, 0x00	; 0
    2768:	70 e0       	ldi	r23, 0x00	; 0
    276a:	76 2f       	mov	r23, r22
    276c:	65 2f       	mov	r22, r21
    276e:	54 2f       	mov	r21, r20
    2770:	44 27       	eor	r20, r20
    2772:	4c 29       	or	r20, r12
    2774:	5d 29       	or	r21, r13
    2776:	6e 29       	or	r22, r14
    2778:	7f 29       	or	r23, r15
    277a:	4d 93       	st	X+, r20
    277c:	5d 93       	st	X+, r21
    277e:	6d 93       	st	X+, r22
    2780:	7c 93       	st	X, r23
    2782:	13 97       	sbiw	r26, 0x03	; 3
    2784:	23 81       	ldd	r18, Z+3	; 0x03
    2786:	42 2b       	or	r20, r18
    2788:	4d 93       	st	X+, r20
    278a:	5d 93       	st	X+, r21
    278c:	6d 93       	st	X+, r22
    278e:	7c 93       	st	X, r23
    2790:	13 97       	sbiw	r26, 0x03	; 3
    2792:	84 81       	ldd	r24, Z+4	; 0x04
    2794:	87 70       	andi	r24, 0x07	; 7
    2796:	27 96       	adiw	r28, 0x07	; 7
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	ff 90       	pop	r15
    27a6:	ef 90       	pop	r14
    27a8:	df 90       	pop	r13
    27aa:	cf 90       	pop	r12
    27ac:	08 95       	ret

000027ae <get_ROBOInt32>:

uint32_t get_ROBOInt32(uint8_t controller, uint8_t command)
{
    27ae:	0f 93       	push	r16
    27b0:	1f 93       	push	r17
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
    27ba:	26 97       	sbiw	r28, 0x06	; 6
    27bc:	cd bf       	out	0x3d, r28	; 61
    27be:	de bf       	out	0x3e, r29	; 62
	uint8_t i, status, tbuf[6];
	uint16_t crcReceived, crcExpected;
	uint32_t value;

	recv1_buf.nbytes = 6;
    27c0:	96 e0       	ldi	r25, 0x06	; 6
    27c2:	90 93 13 2b 	sts	0x2B13, r25	; 0x802b13 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    27c6:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0x103>
	recv1_buf.done = NO;
    27ca:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>

	tbuf[0] = controller;
    27ce:	89 83       	std	Y+1, r24	; 0x01
	tbuf[1] = command;
    27d0:	6a 83       	std	Y+2, r22	; 0x02
	send_USART(1, tbuf, 2);
    27d2:	42 e0       	ldi	r20, 0x02	; 2
    27d4:	be 01       	movw	r22, r28
    27d6:	6f 5f       	subi	r22, 0xFF	; 255
    27d8:	7f 4f       	sbci	r23, 0xFF	; 255
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	0e 94 11 16 	call	0x2c22	; 0x2c22 <send_USART>
	while (recv1_buf.done == NO) {
    27e0:	01 c0       	rjmp	.+2      	; 0x27e4 <get_ROBOInt32+0x36>
		asm("nop");
    27e2:	00 00       	nop
	recv1_buf.done = NO;

	tbuf[0] = controller;
	tbuf[1] = command;
	send_USART(1, tbuf, 2);
	while (recv1_buf.done == NO) {
    27e4:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv1_buf+0x104>
    27e8:	88 23       	and	r24, r24
    27ea:	d9 f3       	breq	.-10     	; 0x27e2 <get_ROBOInt32+0x34>
		asm("nop");
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];
    27ec:	e2 e1       	ldi	r30, 0x12	; 18
    27ee:	fa e2       	ldi	r31, 0x2A	; 42
    27f0:	04 81       	ldd	r16, Z+4	; 0x04
    27f2:	10 e0       	ldi	r17, 0x00	; 0
    27f4:	10 2f       	mov	r17, r16
    27f6:	00 27       	eor	r16, r16
    27f8:	85 81       	ldd	r24, Z+5	; 0x05
    27fa:	08 2b       	or	r16, r24

	for (i = 2; i < 6; i++) {
    27fc:	22 e0       	ldi	r18, 0x02	; 2
    27fe:	0e c0       	rjmp	.+28     	; 0x281c <get_ROBOInt32+0x6e>
		tbuf[i] = recv1_buf.data[i-2];
    2800:	82 2f       	mov	r24, r18
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	fc 01       	movw	r30, r24
    2806:	e0 5f       	subi	r30, 0xF0	; 240
    2808:	f5 4d       	sbci	r31, 0xD5	; 213
    280a:	30 81       	ld	r19, Z
    280c:	e1 e0       	ldi	r30, 0x01	; 1
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	ec 0f       	add	r30, r28
    2812:	fd 1f       	adc	r31, r29
    2814:	e8 0f       	add	r30, r24
    2816:	f9 1f       	adc	r31, r25
    2818:	30 83       	st	Z, r19
		asm("nop");
	}

	crcReceived = (recv1_buf.data[4] << 8) | recv1_buf.data[5];

	for (i = 2; i < 6; i++) {
    281a:	2f 5f       	subi	r18, 0xFF	; 255
    281c:	26 30       	cpi	r18, 0x06	; 6
    281e:	80 f3       	brcs	.-32     	; 0x2800 <get_ROBOInt32+0x52>
		tbuf[i] = recv1_buf.data[i-2];
	}
	crcExpected = crc16(tbuf, 6);
    2820:	66 e0       	ldi	r22, 0x06	; 6
    2822:	70 e0       	ldi	r23, 0x00	; 0
    2824:	ce 01       	movw	r24, r28
    2826:	01 96       	adiw	r24, 0x01	; 1
    2828:	0e 94 19 13 	call	0x2632	; 0x2632 <crc16>

	if (crcReceived != crcExpected) {
    282c:	08 17       	cp	r16, r24
    282e:	19 07       	cpc	r17, r25
    2830:	31 f5       	brne	.+76     	; 0x287e <get_ROBOInt32+0xd0>
		value = 0;
		return(0xF0);
	}

	value =  (uint32_t) recv1_buf.data[0] << 24;
    2832:	e2 e1       	ldi	r30, 0x12	; 18
    2834:	fa e2       	ldi	r31, 0x2A	; 42
    2836:	40 81       	ld	r20, Z
    2838:	50 e0       	ldi	r21, 0x00	; 0
    283a:	60 e0       	ldi	r22, 0x00	; 0
    283c:	70 e0       	ldi	r23, 0x00	; 0
    283e:	74 2f       	mov	r23, r20
    2840:	66 27       	eor	r22, r22
    2842:	55 27       	eor	r21, r21
    2844:	44 27       	eor	r20, r20
	value |= (uint32_t) recv1_buf.data[1] << 16;
    2846:	81 81       	ldd	r24, Z+1	; 0x01
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	a0 e0       	ldi	r26, 0x00	; 0
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	dc 01       	movw	r26, r24
    2850:	99 27       	eor	r25, r25
    2852:	88 27       	eor	r24, r24
    2854:	48 2b       	or	r20, r24
    2856:	59 2b       	or	r21, r25
    2858:	6a 2b       	or	r22, r26
    285a:	7b 2b       	or	r23, r27
	value |= (uint32_t) recv1_buf.data[2] << 8;
    285c:	82 81       	ldd	r24, Z+2	; 0x02
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	a0 e0       	ldi	r26, 0x00	; 0
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	ba 2f       	mov	r27, r26
    2866:	a9 2f       	mov	r26, r25
    2868:	98 2f       	mov	r25, r24
    286a:	88 27       	eor	r24, r24
    286c:	84 2b       	or	r24, r20
    286e:	95 2b       	or	r25, r21
    2870:	a6 2b       	or	r26, r22
    2872:	b7 2b       	or	r27, r23
	value |= (uint32_t) recv1_buf.data[3];
    2874:	23 81       	ldd	r18, Z+3	; 0x03
	return(value);
    2876:	bc 01       	movw	r22, r24
    2878:	cd 01       	movw	r24, r26
    287a:	62 2b       	or	r22, r18
    287c:	04 c0       	rjmp	.+8      	; 0x2886 <get_ROBOInt32+0xd8>
	}
	crcExpected = crc16(tbuf, 6);

	if (crcReceived != crcExpected) {
		value = 0;
		return(0xF0);
    287e:	60 ef       	ldi	r22, 0xF0	; 240
    2880:	70 e0       	ldi	r23, 0x00	; 0
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	90 e0       	ldi	r25, 0x00	; 0
	value |= (uint32_t) recv1_buf.data[1] << 16;
	value |= (uint32_t) recv1_buf.data[2] << 8;
	value |= (uint32_t) recv1_buf.data[3];
	return(value);

}
    2886:	26 96       	adiw	r28, 0x06	; 6
    2888:	cd bf       	out	0x3d, r28	; 61
    288a:	de bf       	out	0x3e, r29	; 62
    288c:	df 91       	pop	r29
    288e:	cf 91       	pop	r28
    2890:	1f 91       	pop	r17
    2892:	0f 91       	pop	r16
    2894:	08 95       	ret

00002896 <ROBOMove>:

uint8_t ROBOMove(uint8_t cstack, uint8_t speed)
{
    2896:	cf 93       	push	r28
    2898:	df 93       	push	r29
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	25 97       	sbiw	r28, 0x05	; 5
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	de bf       	out	0x3e, r29	; 62
	uint8_t controller, command, tbuf[5];
	uint16_t crc;

	recv1_buf.nbytes = 1;
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	80 93 13 2b 	sts	0x2B13, r24	; 0x802b13 <recv1_buf+0x101>
	recv1_buf.nxfrd = 0;
    28aa:	10 92 15 2b 	sts	0x2B15, r1	; 0x802b15 <recv1_buf+0x103>
	recv1_buf.done = NO;
    28ae:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>

	command = 1;
	if ((pcmd[cstack].cobject) == 'a') {
		controller = MOTORAADDR;
	}
	tbuf[0] = controller;
    28b2:	90 e8       	ldi	r25, 0x80	; 128
    28b4:	99 83       	std	Y+1, r25	; 0x01
	tbuf[1] = command;
    28b6:	8a 83       	std	Y+2, r24	; 0x02
	tbuf[2] = speed;
    28b8:	6b 83       	std	Y+3, r22	; 0x03
	crc = crc16(tbuf,3);
    28ba:	63 e0       	ldi	r22, 0x03	; 3
    28bc:	70 e0       	ldi	r23, 0x00	; 0
    28be:	ce 01       	movw	r24, r28
    28c0:	01 96       	adiw	r24, 0x01	; 1
    28c2:	0e 94 19 13 	call	0x2632	; 0x2632 <crc16>
	tbuf[3] = (crc >> 8) & 0xFF;
    28c6:	9c 83       	std	Y+4, r25	; 0x04
	tbuf[4] = crc & 0xFF;
    28c8:	8d 83       	std	Y+5, r24	; 0x05
	send_USART(1, tbuf, 5);
    28ca:	45 e0       	ldi	r20, 0x05	; 5
    28cc:	be 01       	movw	r22, r28
    28ce:	6f 5f       	subi	r22, 0xFF	; 255
    28d0:	7f 4f       	sbci	r23, 0xFF	; 255
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	0e 94 11 16 	call	0x2c22	; 0x2c22 <send_USART>
	for (;;) {
		if (recv1_buf.done == YES) {
    28d8:	80 91 16 2b 	lds	r24, 0x2B16	; 0x802b16 <recv1_buf+0x104>
    28dc:	81 30       	cpi	r24, 0x01	; 1
    28de:	e1 f7       	brne	.-8      	; 0x28d8 <ROBOMove+0x42>
			break;
		}
	}

	if (recv1_buf.data[0] != 0xFF) {
    28e0:	80 91 12 2a 	lds	r24, 0x2A12	; 0x802a12 <recv1_buf>
    28e4:	8f 3f       	cpi	r24, 0xFF	; 255
    28e6:	11 f0       	breq	.+4      	; 0x28ec <ROBOMove+0x56>
		return(ERRORPROMPT);
    28e8:	82 e0       	ldi	r24, 0x02	; 2
    28ea:	01 c0       	rjmp	.+2      	; 0x28ee <ROBOMove+0x58>
	}
	return(GREATERPROMPT);
    28ec:	80 e0       	ldi	r24, 0x00	; 0
}
    28ee:	25 96       	adiw	r28, 0x05	; 5
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	df 91       	pop	r29
    28f6:	cf 91       	pop	r28
    28f8:	08 95       	ret

000028fa <init_RTC>:
			between interrupts. ticks = 30719 generates an interrupt
			every minute. ticks = 511 generates an interrupt every
			second.
----------------------------------------------------------------------*/
void init_RTC(uint16_t ticks)
{
    28fa:	ac 01       	movw	r20, r24

	uint8_t temp;

	// Disable the external oscillator by clearing the enable bit 0
	temp = CLKCTRL.XOSC32KCTRLA;
    28fc:	e0 e6       	ldi	r30, 0x60	; 96
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
    2902:	9e 7f       	andi	r25, 0xFE	; 254
	CPU_CCP = CCP_IOREG_gc;
    2904:	88 ed       	ldi	r24, 0xD8	; 216
    2906:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2908:	94 8f       	std	Z+28, r25	; 0x1c

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    290a:	01 c0       	rjmp	.+2      	; 0x290e <init_RTC+0x14>
		asm("nop");
    290c:	00 00       	nop
	temp &= ~CLKCTRL_ENABLE_bm;		// set bit 0 of CLKCTRL.XOSC32KCTRLA to 0
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	// Wait for status bit (bit 6) in MCLKSTATUS to go to 0 (XOSC32K not running)
	while (CLKCTRL.MCLKSTATUS & CLKCTRL_XOSC32KS_bm) {
    290e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
    2912:	96 fd       	sbrc	r25, 6
    2914:	fb cf       	rjmp	.-10     	; 0x290c <init_RTC+0x12>
		asm("nop");
	}

	// Select the external crystal (as opposed to external clock)
	// by setting the SEL bit on XOSC32KCTRLA (bit 2) to 0
	temp = CLKCTRL.XOSC32KCTRLA;
    2916:	e0 e6       	ldi	r30, 0x60	; 96
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp &= ~CLKCTRL_SEL_bm;
    291c:	9b 7f       	andi	r25, 0xFB	; 251
	CPU_CCP = CCP_IOREG_gc;
    291e:	28 ed       	ldi	r18, 0xD8	; 216
    2920:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    2922:	94 8f       	std	Z+28, r25	; 0x1c

	// Enable the external oscillator by setting the enable bit
	// (bit 0) in CLKCTRL.XOSC32KCTRLA to 1
	temp = CLKCTRL.XOSC32KCTRLA;
    2924:	94 8d       	ldd	r25, Z+28	; 0x1c
	temp |= CLKCTRL_ENABLE_bm;
    2926:	91 60       	ori	r25, 0x01	; 1
	CPU_CCP = CCP_IOREG_gc;
    2928:	24 bf       	out	0x34, r18	; 52
	CLKCTRL.XOSC32KCTRLA = temp;
    292a:	94 8f       	std	Z+28, r25	; 0x1c

	while (RTC.STATUS) {	// Wait for all registers to sync
    292c:	01 c0       	rjmp	.+2      	; 0x2930 <init_RTC+0x36>
		asm("nop");
    292e:	00 00       	nop
	temp = CLKCTRL.XOSC32KCTRLA;
	temp |= CLKCTRL_ENABLE_bm;
	CPU_CCP = CCP_IOREG_gc;
	CLKCTRL.XOSC32KCTRLA = temp;

	while (RTC.STATUS) {	// Wait for all registers to sync
    2930:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
    2934:	91 11       	cpse	r25, r1
    2936:	fb cf       	rjmp	.-10     	; 0x292e <init_RTC+0x34>
		asm("nop");
	}

//	RTC.PER = 30719;	// Set 1 minute period for overflow interrupts 
//	RTC.PER = 511;		// Set 1 sec period for overflow interrupts
	RTC.PER = ticks;
    2938:	e0 e4       	ldi	r30, 0x40	; 64
    293a:	f1 e0       	ldi	r31, 0x01	; 1
    293c:	42 87       	std	Z+10, r20	; 0x0a
    293e:	53 87       	std	Z+11, r21	; 0x0b

	// Select the external crystal oscillator in RTC.CLKSEL register
	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc;
    2940:	82 e0       	ldi	r24, 0x02	; 2
    2942:	87 83       	std	Z+7, r24	; 0x07

	// Enable running in debug mode by setting bit 0 in RTC.CLKSEL to 1
	RTC.DBGCTRL |= RTC_DBGRUN_bm;
    2944:	85 81       	ldd	r24, Z+5	; 0x05
    2946:	81 60       	ori	r24, 0x01	; 1
    2948:	85 83       	std	Z+5, r24	; 0x05

	// Enable running in standby mode by setting bit 7 in RTC.CTRLA to 1
	// & set the prescaler to DIV64 (512 Hz)
	// & set the RTC enable bit
	RTC.CTRLA = RTC_PRESCALER_DIV64_gc | RTC_RUNSTDBY_bm | RTC_RTCEN_bm;
    294a:	81 eb       	ldi	r24, 0xB1	; 177
    294c:	80 83       	st	Z, r24

	RTC.INTCTRL |= RTC_OVF_bm;	// Enable overflow interrupt
    294e:	82 81       	ldd	r24, Z+2	; 0x02
    2950:	81 60       	ori	r24, 0x01	; 1
    2952:	82 83       	std	Z+2, r24	; 0x02
    2954:	08 95       	ret

00002956 <__vector_3>:
/*---------------------------------------------------------------------
Interrupt routine for RTC
	Every tick of the RTC executes here
----------------------------------------------------------------------*/
ISR(RTC_CNT_vect)
{
    2956:	1f 92       	push	r1
    2958:	0f 92       	push	r0
    295a:	0f b6       	in	r0, 0x3f	; 63
    295c:	0f 92       	push	r0
    295e:	11 24       	eor	r1, r1
    2960:	2f 93       	push	r18
    2962:	3f 93       	push	r19
    2964:	4f 93       	push	r20
    2966:	5f 93       	push	r21
    2968:	6f 93       	push	r22
    296a:	7f 93       	push	r23
    296c:	8f 93       	push	r24
    296e:	9f 93       	push	r25
    2970:	af 93       	push	r26
    2972:	bf 93       	push	r27
    2974:	ef 93       	push	r30
    2976:	ff 93       	push	r31

	RTC.INTFLAGS = RTC_OVF_bm;		// Clear interrupt flag
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f4143>

	if (timerOLED) {
    297e:	80 91 0d 2a 	lds	r24, 0x2A0D	; 0x802a0d <timerOLED>
    2982:	90 91 0e 2a 	lds	r25, 0x2A0E	; 0x802a0e <timerOLED+0x1>
    2986:	00 97       	sbiw	r24, 0x00	; 0
    2988:	b9 f0       	breq	.+46     	; 0x29b8 <__vector_3+0x62>
		if (timerOLED > timeoutOLED) {	// Display timeout
    298a:	20 91 0f 2a 	lds	r18, 0x2A0F	; 0x802a0f <timeoutOLED>
    298e:	30 91 10 2a 	lds	r19, 0x2A10	; 0x802a10 <timeoutOLED+0x1>
    2992:	28 17       	cp	r18, r24
    2994:	39 07       	cpc	r19, r25
    2996:	58 f4       	brcc	.+22     	; 0x29ae <__vector_3+0x58>
			clear_OLED(0);
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <clear_OLED>
			clear_OLED(1);
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <clear_OLED>
			timerOLED = 0;
    29a4:	10 92 0d 2a 	sts	0x2A0D, r1	; 0x802a0d <timerOLED>
    29a8:	10 92 0e 2a 	sts	0x2A0E, r1	; 0x802a0e <timerOLED+0x1>
    29ac:	05 c0       	rjmp	.+10     	; 0x29b8 <__vector_3+0x62>
		} else {
			timerOLED++;
    29ae:	01 96       	adiw	r24, 0x01	; 1
    29b0:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <timerOLED>
    29b4:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <timerOLED+0x1>
		}
	}
	toggle_LED;						// Defined in led.c
    29b8:	80 e2       	ldi	r24, 0x20	; 32
    29ba:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>

}
    29be:	ff 91       	pop	r31
    29c0:	ef 91       	pop	r30
    29c2:	bf 91       	pop	r27
    29c4:	af 91       	pop	r26
    29c6:	9f 91       	pop	r25
    29c8:	8f 91       	pop	r24
    29ca:	7f 91       	pop	r23
    29cc:	6f 91       	pop	r22
    29ce:	5f 91       	pop	r21
    29d0:	4f 91       	pop	r20
    29d2:	3f 91       	pop	r19
    29d4:	2f 91       	pop	r18
    29d6:	0f 90       	pop	r0
    29d8:	0f be       	out	0x3f, r0	; 63
    29da:	0f 90       	pop	r0
    29dc:	1f 90       	pop	r1
    29de:	18 95       	reti

000029e0 <set>:
	Returns:
		GREATERPROMPT on success
		ERRORPROMPT if an invalid object was requested.
------------------------------------------------------------------------------*/
uint8_t set(uint8_t cstack)
{
    29e0:	cf 93       	push	r28
    29e2:	df 93       	push	r29

	char object;

	object = pcmd[cstack].cobject;
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	24 e3       	ldi	r18, 0x34	; 52
    29e8:	28 9f       	mul	r18, r24
    29ea:	f0 01       	movw	r30, r0
    29ec:	29 9f       	mul	r18, r25
    29ee:	f0 0d       	add	r31, r0
    29f0:	11 24       	eor	r1, r1
    29f2:	eb 5f       	subi	r30, 0xFB	; 251
    29f4:	f7 4d       	sbci	r31, 0xD7	; 215
    29f6:	21 81       	ldd	r18, Z+1	; 0x01

	switch(object) {
    29f8:	24 37       	cpi	r18, 0x74	; 116
    29fa:	e9 f4       	brne	.+58     	; 0x2a36 <set+0x56>
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
    29fc:	24 e3       	ldi	r18, 0x34	; 52
    29fe:	28 9f       	mul	r18, r24
    2a00:	e0 01       	movw	r28, r0
    2a02:	29 9f       	mul	r18, r25
    2a04:	d0 0d       	add	r29, r0
    2a06:	11 24       	eor	r1, r1
    2a08:	c9 5f       	subi	r28, 0xF9	; 249
    2a0a:	d7 4d       	sbci	r29, 0xD7	; 215
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	01 90       	ld	r0, Z+
    2a10:	00 20       	and	r0, r0
    2a12:	e9 f7       	brne	.-6      	; 0x2a0e <set+0x2e>
    2a14:	31 97       	sbiw	r30, 0x01	; 1
    2a16:	ec 1b       	sub	r30, r28
    2a18:	fd 0b       	sbc	r31, r29
    2a1a:	73 97       	sbiw	r30, 0x13	; 19
    2a1c:	71 f4       	brne	.+28     	; 0x2a3a <set+0x5a>
				return(ERRORPROMPT);
			}
			put_time(pcmd[cstack].cvalue);
    2a1e:	ce 01       	movw	r24, r28
    2a20:	0e 94 dd 05 	call	0xbba	; 0xbba <put_time>
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
    2a24:	24 e1       	ldi	r18, 0x14	; 20
    2a26:	ae 01       	movw	r20, r28
    2a28:	60 e0       	ldi	r22, 0x00	; 0
    2a2a:	70 e0       	ldi	r23, 0x00	; 0
    2a2c:	80 e5       	ldi	r24, 0x50	; 80
    2a2e:	0e 94 81 06 	call	0xd02	; 0xd02 <write_FRAM>
			break;

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	03 c0       	rjmp	.+6      	; 0x2a3c <set+0x5c>
			put_time(pcmd[cstack].cvalue);
			write_FRAM(FRAMADDR, SETTIMEADDR, (uint8_t*) pcmd[cstack].cvalue, 20);
			break;

		default:
			return(ERRORPROMPT);
    2a36:	82 e0       	ldi	r24, 0x02	; 2
    2a38:	01 c0       	rjmp	.+2      	; 0x2a3c <set+0x5c>
	object = pcmd[cstack].cobject;

	switch(object) {
		case 't':
			if (strlen(pcmd[cstack].cvalue) != 19) {
				return(ERRORPROMPT);
    2a3a:	82 e0       	ldi	r24, 0x02	; 2

		default:
			return(ERRORPROMPT);
	}
	return(GREATERPROMPT);
}
    2a3c:	df 91       	pop	r29
    2a3e:	cf 91       	pop	r28
    2a40:	08 95       	ret

00002a42 <init_SPECID>:
	pullup. Must be called AFTER init_PORTS().
------------------------------------------------------------------------------*/
void init_SPECID(void)
{

	PORTF.PIN2CTRL &= ~PORT_PULLUPEN_bm;	// Remove pullup
    2a42:	e0 ea       	ldi	r30, 0xA0	; 160
    2a44:	f4 e0       	ldi	r31, 0x04	; 4
    2a46:	82 89       	ldd	r24, Z+18	; 0x12
    2a48:	87 7f       	andi	r24, 0xF7	; 247
    2a4a:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.DIRCLR = PIN2_bm;					// Set as input
    2a4c:	84 e0       	ldi	r24, 0x04	; 4
    2a4e:	82 83       	std	Z+2, r24	; 0x02
    2a50:	08 95       	ret

00002a52 <get_temperature>:
float get_temperature(uint8_t sensor)
{

	float temperature;

	switch (sensor) {
    2a52:	83 30       	cpi	r24, 0x03	; 3
    2a54:	18 f0       	brcs	.+6      	; 0x2a5c <get_temperature+0xa>
    2a56:	83 30       	cpi	r24, 0x03	; 3
    2a58:	21 f0       	breq	.+8      	; 0x2a62 <get_temperature+0x10>
    2a5a:	06 c0       	rjmp	.+12     	; 0x2a68 <get_temperature+0x16>
		case 0:
		case 1:
		case 2:
			temperature = read_AD590(sensor);
    2a5c:	0e 94 48 01 	call	0x290	; 0x290 <read_AD590>
			break;
    2a60:	08 95       	ret
		case 3:
			temperature = read_MCP9808();
    2a62:	0e 94 28 08 	call	0x1050	; 0x1050 <read_MCP9808>
			break;
    2a66:	08 95       	ret
		default:
			temperature = -999.9;
    2a68:	6a e9       	ldi	r22, 0x9A	; 154
    2a6a:	79 ef       	ldi	r23, 0xF9	; 249
    2a6c:	89 e7       	ldi	r24, 0x79	; 121
    2a6e:	94 ec       	ldi	r25, 0xC4	; 196
			break;
	}

	return(temperature);

}
    2a70:	08 95       	ret

00002a72 <testroutine>:
#include "globals.h"
#include "roboclaw.h"

void testroutine(void)
{
    2a72:	08 95       	ret

00002a74 <__vector_12>:
	TCB0.CTRLA = 0;

}

ISR(TCB0_INT_vect)
{
    2a74:	1f 92       	push	r1
    2a76:	0f 92       	push	r0
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	0f 92       	push	r0
    2a7c:	11 24       	eor	r1, r1
    2a7e:	8f 93       	push	r24
    2a80:	9f 93       	push	r25

	TCB0_INTFLAGS = TCB_CAPT_bm;	// Clear interrupt flag
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__TEXT_REGION_LENGTH__+0x7f4a86>
	ticks++;
    2a88:	80 91 03 28 	lds	r24, 0x2803	; 0x802803 <ticks>
    2a8c:	90 91 04 28 	lds	r25, 0x2804	; 0x802804 <ticks+0x1>
    2a90:	01 96       	adiw	r24, 0x01	; 1
    2a92:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <ticks>
    2a96:	90 93 04 28 	sts	0x2804, r25	; 0x802804 <ticks+0x1>
//	toggle_BEEPER;

    2a9a:	9f 91       	pop	r25
    2a9c:	8f 91       	pop	r24
    2a9e:	0f 90       	pop	r0
    2aa0:	0f be       	out	0x3f, r0	; 63
    2aa2:	0f 90       	pop	r0
    2aa4:	1f 90       	pop	r1
    2aa6:	18 95       	reti

00002aa8 <init_TWI>:
	4.	Set bus state to IDLE by writing 0x01 to BUSSTATE in TWIn.MSTATUS.
------------------------------------------------------------------------------*/
void init_TWI(void)
{

	TWI0.MBAUD = TWIBAUD;
    2aa8:	e0 ea       	ldi	r30, 0xA0	; 160
    2aaa:	f8 e0       	ldi	r31, 0x08	; 8
    2aac:	8b e0       	ldi	r24, 0x0B	; 11
    2aae:	86 83       	std	Z+6, r24	; 0x06
	TWI0.MCTRLA |= TWI_ENABLE_bm;			// Enable TWI
    2ab0:	83 81       	ldd	r24, Z+3	; 0x03
    2ab2:	81 60       	ori	r24, 0x01	; 1
    2ab4:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;	// Set bus state to IDLE
    2ab6:	85 81       	ldd	r24, Z+5	; 0x05
    2ab8:	81 60       	ori	r24, 0x01	; 1
    2aba:	85 83       	std	Z+5, r24	; 0x05
    2abc:	08 95       	ret

00002abe <read_TWI>:
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    2abe:	01 c0       	rjmp	.+2      	; 0x2ac2 <read_TWI+0x4>
		asm("nop");								// Should set timer here
    2ac0:	00 00       	nop
uint8_t read_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait xfer to complete
    2ac2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2ac6:	88 23       	and	r24, r24
    2ac8:	dc f7       	brge	.-10     	; 0x2ac0 <read_TWI+0x2>
		asm("nop");								// Should set timer here
	}

	TWI0.MCTRLB &= ~(1<<TWI_ACKACT_bp);			// Send ACK, next read
    2aca:	e0 ea       	ldi	r30, 0xA0	; 160
    2acc:	f8 e0       	ldi	r31, 0x08	; 8
    2ace:	84 81       	ldd	r24, Z+4	; 0x04
    2ad0:	8b 7f       	andi	r24, 0xFB	; 251
    2ad2:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    2ad4:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB |= TWI_MCMD_RECVTRANS_gc;		// Send ACK after read
    2ad6:	94 81       	ldd	r25, Z+4	; 0x04
    2ad8:	92 60       	ori	r25, 0x02	; 2
    2ada:	94 83       	std	Z+4, r25	; 0x04

	return(data);
}
    2adc:	08 95       	ret

00002ade <readlast_TWI>:
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    2ade:	01 c0       	rjmp	.+2      	; 0x2ae2 <readlast_TWI+0x4>
		asm("nop");
    2ae0:	00 00       	nop
uint8_t readlast_TWI(void)
{

	uint8_t data;

	while (!(TWI0.MSTATUS & TWI_RIF_bm)) {		// Wait for xfer to complete
    2ae2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2ae6:	88 23       	and	r24, r24
    2ae8:	dc f7       	brge	.-10     	; 0x2ae0 <readlast_TWI+0x2>
		asm("nop");
	}

	TWI0.MCTRLB |= TWI_ACKACT_NACK_gc;
    2aea:	e0 ea       	ldi	r30, 0xA0	; 160
    2aec:	f8 e0       	ldi	r31, 0x08	; 8
    2aee:	84 81       	ldd	r24, Z+4	; 0x04
    2af0:	84 60       	ori	r24, 0x04	; 4
    2af2:	84 83       	std	Z+4, r24	; 0x04
	data = TWI0.MDATA;
    2af4:	80 85       	ldd	r24, Z+8	; 0x08

	return(data);

}
    2af6:	08 95       	ret

00002af8 <start_TWI>:
		of TWI0.MADDR, TWI0.MDATA, or the CMD bits in TWI-.MCTRLB.
------------------------------------------------------------------------------*/
uint8_t start_TWI(uint8_t addr, uint8_t rw)
{

	if (rw == TWIREAD) {
    2af8:	61 30       	cpi	r22, 0x01	; 1
    2afa:	39 f4       	brne	.+14     	; 0x2b0a <start_TWI+0x12>
//		addr = ((addr << 1) | 0x01);
		TWI0.MADDR = ((addr << 1) | 0x01);
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	81 60       	ori	r24, 0x01	; 1
    2b04:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    2b08:	05 c0       	rjmp	.+10     	; 0x2b14 <start_TWI+0x1c>
	} else {
//		addr = ((addr << 1) & ~0x01);
//		addr = (addr << 1);
		TWI0.MADDR = (addr << 1);
    2b0a:	88 0f       	add	r24, r24
    2b0c:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    2b10:	01 c0       	rjmp	.+2      	; 0x2b14 <start_TWI+0x1c>
	}

//	TWI0.MADDR = addr;							// Start condition

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
		asm("nop");								// Wait for addr transmission
    2b12:	00 00       	nop
		TWI0.MADDR = (addr << 1);
	}

//	TWI0.MADDR = addr;							// Start condition

	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
    2b14:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2b18:	80 7c       	andi	r24, 0xC0	; 192
    2b1a:	d9 f3       	breq	.-10     	; 0x2b12 <start_TWI+0x1a>
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
    2b1c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2b20:	82 fd       	sbrc	r24, 2
    2b22:	0c c0       	rjmp	.+24     	; 0x2b3c <start_TWI+0x44>
		return(TWIBUSERR);
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
    2b24:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2b28:	83 fd       	sbrc	r24, 3
    2b2a:	0a c0       	rjmp	.+20     	; 0x2b40 <start_TWI+0x48>
		return(TWIARBLOST);
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
    2b2c:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2b30:	89 2f       	mov	r24, r25
    2b32:	80 71       	andi	r24, 0x10	; 16
    2b34:	94 ff       	sbrs	r25, 4
    2b36:	05 c0       	rjmp	.+10     	; 0x2b42 <start_TWI+0x4a>
		return(TWINODEVICE);
    2b38:	84 e0       	ldi	r24, 0x04	; 4
    2b3a:	08 95       	ret
	while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm))) {
		asm("nop");								// Wait for addr transmission
	}

	if ((TWI0.MSTATUS & TWI_BUSERR_bm)) {		// Bus error
		return(TWIBUSERR);
    2b3c:	82 e0       	ldi	r24, 0x02	; 2
    2b3e:	08 95       	ret
	} else if (TWI0.MSTATUS & TWI_ARBLOST_bm) {	// Arbitration lost
		return(TWIARBLOST);
    2b40:	83 e0       	ldi	r24, 0x03	; 3
	} else if (TWI0.MSTATUS & TWI_RXACK_bm) {	// No device responded
		return(TWINODEVICE);
	} else {									// OK
		return(0);
	}
}
    2b42:	08 95       	ret

00002b44 <stop_TWI>:
	is a strobe action.
------------------------------------------------------------------------------*/
void stop_TWI(void)
{

	TWI0.MCTRLB = (TWI_ACKACT_bm | TWI_MCMD_STOP_gc);	// NACK and STOP
    2b44:	87 e0       	ldi	r24, 0x07	; 7
    2b46:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7f48a4>
    2b4a:	08 95       	ret

00002b4c <write_TWI>:
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    2b4c:	01 c0       	rjmp	.+2      	; 0x2b50 <write_TWI+0x4>
		asm("nop");
    2b4e:	00 00       	nop
	Returns 0 on success.
------------------------------------------------------------------------------*/
uint8_t write_TWI(uint8_t data)
{

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {	// Wait for previous writes
    2b50:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2b54:	96 ff       	sbrs	r25, 6
    2b56:	fb cf       	rjmp	.-10     	; 0x2b4e <write_TWI+0x2>
		asm("nop");
	}

	TWI0.MDATA = data;
    2b58:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    2b5c:	01 c0       	rjmp	.+2      	; 0x2b60 <write_TWI+0x14>
		asm("nop");
    2b5e:	00 00       	nop
		asm("nop");
	}

	TWI0.MDATA = data;

	while (!(TWI0.MSTATUS & TWI_WIF_bm)) {
    2b60:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2b64:	86 ff       	sbrs	r24, 6
    2b66:	fb cf       	rjmp	.-10     	; 0x2b5e <write_TWI+0x12>
		asm("nop");
	}

	if (TWI0.MSTATUS & TWI_RXACK_bm) {		// If device did not ACK
    2b68:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    2b6c:	89 2f       	mov	r24, r25
    2b6e:	80 71       	andi	r24, 0x10	; 16
    2b70:	94 fd       	sbrc	r25, 4
		return(TWINODEVICE);
    2b72:	84 e0       	ldi	r24, 0x04	; 4
	} else {
		return(0);
	}

}
    2b74:	08 95       	ret

00002b76 <init_USART>:
------------------------------------------------------------------------------*/
void init_USART(void)
{

	// USART0 PA0 is TxD, PA1 is RxD, Default pin position
	PORTA.OUTSET = PIN0_bm;
    2b76:	e0 e0       	ldi	r30, 0x00	; 0
    2b78:	f4 e0       	ldi	r31, 0x04	; 4
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	85 83       	std	Z+5, r24	; 0x05
	PORTA.DIRSET = PIN0_bm;
    2b7e:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    2b80:	e0 e0       	ldi	r30, 0x00	; 0
    2b82:	f8 e0       	ldi	r31, 0x08	; 8
    2b84:	2d e6       	ldi	r18, 0x6D	; 109
    2b86:	35 e0       	ldi	r19, 0x05	; 5
    2b88:	20 87       	std	Z+8, r18	; 0x08
    2b8a:	31 87       	std	Z+9, r19	; 0x09
	USART0.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    2b8c:	95 81       	ldd	r25, Z+5	; 0x05
    2b8e:	90 68       	ori	r25, 0x80	; 128
    2b90:	95 83       	std	Z+5, r25	; 0x05
	USART0.CTRLB |= USART_TXEN_bm;		// Enable USART transmitter
    2b92:	96 81       	ldd	r25, Z+6	; 0x06
    2b94:	90 64       	ori	r25, 0x40	; 64
    2b96:	96 83       	std	Z+6, r25	; 0x06
	USART0.CTRLB |= USART_RXEN_bm;		// Enable USART Receiver
    2b98:	96 81       	ldd	r25, Z+6	; 0x06
    2b9a:	90 68       	ori	r25, 0x80	; 128
    2b9c:	96 83       	std	Z+6, r25	; 0x06
	send0_buf.head = 0;
    2b9e:	10 92 1b 2d 	sts	0x2D1B, r1	; 0x802d1b <send0_buf+0xff>
	send0_buf.tail = 0;
    2ba2:	10 92 1c 2d 	sts	0x2D1C, r1	; 0x802d1c <send0_buf+0x100>
	send0_buf.done = YES;
    2ba6:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0x104>
	recv0_buf.head = 0;
    2baa:	10 92 16 2c 	sts	0x2C16, r1	; 0x802c16 <recv0_buf+0xff>
	recv0_buf.tail = 0;
    2bae:	10 92 17 2c 	sts	0x2C17, r1	; 0x802c17 <recv0_buf+0x100>
	recv0_buf.data[0] = '\0';
    2bb2:	10 92 17 2b 	sts	0x2B17, r1	; 0x802b17 <recv0_buf>
	recv0_buf.length = 0;
    2bb6:	10 92 19 2c 	sts	0x2C19, r1	; 0x802c19 <recv0_buf+0x102>
	recv0_buf.done = NO;
    2bba:	10 92 1b 2c 	sts	0x2C1B, r1	; 0x802c1b <recv0_buf+0x104>

	// USART1 PC0 is TxD, PC1 is RxD
	PORTC.OUTSET = PIN0_bm;
    2bbe:	e0 e4       	ldi	r30, 0x40	; 64
    2bc0:	f4 e0       	ldi	r31, 0x04	; 4
    2bc2:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = PIN0_bm;
    2bc4:	81 83       	std	Z+1, r24	; 0x01
	USART1.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    2bc6:	e0 e2       	ldi	r30, 0x20	; 32
    2bc8:	f8 e0       	ldi	r31, 0x08	; 8
    2bca:	20 87       	std	Z+8, r18	; 0x08
    2bcc:	31 87       	std	Z+9, r19	; 0x09
	USART1.CTRLA |= USART_RXCIE_bm;		// Enable receive complete interrupt
    2bce:	95 81       	ldd	r25, Z+5	; 0x05
    2bd0:	90 68       	ori	r25, 0x80	; 128
    2bd2:	95 83       	std	Z+5, r25	; 0x05
	USART1.CTRLB |= USART_TXEN_bm;
    2bd4:	96 81       	ldd	r25, Z+6	; 0x06
    2bd6:	90 64       	ori	r25, 0x40	; 64
    2bd8:	96 83       	std	Z+6, r25	; 0x06
	USART1.CTRLB |= USART_RXEN_bm;
    2bda:	96 81       	ldd	r25, Z+6	; 0x06
    2bdc:	90 68       	ori	r25, 0x80	; 128
    2bde:	96 83       	std	Z+6, r25	; 0x06
	send1_buf.head = 0;
    2be0:	10 92 2a 30 	sts	0x302A, r1	; 0x80302a <send1_buf+0xff>
	send1_buf.tail = 0;
    2be4:	10 92 2b 30 	sts	0x302B, r1	; 0x80302b <send1_buf+0x100>
	send1_buf.done = YES;
    2be8:	80 93 2f 30 	sts	0x302F, r24	; 0x80302f <send1_buf+0x104>
	recv1_buf.head = 0;
    2bec:	10 92 11 2b 	sts	0x2B11, r1	; 0x802b11 <recv1_buf+0xff>
	recv1_buf.tail = 0;
    2bf0:	10 92 12 2b 	sts	0x2B12, r1	; 0x802b12 <recv1_buf+0x100>
	recv1_buf.data[0] = '\0';
    2bf4:	10 92 12 2a 	sts	0x2A12, r1	; 0x802a12 <recv1_buf>
	recv1_buf.done = NO;
    2bf8:	10 92 16 2b 	sts	0x2B16, r1	; 0x802b16 <recv1_buf+0x104>

	// USART3 PB0 is TxD, PB1 is RxD
	PORTB.OUTSET = PIN0_bm;
    2bfc:	e0 e2       	ldi	r30, 0x20	; 32
    2bfe:	f4 e0       	ldi	r31, 0x04	; 4
    2c00:	85 83       	std	Z+5, r24	; 0x05
	PORTB.DIRSET = PIN0_bm;
    2c02:	81 83       	std	Z+1, r24	; 0x01
	USART3.BAUD = (uint16_t) USART_BAUD_RATE(9600);
    2c04:	e0 e6       	ldi	r30, 0x60	; 96
    2c06:	f8 e0       	ldi	r31, 0x08	; 8
    2c08:	20 87       	std	Z+8, r18	; 0x08
    2c0a:	31 87       	std	Z+9, r19	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;
    2c0c:	96 81       	ldd	r25, Z+6	; 0x06
    2c0e:	90 64       	ori	r25, 0x40	; 64
    2c10:	96 83       	std	Z+6, r25	; 0x06
	USART3.CTRLB |= USART_RXEN_bm;
    2c12:	96 81       	ldd	r25, Z+6	; 0x06
    2c14:	90 68       	ori	r25, 0x80	; 128
    2c16:	96 83       	std	Z+6, r25	; 0x06
	send3_buf.done = YES;
    2c18:	80 93 2a 2f 	sts	0x2F2A, r24	; 0x802f2a <send3_buf+0x104>
	recv3_buf.done = NO;
    2c1c:	10 92 25 2e 	sts	0x2E25, r1	; 0x802e25 <recv3_buf+0x104>
    2c20:	08 95       	ret

00002c22 <send_USART>:
		port - The USARTn port (0, 1, or 3)
		data - Contains the data to send
		nbytes - Number of bytes to send
------------------------------------------------------------------------------*/
void send_USART(uint8_t port, uint8_t *data, uint8_t nbytes)
{
    2c22:	0f 93       	push	r16
    2c24:	1f 93       	push	r17
    2c26:	cf 93       	push	r28
    2c28:	df 93       	push	r29
    2c2a:	eb 01       	movw	r28, r22
    2c2c:	14 2f       	mov	r17, r20

	uint8_t i;
	uint16_t crc;

	switch (port) {
    2c2e:	81 30       	cpi	r24, 0x01	; 1
    2c30:	01 f1       	breq	.+64     	; 0x2c72 <send_USART+0x50>
    2c32:	b0 f0       	brcs	.+44     	; 0x2c60 <send_USART+0x3e>
    2c34:	83 30       	cpi	r24, 0x03	; 3
    2c36:	09 f4       	brne	.+2      	; 0x2c3a <send_USART+0x18>
    2c38:	6d c0       	rjmp	.+218    	; 0x2d14 <send_USART+0xf2>
    2c3a:	74 c0       	rjmp	.+232    	; 0x2d24 <send_USART+0x102>
		case 0:
			for (i = 0; i < nbytes; i++) {
				send0_buf.data[send0_buf.head] = *data++;
    2c3c:	eb e1       	ldi	r30, 0x1B	; 27
    2c3e:	fd e2       	ldi	r31, 0x2D	; 45
    2c40:	80 81       	ld	r24, Z
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	38 81       	ld	r19, Y
    2c46:	dc 01       	movw	r26, r24
    2c48:	a4 5e       	subi	r26, 0xE4	; 228
    2c4a:	b3 4d       	sbci	r27, 0xD3	; 211
    2c4c:	3c 93       	st	X, r19
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
    2c4e:	01 96       	adiw	r24, 0x01	; 1
    2c50:	6f ef       	ldi	r22, 0xFF	; 255
    2c52:	70 e0       	ldi	r23, 0x00	; 0
    2c54:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divmodhi4>
    2c58:	80 83       	st	Z, r24
	uint8_t i;
	uint16_t crc;

	switch (port) {
		case 0:
			for (i = 0; i < nbytes; i++) {
    2c5a:	2f 5f       	subi	r18, 0xFF	; 255
				send0_buf.data[send0_buf.head] = *data++;
    2c5c:	21 96       	adiw	r28, 0x01	; 1
    2c5e:	01 c0       	rjmp	.+2      	; 0x2c62 <send_USART+0x40>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    2c60:	20 e0       	ldi	r18, 0x00	; 0
		case 0:
			for (i = 0; i < nbytes; i++) {
    2c62:	21 17       	cp	r18, r17
    2c64:	58 f3       	brcs	.-42     	; 0x2c3c <send_USART+0x1a>
				send0_buf.data[send0_buf.head] = *data++;
				send0_buf.head = (send0_buf.head + 1) % BUFSIZE;
			}
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    2c66:	e0 e0       	ldi	r30, 0x00	; 0
    2c68:	f8 e0       	ldi	r31, 0x08	; 8
    2c6a:	85 81       	ldd	r24, Z+5	; 0x05
    2c6c:	80 62       	ori	r24, 0x20	; 32
    2c6e:	85 83       	std	Z+5, r24	; 0x05
			break;
    2c70:	59 c0       	rjmp	.+178    	; 0x2d24 <send_USART+0x102>

		case 1:
			crc = crc16(data, nbytes);
    2c72:	64 2f       	mov	r22, r20
    2c74:	70 e0       	ldi	r23, 0x00	; 0
    2c76:	ce 01       	movw	r24, r28
    2c78:	0e 94 19 13 	call	0x2632	; 0x2632 <crc16>
    2c7c:	48 2f       	mov	r20, r24
    2c7e:	09 2f       	mov	r16, r25
			for (i = 0; i < nbytes; i++) {
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	11 c0       	rjmp	.+34     	; 0x2ca6 <send_USART+0x84>
				send1_buf.data[send1_buf.head] = *data++;
    2c84:	ea e2       	ldi	r30, 0x2A	; 42
    2c86:	f0 e3       	ldi	r31, 0x30	; 48
    2c88:	80 81       	ld	r24, Z
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	38 81       	ld	r19, Y
    2c8e:	dc 01       	movw	r26, r24
    2c90:	a5 5d       	subi	r26, 0xD5	; 213
    2c92:	b0 4d       	sbci	r27, 0xD0	; 208
    2c94:	3c 93       	st	X, r19
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    2c96:	01 96       	adiw	r24, 0x01	; 1
    2c98:	6f ef       	ldi	r22, 0xFF	; 255
    2c9a:	70 e0       	ldi	r23, 0x00	; 0
    2c9c:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divmodhi4>
    2ca0:	80 83       	st	Z, r24
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    2ca2:	2f 5f       	subi	r18, 0xFF	; 255
				send1_buf.data[send1_buf.head] = *data++;
    2ca4:	21 96       	adiw	r28, 0x01	; 1
			USART0.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 1:
			crc = crc16(data, nbytes);
			for (i = 0; i < nbytes; i++) {
    2ca6:	21 17       	cp	r18, r17
    2ca8:	68 f3       	brcs	.-38     	; 0x2c84 <send_USART+0x62>
				send1_buf.data[send1_buf.head] = *data++;
				send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
			}
			send1_buf.data[send1_buf.head] = (crc >> 8);
    2caa:	ea e2       	ldi	r30, 0x2A	; 42
    2cac:	f0 e3       	ldi	r31, 0x30	; 48
    2cae:	80 81       	ld	r24, Z
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	a5 5d       	subi	r26, 0xD5	; 213
    2cb6:	b0 4d       	sbci	r27, 0xD0	; 208
    2cb8:	0c 93       	st	X, r16
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    2cba:	01 96       	adiw	r24, 0x01	; 1
    2cbc:	2f ef       	ldi	r18, 0xFF	; 255
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	b9 01       	movw	r22, r18
    2cc2:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divmodhi4>
			send1_buf.data[send1_buf.head] = (crc & 0xFF);
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	dc 01       	movw	r26, r24
    2cca:	a5 5d       	subi	r26, 0xD5	; 213
    2ccc:	b0 4d       	sbci	r27, 0xD0	; 208
    2cce:	4c 93       	st	X, r20
			send1_buf.head = (send1_buf.head + 1) % BUFSIZE;
    2cd0:	01 96       	adiw	r24, 0x01	; 1
    2cd2:	b9 01       	movw	r22, r18
    2cd4:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divmodhi4>
    2cd8:	80 83       	st	Z, r24
			send1_buf.nbytes = nbytes + 2;
    2cda:	1e 5f       	subi	r17, 0xFE	; 254
    2cdc:	10 93 2c 30 	sts	0x302C, r17	; 0x80302c <send1_buf+0x101>
			send1_buf.nxfrd = 0;
    2ce0:	10 92 2e 30 	sts	0x302E, r1	; 0x80302e <send1_buf+0x103>
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    2ce4:	e0 e2       	ldi	r30, 0x20	; 32
    2ce6:	f8 e0       	ldi	r31, 0x08	; 8
    2ce8:	85 81       	ldd	r24, Z+5	; 0x05
    2cea:	80 62       	ori	r24, 0x20	; 32
    2cec:	85 83       	std	Z+5, r24	; 0x05
			break;
    2cee:	1a c0       	rjmp	.+52     	; 0x2d24 <send_USART+0x102>

		case 3:
			for (i = 0; i < nbytes; i++) {
				send3_buf.data[send3_buf.head] = *data++;
    2cf0:	e5 e2       	ldi	r30, 0x25	; 37
    2cf2:	ff e2       	ldi	r31, 0x2F	; 47
    2cf4:	80 81       	ld	r24, Z
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	38 81       	ld	r19, Y
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	aa 5d       	subi	r26, 0xDA	; 218
    2cfe:	b1 4d       	sbci	r27, 0xD1	; 209
    2d00:	3c 93       	st	X, r19
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
    2d02:	01 96       	adiw	r24, 0x01	; 1
    2d04:	6f ef       	ldi	r22, 0xFF	; 255
    2d06:	70 e0       	ldi	r23, 0x00	; 0
    2d08:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divmodhi4>
    2d0c:	80 83       	st	Z, r24
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    2d0e:	2f 5f       	subi	r18, 0xFF	; 255
				send3_buf.data[send3_buf.head] = *data++;
    2d10:	21 96       	adiw	r28, 0x01	; 1
    2d12:	01 c0       	rjmp	.+2      	; 0x2d16 <send_USART+0xf4>
{

	uint8_t i;
	uint16_t crc;

	switch (port) {
    2d14:	20 e0       	ldi	r18, 0x00	; 0
			send1_buf.nxfrd = 0;
			USART1.CTRLA |= USART_DREIE_bm;		// Enable interrupts
			break;

		case 3:
			for (i = 0; i < nbytes; i++) {
    2d16:	21 17       	cp	r18, r17
    2d18:	58 f3       	brcs	.-42     	; 0x2cf0 <send_USART+0xce>
				send3_buf.data[send3_buf.head] = *data++;
				send3_buf.head = (send3_buf.head + 1) % BUFSIZE;
			}
			USART3.CTRLA |= USART_DREIE_bm;		// Enable interrupts
    2d1a:	e0 e6       	ldi	r30, 0x60	; 96
    2d1c:	f8 e0       	ldi	r31, 0x08	; 8
    2d1e:	85 81       	ldd	r24, Z+5	; 0x05
    2d20:	80 62       	ori	r24, 0x20	; 32
    2d22:	85 83       	std	Z+5, r24	; 0x05

		default:
			break;
	}

}
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	1f 91       	pop	r17
    2d2a:	0f 91       	pop	r16
    2d2c:	08 95       	ret

00002d2e <__vector_17>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART0_RXC_vect)
{
    2d2e:	1f 92       	push	r1
    2d30:	0f 92       	push	r0
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	0f 92       	push	r0
    2d36:	11 24       	eor	r1, r1
    2d38:	5f 93       	push	r21
    2d3a:	6f 93       	push	r22
    2d3c:	7f 93       	push	r23
    2d3e:	8f 93       	push	r24
    2d40:	9f 93       	push	r25
    2d42:	af 93       	push	r26
    2d44:	bf 93       	push	r27
    2d46:	ef 93       	push	r30
    2d48:	ff 93       	push	r31

	uint8_t c;

	if (recv0_buf.length < BUFSIZE) {
    2d4a:	80 91 19 2c 	lds	r24, 0x2C19	; 0x802c19 <recv0_buf+0x102>
    2d4e:	8f 3f       	cpi	r24, 0xFF	; 255
    2d50:	19 f1       	breq	.+70     	; 0x2d98 <__vector_17+0x6a>
		c = USART0.RXDATAL;
    2d52:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x7f4800>
		if ((char) c == '\r') {
    2d56:	8d 30       	cpi	r24, 0x0D	; 13
    2d58:	51 f4       	brne	.+20     	; 0x2d6e <__vector_17+0x40>
			recv0_buf.done = YES;
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	80 93 1b 2c 	sts	0x2C1B, r24	; 0x802c1b <recv0_buf+0x104>
			recv0_buf.data[recv0_buf.head] = '\0';
    2d60:	e0 91 16 2c 	lds	r30, 0x2C16	; 0x802c16 <recv0_buf+0xff>
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	e9 5e       	subi	r30, 0xE9	; 233
    2d68:	f4 4d       	sbci	r31, 0xD4	; 212
    2d6a:	10 82       	st	Z, r1
    2d6c:	06 c0       	rjmp	.+12     	; 0x2d7a <__vector_17+0x4c>
		} else {
			recv0_buf.data[recv0_buf.head] = c;
    2d6e:	e0 91 16 2c 	lds	r30, 0x2C16	; 0x802c16 <recv0_buf+0xff>
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	e9 5e       	subi	r30, 0xE9	; 233
    2d76:	f4 4d       	sbci	r31, 0xD4	; 212
    2d78:	80 83       	st	Z, r24
		}
		recv0_buf.length++;
    2d7a:	e9 e1       	ldi	r30, 0x19	; 25
    2d7c:	fc e2       	ldi	r31, 0x2C	; 44
    2d7e:	80 81       	ld	r24, Z
    2d80:	8f 5f       	subi	r24, 0xFF	; 255
    2d82:	80 83       	st	Z, r24
		recv0_buf.head = (recv0_buf.head + 1) % BUFSIZE;
    2d84:	e6 e1       	ldi	r30, 0x16	; 22
    2d86:	fc e2       	ldi	r31, 0x2C	; 44
    2d88:	80 81       	ld	r24, Z
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	01 96       	adiw	r24, 0x01	; 1
    2d8e:	6f ef       	ldi	r22, 0xFF	; 255
    2d90:	70 e0       	ldi	r23, 0x00	; 0
    2d92:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__divmodhi4>
    2d96:	80 83       	st	Z, r24
	}
}
    2d98:	ff 91       	pop	r31
    2d9a:	ef 91       	pop	r30
    2d9c:	bf 91       	pop	r27
    2d9e:	af 91       	pop	r26
    2da0:	9f 91       	pop	r25
    2da2:	8f 91       	pop	r24
    2da4:	7f 91       	pop	r23
    2da6:	6f 91       	pop	r22
    2da8:	5f 91       	pop	r21
    2daa:	0f 90       	pop	r0
    2dac:	0f be       	out	0x3f, r0	; 63
    2dae:	0f 90       	pop	r0
    2db0:	1f 90       	pop	r1
    2db2:	18 95       	reti

00002db4 <__vector_18>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART0_DRE_vect)
{
    2db4:	1f 92       	push	r1
    2db6:	0f 92       	push	r0
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	0f 92       	push	r0
    2dbc:	11 24       	eor	r1, r1
    2dbe:	8f 93       	push	r24
    2dc0:	9f 93       	push	r25
    2dc2:	ef 93       	push	r30
    2dc4:	ff 93       	push	r31

	USART0.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2dc6:	e0 e0       	ldi	r30, 0x00	; 0
    2dc8:	f8 e0       	ldi	r31, 0x08	; 8
    2dca:	85 81       	ldd	r24, Z+5	; 0x05
    2dcc:	8f 7d       	andi	r24, 0xDF	; 223
    2dce:	85 83       	std	Z+5, r24	; 0x05
	if (send0_buf.head - send0_buf.tail) {
    2dd0:	80 91 1b 2d 	lds	r24, 0x2D1B	; 0x802d1b <send0_buf+0xff>
    2dd4:	e0 91 1c 2d 	lds	r30, 0x2D1C	; 0x802d1c <send0_buf+0x100>
    2dd8:	8e 17       	cp	r24, r30
    2dda:	b9 f0       	breq	.+46     	; 0x2e0a <__vector_18+0x56>
		USART0.TXDATAL = send0_buf.data[send0_buf.tail++];
    2ddc:	91 e0       	ldi	r25, 0x01	; 1
    2dde:	9e 0f       	add	r25, r30
    2de0:	90 93 1c 2d 	sts	0x2D1C, r25	; 0x802d1c <send0_buf+0x100>
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	e4 5e       	subi	r30, 0xE4	; 228
    2de8:	f3 4d       	sbci	r31, 0xD3	; 211
    2dea:	80 81       	ld	r24, Z
    2dec:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
		send0_buf.tail %= BUFSIZE;
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	9f 3f       	cpi	r25, 0xFF	; 255
    2df4:	08 f4       	brcc	.+2      	; 0x2df8 <__vector_18+0x44>
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	89 0f       	add	r24, r25
    2dfa:	80 93 1c 2d 	sts	0x2D1C, r24	; 0x802d1c <send0_buf+0x100>
		USART0.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    2dfe:	e0 e0       	ldi	r30, 0x00	; 0
    2e00:	f8 e0       	ldi	r31, 0x08	; 8
    2e02:	85 81       	ldd	r24, Z+5	; 0x05
    2e04:	80 62       	ori	r24, 0x20	; 32
    2e06:	85 83       	std	Z+5, r24	; 0x05
    2e08:	03 c0       	rjmp	.+6      	; 0x2e10 <__vector_18+0x5c>
	} else {
		send0_buf.done = YES;
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	80 93 20 2d 	sts	0x2D20, r24	; 0x802d20 <send0_buf+0x104>
	}

}
    2e10:	ff 91       	pop	r31
    2e12:	ef 91       	pop	r30
    2e14:	9f 91       	pop	r25
    2e16:	8f 91       	pop	r24
    2e18:	0f 90       	pop	r0
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	0f 90       	pop	r0
    2e1e:	1f 90       	pop	r1
    2e20:	18 95       	reti

00002e22 <__vector_26>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART1_RXC_vect)
{
    2e22:	1f 92       	push	r1
    2e24:	0f 92       	push	r0
    2e26:	0f b6       	in	r0, 0x3f	; 63
    2e28:	0f 92       	push	r0
    2e2a:	11 24       	eor	r1, r1
    2e2c:	2f 93       	push	r18
    2e2e:	8f 93       	push	r24
    2e30:	9f 93       	push	r25
    2e32:	ef 93       	push	r30
    2e34:	ff 93       	push	r31

	uint8_t c;

	c = USART1.RXDATAL;
    2e36:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
	if (recv1_buf.nxfrd < recv1_buf.nbytes) {
    2e3a:	e0 91 15 2b 	lds	r30, 0x2B15	; 0x802b15 <recv1_buf+0x103>
    2e3e:	80 91 13 2b 	lds	r24, 0x2B13	; 0x802b13 <recv1_buf+0x101>
    2e42:	e8 17       	cp	r30, r24
    2e44:	40 f4       	brcc	.+16     	; 0x2e56 <__vector_26+0x34>
		recv1_buf.data[recv1_buf.nxfrd++] = c;
    2e46:	21 e0       	ldi	r18, 0x01	; 1
    2e48:	2e 0f       	add	r18, r30
    2e4a:	20 93 15 2b 	sts	0x2B15, r18	; 0x802b15 <recv1_buf+0x103>
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	ee 5e       	subi	r30, 0xEE	; 238
    2e52:	f5 4d       	sbci	r31, 0xD5	; 213
    2e54:	90 83       	st	Z, r25
	}
	if (recv1_buf.nxfrd >= recv1_buf.nbytes) {
    2e56:	90 91 15 2b 	lds	r25, 0x2B15	; 0x802b15 <recv1_buf+0x103>
    2e5a:	98 17       	cp	r25, r24
    2e5c:	18 f0       	brcs	.+6      	; 0x2e64 <__vector_26+0x42>
		recv1_buf.done = YES;
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	80 93 16 2b 	sts	0x2B16, r24	; 0x802b16 <recv1_buf+0x104>
	}

}
    2e64:	ff 91       	pop	r31
    2e66:	ef 91       	pop	r30
    2e68:	9f 91       	pop	r25
    2e6a:	8f 91       	pop	r24
    2e6c:	2f 91       	pop	r18
    2e6e:	0f 90       	pop	r0
    2e70:	0f be       	out	0x3f, r0	; 63
    2e72:	0f 90       	pop	r0
    2e74:	1f 90       	pop	r1
    2e76:	18 95       	reti

00002e78 <__vector_27>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART1_DRE_vect)
{
    2e78:	1f 92       	push	r1
    2e7a:	0f 92       	push	r0
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	0f 92       	push	r0
    2e80:	11 24       	eor	r1, r1
    2e82:	8f 93       	push	r24
    2e84:	9f 93       	push	r25
    2e86:	ef 93       	push	r30
    2e88:	ff 93       	push	r31

	USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2e8a:	e0 e2       	ldi	r30, 0x20	; 32
    2e8c:	f8 e0       	ldi	r31, 0x08	; 8
    2e8e:	85 81       	ldd	r24, Z+5	; 0x05
    2e90:	8f 7d       	andi	r24, 0xDF	; 223
    2e92:	85 83       	std	Z+5, r24	; 0x05
	if (send1_buf.head - send1_buf.tail) {
    2e94:	80 91 2a 30 	lds	r24, 0x302A	; 0x80302a <send1_buf+0xff>
    2e98:	e0 91 2b 30 	lds	r30, 0x302B	; 0x80302b <send1_buf+0x100>
    2e9c:	8e 17       	cp	r24, r30
    2e9e:	b9 f0       	breq	.+46     	; 0x2ece <__vector_27+0x56>
		USART1.TXDATAL = send1_buf.data[send1_buf.tail++];
    2ea0:	91 e0       	ldi	r25, 0x01	; 1
    2ea2:	9e 0f       	add	r25, r30
    2ea4:	90 93 2b 30 	sts	0x302B, r25	; 0x80302b <send1_buf+0x100>
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	e5 5d       	subi	r30, 0xD5	; 213
    2eac:	f0 4d       	sbci	r31, 0xD0	; 208
    2eae:	80 81       	ld	r24, Z
    2eb0:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
		send1_buf.tail %= BUFSIZE;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	9f 3f       	cpi	r25, 0xFF	; 255
    2eb8:	08 f4       	brcc	.+2      	; 0x2ebc <__vector_27+0x44>
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	89 0f       	add	r24, r25
    2ebe:	80 93 2b 30 	sts	0x302B, r24	; 0x80302b <send1_buf+0x100>
		USART1.CTRLA |= USART_DREIE_bm;		// Turn on interrupts
    2ec2:	e0 e2       	ldi	r30, 0x20	; 32
    2ec4:	f8 e0       	ldi	r31, 0x08	; 8
    2ec6:	85 81       	ldd	r24, Z+5	; 0x05
    2ec8:	80 62       	ori	r24, 0x20	; 32
    2eca:	85 83       	std	Z+5, r24	; 0x05
    2ecc:	03 c0       	rjmp	.+6      	; 0x2ed4 <__vector_27+0x5c>
	} else {
		send1_buf.done = YES;
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	80 93 2f 30 	sts	0x302F, r24	; 0x80302f <send1_buf+0x104>
	if (send1_buf.nxfrd >= send1_buf.nbytes) {
		USART1.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
		send1_buf.done = YES;
	}
*/
}
    2ed4:	ff 91       	pop	r31
    2ed6:	ef 91       	pop	r30
    2ed8:	9f 91       	pop	r25
    2eda:	8f 91       	pop	r24
    2edc:	0f 90       	pop	r0
    2ede:	0f be       	out	0x3f, r0	; 63
    2ee0:	0f 90       	pop	r0
    2ee2:	1f 90       	pop	r1
    2ee4:	18 95       	reti

00002ee6 <__vector_37>:
	If the character received is a <CR> ('\r'), a string terminator ('\0') is
	inserted into the buffer instead of the '\r'. The done flag is set and the
	nxfrd value set back to 0.
------------------------------------------------------------------------------*/
ISR(USART3_RXC_vect)
{
    2ee6:	1f 92       	push	r1
    2ee8:	0f 92       	push	r0
    2eea:	0f b6       	in	r0, 0x3f	; 63
    2eec:	0f 92       	push	r0
    2eee:	11 24       	eor	r1, r1
    2ef0:	8f 93       	push	r24
    2ef2:	9f 93       	push	r25
    2ef4:	af 93       	push	r26
    2ef6:	bf 93       	push	r27
    2ef8:	ef 93       	push	r30
    2efa:	ff 93       	push	r31

	uint8_t c;

	c = USART3.RXDATAL;
    2efc:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
	if (((char) c == '\r') || (recv3_buf.nxfrd >= (BUFSIZE-1))) {
    2f00:	8d 30       	cpi	r24, 0x0D	; 13
    2f02:	21 f0       	breq	.+8      	; 0x2f0c <__vector_37+0x26>
    2f04:	e0 91 24 2e 	lds	r30, 0x2E24	; 0x802e24 <recv3_buf+0x103>
    2f08:	ee 3f       	cpi	r30, 0xFE	; 254
    2f0a:	78 f0       	brcs	.+30     	; 0x2f2a <__vector_37+0x44>
		recv3_buf.done = YES;
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	80 93 25 2e 	sts	0x2E25, r24	; 0x802e25 <recv3_buf+0x104>
		recv3_buf.data[recv3_buf.nxfrd] = 0;	// String terminator
    2f12:	a4 e2       	ldi	r26, 0x24	; 36
    2f14:	be e2       	ldi	r27, 0x2E	; 46
    2f16:	8c 91       	ld	r24, X
    2f18:	e8 2f       	mov	r30, r24
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	ef 5d       	subi	r30, 0xDF	; 223
    2f1e:	f2 4d       	sbci	r31, 0xD2	; 210
    2f20:	10 82       	st	Z, r1
		recv3_buf.nbytes = recv3_buf.nxfrd;
    2f22:	80 93 22 2e 	sts	0x2E22, r24	; 0x802e22 <recv3_buf+0x101>
		recv3_buf.nxfrd = 0;
    2f26:	1c 92       	st	X, r1
		return;
    2f28:	08 c0       	rjmp	.+16     	; 0x2f3a <__vector_37+0x54>
	} else {
		recv3_buf.data[recv3_buf.nxfrd++] = c;
    2f2a:	91 e0       	ldi	r25, 0x01	; 1
    2f2c:	9e 0f       	add	r25, r30
    2f2e:	90 93 24 2e 	sts	0x2E24, r25	; 0x802e24 <recv3_buf+0x103>
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	ef 5d       	subi	r30, 0xDF	; 223
    2f36:	f2 4d       	sbci	r31, 0xD2	; 210
    2f38:	80 83       	st	Z, r24
	}

}
    2f3a:	ff 91       	pop	r31
    2f3c:	ef 91       	pop	r30
    2f3e:	bf 91       	pop	r27
    2f40:	af 91       	pop	r26
    2f42:	9f 91       	pop	r25
    2f44:	8f 91       	pop	r24
    2f46:	0f 90       	pop	r0
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	0f 90       	pop	r0
    2f4c:	1f 90       	pop	r1
    2f4e:	18 95       	reti

00002f50 <__vector_38>:
	off this interrupt.

	Sending is started by calling send_USART(port).
------------------------------------------------------------------------------*/
ISR(USART3_DRE_vect)
{
    2f50:	1f 92       	push	r1
    2f52:	0f 92       	push	r0
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	0f 92       	push	r0
    2f58:	11 24       	eor	r1, r1
    2f5a:	8f 93       	push	r24
    2f5c:	9f 93       	push	r25
    2f5e:	af 93       	push	r26
    2f60:	bf 93       	push	r27
    2f62:	ef 93       	push	r30
    2f64:	ff 93       	push	r31

	USART3.TXDATAL = send3_buf.data[send3_buf.nxfrd++];
    2f66:	a9 e2       	ldi	r26, 0x29	; 41
    2f68:	bf e2       	ldi	r27, 0x2F	; 47
    2f6a:	ec 91       	ld	r30, X
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	8e 0f       	add	r24, r30
    2f70:	8c 93       	st	X, r24
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	ea 5d       	subi	r30, 0xDA	; 218
    2f76:	f1 4d       	sbci	r31, 0xD1	; 209
    2f78:	90 81       	ld	r25, Z
    2f7a:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
	if (send3_buf.nxfrd >= send3_buf.nbytes) {
    2f7e:	90 91 27 2f 	lds	r25, 0x2F27	; 0x802f27 <send3_buf+0x101>
    2f82:	89 17       	cp	r24, r25
    2f84:	40 f0       	brcs	.+16     	; 0x2f96 <__vector_38+0x46>
		USART3.CTRLA &= ~USART_DREIE_bm;	// Turn off interrupts
    2f86:	e0 e6       	ldi	r30, 0x60	; 96
    2f88:	f8 e0       	ldi	r31, 0x08	; 8
    2f8a:	85 81       	ldd	r24, Z+5	; 0x05
    2f8c:	8f 7d       	andi	r24, 0xDF	; 223
    2f8e:	85 83       	std	Z+5, r24	; 0x05
		send3_buf.done = YES;
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	80 93 2a 2f 	sts	0x2F2A, r24	; 0x802f2a <send3_buf+0x104>
	}

}
    2f96:	ff 91       	pop	r31
    2f98:	ef 91       	pop	r30
    2f9a:	bf 91       	pop	r27
    2f9c:	af 91       	pop	r26
    2f9e:	9f 91       	pop	r25
    2fa0:	8f 91       	pop	r24
    2fa2:	0f 90       	pop	r0
    2fa4:	0f be       	out	0x3f, r0	; 63
    2fa6:	0f 90       	pop	r0
    2fa8:	1f 90       	pop	r1
    2faa:	18 95       	reti

00002fac <reboot>:
#include "initialize.h"

void reboot(void)
{

	init_USART();
    2fac:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <init_USART>
	init_XPORT();
    2fb0:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <init_XPORT>
	CPU_CCP = CCP_IOREG_gc;
    2fb4:	88 ed       	ldi	r24, 0xD8	; 216
    2fb6:	84 bf       	out	0x34, r24	; 52
	WDT.CTRLA = WDT_PERIOD_8CLK_gc;
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7f4100>
    2fbe:	08 95       	ret

00002fc0 <init_XPORT>:
#include "initialize.h"

void init_XPORT(void)
{

	PORTC.OUTCLR = PIN3_bm;		// PC3 is the /RESET pin for the XPort
    2fc0:	e0 e4       	ldi	r30, 0x40	; 64
    2fc2:	f4 e0       	ldi	r31, 0x04	; 4
    2fc4:	88 e0       	ldi	r24, 0x08	; 8
    2fc6:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN3_bm;
    2fc8:	81 83       	std	Z+1, r24	; 0x01
    2fca:	ad e8       	ldi	r26, 0x8D	; 141
    2fcc:	b0 e2       	ldi	r27, 0x20	; 32
    2fce:	11 97       	sbiw	r26, 0x01	; 1
    2fd0:	f1 f7       	brne	.-4      	; 0x2fce <init_XPORT+0xe>
    2fd2:	00 00       	nop
	_delay_ms(10);				// Reset signal
	PORTC.OUTSET = PIN3_bm;
    2fd4:	85 83       	std	Z+5, r24	; 0x05
    2fd6:	08 95       	ret

00002fd8 <__subsf3>:
    2fd8:	50 58       	subi	r21, 0x80	; 128

00002fda <__addsf3>:
    2fda:	bb 27       	eor	r27, r27
    2fdc:	aa 27       	eor	r26, r26
    2fde:	0e 94 04 18 	call	0x3008	; 0x3008 <__addsf3x>
    2fe2:	0c 94 48 19 	jmp	0x3290	; 0x3290 <__fp_round>
    2fe6:	0e 94 3a 19 	call	0x3274	; 0x3274 <__fp_pscA>
    2fea:	38 f0       	brcs	.+14     	; 0x2ffa <__addsf3+0x20>
    2fec:	0e 94 41 19 	call	0x3282	; 0x3282 <__fp_pscB>
    2ff0:	20 f0       	brcs	.+8      	; 0x2ffa <__addsf3+0x20>
    2ff2:	39 f4       	brne	.+14     	; 0x3002 <__addsf3+0x28>
    2ff4:	9f 3f       	cpi	r25, 0xFF	; 255
    2ff6:	19 f4       	brne	.+6      	; 0x2ffe <__addsf3+0x24>
    2ff8:	26 f4       	brtc	.+8      	; 0x3002 <__addsf3+0x28>
    2ffa:	0c 94 37 19 	jmp	0x326e	; 0x326e <__fp_nan>
    2ffe:	0e f4       	brtc	.+2      	; 0x3002 <__addsf3+0x28>
    3000:	e0 95       	com	r30
    3002:	e7 fb       	bst	r30, 7
    3004:	0c 94 31 19 	jmp	0x3262	; 0x3262 <__fp_inf>

00003008 <__addsf3x>:
    3008:	e9 2f       	mov	r30, r25
    300a:	0e 94 59 19 	call	0x32b2	; 0x32b2 <__fp_split3>
    300e:	58 f3       	brcs	.-42     	; 0x2fe6 <__addsf3+0xc>
    3010:	ba 17       	cp	r27, r26
    3012:	62 07       	cpc	r22, r18
    3014:	73 07       	cpc	r23, r19
    3016:	84 07       	cpc	r24, r20
    3018:	95 07       	cpc	r25, r21
    301a:	20 f0       	brcs	.+8      	; 0x3024 <__addsf3x+0x1c>
    301c:	79 f4       	brne	.+30     	; 0x303c <__addsf3x+0x34>
    301e:	a6 f5       	brtc	.+104    	; 0x3088 <__addsf3x+0x80>
    3020:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__fp_zero>
    3024:	0e f4       	brtc	.+2      	; 0x3028 <__addsf3x+0x20>
    3026:	e0 95       	com	r30
    3028:	0b 2e       	mov	r0, r27
    302a:	ba 2f       	mov	r27, r26
    302c:	a0 2d       	mov	r26, r0
    302e:	0b 01       	movw	r0, r22
    3030:	b9 01       	movw	r22, r18
    3032:	90 01       	movw	r18, r0
    3034:	0c 01       	movw	r0, r24
    3036:	ca 01       	movw	r24, r20
    3038:	a0 01       	movw	r20, r0
    303a:	11 24       	eor	r1, r1
    303c:	ff 27       	eor	r31, r31
    303e:	59 1b       	sub	r21, r25
    3040:	99 f0       	breq	.+38     	; 0x3068 <__addsf3x+0x60>
    3042:	59 3f       	cpi	r21, 0xF9	; 249
    3044:	50 f4       	brcc	.+20     	; 0x305a <__addsf3x+0x52>
    3046:	50 3e       	cpi	r21, 0xE0	; 224
    3048:	68 f1       	brcs	.+90     	; 0x30a4 <__addsf3x+0x9c>
    304a:	1a 16       	cp	r1, r26
    304c:	f0 40       	sbci	r31, 0x00	; 0
    304e:	a2 2f       	mov	r26, r18
    3050:	23 2f       	mov	r18, r19
    3052:	34 2f       	mov	r19, r20
    3054:	44 27       	eor	r20, r20
    3056:	58 5f       	subi	r21, 0xF8	; 248
    3058:	f3 cf       	rjmp	.-26     	; 0x3040 <__addsf3x+0x38>
    305a:	46 95       	lsr	r20
    305c:	37 95       	ror	r19
    305e:	27 95       	ror	r18
    3060:	a7 95       	ror	r26
    3062:	f0 40       	sbci	r31, 0x00	; 0
    3064:	53 95       	inc	r21
    3066:	c9 f7       	brne	.-14     	; 0x305a <__addsf3x+0x52>
    3068:	7e f4       	brtc	.+30     	; 0x3088 <__addsf3x+0x80>
    306a:	1f 16       	cp	r1, r31
    306c:	ba 0b       	sbc	r27, r26
    306e:	62 0b       	sbc	r22, r18
    3070:	73 0b       	sbc	r23, r19
    3072:	84 0b       	sbc	r24, r20
    3074:	ba f0       	brmi	.+46     	; 0x30a4 <__addsf3x+0x9c>
    3076:	91 50       	subi	r25, 0x01	; 1
    3078:	a1 f0       	breq	.+40     	; 0x30a2 <__addsf3x+0x9a>
    307a:	ff 0f       	add	r31, r31
    307c:	bb 1f       	adc	r27, r27
    307e:	66 1f       	adc	r22, r22
    3080:	77 1f       	adc	r23, r23
    3082:	88 1f       	adc	r24, r24
    3084:	c2 f7       	brpl	.-16     	; 0x3076 <__addsf3x+0x6e>
    3086:	0e c0       	rjmp	.+28     	; 0x30a4 <__addsf3x+0x9c>
    3088:	ba 0f       	add	r27, r26
    308a:	62 1f       	adc	r22, r18
    308c:	73 1f       	adc	r23, r19
    308e:	84 1f       	adc	r24, r20
    3090:	48 f4       	brcc	.+18     	; 0x30a4 <__addsf3x+0x9c>
    3092:	87 95       	ror	r24
    3094:	77 95       	ror	r23
    3096:	67 95       	ror	r22
    3098:	b7 95       	ror	r27
    309a:	f7 95       	ror	r31
    309c:	9e 3f       	cpi	r25, 0xFE	; 254
    309e:	08 f0       	brcs	.+2      	; 0x30a2 <__addsf3x+0x9a>
    30a0:	b0 cf       	rjmp	.-160    	; 0x3002 <__addsf3+0x28>
    30a2:	93 95       	inc	r25
    30a4:	88 0f       	add	r24, r24
    30a6:	08 f0       	brcs	.+2      	; 0x30aa <__addsf3x+0xa2>
    30a8:	99 27       	eor	r25, r25
    30aa:	ee 0f       	add	r30, r30
    30ac:	97 95       	ror	r25
    30ae:	87 95       	ror	r24
    30b0:	08 95       	ret

000030b2 <__cmpsf2>:
    30b2:	0e 94 0d 19 	call	0x321a	; 0x321a <__fp_cmp>
    30b6:	08 f4       	brcc	.+2      	; 0x30ba <__cmpsf2+0x8>
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	08 95       	ret

000030bc <__divsf3>:
    30bc:	0e 94 72 18 	call	0x30e4	; 0x30e4 <__divsf3x>
    30c0:	0c 94 48 19 	jmp	0x3290	; 0x3290 <__fp_round>
    30c4:	0e 94 41 19 	call	0x3282	; 0x3282 <__fp_pscB>
    30c8:	58 f0       	brcs	.+22     	; 0x30e0 <__divsf3+0x24>
    30ca:	0e 94 3a 19 	call	0x3274	; 0x3274 <__fp_pscA>
    30ce:	40 f0       	brcs	.+16     	; 0x30e0 <__divsf3+0x24>
    30d0:	29 f4       	brne	.+10     	; 0x30dc <__divsf3+0x20>
    30d2:	5f 3f       	cpi	r21, 0xFF	; 255
    30d4:	29 f0       	breq	.+10     	; 0x30e0 <__divsf3+0x24>
    30d6:	0c 94 31 19 	jmp	0x3262	; 0x3262 <__fp_inf>
    30da:	51 11       	cpse	r21, r1
    30dc:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <__fp_szero>
    30e0:	0c 94 37 19 	jmp	0x326e	; 0x326e <__fp_nan>

000030e4 <__divsf3x>:
    30e4:	0e 94 59 19 	call	0x32b2	; 0x32b2 <__fp_split3>
    30e8:	68 f3       	brcs	.-38     	; 0x30c4 <__divsf3+0x8>

000030ea <__divsf3_pse>:
    30ea:	99 23       	and	r25, r25
    30ec:	b1 f3       	breq	.-20     	; 0x30da <__divsf3+0x1e>
    30ee:	55 23       	and	r21, r21
    30f0:	91 f3       	breq	.-28     	; 0x30d6 <__divsf3+0x1a>
    30f2:	95 1b       	sub	r25, r21
    30f4:	55 0b       	sbc	r21, r21
    30f6:	bb 27       	eor	r27, r27
    30f8:	aa 27       	eor	r26, r26
    30fa:	62 17       	cp	r22, r18
    30fc:	73 07       	cpc	r23, r19
    30fe:	84 07       	cpc	r24, r20
    3100:	38 f0       	brcs	.+14     	; 0x3110 <__divsf3_pse+0x26>
    3102:	9f 5f       	subi	r25, 0xFF	; 255
    3104:	5f 4f       	sbci	r21, 0xFF	; 255
    3106:	22 0f       	add	r18, r18
    3108:	33 1f       	adc	r19, r19
    310a:	44 1f       	adc	r20, r20
    310c:	aa 1f       	adc	r26, r26
    310e:	a9 f3       	breq	.-22     	; 0x30fa <__divsf3_pse+0x10>
    3110:	35 d0       	rcall	.+106    	; 0x317c <__divsf3_pse+0x92>
    3112:	0e 2e       	mov	r0, r30
    3114:	3a f0       	brmi	.+14     	; 0x3124 <__divsf3_pse+0x3a>
    3116:	e0 e8       	ldi	r30, 0x80	; 128
    3118:	32 d0       	rcall	.+100    	; 0x317e <__divsf3_pse+0x94>
    311a:	91 50       	subi	r25, 0x01	; 1
    311c:	50 40       	sbci	r21, 0x00	; 0
    311e:	e6 95       	lsr	r30
    3120:	00 1c       	adc	r0, r0
    3122:	ca f7       	brpl	.-14     	; 0x3116 <__divsf3_pse+0x2c>
    3124:	2b d0       	rcall	.+86     	; 0x317c <__divsf3_pse+0x92>
    3126:	fe 2f       	mov	r31, r30
    3128:	29 d0       	rcall	.+82     	; 0x317c <__divsf3_pse+0x92>
    312a:	66 0f       	add	r22, r22
    312c:	77 1f       	adc	r23, r23
    312e:	88 1f       	adc	r24, r24
    3130:	bb 1f       	adc	r27, r27
    3132:	26 17       	cp	r18, r22
    3134:	37 07       	cpc	r19, r23
    3136:	48 07       	cpc	r20, r24
    3138:	ab 07       	cpc	r26, r27
    313a:	b0 e8       	ldi	r27, 0x80	; 128
    313c:	09 f0       	breq	.+2      	; 0x3140 <__divsf3_pse+0x56>
    313e:	bb 0b       	sbc	r27, r27
    3140:	80 2d       	mov	r24, r0
    3142:	bf 01       	movw	r22, r30
    3144:	ff 27       	eor	r31, r31
    3146:	93 58       	subi	r25, 0x83	; 131
    3148:	5f 4f       	sbci	r21, 0xFF	; 255
    314a:	3a f0       	brmi	.+14     	; 0x315a <__divsf3_pse+0x70>
    314c:	9e 3f       	cpi	r25, 0xFE	; 254
    314e:	51 05       	cpc	r21, r1
    3150:	78 f0       	brcs	.+30     	; 0x3170 <__divsf3_pse+0x86>
    3152:	0c 94 31 19 	jmp	0x3262	; 0x3262 <__fp_inf>
    3156:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <__fp_szero>
    315a:	5f 3f       	cpi	r21, 0xFF	; 255
    315c:	e4 f3       	brlt	.-8      	; 0x3156 <__divsf3_pse+0x6c>
    315e:	98 3e       	cpi	r25, 0xE8	; 232
    3160:	d4 f3       	brlt	.-12     	; 0x3156 <__divsf3_pse+0x6c>
    3162:	86 95       	lsr	r24
    3164:	77 95       	ror	r23
    3166:	67 95       	ror	r22
    3168:	b7 95       	ror	r27
    316a:	f7 95       	ror	r31
    316c:	9f 5f       	subi	r25, 0xFF	; 255
    316e:	c9 f7       	brne	.-14     	; 0x3162 <__divsf3_pse+0x78>
    3170:	88 0f       	add	r24, r24
    3172:	91 1d       	adc	r25, r1
    3174:	96 95       	lsr	r25
    3176:	87 95       	ror	r24
    3178:	97 f9       	bld	r25, 7
    317a:	08 95       	ret
    317c:	e1 e0       	ldi	r30, 0x01	; 1
    317e:	66 0f       	add	r22, r22
    3180:	77 1f       	adc	r23, r23
    3182:	88 1f       	adc	r24, r24
    3184:	bb 1f       	adc	r27, r27
    3186:	62 17       	cp	r22, r18
    3188:	73 07       	cpc	r23, r19
    318a:	84 07       	cpc	r24, r20
    318c:	ba 07       	cpc	r27, r26
    318e:	20 f0       	brcs	.+8      	; 0x3198 <__divsf3_pse+0xae>
    3190:	62 1b       	sub	r22, r18
    3192:	73 0b       	sbc	r23, r19
    3194:	84 0b       	sbc	r24, r20
    3196:	ba 0b       	sbc	r27, r26
    3198:	ee 1f       	adc	r30, r30
    319a:	88 f7       	brcc	.-30     	; 0x317e <__divsf3_pse+0x94>
    319c:	e0 95       	com	r30
    319e:	08 95       	ret

000031a0 <__floatunsisf>:
    31a0:	e8 94       	clt
    31a2:	09 c0       	rjmp	.+18     	; 0x31b6 <__floatsisf+0x12>

000031a4 <__floatsisf>:
    31a4:	97 fb       	bst	r25, 7
    31a6:	3e f4       	brtc	.+14     	; 0x31b6 <__floatsisf+0x12>
    31a8:	90 95       	com	r25
    31aa:	80 95       	com	r24
    31ac:	70 95       	com	r23
    31ae:	61 95       	neg	r22
    31b0:	7f 4f       	sbci	r23, 0xFF	; 255
    31b2:	8f 4f       	sbci	r24, 0xFF	; 255
    31b4:	9f 4f       	sbci	r25, 0xFF	; 255
    31b6:	99 23       	and	r25, r25
    31b8:	a9 f0       	breq	.+42     	; 0x31e4 <__floatsisf+0x40>
    31ba:	f9 2f       	mov	r31, r25
    31bc:	96 e9       	ldi	r25, 0x96	; 150
    31be:	bb 27       	eor	r27, r27
    31c0:	93 95       	inc	r25
    31c2:	f6 95       	lsr	r31
    31c4:	87 95       	ror	r24
    31c6:	77 95       	ror	r23
    31c8:	67 95       	ror	r22
    31ca:	b7 95       	ror	r27
    31cc:	f1 11       	cpse	r31, r1
    31ce:	f8 cf       	rjmp	.-16     	; 0x31c0 <__floatsisf+0x1c>
    31d0:	fa f4       	brpl	.+62     	; 0x3210 <__floatsisf+0x6c>
    31d2:	bb 0f       	add	r27, r27
    31d4:	11 f4       	brne	.+4      	; 0x31da <__floatsisf+0x36>
    31d6:	60 ff       	sbrs	r22, 0
    31d8:	1b c0       	rjmp	.+54     	; 0x3210 <__floatsisf+0x6c>
    31da:	6f 5f       	subi	r22, 0xFF	; 255
    31dc:	7f 4f       	sbci	r23, 0xFF	; 255
    31de:	8f 4f       	sbci	r24, 0xFF	; 255
    31e0:	9f 4f       	sbci	r25, 0xFF	; 255
    31e2:	16 c0       	rjmp	.+44     	; 0x3210 <__floatsisf+0x6c>
    31e4:	88 23       	and	r24, r24
    31e6:	11 f0       	breq	.+4      	; 0x31ec <__floatsisf+0x48>
    31e8:	96 e9       	ldi	r25, 0x96	; 150
    31ea:	11 c0       	rjmp	.+34     	; 0x320e <__floatsisf+0x6a>
    31ec:	77 23       	and	r23, r23
    31ee:	21 f0       	breq	.+8      	; 0x31f8 <__floatsisf+0x54>
    31f0:	9e e8       	ldi	r25, 0x8E	; 142
    31f2:	87 2f       	mov	r24, r23
    31f4:	76 2f       	mov	r23, r22
    31f6:	05 c0       	rjmp	.+10     	; 0x3202 <__floatsisf+0x5e>
    31f8:	66 23       	and	r22, r22
    31fa:	71 f0       	breq	.+28     	; 0x3218 <__floatsisf+0x74>
    31fc:	96 e8       	ldi	r25, 0x86	; 134
    31fe:	86 2f       	mov	r24, r22
    3200:	70 e0       	ldi	r23, 0x00	; 0
    3202:	60 e0       	ldi	r22, 0x00	; 0
    3204:	2a f0       	brmi	.+10     	; 0x3210 <__floatsisf+0x6c>
    3206:	9a 95       	dec	r25
    3208:	66 0f       	add	r22, r22
    320a:	77 1f       	adc	r23, r23
    320c:	88 1f       	adc	r24, r24
    320e:	da f7       	brpl	.-10     	; 0x3206 <__floatsisf+0x62>
    3210:	88 0f       	add	r24, r24
    3212:	96 95       	lsr	r25
    3214:	87 95       	ror	r24
    3216:	97 f9       	bld	r25, 7
    3218:	08 95       	ret

0000321a <__fp_cmp>:
    321a:	99 0f       	add	r25, r25
    321c:	00 08       	sbc	r0, r0
    321e:	55 0f       	add	r21, r21
    3220:	aa 0b       	sbc	r26, r26
    3222:	e0 e8       	ldi	r30, 0x80	; 128
    3224:	fe ef       	ldi	r31, 0xFE	; 254
    3226:	16 16       	cp	r1, r22
    3228:	17 06       	cpc	r1, r23
    322a:	e8 07       	cpc	r30, r24
    322c:	f9 07       	cpc	r31, r25
    322e:	c0 f0       	brcs	.+48     	; 0x3260 <__fp_cmp+0x46>
    3230:	12 16       	cp	r1, r18
    3232:	13 06       	cpc	r1, r19
    3234:	e4 07       	cpc	r30, r20
    3236:	f5 07       	cpc	r31, r21
    3238:	98 f0       	brcs	.+38     	; 0x3260 <__fp_cmp+0x46>
    323a:	62 1b       	sub	r22, r18
    323c:	73 0b       	sbc	r23, r19
    323e:	84 0b       	sbc	r24, r20
    3240:	95 0b       	sbc	r25, r21
    3242:	39 f4       	brne	.+14     	; 0x3252 <__fp_cmp+0x38>
    3244:	0a 26       	eor	r0, r26
    3246:	61 f0       	breq	.+24     	; 0x3260 <__fp_cmp+0x46>
    3248:	23 2b       	or	r18, r19
    324a:	24 2b       	or	r18, r20
    324c:	25 2b       	or	r18, r21
    324e:	21 f4       	brne	.+8      	; 0x3258 <__fp_cmp+0x3e>
    3250:	08 95       	ret
    3252:	0a 26       	eor	r0, r26
    3254:	09 f4       	brne	.+2      	; 0x3258 <__fp_cmp+0x3e>
    3256:	a1 40       	sbci	r26, 0x01	; 1
    3258:	a6 95       	lsr	r26
    325a:	8f ef       	ldi	r24, 0xFF	; 255
    325c:	81 1d       	adc	r24, r1
    325e:	81 1d       	adc	r24, r1
    3260:	08 95       	ret

00003262 <__fp_inf>:
    3262:	97 f9       	bld	r25, 7
    3264:	9f 67       	ori	r25, 0x7F	; 127
    3266:	80 e8       	ldi	r24, 0x80	; 128
    3268:	70 e0       	ldi	r23, 0x00	; 0
    326a:	60 e0       	ldi	r22, 0x00	; 0
    326c:	08 95       	ret

0000326e <__fp_nan>:
    326e:	9f ef       	ldi	r25, 0xFF	; 255
    3270:	80 ec       	ldi	r24, 0xC0	; 192
    3272:	08 95       	ret

00003274 <__fp_pscA>:
    3274:	00 24       	eor	r0, r0
    3276:	0a 94       	dec	r0
    3278:	16 16       	cp	r1, r22
    327a:	17 06       	cpc	r1, r23
    327c:	18 06       	cpc	r1, r24
    327e:	09 06       	cpc	r0, r25
    3280:	08 95       	ret

00003282 <__fp_pscB>:
    3282:	00 24       	eor	r0, r0
    3284:	0a 94       	dec	r0
    3286:	12 16       	cp	r1, r18
    3288:	13 06       	cpc	r1, r19
    328a:	14 06       	cpc	r1, r20
    328c:	05 06       	cpc	r0, r21
    328e:	08 95       	ret

00003290 <__fp_round>:
    3290:	09 2e       	mov	r0, r25
    3292:	03 94       	inc	r0
    3294:	00 0c       	add	r0, r0
    3296:	11 f4       	brne	.+4      	; 0x329c <__fp_round+0xc>
    3298:	88 23       	and	r24, r24
    329a:	52 f0       	brmi	.+20     	; 0x32b0 <__fp_round+0x20>
    329c:	bb 0f       	add	r27, r27
    329e:	40 f4       	brcc	.+16     	; 0x32b0 <__fp_round+0x20>
    32a0:	bf 2b       	or	r27, r31
    32a2:	11 f4       	brne	.+4      	; 0x32a8 <__fp_round+0x18>
    32a4:	60 ff       	sbrs	r22, 0
    32a6:	04 c0       	rjmp	.+8      	; 0x32b0 <__fp_round+0x20>
    32a8:	6f 5f       	subi	r22, 0xFF	; 255
    32aa:	7f 4f       	sbci	r23, 0xFF	; 255
    32ac:	8f 4f       	sbci	r24, 0xFF	; 255
    32ae:	9f 4f       	sbci	r25, 0xFF	; 255
    32b0:	08 95       	ret

000032b2 <__fp_split3>:
    32b2:	57 fd       	sbrc	r21, 7
    32b4:	90 58       	subi	r25, 0x80	; 128
    32b6:	44 0f       	add	r20, r20
    32b8:	55 1f       	adc	r21, r21
    32ba:	59 f0       	breq	.+22     	; 0x32d2 <__fp_splitA+0x10>
    32bc:	5f 3f       	cpi	r21, 0xFF	; 255
    32be:	71 f0       	breq	.+28     	; 0x32dc <__fp_splitA+0x1a>
    32c0:	47 95       	ror	r20

000032c2 <__fp_splitA>:
    32c2:	88 0f       	add	r24, r24
    32c4:	97 fb       	bst	r25, 7
    32c6:	99 1f       	adc	r25, r25
    32c8:	61 f0       	breq	.+24     	; 0x32e2 <__fp_splitA+0x20>
    32ca:	9f 3f       	cpi	r25, 0xFF	; 255
    32cc:	79 f0       	breq	.+30     	; 0x32ec <__fp_splitA+0x2a>
    32ce:	87 95       	ror	r24
    32d0:	08 95       	ret
    32d2:	12 16       	cp	r1, r18
    32d4:	13 06       	cpc	r1, r19
    32d6:	14 06       	cpc	r1, r20
    32d8:	55 1f       	adc	r21, r21
    32da:	f2 cf       	rjmp	.-28     	; 0x32c0 <__fp_split3+0xe>
    32dc:	46 95       	lsr	r20
    32de:	f1 df       	rcall	.-30     	; 0x32c2 <__fp_splitA>
    32e0:	08 c0       	rjmp	.+16     	; 0x32f2 <__fp_splitA+0x30>
    32e2:	16 16       	cp	r1, r22
    32e4:	17 06       	cpc	r1, r23
    32e6:	18 06       	cpc	r1, r24
    32e8:	99 1f       	adc	r25, r25
    32ea:	f1 cf       	rjmp	.-30     	; 0x32ce <__fp_splitA+0xc>
    32ec:	86 95       	lsr	r24
    32ee:	71 05       	cpc	r23, r1
    32f0:	61 05       	cpc	r22, r1
    32f2:	08 94       	sec
    32f4:	08 95       	ret

000032f6 <__fp_zero>:
    32f6:	e8 94       	clt

000032f8 <__fp_szero>:
    32f8:	bb 27       	eor	r27, r27
    32fa:	66 27       	eor	r22, r22
    32fc:	77 27       	eor	r23, r23
    32fe:	cb 01       	movw	r24, r22
    3300:	97 f9       	bld	r25, 7
    3302:	08 95       	ret

00003304 <__gesf2>:
    3304:	0e 94 0d 19 	call	0x321a	; 0x321a <__fp_cmp>
    3308:	08 f4       	brcc	.+2      	; 0x330c <__gesf2+0x8>
    330a:	8f ef       	ldi	r24, 0xFF	; 255
    330c:	08 95       	ret

0000330e <__mulsf3>:
    330e:	0e 94 9a 19 	call	0x3334	; 0x3334 <__mulsf3x>
    3312:	0c 94 48 19 	jmp	0x3290	; 0x3290 <__fp_round>
    3316:	0e 94 3a 19 	call	0x3274	; 0x3274 <__fp_pscA>
    331a:	38 f0       	brcs	.+14     	; 0x332a <__mulsf3+0x1c>
    331c:	0e 94 41 19 	call	0x3282	; 0x3282 <__fp_pscB>
    3320:	20 f0       	brcs	.+8      	; 0x332a <__mulsf3+0x1c>
    3322:	95 23       	and	r25, r21
    3324:	11 f0       	breq	.+4      	; 0x332a <__mulsf3+0x1c>
    3326:	0c 94 31 19 	jmp	0x3262	; 0x3262 <__fp_inf>
    332a:	0c 94 37 19 	jmp	0x326e	; 0x326e <__fp_nan>
    332e:	11 24       	eor	r1, r1
    3330:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <__fp_szero>

00003334 <__mulsf3x>:
    3334:	0e 94 59 19 	call	0x32b2	; 0x32b2 <__fp_split3>
    3338:	70 f3       	brcs	.-36     	; 0x3316 <__mulsf3+0x8>

0000333a <__mulsf3_pse>:
    333a:	95 9f       	mul	r25, r21
    333c:	c1 f3       	breq	.-16     	; 0x332e <__mulsf3+0x20>
    333e:	95 0f       	add	r25, r21
    3340:	50 e0       	ldi	r21, 0x00	; 0
    3342:	55 1f       	adc	r21, r21
    3344:	62 9f       	mul	r22, r18
    3346:	f0 01       	movw	r30, r0
    3348:	72 9f       	mul	r23, r18
    334a:	bb 27       	eor	r27, r27
    334c:	f0 0d       	add	r31, r0
    334e:	b1 1d       	adc	r27, r1
    3350:	63 9f       	mul	r22, r19
    3352:	aa 27       	eor	r26, r26
    3354:	f0 0d       	add	r31, r0
    3356:	b1 1d       	adc	r27, r1
    3358:	aa 1f       	adc	r26, r26
    335a:	64 9f       	mul	r22, r20
    335c:	66 27       	eor	r22, r22
    335e:	b0 0d       	add	r27, r0
    3360:	a1 1d       	adc	r26, r1
    3362:	66 1f       	adc	r22, r22
    3364:	82 9f       	mul	r24, r18
    3366:	22 27       	eor	r18, r18
    3368:	b0 0d       	add	r27, r0
    336a:	a1 1d       	adc	r26, r1
    336c:	62 1f       	adc	r22, r18
    336e:	73 9f       	mul	r23, r19
    3370:	b0 0d       	add	r27, r0
    3372:	a1 1d       	adc	r26, r1
    3374:	62 1f       	adc	r22, r18
    3376:	83 9f       	mul	r24, r19
    3378:	a0 0d       	add	r26, r0
    337a:	61 1d       	adc	r22, r1
    337c:	22 1f       	adc	r18, r18
    337e:	74 9f       	mul	r23, r20
    3380:	33 27       	eor	r19, r19
    3382:	a0 0d       	add	r26, r0
    3384:	61 1d       	adc	r22, r1
    3386:	23 1f       	adc	r18, r19
    3388:	84 9f       	mul	r24, r20
    338a:	60 0d       	add	r22, r0
    338c:	21 1d       	adc	r18, r1
    338e:	82 2f       	mov	r24, r18
    3390:	76 2f       	mov	r23, r22
    3392:	6a 2f       	mov	r22, r26
    3394:	11 24       	eor	r1, r1
    3396:	9f 57       	subi	r25, 0x7F	; 127
    3398:	50 40       	sbci	r21, 0x00	; 0
    339a:	9a f0       	brmi	.+38     	; 0x33c2 <__mulsf3_pse+0x88>
    339c:	f1 f0       	breq	.+60     	; 0x33da <__mulsf3_pse+0xa0>
    339e:	88 23       	and	r24, r24
    33a0:	4a f0       	brmi	.+18     	; 0x33b4 <__mulsf3_pse+0x7a>
    33a2:	ee 0f       	add	r30, r30
    33a4:	ff 1f       	adc	r31, r31
    33a6:	bb 1f       	adc	r27, r27
    33a8:	66 1f       	adc	r22, r22
    33aa:	77 1f       	adc	r23, r23
    33ac:	88 1f       	adc	r24, r24
    33ae:	91 50       	subi	r25, 0x01	; 1
    33b0:	50 40       	sbci	r21, 0x00	; 0
    33b2:	a9 f7       	brne	.-22     	; 0x339e <__mulsf3_pse+0x64>
    33b4:	9e 3f       	cpi	r25, 0xFE	; 254
    33b6:	51 05       	cpc	r21, r1
    33b8:	80 f0       	brcs	.+32     	; 0x33da <__mulsf3_pse+0xa0>
    33ba:	0c 94 31 19 	jmp	0x3262	; 0x3262 <__fp_inf>
    33be:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <__fp_szero>
    33c2:	5f 3f       	cpi	r21, 0xFF	; 255
    33c4:	e4 f3       	brlt	.-8      	; 0x33be <__mulsf3_pse+0x84>
    33c6:	98 3e       	cpi	r25, 0xE8	; 232
    33c8:	d4 f3       	brlt	.-12     	; 0x33be <__mulsf3_pse+0x84>
    33ca:	86 95       	lsr	r24
    33cc:	77 95       	ror	r23
    33ce:	67 95       	ror	r22
    33d0:	b7 95       	ror	r27
    33d2:	f7 95       	ror	r31
    33d4:	e7 95       	ror	r30
    33d6:	9f 5f       	subi	r25, 0xFF	; 255
    33d8:	c1 f7       	brne	.-16     	; 0x33ca <__mulsf3_pse+0x90>
    33da:	fe 2b       	or	r31, r30
    33dc:	88 0f       	add	r24, r24
    33de:	91 1d       	adc	r25, r1
    33e0:	96 95       	lsr	r25
    33e2:	87 95       	ror	r24
    33e4:	97 f9       	bld	r25, 7
    33e6:	08 95       	ret

000033e8 <vfprintf>:
    33e8:	a0 e1       	ldi	r26, 0x10	; 16
    33ea:	b0 e0       	ldi	r27, 0x00	; 0
    33ec:	ea ef       	ldi	r30, 0xFA	; 250
    33ee:	f9 e1       	ldi	r31, 0x19	; 25
    33f0:	0c 94 8b 1d 	jmp	0x3b16	; 0x3b16 <__prologue_saves__>
    33f4:	7c 01       	movw	r14, r24
    33f6:	1b 01       	movw	r2, r22
    33f8:	6a 01       	movw	r12, r20
    33fa:	fc 01       	movw	r30, r24
    33fc:	16 82       	std	Z+6, r1	; 0x06
    33fe:	17 82       	std	Z+7, r1	; 0x07
    3400:	83 81       	ldd	r24, Z+3	; 0x03
    3402:	81 ff       	sbrs	r24, 1
    3404:	44 c3       	rjmp	.+1672   	; 0x3a8e <vfprintf+0x6a6>
    3406:	9e 01       	movw	r18, r28
    3408:	2f 5f       	subi	r18, 0xFF	; 255
    340a:	3f 4f       	sbci	r19, 0xFF	; 255
    340c:	39 01       	movw	r6, r18
    340e:	f7 01       	movw	r30, r14
    3410:	93 81       	ldd	r25, Z+3	; 0x03
    3412:	f1 01       	movw	r30, r2
    3414:	93 fd       	sbrc	r25, 3
    3416:	85 91       	lpm	r24, Z+
    3418:	93 ff       	sbrs	r25, 3
    341a:	81 91       	ld	r24, Z+
    341c:	1f 01       	movw	r2, r30
    341e:	88 23       	and	r24, r24
    3420:	09 f4       	brne	.+2      	; 0x3424 <vfprintf+0x3c>
    3422:	31 c3       	rjmp	.+1634   	; 0x3a86 <vfprintf+0x69e>
    3424:	85 32       	cpi	r24, 0x25	; 37
    3426:	39 f4       	brne	.+14     	; 0x3436 <vfprintf+0x4e>
    3428:	93 fd       	sbrc	r25, 3
    342a:	85 91       	lpm	r24, Z+
    342c:	93 ff       	sbrs	r25, 3
    342e:	81 91       	ld	r24, Z+
    3430:	1f 01       	movw	r2, r30
    3432:	85 32       	cpi	r24, 0x25	; 37
    3434:	39 f4       	brne	.+14     	; 0x3444 <vfprintf+0x5c>
    3436:	b7 01       	movw	r22, r14
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    343e:	56 01       	movw	r10, r12
    3440:	65 01       	movw	r12, r10
    3442:	e5 cf       	rjmp	.-54     	; 0x340e <vfprintf+0x26>
    3444:	10 e0       	ldi	r17, 0x00	; 0
    3446:	51 2c       	mov	r5, r1
    3448:	91 2c       	mov	r9, r1
    344a:	ff e1       	ldi	r31, 0x1F	; 31
    344c:	f9 15       	cp	r31, r9
    344e:	d8 f0       	brcs	.+54     	; 0x3486 <vfprintf+0x9e>
    3450:	8b 32       	cpi	r24, 0x2B	; 43
    3452:	79 f0       	breq	.+30     	; 0x3472 <vfprintf+0x8a>
    3454:	38 f4       	brcc	.+14     	; 0x3464 <vfprintf+0x7c>
    3456:	80 32       	cpi	r24, 0x20	; 32
    3458:	79 f0       	breq	.+30     	; 0x3478 <vfprintf+0x90>
    345a:	83 32       	cpi	r24, 0x23	; 35
    345c:	a1 f4       	brne	.+40     	; 0x3486 <vfprintf+0x9e>
    345e:	f9 2d       	mov	r31, r9
    3460:	f0 61       	ori	r31, 0x10	; 16
    3462:	2e c0       	rjmp	.+92     	; 0x34c0 <vfprintf+0xd8>
    3464:	8d 32       	cpi	r24, 0x2D	; 45
    3466:	61 f0       	breq	.+24     	; 0x3480 <vfprintf+0x98>
    3468:	80 33       	cpi	r24, 0x30	; 48
    346a:	69 f4       	brne	.+26     	; 0x3486 <vfprintf+0x9e>
    346c:	29 2d       	mov	r18, r9
    346e:	21 60       	ori	r18, 0x01	; 1
    3470:	2d c0       	rjmp	.+90     	; 0x34cc <vfprintf+0xe4>
    3472:	39 2d       	mov	r19, r9
    3474:	32 60       	ori	r19, 0x02	; 2
    3476:	93 2e       	mov	r9, r19
    3478:	89 2d       	mov	r24, r9
    347a:	84 60       	ori	r24, 0x04	; 4
    347c:	98 2e       	mov	r9, r24
    347e:	2a c0       	rjmp	.+84     	; 0x34d4 <vfprintf+0xec>
    3480:	e9 2d       	mov	r30, r9
    3482:	e8 60       	ori	r30, 0x08	; 8
    3484:	15 c0       	rjmp	.+42     	; 0x34b0 <vfprintf+0xc8>
    3486:	97 fc       	sbrc	r9, 7
    3488:	2d c0       	rjmp	.+90     	; 0x34e4 <vfprintf+0xfc>
    348a:	20 ed       	ldi	r18, 0xD0	; 208
    348c:	28 0f       	add	r18, r24
    348e:	2a 30       	cpi	r18, 0x0A	; 10
    3490:	88 f4       	brcc	.+34     	; 0x34b4 <vfprintf+0xcc>
    3492:	96 fe       	sbrs	r9, 6
    3494:	06 c0       	rjmp	.+12     	; 0x34a2 <vfprintf+0xba>
    3496:	3a e0       	ldi	r19, 0x0A	; 10
    3498:	13 9f       	mul	r17, r19
    349a:	20 0d       	add	r18, r0
    349c:	11 24       	eor	r1, r1
    349e:	12 2f       	mov	r17, r18
    34a0:	19 c0       	rjmp	.+50     	; 0x34d4 <vfprintf+0xec>
    34a2:	8a e0       	ldi	r24, 0x0A	; 10
    34a4:	58 9e       	mul	r5, r24
    34a6:	20 0d       	add	r18, r0
    34a8:	11 24       	eor	r1, r1
    34aa:	52 2e       	mov	r5, r18
    34ac:	e9 2d       	mov	r30, r9
    34ae:	e0 62       	ori	r30, 0x20	; 32
    34b0:	9e 2e       	mov	r9, r30
    34b2:	10 c0       	rjmp	.+32     	; 0x34d4 <vfprintf+0xec>
    34b4:	8e 32       	cpi	r24, 0x2E	; 46
    34b6:	31 f4       	brne	.+12     	; 0x34c4 <vfprintf+0xdc>
    34b8:	96 fc       	sbrc	r9, 6
    34ba:	e5 c2       	rjmp	.+1482   	; 0x3a86 <vfprintf+0x69e>
    34bc:	f9 2d       	mov	r31, r9
    34be:	f0 64       	ori	r31, 0x40	; 64
    34c0:	9f 2e       	mov	r9, r31
    34c2:	08 c0       	rjmp	.+16     	; 0x34d4 <vfprintf+0xec>
    34c4:	8c 36       	cpi	r24, 0x6C	; 108
    34c6:	21 f4       	brne	.+8      	; 0x34d0 <vfprintf+0xe8>
    34c8:	29 2d       	mov	r18, r9
    34ca:	20 68       	ori	r18, 0x80	; 128
    34cc:	92 2e       	mov	r9, r18
    34ce:	02 c0       	rjmp	.+4      	; 0x34d4 <vfprintf+0xec>
    34d0:	88 36       	cpi	r24, 0x68	; 104
    34d2:	41 f4       	brne	.+16     	; 0x34e4 <vfprintf+0xfc>
    34d4:	f1 01       	movw	r30, r2
    34d6:	93 fd       	sbrc	r25, 3
    34d8:	85 91       	lpm	r24, Z+
    34da:	93 ff       	sbrs	r25, 3
    34dc:	81 91       	ld	r24, Z+
    34de:	1f 01       	movw	r2, r30
    34e0:	81 11       	cpse	r24, r1
    34e2:	b3 cf       	rjmp	.-154    	; 0x344a <vfprintf+0x62>
    34e4:	9b eb       	ldi	r25, 0xBB	; 187
    34e6:	98 0f       	add	r25, r24
    34e8:	93 30       	cpi	r25, 0x03	; 3
    34ea:	20 f4       	brcc	.+8      	; 0x34f4 <vfprintf+0x10c>
    34ec:	99 2d       	mov	r25, r9
    34ee:	90 61       	ori	r25, 0x10	; 16
    34f0:	80 5e       	subi	r24, 0xE0	; 224
    34f2:	07 c0       	rjmp	.+14     	; 0x3502 <vfprintf+0x11a>
    34f4:	9b e9       	ldi	r25, 0x9B	; 155
    34f6:	98 0f       	add	r25, r24
    34f8:	93 30       	cpi	r25, 0x03	; 3
    34fa:	08 f0       	brcs	.+2      	; 0x34fe <vfprintf+0x116>
    34fc:	66 c1       	rjmp	.+716    	; 0x37ca <vfprintf+0x3e2>
    34fe:	99 2d       	mov	r25, r9
    3500:	9f 7e       	andi	r25, 0xEF	; 239
    3502:	96 ff       	sbrs	r25, 6
    3504:	16 e0       	ldi	r17, 0x06	; 6
    3506:	9f 73       	andi	r25, 0x3F	; 63
    3508:	99 2e       	mov	r9, r25
    350a:	85 36       	cpi	r24, 0x65	; 101
    350c:	19 f4       	brne	.+6      	; 0x3514 <vfprintf+0x12c>
    350e:	90 64       	ori	r25, 0x40	; 64
    3510:	99 2e       	mov	r9, r25
    3512:	08 c0       	rjmp	.+16     	; 0x3524 <vfprintf+0x13c>
    3514:	86 36       	cpi	r24, 0x66	; 102
    3516:	21 f4       	brne	.+8      	; 0x3520 <vfprintf+0x138>
    3518:	39 2f       	mov	r19, r25
    351a:	30 68       	ori	r19, 0x80	; 128
    351c:	93 2e       	mov	r9, r19
    351e:	02 c0       	rjmp	.+4      	; 0x3524 <vfprintf+0x13c>
    3520:	11 11       	cpse	r17, r1
    3522:	11 50       	subi	r17, 0x01	; 1
    3524:	97 fe       	sbrs	r9, 7
    3526:	07 c0       	rjmp	.+14     	; 0x3536 <vfprintf+0x14e>
    3528:	1c 33       	cpi	r17, 0x3C	; 60
    352a:	50 f4       	brcc	.+20     	; 0x3540 <vfprintf+0x158>
    352c:	44 24       	eor	r4, r4
    352e:	43 94       	inc	r4
    3530:	41 0e       	add	r4, r17
    3532:	27 e0       	ldi	r18, 0x07	; 7
    3534:	0b c0       	rjmp	.+22     	; 0x354c <vfprintf+0x164>
    3536:	18 30       	cpi	r17, 0x08	; 8
    3538:	38 f0       	brcs	.+14     	; 0x3548 <vfprintf+0x160>
    353a:	27 e0       	ldi	r18, 0x07	; 7
    353c:	17 e0       	ldi	r17, 0x07	; 7
    353e:	05 c0       	rjmp	.+10     	; 0x354a <vfprintf+0x162>
    3540:	27 e0       	ldi	r18, 0x07	; 7
    3542:	9c e3       	ldi	r25, 0x3C	; 60
    3544:	49 2e       	mov	r4, r25
    3546:	02 c0       	rjmp	.+4      	; 0x354c <vfprintf+0x164>
    3548:	21 2f       	mov	r18, r17
    354a:	41 2c       	mov	r4, r1
    354c:	56 01       	movw	r10, r12
    354e:	84 e0       	ldi	r24, 0x04	; 4
    3550:	a8 0e       	add	r10, r24
    3552:	b1 1c       	adc	r11, r1
    3554:	f6 01       	movw	r30, r12
    3556:	60 81       	ld	r22, Z
    3558:	71 81       	ldd	r23, Z+1	; 0x01
    355a:	82 81       	ldd	r24, Z+2	; 0x02
    355c:	93 81       	ldd	r25, Z+3	; 0x03
    355e:	04 2d       	mov	r16, r4
    3560:	a3 01       	movw	r20, r6
    3562:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__ftoa_engine>
    3566:	6c 01       	movw	r12, r24
    3568:	f9 81       	ldd	r31, Y+1	; 0x01
    356a:	fc 87       	std	Y+12, r31	; 0x0c
    356c:	f0 ff       	sbrs	r31, 0
    356e:	02 c0       	rjmp	.+4      	; 0x3574 <vfprintf+0x18c>
    3570:	f3 ff       	sbrs	r31, 3
    3572:	06 c0       	rjmp	.+12     	; 0x3580 <vfprintf+0x198>
    3574:	91 fc       	sbrc	r9, 1
    3576:	06 c0       	rjmp	.+12     	; 0x3584 <vfprintf+0x19c>
    3578:	92 fe       	sbrs	r9, 2
    357a:	06 c0       	rjmp	.+12     	; 0x3588 <vfprintf+0x1a0>
    357c:	00 e2       	ldi	r16, 0x20	; 32
    357e:	05 c0       	rjmp	.+10     	; 0x358a <vfprintf+0x1a2>
    3580:	0d e2       	ldi	r16, 0x2D	; 45
    3582:	03 c0       	rjmp	.+6      	; 0x358a <vfprintf+0x1a2>
    3584:	0b e2       	ldi	r16, 0x2B	; 43
    3586:	01 c0       	rjmp	.+2      	; 0x358a <vfprintf+0x1a2>
    3588:	00 e0       	ldi	r16, 0x00	; 0
    358a:	8c 85       	ldd	r24, Y+12	; 0x0c
    358c:	8c 70       	andi	r24, 0x0C	; 12
    358e:	19 f0       	breq	.+6      	; 0x3596 <vfprintf+0x1ae>
    3590:	01 11       	cpse	r16, r1
    3592:	5a c2       	rjmp	.+1204   	; 0x3a48 <vfprintf+0x660>
    3594:	9b c2       	rjmp	.+1334   	; 0x3acc <vfprintf+0x6e4>
    3596:	97 fe       	sbrs	r9, 7
    3598:	10 c0       	rjmp	.+32     	; 0x35ba <vfprintf+0x1d2>
    359a:	4c 0c       	add	r4, r12
    359c:	fc 85       	ldd	r31, Y+12	; 0x0c
    359e:	f4 ff       	sbrs	r31, 4
    35a0:	04 c0       	rjmp	.+8      	; 0x35aa <vfprintf+0x1c2>
    35a2:	8a 81       	ldd	r24, Y+2	; 0x02
    35a4:	81 33       	cpi	r24, 0x31	; 49
    35a6:	09 f4       	brne	.+2      	; 0x35aa <vfprintf+0x1c2>
    35a8:	4a 94       	dec	r4
    35aa:	14 14       	cp	r1, r4
    35ac:	74 f5       	brge	.+92     	; 0x360a <vfprintf+0x222>
    35ae:	28 e0       	ldi	r18, 0x08	; 8
    35b0:	24 15       	cp	r18, r4
    35b2:	78 f5       	brcc	.+94     	; 0x3612 <vfprintf+0x22a>
    35b4:	88 e0       	ldi	r24, 0x08	; 8
    35b6:	48 2e       	mov	r4, r24
    35b8:	2c c0       	rjmp	.+88     	; 0x3612 <vfprintf+0x22a>
    35ba:	96 fc       	sbrc	r9, 6
    35bc:	2a c0       	rjmp	.+84     	; 0x3612 <vfprintf+0x22a>
    35be:	81 2f       	mov	r24, r17
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	8c 15       	cp	r24, r12
    35c4:	9d 05       	cpc	r25, r13
    35c6:	9c f0       	brlt	.+38     	; 0x35ee <vfprintf+0x206>
    35c8:	3c ef       	ldi	r19, 0xFC	; 252
    35ca:	c3 16       	cp	r12, r19
    35cc:	3f ef       	ldi	r19, 0xFF	; 255
    35ce:	d3 06       	cpc	r13, r19
    35d0:	74 f0       	brlt	.+28     	; 0x35ee <vfprintf+0x206>
    35d2:	89 2d       	mov	r24, r9
    35d4:	80 68       	ori	r24, 0x80	; 128
    35d6:	98 2e       	mov	r9, r24
    35d8:	0a c0       	rjmp	.+20     	; 0x35ee <vfprintf+0x206>
    35da:	e2 e0       	ldi	r30, 0x02	; 2
    35dc:	f0 e0       	ldi	r31, 0x00	; 0
    35de:	ec 0f       	add	r30, r28
    35e0:	fd 1f       	adc	r31, r29
    35e2:	e1 0f       	add	r30, r17
    35e4:	f1 1d       	adc	r31, r1
    35e6:	80 81       	ld	r24, Z
    35e8:	80 33       	cpi	r24, 0x30	; 48
    35ea:	19 f4       	brne	.+6      	; 0x35f2 <vfprintf+0x20a>
    35ec:	11 50       	subi	r17, 0x01	; 1
    35ee:	11 11       	cpse	r17, r1
    35f0:	f4 cf       	rjmp	.-24     	; 0x35da <vfprintf+0x1f2>
    35f2:	97 fe       	sbrs	r9, 7
    35f4:	0e c0       	rjmp	.+28     	; 0x3612 <vfprintf+0x22a>
    35f6:	44 24       	eor	r4, r4
    35f8:	43 94       	inc	r4
    35fa:	41 0e       	add	r4, r17
    35fc:	81 2f       	mov	r24, r17
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	c8 16       	cp	r12, r24
    3602:	d9 06       	cpc	r13, r25
    3604:	2c f4       	brge	.+10     	; 0x3610 <vfprintf+0x228>
    3606:	1c 19       	sub	r17, r12
    3608:	04 c0       	rjmp	.+8      	; 0x3612 <vfprintf+0x22a>
    360a:	44 24       	eor	r4, r4
    360c:	43 94       	inc	r4
    360e:	01 c0       	rjmp	.+2      	; 0x3612 <vfprintf+0x22a>
    3610:	10 e0       	ldi	r17, 0x00	; 0
    3612:	97 fe       	sbrs	r9, 7
    3614:	06 c0       	rjmp	.+12     	; 0x3622 <vfprintf+0x23a>
    3616:	1c 14       	cp	r1, r12
    3618:	1d 04       	cpc	r1, r13
    361a:	34 f4       	brge	.+12     	; 0x3628 <vfprintf+0x240>
    361c:	c6 01       	movw	r24, r12
    361e:	01 96       	adiw	r24, 0x01	; 1
    3620:	05 c0       	rjmp	.+10     	; 0x362c <vfprintf+0x244>
    3622:	85 e0       	ldi	r24, 0x05	; 5
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	02 c0       	rjmp	.+4      	; 0x362c <vfprintf+0x244>
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	01 11       	cpse	r16, r1
    362e:	01 96       	adiw	r24, 0x01	; 1
    3630:	11 23       	and	r17, r17
    3632:	31 f0       	breq	.+12     	; 0x3640 <vfprintf+0x258>
    3634:	21 2f       	mov	r18, r17
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	2f 5f       	subi	r18, 0xFF	; 255
    363a:	3f 4f       	sbci	r19, 0xFF	; 255
    363c:	82 0f       	add	r24, r18
    363e:	93 1f       	adc	r25, r19
    3640:	25 2d       	mov	r18, r5
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	82 17       	cp	r24, r18
    3646:	93 07       	cpc	r25, r19
    3648:	14 f4       	brge	.+4      	; 0x364e <vfprintf+0x266>
    364a:	58 1a       	sub	r5, r24
    364c:	01 c0       	rjmp	.+2      	; 0x3650 <vfprintf+0x268>
    364e:	51 2c       	mov	r5, r1
    3650:	89 2d       	mov	r24, r9
    3652:	89 70       	andi	r24, 0x09	; 9
    3654:	49 f4       	brne	.+18     	; 0x3668 <vfprintf+0x280>
    3656:	55 20       	and	r5, r5
    3658:	39 f0       	breq	.+14     	; 0x3668 <vfprintf+0x280>
    365a:	b7 01       	movw	r22, r14
    365c:	80 e2       	ldi	r24, 0x20	; 32
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    3664:	5a 94       	dec	r5
    3666:	f7 cf       	rjmp	.-18     	; 0x3656 <vfprintf+0x26e>
    3668:	00 23       	and	r16, r16
    366a:	29 f0       	breq	.+10     	; 0x3676 <vfprintf+0x28e>
    366c:	b7 01       	movw	r22, r14
    366e:	80 2f       	mov	r24, r16
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    3676:	93 fc       	sbrc	r9, 3
    3678:	09 c0       	rjmp	.+18     	; 0x368c <vfprintf+0x2a4>
    367a:	55 20       	and	r5, r5
    367c:	39 f0       	breq	.+14     	; 0x368c <vfprintf+0x2a4>
    367e:	b7 01       	movw	r22, r14
    3680:	80 e3       	ldi	r24, 0x30	; 48
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    3688:	5a 94       	dec	r5
    368a:	f7 cf       	rjmp	.-18     	; 0x367a <vfprintf+0x292>
    368c:	97 fe       	sbrs	r9, 7
    368e:	4c c0       	rjmp	.+152    	; 0x3728 <vfprintf+0x340>
    3690:	46 01       	movw	r8, r12
    3692:	d7 fe       	sbrs	r13, 7
    3694:	02 c0       	rjmp	.+4      	; 0x369a <vfprintf+0x2b2>
    3696:	81 2c       	mov	r8, r1
    3698:	91 2c       	mov	r9, r1
    369a:	c6 01       	movw	r24, r12
    369c:	88 19       	sub	r24, r8
    369e:	99 09       	sbc	r25, r9
    36a0:	f3 01       	movw	r30, r6
    36a2:	e8 0f       	add	r30, r24
    36a4:	f9 1f       	adc	r31, r25
    36a6:	ed 87       	std	Y+13, r30	; 0x0d
    36a8:	fe 87       	std	Y+14, r31	; 0x0e
    36aa:	96 01       	movw	r18, r12
    36ac:	24 19       	sub	r18, r4
    36ae:	31 09       	sbc	r19, r1
    36b0:	2f 87       	std	Y+15, r18	; 0x0f
    36b2:	38 8b       	std	Y+16, r19	; 0x10
    36b4:	01 2f       	mov	r16, r17
    36b6:	10 e0       	ldi	r17, 0x00	; 0
    36b8:	11 95       	neg	r17
    36ba:	01 95       	neg	r16
    36bc:	11 09       	sbc	r17, r1
    36be:	3f ef       	ldi	r19, 0xFF	; 255
    36c0:	83 16       	cp	r8, r19
    36c2:	93 06       	cpc	r9, r19
    36c4:	29 f4       	brne	.+10     	; 0x36d0 <vfprintf+0x2e8>
    36c6:	b7 01       	movw	r22, r14
    36c8:	8e e2       	ldi	r24, 0x2E	; 46
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    36d0:	c8 14       	cp	r12, r8
    36d2:	d9 04       	cpc	r13, r9
    36d4:	4c f0       	brlt	.+18     	; 0x36e8 <vfprintf+0x300>
    36d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d8:	98 89       	ldd	r25, Y+16	; 0x10
    36da:	88 15       	cp	r24, r8
    36dc:	99 05       	cpc	r25, r9
    36de:	24 f4       	brge	.+8      	; 0x36e8 <vfprintf+0x300>
    36e0:	ed 85       	ldd	r30, Y+13	; 0x0d
    36e2:	fe 85       	ldd	r31, Y+14	; 0x0e
    36e4:	81 81       	ldd	r24, Z+1	; 0x01
    36e6:	01 c0       	rjmp	.+2      	; 0x36ea <vfprintf+0x302>
    36e8:	80 e3       	ldi	r24, 0x30	; 48
    36ea:	f1 e0       	ldi	r31, 0x01	; 1
    36ec:	8f 1a       	sub	r8, r31
    36ee:	91 08       	sbc	r9, r1
    36f0:	2d 85       	ldd	r18, Y+13	; 0x0d
    36f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    36f4:	2f 5f       	subi	r18, 0xFF	; 255
    36f6:	3f 4f       	sbci	r19, 0xFF	; 255
    36f8:	2d 87       	std	Y+13, r18	; 0x0d
    36fa:	3e 87       	std	Y+14, r19	; 0x0e
    36fc:	80 16       	cp	r8, r16
    36fe:	91 06       	cpc	r9, r17
    3700:	2c f0       	brlt	.+10     	; 0x370c <vfprintf+0x324>
    3702:	b7 01       	movw	r22, r14
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    370a:	d9 cf       	rjmp	.-78     	; 0x36be <vfprintf+0x2d6>
    370c:	c8 14       	cp	r12, r8
    370e:	d9 04       	cpc	r13, r9
    3710:	41 f4       	brne	.+16     	; 0x3722 <vfprintf+0x33a>
    3712:	9a 81       	ldd	r25, Y+2	; 0x02
    3714:	96 33       	cpi	r25, 0x36	; 54
    3716:	20 f4       	brcc	.+8      	; 0x3720 <vfprintf+0x338>
    3718:	95 33       	cpi	r25, 0x35	; 53
    371a:	19 f4       	brne	.+6      	; 0x3722 <vfprintf+0x33a>
    371c:	3c 85       	ldd	r19, Y+12	; 0x0c
    371e:	34 ff       	sbrs	r19, 4
    3720:	81 e3       	ldi	r24, 0x31	; 49
    3722:	b7 01       	movw	r22, r14
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	4e c0       	rjmp	.+156    	; 0x37c4 <vfprintf+0x3dc>
    3728:	8a 81       	ldd	r24, Y+2	; 0x02
    372a:	81 33       	cpi	r24, 0x31	; 49
    372c:	19 f0       	breq	.+6      	; 0x3734 <vfprintf+0x34c>
    372e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3730:	9f 7e       	andi	r25, 0xEF	; 239
    3732:	9c 87       	std	Y+12, r25	; 0x0c
    3734:	b7 01       	movw	r22, r14
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    373c:	11 11       	cpse	r17, r1
    373e:	05 c0       	rjmp	.+10     	; 0x374a <vfprintf+0x362>
    3740:	94 fc       	sbrc	r9, 4
    3742:	18 c0       	rjmp	.+48     	; 0x3774 <vfprintf+0x38c>
    3744:	85 e6       	ldi	r24, 0x65	; 101
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	17 c0       	rjmp	.+46     	; 0x3778 <vfprintf+0x390>
    374a:	b7 01       	movw	r22, r14
    374c:	8e e2       	ldi	r24, 0x2E	; 46
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    3754:	1e 5f       	subi	r17, 0xFE	; 254
    3756:	82 e0       	ldi	r24, 0x02	; 2
    3758:	01 e0       	ldi	r16, 0x01	; 1
    375a:	08 0f       	add	r16, r24
    375c:	f3 01       	movw	r30, r6
    375e:	e8 0f       	add	r30, r24
    3760:	f1 1d       	adc	r31, r1
    3762:	80 81       	ld	r24, Z
    3764:	b7 01       	movw	r22, r14
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    376c:	80 2f       	mov	r24, r16
    376e:	01 13       	cpse	r16, r17
    3770:	f3 cf       	rjmp	.-26     	; 0x3758 <vfprintf+0x370>
    3772:	e6 cf       	rjmp	.-52     	; 0x3740 <vfprintf+0x358>
    3774:	85 e4       	ldi	r24, 0x45	; 69
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	b7 01       	movw	r22, r14
    377a:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    377e:	d7 fc       	sbrc	r13, 7
    3780:	06 c0       	rjmp	.+12     	; 0x378e <vfprintf+0x3a6>
    3782:	c1 14       	cp	r12, r1
    3784:	d1 04       	cpc	r13, r1
    3786:	41 f4       	brne	.+16     	; 0x3798 <vfprintf+0x3b0>
    3788:	ec 85       	ldd	r30, Y+12	; 0x0c
    378a:	e4 ff       	sbrs	r30, 4
    378c:	05 c0       	rjmp	.+10     	; 0x3798 <vfprintf+0x3b0>
    378e:	d1 94       	neg	r13
    3790:	c1 94       	neg	r12
    3792:	d1 08       	sbc	r13, r1
    3794:	8d e2       	ldi	r24, 0x2D	; 45
    3796:	01 c0       	rjmp	.+2      	; 0x379a <vfprintf+0x3b2>
    3798:	8b e2       	ldi	r24, 0x2B	; 43
    379a:	b7 01       	movw	r22, r14
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    37a2:	80 e3       	ldi	r24, 0x30	; 48
    37a4:	2a e0       	ldi	r18, 0x0A	; 10
    37a6:	c2 16       	cp	r12, r18
    37a8:	d1 04       	cpc	r13, r1
    37aa:	2c f0       	brlt	.+10     	; 0x37b6 <vfprintf+0x3ce>
    37ac:	8f 5f       	subi	r24, 0xFF	; 255
    37ae:	fa e0       	ldi	r31, 0x0A	; 10
    37b0:	cf 1a       	sub	r12, r31
    37b2:	d1 08       	sbc	r13, r1
    37b4:	f7 cf       	rjmp	.-18     	; 0x37a4 <vfprintf+0x3bc>
    37b6:	b7 01       	movw	r22, r14
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    37be:	b7 01       	movw	r22, r14
    37c0:	c6 01       	movw	r24, r12
    37c2:	c0 96       	adiw	r24, 0x30	; 48
    37c4:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    37c8:	54 c1       	rjmp	.+680    	; 0x3a72 <vfprintf+0x68a>
    37ca:	83 36       	cpi	r24, 0x63	; 99
    37cc:	31 f0       	breq	.+12     	; 0x37da <vfprintf+0x3f2>
    37ce:	83 37       	cpi	r24, 0x73	; 115
    37d0:	79 f0       	breq	.+30     	; 0x37f0 <vfprintf+0x408>
    37d2:	83 35       	cpi	r24, 0x53	; 83
    37d4:	09 f0       	breq	.+2      	; 0x37d8 <vfprintf+0x3f0>
    37d6:	56 c0       	rjmp	.+172    	; 0x3884 <vfprintf+0x49c>
    37d8:	20 c0       	rjmp	.+64     	; 0x381a <vfprintf+0x432>
    37da:	56 01       	movw	r10, r12
    37dc:	32 e0       	ldi	r19, 0x02	; 2
    37de:	a3 0e       	add	r10, r19
    37e0:	b1 1c       	adc	r11, r1
    37e2:	f6 01       	movw	r30, r12
    37e4:	80 81       	ld	r24, Z
    37e6:	89 83       	std	Y+1, r24	; 0x01
    37e8:	01 e0       	ldi	r16, 0x01	; 1
    37ea:	10 e0       	ldi	r17, 0x00	; 0
    37ec:	63 01       	movw	r12, r6
    37ee:	12 c0       	rjmp	.+36     	; 0x3814 <vfprintf+0x42c>
    37f0:	56 01       	movw	r10, r12
    37f2:	f2 e0       	ldi	r31, 0x02	; 2
    37f4:	af 0e       	add	r10, r31
    37f6:	b1 1c       	adc	r11, r1
    37f8:	f6 01       	movw	r30, r12
    37fa:	c0 80       	ld	r12, Z
    37fc:	d1 80       	ldd	r13, Z+1	; 0x01
    37fe:	96 fe       	sbrs	r9, 6
    3800:	03 c0       	rjmp	.+6      	; 0x3808 <vfprintf+0x420>
    3802:	61 2f       	mov	r22, r17
    3804:	70 e0       	ldi	r23, 0x00	; 0
    3806:	02 c0       	rjmp	.+4      	; 0x380c <vfprintf+0x424>
    3808:	6f ef       	ldi	r22, 0xFF	; 255
    380a:	7f ef       	ldi	r23, 0xFF	; 255
    380c:	c6 01       	movw	r24, r12
    380e:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <strnlen>
    3812:	8c 01       	movw	r16, r24
    3814:	f9 2d       	mov	r31, r9
    3816:	ff 77       	andi	r31, 0x7F	; 127
    3818:	14 c0       	rjmp	.+40     	; 0x3842 <vfprintf+0x45a>
    381a:	56 01       	movw	r10, r12
    381c:	22 e0       	ldi	r18, 0x02	; 2
    381e:	a2 0e       	add	r10, r18
    3820:	b1 1c       	adc	r11, r1
    3822:	f6 01       	movw	r30, r12
    3824:	c0 80       	ld	r12, Z
    3826:	d1 80       	ldd	r13, Z+1	; 0x01
    3828:	96 fe       	sbrs	r9, 6
    382a:	03 c0       	rjmp	.+6      	; 0x3832 <vfprintf+0x44a>
    382c:	61 2f       	mov	r22, r17
    382e:	70 e0       	ldi	r23, 0x00	; 0
    3830:	02 c0       	rjmp	.+4      	; 0x3836 <vfprintf+0x44e>
    3832:	6f ef       	ldi	r22, 0xFF	; 255
    3834:	7f ef       	ldi	r23, 0xFF	; 255
    3836:	c6 01       	movw	r24, r12
    3838:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <strnlen_P>
    383c:	8c 01       	movw	r16, r24
    383e:	f9 2d       	mov	r31, r9
    3840:	f0 68       	ori	r31, 0x80	; 128
    3842:	9f 2e       	mov	r9, r31
    3844:	f3 fd       	sbrc	r31, 3
    3846:	1a c0       	rjmp	.+52     	; 0x387c <vfprintf+0x494>
    3848:	85 2d       	mov	r24, r5
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	08 17       	cp	r16, r24
    384e:	19 07       	cpc	r17, r25
    3850:	a8 f4       	brcc	.+42     	; 0x387c <vfprintf+0x494>
    3852:	b7 01       	movw	r22, r14
    3854:	80 e2       	ldi	r24, 0x20	; 32
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    385c:	5a 94       	dec	r5
    385e:	f4 cf       	rjmp	.-24     	; 0x3848 <vfprintf+0x460>
    3860:	f6 01       	movw	r30, r12
    3862:	97 fc       	sbrc	r9, 7
    3864:	85 91       	lpm	r24, Z+
    3866:	97 fe       	sbrs	r9, 7
    3868:	81 91       	ld	r24, Z+
    386a:	6f 01       	movw	r12, r30
    386c:	b7 01       	movw	r22, r14
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    3874:	51 10       	cpse	r5, r1
    3876:	5a 94       	dec	r5
    3878:	01 50       	subi	r16, 0x01	; 1
    387a:	11 09       	sbc	r17, r1
    387c:	01 15       	cp	r16, r1
    387e:	11 05       	cpc	r17, r1
    3880:	79 f7       	brne	.-34     	; 0x3860 <vfprintf+0x478>
    3882:	f7 c0       	rjmp	.+494    	; 0x3a72 <vfprintf+0x68a>
    3884:	84 36       	cpi	r24, 0x64	; 100
    3886:	11 f0       	breq	.+4      	; 0x388c <vfprintf+0x4a4>
    3888:	89 36       	cpi	r24, 0x69	; 105
    388a:	61 f5       	brne	.+88     	; 0x38e4 <vfprintf+0x4fc>
    388c:	56 01       	movw	r10, r12
    388e:	97 fe       	sbrs	r9, 7
    3890:	09 c0       	rjmp	.+18     	; 0x38a4 <vfprintf+0x4bc>
    3892:	24 e0       	ldi	r18, 0x04	; 4
    3894:	a2 0e       	add	r10, r18
    3896:	b1 1c       	adc	r11, r1
    3898:	f6 01       	movw	r30, r12
    389a:	60 81       	ld	r22, Z
    389c:	71 81       	ldd	r23, Z+1	; 0x01
    389e:	82 81       	ldd	r24, Z+2	; 0x02
    38a0:	93 81       	ldd	r25, Z+3	; 0x03
    38a2:	0a c0       	rjmp	.+20     	; 0x38b8 <vfprintf+0x4d0>
    38a4:	f2 e0       	ldi	r31, 0x02	; 2
    38a6:	af 0e       	add	r10, r31
    38a8:	b1 1c       	adc	r11, r1
    38aa:	f6 01       	movw	r30, r12
    38ac:	60 81       	ld	r22, Z
    38ae:	71 81       	ldd	r23, Z+1	; 0x01
    38b0:	07 2e       	mov	r0, r23
    38b2:	00 0c       	add	r0, r0
    38b4:	88 0b       	sbc	r24, r24
    38b6:	99 0b       	sbc	r25, r25
    38b8:	f9 2d       	mov	r31, r9
    38ba:	ff 76       	andi	r31, 0x6F	; 111
    38bc:	9f 2e       	mov	r9, r31
    38be:	97 ff       	sbrs	r25, 7
    38c0:	09 c0       	rjmp	.+18     	; 0x38d4 <vfprintf+0x4ec>
    38c2:	90 95       	com	r25
    38c4:	80 95       	com	r24
    38c6:	70 95       	com	r23
    38c8:	61 95       	neg	r22
    38ca:	7f 4f       	sbci	r23, 0xFF	; 255
    38cc:	8f 4f       	sbci	r24, 0xFF	; 255
    38ce:	9f 4f       	sbci	r25, 0xFF	; 255
    38d0:	f0 68       	ori	r31, 0x80	; 128
    38d2:	9f 2e       	mov	r9, r31
    38d4:	2a e0       	ldi	r18, 0x0A	; 10
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	a3 01       	movw	r20, r6
    38da:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__ultoa_invert>
    38de:	c8 2e       	mov	r12, r24
    38e0:	c6 18       	sub	r12, r6
    38e2:	3f c0       	rjmp	.+126    	; 0x3962 <vfprintf+0x57a>
    38e4:	09 2d       	mov	r16, r9
    38e6:	85 37       	cpi	r24, 0x75	; 117
    38e8:	21 f4       	brne	.+8      	; 0x38f2 <vfprintf+0x50a>
    38ea:	0f 7e       	andi	r16, 0xEF	; 239
    38ec:	2a e0       	ldi	r18, 0x0A	; 10
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	1d c0       	rjmp	.+58     	; 0x392c <vfprintf+0x544>
    38f2:	09 7f       	andi	r16, 0xF9	; 249
    38f4:	8f 36       	cpi	r24, 0x6F	; 111
    38f6:	91 f0       	breq	.+36     	; 0x391c <vfprintf+0x534>
    38f8:	18 f4       	brcc	.+6      	; 0x3900 <vfprintf+0x518>
    38fa:	88 35       	cpi	r24, 0x58	; 88
    38fc:	59 f0       	breq	.+22     	; 0x3914 <vfprintf+0x52c>
    38fe:	c3 c0       	rjmp	.+390    	; 0x3a86 <vfprintf+0x69e>
    3900:	80 37       	cpi	r24, 0x70	; 112
    3902:	19 f0       	breq	.+6      	; 0x390a <vfprintf+0x522>
    3904:	88 37       	cpi	r24, 0x78	; 120
    3906:	11 f0       	breq	.+4      	; 0x390c <vfprintf+0x524>
    3908:	be c0       	rjmp	.+380    	; 0x3a86 <vfprintf+0x69e>
    390a:	00 61       	ori	r16, 0x10	; 16
    390c:	04 ff       	sbrs	r16, 4
    390e:	09 c0       	rjmp	.+18     	; 0x3922 <vfprintf+0x53a>
    3910:	04 60       	ori	r16, 0x04	; 4
    3912:	07 c0       	rjmp	.+14     	; 0x3922 <vfprintf+0x53a>
    3914:	94 fe       	sbrs	r9, 4
    3916:	08 c0       	rjmp	.+16     	; 0x3928 <vfprintf+0x540>
    3918:	06 60       	ori	r16, 0x06	; 6
    391a:	06 c0       	rjmp	.+12     	; 0x3928 <vfprintf+0x540>
    391c:	28 e0       	ldi	r18, 0x08	; 8
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	05 c0       	rjmp	.+10     	; 0x392c <vfprintf+0x544>
    3922:	20 e1       	ldi	r18, 0x10	; 16
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	02 c0       	rjmp	.+4      	; 0x392c <vfprintf+0x544>
    3928:	20 e1       	ldi	r18, 0x10	; 16
    392a:	32 e0       	ldi	r19, 0x02	; 2
    392c:	56 01       	movw	r10, r12
    392e:	07 ff       	sbrs	r16, 7
    3930:	09 c0       	rjmp	.+18     	; 0x3944 <vfprintf+0x55c>
    3932:	84 e0       	ldi	r24, 0x04	; 4
    3934:	a8 0e       	add	r10, r24
    3936:	b1 1c       	adc	r11, r1
    3938:	f6 01       	movw	r30, r12
    393a:	60 81       	ld	r22, Z
    393c:	71 81       	ldd	r23, Z+1	; 0x01
    393e:	82 81       	ldd	r24, Z+2	; 0x02
    3940:	93 81       	ldd	r25, Z+3	; 0x03
    3942:	08 c0       	rjmp	.+16     	; 0x3954 <vfprintf+0x56c>
    3944:	f2 e0       	ldi	r31, 0x02	; 2
    3946:	af 0e       	add	r10, r31
    3948:	b1 1c       	adc	r11, r1
    394a:	f6 01       	movw	r30, r12
    394c:	60 81       	ld	r22, Z
    394e:	71 81       	ldd	r23, Z+1	; 0x01
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	a3 01       	movw	r20, r6
    3956:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__ultoa_invert>
    395a:	c8 2e       	mov	r12, r24
    395c:	c6 18       	sub	r12, r6
    395e:	0f 77       	andi	r16, 0x7F	; 127
    3960:	90 2e       	mov	r9, r16
    3962:	96 fe       	sbrs	r9, 6
    3964:	0b c0       	rjmp	.+22     	; 0x397c <vfprintf+0x594>
    3966:	09 2d       	mov	r16, r9
    3968:	0e 7f       	andi	r16, 0xFE	; 254
    396a:	c1 16       	cp	r12, r17
    396c:	50 f4       	brcc	.+20     	; 0x3982 <vfprintf+0x59a>
    396e:	94 fe       	sbrs	r9, 4
    3970:	0a c0       	rjmp	.+20     	; 0x3986 <vfprintf+0x59e>
    3972:	92 fc       	sbrc	r9, 2
    3974:	08 c0       	rjmp	.+16     	; 0x3986 <vfprintf+0x59e>
    3976:	09 2d       	mov	r16, r9
    3978:	0e 7e       	andi	r16, 0xEE	; 238
    397a:	05 c0       	rjmp	.+10     	; 0x3986 <vfprintf+0x59e>
    397c:	dc 2c       	mov	r13, r12
    397e:	09 2d       	mov	r16, r9
    3980:	03 c0       	rjmp	.+6      	; 0x3988 <vfprintf+0x5a0>
    3982:	dc 2c       	mov	r13, r12
    3984:	01 c0       	rjmp	.+2      	; 0x3988 <vfprintf+0x5a0>
    3986:	d1 2e       	mov	r13, r17
    3988:	04 ff       	sbrs	r16, 4
    398a:	0d c0       	rjmp	.+26     	; 0x39a6 <vfprintf+0x5be>
    398c:	fe 01       	movw	r30, r28
    398e:	ec 0d       	add	r30, r12
    3990:	f1 1d       	adc	r31, r1
    3992:	80 81       	ld	r24, Z
    3994:	80 33       	cpi	r24, 0x30	; 48
    3996:	11 f4       	brne	.+4      	; 0x399c <vfprintf+0x5b4>
    3998:	09 7e       	andi	r16, 0xE9	; 233
    399a:	09 c0       	rjmp	.+18     	; 0x39ae <vfprintf+0x5c6>
    399c:	02 ff       	sbrs	r16, 2
    399e:	06 c0       	rjmp	.+12     	; 0x39ac <vfprintf+0x5c4>
    39a0:	d3 94       	inc	r13
    39a2:	d3 94       	inc	r13
    39a4:	04 c0       	rjmp	.+8      	; 0x39ae <vfprintf+0x5c6>
    39a6:	80 2f       	mov	r24, r16
    39a8:	86 78       	andi	r24, 0x86	; 134
    39aa:	09 f0       	breq	.+2      	; 0x39ae <vfprintf+0x5c6>
    39ac:	d3 94       	inc	r13
    39ae:	03 fd       	sbrc	r16, 3
    39b0:	11 c0       	rjmp	.+34     	; 0x39d4 <vfprintf+0x5ec>
    39b2:	00 ff       	sbrs	r16, 0
    39b4:	06 c0       	rjmp	.+12     	; 0x39c2 <vfprintf+0x5da>
    39b6:	1c 2d       	mov	r17, r12
    39b8:	d5 14       	cp	r13, r5
    39ba:	80 f4       	brcc	.+32     	; 0x39dc <vfprintf+0x5f4>
    39bc:	15 0d       	add	r17, r5
    39be:	1d 19       	sub	r17, r13
    39c0:	0d c0       	rjmp	.+26     	; 0x39dc <vfprintf+0x5f4>
    39c2:	d5 14       	cp	r13, r5
    39c4:	58 f4       	brcc	.+22     	; 0x39dc <vfprintf+0x5f4>
    39c6:	b7 01       	movw	r22, r14
    39c8:	80 e2       	ldi	r24, 0x20	; 32
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    39d0:	d3 94       	inc	r13
    39d2:	f7 cf       	rjmp	.-18     	; 0x39c2 <vfprintf+0x5da>
    39d4:	d5 14       	cp	r13, r5
    39d6:	10 f4       	brcc	.+4      	; 0x39dc <vfprintf+0x5f4>
    39d8:	5d 18       	sub	r5, r13
    39da:	01 c0       	rjmp	.+2      	; 0x39de <vfprintf+0x5f6>
    39dc:	51 2c       	mov	r5, r1
    39de:	04 ff       	sbrs	r16, 4
    39e0:	10 c0       	rjmp	.+32     	; 0x3a02 <vfprintf+0x61a>
    39e2:	b7 01       	movw	r22, r14
    39e4:	80 e3       	ldi	r24, 0x30	; 48
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    39ec:	02 ff       	sbrs	r16, 2
    39ee:	17 c0       	rjmp	.+46     	; 0x3a1e <vfprintf+0x636>
    39f0:	01 fd       	sbrc	r16, 1
    39f2:	03 c0       	rjmp	.+6      	; 0x39fa <vfprintf+0x612>
    39f4:	88 e7       	ldi	r24, 0x78	; 120
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	02 c0       	rjmp	.+4      	; 0x39fe <vfprintf+0x616>
    39fa:	88 e5       	ldi	r24, 0x58	; 88
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	b7 01       	movw	r22, r14
    3a00:	0c c0       	rjmp	.+24     	; 0x3a1a <vfprintf+0x632>
    3a02:	80 2f       	mov	r24, r16
    3a04:	86 78       	andi	r24, 0x86	; 134
    3a06:	59 f0       	breq	.+22     	; 0x3a1e <vfprintf+0x636>
    3a08:	01 ff       	sbrs	r16, 1
    3a0a:	02 c0       	rjmp	.+4      	; 0x3a10 <vfprintf+0x628>
    3a0c:	8b e2       	ldi	r24, 0x2B	; 43
    3a0e:	01 c0       	rjmp	.+2      	; 0x3a12 <vfprintf+0x62a>
    3a10:	80 e2       	ldi	r24, 0x20	; 32
    3a12:	07 fd       	sbrc	r16, 7
    3a14:	8d e2       	ldi	r24, 0x2D	; 45
    3a16:	b7 01       	movw	r22, r14
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    3a1e:	c1 16       	cp	r12, r17
    3a20:	38 f4       	brcc	.+14     	; 0x3a30 <vfprintf+0x648>
    3a22:	b7 01       	movw	r22, r14
    3a24:	80 e3       	ldi	r24, 0x30	; 48
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    3a2c:	11 50       	subi	r17, 0x01	; 1
    3a2e:	f7 cf       	rjmp	.-18     	; 0x3a1e <vfprintf+0x636>
    3a30:	ca 94       	dec	r12
    3a32:	f3 01       	movw	r30, r6
    3a34:	ec 0d       	add	r30, r12
    3a36:	f1 1d       	adc	r31, r1
    3a38:	80 81       	ld	r24, Z
    3a3a:	b7 01       	movw	r22, r14
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    3a42:	c1 10       	cpse	r12, r1
    3a44:	f5 cf       	rjmp	.-22     	; 0x3a30 <vfprintf+0x648>
    3a46:	15 c0       	rjmp	.+42     	; 0x3a72 <vfprintf+0x68a>
    3a48:	f4 e0       	ldi	r31, 0x04	; 4
    3a4a:	f5 15       	cp	r31, r5
    3a4c:	60 f5       	brcc	.+88     	; 0x3aa6 <vfprintf+0x6be>
    3a4e:	84 e0       	ldi	r24, 0x04	; 4
    3a50:	58 1a       	sub	r5, r24
    3a52:	93 fe       	sbrs	r9, 3
    3a54:	1f c0       	rjmp	.+62     	; 0x3a94 <vfprintf+0x6ac>
    3a56:	01 11       	cpse	r16, r1
    3a58:	27 c0       	rjmp	.+78     	; 0x3aa8 <vfprintf+0x6c0>
    3a5a:	2c 85       	ldd	r18, Y+12	; 0x0c
    3a5c:	23 ff       	sbrs	r18, 3
    3a5e:	2a c0       	rjmp	.+84     	; 0x3ab4 <vfprintf+0x6cc>
    3a60:	00 e5       	ldi	r16, 0x50	; 80
    3a62:	11 e0       	ldi	r17, 0x01	; 1
    3a64:	39 2d       	mov	r19, r9
    3a66:	30 71       	andi	r19, 0x10	; 16
    3a68:	93 2e       	mov	r9, r19
    3a6a:	f8 01       	movw	r30, r16
    3a6c:	84 91       	lpm	r24, Z
    3a6e:	81 11       	cpse	r24, r1
    3a70:	24 c0       	rjmp	.+72     	; 0x3aba <vfprintf+0x6d2>
    3a72:	55 20       	and	r5, r5
    3a74:	09 f4       	brne	.+2      	; 0x3a78 <vfprintf+0x690>
    3a76:	e4 cc       	rjmp	.-1592   	; 0x3440 <vfprintf+0x58>
    3a78:	b7 01       	movw	r22, r14
    3a7a:	80 e2       	ldi	r24, 0x20	; 32
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    3a82:	5a 94       	dec	r5
    3a84:	f6 cf       	rjmp	.-20     	; 0x3a72 <vfprintf+0x68a>
    3a86:	f7 01       	movw	r30, r14
    3a88:	86 81       	ldd	r24, Z+6	; 0x06
    3a8a:	97 81       	ldd	r25, Z+7	; 0x07
    3a8c:	26 c0       	rjmp	.+76     	; 0x3ada <vfprintf+0x6f2>
    3a8e:	8f ef       	ldi	r24, 0xFF	; 255
    3a90:	9f ef       	ldi	r25, 0xFF	; 255
    3a92:	23 c0       	rjmp	.+70     	; 0x3ada <vfprintf+0x6f2>
    3a94:	b7 01       	movw	r22, r14
    3a96:	80 e2       	ldi	r24, 0x20	; 32
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    3a9e:	5a 94       	dec	r5
    3aa0:	51 10       	cpse	r5, r1
    3aa2:	f8 cf       	rjmp	.-16     	; 0x3a94 <vfprintf+0x6ac>
    3aa4:	d8 cf       	rjmp	.-80     	; 0x3a56 <vfprintf+0x66e>
    3aa6:	51 2c       	mov	r5, r1
    3aa8:	b7 01       	movw	r22, r14
    3aaa:	80 2f       	mov	r24, r16
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    3ab2:	d3 cf       	rjmp	.-90     	; 0x3a5a <vfprintf+0x672>
    3ab4:	04 e5       	ldi	r16, 0x54	; 84
    3ab6:	11 e0       	ldi	r17, 0x01	; 1
    3ab8:	d5 cf       	rjmp	.-86     	; 0x3a64 <vfprintf+0x67c>
    3aba:	91 10       	cpse	r9, r1
    3abc:	80 52       	subi	r24, 0x20	; 32
    3abe:	b7 01       	movw	r22, r14
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <fputc>
    3ac6:	0f 5f       	subi	r16, 0xFF	; 255
    3ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aca:	cf cf       	rjmp	.-98     	; 0x3a6a <vfprintf+0x682>
    3acc:	23 e0       	ldi	r18, 0x03	; 3
    3ace:	25 15       	cp	r18, r5
    3ad0:	10 f4       	brcc	.+4      	; 0x3ad6 <vfprintf+0x6ee>
    3ad2:	83 e0       	ldi	r24, 0x03	; 3
    3ad4:	bd cf       	rjmp	.-134    	; 0x3a50 <vfprintf+0x668>
    3ad6:	51 2c       	mov	r5, r1
    3ad8:	c0 cf       	rjmp	.-128    	; 0x3a5a <vfprintf+0x672>
    3ada:	60 96       	adiw	r28, 0x10	; 16
    3adc:	e2 e1       	ldi	r30, 0x12	; 18
    3ade:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__epilogue_restores__>

00003ae2 <__divmodhi4>:
    3ae2:	97 fb       	bst	r25, 7
    3ae4:	07 2e       	mov	r0, r23
    3ae6:	16 f4       	brtc	.+4      	; 0x3aec <__divmodhi4+0xa>
    3ae8:	00 94       	com	r0
    3aea:	07 d0       	rcall	.+14     	; 0x3afa <__divmodhi4_neg1>
    3aec:	77 fd       	sbrc	r23, 7
    3aee:	09 d0       	rcall	.+18     	; 0x3b02 <__divmodhi4_neg2>
    3af0:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <__udivmodhi4>
    3af4:	07 fc       	sbrc	r0, 7
    3af6:	05 d0       	rcall	.+10     	; 0x3b02 <__divmodhi4_neg2>
    3af8:	3e f4       	brtc	.+14     	; 0x3b08 <__divmodhi4_exit>

00003afa <__divmodhi4_neg1>:
    3afa:	90 95       	com	r25
    3afc:	81 95       	neg	r24
    3afe:	9f 4f       	sbci	r25, 0xFF	; 255
    3b00:	08 95       	ret

00003b02 <__divmodhi4_neg2>:
    3b02:	70 95       	com	r23
    3b04:	61 95       	neg	r22
    3b06:	7f 4f       	sbci	r23, 0xFF	; 255

00003b08 <__divmodhi4_exit>:
    3b08:	08 95       	ret

00003b0a <__tablejump2__>:
    3b0a:	ee 0f       	add	r30, r30
    3b0c:	ff 1f       	adc	r31, r31
    3b0e:	05 90       	lpm	r0, Z+
    3b10:	f4 91       	lpm	r31, Z
    3b12:	e0 2d       	mov	r30, r0
    3b14:	09 94       	ijmp

00003b16 <__prologue_saves__>:
    3b16:	2f 92       	push	r2
    3b18:	3f 92       	push	r3
    3b1a:	4f 92       	push	r4
    3b1c:	5f 92       	push	r5
    3b1e:	6f 92       	push	r6
    3b20:	7f 92       	push	r7
    3b22:	8f 92       	push	r8
    3b24:	9f 92       	push	r9
    3b26:	af 92       	push	r10
    3b28:	bf 92       	push	r11
    3b2a:	cf 92       	push	r12
    3b2c:	df 92       	push	r13
    3b2e:	ef 92       	push	r14
    3b30:	ff 92       	push	r15
    3b32:	0f 93       	push	r16
    3b34:	1f 93       	push	r17
    3b36:	cf 93       	push	r28
    3b38:	df 93       	push	r29
    3b3a:	cd b7       	in	r28, 0x3d	; 61
    3b3c:	de b7       	in	r29, 0x3e	; 62
    3b3e:	ca 1b       	sub	r28, r26
    3b40:	db 0b       	sbc	r29, r27
    3b42:	cd bf       	out	0x3d, r28	; 61
    3b44:	de bf       	out	0x3e, r29	; 62
    3b46:	09 94       	ijmp

00003b48 <__epilogue_restores__>:
    3b48:	2a 88       	ldd	r2, Y+18	; 0x12
    3b4a:	39 88       	ldd	r3, Y+17	; 0x11
    3b4c:	48 88       	ldd	r4, Y+16	; 0x10
    3b4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b50:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b52:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b54:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b56:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b58:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b5a:	b9 84       	ldd	r11, Y+9	; 0x09
    3b5c:	c8 84       	ldd	r12, Y+8	; 0x08
    3b5e:	df 80       	ldd	r13, Y+7	; 0x07
    3b60:	ee 80       	ldd	r14, Y+6	; 0x06
    3b62:	fd 80       	ldd	r15, Y+5	; 0x05
    3b64:	0c 81       	ldd	r16, Y+4	; 0x04
    3b66:	1b 81       	ldd	r17, Y+3	; 0x03
    3b68:	aa 81       	ldd	r26, Y+2	; 0x02
    3b6a:	b9 81       	ldd	r27, Y+1	; 0x01
    3b6c:	ce 0f       	add	r28, r30
    3b6e:	d1 1d       	adc	r29, r1
    3b70:	cd bf       	out	0x3d, r28	; 61
    3b72:	de bf       	out	0x3e, r29	; 62
    3b74:	ed 01       	movw	r28, r26
    3b76:	08 95       	ret

00003b78 <__udivmodhi4>:
    3b78:	aa 1b       	sub	r26, r26
    3b7a:	bb 1b       	sub	r27, r27
    3b7c:	51 e1       	ldi	r21, 0x11	; 17
    3b7e:	07 c0       	rjmp	.+14     	; 0x3b8e <__udivmodhi4_ep>

00003b80 <__udivmodhi4_loop>:
    3b80:	aa 1f       	adc	r26, r26
    3b82:	bb 1f       	adc	r27, r27
    3b84:	a6 17       	cp	r26, r22
    3b86:	b7 07       	cpc	r27, r23
    3b88:	10 f0       	brcs	.+4      	; 0x3b8e <__udivmodhi4_ep>
    3b8a:	a6 1b       	sub	r26, r22
    3b8c:	b7 0b       	sbc	r27, r23

00003b8e <__udivmodhi4_ep>:
    3b8e:	88 1f       	adc	r24, r24
    3b90:	99 1f       	adc	r25, r25
    3b92:	5a 95       	dec	r21
    3b94:	a9 f7       	brne	.-22     	; 0x3b80 <__udivmodhi4_loop>
    3b96:	80 95       	com	r24
    3b98:	90 95       	com	r25
    3b9a:	bc 01       	movw	r22, r24
    3b9c:	cd 01       	movw	r24, r26
    3b9e:	08 95       	ret

00003ba0 <__ftoa_engine>:
    3ba0:	28 30       	cpi	r18, 0x08	; 8
    3ba2:	08 f0       	brcs	.+2      	; 0x3ba6 <__ftoa_engine+0x6>
    3ba4:	27 e0       	ldi	r18, 0x07	; 7
    3ba6:	33 27       	eor	r19, r19
    3ba8:	da 01       	movw	r26, r20
    3baa:	99 0f       	add	r25, r25
    3bac:	31 1d       	adc	r19, r1
    3bae:	87 fd       	sbrc	r24, 7
    3bb0:	91 60       	ori	r25, 0x01	; 1
    3bb2:	00 96       	adiw	r24, 0x00	; 0
    3bb4:	61 05       	cpc	r22, r1
    3bb6:	71 05       	cpc	r23, r1
    3bb8:	39 f4       	brne	.+14     	; 0x3bc8 <__ftoa_engine+0x28>
    3bba:	32 60       	ori	r19, 0x02	; 2
    3bbc:	2e 5f       	subi	r18, 0xFE	; 254
    3bbe:	3d 93       	st	X+, r19
    3bc0:	30 e3       	ldi	r19, 0x30	; 48
    3bc2:	2a 95       	dec	r18
    3bc4:	e1 f7       	brne	.-8      	; 0x3bbe <__ftoa_engine+0x1e>
    3bc6:	08 95       	ret
    3bc8:	9f 3f       	cpi	r25, 0xFF	; 255
    3bca:	30 f0       	brcs	.+12     	; 0x3bd8 <__ftoa_engine+0x38>
    3bcc:	80 38       	cpi	r24, 0x80	; 128
    3bce:	71 05       	cpc	r23, r1
    3bd0:	61 05       	cpc	r22, r1
    3bd2:	09 f0       	breq	.+2      	; 0x3bd6 <__ftoa_engine+0x36>
    3bd4:	3c 5f       	subi	r19, 0xFC	; 252
    3bd6:	3c 5f       	subi	r19, 0xFC	; 252
    3bd8:	3d 93       	st	X+, r19
    3bda:	91 30       	cpi	r25, 0x01	; 1
    3bdc:	08 f0       	brcs	.+2      	; 0x3be0 <__ftoa_engine+0x40>
    3bde:	80 68       	ori	r24, 0x80	; 128
    3be0:	91 1d       	adc	r25, r1
    3be2:	df 93       	push	r29
    3be4:	cf 93       	push	r28
    3be6:	1f 93       	push	r17
    3be8:	0f 93       	push	r16
    3bea:	ff 92       	push	r15
    3bec:	ef 92       	push	r14
    3bee:	19 2f       	mov	r17, r25
    3bf0:	98 7f       	andi	r25, 0xF8	; 248
    3bf2:	96 95       	lsr	r25
    3bf4:	e9 2f       	mov	r30, r25
    3bf6:	96 95       	lsr	r25
    3bf8:	96 95       	lsr	r25
    3bfa:	e9 0f       	add	r30, r25
    3bfc:	ff 27       	eor	r31, r31
    3bfe:	ee 54       	subi	r30, 0x4E	; 78
    3c00:	fe 4f       	sbci	r31, 0xFE	; 254
    3c02:	99 27       	eor	r25, r25
    3c04:	33 27       	eor	r19, r19
    3c06:	ee 24       	eor	r14, r14
    3c08:	ff 24       	eor	r15, r15
    3c0a:	a7 01       	movw	r20, r14
    3c0c:	e7 01       	movw	r28, r14
    3c0e:	05 90       	lpm	r0, Z+
    3c10:	08 94       	sec
    3c12:	07 94       	ror	r0
    3c14:	28 f4       	brcc	.+10     	; 0x3c20 <__ftoa_engine+0x80>
    3c16:	36 0f       	add	r19, r22
    3c18:	e7 1e       	adc	r14, r23
    3c1a:	f8 1e       	adc	r15, r24
    3c1c:	49 1f       	adc	r20, r25
    3c1e:	51 1d       	adc	r21, r1
    3c20:	66 0f       	add	r22, r22
    3c22:	77 1f       	adc	r23, r23
    3c24:	88 1f       	adc	r24, r24
    3c26:	99 1f       	adc	r25, r25
    3c28:	06 94       	lsr	r0
    3c2a:	a1 f7       	brne	.-24     	; 0x3c14 <__ftoa_engine+0x74>
    3c2c:	05 90       	lpm	r0, Z+
    3c2e:	07 94       	ror	r0
    3c30:	28 f4       	brcc	.+10     	; 0x3c3c <__ftoa_engine+0x9c>
    3c32:	e7 0e       	add	r14, r23
    3c34:	f8 1e       	adc	r15, r24
    3c36:	49 1f       	adc	r20, r25
    3c38:	56 1f       	adc	r21, r22
    3c3a:	c1 1d       	adc	r28, r1
    3c3c:	77 0f       	add	r23, r23
    3c3e:	88 1f       	adc	r24, r24
    3c40:	99 1f       	adc	r25, r25
    3c42:	66 1f       	adc	r22, r22
    3c44:	06 94       	lsr	r0
    3c46:	a1 f7       	brne	.-24     	; 0x3c30 <__ftoa_engine+0x90>
    3c48:	05 90       	lpm	r0, Z+
    3c4a:	07 94       	ror	r0
    3c4c:	28 f4       	brcc	.+10     	; 0x3c58 <__ftoa_engine+0xb8>
    3c4e:	f8 0e       	add	r15, r24
    3c50:	49 1f       	adc	r20, r25
    3c52:	56 1f       	adc	r21, r22
    3c54:	c7 1f       	adc	r28, r23
    3c56:	d1 1d       	adc	r29, r1
    3c58:	88 0f       	add	r24, r24
    3c5a:	99 1f       	adc	r25, r25
    3c5c:	66 1f       	adc	r22, r22
    3c5e:	77 1f       	adc	r23, r23
    3c60:	06 94       	lsr	r0
    3c62:	a1 f7       	brne	.-24     	; 0x3c4c <__ftoa_engine+0xac>
    3c64:	05 90       	lpm	r0, Z+
    3c66:	07 94       	ror	r0
    3c68:	20 f4       	brcc	.+8      	; 0x3c72 <__ftoa_engine+0xd2>
    3c6a:	49 0f       	add	r20, r25
    3c6c:	56 1f       	adc	r21, r22
    3c6e:	c7 1f       	adc	r28, r23
    3c70:	d8 1f       	adc	r29, r24
    3c72:	99 0f       	add	r25, r25
    3c74:	66 1f       	adc	r22, r22
    3c76:	77 1f       	adc	r23, r23
    3c78:	88 1f       	adc	r24, r24
    3c7a:	06 94       	lsr	r0
    3c7c:	a9 f7       	brne	.-22     	; 0x3c68 <__ftoa_engine+0xc8>
    3c7e:	84 91       	lpm	r24, Z
    3c80:	10 95       	com	r17
    3c82:	17 70       	andi	r17, 0x07	; 7
    3c84:	41 f0       	breq	.+16     	; 0x3c96 <__ftoa_engine+0xf6>
    3c86:	d6 95       	lsr	r29
    3c88:	c7 95       	ror	r28
    3c8a:	57 95       	ror	r21
    3c8c:	47 95       	ror	r20
    3c8e:	f7 94       	ror	r15
    3c90:	e7 94       	ror	r14
    3c92:	1a 95       	dec	r17
    3c94:	c1 f7       	brne	.-16     	; 0x3c86 <__ftoa_engine+0xe6>
    3c96:	e8 e5       	ldi	r30, 0x58	; 88
    3c98:	f1 e0       	ldi	r31, 0x01	; 1
    3c9a:	68 94       	set
    3c9c:	15 90       	lpm	r1, Z+
    3c9e:	15 91       	lpm	r17, Z+
    3ca0:	35 91       	lpm	r19, Z+
    3ca2:	65 91       	lpm	r22, Z+
    3ca4:	95 91       	lpm	r25, Z+
    3ca6:	05 90       	lpm	r0, Z+
    3ca8:	7f e2       	ldi	r23, 0x2F	; 47
    3caa:	73 95       	inc	r23
    3cac:	e1 18       	sub	r14, r1
    3cae:	f1 0a       	sbc	r15, r17
    3cb0:	43 0b       	sbc	r20, r19
    3cb2:	56 0b       	sbc	r21, r22
    3cb4:	c9 0b       	sbc	r28, r25
    3cb6:	d0 09       	sbc	r29, r0
    3cb8:	c0 f7       	brcc	.-16     	; 0x3caa <__ftoa_engine+0x10a>
    3cba:	e1 0c       	add	r14, r1
    3cbc:	f1 1e       	adc	r15, r17
    3cbe:	43 1f       	adc	r20, r19
    3cc0:	56 1f       	adc	r21, r22
    3cc2:	c9 1f       	adc	r28, r25
    3cc4:	d0 1d       	adc	r29, r0
    3cc6:	7e f4       	brtc	.+30     	; 0x3ce6 <__ftoa_engine+0x146>
    3cc8:	70 33       	cpi	r23, 0x30	; 48
    3cca:	11 f4       	brne	.+4      	; 0x3cd0 <__ftoa_engine+0x130>
    3ccc:	8a 95       	dec	r24
    3cce:	e6 cf       	rjmp	.-52     	; 0x3c9c <__ftoa_engine+0xfc>
    3cd0:	e8 94       	clt
    3cd2:	01 50       	subi	r16, 0x01	; 1
    3cd4:	30 f0       	brcs	.+12     	; 0x3ce2 <__ftoa_engine+0x142>
    3cd6:	08 0f       	add	r16, r24
    3cd8:	0a f4       	brpl	.+2      	; 0x3cdc <__ftoa_engine+0x13c>
    3cda:	00 27       	eor	r16, r16
    3cdc:	02 17       	cp	r16, r18
    3cde:	08 f4       	brcc	.+2      	; 0x3ce2 <__ftoa_engine+0x142>
    3ce0:	20 2f       	mov	r18, r16
    3ce2:	23 95       	inc	r18
    3ce4:	02 2f       	mov	r16, r18
    3ce6:	7a 33       	cpi	r23, 0x3A	; 58
    3ce8:	28 f0       	brcs	.+10     	; 0x3cf4 <__ftoa_engine+0x154>
    3cea:	79 e3       	ldi	r23, 0x39	; 57
    3cec:	7d 93       	st	X+, r23
    3cee:	2a 95       	dec	r18
    3cf0:	e9 f7       	brne	.-6      	; 0x3cec <__ftoa_engine+0x14c>
    3cf2:	10 c0       	rjmp	.+32     	; 0x3d14 <__ftoa_engine+0x174>
    3cf4:	7d 93       	st	X+, r23
    3cf6:	2a 95       	dec	r18
    3cf8:	89 f6       	brne	.-94     	; 0x3c9c <__ftoa_engine+0xfc>
    3cfa:	06 94       	lsr	r0
    3cfc:	97 95       	ror	r25
    3cfe:	67 95       	ror	r22
    3d00:	37 95       	ror	r19
    3d02:	17 95       	ror	r17
    3d04:	17 94       	ror	r1
    3d06:	e1 18       	sub	r14, r1
    3d08:	f1 0a       	sbc	r15, r17
    3d0a:	43 0b       	sbc	r20, r19
    3d0c:	56 0b       	sbc	r21, r22
    3d0e:	c9 0b       	sbc	r28, r25
    3d10:	d0 09       	sbc	r29, r0
    3d12:	98 f0       	brcs	.+38     	; 0x3d3a <__ftoa_engine+0x19a>
    3d14:	23 95       	inc	r18
    3d16:	7e 91       	ld	r23, -X
    3d18:	73 95       	inc	r23
    3d1a:	7a 33       	cpi	r23, 0x3A	; 58
    3d1c:	08 f0       	brcs	.+2      	; 0x3d20 <__ftoa_engine+0x180>
    3d1e:	70 e3       	ldi	r23, 0x30	; 48
    3d20:	7c 93       	st	X, r23
    3d22:	20 13       	cpse	r18, r16
    3d24:	b8 f7       	brcc	.-18     	; 0x3d14 <__ftoa_engine+0x174>
    3d26:	7e 91       	ld	r23, -X
    3d28:	70 61       	ori	r23, 0x10	; 16
    3d2a:	7d 93       	st	X+, r23
    3d2c:	30 f0       	brcs	.+12     	; 0x3d3a <__ftoa_engine+0x19a>
    3d2e:	83 95       	inc	r24
    3d30:	71 e3       	ldi	r23, 0x31	; 49
    3d32:	7d 93       	st	X+, r23
    3d34:	70 e3       	ldi	r23, 0x30	; 48
    3d36:	2a 95       	dec	r18
    3d38:	e1 f7       	brne	.-8      	; 0x3d32 <__ftoa_engine+0x192>
    3d3a:	11 24       	eor	r1, r1
    3d3c:	ef 90       	pop	r14
    3d3e:	ff 90       	pop	r15
    3d40:	0f 91       	pop	r16
    3d42:	1f 91       	pop	r17
    3d44:	cf 91       	pop	r28
    3d46:	df 91       	pop	r29
    3d48:	99 27       	eor	r25, r25
    3d4a:	87 fd       	sbrc	r24, 7
    3d4c:	90 95       	com	r25
    3d4e:	08 95       	ret

00003d50 <strnlen_P>:
    3d50:	fc 01       	movw	r30, r24
    3d52:	05 90       	lpm	r0, Z+
    3d54:	61 50       	subi	r22, 0x01	; 1
    3d56:	70 40       	sbci	r23, 0x00	; 0
    3d58:	01 10       	cpse	r0, r1
    3d5a:	d8 f7       	brcc	.-10     	; 0x3d52 <strnlen_P+0x2>
    3d5c:	80 95       	com	r24
    3d5e:	90 95       	com	r25
    3d60:	8e 0f       	add	r24, r30
    3d62:	9f 1f       	adc	r25, r31
    3d64:	08 95       	ret

00003d66 <strcat>:
    3d66:	fb 01       	movw	r30, r22
    3d68:	dc 01       	movw	r26, r24
    3d6a:	0d 90       	ld	r0, X+
    3d6c:	00 20       	and	r0, r0
    3d6e:	e9 f7       	brne	.-6      	; 0x3d6a <strcat+0x4>
    3d70:	11 97       	sbiw	r26, 0x01	; 1
    3d72:	01 90       	ld	r0, Z+
    3d74:	0d 92       	st	X+, r0
    3d76:	00 20       	and	r0, r0
    3d78:	e1 f7       	brne	.-8      	; 0x3d72 <strcat+0xc>
    3d7a:	08 95       	ret

00003d7c <strcpy>:
    3d7c:	fb 01       	movw	r30, r22
    3d7e:	dc 01       	movw	r26, r24
    3d80:	01 90       	ld	r0, Z+
    3d82:	0d 92       	st	X+, r0
    3d84:	00 20       	and	r0, r0
    3d86:	e1 f7       	brne	.-8      	; 0x3d80 <strcpy+0x4>
    3d88:	08 95       	ret

00003d8a <strnlen>:
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	61 50       	subi	r22, 0x01	; 1
    3d8e:	70 40       	sbci	r23, 0x00	; 0
    3d90:	01 90       	ld	r0, Z+
    3d92:	01 10       	cpse	r0, r1
    3d94:	d8 f7       	brcc	.-10     	; 0x3d8c <strnlen+0x2>
    3d96:	80 95       	com	r24
    3d98:	90 95       	com	r25
    3d9a:	8e 0f       	add	r24, r30
    3d9c:	9f 1f       	adc	r25, r31
    3d9e:	08 95       	ret

00003da0 <fputc>:
    3da0:	0f 93       	push	r16
    3da2:	1f 93       	push	r17
    3da4:	cf 93       	push	r28
    3da6:	df 93       	push	r29
    3da8:	fb 01       	movw	r30, r22
    3daa:	23 81       	ldd	r18, Z+3	; 0x03
    3dac:	21 fd       	sbrc	r18, 1
    3dae:	03 c0       	rjmp	.+6      	; 0x3db6 <fputc+0x16>
    3db0:	8f ef       	ldi	r24, 0xFF	; 255
    3db2:	9f ef       	ldi	r25, 0xFF	; 255
    3db4:	2c c0       	rjmp	.+88     	; 0x3e0e <fputc+0x6e>
    3db6:	22 ff       	sbrs	r18, 2
    3db8:	16 c0       	rjmp	.+44     	; 0x3de6 <fputc+0x46>
    3dba:	46 81       	ldd	r20, Z+6	; 0x06
    3dbc:	57 81       	ldd	r21, Z+7	; 0x07
    3dbe:	24 81       	ldd	r18, Z+4	; 0x04
    3dc0:	35 81       	ldd	r19, Z+5	; 0x05
    3dc2:	42 17       	cp	r20, r18
    3dc4:	53 07       	cpc	r21, r19
    3dc6:	44 f4       	brge	.+16     	; 0x3dd8 <fputc+0x38>
    3dc8:	a0 81       	ld	r26, Z
    3dca:	b1 81       	ldd	r27, Z+1	; 0x01
    3dcc:	9d 01       	movw	r18, r26
    3dce:	2f 5f       	subi	r18, 0xFF	; 255
    3dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd2:	20 83       	st	Z, r18
    3dd4:	31 83       	std	Z+1, r19	; 0x01
    3dd6:	8c 93       	st	X, r24
    3dd8:	26 81       	ldd	r18, Z+6	; 0x06
    3dda:	37 81       	ldd	r19, Z+7	; 0x07
    3ddc:	2f 5f       	subi	r18, 0xFF	; 255
    3dde:	3f 4f       	sbci	r19, 0xFF	; 255
    3de0:	26 83       	std	Z+6, r18	; 0x06
    3de2:	37 83       	std	Z+7, r19	; 0x07
    3de4:	14 c0       	rjmp	.+40     	; 0x3e0e <fputc+0x6e>
    3de6:	8b 01       	movw	r16, r22
    3de8:	ec 01       	movw	r28, r24
    3dea:	fb 01       	movw	r30, r22
    3dec:	00 84       	ldd	r0, Z+8	; 0x08
    3dee:	f1 85       	ldd	r31, Z+9	; 0x09
    3df0:	e0 2d       	mov	r30, r0
    3df2:	09 95       	icall
    3df4:	89 2b       	or	r24, r25
    3df6:	e1 f6       	brne	.-72     	; 0x3db0 <fputc+0x10>
    3df8:	d8 01       	movw	r26, r16
    3dfa:	16 96       	adiw	r26, 0x06	; 6
    3dfc:	8d 91       	ld	r24, X+
    3dfe:	9c 91       	ld	r25, X
    3e00:	17 97       	sbiw	r26, 0x07	; 7
    3e02:	01 96       	adiw	r24, 0x01	; 1
    3e04:	16 96       	adiw	r26, 0x06	; 6
    3e06:	8d 93       	st	X+, r24
    3e08:	9c 93       	st	X, r25
    3e0a:	17 97       	sbiw	r26, 0x07	; 7
    3e0c:	ce 01       	movw	r24, r28
    3e0e:	df 91       	pop	r29
    3e10:	cf 91       	pop	r28
    3e12:	1f 91       	pop	r17
    3e14:	0f 91       	pop	r16
    3e16:	08 95       	ret

00003e18 <sprintf>:
    3e18:	ae e0       	ldi	r26, 0x0E	; 14
    3e1a:	b0 e0       	ldi	r27, 0x00	; 0
    3e1c:	e2 e1       	ldi	r30, 0x12	; 18
    3e1e:	ff e1       	ldi	r31, 0x1F	; 31
    3e20:	0c 94 99 1d 	jmp	0x3b32	; 0x3b32 <__prologue_saves__+0x1c>
    3e24:	0d 89       	ldd	r16, Y+21	; 0x15
    3e26:	1e 89       	ldd	r17, Y+22	; 0x16
    3e28:	86 e0       	ldi	r24, 0x06	; 6
    3e2a:	8c 83       	std	Y+4, r24	; 0x04
    3e2c:	09 83       	std	Y+1, r16	; 0x01
    3e2e:	1a 83       	std	Y+2, r17	; 0x02
    3e30:	8f ef       	ldi	r24, 0xFF	; 255
    3e32:	9f e7       	ldi	r25, 0x7F	; 127
    3e34:	8d 83       	std	Y+5, r24	; 0x05
    3e36:	9e 83       	std	Y+6, r25	; 0x06
    3e38:	ae 01       	movw	r20, r28
    3e3a:	47 5e       	subi	r20, 0xE7	; 231
    3e3c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e3e:	6f 89       	ldd	r22, Y+23	; 0x17
    3e40:	78 8d       	ldd	r23, Y+24	; 0x18
    3e42:	ce 01       	movw	r24, r28
    3e44:	01 96       	adiw	r24, 0x01	; 1
    3e46:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <vfprintf>
    3e4a:	ef 81       	ldd	r30, Y+7	; 0x07
    3e4c:	f8 85       	ldd	r31, Y+8	; 0x08
    3e4e:	e0 0f       	add	r30, r16
    3e50:	f1 1f       	adc	r31, r17
    3e52:	10 82       	st	Z, r1
    3e54:	2e 96       	adiw	r28, 0x0e	; 14
    3e56:	e4 e0       	ldi	r30, 0x04	; 4
    3e58:	0c 94 b2 1d 	jmp	0x3b64	; 0x3b64 <__epilogue_restores__+0x1c>

00003e5c <__ultoa_invert>:
    3e5c:	fa 01       	movw	r30, r20
    3e5e:	aa 27       	eor	r26, r26
    3e60:	28 30       	cpi	r18, 0x08	; 8
    3e62:	51 f1       	breq	.+84     	; 0x3eb8 <__ultoa_invert+0x5c>
    3e64:	20 31       	cpi	r18, 0x10	; 16
    3e66:	81 f1       	breq	.+96     	; 0x3ec8 <__ultoa_invert+0x6c>
    3e68:	e8 94       	clt
    3e6a:	6f 93       	push	r22
    3e6c:	6e 7f       	andi	r22, 0xFE	; 254
    3e6e:	6e 5f       	subi	r22, 0xFE	; 254
    3e70:	7f 4f       	sbci	r23, 0xFF	; 255
    3e72:	8f 4f       	sbci	r24, 0xFF	; 255
    3e74:	9f 4f       	sbci	r25, 0xFF	; 255
    3e76:	af 4f       	sbci	r26, 0xFF	; 255
    3e78:	b1 e0       	ldi	r27, 0x01	; 1
    3e7a:	3e d0       	rcall	.+124    	; 0x3ef8 <__ultoa_invert+0x9c>
    3e7c:	b4 e0       	ldi	r27, 0x04	; 4
    3e7e:	3c d0       	rcall	.+120    	; 0x3ef8 <__ultoa_invert+0x9c>
    3e80:	67 0f       	add	r22, r23
    3e82:	78 1f       	adc	r23, r24
    3e84:	89 1f       	adc	r24, r25
    3e86:	9a 1f       	adc	r25, r26
    3e88:	a1 1d       	adc	r26, r1
    3e8a:	68 0f       	add	r22, r24
    3e8c:	79 1f       	adc	r23, r25
    3e8e:	8a 1f       	adc	r24, r26
    3e90:	91 1d       	adc	r25, r1
    3e92:	a1 1d       	adc	r26, r1
    3e94:	6a 0f       	add	r22, r26
    3e96:	71 1d       	adc	r23, r1
    3e98:	81 1d       	adc	r24, r1
    3e9a:	91 1d       	adc	r25, r1
    3e9c:	a1 1d       	adc	r26, r1
    3e9e:	20 d0       	rcall	.+64     	; 0x3ee0 <__ultoa_invert+0x84>
    3ea0:	09 f4       	brne	.+2      	; 0x3ea4 <__ultoa_invert+0x48>
    3ea2:	68 94       	set
    3ea4:	3f 91       	pop	r19
    3ea6:	2a e0       	ldi	r18, 0x0A	; 10
    3ea8:	26 9f       	mul	r18, r22
    3eaa:	11 24       	eor	r1, r1
    3eac:	30 19       	sub	r19, r0
    3eae:	30 5d       	subi	r19, 0xD0	; 208
    3eb0:	31 93       	st	Z+, r19
    3eb2:	de f6       	brtc	.-74     	; 0x3e6a <__ultoa_invert+0xe>
    3eb4:	cf 01       	movw	r24, r30
    3eb6:	08 95       	ret
    3eb8:	46 2f       	mov	r20, r22
    3eba:	47 70       	andi	r20, 0x07	; 7
    3ebc:	40 5d       	subi	r20, 0xD0	; 208
    3ebe:	41 93       	st	Z+, r20
    3ec0:	b3 e0       	ldi	r27, 0x03	; 3
    3ec2:	0f d0       	rcall	.+30     	; 0x3ee2 <__ultoa_invert+0x86>
    3ec4:	c9 f7       	brne	.-14     	; 0x3eb8 <__ultoa_invert+0x5c>
    3ec6:	f6 cf       	rjmp	.-20     	; 0x3eb4 <__ultoa_invert+0x58>
    3ec8:	46 2f       	mov	r20, r22
    3eca:	4f 70       	andi	r20, 0x0F	; 15
    3ecc:	40 5d       	subi	r20, 0xD0	; 208
    3ece:	4a 33       	cpi	r20, 0x3A	; 58
    3ed0:	18 f0       	brcs	.+6      	; 0x3ed8 <__ultoa_invert+0x7c>
    3ed2:	49 5d       	subi	r20, 0xD9	; 217
    3ed4:	31 fd       	sbrc	r19, 1
    3ed6:	40 52       	subi	r20, 0x20	; 32
    3ed8:	41 93       	st	Z+, r20
    3eda:	02 d0       	rcall	.+4      	; 0x3ee0 <__ultoa_invert+0x84>
    3edc:	a9 f7       	brne	.-22     	; 0x3ec8 <__ultoa_invert+0x6c>
    3ede:	ea cf       	rjmp	.-44     	; 0x3eb4 <__ultoa_invert+0x58>
    3ee0:	b4 e0       	ldi	r27, 0x04	; 4
    3ee2:	a6 95       	lsr	r26
    3ee4:	97 95       	ror	r25
    3ee6:	87 95       	ror	r24
    3ee8:	77 95       	ror	r23
    3eea:	67 95       	ror	r22
    3eec:	ba 95       	dec	r27
    3eee:	c9 f7       	brne	.-14     	; 0x3ee2 <__ultoa_invert+0x86>
    3ef0:	00 97       	sbiw	r24, 0x00	; 0
    3ef2:	61 05       	cpc	r22, r1
    3ef4:	71 05       	cpc	r23, r1
    3ef6:	08 95       	ret
    3ef8:	9b 01       	movw	r18, r22
    3efa:	ac 01       	movw	r20, r24
    3efc:	0a 2e       	mov	r0, r26
    3efe:	06 94       	lsr	r0
    3f00:	57 95       	ror	r21
    3f02:	47 95       	ror	r20
    3f04:	37 95       	ror	r19
    3f06:	27 95       	ror	r18
    3f08:	ba 95       	dec	r27
    3f0a:	c9 f7       	brne	.-14     	; 0x3efe <__ultoa_invert+0xa2>
    3f0c:	62 0f       	add	r22, r18
    3f0e:	73 1f       	adc	r23, r19
    3f10:	84 1f       	adc	r24, r20
    3f12:	95 1f       	adc	r25, r21
    3f14:	a0 1d       	adc	r26, r0
    3f16:	08 95       	ret

00003f18 <eeprom_read_block>:
    3f18:	60 50       	subi	r22, 0x00	; 0
    3f1a:	7c 4e       	sbci	r23, 0xEC	; 236
    3f1c:	0c 94 c7 1f 	jmp	0x3f8e	; 0x3f8e <memcpy>

00003f20 <eeprom_update_block>:
    3f20:	dc 01       	movw	r26, r24
    3f22:	a4 0f       	add	r26, r20
    3f24:	b5 1f       	adc	r27, r21
    3f26:	41 50       	subi	r20, 0x01	; 1
    3f28:	50 40       	sbci	r21, 0x00	; 0
    3f2a:	48 f0       	brcs	.+18     	; 0x3f3e <eeprom_update_block+0x1e>
    3f2c:	cb 01       	movw	r24, r22
    3f2e:	84 0f       	add	r24, r20
    3f30:	95 1f       	adc	r25, r21
    3f32:	2e 91       	ld	r18, -X
    3f34:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <eeprom_update_r18>
    3f38:	41 50       	subi	r20, 0x01	; 1
    3f3a:	50 40       	sbci	r21, 0x00	; 0
    3f3c:	d0 f7       	brcc	.-12     	; 0x3f32 <eeprom_update_block+0x12>
    3f3e:	08 95       	ret

00003f40 <eeprom_update_byte>:
    3f40:	26 2f       	mov	r18, r22

00003f42 <eeprom_update_r18>:
    3f42:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <eeprom_mapen>
    3f46:	00 80       	ld	r0, Z
    3f48:	02 16       	cp	r0, r18
    3f4a:	19 f0       	breq	.+6      	; 0x3f52 <eeprom_update_r18+0x10>
    3f4c:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <eeprom_write_r18>
    3f50:	01 97       	sbiw	r24, 0x01	; 1
    3f52:	01 97       	sbiw	r24, 0x01	; 1
    3f54:	08 95       	ret

00003f56 <eeprom_write_byte>:
    3f56:	26 2f       	mov	r18, r22

00003f58 <eeprom_write_r18>:
    3f58:	af 93       	push	r26
    3f5a:	bf 93       	push	r27
    3f5c:	e0 e0       	ldi	r30, 0x00	; 0
    3f5e:	f0 e1       	ldi	r31, 0x10	; 16
    3f60:	32 81       	ldd	r19, Z+2	; 0x02
    3f62:	31 fd       	sbrc	r19, 1
    3f64:	fd cf       	rjmp	.-6      	; 0x3f60 <eeprom_write_r18+0x8>
    3f66:	dc 01       	movw	r26, r24
    3f68:	a0 50       	subi	r26, 0x00	; 0
    3f6a:	bc 4e       	sbci	r27, 0xEC	; 236
    3f6c:	2c 93       	st	X, r18
    3f6e:	2d e9       	ldi	r18, 0x9D	; 157
    3f70:	24 bf       	out	0x34, r18	; 52
    3f72:	23 e0       	ldi	r18, 0x03	; 3
    3f74:	20 83       	st	Z, r18
    3f76:	01 96       	adiw	r24, 0x01	; 1
    3f78:	bf 91       	pop	r27
    3f7a:	af 91       	pop	r26
    3f7c:	08 95       	ret

00003f7e <eeprom_read_byte>:
    3f7e:	03 d0       	rcall	.+6      	; 0x3f86 <eeprom_mapen>
    3f80:	80 81       	ld	r24, Z
    3f82:	99 27       	eor	r25, r25
    3f84:	08 95       	ret

00003f86 <eeprom_mapen>:
    3f86:	fc 01       	movw	r30, r24
    3f88:	e0 50       	subi	r30, 0x00	; 0
    3f8a:	fc 4e       	sbci	r31, 0xEC	; 236
    3f8c:	08 95       	ret

00003f8e <memcpy>:
    3f8e:	fb 01       	movw	r30, r22
    3f90:	dc 01       	movw	r26, r24
    3f92:	02 c0       	rjmp	.+4      	; 0x3f98 <memcpy+0xa>
    3f94:	01 90       	ld	r0, Z+
    3f96:	0d 92       	st	X+, r0
    3f98:	41 50       	subi	r20, 0x01	; 1
    3f9a:	50 40       	sbci	r21, 0x00	; 0
    3f9c:	d8 f7       	brcc	.-10     	; 0x3f94 <memcpy+0x6>
    3f9e:	08 95       	ret

00003fa0 <_exit>:
    3fa0:	f8 94       	cli

00003fa2 <__stop_program>:
    3fa2:	ff cf       	rjmp	.-2      	; 0x3fa2 <__stop_program>
